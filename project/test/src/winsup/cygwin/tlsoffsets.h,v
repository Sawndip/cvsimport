head	1.60;
access;
symbols
	cygwin-1_7_35-release:1.60
	cygwin-1_7_34-release:1.60
	cygwin-1_7_33-release:1.53.2.2
	cygwin-1_7_32-release:1.53.2.2
	cygwin-1_7_31-release:1.53.2.2
	cygwin-1_7_30-release:1.53.2.1
	cygwin-1_7_29-release:1.53.2.1
	cygwin-1_7_29-release-branchpoint:1.53.0.2
	cygwin-pre-user-db:1.53
	cygwin-1_7_28-release:1.53
	cygwin-1_7_27-release:1.53
	cygwin-1_7_26-release:1.53
	cygwin-1_7_25-release:1.53
	cygwin-1_7_24-release:1.53
	cygwin-1_7_23-release:1.53
	cygwin-1_7_22-release:1.53
	cygwin-1_7_21-release:1.53
	cygwin-1_7_20-release:1.53
	cygwin-1_7_19-release:1.53
	cygwin-64bit-postmerge:1.53
	cygwin-64bit-premerge-branch:1.52.0.2
	cygwin-64bit-premerge:1.52
	cygwin-1_7_18-release:1.52
	post-ptmalloc3:1.51.2.2
	pre-ptmalloc3:1.51.2.2
	cygwin-1_7_17-release:1.51
	cygwin-64bit-branch:1.51.0.2
	cygwin-1_7_16-release:1.49
	cygwin-1_7_15-release:1.48
	cygwin-1_7_14_2-release:1.48
	cygwin-1_7_14-release:1.48
	cygwin-1_7_12-release:1.48
	cygwin-1_7_11-release:1.48
	cygwin-1_7_10-release:1.48
	signal-rewrite:1.48.0.2
	pre-notty:1.47
	cygwin-1_7_9-release:1.42
	cv-post-1_7_9:1.42.0.2
	cygwin-1_7_8-release:1.42
	cygwin-1_7_7-release:1.42
	cygwin-1_7_5-release:1.42
	cygwin-1_7_4-release:1.42
	cygwin-1_7_3-release:1.42
	cygwin-1_7_2-release:1.42
	fifo_doover3:1.39.0.2
	cygwin-1_7_1-release:1.39
	prefifo:1.39
	cv-branch-2:1.38.0.2
	pre-ripout-set_console_state_for_spawn:1.36
	EOL_registry_mounts:1.35
	preoverlapped:1.34
	drop_9x_support_start:1.34
	cr-0x5f1:1.33.0.4
	cv-branch:1.33.0.2
	pre-ptymaster-archetype:1.31
	cr-0x3b58:1.27.0.4
	cr-0x5ef:1.27.0.2
	after-mmap-privanon-noreserve:1.24
	after-mmap-revamp:1.24
	before-mmap-revamp:1.24
	cgf-more-exit-sync:1.24
	post_wait_sig_exit:1.24
	pre_wait_sig_exit:1.21
	reparent-point:1.15
	noreparent:1.15.0.2
	cr-0x5e6:1.13.0.2
	cr-0x9e:1.4.0.4
	cr-0x9d:1.4.0.2
	cgf-deleteme:1.3.0.2;
locks; strict;
comment	@ * @;


1.60
date	2014.08.25.14.53.49;	author corinna;	state Exp;
branches;
next	1.59;

1.59
date	2014.08.22.09.21.32;	author corinna;	state Exp;
branches;
next	1.58;

1.58
date	2014.04.18.14.29.49;	author corinna;	state Exp;
branches;
next	1.57;

1.57
date	2014.04.04.16.45.28;	author corinna;	state Exp;
branches;
next	1.56;

1.56
date	2014.03.12.17.36.56;	author corinna;	state Exp;
branches;
next	1.55;

1.55
date	2014.02.17.15.36.33;	author corinna;	state Exp;
branches;
next	1.54;

1.54
date	2014.02.09.19.44.56;	author corinna;	state Exp;
branches;
next	1.53;

1.53
date	2013.04.23.09.44.34;	author corinna;	state Exp;
branches
	1.53.2.1;
next	1.52;

1.52
date	2012.12.04.20.26.18;	author cgf;	state Exp;
branches;
next	1.51;

1.51
date	2012.07.29.21.43.29;	author cgf;	state Exp;
branches
	1.51.2.1;
next	1.50;

1.50
date	2012.07.21.22.58.20;	author cgf;	state Exp;
branches;
next	1.49;

1.49
date	2012.07.20.09.45.34;	author corinna;	state Exp;
branches;
next	1.48;

1.48
date	2011.08.03.16.40.48;	author yselkowitz;	state Exp;
branches;
next	1.47;

1.47
date	2011.05.28.18.17.09;	author cgf;	state Exp;
branches;
next	1.46;

1.46
date	2011.05.25.18.47.32;	author ericb;	state Exp;
branches;
next	1.45;

1.45
date	2011.05.16.15.12.35;	author corinna;	state Exp;
branches;
next	1.44;

1.44
date	2011.04.21.08.10.28;	author corinna;	state Exp;
branches;
next	1.43;

1.43
date	2011.03.29.11.18.20;	author corinna;	state Exp;
branches;
next	1.42;

1.42
date	2010.02.28.15.54.25;	author cgf;	state Exp;
branches
	1.42.2.1;
next	1.41;

1.41
date	2010.02.26.21.36.31;	author cgf;	state Exp;
branches;
next	1.40;

1.40
date	2010.02.10.03.17.32;	author cgf;	state Exp;
branches;
next	1.39;

1.39
date	2009.07.06.23.19.08;	author cgf;	state Exp;
branches;
next	1.38;

1.38
date	2008.12.13.21.05.31;	author cgf;	state Exp;
branches;
next	1.37;

1.37
date	2008.09.16.02.04.27;	author cgf;	state Exp;
branches;
next	1.36;

1.36
date	2008.05.22.20.32.15;	author corinna;	state Exp;
branches;
next	1.35;

1.35
date	2008.03.07.11.24.51;	author corinna;	state Exp;
branches;
next	1.34;

1.34
date	2006.07.25.19.23.23;	author corinna;	state Exp;
branches;
next	1.33;

1.33
date	2006.06.04.05.12.38;	author cgf;	state Exp;
branches
	1.33.2.1;
next	1.32;

1.32
date	2006.06.03.02.58.59;	author cgf;	state Exp;
branches;
next	1.31;

1.31
date	2006.05.25.02.33.12;	author cgf;	state Exp;
branches;
next	1.30;

1.30
date	2006.05.16.03.14.24;	author cgf;	state Exp;
branches;
next	1.29;

1.29
date	2006.03.13.04.26.57;	author cgf;	state Exp;
branches;
next	1.28;

1.28
date	2006.02.06.18.24.06;	author cgf;	state Exp;
branches;
next	1.27;

1.27
date	2005.12.23.22.50.20;	author cgf;	state Exp;
branches;
next	1.26;

1.26
date	2005.12.03.05.01.51;	author cgf;	state Exp;
branches;
next	1.25;

1.25
date	2005.12.03.04.23.35;	author cgf;	state Exp;
branches;
next	1.24;

1.24
date	2005.09.23.19.24.03;	author cgf;	state Exp;
branches;
next	1.23;

1.23
date	2005.09.23.03.40.57;	author cgf;	state Exp;
branches;
next	1.22;

1.22
date	2005.09.14.21.26.15;	author cgf;	state Exp;
branches;
next	1.21;

1.21
date	2005.08.28.17.30.33;	author cgf;	state Exp;
branches;
next	1.20;

1.20
date	2005.07.03.02.40.30;	author cgf;	state Exp;
branches;
next	1.19;

1.19
date	2005.06.09.22.33.57;	author cgf;	state Exp;
branches;
next	1.18;

1.18
date	2005.05.18.23.30.02;	author cgf;	state Exp;
branches;
next	1.17;

1.17
date	2005.03.31.15.37.12;	author cgf;	state Exp;
branches;
next	1.16;

1.16
date	2004.11.26.04.15.09;	author cgf;	state Exp;
branches;
next	1.15;

1.15
date	2004.10.11.02.21.31;	author cgf;	state Exp;
branches
	1.15.2.1;
next	1.14;

1.14
date	2004.09.14.23.44.50;	author cgf;	state Exp;
branches;
next	1.13;

1.13
date	2004.03.12.03.09.28;	author cgf;	state Exp;
branches;
next	1.12;

1.12
date	2004.03.09.01.24.08;	author cgf;	state Exp;
branches;
next	1.11;

1.11
date	2004.03.07.04.57.47;	author cgf;	state Exp;
branches;
next	1.10;

1.10
date	2004.02.25.04.08.00;	author cgf;	state Exp;
branches;
next	1.9;

1.9
date	2004.02.13.19.34.32;	author cgf;	state Exp;
branches;
next	1.8;

1.8
date	2004.02.08.19.59.27;	author cgf;	state Exp;
branches;
next	1.7;

1.7
date	2004.02.03.22.04.27;	author cgf;	state Exp;
branches;
next	1.6;

1.6
date	2004.02.03.21.59.26;	author cgf;	state Exp;
branches;
next	1.5;

1.5
date	2004.01.19.05.46.54;	author cgf;	state Exp;
branches;
next	1.4;

1.4
date	2004.01.14.15.45.37;	author cgf;	state Exp;
branches;
next	1.3;

1.3
date	2003.12.30.03.59.45;	author cgf;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	2003.12.23.16.26.31;	author cgf;	state Exp;
branches;
next	1.1;

1.1
date	2003.11.28.21.01.09;	author cgf;	state Exp;
branches;
next	;

1.53.2.1
date	2014.04.04.16.45.33;	author corinna;	state Exp;
branches;
next	1.53.2.2;

1.53.2.2
date	2014.07.16.08.01.00;	author corinna;	state Exp;
branches;
next	;

1.51.2.1
date	2012.08.13.20.04.35;	author corinna;	state Exp;
branches;
next	1.51.2.2;

1.51.2.2
date	2012.12.05.09.38.38;	author corinna;	state Exp;
branches;
next	;

1.42.2.1
date	2011.03.16.12.20.17;	author corinna;	state Exp;
branches;
next	;

1.33.2.1
date	2006.07.25.17.02.36;	author corinna;	state Exp;
branches;
next	;

1.15.2.1
date	2004.11.16.15.16.57;	author cgf;	state Exp;
branches;
next	;

1.3.2.1
date	2004.01.11.18.13.52;	author cgf;	state Exp;
branches;
next	1.3.2.2;

1.3.2.2
date	2004.01.12.05.15.19;	author cgf;	state Exp;
branches;
next	1.3.2.3;

1.3.2.3
date	2004.01.17.04.13.20;	author cgf;	state Exp;
branches;
next	;


desc
@@


1.60
log
@	* cygtls.cc (_cygtls::remove): Revert previous patch.
	*  cygtls.h (struct _local_storage): Move pathbufs back here.
	(class san/x86_64): Revert class.  Save and restore pathbufs counters
	only.
	(class san/i686): Revert saving and restoring pathbufs counters.
	(__try/x86_64): Add a san variable and call it's setup method.
	(__except/x86_64): Call san::leave to restore pathbufs counters.
	* gendef (_sigbe): Revert previous change.
	* thread.cc (verifyable_object_state): Remove gcc 4.7 workaround in
	forward declaration as well.
	* tls_pbuf.cc (tls_pbuf): Revert previous change.
	* tls_pbuf.h (class tmp_pathbuf): Accommodate reverting pathbufs to
	locals structure.
	* tlsoffsets.h: Regenerate.
	* tlsoffsets64.h: Regenerate.
@
text
@//;# autogenerated:  Do not edit.

//; $tls::start_offset = -12700;
//; $tls::locals = -12700;
//; $tls::plocals = 0;
//; $tls::local_clib = -10980;
//; $tls::plocal_clib = 1720;
//; $tls::__dontuse = -10980;
//; $tls::p__dontuse = 1720;
//; $tls::func = -9892;
//; $tls::pfunc = 2808;
//; $tls::saved_errno = -9888;
//; $tls::psaved_errno = 2812;
//; $tls::sa_flags = -9884;
//; $tls::psa_flags = 2816;
//; $tls::oldmask = -9880;
//; $tls::poldmask = 2820;
//; $tls::deltamask = -9876;
//; $tls::pdeltamask = 2824;
//; $tls::errno_addr = -9872;
//; $tls::perrno_addr = 2828;
//; $tls::sigmask = -9868;
//; $tls::psigmask = 2832;
//; $tls::sigwait_mask = -9864;
//; $tls::psigwait_mask = 2836;
//; $tls::sigwait_info = -9860;
//; $tls::psigwait_info = 2840;
//; $tls::signal_arrived = -9856;
//; $tls::psignal_arrived = 2844;
//; $tls::will_wait_for_signal = -9852;
//; $tls::pwill_wait_for_signal = 2848;
//; $tls::thread_context = -9848;
//; $tls::pthread_context = 2852;
//; $tls::thread_id = -9636;
//; $tls::pthread_id = 3064;
//; $tls::infodata = -9632;
//; $tls::pinfodata = 3068;
//; $tls::tid = -9484;
//; $tls::ptid = 3216;
//; $tls::_ctinfo = -9480;
//; $tls::p_ctinfo = 3220;
//; $tls::andreas = -9476;
//; $tls::pandreas = 3224;
//; $tls::wq = -9472;
//; $tls::pwq = 3228;
//; $tls::sig = -9444;
//; $tls::psig = 3256;
//; $tls::incyg = -9440;
//; $tls::pincyg = 3260;
//; $tls::spinning = -9436;
//; $tls::pspinning = 3264;
//; $tls::stacklock = -9432;
//; $tls::pstacklock = 3268;
//; $tls::stackptr = -9428;
//; $tls::pstackptr = 3272;
//; $tls::stack = -9424;
//; $tls::pstack = 3276;
//; $tls::initialized = -8400;
//; $tls::pinitialized = 4300;
//; __DATA__

#define tls_locals (-12700)
#define tls_plocals (0)
#define tls_local_clib (-10980)
#define tls_plocal_clib (1720)
#define tls___dontuse (-10980)
#define tls_p__dontuse (1720)
#define tls_func (-9892)
#define tls_pfunc (2808)
#define tls_saved_errno (-9888)
#define tls_psaved_errno (2812)
#define tls_sa_flags (-9884)
#define tls_psa_flags (2816)
#define tls_oldmask (-9880)
#define tls_poldmask (2820)
#define tls_deltamask (-9876)
#define tls_pdeltamask (2824)
#define tls_errno_addr (-9872)
#define tls_perrno_addr (2828)
#define tls_sigmask (-9868)
#define tls_psigmask (2832)
#define tls_sigwait_mask (-9864)
#define tls_psigwait_mask (2836)
#define tls_sigwait_info (-9860)
#define tls_psigwait_info (2840)
#define tls_signal_arrived (-9856)
#define tls_psignal_arrived (2844)
#define tls_will_wait_for_signal (-9852)
#define tls_pwill_wait_for_signal (2848)
#define tls_thread_context (-9848)
#define tls_pthread_context (2852)
#define tls_thread_id (-9636)
#define tls_pthread_id (3064)
#define tls_infodata (-9632)
#define tls_pinfodata (3068)
#define tls_tid (-9484)
#define tls_ptid (3216)
#define tls__ctinfo (-9480)
#define tls_p_ctinfo (3220)
#define tls_andreas (-9476)
#define tls_pandreas (3224)
#define tls_wq (-9472)
#define tls_pwq (3228)
#define tls_sig (-9444)
#define tls_psig (3256)
#define tls_incyg (-9440)
#define tls_pincyg (3260)
#define tls_spinning (-9436)
#define tls_pspinning (3264)
#define tls_stacklock (-9432)
#define tls_pstacklock (3268)
#define tls_stackptr (-9428)
#define tls_pstackptr (3272)
#define tls_stack (-9424)
#define tls_pstack (3276)
#define tls_initialized (-8400)
#define tls_pinitialized (4300)
@


1.59
log
@	* Throughout, use __try/__except/__endtry blocks, rather than myfault
	handler.
	* cygtls.cc (_cygtls::remove): Accommodate the fact that pathbufs
	has been moved from _local_storage to _cygtls.
	* cygtls.h (class tls_pathbuf): Add comment to hint to gendef usage
	of counters.  Change type of counters to uint32_t for clarity.
	Remove _cygtls as friend class.
	(struct _local_storage): Move pathbufs from here...
	(struct _cygtls): ...to here, allowing to access it from _sigbe.
	(class san): Only define on 32 bit.  Remove errno, _c_cnt and _w_cnt
	members.
	(san::setup): Drop parameter.  Don't initialize removed members.
	(san::leave): Don't set removed members.
	(class myfault): Only define on 32 bit.
	(myfault::faulted): Only keep implementation not taking any parameter.
	Drop argument in call to sebastian.setup.
	(__try/__leave/__except/__endtry): Implement to support real SEH.  For
	now stick to SJLJ on 32 bit.
	* dcrt0.cc (dll_crt0_0): Drop 64 bit call to
	exception::install_myfault_handler.
	* exception.h (exception_handler): Define with EXCEPTION_DISPOSITION
	as return type.
	(PDISPATCHER_CONTEXT): Define as void * on 32 bit.  Define as pointer
	to _DISPATCHER_CONTEXT on 64 bit.
	(class exception): Define separately for 32 and 64 bit.
	(exception::myfault): Add handler for myfault SEH handling on 64 bit.
	(exception::exception): Fix mangled method name to account for change
	in type of last parameter.
	(exception::install_myfault_handler): Remove.
	* exceptions.cc (exception::myfault_handle): Remove.
	(exception::myfault): New SEH handler for 64 bit.
	* gendef (_sigbe): Set tls_pathbuf counters to 0 explicitely when
	returning to the caller.
	* ntdll.h: Move a comment to a better place.
	(struct _SCOPE_TABLE): Define on 64 bit.
	* thread.cc (verifyable_object_isvalid): Remove gcc 4.7 workaround.
	* tls_pbuf.cc (tls_pbuf): Fix to accommodate new place of pathbufs.
	(tls_pathbuf::destroy): Change type of loop variables to uint32_t.
	* tls_pbuf.h (class tmp_pathbuf): Change type of buffer counters to
	uint32_t.  Accommodate new place of pathbufs.
	* tlsoffsets.h: Regenerate.
	* tlsoffsets64.h: Regenerate.
@
text
@d6 38
a43 40
//; $tls::local_clib = -11388;
//; $tls::plocal_clib = 1312;
//; $tls::__dontuse = -11388;
//; $tls::p__dontuse = 1312;
//; $tls::func = -10300;
//; $tls::pfunc = 2400;
//; $tls::saved_errno = -10296;
//; $tls::psaved_errno = 2404;
//; $tls::sa_flags = -10292;
//; $tls::psa_flags = 2408;
//; $tls::oldmask = -10288;
//; $tls::poldmask = 2412;
//; $tls::deltamask = -10284;
//; $tls::pdeltamask = 2416;
//; $tls::errno_addr = -10280;
//; $tls::perrno_addr = 2420;
//; $tls::sigmask = -10276;
//; $tls::psigmask = 2424;
//; $tls::sigwait_mask = -10272;
//; $tls::psigwait_mask = 2428;
//; $tls::sigwait_info = -10268;
//; $tls::psigwait_info = 2432;
//; $tls::signal_arrived = -10264;
//; $tls::psignal_arrived = 2436;
//; $tls::will_wait_for_signal = -10260;
//; $tls::pwill_wait_for_signal = 2440;
//; $tls::thread_context = -10256;
//; $tls::pthread_context = 2444;
//; $tls::thread_id = -10044;
//; $tls::pthread_id = 2656;
//; $tls::infodata = -10040;
//; $tls::pinfodata = 2660;
//; $tls::tid = -9892;
//; $tls::ptid = 2808;
//; $tls::_ctinfo = -9888;
//; $tls::p_ctinfo = 2812;
//; $tls::andreas = -9884;
//; $tls::pandreas = 2816;
//; $tls::pathbufs = -9880;
//; $tls::ppathbufs = 2820;
d64 38
a101 40
#define tls_local_clib (-11388)
#define tls_plocal_clib (1312)
#define tls___dontuse (-11388)
#define tls_p__dontuse (1312)
#define tls_func (-10300)
#define tls_pfunc (2400)
#define tls_saved_errno (-10296)
#define tls_psaved_errno (2404)
#define tls_sa_flags (-10292)
#define tls_psa_flags (2408)
#define tls_oldmask (-10288)
#define tls_poldmask (2412)
#define tls_deltamask (-10284)
#define tls_pdeltamask (2416)
#define tls_errno_addr (-10280)
#define tls_perrno_addr (2420)
#define tls_sigmask (-10276)
#define tls_psigmask (2424)
#define tls_sigwait_mask (-10272)
#define tls_psigwait_mask (2428)
#define tls_sigwait_info (-10268)
#define tls_psigwait_info (2432)
#define tls_signal_arrived (-10264)
#define tls_psignal_arrived (2436)
#define tls_will_wait_for_signal (-10260)
#define tls_pwill_wait_for_signal (2440)
#define tls_thread_context (-10256)
#define tls_pthread_context (2444)
#define tls_thread_id (-10044)
#define tls_pthread_id (2656)
#define tls_infodata (-10040)
#define tls_pinfodata (2660)
#define tls_tid (-9892)
#define tls_ptid (2808)
#define tls__ctinfo (-9888)
#define tls_p_ctinfo (2812)
#define tls_andreas (-9884)
#define tls_pandreas (2816)
#define tls_pathbufs (-9880)
#define tls_ppathbufs (2820)
@


1.58
log
@	* cygtls.h (TP_NUM_C_BUFS): Raise to 50 to allow SYMLOOP_MAX recursions
	path_conv <-> normalize_posix_path, plus a bit of buffer.
	(TP_NUM_W_BUFS): Ditto.
	(class san): Change type of _c_cnt and _w_cnt to unsigned.
	* path.cc (normalize_posix_path): Guard recursion into path_conv
	against tmp_pathbuf overflow.  Generate normalized path in call to
	path_conv.  If the path is valid, replace dst with the normalized_path
	from path_conv call.  Add comment to explain why we're doing this.
	* tls_pbuf.cc (tls_pathbuf::destroy): Only free buffers until the
	first buffer pointer is NULL.
	(tmp_pathbuf::c_get): Simplify error message.
	(tmp_pathbuf::w_get): Ditto.
	* tls_pbuf.h (class tmp_pathbuf): Change type of c_buf_old and w_buf_old
	to unsigned.
	(tmp_pathbuf::check_usage): New inline method to check if we have
	enough tmp_pathbuf buffers left to call a function using tmp_pathbuf
	buffers.
	* tlsoffsets.h: Regenerate.
	* tlsoffsets64.h: Regenerate.
@
text
@d6 40
a45 38
//; $tls::local_clib = -10980;
//; $tls::plocal_clib = 1720;
//; $tls::__dontuse = -10980;
//; $tls::p__dontuse = 1720;
//; $tls::func = -9892;
//; $tls::pfunc = 2808;
//; $tls::saved_errno = -9888;
//; $tls::psaved_errno = 2812;
//; $tls::sa_flags = -9884;
//; $tls::psa_flags = 2816;
//; $tls::oldmask = -9880;
//; $tls::poldmask = 2820;
//; $tls::deltamask = -9876;
//; $tls::pdeltamask = 2824;
//; $tls::errno_addr = -9872;
//; $tls::perrno_addr = 2828;
//; $tls::sigmask = -9868;
//; $tls::psigmask = 2832;
//; $tls::sigwait_mask = -9864;
//; $tls::psigwait_mask = 2836;
//; $tls::sigwait_info = -9860;
//; $tls::psigwait_info = 2840;
//; $tls::signal_arrived = -9856;
//; $tls::psignal_arrived = 2844;
//; $tls::will_wait_for_signal = -9852;
//; $tls::pwill_wait_for_signal = 2848;
//; $tls::thread_context = -9848;
//; $tls::pthread_context = 2852;
//; $tls::thread_id = -9636;
//; $tls::pthread_id = 3064;
//; $tls::infodata = -9632;
//; $tls::pinfodata = 3068;
//; $tls::tid = -9484;
//; $tls::ptid = 3216;
//; $tls::_ctinfo = -9480;
//; $tls::p_ctinfo = 3220;
//; $tls::andreas = -9476;
//; $tls::pandreas = 3224;
d66 40
a105 38
#define tls_local_clib (-10980)
#define tls_plocal_clib (1720)
#define tls___dontuse (-10980)
#define tls_p__dontuse (1720)
#define tls_func (-9892)
#define tls_pfunc (2808)
#define tls_saved_errno (-9888)
#define tls_psaved_errno (2812)
#define tls_sa_flags (-9884)
#define tls_psa_flags (2816)
#define tls_oldmask (-9880)
#define tls_poldmask (2820)
#define tls_deltamask (-9876)
#define tls_pdeltamask (2824)
#define tls_errno_addr (-9872)
#define tls_perrno_addr (2828)
#define tls_sigmask (-9868)
#define tls_psigmask (2832)
#define tls_sigwait_mask (-9864)
#define tls_psigwait_mask (2836)
#define tls_sigwait_info (-9860)
#define tls_psigwait_info (2840)
#define tls_signal_arrived (-9856)
#define tls_psignal_arrived (2844)
#define tls_will_wait_for_signal (-9852)
#define tls_pwill_wait_for_signal (2848)
#define tls_thread_context (-9848)
#define tls_pthread_context (2852)
#define tls_thread_id (-9636)
#define tls_pthread_id (3064)
#define tls_infodata (-9632)
#define tls_pinfodata (3068)
#define tls_tid (-9484)
#define tls_ptid (3216)
#define tls__ctinfo (-9480)
#define tls_p_ctinfo (3220)
#define tls_andreas (-9476)
#define tls_pandreas (3224)
@


1.57
log
@Forced checkin
@
text
@d6 54
a59 54
//; $tls::local_clib = -11300;
//; $tls::plocal_clib = 1400;
//; $tls::__dontuse = -11300;
//; $tls::p__dontuse = 1400;
//; $tls::func = -10212;
//; $tls::pfunc = 2488;
//; $tls::saved_errno = -10208;
//; $tls::psaved_errno = 2492;
//; $tls::sa_flags = -10204;
//; $tls::psa_flags = 2496;
//; $tls::oldmask = -10200;
//; $tls::poldmask = 2500;
//; $tls::deltamask = -10196;
//; $tls::pdeltamask = 2504;
//; $tls::errno_addr = -10192;
//; $tls::perrno_addr = 2508;
//; $tls::sigmask = -10188;
//; $tls::psigmask = 2512;
//; $tls::sigwait_mask = -10184;
//; $tls::psigwait_mask = 2516;
//; $tls::sigwait_info = -10180;
//; $tls::psigwait_info = 2520;
//; $tls::signal_arrived = -10176;
//; $tls::psignal_arrived = 2524;
//; $tls::will_wait_for_signal = -10172;
//; $tls::pwill_wait_for_signal = 2528;
//; $tls::thread_context = -10168;
//; $tls::pthread_context = 2532;
//; $tls::thread_id = -9956;
//; $tls::pthread_id = 2744;
//; $tls::infodata = -9952;
//; $tls::pinfodata = 2748;
//; $tls::tid = -9804;
//; $tls::ptid = 2896;
//; $tls::_ctinfo = -9800;
//; $tls::p_ctinfo = 2900;
//; $tls::andreas = -9796;
//; $tls::pandreas = 2904;
//; $tls::wq = -9792;
//; $tls::pwq = 2908;
//; $tls::sig = -9764;
//; $tls::psig = 2936;
//; $tls::incyg = -9760;
//; $tls::pincyg = 2940;
//; $tls::spinning = -9756;
//; $tls::pspinning = 2944;
//; $tls::stacklock = -9752;
//; $tls::pstacklock = 2948;
//; $tls::stackptr = -9748;
//; $tls::pstackptr = 2952;
//; $tls::stack = -9744;
//; $tls::pstack = 2956;
//; $tls::initialized = -8720;
//; $tls::pinitialized = 3980;
d64 54
a117 54
#define tls_local_clib (-11300)
#define tls_plocal_clib (1400)
#define tls___dontuse (-11300)
#define tls_p__dontuse (1400)
#define tls_func (-10212)
#define tls_pfunc (2488)
#define tls_saved_errno (-10208)
#define tls_psaved_errno (2492)
#define tls_sa_flags (-10204)
#define tls_psa_flags (2496)
#define tls_oldmask (-10200)
#define tls_poldmask (2500)
#define tls_deltamask (-10196)
#define tls_pdeltamask (2504)
#define tls_errno_addr (-10192)
#define tls_perrno_addr (2508)
#define tls_sigmask (-10188)
#define tls_psigmask (2512)
#define tls_sigwait_mask (-10184)
#define tls_psigwait_mask (2516)
#define tls_sigwait_info (-10180)
#define tls_psigwait_info (2520)
#define tls_signal_arrived (-10176)
#define tls_psignal_arrived (2524)
#define tls_will_wait_for_signal (-10172)
#define tls_pwill_wait_for_signal (2528)
#define tls_thread_context (-10168)
#define tls_pthread_context (2532)
#define tls_thread_id (-9956)
#define tls_pthread_id (2744)
#define tls_infodata (-9952)
#define tls_pinfodata (2748)
#define tls_tid (-9804)
#define tls_ptid (2896)
#define tls__ctinfo (-9800)
#define tls_p_ctinfo (2900)
#define tls_andreas (-9796)
#define tls_pandreas (2904)
#define tls_wq (-9792)
#define tls_pwq (2908)
#define tls_sig (-9764)
#define tls_psig (2936)
#define tls_incyg (-9760)
#define tls_pincyg (2940)
#define tls_spinning (-9756)
#define tls_pspinning (2944)
#define tls_stacklock (-9752)
#define tls_pstacklock (2948)
#define tls_stackptr (-9748)
#define tls_pstackptr (2952)
#define tls_stack (-9744)
#define tls_pstack (2956)
#define tls_initialized (-8720)
#define tls_pinitialized (3980)
@


1.56
log
@	* cygheap.h (enum cygheap_pwdgrp::cache_t): Remove.
	(cygheap_pwdgrp::caching): Convert to bool.
	(cygheap_pwdgrp::pwd_cache): Add cygserver member.
	(cygheap_pwdgrp::grp_cache): Ditto.
	(cygheap_pwdgrp::nss_db_caching): Drop.
	(cygheap_pwdgrp::nss_db_full_caching): Drop.
	(cygheap_pwdgrp::nss_cygserver_caching): New method.
	(cygheap_pwdgrp::nss_disable_cygserver_caching): New method.
	* cygserver.h (client_request::request_code_t): Add
	CYGSERVER_REQUEST_PWDGRP.
	* cygserver_pwdgrp.h: New file.
	* cygtls.h (struct _local_storage): Remove pwbuf and grbuf members.
	* grp.cc (pwdgrp::prep_tls_grbuf): Drop.
	(internal_getgrsid): Handle cygserver caching and rearrange to check
	the caches first.
	(internal_getgrnam): Ditto.
	(internal_getgrgid): Ditto.
	(gr_ent::enumerate_caches): Handle cygserver cache.
	* passwd.cc (pwdgrp::prep_tls_pwbuf): Drop.
	(internal_getpwsid): Handle cygserver caching and rearrange to check
	the caches first.
	(internal_getpwnam): Ditto.
	(internal_getpwuid): Ditto.
	(pw_ent::enumerate_caches): Handle cygserver cache.
	* pwdgrp.h (pwdgrp::add_account_from_cygserver): New method declaration.
	(pwdgrp::fetch_account_from_cygserver): New method declaration.
	(pwdgrp::prep_tls_pwbuf): Drop declaration.
	(pwdgrp::prep_tls_grbuf): Drop declaration.
	(pwdgrp::add_user_from_cygserver): New inline methods.
	(pwdgrp::add_group_from_cygserver): New inline methods.
	* tlsoffsets.h: Regenerate.
	* tlsoffsets64.h: Regenerate.
	* uinfo.cc (internal_getlogin): Call internal_getgroups if cygserver
	caching is not available.
	(cygheap_pwdgrp::init): Initialize pwd_cache.cygserver and
	grp_cache.cygserver.  Set caching to true.
	(cygheap_pwdgrp::nss_init_line): Drop db_cache handling entirely.
	(pwdgrp::add_account_from_windows): Drop no caching handling.
	(client_request_pwdgrp::client_request_pwdgrp): New method.
	(pwdgrp::fetch_account_from_cygserver): New method.
	(pwdgrp::add_account_from_cygserver): New method.

	* fhandler_disk_file.cc (fhandler_base::fstat_helper): Fix formatting.
	* include/sys/cygwin.h: Ditto.
@
text
@@


1.55
log
@	* autoload.cc (ldap_abandon): Import.
	(ldap_result): Import.
	(ldap_searchW): Import.
	(NetGroupEnum): Import.
	(NetLocalGroupEnum): Import.
	(NetUserEnum): Import.
	* cygheap.h (class cygheap_pwdgrp): Add members enums and enum_tdoms.
	(cygheap_pwdgrp::nss_db_enums): New inline method.
	(cygheap_pwdgrp::nss_db_enum_tdoms): Ditto.
	* cygtls.h (struct _local_storage): Drop unused members pw_pos and
	grp_pos.
	* grp.cc (grent): New static variable of class gr_ent.
	(gr_ent::enumerate_caches): New method.
	(gr_ent::enumerate_local): New method.
	(gr_ent::getgrent): New method.
	(setgrent): Call gr_ent method.
	(getgrent32): Ditto.
	(endgrent): Ditto.
	* ldap.cc (sid_attr): Rename from nfs_attr.
	(cyg_ldap::close): Abandon still running asynchronous search.
	(cyg_ldap::fetch_ad_account): Reduce filter buffer size.
	(cyg_ldap::enumerate_ad_accounts): New method.
	(cyg_ldap::next_account): New method.
	(cyg_ldap::fetch_posix_offset_for_domain): Reduce filter buffer size.
	(cyg_ldap::fetch_unix_sid_from_ad): Ditto.  Fix return value in case
	no value has been read.
	(cyg_ldap::fetch_unix_name_from_rfc2307): Reduce filter buffer size.
	* ldap.h (class cyg_ldap): Add msg_id member.
	(cyg_ldap::enumerate_ad_accounts): Declare.
	(cyg_ldap::next_account): Declare:
	* passwd.cc (pwent): New static variable of class pw_ent.
	(pg_ent::clear_cache): New method.
	(pg_ent::setent): New method.
	(pg_ent::getent): New method.
	(pg_ent::endent): New method.
	(pg_ent::enumerate_file): New method.
	(pg_ent::enumerate_builtin): New method.
	(pg_ent::enumerate_sam): New method.
	(pg_ent::enumerate_ad): New method.
	(pw_ent::enumerate_caches): New method.
	(pw_ent::enumerate_local): New method.
	(pw_ent::getpwent): New method.
	(setpwent): Call pw_ent method.
	(getpwent): Ditto.
	(endpwent): Ditto.
	* pwdgrp.h (class pwdgrp): Define pg_ent, pw_ent and gr_ent as friend
	classes.
	(pwdgrp::add_account_post_fetch): Declare with extra bool parameter.
	(pwdgrp::file_attr): New inline method.
	(enum nss_enum_t): Define.
	(class pg_ent): Define.
	(class pw_ent): Define.
	(class gr_ent): Define.
	* tlsoffsets.h: Regenerate.
	* tlsoffsets64.h: Ditto.
	* uinfo.cc (cygheap_pwdgrp::init): Initialize enums and enum_tdoms.
	(cygheap_pwdgrp::nss_init_line): Fix typo in preceeding comment.
	Handle new "db_enum" keyword.
	(pwdgrp::add_account_post_fetch): Take additional `bool lock' parameter
	and acquire pglock before adding element to array if lock is true.
	(pwdgrp::add_account_from_file): Call add_account_post_fetch with lock
	set to true.
	(pwdgrp::add_account_from_windows): Ditto in case of caching.
	(pwdgrp::fetch_account_from_windows): Handle builtin aliases only
	known to the domain controller.  Only call NetLocalGroupGetInfo for
	aliases.
@
text
@d6 54
a59 54
//; $tls::local_clib = -11292;
//; $tls::plocal_clib = 1408;
//; $tls::__dontuse = -11292;
//; $tls::p__dontuse = 1408;
//; $tls::func = -10204;
//; $tls::pfunc = 2496;
//; $tls::saved_errno = -10200;
//; $tls::psaved_errno = 2500;
//; $tls::sa_flags = -10196;
//; $tls::psa_flags = 2504;
//; $tls::oldmask = -10192;
//; $tls::poldmask = 2508;
//; $tls::deltamask = -10188;
//; $tls::pdeltamask = 2512;
//; $tls::errno_addr = -10184;
//; $tls::perrno_addr = 2516;
//; $tls::sigmask = -10180;
//; $tls::psigmask = 2520;
//; $tls::sigwait_mask = -10176;
//; $tls::psigwait_mask = 2524;
//; $tls::sigwait_info = -10172;
//; $tls::psigwait_info = 2528;
//; $tls::signal_arrived = -10168;
//; $tls::psignal_arrived = 2532;
//; $tls::will_wait_for_signal = -10164;
//; $tls::pwill_wait_for_signal = 2536;
//; $tls::thread_context = -10160;
//; $tls::pthread_context = 2540;
//; $tls::thread_id = -9948;
//; $tls::pthread_id = 2752;
//; $tls::infodata = -9944;
//; $tls::pinfodata = 2756;
//; $tls::tid = -9796;
//; $tls::ptid = 2904;
//; $tls::_ctinfo = -9792;
//; $tls::p_ctinfo = 2908;
//; $tls::andreas = -9788;
//; $tls::pandreas = 2912;
//; $tls::wq = -9784;
//; $tls::pwq = 2916;
//; $tls::sig = -9756;
//; $tls::psig = 2944;
//; $tls::incyg = -9752;
//; $tls::pincyg = 2948;
//; $tls::spinning = -9748;
//; $tls::pspinning = 2952;
//; $tls::stacklock = -9744;
//; $tls::pstacklock = 2956;
//; $tls::stackptr = -9740;
//; $tls::pstackptr = 2960;
//; $tls::stack = -9736;
//; $tls::pstack = 2964;
//; $tls::initialized = -8712;
//; $tls::pinitialized = 3988;
d64 54
a117 54
#define tls_local_clib (-11292)
#define tls_plocal_clib (1408)
#define tls___dontuse (-11292)
#define tls_p__dontuse (1408)
#define tls_func (-10204)
#define tls_pfunc (2496)
#define tls_saved_errno (-10200)
#define tls_psaved_errno (2500)
#define tls_sa_flags (-10196)
#define tls_psa_flags (2504)
#define tls_oldmask (-10192)
#define tls_poldmask (2508)
#define tls_deltamask (-10188)
#define tls_pdeltamask (2512)
#define tls_errno_addr (-10184)
#define tls_perrno_addr (2516)
#define tls_sigmask (-10180)
#define tls_psigmask (2520)
#define tls_sigwait_mask (-10176)
#define tls_psigwait_mask (2524)
#define tls_sigwait_info (-10172)
#define tls_psigwait_info (2528)
#define tls_signal_arrived (-10168)
#define tls_psignal_arrived (2532)
#define tls_will_wait_for_signal (-10164)
#define tls_pwill_wait_for_signal (2536)
#define tls_thread_context (-10160)
#define tls_pthread_context (2540)
#define tls_thread_id (-9948)
#define tls_pthread_id (2752)
#define tls_infodata (-9944)
#define tls_pinfodata (2756)
#define tls_tid (-9796)
#define tls_ptid (2904)
#define tls__ctinfo (-9792)
#define tls_p_ctinfo (2908)
#define tls_andreas (-9788)
#define tls_pandreas (2912)
#define tls_wq (-9784)
#define tls_pwq (2916)
#define tls_sig (-9756)
#define tls_psig (2944)
#define tls_incyg (-9752)
#define tls_pincyg (2948)
#define tls_spinning (-9748)
#define tls_pspinning (2952)
#define tls_stacklock (-9744)
#define tls_pstacklock (2956)
#define tls_stackptr (-9740)
#define tls_pstackptr (2960)
#define tls_stack (-9736)
#define tls_pstack (2964)
#define tls_initialized (-8712)
#define tls_pinitialized (3988)
@


1.54
log
@	Introduce reading passwd/group entries from SAM/AD.  Introduce
	/etc/nsswitch.conf file to configure it.
	* Makefile.in (DLL_OFILES): Add ldap.o.
	* autoload.cc: Import ldap functions from wldap32.dll.
	(DsEnumerateDomainTrustsW): Import.
	(NetGroupGetInfo): Import.
	* cygheap.h (class cygheap_domain_info): New class to keep global
	domain info.
	(class cygheap_pwdgrp): New class to keep passwd/group caches and
	configuration info from /etc/nssswitch.conf.
	(struct init_cygheap): Add cygheap_domain_info member "dom" and
	cygheap_pwdgrp member "pg".
	* cygtls.h (struct _local_storage): Remove unused member "res".
	Rearrange slightly, Add members pwbuf and grbuf to implement non-caching
	passwd/group fetching from SAM/AD.  Make pw_pos and pw_pos unsigned.
	* fhandler_disk_file.cc (fhandler_base::fstat_by_nfs_ea): Add RFC 2307
	uid/gid mapping.
	* fhandler_process.cc: Drop including pwdgrp.h.
	* fhandler_procsysvipc.cc: Ditto.
	* fhandler_registry.cc (fhandler_registry::fstat): Set key uid/gid
	to ILLEGAL_UID/ILLEGAL_GID rather than UNKNOWN_UID/UNKNOWN_GID.
	* grp.cc (group_buf): Drop.
	(gr): Drop.
	(pwdgrp::parse_group): Fill pg_grp.
	(pwdgrp::read_group): Remove.
	(pwdgrp::init_grp): New method.
	(pwdgrp::prep_tls_grbuf): New method.
	(pwdgrp::find_group): New methods.
	(internal_getgrsid): Convert to call new pwdgrp methods.
	(internal_getgrnam): Ditto.
	(internal_getgrgid): Ditto.
	(getgrgid_r): Drop 2nd parameter from internal_getgrgid call.
	(getgrgid32): Ditto.
	(getgrnam_r): Ditto for internal_getgrnam.
	(getgrnam32): Ditto.
	(getgrent32): Convert to call new pwdgrp methods.
	(internal_getgrent): Remove.
	(internal_getgroups): Simplify, especially drop calls to
	internal_getgrent.
	* ldap.cc: New file implementing cyg_ldap class for LDAP access to AD
	and RFC 2307 server.
	* ldap.h: New header, declaring cyg_ldap class.
	* passwd.cc (passwd_buf): Drop.
	(pr): Drop.
	(pwdgrp::parse_passwd): Fill pg_pwd.
	(pwdgrp::read_passwd): Remove.
	(pwdgrp::init_pwd): New method.
	(pwdgrp::prep_tls_pwbuf): New method.
	(find_user): New methods.
	(internal_getpwsid): Convert to call new pwdgrp methods.
	(internal_getpwnam): Ditto.
	(internal_getpwuid): Ditto.
	(getpwuid32): Drop 2nd parameter from internal_getpwuid call.
	(getpwuid_r): Ditto.
	(getpwnam): Ditto for internal_getpwnam.
	(getpwnam_r): Ditto.
	(getpwent): Convert to call new pwdgrp methods.
	* path.cc (class etc): Remove all methods.
	* path.h (class etc): Drop.
	* pinfo.cc (pinfo_basic::pinfo_basic): Set gid to ILLEGAL_GID rather
	than UNKNOWN_GID.
	(pinfo_init): Ditto.
	* pwdgrp.h (internal_getpwnam): Drop 2nd parameter from declaration.
	(internal_getpwuid): Ditto.
	(internal_getgrgid): Ditto.
	(internal_getgrnam): Ditto.
	(internal_getgrent): Drop declaration.
	(enum fetch_user_arg_type_t): New type.
	(struct fetch_user_arg_t): New type.
	(struct pg_pwd): New type.
	(struct pg_grp): New type.
	(class pwdgrp): Rework to provide functions for file and db requests
	and caching.
	(class ugid_cache_t): New class to provide RFC 2307 uid map caching.
	(ugid_cache): Declare.
	* sec_acl.cc: Drop including pwdgrp.h.
	* sec_auth.cc: Drop including dsgetdc.h and pwdgrp.h.
	(get_logon_server): Convert third parameter to ULONG flags argument
	to allow arbitrary flags values in DsGetDcNameW call and change calls
	to this function throughout.  Use cached account domain name rather
	than calling GetComputerNameW.
	(get_unix_group_sidlist): Remove.
	(get_server_groups): Drop call to get_unix_group_sidlist.
	(verify_token): Rework token group check without calling
	internal_getgrent.
	* sec_helper.cc (cygpsid::pstring): New methods, like string() but
	return pointer to end of string.
	(cygsid::getfromstr): Add wide character implementation.
	(get_sids_info): Add RFC 2307 uid/gid mapping for Samba shares.
	* security.cc: Drop including pwdgrp.h.
	* security.h (DEFAULT_UID): Remove.
	(UNKNOWN_UID): Remove.
	(UNKNOWN_GID): Remove.
	(uinfo_init): Move here from winsup.h.
	(ILLEGAL_UID): Ditto.
	(ILLEGAL_GID): Ditto.
	(UNIX_POSIX_OFFSET): Define.  Add lengthy comment.
	(UNIX_POSIX_MASK): Ditto.
	(MAP_UNIX_TO_CYGWIN_ID): Ditto.
	(ILLEGAL_UID16): Move here from winsup.h.
	(ILLEGAL_GID16): Ditto.
	(uid16touid32): Ditto.
	(gid16togid32): Ditto.
	(sid_id_auth): New convenience macro for SID component access.
	(sid_sub_auth_count): Ditto.
	(sid_sub_auth): Ditto.
	(sid_sub_auth_rid): Ditto.
	(cygpsid::pstring): Declare.
	(cygsid::getfromstr): Declare wide character variant.
	(cygsid::operator=): Ditto.
	(cygsid::operator*=): Ditto.
	(get_logon_server): Change declaration according to source code.
	* setlsapwd.cc (setlsapwd): Drop 2nd parameter from internal_getpwnam
	call.
	* shared.cc (memory_init): Call cygheap->pg.init in first process.
	* syscalls.cc: Drop including pwdgrp.h.
	* tlsoffsets.h: Regenerate.
	* tlsoffsets64.h: Ditto.
	* uinfo.cc (internal_getlogin): Drop gratuitious internal_getpwuid
	call.  Fix debug output.  Overwrite user gid in border case of a
	missing passwd file while a group file exists.
	(pwdgrp::add_line): Allocate memory on cygheap.
	(pwdgrp::load): Remove.
	(ugid_cache): Define.
	(cygheap_pwdgrp::init): New method.
	(cygheap_pwdgrp::nss_init_line): New method.
	(cygheap_pwdgrp::_nss_init): New method.
	(cygheap_domain_info::init): New method.
	(logon_sid): Define.
	(get_logon_sid): New function.
	(pwdgrp::add_account_post_fetch): New method.
	(pwdgrp::add_account_from_file): New methods.
	(pwdgrp::add_account_from_windows): New methods.
	(pwdgrp::check_file): New method.
	(pwdgrp::fetch_account_from_line): New method.
	(pwdgrp::fetch_account_from_file): New method.
	(pwdgrp::fetch_account_from_windows): New method.
	* winsup.h: Move aforementioned macros and declarations to security.h.
@
text
@d6 54
a59 54
//; $tls::local_clib = -11284;
//; $tls::plocal_clib = 1416;
//; $tls::__dontuse = -11284;
//; $tls::p__dontuse = 1416;
//; $tls::func = -10196;
//; $tls::pfunc = 2504;
//; $tls::saved_errno = -10192;
//; $tls::psaved_errno = 2508;
//; $tls::sa_flags = -10188;
//; $tls::psa_flags = 2512;
//; $tls::oldmask = -10184;
//; $tls::poldmask = 2516;
//; $tls::deltamask = -10180;
//; $tls::pdeltamask = 2520;
//; $tls::errno_addr = -10176;
//; $tls::perrno_addr = 2524;
//; $tls::sigmask = -10172;
//; $tls::psigmask = 2528;
//; $tls::sigwait_mask = -10168;
//; $tls::psigwait_mask = 2532;
//; $tls::sigwait_info = -10164;
//; $tls::psigwait_info = 2536;
//; $tls::signal_arrived = -10160;
//; $tls::psignal_arrived = 2540;
//; $tls::will_wait_for_signal = -10156;
//; $tls::pwill_wait_for_signal = 2544;
//; $tls::thread_context = -10152;
//; $tls::pthread_context = 2548;
//; $tls::thread_id = -9940;
//; $tls::pthread_id = 2760;
//; $tls::infodata = -9936;
//; $tls::pinfodata = 2764;
//; $tls::tid = -9788;
//; $tls::ptid = 2912;
//; $tls::_ctinfo = -9784;
//; $tls::p_ctinfo = 2916;
//; $tls::andreas = -9780;
//; $tls::pandreas = 2920;
//; $tls::wq = -9776;
//; $tls::pwq = 2924;
//; $tls::sig = -9748;
//; $tls::psig = 2952;
//; $tls::incyg = -9744;
//; $tls::pincyg = 2956;
//; $tls::spinning = -9740;
//; $tls::pspinning = 2960;
//; $tls::stacklock = -9736;
//; $tls::pstacklock = 2964;
//; $tls::stackptr = -9732;
//; $tls::pstackptr = 2968;
//; $tls::stack = -9728;
//; $tls::pstack = 2972;
//; $tls::initialized = -8704;
//; $tls::pinitialized = 3996;
d64 54
a117 54
#define tls_local_clib (-11284)
#define tls_plocal_clib (1416)
#define tls___dontuse (-11284)
#define tls_p__dontuse (1416)
#define tls_func (-10196)
#define tls_pfunc (2504)
#define tls_saved_errno (-10192)
#define tls_psaved_errno (2508)
#define tls_sa_flags (-10188)
#define tls_psa_flags (2512)
#define tls_oldmask (-10184)
#define tls_poldmask (2516)
#define tls_deltamask (-10180)
#define tls_pdeltamask (2520)
#define tls_errno_addr (-10176)
#define tls_perrno_addr (2524)
#define tls_sigmask (-10172)
#define tls_psigmask (2528)
#define tls_sigwait_mask (-10168)
#define tls_psigwait_mask (2532)
#define tls_sigwait_info (-10164)
#define tls_psigwait_info (2536)
#define tls_signal_arrived (-10160)
#define tls_psignal_arrived (2540)
#define tls_will_wait_for_signal (-10156)
#define tls_pwill_wait_for_signal (2544)
#define tls_thread_context (-10152)
#define tls_pthread_context (2548)
#define tls_thread_id (-9940)
#define tls_pthread_id (2760)
#define tls_infodata (-9936)
#define tls_pinfodata (2764)
#define tls_tid (-9788)
#define tls_ptid (2912)
#define tls__ctinfo (-9784)
#define tls_p_ctinfo (2916)
#define tls_andreas (-9780)
#define tls_pandreas (2920)
#define tls_wq (-9776)
#define tls_pwq (2924)
#define tls_sig (-9748)
#define tls_psig (2952)
#define tls_incyg (-9744)
#define tls_pincyg (2956)
#define tls_spinning (-9740)
#define tls_pspinning (2960)
#define tls_stacklock (-9736)
#define tls_pstacklock (2964)
#define tls_stackptr (-9732)
#define tls_pstackptr (2968)
#define tls_stack (-9728)
#define tls_pstack (2972)
#define tls_initialized (-8704)
#define tls_pinitialized (3996)
@


1.53
log
@	* Merge in cygwin-64bit-branch.
@
text
@d6 54
a59 54
//; $tls::local_clib = -11260;
//; $tls::plocal_clib = 1440;
//; $tls::__dontuse = -11260;
//; $tls::p__dontuse = 1440;
//; $tls::func = -10172;
//; $tls::pfunc = 2528;
//; $tls::saved_errno = -10168;
//; $tls::psaved_errno = 2532;
//; $tls::sa_flags = -10164;
//; $tls::psa_flags = 2536;
//; $tls::oldmask = -10160;
//; $tls::poldmask = 2540;
//; $tls::deltamask = -10156;
//; $tls::pdeltamask = 2544;
//; $tls::errno_addr = -10152;
//; $tls::perrno_addr = 2548;
//; $tls::sigmask = -10148;
//; $tls::psigmask = 2552;
//; $tls::sigwait_mask = -10144;
//; $tls::psigwait_mask = 2556;
//; $tls::sigwait_info = -10140;
//; $tls::psigwait_info = 2560;
//; $tls::signal_arrived = -10136;
//; $tls::psignal_arrived = 2564;
//; $tls::will_wait_for_signal = -10132;
//; $tls::pwill_wait_for_signal = 2568;
//; $tls::thread_context = -10128;
//; $tls::pthread_context = 2572;
//; $tls::thread_id = -9916;
//; $tls::pthread_id = 2784;
//; $tls::infodata = -9912;
//; $tls::pinfodata = 2788;
//; $tls::tid = -9764;
//; $tls::ptid = 2936;
//; $tls::_ctinfo = -9760;
//; $tls::p_ctinfo = 2940;
//; $tls::andreas = -9756;
//; $tls::pandreas = 2944;
//; $tls::wq = -9752;
//; $tls::pwq = 2948;
//; $tls::sig = -9724;
//; $tls::psig = 2976;
//; $tls::incyg = -9720;
//; $tls::pincyg = 2980;
//; $tls::spinning = -9716;
//; $tls::pspinning = 2984;
//; $tls::stacklock = -9712;
//; $tls::pstacklock = 2988;
//; $tls::stackptr = -9708;
//; $tls::pstackptr = 2992;
//; $tls::stack = -9704;
//; $tls::pstack = 2996;
//; $tls::initialized = -8680;
//; $tls::pinitialized = 4020;
d64 54
a117 54
#define tls_local_clib (-11260)
#define tls_plocal_clib (1440)
#define tls___dontuse (-11260)
#define tls_p__dontuse (1440)
#define tls_func (-10172)
#define tls_pfunc (2528)
#define tls_saved_errno (-10168)
#define tls_psaved_errno (2532)
#define tls_sa_flags (-10164)
#define tls_psa_flags (2536)
#define tls_oldmask (-10160)
#define tls_poldmask (2540)
#define tls_deltamask (-10156)
#define tls_pdeltamask (2544)
#define tls_errno_addr (-10152)
#define tls_perrno_addr (2548)
#define tls_sigmask (-10148)
#define tls_psigmask (2552)
#define tls_sigwait_mask (-10144)
#define tls_psigwait_mask (2556)
#define tls_sigwait_info (-10140)
#define tls_psigwait_info (2560)
#define tls_signal_arrived (-10136)
#define tls_psignal_arrived (2564)
#define tls_will_wait_for_signal (-10132)
#define tls_pwill_wait_for_signal (2568)
#define tls_thread_context (-10128)
#define tls_pthread_context (2572)
#define tls_thread_id (-9916)
#define tls_pthread_id (2784)
#define tls_infodata (-9912)
#define tls_pinfodata (2788)
#define tls_tid (-9764)
#define tls_ptid (2936)
#define tls__ctinfo (-9760)
#define tls_p_ctinfo (2940)
#define tls_andreas (-9756)
#define tls_pandreas (2944)
#define tls_wq (-9752)
#define tls_pwq (2948)
#define tls_sig (-9724)
#define tls_psig (2976)
#define tls_incyg (-9720)
#define tls_pincyg (2980)
#define tls_spinning (-9716)
#define tls_pspinning (2984)
#define tls_stacklock (-9712)
#define tls_pstacklock (2988)
#define tls_stackptr (-9708)
#define tls_pstackptr (2992)
#define tls_stack (-9704)
#define tls_pstack (2996)
#define tls_initialized (-8680)
#define tls_pinitialized (4020)
@


1.53.2.1
log
@Forced checkin
@
text
@@


1.53.2.2
log
@Pull in forgotten native symlink patch
@
text
@d6 54
a59 54
//; $tls::local_clib = -10940;
//; $tls::plocal_clib = 1760;
//; $tls::__dontuse = -10940;
//; $tls::p__dontuse = 1760;
//; $tls::func = -9852;
//; $tls::pfunc = 2848;
//; $tls::saved_errno = -9848;
//; $tls::psaved_errno = 2852;
//; $tls::sa_flags = -9844;
//; $tls::psa_flags = 2856;
//; $tls::oldmask = -9840;
//; $tls::poldmask = 2860;
//; $tls::deltamask = -9836;
//; $tls::pdeltamask = 2864;
//; $tls::errno_addr = -9832;
//; $tls::perrno_addr = 2868;
//; $tls::sigmask = -9828;
//; $tls::psigmask = 2872;
//; $tls::sigwait_mask = -9824;
//; $tls::psigwait_mask = 2876;
//; $tls::sigwait_info = -9820;
//; $tls::psigwait_info = 2880;
//; $tls::signal_arrived = -9816;
//; $tls::psignal_arrived = 2884;
//; $tls::will_wait_for_signal = -9812;
//; $tls::pwill_wait_for_signal = 2888;
//; $tls::thread_context = -9808;
//; $tls::pthread_context = 2892;
//; $tls::thread_id = -9596;
//; $tls::pthread_id = 3104;
//; $tls::infodata = -9592;
//; $tls::pinfodata = 3108;
//; $tls::tid = -9444;
//; $tls::ptid = 3256;
//; $tls::_ctinfo = -9440;
//; $tls::p_ctinfo = 3260;
//; $tls::andreas = -9436;
//; $tls::pandreas = 3264;
//; $tls::wq = -9432;
//; $tls::pwq = 3268;
//; $tls::sig = -9404;
//; $tls::psig = 3296;
//; $tls::incyg = -9400;
//; $tls::pincyg = 3300;
//; $tls::spinning = -9396;
//; $tls::pspinning = 3304;
//; $tls::stacklock = -9392;
//; $tls::pstacklock = 3308;
//; $tls::stackptr = -9388;
//; $tls::pstackptr = 3312;
//; $tls::stack = -9384;
//; $tls::pstack = 3316;
//; $tls::initialized = -8360;
//; $tls::pinitialized = 4340;
d64 54
a117 54
#define tls_local_clib (-10940)
#define tls_plocal_clib (1760)
#define tls___dontuse (-10940)
#define tls_p__dontuse (1760)
#define tls_func (-9852)
#define tls_pfunc (2848)
#define tls_saved_errno (-9848)
#define tls_psaved_errno (2852)
#define tls_sa_flags (-9844)
#define tls_psa_flags (2856)
#define tls_oldmask (-9840)
#define tls_poldmask (2860)
#define tls_deltamask (-9836)
#define tls_pdeltamask (2864)
#define tls_errno_addr (-9832)
#define tls_perrno_addr (2868)
#define tls_sigmask (-9828)
#define tls_psigmask (2872)
#define tls_sigwait_mask (-9824)
#define tls_psigwait_mask (2876)
#define tls_sigwait_info (-9820)
#define tls_psigwait_info (2880)
#define tls_signal_arrived (-9816)
#define tls_psignal_arrived (2884)
#define tls_will_wait_for_signal (-9812)
#define tls_pwill_wait_for_signal (2888)
#define tls_thread_context (-9808)
#define tls_pthread_context (2892)
#define tls_thread_id (-9596)
#define tls_pthread_id (3104)
#define tls_infodata (-9592)
#define tls_pinfodata (3108)
#define tls_tid (-9444)
#define tls_ptid (3256)
#define tls__ctinfo (-9440)
#define tls_p_ctinfo (3260)
#define tls_andreas (-9436)
#define tls_pandreas (3264)
#define tls_wq (-9432)
#define tls_pwq (3268)
#define tls_sig (-9404)
#define tls_psig (3296)
#define tls_incyg (-9400)
#define tls_pincyg (3300)
#define tls_spinning (-9396)
#define tls_pspinning (3304)
#define tls_stacklock (-9392)
#define tls_pstacklock (3308)
#define tls_stackptr (-9388)
#define tls_pstackptr (3312)
#define tls_stack (-9384)
#define tls_pstack (3316)
#define tls_initialized (-8360)
#define tls_pinitialized (4340)
@


1.52
log
@* cygtls.h (_cygtls::will_wait_for_signal): Rename from 'signal_waiting' to
something more expressive.  Reflect rename throughout.
(_cygtls::get_signal_arrived): Rename from create_signal_arrived.  Move lock
here.
(_cygtls::set_signal_arrived): Use get_signal_arrived.
* exceptions.cc (_cygtls::interrupt_setup): Use get_signal_arrived.
* tlsoffsets.h: Regenerate.
@
text
@d6 54
a59 54
//; $tls::local_clib = -11236;
//; $tls::plocal_clib = 1464;
//; $tls::__dontuse = -11236;
//; $tls::p__dontuse = 1464;
//; $tls::func = -10148;
//; $tls::pfunc = 2552;
//; $tls::saved_errno = -10144;
//; $tls::psaved_errno = 2556;
//; $tls::sa_flags = -10140;
//; $tls::psa_flags = 2560;
//; $tls::oldmask = -10136;
//; $tls::poldmask = 2564;
//; $tls::deltamask = -10132;
//; $tls::pdeltamask = 2568;
//; $tls::errno_addr = -10128;
//; $tls::perrno_addr = 2572;
//; $tls::sigmask = -10124;
//; $tls::psigmask = 2576;
//; $tls::sigwait_mask = -10120;
//; $tls::psigwait_mask = 2580;
//; $tls::sigwait_info = -10116;
//; $tls::psigwait_info = 2584;
//; $tls::signal_arrived = -10112;
//; $tls::psignal_arrived = 2588;
//; $tls::will_wait_for_signal = -10108;
//; $tls::pwill_wait_for_signal = 2592;
//; $tls::thread_context = -10104;
//; $tls::pthread_context = 2596;
//; $tls::thread_id = -9892;
//; $tls::pthread_id = 2808;
//; $tls::infodata = -9888;
//; $tls::pinfodata = 2812;
//; $tls::tid = -9740;
//; $tls::ptid = 2960;
//; $tls::_ctinfo = -9736;
//; $tls::p_ctinfo = 2964;
//; $tls::andreas = -9732;
//; $tls::pandreas = 2968;
//; $tls::wq = -9728;
//; $tls::pwq = 2972;
//; $tls::sig = -9700;
//; $tls::psig = 3000;
//; $tls::incyg = -9696;
//; $tls::pincyg = 3004;
//; $tls::spinning = -9692;
//; $tls::pspinning = 3008;
//; $tls::stacklock = -9688;
//; $tls::pstacklock = 3012;
//; $tls::stackptr = -9684;
//; $tls::pstackptr = 3016;
//; $tls::stack = -9680;
//; $tls::pstack = 3020;
//; $tls::initialized = -8656;
//; $tls::pinitialized = 4044;
d64 54
a117 54
#define tls_local_clib (-11236)
#define tls_plocal_clib (1464)
#define tls___dontuse (-11236)
#define tls_p__dontuse (1464)
#define tls_func (-10148)
#define tls_pfunc (2552)
#define tls_saved_errno (-10144)
#define tls_psaved_errno (2556)
#define tls_sa_flags (-10140)
#define tls_psa_flags (2560)
#define tls_oldmask (-10136)
#define tls_poldmask (2564)
#define tls_deltamask (-10132)
#define tls_pdeltamask (2568)
#define tls_errno_addr (-10128)
#define tls_perrno_addr (2572)
#define tls_sigmask (-10124)
#define tls_psigmask (2576)
#define tls_sigwait_mask (-10120)
#define tls_psigwait_mask (2580)
#define tls_sigwait_info (-10116)
#define tls_psigwait_info (2584)
#define tls_signal_arrived (-10112)
#define tls_psignal_arrived (2588)
#define tls_will_wait_for_signal (-10108)
#define tls_pwill_wait_for_signal (2592)
#define tls_thread_context (-10104)
#define tls_pthread_context (2596)
#define tls_thread_id (-9892)
#define tls_pthread_id (2808)
#define tls_infodata (-9888)
#define tls_pinfodata (2812)
#define tls_tid (-9740)
#define tls_ptid (2960)
#define tls__ctinfo (-9736)
#define tls_p_ctinfo (2964)
#define tls_andreas (-9732)
#define tls_pandreas (2968)
#define tls_wq (-9728)
#define tls_pwq (2972)
#define tls_sig (-9700)
#define tls_psig (3000)
#define tls_incyg (-9696)
#define tls_pincyg (3004)
#define tls_spinning (-9692)
#define tls_pspinning (3008)
#define tls_stacklock (-9688)
#define tls_pstacklock (3012)
#define tls_stackptr (-9684)
#define tls_pstackptr (3016)
#define tls_stack (-9680)
#define tls_pstack (3020)
#define tls_initialized (-8656)
#define tls_pinitialized (4044)
@


1.51
log
@* cygtls.cc (_cygtls::reset_signal_arrived): New function.
(set_signal_arrived::~set_signal_arrived): Use reset_signal_arrived to reset
state.
* exceptions.cc (sig_handle_tty_stop): Use WAIT_SIGNALED rather than assume we
know the return from cancelable_wait.
(_cygtls::interrupt_setup): Modify to allow calling when executing in
non-cygwin code via sigdelayed.  Always reset signal_arrived.
* gendef: Throughout use start_offset rather than the completely wrong
sizeof__cygtls.
(_sigdelayed): Rewrite to avoid duplication when calling the signal handler.
(sigreturn): Delete.
* gentls_offsets: Define start_offset rather than sizeof__cygtls.
* tlsoffsets.h: Regenerate.
@
text
@d30 2
a31 2
//; $tls::signal_waiting = -10108;
//; $tls::psignal_waiting = 2592;
d88 2
a89 2
#define tls_signal_waiting (-10108)
#define tls_psignal_waiting (2592)
@


1.51.2.1
log
@	* include/cygwin/stat.h (struct __stat64): Drop entirely in favor of
	struct stat.  Accommodate throughout Cygwin.
	* include/cygwin/types.h: Throughout, drop current, internal types
	used since Cygwin 1.5 with the base type they have been used for.
	Throughout, define types based on bitsize-specific types where
	appropriate.  Accommodate throughout Cygwin.
	* include/sys/cygwin.h: Drop __uid32_t and __gid32_t in favor of
	uid_t and gid_t.  Define uid/gid types based on bitsize-specific types.
	(struct external_pinfo): Accommodate above change.
	* cygtls.h (struct _local_storage): Drop unused members grp and
	namearray,
	* tlsoffsets.h: Regenerate.
	* devices.h (_dev_t): Drop definition.  Use dev_t throughout instead.
	* devices.cc: Regenerate.

	Probably temporary patch to drop unneeded functionality on x86_64:
	* fcntl.cc (_fcntl): Alias to fcntl64 on x86_64.
	* glob.cc (CYGWIN_gl_stat): Simplify on x86_64.
	* grp.cc (grp32togrp16): Don't define on x86_64.
	(getgrgid): Alias to getgrgid32 on x86_64.
	(getgrnam): Alias to getgrnam32 on x86_64.
	(getgrent): Alias to getgrent32 on x86_64.
	(getgroups): Alias to getgroups32 on x86_64.
	(initgroups): Alias to initgroups32 on x86_64.
	(setgroups): Alias to setgroups32 on x86_64.
	* mmap.cc (mmap): Alias to mmap64 on x86_64.
	* passwd.cc (getpwuid): Alias to getpwuid32 on x86_64.
	(getpwuid_r): Alias to getpwuid_r32 on x86_64.
	(getpwduid): Don't define on x86_64.
	* syscalls.cc (lseek): Alias to lseek64 on x86_64.
	(_lseek): Alias to lseek64 on x86_64.
	(chown): Alias to chown32 on x86_64.
	(lchown): Alias to lchown32 on x86_64.
	(fchown): Alias to fchown32 on x86_64.
	(stat64_to_stat32): Don't define on x86_64.
	(fstat): Alias to fstat64 on x86_64.
	(_fstat_r): Alias to _fstat64_r on x86_64.
	(stat): Alias to stat64 on x86_64.
	(_stat_r): Alias to _stat64_r on x86_64.
	(lstat): Alias to lstat64 on x86_64.
	(ftruncate): Alias to ftruncate64 on x86_64.
	(truncate): Alias to truncate64 on x86_64.
	(seteuid): Alias to seteuid32 on x86_64.
	(setuid): Alias to setuid32 on x86_64.
	(setreuid): Alias to setreuid32 on x86_64.
	(setegid): Alias to setegid32 on x86_64.
	(setgid): Alias to setgid32 on x86_64.
	(setregid): Alias to setregid32 on x86_64.
	* uinfo.cc (getuid): Alias to getuid32 on x86_64.
	(getgid): Alias to getgid32 on x86_64.
	(geteuid): Alias to geteuid32 on x86_64.
	(getegid): Alias to getegid32 on x86_64.
	* winsup.h (ILLEGAL_UID16): Don't define on x86_64.
	(ILLEGAL_GID16): Ditto.
	(uid16touid32): Don't declare on x86_64.
	(gid16togid32): Don't declare on x86_64.
@
text
@d6 54
a59 54
//; $tls::local_clib = -11260;
//; $tls::plocal_clib = 1440;
//; $tls::__dontuse = -11260;
//; $tls::p__dontuse = 1440;
//; $tls::func = -10172;
//; $tls::pfunc = 2528;
//; $tls::saved_errno = -10168;
//; $tls::psaved_errno = 2532;
//; $tls::sa_flags = -10164;
//; $tls::psa_flags = 2536;
//; $tls::oldmask = -10160;
//; $tls::poldmask = 2540;
//; $tls::deltamask = -10156;
//; $tls::pdeltamask = 2544;
//; $tls::errno_addr = -10152;
//; $tls::perrno_addr = 2548;
//; $tls::sigmask = -10148;
//; $tls::psigmask = 2552;
//; $tls::sigwait_mask = -10144;
//; $tls::psigwait_mask = 2556;
//; $tls::sigwait_info = -10140;
//; $tls::psigwait_info = 2560;
//; $tls::signal_arrived = -10136;
//; $tls::psignal_arrived = 2564;
//; $tls::signal_waiting = -10132;
//; $tls::psignal_waiting = 2568;
//; $tls::thread_context = -10128;
//; $tls::pthread_context = 2572;
//; $tls::thread_id = -9916;
//; $tls::pthread_id = 2784;
//; $tls::infodata = -9912;
//; $tls::pinfodata = 2788;
//; $tls::tid = -9764;
//; $tls::ptid = 2936;
//; $tls::_ctinfo = -9760;
//; $tls::p_ctinfo = 2940;
//; $tls::andreas = -9756;
//; $tls::pandreas = 2944;
//; $tls::wq = -9752;
//; $tls::pwq = 2948;
//; $tls::sig = -9724;
//; $tls::psig = 2976;
//; $tls::incyg = -9720;
//; $tls::pincyg = 2980;
//; $tls::spinning = -9716;
//; $tls::pspinning = 2984;
//; $tls::stacklock = -9712;
//; $tls::pstacklock = 2988;
//; $tls::stackptr = -9708;
//; $tls::pstackptr = 2992;
//; $tls::stack = -9704;
//; $tls::pstack = 2996;
//; $tls::initialized = -8680;
//; $tls::pinitialized = 4020;
d64 54
a117 54
#define tls_local_clib (-11260)
#define tls_plocal_clib (1440)
#define tls___dontuse (-11260)
#define tls_p__dontuse (1440)
#define tls_func (-10172)
#define tls_pfunc (2528)
#define tls_saved_errno (-10168)
#define tls_psaved_errno (2532)
#define tls_sa_flags (-10164)
#define tls_psa_flags (2536)
#define tls_oldmask (-10160)
#define tls_poldmask (2540)
#define tls_deltamask (-10156)
#define tls_pdeltamask (2544)
#define tls_errno_addr (-10152)
#define tls_perrno_addr (2548)
#define tls_sigmask (-10148)
#define tls_psigmask (2552)
#define tls_sigwait_mask (-10144)
#define tls_psigwait_mask (2556)
#define tls_sigwait_info (-10140)
#define tls_psigwait_info (2560)
#define tls_signal_arrived (-10136)
#define tls_psignal_arrived (2564)
#define tls_signal_waiting (-10132)
#define tls_psignal_waiting (2568)
#define tls_thread_context (-10128)
#define tls_pthread_context (2572)
#define tls_thread_id (-9916)
#define tls_pthread_id (2784)
#define tls_infodata (-9912)
#define tls_pinfodata (2788)
#define tls_tid (-9764)
#define tls_ptid (2936)
#define tls__ctinfo (-9760)
#define tls_p_ctinfo (2940)
#define tls_andreas (-9756)
#define tls_pandreas (2944)
#define tls_wq (-9752)
#define tls_pwq (2948)
#define tls_sig (-9724)
#define tls_psig (2976)
#define tls_incyg (-9720)
#define tls_pincyg (2980)
#define tls_spinning (-9716)
#define tls_pspinning (2984)
#define tls_stacklock (-9712)
#define tls_pstacklock (2988)
#define tls_stackptr (-9708)
#define tls_pstackptr (2992)
#define tls_stack (-9704)
#define tls_pstack (2996)
#define tls_initialized (-8680)
#define tls_pinitialized (4020)
@


1.51.2.2
log
@Pull in changes from HEAD
@
text
@d30 2
a31 2
//; $tls::will_wait_for_signal = -10132;
//; $tls::pwill_wait_for_signal = 2568;
d88 2
a89 2
#define tls_will_wait_for_signal (-10132)
#define tls_pwill_wait_for_signal (2568)
@


1.50
log
@* DevNotes: Add entry cgf-000013.
* cygserver_ipc.h (ipc_set_proc_info): Use _cygtls::ipc_set_proc_info to set
per-thread signal arrived value.
* cygthread.cc (cygthread::detach): Use per-thread signal_arrived via
set_thread_waiting.
* fork.cc (_cygtls::fixup_after_fork): Clear signal_arrived.
(_cygtls::remove): Close any signal_arrived handle when thread exists.
(_cygtls::find_tls): Remove unneeded function.
* cygtls.h: Update copyright.
(class _cygtls): Reorganize to help avoid rebuilding newlib when structure
changes.
(_cygtls::event): Delete.
(_cygtls::threadkill): Ditto.
(_cygtls::signal_waiting): Declare new bool.
(_cygtls::find_tls): Delete declaration.
(_cygtls::set_threadkill): Ditto.
(_cygtls::reset_threadkill): Ditto.
(_cygtls::set_signal_arrived): Declare new function.
(class set_thread_waiting): Declare new class.
* cygwait.cc (cw_nowait_storage): Define.
(cygwait): Set per-thread signal_arrived via set_thread_waiting.  Don't
special-case _main_tls.
* cygwait.h (cw_nowait): Define.
(cw_infinite): Ditto.
(cygwait): Redefine pathological wait-only case.
* dcrt0.cc (dll_crt0_0): Remove call to now-defunct events_init().
(dll_crt0_1): Remove call to now-defunct create_signal_arrived().
* exceptions.cc: Reflect set_signal_mask() argument reordering throughout.
Remove signal mask synchronization throughout.
(events_init): Delete definition.
(mask_sync): Delete now-unneeded mask synchronization.
(set_signal_mask): Reverse order of arguments to "standard" to, from layout.
Rename "newmask" argument to "setmask".  Remove debugging.
(sig_handle_tty_stop): Use cancelable_wait rather than WFMO.
(_cygtls::interrupt_setup): Don't treat "threadkill" events specially.
Conditionally set signal_arrived depending on whether the thread has created it
or not.
(sigpacket::process): Reorganize to reflect thread-specific sending of signals
which is more in line with the way it was actually supposed to work.
* fhandler_socket.cc (get_inet_addr): Use cancelable_wait rather than
IsEventSignalled to avoid potential race.
(fhandler_socket::wait_for_events): Set signal_arrived event using
set_thread_waiting().
(fhandler_socket::close): Use cygwait for the case of just waiting 10 ms for a
signal.
* fhandler_tape.cc (fhandler_dev_tape::_lock): Use cancelable_wait rather than
WFMO.  Redo switch/case tests accordingly.
* fhandler_termios.cc (fhandler_termios::bg_check): Use cygwait for case of
just waiting 0 ms for a potential signal.
* fhandler_tty.cc (fhandler_pty_master::process_slave_output): Use
cancelable_wait rather than WFSO.
* fhandler_windows.cc (fhandler_windows::read): Set per-thread signal_arrived
via set_thread_waiting().
* flock.cc (lf_setlock): Ditto.
* select.cc (pselect): Ditto.  Set per-thread signal_arrived using
set_thread_waiting().
* gendef: Don't special case handling of _cygtls::sig for threads.
* gentls_offsets: Use #pragma once in tlsoffsets.h.
* ntdll.h: Use #pragma once.
* poll.cc: Reflect set_signal_mask() argument reordering.
* posix_ipc.cc (ipc_mutex_lock): Use cancelable_wait rather than WFMO.
(ipc_cond_timedwait): Set perl-thread signal arrived using
set_thread_waiting().
* security.h: Use #pragma once.
* signal.cc (abort): Reflect set_signal_mask() argument reordering.
(clock_nanosleep): Ditto.  Change call to cancelable_wait to properly specify
handling of cancel and interrupt.
(sigwaitinfo): Remove handling of per-thread event in favor of per-thread
signal_arrived.  Use cancelable_wait rather than WFSO.
* sigproc.cc (signal_arrived): Delete definition.
(create_signal_arrived): Ditto.
* sigproc.h (signal_arrived): Delete declaration.
(set_signal_mask): Avoid defining as a "C" function.  Don't conditionally
declare.
(create_signal_arrived): Delete declaration.
* syscalls.cc (rename): Use cygwait() rather than WFSO.
* thread.h (fast_mutex::lock): Use cw_infinite rather than LARGE_NULL.
* wait.cc (wait4): Ditto.
* thread.cc (pthread_mutex::lock): Ditto.
(pthread::join): Ditto.
(semaphore::_wait): Ditto.
(pthread_kill): Remove set_threadkill() accommodation.
* tlsoffsets.h: Regenerate.
@
text
@d3 1
a3 1
//; $tls::sizeof__cygtls = 4048;
@


1.49
log
@Forced checkin to fix date
@
text
@d4 36
a39 36
//; $tls::func = -12700;
//; $tls::pfunc = 0;
//; $tls::saved_errno = -12696;
//; $tls::psaved_errno = 4;
//; $tls::sa_flags = -12692;
//; $tls::psa_flags = 8;
//; $tls::oldmask = -12688;
//; $tls::poldmask = 12;
//; $tls::deltamask = -12684;
//; $tls::pdeltamask = 16;
//; $tls::event = -12680;
//; $tls::pevent = 20;
//; $tls::errno_addr = -12676;
//; $tls::perrno_addr = 24;
//; $tls::sigmask = -12672;
//; $tls::psigmask = 28;
//; $tls::sigwait_mask = -12668;
//; $tls::psigwait_mask = 32;
//; $tls::sigwait_info = -12664;
//; $tls::psigwait_info = 36;
//; $tls::thread_context = -12660;
//; $tls::pthread_context = 40;
//; $tls::thread_id = -12448;
//; $tls::pthread_id = 252;
//; $tls::threadkill = -12444;
//; $tls::pthreadkill = 256;
//; $tls::infodata = -12440;
//; $tls::pinfodata = 260;
//; $tls::tid = -12292;
//; $tls::ptid = 408;
//; $tls::local_clib = -12288;
//; $tls::plocal_clib = 412;
//; $tls::__dontuse = -12288;
//; $tls::p__dontuse = 412;
//; $tls::locals = -11200;
//; $tls::plocals = 1500;
d62 36
a97 36
#define tls_func (-12700)
#define tls_pfunc (0)
#define tls_saved_errno (-12696)
#define tls_psaved_errno (4)
#define tls_sa_flags (-12692)
#define tls_psa_flags (8)
#define tls_oldmask (-12688)
#define tls_poldmask (12)
#define tls_deltamask (-12684)
#define tls_pdeltamask (16)
#define tls_event (-12680)
#define tls_pevent (20)
#define tls_errno_addr (-12676)
#define tls_perrno_addr (24)
#define tls_sigmask (-12672)
#define tls_psigmask (28)
#define tls_sigwait_mask (-12668)
#define tls_psigwait_mask (32)
#define tls_sigwait_info (-12664)
#define tls_psigwait_info (36)
#define tls_thread_context (-12660)
#define tls_pthread_context (40)
#define tls_thread_id (-12448)
#define tls_pthread_id (252)
#define tls_threadkill (-12444)
#define tls_pthreadkill (256)
#define tls_infodata (-12440)
#define tls_pinfodata (260)
#define tls_tid (-12292)
#define tls_ptid (408)
#define tls_local_clib (-12288)
#define tls_plocal_clib (412)
#define tls___dontuse (-12288)
#define tls_p__dontuse (412)
#define tls_locals (-11200)
#define tls_plocals (1500)
@


1.48
log
@* cygtls.h (struct _local_storage): Add cw_timer member.
* cygtls.cc (_cygtls::init_thread): Initialize locals.cw_timer.
(_cygtls::fixup_after_fork): Ditto.
* tlsoffsets.h: Regenerate.
* ntdll.h (enum _TIMER_INFORMATION_CLASS): Define.
(struct _TIMER_BASIC_INFORMATION): Define.
(NtQueryTimer): Declare function.
* thread.h (cancelable_wait): Change timeout argument to
PLARGE_INTEGER and provide NULL default.
(fast_mutex::lock): Adjust accordingly.
(pthread_cond::wait): Change timeout argument to PLARGE_INTEGER
and default to NULL.
* thread.cc (cancelable_wait): Change timeout argument to
PLARGE_INTEGER.  Initialize _cygtls.locals.cw_timer if needed.
Use NT waitable timers for handling timeout.  Return remaining time
to timeout argument if timeout was relative.
(pthread_cond::wait): Change timeout argument to PLARGE_INTEGER.
Adjust to change in cancelable_wait.
(pthread_mutex::lock): Adjust to change in cancelable_wait.
(pthread_spinlock::lock): Ditto.
(pthread::join): Ditto.
(__pthread_cond_dowait): Change waitlength argument to PLARGE_INTEGER.
Adjust to changes in cancelable_wait and pthread_cond::wait.
(pthread_cond_timedwait): Adjust to change in __pthread_cond_dowait.
(pthread_cond_wait): Ditto.
(semaphore::_timedwait): Adjust to change in cancelable_wait.
(semaphore::_wait): Ditto.
* exceptions.cc (handle_sigsuspend): Ditto.
* signal.cc (nanosleep): Ditto.
* wait.cc (wait4): Ditto. Fix copyright dates.
* times.cc (FACTOR, NSPERSEC): Move from here...
* hires.h (FACTOR, NSPERSEC): ...to here.
@
text
@@


1.47
log
@* autoload.cc: Call _api_fatal in asm.
* child_info.h: Redefine CURR_CHILD_INFO_MAGIC.
(child_info_fork::abort): Rename from handle_failure.  Change arguments.
* cygtls.h (_local_storage::ttybuf): New field.
* dcrt0.cc (vapi_fatal): Split api_fatal.  Add "in forked process" to message
when appropriate.
(api_fatal): Use vapi_fatal.
* devices.h: Make multiple inclusion safe.
(fh_devices): Add FH_CONS* stuff.  Reorder slightly.
(device): Eliminate anonymous union.  Add more ways to access minor/major.
(device::setunit): Accommodate no-longer-anonymous union.
(device::is_fs): Ditto.
(device::is_fs_special): Ditto.
(device::major): New function.
(device::minor): Ditto.
(device::is_device): New function.
(device::not_device): Ditto.
(device::operator int): New operator.
(device::operator fh_devices): Ditto.
(device::operator bool): Ditto.
(device::operator DWORD): Ditto.
(device::operator =): Ditto.
(isproc_dev): New function.
(isprocsys_dev): Ditto.
(iscons_dev): Ditto.
(istty_slave_dev): Ditto.
* devices.in: Add new "/dev/cons*" strings.  Accommodate no-longer-anonymous
union throughout.
(BRACK): Use more precise method for initialization.
* devices.cc: Regenerate.
* dtable.cc (dtable::stdio_init): Use get_cttyp instead of get_tty.
(dtable::find_archetype): Use new DWORD operator in device to test archetypes.
(dtable::init_std_file_from_handle): Use different method to initialize 'dev'.
Adapt to different ctty handling and accommodate /dev/cons*.
(fh_alloc): Accommodate no-longer-anonymous union.  Adapt to new /dev/cons*.
(build_fh_pc): Make debugging output more useful.
* exceptions.cc (ctrl_c_handler): Use get_cttyp instead of get_tty.
* external.cc (fillout_pinfo): Accommodate new cons* stuff.
* fhandler.cc (fhandler_base::read): Eliminate is_slow() test.
* fhandler.h (fhandler_base::*): Adapt to changes in device.h.
(fhandler_*::is_slow): Delete.
( fhandler_proc::get_proc_fhandler): Return fh_devices type.
* fhandler_console.cc (open_shared_console): New function.
(console_unit): New class.
(console_unit::console_unit): New constructor.
(enum_windows): New function.  Declare as friend to console_unit.
(fhandler_console::set_unit): New function.
(fhandler_console::get_tty_stuff): Call set_unit to set the unit number and
determine if initialization is needed.  Eliminate flags parameter.
(tty_list::get_cttyp): Rename (sorta) from get_tty.  Return pointer to correct
tty_min.
(fhandler_console::open): Adapt to elimination of argument to get_tty_stuff.
(fhandler_console::output_tcsetattr): Properly detect error condition.
(fhandler_console::fixup_after_fork_exec): Adapt to get_tty_stuff() setting tc
automatically.
* fhandler_proc.cc: Use FH_BAD rather than 0 throughout where using fh_devices
enum.
(fhandler_proc::get_proc_fhandler): Return fh_devices.  Adapt to devices.h
changes.
* fhandler_process.cc: Adapt to devices.h changes.  Use FH_BAD rather than 0
throughout where using fh_devices enum.
* fhandler_procnet.cc: Ditto.
* fhandler_procsys.cc: Ditto.
* fhandler_procsysvipc.cc: Ditto.
* fhandler_tape.cc (fhandler_dev_tape::fhandler_dev_tape): Ditto.
* fhandler_termios.cc (handler_termios::bg_check): Use tc->ttyname() rather
than assuming that we can construct a tty.
* fhandler_tty.cc (fhandler_tty_master::fhandler_tty_master): Just return
get_minor() of dev.
(fhandler_pty_master::process_slave_output): Add slightly more debugging info.
(fhandler_tty_slave::fhandler_tty_slave): Change name from ntty to unit.
(fhandler_pty_master::open): Ditto.
(fhandler_tty_slave::ioctl): Adapt to change which causes ctty to represent a
complete device.
(fhandler_tty_master::init_console): Add debugging for failure path.
(fhandler_pty_master::setup): Use get_unit() to retrieve unit number rather
than relying on raw ntty.
(fhandler_pty_master::setup): Ditto.
* fhandler_virtual.h (virt_tab_t): Redefine fhandler as fh_devices.
* fork.cc: Remove obsolete vfork stuff.
(frok::child): Don't assume that a ctty == 0 is valid.
* mount.cc (mount_info::conv_to_win32_path): Adapt to device struct changes.
(mount_info::conv_to_win32_path): Ditto.
* path.cc (path_conv::check): Retrive major/minor numbers via a method rather
than accessing them directly from device.  Rely on dev operators to
set/retrieve device information as required by device struct change.
* path.h (isproc_dev): Move to devices.h.
(isprocsys_dev): Ditto.
(isvirtual_dev): Ditto.
(path_conv:{isdevice,isfifo,isspecial,iscygdrive,issocket,get_devn,get_unitn}):
Use device methods to access/manipulate devices.
* pinfo.cc (pinfo::exit): Don't assume that ctty == 0 is valid.  Use iscons_dev
to determine if a device is a console.
(_pinfo::_ctty): Use device::parse to generate tty/cons name.
(_pinfo::set_ctty): Don't assume that ctty == 0 is valid.  Remove redundant
info from debugging.
* shared.cc (offsets): Remove console offset.
* shared_info.h (shared_locations): Ditto.
* syscalls.cc (umask): Use device methods to manipulate device information.
(ctermid): Use device::parse to generate term device name.
* tlsoffsets.h: Regenerate.
* tty.cc (ttyslot): Return minor number of ctty since ctty now represents a
full device.
(tty::create_master): Set ctty to a complete device.
(tty_list::attach): Rework to detect new /dev/cons* stuff.
(tty_list::terminate): Adapt to changes to ctty.
(tty_list::init): Adapt to change to setntty - pass in device major number.
(tty::exists): Use get_unit() to retrive tty unit number.
(tty::open_mutex): Ditto.
(tty::open_inuse): Ditto.
(tty::create_inuse): Ditto.
(tty::get_event): Ditto.
(tty_min::ttyname): Define new function.
* tty.h (tty_min::ntty): Redefine as fh_devices.
(tty::exists): Use get_unit() to retrive tty unit number.
(tty::open_mutex): Ditto.
(tty::open_inuse): Ditto.
(tty::create_inuse): Ditto.
(tty::get_event): Ditto.
(tty_min::ttyname): Declare new function.
(tty::getntty): Declare as const.
(tty_list::operator []): Assure that only minor part of argument is used.
* dll_init.cc (dll_list::alloc): Detect mismatch of data segments early issuing
an explicit error message if necessary.
* heap.cc (heap_init): Adapt to changes from fork->handle_failure to
fork->abort.
* pinfo.h (EXITCODE_FORK_FAILED): New enum.  (from Ryan Johnson)
* sigproc.cc (child_info_fork::abort): Rename from handle_failure.  Change
arguments to allow passing in a printf-like message.
* winsup.h (api_fatal): Delete macro definition.
(api_fatal): Redefine from __api_fatal.
(vapi_fatal): Declare new function.
* include/sys/strace.h (strace_vprintf): Define new macro.
* ntdll.h (_SYSTEM_INFORMATION_CLASS): Add SystemHandleInformation.
@
text
@d3 1
a3 1
//; $tls::sizeof__cygtls = 4044;
d40 20
a59 20
//; $tls::_ctinfo = -9740;
//; $tls::p_ctinfo = 2960;
//; $tls::andreas = -9736;
//; $tls::pandreas = 2964;
//; $tls::wq = -9732;
//; $tls::pwq = 2968;
//; $tls::sig = -9704;
//; $tls::psig = 2996;
//; $tls::incyg = -9700;
//; $tls::pincyg = 3000;
//; $tls::spinning = -9696;
//; $tls::pspinning = 3004;
//; $tls::stacklock = -9692;
//; $tls::pstacklock = 3008;
//; $tls::stackptr = -9688;
//; $tls::pstackptr = 3012;
//; $tls::stack = -9684;
//; $tls::pstack = 3016;
//; $tls::initialized = -8660;
//; $tls::pinitialized = 4040;
d98 20
a117 20
#define tls__ctinfo (-9740)
#define tls_p_ctinfo (2960)
#define tls_andreas (-9736)
#define tls_pandreas (2964)
#define tls_wq (-9732)
#define tls_pwq (2968)
#define tls_sig (-9704)
#define tls_psig (2996)
#define tls_incyg (-9700)
#define tls_pincyg (3000)
#define tls_spinning (-9696)
#define tls_pspinning (3004)
#define tls_stacklock (-9692)
#define tls_pstacklock (3008)
#define tls_stackptr (-9688)
#define tls_pstackptr (3012)
#define tls_stack (-9684)
#define tls_pstack (3016)
#define tls_initialized (-8660)
#define tls_pinitialized (4040)
@


1.46
log
@perror: fix POSIX compliance and work with recent newlib change

* cygtls.h (strerror_r_buf): New buffer.
* errno.cc (strerror): Move guts...
(_strerror_r): ...to new function demanded by newlib.
(strerror_r): Don't clobber strerror buffer.
(_user_strerror): Drop unused declaration.
* tlsoffsets.h: Regenerate.
@
text
@d3 1
a3 1
//; $tls::sizeof__cygtls = 4012;
d40 20
a59 20
//; $tls::_ctinfo = -9772;
//; $tls::p_ctinfo = 2928;
//; $tls::andreas = -9768;
//; $tls::pandreas = 2932;
//; $tls::wq = -9764;
//; $tls::pwq = 2936;
//; $tls::sig = -9736;
//; $tls::psig = 2964;
//; $tls::incyg = -9732;
//; $tls::pincyg = 2968;
//; $tls::spinning = -9728;
//; $tls::pspinning = 2972;
//; $tls::stacklock = -9724;
//; $tls::pstacklock = 2976;
//; $tls::stackptr = -9720;
//; $tls::pstackptr = 2980;
//; $tls::stack = -9716;
//; $tls::pstack = 2984;
//; $tls::initialized = -8692;
//; $tls::pinitialized = 4008;
d98 20
a117 20
#define tls__ctinfo (-9772)
#define tls_p_ctinfo (2928)
#define tls_andreas (-9768)
#define tls_pandreas (2932)
#define tls_wq (-9764)
#define tls_pwq (2936)
#define tls_sig (-9736)
#define tls_psig (2964)
#define tls_incyg (-9732)
#define tls_pincyg (2968)
#define tls_spinning (-9728)
#define tls_pspinning (2972)
#define tls_stacklock (-9724)
#define tls_pstacklock (2976)
#define tls_stackptr (-9720)
#define tls_pstackptr (2980)
#define tls_stack (-9716)
#define tls_pstack (2984)
#define tls_initialized (-8692)
#define tls_pinitialized (4008)
@


1.45
log
@	* cygtls.h (struct _local_storage): Remove unused members rarg and
	_localtime_buf.  Remove username in favor of a global buffer.  Reorder
	slightly to keep the net.cc stuff together.
	* globals.cc (__getlogin_username): New global char buffer.
	* tlsoffsets.h: Regenerate.
	* uinfo.cc (getlogin): Copy username into __getlogin_username.
@
text
@d3 1
a3 1
//; $tls::sizeof__cygtls = 3984;
d40 20
a59 20
//; $tls::_ctinfo = -9800;
//; $tls::p_ctinfo = 2900;
//; $tls::andreas = -9796;
//; $tls::pandreas = 2904;
//; $tls::wq = -9792;
//; $tls::pwq = 2908;
//; $tls::sig = -9764;
//; $tls::psig = 2936;
//; $tls::incyg = -9760;
//; $tls::pincyg = 2940;
//; $tls::spinning = -9756;
//; $tls::pspinning = 2944;
//; $tls::stacklock = -9752;
//; $tls::pstacklock = 2948;
//; $tls::stackptr = -9748;
//; $tls::pstackptr = 2952;
//; $tls::stack = -9744;
//; $tls::pstack = 2956;
//; $tls::initialized = -8720;
//; $tls::pinitialized = 3980;
d98 20
a117 20
#define tls__ctinfo (-9800)
#define tls_p_ctinfo (2900)
#define tls_andreas (-9796)
#define tls_pandreas (2904)
#define tls_wq (-9792)
#define tls_pwq (2908)
#define tls_sig (-9764)
#define tls_psig (2936)
#define tls_incyg (-9760)
#define tls_pincyg (2940)
#define tls_spinning (-9756)
#define tls_pspinning (2944)
#define tls_stacklock (-9752)
#define tls_pstacklock (2948)
#define tls_stackptr (-9748)
#define tls_pstackptr (2952)
#define tls_stack (-9744)
#define tls_pstack (2956)
#define tls_initialized (-8720)
#define tls_pinitialized (3980)
@


1.44
log
@	* cygtls.cc (_cygtls::init_thread): Drop setting locals.process_logmask.
	* cygtls.cc (_cygtls::remove): Always free mallocated TLS storage on
	thread exit.  Drop freeing locals.process_ident.
	* cygtls.h (struct _local_storage): Remove syslog-related members.
	* syslog.cc (syslog_globals): New static storage for global syslog
	settings.  Use throughout instead of _my_tls.locals.
	(openlog): Set new syslog_globals.process_ident value more carefully.
	* tlsoffsets.h: Regenerate.
@
text
@d3 1
a3 1
//; $tls::sizeof__cygtls = 4288;
d40 20
a59 20
//; $tls::_ctinfo = -9496;
//; $tls::p_ctinfo = 3204;
//; $tls::andreas = -9492;
//; $tls::pandreas = 3208;
//; $tls::wq = -9488;
//; $tls::pwq = 3212;
//; $tls::sig = -9460;
//; $tls::psig = 3240;
//; $tls::incyg = -9456;
//; $tls::pincyg = 3244;
//; $tls::spinning = -9452;
//; $tls::pspinning = 3248;
//; $tls::stacklock = -9448;
//; $tls::pstacklock = 3252;
//; $tls::stackptr = -9444;
//; $tls::pstackptr = 3256;
//; $tls::stack = -9440;
//; $tls::pstack = 3260;
//; $tls::initialized = -8416;
//; $tls::pinitialized = 4284;
d98 20
a117 20
#define tls__ctinfo (-9496)
#define tls_p_ctinfo (3204)
#define tls_andreas (-9492)
#define tls_pandreas (3208)
#define tls_wq (-9488)
#define tls_pwq (3212)
#define tls_sig (-9460)
#define tls_psig (3240)
#define tls_incyg (-9456)
#define tls_pincyg (3244)
#define tls_spinning (-9452)
#define tls_pspinning (3248)
#define tls_stacklock (-9448)
#define tls_pstacklock (3252)
#define tls_stackptr (-9444)
#define tls_pstackptr (3256)
#define tls_stack (-9440)
#define tls_pstack (3260)
#define tls_initialized (-8416)
#define tls_pinitialized (4284)
@


1.43
log
@*** empty log message ***
@
text
@d3 1
a3 1
//; $tls::sizeof__cygtls = 4304;
d40 20
a59 20
//; $tls::_ctinfo = -9480;
//; $tls::p_ctinfo = 3220;
//; $tls::andreas = -9476;
//; $tls::pandreas = 3224;
//; $tls::wq = -9472;
//; $tls::pwq = 3228;
//; $tls::sig = -9444;
//; $tls::psig = 3256;
//; $tls::incyg = -9440;
//; $tls::pincyg = 3260;
//; $tls::spinning = -9436;
//; $tls::pspinning = 3264;
//; $tls::stacklock = -9432;
//; $tls::pstacklock = 3268;
//; $tls::stackptr = -9428;
//; $tls::pstackptr = 3272;
//; $tls::stack = -9424;
//; $tls::pstack = 3276;
//; $tls::initialized = -8400;
//; $tls::pinitialized = 4300;
d98 20
a117 20
#define tls__ctinfo (-9480)
#define tls_p_ctinfo (3220)
#define tls_andreas (-9476)
#define tls_pandreas (3224)
#define tls_wq (-9472)
#define tls_pwq (3228)
#define tls_sig (-9444)
#define tls_psig (3256)
#define tls_incyg (-9440)
#define tls_pincyg (3260)
#define tls_spinning (-9436)
#define tls_pspinning (3264)
#define tls_stacklock (-9432)
#define tls_pstacklock (3268)
#define tls_stackptr (-9428)
#define tls_pstackptr (3272)
#define tls_stack (-9424)
#define tls_pstack (3276)
#define tls_initialized (-8400)
#define tls_pinitialized (4300)
@


1.42
log
@Update some copyrights.
* cygtls.cc (_cygtls::call): Invoke new exception protection here.
(_cygtls::init_thread): Remove conditionalized exception handler setup.
(exception_list): Delete declaration.
(_cygtls::init_exception_handler): Delete obsolete function.
* cygtls.h: Remove (now) unneeded include.
(_cygtls): Make this a real C++ class.
(_cygtls::handle_exceptions): Remove.
(_cygtls::init_exception_handler): Remove.
(_cygtls::call2): Make private.
(myfault::faulted): Remove unneeded parentheses.
* dcrt0.cc (dll_crt0_1): Remove exception handler setup.
* dlfcn.cc (dlopen): Ditto.
(dlclose): Ditto.
* dll_init.cc (dll_dllcrt0_1): Ditto.
(dll_list::detach): Use new exception handler protection.
* exceptions.cc (dump_exception): Rename to prevent confusion with new class.
(exception::handle): Rename from _cygtls::handle_exceptions.  Accommodate new
exception class.  Accommodate rename to dump_exception.
* tlsoffsets.h: Regenerate.
@
text
@@


1.42.2.1
log
@	* cygtls.h (struct _local_storage): Redefine process_ident as wchar_t
	pointer.
	* syslog.cc (CYGWIN_LOG_NAME): Convert to wide char constant.
	(openlog): Convert incoming ident string to wide char.  Fix formatting.
	(vsyslog): Print ident string as wide char string.  Convert message
	string to wide char and call UNICODE Win32 Event functions to make sure
	to use correct codeset.
	* tlsoffset.h: Regenerate.
@
text
@@


1.41
log
@* cygtls.h (_cygtls::init_exception_handler): Eliminate argument.
(_cygtls::andreas): Convert to a pointer.
(san): Convert to a real class with methods.  Use a linked list to keep track
of previous handlers on the "stack".
(myfault): Rewrite to use new san class rather than calling directly into
_cygtls.
* cygtls.cc (_cygtls::init_exception_handler): Just assume that we're always
using the standard exception handler.
(_cygtls::init_thread): Reflect loss of argument to init_exception_handler.
* dcrt0.cc (dll_crt0_1): Ditto.
* dfcn.cc (dlopen): Ditto.
(dlclose): Reset the exception handler after FreeLibrary.
* dll_init.cc (dll_list::detach): Make sure that the exception handler is
initialized before calling destructors.
* exceptions.cc (_cygtls::handle_exceptions): Accommodate new andreas pointer.
* thread.cc (verifyable_object_isvalid): Pass objectptr to faulted for explicit
NULL pointer checking.
* tlsoffsets.h: Regenerate.
@
text
@d3 1
a3 1
//; $tls::sizeof__cygtls = 4312;
d6 54
a59 56
//; $tls::el = -12696;
//; $tls::pel = 4;
//; $tls::saved_errno = -12688;
//; $tls::psaved_errno = 12;
//; $tls::sa_flags = -12684;
//; $tls::psa_flags = 16;
//; $tls::oldmask = -12680;
//; $tls::poldmask = 20;
//; $tls::deltamask = -12676;
//; $tls::pdeltamask = 24;
//; $tls::event = -12672;
//; $tls::pevent = 28;
//; $tls::errno_addr = -12668;
//; $tls::perrno_addr = 32;
//; $tls::sigmask = -12664;
//; $tls::psigmask = 36;
//; $tls::sigwait_mask = -12660;
//; $tls::psigwait_mask = 40;
//; $tls::sigwait_info = -12656;
//; $tls::psigwait_info = 44;
//; $tls::thread_context = -12652;
//; $tls::pthread_context = 48;
//; $tls::thread_id = -12440;
//; $tls::pthread_id = 260;
//; $tls::threadkill = -12436;
//; $tls::pthreadkill = 264;
//; $tls::infodata = -12432;
//; $tls::pinfodata = 268;
//; $tls::tid = -12284;
//; $tls::ptid = 416;
//; $tls::local_clib = -12280;
//; $tls::plocal_clib = 420;
//; $tls::__dontuse = -12280;
//; $tls::p__dontuse = 420;
//; $tls::locals = -11192;
//; $tls::plocals = 1508;
//; $tls::_ctinfo = -9472;
//; $tls::p_ctinfo = 3228;
//; $tls::andreas = -9468;
//; $tls::pandreas = 3232;
//; $tls::wq = -9464;
//; $tls::pwq = 3236;
//; $tls::sig = -9436;
//; $tls::psig = 3264;
//; $tls::incyg = -9432;
//; $tls::pincyg = 3268;
//; $tls::spinning = -9428;
//; $tls::pspinning = 3272;
//; $tls::stacklock = -9424;
//; $tls::pstacklock = 3276;
//; $tls::stackptr = -9420;
//; $tls::pstackptr = 3280;
//; $tls::stack = -9416;
//; $tls::pstack = 3284;
//; $tls::initialized = -8392;
//; $tls::pinitialized = 4308;
d64 54
a117 56
#define tls_el (-12696)
#define tls_pel (4)
#define tls_saved_errno (-12688)
#define tls_psaved_errno (12)
#define tls_sa_flags (-12684)
#define tls_psa_flags (16)
#define tls_oldmask (-12680)
#define tls_poldmask (20)
#define tls_deltamask (-12676)
#define tls_pdeltamask (24)
#define tls_event (-12672)
#define tls_pevent (28)
#define tls_errno_addr (-12668)
#define tls_perrno_addr (32)
#define tls_sigmask (-12664)
#define tls_psigmask (36)
#define tls_sigwait_mask (-12660)
#define tls_psigwait_mask (40)
#define tls_sigwait_info (-12656)
#define tls_psigwait_info (44)
#define tls_thread_context (-12652)
#define tls_pthread_context (48)
#define tls_thread_id (-12440)
#define tls_pthread_id (260)
#define tls_threadkill (-12436)
#define tls_pthreadkill (264)
#define tls_infodata (-12432)
#define tls_pinfodata (268)
#define tls_tid (-12284)
#define tls_ptid (416)
#define tls_local_clib (-12280)
#define tls_plocal_clib (420)
#define tls___dontuse (-12280)
#define tls_p__dontuse (420)
#define tls_locals (-11192)
#define tls_plocals (1508)
#define tls__ctinfo (-9472)
#define tls_p_ctinfo (3228)
#define tls_andreas (-9468)
#define tls_pandreas (3232)
#define tls_wq (-9464)
#define tls_pwq (3236)
#define tls_sig (-9436)
#define tls_psig (3264)
#define tls_incyg (-9432)
#define tls_pincyg (3268)
#define tls_spinning (-9428)
#define tls_pspinning (3272)
#define tls_stacklock (-9424)
#define tls_pstacklock (3276)
#define tls_stackptr (-9420)
#define tls_pstackptr (3280)
#define tls_stack (-9416)
#define tls_pstack (3284)
#define tls_initialized (-8392)
#define tls_pinitialized (4308)
@


1.40
log
@* cygtls.h (struct _cygtls): Remove unneeded elements.
* thread.cc (pthread::exit): Avoid potential double call to _my_tls.remove.
* tlsoffsets.h: Regenerate.
@
text
@d3 1
a3 1
//; $tls::sizeof__cygtls = 4324;
d46 16
a61 16
//; $tls::wq = -9452;
//; $tls::pwq = 3248;
//; $tls::sig = -9424;
//; $tls::psig = 3276;
//; $tls::incyg = -9420;
//; $tls::pincyg = 3280;
//; $tls::spinning = -9416;
//; $tls::pspinning = 3284;
//; $tls::stacklock = -9412;
//; $tls::pstacklock = 3288;
//; $tls::stackptr = -9408;
//; $tls::pstackptr = 3292;
//; $tls::stack = -9404;
//; $tls::pstack = 3296;
//; $tls::initialized = -8380;
//; $tls::pinitialized = 4320;
d106 16
a121 16
#define tls_wq (-9452)
#define tls_pwq (3248)
#define tls_sig (-9424)
#define tls_psig (3276)
#define tls_incyg (-9420)
#define tls_pincyg (3280)
#define tls_spinning (-9416)
#define tls_pspinning (3284)
#define tls_stacklock (-9412)
#define tls_pstacklock (3288)
#define tls_stackptr (-9408)
#define tls_pstackptr (3292)
#define tls_stack (-9404)
#define tls_pstack (3296)
#define tls_initialized (-8380)
#define tls_pinitialized (4320)
@


1.39
log
@* Makefile.in (clean): Clean generated files in srcdir.
* tlsoffsets.h: Regenerate.
@
text
@d3 1
a3 1
//; $tls::sizeof__cygtls = 4332;
d48 14
a61 18
//; $tls::prev = -9424;
//; $tls::pprev = 3276;
//; $tls::next = -9420;
//; $tls::pnext = 3280;
//; $tls::sig = -9416;
//; $tls::psig = 3284;
//; $tls::incyg = -9412;
//; $tls::pincyg = 3288;
//; $tls::spinning = -9408;
//; $tls::pspinning = 3292;
//; $tls::stacklock = -9404;
//; $tls::pstacklock = 3296;
//; $tls::stackptr = -9400;
//; $tls::pstackptr = 3300;
//; $tls::stack = -9396;
//; $tls::pstack = 3304;
//; $tls::initialized = -8372;
//; $tls::pinitialized = 4328;
d108 14
a121 18
#define tls_prev (-9424)
#define tls_pprev (3276)
#define tls_next (-9420)
#define tls_pnext (3280)
#define tls_sig (-9416)
#define tls_psig (3284)
#define tls_incyg (-9412)
#define tls_pincyg (3288)
#define tls_spinning (-9408)
#define tls_pspinning (3292)
#define tls_stacklock (-9404)
#define tls_pstacklock (3296)
#define tls_stackptr (-9400)
#define tls_pstackptr (3300)
#define tls_stack (-9396)
#define tls_pstack (3304)
#define tls_initialized (-8372)
#define tls_pinitialized (4328)
@


1.38
log
@* cygheap.cc (cygheap_user::~cygheap_user): Remove unneeded if 0'ed code.
* fhandler_registry.cc (fhandler_registry::exists): Recode goto as if/else to
avoid a gcc4 compiler warning.
(fhandler_registry::open): Ditto.  Use one goto rather than two.
* gentls_offsets: Fix compiler warning in generated output.
* tlsoffsets.h: Regenerate.
* mount.cc (fillout_mntent): slashify native paths returned via getmntent.
@
text
@d3 1
a3 1
//; $tls::sizeof__cygtls = 4320;
d42 24
a65 24
//; $tls::_ctinfo = -9484;
//; $tls::p_ctinfo = 3216;
//; $tls::andreas = -9480;
//; $tls::pandreas = 3220;
//; $tls::wq = -9464;
//; $tls::pwq = 3236;
//; $tls::prev = -9436;
//; $tls::pprev = 3264;
//; $tls::next = -9432;
//; $tls::pnext = 3268;
//; $tls::sig = -9428;
//; $tls::psig = 3272;
//; $tls::incyg = -9424;
//; $tls::pincyg = 3276;
//; $tls::spinning = -9420;
//; $tls::pspinning = 3280;
//; $tls::stacklock = -9416;
//; $tls::pstacklock = 3284;
//; $tls::stackptr = -9412;
//; $tls::pstackptr = 3288;
//; $tls::stack = -9408;
//; $tls::pstack = 3292;
//; $tls::initialized = -8384;
//; $tls::pinitialized = 4316;
d106 24
a129 24
#define tls__ctinfo (-9484)
#define tls_p_ctinfo (3216)
#define tls_andreas (-9480)
#define tls_pandreas (3220)
#define tls_wq (-9464)
#define tls_pwq (3236)
#define tls_prev (-9436)
#define tls_pprev (3264)
#define tls_next (-9432)
#define tls_pnext (3268)
#define tls_sig (-9428)
#define tls_psig (3272)
#define tls_incyg (-9424)
#define tls_pincyg (3276)
#define tls_spinning (-9420)
#define tls_pspinning (3280)
#define tls_stacklock (-9416)
#define tls_pstacklock (3284)
#define tls_stackptr (-9412)
#define tls_pstackptr (3288)
#define tls_stack (-9408)
#define tls_pstack (3292)
#define tls_initialized (-8384)
#define tls_pinitialized (4316)
@


1.37
log
@* cygtls.h (unionent): Move from net.cc.
(unionent::struct_type): Move enum here.
(_local_storage::hostent_buf): Define as unionent.
(_local_storage::protoent_buf): Ditto.
(_local_storage::servent_buf): Ditto.
* net.cc (unionent): Move to cygtls.h.
(struct_type): Ditto.
(dup_ent): Define one function per {host,proto,serv}ent type.
(cygwin_getprotobyname): Simplify dup_ent call.  Removed now-unneeded return
type coercion.
(cygwin_getprotobynumber): Ditto.
(cygwin_getservbyname): Ditto.
(cygwin_getservbyport): Ditto.
(cygwin_gethostbyname): Ditto.
(cygwin_gethostbyaddr): Ditto.  tlsoffsets.h: Regenerate.
@
text
@d3 1
a3 1
//; $tls::sizeof__cygtls = 4296;
d40 26
a65 26
//; $tls::locals = -11216;
//; $tls::plocals = 1484;
//; $tls::_ctinfo = -9508;
//; $tls::p_ctinfo = 3192;
//; $tls::andreas = -9504;
//; $tls::pandreas = 3196;
//; $tls::wq = -9488;
//; $tls::pwq = 3212;
//; $tls::prev = -9460;
//; $tls::pprev = 3240;
//; $tls::next = -9456;
//; $tls::pnext = 3244;
//; $tls::sig = -9452;
//; $tls::psig = 3248;
//; $tls::incyg = -9448;
//; $tls::pincyg = 3252;
//; $tls::spinning = -9444;
//; $tls::pspinning = 3256;
//; $tls::stacklock = -9440;
//; $tls::pstacklock = 3260;
//; $tls::stackptr = -9436;
//; $tls::pstackptr = 3264;
//; $tls::stack = -9432;
//; $tls::pstack = 3268;
//; $tls::initialized = -8408;
//; $tls::pinitialized = 4292;
d104 26
a129 26
#define tls_locals (-11216)
#define tls_plocals (1484)
#define tls__ctinfo (-9508)
#define tls_p_ctinfo (3192)
#define tls_andreas (-9504)
#define tls_pandreas (3196)
#define tls_wq (-9488)
#define tls_pwq (3212)
#define tls_prev (-9460)
#define tls_pprev (3240)
#define tls_next (-9456)
#define tls_pnext (3244)
#define tls_sig (-9452)
#define tls_psig (3248)
#define tls_incyg (-9448)
#define tls_pincyg (3252)
#define tls_spinning (-9444)
#define tls_pspinning (3256)
#define tls_stacklock (-9440)
#define tls_pstacklock (3260)
#define tls_stackptr (-9436)
#define tls_pstackptr (3264)
#define tls_stack (-9432)
#define tls_pstack (3268)
#define tls_initialized (-8408)
#define tls_pinitialized (4292)
@


1.36
log
@	* cygtls.h (struct san): Add two int values to store the current
	tls_pathbuf counters.
	(return_from_fault): Restore tls_pathbuf counters.
	(setup_fault): Save tls_pathbuf counters.
	* tlsoffset.h: Regenerate.
@
text
@d3 1
a3 1
//; $tls::sizeof__cygtls = 4292;
d42 24
a65 24
//; $tls::_ctinfo = -9512;
//; $tls::p_ctinfo = 3188;
//; $tls::andreas = -9508;
//; $tls::pandreas = 3192;
//; $tls::wq = -9492;
//; $tls::pwq = 3208;
//; $tls::prev = -9464;
//; $tls::pprev = 3236;
//; $tls::next = -9460;
//; $tls::pnext = 3240;
//; $tls::sig = -9456;
//; $tls::psig = 3244;
//; $tls::incyg = -9452;
//; $tls::pincyg = 3248;
//; $tls::spinning = -9448;
//; $tls::pspinning = 3252;
//; $tls::stacklock = -9444;
//; $tls::pstacklock = 3256;
//; $tls::stackptr = -9440;
//; $tls::pstackptr = 3260;
//; $tls::stack = -9436;
//; $tls::pstack = 3264;
//; $tls::initialized = -8412;
//; $tls::pinitialized = 4288;
d106 24
a129 24
#define tls__ctinfo (-9512)
#define tls_p_ctinfo (3188)
#define tls_andreas (-9508)
#define tls_pandreas (3192)
#define tls_wq (-9492)
#define tls_pwq (3208)
#define tls_prev (-9464)
#define tls_pprev (3236)
#define tls_next (-9460)
#define tls_pnext (3240)
#define tls_sig (-9456)
#define tls_psig (3244)
#define tls_incyg (-9452)
#define tls_pincyg (3248)
#define tls_spinning (-9448)
#define tls_pspinning (3252)
#define tls_stacklock (-9444)
#define tls_pstacklock (3256)
#define tls_stackptr (-9440)
#define tls_pstackptr (3260)
#define tls_stack (-9436)
#define tls_pstack (3264)
#define tls_initialized (-8412)
#define tls_pinitialized (4288)
@


1.35
log
@	* Makefile.in (DLL_OFILES): Add tls_pbuf.o.
	* autoload.cc (CreateDesktopW): Replace CreateDesktopA.
	(CreateWindowStationW): Replace CreateWindowStationA.
	(GetUserObjectInformationW): Replace GetUserObjectInformationA.
	* cygheap.h (cwdstuff::get): Assume default buffer size NT_MAX_PATH.
	* cygtls.cc (_cygtls::remove): Free temporary TLS path buffers.
	* cygtls.h (TP_NUM_C_BUFS): Define.
	(TP_NUM_W_BUFS): Define.
	(class tls_pathbuf): New class to store pointers to thread local
	temporary path buffers.
	(_local_storage::pathbufs): New member.
	* environ.cc (win_env::add_cache): Use temporary TLS path buffer instead
	of stack based buffer.
	(posify): Get temporary outenv buffer from calling function.
	(environ_init): Create temporary TLS path buffer for posify.
	(build_env): Create Windows environment block as WCHAR buffer.
	* environ.h (build_env): Change declaration accordingly.
	* external.cc (sync_winenv): Accommodate build_env change.
	* fhandler_console.cc (fhandler_console::need_invisible): Use
	GetUserObjectInformationW and CreateWindowStationW.
	* fhandler_process.cc (format_process_maps): Use temporary TLS path
	buffer instead of stack based buffer.
	* fork.cc (frok::parent): Convert to use CreateProcessW.
	* path.cc: Throughout use temporary TLS path buffers instead of stack
	based buffer.  Replace checks for CYG_MAX_PATH by checks for
	NT_MAX_PATH.
	(getfileattr): New function to replace GetFileAttributesA.
	(normalize_win32_path): Remove Win32 and NT long path prefixes.
	(getwd): Assume PATH_MAX + 1 buffer per SUSv3.
	* path.h (class path_conv): Set path buffer to size NT_MAX_PATH.
	(iswdrive): Define.
	* pinfo.cc (commune_process): Use temporary TLS path buffer instead of
	stack based buffer.
	* registry.cc (get_registry_hive_path): Ditto.
	(load_registry_hive): Ditto.
	* spawn.cc (spawn_guts): Convert to use CreateProcessW and
	CreateProcessAsUserW.
	(av::fixup): Open/close file using NtOpenFile/NtClose.
	* syscalls.cc (mknod_worker): Allow PATH_MAX file name.
	(mknod32): Ditto.
	(getusershell): Ditto.
	* tls_pbuf.cc: New file implementing tls_pathbuf and tmp_pathbuf
	methods.
	* tls_pbuf.h: New header for files using tmp_pathbuf.
	* tlsoffsets.h: Regenerate.
	* winsup.h (NT_MAX_PATH): Define as 32767 to avoid USHORT overflow.
@
text
@d3 1
a3 1
//; $tls::sizeof__cygtls = 4284;
d46 20
a65 20
//; $tls::wq = -9500;
//; $tls::pwq = 3200;
//; $tls::prev = -9472;
//; $tls::pprev = 3228;
//; $tls::next = -9468;
//; $tls::pnext = 3232;
//; $tls::sig = -9464;
//; $tls::psig = 3236;
//; $tls::incyg = -9460;
//; $tls::pincyg = 3240;
//; $tls::spinning = -9456;
//; $tls::pspinning = 3244;
//; $tls::stacklock = -9452;
//; $tls::pstacklock = 3248;
//; $tls::stackptr = -9448;
//; $tls::pstackptr = 3252;
//; $tls::stack = -9444;
//; $tls::pstack = 3256;
//; $tls::initialized = -8420;
//; $tls::pinitialized = 4280;
d110 20
a129 20
#define tls_wq (-9500)
#define tls_pwq (3200)
#define tls_prev (-9472)
#define tls_pprev (3228)
#define tls_next (-9468)
#define tls_pnext (3232)
#define tls_sig (-9464)
#define tls_psig (3236)
#define tls_incyg (-9460)
#define tls_pincyg (3240)
#define tls_spinning (-9456)
#define tls_pspinning (3244)
#define tls_stacklock (-9452)
#define tls_pstacklock (3248)
#define tls_stackptr (-9448)
#define tls_pstackptr (3252)
#define tls_stack (-9444)
#define tls_pstack (3256)
#define tls_initialized (-8420)
#define tls_pinitialized (4280)
@


1.34
log
@2006-07-25  Corinna Vinschen  <corinna@@vinschen.de>

	* include/cygwin/version.h: Bump DLL version to 1.7.0.

2006-07-25  Corinna Vinschen  <corinna@@vinschen.de>

	* select.h: Remove.
	* fhandler_socket.cc: Don't include select.h.
	* select.cc: Ditto.

2006-07-25  Corinna Vinschen  <corinna@@vinschen.de>

	* cygtls.h: Drop socket related includes.
	(struct _local_storage): Remove exitsock and exitsock_sin. Add
	select_sockevt.
	* cygtls.cc: Accomodate above change throughout.
	* fhandler.h (class fhandler_socket): Make wsock_evt public.
	* fhandler_socket.cc (fhandler_socket::fhandler_socket): Accomodate
	reordering members.
	(fhandler_socket::evaluate_events): Drop FD_CONNECT event as soon as
	it gets read once.  Never remove FD_WRITE event here.
	(fhandler_socket::wait_for_events): Wait 50 ms instead of INFINITE for
	socket events.
	(fhandler_socket::accept): Fix conditional.  Set wsock_events members
	of accepted socket to useful start values.
	(fhandler_socket::recv_internal): Always drop FD_READ/FD_OOB events from
	wsock_events after the call to WSARecvFrom.
	(fhandler_socket::send_internal): Drop FD_WRITE event from wsock_events
	if the call to WSASendTo fails with WSAEWOULDBLOCK.  Fix return value
	condition.
	* select.cc (struct socketinf): Change to accomodate using socket event
	handling.
	(peek_socket): Use event handling for peeking socket.
	(thread_socket): Ditto.
	(start_thread_socket): Ditto.
	(socket_cleanup): Same here.
	* tlsoffsets.h: Regenerate.

2006-07-20  Corinna Vinschen  <corinna@@vinschen.de>

	* fhandler.h (class fhandler_socket): Rearrange slightly to keep
	event handling methods and members together.  Drop owner status flag.
	Split wait method.  Rename event handling methods for readability.
	* fhandler_socket.cc (struct wsa_event): Add owner field.
	(LOCK_EVENTS): New macro.
	(UNLOCK_EVENTS): Ditto.
	(fhandler_socket::init_events): rename from prepare.
	(fhandler_socket::evaluate_events): First half of former wait method.
	Do everything but wait.  Allow specifiying whether or not events from
	event_mask should be erased from wsock_events->events.  Simplify
	OOB handling.  Allow sending SIGURG to any process (group).
	(fhandler_socket::wait_for_events): Second half of former wait method.
	Call evaluate_events and wait in a loop if socket is blocking.
	(fhandler_socket::release_events): Rename from release.
	(fhandler_socket::connect): Accomodate above name changes.
	(fhandler_socket::accept): Ditto.
	(fhandler_socket::recv_internal): Ditto.
	(fhandler_socket::send_internal): Ditto.
	(fhandler_socket::close): Ditto.
	(fhandler_socket::fcntl): Always set owner to given input value on
	F_SETOWN.  Handle F_GETOWN.
	* net.cc (fdsock): Accomodate above name changes.

2006-07-20  Corinna Vinschen  <corinna@@vinschen.de>

	* fhandler_socket.cc (fhandler_socket::wait): Set Winsock errno to
	WSAEWOULDBLOCK instead of WSAEINPROGRESS.

2006-07-18  Brian Ford  <Brian.Ford@@FlightSafety.com>
	    Corinna Vinschen  <corinna@@vinschen.de>

	* winsup.h (mmap_region_status): New enum.
	(mmap_is_attached_or_noreserve_page): Adjust prototype and rename
	as below.
	* mmap.cc (mmap_is_attached_or_noreserve_page):  Rename
	mmap_is_attached_or_noreserve.  Add region length parameter.
	Return enum above.
	* exceptions.cc (_cygtls::handle_exceptions): Accomodate above.
	* fhandler.cc (fhandler_base::raw_read): Call above for NOACCESS
	errors and retry on success to allow reads into untouched
	MAP_NORESERVE buffers.

2006-07-18  Corinna Vinschen  <corinna@@vinschen.de>

	* cygwin.din (posix_openpt): Export.
	* tty.cc (posix_openpt): New function.
	* include/cygwin/stdlib.h (posix_openpt): Declare.
	* include/cygwin/version.h: Bump API minor number.

2006-07-14  Corinna Vinschen  <corinna@@vinschen.de>

	* security.cc (get_token_group_sidlist): Always add the interactive
	group to the token.  Add comment.  Create logon_id group SID by
	copying it from incoming group list.
	(create_token): Add subauth_token parameter.  Use information in
	subauth_token if present.  Tweak SourceIdentifier if subauth_token
	is present for debugging purposes.
	* security.h (create_token): Add subauth_token parameter in declaration.
	* syscalls.cc (seteuid32): Call subauth first.  Call create_token
	regardless.  Use subauth token in call to create_token if subauth
	succeeded.

2006-07-13  Corinna Vinschen  <corinna@@vinschen.de>

	* include/netinet/in.h: Update copyright.

2006-07-13  Corinna Vinschen  <corinna@@vinschen.de>

	* fhandler_socket.cc (fhandler_socket::wait): Rework function so that
	WaitForMultipleObjects is really only called when necessary.

2006-07-12  Corinna Vinschen  <corinna@@vinschen.de>

	* include/netdb.h: Declare rcmd, rcmd_af, rexec, rresvport,
	rresvport_af, iruserok, iruserok_sa, ruserok.

2006-07-12  Corinna Vinschen  <corinna@@vinschen.de>

	* Makefile.in (DLL_OFILES): Drop iruserok.o.  Add rcmd.o.
	* autoload.cc (rcmd): Drop definition.
	* cygwin.din: Export bindresvport, bindresvport_sa, iruserok_sa,
	rcmd_af, rresvport_af.
	* net.cc (cygwin_rcmd): Remove.
	(last_used_bindresvport): Rename from last_used_rrecvport.
	(cygwin_bindresvport_sa): New function implementing bindresvport_sa.
	(cygwin_bindresvport): New function implementing bindresvport.
	(cygwin_rresvport): Remove.
	* include/cygwin/version.h: Bump API minor number.
	* include/netinet/in.h: Declare bindresvport and bindresvport_sa.
	* libc/iruserok.c: Remove file.
	* libc/rcmd.cc: New file implementing rcmd, rcmd_af, rresvport,
	rresvport_af, iruserok_sa, iruserok and ruserok.

2006-07-12  Corinna Vinschen  <corinna@@vinschen.de>

	* fhandler_socket.cc (fhandler_socket::getsockname): Return valid
	result for unbound sockets.

2006-07-11  Corinna Vinschen  <corinna@@vinschen.de>

	* fhandler_socket.cc (fhandler_socket::fixup_after_fork): Handle
	wsock_mtx and wsock_evt on fork, thus handling close_on_exec correctly.
	(fhandler_socket::fixup_after_exec): Drop misguided attempt to handle
	close_on_exec here.
	(fhandler_socket::dup): Call fixup_after_fork with NULL parent.
	Add comment.
	(fhandler_socket::set_close_on_exec): Handle wsock_mtx and wsock_evt.

2006-07-10  Corinna Vinschen  <corinna@@vinschen.de>

	* fhandler.h (class fhandler_socket): Add wsock_mtx, wsock_evt
	and wsock_events members.  Remove closed status flag, add listener
	status flag.  Accomodate new implementation of socket event handling
	methods.  Declare recv* and send* functions ssize_t as the POSIX
	equivalents.
	(fhandler_socket::recv_internal): Declare.
	(fhandler_socket::send_internal): Ditto.
	* fhandler_socket.cc (EVENT_MASK): Define mask of selected events.
	(fhandler_socket::fhandler_socket): Initialize new members.
	(fhandler_socket::af_local_setblocking): Don't actually set the
	socket to blocking mode.  Keep sane event selection.
	(fhandler_socket::af_local_unsetblocking): Don't actually set the
	socket to previous blocking setting, just remember it.
	(struct wsa_event): New structure to keep event data per shared
	socket.
	(NUM_SOCKS): Define number of shared sockets concurrently handled by
	all active Cygwin processes.
	(wsa_events): New shared datastructure keeping all wsa_event records.
	(socket_serial_number): New shared variable to identify shared sockets.
	(wsa_slot_mtx): Global mutex to serialize wsa_events access.
	(search_wsa_event_slot): New static function to select a new wsa_event
	slot for a new socket.
	(fhandler_socket::prepare): Rewrite.  Prepare event selection
	per new socket.
	(fhandler_socket::wait): Rewrite.  Wait for socket events in thread
	safe and multiple process safe.
	(fhandler_socket::release): Rewrite.  Close per-socket descriptor
	mutex handle and event handle.
	(fhandler_socket::dup): Duplicate wsock_mtx and wsock_evt.  Fix
	copy-paste error in debug output.
	(fhandler_socket::connect): Accomodate new event handling.
	(fhandler_socket::listen): Set listener flag on successful listen.
	(fhandler_socket::accept): Accomodate new event handling.
	(fhandler_socket::recv_internal): New inline method centralizing
	common recv code.
	(fhandler_socket::recvfrom): Call recv_internal now.
	(fhandler_socket::recvmsg): Ditto.  Streamline copying from iovec
	to WSABUF.
	(fhandler_socket::send_internal): New inline method centralizing
	common send code.
	(fhandler_socket::sendto): Call send_internal now.
	(fhandler_socket::sendmsg): Ditto.  Streamline copying from iovec
	to WSABUF.
	(fhandler_socket::close): Call release now.
	(fhandler_socket::ioctl): Never actually switch to blocking mode.
	Just keep track of the setting.
	* net.cc (fdsock): Call prepare now.
	(cygwin_connect): Revert again to event driven technique.
	(cygwin_accept): Ditto.
	* poll.cc (poll): Don't call recvfrom on a listening socket.
	Remove special case for failing recvfrom.
	* include/sys/socket.h: Declare recv* and send* functions ssize_t as
	requested by POSIX.

2006-07-07  Corinna Vinschen  <corinna@@vinschen.de>

	* net.cc (cygwin_inet_ntop): Fix data type of forth parameter.

2006-07-06  Corinna Vinschen  <corinna@@vinschen.de>

	* include/cygwin/in6.h (struct in6_addr): Fix typo.

2006-07-06  Corinna Vinschen  <corinna@@vinschen.de>

	* cygwin.din: Export in6addr_any, in6addr_loopback, freeaddrinfo,
	gai_strerror, getaddrinfo, getnameinfo.
	* fhandler_socket.cc: Include cygwin/in6.h.
	(get_inet_addr): Accomodate AF_INET6 usage.
	(fhandler_socket::connect): Ditto.
	(fhandler_socket::listen): Ditto.
	(fhandler_socket::sendto): Ditto.
	* net.cc: Include cygwin/in6.h.
	(in6addr_any): Define.
	(in6addr_loopback): Define.
	(cygwin_socket): Accomodate AF_INET6 usage.
	(socketpair): Bind socketpairs only to loopback for security.
	(inet_pton4): New static function.
	(inet_pton6): Ditto.
	(cygwin_inet_pton): New AF_INET6 aware inet_pton implementation.
	(inet_ntop4): New static function.
	(inet_ntop6): Ditto.
	(cygwin_inet_ntop): New AF_INET6 aware inet_ntop implementation.
	(ga_aistruct): New static function.
	(ga_clone): Ditto.
	(ga_echeck): Ditto.
	(ga_nsearch): Ditto.
	(ga_port): Ditto.
	(ga_serv): Ditto.
	(ga_unix): Ditto.
	(gn_ipv46): Ditto.
	(ipv4_freeaddrinfo): Ditto.
	(ipv4_getaddrinfo): Ditto.
	(ipv4_getnameinfo): Ditto.
	(gai_errmap_t): New structure holding error code - error string mapping.
	(cygwin_gai_strerror): New function implementing gai_strerror.
	(w32_to_gai_err): New static function.
	(get_ipv6_funcs): Ditto.
	(load_ipv6_funcs): Ditto.
	(cygwin_freeaddrinfo): New function implementing freeaddrinfo.
	(cygwin_getaddrinfo): New function implementing getaddrinfo.
	(cygwin_getnameinfo): New function implementing getnameinfo.
	* include/netdb.h: Include stdint.h and cygwin/socket.h.  Define
	data types and macros used by getaddrinfo and friends.  Declare
	freeaddrinfo, gai_strerror, getaddrinfo and getnameinfo.
	* include/cygwin/in.h: Add IPv6 related IPPROTOs. Remove definition
	of struct sockaddr_in6.  Include cygwin/in6.h instead.
	* include/cygwin/in6.h: New header file defining IPv6 releated
	data types and macros.
	* include/cygwin/socket.h: Enable AF_INET6 and PF_INET6.  Add
	IPv6 related socket options.
	* include/cygwin/version.h: Bump API minor number.

2006-07-06  Corinna Vinschen  <corinna@@vinschen.de>

	* autoload.cc (DsGetDcNameA): Define.
	(NetGetAnyDCName): Define.
	* security.cc: Include dsgetdc.h.
	(DsGetDcNameA): Declare.
	(DS_FORCE_REDISCOVERY): Define.
	(get_logon_server): Add bool parameter to control rediscovery of DC.
	Use DsGetDcNameA function if supported, NetGetDCName/NetGetAnyDCName
	otherwise.
	(get_server_groups): Rediscover DC if get_user_groups fails and
	try again.
	(get_reg_security): Use correct error code macro when testing
	RegGetKeySecurity return value.
	* security.h (get_logon_server): Remove default vaue from wserver
	parameter.  Add rediscovery parameter.
	* uinfo.cc (cygheap_user::env_logsrv): Accomodate rediscovery parameter
	in call to get_logon_server.
@
text
@d3 1
a3 1
//; $tls::sizeof__cygtls = 4196;
d42 24
a65 24
//; $tls::_ctinfo = -9600;
//; $tls::p_ctinfo = 3100;
//; $tls::andreas = -9596;
//; $tls::pandreas = 3104;
//; $tls::wq = -9588;
//; $tls::pwq = 3112;
//; $tls::prev = -9560;
//; $tls::pprev = 3140;
//; $tls::next = -9556;
//; $tls::pnext = 3144;
//; $tls::sig = -9552;
//; $tls::psig = 3148;
//; $tls::incyg = -9548;
//; $tls::pincyg = 3152;
//; $tls::spinning = -9544;
//; $tls::pspinning = 3156;
//; $tls::stacklock = -9540;
//; $tls::pstacklock = 3160;
//; $tls::stackptr = -9536;
//; $tls::pstackptr = 3164;
//; $tls::stack = -9532;
//; $tls::pstack = 3168;
//; $tls::initialized = -8508;
//; $tls::pinitialized = 4192;
d106 24
a129 24
#define tls__ctinfo (-9600)
#define tls_p_ctinfo (3100)
#define tls_andreas (-9596)
#define tls_pandreas (3104)
#define tls_wq (-9588)
#define tls_pwq (3112)
#define tls_prev (-9560)
#define tls_pprev (3140)
#define tls_next (-9556)
#define tls_pnext (3144)
#define tls_sig (-9552)
#define tls_psig (3148)
#define tls_incyg (-9548)
#define tls_pincyg (3152)
#define tls_spinning (-9544)
#define tls_pspinning (3156)
#define tls_stacklock (-9540)
#define tls_pstacklock (3160)
#define tls_stackptr (-9536)
#define tls_pstackptr (3164)
#define tls_stack (-9532)
#define tls_pstack (3168)
#define tls_initialized (-8508)
#define tls_pinitialized (4192)
@


1.33
log
@* cygtls.h (CYGTLS_PADSIZE): Reset to a size that XP SP1 seems to like.
* tlsoffsets.h: Regenerate.
@
text
@d3 1
a3 1
//; $tls::sizeof__cygtls = 4212;
d42 24
a65 24
//; $tls::_ctinfo = -9584;
//; $tls::p_ctinfo = 3116;
//; $tls::andreas = -9580;
//; $tls::pandreas = 3120;
//; $tls::wq = -9572;
//; $tls::pwq = 3128;
//; $tls::prev = -9544;
//; $tls::pprev = 3156;
//; $tls::next = -9540;
//; $tls::pnext = 3160;
//; $tls::sig = -9536;
//; $tls::psig = 3164;
//; $tls::incyg = -9532;
//; $tls::pincyg = 3168;
//; $tls::spinning = -9528;
//; $tls::pspinning = 3172;
//; $tls::stacklock = -9524;
//; $tls::pstacklock = 3176;
//; $tls::stackptr = -9520;
//; $tls::pstackptr = 3180;
//; $tls::stack = -9516;
//; $tls::pstack = 3184;
//; $tls::initialized = -8492;
//; $tls::pinitialized = 4208;
d106 24
a129 24
#define tls__ctinfo (-9584)
#define tls_p_ctinfo (3116)
#define tls_andreas (-9580)
#define tls_pandreas (3120)
#define tls_wq (-9572)
#define tls_pwq (3128)
#define tls_prev (-9544)
#define tls_pprev (3156)
#define tls_next (-9540)
#define tls_pnext (3160)
#define tls_sig (-9536)
#define tls_psig (3164)
#define tls_incyg (-9532)
#define tls_pincyg (3168)
#define tls_spinning (-9528)
#define tls_pspinning (3172)
#define tls_stacklock (-9524)
#define tls_pstacklock (3176)
#define tls_stackptr (-9520)
#define tls_pstackptr (3180)
#define tls_stack (-9516)
#define tls_pstack (3184)
#define tls_initialized (-8492)
#define tls_pinitialized (4208)
@


1.33.2.1
log
@	* cygtls.h: Drop socket related includes.
	(struct _local_storage): Remove exitsock and exitsock_sin. Add
	select_sockevt.
	* cygtls.cc: Accomodate above change throughout.
	* fhandler.h (class fhandler_socket): Make wsock_evt public.
	* fhandler_socket.cc (fhandler_socket::fhandler_socket): Accomodate
	reordering members.
	(fhandler_socket::evaluate_events): Drop FD_CONNECT event as soon as
	it gets read once.  Never remove FD_WRITE event here.
	(fhandler_socket::wait_for_events): Wait 50 ms instead of INFINITE for
	socket events.
	(fhandler_socket::accept): Fix conditional.  Set wsock_events members
	of accepted socket to useful start values.
	(fhandler_socket::recv_internal): Always drop FD_READ/FD_OOB events from
	wsock_events after the call to WSARecvFrom.
	(fhandler_socket::send_internal): Drop FD_WRITE event from wsock_events
	if the call to WSASendTo fails with WSAEWOULDBLOCK.  Fix return value
	condition.
	* select.cc (struct socketinf): Change to accomodate using socket event
	handling.
	(peek_socket): Use event handling for peeking socket.
	(thread_socket): Ditto.
	(start_thread_socket): Ditto.
	(socket_cleanup): Same here.
	* tlsoffsets.h: Regenerate.
@
text
@d3 1
a3 1
//; $tls::sizeof__cygtls = 4196;
d42 24
a65 24
//; $tls::_ctinfo = -9600;
//; $tls::p_ctinfo = 3100;
//; $tls::andreas = -9596;
//; $tls::pandreas = 3104;
//; $tls::wq = -9588;
//; $tls::pwq = 3112;
//; $tls::prev = -9560;
//; $tls::pprev = 3140;
//; $tls::next = -9556;
//; $tls::pnext = 3144;
//; $tls::sig = -9552;
//; $tls::psig = 3148;
//; $tls::incyg = -9548;
//; $tls::pincyg = 3152;
//; $tls::spinning = -9544;
//; $tls::pspinning = 3156;
//; $tls::stacklock = -9540;
//; $tls::pstacklock = 3160;
//; $tls::stackptr = -9536;
//; $tls::pstackptr = 3164;
//; $tls::stack = -9532;
//; $tls::pstack = 3168;
//; $tls::initialized = -8508;
//; $tls::pinitialized = 4192;
d106 24
a129 24
#define tls__ctinfo (-9600)
#define tls_p_ctinfo (3100)
#define tls_andreas (-9596)
#define tls_pandreas (3104)
#define tls_wq (-9588)
#define tls_pwq (3112)
#define tls_prev (-9560)
#define tls_pprev (3140)
#define tls_next (-9556)
#define tls_pnext (3144)
#define tls_sig (-9552)
#define tls_psig (3148)
#define tls_incyg (-9548)
#define tls_pincyg (3152)
#define tls_spinning (-9544)
#define tls_pspinning (3156)
#define tls_stacklock (-9540)
#define tls_pstacklock (3160)
#define tls_stackptr (-9536)
#define tls_pstackptr (3164)
#define tls_stack (-9532)
#define tls_pstack (3168)
#define tls_initialized (-8508)
#define tls_pinitialized (4192)
@


1.32
log
@* cygtls.h (CYGTLS_PADSIZE): Bump up or suffer a regrettable collision with the
call chain.
@
text
@d4 1
a4 1
//; $tls::func = -16848;
d6 1
a6 1
//; $tls::el = -16844;
d8 1
a8 1
//; $tls::saved_errno = -16836;
d10 1
a10 1
//; $tls::sa_flags = -16832;
d12 1
a12 1
//; $tls::oldmask = -16828;
d14 1
a14 1
//; $tls::deltamask = -16824;
d16 1
a16 1
//; $tls::event = -16820;
d18 1
a18 1
//; $tls::errno_addr = -16816;
d20 1
a20 1
//; $tls::sigmask = -16812;
d22 1
a22 1
//; $tls::sigwait_mask = -16808;
d24 1
a24 1
//; $tls::sigwait_info = -16804;
d26 1
a26 1
//; $tls::thread_context = -16800;
d28 1
a28 1
//; $tls::thread_id = -16588;
d30 1
a30 1
//; $tls::threadkill = -16584;
d32 1
a32 1
//; $tls::infodata = -16580;
d34 1
a34 1
//; $tls::tid = -16432;
d36 1
a36 1
//; $tls::local_clib = -16428;
d38 1
a38 1
//; $tls::__dontuse = -16428;
d40 1
a40 1
//; $tls::locals = -15364;
d42 1
a42 1
//; $tls::_ctinfo = -13732;
d44 1
a44 1
//; $tls::andreas = -13728;
d46 1
a46 1
//; $tls::wq = -13720;
d48 1
a48 1
//; $tls::prev = -13692;
d50 1
a50 1
//; $tls::next = -13688;
d52 1
a52 1
//; $tls::sig = -13684;
d54 1
a54 1
//; $tls::incyg = -13680;
d56 1
a56 1
//; $tls::spinning = -13676;
d58 1
a58 1
//; $tls::stacklock = -13672;
d60 1
a60 1
//; $tls::stackptr = -13668;
d62 1
a62 1
//; $tls::stack = -13664;
d64 1
a64 1
//; $tls::initialized = -12640;
d68 1
a68 1
#define tls_func (-16848)
d70 1
a70 1
#define tls_el (-16844)
d72 1
a72 1
#define tls_saved_errno (-16836)
d74 1
a74 1
#define tls_sa_flags (-16832)
d76 1
a76 1
#define tls_oldmask (-16828)
d78 1
a78 1
#define tls_deltamask (-16824)
d80 1
a80 1
#define tls_event (-16820)
d82 1
a82 1
#define tls_errno_addr (-16816)
d84 1
a84 1
#define tls_sigmask (-16812)
d86 1
a86 1
#define tls_sigwait_mask (-16808)
d88 1
a88 1
#define tls_sigwait_info (-16804)
d90 1
a90 1
#define tls_thread_context (-16800)
d92 1
a92 1
#define tls_thread_id (-16588)
d94 1
a94 1
#define tls_threadkill (-16584)
d96 1
a96 1
#define tls_infodata (-16580)
d98 1
a98 1
#define tls_tid (-16432)
d100 1
a100 1
#define tls_local_clib (-16428)
d102 1
a102 1
#define tls___dontuse (-16428)
d104 1
a104 1
#define tls_locals (-15364)
d106 1
a106 1
#define tls__ctinfo (-13732)
d108 1
a108 1
#define tls_andreas (-13728)
d110 1
a110 1
#define tls_wq (-13720)
d112 1
a112 1
#define tls_prev (-13692)
d114 1
a114 1
#define tls_next (-13688)
d116 1
a116 1
#define tls_sig (-13684)
d118 1
a118 1
#define tls_incyg (-13680)
d120 1
a120 1
#define tls_spinning (-13676)
d122 1
a122 1
#define tls_stacklock (-13672)
d124 1
a124 1
#define tls_stackptr (-13668)
d126 1
a126 1
#define tls_stack (-13664)
d128 1
a128 1
#define tls_initialized (-12640)
@


1.31
log
@* cygtls.cc (_cygtls::call): Call call2 using _my_tls.
(_cygtls::init_exception_handler): Always replace existing exception handler
with cygwin exception handler.
* cygtls.h (_cygtls::call2): Remove static designation.
* dcrto.cc (dll_crt0_1): Define in a way that allows calling via _cygtls::call.
(_initialize_main_tls): Delete.
(_dll_crt0): Call dll_crt0_1 via cygtls::call.  Set _main_tls here.
* external.cc (cygwin_internal): Implement CW_CYGTLS_PADSIZE.
* include/sys/cygwin.h (CW_CYGTLS_PADSIZE): Define.
* tlsoffsets.h: Regenerate.
@
text
@d4 1
a4 1
//; $tls::func = -12636;
d6 1
a6 1
//; $tls::el = -12632;
d8 1
a8 1
//; $tls::saved_errno = -12624;
d10 1
a10 1
//; $tls::sa_flags = -12620;
d12 1
a12 1
//; $tls::oldmask = -12616;
d14 1
a14 1
//; $tls::deltamask = -12612;
d16 1
a16 1
//; $tls::event = -12608;
d18 1
a18 1
//; $tls::errno_addr = -12604;
d20 1
a20 1
//; $tls::sigmask = -12600;
d22 1
a22 1
//; $tls::sigwait_mask = -12596;
d24 1
a24 1
//; $tls::sigwait_info = -12592;
d26 1
a26 1
//; $tls::thread_context = -12588;
d28 1
a28 1
//; $tls::thread_id = -12376;
d30 1
a30 1
//; $tls::threadkill = -12372;
d32 1
a32 1
//; $tls::infodata = -12368;
d34 1
a34 1
//; $tls::tid = -12220;
d36 1
a36 1
//; $tls::local_clib = -12216;
d38 1
a38 1
//; $tls::__dontuse = -12216;
d40 1
a40 1
//; $tls::locals = -11152;
d42 1
a42 1
//; $tls::_ctinfo = -9520;
d44 1
a44 1
//; $tls::andreas = -9516;
d46 1
a46 1
//; $tls::wq = -9508;
d48 1
a48 1
//; $tls::prev = -9480;
d50 1
a50 1
//; $tls::next = -9476;
d52 1
a52 1
//; $tls::sig = -9472;
d54 1
a54 1
//; $tls::incyg = -9468;
d56 1
a56 1
//; $tls::spinning = -9464;
d58 1
a58 1
//; $tls::stacklock = -9460;
d60 1
a60 1
//; $tls::stackptr = -9456;
d62 1
a62 1
//; $tls::stack = -9452;
d64 1
a64 1
//; $tls::initialized = -8428;
d68 1
a68 1
#define tls_func (-12636)
d70 1
a70 1
#define tls_el (-12632)
d72 1
a72 1
#define tls_saved_errno (-12624)
d74 1
a74 1
#define tls_sa_flags (-12620)
d76 1
a76 1
#define tls_oldmask (-12616)
d78 1
a78 1
#define tls_deltamask (-12612)
d80 1
a80 1
#define tls_event (-12608)
d82 1
a82 1
#define tls_errno_addr (-12604)
d84 1
a84 1
#define tls_sigmask (-12600)
d86 1
a86 1
#define tls_sigwait_mask (-12596)
d88 1
a88 1
#define tls_sigwait_info (-12592)
d90 1
a90 1
#define tls_thread_context (-12588)
d92 1
a92 1
#define tls_thread_id (-12376)
d94 1
a94 1
#define tls_threadkill (-12372)
d96 1
a96 1
#define tls_infodata (-12368)
d98 1
a98 1
#define tls_tid (-12220)
d100 1
a100 1
#define tls_local_clib (-12216)
d102 1
a102 1
#define tls___dontuse (-12216)
d104 1
a104 1
#define tls_locals (-11152)
d106 1
a106 1
#define tls__ctinfo (-9520)
d108 1
a108 1
#define tls_andreas (-9516)
d110 1
a110 1
#define tls_wq (-9508)
d112 1
a112 1
#define tls_prev (-9480)
d114 1
a114 1
#define tls_next (-9476)
d116 1
a116 1
#define tls_sig (-9472)
d118 1
a118 1
#define tls_incyg (-9468)
d120 1
a120 1
#define tls_spinning (-9464)
d122 1
a122 1
#define tls_stacklock (-9460)
d124 1
a124 1
#define tls_stackptr (-9456)
d126 1
a126 1
#define tls_stack (-9452)
d128 1
a128 1
#define tls_initialized (-8428)
@


1.30
log
@* sigproc.cc (no_signals_available): Detect hwait_sig == INVALID_HANDLE_VALUE.
(wait_sig): Set hwait_sig to INVALID_HANDLE_VALUE on __SIGEXIT.
* cygtls.cc (_cygtls::init_thread): Zero entire _my_tls structure and no more.
* cygtls.h (_my_tls::padding): Delete.
(CYGTLS_PADSIZE): Redefine concept of padding to mean padding at the end of the
stack.
* dcrt0.cc (initialize_main_tls): Change return to void.
* gentls_offsets: Treat const specially, too.  Keep going after a '}' is found.
Change negative offset calculation to use CYGTLS_PADSIZE.
* init.cc (_my_oldfunc): New variable.
(threadfunc_fe): Use stored tls value for oldfunc rather than blindly writing
to the stack.
(munge_threadfunc): Set oldfunc in tls.
(dll_entry): Initialize tls allocation.
* tlsoffsets.h: Regenerate.
@
text
@d6 38
a43 38
//; $tls::saved_errno = -12632;
//; $tls::psaved_errno = 4;
//; $tls::sa_flags = -12628;
//; $tls::psa_flags = 8;
//; $tls::oldmask = -12624;
//; $tls::poldmask = 12;
//; $tls::deltamask = -12620;
//; $tls::pdeltamask = 16;
//; $tls::event = -12616;
//; $tls::pevent = 20;
//; $tls::errno_addr = -12612;
//; $tls::perrno_addr = 24;
//; $tls::sigmask = -12608;
//; $tls::psigmask = 28;
//; $tls::sigwait_mask = -12604;
//; $tls::psigwait_mask = 32;
//; $tls::sigwait_info = -12600;
//; $tls::psigwait_info = 36;
//; $tls::thread_context = -12596;
//; $tls::pthread_context = 40;
//; $tls::thread_id = -12384;
//; $tls::pthread_id = 252;
//; $tls::threadkill = -12380;
//; $tls::pthreadkill = 256;
//; $tls::infodata = -12376;
//; $tls::pinfodata = 260;
//; $tls::tid = -12228;
//; $tls::ptid = 408;
//; $tls::local_clib = -12224;
//; $tls::plocal_clib = 412;
//; $tls::__dontuse = -12224;
//; $tls::p__dontuse = 412;
//; $tls::locals = -11160;
//; $tls::plocals = 1476;
//; $tls::_ctinfo = -9528;
//; $tls::p_ctinfo = 3108;
//; $tls::el = -9524;
//; $tls::pel = 3112;
d70 38
a107 38
#define tls_saved_errno (-12632)
#define tls_psaved_errno (4)
#define tls_sa_flags (-12628)
#define tls_psa_flags (8)
#define tls_oldmask (-12624)
#define tls_poldmask (12)
#define tls_deltamask (-12620)
#define tls_pdeltamask (16)
#define tls_event (-12616)
#define tls_pevent (20)
#define tls_errno_addr (-12612)
#define tls_perrno_addr (24)
#define tls_sigmask (-12608)
#define tls_psigmask (28)
#define tls_sigwait_mask (-12604)
#define tls_psigwait_mask (32)
#define tls_sigwait_info (-12600)
#define tls_psigwait_info (36)
#define tls_thread_context (-12596)
#define tls_pthread_context (40)
#define tls_thread_id (-12384)
#define tls_pthread_id (252)
#define tls_threadkill (-12380)
#define tls_pthreadkill (256)
#define tls_infodata (-12376)
#define tls_pinfodata (260)
#define tls_tid (-12228)
#define tls_ptid (408)
#define tls_local_clib (-12224)
#define tls_plocal_clib (412)
#define tls___dontuse (-12224)
#define tls_p__dontuse (412)
#define tls_locals (-11160)
#define tls_plocals (1476)
#define tls__ctinfo (-9528)
#define tls_p_ctinfo (3108)
#define tls_el (-9524)
#define tls_pel (3112)
@


1.29
log
@* cygtls.cc (_cygtls::remove): Reset initialized flag right away if we were
previously initialized.
* cygtls.h (_cygtls::initialized): Move nearer the end to catch situation when
Windows 98 mysteriously changes pieces of cygtls when thread is detaching.
* gendef (__sigfe_maybe): Simplify slightly.
* tlsoffsets.h: Regenerate.
@
text
@d4 1
a4 1
//; $tls::func = -4212;
d6 1
a6 1
//; $tls::saved_errno = -4208;
d8 1
a8 1
//; $tls::sa_flags = -4204;
d10 1
a10 1
//; $tls::oldmask = -4200;
d12 1
a12 1
//; $tls::deltamask = -4196;
d14 1
a14 1
//; $tls::event = -4192;
d16 1
a16 1
//; $tls::errno_addr = -4188;
d18 1
a18 1
//; $tls::sigmask = -4184;
d20 1
a20 1
//; $tls::sigwait_mask = -4180;
d22 1
a22 1
//; $tls::sigwait_info = -4176;
d24 1
a24 1
//; $tls::thread_context = -4172;
d26 1
a26 1
//; $tls::thread_id = -3960;
d28 1
a28 1
//; $tls::threadkill = -3956;
d30 1
a30 1
//; $tls::infodata = -3952;
d32 1
a32 1
//; $tls::tid = -3804;
d34 1
a34 1
//; $tls::local_clib = -3800;
d36 1
a36 1
//; $tls::__dontuse = -3800;
d38 1
a38 1
//; $tls::locals = -2736;
d40 1
a40 1
//; $tls::_ctinfo = -1104;
d42 1
a42 1
//; $tls::el = -1100;
d44 1
a44 1
//; $tls::andreas = -1092;
d46 1
a46 1
//; $tls::wq = -1084;
d48 1
a48 1
//; $tls::prev = -1056;
d50 1
a50 1
//; $tls::next = -1052;
d52 1
a52 1
//; $tls::sig = -1048;
d54 1
a54 1
//; $tls::incyg = -1044;
d56 1
a56 1
//; $tls::spinning = -1040;
d58 1
a58 1
//; $tls::stacklock = -1036;
d60 1
a60 1
//; $tls::stackptr = -1032;
d62 1
a62 1
//; $tls::stack = -1028;
d64 1
a64 1
//; $tls::initialized = -4;
a65 2
//; $tls::padding = 0;
//; $tls::ppadding = 4212;
d68 1
a68 1
#define tls_func (-4212)
d70 1
a70 1
#define tls_saved_errno (-4208)
d72 1
a72 1
#define tls_sa_flags (-4204)
d74 1
a74 1
#define tls_oldmask (-4200)
d76 1
a76 1
#define tls_deltamask (-4196)
d78 1
a78 1
#define tls_event (-4192)
d80 1
a80 1
#define tls_errno_addr (-4188)
d82 1
a82 1
#define tls_sigmask (-4184)
d84 1
a84 1
#define tls_sigwait_mask (-4180)
d86 1
a86 1
#define tls_sigwait_info (-4176)
d88 1
a88 1
#define tls_thread_context (-4172)
d90 1
a90 1
#define tls_thread_id (-3960)
d92 1
a92 1
#define tls_threadkill (-3956)
d94 1
a94 1
#define tls_infodata (-3952)
d96 1
a96 1
#define tls_tid (-3804)
d98 1
a98 1
#define tls_local_clib (-3800)
d100 1
a100 1
#define tls___dontuse (-3800)
d102 1
a102 1
#define tls_locals (-2736)
d104 1
a104 1
#define tls__ctinfo (-1104)
d106 1
a106 1
#define tls_el (-1100)
d108 1
a108 1
#define tls_andreas (-1092)
d110 1
a110 1
#define tls_wq (-1084)
d112 1
a112 1
#define tls_prev (-1056)
d114 1
a114 1
#define tls_next (-1052)
d116 1
a116 1
#define tls_sig (-1048)
d118 1
a118 1
#define tls_incyg (-1044)
d120 1
a120 1
#define tls_spinning (-1040)
d122 1
a122 1
#define tls_stacklock (-1036)
d124 1
a124 1
#define tls_stackptr (-1032)
d126 1
a126 1
#define tls_stack (-1028)
d128 1
a128 1
#define tls_initialized (-4)
a129 2
#define tls_padding (0)
#define tls_ppadding (4212)
@


1.28
log
@Always zero all elements of siginfo_t throughout.
* cygtls.h (_cygtls::thread_context): Declare new field.
(_cygtls::thread_id): Ditto.
(_cygtls::signal_exit): Move into this class.
(_cygtls::copy_context): Declare new function.
(_cygtls::signal_debugger): Ditto.
* cygtls.cc (_cygtls::init_thread): Fill out thread id field.
* exceptions.cc (exception): Change message when exception info is unknown.
Copy context to thread local storage.
(_cygtls::handle_exceptions): Avoid double test for fault_guarded.  Reflect
move of signal_exit to _cygtls class.
(sigpacket::process): Copy context to thread local storage.
(_cygtls::signal_exit): Move to _cygtls class.  Call signal_debugger to notify
debugger of exiting signal (WIP).  Call stackdump here (WIP).
(_cygtls::copy_context): Define new function.
(_cygtls::signal_debugger): Ditto.
* tlsoffsets.h: Regenerate.
* include/cygwin.h (_fpstate): New internal structure.
(ucontext): Declare new structure (WIP).
(__COPY_CONTEXT_SIZE): New define.
* exceptions.cc (_cygtls::interrupt_setup): Clear "threadkill" field when there
is no sigwaiting thread.
(setup_handler): Move event handling into interrupt_setup.
@
text
@d18 48
a65 48
//; $tls::initialized = -4184;
//; $tls::pinitialized = 28;
//; $tls::sigmask = -4180;
//; $tls::psigmask = 32;
//; $tls::sigwait_mask = -4176;
//; $tls::psigwait_mask = 36;
//; $tls::sigwait_info = -4172;
//; $tls::psigwait_info = 40;
//; $tls::thread_context = -4168;
//; $tls::pthread_context = 44;
//; $tls::thread_id = -3956;
//; $tls::pthread_id = 256;
//; $tls::threadkill = -3952;
//; $tls::pthreadkill = 260;
//; $tls::infodata = -3948;
//; $tls::pinfodata = 264;
//; $tls::tid = -3800;
//; $tls::ptid = 412;
//; $tls::local_clib = -3796;
//; $tls::plocal_clib = 416;
//; $tls::__dontuse = -3796;
//; $tls::p__dontuse = 416;
//; $tls::locals = -2732;
//; $tls::plocals = 1480;
//; $tls::_ctinfo = -1100;
//; $tls::p_ctinfo = 3112;
//; $tls::el = -1096;
//; $tls::pel = 3116;
//; $tls::andreas = -1088;
//; $tls::pandreas = 3124;
//; $tls::wq = -1080;
//; $tls::pwq = 3132;
//; $tls::prev = -1052;
//; $tls::pprev = 3160;
//; $tls::next = -1048;
//; $tls::pnext = 3164;
//; $tls::sig = -1044;
//; $tls::psig = 3168;
//; $tls::incyg = -1040;
//; $tls::pincyg = 3172;
//; $tls::spinning = -1036;
//; $tls::pspinning = 3176;
//; $tls::stacklock = -1032;
//; $tls::pstacklock = 3180;
//; $tls::stackptr = -1028;
//; $tls::pstackptr = 3184;
//; $tls::stack = -1024;
//; $tls::pstack = 3188;
d84 48
a131 48
#define tls_initialized (-4184)
#define tls_pinitialized (28)
#define tls_sigmask (-4180)
#define tls_psigmask (32)
#define tls_sigwait_mask (-4176)
#define tls_psigwait_mask (36)
#define tls_sigwait_info (-4172)
#define tls_psigwait_info (40)
#define tls_thread_context (-4168)
#define tls_pthread_context (44)
#define tls_thread_id (-3956)
#define tls_pthread_id (256)
#define tls_threadkill (-3952)
#define tls_pthreadkill (260)
#define tls_infodata (-3948)
#define tls_pinfodata (264)
#define tls_tid (-3800)
#define tls_ptid (412)
#define tls_local_clib (-3796)
#define tls_plocal_clib (416)
#define tls___dontuse (-3796)
#define tls_p__dontuse (416)
#define tls_locals (-2732)
#define tls_plocals (1480)
#define tls__ctinfo (-1100)
#define tls_p_ctinfo (3112)
#define tls_el (-1096)
#define tls_pel (3116)
#define tls_andreas (-1088)
#define tls_pandreas (3124)
#define tls_wq (-1080)
#define tls_pwq (3132)
#define tls_prev (-1052)
#define tls_pprev (3160)
#define tls_next (-1048)
#define tls_pnext (3164)
#define tls_sig (-1044)
#define tls_psig (3168)
#define tls_incyg (-1040)
#define tls_pincyg (3172)
#define tls_spinning (-1036)
#define tls_pspinning (3176)
#define tls_stacklock (-1032)
#define tls_pstacklock (3180)
#define tls_stackptr (-1028)
#define tls_pstackptr (3184)
#define tls_stack (-1024)
#define tls_pstack (3188)
@


1.27
log
@* cygtls.cc (_cygtls::handle_threadlist_exception): Make an error fatal.
* cygtls.h (sockaddr_in): Use header rather than defining our own structure.
* exceptions.cc (_cygtls::interrupt_setup): Use exact contents of sa_mask
rather than assuming tht current sig should be masked, too.
(_cygtls::call_signal_handler): Use more aggressive locking.
* gendef (_sigbe): Wait until later before releasing incyg.
(_sigreturn): Remove more arguments to accommodate quasi-sa_sigaction support.
(_sigdelayed): Push arguments for sa_sigaction.  More work needed here.
* signal.cc (sigaction): Implement SA_NODEFER.
* tlsoffsets.h: Regenerate.

* sigproc.cc (wait_sig): Use default buffer size of Windows 9x complains.
* pinfo.cc (_onreturn::dummy_handle): Remove.
(_onreturn::h): Make this a pointer.
(_onreturn::~_onreturn): Detect whether pointer is NULL rather than value is
NULL.
(_onreturn::_onreturn): Set h to NULL initially.
(_onreturn::no_close_p_handle): Set h to NULL.
(winpids::add): Initialize onreturn with value from p.hProcess immediately.
@
text
@d3 2
a4 2
//; $tls::sizeof__cygtls = 3996;
//; $tls::func = -3996;
d6 1
a6 1
//; $tls::saved_errno = -3992;
d8 1
a8 1
//; $tls::sa_flags = -3988;
d10 1
a10 1
//; $tls::oldmask = -3984;
d12 1
a12 1
//; $tls::deltamask = -3980;
d14 1
a14 1
//; $tls::event = -3976;
d16 1
a16 1
//; $tls::errno_addr = -3972;
d18 1
a18 1
//; $tls::initialized = -3968;
d20 1
a20 1
//; $tls::sigmask = -3964;
d22 1
a22 1
//; $tls::sigwait_mask = -3960;
d24 1
a24 1
//; $tls::sigwait_info = -3956;
d26 4
d31 1
a31 1
//; $tls::pthreadkill = 44;
d33 1
a33 1
//; $tls::pinfodata = 48;
d35 1
a35 1
//; $tls::ptid = 196;
d37 1
a37 1
//; $tls::plocal_clib = 200;
d39 1
a39 1
//; $tls::p__dontuse = 200;
d41 1
a41 1
//; $tls::plocals = 1264;
d43 1
a43 1
//; $tls::p_ctinfo = 2896;
d45 1
a45 1
//; $tls::pel = 2900;
d47 1
a47 1
//; $tls::pandreas = 2908;
d49 1
a49 1
//; $tls::pwq = 2916;
d51 1
a51 1
//; $tls::pprev = 2944;
d53 1
a53 1
//; $tls::pnext = 2948;
d55 1
a55 1
//; $tls::psig = 2952;
d57 1
a57 1
//; $tls::pincyg = 2956;
d59 1
a59 1
//; $tls::pspinning = 2960;
d61 1
a61 1
//; $tls::pstacklock = 2964;
d63 1
a63 1
//; $tls::pstackptr = 2968;
d65 1
a65 1
//; $tls::pstack = 2972;
d67 1
a67 1
//; $tls::ppadding = 3996;
d70 1
a70 1
#define tls_func (-3996)
d72 1
a72 1
#define tls_saved_errno (-3992)
d74 1
a74 1
#define tls_sa_flags (-3988)
d76 1
a76 1
#define tls_oldmask (-3984)
d78 1
a78 1
#define tls_deltamask (-3980)
d80 1
a80 1
#define tls_event (-3976)
d82 1
a82 1
#define tls_errno_addr (-3972)
d84 1
a84 1
#define tls_initialized (-3968)
d86 1
a86 1
#define tls_sigmask (-3964)
d88 1
a88 1
#define tls_sigwait_mask (-3960)
d90 1
a90 1
#define tls_sigwait_info (-3956)
d92 4
d97 1
a97 1
#define tls_pthreadkill (44)
d99 1
a99 1
#define tls_pinfodata (48)
d101 1
a101 1
#define tls_ptid (196)
d103 1
a103 1
#define tls_plocal_clib (200)
d105 1
a105 1
#define tls_p__dontuse (200)
d107 1
a107 1
#define tls_plocals (1264)
d109 1
a109 1
#define tls_p_ctinfo (2896)
d111 1
a111 1
#define tls_pel (2900)
d113 1
a113 1
#define tls_pandreas (2908)
d115 1
a115 1
#define tls_pwq (2916)
d117 1
a117 1
#define tls_pprev (2944)
d119 1
a119 1
#define tls_pnext (2948)
d121 1
a121 1
#define tls_psig (2952)
d123 1
a123 1
#define tls_pincyg (2956)
d125 1
a125 1
#define tls_pspinning (2960)
d127 1
a127 1
#define tls_pstacklock (2964)
d129 1
a129 1
#define tls_pstackptr (2968)
d131 1
a131 1
#define tls_pstack (2972)
d133 1
a133 1
#define tls_ppadding (3996)
@


1.26
log
@* include/exceptions.h (exception_list): Revert previous change.  Windows
doesn't care.
(exception_handler): Use real exception_list parameter type rather than void *
* tlsoffsets.h: Regenerate.
* cygtls.h (_cygtls::handle_exceptions): Use real exception_list parameter type
rather than void *.
(handle_threadlist_exception): Ditto.
(init_exception_handler): Ditto.
* cygtls.cc (_cygtls::handle_threadlist_exception ): Ditto.
(_cygtls::init_exception_handler): Add kludge to terminate linked list with a
loop, which seems to solve problem of RtlUnwind causing problems
* exceptions.cc (rtl_unwind): Use real exception_list parameter type rather
than void *.
(_cygtls::handle_exceptions): Ditto.
@
text
@d50 10
a59 10
//; $tls::stackptr = -1044;
//; $tls::pstackptr = 2952;
//; $tls::sig = -1040;
//; $tls::psig = 2956;
//; $tls::incyg = -1036;
//; $tls::pincyg = 2960;
//; $tls::spinning = -1032;
//; $tls::pspinning = 2964;
//; $tls::stacklock = -1028;
//; $tls::pstacklock = 2968;
d112 10
a121 10
#define tls_stackptr (-1044)
#define tls_pstackptr (2952)
#define tls_sig (-1040)
#define tls_psig (2956)
#define tls_incyg (-1036)
#define tls_pincyg (2960)
#define tls_spinning (-1032)
#define tls_pspinning (2964)
#define tls_stacklock (-1028)
#define tls_pstacklock (2968)
@


1.25
log
@* cygtls.h (_cygtls::el): New field.
(_cygtls::handle_exceptions): New function declaration.
(_cygtls::handle_threadlist_exception): Ditto.
(_cygtls::init_exception_handler): Ditto.
(_cygtls::init_threadlist_exceptions): Remove arg from declaration.
* cygtls.cc (_cygtls::call2): Don't initialize exceptions here.
(_cygtls::init_thread): Do it here instead and use member function.
(_cygtls::handle_threadlist_exception): Move into _cygtls class.
(_cygtls::init_exception_handler): Ditto.  Rely on existence of 'el' memmber in
_cygtls.
(_cygtls::init_threadlist_exceptions): Ditto.
* dcrt0.cc (dll_crt0_1): Remove exception_list definition and setting since it
now commonly resides in the tls.
* exceptions.cc (init_exception_handler): Move to cygtls.cc.
(init_exceptions): Ditto.
(rtl_unwind): New, safe wrapper function for RtlUnwind.
(_cygtls::handle_exceptions): Move to _cygtls.  Call rtl_unwind to unwind
frames and eliminate copying of structures.  Put address of failing instruction
in si_addr, not the address on the stack.  Return 0 to indicate that we've
handled this exception.
* external.cc (cygwin_internal): Make CW_INIT_EXCEPTIONS a no-op.
* sigproc.cc (wait_sig): Accommodate argument change to
_cygtls::init_threadlist_exceptions.
* tlsoffsets.h: Regenerate.
* include/exceptions.h (exception_list): Add more stuff to the exception list.
Apparently windows needs this?
(init_exceptions): Remove bogus declaration.
* include/cygwin/signal.h (SI_USER): Redefine as zero as per SUSv3.
* thread.cc (pthread_kill): Set si_pid and si_uid.
* timer.cc (timer_thread): Set si_code to SI_TIMER.
@
text
@d3 2
a4 2
//; $tls::sizeof__cygtls = 4028;
//; $tls::func = -4028;
d6 1
a6 1
//; $tls::saved_errno = -4024;
d8 1
a8 1
//; $tls::sa_flags = -4020;
d10 1
a10 1
//; $tls::oldmask = -4016;
d12 1
a12 1
//; $tls::deltamask = -4012;
d14 1
a14 1
//; $tls::event = -4008;
d16 1
a16 1
//; $tls::errno_addr = -4004;
d18 1
a18 1
//; $tls::initialized = -4000;
d20 1
a20 1
//; $tls::sigmask = -3996;
d22 1
a22 1
//; $tls::sigwait_mask = -3992;
d24 1
a24 1
//; $tls::sigwait_info = -3988;
d26 1
a26 1
//; $tls::threadkill = -3984;
d28 1
a28 1
//; $tls::infodata = -3980;
d30 1
a30 1
//; $tls::tid = -3832;
d32 1
a32 1
//; $tls::local_clib = -3828;
d34 1
a34 1
//; $tls::__dontuse = -3828;
d36 1
a36 1
//; $tls::locals = -2764;
d38 1
a38 1
//; $tls::_ctinfo = -1132;
d40 1
a40 1
//; $tls::el = -1128;
d43 1
a43 1
//; $tls::pandreas = 2940;
d45 1
a45 1
//; $tls::pwq = 2948;
d47 1
a47 1
//; $tls::pprev = 2976;
d49 1
a49 1
//; $tls::pnext = 2980;
d51 1
a51 1
//; $tls::pstackptr = 2984;
d53 1
a53 1
//; $tls::psig = 2988;
d55 1
a55 1
//; $tls::pincyg = 2992;
d57 1
a57 1
//; $tls::pspinning = 2996;
d59 1
a59 1
//; $tls::pstacklock = 3000;
d61 1
a61 1
//; $tls::pstack = 3004;
d63 1
a63 1
//; $tls::ppadding = 4028;
d66 1
a66 1
#define tls_func (-4028)
d68 1
a68 1
#define tls_saved_errno (-4024)
d70 1
a70 1
#define tls_sa_flags (-4020)
d72 1
a72 1
#define tls_oldmask (-4016)
d74 1
a74 1
#define tls_deltamask (-4012)
d76 1
a76 1
#define tls_event (-4008)
d78 1
a78 1
#define tls_errno_addr (-4004)
d80 1
a80 1
#define tls_initialized (-4000)
d82 1
a82 1
#define tls_sigmask (-3996)
d84 1
a84 1
#define tls_sigwait_mask (-3992)
d86 1
a86 1
#define tls_sigwait_info (-3988)
d88 1
a88 1
#define tls_threadkill (-3984)
d90 1
a90 1
#define tls_infodata (-3980)
d92 1
a92 1
#define tls_tid (-3832)
d94 1
a94 1
#define tls_local_clib (-3828)
d96 1
a96 1
#define tls___dontuse (-3828)
d98 1
a98 1
#define tls_locals (-2764)
d100 1
a100 1
#define tls__ctinfo (-1132)
d102 1
a102 1
#define tls_el (-1128)
d105 1
a105 1
#define tls_pandreas (2940)
d107 1
a107 1
#define tls_pwq (2948)
d109 1
a109 1
#define tls_pprev (2976)
d111 1
a111 1
#define tls_pnext (2980)
d113 1
a113 1
#define tls_pstackptr (2984)
d115 1
a115 1
#define tls_psig (2988)
d117 1
a117 1
#define tls_pincyg (2992)
d119 1
a119 1
#define tls_pspinning (2996)
d121 1
a121 1
#define tls_pstacklock (3000)
d123 1
a123 1
#define tls_pstack (3004)
d125 1
a125 1
#define tls_ppadding (4028)
@


1.24
log
@* tlsoffsets.h: Regenerate.
@
text
@d3 2
a4 2
//; $tls::sizeof__cygtls = 3988;
//; $tls::func = -3988;
d6 1
a6 1
//; $tls::saved_errno = -3984;
d8 1
a8 1
//; $tls::sa_flags = -3980;
d10 1
a10 1
//; $tls::oldmask = -3976;
d12 1
a12 1
//; $tls::deltamask = -3972;
d14 1
a14 1
//; $tls::event = -3968;
d16 1
a16 1
//; $tls::errno_addr = -3964;
d18 1
a18 1
//; $tls::initialized = -3960;
d20 1
a20 1
//; $tls::sigmask = -3956;
d22 1
a22 1
//; $tls::sigwait_mask = -3952;
d24 1
a24 1
//; $tls::sigwait_info = -3948;
d26 1
a26 1
//; $tls::threadkill = -3944;
d28 1
a28 1
//; $tls::infodata = -3940;
d30 1
a30 1
//; $tls::tid = -3792;
d32 1
a32 1
//; $tls::local_clib = -3788;
d34 1
a34 1
//; $tls::__dontuse = -3788;
d36 1
a36 1
//; $tls::locals = -2724;
d38 1
a38 1
//; $tls::_ctinfo = -1092;
d40 2
d43 1
a43 1
//; $tls::pandreas = 2900;
d45 1
a45 1
//; $tls::pwq = 2908;
d47 1
a47 1
//; $tls::pprev = 2936;
d49 1
a49 1
//; $tls::pnext = 2940;
d51 1
a51 1
//; $tls::pstackptr = 2944;
d53 1
a53 1
//; $tls::psig = 2948;
d55 1
a55 1
//; $tls::pincyg = 2952;
d57 1
a57 1
//; $tls::pspinning = 2956;
d59 1
a59 1
//; $tls::pstacklock = 2960;
d61 1
a61 1
//; $tls::pstack = 2964;
d63 1
a63 1
//; $tls::ppadding = 3988;
d66 1
a66 1
#define tls_func (-3988)
d68 1
a68 1
#define tls_saved_errno (-3984)
d70 1
a70 1
#define tls_sa_flags (-3980)
d72 1
a72 1
#define tls_oldmask (-3976)
d74 1
a74 1
#define tls_deltamask (-3972)
d76 1
a76 1
#define tls_event (-3968)
d78 1
a78 1
#define tls_errno_addr (-3964)
d80 1
a80 1
#define tls_initialized (-3960)
d82 1
a82 1
#define tls_sigmask (-3956)
d84 1
a84 1
#define tls_sigwait_mask (-3952)
d86 1
a86 1
#define tls_sigwait_info (-3948)
d88 1
a88 1
#define tls_threadkill (-3944)
d90 1
a90 1
#define tls_infodata (-3940)
d92 1
a92 1
#define tls_tid (-3792)
d94 1
a94 1
#define tls_local_clib (-3788)
d96 1
a96 1
#define tls___dontuse (-3788)
d98 1
a98 1
#define tls_locals (-2724)
d100 1
a100 1
#define tls__ctinfo (-1092)
d102 2
d105 1
a105 1
#define tls_pandreas (2900)
d107 1
a107 1
#define tls_pwq (2908)
d109 1
a109 1
#define tls_pprev (2936)
d111 1
a111 1
#define tls_pnext (2940)
d113 1
a113 1
#define tls_pstackptr (2944)
d115 1
a115 1
#define tls_psig (2948)
d117 1
a117 1
#define tls_pincyg (2952)
d119 1
a119 1
#define tls_pspinning (2956)
d121 1
a121 1
#define tls_pstacklock (2960)
d123 1
a123 1
#define tls_pstack (2964)
d125 1
a125 1
#define tls_ppadding (3988)
@


1.23
log
@* tlsoffsets.h: Regenerate.
@
text
@d3 2
a4 2
//; $tls::sizeof__cygtls = 3992;
//; $tls::func = -3992;
d6 1
a6 1
//; $tls::saved_errno = -3988;
d8 1
a8 1
//; $tls::sa_flags = -3984;
d10 1
a10 1
//; $tls::oldmask = -3980;
d12 1
a12 1
//; $tls::deltamask = -3976;
d14 1
a14 1
//; $tls::event = -3972;
d16 1
a16 1
//; $tls::errno_addr = -3968;
d18 1
a18 1
//; $tls::initialized = -3964;
d20 1
a20 1
//; $tls::sigmask = -3960;
d22 1
a22 1
//; $tls::sigwait_mask = -3956;
d24 1
a24 1
//; $tls::sigwait_info = -3952;
d26 1
a26 1
//; $tls::threadkill = -3948;
d28 1
a28 1
//; $tls::infodata = -3944;
d30 1
a30 1
//; $tls::tid = -3796;
d32 1
a32 1
//; $tls::local_clib = -3792;
d34 1
a34 1
//; $tls::__dontuse = -3792;
d36 1
a36 1
//; $tls::locals = -2728;
d38 1
a38 1
//; $tls::_ctinfo = -1096;
d40 1
a40 1
//; $tls::andreas = -1092;
d42 1
a42 1
//; $tls::wq = -1084;
a43 2
//; $tls::thread_handle = -1056;
//; $tls::pthread_handle = 2936;
d45 1
a45 1
//; $tls::pprev = 2940;
d47 1
a47 1
//; $tls::pnext = 2944;
d49 1
a49 1
//; $tls::pstackptr = 2948;
d51 1
a51 1
//; $tls::psig = 2952;
d53 1
a53 1
//; $tls::pincyg = 2956;
d55 1
a55 1
//; $tls::pspinning = 2960;
d57 1
a57 1
//; $tls::pstacklock = 2964;
d59 1
a59 1
//; $tls::pstack = 2968;
d61 1
a61 1
//; $tls::ppadding = 3992;
d64 1
a64 1
#define tls_func (-3992)
d66 1
a66 1
#define tls_saved_errno (-3988)
d68 1
a68 1
#define tls_sa_flags (-3984)
d70 1
a70 1
#define tls_oldmask (-3980)
d72 1
a72 1
#define tls_deltamask (-3976)
d74 1
a74 1
#define tls_event (-3972)
d76 1
a76 1
#define tls_errno_addr (-3968)
d78 1
a78 1
#define tls_initialized (-3964)
d80 1
a80 1
#define tls_sigmask (-3960)
d82 1
a82 1
#define tls_sigwait_mask (-3956)
d84 1
a84 1
#define tls_sigwait_info (-3952)
d86 1
a86 1
#define tls_threadkill (-3948)
d88 1
a88 1
#define tls_infodata (-3944)
d90 1
a90 1
#define tls_tid (-3796)
d92 1
a92 1
#define tls_local_clib (-3792)
d94 1
a94 1
#define tls___dontuse (-3792)
d96 1
a96 1
#define tls_locals (-2728)
d98 1
a98 1
#define tls__ctinfo (-1096)
d100 1
a100 1
#define tls_andreas (-1092)
d102 1
a102 1
#define tls_wq (-1084)
a103 2
#define tls_thread_handle (-1056)
#define tls_pthread_handle (2936)
d105 1
a105 1
#define tls_pprev (2940)
d107 1
a107 1
#define tls_pnext (2944)
d109 1
a109 1
#define tls_pstackptr (2948)
d111 1
a111 1
#define tls_psig (2952)
d113 1
a113 1
#define tls_pincyg (2956)
d115 1
a115 1
#define tls_pspinning (2960)
d117 1
a117 1
#define tls_pstacklock (2964)
d119 1
a119 1
#define tls_pstack (2968)
d121 1
a121 1
#define tls_ppadding (3992)
@


1.22
log
@* cygtls.h (san): New structure.
(cygtls::andreas): New element.  Replaces _myfault and _myfault_errno.
(cygtls::fault_guarded): Use andreas.
(cygtls::return_from_fault): Ditto.
(cygtls::setup_fault): Add a parameter denoting where to store old fault
handler, if any and use it to "stack" faults.
(cygtls::reset_fault): Restore fault from parameter.
(myfault::sebastian): New variable.
(myfault::~myfault): Pass sebastian to reset_fault.
(myfault::myfault): Store old fault values in sebastian.
@
text
@d3 2
a4 2
//; $tls::sizeof__cygtls = 3988;
//; $tls::func = -3988;
d6 1
a6 1
//; $tls::saved_errno = -3984;
d8 1
a8 1
//; $tls::sa_flags = -3980;
d10 1
a10 1
//; $tls::oldmask = -3976;
d12 1
a12 1
//; $tls::deltamask = -3972;
d14 1
a14 1
//; $tls::event = -3968;
d16 1
a16 1
//; $tls::errno_addr = -3964;
d18 1
a18 1
//; $tls::initialized = -3960;
d20 1
a20 1
//; $tls::sigmask = -3956;
d22 1
a22 1
//; $tls::sigwait_mask = -3952;
d24 1
a24 1
//; $tls::sigwait_info = -3948;
d26 1
a26 1
//; $tls::threadkill = -3944;
d28 1
a28 1
//; $tls::infodata = -3940;
d30 1
a30 1
//; $tls::tid = -3792;
d32 1
a32 1
//; $tls::local_clib = -3788;
d34 1
a34 1
//; $tls::__dontuse = -3788;
d36 1
a36 1
//; $tls::locals = -2724;
d38 1
a38 1
//; $tls::_ctinfo = -1092;
d40 1
a40 1
//; $tls::andreas = -1088;
d42 1
a42 1
//; $tls::wq = -1080;
d44 2
d47 1
a47 1
//; $tls::pprev = 2936;
d49 1
a49 1
//; $tls::pnext = 2940;
d51 1
a51 1
//; $tls::pstackptr = 2944;
d53 1
a53 1
//; $tls::psig = 2948;
d55 1
a55 1
//; $tls::pincyg = 2952;
d57 1
a57 1
//; $tls::pspinning = 2956;
d59 1
a59 1
//; $tls::pstacklock = 2960;
d61 1
a61 1
//; $tls::pstack = 2964;
d63 1
a63 1
//; $tls::ppadding = 3988;
d66 1
a66 1
#define tls_func (-3988)
d68 1
a68 1
#define tls_saved_errno (-3984)
d70 1
a70 1
#define tls_sa_flags (-3980)
d72 1
a72 1
#define tls_oldmask (-3976)
d74 1
a74 1
#define tls_deltamask (-3972)
d76 1
a76 1
#define tls_event (-3968)
d78 1
a78 1
#define tls_errno_addr (-3964)
d80 1
a80 1
#define tls_initialized (-3960)
d82 1
a82 1
#define tls_sigmask (-3956)
d84 1
a84 1
#define tls_sigwait_mask (-3952)
d86 1
a86 1
#define tls_sigwait_info (-3948)
d88 1
a88 1
#define tls_threadkill (-3944)
d90 1
a90 1
#define tls_infodata (-3940)
d92 1
a92 1
#define tls_tid (-3792)
d94 1
a94 1
#define tls_local_clib (-3788)
d96 1
a96 1
#define tls___dontuse (-3788)
d98 1
a98 1
#define tls_locals (-2724)
d100 1
a100 1
#define tls__ctinfo (-1092)
d102 1
a102 1
#define tls_andreas (-1088)
d104 1
a104 1
#define tls_wq (-1080)
d106 2
d109 1
a109 1
#define tls_pprev (2936)
d111 1
a111 1
#define tls_pnext (2940)
d113 1
a113 1
#define tls_pstackptr (2944)
d115 1
a115 1
#define tls_psig (2948)
d117 1
a117 1
#define tls_pincyg (2952)
d119 1
a119 1
#define tls_pspinning (2956)
d121 1
a121 1
#define tls_pstacklock (2960)
d123 1
a123 1
#define tls_pstack (2964)
d125 1
a125 1
#define tls_ppadding (3988)
@


1.21
log
@* cygwin.din: Correct readdir_r typo.
@
text
@d40 2
a41 4
//; $tls::_myfault = -1088;
//; $tls::p_myfault = 2900;
//; $tls::_myfault_errno = -1084;
//; $tls::p_myfault_errno = 2904;
d100 2
a101 4
#define tls__myfault (-1088)
#define tls_p_myfault (2900)
#define tls__myfault_errno (-1084)
#define tls_p_myfault_errno (2904)
@


1.20
log
@Replace valid memory checks with new myfault class "exception handling", almost
everywhere.  Leave some thread.cc stuff alone for now.
* cygtls.h: Kludge some definitions to avoid including a problematic windows
header.
(_cygtls::_myfault): New entry.
(_cygtls::_myfault_errno): Ditto.
(_cygtls::fault_guarded): New function.
(_cygtls::setup_fault): Ditto.
(_cygtls::return_from_fault): Ditto.
(_cygtls::clear_fault): Ditto.
(myfault): New class.
* exceptions.cc (handle_exceptions): Handle case of guarded fault in system
routine.
* gendef: Add another entry point for setjmp that the compiler doesn't know
about and won't complain about.
* gentls_offsets: Just include windows.h rather than kludging a HANDLE def.
* miscfuncs.cc (check_null_str): Delete.
(check_null_empty_str): Ditto.
(check_null_empty_str_errno): Ditto.
(check_null_str_errno): Ditto.
(__check_null_invalid_struct): Ditto.
(__check_null_invalid_struct_errno): Ditto.
(__check_invalid_read_ptr): Ditto.
(__check_invalid_read_ptr_errno): Ditto.
(dummytest): New function.
(check_iovec_for_read): Delete.
(chec_iovec): Rename from check_iovec_for_write.  Take a read/write parameter.
* tlsoffsets.h: Regenerate.
* winsup.h: Remove check_* declarations.
(check_iovec_for_read): Delete declaration.  Turn into a define instead.
(check_iovec_for_write): Ditto.
(check_iovec): New declaration.
* thread.h: Use ifdef guard name consistent with other header files.
@
text
@d3 2
a4 2
//; $tls::sizeof__cygtls = 3980;
//; $tls::func = -3980;
d6 1
a6 1
//; $tls::saved_errno = -3976;
d8 1
a8 1
//; $tls::sa_flags = -3972;
d10 1
a10 1
//; $tls::oldmask = -3968;
d12 1
a12 1
//; $tls::deltamask = -3964;
d14 1
a14 1
//; $tls::event = -3960;
d16 1
a16 1
//; $tls::errno_addr = -3956;
d18 1
a18 1
//; $tls::initialized = -3952;
d20 1
a20 1
//; $tls::sigmask = -3948;
d22 1
a22 1
//; $tls::sigwait_mask = -3944;
d24 1
a24 1
//; $tls::sigwait_info = -3940;
d26 1
a26 1
//; $tls::threadkill = -3936;
d28 1
a28 1
//; $tls::infodata = -3932;
d30 1
a30 1
//; $tls::tid = -3784;
d32 1
a32 1
//; $tls::local_clib = -3780;
d34 1
a34 1
//; $tls::__dontuse = -3780;
d36 1
a36 1
//; $tls::locals = -2716;
d39 1
a39 1
//; $tls::p_ctinfo = 2888;
d41 1
a41 1
//; $tls::p_myfault = 2892;
d43 1
a43 1
//; $tls::p_myfault_errno = 2896;
d45 1
a45 1
//; $tls::pwq = 2900;
d47 1
a47 1
//; $tls::pprev = 2928;
d49 1
a49 1
//; $tls::pnext = 2932;
d51 1
a51 1
//; $tls::pstackptr = 2936;
d53 1
a53 1
//; $tls::psig = 2940;
d55 1
a55 1
//; $tls::pincyg = 2944;
d57 1
a57 1
//; $tls::pspinning = 2948;
d59 1
a59 1
//; $tls::pstacklock = 2952;
d61 1
a61 1
//; $tls::pstack = 2956;
d63 1
a63 1
//; $tls::ppadding = 3980;
d66 1
a66 1
#define tls_func (-3980)
d68 1
a68 1
#define tls_saved_errno (-3976)
d70 1
a70 1
#define tls_sa_flags (-3972)
d72 1
a72 1
#define tls_oldmask (-3968)
d74 1
a74 1
#define tls_deltamask (-3964)
d76 1
a76 1
#define tls_event (-3960)
d78 1
a78 1
#define tls_errno_addr (-3956)
d80 1
a80 1
#define tls_initialized (-3952)
d82 1
a82 1
#define tls_sigmask (-3948)
d84 1
a84 1
#define tls_sigwait_mask (-3944)
d86 1
a86 1
#define tls_sigwait_info (-3940)
d88 1
a88 1
#define tls_threadkill (-3936)
d90 1
a90 1
#define tls_infodata (-3932)
d92 1
a92 1
#define tls_tid (-3784)
d94 1
a94 1
#define tls_local_clib (-3780)
d96 1
a96 1
#define tls___dontuse (-3780)
d98 1
a98 1
#define tls_locals (-2716)
d101 1
a101 1
#define tls_p_ctinfo (2888)
d103 1
a103 1
#define tls_p_myfault (2892)
d105 1
a105 1
#define tls_p_myfault_errno (2896)
d107 1
a107 1
#define tls_pwq (2900)
d109 1
a109 1
#define tls_pprev (2928)
d111 1
a111 1
#define tls_pnext (2932)
d113 1
a113 1
#define tls_pstackptr (2936)
d115 1
a115 1
#define tls_psig (2940)
d117 1
a117 1
#define tls_pincyg (2944)
d119 1
a119 1
#define tls_pspinning (2948)
d121 1
a121 1
#define tls_pstacklock (2952)
d123 1
a123 1
#define tls_pstack (2956)
d125 1
a125 1
#define tls_ppadding (3980)
@


1.19
log
@* cygtls.h (_local_storage::setmode_file): New element.
(_local_storage::setmode_mode): New element.
* tlsoffsets.h: Regenerate.
* cygwin.din (setmode): Define as cygwin_getmode.
* syscalls.cc (setmode_helper): Use setmode_* variables from tls rather than
using unthreadsafe static.
(setmode): Break out fwalk stuff.
(cygwin_setmode): New function.  Put fwalk stdio stuff here.
@
text
@d3 2
a4 2
//; $tls::sizeof__cygtls = 3972;
//; $tls::func = -3972;
d6 1
a6 1
//; $tls::saved_errno = -3968;
d8 1
a8 1
//; $tls::sa_flags = -3964;
d10 1
a10 1
//; $tls::oldmask = -3960;
d12 1
a12 1
//; $tls::deltamask = -3956;
d14 1
a14 1
//; $tls::event = -3952;
d16 1
a16 1
//; $tls::errno_addr = -3948;
d18 1
a18 1
//; $tls::initialized = -3944;
d20 1
a20 1
//; $tls::sigmask = -3940;
d22 1
a22 1
//; $tls::sigwait_mask = -3936;
d24 1
a24 1
//; $tls::sigwait_info = -3932;
d26 1
a26 1
//; $tls::threadkill = -3928;
d28 1
a28 1
//; $tls::infodata = -3924;
d30 1
a30 1
//; $tls::tid = -3776;
d32 1
a32 1
//; $tls::local_clib = -3772;
d34 1
a34 1
//; $tls::__dontuse = -3772;
d36 1
a36 1
//; $tls::locals = -2708;
d38 1
a38 1
//; $tls::_ctinfo = -1084;
d40 4
d45 1
a45 1
//; $tls::pwq = 2892;
d47 1
a47 1
//; $tls::pprev = 2920;
d49 1
a49 1
//; $tls::pnext = 2924;
d51 1
a51 1
//; $tls::pstackptr = 2928;
d53 1
a53 1
//; $tls::psig = 2932;
d55 1
a55 1
//; $tls::pincyg = 2936;
d57 1
a57 1
//; $tls::pspinning = 2940;
d59 1
a59 1
//; $tls::pstacklock = 2944;
d61 1
a61 1
//; $tls::pstack = 2948;
d63 1
a63 1
//; $tls::ppadding = 3972;
d66 1
a66 1
#define tls_func (-3972)
d68 1
a68 1
#define tls_saved_errno (-3968)
d70 1
a70 1
#define tls_sa_flags (-3964)
d72 1
a72 1
#define tls_oldmask (-3960)
d74 1
a74 1
#define tls_deltamask (-3956)
d76 1
a76 1
#define tls_event (-3952)
d78 1
a78 1
#define tls_errno_addr (-3948)
d80 1
a80 1
#define tls_initialized (-3944)
d82 1
a82 1
#define tls_sigmask (-3940)
d84 1
a84 1
#define tls_sigwait_mask (-3936)
d86 1
a86 1
#define tls_sigwait_info (-3932)
d88 1
a88 1
#define tls_threadkill (-3928)
d90 1
a90 1
#define tls_infodata (-3924)
d92 1
a92 1
#define tls_tid (-3776)
d94 1
a94 1
#define tls_local_clib (-3772)
d96 1
a96 1
#define tls___dontuse (-3772)
d98 1
a98 1
#define tls_locals (-2708)
d100 1
a100 1
#define tls__ctinfo (-1084)
d102 4
d107 1
a107 1
#define tls_pwq (2892)
d109 1
a109 1
#define tls_pprev (2920)
d111 1
a111 1
#define tls_pnext (2924)
d113 1
a113 1
#define tls_pstackptr (2928)
d115 1
a115 1
#define tls_psig (2932)
d117 1
a117 1
#define tls_pincyg (2936)
d119 1
a119 1
#define tls_pspinning (2940)
d121 1
a121 1
#define tls_pstacklock (2944)
d123 1
a123 1
#define tls_pstack (2948)
d125 1
a125 1
#define tls_ppadding (3972)
@


1.18
log
@* cygtls.h (_local_storage::unknown_thread_name): New buffer.
* tlsoffsets.h: Regenerate.
* cygthread.cc (cygthread::name): Use new thread-local buffer.
* exceptions.cc (handle_exceptions): Avoid unnecessary initialization of static
variables to zero.
* fork.cc (slow_pid_reuse) Ditto.
@
text
@d3 2
a4 2
//; $tls::sizeof__cygtls = 3964;
//; $tls::func = -3964;
d6 1
a6 1
//; $tls::saved_errno = -3960;
d8 1
a8 1
//; $tls::sa_flags = -3956;
d10 1
a10 1
//; $tls::oldmask = -3952;
d12 1
a12 1
//; $tls::deltamask = -3948;
d14 1
a14 1
//; $tls::event = -3944;
d16 1
a16 1
//; $tls::errno_addr = -3940;
d18 1
a18 1
//; $tls::initialized = -3936;
d20 1
a20 1
//; $tls::sigmask = -3932;
d22 1
a22 1
//; $tls::sigwait_mask = -3928;
d24 1
a24 1
//; $tls::sigwait_info = -3924;
d26 1
a26 1
//; $tls::threadkill = -3920;
d28 1
a28 1
//; $tls::infodata = -3916;
d30 1
a30 1
//; $tls::tid = -3768;
d32 1
a32 1
//; $tls::local_clib = -3764;
d34 1
a34 1
//; $tls::__dontuse = -3764;
d36 1
a36 1
//; $tls::locals = -2700;
d39 1
a39 1
//; $tls::p_ctinfo = 2880;
d41 1
a41 1
//; $tls::pwq = 2884;
d43 1
a43 1
//; $tls::pprev = 2912;
d45 1
a45 1
//; $tls::pnext = 2916;
d47 1
a47 1
//; $tls::pstackptr = 2920;
d49 1
a49 1
//; $tls::psig = 2924;
d51 1
a51 1
//; $tls::pincyg = 2928;
d53 1
a53 1
//; $tls::pspinning = 2932;
d55 1
a55 1
//; $tls::pstacklock = 2936;
d57 1
a57 1
//; $tls::pstack = 2940;
d59 1
a59 1
//; $tls::ppadding = 3964;
d62 1
a62 1
#define tls_func (-3964)
d64 1
a64 1
#define tls_saved_errno (-3960)
d66 1
a66 1
#define tls_sa_flags (-3956)
d68 1
a68 1
#define tls_oldmask (-3952)
d70 1
a70 1
#define tls_deltamask (-3948)
d72 1
a72 1
#define tls_event (-3944)
d74 1
a74 1
#define tls_errno_addr (-3940)
d76 1
a76 1
#define tls_initialized (-3936)
d78 1
a78 1
#define tls_sigmask (-3932)
d80 1
a80 1
#define tls_sigwait_mask (-3928)
d82 1
a82 1
#define tls_sigwait_info (-3924)
d84 1
a84 1
#define tls_threadkill (-3920)
d86 1
a86 1
#define tls_infodata (-3916)
d88 1
a88 1
#define tls_tid (-3768)
d90 1
a90 1
#define tls_local_clib (-3764)
d92 1
a92 1
#define tls___dontuse (-3764)
d94 1
a94 1
#define tls_locals (-2700)
d97 1
a97 1
#define tls_p_ctinfo (2880)
d99 1
a99 1
#define tls_pwq (2884)
d101 1
a101 1
#define tls_pprev (2912)
d103 1
a103 1
#define tls_pnext (2916)
d105 1
a105 1
#define tls_pstackptr (2920)
d107 1
a107 1
#define tls_psig (2924)
d109 1
a109 1
#define tls_pincyg (2928)
d111 1
a111 1
#define tls_pspinning (2932)
d113 1
a113 1
#define tls_pstacklock (2936)
d115 1
a115 1
#define tls_pstack (2940)
d117 1
a117 1
#define tls_ppadding (3964)
@


1.17
log
@force checkin
@
text
@d3 2
a4 2
//; $tls::sizeof__cygtls = 3936;
//; $tls::func = -3936;
d6 1
a6 1
//; $tls::saved_errno = -3932;
d8 1
a8 1
//; $tls::sa_flags = -3928;
d10 1
a10 1
//; $tls::oldmask = -3924;
d12 1
a12 1
//; $tls::deltamask = -3920;
d14 1
a14 1
//; $tls::event = -3916;
d16 1
a16 1
//; $tls::errno_addr = -3912;
d18 1
a18 1
//; $tls::initialized = -3908;
d20 1
a20 1
//; $tls::sigmask = -3904;
d22 1
a22 1
//; $tls::sigwait_mask = -3900;
d24 1
a24 1
//; $tls::sigwait_info = -3896;
d26 1
a26 1
//; $tls::threadkill = -3892;
d28 1
a28 1
//; $tls::infodata = -3888;
d30 1
a30 1
//; $tls::tid = -3740;
d32 1
a32 1
//; $tls::local_clib = -3736;
d34 1
a34 1
//; $tls::__dontuse = -3736;
d36 1
a36 1
//; $tls::locals = -2672;
d39 1
a39 1
//; $tls::p_ctinfo = 2852;
d41 1
a41 1
//; $tls::pwq = 2856;
d43 1
a43 1
//; $tls::pprev = 2884;
d45 1
a45 1
//; $tls::pnext = 2888;
d47 1
a47 1
//; $tls::pstackptr = 2892;
d49 1
a49 1
//; $tls::psig = 2896;
d51 1
a51 1
//; $tls::pincyg = 2900;
d53 1
a53 1
//; $tls::pspinning = 2904;
d55 1
a55 1
//; $tls::pstacklock = 2908;
d57 1
a57 1
//; $tls::pstack = 2912;
d59 1
a59 1
//; $tls::ppadding = 3936;
d62 1
a62 1
#define tls_func (-3936)
d64 1
a64 1
#define tls_saved_errno (-3932)
d66 1
a66 1
#define tls_sa_flags (-3928)
d68 1
a68 1
#define tls_oldmask (-3924)
d70 1
a70 1
#define tls_deltamask (-3920)
d72 1
a72 1
#define tls_event (-3916)
d74 1
a74 1
#define tls_errno_addr (-3912)
d76 1
a76 1
#define tls_initialized (-3908)
d78 1
a78 1
#define tls_sigmask (-3904)
d80 1
a80 1
#define tls_sigwait_mask (-3900)
d82 1
a82 1
#define tls_sigwait_info (-3896)
d84 1
a84 1
#define tls_threadkill (-3892)
d86 1
a86 1
#define tls_infodata (-3888)
d88 1
a88 1
#define tls_tid (-3740)
d90 1
a90 1
#define tls_local_clib (-3736)
d92 1
a92 1
#define tls___dontuse (-3736)
d94 1
a94 1
#define tls_locals (-2672)
d97 1
a97 1
#define tls_p_ctinfo (2852)
d99 1
a99 1
#define tls_pwq (2856)
d101 1
a101 1
#define tls_pprev (2884)
d103 1
a103 1
#define tls_pnext (2888)
d105 1
a105 1
#define tls_pstackptr (2892)
d107 1
a107 1
#define tls_psig (2896)
d109 1
a109 1
#define tls_pincyg (2900)
d111 1
a111 1
#define tls_pspinning (2904)
d113 1
a113 1
#define tls_pstacklock (2908)
d115 1
a115 1
#define tls_pstack (2912)
d117 1
a117 1
#define tls_ppadding (3936)
@


1.16
log
@* child_info.h (child_info_spawn::hexec_proc): Eliminate.
* dcrt0.cc (dll_crt0_0): Remove hexec_proc stuff.
* fork.cc (fork_child): Remove call to pinfo_fixup_after_fork.
* pinfo.cc (set_myself): Close and zero pid_handle if set.
(pinfo_fixup_after_fork): Delete.
(proc_waiter): Don't close vchild.hProcess here.  Do that when we are remove
the vchild from procs.  Save hProcess as pid_handle only on first reparent
operation.
(pinfo::wait): Don't set pid_handle here.
(pinfo::alert_parent): Always try to send signal.  If unsuccessful then close
and zero wr_proc_pipe.
* pinfo.h (pinfo::pinfo): Make sure that appropriate parts of the class are
zeroed on construction.
(pinfo::alert_parent): Take char argument.
(pinfo_fixup_after_fork): Delete declaration.
(hexec_proc): Ditto.
* sigproc.cc (remove_proc): Close pid_handle and hProcess if appropriate.
* spawn.cc (spawn_guts): Set cygheap->pid_handle on first exec.
* cygheap.h (init_cygheap::pid_handle): New element.
* pinfo.cc (set_myself): Clear previously existing cygheap->pid_handle when a
new process has been started.
(pinfo::wait): Make sure that a handle to the newly forked/spawned process is
kept around so that the pid will not be reused.
* pinfo.h (_pinfo::pid_handle): Move.
(pinfo::pid_handle): to here.
* spawn.cc (spawn_guts): Create a pid_handle in cygheap prior to spawning to
ensure that the pid does not get reused during the lifetime of the "cygwin
pid".
* pinfo.h (pinfo::alert_parent): New function.
* exceptions.cc (sig_handle_tty_stop): Use alert_parent to send "signals" to
parent.
* fork.cc (fork_parent): Don't close pi.hProcess.  Let the waiter thread do
that.
* pinfo.cc (proc_waiter): Detect case where process exits without setting the
exit code and use value from GetExitCodeProcess.  Reluctantly implement
__SIGREPARENT.
(pinfo::alert_parent): Define.
* sigproc.h (__SIGREPARENT): New enum.
* spawn.cc (spawn_guts): Send reparent signal to parent on exec.  Always create
process in suspended state to avoid races.  Remove cygthread.h in favor of
cygtls.h throughout since cygtls now includes cygthread.h.  Eliminate
ppid_handle usage throughout.
* child_info.h: Regenerate magic number
(child_info): Remove pppid_handle.
* cygthread.h (cygthread::release): New method.  Frees thread without waiting.
* cygthread.cc (cygthread::stub): Set _ctinfo in _mytls to point to information
for executing thread.  Don't call SetEvent if thread is no longer in use.
(cygthread::simplestub): Ditto.
* cygtls.h (_cygtls::_ctinfo): New element contains pointer to information
about executing cygthread, if any.
* dcrt0.cc: Remove last vestiges of per_thread stuff.
(dll_crt0_0): Ditto.  Remove accommodation for ppid_handle.
(do_exit): Remove obsolete reparenting test.
(_exit): Exit with a more SUSv3-like exit value.
* dtable.cc (dtable::stdio_init): Check for myself->cygstarted rather than
myself->ppid_handle to see if we were started by a cygwin process.
* exceptions.cc (open_stackdumpfile): Ditto.
(handle_exceptions): Ditto.
(ctrl_c_handler): Ditto.
(sig_handle_tty_stop): Ditto.  Let parent send signal to itself on STOP.
(sigpacket::process): Comment out vfork test.
(signal_exit): Use more SUSv3-like exit value on signal.
* external.cc (fillout_pinfo): Don't set hProcess.
* fork.cc: Remove VFORK cruft.
(per_thread::set): Delete.
(fork_child): Remove perthread stuff.
(fork_parent): Remove obsolete subproc_init.  Accommodate new method for
tracking subprocesses.
* pinfo.cc (set_myself): Accommodate new pinfo/_pinfo layout.  Set some things
here that used to be set in wait_sig.
(_pinfo::exit): Set exitcode here.  Close process pipe.
(_pinfo::commune_send): Accommodeate new pinfo/_pinfo layout.
(proc_waiter): New function.  Waits, in a thread for subprocess to go away.
(pinfo::wait): New function.  Initialization for proc_waiter.
* pinfo.h (_pinfo::exitcode): New element.
(_pinfo::cygstarted): Ditto.
(_pinfo::wr_proc_pipe): Ditto.
(_pinfo::ppid_handle): Delete.
(_pinfo::hProcess): Delete.
(_pinfo::lock): Delete.
(pinfo::hProcess): New element.
(pinfo::lock): Ditto.
(pinfo::wait): Declare new function.
(pinfo::preserve): Define new function.
* sigproc.cc: Remove old stuff from wait_subproc thread based method.
(zombies): Remove.
(procs): New.
(my_parent_is_alive): Just check that the parent pid exists.
(mychild): Just use pinfo methods to determine if child is mine.
(proc_subproc): Revamp PROC_ADDCHILD to use pinfo::wait.  Remove
PROC_CHILDTERMINATED logic.  Use different method to remove processes from list
when SIGCHLD == SIG_IGN.
(proc_terminate): Gut.
(subproc_init): Delete.
(init_child_info): Remove setting of pppid_handle.
(checkstate): Revamp to only scan procs array.
(remove_proc): Rename from remove_zombie.  Don't close hProcess or pid_handle.
Don't release memory if it's myself.
(stopped_or_terminated): Change logic to handle new consolidated proc/zombie
array.
(wait_subproc): Delete.
* sigproc.h: Remove obsolete EXIT_* defines.
(subproc_init): Remove declaration.
* spawn.cc (spawn_guts): Remove reparenting stuff.  Use standard wait logic to
wait for child if started from a non-cygwin process.
* tlsoffsets.h: Regenerate.
* tty.cc (tty_init): Check for myself->cygstarted rather than
myself->ppid_handle to see if we were started by a cygwin process.
* include/sys/signal.h (external_pinfo::exitcode): Replace hProcess.
* include/sys/wait.h (WCOREDUMP): Define.
* fhandler_tty.cc (fhandler_tty_slave::read): Add debugging output for timeout
case.
* signal.cc (abort): Flag that we are exiting with the ABORT signal.
@
text
@@


1.15
log
@* cygtls.h (exitsock): New element.
(exitsock_sin): Ditto.
* cygtls.cc (_cygtls::init_thread): Initialize exitsock to invalid handle.
(_cygtls::call2): Close exitsock if it is valid.
* select.cc (struct socketinf): Remove sin element.
(start_thread_socket): Initialize one SOCK_DGRAM socket per thread instead of
(apparently) expensive opening and closing of socket with each select call.
(socket_cleanup): Send a byte to the exitsock socket as a way to potentially
signal a waiting-for-socket thread to exit.
* tlsoffsets.h: Regenerate.
@
text
@d3 2
a4 2
//; $tls::sizeof__cygtls = 3932;
//; $tls::func = -3932;
d6 1
a6 1
//; $tls::saved_errno = -3928;
d8 1
a8 1
//; $tls::sa_flags = -3924;
d10 1
a10 1
//; $tls::oldmask = -3920;
d12 1
a12 1
//; $tls::deltamask = -3916;
d14 1
a14 1
//; $tls::event = -3912;
d16 1
a16 1
//; $tls::errno_addr = -3908;
d18 1
a18 1
//; $tls::initialized = -3904;
d20 1
a20 1
//; $tls::sigmask = -3900;
d22 1
a22 1
//; $tls::sigwait_mask = -3896;
d24 1
a24 1
//; $tls::sigwait_info = -3892;
d26 1
a26 1
//; $tls::threadkill = -3888;
d28 1
a28 1
//; $tls::infodata = -3884;
d30 1
a30 1
//; $tls::tid = -3736;
d32 1
a32 1
//; $tls::local_clib = -3732;
d34 1
a34 1
//; $tls::__dontuse = -3732;
d36 1
a36 1
//; $tls::locals = -2668;
d38 2
d41 1
a41 1
//; $tls::pwq = 2852;
d43 1
a43 1
//; $tls::pprev = 2880;
d45 1
a45 1
//; $tls::pnext = 2884;
d47 1
a47 1
//; $tls::pstackptr = 2888;
d49 1
a49 1
//; $tls::psig = 2892;
d51 1
a51 1
//; $tls::pincyg = 2896;
d53 1
a53 1
//; $tls::pspinning = 2900;
d55 1
a55 1
//; $tls::pstacklock = 2904;
d57 1
a57 1
//; $tls::pstack = 2908;
d59 1
a59 1
//; $tls::ppadding = 3932;
d62 1
a62 1
#define tls_func (-3932)
d64 1
a64 1
#define tls_saved_errno (-3928)
d66 1
a66 1
#define tls_sa_flags (-3924)
d68 1
a68 1
#define tls_oldmask (-3920)
d70 1
a70 1
#define tls_deltamask (-3916)
d72 1
a72 1
#define tls_event (-3912)
d74 1
a74 1
#define tls_errno_addr (-3908)
d76 1
a76 1
#define tls_initialized (-3904)
d78 1
a78 1
#define tls_sigmask (-3900)
d80 1
a80 1
#define tls_sigwait_mask (-3896)
d82 1
a82 1
#define tls_sigwait_info (-3892)
d84 1
a84 1
#define tls_threadkill (-3888)
d86 1
a86 1
#define tls_infodata (-3884)
d88 1
a88 1
#define tls_tid (-3736)
d90 1
a90 1
#define tls_local_clib (-3732)
d92 1
a92 1
#define tls___dontuse (-3732)
d94 1
a94 1
#define tls_locals (-2668)
d96 2
d99 1
a99 1
#define tls_pwq (2852)
d101 1
a101 1
#define tls_pprev (2880)
d103 1
a103 1
#define tls_pnext (2884)
d105 1
a105 1
#define tls_pstackptr (2888)
d107 1
a107 1
#define tls_psig (2892)
d109 1
a109 1
#define tls_pincyg (2896)
d111 1
a111 1
#define tls_pspinning (2900)
d113 1
a113 1
#define tls_pstacklock (2904)
d115 1
a115 1
#define tls_pstack (2908)
d117 1
a117 1
#define tls_ppadding (3932)
@


1.15.2.1
log
@Use cygthread.  Add release mechanism to cygthread so that it can be
used by threads which detach themselves.
@
text
@d3 2
a4 2
//; $tls::sizeof__cygtls = 3936;
//; $tls::func = -3936;
d6 1
a6 1
//; $tls::saved_errno = -3932;
d8 1
a8 1
//; $tls::sa_flags = -3928;
d10 1
a10 1
//; $tls::oldmask = -3924;
d12 1
a12 1
//; $tls::deltamask = -3920;
d14 1
a14 1
//; $tls::event = -3916;
d16 1
a16 1
//; $tls::errno_addr = -3912;
d18 1
a18 1
//; $tls::initialized = -3908;
d20 1
a20 1
//; $tls::sigmask = -3904;
d22 1
a22 1
//; $tls::sigwait_mask = -3900;
d24 1
a24 1
//; $tls::sigwait_info = -3896;
d26 1
a26 1
//; $tls::threadkill = -3892;
d28 1
a28 1
//; $tls::infodata = -3888;
d30 1
a30 1
//; $tls::tid = -3740;
d32 1
a32 1
//; $tls::local_clib = -3736;
d34 1
a34 1
//; $tls::__dontuse = -3736;
d36 1
a36 1
//; $tls::locals = -2672;
a37 2
//; $tls::_ctinfo = -1084;
//; $tls::p_ctinfo = 2852;
d39 1
a39 1
//; $tls::pwq = 2856;
d41 1
a41 1
//; $tls::pprev = 2884;
d43 1
a43 1
//; $tls::pnext = 2888;
d45 1
a45 1
//; $tls::pstackptr = 2892;
d47 1
a47 1
//; $tls::psig = 2896;
d49 1
a49 1
//; $tls::pincyg = 2900;
d51 1
a51 1
//; $tls::pspinning = 2904;
d53 1
a53 1
//; $tls::pstacklock = 2908;
d55 1
a55 1
//; $tls::pstack = 2912;
d57 1
a57 1
//; $tls::ppadding = 3936;
d60 1
a60 1
#define tls_func (-3936)
d62 1
a62 1
#define tls_saved_errno (-3932)
d64 1
a64 1
#define tls_sa_flags (-3928)
d66 1
a66 1
#define tls_oldmask (-3924)
d68 1
a68 1
#define tls_deltamask (-3920)
d70 1
a70 1
#define tls_event (-3916)
d72 1
a72 1
#define tls_errno_addr (-3912)
d74 1
a74 1
#define tls_initialized (-3908)
d76 1
a76 1
#define tls_sigmask (-3904)
d78 1
a78 1
#define tls_sigwait_mask (-3900)
d80 1
a80 1
#define tls_sigwait_info (-3896)
d82 1
a82 1
#define tls_threadkill (-3892)
d84 1
a84 1
#define tls_infodata (-3888)
d86 1
a86 1
#define tls_tid (-3740)
d88 1
a88 1
#define tls_local_clib (-3736)
d90 1
a90 1
#define tls___dontuse (-3736)
d92 1
a92 1
#define tls_locals (-2672)
a93 2
#define tls__ctinfo (-1084)
#define tls_p_ctinfo (2852)
d95 1
a95 1
#define tls_pwq (2856)
d97 1
a97 1
#define tls_pprev (2884)
d99 1
a99 1
#define tls_pnext (2888)
d101 1
a101 1
#define tls_pstackptr (2892)
d103 1
a103 1
#define tls_psig (2896)
d105 1
a105 1
#define tls_pincyg (2900)
d107 1
a107 1
#define tls_pspinning (2904)
d109 1
a109 1
#define tls_pstacklock (2908)
d111 1
a111 1
#define tls_pstack (2912)
d113 1
a113 1
#define tls_ppadding (3936)
@


1.14
log
@* cygtls.h: Add alignment kludge to fix disparity between compilers.
* tlsoffsets.h: Regenerate.
* fork.cc (slow_pid_reuse): Use define to control number of pids held to
prevent pid reuse.
@
text
@d3 2
a4 2
//; $tls::sizeof__cygtls = 3912;
//; $tls::func = -3912;
d6 1
a6 1
//; $tls::saved_errno = -3908;
d8 1
a8 1
//; $tls::sa_flags = -3904;
d10 1
a10 1
//; $tls::oldmask = -3900;
d12 1
a12 1
//; $tls::deltamask = -3896;
d14 1
a14 1
//; $tls::event = -3892;
d16 1
a16 1
//; $tls::errno_addr = -3888;
d18 1
a18 1
//; $tls::initialized = -3884;
d20 1
a20 1
//; $tls::sigmask = -3880;
d22 1
a22 1
//; $tls::sigwait_mask = -3876;
d24 1
a24 1
//; $tls::sigwait_info = -3872;
d26 1
a26 1
//; $tls::threadkill = -3868;
d28 1
a28 1
//; $tls::infodata = -3864;
d30 1
a30 1
//; $tls::tid = -3716;
d32 1
a32 1
//; $tls::local_clib = -3712;
d34 1
a34 1
//; $tls::__dontuse = -3712;
d36 1
a36 1
//; $tls::locals = -2648;
d39 1
a39 1
//; $tls::pwq = 2832;
d41 1
a41 1
//; $tls::pprev = 2860;
d43 1
a43 1
//; $tls::pnext = 2864;
d45 1
a45 1
//; $tls::pstackptr = 2868;
d47 1
a47 1
//; $tls::psig = 2872;
d49 1
a49 1
//; $tls::pincyg = 2876;
d51 1
a51 1
//; $tls::pspinning = 2880;
d53 1
a53 1
//; $tls::pstacklock = 2884;
d55 1
a55 1
//; $tls::pstack = 2888;
d57 1
a57 1
//; $tls::ppadding = 3912;
d60 1
a60 1
#define tls_func (-3912)
d62 1
a62 1
#define tls_saved_errno (-3908)
d64 1
a64 1
#define tls_sa_flags (-3904)
d66 1
a66 1
#define tls_oldmask (-3900)
d68 1
a68 1
#define tls_deltamask (-3896)
d70 1
a70 1
#define tls_event (-3892)
d72 1
a72 1
#define tls_errno_addr (-3888)
d74 1
a74 1
#define tls_initialized (-3884)
d76 1
a76 1
#define tls_sigmask (-3880)
d78 1
a78 1
#define tls_sigwait_mask (-3876)
d80 1
a80 1
#define tls_sigwait_info (-3872)
d82 1
a82 1
#define tls_threadkill (-3868)
d84 1
a84 1
#define tls_infodata (-3864)
d86 1
a86 1
#define tls_tid (-3716)
d88 1
a88 1
#define tls_local_clib (-3712)
d90 1
a90 1
#define tls___dontuse (-3712)
d92 1
a92 1
#define tls_locals (-2648)
d95 1
a95 1
#define tls_pwq (2832)
d97 1
a97 1
#define tls_pprev (2860)
d99 1
a99 1
#define tls_pnext (2864)
d101 1
a101 1
#define tls_pstackptr (2868)
d103 1
a103 1
#define tls_psig (2872)
d105 1
a105 1
#define tls_pincyg (2876)
d107 1
a107 1
#define tls_pspinning (2880)
d109 1
a109 1
#define tls_pstacklock (2884)
d111 1
a111 1
#define tls_pstack (2888)
d113 1
a113 1
#define tls_ppadding (3912)
@


1.13
log
@* cygtls.h (waitq): Declare structure here.
(_cygtls::wq): Declare.
* cygtls.cc (_cygtls::fixup_after_fork): Clear wq.thread_ev to avoid using an
invalid event handle in forked process.
* dcrt0.cc (waitq_storage): Delete.
(threadstuff): Remove waitq_storage.
* perthread.h (per_thread_waitq): Delete.
(waitq_storage): Delete declaration.
* sigproc.cc (sigproc_init): Remove perthread waitq consideration.
* sigproc.h (waitq): Delete declaration.
* wait.cc (wait4): Use _my_tls waitq structure rather than per_thread.
* cygtls.h (_cygtls::newmask): Delete member.
(_cygtls::deltamask): New member.
* gendef (_sigdelayed): Replace the call to set_process_mask by a call to
set_process_mask_delta.
* exceptions.cc (handle_sigsuspend): Do not filter tempmask.  Or
SIG_NONMASKABLE in deltamask as a flag.
(_cygtls::interrupt_setup): Set deltamask only.
(set_process_mask_delta): New function.
(_cygtls::call_signal_handler): Replace the first call to set_process_mask by a
call to set_process_mask_delta.
* tlsoffsets.h: Regenerate.
@
text
@d3 2
a4 2
//; $tls::sizeof__cygtls = 3776;
//; $tls::func = -3776;
d6 1
a6 1
//; $tls::saved_errno = -3772;
d8 1
a8 1
//; $tls::sa_flags = -3768;
d10 1
a10 1
//; $tls::oldmask = -3764;
d12 1
a12 1
//; $tls::deltamask = -3760;
d14 1
a14 1
//; $tls::event = -3756;
d16 1
a16 1
//; $tls::errno_addr = -3752;
d18 1
a18 1
//; $tls::initialized = -3748;
d20 1
a20 1
//; $tls::sigmask = -3744;
d22 1
a22 1
//; $tls::sigwait_mask = -3740;
d24 1
a24 1
//; $tls::sigwait_info = -3736;
d26 1
a26 1
//; $tls::threadkill = -3732;
d28 1
a28 1
//; $tls::infodata = -3728;
d30 1
a30 1
//; $tls::tid = -3580;
d32 1
a32 1
//; $tls::local_clib = -3576;
d34 2
d37 1
a37 1
//; $tls::plocals = 1128;
d39 1
a39 1
//; $tls::pwq = 2696;
d41 1
a41 1
//; $tls::pprev = 2724;
d43 1
a43 1
//; $tls::pnext = 2728;
d45 1
a45 1
//; $tls::pstackptr = 2732;
d47 1
a47 1
//; $tls::psig = 2736;
d49 1
a49 1
//; $tls::pincyg = 2740;
d51 1
a51 1
//; $tls::pspinning = 2744;
d53 1
a53 1
//; $tls::pstacklock = 2748;
d55 1
a55 1
//; $tls::pstack = 2752;
d57 1
a57 1
//; $tls::ppadding = 3776;
d60 1
a60 1
#define tls_func (-3776)
d62 1
a62 1
#define tls_saved_errno (-3772)
d64 1
a64 1
#define tls_sa_flags (-3768)
d66 1
a66 1
#define tls_oldmask (-3764)
d68 1
a68 1
#define tls_deltamask (-3760)
d70 1
a70 1
#define tls_event (-3756)
d72 1
a72 1
#define tls_errno_addr (-3752)
d74 1
a74 1
#define tls_initialized (-3748)
d76 1
a76 1
#define tls_sigmask (-3744)
d78 1
a78 1
#define tls_sigwait_mask (-3740)
d80 1
a80 1
#define tls_sigwait_info (-3736)
d82 1
a82 1
#define tls_threadkill (-3732)
d84 1
a84 1
#define tls_infodata (-3728)
d86 1
a86 1
#define tls_tid (-3580)
d88 1
a88 1
#define tls_local_clib (-3576)
d90 2
d93 1
a93 1
#define tls_plocals (1128)
d95 1
a95 1
#define tls_pwq (2696)
d97 1
a97 1
#define tls_pprev (2724)
d99 1
a99 1
#define tls_pnext (2728)
d101 1
a101 1
#define tls_pstackptr (2732)
d103 1
a103 1
#define tls_psig (2736)
d105 1
a105 1
#define tls_pincyg (2740)
d107 1
a107 1
#define tls_pspinning (2744)
d109 1
a109 1
#define tls_pstacklock (2748)
d111 1
a111 1
#define tls_pstack (2752)
d113 1
a113 1
#define tls_ppadding (3776)
@


1.12
log
@* exceptions.cc (setup_handler): Avoid suspending a thread if it in a cygwin
function, in an exception, spinning, or locked.
* gendef (_sigfe): Move incyg setting earlier.
(sigreturn): Set incyg flag to avoid interrupting called cygwin functions.
(sigdelayed): Ditto.
(stabilize_sig_stack): Ditto.
* sigproc.cc (proc_subproc): Don't restore process lock early in exec case.
* cygtls.h: Reorganize fields in _cygtls slightly.
* tlsoffsets.h: Regenerate.
@
text
@d3 2
a4 2
//; $tls::sizeof__cygtls = 3748;
//; $tls::func = -3748;
d6 1
a6 1
//; $tls::saved_errno = -3744;
d8 1
a8 1
//; $tls::sa_flags = -3740;
d10 1
a10 1
//; $tls::oldmask = -3736;
d12 3
a14 3
//; $tls::newmask = -3732;
//; $tls::pnewmask = 16;
//; $tls::event = -3728;
d16 1
a16 1
//; $tls::errno_addr = -3724;
d18 1
a18 1
//; $tls::initialized = -3720;
d20 1
a20 1
//; $tls::sigmask = -3716;
d22 1
a22 1
//; $tls::sigwait_mask = -3712;
d24 1
a24 1
//; $tls::sigwait_info = -3708;
d26 1
a26 1
//; $tls::threadkill = -3704;
d28 1
a28 1
//; $tls::infodata = -3700;
d30 1
a30 1
//; $tls::tid = -3552;
d32 1
a32 1
//; $tls::local_clib = -3548;
d34 1
a34 1
//; $tls::locals = -2620;
d36 2
d39 1
a39 1
//; $tls::pprev = 2696;
d41 1
a41 1
//; $tls::pnext = 2700;
d43 1
a43 1
//; $tls::pstackptr = 2704;
d45 1
a45 1
//; $tls::psig = 2708;
d47 1
a47 1
//; $tls::pincyg = 2712;
d49 1
a49 1
//; $tls::pspinning = 2716;
d51 1
a51 1
//; $tls::pstacklock = 2720;
d53 1
a53 1
//; $tls::pstack = 2724;
d55 1
a55 1
//; $tls::ppadding = 3748;
d58 1
a58 1
#define tls_func (-3748)
d60 1
a60 1
#define tls_saved_errno (-3744)
d62 1
a62 1
#define tls_sa_flags (-3740)
d64 1
a64 1
#define tls_oldmask (-3736)
d66 3
a68 3
#define tls_newmask (-3732)
#define tls_pnewmask (16)
#define tls_event (-3728)
d70 1
a70 1
#define tls_errno_addr (-3724)
d72 1
a72 1
#define tls_initialized (-3720)
d74 1
a74 1
#define tls_sigmask (-3716)
d76 1
a76 1
#define tls_sigwait_mask (-3712)
d78 1
a78 1
#define tls_sigwait_info (-3708)
d80 1
a80 1
#define tls_threadkill (-3704)
d82 1
a82 1
#define tls_infodata (-3700)
d84 1
a84 1
#define tls_tid (-3552)
d86 1
a86 1
#define tls_local_clib (-3548)
d88 1
a88 1
#define tls_locals (-2620)
d90 2
d93 1
a93 1
#define tls_pprev (2696)
d95 1
a95 1
#define tls_pnext (2700)
d97 1
a97 1
#define tls_pstackptr (2704)
d99 1
a99 1
#define tls_psig (2708)
d101 1
a101 1
#define tls_pincyg (2712)
d103 1
a103 1
#define tls_pspinning (2716)
d105 1
a105 1
#define tls_pstacklock (2720)
d107 1
a107 1
#define tls_pstack (2724)
d109 1
a109 1
#define tls_ppadding (3748)
@


1.11
log
@* fork.cc (fork_parent): Save parent pid in a temporary variable since child
could conceivably exit before function returns, rendering the child's shared
memory area invalid.
* cygtls.h (_cygtls::incyg): Declare new field.
(_cygtls::in_exception): Define new function.
* exceptions.cc (setup_handler): Remove locked flag.  Use 'incyg' flag and
in_exception function to determine when we're in a cygwin function.
(_cygtls::call_signal_handler): Decrement incyg flag prior to calling a
handler.  Increment it on return.
* gendef (_sigfe): Increment incyg flag.  Use testl for zero testing rather
than orl, for consistency.
(_sigbe): Decrement incyg flag.  Use testl for zero testing rather than orl,
for consistency.
(_cygtls::pop): Use testl for zero testing rather than orl, for consistency.
(stabilize_sig_stack): Ditto.
@
text
@d44 2
a45 2
//; $tls::stacklock = -1036;
//; $tls::pstacklock = 2712;
d48 2
a49 2
//; $tls::incyg = -1028;
//; $tls::pincyg = 2720;
d96 2
a97 2
#define tls_stacklock (-1036)
#define tls_pstacklock (2712)
d100 2
a101 2
#define tls_incyg (-1028)
#define tls_pincyg (2720)
@


1.10
log
@* gendef (stabilize_sig_stack): Correctly align this pointer for call to
_cygtls::call_signal_handler.
* gentls_offsets: Output sizeof field.
* tlsoffsets.h: Regenerate.
@
text
@d3 2
a4 2
//; $tls::sizeof__cygtls = 3744;
//; $tls::func = -3744;
d6 1
a6 1
//; $tls::saved_errno = -3740;
d8 1
a8 1
//; $tls::sa_flags = -3736;
d10 1
a10 1
//; $tls::oldmask = -3732;
d12 1
a12 1
//; $tls::newmask = -3728;
d14 1
a14 1
//; $tls::event = -3724;
d16 1
a16 1
//; $tls::errno_addr = -3720;
d18 1
a18 1
//; $tls::initialized = -3716;
d20 1
a20 1
//; $tls::sigmask = -3712;
d22 1
a22 1
//; $tls::sigwait_mask = -3708;
d24 1
a24 1
//; $tls::sigwait_info = -3704;
d26 1
a26 1
//; $tls::threadkill = -3700;
d28 1
a28 1
//; $tls::infodata = -3696;
d30 1
a30 1
//; $tls::tid = -3548;
d32 1
a32 1
//; $tls::local_clib = -3544;
d34 1
a34 1
//; $tls::locals = -2616;
d36 1
a36 1
//; $tls::prev = -1048;
d38 1
a38 1
//; $tls::next = -1044;
d40 1
a40 1
//; $tls::stackptr = -1040;
d42 1
a42 1
//; $tls::sig = -1036;
d44 1
a44 1
//; $tls::stacklock = -1032;
d46 1
a46 1
//; $tls::spinning = -1028;
d48 2
d51 1
a51 1
//; $tls::pstack = 2720;
d53 1
a53 1
//; $tls::ppadding = 3744;
d56 1
a56 1
#define tls_func (-3744)
d58 1
a58 1
#define tls_saved_errno (-3740)
d60 1
a60 1
#define tls_sa_flags (-3736)
d62 1
a62 1
#define tls_oldmask (-3732)
d64 1
a64 1
#define tls_newmask (-3728)
d66 1
a66 1
#define tls_event (-3724)
d68 1
a68 1
#define tls_errno_addr (-3720)
d70 1
a70 1
#define tls_initialized (-3716)
d72 1
a72 1
#define tls_sigmask (-3712)
d74 1
a74 1
#define tls_sigwait_mask (-3708)
d76 1
a76 1
#define tls_sigwait_info (-3704)
d78 1
a78 1
#define tls_threadkill (-3700)
d80 1
a80 1
#define tls_infodata (-3696)
d82 1
a82 1
#define tls_tid (-3548)
d84 1
a84 1
#define tls_local_clib (-3544)
d86 1
a86 1
#define tls_locals (-2616)
d88 1
a88 1
#define tls_prev (-1048)
d90 1
a90 1
#define tls_next (-1044)
d92 1
a92 1
#define tls_stackptr (-1040)
d94 1
a94 1
#define tls_sig (-1036)
d96 1
a96 1
#define tls_stacklock (-1032)
d98 1
a98 1
#define tls_spinning (-1028)
d100 2
d103 1
a103 1
#define tls_pstack (2720)
d105 1
a105 1
#define tls_ppadding (3744)
@


1.9
log
@* Makefile.in (clean): Remove sigfe.s.
(sigfe.s): Ensure that sigfe.s will be regenerated if it does not exist.
* dll_init.cc (dll_dllcrt0): Simplify initializing tests.
* exceptions.cc (setup_handler): Detect when stub caller is either spinning or
has acquired the lock after being suspended to avoid windows problems with
suspending a win32 API call.
* cygtls.h (_cygtls::spinning): Declare new element.
* gendef: Remove unused _siglist_index and _siglist declaration.
(_sigfe): Set spinning element when potentially looping, waiting for lock.
(_sigbe): Ditto.
(_cygtls::lock): Ditto.
(_longjmp): Ditto.
* tlsoffsets.h: Regenerate.
* pinfo.cc (_pinfo::exit): Set final exit state here.  Call sigproc_terminate
if invoked with 'norecord'.  Clear any residual _cygtls stuff.
* winsup.h (exit_states): Define ES_FINAL.
* spawn.cc (spawn_guts): Don't call proc_terminate specifically when execing.
Let _pinfo::exit handle that case.
* sigproc.cc (wait_subproc): Always exit loop early when proc_loop_wait.
* init.cc (munge_threadfunc): Eliminate unused argument.
(dll_entry): Reflect above change in call to munge_threadfunc.
@
text
@d3 1
@


1.8
log
@* localtime.cc (localtime_r): Call tzset.
* Makefile.in: Make version.h/cygwin.din version check a warning since it is
not foolproof.
* cygheap.h (CYGHEAPSIZE): Bump size down.
* cygtls.h (_threadinfo::stacklock): New element.
(_threadinfo::pop): Make regparm.
(_threadinfo::lock): New function.
(_threadinfo::unlock): New function.
* cygtls.cc (_threadinfo::push): Wait for a lock on the stack before performing
the operation.
(_threadinfo::pop): Move to another file.
* cygwin.din: More SIGFE changes.
* exceptions.cc (try_to_debug): Always display messages on console.
(handle_exceptions): Unwind stack only when actually about to call sig_send.
(setup_handler): Lock stack prior to performing any operations.
* gendef (_sigfe): Ditto.
(_sigbe): Ditto.
(_threadinfo::pop): Ditto.  Move here.
* gen_tlsoffsets: Generate positive offsets.
* tlsoffsets.h: Regenerate.
@
text
@d3 1
a3 1
//; $tls::func = -3740;
d5 1
a5 1
//; $tls::saved_errno = -3736;
d7 1
a7 1
//; $tls::sa_flags = -3732;
d9 1
a9 1
//; $tls::oldmask = -3728;
d11 1
a11 1
//; $tls::newmask = -3724;
d13 1
a13 1
//; $tls::event = -3720;
d15 1
a15 1
//; $tls::errno_addr = -3716;
d17 1
a17 1
//; $tls::initialized = -3712;
d19 1
a19 1
//; $tls::sigmask = -3708;
d21 1
a21 1
//; $tls::sigwait_mask = -3704;
d23 1
a23 1
//; $tls::sigwait_info = -3700;
d25 1
a25 1
//; $tls::threadkill = -3696;
d27 1
a27 1
//; $tls::infodata = -3692;
d29 1
a29 1
//; $tls::tid = -3544;
d31 1
a31 1
//; $tls::local_clib = -3540;
d33 1
a33 1
//; $tls::locals = -2612;
d35 1
a35 1
//; $tls::prev = -1044;
d37 1
a37 1
//; $tls::next = -1040;
d39 1
a39 1
//; $tls::stackptr = -1036;
d41 1
a41 1
//; $tls::sig = -1032;
d43 1
a43 1
//; $tls::stacklock = -1028;
d45 2
d48 1
a48 1
//; $tls::pstack = 2716;
d50 1
a50 1
//; $tls::ppadding = 3740;
d53 1
a53 1
#define tls_func (-3740)
d55 1
a55 1
#define tls_saved_errno (-3736)
d57 1
a57 1
#define tls_sa_flags (-3732)
d59 1
a59 1
#define tls_oldmask (-3728)
d61 1
a61 1
#define tls_newmask (-3724)
d63 1
a63 1
#define tls_event (-3720)
d65 1
a65 1
#define tls_errno_addr (-3716)
d67 1
a67 1
#define tls_initialized (-3712)
d69 1
a69 1
#define tls_sigmask (-3708)
d71 1
a71 1
#define tls_sigwait_mask (-3704)
d73 1
a73 1
#define tls_sigwait_info (-3700)
d75 1
a75 1
#define tls_threadkill (-3696)
d77 1
a77 1
#define tls_infodata (-3692)
d79 1
a79 1
#define tls_tid (-3544)
d81 1
a81 1
#define tls_local_clib (-3540)
d83 1
a83 1
#define tls_locals (-2612)
d85 1
a85 1
#define tls_prev (-1044)
d87 1
a87 1
#define tls_next (-1040)
d89 1
a89 1
#define tls_stackptr (-1036)
d91 1
a91 1
#define tls_sig (-1032)
d93 1
a93 1
#define tls_stacklock (-1028)
d95 2
d98 1
a98 1
#define tls_pstack (2716)
d100 1
a100 1
#define tls_ppadding (3740)
@


1.7
log
@* cygtls.h (_local_storage::signamebuf): Increase size to prevent overflow on
really odd values.
@
text
@d3 42
a44 20
//; $tls::func = -3736;
//; $tls::saved_errno = -3732;
//; $tls::sa_flags = -3728;
//; $tls::oldmask = -3724;
//; $tls::newmask = -3720;
//; $tls::event = -3716;
//; $tls::errno_addr = -3712;
//; $tls::initialized = -3708;
//; $tls::sigmask = -3704;
//; $tls::sigwait_mask = -3700;
//; $tls::sigwait_info = -3696;
//; $tls::threadkill = -3692;
//; $tls::infodata = -3688;
//; $tls::tid = -3540;
//; $tls::local_clib = -3536;
//; $tls::locals = -2608;
//; $tls::prev = -1040;
//; $tls::next = -1036;
//; $tls::stackptr = -1032;
//; $tls::sig = -1028;
d46 1
d48 1
d51 42
a92 20
#define tls_func (-3736)
#define tls_saved_errno (-3732)
#define tls_sa_flags (-3728)
#define tls_oldmask (-3724)
#define tls_newmask (-3720)
#define tls_event (-3716)
#define tls_errno_addr (-3712)
#define tls_initialized (-3708)
#define tls_sigmask (-3704)
#define tls_sigwait_mask (-3700)
#define tls_sigwait_info (-3696)
#define tls_threadkill (-3692)
#define tls_infodata (-3688)
#define tls_tid (-3540)
#define tls_local_clib (-3536)
#define tls_locals (-2608)
#define tls_prev (-1040)
#define tls_next (-1036)
#define tls_stackptr (-1032)
#define tls_sig (-1028)
d94 1
d96 1
@


1.6
log
@* Makefile.in (DLL_OFILES): Add strsig.o.
* cygtls.h (_local_storage::signamebuf) New element.
* sysconf.cc (sysconf): Implement _SC_RTSIG_MAX.
* tlsoffset.h: Regenerate.
* include/limits.h (_POSIX_RTSIG_MAX): New define.
(RTSIG_MAX): Ditto.
* include/cygwin/signal.h (SIGRTMIN): New define.
(SIGRTMAX): Ditto.
(NSIG): Bump.
* strsig.cc: New file.
@
text
@d3 16
a18 16
//; $tls::func = -3724;
//; $tls::saved_errno = -3720;
//; $tls::sa_flags = -3716;
//; $tls::oldmask = -3712;
//; $tls::newmask = -3708;
//; $tls::event = -3704;
//; $tls::errno_addr = -3700;
//; $tls::initialized = -3696;
//; $tls::sigmask = -3692;
//; $tls::sigwait_mask = -3688;
//; $tls::sigwait_info = -3684;
//; $tls::threadkill = -3680;
//; $tls::infodata = -3676;
//; $tls::tid = -3528;
//; $tls::local_clib = -3524;
//; $tls::locals = -2596;
d27 16
a42 16
#define tls_func (-3724)
#define tls_saved_errno (-3720)
#define tls_sa_flags (-3716)
#define tls_oldmask (-3712)
#define tls_newmask (-3708)
#define tls_event (-3704)
#define tls_errno_addr (-3700)
#define tls_initialized (-3696)
#define tls_sigmask (-3692)
#define tls_sigwait_mask (-3688)
#define tls_sigwait_info (-3684)
#define tls_threadkill (-3680)
#define tls_infodata (-3676)
#define tls_tid (-3528)
#define tls_local_clib (-3524)
#define tls_locals (-2596)
@


1.5
log
@* cygwin/include/signal.h: Add copyright notice.
* cygwin.din: Make clock SIGFE.  Add clock_gettime, sigwaitinfo, timer_create,
timer_delete, timer_settime.
* include/cygwin/version.h: Reflect above additions.
* fork.cc (fork_child): Call fixup_timers_after_fork.
* signal.cc (sigwait): Remove unused variable.
* timer.cc: New file.
(clock_gettime): Define new function.
(timer_tracker): Define new struct used by timer functions.
(timer_tracker::timer_tracker): New function.
(to_us): New function.
(timer_thread): New function.
(timer_tracker::settime): New function.
(timer_create): New function.
(timer_settime): New function.
(timer_delete): New function.
(fixup_timers_after_fork): New function.
* cygthread.cc: Bump thread count.
* signal.cc (sigwaitinfo): Define new function.
(sigwait): Redefine based on sigwaitinfo.
* include/cygwin/signal.h (sigwaitinfo): Declare.
(sigwait): Ditto.
* dtable.cc (dtable::vfork_parent_restore): Avoid double close of ctty when
ctty == ctty_on_hold.
* cygtls.h (_threadinfo::threadkill): New element.
(_threadinfo::set_threadkill): Declare new function.
(_threadinfo::reset_threadkill): Declare new function.
* dcrt0.cc (dcrt0_1): Call here so that it will be possible to attach to
running process with #(*& Windows Me/9x.
(initial_env): Try to initialize strace if uninitialized.
* gendef: Don't zero signal if threadkill is set since that will happen in the
called function.
* signal.cc (sigwait): Ensure cleanup in error conditions.
* sigproc.cc (sig_send): Clear packet mask storage.
(wait_subproc): Fill in child exit code in siginfo_t structure.
* thread.cc (pthread_kill): Set threadkill flag.
* tlsoffsets.h: Regenerate.  Throughout, use siginfo_t to fill out all signal
information for "kernel" signals.
* cygtls.h (_threadinfo::set_siginfo): Declare new function.
* cygtls.cc (_threadinfo::set_siginfo): Define new function.
* dcrt0.cc (do_exit): Accommodate siginfo_t considerations.
* exceptions.cc (handle_exceptions): Ditto.
(sig_handle_tty_stop): Ditto.
(ctrl_c_handler): Use killsys() to send signal.
(sigpacket::process): Rename from sig_handle.  Use siginfo_t field from
sigpacket for everything.
(tty_min::kill_pgrp): Accommodate siginfo_t considerations.
(fhandler_termios::bg_check): Ditto.
* fhandler_tty.cc (fhandler_tty_slave::ioctl): Use killsys() to send signal.
* signal.cc (kill_worker): Rewrite to use siginfo_t second argument.
(kill_pgrp): Ditto.
(kill0): Define new function pulled from kill().
(kill): Rewrite as frontend to kill0.
(killsys): Define new function.
* sigproc.cc (sigelem): Eliminate.
(sigpacket): Move to sigproc.h.  Subsume sigelem.
(pending_signals): Use sigpacket rather than sigelem for everything.
(sig_clear): Ditto.
(wait_sig): Ditto.
(sig_send): Rewrite to use siginfo_t argument.
(sig_send): New function wratpper to sig_send with siginfo_t argument.
(wait_subproc): Accommodate siginfo_t considerations.
* thread.cc (pthread_kill): Ditto.
* sigproc.h (sigpacket): Move here.
(sigpacket::process): Declare "new" function.
(sig_handle): Eliminate declaration.
(sig_send): Declare with new paramaters.
(killsys): Declare new function.
(kill_pgrp): Declare.
* winsup.h: Move some signal-specific stuff to sigproc.h.
* include/cygwin/signal.h: Tweak some siginfo_t stuff.
@
text
@d3 16
a18 16
//; $tls::func = -3704;
//; $tls::saved_errno = -3700;
//; $tls::sa_flags = -3696;
//; $tls::oldmask = -3692;
//; $tls::newmask = -3688;
//; $tls::event = -3684;
//; $tls::errno_addr = -3680;
//; $tls::initialized = -3676;
//; $tls::sigmask = -3672;
//; $tls::sigwait_mask = -3668;
//; $tls::sigwait_info = -3664;
//; $tls::threadkill = -3660;
//; $tls::infodata = -3656;
//; $tls::tid = -3508;
//; $tls::local_clib = -3504;
//; $tls::locals = -2576;
d27 16
a42 16
#define tls_func (-3704)
#define tls_saved_errno (-3700)
#define tls_sa_flags (-3696)
#define tls_oldmask (-3692)
#define tls_newmask (-3688)
#define tls_event (-3684)
#define tls_errno_addr (-3680)
#define tls_initialized (-3676)
#define tls_sigmask (-3672)
#define tls_sigwait_mask (-3668)
#define tls_sigwait_info (-3664)
#define tls_threadkill (-3660)
#define tls_infodata (-3656)
#define tls_tid (-3508)
#define tls_local_clib (-3504)
#define tls_locals (-2576)
@


1.4
log
@* cygtls.h (_threadinfo::call): Remove regparm declaration to work around
compiler bug.
* autoload.cc (TryEnterCriticalSection): Remove.
* dcrt0.cc (dll_crt0_0): Delete inappropriate setting of _my_tls.stackptr to
NULL since it has really bad consequences.  Make 'si' an automatic variable.
* cygtls.cc (_threadinfo::init_thread): Correct thinko which caused thread list
to be allocated every time.
* cygtls.h (CYGTLS_PADSIZE): Define as const int.
* sync.h: Make multiple inclusion safe.
(muto::next): Eliminate.
(muto::exiting_thread): New variable.
(muto::set_exiting_thread): New function.
(new_muto): Change to use different section for mutos since c++ give
inexplicable warning in some cases otherwise.
(new_muto1): Ditto.
* dcrt0.cc (do_exit): Call muto::set_exiting_thread here.
* sync.cc (muto_start): Eliminate.
(muto::acquire): Always give exiting thread a lock.  Never give thread a lock
if exiting.
(muto::release): Ditto for releasing.
* dtable.cc (dtable::init_lock): Unline function and define here.
* dtable.h (lock_cs): Define as a muto since critical sections seem to work
oddly on Windows Me.
(lock): Accommodate switch to muto.
(unlock): Ditto.
* exceptions.cc (setup_handler): Don't worry about acquiring mutos since that
hasn't mattered for a long time.
(signal_exit): Ditto: muto stuff will be handled automatically on exit now.
* Makefile.in (DLL_IMPORTS): Link advapi32 to ensure proper DLL initialization.
* autoload.cc (RegCloseKey): Arbitrarily choose this function as a "seed" to
pull the advapi32 link library in.  So, comment out the autoloading.
* cygtls.cc (_threadinfo::init_thread): Just clear CYGTLS_PADSIZE.
(_threadinfo::remove): Add debugging.
(_threadinfo::find_tls): Ditto.
* cygtls.h (_threadinfo::padding): Make zero length (for now?).
* dcrt0.cc (dll_crt0_0): Move more initialization here from dll_crt0_1.
(dll_crt0_1): See above.
* dtable.h (dtable::lock): Remove commented out critical section locking.
* dtable.h (dtable::init_lock): Remove commented out critical section locking.
* dtable.h (dtable::unlock): Remove commented out critical section locking.
* exceptions.cc (interruptible): bool'ize.
* init.cc (threadfunc_fe): Revert to storing threadfunc at stack bottom.
(munge_threadfunc): Ditto.  Avoid adding overhead to calibration_thread.
(prime_threads): Don't initialize tls stuff.
(dll_entry): Make minor change to initialization order.
* tlsoffsets.h: Regenerate.
* sigproc.cc (wait_sig): Add sanity check for end of process thread exit.
* select.h: Make minor formatting change.
* Makefile.in: Add still more -fomit-frame-pointer functions.
* dtable.h (dtable::lock): New function.
(dtable::unlock): New function.
(dtable::init_lock): New function.
* cygheap.h (HEAP_TLS): Declare new enum value.
(init_cygheap::threadlist): Declare new array.
(init_cygheap::sthreads): Declare new variable.
(cygheap_fdmanip::~cygheap_fdmanip): Use new dtable lock/unlock functions.
(cygheap_fdnew::cygheap_fdnew): Ditto.
(cygheap_fdget::cygheap_fdget): Ditto.
* dtable.cc (dtable_init): Initialize fdtab critical section.
(dtable::fixup_after_fork): Ditto.
(dtable::fixup_after_exec): Ditto.
(dtable::dup2): Use lock/unlock calls to protect access to fdtab.
(dtable::find_fifo): Ditto.
(dtable::fixup_before_fork): Ditto.
(dtable::fixup_before_exec): Ditto.
(dtable::set_file_pointers_for_exec): Ditto.
(dtable::vfork_child_dup): Ditto.
(dtable::vfork_parent_restore): Ditto.
* syscalls.cc (close_all_files): Ditto.
* sync.h (muto::acquired): Declare new function.
(new_muto1): Declare new macro used to specify name of muto storage.
* sync.cc (muto::acquired): Define new function.
* cygthread.cc (cygthread::stub): Remove signal chain removal call since it is
handled during initialization now.
* cygthread.cc (cygthread::simplestub): Remove signal chain removal call since
it is handled during initialization now.
* cygtls.cc (sentry): New class used for locking.  Use throughout.
(_threadinfo::reset_exception): Don't pop stack.
(_threadinfo::find_tls): Move from exceptions.cc.
(_threadinfo::init_thread): Initialize array of threads rather than linked
list.  Take second argument indicating thread function for this thread.
(_threadinfo::remove): Search thread array rather than linked list.  Use sentry
to lock.  Only unlock if we got the lock.
(_threadinfo::find_tls): Ditto for first two.
(handle_threadlist_exception): Handle exceptions when manipulating the thread
list in case of premature thread termination.
(_threadinfo::init_threadlist_exceptions): Ditto.
* cygtls.h (TLS_STACK_SIZE): Decrease size.
(_threadinfo::padding): Add element to avoid overwriting lower part of stack.
(_threadinfo::remove): Add a "wait" argument to control how long we wait for a
lock before removing.
* exceptions.cc (init_exception_handler): Make global.  Take argument to
control exception handler being set.
(ctrl_c_handler): Wait forever when removing self from signal chain.
(_threadinfo::find_tls): Move to cygtls.cc.
(sig_handle): Reorganize detection for thread-specific signals.
* heap.cc (heap_init): Rework slightly.  Make fatal error more verbose.  Remove
malloc initialization since it can't happen during dll attach.
* init.cc (search_for): Move address to search for on stack here.
(threadfunc_ix): Ditto for stack offset.  Make shared so that stack walk
potentially only has to be done once when cygwin processes are running.
(threadfunc_fe): Use standard tls to store thread function (may change back
later).
(calibration_thread): New function.  Potentially called to find threadfunc_ix.
(munge_threadfunc): Search for "search_for" value on stack.  Output warning
when thread func not found on stack.  Use standard tls to store thread
function.
(prime_threads): New function.  Called to prime thread front end.
(dll_entry): Call dll_crt0_0 here when DLL_PROCESS_ATTACH.  Call prime_threads
here.  Try to remove thread from signal list here.
* sigproc.cc (wait_sig): Initialize threadlist exception stuff here.
* thread.cc (pthread::exit): Pass argument to signal list remove function.
* thread.h: Remove obsolete *ResourceLock defines.
* tlsoffsets.h: Regenerate.
* winsup.h (spf): Define temporary debug macro to be deleted later.
* dcrt0.cc (dll_crt0_0): New function, called during DLL initialization.
Mainly consists of code pulled from dll_crt0_1.
(dll_crt0_1): See above.
(_dll_crt0): Wait for initial calibration thread to complete, if appropriate.
Move some stuff to dll_crt0_0.
(initialize_main_tls): Accommodate argument change to
_thread_info::init_thread.
* fork.cc (fork_child): Ditto.
(sync_with_child): Fix debug message.
* external.cc (cygwin_internal): Remove special considerations for
uninitialized dll since initialization happens during dll attach now.
* dlfcn.cc (dlopen): Remove obsolete *ResourceLock calls.
(dlclose): Ditto.
* cygheap.h (init_cygheap::close_ctty): Declare new function.
* cygheap.cc (init_cygheap::close_ctty): Define new function.
* syscalls.cc (close_all_files): Use close_ctty.
(setsid): Ditto.
* cygthread.cc (cygthread::stub): Remove exception initialization.
* cygthread.cc (cygthread::stub): Remove exception initialization.
(cygthread::simplestub): Ditto.
* thread.cc (pthread::thread_init_wrapper): Ditto.
* cygtls.cc (_last_thread): Make static.
(_threadinfo::call2): Initialize exception handler here.
(_threadinfo::find_tls): Move here.
* exceptions.cc (_threadinfo::find_tls): Move.
* dcrt0.cc (__api_fatal): Add prefix info to message here rather than including
it in every call to function.
* winsup.h (api_fatal): Accommodate above change.
* debug.cc (add_handle): Don't do anything if cygheap not around.
(mark_closed): Ditto.
* dll_init.cc (dll_list::detach): Fix debug output.
* fork.cc (sync_with_child): Ditto.
(vfork): Improve debug output.
* heap.cc (heap_init): Ditto.
* exceptions.cc (try_to_debug): Clarify message when debugger attaches.
@
text
@d3 13
a15 12
//; $tls::func = -4076;
//; $tls::saved_errno = -4072;
//; $tls::sa_flags = -4068;
//; $tls::oldmask = -4064;
//; $tls::newmask = -4060;
//; $tls::event = -4056;
//; $tls::errno_addr = -4052;
//; $tls::initialized = -4048;
//; $tls::sigmask = -4044;
//; $tls::sigwait_mask = -4040;
//; $tls::sigwait_info = -4036;
//; $tls::infodata = -4032;
d27 13
a39 12
#define tls_func (-4076)
#define tls_saved_errno (-4072)
#define tls_sa_flags (-4068)
#define tls_oldmask (-4064)
#define tls_newmask (-4060)
#define tls_event (-4056)
#define tls_errno_addr (-4052)
#define tls_initialized (-4048)
#define tls_sigmask (-4044)
#define tls_sigwait_mask (-4040)
#define tls_sigwait_info (-4036)
#define tls_infodata (-4032)
@


1.3
log
@* cygtls.h (_threadinfo::stack): Increase stack size to accommodate nested
signal handlers.  Reorganize to cause potential SEGV on stack overflow.
* sigproc.cc (no_signals_available): Check sendsig value rather than relying on
obsolete sig_loop_wait.
(sigproc_terminate): Ditto.
(proc_can_be_signalled): Check sendsig value even for myself.
* tlsoffsets.h: Regenerate.
@
text
@d3 21
a23 20
//; $tls::func = -7148;
//; $tls::saved_errno = -7144;
//; $tls::sa_flags = -7140;
//; $tls::oldmask = -7136;
//; $tls::newmask = -7132;
//; $tls::event = -7128;
//; $tls::errno_addr = -7124;
//; $tls::initialized = -7120;
//; $tls::sigmask = -7116;
//; $tls::sigwait_mask = -7112;
//; $tls::sigwait_info = -7108;
//; $tls::infodata = -7104;
//; $tls::tid = -6580;
//; $tls::local_clib = -6576;
//; $tls::locals = -5648;
//; $tls::prev = -4112;
//; $tls::next = -4108;
//; $tls::stackptr = -4104;
//; $tls::sig = -4100;
//; $tls::stack = -4096;
d26 21
a46 20
#define tls_func (-7148)
#define tls_saved_errno (-7144)
#define tls_sa_flags (-7140)
#define tls_oldmask (-7136)
#define tls_newmask (-7132)
#define tls_event (-7128)
#define tls_errno_addr (-7124)
#define tls_initialized (-7120)
#define tls_sigmask (-7116)
#define tls_sigwait_mask (-7112)
#define tls_sigwait_info (-7108)
#define tls_infodata (-7104)
#define tls_tid (-6580)
#define tls_local_clib (-6576)
#define tls_locals (-5648)
#define tls_prev (-4112)
#define tls_next (-4108)
#define tls_stackptr (-4104)
#define tls_sig (-4100)
#define tls_stack (-4096)
@


1.3.2.1
log
@* Makefile.in: Add still more -fomit-frame-pointer functions.
* dtable.h (dtable::lock): New function.
(dtable::unlock): New function.
(dtable::init_lock): New function.
* cygheap.h (HEAP_TLS): Declare new enum value.
(init_cygheap::threadlist): Declare new array.
(init_cygheap::sthreads): Declare new variable.
(cygheap_fdmanip::~cygheap_fdmanip): Use new dtable lock/unlock functions.
(cygheap_fdnew::cygheap_fdnew): Ditto.
(cygheap_fdget::cygheap_fdget): Ditto.
* dtable.cc (dtable_init): Initialize fdtab critical section.
(dtable::fixup_after_fork): Ditto.
(dtable::fixup_after_exec): Ditto.
(dtable::dup2): Use lock/unlock calls to protect access to fdtab.
(dtable::find_fifo): Ditto.
(dtable::fixup_before_fork): Ditto.
(dtable::fixup_before_exec): Ditto.
(dtable::set_file_pointers_for_exec): Ditto.
(dtable::vfork_child_dup): Ditto.
(dtable::vfork_parent_restore): Ditto.
* syscalls.cc (close_all_files): Ditto.
* sync.h (muto::acquired): Declare new function.
(new_muto1): Declare new macro used to specify name of muto storage.
* sync.cc (muto::acquired): Define new function.
* cygthread.cc (cygthread::stub): Remove signal chain removal call since it is
handled during initialization now.
* cygthread.cc (cygthread::simplestub): Remove signal chain removal call since
it is handled during initialization now.
* cygtls.cc (sentry): New class used for locking.  Use throughout.
(_threadinfo::reset_exception): Don't pop stack.
(_threadinfo::find_tls): Move from exceptions.cc.
(_threadinfo::init_thread): Initialize array of threads rather than linked
list.  Take second argument indicating thread function for this thread.
(_threadinfo::remove): Search thread array rather than linked list.  Use sentry
to lock.  Only unlock if we got the lock.
(_threadinfo::find_tls): Ditto for first two.
(handle_threadlist_exception): Handle exceptions when manipulating the thread
list in case of premature thread termination.
(_threadinfo::init_threadlist_exceptions): Ditto.
* cygtls.h (TLS_STACK_SIZE): Decrease size.
(_threadinfo::padding): Add element to avoid overwriting lower part of stack.
(_threadinfo::remove): Add a "wait" argument to control how long we wait for a
lock before removing.
* exceptions.cc (init_exception_handler): Make global.  Take argument to
control exception handler being set.
(ctrl_c_handler): Wait forever when removing self from signal chain.
(_threadinfo::find_tls): Move to cygtls.cc.
(sig_handle): Reorganize detection for thread-specific signals.
* heap.cc (heap_init): Rework slightly.  Make fatal error more verbose.  Remove
malloc initialization since it can't happen during dll attach.
* init.cc (search_for): Move address to search for on stack here.
(threadfunc_ix): Ditto for stack offset.  Make shared so that stack walk
potentially only has to be done once when cygwin processes are running.
(threadfunc_fe): Use standard tls to store thread function (may change back
later).
(calibration_thread): New function.  Potentially called to find threadfunc_ix.
(munge_threadfunc): Search for "search_for" value on stack.  Output warning
when thread func not found on stack.  Use standard tls to store thread
function.
(prime_threads): New function.  Called to prime thread front end.
(dll_entry): Call dll_crt0_0 here when DLL_PROCESS_ATTACH.  Call prime_threads
here.  Try to remove thread from signal list here.
* sigproc.cc (wait_sig): Initialize threadlist exception stuff here.
* thread.cc (pthread::exit): Pass argument to signal list remove function.
* thread.h: Remove obsolete *ResourceLock defines.
* tlsoffsets.h: Regenerate.
* winsup.h (spf): Define temporary debug macro to be deleted later.
* dcrt0.cc (dll_crt0_0): New function, called during DLL initialization.
Mainly consists of code pulled from dll_crt0_1.
(dll_crt0_1): See above.
(_dll_crt0): Wait for initial calibration thread to complete, if appropriate.
Move some stuff to dll_crt0_0.
(initialize_main_tls): Accommodate argument change to
_thread_info::init_thread.
* fork.cc (fork_child): Ditto.
(sync_with_child): Fix debug message.
* external.cc (cygwin_internal): Remove special considerations for
uninitialized dll since initialization happens during dll attach now.
* dlfcn.cc (dlopen): Remove obsolete *ResourceLock calls.
(dlclose): Ditto.
* cygheap.h (init_cygheap::close_ctty): Declare new function.
* cygheap.cc (init_cygheap::close_ctty): Define new function.
* syscalls.cc (close_all_files): Use close_ctty.
(setsid): Ditto.
* cygthread.cc (cygthread::stub): Remove exception initialization.
* cygthread.cc (cygthread::stub): Remove exception initialization.
(cygthread::simplestub): Ditto.
* thread.cc (pthread::thread_init_wrapper): Ditto.
* cygtls.cc (_last_thread): Make static.
(_threadinfo::call2): Initialize exception handler here.
(_threadinfo::find_tls): Move here.
* exceptions.cc (_threadinfo::find_tls): Move.
* dcrt0.cc (__api_fatal): Add prefix info to message here rather than including
it in every call to function.
* winsup.h (api_fatal): Accommodate above change.
* debug.cc (add_handle): Don't do anything if cygheap not around.
(mark_closed): Ditto.
* dll_init.cc (dll_list::detach): Fix debug output.
* fork.cc (sync_with_child): Ditto.
(vfork): Improve debug output.
* heap.cc (heap_init): Ditto.
* exceptions.cc (try_to_debug): Clarify message when debugger attaches.
@
text
@d3 20
a22 21
//; $tls::func = -5100;
//; $tls::saved_errno = -5096;
//; $tls::sa_flags = -5092;
//; $tls::oldmask = -5088;
//; $tls::newmask = -5084;
//; $tls::event = -5080;
//; $tls::errno_addr = -5076;
//; $tls::initialized = -5072;
//; $tls::sigmask = -5068;
//; $tls::sigwait_mask = -5064;
//; $tls::sigwait_info = -5060;
//; $tls::infodata = -5056;
//; $tls::tid = -4532;
//; $tls::local_clib = -4528;
//; $tls::locals = -3600;
//; $tls::prev = -2064;
//; $tls::next = -2060;
//; $tls::stackptr = -2056;
//; $tls::sig = -2052;
//; $tls::stack = -2048;
//; $tls::padding = -1024;
d25 20
a44 21
#define tls_func (-5100)
#define tls_saved_errno (-5096)
#define tls_sa_flags (-5092)
#define tls_oldmask (-5088)
#define tls_newmask (-5084)
#define tls_event (-5080)
#define tls_errno_addr (-5076)
#define tls_initialized (-5072)
#define tls_sigmask (-5068)
#define tls_sigwait_mask (-5064)
#define tls_sigwait_info (-5060)
#define tls_infodata (-5056)
#define tls_tid (-4532)
#define tls_local_clib (-4528)
#define tls_locals (-3600)
#define tls_prev (-2064)
#define tls_next (-2060)
#define tls_stackptr (-2056)
#define tls_sig (-2052)
#define tls_stack (-2048)
#define tls_padding (-1024)
@


1.3.2.2
log
@* Makefile.in (DLL_IMPORTS): Link advapi32 to ensure proper DLL initialization.
* autoload.cc (RegCloseKey): Arbitrarily choose this function as a "seed" to
pull the advapi32 link library in.  So, comment out the autoloading.
* cygtls.cc (_threadinfo::init_thread): Just clear CYGTLS_PADSIZE.
(_threadinfo::remove): Add debugging.
(_threadinfo::find_tls): Ditto.
* cygtls.h (_threadinfo::padding): Make zero length (for now?).
* dcrt0.cc (dll_crt0_0): Move more initialization here from dll_crt0_1.
(dll_crt0_1): See above.
* dtable.h (dtable::lock): Remove commented out critical section locking.
* dtable.h (dtable::init_lock): Remove commented out critical section locking.
* dtable.h (dtable::unlock): Remove commented out critical section locking.
* exceptions.cc (interruptible): bool'ize.
* init.cc (threadfunc_fe): Revert to storing threadfunc at stack bottom.
(munge_threadfunc): Ditto.  Avoid adding overhead to calibration_thread.
(prime_threads): Don't initialize tls stuff.
(dll_entry): Make minor change to initialization order.
* tlsoffsets.h: Regenerate.
* sigproc.cc (wait_sig): Add sanity check for end of process thread exit.
* select.h: Make minor formatting change.
@
text
@d3 21
a23 21
//; $tls::func = -4076;
//; $tls::saved_errno = -4072;
//; $tls::sa_flags = -4068;
//; $tls::oldmask = -4064;
//; $tls::newmask = -4060;
//; $tls::event = -4056;
//; $tls::errno_addr = -4052;
//; $tls::initialized = -4048;
//; $tls::sigmask = -4044;
//; $tls::sigwait_mask = -4040;
//; $tls::sigwait_info = -4036;
//; $tls::infodata = -4032;
//; $tls::tid = -3508;
//; $tls::local_clib = -3504;
//; $tls::locals = -2576;
//; $tls::prev = -1040;
//; $tls::next = -1036;
//; $tls::stackptr = -1032;
//; $tls::sig = -1028;
//; $tls::stack = -1024;
//; $tls::padding = 0;
d26 21
a46 21
#define tls_func (-4076)
#define tls_saved_errno (-4072)
#define tls_sa_flags (-4068)
#define tls_oldmask (-4064)
#define tls_newmask (-4060)
#define tls_event (-4056)
#define tls_errno_addr (-4052)
#define tls_initialized (-4048)
#define tls_sigmask (-4044)
#define tls_sigwait_mask (-4040)
#define tls_sigwait_info (-4036)
#define tls_infodata (-4032)
#define tls_tid (-3508)
#define tls_local_clib (-3504)
#define tls_locals (-2576)
#define tls_prev (-1040)
#define tls_next (-1036)
#define tls_stackptr (-1032)
#define tls_sig (-1028)
#define tls_stack (-1024)
#define tls_padding (0)
@


1.3.2.3
log
@* cygtls.h (_threadinfo::threadkill): New element.
(_threadinfo::set_threadkill): Declare new function.
(_threadinfo::reset_threadkill): Declare new function.
* dcrt0.cc (dcrt0_1): Call here so that it will be possible to attach to
running process with #(*& Windows Me/9x.
(initial_env): Try to initialize strace if uninitialized.
* gendef: Don't zero signal if threadkill is set since that will happen in the
called function.
* signal.cc (sigwait): Ensure cleanup in error conditions.
* sigproc.cc (sig_send): Clear packet mask storage.
(wait_subproc): Fill in child exit code in siginfo_t structure.
* thread.cc (pthread_kill): Set threadkill flag.
* tlsoffsets.h: Regenerate.  Throughout, use siginfo_t to fill out all signal
information for "kernel" signals.
* cygtls.h (_threadinfo::set_siginfo): Declare new function.
* cygtls.cc (_threadinfo::set_siginfo): Define new function.
* dcrt0.cc (do_exit): Accommodate siginfo_t considerations.
* exceptions.cc (handle_exceptions): Ditto.
(sig_handle_tty_stop): Ditto.
(ctrl_c_handler): Use killsys() to send signal.
(sigpacket::process): Rename from sig_handle.  Use siginfo_t field from
sigpacket for everything.
(tty_min::kill_pgrp): Accommodate siginfo_t considerations.
(fhandler_termios::bg_check): Ditto.
* fhandler_tty.cc (fhandler_tty_slave::ioctl): Use killsys() to send signal.
* signal.cc (kill_worker): Rewrite to use siginfo_t second argument.
(kill_pgrp): Ditto.
(kill0): Define new function pulled from kill().
(kill): Rewrite as frontend to kill0.
(killsys): Define new function.
* sigproc.cc (sigelem): Eliminate.
(sigpacket): Move to sigproc.h.  Subsume sigelem.
(pending_signals): Use sigpacket rather than sigelem for everything.
(sig_clear): Ditto.
(wait_sig): Ditto.
(sig_send): Rewrite to use siginfo_t argument.
(sig_send): New function wratpper to sig_send with siginfo_t argument.
(wait_subproc): Accommodate siginfo_t considerations.
* thread.cc (pthread_kill): Ditto.
* sigproc.h (sigpacket): Move here.
(sigpacket::process): Declare "new" function.
(sig_handle): Eliminate declaration.
(sig_send): Declare with new paramaters.
(killsys): Declare new function.
(kill_pgrp): Declare.
* winsup.h: Move some signal-specific stuff to sigproc.h.
* include/cygwin/signal.h: Tweak some siginfo_t stuff.
* fhandler_console.cc (fhandler_console::close): Remove obsolete test for
vfork_cleanup.
* pipe.cc (fhandler_pipe::close): Add comment.
* cygheap.cc (init_cygheap::close_ctty): Don't NULL ctty if it is still active.
* dtable.cc (dtable::vfork_parent_restore): Store ctty_on_hold prior to calling
close_all_files since it will be zeroed.
@
text
@d3 12
a14 13
//; $tls::func = -3704;
//; $tls::saved_errno = -3700;
//; $tls::sa_flags = -3696;
//; $tls::oldmask = -3692;
//; $tls::newmask = -3688;
//; $tls::event = -3684;
//; $tls::errno_addr = -3680;
//; $tls::initialized = -3676;
//; $tls::sigmask = -3672;
//; $tls::sigwait_mask = -3668;
//; $tls::sigwait_info = -3664;
//; $tls::threadkill = -3660;
//; $tls::infodata = -3656;
d26 12
a37 13
#define tls_func (-3704)
#define tls_saved_errno (-3700)
#define tls_sa_flags (-3696)
#define tls_oldmask (-3692)
#define tls_newmask (-3688)
#define tls_event (-3684)
#define tls_errno_addr (-3680)
#define tls_initialized (-3676)
#define tls_sigmask (-3672)
#define tls_sigwait_mask (-3668)
#define tls_sigwait_info (-3664)
#define tls_threadkill (-3660)
#define tls_infodata (-3656)
@


1.2
log
@* exceptions.cc (set_signal_mask): Redefine to not pass by address.  Report
calculated mask in debugging output.
* sigproc.h (set_signal_mask): Reflect above change in declaration.
* path.cc (mount_item::build_win32): Take path apart before feeding it to
fnmunge.  Throughout, change use of _reent_winsup()-> to _my_tls.locals.
instead.  Throughout, remove obsolete MT_SAFE/_CYG_THREAD_FAILSAFE
considerations.  Througout, add cygtls.h include.
* Makefile.in (DLL_OFILES): Add cygtls.o.  Add some more objects to the
-fomit-frame-pointer list.
* acconfig.h: Remove obsolete settings.
* config.h.in: Ditto.
* bsdlib.cc: Add cygtls.h include.
* configure.in: Remove --enable-extra-threadsafe-checking.
* configure: Regenerate.
* cygtls.h (_local_storage): New struct renamed from _winsup_t (sic).
(_threadinfo:local_clib): Add new field.
(_threadinfo::locals): Ditto.
(_threadinfo::init_thread): Accept second _reent * argument.
(_threadinfo::call): Define as regparm.
(CYGTLS_PADSIZE): Remove unnecessary slop.
(_getreent): Define as a macro.
* thread.h: Remove _CYG_THREAD_FAILSAFE and MT_SAFE stuff.
(_winsup_t): Move to cygtls.h.
(ResourceLocks::ResourceLocks): Eliminate empty constructor.
(MTinterface::reents): Eliminate.
(MTinterface::thread_self_key): Eliminate.
(MTinterface::MTinterface): Eliminate.
* dcrt0.cc: Include stdio.h for _impure_ptr initialization.
(do_global_ctors): Remove run_ctors_p (sic) considerations.  Don't call atexit
here.
(__main): Initialize destructors for user here.
(dll_crt0_1): Accept a dummy argument.  Don't call init_thread here.  Don't set
_impure_ptr here.  Call do_global_ctors after more things have been
initialized.
(_dll_crt0): Define zeros buffer as max of needed size of CYGTLS_PADSIZE so
that it can be used for two purposes while minimizing stack usage.  Initialize
_impure_ptr specifically, for speed.  Call dll_crt0_1 with buffer argument.
(cygwin_dll_init): Call dll_crt0_1 with dummy argument.
* dtable.cc (dtable::find_unused_handle): Remove call to AssertResourceOwner.
* exceptions.cc: Move _threadinfo stuff to new file.
* cygtls.cc: New file.
* gentls_offsets: Accommodate increasing complexity of cygtls.h.
* hires.h (hires_base::~hires_base): Remove.
* init.cc (dll_entry): Remove setting of reents.
* thread.cc: Remove syslog.h include.
(__getreent): Simplify to use _my_tls.
(_reent_winsup): Delete.
(AssertResourceOwner): Delete.
(MTinterface::Init): Remove setting of _clib and _winsup, with all that
entails.
(MTinterface::fixup_after_fork): Ditto.
(pthread::thread_init_wrapper): Ditto.  Also remove call to
set_tls_self_pointer.
(pthread::set_tls_self_pointer): Eliminate.
(pthread::get_tls_self_pointer): Just return _my_tls.tid;
(__reent_t::init_clib): Eliminate.
* tlsoffsets.h: Regenerate.
@
text
@d3 20
a22 20
//; $tls::func = -3084;
//; $tls::saved_errno = -3080;
//; $tls::sa_flags = -3076;
//; $tls::oldmask = -3072;
//; $tls::newmask = -3068;
//; $tls::event = -3064;
//; $tls::errno_addr = -3060;
//; $tls::initialized = -3056;
//; $tls::sigmask = -3052;
//; $tls::sigwait_mask = -3048;
//; $tls::sigwait_info = -3044;
//; $tls::infodata = -3040;
//; $tls::tid = -2516;
//; $tls::local_clib = -2512;
//; $tls::locals = -1584;
//; $tls::prev = -48;
//; $tls::next = -44;
//; $tls::stack = -40;
//; $tls::sig = -8;
//; $tls::stackptr = -4;
d25 20
a44 20
#define tls_func (-3084)
#define tls_saved_errno (-3080)
#define tls_sa_flags (-3076)
#define tls_oldmask (-3072)
#define tls_newmask (-3068)
#define tls_event (-3064)
#define tls_errno_addr (-3060)
#define tls_initialized (-3056)
#define tls_sigmask (-3052)
#define tls_sigwait_mask (-3048)
#define tls_sigwait_info (-3044)
#define tls_infodata (-3040)
#define tls_tid (-2516)
#define tls_local_clib (-2512)
#define tls_locals (-1584)
#define tls_prev (-48)
#define tls_next (-44)
#define tls_stack (-40)
#define tls_sig (-8)
#define tls_stackptr (-4)
@


1.1
log
@* include/cygwin/signal.h: New file.
(also check in tlsoffsets.h, missed by previous checkin)
@
text
@d3 15
a17 13
//; $tls::func = -620;
//; $tls::saved_errno = -616;
//; $tls::sa_flags = -612;
//; $tls::oldmask = -608;
//; $tls::newmask = -604;
//; $tls::event = -600;
//; $tls::errno_addr = -596;
//; $tls::initialized = -592;
//; $tls::sigmask = -588;
//; $tls::sigwait_mask = -584;
//; $tls::sigwait_info = -580;
//; $tls::infodata = -576;
//; $tls::tid = -52;
d25 15
a39 13
#define tls_func (-620)
#define tls_saved_errno (-616)
#define tls_sa_flags (-612)
#define tls_oldmask (-608)
#define tls_newmask (-604)
#define tls_event (-600)
#define tls_errno_addr (-596)
#define tls_initialized (-592)
#define tls_sigmask (-588)
#define tls_sigwait_mask (-584)
#define tls_sigwait_info (-580)
#define tls_infodata (-576)
#define tls_tid (-52)
@

