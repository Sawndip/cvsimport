head	1.14;
access;
symbols
	cygwin-1_7_35-release:1.14
	cygwin-1_7_34-release:1.14
	cygwin-1_7_33-release:1.14
	cygwin-1_7_32-release:1.14
	cygwin-1_7_31-release:1.14
	cygwin-1_7_30-release:1.14
	cygwin-1_7_29-release:1.14
	cygwin-1_7_29-release-branchpoint:1.14.0.2
	cygwin-pre-user-db:1.14
	cygwin-1_7_28-release:1.14
	cygwin-1_7_27-release:1.14
	cygwin-1_7_26-release:1.14
	cygwin-1_7_25-release:1.14
	cygwin-1_7_24-release:1.13
	cygwin-1_7_23-release:1.13
	cygwin-1_7_22-release:1.13
	cygwin-1_7_21-release:1.13
	cygwin-1_7_20-release:1.13
	cygwin-1_7_19-release:1.13
	cygwin-64bit-postmerge:1.13
	cygwin-64bit-premerge-branch:1.12.0.12
	cygwin-64bit-premerge:1.12
	cygwin-1_7_18-release:1.12
	post-ptmalloc3:1.12.10.1
	pre-ptmalloc3:1.12.10.1
	cygwin-1_7_17-release:1.12
	cygwin-64bit-branch:1.12.0.10
	cygwin-1_7_16-release:1.12
	cygwin-1_7_15-release:1.12
	cygwin-1_7_14_2-release:1.12
	cygwin-1_7_14-release:1.12
	cygwin-1_7_12-release:1.12
	cygwin-1_7_11-release:1.12
	cygwin-1_7_10-release:1.12
	signal-rewrite:1.12.0.8
	pre-notty:1.12
	cygwin-1_7_9-release:1.12
	cv-post-1_7_9:1.12.0.6
	cygwin-1_7_8-release:1.12
	cygwin-1_7_7-release:1.12
	cygwin-1_7_5-release:1.12
	cygwin-1_7_4-release:1.12
	cygwin-1_7_3-release:1.12
	cygwin-1_7_2-release:1.12
	fifo_doover3:1.12.0.4
	cygwin-1_7_1-release:1.12
	prefifo:1.12
	cv-branch-2:1.12.0.2
	pre-ripout-set_console_state_for_spawn:1.11
	EOL_registry_mounts:1.10
	preoverlapped:1.10
	drop_9x_support_start:1.10
	cr-0x5f1:1.9.0.8
	cv-branch:1.9.0.6
	pre-ptymaster-archetype:1.9
	cr-0x3b58:1.9.0.4
	cr-0x5ef:1.9.0.2
	after-mmap-privanon-noreserve:1.9
	after-mmap-revamp:1.9
	before-mmap-revamp:1.9
	cgf-more-exit-sync:1.9
	post_wait_sig_exit:1.9
	pre_wait_sig_exit:1.9
	reparent-point:1.7
	noreparent:1.7.0.2
	cr-0x5e6:1.6.0.2;
locks; strict;
comment	@ * @;


1.14
date	2013.08.26.16.14.40;	author corinna;	state Exp;
branches;
next	1.13;

1.13
date	2013.04.23.09.44.33;	author corinna;	state Exp;
branches;
next	1.12;

1.12
date	2008.07.15.11.42.45;	author corinna;	state Exp;
branches
	1.12.10.1;
next	1.11;

1.11
date	2008.04.18.20.13.37;	author corinna;	state Exp;
branches;
next	1.10;

1.10
date	2006.07.26.15.59.39;	author corinna;	state Exp;
branches;
next	1.9;

1.9
date	2005.08.22.16.12.01;	author corinna;	state Exp;
branches;
next	1.8;

1.8
date	2005.07.05.03.16.45;	author cgf;	state Exp;
branches;
next	1.7;

1.7
date	2004.05.28.19.50.06;	author cgf;	state Exp;
branches;
next	1.6;

1.6
date	2004.04.19.19.29.10;	author corinna;	state Exp;
branches;
next	1.5;

1.5
date	2004.04.19.13.07.55;	author corinna;	state Exp;
branches;
next	1.4;

1.4
date	2004.04.13.09.04.21;	author corinna;	state Exp;
branches;
next	1.3;

1.3
date	2004.04.10.13.45.10;	author corinna;	state Exp;
branches;
next	1.2;

1.2
date	2004.04.09.20.39.19;	author corinna;	state Exp;
branches;
next	1.1;

1.1
date	2004.03.26.21.43.48;	author corinna;	state Exp;
branches;
next	;

1.12.10.1
date	2012.11.08.17.25.48;	author corinna;	state Exp;
branches;
next	;


desc
@@


1.14
log
@	* mtinfo.h (class mtinfo_part): Change type of block numbers to int64_t.
	(mtinfo_part::initialize): Ditto for nblock parameter in declaration.
	(class mtinfo_drive): Change type of block number to int64_t.  Change
	all parameters indicating a block number to int64_t in method
	declarations.
	* fhandler_tape.cc (mtinfo_part::initialize): Ditto in definition.
	(mtinfo_drive::get_pos): Ditto.  Replace low and high with a
	ULARGE_INTEGER and use it's components in call to GetTapePosition.
	Store full value in block.
	(mtinfo_drive::_set_pos): Change type of count parameter to int64_t.
	Change call to SetTapePosition accordingly.
	(mtinfo_drive::set_pos): Change type of count parameter to int64_t.
	Change local variables holding block numbers accordingly.
	(mtinfo_drive::get_status): Don't bail out early if fetching media
	parameters fails.
	(mtinfo_drive::ioctl): Add explicit cast matching receiving type in
	MTTELL and MTIOCPOS calls.
@
text
@/* mtinfo.h: Defininitions for the Cygwin tape driver class.

   Copyright 2004, 2005, 2006, 2008, 2012, 2013 Red Hat, Inc.

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */

/* Maximum number of supported partitions per drive. */
#define MAX_PARTITION_NUM	64
/* Maximum number of supported drives. */
#define MAX_DRIVE_NUM		8

/* Values for bookkeeping of the tape position relative to filemarks
   and eod/eom.  */
enum eom_val
{
  no_eof,
  eof_hit,
  eof,
  eod_hit,
  eod,
  eom_hit,
  eom
};

enum dirty_state
{
  clean,
  has_read,
  has_written,
  async_write_pending
};

enum lock_state
{
  unlocked,
  lock_error,
  auto_locked,
  locked
};

/* Partition specific information */
class mtinfo_part
{
public:
  int64_t block;	/* logical block no */
  int64_t fblock;	/* relative block no */
  int32_t file;		/* current file no */
  bool smark;		/* At setmark? */
  eom_val emark;	/* "end-of"-mark */

  void initialize (int64_t nblock = -1);
};

class mtinfo_drive
{
  int drive;
  int lasterr;
  int32_t partition;
  int64_t block;
  dirty_state dirty;
  lock_state lock;
  TAPE_GET_DRIVE_PARAMETERS _dp;
  TAPE_GET_MEDIA_PARAMETERS _mp;
  /* sizeof(OVERLAPPED) == 20 on 32 bit, 32 on 64 bit.  A drive is always
     opened exclusively by a single process, though, so instead of the
     OVERLAPPED structure, we just keep track of the pointer to the
     OVERLAPPED structure in the application's fhandler. */
  LPOVERLAPPED ov;
  struct status_flags
  {
    unsigned buffer_writes : 1;
    unsigned async_writes  : 1;
    unsigned two_fm        : 1;
    unsigned fast_eom      : 1;
    unsigned auto_lock     : 1;
    unsigned sysv          : 1;
    unsigned nowait        : 1;
  } status;
  mtinfo_part _part[MAX_PARTITION_NUM];

  inline int error (const char *str)
    {
      if (lasterr)
	debug_printf ("%s: Win32 error %d", str, lasterr);
      return lasterr;
    }
  inline bool get_feature (DWORD parm)
    {
      return ((parm & TAPE_DRIVE_HIGH_FEATURES)
	      ? ((_dp.FeaturesHigh & parm) != 0)
	      : ((_dp.FeaturesLow & parm) != 0));
    }
  int get_pos (HANDLE mt, int32_t *ppartition = NULL, int64_t *pblock = NULL);
  int _set_pos (HANDLE mt, int mode, int64_t count, int partition, BOOL dont_wait);
  int create_partitions (HANDLE mt, int32_t count);
  int set_partition (HANDLE mt, int32_t count);
  int write_marks (HANDLE mt, int marktype, DWORD count);
  int erase (HANDLE mt, int mode);
  int prepare (HANDLE mt, int action, bool is_auto = false);
  int set_compression (HANDLE mt, int32_t count);
  int set_blocksize (HANDLE mt, DWORD count);
  int get_status (HANDLE mt, struct mtget *get);
  int set_options (HANDLE mt, int32_t options);
  int async_wait (HANDLE mt, DWORD *bytes_written);

public:
  void initialize (int num, bool first_time);
  int get_dp (HANDLE mt);
  int get_mp (HANDLE mt);
  int open (HANDLE mt);
  int close (HANDLE mt, bool rewind);
  int read (HANDLE mt, LPOVERLAPPED pov, void *ptr, size_t &ulen);
  int write (HANDLE mt, LPOVERLAPPED pov, const void *ptr, size_t &len);
  int ioctl (HANDLE mt, unsigned int cmd, void *buf);
  int set_pos (HANDLE mt, int mode, int64_t count, bool sfm_func);

  IMPLEMENT_STATUS_FLAG (bool, buffer_writes)
  IMPLEMENT_STATUS_FLAG (bool, async_writes)
  IMPLEMENT_STATUS_FLAG (bool, two_fm)
  IMPLEMENT_STATUS_FLAG (bool, fast_eom)
  IMPLEMENT_STATUS_FLAG (bool, auto_lock)
  IMPLEMENT_STATUS_FLAG (bool, sysv)
  IMPLEMENT_STATUS_FLAG (bool, nowait)

  PTAPE_GET_DRIVE_PARAMETERS dp () { return &_dp; }
  PTAPE_GET_MEDIA_PARAMETERS mp () { return &_mp; }
  mtinfo_part *part (int num) { return &_part[num]; }
};

class mtinfo
{
  mtinfo_drive _drive[MAX_DRIVE_NUM];

public:
  void initialize ();
  mtinfo_drive *drive (int num) { return &_drive[num]; }
};
@


1.13
log
@	* Merge in cygwin-64bit-branch.
@
text
@d3 1
a3 1
   Copyright 2004, 2005, 2006, 2008, 2012 Red Hat, Inc.
d49 2
a50 1
  int32_t block;		/* logical block no */
a51 1
  int32_t fblock;		/* relative block no */
d55 1
a55 1
  void initialize (int32_t nblock = -1);
d63 1
a63 1
  int32_t block;
d97 2
a98 2
  int get_pos (HANDLE mt, int32_t *ppartition = NULL, int32_t *pblock = NULL);
  int _set_pos (HANDLE mt, int mode, int32_t count, int partition, BOOL dont_wait);
d119 1
a119 1
  int set_pos (HANDLE mt, int mode, int32_t count, bool sfm_func);
@


1.12
log
@	* fhandler_tape.cc (mtinfo::initialize): Remove synchronization stuff.
	Just initialize drive data.
	* mtinfo.h (MTINFO_MAGIC): Remove.
	(MTINFO_VERSION): Remove.
	(class mtinfo): Remove magic and version members.
	* shared.cc (shared_info::initialize): Move call to
	get_session_parent_dir so that the dir creation is only called once.
	Move call to mt.initialize so that it's called only by the first
	process creating the shared memory.
	* shared_info.h (SHARED_INFO_CB): Accommodate change to shared_info.
	(CURR_SHARED_MAGIC): Ditto.
	(class shared_info): Add obcaseinsensitivity member.
@
text
@d3 1
a3 1
   Copyright 2004, 2005, 2006, 2008 Red Hat, Inc.
d49 3
a51 3
  long block;		/* logical block no */
  long file;		/* current file no */
  long fblock;		/* relative block no */
d55 1
a55 1
  void initialize (long nblock = -1);
d62 2
a63 2
  long partition;
  long block;
d68 5
a72 1
  OVERLAPPED ov;
d97 4
a100 4
  int get_pos (HANDLE mt, long *ppartition = NULL, long *pblock = NULL);
  int _set_pos (HANDLE mt, int mode, long count, int partition, BOOL dont_wait);
  int create_partitions (HANDLE mt, long count);
  int set_partition (HANDLE mt, long count);
d104 2
a105 2
  int set_compression (HANDLE mt, long count);
  int set_blocksize (HANDLE mt, long count);
d107 1
a107 1
  int set_options (HANDLE mt, long options);
d116 2
a117 2
  int read (HANDLE mt, HANDLE mt_evt, void *ptr, size_t &ulen);
  int write (HANDLE mt, HANDLE mt_evt, const void *ptr, size_t &len);
d119 1
a119 1
  int set_pos (HANDLE mt, int mode, long count, bool sfm_func);
@


1.12.10.1
log
@	* cygheap.h (struct user_heap_info): Change type of chunk to SIZE_T.
	Remove unused slop member.
	* fork.cc (fork): Rename esp to stackp.  Add 64 bit asm expression to
	fetch stack pointer.
	(child_copy): Use platform independent types.
	* heap.cc (eval_start_address): Add comment. Disable 3GB code on 64 bit.
	(eval_initial_heap_size): Use platform independent types.  Fix debug
	printf format strings.
	(sbrk): Add comment.  Change argument type according to newlib
	definition.  Use platform independent types.  Drop unneeded else and
	move comment to the right spot.
	* hookapi.cc (PEHeaderFromHModule): Return PVOID.  Add comment to
	explain why.  Add bool parameter to return if target executable is
	64 bit or not.
	(rvadelta_get): New inline function to fetch section address platform
	independent.
	(rvadelta32, rvadelta64): Platform dependent wrappers.
	(rvadelta): Change to macro calling the platform dependent rvadelta
	wrappers.
	(putmem): Define platform dependent THUNK_FUNC_TYPE and use throughout.
	(RedirectIAT): Add comment.
	(get_export): Add comment.
	(find_first_notloaded_dll): Allow to fetch information in a platform
	and target independent way.
	(hook_or_detect_cygwin): Ditto.  Recognize the cyg64win1.dll file name
	as well.
	* kernel32.cc (CreateFileMappingW): Cast to avoid compiler warning.

	* fhandler.h (class fhandler_dev_tape): Replace mt_evt with an
	OVERLAPPED structure ov.
	* mtinfo.h (class mtinfo_part): Define members as int32_t rather than
	long.  Change member function declarations accordingly.
	(class mtinfo_drive): Ditto.  Store OVERLAPPED pointer rather than
	holding the full structure.  Add comment to explain why.
	* fhandler_tape.cc: Accommodate above changes throughout.
@
text
@d3 1
a3 1
   Copyright 2004, 2005, 2006, 2008, 2012 Red Hat, Inc.
d49 3
a51 3
  int32_t block;		/* logical block no */
  int32_t file;		/* current file no */
  int32_t fblock;		/* relative block no */
d55 1
a55 1
  void initialize (int32_t nblock = -1);
d62 2
a63 2
  int32_t partition;
  int32_t block;
d68 1
a68 5
  /* sizeof(OVERLAPPED) == 20 on 32 bit, 32 on 64 bit.  A drive is always
     opened exclusively by a single process, though, so instead of the
     OVERLAPPED structure, we just keep track of the pointer to the
     OVERLAPPED structure in the application's fhandler. */
  LPOVERLAPPED ov;
d93 4
a96 4
  int get_pos (HANDLE mt, int32_t *ppartition = NULL, int32_t *pblock = NULL);
  int _set_pos (HANDLE mt, int mode, int32_t count, int partition, BOOL dont_wait);
  int create_partitions (HANDLE mt, int32_t count);
  int set_partition (HANDLE mt, int32_t count);
d100 2
a101 2
  int set_compression (HANDLE mt, int32_t count);
  int set_blocksize (HANDLE mt, DWORD count);
d103 1
a103 1
  int set_options (HANDLE mt, int32_t options);
d112 2
a113 2
  int read (HANDLE mt, LPOVERLAPPED pov, void *ptr, size_t &ulen);
  int write (HANDLE mt, LPOVERLAPPED pov, const void *ptr, size_t &len);
d115 1
a115 1
  int set_pos (HANDLE mt, int mode, int32_t count, bool sfm_func);
@


1.11
log
@	* fhandler.h (-struct wsa_event): Move to wsa_event.h.  Include
	wsa_event.h instead.
	* fhandler_socket.cc (NUM_SOCKS): Move to wsa_event.h.
	(wsa_events): Move from DLL shared area to cygwin_shared shared
	memory.  Accommodate throughout.
	(socket_serial_number): Ditto.
	* fhandler_tape.cc (mt): Ditto.
	(mtinfo_init): Remove.
	(mt): Define as cygwin_shared->mt.
	* flock.cc (FLOCK_PARENT_DIR_ACCESS): Remove.
	(FLOCK_INODE_DIR_ACCESS): Move up in file.
	(FLOCK_MUTANT_ACCESS): Ditto.
	(FLOCK_EVENT_ACCESS): Ditto.
	(get_lock_parent_dir): Remove.
	(inode_t::inode_t): Call get_shared_parent_dir to get parent dir handle.
	Add a "flock-" prefix to file's lock directory name for clarity.
	* mtinfo.h (mtinfo_init): Drop declaration.
	* net.cc (last_used_bindresvport): Move from DLL shared area to
	cygwin_shared shared memory.
	(cygwin_bindresvport_sa): Accommodate above change.
	* sec_helper.cc (_everyone_sd): Move here from flock.cc.
	* security.h (SD_MIN_SIZE): Ditto.
	(everyone_sd): Ditto.
	* shared.cc (cygwin_shared_area): Remove.
	(cygwin_shared_h): New handle.
	(get_shared_parent_dir): New static function.
	(shared_name): Drop session_local argument.  Call get_shared_parent_dir
	here.  Add cygwin-shared subdir to object name.
	(offsets): Reinstantiate SH_CYGWIN_SHARED member.
	(open_shared): Revert change from 2007-03-29 for systems supporting
	SeCreateGlobalPrivilege.
	(shared_info::initialize): Call mtinfo's initialize here.
	(memory_init): Drop call to mtinfo_init.
	* shared_info.h (SHARED_INFO_CB): Accommodate change to shared_info.
	(CURR_SHARED_MAGIC): Ditto.
	(class shared_info): Add members for global socket and tape info
	sharing.
	(enum shared_locations): Reinstantiate SH_CYGWIN_SHARED.
	(get_shared_parent_dir): Declare.
	(shared_name): Drop session_local argument from declaration.
	* wsa_event.h: New file.  Move definitions of NUM_SOCKS and
	struct wsa_event here.
@
text
@d3 1
a3 1
   Copyright 2004, 2005, 2006 Red Hat, Inc.
a10 3
#define MTINFO_MAGIC		0x179b2af0
#define MTINFO_VERSION		2

a131 2
  DWORD magic;
  DWORD version;
@


1.10
log
@	* cygheap.h (struct init_cygheap): Remove shared_h and mt_h members.
	* fhandler_tape.cc (mt): Define as DLL shared area in
	.cygwin_dll_common instead of as dynamically allocated area.
	Change referencing throughout.
	* mtinfo.h (mt_h): Remove entirely.
	(mt): Remove extern declaration.
	* shared.cc (cygwin_shared_area): New global cygwin_shared
	variable located in .cygwin_dll_common.
	(offsets): Define shared region addresses descending from
	cygwin_shared_address.
	(open_shared): Replace usage of SH_CYGWIN_SHARED by SH_USER_SHARED.
	(memory_init): Set cygwin_shared just by pointing to cygwin_shared_area.
	* shared_info.h (shared_locations): Remove SH_CYGWIN_SHARED and
	SH_MTINFO.
	(cygwin_shared_address): Define as DLL start address.
	* tty.h (tty_min::tty_min): Remove constructor.
@
text
@a142 2

extern void __stdcall mtinfo_init ();
@


1.9
log
@	* mtinfo.h (mtinfo_drive::error): Fix argument bug in debug_printf call.
@
text
@d3 1
a3 1
   Copyright 2004 Red Hat, Inc.
a143 3
extern HANDLE mt_h;
extern mtinfo *mt;

@


1.8
log
@Change foo (void) to foo () for all c++ functions throughout.  Remove all
fhandler_*::dump functions throughout.
* fhandler.h (fhandler_dev_mem::close): Remove pass-through function in favor
of virtual method.
(handler_dev_raw::close): Ditto.
(fhandler_dev_clipboard::fixup_after_exec): New method.
* fhandler_dev_mem.cc (fhandler_dev_mem::close): Eliminate pass through
* fhandler_dev_raw.cc (fhandler_dev_raw::close): Ditto.
* fhandler_clipboard.cc (fhandler_dev_clipboard::close): Don't go to extra
effort when execing.
(fhandler_dev_clipboard::fixup_after_exec): New function.
* fhandler_console.cc (fhandler_console::close): Don't do "extra stuff" when we
know we're execing.
* fhandler_disk_file.cc (fhandler_disk_file::close): Ditto.
* fhandler_dsp.cc (fhandler_dev_dsp::close): Ditto.
* fhandler_fifo.cc (fhandler_fifo.cc::close): Ditto.  function in favor of base
function.
* fhandler_random.cc (fhandler_dev_random::close): Ditto.
* fhandler_registry.cc (fhandler_registry::close): Ditto.
* fhandler_tty.cc (fhandler_tty_slave::close): Ditto.
* fhandler_virtual.cc (fhandler_virtual::close): Ditto.
* pinfo.cc (proc_waiter): Remove unneeded hExeced declaration.
* sigproc.cc: Ditto.
* winsup.h (hExeced): Define here.
* fhandler_virtual.cc (fhandler_virtual::fixup_after_exec): Just call close()
to reinitialize things to known state.
@
text
@d87 1
a87 1
	debug_printf ("%s: Win32 error %d", lasterr);
@


1.7
log
@* path.cc (chdir): Always use the normalized_path as posix_cwd, except if it
starts with a drive.

Also perform whitespace cleanup.
@
text
@d128 2
a129 2
  PTAPE_GET_DRIVE_PARAMETERS dp (void) { return &_dp; }
  PTAPE_GET_MEDIA_PARAMETERS mp (void) { return &_mp; }
d140 1
a140 1
  void initialize (void);
@


1.6
log
@	* errno.cc (errmap): Handle ERROR_IO_PENDING.
	* fhandler.cc (fhandler_base::open): Make tape I/O asynchronous.
	* fhandler.h (class fhandler_dev_tape): Add mt_evt member.
	* fhandler_tape.cc (mtinfo_drive::initialize): Initialize async_writes.
	(mtinfo_drive::close): Handle async writes.
	(mtinfo_drive::read): Add mt_evt parameter.  Use overlapped I/O.
	(mtinfo_drive::async_wait): New function.
	(mtinfo_drive::write): Add mt_evt parameter.  Use overlapped I/O.
	Handle async writes.
	(mtinfo_drive::_set_pos): Handle async writes.
	(mtinfo_drive::set_partition): Ditto.
	(mtinfo_drive::prepare): Ditto.
	(mtinfo_drive::get_status): Drop useless "else".  Handle async_writes
	flag.
	(mtinfo_drive::set_options): Handle async_writes flags.
	(fhandler_dev_tape::close): Close mt_evt handle.
	(fhandler_dev_tape::raw_read): Create mt_evt handle and use in call
	to mtinfo_drive::read.
	(fhandler_dev_tape::raw_write): Create mt_evt handle and use in call
	to mtinfo_drive::write.
	* mtinfo.h (MTINFO_VERSION): Bump.
	(enum dirty_state): Add async_write_pending state.
	(class mtinfo_drive): Add OVERLAPPED struct "ov".  Add async_writes
	flag.
	(mtinfo_drive::async_wait): Add declaration.
	(mtinfo_drive::read): Add mt_evt parameter.
	(mtinfo_drive::write): Ditto.

	* registry.cc (load_registry_hive): Call enable_restore_privilege
	instead of set_process_privilege.
@
text
@d87 1
a87 1
        debug_printf ("%s: Win32 error %d", lasterr);
@


1.5
log
@	* fhandler_tape.cc (mtinfo_drive::_set_pos): Take additional dont_wait
	parameter.  Use in call to SetTapePosition.
	(mtinfo_drive::set_pos): Accomodate _set_pos calls to above change.
	(mtinfo_drive::set_partition): Ditto.
	* mtinfo.h (mtinfo_drive::_set_pos): Change declaration accordingly.
@
text
@d12 1
a12 1
#define MTINFO_VERSION		1
d36 2
a37 1
  has_written
d71 1
d75 1
d107 1
d115 2
a116 2
  int read (HANDLE mt, void *ptr, size_t &ulen);
  int write (HANDLE mt, const void *ptr, size_t &len);
d121 1
@


1.4
log
@	* winsup.h (IMPLEMENT_STATUS_FLAG): New macro to define status flag
	accessor methods unambiguously.
	* fhandler.h: Use IMPLEMENT_STATUS_FLAG throughout where possible.
	* fhandler_termios.cc (fhandler_termios::tcinit): Call corrected
	accessor for initialized status flag.
	* mtinfo.h (class mtinfo_drive): Use IMPLEMENT_STATUS_FLAG throughout.
	* path.cc (fs_info::update): Remove duplicate call to flags().
	* path.h (struct fs_info): Use IMPLEMENT_STATUS_FLAG where possible.
	(path_conv::is_auto_device): Fix spacing.
	* tty.h (class tty_min): Use IMPLEMENT_STATUS_FLAG throughout.
@
text
@d94 1
a94 1
  int _set_pos (HANDLE mt, int mode, long count, int partition);
@


1.3
log
@	* Use new unified status_flag accessor methods from classes fhandler_*,
	tty_min, mtinfo and fs_info thoroughout.
	* fhandler.h: Redefine all set_close_on_exec methods to take a bool
	argument.
	(enum conn_state): Rename from connect_state.
	(class fhandler_base): Rename some status flags to align with
	accessor method names.  Drop encoded flag entirely.  Unify status
	accessor methods.  Const'ify all read accessor methods.
	(class fhandler_socket): Ditto.
	(class fhandler_dev_raw): Ditto.
	* fhandler_disk_file.cc (fhandler_base::fstat_fs): Use fs.fs_is_fat()
	instead of evaluating FATness of file system here.
	(fhandler_disk_file::opendir): Drop call to set_encoded().
	(fhandler_disk_file::readdir): Use pc.isencoded() directly.
	* mtinfo.h (class mtinfo_drive): Const'ify all read accessor methods.
	* path.cc (fsinfo_cnt): Add.
	(fs_info::update): Accomodate class changes. Evaluate file system
	name specific flags right here. Add thread safety for reading and
	writing global fsinfo array.
	* path.h (enum path_types): Drop values for flags kept in fs already.
	(struct fs_info): Move status informatin into private struct type
	status_flags.  Add accessor methods. Remove path and file system
	name string arrays in favor of status bits.
	(class path_conv): Use new fs_info status information where
	appropriate.
	(path_conf::fs_has_ea): Rename from fs_fast_ea.
	(path_conf::fs_has_acls): New method.
	(path_conf::root_dir): Remove.
	(path_conf::volname): Remove.
	* syscalls (statfs): Evaluate root dir locally.
	* tty.h (class tty_min): Unify status accessor methods.  Const'ify
	all read accessor methods.
@
text
@d116 7
a122 12
  bool buffer_writes () const { return status.buffer_writes; }
  void buffer_writes (bool b) { status.buffer_writes = b; }
  bool two_fm () const { return status.two_fm; }
  void two_fm (bool b) { status.two_fm = b; }
  bool fast_eom () const { return status.fast_eom; }
  void fast_eom (bool b) { status.fast_eom = b; }
  bool auto_lock () const { return status.auto_lock; }
  void auto_lock (bool b) { status.auto_lock = b; }
  bool sysv () const { return status.sysv; }
  void sysv (bool b) { status.sysv = b; }
  bool nowait () const { return status.nowait; }
  void nowait (bool b) { status.nowait = b; }
@


1.2
log
@	* fhandler.h (class fhandler_dev_raw): Move status bits into protected
	bitfield struct type status_flags.  Drop unused has_written bit.
	Add accessor methods.
	(fhandler_dev_raw::clear): Remove.
	(fhandler_dev_raw::reset_devbuf): Remove.
	* fhandler_floppy.cc (fhandler_dev_floppy::lseek): Use accessor method
	for is_writing.
	* fhandler_raw.cc: Use status accessor methods throughout.
	(fhandler_dev_raw::clear): Remove.
	(fhandler_dev_raw::fhandler_dev_raw): Drop clear call.
	(fhandler_dev_raw::~fhandler_dev_raw): Ditto.
	* fhandler_tape.cc: Use mtinfo::status accessor methods throughout.
	(mtinfo_drive::close): Fix conditional to enable BSD semantics
	correctly.
	(mtinfo_drive::get_status): Rename from mtinfo_drive::status.
	* mtinfo.h (class mtinfo_drive): Move status bits into private bitfield
	struct type status_flags.  Add accessor methods.
	Rename status method to get_status.
@
text
@d116 1
d118 1
a118 1
  bool buffer_writes () { return status.buffer_writes; }
d120 1
a120 1
  bool two_fm () { return status.two_fm; }
d122 1
a122 1
  bool fast_eom () { return status.fast_eom; }
d124 1
a124 1
  bool auto_lock () { return status.auto_lock; }
d126 1
a126 1
  bool sysv () { return status.sysv; }
a127 1
  bool nowait () { return status.nowait; }
@


1.1
log
@	* errno.cc (errmap): Map ERROR_SHARING_VIOLATION to EBUSY,
	ERROR_EOM_OVERFLOW and ERROR_NO_DATA_DETECTED to EIO.  Add mappings
	for ERROR_NO_MEDIA_IN_DRIVE, ERROR_DEVICE_REQUIRES_CLEANING and
	ERROR_DEVICE_DOOR_OPEN.
	* fhandler.h (class fhandler_dev_raw): Drop varblkop member.
	(fhandler_dev_raw::is_eom): De-virtualize.
	(fhandler_dev_raw::is_eof): Ditto.
	(class fhandler_dev_tape): Drop lasterr and dp member.  Add mt_mtx
	member.  Drop all private methods formerly used by ioctl.
	(fhandler_dev_tape::is_rewind_device): Use get_minor for clarity.
	(fhandler_dev_tape::driveno): New method.
	(fhandler_dev_tape::drive_init): New method.
	(fhandler_dev_tape::clear): Remove method.
	(fhandler_dev_tape::is_eom): Ditto.
	(fhandler_dev_tape::is_eof): Ditto.
	(fhandler_dev_tape::write_file): Ditto.
	(fhandler_dev_tape::read_file): Ditto.
	(fhandler_dev_tape::_lock): New method.
	(fhandler_dev_tape::unlock): New method.
	(fhandler_dev_tape::raw_read): New method.
	(fhandler_dev_tape::raw_write): New method.
	* fhandler_raw.cc (fhandler_dev_raw::is_eom): New method.
	(fhandler_dev_raw::is_eof): New method.
	(fhandler_dev_raw::open): Allow setting write through option by
	using the O_TEXT flag as ... flag.
	(fhandler_dev_raw::writebuf): Remove usage of varblkop and other
	tape specific code.
	(fhandler_dev_raw::raw_read): Ditto.
	(fhandler_dev_raw::dup): Ditto.
	* fhandler_tape.cc: Rewrite tape operations entirely.  Implement
	new tape driver classes mtinfo, mtinfo_drive and mtinfo_part.
	Reduce fhandler_dev_tape methods to mostly just calling appropriate
	mtinfo_drive methods.
	(mtinfo_init): New function adding the mtinfo shared memory area.
	* mtinfo.h: New file, containing the definition of the new tape
	driver classes.
	* shared.cc: Include mtinfo.h.
	(offsets): Add entry for mtinfo shared memory area.
	(memory_init): Call mtinfo_init.
	* shared_info.h (shared_locations): Add SH_MTINFO shared location.
	* include/cygwin/mtio.h: Change and add various comments.  Add GMT_xxx
	macros for new generic flags.  Add MT_ST_xxx bitfield definitions
	for MTSETDRVBUFFER ioctl.
	* include/cygwin/version.h: Bump API minor version number.
@
text
@d70 9
a78 6
  bool buffer_writes;
  bool two_fm;
  bool fast_eom;
  bool auto_lock;
  bool sysv;
  bool nowait;
d102 1
a102 1
  int status (HANDLE mt, struct mtget *get);
d116 12
a127 1
  inline bool buffered_writes (void) { return buffer_writes; }
@

