head	1.44;
access;
symbols
	cygwin-1_7_35-release:1.44
	cygwin-1_7_34-release:1.41
	cygwin-1_7_33-release:1.30
	cygwin-1_7_32-release:1.30
	cygwin-1_7_31-release:1.30
	cygwin-1_7_30-release:1.30
	cygwin-1_7_29-release:1.30
	cygwin-1_7_29-release-branchpoint:1.30.0.2
	cygwin-pre-user-db:1.30
	cygwin-1_7_28-release:1.30
	cygwin-1_7_27-release:1.30
	cygwin-1_7_26-release:1.30
	cygwin-1_7_25-release:1.30
	cygwin-1_7_24-release:1.30
	cygwin-1_7_23-release:1.30
	cygwin-1_7_22-release:1.30
	cygwin-1_7_21-release:1.30
	cygwin-1_7_20-release:1.30
	cygwin-1_7_19-release:1.30
	cygwin-64bit-postmerge:1.30
	cygwin-64bit-premerge-branch:1.29.0.12
	cygwin-64bit-premerge:1.29
	cygwin-1_7_18-release:1.29
	post-ptmalloc3:1.29.10.1
	pre-ptmalloc3:1.29.10.1
	cygwin-1_7_17-release:1.29
	cygwin-64bit-branch:1.29.0.10
	cygwin-1_7_16-release:1.29
	cygwin-1_7_15-release:1.29
	cygwin-1_7_14_2-release:1.29
	cygwin-1_7_14-release:1.29
	cygwin-1_7_12-release:1.29
	cygwin-1_7_11-release:1.29
	cygwin-1_7_10-release:1.29
	signal-rewrite:1.29.0.8
	pre-notty:1.29
	cygwin-1_7_9-release:1.29
	cv-post-1_7_9:1.29.0.6
	cygwin-1_7_8-release:1.29
	cygwin-1_7_7-release:1.29
	cygwin-1_7_5-release:1.29
	cygwin-1_7_4-release:1.29
	cygwin-1_7_3-release:1.29
	cygwin-1_7_2-release:1.29
	fifo_doover3:1.29.0.4
	cygwin-1_7_1-release:1.29
	prefifo:1.29
	cv-branch-2:1.29.0.2
	pre-ripout-set_console_state_for_spawn:1.27
	EOL_registry_mounts:1.27
	preoverlapped:1.27
	drop_9x_support_start:1.27
	cr-0x5f1:1.27.0.8
	cv-branch:1.27.0.6
	pre-ptymaster-archetype:1.27
	cr-0x3b58:1.27.0.4
	cr-0x5ef:1.27.0.2
	after-mmap-privanon-noreserve:1.27
	after-mmap-revamp:1.27
	before-mmap-revamp:1.27
	cgf-more-exit-sync:1.27
	post_wait_sig_exit:1.27
	pre_wait_sig_exit:1.27
	reparent-point:1.25
	noreparent:1.25.0.10
	cr-0x5e6:1.25.0.8
	cr-0x9e:1.25.0.6
	cr-0x9d:1.25.0.4
	cgf-deleteme:1.25.0.2
	pre-sigrewrite:1.24
	corinna-01:1.24
	cr-0x9c:1.24.0.6
	cr-0x9b:1.24.0.4
	cr-0x99:1.24
	Z-emcb-cygwin_daemon:1.24.0.2
	w32api-2_2:1.21
	mingw-runtime-2_4:1.21
	pre-cgf-merge:1.24
	cgf-dev-branch:1.8.0.4
	predaemon:1.3
	cygwin_daemon_merge_HEAD:1.3
	pregp02r1:1.3.0.30
	cygnus_cvs_20020108_pre:1.3
	Z-cygwin_daemon_merge-new_HEAD:1.6
	Z-cygwin_daemon_merge_HEAD:1.6
	cygwin_daemon:1.2.0.4;
locks; strict;
comment	@ * @;


1.44
date	2015.02.24.20.52.57;	author corinna;	state Exp;
branches;
next	1.43;

1.43
date	2015.02.23.20.51.12;	author corinna;	state Exp;
branches;
next	1.42;

1.42
date	2015.02.20.15.13.46;	author corinna;	state Exp;
branches;
next	1.41;

1.41
date	2014.05.07.11.00.00;	author corinna;	state Exp;
branches;
next	1.40;

1.40
date	2014.03.12.17.36.56;	author corinna;	state Exp;
branches;
next	1.39;

1.39
date	2014.03.07.20.38.48;	author corinna;	state Exp;
branches;
next	1.38;

1.38
date	2014.02.28.11.37.02;	author corinna;	state Exp;
branches;
next	1.37;

1.37
date	2014.02.27.12.57.27;	author corinna;	state Exp;
branches;
next	1.36;

1.36
date	2014.02.22.19.38.12;	author corinna;	state Exp;
branches;
next	1.35;

1.35
date	2014.02.21.10.01.00;	author corinna;	state Exp;
branches;
next	1.34;

1.34
date	2014.02.18.19.39.48;	author corinna;	state Exp;
branches;
next	1.33;

1.33
date	2014.02.17.15.36.33;	author corinna;	state Exp;
branches;
next	1.32;

1.32
date	2014.02.11.11.51.29;	author corinna;	state Exp;
branches;
next	1.31;

1.31
date	2014.02.09.19.44.55;	author corinna;	state Exp;
branches;
next	1.30;

1.30
date	2013.04.23.09.44.33;	author corinna;	state Exp;
branches;
next	1.29;

1.29
date	2008.12.20.09.35.18;	author corinna;	state Exp;
branches
	1.29.10.1;
next	1.28;

1.28
date	2008.07.24.18.25.50;	author corinna;	state Exp;
branches;
next	1.27;

1.27
date	2005.04.05.06.04.57;	author cgf;	state Exp;
branches;
next	1.26;

1.26
date	2005.04.05.04.31.00;	author cgf;	state Exp;
branches;
next	1.25;

1.25
date	2003.12.23.16.26.30;	author cgf;	state Exp;
branches;
next	1.24;

1.24
date	2003.04.17.20.05.15;	author tpfaff;	state Exp;
branches;
next	1.23;

1.23
date	2003.04.10.05.27.34;	author cgf;	state Exp;
branches;
next	1.22;

1.22
date	2003.03.09.20.31.07;	author cgf;	state Exp;
branches;
next	1.21;

1.21
date	2003.02.04.14.58.04;	author corinna;	state Exp;
branches;
next	1.20;

1.20
date	2003.02.01.18.41.29;	author cgf;	state Exp;
branches;
next	1.19;

1.19
date	2003.01.31.17.00.42;	author cgf;	state Exp;
branches;
next	1.18;

1.18
date	2003.01.27.00.16.01;	author cgf;	state Exp;
branches;
next	1.17;

1.17
date	2003.01.26.05.38.37;	author cgf;	state Exp;
branches;
next	1.16;

1.16
date	2003.01.25.16.34.32;	author cgf;	state Exp;
branches;
next	1.15;

1.15
date	2003.01.24.03.53.46;	author cgf;	state Exp;
branches;
next	1.14;

1.14
date	2003.01.21.06.58.11;	author cgf;	state Exp;
branches;
next	1.13;

1.13
date	2003.01.21.05.07.28;	author cgf;	state Exp;
branches;
next	1.12;

1.12
date	2003.01.20.02.57.54;	author cgf;	state Exp;
branches;
next	1.11;

1.11
date	2003.01.17.18.05.32;	author cgf;	state Exp;
branches;
next	1.10;

1.10
date	2003.01.17.05.41.15;	author cgf;	state Exp;
branches;
next	1.9;

1.9
date	2003.01.17.05.18.29;	author cgf;	state Exp;
branches;
next	1.8;

1.8
date	2002.12.10.12.43.49;	author corinna;	state Exp;
branches
	1.8.4.1;
next	1.7;

1.7
date	2002.10.24.14.33.13;	author cgf;	state Exp;
branches;
next	1.6;

1.6
date	2002.08.19.11.27.18;	author corinna;	state Exp;
branches;
next	1.5;

1.5
date	2002.06.26.14.59.22;	author corinna;	state Exp;
branches;
next	1.4;

1.4
date	2002.06.05.11.10.15;	author corinna;	state Exp;
branches;
next	1.3;

1.3
date	2001.11.05.06.09.08;	author cgf;	state Exp;
branches;
next	1.2;

1.2
date	2001.09.09.21.57.44;	author corinna;	state Exp;
branches
	1.2.4.1;
next	1.1;

1.1
date	2001.09.09.16.52.37;	author corinna;	state Exp;
branches;
next	;

1.29.10.1
date	2012.08.13.20.04.35;	author corinna;	state Exp;
branches;
next	;

1.8.4.1
date	2003.01.24.04.04.20;	author cgf;	state Exp;
branches;
next	1.8.4.2;

1.8.4.2
date	2003.01.25.16.37.00;	author cgf;	state Exp;
branches;
next	1.8.4.3;

1.8.4.3
date	2003.01.26.05.39.17;	author cgf;	state Exp;
branches;
next	1.8.4.4;

1.8.4.4
date	2003.01.27.00.16.44;	author cgf;	state Exp;
branches;
next	1.8.4.5;

1.8.4.5
date	2003.01.31.22.26.24;	author cgf;	state Exp;
branches;
next	1.8.4.6;

1.8.4.6
date	2003.02.01.18.42.23;	author cgf;	state Exp;
branches;
next	1.8.4.7;

1.8.4.7
date	2003.02.05.14.25.09;	author cgf;	state Exp;
branches;
next	1.8.4.8;

1.8.4.8
date	2003.03.09.20.53.45;	author cgf;	state Exp;
branches;
next	1.8.4.9;

1.8.4.9
date	2003.05.10.17.20.54;	author cgf;	state Exp;
branches;
next	;

1.2.4.1
date	2002.01.04.03.56.10;	author rbcollins;	state Exp;
branches;
next	1.2.4.2;

1.2.4.2
date	2002.06.13.14.34.10;	author rbcollins;	state Exp;
branches;
next	1.2.4.3;

1.2.4.3
date	2002.06.27.11.30.17;	author scottc;	state Exp;
branches;
next	1.2.4.4;

1.2.4.4
date	2002.08.24.12.25.31;	author scottc;	state Exp;
branches;
next	;


desc
@@


1.44
log
@	* ldap.h: Remove index macros.
	(class cyg_ldap): Remove members srch_msg and srch_entry.
	(cyg_ldap::get_string_attribute): Remove private method taking index
	argument.
	(cyg_ldap::get_num_attribute): Ditto.  Add method taking attribute name.
	(cyg_ldap::get_primary_gid): Adjust to aforementioned change.
	(cyg_ldap::get_unix_uid): Ditto.
	(cyg_ldap::get_unix_gid): Ditto.
	* ldap.cc: Throughout, use msg and entry in place of srch_msg and
	srch_entry.
	(std_user_attr): Add sAMAccountName and objectSid.
	(group_attr): Ditto.
	(cyg_ldap::close): Drop handling of srch_msg and srch_entry.
	(cyg_ldap::get_string_attribute): Move earlier in file.
	(cyg_ldap::get_num_attribute): Ditto.
	(cyg_ldap::enumerate_ad_accounts): Add comments for clarity.
	Use group_attr or user_attr rather than sid_attr to fetch all desired
	attributes for an account right away.
	(cyg_ldap::next_account): Store found SID in last_fetched_sid to
	skip calls to fetch_ad_account from fetch_account_from_windows.
	(cyg_ldap::get_string_attribute): Remove method taking index argument.
	(cyg_ldap::get_num_attribute): Ditto.
	* pwdgrp.h (class pg_ent): Fix formatting.  Add member dom.
	* passwd.cc (pg_ent::enumerate_ad): Store current flat domain name
	in dom.  Construct fetch_acc_t argument from LDAP attributes and
	call fetch_account_from_windows with that.
	* userinfo.h (enum fetch_user_arg_type_t): Rename FULL_grp_arg to
	FULL_acc_arg.  Change throughout.
	(struct fetch_acc_t): Rename from fetch_full_grp_t.  Change throughout.
	(struct fetch_user_arg_t): Rename full_grp to full_acc.  Change
	throughout.
@
text
@/* pwdgrp.h

   Copyright 2001, 2002, 2003, 2014, 2015 Red Hat inc.

   Stuff common to pwd and grp handling.

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */

#pragma once

#include "sync.h"
#include "ldap.h"
#include "miscfuncs.h"
#include "userinfo.h"

/* These functions are needed to allow searching and walking through
   the passwd and group lists */
extern struct passwd *internal_getpwsid (cygpsid &, cyg_ldap * = NULL);
extern struct passwd *internal_getpwsid_from_db (cygpsid &sid);
extern struct passwd *internal_getpwnam (const char *, cyg_ldap * = NULL);
extern struct passwd *internal_getpwuid (uid_t, cyg_ldap * = NULL);
extern struct group *internal_getgrsid (cygpsid &, cyg_ldap * = NULL);
extern struct group *internal_getgrsid_from_db (cygpsid &sid);
extern struct group *internal_getgrgid (gid_t, cyg_ldap * = NULL);
extern struct group *internal_getgrnam (const char *, cyg_ldap * = NULL);

extern int internal_getgroups (int, gid_t *, cyg_ldap *, const DWORD = 0);

/* These functions are called from mkpasswd/mkgroup via cygwin_internal. */
void *setpwent_filtered (int enums, PCWSTR enum_tdoms);
void *getpwent_filtered (void *gr);
void endpwent_filtered (void *gr);
void *setgrent_filtered (int enums, PCWSTR enum_tdoms);
void *getgrent_filtered (void *gr);
void endgrent_filtered (void *gr);

struct pg_pwd
{
  struct passwd p;
  cygsid sid;
  size_t len;
};

struct pg_grp
{
  struct group g;
  cygsid sid;
  size_t len;
};

class pwdgrp
{
  friend class pg_ent;
  friend class pw_ent;
  friend class gr_ent;

  unsigned pwdgrp_buf_elem_size;
  void *pwdgrp_buf;
  bool (pwdgrp::*parse) ();
  UNICODE_STRING path;
  OBJECT_ATTRIBUTES attr;
  LARGE_INTEGER last_modified;
  char *lptr;
  ULONG curr_lines;
  ULONG max_lines;
  static muto pglock;

  bool parse_passwd ();
  bool parse_group ();
  char *add_line (char *);
  char *raw_ptr () const {return lptr;}
  char *next_str (char);
  bool next_num (unsigned long&);
  bool next_num (unsigned int& i)
  {
    unsigned long x;
    bool res = next_num (x);
    i = (unsigned int) x;
    return res;
  }
  inline bool next_num (int& i)
  {
    unsigned long x;
    bool res = next_num (x);
    i = (int) x;
    return res;
  }
  void *add_account_post_fetch (char *line, bool lock);
  void *add_account_from_file (cygpsid &sid);
  void *add_account_from_file (const char *name);
  void *add_account_from_file (uint32_t id);
  void *add_account_from_windows (cygpsid &sid, cyg_ldap *pldap = NULL);
  void *add_account_from_windows (const char *name, cyg_ldap *pldap = NULL);
  void *add_account_from_windows (uint32_t id, cyg_ldap *pldap = NULL);
  void *add_account_from_cygserver (cygpsid &sid);
  void *add_account_from_cygserver (const char *name);
  void *add_account_from_cygserver (uint32_t id);
  char *fetch_account_from_line (fetch_user_arg_t &arg, const char *line);
  char *fetch_account_from_file (fetch_user_arg_t &arg);
  char *fetch_account_from_windows (fetch_user_arg_t &arg,
				    cyg_ldap *pldap = NULL);
  char *fetch_account_from_cygserver (fetch_user_arg_t &arg);

public:
  ULONG cached_users () const { return curr_lines; }
  ULONG cached_groups () const { return curr_lines; }
  POBJECT_ATTRIBUTES file_attr () { return &attr; }
  bool check_file ();

  void init_pwd ();
  bool is_passwd () const { return pwdgrp_buf_elem_size == sizeof (pg_pwd); }
  pg_pwd *passwd () const { return (pg_pwd *) pwdgrp_buf; };
  struct passwd *add_user_from_cygserver (cygpsid &sid)
    { return (struct passwd *) add_account_from_cygserver (sid); }
  struct passwd *add_user_from_cygserver (const char *name)
    { return (struct passwd *) add_account_from_cygserver (name); }
  struct passwd *add_user_from_cygserver (uint32_t id)
    { return (struct passwd *) add_account_from_cygserver (id); }
  struct passwd *add_user_from_file (cygpsid &sid)
    { return (struct passwd *) add_account_from_file (sid); }
  struct passwd *add_user_from_file (const char *name)
    { return (struct passwd *) add_account_from_file (name); }
  struct passwd *add_user_from_file (uint32_t id)
    { return (struct passwd *) add_account_from_file (id); }
  struct passwd *add_user_from_windows (cygpsid &sid, cyg_ldap *pldap = NULL)
    { return (struct passwd *) add_account_from_windows (sid, pldap); }
  struct passwd *add_user_from_windows (const char *name,
  					cyg_ldap* pldap = NULL)
    { return (struct passwd *) add_account_from_windows (name, pldap); }
  struct passwd *add_user_from_windows (uint32_t id, cyg_ldap *pldap = NULL)
    { return (struct passwd *) add_account_from_windows (id, pldap); }
  struct passwd *find_user (cygpsid &sid);
  struct passwd *find_user (const char *name);
  struct passwd *find_user (uid_t uid);

  void init_grp ();
  bool is_group () const { return pwdgrp_buf_elem_size == sizeof (pg_grp); }
  pg_grp *group () const { return (pg_grp *) pwdgrp_buf; };
  struct group *add_group_from_cygserver (cygpsid &sid)
    { return (struct group *) add_account_from_cygserver (sid); }
  struct group *add_group_from_cygserver (const char *name)
    { return (struct group *) add_account_from_cygserver (name); }
  struct group *add_group_from_cygserver (uint32_t id)
    { return (struct group *) add_account_from_cygserver (id); }
  struct group *add_group_from_file (cygpsid &sid)
    { return (struct group *) add_account_from_file (sid); }
  struct group *add_group_from_file (const char *name)
    { return (struct group *) add_account_from_file (name); }
  struct group *add_group_from_file (uint32_t id)
    { return (struct group *) add_account_from_file (id); }
  struct group *add_group_from_windows (cygpsid &sid, cyg_ldap *pldap = NULL)
    { return (struct group *) add_account_from_windows (sid, pldap); }
  struct group *add_group_from_windows (const char *name,
					cyg_ldap *pldap = NULL)
    { return (struct group *) add_account_from_windows (name, pldap); }
  struct group *add_group_from_windows (uint32_t id, cyg_ldap *pldap = NULL)
    { return (struct group *) add_account_from_windows (id, pldap); }
  struct group *add_group_from_windows (fetch_acc_t &full_acc,
  					cyg_ldap *pldap = NULL);
  struct group *find_group (cygpsid &sid);
  struct group *find_group (const char *name);
  struct group *find_group (gid_t gid);
};

class pg_ent
{
protected:
  pwdgrp         pg;
  bool           group;
  pg_pwd         pwd;
  pg_grp         grp;
  NT_readline    rl;
  cyg_ldap       cldap;
  PCHAR          buf;
  ULONG          cnt;
  ULONG          max;
  ULONG_PTR      resume;
  int            enums;		/* ENUM_xxx values defined in sys/cygwin.h. */
  PCWSTR         enum_tdoms;
  bool           from_files;
  bool           from_db;
  UNICODE_STRING dom;
  enum {
    rewound = 0,
    from_cache,
    from_file,
    from_builtin,
    from_local,
    from_sam,
    from_ad,
    finished
  } state;

  void clear_cache ();
  inline bool nss_db_enum_caches () const { return !!(enums & ENUM_CACHE); }
  inline bool nss_db_enum_files () const { return !!(enums & ENUM_FILES); }
  inline bool nss_db_enum_builtin () const { return !!(enums & ENUM_BUILTIN); }
  inline bool nss_db_enum_local () const { return !!(enums & ENUM_LOCAL); }
  inline bool nss_db_enum_primary () const { return !!(enums & ENUM_PRIMARY); }
  inline bool nss_db_enum_tdom (PWCHAR domain)
    {
      if (enums & ENUM_TDOMS_ALL)
        return true;
      if (!(enums & ENUM_TDOMS) || !enum_tdoms || !domain)
        return false;
      for (PCWSTR td = enum_tdoms; td && *td; td = wcschr (td, L'\0'))
        if (!wcscasecmp (td, domain))
          return true;
      return false;
    }
  virtual void *enumerate_caches () = 0;
  virtual void *enumerate_file ();
  virtual void *enumerate_builtin ();
  virtual void *enumerate_local () = 0;
  virtual void *enumerate_sam ();
  virtual void *enumerate_ad ();

public:
  void setent (bool _group, int _enums = 0, PCWSTR _enum_tdoms = NULL);
  void *getent ();
  void endent (bool _group);
};

class pw_ent : public pg_ent
{
  void *enumerate_caches ();
  void *enumerate_local ();
public:
  inline void setpwent (int _enums = 0, PCWSTR _enum_tdoms = NULL)
    { setent (false, _enums, _enum_tdoms); }
  struct passwd *getpwent ();
  inline void endpwent () { endent (false); }
};

class gr_ent : public pg_ent
{
  void *enumerate_caches ();
  void *enumerate_local ();
public:
  inline void setgrent (int _enums = 0, PCWSTR _enum_tdoms = NULL)
    { setent (true, _enums, _enum_tdoms); }
  struct group *getgrent ();
  inline void endgrent () { endent (true); }
};
@


1.43
log
@	* autoload.cc (LsaLookupSids): Import.
	* cygserver_pwdgrp.h: Include userinfo.h.  Drop workaround defining
	fetch_user_arg_type_t locally.
	* grp.cc (internal_getgrsid_cachedonly): New function.
	(internal_getgrfull): Ditto.
	(internal_getgroups): Rearrange function.  Center around fetching all
	cached group info first, calling LsaLookupSids on all so far non-cached
	groups second.  Pass all available info to new internal_getgrfull call.
	* pwdgrp.h: Include userinfo.h.  Move definitions of
	fetch_user_arg_type_t and fetch_user_arg_t there.
	(pwdgrp::add_group_from_windows): Declare with getting full group info.
	Called from internal_getgrfull.
	* uinfo.cc (pwdgrp::add_group_from_windows): Define.
	(pwdgrp::fetch_account_from_line): Add default case.
	(pwdgrp::fetch_account_from_file): Ditto.
	(pwdgrp::fetch_account_from_windows): Handle FULL_grp_arg.
	(client_request_pwdgrp::client_request_pwdgrp): Add default case.
	* userinfo.h: New header.
	(enum fetch_user_arg_type_t): Add FULL_grp_arg.
	(struct fetch_full_grp_t): New datatype.
@
text
@d162 1
a162 1
  struct group *add_group_from_windows (fetch_full_grp_t &full_grp,
d172 15
a186 14
  pwdgrp        pg;
  bool		group;
  pg_pwd        pwd;
  pg_grp        grp;
  NT_readline	rl;
  cyg_ldap	cldap;
  PCHAR         buf;
  ULONG         cnt;
  ULONG         max;
  ULONG_PTR     resume;
  int           enums;		/* ENUM_xxx values defined in sys/cygwin.h. */
  PCWSTR        enum_tdoms;
  bool		from_files;
  bool		from_db;
@


1.42
log
@	* grp.cc (internal_getgroups): Take additional timeout_ns parameter.
	Restrict fetching group account entries from user token groups by
	timeout_ns 100ns-intervals.  Add preceding comment to explain why.
	* pwdgrp.h (internal_getgroups): Align prototype.
	* times.cc (GetTickCount_ns): New function.
	* uinfo.cc (internal_getlogin): Call internal_getgroups wih 300ms
	timeout.
	* winsup.h (GetTickCount_ns): Declare.
@
text
@d18 1
a40 18
enum fetch_user_arg_type_t {
  SID_arg,
  NAME_arg,
  ID_arg
};

struct fetch_user_arg_t
{
  fetch_user_arg_type_t type;
  union {
    cygpsid *sid;
    const char *name;
    uint32_t id;
  };
  /* Only used in fetch_account_from_file/line. */
  size_t len;
};

d162 2
@


1.41
log
@	* grp.cc (pwdgrp::parse_group): Set grp.len.  Drop generating any
	gr_mem entries.
	(getgrgid_r): Don't try to copy gr_mem entries.  Always set gr_mem
	to an empty list.
	(getgrnam_r): Ditto.
	(app_gr): New static struct to store group data propagated to the
	calling application via getgrgid/getgrnam.
	(getgr_cp): Fill app_gr and return pointer to app_gr.g.
	(getgrgid32): Call getgr_cp.
	(getgrnam32): Ditto.
	* passwd.cc (pwdgrp::parse_passwd): Set res.len.
	(app_pw): New static struct to store passwd data propagated to the
	calling application via getpwuid/getpwnam.
	(getpw_cp): Fill app_pw and return pointer to app_pw.p.
	(getpwuid32): Cal getpw_cp.
	(getpwnam): Ditto.
	* pwdgrp.h (struct pg_pwd): Add len member.
	(struct pg_grp): Ditto.
@
text
@d3 1
a3 1
   Copyright 2001, 2002, 2003, 2014 Red Hat inc.
d30 1
a30 1
extern int internal_getgroups (int, gid_t *, cyg_ldap *);
@


1.40
log
@	* cygheap.h (enum cygheap_pwdgrp::cache_t): Remove.
	(cygheap_pwdgrp::caching): Convert to bool.
	(cygheap_pwdgrp::pwd_cache): Add cygserver member.
	(cygheap_pwdgrp::grp_cache): Ditto.
	(cygheap_pwdgrp::nss_db_caching): Drop.
	(cygheap_pwdgrp::nss_db_full_caching): Drop.
	(cygheap_pwdgrp::nss_cygserver_caching): New method.
	(cygheap_pwdgrp::nss_disable_cygserver_caching): New method.
	* cygserver.h (client_request::request_code_t): Add
	CYGSERVER_REQUEST_PWDGRP.
	* cygserver_pwdgrp.h: New file.
	* cygtls.h (struct _local_storage): Remove pwbuf and grbuf members.
	* grp.cc (pwdgrp::prep_tls_grbuf): Drop.
	(internal_getgrsid): Handle cygserver caching and rearrange to check
	the caches first.
	(internal_getgrnam): Ditto.
	(internal_getgrgid): Ditto.
	(gr_ent::enumerate_caches): Handle cygserver cache.
	* passwd.cc (pwdgrp::prep_tls_pwbuf): Drop.
	(internal_getpwsid): Handle cygserver caching and rearrange to check
	the caches first.
	(internal_getpwnam): Ditto.
	(internal_getpwuid): Ditto.
	(pw_ent::enumerate_caches): Handle cygserver cache.
	* pwdgrp.h (pwdgrp::add_account_from_cygserver): New method declaration.
	(pwdgrp::fetch_account_from_cygserver): New method declaration.
	(pwdgrp::prep_tls_pwbuf): Drop declaration.
	(pwdgrp::prep_tls_grbuf): Drop declaration.
	(pwdgrp::add_user_from_cygserver): New inline methods.
	(pwdgrp::add_group_from_cygserver): New inline methods.
	* tlsoffsets.h: Regenerate.
	* tlsoffsets64.h: Regenerate.
	* uinfo.cc (internal_getlogin): Call internal_getgroups if cygserver
	caching is not available.
	(cygheap_pwdgrp::init): Initialize pwd_cache.cygserver and
	grp_cache.cygserver.  Set caching to true.
	(cygheap_pwdgrp::nss_init_line): Drop db_cache handling entirely.
	(pwdgrp::add_account_from_windows): Drop no caching handling.
	(client_request_pwdgrp::client_request_pwdgrp): New method.
	(pwdgrp::fetch_account_from_cygserver): New method.
	(pwdgrp::add_account_from_cygserver): New method.

	* fhandler_disk_file.cc (fhandler_base::fstat_helper): Fix formatting.
	* include/sys/cygwin.h: Ditto.
@
text
@d62 1
d69 1
@


1.39
log
@	* pwdgrp.h (pwdgrp::is_passwd): New inline method.
	(pwdgrp::is_group): New inline method.
	(add_account_from_windows): Drop group argument from declaration.
	(fetch_account_from_windows): Ditto.
	(check_file): Ditto.
	(add_user_from_windows): Call add_account_from_windows accordingly.
	(add_group_from_windows): Ditto.
	* uinfo.cc (pwdgrp::add_account_from_windows): Drop group argument.
	Use is_group method instead.
	(pwdgrp::check_file): Ditto.
	(pwdgrp::fetch_account_from_windows): Ditto.
	* grp.cc: Accommodate aforementioned changes.
	* passwd.cc: Ditto.
@
text
@d114 3
d121 1
a121 2
  pwdgrp *prep_tls_pwbuf ();
  pwdgrp *prep_tls_grbuf ();
d132 7
a138 1
  inline struct passwd *add_user_from_file (cygpsid &sid)
d158 6
@


1.38
log
@	* cygheap.h (cygheap_user::sid): Return reference to cygpsid rather
	than PSID.
	(cygheap_user::saved_sid): Ditto.
	(cygheap_pwdgrp::cache_t): New type.
	(cygheap_pwdgrp::caching): Convert to cache_t.
	(cygheap_pwdgrp::nss_db_caching): Change accordingly.
	(cygheap_pwdgrp::nss_db_full_caching): New inline method.
	* grp.cc (internal_getgroups): Reinvent.  Take cyg_ldap pointer as
	third parameter and use throughout.
	(getgroups32): Call internal_getgroups.
	* pwdgrp.h (internal_getgroups): Declare.
	* uinfo.cc (internal_getlogin): Partial rewrite to accommodate having
	no connection to the DC.  Give primary group from user token more
	weight.  Generate group entries for all groups in the user token if
	caching is set to NSS_FULL_CACHING.
	(cygheap_pwdgrp::init): Initialize caching to NSS_FULL_CACHING.
	(cygheap_pwdgrp::nss_init_line): Handle "db_cache: full".
	(pwdgrp::add_account_from_windows): Fix group handling in non-caching
	mode.
	(pwdgrp::fetch_account_from_windows): Default primary group for the
	current user to primary group from user token.  Check for primary
	domain first after LookupAccountSid failed.
@
text
@d111 3
a113 6
  void *add_account_from_windows (cygpsid &sid, bool group,
  				  cyg_ldap *pldap = NULL);
  void *add_account_from_windows (const char *name, bool group,
				  cyg_ldap *pldap = NULL);
  void *add_account_from_windows (uint32_t id, bool group,
				  cyg_ldap *pldap = NULL);
d116 1
a116 1
  char *fetch_account_from_windows (fetch_user_arg_t &arg, bool group,
d125 1
a125 1
  bool check_file (bool group);
d128 1
d137 1
a137 1
    { return (struct passwd *) add_account_from_windows (sid, false, pldap); }
d140 1
a140 1
    { return (struct passwd *) add_account_from_windows (name, false, pldap); }
d142 1
a142 1
    { return (struct passwd *) add_account_from_windows (id, false, pldap); }
d148 1
d157 1
a157 1
    { return (struct group *) add_account_from_windows (sid, true, pldap); }
d160 1
a160 1
    { return (struct group *) add_account_from_windows (name, true, pldap); }
d162 1
a162 1
    { return (struct group *) add_account_from_windows (id, true, pldap); }
@


1.37
log
@	* autoload.cc (CheckTokenMembership): Import.
	* external.cc (cygwin_internal): Call get_uid/get_gid instead of get_id.
	* grp.cc (internal_getgrsid): Take additional cyg_ldap pointer.
	Forward to pwdgrp::add_group_from_windows.
	(internal_getgrnam): Ditto.
	(internal_getgrgid): Ditto.
	(gr_ent::enumerate_local): Drop ugid_caching bool from call to
	pwdgrp::fetch_account_from_windows.
	(getgroups32): Rename from internal_getgroups and drop getgroups32 stub.
	Drop srchsid parameter and code handling it.  Add local cyg_ldap
	instance and forward to internal_getgrXXX.
	(getgroups): Call getgroups32.
	(get_groups): Add local cyg_ldap instance and forward to
	internal_getgrXXX.
	(getgrouplist): Ditto.
	(setgroups32): Ditto.
	* ldap.cc (cyg_ldap::open): Don't call close.  Return true if connection
	is already open.
	(cyg_ldap::remap_uid): Forward this to internal_getpwsid.
	(cyg_ldap::remap_gid): Forward this to internal_getgrsid.
	* passwd.cc (internal_getpwsid): Take additional cyg_ldap pointer.
	Forward to pwdgrp::add_user_from_windows.
	(internal_getpwnam): Ditto.
	(internal_getpwuid): Ditto.
	(pg_ent::enumerate_builtin): Drop ugid_caching bool from call to
	pwdgrp::fetch_account_from_windows.
	(pg_ent::enumerate_sam): Ditto.
	(pg_ent::enumerate_ad): Ditto.  Forward local cldap instead.
	* pwdgrp.h (internal_getpwsid): Align declaration to above change.
	(internal_getpwnam): Ditto.
	(internal_getpwuid): Ditto.
	(internal_getgrsid): Ditto.
	(internal_getgrgid): Ditto.
	(internal_getgrnam): Ditto.
	(internal_getgroups): Drop declaration.
	(pwdgrp::add_account_from_windows): Align declaration to below change.
	(pwdgrp::add_user_from_windows): Ditto.
	(pwdgrp::add_group_from_windows): Ditto.
	* sec_acl.cc (setacl): Add local cyg_ldap instance and forward to
	internal_getpwuid and internal_getgrgid.
	(getacl): Add local cyg_ldap instance and forward to cygpsid::get_id.
	(aclfromtext32): Add local cyg_ldap instance and forward to
	internal_getpwnam and internal_getgrnam.
	* sec_helper.cc (cygpsid::get_id): Take additional cyg_ldap pointer.
	Forward to internal_getgrsid and internal_getpwsid.
	(get_sids_info): Drop ldap_open.  Forward local cldap to
	internal_getpwsid and internal_getgrXXX.  Call CheckTokenMembership
	rather than internal_getgroups.
	* security.h (cygpsid::get_id): Add cyg_ldap pointer, drop default
	parameter.
	(cygpsid::get_uid): Add cyg_ldap pointer.  Call get_id accordingly.
	(cygpsid::get_gid): Ditto.
	* uinfo.cc (internal_getlogin): Add local cyg_ldap instance and forward
	to internal_getpwXXX and internal_getgrXXX calls.
	(pwdgrp::add_account_from_windows): Take additional cyg_ldap pointer.
	Forward to pwdgrp::fetch_account_from_windows.
	(fetch_posix_offset): Drop ldap_open argument and handling.  Get
	cyg_ldap instance as pointer.
	(pwdgrp::fetch_account_from_windows): Take additional cyg_ldap pointer.
	Use it if it's not NULL, local instance otherwise.  Drop ldap_open.
	Drop fetching extended group arguments from AD for speed.
@
text
@d30 2
@


1.36
log
@	* external.cc (cygwin_internal): Add cases for CW_GETNSSSEP,
	CW_GETPWSID and CW_GETGRSID.
	* grp.cc (internal_getgrsid_from_db): New function.
	* passwd.cc (internal_getpwsid_from_db): New function.
	(pg_ent::setent): Add special case for call from mkpasswd/mkgroup.
	* pwdgrp.h (internal_getpwsid_from_db): Declare.
	(internal_getgrsid_from_db): Declare.
	(enum nss_enum_t): Move to include/sys/cygwin.h.
	(class pg_ent): Add comment.
	* uinfo.cc (pwdgrp::fetch_account_from_windows): Fix typo in comment.
	Change "UNIX" to "Unix" in domain name.
	* include/sys/cygwin.h (cygwin_getinfo_types): Add CW_GETNSSSEP,
	CW_GETPWSID and CW_GETGRSID.
	(enum nss_enum_t): Define here.
@
text
@d15 4
d21 1
a21 1
extern struct passwd *internal_getpwsid (cygpsid &);
d23 3
a25 3
extern struct passwd *internal_getpwnam (const char *);
extern struct passwd *internal_getpwuid (uid_t);
extern struct group *internal_getgrsid (cygpsid &);
d27 2
a28 3
extern struct group *internal_getgrgid (gid_t);
extern struct group *internal_getgrnam (const char *);
int internal_getgroups (int, gid_t *, cygpsid * = NULL);
a37 4
#include "sync.h"
#include "ldap.h"
#include "miscfuncs.h"

d109 6
a114 3
  void *add_account_from_windows (cygpsid &sid, bool group);
  void *add_account_from_windows (const char *name, bool group);
  void *add_account_from_windows (uint32_t id, bool group);
d118 1
a118 1
				    bool ugid_caching = true);
d136 7
a142 6
  struct passwd *add_user_from_windows (cygpsid &sid)
    { return (struct passwd *) add_account_from_windows (sid, false); }
  struct passwd *add_user_from_windows (const char *name)
    { return (struct passwd *) add_account_from_windows (name, false); }
  struct passwd *add_user_from_windows (uint32_t id)
    { return (struct passwd *) add_account_from_windows (id, false); }
d155 7
a161 6
  struct group *add_group_from_windows (cygpsid &sid)
    { return (struct group *) add_account_from_windows (sid, true); }
  struct group *add_group_from_windows (const char *name)
    { return (struct group *) add_account_from_windows (name, true); }
  struct group *add_group_from_windows (uint32_t id)
    { return (struct group *) add_account_from_windows (id, true); }
@


1.35
log
@	* pwdgrp.h (pwdgrp::fetch_account_from_windows): Add bool parameter
	to declaration, set to true by default.
	* uinfo.cc (pwdgrp::fetch_account_from_windows): Add bool parameter
	"ugid_caching".  Only add account to ugid_cache if set to true.
	* grp.cc (gr_ent::enumerate_local): Call fetch_account_from_windows
	with ugid_caching parameter set to false.
	* passwd.cc (pg_ent::enumerate_builtin): Ditto.
	(pg_ent::enumerate_sam): Ditto.
	(pg_ent::enumerate_ad): Ditto.
@
text
@d18 1
d22 1
a162 13
enum nss_enum_t
{
  ENUM_NONE = 0x00,
  ENUM_CACHE = 0x01,
  ENUM_FILES = 0x02,
  ENUM_BUILTIN = 0x04,
  ENUM_LOCAL = 0x08,
  ENUM_PRIMARY = 0x10,
  ENUM_TDOMS = 0x20,
  ENUM_TDOMS_ALL = 0x40,
  ENUM_ALL = 0x7f
};

d176 1
a176 1
  int           enums;
@


1.34
log
@	* external.cc (cygwin_internal): Handle new CW_SETENT, CW_GETENT and
	CW_ENDENT info types.
	* grp.cc (setgrent_filtered): New function, called from cygwin_internal.
	(getgrent_filtered): Ditto.
	(endgrent_filtered): Ditto.
	* passwd.cc (pg_ent::setent): Set state explicitely to from_cache.
	(pg_ent::getent): Handle the fact that a DC has no SAM and enumerating
	local accounts is equivalent to enumerating domain accounts.
	(setpwent_filtered): New function, called from cygwin_internal.
	(getpwent_filtered): Ditto.
	(endpwent_filtered): Ditto.
	* pwdgrp.h (setpwent_filtered): Declare.
	(getgrent_filtered): Ditto.
	(endgrent_filtered): Ditto.
	(setpwent_filtered): Ditto.
	(getpwent_filtered): Ditto.
	(endpwent_filtered): Ditto.
	* include/sys/cygwin.h (cygwin_getinfo_types): Add CW_SETENT, CW_GETENT,
	and CW_ENDENT.
@
text
@d113 2
a114 1
  char *fetch_account_from_windows (fetch_user_arg_t &arg, bool group);
@


1.33
log
@	* autoload.cc (ldap_abandon): Import.
	(ldap_result): Import.
	(ldap_searchW): Import.
	(NetGroupEnum): Import.
	(NetLocalGroupEnum): Import.
	(NetUserEnum): Import.
	* cygheap.h (class cygheap_pwdgrp): Add members enums and enum_tdoms.
	(cygheap_pwdgrp::nss_db_enums): New inline method.
	(cygheap_pwdgrp::nss_db_enum_tdoms): Ditto.
	* cygtls.h (struct _local_storage): Drop unused members pw_pos and
	grp_pos.
	* grp.cc (grent): New static variable of class gr_ent.
	(gr_ent::enumerate_caches): New method.
	(gr_ent::enumerate_local): New method.
	(gr_ent::getgrent): New method.
	(setgrent): Call gr_ent method.
	(getgrent32): Ditto.
	(endgrent): Ditto.
	* ldap.cc (sid_attr): Rename from nfs_attr.
	(cyg_ldap::close): Abandon still running asynchronous search.
	(cyg_ldap::fetch_ad_account): Reduce filter buffer size.
	(cyg_ldap::enumerate_ad_accounts): New method.
	(cyg_ldap::next_account): New method.
	(cyg_ldap::fetch_posix_offset_for_domain): Reduce filter buffer size.
	(cyg_ldap::fetch_unix_sid_from_ad): Ditto.  Fix return value in case
	no value has been read.
	(cyg_ldap::fetch_unix_name_from_rfc2307): Reduce filter buffer size.
	* ldap.h (class cyg_ldap): Add msg_id member.
	(cyg_ldap::enumerate_ad_accounts): Declare.
	(cyg_ldap::next_account): Declare:
	* passwd.cc (pwent): New static variable of class pw_ent.
	(pg_ent::clear_cache): New method.
	(pg_ent::setent): New method.
	(pg_ent::getent): New method.
	(pg_ent::endent): New method.
	(pg_ent::enumerate_file): New method.
	(pg_ent::enumerate_builtin): New method.
	(pg_ent::enumerate_sam): New method.
	(pg_ent::enumerate_ad): New method.
	(pw_ent::enumerate_caches): New method.
	(pw_ent::enumerate_local): New method.
	(pw_ent::getpwent): New method.
	(setpwent): Call pw_ent method.
	(getpwent): Ditto.
	(endpwent): Ditto.
	* pwdgrp.h (class pwdgrp): Define pg_ent, pw_ent and gr_ent as friend
	classes.
	(pwdgrp::add_account_post_fetch): Declare with extra bool parameter.
	(pwdgrp::file_attr): New inline method.
	(enum nss_enum_t): Define.
	(class pg_ent): Define.
	(class pw_ent): Define.
	(class gr_ent): Define.
	* tlsoffsets.h: Regenerate.
	* tlsoffsets64.h: Ditto.
	* uinfo.cc (cygheap_pwdgrp::init): Initialize enums and enum_tdoms.
	(cygheap_pwdgrp::nss_init_line): Fix typo in preceeding comment.
	Handle new "db_enum" keyword.
	(pwdgrp::add_account_post_fetch): Take additional `bool lock' parameter
	and acquire pglock before adding element to array if lock is true.
	(pwdgrp::add_account_from_file): Call add_account_post_fetch with lock
	set to true.
	(pwdgrp::add_account_from_windows): Ditto in case of caching.
	(pwdgrp::fetch_account_from_windows): Handle builtin aliases only
	known to the domain controller.  Only call NetLocalGroupGetInfo for
	aliases.
@
text
@d25 8
@


1.32
log
@	* autoload.cc (NetLocalGroupGetInfo): Replace NetGroupGetInfo.
	* cygheap.h (class cygheap_ugid_cache): Move ugid_cache_t type here
	and rename.
	(struct init_cygheap): Add cygheap_ugid_cache member "ugid_cache".
	* pwdgrp.h (class ugid_cache_t): Remove here.
	* fhandler_disk_file.cc (fhandler_base::fstat_by_nfs_ea): Accommodate
	move of ugid_cache to cygheap.
	* sec_helper.cc (get_sids_info): Ditto.
	* uinfo.cc (ugid_cache): Remove.
	(pwdgrp::fetch_account_from_windows): Define id_val globally.
	Move SidTypeAlias handling into SidTypeUser/SidTypeGroup branch since
	aliases are handled like groups in SAM.  Accommodate move of ugid_cache
	to cygheap.  Consolidate code reading SAM comments into a single branch
	for both, SidTypeUser and SidTypeAlias.  For SidTypeAlias, fix thinko
	and call NetLocalGroupGetInfo rather than NetGroupGetInfo.  Simplify
	code setting Cygwin primary group for SAM accounts.  Add code to handle
	UNIX uid/gid from SAM comment.
@
text
@d26 2
d61 4
d96 1
a96 1
  void *add_account_post_fetch (char *line);
d112 1
d151 93
@


1.31
log
@	Introduce reading passwd/group entries from SAM/AD.  Introduce
	/etc/nsswitch.conf file to configure it.
	* Makefile.in (DLL_OFILES): Add ldap.o.
	* autoload.cc: Import ldap functions from wldap32.dll.
	(DsEnumerateDomainTrustsW): Import.
	(NetGroupGetInfo): Import.
	* cygheap.h (class cygheap_domain_info): New class to keep global
	domain info.
	(class cygheap_pwdgrp): New class to keep passwd/group caches and
	configuration info from /etc/nssswitch.conf.
	(struct init_cygheap): Add cygheap_domain_info member "dom" and
	cygheap_pwdgrp member "pg".
	* cygtls.h (struct _local_storage): Remove unused member "res".
	Rearrange slightly, Add members pwbuf and grbuf to implement non-caching
	passwd/group fetching from SAM/AD.  Make pw_pos and pw_pos unsigned.
	* fhandler_disk_file.cc (fhandler_base::fstat_by_nfs_ea): Add RFC 2307
	uid/gid mapping.
	* fhandler_process.cc: Drop including pwdgrp.h.
	* fhandler_procsysvipc.cc: Ditto.
	* fhandler_registry.cc (fhandler_registry::fstat): Set key uid/gid
	to ILLEGAL_UID/ILLEGAL_GID rather than UNKNOWN_UID/UNKNOWN_GID.
	* grp.cc (group_buf): Drop.
	(gr): Drop.
	(pwdgrp::parse_group): Fill pg_grp.
	(pwdgrp::read_group): Remove.
	(pwdgrp::init_grp): New method.
	(pwdgrp::prep_tls_grbuf): New method.
	(pwdgrp::find_group): New methods.
	(internal_getgrsid): Convert to call new pwdgrp methods.
	(internal_getgrnam): Ditto.
	(internal_getgrgid): Ditto.
	(getgrgid_r): Drop 2nd parameter from internal_getgrgid call.
	(getgrgid32): Ditto.
	(getgrnam_r): Ditto for internal_getgrnam.
	(getgrnam32): Ditto.
	(getgrent32): Convert to call new pwdgrp methods.
	(internal_getgrent): Remove.
	(internal_getgroups): Simplify, especially drop calls to
	internal_getgrent.
	* ldap.cc: New file implementing cyg_ldap class for LDAP access to AD
	and RFC 2307 server.
	* ldap.h: New header, declaring cyg_ldap class.
	* passwd.cc (passwd_buf): Drop.
	(pr): Drop.
	(pwdgrp::parse_passwd): Fill pg_pwd.
	(pwdgrp::read_passwd): Remove.
	(pwdgrp::init_pwd): New method.
	(pwdgrp::prep_tls_pwbuf): New method.
	(find_user): New methods.
	(internal_getpwsid): Convert to call new pwdgrp methods.
	(internal_getpwnam): Ditto.
	(internal_getpwuid): Ditto.
	(getpwuid32): Drop 2nd parameter from internal_getpwuid call.
	(getpwuid_r): Ditto.
	(getpwnam): Ditto for internal_getpwnam.
	(getpwnam_r): Ditto.
	(getpwent): Convert to call new pwdgrp methods.
	* path.cc (class etc): Remove all methods.
	* path.h (class etc): Drop.
	* pinfo.cc (pinfo_basic::pinfo_basic): Set gid to ILLEGAL_GID rather
	than UNKNOWN_GID.
	(pinfo_init): Ditto.
	* pwdgrp.h (internal_getpwnam): Drop 2nd parameter from declaration.
	(internal_getpwuid): Ditto.
	(internal_getgrgid): Ditto.
	(internal_getgrnam): Ditto.
	(internal_getgrent): Drop declaration.
	(enum fetch_user_arg_type_t): New type.
	(struct fetch_user_arg_t): New type.
	(struct pg_pwd): New type.
	(struct pg_grp): New type.
	(class pwdgrp): Rework to provide functions for file and db requests
	and caching.
	(class ugid_cache_t): New class to provide RFC 2307 uid map caching.
	(ugid_cache): Declare.
	* sec_acl.cc: Drop including pwdgrp.h.
	* sec_auth.cc: Drop including dsgetdc.h and pwdgrp.h.
	(get_logon_server): Convert third parameter to ULONG flags argument
	to allow arbitrary flags values in DsGetDcNameW call and change calls
	to this function throughout.  Use cached account domain name rather
	than calling GetComputerNameW.
	(get_unix_group_sidlist): Remove.
	(get_server_groups): Drop call to get_unix_group_sidlist.
	(verify_token): Rework token group check without calling
	internal_getgrent.
	* sec_helper.cc (cygpsid::pstring): New methods, like string() but
	return pointer to end of string.
	(cygsid::getfromstr): Add wide character implementation.
	(get_sids_info): Add RFC 2307 uid/gid mapping for Samba shares.
	* security.cc: Drop including pwdgrp.h.
	* security.h (DEFAULT_UID): Remove.
	(UNKNOWN_UID): Remove.
	(UNKNOWN_GID): Remove.
	(uinfo_init): Move here from winsup.h.
	(ILLEGAL_UID): Ditto.
	(ILLEGAL_GID): Ditto.
	(UNIX_POSIX_OFFSET): Define.  Add lengthy comment.
	(UNIX_POSIX_MASK): Ditto.
	(MAP_UNIX_TO_CYGWIN_ID): Ditto.
	(ILLEGAL_UID16): Move here from winsup.h.
	(ILLEGAL_GID16): Ditto.
	(uid16touid32): Ditto.
	(gid16togid32): Ditto.
	(sid_id_auth): New convenience macro for SID component access.
	(sid_sub_auth_count): Ditto.
	(sid_sub_auth): Ditto.
	(sid_sub_auth_rid): Ditto.
	(cygpsid::pstring): Declare.
	(cygsid::getfromstr): Declare wide character variant.
	(cygsid::operator=): Ditto.
	(cygsid::operator*=): Ditto.
	(get_logon_server): Change declaration according to source code.
	* setlsapwd.cc (setlsapwd): Drop 2nd parameter from internal_getpwnam
	call.
	* shared.cc (memory_init): Call cygheap->pg.init in first process.
	* syscalls.cc: Drop including pwdgrp.h.
	* tlsoffsets.h: Regenerate.
	* tlsoffsets64.h: Ditto.
	* uinfo.cc (internal_getlogin): Drop gratuitious internal_getpwuid
	call.  Fix debug output.  Overwrite user gid in border case of a
	missing passwd file while a group file exists.
	(pwdgrp::add_line): Allocate memory on cygheap.
	(pwdgrp::load): Remove.
	(ugid_cache): Define.
	(cygheap_pwdgrp::init): New method.
	(cygheap_pwdgrp::nss_init_line): New method.
	(cygheap_pwdgrp::_nss_init): New method.
	(cygheap_domain_info::init): New method.
	(logon_sid): Define.
	(get_logon_sid): New function.
	(pwdgrp::add_account_post_fetch): New method.
	(pwdgrp::add_account_from_file): New methods.
	(pwdgrp::add_account_from_windows): New methods.
	(pwdgrp::check_file): New method.
	(pwdgrp::fetch_account_from_line): New method.
	(pwdgrp::fetch_account_from_file): New method.
	(pwdgrp::fetch_account_from_windows): New method.
	* winsup.h: Move aforementioned macros and declarations to security.h.
@
text
@a143 39

class ugid_cache_t
{
  struct idmap {
    uint32_t nfs_id;
    uint32_t cyg_id;
  };
  class idmaps {
    uint32_t _cnt;
    uint32_t _max;
    idmap *_map;
  public:
    idmaps () : _cnt (0), _max (0), _map (NULL) {}
    uint32_t get (uint32_t id) const
    {
      for (uint32_t i = 0; i < _cnt; ++i)
	if (_map[i].nfs_id == id)
	  return _map[i].cyg_id;
      return (uint32_t) -1;
    }
    void add (uint32_t nfs_id, uint32_t cyg_id)
    {
      if (_cnt >= _max)
	_map = (idmap *) realloc (_map, (_max += 10) * sizeof (*_map));
      _map[_cnt].nfs_id = nfs_id;
      _map[_cnt].cyg_id = cyg_id;
      ++_cnt;
    }
  };
  idmaps uids;
  idmaps gids;

public:
  uid_t get_uid (uid_t uid) const { return uids.get (uid); }
  gid_t get_gid (gid_t gid) const { return gids.get (gid); }
  void add_uid (uid_t nfs_uid, uid_t cyg_uid) { uids.add (nfs_uid, cyg_uid); }
  void add_gid (gid_t nfs_gid, gid_t cyg_gid) { gids.add (nfs_gid, cyg_gid); }
};
extern ugid_cache_t ugid_cache;
@


1.30
log
@	* Merge in cygwin-64bit-branch.
@
text
@d3 1
a3 1
   Copyright 2001, 2002, 2003 Red Hat inc.
d13 2
d18 2
a19 2
extern struct passwd *internal_getpwnam (const char *, bool = FALSE);
extern struct passwd *internal_getpwuid (uid_t, bool = FALSE);
d21 2
a22 3
extern struct group *internal_getgrgid (gid_t gid, bool = FALSE);
extern struct group *internal_getgrnam (const char *, bool = FALSE);
extern struct group *internal_getgrent (int);
d26 31
a56 1
#include "cygtls.h"
d60 1
a60 7
  union
  {
    passwd **passwd_buf;
    group **group_buf;
    void **pwdgrp_buf;
  };
  void (pwdgrp::*read) ();
d62 6
a67 6
  int etc_ix;
  UNICODE_STRING upath;
  PWCHAR path;
  char *buf, *lptr;
  int max_lines;
  bool initialized;
a71 2
  void read_passwd ();
  void read_group ();
d90 12
d104 40
a143 1
  int curr_lines;
d145 30
a174 10
  void load (const wchar_t *);
  inline void refresh (bool check)
  {
    if (!check && initialized)
      return;
    if (pglock.acquire () == 1 &&
	(!initialized || (check && etc::file_changed (etc_ix))))
      (this->*read) ();
    pglock.release ();
  }
d176 5
a180 2
  pwdgrp (passwd *&pbuf);
  pwdgrp (group *&gbuf);
d182 1
@


1.29
log
@	* pwdgrp.h (pwdgrp::refresh): Fix indentation.
	* uinfo.cc (pwdgrp::load): Open file synchronized to avoid truncated
	read.  Drop local variable off.
@
text
@d17 6
a22 6
extern struct passwd *internal_getpwuid (__uid32_t, bool = FALSE);
extern struct __group32 *internal_getgrsid (cygpsid &);
extern struct __group32 *internal_getgrgid (__gid32_t gid, bool = FALSE);
extern struct __group32 *internal_getgrnam (const char *, bool = FALSE);
extern struct __group32 *internal_getgrent (int);
int internal_getgroups (int, __gid32_t *, cygpsid * = NULL);
d32 1
a32 1
    __group32 **group_buf;
d83 1
a83 1
  pwdgrp (__group32 *&gbuf);
@


1.29.10.1
log
@	* include/cygwin/stat.h (struct __stat64): Drop entirely in favor of
	struct stat.  Accommodate throughout Cygwin.
	* include/cygwin/types.h: Throughout, drop current, internal types
	used since Cygwin 1.5 with the base type they have been used for.
	Throughout, define types based on bitsize-specific types where
	appropriate.  Accommodate throughout Cygwin.
	* include/sys/cygwin.h: Drop __uid32_t and __gid32_t in favor of
	uid_t and gid_t.  Define uid/gid types based on bitsize-specific types.
	(struct external_pinfo): Accommodate above change.
	* cygtls.h (struct _local_storage): Drop unused members grp and
	namearray,
	* tlsoffsets.h: Regenerate.
	* devices.h (_dev_t): Drop definition.  Use dev_t throughout instead.
	* devices.cc: Regenerate.

	Probably temporary patch to drop unneeded functionality on x86_64:
	* fcntl.cc (_fcntl): Alias to fcntl64 on x86_64.
	* glob.cc (CYGWIN_gl_stat): Simplify on x86_64.
	* grp.cc (grp32togrp16): Don't define on x86_64.
	(getgrgid): Alias to getgrgid32 on x86_64.
	(getgrnam): Alias to getgrnam32 on x86_64.
	(getgrent): Alias to getgrent32 on x86_64.
	(getgroups): Alias to getgroups32 on x86_64.
	(initgroups): Alias to initgroups32 on x86_64.
	(setgroups): Alias to setgroups32 on x86_64.
	* mmap.cc (mmap): Alias to mmap64 on x86_64.
	* passwd.cc (getpwuid): Alias to getpwuid32 on x86_64.
	(getpwuid_r): Alias to getpwuid_r32 on x86_64.
	(getpwduid): Don't define on x86_64.
	* syscalls.cc (lseek): Alias to lseek64 on x86_64.
	(_lseek): Alias to lseek64 on x86_64.
	(chown): Alias to chown32 on x86_64.
	(lchown): Alias to lchown32 on x86_64.
	(fchown): Alias to fchown32 on x86_64.
	(stat64_to_stat32): Don't define on x86_64.
	(fstat): Alias to fstat64 on x86_64.
	(_fstat_r): Alias to _fstat64_r on x86_64.
	(stat): Alias to stat64 on x86_64.
	(_stat_r): Alias to _stat64_r on x86_64.
	(lstat): Alias to lstat64 on x86_64.
	(ftruncate): Alias to ftruncate64 on x86_64.
	(truncate): Alias to truncate64 on x86_64.
	(seteuid): Alias to seteuid32 on x86_64.
	(setuid): Alias to setuid32 on x86_64.
	(setreuid): Alias to setreuid32 on x86_64.
	(setegid): Alias to setegid32 on x86_64.
	(setgid): Alias to setgid32 on x86_64.
	(setregid): Alias to setregid32 on x86_64.
	* uinfo.cc (getuid): Alias to getuid32 on x86_64.
	(getgid): Alias to getgid32 on x86_64.
	(geteuid): Alias to geteuid32 on x86_64.
	(getegid): Alias to getegid32 on x86_64.
	* winsup.h (ILLEGAL_UID16): Don't define on x86_64.
	(ILLEGAL_GID16): Ditto.
	(uid16touid32): Don't declare on x86_64.
	(gid16togid32): Don't declare on x86_64.
@
text
@d17 6
a22 6
extern struct passwd *internal_getpwuid (uid_t, bool = FALSE);
extern struct group *internal_getgrsid (cygpsid &);
extern struct group *internal_getgrgid (gid_t gid, bool = FALSE);
extern struct group *internal_getgrnam (const char *, bool = FALSE);
extern struct group *internal_getgrent (int);
int internal_getgroups (int, gid_t *, cygpsid * = NULL);
d32 1
a32 1
    group **group_buf;
d83 1
a83 1
  pwdgrp (group *&gbuf);
@


1.28
log
@	* shared.cc (user_shared_initialize): Fetch potentially changed Cygwin
	username from /etc/passwd before loading mount table.
	(shared_info::init_installation_root): New function fetching Cygwin's
	installation root dir and storing as native NT path in global shared
	memory.
	(shared_info::initialize): Call init_installation_root exactly once at
	first startup.
	* shared_info.h (SHARED_INFO_CB): Accommodate change to shared_info.
	(CURR_SHARED_MAGIC): Ditto.
	(class shared_info): Add installation_root member.
	(shared_info::init_installation_root): Declare.

	* grp.cc (pwdgrp::read_group): Call pwdgrp::load with native WCHAR path.
	* passwd.cc (pwdgrp::read_passwd): Ditto.  Avoid recursion.
	(etc::init): Take POBJECT_ATTRIBUTES instead of path_conv.
	* path.h (etc::init): Change prototype accordingly.
	* pwdgrp.h (class pwdgrp): Store path as UNICODE_STRING/PWCHAR instead
	of as path_conv.
	(pwdgrp::load): Accommodate prototype.
	* uinfo.cc (pwdgrp::load): Change argument type from char to wchar_t.
	Create native NT path here instead of calling path_conv.

	* mount.cc (find_root_from_cygwin_dll): Drop in favor of global
	initializaion in shared_info.
	(mount_info::init): Fetch native NT root dir from cygwin_shared.
	(mount_info::from_fstab): Expect native NT path and use native NT
	functions to access file.  Convert username part in user fstab path
	according to special char transformation rules.
	* path.cc (tfx_chars): Convert slash to backslash.
	(transform_chars): Implement for path given as PWCHAR.
	(transform_chars): PUNICODE_STRING version calls PWCHAR version.
	Remove useless commented code.
@
text
@d78 1
a78 1
	(this->*read) ();
@


1.27
log
@* sync.h (muto::initforce): Delete flawed implementation.
* pwdgrp.h (pwdgrp::pglock): Make static.
* grp.cc (pwdgrp::pwdgrp): Eliminate use of initforce.
@
text
@d38 2
a39 1
  path_conv pc;
d71 1
a71 1
  void load (const char *);
@


1.26
log
@* sync.h (muto::operator int): New operator.
(locker): Remove unused class.
(new_muto): Delete.
(new_muto1): Ditto.
(new_muto_name): Ditto.
* cygheap.cc (cygheap_setup_for_child): Reflect use of static storage for muto
rather than pointer.
(_csbrk): Ditto.
(_cmalloc): Ditto.
(_cmalloc): Ditto.
(_cfree): Ditto.
* cygheap.h (cwdstuff::cwd_lock): Ditto.
(cwdstuff::get_drive): Ditto.
* cygmalloc.h (__malloc_lock): Ditto.
(__malloc_unlock): Ditto.
* cygtls.cc (sentry::lock): Ditto.
(sentry::sentry): Ditto.
(~sentry): Ditto.
(_cygtls::init): Ditto.
* dcrt0.cc: Ditto.
(cygwin_atexit): Ditto.
(cygwin_exit): Ditto.
* debug.cc (lock_debug::locker): Ditto.
(lock_debug::lock_debug): Ditto.
(lock_debug::unlock): Ditto.
(debug_init): Ditto.
* dtable.cc (dtable::init_lock): Ditto.
* dtable.h (dtable::lock_cs): Ditto.
(dtable::lock): Ditto.
(dtable::unlock): Ditto.
* exceptions.cc (mask_sync): Ditto.
(sighold): Ditto.
(set_process_mask_delta): Ditto.
(set_signal_mask): Ditto.
(events_init): Ditto.
* grp.cc (pwdgrp::pwdgrp): Ditto.
* malloc_wrapper.cc (mallock): Ditto.
(malloc_init): Ditto.
* path.cc (cwdstuff::cwd_lock): Ditto.
(cwdstuff::get_hash): Ditto.
(cwdstuff::get_hash): Ditto.
(cwdstuff::init): Ditto.
(cwdstuff::set): Ditto.
(cwdstuff::get): Ditto.
* pwdgrp.h (pwdgrp::pglock): Ditto.
(pwdgrp::refresh): Ditto.
* sigproc.cc (sync_proc_subproc): Ditto.
(get_proc_lock): Ditto.
(proc_subproc): Ditto.
(_cygtls::remove_wq): Ditto.
(proc_terminate): Ditto.
(sigproc_init): Ditto.
* timer.cc (lock_timer_tracker::protect): Ditto.
(lock_timer_tracker::lock_timer_tracker): Ditto.
(lock_timer_tracker::~lock_timer_tracker): Ditto.
* wininfo.cc (wininfo::_lock;): Ditto.
(wininfo::winthread): Ditto.
(operator HWND): Ditto.
(wininfo::lock): Ditto.
(wininfo::release): Ditto.
* wininfo.h (wininfo::_lock;): Ditto.
@
text
@d42 1
a42 1
  muto pglock;
@


1.25
log
@* exceptions.cc (set_signal_mask): Redefine to not pass by address.  Report
calculated mask in debugging output.
* sigproc.h (set_signal_mask): Reflect above change in declaration.
* path.cc (mount_item::build_win32): Take path apart before feeding it to
fnmunge.  Throughout, change use of _reent_winsup()-> to _my_tls.locals.
instead.  Throughout, remove obsolete MT_SAFE/_CYG_THREAD_FAILSAFE
considerations.  Througout, add cygtls.h include.
* Makefile.in (DLL_OFILES): Add cygtls.o.  Add some more objects to the
-fomit-frame-pointer list.
* acconfig.h: Remove obsolete settings.
* config.h.in: Ditto.
* bsdlib.cc: Add cygtls.h include.
* configure.in: Remove --enable-extra-threadsafe-checking.
* configure: Regenerate.
* cygtls.h (_local_storage): New struct renamed from _winsup_t (sic).
(_threadinfo:local_clib): Add new field.
(_threadinfo::locals): Ditto.
(_threadinfo::init_thread): Accept second _reent * argument.
(_threadinfo::call): Define as regparm.
(CYGTLS_PADSIZE): Remove unnecessary slop.
(_getreent): Define as a macro.
* thread.h: Remove _CYG_THREAD_FAILSAFE and MT_SAFE stuff.
(_winsup_t): Move to cygtls.h.
(ResourceLocks::ResourceLocks): Eliminate empty constructor.
(MTinterface::reents): Eliminate.
(MTinterface::thread_self_key): Eliminate.
(MTinterface::MTinterface): Eliminate.
* dcrt0.cc: Include stdio.h for _impure_ptr initialization.
(do_global_ctors): Remove run_ctors_p (sic) considerations.  Don't call atexit
here.
(__main): Initialize destructors for user here.
(dll_crt0_1): Accept a dummy argument.  Don't call init_thread here.  Don't set
_impure_ptr here.  Call do_global_ctors after more things have been
initialized.
(_dll_crt0): Define zeros buffer as max of needed size of CYGTLS_PADSIZE so
that it can be used for two purposes while minimizing stack usage.  Initialize
_impure_ptr specifically, for speed.  Call dll_crt0_1 with buffer argument.
(cygwin_dll_init): Call dll_crt0_1 with dummy argument.
* dtable.cc (dtable::find_unused_handle): Remove call to AssertResourceOwner.
* exceptions.cc: Move _threadinfo stuff to new file.
* cygtls.cc: New file.
* gentls_offsets: Accommodate increasing complexity of cygtls.h.
* hires.h (hires_base::~hires_base): Remove.
* init.cc (dll_entry): Remove setting of reents.
* thread.cc: Remove syslog.h include.
(__getreent): Simplify to use _my_tls.
(_reent_winsup): Delete.
(AssertResourceOwner): Delete.
(MTinterface::Init): Remove setting of _clib and _winsup, with all that
entails.
(MTinterface::fixup_after_fork): Ditto.
(pthread::thread_init_wrapper): Ditto.  Also remove call to
set_tls_self_pointer.
(pthread::set_tls_self_pointer): Eliminate.
(pthread::get_tls_self_pointer): Just return _my_tls.tid;
(__reent_t::init_clib): Eliminate.
* tlsoffsets.h: Regenerate.
@
text
@d42 1
a42 1
  muto *pglock;
d75 1
a75 1
    if (pglock->acquire () == 1 &&
d78 1
a78 1
    pglock->release ();
@


1.24
log
@
* Makefile.in: Add finline-functions optimization to CXXFLAGS.
* autoload.cc (LoadDLLprime): Rename std_dll_init to
_std_dll_init.
(std_dll_init): Remove name mangling prototype. Add attributes
used and noinline.
(wsock_init): Ditto.
Change wsock_init to _wsock_init in wsock32 and ws2_32
LoadDLLprime.
* exceptions.cc (unused_sig_wrapper): Remove prototype. Add
attributes used and noinline.
* pwdgrp.h ((pwdgrp (passwd *&)): Remove inline code.
(pwdgrp (__group32 *&)): Ditto.
* grp.cc (pwdgrp (passwd *&)): Outline constructor.
(pwdgrp (__group32 *&)): Ditto.
@
text
@d25 1
@


1.23
log
@* cygthread.h: Change 'avail' cygthread element to 'inuse' throughout.
* cygthread.cc: Ditto.
(cygthread::stub): Don't initialize already initialized events.
(cygthread::freerange): Don't create thread here.
(cygthread::cygthread): Create thread here.  Die if thread not created.
(cygthread::operator new): Simplify.  Just grab a thread structure from the
pool.  Don't try to start the thread.
(cygthread::terminate_thread): Don't close event handles.  Just reuse them.
Call MEM_RELEASE rather than MEM_DECOMMIT (from Joe Buehler).
@
text
@d80 2
a81 14
  inline pwdgrp (passwd *&pbuf) :
    pwdgrp_buf_elem_size (sizeof (*pbuf)), passwd_buf (&pbuf)
    {
      read = &pwdgrp::read_passwd;
      parse = &pwdgrp::parse_passwd;
      new_muto (pglock);
    }
  inline pwdgrp (__group32 *&gbuf) :
    pwdgrp_buf_elem_size (sizeof (*gbuf)), group_buf (&gbuf)
    {
      read = &pwdgrp::read_group;
      parse = &pwdgrp::parse_group;
      new_muto (pglock);
    }
@


1.22
log
@whitespace cleanup
@
text
@d58 1
a58 1
  bool next_num (int& i)
d70 1
a70 1
  void refresh (bool check)
d80 1
a80 1
  pwdgrp (passwd *&pbuf) :
d87 1
a87 1
  pwdgrp (__group32 *&gbuf) :
@


1.21
log
@	* security.h (class cygpsid): New class.
	(class cygsid): Use cygpsid as base. Remove members psid, get_id,
	get_uid, get_gid, string, debug_printf and the == and != operators.
	(cygsidlist::clear_supp): Only do work if setgroups has been called.
	* sec_helper.cc: Define sid_auth NO_COPY.
	(cygpsid::operator==): New operator.
	(cygpsid::get_id): New function.
	(cygpsid::string): New function.
	(cygsid::string): Delete.
	(cygsid::get_id): Delete.
	* pwdgrp.h: Change arguments of internal_getpwsid,
	internal_getgrsid and internal_getgroups to cygpsid.
	* passwd.cc (internal_getpwsid): Change argument from cygsid to cygpsid.
	* grp.cc (internal_getgrsid): Ditto.
	(internal_getgroups): Ditto.
@
text
@d75 1
a75 1
        (!initialized || (check && etc::file_changed (etc_ix))))
@


1.20
log
@* grp.cc (getgrent32): Only refresh group entries when at beginning.
(internal_getgrsid): Only refresh if uninitialized.
(internal_getgrent): Ditto.
* passwd.cc (getpwent): Only refresh passwd entries when at beginning.
(pwdgrp::read_passwd): linebuf *cannot* be NO_COPY.
(internal_getpwsid): Only refresh if uninitialized.
(getpass): No need to refresh passwd data here.
* pwdgrp.h (refresh): Eliminate default.
@
text
@d15 1
a15 1
extern struct passwd *internal_getpwsid (cygsid &);
d18 1
a18 1
extern struct __group32 *internal_getgrsid (cygsid &);
d22 1
a22 1
int internal_getgroups (int, __gid32_t *, cygsid * = NULL);
@


1.19
log
@* passwd.cc (pwdgrp::read_passwd): linebuf *must* be static (from Pierre
Humblet).
* pwdgrp.h (pwdgrp::refresh): Avoid calling read function if we already have
lock since that means we are in the process of reading the file.
@
text
@d70 1
a70 1
  void refresh (bool check = true)
@


1.18
log
@* strings.h (strechr): New function.
* uinfo.cc (pwdgrp::next_str): Search only for input char in string.  Return
EOS on failure.  Don't check for NULL since it shouldn't be possible.
(pwdgrp::add_line): Revert to replacing '\n' in input line with '\0'.
(pwdgrp::next_num): Pass explicit separator character to next_str.
* grp.cc (pwdgrp::parse_group): Ditto.
* passwd.cc (pwdgrp::parse_passwd): Ditto.  Revamp test for garbage input.
* pwdgrp.h (pwdgrp::next_str): Don't use default parameter.
@
text
@d74 3
a76 3
    pglock->acquire ();
    if (!initialized || (check && etc::file_changed (etc_ix)))
      (this->*read) ();
@


1.17
log
@* include/sys/strace.h (paranoid_printf): Define as not being part of "all"
output.
* pwdgrp.h (pwdgrp::next_num): Rename from next_int.  Returns true/false if
parse operation succeeded.
(pwdgrp::reparse): Remove.
(pwdgrp::raw_ptr): New function.  Returns pointer in line.
(pwdgrp::next_num): New functions for parsing other than unsigned long.
* grp.cc (pwdgrp::parse_group): Reinstate previous parsing behavior.  Don't
fill in fields with NULL and assign empty gr_mem to known pointer rather than
doing a pointless calloc.  Streamline gr_mem parsing.  Don't increment
curr_lines here.
* passwd.cc (pwdgrp::parse_passwd): Use new behavior of next_num.  Don't
increment curr_lines here.
* uinfo.cc (pwdgrp::next_str): Keep returning EOL if out of data.
(pwdgrp::reparse): Remove.
(pwdgrp::next_num): Rename from next_int.  Return bool indicating success of
parse, argument returns value parsed.
(pwdgrp::add_line): Increment curr_lines here on successful parse.
(pwdgrp::load): (from Pierre Humblet) Don't return status.  Just report it
here.
@
text
@d49 1
a49 1
  char *next_str (char = 0);
@


1.16
log
@* pwdgrp.cc (pwdgrp::reparse): Declare.
* uinfo.cc (pwdgrp::reparse): Define.
* grp.cc (pwdgrp::parse_group): Use.
@
text
@d48 1
d50 15
a64 2
  int next_int (char = 0);
  void reparse (char *);
d69 1
a69 1
  bool load (const char *);
@


1.15
log
@* pwdrp.h (pwdgrp::refresh): Lock entire test prior to reading.
* grp.cc (pwdgrp::parse_group): Eliminate arg and use class member instead.
Use next_str and next_int to parse arguments.
* passwd.cc (pwdgrp::parse_passwd): Ditto.
(grab_string): Eliminate.
(grab_int): Ditto.
* pwdgrp.h (pwdgrp::parse): Eliminate input arg.
(pwdgrp::parse_passwd): Reflect above change.
(pwdgrp::parse_group): Reflect above change.
(pwdgrp::next_str): New function.
(pwdgrp::next_int): Ditto.
(pwdgrp::gets): Eliminate.
* uinfo.cc (pwdgrp::next_str): New function.
(pwdgrp::next_int): Ditto.
(pwdgrp::add_line): Subsume gets.
(pwdgrp::gets): Eliminate.
(pwdgrp::load): Just call add_line to parse input buffer.
@
text
@d48 3
a50 2
  char *pwdgrp::next_str (char = 0);
  int pwdgrp::next_int (char = 0);
@


1.14
log
@* grp.cc: Call gr.refresh() rather than doing isunitialized tests throughout.
(gr): Use constructor (sigh).
(pwdgrp::parse_group): Rename from parse_grp.
(pwdgrp::read_group): Rename from read_etc_group.  Just call gr.load with a
single argument.
* passwd.cc: Call pr.refresh() rather than doing isunitialized tests
throughout.
(pr): Use constructor (sigh).
(pwdgrp::parse_passwd): Rename from "parse_pwd".
(pwdgrp::read_passwd): Rename from read_etc_passwd.  Just call pr.load with a
single argument.
* pwdgrp.h (pwdgrp_state): Eliminate.
(pwdgrp): Reflect above renamings.
(pwdgrp::etc_ix): Rename from pwd_ix.
(pwdgrp::read): New element.
(pwdgrp::lock): New element.
(pwdgrp::refresh): New function.
(pwdgrp::load): Eliminate variations which take buffer arguments.
(pwdgrp::pwdgrp): New constructors.  Initialize mutex here.
* uinfo.cc (pwdgrp::load): Accommodate pwd_ix -> etc_ix renaming.
(pwdgrp::load): Set initialized state to true rather than setting state to
loaded.
@
text
@d24 1
d35 1
a35 1
  bool (pwdgrp::*parse) (char *);
d38 1
a38 1
  char *buf;
d41 1
a41 1
  CRITICAL_SECTION lock;
d43 7
a49 1
  char *gets (char*&);
d54 1
a54 6
  bool parse_passwd (char *);
  bool parse_group (char *);
  void read_passwd ();
  void read_group ();

  void add_line (char *);
d57 6
a62 9
    if (initialized && check && etc::file_changed (etc_ix))
      initialized = false;
    if (!initialized)
      {
	EnterCriticalSection (&lock);
	if (!initialized)
	  (this->*read) ();
	LeaveCriticalSection (&lock);
      }
a64 1
  bool load (const char *);
d70 1
a70 1
      InitializeCriticalSection (&lock);
d77 1
a77 1
      InitializeCriticalSection (&lock);
@


1.13
log
@* path.h (etc::change_possible): Revert the type to bool.
(etc::set_last_modified): Remove obsolete function.
* path.cc (etc::change_possible): Revert type to bool.
(etc::test_file_change): Do not test for negative values of change_possible and
do not set it to -res.
(etc::dir_changed): When the handle is NULL, call memset instead of
test_file_changed.  When the handle is invalid, return true.
(etc::file_changed): Remove unneeded check for !fn[n].
@
text
@a23 6
enum pwdgrp_state {
  uninitialized = 0,
  initializing,
  loaded
};

d26 1
a26 5
  pwdgrp_state state;
  int pwd_ix;
  path_conv pc;
  char *buf;
  int max_lines;
d33 1
a33 1
  unsigned pwdgrp_buf_elem_size;
d35 6
a42 2
  bool parse_pwd (char *);
  bool parse_grp (char *);
d47 5
d53 1
a53 1
  bool isinitializing ()
d55 9
a63 5
    if (state <= initializing)
      state = initializing;
    else if (etc::file_changed (pwd_ix))
      state = initializing;
    return state == initializing;
a64 1
  bool isuninitialized () const { return state == uninitialized; }
d67 14
a80 14
  bool load (const char *posix_fname, passwd *&buf)
  {
    passwd_buf = &buf;
    pwdgrp_buf_elem_size = sizeof (*buf);
    parse = &pwdgrp::parse_pwd;
    return load (posix_fname);
  }
  bool load (const char *posix_fname, __group32 *&buf)
  {
    group_buf = &buf;
    pwdgrp_buf_elem_size = sizeof (*buf);
    parse = &pwdgrp::parse_grp;
    return load (posix_fname);
  }
@


1.12
log
@* pwdgrp.h (etc): Move to path.h.
(pwdgrp::max_lines): New field.
(pwdgrp::curr_lines): New field.
(pwdgrp::pwdgrp_buf): Ditto.
(pwdgrp_buf_elem_size): Ditto.
(pwdgrp_parse): Ditto.
(pwdgrp::gets): Just declare here.
(pwdgrp::load): Ditto.  Just take one argument.
(pwdgrp::load): Define overloaded function accepting passwd buf.
(pwdgrp::load): Define overloaded function accepting group buf.
* grp.cc: Use pwdgrp elements rather than standalone static variables
throughout.
(curr_lines): Eliminate.
(max_lines): Ditto.
(add_grp_line): Ditto.
(parse_grp): Define as returning boolean.  Accept void * arg and line count.
Coerce first argument into __group32 buf reference.  Increment curr_line as
appropriate.
(read_etc_group): Pass pwdgrp buffer to gr.load.
* passwd.cc: Use pwdgrp elements rather than standalone static variables
throughout.
(curr_lines): Eliminate.
(max_lines): Ditto.
(add_grp_line): Ditto.
(parse_passwd): Define as returning boolean.  Accept void * arg and line count.
Coerce first argument into passwd buf reference.  Increment curr_line as
appropriate.
(read_etc_group): Pass pwdgrp buffer to pr.load.
* path.cc (etc::fn): Extend buffer size to allow index by 1 rather than zero.
(etc::last_modified): Ditto.
(etc::change_possible): Ditto.  Renamed from sawchange.  Change to signed char
since elements are now tri-state.
(etc::init): Assume "handle" is 1 based rather than 0.
(etc::test_file_change): New function.  Sets change_possible based on file date
comparison.
(etc::dir_changed): Check file states immediately after changed_h is
initialized to avoid a race.
(etc::file_changed): Use test_file_change to detect if file needs to be
updated.
* path.h (etc): Move class here from pwdgrp.h.
* uinfo.cc: Move etc:: functions to path.cc.  Move pwdgrp functions here.
(pwdgrp::gets): Eliminate buf checks.  Just check eptr and set lptr.
(pwdgrp::add_line): New function.
(pwdgrp::load): Call generic add_line function which will call correct parser.
@
text
@a61 1
  void operator = (pwdgrp_state nstate) { state = nstate; }
@


1.11
log
@* dcrt0.cc (initialize_env): Use colon for CYGWIN_DEBUG separator.
* grp.cc: Change most statics to NO_COPY throughout.
* passwd.cc: Ditto.
* pwdgrp.h: Change some BOOLs to bools.
(pwdgrp::pwdgrp): Remove unneeded constructor.
* passwd.cc: Change BOOL to bool throughout.
@
text
@a29 14
#define MAX_ETC_FILES 2
class etc
{
  static int curr_ix;
  static bool sawchange[MAX_ETC_FILES];
  static const char *fn[MAX_ETC_FILES];
  static FILETIME last_modified[MAX_ETC_FILES];
  static bool dir_changed (int);
  static int init (int, const char *);
  static bool file_changed (int);
  static void set_last_modified (int, FILETIME&);
  friend class pwdgrp;
};

d36 2
a37 3
  char *lptr, *eptr;

  char *gets ()
d39 10
a48 17
    if (!buf)
      lptr = NULL;
    else if (!eptr)
      lptr = NULL;
    else
      {
	lptr = eptr;
	eptr = strchr (lptr, '\n');
	if (eptr)
	  {
	    if (eptr > lptr && *(eptr - 1) == '\r')
	      *(eptr - 1) = 0;
	    *eptr++ = '\0';
	  }
      }
    return lptr;
  }
d51 3
d55 7
a61 7
    {
      if (state <= initializing)
	state = initializing;
      else if (etc::file_changed (pwd_ix - 1))
	state = initializing;
      return state == initializing;
    }
d65 2
a66 1
  bool load (const char *posix_fname, void (* add_line) (char *))
d68 11
a78 45
    if (buf)
      free (buf);
    buf = lptr = eptr = NULL;

    pc.check (posix_fname);
    pwd_ix = etc::init (pwd_ix - 1, pc) + 1;

    paranoid_printf ("%s", posix_fname);

    bool res;
    if (pc.error || !pc.exists () || !pc.isdisk () || pc.isdir ())
      res = false;
    else
      {
	HANDLE fh = CreateFile (pc, GENERIC_READ, wincap.shared (), NULL,
				OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, 0);
	if (fh == INVALID_HANDLE_VALUE)
	  res = false;
	else
	  {
	    DWORD size = GetFileSize (fh, NULL), read_bytes;
	    buf = (char *) malloc (size + 1);
	    if (!ReadFile (fh, buf, size, &read_bytes, NULL))
	      {
		if (buf)
		  free (buf);
		buf = NULL;
		fh = NULL;
		return false;
	      }
	    buf[read_bytes] = '\0';
	    eptr = buf;
	    CloseHandle (fh);
	    FILETIME ft;
	    if (GetFileTime (fh, NULL, NULL, &ft))
	      etc::set_last_modified (pwd_ix - 1, ft);
	    char *line;
	    while ((line = gets()) != NULL)
	      add_line (line);
	    res = true;
	  }
      }

    state = loaded;
    return res;
@


1.10
log
@update copyright
@
text
@d16 2
a17 2
extern struct passwd *internal_getpwnam (const char *, BOOL = FALSE);
extern struct passwd *internal_getpwuid (__uid32_t, BOOL = FALSE);
d19 2
a20 2
extern struct __group32 *internal_getgrgid (__gid32_t gid, BOOL = FALSE);
extern struct __group32 *internal_getgrnam (const char *, BOOL = FALSE);
d73 1
a73 2
  pwdgrp () : state (uninitialized) {}
  BOOL isinitializing ()
d82 1
a82 1
  BOOL isuninitialized () const { return state == uninitialized; }
@


1.9
log
@* grp.cc (read_etc_group): On NT, add a line for gid = -1.  Change name
"unknown" to "mkgroup".
(internal_getgrgid): Do not return default in nontsec case.
(internal_getgroups): Add argument srchsid and look for it in groups if not
NULL.
* passwd.cc (read_etc_passwd): On NT, add a line for uid = -1.  Use same
default uid for Win95 and NT.  Call cygheap_user::ontherange to initialize
HOME.
* cygheap.cc (init_cygheap::etc_changed): Move to uinfo.cc.
* cygheap.h (init_cygheap::etc_changed_h): Remove.
(init_cygheap::etc_changed): Ditto.
* grp.cc (group_state): Remove.  Use gr instead throughout.
(gr): Define as class pwdgrp.
(read_etc_group): Remove gr definition.  Remove calls to set_last_modified and
close.  Pass add_grp to gr.load to load file.
* passwd.cc (passwd_state): Remove.  Use pr instead, throughout.
(pr): Define as class pwdgrp.
(read_etc_passwd): Remove pr definition.  Remove calls to set_last_modified and
close.  Pass add_pwd_line to pr.load to load file.
* pwdgrp.h (etc): New helper class for pwdgrp.
(pwdgrp): Combine pwdgrp_check and pwdgrp_read into one class.  Remove file_w32
and last_modified fields.
(pwdgrp::set_last_modified): Remove.
(pwdgrp::isinitializing): Remove FindFirstFile stuff.  Move to
etc::file_changed.
(pwdgrp::load): Rename from 'open'.  Call etc::init to initialize etc scanning.
Close file handle after reading buffer into memory.  Parse buffer by calling
second argument.
(pwdgrp::gets): Reorganize slightly to rely on eptr starting at beginning of
buffer.  Free buffer when memory exhausted.
(pwdgrp::close): Remove.
* uinfo.cc (etc::dir_changed): New function.
(etc::init): Ditto.
(etc::file_changed): Ditto.
(etc::set_last_modified): Ditto.
@
text
@d3 1
a3 1
   Copyright 2001 Red Hat inc.
@


1.8
log
@2002-12-10  Pierre Humblet <pierre.humblet@@ieee.org>

	* pwdgrp.h (pwdgrp_check::pwdgrp_state): Replace by
	pwdgrp_check::isinitializing ().
	(pwdgrp_check::isinitializing): Create.
	* passwd.cc (grab_int): Change type to unsigned, use strtoul and
	set the pointer content to 0 if the field is invalid.
	(parse_pwd): Move validity test after getting pw_gid.
	(read_etc_passwd): Replace "passwd_state <= " by
	passwd_state::isinitializing ().
	(internal_getpwuid): Ditto.
	(internal_getpwnam): Ditto.
	(getpwent): Ditto.
	(getpass): Ditto.
	* grp.cc (parse_grp): Use strtoul for gr_gid and verify the validity.
	(read_etc_group): Replace "group_state <= " by
	group_state::isinitializing ().
	(internal_getgrgid): Ditto.
	(getgrent32): Ditto.
	(internal_getgrent): Ditto.

2002-12-10  Pierre Humblet <pierre.humblet@@ieee.org>

	* security.h: Move declarations of internal_getgrent,
	internal_getpwsid and internal_getgrsid to pwdgrp.h.
	* pwdgrp.h: Declare internal_getpwsid, internal_getpwnam,
	internal_getpwuid, internal_getgrsid, internal_getgrgid,
	internal_getgrnam, internal_getgrent and internal_getgroups.
	Delete "emulated" from enum pwdgrp_state.
	(pwdgrp_check::isuninitialized): Create.
	(pwdgrp_check::pwdgrp_state): Change state to initializing
	rather than to uninitialized.
	(pwdgrp_read::gets): Remove trailing CRs.
	* passwd.cc (grab_string): Don't look for NLs.
	(grab_int): Ditto.
	(parse_pwd): Don't look for CRs. Return 0 if entry is too short.
	(search_for): Delete.
	(read_etc_passwd): Simplify tests to actually read the file.
	Set state to loaded before making internal_getpwXX calls.
	Replace search_for calls by equivalent internal_pwgetXX calls.
	(internal_getpwsid): Use passwd_state.isuninitialized to decide
	to call read_etc_passwd.
	(internal_getpwuid): Create.
	(internal_getpwnam): Create.
	(getpwuid32): Simply call internal_getpwuid.
	(getpwuid_r32): Call internal_getpwuid.
	(getpwnam): Simply call internal_getpwnam.
	(getpwnam_r): Call internal_getpwnam.
	* grp.cc (parse_grp): Don't look for CRs. Adjust blank space.
	(add_grp_line): Adjust blank space.
	(class group_lock): Ditto.
	(read_etc_group): Simplify tests to actually read the file.
	Set state to loaded before making internal_getgrXX calls.
	Replace getgrXX calls by equivalent internal calls.
	(internal_getgrsid): Use group_state.isuninitialized to decide
	to call read_etc_group.
	(internal_getgrgid): Create.
	(internal_getgrnam): Create.
	(getgroups32): Simply call internal_getgrgid.
	(getgrnam32): Simply call internal_getgrnam.
	(internal_getgrent): Call group_state.isuninitialized.
	(internal_getgroups): Create from the former getgroups32, using
	two of the four arguments. Set gid to myself->gid and username
	to cygheap->user.name ().
	(getgroups32): Simply call internal_getgroup.
	(getgroups): Call internal_getgroup instead of getgroups32.
	(setgroups32): Call internal versions of get{pw,gr}XX.
	* sec_helper.cc: Include pwdgrp.h.
	(is_grp_member): Call internal versions of get{pw,gr}XX.
	* security.cc: Include pwdgrp.h.
	(alloc_sd): Call internal versions of get{pw,gr}XX.
	* syscalls.cc: Include pwdgrp.h.
	(seteuid32): Call internal versions of get{pw,gr}XX.
	(setegid32): Ditto.
	* uinfo.cc: Include pwdgrp.h.
	(internal_getlogin): Call internal versions of get{pw,gr}XX.
	(cygheap_user::ontherange): Ditto.
	* sec_acl.cc: Include pwdgrp.h.
	(setacl): Call internal versions of get{pw,gr}XX.
	(acl_access): Ditto and simplify logic.
	(aclfromtext): Ditto.
@
text
@d22 1
a22 1
int internal_getgroups (int, __gid32_t *);
d30 41
a70 4
class pwdgrp_check {
  pwdgrp_state	state;
  FILETIME	last_modified;
  char		file_w32[MAX_PATH];
d73 1
a73 1
  pwdgrp_check () : state (uninitialized) {}
d78 2
a79 17
      else if (cygheap->etc_changed ())
        {
	  if (!file_w32[0])
	    state = initializing;
	  else
	    {
	      HANDLE h;
	      WIN32_FIND_DATA data;

	      if ((h = FindFirstFile (file_w32, &data)) != INVALID_HANDLE_VALUE)
	        {
		  if (CompareFileTime (&data.ftLastWriteTime, &last_modified) > 0)
		    state = initializing;
		  FindClose (h);
		}
	    }
	}
d82 1
a82 4
  void operator = (pwdgrp_state nstate)
    {
      state = nstate;
    }
a83 13
  void set_last_modified (HANDLE fh, const char *name)
    {
      if (!file_w32[0])
	strcpy (file_w32, name);
      GetFileTime (fh, NULL, NULL, &last_modified);
    }
};

class pwdgrp_read {
  path_conv pc;
  HANDLE fh;
  char *buf;
  char *lptr, *eptr;
d85 1
a85 2
public:
  bool open (const char *posix_fname)
d92 5
d98 2
a99 5
      return false;

    fh = CreateFile (pc, GENERIC_READ, wincap.shared (), NULL, OPEN_EXISTING,
		     FILE_ATTRIBUTE_NORMAL, 0);
    if (fh != INVALID_HANDLE_VALUE)
d101 5
a105 3
	DWORD size = GetFileSize (fh, NULL), read_bytes;
	buf = (char *) malloc (size + 1);
	if (!ReadFile (fh, buf, size, &read_bytes, NULL))
d107 12
a118 3
	    if (buf)
	      free (buf);
	    buf = NULL;
d120 7
a126 2
	    fh = NULL;
	    return false;
a127 2
	buf[read_bytes] = '\0';
	return true;
d129 3
a131 28
    return false;
  }
  char *gets ()
  {
    if (!buf)
      return NULL;
    if (!lptr)
      lptr = buf;
    else if (!eptr)
      return lptr = NULL;
    else
      lptr = eptr;
    eptr = strchr (lptr, '\n');
    if (eptr)
      {
	if (eptr > lptr && *(eptr - 1) == '\r')
          *(eptr - 1) = 0;
	*eptr++ = '\0';
      }
    return lptr;
  }
  inline HANDLE get_fhandle () { return fh; }
  inline const char *get_fname () { return pc; }
  void close ()
  {
    if (fh)
      CloseHandle (fh);
    fh = NULL;
@


1.8.4.1
log
@trunk merge
@
text
@d3 1
a3 1
   Copyright 2001, 2002, 2003 Red Hat inc.
d16 2
a17 2
extern struct passwd *internal_getpwnam (const char *, bool = FALSE);
extern struct passwd *internal_getpwuid (__uid32_t, bool = FALSE);
d19 2
a20 2
extern struct __group32 *internal_getgrgid (__gid32_t gid, bool = FALSE);
extern struct __group32 *internal_getgrnam (const char *, bool = FALSE);
d22 1
a22 1
int internal_getgroups (int, __gid32_t *, cygsid * = NULL);
d24 10
a33 26
#include "sync.h"
class pwdgrp
{
  unsigned pwdgrp_buf_elem_size;
  union
  {
    passwd **passwd_buf;
    __group32 **group_buf;
    void **pwdgrp_buf;
  };
  void (pwdgrp::*read) ();
  bool (pwdgrp::*parse) ();
  int etc_ix;
  path_conv pc;
  char *buf, *lptr;
  int max_lines;
  bool initialized;
  muto *pglock;

  bool parse_passwd ();
  bool parse_group ();
  void read_passwd ();
  void read_group ();
  char *add_line (char *);
  char *pwdgrp::next_str (char = 0);
  int pwdgrp::next_int (char = 0);
d36 25
a60 15
  int curr_lines;

  bool load (const char *);
  void refresh (bool check = true)
  {
    if (!check && initialized)
      return;
    pglock->acquire ();
    if (!initialized || (check && etc::file_changed (etc_ix)))
      (this->*read) ();
    pglock->release ();
  }

  pwdgrp (passwd *&pbuf) :
    pwdgrp_buf_elem_size (sizeof (*pbuf)), passwd_buf (&pbuf)
d62 1
a62 3
      read = &pwdgrp::read_passwd;
      parse = &pwdgrp::parse_passwd;
      new_muto (pglock);
d64 2
a65 2
  pwdgrp (__group32 *&gbuf) :
    pwdgrp_buf_elem_size (sizeof (*gbuf)), group_buf (&gbuf)
d67 3
a69 3
      read = &pwdgrp::read_group;
      parse = &pwdgrp::parse_group;
      new_muto (pglock);
d71 66
@


1.8.4.2
log
@merge from trunk
@
text
@d48 2
a49 3
  char *next_str (char = 0);
  int next_int (char = 0);
  void reparse (char *);
@


1.8.4.3
log
@merge from trunk
@
text
@a47 1
  char *raw_ptr () const {return lptr;}
d49 2
a50 15
  bool next_num (unsigned long&);
  bool next_num (unsigned int& i)
  {
    unsigned long x;
    bool res = next_num (x);
    i = (unsigned int) x;
    return res;
  }
  bool next_num (int& i)
  {
    unsigned long x;
    bool res = next_num (x);
    i = (int) x;
    return res;
  }
d55 1
a55 1
  void load (const char *);
@


1.8.4.4
log
@merge from trunk
@
text
@d49 1
a49 1
  char *next_str (char);
@


1.8.4.5
log
@merge from trunk
@
text
@d74 3
a76 3
    if (pglock->acquire () == 1 &&
        (!initialized || (check && etc::file_changed (etc_ix))))
	(this->*read) ();
@


1.8.4.6
log
@merge from trunk
@
text
@d70 1
a70 1
  void refresh (bool check)
@


1.8.4.7
log
@merge from trunk
@
text
@d15 1
a15 1
extern struct passwd *internal_getpwsid (cygpsid &);
d18 1
a18 1
extern struct __group32 *internal_getgrsid (cygpsid &);
d22 1
a22 1
int internal_getgroups (int, __gid32_t *, cygpsid * = NULL);
@


1.8.4.8
log
@merge from trunk
@
text
@d75 1
a75 1
	(!initialized || (check && etc::file_changed (etc_ix))))
@


1.8.4.9
log
@merge from trunk
@
text
@d58 1
a58 1
  inline bool next_num (int& i)
d70 1
a70 1
  inline void refresh (bool check)
d80 14
a93 2
  pwdgrp (passwd *&pbuf);
  pwdgrp (__group32 *&gbuf);
@


1.7
log
@* pwdgrp.h (pwdgrp_read::open): Compare fh to INVALID_HANDLE_VALUE.
@
text
@d13 11
a26 1
  emulated,
d37 1
a37 1
  operator pwdgrp_state ()
d39 10
a48 4
      if (state != uninitialized && file_w32[0] && cygheap->etc_changed ())
	{
	  HANDLE h;
	  WIN32_FIND_DATA data;
d50 6
a55 5
	  if ((h = FindFirstFile (file_w32, &data)) != INVALID_HANDLE_VALUE)
	    {
	      if (CompareFileTime (&data.ftLastWriteTime, &last_modified) > 0)
		state = uninitialized;
	      FindClose (h);
d58 1
a58 1
      return state;
d64 1
d122 5
a126 1
      *eptr++ = '\0';
@


1.6
log
@	* pwdgrp.h (pwdgrp_read::pwdgrp_read): Remove.
	(pwdgrp_read::~pwdgrp_read): Ditto.
	(pwdgrp_read::open): Reset fh to NULL instead of INVALID_HANDLE_VALUE.
	(pwdgrp_read::close): Ditto.
@
text
@d74 1
a74 1
    if (fh)
d87 1
a87 1
        buf[read_bytes] = '\0';
@


1.5
log
@        * pwdgrp.h (pwdgrp_read::~pwdgrp_read): Avoid compiler warning.
@
text
@a61 10
  pwdgrp_read ()
  : fh (INVALID_HANDLE_VALUE), buf (NULL), lptr (NULL), eptr (NULL) {}
  virtual ~pwdgrp_read ()
  {
    if (fh != INVALID_HANDLE_VALUE)
      CloseHandle (fh);
    if (buf)
      free (buf);
  }

d84 1
a84 1
	    fh = INVALID_HANDLE_VALUE;
d111 1
a111 1
    if (fh != INVALID_HANDLE_VALUE)
d113 1
a113 1
    fh = INVALID_HANDLE_VALUE;
@


1.4
log
@	* grp.cc (etc_group): Removed.
	(parse_grp): Make line parameter nonconst.  Don't copy data into new
	allocated memory.  Check for CR instead of LF to accomodate new
	read method.
	(add_grp_line): Make line parameter nonconst.
	(read_etc_group): Rearrange using new pwdgrp_read class.
	* passwd.cc (parse_pwd): Don't copy data into new allocated memory.
	Check for CR instead of LF to accomodate new read method.
	(read_etc_passwd): Rearrange using new pwdgrp_read class.
	* pwdgrp.h (pwdgrp_check::set_last_modified):  Use different
	parameters.
	(class pwdgrp_read): New class for opening and reading passwd and
	group files.
@
text
@d66 2
a67 1
    close ();
@


1.3
log
@Eliminate excess whitespace.
@
text
@d47 1
a47 1
  void set_last_modified (FILE *f)
d50 20
a69 1
	strcpy (file_w32, cygheap->fdtab[fileno (f)]->get_win32_name ());
d71 53
a123 3
      GetFileTime (cygheap->fdtab[fileno (f)]->get_handle (),
		   NULL, NULL, &last_modified);
    }
@


1.2
log
@	* pwdgrp.h (pwdgrp_check::set_last_modified): Call GetFileTime()
	instead of GetFileInformationByHandle().
@
text
@d30 3
a32 3
        {
          HANDLE h;
          WIN32_FIND_DATA data;
d34 7
a40 7
          if ((h = FindFirstFile (file_w32, &data)) != INVALID_HANDLE_VALUE)
            {
              if (CompareFileTime (&data.ftLastWriteTime, &last_modified) > 0)
                state = uninitialized;
              FindClose (h);
            }
        }
d50 1
a50 1
        strcpy (file_w32, cygheap->fdtab[fileno (f)]->get_win32_name ());
@


1.2.4.1
log
@Merged changes from HEAD
@
text
@d30 3
a32 3
	{
	  HANDLE h;
	  WIN32_FIND_DATA data;
d34 7
a40 7
	  if ((h = FindFirstFile (file_w32, &data)) != INVALID_HANDLE_VALUE)
	    {
	      if (CompareFileTime (&data.ftLastWriteTime, &last_modified) > 0)
		state = uninitialized;
	      FindClose (h);
	    }
	}
d50 1
a50 1
	strcpy (file_w32, cygheap->fdtab[fileno (f)]->get_win32_name ());
@


1.2.4.2
log
@Merged changes from HEAD
@
text
@d47 1
a47 1
  void set_last_modified (HANDLE fh, const char *name)
d50 4
a53 2
	strcpy (file_w32, name);
      GetFileTime (fh, NULL, NULL, &last_modified);
a54 71
};

class pwdgrp_read {
  path_conv pc;
  HANDLE fh;
  char *buf;
  char *lptr, *eptr;

public:
  pwdgrp_read ()
  : fh (INVALID_HANDLE_VALUE), buf (NULL), lptr (NULL), eptr (NULL) {}
  virtual ~pwdgrp_read ()
  {
    close ();
    if (buf)
      free (buf);
  }

  bool open (const char *posix_fname)
  {
    if (buf)
      free (buf);
    buf = lptr = eptr = NULL;

    pc.check (posix_fname);
    if (pc.error || !pc.exists () || !pc.isdisk () || pc.isdir ())
      return false;

    fh = CreateFile (pc, GENERIC_READ, wincap.shared (), NULL, OPEN_EXISTING,
		     FILE_ATTRIBUTE_NORMAL, 0);
    if (fh)
      {
	DWORD size = GetFileSize (fh, NULL), read_bytes;
	buf = (char *) malloc (size + 1);
	if (!ReadFile (fh, buf, size, &read_bytes, NULL))
	  {
	    if (buf)
	      free (buf);
	    buf = NULL;
	    CloseHandle (fh);
	    fh = INVALID_HANDLE_VALUE;
	    return false;
	  }
        buf[read_bytes] = '\0';
	return true;
      }
    return false;
  }
  char *gets ()
  {
    if (!buf)
      return NULL;
    if (!lptr)
      lptr = buf;
    else if (!eptr)
      return lptr = NULL;
    else
      lptr = eptr;
    eptr = strchr (lptr, '\n');
    if (eptr)
      *eptr++ = '\0';
    return lptr;
  }
  inline HANDLE get_fhandle () { return fh; }
  inline const char *get_fname () { return pc; }
  void close ()
  {
    if (fh != INVALID_HANDLE_VALUE)
      CloseHandle (fh);
    fh = INVALID_HANDLE_VALUE;
  }
@


1.2.4.3
log
@Merged changes from HEAD
@
text
@d66 1
a66 2
    if (fh != INVALID_HANDLE_VALUE)
      CloseHandle (fh);
@


1.2.4.4
log
@Merged changes from HEAD
@
text
@d62 10
d94 1
a94 1
	    fh = NULL;
d121 1
a121 1
    if (fh)
d123 1
a123 1
    fh = NULL;
@


1.1
log
@	* cygheap.cc (init_cygheap::etc_changed): New method to signal
	a change in /etc.
	* cygheap.h (struct init_cygheap): Add member `etc_changed_h'
	and method `etc_changed'.
	* grp.cc (enum grp_state): Eliminate.
	(class grp_check): Ditto.
	(group_state): Define as `class pwdgrp_check'.
	(parse_grp): Remeber path and modification time of /etc/group file.
	* passwd.cc (enum_pwd_state): Eliminate.
	(class pwd_check): Ditto.
	(passwd_state): Define as `class pwdgrp_check'.
	(read_etc_passwd): Remember path and modification time of /etc/passwd
	file.
	* pwdgrp.h: New file.
	(enum pwdgrp_state): Substitutes `pwd_state' and `grp_state'.
	(class pwdgrp_check): Substitutes `pwd_check' and `grp_check'.
@
text
@d52 2
a53 4
      BY_HANDLE_FILE_INFORMATION inf;
      if (GetFileInformationByHandle (cygheap->fdtab[fileno (f)]->get_handle (),
                                      &inf))
        last_modified = inf.ftLastWriteTime;
@

