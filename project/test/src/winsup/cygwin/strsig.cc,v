head	1.9;
access;
symbols
	cygwin-1_7_35-release:1.9
	cygwin-1_7_34-release:1.9
	cygwin-1_7_33-release:1.9
	cygwin-1_7_32-release:1.9
	cygwin-1_7_31-release:1.9
	cygwin-1_7_30-release:1.9
	cygwin-1_7_29-release:1.9
	cygwin-1_7_29-release-branchpoint:1.9.0.2
	cygwin-pre-user-db:1.9
	cygwin-1_7_28-release:1.9
	cygwin-1_7_27-release:1.9
	cygwin-1_7_26-release:1.9
	cygwin-1_7_25-release:1.9
	cygwin-1_7_24-release:1.9
	cygwin-1_7_23-release:1.9
	cygwin-1_7_22-release:1.9
	cygwin-1_7_21-release:1.9
	cygwin-1_7_20-release:1.9
	cygwin-1_7_19-release:1.9
	cygwin-64bit-postmerge:1.9
	cygwin-64bit-premerge-branch:1.8.0.6
	cygwin-64bit-premerge:1.8
	cygwin-1_7_18-release:1.8
	post-ptmalloc3:1.8.4.3
	pre-ptmalloc3:1.8.4.3
	cygwin-1_7_17-release:1.8
	cygwin-64bit-branch:1.8.0.4
	cygwin-1_7_16-release:1.8
	cygwin-1_7_15-release:1.8
	cygwin-1_7_14_2-release:1.8
	cygwin-1_7_14-release:1.8
	cygwin-1_7_12-release:1.8
	cygwin-1_7_11-release:1.8
	cygwin-1_7_10-release:1.8
	signal-rewrite:1.8.0.2
	pre-notty:1.8
	cygwin-1_7_9-release:1.7
	cv-post-1_7_9:1.7.0.2
	cygwin-1_7_8-release:1.7
	cygwin-1_7_7-release:1.7
	cygwin-1_7_5-release:1.7
	cygwin-1_7_4-release:1.7
	cygwin-1_7_3-release:1.7
	cygwin-1_7_2-release:1.7
	fifo_doover3:1.5.0.4
	cygwin-1_7_1-release:1.5
	prefifo:1.5
	cv-branch-2:1.5.0.2
	pre-ripout-set_console_state_for_spawn:1.3
	EOL_registry_mounts:1.2
	preoverlapped:1.1
	drop_9x_support_start:1.1
	cr-0x5f1:1.1.0.12
	cv-branch:1.1.0.10
	pre-ptymaster-archetype:1.1
	cr-0x3b58:1.1.0.8
	cr-0x5ef:1.1.0.6
	after-mmap-privanon-noreserve:1.1
	after-mmap-revamp:1.1
	before-mmap-revamp:1.1
	cgf-more-exit-sync:1.1
	post_wait_sig_exit:1.1
	pre_wait_sig_exit:1.1
	reparent-point:1.1
	noreparent:1.1.0.4
	cr-0x5e6:1.1.0.2;
locks; strict;
comment	@// @;


1.9
date	2013.04.23.09.44.33;	author corinna;	state Exp;
branches;
next	1.8;

1.8
date	2011.05.04.22.12.15;	author yselkowitz;	state Exp;
branches
	1.8.4.1;
next	1.7;

1.7
date	2010.02.26.16.00.17;	author corinna;	state Exp;
branches;
next	1.6;

1.6
date	2010.02.26.05.43.50;	author yselkowitz;	state Exp;
branches;
next	1.5;

1.5
date	2008.09.11.06.22.31;	author cgf;	state Exp;
branches;
next	1.4;

1.4
date	2008.06.19.00.02.13;	author cgf;	state Exp;
branches;
next	1.3;

1.3
date	2008.04.07.18.45.59;	author cgf;	state Exp;
branches;
next	1.2;

1.2
date	2007.07.10.00.12.54;	author cgf;	state Exp;
branches;
next	1.1;

1.1
date	2004.02.03.21.59.26;	author cgf;	state Exp;
branches;
next	;

1.8.4.1
date	2012.08.13.20.04.35;	author corinna;	state Exp;
branches;
next	1.8.4.2;

1.8.4.2
date	2012.10.30.11.16.44;	author corinna;	state Exp;
branches;
next	1.8.4.3;

1.8.4.3
date	2013.02.09.20.38.03;	author corinna;	state Exp;
branches;
next	;


desc
@@


1.9
log
@	* Merge in cygwin-64bit-branch.
@
text
@/* strsig.cc

   Copyright 2004, 2007, 2008, 2010, 2011, 2013 Red Hat, Inc.

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */

#include "winsup.h"
#include <cygtls.h>
#include <stdio.h>
#include <string.h>

struct sigdesc
{
  int n;
  const char *name;
  const char *str;
};

#define __signals_common \
  _s(SIGHUP, "Hangup"),				/*  1 */ \
  _s(SIGINT, "Interrupt"),			/*  2 */ \
  _s(SIGQUIT, "Quit"),				/*  3 */ \
  _s(SIGILL, "Illegal instruction"),		/*  4 */ \
  _s(SIGTRAP, "Trace/breakpoint trap"),		/*  5 */ \
  _s(SIGABRT, "Aborted"),			/*  6 */ \
  _s(SIGEMT, "EMT instruction"),		/*  7 */ \
  _s(SIGFPE, "Floating point exception"),	/*  8 */ \
  _s(SIGKILL, "Killed"),			/*  9 */ \
  _s(SIGBUS, "Bus error"),			/* 10 */ \
  _s(SIGSEGV, "Segmentation fault"),		/* 11 */ \
  _s(SIGSYS, "Bad system call"),		/* 12 */ \
  _s(SIGPIPE, "Broken pipe"),			/* 13 */ \
  _s(SIGALRM, "Alarm clock"),			/* 14 */ \
  _s(SIGTERM, "Terminated"),			/* 15 */ \
  _s(SIGURG, "Urgent I/O condition"),		/* 16 */ \
  _s(SIGSTOP, "Stopped (signal)"),		/* 17 */ \
  _s(SIGTSTP, "Stopped"),			/* 18 */ \
  _s(SIGCONT, "Continued"),			/* 19 */ \
  _s2(SIGCHLD, "Child exited",			/* 20 */ \
      SIGCLD, "Child exited"),				 \
  _s(SIGTTIN, "Stopped (tty input)"),		/* 21 */ \
  _s(SIGTTOU, "Stopped (tty output)"),		/* 22 */ \
  _s2(SIGIO, "I/O possible",			/* 23 */ \
      SIGPOLL, "I/O possible"),				 \
  _s(SIGXCPU, "CPU time limit exceeded"),	/* 24 */ \
  _s(SIGXFSZ, "File size limit exceeded"),	/* 25 */ \
  _s(SIGVTALRM, "Virtual timer expired"),	/* 26 */ \
  _s(SIGPROF, "Profiling timer expired"),	/* 27 */ \
  _s(SIGWINCH, "Window changed"),		/* 28 */ \
  _s2(SIGPWR, "Power failure",			/* 29 */ \
      SIGLOST, "Resource lost"),			 \
  _s(SIGUSR1, "User defined signal 1"),		/* 30 */ \
  _s(SIGUSR2, "User defined signal 2"),		/* 31 */

#ifdef __x86_64__
# define __signals \
  __signals_common \
  _s(SIGRTMIN, "Real-time signal 0"),		/* 32 */ \
  _s(SIGRTMIN + 1, "Real-time signal 1"),	/* 33 */ \
  _s(SIGRTMIN + 2, "Real-time signal 2"),	/* 34 */ \
  _s(SIGRTMIN + 3, "Real-time signal 3"),	/* 35 */ \
  _s(SIGRTMIN + 4, "Real-time signal 4"),	/* 36 */ \
  _s(SIGRTMIN + 5, "Real-time signal 5"),	/* 37 */ \
  _s(SIGRTMIN + 6, "Real-time signal 6"),	/* 38 */ \
  _s(SIGRTMIN + 7, "Real-time signal 7"),	/* 39 */ \
  _s(SIGRTMIN + 8, "Real-time signal 8"),	/* 40 */ \
  _s(SIGRTMIN + 9, "Real-time signal 9"),	/* 41 */ \
  _s(SIGRTMIN + 10, "Real-time signal 10"),	/* 42 */ \
  _s(SIGRTMIN + 11, "Real-time signal 11"),	/* 43 */ \
  _s(SIGRTMIN + 12, "Real-time signal 12"),	/* 44 */ \
  _s(SIGRTMIN + 13, "Real-time signal 13"),	/* 45 */ \
  _s(SIGRTMIN + 14, "Real-time signal 14"),	/* 46 */ \
  _s(SIGRTMIN + 15, "Real-time signal 15"),	/* 47 */ \
  _s(SIGRTMIN + 16, "Real-time signal 16"),	/* 48 */ \
  _s(SIGRTMIN + 17, "Real-time signal 17"),	/* 49 */ \
  _s(SIGRTMIN + 18, "Real-time signal 18"),	/* 50 */ \
  _s(SIGRTMIN + 19, "Real-time signal 19"),	/* 51 */ \
  _s(SIGRTMIN + 20, "Real-time signal 20"),	/* 52 */ \
  _s(SIGRTMIN + 21, "Real-time signal 21"),	/* 53 */ \
  _s(SIGRTMIN + 22, "Real-time signal 22"),	/* 54 */ \
  _s(SIGRTMIN + 23, "Real-time signal 23"),	/* 55 */ \
  _s(SIGRTMIN + 24, "Real-time signal 24"),	/* 56 */ \
  _s(SIGRTMIN + 25, "Real-time signal 25"),	/* 57 */ \
  _s(SIGRTMIN + 26, "Real-time signal 26"),	/* 58 */ \
  _s(SIGRTMIN + 27, "Real-time signal 27"),	/* 59 */ \
  _s(SIGRTMIN + 28, "Real-time signal 28"),	/* 60 */ \
  _s(SIGRTMIN + 29, "Real-time signal 29"),	/* 61 */ \
  _s(SIGRTMIN + 30, "Real-time signal 30"),	/* 62 */ \
  _s(SIGRTMIN + 31, "Real-time signal 31"),	/* 63 */ \
  _s(SIGRTMAX, "Real-time signal 32")		/* 64 */
#else
# define __signals \
  __signals_common \
  _s2(SIGRTMIN, "Real-time signal 0",		/* 32 */ \
      SIGRTMAX, "Real-time signal 0")
#endif

#define _s(n, s) #n
#define _s2(n, s, n1, s1) #n
const char *sys_sigabbrev[] =
{
  NULL,
  __signals
};

#undef _s
#undef _s2
#define _s(n, s) s
#define _s2(n, s, n1, s1) s
const char *sys_siglist[] =
{
  NULL,
  __signals
};

#undef _s
#undef _s2
#define _s(n, s) {n, #n, s}
#define _s2(n, s, n1, s1) {n, #n, s}, {n, #n1, #s1}
static const sigdesc siglist[] =
{
  __signals,
  {0, NULL, NULL}
};

extern "C" char *
strsignal (int signo)
{
  const char *sigstring = "Unknown signal %d";
  for (int i = 0; siglist[i].n; i++)
    if (siglist[i].n == signo)
      {
	sigstring = siglist[i].str;
	break;
      }
  __small_sprintf (_my_tls.locals.signamebuf, sigstring, signo);
  return _my_tls.locals.signamebuf;
}

extern "C" int
strtosigno (const char *name)
{
  for (int i = 0; siglist[i].n; i++)
    if (strcmp (siglist[i].name, name) == 0)
      return siglist[i].n;
  return 0;
}

extern "C" void
psiginfo (const siginfo_t *info, const char *s)
{
  if (s != NULL && *s != '\0')
    fprintf (stderr, "%s: ", s);

  fprintf (stderr, "%s", strsignal (info->si_signo));

  if (info->si_signo > 0 && info->si_signo < NSIG)
    {
      switch (info->si_signo)
	{
	  case SIGILL:
	  case SIGBUS:
	  case SIGFPE:
	  case SIGSEGV:
	    fprintf (stderr, " (%d [%p])", info->si_code, info->si_addr);
	    break;
	  case SIGCHLD:
	    fprintf (stderr, " (%d %d %d %u)", info->si_code, info->si_pid,
		     info->si_status, info->si_uid);
	    break;
/* FIXME: implement si_band
	  case SIGPOLL:
	    fprintf (stderr, " (%d %ld)", info->si_code, info->si_band);
	    break;
*/
	  default:
	    fprintf (stderr, " (%d %d %u)", info->si_code, info->si_pid, info->si_uid);
	}
    }

  fprintf (stderr, "\n");
}
@


1.8
log
@* cygwin.din (psiginfo): Export.
(psignal): Export.
(sys_siglist): Export.
* posix.sgml (std-notimpl): Move psiginfo and psignal from here...
(std-susv4): ... to here.
(std-deprec): Add sys_siglist.
* strsig.cc (sys_siglist): New array.
(psiginfo): New function.
* include/cygwin/signal.h (sys_siglist): Declare.
(psiginfo): Declare.
* include/cygwin/version.h (CYGWIN_VERSION_API_MINOR): Bump.
@
text
@d3 1
a3 1
   Copyright 2004, 2007, 2008, 2010, 2011 Red Hat, Inc.
d23 1
a23 1
#define __signals \
d57 41
a97 1
  _s(SIGUSR2, "User defined signal 2"),		/* 31 */ \
d100 1
d104 1
a104 1
const char *sys_sigabbrev[] NO_COPY_INIT =
d114 1
a114 1
const char *sys_siglist[] NO_COPY_INIT =
d172 1
a172 1
	    fprintf (stderr, " (%d %d %d %ld)", info->si_code, info->si_pid,
d181 1
a181 1
	    fprintf (stderr, " (%d %d %ld)", info->si_code, info->si_pid, info->si_uid);
@


1.8.4.1
log
@	* include/cygwin/stat.h (struct __stat64): Drop entirely in favor of
	struct stat.  Accommodate throughout Cygwin.
	* include/cygwin/types.h: Throughout, drop current, internal types
	used since Cygwin 1.5 with the base type they have been used for.
	Throughout, define types based on bitsize-specific types where
	appropriate.  Accommodate throughout Cygwin.
	* include/sys/cygwin.h: Drop __uid32_t and __gid32_t in favor of
	uid_t and gid_t.  Define uid/gid types based on bitsize-specific types.
	(struct external_pinfo): Accommodate above change.
	* cygtls.h (struct _local_storage): Drop unused members grp and
	namearray,
	* tlsoffsets.h: Regenerate.
	* devices.h (_dev_t): Drop definition.  Use dev_t throughout instead.
	* devices.cc: Regenerate.

	Probably temporary patch to drop unneeded functionality on x86_64:
	* fcntl.cc (_fcntl): Alias to fcntl64 on x86_64.
	* glob.cc (CYGWIN_gl_stat): Simplify on x86_64.
	* grp.cc (grp32togrp16): Don't define on x86_64.
	(getgrgid): Alias to getgrgid32 on x86_64.
	(getgrnam): Alias to getgrnam32 on x86_64.
	(getgrent): Alias to getgrent32 on x86_64.
	(getgroups): Alias to getgroups32 on x86_64.
	(initgroups): Alias to initgroups32 on x86_64.
	(setgroups): Alias to setgroups32 on x86_64.
	* mmap.cc (mmap): Alias to mmap64 on x86_64.
	* passwd.cc (getpwuid): Alias to getpwuid32 on x86_64.
	(getpwuid_r): Alias to getpwuid_r32 on x86_64.
	(getpwduid): Don't define on x86_64.
	* syscalls.cc (lseek): Alias to lseek64 on x86_64.
	(_lseek): Alias to lseek64 on x86_64.
	(chown): Alias to chown32 on x86_64.
	(lchown): Alias to lchown32 on x86_64.
	(fchown): Alias to fchown32 on x86_64.
	(stat64_to_stat32): Don't define on x86_64.
	(fstat): Alias to fstat64 on x86_64.
	(_fstat_r): Alias to _fstat64_r on x86_64.
	(stat): Alias to stat64 on x86_64.
	(_stat_r): Alias to _stat64_r on x86_64.
	(lstat): Alias to lstat64 on x86_64.
	(ftruncate): Alias to ftruncate64 on x86_64.
	(truncate): Alias to truncate64 on x86_64.
	(seteuid): Alias to seteuid32 on x86_64.
	(setuid): Alias to setuid32 on x86_64.
	(setreuid): Alias to setreuid32 on x86_64.
	(setegid): Alias to setegid32 on x86_64.
	(setgid): Alias to setgid32 on x86_64.
	(setregid): Alias to setregid32 on x86_64.
	* uinfo.cc (getuid): Alias to getuid32 on x86_64.
	(getgid): Alias to getgid32 on x86_64.
	(geteuid): Alias to geteuid32 on x86_64.
	(getegid): Alias to getegid32 on x86_64.
	* winsup.h (ILLEGAL_UID16): Don't define on x86_64.
	(ILLEGAL_GID16): Ditto.
	(uid16touid32): Don't declare on x86_64.
	(gid16togid32): Don't declare on x86_64.
@
text
@d131 1
a131 1
	    fprintf (stderr, " (%d %d %d %u)", info->si_code, info->si_pid,
d140 1
a140 1
	    fprintf (stderr, " (%d %d %u)", info->si_code, info->si_pid, info->si_uid);
@


1.8.4.2
log
@	* include/cygwin/signal.h (NSIG): Define differently for x86_64 and
	i686.  Change FIXME comment accordingly.
	(SIGRTMAX): Define in terms of NSIG.
	* include/limits.h (RTSIG_MAX): Define for x86_64.
	* strsig.cc (__signals_common): Hold all signals available on both
	platforms.
	(__signals): Define differently for x86_64 and i686.
@
text
@d23 1
a23 1
#define __signals_common \
d57 1
a57 41
  _s(SIGUSR2, "User defined signal 2"),		/* 31 */

#ifdef __x86_64__
# define __signals \
  __signals_common \
  _s(SIGRTMIN, "Real-time signal 0"),		/* 32 */ \
  _s(SIGRTMIN + 1, "Real-time signal 1"),	/* 33 */ \
  _s(SIGRTMIN + 2, "Real-time signal 2"),	/* 34 */ \
  _s(SIGRTMIN + 3, "Real-time signal 3"),	/* 35 */ \
  _s(SIGRTMIN + 4, "Real-time signal 4"),	/* 36 */ \
  _s(SIGRTMIN + 5, "Real-time signal 5"),	/* 37 */ \
  _s(SIGRTMIN + 6, "Real-time signal 6"),	/* 38 */ \
  _s(SIGRTMIN + 7, "Real-time signal 7"),	/* 39 */ \
  _s(SIGRTMIN + 8, "Real-time signal 8"),	/* 40 */ \
  _s(SIGRTMIN + 9, "Real-time signal 9"),	/* 41 */ \
  _s(SIGRTMIN + 10, "Real-time signal 10"),	/* 42 */ \
  _s(SIGRTMIN + 11, "Real-time signal 11"),	/* 43 */ \
  _s(SIGRTMIN + 12, "Real-time signal 12"),	/* 44 */ \
  _s(SIGRTMIN + 13, "Real-time signal 13"),	/* 45 */ \
  _s(SIGRTMIN + 14, "Real-time signal 14"),	/* 46 */ \
  _s(SIGRTMIN + 15, "Real-time signal 15"),	/* 47 */ \
  _s(SIGRTMIN + 16, "Real-time signal 16"),	/* 48 */ \
  _s(SIGRTMIN + 17, "Real-time signal 17"),	/* 49 */ \
  _s(SIGRTMIN + 18, "Real-time signal 18"),	/* 50 */ \
  _s(SIGRTMIN + 19, "Real-time signal 19"),	/* 51 */ \
  _s(SIGRTMIN + 20, "Real-time signal 20"),	/* 52 */ \
  _s(SIGRTMIN + 21, "Real-time signal 21"),	/* 53 */ \
  _s(SIGRTMIN + 22, "Real-time signal 22"),	/* 54 */ \
  _s(SIGRTMIN + 23, "Real-time signal 23"),	/* 55 */ \
  _s(SIGRTMIN + 24, "Real-time signal 24"),	/* 56 */ \
  _s(SIGRTMIN + 25, "Real-time signal 25"),	/* 57 */ \
  _s(SIGRTMIN + 26, "Real-time signal 26"),	/* 58 */ \
  _s(SIGRTMIN + 27, "Real-time signal 27"),	/* 59 */ \
  _s(SIGRTMIN + 28, "Real-time signal 28"),	/* 60 */ \
  _s(SIGRTMIN + 29, "Real-time signal 29"),	/* 61 */ \
  _s(SIGRTMIN + 30, "Real-time signal 30"),	/* 62 */ \
  _s(SIGRTMIN + 31, "Real-time signal 31"),	/* 63 */ \
  _s(SIGRTMAX, "Real-time signal 32")		/* 64 */
#else
# define __signals \
  __signals_common \
a59 1
#endif
@


1.8.4.3
log
@	* cygwin.sc.in (.rdata): Add .rdata_cygwin_nocopy subsection.
	(.cygheap): Raise size to 3 Megs on x86_64.
	* dcrt0.cc (dll_crt0_0): Drop call to init_global_security.
	* dtable.cc (std_consts): Drop NO_COPY.
	* errno.cc (errmap): Drop NO_COPY, constify instead.
	(_sys_errlist): Drop NO_COPY.
	* fhandler_clipboard.cc (CYGWIN_NATIVE): Ditto.
	* fhandler_console.cc (keytable): Drop NO_COPY, constify instead.
	* grp.cc (null_ptr): Make NO_COPY_RO.
	* heap.cc (eval_start_address): Fix comment.
	* localtime.cc (wildabbr): Make NO_COPY_RO.
	(gmt): Ditto.
	* miscfuncs.cc (case_folded_lower): Drop NO_COPY.
	(case_folded_upper): Ditto.
	(isalpha_array): Ditto.
	(nice_to_winprio): Ditto for priority.
	(class thread_allocator): New class to allocate thread stack on x86_64.
	(thr_alloc): Define global NO_COPY instant of thread_allocator.
	(CygwinCreateThread): Call thr_alloc.alloc on x86_64 to reserve stack.
	* net.cc (errmap): Drop NO_COPY, constify instead.
	(host_errmap): Ditto.
	* netdb.cc (SPACE): Drop NO_COPY.
	* sec_helper.cc (null_sdp): Static NO_COPY_RO definition of null SD.
	(sec_none): Define NO_COPY_RO, define content statically.
	(sec_none_nih): Ditto.
	(sec_all): Ditto.
	(sec_all_nih): Ditto.
	(get_null_sd): Remove.
	(init_global_security): Remove.
	* security.cc (file_mapping): Define NO_COPY_RO.
	(check_registry_access): Ditto for reg_mapping.
	* spawn.cc (exe_suffixes): Drop NO_COPY, constify instead.
	(dll_suffixes): Drop unused, disabled definition and comment.
	* strsig.cc (sys_sigabbrev): Drop NO_COPY_INIT.
	(sys_siglist): Ditto.
	* syscalls.cc (def_shells): Drop NO_COPY.
	* winsup.h (NO_COPY_RO): Define to place variable in
	.rdata_cygwin_nocopy section.
	(init_global_security): Drop declaration.
@
text
@d3 1
a3 1
   Copyright 2004, 2007, 2008, 2010, 2011, 2013 Red Hat, Inc.
d104 1
a104 1
const char *sys_sigabbrev[] =
d114 1
a114 1
const char *sys_siglist[] =
@


1.7
log
@	* strsig.cc: Fix formatting and copyright.
@
text
@d3 1
a3 1
   Copyright 2004, 2007, 2008, 2010 Red Hat, Inc.
d13 2
d71 10
d111 35
@


1.6
log
@	* include/cygwin/signal.h: Define SIGPWR as synonym for SIGLOST.
	* strsig.cc: Ditto.
	* include/cygwin/version.h: Bump CYGWIN_VERSION_API_MINOR.
@
text
@d3 1
a3 1
   Copyright 2004 Red Hat, Inc.
d52 1
a52 1
  _s2(SIGPWR, "Power failure",				/* 29 */ \
@


1.5
log
@* cygwin.din (sys_sigabbrev): Add this here.
* dcrt0.cc (__argc,__argv,_check_for_executable): Remove dllexport decoration
since it is already handled in cygwin.din.
* errno.cc (_sys_errlist): Ditto.
* strsig.cc (sys_sigabbrev): Ditto.
* include/cygwin/signal.h: Protect use of dllimport when __INSIDE_CYGWIN__.
* libc/getopt.c: Revert previous changes.  Define __INSIDE_CYGWIN__.
@
text
@d52 2
a53 1
  _s(SIGLOST, "Resource lost"),			/* 29 */ \
@


1.4
log
@* strsig.cc (strsignal): Return non-const buffer to allow building with recent
newlib change.
@
text
@d60 1
a60 1
const char __declspec(dllexport) * sys_sigabbrev[] NO_COPY_INIT =
@


1.3
log
@Remove unneeded header files from source files throughout.
@
text
@d76 1
a76 1
extern "C" const char *
d79 1
d82 5
a86 2
      return siglist[i].str;
  __small_sprintf (_my_tls.locals.signamebuf, "Unknown signal %d", signo);
@


1.2
log
@* cygwin/strsig.cc (__signals): New macro.
(sys_sigabbrev): New array of signal strings, patterned after linux.
(siglist): Use __signals.
* cygwin/include/cygwin/signal.h (sys_sigabbrev): Define.
* cygwin/include/cygwin/version.h: Bump API minor version to 177.

* utils/Makefile.in (kill.exe): Remove reliance on libiberty.
* utils/kill.cc (strsigno): New function patterned after libiberty but using
newly exported cygwin array.
@
text
@a11 5
#include "thread.h"
#include <time.h>
#include <stdlib.h>
#include <string.h>
#include <signal.h>
@


1.1
log
@* Makefile.in (DLL_OFILES): Add strsig.o.
* cygtls.h (_local_storage::signamebuf) New element.
* sysconf.cc (sysconf): Implement _SC_RTSIG_MAX.
* tlsoffset.h: Regenerate.
* include/limits.h (_POSIX_RTSIG_MAX): New define.
(RTSIG_MAX): Ditto.
* include/cygwin/signal.h (SIGRTMIN): New define.
(SIGRTMAX): Ditto.
(NSIG): Bump.
* strsig.cc: New file.
@
text
@d26 47
d74 1
d77 1
a77 35
  _s(SIGHUP, "Hangup"),
  _s(SIGINT, "Interrupt"),
  _s(SIGQUIT, "Quit"),
  _s(SIGILL, "Illegal instruction"),
  _s(SIGTRAP, "Trace/breakpoint trap"),
  _s(SIGABRT, "Aborted"),
  _s(SIGEMT, "EMT instruction"),
  _s(SIGFPE, "Floating point exception"),
  _s(SIGKILL, "Killed"),
  _s(SIGBUS, "Bus error"),
  _s(SIGSEGV, "Segmentation fault"),
  _s(SIGSYS, "Bad system call"),
  _s(SIGPIPE, "Broken pipe"),
  _s(SIGALRM, "Alarm clock"),
  _s(SIGTERM, "Terminated"),
  _s(SIGURG, "Urgent I/O condition"),
  _s(SIGSTOP, "Stopped (signal)"),
  _s(SIGTSTP, "Stopped"),
  _s(SIGCONT, "Continued"),
  _s(SIGCHLD, "Child exited"),
  _s(SIGCLD, "Child exited"),
  _s(SIGTTIN, "Stopped (tty input)"),
  _s(SIGTTOU, "Stopped (tty output)"),
  _s(SIGIO, "I/O possible"),
  _s(SIGPOLL, "I/O possible"),
  _s(SIGXCPU, "CPU time limit exceeded"),
  _s(SIGXFSZ, "File size limit exceeded"),
  _s(SIGVTALRM, "Virtual timer expired"),
  _s(SIGPROF, "Profiling timer expired"),
  _s(SIGWINCH, "Window changed"),
  _s(SIGLOST, "Resource lost"),
  _s(SIGUSR1, "User defined signal 1"),
  _s(SIGUSR2, "User defined signal 2"),
  _s(SIGRTMIN, "Real-time signal 0"),
  _s(SIGRTMAX, "Real-time signal 0"),
@

