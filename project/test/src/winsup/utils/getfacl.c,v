head	1.17;
access;
symbols
	cygwin-1_7_35-release:1.17
	cygwin-1_7_34-release:1.16
	cygwin-1_7_33-release:1.15
	cygwin-1_7_32-release:1.15
	cygwin-1_7_31-release:1.15
	cygwin-1_7_30-release:1.15
	cygwin-1_7_29-release:1.15
	cygwin-1_7_29-release-branchpoint:1.15.0.6
	cygwin-1_7_28-release:1.15
	cygwin-1_7_27-release:1.15
	cygwin-1_7_26-release:1.15
	cygwin-1_7_25-release:1.15
	cygwin-1_7_24-release:1.15
	cygwin-1_7_23-release:1.15
	cygwin-1_7_22-release:1.15
	cygwin-1_7_21-release:1.15
	cygwin-1_7_20-release:1.15
	cygwin-1_7_19-release:1.15
	cygwin-64bit-postmerge:1.15
	cygwin-64bit-premerge-branch:1.15.0.4
	cygwin-64bit-premerge:1.15
	cygwin-1_7_18-release:1.15
	cygwin-1_7_17-release:1.15
	cygwin-64bit-branch:1.15.0.2
	cygwin-1_7_16-release:1.15
	cygwin-1_7_15-release:1.15
	cygwin-1_7_14_2-release:1.15
	cygwin-1_7_14-release:1.15
	cygwin-1_7_12-release:1.15
	cygwin-1_7_11-release:1.15
	cygwin-1_7_10-release:1.15
	cygwin-1_7_9-release:1.13
	cygwin-1_7_8-release:1.13
	cygwin-1_7_7-release:1.13
	cygwin-1_7_5-release:1.13
	cygwin-1_7_4-release:1.13
	cygwin-1_7_3-release:1.13
	cygwin-1_7_2-release:1.13
	cygwin-1_7_1-release:1.13
	cv-branch-2:1.12.0.8
	cr-0x5f1:1.12.0.6
	cv-branch:1.12.0.4
	cr-0x3b58:1.12.0.2
	cr-0x9e:1.11.0.8
	cr-0x9d:1.11.0.6
	corinna-01:1.11
	cr-0x9c:1.11.0.2
	cr-0x9b:1.11.0.4
	cr-0x99:1.10
	Z-emcb-cygwin_daemon:1.10.0.2
	w32api-2_2:1.9
	mingw-runtime-2_4:1.9
	cygnus_cvs_20020108_pre:1.4
	Z-cygwin_daemon_merge-new_HEAD:1.3
	Z-cygwin_daemon_merge_HEAD:1.3
	cygwin_daemon:1.3.0.8;
locks; strict;
comment	@ * @;
expand	@o@;


1.17
date	2015.02.28.13.13.19;	author corinna;	state Exp;
branches;
next	1.16;

1.16
date	2014.08.31.13.46.34;	author corinna;	state Exp;
branches;
next	1.15;

1.15
date	2011.12.17.23.39.47;	author cgf;	state Exp;
branches;
next	1.14;

1.14
date	2011.10.10.14.57.47;	author corinna;	state Exp;
branches;
next	1.13;

1.13
date	2009.11.11.10.12.35;	author corinna;	state Exp;
branches;
next	1.12;

1.12
date	2004.09.15.07.51.06;	author corinna;	state Exp;
branches;
next	1.11;

1.11
date	2003.09.11.07.55.51;	author corinna;	state Exp;
branches;
next	1.10;

1.10
date	2003.03.09.19.04.23;	author corinna;	state Exp;
branches;
next	1.9;

1.9
date	2002.12.15.10.09.35;	author corinna;	state Exp;
branches;
next	1.8;

1.8
date	2002.11.24.16.15.33;	author corinna;	state Exp;
branches;
next	1.7;

1.7
date	2002.09.15.19.24.36;	author joshuadfranklin;	state Exp;
branches;
next	1.6;

1.6
date	2002.05.23.10.56.57;	author corinna;	state Exp;
branches;
next	1.5;

1.5
date	2002.01.29.03.08.42;	author cgf;	state Exp;
branches;
next	1.4;

1.4
date	2001.11.04.17.24.24;	author corinna;	state Exp;
branches;
next	1.3;

1.3
date	2001.03.05.17.55.23;	author corinna;	state Exp;
branches;
next	1.2;

1.2
date	2000.10.28.05.00.00;	author cgf;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.17.19.38.31;	author cgf;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.17.19.38.31;	author cgf;	state Exp;
branches;
next	;


desc
@@


1.17
log
@	* getfacl.c (usage): Change --all to --access, --dir to --default.
	Align text to output of Linux tool.
	(longopts): Add --access and --default options.
@
text
@/* getfacl.c

   Copyright 2000, 2001, 2002, 2003, 2004, 2009, 2011, 2014, 2015 Red Hat Inc.

   Written by Corinna Vinschen <vinschen@@redhat.com>

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */

#include <pwd.h>
#include <grp.h>
#include <stdio.h>
#include <unistd.h>
#include <getopt.h>
#include <sys/types.h>
#include <sys/acl.h>
#include <sys/stat.h>
#include <cygwin/version.h>
#include <string.h>
#include <errno.h>

static char *prog_name;

char *
permstr (mode_t perm)
{
  static char pbuf[4];

  pbuf[0] = (perm & S_IROTH) ? 'r' : '-';
  pbuf[1] = (perm & S_IWOTH) ? 'w' : '-';
  pbuf[2] = (perm & S_IXOTH) ? 'x' : '-';
  pbuf[3] = '\0';
  return pbuf;
}

const char *
username (uid_t uid)
{
  static char ubuf[256];
  struct passwd *pw;

  if ((pw = getpwuid (uid)))
    strcpy (ubuf, pw->pw_name);
  else
    sprintf (ubuf, "%lu <unknown>", (unsigned long)uid);
  return ubuf;
}

const char *
groupname (gid_t gid)
{
  static char gbuf[256];
  struct group *gr;

  if ((gr = getgrgid (gid)))
    strcpy (gbuf, gr->gr_name);
  else
    sprintf (gbuf, "%lu <unknown>", (unsigned long)gid);
  return gbuf;
}

static void
usage (FILE * stream)
{
  fprintf (stream, "Usage: %s [-adn] FILE [FILE2...]\n"
	    "\n"
	    "Display file and directory access control lists (ACLs).\n"
	    "\n"
	    "  -a, --access   display the file access control list\n"
	    "  -d, --default  display the default access control list\n"
	    "  -h, --help     print help explaining the command line options\n"
	    "  -n, --noname   display user and group IDs instead of names\n"
	    "  -V, --version  output version information and exit\n"
	    "\n"
	    "When multiple files are specified on the command line, a blank\n"
	    "line separates the ACLs for each file.\n", prog_name);
  if (stream == stdout)
    {
      fprintf (stream, ""
	    "For each argument that is a regular file, special file or\n"
	    "directory, getfacl displays the owner, the group, and the ACL.\n"
	    "For directories getfacl displays additionally the default ACL.\n"
	    "\n"
	    "With no options specified, getfacl displays the filename, the\n"
	    "owner, the group, the setuid (s), setgid (s), and sticky (t)\n"
	    "bits if available, and both the ACL and the default ACL, if it\n"
	    "exists.\n"
	    "\n"
	    "The format for ACL output is as follows:\n"
	    "     # file: filename\n"
	    "     # owner: name or uid\n"
	    "     # group: name or uid\n"
	    "     # flags: sst\n"
	    "     user::perm\n"
	    "     user:name or uid:perm\n"
	    "     group::perm\n"
	    "     group:name or gid:perm\n"
	    "     mask:perm\n"
	    "     other:perm\n"
	    "     default:user::perm\n"
	    "     default:user:name or uid:perm\n"
	    "     default:group::perm\n"
	    "     default:group:name or gid:perm\n"
	    "     default:mask:perm\n"
	    "     default:other:perm\n"
	    "\n");
    }
}

struct option longopts[] = {
  {"access", no_argument, NULL, 'a'},
  {"all", no_argument, NULL, 'a'},
  {"default", no_argument, NULL, 'd'},
  {"dir", no_argument, NULL, 'd'},
  {"help", no_argument, NULL, 'h'},
  {"noname", no_argument, NULL, 'n'},
  {"version", no_argument, NULL, 'V'},
  {0, no_argument, NULL, 0}
};
const char *opts = "adhnV";

static void
print_version ()
{
  printf ("getfacl (cygwin) %d.%d.%d\n"
	  "Get POSIX ACL information\n"
	  "Copyright (C) 2000 - %s Red Hat, Inc.\n"
	  "This is free software; see the source for copying conditions.  There is NO\n"
	  "warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n",
	  CYGWIN_VERSION_DLL_MAJOR / 1000,
	  CYGWIN_VERSION_DLL_MAJOR % 1000,
	  CYGWIN_VERSION_DLL_MINOR,
	  strrchr (__DATE__, ' ') + 1);
}

int
main (int argc, char **argv)
{
  int c;
  int ret = 0;
  int aopt = 0;
  int dopt = 0;
  int nopt = 0;
  struct stat st;
  aclent_t acls[MAX_ACL_ENTRIES];

  prog_name = program_invocation_short_name;

  while ((c = getopt_long (argc, argv, opts, longopts, NULL)) != EOF)
    switch (c)
      {
      case 'a':
	aopt = 1;
	break;
      case 'd':
	dopt = 1;
	break;
      case 'h':
	usage (stdout);
	return 0;
      case 'n':
	nopt = 1;
	break;
      case 'V':
	print_version ();
	return 0;
      default:
	fprintf (stderr, "Try `%s --help' for more information.\n", prog_name);
	return 1;
      }
  if (optind > argc - 1)
    {
      usage (stderr);
      return 1;
    }
  for (; optind < argc; ++optind)
    {
      int i, num_acls;
      if (stat (argv[optind], &st)
	  || (num_acls = acl (argv[optind], GETACL, MAX_ACL_ENTRIES, acls)) < 0)
	{
	  fprintf (stderr, "%s: %s: %s\n",
		   prog_name, argv[optind], strerror (errno));
	  ret = 2;
	  continue;
	}
      printf ("# file: %s\n", argv[optind]);
      if (nopt)
	{
	  printf ("# owner: %lu\n", (unsigned long)st.st_uid);
	  printf ("# group: %lu\n", (unsigned long)st.st_gid);
	}
      else
	{
	  printf ("# owner: %s\n", username (st.st_uid));
	  printf ("# group: %s\n", groupname (st.st_gid));
	}
      if (st.st_mode & (S_ISUID | S_ISGID | S_ISVTX))
	printf ("# flags: %c%c%c\n", (st.st_mode & S_ISUID) ? 's' : '-',
				     (st.st_mode & S_ISGID) ? 's' : '-',
				     (st.st_mode & S_ISVTX) ? 't' : '-');
      for (i = 0; i < num_acls; ++i)
	{
	  if (acls[i].a_type & ACL_DEFAULT)
	    {
	      if (aopt)
		continue;
	      printf ("default:");
	    }
	  else if (dopt)
	    continue;
	  switch (acls[i].a_type & ~ACL_DEFAULT)
	    {
	    case USER_OBJ:
	      printf ("user::");
	      break;
	    case USER:
	      if (nopt)
		printf ("user:%lu:", (unsigned long)acls[i].a_id);
	      else
		printf ("user:%s:", username (acls[i].a_id));
	      break;
	    case GROUP_OBJ:
	      printf ("group::");
	      break;
	    case GROUP:
	      if (nopt)
		printf ("group:%lu:", (unsigned long)acls[i].a_id);
	      else
		printf ("group:%s:", groupname (acls[i].a_id));
	      break;
	    case CLASS_OBJ:
	      printf ("mask:");
	      break;
	    case OTHER_OBJ:
	      printf ("other:");
	      break;
	    }
	  printf ("%s\n", permstr (acls[i].a_perm));
	}
      putchar ('\n');
    }
  return ret;
}
@


1.16
log
@	* getfacl.c (usage): Add flags description.
	(main): Print suid/sgid/vtx flags if available.
@
text
@d3 1
a3 1
   Copyright 2000, 2001, 2002, 2003, 2004, 2009, 2011, 2014 Red Hat Inc.
d72 3
a74 5
	    "  -a, --all      display the filename, the owner, the group, and\n"
	    "                 the ACL of the file\n"
	    "  -d, --dir      display the filename, the owner, the group, and\n"
	    "                 the default ACL of the directory, if it exists\n"
	    "  -h, --help     output usage information and exit\n"
d114 1
d116 1
@


1.15
log
@Clean up whitespace.
@
text
@d3 1
a3 1
   Copyright 2000, 2001, 2002, 2003, 2004, 2009, 2011 Red Hat Inc.
d90 2
a91 1
	    "owner, the group, and both the ACL and the default ACL, if it\n"
d98 1
d201 4
@


1.14
log
@	* Align usage output, version output, as well as usage and version
	option handling to use the same style throughout all Cygwin utils.
	Throughout use program_invocation_short_name to refer to current
	process name in Cygwin executables.
	* utils.sgml: Align documentation to above change.  Add missing
	sections for getconf, ldd, and setmetamode.
	* strace.cc (proc_child): Avoid compiler warning.
@
text
@d69 14
a82 14
            "\n"
            "Display file and directory access control lists (ACLs).\n"
            "\n"
            "  -a, --all      display the filename, the owner, the group, and\n"
            "                 the ACL of the file\n"
            "  -d, --dir      display the filename, the owner, the group, and\n"
            "                 the default ACL of the directory, if it exists\n"
            "  -h, --help     output usage information and exit\n"
            "  -n, --noname   display user and group IDs instead of names\n"
            "  -V, --version  output version information and exit\n"
            "\n"
            "When multiple files are specified on the command line, a blank\n"
            "line separates the ACLs for each file.\n", prog_name);
  if (stream == stdout) 
d85 25
a109 25
            "For each argument that is a regular file, special file or\n"
            "directory, getfacl displays the owner, the group, and the ACL.\n"
            "For directories getfacl displays additionally the default ACL.\n"
            "\n"
            "With no options specified, getfacl displays the filename, the\n"
            "owner, the group, and both the ACL and the default ACL, if it\n"
            "exists.\n"
            "\n"
            "The format for ACL output is as follows:\n"
            "     # file: filename\n"
            "     # owner: name or uid\n"
            "     # group: name or uid\n"
            "     user::perm\n"
            "     user:name or uid:perm\n"
            "     group::perm\n"
            "     group:name or gid:perm\n"
            "     mask:perm\n"
            "     other:perm\n"
            "     default:user::perm\n"
            "     default:user:name or uid:perm\n"
            "     default:group::perm\n"
            "     default:group:name or gid:perm\n"
            "     default:mask:perm\n"
            "     default:other:perm\n"
            "\n");
d127 3
a129 3
          "Get POSIX ACL information\n"
          "Copyright (C) 2000 - %s Red Hat, Inc.\n"
          "This is free software; see the source for copying conditions.  There is NO\n"
d131 4
a134 4
          CYGWIN_VERSION_DLL_MAJOR / 1000,
          CYGWIN_VERSION_DLL_MAJOR % 1000,
          CYGWIN_VERSION_DLL_MINOR,
          strrchr (__DATE__, ' ') + 1);
d190 1
a190 1
        {
d195 1
a195 1
        {
@


1.13
log
@	* getfacl.c (print_version): Fix copyright.
	(main): Don't reuse local variables confusingly.  Don't print any file
	information if acl() fails.  Improve error message.  Always print a
	trailing empty line.  Set return code to 2 if accessing some file fails.
@
text
@d3 1
a3 1
   Copyright 2000, 2001, 2002, 2003, 2004, 2009 Red Hat Inc.
d21 1
a24 1
static const char version[] = "$Revision: 1.13 $";
d69 1
d78 1
a78 1
            "  -v, --version  output version information and exit\n"
d118 1
a118 1
  {"version", no_argument, NULL, 'v'},
d121 1
d126 9
a134 18
  const char *v = strchr (version, ':');
  int len;
  if (!v)
    {
      v = "?";
      len = 1;
    }
  else
    {
      v += 2;
      len = strchr (v, ' ') - v;
    }
  printf ("\
getfacl (cygwin) %.*s\n\
ACL Utility\n\
Copyright (c) 2000, 2001, 2002, 2003, 2004, 2009 Red Hat, Inc.\n\
Compiled on %s\n\
", len, v, __DATE__);
d148 1
a148 7
  prog_name = strrchr (argv[0], '/');
  if (prog_name == NULL)
    prog_name = strrchr (argv[0], '\\');
  if (prog_name == NULL)
    prog_name = argv[0];
  else
    prog_name++;
d150 1
a150 1
  while ((c = getopt_long (argc, argv, "adhnv", longopts, NULL)) != EOF)
d165 1
a165 1
      case 'v':
d169 1
a169 1
	usage (stderr);
@


1.12
log
@	* getfacl.c (main): Correct layout when nopt is set.
@
text
@d3 1
a3 1
   Copyright 2000, 2001, 2002 Red Hat Inc.
d22 1
d139 1
a139 1
Copyright (c) 2000, 2001, 2002 Red Hat, Inc.\n\
d147 2
a148 1
  int c, i;
a151 1
  int first = 1;
d190 1
a190 1
  while ((c = optind++) < argc)
d192 3
a194 1
      if (stat (argv[c], &st))
d196 3
a198 1
	  perror (argv[0]);
d201 1
a201 4
      if (!first)
	putchar ('\n');
      first = 0;
      printf ("# file: %s\n", argv[c]);
d212 1
a212 6
      if ((c = acl (argv[c], GETACL, MAX_ACL_ENTRIES, acls)) < 0)
	{
	  perror (argv[0]);
	  continue;
	}
      for (i = 0; i < c; ++i)
d251 1
d253 1
a253 1
  return 0;
@


1.11
log
@	* getfacl (main): Remove extern declaration of optind.
	* setfacl (main): Remove extern declaration of optarg and optind.
@
text
@d232 1
a232 1
		printf ("user:%lu\n", (unsigned long)acls[i].a_id);
d241 1
a241 1
		printf ("group:%lu\n", (unsigned long)acls[i].a_id);
@


1.10
log
@	* getfacl.c (username): Fix ambiguous printf calls.
	(groupname): Ditto.
	(main): Ditto.
@
text
@a145 1
  extern int optind;
@


1.9
log
@	* setfacl.c (main): Place a single : after other and mask.
	* getfacl.c (getaclentry): Allow both : and :: for other and mask.
	(main): Remove extraneous break.
@
text
@d47 1
a47 1
    sprintf (ubuf, "%d <unknown>", uid);
d60 1
a60 1
    sprintf (gbuf, "%d <unknown>", gid);
d203 2
a204 2
	  printf ("# owner: %d\n", st.st_uid);
	  printf ("# group: %d\n", st.st_gid);
d233 1
a233 1
		printf ("user:%d:", acls[i].a_id);
d242 1
a242 1
		printf ("group:%d:", acls[i].a_id);
@


1.8
log
@	* getfacl.c (permstr): Use `other' permission bits for requesting
	ace permissions.
@
text
@d247 1
a247 1
	      printf ("mask::");
d250 1
a250 1
	      printf ("other::");
@


1.7
log
@Add final newlines to utils
@
text
@d31 3
a33 3
  pbuf[0] = (perm & S_IREAD) ? 'r' : '-';
  pbuf[1] = (perm & S_IWRITE) ? 'w' : '-';
  pbuf[2] = (perm & S_IEXEC) ? 'x' : '-';
@


1.6
log
@	* getfacl.c (usage): Standardize usage output. Change return type to
	static void.
	(print_version): New function.
	(longopts): Added longopts for all options.
	(main): Accommodate new help and version options.
@
text
@d139 2
a140 1
Compiled on %s", len, v, __DATE__);
@


1.5
log
@* cygcheck.cc: Fix typo.  Remove uid_t kludge.  Rely on kludge in sys/cygwin.h
instead.
* getfacl.c: Add include to remove warning.
* mkgroup.c (main): Assign variables outside of parameter passing.  This seems
to eliminate some compiler warnings.
@
text
@d3 1
a3 1
   Copyright 2000, 2001 Red Hat Inc.
d23 3
d64 2
a65 5
#define pn(txt)	fprintf (fp, txt "\n", name)
#define p(txt)	fprintf (fp, txt "\n")

int
usage (const char *name, int help)
d67 14
a80 6
  FILE *fp = help ? stdout : stderr;

  pn ("usage: %s [-adn] file...");
  if (!help)
    pn ("Try `%s --help' for more information.");
  else
d82 26
a107 40
      p ("");
      p ("Display file and directory access control lists (ACLs).");
      p ("");
      p ("For each argument that is a regular file, special file or");
      p ("directory, getfacl displays the owner, the group, and the ACL.");
      p ("For directories getfacl displays additionally the default ACL.");
      p ("");
      p ("With no options specified, getfacl displays the filename, the");
      p ("owner, the group, and both the ACL and the default ACL, if it");
      p ("exists.");
      p ("");
      p ("The following options are supported:");
      p ("");
      p ("-a   Display the filename, the owner, the group, and the ACL");
      p ("     of the file.");
      p ("");
      p ("-d   Display the filename, the owner, the group, and the default");
      p ("     ACL of the directory, if it exists.");
      p ("");
      p ("-n   Display user and group IDs instead of names.");
      p ("");
      p ("The format for ACL output is as follows:");
      p ("     # file: filename");
      p ("     # owner: name or uid");
      p ("     # group: name or uid");
      p ("     user::perm");
      p ("     user:name or uid:perm");
      p ("     group::perm");
      p ("     group:name or gid:perm");
      p ("     mask:perm");
      p ("     other:perm");
      p ("     default:user::perm");
      p ("     default:user:name or uid:perm");
      p ("     default:group::perm");
      p ("     default:group:name or gid:perm");
      p ("     default:mask:perm");
      p ("     default:other:perm");
      p ("");
      p ("When multiple files are specified on the command line, a blank");
      p ("line separates the ACLs for each file.");
a108 1
  return 1;
d112 2
d115 2
d120 22
d154 9
a162 1
  while ((c = getopt_long (argc, argv, "adn", longopts, NULL)) != EOF)
d171 3
d177 3
a179 2
      case 'h':
        return usage (argv[0], 1);
d181 2
a182 1
	return usage (argv[0], 0);
d185 4
a188 1
    return usage (argv[0], 0);
@


1.4
log
@	* getfacl.c (username): New function.
	(groupname): Ditto.
	(usage): Ditto.  Add more user friendly help text.
	(main): Add -n and --help option.  Print names instead of IDs
	unless -n option is given.
	* setfacl.c (getperm): Tolerate whitespace and comment chars in input.
	(getaclentry): Fix several input string misdetections.
	(getaclentries): Allow - as input file name to read from stdin.
	Tolerate whitespace and comment chars in input.
	(usage): Add more user friendly help text.
	(main): Add --help option.
@
text
@d21 1
@


1.3
log
@        * getfacl.c: Add copyright hint.
        * setfacl.c: Ditto.
        * strace.cc: Ditto.
@
text
@d34 1
a34 2
#if 0
char *
d40 1
a40 1
  if (pw = getpwuid (uid))
d43 2
a44 1
    strcpy (ubuf, "<unknown>");
d47 1
a47 1
char *
d53 1
a53 1
  if (gr = getgruid (gid))
d56 2
a57 1
    strcpy (gbuf, "<unknown>");
d59 62
a120 1
#endif
d129 1
d134 1
a134 1
  while ((c = getopt (argc, argv, "ad")) != EOF)
d143 5
d149 1
a149 2
	fprintf (stderr, "usage: %s [-ad] file...\n", argv[0]);
	return 1;
d151 2
d164 10
a173 2
      printf ("# owner: %d\n", st.st_uid);
      printf ("# group: %d\n", st.st_gid);
d195 4
a198 1
	      printf ("user:%d:", acls[i].a_id);
d204 4
a207 1
	      printf ("group:%d:", acls[i].a_id);
@


1.2
log
@Cleanup formatting on some files.  Remove excessive whitespace.
@
text
@d1 11
@


1.1
log
@Initial revision
@
text
@d11 2
a12 1
char *permstr (mode_t perm)
d24 2
a25 1
char *username (uid_t uid)
d36 2
a37 1
char *groupname (gid_t gid)
d64 2
a65 2
        aopt = 1;
        break;
d67 2
a68 2
        dopt = 1;
        break;
d70 2
a71 2
        fprintf (stderr, "usage: %s [-ad] file...\n", argv[0]);
        return 1;
d76 6
a81 6
        {
          perror (argv[0]);
          continue;
        }
      if (! first)
        putchar ('\n');
d87 4
a90 4
        {
          perror (argv[0]);
          continue;
        }
d92 32
a123 32
        {
          if (acls[i].a_type & ACL_DEFAULT)
            {
              if (aopt)
                continue;
              printf ("default:");
            }
          else if (dopt)
            continue;
          switch (acls[i].a_type & ~ACL_DEFAULT)
            {
            case USER_OBJ:
              printf ("user::");
              break;
            case USER:
              printf ("user:%d:", acls[i].a_id);
              break;
            case GROUP_OBJ:
              printf ("group::");
              break;
            case GROUP:
              printf ("group:%d:", acls[i].a_id);
              break;
            case CLASS_OBJ:
              printf ("mask::");
              break;
            case OTHER_OBJ:
              printf ("other::");
              break;
            }
          printf ("%s\n", permstr (acls[i].a_perm));
        }
a126 1

@


1.1.1.1
log
@import winsup-2000-02-17 snapshot
@
text
@@
