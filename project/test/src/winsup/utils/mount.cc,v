head	1.56;
access;
symbols
	cygwin-1_7_35-release:1.56
	cygwin-1_7_34-release:1.56
	cygwin-1_7_33-release:1.56
	cygwin-1_7_32-release:1.56
	cygwin-1_7_31-release:1.56
	cygwin-1_7_30-release:1.56
	cygwin-1_7_29-release:1.56
	cygwin-1_7_29-release-branchpoint:1.56.0.2
	cygwin-1_7_28-release:1.56
	cygwin-1_7_27-release:1.56
	cygwin-1_7_26-release:1.56
	cygwin-1_7_25-release:1.56
	cygwin-1_7_24-release:1.56
	cygwin-1_7_23-release:1.56
	cygwin-1_7_22-release:1.56
	cygwin-1_7_21-release:1.56
	cygwin-1_7_20-release:1.56
	cygwin-1_7_19-release:1.56
	cygwin-64bit-postmerge:1.56
	cygwin-64bit-premerge-branch:1.55.0.2
	cygwin-64bit-premerge:1.55
	cygwin-1_7_18-release:1.55
	cygwin-1_7_17-release:1.54
	cygwin-64bit-branch:1.54.0.2
	cygwin-1_7_16-release:1.54
	cygwin-1_7_15-release:1.54
	cygwin-1_7_14_2-release:1.54
	cygwin-1_7_14-release:1.54
	cygwin-1_7_12-release:1.54
	cygwin-1_7_11-release:1.54
	cygwin-1_7_10-release:1.54
	cygwin-1_7_9-release:1.52
	cygwin-1_7_8-release:1.52
	cygwin-1_7_7-release:1.52
	cygwin-1_7_5-release:1.49
	cygwin-1_7_4-release:1.49
	cygwin-1_7_3-release:1.49
	cygwin-1_7_2-release:1.49
	cygwin-1_7_1-release:1.48
	cv-branch-2:1.45.0.2
	cr-0x5f1:1.37.0.6
	cv-branch:1.37.0.4
	cr-0x3b58:1.37.0.2
	cr-0x9e:1.33.0.8
	cr-0x9d:1.33.0.6
	corinna-01:1.33
	cr-0x9c:1.33.0.2
	cr-0x9b:1.33.0.4
	cr-0x99:1.32
	Z-emcb-cygwin_daemon:1.32.0.2
	w32api-2_2:1.28
	mingw-runtime-2_4:1.28
	cygnus_cvs_20020108_pre:1.18
	Z-cygwin_daemon_merge-new_HEAD:1.17
	Z-cygwin_daemon_merge_HEAD:1.17
	cygwin_daemon:1.17.0.4;
locks; strict;
comment	@// @;
expand	@o@;


1.56
date	2013.04.23.09.44.36;	author corinna;	state Exp;
branches;
next	1.55;

1.55
date	2013.01.21.16.28.27;	author cgf;	state Exp;
branches;
next	1.54;

1.54
date	2011.12.17.23.39.47;	author cgf;	state Exp;
branches
	1.54.2.1;
next	1.53;

1.53
date	2011.10.10.14.57.47;	author corinna;	state Exp;
branches;
next	1.52;

1.52
date	2010.08.13.19.10.22;	author corinna;	state Exp;
branches;
next	1.51;

1.51
date	2010.08.11.11.01.14;	author corinna;	state Exp;
branches;
next	1.50;

1.50
date	2010.04.29.08.50.23;	author corinna;	state Exp;
branches;
next	1.49;

1.49
date	2010.01.11.12.13.55;	author corinna;	state Exp;
branches;
next	1.48;

1.48
date	2009.08.09.14.13.53;	author corinna;	state Exp;
branches;
next	1.47;

1.47
date	2009.07.22.16.24.17;	author corinna;	state Exp;
branches;
next	1.46;

1.46
date	2009.07.22.10.20.26;	author corinna;	state Exp;
branches;
next	1.45;

1.45
date	2009.05.14.03.25.45;	author cgf;	state Exp;
branches;
next	1.44;

1.44
date	2009.03.02.10.47.04;	author corinna;	state Exp;
branches;
next	1.43;

1.43
date	2008.08.13.16.35.04;	author corinna;	state Exp;
branches;
next	1.42;

1.42
date	2008.07.25.15.03.25;	author cgf;	state Exp;
branches;
next	1.41;

1.41
date	2008.07.17.15.07.48;	author corinna;	state Exp;
branches;
next	1.40;

1.40
date	2008.04.23.11.37.58;	author corinna;	state Exp;
branches;
next	1.39;

1.39
date	2007.03.30.13.36.06;	author cgf;	state Exp;
branches;
next	1.38;

1.38
date	2006.12.10.21.50.06;	author cgf;	state Exp;
branches;
next	1.37;

1.37
date	2005.08.03.09.23.39;	author corinna;	state Exp;
branches;
next	1.36;

1.36
date	2005.05.13.20.24.20;	author cgf;	state Exp;
branches;
next	1.35;

1.35
date	2005.05.01.15.50.01;	author cgf;	state Exp;
branches;
next	1.34;

1.34
date	2004.10.25.15.49.36;	author cgf;	state Exp;
branches;
next	1.33;

1.33
date	2003.09.04.01.04.57;	author cgf;	state Exp;
branches;
next	1.32;

1.32
date	2003.07.26.05.38.51;	author cgf;	state Exp;
branches;
next	1.31;

1.31
date	2003.07.04.03.20.22;	author cgf;	state Exp;
branches;
next	1.30;

1.30
date	2003.07.04.03.11.18;	author cgf;	state Exp;
branches;
next	1.29;

1.29
date	2003.04.26.21.52.03;	author joshuadfranklin;	state Exp;
branches;
next	1.28;

1.28
date	2002.10.19.11.41.31;	author cgf;	state Exp;
branches;
next	1.27;

1.27
date	2002.09.15.19.24.36;	author joshuadfranklin;	state Exp;
branches;
next	1.26;

1.26
date	2002.07.01.20.54.35;	author cgf;	state Exp;
branches;
next	1.25;

1.25
date	2002.06.09.04.54.32;	author cgf;	state Exp;
branches;
next	1.24;

1.24
date	2002.06.09.00.33.27;	author cgf;	state Exp;
branches;
next	1.23;

1.23
date	2002.05.30.03.42.19;	author cgf;	state Exp;
branches;
next	1.22;

1.22
date	2002.05.23.04.19.07;	author cgf;	state Exp;
branches;
next	1.21;

1.21
date	2002.05.13.05.13.58;	author cgf;	state Exp;
branches;
next	1.20;

1.20
date	2002.05.12.04.29.54;	author cgf;	state Exp;
branches;
next	1.19;

1.19
date	2002.02.15.23.03.14;	author cgf;	state Exp;
branches;
next	1.18;

1.18
date	2001.10.24.21.56.54;	author cgf;	state Exp;
branches;
next	1.17;

1.17
date	2001.09.04.01.09.39;	author cgf;	state Exp;
branches;
next	1.16;

1.16
date	2001.09.03.22.02.54;	author cgf;	state Exp;
branches;
next	1.15;

1.15
date	2001.09.01.19.58.40;	author cgf;	state Exp;
branches;
next	1.14;

1.14
date	2001.08.28.18.48.38;	author cgf;	state Exp;
branches;
next	1.13;

1.13
date	2001.04.16.02.51.03;	author cgf;	state Exp;
branches;
next	1.12;

1.12
date	2001.04.03.02.41.54;	author cgf;	state Exp;
branches;
next	1.11;

1.11
date	2001.04.02.14.58.47;	author cgf;	state Exp;
branches;
next	1.10;

1.10
date	2000.11.08.20.39.45;	author cgf;	state Exp;
branches;
next	1.9;

1.9
date	2000.10.28.05.00.00;	author cgf;	state Exp;
branches;
next	1.8;

1.8
date	2000.07.28.22.34.24;	author cgf;	state Exp;
branches;
next	1.7;

1.7
date	2000.07.13.21.49.36;	author corinna;	state Exp;
branches;
next	1.6;

1.6
date	2000.07.13.11.09.53;	author corinna;	state Exp;
branches;
next	1.5;

1.5
date	2000.06.08.12.54.12;	author corinna;	state Exp;
branches;
next	1.4;

1.4
date	2000.06.05.18.43.54;	author dj;	state Exp;
branches;
next	1.3;

1.3
date	2000.05.18.18.39.11;	author cgf;	state Exp;
branches;
next	1.2;

1.2
date	2000.04.27.03.44.23;	author cgf;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.17.19.38.31;	author cgf;	state Exp;
branches
	1.1.1.1;
next	;

1.54.2.1
date	2013.01.29.21.54.42;	author corinna;	state Exp;
branches;
next	1.54.2.2;

1.54.2.2
date	2013.02.06.17.03.49;	author corinna;	state Exp;
branches;
next	1.54.2.3;

1.54.2.3
date	2013.02.06.17.54.25;	author corinna;	state Exp;
branches;
next	;

1.1.1.1
date	2000.02.17.19.38.31;	author cgf;	state Exp;
branches;
next	;


desc
@@


1.56
log
@	* Merge in cygwin-64bit-branch.
@
text
@/* mount.cc

   Copyright 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006,
   2007, 2008, 2009, 2010, 2011, 2013 Red Hat, Inc.

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */

#include <stdio.h>
#include <sys/mount.h>
#include <sys/stat.h>
#include <mntent.h>
#include <windows.h>
#include <sys/cygwin.h>
#include <cygwin/version.h>
#include <stdlib.h>
#include <unistd.h>
#include <getopt.h>
#include <dirent.h>
#include "path.h"

#include <errno.h>

#define NT_MAX_PATH 32768

#define EXEC_FLAGS (MOUNT_EXEC | MOUNT_NOTEXEC | MOUNT_CYGWIN_EXEC)

static void mount_entries (void);
static void show_mounts (void);
static void show_cygdrive_info (void);
static void change_cygdrive_prefix (const char *new_prefix, int flags);
static int mount_already_exists (const char *posix_path, int flags);

// static short create_missing_dirs = FALSE;
static bool force = false;

static const char *progname;

static void
error (const char *path)
{
  fprintf (stderr, "%s: %s: %s\n", progname, path,
	   (errno == EMFILE) ? "Too many mount entries" : strerror (errno));
  exit (1);
}

/* FIXME: do_mount should also print a warning message if the dev arg
   is a non-existent Win32 path. */

static void
do_mount (const char *dev, const char *where, int flags)
{
  struct stat statbuf;
  int statres;

  statres = stat (where, &statbuf);

#if 0
  if (statres == -1)
    {
      /* FIXME: this'll fail if mount dir is missing any parent dirs */
      if (create_missing_dirs == TRUE)
	{
	  if (mkdir (where, 0755) == -1)
	    fprintf (stderr, "Warning: unable to create %s!\n", where);
	  else
	    statres = 0; /* Pretend stat succeeded if we could mkdir. */
	}
    }
#endif

  if (statres == -1)
    {
      if (!force)
	fprintf (stderr, "%s: warning - %s does not exist.\n", progname, where);
    }
  else if (!(statbuf.st_mode & S_IFDIR))
    {
      if (!force)
	fprintf (stderr, "%s: warning: %s is not a directory.\n",
		 progname, where);
    }

  if (!force && !(flags & (EXEC_FLAGS | MOUNT_BIND)) && strlen (dev))
    {
      char devtmp[1 + 2 * strlen (dev)];
      strcpy (devtmp, dev);
      char c = strchr (devtmp, '\0')[-1];
      if (c == '/' || c == '\\')
	strcat (devtmp, ".");
      /* Use a curious property of Windows which allows the use of \.. even
	 on non-directory paths. */
      for (const char *p = dev; (p = strpbrk (p, "/\\")); p++)
	strcat (devtmp, "\\..");
      strcat (devtmp, "\\");
      if (GetDriveType (devtmp) == DRIVE_REMOTE)
	{
	  fprintf (stderr,
      "%s: defaulting to 'notexec' mount option for speed since native path\n"
      "%*creferences a remote share.  Use '-f' option to override.\n",
		   progname, (int) strlen(progname) + 2, ' ');
	  flags |= MOUNT_NOTEXEC;
	}
    }

  if (mount (dev, where, flags))
    error (where);
}

static void
from_fstab (bool user)
{
  char path[PATH_MAX];
  char buf[65536];
  mnt_t *m = mount_table + max_mount_entry;

  strcpy (path, "/etc/fstab");
  if (user)
    {
      strcat (path, ".d/");
      strcat (path, getlogin ());
    }
  FILE *fh = fopen (path, "rt");
  if (!fh)
    return;
  while (fgets (buf, 65536, fh))
    {
      char *c = strrchr (buf, '\n');
      if (c)
      	*c = '\0';
      if (from_fstab_line (m, buf, user))
	++m;
    }
  max_mount_entry = m - mount_table;
  fclose (fh);
}

static void
do_mount_from_fstab (const char *where)
{
  force = true;
  /* Read fstab entries. */
  from_fstab (false);
  from_fstab (true);
  /* Loop through fstab entries and see if it matches `where'.  If `where'
     is NULL, all entries match. */
  bool exists = false;
  for (mnt_t *m = mount_table; m - mount_table < max_mount_entry; ++m)
    if (!where || !strcmp (where, m->posix))
      {
	if (m->flags & MOUNT_CYGDRIVE)
	  {
	    /* Get the cygdrive info */
	    char user[MAX_PATH];
	    char system[MAX_PATH];
	    char user_flags[MAX_PATH];
	    char system_flags[MAX_PATH];

	    exists = true;
	    cygwin_internal (CW_GET_CYGDRIVE_INFO, user, system, user_flags,
			     system_flags);
	    if ((*user && strcmp (user, m->posix) != 0)
		|| (*system && strcmp (system, m->posix) != 0))
	      if (mount (NULL, m->posix, m->flags))
		error (m->posix);
	  }
	else
	  {
	    exists = true;
	    /* Compare with existing mount table.  If the entry doesn't exist,
	       mount it. */
	    FILE *mt = setmntent ("/-not-used-", "r");
	    struct mntent *p;

	    while ((p = getmntent (mt)) != NULL)
	      if (!strcmp (m->posix, p->mnt_dir))
		break;
	    if (!p)
	      do_mount (m->native, m->posix, m->flags);
	    endmntent (mt);
	    if (where)
	      break;
	  }
      }
  if (!exists && where)
    fprintf (stderr,
	     "%s: can't find %s in /etc/fstab or in /etc/fstab.d/$USER\n",
	     progname, where);
}

static struct option longopts[] =
{
  {"all", no_argument, NULL, 'a'},
  {"change-cygdrive-prefix", no_argument, NULL, 'c'},
  {"force", no_argument, NULL, 'f'},
  {"help", no_argument, NULL, 'h' },
  {"mount-entries", no_argument, NULL, 'm'},
  {"options", required_argument, NULL, 'o'},
  {"show-cygdrive-prefix", no_argument, NULL, 'p'},
  {"version", no_argument, NULL, 'V'},
  {NULL, 0, NULL, 0}
};

static char opts[] = "acfhmpVo:";

static void
usage (FILE *where = stderr)
{
  char *options;

  fprintf (where, "Usage: %1$s [OPTION] [<win32path> <posixpath>]\n\
       %1$s -a\n\
       %1$s <posixpath>\n\
\n\
Display information about mounted filesystems, or mount a filesystem\n\
\n\
  -a, --all                     mount all filesystems mentioned in fstab\n\
  -c, --change-cygdrive-prefix  change the cygdrive path prefix to <posixpath>\n\
  -f, --force                   force mount, don't warn about missing mount\n\
				point directories\n\
  -h, --help                    output usage information and exit\n\
  -m, --mount-entries           write fstab entries to replicate mount points\n\
				and cygdrive prefixes\n\
  -o, --options X[,X...]	specify mount options\n\
  -p, --show-cygdrive-prefix    show user and/or system cygdrive path prefix\n\
  -V, --version                 output version information and exit\n\n",
  progname);
  if (!cygwin_internal (CW_LST_MNT_OPTS, &options))
    fprintf (where, "Valid options are: %s\n\n", options);
  exit (where == stderr ? 1 : 0);
}

static void
print_version ()
{
  printf ("mount (cygwin) %d.%d.%d\n"
	  "Mount filesystem utility\n"
	  "Copyright (C) 1996 - %s Red Hat, Inc.\n"
	  "This is free software; see the source for copying conditions.  There is NO\n"
	  "warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n",
	  CYGWIN_VERSION_DLL_MAJOR / 1000,
	  CYGWIN_VERSION_DLL_MAJOR % 1000,
	  CYGWIN_VERSION_DLL_MINOR,
	  strrchr (__DATE__, ' ') + 1);
}

static char *
concat3 (char *a, const char *b, const char *c)
{
  size_t totlen = strlen (a) + strlen (b) + strlen (c) + 1;
  a = (char *) realloc (a, totlen);
  return strcat (strcat (a, b), c);
}

int
main (int argc, char **argv)
{
  int i;
  int flags = MOUNT_BINARY;
  char *options = strdup ("");
  enum do_what
  {
    nada,
    saw_change_cygdrive_prefix,
    saw_show_cygdrive_prefix,
    saw_mount_commands,
    saw_mount_all,
  } do_what = nada;

  progname = program_invocation_short_name;

  if (argc == 1)
    {
      show_mounts ();
      exit (0);
    }

  while ((i = getopt_long (argc, argv, opts, longopts, NULL)) != EOF)
    switch (i)
      {
      case 'a':
	if (do_what == nada)
	  do_what = saw_mount_all;
	else
	  usage ();
	break;
      case 'c':
	if (do_what == nada)
	  do_what = saw_change_cygdrive_prefix;
	else
	  usage ();
	break;
      case 'f':
	force = true;
	break;
      case 'h':
	usage (stdout);
	break;
      case 'm':
	if (do_what == nada)
	  do_what = saw_mount_commands;
	else
	  usage ();
	break;
      case 'o':
	if (do_what == saw_mount_all)
	  usage ();
	else if (*options)
	  options = concat3 (options, ",", optarg);
	else
	  options = strdup (optarg);
	break;
      case 'p':
	if (do_what == nada)
	  do_what = saw_show_cygdrive_prefix;
	else
	  usage ();
	break;
      case 'V':
	print_version ();
	return 0;
	break;
      default:
	fprintf (stderr, "Try `%s --help' for more information.\n", progname);
	return 1;
      }

  if (cygwin_internal (CW_CVT_MNT_OPTS, &options, &flags))
    {
      fprintf (stderr, "%s: invalid option - '%s'\n", progname, options);
      exit (1);
    }

  if (flags & MOUNT_NOTEXEC && flags & (MOUNT_EXEC | MOUNT_CYGWIN_EXEC))
    {
      fprintf (stderr, "%s: invalid combination of executable options\n",
	       progname);
      exit (1);
    }

  cygwin_internal (CW_SET_DOS_FILE_WARNING, false);

  argc--;
  switch (do_what)
    {
    case saw_change_cygdrive_prefix:
      if (optind != argc)
	usage ();
      change_cygdrive_prefix (argv[optind], flags);
      break;
    case saw_show_cygdrive_prefix:
      if (optind <= argc)
	usage ();
      show_cygdrive_info ();
      break;
    case saw_mount_commands:
      if (optind <= argc)
	usage ();
      mount_entries ();
      break;
    case saw_mount_all:
      if (optind <= argc)
	usage ();
      do_mount_from_fstab (NULL);
      break;
    default:
      if (optind == argc)
	do_mount_from_fstab (argv[optind]);
      else if (optind != (argc - 1))
	{
	  fprintf (stderr, "%s: too many arguments\n", progname);
	  usage ();
	}
      else if (force || !mount_already_exists (argv[optind + 1], flags))
	do_mount (argv[optind], argv[optind + 1], flags);
      else
	{
	  errno = EBUSY;
	  error (argv[optind + 1]);
	}
    }

  /* NOTREACHED */
  return 0;
}

static char *
convert_spaces (char *tgt, const char *src)
{
  char *tp, *spacep;
  const char *sp;

  tp = tgt;
  for (sp = src; (spacep = strchr (sp, ' ')); sp = spacep + 1)
    {
      tp = stpncpy (tp, sp, spacep - sp);
      tp = stpcpy (tp, "\\040");
    }
  stpcpy (tp, sp);
  return tgt;
}

static void
mount_entries (void)
{
  FILE *m = setmntent ("/-not-used-", "r");
  struct mntent *p;
  const char *format_mnt = "%s %s %s %s 0 0\n";
  const char *format_cyg = "none %s cygdrive %s 0 0\n";

  // write fstab entries for normal mount points
  while ((p = getmntent (m)) != NULL)
    // Only list non-cygdrives and non-automounts
    if (!strstr (p->mnt_opts, ",noumount") && !strstr (p->mnt_opts, ",auto"))
      {
	char fsname[NT_MAX_PATH], dirname[NT_MAX_PATH];
	/* Drop the "bind" option since it can't be reverted. */
	char *c = strstr (p->mnt_opts, ",bind");
	if (c)
	  memmove (c, c + 5, strlen (c + 5) + 1);
	printf (format_mnt, convert_spaces (fsname, p->mnt_fsname),
			    convert_spaces (dirname, p->mnt_dir),
			    p->mnt_type, p->mnt_opts);
      }
  endmntent (m);

  // write fstab entry for cygdrive prefix
  m = setmntent ("/-not-used-", "r");
  while ((p = getmntent (m)) != NULL)
    {
      char *noumount;
      if ((noumount = strstr (p->mnt_opts, ",noumount")))
	{
	  char dirname[NT_MAX_PATH];
	  char opts[strlen (p->mnt_opts) + 1];

	  convert_spaces (dirname, p->mnt_dir);
	  // remove trailing slash
	  char *ls = strrchr (dirname, '/');
	  if (ls)
	    {
	      // last slash == leading slash?  cygdrive prefix == "/"
	      if (ls == dirname)
		++ls;
	      *ls = '\0';
	    }
	  *stpncpy (opts, p->mnt_opts, noumount - p->mnt_opts) = '\0';
	  printf (format_cyg, dirname, opts);
	  break;
	}
    }
  endmntent (m);

  exit(0);
}

static void
show_mounts (void)
{
  FILE *m = setmntent ("/-not-used-", "r");
  struct mntent *p;
  const char *format = "%s on %s type %s (%s)\n";

  // printf (format, "Device", "Directory", "Type", "Flags");
  while ((p = getmntent (m)) != NULL)
    printf (format, p->mnt_fsname, p->mnt_dir, p->mnt_type, p->mnt_opts);
  endmntent (m);
}

/* Return 1 if mountpoint from the same registry area is already in
   mount table.  Otherwise return 0. */
static int
mount_already_exists (const char *posix_path, int flags)
{
  int found_matching = 0;

  FILE *m = setmntent ("/-not-used-", "r");
  struct mntent *p;

  while ((p = getmntent (m)) != NULL)
    {
      /* if the paths match, and they're both the same type of mount. */
      if (strcmp (p->mnt_dir, posix_path) == 0)
	{
	  if (p->mnt_type[0] == 'u')
	    {
	      if (!(flags & MOUNT_SYSTEM)) /* both current_user */
		found_matching = 1;
	      else
		fprintf (stderr,
			 "%s: warning: system mount point of '%s' "
			 "will always be masked by user mount.\n",
			 progname, posix_path);
	      break;
	    }
	  else if (p->mnt_type[0] == 's')
	    {
	      if (flags & MOUNT_SYSTEM) /* both system */
		found_matching = 1;
	      else
		fprintf (stderr,
			 "%s: warning: user mount point of '%s' "
			 "masks system mount.\n", progname, posix_path);
	      break;
	    }
	  else
	    {
	      fprintf (stderr, "%s: warning: couldn't determine mount type.\n",
		       progname);
	      break;
	    }
	}
    }
  endmntent (m);

  return found_matching;
}

/* change_cygdrive_prefix: Change the cygdrive prefix */
static void
change_cygdrive_prefix (const char *new_prefix, int flags)
{
  flags |= MOUNT_CYGDRIVE;

  if (mount (NULL, new_prefix, flags))
    error (new_prefix);

  exit (0);
}

/* show_cygdrive_info: Show the user and/or cygdrive info, i.e., prefix and
   flags.*/
static void
show_cygdrive_info ()
{
  /* Get the cygdrive info */
  char user[MAX_PATH];
  char system[MAX_PATH];
  char user_flags[MAX_PATH];
  char system_flags[MAX_PATH];
  cygwin_internal (CW_GET_CYGDRIVE_INFO, user, system, user_flags,
		   system_flags);

  /* Display the user and system cygdrive path prefix, if necessary
     (ie, not empty) */
  const char *format = "%-18s  %-11s  %s\n";
  printf (format, "Prefix", "Type", "Flags");
  if (strlen (user) > 0)
    printf (format, user, "user", user_flags);
  if (strlen (system) > 0)
    printf (format, system, "nouser", system_flags);

  exit (0);
}
@


1.55
log
@Update copyrights
@
text
@d4 1
a4 1
   2007, 2008, 2009, 2010, 2011 Red Hat, Inc.
a24 3
#ifdef errno
#undef errno
#endif
d104 1
a104 1
		   progname, strlen(progname) + 2, ' ');
@


1.54
log
@Clean up whitespace.
@
text
@d3 2
a4 2
   Copyright 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2005,
   2008, 2009, 2010, 2011 Red Hat, Inc.
@


1.54.2.1
log
@Pull in changes from HEAD
@
text
@d3 2
a4 2
   Copyright 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006,
   2007, 2008, 2009, 2010, 2011 Red Hat, Inc.
@


1.54.2.2
log
@	Throughout, fix type problems on 32 and 64 bit.  Except:
	* ssp.c: Disable entire functionality on x86_64 for now.
@
text
@d4 1
a4 1
   2007, 2008, 2009, 2010, 2011, 2013 Red Hat, Inc.
d25 3
@


1.54.2.3
log
@	* ldd.cc: Drop including inttypes.h.  Use %u rather than PRIu32.
	* mount.cc: Fix type problem with %* expression.
	* cygcheck.cc: Ditto.
@
text
@d104 1
a104 1
		   progname, (int) strlen(progname) + 2, ' ');
@


1.53
log
@	* Align usage output, version output, as well as usage and version
	option handling to use the same style throughout all Cygwin utils.
	Throughout use program_invocation_short_name to refer to current
	process name in Cygwin executables.
	* utils.sgml: Align documentation to above change.  Add missing
	sections for getconf, ldd, and setmetamode.
	* strace.cc (proc_child): Avoid compiler warning.
@
text
@d243 3
a245 3
          "Mount filesystem utility\n"
          "Copyright (C) 1996 - %s Red Hat, Inc.\n"
          "This is free software; see the source for copying conditions.  There is NO\n"
d247 4
a250 4
          CYGWIN_VERSION_DLL_MAJOR / 1000,
          CYGWIN_VERSION_DLL_MAJOR % 1000,
          CYGWIN_VERSION_DLL_MINOR,
          strrchr (__DATE__, ' ') + 1);
d369 1
a369 1
      	usage ();
d439 1
a439 1
      	{
d459 1
a459 1
      
@


1.52
log
@	* mount.cc (from_fstab): Fix potentially fatal typo.
@
text
@d4 1
a4 1
   2008, 2009, 2010 Red Hat, Inc.
d18 1
a42 1
static const char version[] = "$Revision: 1.14 $";
d86 2
a87 1
	fprintf (stderr, "%s: warning: %s is not a directory.\n", progname, where);
d104 4
a107 3
	  fprintf (stderr, "%s: defaulting to 'notexec' mount option for speed since native path\n"
		   "%*creferences a remote share.  Use '-f' option to override.\n", progname,
		   strlen(progname) + 2, ' ');
d206 1
a206 1
  {"version", no_argument, NULL, 'v'},
d210 1
a210 1
static char opts[] = "acfhmpvo:";
d217 4
a220 3
  fprintf (where, "Usage: %s [OPTION] [<win32path> <posixpath>]\n\
       %s -a\n\
       %s <posixpath>\n\
d232 2
a233 2
  -v, --version                 output version information and exit\n\n",
  progname, progname, progname);
d242 9
a250 18
  const char *v = strchr (version, ':');
  int len;
  if (!v)
    {
      v = "?";
      len = 1;
    }
  else
    {
      v += 2;
      len = strchr (v, ' ') - v;
    }
  printf ("\
%s (cygwin) %.*s\n\
Filesystem Utility\n\
Copyright 1996-2010 Red Hat, Inc.\n\
Compiled on %s\n\
", progname, len, v, __DATE__);
d276 1
a276 7
  progname = strrchr (argv[0], '/');
  if (progname == NULL)
    progname = strrchr (argv[0], '\\');
  if (progname == NULL)
    progname = argv[0];
  else
    progname++;
d325 1
a325 1
      case 'v':
d330 2
a331 1
	usage ();
d342 2
a343 1
      fprintf (stderr, "%s: invalid combination of executable options\n", progname);
d509 1
a509 2
			 "masks system mount.\n",
			 progname, posix_path);
d514 2
a515 1
	      fprintf (stderr, "%s: warning: couldn't determine mount type.\n", progname);
@


1.51
log
@	* mount.cc (do_mount): Don't treat "bind" mount as remote mount.
	(mount_entries): Drop the "bind" option from output.
	* utils.sgml (mount): Match examples to actual mount output.  Add
	"bind" option and add example.
@
text
@d133 1
a133 1
      if (*c)
@


1.50
log
@	* mount.cc (oopts): Remove entirely.
	(usage): Call cygwin_internal (CW_LST_MNT_OPTS) to create list of
	mount options.
	(print_version): Fix copyright date.
	(main): Replace option processing loop with single call to
	cygwin_internal (CW_CVT_MNT_OPTS).
@
text
@d89 1
a89 1
  if (!force && !(flags & EXEC_FLAGS) && strlen (dev))
d429 1
a429 1
    // Only list non-cygdrives
d433 4
@


1.49
log
@	* mount.cc (do_mount_from_fstab): Allow to change cygdrive prefix, too.
@
text
@a209 22
struct opt
{
  const char *name;
  unsigned val;
  bool clear;
} oopts[] =
{
  {"acl", MOUNT_NOACL, true},
  {"auto", 0, false},
  {"binary", MOUNT_BINARY, false},
  {"cygexec", MOUNT_CYGWIN_EXEC, false},
  {"exec", MOUNT_EXEC, false},
  {"noacl", MOUNT_NOACL, false},
  {"nosuid", 0, false},
  {"notexec", MOUNT_NOTEXEC, false},
  {"override", MOUNT_OVERRIDE, true},
  {"posix=0", MOUNT_NOPOSIX, false},
  {"posix=1", MOUNT_NOPOSIX, true},
  {"text", MOUNT_BINARY, true},
  {"user", MOUNT_SYSTEM, true}
};

d213 2
d229 4
a232 6
  -v, --version                 output version information and exit\n\
\n\
Valid options are:\n\n  ", progname, progname, progname);
  for (opt *o = oopts; o < (oopts + (sizeof (oopts) / sizeof (oopts[0]))); o++)
    fprintf (where, "%s%s", o == oopts ? "" : ",", o->name);
  fputs ("\n\n", where);
d254 1
a254 1
Copyright 1996-2008 Red Hat, Inc.\n\
d345 1
a345 1
  while (*options)
a346 15
      char *p = strchr (options, ',');
      if (p)
	*p++ = '\0';
      else
	p = strchr (options, '\0');

      for (opt *o = oopts; o < (oopts + (sizeof (oopts) / sizeof (oopts[0]))); o++)
	if (strcmp (options, o->name) == 0)
	  {
	    if (o->clear)
	      flags &= ~o->val;
	    else
	      flags |= o->val;
	    goto gotit;
	  }
a348 3

    gotit:
      options = p;
@


1.48
log
@	* mount.cc (do_mount): Don't exit, just return.
@
text
@d4 1
a4 1
   2008, 2009 Red Hat, Inc.
d153 1
a153 1
    if (!(m->flags & MOUNT_CYGDRIVE) && (!where || !strcmp (where, m->posix)))
d155 33
a187 14
	exists = true;
	/* Compare with existing mount table.  If the entry doesn't exist,
	   mount it. */
	FILE *mt = setmntent ("/-not-used-", "r");
	struct mntent *p;

	while ((p = getmntent (mt)) != NULL)
	  if (!strcmp (m->posix, p->mnt_dir))
	    break;
	if (!p)
	  do_mount (m->native, m->posix, m->flags);
	endmntent (mt);
	if (where)
	  break;
@


1.47
log
@	* mount.cc (do_mount): Replace --no-executable flag with notexec
	mount option in hint for remote filesystems.
	* path.cc (getmntent): Fix typo (noexec -> notexec).
@
text
@a111 2

  exit (0);
@


1.46
log
@	* Makefile.in (path-mount.o): Add a rule to build stripped down version
	of path.cc for usage in mount.
	(mount.exe): Add dependency to path-mount.o.
	* mount.cc (force): Convert to bool value.  Accommodate throughout.
	(from_fstab): New function.
	(do_mount_from_fstab): New function.
	(longopts): Add --all option.
	(opts): Add -a option.
	(usage): Document -a/--all option.
	(main): Handle -a option as well as single parameter.
	* path.cc: Add FSTAB_ONLY conditional to allow building path-mount.o.
	(mount_table): Remove static storage class.
	(max_mount_entry): Ditto.
	(root_here): Unused.  Remove.
	(from_fstab_line): Remove static.
	* path.h (struct mnt_t): Define here rather than in path.cc.
	(from_fstab_line): Declare.
	(mount_table): Declare.
	(max_mount_entry): Declare.
	* utils.sgml (mount): Document -a/--all option and mounting of single
	path from fstab files.
@
text
@d103 1
a103 1
	  fprintf (stderr, "%s: defaulting to '--no-executable' flag for speed since native path\n"
@


1.45
log
@cygwin ChangeLog
2009-05-13  Corinna Vinschen  <corinna@@vinschen.de>
	    Christopher Faylor  <me+cygwin@@cgf.cx>

	* mount.cc (mount_info::got_usr_bin): Define.
	(mount_info::got_usr_lib): Ditto.
	(mount_info::root_idx): Ditto.
	(mount_info::create_root_entry): Create root entry as immutable and
	flag as automatic.
	(mount_info::init): Remove "Huh?  No /etc/fstab..." warning.
	Unconditionally call from_fstab for user and system tables.  Fill in
	/usr/bin and /usr/lib if they have not been specified in /etc/fstab.
	(oopts): Alphabetize.  Add "override" option to allow overriding
	immutable mount points.
	(mount_info::add_item): Accommodate new MOUNT_IMMUTABLE flag intended
	for root mount.
	(mount_info::add_item): Detect "/usr/bin", "/usr/lib", and "/" and set
	appropriate global state.
	(fillout_mntent): Add ,auto to mount points added by Cygwin DLL.
	(mount): Remove masking of MOUNT_SYSTEM.  Allow user to shoot
	themselves.  Add comment.
	* mount.h (mount_info::got_usr_bin): Declare.
	(mount_info::got_usr_lib): Ditto.
	(mount_info::root_idx): Ditto.
	* include/sys/mount.h: Reformat enum.
	Add MOUNT_{OVERRIDE,IMMUTABLE,AUTOMATIC}.

doc ChangeLog
2009-05-13  Corinna Vinschen  <corinna@@vinschen.de>
	    Christopher Faylor  <me+cygwin@@cgf.cx>

	* pathnames.sgml (mount-table): Sort mount options and add override
	option.  Add description of root mount handling.

utils ChangeLog
2009-05-13  Corinna Vinschen  <corinna@@vinschen.de>
	    Christopher Faylor  <me+cygwin@@cgf.cx>

	* mount.cc (oopts): Sort.  Add override option.  Add dummy "auto"
	option for consistency.
	(mount_entries): Avoid adding auto-mounted entries to -m output.

	* utils.sgml: Sort mount options.  Add description of override option.
@
text
@d19 1
d22 1
d40 1
a40 1
static short force = FALSE;
d116 62
d180 1
d191 1
a191 1
static char opts[] = "cfhmpvo:";
d219 2
d223 1
d234 1
a234 1
Valid options are:\n\n  ", progname);
d283 2
a284 1
    saw_mount_commands
d304 6
d317 1
a317 1
	force = TRUE;
d329 3
a331 1
	if (*options)
d400 5
d406 3
a408 1
      if (optind != (argc - 1))
d410 1
a410 4
	  if (optind >= argc)
	    fprintf (stderr, "%s: not enough arguments\n", progname);
	  else
	    fprintf (stderr, "%s: too many arguments\n", progname);
d413 1
a413 1
      if (force || !mount_already_exists (argv[optind + 1], flags))
@


1.44
log
@	* mount.cc (mount_entries): Handle a "/" cygdrive prefix correctly.
	Add comments.
@
text
@d4 1
a4 1
   2008 Red Hat, Inc.
d135 2
d138 1
a138 1
  {"text", MOUNT_BINARY, true},
d140 2
d143 2
a144 4
  {"cygexec", MOUNT_CYGWIN_EXEC, false},
  {"nosuid", 0, 0},
  {"acl", MOUNT_NOACL, true},
  {"noacl", MOUNT_NOACL, false},
d146 2
a147 1
  {"posix=0", MOUNT_NOPOSIX, false},
d372 1
a372 1
    if (!strstr (p->mnt_opts, ",noumount"))
@


1.43
log
@	* mount.cc (NT_MAX_PATH): Define.
	(longopts): Rename mount-commands option to mount-entries.
	(opts): Remove removed options.
	(struct opt): Move up in file to allow using it in usage.
	(usage): Change text for --mount-entries option.  Remove
	-X option.  Add valid options output.
	(main): Remove handling -b option.
	(convert_spaces): New static function to convert spaces to "\040"
	string.
	(mount_entries): Renamed from mount_commands.  Rewrite to emit
	/etc/fstab compatible output.
	(show_cygdrive_info): Print "nouser" rather than "system".
	* umount.cc (longopts): Remove remove-all-mounts,
	remove-cygdrive-prefix, remove-system-mounts, system and user options.
	(opts): Remove A, c, s, S, u options.
	(usage): Remove text for all removed options.
	(main): Remove handling for all removed options.
	(remove_all_mounts): Remove.
	(remove_all_system_mounts): Remove.
	(remove_cygdrive_prefix): Remove.
	* utils.sgml: Fix mount and umount documentation.  Move description
	of (cyg,not)exec options to mount table section.
@
text
@d389 1
d391 7
a397 2
	  if (ls && ls > dirname)
	    *ls = '\0';
@


1.42
log
@* mount.cc: Remove non-unix-like options (-x,-t,b) throughout.
(oopts): Use boolean constants for slightly increased clarity.
* configure.in: Remove apparently unneeded program_transfer_name code.
* configure: Regenerate.
@
text
@d27 2
d31 1
a31 1
static void mount_commands (void);
d119 1
a119 1
  {"mount-commands", no_argument, NULL, 'm'},
d126 20
a145 1
static char opts[] = "bcfhmpstuvxEXo:";
d157 2
a158 2
  -m, --mount-commands          write mount commands to replicate user and\n\
				system mount points and cygdrive prefixes\n\
d162 5
a166 3
  -X, --cygwin-executable       treat all files under mount point as cygwin\n\
				executables\n\
", progname);
a169 17
struct opt
{
  const char *name;
  unsigned val;
  bool clear;
} oopts[] =
{
  {"user", MOUNT_SYSTEM, true},
  {"system", MOUNT_SYSTEM, false},
  {"binary", MOUNT_BINARY, false},
  {"text", MOUNT_BINARY, true},
  {"exec", MOUNT_EXEC, false},
  {"notexec", MOUNT_NOTEXEC, false},
  {"cygexec", MOUNT_CYGWIN_EXEC, false},
  {"nosuid", 0, 0}
};

a231 3
      case 'b':
	flags |= MOUNT_BINARY;
	break;
d318 1
a318 1
      mount_commands ();
d342 16
d359 1
a359 1
mount_commands (void)
d363 2
a364 8
  char *c;
  const char *format_mnt = "mount%s \"%s\" \"%s\"\n";
  const char *format_cyg = "mount%s --change-cygdrive-prefix \"%s\"\n";
  char opts[MAX_PATH];
  char user[MAX_PATH];
  char system[MAX_PATH];
  char user_flags[MAX_PATH];
  char system_flags[MAX_PATH];
d366 1
a366 1
  // write mount commands for user and system mount points
d371 4
a374 14
	strcpy(opts, " -f");
	if      (p->mnt_opts[0] == 'b')
	  strcat (opts, " -b");
	else if (p->mnt_opts[0] == 't')
	  strcat (opts, " -t");
	if (strstr (p->mnt_opts, ",exec"))
	  strcat (opts, " -x");
	if (strstr (p->mnt_opts, ",noexec"))
	  strcat (opts, " -E");
	if (strstr (p->mnt_opts, ",cygexec"))
	  strcat (opts, " -X");
	while ((c = strchr (p->mnt_fsname, '\\')) != NULL)
	  *c = '/';
	printf (format_mnt, opts, p->mnt_fsname, p->mnt_dir);
d378 3
a380 5
  // write mount commands for cygdrive prefixes
  cygwin_internal (CW_GET_CYGDRIVE_INFO, user, system, user_flags,
		   system_flags);

  if (strlen (user) > 0)
d382 14
a395 6
      strcpy (opts, " -u");
      if (user_flags[0] == 'b')
	strcat (opts, " -b");
      else if (user_flags[0] == 't')
	strcat (opts, " -t");
      printf (format_cyg, opts, user);
d397 2
a398 11

  if (strlen (system) > 0)
    {
      strcpy (opts, " -s");
      if (system_flags[0] == 'b')
	strcat (opts, " -b");
      else if (system_flags[0] == 't')
	strcat (opts, " -t");
      printf (format_cyg, opts, system);
    }

d496 1
a496 1
    printf (format, system, "system", system_flags);
@


1.41
log
@	* mount.cc (do_mount): Remove MOUNT_ENC code.
	(oopts): Remove "managed" option.
	(mount_commands): Drop "managed" handling.
	* path.cc (oopts): Remove "managed" option.
	(getmntent): Remove MOUNT_ENC code.
@
text
@a113 1
  {"binary", no_argument, NULL, 'b'},
a114 2
  {"cygwin-executable", no_argument, NULL, 'X'},
  {"executable", no_argument, NULL, 'x'},
a117 1
  {"no-executable", no_argument, NULL, 'E'},
a119 3
  {"system", no_argument, NULL, 's'},
  {"text", no_argument, NULL, 't'},
  {"user", no_argument, NULL, 'u'},
a131 2
  -b, --binary     (default)    text files are equivalent to binary files\n\
				(newline = \\n)\n\
a139 3
  -s, --system                  (ignored)\n\
  -t, --text                    text files get \\r\\n line endings\n\
  -u, --user                    (ignored)\n\
a140 3
  -x, --executable              treat all files under mount point as executables\n\
  -E, --no-executable           treat all files under mount point as \n\
				non-executables\n\
d154 7
a160 7
  {"user", MOUNT_SYSTEM, 1},
  {"system", MOUNT_SYSTEM, 0},
  {"binary", MOUNT_BINARY, 0},
  {"text", MOUNT_BINARY, 1},
  {"exec", MOUNT_EXEC, 0},
  {"notexec", MOUNT_NOTEXEC, 0},
  {"cygexec", MOUNT_CYGWIN_EXEC, 0},
a258 7
      case 's':
	break;
      case 't':
	flags &= ~MOUNT_BINARY;
	break;
      case 'u':
	break;
a262 9
      case 'x':
	flags |= MOUNT_EXEC;
	break;
      case 'E':
	flags |= MOUNT_NOTEXEC;
	break;
      case 'X':
	flags |= MOUNT_CYGWIN_EXEC;
	break;
@


1.40
log
@	* mount.cc (usage): Mark -s and -u as ignored.
	(print_version): Simplify printing copyright dates.
	(main): Remove default_flag.  Dont set flags on -s and -u options.
	(mount_commands): Drop handling -s and -u options.
@
text
@a105 19
  if (!force && flags & MOUNT_ENC)
    {
      DIR *dd = opendir (dev);
      if (dd)
	{
	  struct dirent *d;
	  while ((d = readdir (dd)))
	    {
	      if (d->d_name[0] != '.')
		/* fall through */;
	      else if (d->d_name[1] == '\0'
		       || (d->d_name[1] == '.' && d->d_name[2] == '\0'))
		continue;
	      fprintf (stderr, "%s: error: don't use \"-o managed\" on non-empty directories\n", progname);
	      exit (1);
	    }
	}
    }

d176 1
a176 2
  {"nosuid", 0, 0},
  {"managed", MOUNT_ENC, 0}
a399 2
	if (strstr (p->mnt_opts, ",managed"))
	  strcat (opts, " -o managed");
@


1.39
log
@* cygwin/external.cc (cygwin_internal): Implement CW_SET_DOS_FILE_WARNING.
* cygwin/include/sys/cygwin.h: Define CW_SET_DOS_FILE_WARNING.
* utils/mount.cc (main): Turn dos file warnings off since we know what we're
doing.
@
text
@d3 2
a4 1
   Copyright 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2005 Red Hat, Inc.
d168 1
a168 1
  -s, --system     (default)    add system-wide mount point\n\
d170 1
a170 1
  -u, --user                    add user-only mount point\n\
d217 1
a217 1
Copyright 1996, 1997, 1998, 1999, 2000, 2001, 2002 Red Hat, Inc.\n\
a234 1
  int default_flag = MOUNT_SYSTEM;
a294 1
	flags |= MOUNT_SYSTEM;
a299 2
	flags &= ~MOUNT_SYSTEM;
	default_flag = 0;
d356 1
a356 1
      change_cygdrive_prefix (argv[optind], flags | default_flag);
d377 2
a378 2
      if (force || !mount_already_exists (argv[optind + 1], flags | default_flag))
	do_mount (argv[optind], argv[optind + 1], flags | default_flag);
a409 4
	if      (p->mnt_type[0] == 'u')
	  strcat (opts, " -u");
	else if (p->mnt_type[0] == 's')
	  strcat (opts, " -s");
@


1.38
log
@* mount.cc (do_mount): Avoid unnecessary cygwin_conv_to_win32_path and pass
POSIX path directly - this avoids a cygwin DLL warning.
@
text
@d351 2
@


1.37
log
@	* mount.cc (longopts): Fix typo which disallows --options option.
@
text
@a54 1
  char win32_path[MAX_PATH];
d57 1
a57 3
  cygwin_conv_to_win32_path (where, win32_path);

  statres = stat (win32_path, &statbuf);
@


1.36
log
@* mount.cc (mount_commands): Display "-X" option when appropriate.
@
text
@d3 1
a3 1
   Copyright 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003 Red Hat, Inc.
d143 1
a143 1
  {"options", required_argument, NULL, 'E'},
@


1.35
log
@* mount.cc (usage): Clarify action of -m option.
@
text
@d426 2
@


1.34
log
@fix whitespace, update some copyrights
@
text
@d166 1
a166 1
  -m, --mount-commands          write mount commands to replace user and\n\
@


1.33
log
@* mount.cc (mount_commands): Ensure user mode is actually user mode and not the
default system mode.
@
text
@d95 1
a95 1
         on non-directory paths. */
@


1.32
log
@* mount.cc (do_mount): Issue warning when using managed mount option on
non-empty directory.
@
text
@d409 1
a409 1
  while ((p = getmntent (m)) != NULL) {
d411 21
a431 19
    if (!strstr (p->mnt_opts, ",noumount")) {
      strcpy(opts, " -f");
      if      (p->mnt_type[0] == 'u')
        strcat (opts, " -u");
      else if (p->mnt_type[0] == 's')
        strcat (opts, " -s");
      if      (p->mnt_opts[0] == 'b')
        strcat (opts, " -b");
      else if (p->mnt_opts[0] == 't')
        strcat (opts, " -t");
      if (strstr (p->mnt_opts, ",exec"))
        strcat (opts, " -x");
      if (strstr (p->mnt_opts, ",noexec"))
        strcat (opts, " -E");
      while ((c = strchr (p->mnt_fsname, '\\')) != NULL)
        *c = '/';
      printf (format_mnt, opts, p->mnt_fsname, p->mnt_dir);
    }
  }
d437 20
a456 16
  if (strlen (user) > 0) {
    strcpy (opts, "   ");
    if      (user_flags[0] == 'b')
      strcat (opts, " -b");
    else if (user_flags[0] == 't')
      strcat (opts, " -t");
    printf (format_cyg, opts, user);
  }
  if (strlen (system) > 0) {
    strcpy (opts, " -s");
    if      (system_flags[0] == 'b')
      strcat (opts, " -b");
    else if (system_flags[0] == 't')
      strcat (opts, " -t");
    printf (format_cyg, opts, system);
  }
@


1.31
log
@* mount.cc (struct opt): Remove posix option.
@
text
@d19 1
d105 19
@


1.30
log
@* mount.cc (longopts): Add long "options" keyword.
(opts): Add -o option.
(usage): Display -o option.
(struct opt): New.
(concat3): New function.
(main): Handle -o flag.
@
text
@d177 1
a177 2
  {"suid", 0, 0},
  {"posix", MOUNT_ENC, 0},
@


1.29
log
@* cygcheck.cc (usage) Add description output.
@
text
@d3 1
a3 1
   Copyright 1996, 1997, 1998, 1999, 2000, 2001, 2002 Red Hat, Inc.
d123 1
d132 1
a132 1
static char opts[] = "bcfhmpstuvxEX";
d148 1
d163 19
d205 8
d219 1
d266 6
d304 24
@


1.28
log
@* mount.cc (usage): Correctly report default mode.
@
text
@d137 2
@


1.27
log
@Add final newlines to utils
@
text
@d137 1
a137 1
  -b, --binary                  text files are equivalent to binary files\n\
d147 1
a147 1
  -t, --text       (default)    text files get \\r\\n line endings\n\
@


1.26
log
@* mount.cc (main): Ensure that mount_already_exists() also gets default flag
that is passed to do_mount.
* cygpath.cc (long_options): Add "dos" and "mixed", correct "close", "file" and
"type" to use NULL flag.
(usage): Clean up usage output (more), accomodate new options.
(main): Add --dos and --mixed options; accomodate all output forms in --type.
Make UNIXy output default.
@
text
@d178 2
a179 1
Compiled on %s", progname, len, v, __DATE__);
@


1.25
log
@* mount.cc (main): Use default system/user flag for cygdrive stuff, too.
(change_cygdrive_prefix): Change MOUNT_AUTO to MOUNT_CYGDRIVE.
* umount.cc (remove_cygdrive_prefix): Ditto.
(main): Use default system/user flag for cygdrive stuff, too.
@
text
@d299 1
a299 1
      if (force || !mount_already_exists (argv[optind + 1], flags))
@


1.24
log
@* mount.cc (opts): Remove '-i' option.
(usage): Ditto.
(main): Ditto.
(longopts): Remove --import-old-mounts option.
@
text
@d278 1
a278 1
      change_cygdrive_prefix (argv[optind], flags);
d439 1
a439 1
  flags |= MOUNT_AUTO;
@


1.23
log
@* mount.cc (main): Make -b the default.
@
text
@a120 1
  {"import-old-mounts", no_argument, NULL, 'i'},
d131 1
a131 1
static char opts[] = "bcfhimpstuvxEX";
a142 2
  -i, --import-old-mounts       copy old registry mount table mounts into the\n\
                                current mount areas\n\
a190 1
    saw_import_old_mounts,
a226 6
      case 'i':
	if (do_what == nada)
	  do_what = saw_import_old_mounts;
	else
	  usage ();
	break;
a278 6
      break;
    case saw_import_old_mounts:
      if (optind <= argc)
	usage ();
      else
	cygwin_internal (CW_READ_V1_MOUNT_TABLES);
@


1.22
log
@* mount.cc (version) New global variable.
(usage) Standardize usage output.  Accomodate new version option.
(print_version) New function.
(longopts) Accomodate new version option.
(opts) Ditto.
(main) Ditto.
@
text
@d188 1
a188 1
  int flags = 0;
@


1.21
log
@* Makefile.in (kill.exe): Add as a specific target.
* kill.cc (longopts): New.
(opts): Ditto.
(get_sig): Accept const char * parameter.  Return -1 on unknown signal.
(test_for_unknown_sig): New function.
(listsig): New function.
(main): Use getopt_long for option parsing.  Implement -l, and -s options.  Use
test_for_unknown_sig() to test for signal validity.
@
text
@d3 1
a3 1
   Copyright 1996, 1997, 1998, 1999, 2000, 2001 Red Hat, Inc.
d36 1
a114 1
  {"help", no_argument, NULL, 'h' },
d116 3
d120 5
d128 1
a128 7
  {"executable", no_argument, NULL, 'x'},
  {"no-executable", no_argument, NULL, 'E'},
  {"change-cygdrive-prefix", no_argument, NULL, 'c'},
  {"cygwin-executable", no_argument, NULL, 'X'},
  {"show-cygdrive-prefix", no_argument, NULL, 'p'},
  {"import-old-mounts", no_argument, NULL, 'i'},
  {"mount-commands", no_argument, NULL, 'm'},
d132 1
a132 1
static char opts[] = "hbfstuxXEpicm";
d135 1
a135 1
usage (void)
d137 1
a137 1
  fprintf (stderr, "Usage: %s [OPTION] [<win32path> <posixpath>]\n\
d143 1
d146 2
d152 1
d154 2
a157 2
  -m, --mount-commands          write mount commands to replace user and\n\
				system mount points and cygdrive prefixes\n\
d159 23
a181 1
  exit (1);
d199 7
a205 1
  progname = argv[0];
d228 3
d237 6
d259 3
a261 2
      case 'X':
	flags |= MOUNT_CYGWIN_EXEC;
d269 2
a270 5
      case 'm':
	if (do_what == nada)
	  do_what = saw_mount_commands;
	else
	  usage ();
@


1.20
log
@* mount.cc (do_mount): Default to non-exec option for remote drives.  Report
warnings before attempting a mount.
(longopts): Add no-executable option.
(mount_commands): Ditto.
(opts): Ditto.
(usage): Ditto.  Indicate that system mount is now the default.
(main): Accommodate no-executable option.  Make system mount the default.
* umount.cc (usage): Indicate that system umount is now the default.
(main): Make system umount the default.
@
text
@d112 1
a112 1
struct option longopts[] =
d130 1
a130 1
char opts[] = "hbfstuxXEpicm";
@


1.19
log
@* mount.cc (usage): Fix typo in output.
@
text
@d25 2
a73 3
  if (mount (dev, where, flags))
    error (where);

d76 1
a76 1
      if (force == FALSE)
d81 1
a81 1
      if (force == FALSE)
d85 24
d121 1
d130 1
a130 1
char opts[] = "hbfstuxXpicm";
d144 1
a144 1
  -s, --system                  add mount point to system-wide registry location\n\
d146 1
a146 1
  -u, --user       (default)    add mount point to user registry location\n\
d161 1
d214 1
d222 3
d235 6
d275 1
a275 1
	do_mount (argv[optind], argv[optind + 1], flags);
d316 2
@


1.18
log
@* Makefile.in: Only build testsuite directory on first 'make check'.
* configure.in: Remove testsuite from SUBDIRS.
* configure: Regenerate.
@
text
@d117 2
a118 2
  -i, --import-old-mounts copy  old registry mount table mounts into the current\n\
				mount areas\n\
@


1.17
log
@* mount.cc (mount_commands): Don't write /cygdrive/u mount points.
@
text
@d3 1
a3 1
   Copyright 1996, 1997, 1998, 1999 Cygnus Solutions.
@


1.16
log
@* mount.cc (longopts): Add mount-commands to options list.
(usage): Add mount-commands option.
(mount_commands): New function.  Write commands to recreate current mounts.
@
text
@d268 17
a284 14
    strcpy(opts, " -f");
    if      (p->mnt_type[0] == 'u')
      strcat (opts, " -u");
    else if (p->mnt_type[0] == 's')
      strcat (opts, " -s");
    if      (p->mnt_opts[0] == 'b')
      strcat (opts, " -b");
    else if (p->mnt_opts[0] == 't')
      strcat (opts, " -t");
    if (strstr (p->mnt_opts, ",exec"))
      strcat (opts, " -x");
    while ((c = strchr (p->mnt_fsname, '\\')) != NULL)
      *c = '/';
    printf (format_mnt, opts, p->mnt_fsname, p->mnt_dir);
@


1.15
log
@* mount.cc (main): Eliminate excess arguments in printf.
@
text
@d25 1
d102 1
d106 1
a106 1
char opts[] = "hbfstuxXpic";
d126 2
d142 2
a143 1
    saw_show_cygdrive_prefix
d196 6
d225 5
d250 56
@


1.14
log
@* mount.cc (main): Issue correct warning for 'not enough arguments'.
@
text
@d220 1
a220 1
	    fprintf (stderr, "%s: too many arguments\n", progname, optind, argc);
@


1.13
log
@* mount.cc (longopts): Add help to options list.
(opts): Add 'h' to options string.
* umount.cc (longopts): Add help to options list.
(opts): Add 'h' to options string and change 'R' to 'A'.
@
text
@d217 4
a220 1
	  fprintf (stderr, "%s: too many arguments\n", progname);
@


1.12
log
@* mount.cc (main): Use getopt_long for parsing arguments.
(usage): Reformat, show long and short options.
* umount.cc (main): Ditto, all of the above.
@
text
@d90 1
d104 1
a104 1
char opts[] = "bfstuxXpic";
d114 1
a114 1
                                point directories\n\
d155 1
a155 1
      case 'c': 
d263 7
a269 7
              if (!(flags & MOUNT_SYSTEM)) /* both current_user */
                found_matching = 1;
              else
	        fprintf (stderr,
                         "%s: warning: system mount point of '%s' "
                         "will always be masked by user mount.\n",
                         progname, posix_path);
d271 1
a271 1
            }
d274 7
a280 7
              if (flags & MOUNT_SYSTEM) /* both system */
                found_matching = 1;
              else
	        fprintf (stderr,
                         "%s: warning: user mount point of '%s' "
                         "masks system mount.\n",
                         progname, posix_path);
@


1.11
log
@* mount.cc (show_mounts): Change format string to more closely resemble UNIX
when displaying mount table.
@
text
@d18 1
d88 17
d108 15
a122 14
  fprintf (stderr, "usage %s [-bfstux] <win32path> <posixpath>
-b  text files are equivalent to binary files (newline = \\n)
-f  force mount, don't warn about missing mount point directories
-s  add mount point to system-wide registry location
-t  text files get \\r\\n line endings (default)
-u  add mount point to user registry location (default)
-x  treat all files under mount point as executables

[-bs] --change-cygdrive-prefix <posixpath>
    change the cygdrive path prefix to <posixpath>
--show-cygdrive-prefixes
    show user and/or system cygdrive path prefixes
--import-old-mounts
    copy old registry mount table mounts into the current mount areas
d128 1
a128 1
main (int argc, const char **argv)
d132 7
d148 4
a151 28
  for (i = 1; i < argc; ++i)
    {
      if (argv[i][0] != '-')
	 break;

      if (strcmp (argv[i], "--change-cygdrive-prefix") == 0)
	{
	  if ((i + 2) != argc)
	    usage ();

	  change_cygdrive_prefix (argv[i+1], flags);
	}
      else if (strcmp (argv[i], "--import-old-mounts") == 0)
	{
	  if ((i + 1) != argc)
	    usage ();

	  cygwin_internal (CW_READ_V1_MOUNT_TABLES);
	  exit (0);
	}
      else if (strcmp (argv[i], "--show-cygdrive-prefixes") == 0)
	{
	  if ((i + 1) != argc)
	    usage ();

	  show_cygdrive_info ();
	}
      else if (strcmp (argv[i], "-b") == 0)
d153 26
a178 1
      else if (strcmp (argv[i], "-t") == 0)
d180 5
a184 1
      else if  (strcmp (argv[i], "-X") == 0)
d186 2
a187 9
#if 0
      else if (strcmp (argv[i], "-x") == 0)
	create_missing_dirs = TRUE;
#endif
      else if (strcmp (argv[i], "-s") == 0)
	flags |= MOUNT_SYSTEM;
      else if (strcmp (argv[i], "-u") == 0)
	flags &= ~MOUNT_SYSTEM;
      else if (strcmp (argv[i], "-x") == 0)
d189 2
a190 3
      else if (strcmp (argv[i], "-f") == 0)
	force = TRUE;
      else
d192 1
a192 1
    }
d194 2
a195 4
  if ((i + 2) != argc)
    usage ();

  if ((force == FALSE) && (mount_already_exists (argv[i + 1], flags)))
d197 29
a225 2
      errno = EBUSY;
      error (argv[i + 1]);
a226 2
  else
    do_mount (argv[i], argv[i + 1], flags);
d306 1
a306 1
/* show_cygdrive_info: Show the user and/or cygdrive info, i.e., prefixes and
d319 1
a319 1
  /* Display the user and system cygdrive path prefixes, if necessary
@


1.10
log
@* mount.cc (main): Call show_cygdrive_info instead of show_cygdrive_prefixes.
* mount.cc (show_cygdrive_prefixes): Remove function.
* mount.cc (show_cygdrive_info): New function.  Actually, show_cygdrive_info is
really an enhanced version of show_cygdrive_prefixes renamed to
show_cygdrive_info that also displays the user and system flags.
@
text
@d191 1
a191 1
  const char *format = "%-18s  %-18s  %-11s  %s\n";
d193 1
a193 1
  printf (format, "Device", "Directory", "Type", "Flags");
d195 1
a195 7
    {
      printf (format,
	      p->mnt_fsname,
	      p->mnt_dir,
	      p->mnt_type,
	      p->mnt_opts);
    }
@


1.9
log
@Cleanup formatting on some files.  Remove excessive whitespace.
@
text
@d25 1
a25 1
static void show_cygdrive_prefixes (void);
d147 1
a147 1
	  show_cygdrive_prefixes ();
d266 2
a267 1
/* show_cygdrive_prefixes: Show the user and/or cygdrive path prefixes */
d269 1
a269 1
show_cygdrive_prefixes ()
d271 1
a271 1
  /* Get the Cygdrive user and system path prefixes */
d274 4
a277 1
  cygwin_internal (CW_GET_CYGDRIVE_PREFIXES, user, system);
d281 2
a282 2
  const char *format = "%-18s  %-11s\n";
  printf (format, "Prefix", "Type");
d284 1
a284 1
    printf (format, user, "user");
d286 1
a286 1
    printf (format, system, "system");
@


1.8
log
@* utils/mount.cc (main): Add --show-cygdrive-prefixes option.
(show_cygdrive_prefixes): New function.
* utils/umount.cc (main): Add --remove-cygdrive-prefix option.
(error): Change signature from 'char *' to 'const char *'.
(remove_cygdrive_prefix): New function.
@
text
@d82 1
a82 1
    }    
d170 1
a170 1
  
d262 1
a262 1
  
@


1.7
log
@        * mount.cc (mount_already_exists): Slightly rearrange.
        Change message texts.
@
text
@d25 1
d100 2
d142 7
d263 21
@


1.6
log
@        * mount.cc (mount_already_exists): Additional warning message
        if mount point exists with another mount type.
@
text
@d80 1
a80 1
	fprintf (stderr, "%s: warning: %s is not a directory!\n", progname, where);
d210 1
a210 1
	  if (p->mnt_type[0] == 'u' && !(flags & MOUNT_SYSTEM)) /* both current_user */
d212 7
a218 1
	      found_matching = 1;
d220 2
a221 2
	    }
	  else if (p->mnt_type[0] == 's' && (flags & MOUNT_SYSTEM)) /* both system */
d223 7
a229 1
	      found_matching = 1;
a231 6
	  else if (strchr ("su", p->mnt_type[0]))
            {
	      fprintf (stderr, "%s: warning -- there's already a %s mount point to '%s'.\n", progname, p->mnt_type, posix_path);
	      fprintf (stderr, "%*s  (user mount points cover system mount points!)\n", strlen (progname), " ");
	      break;
            }
d234 1
a234 1
	      fprintf (stderr, "%s: warning -- couldn't determine mount type.\n", progname);
@


1.5
log
@        mount.cc (error): New function to report an error and exit.
        umount.cc (error): Ditto.
        (remove_all_automounts): Check return status of cygwin_umount.
        (remove_all_user_mounts): Ditto.
        (remove_all_system_mounts): Ditto.
@
text
@d220 6
@


1.4
log
@* mount.cc: add stdlib.h for exit
* umount.cc: ditto
* strace.cc: add #define for alloca
@
text
@d33 8
d70 1
a70 4
    {
      perror ("mount failed");
      exit (1);
    }
d167 1
a167 2
      perror ("mount failed");
      exit (1);
d239 1
a239 4
    {
      perror ("mount failed");
      exit (1);
    }
@


1.3
log
@* Makefile.in: Eliminate WINSUP_DEPS.
* cygpath.cc: Reorganize includes to accomodate sys/cygwin.h changes.
* mkgroup.c: Ditto.
* mkpasswd.c: Ditto.
* mount.cc: Ditto.  Eliminate use of cygwin source specific includes.
* ps.cc: Ditto.
* cygwin.cc: Eliminate obsolete file.
@
text
@d17 1
@


1.2
log
@* mount.cc (main): Add "-X" option to specify a "Cygwin executable".
@
text
@a16 2
#include "winsup.h"
#include "external.h"
@


1.1
log
@Initial revision
@
text
@d117 2
a118 2
     if (argv[i][0] != '-')
	break;
d120 4
a123 4
     if (strcmp (argv[i], "--change-cygdrive-prefix") == 0)
       {
	 if ((i + 2) != argc)
	   usage ();
d125 6
a130 6
	 change_cygdrive_prefix (argv[i+1], flags);
       }
     else if (strcmp (argv[i], "--import-old-mounts") == 0)
       {
	 if ((i + 1) != argc)
	   usage ();
d132 9
a140 7
	 cygwin_internal (CW_READ_V1_MOUNT_TABLES);
	 exit (0);
       }
     else if (strcmp (argv[i], "-b") == 0)
       flags |= MOUNT_BINARY;
     else if (strcmp (argv[i], "-t") == 0)
       flags &= ~MOUNT_BINARY;
d142 2
a143 2
     else if (strcmp (argv[i], "-c") == 0)
       create_missing_dirs = TRUE;
d145 10
a154 10
     else if (strcmp (argv[i], "-s") == 0)
       flags |= MOUNT_SYSTEM;
     else if (strcmp (argv[i], "-u") == 0)
       flags &= ~MOUNT_SYSTEM;
     else if (strcmp (argv[i], "-x") == 0)
       flags |= MOUNT_EXEC;
     else if (strcmp (argv[i], "-f") == 0)
       force = TRUE;
     else
       usage ();
@


1.1.1.1
log
@import winsup-2000-02-17 snapshot
@
text
@@
