head	1.18;
access;
symbols
	cygwin-1_7_35-release:1.18
	cygwin-1_7_34-release:1.18
	cygwin-1_7_33-release:1.18
	cygwin-1_7_32-release:1.18
	cygwin-1_7_31-release:1.18
	cygwin-1_7_30-release:1.18
	cygwin-1_7_29-release:1.18
	cygwin-1_7_29-release-branchpoint:1.18.0.4
	cygwin-1_7_28-release:1.18
	cygwin-1_7_27-release:1.18
	cygwin-1_7_26-release:1.18
	cygwin-1_7_25-release:1.18
	cygwin-1_7_24-release:1.18
	cygwin-1_7_23-release:1.18
	cygwin-1_7_22-release:1.18
	cygwin-1_7_21-release:1.18
	cygwin-1_7_20-release:1.18
	cygwin-1_7_19-release:1.18
	cygwin-64bit-postmerge:1.18
	cygwin-64bit-premerge-branch:1.18.0.2
	cygwin-64bit-premerge:1.18
	cygwin-1_7_18-release:1.18
	cygwin-1_7_17-release:1.17
	cygwin-64bit-branch:1.17.0.2
	cygwin-1_7_16-release:1.17
	cygwin-1_7_15-release:1.17
	cygwin-1_7_14_2-release:1.17
	cygwin-1_7_14-release:1.17
	cygwin-1_7_12-release:1.17
	cygwin-1_7_11-release:1.17
	cygwin-1_7_10-release:1.17
	cygwin-1_7_9-release:1.15
	cygwin-1_7_8-release:1.15
	cygwin-1_7_7-release:1.15
	cygwin-1_7_5-release:1.15
	cygwin-1_7_4-release:1.15
	cygwin-1_7_3-release:1.15
	cygwin-1_7_2-release:1.15
	cygwin-1_7_1-release:1.15
	cv-branch-2:1.15.0.2
	cr-0x5f1:1.14.0.16
	cv-branch:1.14.0.14
	cr-0x3b58:1.14.0.12
	cr-0x9e:1.14.0.10
	cr-0x9d:1.14.0.8
	corinna-01:1.14
	cr-0x9c:1.14.0.4
	cr-0x9b:1.14.0.6
	cr-0x99:1.14
	Z-emcb-cygwin_daemon:1.14.0.2
	w32api-2_2:1.13
	mingw-runtime-2_4:1.13
	cygnus_cvs_20020108_pre:1.9
	Z-cygwin_daemon_merge-new_HEAD:1.8
	Z-cygwin_daemon_merge_HEAD:1.8
	cygwin_daemon:1.8.0.4;
locks; strict;
comment	@// @;
expand	@o@;


1.18
date	2013.01.21.16.28.27;	author cgf;	state Exp;
branches;
next	1.17;

1.17
date	2011.12.17.23.39.47;	author cgf;	state Exp;
branches
	1.17.2.1;
next	1.16;

1.16
date	2011.10.10.14.57.47;	author corinna;	state Exp;
branches;
next	1.15;

1.15
date	2008.08.13.16.35.04;	author corinna;	state Exp;
branches;
next	1.14;

1.14
date	2003.04.26.21.52.03;	author joshuadfranklin;	state Exp;
branches;
next	1.13;

1.13
date	2002.09.15.19.24.37;	author joshuadfranklin;	state Exp;
branches;
next	1.12;

1.12
date	2002.06.09.04.54.32;	author cgf;	state Exp;
branches;
next	1.11;

1.11
date	2002.06.04.01.31.28;	author cgf;	state Exp;
branches;
next	1.10;

1.10
date	2002.05.12.04.29.54;	author cgf;	state Exp;
branches;
next	1.9;

1.9
date	2001.12.11.22.51.01;	author cgf;	state Exp;
branches;
next	1.8;

1.8
date	2001.06.15.04.50.57;	author cgf;	state Exp;
branches;
next	1.7;

1.7
date	2001.04.16.02.51.03;	author cgf;	state Exp;
branches;
next	1.6;

1.6
date	2001.04.03.02.41.54;	author cgf;	state Exp;
branches;
next	1.5;

1.5
date	2000.10.28.05.00.00;	author cgf;	state Exp;
branches;
next	1.4;

1.4
date	2000.07.28.22.34.24;	author cgf;	state Exp;
branches;
next	1.3;

1.3
date	2000.06.08.12.54.12;	author corinna;	state Exp;
branches;
next	1.2;

1.2
date	2000.06.05.18.43.54;	author dj;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.17.19.38.31;	author cgf;	state Exp;
branches
	1.1.1.1;
next	;

1.17.2.1
date	2013.01.29.21.54.42;	author corinna;	state Exp;
branches;
next	;

1.1.1.1
date	2000.02.17.19.38.31;	author cgf;	state Exp;
branches;
next	;


desc
@@


1.18
log
@Update copyrights
@
text
@/* umount.cc

   Copyright 1996, 1998, 1999, 2000, 2001, 2002, 2003, 2008, 2011 Red Hat, Inc.

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */

#include <stdio.h>
#include <string.h>
#include <sys/mount.h>
#include <mntent.h>
#include <stdlib.h>
#include <errno.h>
#include <getopt.h>
#include <cygwin/version.h>

static void remove_all_user_mounts ();

static const char *progname;

struct option longopts[] =
{
  {"help", no_argument, NULL, 'h' },
  {"remove-user-mounts", no_argument, NULL, 'U'},
  {"version", no_argument, NULL, 'V'},
  {NULL, 0, NULL, 0}
};

char opts[] = "hUV";

static void
usage (FILE *where = stderr)
{
  fprintf (where, "\
Usage: %s [OPTION] [<posixpath>]\n\
\n\
Unmount filesystems\n\
\n\
  -h, --help                    output usage information and exit\n\
  -U, --remove-user-mounts      remove all user mounts\n\
  -V, --version                 output version information and exit\n\
\n", progname);
  exit (where == stderr ? 1 : 0);
}

static void
error (const char *path)
{
  fprintf (stderr, "%s: %s: %s\n", progname, path, strerror (errno));
  exit (1);
}

static void
print_version ()
{
  printf ("umount (cygwin) %d.%d.%d\n"
	  "Unmount filesystem utility\n"
	  "Copyright (C) 1996 - %s Red Hat, Inc.\n"
	  "This is free software; see the source for copying conditions.  There is NO\n"
	  "warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n",
	  CYGWIN_VERSION_DLL_MAJOR / 1000,
	  CYGWIN_VERSION_DLL_MAJOR % 1000,
	  CYGWIN_VERSION_DLL_MINOR,
	  strrchr (__DATE__, ' ') + 1);
}

int
main (int argc, char **argv)
{
  int i;
  int flags = 0;
  int default_flag = MOUNT_SYSTEM;
  enum do_what
  {
    nada,
    saw_remove_all_user_mounts
  } do_what = nada;

  progname = program_invocation_short_name;

  if (argc == 1)
    usage ();

  while ((i = getopt_long (argc, argv, opts, longopts, NULL)) != EOF)
    switch (i)
      {
      case 'h':
	usage (stdout);
      case 'U':
	if (do_what != nada)
	  usage ();
	do_what = saw_remove_all_user_mounts;
	break;
      case 'V':
	print_version ();
	exit (0);
      default:
	fprintf (stderr, "Try `%s --help' for more information.\n", progname);
	exit (1);
      }

  switch (do_what)
    {
    case saw_remove_all_user_mounts:
      if (optind != argc)
	usage ();
      remove_all_user_mounts ();
      break;
    default:
      if (optind != argc - 1)
	usage ();
      if (cygwin_umount (argv[optind], flags | default_flag) != 0)
	error (argv[optind]);
    }

  return 0;
}

/* remove_all_user_mounts: Unmount all user mounts. */
static void
remove_all_user_mounts ()
{
  FILE *m = setmntent ("/-not-used-", "r");
  struct mntent *p;

  while ((p = getmntent (m)) != NULL)
    {
      /* Remove the mount if it's a user mount. */
      if (strncmp (p->mnt_type, "user", 4) == 0 &&
	  strstr (p->mnt_opts, "noumount") == NULL)
	{
	  if (cygwin_umount (p->mnt_dir, 0))
	    error (p->mnt_dir);

	  /* We've modified the table so we need to start over. */
	  endmntent (m);
	  m = setmntent ("/-not-used-", "r");
	}
    }

  endmntent (m);
}
@


1.17
log
@Clean up whitespace.
@
text
@d3 1
a3 1
   Copyright 1996, 1998, 1999, 2000, 2001, 2002, 2008, 2011 Red Hat, Inc.
@


1.17.2.1
log
@Pull in changes from HEAD
@
text
@d3 1
a3 1
   Copyright 1996, 1998, 1999, 2000, 2001, 2002, 2003, 2008, 2011 Red Hat, Inc.
@


1.16
log
@	* Align usage output, version output, as well as usage and version
	option handling to use the same style throughout all Cygwin utils.
	Throughout use program_invocation_short_name to refer to current
	process name in Cygwin executables.
	* utils.sgml: Align documentation to above change.  Add missing
	sections for getconf, ldd, and setmetamode.
	* strace.cc (proc_child): Avoid compiler warning.
@
text
@d60 3
a62 3
          "Unmount filesystem utility\n"
          "Copyright (C) 1996 - %s Red Hat, Inc.\n"
          "This is free software; see the source for copying conditions.  There is NO\n"
d64 4
a67 4
          CYGWIN_VERSION_DLL_MAJOR / 1000,
          CYGWIN_VERSION_DLL_MAJOR % 1000,
          CYGWIN_VERSION_DLL_MINOR,
          strrchr (__DATE__, ' ') + 1);
@


1.15
log
@	* mount.cc (NT_MAX_PATH): Define.
	(longopts): Rename mount-commands option to mount-entries.
	(opts): Remove removed options.
	(struct opt): Move up in file to allow using it in usage.
	(usage): Change text for --mount-entries option.  Remove
	-X option.  Add valid options output.
	(main): Remove handling -b option.
	(convert_spaces): New static function to convert spaces to "\040"
	string.
	(mount_entries): Renamed from mount_commands.  Rewrite to emit
	/etc/fstab compatible output.
	(show_cygdrive_info): Print "nouser" rather than "system".
	* umount.cc (longopts): Remove remove-all-mounts,
	remove-cygdrive-prefix, remove-system-mounts, system and user options.
	(opts): Remove A, c, s, S, u options.
	(usage): Remove text for all removed options.
	(main): Remove handling for all removed options.
	(remove_all_mounts): Remove.
	(remove_all_system_mounts): Remove.
	(remove_cygdrive_prefix): Remove.
	* utils.sgml: Fix mount and umount documentation.  Move description
	of (cyg,not)exec options to mount table section.
@
text
@d3 1
a3 1
   Copyright 1996, 1998, 1999, 2000, 2001, 2002, 2008 Red Hat, Inc.
d18 1
a21 1
static const char version[] = "$Revision: 1.10 $";
d28 1
a28 1
  {"version", no_argument, NULL, 'v'},
d32 1
a32 1
char opts[] = "hUv";
d39 1
d44 2
a45 2
  -v, --version                 output version information and exit\n\
", progname);
d59 9
a67 18
  const char *v = strchr (version, ':');
  int len;
  if (!v)
    {
      v = "?";
      len = 1;
    }
  else
    {
      v += 2;
      len = strchr (v, ' ') - v;
    }
  printf ("\
%s (cygwin) %.*s\n\
Filesystem Utility\n\
Copyright 1996, 1998, 1999, 2000, 2001, 2002\n\
Compiled on %s\n\
", progname, len, v, __DATE__);
d82 1
a82 7
  progname = strrchr (argv[0], '/');
  if (progname == NULL)
    progname = strrchr (argv[0], '\\');
  if (progname == NULL)
    progname = argv[0];
  else
    progname++;
d97 1
a97 1
      case 'v':
d101 2
a102 1
	usage ();
@


1.14
log
@* cygcheck.cc (usage) Add description output.
@
text
@d3 1
a3 1
   Copyright 1996, 1998, 1999, 2000, 2001, 2002 Red Hat, Inc.
a18 1
static void remove_all_mounts ();
a19 2
static void remove_all_system_mounts ();
static void remove_cygdrive_prefix (int flags);
a26 3
  {"remove-all-mounts", no_argument, NULL, 'A'},
  {"remove-cygdrive-prefix", no_argument, NULL, 'c'},
  {"remove-system-mounts", no_argument, NULL, 'S'},
a27 2
  {"system", no_argument, NULL, 's'},
  {"user", no_argument, NULL, 'u'},
d32 1
a32 1
char opts[] = "AchsSuUv";
a40 2
  -A, --remove-all-mounts       remove all mounts\n\
  -c, --remove-cygdrive-prefix  remove cygdrive prefix\n\
a41 3
  -s, --system                  remove system mount (default)\n\
  -S, --remove-system-mounts    remove all system mounts\n\
  -u, --user                    remove user mount\n\
a86 3
    saw_remove_all_mounts,
    saw_remove_cygdrive_prefix,
    saw_remove_all_system_mounts,
a103 10
      case 'A':
	if (do_what != nada)
	  usage ();
	do_what = saw_remove_all_mounts;
	break;
      case 'c':
	if (do_what != nada)
	  usage ();
	do_what = saw_remove_cygdrive_prefix;
	break;
a105 12
      case 's':
	flags |= MOUNT_SYSTEM;
	break;
      case 'S':
	if (do_what != nada)
	  usage ();
	do_what = saw_remove_all_system_mounts;
	break;
      case 'u':
	flags &= ~MOUNT_SYSTEM;
	default_flag = 0;
	break;
a119 15
    case saw_remove_all_mounts:
      if (optind != argc)
	usage ();
      remove_all_mounts ();
      break;
    case saw_remove_cygdrive_prefix:
      if (optind != argc)
	usage ();
      remove_cygdrive_prefix (flags | default_flag);
      break;
    case saw_remove_all_system_mounts:
      if (optind != argc)
	usage ();
      remove_all_system_mounts ();
      break;
a134 8
/* remove_all_mounts: Unmount all mounts. */
static void
remove_all_mounts ()
{
  remove_all_user_mounts ();
  remove_all_system_mounts ();
}

a158 35

/* remove_all_system_mounts: Unmount all system mounts. */
static void
remove_all_system_mounts ()
{
  FILE *m = setmntent ("/-not-used-", "r");
  struct mntent *p;

  while ((p = getmntent (m)) != NULL)
    {
      /* Remove the mount if it's a system mount. */
      if (strncmp (p->mnt_type, "system", 6) == 0 &&
	  strstr (p->mnt_opts, "noumount") == NULL)
	{
	  if (cygwin_umount (p->mnt_dir, MOUNT_SYSTEM))
	    error (p->mnt_dir);

	  /* We've modified the table so we need to start over. */
	  endmntent (m);
	  m = setmntent ("/-not-used-", "r");
	}
    }

  endmntent (m);
}

/* remove_cygdrive_prefix: Remove cygdrive user or system path prefix. */
static void
remove_cygdrive_prefix (int flags)
{
  int res = cygwin_umount (NULL, flags | MOUNT_CYGDRIVE);
  if (res)
    error ("remove_cygdrive_prefix");
  exit (0);
}
@


1.13
log
@Add final newlines to utils
@
text
@d47 2
@


1.12
log
@* mount.cc (main): Use default system/user flag for cygdrive stuff, too.
(change_cygdrive_prefix): Change MOUNT_AUTO to MOUNT_CYGDRIVE.
* umount.cc (remove_cygdrive_prefix): Ditto.
(main): Use default system/user flag for cygdrive stuff, too.
@
text
@d85 2
a86 1
Compiled on %s", progname, len, v, __DATE__);
@


1.11
log
@* umount.cc (version): New global variable.
(longopts): Accommodate new --version option.
(opts): Ditto.
(usage): Standardize usage output.
(print_version): New function.
(main): Accommodate --help, --version options.
@
text
@d163 1
a163 1
      remove_cygdrive_prefix (flags);
d247 1
a247 1
  int res = cygwin_umount (NULL, flags | MOUNT_AUTO);
@


1.10
log
@* mount.cc (do_mount): Default to non-exec option for remote drives.  Report
warnings before attempting a mount.
(longopts): Add no-executable option.
(mount_commands): Ditto.
(opts): Ditto.
(usage): Ditto.  Indicate that system mount is now the default.
(main): Accommodate no-executable option.  Make system mount the default.
* umount.cc (usage): Indicate that system umount is now the default.
(main): Make system umount the default.
@
text
@d3 1
a3 1
   Copyright 1996, 1998, 1999, 2000, 2001 Red Hat, Inc.
d24 1
d36 1
d40 1
a40 1
char opts[] = "hASUsuc";
d43 1
a43 1
usage (void)
d45 2
a46 1
  fprintf (stderr, "Usage %s [OPTION] [<posixpath>]\n\
d49 1
d54 1
d56 1
a56 1
  exit (1);
d66 22
a93 1
  progname = argv[0];
d103 8
d127 2
d146 3
@


1.9
log
@* Makefile.in: Add define to CXXFLAGS.
@
text
@d46 1
a46 1
  -s, --system                  remove system mount\n\
d66 1
d103 1
d139 1
a139 1
      if (cygwin_umount (argv[optind], flags) != 0)
@


1.8
log
@* mkpasswd.c (main): Output passwd file in binary mode so that there are no CRs
in the file.
* umount.cc (remove_all_user_mounts): Don't try to remove /cygdrive mounts.
@
text
@d3 1
a3 1
   Copyright 1996, 1998, 1999 Cygnus Solutions.
@


1.7
log
@* mount.cc (longopts): Add help to options list.
(opts): Add 'h' to options string.
* umount.cc (longopts): Add help to options list.
(opts): Add 'h' to options string and change 'R' to 'A'.
@
text
@d162 2
a163 1
      if (strncmp (p->mnt_type, "user", 4) == 0)
d187 2
a188 1
      if (strncmp (p->mnt_type, "system", 6) == 0)
@


1.6
log
@* mount.cc (main): Use getopt_long for parsing arguments.
(usage): Reformat, show long and short options.
* umount.cc (main): Ditto, all of the above.
@
text
@d28 1
d38 1
a38 1
char opts[] = "RSUsuc";
@


1.5
log
@Cleanup formatting on some files.  Remove excessive whitespace.
@
text
@d17 1
a19 1
static void remove_all_automounts ();
d26 13
d42 8
a49 13
  fprintf (stderr, "Usage %s [-s] <posixpath>\n", progname);
  fprintf (stderr,
	   "-s = remove mount point from system-wide registry location\n");
  fprintf (stderr, "\n");
  fprintf (stderr, "--remove-all-mounts = remove all mounts\n");
  fprintf (stderr,
	   "--remove-auto-mounts = remove all automatically mounted mounts\n");
  fprintf (stderr,
	   "--remove-user-mounts = remove all mounts in the current user mount registry area, including auto mounts\n");
  fprintf (stderr,
	   "--remove-system-mounts = remove all mounts in the system-wide mount registry area\n");
  fprintf (stderr,
	   "[-s] --remove-cygdrive-prefix = remove cygdrive path prefix\n");
d66 8
d78 28
a105 3
  for (i = 1; i < argc; ++i)
    {
      if (argv[i][0] != '-')
d107 3
d111 24
a134 30
      if (strcmp (argv[i], "-s") == 0)
	{
	  flags |= MOUNT_SYSTEM;
	}
      else if (strcmp (argv[i], "--remove-all-mounts") == 0)
	{
	  remove_all_mounts ();
	  exit (0);
	}
      else if (strcmp (argv[i], "--remove-user-mounts") == 0)
	{
	  remove_all_user_mounts ();
	  exit (0);
	}
      else if (strcmp (argv[i], "--remove-system-mounts") == 0)
	{
	  remove_all_system_mounts ();
	  exit (0);
	}
      else if (strcmp (argv[i], "--remove-auto-mounts") == 0)
	{
	  remove_all_automounts ();
	  exit (0);
	}
      else if (strcmp (argv[i], "--remove-cygdrive-prefix") == 0)
	{
	  remove_cygdrive_prefix (flags);
	  exit (0);
	}
      else
d136 2
a139 6
  if ((i + 1) != argc)
    usage ();

  if (cygwin_umount (argv[i], flags) != 0)
    error (argv[i]);

a150 33
/* remove_all_automounts: Unmount all automounts. */
static void
remove_all_automounts ()
{
  FILE *m = setmntent ("/-not-used-", "r");
  struct mntent *p;

  while ((p = getmntent (m)) != NULL)
    {
      /* Remove the mount if it's an automount. */
      if (strcmp (p->mnt_type, "user,auto") == 0)
	{
	  if (cygwin_umount (p->mnt_dir, 0))
	    error (p->mnt_dir);

	  /* We've modified the table so we need to start over. */
	  endmntent (m);
	  m = setmntent ("/-not-used-", "r");
	}
      else if (strcmp (p->mnt_type, "system,auto") == 0)
	{
	  if (cygwin_umount (p->mnt_dir, MOUNT_SYSTEM))
	    error (p->mnt_dir);

	  /* We've modified the table so we need to start over. */
	  endmntent (m);
	  m = setmntent ("/-not-used-", "r");
	}
    }

  endmntent (m);
}

d206 1
@


1.4
log
@* utils/mount.cc (main): Add --show-cygdrive-prefixes option.
(show_cygdrive_prefixes): New function.
* utils/umount.cc (main): Add --remove-cygdrive-prefix option.
(error): Change signature from 'char *' to 'const char *'.
(remove_cygdrive_prefix): New function.
@
text
@d30 2
a31 1
  fprintf (stderr, "-s = remove mount point from system-wide registry location\n");
d34 8
a41 4
  fprintf (stderr, "--remove-auto-mounts = remove all automatically mounted mounts\n");
  fprintf (stderr, "--remove-user-mounts = remove all mounts in the current user mount registry area, including auto mounts\n");
  fprintf (stderr, "--remove-system-mounts = remove all mounts in the system-wide mount registry area\n");
  fprintf (stderr, "[-s] --remove-cygdrive-prefix = remove cygdrive path prefix\n");
d65 1
a65 1
        break;
d202 1
a202 1
  int res = cygwin_umount(NULL, flags | MOUNT_AUTO);
@


1.3
log
@        mount.cc (error): New function to report an error and exit.
        umount.cc (error): Ditto.
        (remove_all_automounts): Check return status of cygwin_umount.
        (remove_all_user_mounts): Ditto.
        (remove_all_system_mounts): Ditto.
@
text
@d22 1
d35 2
a36 1
  fprintf (stderr, "--remove-system-mounts = Remove all mounts in the system-wide mount registry area\n");
d41 1
a41 1
error (char *path)
d86 5
d191 9
@


1.2
log
@* mount.cc: add stdlib.h for exit
* umount.cc: ditto
* strace.cc: add #define for alloca
@
text
@d16 1
d38 7
d92 1
a92 4
    {
      perror ("umount");
      exit (1);
    }
d117 3
a119 1
	  cygwin_umount (p->mnt_dir, 0);
d126 3
a128 1
	  cygwin_umount (p->mnt_dir, MOUNT_SYSTEM);
a143 1
  int err;
d150 2
a151 1
	  err = cygwin_umount (p->mnt_dir, 0);
d174 2
a175 1
	  cygwin_umount (p->mnt_dir, MOUNT_SYSTEM);
@


1.1
log
@Initial revision
@
text
@d15 1
@


1.1.1.1
log
@import winsup-2000-02-17 snapshot
@
text
@@
