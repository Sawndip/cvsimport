head	1.15;
access;
symbols
	cygwin-1_7_35-release:1.15
	cygwin-1_7_34-release:1.15
	cygwin-1_7_33-release:1.15
	cygwin-1_7_32-release:1.15
	cygwin-1_7_31-release:1.15
	cygwin-1_7_30-release:1.15
	cygwin-1_7_29-release:1.15
	cygwin-1_7_29-release-branchpoint:1.15.0.2
	cygwin-1_7_28-release:1.15
	cygwin-1_7_27-release:1.15
	cygwin-1_7_26-release:1.15
	cygwin-1_7_25-release:1.15
	cygwin-1_7_24-release:1.15
	cygwin-1_7_23-release:1.15
	cygwin-1_7_22-release:1.15
	cygwin-1_7_21-release:1.15
	cygwin-1_7_20-release:1.15
	cygwin-1_7_19-release:1.15
	cygwin-64bit-postmerge:1.15
	cygwin-64bit-premerge-branch:1.14.0.4
	cygwin-64bit-premerge:1.14
	cygwin-1_7_18-release:1.14
	cygwin-1_7_17-release:1.14
	cygwin-64bit-branch:1.14.0.2
	cygwin-1_7_16-release:1.14
	cygwin-1_7_15-release:1.14
	cygwin-1_7_14_2-release:1.14
	cygwin-1_7_14-release:1.14
	cygwin-1_7_12-release:1.14
	cygwin-1_7_11-release:1.14
	cygwin-1_7_10-release:1.14
	cygwin-1_7_9-release:1.9
	cygwin-1_7_8-release:1.9
	cygwin-1_7_7-release:1.9
	cygwin-1_7_5-release:1.7
	cygwin-1_7_4-release:1.7
	cygwin-1_7_3-release:1.7
	cygwin-1_7_2-release:1.7
	cygwin-1_7_1-release:1.7
	cv-branch-2:1.7.0.2;
locks; strict;
comment	@// @;


1.15
date	2013.04.23.09.44.36;	author corinna;	state Exp;
branches;
next	1.14;

1.14
date	2012.01.24.06.29.01;	author yselkowitz;	state Exp;
branches
	1.14.2.1;
next	1.13;

1.13
date	2011.12.17.23.39.47;	author cgf;	state Exp;
branches;
next	1.12;

1.12
date	2011.10.10.15.34.52;	author corinna;	state Exp;
branches;
next	1.11;

1.11
date	2011.10.10.15.04.00;	author cgf;	state Exp;
branches;
next	1.10;

1.10
date	2011.10.10.14.57.47;	author corinna;	state Exp;
branches;
next	1.9;

1.9
date	2010.08.23.11.04.04;	author corinna;	state Exp;
branches;
next	1.8;

1.8
date	2010.07.05.16.24.24;	author cgf;	state Exp;
branches;
next	1.7;

1.7
date	2009.05.15.11.30.18;	author corinna;	state Exp;
branches;
next	1.6;

1.6
date	2009.03.24.13.35.08;	author corinna;	state Exp;
branches;
next	1.5;

1.5
date	2009.03.22.10.09.01;	author corinna;	state Exp;
branches;
next	1.4;

1.4
date	2009.03.18.04.19.05;	author cgf;	state Exp;
branches;
next	1.3;

1.3
date	2009.03.14.18.40.59;	author cgf;	state Exp;
branches;
next	1.2;

1.2
date	2009.03.14.06.46.00;	author cgf;	state Exp;
branches;
next	1.1;

1.1
date	2009.01.09.05.11.57;	author cgf;	state Exp;
branches;
next	;

1.14.2.1
date	2013.02.06.17.03.49;	author corinna;	state Exp;
branches;
next	1.14.2.2;

1.14.2.2
date	2013.02.06.17.54.25;	author corinna;	state Exp;
branches;
next	;


desc
@@


1.15
log
@	* Merge in cygwin-64bit-branch.
@
text
@/* Copyright (c) 2009, 2010, 2011, 2013  Chris Faylor

  All rights reserved.

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:

	* Redistributions of source code must retain the above copyright
	notice, this list of conditions and the following disclaimer.
	* Neither the name of the owner nor the names of its
	contributors may be used to endorse or promote products derived from
	this software without specific prior written permission.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER AND CONTRIBUTORS "AS
  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
  TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
  PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
  TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

#include <errno.h>
#include <getopt.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <wchar.h>
#include <locale.h>
#include <sys/cygwin.h>
#include <cygwin/version.h>
#include <unistd.h>
#include <libgen.h>

#define _WIN32_WINNT 0x0501
#include <windows.h>
#include <imagehlp.h>
#include <psapi.h>

#ifndef STATUS_DLL_NOT_FOUND
#define STATUS_DLL_NOT_FOUND (0xC0000135L)
#endif

struct option longopts[] =
{
  {"help", no_argument, NULL, 'h'},
  {"verbose", no_argument, NULL, 'v'},
  {"version", no_argument, NULL, 'V'},
  {"data-relocs", no_argument, NULL, 'd'},
  {"function-relocs", no_argument, NULL, 'r'},
  {"unused", no_argument, NULL, 'u'},
  {0, no_argument, NULL, 0}
};
const char *opts = "dhruvV";

static int process_file (const wchar_t *);

static int
error (const char *fmt, ...)
{
  va_list ap;
  va_start (ap, fmt);
  fprintf (stderr, "ldd: ");
  vfprintf (stderr, fmt, ap);
  fprintf (stderr, "\nTry `ldd --help' for more information.\n");
  exit (1);
}

static void
usage ()
{
  printf ("Usage: %s [OPTION]... FILE...\n\
\n\
Print shared library dependencies\n\
\n\
  -h, --help              print this help and exit\n\
  -V, --version           print version information and exit\n\
  -r, --function-relocs   process data and function relocations\n\
                          (currently unimplemented)\n\
  -u, --unused            print unused direct dependencies\n\
                          (currently unimplemented)\n\
  -v, --verbose           print all information\n\
                          (currently unimplemented)\n",
	   program_invocation_short_name);
}

static void
print_version ()
{
  printf ("ldd (cygwin) %d.%d.%d\n"
	  "Print shared library dependencies\n"
	  "Copyright (C) 2009 - %s Chris Faylor\n"
	  "This is free software; see the source for copying conditions.  There is NO\n"
	  "warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n",
	  CYGWIN_VERSION_DLL_MAJOR / 1000,
	  CYGWIN_VERSION_DLL_MAJOR % 1000,
	  CYGWIN_VERSION_DLL_MINOR,
	  strrchr (__DATE__, ' ') + 1);
}

#define print_errno_error_and_return(__fn) \
  do {\
    fprintf (stderr, "ldd: %s: %s\n", (__fn), strerror (errno));\
    return 1;\
  } while (0)

#define set_errno_and_return(x) \
  do {\
    cygwin_internal (CW_SETERRNO, __FILE__, __LINE__ - 2);\
    return (x);\
  } while (0)


static HANDLE hProcess;

static struct filelist
{
  struct filelist *next;
  char *name;
} *head;

static bool
saw_file (char *name)
{
  filelist *p;

  for (p = head; p; p = p->next)
    if (strcasecmp (name, p->name) == 0)
      return true;

  p = (filelist *) malloc(sizeof (struct filelist));
  p->next = head;
  p->name = strdup (name);
  head = p;
  return false;
}

static wchar_t *
get_module_filename (HANDLE hp, HMODULE hm)
{
  size_t len;
  wchar_t *buf = NULL;
  DWORD res;
  for (len = 1024; (res = GetModuleFileNameExW (hp, hm, (buf = (wchar_t *) realloc (buf, len * sizeof (wchar_t))), len)) == len; len += 1024)
    continue;
  if (!res)
    {
      free (buf);
      buf = NULL;
    }
  return buf;
}

static wchar_t *
load_dll (const wchar_t *fn)
{
  wchar_t *buf = get_module_filename (GetCurrentProcess (), NULL);
  if (!buf)
    {
      printf ("ldd: GetModuleFileName returned an error %u\n",
	      (unsigned int) GetLastError ());
      exit (1);		/* FIXME */
    }

  wchar_t *newbuf = (wchar_t *) malloc ((sizeof (L"\"\" -- ") + wcslen (buf) + wcslen (fn)) * sizeof (wchar_t));
  newbuf[0] = L'"';
  wcscpy (newbuf + 1, buf);
  wchar_t *p = wcsstr (newbuf, L"\\ldd");
  if (!p)
    {
      printf ("ldd: can't parse my own filename \"%ls\"\n", buf);
      exit (1);
    }
  p[3] = L'h';
  wcscat (newbuf, L"\" -- ");
  wcscat (newbuf, fn);
  free (buf);
  return newbuf;
}

static int
start_process (const wchar_t *fn, bool& isdll)
{
  STARTUPINFOW si = {};
  PROCESS_INFORMATION pi;
  si.cb = sizeof (si);
  wchar_t *cmd;
  /* OCaml natdynlink plugins (.cmxs) cannot be handled by ldd because they
     can only be loaded by flexdll_dlopen() */
  if (wcslen (fn) < 4 || (wcscasecmp (wcschr (fn, L'\0') - 4, L".dll") != 0
       && wcscasecmp (wcschr (fn, L'\0') - 4, L".oct") != 0
       && wcscasecmp (wcschr (fn, L'\0') - 3, L".so") != 0))
    {
      cmd = wcsdup (fn);
      isdll = false;
    }
  else
    {
      cmd = load_dll (fn);
      isdll = true;
    }
  if (CreateProcessW (NULL, cmd, NULL, NULL, FALSE, DEBUG_ONLY_THIS_PROCESS, NULL, NULL, &si, &pi))
    {
      free (cmd);
      hProcess = pi.hProcess;
      DebugSetProcessKillOnExit (true);
      return 0;
    }

  free (cmd);
  set_errno_and_return (1);
}

static int
set_entry_point_break ()
{
  HMODULE hm;
  DWORD cbe;
  SIZE_T cbw;
  if (!EnumProcessModules (hProcess, &hm, sizeof (hm), &cbe) || !cbe)
    set_errno_and_return (1);

  MODULEINFO mi = {};
  if (!GetModuleInformation (hProcess, hm, &mi, sizeof (mi)) || !mi.EntryPoint)
    set_errno_and_return (1);

  static const unsigned char int3 = 0xcc;
  if (!WriteProcessMemory (hProcess, mi.EntryPoint, &int3, 1, &cbw) || cbw != 1)
    set_errno_and_return (1);
  return 0;
}

struct dlls
  {
    LPVOID lpBaseOfDll;
    struct dlls *next;
  };

#define SLOP strlen (" (?)")
char *
tocyg (wchar_t *win_fn)
{
  ssize_t cwlen = cygwin_conv_path (CCP_WIN_W_TO_POSIX, win_fn, NULL, 0);
  char *fn;
  if (cwlen <= 0)
    {
      int len = wcstombs (NULL, win_fn, 0) + 1;
      if ((fn = (char *) malloc (len)))
	wcstombs (fn, win_fn, len);
    }
  else
    {
      char *fn_cyg = (char *) malloc (cwlen + SLOP + 1);
      if (cygwin_conv_path (CCP_WIN_W_TO_POSIX, win_fn, fn_cyg, cwlen) == 0)
	fn = fn_cyg;
      else
	{
	  free (fn_cyg);
	  int len = wcstombs (NULL, win_fn, 0);
	  fn = (char *) malloc (len + SLOP + 1);
	  wcstombs (fn, win_fn, len + SLOP + 1);
	}
    }
  return fn;
}

#define CYGWIN_DLL_LEN (wcslen (L"\\cygwin1.dll"))
static int
print_dlls (dlls *dll, const wchar_t *dllfn, const wchar_t *process_fn)
{
  head = NULL;			/* FIXME: memory leak */
  while ((dll = dll->next))
    {
      char *fn;
      wchar_t *fullpath = get_module_filename (hProcess, (HMODULE) dll->lpBaseOfDll);
      if (!fullpath)
	fn = strdup ("???");
      else if (dllfn && wcscmp (fullpath, dllfn) == 0)
	{
	  free (fullpath);
	  continue;
	}
      else
	{
	  fn = tocyg (fullpath);
	  saw_file (basename (fn));
	  free (fullpath);
	}
      printf ("\t%s => %s (%p)\n", basename (fn), fn, dll->lpBaseOfDll);
      free (fn);
    }
  if (process_fn)
    return process_file (process_fn);
  return 0;
}

static int
report (const char *in_fn, bool multiple)
{
  if (multiple)
    printf ("%s:\n", in_fn);
  char *fn = realpath (in_fn, NULL);
  if (!fn)
    print_errno_error_and_return (in_fn);

  ssize_t len = cygwin_conv_path (CCP_POSIX_TO_WIN_W, fn, NULL, 0);
  if (len <= 0)
    print_errno_error_and_return (fn);

  bool isdll;
  wchar_t fn_win[len + 1];
  if (cygwin_conv_path (CCP_POSIX_TO_WIN_W, fn, fn_win, len))
    print_errno_error_and_return (fn);

  if (!fn || start_process (fn_win, isdll))
    print_errno_error_and_return (in_fn);

  DEBUG_EVENT ev;

  unsigned dll_count = 0;

  dlls dll_list = {};
  dlls *dll_last = &dll_list;
  const wchar_t *process_fn = NULL;
  while (1)
    {
      bool exitnow = false;
      DWORD cont = DBG_CONTINUE;
      if (!WaitForDebugEvent (&ev, INFINITE))
	break;
      switch (ev.dwDebugEventCode)
	{
	case LOAD_DLL_DEBUG_EVENT:
	  if (!isdll && ++dll_count == 2)
	    set_entry_point_break ();
	  dll_last->next = (dlls *) malloc (sizeof (dlls));
	  dll_last->next->lpBaseOfDll = ev.u.LoadDll.lpBaseOfDll;
	  dll_last->next->next = NULL;
	  dll_last = dll_last->next;
	  break;
	case EXCEPTION_DEBUG_EVENT:
	  switch (ev.u.Exception.ExceptionRecord.ExceptionCode)
	    {
	    case STATUS_DLL_NOT_FOUND:
	      process_fn = fn_win;
	      break;
	    case STATUS_BREAKPOINT:
	      if (!isdll)
		cont = DBG_EXCEPTION_NOT_HANDLED;
	      break;
	    }
	  break;
	case CREATE_THREAD_DEBUG_EVENT:
	  TerminateProcess (hProcess, 0);
	  break;
	case EXIT_PROCESS_DEBUG_EVENT:
	  print_dlls (&dll_list, isdll ? fn_win : NULL, process_fn);
	  exitnow = true;
	  break;
	default:
	  break;
	}
      if (!ContinueDebugEvent (ev.dwProcessId, ev.dwThreadId, cont))
	{
	  cygwin_internal (CW_SETERRNO, __FILE__, __LINE__ - 2);
	  print_errno_error_and_return (in_fn);
	}
      if (exitnow)
	break;
    }

  return 0;
}

int
main (int argc, char **argv)
{
  int optch;

  /* Use locale from environment.  If not set or set to "C", use UTF-8. */
  setlocale (LC_CTYPE, "");
  if (!strcmp (setlocale (LC_CTYPE, NULL), "C"))
    setlocale (LC_CTYPE, "en_US.UTF-8");
  while ((optch = getopt_long (argc, argv, opts, longopts, NULL)) != -1)
    switch (optch)
      {
      case 'd':
      case 'r':
      case 'u':
	error ("option not implemented `-%c'", optch);
	exit (1);
      case 'h':
	usage ();
	exit (0);
      case 'V':
	print_version ();
	return 0;
      default:
	fprintf (stderr, "Try `%s --help' for more information.\n",
		 program_invocation_short_name);
	return 1;
      }
  argv += optind;
  if (!*argv)
    error ("missing file arguments");

  int ret = 0;
  bool multiple = !!argv[1];
  char *fn;
  while ((fn = *argv++))
    if (report (fn, multiple))
      ret = 1;
  exit (ret);
}

static bool printing = false;


/* dump of import directory
   section begins at pointer 'section base'
   section RVA is 'section_rva'
   import directory begins at pointer 'imp' */
static int
dump_import_directory (const void *const section_base,
		       const DWORD section_rva,
		       const IMAGE_IMPORT_DESCRIPTOR *imp)
{
  /* get memory address given the RVA */
  #define adr(rva) ((const void*) ((char*) section_base+((DWORD) (rva))-section_rva))

  /* continue until address inaccessible or there's no DLL name */
  for (; !IsBadReadPtr (imp, sizeof (*imp)) && imp->Name; imp++)
    {
      wchar_t full_path[PATH_MAX];
      wchar_t *dummy;
      char *fn = (char *) adr (imp->Name);

      if (saw_file (fn))
	continue;

      int len = mbstowcs (NULL, fn, 0);
      if (len <= 0)
	continue;
      wchar_t fnw[len + 1];
      mbstowcs (fnw, fn, len + 1);
      /* output DLL's name */
      char *print_fn;
      if (!SearchPathW (NULL, fnw, NULL, PATH_MAX, full_path, &dummy))
	{
	  print_fn = strdup ("not found");
	  printing = true;
	}
      else if (!printing)
	continue;
      else
	{
	  print_fn = tocyg (full_path);
	  strcat (print_fn, " (?)");
	}

      printf ("\t%s => %s\n", (char *) fn, print_fn);
      free (print_fn);
    }
  #undef adr

  return 0;
}

/* load a file in RAM (memory-mapped)
   return pointer to loaded file
   0 if no success  */
static void *
map_file (const wchar_t *filename)
{
  HANDLE hFile, hMapping;
  void *basepointer;
  if ((hFile = CreateFileW (filename, GENERIC_READ, FILE_SHARE_READ | FILE_SHARE_WRITE,
			   0, OPEN_EXISTING, FILE_FLAG_SEQUENTIAL_SCAN, 0)) == INVALID_HANDLE_VALUE)
    {
      fprintf (stderr, "couldn't open %ls\n", filename);
      return 0;
    }
  if (!(hMapping = CreateFileMapping (hFile, 0, PAGE_READONLY | SEC_COMMIT, 0, 0, 0)))
    {
      fprintf (stderr, "CreateFileMapping failed with windows error %u\n",
	       (unsigned int) GetLastError ());
      CloseHandle (hFile);
      return 0;
    }
  if (!(basepointer = MapViewOfFile (hMapping, FILE_MAP_READ, 0, 0, 0)))
    {
      fprintf (stderr, "MapViewOfFile failed with windows error %u\n",
	       (unsigned int) GetLastError ());
      CloseHandle (hMapping);
      CloseHandle (hFile);
      return 0;
    }

  CloseHandle (hMapping);
  CloseHandle (hFile);

  return basepointer;
}


/* this will return a pointer immediatly behind the DOS-header
   0 if error */
static void *
skip_dos_stub (const IMAGE_DOS_HEADER *dos_ptr)
{
  /* look there's enough space for a DOS-header */
  if (IsBadReadPtr (dos_ptr, sizeof (*dos_ptr)))
      {
	fprintf (stderr, "not enough space for DOS-header\n");
	return 0;
      }

   /* validate MZ */
   if (dos_ptr->e_magic != IMAGE_DOS_SIGNATURE)
      {
	fprintf (stderr, "not a DOS-stub\n");
	return 0;
      }

  /* ok, then, go get it */
  return (char*) dos_ptr + dos_ptr->e_lfanew;
}


/* find the directory's section index given the RVA
   Returns -1 if impossible */
static int
get_directory_index (const unsigned dir_rva,
		     const unsigned dir_length,
		     const int number_of_sections,
		     const IMAGE_SECTION_HEADER *sections)
{
  int sect;
  for (sect = 0; sect < number_of_sections; sect++)
  {
    /* compare directory RVA to section RVA */
    if (sections[sect].VirtualAddress <= dir_rva
       && dir_rva < sections[sect].VirtualAddress+sections[sect].SizeOfRawData)
      return sect;
  }

  return -1;
}

/* dump imports of a single file
   Returns 0 if successful, !=0 else */
static int
process_file (const wchar_t *filename)
{
  void *basepointer;    /* Points to loaded PE file
			 * This is memory mapped stuff
			 */
  int number_of_sections;
  DWORD import_rva;           /* RVA of import directory */
  DWORD import_length;        /* length of import directory */
  int import_index;           /* index of section with import directory */

  /* ensure byte-alignment for struct tag_header */
  #include <pshpack1.h>

  const struct tag_header
    {
      DWORD signature;
      IMAGE_FILE_HEADER file_head;
      IMAGE_OPTIONAL_HEADER opt_head;
      IMAGE_SECTION_HEADER section_header[1];  /* an array of unknown length */
    } *header;

  /* revert to regular alignment */
  #include <poppack.h>

  printing = false;

  /* first, load file */
  basepointer = map_file (filename);
  if (!basepointer)
      {
	puts ("cannot load file");
	return 1;
      }

  /* get header pointer; validate a little bit */
  header = (tag_header *) skip_dos_stub ((IMAGE_DOS_HEADER *) basepointer);
  if (!header)
      {
	puts ("cannot skip DOS stub");
	UnmapViewOfFile (basepointer);
	return 2;
      }

  /* look there's enough space for PE headers */
  if (IsBadReadPtr (header, sizeof (*header)))
      {
	puts ("not enough space for PE headers");
	UnmapViewOfFile (basepointer);
	return 3;
      }

  /* validate PE signature */
  if (header->signature != IMAGE_NT_SIGNATURE)
      {
	puts ("not a PE file");
	UnmapViewOfFile (basepointer);
	return 4;
      }

  /* get number of sections */
  number_of_sections = header->file_head.NumberOfSections;

  /* check there are sections... */
  if (number_of_sections < 1)
      {
	UnmapViewOfFile (basepointer);
	return 5;
      }

  /* validate there's enough space for section headers */
  if (IsBadReadPtr (header->section_header, number_of_sections*sizeof (IMAGE_SECTION_HEADER)))
      {
	puts ("not enough space for section headers");
	UnmapViewOfFile (basepointer);
	return 6;
      }

  /* get RVA and length of import directory */
  import_rva = header->opt_head.DataDirectory[IMAGE_DIRECTORY_ENTRY_IMPORT].VirtualAddress;
  import_length = header->opt_head.DataDirectory[IMAGE_DIRECTORY_ENTRY_IMPORT].Size;

  /* check there's stuff to care about */
  if (!import_rva || !import_length)
      {
	UnmapViewOfFile (basepointer);
	return 0;       /* success! */
    }

  /* get import directory pointer */
  import_index = get_directory_index (import_rva,import_length,number_of_sections,header->section_header);

  /* check directory was found */
  if (import_index < 0)
      {
	puts ("couldn't find import directory in sections");
	UnmapViewOfFile (basepointer);
	return 7;
      }

  /* The pointer to the start of the import directory's section */
  const void *section_address = (char*) basepointer + header->section_header[import_index].PointerToRawData;
  if (dump_import_directory (section_address,
			   header->section_header[import_index].VirtualAddress,
				    /* the last parameter is the pointer to the import directory:
				       section address + (import RVA - section RVA)
				       The difference is the offset of the import directory in the section */
			   (const IMAGE_IMPORT_DESCRIPTOR *) ((char *) section_address+import_rva-header->section_header[import_index].VirtualAddress)))
    {
      UnmapViewOfFile (basepointer);
      return 8;
    }

  UnmapViewOfFile (basepointer);
  return 0;
}
@


1.14
log
@	* ldd.cc (start_process): Handle .oct and .so as DLLs.
@
text
@d1 1
a1 1
/* Copyright (c) 2009, 2010, 2011  Chris Faylor
d165 2
a166 1
      printf ("ldd: GetModuleFileName returned an error %lu\n", GetLastError ());
d223 3
a225 2
  DWORD cb;
  if (!EnumProcessModules (hProcess, &hm, sizeof (hm), &cb) || !cb)
d233 1
a233 1
  if (!WriteProcessMemory (hProcess, mi.EntryPoint, &int3, 1, &cb) || cb != 1)
d490 2
a491 1
      fprintf (stderr, "CreateFileMapping failed with windows error %lu\n", GetLastError ());
d497 2
a498 1
      fprintf (stderr, "MapViewOfFile failed with windows error %lu\n", GetLastError ());
@


1.14.2.1
log
@	Throughout, fix type problems on 32 and 64 bit.  Except:
	* ssp.c: Disable entire functionality on x86_64 for now.
@
text
@d1 1
a1 1
/* Copyright (c) 2009, 2010, 2011, 2013  Chris Faylor
a32 2
#define __STDC_FORMAT_MACROS
#include <inttypes.h>
d165 1
a165 2
      printf ("ldd: GetModuleFileName returned an error %" PRIu32 "\n",
	      (unsigned int) GetLastError ());
d222 2
a223 3
  DWORD cbe;
  SIZE_T cbw;
  if (!EnumProcessModules (hProcess, &hm, sizeof (hm), &cbe) || !cbe)
d231 1
a231 1
  if (!WriteProcessMemory (hProcess, mi.EntryPoint, &int3, 1, &cbw) || cbw != 1)
d488 1
a488 1
      fprintf (stderr, "CreateFileMapping failed with windows error %" PRIu32 "\n", (unsigned int) GetLastError ());
d494 1
a494 1
      fprintf (stderr, "MapViewOfFile failed with windows error %" PRIu32 "\n", (unsigned int) GetLastError ());
@


1.14.2.2
log
@	* ldd.cc: Drop including inttypes.h.  Use %u rather than PRIu32.
	* mount.cc: Fix type problem with %* expression.
	* cygcheck.cc: Ditto.
@
text
@d33 2
d167 1
a167 1
      printf ("ldd: GetModuleFileName returned an error %u\n",
d492 1
a492 2
      fprintf (stderr, "CreateFileMapping failed with windows error %u\n",
	       (unsigned int) GetLastError ());
d498 1
a498 2
      fprintf (stderr, "MapViewOfFile failed with windows error %u\n",
	       (unsigned int) GetLastError ());
@


1.13
log
@Clean up whitespace.
@
text
@d192 5
a196 1
  if (wcslen (fn) < 4 || wcscasecmp (wcschr (fn, L'\0') - 4, L".dll") != 0)
@


1.12
log
@	* ldd.cc (VERSION): Remove.
@
text
@d96 3
a98 3
          "Print shared library dependencies\n"
          "Copyright (C) 2009 - %s Chris Faylor\n"
          "This is free software; see the source for copying conditions.  There is NO\n"
d100 4
a103 4
          CYGWIN_VERSION_DLL_MAJOR / 1000,
          CYGWIN_VERSION_DLL_MAJOR % 1000,
          CYGWIN_VERSION_DLL_MINOR,
          strrchr (__DATE__, ' ') + 1);
d442 1
a442 1
      	continue;
d495 1
a495 1
  
d661 1
a661 1
  
@


1.11
log
@* ldd.cc: Update copyright.
@
text
@a48 2
#define VERSION "1.0"

@


1.10
log
@	* Align usage output, version output, as well as usage and version
	option handling to use the same style throughout all Cygwin utils.
	Throughout use program_invocation_short_name to refer to current
	process name in Cygwin executables.
	* utils.sgml: Align documentation to above change.  Add missing
	sections for getconf, ldd, and setmetamode.
	* strace.cc (proc_child): Avoid compiler warning.
@
text
@d1 1
a1 1
/* Copyright (c) 2009, Chris Faylor
@


1.9
log
@	* ldd.cc (report): Drop long pathname considerations which result in
	invalid path, now that this is done in cygwin_conv_path.
@
text
@d36 1
d53 3
a55 2
  {"help", no_argument, NULL, 0},
  {"version", no_argument, NULL, 0},
d61 1
d66 1
a66 1
usage (const char *fmt, ...)
d76 32
a375 1

a379 1
  int index;
d385 1
a385 1
  while ((optch = getopt_long (argc, argv, "dru", longopts, &index)) != -1)
d391 1
a391 1
	usage ("option not implemented `-%c'", optch);
d393 10
a402 22
      case 0:
	if (index == 1)
	  {
	    printf ("ldd (Cygwin) %s\nCopyright (C) 2009 Chris Faylor\n"
		    "This is free software; see the source for copying conditions.  There is NO\n"
		    "warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n",
		    VERSION);
	    exit (0);
	  }
	else
	  {
	    puts ("Usage: ldd [OPTION]... FILE...\n\
      --help              print this help and exit\n\
      --version           print version information and exit\n\
  -r, --function-relocs   process data and function relocations\n\
                          (currently unimplemented)\n\
  -u, --unused            print unused direct dependencies\n\
                          (currently unimplemented)\n\
  -v, --verbose           print all information\n\
                          (currently unimplemented)");
	    exit (0);
	  }
d406 1
a406 1
    usage("missing file arguments");
@


1.8
log
@* ldd.cc: Clean up formatting throughout.
(head): Move earlier.
(saw_file): Ditto.
(print_dlls): Reset head here.  Record seen dll names so they will not
potentially be printed later.
(process_file): Remove clearing of head here.
@
text
@d277 2
a278 2
  wchar_t fn_win_buf[len + 1];
  if (cygwin_conv_path (CCP_POSIX_TO_WIN_W, fn, fn_win_buf, len))
a279 7
  wchar_t *fn_win = fn_win_buf + 4;

  if (wcsncmp (fn_win_buf, L"\\\\?\\UNC\\", 8) == 0)
    {
      fn_win += 2;
      *fn_win = L'\\';
    }
@


1.7
log
@	* cygpath.cc (main): Only setlocale for LC_CTYPE category.  Fallback
	to UTF-8 if locale is "C".
	* ldd.cc (main): Ditto.
	* mkgroup.c (main): Ditto.
	* mkpasswd.c (main): Ditto.
	* passwd.c (main): Ditto.
@
text
@d88 22
d237 1
d252 1
a402 6
static struct filelist
{
  struct filelist *next;
  char *name;
} *head;

a404 17
static bool
saw_file (char *name)
{

  struct filelist *p;

  for (p=head; p; p = p->next)
    if (strcasecmp (name, p->name) == 0)
      return true;

  p = (filelist *) malloc(sizeof (struct filelist));
  p->next = head;
  p->name = strdup (name);
  head = p;
  return false;
}

d556 1
a556 3
      IMAGE_SECTION_HEADER section_header[1];  /* this is an array of unknown length
					          actual number in file_head.NumberOfSections
					          if your compiler objects to it length 1 should work */
a561 1
  head = NULL;			/* FIXME: memory leak */
d573 1
a573 1
  header = (struct tag_header *) skip_dos_stub ((IMAGE_DOS_HEADER *) basepointer);
d590 1
a590 1
  if (header->signature!=IMAGE_NT_SIGNATURE)
d601 1
a601 1
  if (number_of_sections<1)
d630 1
a630 1
  if (import_index <0)
d637 12
a648 15
  /* ok, we've found the import directory... action! */
  {
      /* The pointer to the start of the import directory's section */
    const void *section_address = (char*) basepointer + header->section_header[import_index].PointerToRawData;
    if (dump_import_directory (section_address,
			     header->section_header[import_index].VirtualAddress,
				      /* the last parameter is the pointer to the import directory:
				         section address + (import RVA - section RVA)
				         The difference is the offset of the import directory in the section */
			     (const IMAGE_IMPORT_DESCRIPTOR *) ((char *) section_address+import_rva-header->section_header[import_index].VirtualAddress)))
      {
	UnmapViewOfFile (basepointer);
	return 8;
      }
  }
@


1.6
log
@	* cygcheck.cc (dump_sysinfo): Fix compiler warning in printf.
	* strace.cc (proc_child): Ditto.
	* ldd.cc: Remove now useless undef wcscasecmp.
@
text
@d330 5
a334 1
  setlocale (LC_ALL, "");
@


1.5
log
@	* ldd.cc: Fix compiler warning.

	* passwd.c: Use mbstowcs instead of MultiByteToWideChar throughout.
	(main): Call setlocale.  Fix a bug in fetching the logon server from
	the environment.
@
text
@a33 1
#undef wcscasecmp /* Disable definition from Cygwin's internal wchar.h. */
@


1.4
log
@* ldd.cc (load_dll): Start helper program rather than ldd.exe.
(set_entry_point_break): Rename from get_entry_point.
(print_dlls): Rename from print_dlls_and_kill_inferior.  Avoid printing
specific dll name if we're looking at a dll.
(report): Always dump dlls on process exit.  Don't allow thread creation.
Accommodate get_entry_point rename.
(start_process): Start process with DEBUG_ONLY_THIS_PROCESS.
(longopts): Eliminate "dll" option.
(main): Ditto.
* ldd.cc: Use wide character Win32 paths throughout.
(load_dll): Fix size expression (add fn) in realloc.
@
text
@a321 1
out:
@


1.3
log
@* ldd.cc (longopts): Add --dll option.
(get_module_filename): Generalized wrapper function which avoid path length
restrictions.
(load_dll): Handle special-case of inspecting a DLL.
(start_process): Accept an output parameter "isdll".  Detect when file to start
is a DLL and start a wrapper instead.
(print_dlls_and_kill_inferior): When dealing with a DLL, avoid printing
everything before the DLL itself first appears.  (This is not strictly correct
and should be fixed eventually)
(report): Deal with DLLs.  Don't set a breakpoint for DLLs, just let captive
ldd process terminate normally.  Pass dll info to print_dlls_and_kill_inferior.
(main): Handle special-case "--dll" option by loading the DLL and exiting.
@
text
@d33 3
a55 1
  {"dll", no_argument, NULL, 'D'},
d61 1
a61 1
static int process_file (const char *);
d89 1
a89 1
static char *
d93 1
a93 1
  char *buf = NULL;
d95 1
a95 1
  for (len = 1024; (res = GetModuleFileNameEx (hp, hm, (buf = (char *) realloc (buf, len)), len)) == len; len += 1024)
d105 2
a106 2
static char *
load_dll (const char *fn)
d108 1
a108 1
  char *buf = get_module_filename (GetCurrentProcess (), NULL);
d114 15
a128 5
  buf = (char *) realloc (buf, sizeof (" \"--dll\" \"\"") + strlen (buf));
  strcat (buf, " --dll \"");
  strcat (buf, fn);
  strcat (buf, "\"");
  return buf;
a130 1

d132 1
a132 1
start_process (const char *fn, bool& isdll)
d134 1
a134 1
  STARTUPINFO si = {};
d137 2
a138 2
  CHAR *cmd;
  if (strlen (fn) < 4 || strcasecmp (strchr (fn, '\0') - 4, ".dll") != 0)
d140 1
a140 1
      cmd = strdup (fn);
d148 1
a148 1
  if (CreateProcess (NULL, cmd, NULL, NULL, FALSE, DEBUG_PROCESS, NULL, NULL, &si, &pi))
d161 1
a161 1
get_entry_point ()
d186 1
a186 1
tocyg (char *win_fn)
d188 1
a188 2
  win_fn[MAX_PATH] = '\0';
  ssize_t cwlen = cygwin_conv_path (CCP_WIN_A_TO_POSIX, win_fn, NULL, 0);
d191 5
a195 1
    fn = strdup (win_fn);
d199 1
a199 1
      if (cygwin_conv_path (CCP_WIN_A_TO_POSIX, win_fn, fn_cyg, cwlen) == 0)
d204 3
a206 2
	  fn = (char *) malloc (strlen (win_fn) + SLOP + 1);
	  strcpy (fn, win_fn);
d212 1
a212 1
#define CYGWIN_DLL_LEN (strlen ("\\cygwin1.dll"))
d214 1
a214 1
print_dlls_and_kill_inferior (dlls *dll, const char *dllfn, const char *process_fn)
a215 1
  bool printit = !dllfn;
d219 1
a219 1
      char *fullpath = get_module_filename (hProcess, (HMODULE) dll->lpBaseOfDll);
d222 5
d229 1
a229 10
	  if (printit)
	    fn = tocyg (fullpath);
	  else if (strcasecmp (fullpath, dllfn) != 0)
	    continue;
	  else
	    {
	      printit = true;
	      free (fullpath);
	      continue;
	    }
a234 1
  TerminateProcess (hProcess, 0);
d249 1
a249 1
  ssize_t len = cygwin_conv_path (CCP_POSIX_TO_WIN_A, fn, NULL, 0);
d254 2
a255 2
  char fn_win[len + 1];
  if (cygwin_conv_path (CCP_POSIX_TO_WIN_A, fn, fn_win, len))
d257 7
d274 1
a274 1
  const char *process_fn = NULL;
d277 4
a280 11
      if (WaitForDebugEvent (&ev, 1000))
	/* ok */;
      else
	switch (GetLastError ())
	  {
	  case WAIT_TIMEOUT:
	    continue;
	  default:
	    usleep (100000);
	    goto out;
	  }
d285 1
a285 1
	    get_entry_point ();
d299 1
a299 1
		print_dlls_and_kill_inferior (&dll_list, isdll ? fn_win : NULL, process_fn);
d303 3
d307 2
a308 1
	  print_dlls_and_kill_inferior (&dll_list, isdll ? fn_win : NULL, process_fn);
d313 1
a313 1
      if (!ContinueDebugEvent (ev.dwProcessId, ev.dwThreadId, DBG_CONTINUE))
d318 2
d332 1
a340 4
      case 'D':
	if (!LoadLibrary (argv[optind]))
	  exit (1);
	exit (0);
d418 2
a419 2
      char full_path[MAX_PATH];
      char *dummy;
d425 5
d432 1
a432 1
      if (!SearchPath (NULL, fn, NULL, sizeof (full_path), full_path, &dummy))
d457 1
a457 1
map_file (const char *filename)
d461 1
a461 1
  if ((hFile = CreateFile (filename, GENERIC_READ, FILE_SHARE_READ | FILE_SHARE_WRITE,
d464 1
a464 1
      fprintf (stderr, "couldn't open %s\n", filename);
d535 1
a535 1
process_file (const char *filename)
@


1.2
log
@* ldd.cc: Rework to detect missing DLLs.
(start_process): Change to expect windows filename as input.
(tocyg): New function - convert cygwin fn to windows fn.
(print_dlls_and_kill_inferior): Accept extra argument denoting whether to open
input and look for nonexistent DLLs.  Use tocyg to convert filename and pass it
to start_process.
(report): Flag when an DLL-not-found exception occurs and pass this information
to print_dlls_and_kill_inferior.
(filelist): New structure.
(saw_file): New function.
(dump_import_directory): Ditto.
(map_file): Ditto.
(skip_dos_stub): Ditto.
(get_directory_index): Ditto.
(process_file): Ditto.
@
text
@d53 1
d87 33
d121 1
a121 1
start_process (const char *fn)
d126 2
a127 1
  if (CreateProcess (NULL, (CHAR *) fn, NULL, NULL, FALSE, DEBUG_PROCESS, NULL, NULL, &si, &pi))
d129 11
d145 1
d197 1
d199 1
a199 1
print_dlls_and_kill_inferior (dlls *dll, const char *process_fn)
d201 1
d205 2
a206 3
      char fnbuf[MAX_PATH + 1];
      DWORD len = GetModuleFileNameEx (hProcess, (HMODULE) dll->lpBaseOfDll, fnbuf, sizeof(fnbuf) - 1);
      if (!len)
d209 13
a221 1
	fn = tocyg (fnbuf);
d244 1
d249 1
a249 1
  if (!fn || start_process (fn_win))
d275 1
a275 1
	  if (++dll_count == 2)
d283 13
a295 4
	  if (ev.u.Exception.ExceptionRecord.ExceptionCode == STATUS_DLL_NOT_FOUND)
	    process_fn = fn_win;
	  else
	    print_dlls_and_kill_inferior (&dll_list, process_fn);
d325 4
@


1.1
log
@* ldd.cc: New file.  First stab at implementing ldd-like functionality for
Cygwin.
* Makefile.in (CYGWIN_BINS): Add ldd.
(ldd.exe): Use -lpsapi.
@
text
@d35 1
d42 4
d58 2
a88 8
  ssize_t len = cygwin_conv_path (CCP_POSIX_TO_WIN_A, fn, NULL, 0);
  if (len <= 0)
    print_errno_error_and_return (fn);

  char fn_win[len + 1];
  if (cygwin_conv_path (CCP_POSIX_TO_WIN_A, fn, fn_win, len))
    print_errno_error_and_return (fn);

d92 1
a92 1
  if (CreateProcess (NULL, fn_win, NULL, NULL, FALSE, DEBUG_PROCESS, NULL, NULL, &si, &pi))
d126 24
d151 1
a151 1
print_dlls_and_kill_inferior (dlls *dll)
d161 2
a162 18
	{
	  fnbuf[MAX_PATH] = '\0';
	  ssize_t cwlen = cygwin_conv_path (CCP_WIN_A_TO_POSIX, fnbuf, NULL, 0);
	  if (cwlen <= 0)
	    fn = strdup (fnbuf);
	  else
	    {
	      char *fn_cyg = (char *) malloc (cwlen + 1);
	      if (cygwin_conv_path (CCP_WIN_A_TO_POSIX, fnbuf, fn_cyg, cwlen) == 0)
		fn = fn_cyg;
	      else
		{
		  free (fn_cyg);
		  fn = strdup (fnbuf);
		}
	    }
	}
      printf ("\t%s (%p)\n", fn, dll->lpBaseOfDll);
d166 2
d177 12
a188 1
  if (!fn || start_process (fn))
d197 1
d222 4
a225 1
	  print_dlls_and_kill_inferior (&dll_list);
d290 275
@

