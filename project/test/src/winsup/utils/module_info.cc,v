head	1.7;
access;
symbols
	cygwin-1_7_35-release:1.7
	cygwin-1_7_34-release:1.7
	cygwin-1_7_33-release:1.7
	cygwin-1_7_32-release:1.7
	cygwin-1_7_31-release:1.7
	cygwin-1_7_30-release:1.7
	cygwin-1_7_29-release:1.7
	cygwin-1_7_29-release-branchpoint:1.7.0.2
	cygwin-1_7_28-release:1.7
	cygwin-1_7_27-release:1.7
	cygwin-1_7_26-release:1.7
	cygwin-1_7_25-release:1.6
	cygwin-1_7_24-release:1.6
	cygwin-1_7_23-release:1.6
	cygwin-1_7_22-release:1.6
	cygwin-1_7_21-release:1.6
	cygwin-1_7_20-release:1.6
	cygwin-1_7_19-release:1.6
	cygwin-64bit-postmerge:1.6
	cygwin-64bit-premerge-branch:1.5.0.2
	cygwin-64bit-premerge:1.5
	cygwin-1_7_18-release:1.5
	cygwin-1_7_17-release:1.4
	cygwin-64bit-branch:1.4.0.2
	cygwin-1_7_16-release:1.4
	cygwin-1_7_15-release:1.4
	cygwin-1_7_14_2-release:1.4
	cygwin-1_7_14-release:1.4
	cygwin-1_7_12-release:1.4
	cygwin-1_7_11-release:1.4
	cygwin-1_7_10-release:1.4
	cygwin-1_7_9-release:1.4
	cygwin-1_7_8-release:1.4
	cygwin-1_7_7-release:1.4
	cygwin-1_7_5-release:1.3
	cygwin-1_7_4-release:1.3
	cygwin-1_7_3-release:1.3
	cygwin-1_7_2-release:1.3
	cygwin-1_7_1-release:1.3
	cv-branch-2:1.3.0.18
	cr-0x5f1:1.3.0.16
	cv-branch:1.3.0.14
	cr-0x3b58:1.3.0.12
	cr-0x9e:1.3.0.10
	cr-0x9d:1.3.0.8
	corinna-01:1.3
	cr-0x9c:1.3.0.4
	cr-0x9b:1.3.0.6
	cr-0x99:1.3
	Z-emcb-cygwin_daemon:1.3.0.2
	w32api-2_2:1.3
	mingw-runtime-2_4:1.3
	cygnus_cvs_20020108_pre:1.3
	Z-cygwin_daemon_merge-new_HEAD:1.2
	Z-cygwin_daemon_merge_HEAD:1.2
	cygwin_daemon:1.2.0.8;
locks; strict;
comment	@// @;


1.7
date	2013.11.19.11.14.36;	author corinna;	state Exp;
branches;
next	1.6;

1.6
date	2013.04.23.09.44.36;	author corinna;	state Exp;
branches;
next	1.5;

1.5
date	2013.01.21.16.28.27;	author cgf;	state Exp;
branches;
next	1.4;

1.4
date	2010.08.28.11.22.37;	author corinna;	state Exp;
branches
	1.4.2.1;
next	1.3;

1.3
date	2001.12.11.22.51.01;	author cgf;	state Exp;
branches;
next	1.2;

1.2
date	2000.10.28.05.00.00;	author cgf;	state Exp;
branches;
next	1.1;

1.1
date	2000.08.24.19.03.12;	author cgf;	state Exp;
branches;
next	;

1.4.2.1
date	2013.01.29.21.54.42;	author corinna;	state Exp;
branches;
next	1.4.2.2;

1.4.2.2
date	2013.02.17.12.07.34;	author yselkowitz;	state Exp;
branches;
next	;


desc
@@


1.7
log
@	* Makefile.in (cygcheck.exe): Link against wininet.dll.
	(dumper.exe): Link against psapi.dll.
	* cygcheck.cc (_WIN32_WINNT): Define as 0x0602.
	(pInternetCloseHandle): Drop pointer.
	(PRODUCT_UNLICENSED): Drop definition.
	(PRODUCT_PROFESSIONAL_WMC): Ditto.
	(package_grep): Delete code loading wininet functions dynamically, just
	call functions directly.
@
text
@/* module_info.cc

   Copyright 1999, 2000, 2001, 2010, 2013 Red Hat, Inc.

   Written by Egor Duda <deo@@logos-m.ru>

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */

#include <stdlib.h>
#include <windows.h>
#include <psapi.h>
#include "loadlib.h"

/* Returns full name of Dll, which is loaded by hProcess at BaseAddress.
   Uses psapi.dll. */

char *
psapi_get_module_name (HANDLE hProcess, LPVOID BaseAddress)
{
  DWORD len;
  MODULEINFO mi;
  unsigned int i;
  HMODULE dh_buf[1];
  HMODULE *DllHandle = dh_buf;
  DWORD cbNeeded;
  BOOL ok;

  char name_buf[MAX_PATH + 1];

  ok = EnumProcessModules (hProcess, DllHandle, sizeof (HMODULE), &cbNeeded);

  if (!ok || !cbNeeded)
    goto failed;
  DllHandle = (HMODULE *) malloc (cbNeeded);
  if (!DllHandle)
    goto failed;
  ok = EnumProcessModules (hProcess, DllHandle, cbNeeded, &cbNeeded);
  if (!ok)
    {
      free (DllHandle);
      goto failed;
    }

  for (i = 0; i < cbNeeded / sizeof (HMODULE); i++)
    {
      if (!GetModuleInformation (hProcess, DllHandle[i], &mi, sizeof (mi)))
	{
	  free (DllHandle);
	  goto failed;
	}

      len = GetModuleFileNameExA (hProcess, DllHandle[i], name_buf, MAX_PATH);
      if (len == 0)
	{
	  free (DllHandle);
	  goto failed;
	}

      if (mi.lpBaseOfDll == BaseAddress)
	{
	  free (DllHandle);
	  return strdup (name_buf);
	}
    }

failed:
  return NULL;
}
@


1.6
log
@	* Merge in cygwin-64bit-branch.
@
text
@a17 14
static int psapi_loaded = 0;
static HMODULE psapi_module_handle = NULL;

typedef BOOL WINAPI (tf_EnumProcessModules) (HANDLE, HMODULE *, DWORD,
					     LPDWORD);
typedef BOOL WINAPI (tf_GetModuleInformation) (HANDLE, HMODULE, LPMODULEINFO,
					       DWORD);
typedef DWORD WINAPI (tf_GetModuleFileNameExA) (HANDLE, HMODULE, LPSTR,
						DWORD);

static tf_EnumProcessModules *psapi_EnumProcessModules = NULL;
static tf_GetModuleInformation *psapi_GetModuleInformation = NULL;
static tf_GetModuleFileNameExA *psapi_GetModuleFileNameExA = NULL;

d34 1
a34 28
  if (!psapi_loaded ||
      psapi_EnumProcessModules == NULL ||
      psapi_GetModuleInformation == NULL ||
      psapi_GetModuleFileNameExA == NULL)
    {
      if (psapi_loaded)
	goto failed;
      psapi_loaded = 1;
      psapi_module_handle = LoadLibrary ("psapi.dll");
      if (!psapi_module_handle)
	goto failed;
      psapi_EnumProcessModules =
	(tf_EnumProcessModules *) GetProcAddress (psapi_module_handle,
						  "EnumProcessModules");
      psapi_GetModuleInformation =
	(tf_GetModuleInformation *) GetProcAddress (psapi_module_handle,
						    "GetModuleInformation");
      psapi_GetModuleFileNameExA =
	(tf_GetModuleFileNameExA *) GetProcAddress (psapi_module_handle,
						    "GetModuleFileNameExA");
      if (psapi_EnumProcessModules == NULL
	  || psapi_GetModuleInformation == NULL
	  || psapi_GetModuleFileNameExA == NULL)
	goto failed;
    }

  ok = (*psapi_EnumProcessModules) (hProcess,
				    DllHandle, sizeof (HMODULE), &cbNeeded);
d41 1
a41 1
  ok = (*psapi_EnumProcessModules) (hProcess, DllHandle, cbNeeded, &cbNeeded);
d50 1
a50 2
      if (!(*psapi_GetModuleInformation) (hProcess,
					  DllHandle[i], &mi, sizeof (mi)))
d56 1
a56 2
      len = (*psapi_GetModuleFileNameExA) (hProcess,
					   DllHandle[i], name_buf, MAX_PATH);
@


1.5
log
@Update copyrights
@
text
@d3 1
a3 1
   Copyright 1999, 2000, 2001, 2010 Red Hat, Inc.
d36 1
a36 1
psapi_get_module_name (HANDLE hProcess, DWORD BaseAddress)
d106 1
a106 1
      if ((DWORD) (mi.lpBaseOfDll) == BaseAddress)
@


1.4
log
@	* loadlib.h: New header implementing safe LoadLibrary calls.
	Include throughout files using LoadLibrary function.
	* cygcheck.cc (dump_sysinfo): Retrieve kernel32.dll handle via
	GetModuleHandle, rather than using LoadLibrary.
	* cygpath.cc (get_long_name): Ditto.
	(do_sysfolders): Append .dll suffix in LoadLibrary call.
	* ldh.cc (WinMain): Use LoadLibraryExW with DONT_RESOLVE_DLL_REFERENCES
	to avoid loading malicious library code.
	* locale.cc (print_locale_with_codeset): Change way to retrieve
	kernel32.dll path.
@
text
@d3 1
a3 1
   Copyright 1999,2000,2001,2010 Red Hat, Inc.
@


1.4.2.1
log
@Pull in changes from HEAD
@
text
@d3 1
a3 1
   Copyright 1999, 2000, 2001, 2010 Red Hat, Inc.
@


1.4.2.2
log
@Fix 64-bit type problems in dumper.exe
* dumper.cc: Througout, cast pid to unsigned int, change addresses
and sizes from DWORD to SIZE_T, and use %p for pointer addresses.
(dumper::add_mem_region): Change size type to SIZE_T.
(dumper::split_add_mem_region): Ditto.
* dumper.h (struct process_mem_region): Change size type to SIZE_T.
(class exclusion): Change last, size, and step types to size_t.
(exclusion::exclusion): Change argument type to size_t.
(exclusion::add): Change mem_size type to SIZE_T.
(dumper::add_mem_region): Change size type to SIZE_T.
(dumper::split_add_mem_region): Ditto.
(psapi_get_module_name): Change BaseAddress type to LPVOID.
* module_info.cc (psapi_get_module_name): Ditto.
* parse_pe.cc: Througout, change addresses and sizes from DWORD to
SIZE_T, and use %p for pointer addresses.
(exclusion::add): Change mem_size type to SIZE_T.
@
text
@d3 1
a3 1
   Copyright 1999, 2000, 2001, 2010, 2013 Red Hat, Inc.
d36 1
a36 1
psapi_get_module_name (HANDLE hProcess, LPVOID BaseAddress)
d106 1
a106 1
      if (mi.lpBaseOfDll == BaseAddress)
@


1.3
log
@* Makefile.in: Add define to CXXFLAGS.
@
text
@d3 1
a3 1
   Copyright 1999,2000,2001 Red Hat, Inc.
d16 1
@


1.2
log
@Cleanup formatting on some files.  Remove excessive whitespace.
@
text
@d3 1
a3 1
   Copyright 1999 Cygnus Solutions.
@


1.1
log
@* Makefile.in: Add dumper.exe target and associated mechanisms for building it.
* dumper.cc: New file.
* dumper.h: New file.
* module_info.cc: New file.
* parse_pe.cc: New file.
@
text
@d20 6
a25 3
typedef BOOL  WINAPI (tf_EnumProcessModules  ) ( HANDLE, HMODULE*, DWORD, LPDWORD );
typedef BOOL  WINAPI (tf_GetModuleInformation) ( HANDLE, HMODULE, LPMODULEINFO, DWORD );
typedef DWORD WINAPI (tf_GetModuleFileNameExA) ( HANDLE, HMODULE, LPSTR, DWORD );
d31 2
a32 4
/*
 * Returns full name of Dll, which is loaded by hProcess at BaseAddress
 * Uses psapi.dll
 */
d34 2
a35 2
char*
psapi_get_module_name ( HANDLE hProcess, DWORD BaseAddress )
d40 2
a41 2
  HMODULE dh_buf [ 1 ];
  HMODULE* DllHandle = dh_buf;
d45 1
a45 1
  char name_buf [ MAX_PATH + 1 ];
d47 4
a50 4
  if ( !psapi_loaded ||
       psapi_EnumProcessModules   == NULL ||
       psapi_GetModuleInformation == NULL ||
       psapi_GetModuleFileNameExA == NULL )
d52 2
a53 1
      if ( psapi_loaded ) goto failed;
d55 16
a70 9
      psapi_module_handle = LoadLibrary ( "psapi.dll" );
      if ( ! psapi_module_handle )
        goto failed;
      psapi_EnumProcessModules   = (tf_EnumProcessModules *) GetProcAddress ( psapi_module_handle, "EnumProcessModules"   );
      psapi_GetModuleInformation = (tf_GetModuleInformation *) GetProcAddress ( psapi_module_handle, "GetModuleInformation" );
      psapi_GetModuleFileNameExA = (tf_GetModuleFileNameExA*) GetProcAddress ( psapi_module_handle, "GetModuleFileNameExA" );
      if ( psapi_EnumProcessModules   == NULL ||
           psapi_GetModuleInformation == NULL ||
           psapi_GetModuleFileNameExA == NULL ) goto failed;
d73 10
a82 13
  ok = (*psapi_EnumProcessModules) ( hProcess,
				     DllHandle,
				     sizeof ( HMODULE ),
				     &cbNeeded );

  if ( !ok || !cbNeeded ) goto failed;
  DllHandle = (HMODULE*) malloc ( cbNeeded );
  if ( ! DllHandle ) goto failed;
  ok = (*psapi_EnumProcessModules) ( hProcess,
				     DllHandle,
				     cbNeeded,
				     &cbNeeded );
  if ( ! ok )
d84 1
a84 1
      free ( DllHandle );
d88 1
a88 1
  for ( i = 0; i < cbNeeded / sizeof ( HMODULE ); i++ )
d90 20
a109 24
      if ( ! (*psapi_GetModuleInformation) ( hProcess,
					     DllHandle [ i ],
					     &mi,
					     sizeof ( mi ) ) )
        {
          free ( DllHandle );
          goto failed;
        }

      len = (*psapi_GetModuleFileNameExA) ( hProcess,
					    DllHandle [ i ],
					    name_buf,
					    MAX_PATH );
      if ( len == 0 )
        {
          free ( DllHandle );
          goto failed;
        }

      if ( (DWORD) (mi.lpBaseOfDll) == BaseAddress )
        {
          free ( DllHandle );
          return strdup ( name_buf );
        }
@

