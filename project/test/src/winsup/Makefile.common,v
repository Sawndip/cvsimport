head	1.65;
access;
symbols
	cygwin-1_7_35-release:1.65
	cygwin-1_7_34-release:1.65
	cygwin-1_7_33-release:1.64.2.1
	cygwin-1_7_32-release:1.64.2.1
	cygwin-1_7_31-release:1.64
	cygwin-1_7_30-release:1.64
	cygwin-1_7_29-release:1.64
	cygwin-1_7_29-release-branchpoint:1.64.0.2
	cygwin-1_7_28-release:1.64
	cygwin-1_7_27-release:1.63
	cygwin-1_7_26-release:1.63
	cygwin-1_7_25-release:1.63
	cygwin-1_7_24-release:1.63
	cygwin-1_7_23-release:1.63
	cygwin-1_7_22-release:1.63
	cygwin-1_7_21-release:1.63
	cygwin-1_7_20-release:1.62
	cygwin-1_7_19-release:1.62
	cygwin-64bit-postmerge:1.62
	cygwin-64bit-premerge-branch:1.62.0.2
	cygwin-64bit-premerge:1.62
	cygwin-1_7_18-release:1.62
	cygwin-1_7_17-release:1.59
	cygwin-64bit-branch:1.59.0.2
	cygwin-1_7_16-release:1.58
	cygwin-1_7_15-release:1.57
	cygwin-1_7_14_2-release:1.57
	cygwin-1_7_14-release:1.57
	cygwin-1_7_12-release:1.57
	cygwin-1_7_11-release:1.57
	cygwin-1_7_10-release:1.57
	cygwin-1_7_9-release:1.56
	cygwin-1_7_8-release:1.56
	cygwin-1_7_7-release:1.56
	cygwin-1_7_5-release:1.56
	cygwin-1_7_4-release:1.56
	cygwin-1_7_3-release:1.56
	cygwin-1_7_2-release:1.56
	cygwin-1_7_1-release:1.56
	cv-branch-2:1.55.0.8
	cr-0x5f1:1.55.0.6
	cv-branch:1.55.0.4
	cr-0x3b58:1.55.0.2
	cr-0x9e:1.52.0.10
	cr-0x9d:1.52.0.8
	corinna-01:1.52
	cr-0x9c:1.52.0.6
	cr-0x9b:1.52.0.4
	cr-0x99:1.52
	Z-emcb-cygwin_daemon:1.52.0.2
	w32api-2_2:1.36
	mingw-runtime-2_4:1.36
	cygnus_cvs_20020108_pre:1.31
	Z-cygwin_daemon_merge-new_HEAD:1.24
	Z-cygwin_daemon_merge_HEAD:1.24
	cygwin_daemon:1.24.0.6;
locks; strict;
comment	@# @;
expand	@o@;


1.65
date	2014.08.07.16.19.09;	author yselkowitz;	state Exp;
branches;
next	1.64;

1.64
date	2014.01.22.18.00.24;	author corinna;	state Exp;
branches
	1.64.2.1;
next	1.63;

1.63
date	2013.06.18.09.45.16;	author corinna;	state Exp;
branches;
next	1.62;

1.62
date	2012.11.23.13.22.42;	author cgf;	state Exp;
branches;
next	1.61;

1.61
date	2012.11.07.16.32.07;	author corinna;	state Exp;
branches;
next	1.60;

1.60
date	2012.10.24.10.11.15;	author yselkowitz;	state Exp;
branches;
next	1.59;

1.59
date	2012.07.30.04.43.21;	author cgf;	state Exp;
branches
	1.59.2.1;
next	1.58;

1.58
date	2012.07.06.10.32.11;	author corinna;	state Exp;
branches;
next	1.57;

1.57
date	2012.01.09.09.50.44;	author corinna;	state Exp;
branches;
next	1.56;

1.56
date	2009.07.07.20.12.43;	author davek;	state Exp;
branches;
next	1.55;

1.55
date	2005.10.11.18.17.59;	author cgf;	state Exp;
branches;
next	1.54;

1.54
date	2005.07.26.00.38.54;	author cgf;	state Exp;
branches;
next	1.53;

1.53
date	2005.03.23.03.22.27;	author cgf;	state Exp;
branches;
next	1.52;

1.52
date	2003.08.06.03.22.18;	author cgf;	state Exp;
branches;
next	1.51;

1.51
date	2003.08.06.02.35.33;	author cgf;	state Exp;
branches;
next	1.50;

1.50
date	2003.08.06.02.06.43;	author cgf;	state Exp;
branches;
next	1.49;

1.49
date	2003.07.26.01.52.52;	author cgf;	state Exp;
branches;
next	1.48;

1.48
date	2003.07.26.01.51.39;	author cgf;	state Exp;
branches;
next	1.47;

1.47
date	2003.07.18.16.40.59;	author cgf;	state Exp;
branches;
next	1.46;

1.46
date	2003.07.02.02.30.16;	author cgf;	state Exp;
branches;
next	1.45;

1.45
date	2003.07.01.20.51.03;	author cgf;	state Exp;
branches;
next	1.44;

1.44
date	2003.05.12.11.06.00;	author corinna;	state Exp;
branches;
next	1.43;

1.43
date	2003.04.19.01.02.51;	author cgf;	state Exp;
branches;
next	1.42;

1.42
date	2003.04.11.21.48.39;	author cgf;	state Exp;
branches;
next	1.41;

1.41
date	2003.03.29.04.15.52;	author cgf;	state Exp;
branches;
next	1.40;

1.40
date	2003.03.17.23.13.26;	author cgf;	state Exp;
branches;
next	1.39;

1.39
date	2003.03.17.22.35.53;	author cgf;	state Exp;
branches;
next	1.38;

1.38
date	2003.03.17.22.27.07;	author cgf;	state Exp;
branches;
next	1.37;

1.37
date	2003.03.09.19.22.15;	author cgf;	state Exp;
branches;
next	1.36;

1.36
date	2003.01.22.17.10.02;	author corinna;	state Exp;
branches;
next	1.35;

1.35
date	2002.12.21.05.06.24;	author cgf;	state Exp;
branches;
next	1.34;

1.34
date	2002.12.12.10.34.10;	author corinna;	state Exp;
branches;
next	1.33;

1.33
date	2002.08.17.02.15.05;	author cgf;	state Exp;
branches;
next	1.32;

1.32
date	2002.07.07.00.42.09;	author cgf;	state Exp;
branches;
next	1.31;

1.31
date	2001.12.14.18.26.43;	author cgf;	state Exp;
branches;
next	1.30;

1.30
date	2001.12.14.18.23.19;	author cgf;	state Exp;
branches;
next	1.29;

1.29
date	2001.11.03.19.56.52;	author cgf;	state Exp;
branches;
next	1.28;

1.28
date	2001.11.02.04.44.42;	author cgf;	state Exp;
branches;
next	1.27;

1.27
date	2001.10.13.00.59.20;	author cgf;	state Exp;
branches;
next	1.26;

1.26
date	2001.10.12.12.52.05;	author cgf;	state Exp;
branches;
next	1.25;

1.25
date	2001.10.10.01.57.43;	author cgf;	state Exp;
branches;
next	1.24;

1.24
date	2001.05.15.05.11.55;	author cgf;	state Exp;
branches;
next	1.23;

1.23
date	2001.02.22.12.37.32;	author corinna;	state Exp;
branches;
next	1.22;

1.22
date	2001.02.21.22.59.11;	author corinna;	state Exp;
branches;
next	1.21;

1.21
date	2001.02.21.21.46.47;	author corinna;	state Exp;
branches;
next	1.20;

1.20
date	2000.12.03.05.40.45;	author cgf;	state Exp;
branches;
next	1.19;

1.19
date	2000.10.23.04.50.32;	author cgf;	state Exp;
branches;
next	1.18;

1.18
date	2000.10.22.22.43.47;	author cgf;	state Exp;
branches;
next	1.17;

1.17
date	2000.10.22.22.32.15;	author cgf;	state Exp;
branches;
next	1.16;

1.16
date	2000.10.22.22.27.29;	author cgf;	state Exp;
branches;
next	1.15;

1.15
date	2000.10.22.22.03.59;	author cgf;	state Exp;
branches;
next	1.14;

1.14
date	2000.10.21.22.01.55;	author cgf;	state Exp;
branches;
next	1.13;

1.13
date	2000.10.02.02.05.23;	author cgf;	state Exp;
branches;
next	1.12;

1.12
date	2000.10.01.04.32.36;	author cgf;	state Exp;
branches;
next	1.11;

1.11
date	2000.09.01.14.20.30;	author cgf;	state Exp;
branches;
next	1.10;

1.10
date	2000.08.31.20.39.32;	author cgf;	state Exp;
branches;
next	1.9;

1.9
date	2000.08.24.19.05.38;	author cgf;	state Exp;
branches;
next	1.8;

1.8
date	2000.08.10.22.04.38;	author cgf;	state Exp;
branches;
next	1.7;

1.7
date	2000.08.10.22.02.41;	author cgf;	state Exp;
branches;
next	1.6;

1.6
date	2000.08.10.21.54.44;	author cgf;	state Exp;
branches;
next	1.5;

1.5
date	2000.05.24.18.54.10;	author dj;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.18.00.37.04;	author dj;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.10.03.51.39;	author cgf;	state Exp;
branches;
next	1.2;

1.2
date	2000.04.09.06.15.43;	author cgf;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.17.19.38.31;	author cgf;	state Exp;
branches
	1.1.1.1;
next	;

1.64.2.1
date	2014.08.13.16.38.22;	author corinna;	state Exp;
branches;
next	;

1.59.2.1
date	2012.10.24.12.50.32;	author corinna;	state Exp;
branches;
next	1.59.2.2;

1.59.2.2
date	2012.11.07.16.39.43;	author corinna;	state Exp;
branches;
next	1.59.2.3;

1.59.2.3
date	2012.11.23.15.14.37;	author corinna;	state Exp;
branches;
next	;

1.1.1.1
date	2000.02.17.19.38.31;	author cgf;	state Exp;
branches;
next	;


desc
@@


1.65
log
@* Makefile.common (COMPILE.cc): Add -fno-use-cxa-atexit.
@
text
@# Makefile.common - common definitions for the winsup directory
#
# Copyright 2000, 2001, 2002, 2003, 2004, 2005, 2009, 2012 Red Hat, Inc.
#
# This file is part of Cygwin.
#
# This software is a copyrighted work licensed under the terms of the
# Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
# details.

define justdir
$(patsubst %/,%,$(dir $1))
endef

define libname
$(realpath $(shell ${CC} --print-file-name=$1 $2))
endef

export PATH:=${winsup_srcdir}:${PATH}

# Allow CFLAGS=-O,-g to control CXXFLAGS too
opt=$(filter -O%,${CFLAGS}) $(filter -g%,${CFLAGS})
override CXXFLAGS:=${filter-out -g%,$(filter-out -O%,${CXXFLAGS})} ${opt}

cflags_common:=-Wall -Wstrict-aliasing -Wwrite-strings -fno-common -pipe -fbuiltin -fmessage-length=0
COMPILE.cc=c++wrap ${CXXFLAGS} -fno-rtti -fno-exceptions -fno-use-cxa-atexit ${cflags_common}
COMPILE.c=ccwrap ${CFLAGS} ${cflags_common}

top_srcdir:=$(call justdir,${winsup_srcdir})
top_builddir:=$(call justdir,${target_builddir})

cygwin_build:=${target_builddir}/winsup/cygwin
newlib_build:=${target_builddir}/newlib

nostdlib:=-nostdlib

VPATH:=${srcdir}

.SUFFIXES:
.SUFFIXES: .c .cc .def .S .a .o .d .s .E

%.o: %.cc
	$(strip ${COMPILE.cc} -c -o $@@ $<)

%.o: %.c
	$(strip ${COMPILE.c} -c -o $@@ $<)

%.E: %.cc
	$(strip ${COMPILE.cc} -E -dD -o $@@ $<)

%.E: %.c
	$(strip ${COMPILE.c} -E -dD -o $@@ $<)

%.o: %.S
	$(strip ${COMPILE.S} -c -o $@@ $<)
@


1.64
log
@	* Makefile.common: Don't drop -gFOO switches when filtering CFLAGS
	and CXXFLAGS.
@
text
@d26 1
a26 1
COMPILE.cc=c++wrap ${CXXFLAGS} -fno-rtti -fno-exceptions ${cflags_common}
@


1.64.2.1
log
@2014-08-07  Yaakov Selkowitz  <yselkowi@@redhat.com>

	* Makefile.common (COMPILE.cc): Add -fno-use-cxa-atexit.
@
text
@d26 1
a26 1
COMPILE.cc=c++wrap ${CXXFLAGS} -fno-rtti -fno-exceptions -fno-use-cxa-atexit ${cflags_common}
@


1.63
log
@	* Makefile.common: Add rule to build assembler code.
	(.SUFFIXES): Add .S.
@
text
@d22 2
a23 2
opt=$(filter -O%,${CFLAGS}) $(filter -g,${CFLAGS})
override CXXFLAGS:=${filter-out -g,$(filter-out -O%,${CXXFLAGS})} ${opt}
@


1.62
log
@ChangeLog:
2012-11-12  Christopher Faylor  <me.cygwin2012@@cgf.cx>

	* Makefile.common: Revamp for new configury.  Add default compilation
	targets, include .E processing.  Add magic for allowing "CFLAGS" to
	control optimization options in "CXXFLAGS".
	* configure.cygwin: New include for Cygwin configure.in's.
	* acinclude.m4: Delete old definitions.  Implement AC_WINDOWS_HEADERS,
	AC_WINDOWS_LIBS, AC_CYGWIN_INCLUDES, target_builddir, winsup_srcdir.
	* aclocal.m4: Regenerate.
	* autogen.sh: New file.
	* ccwrap: New script.
	* c++wrap: New script.
	* config.guess: New script.
	* config.sub: New script.
	* configure: Regenerate.
	* configure.in: Eliminate LIB_AC_PROG_* calls in favor of standard.
	Delete ancient target test.
	* install-sh: New script.

cygserver/ChangeLog:
2012-11-12  Christopher Faylor  <me.cygwin2012@@cgf.cx>

	* Makefile.in: Revamp for new configury.
	* configure.in: Revamp for new configury.
	* aclocal.m4: Regenerate.
	* configure: Ditto.
	* autogen.sh: New script.

cygwin/ChangeLog:
2012-11-22  Christopher Faylor  <me.cygwin2012@@cgf.cx>

	* select.cc (select): Don't return -1 when we've timed out after
	looping.

2012-11-22  Christopher Faylor  <me.cygwin2012@@cgf.cx>

	* Makefile.in: Revamp for new configury.
	(datarootdir): Add variable setting.
	(winver_stamp): Accommodate changes to mkvers.sh setting.
	(libc.a): Fix race when libm.a might not have been built yet.
	* configure.in: Revamp for new configury.
	* aclocal.m4: Regenerate.
	* configure: Ditto.
	* autogen.sh: New script.
	* mkvers.sh: Find include directives via CFLAGS and friends rather than
	assuming that w32api lives nearby.

utils/ChangeLog:
2012-11-12  Christopher Faylor  <me.cygwin2012@@cgf.cx>

	* aclocal.m4: Regenerate.
	* configure: Ditto.
	* autogen.sh: New script.
	* configure.in: Revamp for new configury.
	* Makefile.in: Revamp for new configury.  Rename ALL_* to just *.
	Always use "VERBOSE" setting.
	(MINGW_CXX): Don't include CFLAGS in definition.
	(all): Define target first, before everything else so that it is the
	default.
	(ps.exe): Don't add useless -lcygwin.
	(ldh.exe): For consistency, add to existing MINGW_LDFLAGS rather than
	redefining them.
	(cygcheck.exe): Always include -lz for MINGW_LDFLAGS.  Don't try to
	figure out where to find it.
	(dumper.exe): Simplify check.  Assume libraries are installed rather
	than trying to retrieve from source tree.
	(install): Just use /bin/mkdir to create directories.
	(Makefile): Regenerate when standard dependencies change.
	* dump_setup.cc: Always include zlib.h.  Remove accommodations for it
	possibly not existing.
	* parse_pe.cc: Add define which allows building with installed
	binutils package.
	* dumper.cc: Ditto.
@
text
@d40 1
a40 1
.SUFFIXES: .c .cc .def .a .o .d .s .E
d53 3
@


1.61
log
@winsup:

	* Makefile.common (zlib_source): Remove.
	(zlib_build): Remove.
	(bz2lib_source): Remove.
	(bz2lib_build): Remove.
	(w32api_source): Remove.
	(w32api_build): Remove.
	(w32api_lib): Remove.
	(mingw_build): Remove.
	(mingw_source): Remove.
	($(w32api_lib)/%.a): Remove rule.
	* Makefile.in (ZLIB): Remove.
	($(SUBDIRS)): Drop mingw check.
	(mingw): Remove rule.
	(install_mingw): Ditto.
	* configure.in: Remove support for mingw as build target.
	* configure: Regenerate.

utils:

	* Makefile.in ($(MINGW_BINS)): Drop -B$(mingw_build)/ from build
	expression.
@
text
@d11 3
a13 1
# This makefile requires GNU make.
d15 3
a17 52
CFLAGS_COMMON:=-Wall -Wstrict-aliasing -Wwrite-strings -fno-common -pipe -fbuiltin -fmessage-length=0 -D_SDKDDKVER_H
MALLOC_DEBUG:=#-DMALLOC_DEBUG -I/cygnus/src/uberbaum/winsup/cygwin/dlmalloc
MALLOC_OBJ:=#/cygnus/src/uberbaum/winsup/cygwin/dlmalloc/malloc.o

override srcdir:=${shell cd $(srcdir); pwd}
ifneq (,${filter-out /%,$(srcdir)})
    updir:=$(srcdir)/..
    updir1:=$(updir)/..
else
    updir:=${patsubst %:::,%,${patsubst %/:::,%,$(dir $(srcdir)):::}}
ifneq (,${findstring /,$(updir)})
    updir1:=${patsubst %:::,%,${patsubst %/:::,%,$(dir $(updir)):::}}
else
    updir1:=$(updir)/..
endif
endif

pwd:=${shell pwd}
ifneq "${filter winsup%,${notdir $(pwd)}}" ""
    here:=${pwd}/cygwin
else
    here:=${dir $(pwd)}cygwin
endif
bupdir:=${shell cd $(here)/..; pwd}
ifneq (,${filter-out /%,$(bupdir)})
    bupdir1:=../..
    bupdir2:=../../..
else
ifneq (,${findstring /,$(bupdir)})
    bupdir1:=${patsubst %:::,%,${patsubst %/:::,%,$(dir $(bupdir)):::}}
else
    bupdir1:=$(bupdir)/..
endif
ifneq (,${findstring /,$(bupdir1)})
    bupdir2:=${patsubst %:::,%,${patsubst %/:::,%,$(dir $(bupdir1)):::}}
else
    bupdir2:=$(bupdir1)/..
endif
endif

newlib_source:=$(updir1)/newlib
newlib_build:=$(bupdir1)/newlib
cygwin_build:=$(bupdir)/cygwin
cygwin_source:=$(updir)/cygwin
utils_build:=$(bupdir)/utils
utils_source:=$(updir)/utils
ifeq (,${findstring $(newlib_source)/libc/include,$(CFLAGS) $(CXXFLAGS) $(CXX) $(CC)})
newlib_include:=-I$(newlib_source)/libc/include
endif
ifeq (,${findstring $(cygwin_source)/include,$(CFLAGS) $(CXXFLAGS) $(CXX) $(CC)})
cygwin_include:=-I$(cygwin_source)/include
endif
d19 1
a19 1
nostdincxx:=-nostdinc++
d21 3
a23 1
nostdlib:=-nostdlib
d25 3
a27 59
ifeq (,${nostdlib})
nostdinc:=
endif

INCLUDES:=-I. $(cygwin_include) -I$(cygwin_source) $(newlib_include)
ifdef CONFIG_DIR
INCLUDES+=-I$(CONFIG_DIR)
endif

MINGW_LDFLAGS:=-static
MINGW_CFLAGS:=
MINGW_CXXFLAGS:=

GCC_DEFAULT_OPTIONS:=$(CFLAGS_COMMON) $(CFLAGS_CONFIG) $(INCLUDES)

# Link in libc and libm from newlib

LIBC:=$(newlib_build)/libc/libc.a
LIBM:=$(newlib_build)/libm/libm.a
CRT0:=$(cygwin_build)/crt0.o

ALL_CFLAGS=$(DEFS) $(MALLOC_DEBUG) $(CFLAGS) $(GCC_DEFAULT_OPTIONS)
ALL_CXXFLAGS=$(DEFS) $(MALLOC_DEBUG) $(CXXFLAGS) $(GCC_DEFAULT_OPTIONS)

ifndef PREPROCESS
c=-c
o=.o
else
c=-E -dD
o=.E
endif

libgcc:=${subst \,/,${shell $(CC_FOR_TARGET) -print-libgcc-file-name}}
gcc_libdir:=${word 1,${dir $(libgcc)}}
ifeq (,${findstring $(gcc_libdir),$(CFLAGS) $(CXXFLAGS) $(CXX) $(CC)})
GCC_INCLUDE:=${subst //,/,-I$(gcc_libdir)/include}
endif

COMPILE_CXX=$(CXX) $c $(if $($(*F)_STDINCFLAGS),,$(nostdincxx) $(nostdinc)) \
	     $(ALL_CXXFLAGS) $(GCC_INCLUDE) -fno-rtti -fno-exceptions
COMPILE_CC=$(CC) $c $(if $($(*F)_STDINCFLAGS),,$(nostdinc)) $(ALL_CFLAGS) $(GCC_INCLUDE)

vpath %.a	$(cygwin_build):$(newlib_build)/libc:$(newlib_build)/libm

MAKEOVERRIDES_WORKAROUND=${wordlist 2,1,a b c}

ifneq ($(MAKEOVERRIDES_WORKAROUND),)
    override MAKE:=$(MAKE) $(MAKEOVERRIDES)
    MAKEOVERRIDES:=
    export MAKEOVERRIDES
endif

ifdef RPATH_ENVVAR
VERBOSE=1
endif

ifneq "${findstring -B,$(COMPILE_CXX) $(COMPILE_CC)}" ""
VERBOSE=1
endif
d29 2
a30 1
.PRECIOUS: %.o
d32 2
a33 7
%.o: %.cc
ifdef VERBOSE
	$(COMPILE_CXX) -o $(@@D)/$(*F)$o $<
else
	@@echo $(CXX) $c $(CXXFLAGS) ... $(*F).cc
	@@$(COMPILE_CXX) -o $(@@D)/$(*F)$o $<
endif
d35 1
a35 7
%.o: %.c
ifdef VERBOSE
	$(COMPILE_CC) -o $(@@D)/$(*F)$o $<
else
	@@echo $(CC) $c $(CFLAGS) ... $(*F).c
	@@$(COMPILE_CC) -o $(@@D)/$(*F)$o $<
endif
d37 1
a37 2
$(bupdir1)/libiberty/%.o: $(updir1)/libiberty/%.c
	@@$(MAKE) -C $(@@D) $(@@F)
d39 2
a40 1
all:
d42 2
a43 1
# For auto-rebuilding the Makefile
d45 2
a46 1
.PRECIOUS: Makefile
d48 2
a49 2
Makefile: Makefile.in $(srcdir)/configure.in config.status
	$(SHELL) config.status
d51 2
a52 2
config.status: configure
	$(SHELL) config.status --recheck
@


1.60
log
@2012-10-24  Kai Tietz  <ktietz70@@googlemail.com>
	    Yaakov Selkowitz  <yselkowitz@@users.sourceforge.net>
	    Corinna Vinschen  <corinna@@vinschen.de>

	* configure.in [cygwin*]: Always build cygserver, lsaauth,
	utils, and doc.  Do not build mingw or w32api.
	[mingw*]: Build w32api if present.
	* configure: Regenerate.
	* Makefile.common: Remove references to mingw and w32api
	directories.
	(MINGW_LDFLAGS): Redefine as -static to force static linking
	with libgcc and libstdc++.
	* Makefile.in: Remove references to mingw and w32api directories
	from Cygwin targets.
@
text
@a52 7
zlib_source:=$(updir)/zlib
zlib_build:=$(bupdir)/zlib
bz2lib_source:=$(updir)/bz2lib
bz2lib_build:=$(bupdir)/bz2lib
w32api_source:=$(updir)/w32api
w32api_build:=$(bupdir)/w32api
w32api_lib:=$(w32api_build)/lib
a56 2
mingw_build:=$(bupdir)/mingw
mingw_source:=$(updir)/mingw
a150 9
$(w32api_lib)/%.a: $(w32api_lib)/Makefile
	@@$(MAKE) --no-print-dir -C $(@@D) $(@@F)

$(bz2lib)/%.a: $(bz2lib)/Makefile
	@@$(MAKE) --no-print-dir -C $(@@D) $(@@F)

$(zlib)/%.a: $(zlib)/Makefile
	@@$(MAKE) --no-print-dir -C $(@@D) $(@@F)

@


1.59
log
@* Makefile.common (CFLAGS_COMMON): Add temporary define to work around w32api
problem.

* cygwin/winlean.h: Define constant which will be needed eventually.  Remove
hack in favor of another hack.
* cygwin/lib/crt0.h: Use "winlean.h".
@
text
@a74 6
# Try to determine what directories are available in winsup.
# Attempt to properly detect missing mingw or w32api and adjust command
# line parameters appropriately

# nostdinc:=${shell [ -d "$(updir)/w32api" ] && echo "-nostdinc"}
# ifneq (,$(nostdinc))
a75 4
# ifeq (,${findstring $(w32api_source),$(CFLAGS) $(CXXFLAGS) $(CXX) $(CC)})
w32api_include:=-I$(w32api_source)/include
# endif
# endif
a76 2
mingw_include:=${shell [ -d "$(mingw_source)/include" ] && echo "-I$(mingw_source)/include"}
ifneq (,$(mingw_include))
a77 3
else
nostdlib:=
endif
d83 1
a83 1
INCLUDES:=-I. $(cygwin_include) -I$(cygwin_source) $(newlib_include) $(w32api_include)
d88 3
a90 4
MINGW_INCLUDES:=${mingw_include} $(w32api_include)
MINGW_CFLAGS:=-mno-cygwin $(MINGW_INCLUDES)
MINGW_CXXFLAGS:=${filter-out $(newlib_source)/%,$(CXXFLAGS)} -mno-cygwin $(MINGW_INCLUDES)
MINGW_LDFLAGS:=-L${mingw_build} -L${mingw_build}/mingwex
d121 1
a121 1
vpath %.a	$(cygwin_build):$(w32api_lib):$(newlib_build)/libc:$(newlib_build)/libm
@


1.59.2.1
log
@Pull in changes from HEAD
@
text
@d75 6
d82 4
d87 2
d90 3
d98 1
a98 1
INCLUDES:=-I. $(cygwin_include) -I$(cygwin_source) $(newlib_include)
d103 4
a106 3
MINGW_LDFLAGS:=-static
MINGW_CFLAGS:=
MINGW_CXXFLAGS:=
d137 1
a137 1
vpath %.a	$(cygwin_build):$(newlib_build)/libc:$(newlib_build)/libm
@


1.59.2.2
log
@Pull in changes from HEAD
@
text
@d53 7
d64 2
d160 9
@


1.59.2.3
log
@Pull in changes from HEAD
@
text
@d11 1
a11 3
define justdir
$(patsubst %/,%,$(dir $1))
endef
d13 52
a64 3
define libname
$(realpath $(shell ${CC} --print-file-name=$1 $2))
endef
d66 1
a66 1
export PATH:=${winsup_srcdir}:${PATH}
d68 1
a68 3
# Allow CFLAGS=-O,-g to control CXXFLAGS too
opt=$(filter -O%,${CFLAGS}) $(filter -g,${CFLAGS})
override CXXFLAGS:=${filter-out -g,$(filter-out -O%,${CXXFLAGS})} ${opt}
d70 59
a128 3
cflags_common:=-Wall -Wstrict-aliasing -Wwrite-strings -fno-common -pipe -fbuiltin -fmessage-length=0
COMPILE.cc=c++wrap ${CXXFLAGS} -fno-rtti -fno-exceptions ${cflags_common}
COMPILE.c=ccwrap ${CFLAGS} ${cflags_common}
d130 1
a130 2
top_srcdir:=$(call justdir,${winsup_srcdir})
top_builddir:=$(call justdir,${target_builddir})
d132 7
a138 2
cygwin_build:=${target_builddir}/winsup/cygwin
newlib_build:=${target_builddir}/newlib
d140 7
a146 1
nostdlib:=-nostdlib
d148 2
a149 1
VPATH:=${srcdir}
d151 1
a151 2
.SUFFIXES:
.SUFFIXES: .c .cc .def .a .o .d .s .E
d153 1
a153 2
%.o: %.cc
	$(strip ${COMPILE.cc} -c -o $@@ $<)
d155 1
a155 2
%.o: %.c
	$(strip ${COMPILE.c} -c -o $@@ $<)
d157 2
a158 2
%.E: %.cc
	$(strip ${COMPILE.cc} -E -dD -o $@@ $<)
d160 2
a161 2
%.E: %.c
	$(strip ${COMPILE.c} -E -dD -o $@@ $<)
@


1.58
log
@	* Makefile.common (ALL_CFLAGS): Change := to = to allow overriding in
	dependent Makefiles.
@
text
@d3 1
a3 1
# Copyright 2000, 2001, 2002, 2003, 2004, 2005 Red Hat, Inc.
d13 1
a13 1
CFLAGS_COMMON:=-Wall -Wstrict-aliasing -Wwrite-strings -fno-common -pipe -fbuiltin -fmessage-length=0# -finline-functions
@


1.57
log
@	* Makefile.common (MINGW_LDFLAGS): Correctly use -L rather than -B here.
@
text
@d116 1
a116 1
ALL_CFLAGS:=$(DEFS) $(MALLOC_DEBUG) $(CFLAGS) $(GCC_DEFAULT_OPTIONS)
@


1.56
log
@winsup/ChangeLog:

	* Makefile.common (COMPILE_CXX): Add support for per-file overrides
	to exclude $(nostdinc) and $(nostdincxx) from compiler flags.
	(COMPILE_CC): Likewise for $(nostdinc).

winsup/cygwin/ChangeLog:

	* Makefile.in (DLL_OFILES): Add libstdcxx_wrapper.o
	(libstdcxx_wrapper_CFLAGS): Add flags for new module.
	(_cygwin_crt0_common_STDINCFLAGS): Define per-file override.
	(libstdcxx_wrapper_STDINCFLAGS, cxx_STDINCFLAGS): Likewise.
	* cxx.cc: Include "cygwin-cxx.h".
	(operator new): Tweak prototype for full standards compliance.
	(operator new[]): Likewise.
	(operator new (nothrow)): New fallback function.
	(operator new[] (nothrow), operator delete (nothrow),
	operator delete[] (nothrow)): Likewise.
	(default_cygwin_cxx_malloc): New struct of pointers to the above,
	for final last-resort fallback default.
	* cygwin-cxx.h: New file.
	(struct per_process_cxx_malloc): Define.
	(default_cygwin_cxx_malloc): Declare extern.
	* cygwin.din (__wrap__ZdaPv): Export new wrapper.
	(__wrap__ZdaPvRKSt9nothrow_t, __wrap__ZdlPv,
	__wrap__ZdlPvRKSt9nothrow_t, __wrap__Znaj,
	__wrap__ZnajRKSt9nothrow_t, __wrap__Znwj,
	__wrap__ZnwjRKSt9nothrow_t): Likewise.
	* globals.cc (__cygwin_user_data): Init newly-repurposed 'forkee'
	field (now 'cxx_malloc') to point to default_cygwin_cxx_malloc.
	* libstdcxx_wrapper.cc: New file.
	(__wrap__ZdaPv, __wrap__ZdaPvRKSt9nothrow_t, __wrap__ZdlPv,
	__wrap__ZdlPvRKSt9nothrow_t, __wrap__Znaj,
	__wrap__ZnajRKSt9nothrow_t, __wrap__Znwj,
	__wrap__ZnwjRKSt9nothrow_t): Define wrapper functions for libstdc++
	malloc operators and their overrides.
	* winsup.h (default_cygwin_cxx_malloc): Declare extern.
	* include/cygwin/version.h (CYGWIN_VERSION_API_MINOR): Bump.
	* include/sys/cygwin.h (struct per_process_cxx_malloc): Forward
	declare here.
	(struct per_process::forkee): Rename and repurpose from this ...
	(struct per_process::cxx_malloc): ... to this.
	* lib/_cygwin_crt0_common.cc: Include cygwin-cxx.h.
	(WEAK): Define shorthand helper macro.
	(__cygwin_cxx_malloc): Define and populate with weak references
	to whatever libstdc++ malloc operators will be visible at final
	link time for Cygwin apps and dlls.
	(_cygwin_crt0_common): Always look up cygwin DLL's internal
	per_process data, and don't test for (impossible) failure.  Inherit
	any members of __cygwin_cxx_malloc that we don't have overrides
	for from the DLL's default and store the resulting overall set of
	overrides back into the DLL's global per_process data.
@
text
@d106 1
a106 1
MINGW_LDFLAGS:=-B${mingw_build} -B${mingw_build}/mingwex
@


1.55
log
@* Makefile.common (CFLAGS_COMMON): Add -Wstrict-aliasing.
@
text
@d133 3
a135 3
COMPILE_CXX=$(CXX) $c $(nostdincxx) $(nostdinc) $(ALL_CXXFLAGS) $(GCC_INCLUDE) \
	     -fno-rtti -fno-exceptions
COMPILE_CC=$(CC) $c $(nostdinc) $(ALL_CFLAGS) $(GCC_INCLUDE)
@


1.54
log
@update copyright
@
text
@d13 1
a13 1
CFLAGS_COMMON:=-Wall -Wwrite-strings -fno-common -pipe -fbuiltin -fmessage-length=0# -finline-functions
@


1.53
log
@* Makefile.common: Add -dD to options when creating preprocess files.
@
text
@d3 1
a3 1
# Copyright 2000, 2001 Red Hat, Inc.
@


1.52
log
@typo
@
text
@d79 2
a80 2
nostdinc:=${shell [ -d "$(updir)/w32api" ] && echo "-nostdinc"}
ifneq (,$(nostdinc))
d82 1
a82 1
ifeq (,${findstring $(w32api_source),$(CFLAGS) $(CXXFLAGS) $(CXX) $(CC)})
d84 2
a85 2
endif
endif
d123 1
a123 1
c=-E
@


1.51
log
@* Makefile.common: Hmm.  Older compilers seem to need -nostdinc.
@
text
@d133 1
a133 1
COMPILE_CXX=$(CXX) $c $(nostdincxx) $(nostdinc} $(ALL_CXXFLAGS) $(GCC_INCLUDE) \
@


1.50
log
@* Makefile.common: Don't send -nostdinc++ with g++.
@
text
@d133 1
a133 1
COMPILE_CXX=$(CXX) $c $(nostdincxx) $(ALL_CXXFLAGS) $(GCC_INCLUDE) \
@


1.49
log
@revert erroneous checkin
@
text
@d79 1
a79 1
nostdinc:=${shell [ -d "$(updir)/w32api" ] && echo "-nostdinc -nostdinc++"}
d81 1
d133 1
a133 1
COMPILE_CXX=$(CXX) $c $(nostdinc) $(ALL_CXXFLAGS) $(GCC_INCLUDE) \
@


1.48
log
@* Makefile.in: Only use localhost when building mingw with distcc or gcc won't
be able to find .exp files on other hosts.
@
text
@a20 1
    aux_dir:=$(updir)/../..
a26 5
endif
ifneq (,${findstring /,$(updir1)})
    aux_dir:=${patsubst %:::,%,${patsubst %/:::,%,$(dir $(updir1)):::}}
else
    aux_dir:=$(updir1)/..
@


1.47
log
@* Makefile.common (CFLAGS_COMMON): Remove -march=i386.
@
text
@d21 1
d28 5
@


1.46
log
@* Makefile.common (CFLAGS_COMMON): Remove -Winline since it is too noisy on
newer versions of gcc.
@
text
@d13 1
a13 1
CFLAGS_COMMON:=-march=i386 -Wall -Wwrite-strings -fno-common -pipe -fbuiltin -fmessage-length=0# -finline-functions
@


1.45
log
@* configure.in: Add cygserver subdir.
* Makefile.in: Ditto.
* configure: Regenerate.
* Makefile.common: Remove debugging statements.
@
text
@d13 1
a13 1
CFLAGS_COMMON:=-march=i386 -Wall -Wwrite-strings -fno-common -pipe -Winline -fbuiltin -fmessage-length=0# -finline-functions
@


1.44
log
@	* Makefile.common: Remove newlib_sys_include and
	newlib_sys_include_include entirely.  Set CRT0 to cygwin/crt0.o.
@
text
@a31 1
a:=${shell ${filter winsup%,${notdir $(pwd)}} >/dev/tty}
a33 1
a:=${shell ${filter winsup%,${notdir $(pwd)}} >/dev/tty}
@


1.43
log
@* Makefile.in: Reorganize to try to allow lack of mingw/w32api to work.
@
text
@a72 6
ifeq (,${findstring $(newlib_source)/libc/sys/cygwin,$(CFLAGS) $(CXXFLAGS) $(CXX) $(CC)})
newlib_sys_include:=-I$(newlib_source)/libc/sys/cygwin
endif
ifeq (,${findstring $(newlib_source)/libc/sys/cygwin/include,$(CFLAGS) $(CXXFLAGS) $(CXX) $(CC)})
newlib_sys_include_include:=-I$(newlib_source)/libc/sys/cygwin/include
endif
d99 1
a99 1
INCLUDES:=-I. $(cygwin_include) -I$(cygwin_source) $(newlib_sys_include) $(newlib_include)  $(newlib_sys_include_include) $(w32api_include)
d115 1
a115 1
CRT0:=$(newlib_build)/libc/crt0.o
@


1.42
log
@* Makefile.common (w32api_lib): Fix w32api detection.
@
text
@a60 3
ifeq (,${findstring $(w32api_source),$(CFLAGS) $(CXXFLAGS) $(CXX) $(CC)})
w32api_include:=-I$(w32api_source)/include
endif
d83 22
d110 1
a110 1
MINGW_INCLUDES:=-I$(updir)/mingw/include $(w32api_include)
a137 5
endif

nostdinc:=${shell [ -d "$(updir)/w32api" ] && echo "-nostdinc -nostdinc++"}
ifeq (,$(nostdinc))
override w32api_lib:=${subst //,/,${shell $(CC) -print-search-dirs | awk -F: '/^librar/{for (i = 1; i <= NF; i++) if ($$i ~ /\/lib\/*$$/) foo=$$i} END{print foo}'}/w32api}
@


1.41
log
@* Makefile.common (ALL_CXXFLAGS): Make normal '=' type variable so that
CXXFLAGS is properly interpreted.
@
text
@d13 1
a13 1
CFLAGS_COMMON:=-Wall -Wwrite-strings -fno-common -pipe -Winline -fbuiltin -fmessage-length=0# -finline-functions
d123 1
a123 1
override w32api_lib:=${subst //,/,${shell $(CC) -print-search-dirs | awk -F: '/^librar/{for (i = 1; i <= NF; i++) if ($$i ~ /\/lib\/*$$/) print $$i}'}/w32api}
@


1.40
log
@* Makefile.common (w32api_lib): Default to system w32api directory if w32api is
missing from source.
@
text
@d105 1
a105 1
ALL_CXXFLAGS:=$(DEFS) $(MALLOC_DEBUG) $(CXXFLAGS) $(GCC_DEFAULT_OPTIONS)
@


1.39
log
@* Makefile.common: Fix typo from previous checkin.
@
text
@d122 3
@


1.38
log
@* configure.in: w32api directory was already optional.  Semi-revert 2003-02-06
change.
* configure: Regenerate.
* Makefile.common: Don't specific -nostdinc if there is no w32api directory.
@
text
@d121 1
a121 1
nostdinc:=${shell [ -d "$$srcdir/w32api" ] && echo "-nostdinc -nostdinc++"]}
@


1.37
log
@* Makefile.common: Avoid double slashes in GCC_INCLUDE.
@
text
@d121 3
a123 1
COMPILE_CXX=$(CXX) $c -nostdinc++ -nostdinc $(ALL_CXXFLAGS) $(GCC_INCLUDE) \
d125 1
a125 1
COMPILE_CC=$(CC) $c -nostdinc $(ALL_CFLAGS) $(GCC_INCLUDE)
@


1.36
log
@	* Makefile.common (MINGW_LDFLAGS): Add mingw/mingwex builddir.
@
text
@d118 1
a118 1
GCC_INCLUDE:=-I$(gcc_libdir)/include
@


1.35
log
@* Makefile.common: Don't attempt to pretty-print c++ errors.
@
text
@d94 1
a94 1
MINGW_LDFLAGS:=-B${mingw_build}
@


1.34
log
@	* Makefile.common: Define MINGW_LDFLAGS.
	* configure.in: Reorder SUBDIRS to have mingw before cygwin.
	* configure: Regenerate from configure.in.
	* cygwin/Makefile.in: Add MINGW_LDFLAGS when linking cygrun.exe.
@
text
@d13 1
a13 1
CFLAGS_COMMON:=-Wall -Wwrite-strings -fno-common -pipe -Winline -fbuiltin# -finline-functions
@


1.33
log
@* Makefile.in: Change COMPILE_C* definitions.
@
text
@d94 1
@


1.32
log
@* Makefile.common (MINGW_INCLUDES): Simplify.
(MINGW_CFLAGS): New.
(MINGW_CXXFLAGS): Ditto.
@
text
@d120 1
a120 1
COMPILE_CXX:=$(CXX) $c -nostdinc++ -nostdinc $(ALL_CXXFLAGS) $(GCC_INCLUDE) \
d122 1
a122 1
COMPILE_CC:=$(CC) $c -nostdinc $(ALL_CFLAGS) $(GCC_INCLUDE)
@


1.31
log
@Add missing ChangeLog.
* configure.in: Detect zlib subdirectory.
* configure: Regenerate
@
text
@d91 3
a93 1
MINGW_INCLUDES:=-I$(updir)/mingw/include $(INCLUDES)
@


1.30
log
@* Makefile.in: Exit immediately if a sub-make fails.
@
text
@d164 1
a164 1
$(bz2lib)/%a: $(bz2lib)/Makefile
d167 1
a167 1
$(zlib)/%a: $(zlib)/Makefile
@


1.29
log
@* Makefile.common: Remove preferred-stack-boundary setting since gcc 2.95.3
doesn't work well with it.
@
text
@d55 4
d162 6
@


1.28
log
@* Makefile.common: Add some stuff to common CFLAGS.
@
text
@d13 1
a13 1
CFLAGS_COMMON:=-Wall -Wwrite-strings -mpreferred-stack-boundary=2 -fno-common -pipe -Winline -fbuiltin# -finline-functions
@


1.27
log
@* Makefile.in: Add -nostdinc to CXXFLAGS.
@
text
@d13 1
a13 1
CFLAGS_COMMON:=-Wall -Wwrite-strings # -finline-functions
@


1.26
log
@* Makefile.common: Perform more include file testing trickery.
@
text
@d114 1
a114 1
COMPILE_CXX:=$(CXX) $c -nostdinc++ $(ALL_CXXFLAGS) $(GCC_INCLUDE) \
@


1.25
log
@* Makefile.common: Avoid adding -I options to compile if they already exist in
CC or C*FLAGS.  This prevents warnings from newer versions of gcc.
@
text
@d69 1
a69 1
ifeq (,${findstring $(newlib_source),$(CFLAGS) $(CXXFLAGS) $(CXX) $(CC)})
d71 6
a76 1
newlib_sys_include:=-I$(newlib_source)/libc/sys
a80 1
cygwin_include:=-I$(cygwin_source)/include
d82 1
a82 1
INCLUDES:=-I. $(cygwin_include) -I$(cygwin_source) $(newlib_sys_include) $(newlib_include) $(w32api_include)
@


1.24
log
@* Makefile.common: Change method for finding current directory.
@
text
@d57 3
a59 1
w32api_include:=$(w32api_source)/include
d69 8
d78 1
a78 1
INCLUDES:=-I. -I$(cygwin_source)/include -I$(cygwin_source) -I$(newlib_source)/libc/sys/cygwin -I$(newlib_source)/libc/include -I$(w32api_include)
d105 4
a108 1
GCC_INCLUDE:=${word 1,${dir $(libgcc)}}/include
d110 1
a110 1
COMPILE_CXX:=$(CXX) $c -nostdinc++ $(ALL_CXXFLAGS) -I$(GCC_INCLUDE) \
d112 1
a112 1
COMPILE_CC:=$(CC) $c -nostdinc $(ALL_CFLAGS) -I$(GCC_INCLUDE)
@


1.23
log
@        * Makefile.common: Revert previous change.
@
text
@d31 7
a37 1
here:=${word 1,${subst winsup/,winsup ,$(pwd)}}/cygwin
@


1.22
log
@Add copyright year 2001
@
text
@d92 1
a92 1
	     -fno-rtti -fno-exceptions -fvtable-thunks
@


1.21
log
@        * Makefile.common: Add `-fvtable-thunks' to COMPILE_CXX.
@
text
@d3 1
a3 1
# Copyright 2000 Red Hat, Inc.
@


1.20
log
@* Makefile.common: Eliminate checks for libgcc.a and libstdc++.a.  Use CXX for
g++ compiles.
* configure.in: Find correct c++ compiler.
* configure: Regenerate.
@
text
@d92 1
a92 1
	     -fno-rtti -fno-exceptions
@


1.19
log
@* Makefile.common (LIBGCC): Acommodate older gcc's that don't need libstdc++.a.
@
text
@d88 2
a89 8
libstdcxx:=${subst \,/,${shell $(CC_FOR_TARGET) -print-file-name=libstdc++.a}}
ifeq ($(libstdcxx),${notdir $(libstdcxx)})
LIBGCC+=${subst \,/,${shell $(CC_FOR_TARGET) -print-libgcc-file-name}}
else
LIBGCC:=${subst \,/,${shell $(CC_FOR_TARGET) -print-libgcc-file-name}} $(libstdcxx)
endif

GCC_INCLUDE:=${word 1,${dir $(LIBGCC)}}/include
d91 1
a91 1
COMPILE_CXX:=$(CC) $c -nostdinc++ $(ALL_CXXFLAGS) -I$(GCC_INCLUDE) \
d119 1
a119 1
	@@echo $(CC) $c $(CXXFLAGS) ... $(*F).cc
@


1.18
log
@flip/flop change.
@
text
@d88 8
a95 2
LIBGCC:=${subst \,/,${shell $(CC_FOR_TARGET) -print-libgcc-file-name; exec $(CC_FOR_TARGET) -print-file-name=libstdc++.a}}
GCC_INCLUDE:=${dir ${word 1,$(LIBGCC)}}/include
@


1.17
log
@Minor change.
@
text
@d14 2
a15 2
# MALLOC_DEBUG:=-DMALLOC_DEBUG -I/cygnus/src/uberbaum/winsup/cygwin/dlmalloc
# MALLOC_OBJ:=/cygnus/src/uberbaum/winsup/cygwin/dlmalloc/malloc.o
@


1.16
log
@Test checkin.
@
text
@d14 2
a15 2
MALLOC_DEBUG:=#-DMALLOC_DEBUG -I/cygnus/src/uberbaum/winsup/cygwin/dlmalloc
MALLOC_OBJ:=#/cygnus/src/uberbaum/winsup/cygwin/dlmalloc/malloc.o
@


1.15
log
@Minor change.
@
text
@d14 2
a15 2
# MALLOC_DEBUG:=-DMALLOC_DEBUG -I/cygnus/src/uberbaum/winsup/cygwin/dlmalloc
# MALLOC_OBJ:=/cygnus/src/uberbaum/winsup/cygwin/dlmalloc/malloc.o
@


1.14
log
@* Makefile.common (LIBGCC): Find libstdc++.a as well as libc.a since builtin
functions are in this library in newer gcc's.
@
text
@d14 2
a15 2
MALLOC_DEBUG:=#-DMALLOC_DEBUG -I/cygnus/src/uberbaum/winsup/cygwin/dlmalloc
MALLOC_OBJ:=#/cygnus/src/uberbaum/winsup/cygwin/dlmalloc/malloc.o
@


1.13
log
@* Makefile.common: Extend VERBOSE default.
* Makefile.in: Don't clean the testsuite separately.  It's already part of
CLEAN_SUBDIRS.
@
text
@d88 2
a89 2
LIBGCC:=${subst \,/,${shell $(CC_FOR_TARGET) -print-libgcc-file-name}}
GCC_INCLUDE:=${dir $(LIBGCC)}/include
@


1.12
log
@* Makefile.common: Default to VERBOSE when part of overall source
tree build.
@
text
@d14 2
a15 2
MALLOC_DEBUG:=#-DMALLOC_DEBUG -I/cygnus/src/sourceware/winsup/cygwin/dlmalloc
MALLOC_OBJ:=#/cygnus/src/sourceware/winsup/cygwin/dlmalloc/malloc.o
d106 4
@


1.11
log
@* Makefile.in: More normalization.
@
text
@d105 4
@


1.10
log
@* Makefile.in: Normalize 'pwd' based on location of winsup.
@
text
@d31 3
a33 3
dummy_pwd:=${word 1,${subst winsup/,winsup ,$(pwd)}}/foo
ifneq (,${filter-out /%,$(dummy_pwd)})
    bupdir:=..
a36 1
    bupdir:=${patsubst %:::,%,${patsubst %/:::,%,$(dir $(dummy_pwd)):::}}
@


1.9
log
@* Makefile.common: Add bupdir2 to reference above the i686-pc-cygwin directory.
@
text
@d31 2
a32 1
ifneq (,${filter-out /%,$(pwd)})
d37 1
a37 1
    bupdir:=${patsubst %:::,%,${patsubst %/:::,%,$(dir $(pwd)):::}}
@


1.8
log
@Minor change.
@
text
@d14 2
a15 2
MALLOC_DEBUG:=#-DMALLOC_DEBUG -I/cygnus/src/sourceware/winsup/dlmalloc
MALLOC_OBJ:=#/cygnus/src/sourceware/winsup/dlmalloc/malloc.o
d34 1
d41 5
@


1.7
log
@Minor change.
@
text
@d3 1
a3 1
# Copyright 2000 Cygnus Solutions.
@


1.6
log
@Minor change.
@
text
@a29 1

@


1.5
log
@* Makefile.common (%.o): further simplify, add "..." to make it
obvious it's an abbreviated command line.
@
text
@d14 2
a15 2
MALLOC_DEBUG:=#-DMALLOC_DEBUG -I/gotham/src/comp-tools/winsup/dlmalloc
MALLOC_OBJ:=#/gotham/src/comp-tools/winsup/dlmalloc/malloc.o
@


1.4
log
@* remove dependence on where pwd is
@
text
@d106 2
a107 2
	@@echo $(CC) $c $(CXXFLAGS) -o $(@@D)/$(*F)$o ${subst $(srcdir)/,,$<}; \
	$(COMPILE_CXX) -o $(@@D)/$(*F)$o $<
d114 2
a115 2
	@@echo $(CC) $c $(CFLAGS) -o $(@@D)/$(*F)$o ${subst $(srcdir)/,,$<}; \
	$(COMPILE_CC) -o $(@@D)/$(*F)$o $<
@


1.3
log
@* Makefile.common: Resolve srcdir to absolute path or it will confuse usages
when passed to submakes.  Eliminate vestigal use of MAKEOVERRIDES.
@
text
@d17 1
a17 1
override srcdir:=${shell cd $(srcdir); /bin/pwd}
@


1.2
log
@* Makefile.in: Work around MAKEOVERRIDES problem with older versions of make.
* Makefile.common: Ditto.
@
text
@d17 2
a18 1
ifeq (,${findstring /,$(srcdir)})
d32 1
a32 1
ifeq (,${findstring /,$(pwd)})
d119 1
a119 1
	@@$(MAKE) -C $(@@D) $(MAKEOVERRIDES) $(@@F)
d122 1
a122 1
	@@$(MAKE) --no-print-dir -C $(@@D) $(MAKEOVERRIDES) $(@@F)
@


1.1
log
@Initial revision
@
text
@d91 7
a97 1
unexport MAKEOVERRIDES
@


1.1.1.1
log
@import winsup-2000-02-17 snapshot
@
text
@@
