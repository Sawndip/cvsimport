head	1.4;
access;
symbols
	cygwin-1_7_35-release:1.4
	cygwin-1_7_34-release:1.4
	cygwin-1_7_33-release:1.4
	cygwin-1_7_32-release:1.4
	cygwin-1_7_31-release:1.4
	cygwin-1_7_30-release:1.4
	cygwin-1_7_29-release:1.4
	cygwin-1_7_29-release-branchpoint:1.4.0.12
	cygwin-1_7_28-release:1.4
	cygwin-1_7_27-release:1.4
	cygwin-1_7_26-release:1.4
	cygwin-1_7_25-release:1.4
	cygwin-1_7_24-release:1.4
	cygwin-1_7_23-release:1.4
	cygwin-1_7_22-release:1.4
	cygwin-1_7_21-release:1.4
	cygwin-1_7_20-release:1.4
	cygwin-1_7_19-release:1.4
	cygwin-64bit-postmerge:1.4
	cygwin-64bit-premerge-branch:1.4.0.10
	cygwin-64bit-premerge:1.4
	cygwin-1_7_18-release:1.4
	cygwin-1_7_17-release:1.4
	cygwin-64bit-branch:1.4.0.8
	cygwin-1_7_16-release:1.4
	cygwin-1_7_15-release:1.4
	cygwin-1_7_14_2-release:1.4
	cygwin-1_7_14-release:1.4
	cygwin-1_7_12-release:1.4
	cygwin-1_7_11-release:1.4
	cygwin-1_7_10-release:1.4
	cygwin-1_7_9-release:1.4
	cygwin-1_7_8-release:1.4
	cygwin-1_7_7-release:1.4
	cygwin-1_7_5-release:1.4
	cygwin-1_7_4-release:1.4
	cygwin-1_7_3-release:1.4
	cygwin-1_7_2-release:1.4
	cygwin-1_7_1-release:1.4
	cv-branch-2:1.4.0.6
	cr-0x5f1:1.4.0.4
	cv-branch:1.4.0.2
	cr-0x3b58:1.3.0.12
	cr-0x9e:1.3.0.10
	cr-0x9d:1.3.0.8
	corinna-01:1.3
	cr-0x9c:1.3.0.6
	cr-0x9b:1.3.0.4
	cr-0x99:1.3
	Z-emcb-cygwin_daemon:1.3.0.2
	w32api-2_2:1.3
	mingw-runtime-2_4:1.3
	cygnus_cvs_20020108_pre:1.1;
locks; strict;
comment	@ * @;


1.4
date	2006.03.23.15.52.16;	author cgf;	state Exp;
branches;
next	1.3;

1.3
date	2003.01.24.01.09.39;	author cgf;	state Exp;
branches;
next	1.2;

1.2
date	2003.01.23.21.21.28;	author cgf;	state Exp;
branches;
next	1.1;

1.1
date	2001.11.08.21.04.05;	author corinna;	state Exp;
branches;
next	;


desc
@@


1.4
log
@* winsup.api/checksignal.c (main): Add test for siginterrupt.
@
text
@#include <errno.h>
#include <signal.h>

#include "test.h"
#include "usctest.h"

const char *TCID = "checksignal";    	/* Test program identifier. */
int TST_TOTAL = 3;              /* Total number of test cases. */
extern int Tst_count;           /* Test Case counter for tst_* routines */

void
sig_handler (int signo)
{
  errno = EINVAL;
}

int
main ()
{
  int n, ret;
  int fds[2];
  char buf[10];
  struct sigaction act;
  int i;

  Tst_count = 0;

  /* Reset SA_RESTART flag. */
  while ((ret = sigaction (SIGALRM, NULL, &act)) == EINTR)
    ;
  if (ret)
    tst_brk (TBROK, NULL, NULL, "Get signal action structure");
  act.sa_flags &= ~SA_RESTART;
  while ((ret = sigaction (SIGALRM, &act, NULL)) == EINTR)
    ;
  if (ret)
    tst_brk (TBROK, NULL, NULL, "Reset SA_RESTART");

  for (i = 0; i < 2; i++)
    {
      if (pipe (fds) < 0)
	tst_brk (TBROK, NULL, NULL, "Create pipe");
      /* Set signal handler using signal(2) call... */
      if (signal (SIGALRM, sig_handler) < 0)
	tst_brk (TBROK, NULL, NULL, "Call signal() to install signal handler");
      /* ...and check if signal(2) sets SA_RESTART again. */
      while ((ret = sigaction (SIGALRM, NULL, &act)) == EINTR)
	;
      if (ret)
	tst_brk (TBROK, NULL, NULL, "Get signal action structure");
      tst_resm (act.sa_flags & SA_RESTART ? TPASS : TFAIL,
		"signal() sets SA_RESTART");

      const char *msg1, *msg2;
      if (i == 1)
	{
	  siginterrupt (SIGALRM, 1);
	  msg1 = "Reset SA_RESTART via siginterrupt";
	  msg2 = "Set EINTR on interrupted read() call via siginterrupt";
	}
      else
	{
	  /* Reset SA_RESTART flag again. */
	  act.sa_handler = sig_handler;
	  act.sa_flags &= ~SA_RESTART;
	  while ((ret = sigaction (SIGALRM, &act, NULL)) == EINTR)
	    ;
	  msg1 = "Reset SA_RESTART via sigaction";
	  msg2 = "Set EINTR on interrupted read() call via sigaction";
	}
      if (ret)
	tst_brk (TBROK, NULL, NULL, msg1);

      /* Start timer to force a SIGALRM. */
      alarm (1);

      /* Call read(2) to check if the EINTR errno is correctly preserved,
	 even if the signal handler routine changes errno. */
      n = read(fds[0], buf, 10);
      tst_resm (n < 0 && errno == EINTR ? TPASS : TFAIL, msg2);
      close (fds[0]);
      close (fds[1]);
    }

  /* Check if another errno is correctly returned (here EBADF). */
  n = read(fds[0], buf, 10);
  tst_resm (n < 0 && errno == EBADF ? TPASS : TFAIL,
  	    "Set EBADF on closed file descriptor");

  tst_exit ();
}
@


1.3
log
@Perform more C warning fixup on all C source files and headers.
@
text
@d24 1
a27 3
  if (pipe (fds) < 0)
    tst_brk (TBROK, NULL, NULL, "Create pipe");

d39 45
a83 27
  /* Set signal handler using signal(2) call... */
  if (signal (SIGALRM, sig_handler) < 0)
    tst_brk (TBROK, NULL, NULL, "Call signal() to install signal handler");
  /* ...and check if signal(2) sets SA_RESTART again. */
  while ((ret = sigaction (SIGALRM, NULL, &act)) == EINTR)
    ;
  if (ret)
    tst_brk (TBROK, NULL, NULL, "Get signal action structure");
  tst_resm (act.sa_flags & SA_RESTART ? TPASS : TFAIL,
	    "signal() sets SA_RESTART");

  /* Reset SA_RESTART flag again. */
  act.sa_handler = sig_handler;
  act.sa_flags &= ~SA_RESTART;
  while ((ret = sigaction (SIGALRM, &act, NULL)) == EINTR)
    ;
  if (ret)
    tst_brk (TBROK, NULL, NULL, "Reset SA_RESTART");

  /* Start timer to force a SIGALRM. */
  alarm (1);

  /* Call read(2) to check if the EINTR errno is correctly preserved,
     even if the signal handler routine changes errno. */
  n = read(fds[0], buf, 10);
  tst_resm (n < 0 && errno == EINTR ? TPASS : TFAIL,
	    "Set EINTR on interrupted read() call");
a85 1
  close (fds[0]);
@


1.2
log
@* libltp/include/test.h: Fix C warnings.
* winsup.api/checksignal.c: Ditto.
* winsup.api/crlf.c: Ditto.
* winsup.api/devzero.c: Ditto.
* winsup.api/iospeed.c: Ditto.
* winsup.api/mmaptest01.c: Ditto.
* winsup.api/mmaptest02.c: Ditto.
* winsup.api/mmaptest03.c: Ditto.
* winsup.api/mmaptest04.c: Ditto.
* winsup.api/nullgetcwd.c: Ditto.
* winsup.api/sigchld.c: Ditto.
* winsup.api/signal-into-win32-api.c: Ditto.
* winsup.api/systemcall.c: Ditto.
* winsup.api/waitpid.c: Ditto.
* winsup.api/pthread/mainthreadexits.c: Ditto.
* winsup.api/pthread/test.h: Ditto.
* winsup.api/pthread/threadidafterfork.c: Ditto.
* Makefile.in: Remove cygrun.exe from RUNTIME since it is built here now.
@
text
@a0 1
#include <stdio.h>
a1 2
#include <stdlib.h>
#include <unistd.h>
@


1.1
log
@        * checksignal.c: New testcase.
@
text
@d10 1
a10 1
char *TCID = "checksignal";    	/* Test program identifier. */
@

