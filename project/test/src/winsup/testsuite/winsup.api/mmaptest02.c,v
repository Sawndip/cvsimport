head	1.3;
access;
symbols
	cygwin-1_7_35-release:1.3
	cygwin-1_7_34-release:1.3
	cygwin-1_7_33-release:1.3
	cygwin-1_7_32-release:1.3
	cygwin-1_7_31-release:1.3
	cygwin-1_7_30-release:1.3
	cygwin-1_7_29-release:1.3
	cygwin-1_7_29-release-branchpoint:1.3.0.24
	cygwin-1_7_28-release:1.3
	cygwin-1_7_27-release:1.3
	cygwin-1_7_26-release:1.3
	cygwin-1_7_25-release:1.3
	cygwin-1_7_24-release:1.3
	cygwin-1_7_23-release:1.3
	cygwin-1_7_22-release:1.3
	cygwin-1_7_21-release:1.3
	cygwin-1_7_20-release:1.3
	cygwin-1_7_19-release:1.3
	cygwin-64bit-postmerge:1.3
	cygwin-64bit-premerge-branch:1.3.0.22
	cygwin-64bit-premerge:1.3
	cygwin-1_7_18-release:1.3
	cygwin-1_7_17-release:1.3
	cygwin-64bit-branch:1.3.0.20
	cygwin-1_7_16-release:1.3
	cygwin-1_7_15-release:1.3
	cygwin-1_7_14_2-release:1.3
	cygwin-1_7_14-release:1.3
	cygwin-1_7_12-release:1.3
	cygwin-1_7_11-release:1.3
	cygwin-1_7_10-release:1.3
	cygwin-1_7_9-release:1.3
	cygwin-1_7_8-release:1.3
	cygwin-1_7_7-release:1.3
	cygwin-1_7_5-release:1.3
	cygwin-1_7_4-release:1.3
	cygwin-1_7_3-release:1.3
	cygwin-1_7_2-release:1.3
	cygwin-1_7_1-release:1.3
	cv-branch-2:1.3.0.18
	cr-0x5f1:1.3.0.16
	cv-branch:1.3.0.14
	cr-0x3b58:1.3.0.12
	cr-0x9e:1.3.0.10
	cr-0x9d:1.3.0.8
	corinna-01:1.3
	cr-0x9c:1.3.0.6
	cr-0x9b:1.3.0.4
	cr-0x99:1.3
	Z-emcb-cygwin_daemon:1.3.0.2
	w32api-2_2:1.3
	mingw-runtime-2_4:1.3
	cygnus_cvs_20020108_pre:1.2
	Z-cygwin_daemon_merge-new_HEAD:1.2
	Z-cygwin_daemon_merge_HEAD:1.2
	cygwin_daemon:1.2.0.4;
locks; strict;
comment	@ * @;


1.3
date	2003.01.23.21.21.28;	author cgf;	state Exp;
branches;
next	1.2;

1.2
date	2001.05.21.09.03.38;	author corinna;	state Exp;
branches;
next	1.1;

1.1
date	2001.04.19.09.16.40;	author corinna;	state Exp;
branches;
next	;


desc
@@


1.3
log
@* libltp/include/test.h: Fix C warnings.
* winsup.api/checksignal.c: Ditto.
* winsup.api/crlf.c: Ditto.
* winsup.api/devzero.c: Ditto.
* winsup.api/iospeed.c: Ditto.
* winsup.api/mmaptest01.c: Ditto.
* winsup.api/mmaptest02.c: Ditto.
* winsup.api/mmaptest03.c: Ditto.
* winsup.api/mmaptest04.c: Ditto.
* winsup.api/nullgetcwd.c: Ditto.
* winsup.api/sigchld.c: Ditto.
* winsup.api/signal-into-win32-api.c: Ditto.
* winsup.api/systemcall.c: Ditto.
* winsup.api/waitpid.c: Ditto.
* winsup.api/pthread/mainthreadexits.c: Ditto.
* winsup.api/pthread/test.h: Ditto.
* winsup.api/pthread/threadidafterfork.c: Ditto.
* Makefile.in: Remove cygrun.exe from RUNTIME since it is built here now.
@
text
@#include <sys/types.h>
#include <sys/mman.h>
#include <unistd.h>
#include <fcntl.h>
#include <signal.h>
#include <setjmp.h>
#include <stdlib.h>
#include <stdio.h>
#include <errno.h>
#include <string.h>

sigset_t unblock_sigsegv;
jmp_buf r;
size_t pg;

int fd;

/* Checks behaviour of anonymous mmap.

   test_1: If we map a 2-page region and unmap its second page, the first page
   must remain.

   test_2: If we map a 2-page region and unmap its first page, the second
   page must remain.

   test_3: If we map two consecutive 1-page regions and unmap them both with
   one munmap, both must go away.
*/

void
perror_exit (const char *str, int code)
{
  printf ("%s: %s\n", str, strerror (errno));
  exit (code);
}

void
anonmap_init ()
{
  sigemptyset (&unblock_sigsegv);
  sigaddset (&unblock_sigsegv, SIGSEGV);
  pg = getpagesize ();
  fd = open ("/dev/zero", O_RDWR);
}

char *
anonmap (size_t size)
{
  return (char *) mmap (0, size, PROT_READ|PROT_WRITE, MAP_PRIVATE, fd, 0);
}

void
anonfree (char *loc, size_t size)
{
  munmap (loc, size);
}
     
void
sigsegv (int unused)
{
  sigprocmask (SIG_UNBLOCK, &unblock_sigsegv, 0);
  longjmp (r, 1);
}

int
compare_pointers (const void *a, const void *b)
{
  const char *x = *(const char *const *)a;
  const char *y = *(const char *const *)b;

  if (x > y)
    return 1;
  if (x < y)
    return -1;
  return 0;
}

void
test_1 ()
{
  char *x = anonmap (pg * 2);
  if (x == (char *)MAP_FAILED)
    perror_exit ("test 1 mmap", 1);

  signal (SIGSEGV, sigsegv);
  if (setjmp (r))
    perror_exit ("test 1 fault", 2);

  x[0] = 1;
  x[pg] = 1;

  anonfree (x + pg, pg);
  x[0] = 2;

  if (setjmp (r) == 0)
    {
      x[pg] = 1;
      perror_exit ("test 1 no fault", 3);
    }
}

void
test_2 ()
{
  char *x = anonmap (pg * 2);
  if (x == (char *)MAP_FAILED)
    perror_exit ("test 2 mmap", 4);

  signal (SIGSEGV, sigsegv);
  if (setjmp (r))
    perror_exit ("test 2 fault", 5);

  x[0] = 1;
  x[pg] = 1;

  anonfree (x, pg);
  x[pg] = 2;

  if (setjmp (r) == 0)
    {
      x[0] = 1;
      perror_exit ("test 2 no fault", 6);
    }
}

void
test_3 ()
{
  char *x[10];
  char *y;
  int i;

  /* There's no way to guarantee we get consecutive pages from the OS.  The
     approach taken here is to allocate ten of them, sort the list, and
     look for consecutive pages.  */
  for (i = 0; i < 10; i++)
    {
      x[i] = anonmap (pg);
      if (x[i] == (char *)MAP_FAILED)
	perror_exit ("test 3 mmap 1", 7);
    }
  qsort (x, 10, sizeof (char *), compare_pointers);

  y = 0;
  for (i = 0; i < 9; i++)
    if (x[i] + pg == x[i+1])
      {
	y = x[i];
	break;
      }
  if (y == 0)
    {
      fputs ("test 3: couldn't get two consecutive pages, giving up\n", stdout);
      exit (65);
    }
  
  signal (SIGSEGV, sigsegv);
  if (setjmp (r))
    perror_exit ("test 3 fault", 8);

  y[0] = 1;
  y[pg] = 1;

  anonfree (y, pg * 2);

  if (setjmp (r) == 0)
    {
      y[0] = 1;
      perror_exit ("test 3 no fault 1", 9);
    }
  
  signal (SIGSEGV, sigsegv);
  if (setjmp (r) == 0)
    {
      y[pg] = 1;
      perror_exit ("test 3 no fault 2", 10);
    }
}

int
main ()
{
  anonmap_init();

  test_1();
  test_2();
  test_3();

  exit(0);
}
@


1.2
log
@        * winsup.api/mmaptest01.c: Add log output.
        * winsup.api/mmaptest02.c: Write log output to stdout.
        * winsup.api/mmaptest03.c: Ditto.
@
text
@d10 1
d31 1
a31 1
perror_exit (char *str, int code)
@


1.1
log
@        * winsup.api/mmaptest02.c: New test.
        * winsup.api/mmaptest03.c: Ditto.
        * winsup.api/mmaptest04.c: Ditto.
@
text
@d32 1
a32 1
  perror (str);
d152 1
a152 1
      fputs ("test 3: couldn't get two consecutive pages, giving up\n", stderr);
@

