head	1.7;
access;
symbols
	cygwin-1_7_35-release:1.7
	cygwin-1_7_34-release:1.7
	cygwin-1_7_33-release:1.7
	cygwin-1_7_32-release:1.7
	cygwin-1_7_31-release:1.7
	cygwin-1_7_30-release:1.7
	cygwin-1_7_29-release:1.7
	cygwin-1_7_29-release-branchpoint:1.7.0.14
	cygwin-1_7_28-release:1.7
	cygwin-1_7_27-release:1.7
	cygwin-1_7_26-release:1.7
	cygwin-1_7_25-release:1.7
	cygwin-1_7_24-release:1.7
	cygwin-1_7_23-release:1.7
	cygwin-1_7_22-release:1.7
	cygwin-1_7_21-release:1.7
	cygwin-1_7_20-release:1.7
	cygwin-1_7_19-release:1.7
	cygwin-64bit-postmerge:1.7
	cygwin-64bit-premerge-branch:1.7.0.12
	cygwin-64bit-premerge:1.7
	cygwin-1_7_18-release:1.7
	cygwin-1_7_17-release:1.7
	cygwin-64bit-branch:1.7.0.10
	cygwin-1_7_16-release:1.7
	cygwin-1_7_15-release:1.7
	cygwin-1_7_14_2-release:1.7
	cygwin-1_7_14-release:1.7
	cygwin-1_7_12-release:1.7
	cygwin-1_7_11-release:1.7
	cygwin-1_7_10-release:1.7
	cygwin-1_7_9-release:1.7
	cygwin-1_7_8-release:1.7
	cygwin-1_7_7-release:1.7
	cygwin-1_7_5-release:1.7
	cygwin-1_7_4-release:1.7
	cygwin-1_7_3-release:1.7
	cygwin-1_7_2-release:1.7
	cygwin-1_7_1-release:1.7
	cv-branch-2:1.7.0.8
	cr-0x5f1:1.7.0.6
	cv-branch:1.7.0.4
	cr-0x3b58:1.7.0.2
	cr-0x9e:1.6.0.10
	cr-0x9d:1.6.0.8
	corinna-01:1.6
	cr-0x9c:1.6.0.6
	cr-0x9b:1.6.0.4
	cr-0x99:1.6
	Z-emcb-cygwin_daemon:1.6.0.2
	w32api-2_2:1.5
	mingw-runtime-2_4:1.5
	cygnus_cvs_20020108_pre:1.3
	Z-cygwin_daemon_merge-new_HEAD:1.2
	Z-cygwin_daemon_merge_HEAD:1.2
	cygwin_daemon:1.2.0.4;
locks; strict;
comment	@ * @;


1.7
date	2004.08.24.09.58.16;	author corinna;	state Exp;
branches;
next	1.6;

1.6
date	2003.02.20.11.22.17;	author corinna;	state Exp;
branches;
next	1.5;

1.5
date	2003.01.24.01.09.39;	author cgf;	state Exp;
branches;
next	1.4;

1.4
date	2003.01.23.21.21.28;	author cgf;	state Exp;
branches;
next	1.3;

1.3
date	2001.10.08.12.18.38;	author corinna;	state Exp;
branches;
next	1.2;

1.2
date	2001.05.21.09.03.38;	author corinna;	state Exp;
branches;
next	1.1;

1.1
date	2001.04.03.08.39.21;	author corinna;	state Exp;
branches;
next	;


desc
@@


1.7
log
@	* winsup.api/mmaptest01.c (main): Accomodate 9x memory usage.
@
text
@/*
  Copyright 2001 Free Software Foundation, Inc.
  Written by Michael Chastain, <chastain@@redhat.com>
  Changes by Corinna Vinschen, <corinna@@vinschen.de>:
  - Using mkstemp to generate filenames.
  - Adding tests

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place - Suite 330,
  Boston, MA 02111-1307, USA.

  This program demonstrates a bug in cygwin's mmap.
  I open one file, mmap it, and close it.
  I open a different file, mmap it, and close it.

  The second file re-uses the file handle (which is OK),
  but then it re-uses the buffer as well!  Ouch!

  This bug occurs on cygwin1.dll dated 2001-01-31.
  It causes gnu cpp to screw up its include file buffers.

  Compile with "gcc -o y1 y1.c".

  Output from a bad cygwin1.dll:

    y1.txt: 3 0x4660000 y1 y1 y1 y1 y1 y1 y1
    y2.txt: 3 0x4660000 y1 y1 y1 y1 y1 y1 y1

  Output from a good cygwin1.dll:

    y1.txt: 3 0x14060000 y1 y1 y1 y1 y1 y1 y1
    y2.txt: 3 0x14070000 y2 y2 y2 y2 y2 y2 y2

  Output from Red Hat Linux 7:

    y1.txt: 3 0x40017000 y1 y1 y1 y1 y1 y1 y1
    y2.txt: 3 0x40018000 y2 y2 y2 y2 y2 y2 y2
 */

#include <sys/mman.h>
#include <fcntl.h>
#include <string.h>

#include "test.h"
#include "usctest.h"

const char *TCID = "mmaptest01";	/* Test program identifier. */
int TST_TOTAL = 7;		/* Total number of test cases. */
extern int Tst_count;		/* Test Case counter for tst_* routines */

/* some systems have O_BINARY and some do not */
#ifndef O_BINARY
#define O_BINARY 0
#endif

/* filler for file 1 */
char const line1 [] = "y1 y1 y1 y1 y1 y1 y1 y1 y1 y1 y1 y1 y1 y1 y1 y1 y1\n";
#define size1 (sizeof(line1) - 1)
#define count1 ((4096 / size1) + 1)

/* filler for file 2 */
char const line2 [] = "y2 y2 y2 y2 y2 y2 y2 y2 y2 y2 y2 y2 y2 y2 y2 y2 y2\n";
#define size2 (sizeof(line2) - 1)
#define count2 ((4096 / size2) + 1)

int main ()
{
  char fnam1[32];
  char fnam2[32];

  int fd1;
  char * buf1;

  int fd2;
  char * buf2;

  char buf3[20];

  unsigned i;

  strcpy (fnam1, "mmaptest01.1.XXXXXX");
  strcpy (fnam2, "mmaptest01.2.XXXXXX");

  /* create file 1 */
  //fd1  = open (fnam1, O_WRONLY|O_CREAT|O_TRUNC|O_BINARY, 0644);
  fd1 = mkstemp (fnam1);
  for (i = 0; i < count1; i++)
    write (fd1, line1, size1);
  close (fd1);

  /* create file 2 */
  //fd2  = open (fnam2, O_WRONLY|O_CREAT|O_TRUNC|O_BINARY, 0644);
  fd2 = mkstemp (fnam2);
  for (i = 0; i < count2; i++)
    write (fd2, line2, size2);
  close (fd2);

  /* mmap file 1 */
  fd1  = open (fnam1, O_RDONLY | O_BINARY, 0644);
  buf1 = mmap (0, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE, fd1, 0);
  close (fd1);

  /* mmap file 2 */
  fd2  = open (fnam2, O_RDONLY | O_BINARY, 0644);
  buf2 = mmap (0, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE, fd2, 0);
  close (fd2);

  /* the buffers have to be different */
  Tst_count = 0;
  tst_resm (buf1 == buf2 || !memcmp (buf1, buf2, 20) ? TFAIL : TPASS,
	"mmap uses unique buffers when mapping different already closed files");
  munmap (buf2, 4096);

  /* mmap file 1 twice with MAP_PRIVATE */
  fd2  = open (fnam1, O_RDONLY | O_BINARY, 0644);
  buf2 = mmap (0, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE, fd2, 0);
  close (fd2);

  tst_resm (buf1 == buf2 ? TFAIL : TPASS,
	    "mmap uses different buffers on MAP_PRIVATE mapping");

  tst_resm (memcmp (buf1, buf2, 20) ? TFAIL : TPASS,
	    "two private buffers of the same file are identical");

  buf1[0] = 0x7f;
  tst_resm (!memcmp (buf1, buf2, 20) ? TFAIL : TPASS,
	    "changes are private in MAP_PRIVATE mappings");

  munmap (buf1, 4096);
  munmap (buf2, 4096);

  /* mmap file 1 twice with MAP_SHARED */
  fd1  = open (fnam1, O_RDWR | O_BINARY, 0644);
  buf1 = mmap (0, 4096, PROT_READ|PROT_WRITE, MAP_SHARED, fd1, 0);
  close (fd1);

  fd2  = open (fnam1, O_RDWR | O_BINARY, 0644);
  buf2 = mmap (0, 4096, PROT_READ|PROT_WRITE, MAP_SHARED, fd2, 0);
  close (fd2);

  tst_resm (memcmp (buf1, buf2, 20) ? TFAIL : TPASS,
	    "two shared buffers of the same file are identical");

  buf1[0] = 0x7f;
  tst_resm (memcmp (buf1, buf2, 20) ? TFAIL : TPASS,
	    "changes are shared between MAP_SHARED mappings of the same file");
  if (buf1 == buf2) /* Win 9x weirdness */
    msync (buf2, 4096, MS_SYNC);
  else
    munmap (buf2, 4096);

  fd2  = open (fnam1, O_RDWR | O_BINARY, 0644);
  memset (buf3, 0, 20);
  read (fd2, buf3, 20);
  close (fd2);

  tst_resm (memcmp (buf1, buf3, 20) ? TFAIL : TPASS,
	    "changes are propagated to the mapped file on MAP_SHARED mapping");

  munmap (buf1, 4096);
  unlink (fnam1);
  unlink (fnam2);
  tst_exit ();
}

@


1.6
log
@	* winsup.api/crlf.c: Fix C signed/unsigned compare warning.
	* winsup.api/mmaptest01.c: Ditto.
	* winsup.api/ltp/chmod01.c: Ditto.
	* winsup.api/ltp/fork04.c: Ditto.
	* winsup.api/ltp/lseek03.c: Ditto.
	* winsup.api/ltp/lseek06.c: Ditto.
	* winsup.api/ltp/lseek07.c: Ditto.
	* winsup.api/ltp/lseek08.c: Ditto.
	* winsup.api/ltp/mmap001.c: Ditto.
	* winsup.api/ltp/mmap02.c: Ditto.
	* winsup.api/ltp/mmap03.c: Ditto.
	* winsup.api/ltp/mmap04.c: Ditto.
	* winsup.api/ltp/mmap05.c: Ditto.
	* winsup.api/ltp/mmap06.c: Ditto.
	* winsup.api/ltp/mmap07.c: Ditto.
	* winsup.api/ltp/mmap08.c: Ditto.
	* winsup.api/ltp/pipe11.c: Ditto.
	* winsup.api/ltp/poll01.c: Ditto.
	* winsup.api/ltp/sync02.c: Ditto.
	* winsup.api/ltp/times03.c: Ditto.
	* winsup.api/ltp/umask03.c: Ditto.
	* winsup.api/ltp/getpgid01.c: Remove unused obsolete include.
	* winsup.api/ltp/getpgid02.c: Ditto.
@
text
@d158 4
a161 1
  munmap (buf2, 4096);
@


1.5
log
@Perform more C warning fixup on all C source files and headers.
@
text
@d90 1
a90 1
  int i;
@


1.4
log
@* libltp/include/test.h: Fix C warnings.
* winsup.api/checksignal.c: Ditto.
* winsup.api/crlf.c: Ditto.
* winsup.api/devzero.c: Ditto.
* winsup.api/iospeed.c: Ditto.
* winsup.api/mmaptest01.c: Ditto.
* winsup.api/mmaptest02.c: Ditto.
* winsup.api/mmaptest03.c: Ditto.
* winsup.api/mmaptest04.c: Ditto.
* winsup.api/nullgetcwd.c: Ditto.
* winsup.api/sigchld.c: Ditto.
* winsup.api/signal-into-win32-api.c: Ditto.
* winsup.api/systemcall.c: Ditto.
* winsup.api/waitpid.c: Ditto.
* winsup.api/pthread/mainthreadexits.c: Ditto.
* winsup.api/pthread/test.h: Ditto.
* winsup.api/pthread/threadidafterfork.c: Ditto.
* Makefile.in: Remove cygrun.exe from RUNTIME since it is built here now.
@
text
@a52 2
#include <stdio.h>
#include <stdlib.h>
@


1.3
log
@	* winsup.api/mmaptest01.c: Add several tests on mmaps.  Use libltp.
	* winsup.api/winsup.exp: Link all tests agains libltp.
@
text
@d55 1
d60 1
a60 1
char *TCID = "mmaptest01";	/* Test program identifier. */
a80 2
  int ret = 0;

@


1.2
log
@        * winsup.api/mmaptest01.c: Add log output.
        * winsup.api/mmaptest02.c: Write log output to stdout.
        * winsup.api/mmaptest03.c: Ditto.
@
text
@d4 3
d56 7
d80 5
d91 2
d95 3
d99 2
a100 1
  fd1  = open ("y1.txt", O_WRONLY|O_CREAT|O_TRUNC|O_BINARY, 0644);
d106 2
a107 1
  fd2  = open ("y2.txt", O_WRONLY|O_CREAT|O_TRUNC|O_BINARY, 0644);
d113 2
a114 2
  fd1  = open ("y1.txt", O_RDONLY | O_BINARY, 0644);
  buf1 = mmap (0, 4096, PROT_READ, MAP_PRIVATE, fd1, 0);
d118 2
a119 2
  fd2  = open ("y2.txt", O_RDONLY | O_BINARY, 0644);
  buf2 = mmap (0, 4096, PROT_READ, MAP_PRIVATE, fd2, 0);
d123 47
a169 5
  if (buf1 == buf2 || !memcmp (buf1, buf2, 20))
    {
      printf ("buffers are not different!\n");
      return 1;
    }
d171 4
a174 1
  return 0;
@


1.1
log
@        * winsup.api/mmaptest01.c: New test.
@
text
@d102 4
a105 1
    return 1;
@

