head	1.3;
access;
symbols
	cygwin-1_7_35-release:1.3
	cygwin-1_7_34-release:1.3
	cygwin-1_7_33-release:1.3
	cygwin-1_7_32-release:1.3
	cygwin-1_7_31-release:1.3
	cygwin-1_7_30-release:1.3
	cygwin-1_7_29-release:1.3
	cygwin-1_7_29-release-branchpoint:1.3.0.24
	cygwin-1_7_28-release:1.3
	cygwin-1_7_27-release:1.3
	cygwin-1_7_26-release:1.3
	cygwin-1_7_25-release:1.3
	cygwin-1_7_24-release:1.3
	cygwin-1_7_23-release:1.3
	cygwin-1_7_22-release:1.3
	cygwin-1_7_21-release:1.3
	cygwin-1_7_20-release:1.3
	cygwin-1_7_19-release:1.3
	cygwin-64bit-postmerge:1.3
	cygwin-64bit-premerge-branch:1.3.0.22
	cygwin-64bit-premerge:1.3
	cygwin-1_7_18-release:1.3
	cygwin-1_7_17-release:1.3
	cygwin-64bit-branch:1.3.0.20
	cygwin-1_7_16-release:1.3
	cygwin-1_7_15-release:1.3
	cygwin-1_7_14_2-release:1.3
	cygwin-1_7_14-release:1.3
	cygwin-1_7_12-release:1.3
	cygwin-1_7_11-release:1.3
	cygwin-1_7_10-release:1.3
	cygwin-1_7_9-release:1.3
	cygwin-1_7_8-release:1.3
	cygwin-1_7_7-release:1.3
	cygwin-1_7_5-release:1.3
	cygwin-1_7_4-release:1.3
	cygwin-1_7_3-release:1.3
	cygwin-1_7_2-release:1.3
	cygwin-1_7_1-release:1.3
	cv-branch-2:1.3.0.18
	cr-0x5f1:1.3.0.16
	cv-branch:1.3.0.14
	cr-0x3b58:1.3.0.12
	cr-0x9e:1.3.0.10
	cr-0x9d:1.3.0.8
	corinna-01:1.3
	cr-0x9c:1.3.0.6
	cr-0x9b:1.3.0.4
	cr-0x99:1.3
	Z-emcb-cygwin_daemon:1.3.0.2
	w32api-2_2:1.3
	mingw-runtime-2_4:1.3
	cygnus_cvs_20020108_pre:1.2
	Z-cygwin_daemon_merge-new_HEAD:1.2
	Z-cygwin_daemon_merge_HEAD:1.2
	cygwin_daemon:1.2.0.6;
locks; strict;
comment	@ * @;


1.3
date	2003.01.23.21.21.28;	author cgf;	state Exp;
branches;
next	1.2;

1.2
date	2001.04.27.10.46.49;	author corinna;	state Exp;
branches;
next	1.1;

1.1
date	2001.04.19.09.16.40;	author corinna;	state Exp;
branches;
next	;


desc
@@


1.3
log
@* libltp/include/test.h: Fix C warnings.
* winsup.api/checksignal.c: Ditto.
* winsup.api/crlf.c: Ditto.
* winsup.api/devzero.c: Ditto.
* winsup.api/iospeed.c: Ditto.
* winsup.api/mmaptest01.c: Ditto.
* winsup.api/mmaptest02.c: Ditto.
* winsup.api/mmaptest03.c: Ditto.
* winsup.api/mmaptest04.c: Ditto.
* winsup.api/nullgetcwd.c: Ditto.
* winsup.api/sigchld.c: Ditto.
* winsup.api/signal-into-win32-api.c: Ditto.
* winsup.api/systemcall.c: Ditto.
* winsup.api/waitpid.c: Ditto.
* winsup.api/pthread/mainthreadexits.c: Ditto.
* winsup.api/pthread/test.h: Ditto.
* winsup.api/pthread/threadidafterfork.c: Ditto.
* Makefile.in: Remove cygrun.exe from RUNTIME since it is built here now.
@
text
@#include <sys/types.h>
#include <fcntl.h>
#include <sys/mman.h>
#include <errno.h>
#include <stdlib.h>
#include <unistd.h>
#include <stdio.h>

#ifndef O_BINARY
#define O_BINARY 0
#endif

int
main ()
{
  char *data, *data2 = NULL, *data3;
  int i, pagesize;
  int fd;

  pagesize = 65536;		//getpagesize();

  /*
   * First, make a file with some known garbage in it.
   */
  data = (char *) malloc (pagesize);
  if (!data)
    exit (1);
  for (i = 0; i < pagesize; ++i)
    *(data + i) = rand ();
  umask (0);
  fd = open ("conftestmmap", O_CREAT | O_TRUNC | O_WRONLY | O_BINARY, 0600);
  if (fd < 0)
    {
      printf ("creat: %d\n", errno);
      exit (1);
    }
  if (write (fd, data, pagesize) != pagesize)
    {
      printf ("write: %d\n", errno);
      exit (1);
    }
  close (fd);

  /*
   * Next, try to mmap the file.
   */
  fd = open ("conftestmmap", O_RDWR | O_BINARY);
  if (fd < 0)
    {
      printf ("write: %d\n", errno);
      exit (1);
    }
  if ((data2 = mmap (data2, pagesize, PROT_READ | PROT_WRITE,
		     MAP_PRIVATE, fd, 0L)) == MAP_FAILED)
    {
      printf ("mmap: %d\n", errno);
      exit (1);
    }
  for (i = 0; i < pagesize; ++i)
    if (*(data + i) != *(data2 + i))
      {
	printf ("check-if: %d\n", errno);
	exit (1);
      }

  /*
   * Finally, make sure that changes to the mapped area
   * do not percolate back to the file as seen by read().
   * (This is a bug on some variants of i386 svr4.0.)
   */
  for (i = 0; i < pagesize; ++i)
    *(data2 + i) = *(data2 + i) + 1;
  data3 = (char *) malloc (pagesize);
  if (!data3)
    {
      printf ("malloc2: %d\n", errno);
      exit (1);
    }
  if (read (fd, data3, pagesize) != pagesize)
    {
      printf ("read: %d\n", errno);
      exit (1);
    }
  for (i = 0; i < pagesize; ++i)
    if (*(data + i) != *(data3 + i))
      {
	printf ("check-if2: %d\n", errno);
	exit (1);
      }
  if (msync (data2, pagesize, MS_SYNC))
    {
      printf ("msync: %d\n", errno);
      exit (1);
    }
  if (munmap (data2, pagesize))
    {
      printf ("munmap: %d\n", errno);
      exit (1);
    }
  close (fd);
  unlink ("conftestmmap");
  exit (0);
}
@


1.2
log
@        * winsup.api/mmaptest04.c: Take care for binmode explicitely.
@
text
@d5 3
d16 1
a16 1
  char *data, *data2, *data3;
@


1.1
log
@        * winsup.api/mmaptest02.c: New test.
        * winsup.api/mmaptest03.c: Ditto.
        * winsup.api/mmaptest04.c: Ditto.
@
text
@d6 4
d28 1
a28 1
  fd = creat ("conftestmmap", 0600);
d44 1
a44 1
  fd = open ("conftestmmap", O_RDWR);
@

