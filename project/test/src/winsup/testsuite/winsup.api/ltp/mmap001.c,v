head	1.3;
access;
symbols
	cygwin-1_7_35-release:1.3
	cygwin-1_7_34-release:1.3
	cygwin-1_7_33-release:1.3
	cygwin-1_7_32-release:1.3
	cygwin-1_7_31-release:1.3
	cygwin-1_7_30-release:1.3
	cygwin-1_7_29-release:1.3
	cygwin-1_7_29-release-branchpoint:1.3.0.24
	cygwin-1_7_28-release:1.3
	cygwin-1_7_27-release:1.3
	cygwin-1_7_26-release:1.3
	cygwin-1_7_25-release:1.3
	cygwin-1_7_24-release:1.3
	cygwin-1_7_23-release:1.3
	cygwin-1_7_22-release:1.3
	cygwin-1_7_21-release:1.3
	cygwin-1_7_20-release:1.3
	cygwin-1_7_19-release:1.3
	cygwin-64bit-postmerge:1.3
	cygwin-64bit-premerge-branch:1.3.0.22
	cygwin-64bit-premerge:1.3
	cygwin-1_7_18-release:1.3
	cygwin-1_7_17-release:1.3
	cygwin-64bit-branch:1.3.0.20
	cygwin-1_7_16-release:1.3
	cygwin-1_7_15-release:1.3
	cygwin-1_7_14_2-release:1.3
	cygwin-1_7_14-release:1.3
	cygwin-1_7_12-release:1.3
	cygwin-1_7_11-release:1.3
	cygwin-1_7_10-release:1.3
	cygwin-1_7_9-release:1.3
	cygwin-1_7_8-release:1.3
	cygwin-1_7_7-release:1.3
	cygwin-1_7_5-release:1.3
	cygwin-1_7_4-release:1.3
	cygwin-1_7_3-release:1.3
	cygwin-1_7_2-release:1.3
	cygwin-1_7_1-release:1.3
	cv-branch-2:1.3.0.18
	cr-0x5f1:1.3.0.16
	cv-branch:1.3.0.14
	cr-0x3b58:1.3.0.12
	cr-0x9e:1.3.0.10
	cr-0x9d:1.3.0.8
	corinna-01:1.3
	cr-0x9c:1.3.0.6
	cr-0x9b:1.3.0.4
	cr-0x99:1.3
	Z-emcb-cygwin_daemon:1.3.0.2
	w32api-2_2:1.2
	mingw-runtime-2_4:1.2
	cygnus_cvs_20020108_pre:1.1
	Z-cygwin_daemon_merge-new_HEAD:1.1
	Z-cygwin_daemon_merge_HEAD:1.1
	cygwin_daemon:1.1.0.4;
locks; strict;
comment	@ * @;


1.3
date	2003.02.20.11.22.17;	author corinna;	state Exp;
branches;
next	1.2;

1.2
date	2003.01.24.01.09.39;	author cgf;	state Exp;
branches;
next	1.1;

1.1
date	2001.09.09.13.38.17;	author duda;	state Exp;
branches;
next	;


desc
@@


1.3
log
@	* winsup.api/crlf.c: Fix C signed/unsigned compare warning.
	* winsup.api/mmaptest01.c: Ditto.
	* winsup.api/ltp/chmod01.c: Ditto.
	* winsup.api/ltp/fork04.c: Ditto.
	* winsup.api/ltp/lseek03.c: Ditto.
	* winsup.api/ltp/lseek06.c: Ditto.
	* winsup.api/ltp/lseek07.c: Ditto.
	* winsup.api/ltp/lseek08.c: Ditto.
	* winsup.api/ltp/mmap001.c: Ditto.
	* winsup.api/ltp/mmap02.c: Ditto.
	* winsup.api/ltp/mmap03.c: Ditto.
	* winsup.api/ltp/mmap04.c: Ditto.
	* winsup.api/ltp/mmap05.c: Ditto.
	* winsup.api/ltp/mmap06.c: Ditto.
	* winsup.api/ltp/mmap07.c: Ditto.
	* winsup.api/ltp/mmap08.c: Ditto.
	* winsup.api/ltp/pipe11.c: Ditto.
	* winsup.api/ltp/poll01.c: Ditto.
	* winsup.api/ltp/sync02.c: Ditto.
	* winsup.api/ltp/times03.c: Ditto.
	* winsup.api/ltp/umask03.c: Ditto.
	* winsup.api/ltp/getpgid01.c: Remove unused obsolete include.
	* winsup.api/ltp/getpgid02.c: Ditto.
@
text
@/*
 * mmap001.c - Tests mmapping a big file and writing it once
 *
 * Copyright (C) 2000 Juan Quintela <quintela@@fi.udc.es>
 *                    Aaron Laffin <alaffin@@sgi.com>
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <sys/mman.h>
#include <errno.h>
#include <string.h>

#include "test.h"
#include "usctest.h"

const char *TCID="mmap001";
int TST_TOTAL=5;
extern int Tst_count;
static char *filename=NULL;
static int m_opt = 0;
static char *m_copt;

void cleanup()
{
  /*
   * remove the tmp directory and exit
   */

  if ( filename )
    free(filename);

  TEST_CLEANUP;

  tst_rmdir();

  tst_exit();
}

void setup()
{
  char buf[1024];
  /*
   * setup a default signal hander and a
   * temporary working directory.
   */
  tst_sig(FORK, DEF_HANDLER, cleanup);

  tst_tmpdir();

  TEST_PAUSE;

  snprintf(buf,1024,"testfile.%d",getpid());

  filename = strdup(buf);
}

void help()
{
  printf("  -m x    size of mmap in pages (default 1000)\n");
}

/*
 * add the -m option whose parameter is the
 * pages that should be mapped.
 */
option_t options[] = 
{
  { "m:", &m_opt, &m_copt },
  { NULL, NULL, NULL }
};

int main(int argc, char * argv[])
{
  char *array;
  const char *msg;
  int i,lc;
  int fd;
  int pages,memsize;

  if ( (msg=parse_opts(argc, argv, options, help)) != (char *) NULL )
   tst_brkm(TBROK, cleanup, "OPTION PARSING ERROR - %s", msg);

  if ( m_opt )
  {
    memsize = pages = atoi( m_copt );

    if (memsize < 1)
    {
      tst_brkm(TBROK, cleanup, "Invalid arg for -m: %s",m_copt);
    }

    memsize *= getpagesize(); /* N PAGES */

  }
  else
  {
    /*
     * default size 1000 pages;
     */
    memsize = pages = 1000;
    memsize *= getpagesize();
  }

  tst_resm(TINFO,"mmap()ing file of %u pages or %u bytes", pages,memsize);

  setup();

  for (lc=0; TEST_LOOPING(lc); lc++)
  {
    Tst_count=0;

    fd = open(filename, O_RDWR | O_CREAT, 0666);
    if ((fd == -1))
      tst_brkm(TBROK, cleanup, "Problems opening files");
        
    if (lseek(fd, memsize, SEEK_SET) != memsize)
    {
      close(fd);
      tst_brkm(TBROK, cleanup, "Problems doing the lseek: %d: %s",
          errno,strerror(errno));
    }

    if (write(fd,"\0",1) !=1)
    {
      close(fd);
      tst_brkm(TBROK, cleanup, "Problems writing: %d: %s",
        errno,strerror(errno));
    }
 
    array = mmap(0, memsize, PROT_WRITE, MAP_SHARED,fd,0);
    if (array == (char *)MAP_FAILED)
    {
      tst_resm(TFAIL, "mmap() failed: %d: %s",
        errno,strerror(errno));
      tst_exit();
    }
    else
    {
      tst_resm(TPASS, "mmap() completed successfully.");
    }

    if ( STD_FUNCTIONAL_TEST )
    {
      tst_resm(TINFO,"touching mmaped memory");

      for(i = 0; i < memsize; i++)
      {
       array[i] = (char) i;
      } 
 
      /*
      * seems that if the map area was bad, we'd get SEGV, hence we can
      * indicate a PASS.
      */
      tst_resm(TPASS, "we're still here, mmaped area must be good");

      TEST( msync(array, memsize, MS_SYNC) );

      if ( TEST_RETURN == -1 )
      {
        tst_resm(TFAIL, "msync() failed: errno: %d: %s",
          TEST_ERRNO, strerror(TEST_ERRNO));
      }
      else
      {
        tst_resm(TPASS, "msync() was successful");
      }

    } /* STD_FUNCTIONAL_TEST */

    TEST( munmap(array, memsize) );

    if ( TEST_RETURN == -1 )
    {
      tst_resm(TFAIL, "munmap() failed: errno: %d: %s",
        TEST_ERRNO, strerror(TEST_ERRNO));
    }
    else
    {
      tst_resm(TPASS, "munmap() was successful");
    }

    close(fd);
    unlink(filename);
  }
  cleanup();
  return 0;
}
@


1.2
log
@Perform more C warning fixup on all C source files and headers.
@
text
@d93 1
a93 1
  unsigned int pages,memsize;
@


1.1
log
@* winsup.api/ltp/dup03.c: New test.
* winsup.api/ltp/lseek03.c: Ditto.
* winsup.api/ltp/mmap001.c: Ditto.
* winsup.api/ltp/read01.c: Ditto.
* winsup.api/ltp/readdir01.c: Ditto.
* winsup.api/ltp/rmdir05.c: Ditto.
* winsup.api/ltp/sbrk01.c: Ditto.
* winsup.api/ltp/select02.c: Ditto.
* winsup.api/ltp/select03.c: Ditto.
* winsup.api/ltp/signal03.c: Ditto.
* winsup.api/ltp/stat06.c: Ditto.
* winsup.api/ltp/unlink08.c: Ditto.
* winsup.api/known_bugs.tcl: Update to reflect new test's known
failures.
* winsup.api/winsup.exp: Don't delete executable in case of
unexpected pass, as well as in case of unexpected failure.
* README: Update paragraph about expected failures.
@
text
@a24 3
#include <stdlib.h>
#include <stdio.h>
#include <unistd.h>
d31 1
a31 1
char *TCID="mmap001";
@

