head	1.7;
access;
symbols
	cygwin-1_7_35-release:1.7
	cygwin-1_7_34-release:1.7
	cygwin-1_7_33-release:1.7
	cygwin-1_7_32-release:1.7
	cygwin-1_7_31-release:1.7
	cygwin-1_7_30-release:1.7
	cygwin-1_7_29-release:1.7
	cygwin-1_7_29-release-branchpoint:1.7.0.14
	cygwin-1_7_28-release:1.7
	cygwin-1_7_27-release:1.7
	cygwin-1_7_26-release:1.7
	cygwin-1_7_25-release:1.7
	cygwin-1_7_24-release:1.7
	cygwin-1_7_23-release:1.7
	cygwin-1_7_22-release:1.7
	cygwin-1_7_21-release:1.7
	cygwin-1_7_20-release:1.7
	cygwin-1_7_19-release:1.7
	cygwin-64bit-postmerge:1.7
	cygwin-64bit-premerge-branch:1.7.0.12
	cygwin-64bit-premerge:1.7
	cygwin-1_7_18-release:1.7
	cygwin-1_7_17-release:1.7
	cygwin-64bit-branch:1.7.0.10
	cygwin-1_7_16-release:1.7
	cygwin-1_7_15-release:1.7
	cygwin-1_7_14_2-release:1.7
	cygwin-1_7_14-release:1.7
	cygwin-1_7_12-release:1.7
	cygwin-1_7_11-release:1.7
	cygwin-1_7_10-release:1.7
	cygwin-1_7_9-release:1.7
	cygwin-1_7_8-release:1.7
	cygwin-1_7_7-release:1.7
	cygwin-1_7_5-release:1.7
	cygwin-1_7_4-release:1.7
	cygwin-1_7_3-release:1.7
	cygwin-1_7_2-release:1.7
	cygwin-1_7_1-release:1.7
	cv-branch-2:1.7.0.8
	cr-0x5f1:1.7.0.6
	cv-branch:1.7.0.4
	cr-0x3b58:1.7.0.2
	cr-0x9e:1.4.0.10
	cr-0x9d:1.4.0.8
	corinna-01:1.4
	cr-0x9c:1.4.0.6
	cr-0x9b:1.4.0.4
	cr-0x99:1.4
	Z-emcb-cygwin_daemon:1.4.0.2
	w32api-2_2:1.4
	mingw-runtime-2_4:1.4
	cygnus_cvs_20020108_pre:1.2
	Z-cygwin_daemon_merge-new_HEAD:1.2
	Z-cygwin_daemon_merge_HEAD:1.2
	cygwin_daemon:1.2.0.4;
locks; strict;
comment	@ * @;


1.7
date	2005.10.11.18.36.36;	author cgf;	state Exp;
branches;
next	1.6;

1.6
date	2005.10.11.18.17.59;	author cgf;	state Exp;
branches;
next	1.5;

1.5
date	2005.02.10.17.48.30;	author cgf;	state Exp;
branches;
next	1.4;

1.4
date	2003.01.24.01.41.30;	author cgf;	state Exp;
branches;
next	1.3;

1.3
date	2003.01.23.21.21.28;	author cgf;	state Exp;
branches;
next	1.2;

1.2
date	2001.05.21.09.03.38;	author corinna;	state Exp;
branches;
next	1.1;

1.1
date	2001.04.19.09.16.40;	author corinna;	state Exp;
branches;
next	;


desc
@@


1.7
log
@revert erroneous checkin
@
text
@#include <stdio.h>
#include <stdlib.h>
#include <signal.h>
#include <setjmp.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/stat.h>
#include <sys/mman.h>
#include <sys/wait.h>
#include <errno.h>
#include <string.h>

/* - Checks if mapping of already closed file survives fork()
   - Checks if mapping the same region of the same file twice
     is done correctly.
*/

sigset_t unblock_sigsegv;
jmp_buf r;

static const char *msg;
static const char *what;
/* filler for file */
char const line[] = "y1 y1 y1 y1 y1 y1 y1 y1 y1 y1 y1 y1 y1 y1 y1 y1 y1";

void
perror_exit (const char *str)
{    
  printf ("%s: %s\n", str, strerror (errno));
  fflush (stdout);
  exit (1);
}

void
sigsegv (int unused)
{ 
  sigprocmask (SIG_UNBLOCK, &unblock_sigsegv, 0);
  if (msg)
    {
      char buf[132];
      sprintf (buf, "%s %s\n", what, msg);
      write (1, buf, strlen (buf));
      msg = NULL;
    }
  longjmp (r, 1);
}

int
main(int argc, char **argv)
{
  int fd, status;
  struct stat statbuf;
  volatile char c, *buf1, *buf2;
  pid_t pid;

  /* Create data file */
  if ((fd = open("y.txt", O_RDWR | O_CREAT | O_TRUNC, 0644)) == -1)
    perror_exit ("Can't create data file");
  write (fd, line, sizeof(line) - 1);
  close (fd);

  /* Open data file */
  if ((fd = open("y.txt", O_RDONLY)) == -1)
    perror_exit ("Can't open data file");

  if (fstat(fd, &statbuf) < 0)
    perror_exit ("fstat failed");

  if (!statbuf.st_size)
    perror_exit ("filesize is 0");

  if ((buf1 = mmap(NULL, statbuf.st_size, PROT_READ, MAP_SHARED, fd, 0))
      == MAP_FAILED)
    perror_exit ("mmap 1 failed");

  close(fd);

  /* Open data file a second time */
  if ((fd = open("y.txt", O_RDONLY)) == -1)
    perror_exit ("Can't open data file in second run");

  if ((buf2 = mmap(NULL, statbuf.st_size, PROT_READ, MAP_SHARED, fd, 0))
      == MAP_FAILED)
    perror_exit ("mmap 2 failed");

  close(fd);

  sigemptyset (&unblock_sigsegv);
  sigaddset (&unblock_sigsegv, SIGSEGV);
  signal (SIGSEGV, sigsegv);

  if (setjmp (r))
    perror_exit ("SEGV in fork");

  if ((pid = fork()))
    {
      // write (1, "continuing in parent\n", strlen ("continuing in parent\n"));
      what = "parent";
    }
  else
    {
      // write (1, "continuing in child\n", strlen ("continuing in child\n"));
      what = "child";
    }

  if (pid == -1)
    perror_exit ("fork failed");

  if (setjmp (r))
    perror_exit (pid ? "SEGV in parent" : "SEGV in child");

  msg = "testing buf1";
  c = buf1[0];
  msg = "testing buf2";
  c = buf2[0];

  if (setjmp (r))
    perror_exit (pid ? "SEGV in parent's munmap" : "SEGV in child's munmap");

  if (munmap((void *) buf1, statbuf.st_size))
    perror_exit (pid ? "munmap failed in parent" : "munmap failed in child");

  if (setjmp (r) == 0)
    {
      msg = "testing buf1 after unmap";
      c = buf1[0];
      perror_exit (pid ? "no SEGV in parent after munmap" : "no SEGV in child after munmap");
    }

  if (setjmp (r))
    perror_exit (pid ? "SEGV in parent after munmap" : "SEGV in child after munmap");

  msg = "testing buf2 again";
  c = buf2[0];

  if (setjmp (r))
    perror_exit (pid ? "SEGV in parent's munmap" : "SEGV in child's munmap");

  if (munmap((void *) buf2, statbuf.st_size))
    perror_exit (pid ? "munmap failed in parent" : "munmap failed in child");

  if (pid)
    {
      waitpid (pid, &status, 0);
      unlink ("y.txt");
      if (!WIFEXITED (status) || WEXITSTATUS (status))
	{
	  printf ("forked process exited with status %p\n", (char *) status);
	  return 1;
	}
    }

  return 0;
}
@


1.6
log
@* Makefile.common (CFLAGS_COMMON): Add -Wstrict-aliasing.
@
text
@a105 1
  if (argc > 1) sleep (10);
@


1.5
log
@* winsup.api/known_bugs.tcl: Remove dup05, fcntl07B, lseek04, select03,
unlink06.
@
text
@d106 1
@


1.4
log
@* winsup.api/mmaptest03.c (main): Mark variables as volatile to avoid
optimization induced problems.
@
text
@d21 2
d30 1
d38 7
d95 10
a104 1
  pid = fork();
d112 1
d114 1
d125 1
d133 1
d147 4
a150 1
        return 1;
@


1.3
log
@* libltp/include/test.h: Fix C warnings.
* winsup.api/checksignal.c: Ditto.
* winsup.api/crlf.c: Ditto.
* winsup.api/devzero.c: Ditto.
* winsup.api/iospeed.c: Ditto.
* winsup.api/mmaptest01.c: Ditto.
* winsup.api/mmaptest02.c: Ditto.
* winsup.api/mmaptest03.c: Ditto.
* winsup.api/mmaptest04.c: Ditto.
* winsup.api/nullgetcwd.c: Ditto.
* winsup.api/sigchld.c: Ditto.
* winsup.api/signal-into-win32-api.c: Ditto.
* winsup.api/systemcall.c: Ditto.
* winsup.api/waitpid.c: Ditto.
* winsup.api/pthread/mainthreadexits.c: Ditto.
* winsup.api/pthread/test.h: Ditto.
* winsup.api/pthread/threadidafterfork.c: Ditto.
* Makefile.in: Remove cygrun.exe from RUNTIME since it is built here now.
@
text
@d43 1
a43 1
  char c, *buf1, *buf2;
d99 1
a99 1
  if (munmap(buf1, statbuf.st_size))
d116 1
a116 1
  if (munmap(buf2, statbuf.st_size))
@


1.2
log
@        * winsup.api/mmaptest01.c: Add log output.
        * winsup.api/mmaptest02.c: Write log output to stdout.
        * winsup.api/mmaptest03.c: Ditto.
@
text
@d11 1
d25 1
a25 1
perror_exit (char *str)
d41 1
a41 1
  int i, fd, status;
@


1.1
log
@        * winsup.api/mmaptest02.c: New test.
        * winsup.api/mmaptest03.c: Ditto.
        * winsup.api/mmaptest04.c: Ditto.
@
text
@d26 1
a26 1
  perror (str);
@

