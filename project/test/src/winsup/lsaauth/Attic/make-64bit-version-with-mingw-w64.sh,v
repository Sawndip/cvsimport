head	1.4;
access;
symbols
	cygwin-1_7_17-release:1.3
	cygwin-64bit-branch:1.3.0.2
	cygwin-1_7_16-release:1.3
	cygwin-1_7_15-release:1.2
	cygwin-1_7_14_2-release:1.2
	cygwin-1_7_14-release:1.2
	cygwin-1_7_12-release:1.2
	cygwin-1_7_11-release:1.2
	cygwin-1_7_10-release:1.2;
locks; strict;
comment	@# @;


1.4
date	2012.10.24.09.35.38;	author yselkowitz;	state dead;
branches;
next	1.3;

1.3
date	2012.05.29.12.46.01;	author corinna;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	2011.03.31.14.19.35;	author corinna;	state Exp;
branches;
next	1.1;

1.1
date	2011.03.31.13.07.54;	author corinna;	state Exp;
branches;
next	;

1.3.2.1
date	2012.10.24.10.00.16;	author corinna;	state dead;
branches;
next	;


desc
@@


1.4
log
@2012-10-24  Kai Tietz  <ktietz70@@googlemail.com>
	    Yaakov Selkowitz  <yselkowitz@@users.sourceforge.net>

	* configure.in: Check for MINGW32_CC and MINGW64_CC.
	* configure: Regenerate.
	* Makefile.in: Use MINGW32_CC and MINGW64_CC to build 32-bit and
	64-bit DLLs.  Remove references to mingw and w32api directories.
	* cyglsa64.dll: Remove from version control.
	* make-64bit-version-with-mingw-w64.sh: Remove.
@
text
@#! /bin/sh
# This script shows how to generate a 64 bit version of cyglsa.dll.
# The 32 bit version will not work on 64 bit systems.
#
# Note that you need MinGW-w64 GCC, headers, and import libs.  On Cygwin,
# the required packages are: mingw64-x86_64-binutils, mingw64-x86_64-gcc-core,
# mingw64-x86_64-headers, and mingw64-x86_64-runtime.
#
# Note that this is for building inside the source dir as not to interfere
# with the "official" 32 bit build in the build directory.
#
# Install the dll into /bin and use the cyglsa-config script to register it.
# Don't forget to reboot afterwards.
#
# Add "-DDEBUGGING" to CFLAGS below to create debugging output to
# C:\cyglsa.dbgout at runtime.
#
set -e

CC="x86_64-w64-mingw32-gcc"
CFLAGS="-fno-exceptions -O0 -Wall -Werror"
LDFLAGS="-s -nostdlib -Wl,--entry,DllMain,--major-os-version,5,--minor-os-version,2"
# Never again try to remove advapi32.  It does not matter if the DLL calls
# advapi32 functions or the equivalent ntdll functions.
# But if the LSA authentication DLL is not linked against advapi32, it's
# not recognized by LSA.
LIBS="-ladvapi32 -lkernel32 -lntdll"

$CC $CFLAGS $LDFLAGS -shared -o cyglsa64.dll cyglsa.c cyglsa64.def $LIBS
@


1.3
log
@	* Makefile.in (LIBS): Re-add advapi32.dll.  Explain why.
	* make-64bit-version-with-mingw-w64.sh (LIBS): Ditto.
	* cyglsa.c: Drop NTDLL function declarations.  Use equivalent advapi32
	functions again, throughout.
	* cyglsa64.dll: Regenerate.
@
text
@@


1.3.2.1
log
@Pull in changes from HEAD
@
text
@@


1.2
log
@	* Makefile.in (LIBS): Remove advapi32.dll.
	(clean): Remove cyglsa.def.
	* cyglsa.c: Drop definitions required for VC++.  Don't include ntddk.h.
	Declare functions from NTDLL here.  Explain why.  Use NTDLL functions
	in place of ADVAPI32 functions.
	* cyglsa64.def: New file.
	* cyglsa64.dll: Regenerate.
	* make-64bit-version-with-mingw-w64.sh (LIBS): Remove advapi32.dll.
	Reference cyglsa64.def instead of mslsa.def.
	* make-64bit-version-with-visual-c.bat: Remove.
	* mslsa.def: Remove.
@
text
@d23 5
a27 1
LIBS="-lkernel32 -lntdll"
@


1.1
log
@	* cyglsa.c: Fix compilation with MinGW-w64 toolchains.
	* make-64bit-version-with-mingw-w64.sh: New file.
	* cyglsa64.dll: Regenerate with MinGW-w64-gc.
@
text
@d23 1
a23 1
LIBS="-ladvapi32 -lkernel32 -lntdll"
d25 1
a25 1
$CC $CFLAGS $LDFLAGS -shared -o cyglsa64.dll cyglsa.c mslsa.def $LIBS
@

