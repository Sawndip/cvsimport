head	1.8;
access;
symbols
	cygwin-1_7_35-release:1.8
	cygwin-1_7_34-release:1.8
	cygwin-1_7_33-release:1.7
	cygwin-1_7_32-release:1.7
	cygwin-1_7_31-release:1.7
	cygwin-1_7_30-release:1.7
	cygwin-1_7_29-release:1.7
	cygwin-1_7_29-release-branchpoint:1.7.0.2
	cygwin-1_7_28-release:1.7
	cygwin-1_7_27-release:1.7
	cygwin-1_7_26-release:1.7
	cygwin-1_7_25-release:1.7
	cygwin-1_7_24-release:1.7
	cygwin-1_7_23-release:1.7
	cygwin-1_7_22-release:1.7
	cygwin-1_7_21-release:1.7
	cygwin-1_7_20-release:1.7
	cygwin-1_7_19-release:1.7
	cygwin-64bit-postmerge:1.7
	cygwin-64bit-premerge-branch:1.6.0.12
	cygwin-64bit-premerge:1.6
	cygwin-1_7_18-release:1.6
	cygwin-1_7_17-release:1.6
	cygwin-64bit-branch:1.6.0.10
	cygwin-1_7_16-release:1.6
	cygwin-1_7_15-release:1.6
	cygwin-1_7_14_2-release:1.6
	cygwin-1_7_14-release:1.6
	cygwin-1_7_12-release:1.6
	cygwin-1_7_11-release:1.6
	cygwin-1_7_10-release:1.6
	cygwin-1_7_9-release:1.6
	cygwin-1_7_8-release:1.6
	cygwin-1_7_7-release:1.6
	cygwin-1_7_5-release:1.6
	cygwin-1_7_4-release:1.6
	cygwin-1_7_3-release:1.6
	cygwin-1_7_2-release:1.6
	cygwin-1_7_1-release:1.6
	cv-branch-2:1.6.0.8
	cr-0x5f1:1.6.0.6
	cv-branch:1.6.0.4
	cr-0x3b58:1.6.0.2
	cr-0x9e:1.2.0.4
	cr-0x9d:1.2.0.2;
locks; strict;
comment	@ * @;


1.8
date	2015.01.19.17.42.38;	author corinna;	state Exp;
branches;
next	1.7;

1.7
date	2013.04.23.09.44.30;	author corinna;	state Exp;
branches;
next	1.6;

1.6
date	2005.11.10.15.04.06;	author corinna;	state Exp;
branches
	1.6.10.1;
next	1.5;

1.5
date	2004.10.04.19.44.05;	author corinna;	state Exp;
branches;
next	1.4;

1.4
date	2004.09.15.10.17.52;	author corinna;	state Exp;
branches;
next	1.3;

1.3
date	2004.02.06.16.25.58;	author corinna;	state Exp;
branches;
next	1.2;

1.2
date	2004.01.16.13.39.25;	author corinna;	state Exp;
branches;
next	1.1;

1.1
date	2003.11.19.18.49.40;	author corinna;	state Exp;
branches;
next	;

1.6.10.1
date	2012.12.04.17.25.21;	author corinna;	state Exp;
branches;
next	;


desc
@@


1.8
log
@	* bsd_helper.h: Throughout, convert "struct thread" to "class thread".
	* bsd_mutex.cc (_msleep): Fetch signal_arrived handle from thread's
	ipcblk.
	* process.h (class process): Drop _signal_arrived and align methods.
	(process_cache::process): Drop signal_arrived parameter.
	* process.cc (process::process): Ditto.  Drop related code.
	(process::~process): Drop closing signal_arrived handle.
	(process_cache::process): Drop signal_arrived parameter in call to
	process::process.
	(thread::dup_signal_arrived): New method duplicating thread's
	signal_arrived handle.
	(thread::close_signal_arrived): New method closing thread's
	signal_arrived handle.
	* msg.cc (client_request_msg::serve): Drop signal_arrived parameter from
	call to process_cache::process. Use thread constructor to initialize td.
	* sem.cc (client_request_sem::serve): Ditto.
	* shm.cc (client_request_shm::serve): Ditto.
@
text
@/* process.h

   Copyright 2001, 2002, 2003, 2004, 2005, 2012, 2015 Red Hat Inc.

   Written by Robert Collins <rbtcollins@@hotmail.com>

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */

#ifndef _PROCESS_H
#define _PROCESS_H

#include <assert.h>

#include "threaded_queue.h"

class process_cleanup : public queue_request
{
public:
  process_cleanup (class process *const theprocess)
    : _process (theprocess)
  {
    assert (_process);
  }

  virtual ~process_cleanup ();

  virtual void process ();

private:
  class process *const _process;
};

class process;

class cleanup_routine
{
  friend class process;

public:
  cleanup_routine (void *const key)
    : _key (key),
      _next (NULL)
  {}

  virtual ~cleanup_routine () = 0;

  bool operator== (const cleanup_routine &rhs) const
  {
    return _key == rhs._key;
  }

  void *key () const { return _key; }

  /* MUST BE SYNCHRONOUS */
  virtual void cleanup (class process *) = 0;

private:
  void *const _key;
  cleanup_routine *_next;
};

class process_cache;

#define hold()		_hold(__FILE__,__LINE__)
#define release()	_release(__FILE__,__LINE__)

class process
{
  friend class process_cache;
  friend class process_cleanup;

public:
  process (pid_t cygpid, DWORD winpid);
  ~process ();

  pid_t cygpid () const { return _cygpid; }
  DWORD winpid () const { return _winpid; }
  HANDLE handle () const { return _hProcess; }

  bool is_active () const { return _exit_status == STILL_ACTIVE; }

  void _hold (const char *file, int line) {
    _log (file, line, LOG_DEBUG, "Try hold(%lu)", _cygpid);
    EnterCriticalSection (&_access);
    _log (file, line, LOG_DEBUG, "holding (%lu)", _cygpid);
  }
  void _release (const char *file, int line) {
    _log (file, line, LOG_DEBUG, "leaving (%lu)", _cygpid);
    LeaveCriticalSection (&_access);
  }

  bool add (cleanup_routine *);
  bool remove (const cleanup_routine *);

private:
  const pid_t _cygpid;
  const DWORD _winpid;
  HANDLE _hProcess;
  LONG _cleaning_up;
  DWORD _exit_status;		// Set in the constructor and in exit_code ().
  cleanup_routine *_routines_head;
  /* used to prevent races-on-delete */
  CRITICAL_SECTION _access;
  class process *_next;

  DWORD check_exit_code ();
  void cleanup ();
};

class process_cache
{
  // Number of special (i.e., non-process) handles in _wait_array.
  // See wait_for_processes () and sync_wait_array () for details.
  enum {
    SPECIALS_COUNT = 2
  };

  class submission_loop : public queue_submission_loop
  {
  public:
    submission_loop (process_cache *const cache, threaded_queue *const queue)
      : queue_submission_loop (queue, true),
	_cache (cache)
    {
      assert (_cache);
    }

  private:
    process_cache *const _cache;

    virtual void request_loop ();
  };

  friend class submission_loop;

public:
  process_cache (const size_t max_procs, const unsigned int initial_workers);
  ~process_cache ();

  class process *process (pid_t cygpid, DWORD winpid);

  bool running () const { return _queue.running (); }

  bool start () { return _queue.start (); }
  bool stop () { return _queue.stop (); }

private:
  threaded_queue _queue;
  submission_loop _submitter;

  size_t _processes_count;
  size_t _max_process_count;
  class process *_processes_head; // A list sorted by winpid.

  // Access to the _wait_array and related fields is not thread-safe,
  // since they are used solely by wait_for_processes () and its callees.

  HANDLE _wait_array[5 * MAXIMUM_WAIT_OBJECTS];
  class process *_process_array[5 * MAXIMUM_WAIT_OBJECTS];

  HANDLE _cache_add_trigger;	// Actually both add and remove.
  CRITICAL_SECTION _cache_write_access; // Actually both read and write access.

  void wait_for_processes (HANDLE interrupt);
  size_t sync_wait_array (HANDLE interrupt);
  void check_and_remove_process (const size_t index);

  class process *find (DWORD winpid, class process **previous = NULL);
};

#endif /* _PROCESS_H */
@


1.7
log
@	* Merge in cygwin-64bit-branch.
@
text
@d3 1
a3 1
   Copyright 2001, 2002, 2003, 2004, 2005, 2012 Red Hat Inc.
d77 1
a77 2
  process (pid_t cygpid, DWORD winpid,
  	   HANDLE signal_arrived = INVALID_HANDLE_VALUE);
a82 1
  HANDLE signal_arrived () const { return _signal_arrived; }
a102 1
  HANDLE _signal_arrived;
d144 1
a144 2
  class process *process (pid_t cygpid, DWORD winpid,
  			  HANDLE signal_arrived = INVALID_HANDLE_VALUE);
@


1.6
log
@	* bsd_helper.cc (securityinit): New function.  Move initialization
	of security related variables from ipcinit here.
	* bsd_helper.h (securityinit): Add prototype.
	* cygserver.cc (main): Call securityinit right after wincap.init.

	* process.cc (process_cache::process): Fix maximum process condition.

	* README: Add description for new -p/--process-cache option.
	* bsd_helper.cc (default_tun_check): Add kern.srv.process_cache_size
	entry to tunable_params. Set max value of kern.srv.request_threads
	to 310.
	* cygserver.cc (SERVER_VERSION): Set to 1.20.
	(print_usage): Print usage of new parameter -p.
	(main): Add process cache parameter handling. Accomodate new max
	value of request threads.
	* cygserver.conf: Add kern.srv.process_cache_size tunable parameter.
	Accomodate new max value of kern.srv.request_threads.
	* process.cc: Fix a comment.
	(process_cache::process_cache): Add max process cache size parameter.
	Change _cache_add_trigger to manual reset event.
	(struct pcache_wait_t): New struct used as parameter to
	pcache_wait_thread.
	(pcache_wait_thread): New thread function used for threaded process
	cache.
	(process_cache::wait_for_processes): Use threaded waiting if number
	of processes to wait for is bigger than 62. Always check all processes
	to avoid race under heavy load.
	(process_cache::sync_wait_array): Remove useless assert. Reset
	_cache_add_trigger right at the start since it's manual reset now.
	Accomodate threaded waiting.
	* process.h (process_cache::process_cache): Add max_procs parameter.
	(process_cache::_max_process_count): New member.
	(process_cache::_wait_array: Raise to allow up to 5 wait threads.
	(process_cache::_process_array): Ditto.
@
text
@d3 1
a3 1
   Copyright 2001, 2002, 2003, 2004, 2005 Red Hat Inc.
d106 1
a106 1
  long _cleaning_up;
@


1.6.10.1
log
@	* bsd_helper.cc (tunable_int_fetch): Convert 2nd parameter to
	int32_t.
	* bsd_helper.h (tunable_int_fetch): Fix declaration accordingly.
	* bsd_log.cc (log_level): Change type to int32_t.
	* bsd_log.h (log_level): Fix declaration accordingly.
	* bsd_mutex.cc (msgmni): Change type to int32_t.
	(semmni): Ditto.
	* cygserver.cc: Fix debug output to be target agnostic.  Use same
	style throughout.
	* msg.cc (client_request_msg::serve): Refuse to serve 64 bit processes
	from 32 bit cygserver.
	* sem.cc (client_request_sem::serve): Ditto.
	* shm.cc (client_request_shm::serve): Ditto.
	* sysv_shm.cc (shm_delete_mapping): Mark size as unused to make gcc
	happy.
	(kern_shmat): Ditto with flags.
	* process.h (class process): Change type of _cleaning_up member to LONG.
	* threaded_queue.h (class threaded_queue): Ditto for _workers_count.
@
text
@d3 1
a3 1
   Copyright 2001, 2002, 2003, 2004, 2005, 2012 Red Hat Inc.
d106 1
a106 1
  LONG _cleaning_up;
@


1.5
log
@	* bsd_mutex.cc (_msleep): Simplify event creation.  Revert change from
	2004-08-24.  It should be unnecessary now.
	* msg.cc (client_request_msg::serve): Release process critical
	section as early as possible.
	* sem.cc (client_request_sem::serve): Ditto.
	* shm.cc (client_request_shm::serve): Ditto.
	* process.cc: Use hold and release method calls instead of
	EnterCriticalSection/LeaveCriticalSection calls throughout.
	* process.h (_hold): Rename from hold.  Take filename and linenumber
	parameter for logging.  Define matching hold macro.
	(release): Ditto.
@
text
@d3 1
a3 1
   Copyright 2001, 2002, 2003, 2004 Red Hat Inc.
d144 1
a144 1
  process_cache (unsigned int initial_workers);
d160 1
d166 2
a167 2
  HANDLE _wait_array[MAXIMUM_WAIT_OBJECTS];
  class process *_process_array[MAXIMUM_WAIT_OBJECTS];
@


1.4
log
@	Fix copyright throughout.
	Eliminate use of _impure_ptr outside Cygwin.
	* bsd_helper.cc: Include errno.h instead of cygerrno.h.
	* bsd_mutex.cc : Ditto.
	* client.cc: Ditto.
	* cygserver.cc: Ditto.
	* process.cc: Don't build functions inside Cygwin.  Don't include
	cygerrno.h.  Don't set errno.
	* transport_pipes.cc (SET_ERRNO): New define.  Use througout.
	* transport_sockets.cc (SET_ERRNO): Ditto.
	(GET_ERRNO): Ditto.
@
text
@d68 3
d88 9
a96 2
  void hold () { EnterCriticalSection (&_access); }
  void release () { LeaveCriticalSection (&_access); }
@


1.3
log
@        * bsd_mutex.cc (_msleep): Handle PCATCH using signal_arrived event.
        * client.cc: Include sigproc.h.
        * msg.cc (client_request_msg::serve): Accomodate third parameter to
        process::process.
        * sem.cc (client_request_sem::serve): Ditto.
        * shm.cc (client_request_shm::serve): Ditto.
        * process.cc (process::process): Duplicate signal_arrived into
        Cygserver process space.
        (process::~process): Close _signal_arrived handle.
        (process_cache::process): Add signal_arrived handling.
        * process.h (process::process): Add signal_arrived parameter.
        (process:signal_arrived): New read accessor.
        (process:_signal_arrived): New member.
        (process_cache::process): Add signal_arrived parameter.
@
text
@d3 1
a3 1
   Copyright 2001, 2002 Red Hat Inc.
@


1.2
log
@	* process.h (cleanup_routine::~cleanup_routine): Make pure virtual
	function to avoid miscompilation with certain versions of gcc.
	* process.cc (cleanup_routine::~cleanup_routine): Remove.
@
text
@d74 2
a75 1
  process (pid_t cygpid, DWORD winpid);
d81 1
d95 1
d137 2
a138 1
  class process *process (pid_t cygpid, DWORD winpid);
@


1.1
log
@	Don't use safe_new but new throughout.  Fix copyright dates
	throughout.
	* Makefile.in: Accomodate all new files and name changes.
	Add a *.d dependency.
	(sbindir): Add.
	(etcdir): Drop in favor of more appropriate sysconfdir definition.
	(sysconfdir): Add.
	(CXXFLAGS): Add -MMD flag. Add SYSCONFDIR definition.
	(.SUFFIXES): Add.
	(install): Add action items.
	(libclean): New target.
	(fullclean): Ditto.
	* bsd_helper.cc: New file.
	* bsd_helper.h: Ditto.
	* bsd_log.cc: Ditto.
	* bsd_log.h: Ditto.
	* bsd_mutex.cc: Ditto.
	* bsd_mutex.h: Ditto.
	* client.cc: Rearrange to build as less as possible if
	__INSIDE_CYGWIN__.
	(client_request::handle_request): Add Message Queue and Semaphore
	handling.
	* cygserver.cc: Rearrange to build as less as possible if
	__INSIDE_CYGWIN__. Use new debug/log/panic logging functions.
	(DEF_CONFIG_FILE): New definition for configuration file.  Use
	throughout.
	(getfunc): Remove.
	(__cygserver__printf): Remove.
	(client_request_attach_tty::serve): Return error if impersonation
	fails.
	(print_usage): Pump up help message.
	(print_version): Add output of default configuration file.
	(main): Accommodate new options.  Allow overwrite of threading options
	from config file.  Call several new initialization functions.  Drop
	printing dots.  Don't define SIGHANDLE inline.
	* cygserver.conf: New file.
	* cygserver_process.h: Rename to process.h.
	* cygserver_transport.h: Rename to transport.h.
	* cygserver_transport_pipes.h: Rename to transport_pipes.h.
	* cygserver_transport_sockets.h: Rename to transport_sockets.h.
	* msg.cc: Rewrite.
	* sem.cc: Rewrite.
	* shm.cc: Rewrite.
	* sysv_msg.cc: New file, derived from FreeBSD version 1.52.
	* sysv_sem.cc: New file, derived from FreeBSD version 1.66.
	* sysv_shm.cc: New file, derived from FreeBSD version 1.89.
	* threaded_queue.cc: Rearrange to build as less as possible if
	__INSIDE_CYGWIN__.
	* transport.cc (transport_layer_base::impersonate_client): Define bool.
	(transport_layer_base::revert_to_self): Ditto.
	* transport.h (transport_layer_base::impersonate_client): Declare bool.
	(transport_layer_base::revert_to_self): Ditto.
	* transport_pipes.cc (transport_layer_pipes::transport_layer_pipes):
	Don't call init_security.
	(init_security): Remove.
	(transport_layer_pipes::accept): Use global sec_all_nih.
	(transport_layer_pipes::connect): Ditto.
	(transport_layer_pipes::impersonate_client): Define bool.
	(transport_layer_pipes::revert_to_self): Ditt.
	* transport_pipes.h (transport_layer_pipes::impersonate_client): Declare
	bool.
	(transport_layer_pipes::revert_to_self): Ditto.
	* woutsup.h: Include bsd compatibility headers.
	(SIGHANDLE): Add definition.
	(__cygserver__printf): Remove definition.
	(__noop_printf): Ditto.
	(debug_printf): Define using debug.
	(syscall_printf): Define using log.
	(system_printf): Ditto.
	Drop all other _printf definitions.
@
text
@d49 1
a49 1
  virtual ~cleanup_routine ();
@

