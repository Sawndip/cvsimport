head	1.9;
access;
symbols
	cygwin-1_7_35-release:1.9
	cygwin-1_7_34-release:1.9
	cygwin-1_7_33-release:1.8
	cygwin-1_7_32-release:1.8
	cygwin-1_7_31-release:1.8
	cygwin-1_7_30-release:1.8
	cygwin-1_7_29-release:1.8
	cygwin-1_7_29-release-branchpoint:1.8.0.2
	cygwin-1_7_28-release:1.8
	cygwin-1_7_27-release:1.8
	cygwin-1_7_26-release:1.8
	cygwin-1_7_25-release:1.8
	cygwin-1_7_24-release:1.8
	cygwin-1_7_23-release:1.8
	cygwin-1_7_22-release:1.8
	cygwin-1_7_21-release:1.8
	cygwin-1_7_20-release:1.8
	cygwin-1_7_19-release:1.8
	cygwin-64bit-postmerge:1.8
	cygwin-64bit-premerge-branch:1.7.0.12
	cygwin-64bit-premerge:1.7
	cygwin-1_7_18-release:1.7
	cygwin-1_7_17-release:1.7
	cygwin-64bit-branch:1.7.0.10
	cygwin-1_7_16-release:1.7
	cygwin-1_7_15-release:1.7
	cygwin-1_7_14_2-release:1.7
	cygwin-1_7_14-release:1.7
	cygwin-1_7_12-release:1.7
	cygwin-1_7_11-release:1.7
	cygwin-1_7_10-release:1.7
	cygwin-1_7_9-release:1.7
	cygwin-1_7_8-release:1.7
	cygwin-1_7_7-release:1.7
	cygwin-1_7_5-release:1.7
	cygwin-1_7_4-release:1.7
	cygwin-1_7_3-release:1.7
	cygwin-1_7_2-release:1.7
	cygwin-1_7_1-release:1.7
	cv-branch-2:1.7.0.8
	cr-0x5f1:1.7.0.6
	cv-branch:1.7.0.4
	cr-0x3b58:1.7.0.2
	cr-0x9e:1.4.0.4
	cr-0x9d:1.4.0.2
	corinna-01:1.2
	cr-0x9c:1.2.0.4
	cr-0x9b:1.2.0.2
	cr-0x99:1.2
	Z-emcb-cygwin_daemon:1.1.0.2;
locks; strict;
comment	@// @;


1.9
date	2015.01.19.17.42.38;	author corinna;	state Exp;
branches;
next	1.8;

1.8
date	2013.04.23.09.44.30;	author corinna;	state Exp;
branches;
next	1.7;

1.7
date	2004.10.04.19.44.05;	author corinna;	state Exp;
branches
	1.7.10.1;
next	1.6;

1.6
date	2004.09.15.10.17.52;	author corinna;	state Exp;
branches;
next	1.5;

1.5
date	2004.02.06.16.25.58;	author corinna;	state Exp;
branches;
next	1.4;

1.4
date	2003.11.22.22.37.13;	author corinna;	state Exp;
branches;
next	1.3;

1.3
date	2003.11.19.18.49.40;	author corinna;	state Exp;
branches;
next	1.2;

1.2
date	2003.08.30.16.34.56;	author cgf;	state Exp;
branches;
next	1.1;

1.1
date	2003.08.30.16.18.39;	author elfyn;	state dead;
branches
	1.1.2.1;
next	;

1.7.10.1
date	2012.12.04.17.25.21;	author corinna;	state Exp;
branches;
next	1.7.10.2;

1.7.10.2
date	2013.03.07.18.10.42;	author corinna;	state Exp;
branches;
next	;

1.1.2.1
date	2003.08.30.16.18.39;	author elfyn;	state Exp;
branches;
next	;


desc
@@


1.9
log
@	* bsd_helper.h: Throughout, convert "struct thread" to "class thread".
	* bsd_mutex.cc (_msleep): Fetch signal_arrived handle from thread's
	ipcblk.
	* process.h (class process): Drop _signal_arrived and align methods.
	(process_cache::process): Drop signal_arrived parameter.
	* process.cc (process::process): Ditto.  Drop related code.
	(process::~process): Drop closing signal_arrived handle.
	(process_cache::process): Drop signal_arrived parameter in call to
	process::process.
	(thread::dup_signal_arrived): New method duplicating thread's
	signal_arrived handle.
	(thread::close_signal_arrived): New method closing thread's
	signal_arrived handle.
	* msg.cc (client_request_msg::serve): Drop signal_arrived parameter from
	call to process_cache::process. Use thread constructor to initialize td.
	* sem.cc (client_request_sem::serve): Ditto.
	* shm.cc (client_request_shm::serve): Ditto.
@
text
@/* msg.cc: Single unix specification IPC interface for Cygwin.

   Copyright 2003, 2004, 2012 Red Hat, Inc.

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */

#ifdef __OUTSIDE_CYGWIN__
#include "woutsup.h"

#include <errno.h>
#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

#include "cygserver.h"
#include "process.h"
#include "transport.h"

#include "cygserver_ipc.h"
#include "cygserver_msg.h"

client_request_msg::client_request_msg ()
  : client_request (CYGSERVER_REQUEST_MSG,
		    &_parameters, sizeof (_parameters))
{ 
}

void
client_request_msg::serve (transport_layer_base *const conn,
                           process_cache *const cache)
{
  if (msglen () != sizeof (_parameters.in))
    {
      syscall_printf ("bad request body length: expecting %lu bytes, got %lu",
		      sizeof (_parameters), msglen ());
      error_code (EINVAL);
      msglen (0);
      return;
    }
  if (support_msgqueues == TUN_FALSE)
    {
      syscall_printf ("Message queue support not started");
      error_code (ENOSYS);
      if (_parameters.in.msgop == MSGOP_msgrcv)
	_parameters.out.rcv = -1;
      else
	_parameters.out.ret = -1;
      msglen (sizeof (_parameters.out));
      return;
    }
  process *const client = cache->process (_parameters.in.ipcblk.cygpid,
					  _parameters.in.ipcblk.winpid);
  if (!client)
    {
      error_code (EAGAIN);
      msglen (0);
      return;
    }
  if (!conn->impersonate_client ())
    {
      client->release ();
      error_code (EACCES);
      msglen (0);
      return;
    }
  if (!adjust_identity_info (&_parameters.in.ipcblk))
    {
      client->release ();
      conn->revert_to_self ();
      error_code (EACCES);
      msglen (0);
      return;
    }
  /* Early revert_to_self since IPC code runs in kernel mode. */
  conn->revert_to_self ();
  /* sysv_msg.cc takes care of itself. */
  client->release ();
  thread td (client, &_parameters.in.ipcblk, true);
  int res;
  msgop_t msgop = _parameters.in.msgop; /* Get's overwritten otherwise. */
  switch (msgop)
    {
      case MSGOP_msgctl:
	res = msgctl (&td, &_parameters.in.ctlargs);
        break;
      case MSGOP_msgget:
	res = msgget (&td, &_parameters.in.getargs);
        break;
      case MSGOP_msgrcv:
	res = msgrcv (&td, &_parameters.in.rcvargs);
        break;
      case MSGOP_msgsnd:
	res = msgsnd (&td, &_parameters.in.sndargs);
        break;
      default:
	res = ENOSYS;
        td.td_retval[0] = -1;
	break;
    }
  /* Allocated by the call to adjust_identity_info(). */
  if (_parameters.in.ipcblk.gidlist)
    free (_parameters.in.ipcblk.gidlist);
  error_code (res);
  if (msgop == MSGOP_msgrcv)
    _parameters.out.rcv = td.td_retval[0];
  else
    _parameters.out.ret = td.td_retval[0];
  msglen (sizeof (_parameters.out));
}
#endif /* __OUTSIDE_CYGWIN__ */
@


1.8
log
@	* Merge in cygwin-64bit-branch.
@
text
@d58 1
a58 2
					  _parameters.in.ipcblk.winpid,
					  _parameters.in.ipcblk.signal_arrived);
d84 1
a84 1
  thread td = { client, &_parameters.in.ipcblk, {-1, -1} };
@


1.7
log
@	* bsd_mutex.cc (_msleep): Simplify event creation.  Revert change from
	2004-08-24.  It should be unnecessary now.
	* msg.cc (client_request_msg::serve): Release process critical
	section as early as possible.
	* sem.cc (client_request_sem::serve): Ditto.
	* shm.cc (client_request_shm::serve): Ditto.
	* process.cc: Use hold and release method calls instead of
	EnterCriticalSection/LeaveCriticalSection calls throughout.
	* process.h (_hold): Rename from hold.  Take filename and linenumber
	parameter for logging.  Define matching hold macro.
	(release): Ditto.
@
text
@d3 1
a3 1
   Copyright 2003, 2004 Red Hat, Inc.
@


1.7.10.1
log
@	* bsd_helper.cc (tunable_int_fetch): Convert 2nd parameter to
	int32_t.
	* bsd_helper.h (tunable_int_fetch): Fix declaration accordingly.
	* bsd_log.cc (log_level): Change type to int32_t.
	* bsd_log.h (log_level): Fix declaration accordingly.
	* bsd_mutex.cc (msgmni): Change type to int32_t.
	(semmni): Ditto.
	* cygserver.cc: Fix debug output to be target agnostic.  Use same
	style throughout.
	* msg.cc (client_request_msg::serve): Refuse to serve 64 bit processes
	from 32 bit cygserver.
	* sem.cc (client_request_sem::serve): Ditto.
	* shm.cc (client_request_shm::serve): Ditto.
	* sysv_shm.cc (shm_delete_mapping): Mark size as unused to make gcc
	happy.
	(kern_shmat): Ditto with flags.
	* process.h (class process): Change type of _cleaning_up member to LONG.
	* threaded_queue.h (class threaded_queue): Ditto for _workers_count.
@
text
@d3 1
a3 1
   Copyright 2003, 2004, 2012 Red Hat, Inc.
a45 10
#ifndef __x86_64__
  if (_parameters.in.ipcblk.is_64bit)
    {
      syscall_printf ("32 bit cygserver can't serve 64 bit processes.  "
		      "Use 64 bit cygserver.");
      error_code (ENOSYS);
      msglen (0);
      return;
    }
#endif
@


1.7.10.2
log
@	* msg.cc (client_request_msg::serve): Revert change to refuse 64 bit
	processes on 32 bit systems.
	* sem.cc (client_request_sem::serve): Ditto.
	* shm.cc (client_request_shm::serve): Ditto.
@
text
@d46 10
@


1.6
log
@	Fix copyright throughout.
	Eliminate use of _impure_ptr outside Cygwin.
	* bsd_helper.cc: Include errno.h instead of cygerrno.h.
	* bsd_mutex.cc : Ditto.
	* client.cc: Ditto.
	* cygserver.cc: Ditto.
	* process.cc: Don't build functions inside Cygwin.  Don't include
	cygerrno.h.  Don't set errno.
	* transport_pipes.cc (SET_ERRNO): New define.  Use througout.
	* transport_sockets.cc (SET_ERRNO): Ditto.
	(GET_ERRNO): Ditto.
@
text
@d75 1
d83 2
a109 1
  client->release ();
@


1.5
log
@        * bsd_mutex.cc (_msleep): Handle PCATCH using signal_arrived event.
        * client.cc: Include sigproc.h.
        * msg.cc (client_request_msg::serve): Accomodate third parameter to
        process::process.
        * sem.cc (client_request_sem::serve): Ditto.
        * shm.cc (client_request_shm::serve): Ditto.
        * process.cc (process::process): Duplicate signal_arrived into
        Cygserver process space.
        (process::~process): Close _signal_arrived handle.
        (process_cache::process): Add signal_arrived handling.
        * process.h (process::process): Add signal_arrived parameter.
        (process:signal_arrived): New read accessor.
        (process:_signal_arrived): New member.
        (process_cache::process): Add signal_arrived parameter.
@
text
@d3 1
a3 1
   Copyright 2003 Red Hat, Inc.
@


1.4
log
@	* msg.cc (client_request_msg::serve): Add default case to msgop switch.
	* sem.cc (client_request_sem::serve): Add default case to semop switch.
	* shm.cc (client_request_shm::serve): Add default case to shmop switch.
@
text
@d58 2
a59 1
					  _parameters.in.ipcblk.winpid);
@


1.3
log
@	Don't use safe_new but new throughout.  Fix copyright dates
	throughout.
	* Makefile.in: Accomodate all new files and name changes.
	Add a *.d dependency.
	(sbindir): Add.
	(etcdir): Drop in favor of more appropriate sysconfdir definition.
	(sysconfdir): Add.
	(CXXFLAGS): Add -MMD flag. Add SYSCONFDIR definition.
	(.SUFFIXES): Add.
	(install): Add action items.
	(libclean): New target.
	(fullclean): Ditto.
	* bsd_helper.cc: New file.
	* bsd_helper.h: Ditto.
	* bsd_log.cc: Ditto.
	* bsd_log.h: Ditto.
	* bsd_mutex.cc: Ditto.
	* bsd_mutex.h: Ditto.
	* client.cc: Rearrange to build as less as possible if
	__INSIDE_CYGWIN__.
	(client_request::handle_request): Add Message Queue and Semaphore
	handling.
	* cygserver.cc: Rearrange to build as less as possible if
	__INSIDE_CYGWIN__. Use new debug/log/panic logging functions.
	(DEF_CONFIG_FILE): New definition for configuration file.  Use
	throughout.
	(getfunc): Remove.
	(__cygserver__printf): Remove.
	(client_request_attach_tty::serve): Return error if impersonation
	fails.
	(print_usage): Pump up help message.
	(print_version): Add output of default configuration file.
	(main): Accommodate new options.  Allow overwrite of threading options
	from config file.  Call several new initialization functions.  Drop
	printing dots.  Don't define SIGHANDLE inline.
	* cygserver.conf: New file.
	* cygserver_process.h: Rename to process.h.
	* cygserver_transport.h: Rename to transport.h.
	* cygserver_transport_pipes.h: Rename to transport_pipes.h.
	* cygserver_transport_sockets.h: Rename to transport_sockets.h.
	* msg.cc: Rewrite.
	* sem.cc: Rewrite.
	* shm.cc: Rewrite.
	* sysv_msg.cc: New file, derived from FreeBSD version 1.52.
	* sysv_sem.cc: New file, derived from FreeBSD version 1.66.
	* sysv_shm.cc: New file, derived from FreeBSD version 1.89.
	* threaded_queue.cc: Rearrange to build as less as possible if
	__INSIDE_CYGWIN__.
	* transport.cc (transport_layer_base::impersonate_client): Define bool.
	(transport_layer_base::revert_to_self): Ditto.
	* transport.h (transport_layer_base::impersonate_client): Declare bool.
	(transport_layer_base::revert_to_self): Ditto.
	* transport_pipes.cc (transport_layer_pipes::transport_layer_pipes):
	Don't call init_security.
	(init_security): Remove.
	(transport_layer_pipes::accept): Use global sec_all_nih.
	(transport_layer_pipes::connect): Ditto.
	(transport_layer_pipes::impersonate_client): Define bool.
	(transport_layer_pipes::revert_to_self): Ditt.
	* transport_pipes.h (transport_layer_pipes::impersonate_client): Declare
	bool.
	(transport_layer_pipes::revert_to_self): Ditto.
	* woutsup.h: Include bsd compatibility headers.
	(SIGHANDLE): Add definition.
	(__cygserver__printf): Remove definition.
	(__noop_printf): Ditto.
	(debug_printf): Define using debug.
	(syscall_printf): Define using log.
	(system_printf): Ditto.
	Drop all other _printf definitions.
@
text
@d98 4
@


1.2
log
@* msg.cc: New file.
* sem.cc: Ditto.
@
text
@d3 1
a3 3
   Copyright 2002 Red Hat, Inc.

   Written by Conrad Scott <conrad.scott@@dsl.pipex.com>.
d11 2
a12 5
#include "winsup.h"

#include <sys/types.h>
#include <cygwin/msg.h>

d14 18
a31 21
#include "cygerrno.h"

extern "C" int
msgctl (int msqid, int cmd, struct msqid_ds *buf)
{
  set_errno (ENOSYS);
  return -1;
}

extern "C" int
msgget (key_t key, int msgflg)
{
  set_errno (ENOSYS);
  return -1;
}

extern "C" ssize_t
msgrcv (int msqid, void *msgp, size_t msgsz, long msgtyp, int msgflg)
{
  set_errno (ENOSYS);
  return -1;
d34 3
a36 2
extern "C" int
msgsnd (int msqid, const void *msgp, size_t msgsz, int msgflg)
d38 71
a108 2
  set_errno (ENOSYS);
  return -1;
d110 1
@


1.1
log
@file msg.cc was initially added on branch Z-emcb-cygwin_daemon.
@
text
@d1 47
@


1.1.2.1
log
@        * msg.cc: Move from cygwin directory.
        * sem.cc: Ditto.
        * threaded_queue.cc: Ditto.
@
text
@a0 47
/* msg.cc: Single unix specification IPC interface for Cygwin.

   Copyright 2002 Red Hat, Inc.

   Written by Conrad Scott <conrad.scott@@dsl.pipex.com>.

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */

#include "winsup.h"

#include <sys/types.h>
#include <cygwin/msg.h>


#include "cygerrno.h"

extern "C" int
msgctl (int msqid, int cmd, struct msqid_ds *buf)
{
  set_errno (ENOSYS);
  return -1;
}

extern "C" int
msgget (key_t key, int msgflg)
{
  set_errno (ENOSYS);
  return -1;
}

extern "C" ssize_t
msgrcv (int msqid, void *msgp, size_t msgsz, long msgtyp, int msgflg)
{
  set_errno (ENOSYS);
  return -1;
}

extern "C" int
msgsnd (int msqid, const void *msgp, size_t msgsz, int msgflg)
{
  set_errno (ENOSYS);
  return -1;
}
@

