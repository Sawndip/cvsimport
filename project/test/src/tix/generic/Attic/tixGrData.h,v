head	1.3;
access;
symbols
	gdb_5_3-2002-12-12-release:1.2
	gdb_5_3-branch:1.2.0.4
	gdb_5_3-2002-09-04-branchpoint:1.2
	gdb_5_2_1-2002-07-23-release:1.2
	gdb_5_2-2002-04-29-release:1.2
	gdb_5_2-branch:1.2.0.2
	gdb_5_2-2002-03-03-branchpoint:1.2
	gdb_5_1_1-2002-01-24-release:1.1.1.1
	cygnus_cvs_20020108_pre:1.2
	gdb_5_1_0_1-2002-01-03-branch:1.1.1.1.0.8
	gdb_5_1_0_1-2002-01-03-branchpoint:1.1.1.1
	gdb_5_1-2001-11-21-release:1.1.1.1
	gdb_s390-2001-09-26-branch:1.1.1.1.0.6
	gdb_s390-2001-09-26-branchpoint:1.1.1.1
	TIX_TCL_8_3:1.1.1.1
	NET:1.1.1
	gdb_5_1-2001-07-29-branch:1.1.1.1.0.4
	gdb_5_1-2001-07-29-branchpoint:1.1.1.1
	insight-precleanup-2001-01-01:1.1.1.1
	gdb_5_0-2000-05-19-release:1.1.1.1
	gdb_4_18_2-2000-05-18-release:1.1.1.1
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.1
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.1
	gdb_5_0-2000-04-10-branch:1.1.1.1.0.2
	gdb_5_0-2000-04-10-branchpoint:1.1.1.1
	repo-unification-2000-02-06:1.1.1.1
	insight-2000-02-04:1.1.1.1
	SNAPSHOT:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.3
date	2003.03.07.23.09.20;	author hunt;	state dead;
branches;
next	1.2;

1.2
date	2001.09.08.23.25.52;	author irox;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.07.00.19.28;	author jsm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.07.00.19.28;	author jsm;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Remove directory.
@
text
@/*
 * tixGData.h --
 *
 *	Defines portable data structure for tixGrid.
 *
 * Copyright (c) 1996, Expert Interface Technologies
 *
 * See the file "license.terms" for information on usage and redistribution
 * of this file, and for a DISCLAIMER OF ALL WARRANTIES.
 *
 */

#ifndef _TIX_GRID_DATA_H_
#define _TIX_GRID_DATA_H_

/*
 * Data structure that stored the cells in a Grid widget. It is optimized
 * for column/row insertion and deletion.
 *
 * - A grid is divideded into a set of rows and columns. Each row and column
 *   is divided into a set of cells.
 *
 * - The following discusses the structure of a row. The structure of a
 *   column is the reverse of a row.
 *
 *   Row y is stored in the hash table TixGridDataSet.index[1] with
 *   the index y. Hence, to search for row y, we use the FindHashEntry
 *   operation:
 *
 *	row_y = TixGridDataSet.index[1].FindHashEntry(y);
 *
 *   To locate a cell (x,y), we can first find the row y, and then
 *   locate the cell at column x of this row. Note that the cell is
 *   *not* indexed by its column position (y), but rather by the hash
 *   table of the column y. The following example illustrates how cell
 *   (x,y) can be searched:
 *
 *	row_y = TixGridDataSet.index[1].FindHashEntry(y);
 *	col_x = TixGridDataSet.index[0].FindHashEntry(x);
 *
 *	cell_xy = row_x.list.FindHashEntry(&col_x);
 *
 *   The advantage of this arrangement is it is very efficient to
 *   insert a row into into the grid -- we just have to fix the
 *   indices of the rows table. For example, if, after the insertion,
 *   row_y is now moved to the row y1, we change its index from y to
 *   y1. In general, an insertion operation takes log(n) time in a
 *   grid that contains n items.
 *
 */
typedef struct TixGridDataSet {
    Tcl_HashTable index[2];		/* the row and column indices */
    					/* index[0] holds the columns 
					 * (horizontal index)
					 */
    int maxIdx[2];			/* the max row/col, or {-1,-1}
					 * if there are no rows/col
					 */
} TixGridDataSet;

#define TIX_GR_AUTO			0
#define TIX_GR_DEFAULT			1
#define TIX_GR_DEFINED_PIXEL		2
#define TIX_GR_DEFINED_CHAR		3

typedef struct TixGridSize {
    int sizeType;
    int sizeValue;			/* width or height */
    int pixels;
    int pad0, pad1;
    double charValue;
} TixGridSize;

typedef struct TixGridRowCol {
    /* private: */
    Tcl_HashTable table;

    /* public: */
    int dispIndex;			/* the row or column in which
					 * this TixGridRowCol is displayed */
    TixGridSize size;
} TixGridRowCol;


#endif
@


1.2
log
@Touched all tix files to ease next import.
@
text
@@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@import insight-2000-02-04 snapshot (2nd try)
@
text
@@
