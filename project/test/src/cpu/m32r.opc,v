head	1.14;
access;
symbols
	sid-snapshot-20180601:1.14
	cgen-snapshot-20180601:1.14
	sid-snapshot-20180501:1.14
	cgen-snapshot-20180501:1.14
	sid-snapshot-20180401:1.14
	cgen-snapshot-20180401:1.14
	sid-snapshot-20180301:1.14
	cgen-snapshot-20180301:1.14
	sid-snapshot-20180201:1.14
	cgen-snapshot-20180201:1.14
	sid-snapshot-20180101:1.14
	cgen-snapshot-20180101:1.14
	sid-snapshot-20171201:1.14
	cgen-snapshot-20171201:1.14
	sid-snapshot-20171101:1.14
	cgen-snapshot-20171101:1.14
	sid-snapshot-20171001:1.14
	cgen-snapshot-20171001:1.14
	sid-snapshot-20170901:1.14
	cgen-snapshot-20170901:1.14
	sid-snapshot-20170801:1.14
	cgen-snapshot-20170801:1.14
	sid-snapshot-20170701:1.14
	cgen-snapshot-20170701:1.14
	sid-snapshot-20170601:1.14
	cgen-snapshot-20170601:1.14
	sid-snapshot-20170501:1.14
	cgen-snapshot-20170501:1.14
	sid-snapshot-20170401:1.14
	cgen-snapshot-20170401:1.14
	sid-snapshot-20170301:1.14
	cgen-snapshot-20170301:1.14
	sid-snapshot-20170201:1.14
	cgen-snapshot-20170201:1.14
	sid-snapshot-20170101:1.14
	cgen-snapshot-20170101:1.14
	sid-snapshot-20161201:1.14
	cgen-snapshot-20161201:1.14
	sid-snapshot-20161101:1.14
	cgen-snapshot-20161101:1.14
	sid-snapshot-20160901:1.14
	cgen-snapshot-20160901:1.14
	sid-snapshot-20160801:1.14
	cgen-snapshot-20160801:1.14
	sid-snapshot-20160701:1.14
	cgen-snapshot-20160701:1.14
	sid-snapshot-20160601:1.14
	cgen-snapshot-20160601:1.14
	sid-snapshot-20160501:1.14
	cgen-snapshot-20160501:1.14
	sid-snapshot-20160401:1.14
	cgen-snapshot-20160401:1.14
	sid-snapshot-20160301:1.14
	cgen-snapshot-20160301:1.14
	sid-snapshot-20160201:1.14
	cgen-snapshot-20160201:1.14
	sid-snapshot-20160101:1.14
	cgen-snapshot-20160101:1.14
	sid-snapshot-20151201:1.14
	cgen-snapshot-20151201:1.14
	sid-snapshot-20151101:1.14
	cgen-snapshot-20151101:1.14
	sid-snapshot-20151001:1.14
	cgen-snapshot-20151001:1.14
	sid-snapshot-20150901:1.14
	cgen-snapshot-20150901:1.14
	sid-snapshot-20150801:1.14
	cgen-snapshot-20150801:1.14
	sid-snapshot-20150701:1.14
	cgen-snapshot-20150701:1.14
	sid-snapshot-20150601:1.14
	cgen-snapshot-20150601:1.14
	sid-snapshot-20150501:1.14
	cgen-snapshot-20150501:1.14
	sid-snapshot-20150401:1.14
	cgen-snapshot-20150401:1.14
	sid-snapshot-20150301:1.14
	cgen-snapshot-20150301:1.14
	sid-snapshot-20150201:1.14
	cgen-snapshot-20150201:1.14
	sid-snapshot-20150101:1.14
	cgen-snapshot-20150101:1.14
	sid-snapshot-20141201:1.14
	cgen-snapshot-20141201:1.14
	sid-snapshot-20141101:1.14
	cgen-snapshot-20141101:1.14
	sid-snapshot-20141001:1.14
	cgen-snapshot-20141001:1.14
	sid-snapshot-20140901:1.14
	cgen-snapshot-20140901:1.14
	sid-snapshot-20140801:1.14
	cgen-snapshot-20140801:1.14
	sid-snapshot-20140701:1.14
	cgen-snapshot-20140701:1.14
	sid-snapshot-20140601:1.14
	cgen-snapshot-20140601:1.14
	sid-snapshot-20140501:1.14
	cgen-snapshot-20140501:1.14
	sid-snapshot-20140401:1.14
	cgen-snapshot-20140401:1.14
	sid-snapshot-20140301:1.14
	cgen-snapshot-20140301:1.14
	sid-snapshot-20140201:1.14
	cgen-snapshot-20140201:1.14
	sid-snapshot-20140101:1.14
	cgen-snapshot-20140101:1.14
	sid-snapshot-20131201:1.14
	cgen-snapshot-20131201:1.14
	sid-snapshot-20131101:1.14
	cgen-snapshot-20131101:1.14
	sid-snapshot-20131001:1.14
	cgen-snapshot-20131001:1.14
	binutils-2_24-branch:1.14.0.22
	binutils-2_24-branchpoint:1.14
	binutils-2_21_1:1.14
	sid-snapshot-20130901:1.14
	cgen-snapshot-20130901:1.14
	gdb_7_6_1-2013-08-30-release:1.14
	sid-snapshot-20130801:1.14
	cgen-snapshot-20130801:1.14
	sid-snapshot-20130701:1.14
	cgen-snapshot-20130701:1.14
	sid-snapshot-20130601:1.14
	cgen-snapshot-20130601:1.14
	sid-snapshot-20130501:1.14
	cgen-snapshot-20130501:1.14
	gdb_7_6-2013-04-26-release:1.14
	sid-snapshot-20130401:1.14
	cgen-snapshot-20130401:1.14
	binutils-2_23_2:1.14
	gdb_7_6-branch:1.14.0.20
	gdb_7_6-2013-03-12-branchpoint:1.14
	sid-snapshot-20130301:1.14
	cgen-snapshot-20130301:1.14
	sid-snapshot-20130201:1.14
	cgen-snapshot-20130201:1.14
	sid-snapshot-20130101:1.14
	cgen-snapshot-20130101:1.14
	sid-snapshot-20121201:1.14
	cgen-snapshot-20121201:1.14
	gdb_7_5_1-2012-11-29-release:1.14
	binutils-2_23_1:1.14
	sid-snapshot-20121101:1.14
	cgen-snapshot-20121101:1.14
	binutils-2_23:1.14
	sid-snapshot-20121001:1.14
	cgen-snapshot-20121001:1.14
	sid-snapshot-20120901:1.14
	cgen-snapshot-20120901:1.14
	gdb_7_5-2012-08-17-release:1.14
	sid-snapshot-20120801:1.14
	cgen-snapshot-20120801:1.14
	binutils-2_23-branch:1.14.0.18
	binutils-2_23-branchpoint:1.14
	gdb_7_5-branch:1.14.0.16
	gdb_7_5-2012-07-18-branchpoint:1.14
	sid-snapshot-20120701:1.14
	cgen-snapshot-20120701:1.14
	sid-snapshot-20120601:1.14
	cgen-snapshot-20120601:1.14
	sid-snapshot-20120501:1.14
	cgen-snapshot-20120501:1.14
	binutils-2_22_branch:1.14.0.14
	gdb_7_4_1-2012-04-26-release:1.14
	sid-snapshot-20120401:1.14
	cgen-snapshot-20120401:1.14
	sid-snapshot-20120301:1.14
	cgen-snapshot-20120301:1.14
	sid-snapshot-20120201:1.14
	cgen-snapshot-20120201:1.14
	gdb_7_4-2012-01-24-release:1.14
	sid-snapshot-20120101:1.14
	cgen-snapshot-20120101:1.14
	gdb_7_4-branch:1.14.0.12
	gdb_7_4-2011-12-13-branchpoint:1.14
	sid-snapshot-20111201:1.14
	cgen-snapshot-20111201:1.14
	binutils-2_22:1.14
	sid-snapshot-20111101:1.14
	cgen-snapshot-20111101:1.14
	sid-snapshot-20111001:1.14
	cgen-snapshot-20111001:1.14
	binutils-2_22-branch:1.14.0.10
	binutils-2_22-branchpoint:1.14
	gdb_7_3_1-2011-09-04-release:1.14
	sid-snapshot-20110901:1.14
	cgen-snapshot-20110901:1.14
	sid-snapshot-20110801:1.14
	cgen-snapshot-20110801:1.14
	gdb_7_3-2011-07-26-release:1.14
	sid-snapshot-20110701:1.14
	cgen-snapshot-20110701:1.14
	sid-snapshot-20110601:1.14
	cgen-snapshot-20110601:1.14
	sid-snapshot-20110501:1.14
	cgen-snapshot-20110501:1.14
	gdb_7_3-branch:1.14.0.8
	gdb_7_3-2011-04-01-branchpoint:1.14
	sid-snapshot-20110401:1.14
	cgen-snapshot-20110401:1.14
	sid-snapshot-20110301:1.14
	cgen-snapshot-20110301:1.14
	sid-snapshot-20110201:1.14
	cgen-snapshot-20110201:1.14
	sid-snapshot-20110101:1.14
	cgen-snapshot-20110101:1.14
	binutils-2_21:1.14
	sid-snapshot-20101201:1.14
	cgen-snapshot-20101201:1.14
	binutils-2_21-branch:1.14.0.6
	binutils-2_21-branchpoint:1.14
	sid-snapshot-20101101:1.14
	cgen-snapshot-20101101:1.14
	sid-snapshot-20101001:1.14
	cgen-snapshot-20101001:1.14
	binutils-2_20_1:1.13
	gdb_7_2-2010-09-02-release:1.14
	sid-snapshot-20100901:1.14
	cgen-snapshot-20100901:1.14
	sid-snapshot-20100801:1.14
	cgen-snapshot-20100801:1.14
	gdb_7_2-branch:1.14.0.4
	gdb_7_2-2010-07-07-branchpoint:1.14
	sid-snapshot-20100701:1.14
	cgen-snapshot-20100701:1.14
	sid-snapshot-20100601:1.14
	cgen-snapshot-20100601:1.14
	sid-snapshot-20100501:1.14
	cgen-snapshot-20100501:1.14
	sid-snapshot-20100401:1.14
	cgen-snapshot-20100401:1.14
	gdb_7_1-2010-03-18-release:1.14
	sid-snapshot-20100301:1.14
	cgen-snapshot-20100301:1.14
	gdb_7_1-branch:1.14.0.2
	gdb_7_1-2010-02-18-branchpoint:1.14
	sid-snapshot-20100201:1.13
	cgen-snapshot-20100201:1.13
	sid-snapshot-20100101:1.13
	cgen-snapshot-20100101:1.13
	gdb_7_0_1-2009-12-22-release:1.13
	sid-snapshot-20091201:1.13
	cgen-snapshot-20091201:1.13
	sid-snapshot-20091101:1.13
	cgen-snapshot-20091101:1.13
	binutils-2_20:1.13
	gdb_7_0-2009-10-06-release:1.13
	sid-snapshot-20091001:1.13
	cgen-snapshot-20091001:1.13
	gdb_7_0-branch:1.13.0.4
	gdb_7_0-2009-09-16-branchpoint:1.13
	arc-sim-20090309:1.12
	binutils-arc-20081103-branch:1.12.0.32
	binutils-arc-20081103-branchpoint:1.12
	binutils-2_20-branch:1.13.0.2
	binutils-2_20-branchpoint:1.13
	sid-snapshot-20090901:1.12
	cgen-snapshot-20090901:1.12
	sid-snapshot-20090801:1.12
	cgen-snapshot-20090801:1.12
	msnyder-checkpoint-072509-branch:1.12.0.30
	msnyder-checkpoint-072509-branchpoint:1.12
	sid-snapshot-20090701:1.12
	cgen-snapshot-20090701:1.12
	dje-cgen-play1-branch:1.12.0.28
	dje-cgen-play1-branchpoint:1.12
	cgen-1_1-branch:1.12.0.26
	cgen-1_1-branchpoint:1.12
	sid-snapshot-20090601:1.12
	cgen-snapshot-20090601:1.12
	sid-snapshot-20090501:1.12
	cgen-snapshot-20090501:1.12
	sid-snapshot-20090401:1.12
	cgen-snapshot-20090401:1.12
	arc-20081103-branch:1.12.0.24
	arc-20081103-branchpoint:1.12
	arc-insight_6_8-branch:1.12.0.22
	arc-insight_6_8-branchpoint:1.12
	insight_6_8-branch:1.12.0.20
	insight_6_8-branchpoint:1.12
	sid-snapshot-20090301:1.12
	cgen-snapshot-20090301:1.12
	binutils-2_19_1:1.12
	sid-snapshot-20090201:1.12
	cgen-snapshot-20090201:1.12
	sid-snapshot-20090101:1.12
	cgen-snapshot-20090101:1.12
	reverse-20081226-branch:1.12.0.18
	reverse-20081226-branchpoint:1.12
	sid-snapshot-20081201:1.12
	cgen-snapshot-20081201:1.12
	multiprocess-20081120-branch:1.12.0.16
	multiprocess-20081120-branchpoint:1.12
	sid-snapshot-20081101:1.12
	cgen-snapshot-20081101:1.12
	binutils-2_19:1.12
	sid-snapshot-20081001:1.12
	cgen-snapshot-20081001:1.12
	reverse-20080930-branch:1.12.0.14
	reverse-20080930-branchpoint:1.12
	binutils-2_19-branch:1.12.0.12
	binutils-2_19-branchpoint:1.12
	sid-snapshot-20080901:1.12
	cgen-snapshot-20080901:1.12
	sid-snapshot-20080801:1.12
	cgen-snapshot-20080801:1.12
	reverse-20080717-branch:1.12.0.10
	reverse-20080717-branchpoint:1.12
	sid-snapshot-20080701:1.12
	cgen-snapshot-20080701:1.12
	msnyder-reverse-20080609-branch:1.12.0.8
	msnyder-reverse-20080609-branchpoint:1.12
	drow-reverse-20070409-branch:1.11.0.2
	drow-reverse-20070409-branchpoint:1.11
	sid-snapshot-20080601:1.12
	cgen-snapshot-20080601:1.12
	sid-snapshot-20080501:1.12
	cgen-snapshot-20080501:1.12
	sid-snapshot-20080403:1.12
	sid-snapshot-20080401:1.12
	cgen-snapshot-20080401:1.12
	gdb_6_8-2008-03-27-release:1.12
	sid-snapshot-20080301:1.12
	cgen-snapshot-20080301:1.12
	gdb_6_8-branch:1.12.0.6
	gdb_6_8-2008-02-26-branchpoint:1.12
	sid-snapshot-20080201:1.12
	cgen-snapshot-20080201:1.12
	sid-snapshot-20080101:1.12
	cgen-snapshot-20080101:1.12
	sid-snapshot-20071201:1.12
	cgen-snapshot-20071201:1.12
	sid-snapshot-20071101:1.12
	cgen-snapshot-20071101:1.12
	gdb_6_7_1-2007-10-29-release:1.12
	gdb_6_7-2007-10-10-release:1.12
	sid-snapshot-20071001:1.12
	cgen-snapshot-20071001:1.12
	gdb_6_7-branch:1.12.0.4
	gdb_6_7-2007-09-07-branchpoint:1.12
	binutils-2_18:1.12
	binutils-2_18-branch:1.12.0.2
	binutils-2_18-branchpoint:1.12
	insight_6_6-20070208-release:1.10
	binutils-csl-coldfire-4_1-32:1.10
	binutils-csl-sourcerygxx-4_1-32:1.10
	gdb_6_6-2006-12-18-release:1.10
	binutils-csl-innovasic-fido-3_4_4-33:1.10
	binutils-csl-sourcerygxx-3_4_4-32:1.4
	binutils-csl-coldfire-4_1-30:1.10
	binutils-csl-sourcerygxx-4_1-30:1.10
	binutils-csl-coldfire-4_1-28:1.10
	binutils-csl-sourcerygxx-4_1-29:1.10
	binutils-csl-sourcerygxx-4_1-28:1.10
	gdb_6_6-branch:1.10.0.28
	gdb_6_6-2006-11-15-branchpoint:1.10
	binutils-csl-arm-2006q3-27:1.10
	binutils-csl-sourcerygxx-4_1-27:1.10
	binutils-csl-arm-2006q3-26:1.10
	binutils-csl-sourcerygxx-4_1-26:1.10
	binutils-csl-sourcerygxx-4_1-25:1.10
	binutils-csl-sourcerygxx-4_1-24:1.10
	binutils-csl-sourcerygxx-4_1-23:1.10
	insight_6_5-20061003-release:1.10
	gdb-csl-symbian-6_4_50_20060226-12:1.10
	binutils-csl-sourcerygxx-4_1-21:1.10
	binutils-csl-arm-2006q3-21:1.10
	binutils-csl-sourcerygxx-4_1-22:1.10
	binutils-csl-palmsource-arm-prelinker-1_0-1:1.10
	binutils-csl-sourcerygxx-4_1-20:1.10
	binutils-csl-arm-2006q3-19:1.10
	binutils-csl-sourcerygxx-4_1-19:1.10
	binutils-csl-sourcerygxx-4_1-18:1.10
	binutils-csl-renesas-4_1-9:1.10
	gdb-csl-sourcerygxx-3_4_4-25:1.10
	binutils-csl-sourcerygxx-3_4_4-25:1.4
	nickrob-async-20060828-mergepoint:1.10
	gdb-csl-symbian-6_4_50_20060226-11:1.10
	binutils-csl-renesas-4_1-8:1.10
	binutils-csl-renesas-4_1-7:1.10
	binutils-csl-renesas-4_1-6:1.10
	gdb-csl-sourcerygxx-4_1-17:1.10
	binutils-csl-sourcerygxx-4_1-17:1.10
	gdb-csl-20060226-branch-local-2:1.10
	gdb-csl-sourcerygxx-4_1-14:1.10
	binutils-csl-sourcerygxx-4_1-14:1.10
	binutils-csl-sourcerygxx-4_1-15:1.10
	gdb-csl-sourcerygxx-4_1-13:1.10
	binutils-csl-sourcerygxx-4_1-13:1.10
	binutils-2_17:1.10
	gdb-csl-sourcerygxx-4_1-12:1.10
	binutils-csl-sourcerygxx-4_1-12:1.10
	gdb-csl-sourcerygxx-3_4_4-21:1.10
	binutils-csl-sourcerygxx-3_4_4-21:1.10
	gdb_6_5-20060621-release:1.10
	binutils-csl-wrs-linux-3_4_4-24:1.4
	binutils-csl-wrs-linux-3_4_4-23:1.4
	gdb-csl-sourcerygxx-4_1-9:1.10
	binutils-csl-sourcerygxx-4_1-9:1.10
	gdb-csl-sourcerygxx-4_1-8:1.10
	binutils-csl-sourcerygxx-4_1-8:1.10
	gdb-csl-sourcerygxx-4_1-7:1.10
	binutils-csl-sourcerygxx-4_1-7:1.10
	gdb-csl-arm-2006q1-6:1.10
	binutils-csl-arm-2006q1-6:1.10
	gdb-csl-sourcerygxx-4_1-6:1.10
	binutils-csl-sourcerygxx-4_1-6:1.10
	binutils-csl-wrs-linux-3_4_4-22:1.4
	gdb-csl-symbian-6_4_50_20060226-10:1.10
	gdb-csl-symbian-6_4_50_20060226-9:1.10
	gdb-csl-symbian-6_4_50_20060226-8:1.10
	gdb-csl-coldfire-4_1-11:1.10
	binutils-csl-coldfire-4_1-11:1.10
	gdb-csl-sourcerygxx-3_4_4-19:1.10
	binutils-csl-sourcerygxx-3_4_4-19:1.10
	gdb-csl-coldfire-4_1-10:1.10
	gdb_6_5-branch:1.10.0.26
	gdb_6_5-2006-05-14-branchpoint:1.10
	binutils-csl-coldfire-4_1-10:1.10
	gdb-csl-sourcerygxx-4_1-5:1.10
	binutils-csl-sourcerygxx-4_1-5:1.10
	nickrob-async-20060513-branch:1.10.0.24
	nickrob-async-20060513-branchpoint:1.10
	gdb-csl-sourcerygxx-4_1-4:1.10
	binutils-csl-sourcerygxx-4_1-4:1.10
	msnyder-reverse-20060502-branch:1.10.0.22
	msnyder-reverse-20060502-branchpoint:1.10
	binutils-csl-wrs-linux-3_4_4-21:1.4
	gdb-csl-morpho-4_1-4:1.10
	binutils-csl-morpho-4_1-4:1.10
	gdb-csl-sourcerygxx-3_4_4-17:1.10
	binutils-csl-sourcerygxx-3_4_4-17:1.10
	binutils-csl-wrs-linux-3_4_4-20:1.4
	readline_5_1-import-branch:1.10.0.20
	readline_5_1-import-branchpoint:1.10
	gdb-csl-20060226-branch-merge-to-csl-symbian-1:1.10
	binutils-2_17-branch:1.10.0.18
	binutils-2_17-branchpoint:1.10
	gdb-csl-symbian-20060226-branch:1.10.0.16
	gdb-csl-symbian-20060226-branchpoint:1.10
	gdb-csl-20060226-branch-merge-to-csl-local-1:1.10
	msnyder-reverse-20060331-branch:1.10.0.14
	msnyder-reverse-20060331-branchpoint:1.10
	binutils-csl-2_17-branch:1.10.0.12
	binutils-csl-2_17-branchpoint:1.10
	gdb-csl-available-20060303-branch:1.10.0.10
	gdb-csl-available-20060303-branchpoint:1.10
	gdb-csl-20060226-branch:1.10.0.8
	gdb-csl-20060226-branchpoint:1.10
	gdb_6_4-20051202-release:1.10
	msnyder-fork-checkpoint-branch:1.10.0.6
	msnyder-fork-checkpoint-branchpoint:1.10
	gdb-csl-gxxpro-6_3-branch:1.10.0.4
	gdb-csl-gxxpro-6_3-branchpoint:1.10
	gdb_6_4-branch:1.10.0.2
	gdb_6_4-2005-11-01-branchpoint:1.10
	gdb-csl-arm-20051020-branch:1.9.0.2
	gdb-csl-arm-20051020-branchpoint:1.9
	binutils-csl-gxxpro-3_4-branch:1.4.0.8
	binutils-csl-gxxpro-3_4-branchpoint:1.4
	binutils-2_16_1:1.4
	msnyder-tracepoint-checkpoint-branch:1.5.0.2
	msnyder-tracepoint-checkpoint-branchpoint:1.5
	gdb-csl-arm-20050325-2005-q1b:1.4
	binutils-csl-arm-2005q1b:1.4
	binutils-2_16:1.4
	gdb-csl-arm-20050325-2005-q1a:1.4
	binutils-csl-arm-2005q1a:1.4
	csl-arm-20050325-branch:1.4.0.6
	csl-arm-20050325-branchpoint:1.4
	binutils-csl-arm-2005q1-branch:1.4.0.4
	binutils-csl-arm-2005q1-branchpoint:1.4
	binutils-2_16-branch:1.4.0.2
	binutils-2_16-branchpoint:1.4
	csl-arm-2004-q3d:1.3
	gdb_6_3-20041109-release:1.3
	gdb_6_3-branch:1.3.0.4
	gdb_6_3-20041019-branchpoint:1.3
	csl-arm-2004-q3:1.3
	drow_intercu-merge-20040921:1.3
	drow_intercu-merge-20040915:1.3
	jimb-gdb_6_2-e500-branch:1.3.0.6
	jimb-gdb_6_2-e500-branchpoint:1.3
	gdb_6_2-20040730-release:1.3
	gdb_6_2-branch:1.3.0.2
	gdb_6_2-2004-07-10-gmt-branchpoint:1.3
	gdb_6_1_1-20040616-release:1.2
	csl-arm-2004-q1a:1.3
	csl-arm-2004-q1:1.3
	gdb_6_1-2004-04-05-release:1.2
	drow_intercu-merge-20040402:1.3
	drow_intercu-merge-20040327:1.2
	ezannoni_pie-20040323-branch:1.2.0.6
	ezannoni_pie-20040323-branchpoint:1.2
	cagney_tramp-20040321-mergepoint:1.2
	cagney_tramp-20040309-branch:1.2.0.4
	cagney_tramp-20040309-branchpoint:1.2
	gdb_6_1-branch:1.2.0.2
	gdb_6_1-2004-03-01-gmt-branchpoint:1.2
	drow_intercu-20040221-branch:1.1.0.2
	drow_intercu-20040221-branchpoint:1.1
	binutils_latest_snapshot:1.14;
locks; strict;
comment	@# @;


1.14
date	2010.02.12.04.38.21;	author devans;	state Exp;
branches;
next	1.13;

1.13
date	2009.09.02.07.21.03;	author amodra;	state Exp;
branches;
next	1.12;

1.12
date	2007.07.05.09.49.03;	author nickc;	state Exp;
branches;
next	1.11;

1.11
date	2007.03.08.06.56.20;	author amodra;	state Exp;
branches;
next	1.10;

1.10
date	2005.10.26.07.49.05;	author amodra;	state Exp;
branches;
next	1.9;

1.9
date	2005.10.19.14.44.17;	author nickc;	state Exp;
branches;
next	1.8;

1.8
date	2005.10.18.07.53.17;	author nickc;	state Exp;
branches;
next	1.7;

1.7
date	2005.10.14.08.33.27;	author nickc;	state Exp;
branches;
next	1.6;

1.6
date	2005.07.01.11.16.30;	author nickc;	state Exp;
branches;
next	1.5;

1.5
date	2005.05.10.10.21.07;	author nickc;	state Exp;
branches;
next	1.4;

1.4
date	2005.02.23.16.04.37;	author nickc;	state Exp;
branches;
next	1.3;

1.3
date	2004.03.30.09.29.18;	author nickc;	state Exp;
branches;
next	1.2;

1.2
date	2004.02.23.16.46.46;	author nickc;	state Exp;
branches;
next	1.1;

1.1
date	2004.02.20.16.26.45;	author cagney;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2004.03.27.17.37.40;	author drow;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2004.04.02.16.47.41;	author drow;	state Exp;
branches;
next	;


desc
@@


1.14
log
@	* m32r.cpu (HASH-PREFIX): Delete.
	(duhpo, dshpo): New pmacros.
	(simm8, simm16): Delete HASH-PREFIX attribute, define with dshpo.
	(uimm3, uimm4, uimm5, uimm8, uimm16, imm1): Delete HASH-PREFIX
	attribute, define with dshpo.
	(uimm24): Delete HASH-PREFIX attribute.
	* m32r.opc (CGEN_PRINT_NORMAL): Delete.
	(print_signed_with_hash_prefix): New function.
	(print_unsigned_with_hash_prefix): New function.
	* xc16x.cpu (dowh): New pmacro.
	(upof16): Define with dowh, specify print handler.
	(qbit, qlobit, qhibit): Ditto.
	(upag16): Ditto.
	* xc16x.opc (CGEN_PRINT_NORMAL): Delete.
	(print_with_dot_prefix): New functions.
	(print_with_pof_prefix, print_with_pag_prefix): New functions.
@
text
@/* M32R opcode support.  -*- C -*-

   Copyright 1998, 1999, 2000, 2001, 2004, 2005, 2007, 2009
   Free Software Foundation, Inc.

   Contributed by Red Hat Inc; developed under contract from
   Mitsubishi Electric Corporation.

   This file is part of the GNU Binutils.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,
   MA 02110-1301, USA.  */


/* This file is an addendum to m32r.cpu.  Heavy use of C code isn't
   appropriate in .cpu files, so it resides here.  This especially applies
   to assembly/disassembly where parsing/printing can be quite involved.
   Such things aren't really part of the specification of the cpu, per se,
   so .cpu files provide the general framework and .opc files handle the
   nitty-gritty details as necessary.

   Each section is delimited with start and end markers.

   <arch>-opc.h additions use: "-- opc.h"
   <arch>-opc.c additions use: "-- opc.c"
   <arch>-asm.c additions use: "-- asm.c"
   <arch>-dis.c additions use: "-- dis.c"
   <arch>-ibd.h additions use: "-- ibd.h"  */

/* -- opc.h */

#undef  CGEN_DIS_HASH_SIZE
#define CGEN_DIS_HASH_SIZE 256
#undef  CGEN_DIS_HASH
#if 0
#define X(b) (((unsigned char *) (b))[0] & 0xf0)
#define CGEN_DIS_HASH(buffer, value) \
(X (buffer) | \
 (X (buffer) == 0x40 || X (buffer) == 0xe0 || X (buffer) == 0x60 || X (buffer) == 0x50 ? 0 \
  : X (buffer) == 0x70 || X (buffer) == 0xf0 ? (((unsigned char *) (buffer))[0] & 0xf) \
  : X (buffer) == 0x30 ? ((((unsigned char *) (buffer))[1] & 0x70) >> 4) \
  : ((((unsigned char *) (buffer))[1] & 0xf0) >> 4)))
#else
#define CGEN_DIS_HASH(buffer, value) m32r_cgen_dis_hash (buffer, value)
extern unsigned int m32r_cgen_dis_hash (const char *, CGEN_INSN_INT);
#endif

/* -- */

/* -- opc.c */
unsigned int
m32r_cgen_dis_hash (const char * buf ATTRIBUTE_UNUSED, CGEN_INSN_INT value)
{
  unsigned int x;

  if (value & 0xffff0000) /* 32bit instructions.  */
    value = (value >> 16) & 0xffff;

  x = (value >> 8) & 0xf0;
  if (x == 0x40 || x == 0xe0 || x == 0x60 || x == 0x50)
    return x;

  if (x == 0x70 || x == 0xf0)
    return x | ((value >> 8) & 0x0f);

  if (x == 0x30)
    return x | ((value & 0x70) >> 4);
  else
    return x | ((value & 0xf0) >> 4);
}

/* -- */

/* -- asm.c */
static const char * MISSING_CLOSING_PARENTHESIS = N_("missing `)'");

/* Handle '#' prefixes (i.e. skip over them).  */

static const char *
parse_hash (CGEN_CPU_DESC cd ATTRIBUTE_UNUSED,
	    const char **strp,
	    int opindex ATTRIBUTE_UNUSED,
	    long *valuep ATTRIBUTE_UNUSED)
{
  if (**strp == '#')
    ++*strp;
  return NULL;
}

/* Handle shigh(), high().  */

static const char *
parse_hi16 (CGEN_CPU_DESC cd,
	    const char **strp,
	    int opindex,
	    unsigned long *valuep)
{
  const char *errmsg;
  enum cgen_parse_operand_result result_type;
  bfd_vma value;

  if (**strp == '#')
    ++*strp;

  if (strncasecmp (*strp, "high(", 5) == 0)
    {
      *strp += 5;
      errmsg = cgen_parse_address (cd, strp, opindex, BFD_RELOC_M32R_HI16_ULO,
				   & result_type, & value);
      if (**strp != ')')
	return MISSING_CLOSING_PARENTHESIS;
      ++*strp;
      if (errmsg == NULL
	  && result_type == CGEN_PARSE_OPERAND_RESULT_NUMBER)
	{
	  value >>= 16;
	  value &= 0xffff;
	}
      *valuep = value;
      return errmsg;
    }
  else if (strncasecmp (*strp, "shigh(", 6) == 0)
    {
      *strp += 6;
      errmsg = cgen_parse_address (cd, strp, opindex, BFD_RELOC_M32R_HI16_SLO,
				   & result_type, & value);
      if (**strp != ')')
	return MISSING_CLOSING_PARENTHESIS;
      ++*strp;
      if (errmsg == NULL
	  && result_type == CGEN_PARSE_OPERAND_RESULT_NUMBER)
	{
	  value += 0x8000;
	  value >>= 16;
	  value &= 0xffff;
	}
      *valuep = value;
      return errmsg;
    }

  return cgen_parse_unsigned_integer (cd, strp, opindex, valuep);
}

/* Handle low() in a signed context.  Also handle sda().
   The signedness of the value doesn't matter to low(), but this also
   handles the case where low() isn't present.  */

static const char *
parse_slo16 (CGEN_CPU_DESC cd,
	     const char ** strp,
	     int opindex,
	     long * valuep)
{
  const char *errmsg;
  enum cgen_parse_operand_result result_type;
  bfd_vma value;

  if (**strp == '#')
    ++*strp;

  if (strncasecmp (*strp, "low(", 4) == 0)
    {
      *strp += 4;
      errmsg = cgen_parse_address (cd, strp, opindex, BFD_RELOC_M32R_LO16,
				   & result_type, & value);
      if (**strp != ')')
	return MISSING_CLOSING_PARENTHESIS;
      ++*strp;
      if (errmsg == NULL
	  && result_type == CGEN_PARSE_OPERAND_RESULT_NUMBER)
	value = ((value & 0xffff) ^ 0x8000) - 0x8000;
      *valuep = value;
      return errmsg;
    }

  if (strncasecmp (*strp, "sda(", 4) == 0)
    {
      *strp += 4;
      errmsg = cgen_parse_address (cd, strp, opindex, BFD_RELOC_M32R_SDA16,
				   NULL, & value);
      if (**strp != ')')
	return MISSING_CLOSING_PARENTHESIS;
      ++*strp;
      *valuep = value;
      return errmsg;
    }

  return cgen_parse_signed_integer (cd, strp, opindex, valuep);
}

/* Handle low() in an unsigned context.
   The signedness of the value doesn't matter to low(), but this also
   handles the case where low() isn't present.  */

static const char *
parse_ulo16 (CGEN_CPU_DESC cd,
	     const char **strp,
	     int opindex,
	     unsigned long *valuep)
{
  const char *errmsg;
  enum cgen_parse_operand_result result_type;
  bfd_vma value;

  if (**strp == '#')
    ++*strp;

  if (strncasecmp (*strp, "low(", 4) == 0)
    {
      *strp += 4;
      errmsg = cgen_parse_address (cd, strp, opindex, BFD_RELOC_M32R_LO16,
				   & result_type, & value);
      if (**strp != ')')
	return MISSING_CLOSING_PARENTHESIS;
      ++*strp;
      if (errmsg == NULL
	  && result_type == CGEN_PARSE_OPERAND_RESULT_NUMBER)
	value &= 0xffff;
      *valuep = value;
      return errmsg;
    }

  return cgen_parse_unsigned_integer (cd, strp, opindex, valuep);
}

/* -- */

/* -- dis.c */

/* Print signed operands with '#' prefixes.  */

static void
print_signed_with_hash_prefix (CGEN_CPU_DESC cd ATTRIBUTE_UNUSED,
			       void * dis_info,
			       long value,
			       unsigned int attrs ATTRIBUTE_UNUSED,
			       bfd_vma pc ATTRIBUTE_UNUSED,
			       int length ATTRIBUTE_UNUSED)
{
  disassemble_info *info = (disassemble_info *) dis_info;

  (*info->fprintf_func) (info->stream, "#");
  (*info->fprintf_func) (info->stream, "%ld", value);
}

/* Print unsigned operands with '#' prefixes.  */

static void
print_unsigned_with_hash_prefix (CGEN_CPU_DESC cd ATTRIBUTE_UNUSED,
				 void * dis_info,
				 long value,
				 unsigned int attrs ATTRIBUTE_UNUSED,
				 bfd_vma pc ATTRIBUTE_UNUSED,
				 int length ATTRIBUTE_UNUSED)
{
  disassemble_info *info = (disassemble_info *) dis_info;

  (*info->fprintf_func) (info->stream, "#");
  (*info->fprintf_func) (info->stream, "0x%lx", value);
}

/* Handle '#' prefixes as operands.  */

static void
print_hash (CGEN_CPU_DESC cd ATTRIBUTE_UNUSED,
	    void * dis_info,
	    long value ATTRIBUTE_UNUSED,
	    unsigned int attrs ATTRIBUTE_UNUSED,
	    bfd_vma pc ATTRIBUTE_UNUSED,
	    int length ATTRIBUTE_UNUSED)
{
  disassemble_info *info = (disassemble_info *) dis_info;

  (*info->fprintf_func) (info->stream, "#");
}

#undef  CGEN_PRINT_INSN
#define CGEN_PRINT_INSN my_print_insn

static int
my_print_insn (CGEN_CPU_DESC cd,
	       bfd_vma pc,
	       disassemble_info *info)
{
  bfd_byte buffer[CGEN_MAX_INSN_SIZE];
  bfd_byte *buf = buffer;
  int status;
  int buflen = (pc & 3) == 0 ? 4 : 2;
  int big_p = CGEN_CPU_INSN_ENDIAN (cd) == CGEN_ENDIAN_BIG;
  bfd_byte *x;

  /* Read the base part of the insn.  */

  status = (*info->read_memory_func) (pc - ((!big_p && (pc & 3) != 0) ? 2 : 0),
				      buf, buflen, info);
  if (status != 0)
    {
      (*info->memory_error_func) (status, pc, info);
      return -1;
    }

  /* 32 bit insn?  */
  x = (big_p ? &buf[0] : &buf[3]);
  if ((pc & 3) == 0 && (*x & 0x80) != 0)
    return print_insn (cd, pc, info, buf, buflen);

  /* Print the first insn.  */
  if ((pc & 3) == 0)
    {
      buf += (big_p ? 0 : 2);
      if (print_insn (cd, pc, info, buf, 2) == 0)
	(*info->fprintf_func) (info->stream, UNKNOWN_INSN_MSG);
      buf += (big_p ? 2 : -2);
    }

  x = (big_p ? &buf[0] : &buf[1]);
  if (*x & 0x80)
    {
      /* Parallel.  */
      (*info->fprintf_func) (info->stream, " || ");
      *x &= 0x7f;
    }
  else
    (*info->fprintf_func) (info->stream, " -> ");

  /* The "& 3" is to pass a consistent address.
     Parallel insns arguably both begin on the word boundary.
     Also, branch insns are calculated relative to the word boundary.  */
  if (print_insn (cd, pc & ~ (bfd_vma) 3, info, buf, 2) == 0)
    (*info->fprintf_func) (info->stream, UNKNOWN_INSN_MSG);

  return (pc & 3) ? 2 : 4;
}

/* -- */
@


1.13
log
@update copyright dates
@
text
@a240 1
/* Immediate values are prefixed with '#'.  */
d242 31
a272 7
#define CGEN_PRINT_NORMAL(cd, info, value, attrs, pc, length)	\
  do								\
    {								\
      if (CGEN_BOOL_ATTR ((attrs), CGEN_OPERAND_HASH_PREFIX))	\
	(*info->fprintf_func) (info->stream, "#");		\
    }								\
  while (0)
@


1.12
log
@Change source files over to GPLv3.
@
text
@d3 1
a3 1
   Copyright 1998, 1999, 2000, 2001, 2004, 2005, 2007
@


1.11
log
@	* m32r.opc: Formatting.
@
text
@a10 4
   Contributed by Red Hat Inc; developed under contract from Fujitsu.

   This file is part of the GNU Binutils.

d13 1
a13 1
   the Free Software Foundation; either version 2 of the License, or
d26 1
@


1.10
log
@	* m32r.opc (parse_hi16): Do not assume a 32-bit host word size.
@
text
@d3 1
a3 1
   Copyright 1998, 1999, 2000, 2001, 2004, 2005
d129 1
a129 1
  	  && result_type == CGEN_PARSE_OPERAND_RESULT_NUMBER)
d141 1
a141 1
 				   & result_type, & value);
d147 3
a149 3
        {
          value += 0x8000;
          value >>= 16;
d151 1
a151 1
        }
d186 1
a186 1
	value = ((value & 0xffff) ^ 0x8000) - 0x8000;    
d250 1
a250 1
        (*info->fprintf_func) (info->stream, "#");		\
d287 1
a287 1
                                      buf, buflen, info);
@


1.9
log
@* m32r.opc (parse_slo16): Fix bad application of previous patch.
@
text
@d130 4
a133 1
	value >>= 16;
d148 1
a148 1
          value = value + (value & 0x8000 ? 0x10000 : 0);
d150 1
@


1.8
log
@m32r.opc (parse_slo16): Better version of previous patch.
@
text
@d182 1
a182 5
        {
	  value &= 0xffff;
          if (value & 0x8000)
	    value = ((value & 0xffff) ^ 0x8000) - 0x8000;
	}
@


1.7
log
@m32r.opc (parse_slo16): Do not assume a 32-bit host word size.
@
text
@d185 2
a186 2
	    value |= ~0xffff;
        }
@


1.6
log
@Update function declarations to ISO C90 formatting
@
text
@d185 1
a185 1
             value |= 0xffff0000;
@


1.5
log
@Update the address and phone number of the FSF organization
@
text
@d27 2
a28 1
   Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA 02110-1301, USA.  */
d59 2
a60 2
#define CGEN_DIS_HASH(buffer, value) m32r_cgen_dis_hash(buffer, value)
extern unsigned int m32r_cgen_dis_hash(const char *, CGEN_INSN_INT);
d67 1
a67 3
m32r_cgen_dis_hash (buf, value)
     const char * buf ATTRIBUTE_UNUSED;
     CGEN_INSN_INT value;
d70 2
a71 2
                                                                                
  if (value & 0xffff0000) /* 32bit instructions */
d73 2
a74 2
                                                                                
  x = (value>>8) & 0xf0;
d77 1
a77 1
                                                                                
d79 2
a80 2
    return x | ((value>>8) & 0x0f);
                                                                                
d86 1
a86 1
                                                                                
d90 1
a90 8
static const char * parse_hash
  PARAMS ((CGEN_CPU_DESC, const char **, int, long *));
static const char * parse_hi16
  PARAMS ((CGEN_CPU_DESC, const char **, int, unsigned long *));
static const char * parse_slo16
  PARAMS ((CGEN_CPU_DESC, const char **, int, long *));
static const char * parse_ulo16
  PARAMS ((CGEN_CPU_DESC, const char **, int, unsigned long *));
d95 4
a98 5
parse_hash (cd, strp, opindex, valuep)
     CGEN_CPU_DESC cd ATTRIBUTE_UNUSED;
     const char **strp;
     int opindex ATTRIBUTE_UNUSED;
     long *valuep ATTRIBUTE_UNUSED;
d108 4
a111 5
parse_hi16 (cd, strp, opindex, valuep)
     CGEN_CPU_DESC cd;
     const char **strp;
     int opindex;
     unsigned long *valuep;
d124 1
a124 1
				   &result_type, &value);
d126 1
a126 1
	return "missing `)'";
d138 1
a138 1
 				   &result_type, &value);
d140 1
a140 1
	return "missing `)'";
d160 4
a163 5
parse_slo16 (cd, strp, opindex, valuep)
     CGEN_CPU_DESC cd;
     const char **strp;
     int opindex;
     long *valuep;
d176 1
a176 1
				   &result_type, &value);
d178 1
a178 1
	return "missing `)'";
d195 1
a195 1
				   NULL, &value);
d197 1
a197 1
	return "missing `)'";
d211 4
a214 5
parse_ulo16 (cd, strp, opindex, valuep)
     CGEN_CPU_DESC cd;
     const char **strp;
     int opindex;
     unsigned long *valuep;
d227 1
a227 1
				   &result_type, &value);
d229 1
a229 1
	return "missing `)'";
a243 3
static void print_hash PARAMS ((CGEN_CPU_DESC, PTR, long, unsigned, bfd_vma, int));
static int my_print_insn PARAMS ((CGEN_CPU_DESC, bfd_vma, disassemble_info *));

d257 6
a262 7
print_hash (cd, dis_info, value, attrs, pc, length)
     CGEN_CPU_DESC cd ATTRIBUTE_UNUSED;
     PTR dis_info;
     long value ATTRIBUTE_UNUSED;
     unsigned int attrs ATTRIBUTE_UNUSED;
     bfd_vma pc ATTRIBUTE_UNUSED;
     int length ATTRIBUTE_UNUSED;
d265 1
d273 3
a275 4
my_print_insn (cd, pc, info)
     CGEN_CPU_DESC cd;
     bfd_vma pc;
     disassemble_info *info;
d277 2
a278 2
  char buffer[CGEN_MAX_INSN_SIZE];
  char *buf = buffer;
d282 1
a282 1
  char *x;
@


1.4
log
@Fix compile time warnings generated by gcc 4.0
@
text
@d27 1
a27 1
   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
@


1.3
log
@Fix bug parsing shigh(0xffff8000)
@
text
@d3 2
a4 1
   Copyright 1998, 1999, 2000, 2001, 2004 Free Software Foundation, Inc.
d92 1
a92 1
  PARAMS ((CGEN_CPU_DESC, const char **, int, unsigned long *));
d107 1
a107 1
     unsigned long *valuep ATTRIBUTE_UNUSED;
@


1.2
log
@Apply m32r patches from Renesas
@
text
@d3 1
a3 1
   Copyright 1998, 1999, 2000, 2001 Free Software Foundation, Inc.
d26 1
a26 3
   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

*/
d41 1
a41 2
   <arch>-ibd.h additions use: "-- ibd.h"
*/
d153 4
a156 1
	value = (value >> 16) + (value & 0x8000 ? 1 : 0);
@


1.1
log
@2004-02-20  Andrew Cagney  <cagney@@redhat.com>

	* m32r.opc, m32r.cpu: New files.  Written by , Doug Evans, Nick
	Clifton, Ben Elliston, Matthew Green, and Andrew Haley.
@
text
@a29 1

d51 1
d59 4
d66 26
d192 5
a196 1
	value &= 0xffff;
d296 2
d301 2
a302 1
  status = (*info->read_memory_func) (pc, buf, buflen, info);
d310 2
a311 1
  if ((pc & 3) == 0 && (buf[0] & 0x80) != 0)
d317 1
d320 1
a320 1
      buf += 2;
d323 2
a324 1
  if (buf[0] & 0x80)
d328 1
a328 1
      buf[0] &= 0x7f;
@


1.1.2.1
log
@Merge mainline to intercu branch.
@
text
@d30 1
a51 1
#if 0
a58 4
#else
#define CGEN_DIS_HASH(buffer, value) m32r_cgen_dis_hash(buffer, value)
extern unsigned int m32r_cgen_dis_hash(const char *, CGEN_INSN_INT);
#endif
a61 26
/* -- opc.c */
unsigned int
m32r_cgen_dis_hash (buf, value)
     const char * buf ATTRIBUTE_UNUSED;
     CGEN_INSN_INT value;
{
  unsigned int x;
                                                                                
  if (value & 0xffff0000) /* 32bit instructions */
    value = (value >> 16) & 0xffff;
                                                                                
  x = (value>>8) & 0xf0;
  if (x == 0x40 || x == 0xe0 || x == 0x60 || x == 0x50)
    return x;
                                                                                
  if (x == 0x70 || x == 0xf0)
    return x | ((value>>8) & 0x0f);
                                                                                
  if (x == 0x30)
    return x | ((value & 0x70) >> 4);
  else
    return x | ((value & 0xf0) >> 4);
}
                                                                                
/* -- */

d162 1
a162 5
        {
	  value &= 0xffff;
          if (value & 0x8000)
             value |= 0xffff0000;
        }
a261 2
  int big_p = CGEN_CPU_INSN_ENDIAN (cd) == CGEN_ENDIAN_BIG;
  char *x;
d265 1
a265 2
  status = (*info->read_memory_func) (pc - ((!big_p && (pc & 3) != 0) ? 2 : 0),
                                      buf, buflen, info);
d273 1
a273 2
  x = (big_p ? &buf[0] : &buf[3]);
  if ((pc & 3) == 0 && (*x & 0x80) != 0)
a278 1
      buf += (big_p ? 0 : 2);
d281 1
a281 1
      buf += (big_p ? 2 : -2);
d284 1
a284 2
  x = (big_p ? &buf[0] : &buf[1]);
  if (*x & 0x80)
d288 1
a288 1
      *x &= 0x7f;
@


1.1.2.2
log
@Merge GDB mainline of 20040402 to intercu branch.
@
text
@d3 1
a3 1
   Copyright 1998, 1999, 2000, 2001, 2004 Free Software Foundation, Inc.
d26 3
a28 1
   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
d43 2
a44 1
   <arch>-ibd.h additions use: "-- ibd.h"  */
d156 1
a156 4
        {
          value = value + (value & 0x8000 ? 0x10000 : 0);
          value >>= 16;
        }
@


