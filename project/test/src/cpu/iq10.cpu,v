head	1.4;
access;
symbols
	sid-snapshot-20180601:1.4
	cgen-snapshot-20180601:1.4
	sid-snapshot-20180501:1.4
	cgen-snapshot-20180501:1.4
	sid-snapshot-20180401:1.4
	cgen-snapshot-20180401:1.4
	sid-snapshot-20180301:1.4
	cgen-snapshot-20180301:1.4
	sid-snapshot-20180201:1.4
	cgen-snapshot-20180201:1.4
	sid-snapshot-20180101:1.4
	cgen-snapshot-20180101:1.4
	sid-snapshot-20171201:1.4
	cgen-snapshot-20171201:1.4
	sid-snapshot-20171101:1.4
	cgen-snapshot-20171101:1.4
	sid-snapshot-20171001:1.4
	cgen-snapshot-20171001:1.4
	sid-snapshot-20170901:1.4
	cgen-snapshot-20170901:1.4
	sid-snapshot-20170801:1.4
	cgen-snapshot-20170801:1.4
	sid-snapshot-20170701:1.4
	cgen-snapshot-20170701:1.4
	sid-snapshot-20170601:1.4
	cgen-snapshot-20170601:1.4
	sid-snapshot-20170501:1.4
	cgen-snapshot-20170501:1.4
	sid-snapshot-20170401:1.4
	cgen-snapshot-20170401:1.4
	sid-snapshot-20170301:1.4
	cgen-snapshot-20170301:1.4
	sid-snapshot-20170201:1.4
	cgen-snapshot-20170201:1.4
	sid-snapshot-20170101:1.4
	cgen-snapshot-20170101:1.4
	sid-snapshot-20161201:1.4
	cgen-snapshot-20161201:1.4
	sid-snapshot-20161101:1.4
	cgen-snapshot-20161101:1.4
	sid-snapshot-20160901:1.4
	cgen-snapshot-20160901:1.4
	sid-snapshot-20160801:1.4
	cgen-snapshot-20160801:1.4
	sid-snapshot-20160701:1.4
	cgen-snapshot-20160701:1.4
	sid-snapshot-20160601:1.4
	cgen-snapshot-20160601:1.4
	sid-snapshot-20160501:1.4
	cgen-snapshot-20160501:1.4
	sid-snapshot-20160401:1.4
	cgen-snapshot-20160401:1.4
	sid-snapshot-20160301:1.4
	cgen-snapshot-20160301:1.4
	sid-snapshot-20160201:1.4
	cgen-snapshot-20160201:1.4
	sid-snapshot-20160101:1.4
	cgen-snapshot-20160101:1.4
	sid-snapshot-20151201:1.4
	cgen-snapshot-20151201:1.4
	sid-snapshot-20151101:1.4
	cgen-snapshot-20151101:1.4
	sid-snapshot-20151001:1.4
	cgen-snapshot-20151001:1.4
	sid-snapshot-20150901:1.4
	cgen-snapshot-20150901:1.4
	sid-snapshot-20150801:1.4
	cgen-snapshot-20150801:1.4
	sid-snapshot-20150701:1.4
	cgen-snapshot-20150701:1.4
	sid-snapshot-20150601:1.4
	cgen-snapshot-20150601:1.4
	sid-snapshot-20150501:1.4
	cgen-snapshot-20150501:1.4
	sid-snapshot-20150401:1.4
	cgen-snapshot-20150401:1.4
	sid-snapshot-20150301:1.4
	cgen-snapshot-20150301:1.4
	sid-snapshot-20150201:1.4
	cgen-snapshot-20150201:1.4
	sid-snapshot-20150101:1.4
	cgen-snapshot-20150101:1.4
	sid-snapshot-20141201:1.4
	cgen-snapshot-20141201:1.4
	sid-snapshot-20141101:1.4
	cgen-snapshot-20141101:1.4
	sid-snapshot-20141001:1.4
	cgen-snapshot-20141001:1.4
	sid-snapshot-20140901:1.4
	cgen-snapshot-20140901:1.4
	sid-snapshot-20140801:1.4
	cgen-snapshot-20140801:1.4
	sid-snapshot-20140701:1.4
	cgen-snapshot-20140701:1.4
	sid-snapshot-20140601:1.4
	cgen-snapshot-20140601:1.4
	sid-snapshot-20140501:1.4
	cgen-snapshot-20140501:1.4
	sid-snapshot-20140401:1.4
	cgen-snapshot-20140401:1.4
	sid-snapshot-20140301:1.4
	cgen-snapshot-20140301:1.4
	sid-snapshot-20140201:1.4
	cgen-snapshot-20140201:1.4
	sid-snapshot-20140101:1.4
	cgen-snapshot-20140101:1.4
	sid-snapshot-20131201:1.4
	cgen-snapshot-20131201:1.4
	sid-snapshot-20131101:1.4
	cgen-snapshot-20131101:1.4
	sid-snapshot-20131001:1.4
	cgen-snapshot-20131001:1.4
	binutils-2_24-branch:1.4.0.26
	binutils-2_24-branchpoint:1.4
	binutils-2_21_1:1.4
	sid-snapshot-20130901:1.4
	cgen-snapshot-20130901:1.4
	gdb_7_6_1-2013-08-30-release:1.4
	sid-snapshot-20130801:1.4
	cgen-snapshot-20130801:1.4
	sid-snapshot-20130701:1.4
	cgen-snapshot-20130701:1.4
	sid-snapshot-20130601:1.4
	cgen-snapshot-20130601:1.4
	sid-snapshot-20130501:1.4
	cgen-snapshot-20130501:1.4
	gdb_7_6-2013-04-26-release:1.4
	sid-snapshot-20130401:1.4
	cgen-snapshot-20130401:1.4
	binutils-2_23_2:1.4
	gdb_7_6-branch:1.4.0.24
	gdb_7_6-2013-03-12-branchpoint:1.4
	sid-snapshot-20130301:1.4
	cgen-snapshot-20130301:1.4
	sid-snapshot-20130201:1.4
	cgen-snapshot-20130201:1.4
	sid-snapshot-20130101:1.4
	cgen-snapshot-20130101:1.4
	sid-snapshot-20121201:1.4
	cgen-snapshot-20121201:1.4
	gdb_7_5_1-2012-11-29-release:1.4
	binutils-2_23_1:1.4
	sid-snapshot-20121101:1.4
	cgen-snapshot-20121101:1.4
	binutils-2_23:1.4
	sid-snapshot-20121001:1.4
	cgen-snapshot-20121001:1.4
	sid-snapshot-20120901:1.4
	cgen-snapshot-20120901:1.4
	gdb_7_5-2012-08-17-release:1.4
	sid-snapshot-20120801:1.4
	cgen-snapshot-20120801:1.4
	binutils-2_23-branch:1.4.0.22
	binutils-2_23-branchpoint:1.4
	gdb_7_5-branch:1.4.0.20
	gdb_7_5-2012-07-18-branchpoint:1.4
	sid-snapshot-20120701:1.4
	cgen-snapshot-20120701:1.4
	sid-snapshot-20120601:1.4
	cgen-snapshot-20120601:1.4
	sid-snapshot-20120501:1.4
	cgen-snapshot-20120501:1.4
	binutils-2_22_branch:1.4.0.18
	gdb_7_4_1-2012-04-26-release:1.4
	sid-snapshot-20120401:1.4
	cgen-snapshot-20120401:1.4
	sid-snapshot-20120301:1.4
	cgen-snapshot-20120301:1.4
	sid-snapshot-20120201:1.4
	cgen-snapshot-20120201:1.4
	gdb_7_4-2012-01-24-release:1.4
	sid-snapshot-20120101:1.4
	cgen-snapshot-20120101:1.4
	gdb_7_4-branch:1.4.0.16
	gdb_7_4-2011-12-13-branchpoint:1.4
	sid-snapshot-20111201:1.4
	cgen-snapshot-20111201:1.4
	binutils-2_22:1.4
	sid-snapshot-20111101:1.4
	cgen-snapshot-20111101:1.4
	sid-snapshot-20111001:1.4
	cgen-snapshot-20111001:1.4
	binutils-2_22-branch:1.4.0.14
	binutils-2_22-branchpoint:1.4
	gdb_7_3_1-2011-09-04-release:1.4
	sid-snapshot-20110901:1.4
	cgen-snapshot-20110901:1.4
	sid-snapshot-20110801:1.4
	cgen-snapshot-20110801:1.4
	gdb_7_3-2011-07-26-release:1.4
	sid-snapshot-20110701:1.4
	cgen-snapshot-20110701:1.4
	sid-snapshot-20110601:1.4
	cgen-snapshot-20110601:1.4
	sid-snapshot-20110501:1.4
	cgen-snapshot-20110501:1.4
	gdb_7_3-branch:1.4.0.12
	gdb_7_3-2011-04-01-branchpoint:1.4
	sid-snapshot-20110401:1.4
	cgen-snapshot-20110401:1.4
	sid-snapshot-20110301:1.4
	cgen-snapshot-20110301:1.4
	sid-snapshot-20110201:1.4
	cgen-snapshot-20110201:1.4
	sid-snapshot-20110101:1.4
	cgen-snapshot-20110101:1.4
	binutils-2_21:1.4
	sid-snapshot-20101201:1.4
	cgen-snapshot-20101201:1.4
	binutils-2_21-branch:1.4.0.10
	binutils-2_21-branchpoint:1.4
	sid-snapshot-20101101:1.4
	cgen-snapshot-20101101:1.4
	sid-snapshot-20101001:1.4
	cgen-snapshot-20101001:1.4
	binutils-2_20_1:1.4
	gdb_7_2-2010-09-02-release:1.4
	sid-snapshot-20100901:1.4
	cgen-snapshot-20100901:1.4
	sid-snapshot-20100801:1.4
	cgen-snapshot-20100801:1.4
	gdb_7_2-branch:1.4.0.8
	gdb_7_2-2010-07-07-branchpoint:1.4
	sid-snapshot-20100701:1.4
	cgen-snapshot-20100701:1.4
	sid-snapshot-20100601:1.4
	cgen-snapshot-20100601:1.4
	sid-snapshot-20100501:1.4
	cgen-snapshot-20100501:1.4
	sid-snapshot-20100401:1.4
	cgen-snapshot-20100401:1.4
	gdb_7_1-2010-03-18-release:1.4
	sid-snapshot-20100301:1.4
	cgen-snapshot-20100301:1.4
	gdb_7_1-branch:1.4.0.6
	gdb_7_1-2010-02-18-branchpoint:1.4
	sid-snapshot-20100201:1.4
	cgen-snapshot-20100201:1.4
	sid-snapshot-20100101:1.4
	cgen-snapshot-20100101:1.4
	gdb_7_0_1-2009-12-22-release:1.4
	sid-snapshot-20091201:1.4
	cgen-snapshot-20091201:1.4
	sid-snapshot-20091101:1.4
	cgen-snapshot-20091101:1.4
	binutils-2_20:1.4
	gdb_7_0-2009-10-06-release:1.4
	sid-snapshot-20091001:1.4
	cgen-snapshot-20091001:1.4
	gdb_7_0-branch:1.4.0.4
	gdb_7_0-2009-09-16-branchpoint:1.4
	arc-sim-20090309:1.3
	binutils-arc-20081103-branch:1.3.0.32
	binutils-arc-20081103-branchpoint:1.3
	binutils-2_20-branch:1.4.0.2
	binutils-2_20-branchpoint:1.4
	sid-snapshot-20090901:1.3
	cgen-snapshot-20090901:1.3
	sid-snapshot-20090801:1.3
	cgen-snapshot-20090801:1.3
	msnyder-checkpoint-072509-branch:1.3.0.30
	msnyder-checkpoint-072509-branchpoint:1.3
	sid-snapshot-20090701:1.3
	cgen-snapshot-20090701:1.3
	dje-cgen-play1-branch:1.3.0.28
	dje-cgen-play1-branchpoint:1.3
	cgen-1_1-branch:1.3.0.26
	cgen-1_1-branchpoint:1.3
	sid-snapshot-20090601:1.3
	cgen-snapshot-20090601:1.3
	sid-snapshot-20090501:1.3
	cgen-snapshot-20090501:1.3
	sid-snapshot-20090401:1.3
	cgen-snapshot-20090401:1.3
	arc-20081103-branch:1.3.0.24
	arc-20081103-branchpoint:1.3
	arc-insight_6_8-branch:1.3.0.22
	arc-insight_6_8-branchpoint:1.3
	insight_6_8-branch:1.3.0.20
	insight_6_8-branchpoint:1.3
	sid-snapshot-20090301:1.3
	cgen-snapshot-20090301:1.3
	binutils-2_19_1:1.3
	sid-snapshot-20090201:1.3
	cgen-snapshot-20090201:1.3
	sid-snapshot-20090101:1.3
	cgen-snapshot-20090101:1.3
	reverse-20081226-branch:1.3.0.18
	reverse-20081226-branchpoint:1.3
	sid-snapshot-20081201:1.3
	cgen-snapshot-20081201:1.3
	multiprocess-20081120-branch:1.3.0.16
	multiprocess-20081120-branchpoint:1.3
	sid-snapshot-20081101:1.3
	cgen-snapshot-20081101:1.3
	binutils-2_19:1.3
	sid-snapshot-20081001:1.3
	cgen-snapshot-20081001:1.3
	reverse-20080930-branch:1.3.0.14
	reverse-20080930-branchpoint:1.3
	binutils-2_19-branch:1.3.0.12
	binutils-2_19-branchpoint:1.3
	sid-snapshot-20080901:1.3
	cgen-snapshot-20080901:1.3
	sid-snapshot-20080801:1.3
	cgen-snapshot-20080801:1.3
	reverse-20080717-branch:1.3.0.10
	reverse-20080717-branchpoint:1.3
	sid-snapshot-20080701:1.3
	cgen-snapshot-20080701:1.3
	msnyder-reverse-20080609-branch:1.3.0.8
	msnyder-reverse-20080609-branchpoint:1.3
	drow-reverse-20070409-branch:1.2.0.34
	drow-reverse-20070409-branchpoint:1.2
	sid-snapshot-20080601:1.3
	cgen-snapshot-20080601:1.3
	sid-snapshot-20080501:1.3
	cgen-snapshot-20080501:1.3
	sid-snapshot-20080403:1.3
	sid-snapshot-20080401:1.3
	cgen-snapshot-20080401:1.3
	gdb_6_8-2008-03-27-release:1.3
	sid-snapshot-20080301:1.3
	cgen-snapshot-20080301:1.3
	gdb_6_8-branch:1.3.0.6
	gdb_6_8-2008-02-26-branchpoint:1.3
	sid-snapshot-20080201:1.3
	cgen-snapshot-20080201:1.3
	sid-snapshot-20080101:1.3
	cgen-snapshot-20080101:1.3
	sid-snapshot-20071201:1.3
	cgen-snapshot-20071201:1.3
	sid-snapshot-20071101:1.3
	cgen-snapshot-20071101:1.3
	gdb_6_7_1-2007-10-29-release:1.3
	gdb_6_7-2007-10-10-release:1.3
	sid-snapshot-20071001:1.3
	cgen-snapshot-20071001:1.3
	gdb_6_7-branch:1.3.0.4
	gdb_6_7-2007-09-07-branchpoint:1.3
	binutils-2_18:1.3
	binutils-2_18-branch:1.3.0.2
	binutils-2_18-branchpoint:1.3
	insight_6_6-20070208-release:1.2
	binutils-csl-coldfire-4_1-32:1.2
	binutils-csl-sourcerygxx-4_1-32:1.2
	gdb_6_6-2006-12-18-release:1.2
	binutils-csl-innovasic-fido-3_4_4-33:1.2
	binutils-csl-sourcerygxx-3_4_4-32:1.1
	binutils-csl-coldfire-4_1-30:1.2
	binutils-csl-sourcerygxx-4_1-30:1.2
	binutils-csl-coldfire-4_1-28:1.2
	binutils-csl-sourcerygxx-4_1-29:1.2
	binutils-csl-sourcerygxx-4_1-28:1.2
	gdb_6_6-branch:1.2.0.32
	gdb_6_6-2006-11-15-branchpoint:1.2
	binutils-csl-arm-2006q3-27:1.2
	binutils-csl-sourcerygxx-4_1-27:1.2
	binutils-csl-arm-2006q3-26:1.2
	binutils-csl-sourcerygxx-4_1-26:1.2
	binutils-csl-sourcerygxx-4_1-25:1.2
	binutils-csl-sourcerygxx-4_1-24:1.2
	binutils-csl-sourcerygxx-4_1-23:1.2
	insight_6_5-20061003-release:1.2
	gdb-csl-symbian-6_4_50_20060226-12:1.2
	binutils-csl-sourcerygxx-4_1-21:1.2
	binutils-csl-arm-2006q3-21:1.2
	binutils-csl-sourcerygxx-4_1-22:1.2
	binutils-csl-palmsource-arm-prelinker-1_0-1:1.2
	binutils-csl-sourcerygxx-4_1-20:1.2
	binutils-csl-arm-2006q3-19:1.2
	binutils-csl-sourcerygxx-4_1-19:1.2
	binutils-csl-sourcerygxx-4_1-18:1.2
	binutils-csl-renesas-4_1-9:1.2
	gdb-csl-sourcerygxx-3_4_4-25:1.2
	binutils-csl-sourcerygxx-3_4_4-25:1.1
	nickrob-async-20060828-mergepoint:1.2
	gdb-csl-symbian-6_4_50_20060226-11:1.2
	binutils-csl-renesas-4_1-8:1.2
	binutils-csl-renesas-4_1-7:1.2
	binutils-csl-renesas-4_1-6:1.2
	gdb-csl-sourcerygxx-4_1-17:1.2
	binutils-csl-sourcerygxx-4_1-17:1.2
	gdb-csl-20060226-branch-local-2:1.2
	gdb-csl-sourcerygxx-4_1-14:1.2
	binutils-csl-sourcerygxx-4_1-14:1.2
	binutils-csl-sourcerygxx-4_1-15:1.2
	gdb-csl-sourcerygxx-4_1-13:1.2
	binutils-csl-sourcerygxx-4_1-13:1.2
	binutils-2_17:1.2
	gdb-csl-sourcerygxx-4_1-12:1.2
	binutils-csl-sourcerygxx-4_1-12:1.2
	gdb-csl-sourcerygxx-3_4_4-21:1.2
	binutils-csl-sourcerygxx-3_4_4-21:1.2
	gdb_6_5-20060621-release:1.2
	binutils-csl-wrs-linux-3_4_4-24:1.1
	binutils-csl-wrs-linux-3_4_4-23:1.1
	gdb-csl-sourcerygxx-4_1-9:1.2
	binutils-csl-sourcerygxx-4_1-9:1.2
	gdb-csl-sourcerygxx-4_1-8:1.2
	binutils-csl-sourcerygxx-4_1-8:1.2
	gdb-csl-sourcerygxx-4_1-7:1.2
	binutils-csl-sourcerygxx-4_1-7:1.2
	gdb-csl-arm-2006q1-6:1.2
	binutils-csl-arm-2006q1-6:1.2
	gdb-csl-sourcerygxx-4_1-6:1.2
	binutils-csl-sourcerygxx-4_1-6:1.2
	binutils-csl-wrs-linux-3_4_4-22:1.1
	gdb-csl-symbian-6_4_50_20060226-10:1.2
	gdb-csl-symbian-6_4_50_20060226-9:1.2
	gdb-csl-symbian-6_4_50_20060226-8:1.2
	gdb-csl-coldfire-4_1-11:1.2
	binutils-csl-coldfire-4_1-11:1.2
	gdb-csl-sourcerygxx-3_4_4-19:1.2
	binutils-csl-sourcerygxx-3_4_4-19:1.2
	gdb-csl-coldfire-4_1-10:1.2
	gdb_6_5-branch:1.2.0.30
	gdb_6_5-2006-05-14-branchpoint:1.2
	binutils-csl-coldfire-4_1-10:1.2
	gdb-csl-sourcerygxx-4_1-5:1.2
	binutils-csl-sourcerygxx-4_1-5:1.2
	nickrob-async-20060513-branch:1.2.0.28
	nickrob-async-20060513-branchpoint:1.2
	gdb-csl-sourcerygxx-4_1-4:1.2
	binutils-csl-sourcerygxx-4_1-4:1.2
	msnyder-reverse-20060502-branch:1.2.0.26
	msnyder-reverse-20060502-branchpoint:1.2
	binutils-csl-wrs-linux-3_4_4-21:1.1
	gdb-csl-morpho-4_1-4:1.2
	binutils-csl-morpho-4_1-4:1.2
	gdb-csl-sourcerygxx-3_4_4-17:1.2
	binutils-csl-sourcerygxx-3_4_4-17:1.2
	binutils-csl-wrs-linux-3_4_4-20:1.1
	readline_5_1-import-branch:1.2.0.24
	readline_5_1-import-branchpoint:1.2
	gdb-csl-20060226-branch-merge-to-csl-symbian-1:1.2
	binutils-2_17-branch:1.2.0.22
	binutils-2_17-branchpoint:1.2
	gdb-csl-symbian-20060226-branch:1.2.0.20
	gdb-csl-symbian-20060226-branchpoint:1.2
	gdb-csl-20060226-branch-merge-to-csl-local-1:1.2
	msnyder-reverse-20060331-branch:1.2.0.18
	msnyder-reverse-20060331-branchpoint:1.2
	binutils-csl-2_17-branch:1.2.0.16
	binutils-csl-2_17-branchpoint:1.2
	gdb-csl-available-20060303-branch:1.2.0.14
	gdb-csl-available-20060303-branchpoint:1.2
	gdb-csl-20060226-branch:1.2.0.12
	gdb-csl-20060226-branchpoint:1.2
	gdb_6_4-20051202-release:1.2
	msnyder-fork-checkpoint-branch:1.2.0.10
	msnyder-fork-checkpoint-branchpoint:1.2
	gdb-csl-gxxpro-6_3-branch:1.2.0.8
	gdb-csl-gxxpro-6_3-branchpoint:1.2
	gdb_6_4-branch:1.2.0.6
	gdb_6_4-2005-11-01-branchpoint:1.2
	gdb-csl-arm-20051020-branch:1.2.0.4
	gdb-csl-arm-20051020-branchpoint:1.2
	binutils-csl-gxxpro-3_4-branch:1.1.0.40
	binutils-csl-gxxpro-3_4-branchpoint:1.1
	binutils-2_16_1:1.1
	msnyder-tracepoint-checkpoint-branch:1.2.0.2
	msnyder-tracepoint-checkpoint-branchpoint:1.2
	gdb-csl-arm-20050325-2005-q1b:1.1
	binutils-csl-arm-2005q1b:1.1
	binutils-2_16:1.1
	gdb-csl-arm-20050325-2005-q1a:1.1
	binutils-csl-arm-2005q1a:1.1
	csl-arm-20050325-branch:1.1.0.38
	csl-arm-20050325-branchpoint:1.1
	binutils-csl-arm-2005q1-branch:1.1.0.36
	binutils-csl-arm-2005q1-branchpoint:1.1
	binutils-2_16-branch:1.1.0.34
	binutils-2_16-branchpoint:1.1
	csl-arm-2004-q3d:1.1
	gdb_6_3-20041109-release:1.1
	gdb_6_3-branch:1.1.0.30
	gdb_6_3-20041019-branchpoint:1.1
	csl-arm-2004-q3:1.1
	drow_intercu-merge-20040921:1.1
	drow_intercu-merge-20040915:1.1
	jimb-gdb_6_2-e500-branch:1.1.0.32
	jimb-gdb_6_2-e500-branchpoint:1.1
	gdb_6_2-20040730-release:1.1
	gdb_6_2-branch:1.1.0.28
	gdb_6_2-2004-07-10-gmt-branchpoint:1.1
	gdb_6_1_1-20040616-release:1.1
	binutils-2_15:1.1
	binutils-2_15-branchpoint:1.1
	csl-arm-2004-q1a:1.1
	csl-arm-2004-q1:1.1
	gdb_6_1-2004-04-05-release:1.1
	drow_intercu-merge-20040402:1.1
	drow_intercu-merge-20040327:1.1
	ezannoni_pie-20040323-branch:1.1.0.26
	ezannoni_pie-20040323-branchpoint:1.1
	cagney_tramp-20040321-mergepoint:1.1
	cagney_tramp-20040309-branch:1.1.0.24
	cagney_tramp-20040309-branchpoint:1.1
	gdb_6_1-branch:1.1.0.22
	gdb_6_1-2004-03-01-gmt-branchpoint:1.1
	drow_intercu-20040221-branch:1.1.0.20
	drow_intercu-20040221-branchpoint:1.1
	binutils-2_15-branch:1.1.0.18
	cagney_bfdfile-20040213-branch:1.1.0.16
	cagney_bfdfile-20040213-branchpoint:1.1
	drow-cplus-merge-20040208:1.1
	carlton_dictionary-20040126-merge:1.1
	cagney_bigcore-20040122-branch:1.1.0.14
	cagney_bigcore-20040122-branchpoint:1.1
	drow-cplus-merge-20040113:1.1
	csl-arm-2003-q4:1.1
	drow-cplus-merge-20031224:1.1
	drow-cplus-merge-20031220:1.1
	carlton_dictionary-20031215-merge:1.1
	drow-cplus-branch:1.1.0.12
	drow-cplus-merge-20031214:1.1
	carlton-dictionary-20031111-merge:1.1
	gdb_6_0-2003-10-04-release:1.1
	kettenis_sparc-20030918-branch:1.1.0.10
	kettenis_sparc-20030918-branchpoint:1.1
	carlton_dictionary-20030917-merge:1.1
	ezannoni_pie-20030916-branchpoint:1.1
	ezannoni_pie-20030916-branch:1.1.0.8
	cagney_x86i386-20030821-branch:1.1.0.6
	cagney_x86i386-20030821-branchpoint:1.1
	carlton_dictionary-20030805-merge:1.1
	carlton_dictionary-20030627-merge:1.1
	gdb_6_0-branch:1.1.0.4
	gdb_6_0-2003-06-23-branchpoint:1.1
	jimb-ppc64-linux-20030613-branch:1.1.0.2
	jimb-ppc64-linux-20030613-branchpoint:1.1
	binutils_latest_snapshot:1.4;
locks; strict;
comment	@# @;


1.4
date	2009.09.02.07.21.03;	author amodra;	state Exp;
branches;
next	1.3;

1.3
date	2007.07.05.09.49.03;	author nickc;	state Exp;
branches;
next	1.2;

1.2
date	2005.05.10.10.21.07;	author nickc;	state Exp;
branches;
next	1.1;

1.1
date	2003.06.06.21.49.30;	author cagney;	state Exp;
branches
	1.1.12.1;
next	;

1.1.12.1
date	2003.12.14.20.26.58;	author drow;	state Exp;
branches;
next	;


desc
@@


1.4
log
@update copyright dates
@
text
@; IQ10-only CPU description. -*- Scheme -*-
;
; Copyright 2001, 2002, 2007, 2009 Free Software Foundation, Inc.
;
; Contributed by Red Hat Inc; developed under contract from Vitesse.
;
; This file is part of the GNU Binutils.
;
; This program is free software; you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation; either version 3 of the License, or
; (at your option) any later version.
;
; This program is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; GNU General Public License for more details.
;
; You should have received a copy of the GNU General Public License
; along with this program; if not, write to the Free Software
; Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,
; MA 02110-1301, USA.


; Instructions.

(dni andoui-q10 "iq10 and upper ones immediate" (MACH10 USES-RS USES-RT)
     "andoui $rt,$rs,$hi16"
     (+ OP10_ANDOUI rs rt hi16)
     (set rt (and rs (or (sll hi16 16) #xFFFF)))
     ())

(dni andoui2-q10 "iq10 and upper ones immediate" (ALIAS NO-DIS MACH10 USES-RS USES-RT)
     "andoui ${rt-rs},$hi16"
     (+ OP10_ANDOUI rt-rs hi16)
     (set rt-rs (and rt-rs (or (sll hi16 16) #xFFFF)))
     ())

(dni orui-q10 "or upper immediate" (MACH10 USES-RS USES-RT)
     "orui $rt,$rs,$hi16"
     (+ OP10_ORUI rs rt hi16)
     (set rt (or rs (sll hi16 16)))
     ())

(dni orui2-q10 "or upper immediate" (ALIAS NO-DIS MACH10 USES-RS USES-RT)
     "orui ${rt-rs},$hi16"
     (+ OP10_ORUI rt-rs hi16)
     (set rt-rs (or rt-rs (sll hi16 16)))
     ())

(dni mrgbq10 "merge bytes" (MACH10 USES-RD USES-RS USES-RT)
     "mrgb $rd,$rs,$rt,$maskq10"
     (+ OP_SPECIAL rs rt rd maskq10 FUNC_MRGB)
     (sequence ((SI temp))
	       (if (bitclear? mask 0)
		   (set temp (and rs #xFF))
		   (set temp (and rt #xFF)))
	       (if (bitclear? mask 1)
		   (set temp (or temp (and rs #xFF00)))
		   (set temp (or temp (and rt #xFF00))))
	       (if (bitclear? mask 2)
		   (set temp (or temp (and rs #xFF0000)))
		   (set temp (or temp (and rt #xFF0000))))
	       (if (bitclear? mask 3)
		   (set temp (or temp (and rs #xFF000000)))
		   (set temp (or temp (and rt #xFF000000))))
	       (set rd temp))
     ())

(dni mrgbq102 "merge bytes" (ALIAS NO-DIS MACH10 USES-RD USES-RS USES-RT)
     "mrgb ${rd-rs},$rt,$maskq10"
     (+ OP_SPECIAL rt rd-rs maskq10 FUNC_MRGB)
     (sequence ((SI temp))
	       (if (bitclear? mask 0)
		   (set temp (and rd-rs #xFF))
		   (set temp (and rt #xFF)))
	       (if (bitclear? mask 1)
		   (set temp (or temp (and rd-rs #xFF00)))
		   (set temp (or temp (and rt #xFF00))))
	       (if (bitclear? mask 2)
		   (set temp (or temp (and rd-rs #xFF0000)))
		   (set temp (or temp (and rt #xFF0000))))
	       (if (bitclear? mask 3)
		   (set temp (or temp (and rd-rs #xFF000000)))
		   (set temp (or temp (and rt #xFF000000))))
	       (set rd-rs temp))
     ())

; In the future, we'll want the j & jal to use the 21 bit target, with 
; the upper five bits shifted up.  For now, give 'em the 16 bit target.

(dni jq10 "jump" (MACH10)
     "j $jmptarg"
     (+ OP_J (f-rs 0) (f-rt 0) jmptarg)
;     "j $jmptargq10"
;     (+ OP_J upper-5-jmptargq10 (f-rt 0) lower-16-jmptargq10)
     (delay 1 (set pc jmptarg))
     ())

(dni jalq10 "jump and link" (MACH10 USES-RT)
     "jal $rt,$jmptarg"
     (+ OP_JAL (f-rs 0) rt jmptarg)
;     "jal $rt,$jmptargq10"
;     (+ OP_JAL upper-5-jmptargq10 rt lower-16-jmptargq10)
     (delay 1
	    (sequence ()
		      (set rt (add pc 8))
		      (set pc jmptarg)))
     ())

(dni jalq10-2 "jump and link, implied r31" (MACH10 USES-RT)
     "jal $jmptarg"
     (+ OP_JAL (f-rs 0) (f-rt 31) jmptarg)
     (delay 1
	    (sequence ()
		      (set rt (add pc 8))
		      (set pc jmptarg)))
     ())

; Branch instructions.

(dni bbil "branch bit immediate likely" (MACH10 USES-RS)
     "bbil $rs($bitnum),$offset"
     (+ OP10_BBIL rs bitnum offset)
     (if (bitset? rs bitnum)
	 (delay 1 (set pc offset))
	 (skip 1))
     ())

(dni bbinl "branch bit immediate negated likely" (MACH10 USES-RS)
     "bbinl $rs($bitnum),$offset"
     (+ OP10_BBINL rs bitnum offset)
     (if (bitclear? rs bitnum)
	 (delay 1 (set pc offset))
	 (skip 1))
     ())

(dni bbvl "branch bit variable likely" (MACH10 USES-RS USES-RT)
     "bbvl $rs,$rt,$offset"
     (+ OP10_BBVL rs rt offset)
     (if (bitset? rs (and rt #x1F))
	 (delay 1 (set pc offset))
	 (skip 1))
     ())

(dni bbvnl "branch bit variable negated likely" (MACH10 USES-RS USES-RT)
     "bbvnl $rs,$rt,$offset"
     (+ OP10_BBVNL rs rt offset)
     (if (bitclear? rs (and rt #x1F))
	 (delay 1 (set pc offset))
	 (skip 1))
     ())

(dni bgtzal "branch if greater than zero and link" (MACH10 USES-RS USES-R31)
     "bgtzal $rs,$offset"
     (+ OP_REGIMM rs FUNC_BGTZAL offset)
     (if (gt rs 0)
	 (sequence ()
		   (set (reg h-gr 31) (add pc 8))
		   (delay 1 (set pc offset))))
     ())

(dni bgtzall
     "branch if greater than zero and link likely" (MACH10 USES-RS USES-R31)
     "bgtzall $rs,$offset"
     (+ OP_REGIMM rs FUNC_BGTZALL offset)
     (if (gt rs 0)
	 (sequence ()
		   (set (reg h-gr 31) (add pc 8))
		   (delay 1 (set pc offset)))
	 (skip 1))
     ())

(dni blezal "branch if less than or equal to zero and link" (MACH10 USES-RS USES-R31)
     "blezal $rs,$offset"
     (+ OP_REGIMM rs FUNC_BLEZAL offset)
     (if (le rs 0)
	 (sequence ()
		   (set (reg h-gr 31) (add pc 8))
		   (delay 1 (set pc offset))))
     ())

(dni blezall
     "branch if less than or equal to zero and link likely" (MACH10 USES-RS USES-R31)
     "blezall $rs,$offset"
     (+ OP_REGIMM rs FUNC_BLEZALL offset)
     (if (le rs 0)
	 (sequence ()
		   (set (reg h-gr 31) (add pc 8))
		   (delay 1 (set pc offset)))
	 (skip 1))
     ())

(dni bgtz-q10 "branch if greater than zero" (MACH10 USES-RS)
     "bgtz $rs,$offset"
     (+ OP_REGIMM rs FUNC_BGTZ offset)
     (if (gt rs 0)
	 (delay 1 (set pc offset)))
     ())

(dni bgtzl-q10 "branch if greater than zero likely" (MACH10 USES-RS)
     "bgtzl $rs,$offset"
     (+ OP_REGIMM rs FUNC_BGTZL offset)
     (if (gt rs 0)
	 (delay 1 (set pc offset))
	 (skip 1))
     ())


(dni blez-q10 "branch if less than or equal to zero" (MACH10 USES-RS)
     "blez $rs,$offset"
     (+ OP_REGIMM rs FUNC_BLEZ offset)
     (if (le rs 0)
	 (delay 1 (set pc offset)))
     ())

(dni blezl-q10 "branch if less than or equal to zero likely" (MACH10 USES-RS)
     "blezl $rs,$offset"
     (+ OP_REGIMM rs FUNC_BLEZL offset)
     (if (le rs 0)
	 (delay 1 (set pc offset))
	 (skip 1))
     ())

(dni bmb-q10 "branch if matching byte-lane" (MACH10 USES-RS USES-RT)
     "bmb $rs,$rt,$offset"
     (+ OP10_BMB rs rt offset)
     (sequence ((BI branch?))
	       (set branch? 0)
	       (if (eq (and rs #xFF) (and rt #xFF))
		   (set branch? 1))
	       (if (eq (and rs #xFF00) (and rt #xFF00))
		   (set branch? 1))
	       (if (eq (and rs #xFF0000) (and rt #xFF0000))
		   (set branch? 1))
	       (if (eq (and rs #xFF000000) (and rt #xFF000000))
		   (set branch? 1))
	       (if branch?
		   (delay 1 (set pc offset))))
     ())

(dni bmbl "branch if matching byte-lane likely" (MACH10 USES-RS USES-RT)
     "bmbl $rs,$rt,$offset"
     (+ OP10_BMBL rs rt offset)
     (sequence ((BI branch?))
	       (set branch? 0)
	       (if (eq (and rs #xFF) (and rt #xFF))
		   (set branch? 1))
	       (if (eq (and rs #xFF00) (and rt #xFF00))
		   (set branch? 1))
	       (if (eq (and rs #xFF0000) (and rt #xFF0000))
		   (set branch? 1))
	       (if (eq (and rs #xFF000000) (and rt #xFF000000))
		   (set branch? 1))
	       (if branch?
		   (delay 1 (set pc offset))
		   (skip 1)))
     ())

(dni bri "branch if register invalid" (MACH10 USES-RS)
     "bri $rs,$offset"
     (+ OP_REGIMM rs FUNC_BRI offset)
     (if (gt rs 0)
	 (delay 1 (set pc offset))
	 (skip 1))
     ())

(dni brv "branch if register invalid" (MACH10 USES-RS)
     "brv $rs,$offset"
     (+ OP_REGIMM rs FUNC_BRV offset)
     (if (gt rs 0)
	 (delay 1 (set pc offset))
	 (skip 1))
     ())

; debug instructions

(dni bctx "branch if the current context == instruction[21]" (MACH10 USES-RS)
     "bctx $rs,$offset"
     (+ OP_REGIMM rs FUNC_BCTX offset)
     (delay 1 (set pc offset))
     ())

(dni yield "unconditional yield to the other context" (MACH10)
     "yield"
     (+ OP_SPECIAL (f-rs 0) (f-rt 0) (f-rd 0) (f-shamt 0) FUNC10_YIELD)
     (unimp yield)
     ())

; Special instructions.

(dni crc32 "CRC, 32 bit input" (MACH10 USES-RD USES-RS USES-RT)
     "crc32 $rd,$rs,$rt"
     (+ OP_COP3 rs rt rd (f-shamt 0) FUNC10_CRC32)
     (unimp crc32)
     ())

(dni crc32b "CRC, 8 bit input" (MACH10 USES-RD USES-RS USES-RT)
     "crc32b $rd,$rs,$rt"
     (+ OP_COP3 rs rt rd (f-shamt 0) FUNC10_CRC32B)
     (unimp crc32b)
     ())

(dni cnt1s "Count ones" (MACH10 USES-RD USES-RS)
     "cnt1s $rd,$rs"
     (+ OP_SPECIAL rs rt rd (f-shamt 0) FUNC10_CNT1S)
     (unimp crcp)
     ())


; Special Instructions

(dni avail "Mark Header Buffer Available" (MACH10 USES-RD)
     "avail $rd"
     (+ OP_COP3 (f-rs 0) (f-rt 0) rd (f-shamt 0) FUNC10_AVAIL)
     (unimp avail)
     ())

(dni free "Mark Header Buffer Free" (MACH10 USES-RS USES-RD)
     "free $rd,$rs"
     (+ OP_COP3 rs (f-rt 0) rd (f-shamt 0) FUNC10_FREE)
     (unimp free)
     ())

(dni tstod "Test Header Buffer Order Dependency" (MACH10 USES-RS USES-RD)
     "tstod $rd,$rs"
     (+ OP_COP3 rs (f-rt 0) rd (f-shamt 0) FUNC10_TSTOD)
     (unimp tstod)
     ())

(dni cmphdr "Get a Complete Header" (MACH10 USES-RD)
     "cmphdr $rd"
     (+ OP_COP3 (f-rs 0) (f-rt 0) rd (f-shamt 0) FUNC10_CMPHDR)
     (unimp cmphdr)
     ())

(dni mcid "Allocate a Multicast ID" (MACH10 USES-RD USES-RT)
     "mcid $rd,$rt"
     (+ OP_COP3 (f-rs 0) rt rd (f-shamt 0) FUNC10_MCID)
     (unimp mcid)
     ())

(dni dba "Allocate a Data Buffer Pointer" (MACH10 USES-RD)
     "dba $rd"
     (+ OP_COP3 (f-rs 0) (f-rt 0) rd (f-shamt 0) FUNC10_DBA)
     (unimp dba)
     ())

(dni dbd "Deallocate a Data Buffer Pointer" (MACH10 USES-RS USES-RT USES-RD)
     "dbd $rd,$rs,$rt"
     (+ OP_COP3 rs rt rd (f-shamt 0) FUNC10_DBD)
     (unimp dbd)
     ())

(dni dpwt "DSTN_PORT Write" (MACH10 USES-RS USES-RD)
     "dpwt $rd,$rs"
     (+ OP_COP3 rs (f-rt 0) rd (f-shamt 0) FUNC10_DPWT)
     (unimp dpwt)
     ())

; Architectural and coprocessor instructions.

(dni chkhdrq10 "" (MACH10 USES-RS USES-RD)
     "chkhdr $rd,$rs"
     (+ OP_COP3 rs (f-rt 0) rd (f-shamt 0) FUNC10_CHKHDR)
     (unimp chkhdr)
     ())

; Coprocessor DMA Instructions (IQ10)

(dni rba "Read Bytes Absolute" (MACH10 USES-RS USES-RT USES-RD)
     "rba $rd,$rs,$rt"
     (+ OP_COP3 rs rt rd (f-shamt 0) FUNC10_RBA)
     (unimp rba)
     ())

(dni rbal "Read Bytes Absolute and Lock" (MACH10 USES-RS USES-RT USES-RD)
     "rbal $rd,$rs,$rt"
     (+ OP_COP3 rs rt rd (f-shamt 0) FUNC10_RBAL)
     (unimp rbal)
     ())

(dni rbar "Read Bytes Absolute and Release" (MACH10 USES-RS USES-RT USES-RD)
     "rbar $rd,$rs,$rt"
     (+ OP_COP3 rs rt rd (f-shamt 0) FUNC10_RBAR)
     (unimp rbar)
     ())

(dni wba "Write Bytes Absolute" (MACH10 USES-RS USES-RT USES-RD)
     "wba $rd,$rs,$rt"
     (+ OP_COP3 rs rt rd (f-shamt 0) FUNC10_WBA)
     (unimp wba)
     ())

(dni wbau "Write Bytes Absolute and Unlock" (MACH10 USES-RS USES-RT USES-RD)
     "wbau $rd,$rs,$rt"
     (+ OP_COP3 rs rt rd (f-shamt 0) FUNC10_WBAU)
     (unimp wbau)
     ())

(dni wbac "Write Bytes Absolute Cacheable" (MACH10 USES-RS USES-RT USES-RD)
     "wbac $rd,$rs,$rt"
     (+ OP_COP3 rs rt rd (f-shamt 0) FUNC10_WBAC)
     (unimp wbac)
     ())

(dni rbi "Read Bytes Immediate" (MACH10 USES-RD USES-RS USES-RT)
     "rbi $rd,$rs,$rt,$bytecount"
     (+ OP_COP3 rs rt rd FUNC10_RBI bytecount)
     (unimp rbi)
     ())

(dni rbil "Read Bytes Immediate and Lock" (MACH10 USES-RD USES-RS USES-RT)
     "rbil $rd,$rs,$rt,$bytecount"
     (+ OP_COP3 rs rt rd FUNC10_RBIL bytecount)
     (unimp rbil)
     ())

(dni rbir "Read Bytes Immediate and Release" (MACH10 USES-RD USES-RS USES-RT)
     "rbir $rd,$rs,$rt,$bytecount"
     (+ OP_COP3 rs rt rd FUNC10_RBIR bytecount)
     (unimp rbir)
     ())

(dni wbi "Write Bytes Immediate" (MACH10 USES-RD USES-RS USES-RT)
     "wbi $rd,$rs,$rt,$bytecount"
     (+ OP_COP3 rs rt rd FUNC10_WBI bytecount)
     (unimp wbi)
     ())

(dni wbic "Write Bytes Immediate Cacheable" (MACH10 USES-RD USES-RS USES-RT)
     "wbic $rd,$rs,$rt,$bytecount"
     (+ OP_COP3 rs rt rd FUNC10_WBIC bytecount)
     (unimp wbic)
     ())

(dni wbiu "Write Bytes Immediate" (MACH10 USES-RD USES-RS USES-RT)
     "wbiu $rd,$rs,$rt,$bytecount"
     (+ OP_COP3 rs rt rd FUNC10_WBIU bytecount)
     (unimp wbiu)
     ())

(dni pkrli "Packet Release Immediate" (MACH10 USES-RD USES-RS USES-RT)
     "pkrli $rd,$rs,$rt,$bytecount"
     (+ OP_COP2 rs rt rd FUNC10_PKRLI bytecount)
     (unimp pkrli)
     ())

(dni pkrlih "Packet Release Immediate and Hold" (MACH10 USES-RD USES-RS USES-RT)
     "pkrlih $rd,$rs,$rt,$bytecount"
     (+ OP_COP2 rs rt rd FUNC10_PKRLIH bytecount)
     (unimp pkrlih)
     ())

(dni pkrliu "Packet Release Immediate Unconditional" (MACH10 USES-RD USES-RS USES-RT)
     "pkrliu $rd,$rs,$rt,$bytecount"
     (+ OP_COP2 rs rt rd FUNC10_PKRLIU bytecount)
     (unimp pkrliu)
     ())

(dni pkrlic "Packet Release Immediate Continue" (MACH10 USES-RD USES-RS USES-RT)
     "pkrlic $rd,$rs,$rt,$bytecount"
     (+ OP_COP2 rs rt rd FUNC10_PKRLIC bytecount)
     (unimp pkrlic)
     ())

(dni pkrla "Packet Release Absolute" (MACH10 USES-RS USES-RT USES-RD)
     "pkrla $rd,$rs,$rt"
     (+ OP_COP3 rs rt rd (f-shamt 0) FUNC10_PKRLA)
     (unimp pkrla)
     ())

(dni pkrlau "Packet Release Absolute Unconditional" (MACH10 USES-RS USES-RT USES-RD)
     "pkrlau $rd,$rs,$rt"
     (+ OP_COP3 rs rt rd (f-shamt 0) FUNC10_PKRLAU)
     (unimp pkrlau)
     ())

(dni pkrlah "Packet Release Absolute and Hold" (MACH10 USES-RS USES-RT USES-RD)
     "pkrlah $rd,$rs,$rt"
     (+ OP_COP3 rs rt rd (f-shamt 0) FUNC10_PKRLAH)
     (unimp pkrlah)
     ())

(dni pkrlac "Packet Release Absolute Continue" (MACH10 USES-RS USES-RT USES-RD)
     "pkrlac $rd,$rs,$rt"
     (+ OP_COP3 rs rt rd (f-shamt 0) FUNC10_PKRLAC)
     (unimp pkrlac)
     ())

; Main Memory Access Instructions

(dni lock "lock memory" (MACH10 USES-RD USES-RT)
     "lock $rd,$rt"
     (+ OP_COP3 (f-rs 0) rt rd (f-shamt 0) FUNC10_LOCK)
     (unimp lock)
     ())

(dni unlk "unlock memory" (MACH10 USES-RT USES-RD)
     "unlk $rd,$rt"
     (+ OP_COP3 (f-rs 0) rt rd (f-shamt 0) FUNC10_UNLK)
     (unimp unlk)
     ())
     
(dni swrd "Single Word Read" (MACH10 USES-RT USES-RD)
     "swrd $rd,$rt"
     (+ OP_COP3 (f-rs 0) rt rd (f-shamt 0) FUNC10_SWRD)
     (unimp swrd)
     ())

(dni swrdl "Single Word Read and Lock" (MACH10 USES-RT USES-RD)
     "swrdl $rd,$rt"
     (+ OP_COP3 (f-rs 0) rt rd (f-shamt 0) FUNC10_SWRDL)
     (unimp swrdl)
     ())

(dni swwr "Single Word Write" (MACH10 USES-RS USES-RT USES-RD)
     "swwr $rd,$rs,$rt"
     (+ OP_COP3 rs rt rd (f-shamt 0) FUNC10_SWWR)
     (unimp swwr)
     ())

(dni swwru "Single Word Write and Unlock" (MACH10 USES-RS USES-RT USES-RD)
     "swwru $rd,$rs,$rt"
     (+ OP_COP3 rs rt rd (f-shamt 0) FUNC10_SWWRU)
     (unimp swwru)
     ())

(dni dwrd "Double Word Read" (MACH10 EVEN-REG-NUM USES-RT USES-RD)
     "dwrd $rd,$rt"
     (+ OP_COP3 (f-rs 0) rt rd (f-shamt 0) FUNC10_DWRD)
     (unimp dwrd)
     ())

(dni dwrdl "Double Word Read and Lock" (MACH10 EVEN-REG-NUM USES-RT USES-RD)
     "dwrdl $rd,$rt"
     (+ OP_COP3 (f-rs 0) rt rd (f-shamt 0) FUNC10_DWRDL)
     (unimp dwrdl)
     ())

; CAM access instructions (IQ10)

(dni cam36 "CAM Access in 36-bit Mode" (MACH10 USES-RT USES-RD)
     "cam36 $rd,$rt,${cam-z},${cam-y}"
     (+ OP_COP3 (f-rs 0) rt rd FUNC10_CAM36 cam-z cam-y)
     (unimp cam36)
     ())

(dni cam72 "CAM Access in 72-bit Mode" (MACH10 USES-RT USES-RD)
     "cam72 $rd,$rt,${cam-y},${cam-z}"
     (+ OP_COP3 (f-rs 0) rt rd FUNC10_CAM72 cam-z cam-y)
     (unimp cam72)
     ())

(dni cam144 "CAM Access in 144-bit Mode" (MACH10 USES-RT USES-RD)
     "cam144 $rd,$rt,${cam-y},${cam-z}"
     (+ OP_COP3 (f-rs 0) rt rd FUNC10_CAM144 cam-z cam-y)
     (unimp cam144)
     ())

(dni cam288 "CAM Access in 288-bit Mode" (MACH10 USES-RT USES-RD)
     "cam288 $rd,$rt,${cam-y},${cam-z}"
     (+ OP_COP3 (f-rs 0) rt rd FUNC10_CAM288 cam-z cam-y)
     (unimp cam288)
     ())

; Counter manager instructions (IQ10)

(dni cm32and "Counter Manager And" (MACH10 USES-RS USES-RT USES-RD)
     "cm32and $rd,$rs,$rt"
     (+ OP_COP3 rs rt rd (f-cp-op 0) (f-cp-grp 2) FUNC10_CM32AND)
     (unimp cm32and)
     ())

(dni cm32andn "Counter Manager And With Inverse" (MACH10 USES-RS USES-RT USES-RD)
     "cm32andn $rd,$rs,$rt"
     (+ OP_COP3 rs rt rd (f-cp-op 0) (f-cp-grp 2) FUNC10_CM32ANDN)
     (unimp cm32andn)
     ())

(dni cm32or "Counter Manager Or" (MACH10 USES-RS USES-RT USES-RD)
     "cm32or $rd,$rs,$rt"
     (+ OP_COP3 rs rt rd (f-cp-op 0) (f-cp-grp 2) FUNC10_CM32OR)
     (unimp cm32or)
     ())

(dni cm32ra "Counter Manager 32-bit Rolling Add" (MACH10 USES-RS USES-RT USES-RD)
     "cm32ra $rd,$rs,$rt"
     (+ OP_COP3 rs rt rd (f-shamt 2) FUNC10_CM32RA)
     (unimp cm32ra)
     ())

(dni cm32rd "Counter Manager 32-bit Rolling Decrement" (MACH10 USES-RT USES-RD)
     "cm32rd $rd,$rt"
     (+ OP_COP3 (f-rs 0) rt rd (f-cp-op 0) (f-cp-grp 2) FUNC10_CM32RD)
     (unimp cm32rd)
     ())

(dni cm32ri "Counter Manager 32-bit Rolling Increment" (MACH10 USES-RT USES-RD)
     "cm32ri $rd,$rt"
     (+ OP_COP3 (f-rs 0) rt rd (f-cp-op 0) (f-cp-grp 2) FUNC10_CM32RI)
     (unimp cm32ri)
     ())

(dni cm32rs "Counter Manager 32-bit Rolling Subtract" (MACH10 USES-RS USES-RT USES-RD)
     "cm32rs $rd,$rs,$rt"
     (+ OP_COP3 rs rt rd (f-shamt 2) FUNC10_CM32RS)
     (unimp cm32rs)
     ())

(dni cm32sa "Counter Manager 32-bit Saturating Add" (MACH10 USES-RS USES-RT USES-RD)
     "cm32sa $rd,$rs,$rt"
     (+ OP_COP3 rs rt rd (f-cp-op 0) (f-cp-grp 2) FUNC10_CM32SA)
     (unimp cm32sa)
     ())

(dni cm32sd "Counter Manager 32-bit Saturating Decrement" (MACH10 USES-RT USES-RD)
     "cm32sd $rd,$rt"
     (+ OP_COP3 (f-rs 0) rt rd (f-cp-op 0) (f-cp-grp 2) FUNC10_CM32SD)
     (unimp cm32sd)
     ())

(dni cm32si "Counter Manager 32-bit Saturating Increment" (MACH10 USES-RT USES-RD)
     "cm32si $rd,$rt"
     (+ OP_COP3 (f-rs 0) rt rd (f-cp-op 0) (f-cp-grp 2) FUNC10_CM32SI)
     (unimp cm32si)
     ())

(dni cm32ss "Counter Manager 32-bit Saturating Subtract" (MACH10 USES-RS USES-RT USES-RD)
     "cm32ss $rd,$rs,$rt"
     (+ OP_COP3 rs rt rd (f-cp-op 0) (f-cp-grp 2) FUNC10_CM32SS)
     (unimp cm32ss)
     ())

(dni cm32xor "Counter Manager Xor" (MACH10 USES-RS USES-RT USES-RD)
     "cm32xor $rd,$rs,$rt"
     (+ OP_COP3 rs rt rd (f-cp-op 0) (f-cp-grp 2) FUNC10_CM32XOR)
     (unimp cm32xor)
     ())

(dni cm64clr "Counter Manager Clear" (MACH10 EVEN-REG-NUM USES-RT USES-RD)
     "cm64clr $rd,$rt"
     (+ OP_COP3 (f-rs 0) rt rd (f-cp-op 0) (f-cp-grp 2) FUNC10_CM64CLR)
     (unimp cm64clr)
     ())

(dni cm64ra "Counter Manager 64-bit Rolling Add" (MACH10 EVEN-REG-NUM USES-RS USES-RT USES-RD)
     "cm64ra $rd,$rs,$rt"
     (+ OP_COP3 rs rt rd (f-cp-op 0) (f-cp-grp 2) FUNC10_CM64RA)
     (unimp cm64ra)
     ())

(dni cm64rd "Counter Manager 64-bit Rolling Decrement" (MACH10 EVEN-REG-NUM USES-RT USES-RD)
     "cm64rd $rd,$rt"
     (+ OP_COP3 (f-rs 0) rt rd (f-cp-op 0) (f-cp-grp 2) FUNC10_CM64RD)
     (unimp cm64rd)
     ())

(dni cm64ri "Counter Manager 32-bit Rolling Increment" (MACH10 EVEN-REG-NUM USES-RT USES-RD)
     "cm64ri $rd,$rt"
     (+ OP_COP3 (f-rs 0) rt rd (f-cp-op 0) (f-cp-grp 2) FUNC10_CM64RI)
     (unimp cm64ri)
     ())

(dni cm64ria2 "Counter Manager 32/32 Rolling Increment/Add" (MACH10 EVEN-REG-NUM USES-RS USES-RT USES-RD)
     "cm64ria2 $rd,$rs,$rt"
     (+ OP_COP3 rs rt rd (f-cp-op 0) (f-cp-grp 2) FUNC10_CM64RIA2)
     (unimp cm64ria2)
     ())

(dni cm64rs "Counter Manager 64-bit Rolling Subtract" (MACH10 EVEN-REG-NUM USES-RS USES-RT USES-RD)
     "cm64rs $rd,$rs,$rt"
     (+ OP_COP3 rs rt rd (f-cp-op 0) (f-cp-grp 2) FUNC10_CM64RS)
     (unimp cm64rs)
     ())

(dni cm64sa "Counter Manager 64-bit Saturating Add" (MACH10 EVEN-REG-NUM USES-RS USES-RT USES-RD)
     "cm64sa $rd,$rs,$rt"
     (+ OP_COP3 rs rt rd (f-cp-op 0) (f-cp-grp 2) FUNC10_CM64SA)
     (unimp cm64sa)
     ())

(dni cm64sd "Counter Manager 64-bit Saturating Decrement" (MACH10 EVEN-REG-NUM USES-RT USES-RD)
     "cm64sd $rd,$rt"
     (+ OP_COP3 (f-rs 0) rt rd (f-cp-op 0) (f-cp-grp 2) FUNC10_CM64SD)
     (unimp cm64sd)
     ())

(dni cm64si "Counter Manager 64-bit Saturating Increment" (MACH10 EVEN-REG-NUM USES-RT USES-RD)
     "cm64si $rd,$rt"
     (+ OP_COP3 (f-rs 0) rt rd (f-cp-op 0) (f-cp-grp 2) FUNC10_CM64SI)
     (unimp cm64si)
     ())

(dni cm64sia2 "Counter Manager 32/32 Saturating Increment/Add" (MACH10 EVEN-REG-NUM USES-RS USES-RT USES-RD)
     "cm64sia2 $rd,$rs,$rt"
     (+ OP_COP3 rs rt rd (f-cp-op 0) (f-cp-grp 2) FUNC10_CM64SIA2)
     (unimp cm64sia2)
     ())

(dni cm64ss "Counter Manager 64-bit Saturating Subtract" (MACH10 EVEN-REG-NUM USES-RS USES-RT USES-RD)
     "cm64ss $rd,$rs,$rt"
     (+ OP_COP3 rs rt rd (f-cp-op 0) (f-cp-grp 2) FUNC10_CM64SS)
     (unimp cm64ss)
     ())

(dni cm128ria2 "Counter Manager 128-bit 64/64 Rolling Increment/Add" (MACH10 EVEN-REG-NUM USES-RS USES-RT USES-RD)
     "cm128ria2 $rd,$rs,$rt"
     (+ OP_COP3 rs rt rd (f-cp-op 0) (f-cp-grp 2) FUNC10_CM128RIA2)
     (unimp cm128ria2)
     ())

(dni cm128ria3 "Counter Manager 128-bit 32/32/64 Rolling Increment/Add" (MACH10 EVEN-REG-NUM USES-RS USES-RT USES-RD)
     "cm128ria3 $rd,$rs,$rt,${cm-3z}"
     (+ OP_COP3 rs rt rd (f-cp-op 0) (f-cp-grp 2) FUNC10_CM128RIA3 cm-3z)
     (unimp cm128ria3)
     ())

(dni cm128ria4 "Counter Manager 128-bit 32/32/32/32 Rolling Inc/Add" (MACH10 USES-RS USES-RT USES-RD)
     "cm128ria4 $rd,$rs,$rt,${cm-4z}"
     (+ OP_COP3 rs rt rd (f-cp-op 0) (f-cp-grp 2) FUNC10_CM128RIA4 cm-4z)
     (unimp cm128ria4)
     ())

(dni cm128sia2 "Counter Manager 128-bit 64/64 Saturating Inc/Add" (MACH10 EVEN-REG-NUM USES-RS USES-RT USES-RD)
     "cm128sia2 $rd,$rs,$rt"
     (+ OP_COP3 rs rt rd (f-cp-op 0) (f-cp-grp 2) FUNC10_CM128SIA2)
     (unimp cm128sia2)
     ())

(dni cm128sia3 "Counter Manager 128-bit 32/32/64 Saturating Inc/Add" (MACH10 EVEN-REG-NUM USES-RS USES-RT USES-RD)
     "cm128sia3 $rd,$rs,$rt,${cm-3z}"
     (+ OP_COP3 rs rt rd (f-cp-op 0) (f-cp-grp 2) FUNC10_CM128SIA3 cm-3z)
     (unimp cm128sia3)
     ())

(dni cm128sia4 "Counter Manager 128-bit 32/32/32/32 Saturating Inc/Add" (MACH10 USES-RS USES-RT USES-RD)
     "cm128sia4 $rd,$rs,$rt,${cm-4z}"
     (+ OP_COP3 rs rt rd (f-cp-op 0) (f-cp-grp 2) FUNC10_CM128SIA4 cm-4z)
     (unimp cm128sia4)
     ())

(dni cm128vsa "Counter Manager Continuous State Dual Leaky Token Bucket Policing" (MACH10 USES-RS USES-RT USES-RD)
     "cm128vsa $rd,$rs,$rt"
     (+ OP_COP3 rs rt rd (f-cp-op 0) (f-cp-grp 2) FUNC10_CM128VSA)
     (unimp cm128vsa)
     ())

; Coprocessor Data Movement Instructions

; Note that we don't set the USES-RD or USES-RT attributes for many of the following 
; instructions, as it's the COP register that's being specified.

; ??? Is YIELD-INSN the right attribute for IQ10?  The IQ2000 used the attribute to warn about 
; yielding instructions in a delay slot, but that's not relevant in IQ10.  What *is* relevant 
; (and unique to IQ10) is instructions that yield if the destination register is accessed 
; before the value is there, causing a yield.

(dni cfc "copy from coprocessor control register" (MACH10 LOAD-DELAY USES-RD YIELD-INSN)
     "cfc $rd,$rt"
     (+ OP_COP3 (f-rs 0) rt rd (f-shamt 0) FUNC10_CFC)
     (unimp cfc)
     ())

(dni ctc "copy to coprocessor control register" (MACH10 USES-RS)
     "ctc $rs,$rt"
     (+ OP_COP3 rs rt (f-rd 0) (f-shamt 0) FUNC10_CTC)
     (unimp ctc)
     ())

; Macros

(dnmi m-avail "Mark Header Buffer Available" (MACH10 NO-DIS)
     "avail"
     (emit avail (f-rd 0))
)

(dnmi m-cam36 "CAM Access in 36-bit Mode" (MACH10 USES-RT USES-RD NO-DIS)
     "cam36 $rd,$rt,${cam-z}"
     (emit cam36 rd rt cam-z (f-cam-y 0))
)

(dnmi m-cam72 "CAM Access in 72-bit Mode" (MACH10 USES-RT USES-RD NO-DIS)
     "cam72 $rd,$rt,${cam-z}"
     (emit cam72 rd rt cam-z (f-cam-y 0))
)

(dnmi m-cam144 "CAM Access in 144-bit Mode" (MACH10 USES-RT USES-RD NO-DIS)
     "cam144 $rd,$rt,${cam-z}"
     (emit cam144 rd rt cam-z (f-cam-y 0))
)

(dnmi m-cam288 "CAM Access in 288-bit Mode" (MACH10 USES-RT USES-RD NO-DIS)
     "cam288 $rd,$rt,${cam-z}"
     (emit cam288 rd rt cam-z (f-cam-y 0))
)

(dnmi m-cm32read "Counter Manager 32-bit Rolling Add R0" (MACH10 USES-RT USES-RD NO-DIS)
     "cm32read $rd,$rt"
     (emit cm32ra rd (f-rs 0) rt)
)

(dnmi m-cm64read "Counter Manager 64-bit Rolling Add R0" (MACH10 USES-RT USES-RD NO-DIS)
     "cm64read $rd,$rt"
     (emit cm64ra rd (f-rs 0) rt)
)

(dnmi m-cm32mlog "Counter Manager 32-bit or R0" (MACH10 USES-RS USES-RT NO-DIS)
     "cm32mlog $rs,$rt"
     (emit cm32or (f-rd 0) rs rt)
)

(dnmi m-cm32and "Counter Manager And" (MACH10 USES-RS USES-RT USES-RD NO-DIS)
     "cm32and $rs,$rt"
     (emit cm32and (f-rd 0) rs rt)
)

(dnmi m-cm32andn "Counter Manager And With Inverse" (MACH10 USES-RS USES-RT USES-RD NO-DIS)
     "cm32andn $rs,$rt"
     (emit cm32andn (f-rd 0) rs rt)
)

(dnmi m-cm32or "Counter Manager Or" (MACH10 USES-RS USES-RT USES-RD NO-DIS)
     "cm32or $rs,$rt"
     (emit cm32or (f-rd 0) rs rt)
)

(dnmi m-cm32ra "Counter Manager 32-bit Rolling Add" (MACH10 USES-RS USES-RT USES-RD NO-DIS)
     "cm32ra $rs,$rt"
     (emit cm32ra (f-rd 0) rs rt)
)

(dnmi m-cm32rd "Counter Manager 32-bit Rolling Decrement" (MACH10 USES-RT USES-RD NO-DIS)
     "cm32rd $rt"
     (emit cm32rd (f-rd 0) rt)
)

(dnmi m-cm32ri "Counter Manager 32-bit Rolling Increment" (MACH10 USES-RT USES-RD NO-DIS)
     "cm32ri $rt"
     (emit cm32ri (f-rd 0) rt)
)

(dnmi m-cm32rs "Counter Manager 32-bit Rolling Subtract" (MACH10 USES-RS USES-RT USES-RD NO-DIS)
     "cm32rs $rs,$rt"
     (emit cm32rs (f-rd 0) rs rt)
)

(dnmi m-cm32sa "Counter Manager 32-bit Saturating Add" (MACH10 USES-RS USES-RT USES-RD NO-DIS)
     "cm32sa $rs,$rt"
     (emit cm32sa (f-rd 0) rs rt)
)

(dnmi m-cm32sd "Counter Manager 32-bit Saturating Decrement" (MACH10 USES-RT USES-RD NO-DIS)
     "cm32sd $rt"
     (emit cm32sd (f-rd 0) rt)
)

(dnmi m-cm32si "Counter Manager 32-bit Saturating Increment" (MACH10 USES-RT USES-RD NO-DIS)
     "cm32si $rt"
     (emit cm32si (f-rd 0) rt)
)

(dnmi m-cm32ss "Counter Manager 32-bit Saturating Subtract" (MACH10 USES-RS USES-RT USES-RD NO-DIS)
     "cm32ss $rs,$rt"
     (emit cm32ss (f-rd 0) rs rt)
)

(dnmi m-cm32xor "Counter Manager Xor" (MACH10 USES-RS USES-RT USES-RD NO-DIS)
     "cm32xor $rs,$rt"
     (emit cm32xor (f-rd 0) rs rt)
)

(dnmi m-cm64clr "Counter Manager Clear" (MACH10 USES-RT USES-RD NO-DIS)
     "cm64clr $rt"
     (emit cm64clr (f-rd 0) rt)
)

(dnmi m-cm64ra "Counter Manager 64-bit Rolling Add" (MACH10 USES-RS USES-RT USES-RD NO-DIS)
     "cm64ra $rs,$rt"
     (emit cm64ra (f-rd 0) rs rt)
)

(dnmi m-cm64rd "Counter Manager 64-bit Rolling Decrement" (MACH10 USES-RT USES-RD NO-DIS)
     "cm64rd $rt"
     (emit cm64rd (f-rd 0) rt)
)

(dnmi m-cm64ri "Counter Manager 32-bit Rolling Increment" (MACH10 USES-RT USES-RD NO-DIS)
     "cm64ri $rt"
     (emit cm64ri (f-rd 0) rt)
)

(dnmi m-cm64ria2 "Counter Manager 32/32 Rolling Increment/Add" (MACH10 USES-RS USES-RT USES-RD NO-DIS)
     "cm64ria2 $rs,$rt"
     (emit cm64ria2 (f-rd 0) rs rt)
)

(dnmi m-cm64rs "Counter Manager 64-bit Rolling Subtract" (MACH10 USES-RS USES-RT USES-RD NO-DIS)
     "cm64rs $rs,$rt"
     (emit cm64rs (f-rd 0) rs rt)
)

(dnmi m-cm64sa "Counter Manager 64-bit Saturating Add" (MACH10 USES-RS USES-RT USES-RD NO-DIS)
     "cm64sa $rs,$rt"
     (emit cm64sa (f-rd 0) rs rt)
)

(dnmi m-cm64sd "Counter Manager 64-bit Saturating Decrement" (MACH10 USES-RT USES-RD NO-DIS)
     "cm64sd $rt"
     (emit cm64sd (f-rd 0) rt)
)

(dnmi m-cm64si "Counter Manager 64-bit Saturating Increment" (MACH10 USES-RT USES-RD NO-DIS)
     "cm64si $rt"
     (emit cm64si (f-rd 0) rt)
)

(dnmi m-cm64sia2 "Counter Manager 32/32 Saturating Increment/Add" (MACH10 USES-RS USES-RT USES-RD NO-DIS)
     "cm64sia2 $rs,$rt"
     (emit cm64sia2 (f-rd 0) rs rt)
)

(dnmi m-cm64ss "Counter Manager 64-bit Saturating Subtract" (MACH10 USES-RS USES-RT USES-RD NO-DIS)
     "cm64ss $rs,$rt"
     (emit cm64ss (f-rd 0) rs rt)
)

(dnmi m-cm128ria2 "Counter Manager 128-bit 64/64 Rolling Increment/Add" (MACH10 USES-RS USES-RT USES-RD NO-DIS)
     "cm128ria2 $rs,$rt"
     (emit cm128ria2 (f-rd 0) rs rt)
)

(dnmi m-cm128ria3 "Counter Manager 128-bit 32/32/64 Rolling Increment/Add" (MACH10 USES-RS USES-RT USES-RD NO-DIS)
     "cm128ria3 $rs,$rt,${cm-3z}"
     (emit cm128ria3 (f-rd 0) rs rt cm-3z)
)

(dnmi m-cm128ria4 "Counter Manager 128-bit 32/32/32/32 Rolling Inc/Add" (MACH10 USES-RS USES-RT USES-RD NO-DIS)
     "cm128ria4 $rs,$rt,${cm-4z}"
     (emit cm128ria4 (f-rd 0) rs rt cm-4z)
)

(dnmi m-cm128sia2 "Counter Manager 128-bit 64/64 Saturating Inc/Add" (MACH10 USES-RS USES-RT USES-RD NO-DIS)
     "cm128sia2 $rs,$rt"
     (emit cm128sia2 (f-rd 0) rs rt)
)

(dnmi m-cm128sia3 "Counter Manager 128-bit 32/32/64 Saturating Inc/Add" (MACH10 USES-RS USES-RT USES-RD NO-DIS)
     "cm128sia3 $rs,$rt,${cm-3z}"
     (emit cm128sia3 (f-rd 0) rs rt cm-3z)
)

(dnmi m-cm128sia4 "Counter Manager 128-bit 32/32/32/32 Saturating Inc/Add" (MACH10 USES-RS USES-RT USES-RD NO-DIS)
     "cm128sia4 $rs,$rt,${cm-4z}"
     (emit cm128sia4 (f-rd 0) rs rt cm-4z)
)

(dnmi m-cmphdr "Get a Complete Header" (MACH10 NO-DIS)
     "cmphdr"
     (emit cmphdr (f-rd 0))
)

(dnmi m-dbd "Deallocate a Data Buffer Pointer" (MACH10 USES-RD USES-RT NO-DIS)
     "dbd $rd,$rt"
     (emit dbd rd (f-rs 0) rt)
)

(dnmi m2-dbd "Deallocate a Data Buffer Pointer" (MACH10 USES-RT NO-DIS)
     "dbd $rt"
     (emit dbd (f-rd 0) (f-rs 0) rt)
)

(dnmi m-dpwt "DSTN_PORT Write" (MACH10 USES-RS NO-DIS)
     "dpwt $rs"
     (emit dpwt (f-rd 0) rs)
)

(dnmi m-free "" (MACH10 USES-RS USES-RD NO-DIS)
     "free $rs"
     (emit free (f-rd 0) rs)
)

;(dnmi m-jal "jump and link, implied r31" (MACH10 USES-RT NO-DIS)
;     "jal $jmptarg"
;     (emit jal (f-rt 31) jmptarg)
;)

(dnmi m-lock "lock memory" (MACH10 USES-RT NO-DIS)
     "lock $rt"
     (emit lock (f-rd 0) rt)
)

(dnmi m-pkrla "Packet Release Absolute" (MACH10 USES-RS USES-RT USES-RD NO-DIS)
     "pkrla $rs,$rt"
     (emit pkrla (f-rd 0) rs rt)
)

(dnmi m-pkrlac "Packet Release Absolute Continue" (MACH10 USES-RS USES-RT USES-RD NO-DIS)
     "pkrlac $rs,$rt"
     (emit pkrlac (f-rd 0) rs rt)
)

(dnmi m-pkrlah "Packet Release Absolute and Hold" (MACH10 USES-RS USES-RT USES-RD NO-DIS)
     "pkrlah $rs,$rt"
     (emit pkrlah (f-rd 0) rs rt)
)

(dnmi m-pkrlau "Packet Release Absolute Unconditional" (MACH10 USES-RS USES-RT USES-RD NO-DIS)
     "pkrlau $rs,$rt"
     (emit pkrlau (f-rd 0) rs rt)
)

(dnmi m-pkrli "Packet Release Immediate" (MACH10 USES-RD USES-RS USES-RT NO-DIS)
     "pkrli $rs,$rt,$bytecount"
     (emit pkrli (f-rd 0) rs rt bytecount)
)

(dnmi m-pkrlic "Packet Release Immediate Continue" (MACH10 USES-RS USES-RT NO-DIS)
     "pkrlic $rs,$rt,$bytecount"
     (emit pkrlic (f-rd 0) rs rt bytecount)
)

(dnmi m-pkrlih "Packet Release Immediate and Hold" (MACH10 USES-RD USES-RS USES-RT NO-DIS)
     "pkrlih $rs,$rt,$bytecount"
     (emit pkrlih (f-rd 0) rs rt bytecount)
)

(dnmi m-pkrliu "Packet Release Immediate Unconditional" (MACH10 USES-RD USES-RS USES-RT NO-DIS)
     "pkrliu $rs,$rt,$bytecount"
     (emit pkrliu (f-rd 0) rs rt bytecount)
)

(dnmi m-rba "Read Bytes Absolute" (MACH10 USES-RS USES-RT USES-RD NO-DIS)
     "rba $rs,$rt"
     (emit rba (f-rd 0) rs rt)
)

(dnmi m-rbal "Read Bytes Absolute and Lock" (MACH10 USES-RS USES-RT USES-RD NO-DIS)
     "rbal $rs,$rt"
     (emit rbal (f-rd 0) rs rt)
)

(dnmi m-rbar "Read Bytes Absolute and Release" (MACH10 USES-RS USES-RT USES-RD NO-DIS)
     "rbar $rs,$rt"
     (emit rbar (f-rd 0) rs rt)
)

(dnmi m-rbi "Read Bytes Immediate" (MACH10 USES-RS USES-RT NO-DIS)
     "rbi $rs,$rt,$bytecount"
     (emit rbi (f-rd 0) rs rt bytecount)
)

(dnmi m-rbil "Read Bytes Immediate and Lock" (MACH10 USES-RS USES-RT NO-DIS)
     "rbil $rs,$rt,$bytecount"
     (emit rbil (f-rd 0) rs rt bytecount)
)

(dnmi m-rbir "Read Bytes Immediate and Release" (MACH10 USES-RS USES-RT NO-DIS)
     "rbir $rs,$rt,$bytecount"
     (emit rbir (f-rd 0) rs rt bytecount)
)

(dnmi m-swwr "Single Word Write" (MACH10 USES-RS USES-RT USES-RD NO-DIS)
     "swwr $rs,$rt"
     (emit swwr (f-rd 0) rs rt)
)

(dnmi m-swwru "Single Word Write and Unlock" (MACH10 USES-RS USES-RT USES-RD NO-DIS)
     "swwru $rs,$rt"
     (emit swwru (f-rd 0) rs rt)
)

(dnmi m-tstod "Test Header Buffer Order Dependency" (MACH10 USES-RS USES-RD NO-DIS)
     "tstod $rs"
     (emit tstod (f-rd 0) rs)
)

(dnmi m-unlk "" (MACH10 USES-RT USES-RD NO-DIS)
     "unlk $rt"
     (emit unlk (f-rd 0) rt)
)
     
(dnmi m-wba "Write Bytes Absolute" (MACH10 USES-RS USES-RT USES-RD NO-DIS)
     "wba $rs,$rt"
     (emit wba (f-rd 0) rs rt)
)

(dnmi m-wbac "Write Bytes Absolute Cacheable" (MACH10 USES-RS USES-RT USES-RD NO-DIS)
     "wbac $rs,$rt"
     (emit wbac (f-rd 0) rs rt)
)

(dnmi m-wbau "Write Bytes Absolute and Unlock" (MACH10 USES-RS USES-RT USES-RD NO-DIS)
     "wbau $rs,$rt"
     (emit wbau (f-rd 0) rs rt)
)

(dnmi m-wbi "Write Bytes Immediate" (MACH10 USES-RD USES-RS USES-RT NO-DIS)
     "wbi $rs,$rt,$bytecount"
     (emit wbi (f-rd 0) rs rt bytecount)
)

(dnmi m-wbic "Write Bytes Immediate Cacheable" (MACH10 USES-RD USES-RS USES-RT NO-DIS)
     "wbic $rs,$rt,$bytecount"
     (emit wbic (f-rd 0) rs rt bytecount)
)

(dnmi m-wbiu "Write Bytes Immediate" (MACH10 USES-RD USES-RS USES-RT NO-DIS)
     "wbiu $rs,$rt,$bytecount"
     (emit wbiu (f-rd 0) rs rt bytecount)
)

@


1.3
log
@Change source files over to GPLv3.
@
text
@d3 1
a3 1
; Copyright 2001, 2002, 2007 Free Software Foundation, Inc.
@


1.2
log
@Update the address and phone number of the FSF organization
@
text
@d3 1
a3 1
; Copyright 2001, 2002 Free Software Foundation, Inc.
d11 1
a11 1
; the Free Software Foundation; either version 2 of the License, or
d21 2
a22 1
; Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA 02110-1301, USA.
@


1.1
log
@2003-06-06  Andrew Cagney  <cagney@@redhat.com>

	Contributed by Red Hat.
	* iq2000.cpu: New file.  Written by Ben Elliston, Jeff Johnston,
	Stan Cox, and Frank Ch. Eigler.
	* iq2000.opc: New file.  Written by Ben Elliston, Frank
	Ch. Eigler, Chris Moller, Jeff Johnston, and Stan Cox.
	* iq2000m.cpu: New file.  Written by Jeff Johnston.
	* iq10.cpu: New file.  Written by Jeff Johnston.
@
text
@d21 1
a21 1
; Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
@


1.1.12.1
log
@Merge drow-cplus-branch to:
  cvs rtag -D 2003-12-14 00:00:00 UTC drow-cplus-merge-20031214 gdb+dejagnu
@
text
@@

