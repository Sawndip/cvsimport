head	1.10;
access;
symbols
	sid-snapshot-20180601:1.10
	sid-snapshot-20180501:1.10
	sid-snapshot-20180401:1.10
	sid-snapshot-20180301:1.10
	sid-snapshot-20180201:1.10
	sid-snapshot-20180101:1.10
	sid-snapshot-20171201:1.10
	sid-snapshot-20171101:1.10
	sid-snapshot-20171001:1.10
	sid-snapshot-20170901:1.10
	sid-snapshot-20170801:1.10
	sid-snapshot-20170701:1.10
	sid-snapshot-20170601:1.10
	sid-snapshot-20170501:1.10
	sid-snapshot-20170401:1.10
	sid-snapshot-20170301:1.10
	sid-snapshot-20170201:1.10
	sid-snapshot-20170101:1.10
	sid-snapshot-20161201:1.10
	sid-snapshot-20161101:1.10
	sid-snapshot-20160901:1.10
	sid-snapshot-20160801:1.10
	sid-snapshot-20160701:1.10
	sid-snapshot-20160601:1.10
	sid-snapshot-20160501:1.10
	sid-snapshot-20160401:1.10
	sid-snapshot-20160301:1.10
	sid-snapshot-20160201:1.10
	sid-snapshot-20160101:1.10
	sid-snapshot-20151201:1.10
	sid-snapshot-20151101:1.10
	sid-snapshot-20151001:1.10
	sid-snapshot-20150901:1.10
	sid-snapshot-20150801:1.10
	sid-snapshot-20150701:1.10
	sid-snapshot-20150601:1.10
	sid-snapshot-20150501:1.10
	sid-snapshot-20150401:1.10
	sid-snapshot-20150301:1.10
	sid-snapshot-20150201:1.10
	sid-snapshot-20150101:1.10
	sid-snapshot-20141201:1.10
	sid-snapshot-20141101:1.10
	sid-snapshot-20141001:1.10
	sid-snapshot-20140901:1.10
	sid-snapshot-20140801:1.10
	sid-snapshot-20140701:1.10
	sid-snapshot-20140601:1.10
	sid-snapshot-20140501:1.10
	sid-snapshot-20140401:1.10
	sid-snapshot-20140301:1.10
	sid-snapshot-20140201:1.10
	sid-snapshot-20140101:1.10
	sid-snapshot-20131201:1.10
	sid-snapshot-20131101:1.10
	sid-snapshot-20131001:1.10
	binutils-2_24-branch:1.10.0.56
	binutils-2_24-branchpoint:1.10
	binutils-2_21_1:1.10
	sid-snapshot-20130901:1.10
	gdb_7_6_1-2013-08-30-release:1.10
	sid-snapshot-20130801:1.10
	sid-snapshot-20130701:1.10
	sid-snapshot-20130601:1.10
	sid-snapshot-20130501:1.10
	gdb_7_6-2013-04-26-release:1.10
	sid-snapshot-20130401:1.10
	binutils-2_23_2:1.10
	gdb_7_6-branch:1.10.0.54
	gdb_7_6-2013-03-12-branchpoint:1.10
	sid-snapshot-20130301:1.10
	sid-snapshot-20130201:1.10
	sid-snapshot-20130101:1.10
	sid-snapshot-20121201:1.10
	gdb_7_5_1-2012-11-29-release:1.10
	binutils-2_23_1:1.10
	sid-snapshot-20121101:1.10
	binutils-2_23:1.10
	sid-snapshot-20121001:1.10
	sid-snapshot-20120901:1.10
	gdb_7_5-2012-08-17-release:1.10
	sid-snapshot-20120801:1.10
	binutils-2_23-branch:1.10.0.52
	binutils-2_23-branchpoint:1.10
	gdb_7_5-branch:1.10.0.50
	gdb_7_5-2012-07-18-branchpoint:1.10
	sid-snapshot-20120701:1.10
	sid-snapshot-20120601:1.10
	sid-snapshot-20120501:1.10
	binutils-2_22_branch:1.10.0.48
	gdb_7_4_1-2012-04-26-release:1.10
	sid-snapshot-20120401:1.10
	sid-snapshot-20120301:1.10
	sid-snapshot-20120201:1.10
	gdb_7_4-2012-01-24-release:1.10
	sid-snapshot-20120101:1.10
	gdb_7_4-branch:1.10.0.46
	gdb_7_4-2011-12-13-branchpoint:1.10
	sid-snapshot-20111201:1.10
	binutils-2_22:1.10
	sid-snapshot-20111101:1.10
	sid-snapshot-20111001:1.10
	binutils-2_22-branch:1.10.0.44
	binutils-2_22-branchpoint:1.10
	gdb_7_3_1-2011-09-04-release:1.10
	sid-snapshot-20110901:1.10
	sid-snapshot-20110801:1.10
	gdb_7_3-2011-07-26-release:1.10
	sid-snapshot-20110701:1.10
	sid-snapshot-20110601:1.10
	sid-snapshot-20110501:1.10
	gdb_7_3-branch:1.10.0.42
	gdb_7_3-2011-04-01-branchpoint:1.10
	sid-snapshot-20110401:1.10
	sid-snapshot-20110301:1.10
	sid-snapshot-20110201:1.10
	sid-snapshot-20110101:1.10
	binutils-2_21:1.10
	sid-snapshot-20101201:1.10
	binutils-2_21-branch:1.10.0.40
	binutils-2_21-branchpoint:1.10
	sid-snapshot-20101101:1.10
	sid-snapshot-20101001:1.10
	binutils-2_20_1:1.10
	gdb_7_2-2010-09-02-release:1.10
	sid-snapshot-20100901:1.10
	sid-snapshot-20100801:1.10
	gdb_7_2-branch:1.10.0.38
	gdb_7_2-2010-07-07-branchpoint:1.10
	sid-snapshot-20100701:1.10
	sid-snapshot-20100601:1.10
	sid-snapshot-20100501:1.10
	sid-snapshot-20100401:1.10
	gdb_7_1-2010-03-18-release:1.10
	sid-snapshot-20100301:1.10
	gdb_7_1-branch:1.10.0.36
	gdb_7_1-2010-02-18-branchpoint:1.10
	sid-snapshot-20100201:1.10
	sid-snapshot-20100101:1.10
	gdb_7_0_1-2009-12-22-release:1.10
	sid-snapshot-20091201:1.10
	sid-snapshot-20091101:1.10
	binutils-2_20:1.10
	gdb_7_0-2009-10-06-release:1.10
	sid-snapshot-20091001:1.10
	gdb_7_0-branch:1.10.0.34
	gdb_7_0-2009-09-16-branchpoint:1.10
	arc-sim-20090309:1.10
	binutils-arc-20081103-branch:1.10.0.32
	binutils-arc-20081103-branchpoint:1.10
	binutils-2_20-branch:1.10.0.30
	binutils-2_20-branchpoint:1.10
	sid-snapshot-20090901:1.10
	sid-snapshot-20090801:1.10
	msnyder-checkpoint-072509-branch:1.10.0.28
	msnyder-checkpoint-072509-branchpoint:1.10
	sid-snapshot-20090701:1.10
	dje-cgen-play1-branch:1.10.0.26
	dje-cgen-play1-branchpoint:1.10
	sid-snapshot-20090601:1.10
	sid-snapshot-20090501:1.10
	sid-snapshot-20090401:1.10
	arc-20081103-branch:1.10.0.24
	arc-20081103-branchpoint:1.10
	arc-insight_6_8-branch:1.10.0.22
	arc-insight_6_8-branchpoint:1.10
	insight_6_8-branch:1.10.0.20
	insight_6_8-branchpoint:1.10
	sid-snapshot-20090301:1.10
	binutils-2_19_1:1.10
	sid-snapshot-20090201:1.10
	sid-snapshot-20090101:1.10
	reverse-20081226-branch:1.10.0.18
	reverse-20081226-branchpoint:1.10
	sid-snapshot-20081201:1.10
	multiprocess-20081120-branch:1.10.0.16
	multiprocess-20081120-branchpoint:1.10
	sid-snapshot-20081101:1.10
	binutils-2_19:1.10
	sid-snapshot-20081001:1.10
	reverse-20080930-branch:1.10.0.14
	reverse-20080930-branchpoint:1.10
	binutils-2_19-branch:1.10.0.12
	binutils-2_19-branchpoint:1.10
	sid-snapshot-20080901:1.10
	sid-snapshot-20080801:1.10
	reverse-20080717-branch:1.10.0.10
	reverse-20080717-branchpoint:1.10
	sid-snapshot-20080701:1.10
	msnyder-reverse-20080609-branch:1.10.0.8
	msnyder-reverse-20080609-branchpoint:1.10
	drow-reverse-20070409-branch:1.9.0.34
	drow-reverse-20070409-branchpoint:1.9
	sid-snapshot-20080601:1.10
	sid-snapshot-20080501:1.10
	sid-snapshot-20080403:1.10
	sid-snapshot-20080401:1.10
	gdb_6_8-2008-03-27-release:1.10
	sid-snapshot-20080301:1.10
	gdb_6_8-branch:1.10.0.6
	gdb_6_8-2008-02-26-branchpoint:1.10
	sid-snapshot-20080201:1.10
	sid-snapshot-20080101:1.10
	sid-snapshot-20071201:1.10
	sid-snapshot-20071101:1.10
	gdb_6_7_1-2007-10-29-release:1.10
	gdb_6_7-2007-10-10-release:1.10
	sid-snapshot-20071001:1.10
	gdb_6_7-branch:1.10.0.4
	gdb_6_7-2007-09-07-branchpoint:1.10
	binutils-2_18:1.10
	binutils-2_18-branch:1.10.0.2
	binutils-2_18-branchpoint:1.10
	insight_6_6-20070208-release:1.9
	binutils-csl-coldfire-4_1-32:1.9
	binutils-csl-sourcerygxx-4_1-32:1.9
	gdb_6_6-2006-12-18-release:1.9
	binutils-csl-innovasic-fido-3_4_4-33:1.9
	binutils-csl-sourcerygxx-3_4_4-32:1.6
	binutils-csl-coldfire-4_1-30:1.9
	binutils-csl-sourcerygxx-4_1-30:1.9
	binutils-csl-coldfire-4_1-28:1.9
	binutils-csl-sourcerygxx-4_1-29:1.9
	binutils-csl-sourcerygxx-4_1-28:1.9
	gdb_6_6-branch:1.9.0.32
	gdb_6_6-2006-11-15-branchpoint:1.9
	binutils-csl-arm-2006q3-27:1.9
	binutils-csl-sourcerygxx-4_1-27:1.9
	binutils-csl-arm-2006q3-26:1.9
	binutils-csl-sourcerygxx-4_1-26:1.9
	binutils-csl-sourcerygxx-4_1-25:1.9
	binutils-csl-sourcerygxx-4_1-24:1.9
	binutils-csl-sourcerygxx-4_1-23:1.9
	insight_6_5-20061003-release:1.9
	gdb-csl-symbian-6_4_50_20060226-12:1.9
	binutils-csl-sourcerygxx-4_1-21:1.9
	binutils-csl-arm-2006q3-21:1.9
	binutils-csl-sourcerygxx-4_1-22:1.9
	binutils-csl-palmsource-arm-prelinker-1_0-1:1.9
	binutils-csl-sourcerygxx-4_1-20:1.9
	binutils-csl-arm-2006q3-19:1.9
	binutils-csl-sourcerygxx-4_1-19:1.9
	binutils-csl-sourcerygxx-4_1-18:1.9
	binutils-csl-renesas-4_1-9:1.9
	gdb-csl-sourcerygxx-3_4_4-25:1.9
	binutils-csl-sourcerygxx-3_4_4-25:1.6
	nickrob-async-20060828-mergepoint:1.9
	gdb-csl-symbian-6_4_50_20060226-11:1.9
	binutils-csl-renesas-4_1-8:1.9
	binutils-csl-renesas-4_1-7:1.9
	binutils-csl-renesas-4_1-6:1.9
	gdb-csl-sourcerygxx-4_1-17:1.9
	binutils-csl-sourcerygxx-4_1-17:1.9
	gdb-csl-20060226-branch-local-2:1.9
	gdb-csl-sourcerygxx-4_1-14:1.9
	binutils-csl-sourcerygxx-4_1-14:1.9
	binutils-csl-sourcerygxx-4_1-15:1.9
	gdb-csl-sourcerygxx-4_1-13:1.9
	binutils-csl-sourcerygxx-4_1-13:1.9
	binutils-2_17:1.9
	gdb-csl-sourcerygxx-4_1-12:1.9
	binutils-csl-sourcerygxx-4_1-12:1.9
	gdb-csl-sourcerygxx-3_4_4-21:1.9
	binutils-csl-sourcerygxx-3_4_4-21:1.9
	gdb_6_5-20060621-release:1.9
	binutils-csl-wrs-linux-3_4_4-24:1.6
	binutils-csl-wrs-linux-3_4_4-23:1.6
	gdb-csl-sourcerygxx-4_1-9:1.9
	binutils-csl-sourcerygxx-4_1-9:1.9
	gdb-csl-sourcerygxx-4_1-8:1.9
	binutils-csl-sourcerygxx-4_1-8:1.9
	gdb-csl-sourcerygxx-4_1-7:1.9
	binutils-csl-sourcerygxx-4_1-7:1.9
	gdb-csl-arm-2006q1-6:1.9
	binutils-csl-arm-2006q1-6:1.9
	gdb-csl-sourcerygxx-4_1-6:1.9
	binutils-csl-sourcerygxx-4_1-6:1.9
	binutils-csl-wrs-linux-3_4_4-22:1.6
	gdb-csl-symbian-6_4_50_20060226-10:1.9
	gdb-csl-symbian-6_4_50_20060226-9:1.9
	gdb-csl-symbian-6_4_50_20060226-8:1.9
	gdb-csl-coldfire-4_1-11:1.9
	binutils-csl-coldfire-4_1-11:1.9
	gdb-csl-sourcerygxx-3_4_4-19:1.9
	binutils-csl-sourcerygxx-3_4_4-19:1.9
	gdb-csl-coldfire-4_1-10:1.9
	gdb_6_5-branch:1.9.0.30
	gdb_6_5-2006-05-14-branchpoint:1.9
	binutils-csl-coldfire-4_1-10:1.9
	gdb-csl-sourcerygxx-4_1-5:1.9
	binutils-csl-sourcerygxx-4_1-5:1.9
	nickrob-async-20060513-branch:1.9.0.28
	nickrob-async-20060513-branchpoint:1.9
	gdb-csl-sourcerygxx-4_1-4:1.9
	binutils-csl-sourcerygxx-4_1-4:1.9
	msnyder-reverse-20060502-branch:1.9.0.26
	msnyder-reverse-20060502-branchpoint:1.9
	binutils-csl-wrs-linux-3_4_4-21:1.6
	gdb-csl-morpho-4_1-4:1.9
	binutils-csl-morpho-4_1-4:1.9
	gdb-csl-sourcerygxx-3_4_4-17:1.9
	binutils-csl-sourcerygxx-3_4_4-17:1.9
	binutils-csl-wrs-linux-3_4_4-20:1.6
	readline_5_1-import-branch:1.9.0.24
	readline_5_1-import-branchpoint:1.9
	gdb-csl-20060226-branch-merge-to-csl-symbian-1:1.9
	binutils-2_17-branch:1.9.0.22
	binutils-2_17-branchpoint:1.9
	gdb-csl-symbian-20060226-branch:1.9.0.20
	gdb-csl-symbian-20060226-branchpoint:1.9
	gdb-csl-20060226-branch-merge-to-csl-local-1:1.9
	msnyder-reverse-20060331-branch:1.9.0.18
	msnyder-reverse-20060331-branchpoint:1.9
	binutils-csl-2_17-branch:1.9.0.16
	binutils-csl-2_17-branchpoint:1.9
	gdb-csl-available-20060303-branch:1.9.0.14
	gdb-csl-available-20060303-branchpoint:1.9
	gdb-csl-20060226-branch:1.9.0.12
	gdb-csl-20060226-branchpoint:1.9
	gdb_6_4-20051202-release:1.9
	msnyder-fork-checkpoint-branch:1.9.0.10
	msnyder-fork-checkpoint-branchpoint:1.9
	gdb-csl-gxxpro-6_3-branch:1.9.0.8
	gdb-csl-gxxpro-6_3-branchpoint:1.9
	gdb_6_4-branch:1.9.0.6
	gdb_6_4-2005-11-01-branchpoint:1.9
	gdb-csl-arm-20051020-branch:1.9.0.4
	gdb-csl-arm-20051020-branchpoint:1.9
	binutils-csl-gxxpro-3_4-branch:1.6.0.28
	binutils-csl-gxxpro-3_4-branchpoint:1.6
	binutils-2_16_1:1.6
	msnyder-tracepoint-checkpoint-branch:1.9.0.2
	msnyder-tracepoint-checkpoint-branchpoint:1.9
	gdb-csl-arm-20050325-2005-q1b:1.6
	binutils-csl-arm-2005q1b:1.6
	binutils-2_16:1.6
	gdb-csl-arm-20050325-2005-q1a:1.6
	binutils-csl-arm-2005q1a:1.6
	csl-arm-20050325-branch:1.6.0.26
	csl-arm-20050325-branchpoint:1.6
	binutils-csl-arm-2005q1-branch:1.6.0.24
	binutils-csl-arm-2005q1-branchpoint:1.6
	binutils-2_16-branch:1.6.0.22
	binutils-2_16-branchpoint:1.6
	csl-arm-2004-q3d:1.6
	gdb_6_3-20041109-release:1.6
	gdb_6_3-branch:1.6.0.18
	gdb_6_3-20041019-branchpoint:1.6
	csl-arm-2004-q3:1.6
	drow_intercu-merge-20040921:1.6
	drow_intercu-merge-20040915:1.6
	jimb-gdb_6_2-e500-branch:1.6.0.20
	jimb-gdb_6_2-e500-branchpoint:1.6
	gdb_6_2-20040730-release:1.6
	gdb_6_2-branch:1.6.0.16
	gdb_6_2-2004-07-10-gmt-branchpoint:1.6
	gdb_6_1_1-20040616-release:1.6
	binutils-2_15:1.6
	binutils-2_15-branchpoint:1.6
	csl-arm-2004-q1a:1.6
	csl-arm-2004-q1:1.6
	gdb_6_1-2004-04-05-release:1.6
	drow_intercu-merge-20040402:1.6
	drow_intercu-merge-20040327:1.6
	ezannoni_pie-20040323-branch:1.6.0.14
	ezannoni_pie-20040323-branchpoint:1.6
	cagney_tramp-20040321-mergepoint:1.6
	cagney_tramp-20040309-branch:1.6.0.12
	cagney_tramp-20040309-branchpoint:1.6
	gdb_6_1-branch:1.6.0.10
	gdb_6_1-2004-03-01-gmt-branchpoint:1.6
	drow_intercu-20040221-branch:1.6.0.8
	drow_intercu-20040221-branchpoint:1.6
	binutils-2_15-branch:1.6.0.6
	cagney_bfdfile-20040213-branch:1.6.0.4
	cagney_bfdfile-20040213-branchpoint:1.6
	drow-cplus-merge-20040208:1.6
	carlton_dictionary-20040126-merge:1.6
	cagney_bigcore-20040122-branch:1.6.0.2
	cagney_bigcore-20040122-branchpoint:1.6
	drow-cplus-merge-20040113:1.6
	csl-arm-2003-q4:1.6
	drow-cplus-merge-20031224:1.6
	drow-cplus-merge-20031220:1.6
	carlton_dictionary-20031215-merge:1.6
	drow-cplus-merge-20031214:1.6
	carlton-dictionary-20031111-merge:1.6
	gdb_6_0-2003-10-04-release:1.4
	kettenis_sparc-20030918-branch:1.4.0.42
	kettenis_sparc-20030918-branchpoint:1.4
	carlton_dictionary-20030917-merge:1.4
	ezannoni_pie-20030916-branchpoint:1.4
	ezannoni_pie-20030916-branch:1.4.0.40
	cagney_x86i386-20030821-branch:1.4.0.38
	cagney_x86i386-20030821-branchpoint:1.4
	carlton_dictionary-20030805-merge:1.4
	carlton_dictionary-20030627-merge:1.4
	gdb_6_0-branch:1.4.0.36
	gdb_6_0-2003-06-23-branchpoint:1.4
	jimb-ppc64-linux-20030613-branch:1.4.0.34
	jimb-ppc64-linux-20030613-branchpoint:1.4
	binutils-2_14:1.4
	cagney_convert-20030606-branch:1.4.0.32
	cagney_convert-20030606-branchpoint:1.4
	cagney_writestrings-20030508-branch:1.4.0.30
	cagney_writestrings-20030508-branchpoint:1.4
	jimb-ppc64-linux-20030528-branch:1.4.0.28
	jimb-ppc64-linux-20030528-branchpoint:1.4
	carlton_dictionary-20030523-merge:1.4
	cagney_fileio-20030521-branch:1.4.0.26
	cagney_fileio-20030521-branchpoint:1.4
	kettenis_i386newframe-20030517-mergepoint:1.4
	jimb-ppc64-linux-20030509-branch:1.4.0.24
	jimb-ppc64-linux-20030509-branchpoint:1.4
	kettenis_i386newframe-20030504-mergepoint:1.4
	carlton_dictionary-20030430-merge:1.4
	binutils-2_14-branch:1.4.0.22
	binutils-2_14-branchpoint:1.4
	kettenis_i386newframe-20030419-branch:1.4.0.20
	kettenis_i386newframe-20030419-branchpoint:1.4
	carlton_dictionary-20030416-merge:1.4
	cagney_frameaddr-20030409-mergepoint:1.4
	kettenis_i386newframe-20030406-branch:1.4.0.18
	kettenis_i386newframe-20030406-branchpoint:1.4
	cagney_frameaddr-20030403-branchpoint:1.4
	cagney_frameaddr-20030403-branch:1.4.0.16
	cagney_framebase-20030330-mergepoint:1.4
	cagney_framebase-20030326-branch:1.4.0.14
	cagney_framebase-20030326-branchpoint:1.4
	cagney_lazyid-20030317-branch:1.4.0.12
	cagney_lazyid-20030317-branchpoint:1.4
	kettenis-i386newframe-20030316-mergepoint:1.4
	offbyone-20030313-branch:1.4.0.10
	offbyone-20030313-branchpoint:1.4
	kettenis-i386newframe-20030308-branch:1.4.0.8
	kettenis-i386newframe-20030308-branchpoint:1.4
	carlton_dictionary-20030305-merge:1.4
	cagney_offbyone-20030303-branch:1.4.0.6
	cagney_offbyone-20030303-branchpoint:1.4
	carlton_dictionary-20030207-merge:1.4
	interps-20030202-branch:1.4.0.4
	interps-20030202-branchpoint:1.4
	cagney-unwind-20030108-branch:1.4.0.2
	cagney-unwind-20030108-branchpoint:1.4
	binutils-2_13_2_1:1.3
	binutils-2_13_2:1.3
	carlton_dictionary-20021223-merge:1.4
	gdb_5_3-2002-12-12-release:1.3
	carlton_dictionary-20021115-merge:1.3
	binutils-2_13_1:1.3
	kseitz_interps-20021105-merge:1.3
	kseitz_interps-20021103-merge:1.3
	drow-cplus-merge-20021020:1.3
	drow-cplus-merge-20021025:1.3
	carlton_dictionary-20021025-merge:1.3
	carlton_dictionary-20021011-merge:1.3
	drow-cplus-branch:1.3.0.24
	drow-cplus-branchpoint:1.3
	kseitz_interps-20020930-merge:1.3
	carlton_dictionary-20020927-merge:1.3
	carlton_dictionary-branch:1.3.0.22
	carlton_dictionary-20020920-branchpoint:1.3
	sid-20020905-branchpoint:1.3
	sid-20020905-branch:1.3.0.20
	gdb_5_3-branch:1.3.0.18
	gdb_5_3-2002-09-04-branchpoint:1.3
	kseitz_interps-20020829-merge:1.3
	cagney_sysregs-20020825-branch:1.3.0.16
	cagney_sysregs-20020825-branchpoint:1.3
	readline_4_3-import-branch:1.3.0.14
	readline_4_3-import-branchpoint:1.3
	binutils-2_13:1.3
	gdb_5_2_1-2002-07-23-release:1.3
	binutils-2_13-branchpoint:1.3
	binutils-2_13-branch:1.3.0.12
	kseitz_interps-20020528-branch:1.3.0.10
	kseitz_interps-20020528-branchpoint:1.3
	cagney_regbuf-20020515-branch:1.3.0.8
	cagney_regbuf-20020515-branchpoint:1.3
	binutils-2_12_1:1.3
	jimb-macro-020506-branch:1.3.0.6
	jimb-macro-020506-branchpoint:1.3
	gdb_5_2-2002-04-29-release:1.3
	binutils-2_12:1.3
	gdb_5_2-branch:1.3.0.4
	gdb_5_2-2002-03-03-branchpoint:1.3
	binutils-2_12-branch:1.3.0.2
	binutils-2_12-branchpoint:1.3
	gdb_5_1_1-2002-01-24-release:1.2
	gdb_5_1_0_1-2002-01-03-release:1.2
	cygnus_cvs_20020108_pre:1.3
	gdb_5_1_0_1-2002-01-03-branch:1.2.0.6
	gdb_5_1_0_1-2002-01-03-branchpoint:1.2
	gdb_5_1-2001-11-21-release:1.2
	gdb_s390-2001-09-26-branch:1.2.0.4
	gdb_s390-2001-09-26-branchpoint:1.2
	gdb_5_1-2001-07-29-branch:1.2.0.2
	gdb_5_1-2001-07-29-branchpoint:1.2
	binutils-2_11_2:1.1.1.1.8.1
	binutils-2_11_1:1.1.1.1.8.1
	binutils-2_11:1.1.1.1
	x86_64versiong3:1.1.1.1
	binutils-2_11-branch:1.1.1.1.0.8
	insight-precleanup-2001-01-01:1.1.1.1
	binutils-2_10_1:1.1.1.1
	binutils-2_10:1.1.1.1
	gdb-premipsmulti-2000-06-06-branch:1.1.1.1.0.6
	gdb-premipsmulti-2000-06-06-branchpoint:1.1.1.1
	gdb_5_0-2000-05-19-release:1.1.1.1
	gdb_4_18_2-2000-05-18-release:1.1.1.1
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.1
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.1
	gdb_5_0-2000-04-10-branch:1.1.1.1.0.4
	gdb_5_0-2000-04-10-branchpoint:1.1.1.1
	binutils-2_10-branch:1.1.1.1.0.2
	binutils-2_10-branchpoint:1.1.1.1
	binutils_latest_snapshot:1.10
	repo-unification-2000-02-06:1.1.1.1
	binu_ss_19990721:1.1.1.1
	binu_ss_19990602:1.1.1.1
	binu_ss_19990502:1.1.1.1
	cygnus:1.1.1;
locks; strict;
comment	@ * @;


1.10
date	2007.07.03.14.26.42;	author nickc;	state Exp;
branches;
next	1.9;

1.9
date	2005.05.04.15.53.35;	author nickc;	state Exp;
branches;
next	1.8;

1.8
date	2005.05.04.07.19.30;	author nickc;	state Exp;
branches;
next	1.7;

1.7
date	2005.04.21.07.45.37;	author nickc;	state Exp;
branches;
next	1.6;

1.6
date	2003.11.04.10.41.51;	author amodra;	state Exp;
branches;
next	1.5;

1.5
date	2003.10.16.04.11.07;	author cagney;	state Exp;
branches;
next	1.4;

1.4
date	2002.11.30.08.39.39;	author amodra;	state Exp;
branches;
next	1.3;

1.3
date	2001.09.18.09.57.25;	author amodra;	state Exp;
branches
	1.3.22.1
	1.3.24.1;
next	1.2;

1.2
date	2001.03.08.21.04.01;	author nickc;	state Exp;
branches;
next	1.1;

1.1
date	99.05.03.07.28.57;	author rth;	state Exp;
branches
	1.1.1.1;
next	;

1.3.22.1
date	2002.12.23.19.37.54;	author carlton;	state Exp;
branches;
next	1.3.22.2;

1.3.22.2
date	2003.11.11.23.50.27;	author carlton;	state Exp;
branches;
next	;

1.3.24.1
date	2003.12.14.20.26.47;	author drow;	state Exp;
branches;
next	;

1.1.1.1
date	99.05.03.07.28.57;	author rth;	state Exp;
branches
	1.1.1.1.8.1;
next	;

1.1.1.1.8.1
date	2001.06.07.03.08.26;	author amodra;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Switch sources over to use the GPL version 3
@
text
@/* BFD back-end data structures for NLM (NetWare Loadable Modules) files.
   Copyright 1993, 1994, 2001, 2002, 2003, 2005, 2007
   Free Software Foundation, Inc.
   Written by Cygnus Support.

   This file is part of BFD, the Binary File Descriptor library.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,
   MA 02110-1301, USA.  */

#ifndef _LIBNLM_H_
#define _LIBNLM_H_ 1

#ifdef ARCH_SIZE
#  define NLM_ARCH_SIZE ARCH_SIZE
#endif
#include "nlm/common.h"
#include "nlm/internal.h"
#include "nlm/external.h"

/* A reloc for an imported NLM symbol.  Normal relocs are associated
   with sections, and include a symbol.  These relocs are associated
   with (undefined) symbols, and include a section.  */

struct nlm_relent
{
  /* Section of reloc.  */
  asection *section;
  /* Reloc info (sym_ptr_ptr field set only when canonicalized).  */
  arelent reloc;
};

/* Information we keep for an NLM symbol.  */

typedef struct
{
  /* BFD symbol.  */
  asymbol symbol;
  /* Number of reloc entries for imported symbol.  */
  bfd_size_type rcnt;
  /* Array of reloc information for imported symbol.  */
  struct nlm_relent *relocs;
} nlmNAME(symbol_type);

extern bfd_boolean        nlm_mkobject                    (bfd *);
extern bfd_boolean        nlm_set_arch_mach               (bfd *, enum bfd_architecture, unsigned long);
extern void               nlmNAME (get_symbol_info)       (bfd *, asymbol *, symbol_info *);
extern long               nlmNAME (get_symtab_upper_bound)(bfd *);
extern long               nlmNAME (canonicalize_symtab)   (bfd *, asymbol **);
extern asymbol *          nlmNAME (make_empty_symbol)     (bfd *);
extern void               nlmNAME (print_symbol)          (bfd *, void *, asymbol *, bfd_print_symbol_type);
extern long               nlmNAME (get_reloc_upper_bound) (bfd *, asection *);
extern long               nlmNAME (canonicalize_reloc)    (bfd *, asection *, arelent **, asymbol **);
extern const bfd_target * nlmNAME (object_p)              (bfd *);
extern bfd_boolean        nlmNAME (set_arch_mach)         (bfd *, enum bfd_architecture, unsigned long);
extern bfd_boolean        nlmNAME (set_section_contents)  (bfd *, asection *, const void *, file_ptr, bfd_size_type);
extern bfd_boolean        nlmNAME (write_object_contents) (bfd *);

/* Some private data is stashed away for future use using the tdata pointer
   in the bfd structure.  */

struct nlm_obj_tdata
{
  /* Actual data, but ref like ptr */
  Nlm_Internal_Fixed_Header	nlm_fixed_hdr[1];
  Nlm_Internal_Variable_Header	nlm_variable_hdr[1];
  Nlm_Internal_Version_Header	nlm_version_hdr[1];
  Nlm_Internal_Copyright_Header	nlm_copyright_hdr[1];
  Nlm_Internal_Extended_Header	nlm_extended_hdr[1];
  Nlm_Internal_Custom_Header	nlm_custom_hdr[1];
  Nlm_Internal_Cygnus_Ext_Header nlm_cygnus_ext_hdr[1];
  /* BFD NLM symbols.  */
  nlmNAME (symbol_type)	*	nlm_symbols;
  /* Lowest text and data VMA values.  */
  bfd_vma			nlm_text_low;
  bfd_vma			nlm_data_low;
  /* Caches for data read from object file.  */
  arelent *			nlm_reloc_fixups;
  asection **			nlm_reloc_fixup_secs;
  /* Backend specific information.  This should probably be a pointer,
     but that would require yet another entry point to initialize the
     structure.  */
  union
    {
      struct	/* Alpha backend information.  */
	{
	  bfd_vma gp;			/* GP value.  */
	  bfd_vma lita_address;		/* .lita section address.  */
	  bfd_size_type lita_size;	/* .lita section size.  */
	}
      alpha_backend_data;
    }
  backend_data;
};

#define nlm_tdata(bfd)			((bfd) -> tdata.nlm_obj_data)
#define nlm_fixed_header(bfd)		(nlm_tdata (bfd) -> nlm_fixed_hdr)
#define nlm_variable_header(bfd)	(nlm_tdata (bfd) -> nlm_variable_hdr)
#define nlm_version_header(bfd)		(nlm_tdata (bfd) -> nlm_version_hdr)
#define nlm_copyright_header(bfd)	(nlm_tdata (bfd) -> nlm_copyright_hdr)
#define nlm_extended_header(bfd)	(nlm_tdata (bfd) -> nlm_extended_hdr)
#define nlm_custom_header(bfd)		(nlm_tdata (bfd) -> nlm_custom_hdr)
#define nlm_cygnus_ext_header(bfd)	(nlm_tdata (bfd) -> nlm_cygnus_ext_hdr)
#define nlm_get_symbols(bfd)		(nlm_tdata (bfd) -> nlm_symbols)
#define nlm_set_symbols(bfd, p)		(nlm_tdata (bfd) -> nlm_symbols = (p))
#define nlm_set_text_low(bfd, i)	(nlm_tdata (bfd) -> nlm_text_low = (i))
#define nlm_get_text_low(bfd)		(nlm_tdata (bfd) -> nlm_text_low)
#define nlm_set_data_low(bfd, i)	(nlm_tdata (bfd) -> nlm_data_low = (i))
#define nlm_get_data_low(bfd)		(nlm_tdata (bfd) -> nlm_data_low)
#define nlm_relocation_fixups(bfd)	(nlm_tdata (bfd) -> nlm_reloc_fixups)
#define nlm_relocation_fixup_secs(bfd)	(nlm_tdata (bfd) -> nlm_reloc_fixup_secs)
#define nlm_alpha_backend_data(bfd)    (&nlm_tdata (bfd) -> backend_data.alpha_backend_data)

/* This is used when writing out the external relocs. */

struct reloc_and_sec
{
  arelent *rel;
  asection *sec;
};

/* We store some function pointer in the backend structure.  This lets
   different NLM targets share most of the same code, while providing
   slightly different code where necessary.  */

struct nlm_backend_data
{
  /* Signature for this backend.  */
  char signature[NLM_SIGNATURE_SIZE];
  /* Size of the fixed header.  */
  bfd_size_type fixed_header_size;
  /* Size of optional prefix for this backend.  Some backend may
     require this to be a function, but so far a constant is OK.  This
     is for a prefix which precedes the standard NLM fixed header.  */
  bfd_size_type optional_prefix_size;
  /* Architecture.  */
  enum bfd_architecture arch;
  /* Machine.  */
  unsigned int mach;
  /* Some NLM formats do not use the uninitialized data section, so
     all uninitialized data must be put into the regular data section
     instead.  */
  bfd_boolean no_uninitialized_data;
  /* Some NLM formats have a prefix on the file.  If this function is
     not NULL, it will be called by nlm_object_p.  It should return
     TRUE if this file could match this format, and it should leave
     the BFD such that a bfd_bread will pick up the fixed header.  */
  bfd_boolean (*nlm_backend_object_p) (bfd *);
  /* Write out the prefix.  This function may be NULL.  This must
     write out the same number of bytes as is in the field
     optional_prefix_size.  */
  bfd_boolean (*nlm_write_prefix) (bfd *);
  /* Read a relocation fixup from abfd.  The reloc information is
     machine specific.  The second argument is the symbol if this is
     an import, or NULL if this is a reloc fixup.  This function
     should set the third argument to the section which the reloc
     belongs in, and the fourth argument to the reloc itself; it does
     not need to fill in the sym_ptr_ptr field for a reloc against an
     import symbol.  */
  bfd_boolean (*nlm_read_reloc) (bfd *, nlmNAME (symbol_type) *, asection **, arelent *);
  /* To make objcopy to an i386 NLM work, the i386 backend needs a
     chance to work over the relocs.  This is a bit icky.  */
  bfd_boolean (*nlm_mangle_relocs) (bfd *, asection *, const void *, bfd_vma,  bfd_size_type);
  /* Read an import record from abfd.  It would be nice if this
     were in a machine-dependent format, but it doesn't seem to be. */
  bfd_boolean (*nlm_read_import) (bfd *, nlmNAME (symbol_type) *);
  /* Write an import record to abfd. */
  bfd_boolean (*nlm_write_import) (bfd *, asection *, arelent *);
  /* Set the section for a public symbol.  This may be NULL, in which
     case a default method will be used.  */
  bfd_boolean (*nlm_set_public_section) (bfd *, nlmNAME (symbol_type) *);
  /* Get the offset to write out for a public symbol.  This may be
     NULL, in which case a default method will be used.  */
  bfd_vma (*nlm_get_public_offset) (bfd *, asymbol *);
  /* Swap the fixed header in and out */
  void (*nlm_swap_fhdr_in)  (bfd *, void *, Nlm_Internal_Fixed_Header *);
  void (*nlm_swap_fhdr_out) (bfd *, struct nlm_internal_fixed_header *, void *);
  /* Write out an external reference.  */
  bfd_boolean (*nlm_write_external) (bfd *, bfd_size_type, asymbol *, struct reloc_and_sec *);
  bfd_boolean (*nlm_write_export) (bfd *, asymbol *, bfd_vma);
};

#define nlm_backend(bfd)   ((struct nlm_backend_data *)((bfd) -> xvec -> backend_data))
#define nlm_signature(bfd)                 (nlm_backend (bfd) -> signature)
#define nlm_fixed_header_size(bfd)         (nlm_backend (bfd) -> fixed_header_size)
#define nlm_optional_prefix_size(bfd)      (nlm_backend (bfd) -> optional_prefix_size)
#define nlm_architecture(bfd)              (nlm_backend (bfd) -> arch)
#define nlm_machine(bfd)                   (nlm_backend (bfd) -> mach)
#define nlm_no_uninitialized_data(bfd)     (nlm_backend (bfd) -> no_uninitialized_data)
#define nlm_backend_object_p_func(bfd)     (nlm_backend (bfd) -> nlm_backend_object_p)
#define nlm_write_prefix_func(bfd)         (nlm_backend (bfd) -> nlm_write_prefix)
#define nlm_read_reloc_func(bfd)           (nlm_backend (bfd) -> nlm_read_reloc)
#define nlm_mangle_relocs_func(bfd)        (nlm_backend (bfd) -> nlm_mangle_relocs)
#define nlm_read_import_func(bfd)          (nlm_backend (bfd) -> nlm_read_import)
#define nlm_write_import_func(bfd)         (nlm_backend (bfd) -> nlm_write_import)
#define nlm_set_public_section_func(bfd)   (nlm_backend (bfd) -> nlm_set_public_section)
#define nlm_get_public_offset_func(bfd)    (nlm_backend (bfd) -> nlm_get_public_offset)
#define nlm_swap_fixed_header_in_func(bfd) (nlm_backend (bfd) -> nlm_swap_fhdr_in)
#define nlm_swap_fixed_header_out_func(bfd)(nlm_backend (bfd) -> nlm_swap_fhdr_out)
#define nlm_write_external_func(bfd)       (nlm_backend (bfd) -> nlm_write_external)
#define nlm_write_export_func(bfd)         (nlm_backend (bfd) -> nlm_write_export)

/* The NLM code, data, and uninitialized sections have no names defined
   in the NLM, but bfd wants to give them names, so use the traditional
   UNIX names.  */

#define NLM_CODE_NAME			".text"
#define NLM_INITIALIZED_DATA_NAME	".data"
#define NLM_UNINITIALIZED_DATA_NAME	".bss"

#endif /* _LIBNLM_H_ */
@


1.9
log
@Update the address and phone number of the FSF organization in the GPL notices
@
text
@d2 2
a3 1
   Copyright 1993, 1994, 2001, 2002, 2003, 2005 Free Software Foundation, Inc.
d10 1
a10 1
   the Free Software Foundation; either version 2 of the License, or
d20 2
a21 1
   Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA 02110-1301, USA.  */
@


1.8
log
@Update the FSF address in the copyright/GPL notice
@
text
@d19 1
a19 1
   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02110-1301, USA.  */
@


1.7
log
@Update to ISO-C90 and fix formatting
@
text
@d19 1
a19 1
   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
@


1.6
log
@	* aout-adobe.c (aout_adobe_set_section_contents): Constify location.
	* aoutx.h (NAME(aout,set_section_contents)): Ditto.
	* bfd-in2.h: Regenerate.
	* binary.c (binary_set_section_contents): Ditto.
	* bout.c (b_out_set_section_contents): Ditto.
	* coff-tic54x.c (tic54x_set_section_contents): Ditto.
	* coffcode.h (coff_set_section_contents): Ditto.
	* ecoff.c (_bfd_ecoff_set_section_contents): Ditto.
	* elf-bfd.h (_bfd_elf_set_section_contents): Ditto.
	* elf.c (_bfd_elf_set_section_contents): Ditto.
	* elfxx-mips.c (_bfd_mips_elf_set_section_contents): Ditto.
	* elfxx-mips.h (_bfd_mips_elf_set_section_contents): Ditto.
	* i386msdos.c (msdos_set_section_contents): Ditto.
	* ieee.c (ieee_set_section_contents): Ditto.
	* ihex.c (ihex_set_section_contents): Ditto.
	* libaout.h (NAME(aout,set_section_contents)): Ditto.
	* libbfd-in.h (_bfd_nowrite_set_section_contents): Ditto.
	(_bfd_generic_set_section_contents): Ditto.
	* libbfd.h: Regenerate.
	* libbfd.c (_bfd_generic_set_section_contents): Ditto.
	* libecoff.h (_bfd_ecoff_set_section_contents): Ditto.
	* libnlm.h (nlmNAME(set_section_contents)): Ditto.
	(struct nlm_backend_data <nlm_mangle_relocs>): Ditto.
	* mmo.c (mmo_set_section_contents): Ditto.
	* nlm32-alpha.c (nlm_alpha_mangle_relocs): Ditto.
	* nlm32-i386.c (nlm_i386_mangle_relocs): Ditto.
	* nlm32-ppc.c (nlm_powerpc_mangle_relocs): Ditto.
	* nlm32-sparc.c (nlm_sparc_mangle_relocs): Ditto.
	* nlmcode.h (nlm_set_section_contents): Ditto.
	* oasys.c (oasys_set_section_contents): Ditto.
	* pdp11.c (NAME(aout,set_section_contents)): Ditto.
	* ppcboot.c (ppcboot_set_section_contents): Ditto.
	* srec.c (srec_set_section_contents): Ditto.
	* targets.c (BFD_JUMP_TABLE_WRITE <_bfd_set_section_contents>): Ditto.
	* tekhex.c (tekhex_set_section_contents): Ditto.
	(move_section_contents): Ditto.
	* versados.c (versados_set_section_contents): Ditto.
	* vms-misc.c (_bfd_save_vms_section): Ditto.
	* vms.c (vms_set_section_contents): Ditto.
	* vms.h (_bfd_save_vms_section): Ditto.
@
text
@d2 1
a2 1
   Copyright 1993, 1994, 2001, 2002, 2003 Free Software Foundation, Inc.
d5 1
a5 1
This file is part of BFD, the Binary File Descriptor library.
d7 13
a19 13
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
d55 13
a67 27
extern bfd_boolean nlm_mkobject
  PARAMS ((bfd *));
extern bfd_boolean nlm_set_arch_mach
  PARAMS ((bfd *, enum bfd_architecture, unsigned long));

extern void nlmNAME(get_symbol_info)
  PARAMS ((bfd *, asymbol *, symbol_info *));
extern long nlmNAME(get_symtab_upper_bound)
  PARAMS ((bfd *));
extern long nlmNAME(canonicalize_symtab)
  PARAMS ((bfd *, asymbol **));
extern asymbol *nlmNAME(make_empty_symbol)
  PARAMS ((bfd *));
extern void nlmNAME(print_symbol)
  PARAMS ((bfd *, PTR, asymbol *, bfd_print_symbol_type));
extern long nlmNAME(get_reloc_upper_bound)
  PARAMS ((bfd *, asection *));
extern long nlmNAME(canonicalize_reloc)
  PARAMS ((bfd *, asection *, arelent **, asymbol **));
extern const bfd_target *nlmNAME(object_p)
  PARAMS ((bfd *));
extern bfd_boolean nlmNAME(set_arch_mach)
  PARAMS ((bfd *, enum bfd_architecture, unsigned long));
extern bfd_boolean nlmNAME(set_section_contents)
  PARAMS ((bfd *, asection *, const PTR, file_ptr, bfd_size_type));
extern bfd_boolean nlmNAME(write_object_contents)
  PARAMS ((bfd *));
d83 1
a83 1
  nlmNAME(symbol_type)		*nlm_symbols;
d107 16
a122 18
#define nlm_fixed_header(bfd)		(nlm_tdata(bfd) -> nlm_fixed_hdr)
#define nlm_variable_header(bfd)	(nlm_tdata(bfd) -> nlm_variable_hdr)
#define nlm_version_header(bfd)		(nlm_tdata(bfd) -> nlm_version_hdr)
#define nlm_copyright_header(bfd)	(nlm_tdata(bfd) -> nlm_copyright_hdr)
#define nlm_extended_header(bfd)	(nlm_tdata(bfd) -> nlm_extended_hdr)
#define nlm_custom_header(bfd)		(nlm_tdata(bfd) -> nlm_custom_hdr)
#define nlm_cygnus_ext_header(bfd)	(nlm_tdata(bfd) -> nlm_cygnus_ext_hdr)
#define nlm_get_symbols(bfd)		(nlm_tdata(bfd) -> nlm_symbols)
#define nlm_set_symbols(bfd, p)		(nlm_tdata(bfd) -> nlm_symbols = (p))
#define nlm_set_text_low(bfd, i)	(nlm_tdata(bfd) -> nlm_text_low = (i))
#define nlm_get_text_low(bfd)		(nlm_tdata(bfd) -> nlm_text_low)
#define nlm_set_data_low(bfd, i)	(nlm_tdata(bfd) -> nlm_data_low = (i))
#define nlm_get_data_low(bfd)		(nlm_tdata(bfd) -> nlm_data_low)
#define nlm_relocation_fixups(bfd)	(nlm_tdata(bfd) -> nlm_reloc_fixups)
#define nlm_relocation_fixup_secs(bfd)	(nlm_tdata(bfd)->nlm_reloc_fixup_secs)

#define nlm_alpha_backend_data(bfd) \
  (&nlm_tdata (bfd)->backend_data.alpha_backend_data)
d158 1
a158 1
  bfd_boolean (*nlm_backend_object_p) PARAMS ((bfd *));
d162 1
a162 1
  bfd_boolean (*nlm_write_prefix) PARAMS ((bfd *));
d170 1
a170 2
  bfd_boolean (*nlm_read_reloc)
    PARAMS ((bfd *, nlmNAME(symbol_type) *, asection **, arelent *));
d173 1
a173 3
  bfd_boolean (*nlm_mangle_relocs)
    PARAMS ((bfd *, asection *, const PTR data, bfd_vma offset,
	     bfd_size_type count));
d176 1
a176 1
  bfd_boolean (*nlm_read_import) PARAMS ((bfd *, nlmNAME(symbol_type) *));
d178 1
a178 1
  bfd_boolean (*nlm_write_import) PARAMS ((bfd *, asection *, arelent *));
d181 1
a181 2
  bfd_boolean (*nlm_set_public_section)
    PARAMS ((bfd *, nlmNAME(symbol_type) *));
d184 1
a184 1
  bfd_vma (*nlm_get_public_offset) PARAMS ((bfd *, asymbol *));
d186 2
a187 4
  void (*nlm_swap_fhdr_in)
    PARAMS ((bfd *, PTR, Nlm_Internal_Fixed_Header *));
  void (*nlm_swap_fhdr_out)
    PARAMS ((bfd *, struct nlm_internal_fixed_header *, PTR));
d189 2
a190 3
  bfd_boolean (*nlm_write_external)
    PARAMS ((bfd *, bfd_size_type, asymbol *, struct reloc_and_sec *));
  bfd_boolean (*nlm_write_export) PARAMS ((bfd *, asymbol *, bfd_vma));
d193 19
a211 38
#define nlm_backend(bfd) \
  ((struct nlm_backend_data *)((bfd) -> xvec -> backend_data))
#define nlm_signature(bfd) \
  (nlm_backend(bfd) -> signature)
#define nlm_fixed_header_size(bfd) \
  (nlm_backend(bfd) -> fixed_header_size)
#define nlm_optional_prefix_size(bfd) \
  (nlm_backend(bfd) -> optional_prefix_size)
#define nlm_architecture(bfd) \
  (nlm_backend(bfd) -> arch)
#define nlm_machine(bfd) \
  (nlm_backend(bfd) -> mach)
#define nlm_no_uninitialized_data(bfd) \
  (nlm_backend(bfd) -> no_uninitialized_data)
#define nlm_backend_object_p_func(bfd) \
  (nlm_backend(bfd) -> nlm_backend_object_p)
#define nlm_write_prefix_func(bfd) \
  (nlm_backend(bfd) -> nlm_write_prefix)
#define nlm_read_reloc_func(bfd) \
  (nlm_backend(bfd) -> nlm_read_reloc)
#define nlm_mangle_relocs_func(bfd) \
  (nlm_backend(bfd) -> nlm_mangle_relocs)
#define nlm_read_import_func(bfd) \
  (nlm_backend(bfd) -> nlm_read_import)
#define nlm_write_import_func(bfd) \
  (nlm_backend(bfd) -> nlm_write_import)
#define nlm_set_public_section_func(bfd) \
  (nlm_backend(bfd) -> nlm_set_public_section)
#define nlm_get_public_offset_func(bfd) \
  (nlm_backend(bfd) -> nlm_get_public_offset)
#define nlm_swap_fixed_header_in_func(bfd) \
  (nlm_backend(bfd) -> nlm_swap_fhdr_in)
#define nlm_swap_fixed_header_out_func(bfd) \
  (nlm_backend(bfd) -> nlm_swap_fhdr_out)
#define nlm_write_external_func(bfd) \
  (nlm_backend(bfd) -> nlm_write_external)
#define nlm_write_export_func(bfd) \
  (nlm_backend(bfd) -> nlm_write_export)
@


1.5
log
@Index: doc/ChangeLog
2003-10-15  Andrew Cagney  <cagney@@redhat.com>

	* bfdint.texi (BFD target vector symbols): Rename _get_symtab to
	_canonicalize_symtab.

2003-10-15  Andrew Cagney  <cagney@@redhat.com>

	* targets.c (BFD_JUMP_TABLE_SYMBOLS): Replace NAME##_get_symtab
	with NAME##_canonicalize_symtab.
	* libcoff-in.h (coff_canonicalize_symtab): Update.
	* xsym.h (bfd_sym_canonicalize_symtab): Update.
	* elf-bfd.h (_bfd_elf_canonicalize_symtab): Update.
	* coffgen.c (coff_canonicalize_symtab): Update.
	* libbfd-in.h (_bfd_nosymbols_canonicalize_symtab): Update.
	* libnlm.h (nlmNAME(canonicalize_symtab)): Update.
	* ieee.c (ieee_vec): Update comment.
	* libecoff.h (_bfd_ecoff_canonicalize_symtab): Update.
	* mmo.c (mmo_canonicalize_symtab): Update.
	* nlm-target.h (nlm_canonicalize_symtab): Update.
	* nlmcode.h (nlm_canonicalize_symtab): Update.
	* i386msdos.c (msdos_canonicalize_symtab): Update.
	* hp300hpux.c (MY (canonicalize_symtab)): Update.
	* oasys.c (oasys_canonicalize_symtab): Update.
	* som.c (som_canonicalize_symtab): Update.
	* pef.c (bfd_pef_canonicalize_symtab): Update.
	* nlmcode.h (nlm_canonicalize_symtab): Update.
	* xsym.c (bfd_sym_canonicalize_symtab): Update.
	* vms.c (vms_canonicalize_symtab): Update.
	* versados.c (versados_canonicalize_symtab): Update.
	* mach-o.c (bfd_mach_o_canonicalize_symtab): Update.
	* ieee.c (ieee_canonicalize_symtab): Update.
	* pdp11.c (NAME(aout,canonicalize_symtab)): Update.
	* reloc.c: Update comment.
	* libaout.h (NAME(aout,canonicalize_symtab)): Update.
	* coff64-rs6000.c (aix5coff64_vec): Update.
	* coff64-rs6000.c (bfd_xcoff_aix5_backend_data): Update.
	* coff-rs6000.c (rs6000coff_vec, pmac_xcoff_vec): Update.
	* aoutx.h (NAME(aout,canonicalize_symtab)): Update.
	* elfxx-target.h (bfd_elfNN_canonicalize_symtab): Update.
	* hp300hpux.c (MY_canonicalize_symtab): Update.
	* ecoff.c (_bfd_ecoff_canonicalize_symtab): Update.
	* aout-tic30.c (MY_canonicalize_symtab): Update.
	* aout-target.h (MY_canonicalize_symtab): Update.
	* ppcboot.c (ppcboot_canonicalize_symtab): Update.
	* elf.c (_bfd_elf_canonicalize_symtab): Update.
	* elfcode.h (elf_canonicalize_symtab): Update.
	* ihex.c (ihex_canonicalize_symtab): Update.
	* tekhex.c (tekhex_canonicalize_symtab): Update.
	* binary.c (binary_canonicalize_symtab): Update.
	* srec.c (srec_canonicalize_symtab): Update.
@
text
@d2 1
a2 1
   Copyright 1993, 1994, 2001, 2002 Free Software Foundation, Inc.
d79 1
a79 1
  PARAMS ((bfd *, asection *, PTR, file_ptr, bfd_size_type));
d191 2
a192 1
    PARAMS ((bfd *, asection *, PTR data, bfd_vma offset, bfd_size_type count));
@


1.4
log
@s/boolean/bfd_boolean/ s/true/TRUE/ s/false/FALSE/.  Simplify
comparisons of bfd_boolean vars with TRUE/FALSE.  Formatting.
@
text
@d64 1
a64 1
extern long nlmNAME(get_symtab)
@


1.3
log
@Touches most files in bfd/, so likely will be blamed for everything..

o  bfd_read and bfd_write lose an unnecessary param and become
   bfd_bread and bfd_bwrite.

o  bfd_*alloc now all take a bfd_size_type arg, and will error if
   size_t is too small.  eg. 32 bit host, 64 bit bfd, verrry big files
   or bugs in linker scripts etc.

o  file_ptr becomes a bfd_signed_vma.  Besides matching sizes with
   various other types involved in handling sections, this should make
   it easier for bfd to support a 64 bit off_t on 32 bit hosts that
   provide it.

o  I've made the H_GET_* and H_PUT_* macros (which invoke bfd_h_{get,put}_*)
   generally available.  They now cast their args to bfd_vma and
   bfd_byte * as appropriate, which removes a swag of casts from the
   source.

o  Bug fixes to bfd_get8, aix386_core_vec, elf32_h8_relax_section, and
   aout-encap.c.

o  Zillions of formatting and -Wconversion fixes.
@
text
@d2 1
a2 1
   Copyright 1993, 1994, 2001 Free Software Foundation, Inc.
d55 4
a58 3
extern boolean nlm_mkobject PARAMS ((bfd *));
extern boolean nlm_set_arch_mach PARAMS ((bfd *, enum bfd_architecture,
					  unsigned long));
d61 1
a61 1
     PARAMS ((bfd *, asymbol *, symbol_info *));
d63 1
a63 1
     PARAMS ((bfd *));
d65 1
a65 1
     PARAMS ((bfd *, asymbol **));
d67 1
a67 1
     PARAMS ((bfd *));
d69 1
a69 1
     PARAMS ((bfd *, PTR, asymbol *, bfd_print_symbol_type));
d71 1
a71 1
     PARAMS ((bfd *, asection *));
d73 1
a73 1
     PARAMS ((bfd *, asection *, arelent **, asymbol **));
d75 7
a81 7
     PARAMS ((bfd *));
extern boolean nlmNAME(set_arch_mach)
     PARAMS ((bfd *, enum bfd_architecture, unsigned long));
extern boolean nlmNAME(set_section_contents)
     PARAMS ((bfd *, asection *, PTR, file_ptr, bfd_size_type));
extern boolean nlmNAME(write_object_contents)
     PARAMS ((bfd *));
d169 1
a169 1
  boolean no_uninitialized_data;
d172 1
a172 1
     true if this file could match this format, and it should leave
d174 1
a174 1
  boolean (*nlm_backend_object_p) PARAMS ((bfd *));
d178 1
a178 1
  boolean (*nlm_write_prefix) PARAMS ((bfd *));
d186 2
a187 2
  boolean (*nlm_read_reloc) PARAMS ((bfd *, nlmNAME(symbol_type) *,
				     asection **, arelent *));
d190 2
a191 3
  boolean (*nlm_mangle_relocs) PARAMS ((bfd *, asection *, PTR data,
					bfd_vma offset,
					bfd_size_type count));
d194 1
a194 1
  boolean (*nlm_read_import) PARAMS ((bfd *, nlmNAME(symbol_type) *));
d196 1
a196 1
  boolean (*nlm_write_import) PARAMS ((bfd *, asection *, arelent *));
d199 2
a200 1
  boolean (*nlm_set_public_section) PARAMS ((bfd *, nlmNAME(symbol_type) *));
d205 4
a208 6
  void (*nlm_swap_fhdr_in) PARAMS ((bfd *,
				    PTR,
				    Nlm_Internal_Fixed_Header *));
  void (*nlm_swap_fhdr_out) PARAMS ((bfd *,
				     struct nlm_internal_fixed_header *,
				     PTR));
d210 3
a212 4
  boolean (*nlm_write_external) PARAMS ((bfd *, bfd_size_type,
					 asymbol *,
					 struct reloc_and_sec *));
  boolean (*nlm_write_export) PARAMS ((bfd *, asymbol *, bfd_vma));
@


1.3.24.1
log
@Merge drow-cplus-branch to:
  cvs rtag -D 2003-12-14 00:00:00 UTC drow-cplus-merge-20031214 gdb+dejagnu
@
text
@d2 1
a2 1
   Copyright 1993, 1994, 2001, 2002, 2003 Free Software Foundation, Inc.
d55 3
a57 4
extern bfd_boolean nlm_mkobject
  PARAMS ((bfd *));
extern bfd_boolean nlm_set_arch_mach
  PARAMS ((bfd *, enum bfd_architecture, unsigned long));
d60 1
a60 1
  PARAMS ((bfd *, asymbol *, symbol_info *));
d62 3
a64 3
  PARAMS ((bfd *));
extern long nlmNAME(canonicalize_symtab)
  PARAMS ((bfd *, asymbol **));
d66 1
a66 1
  PARAMS ((bfd *));
d68 1
a68 1
  PARAMS ((bfd *, PTR, asymbol *, bfd_print_symbol_type));
d70 1
a70 1
  PARAMS ((bfd *, asection *));
d72 1
a72 1
  PARAMS ((bfd *, asection *, arelent **, asymbol **));
d74 7
a80 7
  PARAMS ((bfd *));
extern bfd_boolean nlmNAME(set_arch_mach)
  PARAMS ((bfd *, enum bfd_architecture, unsigned long));
extern bfd_boolean nlmNAME(set_section_contents)
  PARAMS ((bfd *, asection *, const PTR, file_ptr, bfd_size_type));
extern bfd_boolean nlmNAME(write_object_contents)
  PARAMS ((bfd *));
d168 1
a168 1
  bfd_boolean no_uninitialized_data;
d171 1
a171 1
     TRUE if this file could match this format, and it should leave
d173 1
a173 1
  bfd_boolean (*nlm_backend_object_p) PARAMS ((bfd *));
d177 1
a177 1
  bfd_boolean (*nlm_write_prefix) PARAMS ((bfd *));
d185 2
a186 2
  bfd_boolean (*nlm_read_reloc)
    PARAMS ((bfd *, nlmNAME(symbol_type) *, asection **, arelent *));
d189 3
a191 3
  bfd_boolean (*nlm_mangle_relocs)
    PARAMS ((bfd *, asection *, const PTR data, bfd_vma offset,
	     bfd_size_type count));
d194 1
a194 1
  bfd_boolean (*nlm_read_import) PARAMS ((bfd *, nlmNAME(symbol_type) *));
d196 1
a196 1
  bfd_boolean (*nlm_write_import) PARAMS ((bfd *, asection *, arelent *));
d199 1
a199 2
  bfd_boolean (*nlm_set_public_section)
    PARAMS ((bfd *, nlmNAME(symbol_type) *));
d204 6
a209 4
  void (*nlm_swap_fhdr_in)
    PARAMS ((bfd *, PTR, Nlm_Internal_Fixed_Header *));
  void (*nlm_swap_fhdr_out)
    PARAMS ((bfd *, struct nlm_internal_fixed_header *, PTR));
d211 4
a214 3
  bfd_boolean (*nlm_write_external)
    PARAMS ((bfd *, bfd_size_type, asymbol *, struct reloc_and_sec *));
  bfd_boolean (*nlm_write_export) PARAMS ((bfd *, asymbol *, bfd_vma));
@


1.3.22.1
log
@2002-12-23  David Carlton  <carlton@@math.stanford.edu>

	* Merge from mainline; tag is carlton_dictionary-20021223-merge.
@
text
@d2 1
a2 1
   Copyright 1993, 1994, 2001, 2002 Free Software Foundation, Inc.
d55 3
a57 4
extern bfd_boolean nlm_mkobject
  PARAMS ((bfd *));
extern bfd_boolean nlm_set_arch_mach
  PARAMS ((bfd *, enum bfd_architecture, unsigned long));
d60 1
a60 1
  PARAMS ((bfd *, asymbol *, symbol_info *));
d62 1
a62 1
  PARAMS ((bfd *));
d64 1
a64 1
  PARAMS ((bfd *, asymbol **));
d66 1
a66 1
  PARAMS ((bfd *));
d68 1
a68 1
  PARAMS ((bfd *, PTR, asymbol *, bfd_print_symbol_type));
d70 1
a70 1
  PARAMS ((bfd *, asection *));
d72 1
a72 1
  PARAMS ((bfd *, asection *, arelent **, asymbol **));
d74 7
a80 7
  PARAMS ((bfd *));
extern bfd_boolean nlmNAME(set_arch_mach)
  PARAMS ((bfd *, enum bfd_architecture, unsigned long));
extern bfd_boolean nlmNAME(set_section_contents)
  PARAMS ((bfd *, asection *, PTR, file_ptr, bfd_size_type));
extern bfd_boolean nlmNAME(write_object_contents)
  PARAMS ((bfd *));
d168 1
a168 1
  bfd_boolean no_uninitialized_data;
d171 1
a171 1
     TRUE if this file could match this format, and it should leave
d173 1
a173 1
  bfd_boolean (*nlm_backend_object_p) PARAMS ((bfd *));
d177 1
a177 1
  bfd_boolean (*nlm_write_prefix) PARAMS ((bfd *));
d185 2
a186 2
  bfd_boolean (*nlm_read_reloc)
    PARAMS ((bfd *, nlmNAME(symbol_type) *, asection **, arelent *));
d189 3
a191 2
  bfd_boolean (*nlm_mangle_relocs)
    PARAMS ((bfd *, asection *, PTR data, bfd_vma offset, bfd_size_type count));
d194 1
a194 1
  bfd_boolean (*nlm_read_import) PARAMS ((bfd *, nlmNAME(symbol_type) *));
d196 1
a196 1
  bfd_boolean (*nlm_write_import) PARAMS ((bfd *, asection *, arelent *));
d199 1
a199 2
  bfd_boolean (*nlm_set_public_section)
    PARAMS ((bfd *, nlmNAME(symbol_type) *));
d204 6
a209 4
  void (*nlm_swap_fhdr_in)
    PARAMS ((bfd *, PTR, Nlm_Internal_Fixed_Header *));
  void (*nlm_swap_fhdr_out)
    PARAMS ((bfd *, struct nlm_internal_fixed_header *, PTR));
d211 4
a214 3
  bfd_boolean (*nlm_write_external)
    PARAMS ((bfd *, bfd_size_type, asymbol *, struct reloc_and_sec *));
  bfd_boolean (*nlm_write_export) PARAMS ((bfd *, asymbol *, bfd_vma));
@


1.3.22.2
log
@2003-11-11  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton-dictionary-20031111-merge.
@
text
@d2 1
a2 1
   Copyright 1993, 1994, 2001, 2002, 2003 Free Software Foundation, Inc.
d64 1
a64 1
extern long nlmNAME(canonicalize_symtab)
d79 1
a79 1
  PARAMS ((bfd *, asection *, const PTR, file_ptr, bfd_size_type));
d191 1
a191 2
    PARAMS ((bfd *, asection *, const PTR data, bfd_vma offset,
	     bfd_size_type count));
@


1.2
log
@Update copyright notices
@
text
@d2 1
a2 1
   Copyright 1993, 1994 Free Software Foundation, Inc.
d164 1
a164 1
  long mach;
d172 1
a172 1
     the BFD such that a bfd_read will pick up the fixed header.  */
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
   Copyright (C) 1993 Free Software Foundation, Inc.
@


1.1.1.1
log
@19990502 sourceware import
@
text
@@


1.1.1.1.8.1
log
@Update copyright notices.
@
text
@d2 1
a2 1
   Copyright 1993, 1994 Free Software Foundation, Inc.
@


