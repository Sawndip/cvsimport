head	1.58;
access;
symbols
	sid-snapshot-20180601:1.58
	sid-snapshot-20180501:1.58
	sid-snapshot-20180401:1.58
	sid-snapshot-20180301:1.58
	sid-snapshot-20180201:1.58
	sid-snapshot-20180101:1.58
	sid-snapshot-20171201:1.58
	sid-snapshot-20171101:1.58
	sid-snapshot-20171001:1.58
	sid-snapshot-20170901:1.58
	sid-snapshot-20170801:1.58
	sid-snapshot-20170701:1.58
	sid-snapshot-20170601:1.58
	sid-snapshot-20170501:1.58
	sid-snapshot-20170401:1.58
	sid-snapshot-20170301:1.58
	sid-snapshot-20170201:1.58
	sid-snapshot-20170101:1.58
	sid-snapshot-20161201:1.58
	sid-snapshot-20161101:1.58
	sid-snapshot-20160901:1.58
	sid-snapshot-20160801:1.58
	sid-snapshot-20160701:1.58
	sid-snapshot-20160601:1.58
	sid-snapshot-20160501:1.58
	sid-snapshot-20160401:1.58
	sid-snapshot-20160301:1.58
	sid-snapshot-20160201:1.58
	sid-snapshot-20160101:1.58
	sid-snapshot-20151201:1.58
	sid-snapshot-20151101:1.58
	sid-snapshot-20151001:1.58
	sid-snapshot-20150901:1.58
	sid-snapshot-20150801:1.58
	sid-snapshot-20150701:1.58
	sid-snapshot-20150601:1.58
	sid-snapshot-20150501:1.58
	sid-snapshot-20150401:1.58
	sid-snapshot-20150301:1.58
	sid-snapshot-20150201:1.58
	sid-snapshot-20150101:1.58
	sid-snapshot-20141201:1.58
	sid-snapshot-20141101:1.58
	sid-snapshot-20141001:1.58
	sid-snapshot-20140901:1.58
	sid-snapshot-20140801:1.58
	sid-snapshot-20140701:1.58
	sid-snapshot-20140601:1.58
	sid-snapshot-20140501:1.58
	sid-snapshot-20140401:1.58
	sid-snapshot-20140301:1.58
	sid-snapshot-20140201:1.58
	sid-snapshot-20140101:1.58
	sid-snapshot-20131201:1.58
	sid-snapshot-20131101:1.58
	sid-snapshot-20131001:1.58
	binutils-2_24-branch:1.58.0.6
	binutils-2_24-branchpoint:1.58
	binutils-2_21_1:1.53.2.2
	sid-snapshot-20130901:1.58
	gdb_7_6_1-2013-08-30-release:1.58
	sid-snapshot-20130801:1.58
	sid-snapshot-20130701:1.58
	sid-snapshot-20130601:1.58
	sid-snapshot-20130501:1.58
	gdb_7_6-2013-04-26-release:1.58
	sid-snapshot-20130401:1.58
	binutils-2_23_2:1.58
	gdb_7_6-branch:1.58.0.4
	gdb_7_6-2013-03-12-branchpoint:1.58
	sid-snapshot-20130301:1.58
	sid-snapshot-20130201:1.58
	sid-snapshot-20130101:1.58
	sid-snapshot-20121201:1.58
	gdb_7_5_1-2012-11-29-release:1.57
	binutils-2_23_1:1.58
	sid-snapshot-20121101:1.58
	binutils-2_23:1.58
	sid-snapshot-20121001:1.58
	sid-snapshot-20120901:1.58
	gdb_7_5-2012-08-17-release:1.57
	sid-snapshot-20120801:1.58
	binutils-2_23-branch:1.58.0.2
	binutils-2_23-branchpoint:1.58
	gdb_7_5-branch:1.57.0.8
	gdb_7_5-2012-07-18-branchpoint:1.57
	sid-snapshot-20120701:1.57
	sid-snapshot-20120601:1.57
	sid-snapshot-20120501:1.57
	binutils-2_22_branch:1.57.0.6
	gdb_7_4_1-2012-04-26-release:1.57
	sid-snapshot-20120401:1.57
	sid-snapshot-20120301:1.57
	sid-snapshot-20120201:1.57
	gdb_7_4-2012-01-24-release:1.57
	sid-snapshot-20120101:1.57
	gdb_7_4-branch:1.57.0.4
	gdb_7_4-2011-12-13-branchpoint:1.57
	sid-snapshot-20111201:1.57
	binutils-2_22:1.57
	sid-snapshot-20111101:1.57
	sid-snapshot-20111001:1.57
	binutils-2_22-branch:1.57.0.2
	binutils-2_22-branchpoint:1.57
	gdb_7_3_1-2011-09-04-release:1.54
	sid-snapshot-20110901:1.57
	sid-snapshot-20110801:1.57
	gdb_7_3-2011-07-26-release:1.54
	sid-snapshot-20110701:1.57
	sid-snapshot-20110601:1.57
	sid-snapshot-20110501:1.56
	gdb_7_3-branch:1.54.0.2
	gdb_7_3-2011-04-01-branchpoint:1.54
	sid-snapshot-20110401:1.54
	sid-snapshot-20110301:1.54
	sid-snapshot-20110201:1.54
	sid-snapshot-20110101:1.53
	binutils-2_21:1.53
	sid-snapshot-20101201:1.53
	binutils-2_21-branch:1.53.0.2
	binutils-2_21-branchpoint:1.53
	sid-snapshot-20101101:1.53
	sid-snapshot-20101001:1.52
	binutils-2_20_1:1.49.26.1
	gdb_7_2-2010-09-02-release:1.51
	sid-snapshot-20100901:1.52
	sid-snapshot-20100801:1.51
	gdb_7_2-branch:1.51.0.4
	gdb_7_2-2010-07-07-branchpoint:1.51
	sid-snapshot-20100701:1.51
	sid-snapshot-20100601:1.51
	sid-snapshot-20100501:1.51
	sid-snapshot-20100401:1.51
	gdb_7_1-2010-03-18-release:1.51
	sid-snapshot-20100301:1.51
	gdb_7_1-branch:1.51.0.2
	gdb_7_1-2010-02-18-branchpoint:1.51
	sid-snapshot-20100201:1.51
	sid-snapshot-20100101:1.51
	gdb_7_0_1-2009-12-22-release:1.50
	sid-snapshot-20091201:1.50
	sid-snapshot-20091101:1.50
	binutils-2_20:1.49.26.1
	gdb_7_0-2009-10-06-release:1.50
	sid-snapshot-20091001:1.50
	gdb_7_0-branch:1.50.0.2
	gdb_7_0-2009-09-16-branchpoint:1.50
	arc-sim-20090309:1.49
	binutils-arc-20081103-branch:1.49.0.28
	binutils-arc-20081103-branchpoint:1.49
	binutils-2_20-branch:1.49.0.26
	binutils-2_20-branchpoint:1.49
	sid-snapshot-20090901:1.49
	sid-snapshot-20090801:1.49
	msnyder-checkpoint-072509-branch:1.49.0.24
	msnyder-checkpoint-072509-branchpoint:1.49
	sid-snapshot-20090701:1.49
	dje-cgen-play1-branch:1.49.0.22
	dje-cgen-play1-branchpoint:1.49
	sid-snapshot-20090601:1.49
	sid-snapshot-20090501:1.49
	sid-snapshot-20090401:1.49
	arc-20081103-branch:1.49.0.20
	arc-20081103-branchpoint:1.49
	arc-insight_6_8-branch:1.49.0.18
	arc-insight_6_8-branchpoint:1.49
	insight_6_8-branch:1.49.0.16
	insight_6_8-branchpoint:1.49
	sid-snapshot-20090301:1.49
	binutils-2_19_1:1.49
	sid-snapshot-20090201:1.49
	sid-snapshot-20090101:1.49
	reverse-20081226-branch:1.49.0.14
	reverse-20081226-branchpoint:1.49
	sid-snapshot-20081201:1.49
	multiprocess-20081120-branch:1.49.0.12
	multiprocess-20081120-branchpoint:1.49
	sid-snapshot-20081101:1.49
	binutils-2_19:1.49
	sid-snapshot-20081001:1.49
	reverse-20080930-branch:1.49.0.10
	reverse-20080930-branchpoint:1.49
	binutils-2_19-branch:1.49.0.8
	binutils-2_19-branchpoint:1.49
	sid-snapshot-20080901:1.49
	sid-snapshot-20080801:1.49
	reverse-20080717-branch:1.49.0.6
	reverse-20080717-branchpoint:1.49
	sid-snapshot-20080701:1.49
	msnyder-reverse-20080609-branch:1.49.0.4
	msnyder-reverse-20080609-branchpoint:1.49
	drow-reverse-20070409-branch:1.45.0.2
	drow-reverse-20070409-branchpoint:1.45
	sid-snapshot-20080601:1.49
	sid-snapshot-20080501:1.49
	sid-snapshot-20080403:1.49
	sid-snapshot-20080401:1.49
	gdb_6_8-2008-03-27-release:1.49
	sid-snapshot-20080301:1.49
	gdb_6_8-branch:1.49.0.2
	gdb_6_8-2008-02-26-branchpoint:1.49
	sid-snapshot-20080201:1.48
	sid-snapshot-20080101:1.48
	sid-snapshot-20071201:1.48
	sid-snapshot-20071101:1.48
	gdb_6_7_1-2007-10-29-release:1.48
	gdb_6_7-2007-10-10-release:1.48
	sid-snapshot-20071001:1.48
	gdb_6_7-branch:1.48.0.4
	gdb_6_7-2007-09-07-branchpoint:1.48
	binutils-2_18:1.48
	binutils-2_18-branch:1.48.0.2
	binutils-2_18-branchpoint:1.48
	insight_6_6-20070208-release:1.44
	binutils-csl-coldfire-4_1-32:1.44
	binutils-csl-sourcerygxx-4_1-32:1.44
	gdb_6_6-2006-12-18-release:1.44
	binutils-csl-innovasic-fido-3_4_4-33:1.44
	binutils-csl-sourcerygxx-3_4_4-32:1.36
	binutils-csl-coldfire-4_1-30:1.44
	binutils-csl-sourcerygxx-4_1-30:1.44
	binutils-csl-coldfire-4_1-28:1.44
	binutils-csl-sourcerygxx-4_1-29:1.44
	binutils-csl-sourcerygxx-4_1-28:1.44
	gdb_6_6-branch:1.44.0.22
	gdb_6_6-2006-11-15-branchpoint:1.44
	binutils-csl-arm-2006q3-27:1.44
	binutils-csl-sourcerygxx-4_1-27:1.44
	binutils-csl-arm-2006q3-26:1.44
	binutils-csl-sourcerygxx-4_1-26:1.44
	binutils-csl-sourcerygxx-4_1-25:1.44
	binutils-csl-sourcerygxx-4_1-24:1.44
	binutils-csl-sourcerygxx-4_1-23:1.44
	insight_6_5-20061003-release:1.44
	gdb-csl-symbian-6_4_50_20060226-12:1.44
	binutils-csl-sourcerygxx-4_1-21:1.44
	binutils-csl-arm-2006q3-21:1.44
	binutils-csl-sourcerygxx-4_1-22:1.44
	binutils-csl-palmsource-arm-prelinker-1_0-1:1.44
	binutils-csl-sourcerygxx-4_1-20:1.44
	binutils-csl-arm-2006q3-19:1.44
	binutils-csl-sourcerygxx-4_1-19:1.44
	binutils-csl-sourcerygxx-4_1-18:1.44
	binutils-csl-renesas-4_1-9:1.44
	gdb-csl-sourcerygxx-3_4_4-25:1.43
	binutils-csl-sourcerygxx-3_4_4-25:1.36
	nickrob-async-20060828-mergepoint:1.44
	gdb-csl-symbian-6_4_50_20060226-11:1.44
	binutils-csl-renesas-4_1-8:1.44
	binutils-csl-renesas-4_1-7:1.44
	binutils-csl-renesas-4_1-6:1.44
	gdb-csl-sourcerygxx-4_1-17:1.44
	binutils-csl-sourcerygxx-4_1-17:1.44
	gdb-csl-20060226-branch-local-2:1.44
	gdb-csl-sourcerygxx-4_1-14:1.44
	binutils-csl-sourcerygxx-4_1-14:1.44
	binutils-csl-sourcerygxx-4_1-15:1.44
	gdb-csl-sourcerygxx-4_1-13:1.44
	binutils-csl-sourcerygxx-4_1-13:1.44
	binutils-2_17:1.44
	gdb-csl-sourcerygxx-4_1-12:1.44
	binutils-csl-sourcerygxx-4_1-12:1.44
	gdb-csl-sourcerygxx-3_4_4-21:1.44
	binutils-csl-sourcerygxx-3_4_4-21:1.44
	gdb_6_5-20060621-release:1.44
	binutils-csl-wrs-linux-3_4_4-24:1.36
	binutils-csl-wrs-linux-3_4_4-23:1.36
	gdb-csl-sourcerygxx-4_1-9:1.44
	binutils-csl-sourcerygxx-4_1-9:1.44
	gdb-csl-sourcerygxx-4_1-8:1.44
	binutils-csl-sourcerygxx-4_1-8:1.44
	gdb-csl-sourcerygxx-4_1-7:1.44
	binutils-csl-sourcerygxx-4_1-7:1.44
	gdb-csl-arm-2006q1-6:1.44
	binutils-csl-arm-2006q1-6:1.44
	gdb-csl-sourcerygxx-4_1-6:1.44
	binutils-csl-sourcerygxx-4_1-6:1.44
	binutils-csl-wrs-linux-3_4_4-22:1.36
	gdb-csl-symbian-6_4_50_20060226-10:1.44
	gdb-csl-symbian-6_4_50_20060226-9:1.44
	gdb-csl-symbian-6_4_50_20060226-8:1.44
	gdb-csl-coldfire-4_1-11:1.44
	binutils-csl-coldfire-4_1-11:1.44
	gdb-csl-sourcerygxx-3_4_4-19:1.44
	binutils-csl-sourcerygxx-3_4_4-19:1.44
	gdb-csl-coldfire-4_1-10:1.44
	gdb_6_5-branch:1.44.0.20
	gdb_6_5-2006-05-14-branchpoint:1.44
	binutils-csl-coldfire-4_1-10:1.44
	gdb-csl-sourcerygxx-4_1-5:1.44
	binutils-csl-sourcerygxx-4_1-5:1.44
	nickrob-async-20060513-branch:1.44.0.18
	nickrob-async-20060513-branchpoint:1.44
	gdb-csl-sourcerygxx-4_1-4:1.44
	binutils-csl-sourcerygxx-4_1-4:1.44
	msnyder-reverse-20060502-branch:1.44.0.16
	msnyder-reverse-20060502-branchpoint:1.44
	binutils-csl-wrs-linux-3_4_4-21:1.36
	gdb-csl-morpho-4_1-4:1.44
	binutils-csl-morpho-4_1-4:1.44
	gdb-csl-sourcerygxx-3_4_4-17:1.44
	binutils-csl-sourcerygxx-3_4_4-17:1.44
	binutils-csl-wrs-linux-3_4_4-20:1.36
	readline_5_1-import-branch:1.44.0.14
	readline_5_1-import-branchpoint:1.44
	gdb-csl-20060226-branch-merge-to-csl-symbian-1:1.44
	binutils-2_17-branch:1.44.0.12
	binutils-2_17-branchpoint:1.44
	gdb-csl-symbian-20060226-branch:1.44.0.10
	gdb-csl-symbian-20060226-branchpoint:1.44
	gdb-csl-20060226-branch-merge-to-csl-local-1:1.44
	msnyder-reverse-20060331-branch:1.44.0.8
	msnyder-reverse-20060331-branchpoint:1.44
	binutils-csl-2_17-branch:1.44.0.6
	binutils-csl-2_17-branchpoint:1.44
	gdb-csl-available-20060303-branch:1.44.0.4
	gdb-csl-available-20060303-branchpoint:1.44
	gdb-csl-20060226-branch:1.44.0.2
	gdb-csl-20060226-branchpoint:1.44
	gdb_6_4-20051202-release:1.43
	msnyder-fork-checkpoint-branch:1.43.0.6
	msnyder-fork-checkpoint-branchpoint:1.43
	gdb-csl-gxxpro-6_3-branch:1.43.0.4
	gdb-csl-gxxpro-6_3-branchpoint:1.43
	gdb_6_4-branch:1.43.0.2
	gdb_6_4-2005-11-01-branchpoint:1.43
	gdb-csl-arm-20051020-branch:1.42.0.2
	gdb-csl-arm-20051020-branchpoint:1.42
	binutils-csl-gxxpro-3_4-branch:1.36.0.8
	binutils-csl-gxxpro-3_4-branchpoint:1.36
	binutils-2_16_1:1.36
	msnyder-tracepoint-checkpoint-branch:1.38.0.2
	msnyder-tracepoint-checkpoint-branchpoint:1.38
	gdb-csl-arm-20050325-2005-q1b:1.36
	binutils-csl-arm-2005q1b:1.36
	binutils-2_16:1.36
	gdb-csl-arm-20050325-2005-q1a:1.36
	binutils-csl-arm-2005q1a:1.36
	csl-arm-20050325-branch:1.36.0.6
	csl-arm-20050325-branchpoint:1.36
	binutils-csl-arm-2005q1-branch:1.36.0.4
	binutils-csl-arm-2005q1-branchpoint:1.36
	binutils-2_16-branch:1.36.0.2
	binutils-2_16-branchpoint:1.36
	csl-arm-2004-q3d:1.33
	gdb_6_3-20041109-release:1.33
	gdb_6_3-branch:1.33.0.2
	gdb_6_3-20041019-branchpoint:1.33
	csl-arm-2004-q3:1.33
	drow_intercu-merge-20040921:1.33
	drow_intercu-merge-20040915:1.33
	jimb-gdb_6_2-e500-branch:1.32.0.6
	jimb-gdb_6_2-e500-branchpoint:1.32
	gdb_6_2-20040730-release:1.32
	gdb_6_2-branch:1.32.0.2
	gdb_6_2-2004-07-10-gmt-branchpoint:1.32
	gdb_6_1_1-20040616-release:1.29
	binutils-2_15:1.29.6.2
	binutils-2_15-branchpoint:1.29
	csl-arm-2004-q1a:1.31
	csl-arm-2004-q1:1.31
	gdb_6_1-2004-04-05-release:1.29
	drow_intercu-merge-20040402:1.31
	drow_intercu-merge-20040327:1.31
	ezannoni_pie-20040323-branch:1.31.0.2
	ezannoni_pie-20040323-branchpoint:1.31
	cagney_tramp-20040321-mergepoint:1.31
	cagney_tramp-20040309-branch:1.29.0.12
	cagney_tramp-20040309-branchpoint:1.29
	gdb_6_1-branch:1.29.0.10
	gdb_6_1-2004-03-01-gmt-branchpoint:1.29
	drow_intercu-20040221-branch:1.29.0.8
	drow_intercu-20040221-branchpoint:1.29
	binutils-2_15-branch:1.29.0.6
	cagney_bfdfile-20040213-branch:1.29.0.4
	cagney_bfdfile-20040213-branchpoint:1.29
	drow-cplus-merge-20040208:1.29
	carlton_dictionary-20040126-merge:1.29
	cagney_bigcore-20040122-branch:1.29.0.2
	cagney_bigcore-20040122-branchpoint:1.29
	drow-cplus-merge-20040113:1.29
	csl-arm-2003-q4:1.29
	drow-cplus-merge-20031224:1.29
	drow-cplus-merge-20031220:1.29
	carlton_dictionary-20031215-merge:1.29
	drow-cplus-merge-20031214:1.29
	carlton-dictionary-20031111-merge:1.29
	gdb_6_0-2003-10-04-release:1.27
	kettenis_sparc-20030918-branch:1.28.0.6
	kettenis_sparc-20030918-branchpoint:1.28
	carlton_dictionary-20030917-merge:1.28
	ezannoni_pie-20030916-branchpoint:1.28
	ezannoni_pie-20030916-branch:1.28.0.4
	cagney_x86i386-20030821-branch:1.28.0.2
	cagney_x86i386-20030821-branchpoint:1.28
	carlton_dictionary-20030805-merge:1.28
	carlton_dictionary-20030627-merge:1.27
	gdb_6_0-branch:1.27.0.36
	gdb_6_0-2003-06-23-branchpoint:1.27
	jimb-ppc64-linux-20030613-branch:1.27.0.34
	jimb-ppc64-linux-20030613-branchpoint:1.27
	binutils-2_14:1.27
	cagney_convert-20030606-branch:1.27.0.32
	cagney_convert-20030606-branchpoint:1.27
	cagney_writestrings-20030508-branch:1.27.0.30
	cagney_writestrings-20030508-branchpoint:1.27
	jimb-ppc64-linux-20030528-branch:1.27.0.28
	jimb-ppc64-linux-20030528-branchpoint:1.27
	carlton_dictionary-20030523-merge:1.27
	cagney_fileio-20030521-branch:1.27.0.26
	cagney_fileio-20030521-branchpoint:1.27
	kettenis_i386newframe-20030517-mergepoint:1.27
	jimb-ppc64-linux-20030509-branch:1.27.0.24
	jimb-ppc64-linux-20030509-branchpoint:1.27
	kettenis_i386newframe-20030504-mergepoint:1.27
	carlton_dictionary-20030430-merge:1.27
	binutils-2_14-branch:1.27.0.22
	binutils-2_14-branchpoint:1.27
	kettenis_i386newframe-20030419-branch:1.27.0.20
	kettenis_i386newframe-20030419-branchpoint:1.27
	carlton_dictionary-20030416-merge:1.27
	cagney_frameaddr-20030409-mergepoint:1.27
	kettenis_i386newframe-20030406-branch:1.27.0.18
	kettenis_i386newframe-20030406-branchpoint:1.27
	cagney_frameaddr-20030403-branchpoint:1.27
	cagney_frameaddr-20030403-branch:1.27.0.16
	cagney_framebase-20030330-mergepoint:1.27
	cagney_framebase-20030326-branch:1.27.0.14
	cagney_framebase-20030326-branchpoint:1.27
	cagney_lazyid-20030317-branch:1.27.0.12
	cagney_lazyid-20030317-branchpoint:1.27
	kettenis-i386newframe-20030316-mergepoint:1.27
	offbyone-20030313-branch:1.27.0.10
	offbyone-20030313-branchpoint:1.27
	kettenis-i386newframe-20030308-branch:1.27.0.8
	kettenis-i386newframe-20030308-branchpoint:1.27
	carlton_dictionary-20030305-merge:1.27
	cagney_offbyone-20030303-branch:1.27.0.6
	cagney_offbyone-20030303-branchpoint:1.27
	carlton_dictionary-20030207-merge:1.27
	interps-20030202-branch:1.27.0.4
	interps-20030202-branchpoint:1.27
	cagney-unwind-20030108-branch:1.27.0.2
	cagney-unwind-20030108-branchpoint:1.27
	binutils-2_13_2_1:1.23.2.1
	binutils-2_13_2:1.23.2.1
	carlton_dictionary-20021223-merge:1.27
	gdb_5_3-2002-12-12-release:1.23
	carlton_dictionary-20021115-merge:1.24
	binutils-2_13_1:1.23.2.1
	kseitz_interps-20021105-merge:1.24
	kseitz_interps-20021103-merge:1.24
	drow-cplus-merge-20021020:1.23
	drow-cplus-merge-20021025:1.23
	carlton_dictionary-20021025-merge:1.24
	carlton_dictionary-20021011-merge:1.23
	drow-cplus-branch:1.23.0.14
	drow-cplus-branchpoint:1.23
	kseitz_interps-20020930-merge:1.23
	carlton_dictionary-20020927-merge:1.23
	carlton_dictionary-branch:1.23.0.12
	carlton_dictionary-20020920-branchpoint:1.23
	sid-20020905-branchpoint:1.23
	sid-20020905-branch:1.23.0.10
	gdb_5_3-branch:1.23.0.8
	gdb_5_3-2002-09-04-branchpoint:1.23
	kseitz_interps-20020829-merge:1.23
	cagney_sysregs-20020825-branch:1.23.0.6
	cagney_sysregs-20020825-branchpoint:1.23
	readline_4_3-import-branch:1.23.0.4
	readline_4_3-import-branchpoint:1.23
	binutils-2_13:1.23
	gdb_5_2_1-2002-07-23-release:1.21
	binutils-2_13-branchpoint:1.23
	binutils-2_13-branch:1.23.0.2
	kseitz_interps-20020528-branch:1.22.0.6
	kseitz_interps-20020528-branchpoint:1.22
	cagney_regbuf-20020515-branch:1.22.0.4
	cagney_regbuf-20020515-branchpoint:1.22
	binutils-2_12_1:1.21.2.1
	jimb-macro-020506-branch:1.22.0.2
	jimb-macro-020506-branchpoint:1.22
	gdb_5_2-2002-04-29-release:1.21
	binutils-2_12:1.21
	gdb_5_2-branch:1.21.0.4
	gdb_5_2-2002-03-03-branchpoint:1.21
	binutils-2_12-branch:1.21.0.2
	binutils-2_12-branchpoint:1.21
	gdb_5_1_1-2002-01-24-release:1.17
	gdb_5_1_0_1-2002-01-03-release:1.17
	cygnus_cvs_20020108_pre:1.20
	gdb_5_1_0_1-2002-01-03-branch:1.17.0.6
	gdb_5_1_0_1-2002-01-03-branchpoint:1.17
	gdb_5_1-2001-11-21-release:1.17
	gdb_s390-2001-09-26-branch:1.17.0.4
	gdb_s390-2001-09-26-branchpoint:1.17
	gdb_5_1-2001-07-29-branch:1.17.0.2
	gdb_5_1-2001-07-29-branchpoint:1.17
	binutils-2_11_2:1.14.2.2
	binutils-2_11_1:1.14.2.2
	binutils-2_11:1.14
	x86_64versiong3:1.15
	binutils-2_11-branch:1.14.0.2
	insight-precleanup-2001-01-01:1.13
	binutils-2_10_1:1.9
	binutils-2_10:1.9
	gdb-premipsmulti-2000-06-06-branch:1.10.0.2
	gdb-premipsmulti-2000-06-06-branchpoint:1.10
	gdb_5_0-2000-05-19-release:1.9
	gdb_4_18_2-2000-05-18-release:1.9
	gdb_4_95_1-2000-05-11-snapshot:1.9
	gdb_4_95_0-2000-04-27-snapshot:1.9
	gdb_5_0-2000-04-10-branch:1.9.0.4
	gdb_5_0-2000-04-10-branchpoint:1.9
	binutils-2_10-branch:1.9.0.2
	binutils-2_10-branchpoint:1.9
	binutils_latest_snapshot:1.58
	repo-unification-2000-02-06:1.8
	binu_ss_19990721:1.5
	binu_ss_19990602:1.1.1.1
	binu_ss_19990502:1.1.1.1
	cygnus:1.1.1;
locks; strict;
comment	@ * @;


1.58
date	2012.07.24.21.06.58;	author ccoutant;	state Exp;
branches;
next	1.57;

1.57
date	2011.05.07.13.48.50;	author amodra;	state Exp;
branches;
next	1.56;

1.56
date	2011.04.20.07.17.01;	author amodra;	state Exp;
branches;
next	1.55;

1.55
date	2011.04.11.04.08.12;	author amodra;	state Exp;
branches;
next	1.54;

1.54
date	2011.01.14.12.35.55;	author amodra;	state Exp;
branches;
next	1.53;

1.53
date	2010.10.29.12.10.24;	author hjl;	state Exp;
branches
	1.53.2.1;
next	1.52;

1.52
date	2010.08.18.12.24.07;	author palves;	state Exp;
branches;
next	1.51;

1.51
date	2009.12.11.13.42.04;	author nickc;	state Exp;
branches;
next	1.50;

1.50
date	2009.09.09.21.38.58;	author nickc;	state Exp;
branches;
next	1.49;

1.49
date	2008.02.20.17.42.36;	author nickc;	state Exp;
branches
	1.49.26.1;
next	1.48;

1.48
date	2007.07.26.12.34.43;	author amodra;	state Exp;
branches;
next	1.47;

1.47
date	2007.07.03.14.26.42;	author nickc;	state Exp;
branches;
next	1.46;

1.46
date	2007.04.26.14.46.58;	author amodra;	state Exp;
branches;
next	1.45;

1.45
date	2007.02.15.08.33.53;	author amodra;	state Exp;
branches;
next	1.44;

1.44
date	2005.11.24.06.02.07;	author amodra;	state Exp;
branches;
next	1.43;

1.43
date	2005.10.24.01.40.58;	author hjl;	state Exp;
branches;
next	1.42;

1.42
date	2005.10.15.14.57.54;	author hjl;	state Exp;
branches;
next	1.41;

1.41
date	2005.10.05.21.24.23;	author bwilson;	state Exp;
branches;
next	1.40;

1.40
date	2005.07.05.09.44.20;	author jakub;	state Exp;
branches;
next	1.39;

1.39
date	2005.06.06.14.28.31;	author hjl;	state Exp;
branches;
next	1.38;

1.38
date	2005.05.04.15.53.33;	author nickc;	state Exp;
branches;
next	1.37;

1.37
date	2005.05.04.07.19.29;	author nickc;	state Exp;
branches;
next	1.36;

1.36
date	2005.02.20.14.59.07;	author amodra;	state Exp;
branches;
next	1.35;

1.35
date	2005.02.11.15.59.51;	author nickc;	state Exp;
branches;
next	1.34;

1.34
date	2005.01.17.17.12.00;	author hjl;	state Exp;
branches;
next	1.33;

1.33
date	2004.08.13.03.16.00;	author amodra;	state Exp;
branches;
next	1.32;

1.32
date	2004.06.24.04.46.24;	author amodra;	state Exp;
branches;
next	1.31;

1.31
date	2004.03.15.14.21.42;	author amodra;	state Exp;
branches;
next	1.30;

1.30
date	2004.03.15.12.23.10;	author amodra;	state Exp;
branches;
next	1.29;

1.29
date	2003.11.04.10.41.51;	author amodra;	state Exp;
branches
	1.29.6.1
	1.29.8.1
	1.29.12.1;
next	1.28;

1.28
date	2003.06.29.10.06.39;	author amodra;	state Exp;
branches;
next	1.27;

1.27
date	2002.11.30.08.39.39;	author amodra;	state Exp;
branches;
next	1.26;

1.26
date	2002.11.26.11.54.00;	author amodra;	state Exp;
branches;
next	1.25;

1.25
date	2002.11.18.16.37.53;	author kdienes;	state Exp;
branches;
next	1.24;

1.24
date	2002.10.25.02.45.53;	author danglin;	state Exp;
branches;
next	1.23;

1.23
date	2002.06.25.06.21.54;	author amodra;	state Exp;
branches
	1.23.2.1
	1.23.12.1
	1.23.14.1;
next	1.22;

1.22
date	2002.03.18.01.26.57;	author amodra;	state Exp;
branches
	1.22.6.1;
next	1.21;

1.21
date	2002.01.30.16.07.28;	author nickc;	state Exp;
branches
	1.21.2.1;
next	1.20;

1.20
date	2001.09.21.14.25.09;	author nickc;	state Exp;
branches;
next	1.19;

1.19
date	2001.09.20.23.30.37;	author amodra;	state Exp;
branches;
next	1.18;

1.18
date	2001.09.18.09.57.25;	author amodra;	state Exp;
branches;
next	1.17;

1.17
date	2001.05.24.20.50.50;	author trix;	state Exp;
branches;
next	1.16;

1.16
date	2001.03.08.21.04.01;	author nickc;	state Exp;
branches;
next	1.15;

1.15
date	2001.02.11.23.21.21;	author nickc;	state Exp;
branches;
next	1.14;

1.14
date	2001.01.03.19.26.07;	author kazu;	state Exp;
branches
	1.14.2.1;
next	1.13;

1.13
date	2000.12.21.18.20.04;	author nickc;	state Exp;
branches;
next	1.12;

1.12
date	2000.07.31.18.49.56;	author nickc;	state Exp;
branches;
next	1.11;

1.11
date	2000.07.12.18.29.55;	author dj;	state Exp;
branches;
next	1.10;

1.10
date	2000.05.22.18.44.02;	author nickc;	state Exp;
branches;
next	1.9;

1.9
date	2000.02.21.12.01.25;	author amodra;	state Exp;
branches;
next	1.8;

1.8
date	2000.01.21.20.52.35;	author nickc;	state Exp;
branches;
next	1.7;

1.7
date	99.11.09.19.13.21;	author ian;	state Exp;
branches;
next	1.6;

1.6
date	99.09.12.14.27.21;	author ian;	state Exp;
branches;
next	1.5;

1.5
date	99.07.11.19.49.40;	author ian;	state Exp;
branches;
next	1.4;

1.4
date	99.07.11.09.28.42;	author mmitchel;	state Exp;
branches;
next	1.3;

1.3
date	99.07.07.17.50.51;	author mmitchel;	state Exp;
branches;
next	1.2;

1.2
date	99.06.03.18.48.23;	author amylaar;	state Exp;
branches;
next	1.1;

1.1
date	99.05.03.07.28.57;	author rth;	state Exp;
branches
	1.1.1.1;
next	;

1.53.2.1
date	2011.02.01.12.25.34;	author amodra;	state Exp;
branches;
next	1.53.2.2;

1.53.2.2
date	2011.05.29.04.51.17;	author amodra;	state Exp;
branches;
next	;

1.49.26.1
date	2009.09.09.21.40.19;	author nickc;	state Exp;
branches;
next	;

1.29.6.1
date	2004.03.15.13.17.38;	author amodra;	state Exp;
branches;
next	1.29.6.2;

1.29.6.2
date	2004.03.15.14.26.08;	author amodra;	state Exp;
branches;
next	;

1.29.8.1
date	2004.03.27.17.37.38;	author drow;	state Exp;
branches;
next	1.29.8.2;

1.29.8.2
date	2004.09.16.17.00.34;	author drow;	state Exp;
branches;
next	;

1.29.12.1
date	2004.03.21.23.57.28;	author cagney;	state Exp;
branches;
next	;

1.23.2.1
date	2002.10.28.18.45.45;	author drow;	state Exp;
branches;
next	;

1.23.12.1
date	2002.10.25.23.49.49;	author carlton;	state Exp;
branches;
next	1.23.12.2;

1.23.12.2
date	2002.12.23.19.37.54;	author carlton;	state Exp;
branches;
next	1.23.12.3;

1.23.12.3
date	2003.08.05.17.12.54;	author carlton;	state Exp;
branches;
next	1.23.12.4;

1.23.12.4
date	2003.11.11.23.50.27;	author carlton;	state Exp;
branches;
next	;

1.23.14.1
date	2003.12.14.20.26.47;	author drow;	state Exp;
branches;
next	;

1.22.6.1
date	2002.07.22.21.46.48;	author kseitz;	state Exp;
branches;
next	1.22.6.2;

1.22.6.2
date	2002.11.03.22.01.37;	author ezannoni;	state Exp;
branches;
next	;

1.21.2.1
date	2002.03.28.06.20.03;	author amodra;	state Exp;
branches;
next	;

1.14.2.1
date	2001.06.07.03.08.26;	author amodra;	state Exp;
branches;
next	1.14.2.2;

1.14.2.2
date	2001.06.11.10.04.17;	author amodra;	state Exp;
branches;
next	;

1.1.1.1
date	99.05.03.07.28.57;	author rth;	state Exp;
branches;
next	;


desc
@@


1.58
log
@2012-07-24  Teresa Johnson  <tejohnson@@google.com>

bfd/
	* bfd.c (bfd_find_nearest_line_discriminator): New macro.
	* coff-rs6000.c: Init _bfd_find_nearest_line_discriminator.
	* coff64-rs6000.c: Likewise.
	* dwarf2.c (struct line_info): Add discriminator field.
	(add_line_info): Fill in new discriminator field.
	(decode_line_info): Record discriminator information instead
        of ignoring it.
	(lookup_address_in_line_info_table): Return discriminator field if
        requested.
	(comp_unit_find_nearest_line): Add discriminator argument.
	(find_line): Likewise.
	(_bfd_dwarf2_find_nearest_line): Likewise.
	(_bfd_dwarf2_find_line): Likewise.
	* elf-bfd.h (_bfd_elf_find_nearest_line_discriminator): New.
        (_bfd_elf_find_line_discriminator): Likewise.
        (_bfd_generic_find_nearest_line_discriminator): Likewise. Defined.
	* elf.c (_bfd_elf_find_nearest_line): Change to a wrapper
        that invokes _bfd_elf_find_nearest_line_discriminator with correct
        arguments.
	(_bfd_elf_find_nearest_line_discriminator): New.
	(_bfd_elf_find_line): Change to a wrapper
        that invokes _bfd_elf_find_line_discriminator with correct
        arguments.
	(_bfd_elf_find_line_discriminator): New.
	* coffgen.c (coff_find_nearest_line_with_names): Handle
        new discriminator argument.
	* elf32-arm.c (elf32_arm_find_nearest_line): Likewise.
	* elf64-alpha.c (elf64_alpha_find_nearest_line): Likewise.
	* elfxx-mips.c (_bfd_mips_elf_find_nearest_line): Likewise.
	* mach-o.c (bfd_mach_o_find_nearest_line): Likewise.
	* libbfd-in.h (_bfd_dwarf2_find_nearest_line): Add discriminator
        argument.
        (_bfd_dwarf2_find_line): Likewise.
        (_bfd_generic_find_nearest_line_discriminator): New.
	* libbfd.c (_bfd_generic_find_nearest_line_discriminator): New.
	* bfd-in2.h: Regenerated.
	* libbfd.h: Likewise.
	* targets.c (BFD_JUMP_TABLE_SYMBOLS): Initialize
        _bfd_find_nearest_line_discriminator with
        _bfd_generic_find_nearest_line_discriminator.
        (bfd_target): Add _bfd_find_nearest_line_discriminator.

binutils/
	* addr2line.c (find_address_in_section): Invoke
        bfd_find_nearest_line_discriminator to get the discriminator.
	(find_offset_in_section): Likewise.
	(translate_addresses): Print discriminator if it is non-zero.
	* objdump.c (show_line): Invoke
        bfd_find_nearest_line_discriminator to get the discriminator,
        and keep track of prev_discriminator. Print discriminator
        if it is non-zero.
	(disassemble_data): Initialize prev_discriminator.
	(dump_reloc_set): Invoke bfd_find_nearest_line_discriminator
        to get the discriminator, and keep track of last_discriminator.
        Print discriminator if it is non-zero.
@
text
@/* Assorted BFD support routines, only used internally.
   Copyright 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,
   2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008, 2009, 2010, 2011
   Free Software Foundation, Inc.
   Written by Cygnus Support.

   This file is part of BFD, the Binary File Descriptor library.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,
   MA 02110-1301, USA.  */

#include "sysdep.h"
#include "bfd.h"
#include "libbfd.h"

#ifndef HAVE_GETPAGESIZE
#define getpagesize() 2048
#endif

/*
SECTION
	Implementation details

SUBSECTION
	Internal functions

DESCRIPTION
	These routines are used within BFD.
	They are not intended for export, but are documented here for
	completeness.
*/

/* A routine which is used in target vectors for unsupported
   operations.  */

bfd_boolean
bfd_false (bfd *ignore ATTRIBUTE_UNUSED)
{
  bfd_set_error (bfd_error_invalid_operation);
  return FALSE;
}

/* A routine which is used in target vectors for supported operations
   which do not actually do anything.  */

bfd_boolean
bfd_true (bfd *ignore ATTRIBUTE_UNUSED)
{
  return TRUE;
}

/* A routine which is used in target vectors for unsupported
   operations which return a pointer value.  */

void *
bfd_nullvoidptr (bfd *ignore ATTRIBUTE_UNUSED)
{
  bfd_set_error (bfd_error_invalid_operation);
  return NULL;
}

int
bfd_0 (bfd *ignore ATTRIBUTE_UNUSED)
{
  return 0;
}

unsigned int
bfd_0u (bfd *ignore ATTRIBUTE_UNUSED)
{
   return 0;
}

long
bfd_0l (bfd *ignore ATTRIBUTE_UNUSED)
{
  return 0;
}

/* A routine which is used in target vectors for unsupported
   operations which return -1 on error.  */

long
_bfd_n1 (bfd *ignore_abfd ATTRIBUTE_UNUSED)
{
  bfd_set_error (bfd_error_invalid_operation);
  return -1;
}

void
bfd_void (bfd *ignore ATTRIBUTE_UNUSED)
{
}

long
_bfd_norelocs_get_reloc_upper_bound (bfd *abfd ATTRIBUTE_UNUSED,
				     asection *sec ATTRIBUTE_UNUSED)
{
  return sizeof (arelent *);
}

long
_bfd_norelocs_canonicalize_reloc (bfd *abfd ATTRIBUTE_UNUSED,
				  asection *sec ATTRIBUTE_UNUSED,
				  arelent **relptr,
				  asymbol **symbols ATTRIBUTE_UNUSED)
{
  *relptr = NULL;
  return 0;
}

bfd_boolean
_bfd_nocore_core_file_matches_executable_p
  (bfd *ignore_core_bfd ATTRIBUTE_UNUSED,
   bfd *ignore_exec_bfd ATTRIBUTE_UNUSED)
{
  bfd_set_error (bfd_error_invalid_operation);
  return FALSE;
}

/* Routine to handle core_file_failing_command entry point for targets
   without core file support.  */

char *
_bfd_nocore_core_file_failing_command (bfd *ignore_abfd ATTRIBUTE_UNUSED)
{
  bfd_set_error (bfd_error_invalid_operation);
  return NULL;
}

/* Routine to handle core_file_failing_signal entry point for targets
   without core file support.  */

int
_bfd_nocore_core_file_failing_signal (bfd *ignore_abfd ATTRIBUTE_UNUSED)
{
  bfd_set_error (bfd_error_invalid_operation);
  return 0;
}

/* Routine to handle the core_file_pid entry point for targets without
   core file support.  */

int
_bfd_nocore_core_file_pid (bfd *ignore_abfd ATTRIBUTE_UNUSED)
{
  bfd_set_error (bfd_error_invalid_operation);
  return 0;
}

const bfd_target *
_bfd_dummy_target (bfd *ignore_abfd ATTRIBUTE_UNUSED)
{
  bfd_set_error (bfd_error_wrong_format);
  return 0;
}

/* Allocate memory using malloc.  */

void *
bfd_malloc (bfd_size_type size)
{
  void *ptr;

  if (size != (size_t) size)
    {
      bfd_set_error (bfd_error_no_memory);
      return NULL;
    }

  ptr = malloc ((size_t) size);
  if (ptr == NULL && (size_t) size != 0)
    bfd_set_error (bfd_error_no_memory);

  return ptr;
}

/* Allocate memory using malloc, nmemb * size with overflow checking.  */

void *
bfd_malloc2 (bfd_size_type nmemb, bfd_size_type size)
{
  void *ptr;

  if ((nmemb | size) >= HALF_BFD_SIZE_TYPE
      && size != 0
      && nmemb > ~(bfd_size_type) 0 / size)
    {
      bfd_set_error (bfd_error_no_memory);
      return NULL;
    }

  size *= nmemb;

  if (size != (size_t) size)
    {
      bfd_set_error (bfd_error_no_memory);
      return NULL;
    }

  ptr = malloc ((size_t) size);
  if (ptr == NULL && (size_t) size != 0)
    bfd_set_error (bfd_error_no_memory);

  return ptr;
}

/* Reallocate memory using realloc.  */

void *
bfd_realloc (void *ptr, bfd_size_type size)
{
  void *ret;

  if (size != (size_t) size)
    {
      bfd_set_error (bfd_error_no_memory);
      return NULL;
    }

  if (ptr == NULL)
    ret = malloc ((size_t) size);
  else
    ret = realloc (ptr, (size_t) size);

  if (ret == NULL && (size_t) size != 0)
    bfd_set_error (bfd_error_no_memory);

  return ret;
}

/* Reallocate memory using realloc, nmemb * size with overflow checking.  */

void *
bfd_realloc2 (void *ptr, bfd_size_type nmemb, bfd_size_type size)
{
  void *ret;

  if ((nmemb | size) >= HALF_BFD_SIZE_TYPE
      && size != 0
      && nmemb > ~(bfd_size_type) 0 / size)
    {
      bfd_set_error (bfd_error_no_memory);
      return NULL;
    }

  size *= nmemb;

  if (size != (size_t) size)
    {
      bfd_set_error (bfd_error_no_memory);
      return NULL;
    }

  if (ptr == NULL)
    ret = malloc ((size_t) size);
  else
    ret = realloc (ptr, (size_t) size);

  if (ret == NULL && (size_t) size != 0)
    bfd_set_error (bfd_error_no_memory);

  return ret;
}

/* Reallocate memory using realloc.
   If this fails the pointer is freed before returning.  */

void *
bfd_realloc_or_free (void *ptr, bfd_size_type size)
{
  size_t amount = (size_t) size;
  void *ret;

  if (size != amount)
    ret = NULL;
  else if (ptr == NULL)
    ret = malloc (amount);
  else
    ret = realloc (ptr, amount);

  if (ret == NULL)
    {
      if (amount > 0)
	bfd_set_error (bfd_error_no_memory);

      if (ptr != NULL)
	free (ptr);
    }

  return ret;
}

/* Allocate memory using malloc and clear it.  */

void *
bfd_zmalloc (bfd_size_type size)
{
  void *ptr;

  if (size != (size_t) size)
    {
      bfd_set_error (bfd_error_no_memory);
      return NULL;
    }

  ptr = malloc ((size_t) size);

  if ((size_t) size != 0)
    {
      if (ptr == NULL)
	bfd_set_error (bfd_error_no_memory);
      else
	memset (ptr, 0, (size_t) size);
    }

  return ptr;
}

/* Allocate memory using malloc (nmemb * size) with overflow checking
   and clear it.  */

void *
bfd_zmalloc2 (bfd_size_type nmemb, bfd_size_type size)
{
  void *ptr;

  if ((nmemb | size) >= HALF_BFD_SIZE_TYPE
      && size != 0
      && nmemb > ~(bfd_size_type) 0 / size)
    {
      bfd_set_error (bfd_error_no_memory);
      return NULL;
    }

  size *= nmemb;

  if (size != (size_t) size)
    {
      bfd_set_error (bfd_error_no_memory);
      return NULL;
    }

  ptr = malloc ((size_t) size);

  if ((size_t) size != 0)
    {
      if (ptr == NULL)
	bfd_set_error (bfd_error_no_memory);
      else
	memset (ptr, 0, (size_t) size);
    }

  return ptr;
}

/*
INTERNAL_FUNCTION
	bfd_write_bigendian_4byte_int

SYNOPSIS
	bfd_boolean bfd_write_bigendian_4byte_int (bfd *, unsigned int);

DESCRIPTION
	Write a 4 byte integer @@var{i} to the output BFD @@var{abfd}, in big
	endian order regardless of what else is going on.  This is useful in
	archives.

*/
bfd_boolean
bfd_write_bigendian_4byte_int (bfd *abfd, unsigned int i)
{
  bfd_byte buffer[4];
  bfd_putb32 ((bfd_vma) i, buffer);
  return bfd_bwrite (buffer, (bfd_size_type) 4, abfd) == 4;
}


/** The do-it-yourself (byte) sex-change kit */

/* The middle letter e.g. get<b>short indicates Big or Little endian
   target machine.  It doesn't matter what the byte order of the host
   machine is; these routines work for either.  */

/* FIXME: Should these take a count argument?
   Answer (gnu@@cygnus.com):  No, but perhaps they should be inline
                             functions in swap.h #ifdef __GNUC__.
                             Gprof them later and find out.  */

/*
FUNCTION
	bfd_put_size
FUNCTION
	bfd_get_size

DESCRIPTION
	These macros as used for reading and writing raw data in
	sections; each access (except for bytes) is vectored through
	the target format of the BFD and mangled accordingly. The
	mangling performs any necessary endian translations and
	removes alignment restrictions.  Note that types accepted and
	returned by these macros are identical so they can be swapped
	around in macros---for example, @@file{libaout.h} defines <<GET_WORD>>
	to either <<bfd_get_32>> or <<bfd_get_64>>.

	In the put routines, @@var{val} must be a <<bfd_vma>>.  If we are on a
	system without prototypes, the caller is responsible for making
	sure that is true, with a cast if necessary.  We don't cast
	them in the macro definitions because that would prevent <<lint>>
	or <<gcc -Wall>> from detecting sins such as passing a pointer.
	To detect calling these with less than a <<bfd_vma>>, use
	<<gcc -Wconversion>> on a host with 64 bit <<bfd_vma>>'s.

.
.{* Byte swapping macros for user section data.  *}
.
.#define bfd_put_8(abfd, val, ptr) \
.  ((void) (*((unsigned char *) (ptr)) = (val) & 0xff))
.#define bfd_put_signed_8 \
.  bfd_put_8
.#define bfd_get_8(abfd, ptr) \
.  (*(const unsigned char *) (ptr) & 0xff)
.#define bfd_get_signed_8(abfd, ptr) \
.  (((*(const unsigned char *) (ptr) & 0xff) ^ 0x80) - 0x80)
.
.#define bfd_put_16(abfd, val, ptr) \
.  BFD_SEND (abfd, bfd_putx16, ((val),(ptr)))
.#define bfd_put_signed_16 \
.  bfd_put_16
.#define bfd_get_16(abfd, ptr) \
.  BFD_SEND (abfd, bfd_getx16, (ptr))
.#define bfd_get_signed_16(abfd, ptr) \
.  BFD_SEND (abfd, bfd_getx_signed_16, (ptr))
.
.#define bfd_put_32(abfd, val, ptr) \
.  BFD_SEND (abfd, bfd_putx32, ((val),(ptr)))
.#define bfd_put_signed_32 \
.  bfd_put_32
.#define bfd_get_32(abfd, ptr) \
.  BFD_SEND (abfd, bfd_getx32, (ptr))
.#define bfd_get_signed_32(abfd, ptr) \
.  BFD_SEND (abfd, bfd_getx_signed_32, (ptr))
.
.#define bfd_put_64(abfd, val, ptr) \
.  BFD_SEND (abfd, bfd_putx64, ((val), (ptr)))
.#define bfd_put_signed_64 \
.  bfd_put_64
.#define bfd_get_64(abfd, ptr) \
.  BFD_SEND (abfd, bfd_getx64, (ptr))
.#define bfd_get_signed_64(abfd, ptr) \
.  BFD_SEND (abfd, bfd_getx_signed_64, (ptr))
.
.#define bfd_get(bits, abfd, ptr)			\
.  ((bits) == 8 ? (bfd_vma) bfd_get_8 (abfd, ptr)	\
.   : (bits) == 16 ? bfd_get_16 (abfd, ptr)		\
.   : (bits) == 32 ? bfd_get_32 (abfd, ptr)		\
.   : (bits) == 64 ? bfd_get_64 (abfd, ptr)		\
.   : (abort (), (bfd_vma) - 1))
.
.#define bfd_put(bits, abfd, val, ptr)			\
.  ((bits) == 8 ? bfd_put_8  (abfd, val, ptr)		\
.   : (bits) == 16 ? bfd_put_16 (abfd, val, ptr)		\
.   : (bits) == 32 ? bfd_put_32 (abfd, val, ptr)		\
.   : (bits) == 64 ? bfd_put_64 (abfd, val, ptr)		\
.   : (abort (), (void) 0))
.
*/

/*
FUNCTION
	bfd_h_put_size
	bfd_h_get_size

DESCRIPTION
	These macros have the same function as their <<bfd_get_x>>
	brethren, except that they are used for removing information
	for the header records of object files. Believe it or not,
	some object files keep their header records in big endian
	order and their data in little endian order.
.
.{* Byte swapping macros for file header data.  *}
.
.#define bfd_h_put_8(abfd, val, ptr) \
.  bfd_put_8 (abfd, val, ptr)
.#define bfd_h_put_signed_8(abfd, val, ptr) \
.  bfd_put_8 (abfd, val, ptr)
.#define bfd_h_get_8(abfd, ptr) \
.  bfd_get_8 (abfd, ptr)
.#define bfd_h_get_signed_8(abfd, ptr) \
.  bfd_get_signed_8 (abfd, ptr)
.
.#define bfd_h_put_16(abfd, val, ptr) \
.  BFD_SEND (abfd, bfd_h_putx16, (val, ptr))
.#define bfd_h_put_signed_16 \
.  bfd_h_put_16
.#define bfd_h_get_16(abfd, ptr) \
.  BFD_SEND (abfd, bfd_h_getx16, (ptr))
.#define bfd_h_get_signed_16(abfd, ptr) \
.  BFD_SEND (abfd, bfd_h_getx_signed_16, (ptr))
.
.#define bfd_h_put_32(abfd, val, ptr) \
.  BFD_SEND (abfd, bfd_h_putx32, (val, ptr))
.#define bfd_h_put_signed_32 \
.  bfd_h_put_32
.#define bfd_h_get_32(abfd, ptr) \
.  BFD_SEND (abfd, bfd_h_getx32, (ptr))
.#define bfd_h_get_signed_32(abfd, ptr) \
.  BFD_SEND (abfd, bfd_h_getx_signed_32, (ptr))
.
.#define bfd_h_put_64(abfd, val, ptr) \
.  BFD_SEND (abfd, bfd_h_putx64, (val, ptr))
.#define bfd_h_put_signed_64 \
.  bfd_h_put_64
.#define bfd_h_get_64(abfd, ptr) \
.  BFD_SEND (abfd, bfd_h_getx64, (ptr))
.#define bfd_h_get_signed_64(abfd, ptr) \
.  BFD_SEND (abfd, bfd_h_getx_signed_64, (ptr))
.
.{* Aliases for the above, which should eventually go away.  *}
.
.#define H_PUT_64  bfd_h_put_64
.#define H_PUT_32  bfd_h_put_32
.#define H_PUT_16  bfd_h_put_16
.#define H_PUT_8   bfd_h_put_8
.#define H_PUT_S64 bfd_h_put_signed_64
.#define H_PUT_S32 bfd_h_put_signed_32
.#define H_PUT_S16 bfd_h_put_signed_16
.#define H_PUT_S8  bfd_h_put_signed_8
.#define H_GET_64  bfd_h_get_64
.#define H_GET_32  bfd_h_get_32
.#define H_GET_16  bfd_h_get_16
.#define H_GET_8   bfd_h_get_8
.#define H_GET_S64 bfd_h_get_signed_64
.#define H_GET_S32 bfd_h_get_signed_32
.#define H_GET_S16 bfd_h_get_signed_16
.#define H_GET_S8  bfd_h_get_signed_8
.
.*/

/* Sign extension to bfd_signed_vma.  */
#define COERCE16(x) (((bfd_signed_vma) (x) ^ 0x8000) - 0x8000)
#define COERCE32(x) (((bfd_signed_vma) (x) ^ 0x80000000) - 0x80000000)
#define EIGHT_GAZILLION ((bfd_int64_t) 1 << 63)
#define COERCE64(x) \
  (((bfd_int64_t) (x) ^ EIGHT_GAZILLION) - EIGHT_GAZILLION)

bfd_vma
bfd_getb16 (const void *p)
{
  const bfd_byte *addr = (const bfd_byte *) p;
  return (addr[0] << 8) | addr[1];
}

bfd_vma
bfd_getl16 (const void *p)
{
  const bfd_byte *addr = (const bfd_byte *) p;
  return (addr[1] << 8) | addr[0];
}

bfd_signed_vma
bfd_getb_signed_16 (const void *p)
{
  const bfd_byte *addr = (const bfd_byte *) p;
  return COERCE16 ((addr[0] << 8) | addr[1]);
}

bfd_signed_vma
bfd_getl_signed_16 (const void *p)
{
  const bfd_byte *addr = (const bfd_byte *) p;
  return COERCE16 ((addr[1] << 8) | addr[0]);
}

void
bfd_putb16 (bfd_vma data, void *p)
{
  bfd_byte *addr = (bfd_byte *) p;
  addr[0] = (data >> 8) & 0xff;
  addr[1] = data & 0xff;
}

void
bfd_putl16 (bfd_vma data, void *p)
{
  bfd_byte *addr = (bfd_byte *) p;
  addr[0] = data & 0xff;
  addr[1] = (data >> 8) & 0xff;
}

bfd_vma
bfd_getb32 (const void *p)
{
  const bfd_byte *addr = (const bfd_byte *) p;
  unsigned long v;

  v = (unsigned long) addr[0] << 24;
  v |= (unsigned long) addr[1] << 16;
  v |= (unsigned long) addr[2] << 8;
  v |= (unsigned long) addr[3];
  return v;
}

bfd_vma
bfd_getl32 (const void *p)
{
  const bfd_byte *addr = (const bfd_byte *) p;
  unsigned long v;

  v = (unsigned long) addr[0];
  v |= (unsigned long) addr[1] << 8;
  v |= (unsigned long) addr[2] << 16;
  v |= (unsigned long) addr[3] << 24;
  return v;
}

bfd_signed_vma
bfd_getb_signed_32 (const void *p)
{
  const bfd_byte *addr = (const bfd_byte *) p;
  unsigned long v;

  v = (unsigned long) addr[0] << 24;
  v |= (unsigned long) addr[1] << 16;
  v |= (unsigned long) addr[2] << 8;
  v |= (unsigned long) addr[3];
  return COERCE32 (v);
}

bfd_signed_vma
bfd_getl_signed_32 (const void *p)
{
  const bfd_byte *addr = (const bfd_byte *) p;
  unsigned long v;

  v = (unsigned long) addr[0];
  v |= (unsigned long) addr[1] << 8;
  v |= (unsigned long) addr[2] << 16;
  v |= (unsigned long) addr[3] << 24;
  return COERCE32 (v);
}

bfd_uint64_t
bfd_getb64 (const void *p ATTRIBUTE_UNUSED)
{
#ifdef BFD_HOST_64_BIT
  const bfd_byte *addr = (const bfd_byte *) p;
  bfd_uint64_t v;

  v  = addr[0]; v <<= 8;
  v |= addr[1]; v <<= 8;
  v |= addr[2]; v <<= 8;
  v |= addr[3]; v <<= 8;
  v |= addr[4]; v <<= 8;
  v |= addr[5]; v <<= 8;
  v |= addr[6]; v <<= 8;
  v |= addr[7];

  return v;
#else
  BFD_FAIL();
  return 0;
#endif
}

bfd_uint64_t
bfd_getl64 (const void *p ATTRIBUTE_UNUSED)
{
#ifdef BFD_HOST_64_BIT
  const bfd_byte *addr = (const bfd_byte *) p;
  bfd_uint64_t v;

  v  = addr[7]; v <<= 8;
  v |= addr[6]; v <<= 8;
  v |= addr[5]; v <<= 8;
  v |= addr[4]; v <<= 8;
  v |= addr[3]; v <<= 8;
  v |= addr[2]; v <<= 8;
  v |= addr[1]; v <<= 8;
  v |= addr[0];

  return v;
#else
  BFD_FAIL();
  return 0;
#endif

}

bfd_int64_t
bfd_getb_signed_64 (const void *p ATTRIBUTE_UNUSED)
{
#ifdef BFD_HOST_64_BIT
  const bfd_byte *addr = (const bfd_byte *) p;
  bfd_uint64_t v;

  v  = addr[0]; v <<= 8;
  v |= addr[1]; v <<= 8;
  v |= addr[2]; v <<= 8;
  v |= addr[3]; v <<= 8;
  v |= addr[4]; v <<= 8;
  v |= addr[5]; v <<= 8;
  v |= addr[6]; v <<= 8;
  v |= addr[7];

  return COERCE64 (v);
#else
  BFD_FAIL();
  return 0;
#endif
}

bfd_int64_t
bfd_getl_signed_64 (const void *p ATTRIBUTE_UNUSED)
{
#ifdef BFD_HOST_64_BIT
  const bfd_byte *addr = (const bfd_byte *) p;
  bfd_uint64_t v;

  v  = addr[7]; v <<= 8;
  v |= addr[6]; v <<= 8;
  v |= addr[5]; v <<= 8;
  v |= addr[4]; v <<= 8;
  v |= addr[3]; v <<= 8;
  v |= addr[2]; v <<= 8;
  v |= addr[1]; v <<= 8;
  v |= addr[0];

  return COERCE64 (v);
#else
  BFD_FAIL();
  return 0;
#endif
}

void
bfd_putb32 (bfd_vma data, void *p)
{
  bfd_byte *addr = (bfd_byte *) p;
  addr[0] = (data >> 24) & 0xff;
  addr[1] = (data >> 16) & 0xff;
  addr[2] = (data >>  8) & 0xff;
  addr[3] = data & 0xff;
}

void
bfd_putl32 (bfd_vma data, void *p)
{
  bfd_byte *addr = (bfd_byte *) p;
  addr[0] = data & 0xff;
  addr[1] = (data >>  8) & 0xff;
  addr[2] = (data >> 16) & 0xff;
  addr[3] = (data >> 24) & 0xff;
}

void
bfd_putb64 (bfd_uint64_t data ATTRIBUTE_UNUSED, void *p ATTRIBUTE_UNUSED)
{
#ifdef BFD_HOST_64_BIT
  bfd_byte *addr = (bfd_byte *) p;
  addr[0] = (data >> (7*8)) & 0xff;
  addr[1] = (data >> (6*8)) & 0xff;
  addr[2] = (data >> (5*8)) & 0xff;
  addr[3] = (data >> (4*8)) & 0xff;
  addr[4] = (data >> (3*8)) & 0xff;
  addr[5] = (data >> (2*8)) & 0xff;
  addr[6] = (data >> (1*8)) & 0xff;
  addr[7] = (data >> (0*8)) & 0xff;
#else
  BFD_FAIL();
#endif
}

void
bfd_putl64 (bfd_uint64_t data ATTRIBUTE_UNUSED, void *p ATTRIBUTE_UNUSED)
{
#ifdef BFD_HOST_64_BIT
  bfd_byte *addr = (bfd_byte *) p;
  addr[7] = (data >> (7*8)) & 0xff;
  addr[6] = (data >> (6*8)) & 0xff;
  addr[5] = (data >> (5*8)) & 0xff;
  addr[4] = (data >> (4*8)) & 0xff;
  addr[3] = (data >> (3*8)) & 0xff;
  addr[2] = (data >> (2*8)) & 0xff;
  addr[1] = (data >> (1*8)) & 0xff;
  addr[0] = (data >> (0*8)) & 0xff;
#else
  BFD_FAIL();
#endif
}

void
bfd_put_bits (bfd_uint64_t data, void *p, int bits, bfd_boolean big_p)
{
  bfd_byte *addr = (bfd_byte *) p;
  int i;
  int bytes;

  if (bits % 8 != 0)
    abort ();

  bytes = bits / 8;
  for (i = 0; i < bytes; i++)
    {
      int addr_index = big_p ? bytes - i - 1 : i;

      addr[addr_index] = data & 0xff;
      data >>= 8;
    }
}

bfd_uint64_t
bfd_get_bits (const void *p, int bits, bfd_boolean big_p)
{
  const bfd_byte *addr = (const bfd_byte *) p;
  bfd_uint64_t data;
  int i;
  int bytes;

  if (bits % 8 != 0)
    abort ();

  data = 0;
  bytes = bits / 8;
  for (i = 0; i < bytes; i++)
    {
      int addr_index = big_p ? i : bytes - i - 1;

      data = (data << 8) | addr[addr_index];
    }

  return data;
}

/* Default implementation */

bfd_boolean
_bfd_generic_get_section_contents (bfd *abfd,
				   sec_ptr section,
				   void *location,
				   file_ptr offset,
				   bfd_size_type count)
{
  bfd_size_type sz;
  if (count == 0)
    return TRUE;

  if (section->compress_status != COMPRESS_SECTION_NONE)
    {
      (*_bfd_error_handler)
	(_("%B: unable to get decompressed section %A"),
	 abfd, section);
      bfd_set_error (bfd_error_invalid_operation);
      return FALSE;
    }

  /* We do allow reading of a section after bfd_final_link has
     written the contents out to disk.  In that situation, rawsize is
     just a stale version of size, so ignore it.  Otherwise we must be
     reading an input section, where rawsize, if different to size,
     is the on-disk size.  */
  if (abfd->direction != write_direction && section->rawsize != 0)
    sz = section->rawsize;
  else
    sz = section->size;
  if (offset + count < count
      || offset + count > sz)
    {
      bfd_set_error (bfd_error_invalid_operation);
      return FALSE;
    }

  if (bfd_seek (abfd, section->filepos + offset, SEEK_SET) != 0
      || bfd_bread (location, count, abfd) != count)
    return FALSE;

  return TRUE;
}

bfd_boolean
_bfd_generic_get_section_contents_in_window
  (bfd *abfd ATTRIBUTE_UNUSED,
   sec_ptr section ATTRIBUTE_UNUSED,
   bfd_window *w ATTRIBUTE_UNUSED,
   file_ptr offset ATTRIBUTE_UNUSED,
   bfd_size_type count ATTRIBUTE_UNUSED)
{
#ifdef USE_MMAP
  bfd_size_type sz;

  if (count == 0)
    return TRUE;
  if (abfd->xvec->_bfd_get_section_contents
      != _bfd_generic_get_section_contents)
    {
      /* We don't know what changes the bfd's get_section_contents
	 method may have to make.  So punt trying to map the file
	 window, and let get_section_contents do its thing.  */
      /* @@@@ FIXME : If the internal window has a refcount of 1 and was
	 allocated with malloc instead of mmap, just reuse it.  */
      bfd_free_window (w);
      w->i = bfd_zmalloc (sizeof (bfd_window_internal));
      if (w->i == NULL)
	return FALSE;
      w->i->data = bfd_malloc (count);
      if (w->i->data == NULL)
	{
	  free (w->i);
	  w->i = NULL;
	  return FALSE;
	}
      w->i->mapped = 0;
      w->i->refcount = 1;
      w->size = w->i->size = count;
      w->data = w->i->data;
      return bfd_get_section_contents (abfd, section, w->data, offset, count);
    }
  if (abfd->direction != write_direction && section->rawsize != 0)
    sz = section->rawsize;
  else
    sz = section->size;
  if (offset + count > sz
      || ! bfd_get_file_window (abfd, section->filepos + offset, count, w,
				TRUE))
    return FALSE;
  return TRUE;
#else
  abort ();
#endif
}

/* This generic function can only be used in implementations where creating
   NEW sections is disallowed.  It is useful in patching existing sections
   in read-write files, though.  See other set_section_contents functions
   to see why it doesn't work for new sections.  */
bfd_boolean
_bfd_generic_set_section_contents (bfd *abfd,
				   sec_ptr section,
				   const void *location,
				   file_ptr offset,
				   bfd_size_type count)
{
  if (count == 0)
    return TRUE;

  if (bfd_seek (abfd, section->filepos + offset, SEEK_SET) != 0
      || bfd_bwrite (location, count, abfd) != count)
    return FALSE;

  return TRUE;
}

/*
INTERNAL_FUNCTION
	bfd_log2

SYNOPSIS
	unsigned int bfd_log2 (bfd_vma x);

DESCRIPTION
	Return the log base 2 of the value supplied, rounded up.  E.g., an
	@@var{x} of 1025 returns 11.  A @@var{x} of 0 returns 0.
*/

unsigned int
bfd_log2 (bfd_vma x)
{
  unsigned int result = 0;

  if (x <= 1)
    return result;
  --x;
  do
    ++result;
  while ((x >>= 1) != 0);
  return result;
}

bfd_boolean
bfd_generic_is_local_label_name (bfd *abfd, const char *name)
{
  char locals_prefix = (bfd_get_symbol_leading_char (abfd) == '_') ? 'L' : '.';

  return name[0] == locals_prefix;
}

/*  Can be used from / for bfd_merge_private_bfd_data to check that
    endianness matches between input and output file.  Returns
    TRUE for a match, otherwise returns FALSE and emits an error.  */
bfd_boolean
_bfd_generic_verify_endian_match (bfd *ibfd, bfd *obfd)
{
  if (ibfd->xvec->byteorder != obfd->xvec->byteorder
      && ibfd->xvec->byteorder != BFD_ENDIAN_UNKNOWN
      && obfd->xvec->byteorder != BFD_ENDIAN_UNKNOWN)
    {
      const char *msg;

      if (bfd_big_endian (ibfd))
	msg = _("%B: compiled for a big endian system and target is little endian");
      else
	msg = _("%B: compiled for a little endian system and target is big endian");

      (*_bfd_error_handler) (msg, ibfd);

      bfd_set_error (bfd_error_wrong_format);
      return FALSE;
    }

  return TRUE;
}

/* Give a warning at runtime if someone compiles code which calls
   old routines.  */

void
warn_deprecated (const char *what,
		 const char *file,
		 int line,
		 const char *func)
{
  /* Poor man's tracking of functions we've already warned about.  */
  static size_t mask = 0;

  if (~(size_t) func & ~mask)
    {
      fflush (stdout);
      /* Note: separate sentences in order to allow
	 for translation into other languages.  */
      if (func)
	fprintf (stderr, _("Deprecated %s called at %s line %d in %s\n"),
		 what, file, line, func);
      else
	fprintf (stderr, _("Deprecated %s called\n"), what);
      fflush (stderr);
      mask |= ~(size_t) func;
    }
}

/* Helper function for reading uleb128 encoded data.  */

bfd_vma
read_unsigned_leb128 (bfd *abfd ATTRIBUTE_UNUSED,
		      bfd_byte *buf,
		      unsigned int *bytes_read_ptr)
{
  bfd_vma result;
  unsigned int num_read;
  unsigned int shift;
  unsigned char byte;

  result = 0;
  shift = 0;
  num_read = 0;
  do
    {
      byte = bfd_get_8 (abfd, buf);
      buf++;
      num_read++;
      result |= (((bfd_vma) byte & 0x7f) << shift);
      shift += 7;
    }
  while (byte & 0x80);
  *bytes_read_ptr = num_read;
  return result;
}

/* Helper function for reading sleb128 encoded data.  */

bfd_signed_vma
read_signed_leb128 (bfd *abfd ATTRIBUTE_UNUSED,
		    bfd_byte *buf,
		    unsigned int *bytes_read_ptr)
{
  bfd_vma result;
  unsigned int shift;
  unsigned int num_read;
  unsigned char byte;

  result = 0;
  shift = 0;
  num_read = 0;
  do
    {
      byte = bfd_get_8 (abfd, buf);
      buf ++;
      num_read ++;
      result |= (((bfd_vma) byte & 0x7f) << shift);
      shift += 7;
    }
  while (byte & 0x80);
  if (shift < 8 * sizeof (result) && (byte & 0x40))
    result |= (((bfd_vma) -1) << shift);
  *bytes_read_ptr = num_read;
  return result;
}

bfd_boolean
_bfd_generic_find_line (bfd *abfd ATTRIBUTE_UNUSED,
		       asymbol **symbols ATTRIBUTE_UNUSED,
		       asymbol *symbol ATTRIBUTE_UNUSED,
		       const char **filename_ptr ATTRIBUTE_UNUSED,
		       unsigned int *linenumber_ptr ATTRIBUTE_UNUSED)
{
  return FALSE;
}

bfd_boolean
_bfd_generic_find_nearest_line_discriminator (bfd *abfd ATTRIBUTE_UNUSED,
                                              asection *section ATTRIBUTE_UNUSED,
                                              asymbol **symbols ATTRIBUTE_UNUSED,
                                              bfd_vma offset ATTRIBUTE_UNUSED,
                                              const char **filename_ptr ATTRIBUTE_UNUSED,
                                              const char **functionname_ptr ATTRIBUTE_UNUSED,
                                              unsigned int *line_ptr ATTRIBUTE_UNUSED,
                                              unsigned int *discriminator_ptr ATTRIBUTE_UNUSED)
{
  return FALSE;
}

bfd_boolean
_bfd_generic_init_private_section_data (bfd *ibfd ATTRIBUTE_UNUSED,
					asection *isec ATTRIBUTE_UNUSED,
					bfd *obfd ATTRIBUTE_UNUSED,
					asection *osec ATTRIBUTE_UNUSED,
					struct bfd_link_info *link_info ATTRIBUTE_UNUSED)
{
  return TRUE;
}
@


1.57
log
@	PR 12739
	* libbfd.c (bfd_get_8, bfd_get_signed_8): Use const cast.
	* bfd-in2.h: Regenerate.
@
text
@d1121 13
@


1.56
log
@	* libbfd.c (bfd_log2): Do return rounded up value.
	* elflink.c (bfd_elf_size_dynsym_hash_dynstr): Replace bfd_log2
	call with expanded old round down version of the function.
@
text
@d434 1
a434 1
.  (*(unsigned char *) (ptr) & 0xff)
d436 1
a436 1
.  (((*(unsigned char *) (ptr) & 0xff) ^ 0x80) - 0x80)
@


1.55
log
@	* bfd-in.h (bfd_get_section_limit): Don't use rawsize with output
	sections.
	* libbfd.c (_bfd_generic_get_section_contents): Likewise.
	(_bfd_generic_get_section_contents_in_window): Likewise.
	* section.c (bfd_get_section_contents): Likewise.
	* compress.c (bfd_get_full_section_contents): Likewise.
	* elf32-rx.c (rx_final_link): Ignore rawsize.
	* elf32-microblaze.c (microblaze_elf_relocate_section): Use correct
	bfd with bfd_get_section_limit.
	* elfxx-ia64.c (elfNN_ia64_choose_gp): Add "final" parameter.  Use
	os->size during final link.  Update callers.
	* bfd-in2.h: Regenerate.
@
text
@d982 4
a985 1
  while ((x = (x >> 1)) != 0)
d987 1
@


1.54
log
@	* bfd.c (bfd_perror): Flush stdout before and stderr after printing
	error.
	(_bfd_default_error_handler): Likewise.
	* elf.c (print_segment_map): Likewise.
	* libbfd.c (warn_deprecated): Likewise.
	* som.c (som_sizeof_headers): No need to do so here.
	* coff-i860.c: Replace use of printf for error messages with
	_bfd_error_handler.
	* coff-ppc.c: Likewise.
	* coff-sh.c: Likewise.
	* elf32-bfin.c: Likewise.
	* elf32-dlx.c: Likewise.
	* elf32-mep.c: Likewise.
	* elf32-v850.c: Likewise.
	* mach-o.c: Likewise.
	* pef.c: Likewise.
@
text
@d869 9
a877 1
  sz = section->rawsize ? section->rawsize : section->size;
d930 4
a933 1
  sz = section->rawsize ? section->rawsize : section->size;
@


1.53
log
@Add compressed debug section support to binutils and ld.

bfd/

2010-10-29  H.J. Lu  <hongjiu.lu@@intel.com>
	    Cary Coutant  <ccoutant@@google.com>

	* archive.c (bfd_openr_next_archived_file): Copy BFD_COMPRESS
	and BFD_DECOMPRESS.

	* bfd.c (BFD_COMPRESS): New.
	(BFD_DECOMPRESS): Likewise.
	(BFD_FLAGS_SAVED): Likewise.
	(bfd_preserve_save): Replace BFD_IN_MEMORY with BFD_FLAGS_SAVED.

	* compress.c (bfd_uncompress_section_contents): Removed.
	(get_uncompressed_size): New.
	(decompress_contents): Likewise.
	(bfd_compress_section_contents): Likewise.
	(bfd_get_full_section_contents): Likewise.
	(bfd_is_section_compressed): Likewise.
	(bfd_init_section_decompress_status): Likewise.
	(bfd_init_section_compress_status): Likewise.

	* dwarf2.c (dwarf_debug_sections): New.
	(dwarf_debug_section_enum): Likewise.
	(read_section): Remove section_name and compressed_section_name.
	Add dwarf_debug_section_enum.  Try compressed debug section.
	(read_indirect_string): Updated.
	(read_abbrevs): Likewise.
	(decode_line_info): Likewise.
	(read_debug_ranges): Likewise.
	(find_line): Updated.

	* ecoff.c (bfd_debug_section): Add compress_status and
	compressed_size.

	* elf.c (_bfd_elf_make_section_from_shdr): Call
	bfd_is_section_compressed to check if a DWARF debug section is
	compressed.  Call bfd_init_section_compress_status or
	bfd_init_section_decompress_status if needed.

	* elflink.c (elf_link_input_bfd): Replace bfd_get_section_contents
	with bfd_get_full_section_contents.
	* merge.c (_bfd_add_merge_section): Likewise.
	* reloc.c (bfd_generic_get_relocated_section_contents): Likewise.
	* simple.c (bfd_simple_get_relocated_section_contents): Likewise.

	* elfxx-target.h (TARGET_BIG_SYM): Allow BFD_COMPRESS and
	BFD_DECOMPRESS.
	(TARGET_LITTLE_SYM): Likewise.

	* libbfd-in.h (dwarf_debug_section): New.
	(dwarf_debug_sections): Likewise.

	* libbfd.c (_bfd_generic_get_section_contents): Issue an error
	when getting contents on compressed/decompressed section.

	* section.c (COMPRESS_SECTION_NONE): New.
	(COMPRESS_SECTION_DONE): Likewise.
	(DECOMPRESS_SECTION_SIZED): Likewise.
	(BFD_FAKE_SECTION): Add compress_status and compressed_size.
	(bfd_malloc_and_get_section): Replace bfd_get_section_contents
	with bfd_get_full_section_contents.

	* bfd-in2.h: Regenerated.
	* libbfd.h: Likewise.

binutils/

2010-10-29  H.J. Lu  <hongjiu.lu@@intel.com>

	* addr2line.c (process_file): Set BFD_DECOMPRESS.

	* objcopy.c (do_debug_sections): New.
	(OPTION_COMPRESS_DEBUG_SECTIONS): New.
	(OPTION_DECOMPRESS_DEBUG_SECTIONS): Likewise.
	(copy_options): Add OPTION_COMPRESS_DEBUG_SECTIONS and
	OPTION_DECOMPRESS_DEBUG_SECTIONS.
	(copy_usage): Add --compress-debug-sections and
	--decompress-debug-sections.
	(copy_file): Set BFD_COMPRESS or BFD_DECOMPRESS.
	(copy_section): Replace bfd_get_section_contents with
	bfd_get_full_section_contents.
	(copy_main): Handle OPTION_COMPRESS_DEBUG_SECTIONS and
	OPTION_DECOMPRESS_DEBUG_SECTIONS.  Check do_debug_sections to
	rename DWARF debug sections.

	* objdump.c (load_specific_debug_section): Replace
	bfd_get_section_contents with bfd_get_full_section_contents.
	Remove bfd_uncompress_section_contents.
	(dump_section): Replace bfd_get_section_contents with
	bfd_get_full_section_contents.
	(display_file): Set BFD_DECOMPRESS if needed.

	* readelf.c (uncompress_section_contents): Set buffer to NULL
	to indiate decompression failure.
	(load_specific_debug_section): Always call
	uncompress_section_contents.

	* doc/binutils.texi: Document --compress-debug-sections and
	--decompress-debug-sections.

binutils/testsuite/

2010-10-29  H.J. Lu  <hongjiu.lu@@intel.com>

	* binutils-all/compress.exp: New.
	* binutils-all/dw2-1.S: Likewise.
	* binutils-all/dw2-2.S: Likewise.
	* binutils-all/libdw2-compressed.out: Likewise.
	* binutils-all/libdw2.out: Likewise.

gas/

2010-10-29  H.J. Lu  <hongjiu.lu@@intel.com>

	* write.c (compress_debug): Optimize section flags check.

gas/testsuite/

2010-10-29  H.J. Lu  <hongjiu.lu@@intel.com>

	* elf/dwarf2-1.s: Replace .zdebug_abbrev section with
	.debug_abbrev section.
	* elf/dwarf2-2.3: Likewise.

	* elf/dwarf2-1.d: Pass --compress-debug-sections to assembler.
	Updated.
	* elf/dwarf2-2.d: Likewise.

	* gas/i386/i386.exp: Remove xfail on dw2-compress-2 and
	x86-64-dw2-compress-2.

ld/

2010-10-29  H.J. Lu  <hongjiu.lu@@intel.com>

	* ldfile.c (ldfile_try_open_bfd): Set BFD_DECOMPRESS after
	bfd_openr returns.
	* emultempl/elf32.em (gld${EMULATION_NAME}_try_needed): Likewise.

	* scripttempl/elf.sc: Include compressed DWARF debug sections.

ld/testsuite/

2010-10-29  H.J. Lu  <hongjiu.lu@@intel.com>

	* ld-elf/compress.exp: New.
	* ld-elf/compress1.s: Likewise.
	* ld-elf/compress1a.d: Likewise.
	* ld-elf/compress1b.d: Likewise.
	* ld-elf/compress1c.d: Likewise.
@
text
@d3 1
a3 1
   2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008, 2009
d1024 1
d1032 1
@


1.53.2.1
log
@backport from mainline
@
text
@d3 1
a3 1
   2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008, 2009, 2010, 2011
a1023 1
      fflush (stdout);
a1030 1
      fflush (stderr);
@


1.53.2.2
log
@	PR 12365
	PR 12613
	PR 12632
	PR 12739
	PR 12753
	PR 12760
	PR 12763
Apply fix from mainline along with assorted other small fixes.
@
text
@d434 1
a434 1
.  (*(const unsigned char *) (ptr) & 0xff)
d436 1
a436 1
.  (((*(const unsigned char *) (ptr) & 0xff) ^ 0x80) - 0x80)
d971 1
a971 4
  if (x <= 1)
    return result;
  --x;
  do
a972 1
  while ((x >>= 1) != 0);
@


1.52
log
@2010-08-18  Pedro Alves  <pedro@@codesourcery.com>

	PR corefile/8210

	bfd/
	* bfd-in2.h: Regenerate.
	* corefile.c (bfd_core_file_pid): New.

	* targets.c (BFD_JUMP_TABLE_CORE): Add NAME##_core_file_pid.
	(struct bfd_target) <_core_file_pid>: New.

	* libbfd-in.h (_bfd_nocore_core_file_pid): Declare.
	* libbfd.c (_bfd_nocore_core_file_pid): New.

	* elf-bfd.h (bfd_elf32_core_file_pid, bfd_elf64_core_file_pid):
	Declare.
	* elfcode.h (elf_core_file_pid): New define.
	* elfcore.h (elf_core_file_pid): New function.

	* elf.c (elfcore_make_pid): Rewrite.
	(elfcore_grok_prstatus): Only set core_pid if not set yet.
	(elfcore_grok_prstatus) [!HAVE_PRSTATUS_T_PR_WHO]: Fallback to
	getting the lwpid from prstat.pr_pid.

	* elf64-x86-64.c (elf64_x86_64_grok_prstatus): Write the LWPID to
	elf_tdata's core_lwpid instead of to core_pid.
	(elf64_x86_64_grok_psinfo): Extract the the main process's PID,
	and store it in elf_tdata's core_pid field.
	* elf32-i386.c (elf_i386_grok_prstatus): Write the LWPID to
	elf_tdata's core_lwpid instead of to core_pid.
	(elf_i386_grok_psinfo): Extract the the main process's PID, and
	store it in elf_tdata's core_pid field.

	* elf32-am33lin.c (elf32_am33lin_grok_prstatus): Write the LWPID
	to elf_tdata's core_lwpid instead of to core_pid.
	* elf32-arm.c (elf32_arm_nabi_grok_prstatus): Write the LWPID to
	elf_tdata's core_lwpid instead of to core_pid.
	* elf32-cris.c (cris_elf_grok_prstatus): Write the LWPID to
	elf_tdata's core_lwpid instead of to core_pid.
	* elf32-frv.c (elf32_frv_grok_prstatus): Write the LWPID to
	elf_tdata's core_lwpid instead of to core_pid.
	* elf32-hppa.c (elf32_hppa_grok_prstatus): Write the LWPID to
	elf_tdata's core_lwpid instead of to core_pid.
	* elf32-mips.c (elf32_mips_grok_prstatus): Write the LWPID to
	elf_tdata's core_lwpid instead of to core_pid.
	* elf32-ppc.c (ppc_elf_grok_prstatus): Write the LWPID to
	elf_tdata's core_lwpid instead of to core_pid.
	* elf32-s390.c (elf_s390_grok_prstatus): Write the LWPID to
	elf_tdata's core_lwpid instead of to core_pid.
	* elf32-score.c (s3_bfd_score_elf_grok_prstatus): Write the LWPID
	to elf_tdata's core_lwpid instead of to core_pid.
	* elf32-score7.c (s7_bfd_score_elf_grok_prstatus): Write the LWPID
	to elf_tdata's core_lwpid instead of to core_pid.
	* elf32-sh.c (elf32_shlin_grok_prstatus): Write the LWPID to
	elf_tdata's core_lwpid instead of to core_pid.
	* elf32-xtensa.c (elf_xtensa_grok_prstatus): Write the LWPID to
	elf_tdata's core_lwpid instead of to core_pid.
	* elf64-hppa.c (elf64_hppa_grok_prstatus): Write the LWPID to
	elf_tdata's core_lwpid instead of to core_pid.
	* elf64-mips.c (elf64_mips_grok_prstatus): Write the LWPID to
	elf_tdata's core_lwpid instead of to core_pid.
	* elf64-ppc.c (ppc64_elf_grok_prstatus): Write the LWPID to
	elf_tdata's core_lwpid instead of to core_pid.
	* elfn32-mips.c (elf32_mips_grok_prstatus): Write the LWPID to
	elf_tdata's core_lwpid instead of to core_pid.

	* plugin.c (bfd_plugin_core_file_pid): New function.
	* aout-target.h (MY_core_file_pid): Define.
	* aout-tic30.c (MY_core_file_pid, MY_core_file_p): New defines.
	* coff-rs6000.c (coff_core_file_pid): New define.
	(rs6000coff_vec, pmac_xcoff_vec): Use BFD_JUMP_TABLE_CORE.
	* coff64-rs6000.c (coff_core_file_pid): New define.
	(rs6000coff64_vec): Use BFD_JUMP_TABLE_CORE.
	(xcoff64_core_file_pid): New define.
	(aix5coff64_vec): Use BFD_JUMP_TABLE_CORE.
	* mach-o-target.c (bfd_mach_o_core_file_pid): New define.
	* aix386-core.c (aix386_core_file_pid): New define.
	* hppabsd-core.c (hppabsd_core_core_file_pid): New define.
	* hpux-core.c (hpux_core_core_file_pid): New define.
	* irix-core.c (irix_core_core_file_pid): New define.
	* lynx-core.c (lynx_core_file_pid): New define.
	* osf-core.c (osf_core_core_file_pid): New define.
	* ptrace-core.c (ptrace_unix_core_file_pid): New define.
	* sco5-core.c (sco5_core_file_pid): New define.
	* xcoff-target.h (coff_core_file_pid): New define.
	* netbsd-core.c (netbsd_core_core_file_pid): New define.

gdb/
2010-08-18  Pedro Alves  <pedro@@codesourcery.com>

	PR corefile/8210

	gdb/
	* corelow.c (add_to_thread_list): Don't use
	gdbarch_core_reg_section_encodes_pid.  Use bfd_core_file_pid.
	(get_core_register_section): Don't use
	gdbarch_core_reg_section_encodes_pid.

	* gdbarch.sh (core_reg_section_encodes_pid): Delete.
	* gdbarch.h, gdbarch.c: Regenerate.
	* amd64-sol2-tdep.c (amd64_sol2_init_abi): Don't set
	gdbarch_core_reg_section_encodes_pid.
	* i386-sol2-tdep.c (i386_sol2_init_abi): Ditto.
	* sparc-sol2-tdep.c (sparc32_sol2_init_abi): Ditto.
	* sparc64-sol2-tdep.c (sparc64_sol2_init_abi): Ditto.
@
text
@d860 9
@


1.51
log
@Add -Wshadow to the gcc command line options used when compiling the binutils.
Fix up all warnings generated by the addition of this switch.
@
text
@d153 10
@


1.50
log
@        Updated soruces in bfd/* to compile cleanly with -Wc++-compat.

        * bfd/aoutx.h: Add casts.
        * bfd/archive.c: Add casts.
        * bfd/archive64.c: Add casts.
        * bfd/archures.c: Add casts.
        * bfd/bfd-in2.h: Regenerated.
        * bfd/bfd.c: Add casts. (enum bfd_direction): Move out to top
        level.
        * bfd/bfdio.c: Add casts.
        * bfd/binary.c: Add casts.
        * bfd/cache.c (cache_bseek,cache_bread_1,cache_bwrite): Updated
        parameter to use enum value instead of int.
        * bfd/coffcode.h: Add casts.
        * bfd/coffgen.c: Add casts.
        * bfd/cofflink.c: Add casts.
        * bfd/compress.c: Add casts.
        * bfd/dwarf1.c: Add casts.
        * bfd/dwarf2.c: Add casts. (struct dwarf2_debug): Rename member
        bfd to bfd_ptr. Update code to use new name.
        * bfd/elf-attrs.c: Add casts.
        * bfd/elf-bfd.h (elf_link_virtual_table_entry): Gives name to
        anonymous struct. (union gotplt_union, struct
        elf_link_virtual_table_entry): Move to top level.
        * bfd/elf-eh-frame.c: Add casts.
        * bfd/elf-strtab.c: Add casts.
        * bfd/elf.c: Add casts. (_bfd_elm_make_Section_from_phdr): Change
        argument name from typename to type_name.
        * bfd/elf32-i386.c: Add casts.
        * bfd/elf64-x86-64.c: Add casts.
        * bfd/elfcode.h: Add casts.
        * bfd/elfcore.h: Add casts.
        * bfd/elflink.c: Add casts.
        * bfd/format.c: Add casts.
        * bfd/hash.c: Add casts.
        * bfd/ihex.c: Add casts.
        * bfd/libaout.h (enum aout_subformat, enum aout_magic): Move to
        top level.
        * bfd/libbfd.c: Add casts.
        * bfd/linker.c: Add casts.
        * bfd/merge.c: Add casts.
        * bfd/opncls.c: Add casts.
        * bfd/peXXigen.c: Add casts.
        * bfd/peicode.h: Add casts.
        * bfd/reloc.c: Add casts.
        * bfd/section.c: Add casts.
        * bfd/simple.c: Add casts.
        * bfd/srec.c: Add casts.
        * bfd/stabs.c: Add casts.
        * bfd/syms.c: Add casts.
        * bfd/targets.c: Add casts.
        * bfd/tekhex.c: Add casts.
        * bfd/verilog.c: Add casts.
        * include/bfdlink.h (struct bfd_link_hash_common_entry): Move to
        top level.
@
text
@d3 1
a3 1
   2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008
d807 1
a807 1
      int index = big_p ? bytes - i - 1 : i;
d809 1
a809 1
      addr[index] = data & 0xff;
d829 1
a829 1
      int index = big_p ? i : bytes - i - 1;
d831 1
a831 1
      data = (data << 8) | addr[index];
@


1.49
log
@PR 868
   * libbfd.c (bfd_realloc_or_free): New function.  Performs like
   bfd_realloc, but if the (re)allocation fails, the pointer is
   freed.
   * libbfd-in.h: Prototype.
   * libbfd.h: Regenerate.
   * bfdio.c (bfd_bwrite): Use the new function.
   (bfd_seek): Likewise.
   * bfdwin.c:(bfd_get_file_window): Likewise.
   * elf-strtab.c (_bfd_elf_strtab_add): Likewise.
   * elf32-ppc.c (ppc_elf_relax_section): Likewise.
   * elf32-xtensa.c (vsprintf_msg): Likewise.
   * mach-o.c (bfd_mach_o_core_fetch_environment): Likewise.
   * stabs.c (_bfd_link_seciton_stabs): Likewise.
   * vms-misc.c (_bfd_vms_get_record): Likewise.
   * vms-tir.c (check_section): Likewise.
   * vms.c (vms_new_section_hook): Likewise.
   * elf32-arm.c (elf32_arm_section_map_add): Check that the
   allocation of sec_data->map succeeded before using it.
   * elflink.c (elf_link_output_sym): Do not overwrite finfo->
   symshndxbuf until it is known that the reallocation succeeded.
@
text
@d552 1
a552 1
  const bfd_byte *addr = p;
d559 1
a559 1
  const bfd_byte *addr = p;
d566 1
a566 1
  const bfd_byte *addr = p;
d573 1
a573 1
  const bfd_byte *addr = p;
d580 1
a580 1
  bfd_byte *addr = p;
d588 1
a588 1
  bfd_byte *addr = p;
d596 1
a596 1
  const bfd_byte *addr = p;
d609 1
a609 1
  const bfd_byte *addr = p;
d622 1
a622 1
  const bfd_byte *addr = p;
d635 1
a635 1
  const bfd_byte *addr = p;
d649 1
a649 1
  const bfd_byte *addr = p;
d672 1
a672 1
  const bfd_byte *addr = p;
d696 1
a696 1
  const bfd_byte *addr = p;
d719 1
a719 1
  const bfd_byte *addr = p;
d741 1
a741 1
  bfd_byte *addr = p;
d751 1
a751 1
  bfd_byte *addr = p;
d762 1
a762 1
  bfd_byte *addr = p;
d780 1
a780 1
  bfd_byte *addr = p;
d797 1
a797 1
  bfd_byte *addr = p;
d817 1
a817 1
  const bfd_byte *addr = p;
@


1.49.26.1
log
@        Updated soruces in bfd/* to compile cleanly with -Wc++-compat.

        * bfd/aoutx.h: Add casts.
        * bfd/archive.c: Add casts.
        * bfd/archive64.c: Add casts.
        * bfd/archures.c: Add casts.
        * bfd/bfd-in2.h: Regenerated.
        * bfd/bfd.c: Add casts. (enum bfd_direction): Move out to top
        level.
        * bfd/bfdio.c: Add casts.
        * bfd/binary.c: Add casts.
        * bfd/cache.c (cache_bseek,cache_bread_1,cache_bwrite): Updated
        parameter to use enum value instead of int.
        * bfd/coffcode.h: Add casts.
        * bfd/coffgen.c: Add casts.
        * bfd/cofflink.c: Add casts.
        * bfd/compress.c: Add casts.
        * bfd/dwarf1.c: Add casts.
        * bfd/dwarf2.c: Add casts. (struct dwarf2_debug): Rename member
        bfd to bfd_ptr. Update code to use new name.
        * bfd/elf-attrs.c: Add casts.
        * bfd/elf-bfd.h (elf_link_virtual_table_entry): Gives name to
        anonymous struct. (union gotplt_union, struct
        elf_link_virtual_table_entry): Move to top level.
        * bfd/elf-eh-frame.c: Add casts.
        * bfd/elf-strtab.c: Add casts.
        * bfd/elf.c: Add casts. (_bfd_elm_make_Section_from_phdr): Change
        argument name from typename to type_name.
        * bfd/elf32-i386.c: Add casts.
        * bfd/elf64-x86-64.c: Add casts.
        * bfd/elfcode.h: Add casts.
        * bfd/elfcore.h: Add casts.
        * bfd/elflink.c: Add casts.
        * bfd/format.c: Add casts.
        * bfd/hash.c: Add casts.
        * bfd/ihex.c: Add casts.
        * bfd/libaout.h (enum aout_subformat, enum aout_magic): Move to
        top level.
        * bfd/libbfd.c: Add casts.
        * bfd/linker.c: Add casts.
        * bfd/merge.c: Add casts.
        * bfd/opncls.c: Add casts.
        * bfd/peXXigen.c: Add casts.
        * bfd/peicode.h: Add casts.
        * bfd/reloc.c: Add casts.
        * bfd/section.c: Add casts.
        * bfd/simple.c: Add casts.
        * bfd/srec.c: Add casts.
        * bfd/stabs.c: Add casts.
        * bfd/syms.c: Add casts.
        * bfd/targets.c: Add casts.
        * bfd/tekhex.c: Add casts.
        * bfd/verilog.c: Add casts.
        * include/bfdlink.h (struct bfd_link_hash_common_entry): Move to
        top level.
@
text
@d552 1
a552 1
  const bfd_byte *addr = (const bfd_byte *) p;
d559 1
a559 1
  const bfd_byte *addr = (const bfd_byte *) p;
d566 1
a566 1
  const bfd_byte *addr = (const bfd_byte *) p;
d573 1
a573 1
  const bfd_byte *addr = (const bfd_byte *) p;
d580 1
a580 1
  bfd_byte *addr = (bfd_byte *) p;
d588 1
a588 1
  bfd_byte *addr = (bfd_byte *) p;
d596 1
a596 1
  const bfd_byte *addr = (const bfd_byte *) p;
d609 1
a609 1
  const bfd_byte *addr = (const bfd_byte *) p;
d622 1
a622 1
  const bfd_byte *addr = (const bfd_byte *) p;
d635 1
a635 1
  const bfd_byte *addr = (const bfd_byte *) p;
d649 1
a649 1
  const bfd_byte *addr = (const bfd_byte *) p;
d672 1
a672 1
  const bfd_byte *addr = (const bfd_byte *) p;
d696 1
a696 1
  const bfd_byte *addr = (const bfd_byte *) p;
d719 1
a719 1
  const bfd_byte *addr = (const bfd_byte *) p;
d741 1
a741 1
  bfd_byte *addr = (bfd_byte *) p;
d751 1
a751 1
  bfd_byte *addr = (bfd_byte *) p;
d762 1
a762 1
  bfd_byte *addr = (bfd_byte *) p;
d780 1
a780 1
  bfd_byte *addr = (bfd_byte *) p;
d797 1
a797 1
  bfd_byte *addr = (bfd_byte *) p;
d817 1
a817 1
  const bfd_byte *addr = (const bfd_byte *) p;
@


1.48
log
@	* srec.c (srec_get_section_contents): Return immediately on
	count zero.  Check that offset and count are within section.
	* libbfd.c (_bfd_generic_get_section_contents): Check that
	offset + count does not overflow.
@
text
@d3 1
a3 1
   2000, 2001, 2002, 2003, 2004, 2005, 2007
d268 28
@


1.47
log
@Switch sources over to use the GPL version 3
@
text
@d823 2
a824 1
  if (offset + count > sz)
@


1.46
log
@
bfd/
	Many files: Include sysdep.h before bfd.h.
	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.
binutils/
	* bucumm.h: Split off host dependencies to..
	* sysdep.h: ..here.
	Many files: Include sysdep.h.  Remove duplicate headers and reorder.
	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.
ld/
	Many files: Include sysdep.h first.  Remove duplicate headers.
	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.
opcodes/
	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.
	* ns32k-dis.c: Include sysdep.h first.
@
text
@d11 1
a11 1
   the Free Software Foundation; either version 2 of the License, or
d21 2
a22 1
   Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA 02110-1301, USA.  */
@


1.45
log
@	* libbfd-in.h (_bfd_norelocs_get_reloc_upper_bound): Don't define,
	declare.
	(_bfd_norelocs_canonicalize_reloc): Likewise.
	* libbfd.h: Regenerate.
	* libbfd.c (_bfd_norelocs_get_reloc_upper_bound): New function.
	(_bfd_norelocs_canonicalize_reloc): Likewise.
	* binary.c (binary_bfd_reloc_type_lookup): Don't define.
	(binary_get_reloc_upper_bound, binary_canonicalize_reloc): Likewise.
	(binary_vec): Use _bfd_norelocs in BFD_JUMP_TABLE_RELOCS.
	* ihex.c: Similarly.
	* mach-o-target.c: Similarly.
	* mach-o.c: Similarly.
	* mmo.c: Similarly.
	* pef.c: Similarly.
	* ppcboot.c: Similarly.
	* srec.c: Similarly.
	* xsym.c: Similarly.
@
text
@d23 1
a24 1
#include "sysdep.h"
@


1.44
log
@bfd/
	* elf-bfd.h (_bfd_generic_match_sections_by_type): Don't define.
	* libbfd-in.h (_bfd_generic_match_sections_by_type): Delete.
	* libbfd.c (_bfd_generic_match_sections_by_type): Delete.
	* targets.c (bfd_match_sections_by_type): Don't define.
	(BFD_JUMP_TABLE_LINK): Remove _bfd_generic_match_sections_by_type.
	* coff-rs6000.c (rs6000coff_vec, pmac_xcoff_vec): Likewise.
	* coff64-rs6000.c (rs6000coff64_vec, aix5coff64_vec): Likewise.
	* bfd-in2.h: Regenerate.
	* libbfd.h: Regenerate.
ld/
	* ldlang.c (lang_output_section_find_by_flags): Add match_type param.
	Run two passes, first using match_type, second without.
	* ldlang.h (lang_match_sec_type_func): New typedef.
	(lang_output_section_find_by_flags): Update prototype.
	bfd_match_sections_by_type and lang_output_section_find_by_flags.
	* emultempl/pe.em (place_orphan): Likewise.
@
text
@d3 1
a3 1
   2000, 2001, 2002, 2003, 2004, 2005
d106 17
@


1.43
log
@bfd/

2005-10-23  H.J. Lu  <hongjiu.lu@@intel.com>

	PR ld/1487
	* elf-bfd.h (_bfd_generic_init_private_section_data): New.
	(_bfd_elf_init_private_section_data): New.

	* elf.c (elf_fake_sections): Don't set SHF_GROUP for
	relocatable link.
	(bfd_elf_set_group_contents): Don't handle relocatable link
	specially.
	(assign_section_numbers): If it isn't called by assembler,
	use the output section of elf_linked_to_section for
	SHF_LINK_ORDER.
	(_bfd_elf_init_private_section_data): New.
	(_bfd_elf_copy_private_section_data): Call it.

	* libbfd-in.h (_bfd_generic_init_private_section_data): New.

	* libbfd.c (_bfd_generic_init_private_section_data): New.

	* targets.c (BFD_JUMP_TABLE_COPY): Add
	_bfd_generic_init_private_section_data.
	(bfd_init_private_section_data): Likewise.

	* bfd-in2.h: Regenerated.
	* libbfd.h: Likewise.

ld/

2005-10-23  H.J. Lu  <hongjiu.lu@@intel.com>

	PR ld/1487
	* emultempl/elf32.em (gld${EMULATION_NAME}_place_orphan): Call
	bfd_match_sections_by_type to match section types.

	* ldlang.c (init_os): Take the input section. Call
	bfd_init_private_section_data if the input section isn't NULL.
	(exp_init_os): Pass NULL to init_os.
	(map_input_to_output_sections): Likewise.
	(lang_add_section): Pass the input section to init_os.

ld/testsuite/

2005-10-23  H.J. Lu  <hongjiu.lu@@intel.com>

	PR ld/1487
	* ld-ia64/tlspic.rd: Updated.
@
text
@a1037 9
_bfd_generic_match_sections_by_type (bfd *abfd ATTRIBUTE_UNUSED,
				     const asection *asec ATTRIBUTE_UNUSED,
				     bfd *bbfd ATTRIBUTE_UNUSED,
				     const asection *bsec ATTRIBUTE_UNUSED)
{
  return TRUE;
}

bfd_boolean
@


1.42
log
@bfd/

2005-10-15  H.J. Lu  <hongjiu.lu@@intel.com>

	PR ld/1467
	* elf-bfd.h (_bfd_elf_match_sections_by_type): New.
	(_bfd_generic_match_sections_by_type): New. Defined.

	* elf.c (_bfd_elf_match_sections_by_type): New.

	* libbfd-in.h (_bfd_generic_match_sections_by_type): New.

	* bfd-in2.h: Regenerated.
	* libbfd.h: Likewise.

	* libbfd.c (_bfd_generic_match_sections_by_type): New.

	* targets.c (BFD_JUMP_TABLE_LINK): Initialize
	_bfd_match_sections_by_type with
	_bfd_generic_match_sections_by_type.
	(bfd_target): Add _bfd_match_sections_by_type.

ld/

2005-10-15  H.J. Lu  <hongjiu.lu@@intel.com>

	PR ld/1467
	* emultempl/elf32.em: Include "elf-bfd.h".
	(gld${EMULATION_NAME}_place_orphan): Check section type and
	don't use section name for ELF input sections.

	* ld.texinfo: Document orphan section processing.

	* ldlang.c (lang_output_section_find_by_flags): Match section
	types by calling bfd_match_sections_by_type.
@
text
@d1045 10
@


1.41
log
@        * archive.c: Add missing SUBSECTION for documentation.
        * bfd.c: Likewise.
        * cache.c: Likewise.
        * corefile.c: Likewise.
        * format.c: Likewise.
        * init.c: Likewise.
        * libbfd.c: Likewise.
        * opncls.c: Likewise.
        * elf.c: Remove blank line after SECTION heading.
        * reloc.c: Change "howto manager" SECTION to a SUBSECTION.
@
text
@d1036 9
@


1.40
log
@	* libbfd-in.h (bfd_malloc2, bfd_realloc2, bfd_zmalloc2, bfd_alloc2,
	bfd_zalloc2): New prototypes.
	* bfd-in.h (HALF_BFD_SIZE_TYPE): Define.
	* libbfd.c (bfd_malloc2, bfd_realloc2, bfd_zmalloc2): New functions.
	* opncls.c (bfd_alloc2, bfd_zalloc2): New functions.
	* elf.c (bfd_elf_get_elf_syms, setup_group, assign_section_numbers,
	elf_map_symbols, map_sections_to_segments,
	assign_file_positions_for_segments, copy_private_bfd_data,
	swap_out_syms, _bfd_elf_slurp_version_tables): Use bfd_*alloc2
	where appropriate.
	* bfd-in2.h: Rebuilt.
	* libbfd.h: Rebuilt.

	* elf.c (_bfd_elf_print_private_bfd_data): Don't crash on bogus
	verdef or verneed section.
	(_bfd_elf_slurp_version_tables): Handle corrupt verdef and/or
	verneed sections gracefully.
	* elfxx-sparc.c (_bfd_sparc_elf_info_to_howto_ptr): Don't crash on
	bogus relocation values.
	* elf64-ppc.c (ppc64_elf_info_to_howto): Likewise.
	* elf64-s390.c (elf_s390_info_to_howto): Likewise.
	* elf32-s390.c (elf_s390_info_to_howto): Likewise.
	* elf64-x86-64.c (elf64_x86_64_info_to_howto): Likewise.
	* elfxx-ia64.c (lookup_howto): Likewise.
@
text
@d33 3
@


1.39
log
@bfd/

2005-06-06  H.J. Lu  <hongjiu.lu@@intel.com>

	PR 990
	* bfd.c (bfd_find_line): New.

	* dwarf2.c (comp_unit): Add variable_table.
	(funcinfo): Add file, line, and sec.
	(varinfo): New.
	(lookup_symbol_in_function_table): New.
	(lookup_symbol_in_variable_table): New.
	(scan_unit_for_functions): Renamed to ...
	(scan_unit_for_symbols): This. Handle DW_TAG_entry_point and
	DW_TAG_variable.
	(comp_unit_find_nearest_line): Updated.
	(comp_unit_find_line): New.
	(_bfd_dwarf2_find_line): New.

	* elf-bfd.h (_bfd_elf_find_line): New.
	(_bfd_generic_find_line): New. Defined.

	* elf.c (_bfd_elf_find_line): New.

	* libbfd-in.h (_bfd_dwarf2_find_line): New.
	(_bfd_generic_find_line): New.

	* bfd-in2.h: Regenerated.
	* libbfd.h: Likewise.

	* libbfd.c (_bfd_generic_find_line): New.

	* targets.c (BFD_JUMP_TABLE_SYMBOLS): Initialize _bfd_find_line
	with _bfd_generic_find_line.
	(bfd_target): Add _bfd_find_line.

binutils/

2005-06-06  H.J. Lu  <hongjiu.lu@@intel.com>

	PR 990
	* nm.c (print_symbol): Call bfd_find_line before
	bfd_find_nearest_line.
@
text
@d159 30
d213 34
d272 38
@


1.38
log
@Update the address and phone number of the FSF organization in the GPL notices
@
text
@d921 10
@


1.37
log
@Update the FSF address in the copyright/GPL notice
@
text
@d21 1
a21 1
   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02110-1301, USA.  */
@


1.36
log
@include/
	* xtensa-isa-internal.h (xtensa_length_decode_fn): Warning fix.
	* xtensa-isa.h (xtensa_insnbuf_to_chars): Likewise.
	(xtensa_insnbuf_from_chars, xtensa_isa_length_from_chars): Likewise.
include/coff/
	* xcoff.h (struct xcoff_loader_info): Warning fix.
bfd/
	* bfd-in.h (bfd_elf_bfd_from_remote_memory): Warning fix.
	* coff-m68k.c (bfd_m68k_coff_create_embedded_relocs): Likewise.
	* coff-rs6000.c (xcoff_write_armap_big): Warning fixes.  Remove
	useless assignments.
	(xcoff_write_archive_contents_big): Likewise.
	(_bfd_xcoff_put_ldsymbol_name): Likewise.
	* coff64-rs6000.c (_bfd_xcoff64_put_ldsymbol_name): Likewise.
	* coffgen.c (coff_write_symbols): Make "written" a bfd_vma.
	* cofflink.c (process_embedded_commands): Warning fixes.
	* cpu-arm.c: Delete unnecessary prototypes.  Convert to C90.
	Warning fixes.
	* dwarf2.c: Warning fixes.
	* elf-bfd.h: Likewise.
	* elf-eh-frame.c: Likewise.
	* elf-strtab.c: Likewise.
	* elf.c: Likewise.
	* elf32-m68k.c: Likewise.
	* elf32-ppc.c: Likewise.
	* elf32-sh-symbian.c: Likewise.
	* elf32-sh.c: Delete unnecessary prototypes.  Warning fixes.
	* elf64-sh64.c: Likewise.
	* peicode.h: Likewise.
	* elf64-mmix.c: Warning fixes.
	* elfcode.h: Likewise.
	* elfxx-mips.c: Likewise.
	* libbfd-in.h: Likewise.
	* libbfd.c: Likewise.
	* mach-o.c: Likewise.
	* merge.c: Likewise.
	* mmo.c: Likewise.
	* opncls.c: Likewise.
	* pef.c: Likewise.
	* srec.c: Likewise.
	* vms-hdr.c: Likewise.
	* vms-tir.c: Likewise.
	* xtensa-isa.c: Likewise.
	* xtensa-modules.c: Likewise.
	* xsym.c: Likewise.
	(pstrcmp): Use correct choice of string lengths.  Fix return value.
	(bfd_sym_module_name): Correct string length.
	* bfd-in2.h: Regenerate.
	* libbfd.h: Regenerate.
@
text
@d21 1
a21 1
   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
@


1.35
log
@Fix compile time warning by using an unsigned type.
@
text
@d3 1
a3 1
   2000, 2001, 2002, 2003, 2004
d868 1
a868 1
		      char *buf,
d873 1
a873 1
  int shift;
d881 1
a881 1
      byte = bfd_get_8 (abfd, (bfd_byte *) buf);
d896 2
a897 2
		    char *buf,
		    unsigned int * bytes_read_ptr)
d900 2
a901 2
  unsigned shift;
  int num_read;
d909 1
a909 1
      byte = bfd_get_8 (abfd, (bfd_byte *) buf);
d916 1
a916 1
  if ((shift < 8 * sizeof (result)) && (byte & 0x40))
@


1.34
log
@2005-01-17  H.J. Lu  <hongjiu.lu@@intel.com>

	* dwarf2.c (dwarf2_debug): Move info_ptr_unit to ...
	(comp_unit): Here.
	(read_unsigned_leb128): Removed.
	(read_signed_leb128): Removed.
	(find_abstract_instance_name): Updated.
	(parse_comp_unit): Accept info_ptr_unit.
	(_bfd_dwarf2_find_nearest_line): Set info_ptr_unit for each
	comp unit and pass it to parse_comp_unit.

	* elf-eh-frame.c (read_unsigned_leb128): Moved to ...
	(read_signed_leb128): Moved to ...
	* libbfd.c: Here.

	* libbfd-in.h (read_unsigned_leb128): New prototype.
	(read_signed_leb128): Likewise.
	* libbfd.h: Regenerated.
@
text
@d900 1
a900 1
  int shift;
@


1.33
log
@bfd/
	* bfd.c (_bfd_default_error_handler): Handle %A and %B.
	(bfd_archive_filename, bfd_get_section_ident): Delete.
	* ecofflink.c (bfd_ecoff_debug_accumulate_other): Don't call
	bfd_archive_filename.
	* elflink.c (elf_link_input_bfd): Don't use callbacks->error_handler
	to warn about symbols in discarded sections.  Use _bfd_error_handler.
	* aout-adobe.c (aout_adobe_callback): See below.
	* aout-cris.c (swap_ext_reloc_in): ..
	* coff-arm.c (find_thumb_glue, find_arm_glue,
	coff_arm_relocate_section, bfd_arm_process_before_allocation,
	coff_arm_merge_private_bfd_data, _bfd_coff_arm_set_private_flags,
	coff_arm_copy_private_bfd_data): ..
	* coff-i860.c (i860_reloc_processing): ..
	* coff-mcore.c (mcore_coff_unsupported_reloc,
	coff_mcore_relocate_section): ..
	* coff-ppc.c (coff_ppc_relocate_section): ..
	* coff-rs6000.c (xcoff_create_csect_from_smclas
	* coff-sh.c (sh_relax_section, sh_relax_delete_bytes,
	sh_swap_insns, sh_relocate_section): ..
	* coff-tic54x.c (tic54x_reloc_processing): ..
	* coff-tic80.c (coff_tic80_relocate_section): ..
	* coff64-rs6000.c (xcoff64_create_csect_from_smclas): ..
	* coffcode.h (styp_to_sec_flags, coff_slurp_line_table,
	coff_slurp_symbol_table, coff_classify_symbol,
	coff_slurp_reloc_table): ..
	* coffgen.c (_bfd_coff_read_string_table): ..
	* cofflink.c (coff_link_add_symbols, _bfd_coff_link_input_bfd,
	_bfd_coff_generic_relocate_section): ..
	* cpu-arm.c (bfd_arm_merge_machines): ..
	* cpu-sh.c (sh_merge_bfd_arch): ..
	* elf-hppa.h (elf_hppa_relocate_section): ..
	* elf.c (bfd_elf_string_from_elf_section, setup_group,
	_bfd_elf_setup_group_pointers, bfd_section_from_shdr,
	assign_section_numbers, _bfd_elf_symbol_from_bfd_symbol,
	copy_private_bfd_data, _bfd_elf_validate_reloc): ..
	* elf32-arm.h (find_thumb_glue, find_arm_glue,
	bfd_elf32_arm_process_before_allocation, elf32_thumb_to_arm_stub,
	elf32_arm_to_thumb_stub, elf32_arm_final_link_relocate,
	elf32_arm_relocate_section, elf32_arm_set_private_flags,
	elf32_arm_copy_private_bfd_data, elf32_arm_merge_private_bfd_data): ..
	* elf32-cris.c (cris_elf_relocate_section, cris_elf_check_relocs,
	cris_elf_merge_private_bfd_data
	* elf32-frv.c (elf32_frv_relocate_section, elf32_frv_check_relocs): ..
	* elf32-gen.c (elf32_generic_link_add_symbols): ..
	* elf32-hppa.c (hppa_add_stub, hppa_build_one_stub,
	elf32_hppa_check_relocs, get_local_syms, final_link_relocate,
	elf32_hppa_relocate_section): ..
	* elf32-i370.c (i370_elf_merge_private_bfd_data,
	i370_elf_check_relocs, i370_elf_relocate_section): ..
	* elf32-i386.c (elf_i386_info_to_howto_rel, elf_i386_check_relocs,
	elf_i386_relocate_section): ..
	* elf32-m32r.c (m32r_elf_relocate_section,
	m32r_elf_merge_private_bfd_data): ..
	* elf32-m68hc1x.c (m68hc12_add_stub,
	_bfd_m68hc11_elf_merge_private_bfd_data): ..
	* elf32-m68k.c (elf_m68k_relocate_section): ..
	* elf32-mcore.c (mcore_elf_unsupported_reloc,
	mcore_elf_relocate_section): ..
	* elf32-ppc.c (ppc_elf_merge_private_bfd_data, bad_shared_reloc,
	ppc_elf_check_relocs, ppc_elf_relocate_section,
	ppc_elf_begin_write_processing): ..
	* elf32-s390.c (elf_s390_check_relocs, invalid_tls_insn,
	elf_s390_relocate_section): ..
	* elf32-sh-symbian.c (sh_symbian_import_as,
	sh_symbian_process_embedded_commands,
	sh_symbian_relocate_section): ..
	* elf32-sh.c (sh_elf_relax_section, sh_elf_relax_delete_bytes,
	sh_elf_swap_insns, sh_elf_relocate_section, sh_elf_check_relocs,
	sh_elf_merge_private_data): ..
	* elf32-sparc.c (elf32_sparc_check_relocs,
	elf32_sparc_relocate_section,
	elf32_sparc_merge_private_bfd_data): ..
	* elf32-v850.c (v850_elf_check_relocs,
	v850_elf_merge_private_bfd_data): ..
	* elf32-xtensa.c (elf_xtensa_check_relocs,
	elf_xtensa_relocate_section, elf_xtensa_merge_private_bfd_data): ..
	* elf64-alpha.c (elf64_alpha_relax_with_lituse,
	elf64_alpha_relax_got_load, elf64_alpha_size_got_sections,
	elf64_alpha_relocate_section_r, elf64_alpha_relocate_section): ..
	* elf64-gen.c (elf64_generic_link_add_symbols): ..
	* elf64-ppc.c (ppc64_elf_merge_private_bfd_data, ppc_add_stub,
	ppc64_elf_check_relocs, ppc64_elf_edit_opd,
	ppc64_elf_relocate_section): ..
	* elf64-s390.c (elf_s390_check_relocs, invalid_tls_insn,
	elf_s390_relocate_section): ..
	* elf64-sh64.c (sh_elf64_relocate_section): ..
	* elf64-sparc.c (sparc64_elf_check_relocs,
	sparc64_elf_add_symbol_hook, sparc64_elf_relocate_section,
	sparc64_elf_merge_private_bfd_data): ..
	* elf64-x86-64.c (elf64_x86_64_check_relocs,
	elf64_x86_64_relocate_section): ..
	* elflink.c (_bfd_elf_add_default_symbol,
	_bfd_elf_link_assign_sym_version, elf_link_read_relocs_from_section,
	_bfd_elf_link_output_relocs, elf_link_add_object_symbols,
	bfd_elf_size_dynamic_sections, elf_link_output_extsym,
	elf_get_linked_section_vma, elf_fixup_link_order,
	bfd_elf_final_link, bfd_elf_gc_record_vtinherit,
	bfd_elf_gc_record_vtinherit, _bfd_elf_section_already_linked): ..
	* elfxx-ia64.c (elfNN_ia64_relax_section,
	elfNN_ia64_relocate_section, elfNN_ia64_merge_private_bfd_data): ..
	* elfxx-mips.c (mips_elf_perform_relocation,
	_bfd_mips_elf_check_relocs,
	_bfd_mips_elf_merge_private_bfd_data): ..
	* ieee.c (ieee_slurp_external_symbols): ..
	* ihex.c (ihex_bad_byte, ihex_scan, ihex_read_section): ..
	* libbfd.c (_bfd_generic_verify_endian_match): ..
	* linker.c (_bfd_generic_link_add_one_symbol,
	_bfd_generic_section_already_linked): ..
	* pdp11.c (translate_to_native_sym_flags): ..
	* pe-mips.c (coff_pe_mips_relocate_section): ..
	* peicode.h (pe_ILF_build_a_bfd): ..
	* srec.c (srec_bad_byte): ..
	* stabs.c (_bfd_link_section_stabs): ..
	* xcofflink.c (xcoff_link_add_symbols, xcoff_link_input_bfd): ..
	Replace all uses of bfd_archive_filename and bfd_get_section_ident
	with corresponding %B and %A in _bfd_error_handler format string.
	Replace occurrences of "fprintf (stderr," with _bfd_error_handler
	calls to use %A and %B.  Fix "against symbol .. from section" and
	similar error messages.  Combine multiple _bfd_error_handler calls
	where they were separated due to bfd_archive_filename deficiencies.
	* bfd-in2.h: Regenerate.
include/
	* bfdlink.h (struct bfd_link_callbacks): Remove "error_handler".
	(LD_DEFINITION_IN_DISCARDED_SECTION): Delete.
ld/
	* ldmain.c (link_callbacks): Remove "error_handler".
	* ldmisc.c: Include elf-bfd.h.
	(vfinfo): Sort comment.  Handle %A.  Use %A instead of
	bfd_get_section_indent.
	(error_handler): Delete.
	* ldmisc.h (error_handler): Delete declaration.
@
text
@d863 58
@


1.32
log
@bfd/
	* section.c (struct sec): Rename "_cooked_size" to "size".
	Rename "_raw_size" to "rawsize".
	(STD_SECTION): Adjust comments.
	(bfd_set_section_size, bfd_get_section_contents): Use size.
	(bfd_malloc_and_get_section): New function.
	* bfd-in.h (bfd_section_size, bfd_get_section_size): Use size.
	* coff-sh.c (sh_relax_section): Alloc coff_section_data struct early.
	Correctly free reloc and contents memory.
	* elf-eh-frame.c (_bfd_elf_discard_section_eh_frame): Delete FIXME
	and fake CIE now that we can shink section size to zero.
	(_bfd_elf_write_section_eh_frame): Likewise..
	* elf32-ppc.c (ppc_elf_relax_section): Delay reading section contents.
	* elf-m10300.c (mn10300_elf_final_link_relocate): Don't use
	_bfd_stab_section_offset.  Use _bfd_elf_section_offset.
	* stabs.c (_bfd_stab_section_offset_): Remove unused args and
	unneeded indirection.
	* elf.c (_bfd_elf_section_offset): .. and update call.
	* libbfd-in.h (_bfd_stab_section_offset): Update prototype.
	* libbfd.h: Regenerate.
	* bfd-in2.h: Regenerate.

	Replace occurrences of "_raw_size" and "_cooked_size" in most places
	with "size".  Set new "rawsize" for stabs, eh_frame, and SEC_MERGE
	sections.  Use "rawsize", if non-zero, for bfd_get_section_contents
	calls if the section might be a stabs, eh_frame, or SEC_MERGE section.
	Similarly use "rawsize", if non-zero, in reloc functions to validate
	reloc addresses.  Use new bfd_malloc_and_get_section in most places
	where bfd_get_section_contents was called.  Expand all occurrences of
	bfd_section_size and bfd_get_section_size.  Rename "raw_size" var in
	grok_prstatus and similar functions to "size".
	* aix386-core.c (aix386_core_file_p): ..
	* aix5ppc-core.c (xcoff64_core_p): ..
	* aout-adobe.c (aout_adobe_callback, aout_adobe_write_object_contents,
	aout_adobe_set_section_contents): ..
	* aout-target.h (callback): ..
	* aout-tic30.c (tic30_aout_callback, tic30_aout_final_link_relocate,
	MY_bfd_final_link): ..
	* aoutf1.h (sunos4_core_file_p): ..
	* aoutx.h (some_aout_object_p, adjust_o_magic, adjust_z_magic,
	adjust_n_magic, adjust_sizes_and_vmas, translate_from_native_sym_flags,
	final_link, aout_link_input_section): ..
	* binary.c (binary_object_p, binary_canonicalize_symtab,
	binary_set_section_contents): ..
	* bout.c (b_out_callback, b_out_write_object_contents,
	b_out_set_section_contents, b_out_bfd_relax_section,
	b_out_bfd_get_relocated_section_contents): ..
	* cisco-core.c (cisco_core_file_validate): ..
	* coff-alpha.c (alpha_ecoff_object_p,
	alpha_ecoff_get_relocated_section_conten, alpha_relocate_section): ..
	* coff-arm.c (coff_arm_relocate_section,
	bfd_arm_allocate_interworking_sections): ..
	* coff-h8300.c (h8300_reloc16_extra_cases,
	h8300_bfd_link_add_symbols): ..
	* coff-mips.c (mips_refhi_reloc, mips_gprel_reloc): ..
	* coff-ppc.c (coff_ppc_relocate_section, ppc_allocate_toc_section,
	ppc_bfd_coff_final_link): ..
	* coff-rs6000.c (xcoff_reloc_type_br, xcoff_ppc_relocate_section): ..
	* coff-sh.c (sh_relax_section, sh_relax_delete_bytes,
	sh_align_loads, sh_coff_get_relocated_section_contents): ..
	* coff64-rs6000.c (xcoff64_write_object_contents,
	xcoff64_reloc_type_br, xcoff64_ppc_relocate_section): ..
	* coffcode.h (coff_compute_section_file_positions,
	coff_write_object_contents): ..
	* coffgen.c (make_a_section_from_file, coff_write_symbols,
	coff_section_symbol, build_debug_section): ..
	* cofflink.c (coff_link_add_symbols, _bfd_coff_final_link,
	process_embedded_commands, _bfd_coff_link_input_bfd,
	_bfd_coff_write_global_sym): ..
	* cpu-arm.c (bfd_arm_update_notes, bfd_arm_get_mach_from_notes): ..
	* cpu-ns32k.c (do_ns32k_reloc, _bfd_ns32k_final_link_relocate): ..
	* dwarf1.c (parse_line_table, _bfd_dwarf1_find_nearest_line): ..
	* dwarf2.c (read_indirect_string, read_abbrevs, decode_line_info,
	_bfd_dwarf2_find_nearest_line): ..
	* ecoff.c (bfd_debug_section, ecoff_set_symbol_info,
	ecoff_compute_section_file_positions,
	_bfd_ecoff_write_object_contents, ecoff_indirect_link_order): ..
	* elf-eh-frame.c (_bfd_elf_discard_section_eh_frame,
	_bfd_elf_discard_section_eh_frame_hdr,
	_bfd_elf_maybe_strip_eh_frame_hdr, _bfd_elf_eh_frame_section_offset,
	_bfd_elf_write_section_eh_frame,
	_bfd_elf_write_section_eh_frame_hdr): ..
	* elf-hppa.h (elf_hppa_sort_unwind): ..
	* elf-m10200.c (mn10200_elf_relax_section,
	mn10200_elf_relax_delete_bytes,
	mn10200_elf_get_relocated_section_contents): ..
	* elf-m10300.c (_bfd_mn10300_elf_create_got_section,
	mn10300_elf_check_relocs, mn10300_elf_relax_section,
	mn10300_elf_relax_delete_bytes,
	mn10300_elf_get_relocated_section_contents,
	_bfd_mn10300_elf_adjust_dynamic_symbol,
	_bfd_mn10300_elf_discard_copies,
	_bfd_mn10300_elf_size_dynamic_sections,
	_bfd_mn10300_elf_finish_dynamic_sections): ..
	* elf.c (_bfd_elf_print_private_bfd_data, bfd_elf_get_bfd_needed_list,
	_bfd_elf_make_section_from_phdr, elf_fake_sections,
	bfd_elf_set_group_contents, map_sections_to_segments,
	elf_sort_sections, assign_file_positions_for_segments,
	SECTION_SIZE, copy_private_bfd_data,
	_bfd_elf_get_dynamic_reloc_upper_bound,
	_bfd_elf_canonicalize_dynamic_reloc, elfcore_maybe_make_sect,
	_bfd_elfcore_make_pseudosection, elfcore_grok_prstatus,
	elfcore_grok_lwpstatus, elfcore_grok_win32pstatus,
	elfcore_grok_note, elfcore_grok_nto_status, elfcore_grok_nto_gregs,
	_bfd_elf_rel_local_sym, _bfd_elf_get_synthetic_symtab): ..
	* elf32-arm.h (bfd_elf32_arm_allocate_interworking_sect,
	bfd_elf32_arm_process_before_allocation,
	elf32_arm_adjust_dynamic_symbol, allocate_dynrelocs,
	elf32_arm_size_dynamic_sections, elf32_arm_finish_dynamic_sections,
	elf32_arm_write_section): ..
	* elf32-cris.c (cris_elf_grok_prstatus,
	elf_cris_finish_dynamic_sections, cris_elf_gc_sweep_hook,
	elf_cris_adjust_gotplt_to_got, elf_cris_adjust_dynamic_symbol,
	cris_elf_check_relocs, elf_cris_size_dynamic_sections,
	elf_cris_discard_excess_dso_dynamics,
	elf_cris_discard_excess_program_dynamics): ..
	* elf32-d30v.c (bfd_elf_d30v_reloc, bfd_elf_d30v_reloc_21): ..
	* elf32-dlx.c (_bfd_dlx_elf_hi16_reloc): ..
	* elf32-frv.c (_frvfdpic_add_dyn_reloc, _frvfdpic_add_rofixup,
	_frv_create_got_section, _frvfdpic_assign_plt_entries,
	elf32_frvfdpic_size_dynamic_sections,
	elf32_frvfdpic_modify_segment_map,
	elf32_frvfdpic_finish_dynamic_sections): ..
	* elf32-h8300.c (elf32_h8_relax_section, elf32_h8_relax_delete_bytes,
	elf32_h8_get_relocated_section_contents): ..
	* elf32-hppa.c (hppa_build_one_stub, hppa_size_one_stub,
	elf32_hppa_adjust_dynamic_symbol, allocate_plt_static,
	allocate_dynrelocs, elf32_hppa_size_dynamic_sections, group_sections,
	elf32_hppa_size_stubs, elf32_hppa_set_gp, elf32_hppa_build_stubs,
	elf32_hppa_finish_dynamic_sections): ..
	* elf32-i370.c (i370_elf_adjust_dynamic_symbol,
	i370_elf_size_dynamic_sections, i370_elf_check_relocs,
	i370_elf_finish_dynamic_sections): ..
	* elf32-i386.c (elf_i386_grok_prstatus, elf_i386_adjust_dynamic_symbol,
	allocate_dynrelocs, elf_i386_size_dynamic_sections,
	elf_i386_relocate_section, elf_i386_finish_dynamic_sections): ..
	* elf32-i860.c (i860_howto_pc26_reloc, i860_howto_pc16_reloc,
	i860_howto_highadj_reloc, i860_howto_splitn_reloc): ..
	* elf32-ip2k.c (ip2k_is_switch_table_128,
	ip2k_relax_switch_table_128, ip2k_is_switch_table_256,
	ip2k_relax_switch_table_256, ip2k_elf_relax_section,
	adjust_all_relocations, ip2k_elf_relax_delete_bytes): ..
	* elf32-m32r.c (m32r_elf_do_10_pcrel_reloc, m32r_elf_hi16_reloc,
	m32r_elf_generic_reloc, m32r_elf_adjust_dynamic_symbol,
	allocate_dynrelocs, m32r_elf_size_dynamic_sections,
	m32r_elf_relocate_section, m32r_elf_finish_dynamic_sections,
	m32r_elf_relax_section, m32r_elf_relax_delete_bytes,
	m32r_elf_get_relocated_section_contents): ..
	* elf32-m68hc11.c (m68hc11_elf_build_one_stub,
	m68hc11_elf_size_one_stub, m68hc11_elf_relax_section,
	m68hc11_elf_relax_delete_bytes): ..
	* elf32-m68hc12.c (m68hc12_elf_build_one_stub,
	m68hc12_elf_size_one_stub): ..
	* elf32-m68hc1x.c (elf32_m68hc11_size_stubs,
	elf32_m68hc11_build_stubs, m68hc11_elf_special_reloc): ..
	* elf32-m68k.c (elf_m68k_check_relocs, elf_m68k_gc_sweep_hook,
	elf_m68k_adjust_dynamic_symbol, elf_m68k_size_dynamic_sections,
	elf_m68k_discard_copies, elf_m68k_finish_dynamic_sections): ..
	* elf32-mips.c (gprel32_with_gp, mips16_gprel_reloc,
	elf32_mips_grok_prstatus): ..
	* elf32-or32.c (or32_elf_consth_reloc): ..
	* elf32-ppc.c (ppc_elf_relax_section, ppc_elf_addr16_ha_reloc,
	elf_create_pointer_linker_section, ppc_elf_create_linker_section,
	ppc_elf_additional_program_headers, ppc_elf_adjust_dynamic_symbol,
	allocate_dynrelocs, ppc_elf_size_dynamic_sections,
	ppc_elf_finish_dynamic_sections, ppc_elf_grok_prstatus,
	ppc_elf_final_write_processing): ..
	* elf32-s390.c (s390_elf_ldisp_reloc, elf_s390_adjust_dynamic_symbol,
	allocate_dynrelocs, elf_s390_size_dynamic_sections,
	elf_s390_finish_dynamic_sections, elf_s390_grok_prstatus): ..
	* elf32-sh.c (sh_elf_reloc_loop, sh_elf_relax_section,
	sh_elf_relax_delete_bytes, sh_elf_align_loads,
	sh_elf_adjust_dynamic_symbol, allocate_dynrelocs,
	sh_elf_size_dynamic_sections, sh_elf_get_relocated_section_contents,
	sh_elf_finish_dynamic_sections, elf32_shlin_grok_prstatus): ..
	* elf32-sh64-com.c (sh64_address_in_cranges,
	sh64_get_contents_type): ..
	* elf32-sh64.c (sh64_find_section_for_address,
	sh64_elf_final_write_processing): ..
	* elf32-sparc.c (sparc_elf_wdisp16_reloc, sparc_elf_hix22_reloc,
	sparc_elf_lox10_reloc, elf32_sparc_adjust_dynamic_symbol,
	allocate_dynrelocs, elf32_sparc_size_dynamic_sections,
	elf32_sparc_relocate_section, elf32_sparc_finish_dynamic_sections): ..
	* elf32-v850.c (v850_elf_reloc, v850_elf_relax_section): ..
	* elf32-vax.c (elf_vax_check_relocs, elf_vax_adjust_dynamic_symbol,
	elf_vax_size_dynamic_sections, elf_vax_discard_copies,
	elf_vax_instantiate_got_entries, elf_vax_relocate_section,
	elf_vax_finish_dynamic_sections): ..
	* elf32-xstormy16.c (xstormy16_elf_24_reloc,
	xstormy16_elf_check_relocs, xstormy16_relax_plt_check,
	xstormy16_elf_relax_section, xstormy16_elf_always_size_sections,
	xstormy16_elf_finish_dynamic_sections): ..
	* elf32-xtensa.c (xtensa_read_table_entries,
	elf_xtensa_allocate_got_size, elf_xtensa_allocate_local_got_size,
	elf_xtensa_size_dynamic_sections, elf_xtensa_do_reloc,
	bfd_elf_xtensa_reloc, elf_xtensa_relocate_section,
	elf_xtensa_combine_prop_entries, elf_xtensa_finish_dynamic_sections,
	elf_xtensa_discard_info_for_section, elf_xtensa_grok_prstatus,
	get_relocation_opcode, retrieve_contents, find_relaxable_sections,
	collect_source_relocs, is_resolvable_asm_expansion, remove_literals,
	relax_section, shrink_dynamic_reloc_sections, relax_property_section,
	xtensa_callback_required_dependence): ..
	* elf64-alpha.c (elf64_alpha_reloc_gpdisp, elf64_alpha_relax_section,
	elf64_alpha_check_relocs, elf64_alpha_adjust_dynamic_symbol,
	elf64_alpha_calc_got_offsets_for_symbol, elf64_alpha_calc_got_offsets,
	elf64_alpha_size_plt_section, elf64_alpha_size_plt_section_1,
	elf64_alpha_always_size_sections, elf64_alpha_calc_dynrel_sizes,
	elf64_alpha_size_rela_got_section, elf64_alpha_size_rela_got_1,
	elf64_alpha_size_dynamic_sections, elf64_alpha_emit_dynrel,
	elf64_alpha_finish_dynamic_sections, elf64_alpha_final_link): ..
	* elf64-hppa.c (allocate_dynrel_entries,
	elf64_hppa_size_dynamic_sections,
	elf64_hppa_finish_dynamic_sections): ..
	* elf64-mips.c (mips_elf64_gprel32_reloc, mips16_gprel_reloc,
	mips_elf64_canonicalize_dynamic_reloc, mips_elf64_slurp_reloc_table,
	elf64_mips_grok_prstatus): ..
	* elf64-mmix.c (mmix_elf_perform_relocation, mmix_elf_reloc,
	mmix_elf_relocate_section, mmix_elf_final_link,
	mmix_set_relaxable_size, _bfd_mmix_after_linker_allocation,
	mmix_elf_relax_section, mmix_elf_get_section_contents): ..
	* elf64-ppc.c (ppc64_elf_object_p, ppc64_elf_grok_prstatus,
	ppc64_elf_check_relocs, ppc64_elf_func_desc_adjust,
	ppc64_elf_adjust_dynamic_symbol, ppc64_elf_edit_opd,
	allocate_dynrelocs, ppc64_elf_size_dynamic_sections,
	ppc_build_one_stub, ppc_size_one_stub, ppc64_elf_next_toc_section,
	toc_adjusting_stub_needed, group_sections, ppc64_elf_size_stubs,
	ppc64_elf_build_stubs, ppc64_elf_relocate_section,
	ppc64_elf_finish_dynamic_sections): ..
	* elf64-s390.c (s390_elf_ldisp_reloc, elf_s390_adjust_dynamic_symbol,
	allocate_dynrelocs, elf_s390_size_dynamic_sections,
	elf_s390_finish_dynamic_sections): ..
	* elf64-sh64.c (sh_elf64_get_relocated_section_contents,
	sh_elf64_check_relocs, sh64_elf64_adjust_dynamic_symbol,
	sh64_elf64_discard_copies, sh64_elf64_size_dynamic_sections,
	sh64_elf64_finish_dynamic_sections): ..
	* elf64-sparc.c (sparc64_elf_slurp_reloc_table, init_insn_reloc,
	sparc64_elf_check_relocs, sparc64_elf_adjust_dynamic_symbol,
	sparc64_elf_size_dynamic_sections, sparc64_elf_relocate_section,
	sparc64_elf_finish_dynamic_symbol,
	sparc64_elf_finish_dynamic_sections): ..
	* elf64-x86-64.c (elf64_x86_64_grok_prstatus,
	elf64_x86_64_adjust_dynamic_symbol, allocate_dynrelocs,
	elf64_x86_64_size_dynamic_sections, elf64_x86_64_relocate_section,
	elf64_x86_64_finish_dynamic_sections): ..
	* elfarm-nabi.c (elf32_arm_nabi_grok_prstatus): ..
	* elfcode.h (elf_slurp_reloc_table): ..
	* elflink.c (_bfd_elf_create_got_section, elf_add_dt_needed_tag,
	elf_finalize_dynstr, elf_link_add_object_symbols,
	bfd_elf_size_dynamic_sections, elf_link_sort_relocs,
	elf_link_input_bfd, bfd_elf_final_link, bfd_elf_discard_info): ..
	* elfn32-mips.c (gprel32_with_gp, mips16_gprel_reloc,
	elf32_mips_grok_prstatus): ..
	* elfxx-ia64.c (elfNN_ia64_relax_section, allocate_dynrel_entries,
	elfNN_ia64_size_dynamic_sections, elfNN_ia64_install_dyn_reloc,
	elfNN_ia64_choose_gp, elfNN_ia64_final_link,
	elfNN_ia64_finish_dynamic_sections): ..
	* elfxx-mips.c (mips_elf_create_procedure_table,
	mips_elf_check_mips16_stubs, _bfd_mips_elf_gprel16_with_gp,
	_bfd_mips_elf_hi16_reloc, _bfd_mips_elf_generic_reloc,
	mips_elf_global_got_index, mips_elf_multi_got,
	mips_elf_create_compact_rel_section, mips_elf_calculate_relocation,
	mips_elf_allocate_dynamic_relocations,
	mips_elf_create_dynamic_relocation, _bfd_mips_elf_fake_sections,
	_bfd_mips_relax_section, _bfd_mips_elf_adjust_dynamic_symbol,
	_bfd_mips_elf_always_size_sections,
	_bfd_mips_elf_size_dynamic_sections,
	_bfd_mips_elf_finish_dynamic_symbol,
	_bfd_mips_elf_finish_dynamic_sections,
	_bfd_mips_elf_modify_segment_map, _bfd_mips_elf_discard_info,
	_bfd_mips_elf_write_section, _bfd_mips_elf_set_section_contents,
	_bfd_elf_mips_get_relocated_section_contents,
	_bfd_mips_elf_final_link, _bfd_mips_elf_merge_private_bfd_data): ..
	* hp300hpux.c (callback): ..
	* hppabsd-core.c (make_bfd_asection): ..
	* hpux-core.c (make_bfd_asection): ..
	* i386linux.c (linux_link_create_dynamic_sections,
	bfd_i386linux_size_dynamic_sections, linux_finish_dynamic_link): ..
	* i386msdos.c (msdos_write_object_contents): ..
	* i386os9k.c (os9k_callback, os9k_write_object_contents,
	os9k_set_section_contents): ..
	* ieee.c (parse_expression, ieee_slurp_external_symbols,
	ieee_slurp_sections, ieee_slurp_debug, ieee_slurp_section_data,
	ieee_write_section_part, do_with_relocs, do_as_repeat,
	do_without_relocs, ieee_write_debug_part, init_for_output,
	ieee_set_section_contents): ..
	* ihex.c (ihex_scan, ihex_read_section, ihex_get_section_contents): ..
	* irix-core.c (do_sections, make_bfd_asection): ..
	* libaout.h (aout_section_merge_with_text_p): ..
	* libbfd.c (_bfd_generic_get_section_contents,
	_bfd_generic_get_section_contents_in_window): ..
	* linker.c (default_indirect_link_order): ..
	* lynx-core.c (make_bfd_asection): ..
	* m68klinux.c (linux_link_create_dynamic_sections,
	bfd_m68klinux_size_dynamic_sections, linux_finish_dynamic_link): ..
	* mach-o.c (bfd_mach_o_make_bfd_section,
	bfd_mach_o_scan_read_dylinker, bfd_mach_o_scan_read_dylib,
	bfd_mach_o_scan_read_thread, bfd_mach_o_scan_read_symtab,
	bfd_mach_o_scan_read_segment): ..
	* merge.c (_bfd_add_merge_section, record_section, merge_strings,
	_bfd_merge_sections): ..
	* mmo.c (mmo_find_sec_w_addr, mmo_get_spec_section, mmo_get_loc,
	mmo_map_set_sizes, mmo_canonicalize_symtab,
	mmo_internal_write_section, mmo_write_object_contents): ..
	* netbsd-core.c (netbsd_core_file_p): ..
	* nlm32-alpha.c (nlm_alpha_read_reloc, nlm_alpha_write_import,
	nlm_alpha_set_public_section): ..
	* nlm32-ppc.c (nlm_powerpc_read_reloc, nlm_powerpc_write_reloc): ..
	* nlm32-sparc.c (nlm_sparc_write_import): ..
	* nlmcode.h (add_bfd_section, nlm_swap_auxiliary_headers_in,
	nlm_compute_section_file_positions): ..
	* oasys.c (oasys_object_p, oasys_slurp_section_data,
	oasys_write_sections, oasys_write_data, oasys_set_section_contents): ..
	* opncls.c (get_debug_link_info): ..
	* osf-core.c (make_bfd_asection): ..
	* pdp11.c (some_aout_object_p, adjust_o_magic, adjust_z_magic,
	adjust_n_magic, adjust_sizes_and_vmas, squirt_out_relocs,
	final_link, aout_link_input_section): ..
	* peXXigen.c (_bfd_XXi_swap_sym_in, _bfd_XXi_swap_aouthdr_out,
	pe_print_idata, pe_print_edata, pe_print_pdata, pe_print_reloc): ..
	* pef.c (bfd_pef_make_bfd_section, bfd_pef_print_loader_section,
	bfd_pef_scan_start_address, bfd_pef_parse_symbols): ..
	* ppcboot.c (ppcboot_object_p, ppcboot_canonicalize_symtab): ..
	* ptrace-core.c (ptrace_unix_core_file_p): ..
	* reloc.c (bfd_perform_relocation, bfd_install_relocation,
	_bfd_final_link_relocate, bfd_generic_relax_section,
	bfd_generic_get_relocated_section_contents): ..
	* reloc16.c (bfd_coff_reloc16_relax_section,
	bfd_coff_reloc16_get_relocated_section_c): ..
	* riscix.c (riscix_some_aout_object_p): ..
	* rs6000-core.c (read_hdr, make_bfd_asection): ..
	* sco5-core.c (make_bfd_asection): ..
	* simple.c (bfd_simple_get_relocated_section_contents): ..
	* som.c (som_object_setup, setup_sections, som_prep_headers,
	som_write_fixups, som_begin_writing, bfd_section_from_som_symbol,
	som_set_reloc_info, som_get_section_contents,
	som_bfd_link_split_section): ..
	* sparclinux.c (linux_link_create_dynamic_sections,
	bfd_sparclinux_size_dynamic_sections, linux_finish_dynamic_link): ..
	* srec.c (srec_scan, srec_read_section, srec_get_section_contents): ..
	* stabs.c (_bfd_link_section_stabs, _bfd_discard_section_stabs,
	_bfd_write_stab_strings, _bfd_stab_section_offset): ..
	* sunos.c (sunos_read_dynamic_info, sunos_create_dynamic_sections,
	bfd_sunos_size_dynamic_sections, sunos_scan_std_relocs,
	sunos_scan_ext_relocs, sunos_scan_dynamic_symbol,
	sunos_write_dynamic_symbol, sunos_check_dynamic_reloc,
	sunos_finish_dynamic_link): ..
	* syms.c (_bfd_stab_section_find_nearest_line): ..
	* tekhex.c (first_phase, tekhex_set_section_contents,
	tekhex_write_object_contents): ..
	* trad-core.c (trad_unix_core_file_p): ..
	* versados.c (process_esd, process_otr, process_otr): ..
	* vms-gsd.c (_bfd_vms_slurp_gsd, _bfd_vms_write_gsd): ..
	* vms-misc.c (add_new_contents): ..
	* vms-tir.c (check_section, new_section, _bfd_vms_write_tir): ..
	* vms.c (vms_set_section_contents): ..
	* xcofflink.c (xcoff_get_section_contents, xcoff_link_add_symbols,
	xcoff_sweep, bfd_xcoff_size_dynamic_sections, xcoff_build_ldsyms,
	_bfd_xcoff_bfd_final_link, xcoff_link_input_bfd): ..
	* xsym.c (bfd_sym_scan): .. See above.

binutils/
	* objcopy.c (copy_section): Don't set _cooked_size.

include/
	* bfdlink.h (struct bfd_link_order): Update comment.

ld/
	* ldlang.c (print_output_section_statement): Don't print size before
	relaxation.
	(IGNORE_SECTION): Remove bfd arg.  Update all callers.

	* ldexp.c (fold_name): .. See below.
	* ldlang.c (section_already_linked, print_output_section_statement,
	print_input_section, insert_pad, size_input_section,
	lang_check_section_addresses, lang_size_sections_1,
	lang_size_sections, lang_do_assignments_1, lang_set_startof,
	lang_one_common, lang_reset_memory_regions, lang_process,
	lang_abs_symbol_at_end_of, lang_do_version_exports_section): ..
	* ldwrite.c (build_link_order, clone_section, ds, split_sections): ..
	* pe-dll.c (process_def_file, generate_reloc): ..
	* emultempl/elf32.em (gld${EMULATION_NAME}_find_statement_assignment,
	gld${EMULATION_NAME}_before_allocation): ..
	* emultempl/mmix-elfnmmo.em (mmix_after_allocation): ..
	* emultempl/sh64elf.em (sh64_elf_${EMULATION_NAME}_before_allocation,
	sh64_elf_${EMULATION_NAME}_after_allocation): ..
	* emultempl/sunos.em (gld${EMULATION_NAME}_before_allocation): ..
	* emultempl/xtensaelf.em (ld_assign_relative_paged_dot,
	ld_local_file_relocations_fit, ld_xtensa_insert_page_offsets): Use
	"size" instead of "_raw_size" and "_cooked_size".  Expand
	bfd_section_size macro invocations.
@
text
@d826 1
a826 1
	msg = _("%s: compiled for a big endian system and target is little endian");
d828 1
a828 1
	msg = _("%s: compiled for a little endian system and target is big endian");
d830 1
a830 1
      (*_bfd_error_handler) (msg, bfd_archive_filename (ibfd));
@


1.31
log
@	* bfd-in.h (bfd_int64_t, bfd_uint64_t): New types.
	(BFD_HOST_64_BIT, BFD_HOST_U_64_BIT): Don't define here.
	(bfd_getb64, bfd_getl64, bfd_get_bits): Return bfd_uint64_t.
	(bfd_getb_signed_64, bfd_getl_signed_64): Return bfd_int64_t.
	(bfd_putb64, bfd_putl64, bfd_put_bits): Accept bfd_uint64_t.
	* configure.in (HOST_U_64BIT_TYPE): Set when sizeof long is 8.
	(BFD_HOST_64_BIT_DEFINED, BFD_HOST_64_BIT, BFD_HOST_U_64_BIT): Set
	when using long.
	* libbfd.c (EIGHT_GAZILLION, COERCE64): Use bfd_int64_t.
	(bfd_getb64): Return bfd_uint64_t.  Enable when BFD_HOST_64_BIT.
	(bfd_getl64, bfd_getb_signed_64, bfd_getl_signed_64): Likewise.
	(bfd_putb64): Accept bfd_uint64_t.  Enable when BFD_HOST_64_BIT.
	(bfd_putl64, bfd_put_bits, bfd_get_bits): Likewise.
	* dwarf2.c (struct attribute): Use bfd_int64_t and bfd_uint64_t.
	(read_8_bytes, read_indirect_string, read_address): Likewise.
	(read_abbrevs, parse_comp_unit): Likewise.
	* targets.c (struct bfd_target): Likewise.
	* aix386-core.c (NO_GET64, NO_PUT64, NO_GETS64): Define and use.
	* hppabsd-core.c: Likewise.  Formatting.
	* hpux-core.c: Likewise.
	* irix-core.c: Likewise.
	* netbsd-core.c: Likewise.
	* osf-core.c: Likewise.
	* ptrace-core.c: Likewise.
	* sco5-core.c: Likewise.
	* trad-core.c: Likewise.
	* configure: Regenerate.
	* bfd-in2.h: Regenerate.
@
text
@d695 1
d699 2
a700 1
  if (offset + count > section->_raw_size)
d722 2
d751 2
a752 1
  if (offset + count > section->_raw_size
@


1.30
log
@	* bfd-in.h (bfd_getb64, bfd_getl64): Replace bfd_byte* with void*.
	(bfd_getb32, bfd_getl32, bfd_getb16, bfd_getl16): Likewise.
	(bfd_getb_signed_64, bfd_getl_signed_64): Likewise.
	(bfd_getb_signed_32, bfd_getl_signed_32): Likewise.
	(bfd_getb_signed_16, bfd_getl_signed_16): Likewise.
	(bfd_putb64, bfd_putl64, bfd_putb32, bfd_putl32): Likewise.
	(bfd_putb16, bfd_putl16, bfd_get_bits, bfd_put_bits): Likewise.
	* libbfd.c: Likewise in function definitions.
	(bfd_put_8): Mask with 0xff rather than casting to char.
	(bfd_putb16, bfd_putl16, bfd_putb32, bfd_putl32): Likewise.
	(bfd_putb64, bfd_putl64, bfd_put_bits): Likewise.
	(H_PUT_64, H_PUT_32, H_PUT_16, H_PUT_8): Remove casts, simplify.
	(H_PUT_S64, H_PUT_S32, H_PUT_S16, H_PUT_S8): Likewise.
	(H_GET_64, H_GET_32, H_GET_16, H_GET_8): Likewise.
	(H_GET_S64, H_GET_S32, H_GET_S16, H_GET_S8): Likewise.
	* libaout.h (H_PUT_64 H_PUT_32, H_PUT_16): Remove casts, simplify.
	(H_PUT_S64, H_PUT_S32, H_PUT_S16): Likewise.
	(H_GET_64, H_GET_32, H_GET_16): Likewise.
	(H_GET_S64, H_GET_S32, H_GET_S16): Likewise.
	* archive.c (do_slurp_coff_armap): Update swap prototype.
	* coff-tic54x.c (tic54x_getl32): Replace bfd_byte* with void*.
	(tic54x_getl_signed_32): Likewise.
	(tic54x_putl32): Likewise.  Mask with 0xff rather than casting to char.
	* mach-o.c (bfd_mach_o_read_header): Update get32 prototype.
	* pdp11.c (bfd_getp32): Make static, replace bfd_byte* with void*.
	(bfd_getp_signed_32, bfd_putp32): Likewise.
	* targets.c (struct bfd_target): Use void* in place of bfd_byte* for
	bfd_getx64, bfd_getx_signed_64, bfd_putx64, bfd_getx32,
	bfd_getx_signed_32, bfd_putx32, bfd_getx16, bfd_getx_signed_16,
	bfd_putx16, bfd_h_getx64, bfd_h_getx_signed_64, bfd_h_putx64,
	bfd_h_getx32, bfd_h_getx_signed_32, bfd_h_putx32, bfd_h_getx16,
	bfd_h_getx_signed_16, bfd_h_putx16.
	* aix386-core.c (NO_GET, NO_GETS, NO_PUT): Update prototypes.
	* hppabsd-core.c: Similarly.  Rename NO_SIGNED_GET to NO_GETS.
	* hpux-core.c: Likewise.
	* irix-core.c: Likewise.
	* netbsd-core.c: Likewise.
	* osf-core.c: Likewise.
	* ptrace-core.c: Likewise.
	* sco5-core.c: Likewise.
	* trad-core.c: Likewise.
	* bfd-in2.h: Regenerate.
@
text
@d394 1
a394 1
#define EIGHT_GAZILLION ((BFD_HOST_64_BIT) 1 << 63)
d396 1
a396 1
  (((bfd_signed_vma) (x) ^ EIGHT_GAZILLION) - EIGHT_GAZILLION)
d494 1
a494 1
bfd_vma
d497 1
a497 1
#ifdef BFD64
d499 1
a499 1
  bfd_vma v;
d517 1
a517 1
bfd_vma
d520 1
a520 1
#ifdef BFD64
d522 1
a522 1
  bfd_vma v;
d541 1
a541 1
bfd_signed_vma
d544 1
a544 1
#ifdef BFD64
d546 1
a546 1
  bfd_vma v;
d564 1
a564 1
bfd_signed_vma
d567 1
a567 1
#ifdef BFD64
d569 1
a569 1
  bfd_vma v;
d608 1
a608 1
bfd_putb64 (bfd_vma data ATTRIBUTE_UNUSED, void *p ATTRIBUTE_UNUSED)
d610 1
a610 1
#ifdef BFD64
d626 1
a626 1
bfd_putl64 (bfd_vma data ATTRIBUTE_UNUSED, void *p ATTRIBUTE_UNUSED)
d628 1
a628 1
#ifdef BFD64
d644 1
a644 1
bfd_put_bits (bfd_vma data, void *p, int bits, bfd_boolean big_p)
d663 1
a663 1
bfd_vma
d667 1
a667 1
  bfd_vma data;
@


1.29
log
@	* aout-adobe.c (aout_adobe_set_section_contents): Constify location.
	* aoutx.h (NAME(aout,set_section_contents)): Ditto.
	* bfd-in2.h: Regenerate.
	* binary.c (binary_set_section_contents): Ditto.
	* bout.c (b_out_set_section_contents): Ditto.
	* coff-tic54x.c (tic54x_set_section_contents): Ditto.
	* coffcode.h (coff_set_section_contents): Ditto.
	* ecoff.c (_bfd_ecoff_set_section_contents): Ditto.
	* elf-bfd.h (_bfd_elf_set_section_contents): Ditto.
	* elf.c (_bfd_elf_set_section_contents): Ditto.
	* elfxx-mips.c (_bfd_mips_elf_set_section_contents): Ditto.
	* elfxx-mips.h (_bfd_mips_elf_set_section_contents): Ditto.
	* i386msdos.c (msdos_set_section_contents): Ditto.
	* ieee.c (ieee_set_section_contents): Ditto.
	* ihex.c (ihex_set_section_contents): Ditto.
	* libaout.h (NAME(aout,set_section_contents)): Ditto.
	* libbfd-in.h (_bfd_nowrite_set_section_contents): Ditto.
	(_bfd_generic_set_section_contents): Ditto.
	* libbfd.h: Regenerate.
	* libbfd.c (_bfd_generic_set_section_contents): Ditto.
	* libecoff.h (_bfd_ecoff_set_section_contents): Ditto.
	* libnlm.h (nlmNAME(set_section_contents)): Ditto.
	(struct nlm_backend_data <nlm_mangle_relocs>): Ditto.
	* mmo.c (mmo_set_section_contents): Ditto.
	* nlm32-alpha.c (nlm_alpha_mangle_relocs): Ditto.
	* nlm32-i386.c (nlm_i386_mangle_relocs): Ditto.
	* nlm32-ppc.c (nlm_powerpc_mangle_relocs): Ditto.
	* nlm32-sparc.c (nlm_sparc_mangle_relocs): Ditto.
	* nlmcode.h (nlm_set_section_contents): Ditto.
	* oasys.c (oasys_set_section_contents): Ditto.
	* pdp11.c (NAME(aout,set_section_contents)): Ditto.
	* ppcboot.c (ppcboot_set_section_contents): Ditto.
	* srec.c (srec_set_section_contents): Ditto.
	* targets.c (BFD_JUMP_TABLE_WRITE <_bfd_set_section_contents>): Ditto.
	* tekhex.c (tekhex_set_section_contents): Ditto.
	(move_section_contents): Ditto.
	* versados.c (versados_set_section_contents): Ditto.
	* vms-misc.c (_bfd_save_vms_section): Ditto.
	* vms.c (vms_set_section_contents): Ditto.
	* vms.h (_bfd_save_vms_section): Ditto.
@
text
@d3 1
a3 1
   2000, 2001, 2002, 2003
d269 1
a269 1
.  ((void) (*((unsigned char *) (ptr)) = (unsigned char) (val)))
d370 1
a370 2
.{* Refinements on the above, which should eventually go away.  Save
.   cluttering the source with (bfd_vma) and (bfd_byte *) casts.  *}
d372 16
a387 43
.#define H_PUT_64(abfd, val, where) \
.  bfd_h_put_64 ((abfd), (bfd_vma) (val), (bfd_byte *) (where))
.
.#define H_PUT_32(abfd, val, where) \
.  bfd_h_put_32 ((abfd), (bfd_vma) (val), (bfd_byte *) (where))
.
.#define H_PUT_16(abfd, val, where) \
.  bfd_h_put_16 ((abfd), (bfd_vma) (val), (bfd_byte *) (where))
.
.#define H_PUT_8 bfd_h_put_8
.
.#define H_PUT_S64(abfd, val, where) \
.  bfd_h_put_signed_64 ((abfd), (bfd_vma) (val), (bfd_byte *) (where))
.
.#define H_PUT_S32(abfd, val, where) \
.  bfd_h_put_signed_32 ((abfd), (bfd_vma) (val), (bfd_byte *) (where))
.
.#define H_PUT_S16(abfd, val, where) \
.  bfd_h_put_signed_16 ((abfd), (bfd_vma) (val), (bfd_byte *) (where))
.
.#define H_PUT_S8 bfd_h_put_signed_8
.
.#define H_GET_64(abfd, where) \
.  bfd_h_get_64 ((abfd), (bfd_byte *) (where))
.
.#define H_GET_32(abfd, where) \
.  bfd_h_get_32 ((abfd), (bfd_byte *) (where))
.
.#define H_GET_16(abfd, where) \
.  bfd_h_get_16 ((abfd), (bfd_byte *) (where))
.
.#define H_GET_8 bfd_h_get_8
.
.#define H_GET_S64(abfd, where) \
.  bfd_h_get_signed_64 ((abfd), (bfd_byte *) (where))
.
.#define H_GET_S32(abfd, where) \
.  bfd_h_get_signed_32 ((abfd), (bfd_byte *) (where))
.
.#define H_GET_S16(abfd, where) \
.  bfd_h_get_signed_16 ((abfd), (bfd_byte *) (where))
.
.#define H_GET_S8 bfd_h_get_signed_8
d399 1
a399 1
bfd_getb16 (const bfd_byte *addr)
d401 1
d406 1
a406 1
bfd_getl16 (const bfd_byte *addr)
d408 1
d413 1
a413 1
bfd_getb_signed_16 (const bfd_byte *addr)
d415 1
d420 1
a420 1
bfd_getl_signed_16 (const bfd_byte *addr)
d422 1
d427 1
a427 1
bfd_putb16 (bfd_vma data, bfd_byte *addr)
d429 3
a431 2
  addr[0] = (bfd_byte) (data >> 8);
  addr[1] = (bfd_byte) data;
d435 1
a435 1
bfd_putl16 (bfd_vma data, bfd_byte *addr)
d437 3
a439 2
  addr[0] = (bfd_byte) data;
  addr[1] = (bfd_byte) (data >> 8);
d443 1
a443 1
bfd_getb32 (const bfd_byte *addr)
d445 1
d456 1
a456 1
bfd_getl32 (const bfd_byte *addr)
d458 1
d469 1
a469 1
bfd_getb_signed_32 (const bfd_byte *addr)
d471 1
d482 1
a482 1
bfd_getl_signed_32 (const bfd_byte *addr)
d484 1
d495 1
a495 1
bfd_getb64 (const bfd_byte *addr ATTRIBUTE_UNUSED)
d498 1
d518 1
a518 1
bfd_getl64 (const bfd_byte *addr ATTRIBUTE_UNUSED)
d521 1
d542 1
a542 2
bfd_getb_signed_64 (addr)
     register const bfd_byte *addr ATTRIBUTE_UNUSED;
d545 1
d565 1
a565 2
bfd_getl_signed_64 (addr)
     register const bfd_byte *addr ATTRIBUTE_UNUSED;
d568 1
d588 1
a588 1
bfd_putb32 (bfd_vma data, bfd_byte *addr)
d590 5
a594 4
  addr[0] = (bfd_byte) (data >> 24);
  addr[1] = (bfd_byte) (data >> 16);
  addr[2] = (bfd_byte) (data >>  8);
  addr[3] = (bfd_byte) data;
d598 1
a598 1
bfd_putl32 (bfd_vma data, bfd_byte *addr)
d600 5
a604 4
  addr[0] = (bfd_byte) data;
  addr[1] = (bfd_byte) (data >>  8);
  addr[2] = (bfd_byte) (data >> 16);
  addr[3] = (bfd_byte) (data >> 24);
d608 1
a608 1
bfd_putb64 (bfd_vma data ATTRIBUTE_UNUSED, bfd_byte *addr ATTRIBUTE_UNUSED)
d611 9
a619 8
  addr[0] = (bfd_byte) (data >> (7*8));
  addr[1] = (bfd_byte) (data >> (6*8));
  addr[2] = (bfd_byte) (data >> (5*8));
  addr[3] = (bfd_byte) (data >> (4*8));
  addr[4] = (bfd_byte) (data >> (3*8));
  addr[5] = (bfd_byte) (data >> (2*8));
  addr[6] = (bfd_byte) (data >> (1*8));
  addr[7] = (bfd_byte) (data >> (0*8));
d626 1
a626 1
bfd_putl64 (bfd_vma data ATTRIBUTE_UNUSED, bfd_byte *addr ATTRIBUTE_UNUSED)
d629 9
a637 8
  addr[7] = (bfd_byte) (data >> (7*8));
  addr[6] = (bfd_byte) (data >> (6*8));
  addr[5] = (bfd_byte) (data >> (5*8));
  addr[4] = (bfd_byte) (data >> (4*8));
  addr[3] = (bfd_byte) (data >> (3*8));
  addr[2] = (bfd_byte) (data >> (2*8));
  addr[1] = (bfd_byte) (data >> (1*8));
  addr[0] = (bfd_byte) (data >> (0*8));
d644 1
a644 1
bfd_put_bits (bfd_vma data, bfd_byte *addr, int bits, bfd_boolean big_p)
d646 1
d658 1
a658 1
      addr[index] = (bfd_byte) data;
d664 1
a664 1
bfd_get_bits (bfd_byte *addr, int bits, bfd_boolean big_p)
d666 1
@


1.29.8.1
log
@Merge mainline to intercu branch.
@
text
@d3 1
a3 1
   2000, 2001, 2002, 2003, 2004
d269 1
a269 1
.  ((void) (*((unsigned char *) (ptr)) = (val) & 0xff))
d370 2
a371 1
.{* Aliases for the above, which should eventually go away.  *}
d373 43
a415 16
.#define H_PUT_64  bfd_h_put_64
.#define H_PUT_32  bfd_h_put_32
.#define H_PUT_16  bfd_h_put_16
.#define H_PUT_8   bfd_h_put_8
.#define H_PUT_S64 bfd_h_put_signed_64
.#define H_PUT_S32 bfd_h_put_signed_32
.#define H_PUT_S16 bfd_h_put_signed_16
.#define H_PUT_S8  bfd_h_put_signed_8
.#define H_GET_64  bfd_h_get_64
.#define H_GET_32  bfd_h_get_32
.#define H_GET_16  bfd_h_get_16
.#define H_GET_8   bfd_h_get_8
.#define H_GET_S64 bfd_h_get_signed_64
.#define H_GET_S32 bfd_h_get_signed_32
.#define H_GET_S16 bfd_h_get_signed_16
.#define H_GET_S8  bfd_h_get_signed_8
d422 1
a422 1
#define EIGHT_GAZILLION ((bfd_int64_t) 1 << 63)
d424 1
a424 1
  (((bfd_int64_t) (x) ^ EIGHT_GAZILLION) - EIGHT_GAZILLION)
d427 1
a427 1
bfd_getb16 (const void *p)
a428 1
  const bfd_byte *addr = p;
d433 1
a433 1
bfd_getl16 (const void *p)
a434 1
  const bfd_byte *addr = p;
d439 1
a439 1
bfd_getb_signed_16 (const void *p)
a440 1
  const bfd_byte *addr = p;
d445 1
a445 1
bfd_getl_signed_16 (const void *p)
a446 1
  const bfd_byte *addr = p;
d451 1
a451 1
bfd_putb16 (bfd_vma data, void *p)
d453 2
a454 3
  bfd_byte *addr = p;
  addr[0] = (data >> 8) & 0xff;
  addr[1] = data & 0xff;
d458 1
a458 1
bfd_putl16 (bfd_vma data, void *p)
d460 2
a461 3
  bfd_byte *addr = p;
  addr[0] = data & 0xff;
  addr[1] = (data >> 8) & 0xff;
d465 1
a465 1
bfd_getb32 (const void *p)
a466 1
  const bfd_byte *addr = p;
d477 1
a477 1
bfd_getl32 (const void *p)
a478 1
  const bfd_byte *addr = p;
d489 1
a489 1
bfd_getb_signed_32 (const void *p)
a490 1
  const bfd_byte *addr = p;
d501 1
a501 1
bfd_getl_signed_32 (const void *p)
a502 1
  const bfd_byte *addr = p;
d512 2
a513 2
bfd_uint64_t
bfd_getb64 (const void *p ATTRIBUTE_UNUSED)
d515 2
a516 3
#ifdef BFD_HOST_64_BIT
  const bfd_byte *addr = p;
  bfd_uint64_t v;
d534 2
a535 2
bfd_uint64_t
bfd_getl64 (const void *p ATTRIBUTE_UNUSED)
d537 2
a538 3
#ifdef BFD_HOST_64_BIT
  const bfd_byte *addr = p;
  bfd_uint64_t v;
d557 3
a559 2
bfd_int64_t
bfd_getb_signed_64 (const void *p ATTRIBUTE_UNUSED)
d561 2
a562 3
#ifdef BFD_HOST_64_BIT
  const bfd_byte *addr = p;
  bfd_uint64_t v;
d580 3
a582 2
bfd_int64_t
bfd_getl_signed_64 (const void *p ATTRIBUTE_UNUSED)
d584 2
a585 3
#ifdef BFD_HOST_64_BIT
  const bfd_byte *addr = p;
  bfd_uint64_t v;
d604 1
a604 1
bfd_putb32 (bfd_vma data, void *p)
d606 4
a609 5
  bfd_byte *addr = p;
  addr[0] = (data >> 24) & 0xff;
  addr[1] = (data >> 16) & 0xff;
  addr[2] = (data >>  8) & 0xff;
  addr[3] = data & 0xff;
d613 1
a613 1
bfd_putl32 (bfd_vma data, void *p)
d615 4
a618 5
  bfd_byte *addr = p;
  addr[0] = data & 0xff;
  addr[1] = (data >>  8) & 0xff;
  addr[2] = (data >> 16) & 0xff;
  addr[3] = (data >> 24) & 0xff;
d622 1
a622 1
bfd_putb64 (bfd_uint64_t data ATTRIBUTE_UNUSED, void *p ATTRIBUTE_UNUSED)
d624 9
a632 10
#ifdef BFD_HOST_64_BIT
  bfd_byte *addr = p;
  addr[0] = (data >> (7*8)) & 0xff;
  addr[1] = (data >> (6*8)) & 0xff;
  addr[2] = (data >> (5*8)) & 0xff;
  addr[3] = (data >> (4*8)) & 0xff;
  addr[4] = (data >> (3*8)) & 0xff;
  addr[5] = (data >> (2*8)) & 0xff;
  addr[6] = (data >> (1*8)) & 0xff;
  addr[7] = (data >> (0*8)) & 0xff;
d639 1
a639 1
bfd_putl64 (bfd_uint64_t data ATTRIBUTE_UNUSED, void *p ATTRIBUTE_UNUSED)
d641 9
a649 10
#ifdef BFD_HOST_64_BIT
  bfd_byte *addr = p;
  addr[7] = (data >> (7*8)) & 0xff;
  addr[6] = (data >> (6*8)) & 0xff;
  addr[5] = (data >> (5*8)) & 0xff;
  addr[4] = (data >> (4*8)) & 0xff;
  addr[3] = (data >> (3*8)) & 0xff;
  addr[2] = (data >> (2*8)) & 0xff;
  addr[1] = (data >> (1*8)) & 0xff;
  addr[0] = (data >> (0*8)) & 0xff;
d656 1
a656 1
bfd_put_bits (bfd_uint64_t data, void *p, int bits, bfd_boolean big_p)
a657 1
  bfd_byte *addr = p;
d669 1
a669 1
      addr[index] = data & 0xff;
d674 2
a675 2
bfd_uint64_t
bfd_get_bits (const void *p, int bits, bfd_boolean big_p)
d677 1
a677 2
  const bfd_byte *addr = p;
  bfd_uint64_t data;
@


1.29.8.2
log
@Merge mainline to intercu branch - 2004-09-15
@
text
@a694 1
  bfd_size_type sz;
d698 1
a698 2
  sz = section->rawsize ? section->rawsize : section->size;
  if (offset + count > sz)
a719 2
  bfd_size_type sz;

d747 1
a747 2
  sz = section->rawsize ? section->rawsize : section->size;
  if (offset + count > sz
d821 1
a821 1
	msg = _("%B: compiled for a big endian system and target is little endian");
d823 1
a823 1
	msg = _("%B: compiled for a little endian system and target is big endian");
d825 1
a825 1
      (*_bfd_error_handler) (msg, ibfd);
@


1.29.12.1
log
@Merge with mainline cagney_tramp-20040321-mergepoint.
@
text
@d3 1
a3 1
   2000, 2001, 2002, 2003, 2004
d269 1
a269 1
.  ((void) (*((unsigned char *) (ptr)) = (val) & 0xff))
d370 2
a371 1
.{* Aliases for the above, which should eventually go away.  *}
d373 43
a415 16
.#define H_PUT_64  bfd_h_put_64
.#define H_PUT_32  bfd_h_put_32
.#define H_PUT_16  bfd_h_put_16
.#define H_PUT_8   bfd_h_put_8
.#define H_PUT_S64 bfd_h_put_signed_64
.#define H_PUT_S32 bfd_h_put_signed_32
.#define H_PUT_S16 bfd_h_put_signed_16
.#define H_PUT_S8  bfd_h_put_signed_8
.#define H_GET_64  bfd_h_get_64
.#define H_GET_32  bfd_h_get_32
.#define H_GET_16  bfd_h_get_16
.#define H_GET_8   bfd_h_get_8
.#define H_GET_S64 bfd_h_get_signed_64
.#define H_GET_S32 bfd_h_get_signed_32
.#define H_GET_S16 bfd_h_get_signed_16
.#define H_GET_S8  bfd_h_get_signed_8
d422 1
a422 1
#define EIGHT_GAZILLION ((bfd_int64_t) 1 << 63)
d424 1
a424 1
  (((bfd_int64_t) (x) ^ EIGHT_GAZILLION) - EIGHT_GAZILLION)
d427 1
a427 1
bfd_getb16 (const void *p)
a428 1
  const bfd_byte *addr = p;
d433 1
a433 1
bfd_getl16 (const void *p)
a434 1
  const bfd_byte *addr = p;
d439 1
a439 1
bfd_getb_signed_16 (const void *p)
a440 1
  const bfd_byte *addr = p;
d445 1
a445 1
bfd_getl_signed_16 (const void *p)
a446 1
  const bfd_byte *addr = p;
d451 1
a451 1
bfd_putb16 (bfd_vma data, void *p)
d453 2
a454 3
  bfd_byte *addr = p;
  addr[0] = (data >> 8) & 0xff;
  addr[1] = data & 0xff;
d458 1
a458 1
bfd_putl16 (bfd_vma data, void *p)
d460 2
a461 3
  bfd_byte *addr = p;
  addr[0] = data & 0xff;
  addr[1] = (data >> 8) & 0xff;
d465 1
a465 1
bfd_getb32 (const void *p)
a466 1
  const bfd_byte *addr = p;
d477 1
a477 1
bfd_getl32 (const void *p)
a478 1
  const bfd_byte *addr = p;
d489 1
a489 1
bfd_getb_signed_32 (const void *p)
a490 1
  const bfd_byte *addr = p;
d501 1
a501 1
bfd_getl_signed_32 (const void *p)
a502 1
  const bfd_byte *addr = p;
d512 2
a513 2
bfd_uint64_t
bfd_getb64 (const void *p ATTRIBUTE_UNUSED)
d515 2
a516 3
#ifdef BFD_HOST_64_BIT
  const bfd_byte *addr = p;
  bfd_uint64_t v;
d534 2
a535 2
bfd_uint64_t
bfd_getl64 (const void *p ATTRIBUTE_UNUSED)
d537 2
a538 3
#ifdef BFD_HOST_64_BIT
  const bfd_byte *addr = p;
  bfd_uint64_t v;
d557 3
a559 2
bfd_int64_t
bfd_getb_signed_64 (const void *p ATTRIBUTE_UNUSED)
d561 2
a562 3
#ifdef BFD_HOST_64_BIT
  const bfd_byte *addr = p;
  bfd_uint64_t v;
d580 3
a582 2
bfd_int64_t
bfd_getl_signed_64 (const void *p ATTRIBUTE_UNUSED)
d584 2
a585 3
#ifdef BFD_HOST_64_BIT
  const bfd_byte *addr = p;
  bfd_uint64_t v;
d604 1
a604 1
bfd_putb32 (bfd_vma data, void *p)
d606 4
a609 5
  bfd_byte *addr = p;
  addr[0] = (data >> 24) & 0xff;
  addr[1] = (data >> 16) & 0xff;
  addr[2] = (data >>  8) & 0xff;
  addr[3] = data & 0xff;
d613 1
a613 1
bfd_putl32 (bfd_vma data, void *p)
d615 4
a618 5
  bfd_byte *addr = p;
  addr[0] = data & 0xff;
  addr[1] = (data >>  8) & 0xff;
  addr[2] = (data >> 16) & 0xff;
  addr[3] = (data >> 24) & 0xff;
d622 1
a622 1
bfd_putb64 (bfd_uint64_t data ATTRIBUTE_UNUSED, void *p ATTRIBUTE_UNUSED)
d624 9
a632 10
#ifdef BFD_HOST_64_BIT
  bfd_byte *addr = p;
  addr[0] = (data >> (7*8)) & 0xff;
  addr[1] = (data >> (6*8)) & 0xff;
  addr[2] = (data >> (5*8)) & 0xff;
  addr[3] = (data >> (4*8)) & 0xff;
  addr[4] = (data >> (3*8)) & 0xff;
  addr[5] = (data >> (2*8)) & 0xff;
  addr[6] = (data >> (1*8)) & 0xff;
  addr[7] = (data >> (0*8)) & 0xff;
d639 1
a639 1
bfd_putl64 (bfd_uint64_t data ATTRIBUTE_UNUSED, void *p ATTRIBUTE_UNUSED)
d641 9
a649 10
#ifdef BFD_HOST_64_BIT
  bfd_byte *addr = p;
  addr[7] = (data >> (7*8)) & 0xff;
  addr[6] = (data >> (6*8)) & 0xff;
  addr[5] = (data >> (5*8)) & 0xff;
  addr[4] = (data >> (4*8)) & 0xff;
  addr[3] = (data >> (3*8)) & 0xff;
  addr[2] = (data >> (2*8)) & 0xff;
  addr[1] = (data >> (1*8)) & 0xff;
  addr[0] = (data >> (0*8)) & 0xff;
d656 1
a656 1
bfd_put_bits (bfd_uint64_t data, void *p, int bits, bfd_boolean big_p)
a657 1
  bfd_byte *addr = p;
d669 1
a669 1
      addr[index] = data & 0xff;
d674 2
a675 2
bfd_uint64_t
bfd_get_bits (const void *p, int bits, bfd_boolean big_p)
d677 1
a677 2
  const bfd_byte *addr = p;
  bfd_uint64_t data;
@


1.29.6.1
log
@	* bfd-in.h (bfd_getb64, bfd_getl64): Replace bfd_byte* with void*.
	(bfd_getb32, bfd_getl32, bfd_getb16, bfd_getl16): Likewise.
	(bfd_getb_signed_64, bfd_getl_signed_64): Likewise.
	(bfd_getb_signed_32, bfd_getl_signed_32): Likewise.
	(bfd_getb_signed_16, bfd_getl_signed_16): Likewise.
	(bfd_putb64, bfd_putl64, bfd_putb32, bfd_putl32): Likewise.
	(bfd_putb16, bfd_putl16, bfd_get_bits, bfd_put_bits): Likewise.
	* libbfd.c: Likewise in function definitions.
	(bfd_put_8): Mask with 0xff rather than casting to char.
	(bfd_putb16, bfd_putl16, bfd_putb32, bfd_putl32): Likewise.
	(bfd_putb64, bfd_putl64, bfd_put_bits): Likewise.
	(H_PUT_64, H_PUT_32, H_PUT_16, H_PUT_8): Remove casts, simplify.
	(H_PUT_S64, H_PUT_S32, H_PUT_S16, H_PUT_S8): Likewise.
	(H_GET_64, H_GET_32, H_GET_16, H_GET_8): Likewise.
	(H_GET_S64, H_GET_S32, H_GET_S16, H_GET_S8): Likewise.
	* libaout.h (H_PUT_64 H_PUT_32, H_PUT_16): Remove casts, simplify.
	(H_PUT_S64, H_PUT_S32, H_PUT_S16): Likewise.
	(H_GET_64, H_GET_32, H_GET_16): Likewise.
	(H_GET_S64, H_GET_S32, H_GET_S16): Likewise.
	* archive.c (do_slurp_coff_armap): Update swap prototype.
	* coff-tic54x.c (tic54x_getl32): Replace bfd_byte* with void*.
	(tic54x_getl_signed_32): Likewise.
	(tic54x_putl32): Likewise.  Mask with 0xff rather than casting to char.
	* mach-o.c (bfd_mach_o_read_header): Update get32 prototype.
	* pdp11.c (bfd_getp32): Make static, replace bfd_byte* with void*.
	(bfd_getp_signed_32, bfd_putp32): Likewise.
	* targets.c (struct bfd_target): Use void* in place of bfd_byte* for
	bfd_getx64, bfd_getx_signed_64, bfd_putx64, bfd_getx32,
	bfd_getx_signed_32, bfd_putx32, bfd_getx16, bfd_getx_signed_16,
	bfd_putx16, bfd_h_getx64, bfd_h_getx_signed_64, bfd_h_putx64,
	bfd_h_getx32, bfd_h_getx_signed_32, bfd_h_putx32, bfd_h_getx16,
	bfd_h_getx_signed_16, bfd_h_putx16.
	* aix386-core.c (NO_GET, NO_GETS, NO_PUT): Update prototypes.
	* hppabsd-core.c: Similarly.  Rename NO_SIGNED_GET to NO_GETS.
	* hpux-core.c: Likewise.
	* irix-core.c: Likewise.
	* netbsd-core.c: Likewise.
	* osf-core.c: Likewise.
	* ptrace-core.c: Likewise.
	* sco5-core.c: Likewise.
	* trad-core.c: Likewise.
	* bfd-in2.h: Regenerate.
@
text
@d3 1
a3 1
   2000, 2001, 2002, 2003, 2004
d269 1
a269 1
.  ((void) (*((unsigned char *) (ptr)) = (val) & 0xff))
d370 2
a371 1
.{* Aliases for the above, which should eventually go away.  *}
d373 43
a415 16
.#define H_PUT_64  bfd_h_put_64
.#define H_PUT_32  bfd_h_put_32
.#define H_PUT_16  bfd_h_put_16
.#define H_PUT_8   bfd_h_put_8
.#define H_PUT_S64 bfd_h_put_signed_64
.#define H_PUT_S32 bfd_h_put_signed_32
.#define H_PUT_S16 bfd_h_put_signed_16
.#define H_PUT_S8  bfd_h_put_signed_8
.#define H_GET_64  bfd_h_get_64
.#define H_GET_32  bfd_h_get_32
.#define H_GET_16  bfd_h_get_16
.#define H_GET_8   bfd_h_get_8
.#define H_GET_S64 bfd_h_get_signed_64
.#define H_GET_S32 bfd_h_get_signed_32
.#define H_GET_S16 bfd_h_get_signed_16
.#define H_GET_S8  bfd_h_get_signed_8
d427 1
a427 1
bfd_getb16 (const void *p)
a428 1
  const bfd_byte *addr = p;
d433 1
a433 1
bfd_getl16 (const void *p)
a434 1
  const bfd_byte *addr = p;
d439 1
a439 1
bfd_getb_signed_16 (const void *p)
a440 1
  const bfd_byte *addr = p;
d445 1
a445 1
bfd_getl_signed_16 (const void *p)
a446 1
  const bfd_byte *addr = p;
d451 1
a451 1
bfd_putb16 (bfd_vma data, void *p)
d453 2
a454 3
  bfd_byte *addr = p;
  addr[0] = (data >> 8) & 0xff;
  addr[1] = data & 0xff;
d458 1
a458 1
bfd_putl16 (bfd_vma data, void *p)
d460 2
a461 3
  bfd_byte *addr = p;
  addr[0] = data & 0xff;
  addr[1] = (data >> 8) & 0xff;
d465 1
a465 1
bfd_getb32 (const void *p)
a466 1
  const bfd_byte *addr = p;
d477 1
a477 1
bfd_getl32 (const void *p)
a478 1
  const bfd_byte *addr = p;
d489 1
a489 1
bfd_getb_signed_32 (const void *p)
a490 1
  const bfd_byte *addr = p;
d501 1
a501 1
bfd_getl_signed_32 (const void *p)
a502 1
  const bfd_byte *addr = p;
d513 1
a513 1
bfd_getb64 (const void *p ATTRIBUTE_UNUSED)
a515 1
  const bfd_byte *addr = p;
d535 1
a535 1
bfd_getl64 (const void *p ATTRIBUTE_UNUSED)
a537 1
  const bfd_byte *addr = p;
d558 2
a559 1
bfd_getb_signed_64 (const void *p ATTRIBUTE_UNUSED)
a561 1
  const bfd_byte *addr = p;
d581 2
a582 1
bfd_getl_signed_64 (const void *p ATTRIBUTE_UNUSED)
a584 1
  const bfd_byte *addr = p;
d604 1
a604 1
bfd_putb32 (bfd_vma data, void *p)
d606 4
a609 5
  bfd_byte *addr = p;
  addr[0] = (data >> 24) & 0xff;
  addr[1] = (data >> 16) & 0xff;
  addr[2] = (data >>  8) & 0xff;
  addr[3] = data & 0xff;
d613 1
a613 1
bfd_putl32 (bfd_vma data, void *p)
d615 4
a618 5
  bfd_byte *addr = p;
  addr[0] = data & 0xff;
  addr[1] = (data >>  8) & 0xff;
  addr[2] = (data >> 16) & 0xff;
  addr[3] = (data >> 24) & 0xff;
d622 1
a622 1
bfd_putb64 (bfd_vma data ATTRIBUTE_UNUSED, void *p ATTRIBUTE_UNUSED)
d625 8
a632 9
  bfd_byte *addr = p;
  addr[0] = (data >> (7*8)) & 0xff;
  addr[1] = (data >> (6*8)) & 0xff;
  addr[2] = (data >> (5*8)) & 0xff;
  addr[3] = (data >> (4*8)) & 0xff;
  addr[4] = (data >> (3*8)) & 0xff;
  addr[5] = (data >> (2*8)) & 0xff;
  addr[6] = (data >> (1*8)) & 0xff;
  addr[7] = (data >> (0*8)) & 0xff;
d639 1
a639 1
bfd_putl64 (bfd_vma data ATTRIBUTE_UNUSED, void *p ATTRIBUTE_UNUSED)
d642 8
a649 9
  bfd_byte *addr = p;
  addr[7] = (data >> (7*8)) & 0xff;
  addr[6] = (data >> (6*8)) & 0xff;
  addr[5] = (data >> (5*8)) & 0xff;
  addr[4] = (data >> (4*8)) & 0xff;
  addr[3] = (data >> (3*8)) & 0xff;
  addr[2] = (data >> (2*8)) & 0xff;
  addr[1] = (data >> (1*8)) & 0xff;
  addr[0] = (data >> (0*8)) & 0xff;
d656 1
a656 1
bfd_put_bits (bfd_vma data, void *p, int bits, bfd_boolean big_p)
a657 1
  bfd_byte *addr = p;
d669 1
a669 1
      addr[index] = data & 0xff;
d675 1
a675 1
bfd_get_bits (const void *p, int bits, bfd_boolean big_p)
a676 1
  const bfd_byte *addr = p;
@


1.29.6.2
log
@	* bfd-in.h (bfd_int64_t, bfd_uint64_t): New types.
	(BFD_HOST_64_BIT, BFD_HOST_U_64_BIT): Don't define here.
	(bfd_getb64, bfd_getl64, bfd_get_bits): Return bfd_uint64_t.
	(bfd_getb_signed_64, bfd_getl_signed_64): Return bfd_int64_t.
	(bfd_putb64, bfd_putl64, bfd_put_bits): Accept bfd_uint64_t.
	* configure.in (HOST_U_64BIT_TYPE): Set when sizeof long is 8.
	(BFD_HOST_64_BIT_DEFINED, BFD_HOST_64_BIT, BFD_HOST_U_64_BIT): Set
	when using long.
	* libbfd.c (EIGHT_GAZILLION, COERCE64): Use bfd_int64_t.
	(bfd_getb64): Return bfd_uint64_t.  Enable when BFD_HOST_64_BIT.
	(bfd_getl64, bfd_getb_signed_64, bfd_getl_signed_64): Likewise.
	(bfd_putb64): Accept bfd_uint64_t.  Enable when BFD_HOST_64_BIT.
	(bfd_putl64, bfd_put_bits, bfd_get_bits): Likewise.
	* dwarf2.c (struct attribute): Use bfd_int64_t and bfd_uint64_t.
	(read_8_bytes, read_indirect_string, read_address): Likewise.
	(read_abbrevs, parse_comp_unit): Likewise.
	* targets.c (struct bfd_target): Likewise.
	* aix386-core.c (NO_GET64, NO_PUT64, NO_GETS64): Define and use.
	* hppabsd-core.c: Likewise.  Formatting.
	* hpux-core.c: Likewise.
	* irix-core.c: Likewise.
	* netbsd-core.c: Likewise.
	* osf-core.c: Likewise.
	* ptrace-core.c: Likewise.
	* sco5-core.c: Likewise.
	* trad-core.c: Likewise.
	* configure: Regenerate.
	* bfd-in2.h: Regenerate.
@
text
@d394 1
a394 1
#define EIGHT_GAZILLION ((bfd_int64_t) 1 << 63)
d396 1
a396 1
  (((bfd_int64_t) (x) ^ EIGHT_GAZILLION) - EIGHT_GAZILLION)
d494 1
a494 1
bfd_uint64_t
d497 1
a497 1
#ifdef BFD_HOST_64_BIT
d499 1
a499 1
  bfd_uint64_t v;
d517 1
a517 1
bfd_uint64_t
d520 1
a520 1
#ifdef BFD_HOST_64_BIT
d522 1
a522 1
  bfd_uint64_t v;
d541 1
a541 1
bfd_int64_t
d544 1
a544 1
#ifdef BFD_HOST_64_BIT
d546 1
a546 1
  bfd_uint64_t v;
d564 1
a564 1
bfd_int64_t
d567 1
a567 1
#ifdef BFD_HOST_64_BIT
d569 1
a569 1
  bfd_uint64_t v;
d608 1
a608 1
bfd_putb64 (bfd_uint64_t data ATTRIBUTE_UNUSED, void *p ATTRIBUTE_UNUSED)
d610 1
a610 1
#ifdef BFD_HOST_64_BIT
d626 1
a626 1
bfd_putl64 (bfd_uint64_t data ATTRIBUTE_UNUSED, void *p ATTRIBUTE_UNUSED)
d628 1
a628 1
#ifdef BFD_HOST_64_BIT
d644 1
a644 1
bfd_put_bits (bfd_uint64_t data, void *p, int bits, bfd_boolean big_p)
d663 1
a663 1
bfd_uint64_t
d667 1
a667 1
  bfd_uint64_t data;
@


1.28
log
@Convert to C90 and a few tweaks.
@
text
@d774 1
a774 1
				   void *location,
@


1.27
log
@s/boolean/bfd_boolean/ s/true/TRUE/ s/false/FALSE/.  Simplify
comparisons of bfd_boolean vars with TRUE/FALSE.  Formatting.
@
text
@d3 1
a3 1
   2000, 2001, 2002
d45 1
a45 2
bfd_false (ignore)
     bfd *ignore ATTRIBUTE_UNUSED;
d55 1
a55 2
bfd_true (ignore)
     bfd *ignore ATTRIBUTE_UNUSED;
d63 2
a64 3
PTR
bfd_nullvoidptr (ignore)
     bfd *ignore ATTRIBUTE_UNUSED;
d71 1
a71 2
bfd_0 (ignore)
     bfd *ignore ATTRIBUTE_UNUSED;
d77 1
a77 2
bfd_0u (ignore)
     bfd *ignore ATTRIBUTE_UNUSED;
d83 1
a83 2
bfd_0l (ignore)
     bfd *ignore ATTRIBUTE_UNUSED;
d92 1
a92 2
_bfd_n1 (ignore_abfd)
     bfd *ignore_abfd ATTRIBUTE_UNUSED;
d99 1
a99 2
bfd_void (ignore)
     bfd *ignore ATTRIBUTE_UNUSED;
d104 3
a106 3
_bfd_nocore_core_file_matches_executable_p (ignore_core_bfd, ignore_exec_bfd)
     bfd *ignore_core_bfd ATTRIBUTE_UNUSED;
     bfd *ignore_exec_bfd ATTRIBUTE_UNUSED;
d116 1
a116 2
_bfd_nocore_core_file_failing_command (ignore_abfd)
     bfd *ignore_abfd ATTRIBUTE_UNUSED;
d119 1
a119 1
  return (char *)NULL;
d126 1
a126 2
_bfd_nocore_core_file_failing_signal (ignore_abfd)
     bfd *ignore_abfd ATTRIBUTE_UNUSED;
d133 1
a133 2
_bfd_dummy_target (ignore_abfd)
     bfd *ignore_abfd ATTRIBUTE_UNUSED;
d141 2
a142 3
PTR
bfd_malloc (size)
     bfd_size_type size;
d144 1
a144 1
  PTR ptr;
d152 1
a152 1
  ptr = (PTR) malloc ((size_t) size);
d161 2
a162 4
PTR
bfd_realloc (ptr, size)
     PTR ptr;
     bfd_size_type size;
d164 1
a164 1
  PTR ret;
d173 1
a173 1
    ret = (PTR) malloc ((size_t) size);
d175 1
a175 1
    ret = (PTR) realloc (ptr, (size_t) size);
d185 2
a186 3
PTR
bfd_zmalloc (size)
     bfd_size_type size;
d188 1
a188 1
  PTR ptr;
d196 1
a196 1
  ptr = (PTR) malloc ((size_t) size);
d222 1
a222 3
bfd_write_bigendian_4byte_int (abfd, i)
     bfd *abfd;
     unsigned int i;
d226 1
a226 1
  return bfd_bwrite ((PTR) buffer, (bfd_size_type) 4, abfd) == 4;
d269 1
a269 1
.                ((void) (*((unsigned char *) (ptr)) = (unsigned char) (val)))
d271 1
a271 1
.		bfd_put_8
d273 1
a273 1
.                (*(unsigned char *) (ptr) & 0xff)
d275 1
a275 1
.		(((*(unsigned char *) (ptr) & 0xff) ^ 0x80) - 0x80)
d278 1
a278 1
.                BFD_SEND(abfd, bfd_putx16, ((val),(ptr)))
d280 1
a280 1
.		 bfd_put_16
d282 1
a282 1
.                BFD_SEND(abfd, bfd_getx16, (ptr))
d284 1
a284 1
.         	 BFD_SEND (abfd, bfd_getx_signed_16, (ptr))
d287 1
a287 1
.                BFD_SEND(abfd, bfd_putx32, ((val),(ptr)))
d289 1
a289 1
.		 bfd_put_32
d291 1
a291 1
.                BFD_SEND(abfd, bfd_getx32, (ptr))
d293 1
a293 1
.		 BFD_SEND(abfd, bfd_getx_signed_32, (ptr))
d296 1
a296 1
.                BFD_SEND(abfd, bfd_putx64, ((val), (ptr)))
d298 1
a298 1
.		 bfd_put_64
d300 1
a300 1
.                BFD_SEND(abfd, bfd_getx64, (ptr))
d302 1
a302 1
.		 BFD_SEND(abfd, bfd_getx_signed_64, (ptr))
d304 13
a316 13
.#define bfd_get(bits, abfd, ptr)				\
.                ( (bits) ==  8 ? (bfd_vma) bfd_get_8 (abfd, ptr)	\
.		 : (bits) == 16 ? bfd_get_16 (abfd, ptr)	\
.		 : (bits) == 32 ? bfd_get_32 (abfd, ptr)	\
.		 : (bits) == 64 ? bfd_get_64 (abfd, ptr)	\
.		 : (abort (), (bfd_vma) - 1))
.
.#define bfd_put(bits, abfd, val, ptr)				\
.                ( (bits) ==  8 ? bfd_put_8  (abfd, val, ptr)	\
.		 : (bits) == 16 ? bfd_put_16 (abfd, val, ptr)	\
.		 : (bits) == 32 ? bfd_put_32 (abfd, val, ptr)	\
.		 : (bits) == 64 ? bfd_put_64 (abfd, val, ptr)	\
.		 : (abort (), (void) 0))
d421 2
a422 3
#define COERCE32(x) \
  ((bfd_signed_vma) (long) (((unsigned long) (x) ^ 0x80000000) - 0x80000000))
#define EIGHT_GAZILLION (((BFD_HOST_64_BIT)0x80000000) << 32)
d427 1
a427 2
bfd_getb16 (addr)
     register const bfd_byte *addr;
d433 1
a433 2
bfd_getl16 (addr)
     register const bfd_byte *addr;
d439 1
a439 2
bfd_getb_signed_16 (addr)
     register const bfd_byte *addr;
d441 1
a441 1
  return COERCE16((addr[0] << 8) | addr[1]);
d445 1
a445 2
bfd_getl_signed_16 (addr)
     register const bfd_byte *addr;
d447 1
a447 1
  return COERCE16((addr[1] << 8) | addr[0]);
d451 1
a451 3
bfd_putb16 (data, addr)
     bfd_vma data;
     register bfd_byte *addr;
d458 1
a458 3
bfd_putl16 (data, addr)
     bfd_vma data;
     register bfd_byte *addr;
d465 1
a465 2
bfd_getb32 (addr)
     register const bfd_byte *addr;
d473 1
a473 1
  return (bfd_vma) v;
d477 1
a477 2
bfd_getl32 (addr)
     register const bfd_byte *addr;
d485 1
a485 1
  return (bfd_vma) v;
d489 1
a489 2
bfd_getb_signed_32 (addr)
     register const bfd_byte *addr;
d501 1
a501 2
bfd_getl_signed_32 (addr)
     register const bfd_byte *addr;
d513 1
a513 2
bfd_getb64 (addr)
     register const bfd_byte *addr ATTRIBUTE_UNUSED;
d516 1
a516 1
  bfd_vma low, high;
d518 8
a525 9
  high= ((((((((addr[0]) << 8) |
              addr[1]) << 8) |
            addr[2]) << 8) |
          addr[3]) );

  low = (((((((((bfd_vma)addr[4]) << 8) |
              addr[5]) << 8) |
            addr[6]) << 8) |
          addr[7]));
d527 1
a527 1
  return high << 32 | low;
d535 1
a535 2
bfd_getl64 (addr)
     register const bfd_byte *addr ATTRIBUTE_UNUSED;
d538 10
a547 10
  bfd_vma low, high;
  high= (((((((addr[7] << 8) |
              addr[6]) << 8) |
            addr[5]) << 8) |
          addr[4]));

  low = ((((((((bfd_vma)addr[3] << 8) |
              addr[2]) << 8) |
            addr[1]) << 8) |
          addr[0]) );
d549 1
a549 1
  return high << 32 | low;
d562 1
a562 1
  bfd_vma low, high;
d564 8
a571 9
  high= ((((((((addr[0]) << 8) |
              addr[1]) << 8) |
            addr[2]) << 8) |
          addr[3]) );

  low = (((((((((bfd_vma)addr[4]) << 8) |
              addr[5]) << 8) |
            addr[6]) << 8) |
          addr[7]));
d573 1
a573 1
  return COERCE64(high << 32 | low);
d585 1
a585 10
  bfd_vma low, high;
  high= (((((((addr[7] << 8) |
              addr[6]) << 8) |
            addr[5]) << 8) |
          addr[4]));

  low = ((((((((bfd_vma)addr[3] << 8) |
              addr[2]) << 8) |
            addr[1]) << 8) |
          addr[0]) );
d587 10
a596 1
  return COERCE64(high << 32 | low);
d604 6
a609 8
bfd_putb32 (data, addr)
     bfd_vma data;
     register bfd_byte *addr;
{
        addr[0] = (bfd_byte) (data >> 24);
        addr[1] = (bfd_byte) (data >> 16);
        addr[2] = (bfd_byte) (data >>  8);
        addr[3] = (bfd_byte) data;
d613 6
a618 8
bfd_putl32 (data, addr)
     bfd_vma data;
     register bfd_byte *addr;
{
        addr[0] = (bfd_byte) data;
        addr[1] = (bfd_byte) (data >>  8);
        addr[2] = (bfd_byte) (data >> 16);
        addr[3] = (bfd_byte) (data >> 24);
d622 1
a622 3
bfd_putb64 (data, addr)
     bfd_vma data ATTRIBUTE_UNUSED;
     register bfd_byte *addr ATTRIBUTE_UNUSED;
d639 1
a639 3
bfd_putl64 (data, addr)
     bfd_vma data ATTRIBUTE_UNUSED;
     register bfd_byte *addr ATTRIBUTE_UNUSED;
d656 1
a656 5
bfd_put_bits (data, addr, bits, big_p)
     bfd_vma data;
     bfd_byte *addr;
     int bits;
     bfd_boolean big_p;
d675 1
a675 4
bfd_get_bits (addr, bits, big_p)
     bfd_byte *addr;
     int bits;
     bfd_boolean big_p;
d699 5
a703 6
_bfd_generic_get_section_contents (abfd, section, location, offset, count)
     bfd *abfd;
     sec_ptr section;
     PTR location;
     file_ptr offset;
     bfd_size_type count;
d722 6
a727 6
_bfd_generic_get_section_contents_in_window (abfd, section, w, offset, count)
     bfd *abfd ATTRIBUTE_UNUSED;
     sec_ptr section ATTRIBUTE_UNUSED;
     bfd_window *w ATTRIBUTE_UNUSED;
     file_ptr offset ATTRIBUTE_UNUSED;
     bfd_size_type count ATTRIBUTE_UNUSED;
d732 2
a733 1
  if (abfd->xvec->_bfd_get_section_contents != _bfd_generic_get_section_contents)
d741 1
a741 2
      w->i = ((bfd_window_internal *)
	      bfd_zmalloc ((bfd_size_type) sizeof (bfd_window_internal)));
d744 1
a744 1
      w->i->data = (PTR) bfd_malloc (count);
d772 5
a776 6
_bfd_generic_set_section_contents (abfd, section, location, offset, count)
     bfd *abfd;
     sec_ptr section;
     PTR location;
     file_ptr offset;
     bfd_size_type count;
d801 1
a801 2
bfd_log2 (x)
     bfd_vma x;
d811 1
a811 3
bfd_generic_is_local_label_name (abfd, name)
     bfd *abfd;
     const char *name;
d822 1
a822 3
_bfd_generic_verify_endian_match (ibfd, obfd)
     bfd *ibfd;
     bfd *obfd;
d848 4
a851 5
warn_deprecated (what, file, line, func)
     const char *what;
     const char *file;
     int line;
     const char *func;
@


1.26
log
@	* elf-eh-frame.c (ENSURE_NO_RELOCS): Disregard R_*_NONE relocs.
	(_bfd_elf_discard_section_eh_frame): Don't discard duplicate CIEs
	on a relocatable link.  Comment typos.
	* elf.c (_bfd_elf_link_hash_newfunc): Assign elements of structure
	in the order they are declared.  Clear elf_hash_value too.
	(_bfd_elf_link_hash_table_init): Likewise assign in order.  Clear
	eh_info and tls_segment.
	* elflink.h (elf_link_input_bfd <emit_relocs>): Keep reloc offsets
	sorted when discarding relocs by turning them into R_*_NONE.

	* libbfd.c (warn_deprecated): Comment spelling.
	* po/SRC-POTFILES.in: Regenerate.
@
text
@d44 1
a44 1
boolean
d49 1
a49 1
  return false;
d55 1
a55 1
boolean
d59 1
a59 1
  return true;
d111 1
a111 1
boolean
d117 1
a117 1
  return false;
d228 1
a228 1
	boolean bfd_write_bigendian_4byte_int (bfd *, unsigned int);
d236 1
a236 1
boolean
d243 1
a243 1
  return (boolean) (bfd_bwrite ((PTR) buffer, (bfd_size_type) 4, abfd) == 4);
d702 1
a702 1
     boolean big_p;
d724 1
a724 1
     boolean big_p;
d747 1
a747 1
boolean
d756 1
a756 1
    return true;
d761 1
a761 1
      return false;
d766 1
a766 1
    return false;
d768 1
a768 1
  return true;
d771 1
a771 1
boolean
d781 1
a781 1
    return true;
d793 1
a793 1
	return false;
d799 1
a799 1
	  return false;
d809 3
a811 3
				true))
    return false;
  return true;
d821 1
a821 1
boolean
d830 1
a830 1
    return true;
d834 1
a834 1
    return false;
d836 1
a836 1
  return true;
d862 1
a862 1
boolean
d869 1
a869 1
  return (boolean) (name[0] == locals_prefix);
d874 2
a875 2
    true for a match, otherwise returns false and emits an error.  */
boolean
d894 1
a894 1
      return false;
d897 1
a897 1
  return true;
@


1.25
log
@2002-11-16  Klee Dienes  <kdienes@@apple.com>

	* Makefile.am (BFD32_LIBS): Add bfdwin.lo, bfdio.lo.
	(BFD32_LIBS_CFILES): Add bfdwin.c, bfdio.c.
	(BFD_H_FILES): Add bfdwin.c, bfdio.c.
	(LIBBFD_H_FILES): Add bfdwin.c, bfdio.c.
	Add dependencies for bfdwin.c, bfdio.c.
	* bfd.c: Remove bfd_get_mtime, bfd_get_size.
	* libbfd.c: Remove real_read, bfd_bread, _bfd_window_internal,
	bfd_init_window, bfd_free_window, bfd_get_file_window, bfd_bwrite,
	bfd_tell, bfd_flush, bfd_stat, bfd_seek.
	* bfdio.c: New file.  Contains real_read, bfd_bread, bfd_write,
	bfd_tell, bfd_flush, bfd_stat, bfd_seek, bfd_ge_mtime,
	bfd_get_size (moved from libbfd.c and bfd.c).
	* bfdwin.c New file.  Contains _bfd_window_internal,
	bfd_init_window, bfd_free_window, bfd_get_file_window (moved from
	libbfd.c and bfd.c).
	* po/SRC-POTFILES.in: Regenerate.
	* po/bfd.pot: Regenerate.
	* libbfd.h: Regenerate.
	* bfd-in2.h: Regenerate.
	* aclocal.m4: Regenerate.
	* Makefile.in: Regenerate.
	* configure: Regenerate.

2002-11-16  Klee Dienes  <kdienes@@apple.com>

	* Makefile.am (DOCFILES): Add bfdwin.texi, bfdio.texi.
	(PROTOS): Add bfdio.p, bfdwin.p.
	(SRCDOC): Add bfdio.c, bfdwin.c.
	(SRCPROT): Add bfdio.c, bfdwin.c.
	(SRCIPROT): Add bfdio.c, bfdwin.c.
	(LIBBFD_H_DEP): Add bfdio.c, bfdwin.c.
	(BFD_H_DEP): Add bfdio.c, bfdwin.c.
	Add rules for bfdio.texi, bfdwin.text.
	* bfd.texinfo: Include bfdio.texi.
@
text
@d915 1
a915 1
      /* Note: seperate sentances in order to allow
@


1.24
log
@	* aoutx.h (NAME(aout,swap_ext_reloc_in)): Cast bytes->r_index to
	unsigned int.  Cast RELOC_BASE10, RELOC_BASE13 and RELOC_BASE22 to
	unsigned int.
	(NAME(aout,final_link)): Cast enum used in assignment.
	(aout_link_write_symbols): Cast enums in comparisons, int values to
	boolean, enums in assignments to int.
	(aout_link_input_section_std): Cast rel->r_index to unsigned int.
	(aout_link_input_section_ext): Likewise.  Cast enums used in comparisons
	with unsigned ints.
	(aout_link_reloc_link_order): Cast enum to int in assignment.
	* archive.c (_bfd_generic_read_ar_hdr_mag): Cast result of memchr
	calls to char *.
	* bfd-in.h (bfd_set_section_vma): Cast enum true to unsigned int in
	assignment.
	* bfd-in2.h (bfd_set_section_vma): Likewise.
	* bfd.c (bfd_record_phdr): Cast enums in assignments.
	* binary.c (bfd_alloc): Cast enum to long.
	* coffgen.c (_bfd_coff_is_local_label_name): Cast return to boolean.
	* dwarf2.c (read_abbrevs): Add casts to enum types.
	(read_attribute_value): Likewise.
	(arange_add): Cast result of bfd_zalloc call.
	(comp_unit_contains_address): Return true and false.
	(comp_unit_find_nearest_line): Cast return to boolean.
	* format.c (bfd_check_format_matches, bfd_set_format): Likewise.
	* gen-aout.c: define macro '_' if not defined.
	* libbfd.c (bfd_realloc): Cast malloc and realloc to PTR.
	(bfd_bwrite): Cast bfd_realloc to bfd_byte *.
	(bfd_write_bigendian_4byte_int): Cast return to boolean.
	(bfd_seek): Cast bfd_realloc to bfd_byte *.
	(bfd_generic_is_local_label_name): Cast return to boolean.
	* libcoff.h (_bfd_coff_adjust_symndx): Remove extraneous '\'.
	* linker.c (_bfd_link_hash_newfunc): Cast bfd_hash_allocate result to
	struct bfd_hash_entry *.
	(_bfd_generic_link_hash_newfunc): likewise.
	(_bfd_generic_final_link): Cast enum to unsigned int.
	* merge.c (sec_merge_emit): Cast return to boolean.
	(merge_strings): Add casts to const unsigned char *.
	* reloc.c (bfd_get_reloc_code_name): Cast enums in comparison to int.
	(bfd_generic_get_relocated_section_content): Cast enum to unsigned int.
	* section.c (bfd_section_hash_newfunc): Cast bfd_hash_allocate result to
	struct bfd_hash_entry *.
	(bfd_set_section_content): Add cast to PTR in comparison.
	* simple.c (simple_dummy_warning, simple_dummy_undefined_symbol,
	simple_dummy_reloc_overflow, simple_dummy_reloc_dangerous,
	simple_dummy_unattached_reloc,
	bfd_simple_get_relocated_section_contents): Add K&R declarations and
	function definitions.
	* srec.c (S3Forced): Initialize to false.
	(srec_get_symtab): Cast return value from bfd_alloc to asymbol *.
	* stabs.c (_bfd_link_section_stabs): Cast enum to int in comparisons.
	(_bfd_discard_section_stabs): Likewise.  Also cast return to boolean.
	* syms.c (bfd_is_undefined_symclass): Cast return to boolean.
	(_bfd_stab_section_find_nearest_line): Cast enum to bfd_byte in
	comparisons.
@
text
@a30 2
static size_t real_read PARAMS ((PTR, size_t, size_t, FILE *));

a222 366

/* Some IO code */

/* Note that archive entries don't have streams; they share their parent's.
   This allows someone to play with the iostream behind BFD's back.

   Also, note that the origin pointer points to the beginning of a file's
   contents (0 for non-archive elements).  For archive entries this is the
   first octet in the file, NOT the beginning of the archive header.  */

static size_t
real_read (where, a, b, file)
     PTR where;
     size_t a;
     size_t b;
     FILE *file;
{
  /* FIXME - this looks like an optimization, but it's really to cover
     up for a feature of some OSs (not solaris - sigh) that
     ld/pe-dll.c takes advantage of (apparently) when it creates BFDs
     internally and tries to link against them.  BFD seems to be smart
     enough to realize there are no symbol records in the "file" that
     doesn't exist but attempts to read them anyway.  On Solaris,
     attempting to read zero bytes from a NULL file results in a core
     dump, but on other platforms it just returns zero bytes read.
     This makes it to something reasonable. - DJ */
  if (a == 0 || b == 0)
    return 0;


#if defined (__VAX) && defined (VMS)
  /* Apparently fread on Vax VMS does not keep the record length
     information.  */
  return read (fileno (file), where, a * b);
#else
  return fread (where, a, b, file);
#endif
}

/* Return value is amount read.  */

bfd_size_type
bfd_bread (ptr, size, abfd)
     PTR ptr;
     bfd_size_type size;
     bfd *abfd;
{
  size_t nread;

  if ((abfd->flags & BFD_IN_MEMORY) != 0)
    {
      struct bfd_in_memory *bim;
      bfd_size_type get;

      bim = (struct bfd_in_memory *) abfd->iostream;
      get = size;
      if (abfd->where + get > bim->size)
	{
	  if (bim->size < (bfd_size_type) abfd->where)
	    get = 0;
	  else
	    get = bim->size - abfd->where;
	  bfd_set_error (bfd_error_file_truncated);
	}
      memcpy (ptr, bim->buffer + abfd->where, (size_t) get);
      abfd->where += get;
      return get;
    }

  nread = real_read (ptr, 1, (size_t) size, bfd_cache_lookup (abfd));
  if (nread != (size_t) -1)
    abfd->where += nread;

  /* Set bfd_error if we did not read as much data as we expected.

     If the read failed due to an error set the bfd_error_system_call,
     else set bfd_error_file_truncated.

     A BFD backend may wish to override bfd_error_file_truncated to
     provide something more useful (eg. no_symbols or wrong_format).  */
  if (nread != size)
    {
      if (ferror (bfd_cache_lookup (abfd)))
	bfd_set_error (bfd_error_system_call);
      else
	bfd_set_error (bfd_error_file_truncated);
    }

  return nread;
}

/* The window support stuff should probably be broken out into
   another file....  */
/* The idea behind the next and refcount fields is that one mapped
   region can suffice for multiple read-only windows or multiple
   non-overlapping read-write windows.  It's not implemented yet
   though.  */
struct _bfd_window_internal {
  struct _bfd_window_internal *next;
  PTR data;
  bfd_size_type size;
  int refcount : 31;		/* should be enough...  */
  unsigned mapped : 1;		/* 1 = mmap, 0 = malloc */
};

void
bfd_init_window (windowp)
     bfd_window *windowp;
{
  windowp->data = 0;
  windowp->i = 0;
  windowp->size = 0;
}

/* Currently, if USE_MMAP is undefined, none if the window stuff is
   used.  Okay, so it's mis-named.  At least the command-line option
   "--without-mmap" is more obvious than "--without-windows" or some
   such.  */
#ifdef USE_MMAP

#undef HAVE_MPROTECT /* code's not tested yet */

#if HAVE_MMAP || HAVE_MPROTECT || HAVE_MADVISE
#include <sys/mman.h>
#endif

#ifndef MAP_FILE
#define MAP_FILE 0
#endif

static int debug_windows;

void
bfd_free_window (windowp)
     bfd_window *windowp;
{
  bfd_window_internal *i = windowp->i;
  windowp->i = 0;
  windowp->data = 0;
  if (i == 0)
    return;
  i->refcount--;
  if (debug_windows)
    fprintf (stderr, "freeing window @@%p<%p,%lx,%p>\n",
	     windowp, windowp->data, windowp->size, windowp->i);
  if (i->refcount != 0)
    return;

  if (i->mapped)
    {
#ifdef HAVE_MMAP
      munmap (i->data, i->size);
      goto no_free;
#else
      abort ();
#endif
    }
#ifdef HAVE_MPROTECT
  mprotect (i->data, i->size, PROT_READ | PROT_WRITE);
#endif
  free (i->data);
#ifdef HAVE_MMAP
 no_free:
#endif
  i->data = 0;
  /* There should be no more references to i at this point.  */
  free (i);
}

static int ok_to_map = 1;

boolean
bfd_get_file_window (abfd, offset, size, windowp, writable)
     bfd *abfd;
     file_ptr offset;
     bfd_size_type size;
     bfd_window *windowp;
     boolean writable;
{
  static size_t pagesize;
  bfd_window_internal *i = windowp->i;
  bfd_size_type size_to_alloc = size;

  if (debug_windows)
    fprintf (stderr, "bfd_get_file_window (%p, %6ld, %6ld, %p<%p,%lx,%p>, %d)",
	     abfd, (long) offset, (long) size,
	     windowp, windowp->data, (unsigned long) windowp->size,
	     windowp->i, writable);

  /* Make sure we know the page size, so we can be friendly to mmap.  */
  if (pagesize == 0)
    pagesize = getpagesize ();
  if (pagesize == 0)
    abort ();

  if (i == 0)
    {
      i = ((bfd_window_internal *)
	   bfd_zmalloc ((bfd_size_type) sizeof (bfd_window_internal)));
      windowp->i = i;
      if (i == 0)
	return false;
      i->data = 0;
    }
#ifdef HAVE_MMAP
  if (ok_to_map
      && (i->data == 0 || i->mapped == 1)
      && (abfd->flags & BFD_IN_MEMORY) == 0)
    {
      file_ptr file_offset, offset2;
      size_t real_size;
      int fd;
      FILE *f;

      /* Find the real file and the real offset into it.  */
      while (abfd->my_archive != NULL)
	{
	  offset += abfd->origin;
	  abfd = abfd->my_archive;
	}
      f = bfd_cache_lookup (abfd);
      fd = fileno (f);

      /* Compute offsets and size for mmap and for the user's data.  */
      offset2 = offset % pagesize;
      if (offset2 < 0)
	abort ();
      file_offset = offset - offset2;
      real_size = offset + size - file_offset;
      real_size = real_size + pagesize - 1;
      real_size -= real_size % pagesize;

      /* If we're re-using a memory region, make sure it's big enough.  */
      if (i->data && i->size < size)
	{
	  munmap (i->data, i->size);
	  i->data = 0;
	}
      i->data = mmap (i->data, real_size,
		      writable ? PROT_WRITE | PROT_READ : PROT_READ,
		      (writable
		       ? MAP_FILE | MAP_PRIVATE
		       : MAP_FILE | MAP_SHARED),
		      fd, file_offset);
      if (i->data == (PTR) -1)
	{
	  /* An error happened.  Report it, or try using malloc, or
	     something.  */
	  bfd_set_error (bfd_error_system_call);
	  i->data = 0;
	  windowp->data = 0;
	  if (debug_windows)
	    fprintf (stderr, "\t\tmmap failed!\n");
	  return false;
	}
      if (debug_windows)
	fprintf (stderr, "\n\tmapped %ld at %p, offset is %ld\n",
		 (long) real_size, i->data, (long) offset2);
      i->size = real_size;
      windowp->data = (PTR) ((bfd_byte *) i->data + offset2);
      windowp->size = size;
      i->mapped = 1;
      return true;
    }
  else if (debug_windows)
    {
      if (ok_to_map)
	fprintf (stderr, _("not mapping: data=%lx mapped=%d\n"),
		 (unsigned long) i->data, (int) i->mapped);
      else
	fprintf (stderr, _("not mapping: env var not set\n"));
    }
#else
  ok_to_map = 0;
#endif

#ifdef HAVE_MPROTECT
  if (!writable)
    {
      size_to_alloc += pagesize - 1;
      size_to_alloc -= size_to_alloc % pagesize;
    }
#endif
  if (debug_windows)
    fprintf (stderr, "\n\t%s(%6ld)",
	     i->data ? "realloc" : " malloc", (long) size_to_alloc);
  i->data = (PTR) bfd_realloc (i->data, size_to_alloc);
  if (debug_windows)
    fprintf (stderr, "\t-> %p\n", i->data);
  i->refcount = 1;
  if (i->data == NULL)
    {
      if (size_to_alloc == 0)
	return true;
      return false;
    }
  if (bfd_seek (abfd, offset, SEEK_SET) != 0)
    return false;
  i->size = bfd_bread (i->data, size, abfd);
  if (i->size != size)
    return false;
  i->mapped = 0;
#ifdef HAVE_MPROTECT
  if (!writable)
    {
      if (debug_windows)
	fprintf (stderr, "\tmprotect (%p, %ld, PROT_READ)\n", i->data,
		 (long) i->size);
      mprotect (i->data, i->size, PROT_READ);
    }
#endif
  windowp->data = i->data;
  windowp->size = i->size;
  return true;
}

#endif /* USE_MMAP */

bfd_size_type
bfd_bwrite (ptr, size, abfd)
     const PTR ptr;
     bfd_size_type size;
     bfd *abfd;
{
  size_t nwrote;

  if ((abfd->flags & BFD_IN_MEMORY) != 0)
    {
      struct bfd_in_memory *bim = (struct bfd_in_memory *) (abfd->iostream);
      size = (size_t) size;
      if (abfd->where + size > bim->size)
	{
	  bfd_size_type newsize, oldsize;

	  oldsize = (bim->size + 127) & ~(bfd_size_type) 127;
	  bim->size = abfd->where + size;
	  /* Round up to cut down on memory fragmentation */
	  newsize = (bim->size + 127) & ~(bfd_size_type) 127;
	  if (newsize > oldsize)
	    {
	      bim->buffer = (bfd_byte *) bfd_realloc (bim->buffer, newsize);
	      if (bim->buffer == 0)
		{
		  bim->size = 0;
		  return 0;
		}
	    }
	}
      memcpy (bim->buffer + abfd->where, ptr, (size_t) size);
      abfd->where += size;
      return size;
    }

  nwrote = fwrite (ptr, 1, (size_t) size, bfd_cache_lookup (abfd));
  if (nwrote != (size_t) -1)
    abfd->where += nwrote;
  if (nwrote != size)
    {
#ifdef ENOSPC
      errno = ENOSPC;
#endif
      bfd_set_error (bfd_error_system_call);
    }
  return nwrote;
}

a245 180
bfd_vma
bfd_tell (abfd)
     bfd *abfd;
{
  file_ptr ptr;

  if ((abfd->flags & BFD_IN_MEMORY) != 0)
    return abfd->where;

  ptr = ftell (bfd_cache_lookup (abfd));

  if (abfd->my_archive)
    ptr -= abfd->origin;
  abfd->where = ptr;
  return ptr;
}

int
bfd_flush (abfd)
     bfd *abfd;
{
  if ((abfd->flags & BFD_IN_MEMORY) != 0)
    return 0;
  return fflush (bfd_cache_lookup(abfd));
}

/* Returns 0 for success, negative value for failure (in which case
   bfd_get_error can retrieve the error code).  */
int
bfd_stat (abfd, statbuf)
     bfd *abfd;
     struct stat *statbuf;
{
  FILE *f;
  int result;

  if ((abfd->flags & BFD_IN_MEMORY) != 0)
    abort ();

  f = bfd_cache_lookup (abfd);
  if (f == NULL)
    {
      bfd_set_error (bfd_error_system_call);
      return -1;
    }
  result = fstat (fileno (f), statbuf);
  if (result < 0)
    bfd_set_error (bfd_error_system_call);
  return result;
}

/* Returns 0 for success, nonzero for failure (in which case bfd_get_error
   can retrieve the error code).  */

int
bfd_seek (abfd, position, direction)
     bfd *abfd;
     file_ptr position;
     int direction;
{
  int result;
  FILE *f;
  long file_position;
  /* For the time being, a BFD may not seek to it's end.  The problem
     is that we don't easily have a way to recognize the end of an
     element in an archive.  */

  BFD_ASSERT (direction == SEEK_SET || direction == SEEK_CUR);

  if (direction == SEEK_CUR && position == 0)
    return 0;

  if ((abfd->flags & BFD_IN_MEMORY) != 0)
    {
      struct bfd_in_memory *bim;

      bim = (struct bfd_in_memory *) abfd->iostream;

      if (direction == SEEK_SET)
	abfd->where = position;
      else
	abfd->where += position;

      if (abfd->where > bim->size)
	{
	  if ((abfd->direction == write_direction) ||
	      (abfd->direction == both_direction))
	    {
	      bfd_size_type newsize, oldsize;
	      oldsize = (bim->size + 127) & ~(bfd_size_type) 127;
	      bim->size = abfd->where;
	      /* Round up to cut down on memory fragmentation */
	      newsize = (bim->size + 127) & ~(bfd_size_type) 127;
	      if (newsize > oldsize)
	        {
		  bim->buffer = (bfd_byte *) bfd_realloc (bim->buffer, newsize);
		  if (bim->buffer == 0)
		    {
		      bim->size = 0;
		      return -1;
		    }
	        }
	    }
	  else
	    {
	      abfd->where = bim->size;
	      bfd_set_error (bfd_error_file_truncated);
	      return -1;
	    }
	}
      return 0;
    }

  if (abfd->format != bfd_archive && abfd->my_archive == 0)
    {
#if 0
      /* Explanation for this code: I'm only about 95+% sure that the above
	 conditions are sufficient and that all i/o calls are properly
	 adjusting the `where' field.  So this is sort of an `assert'
	 that the `where' field is correct.  If we can go a while without
	 tripping the abort, we can probably safely disable this code,
	 so that the real optimizations happen.  */
      file_ptr where_am_i_now;
      where_am_i_now = ftell (bfd_cache_lookup (abfd));
      if (abfd->my_archive)
	where_am_i_now -= abfd->origin;
      if (where_am_i_now != abfd->where)
	abort ();
#endif
      if (direction == SEEK_SET && (bfd_vma) position == abfd->where)
	return 0;
    }
  else
    {
      /* We need something smarter to optimize access to archives.
	 Currently, anything inside an archive is read via the file
	 handle for the archive.  Which means that a bfd_seek on one
	 component affects the `current position' in the archive, as
	 well as in any other component.

	 It might be sufficient to put a spike through the cache
	 abstraction, and look to the archive for the file position,
	 but I think we should try for something cleaner.

	 In the meantime, no optimization for archives.  */
    }

  f = bfd_cache_lookup (abfd);
  file_position = position;
  if (direction == SEEK_SET && abfd->my_archive != NULL)
    file_position += abfd->origin;

  result = fseek (f, file_position, direction);
  if (result != 0)
    {
      int hold_errno = errno;

      /* Force redetermination of `where' field.  */
      bfd_tell (abfd);

      /* An EINVAL error probably means that the file offset was
         absurd.  */
      if (hold_errno == EINVAL)
	bfd_set_error (bfd_error_file_truncated);
      else
	{
	  bfd_set_error (bfd_error_system_call);
	  errno = hold_errno;
	}
    }
  else
    {
      /* Adjust `where' field.  */
      if (direction == SEEK_SET)
	abfd->where = position;
      else
	abfd->where += position;
    }
  return result;
}
@


1.23
log
@	* aout-adobe.c: Don't compare against "true" or "false.
	* aout-target.h: Likewise.
	* aoutx.h: Likewise.
	* archive.c: Likewise.
	* bout.c: Likewise.
	* cache.c: Likewise.
	* coff-a29k.c: Likewise.
	* coff-alpha.c: Likewise.
	* coff-i386.c: Likewise.
	* coff-mips.c: Likewise.
	* coff-or32.c: Likewise.
	* coff64-rs6000.c: Likewise.
	* coffcode.h: Likewise.
	* coffgen.c: Likewise.
	* cpu-ns32k.c: Likewise.
	* ecoff.c: Likewise.
	* ecofflink.c: Likewise.
	* elf.c: Likewise.
	* elf32-arm.h: Likewise.
	* elf32-cris.c: Likewise.
	* elf32-d30v.c: Likewise.
	* elf32-i386.c: Likewise.
	* elf32-mcore.c: Likewise.
	* elf32-ppc.c: Likewise.
	* elf32-sh.c: Likewise.
	* elf32-sh64.c: Likewise.
	* elf32-v850.c: Likewise.
	* elf64-alpha.c: Likewise.
	* elf64-sh64.c: Likewise.
	* elfcode.h: Likewise.
	* elfcore.h: Likewise.
	* elflink.h: Likewise.
	* elfxx-mips.c: Likewise.
	* i386os9k.c: Likewise.
	* ieee.c: Likewise.
	* libbfd.c: Likewise.
	* linker.c: Likewise.
	* mmo.c: Likewise.
	* nlm32-alpha.c: Likewise.
	* nlm32-i386.c: Likewise.
	* nlm32-ppc.c: Likewise.
	* nlm32-sparc.c: Likewise.
	* nlmcode.h: Likewise.
	* oasys.c: Likewise.
	* pdp11.c: Likewise.
	* peicode.h: Likewise.
	* reloc.c: Likewise.
	* som.c: Likewise.
	* srec.c: Likewise.
	* tekhex.c: Likewise.
	* vms.c: Likewise.
	* xcofflink.c: Likewise.
	* elf64-sparc.c: Edit comment to not use "== false".

	* aoutf1.h: Don't use "? true : false".
	* ecoff.c: Likewise.
	* format.c: Likewise.
	* ieee.c: Likewise.
	* linker.c: Likewise.
	* mmo.c: Likewise.
	* oasys.c: Likewise.
@
text
@d189 1
a189 1
    ret = malloc ((size_t) size);
d191 1
a191 1
    ret = realloc (ptr, (size_t) size);
d565 1
a565 1
	      bim->buffer = bfd_realloc (bim->buffer, newsize);
d611 1
a611 1
  return bfd_bwrite ((PTR) buffer, (bfd_size_type) 4, abfd) == 4;
d709 1
a709 1
		  bim->buffer = bfd_realloc (bim->buffer, newsize);
d1417 1
a1417 1
  return (name[0] == locals_prefix);
@


1.23.14.1
log
@Merge drow-cplus-branch to:
  cvs rtag -D 2003-12-14 00:00:00 UTC drow-cplus-merge-20031214 gdb+dejagnu
@
text
@d3 1
a3 1
   2000, 2001, 2002, 2003
d31 2
d46 3
a48 2
bfd_boolean
bfd_false (bfd *ignore ATTRIBUTE_UNUSED)
d51 1
a51 1
  return FALSE;
d57 3
a59 2
bfd_boolean
bfd_true (bfd *ignore ATTRIBUTE_UNUSED)
d61 1
a61 1
  return TRUE;
d67 3
a69 2
void *
bfd_nullvoidptr (bfd *ignore ATTRIBUTE_UNUSED)
d76 2
a77 1
bfd_0 (bfd *ignore ATTRIBUTE_UNUSED)
d83 2
a84 1
bfd_0u (bfd *ignore ATTRIBUTE_UNUSED)
d90 2
a91 1
bfd_0l (bfd *ignore ATTRIBUTE_UNUSED)
d100 2
a101 1
_bfd_n1 (bfd *ignore_abfd ATTRIBUTE_UNUSED)
d108 2
a109 1
bfd_void (bfd *ignore ATTRIBUTE_UNUSED)
d113 4
a116 4
bfd_boolean
_bfd_nocore_core_file_matches_executable_p
  (bfd *ignore_core_bfd ATTRIBUTE_UNUSED,
   bfd *ignore_exec_bfd ATTRIBUTE_UNUSED)
d119 1
a119 1
  return FALSE;
d126 2
a127 1
_bfd_nocore_core_file_failing_command (bfd *ignore_abfd ATTRIBUTE_UNUSED)
d130 1
a130 1
  return NULL;
d137 2
a138 1
_bfd_nocore_core_file_failing_signal (bfd *ignore_abfd ATTRIBUTE_UNUSED)
d145 2
a146 1
_bfd_dummy_target (bfd *ignore_abfd ATTRIBUTE_UNUSED)
d154 3
a156 2
void *
bfd_malloc (bfd_size_type size)
d158 1
a158 1
  void *ptr;
d166 1
a166 1
  ptr = malloc ((size_t) size);
d175 4
a178 2
void *
bfd_realloc (void *ptr, bfd_size_type size)
d180 1
a180 1
  void *ret;
d201 3
a203 2
void *
bfd_zmalloc (bfd_size_type size)
d205 1
a205 1
  void *ptr;
d213 1
a213 1
  ptr = malloc ((size_t) size);
d225 366
d596 1
a596 1
	bfd_boolean bfd_write_bigendian_4byte_int (bfd *, unsigned int);
d604 4
a607 2
bfd_boolean
bfd_write_bigendian_4byte_int (bfd *abfd, unsigned int i)
d611 1
a611 1
  return bfd_bwrite (buffer, (bfd_size_type) 4, abfd) == 4;
d614 180
d834 1
a834 1
.  ((void) (*((unsigned char *) (ptr)) = (unsigned char) (val)))
d836 1
a836 1
.  bfd_put_8
d838 1
a838 1
.  (*(unsigned char *) (ptr) & 0xff)
d840 1
a840 1
.  (((*(unsigned char *) (ptr) & 0xff) ^ 0x80) - 0x80)
d843 1
a843 1
.  BFD_SEND (abfd, bfd_putx16, ((val),(ptr)))
d845 1
a845 1
.  bfd_put_16
d847 1
a847 1
.  BFD_SEND (abfd, bfd_getx16, (ptr))
d849 1
a849 1
.  BFD_SEND (abfd, bfd_getx_signed_16, (ptr))
d852 1
a852 1
.  BFD_SEND (abfd, bfd_putx32, ((val),(ptr)))
d854 1
a854 1
.  bfd_put_32
d856 1
a856 1
.  BFD_SEND (abfd, bfd_getx32, (ptr))
d858 1
a858 1
.  BFD_SEND (abfd, bfd_getx_signed_32, (ptr))
d861 1
a861 1
.  BFD_SEND (abfd, bfd_putx64, ((val), (ptr)))
d863 1
a863 1
.  bfd_put_64
d865 1
a865 1
.  BFD_SEND (abfd, bfd_getx64, (ptr))
d867 1
a867 1
.  BFD_SEND (abfd, bfd_getx_signed_64, (ptr))
d869 13
a881 13
.#define bfd_get(bits, abfd, ptr)			\
.  ((bits) == 8 ? (bfd_vma) bfd_get_8 (abfd, ptr)	\
.   : (bits) == 16 ? bfd_get_16 (abfd, ptr)		\
.   : (bits) == 32 ? bfd_get_32 (abfd, ptr)		\
.   : (bits) == 64 ? bfd_get_64 (abfd, ptr)		\
.   : (abort (), (bfd_vma) - 1))
.
.#define bfd_put(bits, abfd, val, ptr)			\
.  ((bits) == 8 ? bfd_put_8  (abfd, val, ptr)		\
.   : (bits) == 16 ? bfd_put_16 (abfd, val, ptr)		\
.   : (bits) == 32 ? bfd_put_32 (abfd, val, ptr)		\
.   : (bits) == 64 ? bfd_put_64 (abfd, val, ptr)		\
.   : (abort (), (void) 0))
d986 3
a988 2
#define COERCE32(x) (((bfd_signed_vma) (x) ^ 0x80000000) - 0x80000000)
#define EIGHT_GAZILLION ((BFD_HOST_64_BIT) 1 << 63)
d993 2
a994 1
bfd_getb16 (const bfd_byte *addr)
d1000 2
a1001 1
bfd_getl16 (const bfd_byte *addr)
d1007 2
a1008 1
bfd_getb_signed_16 (const bfd_byte *addr)
d1010 1
a1010 1
  return COERCE16 ((addr[0] << 8) | addr[1]);
d1014 2
a1015 1
bfd_getl_signed_16 (const bfd_byte *addr)
d1017 1
a1017 1
  return COERCE16 ((addr[1] << 8) | addr[0]);
d1021 3
a1023 1
bfd_putb16 (bfd_vma data, bfd_byte *addr)
d1030 3
a1032 1
bfd_putl16 (bfd_vma data, bfd_byte *addr)
d1039 2
a1040 1
bfd_getb32 (const bfd_byte *addr)
d1048 1
a1048 1
  return v;
d1052 2
a1053 1
bfd_getl32 (const bfd_byte *addr)
d1061 1
a1061 1
  return v;
d1065 2
a1066 1
bfd_getb_signed_32 (const bfd_byte *addr)
d1078 2
a1079 1
bfd_getl_signed_32 (const bfd_byte *addr)
d1091 2
a1092 1
bfd_getb64 (const bfd_byte *addr ATTRIBUTE_UNUSED)
d1095 1
a1095 1
  bfd_vma v;
d1097 9
a1105 8
  v  = addr[0]; v <<= 8;
  v |= addr[1]; v <<= 8;
  v |= addr[2]; v <<= 8;
  v |= addr[3]; v <<= 8;
  v |= addr[4]; v <<= 8;
  v |= addr[5]; v <<= 8;
  v |= addr[6]; v <<= 8;
  v |= addr[7];
d1107 1
a1107 1
  return v;
d1115 2
a1116 1
bfd_getl64 (const bfd_byte *addr ATTRIBUTE_UNUSED)
d1119 10
a1128 10
  bfd_vma v;

  v  = addr[7]; v <<= 8;
  v |= addr[6]; v <<= 8;
  v |= addr[5]; v <<= 8;
  v |= addr[4]; v <<= 8;
  v |= addr[3]; v <<= 8;
  v |= addr[2]; v <<= 8;
  v |= addr[1]; v <<= 8;
  v |= addr[0];
d1130 1
a1130 1
  return v;
d1143 1
a1143 1
  bfd_vma v;
d1145 9
a1153 8
  v  = addr[0]; v <<= 8;
  v |= addr[1]; v <<= 8;
  v |= addr[2]; v <<= 8;
  v |= addr[3]; v <<= 8;
  v |= addr[4]; v <<= 8;
  v |= addr[5]; v <<= 8;
  v |= addr[6]; v <<= 8;
  v |= addr[7];
d1155 1
a1155 1
  return COERCE64 (v);
d1167 10
a1176 1
  bfd_vma v;
d1178 1
a1178 10
  v  = addr[7]; v <<= 8;
  v |= addr[6]; v <<= 8;
  v |= addr[5]; v <<= 8;
  v |= addr[4]; v <<= 8;
  v |= addr[3]; v <<= 8;
  v |= addr[2]; v <<= 8;
  v |= addr[1]; v <<= 8;
  v |= addr[0];

  return COERCE64 (v);
d1186 8
a1193 6
bfd_putb32 (bfd_vma data, bfd_byte *addr)
{
  addr[0] = (bfd_byte) (data >> 24);
  addr[1] = (bfd_byte) (data >> 16);
  addr[2] = (bfd_byte) (data >>  8);
  addr[3] = (bfd_byte) data;
d1197 8
a1204 6
bfd_putl32 (bfd_vma data, bfd_byte *addr)
{
  addr[0] = (bfd_byte) data;
  addr[1] = (bfd_byte) (data >>  8);
  addr[2] = (bfd_byte) (data >> 16);
  addr[3] = (bfd_byte) (data >> 24);
d1208 3
a1210 1
bfd_putb64 (bfd_vma data ATTRIBUTE_UNUSED, bfd_byte *addr ATTRIBUTE_UNUSED)
d1227 3
a1229 1
bfd_putl64 (bfd_vma data ATTRIBUTE_UNUSED, bfd_byte *addr ATTRIBUTE_UNUSED)
d1246 5
a1250 1
bfd_put_bits (bfd_vma data, bfd_byte *addr, int bits, bfd_boolean big_p)
d1269 4
a1272 1
bfd_get_bits (bfd_byte *addr, int bits, bfd_boolean big_p)
d1295 7
a1301 6
bfd_boolean
_bfd_generic_get_section_contents (bfd *abfd,
				   sec_ptr section,
				   void *location,
				   file_ptr offset,
				   bfd_size_type count)
d1304 1
a1304 1
    return TRUE;
d1309 1
a1309 1
      return FALSE;
d1314 1
a1314 1
    return FALSE;
d1316 1
a1316 1
  return TRUE;
d1319 7
a1325 7
bfd_boolean
_bfd_generic_get_section_contents_in_window
  (bfd *abfd ATTRIBUTE_UNUSED,
   sec_ptr section ATTRIBUTE_UNUSED,
   bfd_window *w ATTRIBUTE_UNUSED,
   file_ptr offset ATTRIBUTE_UNUSED,
   bfd_size_type count ATTRIBUTE_UNUSED)
d1329 2
a1330 3
    return TRUE;
  if (abfd->xvec->_bfd_get_section_contents
      != _bfd_generic_get_section_contents)
d1338 2
a1339 1
      w->i = bfd_zmalloc (sizeof (bfd_window_internal));
d1341 2
a1342 2
	return FALSE;
      w->i->data = bfd_malloc (count);
d1347 1
a1347 1
	  return FALSE;
d1357 3
a1359 3
				TRUE))
    return FALSE;
  return TRUE;
d1369 7
a1375 6
bfd_boolean
_bfd_generic_set_section_contents (bfd *abfd,
				   sec_ptr section,
				   const void *location,
				   file_ptr offset,
				   bfd_size_type count)
d1378 1
a1378 1
    return TRUE;
d1382 1
a1382 1
    return FALSE;
d1384 1
a1384 1
  return TRUE;
d1400 2
a1401 1
bfd_log2 (bfd_vma x)
d1410 4
a1413 2
bfd_boolean
bfd_generic_is_local_label_name (bfd *abfd, const char *name)
d1417 1
a1417 1
  return name[0] == locals_prefix;
d1422 5
a1426 3
    TRUE for a match, otherwise returns FALSE and emits an error.  */
bfd_boolean
_bfd_generic_verify_endian_match (bfd *ibfd, bfd *obfd)
d1442 1
a1442 1
      return FALSE;
d1445 1
a1445 1
  return TRUE;
d1452 5
a1456 4
warn_deprecated (const char *what,
		 const char *file,
		 int line,
		 const char *func)
d1463 1
a1463 1
      /* Note: separate sentences in order to allow
@


1.23.2.1
log
@Merge from mainline.
@
text
@d189 1
a189 1
    ret = (PTR) malloc ((size_t) size);
d191 1
a191 1
    ret = (PTR) realloc (ptr, (size_t) size);
d565 1
a565 1
	      bim->buffer = (bfd_byte *) bfd_realloc (bim->buffer, newsize);
d611 1
a611 1
  return (boolean) (bfd_bwrite ((PTR) buffer, (bfd_size_type) 4, abfd) == 4);
d709 1
a709 1
		  bim->buffer = (bfd_byte *) bfd_realloc (bim->buffer, newsize);
d1417 1
a1417 1
  return (boolean) (name[0] == locals_prefix);
@


1.23.12.1
log
@2002-10-25  David Carlton  <carlton@@math.stanford.edu>

	* symtab.c (lookup_symbol_aux_block): New function.
	(lookup_symbol_aux_local): Call lookup_symbol_aux_block.
	(lookup_symbol_aux): Ditto.

	* Merge from mainline; tag is carlton_dictionary-20021025-merge.

2002-10-25  David Carlton  <carlton@@math.stanford.edu>

	* cp-support.c: Add comment to demangled name pitfalls.
	* symtab.c (lookup_transparent_type): Add FIXME comment at
	beginning.

2002-10-23  David Carlton  <carlton@@math.stanford.edu>

	* symtab.c: Delete cplusplus_hint.
	Delete prototype for find_template_name_end.
	* dwarf2read.c (scan_partial_symbols): Add in a gdb_assert from a
	later version of my namespace_minimal patch.

2002-10-25  David Carlton  <carlton@@math.stanford.edu>

	* gdb.c++/namespace.exp: Change all of the setup_xfail tests that
	I added into setup_kfails.
@
text
@d189 1
a189 1
    ret = (PTR) malloc ((size_t) size);
d191 1
a191 1
    ret = (PTR) realloc (ptr, (size_t) size);
d565 1
a565 1
	      bim->buffer = (bfd_byte *) bfd_realloc (bim->buffer, newsize);
d611 1
a611 1
  return (boolean) (bfd_bwrite ((PTR) buffer, (bfd_size_type) 4, abfd) == 4);
d709 1
a709 1
		  bim->buffer = (bfd_byte *) bfd_realloc (bim->buffer, newsize);
d1417 1
a1417 1
  return (boolean) (name[0] == locals_prefix);
@


1.23.12.2
log
@2002-12-23  David Carlton  <carlton@@math.stanford.edu>

	* Merge from mainline; tag is carlton_dictionary-20021223-merge.
@
text
@d31 2
d46 1
a46 1
bfd_boolean
d51 1
a51 1
  return FALSE;
d57 1
a57 1
bfd_boolean
d61 1
a61 1
  return TRUE;
d113 1
a113 1
bfd_boolean
d119 1
a119 1
  return FALSE;
d225 366
d596 1
a596 1
	bfd_boolean bfd_write_bigendian_4byte_int (bfd *, unsigned int);
d604 1
a604 1
bfd_boolean
d611 52
a662 1
  return bfd_bwrite ((PTR) buffer, (bfd_size_type) 4, abfd) == 4;
d665 129
d1250 1
a1250 1
     bfd_boolean big_p;
d1272 1
a1272 1
     bfd_boolean big_p;
d1295 1
a1295 1
bfd_boolean
d1304 1
a1304 1
    return TRUE;
d1309 1
a1309 1
      return FALSE;
d1314 1
a1314 1
    return FALSE;
d1316 1
a1316 1
  return TRUE;
d1319 1
a1319 1
bfd_boolean
d1329 1
a1329 1
    return TRUE;
d1341 1
a1341 1
	return FALSE;
d1347 1
a1347 1
	  return FALSE;
d1357 3
a1359 3
				TRUE))
    return FALSE;
  return TRUE;
d1369 1
a1369 1
bfd_boolean
d1378 1
a1378 1
    return TRUE;
d1382 1
a1382 1
    return FALSE;
d1384 1
a1384 1
  return TRUE;
d1410 1
a1410 1
bfd_boolean
d1417 1
a1417 1
  return name[0] == locals_prefix;
d1422 2
a1423 2
    TRUE for a match, otherwise returns FALSE and emits an error.  */
bfd_boolean
d1442 1
a1442 1
      return FALSE;
d1445 1
a1445 1
  return TRUE;
d1463 1
a1463 1
      /* Note: separate sentences in order to allow
@


1.23.12.3
log
@2003-08-05  David Carlton  <carlton@@kealia.com>

	* configure.in (build_warnings): Delete -Wformat-nonliteral.
	* configure (build_warnings): Ditto.

	* Merge with mainline; tag is carlton_dictionary-20030805-merge.
@
text
@d3 1
a3 1
   2000, 2001, 2002, 2003
d45 2
a46 1
bfd_false (bfd *ignore ATTRIBUTE_UNUSED)
d56 2
a57 1
bfd_true (bfd *ignore ATTRIBUTE_UNUSED)
d65 3
a67 2
void *
bfd_nullvoidptr (bfd *ignore ATTRIBUTE_UNUSED)
d74 2
a75 1
bfd_0 (bfd *ignore ATTRIBUTE_UNUSED)
d81 2
a82 1
bfd_0u (bfd *ignore ATTRIBUTE_UNUSED)
d88 2
a89 1
bfd_0l (bfd *ignore ATTRIBUTE_UNUSED)
d98 2
a99 1
_bfd_n1 (bfd *ignore_abfd ATTRIBUTE_UNUSED)
d106 2
a107 1
bfd_void (bfd *ignore ATTRIBUTE_UNUSED)
d112 3
a114 3
_bfd_nocore_core_file_matches_executable_p
  (bfd *ignore_core_bfd ATTRIBUTE_UNUSED,
   bfd *ignore_exec_bfd ATTRIBUTE_UNUSED)
d124 2
a125 1
_bfd_nocore_core_file_failing_command (bfd *ignore_abfd ATTRIBUTE_UNUSED)
d128 1
a128 1
  return NULL;
d135 2
a136 1
_bfd_nocore_core_file_failing_signal (bfd *ignore_abfd ATTRIBUTE_UNUSED)
d143 2
a144 1
_bfd_dummy_target (bfd *ignore_abfd ATTRIBUTE_UNUSED)
d152 3
a154 2
void *
bfd_malloc (bfd_size_type size)
d156 1
a156 1
  void *ptr;
d164 1
a164 1
  ptr = malloc ((size_t) size);
d173 4
a176 2
void *
bfd_realloc (void *ptr, bfd_size_type size)
d178 1
a178 1
  void *ret;
d187 1
a187 1
    ret = malloc ((size_t) size);
d189 1
a189 1
    ret = realloc (ptr, (size_t) size);
d199 3
a201 2
void *
bfd_zmalloc (bfd_size_type size)
d203 1
a203 1
  void *ptr;
d211 1
a211 1
  ptr = malloc ((size_t) size);
d237 3
a239 1
bfd_write_bigendian_4byte_int (bfd *abfd, unsigned int i)
d243 1
a243 1
  return bfd_bwrite (buffer, (bfd_size_type) 4, abfd) == 4;
d286 1
a286 1
.  ((void) (*((unsigned char *) (ptr)) = (unsigned char) (val)))
d288 1
a288 1
.  bfd_put_8
d290 1
a290 1
.  (*(unsigned char *) (ptr) & 0xff)
d292 1
a292 1
.  (((*(unsigned char *) (ptr) & 0xff) ^ 0x80) - 0x80)
d295 1
a295 1
.  BFD_SEND (abfd, bfd_putx16, ((val),(ptr)))
d297 1
a297 1
.  bfd_put_16
d299 1
a299 1
.  BFD_SEND (abfd, bfd_getx16, (ptr))
d301 1
a301 1
.  BFD_SEND (abfd, bfd_getx_signed_16, (ptr))
d304 1
a304 1
.  BFD_SEND (abfd, bfd_putx32, ((val),(ptr)))
d306 1
a306 1
.  bfd_put_32
d308 1
a308 1
.  BFD_SEND (abfd, bfd_getx32, (ptr))
d310 1
a310 1
.  BFD_SEND (abfd, bfd_getx_signed_32, (ptr))
d313 1
a313 1
.  BFD_SEND (abfd, bfd_putx64, ((val), (ptr)))
d315 1
a315 1
.  bfd_put_64
d317 1
a317 1
.  BFD_SEND (abfd, bfd_getx64, (ptr))
d319 1
a319 1
.  BFD_SEND (abfd, bfd_getx_signed_64, (ptr))
d321 13
a333 13
.#define bfd_get(bits, abfd, ptr)			\
.  ((bits) == 8 ? (bfd_vma) bfd_get_8 (abfd, ptr)	\
.   : (bits) == 16 ? bfd_get_16 (abfd, ptr)		\
.   : (bits) == 32 ? bfd_get_32 (abfd, ptr)		\
.   : (bits) == 64 ? bfd_get_64 (abfd, ptr)		\
.   : (abort (), (bfd_vma) - 1))
.
.#define bfd_put(bits, abfd, val, ptr)			\
.  ((bits) == 8 ? bfd_put_8  (abfd, val, ptr)		\
.   : (bits) == 16 ? bfd_put_16 (abfd, val, ptr)		\
.   : (bits) == 32 ? bfd_put_32 (abfd, val, ptr)		\
.   : (bits) == 64 ? bfd_put_64 (abfd, val, ptr)		\
.   : (abort (), (void) 0))
d438 3
a440 2
#define COERCE32(x) (((bfd_signed_vma) (x) ^ 0x80000000) - 0x80000000)
#define EIGHT_GAZILLION ((BFD_HOST_64_BIT) 1 << 63)
d445 2
a446 1
bfd_getb16 (const bfd_byte *addr)
d452 2
a453 1
bfd_getl16 (const bfd_byte *addr)
d459 2
a460 1
bfd_getb_signed_16 (const bfd_byte *addr)
d462 1
a462 1
  return COERCE16 ((addr[0] << 8) | addr[1]);
d466 2
a467 1
bfd_getl_signed_16 (const bfd_byte *addr)
d469 1
a469 1
  return COERCE16 ((addr[1] << 8) | addr[0]);
d473 3
a475 1
bfd_putb16 (bfd_vma data, bfd_byte *addr)
d482 3
a484 1
bfd_putl16 (bfd_vma data, bfd_byte *addr)
d491 2
a492 1
bfd_getb32 (const bfd_byte *addr)
d500 1
a500 1
  return v;
d504 2
a505 1
bfd_getl32 (const bfd_byte *addr)
d513 1
a513 1
  return v;
d517 2
a518 1
bfd_getb_signed_32 (const bfd_byte *addr)
d530 2
a531 1
bfd_getl_signed_32 (const bfd_byte *addr)
d543 2
a544 1
bfd_getb64 (const bfd_byte *addr ATTRIBUTE_UNUSED)
d547 1
a547 1
  bfd_vma v;
d549 9
a557 8
  v  = addr[0]; v <<= 8;
  v |= addr[1]; v <<= 8;
  v |= addr[2]; v <<= 8;
  v |= addr[3]; v <<= 8;
  v |= addr[4]; v <<= 8;
  v |= addr[5]; v <<= 8;
  v |= addr[6]; v <<= 8;
  v |= addr[7];
d559 1
a559 1
  return v;
d567 2
a568 1
bfd_getl64 (const bfd_byte *addr ATTRIBUTE_UNUSED)
d571 10
a580 10
  bfd_vma v;

  v  = addr[7]; v <<= 8;
  v |= addr[6]; v <<= 8;
  v |= addr[5]; v <<= 8;
  v |= addr[4]; v <<= 8;
  v |= addr[3]; v <<= 8;
  v |= addr[2]; v <<= 8;
  v |= addr[1]; v <<= 8;
  v |= addr[0];
d582 1
a582 1
  return v;
d595 1
a595 1
  bfd_vma v;
d597 9
a605 8
  v  = addr[0]; v <<= 8;
  v |= addr[1]; v <<= 8;
  v |= addr[2]; v <<= 8;
  v |= addr[3]; v <<= 8;
  v |= addr[4]; v <<= 8;
  v |= addr[5]; v <<= 8;
  v |= addr[6]; v <<= 8;
  v |= addr[7];
d607 1
a607 1
  return COERCE64 (v);
d619 10
a628 1
  bfd_vma v;
d630 1
a630 10
  v  = addr[7]; v <<= 8;
  v |= addr[6]; v <<= 8;
  v |= addr[5]; v <<= 8;
  v |= addr[4]; v <<= 8;
  v |= addr[3]; v <<= 8;
  v |= addr[2]; v <<= 8;
  v |= addr[1]; v <<= 8;
  v |= addr[0];

  return COERCE64 (v);
d638 8
a645 6
bfd_putb32 (bfd_vma data, bfd_byte *addr)
{
  addr[0] = (bfd_byte) (data >> 24);
  addr[1] = (bfd_byte) (data >> 16);
  addr[2] = (bfd_byte) (data >>  8);
  addr[3] = (bfd_byte) data;
d649 8
a656 6
bfd_putl32 (bfd_vma data, bfd_byte *addr)
{
  addr[0] = (bfd_byte) data;
  addr[1] = (bfd_byte) (data >>  8);
  addr[2] = (bfd_byte) (data >> 16);
  addr[3] = (bfd_byte) (data >> 24);
d660 3
a662 1
bfd_putb64 (bfd_vma data ATTRIBUTE_UNUSED, bfd_byte *addr ATTRIBUTE_UNUSED)
d679 3
a681 1
bfd_putl64 (bfd_vma data ATTRIBUTE_UNUSED, bfd_byte *addr ATTRIBUTE_UNUSED)
d698 5
a702 1
bfd_put_bits (bfd_vma data, bfd_byte *addr, int bits, bfd_boolean big_p)
d721 4
a724 1
bfd_get_bits (bfd_byte *addr, int bits, bfd_boolean big_p)
d748 6
a753 5
_bfd_generic_get_section_contents (bfd *abfd,
				   sec_ptr section,
				   void *location,
				   file_ptr offset,
				   bfd_size_type count)
d772 6
a777 6
_bfd_generic_get_section_contents_in_window
  (bfd *abfd ATTRIBUTE_UNUSED,
   sec_ptr section ATTRIBUTE_UNUSED,
   bfd_window *w ATTRIBUTE_UNUSED,
   file_ptr offset ATTRIBUTE_UNUSED,
   bfd_size_type count ATTRIBUTE_UNUSED)
d782 1
a782 2
  if (abfd->xvec->_bfd_get_section_contents
      != _bfd_generic_get_section_contents)
d790 2
a791 1
      w->i = bfd_zmalloc (sizeof (bfd_window_internal));
d794 1
a794 1
      w->i->data = bfd_malloc (count);
d822 6
a827 5
_bfd_generic_set_section_contents (bfd *abfd,
				   sec_ptr section,
				   void *location,
				   file_ptr offset,
				   bfd_size_type count)
d852 2
a853 1
bfd_log2 (bfd_vma x)
d863 3
a865 1
bfd_generic_is_local_label_name (bfd *abfd, const char *name)
d876 3
a878 1
_bfd_generic_verify_endian_match (bfd *ibfd, bfd *obfd)
d904 5
a908 4
warn_deprecated (const char *what,
		 const char *file,
		 int line,
		 const char *func)
@


1.23.12.4
log
@2003-11-11  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton-dictionary-20031111-merge.
@
text
@d774 1
a774 1
				   const void *location,
@


1.22
log
@	* libbfd.c (bfd_write_bigendian_4byte_int): Return true iff success.
	* libbfd.h: Regenerate.
	* archive.c (coff_write_armap): Pass on failures from
	bfd_write_bigendian_4byte_int.
@
text
@d1356 2
a1357 2
      || (bfd_get_file_window (abfd, section->filepos + offset, count, w, true)
	  == false))
@


1.22.6.1
log
@Merge w/trunk (kseitz_interps-20020722-merge).
@
text
@d1356 2
a1357 2
      || ! bfd_get_file_window (abfd, section->filepos + offset, count, w,
				true))
@


1.22.6.2
log
@merge from mainline
@
text
@d189 1
a189 1
    ret = (PTR) malloc ((size_t) size);
d191 1
a191 1
    ret = (PTR) realloc (ptr, (size_t) size);
d565 1
a565 1
	      bim->buffer = (bfd_byte *) bfd_realloc (bim->buffer, newsize);
d611 1
a611 1
  return (boolean) (bfd_bwrite ((PTR) buffer, (bfd_size_type) 4, abfd) == 4);
d709 1
a709 1
		  bim->buffer = (bfd_byte *) bfd_realloc (bim->buffer, newsize);
d1417 1
a1417 1
  return (boolean) (name[0] == locals_prefix);
@


1.21
log
@Fixes for better translation into other languages
@
text
@d596 1
a596 1
	void bfd_write_bigendian_4byte_int (bfd *, unsigned int);
d604 1
a604 1
void
d611 1
a611 2
  if (bfd_bwrite ((PTR) buffer, (bfd_size_type) 4, abfd) != 4)
    abort ();
@


1.21.2.1
log
@	* aclocal.m4: Regenerate.
	* config.in: Regenerate.
	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.

	Merge from mainline
	2002-03-27  Gregory Steuck <greg@@nest.cx>
	* elf.c (_bfd_elf_get_symtab_upper_bound): Leave space for
	terminating NULL if empty symbol table.
	(_bfd_elf_get_dynamic_symtab_upper_bound): Likewise.

	2002-03-26  Alan Modra  <amodra@@bigpond.net.au>
	* elflink.h (elf_gc_mark): Don't recurse into non-ELF sections.

	2002-03-23  Alan Modra  <amodra@@bigpond.net.au>
	* elf.c (_bfd_elf_make_section_from_shdr): Don't set lma based on
	section file offset for !SEC_LOAD sections.

	2002-03-20  Daniel Jacobowitz  <drow@@mvista.com>
	* dwarf2.c (struct funcinfo): Move up.
	(lookup_address_in_function_table): New argument function_ptr.
	Set it.
	(lookup_address_in_line_table): New argument function.  If function
	is non-NULL, use it to handle ``addr'' before the first line note of
	the function.
	(comp_unit_find_nearest_line): Update and swap calls to
	lookup_address_in_function_table and lookup_address_in_line_table.
	* syms.c (_bfd_stab_section_find_nearest_line): Use the first
	N_SLINE encountered if we see an N_FUN before any N_SLINE.

	2002-03-18  Alan Modra  <amodra@@bigpond.net.au>
	* libbfd.c (bfd_write_bigendian_4byte_int): Return true iff success.
	* libbfd.h: Regenerate.
	* archive.c (coff_write_armap): Pass on failures from
	bfd_write_bigendian_4byte_int.

	2002-03-14  H.J. Lu <hjl@@gnu.org>
	* elflink.h (NAME(bfd_elf,size_dynamic_sections)): Set the BFD
	error to bfd_error_nonrepresentable_section for reinit_array
	section in DSO.

	2002-03-14  Nick Clifton  <nickc@@cambridge.redhat.com>
	* coffcode.h (coff_slurp_symbol_table): When adding BSF_WEAK flag,
	OR it in rather than replacing previously selected flags.
	* elfxx-target.h (TARGET_BIG_SYM): Set ar_max_namelen to 15.
	(TARGET_LITTLE_SYM): Set ar_max_namelen to 15.

	2002-03-14  Alan Modra  <amodra@@bigpond.net.au>
	* elflink.h (elf_bfd_final_link): Revert last change.  Instead,
	ensure reloc size matches before calling elf_link_input_bfd.
	Add an assert to check reloc size when counting output relocs.

	2002-03-14  Nick Clifton  <nickc@@cambridge.redhat.com>
	* mmo.c (mmo_get_loc): Return NULL rather than false.

	2002-03-13  Alan Modra  <amodra@@bigpond.net.au>
	* elflink.h: Formatting fixes.
	(elf_link_output_extsym): Merge undefined and undef weak cases.
	* elflink.h (elf_bfd_final_link): Only call elf_link_input_bfd
	when word size of input matches output word size.

	2002-03-07  H.J. Lu  (hjl@@gnu.org)
	* coff-sh.c (shcoff_reloc_map): Use bfd_reloc_code_real_type
	as the type for bfd_reloc_val.

	2002-03-05  John David Anglin  <dave@@hiauly1.hia.nrc.ca>
	* elf-hppa.h (elf_hppa_is_dynamic_loader_symbol): New function.
	(elf_hppa_relocate_section): Ignore undefined dynamic loader symbols.
	(elf_hppa_final_link_relocate): Correct relocations for indirect
	references to local data through the DLT.  Fix .opd creation for
	local symbols using R_PARISC_LTOFF_FPTR32 and R_PARISC_FPTR64
	relocations.  Use e_lsel selector for R_PARISC_DLTIND21L,
	R_PARISC_LTOFF_FPTR21L and R_PARISC_LTOFF_TP21L as per
	"Processor-Specific ELF for PA_RISC, Version 1.43" document.
	Similarly, use e_rsel for DLT and LTOFF 'R' relocations.
	* elf32-hppa.c (final_link_relocate): Revise relocation selectors
	as per "Processor-Specific ELF for PA_RISC, Version 1.43" document.

	2002-03-05  Jakub Jelinek  <jakub@@redhat.com>
	* merge.c (_bfd_merge_sections): Don't segfault if there
	is nothing to merge due to GC.

	2002-03-05  Alan Modra  <amodra@@bigpond.net.au>
	* elf32-hppa.c (clobber_millicode_symbols): Remove hack to keep
	symbols that have been forced local.
	* elflink.h (elf_bfd_final_link): Call elf_link_output_extsym
	to output forced local syms for non-shared link.
	(elf_link_output_extsym): Tweak condition for calling backend
	adjust_dynamic_symbol so that previous behaviour is kept.
	Whitespace changes throughout file.

	2002-03-04  H.J. Lu <hjl@@gnu.org>
	* elf.c (bfd_section_from_shdr): Handle special sections,
	.init_array, .fini_array and .preinit_array.
	(elf_fake_sections): Likewise.
	* elflink.h (NAME(bfd_elf,size_dynamic_sections)): Create the
	DT entry only if the section is in output for .init_array,
	.fini_array and .preinit_array. Complain about .preinit_array
	section in DSO.
	(elf_bfd_final_link): Warn zero size for .init_array,
	.fini_array and .preinit_array sections.
	* elfxx-ia64.c (elfNN_ia64_section_from_shdr): Remove
	SHT_INIT_ARRAY, SHT_FINI_ARRAY and SHT_PREINIT_ARRAY.
	(elfNN_ia64_fake_sections): Remove .init_array, .fini_array and
	.preinit_array.

	2002-03-01  David Mosberger  <davidm@@hpl.hp.com>
	* elflink.h (size_dynamic_sections): If section named
	".preinit_array" exists, create DT_PREINIT_ARRAY and
	DT_PREINIT_ARRAYSZ entries in dynamic table.  Analogously for
	".init_array" and ".fini_array".
	(elf_bfd_final_link): Handle DT_PREINIT_ARRAYSZ, DT_INIT_ARRAYSZ,
	DT_FINI_ARRAYSZ, DT_PREINIT_ARRAY, DT_INIT_ARRAY, and
	DT_FINI_ARRAY.

	2002-02-19  Frank Ch. Eigler  <fche@@redhat.com>
	* syms.c (stt[]): Sorted.  Added .init/.fini -> "t" mapping.

	2002-02-13  Nick Clifton  <nickc@@cambridge.redhat.com>
	* elf.c (_bfd_elf_make_section_from_shdr): Do not insist on
	non-zero physical addresses when adjusting the LMAs of new
	sections.

	2002-02-11  Michael Snyder  <msnyder@@redhat.com>
	* elf-bfd.h (elfcore_write_lwpstatus): Add prototype.
	* elf.c (elfcore_grok_pstatus): Add prototype.
	(elfcore_grok_lwpstatus): Add prototype.
	(elfcore_write_lwpstatus): New function.
	(elfcore_write_pstatus): Fix typo, eliminate unnecessary memcpy.
@
text
@d596 1
a596 1
	boolean bfd_write_bigendian_4byte_int (bfd *, unsigned int);
d604 1
a604 1
boolean
d611 2
a612 1
  return bfd_bwrite ((PTR) buffer, (bfd_size_type) 4, abfd) == 4;
@


1.20
log
@Fix compile time warnings
@
text
@d3 1
a3 1
   2000, 2001
d7 1
a7 1
This file is part of BFD, the Binary File Descriptor library.
d9 13
a21 13
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
d1451 1
d1464 2
a1465 1
      fprintf (stderr, _("Deprecated %s called"), what);
d1467 2
a1468 1
	fprintf (stderr, _(" at %s line %d in %s\n"), file, line, func);
d1470 1
a1470 1
	fprintf (stderr, "\n");
@


1.19
log
@	* bfd.c (bfd_archive_filename): New function.
	* bfd-in2.h: Regenerate.
	* aout-adobe.c: Replace bfd_get_filename with bfd_archive_filename
	in error messages where the bfd is an input bfd.
	* aout-cris.c: Likewise.
	* coff-arm.c: Likewise.
	* coff-mcore.c: Likewise.
	* coff-ppc.c: Likewise.
	* coff-rs6000.c: Likewise.
	* coff-sh.c: Likewise.
	* coff-tic54x.c: Likewise.
	* coff-tic80.c: Likewise.
	* coff64-rs6000.c: Likewise.
	* coffcode.h: Likewise.
	* coffgen.c: Likewise.
	* cofflink.c: Likewise.
	* ecofflink.c: Likewise.
	* elf-hppa.h: Likewise.
	* elf.c: Likewise.
	* elf32-arm.h: Likewise.
	* elf32-cris.c: Likewise.
	* elf32-gen.c: Likewise.
	* elf32-hppa.c: Likewise.
	* elf32-i370.c: Likewise.
	* elf32-i386.c: Likewise.
	* elf32-m32r.c: Likewise.
	* elf32-mcore.c: Likewise.
	* elf32-mips.c: Likewise.
	* elf32-ppc.c: Likewise.
	* elf32-s390.c: Likewise.
	* elf32-sh.c: Likewise.
	* elf32-sparc.c: Likewise.
	* elf32-v850.c: Likewise.
	* elf64-alpha.c: Likewise.
	* elf64-gen.c: Likewise.
	* elf64-ppc.c: Likewise.
	* elf64-s390.c: Likewise.
	* elf64-sparc.c: Likewise.
	* elf64-x86-64.c: Likewise.
	* elflink.h: Likewise.
	* elfxx-ia64.c: Likewise.
	* ieee.c: Likewise.
	* ihex.c: Likewise.
	* libbfd.c: Likewise.
	* pdp11.c: Likewise.
	* pe-mips.c: Likewise.
	* peicode.h: Likewise.
	* srec.c: Likewise.
	* xcofflink.c: Likewise.

	* elf32-arm.h: Make _bfd_error_handler calls K&R compatible.

	* elflink.c (_bfd_elf_create_linker_section): Better grammar for
	error message.

	* coff-mcore.c (coff_mcore_relocate_section): Internalionalise
	error message.

	* elf64-sparc.c (sparc64_elf_add_symbol_hook): Constify stt_types.
	Consolidate error messages, and split long messages to two lines.
@
text
@d584 1
a584 2
      if (nwrote >= 0)
	errno = ENOSPC;
d871 1
a871 1
.                ((bits) == 8 ? bfd_get_8 (abfd, ptr)		\
d878 1
a878 1
.                ((bits) == 8 ? bfd_put_8 (abfd, val, ptr)	\
@


1.18
log
@Touches most files in bfd/, so likely will be blamed for everything..

o  bfd_read and bfd_write lose an unnecessary param and become
   bfd_bread and bfd_bwrite.

o  bfd_*alloc now all take a bfd_size_type arg, and will error if
   size_t is too small.  eg. 32 bit host, 64 bit bfd, verrry big files
   or bugs in linker scripts etc.

o  file_ptr becomes a bfd_signed_vma.  Besides matching sizes with
   various other types involved in handling sections, this should make
   it easier for bfd to support a 64 bit off_t on 32 bit hosts that
   provide it.

o  I've made the H_GET_* and H_PUT_* macros (which invoke bfd_h_{get,put}_*)
   generally available.  They now cast their args to bfd_vma and
   bfd_byte * as appropriate, which removes a swag of casts from the
   source.

o  Bug fixes to bfd_get8, aix386_core_vec, elf32_h8_relax_section, and
   aout-encap.c.

o  Zillions of formatting and -Wconversion fixes.
@
text
@d1441 1
a1441 1
      (*_bfd_error_handler) (msg, bfd_get_filename (ibfd));
@


1.17
log
@Support for xcoff64
@
text
@d31 1
a31 1
static int real_read PARAMS ((PTR, size_t, size_t, FILE *));
d156 1
a156 1
     size_t size;
d160 8
a167 2
  ptr = (PTR) malloc (size);
  if (ptr == NULL && size != 0)
d169 1
d178 1
a178 1
     size_t size;
d182 6
d189 1
a189 1
    ret = malloc (size);
d191 1
a191 1
    ret = realloc (ptr, size);
d193 1
a193 1
  if (ret == NULL)
d203 1
a203 1
     size_t size;
d207 7
a213 1
  ptr = (PTR) malloc (size);
d215 1
a215 1
  if (size != 0)
d220 1
a220 1
	memset (ptr, 0, size);
d235 2
a236 2
static int
real_read (where, a,b, file)
d264 1
a264 2
/* Return value is amount read (FIXME: how are errors and end of file dealt
   with?  We never call bfd_set_error, which is probably a mistake).  */
d267 1
a267 1
bfd_read (ptr, size, nitems, abfd)
a269 1
     bfd_size_type nitems;
d272 1
a272 1
  int nread;
d280 1
a280 1
      get = size * nitems;
d289 1
a289 1
      memcpy (ptr, bim->buffer + abfd->where, get);
d294 2
a295 2
  nread = real_read (ptr, 1, (size_t) (size*nitems), bfd_cache_lookup(abfd));
  if (nread > 0)
d305 1
a305 1
  if (nread != (int) (size * nitems))
d406 1
a406 1
  size_t size_to_alloc = size;
d422 3
a424 1
      windowp->i = i = (bfd_window_internal *) bfd_zmalloc (sizeof (bfd_window_internal));
a518 1
      bfd_set_error (bfd_error_no_memory);
d523 1
a523 1
  i->size = bfd_read (i->data, size, 1, abfd);
d544 2
a545 2
bfd_write (ptr, size, nitems, abfd)
     CONST PTR ptr;
a546 1
     bfd_size_type nitems;
d549 1
a549 1
  long nwrote;
d554 1
a554 1
      size *= nitems;
d557 3
a559 1
	  long newsize, oldsize = (bim->size + 127) & ~127;
d562 1
a562 1
	  newsize = (bim->size + 127) & ~127;
d573 1
a573 1
      memcpy (bim->buffer + abfd->where, ptr, size);
d578 2
a579 3
  nwrote = fwrite (ptr, 1, (size_t) (size * nitems),
		   bfd_cache_lookup (abfd));
  if (nwrote > 0)
d581 1
a581 1
  if ((bfd_size_type) nwrote != size * nitems)
d597 1
a597 1
	void bfd_write_bigendian_4byte_int(bfd *abfd,  int i);
d608 1
a608 1
     int i;
d611 2
a612 2
  bfd_putb32(i, buffer);
  if (bfd_write((PTR)buffer, 4, 1, abfd) != 4)
d616 1
a616 1
long
d625 1
a625 1
  ptr = ftell (bfd_cache_lookup(abfd));
d678 1
a678 1
  file_ptr file_position;
d699 1
a699 1
      if ((bfd_size_type) abfd->where > bim->size)
d704 2
a705 1
	      long newsize, oldsize = (bim->size + 127) & ~127;
d708 1
a708 1
	      newsize = (bim->size + 127) & ~127;
a714 1
		      bfd_set_error (bfd_error_no_memory);
d745 1
a745 1
      if (direction == SEEK_SET && position == abfd->where)
d840 1
a840 1
.                (*(unsigned char *) (ptr))
d842 1
a842 1
.		((*(unsigned char *) (ptr) ^ 0x80) - 0x80)
d894 1
a894 1
	bretheren, except that they are used for removing information
d902 1
a902 1
.		bfd_put_8 (abfd, val, ptr)
d904 1
a904 1
.		bfd_put_8 (abfd, val, ptr)
d906 1
a906 1
.		bfd_get_8 (abfd, ptr)
d908 1
a908 1
.		bfd_get_signed_8 (abfd, ptr)
d911 1
a911 1
.                BFD_SEND(abfd, bfd_h_putx16,(val,ptr))
d913 1
a913 1
.		 bfd_h_put_16
d915 1
a915 1
.                BFD_SEND(abfd, bfd_h_getx16,(ptr))
d917 1
a917 1
.		 BFD_SEND(abfd, bfd_h_getx_signed_16, (ptr))
d920 1
a920 1
.                BFD_SEND(abfd, bfd_h_putx32,(val,ptr))
d922 1
a922 1
.		 bfd_h_put_32
d924 1
a924 1
.                BFD_SEND(abfd, bfd_h_getx32,(ptr))
d926 1
a926 1
.		 BFD_SEND(abfd, bfd_h_getx_signed_32, (ptr))
d929 1
a929 1
.                BFD_SEND(abfd, bfd_h_putx64,(val, ptr))
d931 1
a931 1
.		 bfd_h_put_64
d933 1
a933 1
.                BFD_SEND(abfd, bfd_h_getx64,(ptr))
d935 7
a941 1
.		 BFD_SEND(abfd, bfd_h_getx_signed_64, (ptr))
d943 42
a984 1
*/
d1308 1
a1308 1
  if ((bfd_size_type) (offset + count) > section->_raw_size)
d1315 1
a1315 1
      || bfd_read (location, (bfd_size_type) 1, count, abfd) != count)
d1340 2
a1341 1
      w->i = (bfd_window_internal *) bfd_zmalloc (sizeof (bfd_window_internal));
d1344 1
a1344 1
      w->i->data = (PTR) bfd_malloc ((size_t) count);
d1357 1
a1357 1
  if ((bfd_size_type) (offset+count) > section->_raw_size
d1382 2
a1383 2
  if (bfd_seek (abfd, (file_ptr) (section->filepos + offset), SEEK_SET) == -1
      || bfd_write (location, (bfd_size_type) 1, count, abfd) != count)
d1394 1
a1394 1
	unsigned int bfd_log2(bfd_vma x);
d1398 1
a1398 1
	@@var{x} of 1025 returns 11.
d1448 23
@


1.16
log
@Update copyright notices
@
text
@d235 1
a750 1

@


1.15
log
@fix formatting
@
text
@d2 2
a3 1
   Copyright 1990, 91, 92, 93, 94, 95, 96, 97, 98, 1999
@


1.14
log
@2001-01-03  Kazu Hirata  <kazu@@hxi.com>

	* libbfd.c: Fix formatting.
	* linker.c: Likewise.
	* lynx-core.c: Likewise.
@
text
@d962 1
a962 1
  addr[1] = (bfd_byte )data;
d970 1
a970 1
  addr[0] = (bfd_byte )data;
d1129 1
a1129 1
        addr[3] = (bfd_byte)data;
d1137 1
a1137 1
        addr[0] = (bfd_byte)data;
@


1.14.2.1
log
@Update copyright notices.
@
text
@d2 1
a2 2
   Copyright 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,
   2000, 2001
@


1.14.2.2
log
@Merge from mainline.
@
text
@a234 1

d750 1
d963 1
a963 1
  addr[1] = (bfd_byte) data;
d971 1
a971 1
  addr[0] = (bfd_byte) data;
d1130 1
a1130 1
        addr[3] = (bfd_byte) data;
d1138 1
a1138 1
        addr[0] = (bfd_byte) data;
@


1.13
log
@Add bfd_get_bits() and bfd_put_bits().
@
text
@a44 1
/*ARGSUSED*/
a55 1
/*ARGSUSED*/
a65 1
/*ARGSUSED*/
d74 1
a74 2
/*ARGSUSED*/
int 
d81 1
a81 2
/*ARGSUSED*/
unsigned int 
a87 1
/*ARGUSED*/
a97 1
/*ARGSUSED*/
d106 1
a106 2
/*ARGSUSED*/
void 
a111 1
/*ARGSUSED*/
a123 1
/*ARGSUSED*/
a134 1
/*ARGSUSED*/
a142 1
/*ARGSUSED*/
a207 1

d213 1
a213 1
   first octet in the file, NOT the beginning of the archive header. */
d275 1
a275 1
  nread = real_read (ptr, 1, (size_t)(size*nitems), bfd_cache_lookup(abfd));
d307 1
a307 1
  int refcount : 31;		/* should be enough... */
d661 1
a661 1
     element in an archive. */
d673 1
a673 1
      
d678 1
a678 1
      
d681 1
a681 1
	  if ((abfd->direction == write_direction) || 
d704 1
a704 1
	    }   
d786 1
a786 1
                             functions in swap.h #ifdef __GNUC__. 
d817 1
a817 1
.                ((void) (*((unsigned char *)(ptr)) = (unsigned char)(val)))
d821 1
a821 1
.                (*(unsigned char *)(ptr))
d823 1
a823 1
.		((*(unsigned char *)(ptr) ^ 0x80) - 0x80)
d866 1
a866 1
*/ 
d918 1
a918 1
*/ 
d961 1
a961 1
  addr[0] = (bfd_byte)(data >> 8);
d967 1
a967 1
     bfd_vma data;             
d971 1
a971 1
  addr[1] = (bfd_byte)(data >> 8);
d1126 3
a1128 3
        addr[0] = (bfd_byte)(data >> 24);
        addr[1] = (bfd_byte)(data >> 16);
        addr[2] = (bfd_byte)(data >>  8);
d1138 3
a1140 3
        addr[1] = (bfd_byte)(data >>  8);
        addr[2] = (bfd_byte)(data >> 16);
        addr[3] = (bfd_byte)(data >> 24);
d1149 8
a1156 8
  addr[0] = (bfd_byte)(data >> (7*8));
  addr[1] = (bfd_byte)(data >> (6*8));
  addr[2] = (bfd_byte)(data >> (5*8));
  addr[3] = (bfd_byte)(data >> (4*8));
  addr[4] = (bfd_byte)(data >> (3*8));
  addr[5] = (bfd_byte)(data >> (2*8));
  addr[6] = (bfd_byte)(data >> (1*8));
  addr[7] = (bfd_byte)(data >> (0*8));
d1168 8
a1175 8
  addr[7] = (bfd_byte)(data >> (7*8));
  addr[6] = (bfd_byte)(data >> (6*8));
  addr[5] = (bfd_byte)(data >> (5*8));
  addr[4] = (bfd_byte)(data >> (4*8));
  addr[3] = (bfd_byte)(data >> (3*8));
  addr[2] = (bfd_byte)(data >> (2*8));
  addr[1] = (bfd_byte)(data >> (1*8));
  addr[0] = (bfd_byte)(data >> (0*8));
d1222 1
a1222 1
      
@


1.12
log
@Minor formatting fixes.
@
text
@d1193 48
@


1.11
log
@* libbfd.c (bfd_seek): fix 'seek beyond EOF' error when writing
out a structure that is BFD_IN_MEMORY.
@
text
@d718 1
a718 1
	}      
@


1.10
log
@Use bfd_generic_verify_endian_match() and fix it to only check when endianness
is known.
@
text
@d694 25
a718 5
	  abfd->where = bim->size;
	  bfd_set_error (bfd_error_file_truncated);
	  return -1;
	}
      
@


1.9
log
@This lot mainly cleans up `comparison between signed and unsigned' gcc
warnings.  One usused var, and a macro parenthesis fix too.  Also check
input sections are elf when doing gc in elflink.h.
@
text
@d1309 1
d1312 8
a1319 5
      (*_bfd_error_handler)
	("%s: compiled for a %s endian system and target is %s endian",
	 bfd_get_filename (ibfd),
	 bfd_big_endian (ibfd) ? "big" : "little",
	 bfd_big_endian (obfd) ? "big" : "little");
@


1.8
log
@Fix seeks and reads past the end of a BIM
@
text
@d277 1
a277 1
	  if (bim->size < abfd->where)
d692 1
a692 1
      if (abfd->where > bim->size)
@


1.7
log
@	* libbfd.c (bfd_read): Check result of read against desired result
	using !=, not <.
	(_bfd_generic_get_section_contents): Set bfd_error if the seek is
	invalid compared to the section size.
@
text
@d277 4
a280 1
	  get = bim->size - abfd->where;
d683 4
d691 8
@


1.6
log
@1999-09-12  Donn Terry  <donn@@interix.com>

	* libbfd.c (bfd_log2): Rewrite to avoid infinite loop if most
	significant bit is set.
@
text
@d296 1
a296 1
  if (nread < (int)(size * nitems))
d1169 14
a1182 7
    if (count == 0)
        return true;
    if ((bfd_size_type)(offset+count) > section->_raw_size
        || bfd_seek(abfd, (file_ptr)(section->filepos + offset), SEEK_SET) == -1
        || bfd_read(location, (bfd_size_type)1, count, abfd) != count)
        return (false); /* on error */
    return (true);
@


1.5
log
@	* Many files: Changes to avoid gcc warnings: Add ATTRIBUTE_UNUSED
	as appropriate.  Fill in structure initializations.  Add variable
	initializations.  Add casts.
	* dwarf1.c (parse_line_table): Change eachLine to unsigned long.
	(dwarf1_unit_find_nearest_line): Change i to unsigned long.
@
text
@d1263 1
a1263 1
  while ((((bfd_vma) 1) << result) < x)
@


1.4
log
@	* libbfd.c (bfd_put_8): Make it of type `void'.
	* bfd-in2.h: Regenerated.
	* elf32-mips.c (MIPS_ELF_ADD_DYNAMIC_ENTRY): Conditionalize
	for 32-bit hosts.
	(_bfd_mips_elf_final_link): Likewise.
@
text
@d2 1
a2 1
   Copyright 1990, 91, 92, 93, 94, 95, 96, 97, 1998
d48 1
a48 1
     bfd *ignore;
d60 1
a60 1
     bfd *ignore;
d71 1
a71 1
     bfd *ignore;
d80 1
a80 1
     bfd *ignore;
d88 1
a88 1
     bfd *ignore;
d96 1
a96 1
     bfd *ignore;
d107 1
a107 1
     bfd *ignore_abfd;
d116 1
a116 1
     bfd *ignore;
d123 2
a124 2
     bfd *ignore_core_bfd;
     bfd *ignore_exec_bfd;
d136 1
a136 1
     bfd *ignore_abfd;
d148 1
a148 1
     bfd *ignore_abfd;
d157 1
a157 1
     bfd *ignore_abfd;
d1006 1
a1006 1
     register const bfd_byte *addr;
d1030 1
a1030 1
     register const bfd_byte *addr;
d1054 1
a1054 1
     register const bfd_byte *addr;
d1078 1
a1078 1
     register const bfd_byte *addr;
d1123 2
a1124 2
     bfd_vma data;
     register bfd_byte *addr;
d1142 2
a1143 2
     bfd_vma data;
     register bfd_byte *addr;
d1180 5
a1184 5
     bfd *abfd;
     sec_ptr section;
     bfd_window *w;
     file_ptr offset;
     bfd_size_type count;
@


1.3
log
@	* elflink.h (elf_link_create_dynamic_sections): Handle non-standard
	hash-entry sizes.
	(size_dynamic_sections): Likewise.
	(elf_link_output_extsym): Likewise.
	* elf.c: (elf_fake_sections): Likewise.
	* libbfd.c (bfd_get): New macro.
	(bfd_put): Likewise.
	* bfd-in2.h: Regenerated.
	* elf-bfd.h (elf_size_info): Add hash_entry_size,
	int_rels_per_ext_rel, swap_dyn_out, swap_reloc_in, swap_reloc_out,
	wap_reloca_in, and swap_reloca_out.
	* elflink.h (elf_link_read_relocs_from_section): Adjust to handle
	multiple internal relocations per external relocation.
	(link_read_relocs): Likewise.
	(elf_bfd_final_link): Likewise.
	(elf_link_input_bfd): Likewise.
	(elf_gc_mark): Likewise.
	(elf_gc_smash_unused_vtentry_relocs): Likewise.
	* elfcode.h (elf_swap_dyn_out): Adjust type to match
	elf_swap_dyn_in.
	(size_info): Add entries for new fields.
	* elf64-mips.c (mips_elf64_swap_reloc_out): Enable.
	(mips_elf64_be_swap_reloc_in): New function.
	(mips_elf64_be_swap_reloc_out): Likewise.
	(mips_elf64_be_swap_reloca_in): Likewise.
	(mips_elf64_be_swap_reloca_out): Likewise.
	(mips_elf64_size_info): Add entries for new fields.
@
text
@d795 1
a795 1
.                (*((unsigned char *)(ptr)) = (unsigned char)(val))
@


1.2
log
@	* libbfd.c (_bfd_generic_verify_endian_match): New function.
	* libbfd-in.h (_bfd_generic_verify_endian_match): Declare.
	* libbfd.h: Regenerate.
	* coff-sh.c (sh_merge_private_data): Delete.
	(coff_bfd_merge_private_bfd_data): Change to
	_bfd_generic_verify_endian_match.
	(elf32-sh.c): bfd_elf32_bfd_merge_private_bfd_data: Define.
@
text
@d830 14
@


1.1
log
@Initial revision
@
text
@d1264 23
@


1.1.1.1
log
@19990502 sourceware import
@
text
@@

