head	1.121;
access;
symbols
	sid-snapshot-20180601:1.121
	sid-snapshot-20180501:1.121
	sid-snapshot-20180401:1.121
	sid-snapshot-20180301:1.121
	sid-snapshot-20180201:1.121
	sid-snapshot-20180101:1.121
	sid-snapshot-20171201:1.121
	sid-snapshot-20171101:1.121
	sid-snapshot-20171001:1.121
	sid-snapshot-20170901:1.121
	sid-snapshot-20170801:1.121
	sid-snapshot-20170701:1.121
	sid-snapshot-20170601:1.121
	sid-snapshot-20170501:1.121
	sid-snapshot-20170401:1.121
	sid-snapshot-20170301:1.121
	sid-snapshot-20170201:1.121
	sid-snapshot-20170101:1.121
	sid-snapshot-20161201:1.121
	sid-snapshot-20161101:1.121
	sid-snapshot-20160901:1.121
	sid-snapshot-20160801:1.121
	sid-snapshot-20160701:1.121
	sid-snapshot-20160601:1.121
	sid-snapshot-20160501:1.121
	sid-snapshot-20160401:1.121
	sid-snapshot-20160301:1.121
	sid-snapshot-20160201:1.121
	sid-snapshot-20160101:1.121
	sid-snapshot-20151201:1.121
	sid-snapshot-20151101:1.121
	sid-snapshot-20151001:1.121
	sid-snapshot-20150901:1.121
	sid-snapshot-20150801:1.121
	sid-snapshot-20150701:1.121
	sid-snapshot-20150601:1.121
	sid-snapshot-20150501:1.121
	sid-snapshot-20150401:1.121
	sid-snapshot-20150301:1.121
	sid-snapshot-20150201:1.121
	sid-snapshot-20150101:1.121
	sid-snapshot-20141201:1.121
	sid-snapshot-20141101:1.121
	sid-snapshot-20141001:1.121
	sid-snapshot-20140901:1.121
	sid-snapshot-20140801:1.121
	sid-snapshot-20140701:1.121
	sid-snapshot-20140601:1.121
	sid-snapshot-20140501:1.121
	sid-snapshot-20140401:1.121
	sid-snapshot-20140301:1.121
	sid-snapshot-20140201:1.121
	sid-snapshot-20140101:1.121
	sid-snapshot-20131201:1.121
	sid-snapshot-20131101:1.121
	sid-snapshot-20131001:1.121
	binutils-2_24-branch:1.121.0.4
	binutils-2_24-branchpoint:1.121
	binutils-2_21_1:1.107.2.1
	sid-snapshot-20130901:1.121
	gdb_7_6_1-2013-08-30-release:1.121
	sid-snapshot-20130801:1.121
	sid-snapshot-20130701:1.121
	sid-snapshot-20130601:1.121
	sid-snapshot-20130501:1.121
	gdb_7_6-2013-04-26-release:1.121
	sid-snapshot-20130401:1.121
	binutils-2_23_2:1.117
	gdb_7_6-branch:1.121.0.2
	gdb_7_6-2013-03-12-branchpoint:1.121
	sid-snapshot-20130301:1.121
	sid-snapshot-20130201:1.121
	sid-snapshot-20130101:1.118
	sid-snapshot-20121201:1.118
	gdb_7_5_1-2012-11-29-release:1.116
	binutils-2_23_1:1.117
	sid-snapshot-20121101:1.117
	binutils-2_23:1.117
	sid-snapshot-20121001:1.117
	sid-snapshot-20120901:1.117
	gdb_7_5-2012-08-17-release:1.116
	sid-snapshot-20120801:1.117
	binutils-2_23-branch:1.117.0.2
	binutils-2_23-branchpoint:1.117
	gdb_7_5-branch:1.116.0.2
	gdb_7_5-2012-07-18-branchpoint:1.116
	sid-snapshot-20120701:1.116
	sid-snapshot-20120601:1.115
	sid-snapshot-20120501:1.112
	binutils-2_22_branch:1.111.0.6
	gdb_7_4_1-2012-04-26-release:1.111
	sid-snapshot-20120401:1.111
	sid-snapshot-20120301:1.111
	sid-snapshot-20120201:1.111
	gdb_7_4-2012-01-24-release:1.111
	sid-snapshot-20120101:1.111
	gdb_7_4-branch:1.111.0.4
	gdb_7_4-2011-12-13-branchpoint:1.111
	sid-snapshot-20111201:1.111
	binutils-2_22:1.111
	sid-snapshot-20111101:1.111
	sid-snapshot-20111001:1.111
	binutils-2_22-branch:1.111.0.2
	binutils-2_22-branchpoint:1.111
	gdb_7_3_1-2011-09-04-release:1.108
	sid-snapshot-20110901:1.111
	sid-snapshot-20110801:1.111
	gdb_7_3-2011-07-26-release:1.108
	sid-snapshot-20110701:1.110
	sid-snapshot-20110601:1.110
	sid-snapshot-20110501:1.109
	gdb_7_3-branch:1.108.0.2
	gdb_7_3-2011-04-01-branchpoint:1.108
	sid-snapshot-20110401:1.108
	sid-snapshot-20110301:1.108
	sid-snapshot-20110201:1.108
	sid-snapshot-20110101:1.108
	binutils-2_21:1.107
	sid-snapshot-20101201:1.108
	binutils-2_21-branch:1.107.0.2
	binutils-2_21-branchpoint:1.107
	sid-snapshot-20101101:1.107
	sid-snapshot-20101001:1.106
	binutils-2_20_1:1.103.2.1
	gdb_7_2-2010-09-02-release:1.106
	sid-snapshot-20100901:1.106
	sid-snapshot-20100801:1.106
	gdb_7_2-branch:1.106.0.4
	gdb_7_2-2010-07-07-branchpoint:1.106
	sid-snapshot-20100701:1.106
	sid-snapshot-20100601:1.106
	sid-snapshot-20100501:1.106
	sid-snapshot-20100401:1.106
	gdb_7_1-2010-03-18-release:1.106
	sid-snapshot-20100301:1.106
	gdb_7_1-branch:1.106.0.2
	gdb_7_1-2010-02-18-branchpoint:1.106
	sid-snapshot-20100201:1.104
	sid-snapshot-20100101:1.104
	gdb_7_0_1-2009-12-22-release:1.104
	sid-snapshot-20091201:1.104
	sid-snapshot-20091101:1.104
	binutils-2_20:1.103.2.1
	gdb_7_0-2009-10-06-release:1.104
	sid-snapshot-20091001:1.104
	gdb_7_0-branch:1.104.0.2
	gdb_7_0-2009-09-16-branchpoint:1.104
	arc-sim-20090309:1.99
	binutils-arc-20081103-branch:1.99.0.22
	binutils-arc-20081103-branchpoint:1.99
	binutils-2_20-branch:1.103.0.2
	binutils-2_20-branchpoint:1.103
	sid-snapshot-20090901:1.103
	sid-snapshot-20090801:1.102
	msnyder-checkpoint-072509-branch:1.102.0.4
	msnyder-checkpoint-072509-branchpoint:1.102
	sid-snapshot-20090701:1.102
	dje-cgen-play1-branch:1.102.0.2
	dje-cgen-play1-branchpoint:1.102
	sid-snapshot-20090601:1.102
	sid-snapshot-20090501:1.102
	sid-snapshot-20090401:1.102
	arc-20081103-branch:1.99.0.20
	arc-20081103-branchpoint:1.99
	arc-insight_6_8-branch:1.99.0.18
	arc-insight_6_8-branchpoint:1.99
	insight_6_8-branch:1.99.0.16
	insight_6_8-branchpoint:1.99
	sid-snapshot-20090301:1.99
	binutils-2_19_1:1.99
	sid-snapshot-20090201:1.99
	sid-snapshot-20090101:1.99
	reverse-20081226-branch:1.99.0.14
	reverse-20081226-branchpoint:1.99
	sid-snapshot-20081201:1.99
	multiprocess-20081120-branch:1.99.0.12
	multiprocess-20081120-branchpoint:1.99
	sid-snapshot-20081101:1.99
	binutils-2_19:1.99
	sid-snapshot-20081001:1.99
	reverse-20080930-branch:1.99.0.10
	reverse-20080930-branchpoint:1.99
	binutils-2_19-branch:1.99.0.8
	binutils-2_19-branchpoint:1.99
	sid-snapshot-20080901:1.99
	sid-snapshot-20080801:1.99
	reverse-20080717-branch:1.99.0.6
	reverse-20080717-branchpoint:1.99
	sid-snapshot-20080701:1.99
	msnyder-reverse-20080609-branch:1.99.0.4
	msnyder-reverse-20080609-branchpoint:1.99
	drow-reverse-20070409-branch:1.93.0.4
	drow-reverse-20070409-branchpoint:1.93
	sid-snapshot-20080601:1.99
	sid-snapshot-20080501:1.99
	sid-snapshot-20080403:1.99
	sid-snapshot-20080401:1.99
	gdb_6_8-2008-03-27-release:1.99
	sid-snapshot-20080301:1.99
	gdb_6_8-branch:1.99.0.2
	gdb_6_8-2008-02-26-branchpoint:1.99
	sid-snapshot-20080201:1.98
	sid-snapshot-20080101:1.98
	sid-snapshot-20071201:1.96
	sid-snapshot-20071101:1.96
	gdb_6_7_1-2007-10-29-release:1.95
	gdb_6_7-2007-10-10-release:1.95
	sid-snapshot-20071001:1.95
	gdb_6_7-branch:1.95.0.4
	gdb_6_7-2007-09-07-branchpoint:1.95
	binutils-2_18:1.95
	binutils-2_18-branch:1.95.0.2
	binutils-2_18-branchpoint:1.95
	insight_6_6-20070208-release:1.93
	binutils-csl-coldfire-4_1-32:1.91
	binutils-csl-sourcerygxx-4_1-32:1.91
	gdb_6_6-2006-12-18-release:1.93
	binutils-csl-innovasic-fido-3_4_4-33:1.91
	binutils-csl-sourcerygxx-3_4_4-32:1.80
	binutils-csl-coldfire-4_1-30:1.91
	binutils-csl-sourcerygxx-4_1-30:1.91
	binutils-csl-coldfire-4_1-28:1.91
	binutils-csl-sourcerygxx-4_1-29:1.91
	binutils-csl-sourcerygxx-4_1-28:1.91
	gdb_6_6-branch:1.93.0.2
	gdb_6_6-2006-11-15-branchpoint:1.93
	binutils-csl-arm-2006q3-27:1.91
	binutils-csl-sourcerygxx-4_1-27:1.91
	binutils-csl-arm-2006q3-26:1.91
	binutils-csl-sourcerygxx-4_1-26:1.91
	binutils-csl-sourcerygxx-4_1-25:1.91
	binutils-csl-sourcerygxx-4_1-24:1.91
	binutils-csl-sourcerygxx-4_1-23:1.91
	insight_6_5-20061003-release:1.92
	gdb-csl-symbian-6_4_50_20060226-12:1.90
	binutils-csl-sourcerygxx-4_1-21:1.91
	binutils-csl-arm-2006q3-21:1.91
	binutils-csl-sourcerygxx-4_1-22:1.91
	binutils-csl-palmsource-arm-prelinker-1_0-1:1.91
	binutils-csl-sourcerygxx-4_1-20:1.91
	binutils-csl-arm-2006q3-19:1.91
	binutils-csl-sourcerygxx-4_1-19:1.91
	binutils-csl-sourcerygxx-4_1-18:1.91
	binutils-csl-renesas-4_1-9:1.91
	gdb-csl-sourcerygxx-3_4_4-25:1.90
	binutils-csl-sourcerygxx-3_4_4-25:1.80
	nickrob-async-20060828-mergepoint:1.92
	gdb-csl-symbian-6_4_50_20060226-11:1.90
	binutils-csl-renesas-4_1-8:1.91
	binutils-csl-renesas-4_1-7:1.91
	binutils-csl-renesas-4_1-6:1.91
	gdb-csl-sourcerygxx-4_1-17:1.90
	binutils-csl-sourcerygxx-4_1-17:1.91
	gdb-csl-20060226-branch-local-2:1.90
	gdb-csl-sourcerygxx-4_1-14:1.90
	binutils-csl-sourcerygxx-4_1-14:1.91
	binutils-csl-sourcerygxx-4_1-15:1.91
	gdb-csl-sourcerygxx-4_1-13:1.90
	binutils-csl-sourcerygxx-4_1-13:1.91
	binutils-2_17:1.91
	gdb-csl-sourcerygxx-4_1-12:1.90
	binutils-csl-sourcerygxx-4_1-12:1.91
	gdb-csl-sourcerygxx-3_4_4-21:1.90
	binutils-csl-sourcerygxx-3_4_4-21:1.91
	gdb_6_5-20060621-release:1.92
	binutils-csl-wrs-linux-3_4_4-24:1.80
	binutils-csl-wrs-linux-3_4_4-23:1.80
	gdb-csl-sourcerygxx-4_1-9:1.90
	binutils-csl-sourcerygxx-4_1-9:1.91
	gdb-csl-sourcerygxx-4_1-8:1.90
	binutils-csl-sourcerygxx-4_1-8:1.91
	gdb-csl-sourcerygxx-4_1-7:1.90
	binutils-csl-sourcerygxx-4_1-7:1.91
	gdb-csl-arm-2006q1-6:1.90
	binutils-csl-arm-2006q1-6:1.91
	gdb-csl-sourcerygxx-4_1-6:1.90
	binutils-csl-sourcerygxx-4_1-6:1.91
	binutils-csl-wrs-linux-3_4_4-22:1.80
	gdb-csl-symbian-6_4_50_20060226-10:1.90
	gdb-csl-symbian-6_4_50_20060226-9:1.90
	gdb-csl-symbian-6_4_50_20060226-8:1.90
	gdb-csl-coldfire-4_1-11:1.90
	binutils-csl-coldfire-4_1-11:1.91
	gdb-csl-sourcerygxx-3_4_4-19:1.90
	binutils-csl-sourcerygxx-3_4_4-19:1.91
	gdb-csl-coldfire-4_1-10:1.90
	gdb_6_5-branch:1.92.0.4
	gdb_6_5-2006-05-14-branchpoint:1.92
	binutils-csl-coldfire-4_1-10:1.91
	gdb-csl-sourcerygxx-4_1-5:1.90
	binutils-csl-sourcerygxx-4_1-5:1.91
	nickrob-async-20060513-branch:1.92.0.2
	nickrob-async-20060513-branchpoint:1.92
	gdb-csl-sourcerygxx-4_1-4:1.90
	binutils-csl-sourcerygxx-4_1-4:1.91
	msnyder-reverse-20060502-branch:1.91.0.10
	msnyder-reverse-20060502-branchpoint:1.91
	binutils-csl-wrs-linux-3_4_4-21:1.80
	gdb-csl-morpho-4_1-4:1.90
	binutils-csl-morpho-4_1-4:1.91
	gdb-csl-sourcerygxx-3_4_4-17:1.90
	binutils-csl-sourcerygxx-3_4_4-17:1.91
	binutils-csl-wrs-linux-3_4_4-20:1.80
	readline_5_1-import-branch:1.91.0.8
	readline_5_1-import-branchpoint:1.91
	gdb-csl-20060226-branch-merge-to-csl-symbian-1:1.90
	binutils-2_17-branch:1.91.0.6
	binutils-2_17-branchpoint:1.91
	gdb-csl-symbian-20060226-branch:1.90.0.14
	gdb-csl-symbian-20060226-branchpoint:1.90
	gdb-csl-20060226-branch-merge-to-csl-local-1:1.90
	msnyder-reverse-20060331-branch:1.91.0.4
	msnyder-reverse-20060331-branchpoint:1.91
	binutils-csl-2_17-branch:1.91.0.2
	binutils-csl-2_17-branchpoint:1.91
	gdb-csl-available-20060303-branch:1.90.0.12
	gdb-csl-available-20060303-branchpoint:1.90
	gdb-csl-20060226-branch:1.90.0.10
	gdb-csl-20060226-branchpoint:1.90
	gdb_6_4-20051202-release:1.90
	msnyder-fork-checkpoint-branch:1.90.0.8
	msnyder-fork-checkpoint-branchpoint:1.90
	gdb-csl-gxxpro-6_3-branch:1.90.0.6
	gdb-csl-gxxpro-6_3-branchpoint:1.90
	gdb_6_4-branch:1.90.0.4
	gdb_6_4-2005-11-01-branchpoint:1.90
	gdb-csl-arm-20051020-branch:1.90.0.2
	gdb-csl-arm-20051020-branchpoint:1.90
	binutils-csl-gxxpro-3_4-branch:1.80.0.8
	binutils-csl-gxxpro-3_4-branchpoint:1.80
	binutils-2_16_1:1.80
	msnyder-tracepoint-checkpoint-branch:1.88.0.2
	msnyder-tracepoint-checkpoint-branchpoint:1.88
	gdb-csl-arm-20050325-2005-q1b:1.80
	binutils-csl-arm-2005q1b:1.80
	binutils-2_16:1.80
	gdb-csl-arm-20050325-2005-q1a:1.80
	binutils-csl-arm-2005q1a:1.80
	csl-arm-20050325-branch:1.80.0.6
	csl-arm-20050325-branchpoint:1.80
	binutils-csl-arm-2005q1-branch:1.80.0.4
	binutils-csl-arm-2005q1-branchpoint:1.80
	binutils-2_16-branch:1.80.0.2
	binutils-2_16-branchpoint:1.80
	csl-arm-2004-q3d:1.76
	gdb_6_3-20041109-release:1.76
	gdb_6_3-branch:1.76.0.2
	gdb_6_3-20041019-branchpoint:1.76
	csl-arm-2004-q3:1.76
	drow_intercu-merge-20040921:1.76
	drow_intercu-merge-20040915:1.76
	jimb-gdb_6_2-e500-branch:1.74.0.6
	jimb-gdb_6_2-e500-branchpoint:1.74
	gdb_6_2-20040730-release:1.74
	gdb_6_2-branch:1.74.0.2
	gdb_6_2-2004-07-10-gmt-branchpoint:1.74
	gdb_6_1_1-20040616-release:1.67
	binutils-2_15:1.67
	binutils-2_15-branchpoint:1.67
	csl-arm-2004-q1a:1.71
	csl-arm-2004-q1:1.67
	gdb_6_1-2004-04-05-release:1.67
	drow_intercu-merge-20040402:1.67
	drow_intercu-merge-20040327:1.67
	ezannoni_pie-20040323-branch:1.67.0.14
	ezannoni_pie-20040323-branchpoint:1.67
	cagney_tramp-20040321-mergepoint:1.67
	cagney_tramp-20040309-branch:1.67.0.12
	cagney_tramp-20040309-branchpoint:1.67
	gdb_6_1-branch:1.67.0.10
	gdb_6_1-2004-03-01-gmt-branchpoint:1.67
	drow_intercu-20040221-branch:1.67.0.8
	drow_intercu-20040221-branchpoint:1.67
	binutils-2_15-branch:1.67.0.6
	cagney_bfdfile-20040213-branch:1.67.0.4
	cagney_bfdfile-20040213-branchpoint:1.67
	drow-cplus-merge-20040208:1.67
	carlton_dictionary-20040126-merge:1.67
	cagney_bigcore-20040122-branch:1.67.0.2
	cagney_bigcore-20040122-branchpoint:1.67
	drow-cplus-merge-20040113:1.67
	csl-arm-2003-q4:1.67
	drow-cplus-merge-20031224:1.67
	drow-cplus-merge-20031220:1.67
	carlton_dictionary-20031215-merge:1.67
	drow-cplus-merge-20031214:1.67
	carlton-dictionary-20031111-merge:1.65
	gdb_6_0-2003-10-04-release:1.56
	kettenis_sparc-20030918-branch:1.60.0.6
	kettenis_sparc-20030918-branchpoint:1.60
	carlton_dictionary-20030917-merge:1.60
	ezannoni_pie-20030916-branchpoint:1.60
	ezannoni_pie-20030916-branch:1.60.0.4
	cagney_x86i386-20030821-branch:1.60.0.2
	cagney_x86i386-20030821-branchpoint:1.60
	carlton_dictionary-20030805-merge:1.60
	carlton_dictionary-20030627-merge:1.56
	gdb_6_0-branch:1.56.0.2
	gdb_6_0-2003-06-23-branchpoint:1.56
	jimb-ppc64-linux-20030613-branch:1.55.0.2
	jimb-ppc64-linux-20030613-branchpoint:1.55
	binutils-2_14:1.53.18.1
	cagney_convert-20030606-branch:1.54.0.10
	cagney_convert-20030606-branchpoint:1.54
	cagney_writestrings-20030508-branch:1.54.0.8
	cagney_writestrings-20030508-branchpoint:1.54
	jimb-ppc64-linux-20030528-branch:1.54.0.6
	jimb-ppc64-linux-20030528-branchpoint:1.54
	carlton_dictionary-20030523-merge:1.54
	cagney_fileio-20030521-branch:1.54.0.4
	cagney_fileio-20030521-branchpoint:1.54
	kettenis_i386newframe-20030517-mergepoint:1.54
	jimb-ppc64-linux-20030509-branch:1.54.0.2
	jimb-ppc64-linux-20030509-branchpoint:1.54
	kettenis_i386newframe-20030504-mergepoint:1.54
	carlton_dictionary-20030430-merge:1.54
	binutils-2_14-branch:1.53.0.18
	binutils-2_14-branchpoint:1.53
	kettenis_i386newframe-20030419-branch:1.53.0.16
	kettenis_i386newframe-20030419-branchpoint:1.53
	carlton_dictionary-20030416-merge:1.53
	cagney_frameaddr-20030409-mergepoint:1.53
	kettenis_i386newframe-20030406-branch:1.53.0.14
	kettenis_i386newframe-20030406-branchpoint:1.53
	cagney_frameaddr-20030403-branchpoint:1.53
	cagney_frameaddr-20030403-branch:1.53.0.12
	cagney_framebase-20030330-mergepoint:1.53
	cagney_framebase-20030326-branch:1.53.0.10
	cagney_framebase-20030326-branchpoint:1.53
	cagney_lazyid-20030317-branch:1.53.0.8
	cagney_lazyid-20030317-branchpoint:1.53
	kettenis-i386newframe-20030316-mergepoint:1.53
	offbyone-20030313-branch:1.53.0.6
	offbyone-20030313-branchpoint:1.53
	kettenis-i386newframe-20030308-branch:1.53.0.4
	kettenis-i386newframe-20030308-branchpoint:1.53
	carlton_dictionary-20030305-merge:1.53
	cagney_offbyone-20030303-branch:1.53.0.2
	cagney_offbyone-20030303-branchpoint:1.53
	carlton_dictionary-20030207-merge:1.53
	interps-20030202-branch:1.52.0.4
	interps-20030202-branchpoint:1.52
	cagney-unwind-20030108-branch:1.52.0.2
	cagney-unwind-20030108-branchpoint:1.52
	binutils-2_13_2_1:1.50.2.1
	binutils-2_13_2:1.50.2.1
	carlton_dictionary-20021223-merge:1.52
	gdb_5_3-2002-12-12-release:1.50
	carlton_dictionary-20021115-merge:1.51
	binutils-2_13_1:1.50.2.1
	kseitz_interps-20021105-merge:1.51
	kseitz_interps-20021103-merge:1.51
	drow-cplus-merge-20021020:1.50
	drow-cplus-merge-20021025:1.50
	carlton_dictionary-20021025-merge:1.51
	carlton_dictionary-20021011-merge:1.50
	drow-cplus-branch:1.50.0.14
	drow-cplus-branchpoint:1.50
	kseitz_interps-20020930-merge:1.50
	carlton_dictionary-20020927-merge:1.50
	carlton_dictionary-branch:1.50.0.12
	carlton_dictionary-20020920-branchpoint:1.50
	sid-20020905-branchpoint:1.50
	sid-20020905-branch:1.50.0.10
	gdb_5_3-branch:1.50.0.8
	gdb_5_3-2002-09-04-branchpoint:1.50
	kseitz_interps-20020829-merge:1.50
	cagney_sysregs-20020825-branch:1.50.0.6
	cagney_sysregs-20020825-branchpoint:1.50
	readline_4_3-import-branch:1.50.0.4
	readline_4_3-import-branchpoint:1.50
	binutils-2_13:1.50
	gdb_5_2_1-2002-07-23-release:1.44
	binutils-2_13-branchpoint:1.50
	binutils-2_13-branch:1.50.0.2
	kseitz_interps-20020528-branch:1.45.0.2
	kseitz_interps-20020528-branchpoint:1.45
	cagney_regbuf-20020515-branch:1.44.0.8
	cagney_regbuf-20020515-branchpoint:1.44
	binutils-2_12_1:1.44
	jimb-macro-020506-branch:1.44.0.6
	jimb-macro-020506-branchpoint:1.44
	gdb_5_2-2002-04-29-release:1.44
	binutils-2_12:1.44
	gdb_5_2-branch:1.44.0.4
	gdb_5_2-2002-03-03-branchpoint:1.44
	binutils-2_12-branch:1.44.0.2
	binutils-2_12-branchpoint:1.44
	gdb_5_1_1-2002-01-24-release:1.33
	gdb_5_1_0_1-2002-01-03-release:1.33
	cygnus_cvs_20020108_pre:1.43
	gdb_5_1_0_1-2002-01-03-branch:1.33.0.6
	gdb_5_1_0_1-2002-01-03-branchpoint:1.33
	gdb_5_1-2001-11-21-release:1.33
	gdb_s390-2001-09-26-branch:1.33.0.4
	gdb_s390-2001-09-26-branchpoint:1.33
	gdb_5_1-2001-07-29-branch:1.33.0.2
	gdb_5_1-2001-07-29-branchpoint:1.33
	binutils-2_11_2:1.28.2.2
	binutils-2_11_1:1.28.2.2
	binutils-2_11:1.28
	x86_64versiong3:1.28
	binutils-2_11-branch:1.28.0.2
	insight-precleanup-2001-01-01:1.28
	binutils-2_10_1:1.12
	binutils-2_10:1.12
	gdb-premipsmulti-2000-06-06-branch:1.13.0.4
	gdb-premipsmulti-2000-06-06-branchpoint:1.13
	gdb_5_0-2000-05-19-release:1.13
	gdb_4_18_2-2000-05-18-release:1.13
	gdb_4_95_1-2000-05-11-snapshot:1.13
	gdb_4_95_0-2000-04-27-snapshot:1.13
	gdb_5_0-2000-04-10-branch:1.13.0.2
	gdb_5_0-2000-04-10-branchpoint:1.13
	binutils-2_10-branch:1.12.0.2
	binutils-2_10-branchpoint:1.12
	binutils_latest_snapshot:1.121
	repo-unification-2000-02-06:1.10
	binu_ss_19990721:1.5
	binu_ss_19990602:1.1.1.1
	binu_ss_19990502:1.1.1.1
	cygnus:1.1.1;
locks; strict;
comment	@ * @;


1.121
date	2013.01.26.02.08.01;	author amodra;	state Exp;
branches;
next	1.120;

1.120
date	2013.01.10.20.03.55;	author hjl;	state Exp;
branches;
next	1.119;

1.119
date	2013.01.07.17.18.25;	author tromey;	state Exp;
branches;
next	1.118;

1.118
date	2012.11.07.05.57.24;	author hjl;	state Exp;
branches;
next	1.117;

1.117
date	2012.07.18.17.08.18;	author hjl;	state Exp;
branches;
next	1.116;

1.116
date	2012.06.29.14.46.03;	author amodra;	state Exp;
branches;
next	1.115;

1.115
date	2012.05.22.12.09.26;	author amodra;	state Exp;
branches;
next	1.114;

1.114
date	2012.05.14.19.45.20;	author jwlemke;	state Exp;
branches;
next	1.113;

1.113
date	2012.05.05.03.05.25;	author amodra;	state Exp;
branches;
next	1.112;

1.112
date	2012.04.24.05.12.39;	author amodra;	state Exp;
branches;
next	1.111;

1.111
date	2011.07.11.15.03.07;	author clm;	state Exp;
branches
	1.111.2.1;
next	1.110;

1.110
date	2011.05.07.14.12.59;	author hjl;	state Exp;
branches;
next	1.109;

1.109
date	2011.04.11.04.08.12;	author amodra;	state Exp;
branches;
next	1.108;

1.108
date	2010.11.08.02.48.54;	author amodra;	state Exp;
branches;
next	1.107;

1.107
date	2010.10.29.12.10.24;	author hjl;	state Exp;
branches
	1.107.2.1;
next	1.106;

1.106
date	2010.02.08.13.47.22;	author amodra;	state Exp;
branches;
next	1.105;

1.105
date	2010.02.08.13.16.24;	author amodra;	state Exp;
branches;
next	1.104;

1.104
date	2009.09.09.21.38.58;	author nickc;	state Exp;
branches;
next	1.103;

1.103
date	2009.08.06.17.38.00;	author nickc;	state Exp;
branches
	1.103.2.1;
next	1.102;

1.102
date	2009.03.27.11.38.30;	author nickc;	state Exp;
branches;
next	1.101;

1.101
date	2009.03.19.11.02.09;	author ktietz;	state Exp;
branches;
next	1.100;

1.100
date	2009.03.04.05.50.49;	author amodra;	state Exp;
branches;
next	1.99;

1.99
date	2008.02.15.10.35.46;	author amodra;	state Exp;
branches;
next	1.98;

1.98
date	2007.12.18.19.48.07;	author drow;	state Exp;
branches;
next	1.97;

1.97
date	2007.12.15.09.34.48;	author rsandifo;	state Exp;
branches;
next	1.96;

1.96
date	2007.10.16.23.51.55;	author bwilson;	state Exp;
branches;
next	1.95;

1.95
date	2007.07.03.14.26.42;	author nickc;	state Exp;
branches;
next	1.94;

1.94
date	2007.04.26.14.46.58;	author amodra;	state Exp;
branches;
next	1.93;

1.93
date	2006.10.27.03.22.08;	author amodra;	state Exp;
branches;
next	1.92;

1.92
date	2006.05.03.14.26.39;	author amodra;	state Exp;
branches;
next	1.91;

1.91
date	2006.03.16.12.20.16;	author amodra;	state Exp;
branches;
next	1.90;

1.90
date	2005.07.25.15.35.37;	author hjl;	state Exp;
branches;
next	1.89;

1.89
date	2005.06.29.14.05.21;	author amodra;	state Exp;
branches;
next	1.88;

1.88
date	2005.05.17.19.44.55;	author drow;	state Exp;
branches;
next	1.87;

1.87
date	2005.05.05.14.34.04;	author hjl;	state Exp;
branches;
next	1.86;

1.86
date	2005.05.04.15.53.38;	author nickc;	state Exp;
branches;
next	1.85;

1.85
date	2005.05.04.11.00.23;	author amodra;	state Exp;
branches;
next	1.84;

1.84
date	2005.05.04.07.19.35;	author nickc;	state Exp;
branches;
next	1.83;

1.83
date	2005.05.03.17.05.49;	author amodra;	state Exp;
branches;
next	1.82;

1.82
date	2005.05.03.01.05.02;	author hjl;	state Exp;
branches;
next	1.81;

1.81
date	2005.04.11.22.21.23;	author hjl;	state Exp;
branches;
next	1.80;

1.80
date	2005.03.03.11.41.01;	author amodra;	state Exp;
branches;
next	1.79;

1.79
date	2005.02.22.00.50.04;	author hjl;	state Exp;
branches;
next	1.78;

1.78
date	2005.01.31.23.13.29;	author bje;	state Exp;
branches;
next	1.77;

1.77
date	2005.01.06.09.03.53;	author amodra;	state Exp;
branches;
next	1.76;

1.76
date	2004.09.10.21.16.27;	author brobecke;	state Exp;
branches;
next	1.75;

1.75
date	2004.07.21.15.42.57;	author hjl;	state Exp;
branches;
next	1.74;

1.74
date	2004.06.29.14.13.44;	author amodra;	state Exp;
branches;
next	1.73;

1.73
date	2004.06.24.04.46.26;	author amodra;	state Exp;
branches;
next	1.72;

1.72
date	2004.06.15.01.24.22;	author amodra;	state Exp;
branches;
next	1.71;

1.71
date	2004.05.02.14.36.24;	author hjl;	state Exp;
branches;
next	1.70;

1.70
date	2004.05.01.14.20.26;	author amodra;	state Exp;
branches;
next	1.69;

1.69
date	2004.04.30.15.01.15;	author hjl;	state Exp;
branches;
next	1.68;

1.68
date	2004.04.30.14.23.39;	author amodra;	state Exp;
branches;
next	1.67;

1.67
date	2003.12.01.06.33.01;	author kazu;	state Exp;
branches
	1.67.8.1;
next	1.66;

1.66
date	2003.11.30.18.40.41;	author kazu;	state Exp;
branches;
next	1.65;

1.65
date	2003.11.03.14.44.04;	author cagney;	state Exp;
branches;
next	1.64;

1.64
date	2003.10.31.05.32.46;	author cagney;	state Exp;
branches;
next	1.63;

1.63
date	2003.10.23.18.27.41;	author msnyder;	state Exp;
branches;
next	1.62;

1.62
date	2003.10.20.14.38.39;	author cagney;	state Exp;
branches;
next	1.61;

1.61
date	2003.10.11.12.32.18;	author amodra;	state Exp;
branches;
next	1.60;

1.60
date	2003.07.25.14.35.56;	author hjl;	state Exp;
branches;
next	1.59;

1.59
date	2003.07.08.08.08.00;	author amodra;	state Exp;
branches;
next	1.58;

1.58
date	2003.07.04.04.14.56;	author amodra;	state Exp;
branches;
next	1.57;

1.57
date	2003.06.29.10.06.39;	author amodra;	state Exp;
branches;
next	1.56;

1.56
date	2003.06.18.00.30.04;	author hjl;	state Exp;
branches;
next	1.55;

1.55
date	2003.06.08.14.06.38;	author amodra;	state Exp;
branches;
next	1.54;

1.54
date	2003.04.29.01.53.45;	author hjl;	state Exp;
branches;
next	1.53;

1.53
date	2003.02.04.12.34.07;	author amodra;	state Exp;
branches
	1.53.16.1
	1.53.18.1;
next	1.52;

1.52
date	2002.11.30.08.39.40;	author amodra;	state Exp;
branches;
next	1.51;

1.51
date	2002.10.25.02.45.53;	author danglin;	state Exp;
branches;
next	1.50;

1.50
date	2002.07.04.14.40.25;	author amodra;	state Exp;
branches
	1.50.2.1
	1.50.12.1
	1.50.14.1;
next	1.49;

1.49
date	2002.06.25.09.40.44;	author amodra;	state Exp;
branches;
next	1.48;

1.48
date	2002.06.10.16.10.43;	author rsandifo;	state Exp;
branches;
next	1.47;

1.47
date	2002.06.05.03.43.11;	author amodra;	state Exp;
branches;
next	1.46;

1.46
date	2002.06.04.01.05.21;	author amodra;	state Exp;
branches;
next	1.45;

1.45
date	2002.05.23.13.12.46;	author jakub;	state Exp;
branches
	1.45.2.1;
next	1.44;

1.44
date	2002.01.30.18.12.16;	author nickc;	state Exp;
branches
	1.44.8.1;
next	1.43;

1.43
date	2002.01.05.13.11.31;	author amodra;	state Exp;
branches;
next	1.42;

1.42
date	2001.12.17.00.40.53;	author amodra;	state Exp;
branches;
next	1.41;

1.41
date	2001.11.19.15.35.38;	author nickc;	state Exp;
branches;
next	1.40;

1.40
date	2001.11.13.03.52.25;	author amodra;	state Exp;
branches;
next	1.39;

1.39
date	2001.10.18.08.22.44;	author jakub;	state Exp;
branches;
next	1.38;

1.38
date	2001.10.10.12.08.28;	author kazu;	state Exp;
branches;
next	1.37;

1.37
date	2001.10.09.06.05.16;	author amodra;	state Exp;
branches;
next	1.36;

1.36
date	2001.09.29.12.07.00;	author amodra;	state Exp;
branches;
next	1.35;

1.35
date	2001.09.28.20.51.15;	author rth;	state Exp;
branches;
next	1.34;

1.34
date	2001.09.18.09.57.26;	author amodra;	state Exp;
branches;
next	1.33;

1.33
date	2001.06.02.19.05.34;	author hp;	state Exp;
branches;
next	1.32;

1.32
date	2001.05.17.03.58.45;	author amodra;	state Exp;
branches;
next	1.31;

1.31
date	2001.04.14.14.23.31;	author jakub;	state Exp;
branches;
next	1.30;

1.30
date	2001.04.14.04.13.00;	author hjl;	state Exp;
branches;
next	1.29;

1.29
date	2001.03.08.21.04.02;	author nickc;	state Exp;
branches;
next	1.28;

1.28
date	2000.12.20.00.21.57;	author kazu;	state Exp;
branches
	1.28.2.1;
next	1.27;

1.27
date	2000.11.13.10.01.13;	author pb;	state Exp;
branches;
next	1.26;

1.26
date	2000.11.08.07.54.31;	author rth;	state Exp;
branches;
next	1.25;

1.25
date	2000.10.12.03.44.50;	author amodra;	state Exp;
branches;
next	1.24;

1.24
date	2000.10.10.15.23.38;	author amodra;	state Exp;
branches;
next	1.23;

1.23
date	2000.09.20.04.20.26;	author amodra;	state Exp;
branches;
next	1.22;

1.22
date	2000.09.08.02.11.34;	author amodra;	state Exp;
branches;
next	1.21;

1.21
date	2000.09.06.00.22.01;	author amodra;	state Exp;
branches;
next	1.20;

1.20
date	2000.09.05.02.42.16;	author amodra;	state Exp;
branches;
next	1.19;

1.19
date	2000.08.03.19.40.29;	author nickc;	state Exp;
branches;
next	1.18;

1.18
date	2000.08.03.13.50.35;	author hjl;	state Exp;
branches;
next	1.17;

1.17
date	2000.07.31.18.45.25;	author nickc;	state Exp;
branches;
next	1.16;

1.16
date	2000.07.10.02.05.40;	author amodra;	state Exp;
branches;
next	1.15;

1.15
date	2000.07.08.12.08.43;	author amodra;	state Exp;
branches;
next	1.14;

1.14
date	2000.06.19.01.22.37;	author nickc;	state Exp;
branches;
next	1.13;

1.13
date	2000.04.07.00.58.06;	author twall;	state Exp;
branches;
next	1.12;

1.12
date	2000.02.21.12.01.25;	author amodra;	state Exp;
branches;
next	1.11;

1.11
date	2000.02.13.22.45.29;	author ian;	state Exp;
branches;
next	1.10;

1.10
date	2000.01.13.22.10.36;	author nickc;	state Exp;
branches;
next	1.9;

1.9
date	99.09.06.18.34.29;	author ian;	state Exp;
branches;
next	1.8;

1.8
date	99.08.09.03.20.31;	author ian;	state Exp;
branches;
next	1.7;

1.7
date	99.08.08.16.50.27;	author ian;	state Exp;
branches;
next	1.6;

1.6
date	99.08.06.23.31.14;	author ian;	state Exp;
branches;
next	1.5;

1.5
date	99.07.11.19.49.43;	author ian;	state Exp;
branches;
next	1.4;

1.4
date	99.06.20.14.15.42;	author rth;	state Exp;
branches;
next	1.3;

1.3
date	99.06.15.15.12.23;	author rth;	state Exp;
branches;
next	1.2;

1.2
date	99.06.07.23.22.00;	author rth;	state Exp;
branches;
next	1.1;

1.1
date	99.05.03.07.28.58;	author rth;	state Exp;
branches
	1.1.1.1;
next	;

1.111.2.1
date	2012.05.11.12.24.35;	author nickc;	state Exp;
branches;
next	;

1.107.2.1
date	2011.02.01.12.25.34;	author amodra;	state Exp;
branches;
next	;

1.103.2.1
date	2009.09.09.21.40.20;	author nickc;	state Exp;
branches;
next	;

1.67.8.1
date	2004.09.16.17.00.37;	author drow;	state Exp;
branches;
next	;

1.53.16.1
date	2003.05.04.11.37.37;	author kettenis;	state Exp;
branches;
next	;

1.53.18.1
date	2003.05.03.16.01.00;	author drow;	state Exp;
branches;
next	;

1.50.2.1
date	2002.10.28.18.45.46;	author drow;	state Exp;
branches;
next	;

1.50.12.1
date	2002.10.25.23.49.49;	author carlton;	state Exp;
branches;
next	1.50.12.2;

1.50.12.2
date	2002.12.23.19.37.59;	author carlton;	state Exp;
branches;
next	1.50.12.3;

1.50.12.3
date	2003.02.07.19.17.41;	author carlton;	state Exp;
branches;
next	1.50.12.4;

1.50.12.4
date	2003.05.01.00.46.43;	author carlton;	state Exp;
branches;
next	1.50.12.5;

1.50.12.5
date	2003.06.27.21.49.30;	author carlton;	state Exp;
branches;
next	1.50.12.6;

1.50.12.6
date	2003.08.05.17.12.55;	author carlton;	state Exp;
branches;
next	1.50.12.7;

1.50.12.7
date	2003.11.11.23.50.28;	author carlton;	state Exp;
branches;
next	1.50.12.8;

1.50.12.8
date	2003.12.15.23.59.52;	author carlton;	state Exp;
branches;
next	;

1.50.14.1
date	2003.12.14.20.26.51;	author drow;	state Exp;
branches;
next	;

1.45.2.1
date	2002.06.20.01.31.09;	author kseitz;	state Exp;
branches;
next	1.45.2.2;

1.45.2.2
date	2002.07.22.21.46.49;	author kseitz;	state Exp;
branches;
next	1.45.2.3;

1.45.2.3
date	2002.11.03.22.01.37;	author ezannoni;	state Exp;
branches;
next	;

1.44.8.1
date	2002.06.15.16.42.40;	author cagney;	state Exp;
branches;
next	;

1.28.2.1
date	2001.05.23.03.41.09;	author amodra;	state Exp;
branches;
next	1.28.2.2;

1.28.2.2
date	2001.06.11.10.04.21;	author amodra;	state Exp;
branches;
next	;

1.1.1.1
date	99.05.03.07.28.58;	author rth;	state Exp;
branches;
next	;


desc
@@


1.121
log
@	* bfd.c (struct bfd_preserve, bfd_preserve_save, bfd_preserve_restore,
	bfd_preserve_finish): Move to..
	* format.c: ..here, splitting out..
	(bfd_reinit): ..this.  New function.
	(bfd_check_format_matches): Use bfd_preserve_save/restore to
	keep bfd state for a match.
	* elfcode.h (elf_object_p): Don't use bfd_preserve_save/restore.
	* elfcore.h (elf_core_file_p): Likewise.
	* mach-o.c (bfd_mach_o_header_p): Likewise.
	* pef.c (bfd_pef_object_p, bfd_pef_xlib_object_p): Likewise.
	* xsym.c (bfd_sym_object_p): Likewise.
	* mmo.c (mmo_scan): Clear abfd->symcount.
	* opncls.c (_bfd_new_bfd): Use a smaller section hash table.
	* section.c (bfd_section_list_clear): Clear section_htab.count.
	* bfd-in2.h: Regenerate.
@
text
@/* Object file "section" support for the BFD library.
   Copyright 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,
   2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011,
   2012, 2013
   Free Software Foundation, Inc.
   Written by Cygnus Support.

   This file is part of BFD, the Binary File Descriptor library.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,
   MA 02110-1301, USA.  */

/*
SECTION
	Sections

	The raw data contained within a BFD is maintained through the
	section abstraction.  A single BFD may have any number of
	sections.  It keeps hold of them by pointing to the first;
	each one points to the next in the list.

	Sections are supported in BFD in <<section.c>>.

@@menu
@@* Section Input::
@@* Section Output::
@@* typedef asection::
@@* section prototypes::
@@end menu

INODE
Section Input, Section Output, Sections, Sections
SUBSECTION
	Section input

	When a BFD is opened for reading, the section structures are
	created and attached to the BFD.

	Each section has a name which describes the section in the
	outside world---for example, <<a.out>> would contain at least
	three sections, called <<.text>>, <<.data>> and <<.bss>>.

	Names need not be unique; for example a COFF file may have several
	sections named <<.data>>.

	Sometimes a BFD will contain more than the ``natural'' number of
	sections. A back end may attach other sections containing
	constructor data, or an application may add a section (using
	<<bfd_make_section>>) to the sections attached to an already open
	BFD. For example, the linker creates an extra section
	<<COMMON>> for each input file's BFD to hold information about
	common storage.

	The raw data is not necessarily read in when
	the section descriptor is created. Some targets may leave the
	data in place until a <<bfd_get_section_contents>> call is
	made. Other back ends may read in all the data at once.  For
	example, an S-record file has to be read once to determine the
	size of the data. An IEEE-695 file doesn't contain raw data in
	sections, but data and relocation expressions intermixed, so
	the data area has to be parsed to get out the data and
	relocations.

INODE
Section Output, typedef asection, Section Input, Sections

SUBSECTION
	Section output

	To write a new object style BFD, the various sections to be
	written have to be created. They are attached to the BFD in
	the same way as input sections; data is written to the
	sections using <<bfd_set_section_contents>>.

	Any program that creates or combines sections (e.g., the assembler
	and linker) must use the <<asection>> fields <<output_section>> and
	<<output_offset>> to indicate the file sections to which each
	section must be written.  (If the section is being created from
	scratch, <<output_section>> should probably point to the section
	itself and <<output_offset>> should probably be zero.)

	The data to be written comes from input sections attached
	(via <<output_section>> pointers) to
	the output sections.  The output section structure can be
	considered a filter for the input section: the output section
	determines the vma of the output data and the name, but the
	input section determines the offset into the output section of
	the data to be written.

	E.g., to create a section "O", starting at 0x100, 0x123 long,
	containing two subsections, "A" at offset 0x0 (i.e., at vma
	0x100) and "B" at offset 0x20 (i.e., at vma 0x120) the <<asection>>
	structures would look like:

|   section name          "A"
|     output_offset   0x00
|     size            0x20
|     output_section ----------->  section name    "O"
|                             |    vma             0x100
|   section name          "B" |    size            0x123
|     output_offset   0x20    |
|     size            0x103   |
|     output_section  --------|

SUBSECTION
	Link orders

	The data within a section is stored in a @@dfn{link_order}.
	These are much like the fixups in <<gas>>.  The link_order
	abstraction allows a section to grow and shrink within itself.

	A link_order knows how big it is, and which is the next
	link_order and where the raw data for it is; it also points to
	a list of relocations which apply to it.

	The link_order is used by the linker to perform relaxing on
	final code.  The compiler creates code which is as big as
	necessary to make it work without relaxing, and the user can
	select whether to relax.  Sometimes relaxing takes a lot of
	time.  The linker runs around the relocations to see if any
	are attached to data which can be shrunk, if so it does it on
	a link_order by link_order basis.

*/

#include "sysdep.h"
#include "bfd.h"
#include "libbfd.h"
#include "bfdlink.h"

/*
DOCDD
INODE
typedef asection, section prototypes, Section Output, Sections
SUBSECTION
	typedef asection

	Here is the section structure:

CODE_FRAGMENT
.
.typedef struct bfd_section
.{
.  {* The name of the section; the name isn't a copy, the pointer is
.     the same as that passed to bfd_make_section.  *}
.  const char *name;
.
.  {* A unique sequence number.  *}
.  int id;
.
.  {* Which section in the bfd; 0..n-1 as sections are created in a bfd.  *}
.  int index;
.
.  {* The next section in the list belonging to the BFD, or NULL.  *}
.  struct bfd_section *next;
.
.  {* The previous section in the list belonging to the BFD, or NULL.  *}
.  struct bfd_section *prev;
.
.  {* The field flags contains attributes of the section. Some
.     flags are read in from the object file, and some are
.     synthesized from other information.  *}
.  flagword flags;
.
.#define SEC_NO_FLAGS   0x000
.
.  {* Tells the OS to allocate space for this section when loading.
.     This is clear for a section containing debug information only.  *}
.#define SEC_ALLOC      0x001
.
.  {* Tells the OS to load the section from the file when loading.
.     This is clear for a .bss section.  *}
.#define SEC_LOAD       0x002
.
.  {* The section contains data still to be relocated, so there is
.     some relocation information too.  *}
.#define SEC_RELOC      0x004
.
.  {* A signal to the OS that the section contains read only data.  *}
.#define SEC_READONLY   0x008
.
.  {* The section contains code only.  *}
.#define SEC_CODE       0x010
.
.  {* The section contains data only.  *}
.#define SEC_DATA       0x020
.
.  {* The section will reside in ROM.  *}
.#define SEC_ROM        0x040
.
.  {* The section contains constructor information. This section
.     type is used by the linker to create lists of constructors and
.     destructors used by <<g++>>. When a back end sees a symbol
.     which should be used in a constructor list, it creates a new
.     section for the type of name (e.g., <<__CTOR_LIST__>>), attaches
.     the symbol to it, and builds a relocation. To build the lists
.     of constructors, all the linker has to do is catenate all the
.     sections called <<__CTOR_LIST__>> and relocate the data
.     contained within - exactly the operations it would peform on
.     standard data.  *}
.#define SEC_CONSTRUCTOR 0x080
.
.  {* The section has contents - a data section could be
.     <<SEC_ALLOC>> | <<SEC_HAS_CONTENTS>>; a debug section could be
.     <<SEC_HAS_CONTENTS>>  *}
.#define SEC_HAS_CONTENTS 0x100
.
.  {* An instruction to the linker to not output the section
.     even if it has information which would normally be written.  *}
.#define SEC_NEVER_LOAD 0x200
.
.  {* The section contains thread local data.  *}
.#define SEC_THREAD_LOCAL 0x400
.
.  {* The section has GOT references.  This flag is only for the
.     linker, and is currently only used by the elf32-hppa back end.
.     It will be set if global offset table references were detected
.     in this section, which indicate to the linker that the section
.     contains PIC code, and must be handled specially when doing a
.     static link.  *}
.#define SEC_HAS_GOT_REF 0x800
.
.  {* The section contains common symbols (symbols may be defined
.     multiple times, the value of a symbol is the amount of
.     space it requires, and the largest symbol value is the one
.     used).  Most targets have exactly one of these (which we
.     translate to bfd_com_section_ptr), but ECOFF has two.  *}
.#define SEC_IS_COMMON 0x1000
.
.  {* The section contains only debugging information.  For
.     example, this is set for ELF .debug and .stab sections.
.     strip tests this flag to see if a section can be
.     discarded.  *}
.#define SEC_DEBUGGING 0x2000
.
.  {* The contents of this section are held in memory pointed to
.     by the contents field.  This is checked by bfd_get_section_contents,
.     and the data is retrieved from memory if appropriate.  *}
.#define SEC_IN_MEMORY 0x4000
.
.  {* The contents of this section are to be excluded by the
.     linker for executable and shared objects unless those
.     objects are to be further relocated.  *}
.#define SEC_EXCLUDE 0x8000
.
.  {* The contents of this section are to be sorted based on the sum of
.     the symbol and addend values specified by the associated relocation
.     entries.  Entries without associated relocation entries will be
.     appended to the end of the section in an unspecified order.  *}
.#define SEC_SORT_ENTRIES 0x10000
.
.  {* When linking, duplicate sections of the same name should be
.     discarded, rather than being combined into a single section as
.     is usually done.  This is similar to how common symbols are
.     handled.  See SEC_LINK_DUPLICATES below.  *}
.#define SEC_LINK_ONCE 0x20000
.
.  {* If SEC_LINK_ONCE is set, this bitfield describes how the linker
.     should handle duplicate sections.  *}
.#define SEC_LINK_DUPLICATES 0xc0000
.
.  {* This value for SEC_LINK_DUPLICATES means that duplicate
.     sections with the same name should simply be discarded.  *}
.#define SEC_LINK_DUPLICATES_DISCARD 0x0
.
.  {* This value for SEC_LINK_DUPLICATES means that the linker
.     should warn if there are any duplicate sections, although
.     it should still only link one copy.  *}
.#define SEC_LINK_DUPLICATES_ONE_ONLY 0x40000
.
.  {* This value for SEC_LINK_DUPLICATES means that the linker
.     should warn if any duplicate sections are a different size.  *}
.#define SEC_LINK_DUPLICATES_SAME_SIZE 0x80000
.
.  {* This value for SEC_LINK_DUPLICATES means that the linker
.     should warn if any duplicate sections contain different
.     contents.  *}
.#define SEC_LINK_DUPLICATES_SAME_CONTENTS \
.  (SEC_LINK_DUPLICATES_ONE_ONLY | SEC_LINK_DUPLICATES_SAME_SIZE)
.
.  {* This section was created by the linker as part of dynamic
.     relocation or other arcane processing.  It is skipped when
.     going through the first-pass output, trusting that someone
.     else up the line will take care of it later.  *}
.#define SEC_LINKER_CREATED 0x100000
.
.  {* This section should not be subject to garbage collection.
.     Also set to inform the linker that this section should not be
.     listed in the link map as discarded.  *}
.#define SEC_KEEP 0x200000
.
.  {* This section contains "short" data, and should be placed
.     "near" the GP.  *}
.#define SEC_SMALL_DATA 0x400000
.
.  {* Attempt to merge identical entities in the section.
.     Entity size is given in the entsize field.  *}
.#define SEC_MERGE 0x800000
.
.  {* If given with SEC_MERGE, entities to merge are zero terminated
.     strings where entsize specifies character size instead of fixed
.     size entries.  *}
.#define SEC_STRINGS 0x1000000
.
.  {* This section contains data about section groups.  *}
.#define SEC_GROUP 0x2000000
.
.  {* The section is a COFF shared library section.  This flag is
.     only for the linker.  If this type of section appears in
.     the input file, the linker must copy it to the output file
.     without changing the vma or size.  FIXME: Although this
.     was originally intended to be general, it really is COFF
.     specific (and the flag was renamed to indicate this).  It
.     might be cleaner to have some more general mechanism to
.     allow the back end to control what the linker does with
.     sections.  *}
.#define SEC_COFF_SHARED_LIBRARY 0x4000000
.
.  {* This input section should be copied to output in reverse order
.     as an array of pointers.  This is for ELF linker internal use
.     only.  *}
.#define SEC_ELF_REVERSE_COPY 0x4000000
.
.  {* This section contains data which may be shared with other
.     executables or shared objects. This is for COFF only.  *}
.#define SEC_COFF_SHARED 0x8000000
.
.  {* When a section with this flag is being linked, then if the size of
.     the input section is less than a page, it should not cross a page
.     boundary.  If the size of the input section is one page or more,
.     it should be aligned on a page boundary.  This is for TI
.     TMS320C54X only.  *}
.#define SEC_TIC54X_BLOCK 0x10000000
.
.  {* Conditionally link this section; do not link if there are no
.     references found to any symbol in the section.  This is for TI
.     TMS320C54X only.  *}
.#define SEC_TIC54X_CLINK 0x20000000
.
.  {* Indicate that section has the no read flag set. This happens
.     when memory read flag isn't set. *}
.#define SEC_COFF_NOREAD 0x40000000
.
.  {*  End of section flags.  *}
.
.  {* Some internal packed boolean fields.  *}
.
.  {* See the vma field.  *}
.  unsigned int user_set_vma : 1;
.
.  {* A mark flag used by some of the linker backends.  *}
.  unsigned int linker_mark : 1;
.
.  {* Another mark flag used by some of the linker backends.  Set for
.     output sections that have an input section.  *}
.  unsigned int linker_has_input : 1;
.
.  {* Mark flag used by some linker backends for garbage collection.  *}
.  unsigned int gc_mark : 1;
.
.  {* Section compression status.  *}
.  unsigned int compress_status : 2;
.#define COMPRESS_SECTION_NONE    0
.#define COMPRESS_SECTION_DONE    1
.#define DECOMPRESS_SECTION_SIZED 2
.
.  {* The following flags are used by the ELF linker. *}
.
.  {* Mark sections which have been allocated to segments.  *}
.  unsigned int segment_mark : 1;
.
.  {* Type of sec_info information.  *}
.  unsigned int sec_info_type:3;
.#define SEC_INFO_TYPE_NONE      0
.#define SEC_INFO_TYPE_STABS     1
.#define SEC_INFO_TYPE_MERGE     2
.#define SEC_INFO_TYPE_EH_FRAME  3
.#define SEC_INFO_TYPE_JUST_SYMS 4
.
.  {* Nonzero if this section uses RELA relocations, rather than REL.  *}
.  unsigned int use_rela_p:1;
.
.  {* Bits used by various backends.  The generic code doesn't touch
.     these fields.  *}
.
.  unsigned int sec_flg0:1;
.  unsigned int sec_flg1:1;
.  unsigned int sec_flg2:1;
.  unsigned int sec_flg3:1;
.  unsigned int sec_flg4:1;
.  unsigned int sec_flg5:1;
.
.  {* End of internal packed boolean fields.  *}
.
.  {*  The virtual memory address of the section - where it will be
.      at run time.  The symbols are relocated against this.  The
.      user_set_vma flag is maintained by bfd; if it's not set, the
.      backend can assign addresses (for example, in <<a.out>>, where
.      the default address for <<.data>> is dependent on the specific
.      target and various flags).  *}
.  bfd_vma vma;
.
.  {*  The load address of the section - where it would be in a
.      rom image; really only used for writing section header
.      information.  *}
.  bfd_vma lma;
.
.  {* The size of the section in octets, as it will be output.
.     Contains a value even if the section has no contents (e.g., the
.     size of <<.bss>>).  *}
.  bfd_size_type size;
.
.  {* For input sections, the original size on disk of the section, in
.     octets.  This field should be set for any section whose size is
.     changed by linker relaxation.  It is required for sections where
.     the linker relaxation scheme doesn't cache altered section and
.     reloc contents (stabs, eh_frame, SEC_MERGE, some coff relaxing
.     targets), and thus the original size needs to be kept to read the
.     section multiple times.  For output sections, rawsize holds the
.     section size calculated on a previous linker relaxation pass.  *}
.  bfd_size_type rawsize;
.
.  {* The compressed size of the section in octets.  *}
.  bfd_size_type compressed_size;
.
.  {* Relaxation table. *}
.  struct relax_table *relax;
.
.  {* Count of used relaxation table entries. *}
.  int relax_count;
.
.
.  {* If this section is going to be output, then this value is the
.     offset in *bytes* into the output section of the first byte in the
.     input section (byte ==> smallest addressable unit on the
.     target).  In most cases, if this was going to start at the
.     100th octet (8-bit quantity) in the output section, this value
.     would be 100.  However, if the target byte size is 16 bits
.     (bfd_octets_per_byte is "2"), this value would be 50.  *}
.  bfd_vma output_offset;
.
.  {* The output section through which to map on output.  *}
.  struct bfd_section *output_section;
.
.  {* The alignment requirement of the section, as an exponent of 2 -
.     e.g., 3 aligns to 2^3 (or 8).  *}
.  unsigned int alignment_power;
.
.  {* If an input section, a pointer to a vector of relocation
.     records for the data in this section.  *}
.  struct reloc_cache_entry *relocation;
.
.  {* If an output section, a pointer to a vector of pointers to
.     relocation records for the data in this section.  *}
.  struct reloc_cache_entry **orelocation;
.
.  {* The number of relocation records in one of the above.  *}
.  unsigned reloc_count;
.
.  {* Information below is back end specific - and not always used
.     or updated.  *}
.
.  {* File position of section data.  *}
.  file_ptr filepos;
.
.  {* File position of relocation info.  *}
.  file_ptr rel_filepos;
.
.  {* File position of line data.  *}
.  file_ptr line_filepos;
.
.  {* Pointer to data for applications.  *}
.  void *userdata;
.
.  {* If the SEC_IN_MEMORY flag is set, this points to the actual
.     contents.  *}
.  unsigned char *contents;
.
.  {* Attached line number information.  *}
.  alent *lineno;
.
.  {* Number of line number records.  *}
.  unsigned int lineno_count;
.
.  {* Entity size for merging purposes.  *}
.  unsigned int entsize;
.
.  {* Points to the kept section if this section is a link-once section,
.     and is discarded.  *}
.  struct bfd_section *kept_section;
.
.  {* When a section is being output, this value changes as more
.     linenumbers are written out.  *}
.  file_ptr moving_line_filepos;
.
.  {* What the section number is in the target world.  *}
.  int target_index;
.
.  void *used_by_bfd;
.
.  {* If this is a constructor section then here is a list of the
.     relocations created to relocate items within it.  *}
.  struct relent_chain *constructor_chain;
.
.  {* The BFD which owns the section.  *}
.  bfd *owner;
.
.  {* A symbol which points at this section only.  *}
.  struct bfd_symbol *symbol;
.  struct bfd_symbol **symbol_ptr_ptr;
.
.  {* Early in the link process, map_head and map_tail are used to build
.     a list of input sections attached to an output section.  Later,
.     output sections use these fields for a list of bfd_link_order
.     structs.  *}
.  union {
.    struct bfd_link_order *link_order;
.    struct bfd_section *s;
.  } map_head, map_tail;
.} asection;
.
.{* Relax table contains information about instructions which can
.   be removed by relaxation -- replacing a long address with a
.   short address.  *}
.struct relax_table {
.  {* Address where bytes may be deleted. *}
.  bfd_vma addr;
.
.  {* Number of bytes to be deleted.  *}
.  int size;
.};
.
.{* These sections are global, and are managed by BFD.  The application
.   and target back end are not permitted to change the values in
.   these sections.  *}
.extern asection _bfd_std_section[4];
.
.#define BFD_ABS_SECTION_NAME "*ABS*"
.#define BFD_UND_SECTION_NAME "*UND*"
.#define BFD_COM_SECTION_NAME "*COM*"
.#define BFD_IND_SECTION_NAME "*IND*"
.
.{* Pointer to the common section.  *}
.#define bfd_com_section_ptr (&_bfd_std_section[0])
.{* Pointer to the undefined section.  *}
.#define bfd_und_section_ptr (&_bfd_std_section[1])
.{* Pointer to the absolute section.  *}
.#define bfd_abs_section_ptr (&_bfd_std_section[2])
.{* Pointer to the indirect section.  *}
.#define bfd_ind_section_ptr (&_bfd_std_section[3])
.
.#define bfd_is_und_section(sec) ((sec) == bfd_und_section_ptr)
.#define bfd_is_abs_section(sec) ((sec) == bfd_abs_section_ptr)
.#define bfd_is_ind_section(sec) ((sec) == bfd_ind_section_ptr)
.
.#define bfd_is_const_section(SEC)		\
. (   ((SEC) == bfd_abs_section_ptr)		\
.  || ((SEC) == bfd_und_section_ptr)		\
.  || ((SEC) == bfd_com_section_ptr)		\
.  || ((SEC) == bfd_ind_section_ptr))
.
.{* Macros to handle insertion and deletion of a bfd's sections.  These
.   only handle the list pointers, ie. do not adjust section_count,
.   target_index etc.  *}
.#define bfd_section_list_remove(ABFD, S) \
.  do							\
.    {							\
.      asection *_s = S;				\
.      asection *_next = _s->next;			\
.      asection *_prev = _s->prev;			\
.      if (_prev)					\
.        _prev->next = _next;				\
.      else						\
.        (ABFD)->sections = _next;			\
.      if (_next)					\
.        _next->prev = _prev;				\
.      else						\
.        (ABFD)->section_last = _prev;			\
.    }							\
.  while (0)
.#define bfd_section_list_append(ABFD, S) \
.  do							\
.    {							\
.      asection *_s = S;				\
.      bfd *_abfd = ABFD;				\
.      _s->next = NULL;					\
.      if (_abfd->section_last)				\
.        {						\
.          _s->prev = _abfd->section_last;		\
.          _abfd->section_last->next = _s;		\
.        }						\
.      else						\
.        {						\
.          _s->prev = NULL;				\
.          _abfd->sections = _s;			\
.        }						\
.      _abfd->section_last = _s;			\
.    }							\
.  while (0)
.#define bfd_section_list_prepend(ABFD, S) \
.  do							\
.    {							\
.      asection *_s = S;				\
.      bfd *_abfd = ABFD;				\
.      _s->prev = NULL;					\
.      if (_abfd->sections)				\
.        {						\
.          _s->next = _abfd->sections;			\
.          _abfd->sections->prev = _s;			\
.        }						\
.      else						\
.        {						\
.          _s->next = NULL;				\
.          _abfd->section_last = _s;			\
.        }						\
.      _abfd->sections = _s;				\
.    }							\
.  while (0)
.#define bfd_section_list_insert_after(ABFD, A, S) \
.  do							\
.    {							\
.      asection *_a = A;				\
.      asection *_s = S;				\
.      asection *_next = _a->next;			\
.      _s->next = _next;				\
.      _s->prev = _a;					\
.      _a->next = _s;					\
.      if (_next)					\
.        _next->prev = _s;				\
.      else						\
.        (ABFD)->section_last = _s;			\
.    }							\
.  while (0)
.#define bfd_section_list_insert_before(ABFD, B, S) \
.  do							\
.    {							\
.      asection *_b = B;				\
.      asection *_s = S;				\
.      asection *_prev = _b->prev;			\
.      _s->prev = _prev;				\
.      _s->next = _b;					\
.      _b->prev = _s;					\
.      if (_prev)					\
.        _prev->next = _s;				\
.      else						\
.        (ABFD)->sections = _s;				\
.    }							\
.  while (0)
.#define bfd_section_removed_from_list(ABFD, S) \
.  ((S)->next == NULL ? (ABFD)->section_last != (S) : (S)->next->prev != (S))
.
.#define BFD_FAKE_SECTION(SEC, FLAGS, SYM, NAME, IDX)			\
.  {* name, id,  index, next, prev, flags, user_set_vma,            *}	\
.  { NAME,  IDX, 0,     NULL, NULL, FLAGS, 0,				\
.									\
.  {* linker_mark, linker_has_input, gc_mark, decompress_status,    *}	\
.     0,           0,                1,       0,			\
.									\
.  {* segment_mark, sec_info_type, use_rela_p,                      *}	\
.     0,            0,             0,					\
.									\
.  {* sec_flg0, sec_flg1, sec_flg2, sec_flg3, sec_flg4, sec_flg5,   *}	\
.     0,        0,        0,        0,        0,        0,		\
.									\
.  {* vma, lma, size, rawsize, compressed_size, relax, relax_count, *}	\
.     0,   0,   0,    0,       0,               0,     0,		\
.									\
.  {* output_offset, output_section, alignment_power,               *}	\
.     0,             &SEC,           0,					\
.									\
.  {* relocation, orelocation, reloc_count, filepos, rel_filepos,   *}	\
.     NULL,       NULL,        0,           0,       0,			\
.									\
.  {* line_filepos, userdata, contents, lineno, lineno_count,       *}	\
.     0,            NULL,     NULL,     NULL,   0,			\
.									\
.  {* entsize, kept_section, moving_line_filepos,		     *}	\
.     0,       NULL,	      0,					\
.									\
.  {* target_index, used_by_bfd, constructor_chain, owner,          *}	\
.     0,            NULL,        NULL,              NULL,		\
.									\
.  {* symbol,                    symbol_ptr_ptr,                    *}	\
.     (struct bfd_symbol *) SYM, &SEC.symbol,				\
.									\
.  {* map_head, map_tail                                            *}	\
.     { NULL }, { NULL }						\
.    }
.
*/

/* We use a macro to initialize the static asymbol structures because
   traditional C does not permit us to initialize a union member while
   gcc warns if we don't initialize it.  */
 /* the_bfd, name, value, attr, section [, udata] */
#ifdef __STDC__
#define GLOBAL_SYM_INIT(NAME, SECTION) \
  { 0, NAME, 0, BSF_SECTION_SYM, SECTION, { 0 }}
#else
#define GLOBAL_SYM_INIT(NAME, SECTION) \
  { 0, NAME, 0, BSF_SECTION_SYM, SECTION }
#endif

/* These symbols are global, not specific to any BFD.  Therefore, anything
   that tries to change them is broken, and should be repaired.  */

static const asymbol global_syms[] =
{
  GLOBAL_SYM_INIT (BFD_COM_SECTION_NAME, bfd_com_section_ptr),
  GLOBAL_SYM_INIT (BFD_UND_SECTION_NAME, bfd_und_section_ptr),
  GLOBAL_SYM_INIT (BFD_ABS_SECTION_NAME, bfd_abs_section_ptr),
  GLOBAL_SYM_INIT (BFD_IND_SECTION_NAME, bfd_ind_section_ptr)
};

#define STD_SECTION(NAME, IDX, FLAGS) \
  BFD_FAKE_SECTION(_bfd_std_section[IDX], FLAGS, &global_syms[IDX], NAME, IDX)

asection _bfd_std_section[] = {
  STD_SECTION (BFD_COM_SECTION_NAME, 0, SEC_IS_COMMON),
  STD_SECTION (BFD_UND_SECTION_NAME, 1, 0),
  STD_SECTION (BFD_ABS_SECTION_NAME, 2, 0),
  STD_SECTION (BFD_IND_SECTION_NAME, 3, 0)
};
#undef STD_SECTION

/* Initialize an entry in the section hash table.  */

struct bfd_hash_entry *
bfd_section_hash_newfunc (struct bfd_hash_entry *entry,
			  struct bfd_hash_table *table,
			  const char *string)
{
  /* Allocate the structure if it has not already been allocated by a
     subclass.  */
  if (entry == NULL)
    {
      entry = (struct bfd_hash_entry *)
	bfd_hash_allocate (table, sizeof (struct section_hash_entry));
      if (entry == NULL)
	return entry;
    }

  /* Call the allocation method of the superclass.  */
  entry = bfd_hash_newfunc (entry, table, string);
  if (entry != NULL)
    memset (&((struct section_hash_entry *) entry)->section, 0,
	    sizeof (asection));

  return entry;
}

#define section_hash_lookup(table, string, create, copy) \
  ((struct section_hash_entry *) \
   bfd_hash_lookup ((table), (string), (create), (copy)))

/* Create a symbol whose only job is to point to this section.  This
   is useful for things like relocs which are relative to the base
   of a section.  */

bfd_boolean
_bfd_generic_new_section_hook (bfd *abfd, asection *newsect)
{
  newsect->symbol = bfd_make_empty_symbol (abfd);
  if (newsect->symbol == NULL)
    return FALSE;

  newsect->symbol->name = newsect->name;
  newsect->symbol->value = 0;
  newsect->symbol->section = newsect;
  newsect->symbol->flags = BSF_SECTION_SYM;

  newsect->symbol_ptr_ptr = &newsect->symbol;
  return TRUE;
}

/* Initializes a new section.  NEWSECT->NAME is already set.  */

static asection *
bfd_section_init (bfd *abfd, asection *newsect)
{
  static int section_id = 0x10;  /* id 0 to 3 used by STD_SECTION.  */

  newsect->id = section_id;
  newsect->index = abfd->section_count;
  newsect->owner = abfd;

  if (! BFD_SEND (abfd, _new_section_hook, (abfd, newsect)))
    return NULL;

  section_id++;
  abfd->section_count++;
  bfd_section_list_append (abfd, newsect);
  return newsect;
}

/*
DOCDD
INODE
section prototypes,  , typedef asection, Sections
SUBSECTION
	Section prototypes

These are the functions exported by the section handling part of BFD.
*/

/*
FUNCTION
	bfd_section_list_clear

SYNOPSIS
	void bfd_section_list_clear (bfd *);

DESCRIPTION
	Clears the section list, and also resets the section count and
	hash table entries.
*/

void
bfd_section_list_clear (bfd *abfd)
{
  abfd->sections = NULL;
  abfd->section_last = NULL;
  abfd->section_count = 0;
  memset (abfd->section_htab.table, 0,
	  abfd->section_htab.size * sizeof (struct bfd_hash_entry *));
  abfd->section_htab.count = 0;
}

/*
FUNCTION
	bfd_get_section_by_name

SYNOPSIS
	asection *bfd_get_section_by_name (bfd *abfd, const char *name);

DESCRIPTION
	Return the most recently created section attached to @@var{abfd}
	named @@var{name}.  Return NULL if no such section exists.
*/

asection *
bfd_get_section_by_name (bfd *abfd, const char *name)
{
  struct section_hash_entry *sh;

  sh = section_hash_lookup (&abfd->section_htab, name, FALSE, FALSE);
  if (sh != NULL)
    return &sh->section;

  return NULL;
}

/*
FUNCTION
       bfd_get_next_section_by_name

SYNOPSIS
       asection *bfd_get_next_section_by_name (asection *sec);

DESCRIPTION
       Given @@var{sec} is a section returned by @@code{bfd_get_section_by_name},
       return the next most recently created section attached to the same
       BFD with the same name.  Return NULL if no such section exists.
*/

asection *
bfd_get_next_section_by_name (asection *sec)
{
  struct section_hash_entry *sh;
  const char *name;
  unsigned long hash;

  sh = ((struct section_hash_entry *)
	((char *) sec - offsetof (struct section_hash_entry, section)));

  hash = sh->root.hash;
  name = sec->name;
  for (sh = (struct section_hash_entry *) sh->root.next;
       sh != NULL;
       sh = (struct section_hash_entry *) sh->root.next)
    if (sh->root.hash == hash
       && strcmp (sh->root.string, name) == 0)
      return &sh->section;

  return NULL;
}

/*
FUNCTION
	bfd_get_linker_section

SYNOPSIS
	asection *bfd_get_linker_section (bfd *abfd, const char *name);

DESCRIPTION
	Return the linker created section attached to @@var{abfd}
	named @@var{name}.  Return NULL if no such section exists.
*/

asection *
bfd_get_linker_section (bfd *abfd, const char *name)
{
  asection *sec = bfd_get_section_by_name (abfd, name);

  while (sec != NULL && (sec->flags & SEC_LINKER_CREATED) == 0)
    sec = bfd_get_next_section_by_name (sec);
  return sec;
}

/*
FUNCTION
	bfd_get_section_by_name_if

SYNOPSIS
	asection *bfd_get_section_by_name_if
	  (bfd *abfd,
	   const char *name,
	   bfd_boolean (*func) (bfd *abfd, asection *sect, void *obj),
	   void *obj);

DESCRIPTION
	Call the provided function @@var{func} for each section
	attached to the BFD @@var{abfd} whose name matches @@var{name},
	passing @@var{obj} as an argument. The function will be called
	as if by

|	func (abfd, the_section, obj);

	It returns the first section for which @@var{func} returns true,
	otherwise <<NULL>>.

*/

asection *
bfd_get_section_by_name_if (bfd *abfd, const char *name,
			    bfd_boolean (*operation) (bfd *,
						      asection *,
						      void *),
			    void *user_storage)
{
  struct section_hash_entry *sh;
  unsigned long hash;

  sh = section_hash_lookup (&abfd->section_htab, name, FALSE, FALSE);
  if (sh == NULL)
    return NULL;

  hash = sh->root.hash;
  do
    {
      if ((*operation) (abfd, &sh->section, user_storage))
	return &sh->section;
      sh = (struct section_hash_entry *) sh->root.next;
    }
  while (sh != NULL && sh->root.hash == hash
	 && strcmp (sh->root.string, name) == 0);

  return NULL;
}

/*
FUNCTION
	bfd_get_unique_section_name

SYNOPSIS
	char *bfd_get_unique_section_name
	  (bfd *abfd, const char *templat, int *count);

DESCRIPTION
	Invent a section name that is unique in @@var{abfd} by tacking
	a dot and a digit suffix onto the original @@var{templat}.  If
	@@var{count} is non-NULL, then it specifies the first number
	tried as a suffix to generate a unique name.  The value
	pointed to by @@var{count} will be incremented in this case.
*/

char *
bfd_get_unique_section_name (bfd *abfd, const char *templat, int *count)
{
  int num;
  unsigned int len;
  char *sname;

  len = strlen (templat);
  sname = (char *) bfd_malloc (len + 8);
  if (sname == NULL)
    return NULL;
  memcpy (sname, templat, len);
  num = 1;
  if (count != NULL)
    num = *count;

  do
    {
      /* If we have a million sections, something is badly wrong.  */
      if (num > 999999)
	abort ();
      sprintf (sname + len, ".%d", num++);
    }
  while (section_hash_lookup (&abfd->section_htab, sname, FALSE, FALSE));

  if (count != NULL)
    *count = num;
  return sname;
}

/*
FUNCTION
	bfd_make_section_old_way

SYNOPSIS
	asection *bfd_make_section_old_way (bfd *abfd, const char *name);

DESCRIPTION
	Create a new empty section called @@var{name}
	and attach it to the end of the chain of sections for the
	BFD @@var{abfd}. An attempt to create a section with a name which
	is already in use returns its pointer without changing the
	section chain.

	It has the funny name since this is the way it used to be
	before it was rewritten....

	Possible errors are:
	o <<bfd_error_invalid_operation>> -
	If output has already started for this BFD.
	o <<bfd_error_no_memory>> -
	If memory allocation fails.

*/

asection *
bfd_make_section_old_way (bfd *abfd, const char *name)
{
  asection *newsect;

  if (abfd->output_has_begun)
    {
      bfd_set_error (bfd_error_invalid_operation);
      return NULL;
    }

  if (strcmp (name, BFD_ABS_SECTION_NAME) == 0)
    newsect = bfd_abs_section_ptr;
  else if (strcmp (name, BFD_COM_SECTION_NAME) == 0)
    newsect = bfd_com_section_ptr;
  else if (strcmp (name, BFD_UND_SECTION_NAME) == 0)
    newsect = bfd_und_section_ptr;
  else if (strcmp (name, BFD_IND_SECTION_NAME) == 0)
    newsect = bfd_ind_section_ptr;
  else
    {
      struct section_hash_entry *sh;

      sh = section_hash_lookup (&abfd->section_htab, name, TRUE, FALSE);
      if (sh == NULL)
	return NULL;

      newsect = &sh->section;
      if (newsect->name != NULL)
	{
	  /* Section already exists.  */
	  return newsect;
	}

      newsect->name = name;
      return bfd_section_init (abfd, newsect);
    }

  /* Call new_section_hook when "creating" the standard abs, com, und
     and ind sections to tack on format specific section data.
     Also, create a proper section symbol.  */
  if (! BFD_SEND (abfd, _new_section_hook, (abfd, newsect)))
    return NULL;
  return newsect;
}

/*
FUNCTION
	bfd_make_section_anyway_with_flags

SYNOPSIS
	asection *bfd_make_section_anyway_with_flags
	  (bfd *abfd, const char *name, flagword flags);

DESCRIPTION
   Create a new empty section called @@var{name} and attach it to the end of
   the chain of sections for @@var{abfd}.  Create a new section even if there
   is already a section with that name.  Also set the attributes of the
   new section to the value @@var{flags}.

   Return <<NULL>> and set <<bfd_error>> on error; possible errors are:
   o <<bfd_error_invalid_operation>> - If output has already started for @@var{abfd}.
   o <<bfd_error_no_memory>> - If memory allocation fails.
*/

sec_ptr
bfd_make_section_anyway_with_flags (bfd *abfd, const char *name,
				    flagword flags)
{
  struct section_hash_entry *sh;
  asection *newsect;

  if (abfd->output_has_begun)
    {
      bfd_set_error (bfd_error_invalid_operation);
      return NULL;
    }

  sh = section_hash_lookup (&abfd->section_htab, name, TRUE, FALSE);
  if (sh == NULL)
    return NULL;

  newsect = &sh->section;
  if (newsect->name != NULL)
    {
      /* We are making a section of the same name.  Put it in the
	 section hash table.  Even though we can't find it directly by a
	 hash lookup, we'll be able to find the section by traversing
	 sh->root.next quicker than looking at all the bfd sections.  */
      struct section_hash_entry *new_sh;
      new_sh = (struct section_hash_entry *)
	bfd_section_hash_newfunc (NULL, &abfd->section_htab, name);
      if (new_sh == NULL)
	return NULL;

      new_sh->root = sh->root;
      sh->root.next = &new_sh->root;
      newsect = &new_sh->section;
    }

  newsect->flags = flags;
  newsect->name = name;
  return bfd_section_init (abfd, newsect);
}

/*
FUNCTION
	bfd_make_section_anyway

SYNOPSIS
	asection *bfd_make_section_anyway (bfd *abfd, const char *name);

DESCRIPTION
   Create a new empty section called @@var{name} and attach it to the end of
   the chain of sections for @@var{abfd}.  Create a new section even if there
   is already a section with that name.

   Return <<NULL>> and set <<bfd_error>> on error; possible errors are:
   o <<bfd_error_invalid_operation>> - If output has already started for @@var{abfd}.
   o <<bfd_error_no_memory>> - If memory allocation fails.
*/

sec_ptr
bfd_make_section_anyway (bfd *abfd, const char *name)
{
  return bfd_make_section_anyway_with_flags (abfd, name, 0);
}

/*
FUNCTION
	bfd_make_section_with_flags

SYNOPSIS
	asection *bfd_make_section_with_flags
	  (bfd *, const char *name, flagword flags);

DESCRIPTION
   Like <<bfd_make_section_anyway>>, but return <<NULL>> (without calling
   bfd_set_error ()) without changing the section chain if there is already a
   section named @@var{name}.  Also set the attributes of the new section to
   the value @@var{flags}.  If there is an error, return <<NULL>> and set
   <<bfd_error>>.
*/

asection *
bfd_make_section_with_flags (bfd *abfd, const char *name,
			     flagword flags)
{
  struct section_hash_entry *sh;
  asection *newsect;

  if (abfd->output_has_begun)
    {
      bfd_set_error (bfd_error_invalid_operation);
      return NULL;
    }

  if (strcmp (name, BFD_ABS_SECTION_NAME) == 0
      || strcmp (name, BFD_COM_SECTION_NAME) == 0
      || strcmp (name, BFD_UND_SECTION_NAME) == 0
      || strcmp (name, BFD_IND_SECTION_NAME) == 0)
    return NULL;

  sh = section_hash_lookup (&abfd->section_htab, name, TRUE, FALSE);
  if (sh == NULL)
    return NULL;

  newsect = &sh->section;
  if (newsect->name != NULL)
    {
      /* Section already exists.  */
      return NULL;
    }

  newsect->name = name;
  newsect->flags = flags;
  return bfd_section_init (abfd, newsect);
}

/*
FUNCTION
	bfd_make_section

SYNOPSIS
	asection *bfd_make_section (bfd *, const char *name);

DESCRIPTION
   Like <<bfd_make_section_anyway>>, but return <<NULL>> (without calling
   bfd_set_error ()) without changing the section chain if there is already a
   section named @@var{name}.  If there is an error, return <<NULL>> and set
   <<bfd_error>>.
*/

asection *
bfd_make_section (bfd *abfd, const char *name)
{
  return bfd_make_section_with_flags (abfd, name, 0);
}

/*
FUNCTION
	bfd_set_section_flags

SYNOPSIS
	bfd_boolean bfd_set_section_flags
	  (bfd *abfd, asection *sec, flagword flags);

DESCRIPTION
	Set the attributes of the section @@var{sec} in the BFD
	@@var{abfd} to the value @@var{flags}. Return <<TRUE>> on success,
	<<FALSE>> on error. Possible error returns are:

	o <<bfd_error_invalid_operation>> -
	The section cannot have one or more of the attributes
	requested. For example, a .bss section in <<a.out>> may not
	have the <<SEC_HAS_CONTENTS>> field set.

*/

bfd_boolean
bfd_set_section_flags (bfd *abfd ATTRIBUTE_UNUSED,
		       sec_ptr section,
		       flagword flags)
{
  section->flags = flags;
  return TRUE;
}

/*
FUNCTION
	bfd_rename_section

SYNOPSIS
	void bfd_rename_section
	  (bfd *abfd, asection *sec, const char *newname);

DESCRIPTION
	Rename section @@var{sec} in @@var{abfd} to @@var{newname}.
*/

void
bfd_rename_section (bfd *abfd, sec_ptr sec, const char *newname)
{
  struct section_hash_entry *sh;

  sh = (struct section_hash_entry *)
    ((char *) sec - offsetof (struct section_hash_entry, section));
  sh->section.name = newname;
  bfd_hash_rename (&abfd->section_htab, newname, &sh->root);
}

/*
FUNCTION
	bfd_map_over_sections

SYNOPSIS
	void bfd_map_over_sections
	  (bfd *abfd,
	   void (*func) (bfd *abfd, asection *sect, void *obj),
	   void *obj);

DESCRIPTION
	Call the provided function @@var{func} for each section
	attached to the BFD @@var{abfd}, passing @@var{obj} as an
	argument. The function will be called as if by

|	func (abfd, the_section, obj);

	This is the preferred method for iterating over sections; an
	alternative would be to use a loop:

|	   asection *p;
|	   for (p = abfd->sections; p != NULL; p = p->next)
|	      func (abfd, p, ...)

*/

void
bfd_map_over_sections (bfd *abfd,
		       void (*operation) (bfd *, asection *, void *),
		       void *user_storage)
{
  asection *sect;
  unsigned int i = 0;

  for (sect = abfd->sections; sect != NULL; i++, sect = sect->next)
    (*operation) (abfd, sect, user_storage);

  if (i != abfd->section_count)	/* Debugging */
    abort ();
}

/*
FUNCTION
	bfd_sections_find_if

SYNOPSIS
	asection *bfd_sections_find_if
	  (bfd *abfd,
	   bfd_boolean (*operation) (bfd *abfd, asection *sect, void *obj),
	   void *obj);

DESCRIPTION
	Call the provided function @@var{operation} for each section
	attached to the BFD @@var{abfd}, passing @@var{obj} as an
	argument. The function will be called as if by

|	operation (abfd, the_section, obj);

	It returns the first section for which @@var{operation} returns true.

*/

asection *
bfd_sections_find_if (bfd *abfd,
		      bfd_boolean (*operation) (bfd *, asection *, void *),
		      void *user_storage)
{
  asection *sect;

  for (sect = abfd->sections; sect != NULL; sect = sect->next)
    if ((*operation) (abfd, sect, user_storage))
      break;

  return sect;
}

/*
FUNCTION
	bfd_set_section_size

SYNOPSIS
	bfd_boolean bfd_set_section_size
	  (bfd *abfd, asection *sec, bfd_size_type val);

DESCRIPTION
	Set @@var{sec} to the size @@var{val}. If the operation is
	ok, then <<TRUE>> is returned, else <<FALSE>>.

	Possible error returns:
	o <<bfd_error_invalid_operation>> -
	Writing has started to the BFD, so setting the size is invalid.

*/

bfd_boolean
bfd_set_section_size (bfd *abfd, sec_ptr ptr, bfd_size_type val)
{
  /* Once you've started writing to any section you cannot create or change
     the size of any others.  */

  if (abfd->output_has_begun)
    {
      bfd_set_error (bfd_error_invalid_operation);
      return FALSE;
    }

  ptr->size = val;
  return TRUE;
}

/*
FUNCTION
	bfd_set_section_contents

SYNOPSIS
	bfd_boolean bfd_set_section_contents
	  (bfd *abfd, asection *section, const void *data,
	   file_ptr offset, bfd_size_type count);

DESCRIPTION
	Sets the contents of the section @@var{section} in BFD
	@@var{abfd} to the data starting in memory at @@var{data}. The
	data is written to the output section starting at offset
	@@var{offset} for @@var{count} octets.

	Normally <<TRUE>> is returned, else <<FALSE>>. Possible error
	returns are:
	o <<bfd_error_no_contents>> -
	The output section does not have the <<SEC_HAS_CONTENTS>>
	attribute, so nothing can be written to it.
	o and some more too

	This routine is front end to the back end function
	<<_bfd_set_section_contents>>.

*/

bfd_boolean
bfd_set_section_contents (bfd *abfd,
			  sec_ptr section,
			  const void *location,
			  file_ptr offset,
			  bfd_size_type count)
{
  bfd_size_type sz;

  if (!(bfd_get_section_flags (abfd, section) & SEC_HAS_CONTENTS))
    {
      bfd_set_error (bfd_error_no_contents);
      return FALSE;
    }

  sz = section->size;
  if ((bfd_size_type) offset > sz
      || count > sz
      || offset + count > sz
      || count != (size_t) count)
    {
      bfd_set_error (bfd_error_bad_value);
      return FALSE;
    }

  if (!bfd_write_p (abfd))
    {
      bfd_set_error (bfd_error_invalid_operation);
      return FALSE;
    }

  /* Record a copy of the data in memory if desired.  */
  if (section->contents
      && location != section->contents + offset)
    memcpy (section->contents + offset, location, (size_t) count);

  if (BFD_SEND (abfd, _bfd_set_section_contents,
		(abfd, section, location, offset, count)))
    {
      abfd->output_has_begun = TRUE;
      return TRUE;
    }

  return FALSE;
}

/*
FUNCTION
	bfd_get_section_contents

SYNOPSIS
	bfd_boolean bfd_get_section_contents
	  (bfd *abfd, asection *section, void *location, file_ptr offset,
	   bfd_size_type count);

DESCRIPTION
	Read data from @@var{section} in BFD @@var{abfd}
	into memory starting at @@var{location}. The data is read at an
	offset of @@var{offset} from the start of the input section,
	and is read for @@var{count} bytes.

	If the contents of a constructor with the <<SEC_CONSTRUCTOR>>
	flag set are requested or if the section does not have the
	<<SEC_HAS_CONTENTS>> flag set, then the @@var{location} is filled
	with zeroes. If no errors occur, <<TRUE>> is returned, else
	<<FALSE>>.

*/
bfd_boolean
bfd_get_section_contents (bfd *abfd,
			  sec_ptr section,
			  void *location,
			  file_ptr offset,
			  bfd_size_type count)
{
  bfd_size_type sz;

  if (section->flags & SEC_CONSTRUCTOR)
    {
      memset (location, 0, (size_t) count);
      return TRUE;
    }

  if (abfd->direction != write_direction && section->rawsize != 0)
    sz = section->rawsize;
  else
    sz = section->size;
  if ((bfd_size_type) offset > sz
      || count > sz
      || offset + count > sz
      || count != (size_t) count)
    {
      bfd_set_error (bfd_error_bad_value);
      return FALSE;
    }

  if (count == 0)
    /* Don't bother.  */
    return TRUE;

  if ((section->flags & SEC_HAS_CONTENTS) == 0)
    {
      memset (location, 0, (size_t) count);
      return TRUE;
    }

  if ((section->flags & SEC_IN_MEMORY) != 0)
    {
      if (section->contents == NULL)
	{
	  /* This can happen because of errors earlier on in the linking process.
	     We do not want to seg-fault here, so clear the flag and return an
	     error code.  */
	  section->flags &= ~ SEC_IN_MEMORY;
	  bfd_set_error (bfd_error_invalid_operation);
	  return FALSE;
	}

      memmove (location, section->contents + offset, (size_t) count);
      return TRUE;
    }

  return BFD_SEND (abfd, _bfd_get_section_contents,
		   (abfd, section, location, offset, count));
}

/*
FUNCTION
	bfd_malloc_and_get_section

SYNOPSIS
	bfd_boolean bfd_malloc_and_get_section
	  (bfd *abfd, asection *section, bfd_byte **buf);

DESCRIPTION
	Read all data from @@var{section} in BFD @@var{abfd}
	into a buffer, *@@var{buf}, malloc'd by this function.
*/

bfd_boolean
bfd_malloc_and_get_section (bfd *abfd, sec_ptr sec, bfd_byte **buf)
{
  *buf = NULL;
  return bfd_get_full_section_contents (abfd, sec, buf);
}
/*
FUNCTION
	bfd_copy_private_section_data

SYNOPSIS
	bfd_boolean bfd_copy_private_section_data
	  (bfd *ibfd, asection *isec, bfd *obfd, asection *osec);

DESCRIPTION
	Copy private section information from @@var{isec} in the BFD
	@@var{ibfd} to the section @@var{osec} in the BFD @@var{obfd}.
	Return <<TRUE>> on success, <<FALSE>> on error.  Possible error
	returns are:

	o <<bfd_error_no_memory>> -
	Not enough memory exists to create private data for @@var{osec}.

.#define bfd_copy_private_section_data(ibfd, isection, obfd, osection) \
.     BFD_SEND (obfd, _bfd_copy_private_section_data, \
.		(ibfd, isection, obfd, osection))
*/

/*
FUNCTION
	bfd_generic_is_group_section

SYNOPSIS
	bfd_boolean bfd_generic_is_group_section (bfd *, const asection *sec);

DESCRIPTION
	Returns TRUE if @@var{sec} is a member of a group.
*/

bfd_boolean
bfd_generic_is_group_section (bfd *abfd ATTRIBUTE_UNUSED,
			      const asection *sec ATTRIBUTE_UNUSED)
{
  return FALSE;
}

/*
FUNCTION
	bfd_generic_discard_group

SYNOPSIS
	bfd_boolean bfd_generic_discard_group (bfd *abfd, asection *group);

DESCRIPTION
	Remove all members of @@var{group} from the output.
*/

bfd_boolean
bfd_generic_discard_group (bfd *abfd ATTRIBUTE_UNUSED,
			   asection *group ATTRIBUTE_UNUSED)
{
  return TRUE;
}
@


1.120
log
@Remove trailing white spaces in bfd

	* aout0.c: Remove trailing white spaces.
	* archive.c: Likewise.
	* archures.c: Likewise.
	* bfd-in.h: Likewise.
	* bfd-in2.h: Likewise.
	* coff-alpha.c: Likewise.
	* coff-i860.c: Likewise.
	* coff-mips.c: Likewise.
	* coff-ppc.c: Likewise.
	* coff-tic80.c: Likewise.
	* coff-x86_64.c: Likewise.
	* coff-z80.c: Likewise.
	* coffcode.h: Likewise.
	* coffgen.c: Likewise.
	* cofflink.c: Likewise.
	* compress.c: Likewise.
	* corefile.c: Likewise.
	* cpu-arm.c: Likewise.
	* cpu-avr.c: Likewise.
	* cpu-bfin.c: Likewise.
	* cpu-cr16.c: Likewise.
	* cpu-cr16c.c: Likewise.
	* cpu-crx.c: Likewise.
	* cpu-h8300.c: Likewise.
	* cpu-i386.c: Likewise.
	* cpu-lm32.c: Likewise.
	* cpu-m68k.c: Likewise.
	* cpu-moxie.c: Likewise.
	* cpu-msp430.c: Likewise.
	* cpu-sh.c: Likewise.
	* cpu-xc16x.c: Likewise.
	* dwarf2.c: Likewise.
	* ecofflink.c: Likewise.
	* ecoffswap.h: Likewise.
	* elf-ifunc.c: Likewise.
	* elf-m10300.c: Likewise.
	* elf-vxworks.c: Likewise.
	* elf32-avr.c: Likewise.
	* elf32-avr.h: Likewise.
	* elf32-cr16.c: Likewise.
	* elf32-cr16c.c: Likewise.
	* elf32-cris.c: Likewise.
	* elf32-crx.c: Likewise.
	* elf32-frv.c: Likewise.
	* elf32-hppa.c: Likewise.
	* elf32-i860.c: Likewise.
	* elf32-ip2k.c: Likewise.
	* elf32-iq2000.c: Likewise.
	* elf32-m32c.c: Likewise.
	* elf32-m68hc1x.c: Likewise.
	* elf32-msp430.c: Likewise.
	* elf32-mt.c: Likewise.
	* elf32-ppc.c: Likewise.
	* elf32-rl78.c: Likewise.
	* elf32-s390.c: Likewise.
	* elf32-score.h: Likewise.
	* elf32-sh-symbian.c: Likewise.
	* elf32-sh.c: Likewise.
	* elf32-spu.c: Likewise.
	* elf32-tic6x.c: Likewise.
	* elf32-v850.c: Likewise.
	* elf32-xc16x.c: Likewise.
	* elf32-xtensa.c: Likewise.
	* elf64-alpha.c: Likewise.
	* elf64-hppa.c: Likewise.
	* elf64-ppc.c: Likewise.
	* elf64-s390.c: Likewise.
	* elfcore.h: Likewise.
	* elflink.c: Likewise.
	* elfxx-mips.c: Likewise.
	* elfxx-sparc.c: Likewise.
	* elfxx-tilegx.c: Likewise.
	* ieee.c: Likewise.
	* libcoff.h: Likewise.
	* libpei.h: Likewise.
	* libxcoff.h: Likewise.
	* linker.c: Likewise.
	* mach-o-i386.c: Likewise.
	* mach-o-target.c: Likewise.
	* mach-o.c: Likewise.
	* mach-o.h: Likewise.
	* mmo.c: Likewise.
	* opncls.c: Likewise.
	* pdp11.c: Likewise.
	* pe-x86_64.c: Likewise.
	* peXXigen.c: Likewise.
	* pef-traceback.h: Likewise.
	* pei-x86_64.c: Likewise.
	* peicode.h: Likewise.
	* plugin.c: Likewise.
	* reloc.c: Likewise.
	* riscix.c: Likewise.
	* section.c: Likewise.
	* som.c: Likewise.
	* syms.c: Likewise.
	* tekhex.c: Likewise.
	* ticoff.h: Likewise.
	* vaxbsd.c: Likewise.
	* xcofflink.c: Likewise.
	* xtensa-isa.c: Likewise.
@
text
@d838 1
@


1.119
log
@	* section.c (_bfd_std_section): Rename from std_section.
        (bfd_com_section_ptr, bfd_und_section_ptr, bfd_abs_section_ptr)
        (STD_SECTION): Update.
	* bfd-in2.h: Rebuild.
@
text
@d535 1
a535 1
.   be removed by relaxation -- replacing a long address with a 
d540 1
a540 1
.  
d1548 1
a1548 1
      
@


1.118
log
@Replace memcpy with memmove

	* section.c (bfd_get_section_contents): Replace memcpy
	with memmove.
@
text
@d4 1
a4 1
   2012
d548 1
a548 1
.extern asection std_section[4];
d556 1
a556 1
.#define bfd_com_section_ptr (&std_section[0])
d558 1
a558 1
.#define bfd_und_section_ptr (&std_section[1])
d560 1
a560 1
.#define bfd_abs_section_ptr (&std_section[2])
d562 1
a562 1
.#define bfd_ind_section_ptr (&std_section[3])
d728 1
a728 1
  BFD_FAKE_SECTION(std_section[IDX], FLAGS, &global_syms[IDX], NAME, IDX)
d730 1
a730 1
asection std_section[] = {
@


1.117
log
@Fix a typo in section.c comments

	PR binutils/14335
	* section.c: Fix a typo in comments.
@
text
@d1549 1
a1549 1
      memcpy (location, section->contents + offset, (size_t) count);
@


1.116
log
@	* section.c (bfd_get_linker_section): New function.
	* elf32-arm.c: When retrieving SEC_LINKER_CREATED sections, use
	the above throughout rather than bfd_get_section_by_name.  Use
	bfd_make_section_anyway rather than bfd_make_section when creating
	them.
	* elf32-bfin.c: Likewise.
	* elf32-cr16.c: Likewise.
	* elf32-cris.c: Likewise.
	* elf32-frv.c: Likewise.
	* elf32-hppa.c: Likewise.
	* elf32-i370.c: Likewise.
	* elf32-i386.c: Likewise.
	* elf32-lm32.c: Likewise.
	* elf32-m32c.c: Likewise.
	* elf32-m32r.c: Likewise.
	* elf32-m68k.c: Likewise.
	* elf32-microblaze.c: Likewise.
	* elf32-ppc.c: Likewise.
	* elf32-rl78.c: Likewise.
	* elf32-s390.c: Likewise.
	* elf32-score.c: Likewise.
	* elf32-score7.c: Likewise.
	* elf32-sh.c: Likewise.
	* elf32-tic6x.c: Likewise.
	* elf32-tilepro.c: Likewise.
	* elf32-vax.c: Likewise.
	* elf32-xstormy16.c: Likewise.
	* elf32-xtensa.c: Likewise.
	* elf64-alpha.c: Likewise.
	* elf64-hppa.c: Likewise.
	* elf64-ia64-vms.c: Likewise.
	* elf64-ppc.c: Likewise.
	* elf64-s390.c: Likewise.
	* elf64-sh64.c: Likewise.
	* elf64-sparc.c: Likewise.
	* elf64-x86-64.c: Likewise.
	* elfnn-ia64.c: Likewise.
	* elfxx-mips.c: Likewise.
	* elfxx-sparc.c: Likewise.
	* elfxx-tilegx.c: Likewise.
	* elflink.c: Likewise.
	* elf-vxworks.c: Likewise.
	* elf-m10300.c: Likewise.  Also make use of htab plt, got and
	gotplt shortcuts.
	* bfd-in2.h: Regenerate.
	* elf32-lm32.c (lm32_elf_check_relocs): Use the correct bfd when
	calling create_rofixup_section.
	* elflink.c (bfd_elf_final_link): Simplify test for .dynstr.
@
text
@d1314 1
a1314 1
|	   section *p;
@


1.115
log
@	* elflink.c (bfd_elf_discard_info): Handle multiple .eh_frame
	sections attached to a BFD.
	* section.c (bfd_get_section_by_name): Rewrite description.
	(bfd_get_next_section_by_name): New function.
	* bfd-in2.h: Regenerate.
@
text
@d901 22
@


1.114
log
@
Add support for PowerPC VLE.

2012-05-14  Catherine Moore  <clm@@codesourcery.com>

	* NEWS:  Mention PowerPC VLE port.

2012-05-14  James Lemke <jwlemke@@codesourcery.com>
	    Catherine Moore  <clm@@codesourcery.com>

	bfd/
	* bfd.c (bfd_lookup_section_flags): Add section parm.
	* ecoff.c (bfd_debug_section): Remove flag_info initializer.
	* elf-bfd.h (bfd_elf_section_data): Move in section_flag_info.
	(bfd_elf_lookup_section_flags): Add section parm.
	* elf32-ppc.c (is_ppc_vle): New function.
	(ppc_elf_modify_segment_map): New function.
	(elf_backend_modify_segment_map): Define.
	(has_vle_insns): New define.
	* elf32-ppc.h (ppc_elf_modify_segment_map): Declare.
	* elflink.c (bfd_elf_lookup_section_flags): Add return value & parm.
	Move in logic to omit / include a section.
	* libbfd-in.h (bfd_link_info): Add section parm.
	(bfd_generic_lookup_section_flags): Likewise.
	* reloc.c (bfd_generic_lookup_section_flags): Likewise.
	* section.c (bfd_section): Move out section_flag_info.
	(BFD_FAKE_SECTION): Remove flag_info initializer.
	* targets.c (_bfd_lookup_section_flags): Add section parm.

2012-05-14  Catherine Moore  <clm@@codesourcery.com>

	bfd/
	* archures.c (bfd_mach_ppc_vle): New.
	* bfd-in2.h: Regenerated.
	* cpu-powerpc.c (bfd_powerpc_archs): New entry for vle.
	* elf32-ppc.c (split16_format_type): New enumeration.
	(ppc_elf_vle_split16): New function.
	(HOWTO): Add entries for R_PPC_VLE relocations.
	(ppc_elf_reloc_type_lookup): Handle PPC_VLE relocations.
	(ppc_elf_section_flags): New function.
	(ppc_elf_lookup_section_flags): New function.
	(ppc_elf_section_processing): New function.
	(ppc_elf_check_relocs): Handle PPC_VLE relocations.
	(ppc_elf_relocation_section): Likewise.
	(elf_backend_lookup_section_flags_hook): Define.
	(elf_backend_section_flags): Define.
	(elf_backend_section_processing): Define.
	* elf32-ppc.h (ppc_elf_section_processing): Declare.
	* libbfd.h: Regenerated.
	* reloc.c (BFD_RELOC_PPC_VLE_REL8, BFD_RELOC_PPC_VLE_REL15,
	BFD_RELOC_PPC_VLE_REL24, BFD_RELOC_PPC_VLE_LO16A,
	BFD_RELOC_PPC_VLE_LO16D, BFD_RELOC_PPC_VLE_HI16A,
	BFD_RELOC_PPC_VLE_HI16D, BFD_RELOC_PPC_VLE_HA16A,
	BFD_RELOC_PPC_VLE_HA16D, BFD_RELOC_PPC_VLE_SDA21,
	BFD_RELOC_PPC_VLE_SDA21_LO, BFD_RELOC_PPC_VLE_SDAREL_LO16A,
	BFD_RELOC_PPC_VLE_SDAREL_LO16D, BFD_RELOC_PPC_VLE_SDAREL_HI16A,
	BFD_RELOC_PPC_VLE_SDAREL_HI16D, BFD_RELOC_PPC_VLE_SDAREL_HA16A,
	BFD_RELOC_PPC_VLE_SDAREL_HA16D): New bfd relocations.

2012-05-14  James Lemke  <jwlemke@@codesourcery.com>

	gas/
	* config/tc-ppc.c (insn_validate): New func of existing code to call..
	(ppc_setup_opcodes): ..from 2 places here.
	Revise for second (VLE) opcode table.
	Add #ifdef'd code to print opcode tables.

2012-05-14  James Lemke  <jwlemke@@codesourcery.com>

	gas/
	* config/tc-ppc.c (ppc_setup_opcodes): Allow out-of-order
	for the VLE conditional branches.

2012-05-14  Catherine Moore  <clm@@codesourcery.com>
            Maciej W. Rozycki  <macro@@codesourcery.com>
	    Rhonda Wittels  <rhonda@@codesourcery.com>

	gas/
	* config/tc-ppc.c (PPC_VLE_SPLIT16A): New macro.
	(PPC_VLE_SPLIT16D): New macro.
	(PPC_VLE_LO16A): New macro.
	(PPC_VLE_LO16D): New macro.
	(PPC_VLE_HI16A): New macro.
	(PPC_VLE_HI16D): New macro.
	(PPC_VLE_HA16A): New macro.
	(PPC_VLE_HA16D): New macro.
	(PPC_APUINFO_VLE): New definition.
	(md_chars_to_number): New function.
	(md_parse_option): Check for combinations of little
	endian and -mvle.
	(md_show_usage): Document -mvle.
	(ppc_arch): Recognize VLE.
	(ppc_mach): Recognize bfd_mach_ppc_vle.
	(ppc_setup_opcodes): Print the opcode table if
	* config/tc-ppc.h (ppc_frag_check): Declare.
	* doc/c-ppc.texi: Document -mvle.
	* NEWS:  Mention PowerPC VLE port.

2012-05-14  Catherine Moore  <clm@@codesourcery.com>

	gas/
	* config/tc-ppc.h (ppc_dw2_line_min_insn_length): Declare.
	(DWARF2_LINE_MIN_INSN_LENGTH): Redefine.
	* config/tc-ppc.c (ppc_dw2_line_min_insn_length): New.
	* dwarf2dbg.c (scale_addr_delta): Handle values of 1
	for DWARF2_LINE_MIN_INSN_LENGTH.

2012-05-14  Catherine Moore  <clm@@codesourcery.com>
            Maciej W. Rozycki  <macro@@codesourcery.com>
	    Rhonda Wittels  <rhonda@@codesourcery.com>

	gas/testsuite/
	* gas/ppc/ppc.exp: Run new tests.
	* gas/ppc/vle-reloc.d: New test.
	* gas/ppc/vle-reloc.s: New test.
	* gas/ppc/vle-simple-1.d: New test.
	* gas/ppc/vle-simple-1.s: New test.
	* gas/ppc/vle-simple-2.d: New test.
	* gas/ppc/vle-simple-2.s: New test.
	* gas/ppc/vle-simple-3.d: New test.
	* gas/ppc/vle-simple-3.s: New test.
	* gas/ppc/vle-simple-4.d: New test.
	* gas/ppc/vle-simple-4.s: New test.
	* gas/ppc/vle-simple-5.d: New test.
	* gas/ppc/vle-simple-5.s: New test.
	* gas/ppc/vle-simple-6.d: New test.
	* gas/ppc/vle-simple-6.s: New test.
	* gas/ppc/vle.d: New test.
	* gas/ppc/vle.s: New test.

2012-05-14  James Lemke  <jwlemke@@codesourcery.com>
	include/elf/
	* ppc.h (SEC_PPC_VLE): Remove.

2012-05-14  Catherine Moore  <clm@@codesourcery.com>
	    James Lemke  <jwlemke@@codesourcery.com>

	include/elf/
	* ppc.h (R_PPC_VLE_REL8): New reloction.
	(R_PPC_VLE_REL15): Likewise.
	(R_PPC_VLE_REL24): Likewise.
	(R_PPC_VLE_LO16A): Likewise.
	(R_PPC_VLE_LO16D): Likewise.
	(R_PPC_VLE_HI16A): Likewise.
	(R_PPC_VLE_HI16D): Likewise.
	(R_PPC_VLE_HA16A): Likewise.
	(R_PPC_VLE_HA16D): Likewise.
	(R_PPC_VLE_SDA21): Likewise.
	(R_PPC_VLE_SDA21_LO): Likewise.
	(R_PPC_VLE_SDAREL_LO16A): Likewise.
	(R_PPC_VLE_SDAREL_LO16D): Likewise.
	(R_PPC_VLE_SDAREL_HI16A): Likewise.
	(R_PPC_VLE_SDAREL_HI16D): Likewise.
	(R_PPC_VLE_SDAREL_HA16A): Likewise.
	(R_PPC_VLE_SDAREL_HA16D): Likewise.
	(SEC_PPC_VLE): Remove.
	(PF_PPC_VLE): New program header flag.
	(SHF_PPC_VLE): New section header flag.
	(vle_opcodes, vle_num_opcodes): New.
	(VLE_OP): New macro.
	(VLE_OP_TO_SEG): New macro.

2012-05-14  Catherine Moore  <clm@@codesourcery.com>
            Maciej W. Rozycki  <macro@@codesourcery.com>
	    Rhonda Wittels  <rhonda@@codesourcery.com>

	include/opcode/
	* ppc.h (PPC_OPCODE_VLE): New definition.
	(PPC_OP_SA): New macro.
	(PPC_OP_SE_VLE): New macro.
	(PPC_OP): Use a variable shift amount.
	(powerpc_operand): Update comments.
	(PPC_OPSHIFT_INV): New macro.
	(PPC_OPERAND_CR): Replace with...
	(PPC_OPERAND_CR_BIT): ...this and
	(PPC_OPERAND_CR_REG): ...this.

2012-05-14  James Lemke  <jwlemke@@codesourcery.com>

	ld/
	* ldlang.c (walk_wild_consider_section): Don't copy section_flag_list.
	Pass it to callback.
	(walk_wild_section_general): Pass section_flag_list to callback.
	(lang_add_section): Add sflag_list parm.
	Move out logic to keep / omit a section & call bfd_lookup_section_flags.
	(output_section_callback_fast): Add sflag_list parm.
	Add new parm to lang_add_section calls.
	(output_section_callback): Likewise.
	(check_section_callback): Add sflag_list parm.
	(lang_place_orphans): Add new parm to lang_add_section calls.
	(gc_section_callback): Add sflag_list parm.
	(find_relro_section_callback): Likewise.
	* ldlang.h (callback_t): Add flag_info parm.
	(lang_add_section): Add sflag_list parm.
	* emultempl/armelf.em (elf32_arm_add_stub_section):
	Add lang_add_section parm.
	* emultempl/beos.em (gld*_place_orphan): Likewise.
	* emultempl/elf32.em (gld*_place_orphan): Likewise.
	* emultempl/hppaelf.em (hppaelf_add_stub_section): Likewise.
	* emultempl/m68hc1xelf.em (m68hc11elf_add_stub_section): Likewise.
	* emultempl/mipself.em (mips_add_stub_section): Likewise.
	* emultempl/mmo.em (mmo_place_orphan): Likewise.
	* emultempl/pe.em (gld_*_place_orphan): Likewise.
	* emultempl/pep.em (gld_*_place_orphan): Likewise.
	* emultempl/ppc64elf.em (ppc_add_stub_section): Likewise.
	* emultempl/spuelf.em (spu_place_special_section): Likewise.
	* emultempl/vms.em (vms_place_orphan): Likewise.

2012-05-14  James Lemke  <jwlemke@@codesourcery.com>

	ld/testsuite/
	* ld-powerpc/powerpc.exp: Create ppceabitests.
	* ld-powerpc/vle-multiseg.s: New.
	* ld-powerpc/vle-multiseg-1.d: New.
	* ld-powerpc/vle-multiseg-1.ld: New.
	* ld-powerpc/vle-multiseg-2.d: New.
	* ld-powerpc/vle-multiseg-2.ld: New.
	* ld-powerpc/vle-multiseg-3.d: New.
	* ld-powerpc/vle-multiseg-3.ld: New.
	* ld-powerpc/vle-multiseg-4.d: New.
	* ld-powerpc/vle-multiseg-4.ld: New.
	* ld-powerpc/vle-multiseg-5.d: New.
	* ld-powerpc/vle-multiseg-5.ld: New.
	* ld-powerpc/vle-multiseg-6.d: New.
	* ld-powerpc/vle-multiseg-6.ld: New.
	* ld-powerpc/vle-multiseg-6a.s: New.
	* ld-powerpc/vle-multiseg-6b.s: New.
	* ld-powerpc/vle-multiseg-6c.s: New.
	* ld-powerpc/vle-multiseg-6d.s: New.
	* ld-powerpc/powerpc.exp: Run new tests.

2012-05-14  Catherine Moore  <clm@@codesourcery.com>

	ld/
	* NEWS:  Mention PowerPC VLE port.

2012-05-14  Catherine Moore  <clm@@codesourcery.com>

	ld/testsuite/
	* ld-powerpc/apuinfo.rd: Update for VLE.
	* ld-powerpc/vle-reloc-1.d: New.
	* ld-powerpc/vle-reloc-1.s: New.
	* ld-powerpc/vle-reloc-2.d: New.
	* ld-powerpc/vle-reloc-2.s: New.
	* ld-powerpc/vle-reloc-3.d: New.
	* ld-powerpc/vle-reloc-3.s: New.
	* ld-powerpc/vle-reloc-def-1.s: New.
	* ld-powerpc/vle-reloc-def-2.s: New.
	* ld-powerpc/vle-reloc-def-3.s: New.

2012-05-14  James Lemke  <jwlemke@@codesourcery.com>

	opcodes/
	* ppc-dis.c (get_powerpc_dialect): Use is_ppc_vle.
	(PPC_OPCD_SEGS, VLE_OPCD_SEGS): New defines.
	(vle_opcd_indices): New array.
	(lookup_vle): New function.
	(disassemble_init_powerpc): Revise for second (VLE) opcode table.
	(print_insn_powerpc): Likewise.
	* ppc-opc.c: Likewise.

2012-05-14  Catherine Moore  <clm@@codesourcery.com>
            Maciej W. Rozycki  <macro@@codesourcery.com>
	    Rhonda Wittels  <rhonda@@codesourcery.com>
	    Nathan Froyd <froydnj@@codesourcery.com>

	opcodes/
	* ppc-opc.c (insert_arx, extract_arx): New functions.
	(insert_ary, extract_ary): New functions.
	(insert_li20, extract_li20): New functions.
	(insert_rx, extract_rx): New functions.
	(insert_ry, extract_ry): New functions.
	(insert_sci8, extract_sci8): New functions.
	(insert_sci8n, extract_sci8n): New functions.
	(insert_sd4h, extract_sd4h): New functions.
	(insert_sd4w, extract_sd4w): New functions.
	(insert_vlesi, extract_vlesi): New functions.
	(insert_vlensi, extract_vlensi): New functions.
	(insert_vleui, extract_vleui): New functions.
	(insert_vleil, extract_vleil): New functions.
 	(BI_MASK, BB_MASK, BT): Use PPC_OPERAND_CR_BIT.
 	(BI16, BI32, BO32, B8): New.
	(B15, B24, CRD32, CRS): New.
 	(CRD, OBF, BFA, CR, CRFS): Use PPC_OPERAND_CR_REG.
	(DB, IMM20, RD, Rx, ARX, RY, RZ): New.
	(ARY, SCLSCI8, SCLSCI8N, SE_SD, SE_SDH): New.
	(SH6_MASK): Use PPC_OPSHIFT_INV.
	(SI8, UI5, OIMM5, UI7, BO16): New.
	(VLESIMM, VLENSIMM, VLEUIMM, VLEUIMML): New.
	(XT6, XA6, XB6, XB6S, XC6): Use PPC_OPSHIFT_INV.
	(ALLOW8_SPRG): New.
	(insert_sprg, extract_sprg): Check ALLOW8_SPRG.
	(OPVUP, OPVUP_MASK OPVUP): New
	(BD8, BD8_MASK, BD8IO, BD8IO_MASK): New.
	(EBD8IO, EBD8IO1_MASK, EBD8IO2_MASK, EBD8IO3_MASK): New.
	(BD15, BD15_MASK, EBD15, EBD15_MASK, EBD15BI, EBD15BI_MASK): New.
	(BD24,BD24_MASK, C_LK, C_LK_MASK, C, C_MASK): New.
 	(IA16, IA16_MASK, I16A, I16A_MASK, I16L, I16L_MASK): New.
	(IM7, IM7_MASK, LI20, LI20_MASK, SCI8, SCI8_MASK): New.
	(SCI8BF, SCI8BF_MASK, SD4, SD4_MASK): New.
	(SE_IM5, SE_IM5_MASK): New.
	(SE_R, SE_R_MASK, SE_RR, SE_RR_MASK): New.
	(EX, EX_MASK, BO16F, BO16T, BO32F, BO32T): New.
	(BO32DNZ, BO32DZ): New.
	(NO371, PPCSPE, PPCISEL, PPCEFS, MULHW): Include PPC_OPCODE_VLE.
	(PPCVLE): New.
	(powerpc_opcodes): Add new VLE instructions.  Update existing
	instruction to include PPCVLE if supported.
	* ppc-dis.c (ppc_opts): Add vle entry.
	(get_powerpc_dialect): New function.
	(powerpc_init_dialect): VLE support.
	(print_insn_big_powerpc): Call get_powerpc_dialect.
	(print_insn_little_powerpc): Likewise.
	(operand_value_powerpc): Handle negative shift counts.
	(print_insn_powerpc): Handle 2-byte instruction lengths.
@
text
@d848 2
a849 8
	Run through @@var{abfd} and return the one of the
	<<asection>>s whose name matches @@var{name}, otherwise <<NULL>>.
	@@xref{Sections}, for more information.

	This should only be used in special cases; the normal way to process
	all sections of a given name is to use <<bfd_map_over_sections>> and
	<<strcmp>> on the name (or better yet, base it on the section flags
	or something else) for each section.
d866 35
@


1.113
log
@Replace all uses of bfd_abs_section, bfd_com_section, bfd_und_section
and bfd_ind_section with their _ptr variants, or use corresponding
bfd_is_* macros.
@
text
@a519 3
.  {* INPUT_SECTION_FLAGS if specified in the linker script.  *}
.  struct flag_info *section_flag_info;
.
a694 3
.  {* flag_info,						    *}  \
.     NULL,								\
.									\
@


1.112
log
@	PR ld/13991
bfd/
	* bfd/elf-bfd.h (_bfd_elf_link_just_syms): Define as
	_bfd_generic_link_just_syms.
	* bfd/elflink.c (_bfd_elf_link_just_syms): Delete.
	* bfd/linker.c (_bfd_generic_link_just_syms): Set sec_info_type.

	* bfd/bfd-in.h (discarded_section): Renamed from elf_discarded_section.
	* bfd/section.c (SEC_INFO_TYPE_NONE, SEC_INFO_TYPE_STABS,
	SEC_INFO_TYPE_MERGE, SEC_INFO_TYPE_EH_FRAME,
	SEC_INFO_TYPE_JUST_SYMS): Renamed from corresponding ELF_INFO_TYPE.
	* bfd/elf-eh-frame.c, * bfd/elf-m10200.c, * bfd/elf-m10300.c,
	* bfd/elf.c, * bfd/elf32-arm.c, * bfd/elf32-avr.c, * bfd/elf32-bfin.c,
	* bfd/elf32-cr16.c, * bfd/elf32-cr16c.c, * bfd/elf32-cris.c,
	* bfd/elf32-crx.c, * bfd/elf32-d10v.c, * bfd/elf32-epiphany.c,
	* bfd/elf32-fr30.c, * bfd/elf32-frv.c, * bfd/elf32-h8300.c,
	* bfd/elf32-hppa.c, * bfd/elf32-i370.c, * bfd/elf32-i386.c,
	* bfd/elf32-i860.c, * bfd/elf32-ip2k.c, * bfd/elf32-iq2000.c,
	* bfd/elf32-lm32.c, * bfd/elf32-m32c.c, * bfd/elf32-m32r.c,
	* bfd/elf32-m68hc1x.c, * bfd/elf32-m68k.c, * bfd/elf32-mcore.c,
	* bfd/elf32-mep.c, * bfd/elf32-moxie.c, * bfd/elf32-msp430.c,
	* bfd/elf32-mt.c, * bfd/elf32-openrisc.c, * bfd/elf32-ppc.c,
	* bfd/elf32-rl78.c, * bfd/elf32-rx.c, * bfd/elf32-s390.c,
	* bfd/elf32-score.c, * bfd/elf32-score7.c, * bfd/elf32-sh.c,
	* bfd/elf32-spu.c, * bfd/elf32-tic6x.c, * bfd/elf32-tilepro.c,
	* bfd/elf32-v850.c, * bfd/elf32-vax.c, * bfd/elf32-xc16x.c,
	* bfd/elf32-xstormy16.c, * bfd/elf32-xtensa.c, * bfd/elf64-alpha.c,
	* bfd/elf64-hppa.c, * bfd/elf64-ia64-vms.c, * bfd/elf64-mmix.c,
	* bfd/elf64-ppc.c, * bfd/elf64-s390.c, * bfd/elf64-sh64.c,
	* bfd/elf64-x86-64.c, * bfd/elflink.c, * bfd/elfnn-ia64.c,
	* bfd/elfxx-mips.c, * bfd/elfxx-sparc.c, * bfd/elfxx-tilegx.c,
	* bfd/reloc.c: Update all references.
	* bfd/bfd-in2.h: Regenerate.
ld/
	* ld/ldlang.c (size_input_section): Use sec_info_type rather than
	usrdata->flags.just_syms.
	* ld/ldwrite.c (build_link_order): Likewise.
	* ld/emultempl/hppaelf.em (build_section_lists): Likewise.
	* ld/emultempl/ppc64elf.em (build_toc_list): Likewise.
	* ld/emultempl/armelf.em (build_section_lists): Likewise.
	(after_allocation): Update for renamed sec_info_type value.
	* ld/emultempl/tic6xdsbt.em: Likewise.
@
text
@d550 3
a552 3
.   these sections.  New code should use the section_ptr macros rather
.   than referring directly to the const sections.  The const sections
.   may eventually vanish.  *}
d558 2
a559 4
.{* The absolute section.  *}
.extern asection bfd_abs_section;
.#define bfd_abs_section_ptr ((asection *) &bfd_abs_section)
.#define bfd_is_abs_section(sec) ((sec) == bfd_abs_section_ptr)
d561 6
a566 2
.extern asection bfd_und_section;
.#define bfd_und_section_ptr ((asection *) &bfd_und_section)
d568 1
a568 6
.{* Pointer to the common section.  *}
.extern asection bfd_com_section;
.#define bfd_com_section_ptr ((asection *) &bfd_com_section)
.{* Pointer to the indirect section.  *}
.extern asection bfd_ind_section;
.#define bfd_ind_section_ptr ((asection *) &bfd_ind_section)
d683 2
a684 2
.  {* output_offset, output_section,              alignment_power,  *}	\
.     0,             (struct bfd_section *) &SEC, 0,			\
d716 1
a716 1
  { 0, NAME, 0, BSF_SECTION_SYM, (asection *) SECTION, { 0 }}
d719 1
a719 1
  { 0, NAME, 0, BSF_SECTION_SYM, (asection *) SECTION }
d727 4
a730 4
  GLOBAL_SYM_INIT (BFD_COM_SECTION_NAME, &bfd_com_section),
  GLOBAL_SYM_INIT (BFD_UND_SECTION_NAME, &bfd_und_section),
  GLOBAL_SYM_INIT (BFD_ABS_SECTION_NAME, &bfd_abs_section),
  GLOBAL_SYM_INIT (BFD_IND_SECTION_NAME, &bfd_ind_section)
d733 9
a741 8
#define STD_SECTION(SEC, FLAGS, NAME, IDX)				\
  asection SEC = BFD_FAKE_SECTION(SEC, FLAGS, &global_syms[IDX],	\
				  NAME, IDX)

STD_SECTION (bfd_com_section, SEC_IS_COMMON, BFD_COM_SECTION_NAME, 0);
STD_SECTION (bfd_und_section, 0, BFD_UND_SECTION_NAME, 1);
STD_SECTION (bfd_abs_section, 0, BFD_ABS_SECTION_NAME, 2);
STD_SECTION (bfd_ind_section, 0, BFD_IND_SECTION_NAME, 3);
@


1.111
log
@include/ChangeLog
2011-07-11  Catherine Moore  <clm@@codesourcery.com>

	* bfdlink.h (flag_type): New enumeration.
	(flag_info_list): New structure.
	(flag_info): New structure.

bfd/ChangeLog
2011-07-11  Catherine Moore  <clm@@codesourcery.com>

	* aout-adobe.c (aout_32_bfd_lookup_section_flags): New definition.
	* aout-target.h (MY_bfd_lookup_section_flags): New definition.
	* aout-tic30.c (MY_bfd_lookup_section_flags): New definition.
        * bfd-in2.h: Regenerated.
	* bfd.c (bfd_lookup_section_flags): New definition.
	* binary.c (binary_bfd_lookup_section_flags): New definition.
	* bout.c (b_out_bfd_lookup_section_flags): New definition.
	* coff-alpha.c (_bfd_ecoff_bfd_lookup_section_flags): New definition.
	* coff-mips.c (_bfd_ecoff_bfd_lookup_section_flags): New definition.
	* coff-rs6000.c (rs6000coff_vec): Include
	bfd_generic_lookup_section_flags.
	(pmac_xcoff_vec): Likewise.
	* coffcode.h (coff_bfd_lookup_section_flags): New definition.
	* coff64-rs6000.c (rs6000coff64_vec): Include
	bfd_generic_lookup_section_flags.
	(aix5coff64_vec): Likewise.
	* ecoff.c (bfd_debug_section): Initialize flag_info field.
	* elf-bfd.h (elf_backend_lookup_section_flags_hook): Declare.
	(bfd_elf_lookup_section_flags): Declare.
	* elflink.c (bfd_elf_lookup_section_flags): New function.
	* elfxx-target.h (bfd_elfNN_bfd_lookup_section_flags): Define.
	(elf_backend_lookup_section_flags_hook): Define.
	(elf_backend_data): Add elf_backend_lookup_section_flags_hook.
	* i386msdos.c (msdos_bfd_lookup_section_flags): New define.
	* i386os9k.c (os9k_bfd_lookup_section_flags): New define.
	* ieee.c (ieee_bfd_lookup_section_flags): New define.
	* ihex.c (ihex_bfd_lookup_section_flags): New define.
	* libbfd-in.h (_bfd_nolink_bfd_lookup_section_flags): Declare.
	(bfd_generic_lookup_section_flags): Declare.
	* libbfd.h: Regenerated.
	* mach-o-target.c (bfd_mach_o_bfd_lookup_section_flags): New.
	* mmo.c (mmo_bfd_lookup_section_flags): New definition.
	* nlm-target.h (nlm_bfd_lookup_section_flags): New definition.
	* oasys.c (oasys_bfd_lookup_section_flags): New definition.
	* pef.c (bfd_pef_bfd_lookup_section_flags): New definition.
	* plugin.c (bfd_plugin_bfd_lookup_section_flags): New definition.
	* ppcboot.c (ppcboot_bfd_lookup_section_flags): New definition.
	* reloc.c (bfd_generic_lookup_section_flags): New function.
	* som.c (som_bfd_lookup_section_flags): New definition.
	* srec.c (srec_bfd_lookup_section_flags): New definition.
	* targets.c (flag_info): Declare.
	(NAME##_bfd_lookup_section_flags): Add to LINK jump table.
	(_bfd_lookup_section_flags): New.
	* tekhex.c (tekhex_bfd_lookup_section_flags): New definition.
	* versados.c (versados_bfd_lookup_section_flags): New definition.
	* vms-alpha.c (alpha_vms_bfd_lookup_section_flag): New definition.
	* xsym.c (bfd_sym_bfd_lookup_section_flags): New definition.

ld/ChangeLog
2011-07-11  Catherine Moore  <clm@@codesourcery.com>

	* ld.h (section_flag_list): Add field to struct wildcard_spec.
	* ld.texinfo (INPUT_SECTION_FLAGS): Document.
	* ldgram.y (flag_info_list, flag_info): Add to union.
	(INPUT_SECTION_FLAGS): New token.
	(wildcard_spec): Initialize section_flag_list to NULL for
	each alternative.
	(sect_flag_list, sect_flags): New rules.
	(input_section_spec_no_keep): Add alternatives to recognize
	sect_flags.
	* ldlang.c (walk_wild_consider_section): Initialize
	section_flag_info field of the section struct.
	(lang_add_section): Check input section flags.
	(lang_add_wild): Initialize section_flag_list field of
	the statement struct.
	* ldlang.h (lang_input_statement_struct): Add section_flag_list field.
	(lang_wild_statement_struct): Likewise.
	* ldlex.l (INPUT_SECTION_FLAGS): New token.
	* mri.c (mri_draw_tree): Initialize section_flag_list to NULL.
	* NEWS: Announce INPUT_SECTION_FLAGS enhancement.

ld/testsuite/ChangeLog
2011-07-11 Catherine Moore  <clm@@cm00re.com>

	* ld-scripts/section-flags-1.s: New.
	* ld-scripts/section-flags-1.t: New.
	* ld-scripts/section-flags-2.s: New.
	* ld-scripts/section-flags-2.t: New.
	* ld-scripts/section-flags.exp: New.
@
text
@d3 2
a4 1
   2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011
d386 5
a390 5
.#define ELF_INFO_TYPE_NONE      0
.#define ELF_INFO_TYPE_STABS     1
.#define ELF_INFO_TYPE_MERGE     2
.#define ELF_INFO_TYPE_EH_FRAME  3
.#define ELF_INFO_TYPE_JUST_SYMS 4
@


1.111.2.1
log
@    PR ld/13991
    bfd/
    * bfd/elf-bfd.h (_bfd_elf_link_just_syms): Define as
    _bfd_generic_link_just_syms.
    * bfd/elflink.c (_bfd_elf_link_just_syms): Delete.
    * bfd/linker.c (_bfd_generic_link_just_syms): Set sec_info_type.

    * bfd/bfd-in.h (discarded_section): Renamed from elf_discarded_section.
    * bfd/section.c (SEC_INFO_TYPE_NONE, SEC_INFO_TYPE_STABS,
    SEC_INFO_TYPE_MERGE, SEC_INFO_TYPE_EH_FRAME,
    SEC_INFO_TYPE_JUST_SYMS): Renamed from corresponding ELF_INFO_TYPE.
    * bfd/elf-eh-frame.c, * bfd/elf-m10200.c, * bfd/elf-m10300.c,
    * bfd/elf.c, * bfd/elf32-arm.c, * bfd/elf32-avr.c, * bfd/elf32-bfin.c,
    * bfd/elf32-cr16.c, * bfd/elf32-cr16c.c, * bfd/elf32-cris.c,
    * bfd/elf32-crx.c, * bfd/elf32-d10v.c, * bfd/elf32-epiphany.c,
    * bfd/elf32-fr30.c, * bfd/elf32-frv.c, * bfd/elf32-h8300.c,
    * bfd/elf32-hppa.c, * bfd/elf32-i370.c, * bfd/elf32-i386.c,
    * bfd/elf32-i860.c, * bfd/elf32-ip2k.c, * bfd/elf32-iq2000.c,
    * bfd/elf32-lm32.c, * bfd/elf32-m32c.c, * bfd/elf32-m32r.c,
    * bfd/elf32-m68hc1x.c, * bfd/elf32-m68k.c, * bfd/elf32-mcore.c,
    * bfd/elf32-mep.c, * bfd/elf32-moxie.c, * bfd/elf32-msp430.c,
    * bfd/elf32-mt.c, * bfd/elf32-openrisc.c, * bfd/elf32-ppc.c,
    * bfd/elf32-rl78.c, * bfd/elf32-rx.c, * bfd/elf32-s390.c,
    * bfd/elf32-score.c, * bfd/elf32-score7.c, * bfd/elf32-sh.c,
    * bfd/elf32-spu.c, * bfd/elf32-tic6x.c, * bfd/elf32-tilepro.c,
    * bfd/elf32-v850.c, * bfd/elf32-vax.c, * bfd/elf32-xc16x.c,
    * bfd/elf32-xstormy16.c, * bfd/elf32-xtensa.c, * bfd/elf64-alpha.c,
    * bfd/elf64-hppa.c, * bfd/elf64-ia64-vms.c, * bfd/elf64-mmix.c,
    * bfd/elf64-ppc.c, * bfd/elf64-s390.c, * bfd/elf64-sh64.c,
    * bfd/elf64-x86-64.c, * bfd/elflink.c, * bfd/elfnn-ia64.c,
    * bfd/elfxx-mips.c, * bfd/elfxx-sparc.c, * bfd/elfxx-tilegx.c,
    * bfd/reloc.c: Update all references.
    * bfd/bfd-in2.h: Regenerate.
    ld/
    * ld/ldlang.c (size_input_section): Use sec_info_type rather than
    usrdata->flags.just_syms.
    * ld/ldwrite.c (build_link_order): Likewise.
    * ld/emultempl/hppaelf.em (build_section_lists): Likewise.
    * ld/emultempl/ppc64elf.em (build_toc_list): Likewise.
    * ld/emultempl/armelf.em (build_section_lists): Likewise.
    (after_allocation): Update for renamed sec_info_type value.
    * ld/emultempl/tic6xdsbt.em: Likewise.
@
text
@d385 5
a389 5
.#define SEC_INFO_TYPE_NONE      0
.#define SEC_INFO_TYPE_STABS     1
.#define SEC_INFO_TYPE_MERGE     2
.#define SEC_INFO_TYPE_EH_FRAME  3
.#define SEC_INFO_TYPE_JUST_SYMS 4
@


1.110
log
@Reverse copy .ctors/.dtors sections if needed.

bfd/

2011-05-07  H.J. Lu  <hongjiu.lu@@intel.com>

	PR ld/12730
	* elf.c (_bfd_elf_section_offset): Check SEC_ELF_REVERSE_COPY.

	* elflink.c (elf_link_input_bfd): Reverse copy .ctors/.dtors
	sections if needed.

	* section.c (SEC_ELF_REVERSE_COPY): New.
	* bfd-in2.h: Regenerated.

ld/testsuite/

2011-05-07  H.J. Lu  <hongjiu.lu@@intel.com>

	PR ld/12730
	* ld-elf/elf.exp (array_tests): Add "pr12730".
	(array_tests_pie): New.
	(array_tests_static): Add -static for "static init array mixed".
	Add "static pr12730".  Run array_tests_pie for Linux.

	* ld-elf/init-mixed.c (ctor1007): Renamed to ...
	(ctor1007a): This.
	(ctor1007b): New.
	(ctors1007): Remove ctor1007.  Add ctor1007b and ctor1007a.
	(dtor1007): Renamed to ...
	(dtor1007a): This.
	(dtor1007b): New.
	(dtors1007): Remove dtor1007.  Add dtor1007b and dtor1007a.
	(ctor65535): Renamed to ...
	(ctor65535a): This.
	(ctor65535b): New.
	(ctors65535): Remove ctor65535.  Add ctor65535b and ctor65535a.
	(dtor65535): Renamed to ...
	(dtor65535a): This.
	(dtor65535b): New.
	(dtors65535): Remove dtor65535.  Add dtor65535b and dtor65535a.

	* ld-elf/pr12730.cc: New.
	* ld-elf/pr12730.out: Likewise.
@
text
@d519 3
d700 3
@


1.109
log
@	* bfd-in.h (bfd_get_section_limit): Don't use rawsize with output
	sections.
	* libbfd.c (_bfd_generic_get_section_contents): Likewise.
	(_bfd_generic_get_section_contents_in_window): Likewise.
	* section.c (bfd_get_section_contents): Likewise.
	* compress.c (bfd_get_full_section_contents): Likewise.
	* elf32-rx.c (rx_final_link): Ignore rawsize.
	* elf32-microblaze.c (microblaze_elf_relocate_section): Use correct
	bfd with bfd_get_section_limit.
	* elfxx-ia64.c (elfNN_ia64_choose_gp): Add "final" parameter.  Use
	os->size during final link.  Update callers.
	* bfd-in2.h: Regenerate.
@
text
@d330 5
@


1.108
log
@bfd/
	* hash.c (bfd_hash_hash): Extract from..
	(bfd_hash_lookup): ..here.
	(bfd_hash_rename): New function.
	* section.c (bfd_rename_section): New function.
	* bfd-in.h (bfd_hash_rename): Declare.
	* bfd-in2.h: Regenerate.
	* elf.c (_bfd_elf_make_section_from_shdr): Rename input sections
	when compressing or decompressing.  Don't assert name match.
	* elf64-hppa.c (get_reloc_section): Don't assert name match.
	* elfxx-ia64.c (get_reloc_section): Likewise.
binutils/
	* objcopy.c (copy_main): No need to rename sections when compressing
	or decompressing.
binutils/testsuite/
	* binutils-all/objdump.W: Adjust expected result for debug section
	rename.
@
text
@d3 1
a3 1
   2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010
d1459 4
a1462 1
  sz = section->rawsize ? section->rawsize : section->size;
@


1.107
log
@Add compressed debug section support to binutils and ld.

bfd/

2010-10-29  H.J. Lu  <hongjiu.lu@@intel.com>
	    Cary Coutant  <ccoutant@@google.com>

	* archive.c (bfd_openr_next_archived_file): Copy BFD_COMPRESS
	and BFD_DECOMPRESS.

	* bfd.c (BFD_COMPRESS): New.
	(BFD_DECOMPRESS): Likewise.
	(BFD_FLAGS_SAVED): Likewise.
	(bfd_preserve_save): Replace BFD_IN_MEMORY with BFD_FLAGS_SAVED.

	* compress.c (bfd_uncompress_section_contents): Removed.
	(get_uncompressed_size): New.
	(decompress_contents): Likewise.
	(bfd_compress_section_contents): Likewise.
	(bfd_get_full_section_contents): Likewise.
	(bfd_is_section_compressed): Likewise.
	(bfd_init_section_decompress_status): Likewise.
	(bfd_init_section_compress_status): Likewise.

	* dwarf2.c (dwarf_debug_sections): New.
	(dwarf_debug_section_enum): Likewise.
	(read_section): Remove section_name and compressed_section_name.
	Add dwarf_debug_section_enum.  Try compressed debug section.
	(read_indirect_string): Updated.
	(read_abbrevs): Likewise.
	(decode_line_info): Likewise.
	(read_debug_ranges): Likewise.
	(find_line): Updated.

	* ecoff.c (bfd_debug_section): Add compress_status and
	compressed_size.

	* elf.c (_bfd_elf_make_section_from_shdr): Call
	bfd_is_section_compressed to check if a DWARF debug section is
	compressed.  Call bfd_init_section_compress_status or
	bfd_init_section_decompress_status if needed.

	* elflink.c (elf_link_input_bfd): Replace bfd_get_section_contents
	with bfd_get_full_section_contents.
	* merge.c (_bfd_add_merge_section): Likewise.
	* reloc.c (bfd_generic_get_relocated_section_contents): Likewise.
	* simple.c (bfd_simple_get_relocated_section_contents): Likewise.

	* elfxx-target.h (TARGET_BIG_SYM): Allow BFD_COMPRESS and
	BFD_DECOMPRESS.
	(TARGET_LITTLE_SYM): Likewise.

	* libbfd-in.h (dwarf_debug_section): New.
	(dwarf_debug_sections): Likewise.

	* libbfd.c (_bfd_generic_get_section_contents): Issue an error
	when getting contents on compressed/decompressed section.

	* section.c (COMPRESS_SECTION_NONE): New.
	(COMPRESS_SECTION_DONE): Likewise.
	(DECOMPRESS_SECTION_SIZED): Likewise.
	(BFD_FAKE_SECTION): Add compress_status and compressed_size.
	(bfd_malloc_and_get_section): Replace bfd_get_section_contents
	with bfd_get_full_section_contents.

	* bfd-in2.h: Regenerated.
	* libbfd.h: Likewise.

binutils/

2010-10-29  H.J. Lu  <hongjiu.lu@@intel.com>

	* addr2line.c (process_file): Set BFD_DECOMPRESS.

	* objcopy.c (do_debug_sections): New.
	(OPTION_COMPRESS_DEBUG_SECTIONS): New.
	(OPTION_DECOMPRESS_DEBUG_SECTIONS): Likewise.
	(copy_options): Add OPTION_COMPRESS_DEBUG_SECTIONS and
	OPTION_DECOMPRESS_DEBUG_SECTIONS.
	(copy_usage): Add --compress-debug-sections and
	--decompress-debug-sections.
	(copy_file): Set BFD_COMPRESS or BFD_DECOMPRESS.
	(copy_section): Replace bfd_get_section_contents with
	bfd_get_full_section_contents.
	(copy_main): Handle OPTION_COMPRESS_DEBUG_SECTIONS and
	OPTION_DECOMPRESS_DEBUG_SECTIONS.  Check do_debug_sections to
	rename DWARF debug sections.

	* objdump.c (load_specific_debug_section): Replace
	bfd_get_section_contents with bfd_get_full_section_contents.
	Remove bfd_uncompress_section_contents.
	(dump_section): Replace bfd_get_section_contents with
	bfd_get_full_section_contents.
	(display_file): Set BFD_DECOMPRESS if needed.

	* readelf.c (uncompress_section_contents): Set buffer to NULL
	to indiate decompression failure.
	(load_specific_debug_section): Always call
	uncompress_section_contents.

	* doc/binutils.texi: Document --compress-debug-sections and
	--decompress-debug-sections.

binutils/testsuite/

2010-10-29  H.J. Lu  <hongjiu.lu@@intel.com>

	* binutils-all/compress.exp: New.
	* binutils-all/dw2-1.S: Likewise.
	* binutils-all/dw2-2.S: Likewise.
	* binutils-all/libdw2-compressed.out: Likewise.
	* binutils-all/libdw2.out: Likewise.

gas/

2010-10-29  H.J. Lu  <hongjiu.lu@@intel.com>

	* write.c (compress_debug): Optimize section flags check.

gas/testsuite/

2010-10-29  H.J. Lu  <hongjiu.lu@@intel.com>

	* elf/dwarf2-1.s: Replace .zdebug_abbrev section with
	.debug_abbrev section.
	* elf/dwarf2-2.3: Likewise.

	* elf/dwarf2-1.d: Pass --compress-debug-sections to assembler.
	Updated.
	* elf/dwarf2-2.d: Likewise.

	* gas/i386/i386.exp: Remove xfail on dw2-compress-2 and
	x86-64-dw2-compress-2.

ld/

2010-10-29  H.J. Lu  <hongjiu.lu@@intel.com>

	* ldfile.c (ldfile_try_open_bfd): Set BFD_DECOMPRESS after
	bfd_openr returns.
	* emultempl/elf32.em (gld${EMULATION_NAME}_try_needed): Likewise.

	* scripttempl/elf.sc: Include compressed DWARF debug sections.

ld/testsuite/

2010-10-29  H.J. Lu  <hongjiu.lu@@intel.com>

	* ld-elf/compress.exp: New.
	* ld-elf/compress1.s: Likewise.
	* ld-elf/compress1a.d: Likewise.
	* ld-elf/compress1b.d: Likewise.
	* ld-elf/compress1c.d: Likewise.
@
text
@d1218 23
@


1.107.2.1
log
@backport from mainline
@
text
@a1217 23
	bfd_rename_section

SYNOPSIS
	void bfd_rename_section
	  (bfd *abfd, asection *sec, const char *newname);

DESCRIPTION
	Rename section @@var{sec} in @@var{abfd} to @@var{newname}.
*/

void
bfd_rename_section (bfd *abfd, sec_ptr sec, const char *newname)
{
  struct section_hash_entry *sh;

  sh = (struct section_hash_entry *)
    ((char *) sec - offsetof (struct section_hash_entry, section));
  sh->section.name = newname;
  bfd_hash_rename (&abfd->section_htab, newname, &sh->root);
}

/*
FUNCTION
@


1.106
log
@update copyright date
@
text
@d367 6
d429 3
d665 1
a665 1
.  {* linker_mark, linker_has_input, gc_mark, segment_mark,         *}	\
d668 2
a669 2
.  {* sec_info_type, use_rela_p,                                    *}	\
.     0,             0,							\
d674 2
a675 2
.  {* vma, lma, size, rawsize, relax, relax_count,                  *}	\
.     0,   0,   0,    0,       0,     0,				\
d1492 2
a1493 14
  bfd_size_type sz = sec->rawsize ? sec->rawsize : sec->size;
  bfd_byte *p = NULL;

  *buf = p;
  if (sz == 0)
    return TRUE;

  p = (bfd_byte *)
      bfd_malloc (sec->rawsize > sec->size ? sec->rawsize : sec->size);
  if (p == NULL)
    return FALSE;
  *buf = p;

  return bfd_get_section_contents (abfd, sec, p, 0, sz);
@


1.105
log
@	* section.c (struct bfd_section): Delete has_tls_reloc,
	has_tls_get_addr_call, has_gp_reloc, need_finalize_relax, reloc_done.
	Add sec_flg0 thru sec_flg5.
	(BFD_FAKE_SECTION): Update for changed flags.
	* ecoff.c (bfd_debug_section): Likewise.
	* elf32-ppc.c (has_tls_reloc, has_tls_get_addr_call): Define.
	* elf64-ppc.c (has_tls_reloc, has_tls_get_addr_call): Define.
	(has_toc_reloc, makes_toc_func_call, call_check_in_progress): Update.
	* elf32-xtensa.c (reloc_done): Define.
	* elfxx-ia64.c (skip_relax_pass_0, skip_relax_pass_1): Update.
	* bfd-in2.h: Regenerate.
@
text
@d3 1
a3 1
   2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009
@


1.104
log
@        Updated soruces in bfd/* to compile cleanly with -Wc++-compat.

        * bfd/aoutx.h: Add casts.
        * bfd/archive.c: Add casts.
        * bfd/archive64.c: Add casts.
        * bfd/archures.c: Add casts.
        * bfd/bfd-in2.h: Regenerated.
        * bfd/bfd.c: Add casts. (enum bfd_direction): Move out to top
        level.
        * bfd/bfdio.c: Add casts.
        * bfd/binary.c: Add casts.
        * bfd/cache.c (cache_bseek,cache_bread_1,cache_bwrite): Updated
        parameter to use enum value instead of int.
        * bfd/coffcode.h: Add casts.
        * bfd/coffgen.c: Add casts.
        * bfd/cofflink.c: Add casts.
        * bfd/compress.c: Add casts.
        * bfd/dwarf1.c: Add casts.
        * bfd/dwarf2.c: Add casts. (struct dwarf2_debug): Rename member
        bfd to bfd_ptr. Update code to use new name.
        * bfd/elf-attrs.c: Add casts.
        * bfd/elf-bfd.h (elf_link_virtual_table_entry): Gives name to
        anonymous struct. (union gotplt_union, struct
        elf_link_virtual_table_entry): Move to top level.
        * bfd/elf-eh-frame.c: Add casts.
        * bfd/elf-strtab.c: Add casts.
        * bfd/elf.c: Add casts. (_bfd_elm_make_Section_from_phdr): Change
        argument name from typename to type_name.
        * bfd/elf32-i386.c: Add casts.
        * bfd/elf64-x86-64.c: Add casts.
        * bfd/elfcode.h: Add casts.
        * bfd/elfcore.h: Add casts.
        * bfd/elflink.c: Add casts.
        * bfd/format.c: Add casts.
        * bfd/hash.c: Add casts.
        * bfd/ihex.c: Add casts.
        * bfd/libaout.h (enum aout_subformat, enum aout_magic): Move to
        top level.
        * bfd/libbfd.c: Add casts.
        * bfd/linker.c: Add casts.
        * bfd/merge.c: Add casts.
        * bfd/opncls.c: Add casts.
        * bfd/peXXigen.c: Add casts.
        * bfd/peicode.h: Add casts.
        * bfd/reloc.c: Add casts.
        * bfd/section.c: Add casts.
        * bfd/simple.c: Add casts.
        * bfd/srec.c: Add casts.
        * bfd/stabs.c: Add casts.
        * bfd/syms.c: Add casts.
        * bfd/targets.c: Add casts.
        * bfd/tekhex.c: Add casts.
        * bfd/verilog.c: Add casts.
        * include/bfdlink.h (struct bfd_link_hash_common_entry): Move to
        top level.
@
text
@d386 6
a391 14
.  {* Nonzero if this section has TLS related relocations.  *}
.  unsigned int has_tls_reloc:1;
.
.  {* Nonzero if this section has a call to __tls_get_addr.  *}
.  unsigned int has_tls_get_addr_call:1;
.
.  {* Nonzero if this section has a gp reloc.  *}
.  unsigned int has_gp_reloc:1;
.
.  {* Nonzero if this section needs the relax finalize pass.  *}
.  unsigned int need_finalize_relax:1;
.
.  {* Whether relocations have been processed.  *}
.  unsigned int reloc_done : 1;
d656 2
a657 2
.  {* linker_mark, linker_has_input, gc_mark,                       *}	\
.     0,           0,                1,         			\
d659 2
a660 2
.  {* segment_mark, sec_info_type, use_rela_p, has_tls_reloc,       *}	\
.     0,            0,             0,          0,			\
d662 2
a663 2
.  {* has_tls_get_addr_call, has_gp_reloc, need_finalize_relax,     *}	\
.     0,                     0,            0,				\
d665 2
a666 2
.  {* reloc_done, vma, lma, size, rawsize, relax, relax_count,      *}	\
.     0,          0,   0,   0,    0,       0,     0,			\
@


1.103
log
@        Add support for Xilinx MicroBlaze processor.

        * bfd/Makefile.am: Add cpu-microblaze.{lo,c}, elf32-microblaze.{lo,c}.
        * bfd/Makefile.in: Same.
        * bfd/archures.c: Add bfd_arch_microblaze.
        * bfd/bfd-in2.h: Regenerate.
        * bfd/config.bfd: Add microblaze target.
        * bfd/configure: Add bfd_elf32_microblaze_vec target.
        * bfd/configure.in: Same.
        * bfd/cpu-microblaze.c: New.
        * bfd/elf32-microblaze.c: New.
        * bfd/libbfd-in.h: Add prototype _bfd_dwarf2_fixup_section_debug_loc().
        * bfd/libbfd.h: Regenerate.
        * bfd/reloc.c: Add MICROBLAZE relocations.
        * bfd/section.c: Add struct relax_table and relax_count to section.
        * bfd/targets.c: Add bfd_elf32_microblaze_vec.
        * binutils/MAINTAINERS: Add self as maintainer.
        * binutils/readelf.c: Include elf/microblaze.h, add EM_MICROBLAZE &
        EM_MICROBLAZE_OLD to guess_is_rela(), dump_relocations(),
        get_machine_name().
        * config.sub: Add microblaze target.
        * configure: Same.
        * configure.ac: Same.
        * gas/Makefile.am: add microblaze to CPU_TYPES, config/tc-microblaze.c to
        TARGET_CPU_CFILES, config/tc-microblaze.h to TARGET_CPU_HFILES, add
        DEP_microblaze_elf target.
        * gas/Makefile.in: Same.
        * gas/config/tc-microblaze.c: Add MicroBlaze assembler.
        * gas/config/tc-microblaze.h: Add header for tc-microblaze.c.
        * gas/configure: Add microblaze target.
        * gas/configure.in: Same.
        * gas/configure.tgt: Same.
        * gas/doc/Makefile.am: Add c-microblaze.texi to CPU_DOCS.
        * gas/doc/Makefile.in: Same.
        * gas/doc/all.texi: Set MICROBLAZE.
        * gas/doc/as.texinfo: Add MicroBlaze doc links.
        * gas/doc/c-microblaze.texi: New MicroBlaze docs.
        * include/dis-asm.h: Decl print_insn_microblaze().
        * include/elf/common.h: Define EM_MICROBLAZE & EM_MICROBLAZE_OLD.
        * include/elf/microblaze.h: New reloc definitions.
        * ld/Makefile.am: Add eelf32mb_linux.o, eelf32microblaze.o to
        ALL_EMULATIONS, targets.
        * ld/Makefile.in: Same.
        * ld/configure.tgt: Add microblaze*-linux*, microblaze* targets.
        * ld/emulparams/elf32mb_linux.sh: New.
        * ld/emulparams/elf32microblaze.sh. New.
        * ld/scripttempl/elfmicroblaze.sc: New.
        * opcodes/Makefile.am: Add microblaze-opc.h to HFILES, microblaze-dis.c to
        CFILES, microblaze-dis.lo to ALL_MACHINES, targets.
        * opcodes/Makefile.in: Same.
        * opcodes/configure: Add bfd_microblaze_arch target.
        * opcodes/configure.in: Same.
        * opcodes/disassemble.c: Define ARCH_microblaze, return
        print_insn_microblaze().
        * opcodes/microblaze-dis.c: New MicroBlaze disassembler.
        * opcodes/microblaze-opc.h: New MicroBlaze opcode definitions.
        * opcodes/microblaze-opcm.h: New MicroBlaze opcode types.
@
text
@d940 1
a940 1
  sname = bfd_malloc (len + 8);
d1498 2
a1499 1
  p = bfd_malloc (sec->rawsize > sec->size ? sec->rawsize : sec->size);
@


1.103.2.1
log
@        Updated soruces in bfd/* to compile cleanly with -Wc++-compat.

        * bfd/aoutx.h: Add casts.
        * bfd/archive.c: Add casts.
        * bfd/archive64.c: Add casts.
        * bfd/archures.c: Add casts.
        * bfd/bfd-in2.h: Regenerated.
        * bfd/bfd.c: Add casts. (enum bfd_direction): Move out to top
        level.
        * bfd/bfdio.c: Add casts.
        * bfd/binary.c: Add casts.
        * bfd/cache.c (cache_bseek,cache_bread_1,cache_bwrite): Updated
        parameter to use enum value instead of int.
        * bfd/coffcode.h: Add casts.
        * bfd/coffgen.c: Add casts.
        * bfd/cofflink.c: Add casts.
        * bfd/compress.c: Add casts.
        * bfd/dwarf1.c: Add casts.
        * bfd/dwarf2.c: Add casts. (struct dwarf2_debug): Rename member
        bfd to bfd_ptr. Update code to use new name.
        * bfd/elf-attrs.c: Add casts.
        * bfd/elf-bfd.h (elf_link_virtual_table_entry): Gives name to
        anonymous struct. (union gotplt_union, struct
        elf_link_virtual_table_entry): Move to top level.
        * bfd/elf-eh-frame.c: Add casts.
        * bfd/elf-strtab.c: Add casts.
        * bfd/elf.c: Add casts. (_bfd_elm_make_Section_from_phdr): Change
        argument name from typename to type_name.
        * bfd/elf32-i386.c: Add casts.
        * bfd/elf64-x86-64.c: Add casts.
        * bfd/elfcode.h: Add casts.
        * bfd/elfcore.h: Add casts.
        * bfd/elflink.c: Add casts.
        * bfd/format.c: Add casts.
        * bfd/hash.c: Add casts.
        * bfd/ihex.c: Add casts.
        * bfd/libaout.h (enum aout_subformat, enum aout_magic): Move to
        top level.
        * bfd/libbfd.c: Add casts.
        * bfd/linker.c: Add casts.
        * bfd/merge.c: Add casts.
        * bfd/opncls.c: Add casts.
        * bfd/peXXigen.c: Add casts.
        * bfd/peicode.h: Add casts.
        * bfd/reloc.c: Add casts.
        * bfd/section.c: Add casts.
        * bfd/simple.c: Add casts.
        * bfd/srec.c: Add casts.
        * bfd/stabs.c: Add casts.
        * bfd/syms.c: Add casts.
        * bfd/targets.c: Add casts.
        * bfd/tekhex.c: Add casts.
        * bfd/verilog.c: Add casts.
        * include/bfdlink.h (struct bfd_link_hash_common_entry): Move to
        top level.
@
text
@d940 1
a940 1
  sname = (char *) bfd_malloc (len + 8);
d1498 1
a1498 2
  p = (bfd_byte *)
      bfd_malloc (sec->rawsize > sec->size ? sec->rawsize : sec->size);
@


1.102
log
@        * section.c (bfd_get_section_contents): Detect and handle the case
        where a section has the SEC_IN_MEMORY flag set but no actual
        contents allocated.
@
text
@d431 7
d527 11
d673 2
a674 2
.  {* reloc_done, vma, lma, size, rawsize                           *}	\
.     0,          0,   0,   0,    0,					\
@


1.101
log
@2009-03-19  Kai Tietz  <kai.tietz@@onevision.com>

        * bfd-in2.h: Regenerated.
        * coffcode.h (sec_to_styp_flags): For pe-coff add SEC_READONLY
        for debugging sections and map memory read/write dependent on
        SEC_COFF_NOREAD.
        (styp_to_sec_flags): Set SEC_COFF_NOREAD for sections
        without memory read flags set.
        * section.c: Add SEC_COFF_NOREAD to section flags.
@
text
@d1439 10
@


1.100
log
@include/elf/
	* ppc.h (R_PPC_TLSGD, R_PPC_TLSLD): Add new relocs.
	* ppc64.h (R_PPC64_TLSGD, R_PPC64_TLSLD): Add new relocs.
bfd/
	* reloc.c (BFD_RELOC_PPC_TLSGD, BFD_RELOC_PPC_TLSLD): New.
	* section.c (struct bfd_section): Add has_tls_get_addr_call.
	(BFD_FAKE_SECTION): Init new flag.
	* ecoff.c (bfd_debug_section): Likewise.
	* bfd-in2.h: Regenerate.
	* libbfd.h: Regenerate.
	* elf32-ppc.c (ppc_elf_howto_raw): Add R_PPC_TLSGD and R_PPC_TLSLD.
	(ppc_elf_reloc_type_lookup): Handle new relocs.
	(ppc_elf_check_relocs): Set has_tls_get_addr_call on finding such
	without marker relocs.
	(ppc_elf_tls_optimize): Allow out-of-order __tls_get_addr relocs
	if section has no old-style calls.
	(ppc_elf_relocate_section): Set tls_mask for non-tls relocs too.
	Don't try to optimize new-style __tls_get_addr call when handling
	arg setup relocs.  Instead do so for R_PPC_TLSGD and R_PPC_TLSLD
	relocs.
	* elf64-ppc.c (ppc64_elf_howto_raw): Add R_PPC64_TLSGD, R_PPC64_TLSLD.
	(ppc64_elf_reloc_type_lookup): Handle new relocs.
	(ppc64_elf_check_relocs): Set has_tls_get_addr_call on finding such
	without marker relocs.
	(ppc64_elf_tls_optimize): Allow out-of-order __tls_get_addr relocs
	if section has no old-style calls.  Set toc_ref for new relocs as
	appropriate.
	(ppc64_elf_relocate_section): Set tls_mask for non-tls relocs too.
	Don't try to optimize new-style __tls_get_addr call when handling
	arg setup relocs.  Instead do so for R_PPC_TLSGD and R_PPC_TLSLD
	relocs.
gas/
	* config/tc-ppc.c (ppc_elf_suffix): Error if ppc32 tls got relocs
	have non-zero addend.
	(md_assemble): Parse args of __tls_get_addr calls.
	(md_apply_fix): Handle BFD_RELOC_PPC_TLSGD and BFD_RELOC_PPC_TLSLD.
ld/testsuite/
	* ld-powerpc/tlsmark.s, * ld-powerpc/tlsmark.d: New test.
	* ld-powerpc/tlsmark32.s, * ld-powerpc/tlsmark32.d: New test.
	* ld-powerpc/powerpc.exp: Run them.
@
text
@d346 4
@


1.99
log
@	PR 5765
	* section.c (SEC_LINK_DUPLICATES): Correct.  Renumber following flags.
	* bfd-in2.h: Regenerate.
@
text
@d3 1
a3 1
   2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007
d385 3
d648 2
a649 2
.  {* has_gp_reloc, need_finalize_relax, reloc_done,                *}	\
.     0,            0,                   0,				\
d651 2
a652 2
.  {* vma, lma, size, rawsize                                       *}	\
.     0,   0,   0,    0,						\
@


1.98
log
@	* section.c (BFD_FAKE_SECTION): Update.
	* bfd-in2.h: Regenerate.
@
text
@d271 1
a271 1
.#define SEC_LINK_DUPLICATES 0x40000
d280 1
a280 1
.#define SEC_LINK_DUPLICATES_ONE_ONLY 0x80000
d284 1
a284 1
.#define SEC_LINK_DUPLICATES_SAME_SIZE 0x100000
d296 1
a296 1
.#define SEC_LINKER_CREATED 0x200000
d301 1
a301 1
.#define SEC_KEEP 0x400000
d305 1
a305 1
.#define SEC_SMALL_DATA 0x800000
d309 1
a309 1
.#define SEC_MERGE 0x1000000
d314 1
a314 1
.#define SEC_STRINGS 0x2000000
d317 1
a317 1
.#define SEC_GROUP 0x4000000
d328 1
a328 1
.#define SEC_COFF_SHARED_LIBRARY 0x10000000
d332 1
a332 1
.#define SEC_COFF_SHARED 0x20000000
d339 1
a339 1
.#define SEC_TIC54X_BLOCK 0x40000000
d344 1
a344 1
.#define SEC_TIC54X_CLINK 0x80000000
@


1.97
log
@bfd/
	* elf-bfd.h (eh_cie_fde): Add u.fde.next_for_section and
	u.cie.gc_mark.
	(bfd_elf_section_data): Add fde_list.
	(elf_fde_list): New macro.
	(elf_obj_tdata): Add eh_frame_section.
	(elf_eh_frame_section): New macro.
	(_bfd_elf_gc_mark_reloc): Remove last parameter.
	(_bfd_elf_gc_mark_fdes): Declare.
	* elf-eh-frame.c (_bfd_elf_get_eh_frame_sec_info): Chain the FDEs
	for each input section.
	(mark_entry, _bfd_elf_gc_mark_fdes): New functions.
	* elflink.c (_bfd_elf_gc_mark_reloc): Remove is_eh parameter.
	(_bfd_elf_gc_mark): Update call accordingly.  Mark the relocations
	againts the section's FDEs.  Don't mark the bfd's elf_eh_frame_section.
	(bfd_elf_gc_sections): Parse each input bfd's .eh_frame before
	marking any input sections.  Remove the current EH handling.
	* section.c (bfd_section): Remove gc_mark_from_eh.
	* ecoff.c (bfd_debug_section): Update initializer accordingly.
@
text
@d639 2
a640 2
.  {* linker_mark, linker_has_input, gc_mark, gc_mark_from_eh,      *}	\
.     0,           0,                1,       0,			\
@


1.96
log
@	* section.c (struct bfd_section): Clarify comment for rawsize field.
	* bfd-in2.h: Regenerate.
@
text
@d360 1
a360 1
.  {* Mark flags used by some linker backends for garbage collection.  *}
a361 1
.  unsigned int gc_mark_from_eh : 1;
@


1.95
log
@Switch sources over to use the GPL version 3
@
text
@d416 7
a422 7
.     octets.  This field is used by the linker relaxation code.  It is
.     currently only set for sections where the linker relaxation scheme
.     doesn't cache altered section and reloc contents (stabs, eh_frame,
.     SEC_MERGE, some coff relaxing targets), and thus the original size
.     needs to be kept to read the section multiple times.
.     For output sections, rawsize holds the section size calculated on
.     a previous linker relaxation pass.  *}
@


1.94
log
@
bfd/
	Many files: Include sysdep.h before bfd.h.
	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.
binutils/
	* bucumm.h: Split off host dependencies to..
	* sysdep.h: ..here.
	Many files: Include sysdep.h.  Remove duplicate headers and reorder.
	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.
ld/
	Many files: Include sysdep.h first.  Remove duplicate headers.
	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.
opcodes/
	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.
	* ns32k-dis.c: Include sysdep.h first.
@
text
@d7 1
a7 1
This file is part of BFD, the Binary File Descriptor library.
d9 14
a22 13
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA 02110-1301, USA.  */
@


1.93
log
@bfd/
	* section.c (SEC_KEEP): Update comment.
	* bfd-in2.h: Regenerate.
	* elflink.c (bfd_elf_gc_sections): Ignore SEC_EXCLUDE sections.
	* merge.c (_bfd_merge_sections): Set SEC_KEEP on excluded sections.
	* stabs.c (_bfd_discard_section_stabs): Likewise.
	(_bfd_link_section_stabs): Likewise.  Simplify abs_section check.
ld/
	* ldlang.c (lang_map): Don't say SEC_LINKER_CREATED and SEC_KEEP
	sections have been discarded.
	(lang_do_version_exports_section): Set SEC_KEEP on export section.
	* emultempl/elf32.em (before_allocation): Set SEC_KEEP on warning
	sections.
@
text
@d3 1
a3 1
   2000, 2001, 2002, 2003, 2004, 2005, 2006
d136 1
a137 1
#include "sysdep.h"
@


1.92
log
@bfd/
	* libbfd-in.h (_bfd_generic_new_section_hook): Declare.
	* section.c (bfd_abs_symbol, bfd_com_symbol): Delete.
	(bfd_und_symbol, bfd_ind_symbol): Delete.
	(BFD_FAKE_SECTION): Remove SYM_PTR param, set symbol_ptr_ptr to
	&SEC.symbol.
	(STD_SECTION): Adjust.
	(_bfd_generic_new_section_hook): New function, extracted from..
	(bfd_section_init): ..here.
	(bfd_make_section_old_way): Call new_section_hook for abs, com,
	und and ind sections.
	* elf.c (_bfd_elf_large_com_section): Adjust.
	* aoutx.h (new_section_hook): Call _bfd_generic_new_section_hook.
	* pdp11.c (new_section_hook): Likewise.
	* coffcode.h (coff_new_section_hook): Likewise.
	* ecoff.c (_bfd_ecoff_new_section_hook): Likewise.
	* elf.c (_bfd_elf_new_section_hook): Likewise.
	* vms.c (vms_new_section_hook): Likwise.
	* elf32-arm.c (elf32_arm_new_section_hook): Check used_by_bfd isn't
	already set.
	* elf32-sh64.c (sh64_elf_new_section_hook): Likewise.
	* elf32-xtensa.c (elf_xtensa_new_section_hook): Likewise.
	* elf64-mmix.c (mmix_elf_new_section_hook): Likewise.
	* elf64-ppc.c (ppc64_elf_new_section_hook): Likewise.
	* elfxx-mips.c (_bfd_mips_elf_new_section_hook): Likewise.
	* elfxx-sparc.c (_bfd_sparc_elf_new_section_hook): Likewise.
	* ieee.c (ieee_new_section_hook): Likewise.  Call
	_bfd_generic_new_section_hook too.
	* mmo.c (mmo_new_section_hook): Likewise.
	* oasys.c (oasys_new_section_hook): Likewise.
	* som.c (som_new_section_hook): Likewise.
	* coff-w65.c (reloc_processing): Don't use bfd_abs_symbol.
	* bfd-in2.h: Regenerate.
	* libbfd.h: Regenerate.
gas/
	* subsegs.c (subseg_get): Don't call obj_sec_set_private_data.
	* config/obj-elf.h (obj_sec_set_private_data): Delete.
	* config/tc-hppa.c (tc_gen_reloc): Don't use bfd_abs_symbol.
	* config/tc-mn10300.c (tc_gen_reloc): Likewise.
@
text
@d297 3
a299 1
.  {* This section should not be subject to garbage collection.  *}
@


1.91
log
@	PR 2434
bfd/
	* elflink.c (struct elf_smash_syms_data, elf_smash_syms): Delete.
	(elf_link_add_object_symbols): Delete unnecessary locals.  Rename
	hash_table -> htab.  Formatting.  Save entire symbol table
	before loading as-needed syms, and restore afterwards if lib not
	needed.  Use bfd_hash_allocate rather than bfd_alloc for sym
	name.  Free some buffers earlier.
	* bfd-in.h (struct bfd_hash_table): Add entsize.
	(bfd_hash_table_init, bfd_hash_table_init_n): Adjust prototype.
	* elf-bfd.h (_bfd_elf_link_hash_table_init): Likewise
	* hash.c (bfd_hash_table_init_n): Add entsize param, save to
	hash table.
	(bfd_hash_table_init): Add param, adjust calls.
	* aoutx.h: Adjust all hash_table_init functions and calls.
	* bfd.c: Likewise.
	* coff-arm.c: Likewise.
	* coff-h8300.c: Likewise.
	* coff-ppc.c: Likewise.
	* cofflink.c: Likewise.
	* ecoff.c: Likewise.
	* ecofflink.c: Likewise.
	* elf-m10300.c: Likewise.
	* elf-strtab.c: Likewise.
	* elf.c: Likewise.
	* elf32-arm.c: Likewise.
	* elf32-bfin.c: Likewise.
	* elf32-cris.c: Likewise.
	* elf32-frv.c: Likewise.
	* elf32-hppa.c: Likewise.
	* elf32-i386.c: Likewise.
	* elf32-m32r.c: Likewise.
	* elf32-m68hc1x.c: Likewise.
	* elf32-m68k.c: Likewise.
	* elf32-ppc.c: Likewise.
	* elf32-s390.c: Likewise.
	* elf32-sh.c: Likewise.
	* elf32-vax.c: Likewise.
	* elf64-alpha.c: Likewise.
	* elf64-hppa.c: Likewise.
	* elf64-ppc.c: Likewise.
	* elf64-s390.c: Likewise.
	* elf64-sh64.c: Likewise.
	* elf64-x86-64.c: Likewise.
	* elfxx-ia64.c: Likewise.
	* elfxx-mips.c: Likewise.
	* elfxx-sparc.c: Likewise.
	* i386linux.c: Likewise.
	* libaout.h: Likewise.
	* libbfd-in.h: Likewise.
	* libcoff-in.h: Likewise.
	* linker.c: Likewise.
	* m68klinux.c: Likewise.
	* merge.c: Likewise.
	* opncls.c: Likewise.
	* pdp11.c: Likewise.
	* sparclinux.c: Likewise.
	* stabs.c: Likewise.
	* sunos.c: Likewise.
	* vms.c: Likewise.
	* xcofflink.c: Likewise.
	* section.c (struct section_hash_entry): Move to..
	* libbfd-in.h: ..here.
	* Makefile.am: Run "make dep-am"
	* Makefile.in: Regenerate.
	* bfd-in2.h: Regenerate.
	* libbfd.h: Regenerate.
	* libcoff.h: Regenerate.
binutils/
	* ieee.c (write_ieee_debugging_info): Adjust bfd_hash_table_init calls.
	* wrstabs.c (write_stabs_in_sections_debugging_info): Likewise.
ld/
	* ldcref.c (add_cref): Adjust bfd_hash_table_init calls.
	* ldlang.c (output_statement_table_init, lang_init): Likewise.
	* ldmain.c (add_ysym, add_wrap, add_keepsyms_file): Likewise.
	(undefined_symbol): Likewise.
@
text
@a542 5
.extern const struct bfd_symbol * const bfd_abs_symbol;
.extern const struct bfd_symbol * const bfd_com_symbol;
.extern const struct bfd_symbol * const bfd_und_symbol;
.extern const struct bfd_symbol * const bfd_ind_symbol;
.
d633 1
a633 1
.#define BFD_FAKE_SECTION(SEC, FLAGS, SYM, SYM_PTR, NAME, IDX)		\
d664 2
a665 5
.  {* symbol,                                                       *}	\
.     (struct bfd_symbol *) SYM,					\
.									\
.  {* symbol_ptr_ptr,                                               *}	\
.     (struct bfd_symbol **) SYM_PTR,					\
d696 2
a697 3
#define STD_SECTION(SEC, FLAGS, SYM, NAME, IDX)				\
  const asymbol * const SYM = (asymbol *) &global_syms[IDX]; 		\
  asection SEC = BFD_FAKE_SECTION(SEC, FLAGS, &global_syms[IDX], &SYM,	\
d700 4
a703 5
STD_SECTION (bfd_com_section, SEC_IS_COMMON, bfd_com_symbol,
	     BFD_COM_SECTION_NAME, 0);
STD_SECTION (bfd_und_section, 0, bfd_und_symbol, BFD_UND_SECTION_NAME, 1);
STD_SECTION (bfd_abs_section, 0, bfd_abs_symbol, BFD_ABS_SECTION_NAME, 2);
STD_SECTION (bfd_ind_section, 0, bfd_ind_symbol, BFD_IND_SECTION_NAME, 3);
d736 3
a738 1
/* Initializes a new section.  NEWSECT->NAME is already set.  */
d740 2
a741 2
static asection *
bfd_section_init (bfd *abfd, asection *newsect)
a742 9
  static int section_id = 0x10;  /* id 0 to 3 used by STD_SECTION.  */

  newsect->id = section_id;
  newsect->index = abfd->section_count;
  newsect->owner = abfd;

  /* Create a symbol whose only job is to point to this section.  This
     is useful for things like relocs which are relative to the base
     of a section.  */
d745 1
a745 1
    return NULL;
d753 13
a962 1
  struct section_hash_entry *sh;
d972 10
a981 1
    return bfd_abs_section_ptr;
d983 3
a985 2
  if (strcmp (name, BFD_COM_SECTION_NAME) == 0)
    return bfd_com_section_ptr;
d987 10
a996 2
  if (strcmp (name, BFD_UND_SECTION_NAME) == 0)
    return bfd_und_section_ptr;
d998 4
a1001 5
  if (strcmp (name, BFD_IND_SECTION_NAME) == 0)
    return bfd_ind_section_ptr;

  sh = section_hash_lookup (&abfd->section_htab, name, TRUE, FALSE);
  if (sh == NULL)
d1003 1
a1003 10

  newsect = &sh->section;
  if (newsect->name != NULL)
    {
      /* Section already exists.  */
      return newsect;
    }

  newsect->name = name;
  return bfd_section_init (abfd, newsect);
@


1.90
log
@2005-07-25  H.J. Lu  <hongjiu.lu@@intel.com>

	* elf-bfd.h (elf_backend_data): Add common_definition,
	common_section_index, common_section, and merge_symbol.
	(_bfd_elf_common_definition): New.
	(_bfd_elf_common_section_index): New.
	(_bfd_elf_common_section): New.

	* elf.c (elf_fake_sections): Don't clear sh_flags.

	* elflink.c (_bfd_elf_merge_symbol): Call backend merge_symbol
	if it is available.
	(is_global_data_symbol_definition): Call backend
	common_definition instead of checking SHN_COMMON.
	(elf_link_add_object_symbols): Likewise.
	(elf_link_output_extsym): Call backend common_section_index
	for common section index.
	(_bfd_elf_common_definition): New.
	(_bfd_elf_common_section_index): New.
	(_bfd_elf_common_section): New.

	* elfxx-target.h (elf_backend_common_definition): New.
	(elf_backend_common_section_index): New.
	(elf_backend_common_section): New.
	(elf_backend_merge_symbol): New.
	(elfNN_bed): Initialize common_definition, common_section_index,
	common_section, and merge_symbol.

	* section.c (BFD_FAKE_SECTION): New.
	(STD_SECTION): Use it.
	* bfd-in2.h: Regenerated.
@
text
@d3 1
a3 1
   2000, 2001, 2002, 2003, 2004, 2005
a715 6
struct section_hash_entry
{
  struct bfd_hash_entry root;
  asection section;
};

@


1.89
log
@	* elflink.c (_bfd_elf_gc_mark): Mark sections referenced by
	.eh_frame specially..
	(bfd_elf_gc_sections): ..rather than totally ignoring .eh_frame.
	Don't recheck sections we have already marked.
	(elf_gc_sweep): Keep non-code sections referenced from .eh_frame.
	* section.c (struct bfd_section): Add gc_mark_from_eh.
	(STD_SECTION): Adjust.
	* ecoff.c (bfd_debug_section): Adjust.
	* bfd-in2.h: Regenerate.
@
text
@d638 41
d706 2
a707 40
  asection SEC =							\
    /* name, id,  index, next, prev, flags, user_set_vma,            */	\
    { NAME,  IDX, 0,     NULL, NULL, FLAGS, 0,				\
									\
    /* linker_mark, linker_has_input, gc_mark, gc_mark_from_eh,      */	\
       0,           0,                1,       0,			\
									\
    /* segment_mark, sec_info_type, use_rela_p, has_tls_reloc,       */	\
       0,            0,             0,          0,			\
									\
    /* has_gp_reloc, need_finalize_relax, reloc_done,                */	\
       0,            0,                   0,				\
									\
    /* vma, lma, size, rawsize                                       */	\
       0,   0,   0,    0,						\
									\
    /* output_offset, output_section,              alignment_power,  */	\
       0,             (struct bfd_section *) &SEC, 0,			\
									\
    /* relocation, orelocation, reloc_count, filepos, rel_filepos,   */	\
       NULL,       NULL,        0,           0,       0,		\
									\
    /* line_filepos, userdata, contents, lineno, lineno_count,       */	\
       0,            NULL,     NULL,     NULL,   0,			\
									\
    /* entsize, kept_section, moving_line_filepos,                   */	\
       0,       NULL,         0,					\
									\
    /* target_index, used_by_bfd, constructor_chain, owner,          */	\
       0,            NULL,        NULL,              NULL,		\
									\
    /* symbol,                                                       */	\
       (struct bfd_symbol *) &global_syms[IDX],				\
									\
    /* symbol_ptr_ptr,                                               */	\
       (struct bfd_symbol **) &SYM,					\
									\
    /* map_head, map_tail                                            */	\
       { NULL }, { NULL }						\
    }
@


1.88
log
@	* elf.c (_bfd_elf_write_object_contents): Check for non-NULL
	elf_shstrtab.
	* format.c (bfd_check_format_matches): Set output_has_begun
	for both_direction.
	* section.c (bfd_set_section_contents): Use bfd_write_p.  Remove
	special case for both_direction.
@
text
@d357 1
a357 1
.  {* A mark flag used by some linker backends for garbage collection.  *}
d359 1
d665 1
a665 1
  asection SEC = 							\
d669 1
a669 1
    /* linker_mark, linker_has_input, gc_mark, segment_mark,         */	\
d672 2
a673 2
    /* sec_info_type, use_rela_p, has_tls_reloc, has_gp_reloc,       */ \
       0,	      0,	  0,		 0,			\
d675 2
a676 2
    /* need_finalize_relax, reloc_done,                              */ \
       0,		    0,						\
d690 2
a691 2
    /* entsize, kept_section, moving_line_filepos,	           */	\
       0,       NULL,	      0,					\
@


1.87
log
@2005-05-05  H.J. Lu  <hongjiu.lu@@intel.com>

	* section.c (bfd_make_section_anyway_with_flags): New.
	(bfd_make_section_anyway): Call bfd_make_section_anyway_with_flags,
	(bfd_make_section_with_flags): New.
	(bfd_make_section): Call bfd_make_section_with_flags.

	* elf-m10300.c (_bfd_mn10300_elf_create_got_section): Call
	bfd_make_section_with_flags/bfd_make_section_anyway_with_flags
	instead of bfd_make_section/bfd_make_section and don't call
	bfd_set_section_flags.
	(mn10300_elf_check_relocs): Likewise.
	(_bfd_mn10300_elf_create_dynamic_sections): Likewise.
	* elf32-arm.c (create_got_section): Likewise.
	(bfd_elf32_arm_add_glue_sections_to_bfd): Likewise.
	(elf32_arm_check_relocs): Likewise.
	* elf32-cris.c (cris_elf_check_relocs): Likewise.
	* elf32-frv.c (elf32_frv_add_symbol_hook): Likewise.
	(_frv_create_got_section): Likewise.
	(elf32_frvfdpic_create_dynamic_sections): Likewise.
	* elf32-hppa.c (elf32_hppa_create_dynamic_sections): Likewise.
	(elf32_hppa_check_relocs): Likewise.
	* elf32-i370.c (i370_elf_create_dynamic_sections): Likewise.
	(i370_elf_check_relocs): Likewise.
	* elf32-i386.c (create_got_section): Likewise.
	(elf_i386_check_relocs): Likewise.
	* elf32-m32r.c (m32r_elf_add_symbol_hook): Likewise.
	(create_got_section): Likewise.
	(m32r_elf_create_dynamic_sections): Likewise.
	(m32r_elf_check_relocs): Likewise.
	* elf32-m68k.c (elf_m68k_check_relocs): Likewise.
	* elf32-ppc.c (ppc_elf_create_got): Likewise.
	(ppc_elf_create_dynamic_sections): Likewise.
	(ppc_elf_add_symbol_hook): Likewise.
	(ppc_elf_check_relocs): Likewise.
	* elf32-s390.c (create_got_section): Likewise.
	(elf_s390_check_relocs): Likewise.
	* elf32-sh.c (create_got_section): Likewise.
	(sh_elf_create_dynamic_sections): Likewise.
	(sh_elf_check_relocs): Likewise.
	* elf32-vax.c (elf_vax_check_relocs): Likewise.
	* elf32-xstormy16.c (xstormy16_elf_check_relocs): Likewise.
	* elf32-xtensa.c (elf_xtensa_create_dynamic_sections): Likewise.
	(add_extra_plt_sections): Likewise.
	* elf64-alpha.c (elf64_alpha_add_symbol_hook): Likewise.
	(elf64_alpha_create_got_section): Likewise.
	(elf64_alpha_create_dynamic_sections): Likewise.
	(elf64_alpha_check_relocs): Likewise.
	* elf64-hppa.c (get_reloc_section): Likewise.
	(get_opd): Likewise.
	(get_plt): Likewise.
	(get_dlt): Likewise.
	(get_stub): Likewise.
	(elf64_hppa_create_dynamic_sectionso): Likewise.
	* elf64-mmix.c (mmix_elf_check_common_relocs): Likewise.
	* elf64-ppc.c (create_linkage_sections): Likewise.
	(ppc64_elf_check_relocs): Likewise.
	* elf64-s390.c (create_got_section): Likewise.
	(elf_s390_check_relocs): Likewise.
	* elf64-sh64.c (sh_elf64_check_relocs): Likewise.
	(sh64_elf64_create_dynamic_sections): Likewise.
	* elf64-x86-64.c (create_got_section): Likewise.
	(elf64_x86_64_check_relocs): Likewise.
	* elflink.c (_bfd_elf_create_got_section): Likewise.
	(_bfd_elf_link_create_dynamic_sections): Likewise.
	(elf_link_add_object_symbols): Likewise.
	* elfxx-ia64.c (elfNN_ia64_add_symbol_hook): Likewise.
	(elfNN_ia64_create_dynamic_sections): Likewise.
	(get_fptr): Likewise.
	(get_pltoff): Likewise.
	(get_reloc_section): Likewise.
	(elfNN_ia64_object_p): Likewise.
	* elfxx-mips.c (mips_elf_rel_dyn_section): Likewise.
	(mips_elf_create_compact_rel_section): Likewise.
	(mips_elf_create_got_section): Likewise.
	(_bfd_mips_elf_create_dynamic_sections): Likewise.
	* elfxx-sparc.c (create_got_section): Likewise.
	(_bfd_sparc_elf_check_relocs): Likewise.

	* elf.c (_bfd_elf_new_section_hook): Call _bfd_elf_get_sec_type_attr
	on linker created sections.
@
text
@d1349 1
a1349 1
  switch (abfd->direction)
a1350 2
    case read_direction:
    case no_direction:
a1352 10

    case write_direction:
      break;

    case both_direction:
      /* File is opened for update. `output_has_begun' some time ago when
	   the file was created.  Do not recompute sections sizes or alignments
	   in _bfd_set_section_content.  */
      abfd->output_has_begun = TRUE;
      break;
@


1.86
log
@Update the address and phone number of the FSF organization in the GPL notices
@
text
@d1007 1
a1007 1
	bfd_make_section_anyway
d1010 2
a1011 1
	asection *bfd_make_section_anyway (bfd *abfd, const char *name);
d1016 2
a1017 1
   is already a section with that name.
d1025 2
a1026 1
bfd_make_section_anyway (bfd *abfd, const char *name)
d1059 1
d1066 24
a1089 1
	bfd_make_section
d1092 2
a1093 1
	asection *bfd_make_section (bfd *, const char *name);
d1098 2
a1099 1
   section named @@var{name}.  If there is an error, return <<NULL>> and set
d1104 2
a1105 1
bfd_make_section (bfd *abfd, const char *name)
d1134 1
d1140 20
@


1.85
log
@bfd/
	* section.c (struct bfd_section): Replace link_order_head and
	link_order_tail with map_head and map_tail union.
	(STD_SECTION): Update.
	(_bfd_strip_section_from_output): Delete.
	* aoutx.h: Update throughout for above changes.
	* coff-ppc.c: Likewise.
	* cofflink.c: Likewise.
	* ecoff.c: Likewise.
	* elf-eh-frame.c: Likewise.
	* elf-m10300.c: Likewise.
	* elf.c: Likewise.
	* elf32-arm.c: Likewise.
	* elf32-cris.c: Likewise.
	* elf32-hppa.c: Likewise.
	* elf32-i386.c: Likewise.
	* elf32-m32r.c: Likewise.
	* elf32-m68hc1x.c: Likewise.
	* elf32-m68k.c: Likewise.
	* elf32-ppc.c: Likewise.
	* elf32-s390.c: Likewise.
	* elf32-sh.c: Likewise.
	* elf32-vax.c: Likewise.
	* elf32-xtensa.c: Likewise.
	* elf64-alpha.c: Likewise.
	* elf64-hppa.c: Likewise.
	* elf64-ppc.c: Likewise.
	* elf64-s390.c: Likewise.
	* elf64-sh64.c: Likewise.
	* elf64-x86-64.c: Likewise.
	* elflink.c: Likewise.
	* elfxx-ia64.c: Likewise.
	* elfxx-mips.c: Likewise.
	* elfxx-sparc.c: Likewise.
	* linker.c: Likewise.
	* merge.c: Likewise.
	* pdp11.c: Likewise.
	* xcofflink.c: Likewise.
	* elflink.c (bfd_boolean bfd_elf_size_dynsym_hash_dynstr): Split
	out from bfd_elf_size_dynamic_sections.
	* bfd-in.h (bfd_boolean bfd_elf_size_dynsym_hash_dynstr): Declare.
	* bfd-in2.h: Regenerate.
ld/
	* ldemul.c: Include bfdlink.h.
	(ldemul_before_allocation): Assume before_allocation is non-zero.
	(before_allocation_default): Call strip_excluded_output_sections.
	* ldlang.c (stripped_excluded_sections): New variable.
	(lang_add_section): Build input section list for each output
	section, attached via map_head and map_tail pointers.
	(strip_excluded_output_sections): Make global.  Traverse the
	input section lists to find which output sections can go.  Clear
	link_order pointers and set stripped_excluded_sections.
	(lang_process): Call strip_excluded_output_sections.
	* ldlang.h (strip_excluded_output_sections): Declare.
	* ldwrite.c: Update throuhout for link_order_head -> map_head change.
	* emultempl/aix.em (before_allocation): Call
	strip_excluded_output_sections.
	* emultempl/armcoff.em (before_allocation): Likewise.
	* emultempl/beos.em (before_allocation): Likewise.
	* emultempl/linux.em (before_allocation): Likewise.
	* emultempl/pe.em (before_allocation): Likewise.
	* emultempl/sunos.em (before_allocation): Likewise.
	* emultempl/elf32.em (before_allocation): Likewise.  Call
	bfd_elf_size_dynsym_hash_dynstr too.
	* emultempl/lnk960.em (lnk960_before_allocation): Delete.
	(ld_lnk960): Use before_allocation_default.
@
text
@d21 1
a21 1
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02110-1301, USA.  */
@


1.84
log
@Update the FSF address in the copyright/GPL notice
@
text
@d500 8
a507 2
.  struct bfd_link_order *link_order_head;
.  struct bfd_link_order *link_order_tail;
d701 2
a702 2
    /* link_order_head, link_order_tail                              */	\
       NULL,            NULL						\
a1451 44
	_bfd_strip_section_from_output

SYNOPSIS
	void _bfd_strip_section_from_output
	  (struct bfd_link_info *info, asection *section);

DESCRIPTION
	Remove @@var{section} from the output.  If the output section
	becomes empty, remove it from the output bfd.

	This function won't actually do anything except twiddle flags
	if called too late in the linking process, when it's not safe
	to remove sections.
*/
void
_bfd_strip_section_from_output (struct bfd_link_info *info, asection *s)
{
  asection *os;
  asection *is;
  bfd *abfd;

  s->flags |= SEC_EXCLUDE;

  /* If the section wasn't assigned to an output section, or the
     section has been discarded by the linker script, there's nothing
     more to do.  */
  os = s->output_section;
  if (os == NULL || os->owner == NULL)
    return;

  /* If the output section has other (non-excluded) input sections, we
     can't remove it.  */
  for (abfd = info->input_bfds; abfd != NULL; abfd = abfd->link_next)
    for (is = abfd->sections; is != NULL; is = is->next)
      if (is->output_section == os && (is->flags & SEC_EXCLUDE) == 0)
	return;

  /* If the output section is empty, flag it for removal too.
     See ldlang.c:strip_excluded_output_sections for the action.  */
  os->flags |= SEC_EXCLUDE;
}

/*
FUNCTION
@


1.83
log
@	* section.c (bfd_section_list_remove): Don't clear s->next.
	(bfd_section_list_append): Always init s->prev.
	(bfd_section_list_prepend): Define.
	(bfd_section_list_insert_after): Minor optimization.
	(bfd_section_removed_from_list): Rewrite.
	* elf.c (assign_section_numbers): Simplify list traversal now that
	bfd_section_list_remove doesn't destroy removed section next ptr.
	* sunos.c (sunos_add_dynamic_symbols): Likewise.
	* elfxx-ia64.c (elfNN_ia64_object_p): Use bfd_section_list_prepend.
	* xcofflink.c (_bfd_xcoff_bfd_final_link): Simplify list traversal.
	* bfd-in2.h: Regenerate.
@
text
@d21 1
a21 1
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
@


1.82
log
@bfd/

2005-05-02  H.J. Lu  <hongjiu.lu@@intel.com>

	* bfd.c (bfd): Remove section_tail and add section_last.
	(bfd_preserve): Likewise.
	(bfd_preserve_save): Likewise.
	(bfd_preserve_restore): Likewise.
	* opncls.c (_bfd_new_bfd): Likewise.

	* coffcode.h (coff_compute_section_file_positions): Updated.
	(coff_compute_section_file_positions): Likewise.
	* elf.c (assign_section_numbers): Likewise.
	* elf32-i370.c (i370_elf_size_dynamic_sections): Likewise.
	* elf64-mmix.c (mmix_elf_final_link): Likewise.
	* elfxx-ia64.c (elfNN_ia64_object_p): Likewise.
	* elfxx-mips.c (_bfd_mips_elf_link_hash_table_create): Likewise.
	* sunos.c (sunos_add_dynamic_symbols): Likewise.
	* xcofflink.c (_bfd_xcoff_bfd_final_link): Likewise.

	* ecoff.c (bfd_debug_section): Initialize prev.

	* section.c (bfd_section): Add prev.
	(bfd_section_list_remove): Updated.
	(bfd_section_list_append): New.
	(bfd_section_list_insert_after): New.
	(bfd_section_list_insert_before): New.
	(bfd_section_list_insert): Removed.
	(bfd_section_removed_from_list): Updated.
	(STD_SECTION): Initialize prev.
	(bfd_section_init): Updated.
	(bfd_section_list_clear): Updated.

	* bfd-in2.h: Regenerated.

gas/

2005-05-02  H.J. Lu  <hongjiu.lu@@intel.com>

	* write.c (write_object_file): Use bfd_section_double_list_remove
	to remove sections.

ld/

2005-05-02  H.J. Lu  <hongjiu.lu@@intel.com>

	* emultempl/elf32.em (gld${EMULATION_NAME}_strip_empty_section):
	Updated for bfd_section_list_remove change.
	* ldlang.c (lang_insert_orphan): Likewise.
	(strip_excluded_output_sections): Likewise.
	(sort_sections_by_lma): New.
	(lang_check_section_addresses): Sort the sections before
	checking addresses.
@
text
@d555 1
a555 4
.        {						\
.          _next->prev = _prev;				\
.          _s->next = NULL;				\
.        }						\
d572 4
a575 1
.        _abfd->sections = _s;				\
d579 19
d608 1
a608 1
.        _s->next->prev = _s;				\
d629 1
a629 1
.  ((S)->next == NULL && (S) != (ABFD)->section_last)
@


1.81
log
@2005-04-11  H.J. Lu  <hongjiu.lu@@intel.com>

	* linker.c (_bfd_generic_link_output_symbols): Also check if
	the output section of an input section has been removed from
	the output file.

	* section.c (bfd_section_list_remove): Clear the next field
	of the removed section.
	(bfd_section_removed_from_list): New.
	* bfd-in2.h: Regenerated.
@
text
@d167 3
d544 20
a563 1
.#define bfd_section_list_remove(ABFD, PS) \
d566 24
a589 5
.      asection **_ps = PS;				\
.      asection *_s = *_ps;				\
.      *_ps = _s->next;					\
.      if (_s->next == NULL)				\
.        (ABFD)->section_tail = _ps;			\
d591 1
a591 1
.        _s->next = NULL;				\
d594 1
a594 1
.#define bfd_section_list_insert(ABFD, PS, S) \
d597 1
a597 1
.      asection **_ps = PS;				\
d599 8
a606 4
.      _s->next = *_ps;					\
.      *_ps = _s;					\
.      if (_s->next == NULL)				\
.        (ABFD)->section_tail = &_s->next;		\
d609 2
a610 2
.#define bfd_section_removed_from_list(ABFD, S)	\
.  ((S)->next == NULL && &(S)->next != (ABFD)->section_tail)
d640 2
a641 2
    /* name, id,  index, next, flags, user_set_vma,                  */	\
    { NAME,  IDX, 0,     NULL, FLAGS, 0,				\
d753 1
a753 2
  *abfd->section_tail = newsect;
  abfd->section_tail = &newsect->next;
d783 1
a783 1
  abfd->section_tail = &abfd->sections;
@


1.80
log
@update copyright dates
@
text
@d549 2
d564 2
@


1.79
log
@bfd/

2005-02-21  H.J. Lu  <hongjiu.lu@@intel.com>

	* coffcode.h (sec_to_styp_flags): Replaced SEC_CLINK with
	SEC_TIC54X_CLINK. Replace SEC_BLOCK with SEC_TIC54X_BLOCK.
	Replace SEC_SHARED with SEC_COFF_SHARED.
	(styp_to_sec_flags): Likewise.

	* elfxx-target.h (TARGET_BIG_SYM): Remove SEC_ARCH_BIT_0.
	(TARGET_LITTLE_SYM): Likewise.

	* section.c (SEC_ARCH_BIT_0): Removed.
	(SEC_LINK_DUPLICATES_SAME_CONTENTS): Defined with
	SEC_LINK_DUPLICATES_ONE_ONLY and SEC_LINK_DUPLICATES_SAME_SIZE.
	(SEC_SHARED): Renamed to ...
	(SEC_COFF_SHARED): This.
	(SEC_BLOCK): Renamed to ...
	(SEC_TIC54X_BLOCK): This.
	(SEC_CLINK): Renamed to ...
	(SEC_TIC54X_CLINK): This.
	(SEC_XXX): Rearranged. Move SEC_COFF_SHARED_LIBRARY,
	SEC_COFF_SHARED, SEC_TIC54X_BLOCK and SEC_TIC54X_CLINK to the
	end.
	* bfd-in2.h: Regenerated.

binutils/

2005-02-21  H.J. Lu  <hongjiu.lu@@intel.com>

	* objcopy.c (parse_flags): Replace SEC_SHARED with
	SEC_COFF_SHARED.

	* objdump.c (dump_section_header): Dump SEC_TIC54X_BLOCK and
	SEC_TIC54X_CLINK for TI c54x only. Remove SEC_ARCH_BIT_0. Dump
	SEC_COFF_SHARED for COFF only.

gas/

2005-02-21  H.J. Lu  <hongjiu.lu@@intel.com>

	* config/obj-coff.c (obj_coff_section): Replace SEC_SHARED with
	SEC_COFF_SHARED.

	* config/tc-tic54x.c (tic54x_bss): Replace SEC_BLOCK with
	SEC_TIC54X_BLOCK.
	(demand_empty_rest_of_line): Likewise.
	(tic54x_sblock): Likewise.
	(tic54x_clink): Replace with SEC_CLINK with SEC_TIC54X_CLINK.

ld/

2005-02-21  H.J. Lu  <hongjiu.lu@@intel.com>

	* ldlang.c (lang_add_section): Check SEC_TIC54X_BLOCK for TI
	tic54x input only.
	(lang_size_sections_1): Check SEC_COFF_SHARED_LIBRARY for COFF
	and ECOFF output only.
@
text
@d3 1
a3 1
   2000, 2001, 2002, 2003, 2004
@


1.78
log
@	* aout-arm.c, aout-target.h, aoutx.h, archive.c, armnetbsd.c,
	bfd-in.h, bfdio.c, coff-alpha.c, coff-arm.c, coff-h8300.c,
	coff-i860.c, coff-mcore.c, coff-or32.c, coff-ppc.c, coff-sh.c,
	coff-sparc.c, coffcode.h, coffgen.c, cofflink.c, cpu-cris.c,
	cpu-h8500.c, cpu-ns32k.c, ecoff.c, ecofflink.c, elf.c,
	elf32-dlx.c, elf32-fr30.c, elf32-frv.c, elf32-hppa.c,
	elf32-i860.c, elf32-ip2k.c, elf32-m32r.c, elf32-sh.c,
	elf32-v850.c, elf64-mips.c, elf64-sparc.c, elflink.c,
	i386aout.c, i386msdos.c, i386os9k.c, ieee.c, mach-o.c,
	nlm32-sparc.c, oasys.c, opncls.c, pdp11.c, pe-mips.c, peXXigen.c,
	pef.c, peicode.h, reloc.c, riscix.c, section.c, simple.c, som.c,
	sparclynx.c, targets.c, vms-misc.c, vms-tir.c, xsym.c, doc/chew.c,
	hosts/delta68.h, hosts/vaxbsd.h: Remove #if 0'd code
	throughout. Similarly, collapse #if 1'd code.
@
text
@a185 6
.  {* ELF reserves 4 processor specific bits and 8 operating system
.     specific bits in sh_flags; at present we can get away with just
.     one in communicating between the assembler and BFD, but this
.     isn't a good long-term solution.  *}
.#define SEC_ARCH_BIT_0 0x008
.
d187 1
a187 1
.#define SEC_READONLY   0x010
d190 1
a190 1
.#define SEC_CODE       0x020
d193 1
a193 1
.#define SEC_DATA       0x040
d196 1
a196 1
.#define SEC_ROM        0x080
d208 1
a208 1
.#define SEC_CONSTRUCTOR 0x100
d213 1
a213 1
.#define SEC_HAS_CONTENTS 0x200
d217 1
a217 12
.#define SEC_NEVER_LOAD 0x400
.
.  {* The section is a COFF shared library section.  This flag is
.     only for the linker.  If this type of section appears in
.     the input file, the linker must copy it to the output file
.     without changing the vma or size.  FIXME: Although this
.     was originally intended to be general, it really is COFF
.     specific (and the flag was renamed to indicate this).  It
.     might be cleaner to have some more general mechanism to
.     allow the back end to control what the linker does with
.     sections.  *}
.#define SEC_COFF_SHARED_LIBRARY 0x800
d220 1
a220 1
.#define SEC_THREAD_LOCAL 0x1000
d228 1
a228 1
.#define SEC_HAS_GOT_REF 0x4000
d235 1
a235 1
.#define SEC_IS_COMMON 0x8000
d241 1
a241 1
.#define SEC_DEBUGGING 0x10000
d246 1
a246 1
.#define SEC_IN_MEMORY 0x20000
d251 1
a251 1
.#define SEC_EXCLUDE 0x40000
d257 1
a257 1
.#define SEC_SORT_ENTRIES 0x80000
d263 1
a263 1
.#define SEC_LINK_ONCE 0x100000
d267 1
a267 1
.#define SEC_LINK_DUPLICATES 0x600000
d276 1
a276 1
.#define SEC_LINK_DUPLICATES_ONE_ONLY 0x200000
d280 1
a280 1
.#define SEC_LINK_DUPLICATES_SAME_SIZE 0x400000
d285 2
a286 1
.#define SEC_LINK_DUPLICATES_SAME_CONTENTS 0x600000
d292 1
a292 1
.#define SEC_LINKER_CREATED 0x800000
d295 1
a295 1
.#define SEC_KEEP 0x1000000
d299 1
a299 15
.#define SEC_SMALL_DATA 0x2000000
.
.  {* This section contains data which may be shared with other
.     executables or shared objects.  *}
.#define SEC_SHARED 0x4000000
.
.  {* When a section with this flag is being linked, then if the size of
.     the input section is less than a page, it should not cross a page
.     boundary.  If the size of the input section is one page or more, it
.     should be aligned on a page boundary.  *}
.#define SEC_BLOCK 0x8000000
.
.  {* Conditionally link this section; do not link if there are no
.     references found to any symbol in the section.  *}
.#define SEC_CLINK 0x10000000
d303 1
a303 1
.#define SEC_MERGE 0x20000000
d308 1
a308 1
.#define SEC_STRINGS 0x40000000
d311 28
a338 1
.#define SEC_GROUP 0x80000000
@


1.77
log
@bfd/
	* elf64-ppc.c (struct ppc_link_hash_table): Add no_multi_toc and
	multi_toc_needed.
	(has_toc_reloc, makes_toc_func_call, call_check_in_progress): Define.
	(ppc64_elf_check_relocs): Update references to has_gp_reloc.
	(ppc64_elf_setup_section_lists): Add no_multi_toc parm, set htab bit.
	(ppc64_elf_next_toc_section): Heed no_multi_toc.
	(ppc64_elf_reinit_toc): Set multi_toc_needed.
	(toc_adjusting_stub_needed): Rewrite.
	(ppc64_elf_next_input_section): Use multi_toc_needed to shortcut
	toc tests.  Adjust for toc_adjusting_stub_needed changes.
	(ppc64_elf_size_stubs): Update references to has_gp_reloc.
	* elf64-ppc.h (ppc64_elf_setup_section_lists): Update prototype.
	* section.c: Expand comment on backend bits.
	* bfd-in2.h: Regenerate.
	* libbfd.h: Regenerate.
ld/
	* emultempl/ppc64elf.em (no_multi_toc): New var.
	(gld${EMULATION_NAME}_finish): Pass to ppc64_elf_setup_section_lists.
	(OPTION_NO_MULTI_TOC): Define.
	(PARSE_AND_LIST_LONGOPTS): Add --no-multi-toc support.
	(PARSE_AND_LIST_OPTIONS, PARSE_AND_LIST_ARGS_CASES): Likewise.
@
text
@a1061 13
#if 0
  /* If you try to copy a text section from an input file (where it
     has the SEC_CODE flag set) to an output file, this loses big if
     the bfd_applicable_section_flags (abfd) doesn't have the SEC_CODE
     set - which it doesn't, at least not for a.out.  FIXME */

  if ((flags & bfd_applicable_section_flags (abfd)) != flags)
    {
      bfd_set_error (bfd_error_invalid_operation);
      return FALSE;
    }
#endif

@


1.76
log
@        * section.c (bfd_sections_find_if): Fix parameter name in
        comment to match code.
@
text
@d376 2
a377 1
.  {* Bits used by various backends.  *}
@


1.75
log
@bfd/

2004-07-21  H.J. Lu  <hongjiu.lu@@intel.com>

	* aout-adobe.c (aout_32_section_already_linked): Defined.
	* aout-target.h (MY_section_already_linked): Likewise.
	* aout-tic30.c (MY_section_already_linked): Likewise.
	* binary.c (binary_section_already_linked): Likewise.
	* bout.c (b_out_section_already_linked): Likewise.
	* coff-alpha.c (_bfd_ecoff_section_already_linked): Likewise.
	* coff-mips.c (_bfd_ecoff_section_already_linked): Likewise.
	* coffcode.h (coff_section_already_linked): Likewise.
	* i386msdos.c (msdos_section_already_linked): Likewise.
	* i386os9k.c (os9k_section_already_linked): Likewise.
	* ieee.c (ieee_section_already_linked): Likewise.
	* ihex.c (ihex_section_already_linked): Likewise.
	* mach-o.c (bfd_mach_o_section_already_linked): Likewise.
	* mmo.c (mmo_section_already_linked): Likewise.
	* nlm-target.h (nlm_section_already_linked): Likewise.
	* oasys.c (oasys_section_already_linked): Likewise.
	* pef.c (bfd_pef_section_already_linked): Likewise.
	* ppcboot.c (ppcboot_section_already_linked): Likewise.
	* som.c (som_bfd_discard_group): Likewise.
	* srec.c (srec_section_already_linked): Likewise.
	* tekhex.c (tekhex_section_already_linked): Likewise.
	* versados.c (versados_section_already_linked): Likewise.
	* vms.c (vms_section_already_linked): Likewise.
	* coff-target.h (_bfd_xcoff_section_already_linked): Likewise.
	* xsym.c (bfd_sym_section_already_linked): Likewise.

	* bfd-in.h (bfd_section_already_linked_table_init): New.
	(bfd_section_already_linked_table_free): Likewise.

	* coff-rs6000.c (rs6000coff_vec): Add
	_bfd_generic_section_already_linked.
	(pmac_xcoff_vec): Likewise.
	* coff64-rs6000.c (rs6000coff64_vec): Likewise.
	(aix5coff64_vec): Likewise.

	* elf-bfd.h (_bfd_elf_section_already_linked): New prototype.
	* elflink.c (_bfd_elf_section_already_linked): New function.

	* elfxx-target.h (bfd_elfNN_section_already_linked): Defined.

	* libbfd-in.h (_bfd_nolink_section_already_linked): Defined.
	(_bfd_generic_section_already_linked): New.
	(bfd_section_already_linked_hash_entry): Likewise.
	(bfd_section_already_linked): Likewise.
	(bfd_section_already_linked_table_lookup): Likewise.
	(bfd_section_already_linked_table_insert): Likewise.

	* linker.c (bfd_section_already_linked): New.
	(_bfd_section_already_linked_table): Likewise.
	(bfd_section_already_linked_table_lookup): Likewise.
	(bfd_section_already_linked_table_insert): Likewise.
	(already_linked_newfunc): Likewise.
	(bfd_section_already_linked_table_init): Likewise.
	(bfd_section_already_linked_table_free): Likewise.
	(_bfd_generic_section_already_linked): Likewise.

	* section.c (bfd_section): Remove comdat.
	(bfd_comdat_info): Moved to ...
	* bfd-in.h (coff_comdat_info): Here.
	(bfd_coff_get_comdat_section): New.
	* coffgen.c (bfd_coff_get_comdat_section): Likewise.
	* libcoff-in.h (coff_section_tdata): Add comdat.
	* coffcode.h (handle_COMDAT): Updated.
	* cofflink.c (coff_link_add_symbols): Likewise.
	* ecoff.c (bfd_debug_section): Likewise.

	* targets.c (bfd_target): Add _section_already_linked.
	(BFD_JUMP_TABLE_LINK): Updated.

	* bfd-in2.h: Regenerated.
	* libbfd.h: Likewise.
	* libcoff.h: Likewise.

binutils/

2004-07-21  H.J. Lu  <hongjiu.lu@@intel.com>

	* objcopy.c (filter_symbols): Use bfd_coff_get_comdat_section
	to access comdat.
	* objdump.c (dump_section_header): Likewise.

ld/

2004-07-21  H.J. Lu  <hongjiu.lu@@intel.com>

	* ldlang.c (already_linked_hash_entry): Removed.
	(already_linked): Likewise.
	(already_linked_table): Likewise.
	(section_already_linked): Call bfd_section_already_linked.
	(lang_process): Replace already_linked_table_init with
	bfd_section_already_linked_table_init and check return. Replace
	already_linked_table_free with bfd_section_already_linked_table_free.
@
text
@d1126 1
a1126 1
	   bfd_boolean (*func) (bfd *abfd, asection *sect, void *obj),
d1130 1
a1130 1
	Call the provided function @@var{func} for each section
d1134 1
a1134 1
|	func (abfd, the_section, obj);
d1136 1
a1136 1
	It returns the first section for which @@var{func} returns true.
@


1.74
log
@bfd/
	* elf64-mmix.c (mmix_set_relaxable_size): Save original size in
	rawsize.
	(mmix_elf_perform_relocation): Adjust for above change.
	(mmix_elf_relocate_section): Likewise.
	(mmix_elf_relax_section): Likewise.  Use output_section->rawsize.
	(mmix_elf_get_section_contents): Delete.
	(bfd_elf64_get_section_contents): Delete.
	(mmix_elf_relocate_section): Zero stub area.
	* linker.c (default_indirect_link_order): Alloc max of section size
	and rawsize.
	* simple.c (bfd_simple_get_relocated_section_contents): Likewise.
	* section.c (bfd_malloc_and_get_section): Likewise.
	(struct bfd_section): Update rawsize comment.
	* bfd-in2.h: Regenerate.
ld/
	* ldlang.c (lang_reset_memory_regions): Save last relax pass section
	size in rawsize.
@
text
@a151 17
.{* This structure is used for a comdat section, as in PE.  A comdat
.   section is associated with a particular symbol.  When the linker
.   sees a comdat section, it keeps only one of the sections with a
.   given name and associated with a given symbol.  *}
.
.struct bfd_comdat_info
.{
.  {* The name of the symbol associated with a comdat section.  *}
.  const char *name;
.
.  {* The local symbol table index of the symbol associated with a
.     comdat section.  This is only meaningful to the object file format
.     specific code; it is not an index into the list returned by
.     bfd_canonicalize_symtab.  *}
.  long symbol;
.};
.
a474 3
.  {* Optional information about a COMDAT entry; NULL if not COMDAT.  *}
.  struct bfd_comdat_info *comdat;
.
d617 2
a618 2
    /* entsize, comdat, kept_section, moving_line_filepos,           */	\
       0,       NULL,   NULL,	      0,				\
@


1.73
log
@bfd/
	* section.c (struct sec): Rename "_cooked_size" to "size".
	Rename "_raw_size" to "rawsize".
	(STD_SECTION): Adjust comments.
	(bfd_set_section_size, bfd_get_section_contents): Use size.
	(bfd_malloc_and_get_section): New function.
	* bfd-in.h (bfd_section_size, bfd_get_section_size): Use size.
	* coff-sh.c (sh_relax_section): Alloc coff_section_data struct early.
	Correctly free reloc and contents memory.
	* elf-eh-frame.c (_bfd_elf_discard_section_eh_frame): Delete FIXME
	and fake CIE now that we can shink section size to zero.
	(_bfd_elf_write_section_eh_frame): Likewise..
	* elf32-ppc.c (ppc_elf_relax_section): Delay reading section contents.
	* elf-m10300.c (mn10300_elf_final_link_relocate): Don't use
	_bfd_stab_section_offset.  Use _bfd_elf_section_offset.
	* stabs.c (_bfd_stab_section_offset_): Remove unused args and
	unneeded indirection.
	* elf.c (_bfd_elf_section_offset): .. and update call.
	* libbfd-in.h (_bfd_stab_section_offset): Update prototype.
	* libbfd.h: Regenerate.
	* bfd-in2.h: Regenerate.

	Replace occurrences of "_raw_size" and "_cooked_size" in most places
	with "size".  Set new "rawsize" for stabs, eh_frame, and SEC_MERGE
	sections.  Use "rawsize", if non-zero, for bfd_get_section_contents
	calls if the section might be a stabs, eh_frame, or SEC_MERGE section.
	Similarly use "rawsize", if non-zero, in reloc functions to validate
	reloc addresses.  Use new bfd_malloc_and_get_section in most places
	where bfd_get_section_contents was called.  Expand all occurrences of
	bfd_section_size and bfd_get_section_size.  Rename "raw_size" var in
	grok_prstatus and similar functions to "size".
	* aix386-core.c (aix386_core_file_p): ..
	* aix5ppc-core.c (xcoff64_core_p): ..
	* aout-adobe.c (aout_adobe_callback, aout_adobe_write_object_contents,
	aout_adobe_set_section_contents): ..
	* aout-target.h (callback): ..
	* aout-tic30.c (tic30_aout_callback, tic30_aout_final_link_relocate,
	MY_bfd_final_link): ..
	* aoutf1.h (sunos4_core_file_p): ..
	* aoutx.h (some_aout_object_p, adjust_o_magic, adjust_z_magic,
	adjust_n_magic, adjust_sizes_and_vmas, translate_from_native_sym_flags,
	final_link, aout_link_input_section): ..
	* binary.c (binary_object_p, binary_canonicalize_symtab,
	binary_set_section_contents): ..
	* bout.c (b_out_callback, b_out_write_object_contents,
	b_out_set_section_contents, b_out_bfd_relax_section,
	b_out_bfd_get_relocated_section_contents): ..
	* cisco-core.c (cisco_core_file_validate): ..
	* coff-alpha.c (alpha_ecoff_object_p,
	alpha_ecoff_get_relocated_section_conten, alpha_relocate_section): ..
	* coff-arm.c (coff_arm_relocate_section,
	bfd_arm_allocate_interworking_sections): ..
	* coff-h8300.c (h8300_reloc16_extra_cases,
	h8300_bfd_link_add_symbols): ..
	* coff-mips.c (mips_refhi_reloc, mips_gprel_reloc): ..
	* coff-ppc.c (coff_ppc_relocate_section, ppc_allocate_toc_section,
	ppc_bfd_coff_final_link): ..
	* coff-rs6000.c (xcoff_reloc_type_br, xcoff_ppc_relocate_section): ..
	* coff-sh.c (sh_relax_section, sh_relax_delete_bytes,
	sh_align_loads, sh_coff_get_relocated_section_contents): ..
	* coff64-rs6000.c (xcoff64_write_object_contents,
	xcoff64_reloc_type_br, xcoff64_ppc_relocate_section): ..
	* coffcode.h (coff_compute_section_file_positions,
	coff_write_object_contents): ..
	* coffgen.c (make_a_section_from_file, coff_write_symbols,
	coff_section_symbol, build_debug_section): ..
	* cofflink.c (coff_link_add_symbols, _bfd_coff_final_link,
	process_embedded_commands, _bfd_coff_link_input_bfd,
	_bfd_coff_write_global_sym): ..
	* cpu-arm.c (bfd_arm_update_notes, bfd_arm_get_mach_from_notes): ..
	* cpu-ns32k.c (do_ns32k_reloc, _bfd_ns32k_final_link_relocate): ..
	* dwarf1.c (parse_line_table, _bfd_dwarf1_find_nearest_line): ..
	* dwarf2.c (read_indirect_string, read_abbrevs, decode_line_info,
	_bfd_dwarf2_find_nearest_line): ..
	* ecoff.c (bfd_debug_section, ecoff_set_symbol_info,
	ecoff_compute_section_file_positions,
	_bfd_ecoff_write_object_contents, ecoff_indirect_link_order): ..
	* elf-eh-frame.c (_bfd_elf_discard_section_eh_frame,
	_bfd_elf_discard_section_eh_frame_hdr,
	_bfd_elf_maybe_strip_eh_frame_hdr, _bfd_elf_eh_frame_section_offset,
	_bfd_elf_write_section_eh_frame,
	_bfd_elf_write_section_eh_frame_hdr): ..
	* elf-hppa.h (elf_hppa_sort_unwind): ..
	* elf-m10200.c (mn10200_elf_relax_section,
	mn10200_elf_relax_delete_bytes,
	mn10200_elf_get_relocated_section_contents): ..
	* elf-m10300.c (_bfd_mn10300_elf_create_got_section,
	mn10300_elf_check_relocs, mn10300_elf_relax_section,
	mn10300_elf_relax_delete_bytes,
	mn10300_elf_get_relocated_section_contents,
	_bfd_mn10300_elf_adjust_dynamic_symbol,
	_bfd_mn10300_elf_discard_copies,
	_bfd_mn10300_elf_size_dynamic_sections,
	_bfd_mn10300_elf_finish_dynamic_sections): ..
	* elf.c (_bfd_elf_print_private_bfd_data, bfd_elf_get_bfd_needed_list,
	_bfd_elf_make_section_from_phdr, elf_fake_sections,
	bfd_elf_set_group_contents, map_sections_to_segments,
	elf_sort_sections, assign_file_positions_for_segments,
	SECTION_SIZE, copy_private_bfd_data,
	_bfd_elf_get_dynamic_reloc_upper_bound,
	_bfd_elf_canonicalize_dynamic_reloc, elfcore_maybe_make_sect,
	_bfd_elfcore_make_pseudosection, elfcore_grok_prstatus,
	elfcore_grok_lwpstatus, elfcore_grok_win32pstatus,
	elfcore_grok_note, elfcore_grok_nto_status, elfcore_grok_nto_gregs,
	_bfd_elf_rel_local_sym, _bfd_elf_get_synthetic_symtab): ..
	* elf32-arm.h (bfd_elf32_arm_allocate_interworking_sect,
	bfd_elf32_arm_process_before_allocation,
	elf32_arm_adjust_dynamic_symbol, allocate_dynrelocs,
	elf32_arm_size_dynamic_sections, elf32_arm_finish_dynamic_sections,
	elf32_arm_write_section): ..
	* elf32-cris.c (cris_elf_grok_prstatus,
	elf_cris_finish_dynamic_sections, cris_elf_gc_sweep_hook,
	elf_cris_adjust_gotplt_to_got, elf_cris_adjust_dynamic_symbol,
	cris_elf_check_relocs, elf_cris_size_dynamic_sections,
	elf_cris_discard_excess_dso_dynamics,
	elf_cris_discard_excess_program_dynamics): ..
	* elf32-d30v.c (bfd_elf_d30v_reloc, bfd_elf_d30v_reloc_21): ..
	* elf32-dlx.c (_bfd_dlx_elf_hi16_reloc): ..
	* elf32-frv.c (_frvfdpic_add_dyn_reloc, _frvfdpic_add_rofixup,
	_frv_create_got_section, _frvfdpic_assign_plt_entries,
	elf32_frvfdpic_size_dynamic_sections,
	elf32_frvfdpic_modify_segment_map,
	elf32_frvfdpic_finish_dynamic_sections): ..
	* elf32-h8300.c (elf32_h8_relax_section, elf32_h8_relax_delete_bytes,
	elf32_h8_get_relocated_section_contents): ..
	* elf32-hppa.c (hppa_build_one_stub, hppa_size_one_stub,
	elf32_hppa_adjust_dynamic_symbol, allocate_plt_static,
	allocate_dynrelocs, elf32_hppa_size_dynamic_sections, group_sections,
	elf32_hppa_size_stubs, elf32_hppa_set_gp, elf32_hppa_build_stubs,
	elf32_hppa_finish_dynamic_sections): ..
	* elf32-i370.c (i370_elf_adjust_dynamic_symbol,
	i370_elf_size_dynamic_sections, i370_elf_check_relocs,
	i370_elf_finish_dynamic_sections): ..
	* elf32-i386.c (elf_i386_grok_prstatus, elf_i386_adjust_dynamic_symbol,
	allocate_dynrelocs, elf_i386_size_dynamic_sections,
	elf_i386_relocate_section, elf_i386_finish_dynamic_sections): ..
	* elf32-i860.c (i860_howto_pc26_reloc, i860_howto_pc16_reloc,
	i860_howto_highadj_reloc, i860_howto_splitn_reloc): ..
	* elf32-ip2k.c (ip2k_is_switch_table_128,
	ip2k_relax_switch_table_128, ip2k_is_switch_table_256,
	ip2k_relax_switch_table_256, ip2k_elf_relax_section,
	adjust_all_relocations, ip2k_elf_relax_delete_bytes): ..
	* elf32-m32r.c (m32r_elf_do_10_pcrel_reloc, m32r_elf_hi16_reloc,
	m32r_elf_generic_reloc, m32r_elf_adjust_dynamic_symbol,
	allocate_dynrelocs, m32r_elf_size_dynamic_sections,
	m32r_elf_relocate_section, m32r_elf_finish_dynamic_sections,
	m32r_elf_relax_section, m32r_elf_relax_delete_bytes,
	m32r_elf_get_relocated_section_contents): ..
	* elf32-m68hc11.c (m68hc11_elf_build_one_stub,
	m68hc11_elf_size_one_stub, m68hc11_elf_relax_section,
	m68hc11_elf_relax_delete_bytes): ..
	* elf32-m68hc12.c (m68hc12_elf_build_one_stub,
	m68hc12_elf_size_one_stub): ..
	* elf32-m68hc1x.c (elf32_m68hc11_size_stubs,
	elf32_m68hc11_build_stubs, m68hc11_elf_special_reloc): ..
	* elf32-m68k.c (elf_m68k_check_relocs, elf_m68k_gc_sweep_hook,
	elf_m68k_adjust_dynamic_symbol, elf_m68k_size_dynamic_sections,
	elf_m68k_discard_copies, elf_m68k_finish_dynamic_sections): ..
	* elf32-mips.c (gprel32_with_gp, mips16_gprel_reloc,
	elf32_mips_grok_prstatus): ..
	* elf32-or32.c (or32_elf_consth_reloc): ..
	* elf32-ppc.c (ppc_elf_relax_section, ppc_elf_addr16_ha_reloc,
	elf_create_pointer_linker_section, ppc_elf_create_linker_section,
	ppc_elf_additional_program_headers, ppc_elf_adjust_dynamic_symbol,
	allocate_dynrelocs, ppc_elf_size_dynamic_sections,
	ppc_elf_finish_dynamic_sections, ppc_elf_grok_prstatus,
	ppc_elf_final_write_processing): ..
	* elf32-s390.c (s390_elf_ldisp_reloc, elf_s390_adjust_dynamic_symbol,
	allocate_dynrelocs, elf_s390_size_dynamic_sections,
	elf_s390_finish_dynamic_sections, elf_s390_grok_prstatus): ..
	* elf32-sh.c (sh_elf_reloc_loop, sh_elf_relax_section,
	sh_elf_relax_delete_bytes, sh_elf_align_loads,
	sh_elf_adjust_dynamic_symbol, allocate_dynrelocs,
	sh_elf_size_dynamic_sections, sh_elf_get_relocated_section_contents,
	sh_elf_finish_dynamic_sections, elf32_shlin_grok_prstatus): ..
	* elf32-sh64-com.c (sh64_address_in_cranges,
	sh64_get_contents_type): ..
	* elf32-sh64.c (sh64_find_section_for_address,
	sh64_elf_final_write_processing): ..
	* elf32-sparc.c (sparc_elf_wdisp16_reloc, sparc_elf_hix22_reloc,
	sparc_elf_lox10_reloc, elf32_sparc_adjust_dynamic_symbol,
	allocate_dynrelocs, elf32_sparc_size_dynamic_sections,
	elf32_sparc_relocate_section, elf32_sparc_finish_dynamic_sections): ..
	* elf32-v850.c (v850_elf_reloc, v850_elf_relax_section): ..
	* elf32-vax.c (elf_vax_check_relocs, elf_vax_adjust_dynamic_symbol,
	elf_vax_size_dynamic_sections, elf_vax_discard_copies,
	elf_vax_instantiate_got_entries, elf_vax_relocate_section,
	elf_vax_finish_dynamic_sections): ..
	* elf32-xstormy16.c (xstormy16_elf_24_reloc,
	xstormy16_elf_check_relocs, xstormy16_relax_plt_check,
	xstormy16_elf_relax_section, xstormy16_elf_always_size_sections,
	xstormy16_elf_finish_dynamic_sections): ..
	* elf32-xtensa.c (xtensa_read_table_entries,
	elf_xtensa_allocate_got_size, elf_xtensa_allocate_local_got_size,
	elf_xtensa_size_dynamic_sections, elf_xtensa_do_reloc,
	bfd_elf_xtensa_reloc, elf_xtensa_relocate_section,
	elf_xtensa_combine_prop_entries, elf_xtensa_finish_dynamic_sections,
	elf_xtensa_discard_info_for_section, elf_xtensa_grok_prstatus,
	get_relocation_opcode, retrieve_contents, find_relaxable_sections,
	collect_source_relocs, is_resolvable_asm_expansion, remove_literals,
	relax_section, shrink_dynamic_reloc_sections, relax_property_section,
	xtensa_callback_required_dependence): ..
	* elf64-alpha.c (elf64_alpha_reloc_gpdisp, elf64_alpha_relax_section,
	elf64_alpha_check_relocs, elf64_alpha_adjust_dynamic_symbol,
	elf64_alpha_calc_got_offsets_for_symbol, elf64_alpha_calc_got_offsets,
	elf64_alpha_size_plt_section, elf64_alpha_size_plt_section_1,
	elf64_alpha_always_size_sections, elf64_alpha_calc_dynrel_sizes,
	elf64_alpha_size_rela_got_section, elf64_alpha_size_rela_got_1,
	elf64_alpha_size_dynamic_sections, elf64_alpha_emit_dynrel,
	elf64_alpha_finish_dynamic_sections, elf64_alpha_final_link): ..
	* elf64-hppa.c (allocate_dynrel_entries,
	elf64_hppa_size_dynamic_sections,
	elf64_hppa_finish_dynamic_sections): ..
	* elf64-mips.c (mips_elf64_gprel32_reloc, mips16_gprel_reloc,
	mips_elf64_canonicalize_dynamic_reloc, mips_elf64_slurp_reloc_table,
	elf64_mips_grok_prstatus): ..
	* elf64-mmix.c (mmix_elf_perform_relocation, mmix_elf_reloc,
	mmix_elf_relocate_section, mmix_elf_final_link,
	mmix_set_relaxable_size, _bfd_mmix_after_linker_allocation,
	mmix_elf_relax_section, mmix_elf_get_section_contents): ..
	* elf64-ppc.c (ppc64_elf_object_p, ppc64_elf_grok_prstatus,
	ppc64_elf_check_relocs, ppc64_elf_func_desc_adjust,
	ppc64_elf_adjust_dynamic_symbol, ppc64_elf_edit_opd,
	allocate_dynrelocs, ppc64_elf_size_dynamic_sections,
	ppc_build_one_stub, ppc_size_one_stub, ppc64_elf_next_toc_section,
	toc_adjusting_stub_needed, group_sections, ppc64_elf_size_stubs,
	ppc64_elf_build_stubs, ppc64_elf_relocate_section,
	ppc64_elf_finish_dynamic_sections): ..
	* elf64-s390.c (s390_elf_ldisp_reloc, elf_s390_adjust_dynamic_symbol,
	allocate_dynrelocs, elf_s390_size_dynamic_sections,
	elf_s390_finish_dynamic_sections): ..
	* elf64-sh64.c (sh_elf64_get_relocated_section_contents,
	sh_elf64_check_relocs, sh64_elf64_adjust_dynamic_symbol,
	sh64_elf64_discard_copies, sh64_elf64_size_dynamic_sections,
	sh64_elf64_finish_dynamic_sections): ..
	* elf64-sparc.c (sparc64_elf_slurp_reloc_table, init_insn_reloc,
	sparc64_elf_check_relocs, sparc64_elf_adjust_dynamic_symbol,
	sparc64_elf_size_dynamic_sections, sparc64_elf_relocate_section,
	sparc64_elf_finish_dynamic_symbol,
	sparc64_elf_finish_dynamic_sections): ..
	* elf64-x86-64.c (elf64_x86_64_grok_prstatus,
	elf64_x86_64_adjust_dynamic_symbol, allocate_dynrelocs,
	elf64_x86_64_size_dynamic_sections, elf64_x86_64_relocate_section,
	elf64_x86_64_finish_dynamic_sections): ..
	* elfarm-nabi.c (elf32_arm_nabi_grok_prstatus): ..
	* elfcode.h (elf_slurp_reloc_table): ..
	* elflink.c (_bfd_elf_create_got_section, elf_add_dt_needed_tag,
	elf_finalize_dynstr, elf_link_add_object_symbols,
	bfd_elf_size_dynamic_sections, elf_link_sort_relocs,
	elf_link_input_bfd, bfd_elf_final_link, bfd_elf_discard_info): ..
	* elfn32-mips.c (gprel32_with_gp, mips16_gprel_reloc,
	elf32_mips_grok_prstatus): ..
	* elfxx-ia64.c (elfNN_ia64_relax_section, allocate_dynrel_entries,
	elfNN_ia64_size_dynamic_sections, elfNN_ia64_install_dyn_reloc,
	elfNN_ia64_choose_gp, elfNN_ia64_final_link,
	elfNN_ia64_finish_dynamic_sections): ..
	* elfxx-mips.c (mips_elf_create_procedure_table,
	mips_elf_check_mips16_stubs, _bfd_mips_elf_gprel16_with_gp,
	_bfd_mips_elf_hi16_reloc, _bfd_mips_elf_generic_reloc,
	mips_elf_global_got_index, mips_elf_multi_got,
	mips_elf_create_compact_rel_section, mips_elf_calculate_relocation,
	mips_elf_allocate_dynamic_relocations,
	mips_elf_create_dynamic_relocation, _bfd_mips_elf_fake_sections,
	_bfd_mips_relax_section, _bfd_mips_elf_adjust_dynamic_symbol,
	_bfd_mips_elf_always_size_sections,
	_bfd_mips_elf_size_dynamic_sections,
	_bfd_mips_elf_finish_dynamic_symbol,
	_bfd_mips_elf_finish_dynamic_sections,
	_bfd_mips_elf_modify_segment_map, _bfd_mips_elf_discard_info,
	_bfd_mips_elf_write_section, _bfd_mips_elf_set_section_contents,
	_bfd_elf_mips_get_relocated_section_contents,
	_bfd_mips_elf_final_link, _bfd_mips_elf_merge_private_bfd_data): ..
	* hp300hpux.c (callback): ..
	* hppabsd-core.c (make_bfd_asection): ..
	* hpux-core.c (make_bfd_asection): ..
	* i386linux.c (linux_link_create_dynamic_sections,
	bfd_i386linux_size_dynamic_sections, linux_finish_dynamic_link): ..
	* i386msdos.c (msdos_write_object_contents): ..
	* i386os9k.c (os9k_callback, os9k_write_object_contents,
	os9k_set_section_contents): ..
	* ieee.c (parse_expression, ieee_slurp_external_symbols,
	ieee_slurp_sections, ieee_slurp_debug, ieee_slurp_section_data,
	ieee_write_section_part, do_with_relocs, do_as_repeat,
	do_without_relocs, ieee_write_debug_part, init_for_output,
	ieee_set_section_contents): ..
	* ihex.c (ihex_scan, ihex_read_section, ihex_get_section_contents): ..
	* irix-core.c (do_sections, make_bfd_asection): ..
	* libaout.h (aout_section_merge_with_text_p): ..
	* libbfd.c (_bfd_generic_get_section_contents,
	_bfd_generic_get_section_contents_in_window): ..
	* linker.c (default_indirect_link_order): ..
	* lynx-core.c (make_bfd_asection): ..
	* m68klinux.c (linux_link_create_dynamic_sections,
	bfd_m68klinux_size_dynamic_sections, linux_finish_dynamic_link): ..
	* mach-o.c (bfd_mach_o_make_bfd_section,
	bfd_mach_o_scan_read_dylinker, bfd_mach_o_scan_read_dylib,
	bfd_mach_o_scan_read_thread, bfd_mach_o_scan_read_symtab,
	bfd_mach_o_scan_read_segment): ..
	* merge.c (_bfd_add_merge_section, record_section, merge_strings,
	_bfd_merge_sections): ..
	* mmo.c (mmo_find_sec_w_addr, mmo_get_spec_section, mmo_get_loc,
	mmo_map_set_sizes, mmo_canonicalize_symtab,
	mmo_internal_write_section, mmo_write_object_contents): ..
	* netbsd-core.c (netbsd_core_file_p): ..
	* nlm32-alpha.c (nlm_alpha_read_reloc, nlm_alpha_write_import,
	nlm_alpha_set_public_section): ..
	* nlm32-ppc.c (nlm_powerpc_read_reloc, nlm_powerpc_write_reloc): ..
	* nlm32-sparc.c (nlm_sparc_write_import): ..
	* nlmcode.h (add_bfd_section, nlm_swap_auxiliary_headers_in,
	nlm_compute_section_file_positions): ..
	* oasys.c (oasys_object_p, oasys_slurp_section_data,
	oasys_write_sections, oasys_write_data, oasys_set_section_contents): ..
	* opncls.c (get_debug_link_info): ..
	* osf-core.c (make_bfd_asection): ..
	* pdp11.c (some_aout_object_p, adjust_o_magic, adjust_z_magic,
	adjust_n_magic, adjust_sizes_and_vmas, squirt_out_relocs,
	final_link, aout_link_input_section): ..
	* peXXigen.c (_bfd_XXi_swap_sym_in, _bfd_XXi_swap_aouthdr_out,
	pe_print_idata, pe_print_edata, pe_print_pdata, pe_print_reloc): ..
	* pef.c (bfd_pef_make_bfd_section, bfd_pef_print_loader_section,
	bfd_pef_scan_start_address, bfd_pef_parse_symbols): ..
	* ppcboot.c (ppcboot_object_p, ppcboot_canonicalize_symtab): ..
	* ptrace-core.c (ptrace_unix_core_file_p): ..
	* reloc.c (bfd_perform_relocation, bfd_install_relocation,
	_bfd_final_link_relocate, bfd_generic_relax_section,
	bfd_generic_get_relocated_section_contents): ..
	* reloc16.c (bfd_coff_reloc16_relax_section,
	bfd_coff_reloc16_get_relocated_section_c): ..
	* riscix.c (riscix_some_aout_object_p): ..
	* rs6000-core.c (read_hdr, make_bfd_asection): ..
	* sco5-core.c (make_bfd_asection): ..
	* simple.c (bfd_simple_get_relocated_section_contents): ..
	* som.c (som_object_setup, setup_sections, som_prep_headers,
	som_write_fixups, som_begin_writing, bfd_section_from_som_symbol,
	som_set_reloc_info, som_get_section_contents,
	som_bfd_link_split_section): ..
	* sparclinux.c (linux_link_create_dynamic_sections,
	bfd_sparclinux_size_dynamic_sections, linux_finish_dynamic_link): ..
	* srec.c (srec_scan, srec_read_section, srec_get_section_contents): ..
	* stabs.c (_bfd_link_section_stabs, _bfd_discard_section_stabs,
	_bfd_write_stab_strings, _bfd_stab_section_offset): ..
	* sunos.c (sunos_read_dynamic_info, sunos_create_dynamic_sections,
	bfd_sunos_size_dynamic_sections, sunos_scan_std_relocs,
	sunos_scan_ext_relocs, sunos_scan_dynamic_symbol,
	sunos_write_dynamic_symbol, sunos_check_dynamic_reloc,
	sunos_finish_dynamic_link): ..
	* syms.c (_bfd_stab_section_find_nearest_line): ..
	* tekhex.c (first_phase, tekhex_set_section_contents,
	tekhex_write_object_contents): ..
	* trad-core.c (trad_unix_core_file_p): ..
	* versados.c (process_esd, process_otr, process_otr): ..
	* vms-gsd.c (_bfd_vms_slurp_gsd, _bfd_vms_write_gsd): ..
	* vms-misc.c (add_new_contents): ..
	* vms-tir.c (check_section, new_section, _bfd_vms_write_tir): ..
	* vms.c (vms_set_section_contents): ..
	* xcofflink.c (xcoff_get_section_contents, xcoff_link_add_symbols,
	xcoff_sweep, bfd_xcoff_size_dynamic_sections, xcoff_build_ldsyms,
	_bfd_xcoff_bfd_final_link, xcoff_link_input_bfd): ..
	* xsym.c (bfd_sym_scan): .. See above.

binutils/
	* objcopy.c (copy_section): Don't set _cooked_size.

include/
	* bfdlink.h (struct bfd_link_order): Update comment.

ld/
	* ldlang.c (print_output_section_statement): Don't print size before
	relaxation.
	(IGNORE_SECTION): Remove bfd arg.  Update all callers.

	* ldexp.c (fold_name): .. See below.
	* ldlang.c (section_already_linked, print_output_section_statement,
	print_input_section, insert_pad, size_input_section,
	lang_check_section_addresses, lang_size_sections_1,
	lang_size_sections, lang_do_assignments_1, lang_set_startof,
	lang_one_common, lang_reset_memory_regions, lang_process,
	lang_abs_symbol_at_end_of, lang_do_version_exports_section): ..
	* ldwrite.c (build_link_order, clone_section, ds, split_sections): ..
	* pe-dll.c (process_def_file, generate_reloc): ..
	* emultempl/elf32.em (gld${EMULATION_NAME}_find_statement_assignment,
	gld${EMULATION_NAME}_before_allocation): ..
	* emultempl/mmix-elfnmmo.em (mmix_after_allocation): ..
	* emultempl/sh64elf.em (sh64_elf_${EMULATION_NAME}_before_allocation,
	sh64_elf_${EMULATION_NAME}_after_allocation): ..
	* emultempl/sunos.em (gld${EMULATION_NAME}_before_allocation): ..
	* emultempl/xtensaelf.em (ld_assign_relative_paged_dot,
	ld_local_file_relocations_fit, ld_xtensa_insert_page_offsets): Use
	"size" instead of "_raw_size" and "_cooked_size".  Expand
	bfd_section_size macro invocations.
@
text
@d427 8
a434 7
.  {* The original size on disk of the section, in octets.  This field
.     is used by the linker relaxation code.  It is currently only set
.     for sections where the linker relaxation scheme doesn't cache
.     altered section and reloc contents (stabs, eh_frame, SEC_MERGE),
.     and thus the original size needs to be kept to read the section
.     multiple times.  If non-zero, rawsize will be used in address
.     checks during relocation and to read section contents.  *}
d1383 1
a1383 1
  p = bfd_malloc (sz);
@


1.72
log
@	* section.c (struct sec): Remove usused flags.  Reorganize a little.
	(bfd_get_section_size_before_reloc): Delete.
	(bfd_get_section_size_after_reloc): Delete.
	(STD_SECTION): Update.
	(bfd_get_section_size_now): Delete.
	(bfd_set_section_contents): Don't referece reloc_done.
	(bfd_get_section_contents): Remove reloc_done comment.
	* bout.c (b_out_bfd_get_relocated_section_contents): Don't set
	reloc_done.
	* coff-alpha.c (alpha_ecoff_get_relocated_section_contents): Likewise.
	* ecoff.c (bfd_debug_section): Update initializer.
	* elfxx-mips.c (_bfd_elf_mips_get_relocated_section_contents): Ditto.
	* reloc.c (bfd_generic_get_relocated_section_contents): Likewise.
	* bfd-in.h (bfd_section_size): Expand.
	(bfd_get_section_size): New macro.
	* bfd-in2.h: Regenerate.
	* coff64-rs6000.c (xcoff64_write_object_contents): Replace
	bfd_get_section_size_before_reloc with bfd_get_section_size.
	* coffcode.h (coff_write_object_contents): Likewise.
	* coffgen.c (build_debug_section): Likewise.
	* dwarf1.c (parse_line_table): Likewise.
	(_bfd_dwarf1_find_nearest_line): Likewise.
	* ecoff.c (_bfd_ecoff_write_object_contents): Likewise.
	* i386msdos.c (msdos_write_object_contents): Likewise.
	* pdp11.c (squirt_out_relocs): Likewise.
	* elf32-sh64.c (sh64_find_section_for_address): Remove comment.
	* elf64-mmix.c (mmix_elf_final_link): Update comment.
@
text
@d424 2
a425 2
.     size of <<.bss>>).  This will be filled in after relocation.  *}
.  bfd_size_type _cooked_size;
d427 8
a434 4
.  {* The original size on disk of the section, in octets.  Normally this
.     value is the same as the size, but if some relaxing has
.     been done, then this value will be bigger.  *}
.  bfd_size_type _raw_size;
d624 2
a625 2
    /* vma, lma, _cooked_size, _raw_size,                            */	\
       0,   0,   0,            0,					\
d627 1
a627 1
    /* output_offset, output_section,      alignment_power,          */	\
d1203 1
a1203 3
  ptr->_cooked_size = val;
  ptr->_raw_size = val;

d1249 1
a1249 1
  sz = section->_cooked_size != 0 ? section->_cooked_size : section->_raw_size;
d1329 1
a1329 1
  sz = section->_raw_size;
d1361 30
@


1.71
log
@bfd/

2004-05-02  H.J. Lu  <hongjiu.lu@@intel.com>

	* section.c (bfd_get_section_by_name_if): New.
	* bfd-in2.h: Regenerated.

gas/

2004-05-02  H.J. Lu  <hongjiu.lu@@intel.com>

	* config/obj-elf.c (get_section): Return bfd_boolean.
	(obj_elf_change_section): Call bfd_get_section_by_name_if
	instead of bfd_map_over_sections.
@
text
@a366 3
.  {* Whether relocations have been processed.  *}
.  unsigned int reloc_done : 1;
.
d394 2
d398 3
d404 2
a405 10
.  {* Nonzero if this section has a gp reloc.  *}
.  unsigned int has_gp_reloc:1;
.
.  {* Unused bits.  *}
.  unsigned int flag13:1;
.  unsigned int flag14:1;
.  unsigned int flag15:1;
.  unsigned int flag16:4;
.  unsigned int flag20:4;
.  unsigned int flag24:8;
a553 5
.#define bfd_get_section_size_before_reloc(section) \
.     ((section)->_raw_size)
.#define bfd_get_section_size_after_reloc(section) \
.     ((section)->reloc_done ? (section)->_cooked_size \
.                            : (abort (), (bfd_size_type) 1))
d608 2
a609 2
    /* name, id,  index, next, flags, user_set_vma, reloc_done,      */	\
    { NAME,  IDX, 0,     NULL, FLAGS, 0,            0,			\
d614 2
a615 2
    /* sec_info_type, use_rela_p, has_tls_reloc,                     */ \
       0,	      0,	  0,					\
d617 1
a617 1
    /* need_finalize_relax, has_gp_reloc,                            */ \
a619 3
    /* flag13, flag14, flag15, flag16, flag20, flag24,               */ \
       0,      0,      0,      0,      0,      0,			\
									\
a1231 5
#define bfd_get_section_size_now(abfd, sec) \
  (sec->reloc_done \
   ? bfd_get_section_size_after_reloc (sec) \
   : bfd_get_section_size_before_reloc (sec))

d1247 1
a1247 1
  sz = bfd_get_section_size_now (abfd, section);
a1326 2
  /* Even if reloc_done is TRUE, this function reads unrelocated
     contents, so we want the raw size.  */
@


1.70
log
@	* section.c (bfd_make_section_anyway): Copy the whole
	bfd_hash_entry, not just "next" from existing entry.
@
text
@d804 51
@


1.69
log
@2004-04-30  H.J. Lu  <hongjiu.lu@@intel.com>

	* section.c (bfd_sections_find_if): New.
	* bfd-in2.h: Regenerated.
@
text
@d958 1
a958 1
      new_sh->root.next = sh->root.next;
@


1.68
log
@	* section.c (bfd_make_section_anyway): Add all sections to hash tab.

	* elf-bfd.h (bfd_elf_is_group_section): Declare.
	* elf.c (bfd_elf_is_group_section): New function.
	* elfxx-target.h (bfd_elfNN_bfd_is_group_section
	* section.c (bfd_generic_is_group_section): New function.
	* targets.c (struct bfd_target): Add _bfd_is_group_section field.
	(BFD_JUMP_TABLE_LINK): Adjust.
	* aout-adobe.c (aout_32_bfd_is_group_section): Define.
	* aout-target.h (MY_bfd_is_group_section): Define.
	* aout-tic30.c (MY_bfd_is_group_section): Define.
	* bfd.c (bfd_is_group_section): Define.
	* binary.c (binary_bfd_is_group_section): Define.
	* bout.c (b_out_bfd_is_group_section): Define.
	* coff-alpha.c (_bfd_ecoff_bfd_is_group_section): Define.
	* coff-mips.c (_bfd_ecoff_bfd_is_group_section): Define.
	* coff-rs6000.c (rs6000coff_vec, pmac_xcoff_vec): Adjust.
	* coff64-rs6000.c (rs6000coff64_vec, aix5coff64_vec): Adjust.
	* coffcode.h (coff_bfd_is_group_section): Define.
	* i386msdos.c (msdos_bfd_is_group_section): Define.
	* i386os9k.c (os9k_bfd_is_group_section): Define.
	* ieee.c (ieee_bfd_is_group_section): Define.
	* ihex.c (ihex_bfd_is_group_section): Define.
	* libbfd-in.h (_bfd_nolink_bfd_is_group_section): Define.
	* mach-o.c (bfd_mach_o_bfd_is_group_section): Define.
	* mmo.c (mmo_bfd_is_group_section): Define.
	* nlm-target.h (nlm_bfd_is_group_section): Define.
	* oasys.c (oasys_bfd_is_group_section): Define.
	* pef.c (bfd_pef_bfd_is_group_section): Define.
	* ppcboot.c (ppcboot_bfd_is_group_section): Define.
	* srec.c (srec_bfd_is_group_section): Define.
	* tekhex.c (tekhex_bfd_is_group_section): Define.
	* versados.c (versados_bfd_is_group_section): Define.
	* vms.c (vms_bfd_is_group_section): Define.
	* xsym.c (bfd_sym_bfd_is_group_section): Define.
	* bfd-in2.h: Regenerate.
	* libbfd.h: Regenerate.
@
text
@d1099 35
@


1.67
log
@	* coff-rs6000.c: Remove ARGSUSED and VARARGS.
	* coff64-rs6000.c: Likewise.
	* coffcode.h: Likewise.
	* elf32-vax.c: Likewise.
	* hash.c: Likewise.
	* hppabsd-core.c: Likewise.
	* hpux-core.c: Likewise.
	* ihex.c: Likewise.
	* netbsd-core.c: Likewise.
	* osf-core.c: Likewise.
	* pdp11.c: Likewise.
	* ptrace-core.c: Likewise.
	* sco5-core.c: Likewise.
	* section.c: Likewise.
	* sunos.c: Likewise.
	* trad-core.c: Likewise.
@
text
@d3 1
a3 1
   2000, 2001, 2002, 2003
d948 8
a955 6
      /* We are making a section of the same name.  It can't go in
	 section_htab without generating a unique section name and
	 that would be pointless;  We don't need to traverse the
	 hash table.  */
      newsect = bfd_zalloc (abfd, sizeof (asection));
      if (newsect == NULL)
d957 4
d1356 18
@


1.67.8.1
log
@Merge mainline to intercu branch - 2004-09-15
@
text
@d3 1
a3 1
   2000, 2001, 2002, 2003, 2004
d152 17
d367 3
d397 1
d399 2
a400 2
.  {* Nonzero if this section has TLS related relocations.  *}
.  unsigned int has_tls_reloc:1;
d405 7
a411 5
.  {* Nonzero if this section needs the relax finalize pass.  *}
.  unsigned int need_finalize_relax:1;
.
.  {* Whether relocations have been processed.  *}
.  unsigned int reloc_done : 1;
d430 2
a431 2
.     size of <<.bss>>).  *}
.  bfd_size_type size;
d433 4
a436 9
.  {* For input sections, the original size on disk of the section, in
.     octets.  This field is used by the linker relaxation code.  It is
.     currently only set for sections where the linker relaxation scheme
.     doesn't cache altered section and reloc contents (stabs, eh_frame,
.     SEC_MERGE, some coff relaxing targets), and thus the original size
.     needs to be kept to read the section multiple times.
.     For output sections, rawsize holds the section size calculated on
.     a previous linker relaxation pass.  *}
.  bfd_size_type rawsize;
d493 3
d560 5
d619 2
a620 2
    /* name, id,  index, next, flags, user_set_vma,                  */	\
    { NAME,  IDX, 0,     NULL, FLAGS, 0,				\
d625 2
a626 2
    /* sec_info_type, use_rela_p, has_tls_reloc, has_gp_reloc,       */ \
       0,	      0,	  0,		 0,			\
d628 1
a628 1
    /* need_finalize_relax, reloc_done,                              */ \
d631 5
a635 2
    /* vma, lma, size, rawsize                                       */	\
       0,   0,   0,    0,						\
d637 1
a637 1
    /* output_offset, output_section,              alignment_power,  */	\
d646 2
a647 2
    /* entsize, kept_section, moving_line_filepos,	           */	\
       0,       NULL,	      0,					\
a803 51
	bfd_get_section_by_name_if

SYNOPSIS
	asection *bfd_get_section_by_name_if
	  (bfd *abfd,
	   const char *name,
	   bfd_boolean (*func) (bfd *abfd, asection *sect, void *obj),
	   void *obj);

DESCRIPTION
	Call the provided function @@var{func} for each section
	attached to the BFD @@var{abfd} whose name matches @@var{name},
	passing @@var{obj} as an argument. The function will be called
	as if by

|	func (abfd, the_section, obj);

	It returns the first section for which @@var{func} returns true,
	otherwise <<NULL>>.

*/

asection *
bfd_get_section_by_name_if (bfd *abfd, const char *name,
			    bfd_boolean (*operation) (bfd *,
						      asection *,
						      void *),
			    void *user_storage)
{
  struct section_hash_entry *sh;
  unsigned long hash;

  sh = section_hash_lookup (&abfd->section_htab, name, FALSE, FALSE);
  if (sh == NULL)
    return NULL;

  hash = sh->root.hash;
  do
    {
      if ((*operation) (abfd, &sh->section, user_storage))
	return &sh->section;
      sh = (struct section_hash_entry *) sh->root.next;
    }
  while (sh != NULL && sh->root.hash == hash
	 && strcmp (sh->root.string, name) == 0);

  return NULL;
}

/*
FUNCTION
d948 6
a953 8
      /* We are making a section of the same name.  Put it in the
	 section hash table.  Even though we can't find it directly by a
	 hash lookup, we'll be able to find the section by traversing
	 sh->root.next quicker than looking at all the bfd sections.  */
      struct section_hash_entry *new_sh;
      new_sh = (struct section_hash_entry *)
	bfd_section_hash_newfunc (NULL, &abfd->section_htab, name);
      if (new_sh == NULL)
a954 4

      new_sh->root = sh->root;
      sh->root.next = &new_sh->root;
      newsect = &new_sh->section;
a1092 35
	bfd_sections_find_if

SYNOPSIS
	asection *bfd_sections_find_if
	  (bfd *abfd,
	   bfd_boolean (*operation) (bfd *abfd, asection *sect, void *obj),
	   void *obj);

DESCRIPTION
	Call the provided function @@var{operation} for each section
	attached to the BFD @@var{abfd}, passing @@var{obj} as an
	argument. The function will be called as if by

|	operation (abfd, the_section, obj);

	It returns the first section for which @@var{operation} returns true.

*/

asection *
bfd_sections_find_if (bfd *abfd,
		      bfd_boolean (*operation) (bfd *, asection *, void *),
		      void *user_storage)
{
  asection *sect;

  for (sect = abfd->sections; sect != NULL; sect = sect->next)
    if ((*operation) (abfd, sect, user_storage))
      break;

  return sect;
}

/*
FUNCTION
d1121 3
a1123 1
  ptr->size = val;
d1154 5
d1174 1
a1174 1
  sz = section->size;
d1254 3
a1256 1
  sz = section->rawsize ? section->rawsize : section->size;
a1287 30
	bfd_malloc_and_get_section

SYNOPSIS
	bfd_boolean bfd_malloc_and_get_section
	  (bfd *abfd, asection *section, bfd_byte **buf);

DESCRIPTION
	Read all data from @@var{section} in BFD @@var{abfd}
	into a buffer, *@@var{buf}, malloc'd by this function.
*/

bfd_boolean
bfd_malloc_and_get_section (bfd *abfd, sec_ptr sec, bfd_byte **buf)
{
  bfd_size_type sz = sec->rawsize ? sec->rawsize : sec->size;
  bfd_byte *p = NULL;

  *buf = p;
  if (sz == 0)
    return TRUE;

  p = bfd_malloc (sec->rawsize > sec->size ? sec->rawsize : sec->size);
  if (p == NULL)
    return FALSE;
  *buf = p;

  return bfd_get_section_contents (abfd, sec, p, 0, sz);
}
/*
FUNCTION
a1353 18
	bfd_generic_is_group_section

SYNOPSIS
	bfd_boolean bfd_generic_is_group_section (bfd *, const asection *sec);

DESCRIPTION
	Returns TRUE if @@var{sec} is a member of a group.
*/

bfd_boolean
bfd_generic_is_group_section (bfd *abfd ATTRIBUTE_UNUSED,
			      const asection *sec ATTRIBUTE_UNUSED)
{
  return FALSE;
}

/*
FUNCTION
@


1.66
log
@	* ChangeLog: Fix typos.
	* ecoff.c: Fix comment typos.
	* ecofflink.c: Likewise.
	* format.c: Likewise.
	* hp300hpux.c: Likewise.
	* i386linux.c: Likewise.
	* ieee.c: Likewise.
	* m68klinux.c: Likewise.
	* mach-o.h: Likewise.
	* mipsbsd.c: Likewise.
	* oasys.c: Likewise.
	* opncls.c: Likewise.
	* peXXigen.c: Likewise.
	* reloc.c: Likewise.
	* reloc16.c: Likewise.
	* section.c: Likewise.
	* simple.c: Likewise.
	* som.c: Likewise.
	* som.h: Likewise.
	* sparclinux.c: Likewise.
	* srec.c: Likewise.
	* syms.c: Likewise.
	* targets.c: Likewise.
	* tekhex.c: Likewise.
	* versados.c: Likewise.
	* vms-gsd.c: Likewise.
	* vms-hdr.c: Likewise.
	* vms-misc.c: Likewise.
	* xcofflink.c: Likewise.
	* xsym.h: Likewise.
	* bfd-in2.h: Regenerate.
@
text
@a1027 1
/*ARGSUSED*/
a1075 1
/*VARARGS2*/
@


1.65
log
@2003-11-03  Andrew Cagney  <cagney@@redhat.com>

	* section.c (bfd_set_section_contents): Make the "location" buffer
	constant.
	* bfd-in2.h: Re-generate.

Index: gdb/ChangeLog
2003-11-03  Andrew Cagney  <cagney@@redhat.com>

	* exec.c (xfer_memory): Eliminate xfer_fn.
@
text
@d1068 1
a1068 1
	This is the prefered method for iterating over sections; an
@


1.64
log
@Index: sim/frv/ChangeLog
2003-10-30  Andrew Cagney  <cagney@@redhat.com>

	* traps.c: Replace "struct symbol_cache_entry" with "struct
	bfd_symbol".

Index: sim/d10v/ChangeLog
2003-10-30  Andrew Cagney  <cagney@@redhat.com>

	* simops.c: Replace "struct symbol_cache_entry" with "struct
	bfd_symbol".

Index: sim/common/ChangeLog
2003-10-30  Andrew Cagney  <cagney@@redhat.com>

	* sim-trace.c, sim-base.h: Replace "struct symbol_cache_entry"
	with "struct bfd_symbol".

Index: ld/ChangeLog
2003-10-30  Andrew Cagney  <cagney@@redhat.com>

	* emultempl/pe.em, pe-dll.c: Replace "struct symbol_cache_entry"
	with "struct bfd_symbol".

Index: bfd/ChangeLog
2003-10-30  Andrew Cagney  <cagney@@redhat.com>

	* syms.c: Replace "struct symbol_cache_entry" with "struct
	bfd_symbol".
	* vms.h, targets.c, section.c, reloc.c, peicode.h: Ditto.
	* mipsbsd.c, elf.c, linker.c, elf-bfd.h, ecoff.c: Ditto.
	* cpu-z8k.c, cpu-ns32k.c, cpu-h8500.c, bfd.c, bfd-in.h: Ditto.
	* bfd-in2.h: Re-generate.
@
text
@d1135 2
a1136 2
	  (bfd *abfd, asection *section, void *data, file_ptr offset,
	   bfd_size_type count);
d1164 1
a1164 1
			  void *location,
@


1.63
log
@2003-10-23  Michael Snyder  <msnyder@@redhat.com>

        * section.c (asection): Fix typo in comment.
@
text
@d517 2
a518 2
.  struct symbol_cache_entry *symbol;
.  struct symbol_cache_entry **symbol_ptr_ptr;
d556 4
a559 4
.extern const struct symbol_cache_entry * const bfd_abs_symbol;
.extern const struct symbol_cache_entry * const bfd_com_symbol;
.extern const struct symbol_cache_entry * const bfd_und_symbol;
.extern const struct symbol_cache_entry * const bfd_ind_symbol;
d653 1
a653 1
       (struct symbol_cache_entry *) &global_syms[IDX],			\
d656 1
a656 1
       (struct symbol_cache_entry **) &SYM,				\
@


1.62
log
@2003-10-19  Andrew Cagney  <cagney@@redhat.com>

	* targets.c: Replace "struct sec" with "struct bfd_section"
	* syms.c, sparclynx.c, section.c, opncls.c: Ditto.
	* libcoff-in.h, libbfd-in.h, elfxx-target.h: Ditto.
	* elf.c, coffgen.c, bfd.c, bfd-in.h, aoutf1.h: Ditto.
	* aout-tic30.c, aout-target.h:
	* bfd-in2.h, libcoff.h, libbfd.h: Regenerate.

Index: binutils/ChangeLog
2003-10-19  Andrew Cagney  <cagney@@redhat.com>

	* coffgrok.h (coff_section): Replace 'struct sec" with "struct
	bfd_section".

Index: gdb/ChangeLog
2003-10-19  Andrew Cagney  <cagney@@redhat.com>

	* symtab.c: Replace "struct sec" with "struct bfd_section".
	* objfiles.c, linespec.c, blockframe.c, block.c: Ditto.

Index: ld/ChangeLog
2003-10-19  Andrew Cagney  <cagney@@redhat.com>

	* pe-dll.c: Replace "struct sec" with "struct bfd_section".

Index: sim/common/ChangeLog
2003-10-19  Andrew Cagney  <cagney@@redhat.com>

	* sim-base.h: Replace "struct sec" with "struct bfd_section".
@
text
@d405 1
a405 1
.  {* Usused bits.  *}
@


1.61
log
@	* section.c (bfd_get_section_size_before_reloc): Ignore reloc_done.
	* bfd-in2.h: Regenerate.
@
text
@d169 1
a169 1
.typedef struct sec
d182 1
a182 1
.  struct sec *next;
d448 1
a448 1
.  struct sec *output_section;
d498 1
a498 1
.  struct sec *kept_section;
d638 1
a638 1
       0,             (struct sec *) &SEC, 0,				\
@


1.60
log
@bfd/

2003-07-25  H.J. Lu  <hongjiu.lu@@intel.com>

	* elf-bfd.h (bfd_elf_special_section): New.
	(elf_backend_data): Add special_sections, a pointer to
	bfd_elf_special_section.
	(elf_section_type). New.
	(elf_section_flags): New.
	(_bfd_elf_get_sec_type_attr): New.

	* elf.c (_bfd_elf_make_section_from_shdr): Always use the
	real section type/flags.
	(special_sections): New.
	(get_special_section): New.
	(_bfd_elf_get_sec_type_attr): New.
	(_bfd_elf_new_section_hook): Check special_section to set
	elf_section_type and elf_section_flags.
	(elf_fake_sections): Don't use section name to set ELF section
	data.

	* elf32-m32r.c (m32r_elf_special_sections): New.
	(elf_backend_special_sections): Defined.

	* elf32-m68hc11.c (elf32_m68hc11_special_sections): New.
	(elf_backend_special_sections): Defined.

	* elf32-mcore.c (mcore_elf_special_sections): New.
	(elf_backend_special_sections): Defined.

	* elf32-ppc.c (ppc_elf_special_sections): New.
	(elf_backend_special_sections): Defined.

	* elf32-sh64.c (sh64_elf_special_sections): New.
	(elf_backend_special_sections): Defined.

	* elf32-v850.c (v850_elf_special_sections): New.
	(elf_backend_special_sections): Defined.

	* elf32-xtensa.c (elf_xtensa_special_sections): New.
	(elf_backend_special_sections): Defined.

	* elf64-alpha.c (elf64_alpha_special_sections): New.
	(elf_backend_special_sections): Defined.

	* elf64-hppa.c (elf64_hppa_special_sections): New.
	(elf_backend_special_sections): Defined.

	* elf64-ppc.c (ppc64_elf_special_sections): New.
	(elf_backend_special_sections): Defined.

	* elf64-sh64.c (sh64_elf64_special_sections): New.
	(elf_backend_special_sections): Defined.

	* elfxx-ia64.c (elfNN_ia64_special_sections): New.
	(elf_backend_special_sections): Defined.

	* elfxx-mips.c (_bfd_mips_elf_special_sections): New.

	* elfxx-mips.h (_bfd_mips_elf_special_sections): New.
	(elf_backend_special_sections): Defined.

	* elfxx-target.h (elf_backend_special_sections): New. Default
	to NULL.
	(elfNN_bed): Initialize special_sections.

	* section.c (bfd_abs_section): Remove const.
	(bfd_und_section): Likewise.
	(bfd_com_section): Likewise.
	(bfd_ind_section): Likewise.

gas/

2003-07-25  H.J. Lu  <hongjiu.lu@@intel.com>

	* config/obj-elf.c (special_sections): Removed.
	(obj_elf_change_section): Call _bfd_elf_get_sec_type_attr. Set
	elf_section_type and elf_section_flags.
	(elf_frob_file): Set SHT_GROUP.

	* config/obj-elf.h (obj_sec_set_private_data): New.

	* config/tc-alpha.h (ELF_TC_SPECIAL_SECTIONS): Removed.
	* config/tc-ia64.h: Likewise.
	* config/tc-m32r.h: Likewise.
	* config/tc-m68hc11.h: Likewise.
	* config/tc-mcore.h: Likewise.
	* config/tc-mips.h: Likewise.
	* config/tc-ppc.h: Likewise.
	* config/tc-sh64.h: Likewise.
	* config/tc-v850.h: Likewise.
	* config/tc-xtensa.h: Likewise.

	* config/tc-v850.h (SHF_V850_GPREL): Removed.
	(SHF_V850_EPREL): Likewise.
	(SHF_V850_R0REL): Likewise.

	* subsegs.c (subseg_get): Call obj_sec_set_private_data if it
	is defined.

include/elf/

2003-07-25  H.J. Lu  <hongjiu.lu@@intel.com>

	* v850.h (SHF_V850_GPREL): New.
	(SHF_V850_EPREL): Likewise.
	(SHF_V850_R0REL): Likewise.
@
text
@d561 1
a561 2
.     ((section)->reloc_done ? (abort (), (bfd_size_type) 1) \
.                            : (section)->_raw_size)
@


1.59
log
@	* elfcode.h (elf_object_p): Allocate tdata via _bfd_set_format.
	* elfcore.h (elf_core_file_p): Likewise.
	* section.c (bfd_section_init): Remove prototype.
@
text
@d535 1
a535 1
.extern const asection bfd_abs_section;
d539 1
a539 1
.extern const asection bfd_und_section;
d543 1
a543 1
.extern const asection bfd_com_section;
d546 1
a546 1
.extern const asection bfd_ind_section;
d619 1
a619 1
  const asection SEC = 							\
@


1.58
log
@	* section.c (bfd_make_section): Return NULL for existing section.
@
text
@a707 2
static asection *bfd_section_init PARAMS ((bfd *, asection *));

@


1.57
log
@Convert to C90 and a few tweaks.
@
text
@d1004 1
a1004 1
      return newsect;
@


1.56
log
@bfd/

2003-06-17  H.J. Lu <hongjiu.lu@@intel.com>

	* section.c (struct sec): Put back kept_section.
	(STD_SECTION): Put back kept_section initialization.
	* bfd-in2.h: Regenerate.

	* elflink.h (elf_link_input_bfd): Also check discarded linkonce
	sections for relocateable output. Use kept_section to preserve
	debug information discarded by linkonce.

ld/

2003-06-17  H.J. Lu <hongjiu.lu@@intel.com>

	* ldlang.c (section_already_linked): Put back assignment of
	kept_section.
@
text
@d478 1
a478 1
.  PTR userdata;
d507 1
a507 1
.  PTR used_by_bfd;
d679 3
a681 4
bfd_section_hash_newfunc (entry, table, string)
     struct bfd_hash_entry *entry;
     struct bfd_hash_table *table;
     const char *string;
d696 2
a697 4
    {
      memset ((PTR) &((struct section_hash_entry *) entry)->section,
	      0, sizeof (asection));
    }
d711 1
a711 3
bfd_section_init (abfd, newsect)
     bfd *abfd;
     asection *newsect;
d766 1
a766 2
bfd_section_list_clear (abfd)
     bfd *abfd;
d771 1
a771 1
  memset ((PTR) abfd->section_htab.table, 0,
d780 1
a780 1
	asection *bfd_get_section_by_name(bfd *abfd, const char *name);
d794 1
a794 3
bfd_get_section_by_name (abfd, name)
     bfd *abfd;
     const char *name;
d810 2
a811 3
	char *bfd_get_unique_section_name(bfd *abfd,
					  const char *templat,
					  int *count);
d822 1
a822 4
bfd_get_unique_section_name (abfd, templat, count)
     bfd *abfd;
     const char *templat;
     int *count;
d829 1
a829 1
  sname = bfd_malloc ((bfd_size_type) len + 8);
d856 1
a856 1
	asection *bfd_make_section_old_way(bfd *abfd, const char *name);
d877 1
a877 3
bfd_make_section_old_way (abfd, name)
     bfd *abfd;
     const char *name;
d920 1
a920 1
	asection *bfd_make_section_anyway(bfd *abfd, const char *name);
d933 1
a933 3
bfd_make_section_anyway (abfd, name)
     bfd *abfd;
     const char *name;
d955 1
a955 1
      newsect = (asection *) bfd_zalloc (abfd, sizeof (asection));
d969 1
a969 1
	asection *bfd_make_section(bfd *, const char *name);
d979 1
a979 3
bfd_make_section (abfd, name)
     bfd *abfd;
     const char *name;
d1016 2
a1017 1
	bfd_boolean bfd_set_section_flags (bfd *abfd, asection *sec, flagword flags);
d1033 3
a1035 4
bfd_set_section_flags (abfd, section, flags)
     bfd *abfd ATTRIBUTE_UNUSED;
     sec_ptr section;
     flagword flags;
d1059 4
a1062 5
	void bfd_map_over_sections(bfd *abfd,
				   void (*func) (bfd *abfd,
						asection *sect,
						PTR obj),
				   PTR obj);
d1069 1
a1069 1
|	func(abfd, the_section, obj);
d1076 1
a1076 1
|	      func(abfd, p, ...)
d1082 3
a1084 4
bfd_map_over_sections (abfd, operation, user_storage)
     bfd *abfd;
     void (*operation) PARAMS ((bfd * abfd, asection * sect, PTR obj));
     PTR user_storage;
d1101 2
a1102 1
	bfd_boolean bfd_set_section_size (bfd *abfd, asection *sec, bfd_size_type val);
d1115 1
a1115 4
bfd_set_section_size (abfd, ptr, val)
     bfd *abfd;
     sec_ptr ptr;
     bfd_size_type val;
d1137 3
a1139 3
	bfd_boolean bfd_set_section_contents (bfd *abfd, asection *section,
					      PTR data, file_ptr offset,
					      bfd_size_type count);
d1159 4
a1162 4
#define bfd_get_section_size_now(abfd,sec) \
(sec->reloc_done \
 ? bfd_get_section_size_after_reloc (sec) \
 : bfd_get_section_size_before_reloc (sec))
d1165 5
a1169 6
bfd_set_section_contents (abfd, section, location, offset, count)
     bfd *abfd;
     sec_ptr section;
     PTR location;
     file_ptr offset;
     bfd_size_type count;
d1209 1
a1209 1
      && location != (PTR) (section->contents + offset))
d1227 3
a1229 3
	bfd_boolean bfd_get_section_contents (bfd *abfd, asection *section,
					      PTR location, file_ptr offset,
					      bfd_size_type count);
d1245 5
a1249 6
bfd_get_section_contents (abfd, section, location, offset, count)
     bfd *abfd;
     sec_ptr section;
     PTR location;
     file_ptr offset;
     bfd_size_type count;
d1296 2
a1297 2
	bfd_boolean bfd_copy_private_section_data (bfd *ibfd, asection *isec,
						   bfd *obfd, asection *osec);
d1319 1
a1319 1
	(struct bfd_link_info *info, asection *section);
d1330 1
a1330 3
_bfd_strip_section_from_output (info, s)
     struct bfd_link_info *info;
     asection *s;
d1369 2
a1370 3
bfd_generic_discard_group (abfd, group)
     bfd *abfd ATTRIBUTE_UNUSED;
     asection *group ATTRIBUTE_UNUSED;
@


1.55
log
@	* elf64-ppc.c: Move TARGET_LITTLE_SYM and other macros used by
	elfxx-target.h so that we can use elf_backend_got_header_size.
	(ELF_MACHINE_ALT1, ELF_MACHINE_ALT2): Delete.
	(GLINK_CALL_STUB_SIZE): Modify.  Define new glink call stub and
	associated macros.
	(ppc64_elf_howto_raw <GOT_TPREL16_DS, GOT_TPREL16_LO_DS>): Correct
	dst_mask.
	(enum ppc_stub_type): Add ppc_stub_long_branch_r2off and
	ppc_stub_plt_branch_r2off.
	(struct ppc_stub_hash_entry): Reorganize.
	(struct ppc_link_hash_table): Add no_multi_toc, multi_toc_needed,
	toc_curr, toc_off and emit_stub_syms.
	(ppc64_elf_link_hash_table_create): Init them.
	(ppc_stub_name): Correct string size.
	(ppc64_elf_check_relocs): Set has_gp_reloc on GOT and TOC relocs.
	(ppc64_elf_size_dynamic_sections): Set no_multi_toc if GOT entries
	used.
	(ppc_type_of_stub): Tweak root.type test.
	(build_plt_stub): Remove glink code.  Adjust for insn macro changes.
	(ppc_size_one_stub): Handle ppc_stub_long_branch_r2off and
	ppc_stub_plt_branch_r2off.
	(ppc_build_one_stub): Likewise.  Fix var shadowing.  Correct addis,addi
	range test.  Use toc_off to calculte r2 values.  Handle emit_stub_syms.
	(ppc64_elf_setup_section_lists): Remove htab creator flavour test.
	Initialize elf_gp and toc_curr.
	(ppc64_elf_next_toc_section, ppc64_elf_reinit_toc): New functions.
	(ppc64_elf_next_input_section): Set toc_off.
	(group_sections): Ensure groups have the same TOC.
	(ppc64_elf_size_stubs): Check whether we need a TOC adjusting stub.
	(ppc64_elf_build_stubs): Add emit_stub_syms param, and stash in htab.
	Build new glink stub.
	(ppc64_elf_relocate_section): Handle multiple TOCs.  Fix comments.
	(ppc64_elf_finish_dynamic_sections): Adjust DT_PPC64_GLINK.
	* elf64-ppc.h (ppc64_elf_build_stubs): Update prototype.
	(ppc64_elf_next_toc_section, ppc64_elf_reinit_toc): Declare.
	* section.c (struct sec): Rename flag12 to has_gp_reloc.
	(STD_SECTION): Update.
	* ecoff.c (bfd_debug_section): Update comment.
	* bfd-in2.h: Regenerate.
@
text
@d496 4
d647 2
a648 2
    /* entsize, comdat, moving_line_filepos,                         */	\
       0,       NULL,   0,						\
@


1.54
log
@bfd/

2003-04-28  H.J. Lu <hjl@@gnu.org>

	* elfxx-ia64.c (elfNN_ia64_relax_section): Relax ldxmov during
	the relax finalize pass.

	* section.c (struct sec): Add need_finalize_relax and remove
	flag11.
	(STD_SECTION): Update struct sec initializer.
	* bfd-in2.h: Regenerated.

include/

2003-04-28  H.J. Lu <hjl@@gnu.org>

	* bfdlink.h (bfd_link_info): Add relax_finalizing.

ld/

2003-04-28  H.J. Lu <hjl@@gnu.org>

	* ldlang.c (lang_process): Add the relax finalize pass.

	* ldmain.c (main): Initialize link_info.relax_finalizing to
	FALSE.
@
text
@d402 3
a405 1
.  unsigned int flag12:1;
d622 5
a626 2
    /* sec_info_type, use_rela_p, has_tls_reloc, need_finalize_relax, flag12,     */ \
       0,	      0,	  0,		 0,		      0,		\
@


1.53
log
@bfd
	* elf-bfd.h (enum elf_link_info_type): Remove.
	(struct bfd_elf_section_data): Move sec_info_type, use_rela_p fields
	to struct sec.  Remove linkonce_p field.
	(elf_linkonce_p): Delete.
	(elf_discarded_section): Update for sec_info_type change.
	* section.c (struct sec): Add sec_info_type, use_rela_p, has_tls_reloc,
	flag11, flag12, flag13, flag14, flag15, flag16, flag20, flag24.
	(ELF_INFO_TYPE_NONE): Define.
	(ELF_INFO_TYPE_STABS): Define.
	(ELF_INFO_TYPE_MERGE): Define.
	(ELF_INFO_TYPE_EH_FRAME): Define.
	(ELF_INFO_TYPE_JUST_SYMS): Define.
	(STD_SECTION): Update struct sec initializer.
	* ecoff.c (bfd_debug_section): Likewise.
	* elf.c: Likewise.  Update occurrences of sec_info_type and use_rela_p.
	* elflink.h: Likewise.
	* elf-eh-frame.c: Likewise.
	* elf64-alpha.c: Likewise.
	* elfxx-ia64.c: Likewise.
	* elfxx-mips.c: Likewise.
	* bfd-in2.h: Regenerate.

	* elf32-sparc.c (sec_do_relax): Use elf_section_data macro rather than
	referring to used_by_bfd.
	* elf64-sparc.c (sec_do_relax): Likewise.
	* elf64-mmix.c (mmix_elf_section_data): Likewise.
	* elfxx-mips.c (mips_elf_section_data): Likewise.
	* ieee.c (ieee_slurp_section_data): Use ieee_per_section macro.
	(ieee_get_section_contents): Likewise.
	(ieee_new_section_hook): Formatting.
	(ieee_canonicalize_reloc): Remove commented out code.
	* mmo.c (mmo_section_data): Define.  Use throughout file.
	* oasys.c (oasys_get_section_contents): Use oasys_per_section macro.

gas
	* config/obj-elf.c (obj_elf_change_section): Set SEC_LINK_ONCE and
	SEC_LINK_DUPLICATES_DISCARD directly rather than using elf_linkonce_p.
@
text
@d399 3
a402 1
.  unsigned int flag11:1;
d620 2
a621 2
    /* sec_info_type, use_rela_p, has_tls_reloc, flag11, flag12,     */ \
       0,	      0,	  0,		 0,	 0,		\
@


1.53.16.1
log
@Merge from mainline.
@
text
@a398 3
.  {* Nonzero if this section needs the relax finalize pass.  *}
.  unsigned int need_finalize_relax:1;
.
d400 1
d618 2
a619 2
    /* sec_info_type, use_rela_p, has_tls_reloc, need_finalize_relax, flag12,     */ \
       0,	      0,	  0,		 0,		      0,		\
@


1.53.18.1
log
@	Merge from mainline:
	2003-04-28  H.J. Lu <hjl@@gnu.org>
	* elfxx-ia64.c (elfNN_ia64_relax_section): Relax ldxmov during
	the relax finalize pass.

	* section.c (struct sec): Add need_finalize_relax and remove
	flag11.
	(STD_SECTION): Update struct sec initializer.
	* bfd-in2.h: Regenerated.

	2003-04-28  H.J. Lu <hjl@@gnu.org>
	* elflink.h (elf_merge_symbol): Call elf_backend_copy_indirect_symbol
	to copy any information related to dynamic linking when we flip
	the indirection.

	2003-04-27  H.J. Lu <hjl@@gnu.org>
	* elf-bfd.h (ELF_LINK_DYNAMIC_DEF): New.
	(ELF_LINK_DYNAMIC_WEAK): New.

	* elflink.h (elf_merge_symbol): Add one argument to indicate if
	a symbol should be skipped. Ignore definitions in dynamic
	objects for symbols with non-default visibility.
	(elf_add_default_symbol): Adjusted.
	(elf_link_add_object_symbols): Check if a symbol should be
	skipped. Don't merge the visibility field with the one from
	a dynamic object.
	(elf_link_check_versioned_symbol): Use undef_bfd.
	(elf_link_output_extsym): Warn if a forced local symbol is
	referenced from dynamic objects. Make non-weak undefined symbol
	with non-default visibility a fatal error.
@
text
@a398 3
.  {* Nonzero if this section needs the relax finalize pass.  *}
.  unsigned int need_finalize_relax:1;
.
d400 1
d618 2
a619 2
    /* sec_info_type, use_rela_p, has_tls_reloc, need_finalize_relax, flag12,     */ \
       0,	      0,	  0,		 0,		      0,		\
@


1.52
log
@s/boolean/bfd_boolean/ s/true/TRUE/ s/false/FALSE/.  Simplify
comparisons of bfd_boolean vars with TRUE/FALSE.  Formatting.
@
text
@d3 1
a3 1
   2000, 2001, 2002
d380 3
a382 2
.  {* Used by the ELF code to mark sections which have been allocated
.     to segments.  *}
d385 24
d617 6
@


1.51
log
@	* aoutx.h (NAME(aout,swap_ext_reloc_in)): Cast bytes->r_index to
	unsigned int.  Cast RELOC_BASE10, RELOC_BASE13 and RELOC_BASE22 to
	unsigned int.
	(NAME(aout,final_link)): Cast enum used in assignment.
	(aout_link_write_symbols): Cast enums in comparisons, int values to
	boolean, enums in assignments to int.
	(aout_link_input_section_std): Cast rel->r_index to unsigned int.
	(aout_link_input_section_ext): Likewise.  Cast enums used in comparisons
	with unsigned ints.
	(aout_link_reloc_link_order): Cast enum to int in assignment.
	* archive.c (_bfd_generic_read_ar_hdr_mag): Cast result of memchr
	calls to char *.
	* bfd-in.h (bfd_set_section_vma): Cast enum true to unsigned int in
	assignment.
	* bfd-in2.h (bfd_set_section_vma): Likewise.
	* bfd.c (bfd_record_phdr): Cast enums in assignments.
	* binary.c (bfd_alloc): Cast enum to long.
	* coffgen.c (_bfd_coff_is_local_label_name): Cast return to boolean.
	* dwarf2.c (read_abbrevs): Add casts to enum types.
	(read_attribute_value): Likewise.
	(arange_add): Cast result of bfd_zalloc call.
	(comp_unit_contains_address): Return true and false.
	(comp_unit_find_nearest_line): Cast return to boolean.
	* format.c (bfd_check_format_matches, bfd_set_format): Likewise.
	* gen-aout.c: define macro '_' if not defined.
	* libbfd.c (bfd_realloc): Cast malloc and realloc to PTR.
	(bfd_bwrite): Cast bfd_realloc to bfd_byte *.
	(bfd_write_bigendian_4byte_int): Cast return to boolean.
	(bfd_seek): Cast bfd_realloc to bfd_byte *.
	(bfd_generic_is_local_label_name): Cast return to boolean.
	* libcoff.h (_bfd_coff_adjust_symndx): Remove extraneous '\'.
	* linker.c (_bfd_link_hash_newfunc): Cast bfd_hash_allocate result to
	struct bfd_hash_entry *.
	(_bfd_generic_link_hash_newfunc): likewise.
	(_bfd_generic_final_link): Cast enum to unsigned int.
	* merge.c (sec_merge_emit): Cast return to boolean.
	(merge_strings): Add casts to const unsigned char *.
	* reloc.c (bfd_get_reloc_code_name): Cast enums in comparison to int.
	(bfd_generic_get_relocated_section_content): Cast enum to unsigned int.
	* section.c (bfd_section_hash_newfunc): Cast bfd_hash_allocate result to
	struct bfd_hash_entry *.
	(bfd_set_section_content): Add cast to PTR in comparison.
	* simple.c (simple_dummy_warning, simple_dummy_undefined_symbol,
	simple_dummy_reloc_overflow, simple_dummy_reloc_dangerous,
	simple_dummy_unattached_reloc,
	bfd_simple_get_relocated_section_contents): Add K&R declarations and
	function definitions.
	* srec.c (S3Forced): Initialize to false.
	(srec_get_symtab): Cast return value from bfd_alloc to asymbol *.
	* stabs.c (_bfd_link_section_stabs): Cast enum to int in comparisons.
	(_bfd_discard_section_stabs): Likewise.  Also cast return to boolean.
	* syms.c (bfd_is_undefined_symclass): Cast return to boolean.
	(_bfd_stab_section_find_nearest_line): Cast enum to bfd_byte in
	comparisons.
@
text
@d764 1
a764 1
  sh = section_hash_lookup (&abfd->section_htab, name, false, false);
d814 1
a814 1
  while (section_hash_lookup (&abfd->section_htab, sname, false, false));
d872 1
a872 1
  sh = section_hash_lookup (&abfd->section_htab, name, true, false);
d918 1
a918 1
  sh = section_hash_lookup (&abfd->section_htab, name, true, false);
d972 1
a972 1
  sh = section_hash_lookup (&abfd->section_htab, name, true, false);
d992 1
a992 1
	boolean bfd_set_section_flags(bfd *abfd, asection *sec, flagword flags);
d996 2
a997 2
	@@var{abfd} to the value @@var{flags}. Return <<true>> on success,
	<<false>> on error. Possible error returns are:
d1007 1
a1007 1
boolean
d1022 1
a1022 1
      return false;
d1027 1
a1027 1
  return true;
d1079 1
a1079 1
	boolean bfd_set_section_size(bfd *abfd, asection *sec, bfd_size_type val);
d1083 1
a1083 1
	ok, then <<true>> is returned, else <<false>>.
d1091 1
a1091 1
boolean
d1103 1
a1103 1
      return false;
d1109 1
a1109 1
  return true;
d1117 3
a1119 3
	boolean bfd_set_section_contents (bfd *abfd, asection *section,
					  PTR data, file_ptr offset,
					  bfd_size_type count);
d1127 1
a1127 1
	Normally <<true>> is returned, else <<false>>. Possible error
d1144 1
a1144 1
boolean
d1157 1
a1157 1
      return (false);
d1167 1
a1167 1
      return false;
d1175 1
a1175 1
      return false;
d1184 1
a1184 1
      abfd->output_has_begun = true;
d1196 2
a1197 2
      abfd->output_has_begun = true;
      return true;
d1200 1
a1200 1
  return false;
d1208 3
a1210 3
	boolean bfd_get_section_contents (bfd *abfd, asection *section,
					  PTR location, file_ptr offset,
					  bfd_size_type count);
d1221 2
a1222 2
	with zeroes. If no errors occur, <<true>> is returned, else
	<<false>>.
d1225 1
a1225 1
boolean
d1238 1
a1238 1
      return true;
d1241 1
a1241 1
  /* Even if reloc_done is true, this function reads unrelocated
d1250 1
a1250 1
      return false;
d1255 1
a1255 1
    return true;
d1260 1
a1260 1
      return true;
d1266 1
a1266 1
      return true;
d1278 2
a1279 2
	boolean bfd_copy_private_section_data (bfd *ibfd, asection *isec,
					       bfd *obfd, asection *osec);
d1284 1
a1284 1
	Return <<true>> on success, <<false>> on error.  Possible error
d1346 1
a1346 1
	boolean bfd_generic_discard_group (bfd *abfd, asection *group);
d1352 1
a1352 1
boolean
d1357 1
a1357 1
  return true;
@


1.50
log
@	* section.c (_bfd_strip_section_from_output):  Remove unnecessary
	link order code.  Don't actually remove the output section here;
	Just set a flag for the linker to do so.
	* elflink.c (_bfd_elf_link_renumber_dynsyms): Test for removed
	sections when setting up output section dynsyms.
@
text
@d646 2
a647 1
      entry = bfd_hash_allocate (table, sizeof (struct section_hash_entry));
d1190 1
a1190 1
      && location != section->contents + offset)
@


1.50.14.1
log
@Merge drow-cplus-branch to:
  cvs rtag -D 2003-12-14 00:00:00 UTC drow-cplus-merge-20031214 gdb+dejagnu
@
text
@d3 1
a3 1
   2000, 2001, 2002, 2003
d169 1
a169 1
.typedef struct bfd_section
d182 1
a182 1
.  struct bfd_section *next;
d380 2
a381 3
.  {* The following flags are used by the ELF linker. *}
.
.  {* Mark sections which have been allocated to segments.  *}
a383 28
.  {* Type of sec_info information.  *}
.  unsigned int sec_info_type:3;
.#define ELF_INFO_TYPE_NONE      0
.#define ELF_INFO_TYPE_STABS     1
.#define ELF_INFO_TYPE_MERGE     2
.#define ELF_INFO_TYPE_EH_FRAME  3
.#define ELF_INFO_TYPE_JUST_SYMS 4
.
.  {* Nonzero if this section uses RELA relocations, rather than REL.  *}
.  unsigned int use_rela_p:1;
.
.  {* Bits used by various backends.  *}
.  unsigned int has_tls_reloc:1;
.
.  {* Nonzero if this section needs the relax finalize pass.  *}
.  unsigned int need_finalize_relax:1;
.
.  {* Nonzero if this section has a gp reloc.  *}
.  unsigned int has_gp_reloc:1;
.
.  {* Unused bits.  *}
.  unsigned int flag13:1;
.  unsigned int flag14:1;
.  unsigned int flag15:1;
.  unsigned int flag16:4;
.  unsigned int flag20:4;
.  unsigned int flag24:8;
.
d419 1
a419 1
.  struct bfd_section *output_section;
d449 1
a449 1
.  void *userdata;
a466 4
.  {* Points to the kept section if this section is a link-once section,
.     and is discarded.  *}
.  struct bfd_section *kept_section;
.
d474 1
a474 1
.  void *used_by_bfd;
d484 2
a485 2
.  struct bfd_symbol *symbol;
.  struct bfd_symbol **symbol_ptr_ptr;
d502 1
a502 1
.extern asection bfd_abs_section;
d506 1
a506 1
.extern asection bfd_und_section;
d510 1
a510 1
.extern asection bfd_com_section;
d513 1
a513 1
.extern asection bfd_ind_section;
d523 4
a526 4
.extern const struct bfd_symbol * const bfd_abs_symbol;
.extern const struct bfd_symbol * const bfd_com_symbol;
.extern const struct bfd_symbol * const bfd_und_symbol;
.extern const struct bfd_symbol * const bfd_ind_symbol;
d528 2
a529 1
.     ((section)->_raw_size)
d586 1
a586 1
  asection SEC = 							\
a592 9
    /* sec_info_type, use_rela_p, has_tls_reloc,                     */ \
       0,	      0,	  0,					\
									\
    /* need_finalize_relax, has_gp_reloc,                            */ \
       0,		    0,						\
									\
    /* flag13, flag14, flag15, flag16, flag20, flag24,               */ \
       0,      0,      0,      0,      0,      0,			\
									\
d597 1
a597 1
       0,             (struct bfd_section *) &SEC, 0,			\
d605 2
a606 2
    /* entsize, comdat, kept_section, moving_line_filepos,           */	\
       0,       NULL,   NULL,	      0,				\
d612 1
a612 1
       (struct bfd_symbol *) &global_syms[IDX],				\
d615 1
a615 1
       (struct bfd_symbol **) &SYM,					\
d637 4
a640 3
bfd_section_hash_newfunc (struct bfd_hash_entry *entry,
			  struct bfd_hash_table *table,
			  const char *string)
d646 1
a646 2
      entry = (struct bfd_hash_entry *)
	bfd_hash_allocate (table, sizeof (struct section_hash_entry));
d654 4
a657 2
    memset (&((struct section_hash_entry *) entry)->section, 0,
	    sizeof (asection));
d668 2
d671 3
a673 1
bfd_section_init (bfd *abfd, asection *newsect)
d728 2
a729 1
bfd_section_list_clear (bfd *abfd)
d734 1
a734 1
  memset (abfd->section_htab.table, 0,
d743 1
a743 1
	asection *bfd_get_section_by_name (bfd *abfd, const char *name);
d757 3
a759 1
bfd_get_section_by_name (bfd *abfd, const char *name)
d763 1
a763 1
  sh = section_hash_lookup (&abfd->section_htab, name, FALSE, FALSE);
d775 3
a777 2
	char *bfd_get_unique_section_name
	  (bfd *abfd, const char *templat, int *count);
d788 4
a791 1
bfd_get_unique_section_name (bfd *abfd, const char *templat, int *count)
d798 1
a798 1
  sname = bfd_malloc (len + 8);
d813 1
a813 1
  while (section_hash_lookup (&abfd->section_htab, sname, FALSE, FALSE));
d825 1
a825 1
	asection *bfd_make_section_old_way (bfd *abfd, const char *name);
d846 3
a848 1
bfd_make_section_old_way (bfd *abfd, const char *name)
d871 1
a871 1
  sh = section_hash_lookup (&abfd->section_htab, name, TRUE, FALSE);
d891 1
a891 1
	asection *bfd_make_section_anyway (bfd *abfd, const char *name);
d904 3
a906 1
bfd_make_section_anyway (bfd *abfd, const char *name)
d917 1
a917 1
  sh = section_hash_lookup (&abfd->section_htab, name, TRUE, FALSE);
d928 1
a928 1
      newsect = bfd_zalloc (abfd, sizeof (asection));
d942 1
a942 1
	asection *bfd_make_section (bfd *, const char *name);
d952 3
a954 1
bfd_make_section (bfd *abfd, const char *name)
d971 1
a971 1
  sh = section_hash_lookup (&abfd->section_htab, name, TRUE, FALSE);
d979 1
a979 1
      return NULL;
d991 1
a991 2
	bfd_boolean bfd_set_section_flags
	  (bfd *abfd, asection *sec, flagword flags);
d995 2
a996 2
	@@var{abfd} to the value @@var{flags}. Return <<TRUE>> on success,
	<<FALSE>> on error. Possible error returns are:
d1005 6
a1010 4
bfd_boolean
bfd_set_section_flags (bfd *abfd ATTRIBUTE_UNUSED,
		       sec_ptr section,
		       flagword flags)
d1021 1
a1021 1
      return FALSE;
d1026 1
a1026 1
  return TRUE;
d1034 5
a1038 4
	void bfd_map_over_sections
	  (bfd *abfd,
	   void (*func) (bfd *abfd, asection *sect, void *obj),
	   void *obj);
d1045 1
a1045 1
|	func (abfd, the_section, obj);
d1047 1
a1047 1
	This is the preferred method for iterating over sections; an
d1052 1
a1052 1
|	      func (abfd, p, ...)
d1056 1
d1058 4
a1061 3
bfd_map_over_sections (bfd *abfd,
		       void (*operation) (bfd *, asection *, void *),
		       void *user_storage)
d1078 1
a1078 2
	bfd_boolean bfd_set_section_size
	  (bfd *abfd, asection *sec, bfd_size_type val);
d1082 1
a1082 1
	ok, then <<TRUE>> is returned, else <<FALSE>>.
d1090 5
a1094 2
bfd_boolean
bfd_set_section_size (bfd *abfd, sec_ptr ptr, bfd_size_type val)
d1102 1
a1102 1
      return FALSE;
d1108 1
a1108 1
  return TRUE;
d1116 3
a1118 3
	bfd_boolean bfd_set_section_contents
	  (bfd *abfd, asection *section, const void *data,
	   file_ptr offset, bfd_size_type count);
d1126 1
a1126 1
	Normally <<TRUE>> is returned, else <<FALSE>>. Possible error
d1138 12
a1149 11
#define bfd_get_section_size_now(abfd, sec) \
  (sec->reloc_done \
   ? bfd_get_section_size_after_reloc (sec) \
   : bfd_get_section_size_before_reloc (sec))

bfd_boolean
bfd_set_section_contents (bfd *abfd,
			  sec_ptr section,
			  const void *location,
			  file_ptr offset,
			  bfd_size_type count)
d1156 1
a1156 1
      return FALSE;
d1166 1
a1166 1
      return FALSE;
d1174 1
a1174 1
      return FALSE;
d1183 1
a1183 1
      abfd->output_has_begun = TRUE;
d1195 2
a1196 2
      abfd->output_has_begun = TRUE;
      return TRUE;
d1199 1
a1199 1
  return FALSE;
d1207 3
a1209 3
	bfd_boolean bfd_get_section_contents
	  (bfd *abfd, asection *section, void *location, file_ptr offset,
	   bfd_size_type count);
d1220 2
a1221 2
	with zeroes. If no errors occur, <<TRUE>> is returned, else
	<<FALSE>>.
d1224 7
a1230 6
bfd_boolean
bfd_get_section_contents (bfd *abfd,
			  sec_ptr section,
			  void *location,
			  file_ptr offset,
			  bfd_size_type count)
d1237 1
a1237 1
      return TRUE;
d1240 1
a1240 1
  /* Even if reloc_done is TRUE, this function reads unrelocated
d1249 1
a1249 1
      return FALSE;
d1254 1
a1254 1
    return TRUE;
d1259 1
a1259 1
      return TRUE;
d1265 1
a1265 1
      return TRUE;
d1277 2
a1278 2
	bfd_boolean bfd_copy_private_section_data
	  (bfd *ibfd, asection *isec, bfd *obfd, asection *osec);
d1283 1
a1283 1
	Return <<TRUE>> on success, <<FALSE>> on error.  Possible error
d1300 1
a1300 1
	  (struct bfd_link_info *info, asection *section);
d1311 3
a1313 1
_bfd_strip_section_from_output (struct bfd_link_info *info, asection *s)
d1345 1
a1345 1
	bfd_boolean bfd_generic_discard_group (bfd *abfd, asection *group);
d1351 4
a1354 3
bfd_boolean
bfd_generic_discard_group (bfd *abfd ATTRIBUTE_UNUSED,
			   asection *group ATTRIBUTE_UNUSED)
d1356 1
a1356 1
  return TRUE;
@


1.50.2.1
log
@Merge from mainline.
@
text
@d646 1
a646 2
      entry = (struct bfd_hash_entry *)
	bfd_hash_allocate (table, sizeof (struct section_hash_entry));
d1189 1
a1189 1
      && location != (PTR) (section->contents + offset))
@


1.50.12.1
log
@2002-10-25  David Carlton  <carlton@@math.stanford.edu>

	* symtab.c (lookup_symbol_aux_block): New function.
	(lookup_symbol_aux_local): Call lookup_symbol_aux_block.
	(lookup_symbol_aux): Ditto.

	* Merge from mainline; tag is carlton_dictionary-20021025-merge.

2002-10-25  David Carlton  <carlton@@math.stanford.edu>

	* cp-support.c: Add comment to demangled name pitfalls.
	* symtab.c (lookup_transparent_type): Add FIXME comment at
	beginning.

2002-10-23  David Carlton  <carlton@@math.stanford.edu>

	* symtab.c: Delete cplusplus_hint.
	Delete prototype for find_template_name_end.
	* dwarf2read.c (scan_partial_symbols): Add in a gdb_assert from a
	later version of my namespace_minimal patch.

2002-10-25  David Carlton  <carlton@@math.stanford.edu>

	* gdb.c++/namespace.exp: Change all of the setup_xfail tests that
	I added into setup_kfails.
@
text
@d646 1
a646 2
      entry = (struct bfd_hash_entry *)
	bfd_hash_allocate (table, sizeof (struct section_hash_entry));
d1189 1
a1189 1
      && location != (PTR) (section->contents + offset))
@


1.50.12.2
log
@2002-12-23  David Carlton  <carlton@@math.stanford.edu>

	* Merge from mainline; tag is carlton_dictionary-20021223-merge.
@
text
@d764 1
a764 1
  sh = section_hash_lookup (&abfd->section_htab, name, FALSE, FALSE);
d814 1
a814 1
  while (section_hash_lookup (&abfd->section_htab, sname, FALSE, FALSE));
d872 1
a872 1
  sh = section_hash_lookup (&abfd->section_htab, name, TRUE, FALSE);
d918 1
a918 1
  sh = section_hash_lookup (&abfd->section_htab, name, TRUE, FALSE);
d972 1
a972 1
  sh = section_hash_lookup (&abfd->section_htab, name, TRUE, FALSE);
d992 1
a992 1
	bfd_boolean bfd_set_section_flags (bfd *abfd, asection *sec, flagword flags);
d996 2
a997 2
	@@var{abfd} to the value @@var{flags}. Return <<TRUE>> on success,
	<<FALSE>> on error. Possible error returns are:
d1007 1
a1007 1
bfd_boolean
d1022 1
a1022 1
      return FALSE;
d1027 1
a1027 1
  return TRUE;
d1079 1
a1079 1
	bfd_boolean bfd_set_section_size (bfd *abfd, asection *sec, bfd_size_type val);
d1083 1
a1083 1
	ok, then <<TRUE>> is returned, else <<FALSE>>.
d1091 1
a1091 1
bfd_boolean
d1103 1
a1103 1
      return FALSE;
d1109 1
a1109 1
  return TRUE;
d1117 3
a1119 3
	bfd_boolean bfd_set_section_contents (bfd *abfd, asection *section,
					      PTR data, file_ptr offset,
					      bfd_size_type count);
d1127 1
a1127 1
	Normally <<TRUE>> is returned, else <<FALSE>>. Possible error
d1144 1
a1144 1
bfd_boolean
d1157 1
a1157 1
      return FALSE;
d1167 1
a1167 1
      return FALSE;
d1175 1
a1175 1
      return FALSE;
d1184 1
a1184 1
      abfd->output_has_begun = TRUE;
d1196 2
a1197 2
      abfd->output_has_begun = TRUE;
      return TRUE;
d1200 1
a1200 1
  return FALSE;
d1208 3
a1210 3
	bfd_boolean bfd_get_section_contents (bfd *abfd, asection *section,
					      PTR location, file_ptr offset,
					      bfd_size_type count);
d1221 2
a1222 2
	with zeroes. If no errors occur, <<TRUE>> is returned, else
	<<FALSE>>.
d1225 1
a1225 1
bfd_boolean
d1238 1
a1238 1
      return TRUE;
d1241 1
a1241 1
  /* Even if reloc_done is TRUE, this function reads unrelocated
d1250 1
a1250 1
      return FALSE;
d1255 1
a1255 1
    return TRUE;
d1260 1
a1260 1
      return TRUE;
d1266 1
a1266 1
      return TRUE;
d1278 2
a1279 2
	bfd_boolean bfd_copy_private_section_data (bfd *ibfd, asection *isec,
						   bfd *obfd, asection *osec);
d1284 1
a1284 1
	Return <<TRUE>> on success, <<FALSE>> on error.  Possible error
d1346 1
a1346 1
	bfd_boolean bfd_generic_discard_group (bfd *abfd, asection *group);
d1352 1
a1352 1
bfd_boolean
d1357 1
a1357 1
  return TRUE;
@


1.50.12.3
log
@2003-02-07  David Carlton  <carlton@@math.stanford.edu>

	* Merge with mainline; tag is carlton_dictionary-20030207-merge.
@
text
@d3 1
a3 1
   2000, 2001, 2002, 2003
d380 2
a381 3
.  {* The following flags are used by the ELF linker. *}
.
.  {* Mark sections which have been allocated to segments.  *}
a383 24
.  {* Type of sec_info information.  *}
.  unsigned int sec_info_type:3;
.#define ELF_INFO_TYPE_NONE      0
.#define ELF_INFO_TYPE_STABS     1
.#define ELF_INFO_TYPE_MERGE     2
.#define ELF_INFO_TYPE_EH_FRAME  3
.#define ELF_INFO_TYPE_JUST_SYMS 4
.
.  {* Nonzero if this section uses RELA relocations, rather than REL.  *}
.  unsigned int use_rela_p:1;
.
.  {* Bits used by various backends.  *}
.  unsigned int has_tls_reloc:1;
.
.  {* Usused bits.  *}
.  unsigned int flag11:1;
.  unsigned int flag12:1;
.  unsigned int flag13:1;
.  unsigned int flag14:1;
.  unsigned int flag15:1;
.  unsigned int flag16:4;
.  unsigned int flag20:4;
.  unsigned int flag24:8;
.
a591 6
									\
    /* sec_info_type, use_rela_p, has_tls_reloc, flag11, flag12,     */ \
       0,	      0,	  0,		 0,	 0,		\
									\
    /* flag13, flag14, flag15, flag16, flag20, flag24,               */ \
       0,      0,      0,      0,      0,      0,			\
@


1.50.12.4
log
@2003-04-30  David Carlton  <carlton@@bactrian.org>

	* cp-namespace.c (get_namespace_objfile): Copy the namespace
	objfile's name.

	* block.h (ALL_BLOCK_SYMBOLS): Move here from dictionary.h.
	* dictionary.c: Sync up with mainline version I just posted.
	Specifically, update some commments, and:
	(dict_create_hashed): Fiddle with nsyms updating.
	(dict_create_linear): Ditto.
	(dict_lookup): Delete.
	(iterator_next_hashed): Delete FIXME comment.
	(iter_name_first_hashed): Replace 'sym' by 'sym != NULL'.
	(iter_name_next_hashed): Replate 'next' by 'next != NULL'.
	* dictionary.h: Sync up with mainline version I just posted: add
	inclusion guards, delete declaration of dict_lookup, delete
	ALL_BLOCK_SYMBOLs.

	* Merge with mainline; tag is carlton_dictionary-20030430-merge.
@
text
@a398 3
.  {* Nonzero if this section needs the relax finalize pass.  *}
.  unsigned int need_finalize_relax:1;
.
d400 1
d618 2
a619 2
    /* sec_info_type, use_rela_p, has_tls_reloc, need_finalize_relax, flag12,     */ \
       0,	      0,	  0,		 0,		      0,		\
@


1.50.12.5
log
@2003-06-27  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton_dictionary-20030627-merge.
@
text
@a401 3
.  {* Nonzero if this section has a gp reloc.  *}
.  unsigned int has_gp_reloc:1;
.
d403 1
a493 4
.  {* Points to the kept section if this section is a link-once section,
.     and is discarded.  *}
.  struct sec *kept_section;
.
d620 2
a621 5
    /* sec_info_type, use_rela_p, has_tls_reloc,                     */ \
       0,	      0,	  0,					\
									\
    /* need_finalize_relax, has_gp_reloc,                            */ \
       0,		    0,						\
d638 2
a639 2
    /* entsize, comdat, kept_section, moving_line_filepos,           */	\
       0,       NULL,   NULL,	      0,				\
@


1.50.12.6
log
@2003-08-05  David Carlton  <carlton@@kealia.com>

	* configure.in (build_warnings): Delete -Wformat-nonliteral.
	* configure (build_warnings): Ditto.

	* Merge with mainline; tag is carlton_dictionary-20030805-merge.
@
text
@d478 1
a478 1
.  void *userdata;
d507 1
a507 1
.  void *used_by_bfd;
d535 1
a535 1
.extern asection bfd_abs_section;
d539 1
a539 1
.extern asection bfd_und_section;
d543 1
a543 1
.extern asection bfd_com_section;
d546 1
a546 1
.extern asection bfd_ind_section;
d619 1
a619 1
  asection SEC = 							\
d679 4
a682 3
bfd_section_hash_newfunc (struct bfd_hash_entry *entry,
			  struct bfd_hash_table *table,
			  const char *string)
d697 4
a700 2
    memset (&((struct section_hash_entry *) entry)->section, 0,
	    sizeof (asection));
d711 2
d714 3
a716 1
bfd_section_init (bfd *abfd, asection *newsect)
d771 2
a772 1
bfd_section_list_clear (bfd *abfd)
d777 1
a777 1
  memset (abfd->section_htab.table, 0,
d786 1
a786 1
	asection *bfd_get_section_by_name (bfd *abfd, const char *name);
d800 3
a802 1
bfd_get_section_by_name (bfd *abfd, const char *name)
d818 3
a820 2
	char *bfd_get_unique_section_name
	  (bfd *abfd, const char *templat, int *count);
d831 4
a834 1
bfd_get_unique_section_name (bfd *abfd, const char *templat, int *count)
d841 1
a841 1
  sname = bfd_malloc (len + 8);
d868 1
a868 1
	asection *bfd_make_section_old_way (bfd *abfd, const char *name);
d889 3
a891 1
bfd_make_section_old_way (bfd *abfd, const char *name)
d934 1
a934 1
	asection *bfd_make_section_anyway (bfd *abfd, const char *name);
d947 3
a949 1
bfd_make_section_anyway (bfd *abfd, const char *name)
d971 1
a971 1
      newsect = bfd_zalloc (abfd, sizeof (asection));
d985 1
a985 1
	asection *bfd_make_section (bfd *, const char *name);
d995 3
a997 1
bfd_make_section (bfd *abfd, const char *name)
d1022 1
a1022 1
      return NULL;
d1034 1
a1034 2
	bfd_boolean bfd_set_section_flags
	  (bfd *abfd, asection *sec, flagword flags);
d1050 4
a1053 3
bfd_set_section_flags (bfd *abfd ATTRIBUTE_UNUSED,
		       sec_ptr section,
		       flagword flags)
d1077 5
a1081 4
	void bfd_map_over_sections
	  (bfd *abfd,
	   void (*func) (bfd *abfd, asection *sect, void *obj),
	   void *obj);
d1088 1
a1088 1
|	func (abfd, the_section, obj);
d1095 1
a1095 1
|	      func (abfd, p, ...)
d1101 4
a1104 3
bfd_map_over_sections (bfd *abfd,
		       void (*operation) (bfd *, asection *, void *),
		       void *user_storage)
d1121 1
a1121 2
	bfd_boolean bfd_set_section_size
	  (bfd *abfd, asection *sec, bfd_size_type val);
d1134 4
a1137 1
bfd_set_section_size (bfd *abfd, sec_ptr ptr, bfd_size_type val)
d1159 3
a1161 3
	bfd_boolean bfd_set_section_contents
	  (bfd *abfd, asection *section, void *data, file_ptr offset,
	   bfd_size_type count);
d1181 4
a1184 4
#define bfd_get_section_size_now(abfd, sec) \
  (sec->reloc_done \
   ? bfd_get_section_size_after_reloc (sec) \
   : bfd_get_section_size_before_reloc (sec))
d1187 6
a1192 5
bfd_set_section_contents (bfd *abfd,
			  sec_ptr section,
			  void *location,
			  file_ptr offset,
			  bfd_size_type count)
d1232 1
a1232 1
      && location != section->contents + offset)
d1250 3
a1252 3
	bfd_boolean bfd_get_section_contents
	  (bfd *abfd, asection *section, void *location, file_ptr offset,
	   bfd_size_type count);
d1268 6
a1273 5
bfd_get_section_contents (bfd *abfd,
			  sec_ptr section,
			  void *location,
			  file_ptr offset,
			  bfd_size_type count)
d1320 2
a1321 2
	bfd_boolean bfd_copy_private_section_data
	  (bfd *ibfd, asection *isec, bfd *obfd, asection *osec);
d1343 1
a1343 1
	  (struct bfd_link_info *info, asection *section);
d1354 3
a1356 1
_bfd_strip_section_from_output (struct bfd_link_info *info, asection *s)
d1395 3
a1397 2
bfd_generic_discard_group (bfd *abfd ATTRIBUTE_UNUSED,
			   asection *group ATTRIBUTE_UNUSED)
@


1.50.12.7
log
@2003-11-11  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton-dictionary-20031111-merge.
@
text
@d169 1
a169 1
.typedef struct bfd_section
d182 1
a182 1
.  struct bfd_section *next;
d405 1
a405 1
.  {* Unused bits.  *}
d448 1
a448 1
.  struct bfd_section *output_section;
d498 1
a498 1
.  struct bfd_section *kept_section;
d517 2
a518 2
.  struct bfd_symbol *symbol;
.  struct bfd_symbol **symbol_ptr_ptr;
d556 4
a559 4
.extern const struct bfd_symbol * const bfd_abs_symbol;
.extern const struct bfd_symbol * const bfd_com_symbol;
.extern const struct bfd_symbol * const bfd_und_symbol;
.extern const struct bfd_symbol * const bfd_ind_symbol;
d561 2
a562 1
.     ((section)->_raw_size)
d639 1
a639 1
       0,             (struct bfd_section *) &SEC, 0,			\
d654 1
a654 1
       (struct bfd_symbol *) &global_syms[IDX],				\
d657 1
a657 1
       (struct bfd_symbol **) &SYM,					\
d1136 2
a1137 2
	  (bfd *abfd, asection *section, const void *data,
	   file_ptr offset, bfd_size_type count);
d1165 1
a1165 1
			  const void *location,
@


1.50.12.8
log
@2003-12-15  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton_dictionary-20031215-merge.
	* cp-support.c (class_name_from_physname): Add DMGL_PARAMS to call
	to cplus_demangle.
	(method_name_from_physname): Ditto.
@
text
@d1028 1
d1068 1
a1068 1
	This is the preferred method for iterating over sections; an
d1077 1
@


1.49
log
@	* elf64-ppc.c (ppc_add_stub): Replace strcpy/strncpy with memcpy.
	* elf32-hppa.c (hppa_add_stub): Likewise.
	* elflink.c (_bfd_elf_link_record_dynamic_symbol): Likewise.
	* elflink.h (elf_add_default_symbol): Fix comment typo.
	(elf_add_default_symbol): Replace strcpy and strncpy with memcpy.
	(elf_link_add_object_symbols): Likewise.
	(elf_link_assign_sym_version): Likewise.
	* hash.c (bfd_hash_lookup): Likewise.
	* linker.c (_bfd_generic_link_add_one_symbol): Likewise.
	* section.c (bfd_get_unique_section_name): Likewise.
	* syms.c (_bfd_stab_section_find_nearest_line): Likewise.
	* elf.c (_bfd_elf_make_section_from_phdr): Likewise.
	(assign_section_numbers): Likewise.
	(_bfd_elfcore_make_pseudosection): Likewise.
	(elfcore_grok_lwpstatus): Likewise.
	(elfcore_grok_win32pstatus): Likewise.
	(elfcore_write_note): Constify input params.  Use PTR instead of
	void *.  Include terminating NUL in namesz.  Correct padding.
	Support NULL "name" param.  Use memcpy instead of strcpy.
	(elfcore_write_prpsinfo): Constify input params.
	(elfcore_write_prstatus): Likewise.  Use PTR instead of void *.
	(elfcore_write_lwpstatus): Likewise.
	(elfcore_write_pstatus): Likewise.
	(elfcore_write_prfpreg): Likewise.
	(elfcore_write_prxfpreg): Likewise.
	* elf-bfd.h (elfcore_write_note): Update declaration.
	(elfcore_write_prpsinfo): Likewise.
	(elfcore_write_prstatus): Likewise.
	(elfcore_write_pstatus): Likewise.
	(elfcore_write_prfpreg): Likewise.
	(elfcore_write_prxfpreg): Likewise.
	(elfcore_write_lwpstatus): Likewise.
@
text
@d1304 5
a1308 3
	becomes empty, remove it from the output bfd.  @@var{info} may
	be NULL; if it is not, it is used to decide whether the output
	section is empty.
d1315 3
a1317 3
  asection **spp, *os;
  struct bfd_link_order *p, *pp;
  boolean keep_os;
d1319 1
a1319 1
  /* Excise the input section from the link order.
d1321 3
a1323 3
     FIXME: For all calls that I can see to this function, the link
     orders have not yet been set up.  So why are we checking them? --
     Ian */
d1325 1
a1325 3

  /* Handle a section that wasn't output.  */
  if (os == NULL)
d1328 10
a1337 50
  for (p = os->link_order_head, pp = NULL; p != NULL; pp = p, p = p->next)
    if (p->type == bfd_indirect_link_order
	&& p->u.indirect.section == s)
      {
	if (pp)
	  pp->next = p->next;
	else
	  os->link_order_head = p->next;
	if (!p->next)
	  os->link_order_tail = pp;
	break;
      }

  keep_os = os->link_order_head != NULL;

  if (! keep_os && info != NULL)
    {
      bfd *abfd;
      for (abfd = info->input_bfds; abfd != NULL; abfd = abfd->link_next)
	{
	  asection *is;
	  for (is = abfd->sections; is != NULL; is = is->next)
	    {
	      if (is != s && is->output_section == os
		  && (is->flags & SEC_EXCLUDE) == 0)
		break;
	    }
	  if (is != NULL)
	    break;
	}
      if (abfd != NULL)
	keep_os = true;
    }

  /* If the output section is empty, remove it too.  Careful about sections
     that have been discarded in the link script -- they are mapped to
     bfd_abs_section, which has no owner.  */
  if (!keep_os && os->owner != NULL)
    {
      for (spp = &os->owner->sections; *spp; spp = &(*spp)->next)
	if (*spp == os)
	  {
	    bfd_section_list_remove (os->owner, spp);
	    os->flags |= SEC_EXCLUDE;
	    os->owner->section_count--;
	    break;
	  }
    }

  s->flags |= SEC_EXCLUDE;
@


1.48
log
@	* section.c (_bfd_strip_section_from_output): Set SEC_EXCLUDE
	for removed output sections.
@
text
@d801 1
a801 1
  strcpy (sname, templat);
@


1.47
log
@	* bfd-in.h: Remove "taken from the source" comment.
	* libbfd-in.h: Likewise.
	* libcoff-in.h: Likewise.
	* bfd-in2.h: Regenerate.
	* libbfd.h: Regenerate.
	* libcoff.h: Regenerate.

	* elf.c (bfd_elf_discard_group): Return true.
	* elf-bfd.h (bfd_elf_discard_group): Declare.
	* bfd-in.h (bfd_elf_discard_group): Don't declare here.
	* section.c (bfd_discard_group): Rename to bfd_generic_discard_group.
	* bfd.c (bfd_discard_group): Define.
	* targets.c (struct bfd_target): Add _bfd_discard_group.
	(BFD_JUMP_TABLE_LINK): Here too.
	* libbfd-in.h (_bfd_nolink_bfd_discard_group): Define.
	* aout-adobe.c (aout_32_bfd_discard_group): Define.
	* aout-target.h (MY_bfd_discard_group): Define.
	* aout-tic30.c (MY_bfd_discard_group): Define.
	* binary.c (binary_bfd_discard_group): Define.
	* bout.c (b_out_bfd_discard_group): Define.
	* coff-alpha.c (_bfd_ecoff_bfd_discard_group): Define.
	* coffcode.h (coff_bfd_discard_group): Define.
	* coff-mips.c (_bfd_ecoff_bfd_discard_group): Define.
	* elfxx-target.h (bfd_elfNN_bfd_discard_group): Define.
	* i386msdos.c (msdos_bfd_discard_group): Define.
	* i386os9k.c (os9k_bfd_discard_group): Define.
	* ieee.c (ieee_bfd_discard_group): Define.
	* ihex.c (ihex_bfd_discard_group): Define.
	* mmo.c (mmo_bfd_discard_group): Define.
	* nlm-target.h (nlm_bfd_discard_group): Define.
	* oasys.c (oasys_bfd_discard_group): Define.
	* ppcboot.c (ppcboot_bfd_discard_group): Define.
	* som.c (som_bfd_discard_group): Define.
	* srec.c (srec_bfd_discard_group): Define.
	* tekhex.c (tekhex_bfd_discard_group): Define.
	* versados.c (versados_bfd_discard_group): Define.
	* vms.c (vms_bfd_discard_group): Define.
	* xcoff-target.h (_bfd_xcoff_bfd_discard_group): Define.
	* coff64-rs6000.c (rs6000coff64_vec): Update initialiser.
	(aix5coff64_vec): Likewise.
	* coff-rs6000.c (rs6000coff_vec, pmac_xcoff_vec): Likewise.
@
text
@d1371 1
@


1.46
log
@	* elf.c (setup_group): Set SEC_LINK_ONCE on GRP_COMDAT groups.
	(bfd_section_from_shdr): Likewise.  Set section name of group
	sections from signature.
	(group_signature): Split out from setup_group.  Ensure symbol table
	is available.
	(bfd_elf_discard_group): New function.
	(_bfd_elf_make_section_from_shdr): Don't set SEC_LINK_ONCE on
	.gnu.linkonce* sections if they are members of a group.
	(set_group_contents): Set GRP_COMDAT flag.
	* section.c (bfd_discard_group): New function.
	* bfd-in.h (bfd_elf_discard_group): Declare.
	* bfd-in2.h: Regenerate.
	* elf-bfd.h (struct bfd_elf_section_data): Add linkonce_p field.
	(elf_linkonce_p): Define.
@
text
@d1381 1
a1381 1
	bfd_discard_group
d1384 1
a1384 1
	void bfd_discard_group (bfd *abfd, asection *group);
d1390 4
a1393 4
void
bfd_discard_group (abfd, group)
     bfd *abfd;
     asection *group;
d1395 1
a1395 3
  if ((group->flags & SEC_GROUP) != 0
      && abfd->xvec->flavour == bfd_target_elf_flavour)
    bfd_elf_discard_group (abfd, group);
@


1.45
log
@	* elf.c (_bfd_elf_make_section_from_shdr): Set SEC_THREAD_LOCAL
	for symbols from SHF_TLS section.
	(_bfd_elf_print_private_bfd_data): Add PT_TLS.
	(elf_fake_sections): Set SHF_TLS for SEC_THREAD_LOCAL sections.
	(map_sections_to_segments): Build PT_TLS segment if necessary.
	(assign_file_positions_for_segments): Likewise.
	(get_program_header_size): Account for PT_TLS segment.
	(swap_out_syms): Set type of BSF_THREAD_LOCAL symbols and symbols from
	SEC_THREAD_LOCAL sections to STT_TLS.
	* reloc.c: Add 386 and IA-64 TLS relocs.
	* section.c (SEC_THREAD_LOCAL): Define.
	(SEC_CONSTRUCTOR_TEXT, SEC_CONSTRUCTOR_DATA, SEC_CONSTRUCTOR_BSS):
	Remove.
	* elflink.h (elf_link_add_object_symbols): Support .tcommon.
	(size_dynamic_sections): If DF_STATIC_TLS, set DF_FLAGS
	unconditionally.
	(struct elf_final_link_info): Add first_tls_sec.
	(elf_bfd_final_link): Set first_tls_sec.
	Compute elf_hash_table (info)->tls_segment.
	(elf_link_output_extsym): Handle STT_TLS symbols.
	(elf_link_input_bfd): Likewise.
	* syms.c (BSF_THREAD_LOCAL): Define.
	* bfd-in2.h: Rebuilt.
	* libbfd.h: Rebuilt.
	* elf32-i386.c (elf_i386_tls_transition, dtpoff_base, tpoff,
	elf_i386_mkobject, elf_i386_object_p): New functions.
	(elf_howto_table): Add TLS relocs.
	(elf_i386_reloc_type_lookup): Support TLS relocs.
	(elf_i386_info_to_howto_rel): Likewise.
	(struct elf_i386_link_hash_entry): Add tls_type.
	(struct elf_i386_obj_tdata): New.
	(elf_i386_hash_entry, elf_i386_tdata, elf_i386_local_got_tls_type):
	New macros.
	(struct elf_i386_link_hash_table): Add tls_ldm_got.
	(link_hash_newfunc): Clear tls_type.
	(elf_i386_check_relocs): Support TLS relocs.
	(elf_i386_gc_sweep_hook): Likewise.
	(allocate_dynrelocs): Likewise.
	(elf_i386_size_dynamic_sections): Likewise.
	(elf_i386_relocate_section): Likewise.
	(elf_i386_finish_dynamic_symbol): Likewise.
	(bfd_elf32_mkobject, elf_backend_object_p): Define.
	* elfxx-ia64.c (struct elfNN_ia64_dyn_sym_info): Add tprel_offset,
	dtpmod_offset, dtprel_offset, tprel_done, dtpmod_done, dtprel_done,
	want_tprel, want_dtpmod, want_dtprel.
	(elfNN_ia64_tprel_base, elfNN_ia64_dtprel_base): New functions.
	(ia64_howto_table): Add TLS relocs, rename R_IA64_LTOFF_TP22 to
	R_IA64_LTOFF_TPREL22.
	(elf_code_to_howto_index): Add TLS relocs.
	(elfNN_ia64_check_relocs): Support TLS relocs.
	(allocate_global_data_got): Account for TLS .got data.
	(allocate_dynrel_entries): Account for TLS dynamic relocations.
	(elfNN_ia64_install_value): Supprt TLS relocs.
	(set_got_entry): Support TLS relocs.
	(elfNN_ia64_relocate_section): Likewise.

	* config/obj-elf.c (elf_common): Renamed from obj_elf_common.
	(obj_elf_common): Call elf_common.
	(obj_elf_tls_common): New function.
	(elf_pseudo_tab): Support .tls_common.
	(special_sections): Add .tdata and .tbss.
	(obj_elf_change_section): Set SEC_THREAD_LOCAL for SHF_TLS
	sections.
	(obj_elf_parse_section_letters): Support T in section flags (SHF_TLS).
	(obj_elf_parse_section_letters): Include T in error message.
	* config/tc-ppc.c (ppc_section_letter): Likewise.
	* config/tc-alpha.c (alpha_elf_section_letter): Likewise.
	(tc_gen_reloc): Handle SEC_THREAD_LOCAL the same way as
	SEC_MERGE.
	* config/tc-sparc.c (md_apply_fix3): Likewise.
	* config/tc-i386.c (tc_i386_fix_adjustable): Add TLS relocs.
	Define them if not BFD_ASSEMBLER.
	(lex_got): Support @@TLSGD, @@TLSLDM, @@GOTTPOFF, @@TPOFF, @@DTPOFF
	and @@NTPOFF.
	(md_apply_fix3): Add TLS relocs.
	* config/tc-ia64.c (enum reloc_func): Add FUNC_DTP_MODULE,
	FUNC_DTP_RELATIVE, FUNC_TP_RELATIVE, FUNC_LT_DTP_MODULE,
	FUNC_LT_DTP_RELATIVE, FUNC_LT_TP_RELATIVE.
	(pseudo_func): Support @@dtpmod(), @@dtprel() and @@tprel().
	(ia64_elf_section_letter): Include T in error message.
	(md_begin): Support TLS operators.
	(md_operand): Likewise.
	(ia64_gen_real_reloc_type): Support TLS relocs.
	* testsuite/gas/i386/tlspic.s: New file.
	* testsuite/gas/i386/tlsd.s: New file.
	* testsuite/gas/i386/tlsnopic.s: New file.
	* testsuite/gas/i386/tlsd.d: New file.
	* testsuite/gas/i386/tlsnopic.d: New file.
	* testsuite/gas/i386/tlspic.d: New file.
	* testsuite/gas/i386/i386.exp: Add tlsd, tlsnopic and tlspic tests.
	* testsuite/gas/ia64/tls.s: New file.
	* testsuite/gas/ia64/tls.d: New file.
	* testsuite/gas/ia64/ia64.exp: Add tls test.
	* write.c (adjust_reloc_syms): Don't change symbols in
	SEC_THREAD_LOCAL sections to STT_SECTION + addend.

	* elf/common.h (PT_TLS, SHF_TLS, STT_TLS, DF_STATIC_TLS): Define.
	* elf/ia64.h (R_IA64_LTOFF_TPREL22): Renamed from R_IA64_LTOFF_TP22.
	* elf/i386.h: Add TLS relocs.

	* scripttempl/elf.sc: Add .rel{,a}.t{bss,data}, .tdata and .tbss.
	* ldlang.c (lang_add_section): Set SEC_THREAD_LOCAL for
	output section if necessary.  Handle .tbss.
	(lang_size_sections): Clear _raw_size for .tbss section
	(it allocates space in PT_TLS segment only).
	* ldwrite.c (build_link_order): Build link order for .tbss too.

	* readelf.c (get_segment_type): Add PT_TLS.
	(get_elf_section_flags): Add SHF_TLS.
	(get_dynamic_flags): Optimize.  Add DF_STATIC_TLS.
	(process_dynamic_segment): Use puts instead of printf.
	(get_symbol_type): Support STT_TLS.
	* objdump.c (dump_section_header): Remove SEC_CONSTRUCTOR_TEXT,
	SEC_CONSTRUCTOR_DATA, SEC_CONSTRUCTOR_BSS.
	Add SEC_THREAD_LOCAL.
@
text
@d1378 21
@


1.45.2.1
log
@Merge with mainline, kseitz_interps-20020619-merge.
@
text
@a1370 1
	    os->flags |= SEC_EXCLUDE;
a1376 19
}

/*
FUNCTION
	bfd_generic_discard_group

SYNOPSIS
	boolean bfd_generic_discard_group (bfd *abfd, asection *group);

DESCRIPTION
	Remove all members of @@var{group} from the output.
*/

boolean
bfd_generic_discard_group (abfd, group)
     bfd *abfd ATTRIBUTE_UNUSED;
     asection *group ATTRIBUTE_UNUSED;
{
  return true;
@


1.45.2.2
log
@Merge w/trunk (kseitz_interps-20020722-merge).
@
text
@d801 1
a801 1
  memcpy (sname, templat, len);
d1304 3
a1306 5
	becomes empty, remove it from the output bfd.

	This function won't actually do anything except twiddle flags
	if called too late in the linking process, when it's not safe
	to remove sections.
d1313 10
a1322 3
  asection *os;
  asection *is;
  bfd *abfd;
d1324 3
a1326 1
  s->flags |= SEC_EXCLUDE;
d1328 48
a1375 6
  /* If the section wasn't assigned to an output section, or the
     section has been discarded by the linker script, there's nothing
     more to do.  */
  os = s->output_section;
  if (os == NULL || os->owner == NULL)
    return;
d1377 1
a1377 10
  /* If the output section has other (non-excluded) input sections, we
     can't remove it.  */
  for (abfd = info->input_bfds; abfd != NULL; abfd = abfd->link_next)
    for (is = abfd->sections; is != NULL; is = is->next)
      if (is->output_section == os && (is->flags & SEC_EXCLUDE) == 0)
	return;

  /* If the output section is empty, flag it for removal too.
     See ldlang.c:strip_excluded_output_sections for the action.  */
  os->flags |= SEC_EXCLUDE;
@


1.45.2.3
log
@merge from mainline
@
text
@d646 1
a646 2
      entry = (struct bfd_hash_entry *)
	bfd_hash_allocate (table, sizeof (struct section_hash_entry));
d1189 1
a1189 1
      && location != (PTR) (section->contents + offset))
@


1.44
log
@Tidy up formatting in bfd-in2.h
@
text
@a232 6
.  {* The section is a constructor, and should be placed at the
.     end of the text, data, or bss section(?).  *}
.#define SEC_CONSTRUCTOR_TEXT 0x1100
.#define SEC_CONSTRUCTOR_DATA 0x2100
.#define SEC_CONSTRUCTOR_BSS  0x3100
.
d252 3
@


1.44.8.1
log
@merge from trunk
@
text
@d233 6
a258 3
.  {* The section contains thread local data.  *}
.#define SEC_THREAD_LOCAL 0x1000
.
a1373 1
	    os->flags |= SEC_EXCLUDE;
a1379 19
}

/*
FUNCTION
	bfd_generic_discard_group

SYNOPSIS
	boolean bfd_generic_discard_group (bfd *abfd, asection *group);

DESCRIPTION
	Remove all members of @@var{group} from the output.
*/

boolean
bfd_generic_discard_group (abfd, group)
     bfd *abfd ATTRIBUTE_UNUSED;
     asection *group ATTRIBUTE_UNUSED;
{
  return true;
@


1.43
log
@	* section.c (bfd_section_init): Remove unnecessary initialisations.
	(bfd_section_list_clear): New function.
	(bfd_section_list_remove, bfd_section_list_insert): New macros.
	(_bfd_strip_section_from_output): Use them.
	* coffcode.h (coff_set_alignment_hook): Likewise.
	* elf32-mips.c (_bfd_mips_elf_final_link): Likewise.
	* elf64-mips.c (mips_elf64_final_link): Likewise.
	* elf64-mmix.c (mmix_elf_final_link): Likewise.
	* sunos.c (sunos_add_dynamic_symbols): Likewise.
	* xcofflink.c (_bfd_xcoff_bfd_final_link): Likewise.
	* bfd-in2.h: Regenerate.

	* netbsd-core.c (netbsd_core_file_p): Use bfd_make_section_anyway
	rather than doing our own section handling.  Clean up after errors
	with bfd_release and bfd_section_list_clear.  Handle unexpected
	flags.
	* aoutf1.h (sunos4_core_file_p): Likewise.
	* aix386-core.c (aix386_core_file_p): Likewise.
	* cisco-core.c (cisco_core_file_validate): Likewise.
	* ptrace-core.c (ptrace_unix_core_file_p): Likewise.
	* trad-core.c (trad_unix_core_file_p): Likewise.

	* hppabsd-core.c (hppabsd_core_core_file_p):  Clean up after errors
	with bfd_release and bfd_section_list_clear.
	* hpux-core.c (hpux_core_core_file_p): Likewise.
	* irix-core.c (irix_core_core_file_p): Likewise.
	* lynx-core.c (lynx_core_file_p): Likewise.
	* osf-core.c (osf_core_core_file_p): Likewise.
	* rs6000-core.c (rs6000coff_core_p): Likewise.
	* sco5-core.c (sco5_core_file_p): Likewise.
@
text
@a172 1
.
a175 1
.
a178 1
.
a181 1
.
a186 1
.
a394 1
.
d399 1
a399 2
.      information. *}
.
a404 1
.
a409 1
.
a418 1
.
a421 1
.
a425 1
.
a429 1
.
a433 1
.
d436 1
a436 2
.  {* The number of relocation records in one of the above  *}
.
a442 1
.
a445 1
.
a448 1
.
a451 1
.
a458 1
.
a461 1
.
a464 1
.
a467 1
.
a471 1
.
a474 1
.
a480 1
.
a483 1
.
d486 1
a486 1
.  {* A symbol which points at this section only *}
d492 1
a492 1
.} asection ;
d504 1
a504 1
.{* the absolute section *}
d508 1
a508 1
.{* Pointer to the undefined section *}
d512 1
a512 1
.{* Pointer to the common section *}
d515 1
a515 1
.{* Pointer to the indirect section *}
@


1.42
log
@hash bfd sections for fast lookup and create.
bfd/ChangeLog
	* bfd.c (struct _bfd): Add section_htab, section_tail.
	* libbfd-in.h (_bfd_delete_bfd): Declare.
	(bfd_section_hash_newfunc): Declare.
	* opncls.c (_bfd_new_bfd): Free memory on failure.  Init
	section_htab and section_tail.
	(_bfd_delete_bfd): New function.
	(bfd_openr): Use it.
	(bfd_fdopenr): Likewise.
	(bfd_openstreamr): Likewise.
	(bfd_openw): Likewise.
	(bfd_close): Likewise.
	(bfd_close_all_done): Likewise.
	(bfd_release): Comment.
	* section.c (struct section_hash_entry): New.
	(bfd_section_hash_newfunc): New function.
	(section_hash_lookup): Define.
	(bfd_section_init): New function, split out from
	bfd_make_section_anyway.
	(bfd_get_section_by_name): Lookup via hash table.
	(bfd_get_unique_section_name): Likewise.
	(bfd_make_section_old_way): Rewrite to use hash table.
	(bfd_make_section_anyway): Likewise.
	(bfd_make_section): Likewise.  Return NULL for attempts to make
	BFD_{ABS,COM,UND,IND}_SECTION_NAME.
	(_bfd_strip_section_from_output): Adjust section_tail if needed.
	* configure.in: Bump bfd version.
	* configure: Regenerate.
	* libbfd.h: Regenerate.
	* bfd-in2.h: Regenerate.

ld/ChangeLog
	* emultempl/elf32.em (gld${EMULATION_NAME}_place_orphan): Adjust
	section_tail when fiddling with section list.
	(gld${EMULATION_NAME}_list_options): Ensure sentences aren't
	broken into separate strings to make translation easier.
	* emultempl/mmo.em (mmo_place_orphan): Adjust section_tail when
	fiddling with section list.
	* emultempl/pe.em (gld_${EMULATION_NAME}_place_orphan): Likewise.
@
text
@d3 1
a3 1
   2000, 2001
d563 26
a708 8
  newsect->flags = SEC_NO_FLAGS;

  newsect->userdata = NULL;
  newsect->contents = NULL;
  newsect->next = (asection *) NULL;
  newsect->relocation = (arelent *) NULL;
  newsect->reloc_count = 0;
  newsect->line_filepos = 0;
a709 1
  newsect->comdat = NULL;
d747 23
d1400 1
a1400 3
	    *spp = os->next;
	    if (os->next == NULL)
	      os->owner->section_tail = spp;
@


1.41
log
@Define and use bfd_is_const_section().
@
text
@d632 86
d751 5
a755 1
  asection *sect;
a756 3
  for (sect = abfd->sections; sect != NULL; sect = sect->next)
    if (!strcmp (sect->name, name))
      return sect;
d803 1
a803 1
  while (bfd_get_section_by_name (abfd, sname) != NULL);
d840 4
a843 2
  asection *sec = bfd_get_section_by_name (abfd, name);
  if (sec == (asection *) NULL)
d845 2
a846 1
      sec = bfd_make_section (abfd, name);
d848 26
a873 1
  return sec;
d898 1
a898 1
  static int section_id = 0x10;  /* id 0 to 3 used by STD_SECTION.  */
a899 2
  asection **prev = &abfd->sections;
  asection *sect = abfd->sections;
d907 2
a908 8
  while (sect)
    {
      prev = &sect->next;
      sect = sect->next;
    }

  newsect = (asection *) bfd_zalloc (abfd, (bfd_size_type) sizeof (asection));
  if (newsect == NULL)
d911 2
a912 19
  newsect->name = name;
  newsect->id = section_id;
  newsect->index = abfd->section_count;
  newsect->flags = SEC_NO_FLAGS;

  newsect->userdata = NULL;
  newsect->contents = NULL;
  newsect->next = (asection *) NULL;
  newsect->relocation = (arelent *) NULL;
  newsect->reloc_count = 0;
  newsect->line_filepos = 0;
  newsect->owner = abfd;
  newsect->comdat = NULL;

  /* Create a symbol whos only job is to point to this section. This is
     useful for things like relocs which are relative to the base of a
     section.  */
  newsect->symbol = bfd_make_empty_symbol (abfd);
  if (newsect->symbol == NULL)
d914 7
a920 14
      bfd_release (abfd, newsect);
      return NULL;
    }
  newsect->symbol->name = name;
  newsect->symbol->value = 0;
  newsect->symbol->section = newsect;
  newsect->symbol->flags = BSF_SECTION_SYM;

  newsect->symbol_ptr_ptr = &newsect->symbol;

  if (BFD_SEND (abfd, _new_section_hook, (abfd, newsect)) != true)
    {
      bfd_release (abfd, newsect);
      return NULL;
d923 2
a924 4
  section_id++;
  abfd->section_count++;
  *prev = newsect;
  return newsect;
d946 2
a947 1
  asection *sect = abfd->sections;
d949 1
a949 1
  if (strcmp (name, BFD_ABS_SECTION_NAME) == 0)
d951 2
a952 9
      return bfd_abs_section_ptr;
    }
  if (strcmp (name, BFD_COM_SECTION_NAME) == 0)
    {
      return bfd_com_section_ptr;
    }
  if (strcmp (name, BFD_UND_SECTION_NAME) == 0)
    {
      return bfd_und_section_ptr;
d955 9
a963 4
  if (strcmp (name, BFD_IND_SECTION_NAME) == 0)
    {
      return bfd_ind_section_ptr;
    }
d965 2
a966 1
  while (sect)
d968 2
a969 3
      if (!strcmp (sect->name, name))
	return NULL;
      sect = sect->next;
d972 2
a973 2
  /* The name is not already used; go ahead and make a new section.  */
  return bfd_make_section_anyway (abfd, name);
d1361 2
@


1.40
log
@	* section.c (bfd_make_section_anyway): Don't increment section_id
	and the BFD's section_count if adding the section failed.
	* vms.c (vms_new_section_hook): Adjust for bfd_make_section_anyway
	change.
@
text
@d547 6
@


1.39
log
@	* section.c (_bfd_strip_section_from_output): Don't count
	SEC_EXCLUDE sections as references.  Set SEC_EXCLUDE.
@
text
@d799 2
a800 2
  newsect->id = section_id++;
  newsect->index = abfd->section_count++;
d834 2
@


1.38
log
@	* aout-encap.c: Fix comment typos.
	* aoutx.h: Likewise.
	* archive.c: Likewise.
	* bout.c: Likewise.
	* coff64-rs6000.c: Likewise.
	* coffcode.h: Likewise.
	* coffgen.c: Likewise.
	* cofflink.c: Likewise.
	* coff-mips.c: Likewise.
	* ecoff.c: Likewise.
	* elf32-m32r.c: Likewise.
	* libcoff-in.h: Likewise.
	* libecoff.h: Likewise.
	* libxcoff.h: Likewise.
	* nlm32-i386.c: Likewise.
	* pdp11.c: Likewise.
	* section.c: Likewise.
	* som.c: Likewise.
	* som.h: Likewise.
	* bfd-in2.h: Regenerate.
	* libcoff.h: Likewise.
@
text
@d1253 2
a1254 1
	      if (is != s && is->output_section == os)
d1277 2
@


1.37
log
@	* elf-bfd.h (struct bfd_elf_section_data): Add "group" and
	"next_in_group".  Fix gp and gp_size comments.
	* elf.c (union elf_internal_group): New.
	(setup_group): New function.
	(_bfd_elf_make_section_from_shdr): Set BFD flags for SHT_GROUP.
	Call setup_group for SHF_GROUP sections.
	(bfd_section_from_shdr): Build a BFD section for SHT_GROUP.
	(elf_fake_sections): Set header type for SEC_GROUP, and header
	flags for sections in a group.
	(set_group_contents): New function.
	(_bfd_elf_compute_section_file_positions): Call it.
	(assign_section_numbers): Set sh_link for SHT_GROUP.
	* elflink.h (gc_mark_hook): Handle section groups.
	* elfxx-target.h: Add SEC_GROUP to applicable_flags.
	* section.c (SEC_GROUP): Define.
	(struct sec): Comment fixes.
	* bfd-in2.h: Regenerate.

	* elf.c (bfd_elf_print_symbol): Formatting fix; migrate expression
	out of function args.
	(_bfd_elf_canonicalize_reloc): Similarly.
	(_bfd_elf_get_symtab): Here too.
	(_bfd_elf_canonicalize_dynamic_symtab): And here.
	* elfcode.h (elf_slurp_symbol_table): Don't recalculate size for
	bfd_bread, and remove unnecessary cast.
@
text
@d382 1
a382 1
.     output sections that have a input section.  *}
@


1.36
log
@	* section.c (struct sec): Remove kept_section.
	(STD_SECTION): Remove kept_section initialisation.
	(bfd_make_section_anyway): Here too.
	* ecoff.c (bfd_debug_section): Remove kept_section initialisation.
	* cofflink.c (_bfd_coff_link_input_bfd): Don't test kept_section.
	* elflink.h (elf_link_input_bfd): Set discarded link-once section
	symbols to zero, and remove all code involved with kept_section
	and tracking section symbol values.
	* bfd-in2.h: Regenerate.
	* configure.in: Bump version number.
	* configure: Regenerate.

	* ldlang.c (section_already_linked): Remove assignment to kept_section.
@
text
@d180 1
a180 1
.  {* Which section is it; 0..nth.  *}
d295 4
a298 3
.  {* The contents of this section are to be sorted by the
.     based on the address specified in the associated symbol
.     table.  *}
d365 3
d388 2
a389 1
.  {* Used by the ELF code to mark sections which have been allocated to segments.  *}
@


1.35
log
@        * section.c (SEC_ARCH_BIT_0): New; replace unused SEC_BALIGN.
        * bfd-in2.h: Rebuild.
@
text
@a487 4
.  {* Points to the kept section if this section is a link-once section,
.     and is discarded.  *}
.  struct sec *kept_section;
.
d598 2
a599 2
    /* entsize, comdat, kept_section, moving_line_filepos,           */	\
       0,       NULL,   NULL,         0,				\
a805 1
  newsect->kept_section = NULL;
@


1.34
log
@Touches most files in bfd/, so likely will be blamed for everything..

o  bfd_read and bfd_write lose an unnecessary param and become
   bfd_bread and bfd_bwrite.

o  bfd_*alloc now all take a bfd_size_type arg, and will error if
   size_t is too small.  eg. 32 bit host, 64 bit bfd, verrry big files
   or bugs in linker scripts etc.

o  file_ptr becomes a bfd_signed_vma.  Besides matching sizes with
   various other types involved in handling sections, this should make
   it easier for bfd to support a 64 bit off_t on 32 bit hosts that
   provide it.

o  I've made the H_GET_* and H_PUT_* macros (which invoke bfd_h_{get,put}_*)
   generally available.  They now cast their args to bfd_vma and
   bfd_byte * as appropriate, which removes a swag of casts from the
   source.

o  Bug fixes to bfd_get8, aix386_core_vec, elf32_h8_relax_section, and
   aout-encap.c.

o  Zillions of formatting and -Wconversion fixes.
@
text
@d208 5
a212 3
.#if 0   {* Obsolete ? *}
.#define SEC_BALIGN     0x008
.#endif
@


1.33
log
@	* section.c (_bfd_strip_section_from_output): Handle NULL
	output_section.
@
text
@d692 1
a692 1
  sname = bfd_malloc (len + 8);
d791 1
a791 1
  newsect = (asection *) bfd_zalloc (abfd, sizeof (asection));
d1016 3
a1018 6
	boolean bfd_set_section_contents
         (bfd *abfd,
         asection *section,
         PTR data,
         file_ptr offset,
         bfd_size_type count);
d1059 5
a1063 1
  if (offset < 0)
a1064 1
    bad_val:
a1067 5
  sz = bfd_get_section_size_now (abfd, section);
  if ((bfd_size_type) offset > sz
      || count > sz
      || offset + count > sz)
    goto bad_val;
d1090 1
a1090 1
    memcpy (section->contents + offset, location, count);
d1107 3
a1109 3
	boolean bfd_get_section_contents
        (bfd *abfd, asection *section, PTR location,
         file_ptr offset, bfd_size_type count);
d1136 1
a1136 1
      memset (location, 0, (unsigned) count);
d1140 7
a1146 1
  if (offset < 0)
a1147 1
    bad_val:
a1150 5
  /* Even if reloc_done is true, this function reads unrelocated
     contents, so we want the raw size.  */
  sz = section->_raw_size;
  if ((bfd_size_type) offset > sz || count > sz || offset + count > sz)
    goto bad_val;
d1158 1
a1158 1
      memset (location, 0, (unsigned) count);
d1177 2
a1178 1
	boolean bfd_copy_private_section_data(bfd *ibfd, asection *isec, bfd *obfd, asection *osec);
@


1.32
log
@Add a flag to asection, linker_has_input, and use it to reliably
determine whether an input section is the first one assigned to
an output section.
@
text
@d1227 5
@


1.31
log
@	* section.c (STD_SECTION): Add entsize.
@
text
@d375 4
d585 5
a589 2
    /* linker_mark, gc_mark, segment_mark, vma, lma, _cooked_size,   */	\
       0,           1,       0,            0,   0,   0,            	\
d591 2
a592 2
    /* _raw_size, output_offset, output_section,    alignment_power, */ \
       0,         0,           (struct sec *) &SEC, 0,			\
@


1.30
log
@2001-04-13  H.J. Lu  <hjl@@gnu.org>

	* section.c (SEC_MERGE): Define new flag for merging.
	(SEC_STRINGS): Likewise.
	(entsize): New field.
@
text
@d3 1
a3 1
   2000
d593 2
a594 2
    /* comdat, kept_section, moving_line_filepos, target_index,      */	\
       NULL,   NULL,         0,                   0,			\
d596 2
a597 2
    /* used_by_bfd, constructor_chain, owner,                        */	\
       NULL,        NULL,              NULL,				\
@


1.29
log
@Update copyright notices
@
text
@d353 9
d473 4
@


1.28
log
@2000-12-19  Kazu Hirata  <kazu@@hxi.com>

	* sco5-core.c: Fix formatting.
	* section.c: Likewise.
	* sparclinux.c: Likewise.
	* sparclynx.c: Likewise.
	* sparcnetbsd.c: Likewise.
	* srec.c: Likewise.
	* stabs.c: Likewise.
	* stab-syms.c: Likewise.
	* sunos.c: Likewise.
	* syms.c: Likewise.
	* sysdep.h: Likewise.
@
text
@d2 2
a3 1
   Copyright (C) 1990, 91, 92, 93, 94, 95, 96, 97, 98, 99, 2000
@


1.28.2.1
log
@Merge from mainline.
@
text
@d2 1
a2 2
   Copyright 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,
   2000, 2001
a364 4
.  {* Another mark flag used by some of the linker backends.  Set for
.     output sections that have a input section.  *}
.  unsigned int linker_has_input : 1;
.
d567 2
a568 5
    /* linker_mark, linker_has_input, gc_mark, segment_mark,         */	\
       0,           0,                1,       0,			\
									\
    /* vma, lma, _cooked_size, _raw_size,                            */	\
       0,   0,   0,            0,					\
d570 2
a571 2
    /* output_offset, output_section,      alignment_power,          */	\
       0,             (struct sec *) &SEC, 0,				\
@


1.28.2.2
log
@Merge from mainline.
@
text
@a1213 5

  /* Handle a section that wasn't output.  */
  if (os == NULL)
    return;

@


1.27
log
@2000-11-09  Philip Blundell  <pb@@futuretv.com>

	* section.c (STD_SECTION): Set gc_mark flag.
@
text
@a113 1

a134 1

a642 1

a692 1

a717 1

a864 1

a907 1

d914 1
a914 1
				   void (*func)(bfd *abfd,
a932 1

a951 1

d976 1
a976 1
     the size of any others. */
a1001 1

a1007 2


a1017 1

a1105 2


@


1.26
log
@        * elf64-ia64.c (elf64_ia64_final_link): New local unwind_output_sec.
        Set it before bfd_elf64_bfd_final_link call.  Use it after the call.
        * section.c (bfd_set_section_contents): Call memcpy if
        section->contents set and location not equal to contents plus offset.
@
text
@d570 1
a570 1
       0,           0,       0,            0,   0,   0,            	\
@


1.25
log
@Another try at correcting relocations against discarded
link-once section symbols.
@
text
@d1084 5
@


1.24
log
@* section.c (bfd_make_section_anyway): Release newsect ptr when
newsect->symbol fails to alloc.  Use bfd_release instead of free.
@
text
@a167 4
.
.  {* If this section is being discarded, the linker uses this field
.     to point to the input section which is being kept.  *}
.  struct sec *sec;
d470 4
d581 2
a582 2
    /* comdat, moving_line_filepos, target_index, used_by_bfd,       */	\
       NULL,   0,                   0,            NULL,			\
d584 2
a585 2
    /* constructor_chain, owner,                                     */	\
       NULL,              NULL,						\
d792 1
@


1.23
log
@Handle out of memory situations.
@
text
@d798 4
a801 1
    return NULL;
d811 1
a811 1
      free (newsect);
@


1.22
log
@(bfd_get_unique_section_name): Put a dot before the numeric suffix.
@
text
@d675 2
@


1.21
log
@`template' isn't a very good name for a variable.
Who invented c++ anyway?
@
text
@d657 4
a660 4
	a digit suffix onto the original @@var{templat}.  If @@var{count}
	is non-NULL, then it specifies the first number	tried as a
	suffix to generate a unique name.  The value pointed to by
	@@var{count} will be incremented in this case.
d674 1
a674 1
  sname = bfd_malloc (len + 7);
d685 1
a685 1
      sprintf (sname + len, "%d", num++);
@


1.20
log
@(SEC_HAS_GOT_REF): Define new flag for asection.
(bfd_get_unique_section_name): New function.
@
text
@d652 1
a652 1
					  const char *template,
d657 1
a657 1
	a digit suffix onto the original @@var{template}.  If @@var{count}
d664 1
a664 1
bfd_get_unique_section_name (abfd, template, count)
d666 1
a666 1
     const char *template;
d673 1
a673 1
  len = strlen (template);
d675 1
a675 1
  strcpy (sname, template);
@


1.19
log
@Restore reverted code.  Fix bug in reverted code which was eliminating too
many segments.
@
text
@d267 8
d643 49
@


1.18
log
@2000-08-03  H.J. Lu  <hjl@@gnu.org>

	* section.c: Back out the change made by Nick Clifton
	<nickc@@cygnus.com> on 2000-07-31. It breaks stripping dynamic
	binaries.
	* bfd-in2.h: Likewise.
	* elf.c: Likewise.
@
text
@d366 3
d555 3
a557 3
#define STD_SECTION(SEC, FLAGS, SYM, NAME, IDX)	\
  const asymbol * const SYM = (asymbol *) &global_syms[IDX]; \
  const asection SEC = \
d561 2
a562 2
    /* linker_mark, gc_mark, vma, lma, _cooked_size, _raw_size,      */	\
       0,           0,       0,   0,   0,            0,			\
d564 2
a565 2
    /* output_offset, output_section,      alignment_power,          */	\
       0,             (struct sec *) &SEC, 0,				\
@


1.17
log
@Improve section to segment mapping code.
@
text
@a365 3
.  {* Used by the ELF code to mark sections which have been allocated to segments.  *}
.  unsigned int segment_mark : 1;
.
d552 3
a554 3
#define STD_SECTION(SEC, FLAGS, SYM, NAME, IDX)				\
  const asymbol * const SYM = (asymbol *) &global_syms[IDX]; 		\
  const asection SEC = 							\
d558 2
a559 2
    /* linker_mark, gc_mark, segment_mark, vma, lma, _cooked_size,   */	\
       0,           0,       0,            0,   0,   0,            	\
d561 2
a562 2
    /* _raw_size, output_offset, output_section,    alignment_power, */ \
       0,         0,           (struct sec *) &SEC, 0,			\
@


1.16
log
@Avoid negative section sequence ids.
@
text
@d366 3
d555 3
a557 3
#define STD_SECTION(SEC, FLAGS, SYM, NAME, IDX)	\
  const asymbol * const SYM = (asymbol *) &global_syms[IDX]; \
  const asection SEC = \
d561 2
a562 2
    /* linker_mark, gc_mark, vma, lma, _cooked_size, _raw_size,      */	\
       0,           0,       0,   0,   0,            0,			\
d564 2
a565 2
    /* output_offset, output_section,      alignment_power,          */	\
       0,             (struct sec *) &SEC, 0,				\
@


1.15
log
@Add sequence id field to asection.
Tidy comments and replace deprecated CONST with const.
@
text
@d555 2
a556 2
    /* name, id,       index, next, flags, user_set_vma, reloc_done, */	\
    { NAME,  -1-(IDX), 0,     NULL, FLAGS, 0,            0,		\
d696 1
a696 1
  static int section_id = 0;
@


1.14
log
@Applied Stephane Carrez <Stephane.Carrez@@worldnet.fr> patches to add support
for m68hc11 and m68hc12 processors.
@
text
@d2 1
a2 1
   Copyright (C) 1990, 91, 92, 93, 94, 95, 96, 97, 98, 1999
d153 4
a156 4
. {* This structure is used for a comdat section, as in PE.  A comdat
.    section is associated with a particular symbol.  When the linker
.    sees a comdat section, it keeps only one of the sections with a
.    given name and associated with a given symbol. *}
d176 2
a177 2
.        {* The name of the section; the name isn't a copy, the pointer is
.        the same as that passed to bfd_make_section. *}
d179 5
a183 1
.    CONST char *name;
d185 1
a185 1
.        {* Which section is it; 0..nth.      *}
d187 1
a187 1
.   int index;
d189 1
a189 1
.        {* The next section in the list belonging to the BFD, or NULL. *}
d191 1
a191 1
.    struct sec *next;
d193 3
a195 3
.        {* The field flags contains attributes of the section. Some
.           flags are read in from the object file, and some are
.           synthesized from other information.  *}
d197 1
a197 1
.    flagword flags;
d201 2
a202 3
.        {* Tells the OS to allocate space for this section when loading.
.           This is clear for a section containing debug information
.           only. *}
d205 2
a206 2
.        {* Tells the OS to load the section from the file when loading.
.           This is clear for a .bss section. *}
d209 2
a210 2
.        {* The section contains data still to be relocated, so there is
.           some relocation information too. *}
d217 1
a217 2
.        {* A signal to the OS that the section contains read only
.          data. *}
d220 1
a220 1
.        {* The section contains code only. *}
d223 1
a223 1
.        {* The section contains data only. *}
d226 1
a226 1
.        {* The section will reside in ROM. *}
d229 10
a238 10
.        {* The section contains constructor information. This section
.           type is used by the linker to create lists of constructors and
.           destructors used by <<g++>>. When a back end sees a symbol
.           which should be used in a constructor list, it creates a new
.           section for the type of name (e.g., <<__CTOR_LIST__>>), attaches
.           the symbol to it, and builds a relocation. To build the lists
.           of constructors, all the linker has to do is catenate all the
.           sections called <<__CTOR_LIST__>> and relocate the data
.           contained within - exactly the operations it would peform on
.           standard data. *}
d241 2
a242 2
.        {* The section is a constructor, and should be placed at the
.          end of the text, data, or bss section(?). *}
d247 3
a249 3
.        {* The section has contents - a data section could be
.           <<SEC_ALLOC>> | <<SEC_HAS_CONTENTS>>; a debug section could be
.           <<SEC_HAS_CONTENTS>> *}
d252 2
a253 2
.        {* An instruction to the linker to not output the section
.           even if it has information which would normally be written. *}
d256 9
a264 9
.        {* The section is a COFF shared library section.  This flag is
.           only for the linker.  If this type of section appears in
.           the input file, the linker must copy it to the output file
.           without changing the vma or size.  FIXME: Although this
.           was originally intended to be general, it really is COFF
.           specific (and the flag was renamed to indicate this).  It
.           might be cleaner to have some more general mechanism to
.           allow the back end to control what the linker does with
.           sections. *}
d267 5
a271 5
.        {* The section contains common symbols (symbols may be defined
.           multiple times, the value of a symbol is the amount of
.           space it requires, and the largest symbol value is the one
.           used).  Most targets have exactly one of these (which we
.	    translate to bfd_com_section_ptr), but ECOFF has two. *}
d274 4
a277 4
.        {* The section contains only debugging information.  For
.           example, this is set for ELF .debug and .stab sections.
.           strip tests this flag to see if a section can be
.           discarded. *}
d280 3
a282 4
.        {* The contents of this section are held in memory pointed to
.           by the contents field.  This is checked by
.           bfd_get_section_contents, and the data is retrieved from
.           memory if appropriate.  *}
d285 3
a287 3
.        {* The contents of this section are to be excluded by the
.	    linker for executable and shared objects unless those
.	    objects are to be further relocated.  *}
d290 3
a292 3
.	{* The contents of this section are to be sorted by the
.	   based on the address specified in the associated symbol
.	   table.  *}
d295 4
a298 4
.	{* When linking, duplicate sections of the same name should be
.	   discarded, rather than being combined into a single section as
.	   is usually done.  This is similar to how common symbols are
.	   handled.  See SEC_LINK_DUPLICATES below.  *}
d301 2
a302 2
.	{* If SEC_LINK_ONCE is set, this bitfield describes how the linker
.	   should handle duplicate sections.  *}
d305 2
a306 2
.	{* This value for SEC_LINK_DUPLICATES means that duplicate
.	   sections with the same name should simply be discarded. *}
d309 3
a311 3
.	{* This value for SEC_LINK_DUPLICATES means that the linker
.	   should warn if there are any duplicate sections, although
.	   it should still only link one copy.  *}
d314 2
a315 2
.	{* This value for SEC_LINK_DUPLICATES means that the linker
.	   should warn if any duplicate sections are a different size.  *}
d318 3
a320 3
.	{* This value for SEC_LINK_DUPLICATES means that the linker
.	   should warn if any duplicate sections contain different
.	   contents.  *}
d323 4
a326 4
.	{* This section was created by the linker as part of dynamic
.	   relocation or other arcane processing.  It is skipped when
.	   going through the first-pass output, trusting that someone
.	   else up the line will take care of it later.  *}
d329 1
a329 1
.	{* This section should not be subject to garbage collection.  *}
d332 2
a333 2
.	{* This section contains "short" data, and should be placed
.	   "near" the GP.  *}
d336 2
a337 2
. 	{* This section contains data which may be shared with other
.	   executables or shared objects.  *}
d340 4
a343 4
.	{* When a section with this flag is being linked, then if the size of
.          the input section is less than a page, it should not cross a page
.          boundary.  If the size of the input section is one page or more, it
.          should be aligned on a page boundary.  *}
d346 2
a347 2
.	{* Conditionally link this section; do not link if there are no
.          references found to any symbol in the section.  *}
d350 1
a350 1
.	{*  End of section flags.  *}
d352 1
a352 1
.	{* Some internal packed boolean fields.  *}
d354 2
a355 2
.	{* See the vma field.  *}
.	unsigned int user_set_vma : 1;
d357 2
a358 2
.	{* Whether relocations have been processed.  *}
.	unsigned int reloc_done : 1;
d360 2
a361 2
.	{* A mark flag used by some of the linker backends.  *}
.	unsigned int linker_mark : 1;
d363 2
a364 2
.	{* A mark flag used by some linker backends for garbage collection.  *}
.	unsigned int gc_mark : 1;
d366 1
a366 1
.	{* End of internal packed boolean fields.  *}
d368 6
a373 6
.       {*  The virtual memory address of the section - where it will be
.           at run time.  The symbols are relocated against this.  The
.	    user_set_vma flag is maintained by bfd; if it's not set, the
.	    backend can assign addresses (for example, in <<a.out>>, where
.	    the default address for <<.data>> is dependent on the specific
.	    target and various flags).  *}
d375 1
a375 1
.   bfd_vma vma;
d377 3
a379 3
.       {*  The load address of the section - where it would be in a
.           rom image; really only used for writing section header
.	    information. *}
d381 1
a381 1
.   bfd_vma lma;
d383 3
a385 3
.        {* The size of the section in octets, as it will be output.
.           Contains a value even if the section has no contents (e.g., the
.           size of <<.bss>>).  This will be filled in after relocation.  *}
d387 1
a387 1
.   bfd_size_type _cooked_size;
d389 3
a391 3
.        {* The original size on disk of the section, in octets.  Normally this
.	    value is the same as the size, but if some relaxing has
.	    been done, then this value will be bigger.  *}
d393 1
a393 1
.   bfd_size_type _raw_size;
d395 7
a401 7
.        {* If this section is going to be output, then this value is the
.           offset in *bytes* into the output section of the first byte in the
.           input section (byte ==> smallest addressable unit on the
.           target).  In most cases, if this was going to start at the
.           100th octet (8-bit quantity) in the output section, this value
.           would be 100.  However, if the target byte size is 16 bits
.           (bfd_octets_per_byte is "2"), this value would be 50. *}
d403 1
a403 1
.   bfd_vma output_offset;
d405 1
a405 1
.        {* The output section through which to map on output. *}
d407 1
a407 1
.   struct sec *output_section;
d409 2
a410 2
.        {* The alignment requirement of the section, as an exponent of 2 -
.           e.g., 3 aligns to 2^3 (or 8). *}
d412 1
a412 1
.   unsigned int alignment_power;
d414 2
a415 2
.        {* If an input section, a pointer to a vector of relocation
.           records for the data in this section. *}
d417 1
a417 1
.   struct reloc_cache_entry *relocation;
d419 2
a420 2
.        {* If an output section, a pointer to a vector of pointers to
.           relocation records for the data in this section. *}
d422 1
a422 1
.   struct reloc_cache_entry **orelocation;
d424 1
a424 1
.        {* The number of relocation records in one of the above  *}
d426 1
a426 1
.   unsigned reloc_count;
d428 2
a429 2
.        {* Information below is back end specific - and not always used
.           or updated.  *}
d431 1
a431 1
.        {* File position of section data    *}
d433 1
a433 1
.   file_ptr filepos;
d435 1
a435 1
.        {* File position of relocation info *}
d437 1
a437 1
.   file_ptr rel_filepos;
d439 1
a439 1
.        {* File position of line data       *}
d441 1
a441 1
.   file_ptr line_filepos;
d443 1
a443 1
.        {* Pointer to data for applications *}
d445 1
a445 1
.   PTR userdata;
d447 3
a449 3
.        {* If the SEC_IN_MEMORY flag is set, this points to the actual
.           contents.  *}
.   unsigned char *contents;
d451 1
a451 1
.        {* Attached line number information *}
d453 1
a453 1
.   alent *lineno;
d455 1
a455 1
.        {* Number of line number records   *}
d457 1
a457 1
.   unsigned int lineno_count;
d459 1
a459 1
.	 {* Optional information about a COMDAT entry; NULL if not COMDAT *}
d461 1
a461 1
.   struct bfd_comdat_info *comdat;
d463 2
a464 2
.        {* When a section is being output, this value changes as more
.           linenumbers are written out *}
d466 1
a466 1
.   file_ptr moving_line_filepos;
d468 1
a468 1
.        {* What the section number is in the target world  *}
d470 1
a470 1
.   int target_index;
d472 1
a472 1
.   PTR used_by_bfd;
d474 2
a475 2
.        {* If this is a constructor section then here is a list of the
.           relocations created to relocate items within it. *}
d477 1
a477 1
.   struct relent_chain *constructor_chain;
d479 1
a479 1
.        {* The BFD which owns the section. *}
d481 1
a481 1
.   bfd *owner;
d483 3
a485 3
.	 {* A symbol which points at this section only *}
.   struct symbol_cache_entry *symbol;
.   struct symbol_cache_entry **symbol_ptr_ptr;
d487 2
a488 2
.   struct bfd_link_order *link_order_head;
.   struct bfd_link_order *link_order_tail;
d491 5
a495 5
.    {* These sections are global, and are managed by BFD.  The application
.       and target back end are not permitted to change the values in
.	these sections.  New code should use the section_ptr macros rather
.       than referring directly to the const sections.  The const sections
.       may eventually vanish.  *}
d501 1
a501 1
.    {* the absolute section *}
d505 1
a505 1
.    {* Pointer to the undefined section *}
d509 1
a509 1
.    {* Pointer to the common section *}
d512 1
a512 1
.    {* Pointer to the indirect section *}
d555 29
a583 20
    /* name, index, next, flags, set_vma, reloc_done, linker_mark, gc_mark */ \
    { NAME,  0,     NULL, FLAGS, 0,       0,          0,           0,	      \
									      \
    /* vma, lma, _cooked_size, _raw_size, output_offset, output_section, */   \
       0,   0,   0,            0,         0,             (struct sec *) &SEC, \
									      \
    /* alig..., reloc..., orel..., reloc_count, filepos, rel_..., line_... */ \
       0,       NULL,     NULL,    0,           0,       0, 	   0,	      \
									      \
    /* userdata, contents, lineno, lineno_count */ 			      \
       NULL,     NULL,     NULL,   0,                      		      \
									      \
    /* comdat_info, moving_line_filepos, target_index, used_by_bfd,  */       \
       NULL,        0,                   0,            NULL, 		      \
									      \
    /* cons..., owner, symbol */ 					      \
       NULL,    NULL,  (struct symbol_cache_entry *) &global_syms[IDX],       \
									      \
    /* symbol_ptr_ptr,                      link_order_head, ..._tail */      \
       (struct symbol_cache_entry **) &SYM, NULL,            NULL             \
d608 1
a608 1
	asection *bfd_get_section_by_name(bfd *abfd, CONST char *name);
d624 1
a624 1
     CONST char *name;
d640 1
a640 1
	asection *bfd_make_section_old_way(bfd *abfd, CONST char *name);
d664 1
a664 1
     CONST char *name;
d679 1
a679 1
	asection *bfd_make_section_anyway(bfd *abfd, CONST char *name);
d694 1
a694 1
     CONST char *name;
d696 1
d718 1
d759 1
a759 1
	asection *bfd_make_section(bfd *, CONST char *name);
d771 1
a771 1
     CONST char *name;
d1184 1
a1184 1
     that have been discarded in the link script -- they are mapped to 
@


1.13
log
@SEC_BLOCK, SEC_CLINK, and C_STATLAB added (TI COFF support).
@
text
@d555 1
a555 1
    { NAME,  0,     0,    FLAGS, 0,       0,          0,           0,	      \
d561 1
a561 1
       0,       0,        0,       0,           0,       0, 	   0,	      \
d564 1
a564 1
       0,        0,        0,      0,                      		      \
d567 1
a567 1
       NULL,        0,                   0,            0, 		      \
d570 1
a570 1
       0,       0,     (struct symbol_cache_entry *) &global_syms[IDX],       \
d573 1
a573 1
       (struct symbol_cache_entry **) &SYM, 0,               0                \
@


1.12
log
@This lot mainly cleans up `comparison between signed and unsigned' gcc
warnings.  One usused var, and a macro parenthesis fix too.  Also check
input sections are elf when doing gc in elflink.h.
@
text
@d339 10
@


1.11
log
@	* section.c (_bfd_strip_section_from_output): Add info parameter.
	If it passed as non-NULL, use it to check whether any input BFD
	has an input section which uses this output section.  Change all
	callers.
	* bfd-in2.h: Rebuild.

	* bfd-in.h: Move declarations of bfd_get_elf_phdr_upper_bound and
	bfd_get_elf_phdrs in from bfd-in2.h, correcting patch of
	1999-11-29.
	* bfd-in2.h: Rebuild.
@
text
@d511 2
a512 1
.     (section->reloc_done ? (abort(),1): (section)->_raw_size)
d514 2
a515 1
.     ((section->reloc_done) ? (section)->_cooked_size: (abort(),1))
@


1.10
log
@Apply Tim walls octest vs bytes patch
@
text
@d1103 1
a1103 1
	(asection *section);
d1106 4
a1109 2
	Remove @@var{section} from the output.  If the output section becomes
	empty, remove it from the output bfd.
d1112 2
a1113 1
_bfd_strip_section_from_output (s)
d1118 1
d1120 5
a1124 1
  /* Excise the input section from the link order.  */
d1139 20
d1162 1
a1162 1
  if (!os->link_order_head && os->owner)
@


1.9
log
@1999-09-06  Donn Terry  <donn@@interix.com>

	* section.c (struct bfd_comdat_info): Define.
	(asection): Add comdat field.
	(STD_SECTION): Initialize comdat field.
	(bfd_make_section_anyway): Likewise.
	* bfd-in2.h: Rebuild.
@
text
@d372 3
a374 3
.        {* The size of the section in bytes, as it will be output.
.           contains a value even if the section has no contents (e.g., the
.           size of <<.bss>>). This will be filled in after relocation *}
d378 1
a378 1
.        {* The original size on disk of the section, in bytes.  Normally this
d385 6
a390 3
.           offset into the output section of the first byte in the input
.           section. E.g., if this was going to start at the 100th byte in
.           the output section, this value would be 100. *}
d926 1
a926 1
	@@var{offset} for @@var{count} bytes.
@


1.8
log
@	* section.c (SEC_SMALL_DATA): Rename from SEC_SHORT.
	* bfd-in2.h: Rebuild.
@
text
@d153 21
d445 4
d539 21
a559 3
    { NAME, 0, 0, FLAGS, 0, 0, 0, 0, 0, 0, 0, 0, 0, (asection *) &SEC, \
      0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, \
      (asymbol *) &global_syms[IDX], (asymbol **) &SYM, 0, 0 }
d702 1
@


1.7
log
@1999-08-08  Mumit Khan  <khan@@xraylith.wisc.edu>

	* section.c (SEC_SHARED): Define.
	* coffcode.h (sec_to_styp_flags): Handle SEC_SHARED.
	(styp_to_sec_flags): Likewise.
	* peicode.h (coff_swap_scnhdr_out): Likewise.
	* bfd-in2.h: Rebuild.

1999-08-08  Ian Lance Taylor  <ian@@zembu.com>

	* coffcode.h (coff_classify_symbol): Comment out part of
	1999-08-05 change which breaks cygwin DLLs.
@
text
@d312 1
a312 1
.#define SEC_SHORT 0x2000000
@


1.6
log
@	* section.c (global_syms): Only initialize union field if
	__STDC__.
@
text
@d314 4
@


1.5
log
@	* Many files: Changes to avoid gcc warnings: Add ATTRIBUTE_UNUSED
	as appropriate.  Fill in structure initializations.  Add variable
	initializations.  Add casts.
	* dwarf1.c (parse_line_table): Change eachLine to unsigned long.
	(dwarf1_unit_find_nearest_line): Change i to unsigned long.
@
text
@d484 12
d498 1
d501 4
a504 9
 /* the_bfd, name, value, attr, section [, udata] */
  {0, BFD_COM_SECTION_NAME, 0, BSF_SECTION_SYM,
   (asection *) &bfd_com_section, { 0 }},
  {0, BFD_UND_SECTION_NAME, 0, BSF_SECTION_SYM,
   (asection *) &bfd_und_section, { 0 }},
  {0, BFD_ABS_SECTION_NAME, 0, BSF_SECTION_SYM,
   (asection *) &bfd_abs_section, { 0 }},
  {0, BFD_IND_SECTION_NAME, 0, BSF_SECTION_SYM,
   (asection *) &bfd_ind_section, { 0 }},
@


1.4
log
@        * section.c (_bfd_strip_section_from_output): Ignore sections
        DISCARDed by the link script.
@
text
@d2 1
a2 1
   Copyright (C) 1990, 91, 92, 93, 94, 95, 96, 1997
d489 8
a496 4
  {0, BFD_COM_SECTION_NAME, 0, BSF_SECTION_SYM, (asection *) &bfd_com_section},
  {0, BFD_UND_SECTION_NAME, 0, BSF_SECTION_SYM, (asection *) &bfd_und_section},
  {0, BFD_ABS_SECTION_NAME, 0, BSF_SECTION_SYM, (asection *) &bfd_abs_section},
  {0, BFD_IND_SECTION_NAME, 0, BSF_SECTION_SYM, (asection *) &bfd_ind_section},
d744 1
a744 1
     bfd *abfd;
@


1.3
log
@        * section.c (SEC_SHORT): Define.
        * bfd-in2.h: Rebuild.
@
text
@d1068 4
a1071 2
  /* If the output section is empty, remove it too.  */
  if (!os->link_order_head)
@


1.2
log
@        * section.c (_bfd_strip_section_from_output): Remove output
        sections with no initial link_order.
@
text
@d310 4
@


1.1
log
@Initial revision
@
text
@d1049 1
a1054 1
	/* Excise the input section.  */
d1061 2
d1064 5
a1068 1
	if (!os->link_order_head)
d1070 3
a1072 8
	    /* Excise the output section.  */
	    for (spp = &os->owner->sections; *spp; spp = &(*spp)->next)
	      if (*spp == os)
		{
		  *spp = os->next;
		  os->owner->section_count--;
		  break;
		}
d1074 1
a1074 2
	break;
      }
@


1.1.1.1
log
@19990502 sourceware import
@
text
@@

