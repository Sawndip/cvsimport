head	1.34;
access;
symbols
	sid-snapshot-20180601:1.34
	sid-snapshot-20180501:1.34
	sid-snapshot-20180401:1.34
	sid-snapshot-20180301:1.34
	sid-snapshot-20180201:1.34
	sid-snapshot-20180101:1.34
	sid-snapshot-20171201:1.34
	sid-snapshot-20171101:1.34
	sid-snapshot-20171001:1.34
	sid-snapshot-20170901:1.34
	sid-snapshot-20170801:1.34
	sid-snapshot-20170701:1.34
	sid-snapshot-20170601:1.34
	sid-snapshot-20170501:1.34
	sid-snapshot-20170401:1.34
	sid-snapshot-20170301:1.34
	sid-snapshot-20170201:1.34
	sid-snapshot-20170101:1.34
	sid-snapshot-20161201:1.34
	sid-snapshot-20161101:1.34
	sid-snapshot-20160901:1.34
	sid-snapshot-20160801:1.34
	sid-snapshot-20160701:1.34
	sid-snapshot-20160601:1.34
	sid-snapshot-20160501:1.34
	sid-snapshot-20160401:1.34
	sid-snapshot-20160301:1.34
	sid-snapshot-20160201:1.34
	sid-snapshot-20160101:1.34
	sid-snapshot-20151201:1.34
	sid-snapshot-20151101:1.34
	sid-snapshot-20151001:1.34
	sid-snapshot-20150901:1.34
	sid-snapshot-20150801:1.34
	sid-snapshot-20150701:1.34
	sid-snapshot-20150601:1.34
	sid-snapshot-20150501:1.34
	sid-snapshot-20150401:1.34
	sid-snapshot-20150301:1.34
	sid-snapshot-20150201:1.34
	sid-snapshot-20150101:1.34
	sid-snapshot-20141201:1.34
	sid-snapshot-20141101:1.34
	sid-snapshot-20141001:1.34
	sid-snapshot-20140901:1.34
	sid-snapshot-20140801:1.34
	sid-snapshot-20140701:1.34
	sid-snapshot-20140601:1.34
	sid-snapshot-20140501:1.34
	sid-snapshot-20140401:1.34
	sid-snapshot-20140301:1.34
	sid-snapshot-20140201:1.34
	sid-snapshot-20140101:1.34
	sid-snapshot-20131201:1.34
	sid-snapshot-20131101:1.34
	sid-snapshot-20131001:1.34
	binutils-2_24-branch:1.34.0.2
	binutils-2_24-branchpoint:1.34
	binutils-2_21_1:1.30
	sid-snapshot-20130901:1.34
	gdb_7_6_1-2013-08-30-release:1.32
	sid-snapshot-20130801:1.34
	sid-snapshot-20130701:1.34
	sid-snapshot-20130601:1.33
	sid-snapshot-20130501:1.33
	gdb_7_6-2013-04-26-release:1.32
	sid-snapshot-20130401:1.32
	binutils-2_23_2:1.32
	gdb_7_6-branch:1.32.0.6
	gdb_7_6-2013-03-12-branchpoint:1.32
	sid-snapshot-20130301:1.32
	sid-snapshot-20130201:1.32
	sid-snapshot-20130101:1.32
	sid-snapshot-20121201:1.32
	gdb_7_5_1-2012-11-29-release:1.32
	binutils-2_23_1:1.32
	sid-snapshot-20121101:1.32
	binutils-2_23:1.32
	sid-snapshot-20121001:1.32
	sid-snapshot-20120901:1.32
	gdb_7_5-2012-08-17-release:1.32
	sid-snapshot-20120801:1.32
	binutils-2_23-branch:1.32.0.4
	binutils-2_23-branchpoint:1.32
	gdb_7_5-branch:1.32.0.2
	gdb_7_5-2012-07-18-branchpoint:1.32
	sid-snapshot-20120701:1.32
	sid-snapshot-20120601:1.32
	sid-snapshot-20120501:1.32
	binutils-2_22_branch:1.31.0.6
	gdb_7_4_1-2012-04-26-release:1.31
	sid-snapshot-20120401:1.32
	sid-snapshot-20120301:1.32
	sid-snapshot-20120201:1.32
	gdb_7_4-2012-01-24-release:1.31
	sid-snapshot-20120101:1.31
	gdb_7_4-branch:1.31.0.4
	gdb_7_4-2011-12-13-branchpoint:1.31
	sid-snapshot-20111201:1.31
	binutils-2_22:1.31
	sid-snapshot-20111101:1.31
	sid-snapshot-20111001:1.31
	binutils-2_22-branch:1.31.0.2
	binutils-2_22-branchpoint:1.31
	gdb_7_3_1-2011-09-04-release:1.30
	sid-snapshot-20110901:1.31
	sid-snapshot-20110801:1.31
	gdb_7_3-2011-07-26-release:1.30
	sid-snapshot-20110701:1.30
	sid-snapshot-20110601:1.30
	sid-snapshot-20110501:1.30
	gdb_7_3-branch:1.30.0.6
	gdb_7_3-2011-04-01-branchpoint:1.30
	sid-snapshot-20110401:1.30
	sid-snapshot-20110301:1.30
	sid-snapshot-20110201:1.30
	sid-snapshot-20110101:1.30
	binutils-2_21:1.30
	sid-snapshot-20101201:1.30
	binutils-2_21-branch:1.30.0.4
	binutils-2_21-branchpoint:1.30
	sid-snapshot-20101101:1.30
	sid-snapshot-20101001:1.30
	binutils-2_20_1:1.25.26.1
	gdb_7_2-2010-09-02-release:1.30
	sid-snapshot-20100901:1.30
	sid-snapshot-20100801:1.30
	gdb_7_2-branch:1.30.0.2
	gdb_7_2-2010-07-07-branchpoint:1.30
	sid-snapshot-20100701:1.30
	sid-snapshot-20100601:1.30
	sid-snapshot-20100501:1.30
	sid-snapshot-20100401:1.30
	gdb_7_1-2010-03-18-release:1.28
	sid-snapshot-20100301:1.28
	gdb_7_1-branch:1.28.0.2
	gdb_7_1-2010-02-18-branchpoint:1.28
	sid-snapshot-20100201:1.26
	sid-snapshot-20100101:1.26
	gdb_7_0_1-2009-12-22-release:1.25
	sid-snapshot-20091201:1.26
	sid-snapshot-20091101:1.26
	binutils-2_20:1.25.26.1
	gdb_7_0-2009-10-06-release:1.25
	sid-snapshot-20091001:1.26
	gdb_7_0-branch:1.25.0.30
	gdb_7_0-2009-09-16-branchpoint:1.25
	arc-sim-20090309:1.25
	binutils-arc-20081103-branch:1.25.0.28
	binutils-arc-20081103-branchpoint:1.25
	binutils-2_20-branch:1.25.0.26
	binutils-2_20-branchpoint:1.25
	sid-snapshot-20090901:1.25
	sid-snapshot-20090801:1.25
	msnyder-checkpoint-072509-branch:1.25.0.24
	msnyder-checkpoint-072509-branchpoint:1.25
	sid-snapshot-20090701:1.25
	dje-cgen-play1-branch:1.25.0.22
	dje-cgen-play1-branchpoint:1.25
	sid-snapshot-20090601:1.25
	sid-snapshot-20090501:1.25
	sid-snapshot-20090401:1.25
	arc-20081103-branch:1.25.0.20
	arc-20081103-branchpoint:1.25
	arc-insight_6_8-branch:1.25.0.18
	arc-insight_6_8-branchpoint:1.25
	insight_6_8-branch:1.25.0.16
	insight_6_8-branchpoint:1.25
	sid-snapshot-20090301:1.25
	binutils-2_19_1:1.25
	sid-snapshot-20090201:1.25
	sid-snapshot-20090101:1.25
	reverse-20081226-branch:1.25.0.14
	reverse-20081226-branchpoint:1.25
	sid-snapshot-20081201:1.25
	multiprocess-20081120-branch:1.25.0.12
	multiprocess-20081120-branchpoint:1.25
	sid-snapshot-20081101:1.25
	binutils-2_19:1.25
	sid-snapshot-20081001:1.25
	reverse-20080930-branch:1.25.0.10
	reverse-20080930-branchpoint:1.25
	binutils-2_19-branch:1.25.0.8
	binutils-2_19-branchpoint:1.25
	sid-snapshot-20080901:1.25
	sid-snapshot-20080801:1.25
	reverse-20080717-branch:1.25.0.6
	reverse-20080717-branchpoint:1.25
	sid-snapshot-20080701:1.25
	msnyder-reverse-20080609-branch:1.25.0.4
	msnyder-reverse-20080609-branchpoint:1.25
	drow-reverse-20070409-branch:1.23.0.32
	drow-reverse-20070409-branchpoint:1.23
	sid-snapshot-20080601:1.25
	sid-snapshot-20080501:1.25
	sid-snapshot-20080403:1.25
	sid-snapshot-20080401:1.25
	gdb_6_8-2008-03-27-release:1.25
	sid-snapshot-20080301:1.25
	gdb_6_8-branch:1.25.0.2
	gdb_6_8-2008-02-26-branchpoint:1.25
	sid-snapshot-20080201:1.25
	sid-snapshot-20080101:1.24
	sid-snapshot-20071201:1.24
	sid-snapshot-20071101:1.24
	gdb_6_7_1-2007-10-29-release:1.24
	gdb_6_7-2007-10-10-release:1.24
	sid-snapshot-20071001:1.24
	gdb_6_7-branch:1.24.0.4
	gdb_6_7-2007-09-07-branchpoint:1.24
	binutils-2_18:1.24
	binutils-2_18-branch:1.24.0.2
	binutils-2_18-branchpoint:1.24
	insight_6_6-20070208-release:1.23
	binutils-csl-coldfire-4_1-32:1.23
	binutils-csl-sourcerygxx-4_1-32:1.23
	gdb_6_6-2006-12-18-release:1.23
	binutils-csl-innovasic-fido-3_4_4-33:1.23
	binutils-csl-sourcerygxx-3_4_4-32:1.20.2.1
	binutils-csl-coldfire-4_1-30:1.23
	binutils-csl-sourcerygxx-4_1-30:1.23
	binutils-csl-coldfire-4_1-28:1.23
	binutils-csl-sourcerygxx-4_1-29:1.23
	binutils-csl-sourcerygxx-4_1-28:1.23
	gdb_6_6-branch:1.23.0.30
	gdb_6_6-2006-11-15-branchpoint:1.23
	binutils-csl-arm-2006q3-27:1.23
	binutils-csl-sourcerygxx-4_1-27:1.23
	binutils-csl-arm-2006q3-26:1.23
	binutils-csl-sourcerygxx-4_1-26:1.23
	binutils-csl-sourcerygxx-4_1-25:1.23
	binutils-csl-sourcerygxx-4_1-24:1.23
	binutils-csl-sourcerygxx-4_1-23:1.23
	insight_6_5-20061003-release:1.23
	gdb-csl-symbian-6_4_50_20060226-12:1.23
	binutils-csl-sourcerygxx-4_1-21:1.23
	binutils-csl-arm-2006q3-21:1.23
	binutils-csl-sourcerygxx-4_1-22:1.23
	binutils-csl-palmsource-arm-prelinker-1_0-1:1.23
	binutils-csl-sourcerygxx-4_1-20:1.23
	binutils-csl-arm-2006q3-19:1.23
	binutils-csl-sourcerygxx-4_1-19:1.23
	binutils-csl-sourcerygxx-4_1-18:1.23
	binutils-csl-renesas-4_1-9:1.23
	gdb-csl-sourcerygxx-3_4_4-25:1.23
	binutils-csl-sourcerygxx-3_4_4-25:1.20.2.1
	nickrob-async-20060828-mergepoint:1.23
	gdb-csl-symbian-6_4_50_20060226-11:1.23
	binutils-csl-renesas-4_1-8:1.23
	binutils-csl-renesas-4_1-7:1.23
	binutils-csl-renesas-4_1-6:1.23
	gdb-csl-sourcerygxx-4_1-17:1.23
	binutils-csl-sourcerygxx-4_1-17:1.23
	gdb-csl-20060226-branch-local-2:1.23
	gdb-csl-sourcerygxx-4_1-14:1.23
	binutils-csl-sourcerygxx-4_1-14:1.23
	binutils-csl-sourcerygxx-4_1-15:1.23
	gdb-csl-sourcerygxx-4_1-13:1.23
	binutils-csl-sourcerygxx-4_1-13:1.23
	binutils-2_17:1.23
	gdb-csl-sourcerygxx-4_1-12:1.23
	binutils-csl-sourcerygxx-4_1-12:1.23
	gdb-csl-sourcerygxx-3_4_4-21:1.23
	binutils-csl-sourcerygxx-3_4_4-21:1.23
	gdb_6_5-20060621-release:1.23
	binutils-csl-wrs-linux-3_4_4-24:1.20
	binutils-csl-wrs-linux-3_4_4-23:1.20
	gdb-csl-sourcerygxx-4_1-9:1.23
	binutils-csl-sourcerygxx-4_1-9:1.23
	gdb-csl-sourcerygxx-4_1-8:1.23
	binutils-csl-sourcerygxx-4_1-8:1.23
	gdb-csl-sourcerygxx-4_1-7:1.23
	binutils-csl-sourcerygxx-4_1-7:1.23
	gdb-csl-arm-2006q1-6:1.23
	binutils-csl-arm-2006q1-6:1.23
	gdb-csl-sourcerygxx-4_1-6:1.23
	binutils-csl-sourcerygxx-4_1-6:1.23
	binutils-csl-wrs-linux-3_4_4-22:1.20
	gdb-csl-symbian-6_4_50_20060226-10:1.23
	gdb-csl-symbian-6_4_50_20060226-9:1.23
	gdb-csl-symbian-6_4_50_20060226-8:1.23
	gdb-csl-coldfire-4_1-11:1.23
	binutils-csl-coldfire-4_1-11:1.23
	gdb-csl-sourcerygxx-3_4_4-19:1.23
	binutils-csl-sourcerygxx-3_4_4-19:1.23
	gdb-csl-coldfire-4_1-10:1.23
	gdb_6_5-branch:1.23.0.28
	gdb_6_5-2006-05-14-branchpoint:1.23
	binutils-csl-coldfire-4_1-10:1.23
	gdb-csl-sourcerygxx-4_1-5:1.23
	binutils-csl-sourcerygxx-4_1-5:1.23
	nickrob-async-20060513-branch:1.23.0.26
	nickrob-async-20060513-branchpoint:1.23
	gdb-csl-sourcerygxx-4_1-4:1.23
	binutils-csl-sourcerygxx-4_1-4:1.23
	msnyder-reverse-20060502-branch:1.23.0.24
	msnyder-reverse-20060502-branchpoint:1.23
	binutils-csl-wrs-linux-3_4_4-21:1.20
	gdb-csl-morpho-4_1-4:1.23
	binutils-csl-morpho-4_1-4:1.23
	gdb-csl-sourcerygxx-3_4_4-17:1.23
	binutils-csl-sourcerygxx-3_4_4-17:1.23
	binutils-csl-wrs-linux-3_4_4-20:1.20
	readline_5_1-import-branch:1.23.0.22
	readline_5_1-import-branchpoint:1.23
	gdb-csl-20060226-branch-merge-to-csl-symbian-1:1.23
	binutils-2_17-branch:1.23.0.20
	binutils-2_17-branchpoint:1.23
	gdb-csl-symbian-20060226-branch:1.23.0.18
	gdb-csl-symbian-20060226-branchpoint:1.23
	gdb-csl-20060226-branch-merge-to-csl-local-1:1.23
	msnyder-reverse-20060331-branch:1.23.0.16
	msnyder-reverse-20060331-branchpoint:1.23
	binutils-csl-2_17-branch:1.23.0.14
	binutils-csl-2_17-branchpoint:1.23
	gdb-csl-available-20060303-branch:1.23.0.12
	gdb-csl-available-20060303-branchpoint:1.23
	gdb-csl-20060226-branch:1.23.0.10
	gdb-csl-20060226-branchpoint:1.23
	gdb_6_4-20051202-release:1.23
	msnyder-fork-checkpoint-branch:1.23.0.8
	msnyder-fork-checkpoint-branchpoint:1.23
	gdb-csl-gxxpro-6_3-branch:1.23.0.6
	gdb-csl-gxxpro-6_3-branchpoint:1.23
	gdb_6_4-branch:1.23.0.4
	gdb_6_4-2005-11-01-branchpoint:1.23
	gdb-csl-arm-20051020-branch:1.23.0.2
	gdb-csl-arm-20051020-branchpoint:1.23
	binutils-csl-gxxpro-3_4-branch:1.20.2.1.0.2
	binutils-csl-gxxpro-3_4-branchpoint:1.20.2.1
	binutils-2_16_1:1.20.2.1
	msnyder-tracepoint-checkpoint-branch:1.22.0.2
	msnyder-tracepoint-checkpoint-branchpoint:1.22
	gdb-csl-arm-20050325-2005-q1b:1.20
	binutils-csl-arm-2005q1b:1.20
	binutils-2_16:1.20
	gdb-csl-arm-20050325-2005-q1a:1.20
	binutils-csl-arm-2005q1a:1.20
	csl-arm-20050325-branch:1.20.0.6
	csl-arm-20050325-branchpoint:1.20
	binutils-csl-arm-2005q1-branch:1.20.0.4
	binutils-csl-arm-2005q1-branchpoint:1.20
	binutils-2_16-branch:1.20.0.2
	binutils-2_16-branchpoint:1.20
	csl-arm-2004-q3d:1.18
	gdb_6_3-20041109-release:1.17
	gdb_6_3-branch:1.17.0.2
	gdb_6_3-20041019-branchpoint:1.17
	csl-arm-2004-q3:1.17
	drow_intercu-merge-20040921:1.17
	drow_intercu-merge-20040915:1.17
	jimb-gdb_6_2-e500-branch:1.14.0.20
	jimb-gdb_6_2-e500-branchpoint:1.14
	gdb_6_2-20040730-release:1.14
	gdb_6_2-branch:1.14.0.16
	gdb_6_2-2004-07-10-gmt-branchpoint:1.14
	gdb_6_1_1-20040616-release:1.14
	binutils-2_15:1.14
	binutils-2_15-branchpoint:1.14
	csl-arm-2004-q1a:1.14
	csl-arm-2004-q1:1.14
	gdb_6_1-2004-04-05-release:1.14
	drow_intercu-merge-20040402:1.14
	drow_intercu-merge-20040327:1.14
	ezannoni_pie-20040323-branch:1.14.0.14
	ezannoni_pie-20040323-branchpoint:1.14
	cagney_tramp-20040321-mergepoint:1.14
	cagney_tramp-20040309-branch:1.14.0.12
	cagney_tramp-20040309-branchpoint:1.14
	gdb_6_1-branch:1.14.0.10
	gdb_6_1-2004-03-01-gmt-branchpoint:1.14
	drow_intercu-20040221-branch:1.14.0.8
	drow_intercu-20040221-branchpoint:1.14
	binutils-2_15-branch:1.14.0.6
	cagney_bfdfile-20040213-branch:1.14.0.4
	cagney_bfdfile-20040213-branchpoint:1.14
	drow-cplus-merge-20040208:1.14
	carlton_dictionary-20040126-merge:1.14
	cagney_bigcore-20040122-branch:1.14.0.2
	cagney_bigcore-20040122-branchpoint:1.14
	drow-cplus-merge-20040113:1.14
	csl-arm-2003-q4:1.14
	drow-cplus-merge-20031224:1.14
	drow-cplus-merge-20031220:1.14
	carlton_dictionary-20031215-merge:1.14
	drow-cplus-merge-20031214:1.14
	carlton-dictionary-20031111-merge:1.14
	gdb_6_0-2003-10-04-release:1.12
	kettenis_sparc-20030918-branch:1.13.0.6
	kettenis_sparc-20030918-branchpoint:1.13
	carlton_dictionary-20030917-merge:1.13
	ezannoni_pie-20030916-branchpoint:1.13
	ezannoni_pie-20030916-branch:1.13.0.4
	cagney_x86i386-20030821-branch:1.13.0.2
	cagney_x86i386-20030821-branchpoint:1.13
	carlton_dictionary-20030805-merge:1.13
	carlton_dictionary-20030627-merge:1.12
	gdb_6_0-branch:1.12.0.2
	gdb_6_0-2003-06-23-branchpoint:1.12
	jimb-ppc64-linux-20030613-branch:1.9.0.2
	jimb-ppc64-linux-20030613-branchpoint:1.9
	binutils-2_14:1.8
	cagney_convert-20030606-branch:1.8.0.28
	cagney_convert-20030606-branchpoint:1.8
	cagney_writestrings-20030508-branch:1.8.0.26
	cagney_writestrings-20030508-branchpoint:1.8
	jimb-ppc64-linux-20030528-branch:1.8.0.24
	jimb-ppc64-linux-20030528-branchpoint:1.8
	carlton_dictionary-20030523-merge:1.8
	cagney_fileio-20030521-branch:1.8.0.22
	cagney_fileio-20030521-branchpoint:1.8
	kettenis_i386newframe-20030517-mergepoint:1.8
	jimb-ppc64-linux-20030509-branch:1.8.0.20
	jimb-ppc64-linux-20030509-branchpoint:1.8
	kettenis_i386newframe-20030504-mergepoint:1.8
	carlton_dictionary-20030430-merge:1.8
	binutils-2_14-branch:1.8.0.18
	binutils-2_14-branchpoint:1.8
	kettenis_i386newframe-20030419-branch:1.8.0.16
	kettenis_i386newframe-20030419-branchpoint:1.8
	carlton_dictionary-20030416-merge:1.8
	cagney_frameaddr-20030409-mergepoint:1.8
	kettenis_i386newframe-20030406-branch:1.8.0.14
	kettenis_i386newframe-20030406-branchpoint:1.8
	cagney_frameaddr-20030403-branchpoint:1.8
	cagney_frameaddr-20030403-branch:1.8.0.12
	cagney_framebase-20030330-mergepoint:1.8
	cagney_framebase-20030326-branch:1.8.0.10
	cagney_framebase-20030326-branchpoint:1.8
	cagney_lazyid-20030317-branch:1.8.0.8
	cagney_lazyid-20030317-branchpoint:1.8
	kettenis-i386newframe-20030316-mergepoint:1.8
	offbyone-20030313-branch:1.8.0.6
	offbyone-20030313-branchpoint:1.8
	kettenis-i386newframe-20030308-branch:1.8.0.4
	kettenis-i386newframe-20030308-branchpoint:1.8
	carlton_dictionary-20030305-merge:1.8
	cagney_offbyone-20030303-branch:1.8.0.2
	cagney_offbyone-20030303-branchpoint:1.8
	carlton_dictionary-20030207-merge:1.7
	interps-20030202-branch:1.6.0.4
	interps-20030202-branchpoint:1.6
	cagney-unwind-20030108-branch:1.6.0.2
	cagney-unwind-20030108-branchpoint:1.6
	binutils-2_13_2_1:1.4
	binutils-2_13_2:1.4
	carlton_dictionary-20021223-merge:1.6
	gdb_5_3-2002-12-12-release:1.4
	carlton_dictionary-20021115-merge:1.5
	binutils-2_13_1:1.4
	kseitz_interps-20021105-merge:1.4
	kseitz_interps-20021103-merge:1.4
	drow-cplus-merge-20021020:1.4
	drow-cplus-merge-20021025:1.4
	carlton_dictionary-20021025-merge:1.4
	carlton_dictionary-20021011-merge:1.4
	drow-cplus-branch:1.4.0.14
	drow-cplus-branchpoint:1.4
	kseitz_interps-20020930-merge:1.4
	carlton_dictionary-20020927-merge:1.4
	carlton_dictionary-branch:1.4.0.12
	carlton_dictionary-20020920-branchpoint:1.4
	sid-20020905-branchpoint:1.4
	sid-20020905-branch:1.4.0.10
	gdb_5_3-branch:1.4.0.8
	gdb_5_3-2002-09-04-branchpoint:1.4
	kseitz_interps-20020829-merge:1.4
	cagney_sysregs-20020825-branch:1.4.0.6
	cagney_sysregs-20020825-branchpoint:1.4
	readline_4_3-import-branch:1.4.0.4
	readline_4_3-import-branchpoint:1.4
	binutils-2_13:1.4
	gdb_5_2_1-2002-07-23-release:1.1
	binutils-2_13-branchpoint:1.4
	binutils-2_13-branch:1.4.0.2
	kseitz_interps-20020528-branch:1.3.0.6
	kseitz_interps-20020528-branchpoint:1.3
	cagney_regbuf-20020515-branch:1.3.0.4
	cagney_regbuf-20020515-branchpoint:1.3
	binutils-2_12_1:1.1.2.1
	jimb-macro-020506-branch:1.3.0.2
	jimb-macro-020506-branchpoint:1.3
	gdb_5_2-2002-04-29-release:1.1
	binutils-2_12:1.1
	gdb_5_2-branch:1.1.0.4
	gdb_5_2-2002-03-03-branchpoint:1.1
	binutils-2_12-branch:1.1.0.2
	binutils-2_12-branchpoint:1.1
	binutils_latest_snapshot:1.34;
locks; strict;
comment	@ * @;


1.34
date	2013.07.01.03.45.05;	author amodra;	state Exp;
branches;
next	1.33;

1.33
date	2013.04.22.03.11.39;	author amodra;	state Exp;
branches;
next	1.32;

1.32
date	2012.01.11.09.28.45;	author amodra;	state Exp;
branches;
next	1.31;

1.31
date	2011.07.14.03.28.21;	author amodra;	state Exp;
branches;
next	1.30;

1.30
date	2010.03.15.01.59.57;	author amodra;	state Exp;
branches;
next	1.29;

1.29
date	2010.03.14.07.05.36;	author amodra;	state Exp;
branches;
next	1.28;

1.28
date	2010.02.08.13.50.16;	author amodra;	state Exp;
branches;
next	1.27;

1.27
date	2010.02.03.12.03.34;	author amodra;	state Exp;
branches;
next	1.26;

1.26
date	2009.09.21.11.51.01;	author amodra;	state Exp;
branches;
next	1.25;

1.25
date	2008.01.15.07.25.49;	author amodra;	state Exp;
branches
	1.25.26.1;
next	1.24;

1.24
date	2007.07.03.14.26.41;	author nickc;	state Exp;
branches;
next	1.23;

1.23
date	2005.06.07.12.12.11;	author amodra;	state Exp;
branches;
next	1.22;

1.22
date	2005.05.04.15.53.26;	author nickc;	state Exp;
branches;
next	1.21;

1.21
date	2005.05.04.07.19.25;	author nickc;	state Exp;
branches;
next	1.20;

1.20
date	2005.03.03.11.41.00;	author amodra;	state Exp;
branches
	1.20.2.1;
next	1.19;

1.19
date	2005.01.06.09.03.53;	author amodra;	state Exp;
branches;
next	1.18;

1.18
date	2004.11.04.11.55.12;	author amodra;	state Exp;
branches;
next	1.17;

1.17
date	2004.08.19.07.47.25;	author jakub;	state Exp;
branches;
next	1.16;

1.16
date	2004.08.10.11.23.01;	author amodra;	state Exp;
branches;
next	1.15;

1.15
date	2004.08.09.03.14.11;	author amodra;	state Exp;
branches;
next	1.14;

1.14
date	2003.11.04.06.16.37;	author amodra;	state Exp;
branches
	1.14.8.1;
next	1.13;

1.13
date	2003.07.10.00.37.26;	author amodra;	state Exp;
branches;
next	1.12;

1.12
date	2003.06.20.05.30.46;	author amodra;	state Exp;
branches;
next	1.11;

1.11
date	2003.06.19.13.50.35;	author amodra;	state Exp;
branches;
next	1.10;

1.10
date	2003.06.19.11.49.02;	author amodra;	state Exp;
branches;
next	1.9;

1.9
date	2003.06.08.14.06.38;	author amodra;	state Exp;
branches;
next	1.8;

1.8
date	2003.02.09.04.36.23;	author amodra;	state Exp;
branches;
next	1.7;

1.7
date	2003.02.04.14.50.50;	author amodra;	state Exp;
branches;
next	1.6;

1.6
date	2002.11.30.08.39.39;	author amodra;	state Exp;
branches;
next	1.5;

1.5
date	2002.11.12.07.55.43;	author amodra;	state Exp;
branches;
next	1.4;

1.4
date	2002.07.01.08.06.45;	author amodra;	state Exp;
branches
	1.4.12.1
	1.4.14.1;
next	1.3;

1.3
date	2002.05.02.09.48.13;	author amodra;	state Exp;
branches
	1.3.6.1;
next	1.2;

1.2
date	2002.05.01.02.34.20;	author amodra;	state Exp;
branches;
next	1.1;

1.1
date	2002.01.16.05.50.03;	author amodra;	state Exp;
branches
	1.1.2.1;
next	;

1.25.26.1
date	2009.09.21.11.55.16;	author amodra;	state Exp;
branches;
next	;

1.20.2.1
date	2005.06.08.06.43.31;	author amodra;	state Exp;
branches;
next	;

1.14.8.1
date	2004.09.16.17.00.31;	author drow;	state Exp;
branches;
next	;

1.4.12.1
date	2002.11.15.19.18.27;	author carlton;	state Exp;
branches;
next	1.4.12.2;

1.4.12.2
date	2002.12.23.19.37.48;	author carlton;	state Exp;
branches;
next	1.4.12.3;

1.4.12.3
date	2003.02.07.19.17.39;	author carlton;	state Exp;
branches;
next	1.4.12.4;

1.4.12.4
date	2003.03.06.00.56.16;	author carlton;	state Exp;
branches;
next	1.4.12.5;

1.4.12.5
date	2003.06.27.21.49.22;	author carlton;	state Exp;
branches;
next	1.4.12.6;

1.4.12.6
date	2003.08.05.17.12.51;	author carlton;	state Exp;
branches;
next	1.4.12.7;

1.4.12.7
date	2003.11.11.23.50.23;	author carlton;	state Exp;
branches;
next	;

1.4.14.1
date	2003.12.14.20.26.44;	author drow;	state Exp;
branches;
next	;

1.3.6.1
date	2002.07.22.21.46.46;	author kseitz;	state Exp;
branches;
next	;

1.1.2.1
date	2002.05.09.11.50.27;	author amodra;	state Exp;
branches;
next	;


desc
@@


1.34
log
@bfd/
	* elf64-ppc.h (ppc64_elf_toc): Delete.
	(ppc64_elf_set_toc): Declare.
	* elf64-ppc.c (ppc64_elf_toc_reloc): Replace call to ppc64_elf_toc
	with call the ppc64_elf_set_toc.
	(ppc64_elf_toc_ha_reloc, ppc64_elf_toc64_reloc): Likewise.
	(ppc64_elf_start_multitoc_partition): Likewise.
	(struct ppc_link_hash_table): Delete dot_toc_dot.  Replace all uses
	with elf.hgot.
	(ppc64_elf_process_dot_syms): Don't make a fake function descriptor
	for ".TOC.".
	(ppc64_elf_check_relocs): Mark sections with a reference to .TOC.
	as needing a toc pointer.
	(ppc64_elf_size_stubs): Don't set dot_toc_dot here.
	(ppc64_elf_set_toc): Rename from ppc64_elf_toc.  Add info param.
	Set elf.hgot value.
ld/
	* emultempl/ppc64elf.em: (ppc_layout_sections_again): Call
	ppc64_elf_set_toc rather than ppc64_elf_toc/_bfd_set_gp_value.
	(gld${EMULATION_NAME}_after_allocation): Likewise.
@
text
@/* PowerPC64-specific support for 64-bit ELF.
   Copyright 2002, 2003, 2004, 2005, 2007, 2008, 2010, 2011, 2012
   Free Software Foundation, Inc.

   This file is part of BFD, the Binary File Descriptor library.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,
   MA 02110-1301, USA.  */

bfd_boolean ppc64_elf_init_stub_bfd
  (bfd *, struct bfd_link_info *);
bfd_boolean ppc64_elf_edit_opd
  (struct bfd_link_info *, bfd_boolean);
asection *ppc64_elf_tls_setup
  (struct bfd_link_info *, int, int *);
bfd_boolean ppc64_elf_tls_optimize
  (struct bfd_link_info *);
bfd_boolean ppc64_elf_edit_toc
  (struct bfd_link_info *);
bfd_boolean ppc64_elf_has_small_toc_reloc
  (asection *);
bfd_vma ppc64_elf_set_toc
  (struct bfd_link_info *, bfd *);
int ppc64_elf_setup_section_lists
  (struct bfd_link_info *, asection *(*) (const char *, asection *),
   void (*) (void));
void ppc64_elf_start_multitoc_partition
  (struct bfd_link_info *);
bfd_boolean ppc64_elf_next_toc_section
  (struct bfd_link_info *, asection *);
bfd_boolean ppc64_elf_layout_multitoc
  (struct bfd_link_info *);
void ppc64_elf_finish_multitoc_partition
  (struct bfd_link_info *);
bfd_boolean ppc64_elf_check_init_fini
  (struct bfd_link_info *);
bfd_boolean ppc64_elf_next_input_section
  (struct bfd_link_info *, asection *);
bfd_boolean ppc64_elf_size_stubs
(struct bfd_link_info *, bfd_signed_vma, bfd_boolean, int, int);
bfd_boolean ppc64_elf_build_stubs
  (bfd_boolean, struct bfd_link_info *, char **);
void ppc64_elf_restore_symbols
  (struct bfd_link_info *info);
@


1.33
log
@bfd/
	* elf64-ppc.c (ppc64_elf_check_relocs): Don't call
	create_linkage_sections here..
	(ppc64_elf_init_stub_bfd): ..do so here.  Return status.
	(create_linkage_sections): Move earlier in file.
	(ppc64_elf_setup_section_lists): Remove now useless htab->brlt test.
	* elf64-ppc.h (ppc64_elf_init_stub_bfd): Update proto.
ld/
	* emultempl/ppc64elf.em (ppc_create_output_section_statements):
	Check return from ppc64_elf_init_stub_bfd.
ld/testsuite/
	* ld-powerpc/tlsexe.d: Adjust.
	* ld-powerpc/tlsexe.r: Adjust.
	* ld-powerpc/tlsexetoc.d: Adjust.
	* ld-powerpc/tlsexetoc.r: Adjust.
	* ld-powerpc/tlsso.d: Adjust.
	* ld-powerpc/tlsso.r: Adjust.
	* ld-powerpc/tlstocso.d: Adjust.
	* ld-powerpc/tlstocso.r: Adjust.
@
text
@d34 2
a35 2
bfd_vma ppc64_elf_toc
  (bfd *);
@


1.32
log
@bfd/
	* elf64-ppc.c: Define more insns used in plt call stubs.
	(ppc64_elf_brtaken_reloc): Assume isa version 2 or above.
	(ppc64_elf_relocate_section): Likewise.
	(enum ppc_stub_type): Add ppc_stub_plt_call_r2save.
	(struct ppc_link_hash_table): Increase size of stub_count array.
	Add plt_stub_align and plt_thread_safe.
	(ALWAYS_USE_FAKE_DEP, ALWAYS_EMIT_R2SAVE): Define.
	(plt_stub_size, plt_stub_pad): New functions.
	(build_plt_stub): Emit barriers for power7 thread safety.  Don't
	emit needless save of r2.
	(build_tls_get_addr_stub): Adjust params.
	(ppc_build_one_stub): Handle ppc_stub_plt_call_r2save and aligning
	plt stubs.  Adjust build_*plt_stub calls.
	(ppc_size_one_stub): Similarly.
	(ppc64_elf_size_stubs): Accept plt_thread_safe and plt_stub_align
	params.  Choose default for plt_thread_safe based on existence of
	calls to thread creation functions.  Modify plt_call to
	plt_call_r2save when no tocsave reloc found.  Align tail of stub
	sections.
	(ppc64_elf_build_stubs): Align tail of stub sections.  Adjust
	output of stub statistics.
	(ppc64_elf_relocate_section): Handle ppc_stub_plt_call_r2save.
	* elf64-ppc.h (ppc64_elf_size_stubs): Update prototype.
ld/
	* emultempl/ppc64elf.em (PARSE_AND_LIST_PROLOGUE,
	PARSE_AND_LIST_LONGOPTS, PARSE_AND_LIST_OPTIONS,
	PARSE_AND_LIST_ARGS_CASES): Handle --{no-,}plt-thread-safe and
	--{no-,}plt-align.
	(plt_thread_safe, plt_stub_align): New vars.
	(gld${EMULATION_NAME}_after_allocation): Pass them to
	ppc64_elf_size_stubs.  Align stub sections according to plt_stub_align.
	* ld.texinfo: Document new command line options, and an old
	undocumented option.
@
text
@d22 1
a22 1
void ppc64_elf_init_stub_bfd
@


1.31
log
@bfd/
	* elf64-ppc.c (struct ppc_link_hash_table): Add plt_static_chain.
	(build_plt_stub): Add plt_static_chain param, don't load r11 if false.
	(build_tls_get_addr_stub): Likewise.
	(ppc_build_one_stub): Update calls to above.
	(ppc_size_one_stub): Adjust stub size.
	(ppc64_elf_size_stubs): Add plt_static_chain param, save to htab.
	* elf64-ppc.h (ppc64_elf_size_stubs): Update prototype.
ld/
	* emultempl/ppc64elf.em (plt_static_chain): New var.
	(gld${EMULATION_NAME}_after_allocation): Pass to ppc64_elf_size_stubs.
	(PARSE_AND_LIST_PROLOGUE, PARSE_AND_LIST_LONGOPTS,
	PARSE_AND_LIST_OPTIONS, PARSE_AND_LIST_ARGS_CASES): Handle
	--plt-static-chain and --no-plt-static-chain.
ld/testsuite/
	* ld-powerpc/tlsexe.d, * ld-powerpc/tlsexe.g. *ld-powerpc/tlsexe.r,
	* ld-powerpc/tlsexetoc.d, * ld-powerpc/tlsexetoc.g,
	* ld-powerpc/tlsexetoc.r, * ld-powerpc/tlsso.d,
	* ld-powerpc/tlstocso.d: Update for plt stub change.
@
text
@d2 1
a2 1
   Copyright 2002, 2003, 2004, 2005, 2007, 2008, 2010, 2011
d52 1
a52 1
  (struct bfd_link_info *, bfd_signed_vma, bfd_boolean);
@


1.30
log
@	* elf64-ppc.c (ppc64_elf_has_small_toc_reloc): New function.
	* elf64-ppc.h (ppc64_elf_has_small_toc_reloc): Declare.
@
text
@d2 1
a2 1
   Copyright 2002, 2003, 2004, 2005, 2007, 2008, 2010
d52 1
a52 1
  (struct bfd_link_info *, bfd_signed_vma);
@


1.29
log
@bfd/
	PR ld/11378
	* elf64-ppc.h (ppc64_elf_check_init_fini): Declare.
	* elf64-ppc.c (call_check_done): Define.
	(ppc64_elf_add_symbol_hook): Substitute bfd_get_section_name macro.
	(ppc64_elf_check_relocs, ppc64_elf_size_dynamic_sections): Likewise.
	(ppc64_elf_finish_multitoc_partition): Remove unnecessary check.
	(toc_adjusting_stub_needed): Use call_check_done rather than toc_off.
	Simplify return logic.  Iterate over all .init and .fini fragments
	by recursion.  Set makes_toc_func_call here..
	(ppc64_elf_next_input_section): ..rather than here.
	(check_pasted_section, ppc64_elf_check_init_fini): New functions.
ld/
	PR ld/11378
	* emultempl/ppc64elf.em (gld${EMULATION_NAME}_after_allocation): Call
	ppc64_elf_check_init_fini and warn if .init/.fini use different TOCs.
@
text
@d32 2
@


1.28
log
@bfd/
	* elf64-ppc.c (struct ppc_link_hash_table): Add do_multi_toc.
	(has_small_toc_reloc): Define.
	(ppc64_elf_check_relocs): Set the above flags.
	(ppc64_elf_edit_opd): Delete obfd param.
	(ppc64_elf_tls_optimize): Likewise.
	(ppc64_elf_edit_toc): Likewise.
	(ppc64_elf_tls_setup): Likewise.  Add no_multi_toc param.
	* elf64-ppc.h: Update prototypes.
ld/
	* emultempl/ppc64elf.em (ppc_before_allocation): Update for changed
	function parameters.
@
text
@d45 2
@


1.27
log
@bfd/
	* elf64-ppc.c (struct plt_entry): Move earlier in file.
	(struct got_entry): Likewise.  Add is_indirect and got.ent fields.
	(struct ppc64_elf_obj_tdata): Change tlsld_got to be a struct got_entry.
	Update all uses.
	(struct ppc_link_hash_table): Add got_reli_size and second_toc_pass.
	Remove no_multi_toc.
	(update_local_sym_info, ppc64_elf_check_relocs): Clear is_indirect
	when allocating a new struct got_entry.
	(allocate_got): New function, extracted from..
	(allocate_dynrelocs): ..here.  Abort on got entry in non-ppc64 bfd.
	(ppc64_elf_size_dynamic_sections): Track got relocs allocated in
	.reliplt by got_reli_size.  Set owner on ppc64_tlsld_got entries.
	(ppc64_elf_setup_section_lists): Remove output_bfd param and
	no_multi_toc, add add_stub_section and layout_sections_again.  Stash
	new params in htab.  Extract some code to..
	(ppc64_elf_start_multitoc_partition): ..here.  New function.
	(ppc64_elf_next_toc_section): Check for linker script errors.  Handle
	second pass toc scan.
	(merge_got_entries, merge_global_got, reallocate_got): New functions.
	(ppc64_elf_reinit_toc): Rename to..
	(ppc64_elf_finish_multitoc_partition): ..this.
	(ppc64_elf_layout_multitoc): New function.
	(ppc64_elf_size_stubs): Delete output_bfd, add_stub_section and
	layout_sections_again params.
	(ppc64_elf_relocate_section): Handle indirect got entries.
	* elf64-ppc.h: Update prototypes.  Declare new functions.
ld/
	* emultempl/ppc64elf.em (build_toc_list): Report errors from
	ppc64_elf_next_toc_section.
	(after_allocation): Update for changed function names and params.
	Run second pass of multitoc partitioning.
@
text
@d25 1
a25 1
  (bfd *, struct bfd_link_info *, bfd_boolean);
d27 1
a27 1
  (bfd *, struct bfd_link_info *, int);
d29 1
a29 1
  (bfd *, struct bfd_link_info *);
d31 1
a31 1
  (bfd *, struct bfd_link_info *);
@


1.26
log
@include/elf/
	* ppc.h (DT_PPC_TLSOPT): Define.
	* ppc64.h (DT_PPC64_TLSOPT): Define.
bfd/
	* elf32-ppc.c (TLS_GET_ADDR_GLINK_SIZE): Define.
	(ADD_3_12_2, BEQLR, CMPWI_11_0, LWZ_11_3, LWZ_12_3): Define.
	(MR_0_3, MR_3_0): Define.
	(struct ppc_elf_link_hash_table): Add no_tls_get_addr_opt.
	(ppc_elf_select_plt_layout): Save emit_stub_syms param earlier.
	(ppc_elf_tls_setup): Add no_tls_get_addr_opt param and save to hash
	table.  Check for presense of __tls_get_addr_opt
	(allocate_dynrelocs): Increase glink entry size for __tls_get_addr.
	(ppc_elf_size_dynamic_sections): Add DT_PPC_TLS_OPT tag.
	(write_glink_stub): Add param p.
	(ppc_elf_relocate_section): Adjust write_glink_stub call.
	(ppc_elf_finish_dynamic_symbol): Emit special glink call stub for
	__tls_get_addr.
	* elf32-ppc.h (ppc_elf_tls_setup): Update prototype.
	* elf64-ppc.c (struct ppc_link_hash_table): Add no_tls_get_addr_opt.
	(ppc64_elf_tls_setup): Add no_tls_get_addr_opt param and save to hash
	table.  Check for presense of __tls_get_addr_opt.
	(ppc64_elf_size_dynamic_sections): Add DT_PPC64_TLS_OPT tag.
	(LD_R11_0R3, LD_R12_0R3, MR_R0_R3, CMPDI_R11_0, ADD_R3_R12_R13,
	BEQLR, MR_R3_R0, MFLR_R11, STD_R11_0R1, BCTRL, LD_R11_0R1,
	LD_R2_0R1, MTLR_R11): Define.
	(build_tls_get_addr_stub): New function.
	(ppc_build_one_stub): Call it.
	(ppc_size_one_stub): Add extra size for __tls_get_addr stub.
	(ppc64_elf_relocate_section): Don't change nop to ld 2,40(1) for
	__tls_get_addr plt call.
	* elf64-ppc.h (ppc64_elf_tls_setup): Update prototype.
binutils/
	* readelf.c (get_ppc_dynamic_type): Add TLSOPT.
	(get_ppc64_dynamic_type): Likewise.
ld/
	* emultempl/ppc32elf.em (no_tls_get_addr_opt): New var.
	(ppc_before_allocation): Pass to ppc_elf_tls_setup.
	(OPTION_NO_TLS_GET_ADDR_OPT): Define.  Redefine other options in
	terms of previous option.
	(PARSE_AND_LIST_LONGOPTS, PARSE_AND_LIST_OPTIONS): Add
	--no-tls-get-addr-optimize.
	(PARSE_AND_LIST_ARGS_CASES): Handle it.
	* emultempl/ppc64elf.em (no_tls_get_addr_opt): New var.
	(ppc_before_allocation): Pass to ppc64_elf_tls_setup.
	(OPTION_NO_TLS_GET_ADDR_OPT): Define.
	(PARSE_AND_LIST_LONGOPTS, PARSE_AND_LIST_OPTIONS): Add
	--no-tls-get-addr-optimize.
	(PARSE_AND_LIST_ARGS_CASES): Handle it.
ld/testsuite/
	* ld-powerpc/tlslib.s: Delete dot-symbol entry syms.  Add
	__tls_get_addr_opt.
	* ld-powerpc/tlslib32.s: Add __tls_get_addr_opt.
	* ld-powerpc/oldtlslib.s: New file, old-abi version of tlslib.s.
	* ld-powerpc/powerpc.exp: Build old-abi library and use it in
	two new link tests.
	* ld-powerpc/tlsexe.d: Update for new __tls_get_addr stub.
	* ld-powerpc/tlsexe.g, * ld-powerpc/tlsexe.r, *ld-powerpc/tlsexe32.d,
	* ld-powerpc/tlsexe32.g, * ld-powerpc/tlsexe32.r,
	* ld-powerpc/tlsexetoc.d, * ld-powerpc/tlsexetoc.g,
	* ld-powerpc/tlsexetoc.r: Likewise.
@
text
@d2 1
a2 1
   Copyright 2002, 2003, 2004, 2005, 2007, 2008
d27 1
a27 1
(bfd *, struct bfd_link_info *, int);
d35 5
a39 2
  (bfd *, struct bfd_link_info *, int);
void ppc64_elf_next_toc_section
d41 4
a44 2
void ppc64_elf_reinit_toc
  (bfd *, struct bfd_link_info *);
d48 1
a48 2
  (bfd *, struct bfd_link_info *, bfd_signed_vma,
   asection *(*) (const char *, asection *), void (*) (void));
@


1.25
log
@bfd/
	PR 5604
	* elf-bfd.h (struct elf_backend_data): Add gc_keep.  Remove param
	names from others.
	(_bfd_elf_gc_keep): Declare.
	* elfxx-target.h (elf_backend_gc_keep): Define.
	(elfNN_bed): Init new field.
	* elflink.c (_bfd_elf_gc_keep): New function.
	(bfd_elf_gc_sections): Call gc_keep.
	* elf64-ppc.c (elf_backend_gc_keep): Define.
	(struct _ppc64_elf_section_data): Move .opd related fields to
	a struct so they don't occupy the same storage.  Adjust accesses
	throughout file.
	(ppc64_elf_gc_keep): New function, split out from..
	(ppc64_elf_gc_mark_hook): ..here.  Don't call _bfd_elf_gc_mark
	to mark .opd section, just set gc_mark.
	(ppc64_elf_edit_opd): Remove no_opd_opt parm.  Don't set opd->adjust
	unless we are changing .opd.  Test non-NULL opd->adjust at all
	accesses throughout file.
	* elf64-ppc.h (ppc64_elf_edit_opd): Update prototype.
ld/
	PR 5604
	* ldlang.c (lang_gc_sections): Move code to set SEC_KEEP on entry
	syms to _bfd_elf_gc_keep.
	* emultempl/ppc64elf.em (ppc_before_allocation): Don't call
	ppc64_elf_edit_opd if no_opd_opt.
@
text
@d27 1
a27 1
  (bfd *, struct bfd_link_info *);
@


1.25.26.1
log
@include/elf/
	* ppc.h (DT_PPC_TLSOPT): Define.
	* ppc64.h (DT_PPC64_TLSOPT): Define.
bfd/
	* elf32-ppc.c (TLS_GET_ADDR_GLINK_SIZE): Define.
	(ADD_3_12_2, BEQLR, CMPWI_11_0, LWZ_11_3, LWZ_12_3): Define.
	(MR_0_3, MR_3_0): Define.
	(struct ppc_elf_link_hash_table): Add no_tls_get_addr_opt.
	(ppc_elf_select_plt_layout): Save emit_stub_syms param earlier.
	(ppc_elf_tls_setup): Add no_tls_get_addr_opt param and save to hash
	table.  Check for presense of __tls_get_addr_opt
	(allocate_dynrelocs): Increase glink entry size for __tls_get_addr.
	(ppc_elf_size_dynamic_sections): Add DT_PPC_TLS_OPT tag.
	(write_glink_stub): Add param p.
	(ppc_elf_relocate_section): Adjust write_glink_stub call.
	(ppc_elf_finish_dynamic_symbol): Emit special glink call stub for
	__tls_get_addr.
	* elf32-ppc.h (ppc_elf_tls_setup): Update prototype.
	* elf64-ppc.c (struct ppc_link_hash_table): Add no_tls_get_addr_opt.
	(ppc64_elf_tls_setup): Add no_tls_get_addr_opt param and save to hash
	table.  Check for presense of __tls_get_addr_opt.
	(ppc64_elf_size_dynamic_sections): Add DT_PPC64_TLS_OPT tag.
	(LD_R11_0R3, LD_R12_0R3, MR_R0_R3, CMPDI_R11_0, ADD_R3_R12_R13,
	BEQLR, MR_R3_R0, MFLR_R11, STD_R11_0R1, BCTRL, LD_R11_0R1,
	LD_R2_0R1, MTLR_R11): Define.
	(build_tls_get_addr_stub): New function.
	(ppc_build_one_stub): Call it.
	(ppc_size_one_stub): Add extra size for __tls_get_addr stub.
	(ppc64_elf_relocate_section): Don't change nop to ld 2,40(1) for
	__tls_get_addr plt call.
	* elf64-ppc.h (ppc64_elf_tls_setup): Update prototype.
binutils/
	* readelf.c (get_ppc_dynamic_type): Add TLSOPT.
	(get_ppc64_dynamic_type): Likewise.
ld/
	* emultempl/ppc32elf.em (no_tls_get_addr_opt): New var.
	(ppc_before_allocation): Pass to ppc_elf_tls_setup.
	(OPTION_NO_TLS_GET_ADDR_OPT): Define.  Redefine other options in
	terms of previous option.
	(PARSE_AND_LIST_LONGOPTS, PARSE_AND_LIST_OPTIONS): Add
	--no-tls-get-addr-optimize.
	(PARSE_AND_LIST_ARGS_CASES): Handle it.
	* emultempl/ppc64elf.em (no_tls_get_addr_opt): New var.
	(ppc_before_allocation): Pass to ppc64_elf_tls_setup.
	(OPTION_NO_TLS_GET_ADDR_OPT): Define.
	(PARSE_AND_LIST_LONGOPTS, PARSE_AND_LIST_OPTIONS): Add
	--no-tls-get-addr-optimize.
	(PARSE_AND_LIST_ARGS_CASES): Handle it.
ld/testsuite/
	* ld-powerpc/tlslib.s: Delete dot-symbol entry syms.  Add
	__tls_get_addr_opt.
	* ld-powerpc/tlslib32.s: Add __tls_get_addr_opt.
	* ld-powerpc/oldtlslib.s: New file, old-abi version of tlslib.s.
	* ld-powerpc/powerpc.exp: Build old-abi library and use it in
	two new link tests.
	* ld-powerpc/tlsexe.d: Update for new __tls_get_addr stub.
	* ld-powerpc/tlsexe.g, * ld-powerpc/tlsexe.r, *ld-powerpc/tlsexe32.d,
	* ld-powerpc/tlsexe32.g, * ld-powerpc/tlsexe32.r,
	* ld-powerpc/tlsexetoc.d, * ld-powerpc/tlsexetoc.g,
	* ld-powerpc/tlsexetoc.r: Likewise.
@
text
@d27 1
a27 1
(bfd *, struct bfd_link_info *, int);
@


1.24
log
@Switch sources over to use the GPL version 3
@
text
@d2 2
a3 1
   Copyright 2002, 2003, 2004, 2005, 2007 Free Software Foundation, Inc.
d25 1
a25 1
  (bfd *, struct bfd_link_info *, bfd_boolean, bfd_boolean);
@


1.23
log
@missed committing from
	* elf64-ppc.h (ppc64_elf_edit_opd): Update prototype.
@
text
@d2 1
a2 1
   Copyright 2002, 2003, 2004, 2005 Free Software Foundation, Inc.
d4 1
a4 1
This file is part of BFD, the Binary File Descriptor library.
d6 4
a9 4
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.
d11 4
a14 4
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
d16 4
a19 3
You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA 02110-1301, USA.  */
@


1.22
log
@Update the address and phone number of the FSF organization in the GPL notices
@
text
@d23 1
a23 1
  (bfd *, struct bfd_link_info *, bfd_boolean);
@


1.21
log
@Update the FSF address in the copyright/GPL notice
@
text
@d18 1
a18 1
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02110-1301, USA.  */
@


1.20
log
@update copyright dates
@
text
@d18 1
a18 1
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
@


1.20.2.1
log
@missed from last commit
	* elf64-ppc.h (ppc64_elf_edit_opd): Update prototype.
@
text
@d23 1
a23 1
  (bfd *, struct bfd_link_info *, bfd_boolean, bfd_boolean);
@


1.19
log
@bfd/
	* elf64-ppc.c (struct ppc_link_hash_table): Add no_multi_toc and
	multi_toc_needed.
	(has_toc_reloc, makes_toc_func_call, call_check_in_progress): Define.
	(ppc64_elf_check_relocs): Update references to has_gp_reloc.
	(ppc64_elf_setup_section_lists): Add no_multi_toc parm, set htab bit.
	(ppc64_elf_next_toc_section): Heed no_multi_toc.
	(ppc64_elf_reinit_toc): Set multi_toc_needed.
	(toc_adjusting_stub_needed): Rewrite.
	(ppc64_elf_next_input_section): Use multi_toc_needed to shortcut
	toc tests.  Adjust for toc_adjusting_stub_needed changes.
	(ppc64_elf_size_stubs): Update references to has_gp_reloc.
	* elf64-ppc.h (ppc64_elf_setup_section_lists): Update prototype.
	* section.c: Expand comment on backend bits.
	* bfd-in2.h: Regenerate.
	* libbfd.h: Regenerate.
ld/
	* emultempl/ppc64elf.em (no_multi_toc): New var.
	(gld${EMULATION_NAME}_finish): Pass to ppc64_elf_setup_section_lists.
	(OPTION_NO_MULTI_TOC): Define.
	(PARSE_AND_LIST_LONGOPTS): Add --no-multi-toc support.
	(PARSE_AND_LIST_OPTIONS, PARSE_AND_LIST_ARGS_CASES): Likewise.
@
text
@d2 1
a2 1
   Copyright 2002, 2003, 2004 Free Software Foundation, Inc.
@


1.18
log
@bfd/
	* elf64-ppc.h (ppc64_elf_edit_toc): Declare.
	* elf64-ppc.c (struct ppc_link_hash_entry <adjust_done>): Update
	comment.
	(struct adjust_toc_info): New.
	(adjust_toc_syms, ppc64_elf_edit_toc): New functions.
ld/
	* emultempl/ppc64elf.em (no_tls_opt): Rename from notlsopt.
	(no_opd_opt, no_toc_opt): New static vars.
	(ppc_before_allocation): Don't edit opt if no_opd_opt.  Call
	ppc64_elf_edit_toc.
	(OPTION_NO_OPD_OPT, OPTION_NO_TOC_OPT): Define.
	(PARSE_AND_LIST_LONGOPTS): Add no-opd-optimize and no-toc-optimize.
	(PARSE_AND_LIST_OPTIONS): Describe new options.
	(PARSE_AND_LIST_ARGS_CASES): Handle them.
@
text
@d33 1
a33 1
  (bfd *, struct bfd_link_info *);
@


1.17
log
@	* elf64-ppc.c (ppc64_elf_edit_opd): Support 16 byte long .opd
	entries (where fd_aux overlaps next entry's fd_func).
	Add non_overlapping argument, use it.
	(ppc64_elf_check_relocs, ppc64_elf_gc_mark_hook, adjust_opd_syms,
	ppc64_elf_size_stubs, ppc64_elf_relocate_section,
	ppc64_elf_output_symbol_hook): Use address / 8 instead of address / 24
	as indexes into opd_sym_map/opd_adjust array.
	* elf64-ppc.h (ppc64_elf_edit_opd): Adjust prototype.

	* emultempl/ppc64elf.em (non_overlapping_opd): New variable.
	(ppc_before_allocation): Pass it to ppc64_elf_edit_opd).
	(OPTION_NON_OVERLAPPING_OPD): Define.
	(PARSE_AND_LIST_OPTIONS, PARSE_AND_LIST_ARGS_CASES): Add
	--non-overlapping-opd option.
@
text
@d28 2
@


1.16
log
@bfd/
	* elf64-ppc.c (struct ppc_link_hash_entry): Add was_undefined.
	(struct ppc_link_hash_table): Remove no_multi_toc, multi_toc_needed.
	Make emit_stub_syms, stub_error and has_14bit_branch bit-fields.
	Add twiddled_syms.
	(link_hash_newfunc): Init was_undefined.
	(add_symbol_adjust): Don't set undefined dot symbols to defweak;
	Use undefweak instead.
	(ppc64_elf_check_directives): Fix undefs chain.
	(ppc64_elf_next_toc_section): Remove no_multi_toc and multi_toc_needed
	references.
	(ppc64_elf_size_stubs): Adjust for add_symbol_adjust change.
	(undo_symbol_twiddle, ppc64_elf_restore_symbols): New functions.
	* elf64-ppc.h (ppc64_elf_restore_symbols): Declare.
ld/
	* emultempl/ppc64elf.em (gld${EMULATION_NAME}_finish): Call
	ppc64_elf_restore_symbols.
@
text
@d23 1
a23 1
  (bfd *, struct bfd_link_info *);
@


1.15
log
@bfd/
	* elf-bfd.h (_bfd_elf_gc_mark): Declare.
	* elflink.c (elf_link_input_bfd): Formatting.
	(_bfd_elf_gc_mark): Rename from elf_gc_mark and make global.  Adjust
	all callers.
	* elf64-ppc.c (struct ppc_link_hash_entry): Remove is_entry.
	(link_hash_newfunc): Don't set it.
	(ppc64_elf_copy_indirect_symbol): Nor copy it.
	(ppc64_elf_mark_entry_syms): Delete.
	(ppc64_elf_gc_mark_hook): Mark entry syms here.  Also mark opd
	sections.  Use get_opd_info.
	* elf64-ppc.h (ppc64_elf_mark_entry_syms): Delete.
ld/
	* emultempl/ppc64elf.em (ppc_after_open): Delete.
	(LDEMUL_AFTER_OPEN): Don't define.
@
text
@d43 2
@


1.14
log
@	* bfd-in.h (_bfd_elf_tls_setup): Declare.
	* bfd-in2.h: Regenerate.
	* elf-bfd.h (struct elf_link_tls_segment): Delete.
	(struct elf_link_hash_table): Add tls_sec and tls_size.
	* elf.c (_bfd_elf_link_hash_table_init): Init tls_sec and tls_size.
	* elflink.c (_bfd_elf_tls_setup): New function.
	* elflink.h (struct elf_final_link_info): Remove first_tls_sec.
	(elf_bfd_final_link): Don't set first_tls_sec here.  Update code
	saving tls segment info, round segment size up.
	(elf_link_output_extsym): Adjust code using tls segment info.
	(elf_link_input_bfd): Likewise.
	* elf32-i386.c (dtpoff_base, tpoff): Likewise.
	* elf32-s390.c (dtpoff_base, tpoff): Likewise.
	* elf32-sh.c (dtpoff_base, tpoff): Likewise.
	* elf32-sparc.c (dtpoff_base, tpoff): Likewise.
	* elf64-s390.c (dtpoff_base, tpoff): Likewise.
	* elf64-x86-64.c (dtpoff_base, tpoff): Likewise.
	* elfxx-ia64.c (elfNN_ia64_tprel_base): Likewise.
	(elfNN_ia64_dtprel_base): Likewise.
	* elf64-alpha.c (alpha_get_dtprel_base): Likewise.
	(alpha_get_tprel_base): Likewise.
	(struct alpha_relax_info): Remove tls_segment.
	(elf64_alpha_relax_got_load): Adjust invocation of
	alpha_get_dtprel_base and alpha_get_tprel_base.
	(elf64_alpha_relax_tls_get_addr): Likewise.
	(elf64_alpha_relax_section): Likewise.
	(elf64_alpha_relocate_section): Likewise.
	(elf64_alpha_relax_find_tls_segment): Delete.
	* elf32-ppc.c (struct ppc_elf_link_hash_table): Remove tls_sec.
	(ppc_elf_tls_setup): Call _bfd_elf_tls_setup.  Return section.
	(ppc_elf_relocate_section): Adjust to use elf.tls_sec.
	* elf32-ppc.h (ppc_elf_tls_setup): Update.
	* elf64-ppc.c (struct ppc_link_hash_table): Remove tls_sec.
	(ppc64_elf_tls_setup): Call _bfd_elf_tls_setup.  Return section.
	(ppc64_elf_tls_optimize): Adjust to use elf.tls_sec.
	(ppc64_elf_relocate_section): Likewise.
	* elf64-ppc.h (ppc64_elf_tls_setup): Update.

	* emultempl/elf32.em (gld${EMULATION_NAME}_before_allocation): Call
	_bfd_elf_tls_setup.
@
text
@d2 1
a2 1
   Copyright 2002, 2003 Free Software Foundation, Inc.
a21 2
bfd_boolean ppc64_elf_mark_entry_syms
  (struct bfd_link_info *);
@


1.14.8.1
log
@Merge mainline to intercu branch - 2004-09-15
@
text
@d2 1
a2 1
   Copyright 2002, 2003, 2004 Free Software Foundation, Inc.
d22 2
d25 1
a25 1
  (bfd *, struct bfd_link_info *, bfd_boolean);
a44 2
void ppc64_elf_restore_symbols
  (struct bfd_link_info *info);
@


1.13
log
@	* elf64-ppc.c (bfd_elf64_mkobject): Define.
	(struct ppc64_elf_obj_tdata): New.
	(ppc64_elf_tdata, ppc64_tlsld_got): Define.
	(ppc64_elf_mkobject): New function.
	(struct got_entry): Add "owner".  Move "tls_type".
	(struct ppc_link_hash_table): Delete "relgot", "tlsld_got".
	(ppc64_elf_init_stub_bfd): New function.
	(create_got_section): Create header .got in dynobj.  Create .got
	and .rela.got in each bfd.  Stash pointers in ppc64_elf_obj_tdata.
	(ppc64_elf_create_dynamic_sections): Don't call create_got_section.
	Look for dynobj .got, and test it.
	(ppc64_elf_copy_indirect_symbol): Adjust for changed got.
	(update_local_sym_info): Likewise.
	(ppc64_elf_check_relocs): Likewise.
	(ppc64_elf_gc_sweep_hook): Likewise.
	(ppc64_elf_tls_optimize): Likewise.
	(allocate_dynrelocs): Likewise.
	(ppc64_elf_size_dynamic_sections): Likewise.
	(ppc64_elf_relocate_section): Likewise.
	(ppc64_elf_next_toc_section): Update comment.
	(toc_adjusting_stub_needed): Remove unneeded cast.
	(ppc64_elf_build_stubs): Check for stub sections in stub bfd by
	testing section flags.
	(ppc64_elf_build_stubs): Likewise.
	(ppc64_elf_size_stubs): Likewise.  Remove stub_bfd param.
	(ppc64_elf_finish_dynamic_sections): Write out got sections.
	(func_desc_adjust): Copy over dynamic info for undef weaks.
	* elf64-ppc.h (ppc64_elf_init_stub_bfd): Declare.
	(ppc64_elf_size_stubs): Update prototype.
	* elflink.h (elf_link_sort_relocs): Use link_orders to find reldyn
	input sections rather than scanning dynobj.
@
text
@d26 1
a26 1
bfd_boolean ppc64_elf_tls_setup
@


1.12
log
@	* elf64-ppc.c: Convert to C90 function definitions, remove unnecessary
	prototypes and casts.  Replace PTR with void *.  Format copyright.
	Mention ABI links.
	(struct ppc_link_hash_table): Rename sgot, srelgot, splt, srelplt,
	sdynbss, srelbss, sglink, sbrlt and srelbrlt to got, relgot .. relbrlt.
	(ppc_type_of_stub): Make r_type an enum.
	(ppc64_elf_size_stubs): Likewise.
	* elf64-ppc.h: Remove PARAMS macro.
@
text
@d20 2
d41 1
a41 1
  (bfd *, bfd *, struct bfd_link_info *, bfd_signed_vma,
@


1.11
log
@	* elf64-ppc.c (ppc64_elf_reloc_type_lookup): Tidy prototype.
	(ppc64_elf_info_to_howto): Likewise.
	(ppc64_elf_build_stubs): Add "stats" param, and print statistics.
	* elf64-ppc.h (ppc64_elf_build_stubs): Adjust prototype.
@
text
@d21 1
a21 1
  PARAMS ((struct bfd_link_info *));
d23 1
a23 1
  PARAMS ((bfd *, struct bfd_link_info *));
d25 1
a25 1
  PARAMS ((bfd *, struct bfd_link_info *));
d27 1
a27 1
  PARAMS ((bfd *, struct bfd_link_info *));
d29 1
a29 1
  PARAMS ((bfd *));
d31 1
a31 1
  PARAMS ((bfd *, struct bfd_link_info *));
d33 1
a33 1
  PARAMS ((struct bfd_link_info *, asection *));
d35 1
a35 1
  PARAMS ((bfd *, struct bfd_link_info *));
d37 1
a37 1
  PARAMS ((struct bfd_link_info *, asection *));
d39 2
a40 2
  PARAMS ((bfd *, bfd *, struct bfd_link_info *, bfd_signed_vma,
	   asection *(*) (const char *, asection *), void (*) (void)));
d42 1
a42 1
  PARAMS ((bfd_boolean, struct bfd_link_info *, char **));
@


1.10
log
@	* elf64-ppc.c (toc_adjusting_stub_needed): New function.
	(ppc64_elf_next_input_section): Use it here to set has_gp_reloc.
	Return error condition.
	(ppc64_elf_size_stubs): Restrict toc adjusting stubs to sections
	that have has_gp_reloc set.
	(struct ppc_link_hash_table): Add stub_count.
	(ppc_build_one_stub): Increment it.
	(ppc64_elf_link_hash_table_create): zmalloc rather than clearing
	individual fields.
	* elf64-ppc.h (ppc64_elf_next_input_section): Update prototype.
@
text
@d42 1
a42 1
  PARAMS ((bfd_boolean, struct bfd_link_info *));
@


1.9
log
@	* elf64-ppc.c: Move TARGET_LITTLE_SYM and other macros used by
	elfxx-target.h so that we can use elf_backend_got_header_size.
	(ELF_MACHINE_ALT1, ELF_MACHINE_ALT2): Delete.
	(GLINK_CALL_STUB_SIZE): Modify.  Define new glink call stub and
	associated macros.
	(ppc64_elf_howto_raw <GOT_TPREL16_DS, GOT_TPREL16_LO_DS>): Correct
	dst_mask.
	(enum ppc_stub_type): Add ppc_stub_long_branch_r2off and
	ppc_stub_plt_branch_r2off.
	(struct ppc_stub_hash_entry): Reorganize.
	(struct ppc_link_hash_table): Add no_multi_toc, multi_toc_needed,
	toc_curr, toc_off and emit_stub_syms.
	(ppc64_elf_link_hash_table_create): Init them.
	(ppc_stub_name): Correct string size.
	(ppc64_elf_check_relocs): Set has_gp_reloc on GOT and TOC relocs.
	(ppc64_elf_size_dynamic_sections): Set no_multi_toc if GOT entries
	used.
	(ppc_type_of_stub): Tweak root.type test.
	(build_plt_stub): Remove glink code.  Adjust for insn macro changes.
	(ppc_size_one_stub): Handle ppc_stub_long_branch_r2off and
	ppc_stub_plt_branch_r2off.
	(ppc_build_one_stub): Likewise.  Fix var shadowing.  Correct addis,addi
	range test.  Use toc_off to calculte r2 values.  Handle emit_stub_syms.
	(ppc64_elf_setup_section_lists): Remove htab creator flavour test.
	Initialize elf_gp and toc_curr.
	(ppc64_elf_next_toc_section, ppc64_elf_reinit_toc): New functions.
	(ppc64_elf_next_input_section): Set toc_off.
	(group_sections): Ensure groups have the same TOC.
	(ppc64_elf_size_stubs): Check whether we need a TOC adjusting stub.
	(ppc64_elf_build_stubs): Add emit_stub_syms param, and stash in htab.
	Build new glink stub.
	(ppc64_elf_relocate_section): Handle multiple TOCs.  Fix comments.
	(ppc64_elf_finish_dynamic_sections): Adjust DT_PPC64_GLINK.
	* elf64-ppc.h (ppc64_elf_build_stubs): Update prototype.
	(ppc64_elf_next_toc_section, ppc64_elf_reinit_toc): Declare.
	* section.c (struct sec): Rename flag12 to has_gp_reloc.
	(STD_SECTION): Update.
	* ecoff.c (bfd_debug_section): Update comment.
	* bfd-in2.h: Regenerate.
@
text
@d36 1
a36 1
void ppc64_elf_next_input_section
@


1.8
log
@	* elf64-ppc.c (TLS_GD_LD): Don't define..
	(TLS_GD): ..define this instead and update all uses.
	(TLS_TPRELGD): Define.
	(ppc64_elf_link_hash_table_create): Tweak initialization of
	init_refcount and init_offset.
	(ppc64_elf_check_relocs): Add one extra element to t_symndx array.
	Mark second slot of GD or LD toc entries.
	(get_tls_type): Return an int.  Distinguish toc GD and LD entries
	from other tls types.
	(ppc64_elf_tls_setup): New function, split out from..
	(ppc64_elf_tls_optimize): ..here.  Don't optimize when symbols are
	defined in a dynamic object.  Fix LD optimization.  Don't set TLS_TPREL
	on GD->IE optimization, use TLS_TPRELGD instead.  Use get_tls_type
	return value to properly decide whether toc GD and LD entries can
	optimize away __tls_get_addr call.  Check next reloc after DTPMOD64
	to determine GD or LD rather than looking at TLS_LD flag.  Don't
	attempt to adjust got entry tls_type here..
	(allocate_dynrelocs): ..instead, adjust got entry tls_type here, and
	look for possible merges.
	(ppc64_elf_size_dynamic_sections): Adjust local got entries for
	optimization.
	(ppc64_elf_size_stubs): Tweak __tls_get_addr fudge.
	(ppc64_elf_relocate_section): Rename some vars to better reflect usage.
	Make use of return value from get_tls_type to properly detect GD and
	LD optimizations.  Split tlsld/gd hi/ha from lo/ds case.  Don't
	handle tls_get_addr removal when looking at REL24 relocs, do it when
	looking at the previous reloc.  Check reloc after DTPMOD64 to determine
	GD or LD.
	* elf64-ppc.h (ppc64_elf_tls_setup): Declare.
@
text
@d32 4
d42 1
a42 1
  PARAMS ((struct bfd_link_info *));
@


1.7
log
@	* reloc.c: Add PPC and PPC64 TLS relocs.
	* libbfd.h: Regenerate.
	* bfd-in2.h: Regenerate.
	* elf64-ppc.c (TP_OFFSET, DTP_OFFSET): Declare.
	(ppc64_elf_howto_raw): Add TLS howto's.  Adjust R_PPC64_NONE to be
	against a 32 bit field.
	(ppc64_elf_reloc_type_lookup): Handle TLS relocs.
	(_ppc64_elf_section_data): Add t_symndx and comments.
	(ppc64_elf_section_data): Use elf_section_data macro.
	(ppc64_elf_new_section_hook): American spelling.
	(struct got_entry, struct plt_entry): New.
	(MUST_BE_DYN_RELOC): Rename from IS_ABSOLUTE_RELOC.
	(struct ppc_stub_hash_entry): Add "addend" field.
	(struct ppc_link_hash_entry): Add "tls_type".
	(TLS_TLS, TLS_GD_LD, TLS_LD, TLS_TPREL, TLS_DTPREL,
	TLS_EXPLICIT): Define.
	(struct ppc_link_hash_table): Add tls_sec, tls_get_addr, tlsld_got.
	(link_hash_newfunc): Init new fields.
	(ppc64_elf_link_hash_table_create): Likewise.  Set init_relcount and
	init_offset to NULL.
	(ppc64_elf_copy_indirect_symbol): Copy got and plt info.  Don't call
	_bfd_elf_link_hash_copy_indirect, rather insert relevant code from
	there.
	(update_local_sym_info, update_plt_info): New functions.
	(ppc64_elf_check_relocs): Use them.  Handle TLS relocs.  Adjust GOT
	handling to use got.glist rather than got.refcount.  Likewise for PLT.
	(ppc64_elf_gc_sweep_hook): Handle TLS relocs, new GOT and PLT lists.
	(func_desc_adjust): Adjust for new PLT list.
	(ppc64_elf_adjust_dynamic_symbol): Likewise.
	(get_sym_h, get_tls_type): New functions.
	(ppc64_elf_edit_opd): Remove unused variable.  Use get_sym_h.
	(ppc64_elf_tls_optimize): New function.
	(allocate_dynrelocs): Adjust for new PLT and GOT lists.  Allocate
	TLS relocs.
	(ppc64_elf_size_dynamic_sections): Likewise.
	(ppc_type_of_stub): Adjust for new PLT list.
	(ppc_build_one_stub): Likewise.
	(ppc64_elf_size_stubs): Likewise.  Use get_sym_h.  Treat __tls_get_addr
	calls specially.
	(ppc64_elf_relocate_section): Adjust for new GOT and PLT lists.  Handle
	TLS relocs.  Report local syms using bfd_elf_local_sym_name.  Don't
	init GOT entries that have a reloc.  Generate GOT relocs here..
	(ppc64_elf_finish_dynamic_symbol): ..not here.  Adjust for PLT list.
	* elf64-ppc.h (ppc64_elf_tls_optimize): Declare.
@
text
@d24 2
@


1.6
log
@s/boolean/bfd_boolean/ s/true/TRUE/ s/false/FALSE/.  Simplify
comparisons of bfd_boolean vars with TRUE/FALSE.  Formatting.
@
text
@d2 1
a2 1
   Copyright 2002 Free Software Foundation, Inc.
d23 2
@


1.5
log
@	* elflink.h (elf_link_add_object_symbols): Optimize stabs for
	relocatable link too.
	(elf_link_input_bfd): When emitting relocs, adjust offsets for
	eh_frame and stab sections.  Zap deleted relocs.
	(elf_reloc_symbol_deleted_p): Return true for zero r_symndx.
	(elf_bfd_discard_info): Run for relocatable link too.
	* elf64-ppc.c (ppc64_elf_edit_opd): Rename from edit_opd.  Make global.
	Handle ld -r case.
	(ppc64_elf_size_dynamic_sections): Don't call edit_opd from here.
	* elf64-ppc.h (ppc64_elf_edit_opd): Declare.
@
text
@d20 1
a20 1
boolean ppc64_elf_mark_entry_syms
d22 1
a22 1
boolean ppc64_elf_edit_opd
d30 1
a30 1
boolean ppc64_elf_size_stubs
d33 1
a33 1
boolean ppc64_elf_build_stubs
@


1.4
log
@	* elflink.h (elf_gc_mark): Pass in the section whose relocs we are
	examining to gc_mark_hook, rather than the bfd.
	(elf_gc_sections): Adjust.
	* elf-bfd.h (struct elf_backend_data <gc_mark_hook>): Likewise.
	* elf-m10300.c (mn10300_elf_gc_mark_hook): Likewise.
	* elf32-arm.h (elf32_arm_gc_mark_hook): Likewise.
	* elf32-avr.c (elf32_avr_gc_mark_hook): Likewise.
	* elf32-cris.c (cris_elf_gc_mark_hook): Likewise.
	* elf32-d10v.c (elf32_d10v_gc_mark_hook): Likewise.
	* elf32-fr30.c (fr30_elf_gc_mark_hook): Likewise.
	* elf32-hppa.c (elf32_hppa_gc_mark_hook): Likewise.
	* elf32-i386.c (elf_i386_gc_mark_hook): Likewise.
	* elf32-m32r.c (m32r_elf_gc_mark_hook): Likewise.
	* elf32-m68k.c (elf_m68k_gc_mark_hook): Likewise.
	* elf32-mcore.c (mcore_elf_gc_mark_hook): Likewise.
	* elf32-openrisc.c (openrisc_elf_gc_mark_hook): Likewise.
	* elf32-ppc.c (ppc_elf_gc_mark_hook): Likewise.
	* elf32-s390.c (elf_s390_gc_mark_hook): Likewise.
	* elf32-sh.c (sh_elf_gc_mark_hook): Likewise.
	* elf32-sparc.c (elf32_sparc_gc_mark_hook): Likewise.
	* elf32-v850.c (v850_elf_gc_mark_hook): Likewise.
	* elf32-vax.c (elf_vax_gc_mark_hook): Likewise.
	* elf32-xstormy16.c (xstormy16_elf_gc_mark_hook): Likewise.
	* elf64-mmix.c (mmix_elf_gc_mark_hook): Likewise.
	* elf64-ppc.c (ppc64_elf_gc_mark_hook): Likewise.
	* elf64-s390.c (elf_s390_gc_mark_hook): Likewise.
	* elf64-sh64.c (sh_elf64_gc_mark_hook): Likewise.
	* elfxx-mips.c (_bfd_mips_elf_gc_mark_hook): Likewise.
	* elfxx-mips.h (_bfd_mips_elf_gc_mark_hook): Likewise.
	* elf64-x86-64.c (elf64_x86_64_gc_mark_hook): Likewise.
	* elf32-frv.c (elf32_frv_gc_mark_hook): Likewise.  Also remove
	redundant local sym tests.
	* elf64-ppc.c (struct ppc_link_hash_entry): Add is_entry.
	(link_hash_newfunc): Init is_entry.
	(ppc64_elf_copy_indirect_symbol): Copy is_entry.
	(ppc64_elf_link_hash_table_create): Init all_local_syms.
	(create_linkage_sections): Use bfd_make_section_anyway rather than
	bfd_make_section.
	(ppc64_elf_mark_entry_syms): New function.
	(ppc64_elf_check_relocs): Don't bother testing elf_bad_symtab.  Set
	up opd entry to function section map.
	(ppc64_elf_gc_mark_hook): Special case opd section relocs, and
	relocs that reference the opd section.
	(edit_opd): New function.
	(ppc64_elf_size_dynamic_sections): Call get_local_syms and edit_opd.
	(ppc64_elf_setup_section_lists): Don't calculate htab->bfd_count here.
	(get_local_syms): Do so here.  Exit if we already have local syms.
	Remove bogus comment imported from elf32-hppa.c.  Don't attempt to
	read local syms on non-ELF input.
	(ppc64_elf_size_stubs): Call _bfd_elf64_link_read_relocs rather
	than duplicating it's function here.  Adjust free of internal
	relocs to suit.
	(ppc64_elf_relocate_section): Adjust local syms in opd section.
	* elf64-ppc.h (ppc64_elf_mark_entry_syms): Declare.
	* elf32-hppa.c (elf32_hppa_size_stubs): Call
	_bfd_elf32_link_read_relocs rather than duplicating it's function
	here.  Adjust free of internal relocs to suit.
@
text
@d22 2
@


1.4.14.1
log
@Merge drow-cplus-branch to:
  cvs rtag -D 2003-12-14 00:00:00 UTC drow-cplus-merge-20031214 gdb+dejagnu
@
text
@d2 1
a2 1
   Copyright 2002, 2003 Free Software Foundation, Inc.
d20 2
a21 10
void ppc64_elf_init_stub_bfd
  (bfd *, struct bfd_link_info *);
bfd_boolean ppc64_elf_mark_entry_syms
  (struct bfd_link_info *);
bfd_boolean ppc64_elf_edit_opd
  (bfd *, struct bfd_link_info *);
asection *ppc64_elf_tls_setup
  (bfd *, struct bfd_link_info *);
bfd_boolean ppc64_elf_tls_optimize
  (bfd *, struct bfd_link_info *);
d23 1
a23 1
  (bfd *);
d25 8
a32 12
  (bfd *, struct bfd_link_info *);
void ppc64_elf_next_toc_section
  (struct bfd_link_info *, asection *);
void ppc64_elf_reinit_toc
  (bfd *, struct bfd_link_info *);
bfd_boolean ppc64_elf_next_input_section
  (struct bfd_link_info *, asection *);
bfd_boolean ppc64_elf_size_stubs
  (bfd *, struct bfd_link_info *, bfd_signed_vma,
   asection *(*) (const char *, asection *), void (*) (void));
bfd_boolean ppc64_elf_build_stubs
  (bfd_boolean, struct bfd_link_info *, char **);
@


1.4.12.1
log
@2002-11-15  David Carlton  <carlton@@math.stanford.edu>

	* Merge from mainline; tag is carlton_dictionary-20021115-merge.
@
text
@a21 2
boolean ppc64_elf_edit_opd
  PARAMS ((bfd *, struct bfd_link_info *));
@


1.4.12.2
log
@2002-12-23  David Carlton  <carlton@@math.stanford.edu>

	* Merge from mainline; tag is carlton_dictionary-20021223-merge.
@
text
@d20 1
a20 1
bfd_boolean ppc64_elf_mark_entry_syms
d22 1
a22 1
bfd_boolean ppc64_elf_edit_opd
d30 1
a30 1
bfd_boolean ppc64_elf_size_stubs
d33 1
a33 1
bfd_boolean ppc64_elf_build_stubs
@


1.4.12.3
log
@2003-02-07  David Carlton  <carlton@@math.stanford.edu>

	* Merge with mainline; tag is carlton_dictionary-20030207-merge.
@
text
@d2 1
a2 1
   Copyright 2002, 2003 Free Software Foundation, Inc.
a22 2
  PARAMS ((bfd *, struct bfd_link_info *));
bfd_boolean ppc64_elf_tls_optimize
@


1.4.12.4
log
@2003-03-05  David Carlton  <carlton@@math.stanford.edu>

	* Merge with mainline.  Tag is carlton_dictionary-20030305-merge.
@
text
@a23 2
bfd_boolean ppc64_elf_tls_setup
  PARAMS ((bfd *, struct bfd_link_info *));
@


1.4.12.5
log
@2003-06-27  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton_dictionary-20030627-merge.
@
text
@d21 1
a21 1
  (struct bfd_link_info *);
d23 1
a23 1
  (bfd *, struct bfd_link_info *);
d25 1
a25 1
  (bfd *, struct bfd_link_info *);
d27 1
a27 1
  (bfd *, struct bfd_link_info *);
d29 1
a29 1
  (bfd *);
d31 3
a33 7
  (bfd *, struct bfd_link_info *);
void ppc64_elf_next_toc_section
  (struct bfd_link_info *, asection *);
void ppc64_elf_reinit_toc
  (bfd *, struct bfd_link_info *);
bfd_boolean ppc64_elf_next_input_section
  (struct bfd_link_info *, asection *);
d35 2
a36 2
  (bfd *, bfd *, struct bfd_link_info *, bfd_signed_vma,
   asection *(*) (const char *, asection *), void (*) (void));
d38 1
a38 1
  (bfd_boolean, struct bfd_link_info *, char **);
@


1.4.12.6
log
@2003-08-05  David Carlton  <carlton@@kealia.com>

	* configure.in (build_warnings): Delete -Wformat-nonliteral.
	* configure (build_warnings): Ditto.

	* Merge with mainline; tag is carlton_dictionary-20030805-merge.
@
text
@a19 2
void ppc64_elf_init_stub_bfd
  (bfd *, struct bfd_link_info *);
d39 1
a39 1
  (bfd *, struct bfd_link_info *, bfd_signed_vma,
@


1.4.12.7
log
@2003-11-11  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton-dictionary-20031111-merge.
@
text
@d26 1
a26 1
asection *ppc64_elf_tls_setup
@


1.3
log
@	* elf64-ppc.c (ppc64_elf_addr16_ha_reloc): Delete.
	(ppc64_elf_ha_reloc): New function.
	(ppc64_elf_brtaken_reloc): New function.
	(ppc64_elf_sectoff_reloc): New function.
	(ppc64_elf_sectoff_ha_reloc): New function.
	(ppc64_elf_toc_reloc): New function.
	(ppc64_elf_toc_ha_reloc): New function.
	(ppc64_elf_toc64_reloc): New function.
	(ppc64_elf_unhandled_reloc): New function.
	(ppc64_elf_howto_raw): Use the above.
	<R_PPC64_RELATIVE>: Mark pc_relative, pcrel_offset.
	<R_PPC64_SECTOFF>: Not pc_relative or pcrel_offset.  Fix dst_mask.
	<R_PPC64_SECTOFF_DS>: Likewise.
	(IS_ABSOLUTE_RELOC): Update.
	(struct ppc_link_hash_table): Add have_undefweak.
	(ppc64_elf_link_hash_table_create): Init.
	(func_desc_adjust): Set have_undefweak.
	(ppc64_elf_func_desc_adjust): Call func_desc_adjust earlier.  Only
	add the .sfpr blr when have_undefweak.
	(ppc64_elf_setup_section_lists): Check hash table flavour.
	(ppc64_elf_next_input_section): Move output_section->owner test to
	ppc64elf.em.
	(ppc64_elf_set_toc): Rename to ppc64_elf_toc, remove info param
	and relocatable test.  Return TOCstart and don't set elf_gp.
	(ppc64_elf_relocate_section): Correct BRTAKEN/BRNTAKEN branch
	offset calculation.  Add assert on weak sym branch tweaks.
	* elf64-ppc.h (ppc64_elf_set_toc): Delete.
	(ppc64_elf_toc): Declare.
	(ppc64_elf_next_input_section): Update.

	* emultempl/ppc64elf.em (gld${EMULATION_NAME}_after_allocation):
	Adjust for ppc64_elf_set_toc change.  #include libbfd.h.
	(build_section_lists): Do output_section tests here.
@
text
@d20 2
@


1.3.6.1
log
@Merge w/trunk (kseitz_interps-20020722-merge).
@
text
@a19 2
boolean ppc64_elf_mark_entry_syms
  PARAMS ((struct bfd_link_info *));
@


1.2
log
@	* elf64-ppc.c (CROR_151515, CROR_313131): Define.
	(ppc64_elf_relocate_section): Use them.  Don't look for plt calls
	on R_PPC64_ADDR24 relocs.  Require a nop or no link reg on plt
	call branches.  Correct undefined weak destination.
	(ppc64_elf_func_desc_adjust): Always create at least one blr in
	.sfpr, and correct case where either only savef* or restf* is
	needed.

	Long branch stubs, multiple stub sections.
	* elf64-ppc.h (ppc64_elf_setup_section_lists): Declare.
	(ppc64_elf_next_input_section): Declare.
	* elf64-ppc.c: Move linker-only prototypes.
	(STUB_SUFFIX): Define.
	(enum ppc_stub_type): New.
	(struct ppc_stub_hash_entry): New.
	(struct ppc_branch_hash_entry): New.
	(struct ppc_link_hash_entry): Add stub_cache, oh.
	(struct ppc_link_hash_table): Add stub_hash_table etc.  Remove
	sstub.  Add sbrlt, srelbrlt, has_14bit_branch, stub_iteration.
	Rename plt_overflow to stub_error.
	(ppc_stub_hash_lookup): Define.
	(ppc_branch_hash_lookup): Define.
	(stub_hash_newfunc): New function.
	(branch_hash_newfunc): New function.
	(link_hash_newfunc): Init new fields.
	(ppc64_elf_link_hash_table_create): Likewise.
	(ppc64_elf_link_hash_table_free): New function.
	(ppc_stub_name): New function.
	(ppc_get_stub_entry): New function.
	(ppc_add_stub): New function.
	(create_linkage_sections): Use bfd_make_section_anyway.  Create
	.branch_lt and .rela.branch_lt sections.  Don't create .stub.
	(ppc64_elf_check_relocs): Set has_14bit_branch on R_PPC64_REL14*,
	and set up for plt call stubs.  Link func and func desc syms.
	(ppc64_elf_gc_sweep_hook): Handle REL14* as per REL24.
	(func_desc_adjust): Avoid hash lookup when func desc sym available
	via shortcut, and set links when processing.
	(ppc64_elf_hide_symbol): Likewise.
	(allocate_dynrelocs): Don't allocate stub section here.
	(ppc64_elf_size_dynamic_sections): Handle sbrlt and srelbrlt.
	Remove sstub code.
	(ppc_type_of_stub): New function.
	(build_one_stub): Delete.
	(ppc_build_one_stub): New function.
	(ppc_size_one_stub): New function.
	(ppc64_elf_setup_section_lists): New function.
	(ppc64_elf_next_input_section): New function.
	(group_sections): New function.
	(get_local_syms): New function.
	(ppc64_elf_size_stubs): Rewrite.
	(ppc64_elf_build_stubs): Rewrite.
	(ppc64_elf_relocate_section): Look up stub entry for REL24
	relocs.  Don't propagate REL14* to dynamic objects.  Look for long
	branch stubs if REL14* or REL24 relocs won't reach.
	(bfd_elf64_bfd_link_hash_table_free): Define.
@
text
@d20 2
a21 2
boolean ppc64_elf_set_toc
  PARAMS ((bfd *, struct bfd_link_info *));
d25 1
a25 1
  PARAMS ((bfd *, struct bfd_link_info *, asection *));
@


1.1
log
@	* elflink.c (_bfd_elf_create_dynamic_sections): Don't set SEC_CODE
	when plt_not_loaded.
	* elf64-ppc.c (ppc64_elf_create_dynamic_sections): No need to
	clear .plt SEC_CODE here.  Create .stub and correct .glink flags.
	(PLT_INITIAL_ENTRY_SIZE): Set to 24.
	(ppc64_elf_glink_code): Delete.
	(PPC64_ELF_GLINK_SIZE): Delete.
	(ADDIS_R12_R2, STD_R2_40R1, LD_R11_0R12, LD_R2_0R12, MTCTR_R11,
	BCTR, ADDIS_R12_R12_1, LD_R2_40R1, NOP, LI_R0_0, B_DOT, LIS_R0_0,
	ORI_R0_R0_0): Define.
	(PLT_CALL_STUB_SIZE, GLINK_CALL_STUB_SIZE): Define.
	(struct ppc_link_hash_table): Add sstub and plt_overflow.
	(ppc64_elf_link_hash_table_create): Init them.
	(ppc64_elf_check_relocs <R_PPC64_REL24>): Refcount .plt entry.
	Don't copy to shared lib.
	(ppc64_elf_check_relocs): Call bfd_set_error on errors.
	(ppc64_elf_gc_sweep_hook <R_PPC64_REL24>): Sweep plt refcount.
	(allocate_dynrelocs <plt>): Don't change function sym here.  Make
	room for .stub and .glink code.
	(ppc64_elf_size_dynamic_sections): Handle .stub.  Make entry for
	DT_PPC64_GLINK.
	(ppc64_elf_final_link): Rename to ppc64_elf_set_toc.  Don't call
	bfd_elf64_bfd_final_link.
	(bfd_elf64_bfd_final_link): Don't define.
	(ppc64_elf_size_stubs): New.
	(build_plt_stub): New.
	(build_one_stub): New.
	(ppc64_elf_build_stubs): New.
	(ppc64_elf_relocate_section <toc relocs>): Remove assert.
	(ppc64_elf_relocate_section): Don't copy R_PPC64_REL24 relocs.
	(ppc64_elf_finish_dynamic_symbol): Don't build stubs here.  Set
	DT_PPC64_GLINK entry.  Tweak DT_PLTGOT, DT_JMPREL, DT_PLTRELSZ in
	case output sections not separate.  Adjust DT_RELASZ to not
	include plt relocs.  Set reserved got entry.  Set got and plt
	entry size.
	(elf_backend_got_header_size): Set to 8.
	* elf64-ppc.h: New file.
@
text
@d20 11
a30 3
boolean ppc64_elf_set_toc PARAMS ((bfd *, struct bfd_link_info *));
boolean ppc64_elf_size_stubs PARAMS ((bfd *, struct bfd_link_info *, int *));
boolean ppc64_elf_build_stubs PARAMS ((bfd *, struct bfd_link_info *));
@


1.1.2.1
log
@Merge from mainline
@
text
@d20 1
a20 1
bfd_vma ppc64_elf_toc PARAMS ((bfd *));
@


