head	1.277;
access;
symbols
	sid-snapshot-20180601:1.277
	sid-snapshot-20180501:1.277
	sid-snapshot-20180401:1.277
	sid-snapshot-20180301:1.277
	sid-snapshot-20180201:1.277
	sid-snapshot-20180101:1.277
	sid-snapshot-20171201:1.277
	sid-snapshot-20171101:1.277
	sid-snapshot-20171001:1.277
	sid-snapshot-20170901:1.277
	sid-snapshot-20170801:1.277
	sid-snapshot-20170701:1.277
	sid-snapshot-20170601:1.277
	sid-snapshot-20170501:1.277
	sid-snapshot-20170401:1.277
	sid-snapshot-20170301:1.277
	sid-snapshot-20170201:1.277
	sid-snapshot-20170101:1.277
	sid-snapshot-20161201:1.277
	sid-snapshot-20161101:1.277
	sid-snapshot-20160901:1.277
	sid-snapshot-20160801:1.277
	sid-snapshot-20160701:1.277
	sid-snapshot-20160601:1.277
	sid-snapshot-20160501:1.277
	sid-snapshot-20160401:1.277
	sid-snapshot-20160301:1.277
	sid-snapshot-20160201:1.277
	sid-snapshot-20160101:1.277
	sid-snapshot-20151201:1.277
	sid-snapshot-20151101:1.277
	sid-snapshot-20151001:1.277
	sid-snapshot-20150901:1.277
	sid-snapshot-20150801:1.277
	sid-snapshot-20150701:1.277
	sid-snapshot-20150601:1.277
	sid-snapshot-20150501:1.277
	sid-snapshot-20150401:1.277
	sid-snapshot-20150301:1.277
	sid-snapshot-20150201:1.277
	sid-snapshot-20150101:1.277
	sid-snapshot-20141201:1.277
	sid-snapshot-20141101:1.277
	sid-snapshot-20141001:1.277
	sid-snapshot-20140901:1.277
	sid-snapshot-20140801:1.277
	sid-snapshot-20140701:1.277
	sid-snapshot-20140601:1.277
	sid-snapshot-20140501:1.277
	sid-snapshot-20140401:1.277
	sid-snapshot-20140301:1.277
	sid-snapshot-20140201:1.277
	sid-snapshot-20140101:1.277
	sid-snapshot-20131201:1.277
	sid-snapshot-20131101:1.277
	sid-snapshot-20131001:1.277
	binutils-2_24-branch:1.277.0.2
	binutils-2_24-branchpoint:1.277
	binutils-2_21_1:1.251.2.5
	sid-snapshot-20130901:1.277
	gdb_7_6_1-2013-08-30-release:1.272
	sid-snapshot-20130801:1.277
	sid-snapshot-20130701:1.277
	sid-snapshot-20130601:1.272
	sid-snapshot-20130501:1.272
	gdb_7_6-2013-04-26-release:1.272
	sid-snapshot-20130401:1.272
	binutils-2_23_2:1.264.4.4
	gdb_7_6-branch:1.272.0.2
	gdb_7_6-2013-03-12-branchpoint:1.272
	sid-snapshot-20130301:1.272
	sid-snapshot-20130201:1.269
	sid-snapshot-20130101:1.268
	sid-snapshot-20121201:1.267
	gdb_7_5_1-2012-11-29-release:1.264
	binutils-2_23_1:1.264.4.2
	sid-snapshot-20121101:1.266
	binutils-2_23:1.264.4.1
	sid-snapshot-20121001:1.265
	sid-snapshot-20120901:1.265
	gdb_7_5-2012-08-17-release:1.264
	sid-snapshot-20120801:1.264
	binutils-2_23-branch:1.264.0.4
	binutils-2_23-branchpoint:1.264
	gdb_7_5-branch:1.264.0.2
	gdb_7_5-2012-07-18-branchpoint:1.264
	sid-snapshot-20120701:1.264
	sid-snapshot-20120601:1.264
	sid-snapshot-20120501:1.262
	binutils-2_22_branch:1.258.2.1.0.2
	gdb_7_4_1-2012-04-26-release:1.260
	sid-snapshot-20120401:1.260
	sid-snapshot-20120301:1.260
	sid-snapshot-20120201:1.260
	gdb_7_4-2012-01-24-release:1.260
	sid-snapshot-20120101:1.260
	gdb_7_4-branch:1.260.0.2
	gdb_7_4-2011-12-13-branchpoint:1.260
	sid-snapshot-20111201:1.260
	binutils-2_22:1.258.2.1
	sid-snapshot-20111101:1.259
	sid-snapshot-20111001:1.258
	binutils-2_22-branch:1.258.0.2
	binutils-2_22-branchpoint:1.258
	gdb_7_3_1-2011-09-04-release:1.253
	sid-snapshot-20110901:1.258
	sid-snapshot-20110801:1.258
	gdb_7_3-2011-07-26-release:1.253
	sid-snapshot-20110701:1.257
	sid-snapshot-20110601:1.255
	sid-snapshot-20110501:1.254
	gdb_7_3-branch:1.253.0.2
	gdb_7_3-2011-04-01-branchpoint:1.253
	sid-snapshot-20110401:1.253
	sid-snapshot-20110301:1.253
	sid-snapshot-20110201:1.253
	sid-snapshot-20110101:1.253
	binutils-2_21:1.251.2.2
	sid-snapshot-20101201:1.252
	binutils-2_21-branch:1.251.0.2
	binutils-2_21-branchpoint:1.251
	sid-snapshot-20101101:1.251
	sid-snapshot-20101001:1.251
	binutils-2_20_1:1.241.2.5
	gdb_7_2-2010-09-02-release:1.250
	sid-snapshot-20100901:1.251
	sid-snapshot-20100801:1.250
	gdb_7_2-branch:1.250.0.2
	gdb_7_2-2010-07-07-branchpoint:1.250
	sid-snapshot-20100701:1.250
	sid-snapshot-20100601:1.248
	sid-snapshot-20100501:1.247
	sid-snapshot-20100401:1.246
	gdb_7_1-2010-03-18-release:1.244
	sid-snapshot-20100301:1.244
	gdb_7_1-branch:1.244.0.2
	gdb_7_1-2010-02-18-branchpoint:1.244
	sid-snapshot-20100201:1.244
	sid-snapshot-20100101:1.243
	gdb_7_0_1-2009-12-22-release:1.242
	sid-snapshot-20091201:1.243
	sid-snapshot-20091101:1.243
	binutils-2_20:1.241.2.2
	gdb_7_0-2009-10-06-release:1.242
	sid-snapshot-20091001:1.243
	gdb_7_0-branch:1.242.0.2
	gdb_7_0-2009-09-16-branchpoint:1.242
	arc-sim-20090309:1.210
	binutils-arc-20081103-branch:1.215.0.8
	binutils-arc-20081103-branchpoint:1.215
	binutils-2_20-branch:1.241.0.2
	binutils-2_20-branchpoint:1.241
	sid-snapshot-20090901:1.241
	sid-snapshot-20090801:1.236
	msnyder-checkpoint-072509-branch:1.236.0.2
	msnyder-checkpoint-072509-branchpoint:1.236
	sid-snapshot-20090701:1.233
	dje-cgen-play1-branch:1.233.0.2
	dje-cgen-play1-branchpoint:1.233
	sid-snapshot-20090601:1.229
	sid-snapshot-20090501:1.226
	sid-snapshot-20090401:1.223
	arc-20081103-branch:1.215.0.6
	arc-20081103-branchpoint:1.215
	arc-insight_6_8-branch:1.210.0.6
	arc-insight_6_8-branchpoint:1.210
	insight_6_8-branch:1.210.0.4
	insight_6_8-branchpoint:1.210
	sid-snapshot-20090301:1.219
	binutils-2_19_1:1.214.2.5
	sid-snapshot-20090201:1.218
	sid-snapshot-20090101:1.216
	reverse-20081226-branch:1.216.0.2
	reverse-20081226-branchpoint:1.216
	sid-snapshot-20081201:1.215
	multiprocess-20081120-branch:1.215.0.4
	multiprocess-20081120-branchpoint:1.215
	sid-snapshot-20081101:1.215
	binutils-2_19:1.214.2.2
	sid-snapshot-20081001:1.215
	reverse-20080930-branch:1.215.0.2
	reverse-20080930-branchpoint:1.215
	binutils-2_19-branch:1.214.0.2
	binutils-2_19-branchpoint:1.214
	sid-snapshot-20080901:1.214
	sid-snapshot-20080801:1.213
	reverse-20080717-branch:1.213.0.2
	reverse-20080717-branchpoint:1.213
	sid-snapshot-20080701:1.212
	msnyder-reverse-20080609-branch:1.212.0.2
	msnyder-reverse-20080609-branchpoint:1.212
	drow-reverse-20070409-branch:1.191.0.2
	drow-reverse-20070409-branchpoint:1.191
	sid-snapshot-20080601:1.212
	sid-snapshot-20080501:1.211
	sid-snapshot-20080403:1.211
	sid-snapshot-20080401:1.211
	gdb_6_8-2008-03-27-release:1.210
	sid-snapshot-20080301:1.210
	gdb_6_8-branch:1.210.0.2
	gdb_6_8-2008-02-26-branchpoint:1.210
	sid-snapshot-20080201:1.208
	sid-snapshot-20080101:1.208
	sid-snapshot-20071201:1.208
	sid-snapshot-20071101:1.207
	gdb_6_7_1-2007-10-29-release:1.204
	gdb_6_7-2007-10-10-release:1.204
	sid-snapshot-20071001:1.206
	gdb_6_7-branch:1.204.0.2
	gdb_6_7-2007-09-07-branchpoint:1.204
	binutils-2_18:1.202.2.2
	binutils-2_18-branch:1.202.0.2
	binutils-2_18-branchpoint:1.202
	insight_6_6-20070208-release:1.183
	binutils-csl-coldfire-4_1-32:1.172.2.4
	binutils-csl-sourcerygxx-4_1-32:1.172.2.4
	gdb_6_6-2006-12-18-release:1.183
	binutils-csl-innovasic-fido-3_4_4-33:1.172.2.4
	binutils-csl-sourcerygxx-3_4_4-32:1.149.2.3
	binutils-csl-coldfire-4_1-30:1.172.2.4
	binutils-csl-sourcerygxx-4_1-30:1.172.2.4
	binutils-csl-coldfire-4_1-28:1.172.2.4
	binutils-csl-sourcerygxx-4_1-29:1.172.2.4
	binutils-csl-sourcerygxx-4_1-28:1.172.2.4
	gdb_6_6-branch:1.183.0.2
	gdb_6_6-2006-11-15-branchpoint:1.183
	binutils-csl-arm-2006q3-27:1.172.2.4
	binutils-csl-sourcerygxx-4_1-27:1.172.2.4
	binutils-csl-arm-2006q3-26:1.172.2.4
	binutils-csl-sourcerygxx-4_1-26:1.172.2.4
	binutils-csl-sourcerygxx-4_1-25:1.172.2.4
	binutils-csl-sourcerygxx-4_1-24:1.172.2.4
	binutils-csl-sourcerygxx-4_1-23:1.172.2.4
	insight_6_5-20061003-release:1.176
	gdb-csl-symbian-6_4_50_20060226-12:1.170
	binutils-csl-sourcerygxx-4_1-21:1.172.2.4
	binutils-csl-arm-2006q3-21:1.172.2.4
	binutils-csl-sourcerygxx-4_1-22:1.172.2.4
	binutils-csl-palmsource-arm-prelinker-1_0-1:1.172.2.4
	binutils-csl-sourcerygxx-4_1-20:1.172.2.4
	binutils-csl-arm-2006q3-19:1.172.2.4
	binutils-csl-sourcerygxx-4_1-19:1.172.2.4
	binutils-csl-sourcerygxx-4_1-18:1.172.2.3
	binutils-csl-renesas-4_1-9:1.172.2.3
	gdb-csl-sourcerygxx-3_4_4-25:1.167
	binutils-csl-sourcerygxx-3_4_4-25:1.149.2.3
	nickrob-async-20060828-mergepoint:1.180
	gdb-csl-symbian-6_4_50_20060226-11:1.170
	binutils-csl-renesas-4_1-8:1.172.2.2
	binutils-csl-renesas-4_1-7:1.172.2.2
	binutils-csl-renesas-4_1-6:1.172.2.2
	gdb-csl-sourcerygxx-4_1-17:1.170
	binutils-csl-sourcerygxx-4_1-17:1.172.2.2
	gdb-csl-20060226-branch-local-2:1.170
	gdb-csl-sourcerygxx-4_1-14:1.170
	binutils-csl-sourcerygxx-4_1-14:1.172.2.1
	binutils-csl-sourcerygxx-4_1-15:1.172.2.1
	gdb-csl-sourcerygxx-4_1-13:1.170
	binutils-csl-sourcerygxx-4_1-13:1.172.2.1
	binutils-2_17:1.175.2.1
	gdb-csl-sourcerygxx-4_1-12:1.170
	binutils-csl-sourcerygxx-4_1-12:1.172.2.1
	gdb-csl-sourcerygxx-3_4_4-21:1.170
	binutils-csl-sourcerygxx-3_4_4-21:1.172.2.1
	gdb_6_5-20060621-release:1.176
	binutils-csl-wrs-linux-3_4_4-24:1.149
	binutils-csl-wrs-linux-3_4_4-23:1.149
	gdb-csl-sourcerygxx-4_1-9:1.170
	binutils-csl-sourcerygxx-4_1-9:1.172.2.1
	gdb-csl-sourcerygxx-4_1-8:1.170
	binutils-csl-sourcerygxx-4_1-8:1.172.2.1
	gdb-csl-sourcerygxx-4_1-7:1.170
	binutils-csl-sourcerygxx-4_1-7:1.172.2.1
	gdb-csl-arm-2006q1-6:1.170
	binutils-csl-arm-2006q1-6:1.172.2.1
	gdb-csl-sourcerygxx-4_1-6:1.170
	binutils-csl-sourcerygxx-4_1-6:1.172.2.1
	binutils-csl-wrs-linux-3_4_4-22:1.149
	gdb-csl-symbian-6_4_50_20060226-10:1.170
	gdb-csl-symbian-6_4_50_20060226-9:1.170
	gdb-csl-symbian-6_4_50_20060226-8:1.170
	gdb-csl-coldfire-4_1-11:1.170
	binutils-csl-coldfire-4_1-11:1.172.2.1
	gdb-csl-sourcerygxx-3_4_4-19:1.170
	binutils-csl-sourcerygxx-3_4_4-19:1.172.2.1
	gdb-csl-coldfire-4_1-10:1.170
	gdb_6_5-branch:1.176.0.8
	gdb_6_5-2006-05-14-branchpoint:1.176
	binutils-csl-coldfire-4_1-10:1.172.2.1
	gdb-csl-sourcerygxx-4_1-5:1.170
	binutils-csl-sourcerygxx-4_1-5:1.172.2.1
	nickrob-async-20060513-branch:1.176.0.6
	nickrob-async-20060513-branchpoint:1.176
	gdb-csl-sourcerygxx-4_1-4:1.170
	binutils-csl-sourcerygxx-4_1-4:1.172.2.1
	msnyder-reverse-20060502-branch:1.176.0.4
	msnyder-reverse-20060502-branchpoint:1.176
	binutils-csl-wrs-linux-3_4_4-21:1.149
	gdb-csl-morpho-4_1-4:1.170
	binutils-csl-morpho-4_1-4:1.172.2.1
	gdb-csl-sourcerygxx-3_4_4-17:1.170
	binutils-csl-sourcerygxx-3_4_4-17:1.172.2.1
	binutils-csl-wrs-linux-3_4_4-20:1.149
	readline_5_1-import-branch:1.176.0.2
	readline_5_1-import-branchpoint:1.176
	gdb-csl-20060226-branch-merge-to-csl-symbian-1:1.170
	binutils-2_17-branch:1.175.0.2
	binutils-2_17-branchpoint:1.175
	gdb-csl-symbian-20060226-branch:1.170.0.6
	gdb-csl-symbian-20060226-branchpoint:1.170
	gdb-csl-20060226-branch-merge-to-csl-local-1:1.170
	msnyder-reverse-20060331-branch:1.173.0.2
	msnyder-reverse-20060331-branchpoint:1.173
	binutils-csl-2_17-branch:1.172.0.2
	binutils-csl-2_17-branchpoint:1.172
	gdb-csl-available-20060303-branch:1.170.0.4
	gdb-csl-available-20060303-branchpoint:1.170
	gdb-csl-20060226-branch:1.170.0.2
	gdb-csl-20060226-branchpoint:1.170
	gdb_6_4-20051202-release:1.167
	msnyder-fork-checkpoint-branch:1.167.0.6
	msnyder-fork-checkpoint-branchpoint:1.167
	gdb-csl-gxxpro-6_3-branch:1.167.0.4
	gdb-csl-gxxpro-6_3-branchpoint:1.167
	gdb_6_4-branch:1.167.0.2
	gdb_6_4-2005-11-01-branchpoint:1.167
	gdb-csl-arm-20051020-branch:1.164.0.2
	gdb-csl-arm-20051020-branchpoint:1.164
	binutils-csl-gxxpro-3_4-branch:1.149.2.3.0.2
	binutils-csl-gxxpro-3_4-branchpoint:1.149.2.3
	binutils-2_16_1:1.149.2.3
	msnyder-tracepoint-checkpoint-branch:1.156.0.2
	msnyder-tracepoint-checkpoint-branchpoint:1.156
	gdb-csl-arm-20050325-2005-q1b:1.150
	binutils-csl-arm-2005q1b:1.149
	binutils-2_16:1.149.2.1
	gdb-csl-arm-20050325-2005-q1a:1.150
	binutils-csl-arm-2005q1a:1.149
	csl-arm-20050325-branch:1.150.0.2
	csl-arm-20050325-branchpoint:1.150
	binutils-csl-arm-2005q1-branch:1.149.0.4
	binutils-csl-arm-2005q1-branchpoint:1.149
	binutils-2_16-branch:1.149.0.2
	binutils-2_16-branchpoint:1.149
	csl-arm-2004-q3d:1.145
	gdb_6_3-20041109-release:1.144
	gdb_6_3-branch:1.144.0.2
	gdb_6_3-20041019-branchpoint:1.144
	csl-arm-2004-q3:1.142
	drow_intercu-merge-20040921:1.142
	drow_intercu-merge-20040915:1.140
	jimb-gdb_6_2-e500-branch:1.140.0.6
	jimb-gdb_6_2-e500-branchpoint:1.140
	gdb_6_2-20040730-release:1.140
	gdb_6_2-branch:1.140.0.2
	gdb_6_2-2004-07-10-gmt-branchpoint:1.140
	gdb_6_1_1-20040616-release:1.127
	binutils-2_15:1.127.6.2
	binutils-2_15-branchpoint:1.127
	csl-arm-2004-q1a:1.131
	csl-arm-2004-q1:1.131
	gdb_6_1-2004-04-05-release:1.127
	drow_intercu-merge-20040402:1.130
	drow_intercu-merge-20040327:1.128
	ezannoni_pie-20040323-branch:1.128.0.2
	ezannoni_pie-20040323-branchpoint:1.128
	cagney_tramp-20040321-mergepoint:1.128
	cagney_tramp-20040309-branch:1.127.0.12
	cagney_tramp-20040309-branchpoint:1.127
	gdb_6_1-branch:1.127.0.10
	gdb_6_1-2004-03-01-gmt-branchpoint:1.127
	drow_intercu-20040221-branch:1.127.0.8
	drow_intercu-20040221-branchpoint:1.127
	binutils-2_15-branch:1.127.0.6
	cagney_bfdfile-20040213-branch:1.127.0.4
	cagney_bfdfile-20040213-branchpoint:1.127
	drow-cplus-merge-20040208:1.127
	carlton_dictionary-20040126-merge:1.127
	cagney_bigcore-20040122-branch:1.127.0.2
	cagney_bigcore-20040122-branchpoint:1.127
	drow-cplus-merge-20040113:1.127
	csl-arm-2003-q4:1.127
	drow-cplus-merge-20031224:1.127
	drow-cplus-merge-20031220:1.127
	carlton_dictionary-20031215-merge:1.127
	drow-cplus-merge-20031214:1.127
	carlton-dictionary-20031111-merge:1.126
	gdb_6_0-2003-10-04-release:1.122
	kettenis_sparc-20030918-branch:1.125.0.6
	kettenis_sparc-20030918-branchpoint:1.125
	carlton_dictionary-20030917-merge:1.125
	ezannoni_pie-20030916-branchpoint:1.125
	ezannoni_pie-20030916-branch:1.125.0.4
	cagney_x86i386-20030821-branch:1.125.0.2
	cagney_x86i386-20030821-branchpoint:1.125
	carlton_dictionary-20030805-merge:1.124
	carlton_dictionary-20030627-merge:1.122
	gdb_6_0-branch:1.122.0.4
	gdb_6_0-2003-06-23-branchpoint:1.122
	jimb-ppc64-linux-20030613-branch:1.122.0.2
	jimb-ppc64-linux-20030613-branchpoint:1.122
	binutils-2_14:1.120
	cagney_convert-20030606-branch:1.121.0.2
	cagney_convert-20030606-branchpoint:1.121
	cagney_writestrings-20030508-branch:1.120.0.10
	cagney_writestrings-20030508-branchpoint:1.120
	jimb-ppc64-linux-20030528-branch:1.120.0.8
	jimb-ppc64-linux-20030528-branchpoint:1.120
	carlton_dictionary-20030523-merge:1.120
	cagney_fileio-20030521-branch:1.120.0.6
	cagney_fileio-20030521-branchpoint:1.120
	kettenis_i386newframe-20030517-mergepoint:1.120
	jimb-ppc64-linux-20030509-branch:1.120.0.4
	jimb-ppc64-linux-20030509-branchpoint:1.120
	kettenis_i386newframe-20030504-mergepoint:1.120
	carlton_dictionary-20030430-merge:1.120
	binutils-2_14-branch:1.120.0.2
	binutils-2_14-branchpoint:1.120
	kettenis_i386newframe-20030419-branch:1.119.0.6
	kettenis_i386newframe-20030419-branchpoint:1.119
	carlton_dictionary-20030416-merge:1.119
	cagney_frameaddr-20030409-mergepoint:1.119
	kettenis_i386newframe-20030406-branch:1.119.0.4
	kettenis_i386newframe-20030406-branchpoint:1.119
	cagney_frameaddr-20030403-branchpoint:1.119
	cagney_frameaddr-20030403-branch:1.119.0.2
	cagney_framebase-20030330-mergepoint:1.118
	cagney_framebase-20030326-branch:1.118.0.10
	cagney_framebase-20030326-branchpoint:1.118
	cagney_lazyid-20030317-branch:1.118.0.8
	cagney_lazyid-20030317-branchpoint:1.118
	kettenis-i386newframe-20030316-mergepoint:1.118
	offbyone-20030313-branch:1.118.0.6
	offbyone-20030313-branchpoint:1.118
	kettenis-i386newframe-20030308-branch:1.118.0.4
	kettenis-i386newframe-20030308-branchpoint:1.118
	carlton_dictionary-20030305-merge:1.118
	cagney_offbyone-20030303-branch:1.118.0.2
	cagney_offbyone-20030303-branchpoint:1.118
	carlton_dictionary-20030207-merge:1.117
	interps-20030202-branch:1.117.0.2
	interps-20030202-branchpoint:1.117
	cagney-unwind-20030108-branch:1.114.0.2
	cagney-unwind-20030108-branchpoint:1.114
	binutils-2_13_2_1:1.92.2.2
	binutils-2_13_2:1.92.2.2
	carlton_dictionary-20021223-merge:1.111
	gdb_5_3-2002-12-12-release:1.100
	carlton_dictionary-20021115-merge:1.110
	binutils-2_13_1:1.92.2.2
	kseitz_interps-20021105-merge:1.108
	kseitz_interps-20021103-merge:1.108
	drow-cplus-merge-20021020:1.107
	drow-cplus-merge-20021025:1.107
	carlton_dictionary-20021025-merge:1.107
	carlton_dictionary-20021011-merge:1.104
	drow-cplus-branch:1.102.0.2
	drow-cplus-branchpoint:1.102
	kseitz_interps-20020930-merge:1.102
	carlton_dictionary-20020927-merge:1.102
	carlton_dictionary-branch:1.101.0.2
	carlton_dictionary-20020920-branchpoint:1.101
	sid-20020905-branchpoint:1.100
	sid-20020905-branch:1.100.0.4
	gdb_5_3-branch:1.100.0.2
	gdb_5_3-2002-09-04-branchpoint:1.100
	kseitz_interps-20020829-merge:1.99
	cagney_sysregs-20020825-branch:1.98.0.4
	cagney_sysregs-20020825-branchpoint:1.98
	readline_4_3-import-branch:1.98.0.2
	readline_4_3-import-branchpoint:1.98
	binutils-2_13:1.92
	gdb_5_2_1-2002-07-23-release:1.77
	binutils-2_13-branchpoint:1.92
	binutils-2_13-branch:1.92.0.2
	kseitz_interps-20020528-branch:1.84.0.2
	kseitz_interps-20020528-branchpoint:1.84
	cagney_regbuf-20020515-branch:1.81.0.4
	cagney_regbuf-20020515-branchpoint:1.81
	binutils-2_12_1:1.76.2.2
	jimb-macro-020506-branch:1.81.0.2
	jimb-macro-020506-branchpoint:1.81
	gdb_5_2-2002-04-29-release:1.77
	binutils-2_12:1.76
	gdb_5_2-branch:1.77.0.2
	gdb_5_2-2002-03-03-branchpoint:1.77
	binutils-2_12-branch:1.76.0.2
	binutils-2_12-branchpoint:1.76
	gdb_5_1_1-2002-01-24-release:1.59
	gdb_5_1_0_1-2002-01-03-release:1.59
	cygnus_cvs_20020108_pre:1.71
	gdb_5_1_0_1-2002-01-03-branch:1.59.0.6
	gdb_5_1_0_1-2002-01-03-branchpoint:1.59
	gdb_5_1-2001-11-21-release:1.59
	gdb_s390-2001-09-26-branch:1.59.0.4
	gdb_s390-2001-09-26-branchpoint:1.59
	gdb_5_1-2001-07-29-branch:1.59.0.2
	gdb_5_1-2001-07-29-branchpoint:1.59
	binutils-2_11_2:1.44.2.1
	binutils-2_11_1:1.44.2.1
	binutils-2_11:1.44
	x86_64versiong3:1.50
	binutils-2_11-branch:1.44.0.2
	insight-precleanup-2001-01-01:1.43
	binutils-2_10_1:1.15.2.2
	binutils-2_10:1.15.2.2
	gdb-premipsmulti-2000-06-06-branch:1.31.0.2
	gdb-premipsmulti-2000-06-06-branchpoint:1.31
	gdb_5_0-2000-05-19-release:1.19
	gdb_4_18_2-2000-05-18-release:1.19
	gdb_4_95_1-2000-05-11-snapshot:1.19
	gdb_4_95_0-2000-04-27-snapshot:1.19
	gdb_5_0-2000-04-10-branch:1.19.0.2
	gdb_5_0-2000-04-10-branchpoint:1.19
	binutils-2_10-branch:1.15.0.2
	binutils-2_10-branchpoint:1.15
	binutils_latest_snapshot:1.277
	repo-unification-2000-02-06:1.10
	binu_ss_19990721:1.6
	binu_ss_19990602:1.2
	binu_ss_19990502:1.1.1.1
	cygnus:1.1.1;
locks; strict;
comment	@# @;


1.277
date	2013.06.26.10.52.12;	author yufeng;	state Exp;
branches;
next	1.276;

1.276
date	2013.06.26.10.49.28;	author yufeng;	state Exp;
branches;
next	1.275;

1.275
date	2013.06.26.10.41.41;	author yufeng;	state Exp;
branches;
next	1.274;

1.274
date	2013.06.26.10.37.46;	author yufeng;	state Exp;
branches;
next	1.273;

1.273
date	2013.06.23.20.08.22;	author rsandifo;	state Exp;
branches;
next	1.272;

1.272
date	2013.02.06.23.22.07;	author sandra;	state Exp;
branches;
next	1.271;

1.271
date	2013.02.05.13.57.49;	author amodra;	state Exp;
branches;
next	1.270;

1.270
date	2013.02.04.06.02.09;	author amodra;	state Exp;
branches;
next	1.269;

1.269
date	2013.01.10.09.49.04;	author nickc;	state Exp;
branches;
next	1.268;

1.268
date	2012.12.17.16.55.37;	author nickc;	state Exp;
branches;
next	1.267;

1.267
date	2012.11.09.17.36.12;	author nickc;	state Exp;
branches;
next	1.266;

1.266
date	2012.10.13.14.17.10;	author hjl;	state Exp;
branches;
next	1.265;

1.265
date	2012.08.13.14.52.33;	author nickc;	state Exp;
branches;
next	1.264;

1.264
date	2012.05.15.12.55.33;	author nickc;	state Exp;
branches
	1.264.4.1;
next	1.263;

1.263
date	2012.05.03.13.04.57;	author nickc;	state Exp;
branches;
next	1.262;

1.262
date	2012.04.12.07.35.01;	author nickc;	state Exp;
branches;
next	1.261;

1.261
date	2012.04.03.16.01.24;	author roland;	state Exp;
branches;
next	1.260;

1.260
date	2011.11.02.03.08.56;	author dj;	state Exp;
branches;
next	1.259;

1.259
date	2011.10.25.11.17.59;	author nickc;	state Exp;
branches;
next	1.258;

1.258
date	2011.07.22.20.22.29;	author hjl;	state Exp;
branches
	1.258.2.1;
next	1.257;

1.257
date	2011.06.14.05.09.51;	author amodra;	state Exp;
branches;
next	1.256;

1.256
date	2011.06.13.15.18.44;	author nickc;	state Exp;
branches;
next	1.255;

1.255
date	2011.05.25.12.02.14;	author gingold;	state Exp;
branches;
next	1.254;

1.254
date	2011.04.08.07.34.31;	author gingold;	state Exp;
branches;
next	1.253;

1.253
date	2010.12.04.13.00.35;	author vapier;	state Exp;
branches;
next	1.252;

1.252
date	2010.11.25.01.06.30;	author brobecke;	state Exp;
branches;
next	1.251;

1.251
date	2010.08.12.17.49.42;	author hjl;	state Exp;
branches
	1.251.2.1;
next	1.250;

1.250
date	2010.06.29.04.17.19;	author amodra;	state Exp;
branches;
next	1.249;

1.249
date	2010.06.17.08.19.14;	author gingold;	state Exp;
branches;
next	1.248;

1.248
date	2010.05.14.07.18.37;	author gingold;	state Exp;
branches;
next	1.247;

1.247
date	2010.04.14.09.24.58;	author gingold;	state Exp;
branches;
next	1.246;

1.246
date	2010.04.01.09.47.13;	author gingold;	state Exp;
branches;
next	1.245;

1.245
date	2010.03.25.21.12.25;	author jsm28;	state Exp;
branches;
next	1.244;

1.244
date	2010.01.13.11.49.36;	author gingold;	state Exp;
branches;
next	1.243;

1.243
date	2009.09.29.14.17.03;	author nickc;	state Exp;
branches;
next	1.242;

1.242
date	2009.09.07.09.15.27;	author gingold;	state Exp;
branches;
next	1.241;

1.241
date	2009.08.27.05.24.42;	author rwild;	state Exp;
branches
	1.241.2.1;
next	1.240;

1.240
date	2009.08.22.19.02.56;	author rwild;	state Exp;
branches;
next	1.239;

1.239
date	2009.08.22.18.14.27;	author rwild;	state Exp;
branches;
next	1.238;

1.238
date	2009.08.22.17.08.07;	author rwild;	state Exp;
branches;
next	1.237;

1.237
date	2009.08.06.17.37.59;	author nickc;	state Exp;
branches;
next	1.236;

1.236
date	2009.07.25.14.58.52;	author hjl;	state Exp;
branches;
next	1.235;

1.235
date	2009.07.10.18.26.58;	author hjl;	state Exp;
branches;
next	1.234;

1.234
date	2009.07.10.15.26.56;	author tromey;	state Exp;
branches;
next	1.233;

1.233
date	2009.06.16.13.41.07;	author hjl;	state Exp;
branches;
next	1.232;

1.232
date	2009.06.15.14.36.32;	author hjl;	state Exp;
branches;
next	1.231;

1.231
date	2009.06.06.07.48.02;	author jkratoch;	state Exp;
branches;
next	1.230;

1.230
date	2009.06.04.06.51.11;	author amodra;	state Exp;
branches;
next	1.229;

1.229
date	2009.05.26.14.12.02;	author nickc;	state Exp;
branches;
next	1.228;

1.228
date	2009.05.26.03.19.15;	author amodra;	state Exp;
branches;
next	1.227;

1.227
date	2009.05.22.09.33.14;	author amodra;	state Exp;
branches;
next	1.226;

1.226
date	2009.04.27.14.27.33;	author nickc;	state Exp;
branches;
next	1.225;

1.225
date	2009.04.17.13.46.10;	author hjl;	state Exp;
branches;
next	1.224;

1.224
date	2009.04.16.15.39.41;	author nickc;	state Exp;
branches;
next	1.223;

1.223
date	2009.03.18.16.58.32;	author nickc;	state Exp;
branches;
next	1.222;

1.222
date	2009.03.18.11.27.17;	author amodra;	state Exp;
branches;
next	1.221;

1.221
date	2009.03.03.02.41.10;	author amodra;	state Exp;
branches;
next	1.220;

1.220
date	2009.03.02.10.33.05;	author nickc;	state Exp;
branches;
next	1.219;

1.219
date	2009.02.03.15.53.58;	author jsm28;	state Exp;
branches;
next	1.218;

1.218
date	2009.01.16.08.02.23;	author amodra;	state Exp;
branches;
next	1.217;

1.217
date	2009.01.15.12.42.51;	author nickc;	state Exp;
branches;
next	1.216;

1.216
date	2008.12.23.19.10.18;	author nickc;	state Exp;
branches;
next	1.215;

1.215
date	2008.09.30.07.48.53;	author amodra;	state Exp;
branches;
next	1.214;

1.214
date	2008.08.04.06.55.31;	author amodra;	state Exp;
branches
	1.214.2.1;
next	1.213;

1.213
date	2008.07.10.01.32.21;	author csilvers;	state Exp;
branches;
next	1.212;

1.212
date	2008.05.14.06.45.40;	author amodra;	state Exp;
branches;
next	1.211;

1.211
date	2008.03.13.02.05.19;	author amodra;	state Exp;
branches;
next	1.210;

1.210
date	2008.02.14.15.20.24;	author nickc;	state Exp;
branches;
next	1.209;

1.209
date	2008.02.12.00.25.59;	author amodra;	state Exp;
branches;
next	1.208;

1.208
date	2007.11.08.13.51.06;	author nathan;	state Exp;
branches;
next	1.207;

1.207
date	2007.10.24.04.54.37;	author amodra;	state Exp;
branches;
next	1.206;

1.206
date	2007.09.21.18.22.24;	author hjl;	state Exp;
branches;
next	1.205;

1.205
date	2007.09.21.16.16.17;	author nickc;	state Exp;
branches;
next	1.204;

1.204
date	2007.08.23.16.29.49;	author hjl;	state Exp;
branches;
next	1.203;

1.203
date	2007.08.06.20.53.29;	author drow;	state Exp;
branches;
next	1.202;

1.202
date	2007.07.09.21.23.43;	author roland;	state Exp;
branches
	1.202.2.1;
next	1.201;

1.201
date	2007.07.02.07.12.48;	author amodra;	state Exp;
branches;
next	1.200;

1.200
date	2007.06.29.16.29.15;	author jsm28;	state Exp;
branches;
next	1.199;

1.199
date	2007.06.29.14.09.32;	author nickc;	state Exp;
branches;
next	1.198;

1.198
date	2007.06.23.08.40.54;	author schwab;	state Exp;
branches;
next	1.197;

1.197
date	2007.06.14.15.30.59;	author hjl;	state Exp;
branches;
next	1.196;

1.196
date	2007.04.26.14.46.55;	author amodra;	state Exp;
branches;
next	1.195;

1.195
date	2007.04.19.10.41.29;	author amodra;	state Exp;
branches;
next	1.194;

1.194
date	2007.04.18.12.14.49;	author drow;	state Exp;
branches;
next	1.193;

1.193
date	2007.04.14.20.36.56;	author sje;	state Exp;
branches;
next	1.192;

1.192
date	2007.04.09.15.36.43;	author drow;	state Exp;
branches;
next	1.191;

1.191
date	2007.03.22.21.18.28;	author jsm28;	state Exp;
branches;
next	1.190;

1.190
date	2007.03.15.14.17.14;	author hjl;	state Exp;
branches;
next	1.189;

1.189
date	2007.03.08.05.35.01;	author amodra;	state Exp;
branches;
next	1.188;

1.188
date	2007.03.01.15.48.35;	author jsm28;	state Exp;
branches;
next	1.187;

1.187
date	2007.02.17.13.33.52;	author jsm28;	state Exp;
branches;
next	1.186;

1.186
date	2007.02.05.19.50.11;	author brolley;	state Exp;
branches;
next	1.185;

1.185
date	2007.01.12.13.53.59;	author hjl;	state Exp;
branches;
next	1.184;

1.184
date	2007.01.12.04.04.07;	author hjl;	state Exp;
branches;
next	1.183;

1.183
date	2006.10.25.06.49.19;	author amodra;	state Exp;
branches;
next	1.182;

1.182
date	2006.09.20.11.35.07;	author nickc;	state Exp;
branches;
next	1.181;

1.181
date	2006.09.16.23.51.50;	author nickc;	state Exp;
branches;
next	1.180;

1.180
date	2006.08.21.08.12.44;	author nickc;	state Exp;
branches;
next	1.179;

1.179
date	2006.08.04.13.13.55;	author rsandifo;	state Exp;
branches;
next	1.178;

1.178
date	2006.06.05.12.25.49;	author amodra;	state Exp;
branches;
next	1.177;

1.177
date	2006.05.31.15.14.34;	author drow;	state Exp;
branches;
next	1.176;

1.176
date	2006.04.19.12.09.42;	author amodra;	state Exp;
branches;
next	1.175;

1.175
date	2006.04.06.21.49.25;	author carlos;	state Exp;
branches
	1.175.2.1;
next	1.174;

1.174
date	2006.04.05.12.41.57;	author rsandifo;	state Exp;
branches;
next	1.173;

1.173
date	2006.03.22.09.28.13;	author rsandifo;	state Exp;
branches;
next	1.172;

1.172
date	2006.03.16.12.20.16;	author amodra;	state Exp;
branches
	1.172.2.1;
next	1.171;

1.171
date	2006.03.07.08.39.21;	author rsandifo;	state Exp;
branches;
next	1.170;

1.170
date	2006.02.17.14.36.21;	author nickc;	state Exp;
branches;
next	1.169;

1.169
date	2005.12.27.01.19.01;	author amodra;	state Exp;
branches;
next	1.168;

1.168
date	2005.12.12.11.24.58;	author nathan;	state Exp;
branches;
next	1.167;

1.167
date	2005.10.29.23.47.42;	author hjl;	state Exp;
branches;
next	1.166;

1.166
date	2005.10.29.21.16.20;	author kettenis;	state Exp;
branches;
next	1.165;

1.165
date	2005.10.25.17.40.09;	author nickc;	state Exp;
branches;
next	1.164;

1.164
date	2005.09.30.18.38.49;	author hjl;	state Exp;
branches;
next	1.163;

1.163
date	2005.09.30.15.36.34;	author clm;	state Exp;
branches;
next	1.162;

1.162
date	2005.08.18.03.48.25;	author amodra;	state Exp;
branches;
next	1.161;

1.161
date	2005.07.21.13.23.27;	author bje;	state Exp;
branches;
next	1.160;

1.160
date	2005.07.16.02.03.45;	author amodra;	state Exp;
branches;
next	1.159;

1.159
date	2005.07.14.22.51.48;	author jimb;	state Exp;
branches;
next	1.158;

1.158
date	2005.06.07.21.07.29;	author aldyh;	state Exp;
branches;
next	1.157;

1.157
date	2005.06.01.05.36.05;	author jimb;	state Exp;
branches;
next	1.156;

1.156
date	2005.05.19.23.49.42;	author zack;	state Exp;
branches;
next	1.155;

1.155
date	2005.05.05.14.37.01;	author pbrook;	state Exp;
branches;
next	1.154;

1.154
date	2005.05.05.03.42.00;	author hp;	state Exp;
branches;
next	1.153;

1.153
date	2005.04.28.23.02.05;	author pbrook;	state Exp;
branches;
next	1.152;

1.152
date	2005.04.14.05.26.15;	author amodra;	state Exp;
branches;
next	1.151;

1.151
date	2005.04.12.02.50.24;	author amodra;	state Exp;
branches;
next	1.150;

1.150
date	2005.03.24.09.26.26;	author nickc;	state Exp;
branches;
next	1.149;

1.149
date	2005.03.02.09.03.48;	author jbeulich;	state Exp;
branches
	1.149.2.1;
next	1.148;

1.148
date	2005.02.21.11.47.57;	author amodra;	state Exp;
branches;
next	1.147;

1.147
date	2004.11.09.13.29.13;	author amodra;	state Exp;
branches;
next	1.146;

1.146
date	2004.11.08.13.17.29;	author nickc;	state Exp;
branches;
next	1.145;

1.145
date	2004.11.04.15.54.28;	author drow;	state Exp;
branches;
next	1.144;

1.144
date	2004.10.15.05.47.11;	author amodra;	state Exp;
branches;
next	1.143;

1.143
date	2004.10.08.00.22.09;	author bwilson;	state Exp;
branches;
next	1.142;

1.142
date	2004.09.17.17.04.33;	author hjl;	state Exp;
branches;
next	1.141;

1.141
date	2004.09.17.06.08.04;	author amodra;	state Exp;
branches;
next	1.140;

1.140
date	2004.07.07.17.28.44;	author nickc;	state Exp;
branches;
next	1.139;

1.139
date	2004.07.06.16.58.37;	author nickc;	state Exp;
branches;
next	1.138;

1.138
date	2004.07.05.13.35.43;	author amylaar;	state Exp;
branches;
next	1.137;

1.137
date	2004.05.28.12.32.01;	author amylaar;	state Exp;
branches;
next	1.136;

1.136
date	2004.05.27.21.22.49;	author chastain;	state Exp;
branches;
next	1.135;

1.135
date	2004.05.24.14.48.15;	author nickc;	state Exp;
branches;
next	1.134;

1.134
date	2004.05.23.00.06.48;	author bje;	state Exp;
branches;
next	1.133;

1.133
date	2004.05.22.06.06.22;	author bje;	state Exp;
branches;
next	1.132;

1.132
date	2004.05.21.15.38.01;	author nickc;	state Exp;
branches;
next	1.131;

1.131
date	2004.04.08.15.17.35;	author rsandifo;	state Exp;
branches;
next	1.130;

1.130
date	2004.03.30.14.04.25;	author nickc;	state Exp;
branches;
next	1.129;

1.129
date	2004.03.27.10.58.04;	author amodra;	state Exp;
branches;
next	1.128;

1.128
date	2004.03.19.07.00.49;	author amodra;	state Exp;
branches;
next	1.127;

1.127
date	2003.12.02.08.14.33;	author amodra;	state Exp;
branches
	1.127.6.1
	1.127.8.1
	1.127.12.1;
next	1.126;

1.126
date	2003.10.10.15.29.49;	author hjl;	state Exp;
branches;
next	1.125;

1.125
date	2003.08.14.07.03.00;	author amodra;	state Exp;
branches;
next	1.124;

1.124
date	2003.07.10.07.48.46;	author amodra;	state Exp;
branches;
next	1.123;

1.123
date	2003.07.10.04.44.36;	author aoliva;	state Exp;
branches;
next	1.122;

1.122
date	2003.06.10.23.44.39;	author amodra;	state Exp;
branches;
next	1.121;

1.121
date	2003.05.29.15.05.40;	author nickc;	state Exp;
branches;
next	1.120;

1.120
date	2003.04.21.13.24.18;	author ciceron;	state Exp;
branches;
next	1.119;

1.119
date	2003.04.01.15.50.26;	author nickc;	state Exp;
branches
	1.119.6.1;
next	1.118;

1.118
date	2003.02.25.03.44.46;	author amodra;	state Exp;
branches;
next	1.117;

1.117
date	2003.01.31.10.04.16;	author nickc;	state Exp;
branches;
next	1.116;

1.116
date	2003.01.23.11.51.33;	author amodra;	state Exp;
branches;
next	1.115;

1.115
date	2003.01.16.04.09.36;	author amodra;	state Exp;
branches;
next	1.114;

1.114
date	2003.01.09.08.35.28;	author kdienes;	state Exp;
branches;
next	1.113;

1.113
date	2003.01.03.21.12.23;	author scox;	state Exp;
branches;
next	1.112;

1.112
date	2002.12.30.19.25.09;	author nickc;	state Exp;
branches;
next	1.111;

1.111
date	2002.11.18.16.37.52;	author kdienes;	state Exp;
branches;
next	1.110;

1.110
date	2002.11.06.13.26.26;	author nickc;	state Exp;
branches;
next	1.109;

1.109
date	2002.11.06.11.38.34;	author amodra;	state Exp;
branches;
next	1.108;

1.108
date	2002.10.28.22.30.28;	author hjl;	state Exp;
branches;
next	1.107;

1.107
date	2002.10.16.08.39.34;	author amodra;	state Exp;
branches;
next	1.106;

1.106
date	2002.10.15.17.14.50;	author rth;	state Exp;
branches;
next	1.105;

1.105
date	2002.10.14.12.06.03;	author amodra;	state Exp;
branches;
next	1.104;

1.104
date	2002.10.11.13.53.33;	author drow;	state Exp;
branches;
next	1.103;

1.103
date	2002.10.09.19.03.56;	author sclarke;	state Exp;
branches;
next	1.102;

1.102
date	2002.09.21.09.59.19;	author amodra;	state Exp;
branches
	1.102.2.1;
next	1.101;

1.101
date	2002.09.17.02.24.33;	author obrien;	state Exp;
branches
	1.101.2.1;
next	1.100;

1.100
date	2002.08.30.08.11.44;	author amodra;	state Exp;
branches;
next	1.99;

1.99
date	2002.08.28.10.38.44;	author nickc;	state Exp;
branches;
next	1.98;

1.98
date	2002.08.22.17.27.19;	author nickc;	state Exp;
branches;
next	1.97;

1.97
date	2002.08.09.15.38.21;	author nickc;	state Exp;
branches;
next	1.96;

1.96
date	2002.07.31.00.32.08;	author ths;	state Exp;
branches;
next	1.95;

1.95
date	2002.07.30.17.32.25;	author nickc;	state Exp;
branches;
next	1.94;

1.94
date	2002.07.17.17.53.28;	author hjl;	state Exp;
branches;
next	1.93;

1.93
date	2002.07.17.14.15.48;	author nickc;	state Exp;
branches;
next	1.92;

1.92
date	2002.07.01.08.31.52;	author amodra;	state Exp;
branches
	1.92.2.1;
next	1.91;

1.91
date	2002.06.18.21.10.46;	author brolley;	state Exp;
branches;
next	1.90;

1.90
date	2002.06.08.23.23.08;	author thorpej;	state Exp;
branches;
next	1.89;

1.89
date	2002.06.08.08.43.34;	author amodra;	state Exp;
branches;
next	1.88;

1.88
date	2002.06.05.01.50.41;	author thorpej;	state Exp;
branches;
next	1.87;

1.87
date	2002.06.04.02.57.36;	author thorpej;	state Exp;
branches;
next	1.86;

1.86
date	2002.05.31.02.59.44;	author amodra;	state Exp;
branches;
next	1.85;

1.85
date	2002.05.30.02.14.11;	author thorpej;	state Exp;
branches;
next	1.84;

1.84
date	2002.05.28.14.05.08;	author nickc;	state Exp;
branches
	1.84.2.1;
next	1.83;

1.83
date	2002.05.17.10.34.01;	author amodra;	state Exp;
branches;
next	1.82;

1.82
date	2002.05.13.00.58.40;	author amodra;	state Exp;
branches;
next	1.81;

1.81
date	2002.04.04.14.04.38;	author amodra;	state Exp;
branches
	1.81.4.1;
next	1.80;

1.80
date	2002.04.04.07.01.13;	author ths;	state Exp;
branches;
next	1.79;

1.79
date	2002.03.21.09.15.10;	author amodra;	state Exp;
branches;
next	1.78;

1.78
date	2002.03.18.12.45.33;	author nickc;	state Exp;
branches;
next	1.77;

1.77
date	2002.02.11.05.01.55;	author amodra;	state Exp;
branches;
next	1.76;

1.76
date	2002.02.08.05.33.21;	author aoliva;	state Exp;
branches
	1.76.2.1;
next	1.75;

1.75
date	2002.02.01.03.26.28;	author amodra;	state Exp;
branches;
next	1.74;

1.74
date	2002.01.31.17.32.54;	author nickc;	state Exp;
branches;
next	1.73;

1.73
date	2002.01.22.08.57.57;	author amodra;	state Exp;
branches;
next	1.72;

1.72
date	2002.01.08.04.22.50;	author thorpej;	state Exp;
branches;
next	1.71;

1.71
date	2001.12.13.11.09.32;	author jakub;	state Exp;
branches;
next	1.70;

1.70
date	2001.12.08.03.45.48;	author geoffk;	state Exp;
branches;
next	1.69;

1.69
date	2001.12.05.22.46.20;	author ths;	state Exp;
branches;
next	1.68;

1.68
date	2001.11.07.16.50.35;	author jakub;	state Exp;
branches;
next	1.67;

1.67
date	2001.10.30.15.20.02;	author nickc;	state Exp;
branches;
next	1.66;

1.66
date	2001.10.04.05.40.43;	author amodra;	state Exp;
branches;
next	1.65;

1.65
date	2001.10.03.12.29.08;	author amodra;	state Exp;
branches;
next	1.64;

1.64
date	2001.10.02.05.58.41;	author amodra;	state Exp;
branches;
next	1.63;

1.63
date	2001.09.21.02.12.28;	author amodra;	state Exp;
branches;
next	1.62;

1.62
date	2001.08.30.16.02.39;	author hjl;	state Exp;
branches;
next	1.61;

1.61
date	2001.08.29.01.33.51;	author amylaar;	state Exp;
branches;
next	1.60;

1.60
date	2001.08.27.10.22.03;	author amodra;	state Exp;
branches;
next	1.59;

1.59
date	2001.07.24.09.59.53;	author amodra;	state Exp;
branches;
next	1.58;

1.58
date	2001.07.15.19.33.11;	author hjl;	state Exp;
branches;
next	1.57;

1.57
date	2001.06.10.05.20.59;	author amodra;	state Exp;
branches;
next	1.56;

1.56
date	2001.05.25.22.50.26;	author hjl;	state Exp;
branches;
next	1.55;

1.55
date	2001.05.24.20.50.50;	author trix;	state Exp;
branches;
next	1.54;

1.54
date	2001.04.24.15.08.13;	author nickc;	state Exp;
branches;
next	1.53;

1.53
date	2001.04.13.00.34.36;	author jakub;	state Exp;
branches;
next	1.52;

1.52
date	2001.03.23.18.05.29;	author nickc;	state Exp;
branches;
next	1.51;

1.51
date	2001.03.08.21.03.56;	author nickc;	state Exp;
branches;
next	1.50;

1.50
date	2001.02.27.06.43.51;	author amodra;	state Exp;
branches;
next	1.49;

1.49
date	2001.02.18.23.32.52;	author nickc;	state Exp;
branches;
next	1.48;

1.48
date	2001.02.14.19.18.51;	author nickc;	state Exp;
branches;
next	1.47;

1.47
date	2001.02.11.22.53.28;	author msokolov;	state Exp;
branches;
next	1.46;

1.46
date	2001.02.10.00.55.53;	author nickc;	state Exp;
branches;
next	1.45;

1.45
date	2001.02.07.01.58.26;	author nickc;	state Exp;
branches;
next	1.44;

1.44
date	2001.01.22.09.41.39;	author aj;	state Exp;
branches
	1.44.2.1;
next	1.43;

1.43
date	2000.12.08.22.50.07;	author nickc;	state Exp;
branches;
next	1.42;

1.42
date	2000.11.30.19.16.54;	author nickc;	state Exp;
branches;
next	1.41;

1.41
date	2000.11.07.00.43.24;	author wilson;	state Exp;
branches;
next	1.40;

1.40
date	2000.09.28.08.08.16;	author amodra;	state Exp;
branches;
next	1.39;

1.39
date	2000.09.07.04.23.43;	author aoliva;	state Exp;
branches;
next	1.38;

1.38
date	2000.07.20.16.21.06;	author hp;	state Exp;
branches;
next	1.37;

1.37
date	2000.07.09.07.23.07;	author amodra;	state Exp;
branches;
next	1.36;

1.36
date	2000.07.01.01.41.08;	author amodra;	state Exp;
branches;
next	1.35;

1.35
date	2000.06.22.13.01.41;	author amodra;	state Exp;
branches;
next	1.34;

1.34
date	2000.06.20.20.40.00;	author hjl;	state Exp;
branches;
next	1.33;

1.33
date	2000.06.19.01.22.37;	author nickc;	state Exp;
branches;
next	1.32;

1.32
date	2000.06.07.03.43.32;	author amodra;	state Exp;
branches;
next	1.31;

1.31
date	2000.05.26.14.14.20;	author amodra;	state Exp;
branches;
next	1.30;

1.30
date	2000.05.06.01.47.17;	author cpopetz;	state Exp;
branches;
next	1.29;

1.29
date	2000.05.02.11.18.33;	author amodra;	state Exp;
branches;
next	1.28;

1.28
date	2000.05.02.00.23.54;	author wilson;	state Exp;
branches;
next	1.27;

1.27
date	2000.05.02.00.12.45;	author amodra;	state Exp;
branches;
next	1.26;

1.26
date	2000.04.28.20.02.30;	author cpopetz;	state Exp;
branches;
next	1.25;

1.25
date	2000.04.26.15.09.42;	author cpopetz;	state Exp;
branches;
next	1.24;

1.24
date	2000.04.24.08.23.47;	author law;	state Exp;
branches;
next	1.23;

1.23
date	2000.04.21.20.22.21;	author wilson;	state Exp;
branches;
next	1.22;

1.22
date	2000.04.18.04.03.16;	author wilson;	state Exp;
branches;
next	1.21;

1.21
date	2000.04.11.23.57.13;	author amodra;	state Exp;
branches;
next	1.20;

1.20
date	2000.04.11.04.11.02;	author twall;	state Exp;
branches;
next	1.19;

1.19
date	2000.04.09.12.17.37;	author cagney;	state Exp;
branches;
next	1.18;

1.18
date	2000.04.08.00.19.37;	author nickc;	state Exp;
branches;
next	1.17;

1.17
date	2000.04.07.17.06.57;	author twall;	state Exp;
branches;
next	1.16;

1.16
date	2000.04.04.10.53.53;	author amodra;	state Exp;
branches;
next	1.15;

1.15
date	2000.03.27.08.39.12;	author amodra;	state Exp;
branches
	1.15.2.1;
next	1.14;

1.14
date	2000.02.28.18.56.10;	author nickc;	state Exp;
branches;
next	1.13;

1.13
date	2000.02.27.17.07.38;	author ian;	state Exp;
branches;
next	1.12;

1.12
date	2000.02.23.13.52.20;	author amodra;	state Exp;
branches;
next	1.11;

1.11
date	2000.02.21.05.33.40;	author ian;	state Exp;
branches;
next	1.10;

1.10
date	99.09.11.23.37.28;	author ian;	state Exp;
branches;
next	1.9;

1.9
date	99.09.04.17.07.45;	author ian;	state Exp;
branches;
next	1.8;

1.8
date	99.08.24.15.16.53;	author nickc;	state Exp;
branches;
next	1.7;

1.7
date	99.08.08.17.26.50;	author ian;	state Exp;
branches;
next	1.6;

1.6
date	99.07.12.11.05.03;	author ian;	state Exp;
branches;
next	1.5;

1.5
date	99.06.07.02.51.39;	author schwab;	state Exp;
branches;
next	1.4;

1.4
date	99.06.04.12.00.29;	author ian;	state Exp;
branches;
next	1.3;

1.3
date	99.06.04.07.39.42;	author nickc;	state Exp;
branches;
next	1.2;

1.2
date	99.05.27.21.42.07;	author ian;	state Exp;
branches;
next	1.1;

1.1
date	99.05.03.07.28.54;	author rth;	state Exp;
branches
	1.1.1.1;
next	;

1.264.4.1
date	2012.08.16.09.21.33;	author nickc;	state Exp;
branches;
next	1.264.4.2;

1.264.4.2
date	2012.11.13.14.40.37;	author gingold;	state Exp;
branches;
next	1.264.4.3;

1.264.4.3
date	2012.11.13.15.22.45;	author gingold;	state Exp;
branches;
next	1.264.4.4;

1.264.4.4
date	2013.03.25.16.03.26;	author gingold;	state Exp;
branches;
next	1.264.4.5;

1.264.4.5
date	2013.03.25.16.13.25;	author gingold;	state Exp;
branches;
next	;

1.258.2.1
date	2011.11.21.12.52.26;	author gingold;	state Exp;
branches;
next	1.258.2.2;

1.258.2.2
date	2011.11.21.13.02.06;	author gingold;	state Exp;
branches;
next	;

1.251.2.1
date	2010.12.06.15.17.45;	author vapier;	state Exp;
branches;
next	1.251.2.2;

1.251.2.2
date	2010.12.08.09.56.01;	author gingold;	state Exp;
branches;
next	1.251.2.3;

1.251.2.3
date	2010.12.08.10.28.46;	author gingold;	state Exp;
branches;
next	1.251.2.4;

1.251.2.4
date	2011.02.01.12.25.32;	author amodra;	state Exp;
branches;
next	1.251.2.5;

1.251.2.5
date	2011.06.27.09.06.08;	author gingold;	state Exp;
branches;
next	1.251.2.6;

1.251.2.6
date	2011.06.27.09.38.43;	author gingold;	state Exp;
branches;
next	;

1.241.2.1
date	2009.09.07.09.19.42;	author gingold;	state Exp;
branches;
next	1.241.2.2;

1.241.2.2
date	2009.10.16.12.07.00;	author gingold;	state Exp;
branches;
next	1.241.2.3;

1.241.2.3
date	2009.10.16.13.09.03;	author gingold;	state Exp;
branches;
next	1.241.2.4;

1.241.2.4
date	2010.03.03.12.44.19;	author gingold;	state Exp;
branches;
next	1.241.2.5;

1.241.2.5
date	2010.03.03.13.06.53;	author gingold;	state Exp;
branches;
next	;

1.214.2.1
date	2008.09.09.08.02.17;	author amodra;	state Exp;
branches;
next	1.214.2.2;

1.214.2.2
date	2008.10.16.13.57.53;	author gingold;	state Exp;
branches;
next	1.214.2.3;

1.214.2.3
date	2008.10.28.10.42.15;	author gingold;	state Exp;
branches;
next	1.214.2.4;

1.214.2.4
date	2009.02.02.11.16.29;	author gingold;	state Exp;
branches;
next	1.214.2.5;

1.214.2.5
date	2009.02.03.10.58.18;	author gingold;	state Exp;
branches;
next	;

1.202.2.1
date	2007.08.06.20.51.56;	author drow;	state Exp;
branches;
next	1.202.2.2;

1.202.2.2
date	2007.08.28.20.21.06;	author drow;	state Exp;
branches;
next	1.202.2.3;

1.202.2.3
date	2007.08.28.21.29.45;	author drow;	state Exp;
branches;
next	;

1.175.2.1
date	2006.06.23.20.05.34;	author drow;	state Exp;
branches;
next	1.175.2.2;

1.175.2.2
date	2006.06.23.20.57.04;	author drow;	state Exp;
branches;
next	;

1.172.2.1
date	2006.04.03.15.44.45;	author carlos;	state Exp;
branches;
next	1.172.2.2;

1.172.2.2
date	2006.07.26.18.46.22;	author nathan;	state Exp;
branches;
next	1.172.2.3;

1.172.2.3
date	2006.08.22.15.08.28;	author jsm28;	state Exp;
branches;
next	1.172.2.4;

1.172.2.4
date	2006.09.11.09.45.46;	author nathan;	state Exp;
branches;
next	;

1.149.2.1
date	2005.05.02.19.50.22;	author drow;	state Exp;
branches;
next	1.149.2.2;

1.149.2.2
date	2005.05.03.16.28.36;	author drow;	state Exp;
branches;
next	1.149.2.3;

1.149.2.3
date	2005.06.12.19.00.11;	author drow;	state Exp;
branches;
next	1.149.2.4;

1.149.2.4
date	2005.06.12.21.07.27;	author drow;	state Exp;
branches;
next	;

1.127.6.1
date	2004.04.08.12.41.35;	author amodra;	state Exp;
branches;
next	1.127.6.2;

1.127.6.2
date	2004.04.08.15.19.23;	author rsandifo;	state Exp;
branches;
next	;

1.127.8.1
date	2004.03.27.17.37.29;	author drow;	state Exp;
branches;
next	1.127.8.2;

1.127.8.2
date	2004.04.02.16.47.31;	author drow;	state Exp;
branches;
next	1.127.8.3;

1.127.8.3
date	2004.09.16.17.00.09;	author drow;	state Exp;
branches;
next	1.127.8.4;

1.127.8.4
date	2004.09.21.20.43.58;	author drow;	state Exp;
branches;
next	;

1.127.12.1
date	2004.03.21.23.57.23;	author cagney;	state Exp;
branches;
next	;

1.119.6.1
date	2003.05.04.11.37.35;	author kettenis;	state Exp;
branches;
next	;

1.102.2.1
date	2002.10.26.17.11.55;	author drow;	state Exp;
branches;
next	1.102.2.2;

1.102.2.2
date	2003.12.14.20.26.33;	author drow;	state Exp;
branches;
next	;

1.101.2.1
date	2002.09.27.20.02.49;	author carlton;	state Exp;
branches;
next	1.101.2.2;

1.101.2.2
date	2002.10.11.22.22.45;	author carlton;	state Exp;
branches;
next	1.101.2.3;

1.101.2.3
date	2002.10.25.23.49.46;	author carlton;	state Exp;
branches;
next	1.101.2.4;

1.101.2.4
date	2002.11.15.19.18.22;	author carlton;	state Exp;
branches;
next	1.101.2.5;

1.101.2.5
date	2002.12.23.19.37.19;	author carlton;	state Exp;
branches;
next	1.101.2.6;

1.101.2.6
date	2003.02.07.19.17.35;	author carlton;	state Exp;
branches;
next	1.101.2.7;

1.101.2.7
date	2003.03.06.00.56.12;	author carlton;	state Exp;
branches;
next	1.101.2.8;

1.101.2.8
date	2003.04.16.19.56.40;	author carlton;	state Exp;
branches;
next	1.101.2.9;

1.101.2.9
date	2003.05.01.00.46.37;	author carlton;	state Exp;
branches;
next	1.101.2.10;

1.101.2.10
date	2003.06.27.21.49.05;	author carlton;	state Exp;
branches;
next	1.101.2.11;

1.101.2.11
date	2003.08.05.17.12.43;	author carlton;	state Exp;
branches;
next	1.101.2.12;

1.101.2.12
date	2003.09.17.21.27.47;	author carlton;	state Exp;
branches;
next	1.101.2.13;

1.101.2.13
date	2003.11.11.23.50.04;	author carlton;	state Exp;
branches;
next	1.101.2.14;

1.101.2.14
date	2003.12.15.23.59.08;	author carlton;	state Exp;
branches;
next	;

1.92.2.1
date	2002.09.23.22.12.37;	author drow;	state Exp;
branches;
next	1.92.2.2;

1.92.2.2
date	2002.11.07.16.57.31;	author drow;	state Exp;
branches;
next	;

1.84.2.1
date	2002.06.20.01.29.31;	author kseitz;	state Exp;
branches;
next	1.84.2.2;

1.84.2.2
date	2002.07.22.21.46.37;	author kseitz;	state Exp;
branches;
next	1.84.2.3;

1.84.2.3
date	2002.08.09.18.34.09;	author kseitz;	state Exp;
branches;
next	1.84.2.4;

1.84.2.4
date	2002.08.30.22.52.34;	author kseitz;	state Exp;
branches;
next	1.84.2.5;

1.84.2.5
date	2002.10.01.00.45.41;	author kseitz;	state Exp;
branches;
next	1.84.2.6;

1.84.2.6
date	2002.11.03.22.01.33;	author ezannoni;	state Exp;
branches;
next	;

1.81.4.1
date	2002.06.15.16.42.33;	author cagney;	state Exp;
branches;
next	1.81.4.2;

1.81.4.2
date	2002.06.21.15.56.12;	author cagney;	state Exp;
branches;
next	;

1.76.2.1
date	2002.03.28.06.20.02;	author amodra;	state Exp;
branches;
next	1.76.2.2;

1.76.2.2
date	2002.04.04.14.52.53;	author amodra;	state Exp;
branches;
next	;

1.44.2.1
date	2001.06.11.10.03.59;	author amodra;	state Exp;
branches;
next	;

1.15.2.1
date	2000.04.05.05.36.39;	author amodra;	state Exp;
branches;
next	1.15.2.2;

1.15.2.2
date	2000.04.11.23.58.39;	author amodra;	state Exp;
branches;
next	;

1.1.1.1
date	99.05.03.07.28.54;	author rth;	state Exp;
branches;
next	;


desc
@@


1.277
log
@[AArch64, ILP32] 5/6 Improve the debugging experience with the generated file

bfd/

	* Makefile.am (elf32-aarch64.c): Add a #line cpp directive at the
	beginning of the generated file.
	(elf64-aarch64.c): Likewise.
	* Makefile.in: Re-generated.
@
text
@## Process this file with automake to generate Makefile.in
#
#   Copyright 2012 Free Software Foundation
#
# This file is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; see the file COPYING3.  If not see
# <http://www.gnu.org/licenses/>.
#

AUTOMAKE_OPTIONS = 1.11 no-dist foreign
ACLOCAL_AMFLAGS = -I . -I .. -I ../config

# Uncomment the following line when doing a release.
# RELEASE=y

INCDIR = $(srcdir)/../include
CSEARCH = -I. -I$(srcdir) -I$(INCDIR)

SUBDIRS = doc po

bfddocdir = doc

libbfd_la_LDFLAGS =
if INSTALL_LIBBFD
bfdlibdir = @@bfdlibdir@@
bfdincludedir = @@bfdincludedir@@
bfdlib_LTLIBRARIES = libbfd.la
bfdinclude_HEADERS = $(BFD_H) $(INCDIR)/ansidecl.h $(INCDIR)/symcat.h $(INCDIR)/bfdlink.h
else !INSTALL_LIBBFD
# Empty these so that the respective installation directories will not be created.
bfdlibdir =
bfdincludedir =
bfdinclude_HEADERS =
rpath_bfdlibdir = @@bfdlibdir@@
noinst_LTLIBRARIES = libbfd.la
libbfd_la_LDFLAGS += -rpath $(rpath_bfdlibdir)
endif

WARN_CFLAGS = @@WARN_CFLAGS@@
NO_WERROR = @@NO_WERROR@@
AM_CFLAGS = $(WARN_CFLAGS)
AM_CPPFLAGS = -DBINDIR='"$(bindir)"'
if PLUGINS
bfdinclude_HEADERS += $(INCDIR)/plugin-api.h
LIBDL = @@lt_cv_dlopen_libs@@
endif

# bfd.h goes here, for now
BFD_H = bfd.h

# Jim Kingdon notes:
# Writing S-records should be included in all (or at least most)
# *-*-coff, *-*-aout, etc., configurations, because people will want to
# be able to use objcopy to create S-records.  (S-records are not useful
# for the debugger, so if you are downloading things as S-records you
# need two copies of the executable, one to download and one for the
# debugger).
BFD32_LIBS = \
	archive.lo archures.lo bfd.lo bfdio.lo bfdwin.lo \
	cache.lo coffgen.lo corefile.lo \
	format.lo init.lo libbfd.lo opncls.lo reloc.lo \
	section.lo syms.lo targets.lo hash.lo linker.lo \
	srec.lo binary.lo tekhex.lo ihex.lo stabs.lo stab-syms.lo \
	merge.lo dwarf2.lo simple.lo compress.lo verilog.lo

BFD64_LIBS = archive64.lo

BFD32_LIBS_CFILES = \
	archive.c archures.c bfd.c bfdio.c bfdwin.c \
	cache.c coffgen.c corefile.c \
	format.c init.c libbfd.c opncls.c reloc.c \
	section.c syms.c targets.c hash.c linker.c \
	srec.c binary.c tekhex.c ihex.c stabs.c stab-syms.c \
	merge.c dwarf2.c simple.c compress.c verilog.c

BFD64_LIBS_CFILES = archive64.c

# This list is alphabetized to make it easier to keep in sync
# with the decls and initializer in archures.c.
ALL_MACHINES = \
	cpu-aarch64.lo \
	cpu-alpha.lo \
	cpu-arc.lo \
	cpu-arm.lo \
	cpu-avr.lo \
	cpu-bfin.lo \
	cpu-cr16.lo \
	cpu-cr16c.lo \
	cpu-cris.lo \
	cpu-crx.lo \
	cpu-d10v.lo \
	cpu-d30v.lo \
	cpu-dlx.lo \
	cpu-epiphany.lo \
	cpu-fr30.lo \
	cpu-frv.lo \
	cpu-h8300.lo \
	cpu-h8500.lo \
	cpu-hppa.lo \
	cpu-i370.lo \
	cpu-i386.lo \
	cpu-l1om.lo \
	cpu-k1om.lo \
	cpu-i860.lo \
	cpu-i960.lo \
	cpu-ia64.lo \
	cpu-ip2k.lo \
	cpu-iq2000.lo \
	cpu-lm32.lo \
	cpu-m10200.lo \
	cpu-m10300.lo \
	cpu-m32c.lo \
	cpu-m32r.lo \
	cpu-m68hc11.lo \
	cpu-m68hc12.lo \
	cpu-m9s12x.lo \
	cpu-m9s12xg.lo \
	cpu-m68k.lo \
	cpu-m88k.lo \
	cpu-mcore.lo \
	cpu-mep.lo \
	cpu-metag.lo \
	cpu-microblaze.lo \
	cpu-mips.lo \
	cpu-mmix.lo \
	cpu-moxie.lo \
	cpu-msp430.lo \
	cpu-mt.lo \
	cpu-nios2.lo \
	cpu-ns32k.lo \
	cpu-openrisc.lo \
	cpu-or32.lo \
	cpu-pdp11.lo \
	cpu-pj.lo \
	cpu-plugin.lo \
	cpu-powerpc.lo \
	cpu-rs6000.lo \
	cpu-rl78.lo \
	cpu-rx.lo \
	cpu-s390.lo \
	cpu-score.lo \
	cpu-sh.lo \
	cpu-sparc.lo \
	cpu-spu.lo \
	cpu-tic30.lo \
	cpu-tic4x.lo \
	cpu-tic54x.lo \
	cpu-tic6x.lo \
	cpu-tic80.lo \
	cpu-tilegx.lo \
	cpu-tilepro.lo \
	cpu-v850.lo \
	cpu-v850_rh850.lo \
	cpu-vax.lo \
	cpu-w65.lo \
	cpu-we32k.lo \
	cpu-xc16x.lo \
	cpu-xgate.lo \
	cpu-xstormy16.lo \
	cpu-xtensa.lo \
	cpu-z80.lo \
	cpu-z8k.lo

ALL_MACHINES_CFILES = \
	cpu-aarch64.c \
	cpu-alpha.c \
	cpu-arc.c \
	cpu-arm.c \
	cpu-avr.c \
	cpu-bfin.c \
	cpu-cr16.c \
	cpu-cr16c.c \
	cpu-cris.c \
	cpu-crx.c \
	cpu-d10v.c \
	cpu-d30v.c \
	cpu-dlx.c \
	cpu-epiphany.c \
	cpu-fr30.c \
	cpu-frv.c \
	cpu-h8300.c \
	cpu-h8500.c \
	cpu-hppa.c \
	cpu-i370.c \
	cpu-i386.c \
	cpu-l1om.c \
	cpu-k1om.c \
	cpu-i860.c \
	cpu-i960.c \
	cpu-ia64.c \
	cpu-ip2k.c \
	cpu-iq2000.c \
	cpu-lm32.c \
	cpu-m10200.c \
	cpu-m10300.c \
	cpu-m32c.c \
	cpu-m32r.c \
	cpu-m68hc11.c \
	cpu-m68hc12.c \
	cpu-m9s12x.c \
	cpu-m9s12xg.c \
	cpu-m68k.c \
	cpu-m88k.c \
	cpu-mcore.c \
	cpu-mep.c \
	cpu-metag.c \
	cpu-microblaze.c \
	cpu-mips.c \
	cpu-mmix.c \
	cpu-moxie.c \
	cpu-msp430.c \
	cpu-mt.c \
	cpu-ns32k.c \
	cpu-nios2.c \
	cpu-openrisc.c \
	cpu-or32.c \
	cpu-pdp11.c \
	cpu-pj.c \
	cpu-plugin.c \
	cpu-powerpc.c \
	cpu-rs6000.c \
	cpu-rl78.c \
	cpu-rx.c \
	cpu-s390.c \
	cpu-score.c \
	cpu-sh.c \
	cpu-sparc.c \
	cpu-spu.c \
	cpu-tic30.c \
	cpu-tic4x.c \
	cpu-tic54x.c \
	cpu-tic6x.c \
	cpu-tic80.c \
	cpu-tilegx.c \
	cpu-tilepro.c \
	cpu-v850.c \
	cpu-v850_rh850.c \
	cpu-vax.c \
	cpu-w65.c \
	cpu-we32k.c \
	cpu-xc16x.c \
	cpu-xgate.c \
	cpu-xstormy16.c \
	cpu-xtensa.c \
	cpu-z80.c \
	cpu-z8k.c

# The .o files needed by all of the 32 bit vectors that are configured into
# target_vector in targets.c if configured with --enable-targets=all.
BFD32_BACKENDS = \
	aout-adobe.lo \
	aout-arm.lo \
	aout-cris.lo \
	aout-ns32k.lo \
	aout-sparcle.lo \
	aout-tic30.lo \
	aout0.lo \
	aout32.lo \
	armnetbsd.lo \
	bout.lo \
	cf-i386lynx.lo \
	cf-sparclynx.lo \
	coff-apollo.lo \
	coff-arm.lo \
	coff-aux.lo \
	coff-go32.lo \
	coff-h8300.lo \
	coff-h8500.lo \
	coff-i386.lo \
	coff-i860.lo \
	coff-i960.lo \
	coff-m68k.lo \
	coff-m88k.lo \
	coff-mips.lo \
	coff-or32.lo \
	coff-rs6000.lo \
	coff-sh.lo \
	coff-sparc.lo \
	coff-stgo32.lo \
	coff-svm68k.lo \
	coff-tic30.lo \
	coff-tic4x.lo \
	coff-tic54x.lo \
	coff-tic80.lo \
	coff-u68k.lo \
	coff-w65.lo \
	coff-we32k.lo \
	coff-z80.lo \
	coff-z8k.lo \
	cofflink.lo \
	dwarf1.lo \
	ecoff.lo \
	ecofflink.lo \
	elf-attrs.lo \
	elf-eh-frame.lo \
	elf-ifunc.lo \
	elf-m10200.lo \
	elf-m10300.lo \
	elf-nacl.lo \
	elf-strtab.lo \
	elf-vxworks.lo \
	elf.lo \
	elf32-am33lin.lo \
	elf32-arc.lo \
	elf32-arm.lo \
	elf32-avr.lo \
	elf32-bfin.lo \
	elf32-cr16.lo \
	elf32-cr16c.lo \
	elf32-cris.lo \
	elf32-crx.lo \
	elf32-d10v.lo \
	elf32-d30v.lo \
	elf32-dlx.lo \
	elf32-epiphany.lo \
	elf32-fr30.lo \
	elf32-frv.lo \
	elf32-gen.lo \
	elf32-h8300.lo \
	elf32-hppa.lo \
	elf32-i370.lo \
	elf32-i386.lo \
	elf32-i860.lo \
	elf32-i960.lo \
	elf32-ip2k.lo \
	elf32-iq2000.lo \
	elf32-lm32.lo \
	elf32-m32c.lo \
	elf32-m32r.lo \
	elf32-m68hc11.lo \
	elf32-m68hc12.lo \
	elf32-m68hc1x.lo \
	elf32-m68k.lo \
	elf32-m88k.lo \
	elf32-mcore.lo \
	elf32-mep.lo \
	elf32-metag.lo \
	elf32-microblaze.lo \
	elf32-moxie.lo \
	elf32-msp430.lo \
	elf32-mt.lo \
	elf32-nios2.lo \
	elf32-openrisc.lo \
	elf32-or32.lo \
	elf32-pj.lo \
	elf32-ppc.lo \
	elf32-rl78.lo \
	elf32-rx.lo \
	elf32-s390.lo \
	elf32-sh-symbian.lo \
	elf32-sh.lo \
	elf32-sh64-com.lo \
	elf32-sh64.lo \
	elf32-sparc.lo \
	elf32-spu.lo \
	elf32-tic6x.lo \
	elf32-tilegx.lo \
	elf32-tilepro.lo \
	elf32-v850.lo \
	elf32-vax.lo \
	elf32-xc16x.lo \
	elf32-xgate.lo \
	elf32-xstormy16.lo \
	elf32-xtensa.lo \
	elf32.lo \
	elflink.lo \
	elfxx-sparc.lo \
	elfxx-tilegx.lo \
	epoc-pe-arm.lo \
	epoc-pei-arm.lo \
	hp300bsd.lo \
	hp300hpux.lo \
	i386aout.lo \
	i386bsd.lo \
	i386dynix.lo \
	i386freebsd.lo \
	i386linux.lo \
	i386lynx.lo \
	i386mach3.lo \
	i386msdos.lo \
	i386netbsd.lo \
	i386os9k.lo \
	ieee.lo \
	m68k4knetbsd.lo \
	m68klinux.lo \
	m68knetbsd.lo \
	m88kmach3.lo \
	m88kopenbsd.lo \
	mach-o.lo \
	mach-o-i386.lo \
	mipsbsd.lo \
	newsos3.lo \
	nlm.lo \
	nlm32-i386.lo \
	nlm32-ppc.lo \
	nlm32-sparc.lo \
	nlm32.lo \
	ns32knetbsd.lo \
	oasys.lo \
	pc532-mach.lo \
	pdp11.lo \
	pe-arm-wince.lo \
	pe-arm.lo \
	pe-i386.lo \
	pe-mcore.lo \
	pe-mips.lo \
	pe-ppc.lo \
	pe-sh.lo \
	pef.lo \
	pei-arm-wince.lo \
	pei-arm.lo \
	pei-i386.lo \
	pei-mcore.lo \
	pei-mips.lo \
	pei-ppc.lo \
	pei-sh.lo \
	peigen.lo \
	plugin.lo \
	ppcboot.lo \
	reloc16.lo \
	riscix.lo \
	som.lo \
	sparclinux.lo \
	sparclynx.lo \
	sparcnetbsd.lo \
	sunos.lo \
	vax1knetbsd.lo \
	vaxbsd.lo \
	vaxnetbsd.lo \
	versados.lo \
	vms-lib.lo \
	vms-misc.lo \
	xcofflink.lo \
	xsym.lo \
	xtensa-isa.lo \
	xtensa-modules.lo

BFD32_BACKENDS_CFILES = \
	aout-adobe.c \
	aout-arm.c \
	aout-cris.c \
	aout-ns32k.c \
	aout-sparcle.c \
	aout-tic30.c \
	aout0.c \
	aout32.c \
	armnetbsd.c \
	bout.c \
	cf-i386lynx.c \
	cf-sparclynx.c \
	coff-apollo.c \
	coff-arm.c \
	coff-aux.c \
	coff-go32.c \
	coff-h8300.c \
	coff-h8500.c \
	coff-i386.c \
	coff-i860.c \
	coff-i960.c \
	coff-m68k.c \
	coff-m88k.c \
	coff-mips.c \
	coff-or32.c \
	coff-rs6000.c \
	coff-sh.c \
	coff-sparc.c \
	coff-stgo32.c \
	coff-svm68k.c \
	coff-tic30.c \
	coff-tic4x.c \
	coff-tic54x.c \
	coff-tic80.c \
	coff-u68k.c \
	coff-w65.c \
	coff-we32k.c \
	coff-z80.c \
	coff-z8k.c \
	cofflink.c \
	dwarf1.c \
	ecoff.c \
	ecofflink.c \
	elf-attrs.c \
	elf-eh-frame.c \
	elf-ifunc.c \
	elf-m10200.c \
	elf-m10300.c \
	elf-nacl.c \
	elf-strtab.c \
	elf-vxworks.c \
	elf.c \
	elf32-am33lin.c \
	elf32-arc.c \
	elf32-arm.c \
	elf32-avr.c \
	elf32-bfin.c \
	elf32-cr16.c \
	elf32-cr16c.c \
	elf32-cris.c \
	elf32-crx.c \
	elf32-d10v.c \
	elf32-d30v.c \
	elf32-dlx.c \
	elf32-epiphany.c \
	elf32-fr30.c \
	elf32-frv.c \
	elf32-gen.c \
	elf32-h8300.c \
	elf32-hppa.c \
	elf32-i370.c \
	elf32-i386.c \
	elf32-i860.c \
	elf32-i960.c \
	elf32-ip2k.c \
	elf32-iq2000.c \
	elf32-lm32.c \
	elf32-m32c.c \
	elf32-m32r.c \
	elf32-m68hc11.c \
	elf32-m68hc12.c \
	elf32-m68hc1x.c \
	elf32-m68k.c \
	elf32-m88k.c \
	elf32-mcore.c \
	elf32-mep.c \
	elf32-metag.c \
	elf32-microblaze.c \
	elf32-moxie.c \
	elf32-msp430.c \
	elf32-mt.c \
	elf32-nios2.c \
	elf32-openrisc.c \
	elf32-or32.c \
	elf32-pj.c \
	elf32-ppc.c \
	elf32-rl78.c \
	elf32-rx.c \
	elf32-s390.c \
	elf32-sh-symbian.c \
	elf32-sh.c \
	elf32-sh64-com.c \
	elf32-sh64.c \
	elf32-sparc.c \
	elf32-spu.c \
	elf32-tic6x.c \
	elf32-tilegx.c \
	elf32-tilepro.c \
	elf32-v850.c \
	elf32-vax.c \
	elf32-xc16x.c \
	elf32-xgate.c \
	elf32-xstormy16.c \
	elf32-xtensa.c \
	elf32.c \
	elflink.c \
	elfxx-sparc.c \
	elfxx-tilegx.c \
	epoc-pe-arm.c \
	epoc-pei-arm.c \
	hp300bsd.c \
	hp300hpux.c \
	i386aout.c \
	i386bsd.c \
	i386dynix.c \
	i386freebsd.c \
	i386linux.c \
	i386lynx.c \
	i386mach3.c \
	i386msdos.c \
	i386netbsd.c \
	i386os9k.c \
	ieee.c \
	m68k4knetbsd.c \
	m68klinux.c \
	m68knetbsd.c \
	m88kmach3.c \
	m88kopenbsd.c \
	mach-o.c \
	mach-o-i386.c \
	mipsbsd.c \
	newsos3.c \
	nlm.c \
	nlm32-i386.c \
	nlm32-ppc.c \
	nlm32-sparc.c \
	nlm32.c \
	ns32knetbsd.c \
	oasys.c \
	pc532-mach.c \
	pdp11.c \
	pe-arm-wince.c \
	pe-arm.c \
	pe-i386.c \
	pe-mcore.c \
	pe-mips.c \
	pe-ppc.c \
	pe-sh.c \
	pef.c \
	pei-arm-wince.c \
	pei-arm.c \
	pei-i386.c \
	pei-mcore.c \
	pei-mips.c \
	pei-ppc.c \
	pei-sh.c \
	plugin.c \
	ppcboot.c \
	reloc16.c \
	riscix.c \
	som.c \
	sparclinux.c \
	sparclynx.c \
	sparcnetbsd.c \
	sunos.c \
	vax1knetbsd.c \
	vaxbsd.c \
	vaxnetbsd.c \
	versados.c \
	vms-lib.c \
	vms-misc.c \
	xcofflink.c \
	xsym.c \
	xtensa-isa.c \
	xtensa-modules.c

# The .o files needed by all of the 64 bit vectors that are configured into
# target_vector in targets.c if configured with --enable-targets=all
# and --enable-64-bit-bfd.
# elf32-ia64.c requires a 64-bit bfd_vma, and hence can not be put in
# BFD32_BACKENDS.
BFD64_BACKENDS = \
	elf32-aarch64.lo \
	elf64-aarch64.lo \
	elfxx-aarch64.lo \
	aix5ppc-core.lo \
	aout64.lo \
	coff-alpha.lo \
	coff-x86_64.lo \
	coff64-rs6000.lo \
	demo64.lo \
	elf32-ia64.lo \
	elf32-mips.lo \
	elf32-score.lo \
	elf32-score7.lo \
	elf64-alpha.lo \
	elf64-gen.lo \
	elf64-hppa.lo \
	elf64-ia64.lo \
	elf64-ia64-vms.lo \
	elf64-mips.lo \
	elf64-mmix.lo \
	elf64-ppc.lo \
	elf64-s390.lo \
	elf64-sh64.lo \
	elf64-sparc.lo \
	elf64-tilegx.lo \
	elf64-x86-64.lo \
	elf64.lo \
	elfn32-mips.lo \
	elfxx-ia64.lo \
	elfxx-mips.lo \
	mach-o-x86-64.lo \
	mmo.lo \
	nlm32-alpha.lo \
	nlm64.lo \
	pe-x86_64.lo \
	pei-ia64.lo \
	pei-x86_64.lo \
	pepigen.lo \
	pex64igen.lo \
	vms-alpha.lo

BFD64_BACKENDS_CFILES = \
	aix5ppc-core.c \
	aout64.c \
	coff-alpha.c \
	coff-x86_64.c \
	coff64-rs6000.c \
	demo64.c \
	elf32-mips.c \
	elf32-score.c \
	elf32-score7.c \
	elf64-alpha.c \
	elf64-gen.c \
	elf64-hppa.c \
	elf64-ia64-vms.c \
	elf64-mips.c \
	elf64-mmix.c \
	elf64-ppc.c \
	elf64-s390.c \
	elf64-sh64.c \
	elf64-sparc.c \
	elf64-tilegx.c \
	elf64-x86-64.c \
	elf64.c \
	elfn32-mips.c \
	elfxx-aarch64.c \
	elfxx-ia64.c \
	elfxx-mips.c \
	mach-o-x86-64.c \
	mmo.c \
	nlm32-alpha.c \
	nlm64.c \
	pe-x86_64.c \
	pei-ia64.c \
	pei-x86_64.c \
	vms-alpha.c

OPTIONAL_BACKENDS = \
	aix386-core.lo \
	cisco-core.lo \
	hpux-core.lo \
	irix-core.lo \
	lynx-core.lo \
	osf-core.lo \
	rs6000-core.lo \
	sco5-core.lo \
	trad-core.lo

OPTIONAL_BACKENDS_CFILES = \
	aix386-core.c \
	cisco-core.c \
	hpux-core.c \
	irix-core.c \
	lynx-core.c \
	osf-core.c \
	rs6000-core.c \
	sco5-core.c \
	trad-core.c

# We want to rerun configure if configure.in, config.bfd or
# configure.host change. configure.in is needed since the version
# number in Makefile comes from configure.in.
CONFIG_STATUS_DEPENDENCIES = \
	$(srcdir)/configure.in \
	$(srcdir)/config.bfd \
	$(srcdir)/configure.host

# These are defined by configure.in:
WORDSIZE = @@wordsize@@
ALL_BACKENDS = @@all_backends@@
BFD_BACKENDS = @@bfd_backends@@
BFD_MACHINES = @@bfd_machines@@
TDEFAULTS = @@tdefaults@@
HAVEVECS = @@havevecs@@

INCLUDES = @@HDEFINES@@ @@COREFLAG@@ @@TDEFINES@@ $(CSEARCH) $(CSWITCHES) \
	$(HAVEVECS) @@INCINTL@@

# C source files that correspond to .o's.
SOURCE_CFILES = \
	$(BFD32_LIBS_CFILES) \
	$(BFD64_LIBS_CFILES) \
	$(ALL_MACHINES_CFILES) \
	$(BFD32_BACKENDS_CFILES) \
	$(BFD64_BACKENDS_CFILES) \
	$(OPTIONAL_BACKENDS_CFILES)

BUILD_CFILES = \
	elf32-aarch64.c elf64-aarch64.c \
	elf32-ia64.c elf64-ia64.c peigen.c pepigen.c pex64igen.c

CFILES = $(SOURCE_CFILES) $(BUILD_CFILES)

## This is a list of all .h files which are in the source tree.
SOURCE_HFILES = \
	aout-target.h aoutf1.h aoutx.h coffcode.h coffswap.h ecoffswap.h \
	elf-bfd.h elf-hppa.h elf-linux-psinfo.h elf32-hppa.h \
	elf64-hppa.h elfcode.h elfcore.h \
	freebsd.h genlink.h go32stub.h \
	libaout.h libbfd.h libcoff.h libecoff.h libhppa.h libieee.h \
	libnlm.h liboasys.h libpei.h libxcoff.h mach-o.h \
	netbsd.h nlm-target.h nlmcode.h nlmswap.h ns32k.h \
	pef.h pef-traceback.h peicode.h som.h version.h \
	vms.h xsym.h

## ... and all .h files which are in the build tree.
BUILD_HFILES = \
	bfdver.h elf32-target.h elf64-target.h targmatch.h bfd_stdint.h

# Ensure they are built early:
BUILT_SOURCES = $(BUILD_HFILES)

HFILES = $(SOURCE_HFILES) $(BUILD_HFILES)

SRC_POTFILES = $(SOURCE_CFILES) $(SOURCE_HFILES)
BLD_POTFILES = $(BUILD_CFILES) $(BUILD_HFILES)

po/SRC-POTFILES.in: @@MAINT@@ Makefile $(SRC_POTFILES)
	for file in $(SRC_POTFILES); do echo $$file; done \
	  | LC_ALL=C sort > tmp.src \
	  && mv tmp.src $(srcdir)/po/SRC-POTFILES.in

po/BLD-POTFILES.in: @@MAINT@@ Makefile $(BLD_POTFILES)
	for file in $(BLD_POTFILES); do echo $$file; done \
	  | LC_ALL=C sort > tmp.bld \
	  && mv tmp.bld $(srcdir)/po/BLD-POTFILES.in

all diststuff: info

# Various kinds of .o files to put in libbfd.a:
# BFD_BACKENDS	Routines the configured targets need.
# BFD_MACHINES	Architecture-specific routines the configured targets need.
# COREFILE	Core file routines for a native configuration
# bfd64_libs	Routines for 64bit support
OFILES = $(BFD_BACKENDS) $(BFD_MACHINES) @@COREFILE@@ @@bfd64_libs@@

stamp-ofiles: Makefile
	rm -f tofiles
	f=""; \
	for i in $(OFILES) ; do \
	  case " $$f " in \
	    *" $$i "*) ;; \
	    *) f="$$f $$i" ;; \
	  esac ; \
	done ; \
	echo $$f > tofiles
	$(SHELL) $(srcdir)/../move-if-change tofiles ofiles
	touch stamp-ofiles

ofiles: stamp-ofiles ; @@true

# Since BFD64_LIBS is optional and we can't have substitution in
# libbfd_la_SOURCES, we put BFD64_LIBS in OFILES instead.
# However, list all sources in EXTRA_libbfd_la_SOURCES so the
# dependency tracking fragments are picked up in the Makefile.
libbfd_la_SOURCES = $(BFD32_LIBS_CFILES)
EXTRA_libbfd_la_SOURCES = $(CFILES)
libbfd_la_DEPENDENCIES = $(OFILES) ofiles
libbfd_la_LIBADD = `cat ofiles` @@SHARED_LIBADD@@ $(LIBDL)
libbfd_la_LDFLAGS += -release `cat libtool-soversion` @@SHARED_LDFLAGS@@

# libtool will build .libs/libbfd.a.  We create libbfd.a in the build
# directory so that we don't have to convert all the programs that use
# libbfd.a simultaneously.  This is a hack which should be removed if
# everything else starts using libtool.  FIXME.

noinst_LIBRARIES = libbfd.a
libbfd_a_SOURCES =

stamp-lib: libbfd.la
	libtooldir=`$(LIBTOOL) --config | sed -n -e 's/^objdir=//p'`; \
	if [ -f $$libtooldir/libbfd.a ]; then \
	  cp $$libtooldir/libbfd.a libbfd.tmp; \
	  $(RANLIB) libbfd.tmp; \
	  $(SHELL) $(srcdir)/../move-if-change libbfd.tmp libbfd.a; \
	else true; fi
	touch stamp-lib

libbfd.a: stamp-lib ; @@true

# This file holds an array associating configuration triplets and
# vector names.  It is built from config.bfd.  It is not compiled by
# itself, but is included by targets.c.
targmatch.h: config.bfd targmatch.sed
	rm -f targmatch.h
	sed -f $(srcdir)/targmatch.sed < $(srcdir)/config.bfd > targmatch.new
	mv -f targmatch.new targmatch.h

# When compiling archures.c and targets.c, supply the default target
# info from configure.

targets.lo: targets.c Makefile
if am__fastdepCC
	$(LTCOMPILE) -MT $@@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@@ $(TDEFAULTS) $(srcdir)/targets.c
	mv -f $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Plo
else
if AMDEP
	source='targets.c' object='$@@' libtool=yes @@AMDEPBACKSLASH@@
	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @@AMDEPBACKSLASH@@
endif
	$(LTCOMPILE) -c -o $@@ $(TDEFAULTS) $(srcdir)/targets.c
endif

archures.lo: archures.c Makefile
if am__fastdepCC
	$(LTCOMPILE) -MT $@@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@@ $(TDEFAULTS) $(srcdir)/archures.c
	mv -f $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Plo
else
if AMDEP
	source='archures.c' object='$@@' libtool=yes @@AMDEPBACKSLASH@@
	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @@AMDEPBACKSLASH@@
endif
	$(LTCOMPILE) -c -o $@@ $(TDEFAULTS) $(srcdir)/archures.c
endif

dwarf2.lo: dwarf2.c Makefile
if am__fastdepCC
	$(LTCOMPILE) -MT $@@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@@ -DDEBUGDIR=\"$(DEBUGDIR)\" $(srcdir)/dwarf2.c
	mv -f $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Plo
else
if AMDEP
	source='dwarf2.c' object='$@@' libtool=yes @@AMDEPBACKSLASH@@
	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @@AMDEPBACKSLASH@@
endif
	$(LTCOMPILE) -c -o $@@ -DDEBUGDIR=\"$(DEBUGDIR)\" $(srcdir)/dwarf2.c
endif

elf32-target.h : elfxx-target.h
	rm -f elf32-target.h
	sed -e s/NN/32/g < $(srcdir)/elfxx-target.h > elf32-target.new
	mv -f elf32-target.new elf32-target.h

elf64-target.h : elfxx-target.h
	rm -f elf64-target.h
	sed -e s/NN/64/g < $(srcdir)/elfxx-target.h > elf64-target.new
	mv -f elf64-target.new elf64-target.h

elf32-aarch64.c : elfnn-aarch64.c
	rm -f elf32-aarch64.c
	echo "#line 1 \"$(srcdir)/elfnn-aarch64.c\"" > elf32-aarch64.new
	sed -e s/NN/32/g < $(srcdir)/elfnn-aarch64.c >> elf32-aarch64.new
	mv -f elf32-aarch64.new elf32-aarch64.c

elf64-aarch64.c : elfnn-aarch64.c
	rm -f elf64-aarch64.c
	echo "#line 1 \"$(srcdir)/elfnn-aarch64.c\"" > elf64-aarch64.new
	sed -e s/NN/64/g < $(srcdir)/elfnn-aarch64.c >> elf64-aarch64.new
	mv -f elf64-aarch64.new elf64-aarch64.c

elf32-ia64.c : elfnn-ia64.c
	rm -f elf32-ia64.c
	sed -e s/NN/32/g < $(srcdir)/elfnn-ia64.c > elf32-ia64.new
	mv -f elf32-ia64.new elf32-ia64.c

elf64-ia64.c : elfnn-ia64.c
	rm -f elf64-ia64.c
	sed -e s/NN/64/g < $(srcdir)/elfnn-ia64.c > elf64-ia64.new
	mv -f elf64-ia64.new elf64-ia64.c

peigen.c : peXXigen.c
	rm -f peigen.c
	sed -e s/XX/pe/g < $(srcdir)/peXXigen.c > peigen.new
	mv -f peigen.new peigen.c

pepigen.c : peXXigen.c
	rm -f pepigen.c
	sed -e s/XX/pep/g < $(srcdir)/peXXigen.c > pepigen.new
	mv -f pepigen.new pepigen.c

pex64igen.c: peXXigen.c
	rm -f pex64igen.c
	sed -e s/XX/pex64/g < $(srcdir)/peXXigen.c > pex64igen.new
	mv -f pex64igen.new pex64igen.c

BFD_H_DEPS= $(INCDIR)/ansidecl.h $(INCDIR)/symcat.h
LOCAL_H_DEPS= libbfd.h sysdep.h config.h
$(BFD32_LIBS) \
 $(BFD64_LIBS) \
 $(ALL_MACHINES) \
 $(BFD32_BACKENDS) \
 $(BFD64_BACKENDS) \
 $(OPTIONAL_BACKENDS): $(BFD_H) $(BFD_H_DEPS) $(LOCAL_H_DEPS)

host-aout.lo: Makefile

# The following program can be used to generate a simple config file
# which can be folded into an h-XXX file for a new host, with some editing.
aout-params.h: gen-aout
	./gen-aout host > aout-params.h
gen-aout: $(srcdir)/gen-aout.c Makefile
	$(CC) -o gen-aout $(CFLAGS) $(LFLAGS) $(srcdir)/gen-aout.c

$(BFD_H): stmp-bfd-h ; @@true

stmp-bfd-h: bfd-in3.h
	rm -f bfd-tmp.h
	cp bfd-in3.h bfd-tmp.h
	$(SHELL) $(srcdir)/../move-if-change bfd-tmp.h $(BFD_H)
	rm -f bfd-tmp.h
	touch stmp-bfd-h

BFD_H_FILES = bfd-in.h init.c opncls.c libbfd.c section.c archures.c \
	reloc.c syms.c bfd.c bfdio.c bfdwin.c \
	archive.c corefile.c targets.c format.c compress.c
BFD64_H_FILES = archive64.c
LIBBFD_H_FILES = libbfd-in.h init.c libbfd.c bfdio.c bfdwin.c \
	cache.c reloc.c archures.c elf.c
LIBCOFF_H_FILES = libcoff-in.h coffcode.h

# Could really use a "copy-if-change"...
headers:
	(cd $(bfddocdir); $(MAKE) protos $(FLAGS_TO_PASS))
	cp $(bfddocdir)/bfd.h bfd-in2.h-new
	$(SHELL) $(srcdir)/../move-if-change bfd-in2.h-new $(srcdir)/bfd-in2.h
	cp $(bfddocdir)/libbfd.h libbfd.h-new
	$(SHELL) $(srcdir)/../move-if-change libbfd.h-new $(srcdir)/libbfd.h
	cp $(bfddocdir)/libcoff.h libcoff.h-new
	$(SHELL) $(srcdir)/../move-if-change libcoff.h-new $(srcdir)/libcoff.h

# We only rebuild the header files automatically if we have been
# configured with --enable-maintainer-mode.

$(srcdir)/bfd-in2.h: @@MAINT@@ stmp-bin2-h ; @@true
stmp-bin2-h: $(BFD_H_FILES) $(BFD64_H_FILES)
	(cd $(bfddocdir); $(MAKE) $(FLAGS_TO_PASS) bfd.h)
	cp $(bfddocdir)/bfd.h bfd-in2.h-new
	$(SHELL) $(srcdir)/../move-if-change bfd-in2.h-new $(srcdir)/bfd-in2.h
	touch stmp-bin2-h

$(srcdir)/libbfd.h: @@MAINT@@ stmp-lbfd-h ; @@true
stmp-lbfd-h: $(LIBBFD_H_FILES)
	(cd $(bfddocdir); $(MAKE) $(FLAGS_TO_PASS) libbfd.h)
	cp $(bfddocdir)/libbfd.h libbfd.h-new
	$(SHELL) $(srcdir)/../move-if-change libbfd.h-new $(srcdir)/libbfd.h
	touch stmp-lbfd-h

$(srcdir)/libcoff.h: @@MAINT@@ stmp-lcoff-h ; @@true
stmp-lcoff-h: $(LIBCOFF_H_FILES)
	(cd $(bfddocdir); $(MAKE) $(FLAGS_TO_PASS) libcoff.h)
	cp $(bfddocdir)/libcoff.h libcoff.h-new
	$(SHELL) $(srcdir)/../move-if-change libcoff.h-new $(srcdir)/libcoff.h
	touch stmp-lcoff-h

MOSTLYCLEANFILES = ofiles stamp-ofiles

CLEANFILES = bfd.h dep.sed stmp-bfd-h DEP DEPA DEP1 DEP2 libbfd.a stamp-lib \
	stmp-bin2-h stmp-lbfd-h stmp-lcoff-h

DISTCLEANFILES = $(BUILD_CFILES) $(BUILD_HFILES) libtool-soversion

bfdver.h: $(srcdir)/version.h $(srcdir)/Makefile.in
	@@echo "creating $@@"
	@@bfd_version=`echo "$(VERSION)" | sed -e 's/\([^\.]*\)\.*\([^\.]*\)\.*\([^\.]*\)\.*\([^\.]*\)\.*\([^\.]*\).*/\1.00\2.00\3.00\4.00\5/' -e 's/\([^\.]*\)\..*\(..\)\..*\(..\)\..*\(..\)\..*\(..\)$$/\1\2\3\4\5/'` ;\
	bfd_version_string="\"$(VERSION)\"" ;\
	bfd_soversion="$(VERSION)" ;\
	bfd_version_package="\"$(PKGVERSION)\"" ;\
	report_bugs_to="\"$(REPORT_BUGS_TO)\"" ;\
	if test "x$(RELEASE)" = x ; then \
	  bfd_version_date=`sed -n -e 's/.*DATE //p' < $(srcdir)/version.h` ;\
	  bfd_version_string="\"$(VERSION).$${bfd_version_date}\"" ;\
	  bfd_soversion="$(VERSION).$${bfd_version_date}" ;\
	fi ;\
	sed -e "s,@@bfd_version@@,$$bfd_version," \
	    -e "s,@@bfd_version_string@@,$$bfd_version_string," \
	    -e "s,@@bfd_version_package@@,$$bfd_version_package," \
	    -e "s,@@report_bugs_to@@,$$report_bugs_to," \
	    < $(srcdir)/version.h > $@@; \
	echo "$${bfd_soversion}" > libtool-soversion

# Disable -Werror, if it has been enabled, since coffswap.h won't
# compile with gcc 4.5 and above.
coff-tic4x.lo: coff-tic4x.c
@@am__fastdepCC_TRUE@@	$(LTCOMPILE) -MT $@@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@@ $< $(NO_WERROR)
@@am__fastdepCC_TRUE@@	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Plo
@@AMDEP_TRUE@@@@am__fastdepCC_FALSE@@	source='$<' object='$@@' libtool=yes @@AMDEPBACKSLASH@@
@@AMDEP_TRUE@@@@am__fastdepCC_FALSE@@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @@AMDEPBACKSLASH@@
@@am__fastdepCC_FALSE@@	$(LTCOMPILE) -c -o $@@ $< $(NO_WERROR)

coff-tic54x.lo: coff-tic54x.c
@@am__fastdepCC_TRUE@@	$(LTCOMPILE) -MT $@@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@@ $< $(NO_WERROR)
@@am__fastdepCC_TRUE@@	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Plo
@@AMDEP_TRUE@@@@am__fastdepCC_FALSE@@	source='$<' object='$@@' libtool=yes @@AMDEPBACKSLASH@@
@@AMDEP_TRUE@@@@am__fastdepCC_FALSE@@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @@AMDEPBACKSLASH@@
@@am__fastdepCC_FALSE@@	$(LTCOMPILE) -c -o $@@ $< $(NO_WERROR)
@


1.276
log
@[AArch64, ILP32] 4/6 Split elfnn-aarch64.c to elfxx-aarch64.c

bfd/

	* Makefile.am (BFD64_BACKENDS): Add elfxx-aarch64.c.
	(BFD64_BACKENDS_CFILES): Add elfxx-aarch64.lo.
	* Makefile.in: Re-generated.
	* configure.in (bfd_elf64_bigaarch64_vec): Add elfxx-aarch64.lo.
	(bfd_elf64_littleaarch64_vec): Likewise.
	(bfd_elf32_bigaarch64_vec): Likewise.
	(bfd_elf32_littleaarch64_vec): Likewise.
	* configure: Re-generated.
	* elfxx-aarch64.c: New file; split from elf64-aarch64.c.
	* elfxx-aarch64.h: New file.
	* elfnn-aarch64.c: Include "elfxx-aarch64.h"; move the following
	stuff to elfxx-aarch64.c.
	(bfd_elf_aarch64_put_addend): Removed.
	(PG_OFFSET, PG): Likewise.
	(elfNN_aarch64_small_plt0_entry): Support ELF32.
	(elfNN_aarch64_tlsdesc_small_plt_entry): Likewise.
	(elf64_aarch64_grok_prstatus): Removed.
	(elf_backend_grok_prstatus): Removed.
	(insn32): Likewise.
	(aarch64_unsigned_overflow): Likewise.
	(aarch64_signed_overflow): Likewise.
	(aarch64_resolve_relocation): Likewise.
	(MASK): Likewise.
	(decode_branch_ofs_26): Likewise.
	(decode_cond_branch_ofs_19): Likewise.
	(decode_ld_lit_ofs_19): Likewise.
	(decode_tst_branch_ofs_14): Likewise.
	(decode_movw_imm): Likewise.
	(decode_adr_imm): Likewise.
	(decode_add_imm): Likewise.
	(reencode_branch_ofs_26): Likewise.
	(reencode_cond_branch_ofs_19): Likewise.
	(reencode_ld_lit_ofs_19): Likewise.
	(reencode_tst_branch_ofs_14): Likewise.
	(reencode_movw_imm): Likewise.
	(reencode_adr_imm): Likewise.
	(reencode_ldst_pos_imm): Likewise.
	(reencode_add_imm): Likewise.
	(reencode_movzn_to_movz): Likewise.
	(reencode_movzn_to_movn): Likewise.
	(aarch64_relocate): Update to call the new function names in
	elfxx-aarch64.c.
	(aarch64_calculate_got_entry_vma): Likewise.
	(elfNN_aarch64_final_link_relocate): Likewise.
	(elf64_aarch64_update_plt_entry): Likewise; change the type of the
	parameter 'r_type' to bfd_reloc_code_real_type; rename to ...
	(elf_aarch64_update_plt_entry): ... this.
	(elfNN_aarch64_create_small_pltn_entry): Update.
	(elfNN_aarch64_init_small_plt0_entry): Remove plt_got_base; add
	bfd_vma plt_got_2nd_ent; update to call elf_aarch64_update_plt_entry.
	(elfNN_aarch64_finish_dynamic_sections): Add plt_entry; update to
	call elf_aarch64_update_plt_entry.
@
text
@d920 2
a921 1
	sed -e s/NN/32/g < $(srcdir)/elfnn-aarch64.c > elf32-aarch64.new
d926 2
a927 1
	sed -e s/NN/64/g < $(srcdir)/elfnn-aarch64.c > elf64-aarch64.new
@


1.275
log
@[AArch64, ILP32] 2/6 Parametrize elfnn-aarch64.c and add basic support in ld
and gas.

bfd/

	* Makefile.am (BFD64_BACKENDS): Add elf32-aarch64.lo.
	(BUILD_CFILES): Add elf32-aarch64.c.
	(elf32-aarch64.c): New rule for generating from elfnn-aarch64.c.
	* Makefile.in: Re-generated.
	* archures.c (bfd_mach_aarch64_ilp32): New define.
	* bfd-in.h (bfd_elf32_aarch64_init_maps): New declaration.
	(bfd_elf32_aarch64_set_options): Ditto.
	(elf32_aarch64_setup_section_lists): Ditto.
	(elf32_aarch64_next_input_section): Ditto.
	(elf32_aarch64_size_stubs): Ditto.
	(elf32_aarch64_build_stubs): Ditto.
	* bfd-in2.h: Re-generated.
	* config.bfd (aarch64-*-elf): Add bfd_elf32_littleaarch64_vec
	and bfd_elf32_bigaarch64_vec.
	(aarch64-*-linux*): Likewise.
	(aarch64_be-*-elf): Likewise.
	(aarch64_be-*-linux*): Likewise.
	* configure.in (bfd_elf32_bigaarch64_vec)
	(bfd_elf32_littleaarch64_vec): New.
	* configure: Re-generated.
	* cpu-aarch64.c (compatible): Don't allow mixing ilp32 objects with
	lp64 ones.
	(bfd_aarch64_arch_ilp32): New.
	(bfd_aarch64_arch): Link to bfd_aarch64_arch_ilp32.
	* elfnn-aarch64.c (ARCH_SIZE): New define.
	(AARCH64_R, AARCH64_R_STR, LOG_FILE_ALIGN): New defines.
	(GOT_ENTRY_SIZE): Re-define as (ARCH_SIZE / 8).
	(elf64_aarch64_*): Rename to elfNN_aarch64_*.
	(ELF64_R_*): Rename to ELFNN_R_*.
	Plus other paramaterization.
	* targets.c (bfd_elf32_bigaarch64_vec, bfd_elf32_littleaarch64_vec):
	New declarations.
	(_bfd_target_vector): Add bfd_elf32_bigaarch64_vec and
	bfd_elf32_littleaarch64_vec.

gas/

	* config/tc-aarch64.c (ilp32_p): New static variable.
	(elf64_aarch64_target_format): Return the target according to the
	value of 'ilp32_p'.
	(md_begin): Determine 'mach' according to the value of 'ilp32_p'.
	(aarch64_opts): Add support for options '-milp32' and '-mlp64'.
	(aarch64_dwarf2_addr_size): New function.
	* config/tc-aarch64.h (aarch64_dwarf2_addr_size): New declaration.
	(DWARF2_ADDR_SIZE): New define.

ld/

	* Makefile.am (ALL_64_EMULATION_SOURCES): Add eaarch64elf32.c.
	(eaarch64elf32.c): New dependency and rule.
	* Makefile.in: Re-generated.
	* configure.tgt (aarch64-*-elf): Add aarch64elf32.
	(aarch64_be-*-elf, aarch64_be-*-linux*, aarch64-*-linux*): Likewise.
	* emulparams/aarch64elf32.sh: New file.
@
text
@d643 1
d706 1
@


1.274
log
@[AArch64, ILP32] 1/6 Rename elf64-aarch64.c to elfnn-aarch64.c

bfd/

	* Makefile.am (BFD64_BACKENDS_CFILES): Remove elf64-aarch64.c.
	(BUILD_CFILES): Add elf64-aarch64.c.
	(elf64-aarch64.c): New rule for generating from elfnn-aarch64.c.
	* Makefile.in: Re-generated.
	* elf64-aarch64.c: Rename to ...
	* elfnn-aarch64.c: ... this.
@
text
@d641 1
d767 1
a767 1
	elf64-aarch64.c \
d916 5
@


1.273
log
@bfd/
	* Makefile.am (BFD32_BACKENDS, BFD32_BACKENDS_CFILES): Move MIPS ELF
	files to...
	(BFD64_BACKENDS, BFD64_BACKENDS_CFILES): ...here.
	* Makefile.in: Regenerate.
	* config.bfd: Enclose all MIPS ELF targets in #ifdef BFD64.
	Set want64 to true for them at the end.
	* targets.c (_bfd_target_vector): Protect MIPS ELF targets with
	#ifdef BFD64.

gas/
	* config/tc-mips.c: Assert that offsetT and valueT are at least
	8 bytes in size.
	(GPR_SMIN, GPR_SMAX): New macros.
	(macro, mips_ip): Remove code for 4-byte valueT and offsetT.

ld/
	* Makefile.am (ALL_EMULATION_SOURCES): Move MIPS ELF emulations to...
	(ALL_64_EMULATION_SOURCES): ...here.
	* Makefile.in: Regenerate.
@
text
@a680 1
	elf64-aarch64.c \
d766 1
d915 5
@


1.272
log
@2013-02-06  Sandra Loosemore  <sandra@@codesourcery.com>
            Andrew Jenner <andrew@@codesourcery.com>

	Based on patches from Altera Corporation.

	bfd/
	* Makefile.am (ALL_MACHINES): Add cpu-nios2.lo.
	(ALL_MACHINES_CFILES): Add cpu-nios2.c.
	(BFD_BACKENDS): Add elf32-nios2.lo.
	(BFD32_BACKENDS_CFILES): Add elf32-nios2.c.
	* Makefile.in: Regenerated.
	* configure.in: Add entries for bfd_elf32_bignios2_vec and
	bfd_elf32_littlenios2_vec.
	* configure: Regenerated.
	* config.bfd: Add cases for nios2.
	* archures.c (enum bfd_architecture): Add bfd_arch_nios2.
	(bfd_mach_nios2): Define.
	(bfd_nios2_arch): Declare.
	(bfd_archures_list): Add bfd_nios2_arch.
	* targets.c (bfd_elf32_bignios2_vec): Declare.
	(bfd_elf32_littlenios2_vec): Declare.
	(_bfd_target_vector): Add entries for bfd_elf32_bignios2_vec and
	bfd_elf32_littlenios2_vec.
	* elf-bfd.h (enum elf_target_id): Add NIOS2_ELF_DATA.
	* reloc.c (enum bfd_reloc_code_real): Add Nios II relocations.
	* bfd-in2.h: Regenerated.
	* libbfd.h: Regenerated.
	* cpu-nios2.c: New file.
	* elf32-nios2.c: New file.

	opcodes/
	* Makefile.am (TARGET_LIBOPCODES_CFILES): Add nios2-dis.c and
	nios2-opc.c.
	* Makefile.in: Regenerated.
	* configure.in: Add case for bfd_nios2_arch.
	* configure: Regenerated.
	* disassemble.c (ARCH_nios2): Define.
	(disassembler): Add case for bfd_arch_nios2.
	* nios2-dis.c: New file.
	* nios2-opc.c: New file.

	include/
	* dis-asm.h (print_insn_big_nios2): Declare.
	(print_insn_little_nios2): Declare.

	include/elf
	* nios2.h: New file.

	include/opcode/
	* nios2.h: New file.

	gas/
	* Makefile.am (TARGET_CPU_CFILES): Add config/tc-nios2.c.
	(TARGET_CPU_HFILES): Add config/tc-nios2.h.
	* Makefile.in: Regenerated.
	* configure.tgt: Add case for nios2*-linux*.
	* config/obj-elf.c: Conditionally include elf/nios2.h.
	* config/tc-nios2.c: New file.
	* config/tc-nios2.h: New file.
	* doc/Makefile.am (CPU_DOCS): Add c-nios2.texi.
	* doc/Makefile.in: Regenerated.
	* doc/all.texi: Set NIOSII.
	* doc/as.texinfo (Overview): Add Nios II options.
	(Machine Dependencies): Include c-nios2.texi.
	* doc/c-nios2.texi: New file.
	* NEWS: Note Altera Nios II support.

	gas/testsuite/
	* gas/nios2/add.d: New.
	* gas/nios2/add.s: New.
	* gas/nios2/align_fill.d: New.
	* gas/nios2/align_fill.s: New.
	* gas/nios2/align_text.d: New.
	* gas/nios2/align_text.s: New.
	* gas/nios2/and.d: New.
	* gas/nios2/and.s: New.
	* gas/nios2/branch.d: New.
	* gas/nios2/branch.s: New.
	* gas/nios2/break.d: New.
	* gas/nios2/break.s: New.
	* gas/nios2/bret.d: New.
	* gas/nios2/bret.s: New.
	* gas/nios2/cache.d: New.
	* gas/nios2/cache.s: New.
	* gas/nios2/call26.d: New.
	* gas/nios2/call26.s: New.
	* gas/nios2/call.d: New.
	* gas/nios2/call.s: New.
	* gas/nios2/cmp.d: New.
	* gas/nios2/cmp.s: New.
	* gas/nios2/comments.d: New.
	* gas/nios2/comments.s: New.
	* gas/nios2/complex.d: New.
	* gas/nios2/complex.s: New.
	* gas/nios2/ctl.d: New.
	* gas/nios2/ctl.s: New.
	* gas/nios2/custom.d: New.
	* gas/nios2/custom.s: New.
	* gas/nios2/etbt.d: New.
	* gas/nios2/etbt.s: New.
	* gas/nios2/flushda.d: New.
	* gas/nios2/flushda.s: New.
	* gas/nios2/illegal.l: New.
	* gas/nios2/illegal.s: New.
	* gas/nios2/jmp.d: New.
	* gas/nios2/jmp.s: New.
	* gas/nios2/ldb.d: New.
	* gas/nios2/ldb.s: New.
	* gas/nios2/ldh.d: New.
	* gas/nios2/ldh.s: New.
	* gas/nios2/ldw.d: New.
	* gas/nios2/ldw.s: New.
	* gas/nios2/lineseparator.d: New.
	* gas/nios2/lineseparator.s: New.
	* gas/nios2/mov.d: New.
	* gas/nios2/movia.d: New.
	* gas/nios2/movia.s: New.
	* gas/nios2/movi.d: New.
	* gas/nios2/movi.s: New.
	* gas/nios2/mov.s: New.
	* gas/nios2/mul.d: New.
	* gas/nios2/mul.s: New.
	* gas/nios2/nios2.exp: New.
	* gas/nios2/nor.d: New.
	* gas/nios2/nor.s: New.
	* gas/nios2/or.d: New.
	* gas/nios2/or.s: New.
	* gas/nios2/ret.d: New.
	* gas/nios2/ret.s: New.
	* gas/nios2/rol.d: New.
	* gas/nios2/rol.s: New.
	* gas/nios2/rotate.d: New.
	* gas/nios2/rotate.s: New.
	* gas/nios2/stb.d: New.
	* gas/nios2/stb.s: New.
	* gas/nios2/sth.d: New.
	* gas/nios2/sth.s: New.
	* gas/nios2/stw.d: New.
	* gas/nios2/stw.s: New.
	* gas/nios2/sub.d: New.
	* gas/nios2/sub.s: New.
	* gas/nios2/sync.d: New.
	* gas/nios2/sync.s: New.
	* gas/nios2/trap.d: New.
	* gas/nios2/trap.s: New.
	* gas/nios2/tret.d: New.
	* gas/nios2/tret.s: New.
	* gas/nios2/warn_noat.l: New.
	* gas/nios2/warn_noat.s: New.
	* gas/nios2/warn_nobreak.l: New.
	* gas/nios2/warn_nobreak.s: New.
	* gas/nios2/xor.d: New.
	* gas/nios2/xor.s: New.

	ld/
	* Makefile.am (enios2elf.c): New rule.
	* Makefile.in: Regenerated.
	* configure.tgt: Add case for nios2*-*-*.
	* emulparams/nios2elf.sh: New file.
	* NEWS: Note Altera Nios II support.

	ld/testsuite/
	* ld-nios2/emit-relocs-1a.s: New.
	* ld-nios2/emit-relocs-1b.s: New.
	* ld-nios2/emit-relocs-1.d: New.
	* ld-nios2/emit-relocs-1.ld: New.
	* ld-nios2/gprel.d: New.
	* ld-nios2/gprel.s: New.
	* ld-nios2/hilo16.d: New.
	* ld-nios2/hilo16.s: New.
	* ld-nios2/hilo16_symbol.s: New.
	* ld-nios2/imm5.d: New.
	* ld-nios2/imm5.s: New.
	* ld-nios2/imm5_symbol.s: New.
	* ld-nios2/nios2.exp: New.
	* ld-nios2/pcrel16.d: New.
	* ld-nios2/pcrel16_label.s: New.
	* ld-nios2/pcrel16.s: New.
	* ld-nios2/relax_callr.d: New.
	* ld-nios2/relax_callr.ld: New.
	* ld-nios2/relax_callr.s: New.
	* ld-nios2/relax_cjmp.d: New.
	* ld-nios2/relax_cjmp.s: New.
	* ld-nios2/relax_jmp.ld: New.
	* ld-nios2/relax_section.d: New.
	* ld-nios2/relax_section.s: New.
	* ld-nios2/relax_ujmp.d: New.
	* ld-nios2/relax_ujmp.s: New.
	* ld-nios2/reloc.d: New.
	* ld-nios2/reloc.s: New.
	* ld-nios2/reloc_symbol.s: New.
	* ld-nios2/s16.d: New.
	* ld-nios2/s16.s: New.
	* ld-nios2/s16_symbol.s: New.
	* ld-nios2/u16.d: New.
	* ld-nios2/u16.s: New.
	* ld-nios2/u16_symbol.s: New.
	* ld-elf/indirect.exp: Skip on targets that don't support
	-shared -fPIC.
	* ld-elfcomm/elfcomm.exp: Build with -G0 for nios2.
	* ld-plugin/lto.exp: Skip shared library tests on targets that
	don't support them.  Skip execution tests on non-native targets.

	binutils/
	* readelf.c: Include elf/nios2.h.
	(dump_relocations): Add case for EM_ALTERA_NIOS2.
	(get_nios2_dynamic_type): New.
	(get_dynamic_type): Add case for EM_ALTERA_NIOS2.
	(is_32bit_abs_reloc): Fix EM_ALTERA_NIOS2 case.
	(is_16bit_abs_reloc): Likewise.
	(is_none_reloc): Add EM_ALTERA_NIOS2 and EM_NIOS32 cases.
	* NEWS: Note Altera Nios II support.
	* MAINTAINERS: Add Nios II maintainers.
@
text
@a348 1
	elf32-mips.lo \
a376 1
	elfxx-mips.lo \
a536 1
	elf32-mips.c \
a564 1
	elfxx-mips.c \
d649 1
d668 1
d688 1
d706 1
@


1.271
log
@	* Makefile.am (SOURCE_HFILES): Add `elf-linux-psinfo.h'.
	* Makefile.in: Regenerate.
@
text
@d139 1
d224 1
d353 1
d543 1
@


1.270
log
@	* Makefile.am (BFD64_BACKENDS): Remove elf-nacl.lo.
	(BFD64_BACKENDS_CFILES): Remove elf-nacl.c.
	* Makefile.in: Regenerate.
	* po/SRC-POTFILES.in: Regenerate.
@
text
@d770 1
a770 1
	elf-bfd.h elf-hppa.h elf32-hppa.h \
@


1.269
log
@	* common.h: Fix case of "Meta".
	* metag.h: New file.

	* dis-asm.h (print_insn_metag): New declaration.

	* metag.h: New file.

	* Makefile.am: Add Meta.
	* Makefile.in: Regenerate.
	* configure: Regenerate.
	* configure.in: Add Meta.
	* disassemble.c: Add Meta support.
	* metag-dis.c: New file.

	* Makefile.am: Add Meta.
	* Makefile.in: Regenerate.
	* archures.c (bfd_mach_metag): New.
	* bfd-in2.h: Regenerate.
	* config.bfd: Add Meta.
	* configure: Regenerate.
	* configure.in: Add Meta.
	* cpu-metag.c: New file.
	* elf-bfd.h: Add Meta.
	* elf32-metag.c: New file.
	* elf32-metag.h: New file.
	* libbfd.h: Regenerate.
	* reloc.c: Add Meta relocations.
	* targets.c: Add Meta.

	* Makefile.am: Add Meta.
	* Makefile.in: Regenerate.
	* config/tc-metag.c: New file.
	* config/tc-metag.h: New file.
	* configure.tgt: Add Meta.
	* doc/Makefile.am: Add Meta.
	* doc/Makefile.in: Regenerate.
	* doc/all.texi: Add Meta.
	* doc/as.texiinfo: Document Meta options.
	* doc/c-metag.texi: New file.

	* gas/metag/labelarithmetic.d: New file.
	* gas/metag/labelarithmetic.s: New file.
	* gas/metag/metacore12.d: New file.
	* gas/metag/metacore12.s: New file.
	* gas/metag/metacore21-invalid.l: New file.
	* gas/metag/metacore21-invalid.s: New file.
	* gas/metag/metacore21.d: New file.
	* gas/metag/metacore21.s: New file.
	* gas/metag/metacore21ext.d: New file.
	* gas/metag/metacore21ext.s: New file.
	* gas/metag/metadsp21-invalid.l: New file.
	* gas/metag/metadsp21-invalid.s: New file.
	* gas/metag/metadsp21.d: New file.
	* gas/metag/metadsp21.s: New file.
	* gas/metag/metadsp21ext.d: New file.
	* gas/metag/metadsp21ext.s: New file.
	* gas/metag/metafpu21.d: New file.
	* gas/metag/metafpu21.s: New file.
	* gas/metag/metafpu21ext.d: New file.
	* gas/metag/metafpu21ext.s: New file.
	* gas/metag/metag.exp: New file.
	* gas/metag/tls.d: New file.
	* gas/metag/tls.s: New file.

	* Makefile.am: Add Meta.
	* Makefile.in: Regenerate.
	* configure.tgt: Add Meta.
	* emulparams/elf32metag.sh: New file.
	* emultempl/metagelf.em: New file.

	* ld-elf/merge.d: Mark Meta as xfail.
	* ld-gc/start.d: Skip this test on Meta.
	* ld-gc/personality.d: Skip this test on Meta.
	* ld-metag/external.s: New file.
	* ld-metag/metag.exp: New file.
	* ld-metag/pcrel.d: New file.
	* ld-metag/pcrel.s: New file.
	* ld-metag/shared.d: New file.
	* ld-metag/shared.r: New file.
	* ld-metag/shared.s: New file.
	* ld-metag/stub.d: New file.
	* ld-metag/stub.s: New file.
	* ld-metag/stub_pic_app.d: New file.
	* ld-metag/stub_pic_app.r: New file.
	* ld-metag/stub_pic_app.s: New file.
	* ld-metag/stub_pic_shared.d: New file.
	* ld-metag/stub_pic_shared.s: New file.
	* ld-metag/stub_shared.d: New file.
	* ld-metag/stub_shared.r: New file.
	* ld-metag/stub_shared.s: New file.

	* binutils/readelf.c: (guess_is_rela): Add EM_METAG.
	(dump_relocations): Add EM_METAG.
	(get_machine_name): Correct case for Meta.
	(is_32bit_abs_reloc): Add support for Meta ADDR32 reloc.
	(is_none_reloc): Add support for Meta NONE reloc.
@
text
@a647 1
	elf-nacl.lo \
a685 1
	elf-nacl.c \
@


1.268
log
@Add copyright notices
@
text
@d132 1
d215 1
d345 1
d534 1
@


1.267
log
@2012-11-09  Nick Clifton  <nickc@@redhat.com>

	* Makefile.am (ALL_MACHINES): Add cpu-v850-rh850.lo.
	(ALL_MACHINES_CFILES): Add cpu-v850-rh850.c.
	* archures.c (bfd_arch_info): Add bfd_v850_rh850_arch.
	* config.bfd: Likewise.
	* configure.in: Add bfd_elf32_v850_rh850_vec.
	* cpu-v850.c: Update printed description.
	* cpu-v850_rh850.c: New file.
	* elf32-v850.c (v850_elf_check_relocs): Add support for RH850 ABI
	relocs.
	(v850_elf_perform_relocation): Likewise.
	(v850_elf_final_link_relocate): Likewise.
	(v850_elf_relocate_section): Likewise.
	(v850_elf_relax_section): Likewise.
	(v800_elf_howto_table): New.
	(v850_elf_object_p): Add support for RH850 ABI values.
	(v850_elf_final_write_processing): Likewise.
	(v850_elf_merge_private_bfd_data): Likewise.
	(v850_elf_print_private_bfd_data): Likewise.
	(v800_elf_reloc_map): New.
	(v800_elf_reloc_type_lookup): New.
	(v800_elf_reloc_name_lookup): New.
	(v800_elf_info_to_howto): New.
	(bfd_elf32_v850_rh850_vec): New.
	(bfd_arch_v850_rh850): New.
	* targets.c (_bfd_targets): Add bfd_elf32_v850_rh850_vec.
	* Makefile.in: Regenerate.
	* bfd-in2.h: Regenerate.
	* configure: Regenerate.

	* readelf.c (get_machine_flags): Add support for E_FLAG_RX_ABI.
	(guess_is_rela): Add EM_V800.
	(dump_relocations): Likewise.
	(get_machine_name): Update EM_V800.
	(get_machine_flags): Add support for RH850 ABI flags.
	(is_32bit_abs_reloc): Add support for RH850 ABI reloc.

	* config/tc-v850.c (v850_target_arch): New.
	(v850_target_format): New.
	(set_machine): Use v850_target_arch.
	(md_begin): Likewise.
	(md_show_usage): Document new switches.
	(md_parse_option): Add -mgcc-abi, -mrh850-abi, -m8byte-align and
	-m4byte-align.
	* config/tc-v850.c (TARGET_ARCH) Use v850_target_arch.
	(TARGET_FORMAT): Use v850_target_format.
	* doc/c-v850.texi: Document new options.

	* v850.h: Add RH850 ABI values.

	* Makefile.am: (ALL_EMULATION_SOURCES): Add ev850_rh850.c.
	* Makefile.in: Regenerate.
	* configure.tgt (v850*-*-*): Make v850_rh850 the default
	emulation. Add vanilla v850 as an extra emulation.
	* emulparams/v850_rh850.sh: New file.
	* scripttempl/v850_rh850.sc: New file.

	* configure.in: Add bfd_v850_rh850_arch.
	* configure: Regenerate.
	* disassemble.c (disassembler): Likewise.
@
text
@d2 17
@


1.266
log
@Replace -ldl with @@lt_cv_dlopen_libs@@

	* Makefile.am (LIBDL): Replace -ldl with @@lt_cv_dlopen_libs@@.
	* configure.in (lt_cv_dlopen_libs): AC_SUBST.
	* Makefile.in: Regenerated.
	* configure: Likewise.
@
text
@d144 1
d226 1
@


1.265
log
@Add support for 64-bit ARM architecture: AArch64
@
text
@d38 1
a38 1
LIBDL = -ldl
@


1.264
log
@	* config/tc-m68hc11.c: Add S12X and XGATE co-processor support.
	Add option to offset S12 addresses into XGATE memory space.
	Tweak target flags to match other tools. (i.e. -m m68hc11).
	* doc/as.texinfo: Mention new options.
	* doc/c-m68hc11.texi: Document new options.
	* NEWS: Mention new support.

	* archures.c: Add bfd_arch_m9s12x and bfd_arch_m9s12xg.
	* config.bfd: Likewise.
	* cpu-m9s12x.c: New.
	* cpu-m9s12xg.c: New.
	* elf32-m68hc12.c: Add S12X and XGATE co-processor support.
	Add option to offset S12 addresses into XGATE memory space.
	Fix carry bug in IMM16 (IMM8 low/high) relocate.
	* Makefile.am (ALL_MACHINES): Add cpu-m9s12x and cpu-m9s12xg.
	(ALL_MACHINES_CFILES): Likewise.
	* reloc.c: Add S12X relocs.
	* Makefile.in: Regenerate.
	* bfd-in2.h: Regenerate.
	* libbfd.h: Regenerate.

	* gas/m68hc11/insns9s12x.s: New
	* gas/m68hc11/insns9s12x.d: New
	* gas/m68hc11/hexprefix.s: New
	* gas/m68hc11/hexprefix.d: New
	* gas/m68hc11/9s12x-exg-sex-tfr.s: New
	* gas/m68hc11/9s12x-exg-sex-tfr.d: New
	* gas/m68hc11/insns9s12xg.s: New
	* gas/m68hc11/insns9s12xg.d: New
	* gas/m68hc11/9s12x-mov.s: New
	* gas/m68hc11/9s12x-mov.d: New
	* gas/m68hc11/m68hc11.exp: Updated
	* gas/m68hc11/*.d: Brought in line with changed objdump output.
	* gas/all/gas.exp: XFAIL all hc11/12 targets for redef2,3.
	* gas/elf/elf.exp: XFAIL all hc11/12 targets for redef.
	* gas/elf/dwarf2-1.d: Skip for hc11/12 targets.
	* gas/elf/dwarf2-2.d: Likewise.

	* ld-m68hc11/xgate-link.s: New.
	* ld-m68hc11/xgate-link.d: New.
	* ld-m68hc11/xgate-offset.s: New.
	* ld-m68hc11/xgate-offset.d: New.
	* ld-m68hc11/xgate1.s: New.
	* ld-m68hc11/xgate1.d: New.
	* ld-m68hc11/xgate2.s: New.
	* ld-m68hc11/m68hc11.exp: Updated.
	* ld-m68hc11/*.d: Brought in line with changed objdump output.
	* ld-gc/gc.exp: Update CFLAGS for m68hc11.
	* ld-plugin/plugin.exp: Likewise.
	* ld-srec/srec.exp: XFAIL for m68hc11 and m68hc12.

	* configure.in: Add S12X and XGATE co-processor support to m68hc11
	target.
	* disassemble.c: Likewise.
	* configure: Regenerate.
	* m68hc11-dis.c: Make objdump output more consistent, use hex
	instead of decimal and use 0x prefix for hex.
	* m68hc11-opc.c: Add S12X and XGATE opcodes.
	* dis-asm.h (print_insn_m9s12x): Prototype.
	(print_insn_m9s12xg): Prototype.

	* m68hc11.h (R_M68HC12_16B, R_M68HC12_PCREL_9, R_M68HC12_PCREL_10)
	R_M68HC12_HI8XG, R_M68HC12_LO8XG): New relocations.
	(E_M68HC11_XGATE_RAMOFFSET): Define.

	* m68hc11.h: Add XGate definitions.
	(struct m68hc11_opcode): Add xg_mask field.
@
text
@d74 1
d155 1
d618 1
d657 1
@


1.264.4.1
log
@Add support for 64-bit ARM architecture: aarch64
@
text
@a73 1
	cpu-aarch64.lo \
a153 1
	cpu-aarch64.c \
a615 1
	elf64-aarch64.lo \
a653 1
	elf64-aarch64.c \
@


1.264.4.2
log
@bfd/
2012-11-13  Tristan Gingold  <gingold@@adacore.com>

	* configure.in: Bump version to 2.23.1
	* Makefile.am (RELEASE): Set.
	* configure, Makefile.in: Regenerate.
@
text
@d7 1
a7 1
RELEASE=y
@


1.264.4.3
log
@bfd/
2012-11-13  Tristan Gingold  <gingold@@adacore.com>

	* Makefile.am (RELEASE): Unset.
	* Makefile.in: Regenerate.
@
text
@d7 1
a7 1
# RELEASE=y
@


1.264.4.4
log
@bfd/
2013-03-25  Tristan Gingold  <gingold@@adacore.com>

	* configure.in: Bump version to 2.23.2
	* Makefile.am (RELEASE): Set.
	* configure, Makefile.in: Regenerate.
@
text
@d7 1
a7 1
RELEASE=y
@


1.264.4.5
log
@bfd/
2013-03-25  Tristan Gingold  <gingold@@adacore.com>

	* Makefile.am (RELEASE): Unset.
	* Makefile.in: Regenerate.
@
text
@d7 1
a7 1
# RELEASE=y
@


1.263
log
@Add support for Motorola XGATE embedded CPU
@
text
@d108 2
d188 2
@


1.262
log
@	* configure.ac (ia64*-*-*vms*): Add support for ld.
	* configure: Regenerate.

	* scripttempl/ia64vms.sc: New file.
	* emultempl/vms.em (_before_parse): Support for ia64.
	(elf64-ia64-vms): New fragment for ia64.
	* emulparams/elf64_ia64_vms.sh: New file.
	* configure.tgt (ia64-*-*vms*): Add.
	* Makefile.am (ALL_64_EMULATION_SOURCES): Add eelf64_ia64_vms.c
	(eelf64_ia64_vms.c): New rule.
	* Makefile.in: Regenerate.

	* elflink.c (elf_link_output_extsym): Add a guard.
	(bfd_elf_final_link): Remove assertion.
	(bfd_elf_final_link): Add a guard.
	* elfnn-ia64.c (INCLUDE_IA64_VMS): Removed.
	(elfNN_vms_section_from_shdr, elfNN_vms_object_p)
	(elfNN_vms_post_process_headers, elfNN_vms_section_processing)
	(elfNN_vms_final_write_processing, elfNN_vms_close_and_cleanup):
	Remove.
	(elfNN-ia64-vms target): Move to ...
	* elf64-ia64-vms.c: New file.
	* configure.in (bfd_elf64_ia64_vms_vec): Add elf64-ia64-vms.lo
	* Makefile.am (BFD64_BACKENDS): Add elf64-ia64-vms.lo.
	(BFD64_BACKENDS_CFILES): Ad elf64-ia64-vms.c.
	* configure: Regenerate.
	* Makefile.in: Regenerate.
@
text
@d145 1
d223 1
d342 1
d530 1
@


1.261
log
@bfd/
2012-04-03  Roland McGrath  <mcgrathr@@google.com>

	* elf-nacl.c: New file.
	* elf-nacl.h: New file.
	* elf32-i386.c (elf_backend_modify_segment_map): Define for
	bfd_elf32_i386_nacl_vec.
	(elf_backend_modify_program_headers): Likewise.
	* elf64-x86-64.c (elf_backend_modify_segment_map): Define for
	bfd_elf64_x86_64_nacl_vec and bfd_elf32_x86_64_nacl_vec.
	(elf_backend_modify_program_headers): Likewise.
	* Makefile.am (BFD32_BACKENDS, BFD64_BACKENDS): Add elf-nacl.lo here.
	(BFD32_BACKENDS_CFILES, BFD64_BACKENDS_CFILES): Add elf-nacl.c here.
	* Makefile.in: Regenerated.
	* configure.in (bfd_elf64_x86_64_nacl_vec): Add elf-nacl.o to tb here.
	(bfd_elf32_x86_64_nacl_vec): Likewise.
	(bfd_elf64_x86_64_vec, bfd_elf32_x86_64_vec): Likewise.
	(bfd_elf64_x86_64_freebsd_vec, bfd_elf64_x86_64_sol2_vec): Likewise.
	(bfd_elf64_l1om_vec, bfd_elf64_l1om_freebsd_vec): Likewise.
	(bfd_elf64_k1om_vec, bfd_elf64_k1om_freebsd_vec): Likewise.
	(bfd_elf32_i386_nacl_vec): Likewise.
	(bfd_elf32_i386_sol2_vec, bfd_elf32_i386_freebsd_vec): Likewise.
	(bfd_elf32_i386_vxworks_vec, bfd_elf32_i386_vec): Likewise.
	* configure: Regenerated.

binutils/testsuite/
2012-04-03  Roland McGrath  <mcgrathr@@google.com>

	* lib/binutils-common.exp (is_elf_format): Consider *-*-nacl* to
	be ELF too.

	* binutils-all/elfedit-4.d: Add "#as: --64" option.

	* binutils-all/i386/i386.exp: Accept nacl targets too.
	* binutils-all/x86-64/x86-64.exp: Likewise.

gas/testsuite/
2012-04-03  Roland McGrath  <mcgrathr@@google.com>

	* gas/i386/k1om.d: Add not-target match for *-*-nacl*.
	* gas/i386/l1om.d: Likewise.

ld/
2012-04-03  Roland McGrath  <mcgrathr@@google.com>

	* configure.tgt (i[3-7]86-*-nacl*, x86_64-*-nacl*): Handle them.
	* emulparams/elf_nacl.sh: New file.
	* emulparams/elf_i386_nacl.sh: New file.
	* emulparams/elf32_x86_64_nacl.sh: New file.
	* emulparams/elf_x86_64_nacl.sh: New file.
	* Makefile.am (ALL_EMULATION_SOURCES): Add eelf_i386_nacl.c here.
	(ALL_64_EMULATION_SOURCES): Add eelf32_x86_64_nacl.c and
	eelf_x86_64_nacl.c here.
	(eelf_i386_nacl.c, eelf32_x86_64_nacl.c, eelf_x86_64_nacl.c):
	New targets.
	* Makefile.in: Regenerated.

	* scripttempl/elf.sc: Handle SEPARATE_CODE cases.

ld/testsuite/
2012-04-03  Roland McGrath  <mcgrathr@@google.com>

	* ld-x86-64/ilp32-4-nacl.d: New file.
	* ld-x86-64/x86-64.exp: Run it.

	* ld-discard/discard.exp: Accept nacl targets too.
	* ld-elf/binutils.exp: Likewise.
	* ld-elf/comm-data.exp: Likewise.
	* ld-elf/elf.exp: Likewise.
	* ld-elf/tls_common.exp: Likewise.
	* ld-elfvers/vers.exp: Likewise.
	* ld-elfvsb/elfvsb.exp: Likewise.
	* ld-elfweak/elfweak.exp: Likewise.
	* ld-gc/gc.exp: Likewise.
	* ld-ifunc/binutils.exp: Likewise.
	* ld-ifunc/ifunc.exp: Likewise.
	* ld-linkonce/linkonce.exp:Likewise.
	* ld-pie/pie.exp: Likewise.
	* ld-shared/shared.exp: Likewise.
	* ld-undefined/weak-undef.exp: Likewise.
	* ld-unique/unique.exp: Likewise.
	* ld-x86-64/dwarfreloc.exp: Likewise.
	* ld-x86-64/line.exp: Likewise.

	* lib/ld-lib.exp (slurp_options): Support global array
	options_regsub to apply substitutions to the contents
	of options lines read from the file.
	* ld-i386/emit-relocs.d: Renamed to ...
	* ld-i386/emit-relocs.rd: ... this.
	* ld-i386/i386.exp: Accept nacl targets too.
	For them, use options_regsub to replace elf_i386 with
	elf_i386_nacl in run_dump_test cases; apply the same
	substitution in $i386tests; replace foo.rd expectations
	files with foo-nacl.rd in $i386tests.
	(i386tests): Change emit-relocs.d to emit-relocs.rd here.
	* ld-i386/emit-relocs-nacl.rd: New file.
	* ld-i386/plt-nacl.pd: New file.
	* ld-i386/plt-pic-nacl.pd: New file.
	* ld-i386/tlsbin-nacl.rd: New file.
	* ld-i386/tlsbindesc-nacl.rd: New file.
	* ld-i386/tlsdesc-nacl.rd: New file.
	* ld-i386/tlsgdesc-nacl.rd: New file.
	* ld-i386/tlsnopic-nacl.rd: New file.
	* ld-i386/tlspic-nacl.rd: New file.
	* ld-x86-64/x86-64.exp: Accept nacl targets too.
	For them, use options_regsub to replace elf_x86_64 with
	elf_x86_64_nacl in run_dump_test cases; apply the same
	substitution in $x86_64tests; replace foo.rd expectations
	files with foo-nacl.rd in $x86_64tests.
	Add explicit -melf_x86_64 to ld options in tests that need it,
	in case the default emulation is x32 (as it is for x86_64-nacl).
	* ld/testsuite/ld-x86-64/plt-nacl.pd: New file.
	* ld/testsuite/ld-x86-64/split-by-file-nacl.rd: New file.
	* ld/testsuite/ld-x86-64/tlsbin-nacl.rd: New file.
	* ld/testsuite/ld-x86-64/tlsbindesc-nacl.rd: New file.
	* ld/testsuite/ld-x86-64/tlsdesc-nacl.pd: New file.
	* ld/testsuite/ld-x86-64/tlsdesc-nacl.rd: New file.
	* ld/testsuite/ld-x86-64/tlsgdesc-nacl.rd: New file.
	* ld/testsuite/ld-x86-64/tlspic-nacl.rd: New file.

	* ld-i386/hidden2.d: Loosen regexps to match any file format variant,
	and not to depend on exact addresses, displacements, etc. where
	they are irrelevant.
	* ld-i386/pcrel16.d: Likewise.
	* ld-i386/pcrel16abs.d: Likewise.
	* ld-i386/pr12718.d: Likewise.
	* ld-i386/pr12921.d: Likewise.
	* ld-i386/reloc.d: Likewise.
	* ld-i386/tlsbin.dd: Likewise.
	* ld-i386/tlsbin.sd: Likewise.
	* ld-i386/tlsbin.td: Likewise.
	* ld-i386/tlsbindesc.dd: Likewise.
	* ld-i386/tlsbindesc.sd: Likewise.
	* ld-i386/tlsbindesc.td: Likewise.
	* ld-i386/tlsdesc.dd: Likewise.
	* ld-i386/tlsdesc.sd: Likewise.
	* ld-i386/tlsdesc.td: Likewise.
	* ld-i386/tlsg.sd: Likewise.
	* ld-i386/tlsgdesc.dd: Likewise.
	* ld-i386/tlsindntpoff.dd: Likewise.
	* ld-i386/tlsnopic.dd: Likewise.
	* ld-i386/tlsnopic.sd: Likewise.
	* ld-i386/tlspic.dd: Likewise.
	* ld-i386/tlspic.sd: Likewise.
	* ld-i386/tlspic.td: Likewise.
	* ld-i386/tlspie2.d: Likewise.
	* ld-x86-64/hidden2.d: Likewise.
	* ld-x86-64/pcrel16.d: Likewise.
	* ld-x86-64/pr12718.d: Likewise.
	* ld-x86-64/pr12921.d: Likewise.
	* ld-x86-64/protected3.d: Likewise.
	* ld-x86-64/tlsbin.dd: Likewise.
	* ld-x86-64/tlsbin.sd: Likewise.
	* ld-x86-64/tlsbin.td: Likewise.
	* ld-x86-64/tlsbindesc.dd: Likewise.
	* ld-x86-64/tlsbindesc.sd: Likewise.
	* ld-x86-64/tlsbindesc.td: Likewise.
	* ld-x86-64/tlsdesc.dd: Likewise.
	* ld-x86-64/tlsdesc.sd: Likewise.
	* ld-x86-64/tlsdesc.td: Likewise.
	* ld-x86-64/tlsg.sd: Likewise.
	* ld-x86-64/tlsgd5.dd: Likewise.
	* ld-x86-64/tlsgd6.dd: Likewise.
	* ld-x86-64/tlsgdesc.dd: Likewise.
	* ld-x86-64/tlspic.dd: Likewise.
	* ld-x86-64/tlspic.sd: Likewise.
	* ld-x86-64/tlspic.td: Likewise.

	* ld-x86-64/ilp32-8.d: Match any file format variant.
	Use a -Ttext and adjust expected results, to handle variant layouts.
	* ld-x86-64/ilp32-9.d: Likewise.

	* ld-i386/alloc.t: Remove superfluous OUTPUT_FORMAT statement.
	* ld-i386/pr12627.t: Likewise.

	* ld-x86-64/abs-l1om.d: Add target: constraint.
	* ld-x86-64/protected2-l1om.d: Likewise.
	* ld-x86-64/protected3-l1om.d: Likewise.
	* ld-x86-64/ilp32-4.d: Likewise.

	* ld-x86-64/plt.s: New file.
	* ld-x86-64/pltlib.s: New file.
	* ld-x86-64/plt.pd: New file.
	* ld-x86-64/x86-64.exp (x86_64tests): Add them.

	* ld-i386/plt.s: New file.
	* ld-i386/pltlib.s: New file.
	* ld-i386/plt.pd: New file.
	* ld-i386/plt-pic.s: New file.
	* ld-i386/plt-pic.pd: New file.
	* ld-i386/i386.exp (i386tests): Add them.
@
text
@d622 1
d658 1
@


1.260
log
@[.]
	* configure.ac (rl78-*-*) New case.
	* configure: Regenerate.

[bfd]
	* Makefile.am (ALL_MACHINES): Add cpu-rl78.lo.
	(ALL_MACHINES_CFILES): Add cpu-rl78.c.
	(BFD32_BACKENDS): Add elf32-rl78.lo.
	(BFD32_BACKENDS_CFILES): Add elf32-rl78.c.
	(Makefile.in): Regenerate.
	* archures.c (bfd_architecture): Define bfd_arch_rl78.
	(bfd_archures_list): Add bfd_rl78_arch.
	* config.bfd: Add rl78-*-elf.
	* configure.in: Add bfd_elf32_rl78_vec.
	* reloc.c (bfd_reloc_code_type): Add BFD_RELOC_RL78_* relocations.
	* targets.c (bfd_target_vector): Add bfd_elf32_rl78_vec.
	* Makefile.in: Regenerate.
	* bfd-in2.h: Regenerate.
	* configure: Regenerate.
	* libbfd.h: Regenerate.
	* cpu-rl78.c: New file.
	* elf32-rl78.c: New file.

[binutils]
	* readelf.c: Include elf/rl78.h
	(guess_is_rela): Handle EM_RL78.
	(dump_relocations): Likewise.
	(get_machine_name): Likewise.
	(is_32bit_abs_reloc): Likewise.
	* NEWS: Mention addition of RL78 support.
	* MAINTAINERS: Add myself as RL78 port maintainer.

[gas]
	* Makefile.am (TARGET_CPU_CFILES): Add tc-rl78.c.
	(TARGET_CPU_HFILES): Add rc-rl78.h.
	(EXTRA_DIST): Add rl78-parse.c and rl78-parse.y.
	(rl78-parse.c, rl78-parse.h, rl78-parse.o, rl78-defs.h): New rules.
	* Makefile.in: Regenerate.
	* configure.in: Add rl78 case.
	* configure: Regenerate.
	* configure.tgt: Add rl78 case.
	* config/rl78-defs.h: New file.
	* config/rl78-parse.y: New file.
	* config/tc-rl78.c: New file.
	* config/tc-rl78.h: New file.
	* NEWS: Add Renesas RL78.

	* doc/Makefile.am (c-rl78.texi): New.
	* doc/Makefile.in: Likewise.
	* doc/all.texi: Enable it.
	* doc/as.texi: Add it.

[include]
	* dis-asm.h (print_insn_rl78): Declare.

[include/elf]
	* common.h (EM_RL78, EM_78K0R): New.
	* rl78.h: New.

[include/opcode]
	* rl78.h: New file.

[ld]
	* Makefile.am (ALL_EMULATION_SOURCES): Add eelf32rl78.c.
	(+eelf32rl78.c): New rule.
	* Makefile.in: Regenerate.
	* configure.tgt: Add rl78-*-* case.
	* emulparams/elf32rl78.sh: New file.
	* NEWS: Mention addition of Renesas RL78 support.

[opcodes]
	* Makefile.am (TARGET_LIBOPCODES_CFILES): Add rl78-decode.c and
	rl78-dis.c.
	(MAINTAINERCLEANFILES): Add rl78-decode.c.
	(rl78-decode.c): New rule, built from rl78-decode.opc and opc2c.
	* Makefile.in: Regenerate.
	* configure.in: Add bfd_rl78_arch case.
	* configure: Regenerate.
	* disassemble.c: Define ARCH_rl78.
	(disassembler): Add ARCH_rl78 case.
	* rl78-decode.c: New file.
	* rl78-decode.opc: New file.
	* rl78-dis.c: New file.
@
text
@d278 1
d465 1
d614 1
d651 1
@


1.259
log
@bfd:
	* Makefile.am (ALL_MACHINES): Add cpu-epiphany.lo .
	(ALL_MACHINES_CFILES): Add cpu-epiphany.c .
	(BFD32_BACKENDS): Add elf32-epiphany.lo .
	(BFD32_BACKENDS_CFILES): Add elf32-epiphany.c .
	* Makefile.in, bfd-in2.h, configure, libbfd.h: Regenerate.
	* archures.c (bfd_arch_epiphany): Add.
	(bfd_mach_epiphany16, bfd_mach_epiphany32): Define.
	(bfd_epiphany_arch): Declare.
	(bfd_archures_list): Add &bfd_epiphany_arch.
	* config.bfd (epiphany-*-elf): New target case.
	* configure.in (bfd_elf32_epiphany_vec): New target vector case.
	* reloc.c (BFD_RELOC_EPIPHANY_SIMM8): New relocation.
	(BFD_RELOC_EPIPHANY_SIMM24, BFD_RELOC_EPIPHANY_HIGH): Likewise.
	(BFD_RELOC_EPIPHANY_LOW, BFD_RELOC_EPIPHANY_SIMM11): Likewise.
	(BFD_RELOC_EPIPHANY_IMM11, BFD_RELOC_EPIPHANY_IMM8): Likewise.
	* targets.c (bfd_elf32_epiphany_vec): Declare.
	(_bfd_target_vector): Add bfd_elf32_epiphany_vec.
	* po/SRC-POTFILES.in, po/bfd.pot: Regenerate.
	* cpu-epiphany.c, elf32-epiphany.c: New files.
binutils:
	* readelf.c (include "elf/epiphany.h")
	(guess_is_rela, dump_relocation): Handle EM_ADAPTEVA_EPIPHANY.
	(get_machine_name, is_32bit_abs_reloc, is_32bit_pcrel_reloc): Likewise.
	(is_16bit_abs_reloc, is_none_reloc): Likewise.
	* po/binutils.pot: Regenerate.
cpu:
	* cpu/epiphany.cpu, cpu/epiphany.opc: New files.
gas:
	* NEWS: Mention addition of Adapteva Epiphany support.
	* config/tc-epiphany.c, config/tc-epiphany.h: New files.
	* Makefile.am (TARGET_CPU_CFILES): Add config/tc-epiphany.c .
	(TARGET_CPU_HFILES): Add config/tc-epiphany.h .
	* Makefile.in, configure, doc/Makefile.in, po/POTFILES.in: Regenerate.
	* configure.in: Also set using_cgen for epiphany.
	* configure.tgt: Handle epiphany.
	* doc/Makefile.am (CPU_DOCS): Add c-epiphany.texi .
	* doc/all.texi: Set EPIPHANY.
	* doc/as.texinfo: Add EPIPHANY-specific text.
	* doc/c-epiphany.texi: New file.
	* po/gas.pot: Regenerate.
gas/testsuite:
	* gas/epiphany: New directory.
include:
	* dis-asm.h (print_insn_epiphany): Declare.
	* elf/epiphany.h: New file.
	* elf/common.h (EM_ADAPTEVA_EPIPHANY): Define.
ld:
	* NEWS: Mention addition of Adapteva Epiphany support.
	* Makefile.am (ALL_EMULATION_SOURCES): Add eelf32epiphany.c .
	(eelf32epiphany.c): New rule.
	* Makefile.in: Regenerate.
	* configure.tgt: Handle epiphany-*-elf.
	* po/ld.pot: Regenerate.
	* testsuite/ld-srec/srec.exp: xfail epiphany.
	* emulparams/elf32epiphany.sh: New file.
opcodes:
	* Makefile.am (HFILES): Add epiphany-desc.h and epiphany-opc.h .
	(TARGET_LIBOPCODES_CFILES): Add  epiphany-asm.c, epiphany-desc.c,
	epiphany-dis.c, epiphany-ibld.c and epiphany-opc.c .
	(CLEANFILES): Add stamp-epiphany.
	(EPIPHANY_DEPS): Set.  Make CGEN-generated Epiphany files depend on it.
	(stamp-epiphany): New rule.
	* Makefile.in, configure, po/POTFILES.in, po/opcodes.pot: Regenerate.
	* configure.in: Handle bfd_epiphany_arch.
	* disassemble.c (ARCH_epiphany): Define.
	(disassembler): Handle bfd_arch_epiphany.
	* epiphany-asm.c, epiphany-desc.c, epiphany-desc.h: New files.
	* epiphany-dis.c, epiphany-ibld.c, epiphany-opc.c: Likewise.
	* epiphany-opc.h: Likewise.
@
text
@d126 1
d203 1
d324 1
d510 1
@


1.258
log
@Add initial Intel K1OM support.

bfd/

2011-07-22  H.J. Lu  <hongjiu.lu@@intel.com>

	* Makefile.am (ALL_MACHINES): Add cpu-k1om.lo.
	(ALL_MACHINES_CFILES): Add cpu-k1om.c.
	* Makefile.in: Regenerated.

	* archures.c (bfd_architecture): Add bfd_arch_k1om.
	(bfd_k1om_arch): New.
	(bfd_archures_list): Add &bfd_k1om_arch.
	* bfd-in2.h: Regenerated.

	* config.bfd (targ64_selvecs): Add bfd_elf64_k1om_vec if
	bfd_elf64_x86_64_vec is supported.  Add bfd_elf64_k1om_freebsd_vec
	if bfd_elf64_x86_64_freebsd_vec is supported.
	(targ_selvecs): Likewise.

	* configure.in: Support bfd_elf64_k1om_vec and
	bfd_elf64_k1om_freebsd_vec.
	* configure: Regenerated.

	* cpu-k1om.c: New.

	* elf64-x86-64.c (elf64_k1om_elf_object_p): New.
	(bfd_elf64_k1om_vec): Likewise.
	(bfd_elf64_k1om_freebsd_vec): Likewise.

	* targets.c (bfd_elf64_k1om_vec): New.
	(bfd_elf64_k1om_freebsd_vec): Likewise.
	(_bfd_target_vector): Add bfd_elf64_k1om_vec and
	bfd_elf64_k1om_freebsd_vec.

binutils/

2011-07-22  H.J. Lu  <hongjiu.lu@@intel.com>

	* dwarf.c (init_dwarf_regnames): Handle EM_K1OM.

	* elfedit.c (elf_machine): Support EM_K1OM.
	(elf_class): Likewise.

	* readelf.c (guess_is_rela): Handle EM_K1OM.
	(dump_relocations): Likewise.
	(get_machine_name): Likewise.
	(get_section_type_name): Likewise.
	(get_elf_section_flags): Likewise.
	(process_section_headers): Likewise.
	(get_symbol_index_type): Likewise.
	(is_32bit_abs_reloc): Likewise.
	(is_32bit_pcrel_reloc): Likewise.
	(is_64bit_abs_reloc): Likewise.
	(is_64bit_pcrel_reloc): Likewise.
	(is_none_reloc): Likewise.

	* doc/binutils.texi: Mention K1OM for elfedit.

binutils/testsuite/

2011-07-22  H.J. Lu  <hongjiu.lu@@intel.com>

	* binutils-all/elfedit.exp: Run elfedit-4.

	* binutils-all/elfedit-4.d: New.

gas/

2011-07-22  H.J. Lu  <hongjiu.lu@@intel.com>

	* config/tc-i386.c (cpu_arch): Add k1om.
	(i386_align_code): Handle PROCESSOR_K1OM.
	(check_cpu_arch_compatible): Check EM_K1OM.
	(i386_arch): Handle Intel K1OM.
	(i386_mach): Return bfd_mach_k1om for Intel K1OM.
	(i386_target_format): Return ELF_TARGET_K1OM_FORMAT for Intel
	K1OM.

	* config/tc-i386.h (ELF_TARGET_K1OM_FORMAT): New.
	(processor_type): Add PROCESSOR_K1OM.

	* doc/c-i386.texi: Document k1om.

gas/testsuite/

2011-07-22  H.J. Lu  <hongjiu.lu@@intel.com>

	* gas/i386/k1om.d: New.
	* gas/i386/k1om-inval.l: Likewise.
	* gas/i386/k1om-inval.s: Likewise.

	* gas/i386/i386.exp: Run k1om-inval and k1om.

include/elf/

2011-07-22  H.J. Lu  <hongjiu.lu@@intel.com>

	* common.h (EM_K1OM): New.

ld/

2011-07-22  H.J. Lu  <hongjiu.lu@@intel.com>

	* Makefile.am (ALL_64_EMULATIONS): Add eelf_k1om.o and
	eelf_k1om_fbsd.o
	(eelf_k1om.c): New.
	(eelf_k1om_fbsd.c): Likewise.
	* Makefile.in: Regenerated.

	* configure.tgt (targ64_extra_emuls): Add elf_k1om if elf_x86_64
	is supported.  Add elf_k1om_fbsd if elf_x86_64_fbsd is supported.
	(targ_extra_emuls): Likewise.

	* emulparams/elf_k1om.sh: New.
	* emulparams/elf_k1om_fbsd.sh: Likewise.

ld/testsuite/

2011-07-22  H.J. Lu  <hongjiu.lu@@intel.com>

	* ld-x86-64/abs-k1om.d: New.
	* ld-x86-64/protected2-k1om.d: Likewise.
	* ld-x86-64/protected3-k1om.d: Likewise.

	* ld-x86-64/x86-64.exp: Run abs-k1om, protected2-k1om and
	protected3-k1om.

opcodes/

2011-07-22  H.J. Lu  <hongjiu.lu@@intel.com>

	* configure.in: Handle bfd_k1om_arch.
	* configure: Regenerated.

	* disassemble.c (disassembler): Handle bfd_k1om_arch.

	* i386-dis.c (print_insn): Handle bfd_mach_k1om and
	bfd_mach_k1om_intel_syntax.

	* i386-gen.c (cpu_flag_init): Set CPU_UNKNOWN_FLAGS to
	~(CpuL1OM|CpuK1OM).  Add CPU_K1OM_FLAGS.
	(cpu_flags): Add CpuK1OM.

	* i386-opc.h (CpuK1OM): New.
	(i386_cpu_flags): Add cpuk1om.

	* i386-init.h: Regenerated.
	* i386-tbl.h: Likewise.
@
text
@d86 1
d162 1
d291 1
d476 1
@


1.258.2.1
log
@bfd/
2011-11-21  Tristan Gingold  <gingold@@adacore.com>

	* configure.in: Bump version to 2.22
	* Makefile.am (RELEASE): Set.
	* configure, Makefile.in: Regenerate.
@
text
@d7 1
a7 1
RELEASE=y
@


1.258.2.2
log
@bfd/
2011-11-21  Tristan Gingold  <gingold@@adacore.com>

	* configure.in: Bump version to 2.22.0
	* Makefile.am (RELEASE): Unset.
	* configure, Makefile.in: Regenerate.
@
text
@d7 1
a7 1
# RELEASE=y
@


1.257
log
@	* Makefile.am: Formatting.
	* Makefile.in: Regenerate.
	* configure.in (bfd_elf64_tilegx_vec): Add elfxx-tilegx.lo.
	* po/SRC-POTFILES.in: Regnerate.
@
text
@d94 1
d169 1
@


1.256
log
@    * Makefile.am (ALL_MACHINES): Add cpu-tilegx.lo and cpu-tilepro.lo.
    (ALL_MACHINE_CFILES): Add cpu-tilegx.c and cpu-tilepro.c.
    (BFD32_BACKENDS): Add elf32-tilegx.lo, elf32-tilepro.lo,
    and elfxx-tilegx.lo.
    (BFD32_BACKENDS_CFILES): Add elf32-tilegx.c elf32-tilepro.c, and
    elfxx-tilegx.c.
    (BFD64_BACKENDS): Add elf64-tilegx.lo.
    (BFD64_BACKENDS_CFILES): Add elf64-tilegx.c.
    * Makefile.in: Regenerate.
    * arctures.c (bfd_architecture): Define bfd_arch_tilepro,
    bfd_arch_tilegx, bfd_mach_tilepro, bfd_mach_tilegx.
    (bfd_arch_info): Add bfd_tilegx_arch, bfd_tilepro_arch.
    (bfd_archures_list): Add bfd_tilegx_arch, bfd_tilepro_arch.
    bfd-in2.h: Regenerate.
    * config.bfd: Handle tilegx-*-* and tilepro-*-*.
    * configure.in: Handle bfd_elf32_tilegx_vec, bfd_elf32_tilepro_vec,
    and bfd_elf64_tilegx_vec.
    * configure: Regenerate.
    * elf-bfd.h (enum elf_target_id): Define TILEGX_ELF_DATA and
    TILEPRO_ELF_DATA.
    * libbfd.h: Regenerate.
    * reloc.c: Add BFD_RELOC_TILEPRO_{COPY, GLOB_DAT, JMP_SLOT,
    RELATIVE, BROFF_X1, JOFFLONG_X1, JOFFLONG_X1_PLT, IMM8_X0,
    IMM8_Y0, IMM8_X1, IMM8_Y1, DEST_IMM8_X1, MT_IMM15_X1, MF_IMM15_X1,
    IMM16_X0, IMM16_X1, IMM16_X0_LO, IMM16_X1_LO, IMM16_X0_HI,
    IMM16_X1_HI, IMM16_X0_HA, IMM16_X1_HA, IMM16_X0_PCREL,
    IMM16_X1_PCREL, IMM16_X0_LO_PCREL, IMM16_X1_LO_PCREL,
    IMM16_X0_HI_PCREL, IMM16_X1_HI_PCREL, IMM16_X0_HA_PCREL,
    IMM16_X1_HA_PCREL, IMM16_X0_GOT, IMM16_X1_GOT, IMM16_X0_GOT_LO,
    IMM16_X1_GOT_LO, IMM16_X0_GOT_HI, IMM16_X1_GOT_HI,
    IMM16_X0_GOT_HA, IMM16_X1_GOT_HA, MMSTART_X0, MMEND_X0,
    MMSTART_X1, MMEND_X1, SHAMT_X0, SHAMT_X1, SHAMT_Y0, SHAMT_Y1,
    IMM16_X0_TLS_GD, IMM16_X1_TLS_GD, IMM16_X0_TLS_GD_LO,
    IMM16_X1_TLS_GD_LO, IMM16_X0_TLS_GD_HI, IMM16_X1_TLS_GD_HI,
    IMM16_X0_TLS_GD_HA, IMM16_X1_TLS_GD_HA, IMM16_X0_TLS_IE,
    IMM16_X1_TLS_IE, IMM16_X0_TLS_IE_LO, IMM16_X1_TLS_IE_LO,
    IMM16_X0_TLS_IE_HI, IMM16_X1_TLS_IE_HI, IMM16_X0_TLS_IE_HA,
    IMM16_X1_TLS_IE_HA, TLS_DTPMOD32, TLS_DTPOFF32, TLS_TPOFF32}
    Add BFD_RELOC_TILEGX_{HW0, HW1, HW2, HW3, HW0_LAST, HW1_LAST,
    HW2_LAST, COPY, GLOB_DAT, JMP_SLOT, RELATIVE, BROFF_X1,
    JUMPOFF_X1, JUMPOFF_X1_PLT, IMM8_X0, IMM8_Y0, IMM8_X1, IMM8_Y1,
    DEST_IMM8_X1, MT_IMM14_X1, MF_IMM14_X1, MMSTART_X0, MMEND_X0,
    SHAMT_X0, SHAMT_X1, SHAMT_Y0, SHAMT_Y1, IMM16_X0_HW0,
    IMM16_X1_HW0, IMM16_X0_HW1, IMM16_X1_HW1, IMM16_X0_HW2,
    IMM16_X1_HW2, IMM16_X0_HW3, IMM16_X1_HW3, IMM16_X0_HW0_LAST,
    IMM16_X1_HW0_LAST, IMM16_X0_HW1_LAST, IMM16_X1_HW1_LAST,
    IMM16_X0_HW2_LAST, IMM16_X1_HW2_LAST, IMM16_X0_HW0_PCREL,
    IMM16_X1_HW0_PCREL, IMM16_X0_HW1_PCREL, IMM16_X1_HW1_PCREL,
    IMM16_X0_HW2_PCREL, IMM16_X1_HW2_PCREL, IMM16_X0_HW3_PCREL,
    IMM16_X1_HW3_PCREL, IMM16_X0_HW0_LAST_PCREL,
    IMM16_X1_HW0_LAST_PCREL, IMM16_X0_HW1_LAST_PCREL,
    IMM16_X1_HW1_LAST_PCREL, IMM16_X0_HW2_LAST_PCREL,
    IMM16_X1_HW2_LAST_PCREL, IMM16_X0_HW0_GOT, IMM16_X1_HW0_GOT,
    IMM16_X0_HW1_GOT, IMM16_X1_HW1_GOT, IMM16_X0_HW2_GOT,
    IMM16_X1_HW2_GOT, IMM16_X0_HW3_GOT, IMM16_X1_HW3_GOT,
    IMM16_X0_HW0_LAST_GOT, IMM16_X1_HW0_LAST_GOT,
    IMM16_X0_HW1_LAST_GOT, IMM16_X1_HW1_LAST_GOT,
    IMM16_X0_HW2_LAST_GOT, IMM16_X1_HW2_LAST_GOT, IMM16_X0_HW0_TLS_GD,
    IMM16_X1_HW0_TLS_GD, IMM16_X0_HW1_TLS_GD, IMM16_X1_HW1_TLS_GD,
    IMM16_X0_HW2_TLS_GD, IMM16_X1_HW2_TLS_GD, IMM16_X0_HW3_TLS_GD,
    IMM16_X1_HW3_TLS_GD, IMM16_X0_HW0_LAST_TLS_GD,
    IMM16_X1_HW0_LAST_TLS_GD, IMM16_X0_HW1_LAST_TLS_GD,
    IMM16_X1_HW1_LAST_TLS_GD, IMM16_X0_HW2_LAST_TLS_GD,
    IMM16_X1_HW2_LAST_TLS_GD, IMM16_X0_HW0_TLS_IE,
    IMM16_X1_HW0_TLS_IE, IMM16_X0_HW1_TLS_IE, IMM16_X1_HW1_TLS_IE,
    IMM16_X0_HW2_TLS_IE, IMM16_X1_HW2_TLS_IE, IMM16_X0_HW3_TLS_IE,
    IMM16_X1_HW3_TLS_IE, IMM16_X0_HW0_LAST_TLS_IE,
    IMM16_X1_HW0_LAST_TLS_IE, IMM16_X0_HW1_LAST_TLS_IE,
    IMM16_X1_HW1_LAST_TLS_IE, IMM16_X0_HW2_LAST_TLS_IE,
    IMM16_X1_HW2_LAST_TLS_IE, TLS_DTPMOD64, TLS_DTPOFF64, TLS_TPOFF64,
    TLS_DTPMOD32, TLS_DTPOFF32, TLS_TPOFF32}
    * targets.c (bfd_elf32_tilegx_vec): Declare.
    (bfd_elf32_tilepro_vec): Declare.
    (bfd_elf64_tilegx_vec): Declare.
    (bfd_target_vector): Add bfd_elf32_tilegx_vec, bfd_elf32_tilepro_vec,
    and bfd_elf64_tilegx_vec.
    * cpu-tilegx.c: New file.
    * cpu-tilepro.c: New file.
    * elf32-tilepro.h: New file.
    * elf32-tilepro.c: New file.
    * elf32-tilegx.c: New file.
    * elf32-tilegx.h: New file.
    * elf64-tilegx.c: New file.
    * elf64-tilegx.h: New file.
    * elfxx-tilegx.c: New file.
    * elfxx-tilegx.h: New file.

	* Makefile.am (TARGET_CPU_CFILES): Add config/tc-tilegx.c and
	config/tc-tilepro.c.
	(TARGET_CPU_HFILES): Add config/tc-tilegx.h and
	config/tc-tilepro.h.
	* Makefile.in: Regenerate.
	* configure.tgt (tilepro-*-*): New.
	(tilegx-*-*): Likewise.
	* config/tc-tilegx.c: New file.
	* config/tc-tilegx.h: Likewise.
	* config/tc-tilepro.h: Likewise.
	* config/tc-tilepro.c: Likewise.
	* doc/Makefile.am (CPU_DOCS): Add c-tilegx.texi and
	c-tilepro.texi.
	* doc/Makefile.in: Regenerate.
	* doc/all.texi (TILEGX): Define.
	(TILEPRO): Define.
	* doc/as.texinfo: Add Tile-Gx and TILEPro documentation.  Include
	c-tilegx.texi and c-tilepro.texi.
	* doc/c-tilegx.texi: New.
	* doc/c-tilepro.texi: New.

        * gas/tilepro/t_constants.s: New file.
	* gas/tilepro/t_constants.d: Likewise.
	* gas/tilepro/t_insns.s: Likewise.
	* gas/tilepro/tilepro.exp: Likewise.
	* gas/tilepro/t_insns.d: Likewise.
	* gas/tilegx/tilegx.exp: Likewise.
	* gas/tilegx/t_insns.d: Likewise.
	* gas/tilegx/t_insns.s: Likewise.

	* dis-asm.h (print_insn_tilegx): Declare.
	(print_insn_tilepro): Likewise.

	* tilegx.h: New file.
	* tilepro.h: New file.

	* common.h: Add EM_TILEGX.
	* tilegx.h: New file.
	* tilepro.h: New file.

	* Makefile.am (ALL_EMULATION_SOURCES): Add eelf32tilegx.c and
	eelf32tilepro.c.
	(ALL_64_EMULATION_SOURCES): Add eelf64tilegx.c.
	(eelf32tilegx.c): New target.
	(eelf32tilepro.c): Likewise.
	(eelf64tilegx.c): Likewise.
	* Makefile.in: Regenerate.
	* configure.tgt: Handle tilegx-*-* and tilepro-*-*.
	* emulparams/elf32tilegx.sh: New file.
	* emulparams/elf64tilegx.sh: New file.
	* emulparams/elf32tilepro.sh: New file.

	* ld-elf/eh5.d: Don't run on tile*.
	* ld-srec/srec.exp: xfail on tile*.
	* ld-tilegx/external.s: New file.
	* ld-tilegx/reloc.d: New file.
	* ld-tilegx/reloc.s: New file.
	* ld-tilegx/tilegx.exp: New file.
	* ld-tilepro/external.s: New file.
	* ld-tilepro/reloc.d: New file.
	* ld-tilepro/reloc.s: New file.
	* ld-tilepro/tilepro.exp: New file.

	* Makefile.am (TARGET_LIBOPCODES_CFILES): Add tilegx-dis.c,
	tilegx-opc.c, tilepro-dis.c, and tilepro-opc.c.
	* Makefile.in: Regenerate.
	* configure.in: Handle bfd_tilegx_arch and bfd_tilepro_arch.
	* configure: Regenerate.
	* disassemble.c (disassembler): Add ARCH_tilegx and ARCH_tilepro.
	* po/POTFILES.in: Regenerate.
	* tilegx-dis.c: New file.
	* tilegx-opc.c: New file.
	* tilepro-dis.c: New file.
	* tilepro-opc.c: New file.
@
text
@d615 1
a615 1
 	elf64-tilegx.lo \
@


1.255
log
@2011-05-25  Tristan Gingold  <gingold@@adacore.com>

	* configure.in (bfd_elf32_ia64_big_vec, bfd_elf32_ia64_hpux_big_vec)
	(bfd_elf64_ia64_big_vec, bfd_elf64_ia64_hpux_big_vec)
	(bfd_elf64_ia64_little_vec, bfd_elf64_ia64_vms_vec): Add elfxx-ia64.lo
	* Makefile.am (BFD64_BACKENDS): Add elfxx-ia64.lo
	(BFD64_BACKENDS_CFILES): Add elfxx-ia64.c
	(elf32-ia64.c): Created from elfnn-ia64.c
	(elf64-ia64.c): Likewise.
	* elfxx-ia64.h: New file.
	* elfxx-ia64.c: Split with elfnn-ia64.c.  Keep only the following
	functions.Includes elfxx-ia64.h.
	(elfNN_ia64_reloc): Renames to ia64_elf_reloc.  Adjust error message.
	(IA64_HOWTO): Adjust.
	(lookup_howto): Renames to ia64_elf_lookup_howto.  Make it public.
	(elfNN_ia64_reloc_type_lookup): Renames to
	ia64_elf_reloc_type_lookup. Make it public. Adjust calls.
	(elfNN_ia64_reloc_name_lookup): Renames to
	ia64_elf_reloc_name_lookup. Make it public.
	(elfNN_ia64_relax_br): Renames to ia64_elf_relax_br.  Make it public.
	(elfNN_ia64_relax_brl): Renames to ia64_elf_relax_brl. Make it
	public.
	(elfNN_ia64_relax_ldxmov): Renames to ia64_elf_relax_ldxmov.
	Move it and make it public.  Move prototype to elfxx-ia64.h
	(elfNN_ia64_install_value): Renames to ia64_elf_install_value.
	Move prototype to elfxx-ia64.h
	* elfnn-ia64.c: New file, split from elfxx-ia64.c.
	(elfNN_ia64_info_to_howto): Adjust calls.
	(elfNN_ia64_relax_section): Adjust calls.
	(count_dyn_reloc): Fix typo.
	(elfNN_ia64_relocate_section): Adjust calls.
	(elfNN_ia64_finish_dynamic_symbol): Likewise.
	(bfd_elfNN_bfd_reloc_type_lookup)
	(bfd_elfNN_bfd_reloc_name_lookup): Adjust macros.
@
text
@d135 2
d209 2
d326 2
d337 1
d510 2
d521 1
d615 1
d649 1
@


1.254
log
@2011-04-08  Tristan Gingold  <gingold@@adacore.com>

	* Makefile.am (SOURCE_HFILES): Remove xcoff-target.h
	* coff-pmac: Remove
	* xcoff-target.h: Remove
	* Makefile.in: Regenerate.
@
text
@d608 1
d641 1
d850 1
a850 1
elf32-ia64.c : elfxx-ia64.c
d852 1
a852 1
	sed -e s/NN/32/g < $(srcdir)/elfxx-ia64.c > elf32-ia64.new
d855 1
a855 1
elf64-ia64.c : elfxx-ia64.c
d857 1
a857 1
	sed -e s/NN/64/g < $(srcdir)/elfxx-ia64.c > elf64-ia64.new
@


1.253
log
@bfd: install plugin-api.h as needed

Since people need plugin-api.h in order to build linker plugins, install
the header with the other library headers when plugin support is enabled.

Signed-off-by: Mike Frysinger <vapier@@gentoo.org>
@
text
@d714 1
a714 1
	vms.h xcoff-target.h xsym.h
@


1.252
log
@Add rs6000-core.c/.o to the list of optional backend files...

This makes sure that rs6000-core.c gets recompiled whenever any of its
dependencies get changed.

bfd/ChangeLog:

        * Makefile.am (OPTIONAL_BACKENDS): Add rs6000-core.lo.
        (OPTIONAL_BACKENDS_CFILES): Add rs6000-core.c.
        * Makefile.in: Regenerate.
@
text
@d26 1
d37 1
@


1.251
log
@Disable -Werror on coff-tic4x.lo and coff-tic54x.lo.

2010-08-12  H.J. Lu  <hongjiu.lu@@intel.com>

	PR binutils/11909
	* Makefile.am (coff-tic4x.lo): New.  Disable -Werror.
	(coff-tic54x.lo): Likewise.
@
text
@d654 1
d665 1
@


1.251.2.1
log
@bfd: install plugin-api.h as needed

Since people need plugin-api.h in order to build linker plugins, install
the header with the other library headers when plugin support is enabled.

Signed-off-by: Mike Frysinger <vapier@@gentoo.org>
@
text
@a25 1
bfdinclude_HEADERS =
a35 1
bfdinclude_HEADERS += $(INCDIR)/plugin-api.h
@


1.251.2.2
log
@bfd/
2010-12-08  Tristan Gingold  <gingold@@adacore.com>

	* configure.in: Bump version to 2.21
	* Makefile.am (RELEASE): Set.
	* configure, Makefile.in: Regenerate.
@
text
@d7 1
a7 1
RELEASE=y
@


1.251.2.3
log
@bfd/
2010-12-08  Tristan Gingold  <gingold@@adacore.com>

	* configure.in: Bump version to 2.21.0
	* Makefile.am (RELEASE): Unset.
	* configure, Makefile.in: Regenerate.
@
text
@d7 1
a7 1
# RELEASE=y
@


1.251.2.4
log
@backport from mainline
@
text
@a655 1
	rs6000-core.lo \
a665 1
	rs6000-core.c \
@


1.251.2.5
log
@bfd/
2011-06-27  Tristan Gingold  <gingold@@adacore.com>

	* configure.in: Bump version to 2.21.1
	* Makefile.am (RELEASE): Set.
	* configure, Makefile.in: Regenerate.
@
text
@d7 1
a7 1
RELEASE=y
@


1.251.2.6
log
@bfd/
2011-06-27  Tristan Gingold  <gingold@@adacore.com>

	* Makefile.am (RELEASE): Unset.
	* Makefile.in: Regenerate.
@
text
@d7 1
a7 1
# RELEASE=y
@


1.250
log
@remove maxq-coff port
@
text
@d963 16
@


1.249
log
@2010-06-17  Tristan Gingold  <gingold@@adacore.com>

	* Makefile.am (BFD32_BACKENDS_CFILES): Move vms-alpha.c to ...
	(BFD64_BACKENDS_CFILES): ... here.
	(BFD32_BACKENDS): Move vms-alpha.lo to ...
	(BFD64_BACKENDS): ... here.
	* Makefile.in: Regenerate.
@
text
@a105 1
	cpu-maxq.lo \
a177 1
	cpu-maxq.c \
a240 1
	coff-maxq.lo \
a421 1
	coff-maxq.c \
@


1.248
log
@2010-05-14  Tristan Gingold  <gingold@@adacore.com>

	* vms-lib.c (_bfd_vms_lib_ia64_archive_p): New function.
	* libbfd-in.h (_bfd_vms_lib_ia64_archive_p): Add prototype.
	* libbfd.h: Regenerate.
	* configure.in (havevecs): Define HAVE_all_vecs when
	--enable-targets=all is set.  Use AC_SUBST on it.
	(tdefaults): Do not add havevecs.
	(bfd_elf64_ia64_vms_vec): Add vms-lib.lo and vms-misc.lo
	* configure: Regenerate.
	* Makefile.am (HAVEVECS): New variable.
	(INCLUDES): Add HAVEVECS.
	* Makefile.in: Regenerate.
	* elfxx-ia64.c (INCLUDE_IA64_VMS): New macro, defined if vms
	target is selected.  Add #ifdef/#endif around vms specific code.
	(bfd_elfNN_archive_p, bfd_elfNN_archive_slurp_armap,
	bfd_elfNN_archive_slurp_extended_name_table,
	bfd_elfNN_archive_construct_extended_name_table,
	bfd_elfNN_archive_truncate_arname,
	bfd_elfNN_archive_write_armap,
	bfd_elfNN_archive_read_ar_hdr,
	bfd_elfNN_archive_write_ar_hdr,
	bfd_elfNN_archive_openr_next_archived_file,
	bfd_elfNN_archive_get_elt_at_index,
	bfd_elfNN_archive_generic_stat_arch_elt,
	bfd_elfNN_archive_update_armap_timestamp): Define to use vms archives.
@
text
@a393 1
	vms-alpha.lo \
a574 1
	vms-alpha.c \
d618 2
a619 1
	pex64igen.lo
d648 2
a649 1
	pei-x86_64.c
@


1.247
log
@2010-04-14  Tristan Gingold  <gingold@@adacore.com>

	* Makefile.am (BFD32_BACKENDS): Remove vms-gsd.lo, vms-hdr.lo,
	vms-tir.lo, vms.lo and add vms-alpha.lo
	(BFD32_BACKENDS_CFILES): Remove vms-gsd.c, vms-hdr.c,
	vms-tir.c, vms.c and add vms-alpha.c
	* Makefile.in: Regenerate.
	* configure.in (TDEFINES): Adjust file list for vms_alpha_vec.
	Remove vms_vax_vec.
	* configure: Regenerate.
	* targets.c (vms_vax_vec): Remove the declaration.
	(_bfd_target_vector): Remove vms_vax_vec.
	* vms-alpha.c: New file.
	* vms-gsd.c: Removed, rewritten in vms-alpha.c
	* vms-hdr.c: Ditto.
	* vms-tir.c: Ditto.
	* vms.c: Ditto.
	* vms-misc.c: Fix indentation and comments.  Replace most of
	#if VMS_DEBUG/vms_debug with vms_debug2.
	(_bfd_vms_hash_newfunc): Moved to vms-alpha.c
	(hash_string): Ditto.
	(_bfd_vms_length_hash_symbol): Ditto.
	(maybe_adjust_record_pointer_for_object): Ditto.
	(_bfd_vms_get_object_record): Ditto.
	(vms_get_remaining_object_record): Ditto.
	(_bfd_vms_push): Ditto.
	(_bfd_vms_pop): Ditto.
	(_bfd_vms_get_header_values): Removed.
	(_bfd_vms_get_first_record): Removed.
	(vms_get_remaining_image_record): Removed.
	(new_symbol): Removed.
	(_bfd_vms_enter_symbol): Removed.
	(_bfd_vms_save_sized_string): Use memcpy instead of strncpy.
	(_bfd_vms_output_begin): Remove rechead parameter.  Replace bfd
	parameter with struct vms_rec_wr.
	(_bfd_vms_output_push): Removed and replaced by ...
	(_bfd_vms_output_begin_subrec): ... new function.
	(_bfd_vms_output_alignment): Replace bfd parameter with
	struct vms_rec_wr, and adjust.
	(_bfd_vms_output_check): Ditto
	(_bfd_vms_output_byte): Ditto.
	(_bfd_vms_output_short): Ditto.
	(_bfd_vms_output_long): Ditto.
	(_bfd_vms_output_quad): Ditto.
	(_bfd_vms_output_counted): Ditto.
	(_bfd_vms_output_dump): Ditto.
	(_bfd_vms_output_fill): Ditto.
	(_bfd_vms_output_pop): Removed and replaced by ...
	(_bfd_vms_output_end_subrec): ... new function.
	(_bfd_vms_output_flush): Removed.
	(_bfd_vms_output_align): New function.
	(_bfd_vms_output_end): Add recwr parameter.  Adjust for this new
	parameter.
	(vms_convert_to_var): New function imported from vms.c
	(vms_convert_to_var_1): Ditto.
	(vms_convert_to_var_unix_filename): Ditto.
	(vms_get_module_name): Ditto.
	(get_vms_time_string): Ditto.
	(vms_time_to_time_t): Ditto.
	(vms_rawtime_to_time_t): Ditto.
	* vms.h: All macros for the VMS file format are now in include/vms.
	Prototypes for vms.c, vms-gsd.c, vms-misc.c, vms-hdr.c, vms-tir.c
	have been removed.
	(struct vms_symbol_struct, struct stack_struct): Moved to vms-alpha.c
	(struct fileinfo, struct srecinfo, struct lineinfo): Ditto.
	(struct funcinfo, struct vms_private_data_struct): Ditto.
	(struct vms_section_data_struct): Ditto.
	(struct vms_rec_rd, stryct vms_rec_wr): New declarations.
	(vms_get_module_name, get_vms_time_string): New declarations.
	(vms_time_to_time_t, vms_rawtime_to_time_t): Ditto.
	(_bfd_vms_output_begin_subrec, _bfd_vms_output_end_subrec): Ditto.
	(_bfd_vms_save_sized_string, _bfd_vms_save_counted_string): Adjusted.
	(_bfd_vms_output_begin, _bfd_vms_output_alignment): Ditto.
	(_bfd_vms_output_end,_bfd_vms_output_check): Ditto.
	(_bfd_vms_output_byte, _bfd_vms_output_short): Ditto.
	(_bfd_vms_output_long, _bfd_vms_output_quad): Ditto.
	(_bfd_vms_output_counted, _bfd_vms_output_dump): Ditto.
	(_bfd_vms_output_fill): Ditto.
	(bfd_vms_set_section_flags): Ditto.
@
text
@d685 1
d687 2
a688 1
INCLUDES = @@HDEFINES@@ @@COREFLAG@@ @@TDEFINES@@ $(CSEARCH) $(CSWITCHES) @@INCINTL@@
@


1.246
log
@2010-04-01  Tristan Gingold  <gingold@@adacore.com>

	* vms.h: Include time.h. Add prototypes for vms_get_module_name,
	vms_time_to_time_t and vms_rawtime_to_time_t.
	* vms.c (vms_alpha_vec): Add archives support.
	* vms-misc.c: Include safe-ctype.h
	(vms_get_module_name): New function.
	(vms_time_to_time_t, vms_rawtime_to_time_t): Ditto.
	* vms-hdr.c (_bfd_vms_write_hdr): Put module name creation to the
	vms_get_module_name function.  Use this function.
	* targets.c: Declare vms_lib_txt_vec.  Add it to _bfd_target_vector.
	* libbfd-in.h: Add prototype for _bfd_append_relative_path.
	Add prototypes for vms-lib.c
	* libbfd.h: Regenerate.
	* configure.in (TDEFINES): Add an entry for vms_lib_txt_vec.  Add
	vms-lib.lo to vms_alpha_vec.
	* config.bfd (targ_cpu): Add targ_selvecs for alpha*-*-*vms*.
	* configure: Regenerate.
	* bfd.c: Add selective_search field.
	* bfd-in2.h: Regenerate.
	* archive.c (append_relative_path): Rename to
	_bfd_append_relative_path and make it public.
	(_bfd_get_elt_at_filepos): Adjust for above renaming.
	* Makefile.am (BFD32_BACKENDS): Add vms-lib.lo
	(BFD32_BACKENDS_CFILES): Add vms-lib.c
	* Makefile.in: Regenerate.
@
text
@d394 1
a394 2
	vms-gsd.lo \
	vms-hdr.lo \
a396 2
	vms-tir.lo \
	vms.lo \
d576 1
a576 2
	vms-gsd.c \
	vms-hdr.c \
a578 2
	vms-tir.c \
	vms.c \
@


1.245
log
@bfd:
	* Makefile.am (ALL_MACHINES): Add cpu-tic6x.lo.
	(ALL_MACHINES_CFILES): Add cpu-tic6x.c.
	(BFD32_BACKENDS): Add elf32-tic6x.lo.
	(BFD32_BACKENDS_CFILES): Add elf32-tic6x.c.
	* Makefile.in: Regenerate.
	* archures.c (bfd_arch_tic6x, bfd_tic6x_arch): New.
	(bfd_archures_list): Update.
	* config.bfd (tic6x-*-elf): New.
	* configure.in (bfd_elf32_tic6x_be_vec, bfd_elf32_tic6x_le_vec):
	New.
	* configure: Regenerate.
	* cpu-tic6x.c, elf32-tic6x.c: New.
	* reloc.c (BFD_RELOC_C6000_PCR_S21, BFD_RELOC_C6000_PCR_S12,
	BFD_RELOC_C6000_PCR_S10, BFD_RELOC_C6000_PCR_S7,
	BFD_RELOC_C6000_ABS_S16, BFD_RELOC_C6000_ABS_L16,
	BFD_RELOC_C6000_ABS_H16, BFD_RELOC_C6000_SBR_U15_B,
	BFD_RELOC_C6000_SBR_U15_H, BFD_RELOC_C6000_SBR_U15_W,
	BFD_RELOC_C6000_SBR_S16, BFD_RELOC_C6000_SBR_L16_B,
	BFD_RELOC_C6000_SBR_L16_H, BFD_RELOC_C6000_SBR_L16_W,
	BFD_RELOC_C6000_SBR_H16_B, BFD_RELOC_C6000_SBR_H16_H,
	BFD_RELOC_C6000_SBR_H16_W, BFD_RELOC_C6000_SBR_GOT_U15_W,
	BFD_RELOC_C6000_SBR_GOT_L16_W, BFD_RELOC_C6000_SBR_GOT_H16_W,
	BFD_RELOC_C6000_DSBT_INDEX, BFD_RELOC_C6000_PREL31,
	BFD_RELOC_C6000_COPY, BFD_RELOC_C6000_ALIGN,
	BFD_RELOC_C6000_FPHEAD, BFD_RELOC_C6000_NOCMP): New.
	* targets.c (bfd_elf32_tic6x_be_vec, bfd_elf32_tic6x_le_vec): New.
	(_bfd_target_vector): Update.
	* bfd-in2.h, libbfd.h: Regenerate.

binutils:
	* MAINTAINERS: Add self as TI C6X maintainer.
	* NEWS: Add news entry for TI C6X support.
	* readelf.c: Include elf/tic6x.h.
	(guess_is_rela): Handle EM_TI_C6000.
	(dump_relocations): Likewise.
	(get_tic6x_dynamic_type): New.
	(get_dynamic_type): Call it.
	(get_machine_flags): Handle EF_C6000_REL.
	(get_osabi_name): Handle machine-specific values only for relevant
	machines.  Handle C6X values.
	(get_tic6x_segment_type): New.
	(get_segment_type): Call it.
	(get_tic6x_section_type_name): New.
	(get_section_type_name): Call it.
	(is_32bit_abs_reloc, is_16bit_abs_reloc, is_none_reloc): Handle
	EM_TI_C6000.

gas:
	* Makefile.am (TARGET_CPU_CFILES): Add config/tc-tic6x.c.
	(TARGET_CPU_HFILES): Add config/tc-tic6x.h.
	* Makefile.in: Regenerate.
	* NEWS: Add news entry for TI C6X support.
	* app.c (do_scrub_chars): Handle "||^" for TI C6X.  Handle
	TC_PREDICATE_START_CHAR and TC_PREDICATE_END_CHAR.  Keep spaces in
	operands if TC_KEEP_OPERAND_SPACES.
	* configure.tgt (tic6x-*-*): New.
	* config/tc-ia64.h (TC_PREDICATE_START_CHAR,
	TC_PREDICATE_END_CHAR): Define.
	* config/tc-tic6x.c, config/tc-tic6x.h: New.
	* doc/Makefile.am (CPU_DOCS): Add c-tic6x.texi.
	* doc/Makefile.in: Regenerate.
	* doc/all.texi (TIC6X): Define.
	* doc/as.texinfo: Add TI C6X documentation.  Include c-tic6x.texi.
	* doc/c-tic6x.texi: New.

gas/testsuite:
	* gas/tic6x: New directory and testcases.

include:
	* dis-asm.h (print_insn_tic6x): Declare.

include/elf:
	* common.h (ELFOSABI_C6000_ELFABI, ELFOSABI_C6000_LINUX): Define.
	* tic6x.h: New.

include/opcode:
	* tic6x-control-registers.h, tic6x-insn-formats.h,
	tic6x-opcode-table.h, tic6x.h: New.

ld:
	* Makefile.am (ALL_EMULATIONS): Add eelf32_tic6x_be.o and
	eelf32_tic6x_le.o.
	(eelf32_tic6x_be.c, eelf32_tic6x_le.c): New.
	* NEWS: Add news entry for TI C6X support.
	* configure.tgt (tic6x-*-*): New.
	* emulparams/elf32_tic6x_be.sh, emulparams/elf32_tic6x_le.sh: New.

ld/testsuite:
	* ld-elf/flags1.d, ld-elf/merge.d: XFAIL for tic6x-*-*.
	* ld-elf/sec-to-seg.exp: Set B_test_same_seg to 0 for tic6x-*-*.
	* ld-tic6x: New directory and testcases.

opcodes:
	* Makefile.am (TARGET_LIBOPCODES_CFILES): Add tic6x-dis.c.
	* Makefile.in: Regenerate.
	* configure.in (bfd_tic6x_arch): New.
	* configure: Regenerate.
	* disassemble.c (ARCH_tic6x): Define if ARCH_all.
	(disassembler): Handle TI C6X.
	* tic6x-dis.c: New.
@
text
@d396 1
d581 1
@


1.244
log
@2010-01-13  Tristan Gingold  <gingold@@adacore.com>

	* config.bfd: Remove duplicated target vector for i386-*-darwin.
	Appends new arch instead of overriding.
	Use mach_o_x86_64_vec for x86_64-*-darwin.
	* configure.in: Add mach_o_x86_64_vec.
	* configure: Regenerate.
	* targets.c: Declare mach_o_x86_64_vec, add it to _bfd_target_vector.
	* Makefile.am (BFD64_BACKENDS): Add mach-o-x86-64.lo
	(BFD64_BACKENDS_CFILES): Add mach-o-x86-64.c
	* Makefile.in: Regenerate.
	* mach-o-x86-64.c: New file.
@
text
@d132 1
d205 1
d322 1
d507 1
@


1.243
log
@bfd
        * Makefile.am (ALL_MACHINES): Add cpu-rx.lo.
        (ALL_MACHINES_CFILES): Add cpu-rx.c.
        (BFD32_BACKENDS): Add elf32-rx.lo.
        (BFD32_BACKENDS_CFILES): Add elf32-rx.c.
        * archures.c (bfd_architecture): Add bfd_arch_rx and bfd_mach_rx.
        Export bfd_rx_arch.
        (bfd_archures_list): Add bfd_rx_arch.
        * config.bfd: Add entry for rx-*-elf.
        * configure.in: Add entries for bfd_elf32_rx_le_vec and
        bfd_elf32_rx_be_vec.
        * reloc.c: Add RX relocations.
        * targets.c: Add RX target vectors.
        * Makefile.in: Regenerate.
        * bfd-in2.h: Regenerate.
        * configure: Regenerate.
        * libbfd.h: Regenerate.
        * cpu-rx.c: New file.
        * elf32-rx.c: New file.

binutils
        * readelf.c: Add support for RX target.
        * MAINTAINERS: Add DJ and NickC as maintainers for RX.

gas
        * Makefile.am: Add RX target.
        * configure.in: Likewise.
        * configure.tgt: Likewise.
        * read.c (do_repeat_with_expander): New function.
        * read.h: Provide a prototype for do_repeat_with_expander.
        * doc/Makefile.am: Add RX target documentation.
        * doc/all.texi: Likewise.
        * doc/as.texinfo: Likewise.
        * Makefile.in: Regenerate.
        * NEWS: Mention support for RX architecture.
        * configure: Regenerate.
        * doc/Makefile.in: Regenerate.
        * config/rx-defs.h: New file.
        * config/rx-parse.y: New file.
        * config/tc-rx.h: New file.
        * config/tc-rx.c: New file.
        * doc/c-rx.texi: New file.

gas/testsuite
        * gas/rx: New directory.
        * gas/rx/*: New set of test cases.
        * gas/elf/section2.e-rx: New expected output file.
        * gas/all/gas.exp: Add support for RX target.
        * gas/elf/elf.exp: Likewise.
        * gas/lns/lns.exp: Likewise.
        * gas/macros/macros.exp: Likewise.

include
        * dis-asm.h: Add prototype for print_insn_rx.

include/elf
        * rx.h: New file.

include/opcode
        * rx.h: New file.

ld
        * Makefile.am: Add rules to build RX emulation.
        * configure.tgt: Likewise.
        * NEWS: Mention support for RX architecture.
        * Makefile.in: Regenerate.
        * emulparams/elf32rx.sh: New file.
        * emultempl/rxelf.em: New file.

opcodes
        * Makefile.am: Add RX files.
        * configure.in: Add support for RX target.
        * disassemble.c: Likewise.
        * Makefile.in: Regenerate.
        * configure: Regenerate.
        * opc2c.c: New file.
        * rx-decode.c: New file.
        * rx-decode.opc: New file.
        * rx-dis.c: New file.
@
text
@d612 1
d643 1
@


1.242
log
@bfd/:
2009-09-07  Tristan Gingold  <gingold@@adacore.com>

	* bfd.m4 (BFD_HAVE_TIME_TYPE_MEMBER,
	BFD_HAVE_SYS_STAT_TYPE_MEMBER): Moved to gas/acinclude.m4
	* configure.in: Move tests for tm_gmtoff, st_mtim.tv_sec and
	st_mtim.tv_nsec to gas/configure.in
	(bfd_elf64_ia64_vms_vec): Remove vmsutil.lo
	* configure: Regenerate.
	* config.in: Regenerate.
	* vmsutil.c: Moved to gas/config/te-vms.c
	* vmsutil.h: Removed.
	* Makefile.am (BFD32_BACKENDS_CFILES): Remove vmsutil.c
	(BFD32_BACKENDS): Remove vmsutil.lo
	* Makefile.in: Regenerate.

gas/:
2009-09-07  Tristan Gingold  <gingold@@adacore.com>

	* Makefile.am (TARG_ENV_CFILES): New variable.  Set to te-vms.c
	(POTFILES): Add $(TARG_ENV_CFILES) in definition.
	(EXTRA_as_new_SOURCES): Ditto.
	* Makefile: Regenerate.
	* acinclude.m4 (BFD_HAVE_TIME_TYPE_MEMBER,
	BFD_HAVE_SYS_STAT_TYPE_MEMBER): New macro created from bfd/bfd.m4.
	* configure.in: Add Tests for tm_gmtoff, st_mtim.tv_sec and
	st_mtim.tv_nsec (from bfd/configure.in).  Check for time.h and
	sys/stat.h headers.
	Add te-vms.o in extra_objects if te_file is vms.
	* configure: Regenerate.
	* config.in: Regenerate.
	* config/te-vms.c: New file, from bfd/vmsutil.c
	(vms_dwarf2_file_time_name, vms_dwarf2_file_size_name)
	(vms_dwarf2_file_name): New functions.
	(vms_file_stats_name): Make it static, add a dirname parameter to
	locally create the full pathname.
	* config/te-vms.h: Add a copyright header.
	Declare the above functions.
	(DWARF2_FILE_TIME_NAME, DWARF2_FILE_SIZE_NAME, DWARF2_FILE_NAME): Use
	the above functions in the definition.
	* makefile.vms (OBJS): Add te-vms.obj.
	(te-vms.obj): Create a specific target.
	* configure.com: Create targ-env.h using a per target value.
	Compile te-vms.c for ia64.
@
text
@d123 1
d195 1
d312 1
d496 1
@


1.241
log
@Do not create $(bfdlibdir) and $(bfdincludedir) if !INSTALL_LIBBFD.

opcodes/:
	* Makefile.am (bfdlibdir, bfdincludedir): Move definition ...
	[INSTALL_LIBBFD]: ... here, ...
	[INSTALL_LIBBFD]: ... and empty overrides here.
	[!INSTALL_LIBBFD]: (rpath_bfdlibdir): New variable.
	[!INSTALL_LIBBFD] (libbfd_la_LDFLAGS): Use it.
	* Makefile.in: Regenerate.
	* configure: Regenerate.

bfd/:
	* acinclude.m4 (AM_INSTALL_LIBBFD): Call AM_SUBST_NOTMAKE for
	bfdlibdir and bfdincludedir.
	* Makefile.am (bfdlibdir, bfdincludedir): Move definition ...
	[INSTALL_LIBBFD]: ... here, ...
	[INSTALL_LIBBFD]: ... and empty overrides here.
	[!INSTALL_LIBBFD]: (rpath_bfdlibdir): New variable.
	[!INSTALL_LIBBFD] (libbfd_la_LDFLAGS): Use it.
	* Makefile.in: Regenerate.
	* configure: Regenerate.

bfd/doc/:
	* Makefile.in: Regenerate.
@
text
@a392 1
	vmsutil.lo \
a574 1
	vmsutil.c \
@


1.241.2.1
log
@bfd/:
2009-09-07  Tristan Gingold  <gingold@@adacore.com>

	* bfd.m4 (BFD_HAVE_TIME_TYPE_MEMBER,
	BFD_HAVE_SYS_STAT_TYPE_MEMBER): Moved to gas/acinclude.m4
	* configure.in: Move tests for tm_gmtoff, st_mtim.tv_sec and
	st_mtim.tv_nsec to gas/configure.in
	(bfd_elf64_ia64_vms_vec): Remove vmsutil.lo
	* configure: Regenerate.
	* config.in: Regenerate.
	* vmsutil.c: Moved to gas/config/te-vms.c
	* vmsutil.h: Removed.
	* Makefile.am (BFD32_BACKENDS_CFILES): Remove vmsutil.c
	(BFD32_BACKENDS): Remove vmsutil.lo
	* Makefile.in: Regenerate.

gas/:
2009-09-07  Tristan Gingold  <gingold@@adacore.com>

	* Makefile.am (TARG_ENV_CFILES): New variable.  Set to te-vms.c
	(POTFILES): Add $(TARG_ENV_CFILES) in definition.
	(EXTRA_as_new_SOURCES): Ditto.
	* Makefile: Regenerate.
	* acinclude.m4 (BFD_HAVE_TIME_TYPE_MEMBER,
	BFD_HAVE_SYS_STAT_TYPE_MEMBER): New macro created from bfd/bfd.m4.
	* configure.in: Add Tests for tm_gmtoff, st_mtim.tv_sec and
	st_mtim.tv_nsec (from bfd/configure.in).  Check for time.h and
	sys/stat.h headers.
	Add te-vms.o in extra_objects if te_file is vms.
	* configure: Regenerate.
	* config.in: Regenerate.
	* config/te-vms.c: New file, from bfd/vmsutil.c
	(vms_dwarf2_file_time_name, vms_dwarf2_file_size_name)
	(vms_dwarf2_file_name): New functions.
	(vms_file_stats_name): Make it static, add a dirname parameter to
	locally create the full pathname.
	* config/te-vms.h: Add a copyright header.
	Declare the above functions.
	(DWARF2_FILE_TIME_NAME, DWARF2_FILE_SIZE_NAME, DWARF2_FILE_NAME): Use
	the above functions in the definition.
	* makefile.vms (OBJS): Add te-vms.obj.
	(te-vms.obj): Create a specific target.
	* configure.com: Create targ-env.h using a per target value.
	Compile te-vms.c for ia64.
@
text
@d393 1
d576 1
@


1.241.2.2
log
@bfd/
2009-10-16  Tristan Gingold  <gingold@@adacore.com>

	* configure.in: Bump version to 2.20
	* Makefile.am (RELEASE): Set.
	* configure, Makefile.in: Regenerate.
@
text
@d7 1
a7 1
RELEASE=y
@


1.241.2.3
log
@bfd/
2009-10-16  Tristan Gingold  <gingold@@adacore.com>

	* configure.in: Bump version to 2.20.0
	* Makefile.am (RELEASE): Unset.
	* configure, Makefile.in: Regenerate.
@
text
@d7 1
a7 1
# RELEASE=y
@


1.241.2.4
log
@bfd/
2010-03-01  Tristan Gingold  <gingold@@adacore.com>

	* configure.in: Bump version to 2.20.1
	* Makefile.am (RELEASE): Set.
	* configure, Makefile.in: Regenerate.
@
text
@d7 1
a7 1
RELEASE=y
@


1.241.2.5
log
@bfd/
2010-03-03  Tristan Gingold  <gingold@@adacore.com>

	* Makefile.am (RELEASE): Unset.
	* Makefile.in: Regenerate.
@
text
@d7 1
a7 1
# RELEASE=y
@


1.240
log
@Cleanups in binutils makefiles.

ld/:
	* Makefile.am (bin_PROGRAMS): Renamed from ...
	(noinst_PROGRAMS): ... this.
	(transform): Override, including the renaming of ld-new to ld.
	(install-exec-local): Installation of ld in $(bindir) not needed
	here any more.
	(AM_CPPFLAGS): Renamed from ...
	(INCLUDES): ... this.
	(MAINTAINERCLEANFILES): Add ld.1.
	* Makefile.in: Regenerate.

gold/:
	* Makefile.am (AM_CPPFLAGS): Renamed from ...
	(INCLUDES): ... this.
	* testsuite/Makefile.am (AUTOMAKE_OPTIONS): Add -Wno-portability.
	(AM_CPPFLAGS): Renamed from ...
	(INCLUDE): ... this.
	* Makefile.in, testsuite/Makefile.in: Regenerate.

bfd/:
	* Makefile.am (libbfd_la_LDFLAGS): Initialize early, to allow
	appending.
	[INSTALL_LIBBFD] (bfdlib_LTLIBRARIES, bfdinclude_HEADERS): Set
	only in this condition.
	[!INSTALL_LIBBFD] (noinst_LTLIBRARIES, libbfd_la_LDFLAGS): New,
	to build but not install libbfd.la in this condition.
	(install-bfdlibLTLIBRARIES, uninstall-bfdlibLTLIBRARIES)
	(install_libbfd, install_libbfd): Remove.
	* Makefile.in: Regenerate.

binutils/:
	* Makefile.am (AM_CPPFLAGS): Renamed from ...
	(INCLUDES): ... this.
	(bin2c$(EXEEXT_FOR_BUILD): Adjust rule.
	(installcheck-local): Renamed from ...
	(installcheck): ... this.
	* Makefile.in: Regenerate.

gas/:
	* Makefile.am (YFLAGS): Remove, not needed any more.
	(AM_CPPFLAGS): Renamed from ...
	(INCLUDES): ... this.
	* Makefile.in: Regenerate.

gprof/:
	* Makefile.am (AM_CPPFLAGS): Renamed from ...
	(INCLUDES): ... this.
	* Makefile.in: Regenerate.

opcodes/:
	* Makefile.am (libopcodes_la_LDFLAGS): Initialize early.
	[INSTALL_LIBBFD] (bfdlib_LTLIBRARIES): Set only in this condition.
	[INSTALL_LIBBFD] (bfdinclude_DATA): New.
	[!INSTALL_LIBBFD] (noinst_LTLIBRARIES): New.
	[!INSTALL_LIBBFD] (libopcodes_la_LDFLAGS): Ensure libopcodes.la
	is built shared even if it is not to be installed.
	(install-bfdlibLTLIBRARIES,uninstall-bfdlibLTLIBRARIES)
	(install_libopcodes, uninstall_libopcodes): Remove.
	(AM_CPPFLAGS): Renamed from ...
	(INCLUDES): ... this.
	* Makefile.in: Regenerate.
@
text
@a14 2
bfdlibdir = @@bfdlibdir@@
bfdincludedir = @@bfdincludedir@@
d18 2
d23 4
d28 1
a28 1
libbfd_la_LDFLAGS += -rpath $(bfdlibdir)
@


1.239
log
@dependency tracking in bfd

bfd/:
	* Makefile.am (AUTOMAKE_OPTIONS): Remove cygnus, instead use
	no-dist and foreign.
	(EXTRA_libbfd_la_SOURCES): New, list $(CFILES) to allow
	dependency tracking to work for them.
	(targets.lo, archures.lo, dwarf.lo): Rewrite to
	use automake dependency tracking mechanism.
	(MKDEP, DEP, DEP1, dep.sed, dep, dep-in, dep-am): Remove.
	(mkdep section): Remove.
	(BUILT_SOURCES): New, list $(BUILD_HFILES).
	* Makefile.in: Regenerate.
	* po/SRC-POTFILES.in, po/bfd.pot: Regenerate.
@
text
@d18 2
d21 5
d760 1
a760 1
libbfd_la_LDFLAGS = -release `cat libtool-soversion` @@SHARED_LDFLAGS@@
a871 30
install-bfdlibLTLIBRARIES: @@INSTALL_LIBBFD_TRUE@@install_libbfd
	@@$(NORMAL_INSTALL)

uninstall-bfdlibLTLIBRARIES: @@INSTALL_LIBBFD_TRUE@@uninstall_libbfd
	@@$(NORMAL_UNINSTALL)

.PHONY: install_libbfd uninstall_libbfd
install_libbfd: $(bfdlib_LTLIBRARIES) $(BFD_H)
	$(mkinstalldirs) $(DESTDIR)$(bfdlibdir)
	$(mkinstalldirs) $(DESTDIR)$(bfdincludedir)
	@@list='$(bfdlib_LTLIBRARIES)'; for p in $$list; do \
	  if test -f $$p; then \
	    echo "$(LIBTOOL)  --mode=install $(INSTALL) $$p $(DESTDIR)$(bfdlibdir)/$$p"; \
	    $(LIBTOOL)  --mode=install $(INSTALL) $$p $(DESTDIR)$(bfdlibdir)/$$p; \
	  else :; fi; \
	done
	$(INSTALL_DATA) $(BFD_H) $(DESTDIR)$(bfdincludedir)/bfd.h
	$(INSTALL_DATA) $(INCDIR)/ansidecl.h $(DESTDIR)$(bfdincludedir)/ansidecl.h
	$(INSTALL_DATA) $(INCDIR)/symcat.h $(DESTDIR)$(bfdincludedir)/symcat.h
	$(INSTALL_DATA) $(INCDIR)/bfdlink.h $(DESTDIR)$(bfdincludedir)/bfdlink.h

uninstall_libbfd:
	list='$(bfdlib_LTLIBRARIES)'; for p in $$list; do \
	  $(LIBTOOL)  --mode=uninstall rm -f $(DESTDIR)$(bfdlibdir)/$$p; \
	done
	rm -f $(DESTDIR)$(bfdincludedir)/bfd.h
	rm -f $(DESTDIR)$(bfdincludedir)/ansidecl.h
	rm -f $(DESTDIR)$(bfdincludedir)/symcat.h
	rm -f $(DESTDIR)$(bfdincludedir)/bfdlink.h

@


1.238
log
@Cleanups after the update to Autoconf 2.64, Automake 1.11.

/:
	* README-maintainer-mode: Point directly to upstream locations
	for autoconf, automake, libtool, gettext, instead of copies on
	sources.redhat.com.  Document required versions.
	* configure.ac: Do not substitute datarootdir, htmldir,
	pdfdir, docdir.  Do not process --with-datarootdir,
	--with-htmldir, --with-pdfdir, --with-docdir.
	* configure: Regenerate.

gdb/:
	* CONTRIBUTE: Bump documented Autoconf version.
	* configure.ac: Do not substitute datarootdir, htmldir,
	pdfdir, docdir.  Do not process --with-datarootdir,
	--with-htmldir, --with-pdfdir, --with-docdir.
	* configure: Regenerate.

gdb/doc/:
	* gdbint.texinfo (Releasing GDB): Point to
	README-maintainer-mode file for required autoconf version.
	* configure.ac: Do not substitute datarootdir, htmldir,
	pdfdir, docdir.  Do not process --with-datarootdir,
	--with-htmldir, --with-pdfdir, --with-docdir.
	* configure: Regenerate.

gprof/:
	* Makefile.am (pdf__strip_dir, install-pdf, install-pdf-am)
	(install-pdf-recursive, html__strip_dir, install-html)
	(install-html-am, install-html-recursive): Remove.
	* Makefile.in: Regenerate.

opcodes/:
	* Makefile.am (install-pdf, install-html): Remove.
	* Makefile.in: Regenerate.

gas/:
	* Makefile.am (install-pdf, install-pdf-recursive, install-html)
	(install-html-recursive): Remove.
	* Makefile.in: Regenerate.
	* doc/Makefile.am (pdf__strip_dir, install-pdf, install-pdf-am)
	(html__strip_dir, install-html, install-html-am): Remove.
	* doc/Makefile.in: Regenerate.

ld/:
	* Makefile.am (pdf__strip_dir, install-pdf, install-pdf-am)
	(install-pdf-recursive, html__strip_dir, install-html)
	(install-html-am, install-html-recursive): Remove.
	* Makefile.in: Regenerate.

binutils/:
	* Makefile.am (install-pdf, install-pdf-recursive, install-html)
	(install-html-recursive): Remove.
	* Makefile.in: Regenerate.
	* doc/Makefile.am (pdf__strip_dir, install-pdf, install-pdf-am)
	(html__strip_dir, install-html, install-html-am): Remove.
	* doc/Makefile.in: Regenerate.

bfd/:
	* Makefile.am (datarootdir, docdir, htmldor, pdfdir)
	(install-pdf, install-pdf-recursive, install-html)
	(install-html-recursive): Remove.
	* Makefile.in: Regenerate.

bfd/doc/:
	* Makefile.am (pdf__strip_dir, install-pdf, install-pdf-am)
	(html__strip_dir, install-html, install-html-am): Remove.
	* Makefile.in: Regenerate.
@
text
@d3 1
a3 1
AUTOMAKE_OPTIONS = 1.9 cygnus
a10 1
MKDEP = gcc -MM
d703 3
d747 2
d750 1
d786 10
a795 1
	$(LIBTOOL) --mode=compile $(COMPILE) -c $(TDEFAULTS) $(srcdir)/targets.c
d798 10
a807 1
	$(LIBTOOL) --mode=compile $(COMPILE) -c $(TDEFAULTS) $(srcdir)/archures.c
d810 10
a819 1
	$(LIBTOOL) --mode=compile $(COMPILE) -c -DDEBUGDIR=\"$(DEBUGDIR)\" $(srcdir)/dwarf2.c
a894 45
# Have to get rid of DEP1 here so that "$?" later includes all of $(CFILES).
DEP: dep.sed $(CFILES) $(HFILES) bfd.h
	rm -f DEP1
	$(MAKE) MKDEP="$(MKDEP)" DEP1
	echo '# IF YOU PUT ANYTHING HERE IT WILL GO AWAY' >> DEP1
	if grep ' /' DEP1 > /dev/null 2> /dev/null; then \
	  echo 'make DEP failed!'; exit 1; \
	else \
	  mv -f DEP1 $@@; \
	fi

DEP1: $(CFILES)
	echo '# DO NOT DELETE THIS LINE -- mkdep uses it.' > DEP2
	echo '# DO NOT PUT ANYTHING AFTER THIS LINE, IT WILL GO AWAY.' >> DEP2
	for f in $?; do \
	  $(MKDEP) $(INCLUDES) $(CFLAGS) $$f > DEPA; \
	  sed -n -e '1s/\.o: .*/.lo: \\/p' -e q < DEPA >> DEP2; \
	  sed -e '1s/.*: //' -f dep.sed < DEPA | \
	    LC_ALL=C sort | LC_ALL=C uniq | \
	    sed -e 's/^[AB]/  /' -e '$$s/ \\$$//' >> DEP2; \
	done
	rm -f DEPA
	mv -f DEP2 $@@

dep.sed: dep-in.sed config.status
	sed <$(srcdir)/dep-in.sed >dep.sed	\
		-e 's!@@BFD_H@@!$(BFD_H)!'	\
		-e 's!@@SRCDIR@@!$(srcdir)!'	\
		-e 's!@@TOPDIR@@!'`echo $(srcdir) | sed -e s,/bfd$$,,`'!'

dep: DEP
	sed -e '/^..DO NOT DELETE THIS LINE/,$$d' < Makefile > tmp-Makefile
	cat DEP >> tmp-Makefile
	$(SHELL) $(srcdir)/../move-if-change tmp-Makefile Makefile

dep-in: DEP
	sed -e '/^..DO NOT DELETE THIS LINE/,$$d' < $(srcdir)/Makefile.in > tmp-Makefile.in
	cat DEP >> tmp-Makefile.in
	$(SHELL) $(srcdir)/../move-if-change tmp-Makefile.in $(srcdir)/Makefile.in

dep-am: DEP
	sed -e '/^..DO NOT DELETE THIS LINE/,$$d' < $(srcdir)/Makefile.am > tmp-Makefile.am
	cat DEP >> tmp-Makefile.am
	$(SHELL) $(srcdir)/../move-if-change tmp-Makefile.am $(srcdir)/Makefile.am

a979 3041

# What appears below is generated by a hacked mkdep using gcc -MM.

# DO NOT DELETE THIS LINE -- mkdep uses it.
# DO NOT PUT ANYTHING AFTER THIS LINE, IT WILL GO AWAY.
archive.lo: \
  archive.c \
  $(INCDIR)/aout/ar.h \
  $(INCDIR)/aout/ranlib.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/libiberty.h \
  $(INCDIR)/safe-ctype.h
archures.lo: \
  archures.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/safe-ctype.h
bfd.lo: \
  bfd.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/ecoff.h \
  $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/sym.h \
  $(INCDIR)/demangle.h \
  $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/libiberty.h \
  $(INCDIR)/safe-ctype.h \
  bfdver.h \
  elf-bfd.h \
  libcoff.h \
  libecoff.h
bfdio.lo: \
  bfdio.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
bfdwin.lo: \
  bfdwin.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cache.lo: \
  cache.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/libiberty.h
coffgen.lo: \
  coffgen.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/internal.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  libcoff.h
corefile.lo: \
  corefile.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
format.lo: \
  format.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
init.lo: \
  init.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
libbfd.lo: \
  libbfd.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
opncls.lo: \
  opncls.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/libiberty.h \
  $(INCDIR)/objalloc.h
reloc.lo: \
  reloc.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
section.lo: \
  section.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
syms.lo: \
  syms.c \
  $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/safe-ctype.h
targets.lo: \
  targets.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/fnmatch.h \
  $(INCDIR)/hashtab.h \
  targmatch.h
hash.lo: \
  hash.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/libiberty.h \
  $(INCDIR)/objalloc.h
linker.lo: \
  linker.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  genlink.h
srec.lo: \
  srec.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/libiberty.h \
  $(INCDIR)/safe-ctype.h
binary.lo: \
  binary.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/safe-ctype.h
tekhex.lo: \
  tekhex.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/libiberty.h
ihex.lo: \
  ihex.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/libiberty.h \
  $(INCDIR)/safe-ctype.h
stabs.lo: \
  stabs.c \
  $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/safe-ctype.h
stab-syms.lo: \
  stab-syms.c \
  $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab.def \
  $(INCDIR)/bfdlink.h \
  libaout.h
merge.lo: \
  merge.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/libiberty.h
dwarf2.lo: \
  dwarf2.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/dwarf2.h \
  $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/libiberty.h \
  elf-bfd.h
simple.lo: \
  simple.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
compress.lo: \
  compress.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
verilog.lo: \
  verilog.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/libiberty.h \
  $(INCDIR)/safe-ctype.h
archive64.lo: \
  archive64.c \
  $(INCDIR)/aout/ar.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-alpha.lo: \
  cpu-alpha.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-arc.lo: \
  cpu-arc.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-arm.lo: \
  cpu-arm.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/libiberty.h
cpu-avr.lo: \
  cpu-avr.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-bfin.lo: \
  cpu-bfin.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-cr16.lo: \
  cpu-cr16.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-cr16c.lo: \
  cpu-cr16c.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-cris.lo: \
  cpu-cris.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-crx.lo: \
  cpu-crx.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-d10v.lo: \
  cpu-d10v.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-d30v.lo: \
  cpu-d30v.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-dlx.lo: \
  cpu-dlx.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-fr30.lo: \
  cpu-fr30.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-frv.lo: \
  cpu-frv.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-h8300.lo: \
  cpu-h8300.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-h8500.lo: \
  cpu-h8500.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-hppa.lo: \
  cpu-hppa.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-i370.lo: \
  cpu-i370.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-i386.lo: \
  cpu-i386.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-l1om.lo: \
  cpu-l1om.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-i860.lo: \
  cpu-i860.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-i960.lo: \
  cpu-i960.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-ia64.lo: \
  cpu-ia64.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/opcode/ia64.h \
  $(srcdir)/../opcodes/ia64-opc.h \
  cpu-ia64-opc.c
cpu-ip2k.lo: \
  cpu-ip2k.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-iq2000.lo: \
  cpu-iq2000.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-lm32.lo: \
  cpu-lm32.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-m10200.lo: \
  cpu-m10200.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-m10300.lo: \
  cpu-m10300.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-m32c.lo: \
  cpu-m32c.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-m32r.lo: \
  cpu-m32r.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-m68hc11.lo: \
  cpu-m68hc11.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-m68hc12.lo: \
  cpu-m68hc12.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-m68k.lo: \
  cpu-m68k.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/opcode/m68k.h
cpu-m88k.lo: \
  cpu-m88k.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-maxq.lo: \
  cpu-maxq.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-mcore.lo: \
  cpu-mcore.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-mep.lo: \
  cpu-mep.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-microblaze.lo: \
  cpu-microblaze.c $\
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-mips.lo: \
  cpu-mips.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-mmix.lo: \
  cpu-mmix.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-moxie.lo: \
  cpu-moxie.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-msp430.lo: \
  cpu-msp430.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-mt.lo: \
  cpu-mt.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-ns32k.lo: \
  cpu-ns32k.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  ns32k.h
cpu-openrisc.lo: \
  cpu-openrisc.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-or32.lo: \
  cpu-or32.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-pdp11.lo: \
  cpu-pdp11.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-pj.lo: \
  cpu-pj.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-plugin.lo: \
  cpu-plugin.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-powerpc.lo: \
  cpu-powerpc.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-rs6000.lo: \
  cpu-rs6000.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-s390.lo: \
  cpu-s390.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-score.lo: \
  cpu-score.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-sh.lo: \
  cpu-sh.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(srcdir)/../opcodes/sh-opc.h
cpu-sparc.lo: \
  cpu-sparc.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-spu.lo: \
  cpu-spu.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-tic30.lo: \
  cpu-tic30.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-tic4x.lo: \
  cpu-tic4x.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-tic54x.lo: \
  cpu-tic54x.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-tic80.lo: \
  cpu-tic80.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-v850.lo: \
  cpu-v850.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/safe-ctype.h
cpu-vax.lo: \
  cpu-vax.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-w65.lo: \
  cpu-w65.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-we32k.lo: \
  cpu-we32k.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-xc16x.lo: \
  cpu-xc16x.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-xstormy16.lo: \
  cpu-xstormy16.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-xtensa.lo: \
  cpu-xtensa.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-z80.lo: \
  cpu-z80.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-z8k.lo: \
  cpu-z8k.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
aout-adobe.lo: \
  aout-adobe.c \
  $(INCDIR)/aout/adobe.h \
  $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  libaout.h
aout-arm.lo: \
  aout-arm.c \
  $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/ar.h \
  $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/safe-ctype.h \
  aout-target.h \
  aoutx.h \
  libaout.h
aout-cris.lo: \
  aout-cris.c \
  $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/ar.h \
  $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/safe-ctype.h \
  aout-target.h \
  aout32.c \
  aoutx.h \
  libaout.h
aout-ns32k.lo: \
  aout-ns32k.c \
  $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/ar.h \
  $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/safe-ctype.h \
  aoutx.h \
  libaout.h \
  ns32k.h
aout-sparcle.lo: \
  aout-sparcle.c \
  $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/ar.h \
  $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/sun4.h \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  aout-target.h \
  aoutf1.h \
  libaout.h
aout-tic30.lo: \
  aout-tic30.c \
  $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/ar.h \
  $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/safe-ctype.h \
  aoutx.h \
  libaout.h
aout0.lo: \
  aout0.c \
  $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/ar.h \
  $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/sun4.h \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  aout-target.h \
  aoutf1.h \
  libaout.h
aout32.lo: \
  aout32.c \
  $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/ar.h \
  $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/safe-ctype.h \
  aoutx.h \
  libaout.h
armnetbsd.lo: \
  armnetbsd.c \
  $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/ar.h \
  $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  aout-target.h \
  libaout.h \
  netbsd.h
bout.lo: \
  bout.c \
  $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/bout.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/libiberty.h \
  genlink.h \
  libaout.h
cf-i386lynx.lo: \
  cf-i386lynx.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/i386.h \
  $(INCDIR)/coff/internal.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  coff-i386.c \
  coffcode.h \
  coffswap.h \
  libcoff.h
cf-sparclynx.lo: \
  cf-sparclynx.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/sparc.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  coff-sparc.c \
  coffcode.h \
  coffswap.h \
  libcoff.h
coff-apollo.lo: \
  coff-apollo.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/apollo.h \
  $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  coffcode.h \
  coffswap.h \
  libcoff.h
coff-arm.lo: \
  coff-arm.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/arm.h \
  $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  coffcode.h \
  coffswap.h \
  libcoff.h
coff-aux.lo: \
  coff-aux.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/aux-coff.h \
  $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/m68k.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  coff-m68k.c \
  coffcode.h \
  coffswap.h \
  libcoff.h
coff-go32.lo: \
  coff-go32.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/i386.h \
  $(INCDIR)/coff/internal.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  coff-i386.c \
  coffcode.h \
  coffswap.h \
  libcoff.h
coff-h8300.lo: \
  coff-h8300.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/h8300.h \
  $(INCDIR)/coff/internal.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/libiberty.h \
  coffcode.h \
  coffswap.h \
  genlink.h \
  libcoff.h
coff-h8500.lo: \
  coff-h8500.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/h8500.h \
  $(INCDIR)/coff/internal.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  coffcode.h \
  coffswap.h \
  libcoff.h
coff-i386.lo: \
  coff-i386.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/i386.h \
  $(INCDIR)/coff/internal.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  coffcode.h \
  coffswap.h \
  libcoff.h
coff-i860.lo: \
  coff-i860.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/i860.h \
  $(INCDIR)/coff/internal.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  coffcode.h \
  coffswap.h \
  libcoff.h
coff-i960.lo: \
  coff-i960.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/i960.h \
  $(INCDIR)/coff/internal.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  coffcode.h \
  coffswap.h \
  libcoff.h
coff-m68k.lo: \
  coff-m68k.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/m68k.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  coffcode.h \
  coffswap.h \
  libcoff.h
coff-m88k.lo: \
  coff-m88k.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/m88k.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  coffcode.h \
  coffswap.h \
  libcoff.h
coff-maxq.lo: \
  coff-maxq.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/maxq.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/libiberty.h \
  coffcode.h \
  coffswap.h \
  libcoff.h
coff-mips.lo: \
  coff-mips.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/ecoff.h \
  $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/mips.h \
  $(INCDIR)/coff/sym.h \
  $(INCDIR)/coff/symconst.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  coffswap.h \
  ecoffswap.h \
  libcoff.h \
  libecoff.h
coff-or32.lo: \
  coff-or32.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/or32.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  coffcode.h \
  coffswap.h \
  libcoff.h
coff-rs6000.lo: \
  coff-rs6000.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/rs6000.h \
  $(INCDIR)/coff/xcoff.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  coffcode.h \
  coffswap.h \
  libcoff.h \
  libxcoff.h
coff-sh.lo: \
  coff-sh.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/sh.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/libiberty.h \
  coffcode.h \
  coffswap.h \
  libcoff.h
coff-sparc.lo: \
  coff-sparc.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/sparc.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  coffcode.h \
  coffswap.h \
  libcoff.h
coff-stgo32.lo: \
  coff-stgo32.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/go32exe.h \
  $(INCDIR)/coff/i386.h \
  $(INCDIR)/coff/internal.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  coff-i386.c \
  coffcode.h \
  coffswap.h \
  go32stub.h \
  libcoff.h
coff-svm68k.lo: \
  coff-svm68k.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/m68k.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  coff-m68k.c \
  coffcode.h \
  coffswap.h \
  libcoff.h
coff-tic30.lo: \
  coff-tic30.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/tic30.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  coffcode.h \
  coffswap.h \
  libcoff.h
coff-tic4x.lo: \
  coff-tic4x.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/ti.h \
  $(INCDIR)/coff/tic4x.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  coffcode.h \
  coffswap.h \
  libcoff.h
coff-tic54x.lo: \
  coff-tic54x.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/ti.h \
  $(INCDIR)/coff/tic54x.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  coffcode.h \
  coffswap.h \
  libcoff.h
coff-tic80.lo: \
  coff-tic80.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/tic80.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  coffcode.h \
  coffswap.h \
  libcoff.h
coff-u68k.lo: \
  coff-u68k.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/m68k.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  coff-m68k.c \
  coffcode.h \
  coffswap.h \
  libcoff.h
coff-w65.lo: \
  coff-w65.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/w65.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  coffcode.h \
  coffswap.h \
  libcoff.h
coff-we32k.lo: \
  coff-we32k.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/we32k.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  coffcode.h \
  coffswap.h \
  libcoff.h
coff-z80.lo: \
  coff-z80.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/z80.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  coffcode.h \
  coffswap.h \
  libcoff.h
coff-z8k.lo: \
  coff-z8k.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/z8k.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  coffcode.h \
  coffswap.h \
  libcoff.h
cofflink.lo: \
  cofflink.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/internal.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/safe-ctype.h \
  libcoff.h
dwarf1.lo: \
  dwarf1.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/dwarf.h \
  $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/libiberty.h \
  elf-bfd.h
ecoff.lo: \
  ecoff.c \
  $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/ar.h \
  $(INCDIR)/aout/ranlib.h \
  $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/ecoff.h \
  $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/sym.h \
  $(INCDIR)/coff/symconst.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/libiberty.h \
  libaout.h \
  libcoff.h \
  libecoff.h
ecofflink.lo: \
  ecofflink.c \
  $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/ecoff.h \
  $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/sym.h \
  $(INCDIR)/coff/symconst.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/objalloc.h \
  libcoff.h \
  libecoff.h
elf-attrs.lo: \
  elf-attrs.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/libiberty.h \
  elf-bfd.h
elf-eh-frame.lo: \
  elf-eh-frame.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/dwarf2.h \
  $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  elf-bfd.h
elf-ifunc.lo: \
  elf-ifunc.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/libiberty.h \
  $(INCDIR)/objalloc.h \
  $(INCDIR)/safe-ctype.h \
  elf-bfd.h
elf-m10200.lo: \
  elf-m10200.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  elf-bfd.h \
  elf32-target.h
elf-m10300.lo: \
  elf-m10300.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/mn10300.h \
  $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/libiberty.h \
  elf-bfd.h \
  elf32-target.h
elf-strtab.lo: \
  elf-strtab.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/libiberty.h \
  elf-bfd.h
elf-vxworks.lo: \
  elf-vxworks.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/vxworks.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  elf-bfd.h \
  elf-vxworks.h
elf.lo: \
  elf.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/libiberty.h \
  $(INCDIR)/safe-ctype.h \
  elf-bfd.h
elf32-am33lin.lo: \
  elf32-am33lin.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/mn10300.h \
  $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/libiberty.h \
  elf-bfd.h \
  elf-m10300.c \
  elf32-target.h
elf32-arc.lo: \
  elf32-arc.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/arc.h \
  $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/libiberty.h \
  elf-bfd.h \
  elf32-target.h
elf32-arm.lo: \
  elf32-arm.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/arm.h \
  $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/libiberty.h \
  elf-bfd.h \
  elf-vxworks.h \
  elf32-target.h
elf32-avr.lo: \
  elf32-avr.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/avr.h \
  $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  elf-bfd.h \
  elf32-avr.h \
  elf32-target.h
elf32-bfin.lo: \
  elf32-bfin.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/dwarf2.h \
  $(INCDIR)/elf/bfin.h \
  $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  elf-bfd.h \
  elf32-target.h
elf32-cr16.lo: \
  elf32-cr16.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/cr16.h \
  $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/libiberty.h \
  elf-bfd.h \
  elf32-target.h
elf32-cr16c.lo: \
  elf32-cr16c.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/cr16c.h \
  $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  elf-bfd.h \
  elf32-target.h
elf32-cris.lo: \
  elf32-cris.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/cris.h \
  $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  elf-bfd.h \
  elf32-target.h
elf32-crx.lo: \
  elf32-crx.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/crx.h \
  $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  elf-bfd.h \
  elf32-target.h
elf32-d10v.lo: \
  elf32-d10v.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/d10v.h \
  $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  elf-bfd.h \
  elf32-target.h
elf32-d30v.lo: \
  elf32-d30v.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/d30v.h \
  $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  elf-bfd.h \
  elf32-target.h
elf32-dlx.lo: \
  elf32-dlx.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/dlx.h \
  $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  elf-bfd.h \
  elf32-target.h
elf32-fr30.lo: \
  elf32-fr30.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/fr30.h \
  $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  elf-bfd.h \
  elf32-target.h
elf32-frv.lo: \
  elf32-frv.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/dwarf2.h \
  $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/frv.h \
  $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  elf-bfd.h \
  elf32-target.h
elf32-gen.lo: \
  elf32-gen.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  elf-bfd.h \
  elf32-target.h
elf32-h8300.lo: \
  elf32-h8300.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/h8.h \
  $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  elf-bfd.h \
  elf32-target.h
elf32-hppa.lo: \
  elf32-hppa.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/hppa.h \
  $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  elf-bfd.h \
  elf-hppa.h \
  elf32-hppa.h \
  elf32-target.h \
  libhppa.h
elf32-i370.lo: \
  elf32-i370.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/i370.h \
  $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  elf-bfd.h \
  elf32-target.h
elf32-i386.lo: \
  elf32-i386.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/i386.h \
  $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/objalloc.h \
  bfd_stdint.h \
  elf-bfd.h \
  elf-vxworks.h \
  elf32-target.h
elf32-i860.lo: \
  elf32-i860.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/i860.h \
  $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  elf-bfd.h \
  elf32-target.h
elf32-i960.lo: \
  elf32-i960.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/i960.h \
  $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  elf-bfd.h \
  elf32-target.h
elf32-ip2k.lo: \
  elf32-ip2k.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/ip2k.h \
  $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  elf-bfd.h \
  elf32-target.h
elf32-iq2000.lo: \
  elf32-iq2000.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/iq2000.h \
  $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  elf-bfd.h \
  elf32-target.h
elf32-lm32.lo: \
  elf32-lm32.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/lm32.h \
  $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  elf-bfd.h \
  elf32-target.h
elf32-m32c.lo: \
  elf32-m32c.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/m32c.h \
  $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/libiberty.h \
  elf-bfd.h \
  elf32-target.h
elf32-m32r.lo: \
  elf32-m32r.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/m32r.h \
  $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  elf-bfd.h \
  elf32-target.h
elf32-m68hc11.lo: \
  elf32-m68hc11.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/m68hc11.h \
  $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/opcode/m68hc11.h \
  elf-bfd.h \
  elf32-m68hc1x.h \
  elf32-target.h
elf32-m68hc12.lo: \
  elf32-m68hc12.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/m68hc11.h \
  $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/opcode/m68hc11.h \
  elf-bfd.h \
  elf32-m68hc1x.h \
  elf32-target.h
elf32-m68hc1x.lo: \
  elf32-m68hc1x.c \
  $(INCDIR)/alloca-conf.h \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/m68hc11.h \
  $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/opcode/m68hc11.h \
  elf-bfd.h \
  elf32-m68hc1x.h
elf32-m68k.lo: \
  elf32-m68k.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/m68k.h \
  $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/opcode/m68k.h \
  elf-bfd.h \
  elf32-target.h
elf32-m88k.lo: \
  elf32-m88k.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  elf-bfd.h \
  elf32-target.h
elf32-mcore.lo: \
  elf32-mcore.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/mcore.h \
  $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  elf-bfd.h \
  elf32-target.h
elf32-mep.lo: \
  elf32-mep.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/mep.h \
  $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/libiberty.h \
  elf-bfd.h \
  elf32-target.h
elf32-mips.lo: \
  elf32-mips.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/ecoff.h \
  $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/mips.h \
  $(INCDIR)/coff/sym.h \
  $(INCDIR)/coff/symconst.h \
  $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/mips.h \
  $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  ecoffswap.h \
  elf-bfd.h \
  elf-vxworks.h \
  elf32-target.h \
  elfxx-mips.h \
  genlink.h
elf32-moxie.lo: \
  elf32-moxie.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/moxie.h \
  $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  elf-bfd.h \
  elf32-target.h
elf32-msp430.lo: \
  elf32-msp430.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/msp430.h \
  $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/libiberty.h \
  elf-bfd.h \
  elf32-target.h
elf32-mt.lo: \
  elf32-mt.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/mt.h \
  $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  elf-bfd.h \
  elf32-target.h
elf32-openrisc.lo: \
  elf32-openrisc.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/openrisc.h \
  $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/libiberty.h \
  elf-bfd.h \
  elf32-target.h
elf32-or32.lo: \
  elf32-or32.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/or32.h \
  $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/libiberty.h \
  elf-bfd.h \
  elf32-target.h
elf32-pj.lo: \
  elf32-pj.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/pj.h \
  $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  elf-bfd.h \
  elf32-target.h
elf32-ppc.lo: \
  elf32-ppc.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/ppc.h \
  $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  elf-bfd.h \
  elf-vxworks.h \
  elf32-ppc.h \
  elf32-target.h
elf32-s390.lo: \
  elf32-s390.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/elf/s390.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  elf-bfd.h \
  elf32-target.h
elf32-sh-symbian.lo: \
  elf32-sh-symbian.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/elf/sh.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/libiberty.h \
  $(srcdir)/../opcodes/sh-opc.h \
  elf-bfd.h \
  elf-vxworks.h \
  elf32-sh-relocs.h \
  elf32-sh.c \
  elf32-target.h
elf32-sh.lo: \
  elf32-sh.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/elf/sh.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/libiberty.h \
  $(srcdir)/../opcodes/sh-opc.h \
  elf-bfd.h \
  elf-vxworks.h \
  elf32-sh-relocs.h \
  elf32-target.h
elf32-sh64-com.lo: \
  elf32-sh64-com.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/elf/sh.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(srcdir)/../opcodes/sh64-opc.h \
  elf-bfd.h \
  elf32-sh64.h
elf32-sh64.lo: \
  elf32-sh64.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/elf/sh.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/libiberty.h \
  $(srcdir)/../opcodes/sh-opc.h \
  $(srcdir)/../opcodes/sh64-opc.h \
  elf-bfd.h \
  elf-vxworks.h \
  elf32-sh-relocs.h \
  elf32-sh.c \
  elf32-sh64.h \
  elf32-target.h
elf32-sparc.lo: \
  elf32-sparc.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/elf/sparc.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/opcode/sparc.h \
  elf-bfd.h \
  elf-vxworks.h \
  elf32-target.h \
  elfxx-sparc.h
elf32-spu.lo: \
  elf32-spu.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/elf/spu.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/libiberty.h \
  elf-bfd.h \
  elf32-spu.h \
  elf32-target.h
elf32-v850.lo: \
  elf32-v850.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/elf/v850.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/libiberty.h \
  elf-bfd.h \
  elf32-target.h
elf32-vax.lo: \
  elf32-vax.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/elf/vax.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  elf-bfd.h \
  elf32-target.h
elf32-xc16x.lo: \
  elf32-xc16x.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/dwarf2.h \
  $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/elf/xc16x.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/libiberty.h \
  elf-bfd.h \
  elf32-target.h
elf32-xstormy16.lo: \
  elf32-xstormy16.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/elf/xstormy16.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/libiberty.h \
  elf-bfd.h \
  elf32-target.h
elf32-xtensa.lo: \
  elf32-xtensa.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/elf/xtensa.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/xtensa-config.h \
  $(INCDIR)/xtensa-isa.h \
  elf-bfd.h \
  elf32-target.h
elf32.lo: \
  elf32.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/libiberty.h \
  elf-bfd.h \
  elfcode.h \
  elfcore.h
elflink.lo: \
  elflink.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/libiberty.h \
  $(INCDIR)/objalloc.h \
  $(INCDIR)/safe-ctype.h \
  elf-bfd.h
elf32-microblaze.lo: \
  elf32-microblaze.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h \
  genlink.h \
  elf-bfd.h \
  $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/reloc-macros.h \
  elf32-target.h
elfxx-mips.lo: \
  elfxx-mips.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/ecoff.h \
  $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/mips.h \
  $(INCDIR)/coff/sym.h \
  $(INCDIR)/coff/symconst.h \
  $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/mips.h \
  $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/libiberty.h \
  elf-bfd.h \
  elf-vxworks.h \
  elfxx-mips.h
elfxx-sparc.lo: \
  elfxx-sparc.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/elf/sparc.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/libiberty.h \
  $(INCDIR)/opcode/sparc.h \
  elf-bfd.h \
  elf-vxworks.h \
  elfxx-sparc.h
epoc-pe-arm.lo: \
  epoc-pe-arm.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/arm.h \
  $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/pe.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  coff-arm.c \
  coffcode.h \
  libcoff.h \
  libpei.h \
  pe-arm.c \
  peicode.h
epoc-pei-arm.lo: \
  epoc-pei-arm.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/arm.h \
  $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/pe.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  coff-arm.c \
  coffcode.h \
  libcoff.h \
  libpei.h \
  pei-arm.c \
  peicode.h
hp300bsd.lo: \
  hp300bsd.c \
  $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/ar.h \
  $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  aout-target.h \
  libaout.h
hp300hpux.lo: \
  hp300hpux.c \
  $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/ar.h \
  $(INCDIR)/aout/hp300hpux.h \
  $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/safe-ctype.h \
  aout-target.h \
  aoutx.h \
  libaout.h
i386aout.lo: \
  i386aout.c \
  $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/ar.h \
  $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  aout-target.h \
  libaout.h
i386bsd.lo: \
  i386bsd.c \
  $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/ar.h \
  $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  aout-target.h \
  libaout.h
i386dynix.lo: \
  i386dynix.c \
  $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/ar.h \
  $(INCDIR)/aout/dynix3.h \
  $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/safe-ctype.h \
  aout-target.h \
  aoutx.h \
  libaout.h
i386freebsd.lo: \
  i386freebsd.c \
  $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/ar.h \
  $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  aout-target.h \
  freebsd.h \
  libaout.h
i386linux.lo: \
  i386linux.c \
  $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/ar.h \
  $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  aout-target.h \
  libaout.h
i386lynx.lo: \
  i386lynx.c \
  $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/ar.h \
  $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  aout-target.h \
  libaout.h
i386mach3.lo: \
  i386mach3.c \
  $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/ar.h \
  $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  aout-target.h \
  libaout.h
i386msdos.lo: \
  i386msdos.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  libaout.h
i386netbsd.lo: \
  i386netbsd.c \
  $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/ar.h \
  $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  aout-target.h \
  libaout.h \
  netbsd.h
i386os9k.lo: \
  i386os9k.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/os9k.h \
  libaout.h
ieee.lo: \
  ieee.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/ieee.h \
  $(INCDIR)/safe-ctype.h \
  libieee.h
m68k4knetbsd.lo: \
  m68k4knetbsd.c \
  $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/ar.h \
  $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  aout-target.h \
  libaout.h \
  netbsd.h
m68klinux.lo: \
  m68klinux.c \
  $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/ar.h \
  $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  aout-target.h \
  libaout.h
m68knetbsd.lo: \
  m68knetbsd.c \
  $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/ar.h \
  $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  aout-target.h \
  libaout.h \
  netbsd.h
m88kmach3.lo: \
  m88kmach3.c \
  $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/ar.h \
  $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  aout-target.h \
  libaout.h
m88kopenbsd.lo: \
  m88kopenbsd.c \
  $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/ar.h \
  $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  aout-target.h \
  libaout.h \
  netbsd.h
mach-o.lo: \
  mach-o.c \
  $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/libiberty.h \
  mach-o-target.c \
  mach-o.h
mach-o-i386.lo: \
  mach-o-i386.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/libiberty.h \
  mach-o-target.c \
  mach-o.h
mipsbsd.lo: \
  mipsbsd.c \
  $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/ar.h \
  $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  aout-target.h \
  libaout.h
newsos3.lo: \
  newsos3.c \
  $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/ar.h \
  $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  aout-target.h \
  libaout.h
nlm.lo: \
  nlm.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/nlm/common.h \
  $(INCDIR)/nlm/external.h \
  $(INCDIR)/nlm/internal.h \
  libnlm.h
nlm32-i386.lo: \
  nlm32-i386.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/nlm/common.h \
  $(INCDIR)/nlm/external.h \
  $(INCDIR)/nlm/i386-ext.h \
  $(INCDIR)/nlm/internal.h \
  libnlm.h \
  nlm-target.h \
  nlmswap.h
nlm32-ppc.lo: \
  nlm32-ppc.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/nlm/common.h \
  $(INCDIR)/nlm/external.h \
  $(INCDIR)/nlm/internal.h \
  $(INCDIR)/nlm/ppc-ext.h \
  libnlm.h \
  nlm-target.h \
  nlmswap.h
nlm32-sparc.lo: \
  nlm32-sparc.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/nlm/common.h \
  $(INCDIR)/nlm/external.h \
  $(INCDIR)/nlm/internal.h \
  $(INCDIR)/nlm/sparc32-ext.h \
  libnlm.h \
  nlm-target.h \
  nlmswap.h
nlm32.lo: \
  nlm32.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/nlm/common.h \
  $(INCDIR)/nlm/external.h \
  $(INCDIR)/nlm/internal.h \
  libnlm.h \
  nlmcode.h
ns32knetbsd.lo: \
  ns32knetbsd.c \
  $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/ar.h \
  $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  aout-target.h \
  libaout.h \
  netbsd.h
oasys.lo: \
  oasys.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/oasys.h \
  $(INCDIR)/safe-ctype.h \
  liboasys.h
pc532-mach.lo: \
  pc532-mach.c \
  $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/ar.h \
  $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  aout-target.h \
  libaout.h
pdp11.lo: \
  pdp11.c \
  $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/ar.h \
  $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/safe-ctype.h \
  aout-target.h \
  libaout.h
pe-arm-wince.lo: \
  pe-arm-wince.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/arm.h \
  $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/pe.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  coff-arm.c \
  coffcode.h \
  libcoff.h \
  libpei.h \
  pe-arm.c \
  peicode.h
pe-arm.lo: \
  pe-arm.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/arm.h \
  $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/pe.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  coff-arm.c \
  coffcode.h \
  libcoff.h \
  libpei.h \
  peicode.h
pe-i386.lo: \
  pe-i386.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/i386.h \
  $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/pe.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  coff-i386.c \
  coffcode.h \
  libcoff.h \
  libpei.h \
  peicode.h
pe-mcore.lo: \
  pe-mcore.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/mcore.h \
  $(INCDIR)/coff/pe.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  coff-mcore.c \
  coffcode.h \
  libcoff.h \
  libpei.h \
  peicode.h
pe-mips.lo: \
  pe-mips.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/mipspe.h \
  $(INCDIR)/coff/pe.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  coffcode.h \
  libcoff.h \
  libpei.h \
  peicode.h
pe-ppc.lo: \
  pe-ppc.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/pe.h \
  $(INCDIR)/coff/powerpc.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  coff-ppc.c \
  coffcode.h \
  libcoff.h \
  libpei.h \
  peicode.h
pe-sh.lo: \
  pe-sh.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/pe.h \
  $(INCDIR)/coff/sh.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/libiberty.h \
  coff-sh.c \
  coffcode.h \
  libcoff.h \
  libpei.h \
  peicode.h
pef.lo: \
  pef.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/libiberty.h \
  $(INCDIR)/safe-ctype.h \
  pef-traceback.h \
  pef.h
pei-arm-wince.lo: \
  pei-arm-wince.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/arm.h \
  $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/pe.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  coff-arm.c \
  coffcode.h \
  libcoff.h \
  libpei.h \
  pei-arm.c \
  peicode.h
pei-arm.lo: \
  pei-arm.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/arm.h \
  $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/pe.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  coff-arm.c \
  coffcode.h \
  libcoff.h \
  libpei.h \
  peicode.h
pei-i386.lo: \
  pei-i386.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/i386.h \
  $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/pe.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  coff-i386.c \
  coffcode.h \
  libcoff.h \
  libpei.h \
  peicode.h
pei-mcore.lo: \
  pei-mcore.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/mcore.h \
  $(INCDIR)/coff/pe.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  coff-mcore.c \
  coffcode.h \
  libcoff.h \
  libpei.h \
  peicode.h
pei-mips.lo: \
  pei-mips.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/mipspe.h \
  $(INCDIR)/coff/pe.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  coffcode.h \
  libcoff.h \
  libpei.h \
  pe-mips.c \
  peicode.h
pei-ppc.lo: \
  pei-ppc.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/pe.h \
  $(INCDIR)/coff/powerpc.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  coff-ppc.c \
  coffcode.h \
  libcoff.h \
  libpei.h \
  peicode.h
pei-sh.lo: \
  pei-sh.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/pe.h \
  $(INCDIR)/coff/sh.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/libiberty.h \
  coff-sh.c \
  coffcode.h \
  libcoff.h \
  libpei.h \
  peicode.h
plugin.lo: \
  plugin.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/libiberty.h \
  $(INCDIR)/plugin-api.h \
  plugin.h
ppcboot.lo: \
  ppcboot.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/safe-ctype.h
reloc16.lo: \
  reloc16.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/internal.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  genlink.h \
  libcoff.h
riscix.lo: \
  riscix.c \
  $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/ar.h \
  $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  aout-target.h \
  libaout.h
som.lo: \
  som.c \
  $(INCDIR)/alloca-conf.h \
  $(INCDIR)/filenames.h
sparclinux.lo: \
  sparclinux.c \
  $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/ar.h \
  $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  aout-target.h \
  libaout.h
sparclynx.lo: \
  sparclynx.c \
  $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/ar.h \
  $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/sun4.h \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  aout-target.h \
  libaout.h
sparcnetbsd.lo: \
  sparcnetbsd.c \
  $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/ar.h \
  $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  aout-target.h \
  libaout.h \
  netbsd.h
sunos.lo: \
  sunos.c \
  $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/ar.h \
  $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/sun4.h \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  aout-target.h \
  aoutf1.h \
  libaout.h
vax1knetbsd.lo: \
  vax1knetbsd.c \
  $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/ar.h \
  $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  aout-target.h \
  libaout.h \
  netbsd.h
vaxbsd.lo: \
  vaxbsd.c \
  $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/ar.h \
  $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  aout-target.h \
  libaout.h
vaxnetbsd.lo: \
  vaxnetbsd.c \
  $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/ar.h \
  $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  aout-target.h \
  libaout.h \
  netbsd.h
versados.lo: \
  versados.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/libiberty.h
vms-gsd.lo: \
  vms-gsd.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  vms.h
vms-hdr.lo: \
  vms-hdr.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/safe-ctype.h \
  bfdver.h \
  vms.h
vms-misc.lo: \
  vms-misc.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  vms.h
vms-tir.lo: \
  vms-tir.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  vms.h
vms.lo: \
  vms.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  vms.h
vmsutil.lo: \
  vmsutil.c \
  $(INCDIR)/filenames.h \
  vmsutil.h
xcofflink.lo: \
  xcofflink.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/xcoff.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/libiberty.h \
  libcoff.h \
  libxcoff.h
xsym.lo: \
  xsym.c \
  $(INCDIR)/alloca-conf.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  xsym.h
xtensa-isa.lo: \
  xtensa-isa.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/xtensa-isa-internal.h \
  $(INCDIR)/xtensa-isa.h
xtensa-modules.lo: \
  xtensa-modules.c \
  $(INCDIR)/xtensa-isa-internal.h \
  $(INCDIR)/xtensa-isa.h
aix5ppc-core.lo: \
  aix5ppc-core.c \
  $(INCDIR)/filenames.h
aout64.lo: \
  aout64.c \
  $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/ar.h \
  $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/safe-ctype.h \
  aoutx.h \
  libaout.h
coff-alpha.lo: \
  coff-alpha.c \
  $(INCDIR)/aout/ar.h \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/alpha.h \
  $(INCDIR)/coff/ecoff.h \
  $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/sym.h \
  $(INCDIR)/coff/symconst.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  coffswap.h \
  ecoffswap.h \
  libcoff.h \
  libecoff.h
coff-x86_64.lo: \
  coff-x86_64.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/pe.h \
  $(INCDIR)/coff/x86_64.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/libiberty.h \
  coffcode.h \
  coffswap.h \
  libcoff.h
coff64-rs6000.lo: \
  coff64-rs6000.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/rs6k64.h \
  $(INCDIR)/coff/xcoff.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  coffcode.h \
  coffswap.h \
  libcoff.h \
  libxcoff.h
demo64.lo: \
  demo64.c \
  $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/ar.h \
  $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/sun4.h \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  aout-target.h \
  aoutf1.h \
  libaout.h
elf32-score.lo: \
  elf32-score.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/elf/score.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/libiberty.h \
  elf-bfd.h \
  elf32-score.h \
  elf32-target.h
elf32-score7.lo: \
  elf32-score7.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/elf/score.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/libiberty.h \
  elf-bfd.h \
  elf32-score.h
elf64-alpha.lo: \
  elf64-alpha.c \
  $(INCDIR)/aout/ar.h \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/alpha.h \
  $(INCDIR)/coff/ecoff.h \
  $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/sym.h \
  $(INCDIR)/coff/symconst.h \
  $(INCDIR)/elf/alpha.h \
  $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  ecoffswap.h \
  elf-bfd.h \
  elf64-target.h \
  libcoff.h \
  libecoff.h
elf64-gen.lo: \
  elf64-gen.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  elf-bfd.h \
  elf64-target.h
elf64-hppa.lo: \
  elf64-hppa.c \
  $(INCDIR)/alloca-conf.h \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/hppa.h \
  $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  elf-bfd.h \
  elf-hppa.h \
  elf64-hppa.h \
  elf64-target.h \
  libhppa.h
elf64-mips.lo: \
  elf64-mips.c \
  $(INCDIR)/aout/ar.h \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/alpha.h \
  $(INCDIR)/coff/ecoff.h \
  $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/sym.h \
  $(INCDIR)/coff/symconst.h \
  $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/mips.h \
  $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  ecoffswap.h \
  elf-bfd.h \
  elf64-target.h \
  elfxx-mips.h \
  genlink.h
elf64-mmix.lo: \
  elf64-mmix.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/mmix.h \
  $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/opcode/mmix.h \
  elf-bfd.h \
  elf64-target.h
elf64-ppc.lo: \
  elf64-ppc.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/ppc64.h \
  $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  elf-bfd.h \
  elf64-ppc.h \
  elf64-target.h
elf64-s390.lo: \
  elf64-s390.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/elf/s390.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  elf-bfd.h \
  elf64-target.h
elf64-sh64.lo: \
  elf64-sh64.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/elf/sh.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  elf-bfd.h \
  elf64-target.h
elf64-sparc.lo: \
  elf64-sparc.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/elf/sparc.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/opcode/sparc.h \
  elf-bfd.h \
  elf64-target.h \
  elfxx-sparc.h
elf64-x86-64.lo: \
  elf64-x86-64.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/elf/x86-64.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/objalloc.h \
  bfd_stdint.h \
  elf-bfd.h \
  elf64-target.h
elf64.lo: \
  elf64.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/libiberty.h \
  elf-bfd.h \
  elfcode.h \
  elfcore.h
elfn32-mips.lo: \
  elfn32-mips.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/ecoff.h \
  $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/mips.h \
  $(INCDIR)/coff/sym.h \
  $(INCDIR)/coff/symconst.h \
  $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/mips.h \
  $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  ecoffswap.h \
  elf-bfd.h \
  elf32-target.h \
  elfxx-mips.h \
  genlink.h
mmo.lo: \
  mmo.c \
  $(INCDIR)/elf/mmix.h \
  $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/libiberty.h \
  $(INCDIR)/opcode/mmix.h
nlm32-alpha.lo: \
  nlm32-alpha.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/nlm/alpha-ext.h \
  $(INCDIR)/nlm/common.h \
  $(INCDIR)/nlm/external.h \
  $(INCDIR)/nlm/internal.h \
  libnlm.h \
  nlm-target.h \
  nlmswap.h
nlm64.lo: \
  nlm64.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/nlm/common.h \
  $(INCDIR)/nlm/external.h \
  $(INCDIR)/nlm/internal.h \
  libnlm.h \
  nlmcode.h
pe-x86_64.lo: \
  pe-x86_64.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/pe.h \
  $(INCDIR)/coff/x86_64.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/libiberty.h \
  coff-x86_64.c \
  coffcode.h \
  libcoff.h \
  libpei.h \
  peicode.h
pei-ia64.lo: \
  pei-ia64.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/ia64.h \
  $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/pe.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  coff-ia64.c \
  coffcode.h \
  libcoff.h \
  libpei.h \
  peicode.h
pei-x86_64.lo: \
  pei-x86_64.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/pe.h \
  $(INCDIR)/coff/x86_64.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/libiberty.h \
  coff-x86_64.c \
  coffcode.h \
  libcoff.h \
  libpei.h \
  peicode.h
aix386-core.lo: \
  aix386-core.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/i386.h \
  $(INCDIR)/coff/internal.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  libcoff.h
cisco-core.lo: \
  cisco-core.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
hpux-core.lo: \
  hpux-core.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
irix-core.lo: \
  irix-core.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
lynx-core.lo: \
  lynx-core.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
osf-core.lo: \
  osf-core.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
sco5-core.lo: \
  sco5-core.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  libaout.h
trad-core.lo: \
  trad-core.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  libaout.h
elf32-ia64.lo: \
  elf32-ia64.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/ia64.h \
  $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/objalloc.h \
  $(INCDIR)/opcode/ia64.h \
  elf-bfd.h \
  elf32-target.h
elf64-ia64.lo: \
  elf64-ia64.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/ia64.h \
  $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/objalloc.h \
  $(INCDIR)/opcode/ia64.h \
  elf-bfd.h \
  elf64-target.h
peigen.lo: \
  peigen.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/i386.h \
  $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/pe.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  libcoff.h \
  libpei.h
pepigen.lo: \
  pepigen.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/ia64.h \
  $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/pe.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  libcoff.h \
  libpei.h
pex64igen.lo: \
  pex64igen.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/pe.h \
  $(INCDIR)/coff/x86_64.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  libcoff.h \
  libpei.h
# IF YOU PUT ANYTHING HERE IT WILL GO AWAY
@


1.237
log
@        Add support for Xilinx MicroBlaze processor.

        * bfd/Makefile.am: Add cpu-microblaze.{lo,c}, elf32-microblaze.{lo,c}.
        * bfd/Makefile.in: Same.
        * bfd/archures.c: Add bfd_arch_microblaze.
        * bfd/bfd-in2.h: Regenerate.
        * bfd/config.bfd: Add microblaze target.
        * bfd/configure: Add bfd_elf32_microblaze_vec target.
        * bfd/configure.in: Same.
        * bfd/cpu-microblaze.c: New.
        * bfd/elf32-microblaze.c: New.
        * bfd/libbfd-in.h: Add prototype _bfd_dwarf2_fixup_section_debug_loc().
        * bfd/libbfd.h: Regenerate.
        * bfd/reloc.c: Add MICROBLAZE relocations.
        * bfd/section.c: Add struct relax_table and relax_count to section.
        * bfd/targets.c: Add bfd_elf32_microblaze_vec.
        * binutils/MAINTAINERS: Add self as maintainer.
        * binutils/readelf.c: Include elf/microblaze.h, add EM_MICROBLAZE &
        EM_MICROBLAZE_OLD to guess_is_rela(), dump_relocations(),
        get_machine_name().
        * config.sub: Add microblaze target.
        * configure: Same.
        * configure.ac: Same.
        * gas/Makefile.am: add microblaze to CPU_TYPES, config/tc-microblaze.c to
        TARGET_CPU_CFILES, config/tc-microblaze.h to TARGET_CPU_HFILES, add
        DEP_microblaze_elf target.
        * gas/Makefile.in: Same.
        * gas/config/tc-microblaze.c: Add MicroBlaze assembler.
        * gas/config/tc-microblaze.h: Add header for tc-microblaze.c.
        * gas/configure: Add microblaze target.
        * gas/configure.in: Same.
        * gas/configure.tgt: Same.
        * gas/doc/Makefile.am: Add c-microblaze.texi to CPU_DOCS.
        * gas/doc/Makefile.in: Same.
        * gas/doc/all.texi: Set MICROBLAZE.
        * gas/doc/as.texinfo: Add MicroBlaze doc links.
        * gas/doc/c-microblaze.texi: New MicroBlaze docs.
        * include/dis-asm.h: Decl print_insn_microblaze().
        * include/elf/common.h: Define EM_MICROBLAZE & EM_MICROBLAZE_OLD.
        * include/elf/microblaze.h: New reloc definitions.
        * ld/Makefile.am: Add eelf32mb_linux.o, eelf32microblaze.o to
        ALL_EMULATIONS, targets.
        * ld/Makefile.in: Same.
        * ld/configure.tgt: Add microblaze*-linux*, microblaze* targets.
        * ld/emulparams/elf32mb_linux.sh: New.
        * ld/emulparams/elf32microblaze.sh. New.
        * ld/scripttempl/elfmicroblaze.sc: New.
        * opcodes/Makefile.am: Add microblaze-opc.h to HFILES, microblaze-dis.c to
        CFILES, microblaze-dis.lo to ALL_MACHINES, targets.
        * opcodes/Makefile.in: Same.
        * opcodes/configure: Add bfd_microblaze_arch target.
        * opcodes/configure.in: Same.
        * opcodes/disassemble.c: Define ARCH_microblaze, return
        print_insn_microblaze().
        * opcodes/microblaze-dis.c: New MicroBlaze disassembler.
        * opcodes/microblaze-opc.h: New MicroBlaze opcode definitions.
        * opcodes/microblaze-opcm.h: New MicroBlaze opcode types.
@
text
@a18 5
datarootdir = @@datarootdir@@
docdir = @@docdir@@
htmldir = @@htmldir@@
pdfdir = @@pdfdir@@

a720 58
.PHONY: install-pdf install-pdf-am install-pdf-recursive

install-pdf:	install-pdf-recursive

install-pdf-recursive:
	@@failcom='exit 1'; \
	for f in x $$MAKEFLAGS; do \
	  case $$f in \
	    *=* | --[!k]*);; \
	    *k*) failcom='fail=yes';; \
	  esac; \
	done; \
	dot_seen=no; \
	target=`echo $@@ | sed s/-recursive//`; \
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  echo "Making $$target in $$subdir"; \
	  if test "$$subdir" = "."; then \
	    dot_seen=yes; \
	    local_target="$$target-am"; \
	  else \
	    local_target="$$target"; \
	  fi; \
	  (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) $$local_target) \
	  || eval $$failcom; \
	done; \
	if test "$$dot_seen" = "no"; then \
	  $(MAKE) $(AM_MAKEFLAGS) "$$target-am" || exit 1; \
	fi; test -z "$$fail"

.PHONY: install-html install-html-am install-html-recursive

install-html:	install-html-recursive

install-html-recursive:
	@@failcom='exit 1'; \
	for f in x $$MAKEFLAGS; do \
	  case $$f in \
	    *=* | --[!k]*);; \
	    *k*) failcom='fail=yes';; \
	  esac; \
	done; \
	dot_seen=no; \
	target=`echo $@@ | sed s/-recursive//`; \
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  echo "Making $$target in $$subdir"; \
	  if test "$$subdir" = "."; then \
	    dot_seen=yes; \
	    local_target="$$target-am"; \
	  else \
	    local_target="$$target"; \
	  fi; \
	  (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) $$local_target) \
	  || eval $$failcom; \
	done; \
	if test "$$dot_seen" = "no"; then \
	  $(MAKE) $(AM_MAKEFLAGS) "$$target-am" || exit 1; \
	fi; test -z "$$fail"

@


1.236
log
@bfd/

2009-07-25  H.J. Lu  <hongjiu.lu@@intel.com>

	* archures.c (bfd_architecture): Add bfd_arch_l1om.
	(bfd_l1om_arch): New.
	(bfd_archures_list): Add &bfd_l1om_arch.
	* bfd-in2.h: Regenerated.

	* config.bfd (targ64_selvecs): Add bfd_elf64_l1om_vec if
	bfd_elf64_x86_64_vec is supported.  Add bfd_elf64_l1om_freebsd_vec
	if bfd_elf64_x86_64_freebsd_vec is supported.
	(targ_selvecs): Likewise.

	* configure.in: Support bfd_elf64_l1om_vec and
	bfd_elf64_l1om_freebsd_vec.
	* configure: Regenerated.

	* cpu-l1om.c: New.

	* elf64-x86-64.c (elf64_l1om_elf_object_p): New.
	(bfd_elf64_l1om_vec): Likewise.
	(bfd_elf64_l1om_freebsd_vec): Likewise.

	* Makefile.am (ALL_MACHINES): Add cpu-l1om.lo.
	(ALL_MACHINES_CFILES): Add cpu-l1om.c.
	* Makefile.in: Regenerated.

	* targets.c (bfd_elf64_l1om_vec): New.
	(bfd_elf64_l1om_freebsd_vec): Likewise.
	(_bfd_target_vector): Add bfd_elf64_l1om_vec and
	bfd_elf64_l1om_freebsd_vec.

binutils/

2009-07-25  H.J. Lu  <hongjiu.lu@@intel.com>

	* readelf.c (guess_is_rela): Handle EM_L1OM.
	(dump_relocations): Likewise.
	(get_machine_name): Likewise.
	(get_section_type_name): Likewise.
	(get_elf_section_flags): Likewise.
	(get_symbol_index_type): Likewise.
	(is_32bit_abs_reloc): Likewise.
	(is_32bit_pcrel_reloc): Likewise.
	(is_64bit_abs_reloc): Likewise.
	(is_64bit_pcrel_reloc): Likewise.
	(is_none_reloc): Likewise.

gas/

2009-07-25  H.J. Lu  <hongjiu.lu@@intel.com>

	* config/tc-i386.c (cpu_arch): Add l1om.
	(check_cpu_arch_compatible): New.
	(set_cpu_arch): Use it.
	(i386_arch): New.
	(i386_mach): Return bfd_mach_l1om for Intel L1OM.
	(md_show_usage): Display l1om.
	(i386_target_format): Return ELF_TARGET_L1OM_FORMAT if
	cpu_arch_isa_flags.bitfield.cpul1om is set.

	* config/tc-i386.h (TARGET_ARCH): Use (i386_arch ()).
	(i386_arch): New.
	(ELF_TARGET_L1OM_FORMAT): Likewise.

	* doc/c-i386.texi: Document l1om.

gas/testsuite/

2009-07-25  H.J. Lu  <hongjiu.lu@@intel.com>

	* gas/i386/l1om.d: New.
	* gas/i386/l1om-inval.l: Likewise.
	* gas/i386/l1om-inval.s: Likewise.

	* gas/i386/i386.exp: Run l1om-inval and l1om.

include/elf/

2009-07-25  H.J. Lu  <hongjiu.lu@@intel.com>

	* common.h (EM_L1OM): New.

ld/

2009-07-25  H.J. Lu  <hongjiu.lu@@intel.com>

	* configure.tgt (targ64_extra_emuls): Add elf_l1om if elf_x86_64
	is supported.  Add elf_l1om_fbsd if elf_x86_64_fbsd is supported.
	(targ_extra_emuls): Likewise.

	* Makefile.am (ALL_64_EMULATIONS): Add eelf_l1om.o and
	eelf_l1om_fbsd.o
	(eelf_l1om.c): New.
	(eelf_l1om_fbsd.c): Likewise.
	* Makefile.in: Regenerated.

	* emulparams/elf_l1om.sh: New.
	* emulparams/elf_l1om_fbsd.sh: Likewise.

ld/testsuite/

2009-07-25  H.J. Lu  <hongjiu.lu@@intel.com>

	* ld-x86-64/abs-l1om.d: New.
	* ld-x86-64/protected2-l1om.d: Likewise.
	* ld-x86-64/protected3-l1om.d: Likewise.

	* ld-x86-64/x86-64.exp: Run abs-l1om, protected2-l1om and
	protected3-l1om.

opcodes/

2009-07-25  H.J. Lu  <hongjiu.lu@@intel.com>

	* configure.in: Handle bfd_l1om_arch.
	* disassemble.c (disassembler): Likewise.

	* configure: Regenerated.

	* i386-dis.c (print_insn): Handle bfd_mach_l1om and
	bfd_mach_l1om_intel_syntax.  Use 8 bytes per line for Intel L1OM.

	* i386-gen.c (cpu_flag_init): Set CPU_UNKNOWN_FLAGS to ~CpuL1OM.
	Add CPU_L1OM_FLAGS.
	(cpu_flags): Add CpuL1OM.
	(set_bitfield): Take an argument to set the value field.
	(process_i386_cpu_flag): Support ~CpuXXX and ~(CpuXXX|CpuYYY).
	(process_i386_opcode_modifier): Updated.
	(process_i386_operand_type): Likewise.
	* i386-init.h: Regenerated.
	* i386-tbl.h: Likewise.

	* i386-opc.h (CpuL1OM): New.
	(CpuXsave): Updated.
	(i386_cpu_flags): Add cpul1om.
@
text
@d104 1
d175 1
d296 1
d480 1
d1394 4
d2855 11
@


1.235
log
@bfd/

2009-07-10  H.J. Lu  <hongjiu.lu@@intel.com>

	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerated.

binutils/

2009-07-10  H.J. Lu  <hongjiu.lu@@intel.com>

	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerated.

gas/

2009-07-10  H.J. Lu  <hongjiu.lu@@intel.com>

	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerated.
@
text
@d86 1
d156 1
d1314 4
@


1.234
log
@bfd
	* Makefile.am (dwarf2.lo): Use dwarf2.h, not elf/dwarf2.h.
	(elf-eh-frame.lo): Likewise.
	(elf32-bfin.lo): Likewise.
	(elf32-frv.lo): Likewise.
	(elf32-xc16x.lo): Likewise.
	* Makefile.in: Rebuild.
	* dwarf2.c: Included dwarf.h, not elf/dwarf2.h.
	* elf-eh-frame.c: Likewise.
	* elf32-bfin.c: Likewise.
	* elf32-frv.c: Likewise.
	* elf32-xc16x.c: Likewise.
binutils
	* Makefile.am (dwarf.o): Refer to dwarf2.h, not elf/dwarf2.h.
	* Makefile.in: Rebuild.
	* dwarf.c: Include dwarf2.h, not elf/dwarf2.h.
gas
	* Makefile.am (DEPTC_alpha_ecoff): Refer to dwarf2.h, not
	elf/dwarf2.h.
	(DEPTC_alpha_elf): Likewise.
	(DEPTC_alpha_evax): Likewise.
	(DEPTC_arm_elf): Likewise.
	(DEPTC_hppa_elf): Likewise.
	(DEPTC_i386_aout): Likewise.
	(DEPTC_i386_coff): Likewise.
	(DEPTC_i386_elf): Likewise.
	(DEPTC_m68k_aout): Likewise.
	(DEPTC_m68k_coff): Likewise.
	(DEPTC_m68k_elf): Likewise.
	(DEPTC_mips_coff): Likewise.
	(DEPTC_mips_ecoff): Likewise.
	(DEPTC_mips_elf): Likewise.
	(DEPTC_ppc_coff): Likewise.
	(DEPTC_ppc_elf): Likewise.
	(DEPTC_s390_elf): Likewise.
	(DEPTC_sh_coff): Likewise.
	(DEPTC_sh_elf): Likewise.
	(DEPTC_sh64_elf): Likewise.
	(DEPTC_sparc_aout): Likewise.
	(DEPTC_sparc_coff): Likewise.
	(DEPTC_sparc_elf): Likewise.
	(as.o): Likewise.
	(dwarf2dbg.o): Likewise.
	(dw2gencfi.o): Likewise.
	(ehopt.o): Likewise.
	(read.o): Likewise.
	* Makefile.in: Rebuild.
	* dw2gencfi.h: Include dwarf2.h, not elf/dwarf2.h.
	* dwarf2dbg.c: Likewise.
	* ehopt.c: Likewise.
gdb
	* dwarf2-frame.c: Include dwarf2.h, not elf/dwarf2.h.
	* dwarf2expr.c: Likewise.
	* dwarf2loc.c: Likewise.
	* dwarf2read.c: Likewise.
	* sh-tdep.c: Likewise.
	* xtensa-tdep.c: Likewise.
include
	* dwarf2.h: New file, moved from elf/.
include/elf

	* dwarf2.h: Move to `..'.
@
text
@d1207 1
a1208 1
  $(INCDIR)/dwarf2.h \
d2044 1
a2045 1
  $(INCDIR)/dwarf2.h \
d2175 1
a2177 1
  $(INCDIR)/dwarf2.h \
d2285 1
a2286 1
  $(INCDIR)/dwarf2.h \
d2779 1
a2780 1
  $(INCDIR)/dwarf2.h \
d3595 1
@


1.233
log
@2009-06-16  H.J. Lu  <hongjiu.lu@@intel.com>

	* configure.in (elf): Add elf-ifunc.lo.

	* configure: Regenerated.
	* Makefile.in: Likewise.

	* elf-bfd.h (elf_link_hash_table): Add sgot, sgotplt,
	srelgot, splt, srelplt, igotplt, iplt, irelplt and irelifunc.

	* elf32-i386.c (elf_i386_link_hash_table): Remove sgot,
	sgotplt, srelgot, splt, srelplt, igotplt, iplt, irelplt and
	irelifunc.
	(elf_i386_link_hash_table_create): Likewise.
	(elf_i386_create_dynamic_sections): Likewise.
	(elf_i386_check_relocs): Likewise.
	(elf_i386_allocate_dynrelocs): Likewise.
	(elf_i386_size_dynamic_sections): Likewise.
	(elf_i386_relocate_section): Likewise.
	(elf_i386_finish_dynamic_symbol): Likewise.
	(elf_i386_finish_dynamic_sections): Likewise.
	(elf_i386_create_got_section): Removed.

	* elf64-x86-64.c (elf64_x86_64_link_hash_table): Remove sgot,
	sgotplt, srelgot, splt, srelplt, igotplt, iplt, irelplt and
	irelifunc.
	(elf64_x86_64_compute_jump_table_size): Updated.
	(elf64_x86_64_link_hash_table_create): Likewise.
	(elf64_x86_64_create_dynamic_sections): Likewise.
	(elf64_x86_64_check_relocs): Likewise.
	(elf64_x86_64_allocate_dynrelocs): Likewise.
	(elf64_x86_64_size_dynamic_sections): Likewise.
	(elf64_x86_64_relocate_section): Likewise.
	(elf64_x86_64_finish_dynamic_symbol): Likewise.
	(elf64_x86_64_finish_dynamic_sections): Likewise.
	(elf64_x86_64_create_got_section): Removed.

	* elflink.c (_bfd_elf_create_got_section): Use log_file_align
	for pointer alignment.  Set up section pointers.
	(_bfd_elf_create_dynamic_sections): Likewise.
	(_bfd_elf_create_ifunc_sections): Moved to ...
	* elf-ifunc.c: Here.  New.

	* Makefile.am (BFD32_BACKENDS): Add elf-ifunc.lo.
	(BFD32_BACKENDS_CFILES): Add elf-ifunc.c.
	Run "make dep-am".
@
text
@d1208 1
a1208 1
  $(INCDIR)/elf/dwarf2.h \
d2045 1
a2045 1
  $(INCDIR)/elf/dwarf2.h \
d2177 1
a2177 1
  $(INCDIR)/elf/dwarf2.h \
d2286 1
a2286 1
  $(INCDIR)/elf/dwarf2.h \
d2780 1
a2780 1
  $(INCDIR)/elf/dwarf2.h \
@


1.232
log
@2009-06-15  H.J. Lu  <hongjiu.lu@@intel.com>

	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerated.
@
text
@d253 1
d436 1
d2051 12
@


1.231
log
@bfd/
	* Makefile.am: Run "make dep-am".
	(BFD32_BACKENDS): Add mach-o-i386.lo.
	(BFD32_BACKENDS_CFILES): Add mach-o-i386.c.
	* Makefile.in: Regenerate.
@
text
@d2340 1
d3845 1
@


1.230
log
@	* dep-in.sed: Don't use \n in replacement part of s command.
	* Makefile.am (DEP1): LC_ALL for uniq.
	Run "make dep-am".
	* Makefile.in: Regenerate.
@
text
@d336 1
d518 1
d3095 7
@


1.229
log
@        * Makefile.am: Run "make dep-am".
        (AM_CPPFLAGS): New.
        (LIBDL): New.
        (ALL_MACHINES): Add cpu-plugin.lo.
        (ALL_MACHINES_CFILES): Add cpu-plugin.c.
        (BFD32_BACKENDS): Add plugin.lo.
        (BFD32_BACKENDS_CFILES): Add plugin.c.
        (libbfd_la_LIBADD): Add LIBDL
        * archures.c (bfd_architecture): Add bfd_arch_plugin.
        (bfd_plugin_arch): Declare.
        * bfd-in.h (BFD_SUPPORTS_PLUGINS): New.
        * bfd.c (bfd): Add plugin_data.
        * config.bfd: Handle the plugin target.
        * configure.in: Check for --enable-plugins.
        (LT_INIT): Use the dlopen option.
        * cpu-plugin.c: New.
        * plugin.c: New.
        * plugin.h: New.
        * targets.c (plugin_vec): Declare.
        (_bfd_target_vector): Add plugin_vec.
        * Makefile.in: Regenerate.
        * bfd-in2.h: Regenerate.
        * configure: Regenerate.
        * ar.c: Include plugin.h.
        (main): Handle the --plugin option.
        * nm.c: Include plugin.h.
        (OPTION_PLUGIN): New.
        (long_options): Add plugin.
        (main): Handle OPTION_PLUGIN.
        * NEWS: Mention  the new feature.
        * doc/binutils: Documement the new command line options.
        * configure.in: Check for --enable-plugins.
        * configure: Regenerate.
@
text
@d933 2
a934 1
	  sed -e '1s/.*: //' -f dep.sed < DEPA | LC_ALL=C sort | uniq | \
d1256 4
a1263 4
cpu-cr16c.lo: \
  cpu-cr16c.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
a1299 7
cpu-ia64.lo: \
  cpu-ia64.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/opcode/ia64.h \
  $(srcdir)/../opcodes/ia64-opc.h \
  cpu-ia64-opc.c
d1316 7
d1335 8
a1367 8
cpu-m10200.lo: \
  cpu-m10200.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-m10300.lo: \
  cpu-m10300.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
a1399 4
cpu-or32.lo: \
  cpu-or32.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
d1409 4
d1479 4
d1487 2
a1488 2
cpu-w65.lo: \
  cpu-w65.c \
a1498 4
cpu-xc16x.lo: \
  cpu-xc16x.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
d1688 12
a1745 12
coff-go32.lo: \
  coff-go32.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/i386.h \
  $(INCDIR)/coff/internal.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  coff-i386.c \
  coffcode.h \
  coffswap.h \
  libcoff.h
d1932 2
a1933 2
coff-we32k.lo: \
  coff-we32k.c \
d1937 1
a1937 1
  $(INCDIR)/coff/we32k.h \
d1943 2
a1944 2
coff-w65.lo: \
  coff-w65.c \
d1948 1
a1948 1
  $(INCDIR)/coff/w65.h \
d2027 64
a2426 13
elf32-m68k.lo: \
  elf32-m68k.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/m68k.h \
  $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/opcode/m68k.h \
  elf-bfd.h \
  elf32-target.h
d2469 2
a2470 2
elf32-m88k.lo: \
  elf32-m88k.c \
d2475 2
d2479 1
d2482 2
a2483 12
elf-m10200.lo: \
  elf-m10200.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  elf-bfd.h \
  elf32-target.h
elf-m10300.lo: \
  elf-m10300.c \
a2487 2
  $(INCDIR)/elf/mn10300.h \
  $(INCDIR)/elf/reloc-macros.h \
a2489 1
  $(INCDIR)/libiberty.h \
a2516 19
elfxx-mips.lo: \
  elfxx-mips.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/ecoff.h \
  $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/mips.h \
  $(INCDIR)/coff/sym.h \
  $(INCDIR)/coff/symconst.h \
  $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/mips.h \
  $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/libiberty.h \
  elf-bfd.h \
  elf-vxworks.h \
  elfxx-mips.h
d2628 2
a2629 2
elf32-sh64.lo: \
  elf32-sh64.c \
d2635 1
a2635 1
  $(INCDIR)/elf/sh.h \
a2637 3
  $(INCDIR)/libiberty.h \
  $(srcdir)/../opcodes/sh-opc.h \
  $(srcdir)/../opcodes/sh64-opc.h \
a2638 4
  elf-vxworks.h \
  elf32-sh-relocs.h \
  elf32-sh.c \
  elf32-sh64.h \
d2640 2
a2641 2
elf32-sh64-com.lo: \
  elf32-sh64-com.c \
d2650 2
a2651 13
  $(srcdir)/../opcodes/sh64-opc.h \
  elf-bfd.h \
  elf32-sh64.h
elf32-s390.lo: \
  elf32-s390.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/elf/s390.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
d2653 3
d2673 2
a2674 2
elf32-sh-symbian.lo: \
  elf32-sh-symbian.c \
d2683 1
a2683 2
  $(INCDIR)/libiberty.h \
  $(srcdir)/../opcodes/sh-opc.h \
d2685 3
a2687 6
  elf-vxworks.h \
  elf32-sh-relocs.h \
  elf32-sh.c \
  elf32-target.h
elfxx-sparc.lo: \
  elfxx-sparc.c \
d2693 1
a2693 1
  $(INCDIR)/elf/sparc.h \
d2697 2
a2698 1
  $(INCDIR)/opcode/sparc.h \
d2701 4
a2704 1
  elfxx-sparc.h
d2759 2
a2760 2
elf32-xstormy16.lo: \
  elf32-xstormy16.c \
d2763 1
d2767 1
a2767 1
  $(INCDIR)/elf/xstormy16.h \
d2773 2
a2774 2
elf32-xtensa.lo: \
  elf32-xtensa.c \
d2780 1
a2780 1
  $(INCDIR)/elf/xtensa.h \
d2783 1
a2783 2
  $(INCDIR)/xtensa-config.h \
  $(INCDIR)/xtensa-isa.h \
d2786 2
a2787 2
elf32-xc16x.lo: \
  elf32-xc16x.c \
a2789 1
  $(INCDIR)/elf/dwarf2.h \
d2793 1
a2793 1
  $(INCDIR)/elf/xc16x.h \
d2796 2
a2797 1
  $(INCDIR)/libiberty.h \
d2824 2
a2825 2
elf-attrs.lo: \
  elf-attrs.c \
d2827 5
d2835 2
d2840 5
a2844 3
  elf-bfd.h
elf-strtab.lo: \
  elf-strtab.c \
d2849 2
d2854 1
a2854 20
  elf-bfd.h
elf-eh-frame.lo: \
  elf-eh-frame.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/dwarf2.h \
  $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  elf-bfd.h
elf-vxworks.lo: \
  elf-vxworks.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/vxworks.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
d2856 2
a2857 1
  elf-vxworks.h
a2912 4
som.lo: \
  som.c \
  $(INCDIR)/alloca-conf.h \
  $(INCDIR)/filenames.h
d2983 11
a3011 11
i386mach3.lo: \
  i386mach3.c \
  $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/ar.h \
  $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  aout-target.h \
  libaout.h
d3134 2
a3135 2
nlm32-sparc.lo: \
  nlm32-sparc.c \
d3141 1
a3141 1
  $(INCDIR)/nlm/sparc32-ext.h \
d3145 2
a3146 2
nlm32-ppc.lo: \
  nlm32-ppc.c \
d3152 1
a3152 1
  $(INCDIR)/nlm/ppc-ext.h \
d3207 2
a3208 10
pef.lo: \
  pef.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/libiberty.h \
  $(INCDIR)/safe-ctype.h \
  pef-traceback.h \
  pef.h
pe-arm.lo: \
  pe-arm.c \
d3220 1
d3222 2
a3223 2
pei-arm.lo: \
  pei-arm.c \
d3236 2
a3237 2
pe-arm-wince.lo: \
  pe-arm-wince.c \
a3238 1
  $(INCDIR)/coff/arm.h \
d3240 1
d3245 1
a3245 1
  coff-arm.c \
a3248 1
  pe-arm.c \
d3250 2
a3251 2
pei-arm-wince.lo: \
  pei-arm-wince.c \
a3252 1
  $(INCDIR)/coff/arm.h \
d3255 1
d3259 1
a3259 1
  coff-arm.c \
a3262 1
  pei-arm.c \
d3264 2
a3265 2
pe-i386.lo: \
  pe-i386.c \
a3267 1
  $(INCDIR)/coff/i386.h \
d3269 1
a3272 1
  coff-i386.c \
d3277 2
a3278 2
pei-i386.lo: \
  pei-i386.c \
a3280 1
  $(INCDIR)/coff/i386.h \
d3283 1
d3286 1
a3286 1
  coff-i386.c \
d3291 2
a3292 2
pe-mcore.lo: \
  pe-mcore.c \
a3295 1
  $(INCDIR)/coff/mcore.h \
d3297 1
d3300 2
a3301 1
  coff-mcore.c \
d3306 10
a3315 2
pei-mcore.lo: \
  pei-mcore.c \
d3317 1
a3319 1
  $(INCDIR)/coff/mcore.h \
d3323 1
a3323 1
  coff-mcore.c \
d3327 1
d3329 2
a3330 2
pe-ppc.lo: \
  pe-ppc.c \
d3332 1
a3335 1
  $(INCDIR)/coff/powerpc.h \
d3338 1
a3338 1
  coff-ppc.c \
d3343 2
a3344 2
pei-ppc.lo: \
  pei-ppc.c \
d3347 1
a3349 1
  $(INCDIR)/coff/powerpc.h \
d3352 1
a3352 1
  coff-ppc.c \
d3357 2
a3358 2
pe-sh.lo: \
  pe-sh.c \
d3362 1
a3363 1
  $(INCDIR)/coff/sh.h \
d3366 1
a3366 2
  $(INCDIR)/libiberty.h \
  coff-sh.c \
d3371 2
a3372 2
pei-sh.lo: \
  pei-sh.c \
d3376 1
a3377 1
  $(INCDIR)/coff/sh.h \
a3379 2
  $(INCDIR)/libiberty.h \
  coff-sh.c \
d3383 1
d3385 2
a3386 2
pe-mips.lo: \
  pe-mips.c \
a3389 1
  $(INCDIR)/coff/mipspe.h \
d3391 1
d3394 1
d3399 2
a3400 2
pei-mips.lo: \
  pei-mips.c \
a3403 1
  $(INCDIR)/coff/mipspe.h \
d3405 1
d3408 2
a3412 1
  pe-mips.c \
a3415 1
  $(INCDIR)/plugin-api.h \
a3416 1
  plugin.h \
d3418 3
a3420 1
  $(INCDIR)/libiberty.h
d3445 4
d3497 2
a3498 2
vaxnetbsd.lo: \
  vaxnetbsd.c \
d3509 2
a3510 2
vax1knetbsd.lo: \
  vax1knetbsd.c \
d3519 3
a3521 4
  libaout.h \
  netbsd.h
vaxbsd.lo: \
  vaxbsd.c \
d3530 2
a3531 1
  libaout.h
a3536 6
vms.lo: \
  vms.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  vms.h
d3563 6
d3628 13
d3666 2
a3667 2
pei-ia64.lo: \
  pei-ia64.c \
d3669 5
a3673 4
  $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/ia64.h \
  $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/pe.h \
d3676 6
a3681 7
  coff-ia64.c \
  coffcode.h \
  libcoff.h \
  libpei.h \
  peicode.h
elf64-x86-64.lo: \
  elf64-x86-64.c \
d3687 1
a3687 1
  $(INCDIR)/elf/x86-64.h \
d3690 1
a3690 1
  bfd_stdint.h \
d3692 1
a3692 1
  elf64-target.h
a3713 16
elf64-hppa.lo: \
  elf64-hppa.c \
  $(INCDIR)/alloca-conf.h \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/hppa.h \
  $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  elf-bfd.h \
  elf-hppa.h \
  elf64-hppa.h \
  elf64-target.h \
  libhppa.h
d3724 3
a3726 2
elfn32-mips.lo: \
  elfn32-mips.c \
a3727 6
  $(INCDIR)/coff/ecoff.h \
  $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/mips.h \
  $(INCDIR)/coff/sym.h \
  $(INCDIR)/coff/symconst.h \
d3730 1
a3731 1
  $(INCDIR)/elf/mips.h \
a3734 1
  ecoffswap.h \
d3736 4
a3739 3
  elf32-target.h \
  elfxx-mips.h \
  genlink.h
d3799 2
a3800 2
elf32-score.lo: \
  elf32-score.c \
d3806 1
a3806 1
  $(INCDIR)/elf/score.h \
a3808 1
  $(INCDIR)/libiberty.h \
d3810 3
a3812 4
  elf32-score.h \
  elf32-target.h
elf32-score7.lo: \
  elf32-score7.c \
d3818 1
a3818 1
  $(INCDIR)/elf/score.h \
d3821 1
a3821 1
  $(INCDIR)/libiberty.h \
d3823 4
a3826 3
  elf32-score.h
elf64-sh64.lo: \
  elf64-sh64.c \
d3832 1
a3832 1
  $(INCDIR)/elf/sh.h \
d3835 1
d3838 2
a3839 2
elf64-sparc.lo: \
  elf64-sparc.c \
a3843 2
  $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/elf/sparc.h \
d3846 1
a3846 1
  $(INCDIR)/opcode/sparc.h \
d3848 4
a3851 4
  elf64-target.h \
  elfxx-sparc.h
elf64.lo: \
  elf64.c \
d3853 6
d3862 2
d3866 1
a3866 1
  $(INCDIR)/libiberty.h \
d3868 3
a3870 2
  elfcode.h \
  elfcore.h
d3899 2
a3900 2
coff-x86_64.lo: \
  coff-x86_64.c \
d3909 1
d3911 5
a3915 4
  coffswap.h \
  libcoff.h
pe-x86_64.lo: \
  pe-x86_64.c \
d3918 1
a3920 1
  $(INCDIR)/coff/x86_64.h \
d3923 1
a3923 2
  $(INCDIR)/libiberty.h \
  coff-x86_64.c \
d3952 4
a3983 4
cisco-core.lo: \
  cisco-core.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
@


1.228
log
@	* dep-in.sed: Don't modify .o to .lo here.  Output one filename
	per line with all lines having continuation backslash.  Prefix
	first line with "A", following lines with "B".
	* Makefile.am (DEP): Don't use dep.sed here.
	(DEP1): Run $MKDEP on single files, modify .o to .lo here.  Use
	dep.sed here on dependencies, sort and uniq.
	* Makefile.in: Regenerate.
@
text
@d29 4
a80 1
	cpu-moxie.lo \
a83 1
	cpu-ia64.lo \
d88 1
d92 2
a99 2
	cpu-m10200.lo \
	cpu-m10300.lo \
d105 2
a107 2
	cpu-msp430.lo \
	cpu-or32.lo \
d110 1
d113 1
d127 1
d129 1
a129 1
	cpu-w65.lo \
a131 1
	cpu-xc16x.lo \
d142 1
a143 1
	cpu-cr16c.c \
a149 1
	cpu-moxie.c \
a152 1
	cpu-ia64.c \
d157 1
d161 2
a168 2
	cpu-m10200.c \
	cpu-m10300.c \
d174 2
a176 2
	cpu-msp430.c \
	cpu-or32.c \
d179 1
d182 1
d196 1
d198 1
a198 1
	cpu-w65.c \
a200 1
	cpu-xc16x.c \
d222 1
a225 1
	coff-go32.lo \
d243 1
a244 1
	coff-w65.lo \
d251 6
a271 1
	elf32-moxie.lo \
a288 2
	elf-m10200.lo \
	elf-m10300.lo \
a290 1
	elfxx-mips.lo \
d292 2
a294 1
	elf32-msp430.lo \
d300 1
d302 1
a302 1
	elf32-sh-symbian.lo \
a303 2
	elf32-sh64-com.lo \
	elfxx-sparc.lo \
d308 1
a310 1
	elf32-xc16x.lo \
d313 2
a314 4
	elf-attrs.lo \
	elf-strtab.lo \
	elf-eh-frame.lo \
	elf-vxworks.lo \
a318 1
	som.lo \
d325 1
a327 1
	i386mach3.lo \
d340 1
a341 1
	nlm32-ppc.lo \
d347 7
d355 1
a355 1
	pe-arm.lo \
a356 3
	pe-arm-wince.lo \
	pei-arm-wince.lo \
	pe-i386.lo \
a357 1
	pe-mcore.lo \
d359 1
a359 1
	pe-ppc.lo \
a360 1
	pe-sh.lo \
a361 2
	pe-mips.lo \
	pei-mips.lo \
d363 1
d367 1
a371 1
	vaxnetbsd.lo \
d374 1
a375 1
	vms.lo \
d380 1
d403 1
a407 1
	coff-go32.c \
d424 1
a425 1
	coff-w65.c \
d432 6
a452 1
	elf32-moxie.c \
a464 1
	elf32-m68k.c \
d468 1
a469 2
	elf-m10200.c \
	elf-m10300.c \
a471 1
	elfxx-mips.c \
d473 2
a475 1
	elf32-msp430.c \
a479 2
	elf32-sh64.c \
	elf32-sh64-com.c \
d481 1
d483 2
a484 2
	elf32-sh-symbian.c \
	elfxx-sparc.c \
d489 1
a491 1
	elf32-xc16x.c \
d494 2
a495 4
	elf-attrs.c \
	elf-strtab.c \
	elf-eh-frame.c \
	elf-vxworks.c \
a499 1
	som.c \
d506 1
a508 1
	i386mach3.c \
d521 1
a522 1
	nlm32-ppc.c \
d528 7
d536 1
a536 1
	pe-arm.c \
a537 3
	pe-arm-wince.c \
	pei-arm-wince.c \
	pe-i386.c \
a538 1
	pe-mcore.c \
d540 1
a540 1
	pe-ppc.c \
a541 1
	pe-sh.c \
d543 1
a543 2
	pe-mips.c \
	pei-mips.c \
d547 1
a551 1
	vaxnetbsd.c \
d554 1
a555 1
	vms.c \
d560 1
d576 1
d579 3
a581 2
	pei-ia64.lo \
	elf64-x86-64.lo \
d583 1
a584 1
	elf32-ia64.lo \
a585 2
	elf64-gen.lo \
	elfn32-mips.lo \
a587 3
	elf32-score.lo \
	elf32-score7.lo \
	elf64-sh64.lo \
d590 1
d592 1
d594 1
a597 1
	coff-x86_64.lo \
d599 1
d608 1
d611 2
a612 2
	pei-ia64.c \
	elf64-x86-64.c \
d614 1
a615 2
	elf64-gen.c \
	elfn32-mips.c \
a619 2
	elf32-score.c \
	elf32-score7.c \
d622 1
d624 1
a627 1
	coff-x86_64.c \
d629 1
d634 1
d640 1
a640 2
	trad-core.lo \
	cisco-core.lo
d644 1
d650 1
a650 2
	trad-core.c \
	cisco-core.c
d800 1
a800 1
libbfd_la_LIBADD = `cat ofiles` @@SHARED_LIBADD@@
a1286 4
cpu-moxie.lo: \
  cpu-moxie.c \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
d1387 2
a1388 2
cpu-mt.lo: \
  cpu-mt.c \
d1395 4
d1420 4
a2213 12
elf32-moxie.lo: \
  elf32-moxie.c \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/moxie.h \
  $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h \
  elf-bfd.h \
  elf32-target.h
d2516 2
a2517 2
elf32-mt.lo: \
  elf32-mt.c \
d2522 1
a2522 1
  $(INCDIR)/elf/mt.h \
d2541 12
d3417 7
@


1.227
log
@Run "make dep-am" and regenerate
@
text
@d912 2
a913 3
	sed -f dep.sed < DEP1 > DEPA
	echo '# IF YOU PUT ANYTHING HERE IT WILL GO AWAY' >> DEPA
	if grep ' /' DEPA > /dev/null 2> /dev/null; then \
d916 1
a916 1
	  mv -f DEPA $@@; \
d922 7
a928 1
	$(MKDEP) $(INCLUDES) $(CFLAGS) $? >> DEP2
d1042 7
a1048 2
archive.lo: archive.c $(INCDIR)/filenames.h $(INCDIR)/libiberty.h \
  $(INCDIR)/hashtab.h $(INCDIR)/aout/ar.h $(INCDIR)/aout/ranlib.h \
d1050 4
a1053 1
archures.lo: archures.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
d1055 30
a1084 8
bfd.lo: bfd.c $(INCDIR)/filenames.h bfdver.h $(INCDIR)/libiberty.h \
  $(INCDIR)/demangle.h $(INCDIR)/safe-ctype.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/hashtab.h $(INCDIR)/coff/internal.h $(INCDIR)/coff/sym.h \
  libcoff.h libecoff.h $(INCDIR)/coff/ecoff.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/external.h $(INCDIR)/elf/internal.h
bfdio.lo: bfdio.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
bfdwin.lo: bfdwin.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
cache.lo: cache.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
d1086 18
a1103 24
coffgen.lo: coffgen.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/coff/internal.h libcoff.h $(INCDIR)/bfdlink.h
corefile.lo: corefile.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
format.lo: format.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
init.lo: init.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
libbfd.lo: libbfd.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
opncls.lo: opncls.c $(INCDIR)/filenames.h $(INCDIR)/objalloc.h \
  $(INCDIR)/hashtab.h $(INCDIR)/libiberty.h
reloc.lo: reloc.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/hashtab.h
section.lo: section.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/bfdlink.h
syms.lo: syms.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/safe-ctype.h $(INCDIR)/bfdlink.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def
targets.lo: targets.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/fnmatch.h targmatch.h
hash.lo: hash.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/objalloc.h $(INCDIR)/libiberty.h
linker.lo: linker.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/bfdlink.h genlink.h
srec.lo: srec.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/libiberty.h $(INCDIR)/safe-ctype.h
binary.lo: binary.c $(INCDIR)/filenames.h $(INCDIR)/safe-ctype.h \
d1105 61
a1165 1
tekhex.lo: tekhex.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
d1167 23
a1189 7
ihex.lo: ihex.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/libiberty.h $(INCDIR)/safe-ctype.h
stabs.lo: stabs.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/safe-ctype.h
stab-syms.lo: stab-syms.c libaout.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab.def
merge.lo: merge.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
d1191 43
a1233 14
dwarf2.lo: dwarf2.c $(INCDIR)/filenames.h $(INCDIR)/libiberty.h \
  $(INCDIR)/hashtab.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h $(INCDIR)/elf/internal.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/dwarf2.h
simple.lo: simple.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/bfdlink.h
compress.lo: compress.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
verilog.lo: verilog.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/libiberty.h $(INCDIR)/safe-ctype.h
archive64.lo: archive64.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/aout/ar.h
cpu-alpha.lo: cpu-alpha.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
cpu-arc.lo: cpu-arc.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
cpu-arm.lo: cpu-arm.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
d1235 15
a1249 27
cpu-avr.lo: cpu-avr.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
cpu-bfin.lo: cpu-bfin.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
cpu-cr16.lo: cpu-cr16.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
cpu-cris.lo: cpu-cris.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
cpu-cr16c.lo: cpu-cr16c.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
cpu-crx.lo: cpu-crx.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
cpu-d10v.lo: cpu-d10v.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
cpu-d30v.lo: cpu-d30v.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
cpu-dlx.lo: cpu-dlx.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
cpu-fr30.lo: cpu-fr30.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
cpu-frv.lo: cpu-frv.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
cpu-moxie.lo: cpu-moxie.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
cpu-h8300.lo: cpu-h8300.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
cpu-h8500.lo: cpu-h8500.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
cpu-hppa.lo: cpu-hppa.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
cpu-ia64.lo: cpu-ia64.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  cpu-ia64-opc.c $(srcdir)/../opcodes/ia64-opc.h $(INCDIR)/opcode/ia64.h
cpu-i370.lo: cpu-i370.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
cpu-i386.lo: cpu-i386.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
cpu-i860.lo: cpu-i860.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
cpu-i960.lo: cpu-i960.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
cpu-ip2k.lo: cpu-ip2k.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
cpu-iq2000.lo: cpu-iq2000.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
cpu-lm32.lo: cpu-lm32.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
cpu-m32c.lo: cpu-m32c.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
cpu-m32r.lo: cpu-m32r.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
cpu-m68hc11.lo: cpu-m68hc11.c $(INCDIR)/filenames.h \
d1251 3
a1253 1
cpu-m68hc12.lo: cpu-m68hc12.c $(INCDIR)/filenames.h \
d1255 95
a1349 1
cpu-m68k.lo: cpu-m68k.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
d1351 48
a1398 12
cpu-m88k.lo: cpu-m88k.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
cpu-m10200.lo: cpu-m10200.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
cpu-m10300.lo: cpu-m10300.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
cpu-maxq.lo: cpu-maxq.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
cpu-mcore.lo: cpu-mcore.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
cpu-mep.lo: cpu-mep.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
cpu-mips.lo: cpu-mips.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
cpu-mmix.lo: cpu-mmix.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
cpu-mt.lo: cpu-mt.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
cpu-msp430.lo: cpu-msp430.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
cpu-or32.lo: cpu-or32.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
cpu-ns32k.lo: cpu-ns32k.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
d1400 15
a1414 1
cpu-openrisc.lo: cpu-openrisc.c $(INCDIR)/filenames.h \
d1416 16
a1431 8
cpu-pdp11.lo: cpu-pdp11.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
cpu-pj.lo: cpu-pj.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
cpu-powerpc.lo: cpu-powerpc.c $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-rs6000.lo: cpu-rs6000.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
cpu-s390.lo: cpu-s390.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
cpu-score.lo: cpu-score.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
cpu-sh.lo: cpu-sh.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
d1433 28
a1460 7
cpu-sparc.lo: cpu-sparc.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
cpu-spu.lo: cpu-spu.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
cpu-tic30.lo: cpu-tic30.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
cpu-tic4x.lo: cpu-tic4x.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
cpu-tic54x.lo: cpu-tic54x.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
cpu-tic80.lo: cpu-tic80.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
cpu-v850.lo: cpu-v850.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
d1462 551
a2012 169
cpu-vax.lo: cpu-vax.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
cpu-we32k.lo: cpu-we32k.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
cpu-w65.lo: cpu-w65.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
cpu-xstormy16.lo: cpu-xstormy16.c $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-xtensa.lo: cpu-xtensa.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
cpu-xc16x.lo: cpu-xc16x.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
cpu-z80.lo: cpu-z80.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
cpu-z8k.lo: cpu-z8k.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
aout-adobe.lo: aout-adobe.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/aout/adobe.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  libaout.h $(INCDIR)/bfdlink.h
aout-arm.lo: aout-arm.c $(INCDIR)/filenames.h libaout.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/aout/aout64.h aoutx.h \
  $(INCDIR)/safe-ctype.h $(INCDIR)/hashtab.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h aout-target.h
aout-cris.lo: aout-cris.c aout32.c aoutx.h $(INCDIR)/filenames.h \
  $(INCDIR)/safe-ctype.h $(INCDIR)/bfdlink.h libaout.h \
  $(INCDIR)/hashtab.h $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h aout-target.h
aout-ns32k.lo: aout-ns32k.c $(INCDIR)/aout/aout64.h \
  ns32k.h libaout.h $(INCDIR)/bfdlink.h aoutx.h $(INCDIR)/filenames.h \
  $(INCDIR)/safe-ctype.h $(INCDIR)/hashtab.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
aout-sparcle.lo: aout-sparcle.c $(INCDIR)/bfdlink.h \
  libaout.h aoutf1.h $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/aout/sun4.h $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h aout-target.h
aout-tic30.lo: aout-tic30.c $(INCDIR)/filenames.h libaout.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h aoutx.h \
  $(INCDIR)/safe-ctype.h $(INCDIR)/hashtab.h
aout0.lo: aout0.c aoutf1.h $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/aout/sun4.h libaout.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/ar.h aout-target.h
aout32.lo: aout32.c aoutx.h $(INCDIR)/filenames.h $(INCDIR)/safe-ctype.h \
  $(INCDIR)/bfdlink.h libaout.h $(INCDIR)/hashtab.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
armnetbsd.lo: armnetbsd.c netbsd.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h libaout.h $(INCDIR)/bfdlink.h aout-target.h \
  $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/ar.h
bout.lo: bout.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/bfdlink.h genlink.h $(INCDIR)/bout.h $(INCDIR)/libiberty.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def libaout.h
cf-i386lynx.lo: cf-i386lynx.c $(INCDIR)/filenames.h \
  coff-i386.c $(INCDIR)/hashtab.h $(INCDIR)/coff/i386.h \
  $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h coffswap.h
cf-sparclynx.lo: cf-sparclynx.c coff-sparc.c $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h $(INCDIR)/coff/sparc.h $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h libcoff.h $(INCDIR)/bfdlink.h \
  coffcode.h coffswap.h
coff-apollo.lo: coff-apollo.c $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h $(INCDIR)/coff/apollo.h $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h libcoff.h $(INCDIR)/bfdlink.h \
  coffcode.h coffswap.h
coff-arm.lo: coff-arm.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/coff/arm.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h coffswap.h
coff-aux.lo: coff-aux.c $(INCDIR)/filenames.h $(INCDIR)/coff/aux-coff.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/m68k.h $(INCDIR)/coff/external.h \
  coff-m68k.c $(INCDIR)/hashtab.h libcoff.h $(INCDIR)/bfdlink.h \
  coffcode.h coffswap.h
coff-h8300.lo: coff-h8300.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/bfdlink.h genlink.h $(INCDIR)/coff/h8300.h \
  $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  libcoff.h $(INCDIR)/libiberty.h coffcode.h coffswap.h
coff-h8500.lo: coff-h8500.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/coff/h8500.h $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h libcoff.h coffcode.h coffswap.h
coff-i386.lo: coff-i386.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/coff/i386.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h coffswap.h
coff-i860.lo: coff-i860.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/coff/i860.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h coffswap.h
coff-go32.lo: coff-go32.c coff-i386.c $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h $(INCDIR)/coff/i386.h $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h libcoff.h $(INCDIR)/bfdlink.h \
  coffcode.h coffswap.h
coff-i960.lo: coff-i960.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/coff/i960.h $(INCDIR)/coff/internal.h libcoff.h \
  $(INCDIR)/bfdlink.h coffcode.h coffswap.h
coff-m68k.lo: coff-m68k.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/coff/m68k.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h coffswap.h
coff-m88k.lo: coff-m88k.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/coff/m88k.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h coffswap.h
coff-maxq.lo: coff-maxq.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/coff/maxq.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  libcoff.h $(INCDIR)/bfdlink.h $(INCDIR)/libiberty.h \
  coffcode.h coffswap.h
coff-mips.lo: coff-mips.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/hashtab.h $(INCDIR)/coff/internal.h $(INCDIR)/coff/sym.h \
  $(INCDIR)/coff/symconst.h $(INCDIR)/coff/ecoff.h $(INCDIR)/coff/mips.h \
  $(INCDIR)/coff/external.h libcoff.h libecoff.h coffswap.h \
  ecoffswap.h
coff-or32.lo: coff-or32.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/coff/or32.h $(INCDIR)/coff/internal.h libcoff.h \
  $(INCDIR)/bfdlink.h coffcode.h coffswap.h
coff-rs6000.lo: coff-rs6000.c $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/hashtab.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/xcoff.h $(INCDIR)/coff/rs6000.h libcoff.h \
  libxcoff.h coffcode.h coffswap.h
coff-sh.lo: coff-sh.c $(INCDIR)/filenames.h $(INCDIR)/libiberty.h \
  $(INCDIR)/hashtab.h $(INCDIR)/bfdlink.h $(INCDIR)/coff/sh.h \
  $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  libcoff.h coffcode.h coffswap.h
coff-sparc.lo: coff-sparc.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/coff/sparc.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h coffswap.h
coff-stgo32.lo: coff-stgo32.c coff-i386.c $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h $(INCDIR)/coff/i386.h $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/go32exe.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h coffswap.h \
  go32stub.h
coff-svm68k.lo: coff-svm68k.c coff-m68k.c $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h $(INCDIR)/coff/m68k.h $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h libcoff.h $(INCDIR)/bfdlink.h \
  coffcode.h coffswap.h
coff-tic30.lo: coff-tic30.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/coff/tic30.h $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h libcoff.h coffcode.h coffswap.h
coff-tic4x.lo: coff-tic4x.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/coff/tic4x.h $(INCDIR)/coff/ti.h \
  $(INCDIR)/coff/internal.h libcoff.h coffcode.h coffswap.h
coff-tic54x.lo: coff-tic54x.c $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h $(INCDIR)/bfdlink.h $(INCDIR)/coff/tic54x.h \
  $(INCDIR)/coff/ti.h $(INCDIR)/coff/internal.h libcoff.h \
  coffcode.h coffswap.h
coff-tic80.lo: coff-tic80.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/hashtab.h $(INCDIR)/coff/tic80.h $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h libcoff.h coffcode.h coffswap.h
coff-u68k.lo: coff-u68k.c coff-m68k.c $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h $(INCDIR)/coff/m68k.h $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h libcoff.h $(INCDIR)/bfdlink.h \
  coffcode.h coffswap.h
coff-we32k.lo: coff-we32k.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/coff/we32k.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h coffswap.h
coff-w65.lo: coff-w65.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/coff/w65.h $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h libcoff.h coffcode.h coffswap.h
coff-z80.lo: coff-z80.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/coff/z80.h $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h libcoff.h coffcode.h coffswap.h
coff-z8k.lo: coff-z8k.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/coff/z8k.h $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h libcoff.h coffcode.h coffswap.h
cofflink.lo: cofflink.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/hashtab.h $(INCDIR)/coff/internal.h libcoff.h \
  $(INCDIR)/safe-ctype.h
dwarf1.lo: dwarf1.c $(INCDIR)/filenames.h $(INCDIR)/libiberty.h \
  $(INCDIR)/hashtab.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h $(INCDIR)/elf/internal.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/dwarf.h
ecoff.lo: ecoff.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/hashtab.h $(INCDIR)/aout/ar.h $(INCDIR)/aout/ranlib.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def libaout.h \
  $(INCDIR)/aout/aout64.h $(INCDIR)/coff/internal.h $(INCDIR)/coff/sym.h \
  $(INCDIR)/coff/symconst.h $(INCDIR)/coff/ecoff.h libcoff.h \
  libecoff.h $(INCDIR)/libiberty.h
ecofflink.lo: ecofflink.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/hashtab.h $(INCDIR)/objalloc.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/coff/internal.h $(INCDIR)/coff/sym.h \
  $(INCDIR)/coff/symconst.h $(INCDIR)/coff/ecoff.h libcoff.h \
d2014 1395
a3408 3
elf.lo: elf.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/hashtab.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h $(INCDIR)/elf/internal.h $(INCDIR)/libiberty.h \
d3410 106
a3515 495
elf32-am33lin.lo: elf32-am33lin.c $(INCDIR)/filenames.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/mn10300.h \
  $(INCDIR)/elf/reloc-macros.h elf-m10300.c $(INCDIR)/hashtab.h \
  $(INCDIR)/libiberty.h elf32-target.h
elf32-arc.lo: elf32-arc.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/arc.h \
  $(INCDIR)/elf/reloc-macros.h $(INCDIR)/libiberty.h \
  elf32-target.h
elf32-arm.lo: elf32-arm.c $(INCDIR)/filenames.h $(INCDIR)/libiberty.h \
  $(INCDIR)/hashtab.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h $(INCDIR)/elf/internal.h $(INCDIR)/bfdlink.h \
  elf-vxworks.h $(INCDIR)/elf/arm.h $(INCDIR)/elf/reloc-macros.h \
  elf32-target.h
elf32-avr.lo: elf32-avr.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/avr.h \
  $(INCDIR)/elf/reloc-macros.h elf32-avr.h elf32-target.h
elf32-bfin.lo: elf32-bfin.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/bfin.h \
  $(INCDIR)/elf/reloc-macros.h $(INCDIR)/elf/dwarf2.h \
  elf32-target.h
elf32-cr16.lo: elf32-cr16.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/hashtab.h $(INCDIR)/libiberty.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/external.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/cr16.h $(INCDIR)/elf/reloc-macros.h elf32-target.h
elf32-cr16c.lo: elf32-cr16c.c $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/cr16c.h \
  $(INCDIR)/elf/reloc-macros.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h $(INCDIR)/elf/internal.h elf32-target.h
elf32-cris.lo: elf32-cris.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/cris.h \
  $(INCDIR)/elf/reloc-macros.h elf32-target.h
elf32-crx.lo: elf32-crx.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/hashtab.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/crx.h \
  $(INCDIR)/elf/reloc-macros.h elf32-target.h
elf32-d10v.lo: elf32-d10v.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/d10v.h \
  $(INCDIR)/elf/reloc-macros.h elf32-target.h
elf32-d30v.lo: elf32-d30v.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/d30v.h \
  $(INCDIR)/elf/reloc-macros.h elf32-target.h
elf32-dlx.lo: elf32-dlx.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/dlx.h \
  $(INCDIR)/elf/reloc-macros.h elf32-target.h
elf32-fr30.lo: elf32-fr30.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/fr30.h \
  $(INCDIR)/elf/reloc-macros.h elf32-target.h
elf32-frv.lo: elf32-frv.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/frv.h \
  $(INCDIR)/elf/reloc-macros.h $(INCDIR)/elf/dwarf2.h \
  elf32-target.h
elf32-moxie.lo: elf32-moxie.c $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h $(INCDIR)/elf/internal.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/moxie.h $(INCDIR)/elf/reloc-macros.h \
  elf32-target.h
elf32-gen.lo: elf32-gen.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/bfdlink.h elf32-target.h
elf32-h8300.lo: elf32-h8300.c $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h $(INCDIR)/elf/internal.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/h8.h $(INCDIR)/elf/reloc-macros.h elf32-target.h
elf32-hppa.lo: elf32-hppa.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/hppa.h \
  $(INCDIR)/elf/reloc-macros.h libhppa.h elf32-hppa.h \
  elf-hppa.h elf32-target.h
elf32-i370.lo: elf32-i370.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/hashtab.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/i370.h \
  $(INCDIR)/elf/reloc-macros.h elf32-target.h
elf32-i386.lo: elf32-i386.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/hashtab.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h $(INCDIR)/elf/internal.h elf-vxworks.h \
  bfd_stdint.h $(INCDIR)/elf/i386.h $(INCDIR)/elf/reloc-macros.h \
  elf32-target.h
elf32-i860.lo: elf32-i860.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/i860.h \
  $(INCDIR)/elf/reloc-macros.h elf32-target.h
elf32-i960.lo: elf32-i960.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/i960.h \
  $(INCDIR)/elf/reloc-macros.h elf32-target.h
elf32-ip2k.lo: elf32-ip2k.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/ip2k.h \
  $(INCDIR)/elf/reloc-macros.h elf32-target.h
elf32-iq2000.lo: elf32-iq2000.c $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h $(INCDIR)/elf/internal.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/iq2000.h $(INCDIR)/elf/reloc-macros.h \
  elf32-target.h
elf32-lm32.lo: elf32-lm32.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/lm32.h \
  $(INCDIR)/elf/reloc-macros.h elf32-target.h
elf32-m32c.lo: elf32-m32c.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/m32c.h \
  $(INCDIR)/elf/reloc-macros.h $(INCDIR)/libiberty.h \
  elf32-target.h
elf32-m32r.lo: elf32-m32r.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/m32r.h \
  $(INCDIR)/elf/reloc-macros.h elf32-target.h
elf32-m68k.lo: elf32-m68k.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/hashtab.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/m68k.h \
  $(INCDIR)/elf/reloc-macros.h $(INCDIR)/opcode/m68k.h \
  elf32-target.h
elf32-m68hc11.lo: elf32-m68hc11.c $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/hashtab.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h $(INCDIR)/elf/internal.h elf32-m68hc1x.h \
  $(INCDIR)/elf/m68hc11.h $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/opcode/m68hc11.h elf32-target.h
elf32-m68hc12.lo: elf32-m68hc12.c $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/hashtab.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h $(INCDIR)/elf/internal.h elf32-m68hc1x.h \
  $(INCDIR)/elf/m68hc11.h $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/opcode/m68hc11.h elf32-target.h
elf32-m68hc1x.lo: elf32-m68hc1x.c $(INCDIR)/alloca-conf.h \
  $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h $(INCDIR)/hashtab.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h elf32-m68hc1x.h $(INCDIR)/elf/m68hc11.h \
  $(INCDIR)/elf/reloc-macros.h $(INCDIR)/opcode/m68hc11.h
elf32-m88k.lo: elf32-m88k.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/bfdlink.h elf32-target.h
elf-m10200.lo: elf-m10200.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/bfdlink.h elf32-target.h
elf-m10300.lo: elf-m10300.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/mn10300.h \
  $(INCDIR)/elf/reloc-macros.h $(INCDIR)/libiberty.h \
  elf32-target.h
elf32-mcore.lo: elf32-mcore.c $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/hashtab.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/mcore.h \
  $(INCDIR)/elf/reloc-macros.h elf32-target.h
elf32-mep.lo: elf32-mep.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/mep.h \
  $(INCDIR)/elf/reloc-macros.h $(INCDIR)/libiberty.h \
  elf32-target.h
elfxx-mips.lo: elfxx-mips.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/libiberty.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h $(INCDIR)/elf/internal.h $(INCDIR)/bfdlink.h \
  elfxx-mips.h $(INCDIR)/elf/mips.h $(INCDIR)/elf/reloc-macros.h \
  elf-vxworks.h $(INCDIR)/coff/sym.h $(INCDIR)/coff/symconst.h \
  $(INCDIR)/coff/ecoff.h $(INCDIR)/coff/mips.h $(INCDIR)/coff/external.h
elf32-mips.lo: elf32-mips.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/bfdlink.h genlink.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h $(INCDIR)/elf/internal.h elfxx-mips.h \
  $(INCDIR)/elf/mips.h $(INCDIR)/elf/reloc-macros.h elf-vxworks.h \
  $(INCDIR)/coff/sym.h $(INCDIR)/coff/symconst.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/ecoff.h $(INCDIR)/coff/mips.h $(INCDIR)/coff/external.h \
  ecoffswap.h elf32-target.h
elf32-mt.lo: elf32-mt.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/mt.h \
  $(INCDIR)/elf/reloc-macros.h elf32-target.h
elf32-msp430.lo: elf32-msp430.c $(INCDIR)/filenames.h \
  $(INCDIR)/libiberty.h $(INCDIR)/hashtab.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/external.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/elf/msp430.h $(INCDIR)/elf/reloc-macros.h \
  elf32-target.h
elf32-openrisc.lo: elf32-openrisc.c $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h $(INCDIR)/elf/internal.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/openrisc.h $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/libiberty.h elf32-target.h
elf32-or32.lo: elf32-or32.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/or32.h \
  $(INCDIR)/elf/reloc-macros.h $(INCDIR)/libiberty.h \
  elf32-target.h
elf32-pj.lo: elf32-pj.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/hashtab.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/pj.h \
  $(INCDIR)/elf/reloc-macros.h elf32-target.h
elf32-ppc.lo: elf32-ppc.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/hashtab.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/ppc.h \
  $(INCDIR)/elf/reloc-macros.h elf32-ppc.h elf-vxworks.h \
  elf32-target.h
elf32-sh64.lo: elf32-sh64.c $(INCDIR)/filenames.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/external.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/bfdlink.h $(srcdir)/../opcodes/sh64-opc.h \
  elf32-sh64.h elf32-sh.c $(INCDIR)/hashtab.h elf-vxworks.h \
  $(INCDIR)/elf/sh.h $(INCDIR)/elf/reloc-macros.h $(INCDIR)/libiberty.h \
  $(srcdir)/../opcodes/sh-opc.h elf32-sh-relocs.h elf32-target.h
elf32-sh64-com.lo: elf32-sh64-com.c $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h $(INCDIR)/elf/internal.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/sh.h $(INCDIR)/elf/reloc-macros.h elf32-sh64.h \
  $(srcdir)/../opcodes/sh64-opc.h
elf32-s390.lo: elf32-s390.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/hashtab.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/s390.h \
  $(INCDIR)/elf/reloc-macros.h elf32-target.h
elf32-sh.lo: elf32-sh.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/hashtab.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h $(INCDIR)/elf/internal.h elf-vxworks.h \
  $(INCDIR)/elf/sh.h $(INCDIR)/elf/reloc-macros.h $(INCDIR)/libiberty.h \
  $(srcdir)/../opcodes/sh-opc.h elf32-sh-relocs.h elf32-target.h
elf32-sh-symbian.lo: elf32-sh-symbian.c elf32-sh.c \
  $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h $(INCDIR)/hashtab.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h elf-vxworks.h $(INCDIR)/elf/sh.h \
  $(INCDIR)/elf/reloc-macros.h $(INCDIR)/libiberty.h \
  $(srcdir)/../opcodes/sh-opc.h elf32-sh-relocs.h elf32-target.h
elfxx-sparc.lo: elfxx-sparc.c $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/hashtab.h $(INCDIR)/libiberty.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/sparc.h $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/opcode/sparc.h elfxx-sparc.h elf-vxworks.h
elf32-sparc.lo: elf32-sparc.c $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/hashtab.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/sparc.h \
  $(INCDIR)/elf/reloc-macros.h $(INCDIR)/opcode/sparc.h \
  elfxx-sparc.h elf-vxworks.h elf32-target.h
elf32-spu.lo: elf32-spu.c $(INCDIR)/filenames.h $(INCDIR)/libiberty.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/hashtab.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/spu.h \
  $(INCDIR)/elf/reloc-macros.h elf32-spu.h elf32-target.h
elf32-v850.lo: elf32-v850.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/hashtab.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/v850.h \
  $(INCDIR)/elf/reloc-macros.h $(INCDIR)/libiberty.h \
  elf32-target.h
elf32-vax.lo: elf32-vax.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/hashtab.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/vax.h \
  $(INCDIR)/elf/reloc-macros.h elf32-target.h
elf32-xstormy16.lo: elf32-xstormy16.c $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h $(INCDIR)/elf/internal.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/xstormy16.h $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/libiberty.h elf32-target.h
elf32-xtensa.lo: elf32-xtensa.c $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/hashtab.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/xtensa.h \
  $(INCDIR)/elf/reloc-macros.h $(INCDIR)/xtensa-isa.h \
  $(INCDIR)/xtensa-config.h elf32-target.h
elf32-xc16x.lo: elf32-xc16x.c $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h $(INCDIR)/elf/internal.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/xc16x.h $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/elf/dwarf2.h $(INCDIR)/libiberty.h elf32-target.h
elf32.lo: elf32.c elfcode.h $(INCDIR)/filenames.h $(INCDIR)/libiberty.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/hashtab.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h $(INCDIR)/elf/internal.h elfcore.h
elflink.lo: elflink.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/hashtab.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h $(INCDIR)/elf/internal.h $(INCDIR)/safe-ctype.h \
  $(INCDIR)/libiberty.h $(INCDIR)/objalloc.h
elf-attrs.lo: elf-attrs.c $(INCDIR)/filenames.h $(INCDIR)/libiberty.h \
  $(INCDIR)/hashtab.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h $(INCDIR)/elf/internal.h $(INCDIR)/bfdlink.h
elf-strtab.lo: elf-strtab.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/bfdlink.h $(INCDIR)/libiberty.h
elf-eh-frame.lo: elf-eh-frame.c $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h $(INCDIR)/elf/internal.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/dwarf2.h
elf-vxworks.lo: elf-vxworks.c $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h $(INCDIR)/elf/internal.h $(INCDIR)/bfdlink.h \
  elf-vxworks.h $(INCDIR)/elf/vxworks.h
epoc-pe-arm.lo: epoc-pe-arm.c pe-arm.c $(INCDIR)/filenames.h \
  coff-arm.c $(INCDIR)/hashtab.h $(INCDIR)/coff/arm.h \
  $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/pe.h libcoff.h $(INCDIR)/bfdlink.h coffcode.h \
  peicode.h libpei.h
epoc-pei-arm.lo: epoc-pei-arm.c pei-arm.c $(INCDIR)/filenames.h \
  coff-arm.c $(INCDIR)/hashtab.h $(INCDIR)/coff/arm.h \
  $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/pe.h libcoff.h $(INCDIR)/bfdlink.h coffcode.h \
  peicode.h libpei.h
hp300bsd.lo: hp300bsd.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  libaout.h $(INCDIR)/bfdlink.h aout-target.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
hp300hpux.lo: hp300hpux.c $(INCDIR)/aout/hp300hpux.h \
  aoutx.h $(INCDIR)/filenames.h $(INCDIR)/safe-ctype.h \
  $(INCDIR)/bfdlink.h libaout.h $(INCDIR)/hashtab.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h \
  aout-target.h
som.lo: som.c $(INCDIR)/alloca-conf.h $(INCDIR)/filenames.h
i386aout.lo: i386aout.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/aout/aout64.h libaout.h $(INCDIR)/bfdlink.h \
  aout-target.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/ar.h
i386bsd.lo: i386bsd.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  libaout.h $(INCDIR)/bfdlink.h aout-target.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
i386dynix.lo: i386dynix.c $(INCDIR)/aout/dynix3.h aoutx.h \
  $(INCDIR)/filenames.h $(INCDIR)/safe-ctype.h $(INCDIR)/bfdlink.h \
  libaout.h $(INCDIR)/hashtab.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h \
  aout-target.h
i386freebsd.lo: i386freebsd.c freebsd.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h libaout.h $(INCDIR)/bfdlink.h aout-target.h \
  $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/ar.h
i386linux.lo: i386linux.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/ar.h libaout.h $(INCDIR)/bfdlink.h aout-target.h
i386lynx.lo: i386lynx.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  libaout.h $(INCDIR)/bfdlink.h $(INCDIR)/aout/aout64.h \
  aout-target.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/ar.h
i386msdos.lo: i386msdos.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  libaout.h $(INCDIR)/bfdlink.h
i386netbsd.lo: i386netbsd.c netbsd.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h libaout.h $(INCDIR)/bfdlink.h aout-target.h \
  $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/ar.h
i386mach3.lo: i386mach3.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/ar.h libaout.h $(INCDIR)/bfdlink.h aout-target.h
i386os9k.lo: i386os9k.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/bfdlink.h libaout.h $(INCDIR)/os9k.h
ieee.lo: ieee.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/ieee.h libieee.h $(INCDIR)/safe-ctype.h
m68k4knetbsd.lo: m68k4knetbsd.c netbsd.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h libaout.h $(INCDIR)/bfdlink.h aout-target.h \
  $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/ar.h
m68klinux.lo: m68klinux.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/ar.h libaout.h $(INCDIR)/bfdlink.h aout-target.h
m68knetbsd.lo: m68knetbsd.c netbsd.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h libaout.h $(INCDIR)/bfdlink.h aout-target.h \
  $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/ar.h
m88kmach3.lo: m88kmach3.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  libaout.h $(INCDIR)/bfdlink.h aout-target.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
m88kopenbsd.lo: m88kopenbsd.c netbsd.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h libaout.h $(INCDIR)/bfdlink.h aout-target.h \
  $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/ar.h
mach-o.lo: mach-o.c $(INCDIR)/filenames.h mach-o.h \
  $(INCDIR)/hashtab.h $(INCDIR)/libiberty.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def mach-o-target.c
mipsbsd.lo: mipsbsd.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  libaout.h $(INCDIR)/bfdlink.h aout-target.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
newsos3.lo: newsos3.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/ar.h libaout.h $(INCDIR)/bfdlink.h aout-target.h
nlm.lo: nlm.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  libnlm.h $(INCDIR)/nlm/common.h $(INCDIR)/nlm/internal.h \
  $(INCDIR)/nlm/external.h
nlm32-i386.lo: nlm32-i386.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/nlm/i386-ext.h libnlm.h $(INCDIR)/nlm/common.h \
  $(INCDIR)/nlm/internal.h $(INCDIR)/nlm/external.h nlmswap.h \
  nlm-target.h
nlm32-sparc.lo: nlm32-sparc.c $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h $(INCDIR)/nlm/sparc32-ext.h libnlm.h \
  $(INCDIR)/nlm/common.h $(INCDIR)/nlm/internal.h $(INCDIR)/nlm/external.h \
  nlmswap.h nlm-target.h
nlm32-ppc.lo: nlm32-ppc.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/nlm/ppc-ext.h libnlm.h $(INCDIR)/nlm/common.h \
  $(INCDIR)/nlm/internal.h $(INCDIR)/nlm/external.h nlmswap.h \
  nlm-target.h
nlm32.lo: nlm32.c nlmcode.h $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  libnlm.h $(INCDIR)/nlm/common.h $(INCDIR)/nlm/internal.h \
  $(INCDIR)/nlm/external.h
ns32knetbsd.lo: ns32knetbsd.c netbsd.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h libaout.h $(INCDIR)/bfdlink.h aout-target.h \
  $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/ar.h
oasys.lo: oasys.c $(INCDIR)/filenames.h $(INCDIR)/safe-ctype.h \
  $(INCDIR)/hashtab.h $(INCDIR)/oasys.h liboasys.h
pc532-mach.lo: pc532-mach.c $(INCDIR)/filenames.h libaout.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/hashtab.h $(INCDIR)/aout/aout64.h \
  aout-target.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/ar.h
pdp11.lo: pdp11.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  libaout.h $(INCDIR)/bfdlink.h aout-target.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h \
  $(INCDIR)/safe-ctype.h
pef.lo: pef.c $(INCDIR)/filenames.h $(INCDIR)/safe-ctype.h \
  pef.h pef-traceback.h $(INCDIR)/hashtab.h $(INCDIR)/libiberty.h
pe-arm.lo: pe-arm.c $(INCDIR)/filenames.h coff-arm.c \
  $(INCDIR)/hashtab.h $(INCDIR)/coff/arm.h $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h libcoff.h \
  $(INCDIR)/bfdlink.h coffcode.h peicode.h libpei.h
pei-arm.lo: pei-arm.c $(INCDIR)/filenames.h coff-arm.c \
  $(INCDIR)/hashtab.h $(INCDIR)/coff/arm.h $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h libcoff.h \
  $(INCDIR)/bfdlink.h coffcode.h peicode.h libpei.h
pe-arm-wince.lo: pe-arm-wince.c $(INCDIR)/filenames.h \
  pe-arm.c coff-arm.c $(INCDIR)/hashtab.h $(INCDIR)/coff/arm.h \
  $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/pe.h libcoff.h $(INCDIR)/bfdlink.h coffcode.h \
  peicode.h libpei.h
pei-arm-wince.lo: pei-arm-wince.c pei-arm.c $(INCDIR)/filenames.h \
  coff-arm.c $(INCDIR)/hashtab.h $(INCDIR)/coff/arm.h \
  $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/pe.h libcoff.h $(INCDIR)/bfdlink.h coffcode.h \
  peicode.h libpei.h
pe-i386.lo: pe-i386.c $(INCDIR)/filenames.h coff-i386.c \
  $(INCDIR)/hashtab.h $(INCDIR)/coff/i386.h $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h libcoff.h \
  $(INCDIR)/bfdlink.h coffcode.h peicode.h libpei.h
pei-i386.lo: pei-i386.c $(INCDIR)/filenames.h coff-i386.c \
  $(INCDIR)/hashtab.h $(INCDIR)/coff/i386.h $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h libcoff.h \
  $(INCDIR)/bfdlink.h coffcode.h peicode.h libpei.h
pe-mcore.lo: pe-mcore.c $(INCDIR)/filenames.h coff-mcore.c \
  $(INCDIR)/hashtab.h $(INCDIR)/coff/mcore.h $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h libcoff.h \
  $(INCDIR)/bfdlink.h coffcode.h peicode.h libpei.h
pei-mcore.lo: pei-mcore.c $(INCDIR)/filenames.h coff-mcore.c \
  $(INCDIR)/hashtab.h $(INCDIR)/coff/mcore.h $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h libcoff.h \
  $(INCDIR)/bfdlink.h coffcode.h peicode.h libpei.h
pe-ppc.lo: pe-ppc.c $(INCDIR)/filenames.h coff-ppc.c \
  $(INCDIR)/hashtab.h $(INCDIR)/coff/powerpc.h $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h libcoff.h \
  $(INCDIR)/bfdlink.h coffcode.h peicode.h libpei.h
pei-ppc.lo: pei-ppc.c $(INCDIR)/filenames.h coff-ppc.c \
  $(INCDIR)/hashtab.h $(INCDIR)/coff/powerpc.h $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h libcoff.h \
  $(INCDIR)/bfdlink.h coffcode.h peicode.h libpei.h
pe-sh.lo: pe-sh.c $(INCDIR)/filenames.h coff-sh.c $(INCDIR)/libiberty.h \
  $(INCDIR)/hashtab.h $(INCDIR)/bfdlink.h $(INCDIR)/coff/sh.h \
  $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/pe.h libcoff.h coffcode.h peicode.h \
  libpei.h
pei-sh.lo: pei-sh.c $(INCDIR)/filenames.h coff-sh.c \
  $(INCDIR)/libiberty.h $(INCDIR)/hashtab.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/sh.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/pe.h libcoff.h coffcode.h peicode.h \
  libpei.h
pe-mips.lo: pe-mips.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/coff/mipspe.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/pe.h libcoff.h $(INCDIR)/bfdlink.h coffcode.h \
  peicode.h libpei.h
pei-mips.lo: pei-mips.c $(INCDIR)/filenames.h pe-mips.c \
  $(INCDIR)/hashtab.h $(INCDIR)/coff/mipspe.h $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h libcoff.h \
  $(INCDIR)/bfdlink.h coffcode.h peicode.h libpei.h
ppcboot.lo: ppcboot.c $(INCDIR)/filenames.h $(INCDIR)/safe-ctype.h \
  $(INCDIR)/hashtab.h
reloc16.lo: reloc16.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/bfdlink.h genlink.h $(INCDIR)/coff/internal.h \
  libcoff.h
riscix.lo: riscix.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  libaout.h $(INCDIR)/bfdlink.h $(INCDIR)/aout/aout64.h \
  aout-target.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/ar.h
sparclinux.lo: sparclinux.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/ar.h libaout.h $(INCDIR)/bfdlink.h aout-target.h
sparclynx.lo: sparclynx.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/aout/sun4.h libaout.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/ar.h aout-target.h
sparcnetbsd.lo: sparcnetbsd.c netbsd.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h libaout.h $(INCDIR)/bfdlink.h aout-target.h \
  $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/ar.h
sunos.lo: sunos.c $(INCDIR)/bfdlink.h libaout.h aoutf1.h \
  $(INCDIR)/filenames.h $(INCDIR)/hashtab.h $(INCDIR)/aout/sun4.h \
  $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/ar.h aout-target.h
vaxnetbsd.lo: vaxnetbsd.c netbsd.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h libaout.h $(INCDIR)/bfdlink.h aout-target.h \
  $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/ar.h
vax1knetbsd.lo: vax1knetbsd.c netbsd.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h libaout.h $(INCDIR)/bfdlink.h aout-target.h \
  $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/ar.h
vaxbsd.lo: vaxbsd.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  libaout.h $(INCDIR)/bfdlink.h aout-target.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
versados.lo: versados.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
d3517 19
a3535 6
vms.lo: vms.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/hashtab.h vms.h
vms-gsd.lo: vms-gsd.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/hashtab.h vms.h
vms-hdr.lo: vms-hdr.c $(INCDIR)/filenames.h bfdver.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/safe-ctype.h $(INCDIR)/hashtab.h \
d3537 122
a3658 39
vms-misc.lo: vms-misc.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/hashtab.h vms.h
vms-tir.lo: vms-tir.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/hashtab.h vms.h
vmsutil.lo: vmsutil.c vmsutil.h
xcofflink.lo: xcofflink.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/hashtab.h $(INCDIR)/coff/internal.h $(INCDIR)/coff/xcoff.h \
  libcoff.h libxcoff.h $(INCDIR)/libiberty.h
xsym.lo: xsym.c $(INCDIR)/alloca-conf.h $(INCDIR)/filenames.h \
  xsym.h $(INCDIR)/hashtab.h
xtensa-isa.lo: xtensa-isa.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/xtensa-isa.h $(INCDIR)/xtensa-isa-internal.h
xtensa-modules.lo: xtensa-modules.c $(INCDIR)/xtensa-isa.h \
  $(INCDIR)/xtensa-isa-internal.h
aix5ppc-core.lo: aix5ppc-core.c $(INCDIR)/filenames.h
aout64.lo: aout64.c aoutx.h $(INCDIR)/filenames.h $(INCDIR)/safe-ctype.h \
  $(INCDIR)/bfdlink.h libaout.h $(INCDIR)/hashtab.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
coff-alpha.lo: coff-alpha.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/hashtab.h $(INCDIR)/coff/internal.h $(INCDIR)/coff/sym.h \
  $(INCDIR)/coff/symconst.h $(INCDIR)/coff/ecoff.h $(INCDIR)/coff/alpha.h \
  $(INCDIR)/aout/ar.h libcoff.h libecoff.h coffswap.h \
  ecoffswap.h
coff64-rs6000.lo: coff64-rs6000.c $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/hashtab.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/xcoff.h $(INCDIR)/coff/rs6k64.h libcoff.h \
  libxcoff.h coffcode.h coffswap.h
demo64.lo: demo64.c aoutf1.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h $(INCDIR)/aout/sun4.h libaout.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h aout-target.h
pei-ia64.lo: pei-ia64.c $(INCDIR)/filenames.h coff-ia64.c \
  $(INCDIR)/hashtab.h $(INCDIR)/coff/ia64.h $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h libcoff.h \
  $(INCDIR)/bfdlink.h coffcode.h peicode.h libpei.h
elf64-x86-64.lo: elf64-x86-64.c $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/hashtab.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h $(INCDIR)/elf/internal.h bfd_stdint.h \
  $(INCDIR)/elf/x86-64.h $(INCDIR)/elf/reloc-macros.h \
d3660 114
a3773 28
elf64-alpha.lo: elf64-alpha.c $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h $(INCDIR)/elf/internal.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/alpha.h $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/sym.h $(INCDIR)/coff/symconst.h \
  $(INCDIR)/coff/ecoff.h $(INCDIR)/coff/alpha.h $(INCDIR)/aout/ar.h \
  libcoff.h libecoff.h ecoffswap.h elf64-target.h
elf64-hppa.lo: elf64-hppa.c $(INCDIR)/alloca-conf.h \
  $(INCDIR)/filenames.h $(INCDIR)/hashtab.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/external.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/elf/hppa.h $(INCDIR)/elf/reloc-macros.h \
  libhppa.h elf64-hppa.h elf-hppa.h elf64-target.h
elf64-gen.lo: elf64-gen.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/bfdlink.h elf64-target.h
elfn32-mips.lo: elfn32-mips.c $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h $(INCDIR)/bfdlink.h genlink.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/external.h $(INCDIR)/elf/internal.h \
  elfxx-mips.h $(INCDIR)/elf/mips.h $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/coff/sym.h $(INCDIR)/coff/symconst.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/ecoff.h $(INCDIR)/coff/mips.h $(INCDIR)/coff/external.h \
  ecoffswap.h elf32-target.h
elf64-mips.lo: elf64-mips.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/aout/ar.h $(INCDIR)/bfdlink.h genlink.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/external.h $(INCDIR)/elf/internal.h \
  elfxx-mips.h $(INCDIR)/elf/mips.h $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/coff/sym.h $(INCDIR)/coff/symconst.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/ecoff.h $(INCDIR)/coff/alpha.h ecoffswap.h \
d3775 11
a3785 4
elf64-mmix.lo: elf64-mmix.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/mmix.h \
  $(INCDIR)/elf/reloc-macros.h $(INCDIR)/opcode/mmix.h \
d3787 26
a3812 17
elf64-ppc.lo: elf64-ppc.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/hashtab.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/ppc64.h \
  $(INCDIR)/elf/reloc-macros.h elf64-ppc.h elf64-target.h
elf64-s390.lo: elf64-s390.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/hashtab.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/s390.h \
  $(INCDIR)/elf/reloc-macros.h elf64-target.h
elf32-score.lo: elf32-score.c $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h $(INCDIR)/libiberty.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/external.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/elf/score.h $(INCDIR)/elf/reloc-macros.h \
  elf32-score.h elf32-target.h
elf32-score7.lo: elf32-score7.c $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h $(INCDIR)/libiberty.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/external.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/elf/score.h $(INCDIR)/elf/reloc-macros.h \
d3814 45
a3858 14
elf64-sh64.lo: elf64-sh64.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/hashtab.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/sh.h \
  $(INCDIR)/elf/reloc-macros.h elf64-target.h
elf64-sparc.lo: elf64-sparc.c $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h $(INCDIR)/elf/internal.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/sparc.h $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/opcode/sparc.h elfxx-sparc.h elf64-target.h
elf64.lo: elf64.c elfcode.h $(INCDIR)/filenames.h $(INCDIR)/libiberty.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/hashtab.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h $(INCDIR)/elf/internal.h elfcore.h
mmo.lo: mmo.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/libiberty.h $(INCDIR)/elf/mmix.h $(INCDIR)/elf/reloc-macros.h \
d3860 131
a3990 42
nlm32-alpha.lo: nlm32-alpha.c $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h $(INCDIR)/nlm/alpha-ext.h libnlm.h \
  $(INCDIR)/nlm/common.h $(INCDIR)/nlm/internal.h $(INCDIR)/nlm/external.h \
  nlmswap.h nlm-target.h
nlm64.lo: nlm64.c nlmcode.h $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  libnlm.h $(INCDIR)/nlm/common.h $(INCDIR)/nlm/internal.h \
  $(INCDIR)/nlm/external.h
coff-x86_64.lo: coff-x86_64.c $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h $(INCDIR)/coff/x86_64.h $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h libcoff.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/libiberty.h coffcode.h \
  coffswap.h
pe-x86_64.lo: pe-x86_64.c $(INCDIR)/filenames.h coff-x86_64.c \
  $(INCDIR)/hashtab.h $(INCDIR)/coff/x86_64.h $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h libcoff.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/libiberty.h coffcode.h \
  peicode.h libpei.h
pei-x86_64.lo: pei-x86_64.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/coff/x86_64.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/pe.h libcoff.h $(INCDIR)/bfdlink.h libpei.h \
  $(INCDIR)/libiberty.h coff-x86_64.c coffcode.h peicode.h
aix386-core.lo: aix386-core.c $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h $(INCDIR)/coff/i386.h $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h libcoff.h $(INCDIR)/bfdlink.h
hpux-core.lo: hpux-core.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
irix-core.lo: irix-core.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
lynx-core.lo: lynx-core.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
osf-core.lo: osf-core.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
sco5-core.lo: sco5-core.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  libaout.h $(INCDIR)/bfdlink.h
trad-core.lo: trad-core.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  libaout.h $(INCDIR)/bfdlink.h
cisco-core.lo: cisco-core.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
elf32-ia64.lo: elf32-ia64.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/bfdlink.h $(INCDIR)/opcode/ia64.h \
  $(INCDIR)/elf/ia64.h $(INCDIR)/elf/reloc-macros.h $(INCDIR)/objalloc.h \
  elf32-target.h
elf64-ia64.lo: elf64-ia64.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/bfdlink.h $(INCDIR)/opcode/ia64.h \
  $(INCDIR)/elf/ia64.h $(INCDIR)/elf/reloc-macros.h $(INCDIR)/objalloc.h \
d3992 33
a4024 9
peigen.lo: peigen.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/i386.h $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/pe.h libcoff.h $(INCDIR)/bfdlink.h libpei.h
pepigen.lo: pepigen.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/ia64.h $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/pe.h libcoff.h $(INCDIR)/bfdlink.h libpei.h
pex64igen.lo: pex64igen.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/x86_64.h $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/pe.h libcoff.h $(INCDIR)/bfdlink.h libpei.h
@


1.226
log
@        * verilog.c: New file.
        * Makefile.am (BFD32_LIBS): Add verilog.c.
        (BFD32_LIBS_CFILES): Add verilog.c.
        (verilog.lo): New build rule.
        * Makefile.in: Rebuilt.
        * targets.c: Add verilog support.
        * bfd.c (tdata union): Add Verilog private data field.
        * bfd-in2.h: Regenerate.

        * bfdint.texi (BFD target vector miscellaneous): Mention verilog
        flavour.

        * NEWS: Mention verilog support added to bfd.
@
text
@a1073 2
verilog.lo: verilog.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/libiberty.h $(INCDIR)/safe-ctype.h
d1093 2
d1400 4
a1403 4
elf32-moxie.lo: elf32-moxie.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/moxie.h \
  $(INCDIR)/elf/reloc-macros.h $(INCDIR)/elf/dwarf2.h \
a1551 10
elf32-score.lo: elf32-score.c $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h $(INCDIR)/libiberty.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/external.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/elf/score.h $(INCDIR)/elf/reloc-macros.h \
  elf32-score.h elf32-target.h
elf32-score7.lo: elf32-score7.c $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h $(INCDIR)/libiberty.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/external.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/elf/score.h $(INCDIR)/elf/reloc-macros.h \
  elf32-score.h
d1849 1
a1849 1
  libcoff.h libxcoff.h
d1873 4
a1876 5
pei-ia64.lo: pei-ia64.c $(INCDIR)/filenames.h \
  coff-ia64.c $(INCDIR)/hashtab.h $(INCDIR)/coff/ia64.h \
  $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/pe.h libcoff.h $(INCDIR)/bfdlink.h coffcode.h \
  peicode.h libpei.h
d1924 10
d1966 4
a1969 5
pei-x86_64.lo: pei-x86_64.c $(INCDIR)/filenames.h coff-x86_64.c \
  $(INCDIR)/hashtab.h $(INCDIR)/coff/x86_64.h $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h libcoff.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/libiberty.h coffcode.h \
  peicode.h libpei.h
@


1.225
log
@bfd/

2009-04-17  H.J. Lu  <hongjiu.lu@@intel.com>

	PR binutils/10074
	* coffcode.h (bfd_pei_p): New.

	* config.bfd: Remove bfd_efi_bsdrv_ia32_vec,
	bfd_efi_rtdrv_ia32_vec, bfd_efi_bsdrv_x86_64_vec,
	bfd_efi_rtdrv_x86_64_vec, bfd_efi_bsdrv_ia64_vec and
	bfd_efi_rtdrv_ia64_vec.  Replace bfd_efi_app_ia32_vec,
	bfd_efi_app_x86_64_vec and bfd_efi_app_ia64_vec with
	i386pei_vec, x86_64pei_vec and bfd_pei_ia64_vec, respectively.

	* configure.in: Remove bfd_efi_bsdrv_ia32_vec,
	bfd_efi_rtdrv_ia32_vec, bfd_efi_bsdrv_x86_64_vec,
	bfd_efi_rtdrv_x86_64_vec,
	bfd_efi_bsdrv_ia64_vec and bfd_efi_rtdrv_ia64_vec.  Replace
	bfd_efi_ia64_vec with bfd_pei_ia64_vec.
	* targets.c: Likewise.

	* configure: Regenerated.
	* libcoff.h: Likewise.
	* Makefile.in: Likewise.

	* efi-app-ia32.c: Removed.
	* efi-app-x86_64.c: Likewise.
	* efi-bsdrv-ia32.c: Likewise.
	* efi-bsdrv-ia64.c: Likewise.
	* efi-bsdrv-x86_64.c: Likewise.
	* efi-rtdrv-ia32.c: Likewise.
	* efi-rtdrv-ia64.c: Likewise.
	* efi-rtdrv-x86_64.c: Likewise.
	* efi-rtdrv-ia32.c: Likewise.

	* efi-app-ia64.c: Moved to ...
	* pei-ia64.c: This.
	(TARGET_SYM): Set to bfd_pei_ia64_vec.
	(TARGET_NAME): Set to pei-ia64.

	* libpei.h (bfd_target_pei_p): Removed.
	(bfd_target_pei_arch): Likewise.
	(bfd_target_efi_app_p): Likewise.
	(bfd_target_efi_app_arch): Likewise.
	(bfd_target_efi_bsdrv_p): Likewise.
	(bfd_target_efi_bsdrv_arch): Likewise.
	(bfd_target_efi_rtdrv_p): Likewise.
	(bfd_target_efi_rtdrv_arch): Likewise.
	(bfd_pe_executable_p): Likewise.

	* Makefile.am (BFD32_BACKENDS): Remove efi-app-ia32.lo,
	efi-bsdrv-ia32.lo and efi-rtdrv-ia32.lo.
	(BFD32_BACKENDS_CFILES): Remove efi-app-ia32.c, efi-bsdrv-ia32.c
	and efi-rtdrv-ia32.c.
	(BFD64_BACKENDS): Remove efi-app-ia64.lo, efi-bsdrv-ia64.lo,
	efi-rtdrv-ia64.lo, efi-app-x86_64.lo, efi-bsdrv-x86_64.lo and
	efi-rtdrv-x86_64.lo. Add pei-ia64.lo.
	(BFD64_BACKENDS_CFILES): Remove efi-app-ia64.c, efi-bsdrv-ia64.c,
	efi-rtdrv-ia64.c, efi-app-x86_64.c, efi-bsdrv-x86_64.c and
	efi-rtdrv-x86_64.c. Add pei-ia64.c.
	(efi-app-ia64.lo): Removed.
	(efi-bsdrv-ia32.lo): Likewise.
	(efi-rtdrv-ia32.lo): Likewise.
	(efi-app-ia64.lo): Likewise.
	(efi-bsdrv-ia64.lo): Likewise.
	(efi-rtdrv-ia64.lo): Likewise.
	(efi-app-x86_64.lo): Likewise.
	(efi-bsdrv-x86_64.lo): Likewise.
	(efi-rtdrv-x86_64.lo): Likewise.
	(pei-ia64.lo): New.

	* peicode.h (coff_swap_scnhdr_in): Replace bfd_pe_executable_p
	with bfd_pei_p.
	(arch_type): Removed.
	(pe_arch): Likewise.
	(pe_bfd_object_p): Just return coff_object_p.

	* peXXigen.c (_bfd_XXi_swap_scnhdr_out): Replace
	bfd_pe_executable_p with bfd_pei_p.

binutils/

2009-04-17  H.J. Lu  <hongjiu.lu@@intel.com>

	PR binutils/10074
	* objcopy.c: Include coff/i386.h and coff/pe.h.
	(pe_file_alignment): New.
	(pe_heap_commit): Likewise.
	(pe_heap_reserve): Likewise.
	(pe_image_base): Likewise.
	(pe_section_alignment): Likewise.
	(pe_stack_commit): Likewise.
	(pe_stack_reserve): Likewise.
	(pe_subsystem): Likewise.
	(pe_major_subsystem_version): Likewise.
	(pe_minor_subsystem_version): Likewise.
	(set_pe_subsystem): Likewise.
	(convert_efi_target): Likewise.
	(command_line_switch): Add OPTION_FILE_ALIGNMENT,
	OPTION_HEAP, OPTION_IMAGE_BASE, OPTION_SECTION_ALIGNMENT,
	OPTION_STACK and OPTION_SUBSYSTEM.
	(copy_options): Likewise.
	(copy_usage): Add --file-alignment, --heap, --image-base,
	--section-alignment, --stack and --subsystem.
	(copy_object): Set up PE parameters.
	(copy_main): Process Add OPTION_FILE_ALIGNMENT,
	OPTION_HEAP, OPTION_IMAGE_BASE, OPTION_SECTION_ALIGNMENT,
	OPTION_STACK and OPTION_SUBSYSTEM.   Convert EFI target to
	PEI target.

	* NEWS: Mention --file-alignment, --heap, --image-base,
	--section-alignment, --stack and --subsystem command line
	options for objcopy.

	* doc/binutils.texi: Document --file-alignment, --heap,
	--image-base, --section-alignment, --stack and --subsystem
	command line options for objcopy.
@
text
@d46 1
a46 1
	merge.lo dwarf2.lo simple.lo compress.lo
d56 1
a56 1
	merge.c dwarf2.c simple.c compress.c
d1074 2
@


1.224
log
@Add new binutils target: moxie
@
text
@a244 3
	efi-app-ia32.lo \
	efi-bsdrv-ia32.lo \
	efi-rtdrv-ia32.lo \
a424 3
	efi-app-ia32.c \
	efi-bsdrv-ia32.c \
	efi-rtdrv-ia32.c \
d570 1
a570 6
	efi-app-ia64.lo \
	efi-bsdrv-ia64.lo \
	efi-rtdrv-ia64.lo \
	efi-app-x86_64.lo \
	efi-bsdrv-x86_64.lo \
	efi-rtdrv-x86_64.lo \
d602 1
a602 6
	efi-app-ia64.c \
	efi-bsdrv-ia64.c \
	efi-rtdrv-ia64.c \
	efi-app-x86_64.c \
	efi-bsdrv-x86_64.c \
	efi-rtdrv-x86_64.c \
a1332 15
efi-app-ia32.lo: efi-app-ia32.c $(INCDIR)/filenames.h \
  coff-i386.c $(INCDIR)/hashtab.h $(INCDIR)/coff/i386.h \
  $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/pe.h libcoff.h $(INCDIR)/bfdlink.h coffcode.h \
  peicode.h libpei.h
efi-bsdrv-ia32.lo: efi-bsdrv-ia32.c $(INCDIR)/filenames.h \
  coff-i386.c $(INCDIR)/hashtab.h $(INCDIR)/coff/i386.h \
  $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/pe.h libcoff.h $(INCDIR)/bfdlink.h coffcode.h \
  peicode.h libpei.h
efi-rtdrv-ia32.lo: efi-rtdrv-ia32.c $(INCDIR)/filenames.h \
  coff-i386.c $(INCDIR)/hashtab.h $(INCDIR)/coff/i386.h \
  $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/pe.h libcoff.h $(INCDIR)/bfdlink.h coffcode.h \
  peicode.h libpei.h
d1881 1
a1881 1
efi-app-ia64.lo: efi-app-ia64.c $(INCDIR)/filenames.h \
a1885 25
efi-bsdrv-ia64.lo: efi-bsdrv-ia64.c $(INCDIR)/filenames.h \
  coff-ia64.c $(INCDIR)/hashtab.h $(INCDIR)/coff/ia64.h \
  $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/pe.h libcoff.h $(INCDIR)/bfdlink.h coffcode.h \
  peicode.h libpei.h
efi-rtdrv-ia64.lo: efi-rtdrv-ia64.c $(INCDIR)/filenames.h \
  coff-ia64.c $(INCDIR)/hashtab.h $(INCDIR)/coff/ia64.h \
  $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/pe.h libcoff.h $(INCDIR)/bfdlink.h coffcode.h \
  peicode.h libpei.h
efi-app-x86_64.lo: efi-app-x86_64.c $(INCDIR)/filenames.h \
  coff-x86_64.c $(INCDIR)/hashtab.h $(INCDIR)/coff/x86_64.h \
  $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/pe.h libcoff.h $(INCDIR)/bfdlink.h $(INCDIR)/libiberty.h \
  coffcode.h peicode.h libpei.h
efi-bsdrv-x86_64.lo: efi-bsdrv-x86_64.c $(INCDIR)/filenames.h \
  coff-x86_64.c $(INCDIR)/hashtab.h $(INCDIR)/coff/x86_64.h \
  $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/pe.h libcoff.h $(INCDIR)/bfdlink.h $(INCDIR)/libiberty.h \
  coffcode.h peicode.h libpei.h
efi-rtdrv-x86_64.lo: efi-rtdrv-x86_64.c $(INCDIR)/filenames.h \
  coff-x86_64.c $(INCDIR)/hashtab.h $(INCDIR)/coff/x86_64.h \
  $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/pe.h libcoff.h $(INCDIR)/bfdlink.h $(INCDIR)/libiberty.h \
  coffcode.h peicode.h libpei.h
@


1.223
log
@        * Makefile.am (BFD32_BACKENDS): Remove elf32-score and
        elf32-score7 files.
        (BFD32_BACKEND_CFILES): Likewise.
        (BFD64_BACKENDS): Add elf32-score and elf32-score7 files.
        (BFD64_BACKENDS_CFILES): Likewise.
        * Makefile.in: Regenerate.
        * config.bfd: More Score targets into BFD64 list.
        * configure.in: Move score vectors to 64-bit list.
        * targets.c: Likewise.

        * score-dis.c: Only compile when 64-bit bfds are enabled.
@
text
@d77 1
d145 1
d263 1
d446 1
d1126 1
d1429 5
@


1.222
log
@include/
	* alloca-conf.h: Revise based on autoconf-2.61, autoconf-2.13
	documentation.
bfd/
	* elf32-m68hc1x.c: Include alloca-conf.h.
	* xsym.c: Likewise.
	* elf64-hppa.c: Likewise.  Remove existing #if's handling alloca.
	* som.c: Likewise.
	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.
binutils/
	* sysdep.h: Include alloca-conf.h instead of config.h and remove
	existing #if's handling alloca.
	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.
gas/
	* as.h: Include alloca-conf.h instead of config.h and remove
	existing #if's handling alloca.
	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.
opcodes/
	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.
	* openrisc-opc.c: Regenerate.
ld/
	* ld.h: Remove alloca handling.
@
text
@a290 2
	elf32-score.lo \
	elf32-score7.lo \
a474 2
	elf32-score.c \
	elf32-score7.c \
d587 2
d624 2
@


1.221
log
@make dep-am and regen
opcodes/
	* Makefile.am (HFILES): Move lm32-desc.h and lm32-opc.h from..
	(CFILES): ..here.
@
text
@d1490 5
a1494 5
elf32-m68hc1x.lo: elf32-m68hc1x.c $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/hashtab.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h $(INCDIR)/elf/internal.h elf32-m68hc1x.h \
  $(INCDIR)/elf/m68hc11.h $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/opcode/m68hc11.h
d1669 1
a1669 1
som.lo: som.c $(INCDIR)/filenames.h
d1879 2
a1880 1
xsym.lo: xsym.c $(INCDIR)/filenames.h xsym.h $(INCDIR)/hashtab.h
d1944 5
a1948 5
elf64-hppa.lo: elf64-hppa.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/hppa.h \
  $(INCDIR)/elf/reloc-macros.h libhppa.h elf64-hppa.h \
  elf-hppa.h elf64-target.h
@


1.220
log
@Add support for Score7 architecture.
@
text
@d1055 4
a1058 5
  $(INCDIR)/demangle.h $(INCDIR)/libiberty.h $(INCDIR)/safe-ctype.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/hashtab.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/sym.h libcoff.h libecoff.h $(INCDIR)/coff/ecoff.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h
d1462 4
a1470 4
elf32-lm32.lo: elf32-lm32.c $(INCDIR)/filenames.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/elf/lm32.h $(INCDIR)/elf/reloc-macros.h \
  elf32-target.h
d1574 2
a1575 2
  $(INCDIR)/bfdlink.h elf32-score.h $(INCDIR)/elf/score.h $(INCDIR)/elf/reloc-macros.h \
  elf32-target.h
d1579 2
a1580 2
  $(INCDIR)/bfdlink.h elf32-score.h $(INCDIR)/elf/score.h $(INCDIR)/elf/reloc-macros.h \
  elf32-target.h
d1725 2
a1726 1
  $(INCDIR)/hashtab.h $(INCDIR)/libiberty.h mach-o-target.c
d1875 1
a1875 1
vmsutil.lo: vmsutil.c vmsutil.h $(INCDIR)/ansidecl.h
@


1.219
log
@bfd:
2009-02-03  Carlos O'Donell  <carlos@@codesourcery.com>

	* configure.in: AC_SUBST pdfdir.
	* Makefile.am: Add install-pdf, install-pdf-am
	and install-pdf-recursive targets. Define pdfdir.
	* doc/Makefile.am: Define pdf__strip_dir. Add
	install-pdf and install-pdf-am targets.
	* po/Make-in: Add install-pdf target.
	* configure: Regenerate.
	* Makefile.in: Regenerate
	* doc/Makefile.in: Regenerate.

binutils:
2009-02-03  Carlos O'Donell  <carlos@@codesourcery.com>

	* configure.in: AC_SUBST pdfdir.
	* Makefile.am: Add install-pdf, install-pdf-am,
	and install-pdf-recursive targets.
	* doc/Makefile.am: Define pdf__strip_dir. Add
	install-pdf and install-pdf-am targets.
	* po/Make-in: Add install-pdf target.
	* configure: Regenerate.
	* Makefile.in: Regenerate.
	* doc/Makefile.in: Regenerate.

etc:
2009-02-03  Carlos O'Donell  <carlos@@codesourcery.com>

	* configure.in: AC_SUBST pdfdir.
	* configure: Regenerate.

gas:
2009-02-03  Carlos O'Donell  <carlos@@codesourcery.com>

	* configure.in: AC_SUBST pdfdir.
	* Makefile.am: Add install-pdf, install-pdf-am,
	and install-pdf-recursive targets.
	* doc/Makefile.am: Define pdf__strip_dir. Add
	install-pdf and install-pdf-am targets.
	* po/Make-in: Add install-pdf target.
	* configure: Regenerate.
	* Makefile.in: Regenerate.
	* doc/Makefile.in: Regenerate.

gprof:
2009-02-03  Carlos O'Donell  <carlos@@codesourcery.com>

	* configure.in: AC_SUBST pdfdir.
	* Makefile.am: Add install-pdf, install-pdf-am,
	and install-pdf-recursive targets. Define pdf__strip_dir.
	* po/Make-in: Add install-pdf target.
	* configure: Regenerate.
	* Makefile.in: Regenerate.

ld:
2009-02-03  Carlos O'Donell  <carlos@@codesourcery.com>

	* configure.in: AC_SUBST pdfdir.
	* Makefile.am: Add install-pdf, install-pdf-am,
	and install-pdf-recursive targets. Define pdf__strip_dir.
	* po/Make-in: Add install-pdf target.
	* configure: Regenerate.
	* Makefile.in: Regenerate.

opcodes:
2009-02-03  Carlos O'Donell  <carlos@@codesourcery.com>

	* Makefile.am: Add install-pdf target.
	* po/Make-in: Add install-pdf target.
	* Makefile.in: Regenerate.
@
text
@d292 1
d478 1
d1575 6
a1580 1
  $(INCDIR)/bfdlink.h $(INCDIR)/elf/score.h $(INCDIR)/elf/reloc-macros.h \
@


1.218
log
@bfd/
	* Makefile.am (libbfd_la_LIBADD, libbfd_la_LDFLAGS): Substitute
	SHARED_LIBADD and SHARED_LDFLAGS rather than WIN32LIBADD, WIN32LDFLAGS.
	* configure.in (commonbfdlib): Delete.
	(SHARED_LDFLAGS): Rename from WIN32LDFLAGS/
	(SHARED_LIBADD): Rename from WIN32LIBADD.  Add pic libiberty if such
	is available, not just for linux.
	* po/SRC-POTFILES.in: Regenerate.
	* Makefile.in: Regenerate.
	* configure: Regenerate.
opcodes/
	* configure.in (commonbfdlib): Delete.
	(SHARED_LIBADD): Add pic libiberty if such is available.
	* configure: Regenerate.
	* po/POTFILES.in: Regenerate.
binutils/
	* configure.in (commonbfdlib): Delete.
	* configure: Regenerate.
gas/
	* configure.in (commonbfdlib): Delete.
	* configure: Regenerate.
	* po/POTFILES.in: Regenerate.
@
text
@d22 1
d718 29
@


1.217
log
@        * include/elf/ia64.h (SHT_IA_64_VMS_DISPLAY_NAME_INFO,
        EF_IA_64_ARCHVER_1): New macros. Minor reformatting.

        * bfd/Makefile.am (BFD32_BACKENDS): Add new object vmsutil.lo
        (BFD32_BACKENDS_CFILES): Add new file vmsutil.c
        (vmsutil.lo): Add dependency rule
        * bfd/Makefile.in: Regenerate
        * bfd/config.bfd (ia64*-*-*vms*): Add case.
        * bfd/configure.in (bfd_elf64_ia64_vms_vec): Add case.
        * bfd/configure: Regenerate
        * bfd/vmsutil.[ch]: New files
        * bfd/elf-bfd.h (struct bfd_elf_special_section): Change type of
        attr to bfd_vma.
        * bfd/elfxx-ia64.c (elfNN_vms_post_process_headers,
        elfNN_vms_section_processing, elfNN_vms_final_write_processing,
        elfNN_vms_close_and_cleanup, elfNN_vms_section_from_shdr,
        elfNN_vms_object_p): New functions
        * bfd/targets.c (bfd_elf64_ia64_vms_vec): New target.

        * gas/configure.tgt(ia64-*-*vms*): New target.
        * gas/dwarf2dbg.h (dwarf2_loc_mark_labels): Make extern.
        * gas/tc.h (md_number_to_chars): Declare iff undefined.
        * gas/config/obj-elf.c (obj_elf_change_section): Change type of
        arg attr to bfd_vma.
        (obj_elf_parse_section_letters): Return a bfd_vma. Change type of
        variables attr, md_attr to bfd_vma.
        (obj_elf_section_word): Likewise.
        (obj_elf_section): Change type of variable attr to bfd_vma
        * gas/config/obj-elf.h (obj_elf_change_section): Change type of
        arg attr to bfd_vma
        * gas/config/tc-ia64.c (bfdver.h,time.h): Include.
        (ia64_elf_section_letter): Now returns a bfd_vma.
        Handle VMS specific attributes.
        (ia64_elf_section_flags): Arg attr now a bfd_vma.
        (ia64_init): Don't turn on dependency checking for VMS.
        (ia64_target_format): Check for VMS flag bit.
        (do_alias): Hande decc$ functions.
        (get_vms_time): New function.
        (ia64_vms_note): New function.
        * gas/config/tc-ia64.h (ia64_elf_section_letter): Now returns a bfd_vma.
        (ia64_elf_section_flags): Arg attr now a bfd_vma.
        (tc_init_after_args): Define for VMS.
        * gas/config/tc-alpha.c (alpha_elf_section_letter): Return a bfd_vma.
        (alpha_elf_section_flags): Change type of arg attr to bfd_vma.
        * gas/config/tc-alpha.h: Likewise.
        * gas/config/tc-i386.c (x86_64_section_letter): Return a bfd_vma.
        (x86_64_section_word): Return a bfd_vma.
        * gas/config/tc-i386.h: Likewise.
        * gas/config/tc-ip2k.c (ip2k_elf_section_flags): Change type of arg
        attr to bfd_vma.
        * gas/config/tc-ip2k.h: Likewise.
        * gas/config/tc-mep.c (mep_elf_section_letter): Return a bfd_vma.
        (mep_elf_section_flags): Change type of arg attr to bfd_vma.
        * gas/config/tc-mep.h: Likewise.
        * gas/config/tc-ppc.c  (ppc_section_letter): Return a bfd_vma.
        (ppc_section_word): Return a bfd_vma.
        (ppc_section_flags): Change type of arg attr to bfd_vma.
        * gas/config/tc-ppc.h: Likewise.
        * gas/config/te-vms.h (DWARF2_DIR_SHOULD_END_WITH_SEPARATOR,
        DWAR2_FILE_TIME_NAME, DWARF2_FILE_SIZE_NAME, DWARF2_FILEN_NAME):
        New file with new macros
        * gas/dwarf2dbg.c (get_filenum, out_file_list): Default and call new
        macros.
@
text
@d772 2
a773 2
libbfd_la_LIBADD = `cat ofiles` @@WIN32LIBADD@@
libbfd_la_LDFLAGS = -release `cat libtool-soversion` @@WIN32LDFLAGS@@
@


1.216
log
@Add LM32 port.
@
text
@d374 1
d556 1
d1838 1
@


1.215
log
@run "make dep-am"
@
text
@d86 1
d153 1
d269 1
d451 1
d1100 1
d1434 4
@


1.214
log
@Set LC_ALL=C rather than unsetting LC_COLLATE for sort.
@
text
@d1199 1
a1199 2
  coff-m68k.c $(INCDIR)/hashtab.h $(INCDIR)/coff/m68k.h \
  $(INCDIR)/coff/internal.h libcoff.h $(INCDIR)/bfdlink.h \
d1727 2
a1728 2
pe-arm-wince.lo: pe-arm-wince.c pe-arm.c $(INCDIR)/filenames.h \
  coff-arm.c $(INCDIR)/hashtab.h $(INCDIR)/coff/arm.h \
d1982 1
a1982 1
  $(INCDIR)/hashtab.h elf32-target.h
d1987 1
a1987 1
  $(INCDIR)/hashtab.h elf64-target.h
@


1.214.2.1
log
@Regenerate makefile dependencies and .pot files.
@
text
@d1199 2
a1200 1
  coff-m68k.c $(INCDIR)/hashtab.h libcoff.h $(INCDIR)/bfdlink.h \
d1728 2
a1729 2
pe-arm-wince.lo: pe-arm-wince.c $(INCDIR)/filenames.h \
  pe-arm.c coff-arm.c $(INCDIR)/hashtab.h $(INCDIR)/coff/arm.h \
d1983 1
a1983 1
  elf32-target.h
d1988 1
a1988 1
  elf64-target.h
@


1.214.2.2
log
@bfd/
2008-10-16  Tristan Gingold  <gingold@@adacore.com>

	* configure.in: Bump version to 2.19
	* Makefile.am (RELEASE): Set.
	* configure, Makefile.in: Regenerated.
@
text
@d7 1
a7 1
RELEASE=y
@


1.214.2.3
log
@bfd/
2008-10-28  Tristan Gingold  <gingold@@adacore.com>

	* configure.in: Bump version to 2.19.0
	* Makefile.am (RELEASE): Unset.
	* configure, Makefile.in: Regenerated.
@
text
@d7 1
a7 1
# RELEASE=y
@


1.214.2.4
log
@bfd/
2009-02-02  Tristan Gingold  <gingold@@adacore.com>

	* configure.in: Bump version to 2.19.1
	* Makefile.am (RELEASE): Set.
	* configure, Makefile.in: Regenerated.
@
text
@d7 1
a7 1
RELEASE=y
@


1.214.2.5
log
@bfd/
2009-02-03  Tristan Gingold  <gingold@@adacore.com>

	* Makefile.am (RELEASE): Unset.
	* Makefile.in: Regenerated.
@
text
@d7 1
a7 1
# RELEASE=y
@


1.213
log
@bfd/
	* Makefile.am (BFD32_LIBS): Add compress.lo.
	(BFD32_LIBS_CFILES): Add compress.c.
	(BFD_H_FILES): Likewise.
	* Makefile.in: Regenerate.
	* bfd-in2.h: Regenerate.
	* config.in: Add HAVE_ZLIB_H
	* configure.in: Add test for libz and zlib.h
	* configure: Regenerate.
	* dwarf2.c (read_section): New function.
	(read_indirect_string): Call new function read_section.
	(read_abbrevs): Likewise.
	(decode_line_info): Likewise.
	(read_debug_ranges): Likewise.
	(find_line): Call new function read_section when just one
	.zdebug_info section is found, otherwise read and compress
	multiple sections.
	(_bfd_dwarf2_cleanup_debug_info): Free sec_info_ptr.
	* elf.c (_bfd_elf_make_section_from_shdr): Add zdebug prefix.
	(special_sections_z): New struct.
	(special_sections): Refer to special_sections_z.
	* elfxx-mips.c (_bfd_mips_elf_section_from_shdr): Recognize
	sections named .zdebug_*.
	(_bfd_mips_elf_fake_sections): Likewise.
	* compress.c: New file.
	(bfd_uncompress_section_contents): New function.
bfd/doc/
	* Makefile.am (BFD_H_DEP): Add ../compress.c.
	* Makefile.in: Regenerate.
binutils/
	* config.in: Add HAVE_ZLIB_H
	* configure.in: Add test for libz and zlib.h
	* configure: Regenerate.
	* dwarf.c (debug_displays): Add .zdebug_* strings.
	* dwarf.h (struct dwarf_section): Add fields uncompressed_namd
	and compressed_name.
	* objdump.c (load_debug_section): Call
	bfd_uncompress_section_contents when loading a compressed
	section.
	(dump_dwarf_section): Recognize compressed section name.
	(mach_o_dwarf_sections): Rename as
	mach_o_uncompressed_dwarf_sections.
	(mach_o_compressed_dwarf_sections): New variable.
	(generic_dwarf_section): Rename as
	generic_uncompressed_dwarf_sections.
	(generic_compressed_dwarf_sections): New variable.
	(check_mach_o_dwarf): Save and restore
	mach_o_compressed_dwarf_sections.
	* readelf.c: Add #include for config.h and zlib.h
	(process_section_headers): Recognize compressed section name.
	(uncompress_section_contents): New function.
	(load_debug_section): Call uncompress_section_contents when
	loading a compressed section.
	(display_debug_section): Recognize compressed section name.
binutils/testsuite:
	* binutils-all/objdump.exp: Add test for objdump -s on a file
	with a compressed debug section.  Add test for objdump -W on a
	file that contains a compressed debug section.
	* binutils-all/readelf.exp: Call readelf_compressed_wa_test.
	(readelf_compressed_wa_test): New function.
	* binutils-all/dw2-compressed.S: New file.
	* binutils-all/objdump.W: New file.
	* binutils-all/objdump.s: New file.
	* binutils-all/readelf.wa: New file.
@
text
@d701 1
a701 1
	  | LC_COLLATE= sort > tmp.src \
d706 1
a706 1
	  | LC_COLLATE= sort > tmp.bld \
@


1.212
log
@update dependencies
@
text
@d45 1
a45 1
	merge.lo dwarf2.lo simple.lo
d55 1
a55 1
	merge.c dwarf2.c simple.c
d941 1
a941 1
	archive.c corefile.c targets.c format.c
d1067 1
@


1.211
log
@bfd/
	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.
	* po/SRC-POTFILES.in: Regenerate.
bfd/doc/
	* Makefile.in: Regenerate.
binutils/
	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.
	* doc/Makefile.in: Regenerate.
	* configure: Regenerate.
gas/
	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.
	* configure: Regenerate.
gprof/
	* configure: Regenerate.
ld/
	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.
	* configure: Regenerate.
opcodes/
	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.
	* configure: Regenerate.
@
text
@d1555 2
a1556 2
elf32-spu.lo: elf32-spu.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/hashtab.h elf-bfd.h $(INCDIR)/elf/common.h \
@


1.210
log
@        * efi-rtdrv-ia32.c: New file.
        * efi-bsdrv-ia32.c: New file.
        * efi-rtdrv-ia64.c: New file.
        * efi-bsdrv-ia64.c: New file.
        * efi-rtdrv-x86_64.c: New file.
        * efi-bsdrv-x86_64.c: New file.
        * peicode.h (pe_bfd_object_p): Add support for boot service and
        runtime service drivers.
        * libpei.h: Add macros for EFI formats, and rename the efi application
        format macros to disambiguate.
        * targets.c: Add bfd_target _vec externs.
        (_bfd_tar): Add EFI _vec entries.
        * config.bfd: Add EFI vectors into the selection routines.
        * configure.in: add EFI _vec entries.
        * configure: Regenerate.
        * Makefile.am: Add EFI files.
        * Makefile.in: Regenerate.
@
text
@d1020 2
a1021 2
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h
d1063 1
a1063 1
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
d1293 1
a1293 1
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
d1323 1
a1323 1
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/libiberty.h \
d1326 2
a1327 2
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/mn10300.h \
d1331 2
a1332 2
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/arc.h \
d1337 1
a1337 1
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
d1341 2
a1342 2
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/avr.h \
d1345 2
a1346 2
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/bfin.h \
d1351 1
a1351 1
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
d1356 1
a1356 1
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h elf32-target.h
d1358 2
a1359 2
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/cris.h \
d1363 1
a1363 1
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/elf/crx.h \
d1366 2
a1367 2
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/d10v.h \
d1370 2
a1371 2
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/d30v.h \
d1374 2
a1375 2
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/dlx.h \
d1378 2
a1379 2
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/fr30.h \
d1382 2
a1383 2
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/frv.h \
d1387 2
a1388 2
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h elf32-target.h
d1391 1
a1391 1
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
d1394 2
a1395 2
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/hppa.h \
d1400 1
a1400 1
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/elf/i370.h \
d1404 1
a1404 1
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h elf-vxworks.h \
d1408 2
a1409 2
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/i860.h \
d1412 2
a1413 2
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/i960.h \
d1416 2
a1417 2
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/ip2k.h \
d1421 1
a1421 1
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
d1425 2
a1426 2
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/m32c.h \
d1430 2
a1431 2
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/m32r.h \
d1435 1
a1435 1
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/elf/m68k.h \
d1440 1
a1440 1
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h elf32-m68hc1x.h \
d1445 1
a1445 1
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h elf32-m68hc1x.h \
d1450 1
a1450 1
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h elf32-m68hc1x.h \
d1454 2
a1455 2
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h elf32-target.h
d1457 2
a1458 2
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h elf32-target.h
d1460 2
a1461 2
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/mn10300.h \
d1466 1
a1466 1
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/elf/mcore.h \
d1469 2
a1470 2
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/mep.h \
d1475 1
a1475 1
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
d1481 1
a1481 1
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h elfxx-mips.h \
d1487 2
a1488 2
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/mt.h \
d1492 1
a1492 1
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
d1497 1
a1497 1
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
d1501 2
a1502 2
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/or32.h \
d1507 1
a1507 1
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/elf/pj.h \
d1511 1
a1511 1
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/elf/ppc.h \
d1515 1
a1515 1
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
d1522 1
a1522 1
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
d1527 1
a1527 1
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/elf/s390.h \
d1531 1
a1531 1
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
d1536 1
a1536 1
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h elf-vxworks.h \
d1541 2
a1542 2
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h elf-vxworks.h $(INCDIR)/elf/sh.h \
d1547 2
a1548 2
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/elf/sparc.h $(INCDIR)/elf/reloc-macros.h \
d1552 1
a1552 1
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/elf/sparc.h \
d1557 1
a1557 1
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/elf/spu.h \
d1561 1
a1561 1
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/elf/v850.h \
d1566 1
a1566 1
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/elf/vax.h \
d1570 1
a1570 1
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
d1575 1
a1575 1
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/elf/xtensa.h \
d1580 1
a1580 1
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
d1585 1
a1585 1
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h elfcore.h
d1588 1
a1588 1
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/safe-ctype.h \
d1592 1
a1592 1
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h
d1594 2
a1595 2
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/libiberty.h
d1598 1
a1598 1
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
d1602 2
a1603 2
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/vxworks.h elf-vxworks.h
d1884 1
a1884 1
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h bfd_stdint.h \
d1889 1
a1889 1
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
d1895 2
a1896 2
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/hppa.h \
d1900 2
a1901 2
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h elf64-target.h
d1904 1
a1904 1
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
d1911 1
a1911 1
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
d1917 2
a1918 2
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/mmix.h \
d1923 1
a1923 1
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/elf/ppc64.h \
d1927 1
a1927 1
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/elf/s390.h \
d1931 1
a1931 1
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/elf/sh.h \
d1935 1
a1935 1
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
d1940 1
a1940 1
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h elfcore.h
d1979 2
a1980 2
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/opcode/ia64.h \
d1984 2
a1985 2
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/opcode/ia64.h \
@


1.209
log
@	PR 5755
	* arange-set.c: Delete.
	* arange-set.h: Delete.
	* dwarf2.c: Revert 2007-09-21 changes.
	* Makefile.am: Likewise.
	* Makefile.in: Regenerate.
	* po/SRC-POTFILES.in: Regenerate.
@
text
@d241 2
d422 2
d568 2
d571 2
d603 2
d606 2
d1311 10
d1857 10
d1872 10
@


1.208
log
@	include/elf/
	* vxworks.h: New.

	bfd/
	* elf-vxworks.h (elf_vxworks_add_dynamic_entries): Declare.
	(elf_vxworks_finish_dynamic_entry): Declare.
	* elf-vxworks.c: Include elf/vxworks.h.
	(elf_vxworks_add_dynamic_entries): New.
	(elf_vxworks_finish_dynamic_entry): New.
	* Makefile.am (elf-vxworks.lo): Add dependency.
	* Makefile.in (elf-vxworks.lo): Add dependency.
	* elf32-i386.c (elf_i386_size_dynamic_sections,
	elf_i386_finish_dynamic_sections): Call
	elf_vxworks_add_dynamic_entries and
	elf_vxworks_finish_dynamic_entry.
	* elf32-ppc.c (ppc_elf_size_dynamic_sections,
	ppc_elf_finish_dynamic_sections): Likewise.
	* elfxx-sparc.c (_bfd_sparc_elf_size_dynamic_sections,
	sparc_finish_dyn): Likewise.
	* elf32-sh.c (sh_elf_size_dynamic_sections,
	sh_elf_finish_dynamic_sections): Likewise.
	* elfxx-mips.c (_bfd_mips_elf_size_dynamic_sections,
	_bfd_mips_elf_finish_dynamic_sections): Likewise.
	* elf32-arm.c (elf32_arm_size_dynamic_sections,
	elf32_arm_finish_dynamic_sections): Likewise.

	ld/
	* ld-vxworks/tls-2.d: New.
	* ld-vxworks/tls-2.s: New.
@
text
@d45 1
a45 1
	merge.lo dwarf2.lo simple.lo arange-set.lo
d55 1
a55 1
	merge.c dwarf2.c simple.c arange-set.c
d668 2
a669 2
	arange-set.h aout-target.h aoutf1.h aoutx.h coffcode.h coffswap.h \
	ecoffswap.h elf-bfd.h elf-hppa.h elf32-hppa.h \
d1052 1
a1052 1
  $(INCDIR)/elf/dwarf2.h arange-set.h
a1054 2
arange-set.lo: arange-set.c $(INCDIR)/filenames.h $(INCDIR)/libiberty.h \
  $(INCDIR)/hashtab.h arange-set.h $(INCDIR)/splay-tree.h
@


1.207
log
@	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.
	* po/SRC-POTFILES.in: Regenerate.
@
text
@d1583 1
a1583 1
  elf-vxworks.h
@


1.206
log
@2007-09-21  H.J. Lu  <hongjiu.lu@@intel.com>

	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerated.
@
text
@d1309 1
a1309 1
  elf32-target.h
d1442 2
a1443 1
  $(INCDIR)/elf/reloc-macros.h elf32-target.h
d1602 1
a1602 1
som.lo: som.c $(INCDIR)/alloca-conf.h $(INCDIR)/filenames.h
d1854 5
a1858 5
elf64-hppa.lo: elf64-hppa.c $(INCDIR)/alloca-conf.h \
  $(INCDIR)/filenames.h $(INCDIR)/hashtab.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/elf/hppa.h $(INCDIR)/elf/reloc-macros.h \
  libhppa.h elf64-hppa.h elf-hppa.h elf64-target.h
@


1.205
log
@* Makefile.am (BFD32_LIBS): Add arange-set.lo.
  (BFD32_LIBS_CFILES): Add arange-set.c.
  (SOURCE_HFILES): Add arange-set.h
  (dwarf2.lo): Add dependency upon arange-set.h.
  (arange-set.lo): New target.
* Makefile.in: Regenerate.
* arange-set.c: New file.
* arange-set.h: New file.
* dwarf2.c: Include arange-set.h.
  (struct dwarf2_debug) Add new fields comp_unit_count and comp_unit_arange_set.
  (struct comp_unit) Replace field arange with a new field arange_set.
  (dwarf2_arange_set_allocate, dwarf2_arange_set_deallocate,
  (dwarf2_combine_arange_value, dwarf2_arange_set_new,
  (dwarf2_arange_set_with_value_new, dwarf2_comp_unit_arange_add): New
  functions to utilize arange set in dwarf2.c.
  (arange_add): Formatting change for a line longer than 80 characters.
  (decode_line_info): Replace call target arange_add with
  (dwarf2_comp_unit_arange_add.
  (read_rangelist_insert_arange_list,
  (read_rangelist_comp_unit_arange_add): New functions used as callbacks
  for read_rangelist.
  (read_rangelist): Change interface to accept a callback and data to
  allow caller to select the action peformed on a new range list read.
  (scan_unit_for_symbols): Use new interface of read_rangelist.
  (parse_comp_unit): Create an arange set for each new comp unit.  Use new
  interface of read_rangelist.  Replace call to arange_add with that to
  dwarf2_comp_unit_arange_add.
  (comp_unit_contains_address): Replace sequential search with a call to
  arange_set_lookup_address, which can handles large set efficiently.
  (stash_copy_local_aranges, stash_maybe_enable_arange_set,
  (stash_find_nearest_line_fast): New functions maintaining and using a
  valued global arange set for all compilation units to speed up
  bfd_dwarf2_find_nearest_line.
  (find_line): Use global arange set.  Replace sequential search over all
  compilation units with a call to stash_find_nearest_line_fast.  Add
  book keeping to count number of compilation units.  Replace empty
  arange list test with a call to arange_set_empty_p.
@
text
@a1052 2
arange-set.lo: arange-set.c arange-set.h $(INCDIR)/libiberty.h \
  $(INCDIR)/splay-tree.h
d1055 2
@


1.204
log
@2007-08-23  H.J. Lu  <hongjiu.lu@@intel.com>

	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerated.
@
text
@d45 1
a45 1
	merge.lo dwarf2.lo simple.lo
d55 1
a55 1
	merge.c dwarf2.c simple.c
d668 2
a669 2
	aout-target.h aoutf1.h aoutx.h coffcode.h coffswap.h ecoffswap.h \
	elf-bfd.h elf-hppa.h elf32-hppa.h \
d1052 3
a1054 1
  $(INCDIR)/elf/dwarf2.h
@


1.203
log
@	* Makefile.am (BUILD_HFILES): Clean bfd_stdint.h.
	* Makefile.in: Regenerated.
@
text
@d1302 1
a1302 1
  $(INCDIR)/safe-ctype.h $(INCDIR)/md5.h
d1383 2
a1384 1
  $(INCDIR)/elf/i386.h $(INCDIR)/elf/reloc-macros.h elf32-target.h
d1841 3
a1843 2
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/elf/x86-64.h \
  $(INCDIR)/elf/reloc-macros.h elf64-target.h
@


1.202
log
@2007-07-09  Roland McGrath  <roland@@redhat.com>

	* elf-bfd.h (struct elf_obj_tdata): Add members
	emit_note_gnu_build_id and note_gnu_build_id_sec.
	* elf.c (_bfd_id_note_section_size): New global function.
	(read_hex, _bfd_elf_write_build_id_section): New static functions.
	(_bfd_elf_write_object_contents): Call _bfd_elf_write_build_id_section
	if emit_note_gnu_build_id is set.
	* Makefile.am (elf.lo): Update dependencies.
@
text
@d680 1
a680 1
	bfdver.h elf32-target.h elf64-target.h targmatch.h
@


1.202.2.1
log
@	* Makefile.am (BUILD_HFILES): Clean bfd_stdint.h.
	* Makefile.in: Regenerated.
@
text
@d680 1
a680 1
	bfdver.h elf32-target.h elf64-target.h targmatch.h bfd_stdint.h
@


1.202.2.2
log
@	* configure.in (VERSION): Update.
	* Makefile.am (RELEASE): Set.
	* configure, Makefile.in: Regenerated.
@
text
@d7 1
a7 1
RELEASE=y
@


1.202.2.3
log
@	* Makefile.am (RELEASE): Unset.
	* Makefile.in: Regenerated.
@
text
@d7 1
a7 1
# RELEASE=y
@


1.201
log
@Regenerate files.
@
text
@d1301 2
a1302 1
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/libiberty.h
@


1.200
log
@bfd:
	* elf-attrs.c: New.
	* Makefile.am (BFD32_BACKENDS): Add elf-attrs.lo.
	(BFD32_BACKENDS_CFILES): Add elf-attrs.c.
	(elf-attrs.lo): Generate dependencies.
	* Makefile.in: Regenerate.
	* configure.in (elf): Add elf-attrs.lo.
	* configure: Regenerate.
	* elf-bfd.h (struct elf_backend_data): Add entries for object
	attributes.
	(NUM_KNOWN_OBJ_ATTRIBUTES, obj_attribute, obj_attribute_list,
	OBJ_ATTR_PROC, OBJ_ATTR_GNU, OBJ_ATTR_FIRST, OBJ_ATTR_LAST,
	Tag_NULL, Tag_File, Tag_Section, Tag_Symbol, Tag_compatibility):
	New.
	(struct elf_obj_tdata): Add entries for object attributes.
	(elf_known_obj_attributes, elf_other_obj_attributes,
	elf_known_obj_attributes_proc, elf_other_obj_attributes_proc):
	New.
	(bfd_elf_obj_attr_size, bfd_elf_set_obj_attr_contents,
	bfd_elf_get_obj_attr_int, bfd_elf_add_obj_attr_int,
	bfd_elf_add_proc_attr_int, bfd_elf_add_obj_attr_string,
	bfd_elf_add_proc_attr_string, bfd_elf_add_obj_attr_compat,
	bfd_elf_add_proc_attr_compat, _bfd_elf_attr_strdup,
	_bfd_elf_copy_obj_attributes, _bfd_elf_obj_attrs_arg_type,
	_bfd_elf_parse_attributes, _bfd_elf_merge_object_attributes): New.
	* elf.c (_bfd_elf_copy_private_bfd_data): Copy object attributes.
	(bfd_section_from_shdr): Handle attributes sections.
	* elflink.c (bfd_elf_final_link): Handle attributes sections.
	* elfxx-target.h (elf_backend_obj_attrs_vendor,
	elf_backend_obj_attrs_section, elf_backend_obj_attrs_arg_type,
	elf_backend_obj_attrs_section_type): New.
	(elfNN_bed): Update.
	* elf32-arm.c (NUM_KNOWN_ATTRIBUTES, aeabi_attribute,
	aeabi_attribute_list): Remove.
	(struct elf32_arm_obj_tdata): Remove object attributes fields.
	(check_use_blx, bfd_elf32_arm_set_vfp11_fix, using_thumb2,
	elf32_arm_copy_private_bfd_data, elf32_arm_merge_eabi_attributes):
	Update for new object attributes interfaces.
	(uleb128_size, is_default_attr, eabi_attr_size,
	elf32_arm_eabi_attr_size, write_uleb128, write_eabi_attribute,
	elf32_arm_set_eabi_attr_contents, elf32_arm_bfd_final_link,
	elf32_arm_new_eabi_attr, elf32_arm_get_eabi_attr_int,
	elf32_arm_add_eabi_attr_int, attr_strdup,
	elf32_arm_add_eabi_attr_string, elf32_arm_add_eabi_attr_compat,
	copy_eabi_attributes, elf32_arm_parse_attributes): Remove.  Moved
	to generic code in elf-attrs.c.
	(elf32_arm_obj_attrs_arg_type): New.
	(elf32_arm_fake_sections): Do not handle .ARM.attributes.
	(elf32_arm_section_from_shdr): Do not handle SHT_ARM_ATTRIBUTES.
	(bfd_elf32_bfd_final_link): Remove.
	(elf_backend_obj_attrs_vendor, elf_backend_obj_attrs_section,
	elf_backend_obj_attrs_arg_type,
	elf_backend_obj_attrs_section_type): New.
	* elf32-bfin.c (bfin_elf_copy_private_bfd_data): Copy object
	attributes.
	* elf32-frv.c (frv_elf_copy_private_bfd_data): Likewise.
	* elf32-iq2000.c (iq2000_elf_copy_private_bfd_data): Likewise.
	* elf32-mep.c (mep_elf_copy_private_bfd_data): Likewise.
	* elf32-mt.c (mt_elf_copy_private_bfd_data): Likewise.
	* elf32-sh.c (sh_elf_copy_private_data): Likewise.
	* elf64-sh64.c (sh_elf64_copy_private_data_internal): Likewise.

binutils:
	* readelf.c (display_gnu_attribute): New.
	(process_arm_specific): Rearrange as process_attributes.
	(process_arm_specific): Replace by wrapper of process_attributes.

gas:
	* as.c (create_obj_attrs_section): New.
	(main): Call create_obj_attrs_section for ELF.
	* read.c (s_gnu_attribute, skip_whitespace, skip_past_char,
	skip_past_comma, s_vendor_attribute): New.
	(potable): Add gnu_attribute for ELF.
	* read.h (s_vendor_attribute): Declare.
	* config/tc-arm.c (s_arm_eabi_attribute): Replace by wrapper
	round s_vendor_attribute.
	(aeabi_set_public_attributes): Update for new attributes
	interfaces.
	(arm_md_end): Remove attributes contents setting now done
	generically.

include/elf:
	* arm.h (elf32_arm_add_eabi_attr_int,
	elf32_arm_add_eabi_attr_string, elf32_arm_add_eabi_attr_compat,
	elf32_arm_get_eabi_attr_int, elf32_arm_set_eabi_attr_contents,
	elf32_arm_eabi_attr_size, Tag_NULL, Tag_File, Tag_Section,
	Tag_Symbol, Tag_compatibility): Remove.
	* common.h (SHT_GNU_ATTRIBUTES): Define.

ld:
	* emulparams/armelf.sh (OTHER_SECTIONS): Remove .ARM.attributes.
	(ATTRS_SECTIONS): Define.
	* scripttempl/elf.sc, scripttempl/elf32sh-symbian.sc,
	scripttempl/elf_chaos.sc, scripttempl/elfi370.sc,
	scripttempl/elfxtensa.sc: Handle ATTRS_SECTIONS.
@
text
@d1326 4
a1329 5
elf32-cr16.lo: elf32-cr16.c $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/cr16.h \
  $(INCDIR)/elf/reloc-macros.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h elf32-target.h \
  $(INCDIR)/libiberty.h
d1333 1
a1333 2
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h elf32-target.h \
  $(INCDIR)/libiberty.h
@


1.199
log
@New port: National Semiconductor's CR16
@
text
@d300 1
d479 1
d1567 3
@


1.198
log
@	* configure.in (--with-separate-debug-dir): New option.
	* configure: Regenerate.
	* Makefile.am (dwarf2.lo): Add rule to pass DEBUGDIR.
	* Makefile.in: Regenerate.
	* dwarf2.c (_bfd_dwarf2_find_nearest_line): Pass DEBUGDIR to
	bfd_follow_gnu_debuglink.
	(_bfd_dwarf2_find_line): Likewise.
@
text
@d67 1
d133 1
d247 1
d425 1
d1061 1
d1324 5
d1332 2
a1333 1
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h elf32-target.h
@


1.197
log
@bfd/

2007-06-14  H.J. Lu  <hongjiu.lu@@intel.com>

	* Makefile.am (ACLOCAL_AMFLAGS): Add -I . -I ../config.

	* acinclude.m4: Don't include m4 files. Remove libtool
	kludge.

	* Makefile.in: Regenerated.
	* doc/Makefile.in: Likewise.
	* aclocal.m4: Likewise.
	* configure: Likewise.

binutils/

2007-06-14  H.J. Lu  <hongjiu.lu@@intel.com>

	* Makefile.am (ACLOCAL_AMFLAGS): Add -I ../config -I ../bfd.

	* acinclude.m4: Removed.

	* Makefile.in: Regenerated.
	* aclocal.m4: Likewise.
	* configure: Likewise.

gas/

2007-06-14  H.J. Lu  <hongjiu.lu@@intel.com>

	* Makefile.am (ACLOCAL_AMFLAGS): Add -I ../config -I ../bfd.

	* acinclude.m4: Don't include m4 files.
	(BFD_BINARY_FOPEN): Removed.
	Remove libtool kludge.

	* Makefile.in: Regenerated.
	* doc/Makefile.in: Likewise.
	* aclocal.m4: Likewise.
	* configure: Likewise.

gprof/

2007-06-14  H.J. Lu  <hongjiu.lu@@intel.com>

	* Makefile.am (ACLOCAL_AMFLAGS): Add -I ../config -I ../bfd.

	* acinclude.m4: Removed.

	* Makefile.in: Regenerated.
	* aclocal.m4: Likewise.
	* configure: Likewise.

ld/

2007-06-14  H.J. Lu  <hongjiu.lu@@intel.com>

	* Makefile.am (ACLOCAL_AMFLAGS): Add -I ../config -I ../bfd.

	* acinclude.m4: Removed.

	* Makefile.in: Regenerated.
	* aclocal.m4: Likewise.
	* configure: Likewise.

opcodes/

2007-06-14  H.J. Lu  <hongjiu.lu@@intel.com>

	* Makefile.am (ACLOCAL_AMFLAGS): Add -I ../config -I ../bfd.

	* acinclude.m4: Removed.

	* Makefile.in: Regenerated.
	* doc/Makefile.in: Likewise.
	* aclocal.m4: Likewise.
	* configure: Likewise.
@
text
@d787 3
@


1.196
log
@
bfd/
	Many files: Include sysdep.h before bfd.h.
	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.
binutils/
	* bucumm.h: Split off host dependencies to..
	* sysdep.h: ..here.
	Many files: Include sysdep.h.  Remove duplicate headers and reorder.
	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.
ld/
	Many files: Include sysdep.h first.  Remove duplicate headers.
	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.
opcodes/
	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.
	* ns32k-dis.c: Include sysdep.h first.
@
text
@d4 1
a4 1
ACLOCAL_AMFLAGS = -I ..
@


1.195
log
@	* bfd.c (bfd_demangle): New function.
	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.
	* bfd-in2.h: Regenerate.
@
text
@d995 1
a995 1
bfd.lo: bfd.c bfdver.h $(INCDIR)/filenames.h $(INCDIR)/libiberty.h \
d1247 1
a1247 1
coff-tic80.lo: coff-tic80.c $(INCDIR)/bfdlink.h $(INCDIR)/filenames.h \
d1635 1
a1635 1
mach-o.lo: mach-o.c mach-o.h $(INCDIR)/filenames.h \
d1675 2
a1676 2
pef.lo: pef.c $(INCDIR)/safe-ctype.h pef.h pef-traceback.h \
  $(INCDIR)/filenames.h $(INCDIR)/hashtab.h $(INCDIR)/libiberty.h
d1737 1
a1737 1
ppcboot.lo: ppcboot.c $(INCDIR)/safe-ctype.h $(INCDIR)/filenames.h \
d1778 1
a1778 1
vms-hdr.lo: vms-hdr.c bfdver.h $(INCDIR)/filenames.h \
d1788 1
a1788 1
xsym.lo: xsym.c xsym.h $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
d1793 1
a1793 1
aix5ppc-core.lo: aix5ppc-core.c
@


1.194
log
@2007-04-18  Matthias Klose  <doko@@ubuntu.com>

	* Makefile.am (libbfd_la_LDFLAGS): Use bfd soversion.
	(bfdver.h): Use the date in non-release builds for the soversion.
	* Makefile.in: Regenerate.

2007-04-18  Matthias Klose  <doko@@ubuntu.com>

	* Makefile.am (libopcodes_la_LDFLAGS): Use bfd soversion.
	* Makefile.in: Regenerate.
@
text
@d996 5
a1000 4
  $(INCDIR)/safe-ctype.h $(INCDIR)/bfdlink.h $(INCDIR)/hashtab.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/sym.h libcoff.h \
  libecoff.h $(INCDIR)/coff/ecoff.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h
@


1.193
log
@        * Makefile.am: Add ACLOCAL_AMFLAGS.
        * configure.in: Change macro call order.
        * Makefile.in: Regnerate.
        * doc/Makefile.in: Regenerate.
        * configure: Regenerate.
@
text
@d749 1
a749 1
libbfd_la_LDFLAGS = -release $(VERSION) @@WIN32LDFLAGS@@
d965 1
a965 1
DISTCLEANFILES = $(BUILD_CFILES) $(BUILD_HFILES)
d971 1
d977 1
d983 2
a984 1
	    < $(srcdir)/version.h > $@@
@


1.192
log
@	* src-release (do-proto-toplev): Process the support directories before
	the tool directory.

	* Makefile.am (bfdver.h): Do not generate doc/bfdver.texi.
	* doc/Makefile.am (DOCFILES): Add bfdver.texi.
	(bfdver.texi): New rule.
	* Makefile.in, doc/Makefile.in: Regenerated.
@
text
@d4 1
@


1.191
log
@bfd:
	* Makefile.am (bfdver.h): Only set VERSION_PACKAGE in bfdver.texi
	if nonempty.
	* configure.in (REPORT_BUGS_TO): Do not use "URL:" prefix.
	* Makefile.in, configure, doc/Makefile.in: Regenerate.

binutils:
	* doc/binutils.texi: Include VERSION_PACKAGE when reporting
	version.

gas:
	* doc/as.texinfo: Include VERSION_PACKAGE when reporting version.

gprof:
	* Makefile.am (TEXI2POD): Include $(AM_MAKEINFOFLAGS).
	(AM_MAKEINFOFLAGS, TEXI2DVI): Define with -I ../bfd/doc.
	* Makefile.in: Regenerate.
	* gprof.texi: Include bfdver.texi.  Report both VERSION_PACKAGE
	and VERSION.

ld:
	* ld.texinfo: Include VERSION_PACKAGE when reporting version.
@
text
@d967 1
a967 2
	@@-test -d doc || mkdir doc
	@@echo "creating $@@ and doc/bfdver.texi"
d980 1
a980 9
	    < $(srcdir)/version.h > $@@; \
	 echo "@@set VERSION $(VERSION)" > doc/bfdver.texi; \
	 if [ -n "$(PKGVERSION)" ]; then \
	   echo "@@set VERSION_PACKAGE $(PKGVERSION)" >> doc/bfdver.texi; \
	 fi; \
	 echo "@@set UPDATED `date '+%B %Y'`" >> doc/bfdver.texi; \
	 if [ -n "$(REPORT_BUGS_TEXI)" ]; then \
	   echo "@@set BUGURL $(REPORT_BUGS_TEXI)" >> doc/bfdver.texi; \
	 fi
@


1.190
log
@bfd/

2007-03-15  H.J. Lu  <hongjiu.lu@@intel.com>

	* Makefile.am (bfdver.h): Substitute report_bugs_to.  Also
	create doc/bfdver.texi.
	* Makefile.in: Regenerated.

	* configure.in (--with-bugurl): New option.
	* configure: Regenerated.

	* version.h (REPORT_BUGS_TO): New.

binutils/

2007-03-15  H.J. Lu  <hongjiu.lu@@intel.com>

	* Makefile.am (REPORT_BUGS_TO): Removed.
	(INCLUDES): Remove -DREPORT_BUGS_TO.
	* Makefile.in: Regenerated.

	* bucomm.c: Don't include bfdver.h.
	* objdump.c: Likewise.
	* version.c: Likewise.

	* bucomm.h: Include bfdver.h.

	* configure.in (--with-bugurl): Removed.
	* configure: Regenerated.

	* doc/Makefile.am (binutils_TEXINFOS): Removed.
	(AM_MAKEINFOFLAGS): Add -I ../../bfd/doc.
	(TEXI2DVI): Likewise.
	(config.texi): Removed.
	(MOSTLYCLEANFILES): Remove config.texi.
	* doc/Makefile.in: Regenerated.

	* doc/binutils.texi: Include bfdver.texi instead of
	config.texi.

gas/

2007-03-15  H.J. Lu  <hongjiu.lu@@intel.com>

	* Makefile.am (REPORT_BUGS_TO): Removed.
	(INCLUDES): Remove -DREPORT_BUGS_TO.
	* Makefile.in: Regenerated.

	* configure.in (--with-bugurl): Removed.
	* configure: Regenerated.

	* doc/Makefile.am (as_TEXINFOS): Remove gasver.texi.
	(AM_MAKEINFOFLAGS): Add -I ../../bfd/doc.
	(TEXI2DVI): Likewise.
	(gasver.texi): Removed.
	(MOSTLYCLEANFILES): Remove gasver.texi.
	(as.1): Don't depend on gasver.texi.
	* doc/Makefile.in: Regenerated.

	* doc/as.texi: Include bfdver.texi instead of gasver.texi.

gprof/

2007-03-15  H.J. Lu  <hongjiu.lu@@intel.com>

	* Makefile.am (REPORT_BUGS_TO): Removed.
	(INCLUDES): Remove -DREPORT_BUGS_TO.
	* Makefile.in: Regenerated.

	* configure.in (--with-bugurl): Removed.
	* configure: Regenerated.

ld/

2007-03-15  H.J. Lu  <hongjiu.lu@@intel.com>

	* Makefile.am (ld_TEXINFOS): Remove ldver.texi.
	(AM_MAKEINFOFLAGS): Add -I ../../bfd/doc.
	(TEXI2DVI): Likewise.
	(REPORT_BUGS_TO): Removed.
	(INCLUDES): Remove -DREPORT_BUGS_TO.
	(ldver.texi): Likewise.
	(ld.1): Don't depend on ldver.texi.
	(MOSTLYCLEANFILES): Remove ldver.texi.
	* Makefile.in: Regenerated.

	* configure.in (--with-bugurl): Removed.
	* configure: Regenerated.

	* lexsup.c: Include bfdver.h.

	* ld.texinfo: Include bfdver.texi instead of ldver.texi.
@
text
@d983 3
a985 1
	 echo "@@set VERSION_PACKAGE $(PKGVERSION)" >> doc/bfdver.texi; \
@


1.189
log
@	* Makefile.am (BFD64_BACKENDS): Add efi-app-x86_64.lo.
	(BFD64_BACKENDS_CFILES): Add efi-app-x86_64.c.
	Run "make dep-am".
	* Makefile.in: Regenerate.
	* po/SRC-POTFILES.in: Regenerate.
@
text
@d967 2
a968 1
	@@echo "creating $@@"
d972 1
d977 11
a987 1
	sed -e "s/@@bfd_version@@/$$bfd_version/" -e "s/@@bfd_version_string@@/$$bfd_version_string/" -e "s/@@bfd_version_package@@/$$bfd_version_package/" < $(srcdir)/version.h > $@@
@


1.188
log
@bfd:
	* Makefile.am (bfdver.h): Use "." not " " between version number
	and date.
	* Makefile.in: Regenerate.
	* configure.in (PKGVERSION): Default to "(GNU Binutils) ".
	* configure: Regenerate.

binutils:
	* version.c (print_version): Update copyright date.

gas:
	* as.c (parse_args): Update copyright date.

gprof:
	* gprof.c: Include bfdver.h
	(main): Use BFD_VERSION_STRING for version number and package
	name.
	* Makefile.am (PKGVERSION): Remove.
	(INCLUDES): Update.
	Regenerate dependencies.
	* Makefile.in: Regenerate.
	* configure.in (PKGVERSION): Remove.
	* configure: Regenerate.

ld:
	* ldver.c (ldversion): Remove word "version" from output.  Update
	copyright date.
@
text
@d557 1
d588 1
d1419 4
a1422 3
elf32-mep.lo: elf32-mep.c elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/mep.h $(INCDIR)/elf/reloc-macros.h \
d1805 5
@


1.187
log
@top level:
2007-02-17  Mark Mitchell  <mark@@codesourcery.com>
            Nathan Sidwell  <nathan@@codesourcery.com>
            Vladimir Prus  <vladimir@@codesourcery.com
            Joseph Myers  <joseph@@codesourcery.com>

	* configure.ac (TOPLEVEL_CONFIGURE_ARGUMENTS): Fix quoting.
	* configure: Regenerate.

bfd:
2007-02-17  Mark Mitchell  <mark@@codesourcery.com>
            Nathan Sidwell  <nathan@@codesourcery.com>
            Vladimir Prus  <vladimir@@codesourcery.com
            Joseph Myers  <joseph@@codesourcery.com>

	* configure.in (--with-pkgversion): New option.
	* configure: Regenerate.
	* Makefile.am (bfdver.h): Substitute for @@bfd_version_package@@.
	* Makefile.in: Regenerate.
	* version.h (BFD_VERSION_STRING): Define using
	@@bfd_version_package@@.

bfd/doc:
2007-02-17  Mark Mitchell  <mark@@codesourcery.com>
            Nathan Sidwell  <nathan@@codesourcery.com>
            Vladimir Prus  <vladimir@@codesourcery.com
            Joseph Myers  <joseph@@codesourcery.com>

	* Makefile.in: Regenerate.

binutils:
2007-02-17  Mark Mitchell  <mark@@codesourcery.com>
            Nathan Sidwell  <nathan@@codesourcery.com>
            Vladimir Prus  <vladimir@@codesourcery.com
            Joseph Myers  <joseph@@codesourcery.com>

	* configure.in (--with-bugurl): New option.
	* configure: Regenerate.
	* Makefile.am (REPORT_BUGS_TO): Define.
	(INCLUDES): Define REPORT_BUGS_TO.
	Regenerate dependencies.
	* Makefile.in: Regenerate.
	* doc/Makefile.in: Regenerate.
	* bucomm.h: Remove include of bin-bugs.h.
	* addr2line.c (usage): Don't print empty REPORT_BUGS_TO.
	* ar.c (usage): Pass s to list_supported_targets.  Don't print
	empty REPORT_BUGS_TO.
	* coffdump.c (show_usage): Don't print empty REPORT_BUGS_TO.
	* cxxfilt.c (usage): Print bug url when giving help.
	* dlltool.c (usage): Likewise.
	* dllwrap.c (usage): Likewise.
	* nlmconv.c (show_usage): Don't print empty REPORT_BUGS_TO.
	* nm.c (usage): Likewise.
	* objcopy.c (copy_usage, strip_usage): Likewise.
	* objdump.c (usage): Likewise.
	* readelf.c ((usage): Likewise. Add STREAM argument.  Adjust
	callers.
	* size.c (usage): Don't print empty REPORT_BUGS_TO.
	* srconv.c (show_usage): Likewise.
	* strings.c (usage): Likewise.
	* sysdymp.c (show_usage): Likewise.
	* windres.c (usage): Likewise.

gas:
2007-02-17  Mark Mitchell  <mark@@codesourcery.com>
            Nathan Sidwell  <nathan@@codesourcery.com>
            Vladimir Prus  <vladimir@@codesourcery.com
            Joseph Myers  <joseph@@codesourcery.com>

	* configure.in (--with-bugurl): New option.
	* configure: Regenerate.
	* dep-in.sed: Remove bin-bugs.h.
	* Makefile.am (REPORT_BUGS_TO): Define.
	(INCLUDES): Define REPORT_BUGS_TO.
	(DEP_INCLUDES): Likewise.
	($(OBJS)): No longer depend on bin-bugs.h.
	* Makefile.in: Regenerate.
	* doc/Makefile.in: Regenerate.
	* as.c (show_usage): Don't print empty REPORT_BUGS_TO.
	* as.h: Remove include of bin-bugs.h.

gprof:
2007-02-17  Mark Mitchell  <mark@@codesourcery.com>
            Nathan Sidwell  <nathan@@codesourcery.com>
            Vladimir Prus  <vladimir@@codesourcery.com
            Joseph Myers  <joseph@@codesourcery.com>

	* configure.in (--with-pkgversion, --with-bugurl): New options.
	* configure: Regenerate.
	* Makefile.am (PKGVERSION, REPORT_BUGS_TO): Define.
	(INCLUDES): Define PKGVERSION and REPORT_BUGS_TO.
	Regenerate dependencies.
	* Makefile.in: Regenerate.
	* gprof.c (usage): Don't print empty REPORT_BUGS_TO.
	(main): Include PKGVERSION in version output.
	* gprof.h: Remove include of bin-bugs.h.

include:
2007-02-17  Mark Mitchell  <mark@@codesourcery.com>
            Nathan Sidwell  <nathan@@codesourcery.com>
            Vladimir Prus  <vladimir@@codesourcery.com
            Joseph Myers  <joseph@@codesourcery.com>

	* bin-bugs.h: Remove.

ld:
2007-02-17  Mark Mitchell  <mark@@codesourcery.com>
            Nathan Sidwell  <nathan@@codesourcery.com>
            Vladimir Prus  <vladimir@@codesourcery.com
            Joseph Myers  <joseph@@codesourcery.com>

	* configure.in (--with-bugurl): New option.
	* configure: Regenerate.
	* Makefile.am (REPORT_BUGS_TO): Define.
	(INCLUDES): Define REPORT_BUGS_TO.
	Regenerate dependencies.
	* Makefile.in: Regenerate.
	* ld.h: Remove include of bin-bugs.h.
	* lexsup.c (help): Don't print empty REPORT_BUGS_TO.
@
text
@d971 1
a971 1
	  bfd_version_string="\"$(VERSION) $${bfd_version_date}\"" ;\
@


1.186
log
@Support for Toshiba MeP and for complex relocations.
@
text
@d968 1
d973 1
a973 1
	sed -e "s/@@bfd_version@@/$$bfd_version/" -e "s/@@bfd_version_string@@/$$bfd_version_string/" < $(srcdir)/version.h > $@@
@


1.185
log
@2076-01-12  H.J. Lu  <hongjiu.lu@@intel.com>

	* Makefile.am (BFD_LIBS): Removed.
	* Makefile.in: Regenerated.
@
text
@d94 1
d159 1
d271 1
d448 1
d1073 1
d1416 4
@


1.184
log
@2076-01-11  H.J. Lu  <hongjiu.lu@@intel.com>

	PR binutils/3631
	* Makefile.am (OFILES): Add @@bfd64_libs@@.
	(libbfd_la_SOURCES): Remove $(BFD64_LIBS_CFILES).
	* Makefile.in: Regenerated.

	* configure.in (bfd_libs): Replaced by ...
	(bfd64_libs): This.
	* configure: Regenerated.
@
text
@a633 1
BFD_LIBS = @@bfd_libs@@
@


1.183
log
@New Cell SPU port.
@
text
@d720 2
a721 1
OFILES = $(BFD_BACKENDS) $(BFD_MACHINES) @@COREFILE@@
d738 3
a740 1
libbfd_la_SOURCES = $(BFD32_LIBS_CFILES) $(BFD64_LIBS_CFILES)
@


1.182
log
@Add x86_64-mingw64 target
@
text
@d109 1
d173 1
d285 1
d461 1
a1080 1
cpu-score.lo: cpu-score.c $(INCDIR)/filenames.h
d1082 1
d1086 1
a1460 4
elf32-score.lo: elf32-score.c $(INCDIR)/filenames.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/elf/score.h \
  $(INCDIR)/elf/reloc-macros.h elf32-target.h
d1465 5
d1491 4
d1858 15
@


1.181
log
@Add support for Score target.
@
text
@d566 5
a570 1
	pepigen.lo
d593 4
a596 1
	nlm64.c
d646 1
a646 1
	elf32-ia64.c elf64-ia64.c peigen.c pepigen.c
d804 5
d1876 3
@


1.180
log
@bfd
* Makefile.am: Add rules to build pe-arm-wince.lo and pei-arm-wince.lo objects.
* Makefile.in: Regenerate.
* pe-arm-wince.c: New file.
* pei-arm-wince.c: New file.
* pei-arm.c: Remove ARM_WINCE block.
* pe-arm.c: Remove ARM_WINCE block. Rename
bfd_arm_pe_allocate_interworking_sections,
bfd_arm_pe_get_bfd_for_interworking, and
bfd_arm_pe_process_before_allocation to
bfd_armpe_allocate_interworking_sections,
bfd_armpe_get_bfd_for_interworking, and
bfd_armpe_process_before_allocation. Move them before including bfd.h.
* bfd.c: ARM wince bfd format names were renamed. Adjust.
* coff-arm.c [ARM_WINCE]: Adjust so Windows CE doesn't end up with unexpected/conflicting relocs.
* targets.c: The arm-wince-pe target got its own new vector.  Adjust.
* config.bfd: Likewise.
* configure.in: Likewise.
* configure: Regenerate.

binutils
* configure.in: Split arm-pe and arm-wince-pe. Build dlltool with -DDLLTOOL_ARM_WINCE for Windows CE case.
* configure: Regenerate.
* dlltool.c: Add support for arm-wince.

gas
* Makefile.am (TARG_ENV_HFILES): Add te-wince-pe.h.
* Makefile.in: Regenerate.
* config/tc-arm.h [TARGET_FORMAT]: ARM wince bfd names were  renamed. Adjust.

ld
* Makefile.am: Split arm-wince into its own emulation.
* Makefile.in: Regenerate.
* configure.tgt: Set targ_emul to arm_wince_pe for ARM Windows CE targets.
* pe-dll.c : Define PE_ARCH_arm_wince.
  (pe_detail_list): Add PE_ARCH_arm_wince case.
  (make_one): Handle PE_ARCH_arm_epoc and PE_ARCH_arm_wince cases.
* emulparams/arm_wince_pe.sh: New file.
* emultempl/pe.em: Handle new TARGET_IS_arm_wince_pe define.
  Remap bfd_arm_allocate_interworking_sections, bfd_arm_get_bfd_for_interworking and
  bfd_arm_process_before_allocation for arm-pe and arm-wince-pe targets too.
  (gld_${EMULATION_NAME}_recognized_file): Handle arm-wince and arm-epoc bfd format names.
@
text
@d106 1
d169 1
d276 1
d453 1
d1065 1
d1444 4
@


1.179
log
@bfd/
2006-08-02  Richard Sandiford  <richard@@codesourcery.com>
	    Kazu Hirata  <kazu@@codesourcery.com>
	    Phil Edwards  <phil@@codesourcery.com>
	    Nathan Sidwell  <nathan@@codesourcery.com>

	* config.bfd (sh-*-vxworks): Use bfd_elf32_shvxworks_vec and
	bfd_elf32_shlvxworks_vec.
	* configure.in (bfd_elf32_sh64_vec): Add elf-vxworks.lo.
	(bfd_elf32_sh64l_vec, bfd_elf32_sh64lin_vec): Likewise.
	(bfd_elf32_sh64blin_vec, bfd_elf32_sh64lnbsd_vec): Likewise.
	(bfd_elf32_sh64nbsd_vec, bfd_elf32_sh_vec): Likewise.
	(bfd_elf32_shblin_vec, bfd_elf32_shl_vec): Likewise.
	(bfd_elf32_shl_symbian_vec, bfd_elf32_shlin_vec): Likewise.
	(bfd_elf32_shlnbsd_vec, bfd_elf32_shnbsd_vec): Likewise.
	(bfd_elf32_shlvxworks_vec, bfd_elf32_shvxworks_vec): New stanzas.
	* configure: Regenerate.
	* Makefile.am: Regenerate dependencies.
	* Makefile.in: Regenerate.
	* elf-vxworks.c (elf_vxworks_gott_symbol_p): New function.
	(elf_vxworks_add_symbol_hook): Use it.
	(elf_vxworks_link_output_symbol_hook): Likewise.  Use the hash
	table entry to check for weak undefined symbols and to obtain
	the original bfd.
	(elf_vxworks_emit_relocs): Use target_index instead of this_idx.
	* elf32-sh-relocs.h: New file, split from elf32-sh.c.
	(R_SH_DIR32): Use SH_PARTIAL32 for the partial_inplace field,
	SH_SRC_MASK32 for the src_mask field, and SH_ELF_RELOC for the
	special_function field.
	(R_SH_REL32): Use SH_PARTIAL32 and SH_SRC_MASK32 here too.
	(R_SH_REL32, R_SH_TLS_GD_32, R_SH_TLS_LD_32): Likewise.
	(R_SH_TLS_LDO_32, R_SH_TLS_IE_32, R_SH_TLS_LE_32): Likewise.
	(R_SH_TLS_DTPMOD32, R_SH_TLS_DTPOFF32, R_SH_TLS_TPOFF32): Likewise.
	(R_SH_GOT32, R_SH_PLT32, R_SH_COPY, R_SH_GLOB_DAT): Likewise.
	(R_SH_JMP_SLOT, R_SH_RELATIVE, R_SH_GOTOFF, R_SH_GOTPC): Likewise.
	(SH_PARTIAL32, SH_SRC_MASK32, SH_ELF_RELOC): Undefine at end of file.
	* elf32-sh.c: Include elf32-vxworks.h.
	(MINUS_ONE): Define.
	(sh_elf_howto_table): Include elf32-sh-relocs.h with SH_PARTIAL32
	set to TRUE, SH_SRC_MASK32 set to 0xffffffff, and SH_ELF_RELOC set
	to sh_elf_reloc.
	(sh_vxworks_howto_table): New variable.  Include elf32-sh-relocs.h
	with SH_PARTIAL32 set to FALSE, SH_SRC_MASK32 set to 0, and
	SH_ELF_RELOC set to bfd_elf_generic_reloc.
	(vxworks_object_p, get_howto_table): New functions.
	(sh_elf_reloc_type_lookup): Fix typo.  Use get_howto_table.
	(sh_elf_info_to_howto): Use get_howto_table.
	(sh_elf_relax_section): Honor the partial_inplace field of the
	R_SH_DIR32 howto.
	(sh_elf_relax_delete_bytes): Likewise.
	(elf_sh_plt_info): New structure.
	(PLT_ENTRY_SIZE): Replace both definitions with...
	(ELF_PLT_ENTRY_SIZE): ...this new macro, with separate definitions for
	INCLUDE_SHMEDIA and !INCLUDE_SHMEDIA.
	(elf_sh_plt0_entry_be): Update sizes of both definitions accordingly.
	(elf_sh_plt0_entry_le): Likewise.
	(elf_sh_plt_entry_be, elf_sh_plt_entry_le): Likewise.
	(elf_sh_pic_plt_entry_be, elf_sh_pic_plt_entry_le): Likewise.
	(elf_sh_plts): New structure, with separate definitions for
	INCLUDE_SHMEDIA and !INCLUDE_SHMEDIA.
	(elf_sh_plt0_entry): Delete both definitions.
	(elf_sh_plt_entry, elf_sh_pic_plt_entry): Likewise.
	(elf_sh_sizeof_plt, elf_sh_plt_plt0_offset): Likewise.
	(elf_sh_plt_temp_offset, elf_sh_plt_symbol_offset): Likewise.
	(elf_sh_plt_reloc_offset): Likewise.
	(movi_shori_putval): Delete in favor of...
	(install_plt_field): ...this new function, with separate definitions
	for INCLUDE_SHMEDIA and !INCLUDE_SHMEDIA.
	(get_plt_info): New function, with separate definitions
	for INCLUDE_SHMEDIA and !INCLUDE_SHMEDIA.
	(elf_sh_plt0_linker_offset, elf_sh_plt0_gotid_offset): Delete.
	(VXWORKS_PLT_HEADER_SIZE, VXWORKS_PLT_ENTRY_SIZE): New macros.
	(vxworks_sh_plt0_entry_be, vxworks_sh_plt0_entry_le): New constants.
	(vxworks_sh_plt_entry_be, vxworks_sh_plt_entry_le): Likewise.
	(vxworks_sh_pic_plt_entry_be, vxworks_sh_pic_plt_entry_le): Likewise.
	(get_plt_index, get_plt_offset): New functions.
	(elf_sh_link_hash_table): Add srelplt2, plt_info and vxworks_p fields.
	(sh_elf_link_hash_table_create): Initialize them.
	(sh_elf_create_dynamic_sections): Call
	elf_vxworks_create_dynamic_sections for VxWorks.
	(allocate_dynrelocs): Use htab->plt_info to get the size of PLT
	entries.  Allocate relocation entries in .rela.plt.unloaded if
	generating a VxWorks executable.
	(sh_elf_always_size_sections): New function.
	(sh_elf_size_dynamic_sections): Extend .rela.plt handling to
	.rela.plt.unloaded.
	(sh_elf_relocate_section): Use get_howto_table.  Honor
	partial_inplace when calculating the addend for dynamic
	relocations.  Use get_plt_index.
	(sh_elf_finish_dynamic_symbol): Use get_plt_index, install_plt_field
	and htab->plt_info.  Fill in the bra .plt offset for VxWorks
	executables.  Populate .rela.plt.unloaded.  Do not make
	_GLOBAL_OFFSET_TABLE_ absolute on VxWorks.
	(sh_elf_finish_dynamic_sections): Use install_plt_field and
	htab->plt_info.  Handle cases where there is no special PLT header.
	Populate the first relocation in .rela.plt.unloaded and fix up
	the remaining entries.
	(sh_elf_plt_sym_val): Use get_plt_info.
	(elf_backend_always_size_sections): Define.
	(TARGET_BIG_SYM, TARGET_BIG_NAME): Override for VxWorks.
	(TARGET_LITTLE_SYM, TARGET_BIG_SYM): Likewise.
	(elf32_bed, elf_backend_want_plt_sym): Likewise.
	(elf_symbol_leading_char, elf_backend_want_got_underscore): Likewise.
	(elf_backend_grok_prstatus, elf_backend_grok_psinfo): Likewise.
	(elf_backend_add_symbol_hook): Likewise.
	(elf_backend_link_output_symbol_hook): Likewise.
	(elf_backend_emit_relocs): Likewise.
	(elf_backend_final_write_processing): Likewise.
	(ELF_MAXPAGESIZE, ELF_COMMONPAGESIZE): Likewise.
	* targets.c (bfd_elf32_shlvxworks_vec): Declare.
	(bfd_elf32_shvxworks_vec): Likewise.
	(_bfd_target_vector): Include bfd_elf32_shlvxworks_vec and
	bfd_elf32_shvxworks_vec.

gas/
	* config/tc-sh.c (apply_full_field_fix): New function.
	(md_apply_fix): Use it instead of md_number_to_chars.  Do not fill
	in fx_addnumber for BFD_RELOC_32_PLT_PCREL.
	(tc_gen_reloc): Use fx_addnumber rather than 0 as the default case.
	* config/tc-sh.h (TARGET_FORMAT): Override for TE_VXWORKS.

ld/
2006-08-02  Richard Sandiford  <richard@@codesourcery.com>
	    Kazu Hirata  <kazu@@codesourcery.com>
	    Phil Edwards  <phil@@codesourcery.com>

	* Makefile.am (ALL_EMULATIONS): Add eshelf_vxworks.o and
	eshlelf_vxworks.o.
	(eshelf_vxworks.c, eshlelf_vxworks.c): New rules.
	* Makefile.in: Regenerate.
	* configure.tgt (sh-*-vxworks): Use shelf_vxworks and
	shlelf_vxworks.
	* emulparams/shelf_vxworks.sh: New file.
	* emulparams/shlelf_vxworks.sh: Likewise.
	* emulparams/vxworks.sh (FINI): Prefix _etext with ${SYMPREFIX}.
	(OTHER_END_SYMBOLS): Likewise _ehdr.
	(DATA_END_SYMBOLS): Likewise _edata.
	* emultempl/vxworks.em (vxworks_after_open): Check whether output_bfd
	is indeed an ELF file before dealing with --force-dynamic.

ld/testsuite/
	* ld-sh/rd-sh.exp: Treat vxworks1-static.d specially.
	* ld-sh/sh-vxworks.exp: New file.
	* ld-sh/sh.exp: Extend sh-linux SIZEOF_HEADERS handling to
	sh-*-vxworks.
	* ld-sh/vxworks1-le.dd, ld-sh/vxworks1-lib-le.dd,
	* ld-sh/vxworks1-lib.dd, ld-sh/vxworks1-lib.nd,
	* ld-sh/vxworks1-lib.rd, ld-sh/vxworks1-lib.s,
	* ld-sh/vxworks1-static.d, ld-sh/vxworks1.dd,
	* ld-sh/vxworks1.ld, ld-sh/vxworks1.rd, ld-sh/vxworks1.s,
	* ld-sh/vxworks2-static.sd, ld-sh/vxworks2.s,
	* ld-sh/vxworks2.sd, ld-sh/vxworks3-le.dd,
	* ld-sh/vxworks3-lib-le.dd, ld-sh/vxworks3-lib.dd,
	* ld-sh/vxworks3-lib.s, ld-sh/vxworks3.dd, ld-sh/vxworks3.s,
	* ld-sh/vxworks4.d, ld-sh/vxworks4a.s, ld-sh/vxworks4b.s,
	* ld-sh/reloc1.s, ld-sh/reloc1.d: New tests.
@
text
@d326 2
d500 2
d1629 10
@


1.178
log
@	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.
	* config.in: Regenerate.
@
text
@d1130 2
a1131 1
  coff-m68k.c $(INCDIR)/hashtab.h libcoff.h $(INCDIR)/bfdlink.h \
d1427 3
a1429 3
  elf32-sh64.h elf32-sh.c $(INCDIR)/hashtab.h $(INCDIR)/elf/sh.h \
  $(INCDIR)/elf/reloc-macros.h $(INCDIR)/libiberty.h \
  $(srcdir)/../opcodes/sh-opc.h elf32-target.h
d1441 3
a1443 3
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/elf/sh.h \
  $(INCDIR)/elf/reloc-macros.h $(INCDIR)/libiberty.h \
  $(srcdir)/../opcodes/sh-opc.h elf32-target.h
d1447 3
a1449 3
  $(INCDIR)/elf/external.h $(INCDIR)/elf/sh.h $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/libiberty.h $(srcdir)/../opcodes/sh-opc.h \
  elf32-target.h
d1829 1
a1829 1
  elf32-target.h
d1834 1
a1834 1
  elf64-target.h
@


1.177
log
@Configury changes: update src repository (binutils, gdb, and rda) to use
config/gettext-sister.m4 instead of the old gettext.m4.  Regenerate all
affected autotools files.  Include intl in gdb releases again.
@
text
@d1263 1
a1263 1
  $(INCDIR)/elf/reloc-macros.h elf32-target.h
@


1.176
log
@	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.
@
text
@d619 1
a619 1
INCLUDES = @@HDEFINES@@ @@COREFLAG@@ @@TDEFINES@@ $(CSEARCH) $(CSWITCHES) -I$(srcdir)/../intl -I../intl
@


1.175
log
@
2006-04-06  Carlos O'Donell <carlos@@codesourcery.com>

	* Makefile.tpl: Add install-html target.
	* Makefile.def: Add install-html target.
	* Makefile.in: Regenerate.
	* configure.in: Add --with-datarootdir, --with-docdir,
	and --with-htmldir options.
	* configure: Regenerate.

bfd/

2006-04-06  Carlos O'Donell  <carlos@@codesourcery.com>

	* po/Make-in: Add install-html target.
	* Makefile.am: Rename docdir to bfddocdir. Add datarootdir, docdir
	htmldir. Add install-html and install-html-recursive targets.
	* Makefile.in: Regenerate.
	* configure.in: AC_SUBST for datarootdir, docdir and htmldir.
	* configure: Regenerate.

bfd/doc/

2006-04-06  Carlos O'Donell  <carlos@@codesourcery.com>

	* Makefile.am: Add install-html and install-html-am targets.
	Define datarootdir, docdir and htmldir.
	* Makefile.in: Regenerate.

binutils/

2006-04-06  Carlos O'Donell  <carlos@@codesourcery.com>

	* po/Make-in: Add install-html target.
	* Makefile.am: Add install-html and install-html-recursive targets.
	* Makefile.in: Regenerate.
	* configure.in: AC_SUBST datarootdir, docdir and htmldir.
	* configure: Regenerate.
	* doc/Makefile.am: Add install-html and install-html-am targets.
	* doc/Makefile.in: Regenerate.

etc/

2006-04-06  Carlos O'Donell  <carlos@@codesourcery.com>

	* Makefile.in: Add install-html target. Add htmldir,
	docdir and datarootdir.
	* configure.texi: Document install-html target.
	* configure.in: AC_SUBST datarootdir, docdir, htmldir.
	* configure: Regenerate.

gas/

2006-04-06  Carlos O'Donell  <carlos@@codesourcery.com>

	* po/Make-in: Add install-html target.
	* Makefile.am: Add install-html and install-html-recursive targets.
	* Makefile.in: Regenerate.
	* configure.in: AC_SUBST datarootdir, docdir, htmldir.
	* configure: Regenerate.
	* doc/Makefile.am: Add install-html and install-html-am targets.
	* doc/Makefile.in: Regenerate.

gprof/

2006-04-06  Carlos O'Donell  <carlos@@codesourcery.com>

	* po/Make-in: Add install-html target.
	* Makefile.am: Add install-html, install-html-am and
	install-html-recursive targets.
	* Makefile.in: Regenerate.
	* configure.in: AC_SUBST datarootdir, docdir, htmldir.
	* configure: Regenerate.

intl/

2006-04-06  Carlos O'Donell  <carlos@@codesourcery.com>

	* intl/Makefile.in: Add html info and dvi and install-html to .PHONY
	Add install-html target.

ld/

2006-04-06  Carlos O'Donell  <carlos@@codesourcery.com>

	* Makefile.am: Add install-html, install-html-am, and
	install-html-recursive targets.
	* Makefile.in: Regenerate.
	* configure.in: AC_SUBST datarootdir, docdir, htmldir.
	* configure: Regenerate.
	* po/Make-in: Add install-html target.

opcodes/

2006-04-06  Carlos O'Donell  <carlos@@codesourcery.com>

	* Makefile.am: Add install-html target.
	* Makefile.in: Regenerate.
@
text
@d1267 2
a1268 1
  $(INCDIR)/elf/reloc-macros.h elf32-target.h
d1386 2
a1387 2
  $(INCDIR)/coff/sym.h $(INCDIR)/coff/symconst.h $(INCDIR)/coff/ecoff.h \
  $(INCDIR)/coff/mips.h $(INCDIR)/coff/external.h elf-vxworks.h
d1391 2
a1392 2
  $(INCDIR)/elf/mips.h $(INCDIR)/elf/reloc-macros.h $(INCDIR)/coff/sym.h \
  $(INCDIR)/coff/symconst.h $(INCDIR)/coff/internal.h \
d1394 1
a1394 1
  ecoffswap.h elf32-target.h elf-vxworks.h
d1450 4
a1453 4
  $(INCDIR)/bfdlink.h $(INCDIR)/hashtab.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/elf/sparc.h \
  $(INCDIR)/elf/reloc-macros.h $(INCDIR)/opcode/sparc.h \
  elfxx-sparc.h elf-vxworks.h
d1458 1
a1458 1
  elfxx-sparc.h elf32-target.h elf-vxworks.h
@


1.175.2.1
log
@Mark the 2.17 release.
@
text
@d6 1
a6 1
RELEASE=y
@


1.175.2.2
log
@	* Makefile.am: Clear RELEASE.
	* Makefile.in: Regenerated.
@
text
@d6 1
a6 1
# RELEASE=y
@


1.174
log
@bfd/
	* config.bfd (sparc-*-vxworks*): New stanza.
	* configure.in (bfd_elf32_sparc_vxworks_vec): New stanza.
	(bfd_elf32_sparc_vec, bfd_elf64_sparc_vec): Add elf-vxworks.lo.
	* configure: Regenerate.
	* elf32-sparc.c: Include elf-vxworks.h.
	(elf32_sparc_vxworks_link_hash_table_create: New.
	(elf32_sparc_vxworks_final_write_processing): New.
	(TARGET_BIG_SYM): Override for VxWorks.
	(TARGET_BIG_NAME, ELF_MINPAGESIZE): Likewise.
	(bfd_elf32_bfd_link_hash_table_create): Likewise.
	(elf_backend_want_got_plt, elf_backend_plt_readonly): Likewise.
	(elf_backend_got_header_size, elf_backend_add_symbol_hook): Likewise.
	(elf_backend_link_output_symbol_hook): Likewise.
	(elf_backend_emit_relocs): Likewise.
	(elf_backend_final_write_processing, elf32_bed): Likewise.
	* elfxx-sparc.c: Include libiberty.h and elf-vxworks.h.
	(sparc_vxworks_exec_plt0_entry, sparc_vxworks_exec_plt_entry): New.
	(sparc_vxworks_shared_plt0_entry, sparc_vxworks_shared_plt_entry): New.
	(_bfd_sparc_elf_link_hash_table_create): Don't initialize
	build_plt_entry here.
	(create_got_section): Initialize sgotplt for VxWorks.
	(_bfd_sparc_elf_create_dynamic_sections): Initialize build_plt_entry,
	plt_header_size and plt_entry_size, with new VxWorks-specific settings.
	Call elf_vxworks_create_dynamic_sections for VxWorks.
	(allocate_dynrelocs): Use plt_header_size and plt_entry_size.
	Allocate room for .got.plt and .rela.plt.unloaded entries on VxWorks.
	(_bfd_sparc_elf_size_dynamic_sections): Don't allocate a nop in .plt
	for VxWorks.  Check for the .got.plt section.
	(sparc_vxworks_build_plt_entry): New function.
	(_bfd_sparc_elf_finish_dynamic_symbol): Add handling of VxWorks PLTs.
	Don't make _GLOBAL_OFFSET_TABLE_ and _PROCEDURE_LINKAGE_TABLE_
	absolute on VxWorks.
	(sparc32_finish_dyn): Add special handling for DT_RELASZ
	and DT_PLTGOT on VxWorks.
	(sparc_vxworks_finish_exec_plt): New.
	(sparc_vxworks_finish_shared_plt): New.
	(_bfd_sparc_elf_finish_dynamic_sections): Call them.
	Use plt_header_size and plt_entry_size.
	* elfxx-sparc.h (_bfd_sparc_elf_link_hash_table): Add is_vxworks,
	srelplt2, sgotplt, plt_header_size and plt_entry_size fields.
	* Makefile.am (elfxx-sparc.lo): Depend on elf-vxworks.h.
	(elf32-sparc.lo): Likewise.
	* Makefile.in: Regenerate.
	* targets.c (bfd_elf32_sparc_vxworks_vec): Declare.
	(_bfd_target_vector): Add a pointer to it.

gas/
	* config/tc-sparc.c (sparc_target_format): Handle TE_VXWORKS.
	(GOTT_BASE, GOTT_INDEX): New.
	(tc_gen_reloc): Don't alter relocations against GOTT_BASE and
	GOTT_INDEX when generating VxWorks PIC.
	* configure.tgt (sparc*-*-vxworks*): Remove this special case;
	use the generic *-*-vxworks* stanza instead.

gas/testsuite/
	* gas/sparc/vxworks-pic.s, gas/sparc/vxworks-pic.d: New test.
	* gas/sparc/sparc.exp: Run it.  Remove sparc*-*-vxworks* XFAILs.

ld/
	* configure.tgt (sparc*-*-vxworks*): New stanza.
	* emulparams/elf32_sparc_vxworks.sh: New file.
	* Makefile.am (ALL_EMULATIONS): Add eelf32_sparc_vxworks.o.
	(eelf32_sparc_vxworks.c): New rule.
	* Makefile.in: Regenerate.

ld/testsuite/
	* ld-sparc/vxworks1.dd, ld-sparc/vxworks1.ld, ld-sparc/vxworks1-lib.dd,
	* ld-sparc/vxworks1-lib.nd, ld-sparc/vxworks1-lib.rd,
	* ld-sparc/vxworks1-lib.s, ld-sparc/vxworks1.rd, ld-sparc/vxworks1.s,
	* ld-sparc/vxworks1-static.d, ld-sparc/vxworks2.s,
	* ld-sparc/vxworks2.sd, ld-sparc/vxworks2-static.sd: New tests.
	* ld-sparc/sparc.exp: Run them.
@
text
@d14 1
a14 1
docdir = doc
d18 4
d668 29
d895 2
a896 2
	(cd $(docdir); $(MAKE) protos $(FLAGS_TO_PASS))
	cp $(docdir)/bfd.h bfd-in2.h-new
d898 1
a898 1
	cp $(docdir)/libbfd.h libbfd.h-new
d900 1
a900 1
	cp $(docdir)/libcoff.h libcoff.h-new
d908 2
a909 2
	(cd $(docdir); $(MAKE) $(FLAGS_TO_PASS) bfd.h)
	cp $(docdir)/bfd.h bfd-in2.h-new
d915 2
a916 2
	(cd $(docdir); $(MAKE) $(FLAGS_TO_PASS) libbfd.h)
	cp $(docdir)/libbfd.h libbfd.h-new
d922 2
a923 2
	(cd $(docdir); $(MAKE) $(FLAGS_TO_PASS) libcoff.h)
	cp $(docdir)/libcoff.h libcoff.h-new
@


1.173
log
@	Richard Sandiford  <richard@@codesourcery.com>
	Daniel Jacobowitz  <dan@@codesourcery.com>
	Phil Edwards  <phil@@codesourcery.com>
	Zack Weinberg  <zack@@codesourcery.com>
	Mark Mitchell  <mark@@codesourcery.com>
	Nathan Sidwell  <nathan@@codesourcery.com>

bfd/
	* bfd-in2.h: Regenerate.
	* config.bfd (mips*-*-vxworks*, mips*el-*-vxworks*): New stanzas.
	* configure.in (bfd_elf32_bigmips_vxworks_vec): New stanza.
	(bfd_elf32_littlemips_vxworks_vec): Likewise.
	(bfd_elf32_bigmips_vec): Add elf-vxworks.lo.
	(bfd_elf32_littlemips_vec): Likewise.
	(bfd_elf32_nbigmips_vec): Likewise.
	(bfd_elf32_nlittlemips_vec): Likewise.
	(bfd_elf32_ntradbigmips_vec): Likewise.
	(bfd_elf32_ntradlittlemips_vec): Likewise.
	(bfd_elf32_tradbigmips_vec): Likewise.
	(bfd_elf32_tradlittlemips_vec): Likewise.
	(bfd_elf64_bigmips_vec): Likewise.
	(bfd_elf64_littlemips_vec): Likewise.
	(bfd_elf64_tradbigmips_vec): Likewise.
	(bfd_elf64_tradlittlemips_vec): Likewise.
	* elf32-mips.c: Include elf-vxworks.h.
	(mips_info_to_howto_rel): Use elf_backend_mips_rtype_to_howto
	instead of calling mips_elf32_rtype_to_howto directly.
	(mips_vxworks_copy_howto_rela): New reloc howto.
	(mips_vxworks_jump_slot_howto_rela): Likewise.
	(mips_vxworks_bfd_reloc_type_lookup): New function.
	(mips_vxworks_rtype_to_howto): Likewise.
	(mips_vxworks_final_write_processing): Likewise.
	(TARGET_LITTLE_SYM, TARGET_LITTLE_NAME): Override for VxWorks.
	(TARGET_BIG_SYM, TARGET_BIG_NAME, elf_bed, ELF_MAXPAGESIZE): Likewise.
	(elf_backend_want_got_plt): Likewise.
	(elf_backend_want_plt_sym): Likewise.
	(elf_backend_got_symbol_offset): Likewise.
	(elf_backend_want_dynbss): Likewise.
	(elf_backend_may_use_rel_p): Likewise.
	(elf_backend_may_use_rela_p): Likewise.
	(elf_backend_default_use_rela_p): Likewise.
	(elf_backend_got_header_size: Likewise.
	(elf_backend_plt_readonly): Likewise.
	(bfd_elf32_bfd_reloc_type_lookup): Likewise.
	(elf_backend_mips_rtype_to_howto): Likewise.
	(elf_backend_adjust_dynamic_symbol): Likewise.
	(elf_backend_finish_dynamic_symbol): Likewise.
	(bfd_elf32_bfd_link_hash_table_create): Likewise.
	(elf_backend_add_symbol_hook): Likewise.
	(elf_backend_link_output_symbol_hook): Likewise.
	(elf_backend_emit_relocs): Likewise.
	(elf_backend_final_write_processing: Likewise.
	(elf_backend_additional_program_headers): Likewise.
	(elf_backend_modify_segment_map): Likewise.
	(elf_backend_symbol_processing): Likewise.
	* elfxx-mips.c: Include elf-vxworks.h.
	(mips_elf_link_hash_entry): Add is_relocation_target and
	is_branch_target fields.
	(mips_elf_link_hash_table): Add is_vxworks, srelbss, sdynbss, srelplt,
	srelplt2, sgotplt, splt, plt_header_size and plt_entry_size fields.
	(MIPS_ELF_RELA_SIZE, MIPS_ELF_REL_DYN_NAME): New macros.
	(MIPS_RESERVED_GOTNO): Take a mips_elf_link_hash_table argument.
	Return 3 for VxWorks.
	(ELF_MIPS_GP_OFFSET): Change the argument from a bfd to a
	mips_elf_link_hash_table.  Return 0 for VxWorks.
	(MIPS_ELF_GOT_MAX_SIZE): Change the argument from a bfd to a
	mips_elf_link_hash_table.  Update the call to ELF_MIPS_GP_OFFSET.
	(mips_vxworks_exec_plt0_entry): New variable.
	(mips_vxworks_exec_plt_entry): Likewise.
	(mips_vxworks_shared_plt0_entry): Likewise.
	(mips_vxworks_shared_plt_entry): Likewise.
	(mips_elf_link_hash_newfunc): Initialize the new hash_entry fields.
	(mips_elf_rel_dyn_section): Change the bfd argument to a
	mips_elf_link_hash_table.  Use MIPS_ELF_REL_DYN_NAME to get
	the name of the section.
	(mips_elf_initialize_tls_slots): Update the call to
	mips_elf_rel_dyn_section.
	(mips_elf_gotplt_index): New function.
	(mips_elf_local_got_index): Add an input_section argument.
	Update the call to mips_elf_create_local_got_entry.
	(mips_elf_got_page): Likewise.
	(mips_elf_got16_entry): Likewise.
	(mips_elf_create_local_got_entry): Add bfd_link_info and input_section
	arguments.  Create dynamic relocations for each entry on VxWorks.
	(mips_elf_merge_gots): Update the use of MIPS_ELF_GOT_MAX_SIZE.
	(mips_elf_multi_got): Update the uses of MIPS_ELF_GOT_MAX_SIZE
	and MIPS_RESERVED_GOTNO.
	(mips_elf_create_got_section): Update the uses of
	MIPS_ELF_GOT_MAX_SIZE.  Create .got.plt on VxWorks.
	(is_gott_symbol): New function.
	(mips_elf_calculate_relocation): Use a dynobj local variable.
	Update the calls to mips_elf_local_got_index, mips_elf_got16_entry and
	mips_elf_got_page_entry.  Set G to the .got.plt entry when calculating
	VxWorks R_MIPS_CALL* relocations.  Calculate and use G for all GOT
	relocations on VxWorks.  Add dynamic relocations for references
	to the VxWorks __GOTT_BASE__ and __GOTT_INDEX__ symbols.  Don't
	create dynamic relocations for R_MIPS_32, R_MIPS_REL32 or R_MIPS_64
	in VxWorks executables.
	(mips_elf_allocate_dynamic_relocations): Add a bfd_link_info argument.
	Use MIPS_ELF_RELA_SIZE to calculate the size of a VxWorks entry.
	Don't allocate a null entry on VxWorks.
	(mips_elf_create_dynamic_relocation): Update the call to
	mips_elf_rel_dyn_section.  Use absolute rather than relative
	relocations for VxWorks, and make them RELA rather than REL.
	(_bfd_mips_elf_create_dynamic_sections): Don't make .dynamic
	read-only on VxWorks.  Update the call to mips_elf_rel_dyn_section.
	Create the .plt, .rela.plt, .dynbss and .rela.bss sections on
	VxWorks.  Likewise create the _PROCEDURE_LINKAGE_TABLE symbol.
	Call elf_vxworks_create_dynamic_sections for VxWorks and
	initialize the plt_header_size and plt_entry_size fields.
	(_bfd_mips_elf_check_relocs): Don't allow GOT relocations to be
	used in VxWorks executables.  Don't allocate dynamic relocations
	for R_MIPS_32, R_MIPS_REL32 or R_MIPS_64 in VxWorks executables.
	Set is_relocation_target for each symbol referenced by a relocation.
	Allocate .rela.dyn entries for relocations against the special
	VxWorks __GOTT_BASE__ and __GOTT_INDEX__ symbols.  Create GOT
	entries for all VxWorks R_MIPS_GOT16 relocations.  Don't allocate
	a global GOT entry for symbols mentioned in VxWorks R_MIPS_CALL*,
	R_MIPS_32, R_MIPS_REL32 or R_MIPS_64 relocations.  Update the calls
	to mips_elf_rel_dyn_section and mips_elf_allocate_dynamic_relocations.
	Set is_branch_target for symbols mentioned in R_MIPS_PC16 or R_MIPS_26
	relocations.  Don't set no_fn_stub on VxWorks.
	(_bfd_mips_elf_adjust_dynamic_symbol): Update the call to
	mips_elf_allocate_dynamic_relocations.
	(_bfd_mips_vxworks_adjust_dynamic_symbol): New function.
	(_bfd_mips_elf_always_size_sections): Do not allocate GOT page
	entries for VxWorks, and do not create multiple GOTs.
	(_bfd_mips_elf_size_dynamic_sections): Use MIPS_ELF_REL_DYN_NAME.
	Handle .got specially for VxWorks.  Update the uses of
	MIPS_RESERVED_GOTNO and mips_elf_allocate_dynamic_relocations.
	Check for sgotplt and splt.  Allocate the .rel(a).dyn contents last,
	once its final size is known.  Set DF_TEXTREL for VxWorks.  Add
	DT_RELA, DT_RELASZ, DT_RELAENT, DT_PLTREL, DT_PLTRELSZ and DT_JMPREL
	tags on VxWorks.  Do not add the MIPS-specific tags for VxWorks.
	(_bfd_mips_vxworks_finish_dynamic_symbol): New function.
	(mips_vxworks_finish_exec_plt): Likewise.
	(mips_vxworks_finish_shared_plt): Likewise.
	(_bfd_mips_elf_finish_dynamic_sections): Remove an unncessary call
	to mips_elf_rel_dyn_section.  Use a VxWorks-specific value of
	DT_PLTGOT.  Handle DT_RELA, DT_RELASZ, DT_RELAENT, DT_PLTREL,
	DT_PLTRELSZ and DT_JMPREL.  Update the uses of MIPS_RESERVED_GOTNO
	and mips_elf_rel_dyn_section.  Use a different GOT header for
	VxWorks.  Don't sort .rela.dyn on VxWorks.  Finish the PLT on VxWorks.
	(_bfd_mips_elf_link_hash_table_create): Initialize the new
	mips_elf_link_hash_table fields.
	(_bfd_mips_vxworks_link_hash_table_create): New function.
	(_bfd_mips_elf_final_link): Set the GP value to _GLOBAL_OFFSET_TABLE_
	on VxWorks.  Update the call to ELF_MIPS_GP_OFFSET.
	* elfxx-mips.h (_bfd_mips_vxworks_adjust_dynamic_symbol): Declare.
	(_bfd_mips_vxworks_finish_dynamic_symbol): Likewise.
	(_bfd_mips_vxworks_link_hash_table_create): Likewise.
	* libbfd.h: Regenerate.
	* Makefile.am (elfxx-mips.lo): Depend on elf-vxworks.h.
	(elf32-mips.lo): Likewise.
	* Makefile.in: Regenerate.
	* reloc.c (BFD_RELOC_MIPS_COPY, BFD_RELOC_MIPS_JUMP_SLOT): Declare.
	* targets.c (bfd_elf32_bigmips_vxworks_vec): Declare.
	(bfd_elf32_littlemips_vxworks_vec): Likewise.
	(_bfd_target_vector): Add entries for them.

gas/
	* config/tc-mips.c (mips_target_format): Handle vxworks targets.
	(md_begin): Complain about -G being used for PIC.  Don't change
	the text, data and bss alignments on VxWorks.
	(reloc_needs_lo_p): Don't return true for R_MIPS_GOT16 when
	generating VxWorks PIC.
	(load_address): Extend SVR4_PIC handling to VXWORKS_PIC.
	(macro): Likewise, but do not treat la $25 specially for
	VxWorks PIC, and do not handle jal.
	(OPTION_MVXWORKS_PIC): New macro.
	(md_longopts): Add -mvxworks-pic.
	(md_parse_option): Don't complain about using PIC and -G together here.
	Handle OPTION_MVXWORKS_PIC.
	(md_estimate_size_before_relax): Always use the first relaxation
	sequence on VxWorks.
	* config/tc-mips.h (VXWORKS_PIC): New.

gas/testsuite/
	* gas/mips/vxworks1.s, gas/mips/vxworks1.d,
	* gas/mips/vxworks1-xgot.d: New tests.
	* gas/mips/mips.exp: Run them.  Do not run other tests on VxWorks.

include/elf/
	* mips.h (R_MIPS_COPY, R_MIPS_JUMP_SLOT): New relocs.

ld/
	* configure.tgt (mips*el-*-vxworks*, mips*-*-vxworks*): Use
	separate VxWorks emulations.
	* emulparams/elf32ebmipvxworks.sh: New file.
	* emulparams/elf32elmipvxworks.sh: New file.
	* Makefile.am (ALL_EMULATIONS): Add eelf32ebmipvxworks.o and
	eelf32elmipvxworks.o.
	(eelf32ebmipvxworks.c, eelf32elmipvxworks.c): New rules.
	* Makefile.in: Regenerate.

ld/testsuite/
	* ld-mips/vxworks1.dd, ld-mips/vxworks1.ld, ld-mips/vxworks1-lib.dd,
	* ld-mips/vxworks1-lib.nd, ld-mips/vxworks1-lib.rd,
	* ld-mips/vxworks1-lib.s, ld-mips/vxworks1.rd, ld-mips/vxworks1.s,
	* ld-mips/vxworks1-static.d, ld-mips/vxworks2.s, ld-mips/vxworks2.sd,
	* ld-mips/vxworks2-static.sd: New tests.
	* ld-mips/mips-elf.exp: Run them.
@
text
@d1419 1
a1419 1
  elfxx-sparc.h
d1424 1
a1424 1
  elfxx-sparc.h elf32-target.h
@


1.172
log
@	PR 2434
bfd/
	* elflink.c (struct elf_smash_syms_data, elf_smash_syms): Delete.
	(elf_link_add_object_symbols): Delete unnecessary locals.  Rename
	hash_table -> htab.  Formatting.  Save entire symbol table
	before loading as-needed syms, and restore afterwards if lib not
	needed.  Use bfd_hash_allocate rather than bfd_alloc for sym
	name.  Free some buffers earlier.
	* bfd-in.h (struct bfd_hash_table): Add entsize.
	(bfd_hash_table_init, bfd_hash_table_init_n): Adjust prototype.
	* elf-bfd.h (_bfd_elf_link_hash_table_init): Likewise
	* hash.c (bfd_hash_table_init_n): Add entsize param, save to
	hash table.
	(bfd_hash_table_init): Add param, adjust calls.
	* aoutx.h: Adjust all hash_table_init functions and calls.
	* bfd.c: Likewise.
	* coff-arm.c: Likewise.
	* coff-h8300.c: Likewise.
	* coff-ppc.c: Likewise.
	* cofflink.c: Likewise.
	* ecoff.c: Likewise.
	* ecofflink.c: Likewise.
	* elf-m10300.c: Likewise.
	* elf-strtab.c: Likewise.
	* elf.c: Likewise.
	* elf32-arm.c: Likewise.
	* elf32-bfin.c: Likewise.
	* elf32-cris.c: Likewise.
	* elf32-frv.c: Likewise.
	* elf32-hppa.c: Likewise.
	* elf32-i386.c: Likewise.
	* elf32-m32r.c: Likewise.
	* elf32-m68hc1x.c: Likewise.
	* elf32-m68k.c: Likewise.
	* elf32-ppc.c: Likewise.
	* elf32-s390.c: Likewise.
	* elf32-sh.c: Likewise.
	* elf32-vax.c: Likewise.
	* elf64-alpha.c: Likewise.
	* elf64-hppa.c: Likewise.
	* elf64-ppc.c: Likewise.
	* elf64-s390.c: Likewise.
	* elf64-sh64.c: Likewise.
	* elf64-x86-64.c: Likewise.
	* elfxx-ia64.c: Likewise.
	* elfxx-mips.c: Likewise.
	* elfxx-sparc.c: Likewise.
	* i386linux.c: Likewise.
	* libaout.h: Likewise.
	* libbfd-in.h: Likewise.
	* libcoff-in.h: Likewise.
	* linker.c: Likewise.
	* m68klinux.c: Likewise.
	* merge.c: Likewise.
	* opncls.c: Likewise.
	* pdp11.c: Likewise.
	* sparclinux.c: Likewise.
	* stabs.c: Likewise.
	* sunos.c: Likewise.
	* vms.c: Likewise.
	* xcofflink.c: Likewise.
	* section.c (struct section_hash_entry): Move to..
	* libbfd-in.h: ..here.
	* Makefile.am: Run "make dep-am"
	* Makefile.in: Regenerate.
	* bfd-in2.h: Regenerate.
	* libbfd.h: Regenerate.
	* libcoff.h: Regenerate.
binutils/
	* ieee.c (write_ieee_debugging_info): Adjust bfd_hash_table_init calls.
	* wrstabs.c (write_stabs_in_sections_debugging_info): Likewise.
ld/
	* ldcref.c (add_cref): Adjust bfd_hash_table_init calls.
	* ldlang.c (output_statement_table_init, lang_init): Likewise.
	* ldmain.c (add_ysym, add_wrap, add_keepsyms_file): Likewise.
	(undefined_symbol): Likewise.
@
text
@d1353 1
a1353 1
  $(INCDIR)/coff/mips.h $(INCDIR)/coff/external.h
d1360 1
a1360 1
  ecoffswap.h elf32-target.h
@


1.172.2.1
log
@
2006-04-03  Carlos O'Donell <carlos@@codesourcery.com>

	* Makefile.tpl: Add install-html target.
	* Makefile.def: Add install-html target.
	* Makefile.in: Regenerate.
	* configure.in: Add --with-datarootdir, --with-docdir,
	and --with-htmldir options.
	* configure: Regenerate.
	* opcodes/Makefile.am: Add install-html target.
	* opcodes/Makefile.in: Regenerate.
	* libiberty/Makefile.in: Add install-html, install-html-am, and
	install-html-recursive targets. Define mkdir_p and
	NORMAL_INSTALL.
	* libiberty/configure.ac: AC_SUBST datarootdir, docdir, htmldir.
	* libiberty/configure: Regenerate.
	* libiberty/testsuite/Makefile.in: Add install-html and html targets.
	* ld/Makefile.am: Add install-html, install-html-am, and
	install-html-recursive targets.
	* ld/Makefile.in: Regenerate.
	* ld/configure.in: AC_SUBST datarootdir, docdir, htmldir.
	* ld/configure: Regenerate.
	* ld/po/Make-in: Add install-html target.
	* intl/Makefile.in: Add html info and dvi and install-html to .PHONY
	Add install-html target.
	* gprof/po/Make-in: Add install-html target.
	* gprof/Makefile.am: Add install-html, install-html-am and
	install-html-recursive targets.
	* gprof/Makefile.in: Regenerate.
	* gprof/configure.in: AC_SUBST datarootdir, docdir, htmldir.
	* gprof/configure: Regenerate.
	* gas/po/Make-in: Add install-html target.
	* gas/Makefile.am: Add install-html and install-html-recursive targets.
	* gas/Makefile.in: Regenerate.
	* gas/configure.in: AC_SUBST datarootdir, docdir, htmldir.
	* gas/configure: Regenerate.
	* gas/doc/Makefile.am: Add install-html and install-html-am targets.
	* gas/doc/Makefile.in: Regenerate.
	* binutils/po/Make-in: Add install-html target.
	* binutils/Makefile.am: Add install-html and install-html-recursive targets.
	* binutils/Makefile.in: Regenerate.
	* binutils/configure.in: AC_SUBST datarootdir, docdir and htmldir.
	* binutils/configure: Regenerate.
	* binutils/doc/Makefile.am: Add install-html and install-html-am targets.
	* binutils/doc/Makefile.in: Regenerate.
	* bfd/po/Make-in: Add install-html target.
	* bfd/Makefile.am: Rename docdir to bfddocdir. Add datarootdir, docdir
	htmldir. Add install-html and install-html-recursive targets.
	* bfd/Makefile.in: Regenerate.
	* bfd/configure.in: AC_SUBST for datarootdir, docdir and htmldir.
	* bfd/configure: Regenerate.
	* bfd/doc/Makefile.am: Add install-html and install-html-am targets.
	Define datarootdir, docdir and htmldir.
	* bfd/doc/Makefile.in: Regenerate.
	* etc/Makefile.in: Add install-html target. Add htmldir,
	docdir and datarootdir.
	* etc/configure.texi: Document install-html target.
	* etc/configure.in: AC_SUBST datarootdir, docdir, htmldir.
	* etc/configure: Regenerate.
@
text
@d14 1
a14 1
bfddocdir = doc
a17 4
datarootdir = @@datarootdir@@
docdir = @@docdir@@
htmldir = @@htmldir@@

a663 29
.PHONY: install-html install-html-am install-html-recursive

install-html:	install-html-recursive

install-html-recursive:
	@@failcom='exit 1'; \
	for f in x $$MAKEFLAGS; do \
	  case $$f in \
	    *=* | --[!k]*);; \
	    *k*) failcom='fail=yes';; \
	  esac; \
	done; \
	dot_seen=no; \
	target=`echo $@@ | sed s/-recursive//`; \
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  echo "Making $$target in $$subdir"; \
	  if test "$$subdir" = "."; then \
	    dot_seen=yes; \
	    local_target="$$target-am"; \
	  else \
	    local_target="$$target"; \
	  fi; \
	  (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) $$local_target) \
	  || eval $$failcom; \
	done; \
	if test "$$dot_seen" = "no"; then \
	  $(MAKE) $(AM_MAKEFLAGS) "$$target-am" || exit 1; \
	fi; test -z "$$fail"

d862 2
a863 2
	(cd $(bfddocdir); $(MAKE) protos $(FLAGS_TO_PASS))
	cp $(bfddocdir)/bfd.h bfd-in2.h-new
d865 1
a865 1
	cp $(bfddocdir)/libbfd.h libbfd.h-new
d867 1
a867 1
	cp $(bfddocdir)/libcoff.h libcoff.h-new
d875 2
a876 2
	(cd $(bfddocdir); $(MAKE) $(FLAGS_TO_PASS) bfd.h)
	cp $(bfddocdir)/bfd.h bfd-in2.h-new
d882 2
a883 2
	(cd $(bfddocdir); $(MAKE) $(FLAGS_TO_PASS) libbfd.h)
	cp $(bfddocdir)/libbfd.h libbfd.h-new
d889 2
a890 2
	(cd $(bfddocdir); $(MAKE) $(FLAGS_TO_PASS) libcoff.h)
	cp $(bfddocdir)/libcoff.h libcoff.h-new
@


1.172.2.2
log
@	bfd/
	* Makefile.am: (VERSUFFIX_s): New. Pass it to compiler
	via -D.
	* Makefile.in: Regenerated.
	* configure: Regenerated.
	* configure.in: Add --with-versuffix option.
	* version.h: Add BFD_VERSION_SUFFIX, use it
	in BFD_VERSION_STRING.

	binutils/
	* Makefile.am: (REPORT_BUGS_TO_s): New. Pass it to compiler
	via -D.
	* Makefile.in: Regenerated.
	* configure: Regenerated.
	* configure.in: Add --with-bugurl option.

	gas/
	* Makefile.am: (REPORT_BUGS_TO_s): New. Pass it to compiler
	via -D.
	* Makefile.in: Regenerated.
	* configure: Regenerated.
	* configure.in: Add --with-bugurl option.

	gprof/
	* Makefile.am: (VERSUFFIX_s, REPORT_BUGS_TO_s): New. Pass
	them to compiler via -D.
	* Makefile.in: Regenerated.
	* configure: Regenerated.
	* configure.in: Add --with-versuffix and --with-bugurl option.
	* gprof.c: Print version suffix.

	ld/
	* Makefile.am: (REPORT_BUGS_TO_s): New. Pass it to compiler
	via -D.
	* Makefile.in: Regenerated.
	* configure: Regenerated.
	* configure.in: Add --with-bugurl option.
@
text
@a27 2
VERSUFFIX_s := "\"@@VERSUFFIX@@\""

a937 1
	bfd_version_suffix=$(VERSUFFIX_s) ;\
d942 1
a942 1
	sed -e "s/@@bfd_version@@/$$bfd_version/" -e "s/@@bfd_version_string@@/$$bfd_version_string/" -e "s/@@bfd_version_suffix@@/$$bfd_version_suffix/" < $(srcdir)/version.h > $@@
@


1.172.2.3
log
@Merge changes between binutils-csl-2_17-branchpoint and
binutils-2_17, except for the addition of generated files to CVS.
@
text
@d6 1
a6 1
RELEASE=y
d1389 1
a1389 1
  $(INCDIR)/coff/mips.h $(INCDIR)/coff/external.h elf-vxworks.h
d1396 1
a1396 1
  ecoffswap.h elf32-target.h elf-vxworks.h
d1455 1
a1455 1
  elfxx-sparc.h elf-vxworks.h
d1460 1
a1460 1
  elfxx-sparc.h elf32-target.h elf-vxworks.h
@


1.172.2.4
log
@	bfd/
	* Makefile.am (VERSUFFIX_s): Remove.
	(bfdver.h): Replace bfd_version_suffix with bfd_version_package.
	* configure.in: Replace --with-versuffix with --with-pkgversion.
	* version.h: Remove BFD_VERSION_SUFFIX. Update BFD_VERSION_STRING.
	* Makefile.in: Rebuilt.
	* configure: Rebuilt.

	binutils/
	* Makefile.am (REPORT_BUGS_TO_s): Replace with ...
	(REPORT_BUGS_TO): ... this.
	(INCLUDES): Update.
	* Makefile.in: Rebuilt.

	gas/
	* Makefile.am (REPORT_BUGS_TO_s): Replace with ...
	(REPORT_BUGS_TO): ... this.
	(INCLUDES, DEP_INCLUDES): Update.
	* Makefile.in: Rebuilt.

	gprof/
	* Makefile.am (REPORT_BUGS_TO_s): Replace with ...
	(REPORT_BUGS_TO): ... this.
	(VERSUFFIX_s): Remove.
	(INCLUDES): Update.
	* configure.in: Replace --with-versuffix with --with-pkgversion.
	* gprof.c (main): Update version printing.
	* Makefile.in: Rebuilt.
	* configure: Rebuilt.

	ld/
	* Makefile.am (REPORT_BUGS_TO_s): Replace with ...
	(REPORT_BUGS_TO): ... this.
	(INCLUDES): Update.
	* Makefile.in: Rebuilt.
@
text
@d28 2
d940 1
a940 1
	bfd_version_package="\"$(PKGVERSION)\"" ;\
d945 1
a945 1
	sed -e "s/@@bfd_version@@/$$bfd_version/" -e "s/@@bfd_version_string@@/$$bfd_version_string/" -e "s/@@bfd_version_package@@/$$bfd_version_package/" < $(srcdir)/version.h > $@@
@


1.171
log
@bfd/
	* configure.in (bfd_elf32_bigarm_vec): Include elf-vxworks.lo.
	(bfd_elf32_bigarm_symbian_vec): Likewise.
	(bfd_elf32_bigarm_vxworks_vec): Likewise.
	(bfd_elf32_littlearm_vec): Likewise.
	(bfd_elf32_littlearm_symbian_vec): Likewise.
	(bfd_elf32_littlearm_vxworks_vec): Likewise.
	* configure: Regenerate.
	* elf32-arm.c: Include libiberty.h and elf-vxworks.h.
	(RELOC_SECTION, RELOC_SIZE, SWAP_RELOC_IN, SWAP_RELOC_OUT): New macros.
	(elf32_arm_vxworks_bed): Add forward declaration.
	(elf32_arm_howto_table_1): Fix the masks for R_ASM_ABS12.
	(elf32_arm_vxworks_exec_plt0_entry): New table.
	(elf32_arm_vxworks_exec_plt_entry): Likewise.
	(elf32_arm_vxworks_shared_plt_entry): Likewise.
	(elf32_arm_link_hash_table): Add vxworks_p and srelplt2 fields.
	(reloc_section_p): New function.
	(create_got_section): Use RELOC_SECTION.
	(elf32_arm_create_dynamic_sections): Likewise.  Call
	elf_vxworks_create_dynamic_sections for VxWorks targets.
	Choose between the two possible values of plt_header_size
	and plt_entry_size.
	(elf32_arm_link_hash_table_create): Initialize vxworks_p and srelplt2.
	(elf32_arm_abs12_reloc): New function.
	(elf32_arm_final_link_relocate): Call it.  Allow the creation of
	dynamic R_ARM_ABS12 relocs on VxWorks.  Use reloc_section_p,
	RELOC_SIZE, SWAP_RELOC_OUT and RELOC_SECTION.  Initialize the
	r_addend fields of relocs.  On rela targets, skip any code that
	adjusts in-place addends.  When using _bfd_link_final_relocate
	to perform a final relocation, pass rel->r_addend as the addend
	argument.
	(elf32_arm_merge_private_bfd_data): If one of the bfds is a VxWorks
	object, ignore flags that are not standard on VxWorks.
	(elf32_arm_check_relocs): Allow the creation of dynamic R_ARM_ABS12
	relocs on VxWorks.  Use reloc_section_p.
	(elf32_arm_adjust_dynamic_symbol): Use RELOC_SECTION and RELOC_SIZE.
	(allocate_dynrelocs): Use RELOC_SIZE.  Account for the size of
	.rela.plt.unloaded relocs on VxWorks targets.
	(elf32_arm_size_dynamic_sections): Use RELOC_SIZE.  Check for
	.rela.plt.unloaded as well as .rel(a).plt.  Add DT_RELA* tags
	instead of DT_REL* tags on RELA targets.
	(elf32_arm_finish_dynamic_symbol): Use RELOC_SECTION, RELOC_SIZE
	and SWAP_RELOC_OUT.  Initialize r_addend fields.  Handle VxWorks
	PLT entries.  Do not make _GLOBAL_OFFSET_TABLE_ absolute on VxWorks.
	(elf32_arm_finish_dynamic_sections): Use RELOC_SECTION, RELOC_SIZE
	and SWAP_RELOC_OUT.  Initialize r_addend fields.  Handle DT_RELASZ
	like DT_RELSZ.  Handle the VxWorks form of initial PLT entry.
	Correct the .rela.plt.unreloaded symbol indexes.
	(elf32_arm_output_symbol_hook): Call the VxWorks version of this
	hook on VxWorks targets.
	(elf32_arm_vxworks_link_hash_table_create): Set vxworks_p to true.
	Minor formatting tweak.
	(elf32_arm_vxworks_final_write_processing): New function.
	(elf_backend_add_symbol_hook): Override for VxWorks and reset
	for Symbian.
	(elf_backend_final_write_processing): Likewise.
	(elf_backend_emit_relocs): Likewise.
	(elf_backend_want_plt_sym): Likewise.
	(ELF_MAXPAGESIZE): Likewise.
	(elf_backend_may_use_rel_p): Minor formatting tweak.
	(elf_backend_may_use_rela_p): Likewise.
	(elf_backend_default_use_rela_p): Likewise.
	(elf_backend_rela_normal): Likewise.
	* Makefile.in (elf32-arm.lo): Depend on elf-vxworks.h.

gas/
	* config/tc-arm.c (md_apply_fix): Install a value of zero into a
	BFD_RELOC_ARM_OFFSET_IMM field if we're going to generate a RELA
	R_ARM_ABS12 reloc.
	(tc_gen_reloc): Keep the original fx_offset for RELA pc-relative
	relocs, but adjust by md_pcrel_from_section.  Create R_ARM_ABS12
	relocations for BFD_RELOC_ARM_OFFSET_IMM on RELA targets.

gas/testsuite/
	* gas/arm/abs12.s, gas/arm/abs12.d: New test.
	* gas/arm/pic.d: Skip for *-*-vxworks*...
	* gas/arm/pic_vxworks.d: ...use this version instead.
	* gas/arm/unwind_vxworks.d: Fix expected output.

ld/
	* emulparams/armelf_vxworks.sh: Include vxworks.sh.
	(MAXPAGESIZE): Define.
	* emulparams/vxworks.sh: Undefine.
	* Makefile.am (earmelf_vxworks.c): Depend on vxworks.sh and vxworks.em.
	* Makefile.in: Regenerate.

ld/testsuite/
	* ld-arm/vxworks1.dd, ld-arm/vxworks1.ld, ld-arm/vxworks1-lib.dd,
	* ld-arm/vxworks1-lib.nd, ld-arm/vxworks1-lib.rd,
	* ld-arm/vxworks1-lib.s, ld-arm/vxworks1.rd, ld-arm/vxworks1.s,
	* ld-arm/vxworks1-static.d, ld-arm/vxworks2.s, ld-arm/vxworks2.sd,
	* ld-arm/vxworks2-static.sd: New tests.
	* ld-arm/arm-elf.exp: Run them.
@
text
@d1003 2
a1004 1
cpu-m68k.lo: cpu-m68k.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
d1222 5
a1226 4
elf32-arm.lo: elf32-arm.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h elf-vxworks.h \
  $(INCDIR)/elf/arm.h $(INCDIR)/elf/reloc-macros.h elf32-target.h
d1317 2
a1318 1
  $(INCDIR)/elf/reloc-macros.h elf32-target.h
d1445 4
a1448 4
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/xc16x.h \
  $(INCDIR)/elf/reloc-macros.h $(INCDIR)/libiberty.h \
  elf32-target.h
d1455 1
a1455 1
  $(INCDIR)/libiberty.h
@


1.170
log
@Add support for the Infineon XC16X.
@
text
@d1223 2
a1224 2
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/arm.h \
  $(INCDIR)/elf/reloc-macros.h elf32-target.h
@


1.169
log
@	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.
	* po/SRC-POTFILES.in: Regenerate.
@
text
@d114 1
d176 1
d280 1
d452 1
d1039 1
d1441 5
@


1.168
log
@
	Rename ms1 to mt, part 1
	* config.sub: Replace ms1 arch with mt.  Allow ms1 as alias.
	* configure.in: Replace ms1 arch with mt.
	* configure: Rebuilt.

	* bfd/Makefile.am (ALL_MACHINES, ALL_MACHINES_CFILES,
	BFD32_BACKENDS, BFD32_BACKENDS_CFILES): Replace ms1 with mt.
	(cpu_mt.lo, elf32-mt.lo): Update target and dependency names.
	* bfd/Makefile.in: Rebuilt.
	* bfd/config.bfd: Replace ms1 arch with mt.
	* bfd/configure.in: Replace ms1 files with mt files.
	* bfd/configure: Rebuilt.
	* bfd/elf32-mt.c: Renamed from elf32-ms1.c.  Update include files.
	* bfd/cpu-mt.c: Renamed from cpu-ms1.c.

	* cpu/mt.cpu: Rename from ms1.cpu.
	* cpu/mt.opc: Rename from ms1.opc.

	* binutils/Makefile.am: Replace ms1 files with mt files.
	* binutils/Makefile.in: Rebuilt.
	* binutils/readelf.c (elf/mt.h): Adjust #include.

	* gas/configure.in: Replace ms1 arch with mt arch.
	* gas/configure: Rebuilt.
	* gas/configure.tgt: Replace ms1 arch with mt arch.
	* gas/config/tc-mt.c: Renamed from tc-ms1.c: Update include files.

	* gas/doc/Makefile.am (CPU_DOCS): Replace ms1 files with mt files.
	* gas/doc/Makefile.in: Rebuilt.

	* gas/testsuite/gas/mt: Renamed from ms1 dir.  Update file names as
	needed.
	* gas/testsuite/gas/mt/errors.exp: Replace ms1 arch with mt arch.
	* gas/testsuite/gas/mt/mt.exp: Replace ms1 arch with mt arch.
	* gas/testsuite/gas/mt/relocs.exp: Replace ms1 arch with mt arch.

	* gdb/configure.tgt: Replace ms1 arch with mt arch.
	* gdb/config/mt: Renamed from ms1 dir.  Update file names as needed.
	* gdb/config/mt/mt.mt (TDEPFILES): Replace ms1 file with mt file.

	* include/elf/mt.h: Renamed from ms1.h

	* ld/Makefile.am (ALL_EMULATIONS): Replace ms1 files with mt files.
	(eelf32mt.c): Update target name and dependencies.
	* ld/Makefile.in: Rebuilt.
	* ld/configure.tgt: Replace ms1 arch with mt arch.
	* ld/emulparams/elf32mt.sh: Renamed from elf32ms1.sh. Update
	comment.

	* libgloss/configure.in: Replace ms1 arch with mt arch.
	* libgloss/configure: Rebuilt.
	* libgloss/mt: Renamed from ms1 dir.

	* newlib/configure.host: Replace ms1 arch with mt arch.
	* newlib/libc/machine/mt: Renamed from ms1 dir.

	* opcodes/Makefile.am (CLEANFILES, CGEN_CPUS, MT_DEPS): Replace ms1
	with mt.
	* opcodes/Makefile.in: Rebuilt.
	* opcodes/configure.in: Replace ms1 files with mt files.
	* opcodes/configure: Rebuilt.

	* sid/component/cgen-cpu/mt: Renamed from ms1 dir.  Update file
	names as appropriate.
	* sid/component/cgen-cpu/mt/Makefile.am: Replace ms1 files with mt
	files.
	* sid/component/cgen-cpu/mt/Makefile.in: Rebuilt.
@
text
@d1091 1
a1091 2
  coff-m68k.c $(INCDIR)/hashtab.h $(INCDIR)/coff/m68k.h \
  $(INCDIR)/coff/internal.h libcoff.h $(INCDIR)/bfdlink.h \
d1781 1
a1781 1
  $(INCDIR)/hashtab.h elf32-target.h
d1786 1
a1786 1
  $(INCDIR)/hashtab.h elf64-target.h
@


1.167
log
@2005-10-29  H.J. Lu  <hongjiu.lu@@intel.com>

	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerated.

	* dep-in.sed: Replace " ./" with " ".
@
text
@d92 1
a92 1
	cpu-ms1.lo \
d153 1
a153 1
	cpu-ms1.c \
d261 1
a261 1
	elf32-ms1.lo \
d432 1
a432 1
	elf32-ms1.c \
d1007 1
a1007 1
cpu-ms1.lo: cpu-ms1.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
d1354 1
a1354 1
elf32-ms1.lo: elf32-ms1.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
d1356 1
a1356 1
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/ms1.h \
@


1.166
log
@* Makefile.am: Run "make dep-am".
* Makefile.in: Regenerate.
@
text
@d1091 2
a1092 1
  coff-m68k.c $(INCDIR)/hashtab.h libcoff.h $(INCDIR)/bfdlink.h \
d1782 1
a1782 1
  elf32-target.h
d1787 1
a1787 1
  elf64-target.h
@


1.165
log
@Add support for the Z80 processor family
@
text
@d911 21
a931 15
archive.lo: archive.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/libiberty.h $(INCDIR)/hashtab.h $(INCDIR)/aout/ar.h \
  $(INCDIR)/aout/ranlib.h $(INCDIR)/safe-ctype.h
archures.lo: archures.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h $(INCDIR)/safe-ctype.h
bfd.lo: bfd.c ./bfd.h ./bfdver.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/libiberty.h $(INCDIR)/safe-ctype.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/hashtab.h $(INCDIR)/coff/internal.h $(INCDIR)/coff/sym.h \
  libcoff.h libecoff.h $(INCDIR)/coff/ecoff.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h
bfdio.lo: bfdio.c ./config.h $(INCDIR)/filenames.h \
  ./bfd.h $(INCDIR)/hashtab.h
bfdwin.lo: bfdwin.c ./config.h $(INCDIR)/filenames.h \
  ./bfd.h $(INCDIR)/hashtab.h
cache.lo: cache.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
d933 3
a935 2
coffgen.lo: coffgen.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h $(INCDIR)/coff/internal.h libcoff.h \
d937 12
a948 1
corefile.lo: corefile.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
d950 78
a1027 31
format.lo: format.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
init.lo: init.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
libbfd.lo: libbfd.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
opncls.lo: opncls.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/objalloc.h $(INCDIR)/hashtab.h $(INCDIR)/libiberty.h
reloc.lo: reloc.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/hashtab.h
section.lo: section.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h $(INCDIR)/bfdlink.h
syms.lo: syms.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h $(INCDIR)/safe-ctype.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def
targets.lo: targets.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h $(INCDIR)/fnmatch.h ./targmatch.h
hash.lo: hash.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h $(INCDIR)/objalloc.h $(INCDIR)/libiberty.h
linker.lo: linker.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h $(INCDIR)/bfdlink.h genlink.h
srec.lo: srec.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h $(INCDIR)/libiberty.h $(INCDIR)/safe-ctype.h
binary.lo: binary.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/safe-ctype.h $(INCDIR)/hashtab.h
tekhex.lo: tekhex.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h $(INCDIR)/libiberty.h
ihex.lo: ihex.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h $(INCDIR)/libiberty.h $(INCDIR)/safe-ctype.h
stabs.lo: stabs.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
d1029 14
a1042 160
stab-syms.lo: stab-syms.c ./bfd.h libaout.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab.def
merge.lo: merge.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h $(INCDIR)/libiberty.h
dwarf2.lo: dwarf2.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/libiberty.h $(INCDIR)/hashtab.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/elf/dwarf2.h
simple.lo: simple.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h $(INCDIR)/bfdlink.h
archive64.lo: archive64.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h $(INCDIR)/aout/ar.h
cpu-alpha.lo: cpu-alpha.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-arc.lo: cpu-arc.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-arm.lo: cpu-arm.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h $(INCDIR)/libiberty.h
cpu-avr.lo: cpu-avr.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-bfin.lo: cpu-bfin.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-cris.lo: cpu-cris.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-cr16c.lo: cpu-cr16c.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-crx.lo: cpu-crx.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-d10v.lo: cpu-d10v.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-d30v.lo: cpu-d30v.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-dlx.lo: cpu-dlx.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-fr30.lo: cpu-fr30.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-frv.lo: cpu-frv.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-h8300.lo: cpu-h8300.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-h8500.lo: cpu-h8500.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-hppa.lo: cpu-hppa.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-ia64.lo: cpu-ia64.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h cpu-ia64-opc.c $(srcdir)/../opcodes/ia64-opc.h \
  $(INCDIR)/opcode/ia64.h ./bfd.h
cpu-i370.lo: cpu-i370.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-i386.lo: cpu-i386.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-i860.lo: cpu-i860.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-i960.lo: cpu-i960.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-ip2k.lo: cpu-ip2k.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-iq2000.lo: cpu-iq2000.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-m32c.lo: cpu-m32c.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-m32r.lo: cpu-m32r.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-m68hc11.lo: cpu-m68hc11.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-m68hc12.lo: cpu-m68hc12.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-m68k.lo: cpu-m68k.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-m88k.lo: cpu-m88k.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-m10200.lo: cpu-m10200.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-m10300.lo: cpu-m10300.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-maxq.lo: cpu-maxq.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-mcore.lo: cpu-mcore.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-mips.lo: cpu-mips.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-mmix.lo: cpu-mmix.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-ms1.lo: cpu-ms1.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-msp430.lo: cpu-msp430.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-or32.lo: cpu-or32.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-ns32k.lo: cpu-ns32k.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h ns32k.h
cpu-openrisc.lo: cpu-openrisc.c ./bfd.h ./config.h \
  $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
cpu-pdp11.lo: cpu-pdp11.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-pj.lo: cpu-pj.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-powerpc.lo: cpu-powerpc.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-rs6000.lo: cpu-rs6000.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-s390.lo: cpu-s390.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-sh.lo: cpu-sh.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h $(srcdir)/../opcodes/sh-opc.h ./bfd.h
cpu-sparc.lo: cpu-sparc.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-tic30.lo: cpu-tic30.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-tic4x.lo: cpu-tic4x.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-tic54x.lo: cpu-tic54x.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-tic80.lo: cpu-tic80.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-v850.lo: cpu-v850.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h $(INCDIR)/safe-ctype.h
cpu-vax.lo: cpu-vax.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-we32k.lo: cpu-we32k.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-w65.lo: cpu-w65.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-xstormy16.lo: cpu-xstormy16.c ./bfd.h ./config.h \
  $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
cpu-xtensa.lo: cpu-xtensa.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-z80.lo: cpu-z80.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-z8k.lo: cpu-z8k.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
aout-adobe.lo: aout-adobe.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h $(INCDIR)/aout/adobe.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def libaout.h $(INCDIR)/bfdlink.h
aout-arm.lo: aout-arm.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  libaout.h $(INCDIR)/bfdlink.h $(INCDIR)/aout/aout64.h \
  aoutx.h $(INCDIR)/safe-ctype.h $(INCDIR)/hashtab.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h \
  aout-target.h
aout-cris.lo: aout-cris.c ./bfd.h aout32.c aoutx.h \
  ./config.h $(INCDIR)/filenames.h $(INCDIR)/safe-ctype.h \
  $(INCDIR)/bfdlink.h libaout.h $(INCDIR)/hashtab.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h \
  aout-target.h
aout-ns32k.lo: aout-ns32k.c ./bfd.h $(INCDIR)/aout/aout64.h \
  ns32k.h libaout.h $(INCDIR)/bfdlink.h aoutx.h ./config.h \
  $(INCDIR)/filenames.h $(INCDIR)/safe-ctype.h $(INCDIR)/hashtab.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
aout-sparcle.lo: aout-sparcle.c ./bfd.h $(INCDIR)/bfdlink.h \
  libaout.h aoutf1.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h $(INCDIR)/aout/sun4.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h \
  aout-target.h
aout-tic30.lo: aout-tic30.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  libaout.h $(INCDIR)/bfdlink.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h \
  aoutx.h $(INCDIR)/safe-ctype.h $(INCDIR)/hashtab.h
aout0.lo: aout0.c ./bfd.h aoutf1.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h $(INCDIR)/aout/sun4.h libaout.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
d1044 1
a1044 1
aout32.lo: aout32.c aoutx.h ./bfd.h ./config.h $(INCDIR)/filenames.h \
d1047 4
d1052 14
a1065 3
armnetbsd.lo: armnetbsd.c netbsd.h ./bfd.h ./config.h \
  $(INCDIR)/filenames.h $(INCDIR)/hashtab.h libaout.h \
  $(INCDIR)/bfdlink.h aout-target.h $(INCDIR)/aout/aout64.h \
d1067 8
a1074 5
bout.lo: bout.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h $(INCDIR)/bfdlink.h genlink.h $(INCDIR)/bout.h \
  $(INCDIR)/libiberty.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  libaout.h
cf-i386lynx.lo: cf-i386lynx.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
d1078 2
a1079 6
cf-sparclynx.lo: cf-sparclynx.c coff-sparc.c ./bfd.h \
  ./config.h $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/coff/sparc.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h coffswap.h
coff-apollo.lo: coff-apollo.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h $(INCDIR)/coff/apollo.h $(INCDIR)/coff/external.h \
d1082 2
a1083 2
coff-arm.lo: coff-arm.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h $(INCDIR)/coff/arm.h $(INCDIR)/coff/external.h \
d1086 2
a1087 4
coff-aux.lo: coff-aux.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/coff/aux-coff.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/m68k.h $(INCDIR)/coff/external.h coff-m68k.c \
  $(INCDIR)/hashtab.h $(INCDIR)/coff/m68k.h $(INCDIR)/coff/internal.h \
d1089 6
a1094 2
coff-h8300.lo: coff-h8300.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h $(INCDIR)/bfdlink.h genlink.h $(INCDIR)/coff/h8300.h \
d1097 10
a1106 5
coff-h8500.lo: coff-h8500.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h $(INCDIR)/bfdlink.h $(INCDIR)/coff/h8500.h \
  $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  libcoff.h coffcode.h coffswap.h
coff-i386.lo: coff-i386.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
d1110 5
a1114 7
coff-i860.lo: coff-i860.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h $(INCDIR)/coff/i860.h $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h libcoff.h $(INCDIR)/bfdlink.h \
  coffcode.h coffswap.h
coff-go32.lo: coff-go32.c coff-i386.c ./bfd.h ./config.h \
  $(INCDIR)/filenames.h $(INCDIR)/hashtab.h $(INCDIR)/coff/i386.h \
  $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
d1116 2
a1117 2
coff-i960.lo: coff-i960.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h $(INCDIR)/coff/i960.h $(INCDIR)/coff/internal.h \
d1119 3
a1121 3
coff-m68k.lo: coff-m68k.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h $(INCDIR)/coff/m68k.h $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h libcoff.h $(INCDIR)/bfdlink.h \
d1123 9
a1131 17
coff-m88k.lo: coff-m88k.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h $(INCDIR)/coff/m88k.h $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h libcoff.h $(INCDIR)/bfdlink.h \
  coffcode.h coffswap.h
coff-maxq.lo: coff-maxq.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h $(INCDIR)/coff/maxq.h $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h libcoff.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/libiberty.h coffcode.h coffswap.h
coff-mips.lo: coff-mips.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/hashtab.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/sym.h $(INCDIR)/coff/symconst.h $(INCDIR)/coff/ecoff.h \
  $(INCDIR)/coff/mips.h $(INCDIR)/coff/external.h libcoff.h \
  libecoff.h coffswap.h ecoffswap.h
coff-or32.lo: coff-or32.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h $(INCDIR)/coff/or32.h $(INCDIR)/coff/internal.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h coffswap.h
coff-rs6000.lo: coff-rs6000.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
d1135 3
a1137 3
coff-sh.lo: coff-sh.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/libiberty.h $(INCDIR)/hashtab.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/sh.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
d1139 10
a1148 2
coff-sparc.lo: coff-sparc.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h $(INCDIR)/coff/sparc.h $(INCDIR)/coff/external.h \
d1151 7
a1157 18
coff-stgo32.lo: coff-stgo32.c ./bfd.h coff-i386.c ./config.h \
  $(INCDIR)/filenames.h $(INCDIR)/hashtab.h $(INCDIR)/coff/i386.h \
  $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/go32exe.h libcoff.h $(INCDIR)/bfdlink.h \
  coffcode.h coffswap.h go32stub.h
coff-svm68k.lo: coff-svm68k.c coff-m68k.c ./bfd.h ./config.h \
  $(INCDIR)/filenames.h $(INCDIR)/hashtab.h $(INCDIR)/coff/m68k.h \
  $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h coffswap.h
coff-tic30.lo: coff-tic30.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h $(INCDIR)/bfdlink.h $(INCDIR)/coff/tic30.h \
  $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  libcoff.h coffcode.h coffswap.h
coff-tic4x.lo: coff-tic4x.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h $(INCDIR)/bfdlink.h $(INCDIR)/coff/tic4x.h \
  $(INCDIR)/coff/ti.h $(INCDIR)/coff/internal.h libcoff.h \
  coffcode.h coffswap.h
coff-tic54x.lo: coff-tic54x.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
d1161 5
a1165 10
coff-tic80.lo: coff-tic80.c ./bfd.h $(INCDIR)/bfdlink.h \
  ./config.h $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/coff/tic80.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  libcoff.h coffcode.h coffswap.h
coff-u68k.lo: coff-u68k.c coff-m68k.c ./bfd.h ./config.h \
  $(INCDIR)/filenames.h $(INCDIR)/hashtab.h $(INCDIR)/coff/m68k.h \
  $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h coffswap.h
coff-we32k.lo: coff-we32k.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h $(INCDIR)/coff/we32k.h $(INCDIR)/coff/external.h \
d1168 32
a1199 6
coff-w65.lo: coff-w65.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h $(INCDIR)/bfdlink.h $(INCDIR)/coff/w65.h \
  $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  libcoff.h coffcode.h coffswap.h
coff-z80.lo: coff-z80.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h $(INCDIR)/bfdlink.h $(INCDIR)/coff/z80.h \
a1200 26
  libcoff.h coffcode.h coffswap.h
coff-z8k.lo: coff-z8k.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h $(INCDIR)/bfdlink.h $(INCDIR)/coff/z8k.h \
  $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  libcoff.h coffcode.h coffswap.h
cofflink.lo: cofflink.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/hashtab.h $(INCDIR)/coff/internal.h \
  libcoff.h $(INCDIR)/safe-ctype.h
dwarf1.lo: dwarf1.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/libiberty.h $(INCDIR)/hashtab.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/elf/dwarf.h
ecoff.lo: ecoff.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/hashtab.h $(INCDIR)/aout/ar.h \
  $(INCDIR)/aout/ranlib.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  libaout.h $(INCDIR)/aout/aout64.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/sym.h $(INCDIR)/coff/symconst.h $(INCDIR)/coff/ecoff.h \
  libcoff.h libecoff.h $(INCDIR)/libiberty.h
ecofflink.lo: ecofflink.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/hashtab.h $(INCDIR)/objalloc.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/sym.h $(INCDIR)/coff/symconst.h $(INCDIR)/coff/ecoff.h \
  libcoff.h libecoff.h
efi-app-ia32.lo: efi-app-ia32.c ./bfd.h ./config.h \
  $(INCDIR)/filenames.h coff-i386.c $(INCDIR)/hashtab.h \
  $(INCDIR)/coff/i386.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
d1203 2
a1204 2
elf.lo: elf.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/hashtab.h elf-bfd.h $(INCDIR)/elf/common.h \
d1206 19
a1224 12
elf32-am33lin.lo: elf32-am33lin.c ./bfd.h ./config.h \
  $(INCDIR)/filenames.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/mn10300.h $(INCDIR)/elf/reloc-macros.h \
  elf-m10300.c $(INCDIR)/hashtab.h ./elf32-target.h
elf32-arc.lo: elf32-arc.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/arc.h $(INCDIR)/elf/reloc-macros.h $(INCDIR)/libiberty.h \
  ./elf32-target.h
elf32-arm.lo: elf32-arm.c $(INCDIR)/elf/arm.h $(INCDIR)/elf/reloc-macros.h \
  ./bfd.h ./config.h $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
d1226 3
a1228 10
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h ./elf32-target.h
elf32-avr.lo: elf32-avr.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/avr.h $(INCDIR)/elf/reloc-macros.h ./elf32-target.h
elf32-bfin.lo: elf32-bfin.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/bfin.h $(INCDIR)/elf/reloc-macros.h ./elf32-target.h
elf32-cr16c.lo: elf32-cr16c.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
d1230 7
a1236 3
  ./bfd.h $(INCDIR)/elf/reloc-macros.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h ./elf32-target.h
elf32-cris.lo: elf32-cris.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
a1237 4
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/cris.h $(INCDIR)/elf/reloc-macros.h ./elf32-target.h
elf32-crx.lo: elf32-crx.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/hashtab.h elf-bfd.h $(INCDIR)/elf/common.h \
d1239 26
a1264 2
  $(INCDIR)/elf/reloc-macros.h ./elf32-target.h
elf32-d10v.lo: elf32-d10v.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
d1267 7
a1273 2
  $(INCDIR)/elf/d10v.h $(INCDIR)/elf/reloc-macros.h ./elf32-target.h
elf32-d30v.lo: elf32-d30v.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
d1275 3
a1277 16
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/d30v.h $(INCDIR)/elf/reloc-macros.h ./elf32-target.h
elf32-dlx.lo: elf32-dlx.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/dlx.h $(INCDIR)/elf/reloc-macros.h ./elf32-target.h
elf32-fr30.lo: elf32-fr30.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/fr30.h $(INCDIR)/elf/reloc-macros.h ./elf32-target.h
elf32-frv.lo: elf32-frv.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/frv.h $(INCDIR)/elf/reloc-macros.h $(INCDIR)/elf/dwarf2.h \
  ./elf32-target.h
elf32-gen.lo: elf32-gen.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
a1278 17
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
  ./elf32-target.h
elf32-h8300.lo: elf32-h8300.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/h8.h $(INCDIR)/elf/reloc-macros.h ./elf32-target.h
elf32-hppa.lo: elf32-hppa.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/hppa.h $(INCDIR)/elf/reloc-macros.h libhppa.h \
  elf32-hppa.h elf-hppa.h ./elf32-target.h
elf32-i370.lo: elf32-i370.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/hashtab.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/elf/i370.h \
  $(INCDIR)/elf/reloc-macros.h ./elf32-target.h
elf32-i386.lo: elf32-i386.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/hashtab.h elf-bfd.h $(INCDIR)/elf/common.h \
d1280 14
a1293 2
  $(INCDIR)/elf/i386.h $(INCDIR)/elf/reloc-macros.h ./elf32-target.h
elf32-i860.lo: elf32-i860.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
d1296 12
a1307 2
  $(INCDIR)/elf/i860.h $(INCDIR)/elf/reloc-macros.h ./elf32-target.h
elf32-i960.lo: elf32-i960.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
d1309 3
a1311 21
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/i960.h $(INCDIR)/elf/reloc-macros.h ./elf32-target.h
elf32-ip2k.lo: elf32-ip2k.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/ip2k.h $(INCDIR)/elf/reloc-macros.h ./elf32-target.h
elf32-iq2000.lo: elf32-iq2000.c ./bfd.h ./config.h \
  $(INCDIR)/filenames.h $(INCDIR)/hashtab.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/elf/iq2000.h $(INCDIR)/elf/reloc-macros.h \
  ./elf32-target.h
elf32-m32c.lo: elf32-m32c.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/m32c.h $(INCDIR)/elf/reloc-macros.h $(INCDIR)/libiberty.h \
  ./elf32-target.h
elf32-m32r.lo: elf32-m32r.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/m32r.h $(INCDIR)/elf/reloc-macros.h ./elf32-target.h
elf32-m68k.lo: elf32-m68k.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
d1313 14
a1326 4
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/elf/m68k.h \
  $(INCDIR)/elf/reloc-macros.h ./elf32-target.h
elf32-m68hc11.lo: elf32-m68hc11.c ./bfd.h ./config.h \
  $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h $(INCDIR)/hashtab.h \
d1328 2
a1329 5
  $(INCDIR)/elf/external.h elf32-m68hc1x.h $(INCDIR)/elf/m68hc11.h \
  $(INCDIR)/elf/reloc-macros.h $(INCDIR)/opcode/m68hc11.h \
  ./elf32-target.h
elf32-m68hc12.lo: elf32-m68hc12.c ./bfd.h ./config.h \
  $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h $(INCDIR)/hashtab.h \
d1331 2
a1332 5
  $(INCDIR)/elf/external.h elf32-m68hc1x.h $(INCDIR)/elf/m68hc11.h \
  $(INCDIR)/elf/reloc-macros.h $(INCDIR)/opcode/m68hc11.h \
  ./elf32-target.h
elf32-m68hc1x.lo: elf32-m68hc1x.c ./bfd.h ./config.h \
  $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h $(INCDIR)/hashtab.h \
d1334 3
a1336 16
  $(INCDIR)/elf/external.h elf32-m68hc1x.h $(INCDIR)/elf/m68hc11.h \
  $(INCDIR)/elf/reloc-macros.h $(INCDIR)/opcode/m68hc11.h
elf32-m88k.lo: elf32-m88k.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
  ./elf32-target.h
elf-m10200.lo: elf-m10200.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
  ./elf32-target.h
elf-m10300.lo: elf-m10300.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/mn10300.h $(INCDIR)/elf/reloc-macros.h \
  ./elf32-target.h
elf32-mcore.lo: elf32-mcore.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
d1339 4
a1342 10
  $(INCDIR)/elf/reloc-macros.h ./elf32-target.h
elfxx-mips.lo: elfxx-mips.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h $(INCDIR)/libiberty.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h elfxx-mips.h $(INCDIR)/elf/mips.h \
  $(INCDIR)/elf/reloc-macros.h $(INCDIR)/coff/sym.h $(INCDIR)/coff/symconst.h \
  $(INCDIR)/coff/ecoff.h $(INCDIR)/coff/mips.h $(INCDIR)/coff/external.h
elf32-mips.lo: elf32-mips.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h $(INCDIR)/bfdlink.h genlink.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
d1344 7
a1350 1
  $(INCDIR)/coff/sym.h $(INCDIR)/coff/symconst.h $(INCDIR)/coff/internal.h \
d1352 11
a1362 2
  ecoffswap.h ./elf32-target.h
elf32-ms1.lo: elf32-ms1.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
d1365 3
a1367 3
  $(INCDIR)/elf/ms1.h $(INCDIR)/elf/reloc-macros.h ./elf32-target.h
elf32-msp430.lo: elf32-msp430.c ./bfd.h ./config.h \
  $(INCDIR)/filenames.h $(INCDIR)/libiberty.h $(INCDIR)/hashtab.h \
d1369 4
a1372 8
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/msp430.h \
  $(INCDIR)/elf/reloc-macros.h ./elf32-target.h
elf32-openrisc.lo: elf32-openrisc.c ./bfd.h ./config.h \
  $(INCDIR)/filenames.h $(INCDIR)/hashtab.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/elf/openrisc.h $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/libiberty.h ./elf32-target.h
elf32-or32.lo: elf32-or32.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
a1373 5
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/or32.h $(INCDIR)/elf/reloc-macros.h $(INCDIR)/libiberty.h \
  ./elf32-target.h
elf32-pj.lo: elf32-pj.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/hashtab.h elf-bfd.h $(INCDIR)/elf/common.h \
d1375 3
a1377 3
  $(INCDIR)/elf/reloc-macros.h ./elf32-target.h
elf32-ppc.lo: elf32-ppc.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/hashtab.h elf-bfd.h $(INCDIR)/elf/common.h \
d1380 4
a1383 4
  ./elf32-target.h
elf32-sh64.lo: elf32-sh64.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(srcdir)/../opcodes/sh64-opc.h \
d1386 8
a1393 8
  $(srcdir)/../opcodes/sh-opc.h ./bfd.h ./elf32-target.h
elf32-sh64-com.lo: elf32-sh64-com.c ./bfd.h ./config.h \
  $(INCDIR)/filenames.h $(INCDIR)/hashtab.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/elf/sh.h $(INCDIR)/elf/reloc-macros.h \
  elf32-sh64.h $(srcdir)/../opcodes/sh64-opc.h
elf32-s390.lo: elf32-s390.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/hashtab.h elf-bfd.h $(INCDIR)/elf/common.h \
d1395 3
a1397 3
  $(INCDIR)/elf/reloc-macros.h ./elf32-target.h
elf32-sh.lo: elf32-sh.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/hashtab.h elf-bfd.h $(INCDIR)/elf/common.h \
d1400 1
a1400 1
  $(srcdir)/../opcodes/sh-opc.h ./bfd.h ./elf32-target.h
d1402 6
a1407 6
  ./bfd.h ./config.h $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/hashtab.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/elf/sh.h \
  $(INCDIR)/elf/reloc-macros.h $(INCDIR)/libiberty.h \
  $(srcdir)/../opcodes/sh-opc.h ./bfd.h ./elf32-target.h
elfxx-sparc.lo: elfxx-sparc.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
d1412 1
a1412 1
elf32-sparc.lo: elf32-sparc.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
d1416 3
a1418 3
  elfxx-sparc.h ./elf32-target.h
elf32-v850.lo: elf32-v850.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/hashtab.h elf-bfd.h $(INCDIR)/elf/common.h \
d1421 11
a1431 2
  ./elf32-target.h
elf32-vax.lo: elf32-vax.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
d1433 4
a1436 17
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/elf/vax.h \
  $(INCDIR)/elf/reloc-macros.h ./elf32-target.h
elf32-xstormy16.lo: elf32-xstormy16.c ./bfd.h ./config.h \
  $(INCDIR)/filenames.h $(INCDIR)/hashtab.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/elf/xstormy16.h $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/libiberty.h ./elf32-target.h
elf32-xtensa.lo: elf32-xtensa.c ./bfd.h ./config.h \
  $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h $(INCDIR)/hashtab.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/elf/xtensa.h $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/xtensa-isa.h $(INCDIR)/xtensa-config.h ./elf32-target.h
elf32.lo: elf32.c elfcode.h ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/libiberty.h $(INCDIR)/bfdlink.h $(INCDIR)/hashtab.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h elfcore.h
elflink.lo: elflink.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
d1438 3
d1443 4
a1446 1
elf-strtab.lo: elf-strtab.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
d1449 2
a1450 6
  $(INCDIR)/libiberty.h
elf-eh-frame.lo: elf-eh-frame.c ./bfd.h ./config.h \
  $(INCDIR)/filenames.h $(INCDIR)/hashtab.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/elf/dwarf2.h
elf-vxworks.lo: elf-vxworks.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
d1454 3
a1456 3
epoc-pe-arm.lo: epoc-pe-arm.c pe-arm.c ./bfd.h ./config.h \
  $(INCDIR)/filenames.h coff-arm.c $(INCDIR)/hashtab.h \
  $(INCDIR)/coff/arm.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
d1459 3
a1461 3
epoc-pei-arm.lo: epoc-pei-arm.c pei-arm.c ./bfd.h ./config.h \
  $(INCDIR)/filenames.h coff-arm.c $(INCDIR)/hashtab.h \
  $(INCDIR)/coff/arm.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
d1464 3
a1466 4
hp300bsd.lo: hp300bsd.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h libaout.h $(INCDIR)/bfdlink.h aout-target.h \
  $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/ar.h
d1468 1
a1468 1
  aoutx.h ./bfd.h ./config.h $(INCDIR)/filenames.h $(INCDIR)/safe-ctype.h \
d1472 4
a1475 9
som.lo: som.c $(INCDIR)/alloca-conf.h ./config.h ./bfd.h \
  ./config.h $(INCDIR)/filenames.h
i386aout.lo: i386aout.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h $(INCDIR)/aout/aout64.h libaout.h \
  $(INCDIR)/bfdlink.h aout-target.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
i386bsd.lo: i386bsd.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h libaout.h $(INCDIR)/bfdlink.h aout-target.h \
  $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
d1477 3
d1481 2
a1482 2
  ./bfd.h ./config.h $(INCDIR)/filenames.h $(INCDIR)/safe-ctype.h \
  $(INCDIR)/bfdlink.h libaout.h $(INCDIR)/hashtab.h $(INCDIR)/aout/aout64.h \
d1485 9
a1493 10
i386freebsd.lo: i386freebsd.c freebsd.h ./bfd.h ./config.h \
  $(INCDIR)/filenames.h $(INCDIR)/hashtab.h libaout.h \
  $(INCDIR)/bfdlink.h aout-target.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
i386linux.lo: i386linux.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h libaout.h \
  $(INCDIR)/bfdlink.h aout-target.h
i386lynx.lo: i386lynx.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h libaout.h $(INCDIR)/bfdlink.h $(INCDIR)/aout/aout64.h \
d1496 21
a1516 27
i386msdos.lo: i386msdos.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h libaout.h $(INCDIR)/bfdlink.h
i386netbsd.lo: i386netbsd.c netbsd.h ./bfd.h ./config.h \
  $(INCDIR)/filenames.h $(INCDIR)/hashtab.h libaout.h \
  $(INCDIR)/bfdlink.h aout-target.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
i386mach3.lo: i386mach3.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h libaout.h \
  $(INCDIR)/bfdlink.h aout-target.h
i386os9k.lo: i386os9k.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h $(INCDIR)/bfdlink.h libaout.h $(INCDIR)/os9k.h
ieee.lo: ieee.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h $(INCDIR)/ieee.h libieee.h $(INCDIR)/safe-ctype.h
m68k4knetbsd.lo: m68k4knetbsd.c netbsd.h ./bfd.h ./config.h \
  $(INCDIR)/filenames.h $(INCDIR)/hashtab.h libaout.h \
  $(INCDIR)/bfdlink.h aout-target.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
m68klinux.lo: m68klinux.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h libaout.h \
  $(INCDIR)/bfdlink.h aout-target.h
m68knetbsd.lo: m68knetbsd.c netbsd.h ./bfd.h ./config.h \
  $(INCDIR)/filenames.h $(INCDIR)/hashtab.h libaout.h \
  $(INCDIR)/bfdlink.h aout-target.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
m88kmach3.lo: m88kmach3.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
d1520 2
a1521 3
m88kopenbsd.lo: m88kopenbsd.c netbsd.h ./bfd.h ./config.h \
  $(INCDIR)/filenames.h $(INCDIR)/hashtab.h libaout.h \
  $(INCDIR)/bfdlink.h aout-target.h $(INCDIR)/aout/aout64.h \
d1523 1
a1523 3
mach-o.lo: mach-o.c mach-o.h ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h $(INCDIR)/libiberty.h mach-o-target.c
mipsbsd.lo: mipsbsd.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
d1527 16
a1542 12
newsos3.lo: newsos3.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h libaout.h \
  $(INCDIR)/bfdlink.h aout-target.h
nlm.lo: nlm.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h libnlm.h $(INCDIR)/nlm/common.h \
  $(INCDIR)/nlm/internal.h $(INCDIR)/nlm/external.h
nlm32-i386.lo: nlm32-i386.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h $(INCDIR)/nlm/i386-ext.h libnlm.h \
  $(INCDIR)/nlm/common.h $(INCDIR)/nlm/internal.h $(INCDIR)/nlm/external.h \
  nlmswap.h nlm-target.h
nlm32-sparc.lo: nlm32-sparc.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
d1546 15
a1560 16
nlm32-ppc.lo: nlm32-ppc.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h $(INCDIR)/nlm/ppc-ext.h libnlm.h \
  $(INCDIR)/nlm/common.h $(INCDIR)/nlm/internal.h $(INCDIR)/nlm/external.h \
  nlmswap.h nlm-target.h
nlm32.lo: nlm32.c nlmcode.h ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h libnlm.h $(INCDIR)/nlm/common.h \
  $(INCDIR)/nlm/internal.h $(INCDIR)/nlm/external.h
ns32knetbsd.lo: ns32knetbsd.c ./bfd.h netbsd.h ./config.h \
  $(INCDIR)/filenames.h $(INCDIR)/hashtab.h libaout.h \
  $(INCDIR)/bfdlink.h aout-target.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
oasys.lo: oasys.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/safe-ctype.h $(INCDIR)/hashtab.h $(INCDIR)/oasys.h \
  liboasys.h
pc532-mach.lo: pc532-mach.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  libaout.h $(INCDIR)/bfdlink.h $(INCDIR)/hashtab.h $(INCDIR)/aout/aout64.h \
d1563 28
a1590 50
pdp11.lo: pdp11.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h libaout.h $(INCDIR)/bfdlink.h aout-target.h \
  $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/ar.h $(INCDIR)/safe-ctype.h
pef.lo: pef.c $(INCDIR)/safe-ctype.h pef.h ./bfd.h \
  pef-traceback.h ./config.h $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/libiberty.h
pe-arm.lo: pe-arm.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  coff-arm.c $(INCDIR)/hashtab.h $(INCDIR)/coff/arm.h \
  $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/pe.h libcoff.h $(INCDIR)/bfdlink.h coffcode.h \
  peicode.h libpei.h
pei-arm.lo: pei-arm.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  coff-arm.c $(INCDIR)/hashtab.h $(INCDIR)/coff/arm.h \
  $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/pe.h libcoff.h $(INCDIR)/bfdlink.h coffcode.h \
  peicode.h libpei.h
pe-i386.lo: pe-i386.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  coff-i386.c $(INCDIR)/hashtab.h $(INCDIR)/coff/i386.h \
  $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/pe.h libcoff.h $(INCDIR)/bfdlink.h coffcode.h \
  peicode.h libpei.h
pei-i386.lo: pei-i386.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  coff-i386.c $(INCDIR)/hashtab.h $(INCDIR)/coff/i386.h \
  $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/pe.h libcoff.h $(INCDIR)/bfdlink.h coffcode.h \
  peicode.h libpei.h
pe-mcore.lo: pe-mcore.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  coff-mcore.c $(INCDIR)/hashtab.h $(INCDIR)/coff/mcore.h \
  $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/pe.h libcoff.h $(INCDIR)/bfdlink.h coffcode.h \
  peicode.h libpei.h
pei-mcore.lo: pei-mcore.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  coff-mcore.c $(INCDIR)/hashtab.h $(INCDIR)/coff/mcore.h \
  $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/pe.h libcoff.h $(INCDIR)/bfdlink.h coffcode.h \
  peicode.h libpei.h
pe-ppc.lo: pe-ppc.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  coff-ppc.c $(INCDIR)/hashtab.h $(INCDIR)/coff/powerpc.h \
  $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/pe.h libcoff.h $(INCDIR)/bfdlink.h coffcode.h \
  peicode.h libpei.h
pei-ppc.lo: pei-ppc.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  coff-ppc.c $(INCDIR)/hashtab.h $(INCDIR)/coff/powerpc.h \
  $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/pe.h libcoff.h $(INCDIR)/bfdlink.h coffcode.h \
  peicode.h libpei.h
pe-sh.lo: pe-sh.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  coff-sh.c $(INCDIR)/libiberty.h $(INCDIR)/hashtab.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/coff/sh.h $(INCDIR)/coff/external.h \
d1592 3
a1594 4
  coffcode.h peicode.h libpei.h
pei-sh.lo: pei-sh.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  coff-sh.c $(INCDIR)/libiberty.h $(INCDIR)/hashtab.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/coff/sh.h $(INCDIR)/coff/external.h \
d1596 3
a1598 3
  coffcode.h peicode.h libpei.h
pe-mips.lo: pe-mips.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h $(INCDIR)/coff/mipspe.h $(INCDIR)/coff/external.h \
d1601 2
a1602 2
pei-mips.lo: pei-mips.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  pe-mips.c $(INCDIR)/hashtab.h $(INCDIR)/coff/mipspe.h \
d1604 9
d1615 8
a1622 4
ppcboot.lo: ppcboot.c $(INCDIR)/safe-ctype.h ./bfd.h \
  ./config.h $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
reloc16.lo: reloc16.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h $(INCDIR)/bfdlink.h genlink.h $(INCDIR)/coff/internal.h \
d1624 2
a1625 2
riscix.lo: riscix.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h libaout.h $(INCDIR)/bfdlink.h $(INCDIR)/aout/aout64.h \
d1628 20
a1647 25
sparclinux.lo: sparclinux.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h libaout.h \
  $(INCDIR)/bfdlink.h aout-target.h
sparclynx.lo: sparclynx.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h $(INCDIR)/aout/sun4.h libaout.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h aout-target.h
sparcnetbsd.lo: sparcnetbsd.c netbsd.h ./bfd.h ./config.h \
  $(INCDIR)/filenames.h $(INCDIR)/hashtab.h libaout.h \
  $(INCDIR)/bfdlink.h aout-target.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
sunos.lo: sunos.c ./bfd.h $(INCDIR)/bfdlink.h libaout.h \
  aoutf1.h ./config.h $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/aout/sun4.h $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h aout-target.h
vaxnetbsd.lo: vaxnetbsd.c netbsd.h ./bfd.h ./config.h \
  $(INCDIR)/filenames.h $(INCDIR)/hashtab.h libaout.h \
  $(INCDIR)/bfdlink.h aout-target.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
vax1knetbsd.lo: vax1knetbsd.c netbsd.h ./bfd.h ./config.h \
  $(INCDIR)/filenames.h $(INCDIR)/hashtab.h libaout.h \
  $(INCDIR)/bfdlink.h aout-target.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
vaxbsd.lo: vaxbsd.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
d1651 15
a1665 8
versados.lo: versados.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h $(INCDIR)/libiberty.h
vms.lo: vms.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/hashtab.h vms.h
vms-gsd.lo: vms-gsd.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/hashtab.h vms.h
vms-hdr.lo: vms-hdr.c ./bfd.h ./bfdver.h ./config.h \
  $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h $(INCDIR)/safe-ctype.h \
d1667 6
a1672 11
vms-misc.lo: vms-misc.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/hashtab.h vms.h
vms-tir.lo: vms-tir.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/hashtab.h vms.h
xcofflink.lo: xcofflink.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/hashtab.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/xcoff.h libcoff.h libxcoff.h
xsym.lo: xsym.c xsym.h ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
xtensa-isa.lo: xtensa-isa.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h $(INCDIR)/xtensa-isa.h $(INCDIR)/xtensa-isa-internal.h
d1675 10
a1684 6
aix5ppc-core.lo: aix5ppc-core.c ./bfd.h
aout64.lo: aout64.c aoutx.h ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/safe-ctype.h $(INCDIR)/bfdlink.h libaout.h \
  $(INCDIR)/hashtab.h $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
coff-alpha.lo: coff-alpha.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
d1686 3
a1688 8
  $(INCDIR)/coff/sym.h $(INCDIR)/coff/symconst.h $(INCDIR)/coff/ecoff.h \
  $(INCDIR)/coff/alpha.h $(INCDIR)/aout/ar.h libcoff.h \
  libecoff.h coffswap.h ecoffswap.h
coff64-rs6000.lo: coff64-rs6000.c ./bfd.h ./config.h \
  $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h $(INCDIR)/hashtab.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/xcoff.h $(INCDIR)/coff/rs6k64.h \
  libcoff.h libxcoff.h coffcode.h coffswap.h
demo64.lo: demo64.c aoutf1.h ./bfd.h ./config.h $(INCDIR)/filenames.h \
d1692 3
a1694 3
efi-app-ia64.lo: efi-app-ia64.c ./bfd.h ./config.h \
  $(INCDIR)/filenames.h coff-ia64.c $(INCDIR)/hashtab.h \
  $(INCDIR)/coff/ia64.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
d1697 5
a1701 6
elf64-x86-64.lo: elf64-x86-64.c ./bfd.h ./config.h \
  $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h $(INCDIR)/hashtab.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/elf/x86-64.h $(INCDIR)/elf/reloc-macros.h \
  ./elf64-target.h
elf64-alpha.lo: elf64-alpha.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
d1707 1
a1707 1
  libcoff.h libecoff.h ecoffswap.h ./elf64-target.h
d1709 8
a1716 10
  ./config.h ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/hppa.h $(INCDIR)/elf/reloc-macros.h libhppa.h \
  elf64-hppa.h elf-hppa.h ./elf64-target.h
elf64-gen.lo: elf64-gen.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
  ./elf64-target.h
elfn32-mips.lo: elfn32-mips.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
d1722 14
a1735 9
  ecoffswap.h ./elf32-target.h
elf64-mips.lo: elf64-mips.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h $(INCDIR)/aout/ar.h $(INCDIR)/bfdlink.h \
  genlink.h elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h elfxx-mips.h $(INCDIR)/elf/mips.h \
  $(INCDIR)/elf/reloc-macros.h $(INCDIR)/coff/sym.h $(INCDIR)/coff/symconst.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/ecoff.h $(INCDIR)/coff/alpha.h \
  ecoffswap.h ./elf64-target.h
elf64-mmix.lo: elf64-mmix.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
a1736 5
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/mmix.h $(INCDIR)/elf/reloc-macros.h $(INCDIR)/opcode/mmix.h \
  ./elf64-target.h
elf64-ppc.lo: elf64-ppc.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/hashtab.h elf-bfd.h $(INCDIR)/elf/common.h \
d1738 3
a1740 3
  $(INCDIR)/elf/reloc-macros.h elf64-ppc.h ./elf64-target.h
elf64-s390.lo: elf64-s390.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/hashtab.h elf-bfd.h $(INCDIR)/elf/common.h \
d1742 3
a1744 3
  $(INCDIR)/elf/reloc-macros.h ./elf64-target.h
elf64-sh64.lo: elf64-sh64.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/hashtab.h elf-bfd.h $(INCDIR)/elf/common.h \
d1746 2
a1747 2
  $(INCDIR)/elf/reloc-macros.h ./elf64-target.h
elf64-sparc.lo: elf64-sparc.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
d1751 8
a1758 9
  $(INCDIR)/opcode/sparc.h elfxx-sparc.h ./elf64-target.h
elf64.lo: elf64.c elfcode.h ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/libiberty.h $(INCDIR)/bfdlink.h $(INCDIR)/hashtab.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h elfcore.h
mmo.lo: mmo.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h $(INCDIR)/libiberty.h $(INCDIR)/elf/mmix.h \
  $(INCDIR)/elf/reloc-macros.h $(INCDIR)/opcode/mmix.h
nlm32-alpha.lo: nlm32-alpha.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
d1762 4
a1765 4
nlm64.lo: nlm64.c nlmcode.h ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h libnlm.h $(INCDIR)/nlm/common.h \
  $(INCDIR)/nlm/internal.h $(INCDIR)/nlm/external.h
aix386-core.lo: aix386-core.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
d1768 13
a1780 19
hpux-core.lo: hpux-core.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
irix-core.lo: irix-core.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
lynx-core.lo: lynx-core.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
osf-core.lo: osf-core.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
sco5-core.lo: sco5-core.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h libaout.h $(INCDIR)/bfdlink.h
trad-core.lo: trad-core.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h libaout.h $(INCDIR)/bfdlink.h
cisco-core.lo: cisco-core.c ./bfd.h ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
elf32-ia64.lo: elf32-ia64.c ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/opcode/ia64.h ./bfd.h $(INCDIR)/elf/ia64.h \
  $(INCDIR)/elf/reloc-macros.h $(INCDIR)/objalloc.h $(INCDIR)/hashtab.h \
d1782 4
a1785 5
elf64-ia64.lo: elf64-ia64.c ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/opcode/ia64.h ./bfd.h $(INCDIR)/elf/ia64.h \
  $(INCDIR)/elf/reloc-macros.h $(INCDIR)/objalloc.h $(INCDIR)/hashtab.h \
d1787 6
a1792 8
peigen.lo: peigen.c ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h $(INCDIR)/coff/internal.h $(INCDIR)/coff/i386.h \
  $(INCDIR)/coff/external.h $(INCDIR)/coff/pe.h libcoff.h \
  $(INCDIR)/bfdlink.h libpei.h
pepigen.lo: pepigen.c ./config.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h $(INCDIR)/coff/internal.h $(INCDIR)/coff/ia64.h \
  $(INCDIR)/coff/external.h $(INCDIR)/coff/pe.h libcoff.h \
  $(INCDIR)/bfdlink.h libpei.h
@


1.164
log
@2005-09-30  H.J. Lu  <hongjiu.lu@@intel.com>

	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerated.
	* aclocal.m4: Likewise.
@
text
@d114 1
d175 1
d219 1
d390 1
d1091 2
d1250 4
@


1.163
log
@	* Makefile.am: Bfin support.
	* Makefile.in: Regenerated.
	* aclocal.m4: Regenerated.
	* archures.c (bfd_mach_bfin): New.
	(bfd_arch_bfin): New.
	bfd-in.h (bfd_bfin_elf32_create_embedded_relocs): New.
	* bfd-in2.h: Regenerated.
	* config.bfd: Bfin support.
	* configure: Regenerated.
	* configure.in: Bfin support.
	* libbfd.h: Regenerated.
	* reloc.c: Add BFD relocations for Bfin.
	* targets.c (bfd_elf32_bfin_vec): New.
	* cpu-bfin.c: New file.
	* elf32-bfin.c: New file.
@
text
@d907 52
a958 2
archive.lo: archive.c $(INCDIR)/filenames.h $(INCDIR)/libiberty.h \
  $(INCDIR)/hashtab.h $(INCDIR)/aout/ar.h $(INCDIR)/aout/ranlib.h \
d960 17
a976 18
archures.lo: archures.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/safe-ctype.h
bfd.lo: bfd.c bfdver.h $(INCDIR)/filenames.h $(INCDIR)/libiberty.h \
  $(INCDIR)/safe-ctype.h $(INCDIR)/bfdlink.h $(INCDIR)/hashtab.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/sym.h libcoff.h \
  libecoff.h $(INCDIR)/coff/ecoff.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h
bfdio.lo: bfdio.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
bfdwin.lo: bfdwin.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
cache.lo: cache.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/libiberty.h
coffgen.lo: coffgen.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/coff/internal.h libcoff.h $(INCDIR)/bfdlink.h
corefile.lo: corefile.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
format.lo: format.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
init.lo: init.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
libbfd.lo: libbfd.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
opncls.lo: opncls.c $(INCDIR)/filenames.h $(INCDIR)/objalloc.h \
d978 88
a1065 1
reloc.lo: reloc.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
d1067 21
a1087 14
section.lo: section.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/bfdlink.h
syms.lo: syms.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/safe-ctype.h $(INCDIR)/bfdlink.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def
targets.lo: targets.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/fnmatch.h targmatch.h
hash.lo: hash.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/objalloc.h $(INCDIR)/libiberty.h
linker.lo: linker.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/bfdlink.h genlink.h
srec.lo: srec.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/libiberty.h $(INCDIR)/safe-ctype.h
binary.lo: binary.c $(INCDIR)/filenames.h $(INCDIR)/safe-ctype.h \
d1089 29
a1117 92
tekhex.lo: tekhex.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/libiberty.h
ihex.lo: ihex.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/libiberty.h $(INCDIR)/safe-ctype.h
stabs.lo: stabs.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/safe-ctype.h
stab-syms.lo: stab-syms.c libaout.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab.def
merge.lo: merge.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/libiberty.h
dwarf2.lo: dwarf2.c $(INCDIR)/filenames.h $(INCDIR)/libiberty.h \
  $(INCDIR)/hashtab.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/dwarf2.h
simple.lo: simple.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/bfdlink.h
archive64.lo: archive64.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/aout/ar.h
cpu-alpha.lo: cpu-alpha.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
cpu-arc.lo: cpu-arc.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
cpu-arm.lo: cpu-arm.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/libiberty.h
cpu-avr.lo: cpu-avr.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
cpu-bfin.lo: cpu-bfin.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
cpu-cris.lo: cpu-cris.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
cpu-cr16c.lo: cpu-cr16c.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
cpu-crx.lo: cpu-crx.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
cpu-d10v.lo: cpu-d10v.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
cpu-d30v.lo: cpu-d30v.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
cpu-dlx.lo: cpu-dlx.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
cpu-fr30.lo: cpu-fr30.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
cpu-frv.lo: cpu-frv.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
cpu-h8300.lo: cpu-h8300.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
cpu-h8500.lo: cpu-h8500.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
cpu-hppa.lo: cpu-hppa.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
cpu-ia64.lo: cpu-ia64.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  cpu-ia64-opc.c $(srcdir)/../opcodes/ia64-opc.h $(INCDIR)/opcode/ia64.h
cpu-i370.lo: cpu-i370.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
cpu-i386.lo: cpu-i386.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
cpu-i860.lo: cpu-i860.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
cpu-i960.lo: cpu-i960.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
cpu-ip2k.lo: cpu-ip2k.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
cpu-iq2000.lo: cpu-iq2000.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
cpu-m32c.lo: cpu-m32c.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
cpu-m32r.lo: cpu-m32r.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
cpu-m68hc11.lo: cpu-m68hc11.c $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-m68hc12.lo: cpu-m68hc12.c $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-m68k.lo: cpu-m68k.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
cpu-m88k.lo: cpu-m88k.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
cpu-m10200.lo: cpu-m10200.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
cpu-m10300.lo: cpu-m10300.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
cpu-maxq.lo: cpu-maxq.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
cpu-mcore.lo: cpu-mcore.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
cpu-mips.lo: cpu-mips.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
cpu-mmix.lo: cpu-mmix.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
cpu-ms1.lo: cpu-ms1.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
cpu-msp430.lo: cpu-msp430.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
cpu-or32.lo: cpu-or32.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
cpu-ns32k.lo: cpu-ns32k.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  ns32k.h
cpu-openrisc.lo: cpu-openrisc.c $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-pdp11.lo: cpu-pdp11.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
cpu-pj.lo: cpu-pj.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
cpu-powerpc.lo: cpu-powerpc.c $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-rs6000.lo: cpu-rs6000.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
cpu-s390.lo: cpu-s390.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
cpu-sh.lo: cpu-sh.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(srcdir)/../opcodes/sh-opc.h
cpu-sparc.lo: cpu-sparc.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
cpu-tic30.lo: cpu-tic30.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
cpu-tic4x.lo: cpu-tic4x.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
cpu-tic54x.lo: cpu-tic54x.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
cpu-tic80.lo: cpu-tic80.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
cpu-v850.lo: cpu-v850.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/safe-ctype.h
cpu-vax.lo: cpu-vax.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
cpu-we32k.lo: cpu-we32k.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
cpu-w65.lo: cpu-w65.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
cpu-xstormy16.lo: cpu-xstormy16.c $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
cpu-xtensa.lo: cpu-xtensa.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
cpu-z8k.lo: cpu-z8k.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
aout-adobe.lo: aout-adobe.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/aout/adobe.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  libaout.h $(INCDIR)/bfdlink.h
aout-arm.lo: aout-arm.c $(INCDIR)/filenames.h libaout.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/aout/aout64.h aoutx.h \
  $(INCDIR)/safe-ctype.h $(INCDIR)/hashtab.h $(INCDIR)/aout/stab_gnu.h \
d1119 1
a1119 1
aout-cris.lo: aout-cris.c aout32.c aoutx.h $(INCDIR)/filenames.h \
a1121 4
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h aout-target.h
aout-ns32k.lo: aout-ns32k.c $(INCDIR)/aout/aout64.h \
  ns32k.h libaout.h $(INCDIR)/bfdlink.h aoutx.h $(INCDIR)/filenames.h \
  $(INCDIR)/safe-ctype.h $(INCDIR)/hashtab.h $(INCDIR)/aout/stab_gnu.h \
d1123 3
a1125 14
aout-sparcle.lo: aout-sparcle.c $(INCDIR)/bfdlink.h \
  libaout.h aoutf1.h $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/aout/sun4.h $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h aout-target.h
aout-tic30.lo: aout-tic30.c $(INCDIR)/filenames.h libaout.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h aoutx.h \
  $(INCDIR)/safe-ctype.h $(INCDIR)/hashtab.h
aout0.lo: aout0.c aoutf1.h $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/aout/sun4.h libaout.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/ar.h aout-target.h
aout32.lo: aout32.c aoutx.h $(INCDIR)/filenames.h $(INCDIR)/safe-ctype.h \
  $(INCDIR)/bfdlink.h libaout.h $(INCDIR)/hashtab.h $(INCDIR)/aout/aout64.h \
d1127 5
a1131 8
armnetbsd.lo: armnetbsd.c netbsd.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h libaout.h $(INCDIR)/bfdlink.h aout-target.h \
  $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/ar.h
bout.lo: bout.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/bfdlink.h genlink.h $(INCDIR)/bout.h $(INCDIR)/libiberty.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def libaout.h
cf-i386lynx.lo: cf-i386lynx.c $(INCDIR)/filenames.h \
d1135 6
a1140 2
cf-sparclynx.lo: cf-sparclynx.c coff-sparc.c $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h $(INCDIR)/coff/sparc.h $(INCDIR)/coff/external.h \
d1143 2
a1144 2
coff-apollo.lo: coff-apollo.c $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h $(INCDIR)/coff/apollo.h $(INCDIR)/coff/external.h \
d1147 4
a1150 2
coff-arm.lo: coff-arm.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/coff/arm.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
d1152 2
a1153 6
coff-aux.lo: coff-aux.c $(INCDIR)/filenames.h $(INCDIR)/coff/aux-coff.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/m68k.h $(INCDIR)/coff/external.h \
  coff-m68k.c $(INCDIR)/hashtab.h libcoff.h $(INCDIR)/bfdlink.h \
  coffcode.h coffswap.h
coff-h8300.lo: coff-h8300.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/bfdlink.h genlink.h $(INCDIR)/coff/h8300.h \
d1156 5
a1160 10
coff-h8500.lo: coff-h8500.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/coff/h8500.h $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h libcoff.h coffcode.h coffswap.h
coff-i386.lo: coff-i386.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/coff/i386.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h coffswap.h
coff-i860.lo: coff-i860.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/coff/i860.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h coffswap.h
coff-go32.lo: coff-go32.c coff-i386.c $(INCDIR)/filenames.h \
d1164 7
a1170 5
coff-i960.lo: coff-i960.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/coff/i960.h $(INCDIR)/coff/internal.h libcoff.h \
  $(INCDIR)/bfdlink.h coffcode.h coffswap.h
coff-m68k.lo: coff-m68k.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/coff/m68k.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
d1172 2
a1173 2
coff-m88k.lo: coff-m88k.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/coff/m88k.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
d1175 7
a1181 3
coff-maxq.lo: coff-maxq.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/coff/maxq.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  libcoff.h $(INCDIR)/bfdlink.h $(INCDIR)/libiberty.h \
d1183 13
a1195 9
coff-mips.lo: coff-mips.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/hashtab.h $(INCDIR)/coff/internal.h $(INCDIR)/coff/sym.h \
  $(INCDIR)/coff/symconst.h $(INCDIR)/coff/ecoff.h $(INCDIR)/coff/mips.h \
  $(INCDIR)/coff/external.h libcoff.h libecoff.h coffswap.h \
  ecoffswap.h
coff-or32.lo: coff-or32.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/coff/or32.h $(INCDIR)/coff/internal.h libcoff.h \
  $(INCDIR)/bfdlink.h coffcode.h coffswap.h
coff-rs6000.lo: coff-rs6000.c $(INCDIR)/filenames.h \
d1199 19
a1217 2
coff-sh.lo: coff-sh.c $(INCDIR)/filenames.h $(INCDIR)/libiberty.h \
  $(INCDIR)/hashtab.h $(INCDIR)/bfdlink.h $(INCDIR)/coff/sh.h \
d1220 3
a1222 11
coff-sparc.lo: coff-sparc.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/coff/sparc.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h coffswap.h
coff-stgo32.lo: coff-stgo32.c coff-i386.c $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h $(INCDIR)/coff/i386.h $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/go32exe.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h coffswap.h \
  go32stub.h
coff-svm68k.lo: coff-svm68k.c coff-m68k.c $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h $(INCDIR)/coff/m68k.h $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h libcoff.h $(INCDIR)/bfdlink.h \
d1224 1
a1224 7
coff-tic30.lo: coff-tic30.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/coff/tic30.h $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h libcoff.h coffcode.h coffswap.h
coff-tic4x.lo: coff-tic4x.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/coff/tic4x.h $(INCDIR)/coff/ti.h \
  $(INCDIR)/coff/internal.h libcoff.h coffcode.h coffswap.h
coff-tic54x.lo: coff-tic54x.c $(INCDIR)/filenames.h \
d1228 10
a1237 5
coff-tic80.lo: coff-tic80.c $(INCDIR)/bfdlink.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h $(INCDIR)/coff/tic80.h $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h libcoff.h coffcode.h coffswap.h
coff-u68k.lo: coff-u68k.c coff-m68k.c $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h $(INCDIR)/coff/m68k.h $(INCDIR)/coff/external.h \
d1240 6
a1245 29
coff-we32k.lo: coff-we32k.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/coff/we32k.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h coffswap.h
coff-w65.lo: coff-w65.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/coff/w65.h $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h libcoff.h coffcode.h coffswap.h
coff-z8k.lo: coff-z8k.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/coff/z8k.h $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h libcoff.h coffcode.h coffswap.h
cofflink.lo: cofflink.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/hashtab.h $(INCDIR)/coff/internal.h libcoff.h \
  $(INCDIR)/safe-ctype.h
dwarf1.lo: dwarf1.c $(INCDIR)/filenames.h $(INCDIR)/libiberty.h \
  $(INCDIR)/hashtab.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/dwarf.h
ecoff.lo: ecoff.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/hashtab.h $(INCDIR)/aout/ar.h $(INCDIR)/aout/ranlib.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def libaout.h \
  $(INCDIR)/aout/aout64.h $(INCDIR)/coff/internal.h $(INCDIR)/coff/sym.h \
  $(INCDIR)/coff/symconst.h $(INCDIR)/coff/ecoff.h libcoff.h \
  libecoff.h $(INCDIR)/libiberty.h
ecofflink.lo: ecofflink.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/hashtab.h $(INCDIR)/objalloc.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/coff/internal.h $(INCDIR)/coff/sym.h \
  $(INCDIR)/coff/symconst.h $(INCDIR)/coff/ecoff.h libcoff.h \
  libecoff.h
efi-app-ia32.lo: efi-app-ia32.c $(INCDIR)/filenames.h \
  coff-i386.c $(INCDIR)/hashtab.h $(INCDIR)/coff/i386.h \
d1247 22
d1271 2
a1272 2
elf.lo: elf.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/hashtab.h elf-bfd.h $(INCDIR)/elf/common.h \
d1274 6
a1279 1
elf32-am33lin.lo: elf32-am33lin.c elf-m10300.c $(INCDIR)/filenames.h \
d1282 2
a1283 7
  $(INCDIR)/elf/mn10300.h $(INCDIR)/elf/reloc-macros.h \
  elf32-target.h
elf32-arc.lo: elf32-arc.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/arc.h \
  $(INCDIR)/elf/reloc-macros.h $(INCDIR)/libiberty.h \
  elf32-target.h
d1285 1
a1285 4
  $(INCDIR)/filenames.h $(INCDIR)/hashtab.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h elf32-target.h
elf32-avr.lo: elf32-avr.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
d1287 10
a1296 7
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/avr.h \
  $(INCDIR)/elf/reloc-macros.h elf32-target.h
elf32-bfin.lo: elf32-bfin.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/bfin.h \
  $(INCDIR)/elf/reloc-macros.h elf32-target.h
elf32-cr16c.lo: elf32-cr16c.c $(INCDIR)/filenames.h \
d1298 3
a1300 7
  $(INCDIR)/elf/reloc-macros.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h elf32-target.h
elf32-cris.lo: elf32-cris.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/cris.h \
  $(INCDIR)/elf/reloc-macros.h elf32-target.h
elf32-crx.lo: elf32-crx.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
d1302 4
d1307 27
a1333 26
  $(INCDIR)/elf/reloc-macros.h elf32-target.h
elf32-d10v.lo: elf32-d10v.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/d10v.h \
  $(INCDIR)/elf/reloc-macros.h elf32-target.h
elf32-d30v.lo: elf32-d30v.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/d30v.h \
  $(INCDIR)/elf/reloc-macros.h elf32-target.h
elf32-dlx.lo: elf32-dlx.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/dlx.h \
  $(INCDIR)/elf/reloc-macros.h elf32-target.h
elf32-fr30.lo: elf32-fr30.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/fr30.h \
  $(INCDIR)/elf/reloc-macros.h elf32-target.h
elf32-frv.lo: elf32-frv.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/frv.h \
  $(INCDIR)/elf/reloc-macros.h $(INCDIR)/elf/dwarf2.h \
  elf32-target.h
elf32-gen.lo: elf32-gen.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h elf32-target.h
elf32-h8300.lo: elf32-h8300.c $(INCDIR)/filenames.h \
d1336 2
a1337 7
  $(INCDIR)/elf/h8.h $(INCDIR)/elf/reloc-macros.h elf32-target.h
elf32-hppa.lo: elf32-hppa.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/hppa.h \
  $(INCDIR)/elf/reloc-macros.h libhppa.h elf32-hppa.h \
  elf-hppa.h elf32-target.h
elf32-i370.lo: elf32-i370.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
d1339 5
d1345 6
a1350 2
  $(INCDIR)/elf/reloc-macros.h elf32-target.h
elf32-i386.lo: elf32-i386.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
d1352 16
a1367 15
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h elf-vxworks.h \
  $(INCDIR)/elf/i386.h $(INCDIR)/elf/reloc-macros.h elf32-target.h
elf32-i860.lo: elf32-i860.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/i860.h \
  $(INCDIR)/elf/reloc-macros.h elf32-target.h
elf32-i960.lo: elf32-i960.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/i960.h \
  $(INCDIR)/elf/reloc-macros.h elf32-target.h
elf32-ip2k.lo: elf32-ip2k.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/ip2k.h \
  $(INCDIR)/elf/reloc-macros.h elf32-target.h
elf32-iq2000.lo: elf32-iq2000.c $(INCDIR)/filenames.h \
d1370 3
a1372 12
  $(INCDIR)/elf/iq2000.h $(INCDIR)/elf/reloc-macros.h \
  elf32-target.h
elf32-m32c.lo: elf32-m32c.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/m32c.h \
  $(INCDIR)/elf/reloc-macros.h $(INCDIR)/libiberty.h \
  elf32-target.h
elf32-m32r.lo: elf32-m32r.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/m32r.h \
  $(INCDIR)/elf/reloc-macros.h elf32-target.h
elf32-m68k.lo: elf32-m68k.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
d1374 4
d1379 3
a1381 17
  $(INCDIR)/elf/reloc-macros.h elf32-target.h
elf32-m68hc11.lo: elf32-m68hc11.c $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/hashtab.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h elf32-m68hc1x.h \
  $(INCDIR)/elf/m68hc11.h $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/opcode/m68hc11.h elf32-target.h
elf32-m68hc12.lo: elf32-m68hc12.c $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/hashtab.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h elf32-m68hc1x.h \
  $(INCDIR)/elf/m68hc11.h $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/opcode/m68hc11.h elf32-target.h
elf32-m68hc1x.lo: elf32-m68hc1x.c $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/hashtab.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h elf32-m68hc1x.h \
  $(INCDIR)/elf/m68hc11.h $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/opcode/m68hc11.h
elf32-m88k.lo: elf32-m88k.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
d1383 5
a1387 2
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h elf32-target.h
elf-m10200.lo: elf-m10200.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
d1389 5
a1393 2
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h elf32-target.h
elf-m10300.lo: elf-m10300.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
d1395 16
a1410 3
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/mn10300.h \
  $(INCDIR)/elf/reloc-macros.h elf32-target.h
elf32-mcore.lo: elf32-mcore.c $(INCDIR)/filenames.h \
d1413 10
a1422 4
  $(INCDIR)/elf/reloc-macros.h elf32-target.h
elfxx-mips.lo: elfxx-mips.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/libiberty.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
d1424 1
a1424 7
  $(INCDIR)/coff/sym.h $(INCDIR)/coff/symconst.h $(INCDIR)/coff/ecoff.h \
  $(INCDIR)/coff/mips.h $(INCDIR)/coff/external.h
elf32-mips.lo: elf32-mips.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/bfdlink.h genlink.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h elfxx-mips.h \
  $(INCDIR)/elf/mips.h $(INCDIR)/elf/reloc-macros.h $(INCDIR)/coff/sym.h \
  $(INCDIR)/coff/symconst.h $(INCDIR)/coff/internal.h \
d1426 7
a1432 2
  ecoffswap.h elf32-target.h
elf32-ms1.lo: elf32-ms1.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
d1434 4
a1437 4
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/ms1.h \
  $(INCDIR)/elf/reloc-macros.h elf32-target.h
elf32-msp430.lo: elf32-msp430.c $(INCDIR)/filenames.h \
  $(INCDIR)/libiberty.h $(INCDIR)/hashtab.h elf-bfd.h \
d1439 3
a1441 3
  $(INCDIR)/bfdlink.h $(INCDIR)/elf/msp430.h $(INCDIR)/elf/reloc-macros.h \
  elf32-target.h
elf32-openrisc.lo: elf32-openrisc.c $(INCDIR)/filenames.h \
d1444 4
a1447 9
  $(INCDIR)/elf/openrisc.h $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/libiberty.h elf32-target.h
elf32-or32.lo: elf32-or32.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/or32.h \
  $(INCDIR)/elf/reloc-macros.h $(INCDIR)/libiberty.h \
  elf32-target.h
elf32-pj.lo: elf32-pj.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/hashtab.h elf-bfd.h $(INCDIR)/elf/common.h \
d1449 3
a1451 3
  $(INCDIR)/elf/reloc-macros.h elf32-target.h
elf32-ppc.lo: elf32-ppc.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/hashtab.h elf-bfd.h $(INCDIR)/elf/common.h \
d1454 4
a1457 4
  elf32-target.h
elf32-sh64.lo: elf32-sh64.c $(INCDIR)/filenames.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h $(srcdir)/../opcodes/sh64-opc.h \
d1460 8
a1467 8
  $(srcdir)/../opcodes/sh-opc.h elf32-target.h
elf32-sh64-com.lo: elf32-sh64-com.c $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/sh.h $(INCDIR)/elf/reloc-macros.h elf32-sh64.h \
  $(srcdir)/../opcodes/sh64-opc.h
elf32-s390.lo: elf32-s390.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/hashtab.h elf-bfd.h $(INCDIR)/elf/common.h \
d1469 8
a1476 2
  $(INCDIR)/elf/reloc-macros.h elf32-target.h
elf32-sh.lo: elf32-sh.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
d1480 2
a1481 8
  $(srcdir)/../opcodes/sh-opc.h elf32-target.h
elf32-sh-symbian.lo: elf32-sh-symbian.c elf32-sh.c \
  $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h $(INCDIR)/hashtab.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/elf/sh.h $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/libiberty.h $(srcdir)/../opcodes/sh-opc.h \
  elf32-target.h
elfxx-sparc.lo: elfxx-sparc.c $(INCDIR)/filenames.h \
d1486 1
a1486 1
elf32-sparc.lo: elf32-sparc.c $(INCDIR)/filenames.h \
d1490 3
a1492 3
  elfxx-sparc.h elf32-target.h
elf32-v850.lo: elf32-v850.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/hashtab.h elf-bfd.h $(INCDIR)/elf/common.h \
d1495 3
a1497 3
  elf32-target.h
elf32-vax.lo: elf32-vax.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/hashtab.h elf-bfd.h $(INCDIR)/elf/common.h \
d1499 16
a1514 12
  $(INCDIR)/elf/reloc-macros.h elf32-target.h
elf32-xstormy16.lo: elf32-xstormy16.c $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/xstormy16.h $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/libiberty.h elf32-target.h
elf32-xtensa.lo: elf32-xtensa.c $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/hashtab.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/elf/xtensa.h \
  $(INCDIR)/elf/reloc-macros.h $(INCDIR)/xtensa-isa.h \
  $(INCDIR)/xtensa-config.h elf32-target.h
elf32.lo: elf32.c elfcode.h $(INCDIR)/filenames.h $(INCDIR)/libiberty.h \
a1515 3
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h elfcore.h
elflink.lo: elflink.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/hashtab.h elf-bfd.h $(INCDIR)/elf/common.h \
d1518 1
a1518 4
elf-strtab.lo: elf-strtab.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/libiberty.h
elf-eh-frame.lo: elf-eh-frame.c $(INCDIR)/filenames.h \
d1521 6
a1526 2
  $(INCDIR)/elf/dwarf2.h
elf-vxworks.lo: elf-vxworks.c $(INCDIR)/filenames.h \
d1530 3
a1532 3
epoc-pe-arm.lo: epoc-pe-arm.c pe-arm.c $(INCDIR)/filenames.h \
  coff-arm.c $(INCDIR)/hashtab.h $(INCDIR)/coff/arm.h \
  $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
d1535 3
a1537 3
epoc-pei-arm.lo: epoc-pei-arm.c pei-arm.c $(INCDIR)/filenames.h \
  coff-arm.c $(INCDIR)/hashtab.h $(INCDIR)/coff/arm.h \
  $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
d1540 4
a1543 3
hp300bsd.lo: hp300bsd.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  libaout.h $(INCDIR)/bfdlink.h aout-target.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
d1545 1
a1545 1
  aoutx.h $(INCDIR)/filenames.h $(INCDIR)/safe-ctype.h \
d1549 9
a1557 4
som.lo: som.c $(INCDIR)/alloca-conf.h $(INCDIR)/filenames.h
i386aout.lo: i386aout.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/aout/aout64.h libaout.h $(INCDIR)/bfdlink.h \
  aout-target.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
a1558 3
i386bsd.lo: i386bsd.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  libaout.h $(INCDIR)/bfdlink.h aout-target.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
d1560 2
a1561 2
  $(INCDIR)/filenames.h $(INCDIR)/safe-ctype.h $(INCDIR)/bfdlink.h \
  libaout.h $(INCDIR)/hashtab.h $(INCDIR)/aout/aout64.h \
d1564 10
a1573 9
i386freebsd.lo: i386freebsd.c freebsd.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h libaout.h $(INCDIR)/bfdlink.h aout-target.h \
  $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/ar.h
i386linux.lo: i386linux.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/ar.h libaout.h $(INCDIR)/bfdlink.h aout-target.h
i386lynx.lo: i386lynx.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  libaout.h $(INCDIR)/bfdlink.h $(INCDIR)/aout/aout64.h \
d1576 27
a1602 3
i386msdos.lo: i386msdos.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  libaout.h $(INCDIR)/bfdlink.h
i386netbsd.lo: i386netbsd.c netbsd.h $(INCDIR)/filenames.h \
d1606 3
a1608 20
i386mach3.lo: i386mach3.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/ar.h libaout.h $(INCDIR)/bfdlink.h aout-target.h
i386os9k.lo: i386os9k.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/bfdlink.h libaout.h $(INCDIR)/os9k.h
ieee.lo: ieee.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/ieee.h libieee.h $(INCDIR)/safe-ctype.h
m68k4knetbsd.lo: m68k4knetbsd.c netbsd.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h libaout.h $(INCDIR)/bfdlink.h aout-target.h \
  $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/ar.h
m68klinux.lo: m68klinux.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/ar.h libaout.h $(INCDIR)/bfdlink.h aout-target.h
m68knetbsd.lo: m68knetbsd.c netbsd.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h libaout.h $(INCDIR)/bfdlink.h aout-target.h \
  $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/ar.h
m88kmach3.lo: m88kmach3.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  libaout.h $(INCDIR)/bfdlink.h aout-target.h $(INCDIR)/aout/aout64.h \
d1610 3
a1612 1
m88kopenbsd.lo: m88kopenbsd.c netbsd.h $(INCDIR)/filenames.h \
d1616 12
a1627 16
mach-o.lo: mach-o.c mach-o.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h $(INCDIR)/libiberty.h mach-o-target.c
mipsbsd.lo: mipsbsd.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  libaout.h $(INCDIR)/bfdlink.h aout-target.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
newsos3.lo: newsos3.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/ar.h libaout.h $(INCDIR)/bfdlink.h aout-target.h
nlm.lo: nlm.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  libnlm.h $(INCDIR)/nlm/common.h $(INCDIR)/nlm/internal.h \
  $(INCDIR)/nlm/external.h
nlm32-i386.lo: nlm32-i386.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/nlm/i386-ext.h libnlm.h $(INCDIR)/nlm/common.h \
  $(INCDIR)/nlm/internal.h $(INCDIR)/nlm/external.h nlmswap.h \
  nlm-target.h
nlm32-sparc.lo: nlm32-sparc.c $(INCDIR)/filenames.h \
d1631 19
a1649 8
nlm32-ppc.lo: nlm32-ppc.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/nlm/ppc-ext.h libnlm.h $(INCDIR)/nlm/common.h \
  $(INCDIR)/nlm/internal.h $(INCDIR)/nlm/external.h nlmswap.h \
  nlm-target.h
nlm32.lo: nlm32.c nlmcode.h $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  libnlm.h $(INCDIR)/nlm/common.h $(INCDIR)/nlm/internal.h \
  $(INCDIR)/nlm/external.h
ns32knetbsd.lo: ns32knetbsd.c netbsd.h $(INCDIR)/filenames.h \
d1652 47
a1698 19
  $(INCDIR)/aout/ar.h
oasys.lo: oasys.c $(INCDIR)/filenames.h $(INCDIR)/safe-ctype.h \
  $(INCDIR)/hashtab.h $(INCDIR)/oasys.h liboasys.h
pc532-mach.lo: pc532-mach.c $(INCDIR)/filenames.h libaout.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/hashtab.h $(INCDIR)/aout/aout64.h \
  aout-target.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/ar.h
pdp11.lo: pdp11.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  libaout.h $(INCDIR)/bfdlink.h aout-target.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h \
  $(INCDIR)/safe-ctype.h
pef.lo: pef.c $(INCDIR)/safe-ctype.h pef.h pef-traceback.h \
  $(INCDIR)/filenames.h $(INCDIR)/hashtab.h $(INCDIR)/libiberty.h
pe-arm.lo: pe-arm.c $(INCDIR)/filenames.h coff-arm.c \
  $(INCDIR)/hashtab.h $(INCDIR)/coff/arm.h $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h libcoff.h \
  $(INCDIR)/bfdlink.h coffcode.h peicode.h libpei.h
pei-arm.lo: pei-arm.c $(INCDIR)/filenames.h coff-arm.c \
  $(INCDIR)/hashtab.h $(INCDIR)/coff/arm.h $(INCDIR)/coff/external.h \
d1700 4
a1703 3
  $(INCDIR)/bfdlink.h coffcode.h peicode.h libpei.h
pe-i386.lo: pe-i386.c $(INCDIR)/filenames.h coff-i386.c \
  $(INCDIR)/hashtab.h $(INCDIR)/coff/i386.h $(INCDIR)/coff/external.h \
d1705 3
a1707 3
  $(INCDIR)/bfdlink.h coffcode.h peicode.h libpei.h
pei-i386.lo: pei-i386.c $(INCDIR)/filenames.h coff-i386.c \
  $(INCDIR)/hashtab.h $(INCDIR)/coff/i386.h $(INCDIR)/coff/external.h \
d1710 2
a1711 18
pe-mcore.lo: pe-mcore.c $(INCDIR)/filenames.h coff-mcore.c \
  $(INCDIR)/hashtab.h $(INCDIR)/coff/mcore.h $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h libcoff.h \
  $(INCDIR)/bfdlink.h coffcode.h peicode.h libpei.h
pei-mcore.lo: pei-mcore.c $(INCDIR)/filenames.h coff-mcore.c \
  $(INCDIR)/hashtab.h $(INCDIR)/coff/mcore.h $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h libcoff.h \
  $(INCDIR)/bfdlink.h coffcode.h peicode.h libpei.h
pe-ppc.lo: pe-ppc.c $(INCDIR)/filenames.h coff-ppc.c \
  $(INCDIR)/hashtab.h $(INCDIR)/coff/powerpc.h $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h libcoff.h \
  $(INCDIR)/bfdlink.h coffcode.h peicode.h libpei.h
pei-ppc.lo: pei-ppc.c $(INCDIR)/filenames.h coff-ppc.c \
  $(INCDIR)/hashtab.h $(INCDIR)/coff/powerpc.h $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h libcoff.h \
  $(INCDIR)/bfdlink.h coffcode.h peicode.h libpei.h
pe-sh.lo: pe-sh.c $(INCDIR)/filenames.h coff-sh.c $(INCDIR)/libiberty.h \
  $(INCDIR)/hashtab.h $(INCDIR)/bfdlink.h $(INCDIR)/coff/sh.h \
a1712 9
  $(INCDIR)/coff/pe.h libcoff.h coffcode.h peicode.h \
  libpei.h
pei-sh.lo: pei-sh.c $(INCDIR)/filenames.h coff-sh.c \
  $(INCDIR)/libiberty.h $(INCDIR)/hashtab.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/sh.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/pe.h libcoff.h coffcode.h peicode.h \
  libpei.h
pe-mips.lo: pe-mips.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/coff/mipspe.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
d1715 4
a1718 8
pei-mips.lo: pei-mips.c $(INCDIR)/filenames.h pe-mips.c \
  $(INCDIR)/hashtab.h $(INCDIR)/coff/mipspe.h $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h libcoff.h \
  $(INCDIR)/bfdlink.h coffcode.h peicode.h libpei.h
ppcboot.lo: ppcboot.c $(INCDIR)/safe-ctype.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
reloc16.lo: reloc16.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/bfdlink.h genlink.h $(INCDIR)/coff/internal.h \
d1720 2
a1721 2
riscix.lo: riscix.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  libaout.h $(INCDIR)/bfdlink.h $(INCDIR)/aout/aout64.h \
d1724 25
a1748 8
sparclinux.lo: sparclinux.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/ar.h libaout.h $(INCDIR)/bfdlink.h aout-target.h
sparclynx.lo: sparclynx.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/aout/sun4.h libaout.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/ar.h aout-target.h
sparcnetbsd.lo: sparcnetbsd.c netbsd.h $(INCDIR)/filenames.h \
d1752 8
a1759 18
sunos.lo: sunos.c $(INCDIR)/bfdlink.h libaout.h aoutf1.h \
  $(INCDIR)/filenames.h $(INCDIR)/hashtab.h $(INCDIR)/aout/sun4.h \
  $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/ar.h aout-target.h
vaxnetbsd.lo: vaxnetbsd.c netbsd.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h libaout.h $(INCDIR)/bfdlink.h aout-target.h \
  $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/ar.h
vax1knetbsd.lo: vax1knetbsd.c netbsd.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h libaout.h $(INCDIR)/bfdlink.h aout-target.h \
  $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/ar.h
vaxbsd.lo: vaxbsd.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  libaout.h $(INCDIR)/bfdlink.h aout-target.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
versados.lo: versados.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/libiberty.h
vms.lo: vms.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
d1761 11
a1771 15
vms-gsd.lo: vms-gsd.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/hashtab.h vms.h
vms-hdr.lo: vms-hdr.c bfdver.h $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/safe-ctype.h $(INCDIR)/hashtab.h \
  vms.h
vms-misc.lo: vms-misc.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/hashtab.h vms.h
vms-tir.lo: vms-tir.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/hashtab.h vms.h
xcofflink.lo: xcofflink.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/hashtab.h $(INCDIR)/coff/internal.h $(INCDIR)/coff/xcoff.h \
  libcoff.h libxcoff.h
xsym.lo: xsym.c xsym.h $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
xtensa-isa.lo: xtensa-isa.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/xtensa-isa.h $(INCDIR)/xtensa-isa-internal.h
d1774 6
a1779 10
aix5ppc-core.lo: aix5ppc-core.c
aout64.lo: aout64.c aoutx.h $(INCDIR)/filenames.h $(INCDIR)/safe-ctype.h \
  $(INCDIR)/bfdlink.h libaout.h $(INCDIR)/hashtab.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
coff-alpha.lo: coff-alpha.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/hashtab.h $(INCDIR)/coff/internal.h $(INCDIR)/coff/sym.h \
  $(INCDIR)/coff/symconst.h $(INCDIR)/coff/ecoff.h $(INCDIR)/coff/alpha.h \
  $(INCDIR)/aout/ar.h libcoff.h libecoff.h coffswap.h \
  ecoffswap.h
coff64-rs6000.lo: coff64-rs6000.c $(INCDIR)/filenames.h \
d1781 8
a1788 3
  $(INCDIR)/coff/xcoff.h $(INCDIR)/coff/rs6k64.h libcoff.h \
  libxcoff.h coffcode.h coffswap.h
demo64.lo: demo64.c aoutf1.h $(INCDIR)/filenames.h \
d1792 3
a1794 3
efi-app-ia64.lo: efi-app-ia64.c $(INCDIR)/filenames.h \
  coff-ia64.c $(INCDIR)/hashtab.h $(INCDIR)/coff/ia64.h \
  $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
d1797 6
a1802 5
elf64-x86-64.lo: elf64-x86-64.c $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/hashtab.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/elf/x86-64.h \
  $(INCDIR)/elf/reloc-macros.h elf64-target.h
elf64-alpha.lo: elf64-alpha.c $(INCDIR)/filenames.h \
d1808 1
a1808 1
  libcoff.h libecoff.h ecoffswap.h elf64-target.h
d1810 10
a1819 8
  $(INCDIR)/filenames.h $(INCDIR)/hashtab.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/elf/hppa.h $(INCDIR)/elf/reloc-macros.h \
  libhppa.h elf64-hppa.h elf-hppa.h elf64-target.h
elf64-gen.lo: elf64-gen.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h elf64-target.h
elfn32-mips.lo: elfn32-mips.c $(INCDIR)/filenames.h \
d1825 9
a1833 14
  ecoffswap.h elf32-target.h
elf64-mips.lo: elf64-mips.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/aout/ar.h $(INCDIR)/bfdlink.h genlink.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  elfxx-mips.h $(INCDIR)/elf/mips.h $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/coff/sym.h $(INCDIR)/coff/symconst.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/ecoff.h $(INCDIR)/coff/alpha.h ecoffswap.h \
  elf64-target.h
elf64-mmix.lo: elf64-mmix.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/mmix.h \
  $(INCDIR)/elf/reloc-macros.h $(INCDIR)/opcode/mmix.h \
  elf64-target.h
elf64-ppc.lo: elf64-ppc.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
d1835 5
d1841 3
a1843 3
  $(INCDIR)/elf/reloc-macros.h elf64-ppc.h elf64-target.h
elf64-s390.lo: elf64-s390.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/hashtab.h elf-bfd.h $(INCDIR)/elf/common.h \
d1845 3
a1847 3
  $(INCDIR)/elf/reloc-macros.h elf64-target.h
elf64-sh64.lo: elf64-sh64.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/hashtab.h elf-bfd.h $(INCDIR)/elf/common.h \
d1849 2
a1850 2
  $(INCDIR)/elf/reloc-macros.h elf64-target.h
elf64-sparc.lo: elf64-sparc.c $(INCDIR)/filenames.h \
d1854 9
a1862 8
  $(INCDIR)/opcode/sparc.h elfxx-sparc.h elf64-target.h
elf64.lo: elf64.c elfcode.h $(INCDIR)/filenames.h $(INCDIR)/libiberty.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/hashtab.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h elfcore.h
mmo.lo: mmo.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/libiberty.h $(INCDIR)/elf/mmix.h $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/opcode/mmix.h
nlm32-alpha.lo: nlm32-alpha.c $(INCDIR)/filenames.h \
d1866 4
a1869 4
nlm64.lo: nlm64.c nlmcode.h $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  libnlm.h $(INCDIR)/nlm/common.h $(INCDIR)/nlm/internal.h \
  $(INCDIR)/nlm/external.h
aix386-core.lo: aix386-core.c $(INCDIR)/filenames.h \
d1872 19
a1890 13
hpux-core.lo: hpux-core.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
irix-core.lo: irix-core.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
lynx-core.lo: lynx-core.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
osf-core.lo: osf-core.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
sco5-core.lo: sco5-core.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  libaout.h $(INCDIR)/bfdlink.h
trad-core.lo: trad-core.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  libaout.h $(INCDIR)/bfdlink.h
cisco-core.lo: cisco-core.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
elf32-ia64.lo: elf32-ia64.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/opcode/ia64.h \
  $(INCDIR)/elf/ia64.h $(INCDIR)/elf/reloc-macros.h $(INCDIR)/objalloc.h \
d1892 5
a1896 4
elf64-ia64.lo: elf64-ia64.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/opcode/ia64.h \
  $(INCDIR)/elf/ia64.h $(INCDIR)/elf/reloc-macros.h $(INCDIR)/objalloc.h \
d1898 8
a1905 6
peigen.lo: peigen.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/i386.h $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/pe.h libcoff.h $(INCDIR)/bfdlink.h libpei.h
pepigen.lo: pepigen.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/ia64.h $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/pe.h libcoff.h $(INCDIR)/bfdlink.h libpei.h
@


1.162
log
@Remove a29k support.
@
text
@d61 1
d121 1
d228 1
d398 1
d969 1
d1216 4
@


1.161
log
@bfd/
	* Makefile.am (BFD32_BACKENDS): Remove cf-m68klynx.lo.
	(BFD32_BACKENDS): Likewise, remove m68klynx.lo.
	(BFD32_BACKENDS_CFILES): Remove cf-m68klynx.c, m68klynx.c.
	(cf-m68klynx.lo, m68klynx.lo): Remove targets.
	* Makefile.in: Regenerate.
	* cf-m68klynx.c: Remove.
	* m68klynx.c: Likewise.
	* configure.in (m68klynx_aout_vec): Remove vector.
	(m68klynx_coff_vec): Likewise.
	* configure: Regenerate.
	* targets.c (m68klynx_aout_vec): Remove extern.
	(m68klynx_coff_vec): Likewise.
	(_bfd_target_vector): Remove m68klynx_{aout,coff}_vec.
	* po/SRC-POTFILES.in: Remove cf-m68klynx.c, m68klynx.c.
gas/
	* config/tc-m68k.h: Remove TE_LYNX conditional code.
@
text
@a56 1
	cpu-a29k.lo \
a115 1
	cpu-a29k.c \
a188 1
	coff-a29k.lo \
a357 1
	coff-a29k.c \
a959 1
cpu-a29k.lo: cpu-a29k.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
a1071 3
coff-a29k.lo: coff-a29k.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/coff/a29k.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h coffswap.h
@


1.160
log
@bfd/
	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.
opcodes/
	* Makefile.am: Run "make dep-am".
	(stamp-m32c): Fix cpu dependencies.
	* Makefile.in: Regenerate.
	* ip2k-dis.c: Regenerate.
binutils/
	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.
gas/
	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.
ld/
	* Makefile.am: Run "make dep-am".
	(emipsidt.c, emipsidtl.c): Depend on generic.em.
	* Makefile.in: Regenerate.
@
text
@a189 1
	cf-m68klynx.lo \
a297 1
	m68klynx.lo \
a359 1
	cf-m68klynx.c \
a467 1
	m68klynx.c \
a1072 4
cf-m68klynx.lo: cf-m68klynx.c coff-m68k.c $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h $(INCDIR)/coff/m68k.h $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h libcoff.h $(INCDIR)/bfdlink.h \
  coffcode.h coffswap.h
a1506 4
m68klynx.lo: m68klynx.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  libaout.h $(INCDIR)/bfdlink.h $(INCDIR)/aout/aout64.h \
  aout-target.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/ar.h
@


1.159
log
@ChangeLog:
2005-07-14  Jim Blandy  <jimb@@redhat.com>

	* configure.in: Add cases for Renesas m32c.
	* configure: Regenerated.

bfd/ChangeLog:
2005-07-14  Jim Blandy  <jimb@@redhat.com>

	Add support for m32c-*-elf (Renesas m32c and m16c).
	* Makefile.am (ALL_MACHINES): Add cpu-m32c.lo.
	(ALL_MACHINES_CFILES): Add cpu-m32c.c.
	(BFD32_BACKENDS): Add elf32-m32c.lo.
	(BFD32_BACKENDS_CFILES): Add elf32-m32c.c.
	(cpu-m32c.lo, elf32-m32c.lo): New rules, generated by 'make dep-am'.
	* Makefile.in: Regenerated.
	* archures.c (bfd_arch_m32c, bfd_mach_m16c, bfd_mach_m32c): New
	arch and mach codes.
	(bfd_m32c_arch): New arch info object.
	(bfd_archures_list): List bfd_m32c_arch.
	* bfd-in2.h: Regenerated.
	* config.bfd: Add case for the m32c.
	* configure.in: Add case for the m32c.
	* configure: Regenerated.
	* cpu-m32c.c, elf32-m32c.c: New files.
	* libbfd.h: Regenerated.
	* targets.c (bfd_elf32_m32c_vec): Declare.
	(_bfd_target_vector): List bfd_elf32_m32c_vec.

binutils/ChangeLog:
2005-07-14  Jim Blandy  <jimb@@redhat.com>

	* readelf.c: #include "elf/m32c.h"
	(guess_is_rela, dump_relocations, get_machine_name): Add cases for
	EM_M32C.
	* Makefile.am (readelf.o): Update dependencies.
	* Makefile.in: Regenerated.

cpu/ChangeLog:
2005-07-14  Jim Blandy  <jimb@@redhat.com>

	* m32c.cpu, m32c.opc: Machine description for the Renesas M32C.

gas/ChangeLog:
2005-07-14  Jim Blandy  <jimb@@redhat.com>

	Add support for the Renesas M32C.
	* Makefile.am (CPU_TYPES): List m32c.
	(TARGET_CPU_CFILES): List config/tc-m32c.c.
	(TARGET_CPU_HFILES): List config/tc-m32c.h.
	* configure.in: Add case for m32c.
	* configure.tgt: Add cases for m32c and m32c-*-elf.
	* configure: Regenerated.
	* config/tc-m32c.c, config/tc-m32c.h: New files.
	* doc/Makefile.am (CPU_DOCS): Add c-m32c.texi.
	* doc/Makefile.in: Regenerated.
	* doc/all.texi: Set M32C.
	* doc/as.texinfo: Add text for the M32C-specific options and line
	comment characters, and refer to c-m32c.texi.
	* doc/c-m32c.texi: New file.

include/ChangeLog:
2005-07-14  Jim Blandy  <jimb@@redhat.com>

	* dis-asm.h (print_insn_m32c): New declaration.

include/elf/ChangeLog:
2005-07-14  Jim Blandy  <jimb@@redhat.com>

	Add support for Renesas M32C and M16C.
	* common.h (EM_M32C): New machine number.
	* m32c.h: New file.

ld/ChangeLog:
2005-07-14  Jim Blandy  <jimb@@redhat.com>

	Add support for the Renesas M32C and M16C.
	* Makefile.am (ALL_EMULATIONS): Add eelf32m32c.o.
	(eelf32m32c.c): New target.
	* Makefile.in: Regenerated.
	* configure.tgt: Add case for m32c-*-elf.
	* emulparams/elf32m32c.sh: New file.

opcodes/ChangeLog:
2005-07-14  Jim Blandy  <jimb@@redhat.com>

	Add support for the Renesas M32C and M16C.
	* m32c-asm.c, m32c-desc.c, m32c-dis.c, m32c-ibld.c, m32c-opc.c: New.
	* m32c-desc.h, m32c-opc.h: New.
	* Makefile.am (HFILES): List m32c-desc.h and m32c-opc.h.
	(CFILES): List m32c-asm.c, m32c-desc.c, m32c-dis.c, m32c-ibld.c,
	m32c-opc.c.
	(ALL_MACHINES): List m32c-asm.lo, m32c-desc.lo, m32c-dis.lo,
	m32c-ibld.lo, m32c-opc.lo.
	(CLEANFILES): List stamp-m32c.
	(M32C_DEPS): List stamp-m32c, if CGEN_MAINT.
	(CGEN_CPUS): Add m32c.
	(m32c-asm.c, m32c-desc.c, m32c-dis.c, m32c-ibld.c, m32c-opc.c)
	(m32c-desc.h, m32c-opc.h): Depend on M32C_DEPS.
	(m32c_opc_h): New variable.
	(stamp-m32c, m32c-asm.lo, m32c-desc.lo, m32c-dis.lo, m32c-ibld.lo)
	(m32c-opc.lo): New rules.
	* Makefile.in: Regenerated.
	* configure.in: Add case for bfd_m32c_arch.
	* configure: Regenerated.
	* disassemble.c (ARCH_m32c): New.
	[ARCH_m32c]: #include "m32c-desc.h".
	(disassembler) [ARCH_m32c]: Add case for bfd_arch_m32c.
	(disassemble_init_for_target) [ARCH_m32c]: Same.

	* cgen-ops.h, cgen-types.h: New files.
	* Makefile.am (HFILES): List them.
	* Makefile.in: Regenerated.
@
text
@d911 3
a913 2
archive.lo: archive.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/aout/ar.h $(INCDIR)/aout/ranlib.h $(INCDIR)/safe-ctype.h
d1007 1
d1352 4
a1355 4
elf32-ms1.lo: elf32-ms1.c elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/ms1.h $(INCDIR)/elf/reloc-macros.h \
  elf32-target.h
d1378 2
a1379 1
  $(INCDIR)/elf/reloc-macros.h elf32-ppc.h elf32-target.h
@


1.158
log
@	* Makefile.am (ALL_MACHINES): Add ms1 support.
	(ALL_MACHINES_CFILES): Same.
	(BFD32_BACKENDS): Same.
	(BFD32_BACKENDS_CFILES): Same.

	* Makefile.in: Regenerate.

	* archures.c (bfd_architecture): Add ms1 entries.
	Externalize bfd_ms1_arch.
	(bfd_archures_list): Add bfd_ms1_arch.

	* bfd-in2.h: Regenerate.

	* cpu-ms1.c: New file.

	* elf32-ms1.c: New file.

	* targets.c: Define extern of bfd_elf32_ms1_vec.
	Add bfd_elf32_ms1_vec to _bfd_target_vector.

	* configure.in: Add bfd_elf32_ms1_vec case.

	* configure: Regenerate.

	* config.bfd: Add ms1-*-elf to table.
@
text
@d80 1
d140 1
d247 1
d419 1
d992 1
d1295 5
@


1.157
log
@* Makefile.am: Regenerate dependencies with 'make dep-am'.
* Makefile.in: Regenerate.
@
text
@d91 1
d150 1
d256 1
d427 1
d1340 4
@


1.156
log
@	* bfd/Makefile.am, binutils/Makefile.am, etc/Makefile.in
	* gas/Makefile.am: Have 'all' depend on 'info'.
	* ld/Makefile.am: Have 'all' depend on 'info' and 'ld.1'.
	* bfd/Makefile.in, binutils/Makefile.in, gas/Makefile.in
	* ld/Makefile.in: Regenerate.
@
text
@d1267 2
a1268 2
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/elf/i386.h \
  $(INCDIR)/elf/reloc-macros.h elf32-target.h elf-vxworks.h
d1386 4
a1389 3
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h elfxx-sparc.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/opcode/sparc.h \
  $(INCDIR)/elf/sparc.h $(INCDIR)/elf/reloc-macros.h
d1393 2
a1394 2
  $(INCDIR)/elf/reloc-macros.h $(INCDIR)/opcode/sparc.h elfxx-sparc.h \
  elf32-target.h
d1428 1
a1428 1
elf-vxworks.lo: elf-vxworks.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
d1430 2
a1431 2
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/reloc-macros.h elf-vxworks.h
d1730 1
a1730 1
  $(INCDIR)/hashtab.h elf-bfd.h $(INCDIR)/elf/common.h elfxx-sparc.h \
d1732 2
a1733 2
  $(INCDIR)/opcode/sparc.h $(INCDIR)/elf/sparc.h $(INCDIR)/elf/reloc-macros.h \
  elf64-target.h
@


1.155
log
@2005-05-05  Paul Brook  <paul@@codesourcery.com>

bfd/
	* config.bfd: Use bfd_elf32_i386_vxworks_vec for i?86-*-vxworks.
	* configure.in: Add bfd_elf32_i386_vxworks_vec. i386 targets need
	elf-vxworks.lo.
	* configure: Regenerate.
	* Makefile.am (BFD32_BACKENDS): Add elf-vxworks.lo.
	(BFD32_BACKENDS_CFILES): Add elf-vxworks.c.
	(elf32-i386.lo): Depend on elf-vxworks.h.
	(elf-vxworks.lo): New rule.
	* Makefile.in: Regenerate.
	* elf-bfd.h (elf_backend_data): Update type of
	elf_backend_emit_relocs.
	(_bfd_elf_link_output_relocs): Update prototype.
	* elflink.c (_bfd_elf_link_output_relocs): Always use
	bed->elf_backend_emit_relocs when outputting relocations.
	* elfxx-target.h (elf_backend_emit_relocs): Default to
	_bfd_elf_link_output_relocs.
	* targets.c (bfd_elf32_i386_vxworks_vec): Declare.
	(_bfd_target_vector): Add bfd_elf32_i386_vxworks_vec.
	* elf32-i386.c: Add elf32-i386-vxworks target BFD.
	(elf_i386_plt0_entry): Remove padding.
	(elf_i386_pic_plt0_entry): Ditto.
	(PLTRESOLVE_RELOCS_SHLIB, PLTRESOLVE_RELOCS): Define.
	(PLT_NON_JUMP_SLOT_RELOCS): Define.
	(elf_i386_link_hash_table): Add srelplt2, hgot, hplt, is_vxworks and
	plt0_pad_byte fields.
	(elf_i386_link_hash_table_create): Zero them.
	(elf_i386_create_dynamic_sections): Create static relocation section.
	(allocate_dynrelocs): Allocate space for static PLT relocations.
	(elf_i386_size_dynamic_sections): Save shortcuts to PLT and GOT
	symbols.  Give PLT symbols function type.  Don't strip PLT sections
	if we have exported symbols from them.
	(elf_i386_finish_dynamic_symbol): Fill in VxWorks PLT static
	relocation section.  Don't mark _GLOBAL_OFFSET_TABLE_ as absolute on
	VxWorks.
	(elf_i386_finish_dynamic_sections): Allow different pad bytes.
	Add relocation for GOT location.  Fill in PLT static relocations.
	(elf_i386_vxworks_link_hash_table_create): New function.
	(elf_i386_vxworks_link_output_symbol_hook): New function.
	* elf-vxworks.h: New file.
gas/
	* config/tc-i386.h (ELF_TARGET_FORMAT): Define for TE_VXWORKS.
gas/testsuite/
	* gas/i386/i386.exp: Don't run divide test on vxworks.
ld/
	* Makefile.am: Add eelf_i386_vxworks.
	* Makefile.in: Regenerate.
	* configure.tgt: Make i?86-*-vxworks use targ_emul=elf_i386_vxworks.
	* emulparams/elf_i386_vxworks.sh: New file.
	* emulparams/vxworks.sh: New file.
	* scripttempl/elf.sc: Add DATA_END_SYMBOLS and ETEXT_NAME.
@
text
@d650 1
a650 1
diststuff: info
@


1.154
log
@	* Makefile.am (INCLUDES): Don't -D_GNU_SOURCE here.
	* configure.in: Call AC_GNU_SOURCE here, after AC_PROG_CC.
	* configure, config.in, Makefile.in: Regenerate.
	* sysdep.h (stpcpy): Revert last change.
@
text
@d274 1
d444 1
d1268 1
a1268 1
  $(INCDIR)/elf/reloc-macros.h elf32-target.h
d1427 4
@


1.153
log
@2005-04-28  Paul Brook  <paul@@codesourcery.com>

	Merge changes only applied to Makefile.in.
	* Makefile.am (BFD32_BACKENDS): Add elfxx-sparc.lo
	(BFD32_BACKENDS_CFILES): Add elfxx-sparc.c
	(elfxx-sparc.lo): New rule.
	(elf32-sparc.lo): Add elfxx-sparc.h dependency.
	(elf64-sparc.lo): Likewise.
@
text
@d601 1
a601 1
INCLUDES = -D_GNU_SOURCE @@HDEFINES@@ @@COREFLAG@@ @@TDEFINES@@ $(CSEARCH) $(CSWITCHES) -I$(srcdir)/../intl -I../intl
@


1.152
log
@bfd/
	* Makefile.am (NO_WERROR): Define.
	* warning.m4: New file
	* acinclude.m4: Include warning.m4.
	* configure.in: Invoke AM_BINUTILS_WARNINGS.
	* Makefile.in: Regenerate.
	* configure: Regenerate.
bfd/doc/
	* Makefile.in: Regenerate.
binutils/
	* Makefile.am (NO_WERROR): Define.  Use instead of -Wno-error.
	* configure.in: Include ../bfd/warning.m4 contents.
	* Makefile.in: Regenerate.
	* configure: Regenerate.
	* doc/Makefile.in: Regenerate.
gas/
	* Makefile.am (NO_WERROR): Define.  Use instead of -Wno-error.
	* acinclude.m4: Include ../bfd/warning.m4.
	* configure.in: Invoke AM_BINUTILS_WARNINGS.
	* Makefile.in: Regenerate.
	* configure: Regenerate.
	* doc/Makefile.in: Regenerate.
gprof/
	* Makefile.am (NO_WERROR): Define.
	* acinclude.m4: Include ../bfd/warning.m4.
	* configure.in: Invoke AM_BINUTILS_WARNINGS.
	* Makefile.in: Regenerate.
	* aclocal.m4: Regenerate.
	* configure: Regenerate.
ld/
	* Makefile.am (NO_WERROR): Define.  Use instead of -Wno-error.
	* configure.in: Include ../bfd/warning.m4 contents.
	* Makefile.in: Regenerate.
	* configure: Regenerate.
opcodes/
	* Makefile.am (NO_WERROR): Define.
	* configure.in: Invoke AM_BINUTILS_WARNINGS.
	* Makefile.in: Regenerate.
	* aclocal.m4: Regenerate.
	* configure: Regenerate.
@
text
@d264 1
d433 1
d1383 4
d1390 1
a1390 1
  $(INCDIR)/elf/reloc-macros.h $(INCDIR)/opcode/sparc.h \
d1723 1
a1723 1
  $(INCDIR)/hashtab.h elf-bfd.h $(INCDIR)/elf/common.h \
@


1.151
log
@bfd/
	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.
	* aclocal.m4: Regenerate.
	* libcoff.h: Regenerate.
bfd/doc/
	* Makefile.in: Regenerate.
binutils/
	* Makefile.am: Run "make dep-am".
	(syslex.o, sysinfo.o, arparse.o, arlex.o): Add -Wno-error to command.
	(sysroff.o, defparse.o, deflex.o): Likewise.
	(nlmheader.o, rcparse.o, rclex.o): Likewise.
	* Makefile.in: Regenerate.
	* aclocal.m4: Regenerate.
	* config.in: Regenerate.
	* configure: Regenerate.
gas/
	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.
ld/
	* Makefile.am: Run "make dep-am".
	(ldgram.o, ldlex.o, deffilep.o): Add -Wno-error to command.
	* Makefile.in: Regenerate.
	* config.in: Regenerate.
@
text
@d21 1
@


1.150
log
@(BFD32_BACKENDS): Delete elf32-ia64.lo.
(BFD64_BACKENDS): Add elf32-ia64.lo.
@
text
@d898 4
a901 3
archive.lo: archive.c $(INCDIR)/filenames.h $(INCDIR)/aout/ar.h \
  $(INCDIR)/aout/ranlib.h $(INCDIR)/safe-ctype.h
archures.lo: archures.c $(INCDIR)/filenames.h $(INCDIR)/safe-ctype.h
d903 14
a916 13
  $(INCDIR)/safe-ctype.h $(INCDIR)/bfdlink.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/sym.h libcoff.h libecoff.h $(INCDIR)/coff/ecoff.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h
bfdio.lo: bfdio.c $(INCDIR)/filenames.h
bfdwin.lo: bfdwin.c $(INCDIR)/filenames.h
cache.lo: cache.c $(INCDIR)/filenames.h $(INCDIR)/libiberty.h
coffgen.lo: coffgen.c $(INCDIR)/filenames.h $(INCDIR)/coff/internal.h \
  libcoff.h $(INCDIR)/bfdlink.h
corefile.lo: corefile.c $(INCDIR)/filenames.h
format.lo: format.c $(INCDIR)/filenames.h
init.lo: init.c $(INCDIR)/filenames.h
libbfd.lo: libbfd.c $(INCDIR)/filenames.h
d918 19
d938 4
a941 18
reloc.lo: reloc.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h
section.lo: section.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h
syms.lo: syms.c $(INCDIR)/filenames.h $(INCDIR)/safe-ctype.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def
targets.lo: targets.c $(INCDIR)/filenames.h $(INCDIR)/fnmatch.h \
  targmatch.h
hash.lo: hash.c $(INCDIR)/filenames.h $(INCDIR)/objalloc.h \
  $(INCDIR)/libiberty.h
linker.lo: linker.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  genlink.h
srec.lo: srec.c $(INCDIR)/filenames.h $(INCDIR)/libiberty.h \
  $(INCDIR)/safe-ctype.h
binary.lo: binary.c $(INCDIR)/filenames.h $(INCDIR)/safe-ctype.h
tekhex.lo: tekhex.c $(INCDIR)/filenames.h $(INCDIR)/libiberty.h
ihex.lo: ihex.c $(INCDIR)/filenames.h $(INCDIR)/libiberty.h \
  $(INCDIR)/safe-ctype.h
stabs.lo: stabs.c $(INCDIR)/filenames.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/safe-ctype.h
d947 4
a950 63
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/dwarf2.h
simple.lo: simple.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h
archive64.lo: archive64.c $(INCDIR)/filenames.h $(INCDIR)/aout/ar.h
cpu-a29k.lo: cpu-a29k.c $(INCDIR)/filenames.h
cpu-alpha.lo: cpu-alpha.c $(INCDIR)/filenames.h
cpu-arc.lo: cpu-arc.c $(INCDIR)/filenames.h
cpu-arm.lo: cpu-arm.c $(INCDIR)/filenames.h $(INCDIR)/libiberty.h
cpu-avr.lo: cpu-avr.c $(INCDIR)/filenames.h
cpu-cris.lo: cpu-cris.c $(INCDIR)/filenames.h
cpu-cr16c.lo: cpu-cr16c.c $(INCDIR)/filenames.h
cpu-crx.lo: cpu-crx.c $(INCDIR)/filenames.h
cpu-d10v.lo: cpu-d10v.c $(INCDIR)/filenames.h
cpu-d30v.lo: cpu-d30v.c $(INCDIR)/filenames.h
cpu-dlx.lo: cpu-dlx.c $(INCDIR)/filenames.h
cpu-fr30.lo: cpu-fr30.c $(INCDIR)/filenames.h
cpu-frv.lo: cpu-frv.c $(INCDIR)/filenames.h
cpu-h8300.lo: cpu-h8300.c $(INCDIR)/filenames.h
cpu-h8500.lo: cpu-h8500.c $(INCDIR)/filenames.h
cpu-hppa.lo: cpu-hppa.c $(INCDIR)/filenames.h
cpu-ia64.lo: cpu-ia64.c $(INCDIR)/filenames.h cpu-ia64-opc.c \
  $(srcdir)/../opcodes/ia64-opc.h $(INCDIR)/opcode/ia64.h
cpu-i370.lo: cpu-i370.c $(INCDIR)/filenames.h
cpu-i386.lo: cpu-i386.c $(INCDIR)/filenames.h
cpu-i860.lo: cpu-i860.c $(INCDIR)/filenames.h
cpu-i960.lo: cpu-i960.c $(INCDIR)/filenames.h
cpu-ip2k.lo: cpu-ip2k.c $(INCDIR)/filenames.h
cpu-iq2000.lo: cpu-iq2000.c $(INCDIR)/filenames.h
cpu-m32r.lo: cpu-m32r.c $(INCDIR)/filenames.h
cpu-m68hc11.lo: cpu-m68hc11.c $(INCDIR)/filenames.h
cpu-m68hc12.lo: cpu-m68hc12.c $(INCDIR)/filenames.h
cpu-m68k.lo: cpu-m68k.c $(INCDIR)/filenames.h
cpu-m88k.lo: cpu-m88k.c $(INCDIR)/filenames.h
cpu-m10200.lo: cpu-m10200.c $(INCDIR)/filenames.h
cpu-m10300.lo: cpu-m10300.c $(INCDIR)/filenames.h
cpu-maxq.lo: cpu-maxq.c $(INCDIR)/filenames.h
cpu-mcore.lo: cpu-mcore.c $(INCDIR)/filenames.h
cpu-mips.lo: cpu-mips.c $(INCDIR)/filenames.h
cpu-mmix.lo: cpu-mmix.c $(INCDIR)/filenames.h
cpu-msp430.lo: cpu-msp430.c $(INCDIR)/filenames.h
cpu-or32.lo: cpu-or32.c $(INCDIR)/filenames.h
cpu-ns32k.lo: cpu-ns32k.c $(INCDIR)/filenames.h ns32k.h
cpu-openrisc.lo: cpu-openrisc.c $(INCDIR)/filenames.h
cpu-pdp11.lo: cpu-pdp11.c $(INCDIR)/filenames.h
cpu-pj.lo: cpu-pj.c $(INCDIR)/filenames.h
cpu-powerpc.lo: cpu-powerpc.c $(INCDIR)/filenames.h
cpu-rs6000.lo: cpu-rs6000.c $(INCDIR)/filenames.h
cpu-s390.lo: cpu-s390.c $(INCDIR)/filenames.h
cpu-sh.lo: cpu-sh.c $(INCDIR)/filenames.h $(srcdir)/../opcodes/sh-opc.h
cpu-sparc.lo: cpu-sparc.c $(INCDIR)/filenames.h
cpu-tic30.lo: cpu-tic30.c $(INCDIR)/filenames.h
cpu-tic4x.lo: cpu-tic4x.c $(INCDIR)/filenames.h
cpu-tic54x.lo: cpu-tic54x.c $(INCDIR)/filenames.h
cpu-tic80.lo: cpu-tic80.c $(INCDIR)/filenames.h
cpu-v850.lo: cpu-v850.c $(INCDIR)/filenames.h $(INCDIR)/safe-ctype.h
cpu-vax.lo: cpu-vax.c $(INCDIR)/filenames.h
cpu-we32k.lo: cpu-we32k.c $(INCDIR)/filenames.h
cpu-w65.lo: cpu-w65.c $(INCDIR)/filenames.h
cpu-xstormy16.lo: cpu-xstormy16.c $(INCDIR)/filenames.h
cpu-xtensa.lo: cpu-xtensa.c $(INCDIR)/filenames.h
cpu-z8k.lo: cpu-z8k.c $(INCDIR)/filenames.h
aout-adobe.lo: aout-adobe.c $(INCDIR)/filenames.h $(INCDIR)/aout/adobe.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def libaout.h \
d952 71
d1025 2
a1026 2
  $(INCDIR)/safe-ctype.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/ar.h aout-target.h
d1029 2
a1030 2
  $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/ar.h aout-target.h
d1033 2
a1034 2
  $(INCDIR)/safe-ctype.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/ar.h
d1036 3
a1038 3
  libaout.h aoutf1.h $(INCDIR)/filenames.h $(INCDIR)/aout/sun4.h \
  $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/ar.h aout-target.h
d1042 5
a1046 5
  $(INCDIR)/safe-ctype.h
aout0.lo: aout0.c aoutf1.h $(INCDIR)/filenames.h $(INCDIR)/aout/sun4.h \
  libaout.h $(INCDIR)/bfdlink.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h \
  aout-target.h
d1048 1
a1048 1
  $(INCDIR)/bfdlink.h libaout.h $(INCDIR)/aout/aout64.h \
d1051 6
a1056 5
  libaout.h $(INCDIR)/bfdlink.h aout-target.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
bout.lo: bout.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  genlink.h $(INCDIR)/bout.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def libaout.h
d1058 5
a1062 1
  coff-i386.c $(INCDIR)/coff/i386.h $(INCDIR)/coff/external.h \
a1064 3
cf-m68klynx.lo: cf-m68klynx.c coff-m68k.c $(INCDIR)/filenames.h \
  $(INCDIR)/coff/m68k.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h coffswap.h
d1066 5
a1070 4
  $(INCDIR)/coff/sparc.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h coffswap.h
coff-a29k.lo: coff-a29k.c $(INCDIR)/filenames.h $(INCDIR)/coff/a29k.h \
  $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
d1073 5
a1077 4
  $(INCDIR)/coff/apollo.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h coffswap.h
coff-arm.lo: coff-arm.c $(INCDIR)/filenames.h $(INCDIR)/coff/arm.h \
  $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
d1081 1
a1081 5
  coff-m68k.c libcoff.h $(INCDIR)/bfdlink.h coffcode.h \
  coffswap.h
coff-h8300.lo: coff-h8300.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  genlink.h $(INCDIR)/coff/h8300.h $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h libcoff.h $(INCDIR)/libiberty.h \
d1083 2
a1084 4
coff-h8500.lo: coff-h8500.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/h8500.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  libcoff.h coffcode.h coffswap.h
coff-i386.lo: coff-i386.c $(INCDIR)/filenames.h $(INCDIR)/coff/i386.h \
d1086 6
d1093 2
a1094 2
coff-i860.lo: coff-i860.c $(INCDIR)/filenames.h $(INCDIR)/coff/i860.h \
  $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
d1097 1
a1097 3
  $(INCDIR)/coff/i386.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h coffswap.h
coff-i960.lo: coff-i960.c $(INCDIR)/filenames.h $(INCDIR)/coff/i960.h \
d1100 5
a1104 2
coff-m68k.lo: coff-m68k.c $(INCDIR)/filenames.h $(INCDIR)/coff/m68k.h \
  $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
d1106 2
a1107 2
coff-m88k.lo: coff-m88k.c $(INCDIR)/filenames.h $(INCDIR)/coff/m88k.h \
  $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
d1109 2
a1110 2
coff-maxq.lo: coff-maxq.c $(INCDIR)/filenames.h $(INCDIR)/coff/maxq.h \
  $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
d1114 7
a1120 6
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/sym.h $(INCDIR)/coff/symconst.h \
  $(INCDIR)/coff/ecoff.h $(INCDIR)/coff/mips.h $(INCDIR)/coff/external.h \
  libcoff.h libecoff.h coffswap.h ecoffswap.h
coff-or32.lo: coff-or32.c $(INCDIR)/filenames.h $(INCDIR)/coff/or32.h \
  $(INCDIR)/coff/internal.h libcoff.h $(INCDIR)/bfdlink.h \
  coffcode.h coffswap.h
d1122 3
a1124 3
  $(INCDIR)/bfdlink.h $(INCDIR)/coff/internal.h $(INCDIR)/coff/xcoff.h \
  $(INCDIR)/coff/rs6000.h libcoff.h libxcoff.h coffcode.h \
  coffswap.h
d1126 1
a1126 3
  $(INCDIR)/bfdlink.h $(INCDIR)/coff/sh.h $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h libcoff.h coffcode.h coffswap.h
coff-sparc.lo: coff-sparc.c $(INCDIR)/filenames.h $(INCDIR)/coff/sparc.h \
d1128 3
d1133 4
a1136 3
  $(INCDIR)/coff/i386.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/go32exe.h libcoff.h $(INCDIR)/bfdlink.h \
  coffcode.h coffswap.h go32stub.h
d1138 9
a1146 8
  $(INCDIR)/coff/m68k.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h coffswap.h
coff-tic30.lo: coff-tic30.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/tic30.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  libcoff.h coffcode.h coffswap.h
coff-tic4x.lo: coff-tic4x.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/tic4x.h $(INCDIR)/coff/ti.h $(INCDIR)/coff/internal.h \
  libcoff.h coffcode.h coffswap.h
d1148 5
a1152 1
  $(INCDIR)/bfdlink.h $(INCDIR)/coff/tic54x.h $(INCDIR)/coff/ti.h \
a1153 3
coff-tic80.lo: coff-tic80.c $(INCDIR)/bfdlink.h $(INCDIR)/filenames.h \
  $(INCDIR)/coff/tic80.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  libcoff.h coffcode.h coffswap.h
d1155 5
a1159 1
  $(INCDIR)/coff/m68k.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
d1161 6
a1166 9
coff-we32k.lo: coff-we32k.c $(INCDIR)/filenames.h $(INCDIR)/coff/we32k.h \
  $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h coffswap.h
coff-w65.lo: coff-w65.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/w65.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  libcoff.h coffcode.h coffswap.h
coff-z8k.lo: coff-z8k.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/z8k.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  libcoff.h coffcode.h coffswap.h
d1168 2
a1169 1
  $(INCDIR)/coff/internal.h libcoff.h $(INCDIR)/safe-ctype.h
d1171 3
a1173 2
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/dwarf.h
d1175 5
a1179 4
  $(INCDIR)/aout/ar.h $(INCDIR)/aout/ranlib.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def libaout.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/sym.h $(INCDIR)/coff/symconst.h \
  $(INCDIR)/coff/ecoff.h libcoff.h libecoff.h
d1181 4
a1184 3
  $(INCDIR)/objalloc.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/sym.h $(INCDIR)/coff/symconst.h \
  $(INCDIR)/coff/ecoff.h libcoff.h libecoff.h
d1186 4
a1189 3
  coff-i386.c $(INCDIR)/coff/i386.h $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h libcoff.h \
  $(INCDIR)/bfdlink.h coffcode.h peicode.h libpei.h
d1191 2
a1192 2
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/libiberty.h
d1194 5
d1200 3
a1202 6
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/mn10300.h \
  $(INCDIR)/elf/reloc-macros.h elf32-target.h
elf32-arc.lo: elf32-arc.c $(INCDIR)/filenames.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/elf/arc.h $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/libiberty.h elf32-target.h
d1204 1
a1204 4
  $(INCDIR)/filenames.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
  elf32-target.h
elf32-avr.lo: elf32-avr.c $(INCDIR)/filenames.h elf-bfd.h \
d1206 5
a1210 2
  $(INCDIR)/bfdlink.h $(INCDIR)/elf/avr.h $(INCDIR)/elf/reloc-macros.h \
  elf32-target.h
d1212 4
a1215 1
  $(INCDIR)/bfdlink.h $(INCDIR)/elf/cr16c.h $(INCDIR)/elf/reloc-macros.h \
d1217 2
a1218 5
  $(INCDIR)/elf/external.h elf32-target.h
elf32-cris.lo: elf32-cris.c $(INCDIR)/filenames.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/elf/cris.h $(INCDIR)/elf/reloc-macros.h \
  elf32-target.h
d1220 8
d1229 14
a1242 1
  $(INCDIR)/elf/external.h $(INCDIR)/elf/crx.h $(INCDIR)/elf/reloc-macros.h \
d1244 3
a1246 23
elf32-d10v.lo: elf32-d10v.c $(INCDIR)/filenames.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/elf/d10v.h $(INCDIR)/elf/reloc-macros.h \
  elf32-target.h
elf32-d30v.lo: elf32-d30v.c $(INCDIR)/filenames.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/elf/d30v.h $(INCDIR)/elf/reloc-macros.h \
  elf32-target.h
elf32-dlx.lo: elf32-dlx.c $(INCDIR)/filenames.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/elf/dlx.h $(INCDIR)/elf/reloc-macros.h \
  elf32-target.h
elf32-fr30.lo: elf32-fr30.c $(INCDIR)/filenames.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/elf/fr30.h $(INCDIR)/elf/reloc-macros.h \
  elf32-target.h
elf32-frv.lo: elf32-frv.c $(INCDIR)/filenames.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/elf/frv.h $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/elf/dwarf2.h $(INCDIR)/hashtab.h elf32-target.h
elf32-gen.lo: elf32-gen.c $(INCDIR)/filenames.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h elf32-target.h
d1248 17
d1266 1
a1266 1
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/h8.h \
d1268 1
a1268 5
elf32-hppa.lo: elf32-hppa.c $(INCDIR)/filenames.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/elf/hppa.h $(INCDIR)/elf/reloc-macros.h \
  libhppa.h elf32-hppa.h elf-hppa.h elf32-target.h
elf32-i370.lo: elf32-i370.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
d1270 3
a1272 3
  $(INCDIR)/elf/external.h $(INCDIR)/elf/i370.h $(INCDIR)/elf/reloc-macros.h \
  elf32-target.h
elf32-i386.lo: elf32-i386.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
d1274 6
a1279 5
  $(INCDIR)/elf/external.h $(INCDIR)/elf/i386.h $(INCDIR)/elf/reloc-macros.h \
  elf32-target.h
elf32-i860.lo: elf32-i860.c $(INCDIR)/filenames.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/elf/i860.h $(INCDIR)/elf/reloc-macros.h \
d1281 1
a1281 9
elf32-i960.lo: elf32-i960.c $(INCDIR)/filenames.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/elf/i960.h $(INCDIR)/elf/reloc-macros.h \
  elf32-target.h
elf32-ip2k.lo: elf32-ip2k.c $(INCDIR)/filenames.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/elf/ip2k.h $(INCDIR)/elf/reloc-macros.h \
  elf32-target.h
elf32-iq2000.lo: elf32-iq2000.c $(INCDIR)/filenames.h \
d1283 1
a1283 1
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/iq2000.h \
a1284 4
elf32-m32r.lo: elf32-m32r.c $(INCDIR)/filenames.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/elf/m32r.h $(INCDIR)/elf/reloc-macros.h \
  elf32-target.h
d1286 3
a1288 3
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/elf/m68k.h $(INCDIR)/elf/reloc-macros.h \
  elf32-target.h
d1290 1
a1290 1
  $(INCDIR)/bfdlink.h elf-bfd.h $(INCDIR)/elf/common.h \
d1295 1
a1295 1
  $(INCDIR)/bfdlink.h elf-bfd.h $(INCDIR)/elf/common.h \
d1300 1
a1300 1
  $(INCDIR)/bfdlink.h elf-bfd.h $(INCDIR)/elf/common.h \
d1304 10
a1313 10
elf32-m88k.lo: elf32-m88k.c $(INCDIR)/filenames.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h elf32-target.h
elf-m10200.lo: elf-m10200.c $(INCDIR)/filenames.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h elf32-target.h
elf-m10300.lo: elf-m10300.c $(INCDIR)/filenames.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/elf/mn10300.h $(INCDIR)/elf/reloc-macros.h \
  elf32-target.h
d1315 1
a1315 1
  $(INCDIR)/bfdlink.h elf-bfd.h $(INCDIR)/elf/common.h \
d1318 9
a1326 3
elfxx-mips.lo: elfxx-mips.c $(INCDIR)/filenames.h $(INCDIR)/libiberty.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h elfxx-mips.h \
d1328 3
a1330 8
  $(INCDIR)/coff/symconst.h $(INCDIR)/coff/ecoff.h $(INCDIR)/coff/mips.h \
  $(INCDIR)/coff/external.h $(INCDIR)/hashtab.h
elf32-mips.lo: elf32-mips.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  genlink.h elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h elfxx-mips.h $(INCDIR)/elf/mips.h \
  $(INCDIR)/elf/reloc-macros.h $(INCDIR)/coff/sym.h $(INCDIR)/coff/symconst.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/ecoff.h $(INCDIR)/coff/mips.h \
  $(INCDIR)/coff/external.h ecoffswap.h elf32-target.h
d1332 3
a1334 3
  $(INCDIR)/libiberty.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/msp430.h $(INCDIR)/elf/reloc-macros.h \
d1337 5
d1343 1
a1343 1
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/openrisc.h \
a1345 4
elf32-or32.lo: elf32-or32.c $(INCDIR)/filenames.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/elf/or32.h $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/libiberty.h elf32-target.h
d1347 3
a1349 3
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/elf/pj.h $(INCDIR)/elf/reloc-macros.h \
  elf32-target.h
d1351 3
a1353 3
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/elf/ppc.h $(INCDIR)/elf/reloc-macros.h \
  elf32-ppc.h elf32-target.h
d1357 3
a1359 3
  elf32-sh64.h elf32-sh.c $(INCDIR)/elf/sh.h $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/libiberty.h $(srcdir)/../opcodes/sh-opc.h \
  elf32-target.h
d1361 4
a1364 3
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/sh.h \
  $(INCDIR)/elf/reloc-macros.h elf32-sh64.h $(srcdir)/../opcodes/sh64-opc.h
d1366 3
a1368 3
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/elf/s390.h $(INCDIR)/elf/reloc-macros.h \
  elf32-target.h
d1370 6
a1379 5
elf32-sh-symbian.lo: elf32-sh-symbian.c elf32-sh.c \
  $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/sh.h $(INCDIR)/elf/reloc-macros.h $(INCDIR)/libiberty.h \
  $(srcdir)/../opcodes/sh-opc.h elf32-target.h
d1381 1
a1381 1
  $(INCDIR)/bfdlink.h elf-bfd.h $(INCDIR)/elf/common.h \
d1386 4
a1389 3
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/elf/v850.h $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/libiberty.h elf32-target.h
d1391 3
a1393 3
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/elf/vax.h $(INCDIR)/elf/reloc-macros.h \
  elf32-target.h
d1395 4
a1398 4
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/xstormy16.h \
  $(INCDIR)/elf/reloc-macros.h $(INCDIR)/libiberty.h \
  elf32-target.h
d1400 1
a1400 1
  $(INCDIR)/bfdlink.h elf-bfd.h $(INCDIR)/elf/common.h \
d1405 1
a1405 1
  $(INCDIR)/bfdlink.h elf-bfd.h $(INCDIR)/elf/common.h \
d1408 4
d1413 1
a1413 4
  $(INCDIR)/elf/external.h $(INCDIR)/safe-ctype.h $(INCDIR)/libiberty.h
elf-strtab.lo: elf-strtab.c $(INCDIR)/filenames.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/hashtab.h $(INCDIR)/libiberty.h
d1415 3
a1417 2
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/dwarf2.h
d1419 4
a1422 3
  coff-arm.c $(INCDIR)/coff/arm.h $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h libcoff.h \
  $(INCDIR)/bfdlink.h coffcode.h peicode.h libpei.h
d1424 6
a1429 5
  coff-arm.c $(INCDIR)/coff/arm.h $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h libcoff.h \
  $(INCDIR)/bfdlink.h coffcode.h peicode.h libpei.h
hp300bsd.lo: hp300bsd.c $(INCDIR)/filenames.h libaout.h \
  $(INCDIR)/bfdlink.h aout-target.h $(INCDIR)/aout/aout64.h \
d1433 1
a1433 1
  $(INCDIR)/bfdlink.h libaout.h $(INCDIR)/aout/aout64.h \
d1437 6
a1442 5
i386aout.lo: i386aout.c $(INCDIR)/filenames.h $(INCDIR)/aout/aout64.h \
  libaout.h $(INCDIR)/bfdlink.h aout-target.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
i386bsd.lo: i386bsd.c $(INCDIR)/filenames.h libaout.h \
  $(INCDIR)/bfdlink.h aout-target.h $(INCDIR)/aout/aout64.h \
d1446 3
a1448 2
  libaout.h $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h aout-target.h
d1450 12
a1461 10
  libaout.h $(INCDIR)/bfdlink.h aout-target.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
i386linux.lo: i386linux.c $(INCDIR)/filenames.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h \
  libaout.h $(INCDIR)/bfdlink.h aout-target.h
i386lynx.lo: i386lynx.c $(INCDIR)/filenames.h libaout.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/aout/aout64.h aout-target.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
i386msdos.lo: i386msdos.c $(INCDIR)/filenames.h libaout.h \
  $(INCDIR)/bfdlink.h
d1463 10
a1472 9
  libaout.h $(INCDIR)/bfdlink.h aout-target.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
i386mach3.lo: i386mach3.c $(INCDIR)/filenames.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h \
  libaout.h $(INCDIR)/bfdlink.h aout-target.h
i386os9k.lo: i386os9k.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  libaout.h $(INCDIR)/os9k.h
ieee.lo: ieee.c $(INCDIR)/filenames.h $(INCDIR)/ieee.h \
  libieee.h $(INCDIR)/safe-ctype.h
d1474 10
a1483 8
  libaout.h $(INCDIR)/bfdlink.h aout-target.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
m68klinux.lo: m68klinux.c $(INCDIR)/filenames.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h \
  libaout.h $(INCDIR)/bfdlink.h aout-target.h
m68klynx.lo: m68klynx.c $(INCDIR)/filenames.h libaout.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/aout/aout64.h aout-target.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
d1485 4
a1490 3
m88kmach3.lo: m88kmach3.c $(INCDIR)/filenames.h libaout.h \
  $(INCDIR)/bfdlink.h aout-target.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
d1492 6
d1500 4
a1503 11
mach-o.lo: mach-o.c mach-o.h $(INCDIR)/filenames.h \
  $(INCDIR)/libiberty.h mach-o-target.c
mipsbsd.lo: mipsbsd.c $(INCDIR)/filenames.h libaout.h \
  $(INCDIR)/bfdlink.h aout-target.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
newsos3.lo: newsos3.c $(INCDIR)/filenames.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h \
  libaout.h $(INCDIR)/bfdlink.h aout-target.h
nlm.lo: nlm.c $(INCDIR)/filenames.h libnlm.h $(INCDIR)/nlm/common.h \
  $(INCDIR)/nlm/internal.h $(INCDIR)/nlm/external.h
nlm32-i386.lo: nlm32-i386.c $(INCDIR)/filenames.h $(INCDIR)/nlm/i386-ext.h \
d1505 5
a1509 1
  $(INCDIR)/nlm/external.h nlmswap.h nlm-target.h
d1511 5
a1515 1
  $(INCDIR)/nlm/sparc32-ext.h libnlm.h $(INCDIR)/nlm/common.h \
d1518 1
a1518 1
nlm32-ppc.lo: nlm32-ppc.c $(INCDIR)/filenames.h $(INCDIR)/nlm/ppc-ext.h \
d1520 1
a1520 3
  $(INCDIR)/nlm/external.h nlmswap.h nlm-target.h
nlm32.lo: nlm32.c nlmcode.h $(INCDIR)/filenames.h libnlm.h \
  $(INCDIR)/nlm/common.h $(INCDIR)/nlm/internal.h $(INCDIR)/nlm/external.h
d1522 3
a1524 2
  libaout.h $(INCDIR)/bfdlink.h aout-target.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
d1526 1
a1526 1
  $(INCDIR)/oasys.h liboasys.h
d1528 7
a1534 5
  $(INCDIR)/bfdlink.h $(INCDIR)/aout/aout64.h aout-target.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
pdp11.lo: pdp11.c $(INCDIR)/filenames.h libaout.h $(INCDIR)/bfdlink.h \
  aout-target.h $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h $(INCDIR)/safe-ctype.h
d1536 1
a1536 1
  $(INCDIR)/filenames.h $(INCDIR)/libiberty.h
d1538 3
a1540 3
  $(INCDIR)/coff/arm.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/pe.h libcoff.h $(INCDIR)/bfdlink.h coffcode.h \
  peicode.h libpei.h
d1542 3
a1544 3
  $(INCDIR)/coff/arm.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/pe.h libcoff.h $(INCDIR)/bfdlink.h coffcode.h \
  peicode.h libpei.h
d1546 3
a1548 3
  $(INCDIR)/coff/i386.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/pe.h libcoff.h $(INCDIR)/bfdlink.h coffcode.h \
  peicode.h libpei.h
d1550 3
a1552 3
  $(INCDIR)/coff/i386.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/pe.h libcoff.h $(INCDIR)/bfdlink.h coffcode.h \
  peicode.h libpei.h
d1554 3
a1556 3
  $(INCDIR)/coff/mcore.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/pe.h libcoff.h $(INCDIR)/bfdlink.h coffcode.h \
  peicode.h libpei.h
d1558 3
a1560 3
  $(INCDIR)/coff/mcore.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/pe.h libcoff.h $(INCDIR)/bfdlink.h coffcode.h \
  peicode.h libpei.h
d1562 1
a1562 1
  $(INCDIR)/coff/powerpc.h $(INCDIR)/coff/external.h \
d1566 1
a1566 1
  $(INCDIR)/coff/powerpc.h $(INCDIR)/coff/external.h \
d1570 4
a1573 3
  $(INCDIR)/bfdlink.h $(INCDIR)/coff/sh.h $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h libcoff.h \
  coffcode.h peicode.h libpei.h
d1575 2
a1576 2
  $(INCDIR)/libiberty.h $(INCDIR)/bfdlink.h $(INCDIR)/coff/sh.h \
  $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
d1579 2
a1580 2
pe-mips.lo: pe-mips.c $(INCDIR)/filenames.h $(INCDIR)/coff/mipspe.h \
  $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
d1584 9
a1592 13
  $(INCDIR)/coff/mipspe.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/pe.h libcoff.h $(INCDIR)/bfdlink.h coffcode.h \
  peicode.h libpei.h
ppcboot.lo: ppcboot.c $(INCDIR)/safe-ctype.h $(INCDIR)/filenames.h
reloc16.lo: reloc16.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  genlink.h $(INCDIR)/coff/internal.h libcoff.h
riscix.lo: riscix.c $(INCDIR)/filenames.h libaout.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/aout/aout64.h aout-target.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
sparclinux.lo: sparclinux.c $(INCDIR)/filenames.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h \
  libaout.h $(INCDIR)/bfdlink.h aout-target.h
sparclynx.lo: sparclynx.c $(INCDIR)/filenames.h $(INCDIR)/aout/sun4.h \
d1594 9
a1602 2
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h \
  aout-target.h
d1604 3
a1606 2
  libaout.h $(INCDIR)/bfdlink.h aout-target.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
d1608 3
a1610 3
  $(INCDIR)/filenames.h $(INCDIR)/aout/sun4.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h \
  aout-target.h
d1612 3
a1614 2
  libaout.h $(INCDIR)/bfdlink.h aout-target.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
d1616 4
d1622 2
a1623 4
vaxbsd.lo: vaxbsd.c $(INCDIR)/filenames.h libaout.h \
  $(INCDIR)/bfdlink.h aout-target.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
versados.lo: versados.c $(INCDIR)/filenames.h $(INCDIR)/libiberty.h
d1625 1
a1625 1
  vms.h
d1627 3
a1630 2
vms-hdr.lo: vms-hdr.c bfdver.h $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/safe-ctype.h vms.h
d1632 1
a1632 1
  vms.h
d1634 1
a1634 1
  vms.h
d1636 5
a1640 5
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/xcoff.h libcoff.h \
  libxcoff.h
xsym.lo: xsym.c xsym.h $(INCDIR)/filenames.h
xtensa-isa.lo: xtensa-isa.c $(INCDIR)/filenames.h $(INCDIR)/xtensa-isa.h \
  $(INCDIR)/xtensa-isa-internal.h
d1645 1
a1645 1
  $(INCDIR)/bfdlink.h libaout.h $(INCDIR)/aout/aout64.h \
d1648 4
a1651 3
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/sym.h $(INCDIR)/coff/symconst.h \
  $(INCDIR)/coff/ecoff.h $(INCDIR)/coff/alpha.h $(INCDIR)/aout/ar.h \
  libcoff.h libecoff.h coffswap.h ecoffswap.h
d1653 3
a1655 3
  $(INCDIR)/bfdlink.h $(INCDIR)/coff/internal.h $(INCDIR)/coff/xcoff.h \
  $(INCDIR)/coff/rs6k64.h libcoff.h libxcoff.h coffcode.h \
  coffswap.h
d1657 3
a1659 3
  $(INCDIR)/aout/sun4.h libaout.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/ar.h aout-target.h
d1661 4
a1664 3
  coff-ia64.c $(INCDIR)/coff/ia64.h $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h libcoff.h \
  $(INCDIR)/bfdlink.h coffcode.h peicode.h libpei.h
d1666 1
a1666 1
  $(INCDIR)/bfdlink.h elf-bfd.h $(INCDIR)/elf/common.h \
d1670 6
a1675 6
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/alpha.h \
  $(INCDIR)/elf/reloc-macros.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/sym.h $(INCDIR)/coff/symconst.h $(INCDIR)/coff/ecoff.h \
  $(INCDIR)/coff/alpha.h $(INCDIR)/aout/ar.h libcoff.h \
  libecoff.h ecoffswap.h elf64-target.h
d1677 1
a1677 5
  $(INCDIR)/filenames.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/hppa.h $(INCDIR)/elf/reloc-macros.h libhppa.h \
  elf64-hppa.h elf-hppa.h elf64-target.h
elf64-gen.lo: elf64-gen.c $(INCDIR)/filenames.h elf-bfd.h \
d1679 5
a1683 1
  $(INCDIR)/bfdlink.h elf64-target.h
d1685 4
a1688 4
  $(INCDIR)/bfdlink.h genlink.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h elfxx-mips.h \
  $(INCDIR)/elf/mips.h $(INCDIR)/elf/reloc-macros.h $(INCDIR)/coff/sym.h \
  $(INCDIR)/coff/symconst.h $(INCDIR)/coff/internal.h \
d1691 5
a1695 5
elf64-mips.lo: elf64-mips.c $(INCDIR)/filenames.h $(INCDIR)/aout/ar.h \
  $(INCDIR)/bfdlink.h genlink.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h elfxx-mips.h \
  $(INCDIR)/elf/mips.h $(INCDIR)/elf/reloc-macros.h $(INCDIR)/coff/sym.h \
  $(INCDIR)/coff/symconst.h $(INCDIR)/coff/internal.h \
d1698 5
a1702 4
elf64-mmix.lo: elf64-mmix.c $(INCDIR)/filenames.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/elf/mmix.h $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/opcode/mmix.h elf64-target.h
d1704 3
a1706 3
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/elf/ppc64.h $(INCDIR)/elf/reloc-macros.h \
  elf64-ppc.h elf64-target.h
d1708 3
a1710 3
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/elf/s390.h $(INCDIR)/elf/reloc-macros.h \
  elf64-target.h
d1712 3
a1714 3
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/elf/sh.h $(INCDIR)/elf/reloc-macros.h \
  elf64-target.h
d1716 3
a1718 3
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/opcode/sparc.h \
  $(INCDIR)/elf/sparc.h $(INCDIR)/elf/reloc-macros.h \
d1721 1
a1721 1
  $(INCDIR)/bfdlink.h elf-bfd.h $(INCDIR)/elf/common.h \
d1723 3
a1725 2
mmo.lo: mmo.c $(INCDIR)/filenames.h $(INCDIR)/libiberty.h \
  $(INCDIR)/elf/mmix.h $(INCDIR)/elf/reloc-macros.h $(INCDIR)/opcode/mmix.h
d1727 6
a1732 5
  $(INCDIR)/nlm/alpha-ext.h libnlm.h $(INCDIR)/nlm/common.h \
  $(INCDIR)/nlm/internal.h $(INCDIR)/nlm/external.h nlmswap.h \
  nlm-target.h
nlm64.lo: nlm64.c nlmcode.h $(INCDIR)/filenames.h libnlm.h \
  $(INCDIR)/nlm/common.h $(INCDIR)/nlm/internal.h $(INCDIR)/nlm/external.h
d1734 15
a1748 15
  $(INCDIR)/coff/i386.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  libcoff.h $(INCDIR)/bfdlink.h
hpux-core.lo: hpux-core.c $(INCDIR)/filenames.h
irix-core.lo: irix-core.c $(INCDIR)/filenames.h
lynx-core.lo: lynx-core.c $(INCDIR)/filenames.h
osf-core.lo: osf-core.c $(INCDIR)/filenames.h
sco5-core.lo: sco5-core.c $(INCDIR)/filenames.h libaout.h \
  $(INCDIR)/bfdlink.h
trad-core.lo: trad-core.c $(INCDIR)/filenames.h libaout.h \
  $(INCDIR)/bfdlink.h
cisco-core.lo: cisco-core.c $(INCDIR)/filenames.h
elf32-ia64.lo: elf32-ia64.c $(INCDIR)/filenames.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/opcode/ia64.h $(INCDIR)/elf/ia64.h \
  $(INCDIR)/elf/reloc-macros.h $(INCDIR)/objalloc.h $(INCDIR)/hashtab.h \
d1750 4
a1753 4
elf64-ia64.lo: elf64-ia64.c $(INCDIR)/filenames.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/opcode/ia64.h $(INCDIR)/elf/ia64.h \
  $(INCDIR)/elf/reloc-macros.h $(INCDIR)/objalloc.h $(INCDIR)/hashtab.h \
d1755 6
a1760 6
peigen.lo: peigen.c $(INCDIR)/filenames.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/i386.h $(INCDIR)/coff/external.h $(INCDIR)/coff/pe.h \
  libcoff.h $(INCDIR)/bfdlink.h libpei.h
pepigen.lo: pepigen.c $(INCDIR)/filenames.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/ia64.h $(INCDIR)/coff/external.h $(INCDIR)/coff/pe.h \
  libcoff.h $(INCDIR)/bfdlink.h libpei.h
@


1.149
log
@bfd/
2005-03-02  Jan Beulich  <jbeulich@@novell.com>

	* Makefile.am: Add dependency of cache.o on libiberty.h.
	* cache.c: Include libiberty.h.
	(bfd_open_file): Use unlink_if_ordinary instead of unlink.

binutils/
2005-03-02  Jan Beulich  <jbeulich@@novell.com>

	* ar.c (remove_output): Use unlink_if_ordinary instead of unlink.
	* objcopy.c (copy_file): Likewise.
	(strip_main): Likewise.

gas/
2005-03-02  Jan Beulich  <jbeulich@@novell.com>

	* as.c (main): Use unlink_if_ordinary instead of unlink.
	* messages.c (as_fatal): Likewise.

ld/
2005-03-02  Jan Beulich  <jbeulich@@novell.com>

	* ldmain.c (remove_output): Use unlink_if_ordinary instead of unlink.
	* pe-dll.c (pe_dll_generate_implib): Likewise.
@
text
@a239 1
	elf32-ia64.lo \
d511 2
d523 1
@


1.149.2.1
log
@	* Makefile.am: Set RELEASE.
	* configure.in: Bump version to 2.16.
	* Makefile.in, configure: Regenerated.
@
text
@d6 1
a6 1
RELEASE=y
@


1.149.2.2
log
@	* Makefile.am: Clear RELEASE.
	* Makefile.in: Regenerated.
@
text
@d6 1
a6 1
# RELEASE=y
@


1.149.2.3
log
@	* Makefile.am: Set RELEASE.
	* configure.in: Bump version to 2.16.1.
	* Makefile.in, configure: Regenerated.
@
text
@d6 1
a6 1
RELEASE=y
@


1.149.2.4
log
@	* Makefile.am: Clear RELEASE.
	* Makefile.in: Regenerated.
@
text
@d6 1
a6 1
# RELEASE=y
@


1.148
log
@bfd/
	* Makefile.am: Run "make dep-am"
	* Makefile.in: Regenerate.
bfd/doc/
	* Makefile.in: Regenerate.
@
text
@d906 1
a906 1
cache.lo: cache.c $(INCDIR)/filenames.h
@


1.147
log
@	* Makefile.am (SOURCE_HFILES): Remove elf32-arm.h.
	(ALL_MACHINES_CFILES): Fix typo.
	* Makefile.in: Regenerate.
	* po/SRC-POTFILES.in: Regenerate.
@
text
@d973 1
a974 1
cpu-maxq.lo: cpu-maxq.c $(INCDIR)/filenames.h
d1084 2
a1085 1
  $(INCDIR)/coff/internal.h libcoff.h $(INCDIR)/libiberty.h \
@


1.146
log
@Add support fpr MAXQ processor
@
text
@d144 1
a144 1
	cpu-mawq.c \
d615 1
a615 1
	elf-bfd.h elf-hppa.h elf32-arm.h elf32-hppa.h \
@


1.145
log
@./
	* configure.in (arm-*-oabi*, thumb-*-oabi*): Remove.
	* configure: Regenerated.
bfd/
	* Makefile.am (BFD32_BACKENDS, BFD32_BACKENDS_CFILES): Replace
	elfarm-nabi with elf32-arm.  Remove elfarm-oabi.
	(elf32-arm.lo): Replace elfarm-nabi.lo rule.  Remove elf32-arm.h
	dependency.
	* config.bfd: Move arm-*-oabi* and thumb-*-oabi* from obsolete list
	to a new removed list.  Remove normal configuration stanzas.
	* configure.in: (bfd_elf32_bigarm_vec, bfd_elf32_bigarm_symbian_vec)
	(bfd_elf32_littlearm_symbian_vec, bfd_elf32_littlearm_vec): Replace
	elfarm-nabi.lo with elf32-arm.lo.
	(bfd_elf32_bigarm_oabi_vec, bfd_elf32_littlearm_oabi_vec): Remove.
	* elf32-arm.c: Renamed from elfarm-nabi.c.  Inline elf32-arm.h.
	* elf32-arm.h: Remove.
	* elfarm-oabi.c: Remove.
	* targets.c (_bfd_target_vector): Remove bfd_elf32_bigarm_oabi_vec
	and bfd_elf32_littlearm_oabi_vec.
	* aclocal.m4, Makefile.in, configure, doc/Makefile.in: Regenerated.
gas/
	* configure.in: Remove arm-*-oabi and thumb-*-oabi.
	* config/tc-arm.c (target_oabi): Delete.
	(md_apply_fix3, elf32_arm_target_format): Remove target_oabi checks.
	(arm_opts): Remove moabi.
	* doc/as.texinfo (Overview): Remove documentation of -moabi.
	* doc/c-arm.texi (ARM Options): Likewise.
	* configure: Regenerated.
ld/
	* Makefile.am (ALL_EMULATIONS): Remove earmelf_oabi.o.
	(earmelf_oabi.c): Remove rule.
	* configure.tgt: Remove arm-*-oabi and thumb-*-oabi.
	* emulparams/armelf_oabi.sh, emultempl/armelf_oabi.em: Delete files.
	* Makefile.in: Regenerated.
@
text
@d86 1
d144 1
d199 1
d368 1
d974 1
d1083 3
@


1.144
log
@	* config.bfd: Whitespace cleanup.
	* Makefile.am: Run "make dep-am"
	* Makefile.in: Regenerate.
@
text
@d220 1
a220 2
	elfarm-oabi.lo \
	elfarm-nabi.lo \
d388 1
a388 2
	elfarm-oabi.c \
	elfarm-nabi.c \
d1155 1
a1155 1
elfarm-oabi.lo: elfarm-oabi.c $(INCDIR)/elf/arm.h $(INCDIR)/elf/reloc-macros.h \
d1158 1
a1158 5
  elf32-arm.h elf32-target.h
elfarm-nabi.lo: elfarm-nabi.c $(INCDIR)/elf/arm.h $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/filenames.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
  elf32-arm.h elf32-target.h
@


1.143
log
@bfd ChangeLog

	* elf32-xtensa.c (elf32xtensa_size_opt): New global variable.
	(xtensa_default_isa): Global variable moved here from xtensa-isa.c.
	(elf32xtensa_no_literal_movement): New global variable.
	(elf_howto_table): Add entries for new relocations.
	(elf_xtensa_reloc_type_lookup): Handle new relocations.
	(property_table_compare): When addresses are equal, compare sizes and
	various property flags.
	(property_table_matches): New.
	(xtensa_read_table_entries): Extend to read new property tables.  Add
	output_addr parameter to indicate that output addresses should be used.
	Use bfd_get_section_limit.
	(elf_xtensa_find_property_entry): New.
	(elf_xtensa_in_literal_pool): Use elf_xtensa_find_property_entry.
	(elf_xtensa_check_relocs): Handle new relocations.
	(elf_xtensa_do_reloc): Use bfd_get_section_limit.  Handle new
	relocations.  Use new xtensa-isa.h functions.
	(build_encoding_error_message): Remove encode_result parameter.  Add
	new target_address parameter used to detect alignment errors.
	(elf_xtensa_relocate_section): Use bfd_get_section_limit.  Clean up
	error handling.  Use new is_operand_relocation function.
	(elf_xtensa_combine_prop_entries, elf_xtensa_merge_private_bfd_data):
	Use underbar macro for error messages.  Formatting.
	(get_const16_opcode): New.
	(get_l32r_opcode): Add a separate flag for initialization.
	(get_relocation_opnd): Operand number is no longer explicit in the
	relocation.  Change to decode the opcode and analyze its operands.
	(get_relocation_slot): New.
	(get_relocation_opcode): Add bfd parameter.  Use bfd_get_section_limit.
	Use new xtensa-isa.h functions to handle multislot instructions.
	(is_l32r_relocation): Add bfd parameter.  Use is_operand_relocation.
	(get_asm_simplify_size, is_alt_relocation, is_operand_relocation,
	insn_decode_len, insn_decode_opcode, check_branch_target_aligned,
	check_loop_aligned, check_branch_target_aligned_address, narrowable,
	widenable, narrow_instruction, widen_instruction, op_single_fmt_table,
	get_single_format, init_op_single_format_table): New.
	(elf_xtensa_do_asm_simplify): Add error_message parameter and use it
	instead of calling _bfd_error_handler.  Use new xtensa-isa.h functions.
	(contract_asm_expansion): Add error_message parameter and pass it to
	elf_xtensa_do_asm_simplify.  Replace use of R_XTENSA_OP0 relocation
	with R_XTENSA_SLOT0_OP.
	(get_expanded_call_opcode): Extend to handle either L32R or CONST16
	instructions.  Use new xtensa-isa.h functions.
	(r_reloc struct): Add new virtual_offset field.
	(r_reloc_init): Add contents and content_length parameters.  Set
	virtual_offset field to zero.  Add contents to target_offset field for
	partial_inplace relocations.
	(r_reloc_is_defined): Check for null.
	(print_r_reloc): New debug function.
	(source_reloc struct): Replace xtensa_operand field with pair of the
	opcode and the operand position.  Add is_abs_literal field.
	(init_source_reloc): Specify operand by opcode/position pair.  Set
	is_abs_literal field.
	(source_reloc_compare): When target_offsets are equal, compare other
	fields to make sorting predictable.
	(literal_value struct): Add is_abs_literal field.
	(value_map_hash_table struct): Add has_last_loc and last_loc fields.
	(init_literal_value): New.
	(is_same_value): Replace with ...
	(literal_value_equal): ... this function.  Add comparisons of
	virtual_offset and is_abs_literal fields.
	(value_map_hash_table_init): Use bfd_zmalloc.  Check for allocation
	failure.  Initialize has_last_loc field.
	(value_map_hash_table_delete): New.
	(hash_literal_value): Rename to ...
	(literal_value_hash): ... this.  Include is_abs_literal flag and
	virtual_offset field in the hash value.
	(get_cached_value): Rename to ...
	(value_map_get_cached_value): ... this.  Update calls to
	literal_value_hash and literal_value_equal.
	(add_value_map): Check for allocation failure.  Update calls to
	value_map_get_cached_value and literal_value_hash.
	(text_action, text_action_list, text_action_t): New types.
	(find_fill_action, compute_removed_action_diff, adjust_fill_action,
	text_action_add, text_action_add_literal, offset_with_removed_text,
	offset_with_removed_text_before_fill, find_insn_action,
	print_action_list, print_removed_literals): New.
	(offset_with_removed_literals): Delete.
	(xtensa_relax_info struct): Add is_relaxable_asm_section, action_list,
	fix_array, fix_array_count, allocated_relocs, relocs_count, and
	allocated_relocs_count fields.
	(init_xtensa_relax_info): Initialize new fields.
	(reloc_bfd_fix struct): Add new translated field.
	(reloc_bfd_fix_init): Add translated parameter and use it to set the
	translated field.
	(fix_compare, cache_fix_array): New.
	(get_bfd_fix): Remove fix_list parameter and get all relax_info for the
	section via get_xtensa_relax_info.  Use cache_fix_array to set up
	sorted fix_array and use bsearch instead of linear search.
	(section_cache_t): New struct.
	(init_section_cache, section_cache_section, clear_section_cache): New.
	(ebb_t, ebb_target_enum, proposed_action, ebb_constraint): New types.
	(init_ebb_constraint, free_ebb_constraint, init_ebb, extend_ebb_bounds,
	extend_ebb_bounds_forward, extend_ebb_bounds_backward,
	insn_block_decodable_len, ebb_propose_action, ebb_add_proposed_action):
	New.
	(retrieve_contents): Use bfd_get_section_limit.
	(elf_xtensa_relax_section): Add relocations_analyzed flag.  Update call
	to compute_removed_literals.  Free value_map_hash_table when no longer
	needed.
	(analyze_relocations): Check is_relaxable_asm_section flag.  Call
	compute_text_actions for all sections.
	(find_relaxable_sections): Mark sections as relaxable if they contain
	ASM_EXPAND relocations that can be optimized.  Adjust r_reloc_init
	call.  Increment relax_info src_count field only for appropriate
	relocation types.  Remove is_literal_section check.
	(collect_source_relocs): Use bfd_get_section_limit.  Adjust calls to
	r_reloc_init and find_associated_l32r_irel.  Check
	is_relaxable_asm_section flag.  Handle L32R instructions with absolute
	literals.  Pass is_abs_literal flag to init_source_reloc.
	(is_resolvable_asm_expansion): Use bfd_get_section_limit.  Check for
	CONST16 instructions.  Adjust calls to r_reloc_init and
	pcrel_reloc_fits.  Handle weak symbols conservatively.
	(find_associated_l32r_irel): Add bfd parameter and pass it to
	is_l32r_relocation.
	(compute_text_actions, compute_ebb_proposed_actions,
	compute_ebb_actions, check_section_ebb_pcrels_fit,
	check_section_ebb_reduces, text_action_add_proposed,
	compute_fill_extra_space): New.
	(remove_literals): Replace with ...
	(compute_removed_literals): ... this function.  Call
	init_section_cache.  Use bfd_get_section_limit.  Sort internal_relocs.
	Call xtensa_read_table_entries to get the property table.  Skip
	relocations other than R_XTENSA_32 and R_XTENSA_PLT.  Use new
	is_removable_literal, remove_dead_literal, and
	identify_literal_placement functions.
	(get_irel_at_offset): Rewrite to use bsearch on sorted relocations
	instead of linear search.
	(is_removable_literal, remove_dead_literal,
	identify_literal_placement): New.
	(relocations_reach): Update check for literal not referenced by any
	PC-relative relocations.  Adjust call to pcrel_reloc_fits.
	(coalesce_shared_literal, move_shared_literal): New.
	(relax_section): Use bfd_get_section_limit.  Call
	translate_section_fixes.  Update calls to r_reloc_init and
	offset_with_removed_text.  Check new is_relaxable_asm_section flag.
	Add call to pin_internal_relocs.  Add special handling for
	R_XTENSA_ASM_SIMPLIFY and R_XTENSA_DIFF* relocs.  Use virtual_offset
	info to calculate new addend_displacement variable.  Replace code for
	deleting literals with more general code to perform the actions
	determined by the action_list for the section.
	(translate_section_fixes, translate_reloc_bfd_fix): New.
	(translate_reloc): Check new is_relaxable_asm_section flag.  Call
	find_removed_literal only if is_operand_relocation.  Update call to
	offset_with_removed_text.  Use new target_offset and removed_bytes
	variables.
	(move_literal): New.
	(relax_property_section):  Use bfd_get_section_limit.  Set new
	is_full_prop_section flag and handle new property tables.  Update calls
	to r_reloc_init and offset_with_removed_text.  Check
	is_relaxable_asm_section flag.  Handle expansion of zero-sized
	unreachable entries, with use of offset_with_removed_text_before_fill.
	For relocatable links, combine entries only for literal tables.
	(relax_section_symbols): Check is_relaxable_asm_section flag.  Update
	calls to offset_with_removed_text.  Translate st_size field for
	function symbols.
	(do_fix_for_relocatable_link): Change to return bfd_boolean to indicate
	failure.  Add contents parameter.  Update call to get_bfd_fix.  Update
	call to r_reloc_init.  Call _bfd_error_handler and return FALSE for
	R_XTENSA_ASM_EXPAND relocs.
	(do_fix_for_final_link): Add input_bfd and contents parameters.  Update
	call to get_bfd_fix.  Include offset from contents for partial_inplace
	relocations.
	(is_reloc_sym_weak): New.
	(pcrel_reloc_fits): Use new xtensa-isa.h functions.
	(prop_sec_len): New.
	(xtensa_is_property_section): Handle new property sections.
	(is_literal_section): Delete.
	(internal_reloc_compare): When r_offset matches, compare r_info and
	r_addend to make sorting predictable.
	(internal_reloc_matches): New.
	(xtensa_get_property_section_name): Handle new property sections.
	(xtensa_get_property_predef_flags): New.
	(xtensa_callback_required_dependence): Use bfd_get_section_limit.
	Update calls to xtensa_isa_init, is_l32r_relocation, and r_reloc_init.
	* xtensa-isa.c (xtensa_default_isa): Moved to elf32-xtensa.c.
	(xtisa_errno, xtisa_error_msg): New variables.
	(xtensa_isa_errno, xtensa_isa_error_msg): New.
	(xtensa_insnbuf_alloc): Add error handling.
	(xtensa_insnbuf_to_chars): Add num_chars parameter.  Update to
	use xtensa_format_decode.  Add error handling.
	(xtensa_insnbuf_from_chars): Add num_chars parameter.  Decode the
	instruction length to find the number of bytes to copy.
	(xtensa_isa_init): Add error handling.  Replace calls to
	xtensa_load_isa and xtensa_extend_isa with code to initialize lookup
	tables in the xtensa_modules structure.
	(xtensa_check_isa_config, xtensa_add_isa, xtensa_load_isa,
	xtensa_extend_isa): Delete.
	(xtensa_isa_free): Change to only free lookup tables.
	(opname_lookup_compare): Replace with ...
	(xtensa_isa_name_compare): ... this function.  Use strcasecmp.
	(xtensa_insn_maxlength): Rename to ...
	(xtensa_isa_maxlength): ... this.
	(xtensa_insn_length): Delete.
	(xtensa_insn_length_from_first_byte): Replace with ...
	(xtensa_isa_length_from_chars): ... this function.
	(xtensa_num_opcodes): Rename to ...
	(xtensa_isa_num_opcodes): ... this.
	(xtensa_isa_num_pipe_stages, xtensa_isa_num_formats,
	xtensa_isa_num_regfiles, xtensa_isa_num_stages,
	xtensa_isa_num_sysregs, xtensa_isa_num_interfaces,
	xtensa_isa_num_funcUnits, xtensa_format_name, xtensa_format_lookup,
	xtensa_format_decode, xtensa_format_encode, xtensa_format_length,
	xtensa_format_num_slots, xtensa_format_slot_nop_opcode,
	xtensa_format_get_slot, xtensa_format_set_slot): New functions.
	(xtensa_opcode_lookup): Add error handling.
	(xtensa_decode_insn): Replace with ...
	(xtensa_opcode_decode): ... this function, with new format and
	slot parameters.  Add error handling.
	(xtensa_encode_insn): Replace with ...
	(xtensa_opcode_encode): ... this function, which does the encoding via
	one of the entries in the "encode_fns" array.  Add error handling.
	(xtensa_opcode_name): Add error handling.
	(xtensa_opcode_is_branch, xtensa_opcode_is_jump, xtensa_opcode_is_loop,
	xtensa_opcode_is_call): New.
	(xtensa_num_operands): Replace with ...
	(xtensa_opcode_num_operands): ... this function.  Add error handling.
	(xtensa_opcode_num_stateOperands,
	xtensa_opcode_num_interfaceOperands, xtensa_opcode_num_funcUnit_uses,
	xtensa_opcode_funcUnit_use, xtensa_operand_name,
	xtensa_operand_is_visible): New.
	(xtensa_get_operand, xtensa_operand_kind): Delete.
	(xtensa_operand_inout): Add error handling and special-case for
	"sout" operands.
	(xtensa_operand_get_field, xtensa_operand_set_field): Rewritten to
	operate on one slot of an instruction.  Added error handling.
	(xtensa_operand_encode): Handle default operands with no encoding
	functions.  Check for success by comparing against decoded value.
	Add error handling.
	(xtensa_operand_decode): Handle default operands.  Return decoded value
	through argument pointer.  Add error handling.
	(xtensa_operand_is_register, xtensa_operand_regfile,
	xtensa_operand_num_regs, xtensa_operand_is_known_reg): New.
	(xtensa_operand_isPCRelative): Rename to ...
	(xtensa_operand_is_PCrelative): ... this.  Add error handling.
	(xtensa_operand_do_reloc, xtensa_operand_undo_reloc): Return value
	through argument pointer.  Add error handling.
	(xtensa_stateOperand_state, xtensa_stateOperand_inout,
	xtensa_interfaceOperand_interface, xtensa_regfile_lookup,
	xtensa_regfile_lookup_shortname, xtensa_regfile_name,
	xtensa_regfile_shortname, xtensa_regfile_view_parent,
	xtensa_regfile_num_bits, xtensa_regfile_num_entries,
	xtensa_state_lookup, xtensa_state_name, xtensa_state_num_bits,
	xtensa_state_is_exported, xtensa_sysreg_lookup,
	xtensa_sysreg_lookup_name, xtensa_sysreg_name, xtensa_sysreg_number,
	xtensa_sysreg_is_user, xtensa_interface_lookup, xtensa_interface_name,
	xtensa_interface_num_bits, xtensa_interface_inout,
	xtensa_interface_has_side_effect, xtensa_funcUnit_lookup,
	xtensa_funcUnit_name, xtensa_funcUnit_num_copies): New.
	* xtensa-modules.c: Rewrite to use new data structures.
	* reloc.c (BFD_RELOC_XTENSA_DIFF8, BFD_RELOC_XTENSA_DIFF16,
	BFD_RELOC_XTENSA_DIFF32, BFD_RELOC_XTENSA_SLOT0_OP,
	BFD_RELOC_XTENSA_SLOT1_OP, BFD_RELOC_XTENSA_SLOT2_OP,
	BFD_RELOC_XTENSA_SLOT3_OP, BFD_RELOC_XTENSA_SLOT4_OP,
	BFD_RELOC_XTENSA_SLOT5_OP, BFD_RELOC_XTENSA_SLOT6_OP,
	BFD_RELOC_XTENSA_SLOT7_OP, BFD_RELOC_XTENSA_SLOT8_OP,
	BFD_RELOC_XTENSA_SLOT9_OP, BFD_RELOC_XTENSA_SLOT10_OP,
	BFD_RELOC_XTENSA_SLOT11_OP, BFD_RELOC_XTENSA_SLOT12_OP,
	BFD_RELOC_XTENSA_SLOT13_OP, BFD_RELOC_XTENSA_SLOT14_OP,
	BFD_RELOC_XTENSA_SLOT0_ALT, BFD_RELOC_XTENSA_SLOT1_ALT,
	BFD_RELOC_XTENSA_SLOT2_ALT, BFD_RELOC_XTENSA_SLOT3_ALT,
	BFD_RELOC_XTENSA_SLOT4_ALT, BFD_RELOC_XTENSA_SLOT5_ALT,
	BFD_RELOC_XTENSA_SLOT6_ALT, BFD_RELOC_XTENSA_SLOT7_ALT,
	BFD_RELOC_XTENSA_SLOT8_ALT, BFD_RELOC_XTENSA_SLOT9_ALT,
	BFD_RELOC_XTENSA_SLOT10_ALT, BFD_RELOC_XTENSA_SLOT11_ALT,
	BFD_RELOC_XTENSA_SLOT12_ALT, BFD_RELOC_XTENSA_SLOT13_ALT,
	BFD_RELOC_XTENSA_SLOT14_ALT): Add new relocations.
	* Makefile.am (xtensa-isa.lo, xtensa-modules.lo): Update dependencies.
	* Makefile.in: Regenerate.
	* bfd-in2.h: Likewise.
	* libbfd.h: Likewise.

gas ChangeLog

	* config/tc-xtensa.c (absolute_literals_supported): New global flag.
	(UNREACHABLE_MAX_WIDTH): Define.
	(XTENSA_FETCH_WIDTH): Delete.
	(cur_vinsn, xtensa_fetch_width, xt_saved_debug_type, past_xtensa_end,
	prefer_const16, prefer_l32r): New global variables.
	(LIT4_SECTION_NAME): Define.
	(lit4_state struct): Add lit4_seg_name and lit4_seg fields.
	(XTENSA_PROP_*, GET_XTENSA_PROP_*, SET_XTENSA_PROP_*): Define.
	(frag_flags struct): New.
	(xtensa_block_info struct): Move from tc-xtensa.h.  Add flags field.
	(subseg_map struct): Add cur_total_freq and cur_target_freq fields.
	(bitfield, bit_is_set, set_bit, clear_bit): Define.
	(MAX_FORMATS): Define.
	(op_placement_info struct, op_placement_table): New.
	(O_pltrel, O_hi16, O_lo16): Define.
	(directiveE enum): Rename directive_generics to directive_transform.
	Delete directive_relax.  Add directive_schedule,
	directive_absolute_literals, and directive_last_directive.
	(directive_info): Rename "generics" to "transform".  Delete "relax".
	Add "schedule" and "absolute-literals".
	(directive_state): Adjust entries to match changes in directive_info.
	(xtensa_relax_statesE, RELAX_IMMED_MAXSTEPS): Move to tc-xtensa.h.
	(xtensa_const16_opcode, xtensa_movi_opcode, xtensa_movi_n_opcode,
	xtensa_l32r_opcode, xtensa_nop_opcode, xtensa_rsr_lcount_opcode): New.
	(xtensa_j_opcode, xtensa_rsr_opcode): Delete.
	(align_only_targets, software_a0_b_retw_interlock,
	software_avoid_b_j_loop_end, maybe_has_b_j_loop_end,
	software_avoid_short_loop, software_avoid_close_loop_end,
	software_avoid_all_short_loops, specific_opcode): Delete.
	(warn_unaligned_branch_targets): New.
	(workaround_a0_b_retw, workaround_b_j_loop_end, workaround_short_loop,
	workaround_close_loop_end, workaround_all_short_loops): Default FALSE.
	(option_[no_]link_relax, option_[no_]transform,
	option_[no_]absolute_literals, option_warn_unaligned_targets,
	option_prefer_l32r, option_prefer_const16, option_target_hardware):
	New enum values.
	(option_[no_]align_only_targets, option_literal_section_name,
	option_text_section_name, option_data_section_name,
	option_bss_section_name, option_eb, option_el): Delete.
	(md_longopts): Add entries for: [no-]transform, [no-]absolute-literals,
	warn-unaligned-targets, prefer-l32r, prefer-const16, [no-]link-relax,
	and target-hardware.  Delete entries for [no-]target-align-only,
	literal-section-name, text-section-name, data-section-name, and
	bss-section-name.
	(md_parse_option): Handle new options and remove old ones.  Accept but
	ignore [no-]density options.  Warn for [no-]generics and [no-]relax
	and treat them as [no-]transform.
	(md_show_usage): Add new options and remove old ones.
	(xtensa_setup_hw_workarounds): New.
	(md_pseudo_table): Change "word" entry to use xtensa_elf_cons.  Add
	"long", "short", "loc" and "frequency" entries.
	(use_generics): Rename to ...
	(use_transform): ... this function.  Add past_xtensa_end check.
	(use_longcalls): Add past_xtensa_end check.
	(code_density_available, can_relax): Delete.
	(do_align_targets): New.
	(get_directive): Accept dashes in directive names.  Warn about
	[no-]generics and [no-]relax directives and treat them as
	[no-]transform.
	(xtensa_begin_directive): Call md_flush_pending_output only for some
	directives.  Check for directives inside instruction bundles.  Warn
	about deprecated ".begin literal" usage.  Warn and ignore [no-]density
	directives.  Handle new directives.  Check generating_literals flag
	for literal_prefix.
	(xtensa_end_directive): Check for directives inside instruction
	bundles.  Warn and ignore [no-]density directives.  Handle new
	directives.  Call xtensa_set_frag_assembly_state.
	(xtensa_loc_directive_seen, xtensa_dwarf2_directive_loc,
	xtensa_dwarf2_emit_insn): New.
	(xtensa_literal_position): Call md_flush_pending_output.  Do not check
	use_literal_section flag.
	(xtensa_literal_pseudo): Call md_flush_pending_output.  Handle absolute
	literals.  Use xtensa_elf_cons to parse the expression.
	(xtensa_literal_prefix): Do not check use_literal_section.  Support
	".lit4" sections for absolute literals.  Change prefix convention to
	replace ".text" (or ".t" in a linkonce section).  No need to call
	subseg_set.
	(xtensa_frequency_pseudo, xtensa_elf_cons, xtensa_elf_suffix): New.
	(expression_end): Handle closing braces and colons.
	(PLT_SUFFIX, plt_suffix): Delete.
	(expression_maybe_register): Use new xtensa-isa.h functions.  Use
	xtensa_elf_suffix instead of checking for plt suffix, and handle O_lo16
	and O_hi16 expressions as well.
	(tokenize_arguments): Handle closing braces and colons.
	(parse_arguments): Use new xtensa-isa.h functions.  Handle "invisible"
	operands and paired register syntax.
	(get_invisible_operands): New.
	(xg_translate_sysreg_op): Handle new Xtensa LX RSR/WSR/XSR syntax.  Use
	new xtensa-isa.h functions.
	(xtensa_translate_old_userreg_ops, xtensa_translate_zero_immed): New.
	(xg_translate_idioms): Check if inside bundle.  Use use_transform.
	Handle new Xtensa LX RSR/WSR/XSR syntax.  Remove code to widen density
	instructions.  Use xtensa_translate_zero_immed.
	(operand_is_immed, operand_is_pcrel_label): Delete.
	(get_relaxable_immed): Use new xtensa-isa.h functions.
	(get_opcode_from_buf): Add slot parameter.  Use new xtensa-isa.h
	functions.
	(xtensa_print_insn_table, print_vliw_insn): New.
	(is_direct_call_opcode): Use new xtensa-isa.h functions.
	(is_call_opcode, is_loop_opcode, is_conditional_branch_opcode,
	is_branch_or_jump_opcode): Delete.
	(is_movi_opcode, decode_reloc, encode_reloc, encode_alt_reloc): New.
	(opnum_to_reloc, reloc_to_opnum): Delete.
	(xtensa_insnbuf_set_operand, xtensa_insnbuf_get_operand): Use new
	xtensa-isa.h functions.  Operate on one slot of an instruction.
	(xtensa_insnbuf_set_immediate_field, is_negatable_branch,
	xg_get_insn_size): Delete.
	(xg_get_build_instr_size): Use xg_get_single_size.
	(xg_is_narrow_insn, xg_is_single_relaxable_insn): Update calls to
	xg_build_widen_table.  Use xg_get_single_size.
	(xg_get_max_narrow_insn_size): Delete.
	(xg_get_max_insn_widen_size, xg_get_max_insn_widen_literal_size,
	xg_is_relaxable_insn): Update calls to xg_build_widen_table.  Use
	xg_get_single_size.
	(xg_build_to_insn): Record the loc field.  Handle OP_OPERAND_HI16U and
	OP_OPERAND_LOW16U.  Check xg_valid_literal_expression.
	(xg_expand_to_stack, xg_expand_narrow): Update calls to
	xg_build_widen_table.  Use xg_get_single_size.
	(xg_immeds_fit): Use new xtensa-isa.h functions.  Update call to
	xg_check_operand.
	(xg_symbolic_immeds_fit): Likewise.  Also handle O_lo16 and O_hi16, and
	treat weak symbols conservatively.
	(xg_check_operand): Use new xtensa-isa.h functions.
	(is_dnrange): Delete.
	(xg_assembly_relax): Inline previous calls to tinsn_copy.
	(xg_finish_frag): Specify separate relax states for the frag and slot0.
	(is_branch_jmp_to_next, xg_add_branch_and_loop_targets): Use new
	xtensa-isa.h functions.
	(xg_instruction_matches_option_term, xg_instruction_matches_or_options,
	xg_instruction_matches_options): New.
	(xg_instruction_matches_rule): Handle O_register expressions.  Call
	xg_instruction_matches_options.
	(transition_rule_cmp): New.
	(xg_instruction_match): Update call to xg_build_simplify_table.
	(xg_build_token_insn): Record loc fields.
	(xg_simplify_insn): Check is_specific_opcode field and
	density_supported flag.
	(xg_expand_assembly_insn): Skip checking code_density_available.  Use
	new xtensa-isa.h functions.  Call use_transform instead of can_relax.
	(xg_assemble_literal): Add error handling for O_big.  Call
	record_alignment.  Handle O_pltrel.
	(xg_valid_literal_expression): New.
	(xg_assemble_literal_space): Add slot parameter.  Remove call to
	set_expr_symbol_offset.  Add call to record_alignment.  Update call to
	xg_finish_frag.
	(xg_emit_insn): Delete.
	(xg_emit_insn_to_buf): Add format parameter.  Update calls to
	xg_add_opcode_fix and xtensa_insnbuf_to_chars.
	(xg_add_opcode_fix): Change opcode parameter to tinsn and add format
	and slot parameters.  Handle new "alternate" relocations for absolute
	literals and CONST16 instructions.  Check for bad uses of O_lo16 and
	O_hi16.  Use new xtensa-isa.h functions.
	(xg_assemble_tokens): Delete.
	(is_register_writer): Use new xtensa-isa.h functions.
	(is_bad_loopend_opcode): Check for xtensa_rsr_lcount_opcode instead of
	old-style RSR from LCOUNT.
	(next_frag_opcode): Delete.
	(next_frag_opcode_is_loop, next_frag_format_size, frag_format_size,
	update_next_frag_state): New.
	(update_next_frag_nop_state): Delete.
	(next_frag_pre_opcode_bytes): Use next_frag_opcode_is_loop.
	(xtensa_mark_literal_pool_location): Check use_literal_section flag and
	the state of the absolute-literals directive.  Add calls to
	record_alignment and xtensa_set_frag_assembly_state.  Call
	xtensa_switch_to_non_abs_literal_fragment instead of
	xtensa_switch_to_literal_fragment.
	(build_nop): New.
	(assemble_nop): Use build_nop.  Update call to xtensa_insnbuf_to_chars.
	(get_expanded_loop_offset): Change check for undefined opcode to an
	assertion.
	(xtensa_set_frag_assembly_state, relaxable_section,
	xtensa_find_unmarked_state_frags, xtensa_find_unaligned_branch_targets,
	xtensa_find_unaligned_loops, xg_apply_tentative_value): New.
	(md_begin): Update call to xtensa_isa_init.  Initialize linkrelax to 1.
	Set lit4_seg_name.  Call xg_init_vinsn.  Initialize new global opcodes.
	Call init_op_placement_info_table and xtensa_set_frag_assembly_state.
	(xtensa_init_fix_data): New.
	(xtensa_frob_label): Reset label symbol to the current frag.  Check
	do_align_targets and generating_literals flag.  Propagate frequency
	info to new alignment frag.  Call xtensa_set_frag_assembly_state.
	(xtensa_unrecognized_line): New.
	(xtensa_flush_pending_output): Check if inside a bundle.  Add a call
	to xtensa_set_frag_assembly_state.
	(error_reset_cur_vinsn): New.
	(md_assemble): Remove check for literal frag.  Remove call to
	istack_init.  Call use_transform instead of use_generics.  Parse
	explicit instruction format specifiers.  Move code for
	a0_b_retw_interlock workaround to xg_assemble_vliw_tokens.  Call
	error_reset_cur_vinsn on errors.  Add call to get_invisible_operands.
	Add dwarf2_where call.  Remote automatic alignment for ENTRY
	instructions.  Move call to xtensa_clear_insn_labels to the end.
	Rearrange to handle bundles.
	(xtensa_cons_fix_new): Delete.
	(xtensa_handle_align): New.
	(xtensa_frag_init): Call xtensa_set_frag_assembly_state.  Remove
	assignment to is_no_density field.
	(md_pcrel_from): Use new xtensa-isa.h functions.  Use decode_reloc
	instead of reloc_to_opnum.  Handle "alternate" relocations.
	(xtensa_force_relocation, xtensa_check_inside_bundle,
	xtensa_elf_section_change_hook): New.
	(xtensa_symbol_new_hook): Delete.
	(xtensa_fix_adjustable): Check for difference of symbols with an
	offset.  Check for external and weak symbols.
	(md_apply_fix3): Remove cases for XTENSA_OP{0,1,2} relocs.
	(md_estimate_size_before_relax): Return expansion for the first slot.
	(tc_gen_reloc): Handle difference of symbols by producing
	XTENSA_DIFF{8,16,32} relocs and by writing the value of the difference
	into the output.  Handle new XTENSA_SLOT*_OP relocs by storing the
	tentative values into the output when linkrelax is set.
	(XTENSA_PROP_SEC_NAME): Define.
	(xtensa_post_relax_hook): Call xtensa_find_unmarked_state_frags.
	Create literal tables only if using literal sections.  Create new
	property tables instead of old instruction tables.  Check for unaligned
	branch targets and loops.
	(finish_vinsn, find_vinsn_conflicts, check_t1_t2_reads_and_writes,
	new_resource_table, clear_resource_table, resize_resource_table,
	resources_available, reserve_resources, release_resources,
	opcode_funcUnit_use_unit, opcode_funcUnit_use_stage,
	resources_conflict, xg_find_narrowest_format, relaxation_requirements,
	bundle_single_op, emit_single_op, xg_assemble_vliw_tokens): New.
	(xtensa_end): Call xtensa_flush_pending_output.  Set past_xtensa_end
	flag.  Update checks for workaround options.  Call
	xtensa_mark_narrow_branches and xtensa_mark_zcl_first_insns.
	(xtensa_cleanup_align_frags): Add special case for branch targets.
	Check for and mark unreachable frags.
	(xtensa_fix_target_frags): Remove use of align_only_targets flag.
	Use RELAX_LOOP_END_BYTES in special case for negatable branch at the
	end of a zero-overhead loop body.
	(frag_can_negate_branch): Handle instructions with multiple slots.
	Use new xtensa-isa.h functions
	(xtensa_mark_narrow_branches, is_narrow_branch_guaranteed_in_range,
	xtensa_mark_zcl_first_insns): New.
	(xtensa_fix_a0_b_retw_frags, xtensa_fix_b_j_loop_end_frags): Error if
	transformations are disabled.
	(next_instrs_are_b_retw): Use new xtensa-isa.h functions.  Handle
	multislot instructions.
	(xtensa_fix_close_loop_end_frags, xtensa_fix_short_loop_frags):
	Likewise.  Also error if transformations are disabled.
	(unrelaxed_frag_max_size): New.
	(unrelaxed_frag_min_insn_count, unrelax_frag_has_b_j): Use new
	xtensa-isa.h functions.
	(xtensa_sanity_check, is_empty_loop, is_local_forward_loop): Use
	xtensa_opcode_is_loop instead of is_loop_opcode.
	(get_text_align_power): Replace as_fatal with assertion.
	(get_text_align_fill_size): Iterate instead of using modulus when
	use_nops is false.
	(get_noop_aligned_address): Assert that this is for a machine-dependent
	RELAX_ALIGN_NEXT_OPCODE frag.  Use next_frag_opcode_is_loop,
	xg_get_single_size, and frag_format_size.
	(get_widen_aligned_address): Rename to ...
	(get_aligned_diff): ... this function.  Add max_diff parameter.
	Remove handling of rs_align/rs_align_code frags.  Use
	next_frag_format_size, get_text_align_power, get_text_align_fill_size,
	next_frag_opcode_is_loop, and xg_get_single_size.  Compute max_diff
	and pass it back to caller.
	(xtensa_relax_frag): Use relax_frag_loop_align.  Add code for new
	RELAX_SLOTS, RELAX_MAYBE_UNREACHABLE, RELAX_MAYBE_DESIRE_ALIGN,
	RELAX_FILL_NOP, and RELAX_UNREACHABLE frag types.  Check relax_seen.
	(relax_frag_text_align): Rename to ...
	(relax_frag_loop_align): ... this function.  Assume loops can only be
	in the first slot of an instruction.
	(relax_frag_add_nop): Use assemble_nop instead of constructing an OR
	instruction.  Remove call to frag_wane.
	(relax_frag_narrow): Rename to ...
	(relax_frag_for_align): ... this function.  Extend to handle
	RELAX_FILL_NOP and RELAX_UNREACHABLE, as well as RELAX_SLOTS with
	RELAX_NARROW for the first slot.
	(find_address_of_next_align_frag, bytes_to_stretch): New.
	(future_alignment_required): Use find_address_of_next_align_frag and
	bytes_to_stretch.  Look ahead to subsequent frags to make smarter
	alignment decisions.
	(relax_frag_immed): Add format, slot, and estimate_only parameters.
	Check if transformations are enabled for b_j_loop_end workaround.
	Use new xtensa-isa.h functions and handle multislot instructions.
	Update call to xg_assembly_relax.
	(md_convert_frag): Handle new RELAX_SLOTS, RELAX_UNREACHABLE,
	RELAX_MAYBE_UNREACHABLE, RELAX_MAYBE_DESIRE_ALIGN, and RELAX_FILL_NOP
	frag types.
	(convert_frag_narrow): Add segP, format and slot parameters.  Call
	convert_frag_immed for branch instructions.  Adjust calls to
	tinsn_from_chars, tinsn_immed_from_frag, and xg_emit_insn_to_buf.  Use
	xg_get_single_size and xg_get_single_format.
	(convert_frag_fill_nop): New.
	(convert_frag_immed): Add format and slot parameters.  Handle multislot
	instructions and use new xtensa-isa.h functions.  Update calls to
	tinsn_immed_from_frag and xg_assembly_relax.  Check if transformations
	enabled for b_j_loop_end workaround.  Use build_nop instead of
	assemble_nop.  Check is_specific_opcode flag.  Check for unreachable
	frags.  Use xg_get_single_size.  Handle O_pltrel.
	(fix_new_exp_in_seg): Remove check for old plt flag.
	(convert_frag_immed_finish_loop): Update calls to tinsn_from_chars and
	xtensa_insnbuf_to_chars.  Call tinsn_immed_from_frag.  Change check
	for loop opcode to an assertion.  Mark all frags up to the end of the
	loop as not transformable.
	(get_last_insn_flags, set_last_insn_flags): Use get_subseg_info.
	(get_subseg_info): New.
	(xtensa_move_literals): Call xtensa_set_frag_assembly_state.  Add null
	check for dest_seg.
	(xtensa_switch_to_literal_fragment): Rewrite to handle absolute
	literals and use xtensa_switch_to_non_abs_literal_fragment otherwise.
	(xtensa_switch_to_non_abs_literal_fragment): New.
	(cache_literal_section): Add is_code parameter and pass it through to
	retrieve_literal_seg.
	(retrieve_literal_seg): Add is_code parameter and use it to set the
	flags on the literal section.  Handle case where head parameter is 0.
	(get_frag_is_no_transform, set_frag_is_specific_opcode,
	set_frag_is_no_transform): New.
	(xtensa_create_property_segments): Add end_property_function parameter
	and pass it through to add_xt_block_frags.  Call bfd_get_section_flags
	and skip SEC_DEBUGGING and !SEC_ALLOC sections.
	(xtensa_create_xproperty_segments, section_has_xproperty): New.
	(add_xt_block_frags): Add end_property_function parameter and call it
	if it is non-zero.  Call xtensa_frag_flags_init.
	(xtensa_frag_flags_is_empty, xtensa_frag_flags_init,
	get_frag_property_flags, frag_flags_to_number,
	xtensa_frag_flags_combinable, xt_block_aligned_size,
	xtensa_xt_block_combine, add_xt_prop_frags,
	init_op_placement_info_table, opcode_fits_format_slot,
	xg_get_single_size, xg_get_single_format): New.
	(istack_push): Inline call to tinsn_copy.
	(tinsn_copy): Delete.
	(tinsn_has_invalid_symbolic_operands): Handle O_hi16 and O_lo16 and
	CONST16 opcodes.  Handle O_big, O_illegal, and O_absent.
	(tinsn_has_complex_operands): Handle O_hi16 and O_lo16.
	(tinsn_to_insnbuf): Use xg_get_single_format and new xtensa-isa.h
	functions.  Handle invisible operands.
	(tinsn_to_slotbuf): New.
	(tinsn_check_arguments): Use new xtensa-isa.h functions.
	(tinsn_from_chars): Add slot parameter.  Rewrite using xg_init_vinsn,
	vinsn_from_chars, and xg_free_vinsn.
	(tinsn_from_insnbuf): New.
	(tinsn_immed_from_frag): Add slot parameter and handle multislot
	instructions.  Handle symbol differences.
	(get_num_stack_text_bytes): Use xg_get_single_size.
	(xg_init_vinsn, xg_clear_vinsn, vinsn_has_specific_opcodes,
	xg_free_vinsn, vinsn_to_insnbuf, vinsn_from_chars, expr_is_register,
	get_expr_register, set_expr_symbol_offset_diff): New.
	* config/tc-xtensa.h (MAX_SLOTS): Define.
	(xtensa_relax_statesE): Move from tc-xtensa.c. Add
	RELAX_CHECK_ALIGN_NEXT_OPCODE, RELAX_MAYBE_DESIRE_ALIGN, RELAX_SLOTS,
	RELAX_FILL_NOP, RELAX_UNREACHABLE, RELAX_MAYBE_UNREACHABLE, and
	RELAX_NONE types.
	(RELAX_IMMED_MAXSTEPS): Move from tc-xtensa.c.
	(xtensa_frag_type struct): Add is_assembly_state_set,
	use_absolute_literals, relax_seen, is_unreachable, is_specific_opcode,
	is_align, is_text_align, alignment, and is_first_loop_insn fields.
	Replace is_generics and is_relax fields by is_no_transform field.
	Delete is_text and is_longcalls fields.  Change text_expansion and
	literal_expansion to arrays of MAX_SLOTS entries.  Add arrays of
	per-slot information: literal_frags, slot_subtypes, slot_symbols,
	slot_sub_symbols, and slot_offsets.  Add fr_prev field.
	(xtensa_fix_data struct): New.
	(xtensa_symfield_type struct): Delete plt field.
	(xtensa_block_info struct): Move definition to tc-xtensa.h.  Add
	forward declaration here.
	(xt_section_type enum): Delete xt_insn_sec.  Add xt_prop_sec.
	(XTENSA_SECTION_RENAME): Undefine.
	(TC_FIX_TYPE, TC_INIT_FIX_DATA, TC_FORCE_RELOCATION, NO_PSEUDO_DOT,
	tc_unrecognized_line, md_do_align, md_elf_section_change_hook,
	HANDLE_ALIGN, TC_LINKRELAX_FIXUP, SUB_SEGMENT_ALIGN): Define.
	(TC_CONS_FIX_NEW, tc_symbol_new_hook): Delete.
	(unit_num_copies_func, opcode_num_units_func,
	opcode_funcUnit_use_unit_func, opcode_funcUnit_use_stage_func): New.
	(resource_table struct): New.
	* config/xtensa-istack.h (MAX_INSN_ARGS): Increase from 6 to 10.
	(TInsn struct): Add keep_wide, loc, fixup, record_fix, subtype,
	literal_space, symbol, sub_symbol, offset, and literal_frag fields.
	(tinsn_copy): Delete prototype.
	(vliw_insn struct): New.
	* config/xtensa-relax.c (insn_pattern_struct): Add options field.
	(widen_spec_list): Add option conditions for density and boolean
	instructions.  Add expansions using CONST16 and conditions for using
	CONST16 vs. L32R.  Use new Xtensa LX RSR/WSR syntax.  Add entries for
	predicted branches.
	(simplify_spec_list): Add option conditions for density instructions.
	Add entry for NOP instruction.
	(append_transition): Add cmp function pointer parameter and use it to
	insert the new entry in order.
	(operand_function_LOW16U, operand_function_HI16U): New.
	(xg_has_userdef_op_fn, xg_apply_userdef_op_fn): Handle
	OP_OPERAND_LOW16U and OP_OPERAND_HI16U.
	(enter_opname, split_string): Use xstrdup instead of strdup.
	(init_insn_pattern): Initialize new options field.
	(clear_req_or_option_list, clear_req_option_list,
	clone_req_or_option_list, clone_req_option_list, parse_option_cond):
	New.
	(parse_insn_pattern): Parse option conditions.
	(transition_applies): New.
	(build_transition): Use new xtensa-isa.h functions.  Fix incorrectly
	swapped last arguments in calls to append_constant_value_condition.
	Call clone_req_option_list.  Add warning about invalid opcode.
	Handle LOW16U and HI16U function names.
	(build_transition_table): Add cmp parameter and use it in calls to
	append_transition.  Use new xtensa-isa.h functions.  Check
	transition_applies before adding entries.
	(xg_build_widen_table, xg_build_simplify_table): Add cmp parameter and
	pass it through to build_transition_table.
	* config/xtensa-relax.h (ReqOrOptionList, ReqOrOption, ReqOptionList,
	ReqOption, transition_cmp_fn): New types.
	(OpType enum): Add OP_OPERAND_LOW16U and OP_OPERAND_HI16U.
	(transition_rule struct): Add options field.
	* doc/as.texinfo (Overview): Update Xtensa options.
	* doc/c-xtensa.texi (Xtensa Options): Delete --[no-]density,
	--[no-]relax, and --[no-]generics options.  Update descriptions of
	--text-section-literals and --[no-]longcalls.  Add
	--[no-]absolute-literals and --[no-]transform.
	(Xtensa Syntax): Add description of syntax for FLIX instructions.
	Remove use of "generic" and "specific" terminology for opcodes.
	(Xtensa Registers): Generalize the syntax description to include
	user-defined register files.
	(Xtensa Automatic Alignment): Update.
	(Xtensa Branch Relaxation): Mention limitation of unconditional jumps.
	(Xtensa Call Relaxation): Linker can now remove most of the overhead.
	(Xtensa Directives): Remove confusing rules about precedence.
	(Density Directive, Relax Directive): Delete.
	(Schedule Directive): New.
	(Generics Directive): Rename to ...
	(Transform Directive): ... this node.
	(Literal Directive): Update for absolute literals.  Missing
	literal_position directive is now an error.
	(Literal Position Directive): Update for absolute literals.
	(Freeregs Directive): Delete.
	(Absolute Literals Directive): New.
	(Frame Directive): Minor editing.
	* Makefile.am (DEPTC_xtensa_elf, DEPOBJ_xtensa_elf, DEP_xtensa_elf):
	Update dependencies.
	* Makefile.in: Regenerate.

gas/testsuite ChangeLog

	* gas/xtensa/all.exp: Adjust expected error message for j_too_far.
	Change entry_align test to expect an error.
	* gas/xtensa/entry_misalign2.s: Use no-transform instead of
	no-generics directives.

include ChangeLog

	* xtensa-config.h (XSHAL_USE_ABSOLUTE_LITERALS,
	XCHAL_HAVE_PREDICTED_BRANCHES, XCHAL_INST_FETCH_WIDTH): New.
	(XCHAL_EXTRA_SA_SIZE, XCHAL_EXTRA_SA_ALIGN): Delete.
	* xtensa-isa-internal.h (ISA_INTERFACE_VERSION): Delete.
	(config_sturct struct): Delete.
	(XTENSA_OPERAND_IS_REGISTER, XTENSA_OPERAND_IS_PCRELATIVE,
	XTENSA_OPERAND_IS_INVISIBLE, XTENSA_OPERAND_IS_UNKNOWN,
	XTENSA_OPCODE_IS_BRANCH, XTENSA_OPCODE_IS_JUMP,
	XTENSA_OPCODE_IS_LOOP, XTENSA_OPCODE_IS_CALL,
	XTENSA_STATE_IS_EXPORTED, XTENSA_INTERFACE_HAS_SIDE_EFFECT): Define.
	(xtensa_format_encode_fn, xtensa_get_slot_fn, xtensa_set_slot_fn): New.
	(xtensa_insn_decode_fn): Rename to ...
	(xtensa_opcode_decode_fn): ... this.
	(xtensa_immed_decode_fn, xtensa_immed_encode_fn, xtensa_do_reloc_fn,
	xtensa_undo_reloc_fn): Update.
	(xtensa_encoding_template_fn): Delete.
	(xtensa_opcode_encode_fn, xtensa_format_decode_fn,
	xtensa_length_decode_fn): New.
	(xtensa_format_internal, xtensa_slot_internal): New types.
	(xtensa_operand_internal): Delete operand_kind, inout, isPCRelative,
	get_field, and set_field fields.  Add name, field_id, regfile,
	num_regs, and flags fields.
	(xtensa_arg_internal): New type.
	(xtensa_iclass_internal): Change operands field to array of
	xtensa_arg_internal.  Add num_stateOperands, stateOperands,
	num_interfaceOperands, and interfaceOperands fields.
	(xtensa_opcode_internal): Delete length, template, and iclass fields.
	Add iclass_id, flags, encode_fns, num_funcUnit_uses, and funcUnit_uses.
	(opname_lookup_entry): Delete.
	(xtensa_regfile_internal, xtensa_interface_internal,
	xtensa_funcUnit_internal, xtensa_state_internal,
	xtensa_sysreg_internal, xtensa_lookup_entry): New.
	(xtensa_isa_internal): Replace opcode_table field with opcodes field.
	Change type of opname_lookup_table.  Delete num_modules,
	module_opcode_base, module_decode_fn, config, and has_density fields.
	Add num_formats, formats, format_decode_fn, length_decode_fn,
	num_slots, slots, num_fields, num_operands, operands, num_iclasses,
	iclasses, num_regfiles, regfiles, num_states, states,
	state_lookup_table, num_sysregs, sysregs, sysreg_lookup_table,
	max_sysreg_num, sysreg_table, num_interfaces, interfaces,
	interface_lookup_table, num_funcUnits, funcUnits and
	funcUnit_lookup_table fields.
	(xtensa_isa_module, xtensa_isa_modules): Delete.
	(xtensa_isa_name_compare): New prototype.
	(xtisa_errno, xtisa_error_msg): New.
	* xtensa-isa.h (XTENSA_ISA_VERSION): Define.
	(xtensa_isa): Change type.
	(xtensa_operand): Delete.
	(xtensa_format, xtensa_regfile, xtensa_state, xtensa_sysreg,
	xtensa_interface, xtensa_funcUnit, xtensa_isa_status,
	xtensa_funcUnit_use): New types.
	(libisa_module_specifier): Delete.
	(xtensa_isa_errno, xtensa_isa_error_msg): New prototypes.
	(xtensa_insnbuf_free, xtensa_insnbuf_to_chars,
	xtensa_insnbuf_from_chars): Update prototypes.
	(xtensa_load_isa, xtensa_extend_isa, xtensa_default_isa,
	xtensa_insn_maxlength, xtensa_num_opcodes, xtensa_decode_insn,
	xtensa_encode_insn, xtensa_insn_length,
	xtensa_insn_length_from_first_byte, xtensa_num_operands,
	xtensa_operand_kind, xtensa_encode_result,
	xtensa_operand_isPCRelative): Delete.
	(xtensa_isa_init, xtensa_operand_inout, xtensa_operand_get_field,
	xtensa_operand_set_field, xtensa_operand_encode,
	xtensa_operand_decode, xtensa_operand_do_reloc,
	xtensa_operand_undo_reloc): Update prototypes.
	(xtensa_isa_maxlength, xtensa_isa_length_from_chars,
	xtensa_isa_num_pipe_stages, xtensa_isa_num_formats,
	xtensa_isa_num_opcodes, xtensa_isa_num_regfiles, xtensa_isa_num_states,
	xtensa_isa_num_sysregs, xtensa_isa_num_interfaces,
	xtensa_isa_num_funcUnits, xtensa_format_name, xtensa_format_lookup,
	xtensa_format_decode, xtensa_format_encode, xtensa_format_length,
	xtensa_format_num_slots, xtensa_format_slot_nop_opcode,
	xtensa_format_get_slot, xtensa_format_set_slot, xtensa_opcode_decode,
	xtensa_opcode_encode, xtensa_opcode_is_branch, xtensa_opcode_is_jump,
	xtensa_opcode_is_loop, xtensa_opcode_is_call,
	xtensa_opcode_num_operands, xtensa_opcode_num_stateOperands,
	xtensa_opcode_num_interfaceOperands, xtensa_opcode_num_funcUnit_uses,
	xtensa_opcode_funcUnit_use, xtensa_operand_name,
	xtensa_operand_is_visible, xtensa_operand_is_register,
	xtensa_operand_regfile, xtensa_operand_num_regs,
	xtensa_operand_is_known_reg, xtensa_operand_is_PCrelative,
	xtensa_stateOperand_state, xtensa_stateOperand_inout,
	xtensa_interfaceOperand_interface, xtensa_regfile_lookup,
	xtensa_regfile_lookup_shortname, xtensa_regfile_name,
	xtensa_regfile_shortname, xtensa_regfile_view_parent,
	xtensa_regfile_num_bits, xtensa_regfile_num_entries,
	xtensa_state_lookup, xtensa_state_name, xtensa_state_num_bits,
	xtensa_state_is_exported, xtensa_sysreg_lookup,
	xtensa_sysreg_lookup_name, xtensa_sysreg_name, xtensa_sysreg_number,
	xtensa_sysreg_is_user, xtensa_interface_lookup, xtensa_interface_name,
	xtensa_interface_num_bits, xtensa_interface_inout,
	xtensa_interface_has_side_effect, xtensa_funcUnit_lookup,
	xtensa_funcUnit_name, xtensa_funcUnit_num_copies): New prototypes.
	* elf/xtensa.h (R_XTENSA_DIFF8, R_XTENSA_DIFF16, R_XTENSA_DIFF32,
	R_XTENSA_SLOT*_OP, R_XTENSA_SLOT*_ALT): New relocations.
	(XTENSA_PROP_SEC_NAME): Define.
	(property_table_entry): Add flags field.
	(XTENSA_PROP_*, GET_XTENSA_PROP_*, SET_XTENSA_PROP_*): Define.

ld ChangeLog

	* ld.texinfo (Xtensa): Describe new linker relaxation to optimize
	assembler-generated longcall sequences.  Describe new --size-opt
	option.
	* emulparams/elf32xtensa.sh (OTHER_SECTIONS): Add .xt.prop section.
	* emultempl/xtensaelf.em (remove_section,
	replace_insn_sec_with_prop_sec, replace_instruction_table_sections,
	elf_xtensa_after_open): New.
	(OPTION_OPT_SIZEOPT, OPTION_LITERAL_MOVEMENT,
	OPTION_NO_LITERAL_MOVEMENT): Define.
	(elf32xtensa_size_opt, elf32xtensa_no_literal_movement): New globals.
	(PARSE_AND_LIST_LONGOPTS): Add size-opt and [no-]literal-movement.
	(PARSE_AND_LIST_OPTIONS): Add --size-opt.
	(PARSE_AND_LIST_ARGS_CASES): Handle OPTION_OPT_SIZEOPT,
	OPTION_LITERAL_MOVEMENT, and OPTION_NO_LITERAL_MOVEMENT.
	(LDEMUL_AFTER_OPEN): Set to elf_xtensa_after_open.
	* scripttempl/elfxtensa.sc: Update with changes from elf.sc.
	* Makefile.am (eelf32xtensa.c): Update dependencies.
	* Makefile.in: Regenerate.

ld/testsuite ChangeLog

	* ld-xtensa/lcall1.s: Use .literal directive.
	* ld-xtensa/lcall2.s: Align function entry.
	* ld-xtensa/coalesce2.s: Likewise.

opcodes ChangeLog

	* xtensa-dis.c (state_names): Delete.
	(fetch_data): Use xtensa_isa_maxlength.
	(print_xtensa_operand): Replace operand parameter with opcode/operand
	pair.  Remove print_sr_name parameter.  Use new xtensa-isa.h functions.
	(print_insn_xtensa): Use new xtensa-isa.h functions.  Handle multislot
	instruction bundles.  Use xmalloc instead of malloc.
@
text
@d1562 2
a1563 1
xtensa-modules.lo: xtensa-modules.c $(INCDIR)/xtensa-isa-internal.h
@


1.142
log
@bfd/

2004-09-17  H.J. Lu  <hongjiu.lu@@intel.com>

	* Makefile.am (AUTOMAKE_OPTIONS): Require 1.9.
	(CONFIG_STATUS_DEPENDENCIES): New.
	(Makefile): Removed.
	(config.status): Likewise.
	* Makefile.in: Regenerated.

opcodes/

2004-09-17  H.J. Lu  <hongjiu.lu@@intel.com>

	* Makefile.am (AUTOMAKE_OPTIONS): Require 1.9.
	(CONFIG_STATUS_DEPENDENCIES): New.
	(Makefile): Removed.
	(config.status): Likewise.
	* Makefile.in: Regenerated.
@
text
@d1560 1
a1560 3
xtensa-isa.lo: xtensa-isa.c $(INCDIR)/xtensa-isa.h \
  $(INCDIR)/xtensa-isa-internal.h
xtensa-modules.lo: xtensa-modules.c $(INCDIR)/xtensa-isa.h \
d1562 1
@


1.141
log
@	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.
	* bfd-in2.h: Regenerate.
	* po/SRC-POTFILES.in: Regenerate.
	* po/bfd.pot: Regenerate.
@
text
@d3 1
a3 1
AUTOMAKE_OPTIONS = cygnus
d578 8
a773 2
Makefile: $(srcdir)/configure.in

a879 4
# We want to rerun configure if configure, config.bfd or configure.host change.
config.status: $(srcdir)/configure $(srcdir)/config.bfd $(srcdir)/configure.host
	$(SHELL) ./config.status --recheck

@


1.140
log
@Add new port: crx-elf
@
text
@d1175 3
a1177 3
elf32-crx.lo: elf32-crx.c $(INCDIR)/filenames.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/elf/crx.h $(INCDIR)/elf/reloc-macros.h \
d1324 4
a1327 4
elf32-sh-symbian.lo: elf32-sh-symbian.c elf32-sh.c $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/elf/sh.h \
  $(INCDIR)/elf/reloc-macros.h $(INCDIR)/libiberty.h \
d1560 2
a1561 1
xtensa-modules.lo: xtensa-modules.c $(INCDIR)/xtensa-isa-internal.h
@


1.139
log
@Add support for sh-symbian-elf target
@
text
@d63 1
d120 1
d225 1
d394 1
d945 1
d1175 4
@


1.138
log
@2004-06-30  Andrew Stubbs <andrew.stubbs@@superh.com>

	bfd:
	* elf32-sh.c: Include ../opcodes/sh-opc.h .
	* Makefile.am: Ran make dep-am .
	* Makefile.in: Ran make dep-in .

	gas:
	* config/tc-sh.c (md_assemble): Change isspace to ISSPACE.
	(md_parse_option): Remove redundant -isa testing.
	Make bfd_arch variable const.
	(md_show_usage): Make bfd_arch variable const.
@
text
@d256 1
d425 1
d1315 5
@


1.137
log
@2004-05-28  Andrew Stubbs <andrew.stubbs@@superh.com>

bfd:
	* Makefile.am: Regenerate dependencies.
	* Makefile.in: Regenerate.
	* archures.c: Add bfd_mach_sh3_nommu .
	* bfd-in2.h: Regenerate.
	* cpu-sh.c: Add sh3-nommu architecture.
	(bfd_to_arch_table): Create new table.
	(sh_get_arch_from_bfd_mach): Create new function.
	(sh_get_arch_up_from_bfd_mach): Create new function.
	(sh_merge_bfd_arch): Create new function.
	* elf32-sh.c (sh_ef_bfd_table): Add table.
	(sh_elf_check_relocs): Replace switch statement with
	use of sh_ef_bfd_table .
	(sh_elf_get_flags_from_mach): Add new function.
	(sh_find_elf_flags): Likewise.
	(sh_elf_copy_private_data): Replace most of non-elf contents
	with a call to sh_merge_bfd_arch() .

gas:
	* Makefile.am: Regenerate dependecies.
	* Makefile.in: Regenerate.
	* config/tc-sh.c (valid_arch): Make unsigned.
	(preset_target_arch): Likewise.
	(md_begin): Use new architecture flags system.
	(get_specific): Likewise.
	(assemble_ppi): Likewise.
	(md_assemble): Likewise. Also fix error check for bad opcodes.
	(md_parse_option): Likewise. Also generate -isa values according
	to the table in bfd/cpu-sh.c instead of just constants. Also
	allow <arch>-up ISA variants.
	(sh_elf_final_processing): Replace if-else chain with a call to
	sh_find_elf_flags().
	* testsuite/gas/sh/arch: New directory.
	* testsuite/gas/sh/arch/arch.exp: New test script.
	* testsuite/gas/sh/arch/arch_expected.txt: New file.
	* testsuite/gas/sh/arch/sh.s: New file.
	* testsuite/gas/sh/arch/sh2.s: New file.
	* testsuite/gas/sh/arch/sh-dsp.s: New file.
	* testsuite/gas/sh/arch/sh2e.s: New file.
	* testsuite/gas/sh/arch/sh3-nommu.s: New file.
	* testsuite/gas/sh/arch/sh3.s: New file.
	* testsuite/gas/sh/arch/sh3-dsp.s: New file.
	* testsuite/gas/sh/arch/sh3e.s: New file.
	* testsuite/gas/sh/arch/sh4-nommu-nofpu.s: New file.
	* testsuite/gas/sh/arch/sh4-nofpu.s: New file.
	* testsuite/gas/sh/arch/sh4.s: New file.
	* testsuite/gas/sh/arch/sh4a-nofpu.s: New file.
	* testsuite/gas/sh/arch/sh4al-dsp.s: New file.
	* testsuite/gas/sh/arch/sh4a.s: New file.

include/elf:
	* sh.h (EF_SH_HAS_DSP): Remove.
	(EF_SH_HAS_FP): Remove.
	(EF_SH_MERGE_MACH): Remove.
	(EF_SH4_NOFPU): Convert to decimal.
	(EF_SH4A_NOFPU): Likewise.
	(EF_SH4_NOMMU_NOFPU): Likewise.
	(EF_SH3_NOMMU): Add new macro.
	(EF_SH_BFD_TABLE): Likewise.
	(sh_find_elf_flags): Add prototype.
	(sh_elf_get_flags_from_mach): Likewise.

opcodes:
	* sh-dis.c (target_arch): Make unsigned.
	(print_insn_sh): Replace (most of) switch with a call to
	sh_get_arch_from_bfd_mach(). Also use new architecture flags system.
	* sh-opc.h: Redefine architecture flags values.
	Add sh3-nommu architecture.
	Reorganise <arch>_up macros so they make more visual sense.
	(SH_MERGE_ARCH_SET): Define new macro.
	(SH_VALID_BASE_ARCH_SET): Likewise.
	(SH_VALID_MMU_ARCH_SET): Likewise.
	(SH_VALID_CO_ARCH_SET): Likewise.
	(SH_VALID_ARCH_SET): Likewise.
	(SH_MERGE_ARCH_SET_VALID): Likewise.
	(SH_ARCH_SET_HAS_FPU): Likewise.
	(SH_ARCH_SET_HAS_DSP): Likewise.
	(SH_ARCH_UNKNOWN_ARCH): Likewise.
	(sh_get_arch_from_bfd_mach): Add prototype.
	(sh_get_arch_up_from_bfd_mach): Likewise.
	(sh_get_bfd_mach_from_arch_set): Likewise.
	(sh_merge_bfd_arc): Likewise.

ld:
	* testsuite/ld-sh/arch/arch.exp: New test script.
	* testsuite/ld-sh/arch/arch_expected.txt: New file.
	* testsuite/ld-sh/arch/sh.s: New file.
	* testsuite/ld-sh/arch/sh2.s: New file.
	* testsuite/ld-sh/arch/sh-dsp.s: New file.
	* testsuite/ld-sh/arch/sh2e.s: New file.
	* testsuite/ld-sh/arch/sh3-nommu.s: New file.
	* testsuite/ld-sh/arch/sh3.s: New file.
	* testsuite/ld-sh/arch/sh3-dsp.s: New file.
	* testsuite/ld-sh/arch/sh3e.s: New file.
	* testsuite/ld-sh/arch/sh4-nommu-nofpu.s: New file.
	* testsuite/ld-sh/arch/sh4-nofpu.s: New file.
	* testsuite/ld-sh/arch/sh4.s: New file.
	* testsuite/ld-sh/arch/sh4a-nofpu.s: New file.
	* testsuite/ld-sh/arch/sh4al-dsp.s: New file.
	* testsuite/ld-sh/arch/sh4a.s: New file.
@
text
@d911 2
a912 1
hash.lo: hash.c $(INCDIR)/filenames.h $(INCDIR)/objalloc.h $(INCDIR)/libiberty.h
d1298 2
a1299 1
  $(INCDIR)/libiberty.h elf32-target.h
d1311 2
a1312 1
  $(INCDIR)/libiberty.h elf32-target.h
@


1.136
log
@2004-05-27  Michael Chastain  <mec.gnu@@mindspring.com>

	* Makefile.am (bfdver.h): Use explicit filename, not $< .
	* Makefile.in: Regenerate.
@
text
@d936 1
a937 1
cpu-cris.lo: cpu-cris.c $(INCDIR)/filenames.h
d973 1
a973 1
cpu-sh.lo: cpu-sh.c $(INCDIR)/filenames.h
d1159 1
a1159 2
elf32-cr16c.lo: elf32-cr16c.c $(INCDIR)/filenames.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
d1161 2
a1162 1
  elf32-target.h
d1297 1
a1297 1
  elf32-target.h
d1309 1
a1309 1
  elf32-target.h
d1335 1
a1335 2
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h elfcore.h \
  $(INCDIR)/safe-ctype.h
d1338 1
a1338 1
  $(INCDIR)/elf/external.h $(INCDIR)/libiberty.h
d1541 1
a1541 2
xtensa-modules.lo: xtensa-modules.c $(INCDIR)/xtensa-isa.h \
  $(INCDIR)/xtensa-isa-internal.h
d1618 1
a1618 2
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h elfcore.h \
  $(INCDIR)/safe-ctype.h
@


1.135
log
@Add support for an m88k-openbsd target
@
text
@d872 1
a872 1
bfdver.h: version.h Makefile.in
d877 1
a877 1
	  bfd_version_date=`sed -n -e 's/.*DATE //p' < $<` ;\
d880 1
a880 1
	sed -e "s/@@bfd_version@@/$$bfd_version/" -e "s/@@bfd_version_string@@/$$bfd_version_string/" < $< > $@@
@


1.134
log
@	* configure.in (is_release): Remove.
	(bfd_version_date, bfd_version, bfd_version_string): Likewise.
	(AC_OUTPUT): Don't output bfdver.h from version.h.
	* configure: Regenerate.
	* Makefile.am (RELEASE): New variable.
	(bfdver.h): New target.
	* Makefile.in: Regenerate.
	* doc/Makefile.in: Likewise.
@
text
@d288 1
d454 1
d1408 3
@


1.133
log
@	* Makefile.am (config.status): Don't depend on version.h.
	* Makefile.in: Regenerate.
@
text
@d5 3
d869 10
@


1.132
log
@Add --hash-size switch to the linker
@
text
@d863 2
a864 3
# We want to rerun configure if config.bfd, configure.host or version.h change.
config.status: $(srcdir)/configure $(srcdir)/config.bfd \
		$(srcdir)/configure.host $(srcdir)/version.h
@


1.131
log
@	* elflink.c: Include libiberty.h.
	* Makefile.am (elflink.lo): Depend on libiberty.h.
	* Makefile.in: Regenerate.
@
text
@d897 1
a897 1
hash.lo: hash.c $(INCDIR)/filenames.h $(INCDIR)/objalloc.h
@


1.130
log
@Add (linker) support for CR16C processor
@
text
@d1325 1
a1325 1
  $(INCDIR)/elf/external.h
@


1.129
log
@	* Makefile.am: Remove all mention of elflink.h.
	* Makefile.in: Regenerate.
	* bfd-in.h (bfd_elf_discard_info): Declare.
	(bfd_elf32_discard_info, bfd_elf64_discard_info): Delete.
	* bfd-in2.h: Regenerate.
	* elf-bfd.h (bfd_elf32_print_symbol, bfd_elf64_print_symbol,
	bfd_elf32_link_record_dynamic_symbol,
	bfd_elf64_link_record_dynamic_symbol,
	_bfd_elf_link_record_dynamic_symbol, bfd_elf32_bfd_final_link,
	bfd_elf64_bfd_final_link, elf_link_record_local_dynamic_symbol,
	_bfd_elf32_link_record_local_dynamic_symbol,
	_bfd_elf64_link_record_local_dynamic_symbol,
	_bfd_elf32_gc_sections, _bfd_elf32_gc_common_finalize_got_offsets,
	_bfd_elf32_gc_common_final_link, _bfd_elf64_gc_common_final_link,
	_bfd_elf32_gc_record_vtinherit, _bfd_elf32_gc_record_vtentry,
	_bfd_elf64_gc_sections, _bfd_elf64_gc_common_finalize_got_offsets,
	_bfd_elf64_gc_record_vtinherit, _bfd_elf64_gc_record_vtentry,
	_bfd_elf32_reloc_symbol_deleted_p,
	_bfd_elf64_reloc_symbol_deleted_p): Delete.
	(bfd_elf_link_record_dynamic_symbol,
	bfd_elf_link_record_local_dynamic_symbol,
	bfd_elf_final_link, bfd_elf_gc_sections,
	bfd_elf_gc_record_vtinherit, bfd_elf_gc_record_vtentry,
	bfd_elf_gc_common_finalize_got_offsets, bfd_elf_gc_common_final_link,
	bfd_elf_reloc_symbol_deleted_p): Declare.
	(WILL_CALL_FINISH_DYNAMIC_SYMBOL): Define.
	* elf32-arm.h: Update for changed function names.  Remove local
	WILL_CALL_FINISH_DYNAMIC_SECTION define.
	* elf-hppa.h, elf-m10300.c, elf32-cris.c, elf32-d10v.c, elf32-dlx.c,
	* elf32-fr30.c, elf32-frv.c, elf32-h8300.c, elf32-hppa.c, elf32-i386.c,
	* elf32-iq2000.c, elf32-m32r.c, elf32-m68hc1x.c, elf32-m68k.c,
	* elf32-mcore.c, elf32-openrisc.c, elf32-ppc.c, elf32-s390.c,
	* elf32-sh.c, elf32-sparc.c, elf32-v850.c, elf32-vax.c,
	* elf32-xstormy16.c, elf32-xtensa.c, elf64-alpha.c, elf64-hppa.c,
	* elf64-mmix.c, elf64-ppc.c, elf64-s390.c, elf64-sh64.c, elf64-sparc.c,
	* elf64-x86-64.c, elfxx-ia64.c, elfxx-mips.c, elfxx-target.h: Likewise.
	* elfxx-target.h (bfd_elfNN_bfd_final_link): Define.
	(bfd_elfNN_print_symbol): Define.
	* elfcode.h: Don't include elflink.h.
	(elf_bfd_discard_info, elf_reloc_symbol_deleted_p,
	elf_link_record_dynamic_symbol, elf_bfd_final_link, elf_gc_sections,
	elf_gc_common_finalize_got_offsets, elf_gc_common_final_link,
	elf_gc_record_vtinherit, elf_gc_record_vtentry,
	elf_link_record_local_dynamic_symbol): Don't define.
	* elflink.c: Update for changed function names.  Move elflink.h
	code here.
	* elflink.h: Delete file.
	* po/SRC-POTFILES.in: Regenerate.
	* po/bfd.pot: Regenerate.
doc/
	* bfdint.texi: Remove all mention of elflink.h.
@
text
@d58 1
d115 1
d218 1
d384 1
d922 1
d1144 4
@


1.128
log
@	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.
	* aclocal.m4: Regenerate.
	* config.in: Regenerate.
	* po/bfd.pot: Regenerate.
doc/
	* Makefile.in: Regenerate.
@
text
@d591 1
a591 1
	elf64-hppa.h elfcode.h elfcore.h elflink.h \
d1313 1
a1313 1
  elflink.h $(INCDIR)/safe-ctype.h
d1595 1
a1595 1
  elflink.h $(INCDIR)/safe-ctype.h
@


1.127
log
@make "dep-am"
@
text
@d1163 1
a1163 1
  elf32-target.h
@


1.127.6.1
log
@Merge from mainline
@
text
@d591 1
a591 1
	elf64-hppa.h elfcode.h elfcore.h \
d1163 1
a1163 1
  $(INCDIR)/hashtab.h elf32-target.h
d1313 1
a1313 1
  $(INCDIR)/safe-ctype.h
d1595 1
a1595 1
  $(INCDIR)/safe-ctype.h
@


1.127.6.2
log
@	* elflink.c: Include libiberty.h.
	* Makefile.am (elflink.lo): Depend on libiberty.h.
	* Makefile.in: Regenerate.
@
text
@d1316 1
a1316 1
  $(INCDIR)/elf/external.h $(INCDIR)/libiberty.h
@


1.127.8.1
log
@Merge mainline to intercu branch.
@
text
@d1163 1
a1163 1
  $(INCDIR)/elf/dwarf2.h $(INCDIR)/hashtab.h elf32-target.h
@


1.127.8.2
log
@Merge GDB mainline of 20040402 to intercu branch.
@
text
@a57 1
	cpu-cr16c.lo \
a113 1
	cpu-cr16c.c \
a215 1
	elf32-cr16c.lo \
a380 1
	elf32-cr16c.c \
d591 1
a591 1
	elf64-hppa.h elfcode.h elfcore.h \
a917 1
cpu-cr16c.lo: cpu-cr16c.c $(INCDIR)/filenames.h
a1139 4
elf32-cr16c.lo: elf32-cr16c.c $(INCDIR)/filenames.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/elf/cr16c.h $(INCDIR)/elf/reloc-macros.h \
  elf32-target.h
d1313 1
a1313 1
  $(INCDIR)/safe-ctype.h
d1595 1
a1595 1
  $(INCDIR)/safe-ctype.h
@


1.127.8.3
log
@Merge mainline to intercu branch - 2004-09-15
@
text
@a4 3
# Uncomment the following line when doing a release.
# RELEASE=y

a59 1
	cpu-crx.lo \
a115 1
	cpu-crx.c \
a219 1
	elf32-crx.lo \
a252 1
	elf32-sh-symbian.lo \
a284 1
	m88kopenbsd.lo \
a385 1
	elf32-crx.c \
a419 1
	elf32-sh-symbian.c \
a449 1
	m88kopenbsd.c \
d863 3
a865 2
# We want to rerun configure if configure, config.bfd or configure.host change.
config.status: $(srcdir)/configure $(srcdir)/config.bfd $(srcdir)/configure.host
a867 10
bfdver.h: $(srcdir)/version.h $(srcdir)/Makefile.in
	@@echo "creating $@@"
	@@bfd_version=`echo "$(VERSION)" | sed -e 's/\([^\.]*\)\.*\([^\.]*\)\.*\([^\.]*\)\.*\([^\.]*\)\.*\([^\.]*\).*/\1.00\2.00\3.00\4.00\5/' -e 's/\([^\.]*\)\..*\(..\)\..*\(..\)\..*\(..\)\..*\(..\)$$/\1\2\3\4\5/'` ;\
	bfd_version_string="\"$(VERSION)\"" ;\
	if test "x$(RELEASE)" = x ; then \
	  bfd_version_date=`sed -n -e 's/.*DATE //p' < $(srcdir)/version.h` ;\
	  bfd_version_string="\"$(VERSION) $${bfd_version_date}\"" ;\
	fi ;\
	sed -e "s/@@bfd_version@@/$$bfd_version/" -e "s/@@bfd_version_string@@/$$bfd_version_string/" < $(srcdir)/version.h > $@@

d897 1
a897 2
hash.lo: hash.c $(INCDIR)/filenames.h $(INCDIR)/objalloc.h \
  $(INCDIR)/libiberty.h
d922 1
a923 2
cpu-cr16c.lo: cpu-cr16c.c $(INCDIR)/filenames.h
cpu-crx.lo: cpu-crx.c $(INCDIR)/filenames.h
d959 1
a959 1
cpu-sh.lo: cpu-sh.c $(INCDIR)/filenames.h $(srcdir)/../opcodes/sh-opc.h
d1145 2
a1146 1
elf32-cr16c.lo: elf32-cr16c.c $(INCDIR)/filenames.h \
d1148 1
a1148 2
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h elf32-target.h
a1152 4
elf32-crx.lo: elf32-crx.c $(INCDIR)/filenames.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/elf/crx.h $(INCDIR)/elf/reloc-macros.h \
  elf32-target.h
a1282 1
  $(INCDIR)/libiberty.h $(srcdir)/../opcodes/sh-opc.h \
a1294 1
  $(INCDIR)/libiberty.h $(srcdir)/../opcodes/sh-opc.h \
a1295 5
elf32-sh-symbian.lo: elf32-sh-symbian.c elf32-sh.c $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/elf/sh.h \
  $(INCDIR)/elf/reloc-macros.h $(INCDIR)/libiberty.h \
  $(srcdir)/../opcodes/sh-opc.h elf32-target.h
d1321 2
a1322 1
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h elfcore.h
d1325 1
a1325 1
  $(INCDIR)/elf/external.h $(INCDIR)/safe-ctype.h $(INCDIR)/libiberty.h
a1394 3
m88kopenbsd.lo: m88kopenbsd.c netbsd.h $(INCDIR)/filenames.h \
  libaout.h $(INCDIR)/bfdlink.h aout-target.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
d1525 2
a1526 1
xtensa-modules.lo: xtensa-modules.c $(INCDIR)/xtensa-isa-internal.h
d1603 2
a1604 1
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h elfcore.h
@


1.127.8.4
log
@Merge from mainline.
@
text
@d3 1
a3 1
AUTOMAKE_OPTIONS = 1.9 cygnus
a577 8
# We want to rerun configure if configure.in, config.bfd or
# configure.host change. configure.in is needed since the version
# number in Makefile comes from configure.in.
CONFIG_STATUS_DEPENDENCIES = \
	$(srcdir)/configure.in \
	$(srcdir)/config.bfd \
	$(srcdir)/configure.host

d766 2
d874 4
d1175 3
a1177 3
elf32-crx.lo: elf32-crx.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/elf/crx.h $(INCDIR)/elf/reloc-macros.h \
d1324 4
a1327 4
elf32-sh-symbian.lo: elf32-sh-symbian.c elf32-sh.c \
  $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/sh.h $(INCDIR)/elf/reloc-macros.h $(INCDIR)/libiberty.h \
d1560 1
a1560 2
xtensa-modules.lo: xtensa-modules.c $(INCDIR)/xtensa-isa.h \
  $(INCDIR)/xtensa-isa-internal.h
@


1.127.12.1
log
@Merge with mainline cagney_tramp-20040321-mergepoint.
@
text
@d1163 1
a1163 1
  $(INCDIR)/elf/dwarf2.h $(INCDIR)/hashtab.h elf32-target.h
@


1.126
log
@2003-10-10  H.J. Lu  <hongjiu.lu@@intel.com>

	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.
	* doc/Makefile.in: Likewise.
@
text
@d1619 2
a1620 1
  $(INCDIR)/elf/reloc-macros.h elf32-target.h
d1624 2
a1625 1
  $(INCDIR)/elf/reloc-macros.h elf64-target.h
@


1.125
log
@	* dep-in.sed: Remove libintl.h.
	* Makefile.am (SRC-POTFILES.in, BLD-POTFILES.in): Unset LC_COLLATE.
	(POTFILES.in): Remove target.
	* Makefile.in: Regenerate.
@
text
@d1100 1
a1100 1
  $(INCDIR)/coff/internal.h libcoff.h
d1313 1
a1313 1
  elflink.h
d1595 1
a1595 1
  elflink.h
@


1.124
log
@	* Makefile.am (BFD32_BACKENDS): Add elf32-am33lin.lo.
	(BFD32_BACKENDS_CFILES): elf32-am33lin.c not elf32-am33lin.lo.
	Run "make dep-am".
	* Makefile.in: Regenerate.
@
text
@d609 2
a610 1
	for file in $(SRC_POTFILES); do echo $$file; done | sort > tmp.src \
d614 2
a615 1
	for file in $(BLD_POTFILES); do echo $$file; done | sort > tmp.bld \
a616 10

# The following target is retained for upgrade purposes.
# This target used to exist in older versions of this makefile, and was
# referenced by <builddir>/po/Makefile (which is created from <srcdir>/po/Make-in)
# So old versions of <builddir>/po/Makefile will try to regenerate themselves
# when make is next run, but that dependency cannot be completed without a build
# of po/POTFILES.in.  Hence the presence of this rule.  This rule will be deleted
# once it is no longer needed - probably in the fall of 2001.
po/POTFILES.in:

@


1.123
log
@2001-09-12  Alexandre Oliva  <aoliva@@redhat.com>
* elf32-am33lin.c (ELF_MACHINE_CODE): Redefine to EM_MN10300.
(ELF_MACHINE_ALT1): Define to EM_CYGNUS_MN10300.
2001-06-02  Nick Clifton  <nickc@@cambridge.redhat.com>
* elf32-am33lin.c: Rename global functions.
2001-05-09  Alexandre Oliva  <aoliva@@redhat.com>
* config.bfd (am33_2.0, am33_2.0-*-linux*): Added.
* configure.in (bfd_elf32_am33lin_vec): Added.
* Makefile.am (BFD32_BACKENDS): Added elf32-am33lin.lo.
(elf32-am33lin.lo): List dependencies.
* aclocal.m4, configure, Makefile.in: Rebuilt.
* elf-m10300.c (TARGET_LITTLE_SYM, TARGET_LITTLE_NAME,
ELF_ARCH, ELF_MACHINE_CODE, ELF_MAXPAGESIZE): Define only if
ELF_ARCH was not defined before.
(elf_symbol_leading_char): Define if not defined.
* elf32-am33lin.c: Override the definitions above.
* targets.c (bfd_elf32_am33lin_vec): New.
@
text
@d211 1
d376 1
a376 1
	elf32-am33lin.lo \
d1128 4
a1131 4
elf32-am33lin.lo: elf32-am33lin.c $(INCDIR)/filenames.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/elf/mn10300.h $(INCDIR)/elf/reloc-macros.h \
  elf32-target.h elf-m10300.c
@


1.122
log
@* bfd/Makefile.am (config.status): Depend on version.h.
Run "make dep-am" in bfd/ and elsewhere, and regen files.
@
text
@d375 1
d1127 4
@


1.121
log
@Replace <ctype.h> with "safe-ctype.h"
@
text
@d865 3
a867 2
# We want to rerun configure if config.bfd or configure.host change.
config.status: $(srcdir)/configure $(srcdir)/config.bfd $(srcdir)/configure.host
d922 1
a922 1
cpu-arm.lo: cpu-arm.c $(INCDIR)/filenames.h
d1211 3
a1213 2
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/elf/m68hc11.h \
  $(INCDIR)/elf/reloc-macros.h elf32-target.h elf32-m68hc1x.h
d1215 4
a1218 4
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/m68hc11.h \
  $(INCDIR)/elf/reloc-macros.h $(INCDIR)/opcode/m68hc11.h \
  elf32-target.h elf32-m68hc1x.h
d1221 3
a1223 2
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/elf/m68hc11.h \
  $(INCDIR)/elf/reloc-macros.h elf32-target.h elf32-m68hc1x.h
d1307 5
a1311 3
elf32-xtensa.lo: elf32-xtensa.c $(INCDIR)/bfdlink.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/xtensa.h $(INCDIR)/xtensa-isa.h elf32-target.h
d1421 2
a1422 2
pef.lo: pef.c pef.h pef-traceback.h $(INCDIR)/filenames.h \
  $(INCDIR)/libiberty.h $(INCDIR)/safe-ctype.h
@


1.120
log
@	* Makefile.am (BFD32_BACKENDS): Add elf32-m68hc1x.lo.
	(elf32-m68hc1x.lo): Update dependencies
	* configure.in: Add elf32-m68hc1x.lo.
	* configure: Rebuild.
	* Makefile.in: Rebuild.
@
text
@d1417 1
a1417 1
  $(INCDIR)/libiberty.h
@


1.119
log
@Add Xtensa port
@
text
@d234 1
d398 1
d1211 1
a1211 1
  $(INCDIR)/elf/reloc-macros.h elf32-target.h
d1216 5
a1220 1
  elf32-target.h
@


1.119.6.1
log
@Merge from mainline.
@
text
@a233 1
	elf32-m68hc1x.lo \
a396 1
	elf32-m68hc1x.c \
d1209 1
a1209 1
  $(INCDIR)/elf/reloc-macros.h elf32-target.h elf32-m68hc1x.h
d1214 1
a1214 5
  elf32-target.h elf32-m68hc1x.h
elf32-m68hc1x.lo: elf32-m68hc1x.c $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/elf/m68hc11.h \
  $(INCDIR)/elf/reloc-macros.h elf32-target.h elf32-m68hc1x.h
@


1.118
log
@Regenerate dependencies.
@
text
@d104 1
d159 1
d254 1
d323 3
a325 1
	xsym.lo
d416 1
d484 3
a486 1
	xsym.c
d968 1
d1298 3
d1505 4
@


1.117
log
@bfd_follow_gnu_debuglink: New function.  Follow the pointer contained inside a
.gnu_debuglink section.
@
text
@d880 2
a881 2
opncls.lo: opncls.c $(INCDIR)/filenames.h $(INCDIR)/libiberty.h \
  $(INCDIR)/objalloc.h
d1253 1
a1253 1
  elf32-target.h
@


1.116
log
@include/elf/ChangeLog
	* sh.h: Split out various bits to bfd/elf32-sh64.h.

include/opcode/ChangeLog
	* m68hc11.h (cpu6812s): Define.

bfd/ChangeLog
	* elf-bfd.h (struct bfd_elf_section_data): Remove tdata.  Change
	dynindx to an int.  Rearrange for better packing.
	* elf.c (_bfd_elf_new_section_hook): Don't alloc if already done.
	* elf32-mips.c (bfd_elf32_new_section_hook): Define.
	* elf32-sh64.h: New.  Split out from include/elf/sh.h.
	(struct _sh64_elf_section_data): New struct.
	(sh64_elf_section_data): Don't dereference sh64_info (was tdata).
	* elf32-sh64-com.c: Include elf32-sh64.h.
	* elf32-sh64.c: Likewise.
	(sh64_elf_new_section_hook): New function.
	(bfd_elf32_new_section_hook): Define.
	(sh64_elf_fake_sections): Adjust for sh64_elf_section_data change.
	(sh64_bfd_elf_copy_private_section_data): Likewise.
	(sh64_elf_final_write_processing): Likewise.
	* elf32-sparc.c (struct elf32_sparc_section_data): New.
	(elf32_sparc_new_section_hook): New function.
	(SET_SEC_DO_RELAX, SEC_DO_RELAX): Delete.
	(sec_do_relax): Define.
	(elf32_sparc_relax_section): Adjust to use sec_do_relax.
	(elf32_sparc_relocate_section): Likewise.
	* elf64-mips.c (bfd_elf64_new_section_hook): Define.
	* elf64-mmix.c (struct _mmix_elf_section_data): New.
	(mmix_elf_section_data): Define.  Use throughout file.
	(mmix_elf_new_section_hook): New function.
	(bfd_elf64_new_section_hook): Define.
	* elf64-ppc.c (struct _ppc64_elf_section_data): New.
	(ppc64_elf_section_data): Define.  Use throughout.
	(ppc64_elf_new_section_hook): New function.
	(bfd_elf64_new_section_hook): Define.
	* elf64-sparc.c (struct sparc64_elf_section_data): New.
	(sparc64_elf_new_section_hook): New function.
	(SET_SEC_DO_RELAX, SEC_DO_RELAX): Delete.
	(sec_do_relax): Define.
	(sparc64_elf_relax_section): Adjust to use sec_do_relax.
	(sparc64_elf_relocate_section): Likewise.
	(bfd_elf64_new_section_hook): Define.
	* elfn32-mips.c (bfd_elf32_new_section_hook): Define.
	* elfxx-mips.c (struct _mips_elf_section_data): New.
	(mips_elf_section_data): Define.  Use throughout.
	(_bfd_mips_elf_new_section_hook): New function.
	(mips_elf_create_got_section): Don't alloc used_by_bfd.
	* elfxx-mips.h (_bfd_mips_elf_new_section_hook): Declare.
	* elfxx-target.h (bfd_elfNN_new_section_hook): Add #ifndef.
	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.

opcodes/ChangeLog
	* sh64-dis.c: Include elf32-sh64.h.
	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.

gas/ChangeLog
	* config/tc-sh64.c (shmedia_frob_section_type): Adjust for changed
	sh64_elf_section_data.
	* config/tc-sh64.h: Include elf32-sh64.h.
	* config/tc-m68hc11.c: Don't include stdio.h.
	(md_show_usage): Fix missing continuation.
	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.

ld/ChangeLog
	* emultempl/sh64elf.em: Include elf32-sh64.h.
	(sh64_elf_${EMULATION_NAME}_before_allocation): Adjust for changed
	sh64_elf_section_data.
	(sh64_elf_${EMULATION_NAME}_after_allocation): Likewise.
@
text
@d880 2
a881 1
opncls.lo: opncls.c $(INCDIR)/filenames.h $(INCDIR)/objalloc.h
@


1.115
log
@	* elf64-ppc.c: Include elf/ppc64.h rather than elf/ppc.h.
	(R_PPC_*): Rename all occurrences to R_PPC64_*.
	(R_PPC64_ADDR30): Rename all occurrences to R_PPC64_REL30.
	(enum elf_ppc_reloc_type): Ditto to enum elf_ppc64_reloc_type.
	(ppc64_elf_gc_sweep_hook): Handle R_PPC64_REL30 along with other
	relative relocs, not with absolute ones.
	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.
	* po/SRC-POTFILES.in: Regenerate.
@
text
@d1256 1
a1256 1
  elf32-sh.c $(INCDIR)/elf/sh.h $(INCDIR)/elf/reloc-macros.h \
d1261 1
a1261 1
  $(INCDIR)/elf/reloc-macros.h $(srcdir)/../opcodes/sh64-opc.h
@


1.114
log
@2002-01-08  Klee Dienes  <kdienes@@apple.com>

        * Makefile.am (ALL_MACHINES): Use cpu-msp430.lo, not cpu-msp430.c.
        (BFD32_BACKENDS): Use elf32-msp430.lo, not elf32-msp430.c.
        * Makefile.in: Regenerate.
@
text
@d1021 2
a1022 1
  $(INCDIR)/coff/internal.h libcoff.h coffcode.h coffswap.h
d1184 4
a1187 4
elf32-iq2000.lo: elf32-iq2000.c $(INCDIR)/filenames.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/elf/iq2000.h $(INCDIR)/elf/reloc-macros.h \
  elf32-target.h
d1219 6
a1224 5
elfxx-mips.lo: elfxx-mips.c $(INCDIR)/filenames.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h elfxx-mips.h $(INCDIR)/elf/mips.h \
  $(INCDIR)/elf/reloc-macros.h $(INCDIR)/coff/sym.h $(INCDIR)/coff/symconst.h \
  $(INCDIR)/coff/ecoff.h $(INCDIR)/coff/mips.h $(INCDIR)/coff/external.h
d1231 4
a1234 3
elf32-msp430.lo: elf32-msp430.c $(INCDIR)/filenames.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/elf/msp430.h $(INCDIR)/elf/reloc-macros.h \
d1551 1
a1551 1
  $(INCDIR)/elf/external.h $(INCDIR)/elf/ppc.h $(INCDIR)/elf/reloc-macros.h \
@


1.113
log
@	* Makefile.am (ALL_MACHINES): Add cpu-iq2000.lo.
	(ALL_MACHINES_CFILES): Add cpu-iq2000.c.
	(BFD32_BACKENDS): Add elf32-iq2000.lo.
	(BFD32_BACKENDS_CFILES): Add elf32-iq2000.c.
	(cpu-iq2000.lo): New target.
	* Makefile.in: Regenerate.
	* config.bfd: Handle iq2000-*-elf.
	* archures.c (bfd_architecture): Add bfd_{arch,mach}_iq2000.
	(bfd_archures_list): Add bfd_iq2000_arch.
	* configure.in: Handle bfd_elf32_iq2000_vec.
	* configure: Regenerate.
	* reloc.c: Add BFD_RELOC_IQ2000_OFFSET_16, BFD_RELOC_IQ2000_OFFSET_21,
	and BFD_RELOC_IQ2000_UHI16.
	* targets.c (bfd_elf32_iq2000_vec): Declare.
	(bfd_target_vector): Add bfd_elf32_iq2000_vec.
	* elf.c (prep_headers): Set e_machine to EM_IQ2000.
	* cpu-iq2000.c: New file.
	* elf32-iq2000.c: Likewise.
	* libbfd.h: Regenerate.
	* bfd-in2.h: Likewise.
@
text
@d84 1
a84 1
	cpu-msp430.c \
d239 1
a239 1
	elf32-msp430.c \
@


1.112
log
@Add support for msp430.
@
text
@d73 1
d127 1
d228 1
d387 1
d928 1
d1182 4
@


1.111
log
@2002-11-16  Klee Dienes  <kdienes@@apple.com>

	* Makefile.am (BFD32_LIBS): Add bfdwin.lo, bfdio.lo.
	(BFD32_LIBS_CFILES): Add bfdwin.c, bfdio.c.
	(BFD_H_FILES): Add bfdwin.c, bfdio.c.
	(LIBBFD_H_FILES): Add bfdwin.c, bfdio.c.
	Add dependencies for bfdwin.c, bfdio.c.
	* bfd.c: Remove bfd_get_mtime, bfd_get_size.
	* libbfd.c: Remove real_read, bfd_bread, _bfd_window_internal,
	bfd_init_window, bfd_free_window, bfd_get_file_window, bfd_bwrite,
	bfd_tell, bfd_flush, bfd_stat, bfd_seek.
	* bfdio.c: New file.  Contains real_read, bfd_bread, bfd_write,
	bfd_tell, bfd_flush, bfd_stat, bfd_seek, bfd_ge_mtime,
	bfd_get_size (moved from libbfd.c and bfd.c).
	* bfdwin.c New file.  Contains _bfd_window_internal,
	bfd_init_window, bfd_free_window, bfd_get_file_window (moved from
	libbfd.c and bfd.c).
	* po/SRC-POTFILES.in: Regenerate.
	* po/bfd.pot: Regenerate.
	* libbfd.h: Regenerate.
	* bfd-in2.h: Regenerate.
	* aclocal.m4: Regenerate.
	* Makefile.in: Regenerate.
	* configure: Regenerate.

2002-11-16  Klee Dienes  <kdienes@@apple.com>

	* Makefile.am (DOCFILES): Add bfdwin.texi, bfdio.texi.
	(PROTOS): Add bfdio.p, bfdwin.p.
	(SRCDOC): Add bfdio.c, bfdwin.c.
	(SRCPROT): Add bfdio.c, bfdwin.c.
	(SRCIPROT): Add bfdio.c, bfdwin.c.
	(LIBBFD_H_DEP): Add bfdio.c, bfdwin.c.
	(BFD_H_DEP): Add bfdio.c, bfdwin.c.
	Add rules for bfdio.texi, bfdwin.text.
	* bfd.texinfo: Include bfdio.texi.
@
text
@d83 1
d136 1
d236 1
d394 1
d934 1
d1220 4
@


1.110
log
@Add support for PEF, Mach-O, xSYM
@
text
@d31 2
a32 1
	archive.lo archures.lo bfd.lo cache.lo coffgen.lo corefile.lo \
d41 2
a42 1
	archive.c archures.c bfd.c cache.c coffgen.c corefile.c \
d799 2
a800 1
	reloc.c syms.c bfd.c archive.c corefile.c targets.c format.c
d802 2
a803 1
LIBBFD_H_FILES = libbfd-in.h init.c libbfd.c cache.c reloc.c archures.c elf.c
d863 2
@


1.109
log
@	* Makefile.am: Remove entries for elf32-qnx.[ch].
	* Makefile.in: Regenerate.
	* config.bfd: Change arm-nto to use bfd_elf32_{big|little}arm_vec,
	ppc-nto to use bfd_elf32_powerpc{le}_vec, sh-nto to use
	bfd_elf32_sh{l}_vec, and i386-nto to use bfd_elf32_i386_vec.
	* configure.in: Remove support for bfd_elf32_sh{l}qnx_vec,
	bfd_elf32_powerpc{le}qnx_vec, bfd_elf32_{big|little}armqnx_vec,
	and bfd_elf32_i386qnx_vec, and removed elf32-qnx.lo from other targets.
	bfd_elf32_sh{l}_vec, and i386-nto to use bfd_elf32_i386_vec.
	* configure: Regenerate.
	* elf32-qnx.c: Remove.
	* elf32-qnx.h: Remove.
	* elf.c: Remove calls to QNX specific set_nonloadable_filepos,
	is_contained_by_filepos, and copy_private_bfd_data_p.
	* elf32-i386.c: Remove QNX extended bfd support.
	* elf32-ppc.c: Remove QNX extended bfd support.
	* elf32-sh.c: Remove QNX extended bfd support.
	* elfarm-nabi.c: Remove QNX extended bfd support.
	* targets.c: Remove qnx vectors.
	* elfxx-target.h (elf_backend_set_nonloadable_filepos): Remove
	(elf_backend_is_contained_by_filepos): Remove.
	(elf_backend_copy_private_bfd_data_p): Remove.
	* po/SRC-POTFILES.in: Regenerate.
@
text
@d269 1
d281 1
d311 2
a312 1
	xcofflink.lo
d426 1
d438 1
d467 2
a468 1
	xcofflink.c
d572 1
a572 1
	libnlm.h liboasys.h libpei.h libxcoff.h \
d574 2
a575 1
	peicode.h som.h version.h vms.h xcoff-target.h
d1337 2
d1370 2
d1464 1
@


1.108
log
@2002-10-28  H.J. Lu <hjl@@gnu.org>

	* Makefile.am (targets.lo): Depend on Makefile instead of
	config.status.
	(archures.lo): Likewise.
	* Makefile.in: Regenerated.
@
text
@a235 1
	elf32-qnx.lo \
a389 1
	elf32-qnx.c \
d562 1
a562 1
	elf-bfd.h elf-hppa.h elf32-arm.h elf32-hppa.h elf32-qnx.h \
d1100 1
a1100 1
  elf32-arm.h elf32-target.h elf32-qnx.h
d1147 1
a1147 1
  elf32-target.h elf32-qnx.h
d1218 1
a1218 4
  elf32-target.h elf32-qnx.h
elf32-qnx.lo: elf32-qnx.c $(INCDIR)/filenames.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h elf32-qnx.h
d1235 1
a1235 1
  elf32-target.h elf32-qnx.h
@


1.107
log
@	* Makefile.am (BFD32_BACKENDS): Remove elfarmqnx-nabi.lo,
	elf32-i386-fbsd.lo, elf32-i386qnx.lo, elf32-ppcqnx.lo,
	elf32-sh-lin.lo, elf32-sh64-lin.lo, elf32-sh-nbsd.lo,
	elf32-sh64-nbsd.lo, elf32-shqnx.lo.  Add elf32-qnx.lo.
	(BFD32_BACKENDS_CFILES): Likewise for corresponding C files.
	(BFD64_BACKENDS): Remove elf64-sh64-lin.lo, elf64-sh64-nbsd.lo.
	(BFD64_BACKENDS_CFILES): Likewise for corresponding C files.
	(SOURCE_HFILES): Add elf32-qnx.h.
	(BUILD_HFILES): Add bfdver.h.
	Run "make dep-am".
	* Makefile.in: Regenerate.
	* configure.in Update bfd vector dependencies.
	* configure: Regenerate.
	* elf32-i386-fbsd.c: Delete.  Move code to elf32-i386.c.
	* elf32-i386qnx.c: Likewise.
	* elf32-ppcqnx.c: Delete.  Move code to elf32-ppc.c.
	* elf32-sh-nbsd.c: Delete.  Move code to elf32-sh.c.
	* elf32-sh-lin.c: Likewise.
	* elf32-shqnx.c: Likewise.
	* elf32-sh64-lin.c: Delete.  Move code to elf32-sh64.c.
	* elf32-sh64-nbsd.c: Likewise.
	* elf64-sh64-lin.c: Delete.  Move code to elf64-sh64.c.
	* elf64-sh64-nbsd.c: Likewise.
	* elfarmqnx-nabi.c: Delete.  Move code to elfarm-nabi.c.
	* elf32-arm.h (ELF_MAXPAGESIZE): Always define.
	* elf32-i386.c: Remove ELF_ARCH and ELF32_I386_C_INCLUDED tests.
	* elf32-ppc.c: Remove ELF32_PPC_C_INCLUDED tests.
	* elf32-qnx.h (elf_backend_set_nonloadable_filepos): Always define.
	(elf_backend_is_contained_by_filepos): Likewise.
	(elf_backend_copy_private_bfd_data_p): Likewise.
	Globalize and move functions to..
	* elf32-qnx.c: ..here.  New file.
	* elf32-sh.c: Remove ELF_ARCH and ELF32_SH_C_INCLUDED tests.  Don't
	emit target vectors when INCLUDE_SHMEDIA.
	* elf32-sh64.c: Remove ELF_ARCH test.  Move TARGET_* etc. defines to
	end of file.
	* elf64-sh64.c: Remove ELF_ARCH test.
	* elfarm-nabi.c: Remove ELFARM_NABI_C_INCLUDED test.
	* po/BLD-POTFILES.in: Regenerate.
	* po/SRC-POTFILES.in: Regenerate.
@
text
@d657 1
a657 1
targets.lo: targets.c config.status
d660 1
a660 1
archures.lo: archures.c config.status
@


1.106
log
@        * Makefile.am (BFD64_BACKENDS): Remove elf64-alpha-fbsd.
        (BFD64_BACKENDS_CFILES): Likewise.
        * configure.in (bfd_elf64_alpha_freebsd_vec): Use elf64-alpha.
        * elf64-alpha-fbsd.c: Remove file, move code ...
        * elf64-alpha.c: ... here.
        * Makefile.in, configure: Rebuild.
@
text
@a205 1
	elfarmqnx-nabi.lo \
a217 2
	elf32-i386-fbsd.lo \
	elf32-i386qnx.lo \
d236 1
a236 1
	elf32-ppcqnx.lo \
a238 1
	elf32-sh-lin.lo \
a240 4
	elf32-sh64-lin.lo \
	elf32-sh-nbsd.lo \
	elf32-sh64-nbsd.lo \
	elf32-shqnx.lo \
a361 1
	elfarmqnx-nabi.c \
a373 2
	elf32-i386-fbsd.c \
	elf32-i386qnx.c \
d391 1
a391 1
	elf32-ppcqnx.c \
a393 1
	elf32-sh64-lin.c \
a395 4
	elf32-sh-lin.c \
	elf32-sh-nbsd.c \
	elf32-sh64-nbsd.c \
	elf32-shqnx.c \
a484 2
	elf64-sh64-lin.lo \
	elf64-sh64-nbsd.lo \
a510 2
	elf64-sh64-lin.c \
	elf64-sh64-nbsd.c \
d564 7
a570 6
	elf-bfd.h elf-hppa.h elf32-arm.h elf32-hppa.h elf64-hppa.h \
	elfcode.h elfcore.h elflink.h freebsd.h genlink.h go32stub.h \
	libaout.h libbfd.h libcoff.h libecoff.h libhppa.h \
	libieee.h libnlm.h liboasys.h libpei.h netbsd.h nlm-target.h \
	nlmcode.h nlmswap.h ns32k.h peicode.h som.h vms.h libxcoff.h \
	xcoff-target.h version.h
d574 1
a574 1
	elf32-target.h elf64-target.h targmatch.h
d1102 1
a1102 6
  elf32-arm.h elf32-target.h
elfarmqnx-nabi.lo: elfarmqnx-nabi.c elfarm-nabi.c $(INCDIR)/elf/arm.h \
  $(INCDIR)/elf/reloc-macros.h $(INCDIR)/filenames.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h elf32-qnx.h \
  elf32-arm.h elf32-target.h
d1149 1
a1149 9
  elf32-target.h
elf32-i386-fbsd.lo: elf32-i386-fbsd.c $(INCDIR)/filenames.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h elf32-i386.c \
  $(INCDIR)/elf/i386.h $(INCDIR)/elf/reloc-macros.h elf32-target.h
elf32-i386qnx.lo: elf32-i386qnx.c elf32-i386.c $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/elf/i386.h \
  $(INCDIR)/elf/reloc-macros.h elf32-qnx.h elf32-target.h
d1220 4
a1223 5
  elf32-target.h
elf32-ppcqnx.lo: elf32-ppcqnx.c elf32-ppc.c $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/elf/ppc.h \
  $(INCDIR)/elf/reloc-macros.h elf32-qnx.h elf32-target.h
a1232 5
elf32-sh64-lin.lo: elf32-sh64-lin.c elf32-sh64.c $(INCDIR)/filenames.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(srcdir)/../opcodes/sh64-opc.h \
  elf32-sh.c $(INCDIR)/elf/sh.h $(INCDIR)/elf/reloc-macros.h \
  elf32-target.h
d1240 1
a1240 18
  elf32-target.h
elf32-sh-lin.lo: elf32-sh-lin.c $(INCDIR)/filenames.h \
  $(INCDIR)/elf/internal.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h elf32-sh.c \
  $(INCDIR)/elf/sh.h $(INCDIR)/elf/reloc-macros.h elf32-target.h
elf32-sh-nbsd.lo: elf32-sh-nbsd.c elf32-sh.c $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/elf/sh.h \
  $(INCDIR)/elf/reloc-macros.h elf32-target.h
elf32-sh64-nbsd.lo: elf32-sh64-nbsd.c elf32-sh64.c \
  $(INCDIR)/filenames.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
  $(srcdir)/../opcodes/sh64-opc.h elf32-sh.c $(INCDIR)/elf/sh.h \
  $(INCDIR)/elf/reloc-macros.h elf32-target.h
elf32-shqnx.lo: elf32-shqnx.c elf32-sh.c $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/elf/sh.h \
  $(INCDIR)/elf/reloc-macros.h elf32-qnx.h elf32-target.h
a1526 8
elf64-sh64-lin.lo: elf64-sh64-lin.c elf64-sh64.c $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/elf/sh.h \
  $(INCDIR)/elf/reloc-macros.h elf64-target.h
elf64-sh64-nbsd.lo: elf64-sh64-nbsd.c elf64-sh64.c \
  $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/sh.h $(INCDIR)/elf/reloc-macros.h elf64-target.h
@


1.105
log
@	* Makefile.am: Run "make dep-am".
	(BFD_H_FILES): Remove version.h.
	* bfd-in.h (BFD_VERSION, BFD_VERSION_DATE, BFD_VERSION_STRING): Move..
	* version.h: ..to here.
	* configure.in (bfd_version_date): Remove.
	(AC_OUTPUT): Make bfdver.h from version.h.
	* bfd.c: #include "bfdver.h".
	* vms-hdr.c: Likewise.
	* Makefile.in: Regenerate.
	* bfd-in2.h: Regenerate.
	* configure: Regenerate.
	* po/SRC-POTFILES.in: Regenerate.
@
text
@a493 1
	elf64-alpha-fbsd.lo \
a520 1
	elf64-alpha-fbsd.c \
a1543 7
elf64-alpha-fbsd.lo: elf64-alpha-fbsd.c $(INCDIR)/filenames.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h elf64-alpha.c \
  $(INCDIR)/elf/alpha.h $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/sym.h $(INCDIR)/coff/symconst.h \
  $(INCDIR)/coff/ecoff.h $(INCDIR)/coff/alpha.h $(INCDIR)/aout/ar.h \
  libcoff.h libecoff.h ecoffswap.h elf64-target.h
@


1.104
log
@        * Makefile.am: Run dep-am.
        (BFD32_LIBS): Add simple.lo.
        (BFD32_LIBS_CFILES): Add simple.c.
        * Makefile.in: Regenerated.
        * bfd-in2.h: Regenerated.
        * simple.c: New file.
@
text
@d813 1
a813 1
	reloc.c syms.c bfd.c archive.c corefile.c targets.c format.c version.h
d870 1
a870 1
bfd.lo: bfd.c $(INCDIR)/filenames.h $(INCDIR)/libiberty.h \
d907 1
a907 1
simple.lo: simple.c $(INCDIR)/filenames.h
d1506 2
a1507 2
vms-hdr.lo: vms-hdr.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/safe-ctype.h vms.h
@


1.103
log
@* Makefile.am: Add entries for elf32-sh64-lin.c and
elf64-sh64-lin.c. Regenerate.
* Makefile.in: Regenerate.
* config.bfd:  Change sh64eb-*-linux* and sh64-*-linux*
to use sh64 vectors rather than sh vectors.
* configure.in: Add bfd_elf32_sh64lin_vec, bfd_elf32_sh64blin_vec,
bfd_elf64_sh64lin_vec, bfd_elf64_sh64blin_vec.
* configure: Regenerate.
* elf32-sh64-lin.c: New file.
* elf64-sh64-lin.c: New file.
* targets.c: Add bfd_elf32_sh64lin_vec, bfd_elf32_sh64blin_vec,
bfd_elf64_sh64lin_vec, bfd_elf64_sh64blin_vec.
@
text
@d35 1
a35 1
	merge.lo dwarf2.lo
d44 1
a44 1
	merge.c dwarf2.c
d907 1
@


1.102
log
@	* elfcode.h (elf_slurp_reloc_table_from_section): Make "symcount"
	unsigned.  Move "symcount" assignment out of loop.
	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.
	* configure: Regenerate.
	* po/SRC-POTFILES.in: Regnerate.
@
text
@d245 1
d405 1
d502 1
d531 1
d1267 5
d1590 4
@


1.102.2.1
log
@Merge drow-cplus-merge-20021025 to drow-cplus-branch.
@
text
@d35 1
a35 1
	merge.lo dwarf2.lo simple.lo
d44 1
a44 1
	merge.c dwarf2.c simple.c
d206 1
d219 2
d239 1
a239 1
	elf32-qnx.lo \
d242 1
d245 3
d369 1
d382 2
d401 1
a401 1
	elf32-qnx.c \
d406 4
d492 1
d500 1
d519 1
d528 1
d582 6
a587 7
	elf-bfd.h elf-hppa.h elf32-arm.h elf32-hppa.h elf32-qnx.h \
	elf64-hppa.h elfcode.h elfcore.h elflink.h \
	freebsd.h genlink.h go32stub.h \
	libaout.h libbfd.h libcoff.h libecoff.h libhppa.h libieee.h \
	libnlm.h liboasys.h libpei.h libxcoff.h \
	netbsd.h nlm-target.h nlmcode.h nlmswap.h ns32k.h \
	peicode.h som.h version.h vms.h xcoff-target.h
d591 1
a591 1
	bfdver.h elf32-target.h elf64-target.h targmatch.h
d809 1
a809 1
	reloc.c syms.c bfd.c archive.c corefile.c targets.c format.c
d866 1
a866 1
bfd.lo: bfd.c bfdver.h $(INCDIR)/filenames.h $(INCDIR)/libiberty.h \
a902 1
simple.lo: simple.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h
d1118 6
a1123 1
  elf32-arm.h elf32-target.h elf32-qnx.h
d1170 9
a1178 1
  elf32-target.h elf32-qnx.h
d1249 5
a1253 4
  elf32-target.h elf32-qnx.h
elf32-qnx.lo: elf32-qnx.c $(INCDIR)/filenames.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h elf32-qnx.h
d1270 18
a1287 1
  elf32-target.h elf32-qnx.h
d1496 2
a1497 2
vms-hdr.lo: vms-hdr.c bfdver.h $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/safe-ctype.h vms.h
d1536 7
d1581 4
@


1.102.2.2
log
@Merge drow-cplus-branch to:
  cvs rtag -D 2003-12-14 00:00:00 UTC drow-cplus-merge-20031214 gdb+dejagnu
@
text
@d31 1
a31 2
	archive.lo archures.lo bfd.lo bfdio.lo bfdwin.lo \
	cache.lo coffgen.lo corefile.lo \
d40 1
a40 2
	archive.c archures.c bfd.c bfdio.c bfdwin.c \
	cache.c coffgen.c corefile.c \
a70 1
	cpu-iq2000.lo \
a80 1
	cpu-msp430.lo \
a99 1
	cpu-xtensa.lo \
a122 1
	cpu-iq2000.c \
a132 1
	cpu-msp430.c \
a151 1
	cpu-xtensa.c \
a202 1
	elf32-am33lin.lo \
a221 1
	elf32-iq2000.lo \
a224 1
	elf32-m68hc1x.lo \
a231 1
	elf32-msp430.lo \
d236 1
a244 1
	elf32-xtensa.lo \
a269 1
	mach-o.lo \
a280 1
	pef.lo \
d310 1
a310 4
	xcofflink.lo \
	xsym.lo \
	xtensa-isa.lo \
	xtensa-modules.lo
a358 1
	elf32-am33lin.c \
a376 1
	elf32-iq2000.c \
a380 1
	elf32-m68hc1x.c \
a386 1
	elf32-msp430.c \
d391 1
a399 1
	elf32-xtensa.c \
a424 1
	mach-o.c \
a435 1
	pef.c \
d464 1
a464 4
	xcofflink.c \
	xsym.c \
	xtensa-isa.c \
	xtensa-modules.c
d564 1
a564 1
	elf-bfd.h elf-hppa.h elf32-arm.h elf32-hppa.h \
d568 1
a568 1
	libnlm.h liboasys.h libpei.h libxcoff.h mach-o.h \
d570 1
a570 2
	pef.h pef-traceback.h peicode.h som.h version.h \
	vms.h xcoff-target.h xsym.h
d582 1
a582 2
	for file in $(SRC_POTFILES); do echo $$file; done \
	  | LC_COLLATE= sort > tmp.src \
d586 1
a586 2
	for file in $(BLD_POTFILES); do echo $$file; done \
	  | LC_COLLATE= sort > tmp.bld \
d589 10
d657 1
a657 1
targets.lo: targets.c Makefile
d660 1
a660 1
archures.lo: archures.c Makefile
d792 1
a792 2
	reloc.c syms.c bfd.c bfdio.c bfdwin.c \
	archive.c corefile.c targets.c format.c
d794 1
a794 2
LIBBFD_H_FILES = libbfd-in.h init.c libbfd.c bfdio.c bfdwin.c \
	cache.c reloc.c archures.c elf.c
d838 2
a839 3
# We want to rerun configure if config.bfd, configure.host or version.h change.
config.status: $(srcdir)/configure $(srcdir)/config.bfd \
		$(srcdir)/configure.host $(srcdir)/version.h
a853 2
bfdio.lo: bfdio.c $(INCDIR)/filenames.h
bfdwin.lo: bfdwin.c $(INCDIR)/filenames.h
d861 1
a861 2
opncls.lo: opncls.c $(INCDIR)/filenames.h $(INCDIR)/objalloc.h \
  $(INCDIR)/libiberty.h
d891 1
a891 1
cpu-arm.lo: cpu-arm.c $(INCDIR)/filenames.h $(INCDIR)/libiberty.h
a908 1
cpu-iq2000.lo: cpu-iq2000.c $(INCDIR)/filenames.h
a918 1
cpu-msp430.lo: cpu-msp430.c $(INCDIR)/filenames.h
a937 1
cpu-xtensa.lo: cpu-xtensa.c $(INCDIR)/filenames.h
d1000 1
a1000 2
  $(INCDIR)/coff/internal.h libcoff.h $(INCDIR)/libiberty.h \
  coffcode.h coffswap.h
d1071 1
a1071 1
  $(INCDIR)/coff/internal.h libcoff.h $(INCDIR)/safe-ctype.h
a1090 4
elf32-am33lin.lo: elf32-am33lin.c elf-m10300.c $(INCDIR)/filenames.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/mn10300.h \
  $(INCDIR)/elf/reloc-macros.h elf32-target.h
d1102 1
a1102 1
  elf32-arm.h elf32-target.h
d1149 1
a1149 1
  elf32-target.h
a1161 4
elf32-iq2000.lo: elf32-iq2000.c $(INCDIR)/filenames.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/iq2000.h \
  $(INCDIR)/elf/reloc-macros.h elf32-target.h
d1172 2
a1173 3
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h elf32-m68hc1x.h \
  $(INCDIR)/elf/m68hc11.h $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/opcode/m68hc11.h elf32-target.h
d1175 4
a1178 9
  $(INCDIR)/bfdlink.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h elf32-m68hc1x.h \
  $(INCDIR)/elf/m68hc11.h $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/opcode/m68hc11.h elf32-target.h
elf32-m68hc1x.lo: elf32-m68hc1x.c $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h elf32-m68hc1x.h \
  $(INCDIR)/elf/m68hc11.h $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/opcode/m68hc11.h
d1193 5
a1197 6
elfxx-mips.lo: elfxx-mips.c $(INCDIR)/filenames.h $(INCDIR)/libiberty.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h elfxx-mips.h \
  $(INCDIR)/elf/mips.h $(INCDIR)/elf/reloc-macros.h $(INCDIR)/coff/sym.h \
  $(INCDIR)/coff/symconst.h $(INCDIR)/coff/ecoff.h $(INCDIR)/coff/mips.h \
  $(INCDIR)/coff/external.h $(INCDIR)/hashtab.h
a1203 5
elf32-msp430.lo: elf32-msp430.c $(INCDIR)/filenames.h \
  $(INCDIR)/libiberty.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/msp430.h $(INCDIR)/elf/reloc-macros.h \
  elf32-target.h
d1220 4
a1223 1
  elf32-ppc.h elf32-target.h
d1227 1
a1227 1
  elf32-sh64.h elf32-sh.c $(INCDIR)/elf/sh.h $(INCDIR)/elf/reloc-macros.h \
d1232 1
a1232 1
  $(INCDIR)/elf/reloc-macros.h elf32-sh64.h $(srcdir)/../opcodes/sh64-opc.h
d1240 1
a1240 1
  elf32-target.h
a1258 5
elf32-xtensa.lo: elf32-xtensa.c $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/elf/xtensa.h \
  $(INCDIR)/elf/reloc-macros.h $(INCDIR)/xtensa-isa.h \
  $(INCDIR)/xtensa-config.h elf32-target.h
d1262 1
a1262 1
  elflink.h $(INCDIR)/safe-ctype.h
a1334 2
mach-o.lo: mach-o.c mach-o.h $(INCDIR)/filenames.h \
  $(INCDIR)/libiberty.h mach-o-target.c
a1365 2
pef.lo: pef.c $(INCDIR)/safe-ctype.h pef.h pef-traceback.h \
  $(INCDIR)/filenames.h $(INCDIR)/libiberty.h
a1457 5
xsym.lo: xsym.c xsym.h $(INCDIR)/filenames.h
xtensa-isa.lo: xtensa-isa.c $(INCDIR)/xtensa-isa.h \
  $(INCDIR)/xtensa-isa-internal.h
xtensa-modules.lo: xtensa-modules.c $(INCDIR)/xtensa-isa.h \
  $(INCDIR)/xtensa-isa-internal.h
d1517 1
a1517 1
  $(INCDIR)/elf/external.h $(INCDIR)/elf/ppc64.h $(INCDIR)/elf/reloc-macros.h \
d1535 1
a1535 1
  elflink.h $(INCDIR)/safe-ctype.h
d1559 1
a1559 2
  $(INCDIR)/elf/reloc-macros.h $(INCDIR)/objalloc.h $(INCDIR)/hashtab.h \
  elf32-target.h
d1563 1
a1563 2
  $(INCDIR)/elf/reloc-macros.h $(INCDIR)/objalloc.h $(INCDIR)/hashtab.h \
  elf64-target.h
@


1.101
log
@2002-09-16  Bruno Haible  <bruno@@clisp.org>
	* elf32-i386.c: Don't defined ELF_ARCH etc. if this file is included
	by a target variant implementation.
	* elf64-alpha.c: Likewise.
	* elf32-i386-fbsd.c: New file.
	* elf64-alpha-fbsd.c: New file.
	* targets.c: Support bfd_elf32_i386_freebsd_vec and
	bfd_elf64_alpha_freebsd_vec.
	* configure.in: Accept the vectors bfd_elf32_i386_freebsd_vec,
	bfd_elf64_alpha_freebsd_vec.
	* Makefile.am (BFD32_BACKENDS): Add elf32-i386-fbsd.lo.
	(BFD32_BACKENDS_CFILES): Add elf32-i386-fbsd.c.
	(BFD64_BACKENDS): Add elf64-alpha-fbsd.lo.
	(BFD64_BACKENDS_CFILES): Add elf64-alpha-fbsd.c.
	(elf32-i386-fbsd.lo, elf64-alpha-fbsd.lo): Add dependencies.
	* config.bfd: For FreeBSD targets, set targ_defvec to a FreeBSD
	specific targets. Define OLD_FREEBSD_ABI_LABEL if appropriate.

	* config/tc-i386.h (ELF_TARGET_FORMAT): New macro.
	(TARGET_FORMAT): Use ELF_TARGET_FORMAT instead of "elf32-i386".
	* config/tc-i386.c (i386_target_format): Likewise.
	* config/tc-alpha.h (ELF_TARGET_FORMAT): New macro.
	(TARGET_FORMAT): Use ELF_TARGET_FORMAT instead of "elf64-alpha".

	* emulparams/elf_i386_fbsd.sh: Set OUTPUT_FORMAT to
	elf32-i386-freebsd.
	* emulparams/elf64alpha_fbsd.sh: Set OUTPUT_FORMAT to
	elf64-alpha-freebsd.

Approved by:  Alan Modra <amodra@@bigpond.net.au>
              Message-ID: <20020715021113.GJ30362@@bubble.sa.bigpond.net.au>
@
text
@d1171 4
a1174 4
elf32-i386-fbsd.lo: elf32-i386-fbsd.c elf32-i386.c $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/elf/i386.h \
  $(INCDIR)/elf/reloc-macros.h elf32-target.h
d1536 1
a1536 1
elf64-alpha-fbsd.lo: elf64-alpha-fbsd.c elf64-alpha.c $(INCDIR)/filenames.h \
d1538 5
a1542 5
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/alpha.h \
  $(INCDIR)/elf/reloc-macros.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/sym.h $(INCDIR)/coff/symconst.h $(INCDIR)/coff/ecoff.h \
  $(INCDIR)/coff/alpha.h $(INCDIR)/aout/ar.h libcoff.h \
  libecoff.h ecoffswap.h elf64-target.h
@


1.101.2.1
log
@Merge with mainline; tag is carlton_dictionary-20020927-merge
@
text
@d1171 4
a1174 4
elf32-i386-fbsd.lo: elf32-i386-fbsd.c $(INCDIR)/filenames.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h elf32-i386.c \
  $(INCDIR)/elf/i386.h $(INCDIR)/elf/reloc-macros.h elf32-target.h
d1536 1
a1536 1
elf64-alpha-fbsd.lo: elf64-alpha-fbsd.c $(INCDIR)/filenames.h \
d1538 5
a1542 5
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h elf64-alpha.c \
  $(INCDIR)/elf/alpha.h $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/sym.h $(INCDIR)/coff/symconst.h \
  $(INCDIR)/coff/ecoff.h $(INCDIR)/coff/alpha.h $(INCDIR)/aout/ar.h \
  libcoff.h libecoff.h ecoffswap.h elf64-target.h
@


1.101.2.2
log
@Merge with mainline; merge tag carlton_dictionary-20021011-merge.
@
text
@d35 1
a35 1
	merge.lo dwarf2.lo simple.lo
d44 1
a44 1
	merge.c dwarf2.c simple.c
a244 1
	elf32-sh64-lin.lo \
a403 1
	elf32-sh64-lin.c \
a499 1
	elf64-sh64-lin.lo \
a527 1
	elf64-sh64-lin.c \
a902 1
simple.lo: simple.c $(INCDIR)/filenames.h
a1262 5
elf32-sh64-lin.lo: elf32-sh64-lin.c elf32-sh64.c $(INCDIR)/filenames.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(srcdir)/../opcodes/sh64-opc.h \
  elf32-sh.c $(INCDIR)/elf/sh.h $(INCDIR)/elf/reloc-macros.h \
  elf32-target.h
a1580 4
elf64-sh64-lin.lo: elf64-sh64-lin.c elf64-sh64.c $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/elf/sh.h \
  $(INCDIR)/elf/reloc-macros.h elf64-target.h
@


1.101.2.3
log
@2002-10-25  David Carlton  <carlton@@math.stanford.edu>

	* symtab.c (lookup_symbol_aux_block): New function.
	(lookup_symbol_aux_local): Call lookup_symbol_aux_block.
	(lookup_symbol_aux): Ditto.

	* Merge from mainline; tag is carlton_dictionary-20021025-merge.

2002-10-25  David Carlton  <carlton@@math.stanford.edu>

	* cp-support.c: Add comment to demangled name pitfalls.
	* symtab.c (lookup_transparent_type): Add FIXME comment at
	beginning.

2002-10-23  David Carlton  <carlton@@math.stanford.edu>

	* symtab.c: Delete cplusplus_hint.
	Delete prototype for find_template_name_end.
	* dwarf2read.c (scan_partial_symbols): Add in a gdb_assert from a
	later version of my namespace_minimal patch.

2002-10-25  David Carlton  <carlton@@math.stanford.edu>

	* gdb.c++/namespace.exp: Change all of the setup_xfail tests that
	I added into setup_kfails.
@
text
@d206 1
d219 2
d239 1
a239 1
	elf32-qnx.lo \
d242 1
d245 4
d370 1
d383 2
d402 1
a402 1
	elf32-qnx.c \
d405 1
d408 4
d494 1
d502 2
d522 1
d531 2
d586 6
a591 7
	elf-bfd.h elf-hppa.h elf32-arm.h elf32-hppa.h elf32-qnx.h \
	elf64-hppa.h elfcode.h elfcore.h elflink.h \
	freebsd.h genlink.h go32stub.h \
	libaout.h libbfd.h libcoff.h libecoff.h libhppa.h libieee.h \
	libnlm.h liboasys.h libpei.h libxcoff.h \
	netbsd.h nlm-target.h nlmcode.h nlmswap.h ns32k.h \
	peicode.h som.h version.h vms.h xcoff-target.h
d595 1
a595 1
	bfdver.h elf32-target.h elf64-target.h targmatch.h
d813 1
a813 1
	reloc.c syms.c bfd.c archive.c corefile.c targets.c format.c
d870 1
a870 1
bfd.lo: bfd.c bfdver.h $(INCDIR)/filenames.h $(INCDIR)/libiberty.h \
d907 1
a907 1
simple.lo: simple.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h
d1123 6
a1128 1
  elf32-arm.h elf32-target.h elf32-qnx.h
d1175 9
a1183 1
  elf32-target.h elf32-qnx.h
d1254 5
a1258 4
  elf32-target.h elf32-qnx.h
elf32-qnx.lo: elf32-qnx.c $(INCDIR)/filenames.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h elf32-qnx.h
d1268 5
d1280 18
a1297 1
  elf32-target.h elf32-qnx.h
d1506 2
a1507 2
vms-hdr.lo: vms-hdr.c bfdver.h $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/safe-ctype.h vms.h
d1546 7
d1591 8
@


1.101.2.4
log
@2002-11-15  David Carlton  <carlton@@math.stanford.edu>

	* Merge from mainline; tag is carlton_dictionary-20021115-merge.
@
text
@d236 1
a269 1
	mach-o.lo \
a280 1
	pef.lo \
d310 1
a310 2
	xcofflink.lo \
	xsym.lo
d391 1
a424 1
	mach-o.c \
a435 1
	pef.c \
d464 1
a464 2
	xcofflink.c \
	xsym.c
d564 1
a564 1
	elf-bfd.h elf-hppa.h elf32-arm.h elf32-hppa.h \
d568 1
a568 1
	libnlm.h liboasys.h libpei.h libxcoff.h mach-o.h \
d570 1
a570 2
	pef.h pef-traceback.h peicode.h som.h version.h \
	vms.h xcoff-target.h xsym.h
d657 1
a657 1
targets.lo: targets.c Makefile
d660 1
a660 1
archures.lo: archures.c Makefile
d1102 1
a1102 1
  elf32-arm.h elf32-target.h
d1149 1
a1149 1
  elf32-target.h
d1220 4
a1223 1
  elf32-target.h
d1240 1
a1240 1
  elf32-target.h
a1334 2
mach-o.lo: mach-o.c mach-o.h $(INCDIR)/filenames.h \
  $(INCDIR)/libiberty.h mach-o-target.c
a1365 2
pef.lo: pef.c pef.h pef-traceback.h $(INCDIR)/filenames.h \
  $(INCDIR)/libiberty.h
a1457 1
xsym.lo: xsym.c xsym.h $(INCDIR)/filenames.h
@


1.101.2.5
log
@2002-12-23  David Carlton  <carlton@@math.stanford.edu>

	* Merge from mainline; tag is carlton_dictionary-20021223-merge.
@
text
@d31 1
a31 2
	archive.lo archures.lo bfd.lo bfdio.lo bfdwin.lo \
	cache.lo coffgen.lo corefile.lo \
d40 1
a40 2
	archive.c archures.c bfd.c bfdio.c bfdwin.c \
	cache.c coffgen.c corefile.c \
d797 1
a797 2
	reloc.c syms.c bfd.c bfdio.c bfdwin.c \
	archive.c corefile.c targets.c format.c
d799 1
a799 2
LIBBFD_H_FILES = libbfd-in.h init.c libbfd.c bfdio.c bfdwin.c \
	cache.c reloc.c archures.c elf.c
a858 2
bfdio.lo: bfdio.c $(INCDIR)/filenames.h
bfdwin.lo: bfdwin.c $(INCDIR)/filenames.h
@


1.101.2.6
log
@2003-02-07  David Carlton  <carlton@@math.stanford.edu>

	* Merge with mainline; tag is carlton_dictionary-20030207-merge.
@
text
@a72 1
	cpu-iq2000.lo \
a82 1
	cpu-msp430.lo \
a124 1
	cpu-iq2000.c \
a134 1
	cpu-msp430.c \
a223 1
	elf32-iq2000.lo \
a233 1
	elf32-msp430.lo \
a380 1
	elf32-iq2000.c \
a390 1
	elf32-msp430.c \
d872 1
a872 2
opncls.lo: opncls.c $(INCDIR)/filenames.h $(INCDIR)/libiberty.h \
  $(INCDIR)/objalloc.h
a919 1
cpu-iq2000.lo: cpu-iq2000.c $(INCDIR)/filenames.h
a929 1
cpu-msp430.lo: cpu-msp430.c $(INCDIR)/filenames.h
d1011 1
a1011 2
  $(INCDIR)/coff/internal.h libcoff.h $(INCDIR)/libiberty.h \
  coffcode.h coffswap.h
a1172 4
elf32-iq2000.lo: elf32-iq2000.c $(INCDIR)/filenames.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/iq2000.h \
  $(INCDIR)/elf/reloc-macros.h elf32-target.h
d1204 5
a1208 6
elfxx-mips.lo: elfxx-mips.c $(INCDIR)/filenames.h $(INCDIR)/libiberty.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h elfxx-mips.h \
  $(INCDIR)/elf/mips.h $(INCDIR)/elf/reloc-macros.h $(INCDIR)/coff/sym.h \
  $(INCDIR)/coff/symconst.h $(INCDIR)/coff/ecoff.h $(INCDIR)/coff/mips.h \
  $(INCDIR)/coff/external.h $(INCDIR)/hashtab.h
a1214 5
elf32-msp430.lo: elf32-msp430.c $(INCDIR)/filenames.h \
  $(INCDIR)/libiberty.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/msp430.h $(INCDIR)/elf/reloc-macros.h \
  elf32-target.h
d1235 1
a1235 1
  elf32-sh64.h elf32-sh.c $(INCDIR)/elf/sh.h $(INCDIR)/elf/reloc-macros.h \
d1240 1
a1240 1
  $(INCDIR)/elf/reloc-macros.h elf32-sh64.h $(srcdir)/../opcodes/sh64-opc.h
d1530 1
a1530 1
  $(INCDIR)/elf/external.h $(INCDIR)/elf/ppc64.h $(INCDIR)/elf/reloc-macros.h \
@


1.101.2.7
log
@2003-03-05  David Carlton  <carlton@@math.stanford.edu>

	* Merge with mainline.  Tag is carlton_dictionary-20030305-merge.
@
text
@d880 2
a881 2
opncls.lo: opncls.c $(INCDIR)/filenames.h $(INCDIR)/objalloc.h \
  $(INCDIR)/libiberty.h
d1253 1
a1253 1
  elf32-ppc.h elf32-target.h
@


1.101.2.8
log
@2003-04-16  David Carlton  <carlton@@bactrian.org>

	* Merge with mainline; tag is carlton_dictionary-20030416-merge.
@
text
@a103 1
	cpu-xtensa.lo \
a157 1
	cpu-xtensa.c \
a251 1
	elf32-xtensa.lo \
d320 1
a320 3
	xsym.lo \
	xtensa-isa.lo \
	xtensa-modules.lo
a410 1
	elf32-xtensa.c \
d478 1
a478 3
	xsym.c \
	xtensa-isa.c \
	xtensa-modules.c
a959 1
cpu-xtensa.lo: cpu-xtensa.c $(INCDIR)/filenames.h
a1288 3
elf32-xtensa.lo: elf32-xtensa.c $(INCDIR)/bfdlink.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/xtensa.h $(INCDIR)/xtensa-isa.h elf32-target.h
a1492 4
xtensa-isa.lo: xtensa-isa.c $(INCDIR)/xtensa-isa.h \
  $(INCDIR)/xtensa-isa-internal.h
xtensa-modules.lo: xtensa-modules.c $(INCDIR)/xtensa-isa.h \
  $(INCDIR)/xtensa-isa-internal.h
@


1.101.2.9
log
@2003-04-30  David Carlton  <carlton@@bactrian.org>

	* cp-namespace.c (get_namespace_objfile): Copy the namespace
	objfile's name.

	* block.h (ALL_BLOCK_SYMBOLS): Move here from dictionary.h.
	* dictionary.c: Sync up with mainline version I just posted.
	Specifically, update some commments, and:
	(dict_create_hashed): Fiddle with nsyms updating.
	(dict_create_linear): Ditto.
	(dict_lookup): Delete.
	(iterator_next_hashed): Delete FIXME comment.
	(iter_name_first_hashed): Replace 'sym' by 'sym != NULL'.
	(iter_name_next_hashed): Replate 'next' by 'next != NULL'.
	* dictionary.h: Sync up with mainline version I just posted: add
	inclusion guards, delete declaration of dict_lookup, delete
	ALL_BLOCK_SYMBOLs.

	* Merge with mainline; tag is carlton_dictionary-20030430-merge.
@
text
@a233 1
	elf32-m68hc1x.lo \
a396 1
	elf32-m68hc1x.c \
d1209 1
a1209 1
  $(INCDIR)/elf/reloc-macros.h elf32-target.h elf32-m68hc1x.h
d1214 1
a1214 5
  elf32-target.h elf32-m68hc1x.h
elf32-m68hc1x.lo: elf32-m68hc1x.c $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/elf/m68hc11.h \
  $(INCDIR)/elf/reloc-macros.h elf32-target.h elf32-m68hc1x.h
@


1.101.2.10
log
@2003-06-27  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton_dictionary-20030627-merge.
@
text
@d865 2
a866 3
# We want to rerun configure if config.bfd, configure.host or version.h change.
config.status: $(srcdir)/configure $(srcdir)/config.bfd \
		$(srcdir)/configure.host $(srcdir)/version.h
d921 1
a921 1
cpu-arm.lo: cpu-arm.c $(INCDIR)/filenames.h $(INCDIR)/libiberty.h
d1210 2
a1211 3
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h elf32-m68hc1x.h \
  $(INCDIR)/elf/m68hc11.h $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/opcode/m68hc11.h elf32-target.h
d1213 4
a1216 4
  $(INCDIR)/bfdlink.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h elf32-m68hc1x.h \
  $(INCDIR)/elf/m68hc11.h $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/opcode/m68hc11.h elf32-target.h
d1219 2
a1220 3
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h elf32-m68hc1x.h \
  $(INCDIR)/elf/m68hc11.h $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/opcode/m68hc11.h
d1304 3
a1306 5
elf32-xtensa.lo: elf32-xtensa.c $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/elf/xtensa.h \
  $(INCDIR)/elf/reloc-macros.h $(INCDIR)/xtensa-isa.h \
  $(INCDIR)/xtensa-config.h elf32-target.h
d1416 2
a1417 2
pef.lo: pef.c $(INCDIR)/safe-ctype.h pef.h pef-traceback.h \
  $(INCDIR)/filenames.h $(INCDIR)/libiberty.h
@


1.101.2.11
log
@2003-08-05  David Carlton  <carlton@@kealia.com>

	* configure.in (build_warnings): Delete -Wformat-nonliteral.
	* configure (build_warnings): Ditto.

	* Merge with mainline; tag is carlton_dictionary-20030805-merge.
@
text
@a210 1
	elf32-am33lin.lo \
a374 1
	elf32-am33lin.c \
a1125 4
elf32-am33lin.lo: elf32-am33lin.c elf-m10300.c $(INCDIR)/filenames.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/mn10300.h \
  $(INCDIR)/elf/reloc-macros.h elf32-target.h
@


1.101.2.12
log
@2003-09-17  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton_dictionary-20030917-merge.
@
text
@d609 1
a609 2
	for file in $(SRC_POTFILES); do echo $$file; done \
	  | LC_COLLATE= sort > tmp.src \
d613 1
a613 2
	for file in $(BLD_POTFILES); do echo $$file; done \
	  | LC_COLLATE= sort > tmp.bld \
d615 10
@


1.101.2.13
log
@2003-11-11  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton-dictionary-20031111-merge.
@
text
@d1100 1
a1100 1
  $(INCDIR)/coff/internal.h libcoff.h $(INCDIR)/safe-ctype.h
d1313 1
a1313 1
  elflink.h $(INCDIR)/safe-ctype.h
d1595 1
a1595 1
  elflink.h $(INCDIR)/safe-ctype.h
@


1.101.2.14
log
@2003-12-15  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton_dictionary-20031215-merge.
	* cp-support.c (class_name_from_physname): Add DMGL_PARAMS to call
	to cplus_demangle.
	(method_name_from_physname): Ditto.
@
text
@d1619 1
a1619 2
  $(INCDIR)/elf/reloc-macros.h $(INCDIR)/objalloc.h $(INCDIR)/hashtab.h \
  elf32-target.h
d1623 1
a1623 2
  $(INCDIR)/elf/reloc-macros.h $(INCDIR)/objalloc.h $(INCDIR)/hashtab.h \
  elf64-target.h
@


1.100
log
@	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.

	* cpu-avr.c (compatible): Don't use hard-coded mach constants.
	* cpu-powerpc.c (powerpc_compatible): Likewise.
	* cpu-rs6000.c (rs6000_compatible): Likewise.
@
text
@d219 1
d382 1
d492 1
d519 1
d1171 4
d1530 7
@


1.99
log
@Add TMS320C4x support
@
text
@d1061 3
a1063 3
coff-tic4x.lo: coff-tic4x.c $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/coff/tic4x.h $(INCDIR)/coff/ti.h \
  $(INCDIR)/coff/internal.h libcoff.h coffcode.h coffswap.h
d1115 4
a1118 3
elfarmqnx-nabi.lo: elfarmqnx-nabi.c $(INCDIR)/elf/arm.h $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/filenames.h elf-bfd.h elf32-qnx.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
d1161 2
a1162 1
  $(INCDIR)/elf/external.h $(INCDIR)/elf/i370.h elf32-target.h
d1168 1
a1168 1
  $(INCDIR)/bfdlink.h elf-bfd.h elf32-qnx.h $(INCDIR)/elf/common.h \
d1170 1
a1170 1
  $(INCDIR)/elf/reloc-macros.h elf32-target.h
d1192 2
a1193 2
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/m68hc11.h \
d1198 2
a1199 1
  $(INCDIR)/elf/reloc-macros.h elf32-target.h
d1242 4
a1245 4
elf32-ppcqnx.lo: elf32-ppcqnx.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  elf-bfd.h elf32-qnx.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/elf/ppc.h $(INCDIR)/elf/reloc-macros.h \
  elf32-target.h
d1276 4
a1279 4
elf32-shqnx.lo: elf32-shqnx.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  elf-bfd.h elf32-qnx.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/elf/sh.h $(INCDIR)/elf/reloc-macros.h \
  elf32-target.h
d1536 7
a1542 6
elfn32-mips.lo: elfn32-mips.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  genlink.h elf-bfd.h elfxx-mips.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/elf/mips.h \
  $(INCDIR)/elf/reloc-macros.h $(INCDIR)/coff/sym.h \
  $(INCDIR)/coff/symconst.h $(INCDIR)/coff/internal.h $(INCDIR)/coff/ecoff.h \
  $(INCDIR)/coff/mips.h ecoffswap.h elf32-target.h
@


1.98
log
@Add sh-nto support
@
text
@d92 1
d144 1
d190 1
d352 1
d942 1
d1061 3
@


1.97
log
@Add QNX Neutrino PowerPC support and common up QNX functions
@
text
@d243 1
d403 1
d1265 4
@


1.96
log
@	* Makefile.am: Add n32 ABI support.
	* Makefile.in: Regenerate.
	* config.bfd: Add n32 vectors to mips64*-*-linux* targets. Treat 64
	bit vectors for mips*-*-linux targets as optional.
	* configure.in: Add n32 ABI vectors.
	* configure: Regenerate.
	* elf32-mips.c (mips_elf32_object_p): Reject n32 ABI files.
	* elfn32-mips.c: New file, n32 ABI support.
	* targets.c: Add n32 ABI vectors.
@
text
@d235 1
d394 1
d1106 1
a1106 1
  $(INCDIR)/filenames.h elf-bfd.h $(INCDIR)/elf/common.h \
d1156 1
a1156 1
  $(INCDIR)/bfdlink.h elf-bfd.h $(INCDIR)/elf/common.h \
d1227 4
@


1.95
log
@Add arm-*-nto port.
@
text
@d485 1
d510 1
d1513 6
@


1.94
log
@2002-07-17  H.J. Lu <hjl@@gnu.org>

	* Makefile.am: Fix a typo.
	* Makefile.in: Regenerate.
@
text
@d203 1
d362 1
d1098 4
@


1.93
log
@Add IP2k support to BFD and LD
@
text
@d219 1
a219 1
	elf32-ip2k.c \
@


1.92
log
@	* vaxbsd.c: New BFD backend for VAX BSD and Ultrix.
	* Makefile.am (BFD32_BACKENDS, BFD32_BACKENDS_CFILES): Add new backend.
	Run "make dep-am".
	* config.bfd (vax-*-bsd* | vax-*-ultrix*): Use vaxbsd_vec instead of
	host_aout_vec.
	* configure.in (vaxbsd_vec): Add.
	* targets.c (vaxbsd_vec): Add.
	* Makefile.in: Rebuild.
	* configure: Rebuild.
	* po/SRC-POTFILES.in: Rebuild.
@
text
@d70 1
d121 1
d219 1
d376 1
d908 1
d1156 4
@


1.92.2.1
log
@2002-09-23  Daniel Jacobowitz  <drow@@mvista.com>

	Merge from mainline:
	2002-09-23  Alan Modra  <amodra@@bigpond.net.au>
	* elf-eh-frame.c (_bfd_elf_discard_section_eh_frame): Zero relocs
	for discarded FDEs.  Remove redundant assignment.
	* elflink.h (elf_bfd_discard_info): Save edited relocs.

	2002-09-23  Nathan Tallent  <eraxxon@@alumni.rice.edu>
	* dwarf2.c (decode_line_info): Update to correctly decode
	the (non-standard DWARF2) out-of-order address sequences
	generated by the Intel C++ 6.0 compiler for ia64-Linux.

	2002-09-22  H.J. Lu <hjl@@gnu.org>
	* elf64-alpha.c (elf64_alpha_merge_ind_symbols): Don't merge
	the relocation count between different .reloc sections.

	2002-09-22  Mark Elbrecht  <snowball3@@softhome.net>
	* config.bfd: For DJGPP targets, match with any cpu and any machine.

	2002-09-21  Alan Modra  <amodra@@bigpond.net.au>
	* elfcode.h (elf_slurp_reloc_table_from_section): Make "symcount"
	unsigned.  Move "symcount" assignment out of loop.

	2002-09-19  Nathan Tallent  <eraxxon@@alumni.rice.edu>
	* dwarf2.c (_bfd_dwarf2_find_nearest_line): If address length is
	zero, set it to 8 for (non-standard) 64-bit DWARF2 formats
	(e.g. IRIX64).

	2002-09-19  Jakub Jelinek  <jakub@@redhat.com>
	* reloc.c (BFD_RELOC_386_TLS_TPOFF, BFD_RELOC_386_TLS_IE,
	BFD_RELOC_386_TLS_GOTIE): Add.
	* bfd-in2.h, libbfd.h: Rebuilt.
	* elf32-i386.c (elf_howto_table): Add R_386_TLS_TPOFF, R_386_TLS_IE
	and R_386_TLS_GOTIE.
	(elf_i386_reloc_type_lookup): Handle it.
	(struct elf_i386_link_hash_entry): Change tls_type type to unsigned
	char instead of enum, change GOT_* into defines.
	(GOT_TLS_IE_POS, GOT_TLS_IE_NEG, GOT_TLS_IE_BOTH): Define.
	(elf_i386_tls_transition): Handle R_386_TLS_IE and R_386_TLS_GOTIE.
	(elf_i386_check_relocs): Likewise.  Avoid crash if local symbol is
	accessed both as normal and TLS symbol.  Move R_386_TLS_LDM and
	R_386_PLT32 cases so that R_386_TLS_IE can fall through.
	Handle R_386_TLS_LE_32 and R_386_TLS_LE in shared libs.
	(elf_i386_gc_sweep_hook): Handle R_386_TLS_IE and R_386_TLS_GOTIE.
	Handle R_386_TLS_LE_32 and R_386_TLS_LE in shared libs.
	(allocate_dynrelocs): Allocate 2 .got and 2 .rel.got entries if
	tls_type is GOT_TLS_IE_BOTH.
	(elf_i386_size_dynamic_sections): Likewise.
	(elf_i386_relocate_section): Handle R_386_TLS_IE and R_386_TLS_GOTIE.
	Handle R_386_TLS_LE_32 and R_386_TLS_LE in shared libs.
	(elf_i386_finish_dynamic_symbol): Use tls_type & GOT_TLS_IE to catch
	all 4 GOT_TLS_* TLS types.

	2002-09-18  Daniel Jacobowitz  <drow@@mvista.com>
	* elfcode.h (elf_slurp_reloc_table_from_section): Check
	correct relocation count.

	2002-09-17  Daniel Jacobowitz  <drow@@mvista.com>
	* bfd-in.h (bfd_get_dynamic_symcount): Define.
	* bfd.c (struct _bfd): Add dynsymcount.
	* bfd-in2.h: Regenerated.
	* elf.c (_bfd_elf_canonicalize_dynamic_symtab): Set
	abfd->dynsymcount.
	* elfcode.h (elf_slurp_reloc_table_from_section): Check
	for overflow.

	2002-09-17  Alan Modra  <amodra@@bigpond.net.au>
	* elf64-alpha.c (alpha_elf_size_info): Make static.

	2002-09-17  Jakub Jelinek  <jakub@@redhat.com>
	* elf32-ppc.c (ppc_elf_finish_dynamic_symbol): Clear .got word
	even if generating R_PPC_RELATIVE reloc.
	(ppc_elf_relocate_section): Make sure relocation is performed if
	skip == -2.  Clear memory at r_offset when creating dynamic
	relocation.

	2002-09-16  David O'Brien  <obrien@@FreeBSD.org>
	* elf32-i386-fbsd.c: Always label using the EI_OSABI method.
	It is benign for FreeBSD < 4.1.  Minor reformatting.
	* elf64-alpha-fbsd.c: Likewise.

	2002-09-16  Nathan Tallent  <eraxxon@@alumni.rice.edu>
	* ecoff.c (_bfd_ecoff_slurp_symbolic_info) <ioptMax>: Fix error
	reading ECOFF information: 'ioptMax' refers to the actual *size*
	of the optimization symtab, not the number of entries.

	2002-09-16  Jakub Jelinek  <jakub@@redhat.com>
	* elf_i386_relocate_section (R_386_TLS_TPOFF32): Negate addend.

	2002-09-13  Daniel Jacobowitz  <drow@@mvista.com>
	* elf32-arm.h (elf32_arm_adjust_dynamic_symbol): Update
	ELF_LINK_HASH_NEEDS_PLT logic.

	2002-09-11  Nick Clifton  <nickc@@redhat.com>
	* po/da.po: New Danish translation file.
	* configure.in (LINGUAS): Add 'da'.
	* configure: Regenerate.

	2002-09-11  Jakub Jelinek  <jakub@@redhat.com>
	* elf32-i386.c (dtpoff_base, tpoff): Don't crash if tls_segment is
	NULL.
	(elf_i386_relocate_section): Return false after printing error about
	unresolvable relocation.

	2002-09-11  Jeffrey Law  <law@@redhat.com>
	* elf32-h8300.c (elf32_h8_relax_section): Fix typo.

	2002-09-06  Andrew Haley  <aph@@cambridge.redhat.com>
	* elf.c (_bfd_elf_find_nearest_line): Check functionname_ptr and
	line_ptr before deciding we've found a symbol.

	2002-08-29  John David Anglin  <dave@@hiauly1.hia.nrc.ca>
	* bfd-in.h (align_power): Cast constants to bfd_vma type.
	* bfd-in2.h (align_power): Likewise.

	2002-08-24  Kaz Kojima  <kkojima@@rr.iij4u.or.jp>
	* elf32-sh.c (sh_elf_copy_indirect_symbol): New.
	(create_got_section, allocate_dynrelocs, readonly_dynrelocs):
	Likewise.
	(struct elf_sh_pcrel_relocs_copied): Removed.
	(struct elf_sh_dyn_relocs): New.
	(struct elf_sh_link_hash_entry): Replace pcrel_relocs_copied
	field with dyn_relocs.
	(struct elf_sh_link_hash_table): Add short-cuts to get dynamic
	sections and sym_sec.
	(sh_elf_link_hash_newfunc): Clear dyn_relocs.
	(sh_elf_link_hash_table_create): Clear shorts-cuts and sym_sec.
	(sh_elf_create_dynamic_sections): Use create_got_section instead
	of _bfd_elf_create_got_section.
	(sh_elf_check_relocs): Likewise.
	(sh_elf_create_dynamic_sections): Use short-cuts to the dynamic
	sections.
	(sh_elf_adjust_dynamic_symbol, sh_elf_size_dynamic_sections,
	sh_elf_relocate_section, sh_elf_check_relocs,
	sh_elf_finish_dynamic_symbol, sh_elf_finish_dynamic_sections):
	Likewise.
	(sh_elf_adjust_dynamic_symbol): Handle nocopyreloc. Keep the
	dynamic relocations and avoiding the copy relocation when we
	didn't find any dynamic relocations in the section which has
	contents or is read-only.
	(WILL_CALL_FINISH_DYNAMIC_SYMBOL): New.
	(sh_elf_size_dynamic_sections): Don't reset the size of
	.rela.got section even if dynamic_sections_created flag is off.
	Don't use sh_elf_discard_copies. Scan all input bfd and use
	allocate_dynrelocs. Call readonly_dynrelocs to determine
	whether we need DT_TEXTREL.
	(sh_elf_adjust_dynamic_symbol): Use plt.refcount to determine
	whether the symbol was never referred to.
	(sh_elf_relocate_section): Use WILL_CALL_FINISH_DYNAMIC_SYMBOL.
	(sh_elf_gc_sweep_hook): Fill with the real sweep function.
	(sh_elf_check_relocs): Call create_got_section if the short-cut
	to .got is null. Increment reference counters only instead of
	allocating space on dynamic sections here. Don't conditionalize
	uninitialized got.offset value when marking the symbol as a
	global offset table entry. Keep relocations for symbols satisfied
	by a dynamic library to avoid copy relocations for the symbol.
	Set dynobj field of an elf hash table if needed.
	(sh_elf_finish_dynamic_sections): Handle null section pointer
	correctly.
	(elf_backend_copy_indirect_symbol): Defined.
	(elf_backend_can_refcount): Defined.

	2002-08-22  Nick Clifton  <nickc@@redhat.com>
	* po/tr.po: Updated Turkish translation.

	2002-08-21  Stephen Clarke <stephen.clarke@@superh.com>
	* bfd/elf32-sh.c (sh_elf_size_dynamic_sections): Zero
	initialize dynamic section.
	* bfd/elf64-sh64.c (sh64_elf64_size_dynamic_sections):
	Likewise.

	2002-08-13  H.J. Lu <hjl@@gnu.org>
	* elflink.h (NAME(bfd_elf,size_dynamic_sections): Don't count
	definitions in shared objects when checking symbol with
	undefined version.

	2002-08-10  H.J. Lu <hjl@@gnu.org>
	* elflink.h (elf_add_default_symbol): Preserve section across
	elf_merge_symbol.

	2002-08-09  Nick Clifton  <nickc@@redhat.com>
	* po/sv.po: Updated Swedish translation.

	2002-08-08  Alan Modra  <amodra@@bigpond.net.au>
	* elflink.h (elf_link_output_extsym): Don't output symbols from
	SEC_EXCLUDE sections.

	* aoutx.h (aout_link_write_symbols): Correct handling of warning syms.

	2002-08-08  H.J. Lu <hjl@@gnu.org>
	* elflink.h (elf_add_default_symbol): Don't warn a defintion
	overrides an indirect versioned symbol.

	2002-08-07  Alan Modra  <amodra@@bigpond.net.au>
	* elf64-ppc.c (edit_opd): Arrange to drop symbols for discarded .opd
	entries.

	2002-08-07  Jakub Jelinek  <jakub@@redhat.com>
	* elf32-i386.c (elf_i386_relocate_section): Fill in proper addend
	for R_386_TLS_TPOFF32 relocs against symndx 0.

	2002-08-07  Thiemo Seufer <seufer@@csv.ica.uni-stuttgart.de>
	* elfxx-mips.c (mips_elf_global_got_index): Avoid segfault if
	g->global_gotsym is NULL.

	2002-08-06  Alan Modra  <amodra@@bigpond.net.au>
	* xcofflink.c (xcoff_write_global_symbol): Set n_scnum for abs_section.

	2002-08-06  Alan Modra  <amodra@@bigpond.net.au>
	* elf64-ppc.c (ppc64_elf_howto_raw): Zero all src_mask entries.

	2002-08-06  H.J. Lu <hjl@@gnu.org>
	* elflink.h (NAME(bfd_elf,size_dynamic_sections)): Check symbol
	with undefined version if needed.
	(elf_link_assign_sym_version): Match a default symbol with a
	version without definition. No need to hide the default
	definition separately.

	2002-08-06  Alan Modra  <amodra@@bigpond.net.au>
	* coff-rs6000.c: Formatting fixes.
	(xcoff_calculate_relocation): Use PARAMS in declaration.
	(xcoff_complain_overflow): Likewise.
	(xcoff_ppc_relocate_section): Use old-style function pointer call.
	(bfd_xcoff_backend_data): Remove useless comments.
	(rs6000coff_vec): Likewise.
	(bfd_pmac_xcoff_backend_data): Likewise.
	(pmac_xcoff_vec): Likewise.
	* coff64-rs6000.c: Formatting fixes.
	(xcoff64_calculate_relocation): Use PARAMS in declaration.
	(xcoff64_ppc_relocate_section): Use old-style function pointer call.
	(bfd_xcoff_backend_data): Remove useless comments.
	(rs6000coff64_vec): Likewise.
	(bfd_xcoff_aix5_backend_data): Likewise.
	(aix5coff64_vec): Likewise.

	2002-08-06  Alan Modra  <amodra@@bigpond.net.au>
	* coff-rs6000.c: (xcoff_rtype2howto): Don't place reloc address in
	addend.
	* coff64-rs6000.c: (xcoff64_rtype2howto): Likewise.

	2002-08-06  Alan Modra  <amodra@@bigpond.net.au>
	* coff-rs6000.c (xcoff_howto_table): Revert some of last change to
	mask entries.  Use complain_overflow_dont for R_REF.
	(xcoff_reloc_type_ba): Revert last change.
	(xcoff_reloc_type_br): Likewise.
	(xcoff_reloc_type_crel): Likewise.
	(xcoff_ppc_relocate_section): Likewise.
	* coff64-rs6000.c (xcoff64_reloc_type_br): Likewise.
	(xcoff64_ppc_relocate_section): Likewise.
	(xcoff64_howto_table): Revert some of last change to mask entries.
	Use complain_overflow_dont for R_REF.

	* coff-rs6000.c (xcoff_howto_table): Fix src_mask entries.  Make all
	relocs with bitsize == 16 have size = 1.
	(xcoff_reloc_type_ba): Correct src_mask and dst_mask adjustment.
	(xcoff_reloc_type_br): Likewise.
	(xcoff_reloc_type_crel): Likewise.
	(xcoff_ppc_relocate_section): Set up src_mask and dst_mask correctly.
	* coff64-rs6000.c (xcoff64_reloc_type_br): Correct src_mask and
	dst_mask adjustment.
	(xcoff64_ppc_relocate_section): Set up src_mask and dst_mask correctly.
	(xcoff64_howto_table): Fix src_mask entries.  Make all relocs with
	bitsize == 16 have size = 1.

	2002-07-31  Nick Clifton  <nickc@@redhat.com>
	* bfd.c (bfd_alt_mach_code): Rename parameter 'index' to
	'alternative' in order to avoid shadowing global symbol of the
	same name.
	* bfd-in2.h: Regenerate.
	* libbfd.h: Regenerate.
	* libcoff.h: Regenerate.

	2002-07-30  Alan Modra  <amodra@@bigpond.net.au>
	* aoutx.h (some_aout_object_p): Clean up tdata properly on error.
	* archive.c (bfd_generic_archive_p): Likewise.
	* coff-rs6000.c (_bfd_xcoff_archive_p): Likewise.
	(_bfd_xcoff_archive_p): Use bfd_scan_vma in place of strtol.
	* coff64-rs6000.c (xcoff64_slurp_armap): Likewise.
	(xcoff64_archive_p): Likewise.
	(xcoff64_openr_next_archived_file): Likewise.
	(xcoff64_archive_p): Clean up tdata properly on error.
	* coffgen.c (coff_real_object_p): Likewise.
	(coff_object_p): Release filehdr and opthdr.
	* ecoff.c (_bfd_ecoff_archive_p): Clean up tdata properly on error.
	* ieee.c (ieee_archive_p): Likewise.
	* ihex.c (ihex_object_p): Likewise.
	(ihex_mkobject): Always allocate tdata.
	* peicode.h (pe_ILF_object_p): Release bfd_alloc'd buffer on error.
	* srec.c (srec_mkobject): Always allocate tdata.
	(srec_object_p): Clean up tdata properly on error.
	(symbolsrec_object_p): Likewise.
	* versados.c (versados_object_p): Likewise.
	* vms-misc.c (_bfd_vms_get_record): Use bfd_malloc instead of malloc,
	and bfd_realloc instead of realloc.
	(add_new_contents): Use bfd_alloc instead of bfd_malloc for sections.
	* vms.c (vms_initialize): Always allocate tdata.  Use bfd_alloc in
	place of bfd_malloc, simplifying error freeing.  Free hash table too.
	(vms_object_p): Clean up tdata on error.
	(vms_mkobject): Don't complain on stderr if vms_initialize fails.
	(vms_close_and_cleanup): Adjust for bfd_alloc use.

	2002-07-17  Ian Rickards  <irickard@@arm.com>
	* dwarf2.c (concat_filename): If we can't establish the directory
	just return the filename.

	2002-07-16  Alan Modra  <amodra@@bigpond.net.au>
	* elflink.h: Formatting fixes, tidy prototypes.
	(elf_link_assign_sym_version): Move common code out of loop.

	2002-07-04  Bruno Haible  <bruno@@clisp.org>
	* elf32-i386.c: Don't defined ELF_ARCH etc. if this file is included
	by a target variant implementation.
	* elf64-alpha.c: Likewise.
	* elf32-i386-fbsd.c: New file.
	* elf64-alpha-fbsd.c: New file.
	* targets.c: Support bfd_elf32_i386_freebsd_vec and
	bfd_elf64_alpha_freebsd_vec.
	* configure.in: Accept the vectors bfd_elf32_i386_freebsd_vec,
	bfd_elf64_alpha_freebsd_vec.
	* Makefile.am (BFD32_BACKENDS): Add elf32-i386-fbsd.lo.
	(BFD32_BACKENDS_CFILES): Add elf32-i386-fbsd.c.
	(BFD64_BACKENDS): Add elf64-alpha-fbsd.lo.
	(BFD64_BACKENDS_CFILES): Add elf64-alpha-fbsd.c.
	(elf32-i386-fbsd.lo, elf64-alpha-fbsd.lo): Add dependencies.
	* config.bfd: For FreeBSD targets, set targ_defvec to a FreeBSD
	specific targets. Define OLD_FREEBSD_ABI_LABEL if appropriate.
@
text
@a212 1
	elf32-i386-fbsd.lo \
a369 1
	elf32-i386-fbsd.c \
a475 1
	elf64-alpha-fbsd.lo \
a500 1
	elf64-alpha-fbsd.c \
a1139 4
elf32-i386-fbsd.lo: elf32-i386-fbsd.c elf32-i386.c $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/elf/i386.h \
  $(INCDIR)/elf/reloc-macros.h elf32-target.h
a1481 7
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/alpha.h \
  $(INCDIR)/elf/reloc-macros.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/sym.h $(INCDIR)/coff/symconst.h $(INCDIR)/coff/ecoff.h \
  $(INCDIR)/coff/alpha.h $(INCDIR)/aout/ar.h libcoff.h \
  libecoff.h ecoffswap.h elf64-target.h
elf64-alpha-fbsd.lo: elf64-alpha-fbsd.c elf64-alpha.c $(INCDIR)/filenames.h \
@


1.92.2.2
log
@2002-11-07  Graeme Peterson  <gp@@qnx.com>

	* Makefile.am: Removed entries for elf32-i386qnx.c and
	elf32-i386qnx.lo.
	* Makefile.in: Regenerate.
	* config.bfd: Changed i[3456]86-*-nto-qnx* targ_defvec from
	bfd_elf32_i386qnx_vec to bfd_elf32_i386_vec.
	* configure.in: Removed support for bfd_elf32_i386qnx_vec.
	* configure: Regenerate.
	* elf32-i386qnx.c: Removed.
	* elf.c: Removed calls to QNX specific set_nonloadable_filepos,
	is_contained_by_filepos, and copy_private_bfd_data_p.
	* elf32-i386.c: Removed QNX specific #ifdef ELF32_I386_C_INCLUDED.
	* targets.c: Removed bfd_elf32_i386qnx_vec.
	* elfxx-target.h: Removed QNX specific elf_backend_set_nonloadable_filepos,
	elf_backend_is_contained_by_filepos, and elf_backend_copy_private_bfd_data_p.
	* elf-bfd.h: Removed QNX specific set_nonloadable_filepos,
	is_contained_by_filepos, and copy_private_bfd_data_p.
@
text
@d214 1
d372 1
d1145 4
@


1.91
log
@2002-06-18  Dave Brolley  <brolley@@redhat.com>

	From Catherine Moore, Michael Meissner, Dave Brolley:
	* po/SRC-POTFILES.in: Add cpu-frv.c and elf32-frv.c
	* targets.c: Support bfd_elf32_frv_vec.
	* reloc.c: Add FRV relocs.
	* configure.in: Add support for bfd-elf32-frv-vec.
	* config.bfd (targ_cpu): Add support for frv-*-elf.
	* archures.c: Add frv arch and machines.
	* Makefile.am (ALL_MACHINES): Add cpu-frv.lo.
	(ALL_MACHINES_CFILES): Add cpu-frv.c.
	(BFD32_BACKENDS): Add elf32-frv.lo.
	(BFD32_BACKENDS_CFILES): Add elf32-frv.c
	(cpu-frv.lo): New target.
	(elf32-frv.lo): New target.
	* cpu-frv.c: New file.
	* elf32-frv.c: New file.
@
text
@d300 1
d455 1
d1118 3
a1120 3
elf32-frv.lo: elf32-frv.c elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/frv.h $(INCDIR)/elf/reloc-macros.h \
d1439 3
@


1.90
log
@* Makefile.am (BFD32_BACKENDS): Add vax1knetbsd.lo.
(BFD32_BACKENDS_CFILES): Add vax1knetbsd.c.
Regenerate dependency lists.
* Makefile.in: Regenerate.
* config.bfd (vax-*-netbsdelf*, vax-*-netbsdaout*): Add
vax1knetbsd_vec to targ_selvecs.
* configure.in: Add vax1knetbsd_vec.
* configure: Regenerate.
* targets.c (_bfd_target_vector): Add vax1knetbsd_vec.
* vax1knetbsd.c: New file.
* vaxnetbsd.c: Update copyright years.
(TARGET_PAGE_SIZE): Set to 0x1000.
(DEFAULT_MID): Set to M_VAX4K_NETBSD.
@
text
@d61 1
d111 1
d207 1
d363 1
a836 1

d892 1
d1115 4
@


1.89
log
@	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.
@
text
@d296 1
d449 1
d1425 3
@


1.88
log
@bfd/
* Makefile.am (BFD32_BACKENDS): Add elf32-sh64-com.lo.
(BFD32_BACKENDS_CFILES): Add elf32-sh64-com.c.
(elf32-sh64-com.lo): New dependency list.
* Makefile.in: Regenerate.
* configure.in (bfd_elf32_sh64_vec, bfd_elf32_sh64l_vec)
(bfd_elf32_sh64nbsd_vec, bfd_elf32_sh64lnbsd_vec): Add
elf32-sh64-com.lo.
* configure: Regenerate.
* elf32-sh64.c (sh64_address_in_cranges)
(sh64_get_contents_type, sh64_address_is_shmedia): Move to...
(crange_qsort_cmpb, crange_qsort_cmpl, crange_bsearch_cmpb):
(crange_bsearch_cmpl): Prepend _bfd_sh64_ to name and move to...
* elf32-sh64-com.c: ...here.  New file.

include/elf/
* sh.h (_bfd_sh64_crange_qsort_cmpb, _bfd_sh64_crange_qsort_cmpl)
(_bfd_sh64_crange_bsearch_cmpb, _bfd_sh64_crange_bsearch_cmpl): New
prototypes.
@
text
@d871 2
a872 1
merge.lo: merge.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
d1255 1
a1255 1
  $(INCDIR)/bfdlink.h $(INCDIR)/hashtab.h
@


1.87
log
@bfd:
* Makefile.am (BFD32_BACKENDS): Add elf32-sh64-nbsd.lo.
(BFD32_BACKENDS_CFILES): Add elf32-sh64-nbsd.c.
(BFD64_BACKENDS): Add elf64-sh64-nbsd.lo.
(BFD64_BACKENDS_CFILES): Add elf64-sh64-nbsd.c.
(elf32-sh64-nbsd.lo, elf64-sh64-nbsd.lo): New rules.
* Makefile.in: Regenerate.
* config.bfd (sh5le-*-netbsd*, sh5-*-netbsd*, sh64le-*-netbsd*)
(sh64-*-netbsd*): New targets.
* configure.in: Add bfd_elf32_sh64nbsd_vec, bfd_elf32_sh64lnbsd_vec,
bfd_elf64_sh64nbsd_vec, and bfd_elf64_sh64lnbsd_vec.
* configure: Regenerate.
* elf32-sh64-nbsd.c: New file.
* elf64-sh64-nbsd.c: New file.
* targets.c: Add extern decls for bfd_elf32_sh64nbsd_vec,
bfd_elf32_sh64lnbsd_vec, bfd_elf64_sh64nbsd_vec, and
bfd_elf64_sh64lnbsd_vec.

gas:
* configure.in (sh5*): Set cpu_type to sh64 and endian to big.
(sh5le*, sh64le*): Set cpu_type to sh64 and endian to little.
(sh5*-*-netbsd*, sh64*-*-netbsd*): New targets.
* configure: Regenerate.
* config/tc-sh64.c (sh64_target_format): Add support for NetBSD
environment.

ld:
* Makefile.am (ALL_EMULATIONS): Add eshelf32_nbsd.o,
eshlelf32_nbsd.o, eshelf64_nbsd.o, and eshlelf64_nbsd.o.
(eshelf32_nbsd.c, eshelf64_nbsd.c, eshlelf32_nbsd.c)
(eshlelf64_nbsd.c): New rules.
* Makefile.in: Regenerate.
* configure.tgt (sh5le-*-netbsd*, sh5-*-netbsd*, sh64le-*-netbsd*)
(sh64-*-netbsd*): New targets.
* emulparams/shelf32_nbsd.sh: New file.
* emulparams/shelf64_nbsd.sh: New file.
* emulparams/shlelf32_nbsd.sh: New file.
* emulparams/shlelf64_nbsd.sh: New file.

opcodes:
* configure.in: Add "sh5*-*" to list of targets which include
sh64 support.
* configure: Regenerate.
@
text
@d232 1
d382 1
d1202 4
a1205 5
elf32-sh64-nbsd.lo: elf32-sh64-nbsd.c $(INCDIR)/filenames.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h $(srcdir)/../opcodes/sh64-opc.h \
  elf32-sh64.c elf32-sh.c $(INCDIR)/elf/sh.h $(INCDIR)/elf/reloc-macros.h \
  elf32-target.h
d1222 5
d1500 4
a1503 4
elf64-sh64-nbsd.lo: elf64-sh64-nbsd.c $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/elf/sh.h \
  $(INCDIR)/elf/reloc-macros.h elf64-sh64.c elf64-target.h
@


1.86
log
@	* Makefile.am (BFD32_BACKENDS): Add elf32-i386qnx.lo.
	(BFD32_BACKENDS_CFILES): Add elf32-i386qnx.c.
	Run "make dep-am".
	* Makefile.in: Regenerate.
	* config.bfd: Add i[3456]86-*-nto-qnx* support.
	* configure.in: Add bfd_elf32_i386qnx_vec support.
	* configure: Regenerate.
	* elf-bfd.h (struct elf_backend_data): Add set_nonloadable_filepos,
	is_contained_by_filepos, and copy_private_bfd_data_p.
	* elf.c (assign_file_positions_for_segments): Call backend
	set_nonloadable_filepos.  Fix non-K&R call to _bfd_error_handler.
	(IS_CONTAINED_BY_FILEPOS): Define.
	(INCLUDE_SECTION_IN_SEGMENT): Also test IS_CONTAINED_BY_FILEPOS.
	(copy_private_bfd_data): Use IS_CONTAINED_BY_FILEPOS.  Typo fix.
	Fix non-K&R call to _bfd_error_handler.
	(_bfd_elf_copy_private_section_data): Use backend
	copy_private_bfd_data_p.
	* elf32-i386.c: Don't include elfxx-target.h when
	ELF32_I386_C_INCLUDED is defined.
	* elf32-i386qnx.c: New QNX elf backend file.
	* elfxx-target.h: Add elf_backend_set_nonloadable_filepos,
	elf_backend_is_contained_by_filepos, and
	elf_backend_do_copy_private_bfd_data.
	* targets.c: Add bfd_target bfd_elf32_i386qnx_vec.
@
text
@d233 1
d385 1
d472 1
d498 1
d1200 5
d1494 4
@


1.85
log
@2002-05-29  Matt Thomas  <matt@@3am-software.com>

* Makefile.am (BFD32_BACKENDS): Add elf32-vax.lo.
(BFD32_BACKENDS_CFILES): Add elf32-vax.c.
(elf32-vax.lo): New rule.
* Makefile.in: Regenerate.
* configure.in (bfd_elf32_vax_vec)
(vaxnetbsd_vec): New vectors.
* configure: Regenerate.
* config.bfd (vax-*-netbsdelf*)
(vax-*-netbsdaout*)
(vax-*-netbsd*): New targets.
* elf32-vax.c: New file.
* reloc.c: Add VAX relocations.
* bfd-in2.h: Regenerate.
* targets.c (_bfd_target_vector): Add bfd_elf32_vax_vec.
@
text
@d210 1
d362 1
d878 1
a878 1
cpu-dlx.lo: cpu-d30v.c $(INCDIR)/filenames.h
d1121 4
d1224 1
a1224 1
  $(INCDIR)/libiberty.h elf32-target.h
@


1.84
log
@Add DLX target
@
text
@d234 1
d384 1
d1214 4
@


1.84.2.1
log
@Merge with mainline, kseitz_interps-20020619-merge.
@
text
@a60 1
	cpu-frv.lo \
a109 1
	cpu-frv.c \
a204 1
	elf32-frv.lo \
a209 1
	elf32-i386qnx.lo \
a230 1
	elf32-sh64-com.lo \
a231 1
	elf32-sh64-nbsd.lo \
a233 1
	elf32-vax.lo \
a291 1
	vax1knetbsd.lo \
a354 1
	elf32-frv.c \
a359 1
	elf32-i386qnx.c \
a376 1
	elf32-sh64-com.c \
a380 1
	elf32-sh64-nbsd.c \
a382 1
	elf32-vax.c \
a439 1
	vax1knetbsd.c \
a465 1
	elf64-sh64-nbsd.lo \
a490 1
	elf64-sh64-nbsd.c \
d821 1
d861 1
a861 2
merge.lo: merge.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/libiberty.h
d874 1
a874 1
cpu-dlx.lo: cpu-dlx.c $(INCDIR)/filenames.h
a875 1
cpu-frv.lo: cpu-frv.c $(INCDIR)/filenames.h
a1098 4
elf32-frv.lo: elf32-frv.c elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/frv.h $(INCDIR)/elf/reloc-macros.h \
  elf32-target.h
a1116 4
elf32-i386qnx.lo: elf32-i386qnx.c elf32-i386.c $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/elf/i386.h \
  $(INCDIR)/elf/reloc-macros.h elf32-target.h
a1187 4
elf32-sh64-com.lo: elf32-sh64-com.c $(INCDIR)/filenames.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/sh.h \
  $(INCDIR)/elf/reloc-macros.h $(srcdir)/../opcodes/sh64-opc.h
a1203 5
elf32-sh64-nbsd.lo: elf32-sh64-nbsd.c elf32-sh64.c \
  $(INCDIR)/filenames.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
  $(srcdir)/../opcodes/sh64-opc.h elf32-sh.c $(INCDIR)/elf/sh.h \
  $(INCDIR)/elf/reloc-macros.h elf32-target.h
a1212 4
elf32-vax.lo: elf32-vax.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/elf/vax.h $(INCDIR)/elf/reloc-macros.h \
  elf32-target.h
d1227 1
a1227 1
  $(INCDIR)/bfdlink.h $(INCDIR)/hashtab.h $(INCDIR)/libiberty.h
a1396 3
vax1knetbsd.lo: vax1knetbsd.c netbsd.h $(INCDIR)/filenames.h \
  libaout.h $(INCDIR)/bfdlink.h aout-target.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
a1472 4
elf64-sh64-nbsd.lo: elf64-sh64-nbsd.c elf64-sh64.c \
  $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/sh.h $(INCDIR)/elf/reloc-macros.h elf64-target.h
@


1.84.2.2
log
@Merge w/trunk (kseitz_interps-20020722-merge).
@
text
@a69 1
	cpu-ip2k.lo \
a119 1
	cpu-ip2k.c \
a216 1
	elf32-ip2k.lo \
a299 1
	vaxbsd.lo \
a371 1
	elf32-ip2k.c \
a453 1
	vaxbsd.c \
a901 1
cpu-ip2k.lo: cpu-ip2k.c $(INCDIR)/filenames.h
d1116 3
a1118 3
elf32-frv.lo: elf32-frv.c $(INCDIR)/filenames.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/elf/frv.h $(INCDIR)/elf/reloc-macros.h \
a1149 4
elf32-ip2k.lo: elf32-ip2k.c $(INCDIR)/filenames.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/elf/ip2k.h $(INCDIR)/elf/reloc-macros.h \
  elf32-target.h
a1436 3
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
vaxbsd.lo: vaxbsd.c $(INCDIR)/filenames.h libaout.h \
  $(INCDIR)/bfdlink.h aout-target.h $(INCDIR)/aout/aout64.h \
@


1.84.2.3
log
@Merge with kseitz_interps-20020809-merge of CVS head.
@
text
@a202 1
	elfarmqnx-nabi.lo \
a233 1
	elf32-ppcqnx.lo \
a360 1
	elfarmqnx-nabi.c \
a390 1
	elf32-ppcqnx.c \
a482 1
	elfn32-mips.lo \
a506 1
	elfn32-mips.c \
a1098 4
elfarmqnx-nabi.lo: elfarmqnx-nabi.c $(INCDIR)/elf/arm.h $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/filenames.h elf-bfd.h elf32-qnx.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
  elf32-arm.h elf32-target.h
d1146 1
a1146 1
  $(INCDIR)/bfdlink.h elf-bfd.h elf32-qnx.h $(INCDIR)/elf/common.h \
a1218 4
elf32-ppcqnx.lo: elf32-ppcqnx.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  elf-bfd.h elf32-qnx.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/elf/ppc.h $(INCDIR)/elf/reloc-macros.h \
  elf32-target.h
a1504 6
elfn32-mips.lo: elfn32-mips.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  genlink.h elf-bfd.h elfxx-mips.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/elf/mips.h \
  $(INCDIR)/elf/reloc-macros.h $(INCDIR)/coff/sym.h \
  $(INCDIR)/coff/symconst.h $(INCDIR)/coff/internal.h $(INCDIR)/coff/ecoff.h \
  $(INCDIR)/coff/mips.h ecoffswap.h elf32-target.h
@


1.84.2.4
log
@Merge with kseitz_interps-20020829-merge tag from trunk.
@
text
@a91 1
	cpu-tic4x.lo \
a142 1
	cpu-tic4x.c \
a187 1
	coff-tic4x.lo \
a242 1
	elf32-shqnx.lo \
a347 1
	coff-tic4x.c \
a401 1
	elf32-shqnx.c \
a935 1
cpu-tic4x.lo: cpu-tic4x.c $(INCDIR)/filenames.h
a1053 3
coff-tic4x.lo: coff-tic4x.c $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/coff/tic4x.h $(INCDIR)/coff/ti.h \
  $(INCDIR)/coff/internal.h libcoff.h coffcode.h coffswap.h
a1262 4
elf32-shqnx.lo: elf32-shqnx.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  elf-bfd.h elf32-qnx.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/elf/sh.h $(INCDIR)/elf/reloc-macros.h \
  elf32-target.h
@


1.84.2.5
log
@Merge with kseitz_interps-20020930-merge.
@
text
@a218 1
	elf32-i386-fbsd.lo \
a380 1
	elf32-i386-fbsd.c \
a489 1
	elf64-alpha-fbsd.lo \
a515 1
	elf64-alpha-fbsd.c \
d1061 3
a1063 3
coff-tic4x.lo: coff-tic4x.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/tic4x.h $(INCDIR)/coff/ti.h $(INCDIR)/coff/internal.h \
  libcoff.h coffcode.h coffswap.h
d1115 3
a1117 4
elfarmqnx-nabi.lo: elfarmqnx-nabi.c elfarm-nabi.c $(INCDIR)/elf/arm.h \
  $(INCDIR)/elf/reloc-macros.h $(INCDIR)/filenames.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h elf32-qnx.h \
d1160 1
a1160 2
  $(INCDIR)/elf/external.h $(INCDIR)/elf/i370.h $(INCDIR)/elf/reloc-macros.h \
  elf32-target.h
a1164 4
elf32-i386-fbsd.lo: elf32-i386-fbsd.c $(INCDIR)/filenames.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h elf32-i386.c \
  $(INCDIR)/elf/i386.h $(INCDIR)/elf/reloc-macros.h elf32-target.h
d1166 1
a1166 1
  $(INCDIR)/bfdlink.h elf-bfd.h $(INCDIR)/elf/common.h \
d1168 1
a1168 1
  $(INCDIR)/elf/reloc-macros.h elf32-qnx.h elf32-target.h
d1190 2
a1191 2
  $(INCDIR)/bfdlink.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/elf/m68hc11.h \
d1196 1
a1196 2
  $(INCDIR)/elf/reloc-macros.h $(INCDIR)/opcode/m68hc11.h \
  elf32-target.h
d1239 4
a1242 4
elf32-ppcqnx.lo: elf32-ppcqnx.c elf32-ppc.c $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/elf/ppc.h \
  $(INCDIR)/elf/reloc-macros.h elf32-qnx.h elf32-target.h
d1273 4
a1276 4
elf32-shqnx.lo: elf32-shqnx.c elf32-sh.c $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/elf/sh.h \
  $(INCDIR)/elf/reloc-macros.h elf32-qnx.h elf32-target.h
a1524 7
elf64-alpha-fbsd.lo: elf64-alpha-fbsd.c $(INCDIR)/filenames.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h elf64-alpha.c \
  $(INCDIR)/elf/alpha.h $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/sym.h $(INCDIR)/coff/symconst.h \
  $(INCDIR)/coff/ecoff.h $(INCDIR)/coff/alpha.h $(INCDIR)/aout/ar.h \
  libcoff.h libecoff.h ecoffswap.h elf64-target.h
d1533 6
a1538 7
elfn32-mips.lo: elfn32-mips.c $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h genlink.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h elfxx-mips.h \
  $(INCDIR)/elf/mips.h $(INCDIR)/elf/reloc-macros.h $(INCDIR)/coff/sym.h \
  $(INCDIR)/coff/symconst.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/ecoff.h $(INCDIR)/coff/mips.h $(INCDIR)/coff/external.h \
  ecoffswap.h elf32-target.h
@


1.84.2.6
log
@merge from mainline
@
text
@d35 1
a35 1
	merge.lo dwarf2.lo simple.lo
d44 1
a44 1
	merge.c dwarf2.c simple.c
d206 1
d219 2
d239 1
a239 1
	elf32-qnx.lo \
d242 1
d245 3
d369 1
d382 2
d401 1
a401 1
	elf32-qnx.c \
d406 4
d492 1
d500 1
d519 1
d528 1
d582 6
a587 7
	elf-bfd.h elf-hppa.h elf32-arm.h elf32-hppa.h elf32-qnx.h \
	elf64-hppa.h elfcode.h elfcore.h elflink.h \
	freebsd.h genlink.h go32stub.h \
	libaout.h libbfd.h libcoff.h libecoff.h libhppa.h libieee.h \
	libnlm.h liboasys.h libpei.h libxcoff.h \
	netbsd.h nlm-target.h nlmcode.h nlmswap.h ns32k.h \
	peicode.h som.h version.h vms.h xcoff-target.h
d591 1
a591 1
	bfdver.h elf32-target.h elf64-target.h targmatch.h
d674 1
a674 1
targets.lo: targets.c Makefile
d677 1
a677 1
archures.lo: archures.c Makefile
d809 1
a809 1
	reloc.c syms.c bfd.c archive.c corefile.c targets.c format.c
d866 1
a866 1
bfd.lo: bfd.c bfdver.h $(INCDIR)/filenames.h $(INCDIR)/libiberty.h \
a902 1
simple.lo: simple.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h
d1118 6
a1123 1
  elf32-arm.h elf32-target.h elf32-qnx.h
d1170 9
a1178 1
  elf32-target.h elf32-qnx.h
d1249 5
a1253 4
  elf32-target.h elf32-qnx.h
elf32-qnx.lo: elf32-qnx.c $(INCDIR)/filenames.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h elf32-qnx.h
d1270 18
a1287 1
  elf32-target.h elf32-qnx.h
d1496 2
a1497 2
vms-hdr.lo: vms-hdr.c bfdver.h $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/safe-ctype.h vms.h
d1536 7
d1581 4
@


1.83
log
@	* acinclude.m4 (AM_INSTALL_LIBBFD): New.
	* configure.in: Invoke AM_INSTALL_LIBBFD.
	* Makefile.am (install-data-local): Revert 2002-05-13.  Move to..
	(install_libbfd): .. New target.
	(uninstall_libbfd): Likewise.
	(install-bfdlibLTLIBRARIES): Likewise.
	(uninstall-bfdlibLTLIBRARIES): Likewise.
	(bfdlibdir): New.
	(bfdincludedir): New.
	(lib_LTLIBRARIES): Rename to bfdlib_LTLIBRARIES.
	* aclocal.m4: Regenerate.
	* configure: Regenerate.
	* Makefile.in: Regenerate.
@
text
@d59 1
d108 1
d203 1
d353 1
d874 1
d1090 4
@


1.82
log
@	* Makefile.am (install-data-local): Install headers to
	$(exec_prefix)/include.
	* Makefile.in: Regenerate.
@
text
@d12 2
d15 1
a15 1
lib_LTLIBRARIES = libbfd.la
d677 1
a677 2
# Install BFD include file, and others that it needs.
install-data-local: $(BFD_H)
d679 27
a705 5
	$(mkinstalldirs) $(DESTDIR)$(exec_prefix)/include
	$(INSTALL_DATA) $(BFD_H) $(DESTDIR)$(exec_prefix)/include/bfd.h
	$(INSTALL_DATA) $(INCDIR)/ansidecl.h $(DESTDIR)$(exec_prefix)/include/ansidecl.h
	$(INSTALL_DATA) $(INCDIR)/symcat.h $(DESTDIR)$(exec_prefix)/include/symcat.h
	$(INSTALL_DATA) $(INCDIR)/bfdlink.h $(DESTDIR)$(exec_prefix)/include/bfdlink.h
@


1.81
log
@	* dep-in.sed: Cope with absolute paths.
	* Makefile.am (dep.sed): Subst TOPDIR, and not INCDIR.
	Run "make dep-am".
	* Makefile.in: Regenerate.
	* coff-arm.c: Fix copyright date.
	* cpu-h8300.c: Likewise.
	* cpu-i370.c: Likewise.
	* cpu-s390.c: Likewise.
	* cpu-mips.c: Likewise.
	* po/SRC-POTFILES.in: Regenerate.
@
text
@d678 5
a682 5
	$(mkinstalldirs) $(DESTDIR)$(includedir)
	$(INSTALL_DATA) $(BFD_H) $(DESTDIR)$(includedir)/bfd.h
	$(INSTALL_DATA) $(INCDIR)/ansidecl.h $(DESTDIR)$(includedir)/ansidecl.h
	$(INSTALL_DATA) $(INCDIR)/symcat.h $(DESTDIR)$(includedir)/symcat.h
	$(INSTALL_DATA) $(INCDIR)/bfdlink.h $(DESTDIR)$(includedir)/bfdlink.h
@


1.81.4.1
log
@merge from trunk
@
text
@a11 2
bfdlibdir = @@bfdlibdir@@
bfdincludedir = @@bfdincludedir@@
d13 1
a13 1
bfdlib_LTLIBRARIES = libbfd.la
a56 1
	cpu-dlx.lo \
a104 1
	cpu-dlx.c \
a198 1
	elf32-dlx.lo \
a204 1
	elf32-i386qnx.lo \
a225 1
	elf32-sh64-com.lo \
a226 1
	elf32-sh64-nbsd.lo \
a228 1
	elf32-vax.lo \
a286 1
	vax1knetbsd.lo \
a347 1
	elf32-dlx.c \
a353 1
	elf32-i386qnx.c \
a370 1
	elf32-sh64-com.c \
a374 1
	elf32-sh64-nbsd.c \
a376 1
	elf32-vax.c \
a433 1
	vax1knetbsd.c \
a459 1
	elf64-sh64-nbsd.lo \
a484 1
	elf64-sh64-nbsd.c \
d675 2
a676 1
install-bfdlibLTLIBRARIES: @@INSTALL_LIBBFD_TRUE@@install_libbfd
d678 5
a682 27

uninstall-bfdlibLTLIBRARIES: @@INSTALL_LIBBFD_TRUE@@uninstall_libbfd
	@@$(NORMAL_UNINSTALL)

.PHONY: install_libbfd uninstall_libbfd
install_libbfd: $(bfdlib_LTLIBRARIES) $(BFD_H)
	$(mkinstalldirs) $(DESTDIR)$(bfdlibdir)
	$(mkinstalldirs) $(DESTDIR)$(bfdincludedir)
	@@list='$(bfdlib_LTLIBRARIES)'; for p in $$list; do \
	  if test -f $$p; then \
	    echo "$(LIBTOOL)  --mode=install $(INSTALL) $$p $(DESTDIR)$(bfdlibdir)/$$p"; \
	    $(LIBTOOL)  --mode=install $(INSTALL) $$p $(DESTDIR)$(bfdlibdir)/$$p; \
	  else :; fi; \
	done
	$(INSTALL_DATA) $(BFD_H) $(DESTDIR)$(bfdincludedir)/bfd.h
	$(INSTALL_DATA) $(INCDIR)/ansidecl.h $(DESTDIR)$(bfdincludedir)/ansidecl.h
	$(INSTALL_DATA) $(INCDIR)/symcat.h $(DESTDIR)$(bfdincludedir)/symcat.h
	$(INSTALL_DATA) $(INCDIR)/bfdlink.h $(DESTDIR)$(bfdincludedir)/bfdlink.h

uninstall_libbfd:
	list='$(bfdlib_LTLIBRARIES)'; for p in $$list; do \
	  $(LIBTOOL)  --mode=uninstall rm -f $(DESTDIR)$(bfdlibdir)/$$p; \
	done
	rm -f $(DESTDIR)$(bfdincludedir)/bfd.h
	rm -f $(DESTDIR)$(bfdincludedir)/ansidecl.h
	rm -f $(DESTDIR)$(bfdincludedir)/symcat.h
	rm -f $(DESTDIR)$(bfdincludedir)/bfdlink.h
d834 1
a834 2
merge.lo: merge.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
  $(INCDIR)/libiberty.h
a846 1
cpu-dlx.lo: cpu-dlx.c $(INCDIR)/filenames.h
a1062 4
elf32-dlx.lo: elf32-dlx.c $(INCDIR)/filenames.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/elf/dlx.h $(INCDIR)/elf/reloc-macros.h \
  elf32-target.h
a1084 4
elf32-i386qnx.lo: elf32-i386qnx.c elf32-i386.c $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/elf/i386.h \
  $(INCDIR)/elf/reloc-macros.h elf32-target.h
a1155 4
elf32-sh64-com.lo: elf32-sh64-com.c $(INCDIR)/filenames.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/sh.h \
  $(INCDIR)/elf/reloc-macros.h $(srcdir)/../opcodes/sh64-opc.h
a1171 5
elf32-sh64-nbsd.lo: elf32-sh64-nbsd.c elf32-sh64.c \
  $(INCDIR)/filenames.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
  $(srcdir)/../opcodes/sh64-opc.h elf32-sh.c $(INCDIR)/elf/sh.h \
  $(INCDIR)/elf/reloc-macros.h elf32-target.h
a1180 4
elf32-vax.lo: elf32-vax.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/elf/vax.h $(INCDIR)/elf/reloc-macros.h \
  elf32-target.h
d1195 1
a1195 1
  $(INCDIR)/bfdlink.h $(INCDIR)/hashtab.h $(INCDIR)/libiberty.h
a1364 3
vax1knetbsd.lo: vax1knetbsd.c netbsd.h $(INCDIR)/filenames.h \
  libaout.h $(INCDIR)/bfdlink.h aout-target.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
a1440 4
elf64-sh64-nbsd.lo: elf64-sh64-nbsd.c elf64-sh64.c \
  $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/sh.h $(INCDIR)/elf/reloc-macros.h elf64-target.h
@


1.81.4.2
log
@Merge with trunk.
@
text
@a60 1
	cpu-frv.lo \
a109 1
	cpu-frv.c \
a204 1
	elf32-frv.lo \
a359 1
	elf32-frv.c \
d833 1
a888 1
cpu-frv.lo: cpu-frv.c $(INCDIR)/filenames.h
a1110 4
  elf32-target.h
elf32-frv.lo: elf32-frv.c elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/frv.h $(INCDIR)/elf/reloc-macros.h \
@


1.80
log
@	* Makefile.am: Add elfxx-mips.c to the known backends.
	(elf32-mips.lo): remove dependency to coff/external.h.
	* Makefile.in: Regenerate.
	* configure.in: Add elfxx-mips.lo to all vectors using elf32-mips.lo
	Remove elf32-mips.lo from 64 bit vectors. Update dependencies
	accordingly.
	* configure: Regenerate.
	* elf-bfd.h: Move all MIPS ELF specific prototypes to elfxx-mips.h.
	(irix_compat_t): IRIX compatibility level, moved from elf32-mips.c.
	(elf_backend_mips_irix_compat, elf_backend_mips_rtype_to_howto): New
	MIPS specific backend functions.
	* elf32-mips.c: Moved most code to elfxx-mips.c.
	(mips_elf_hi16_reloc): Rename from _bfd_mips_elf_hi16_reloc and make
	static.
	(mips_elf_lo16_reloc): Likewise, was _bfd_mips_elf_lo16_reloc.
	(mips_elf_got16_reloc): Likewise, was _bfd_mips_elf_got16_reloc.
	(mips_elf_gprel32_reloc): Likewise, was _bfd_mips_elf_gprel32_reloc.
	(mips_elf32_rtype_to_howto): Rename from mips_rtype_to_howto. Changed
	interface to allow selection of the right REL or RELA howto table.
	(mips_elf32_object_p): Rename from _bfd_mips_elf_object_p and made
	static. Let it refuse n32 objects.
	(elf32_mips_grok_prstatus): Rename from _bfd_elf32_mips_grok_prstatus.
	(elf32_mips_grok_psinfo): Rename from _bfd_elf32_mips_grok_psinfo.
	(elf32_mips_discard_info): Rename from _bfd_elf32_mips_discard_info.
	(elf32_mips_ignore_discarded_relocs): Rename from
	_bfd_elf32_mips_ignore_discarded_relocs.
	(elf32_mips_write_section): Rename from _bfd_elf32_mips_write_section.
	(elf32_mips_irix_compat): New function, replaces IRIX_COMPAT.
	(elf_mips_howto_table_rela): Remove.
	* elf64-mips.c: Moved most code to elfxx-mips.c.
	(bfd_elf64_bfd_reloc_type_lookup): Make static.
	(mips_elf64_rtype_to_howto): New function.
	(mips_elf64_object_p): Likewise.
	(elf64_mips_irix_compat): Likewise.
	* elfxx-mips.c: New file containing common code merged together from
	elf32-mips.c and elf64-mips.c.
	* elfxx-mips.h: New file containing MIPS specific prototypes from
	elf-bfd.h.
	* elfxx-target.h: Add handling for elf_backend_mips_irix_compat and
	elf_backend_mips_rtype_to_howto.
@
text
@d707 2
a708 2
		-e 's!@@INCDIR@@!$(INCDIR)!'	\
		-e 's!@@SRCDIR@@!$(srcdir)!'
d1123 1
a1123 1
elfxx-mips.lo: elfxx-mips.c $(INCDIR)/filenames.h elf-bfd.h elfxx-mips.h \
d1125 3
a1127 2
  $(INCDIR)/elf/mips.h $(INCDIR)/elf/reloc-macros.h $(INCDIR)/coff/sym.h \
  $(INCDIR)/coff/symconst.h $(INCDIR)/coff/ecoff.h $(INCDIR)/coff/mips.h
d1129 2
a1130 2
  genlink.h elf-bfd.h elfxx-mips.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/elf/mips.h \
d1133 1
a1133 1
  ecoffswap.h elf32-target.h
d1419 6
a1424 5
  $(INCDIR)/bfdlink.h genlink.h elf-bfd.h elfxx-mips.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/elf/mips.h \
  $(INCDIR)/elf/reloc-macros.h $(INCDIR)/coff/sym.h $(INCDIR)/coff/symconst.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/ecoff.h $(INCDIR)/coff/alpha.h \
  ecoffswap.h elf64-target.h
@


1.79
log
@	* coff64-rs6000.c (_bfd_xcoff64_put_symbol_name): Prototype.
	Whitespace changes.
	* archive.c: Update copyright date.
	* bfd-in2.h: Regenerate.
	* libbfd.h: Regenerate.
	* Makefile.am: Run "make dep-am"
	* Makefile.in: Regenerate.
	* po/SRC-POTFILES.in: Regenerate.
@
text
@d216 1
d364 1
d1123 4
d1128 4
a1131 4
  genlink.h elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/elf/mips.h $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/coff/sym.h $(INCDIR)/coff/symconst.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/ecoff.h $(INCDIR)/coff/mips.h $(INCDIR)/coff/external.h \
d1418 1
a1418 1
  $(INCDIR)/bfdlink.h genlink.h elf-bfd.h $(INCDIR)/elf/common.h \
@


1.78
log
@Add AIX 64 shared library support and emulation layer for binutils
@
text
@d1144 5
a1164 5
elf32-sh64.lo: elf32-sh64.c $(INCDIR)/filenames.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h $(srcdir)/../opcodes/sh64-opc.h \
  elf32-sh.c $(INCDIR)/elf/sh.h $(INCDIR)/elf/reloc-macros.h \
  elf32-target.h
d1372 1
a1372 2
aix5ppc-core.lo: aix5ppc-core.c $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/xcoff.h libcoff.h libxcoff.h
d1393 2
a1394 2
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/x86-64.h \
@


1.77
log
@	* Makefile.am: "make dep-am".
	* Makefile.in: Regenerate.
	* aclocal.m4: Regenerate.
	* config.in: Regenerate.
	* configure: Regenerate.
@
text
@d444 1
d468 1
a1143 5
elf32-sh64.lo: elf32-sh64.c $(INCDIR)/filenames.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h $(srcdir)/../opcodes/sh64-opc.h \
  elf32-sh.c $(INCDIR)/elf/sh.h $(INCDIR)/elf/reloc-macros.h \
  elf32-target.h
d1160 5
d1372 2
@


1.76
log
@Contribute sh64-elf.
2002-01-23  Alexandre Oliva  <aoliva@@redhat.com>
* reloc.c (R_SH_GOTPLT32, R_SH_GOT_LOW16, R_SH_GOT_MEDLOW16,
R_SH_GOT_MEDHI16, R_SH_GOT_HI16, R_SH_GOTPLT_LOW16,
R_SH_GOTPLT_MEDLOW16, R_SH_GOTPLT_MEDHI16, R_SH_GOTPLT_HI16,
R_SH_PLT_LOW16, R_SH_PLT_MEDLOW16, R_SH_PLT_MEDHI16,
R_SH_PLT_HI16, R_SH_GOTOFF_LOW16, R_SH_GOTOFF_MEDLOW16,
R_SH_GOTOFF_MEDHI16, R_SH_GOTOFF_HI16, R_SH_GOTPC_LOW16,
R_SH_GOTPC_MEDLOW16, R_SH_GOTPC_MEDHI16, R_SH_GOTPC_HI16,
R_SH_GOT10BY4, R_SH_GOTPLT10BY4, R_SH_GOT10BY8, R_SH_GOTPLT10BY8,
R_SH_COPY64, R_SH_GLOB_DAT64, R_SH_JMP_SLOT64, R_SH_RELATIVE64):
New relocs.
* libbfd.h, bfd-in2.h: Rebuilt.
* elf32-sh.c (sh_elf_howto_table): Define new relocs.
(sh_reloc_map): Map them.
(PLT_ENTRY_SIZE, elf_sh_plt0_entry_be, elf_sh_plt0_entry_le,
elf_sh_plt_entry_be, elf_sh_plt_entry_le, elf_sh_pic_plt_entry_be,
elf_sh_pic_plt_entry_le, elf_sh_plt0_entry, elf_sh_plt_entry,
elf_sh_pic_plt_entry, elf_sh_sizeof_plt, elf_sh_plt_plt0_offset,
elf_sh_plt0_gotplt_offset, elf_sh_plt_temp_offset,
elf_sh_plt_symbol_offset, elf_sh_plt_reloc_offset,
movi_shori_putval) [INCLUDE_SHMEDIA]: New.
(elf_sh_link_hash_entry) [INCLUDE_SHMEDIA]: Add
datalabel_got_offset.
(sh_elf_link_hash_newfunc): Initialize it.
(sh_elf_relocate_section): Augment the scope of
seen_stt_datalabel.  Introduce GOTPLT support.	Extend GOTPC, PLT,
GOT and GOTOFF handling to new SHmedia relocation types.  Support
GOT_BIAS.
(sh_elf_check_relocs): Likewise.
(sh_elf_finish_dynamic_symbol) [TARGET_SHMEDIA]: Set up values in
PLT entries using movi_shori_putval.  Support GOT_BIAS.
(sh_elf_finish_dynamic_sections): Likewise.
* elf32-sh64.c (shmedia_prepare_reloc): Do not add addend to
relocation, it's now done by the caller.
(GOT_BIAS): New.
* elf64-sh64.c (GOT_BIAS, PLT_ENTRY_SIZE, elf_sh64_sizeof_plt,
elf_sh64_plt_plt0_offset, elf_sh64_plt0_gotplt_offset,
elf_sh64_plt_temp_offset, elf_sh64_plt_symbol_offset,
elf_sh64_plt_reloc_offset, ELF_DYNAMIC_INTERPRETER,
elf_sh64_pcrel_relocs_copied, elf_sh64_link_hash_entry,
elf_sh64_link_hash_table, sh64_elf64_link_hash_traverse,
sh64_elf64_hash_table): New.
(sh_elf64_howto_table): Introduce new relocs.
(sh_elf64_info_to_howto): Accept new PIC relocs.
(sh_elf64_relocate_section): Augment the scope of
seen_stt_datalabel.  Support new PIC relocs.
(sh_elf64_check_relocs): Support new PIC relocs.
(elf_sh64_plt0_entry_be, elf_sh64_plt0_entry_le,
elf_sh64_plt_entry_be, elf_sh64_plt_entry_le,
elf_sh64_pic_plt_entry_be, elf_sh64_pic_plt_entry_le,
elf_sh64_plt0_entry, elf_sh64_plt_entry, elf_sh64_pic_plt_entry,
sh64_elf64_link_hash_newfunc, sh64_elf64_link_hash_table_create,
movi_shori_putval, movi_3shori_putval,
sh64_elf64_create_dynamic_sections,
sh64_elf64_adjust_dynamic_symbol, sh64_elf64_discard_copies,
sh64_elf64_size_dynamic_sections,
sh64_elf64_finish_dynamic_symbol,
sh64_elf64_finish_dynamic_sections): New.
(elf_backend_create_dynamic-sections,
bfd_elf64_bfd_link_hash_table_create,
elf_backend_adjust_dynamic_symbol,
elf_backend_size_dynamic_sections,
elf_backend_finish_dynamic_symbol,
elf_backend_finish_dynamic_sections, elf_backend_want_got_plt,
elf_backend_plt_readonly, elf_backend_want_plt_sym,
elf_backend_got_header_size, elf_backend_plt_header_size):
Define.
2001-05-16  Alexandre Oliva  <aoliva@@redhat.com>
* elf32-sh.c: Renumbered and renamed some SH5 relocations to
match official numbers and names; moved unmaching ones to the
range 0xf2-0xff.
* elf32-sh64.c, elf64-sh64.c: Likewise.
2001-03-12  DJ Delorie	<dj@@redhat.com>
* elf32-sh.c (sh_elf_relax_section): Don't relax SHmedia
sections.
2001-03-12  DJ Delorie	<dj@@redhat.com>
* elf32-sh64.c (shmedia_prepare_reloc): Validate relocs that must
be aligned.
* elf64-sh64.c (sh_elf64_relocate_section): Ditto.
2001-01-14  Hans-Peter Nilsson	<hpn@@cygnus.com>
* elf32-sh64.c (bfd_elf32_bfd_copy_private_section_data): Define.
(sh64_elf_fake_sections): Set type to SHT_SH5_CR_SORTED for a
.cranges section with SEC_SORT_ENTRIES set.
(sh64_backend_section_from_shdr): Set SEC_SORT_ENTRIES on an
incoming sorted .cranges section.
(sh64_bfd_elf_copy_private_section_data): New.
(sh64_elf_final_write_processing): Only sort .cranges and modify
start address if called by linker.
2001-01-08  Ben Elliston  <bje@@redhat.com>
* elf32-sh64.c (sh64_elf_final_write_processing): Activate
Hans-Peter Nilsson's set bit 0 patch from	2001-01-06.
* elf64-sh64.c (sh64_elf64_final_write_processing): Ditto.
2001-01-06  Hans-Peter Nilsson	<hpn@@cygnus.com>
* elf64-sh64.c (sh_elf64_howto_table): No open brace at start of
line.  Add comments before all entries.
<R_SH_PT_16, R_SH_SHMEDIA_CODE>: Correct and clarify describing
comment.
(sh_elf64_reloc): Correct head comment.
(sh_elf64_relocate_section): Correct spacing.
<relocating for a local symbol>: Do not honour STO_SH5_ISA32;
instead call reloc_dangerous callback.
<case R_SH_SHMEDIA_CODE>: New case.
(sh_elf64_gc_mark_hook): Correct spacing.
(sh_elf64_check_relocs): Ditto.
* elf32-sh64.c (shmedia_prepare_reloc) <case R_SH_SHMEDIA_CODE>:
New case.
* elf32-sh.c: Correct #endif comments for #ifndef-wrapped
functions.
(sh_elf_howto_table) <R_SH_PT_16, R_SH_SHMEDIA_CODE>: Correct,
clarify describing comment.  Add comments before all entries.
(sh_elf_relocate_section) <relocating for a local symbol>: Do not
honour STO_SH5_ISA32; instead call reloc_dangerous callback.
2001-01-06  Hans-Peter Nilsson	<hpn@@cygnus.com>
Sort .cranges section in final link.  Prepare to set bit 0 on
entry address.
* elf32-sh64.c (struct sh64_find_section_vma_data): New.
(sh64_elf_link_output_symbol_hook): Fix typo in prototype.
(sh64_elf_set_mach_from_flags): Set SEC_DEBUGGING on incoming
.cranges section.
(sh64_backend_section_from_shdr): New, to recognize
SHT_SH5_CR_SORTED on incoming .cranges section.
(elf_backend_section_from_shdr): Define.
(sh64_elf_final_write_processing): Sort outgoing .cranges
section.  (New, temporarily disabled:) Set bit 0 on entry address
according to ISA type.
(sh64_find_section_for_address): New.
(crange_qsort_cmpb, crange_qsort_cmpl, crange_bsearch_cmpb,
crange_bsearch_cmpl): Move here from opcodes/sh64-dis.c.
(sh64_address_in_cranges): Move here from opcodes/sh64-dis.c.  Use
bfd_malloc, not xmalloc.
(sh64_get_contents_type): Move here from opcodes/sh64-dis.c.  Make
global.
* elf32-sh64.c (sh64_elf64_final_write_processing): New, (but
temporarily disabled) setting bit 0 on entry address.
(elf_backend_final_write_processing): Define.
2001-01-05  Hans-Peter Nilsson	<hpn@@cygnus.com>
* elf32-sh.c (sh_elf_howto_table) <R_SH_PT_16>: Adjust fields to
be a proper relocation for PTA and PTB rather than a marker.
<R_SH_IMMU5, R_SH_IMMS6, R_SH_IMMU6, R_SH_IMMS10, R_SH_IMMS10BY2,
R_SH_IMMS10BY4, R_SH_IMMS10BY8, R_SH_IMMS16, R_SH_IMMU16,
R_SH_IMM_LOW16, R_SH_IMM_LOW16_PCREL, R_SH_IMM_MEDLOW16,
R_SH_IMM_MEDLOW16_PCREL, R_SH_IMM_MEDHI16, R_SH_IMM_MEDHI16_PCREL,
R_SH_IMM_HI16, R_SH_IMM_HI16_PCREL, R_SH_64, R_SH_64_PCREL>:
Zero src_mask.
* elf64-sh64.c: Ditto.
(sh_elf64_relocate_section) <case R_SH_PT_16>: New case.
* elf32-sh64.c: Include opcodes/sh64-opc.h
(shmedia_prepare_reloc): Take a bfd_link_info pointer as first
argument.  Drop const qualifiers from "bfd *" and "bfd_byte *"
parameters.  No unused parameters.  Caller changed.
<case R_SH_PT_16>: New case.
* Makefile.am (elf32-sh64.lo): Add dependency on sh64-opc.h.
* Makefile.in: Regenerate.
2000-12-30  Hans-Peter Nilsson	<hpn@@cygnus.com>
* elf64-sh64.c (sh64_elf64_fake_sections): Set SHF_SH5_ISA32 for
all code sections.
(sh_elf64_set_mach_from_flags): Change from EF_SH64 to EF_SH5.
(sh64_elf_merge_private_data): Ditto.
* elf32-sh64.c (sh64_elf_fake_sections): Use sh64_elf_section_data
to access stored section flags.
(sh64_elf_final_write_processing): Return immediately unless
called by linker.  Use sh64_elf_section_data (cranges) to get size
of linker-generated cranges entries.
(sh64_elf_copy_private_data): Add missing "return true".
(sh64_elf_set_mach_from_flags): Change from EF_SH64 to EF_SH5.
(sh_elf64_merge_private_data): Ditto.
2000-12-19  Hans-Peter Nilsson	<hpn@@cygnus.com>
* elf64-sh64.c (sh64_elf64_fake_sections): New, copy of
elf64-sh64.c:sh64_elf_fake_sections.
(elf_backend_fake_sections): Define as sh64_elf64_fake_sections.
2000-12-18  Hans-Peter Nilsson	<hpn@@cygnus.com>
* elf32-sh64.c (sh64_elf_copy_private_data_internal): Delete.
(sh64_elf_final_write_processing): New.
(elf_backend_final_write_processing): Define.
(sh64_elf_fake_sections): Get header flags from tdata field.
(sh64_elf_copy_private_data): Do not call
sh64_elf_copy_private_data_internal, just copy e_flags field.
(sh64_elf_merge_private_data): Do not call
sh64_elf_copy_private_data_internal.
2000-12-12  Hans-Peter Nilsson	<hpn@@cygnus.com>
Remove EF_SH64_ABI64, let ELF size make difference.
Remove SH64-specific BFD section flag.
* elf32-sh64.c (sh64_elf_fake_sections): Recognize section as
containing SHmedia through elf_section_data (asect)->tdata
non-zero, not using a BFD section flag.
(sh64_elf_set_mach_from_flags): Don't recognize EF_SH64_ABI64.
(sh64_elf_merge_private_data): Similar.
(elf_backend_section_flags): Don't define.
(sh64_elf_backend_section_flags): Delete.
* elf64-sh64.c (sh_elf64_set_mach_from_flags): Recognize EF_SH64,
not EF_SH64_ABI64.
(sh_elf64_merge_private_data): Similar.
* section.c (Section flags definitions): Don't define
SEC_SH_ISA_SHMEDIA.
(bfd-in2.h): Regenerate.
2000-12-09  Hans-Peter Nilsson	<hpn@@cygnus.com>
Make DataLabel references work with partial linking.
* elf32-sh64.c: Fix formatting.
(sh64_elf_link_output_symbol_hook): New.
(elf_backend_link_output_symbol_hook): Define to
sh64_elf_link_output_symbol_hook.
(sh64_elf_add_symbol_hook): Make DataLabel symbol just global
undefined if partial linking.  Adjust sanity check.
* elf64-sh64.c (sh64_elf64_link_output_symbol_hook): New.
(elf_backend_link_output_symbol_hook): Define to
sh64_elf64_link_output_symbol_hook.
(sh64_elf64_add_symbol_hook): Make DataLabel symbol just global
undefined if partial linking.  Adjust sanity check.
2000-12-07  Hans-Peter Nilsson	<hpn@@cygnus.com>
Implement semantics for inter-file DataLabel references.
* elf64-sh64.c (DATALABEL_SUFFIX): Define.
(sh64_elf64_add_symbol_hook): New.
(sh_elf64_relocate_section): If passing an indirect symbol with
st_type STT_DATALABEL on the way to a symbol with st_other
STO_SH5_ISA32, do not bitor 1 to the relocation.
(elf_backend_add_symbol_hook): Define to
sh64_elf64_add_symbol_hook.
* elf64-sh32.c: Tweak comments.
(DATALABEL_SUFFIX): Define.
(sh64_elf_add_symbol_hook): New.
(elf_backend_add_symbol_hook): Define to sh64_elf_add_symbol_hook.
* elf32-sh.c (sh_elf_relocate_section): If passing an indirect
symbol with st_type STT_DATALABEL on the way to a symbol with
st_other STO_SH5_ISA32, do not bitor 1 to the relocation.
2000-12-05  Hans-Peter Nilsson	<hpn@@cygnus.com>
Pass through STT_DATALABEL.
* elf32-sh64.c (sh64_elf_get_symbol_type): New.
(elf_backend_get_symbol_type): Define.
* elf64-sh64.c (sh64_elf64_get_symbol_type): New.
(elf_backend_get_symbol_type): Define.
2000-11-30  Hans-Peter Nilsson	<hpn@@cygnus.com>
* elf32-sh64.c: Tweak comments.
(sh64_elf_copy_private_data_internal): Add prototype.
(bfd_elf32_bfd_set_private_flags): Define.
(sh64_elf_copy_private_data_internal): Compare machine name, not
textual BFD target name, to check whether to copy section flag
SHF_SH5_ISA32.
(sh64_elf_merge_private_data): Validize bfd_get_arch_size.
Tweak section-contents-type-mismatch message.
(shmedia_prepare_reloc): Add ATTRIBUTE_UNUSED markers.
Validize reloc-types.
* elf64-sh64.c: New file.
* targets.c (bfd_elf64_sh64_vec, bfd_elf64_sh64l_vec): Declare.
* Makefile.am (BFD64_BACKENDS): Add elf64-sh64.lo.
(BFD64_BACKENDS_CFILES): Add elf64-sh64.c.
Regenerate dependencies.
* Makefile.in: Regenerate.
* config.bfd (sh64-*-elf*): Add bfd_elf64_sh64_vec and
bfd_elf64_sh64l_vec.
* configure.in: Handle bfd_elf64_sh64_vec and
bfd_elf64_sh64l_vec.
* configure: Regenerate.
* po/POTFILES.in: Regenerate.
* po/bfd.pot: Regenerate.
2000-11-29  Hans-Peter Nilsson	<hpn@@cygnus.com>
* elf32-sh64.c (sh64_elf_set_mach_from_flags): Do not recognize
anything else but EF_SH64 and EF_SH64_ABI64.
(sh64_elf_merge_private_data): Emit error for anything else but
EF_SH64 and EF_SH64_ABI64.
* config.bfd: Remove bfd_elf32_shblin_vec and bfd_elf32_shlin_vec
from targ_selvecs.
* configure.in: Add cofflink.lo to bfd_elf32_sh64_vec and
bfd_elf32_sh64l_vec as a temporary measure.
* configure: Regenerate.
2000-11-27  Hans-Peter Nilsson	<hpn@@cygnus.com>
* cpu-sh.c (arch_info_struct): Include sh5 item
unconditionalized.
* config.bfd (sh64-*-elf*): Do not set targ_cflags.
Add targ_selvecs bfd_elf32_sh_vec, bfd_elf32_shl_vec,
bfd_elf32_shblin_vec and bfd_elf32_shlin_vec.
* elf32-sh64.c: Tweak comments.
(sh64_elf_set_mach_from_flags): Recognize all machine flags that
are proper subsets of SH64 as bfd_mach_sh5.  Add EF_SH64_ABI64.
(sh64_elf_copy_private_data_internal): Wrap long line.
(sh64_elf_merge_private_data): Rewrite to allow objects from
SH64 subsets to be linked together.
(INCLUDE_SHMEDIA): Define.
* elf32-sh.c (sh_elf_relocate_section) <local symbol>:
Parenthesize plus-expression inside or-expression.
<global symbol>: Ditto.
(sh_elf_set_mach_from_flags): Remove code refusing
deleted EF_SH64_32BIT_ABI flag.
2000-11-26  Hans-Peter Nilsson	<hpn@@cygnus.com>
* elf32-sh.c (sh_elf_howto_table) <R_SH_IMM_LOW16_PCREL,
R_SH_IMM_MEDLOW16_PCREL, R_SH_IMM_MEDHI16_PCREL,
R_SH_IMM_HI16_PCREL, R_SH_64_PCREL>: Set pcrel_offset to true.
(sh_elf_relocate_section) <local symbol>: Or 1 in
calculation of relocation if sym->st_other & STO_SH5_ISA32.
<global symbol>: Ditto if h->other & STO_SH5_ISA32.
* elf32-sh64.c (shmedia_prepare_reloc): Add rel->r_addend to
relocation.
2000-11-24  Hans-Peter Nilsson	<hpn@@cygnus.com>
* Makefile.am (BFD32_BACKENDS): Add elf32-sh64.lo.
(BFD32_BACKENDS_CFILES): Add elf32-sh64.c.
Regenerate dependencies.
* Makefile.in: Regenerate.
* archures.c: Add bfd_mach_sh5.
* config.bfd: Map targ_cpu sh* to bfd_sh_arch.
Handle sh64-*-elf*.  Set targ_cflags to -DINCLUDE_SHMEDIA.
* configure.in: Handle bfd_elf32_sh64_vec and bfd_elf32_sh64l_vec.
* configure: Regenerate.
* reloc.c (BFD_RELOC_SH_SHMEDIA_CODE, BFD_RELOC_SH_IMMU5,
BFD_RELOC_SH_IMMS6, BFD_RELOC_SH_IMMS6BY32, BFD_RELOC_SH_IMMU6,
BFD_RELOC_SH_IMMS10, BFD_RELOC_SH_IMMS10BY2,
BFD_RELOC_SH_IMMS10BY4, BFD_RELOC_SH_IMMS10BY8,
BFD_RELOC_SH_IMMS16, BFD_RELOC_SH_IMMU16, BFD_RELOC_SH_IMM_LOW16,
BFD_RELOC_SH_IMM_LOW16_PCREL, BFD_RELOC_SH_IMM_MEDLOW16,
BFD_RELOC_SH_IMM_MEDLOW16_PCREL, BFD_RELOC_SH_IMM_MEDHI16,
BFD_RELOC_SH_IMM_MEDHI16_PCREL, BFD_RELOC_SH_IMM_HI16,
BFD_RELOC_SH_IMM_HI16_PCREL, BFD_RELOC_SH_PT_16): New relocations.
* cpu-sh.c [INCLUDE_SHMEDIA] (arch_info_struct): Define and link
in item for SH5.
* elf32-sh.c [INCLUDE_SHMEDIA] (sh_elf_howto_table): Add howto items
for SHmedia relocs.
[INCLUDE_SHMEDIA] (sh_rel): Add mappings for SHmedia relocs.
[INCLUDE_SHMEDIA] (sh_elf_relocate_section) [default]: Call
shmedia_prepare_reloc, goto final_link_relocate if it returns
non-zero, else fail as before.
(sh_elf_set_mach_from_flags): Provide function only if not defined
as macro.  Do not recognize objects with EF_SH64_32BIT_ABI set.
(sh_elf_set_private_flags): Provide function only if not defined
as a macro.
(sh_elf_copy_private_data): Similar.
(sh_elf_merge_private_data): Similar.
* section.c (SEC_SH_ISA_SHMEDIA): New.
* targets.c (bfd_elf32_sh64_vec, bfd_elf32_sh64l_vec): Declare.
* elf32-sh64.c: New file.
* libbfd.h: Regenerate.
* bfd-in2.h: Regenerate.
* po/POTFILES.in: Regenerate.
* po/bfd.pot: Regenerate.
* bfd-in2.h: Regenerate.
* libbfd.h: Regenerate.
@
text
@d1144 3
a1146 6
  $(INCDIR)/bfdlink.h elf32-sh.c $(INCDIR)/elf/sh.h $(INCDIR)/elf/reloc-macros.h \
  elf32-target.h $(srcdir)/../opcodes/sh64-opc.h
elf64-sh64.lo: elf64-sh64.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/elf/sh.h $(INCDIR)/elf/reloc-macros.h \
  elf64-target.h
d1425 4
@


1.76.2.1
log
@	* aclocal.m4: Regenerate.
	* config.in: Regenerate.
	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.

	Merge from mainline
	2002-03-27  Gregory Steuck <greg@@nest.cx>
	* elf.c (_bfd_elf_get_symtab_upper_bound): Leave space for
	terminating NULL if empty symbol table.
	(_bfd_elf_get_dynamic_symtab_upper_bound): Likewise.

	2002-03-26  Alan Modra  <amodra@@bigpond.net.au>
	* elflink.h (elf_gc_mark): Don't recurse into non-ELF sections.

	2002-03-23  Alan Modra  <amodra@@bigpond.net.au>
	* elf.c (_bfd_elf_make_section_from_shdr): Don't set lma based on
	section file offset for !SEC_LOAD sections.

	2002-03-20  Daniel Jacobowitz  <drow@@mvista.com>
	* dwarf2.c (struct funcinfo): Move up.
	(lookup_address_in_function_table): New argument function_ptr.
	Set it.
	(lookup_address_in_line_table): New argument function.  If function
	is non-NULL, use it to handle ``addr'' before the first line note of
	the function.
	(comp_unit_find_nearest_line): Update and swap calls to
	lookup_address_in_function_table and lookup_address_in_line_table.
	* syms.c (_bfd_stab_section_find_nearest_line): Use the first
	N_SLINE encountered if we see an N_FUN before any N_SLINE.

	2002-03-18  Alan Modra  <amodra@@bigpond.net.au>
	* libbfd.c (bfd_write_bigendian_4byte_int): Return true iff success.
	* libbfd.h: Regenerate.
	* archive.c (coff_write_armap): Pass on failures from
	bfd_write_bigendian_4byte_int.

	2002-03-14  H.J. Lu <hjl@@gnu.org>
	* elflink.h (NAME(bfd_elf,size_dynamic_sections)): Set the BFD
	error to bfd_error_nonrepresentable_section for reinit_array
	section in DSO.

	2002-03-14  Nick Clifton  <nickc@@cambridge.redhat.com>
	* coffcode.h (coff_slurp_symbol_table): When adding BSF_WEAK flag,
	OR it in rather than replacing previously selected flags.
	* elfxx-target.h (TARGET_BIG_SYM): Set ar_max_namelen to 15.
	(TARGET_LITTLE_SYM): Set ar_max_namelen to 15.

	2002-03-14  Alan Modra  <amodra@@bigpond.net.au>
	* elflink.h (elf_bfd_final_link): Revert last change.  Instead,
	ensure reloc size matches before calling elf_link_input_bfd.
	Add an assert to check reloc size when counting output relocs.

	2002-03-14  Nick Clifton  <nickc@@cambridge.redhat.com>
	* mmo.c (mmo_get_loc): Return NULL rather than false.

	2002-03-13  Alan Modra  <amodra@@bigpond.net.au>
	* elflink.h: Formatting fixes.
	(elf_link_output_extsym): Merge undefined and undef weak cases.
	* elflink.h (elf_bfd_final_link): Only call elf_link_input_bfd
	when word size of input matches output word size.

	2002-03-07  H.J. Lu  (hjl@@gnu.org)
	* coff-sh.c (shcoff_reloc_map): Use bfd_reloc_code_real_type
	as the type for bfd_reloc_val.

	2002-03-05  John David Anglin  <dave@@hiauly1.hia.nrc.ca>
	* elf-hppa.h (elf_hppa_is_dynamic_loader_symbol): New function.
	(elf_hppa_relocate_section): Ignore undefined dynamic loader symbols.
	(elf_hppa_final_link_relocate): Correct relocations for indirect
	references to local data through the DLT.  Fix .opd creation for
	local symbols using R_PARISC_LTOFF_FPTR32 and R_PARISC_FPTR64
	relocations.  Use e_lsel selector for R_PARISC_DLTIND21L,
	R_PARISC_LTOFF_FPTR21L and R_PARISC_LTOFF_TP21L as per
	"Processor-Specific ELF for PA_RISC, Version 1.43" document.
	Similarly, use e_rsel for DLT and LTOFF 'R' relocations.
	* elf32-hppa.c (final_link_relocate): Revise relocation selectors
	as per "Processor-Specific ELF for PA_RISC, Version 1.43" document.

	2002-03-05  Jakub Jelinek  <jakub@@redhat.com>
	* merge.c (_bfd_merge_sections): Don't segfault if there
	is nothing to merge due to GC.

	2002-03-05  Alan Modra  <amodra@@bigpond.net.au>
	* elf32-hppa.c (clobber_millicode_symbols): Remove hack to keep
	symbols that have been forced local.
	* elflink.h (elf_bfd_final_link): Call elf_link_output_extsym
	to output forced local syms for non-shared link.
	(elf_link_output_extsym): Tweak condition for calling backend
	adjust_dynamic_symbol so that previous behaviour is kept.
	Whitespace changes throughout file.

	2002-03-04  H.J. Lu <hjl@@gnu.org>
	* elf.c (bfd_section_from_shdr): Handle special sections,
	.init_array, .fini_array and .preinit_array.
	(elf_fake_sections): Likewise.
	* elflink.h (NAME(bfd_elf,size_dynamic_sections)): Create the
	DT entry only if the section is in output for .init_array,
	.fini_array and .preinit_array. Complain about .preinit_array
	section in DSO.
	(elf_bfd_final_link): Warn zero size for .init_array,
	.fini_array and .preinit_array sections.
	* elfxx-ia64.c (elfNN_ia64_section_from_shdr): Remove
	SHT_INIT_ARRAY, SHT_FINI_ARRAY and SHT_PREINIT_ARRAY.
	(elfNN_ia64_fake_sections): Remove .init_array, .fini_array and
	.preinit_array.

	2002-03-01  David Mosberger  <davidm@@hpl.hp.com>
	* elflink.h (size_dynamic_sections): If section named
	".preinit_array" exists, create DT_PREINIT_ARRAY and
	DT_PREINIT_ARRAYSZ entries in dynamic table.  Analogously for
	".init_array" and ".fini_array".
	(elf_bfd_final_link): Handle DT_PREINIT_ARRAYSZ, DT_INIT_ARRAYSZ,
	DT_FINI_ARRAYSZ, DT_PREINIT_ARRAY, DT_INIT_ARRAY, and
	DT_FINI_ARRAY.

	2002-02-19  Frank Ch. Eigler  <fche@@redhat.com>
	* syms.c (stt[]): Sorted.  Added .init/.fini -> "t" mapping.

	2002-02-13  Nick Clifton  <nickc@@cambridge.redhat.com>
	* elf.c (_bfd_elf_make_section_from_shdr): Do not insist on
	non-zero physical addresses when adjusting the LMAs of new
	sections.

	2002-02-11  Michael Snyder  <msnyder@@redhat.com>
	* elf-bfd.h (elfcore_write_lwpstatus): Add prototype.
	* elf.c (elfcore_grok_pstatus): Add prototype.
	(elfcore_grok_lwpstatus): Add prototype.
	(elfcore_write_lwpstatus): New function.
	(elfcore_write_pstatus): Fix typo, eliminate unnecessary memcpy.
@
text
@d1144 6
a1149 3
  $(INCDIR)/bfdlink.h $(srcdir)/../opcodes/sh64-opc.h \
  elf32-sh.c $(INCDIR)/elf/sh.h $(INCDIR)/elf/reloc-macros.h \
  elf32-target.h
a1427 4
  elf64-target.h
elf64-sh64.lo: elf64-sh64.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/elf/sh.h $(INCDIR)/elf/reloc-macros.h \
@


1.76.2.2
log
@Merge from mainline.
@
text
@d703 2
a704 2
		-e 's!@@SRCDIR@@!$(srcdir)!'	\
		-e 's!@@TOPDIR@@!'`echo $(srcdir) | sed -e s,/bfd$$,,`'!'
@


1.75
log
@Run "make dep-am"
@
text
@d224 1
d368 1
d456 1
d480 1
d1142 8
@


1.74
log
@Add support for OpenRISC 32-bit embedded processor
@
text
@d859 1
d965 3
d1128 2
a1129 2
  $(INCDIR)/bfdlink.h $(INCDIR)/elf/avr.h $(INCDIR)/elf/reloc-macros.h \
  elf32-target.h
@


1.73
log
@run "make dep-am"; automake
regenerate po/POTFILES.in
@
text
@d76 1
d124 1
d173 1
d218 1
d320 1
d364 1
d1121 4
@


1.72
log
@bfd:
* Makefile.am (BFD32_BACKENDS): Add elf32-sh-nbsd.lo.
(BFD32_BACKENDS_CFILES): Add elf32-sh-nbsd.c.
(elf32-sh-nbsd.lo): New rule.
* Makefile.in: Regenerate.
* config.bfd (sh*le-*-netbsdelf*): New target.
(sh*-*-netbsdelf*): New target.
* configure.in: Include netbsd-core.lo for native sh*-*-netbsd*.
(bfd_elf32_shnbsd_vec): New vector.
(bfd_elf32_shlnbsd_vec): New vector.
* configure: Regenerate.
* elf32-sh-nbsd.c: New file.
* targets.c: Update copyright years.
(_bfd_target_vector): Add bfd_elf32_shlnbsd_vec and
bfd_elf32_shnbsd_vec.

gas:
* configure.in (sh*le): Set cpu_type=sh and endian=little.
(sh*-*-netbsdelf*): New target.
* configure: Regenerate.
* tc-sh.h: Update copyright years.
(TARGET_FORMAT): Add version for TE_NetBSD.

ld:
* Makefile.am (ALL_EMULATIONS): Add eshelf_nbsd.o and eshlelf_nbsd.o.
(eshelf_nbsd.c): New rule.
(eshlelf_nbsd.c): New rule.
* Makefile.in: Regenerate.
* configure.tgt (sh*le-*-netbsdelf*): New target.
(sh*-*-netbsdelf*): New target.
* emulparams/shelf.sh: Document that shelf_nbsd.sh sources this file.
* ld/emulparams/shelf_nbsd.sh: New emulation.
* ld/emulparams/shlelf_nbsd.sh: New emulation.
@
text
@d812 1
a812 1
binary.lo: binary.c $(INCDIR)/safe-ctype.h $(INCDIR)/filenames.h
d824 1
d1016 1
a1016 1
  $(INCDIR)/elf/external.h
d1136 4
a1139 4
elf32-sh-nbsd.lo: elf32-sh-nbsd.c $(INCDIR)/filenames.h \
  $(INCDIR)/elf/internal.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h elf32-sh.c \
  $(INCDIR)/elf/sh.h $(INCDIR)/elf/reloc-macros.h elf32-target.h
d1149 4
a1152 3
elf32-xstormy16.lo: elf32-xstormy16.c $(INCDIR)/filenames.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/xstormy16.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/reloc-macros.h \
d1161 6
a1166 2
elf-strtab.lo: elf-strtab.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
elf-eh-frame.lo: elf-eh-frame.c
d1398 1
a1398 1
  elf64-target.h
@


1.71
log
@	* elf-bfd.h (enum elf_link_info_type): New.
	(struct bfd_elf_section_data): Remove stab_info and merge_info
	fields, add sec_info and sec_info_type.
	(struct elf_obj_tdata): Add eh_frame_hdr field.
	(_bfd_elf_discard_section_eh_frame): New prototype.
	(_bfd_elf_discard_section_eh_frame_hdr): Likewise.
	(_bfd_elf_eh_frame_section_offset): Likewise.
	(_bfd_elf_write_section_eh_frame): Likewise.
	(_bfd_elf_write_section_eh_frame_hdr): Likewise.
	* Makefile.am (BFD32_BACKENDS): Add elf-eh-frame.lo.
	(BFD32_BACKENDS_CFILES): Add elf-eh-frame.c.
	(elf-eh-frame.lo): New.
	* Makefile.in: Rebuilt.
	* configure.in (elf): Add elf-eh-frame.lo.
	* configure: Rebuilt.
	* elf.c (_bfd_elf_print_private_bfd_data): Support PT_GNU_EH_FRAME.
	(map_sections_to_segments): Create PT_GNU_EH_FRAME if requested.
	(get_program_header_size): Take into account PT_GNU_EH_FRAME
	segment.
	(_bfd_elf_rela_local_sym): Use sec_info_type and sec_info.
	(_bfd_elf_rel_local_sym): Likewise.
	(_bfd_elf_section_offset): Likewise.  Call
	_bfd_elf_eh_frame_section_offset too.
	* elfxx-ia64.c (elfNN_ia64_relocate_section): Use sec_info_type and
	sec_info.
	* elf64-alpha.c (elf64_alpha_relocate_section): Likewise.
	* elf-eh-frame.c: New file.
	* elflink.h (elf_link_add_object_symbols): Don't optimize SHF_MERGE
	.stab sections.  Set sec_info_type, use sec_info instead
	of merge_info and stab_info.
	(elf_link_create_dynamic_sections): Create .eh_frame_hdr section
	if --eh-frame-hdr.
	(elf_bfd_final_link): Write .eh_frame_hdr section.
	(elf_link_sec_merge_syms): Use sec_info_type and sec_info.
	(elf_link_input_bfd): Likewise.
	Call _bfd_elf_write_section_eh_frame to write .eh_frame sections.
	(elf_bfd_discard_info): Add output_bfd argument.
	Call _bfd_elf_discard_section_eh_frame and
	_bfd_elf_discard_section_eh_frame_hdr.
	(elf_section_ignore_discarded_relocs): Use sec_info_type, not section
	names.
	* bfd-in.h (bfd_elf32_discard_info, bfd_elf64_discard_info): Adjust
	prototypes.
	* bfd-in2.h (bfd_elf32_discard_info, bfd_elf64_discard_info): Likewise.

	* elf/common.h (PT_GNU_EH_FRAME): Define.
	* bfdlink.h (struct bfd_link_info): Add eh_frame_hdr field.

	* emultempl/elf32.em (finish): Supply output_bfd
	to bfd_elf*_discard_info.
	(OPTION_EH_FRAME_HDR): Define.
	(longopts): Add --eh-frame-hdr.
	(parse_args): Handle it.
	(list_options): Add --eh-frame-hdr to help.
	* emultempl/hppaelf.em (finish): Supply output_bfd
	to bfd_elf*_discard_info.
	* scripttempl/elf.sc (.eh_frame_hdr): Add.

	* readelf.c (get_segment_type): Support PT_GNU_EH_FRAME.
@
text
@d220 1
d364 1
d1132 4
@


1.70
log
@Index: bfd/ChangeLog
2001-12-07  Geoffrey Keating  <geoffk@@redhat.com>
	    Richard Henderson  <rth@@redhat.com>
	    Corinna Vinschen  <vinschen@@redhat.com>

	* Makefile.am: Add support for xstormy16.
	* archures.c: Add support for xstormy16.
	* config.bfd: Add support for xstormy16.
	* configure.in: Add support for xstormy16.
	* reloc.c: Add support for xstormy16.
	* targets.c: Add support for xstormy16.
	* cpu-xstormy16.c: New file.
	* elf32-xstormy16.c: New file.
	* Makefile.in: Regenerated.
	* bfd-in2.h: Regenerated.
	* configure: Regenerated.
	* libbfd.h: Regenerated.

Index: binutils/ChangeLog
2001-12-07  Geoffrey Keating  <geoffk@@redhat.com>

	* readelf.c (guess_is_rela): Add support for stormy16.
	(dump_relocations): Likewise.
	(get_machine_name): Likewise.

Index: gas/ChangeLog
2001-12-07  Geoffrey Keating  <geoffk@@redhat.com>
	    Richard Henderson  <rth@@redhat.com>

	* configure.in: Add support for xstormy16.
	* configure: Regenerated.
	* Makefile.am: Add support for xstormy16.
	* Makefile.in: Regenerated.
	* config/tc-xstormy16.c: New file.
	* config/tc-xstormy16.h: New file.

Index: gas/testsuite/ChangeLog
2001-12-07  Geoffrey Keating  <geoffk@@redhat.com>
	    matthew green  <mrg@@redhat.com>

	* gas/xstormy16/allinsn.d: New file.
	* gas/xstormy16/allinsn.exp: New file.
	* gas/xstormy16/allinsn.s: New file.
	* gas/xstormy16/allinsn.sh: New file.
	* gas/xstormy16/gcc.d: New file.
	* gas/xstormy16/gcc.s: New file.
	* gas/xstormy16/gcc.sh: New file.
	* gas/xstormy16/reloc-1.d: New file.
	* gas/xstormy16/reloc-1.s: New file.
	* gas/xstormy16/reloc-2.d: New file.
	* gas/xstormy16/reloc-2.s: New file.

Index: ld/ChangeLog
2001-12-07  Geoffrey Keating  <geoffk@@redhat.com>
	    Richard Henderson  <rth@@redhat.com>

	* Makefile.am: Add support for xstormy16.
	* configure.tgt: Add support for xstormy16.
	* Makefile.in: Regenerate.
	* emulparams/elf32xstormy16.sh: New file.
	* scripttempl/xstormy16.sc: New file.

Index: opcodes/ChangeLog
2001-12-07  Geoffrey Keating  <geoffk@@redhat.com>

	* Makefile.am: Add support for xstormy16.
	* Makefile.in: Regenerate.
	* configure.in: Add support for xstormy16.
	* configure: Regenerate.
	* disassemble.c: Add support for xstormy16.
	* xstormy16-asm.c: New generated file.
	* xstormy16-desc.c: New generated file.
	* xstormy16-desc.h: New generated file.
	* xstormy16-dis.c: New generated file.
	* xstormy16-ibld.c: New generated file.
	* xstormy16-opc.c: New generated file.
	* xstormy16-opc.h: New generated file.

Index: include/ChangeLog
2001-12-07  Geoffrey Keating  <geoffk@@redhat.com>

	* dis-asm.h (print_insn_xstormy16): Declare.

Index: include/elf/ChangeLog
2001-12-07  Geoffrey Keating  <geoffk@@redhat.com>
	    Richard Henderson  <rth@@redhat.com>

	* common.h (EM_XSTORMY16): Define.
	* xstormy16.h: New file.
@
text
@d226 1
d369 1
d1154 1
@


1.69
log
@	* Makefile.am: split up BFD_LIBS like statements in BFD32_LIBS and
	BFD64_LIBS, make the latter depending on the availability of BFD64.
	Add archive64.c source file.
	* archive64.c: New file implementing bfd_elf64_archive_slurp_armap
	and bfd_elf64_archive_write_armap, code from elf64-mips.c
	* archive.c (bfd_slurp_armap): Add ELF64 archive support.
	* config.bfd (mips*-*-irix6*): Allow with BFD64 only.
	(mips64*el-*-linux*): Likewise.
	(mips*el-*-linux*): Likewise. Reorder entries.
	* configure.in (bfd_libs): Define in dependency of BFD64 and
	AC_SUBST it.
	* elf64-mips.c (mips_elf64_slurp_armap): Remove, use
	bfd_elf64_archive_slurp_armap instead.
	(mips_elf64_write_armap): Remove, use bfd_elf64_archive_write_armap
	instead.
@
text
@d92 1
d139 1
d222 1
d364 1
d864 1
d1140 4
@


1.68
log
@	* Makefile.am (BFD32_BACKENDS): Add elf-strtab.lo.
	(BFD32_BACKENDS_CFILES): Add elf-strtab.c.
	(elf-strtab.lo): Add rule.
	* Makefile.in: Rebuilt.
	* configure.in (elf): Add elf-strtab.lo.
	* configure: Rebuilt.
	* elf-bfd.h (elf_strtab_hash): Forward declare.
	(struct elf_link_hash_table): Change dynstr type to
	struct elf_strtab_hash *.
	(struct elf_obj_tdata): Change strtab_ptr type to
	struct elf_strtab_hash *.
	(_bfd_elf_strtab_init, _bfd_elf_strtab_free, _bfd_elf_strtab_add,
	_bfd_elf_strtab_addref, _bfd_elf_strtab_delref,
	_bfd_elf_strtab_clear_all_refs, _bfd_elf_strtab_size,
	_bfd_elf_strtab_offset, _bfd_elf_strtab_emit,
	_bfd_elf_strtab_finalize): New prototypes.
	* elf-strtab.c: New file.
	* elflink.h (elf_link_add_object_symbols): Use _bfd_elf_strtab_add
	and _bfd_elf_strtab_size instead of _bfd_stringtab calls.
	Call _bfd_elf_strtab_delref if DT_NEEDED entry is not needed or
	when forcing dynamic symbol to local.
	(elf_link_create_dynamic_sections): Call
	_bfd_elf_strtab_init instead of elf_stringtab_init.
	(elf_link_record_local_dynamic_symbol): Likewise, change
	dynstr type.  Use _bfd_elf_strtab functions instead of
	_bfd_stringtab calls.
	(size_dynamic_sections): Use _bfd_elf_strtab functions instead of
	_bfd_stringtab calls.  For DT_RUNPATH and Verdaux vda_name fields,
	call _bfd_elf_strtab_addref.  Call elf_finalize_dynstr.
	(elf_adjust_dynstr_offsets, elf_finalize_dynstr): New functions.
	(elf_fix_symbol_flags): Call _bfd_elf_strtab_delref when forcing
	dynamic symbol to local.
	(elf_link_assign_sym_version): Likewise.
	(elf_bfd_final_link): Call _bfd_elf_strtab_emit instead of
	_bfd_stringtab_emit.
	* elflink.c (_bfd_elf_link_record_dynamic_symbol): Change dynstr
	type.  Call _bfd_elf_strtab functions instead of
	_bfd_stringtab functions.
	* elf64-sparc.c (sparc64_elf_size_dynamic_sections): Likewise.
	* elf.c (_bfd_elf_init_reloc_shdr): Likewise.
	(elf_fake_sections): Likewise.
	(assign_section_numbers): Call _bfd_elf_strtab_clear_all_refs
	on shstrtab hash table, call _bfd_elf_strtab_addref on each section
	name in the output.  Call _bfd_elf_strtab_finalize and
	use _bfd_elf_strtab_offset to finalize sh_name section header fields.
	(_bfd_elf_compute_section_file_positions): Use _bfd_elf_strtab_size
	instead of _bfd_stringtab_size.
	(prep_headers): Change shstrtab type.
	Use _bfd_elf_strtab calls instead of _bfd_stringtab calls.
@
text
@d28 1
a28 1
BFD_LIBS = \
d35 3
a37 1
BFD_LIBS_CFILES = \
d44 2
d493 1
d501 2
a502 1
	$(BFD_LIBS_CFILES) \
d573 1
a573 1
libbfd_la_SOURCES = $(BFD_LIBS_CFILES)
d646 2
a647 1
$(BFD_LIBS) \
d723 1
d741 1
a741 1
stmp-bin2-h: $(BFD_H_FILES)
@


1.67
log
@Add MMIX support
@
text
@d218 1
d359 1
d1134 1
@


1.66
log
@	* Makefile.am (BFD_H_DEPS): Add symcat.h.  Ensure everything
	depends on $(BFD_H) $(BFD_H_DEPS) $(LOCAL_H_DEPS), not just those
	backends we configure.  Run "make dep-am".
	(install-data-local): Install symcat.h.
	* dep-in.sed: Remove symcat.h from dependencies.
	* Makefile.in: Regenerate.
@
text
@d71 1
d117 1
d433 1
d438 1
d454 1
d459 1
d833 1
d1356 4
d1377 2
@


1.65
log
@bfd/ChangeLog
	* configure.in (AC_OUTPUT <bfd-in3.h>): Remove version.h.
	* configure: Regenerate.
	* Makefile.am (BFD_H_FILES): Add version.h.
	* Makefile.in: Regenerate.
	* po/SRC-POTFILES.in: Regenerate.

bfd/doc/ChangeLog
	* Makefile.am (BFD_H_DEP): Add ../version.h.
	* Makefile.in: Regenerate.
@
text
@d630 1
a630 1
BFD_H_DEPS= $(INCDIR)/ansidecl.h
d632 5
a636 4
$(BFD_LIBS): $(BFD_H) $(BFD_H_DEPS) $(LOCAL_H_DEPS)
$(BFD_MACHINES): $(BFD_H) $(BFD_H_DEPS) $(LOCAL_H_DEPS)
$(BFD_BACKENDS): $(BFD_H) $(BFD_H_DEPS) $(LOCAL_H_DEPS)
$(OPTIONAL_BACKENDS): $(BFD_H) $(BFD_H_DEPS) $(LOCAL_H_DEPS)
d644 1
d761 30
a790 3
archive.lo: archive.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  $(INCDIR)/aout/ar.h $(INCDIR)/aout/ranlib.h $(INCDIR)/safe-ctype.h
archures.lo: archures.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
d792 54
a845 15
bfd.lo: bfd.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  $(INCDIR)/libiberty.h $(INCDIR)/safe-ctype.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/sym.h libcoff.h \
  libecoff.h $(INCDIR)/coff/ecoff.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h
cache.lo: cache.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h
coffgen.lo: coffgen.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  $(INCDIR)/coff/internal.h libcoff.h $(INCDIR)/bfdlink.h
corefile.lo: corefile.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h
format.lo: format.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h
init.lo: init.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h
libbfd.lo: libbfd.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h
opncls.lo: opncls.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  $(INCDIR)/objalloc.h
reloc.lo: reloc.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
d847 9
a855 89
section.lo: section.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h
syms.lo: syms.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  $(INCDIR)/safe-ctype.h $(INCDIR)/bfdlink.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def
targets.lo: targets.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  $(INCDIR)/fnmatch.h targmatch.h
hash.lo: hash.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  $(INCDIR)/objalloc.h
linker.lo: linker.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h genlink.h
srec.lo: srec.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  $(INCDIR)/libiberty.h $(INCDIR)/safe-ctype.h
binary.lo: binary.c $(INCDIR)/safe-ctype.h $(INCDIR)/symcat.h \
  $(INCDIR)/filenames.h
tekhex.lo: tekhex.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  $(INCDIR)/libiberty.h
ihex.lo: ihex.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  $(INCDIR)/libiberty.h $(INCDIR)/safe-ctype.h
stabs.lo: stabs.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/safe-ctype.h
stab-syms.lo: stab-syms.c $(INCDIR)/symcat.h libaout.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab.def
merge.lo: merge.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  $(INCDIR)/hashtab.h
dwarf2.lo: dwarf2.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  $(INCDIR)/libiberty.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/dwarf2.h
cpu-a29k.lo: cpu-a29k.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h
cpu-alpha.lo: cpu-alpha.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h
cpu-arc.lo: cpu-arc.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h
cpu-arm.lo: cpu-arm.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h
cpu-avr.lo: cpu-avr.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h
cpu-cris.lo: cpu-cris.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h
cpu-d10v.lo: cpu-d10v.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h
cpu-d30v.lo: cpu-d30v.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h
cpu-fr30.lo: cpu-fr30.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h
cpu-h8300.lo: cpu-h8300.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h
cpu-h8500.lo: cpu-h8500.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h
cpu-hppa.lo: cpu-hppa.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h
cpu-ia64.lo: cpu-ia64.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  cpu-ia64-opc.c $(srcdir)/../opcodes/ia64-opc.h $(INCDIR)/opcode/ia64.h
cpu-i370.lo: cpu-i370.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h
cpu-i386.lo: cpu-i386.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h
cpu-i860.lo: cpu-i860.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h
cpu-i960.lo: cpu-i960.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h
cpu-m32r.lo: cpu-m32r.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h
cpu-m68hc11.lo: cpu-m68hc11.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h
cpu-m68hc12.lo: cpu-m68hc12.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h
cpu-m68k.lo: cpu-m68k.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h
cpu-m88k.lo: cpu-m88k.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h
cpu-m10200.lo: cpu-m10200.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h
cpu-m10300.lo: cpu-m10300.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h
cpu-mcore.lo: cpu-mcore.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h
cpu-mips.lo: cpu-mips.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h
cpu-ns32k.lo: cpu-ns32k.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  ns32k.h
cpu-openrisc.lo: cpu-openrisc.c $(INCDIR)/symcat.h \
  $(INCDIR)/filenames.h
cpu-pdp11.lo: cpu-pdp11.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h
cpu-pj.lo: cpu-pj.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h
cpu-powerpc.lo: cpu-powerpc.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h
cpu-rs6000.lo: cpu-rs6000.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h
cpu-s390.lo: cpu-s390.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h
cpu-sh.lo: cpu-sh.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h
cpu-sparc.lo: cpu-sparc.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h
cpu-tic30.lo: cpu-tic30.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h
cpu-tic54x.lo: cpu-tic54x.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h
cpu-tic80.lo: cpu-tic80.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h
cpu-v850.lo: cpu-v850.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  $(INCDIR)/safe-ctype.h
cpu-vax.lo: cpu-vax.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h
cpu-we32k.lo: cpu-we32k.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h
cpu-w65.lo: cpu-w65.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h
cpu-z8k.lo: cpu-z8k.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h
aout-adobe.lo: aout-adobe.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  $(INCDIR)/aout/adobe.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  libaout.h $(INCDIR)/bfdlink.h
aout-arm.lo: aout-arm.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  libaout.h $(INCDIR)/bfdlink.h $(INCDIR)/aout/aout64.h \
  aoutx.h $(INCDIR)/safe-ctype.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h aout-target.h
aout-cris.lo: aout-cris.c $(INCDIR)/symcat.h aout32.c \
  aoutx.h $(INCDIR)/filenames.h $(INCDIR)/safe-ctype.h \
  $(INCDIR)/bfdlink.h libaout.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h \
  aout-target.h
aout-ns32k.lo: aout-ns32k.c $(INCDIR)/symcat.h $(INCDIR)/aout/aout64.h \
d859 9
a867 5
aout-sparcle.lo: aout-sparcle.c $(INCDIR)/symcat.h \
  $(INCDIR)/bfdlink.h libaout.h aoutf1.h $(INCDIR)/filenames.h \
  $(INCDIR)/aout/sun4.h $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h aout-target.h
aout-tic30.lo: aout-tic30.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
d870 9
a878 15
  aoutx.h $(INCDIR)/safe-ctype.h
aout0.lo: aout0.c $(INCDIR)/symcat.h aoutf1.h $(INCDIR)/filenames.h \
  $(INCDIR)/aout/sun4.h libaout.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/ar.h aout-target.h
aout32.lo: aout32.c aoutx.h $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  $(INCDIR)/safe-ctype.h $(INCDIR)/bfdlink.h libaout.h \
  $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/ar.h
armnetbsd.lo: armnetbsd.c netbsd.h $(INCDIR)/symcat.h \
  $(INCDIR)/filenames.h libaout.h $(INCDIR)/bfdlink.h \
  aout-target.h $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
bout.lo: bout.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h genlink.h $(INCDIR)/bout.h $(INCDIR)/aout/stab_gnu.h \
d880 1
a880 1
cf-i386lynx.lo: cf-i386lynx.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
d884 8
a891 10
cf-m68klynx.lo: cf-m68klynx.c coff-m68k.c $(INCDIR)/symcat.h \
  $(INCDIR)/filenames.h $(INCDIR)/coff/m68k.h $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h libcoff.h $(INCDIR)/bfdlink.h \
  coffcode.h coffswap.h
cf-sparclynx.lo: cf-sparclynx.c coff-sparc.c $(INCDIR)/symcat.h \
  $(INCDIR)/filenames.h $(INCDIR)/coff/sparc.h $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h libcoff.h $(INCDIR)/bfdlink.h \
  coffcode.h coffswap.h
coff-a29k.lo: coff-a29k.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  $(INCDIR)/coff/a29k.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
d893 1
a893 1
coff-apollo.lo: coff-apollo.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
d896 2
a897 2
coff-arm.lo: coff-arm.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  $(INCDIR)/coff/arm.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
d899 12
a910 3
coff-aux.lo: coff-aux.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  $(INCDIR)/coff/aux-coff.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/m68k.h $(INCDIR)/coff/external.h coff-m68k.c \
d912 1
a912 2
coff-h8300.lo: coff-h8300.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h genlink.h $(INCDIR)/coff/h8300.h \
d914 2
a915 5
  libcoff.h coffcode.h coffswap.h
coff-h8500.lo: coff-h8500.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/coff/h8500.h $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h libcoff.h coffcode.h coffswap.h
coff-i386.lo: coff-i386.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
d918 1
a918 5
coff-i860.lo: coff-i860.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  $(INCDIR)/coff/i860.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h coffswap.h
coff-go32.lo: coff-go32.c coff-i386.c $(INCDIR)/symcat.h \
  $(INCDIR)/filenames.h $(INCDIR)/coff/i386.h $(INCDIR)/coff/external.h \
d921 2
a922 5
coff-i960.lo: coff-i960.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  $(INCDIR)/coff/i960.h $(INCDIR)/coff/internal.h libcoff.h \
  $(INCDIR)/bfdlink.h coffcode.h coffswap.h
coff-m68k.lo: coff-m68k.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  $(INCDIR)/coff/m68k.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
d924 2
a925 2
coff-m88k.lo: coff-m88k.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  $(INCDIR)/coff/m88k.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
d927 5
a931 6
coff-mips.lo: coff-mips.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/coff/internal.h $(INCDIR)/coff/sym.h \
  $(INCDIR)/coff/symconst.h $(INCDIR)/coff/ecoff.h $(INCDIR)/coff/mips.h \
  $(INCDIR)/coff/external.h libcoff.h libecoff.h coffswap.h \
  ecoffswap.h
coff-rs6000.lo: coff-rs6000.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
d935 4
a938 2
coff-sh.lo: coff-sh.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  $(INCDIR)/libiberty.h $(INCDIR)/bfdlink.h $(INCDIR)/coff/sh.h \
d940 10
d951 1
a951 16
coff-sparc.lo: coff-sparc.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  $(INCDIR)/coff/sparc.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h coffswap.h
coff-stgo32.lo: coff-stgo32.c $(INCDIR)/symcat.h coff-i386.c \
  $(INCDIR)/filenames.h $(INCDIR)/coff/i386.h $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/go32exe.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h coffswap.h \
  go32stub.h
coff-svm68k.lo: coff-svm68k.c coff-m68k.c $(INCDIR)/symcat.h \
  $(INCDIR)/filenames.h $(INCDIR)/coff/m68k.h $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h libcoff.h $(INCDIR)/bfdlink.h \
  coffcode.h coffswap.h
coff-tic30.lo: coff-tic30.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/coff/tic30.h $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h libcoff.h coffcode.h coffswap.h
coff-tic54x.lo: coff-tic54x.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
d954 5
a958 9
coff-tic80.lo: coff-tic80.c $(INCDIR)/symcat.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/filenames.h $(INCDIR)/coff/tic80.h $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h libcoff.h coffcode.h coffswap.h
coff-u68k.lo: coff-u68k.c coff-m68k.c $(INCDIR)/symcat.h \
  $(INCDIR)/filenames.h $(INCDIR)/coff/m68k.h $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h libcoff.h $(INCDIR)/bfdlink.h \
  coffcode.h coffswap.h
coff-we32k.lo: coff-we32k.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  $(INCDIR)/coff/we32k.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
d960 1
a960 25
coff-w65.lo: coff-w65.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/coff/w65.h $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h libcoff.h coffcode.h coffswap.h
coff-z8k.lo: coff-z8k.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/coff/z8k.h $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h libcoff.h coffcode.h coffswap.h
cofflink.lo: cofflink.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/coff/internal.h libcoff.h
dwarf1.lo: dwarf1.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  $(INCDIR)/libiberty.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/dwarf.h
ecoff.lo: ecoff.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/aout/ar.h $(INCDIR)/aout/ranlib.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def libaout.h \
  $(INCDIR)/aout/aout64.h $(INCDIR)/coff/internal.h $(INCDIR)/coff/sym.h \
  $(INCDIR)/coff/symconst.h $(INCDIR)/coff/ecoff.h libcoff.h \
  libecoff.h
ecofflink.lo: ecofflink.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/objalloc.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/coff/internal.h $(INCDIR)/coff/sym.h \
  $(INCDIR)/coff/symconst.h $(INCDIR)/coff/ecoff.h libcoff.h \
  libecoff.h
efi-app-ia32.lo: efi-app-ia32.c $(INCDIR)/symcat.h \
  $(INCDIR)/filenames.h coff-i386.c $(INCDIR)/coff/i386.h \
d962 26
a987 6
  $(INCDIR)/coff/pe.h libcoff.h $(INCDIR)/bfdlink.h coffcode.h \
  peicode.h libpei.h
elf.lo: elf.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h
elf32-arc.lo: elf32-arc.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
d989 5
a993 2
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/arc.h \
  $(INCDIR)/elf/reloc-macros.h elf32-target.h
d995 16
a1010 1
  $(INCDIR)/symcat.h $(INCDIR)/filenames.h elf-bfd.h \
d1012 11
a1022 3
  $(INCDIR)/bfdlink.h elf32-arm.h elf32-target.h
elfarm-nabi.lo: elfarm-nabi.c $(INCDIR)/elf/arm.h $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/symcat.h $(INCDIR)/filenames.h elf-bfd.h \
d1024 2
a1025 2
  $(INCDIR)/bfdlink.h elf32-arm.h elf32-target.h
elf32-avr.lo: elf32-avr.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
d1027 1
a1027 1
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/avr.h \
d1029 5
a1033 1
elf32-cris.lo: elf32-cris.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
d1035 2
a1036 3
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/cris.h \
  $(INCDIR)/elf/reloc-macros.h elf32-target.h
elf32-d10v.lo: elf32-d10v.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
d1038 15
a1052 3
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/d10v.h \
  $(INCDIR)/elf/reloc-macros.h elf32-target.h
elf32-d30v.lo: elf32-d30v.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
d1054 3
a1056 3
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/d30v.h \
  $(INCDIR)/elf/reloc-macros.h elf32-target.h
elf32-fr30.lo: elf32-fr30.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
d1058 1
a1058 1
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/fr30.h \
d1060 1
a1060 1
elf32-gen.lo: elf32-gen.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
d1062 1
a1062 4
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h elf32-target.h
elf32-h8300.lo: elf32-h8300.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/h8.h \
d1064 9
a1072 8
elf32-hppa.lo: elf32-hppa.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/hppa.h \
  $(INCDIR)/elf/reloc-macros.h libhppa.h elf32-hppa.h \
  elf-hppa.h elf32-target.h
elf32-i370.lo: elf32-i370.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/elf/i370.h \
d1074 1
a1074 1
elf32-i386.lo: elf32-i386.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
d1076 1
a1076 1
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/elf/i386.h \
d1078 7
a1084 1
elf32-i860.lo: elf32-i860.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
d1086 4
a1089 3
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/i860.h \
  $(INCDIR)/elf/reloc-macros.h elf32-target.h
elf32-i960.lo: elf32-i960.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
d1091 3
a1093 3
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/i960.h \
  $(INCDIR)/elf/reloc-macros.h elf32-target.h
elf32-m32r.lo: elf32-m32r.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
d1095 1
a1095 10
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/m32r.h \
  $(INCDIR)/elf/reloc-macros.h elf32-target.h
elf32-m68k.lo: elf32-m68k.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/elf/m68k.h \
  $(INCDIR)/elf/reloc-macros.h elf32-target.h
elf32-m68hc11.lo: elf32-m68hc11.c $(INCDIR)/symcat.h \
  $(INCDIR)/filenames.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/m68hc11.h $(INCDIR)/elf/reloc-macros.h \
d1097 3
a1099 4
elf32-m68hc12.lo: elf32-m68hc12.c $(INCDIR)/symcat.h \
  $(INCDIR)/filenames.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/m68hc11.h $(INCDIR)/elf/reloc-macros.h \
d1101 1
a1101 7
elf32-m88k.lo: elf32-m88k.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h elf32-target.h
elf-m10200.lo: elf-m10200.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h elf32-target.h
elf-m10300.lo: elf-m10300.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
d1103 1
a1103 37
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/mn10300.h \
  $(INCDIR)/elf/reloc-macros.h elf32-target.h
elf32-mcore.lo: elf32-mcore.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/elf/mcore.h \
  $(INCDIR)/elf/reloc-macros.h elf32-target.h
elf32-mips.lo: elf32-mips.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h genlink.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/elf/mips.h \
  $(INCDIR)/elf/reloc-macros.h $(INCDIR)/coff/sym.h $(INCDIR)/coff/symconst.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/ecoff.h $(INCDIR)/coff/mips.h \
  $(INCDIR)/coff/external.h ecoffswap.h elf32-target.h
elf32-openrisc.lo: elf32-openrisc.c $(INCDIR)/symcat.h \
  $(INCDIR)/filenames.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/openrisc.h $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/libiberty.h elf32-target.h
elf32-pj.lo: elf32-pj.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/elf/pj.h \
  $(INCDIR)/elf/reloc-macros.h elf32-target.h
elf32-ppc.lo: elf32-ppc.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/elf/ppc.h \
  $(INCDIR)/elf/reloc-macros.h elf32-target.h
elf32-s390.lo: elf32-s390.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/elf/s390.h \
  $(INCDIR)/elf/reloc-macros.h elf32-target.h
elf32-sh.lo: elf32-sh.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/elf/sh.h \
  $(INCDIR)/elf/reloc-macros.h elf32-target.h
elf32-sh-lin.lo: elf32-sh-lin.c $(INCDIR)/symcat.h \
  $(INCDIR)/filenames.h $(INCDIR)/elf/internal.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
  elf32-sh.c $(INCDIR)/elf/sh.h $(INCDIR)/elf/reloc-macros.h \
d1105 5
a1109 1
elf32-sparc.lo: elf32-sparc.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
d1114 5
a1118 1
elf32-v850.lo: elf32-v850.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
d1120 15
a1134 22
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/elf/v850.h \
  $(INCDIR)/elf/reloc-macros.h $(INCDIR)/libiberty.h \
  elf32-target.h
elf32.lo: elf32.c elfcode.h $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  $(INCDIR)/libiberty.h $(INCDIR)/bfdlink.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  elfcore.h elflink.h
elflink.lo: elflink.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h
epoc-pe-arm.lo: epoc-pe-arm.c pe-arm.c $(INCDIR)/symcat.h \
  $(INCDIR)/filenames.h coff-arm.c $(INCDIR)/coff/arm.h \
  $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/pe.h libcoff.h $(INCDIR)/bfdlink.h coffcode.h \
  peicode.h libpei.h
epoc-pei-arm.lo: epoc-pei-arm.c pei-arm.c $(INCDIR)/symcat.h \
  $(INCDIR)/filenames.h coff-arm.c $(INCDIR)/coff/arm.h \
  $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/pe.h libcoff.h $(INCDIR)/bfdlink.h coffcode.h \
  peicode.h libpei.h
hp300bsd.lo: hp300bsd.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  libaout.h $(INCDIR)/bfdlink.h aout-target.h $(INCDIR)/aout/aout64.h \
d1137 1
a1137 1
  aoutx.h $(INCDIR)/symcat.h $(INCDIR)/filenames.h $(INCDIR)/safe-ctype.h \
d1141 23
a1163 7
som.lo: som.c $(INCDIR)/alloca-conf.h $(INCDIR)/symcat.h \
  $(INCDIR)/filenames.h
i386aout.lo: i386aout.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  $(INCDIR)/aout/aout64.h libaout.h $(INCDIR)/bfdlink.h \
  aout-target.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/ar.h
i386bsd.lo: i386bsd.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
d1166 1
a1166 3
i386dynix.lo: i386dynix.c $(INCDIR)/aout/dynix3.h aoutx.h \
  $(INCDIR)/symcat.h $(INCDIR)/filenames.h $(INCDIR)/safe-ctype.h \
  $(INCDIR)/bfdlink.h libaout.h $(INCDIR)/aout/aout64.h \
d1168 6
a1173 41
  aout-target.h
i386freebsd.lo: i386freebsd.c freebsd.h $(INCDIR)/symcat.h \
  $(INCDIR)/filenames.h libaout.h $(INCDIR)/bfdlink.h \
  aout-target.h $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
i386linux.lo: i386linux.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/ar.h libaout.h $(INCDIR)/bfdlink.h aout-target.h
i386lynx.lo: i386lynx.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  libaout.h $(INCDIR)/bfdlink.h $(INCDIR)/aout/aout64.h \
  aout-target.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/ar.h
i386msdos.lo: i386msdos.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  libaout.h $(INCDIR)/bfdlink.h
i386netbsd.lo: i386netbsd.c netbsd.h $(INCDIR)/symcat.h \
  $(INCDIR)/filenames.h libaout.h $(INCDIR)/bfdlink.h \
  aout-target.h $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
i386mach3.lo: i386mach3.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/ar.h libaout.h $(INCDIR)/bfdlink.h aout-target.h
i386os9k.lo: i386os9k.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h libaout.h $(INCDIR)/os9k.h
ieee.lo: ieee.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  $(INCDIR)/ieee.h libieee.h $(INCDIR)/safe-ctype.h
m68k4knetbsd.lo: m68k4knetbsd.c netbsd.h $(INCDIR)/symcat.h \
  $(INCDIR)/filenames.h libaout.h $(INCDIR)/bfdlink.h \
  aout-target.h $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
m68klinux.lo: m68klinux.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/ar.h libaout.h $(INCDIR)/bfdlink.h aout-target.h
m68klynx.lo: m68klynx.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  libaout.h $(INCDIR)/bfdlink.h $(INCDIR)/aout/aout64.h \
  aout-target.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/ar.h
m68knetbsd.lo: m68knetbsd.c netbsd.h $(INCDIR)/symcat.h \
  $(INCDIR)/filenames.h libaout.h $(INCDIR)/bfdlink.h \
  aout-target.h $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
m88kmach3.lo: m88kmach3.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
d1176 7
a1182 1
mipsbsd.lo: mipsbsd.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
d1185 12
a1196 4
newsos3.lo: newsos3.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/ar.h libaout.h $(INCDIR)/bfdlink.h aout-target.h
nlm.lo: nlm.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
d1198 2
a1199 6
  $(INCDIR)/nlm/external.h
nlm32-i386.lo: nlm32-i386.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  $(INCDIR)/nlm/i386-ext.h libnlm.h $(INCDIR)/nlm/common.h \
  $(INCDIR)/nlm/internal.h $(INCDIR)/nlm/external.h nlmswap.h \
  nlm-target.h
nlm32-sparc.lo: nlm32-sparc.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
d1203 1
a1203 5
nlm32-ppc.lo: nlm32-ppc.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  $(INCDIR)/nlm/ppc-ext.h libnlm.h $(INCDIR)/nlm/common.h \
  $(INCDIR)/nlm/internal.h $(INCDIR)/nlm/external.h nlmswap.h \
  nlm-target.h
nlm32.lo: nlm32.c nlmcode.h $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
d1205 12
a1216 3
  $(INCDIR)/nlm/external.h
ns32knetbsd.lo: ns32knetbsd.c $(INCDIR)/symcat.h netbsd.h \
  $(INCDIR)/filenames.h libaout.h $(INCDIR)/bfdlink.h \
d1218 27
a1244 13
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
oasys.lo: oasys.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  $(INCDIR)/safe-ctype.h $(INCDIR)/oasys.h liboasys.h
pc532-mach.lo: pc532-mach.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  libaout.h $(INCDIR)/bfdlink.h $(INCDIR)/aout/aout64.h \
  aout-target.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/ar.h
pdp11.lo: pdp11.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  libaout.h $(INCDIR)/bfdlink.h aout-target.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h \
  $(INCDIR)/safe-ctype.h
pe-arm.lo: pe-arm.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  coff-arm.c $(INCDIR)/coff/arm.h $(INCDIR)/coff/external.h \
d1247 2
a1248 2
pei-arm.lo: pei-arm.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  coff-arm.c $(INCDIR)/coff/arm.h $(INCDIR)/coff/external.h \
d1251 2
a1252 2
pe-i386.lo: pe-i386.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  coff-i386.c $(INCDIR)/coff/i386.h $(INCDIR)/coff/external.h \
d1254 4
a1257 24
  $(INCDIR)/bfdlink.h coffcode.h peicode.h libpei.h
pei-i386.lo: pei-i386.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  coff-i386.c $(INCDIR)/coff/i386.h $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h libcoff.h \
  $(INCDIR)/bfdlink.h coffcode.h peicode.h libpei.h
pe-mcore.lo: pe-mcore.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  coff-mcore.c $(INCDIR)/coff/mcore.h $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h libcoff.h \
  $(INCDIR)/bfdlink.h coffcode.h peicode.h libpei.h
pei-mcore.lo: pei-mcore.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  coff-mcore.c $(INCDIR)/coff/mcore.h $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h libcoff.h \
  $(INCDIR)/bfdlink.h coffcode.h peicode.h libpei.h
pe-ppc.lo: pe-ppc.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  coff-ppc.c $(INCDIR)/coff/powerpc.h $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h libcoff.h \
  $(INCDIR)/bfdlink.h coffcode.h peicode.h libpei.h
pei-ppc.lo: pei-ppc.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  coff-ppc.c $(INCDIR)/coff/powerpc.h $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h libcoff.h \
  $(INCDIR)/bfdlink.h coffcode.h peicode.h libpei.h
pe-sh.lo: pe-sh.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  coff-sh.c $(INCDIR)/libiberty.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/sh.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
d1260 5
a1264 6
pei-sh.lo: pei-sh.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  coff-sh.c $(INCDIR)/libiberty.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/sh.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/pe.h libcoff.h coffcode.h peicode.h \
  libpei.h
pe-mips.lo: pe-mips.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
d1268 10
a1277 10
pei-mips.lo: pei-mips.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  pe-mips.c $(INCDIR)/coff/mipspe.h $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h libcoff.h \
  $(INCDIR)/bfdlink.h coffcode.h peicode.h libpei.h
ppcboot.lo: ppcboot.c $(INCDIR)/safe-ctype.h $(INCDIR)/symcat.h \
  $(INCDIR)/filenames.h
reloc16.lo: reloc16.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h genlink.h $(INCDIR)/coff/internal.h \
  libcoff.h
riscix.lo: riscix.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
d1279 34
a1312 34
  aout-target.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/ar.h
sparclinux.lo: sparclinux.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/ar.h libaout.h $(INCDIR)/bfdlink.h aout-target.h
sparclynx.lo: sparclynx.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  $(INCDIR)/aout/sun4.h libaout.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/ar.h aout-target.h
sparcnetbsd.lo: sparcnetbsd.c netbsd.h $(INCDIR)/symcat.h \
  $(INCDIR)/filenames.h libaout.h $(INCDIR)/bfdlink.h \
  aout-target.h $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
sunos.lo: sunos.c $(INCDIR)/symcat.h $(INCDIR)/bfdlink.h \
  libaout.h aoutf1.h $(INCDIR)/filenames.h $(INCDIR)/aout/sun4.h \
  $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/ar.h aout-target.h
vaxnetbsd.lo: vaxnetbsd.c netbsd.h $(INCDIR)/symcat.h \
  $(INCDIR)/filenames.h libaout.h $(INCDIR)/bfdlink.h \
  aout-target.h $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
versados.lo: versados.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  $(INCDIR)/libiberty.h
vms.lo: vms.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h vms.h
vms-gsd.lo: vms-gsd.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h vms.h
vms-hdr.lo: vms-hdr.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/safe-ctype.h vms.h
vms-misc.lo: vms-misc.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h vms.h
vms-tir.lo: vms-tir.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h vms.h
xcofflink.lo: xcofflink.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
d1314 3
a1316 15
  libcoff.h libxcoff.h
aout64.lo: aout64.c aoutx.h $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  $(INCDIR)/safe-ctype.h $(INCDIR)/bfdlink.h libaout.h \
  $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/ar.h
coff-alpha.lo: coff-alpha.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/coff/internal.h $(INCDIR)/coff/sym.h \
  $(INCDIR)/coff/symconst.h $(INCDIR)/coff/ecoff.h $(INCDIR)/coff/alpha.h \
  $(INCDIR)/aout/ar.h libcoff.h libecoff.h coffswap.h \
  ecoffswap.h
coff64-rs6000.lo: coff64-rs6000.c $(INCDIR)/symcat.h \
  $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/xcoff.h $(INCDIR)/coff/rs6k64.h libcoff.h \
  libxcoff.h coffcode.h coffswap.h
demo64.lo: demo64.c aoutf1.h $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
d1320 9
a1328 11
efi-app-ia64.lo: efi-app-ia64.c $(INCDIR)/symcat.h \
  $(INCDIR)/filenames.h coff-ia64.c $(INCDIR)/coff/ia64.h \
  $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/pe.h libcoff.h $(INCDIR)/bfdlink.h coffcode.h \
  peicode.h libpei.h
elf64-x86-64.lo: elf64-x86-64.c $(INCDIR)/symcat.h \
  $(INCDIR)/filenames.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/x86-64.h $(INCDIR)/elf/reloc-macros.h \
  elf64-target.h
elf64-alpha.lo: elf64-alpha.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
d1336 5
a1340 1
  $(INCDIR)/symcat.h $(INCDIR)/filenames.h elf-bfd.h \
d1342 12
a1353 3
  $(INCDIR)/bfdlink.h $(INCDIR)/elf/hppa.h $(INCDIR)/elf/reloc-macros.h \
  libhppa.h elf64-hppa.h elf-hppa.h elf64-target.h
elf64-gen.lo: elf64-gen.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
d1355 1
a1355 7
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h elf64-target.h
elf64-mips.lo: elf64-mips.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  $(INCDIR)/aout/ar.h $(INCDIR)/bfdlink.h genlink.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/mips.h $(INCDIR)/elf/reloc-macros.h $(INCDIR)/coff/sym.h \
  $(INCDIR)/coff/symconst.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/ecoff.h $(INCDIR)/coff/alpha.h ecoffswap.h \
d1357 1
a1357 9
elf64-ppc.lo: elf64-ppc.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/elf/ppc.h \
  $(INCDIR)/elf/reloc-macros.h elf64-target.h
elf64-s390.lo: elf64-s390.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/elf/s390.h \
  $(INCDIR)/elf/reloc-macros.h elf64-target.h
elf64-sparc.lo: elf64-sparc.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
d1362 5
a1366 5
elf64.lo: elf64.c elfcode.h $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  $(INCDIR)/libiberty.h $(INCDIR)/bfdlink.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  elfcore.h elflink.h
nlm32-alpha.lo: nlm32-alpha.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
d1370 3
a1372 4
nlm64.lo: nlm64.c nlmcode.h $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  libnlm.h $(INCDIR)/nlm/common.h $(INCDIR)/nlm/internal.h \
  $(INCDIR)/nlm/external.h
aix386-core.lo: aix386-core.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
d1375 23
a1397 23
hpux-core.lo: hpux-core.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h
irix-core.lo: irix-core.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h
lynx-core.lo: lynx-core.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h
osf-core.lo: osf-core.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h
sco5-core.lo: sco5-core.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  libaout.h $(INCDIR)/bfdlink.h
trad-core.lo: trad-core.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  libaout.h $(INCDIR)/bfdlink.h
cisco-core.lo: cisco-core.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h
elf32-ia64.lo: elf32-ia64.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/opcode/ia64.h \
  $(INCDIR)/elf/ia64.h $(INCDIR)/elf/reloc-macros.h elf32-target.h
elf64-ia64.lo: elf64-ia64.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/opcode/ia64.h \
  $(INCDIR)/elf/ia64.h $(INCDIR)/elf/reloc-macros.h elf64-target.h
peigen.lo: peigen.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/i386.h $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/pe.h libcoff.h $(INCDIR)/bfdlink.h libpei.h
pepigen.lo: pepigen.c $(INCDIR)/symcat.h $(INCDIR)/filenames.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/ia64.h $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/pe.h libcoff.h $(INCDIR)/bfdlink.h libpei.h
@


1.64
log
@	* version.h: New file.
	* bfd-in.h: (BFD_VERSION): Substitute bfd_version.
	(BFD_VERSION_DATE): Define.
	(BFD_VERSION_STRING): Define.
	* configure.in: AC_SUBST bfd_version, bfd_version_date and
	bfd_version_string.
	(AC_OUTPUT <bfd-in3.h>): Depend on version.h.
	* bfd-in2.h: Regenerate.
	* configure: Regenerate.
	* Makefile.am: Run "make dep-am"
	* Makefile.in: Regenerate.

	* bfd-in.h: Include "symcat.h".
	(CONCAT4): Redefine as for old CAT4.
	* aout-arm.c: Use equivalent CONCAT* macro in place of CAT* macros.
	Add warning regarding whitespace.
	* aout-cris.c: Likewise.
	* aout-ns32k.c: Likewise.
	* aout-sparcle.c: Likewise.
	* aout-tic30.c: Likewise.
	* aout0.c: Likewise.
	* armnetbsd.c: Likewise.
	* demo64.c: Likewise.
	* elf-bfd.h: Likewise.
	* gen-aout.c: Likewise.
	* host-aout.c: Likewise.
	* hp300bsd.c: Likewise.
	* hp300hpux.c: Likewise.
	* i386aout.c: Likewise.
	* i386bsd.c: Likewise.
	* i386dynix.c: Likewise.
	* i386freebsd.c: Likewise.
	* i386linux.c: Likewise.
	* i386lynx.c: Likewise.
	* i386mach3.c: Likewise.
	* i386netbsd.c: Likewise.
	* libaout.h: Likewise.
	* m68k4knetbsd.c: Likewise.
	* m68klinux.c: Likewise.
	* m68klynx.c: Likewise.
	* m68knetbsd.c: Likewise.
	* m88kmach3.c: Likewise.
	* mipsbsd.c: Likewise.
	* newsos3.c: Likewise.
	* ns32knetbsd.c: Likewise.
	* pc532-mach.c: Likewise.
	* pdp11.c: Likewise.
	* riscix.c: Likewise.
	* sparclinux.c: Likewise.
	* sparclynx.c: Likewise.
	* sparcnetbsd.c: Likewise.
	* sunos.c: Likewise.
	* targets.c: Likewise.
	* vaxnetbsd.c: Likewise.
	* vms-hdr.c: Likewise.
@
text
@d507 1
a507 1
	xcoff-target.h
d705 1
a705 1
	reloc.c syms.c bfd.c archive.c corefile.c targets.c format.c
@


1.63
log
@	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.
	* doc/Makefile.in: Regenerate.

	* aoutx.h: Formatting fixes.
	* merge.c (_bfd_merged_section_offset): Break line at 80 chars.

	* linker.c: Replace bfd_get_filename with bfd_archive_filename
	in error message.
@
text
@d645 1
d759 3
a761 26
archive.lo: archive.c $(INCDIR)/filenames.h $(INCDIR)/aout/ar.h \
  $(INCDIR)/aout/ranlib.h $(INCDIR)/safe-ctype.h
archures.lo: archures.c $(INCDIR)/filenames.h $(INCDIR)/safe-ctype.h
bfd.lo: bfd.c $(INCDIR)/filenames.h $(INCDIR)/libiberty.h \
  $(INCDIR)/safe-ctype.h $(INCDIR)/bfdlink.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/sym.h libcoff.h libecoff.h $(INCDIR)/coff/ecoff.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h
cache.lo: cache.c $(INCDIR)/filenames.h
coffgen.lo: coffgen.c $(INCDIR)/filenames.h $(INCDIR)/coff/internal.h \
  libcoff.h $(INCDIR)/bfdlink.h
corefile.lo: corefile.c $(INCDIR)/filenames.h
format.lo: format.c $(INCDIR)/filenames.h
init.lo: init.c $(INCDIR)/filenames.h
libbfd.lo: libbfd.c $(INCDIR)/filenames.h
opncls.lo: opncls.c $(INCDIR)/filenames.h $(INCDIR)/objalloc.h
reloc.lo: reloc.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h
section.lo: section.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h
syms.lo: syms.c $(INCDIR)/filenames.h $(INCDIR)/safe-ctype.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def
targets.lo: targets.c $(INCDIR)/filenames.h $(INCDIR)/fnmatch.h \
  targmatch.h
hash.lo: hash.c $(INCDIR)/filenames.h $(INCDIR)/objalloc.h
linker.lo: linker.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  genlink.h
srec.lo: srec.c $(INCDIR)/filenames.h $(INCDIR)/libiberty.h \
d763 87
a849 3
binary.lo: binary.c $(INCDIR)/safe-ctype.h $(INCDIR)/filenames.h
tekhex.lo: tekhex.c $(INCDIR)/filenames.h $(INCDIR)/libiberty.h
ihex.lo: ihex.c $(INCDIR)/filenames.h $(INCDIR)/libiberty.h \
d851 18
a868 57
stabs.lo: stabs.c $(INCDIR)/filenames.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/safe-ctype.h
stab-syms.lo: stab-syms.c libaout.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab.def
merge.lo: merge.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
dwarf2.lo: dwarf2.c $(INCDIR)/filenames.h $(INCDIR)/libiberty.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/dwarf2.h
cpu-a29k.lo: cpu-a29k.c $(INCDIR)/filenames.h
cpu-alpha.lo: cpu-alpha.c $(INCDIR)/filenames.h
cpu-arc.lo: cpu-arc.c $(INCDIR)/filenames.h
cpu-arm.lo: cpu-arm.c $(INCDIR)/filenames.h
cpu-avr.lo: cpu-avr.c $(INCDIR)/filenames.h
cpu-cris.lo: cpu-cris.c $(INCDIR)/filenames.h
cpu-d10v.lo: cpu-d10v.c $(INCDIR)/filenames.h
cpu-d30v.lo: cpu-d30v.c $(INCDIR)/filenames.h
cpu-fr30.lo: cpu-fr30.c $(INCDIR)/filenames.h
cpu-h8300.lo: cpu-h8300.c $(INCDIR)/filenames.h
cpu-h8500.lo: cpu-h8500.c $(INCDIR)/filenames.h
cpu-hppa.lo: cpu-hppa.c $(INCDIR)/filenames.h
cpu-ia64.lo: cpu-ia64.c $(INCDIR)/filenames.h cpu-ia64-opc.c \
  $(srcdir)/../opcodes/ia64-opc.h $(INCDIR)/opcode/ia64.h
cpu-i370.lo: cpu-i370.c $(INCDIR)/filenames.h
cpu-i386.lo: cpu-i386.c $(INCDIR)/filenames.h
cpu-i860.lo: cpu-i860.c $(INCDIR)/filenames.h
cpu-i960.lo: cpu-i960.c $(INCDIR)/filenames.h
cpu-m32r.lo: cpu-m32r.c $(INCDIR)/filenames.h
cpu-m68hc11.lo: cpu-m68hc11.c $(INCDIR)/filenames.h
cpu-m68hc12.lo: cpu-m68hc12.c $(INCDIR)/filenames.h
cpu-m68k.lo: cpu-m68k.c $(INCDIR)/filenames.h
cpu-m88k.lo: cpu-m88k.c $(INCDIR)/filenames.h
cpu-m10200.lo: cpu-m10200.c $(INCDIR)/filenames.h
cpu-m10300.lo: cpu-m10300.c $(INCDIR)/filenames.h
cpu-mcore.lo: cpu-mcore.c $(INCDIR)/filenames.h
cpu-mips.lo: cpu-mips.c $(INCDIR)/filenames.h
cpu-ns32k.lo: cpu-ns32k.c $(INCDIR)/filenames.h ns32k.h
cpu-openrisc.lo: cpu-openrisc.c $(INCDIR)/filenames.h
cpu-pdp11.lo: cpu-pdp11.c $(INCDIR)/filenames.h
cpu-pj.lo: cpu-pj.c $(INCDIR)/filenames.h
cpu-powerpc.lo: cpu-powerpc.c $(INCDIR)/filenames.h
cpu-rs6000.lo: cpu-rs6000.c $(INCDIR)/filenames.h
cpu-s390.lo: cpu-s390.c $(INCDIR)/filenames.h
cpu-sh.lo: cpu-sh.c $(INCDIR)/filenames.h
cpu-sparc.lo: cpu-sparc.c $(INCDIR)/filenames.h
cpu-tic30.lo: cpu-tic30.c $(INCDIR)/filenames.h
cpu-tic54x.lo: cpu-tic54x.c $(INCDIR)/filenames.h
cpu-tic80.lo: cpu-tic80.c $(INCDIR)/filenames.h
cpu-v850.lo: cpu-v850.c $(INCDIR)/filenames.h $(INCDIR)/safe-ctype.h
cpu-vax.lo: cpu-vax.c $(INCDIR)/filenames.h
cpu-we32k.lo: cpu-we32k.c $(INCDIR)/filenames.h
cpu-w65.lo: cpu-w65.c $(INCDIR)/filenames.h
cpu-z8k.lo: cpu-z8k.c $(INCDIR)/filenames.h
aout-adobe.lo: aout-adobe.c $(INCDIR)/filenames.h $(INCDIR)/aout/adobe.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def libaout.h \
  $(INCDIR)/bfdlink.h
aout-arm.lo: aout-arm.c $(INCDIR)/filenames.h libaout.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/aout/aout64.h aoutx.h \
d870 12
d883 1
a883 1
aout-cris.lo: aout-cris.c aout32.c aoutx.h $(INCDIR)/filenames.h \
a885 4
  $(INCDIR)/aout/ar.h aout-target.h
aout-ns32k.lo: aout-ns32k.c $(INCDIR)/aout/aout64.h \
  ns32k.h libaout.h $(INCDIR)/bfdlink.h aoutx.h $(INCDIR)/filenames.h \
  $(INCDIR)/safe-ctype.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
d887 6
a892 20
aout-sparcle.lo: aout-sparcle.c $(INCDIR)/bfdlink.h \
  libaout.h aoutf1.h $(INCDIR)/filenames.h $(INCDIR)/aout/sun4.h \
  $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/ar.h aout-target.h
aout-tic30.lo: aout-tic30.c $(INCDIR)/filenames.h libaout.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h aoutx.h \
  $(INCDIR)/safe-ctype.h
aout0.lo: aout0.c aoutf1.h $(INCDIR)/filenames.h $(INCDIR)/aout/sun4.h \
  libaout.h $(INCDIR)/bfdlink.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h \
  aout-target.h
aout32.lo: aout32.c aoutx.h $(INCDIR)/filenames.h $(INCDIR)/safe-ctype.h \
  $(INCDIR)/bfdlink.h libaout.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
armnetbsd.lo: armnetbsd.c netbsd.h $(INCDIR)/filenames.h \
  libaout.h $(INCDIR)/bfdlink.h aout-target.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
bout.lo: bout.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  genlink.h $(INCDIR)/bout.h $(INCDIR)/aout/stab_gnu.h \
d894 1
a894 1
cf-i386lynx.lo: cf-i386lynx.c $(INCDIR)/filenames.h \
d898 10
a907 2
cf-m68klynx.lo: cf-m68klynx.c coff-m68k.c $(INCDIR)/filenames.h \
  $(INCDIR)/coff/m68k.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
d909 2
a910 2
cf-sparclynx.lo: cf-sparclynx.c coff-sparc.c $(INCDIR)/filenames.h \
  $(INCDIR)/coff/sparc.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
d912 2
a913 2
coff-a29k.lo: coff-a29k.c $(INCDIR)/filenames.h $(INCDIR)/coff/a29k.h \
  $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
d915 3
a917 2
coff-apollo.lo: coff-apollo.c $(INCDIR)/filenames.h \
  $(INCDIR)/coff/apollo.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
d919 2
a920 1
coff-arm.lo: coff-arm.c $(INCDIR)/filenames.h $(INCDIR)/coff/arm.h \
d922 3
a924 7
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h coffswap.h
coff-aux.lo: coff-aux.c $(INCDIR)/filenames.h $(INCDIR)/coff/aux-coff.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/m68k.h $(INCDIR)/coff/external.h \
  coff-m68k.c libcoff.h $(INCDIR)/bfdlink.h coffcode.h \
  coffswap.h
coff-h8300.lo: coff-h8300.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  genlink.h $(INCDIR)/coff/h8300.h $(INCDIR)/coff/external.h \
d926 2
a927 5
coff-h8500.lo: coff-h8500.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/h8500.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  libcoff.h coffcode.h coffswap.h
coff-i386.lo: coff-i386.c $(INCDIR)/filenames.h $(INCDIR)/coff/i386.h \
  $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
d929 2
a930 2
coff-i860.lo: coff-i860.c $(INCDIR)/filenames.h $(INCDIR)/coff/i860.h \
  $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
d932 2
a933 4
coff-go32.lo: coff-go32.c coff-i386.c $(INCDIR)/filenames.h \
  $(INCDIR)/coff/i386.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h coffswap.h
coff-i960.lo: coff-i960.c $(INCDIR)/filenames.h $(INCDIR)/coff/i960.h \
d936 5
a940 2
coff-m68k.lo: coff-m68k.c $(INCDIR)/filenames.h $(INCDIR)/coff/m68k.h \
  $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
d942 2
a943 2
coff-m88k.lo: coff-m88k.c $(INCDIR)/filenames.h $(INCDIR)/coff/m88k.h \
  $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
d945 6
a950 5
coff-mips.lo: coff-mips.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/sym.h $(INCDIR)/coff/symconst.h \
  $(INCDIR)/coff/ecoff.h $(INCDIR)/coff/mips.h $(INCDIR)/coff/external.h \
  libcoff.h libecoff.h coffswap.h ecoffswap.h
coff-rs6000.lo: coff-rs6000.c $(INCDIR)/filenames.h \
d954 2
a955 4
coff-sh.lo: coff-sh.c $(INCDIR)/filenames.h $(INCDIR)/libiberty.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/coff/sh.h $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h libcoff.h coffcode.h coffswap.h
coff-sparc.lo: coff-sparc.c $(INCDIR)/filenames.h $(INCDIR)/coff/sparc.h \
d957 3
d961 13
a973 11
coff-stgo32.lo: coff-stgo32.c coff-i386.c $(INCDIR)/filenames.h \
  $(INCDIR)/coff/i386.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/go32exe.h libcoff.h $(INCDIR)/bfdlink.h \
  coffcode.h coffswap.h go32stub.h
coff-svm68k.lo: coff-svm68k.c coff-m68k.c $(INCDIR)/filenames.h \
  $(INCDIR)/coff/m68k.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h coffswap.h
coff-tic30.lo: coff-tic30.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/tic30.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  libcoff.h coffcode.h coffswap.h
coff-tic54x.lo: coff-tic54x.c $(INCDIR)/filenames.h \
d976 9
a984 5
coff-tic80.lo: coff-tic80.c $(INCDIR)/bfdlink.h $(INCDIR)/filenames.h \
  $(INCDIR)/coff/tic80.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  libcoff.h coffcode.h coffswap.h
coff-u68k.lo: coff-u68k.c coff-m68k.c $(INCDIR)/filenames.h \
  $(INCDIR)/coff/m68k.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
d986 25
a1010 1
coff-we32k.lo: coff-we32k.c $(INCDIR)/filenames.h $(INCDIR)/coff/we32k.h \
d1012 6
a1017 26
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h coffswap.h
coff-w65.lo: coff-w65.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/w65.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  libcoff.h coffcode.h coffswap.h
coff-z8k.lo: coff-z8k.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/z8k.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  libcoff.h coffcode.h coffswap.h
cofflink.lo: cofflink.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/internal.h libcoff.h
dwarf1.lo: dwarf1.c $(INCDIR)/filenames.h $(INCDIR)/libiberty.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/dwarf.h
ecoff.lo: ecoff.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/aout/ar.h $(INCDIR)/aout/ranlib.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def libaout.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/sym.h $(INCDIR)/coff/symconst.h \
  $(INCDIR)/coff/ecoff.h libcoff.h libecoff.h
ecofflink.lo: ecofflink.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/objalloc.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/sym.h $(INCDIR)/coff/symconst.h \
  $(INCDIR)/coff/ecoff.h libcoff.h libecoff.h
efi-app-ia32.lo: efi-app-ia32.c $(INCDIR)/filenames.h \
  coff-i386.c $(INCDIR)/coff/i386.h $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h libcoff.h \
  $(INCDIR)/bfdlink.h coffcode.h peicode.h libpei.h
elf.lo: elf.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
d1019 4
a1022 2
  $(INCDIR)/elf/external.h
elf32-arc.lo: elf32-arc.c $(INCDIR)/filenames.h elf-bfd.h \
d1024 1
a1024 6
  $(INCDIR)/bfdlink.h $(INCDIR)/elf/arc.h $(INCDIR)/elf/reloc-macros.h \
  elf32-target.h
elfarm-oabi.lo: elfarm-oabi.c $(INCDIR)/elf/arm.h $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/filenames.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
  elf32-arm.h elf32-target.h
d1026 1
a1026 12
  $(INCDIR)/filenames.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
  elf32-arm.h elf32-target.h
elf32-avr.lo: elf32-avr.c $(INCDIR)/filenames.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/elf/avr.h $(INCDIR)/elf/reloc-macros.h \
  elf32-target.h
elf32-cris.lo: elf32-cris.c $(INCDIR)/filenames.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/elf/cris.h $(INCDIR)/elf/reloc-macros.h \
  elf32-target.h
elf32-d10v.lo: elf32-d10v.c $(INCDIR)/filenames.h elf-bfd.h \
d1028 2
a1029 14
  $(INCDIR)/bfdlink.h $(INCDIR)/elf/d10v.h $(INCDIR)/elf/reloc-macros.h \
  elf32-target.h
elf32-d30v.lo: elf32-d30v.c $(INCDIR)/filenames.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/elf/d30v.h $(INCDIR)/elf/reloc-macros.h \
  elf32-target.h
elf32-fr30.lo: elf32-fr30.c $(INCDIR)/filenames.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/elf/fr30.h $(INCDIR)/elf/reloc-macros.h \
  elf32-target.h
elf32-gen.lo: elf32-gen.c $(INCDIR)/filenames.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h elf32-target.h
elf32-h8300.lo: elf32-h8300.c $(INCDIR)/filenames.h \
d1031 1
a1031 1
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/h8.h \
d1033 1
a1033 5
elf32-hppa.lo: elf32-hppa.c $(INCDIR)/filenames.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/elf/hppa.h $(INCDIR)/elf/reloc-macros.h \
  libhppa.h elf32-hppa.h elf-hppa.h elf32-target.h
elf32-i370.lo: elf32-i370.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
d1035 3
a1037 2
  $(INCDIR)/elf/external.h $(INCDIR)/elf/i370.h elf32-target.h
elf32-i386.lo: elf32-i386.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
d1039 3
a1041 15
  $(INCDIR)/elf/external.h $(INCDIR)/elf/i386.h $(INCDIR)/elf/reloc-macros.h \
  elf32-target.h
elf32-i860.lo: elf32-i860.c $(INCDIR)/filenames.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/elf/i860.h $(INCDIR)/elf/reloc-macros.h \
  elf32-target.h
elf32-i960.lo: elf32-i960.c $(INCDIR)/filenames.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/elf/i960.h $(INCDIR)/elf/reloc-macros.h \
  elf32-target.h
elf32-m32r.lo: elf32-m32r.c $(INCDIR)/filenames.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/elf/m32r.h $(INCDIR)/elf/reloc-macros.h \
  elf32-target.h
elf32-m68k.lo: elf32-m68k.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
d1043 3
a1045 3
  $(INCDIR)/elf/external.h $(INCDIR)/elf/m68k.h $(INCDIR)/elf/reloc-macros.h \
  elf32-target.h
elf32-m68hc11.lo: elf32-m68hc11.c $(INCDIR)/filenames.h \
d1047 1
a1047 1
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/m68hc11.h \
d1049 1
a1049 1
elf32-m68hc12.lo: elf32-m68hc12.c $(INCDIR)/filenames.h \
d1051 4
a1054 1
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/m68hc11.h \
d1056 8
a1063 9
elf32-m88k.lo: elf32-m88k.c $(INCDIR)/filenames.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h elf32-target.h
elf-m10200.lo: elf-m10200.c $(INCDIR)/filenames.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h elf32-target.h
elf-m10300.lo: elf-m10300.c $(INCDIR)/filenames.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/elf/mn10300.h $(INCDIR)/elf/reloc-macros.h \
d1065 1
a1065 1
elf32-mcore.lo: elf32-mcore.c $(INCDIR)/filenames.h \
d1067 9
a1075 1
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/elf/mcore.h \
d1077 1
a1077 7
elf32-mips.lo: elf32-mips.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  genlink.h elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/elf/mips.h $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/coff/sym.h $(INCDIR)/coff/symconst.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/ecoff.h $(INCDIR)/coff/mips.h $(INCDIR)/coff/external.h \
  ecoffswap.h elf32-target.h
elf32-openrisc.lo: elf32-openrisc.c $(INCDIR)/filenames.h \
d1079 10
a1088 2
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/openrisc.h \
  $(INCDIR)/elf/reloc-macros.h $(INCDIR)/libiberty.h \
d1090 4
a1093 3
elf32-pj.lo: elf32-pj.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/elf/pj.h $(INCDIR)/elf/reloc-macros.h \
d1095 1
a1095 1
elf32-ppc.lo: elf32-ppc.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
d1097 2
a1098 3
  $(INCDIR)/elf/external.h $(INCDIR)/elf/ppc.h $(INCDIR)/elf/reloc-macros.h \
  elf32-target.h
elf32-s390.lo: elf32-s390.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
d1100 2
a1101 3
  $(INCDIR)/elf/external.h $(INCDIR)/elf/s390.h $(INCDIR)/elf/reloc-macros.h \
  elf32-target.h
elf32-sh.lo: elf32-sh.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
d1103 37
a1139 1
  $(INCDIR)/elf/external.h $(INCDIR)/elf/sh.h $(INCDIR)/elf/reloc-macros.h \
d1141 1
a1141 5
elf32-sh-lin.lo: elf32-sh-lin.c $(INCDIR)/filenames.h \
  $(INCDIR)/elf/internal.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h elf32-sh.c \
  $(INCDIR)/elf/sh.h $(INCDIR)/elf/reloc-macros.h elf32-target.h
elf32-sparc.lo: elf32-sparc.c $(INCDIR)/filenames.h \
d1146 10
a1155 5
elf32-v850.lo: elf32-v850.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/elf/v850.h $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/libiberty.h elf32-target.h
elf32.lo: elf32.c elfcode.h $(INCDIR)/filenames.h $(INCDIR)/libiberty.h \
d1157 13
a1169 15
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h elfcore.h \
  elflink.h
elflink.lo: elflink.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h
epoc-pe-arm.lo: epoc-pe-arm.c pe-arm.c $(INCDIR)/filenames.h \
  coff-arm.c $(INCDIR)/coff/arm.h $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h libcoff.h \
  $(INCDIR)/bfdlink.h coffcode.h peicode.h libpei.h
epoc-pei-arm.lo: epoc-pei-arm.c pei-arm.c $(INCDIR)/filenames.h \
  coff-arm.c $(INCDIR)/coff/arm.h $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h libcoff.h \
  $(INCDIR)/bfdlink.h coffcode.h peicode.h libpei.h
hp300bsd.lo: hp300bsd.c $(INCDIR)/filenames.h libaout.h \
  $(INCDIR)/bfdlink.h aout-target.h $(INCDIR)/aout/aout64.h \
d1172 1
a1172 1
  aoutx.h $(INCDIR)/filenames.h $(INCDIR)/safe-ctype.h \
d1176 8
a1183 6
som.lo: som.c $(INCDIR)/alloca-conf.h $(INCDIR)/filenames.h
i386aout.lo: i386aout.c $(INCDIR)/filenames.h $(INCDIR)/aout/aout64.h \
  libaout.h $(INCDIR)/bfdlink.h aout-target.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
i386bsd.lo: i386bsd.c $(INCDIR)/filenames.h libaout.h \
  $(INCDIR)/bfdlink.h aout-target.h $(INCDIR)/aout/aout64.h \
d1186 2
a1187 7
  $(INCDIR)/filenames.h $(INCDIR)/safe-ctype.h $(INCDIR)/bfdlink.h \
  libaout.h $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h aout-target.h
i386freebsd.lo: i386freebsd.c freebsd.h $(INCDIR)/filenames.h \
  libaout.h $(INCDIR)/bfdlink.h aout-target.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
i386linux.lo: i386linux.c $(INCDIR)/filenames.h $(INCDIR)/aout/aout64.h \
d1189 41
a1229 7
  libaout.h $(INCDIR)/bfdlink.h aout-target.h
i386lynx.lo: i386lynx.c $(INCDIR)/filenames.h libaout.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/aout/aout64.h aout-target.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
i386msdos.lo: i386msdos.c $(INCDIR)/filenames.h libaout.h \
  $(INCDIR)/bfdlink.h
i386netbsd.lo: i386netbsd.c netbsd.h $(INCDIR)/filenames.h \
d1232 1
a1232 8
i386mach3.lo: i386mach3.c $(INCDIR)/filenames.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h \
  libaout.h $(INCDIR)/bfdlink.h aout-target.h
i386os9k.lo: i386os9k.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  libaout.h $(INCDIR)/os9k.h
ieee.lo: ieee.c $(INCDIR)/filenames.h $(INCDIR)/ieee.h \
  libieee.h $(INCDIR)/safe-ctype.h
m68k4knetbsd.lo: m68k4knetbsd.c netbsd.h $(INCDIR)/filenames.h \
d1235 4
a1238 21
m68klinux.lo: m68klinux.c $(INCDIR)/filenames.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h \
  libaout.h $(INCDIR)/bfdlink.h aout-target.h
m68klynx.lo: m68klynx.c $(INCDIR)/filenames.h libaout.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/aout/aout64.h aout-target.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
m68knetbsd.lo: m68knetbsd.c netbsd.h $(INCDIR)/filenames.h \
  libaout.h $(INCDIR)/bfdlink.h aout-target.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
m88kmach3.lo: m88kmach3.c $(INCDIR)/filenames.h libaout.h \
  $(INCDIR)/bfdlink.h aout-target.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
mipsbsd.lo: mipsbsd.c $(INCDIR)/filenames.h libaout.h \
  $(INCDIR)/bfdlink.h aout-target.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
newsos3.lo: newsos3.c $(INCDIR)/filenames.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h \
  libaout.h $(INCDIR)/bfdlink.h aout-target.h
nlm.lo: nlm.c $(INCDIR)/filenames.h libnlm.h $(INCDIR)/nlm/common.h \
  $(INCDIR)/nlm/internal.h $(INCDIR)/nlm/external.h
nlm32-i386.lo: nlm32-i386.c $(INCDIR)/filenames.h $(INCDIR)/nlm/i386-ext.h \
d1240 6
a1245 2
  $(INCDIR)/nlm/external.h nlmswap.h nlm-target.h
nlm32-sparc.lo: nlm32-sparc.c $(INCDIR)/filenames.h \
d1249 5
a1253 1
nlm32-ppc.lo: nlm32-ppc.c $(INCDIR)/filenames.h $(INCDIR)/nlm/ppc-ext.h \
d1255 12
a1266 4
  $(INCDIR)/nlm/external.h nlmswap.h nlm-target.h
nlm32.lo: nlm32.c nlmcode.h $(INCDIR)/filenames.h libnlm.h \
  $(INCDIR)/nlm/common.h $(INCDIR)/nlm/internal.h $(INCDIR)/nlm/external.h
ns32knetbsd.lo: ns32knetbsd.c netbsd.h $(INCDIR)/filenames.h \
d1268 24
a1291 35
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
oasys.lo: oasys.c $(INCDIR)/filenames.h $(INCDIR)/safe-ctype.h \
  $(INCDIR)/oasys.h liboasys.h
pc532-mach.lo: pc532-mach.c $(INCDIR)/filenames.h libaout.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/aout/aout64.h aout-target.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
pdp11.lo: pdp11.c $(INCDIR)/filenames.h libaout.h $(INCDIR)/bfdlink.h \
  aout-target.h $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h $(INCDIR)/safe-ctype.h
pe-arm.lo: pe-arm.c $(INCDIR)/filenames.h coff-arm.c \
  $(INCDIR)/coff/arm.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/pe.h libcoff.h $(INCDIR)/bfdlink.h coffcode.h \
  peicode.h libpei.h
pei-arm.lo: pei-arm.c $(INCDIR)/filenames.h coff-arm.c \
  $(INCDIR)/coff/arm.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/pe.h libcoff.h $(INCDIR)/bfdlink.h coffcode.h \
  peicode.h libpei.h
pe-i386.lo: pe-i386.c $(INCDIR)/filenames.h coff-i386.c \
  $(INCDIR)/coff/i386.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/pe.h libcoff.h $(INCDIR)/bfdlink.h coffcode.h \
  peicode.h libpei.h
pei-i386.lo: pei-i386.c $(INCDIR)/filenames.h coff-i386.c \
  $(INCDIR)/coff/i386.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/pe.h libcoff.h $(INCDIR)/bfdlink.h coffcode.h \
  peicode.h libpei.h
pe-mcore.lo: pe-mcore.c $(INCDIR)/filenames.h coff-mcore.c \
  $(INCDIR)/coff/mcore.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/pe.h libcoff.h $(INCDIR)/bfdlink.h coffcode.h \
  peicode.h libpei.h
pei-mcore.lo: pei-mcore.c $(INCDIR)/filenames.h coff-mcore.c \
  $(INCDIR)/coff/mcore.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/pe.h libcoff.h $(INCDIR)/bfdlink.h coffcode.h \
  peicode.h libpei.h
pe-ppc.lo: pe-ppc.c $(INCDIR)/filenames.h coff-ppc.c \
  $(INCDIR)/coff/powerpc.h $(INCDIR)/coff/external.h \
d1294 2
a1295 2
pei-ppc.lo: pei-ppc.c $(INCDIR)/filenames.h coff-ppc.c \
  $(INCDIR)/coff/powerpc.h $(INCDIR)/coff/external.h \
d1298 2
a1299 2
pe-sh.lo: pe-sh.c $(INCDIR)/filenames.h coff-sh.c $(INCDIR)/libiberty.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/coff/sh.h $(INCDIR)/coff/external.h \
d1301 9
a1309 4
  coffcode.h peicode.h libpei.h
pei-sh.lo: pei-sh.c $(INCDIR)/filenames.h coff-sh.c \
  $(INCDIR)/libiberty.h $(INCDIR)/bfdlink.h $(INCDIR)/coff/sh.h \
  $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
d1312 1
a1312 5
pe-mips.lo: pe-mips.c $(INCDIR)/filenames.h $(INCDIR)/coff/mipspe.h \
  $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/pe.h libcoff.h $(INCDIR)/bfdlink.h coffcode.h \
  peicode.h libpei.h
pei-mips.lo: pei-mips.c $(INCDIR)/filenames.h pe-mips.c \
d1316 10
a1325 10
ppcboot.lo: ppcboot.c $(INCDIR)/safe-ctype.h $(INCDIR)/filenames.h
reloc16.lo: reloc16.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  genlink.h $(INCDIR)/coff/internal.h libcoff.h
riscix.lo: riscix.c $(INCDIR)/filenames.h libaout.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/aout/aout64.h aout-target.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
sparclinux.lo: sparclinux.c $(INCDIR)/filenames.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h \
  libaout.h $(INCDIR)/bfdlink.h aout-target.h
sparclynx.lo: sparclynx.c $(INCDIR)/filenames.h $(INCDIR)/aout/sun4.h \
d1327 34
a1360 34
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h \
  aout-target.h
sparcnetbsd.lo: sparcnetbsd.c netbsd.h $(INCDIR)/filenames.h \
  libaout.h $(INCDIR)/bfdlink.h aout-target.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
sunos.lo: sunos.c $(INCDIR)/bfdlink.h libaout.h aoutf1.h \
  $(INCDIR)/filenames.h $(INCDIR)/aout/sun4.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h \
  aout-target.h
vaxnetbsd.lo: vaxnetbsd.c netbsd.h $(INCDIR)/filenames.h \
  libaout.h $(INCDIR)/bfdlink.h aout-target.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
versados.lo: versados.c $(INCDIR)/filenames.h $(INCDIR)/libiberty.h
vms.lo: vms.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  vms.h
vms-gsd.lo: vms-gsd.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  vms.h
vms-hdr.lo: vms-hdr.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/safe-ctype.h vms.h
vms-misc.lo: vms-misc.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  vms.h
vms-tir.lo: vms-tir.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  vms.h
xcofflink.lo: xcofflink.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/xcoff.h libcoff.h \
  libxcoff.h
aout64.lo: aout64.c aoutx.h $(INCDIR)/filenames.h $(INCDIR)/safe-ctype.h \
  $(INCDIR)/bfdlink.h libaout.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
coff-alpha.lo: coff-alpha.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/sym.h $(INCDIR)/coff/symconst.h \
  $(INCDIR)/coff/ecoff.h $(INCDIR)/coff/alpha.h $(INCDIR)/aout/ar.h \
  libcoff.h libecoff.h coffswap.h ecoffswap.h
coff64-rs6000.lo: coff64-rs6000.c $(INCDIR)/filenames.h \
d1362 15
a1376 3
  $(INCDIR)/coff/rs6k64.h libcoff.h libxcoff.h coffcode.h \
  coffswap.h
demo64.lo: demo64.c aoutf1.h $(INCDIR)/filenames.h \
d1380 11
a1390 9
efi-app-ia64.lo: efi-app-ia64.c $(INCDIR)/filenames.h \
  coff-ia64.c $(INCDIR)/coff/ia64.h $(INCDIR)/coff/external.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h libcoff.h \
  $(INCDIR)/bfdlink.h coffcode.h peicode.h libpei.h
elf64-x86-64.lo: elf64-x86-64.c $(INCDIR)/filenames.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/x86-64.h \
  $(INCDIR)/elf/reloc-macros.h elf64-target.h
elf64-alpha.lo: elf64-alpha.c $(INCDIR)/filenames.h \
d1398 1
a1398 5
  $(INCDIR)/filenames.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/hppa.h $(INCDIR)/elf/reloc-macros.h libhppa.h \
  elf64-hppa.h elf-hppa.h elf64-target.h
elf64-gen.lo: elf64-gen.c $(INCDIR)/filenames.h elf-bfd.h \
d1400 3
a1402 8
  $(INCDIR)/bfdlink.h elf64-target.h
elf64-mips.lo: elf64-mips.c $(INCDIR)/filenames.h $(INCDIR)/aout/ar.h \
  $(INCDIR)/bfdlink.h genlink.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/elf/mips.h \
  $(INCDIR)/elf/reloc-macros.h $(INCDIR)/coff/sym.h $(INCDIR)/coff/symconst.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/ecoff.h $(INCDIR)/coff/alpha.h \
  ecoffswap.h elf64-target.h
elf64-ppc.lo: elf64-ppc.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
d1404 7
a1410 1
  $(INCDIR)/elf/external.h $(INCDIR)/elf/ppc.h $(INCDIR)/elf/reloc-macros.h \
d1412 9
a1420 5
elf64-s390.lo: elf64-s390.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/elf/s390.h $(INCDIR)/elf/reloc-macros.h \
  elf64-target.h
elf64-sparc.lo: elf64-sparc.c $(INCDIR)/filenames.h \
d1425 5
a1429 5
elf64.lo: elf64.c elfcode.h $(INCDIR)/filenames.h $(INCDIR)/libiberty.h \
  $(INCDIR)/bfdlink.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h elfcore.h \
  elflink.h
nlm32-alpha.lo: nlm32-alpha.c $(INCDIR)/filenames.h \
d1433 4
a1436 3
nlm64.lo: nlm64.c nlmcode.h $(INCDIR)/filenames.h libnlm.h \
  $(INCDIR)/nlm/common.h $(INCDIR)/nlm/internal.h $(INCDIR)/nlm/external.h
aix386-core.lo: aix386-core.c $(INCDIR)/filenames.h \
d1439 23
a1461 23
hpux-core.lo: hpux-core.c $(INCDIR)/filenames.h
irix-core.lo: irix-core.c $(INCDIR)/filenames.h
lynx-core.lo: lynx-core.c $(INCDIR)/filenames.h
osf-core.lo: osf-core.c $(INCDIR)/filenames.h
sco5-core.lo: sco5-core.c $(INCDIR)/filenames.h libaout.h \
  $(INCDIR)/bfdlink.h
trad-core.lo: trad-core.c $(INCDIR)/filenames.h libaout.h \
  $(INCDIR)/bfdlink.h
cisco-core.lo: cisco-core.c $(INCDIR)/filenames.h
elf32-ia64.lo: elf32-ia64.c $(INCDIR)/filenames.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/opcode/ia64.h $(INCDIR)/elf/ia64.h \
  $(INCDIR)/elf/reloc-macros.h elf32-target.h
elf64-ia64.lo: elf64-ia64.c $(INCDIR)/filenames.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/opcode/ia64.h $(INCDIR)/elf/ia64.h \
  $(INCDIR)/elf/reloc-macros.h elf64-target.h
peigen.lo: peigen.c $(INCDIR)/filenames.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/i386.h $(INCDIR)/coff/external.h $(INCDIR)/coff/pe.h \
  libcoff.h $(INCDIR)/bfdlink.h libpei.h
pepigen.lo: pepigen.c $(INCDIR)/filenames.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/ia64.h $(INCDIR)/coff/external.h $(INCDIR)/coff/pe.h \
  libcoff.h $(INCDIR)/bfdlink.h libpei.h
@


1.62
log
@2001-08-30  H.J. Lu  <hjl@@gnu.org>

	* Makefile.am (BFD32_BACKENDS): Add elf32-h8300.lo.
	(BFD32_BACKENDS_CFILES): Add elf32-h8300.c.
	* Makefile.in: Rebuild.
@
text
@d759 2
a760 2
  $(INCDIR)/aout/ranlib.h
archures.lo: archures.c $(INCDIR)/filenames.h
d762 4
a765 3
  $(INCDIR)/bfdlink.h $(INCDIR)/coff/internal.h $(INCDIR)/coff/sym.h \
  libcoff.h libecoff.h $(INCDIR)/coff/ecoff.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h
d776 2
a777 2
syms.lo: syms.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def
d783 3
a785 2
srec.lo: srec.c $(INCDIR)/filenames.h $(INCDIR)/libiberty.h
binary.lo: binary.c $(INCDIR)/filenames.h
d787 2
a788 1
ihex.lo: ihex.c $(INCDIR)/filenames.h $(INCDIR)/libiberty.h
d790 1
a790 1
  $(INCDIR)/aout/stab.def
d836 1
a836 1
cpu-v850.lo: cpu-v850.c $(INCDIR)/filenames.h
d846 2
a847 2
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h \
  aout-target.h
d849 3
a851 3
  $(INCDIR)/bfdlink.h libaout.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h \
  aout-target.h
d853 3
a855 1
  ns32k.h libaout.h $(INCDIR)/bfdlink.h
d862 2
a863 1
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h aoutx.h
d868 3
a870 3
aout32.lo: aout32.c aoutx.h $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  libaout.h $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
d1022 4
a1025 4
elf32-h8300.lo: elf32-h8300.c $(INCDIR)/filenames.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/elf/h8.h $(INCDIR)/elf/reloc-macros.h \
  elf32-target.h
d1102 4
a1105 4
elf32-sh-lin.lo: elf32-sh-lin.c elf32-sh.c $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/elf/sh.h \
  $(INCDIR)/elf/reloc-macros.h elf32-target.h
d1134 4
a1137 3
  aoutx.h $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h libaout.h \
  $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/ar.h aout-target.h
d1146 3
a1148 3
  $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h libaout.h \
  $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/ar.h aout-target.h
d1169 1
a1169 1
  libieee.h
d1208 2
a1209 2
oasys.lo: oasys.c $(INCDIR)/filenames.h $(INCDIR)/oasys.h \
  liboasys.h
d1215 1
a1215 1
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
d1265 1
a1265 1
ppcboot.lo: ppcboot.c $(INCDIR)/filenames.h
d1294 1
a1294 1
  vms.h
d1302 3
a1304 3
aout64.lo: aout64.c aoutx.h $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  libaout.h $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
@


1.61
log
@	* Makefile.am (elf32-h8300.lo): New target.
	* config.bfd (h8300*-*-elf): New case.
	* configure.in (bfd_elf32_h8300_vec): New case.
	* elf.c (prep_headers): Add case for bfd_arch_h8300.
	* reloc.c (BFD_RELOC_H8_DIR16A8): New relocation.
	(BFD_RELOC_H8_DIR16R8, BFD_RELOC_H8_DIR24A8): Likewise.
	(BFD_RELOC_H8_DIR24R8, BFD_RELOC_H8_DIR32A16): Likewise.
	* targets.c (bfd_target bfd_elf32_h8300_vec): New extern declaration.
	* elf32-h8300.c: New file.
	* Makefile.in, bfd-in2.h, libbfd.h, configure: Regenerated.
@
text
@d190 1
d331 1
@


1.60
log
@	* config.bfd: Add powerpc64 target.  Add powerpc64 vectors to
	targ64_selvecs for 32 bit powerpc targets.
	* Makefile.am (BFD64_BACKENDS): Add elf64-ppc.lo.
	(BFD64_BACKENDS_CFILES): Add elf64-ppc.c.
	Run "make dep-am".
	* Makefile.in: Regenerate.
	* configure.in: Add elf64_powerpc vecs.
	* configure: Regenerate.
	* cpu-powerpc.c: Default to bfd_mach_ppc_620 entry for 64 bit.
	* elf.c (prep_headers): EM_PPC64 for 64 bit ppc elf target.
	* targets.c: Add bfd_elf64_powerpc_vec and bfd_elf64_powerpcle_vec.
	* elf64-ppc.c: New file.
	* reloc.c: Add powerpc64 relocs.
	* libbfd.h: Regenerate.
	* bfd-in2.h: Regenerate.
@
text
@d1014 4
@


1.59
log
@Update dependencies with "make dep-am".
@
text
@d429 1
d448 1
d924 3
a926 3
coff-sh.lo: coff-sh.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/sh.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  libcoff.h coffcode.h coffswap.h
d1102 1
a1102 1
  elf32-target.h
d1235 1
a1235 5
pe-sh.lo: pe-sh.c $(INCDIR)/filenames.h coff-sh.c $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/sh.h $(INCDIR)/coff/external.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/pe.h libcoff.h coffcode.h peicode.h \
  libpei.h
pei-sh.lo: pei-sh.c $(INCDIR)/filenames.h coff-sh.c \
d1239 5
d1333 4
@


1.58
log
@2001-07-15  H.J. Lu  <hjl@@gnu.org>

	* Makefile.am (po/SRC-POTFILES.in): Use tmp.src instead of tmp.
	(po/BLD-POTFILES.in): Use tmp.bld instead of tmp.
	* Makefile.in: Regenerate.
@
text
@d786 1
a786 1
merge.lo: merge.c $(INCDIR)/filenames.h
d868 5
a872 1
  coff-i386.c $(INCDIR)/coff/i386.h $(INCDIR)/coff/internal.h \
a873 3
cf-m68klynx.lo: cf-m68klynx.c coff-m68k.c $(INCDIR)/filenames.h \
  $(INCDIR)/coff/m68k.h $(INCDIR)/coff/internal.h libcoff.h \
  $(INCDIR)/bfdlink.h coffcode.h coffswap.h
d875 2
a876 2
  $(INCDIR)/coff/sparc.h $(INCDIR)/coff/internal.h libcoff.h \
  $(INCDIR)/bfdlink.h coffcode.h coffswap.h
d878 2
a879 2
  $(INCDIR)/coff/internal.h libcoff.h $(INCDIR)/bfdlink.h \
  coffcode.h coffswap.h
d881 2
a882 2
  $(INCDIR)/coff/apollo.h $(INCDIR)/coff/internal.h libcoff.h \
  $(INCDIR)/bfdlink.h coffcode.h coffswap.h
d884 2
a885 2
  $(INCDIR)/coff/internal.h libcoff.h $(INCDIR)/bfdlink.h \
  coffcode.h coffswap.h
d887 3
a889 2
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/m68k.h coff-m68k.c \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h coffswap.h
d891 4
a894 1
  genlink.h $(INCDIR)/coff/h8300.h $(INCDIR)/coff/internal.h \
a895 3
coff-h8500.lo: coff-h8500.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/h8500.h $(INCDIR)/coff/internal.h libcoff.h \
  coffcode.h coffswap.h
d897 2
a898 2
  $(INCDIR)/coff/internal.h libcoff.h $(INCDIR)/bfdlink.h \
  coffcode.h coffswap.h
d900 2
a901 2
  $(INCDIR)/coff/internal.h libcoff.h $(INCDIR)/bfdlink.h \
  coffcode.h coffswap.h
d903 2
a904 2
  $(INCDIR)/coff/i386.h $(INCDIR)/coff/internal.h libcoff.h \
  $(INCDIR)/bfdlink.h coffcode.h coffswap.h
d909 2
a910 2
  $(INCDIR)/coff/internal.h libcoff.h $(INCDIR)/bfdlink.h \
  coffcode.h coffswap.h
d912 2
a913 2
  $(INCDIR)/coff/internal.h libcoff.h $(INCDIR)/bfdlink.h \
  coffcode.h coffswap.h
d916 3
a918 6
  $(INCDIR)/coff/ecoff.h $(INCDIR)/coff/mips.h libcoff.h \
  libecoff.h coffswap.h ecoffswap.h
coff-rs6000.lo: coff64-rs6000.c coff-rs6000.c xcofflink.c \
  $(INCDIR)/bfdlink.h $(INCDIR)/coff/internal.h $(INCDIR)/coff/xcoff.h \
  $(INCDIR)/coff/rs6000.h libcoff.h libxcoff.h coffcode.h coffswap.h
coff64-rs6000.lo: coff64-rs6000.c coff-rs6000.c xcofflink.c \
d920 2
a921 1
  $(INCDIR)/coff/rs6k64.h libcoff.h libxcoff.h coffcode.h coffswap.h
d923 2
a924 2
  $(INCDIR)/coff/sh.h $(INCDIR)/coff/internal.h libcoff.h \
  coffcode.h coffswap.h
d926 2
a927 2
  $(INCDIR)/coff/internal.h libcoff.h $(INCDIR)/bfdlink.h \
  coffcode.h coffswap.h
d929 3
a931 3
  $(INCDIR)/coff/i386.h $(INCDIR)/coff/internal.h $(INCDIR)/coff/go32exe.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h coffswap.h \
  go32stub.h
d933 2
a934 2
  $(INCDIR)/coff/m68k.h $(INCDIR)/coff/internal.h libcoff.h \
  $(INCDIR)/bfdlink.h coffcode.h coffswap.h
d936 2
a937 2
  $(INCDIR)/coff/tic30.h $(INCDIR)/coff/internal.h libcoff.h \
  coffcode.h coffswap.h
d942 2
a943 2
  $(INCDIR)/coff/tic80.h $(INCDIR)/coff/internal.h libcoff.h \
  coffcode.h coffswap.h
d945 2
a946 2
  $(INCDIR)/coff/m68k.h $(INCDIR)/coff/internal.h libcoff.h \
  $(INCDIR)/bfdlink.h coffcode.h coffswap.h
d948 2
a949 2
  $(INCDIR)/coff/internal.h libcoff.h $(INCDIR)/bfdlink.h \
  coffcode.h coffswap.h
d951 2
a952 2
  $(INCDIR)/coff/w65.h $(INCDIR)/coff/internal.h libcoff.h \
  coffcode.h coffswap.h
d954 2
a955 2
  $(INCDIR)/coff/z8k.h $(INCDIR)/coff/internal.h libcoff.h \
  coffcode.h coffswap.h
d971 3
a973 3
  coff-i386.c $(INCDIR)/coff/i386.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/pe.h libcoff.h $(INCDIR)/bfdlink.h coffcode.h \
  peicode.h libpei.h
d1065 6
a1070 5
  $(INCDIR)/coff/ecoff.h $(INCDIR)/coff/mips.h ecoffswap.h \
  elf32-target.h
elf32-openrisc.lo: elf32-openrisc.c $(INCDIR)/filenames.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/elf/openrisc.h $(INCDIR)/elf/reloc-macros.h \
d1101 4
a1104 3
elf32.lo: elf32.c elfcode.h $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h elfcore.h elflink.h
d1109 3
a1111 3
  coff-arm.c $(INCDIR)/coff/arm.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/pe.h libcoff.h $(INCDIR)/bfdlink.h coffcode.h \
  peicode.h libpei.h
d1113 3
a1115 3
  coff-arm.c $(INCDIR)/coff/arm.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/pe.h libcoff.h $(INCDIR)/bfdlink.h coffcode.h \
  peicode.h libpei.h
d1202 3
a1204 3
  $(INCDIR)/coff/arm.h $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h peicode.h \
  libpei.h
d1206 3
a1208 3
  $(INCDIR)/coff/arm.h $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h peicode.h \
  libpei.h
d1210 3
a1212 3
  $(INCDIR)/coff/i386.h $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h peicode.h \
  libpei.h
d1214 3
a1216 3
  $(INCDIR)/coff/i386.h $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h peicode.h \
  libpei.h
d1218 3
a1220 3
  $(INCDIR)/coff/mcore.h $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h peicode.h \
  libpei.h
d1222 1
a1222 5
  $(INCDIR)/coff/mcore.h $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h peicode.h \
  libpei.h
pe-ppc.lo: pe-ppc.c $(INCDIR)/filenames.h coff-ppc.c \
  $(INCDIR)/coff/powerpc.h $(INCDIR)/coff/internal.h \
d1225 4
d1230 3
a1232 3
  $(INCDIR)/coff/powerpc.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/pe.h libcoff.h $(INCDIR)/bfdlink.h coffcode.h \
  peicode.h libpei.h
d1234 1
a1234 4
  $(INCDIR)/coff/sh.h $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h \
  libcoff.h coffcode.h peicode.h libpei.h
pei-sh.lo: pei-sh.c $(INCDIR)/filenames.h coff-sh.c \
  $(INCDIR)/bfdlink.h $(INCDIR)/coff/sh.h $(INCDIR)/coff/internal.h \
d1237 4
d1242 3
a1244 2
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h libcoff.h \
  $(INCDIR)/bfdlink.h coffcode.h peicode.h libpei.h
d1246 3
a1248 3
  $(INCDIR)/coff/mipspe.h $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h peicode.h \
  libpei.h
d1284 2
a1285 1
  $(INCDIR)/coff/internal.h libcoff.h
d1294 3
a1296 2
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/rs6k64.h libcoff.h \
  $(INCDIR)/bfdlink.h xcoff-target.h coffcode.h coffswap.h
d1302 3
a1304 3
  coff-ia64.c $(INCDIR)/coff/ia64.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/pe.h libcoff.h $(INCDIR)/bfdlink.h coffcode.h \
  peicode.h libpei.h
d1339 4
a1342 3
elf64.lo: elf64.c elfcode.h $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h elfcore.h elflink.h
d1350 2
a1351 2
  $(INCDIR)/coff/i386.h $(INCDIR)/coff/internal.h libcoff.h \
  $(INCDIR)/bfdlink.h
d1370 2
a1371 2
  $(INCDIR)/coff/i386.h $(INCDIR)/coff/pe.h libcoff.h \
  $(INCDIR)/bfdlink.h libpei.h
d1373 2
a1374 2
  $(INCDIR)/coff/ia64.h $(INCDIR)/coff/pe.h libcoff.h \
  $(INCDIR)/bfdlink.h libpei.h
@


1.57
log
@	* elflink.h: Whitespace changes.
	(elf_link_read_relocs_from_section): Use "unsigned int" iterator
	rather than "unsigned char".
	(elf_link_output_relocs): Likewise.
	(elf_link_input_bfd): Likewise.
	(elf_reloc_link_order): LIkewise.
	* elf.c: s/CONST/const/.  Whitespace changes.
	* elf32-mips.c: Formatting fix.

	* Makefile.am (SOURCE_HFILES): Include xcoff-target.h, remove xcoff.h.
	* Makefile.in: Regenerate.
	* po/Make-in: Remove trailing tab.
@
text
@d515 2
a516 2
	for file in $(SRC_POTFILES); do echo $$file; done | sort > tmp \
	  && mv tmp $(srcdir)/po/SRC-POTFILES.in
d519 2
a520 2
	for file in $(BLD_POTFILES); do echo $$file; done | sort > tmp \
	  && mv tmp $(srcdir)/po/BLD-POTFILES.in
@


1.56
log
@2001-05-25  H.J. Lu  <hjl@@gnu.org>

	* Makefile.am (BFD32_BACKENDS): Remove coff-pmac.lo.
	(BFD32_BACKENDS_CFILES): Remove coff-pmac.c.
	(coff-rs6000.lo): Remove the old dependency.
	* Makefile.in: Rebuild.

	* configure.in (pmac_xcoff_vec): Replace coff-pmac.lo with
	coff-rs6000.lo.
@
text
@d502 2
a503 1
	nlmcode.h nlmswap.h ns32k.h peicode.h som.h vms.h libxcoff.h xcoff.h
@


1.55
log
@Support for xcoff64
@
text
@a162 1
	coff-pmac.lo \
a302 1
	coff-pmac.c \
a920 3
coff-rs6000.lo: coff-rs6000.c $(INCDIR)/filenames.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/rs6000.h libcoff.h \
  $(INCDIR)/bfdlink.h xcoff-target.h coffcode.h coffswap.h
@


1.54
log
@Add OpenRISC support
@
text
@d504 1
a504 1
	nlmcode.h nlmswap.h ns32k.h peicode.h som.h vms.h xcoff-target.h
d917 6
a922 3
coff-pmac.lo: coff-pmac.c $(INCDIR)/filenames.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/rs6000.h libcoff.h $(INCDIR)/bfdlink.h \
  xcoff-target.h coffcode.h coffswap.h
@


1.53
log
@bfd/
	* libbfd-in.h (_bfd_merge_section): New.
	(_bfd_write_merged_section): New.
	(_bfd_merged_section_offset): New.
	* libbfd.h: Rebuilt.
	* linker.c (_bfd_generic_link_output_symbols): Handle
	discard_sec_merge.
	* aoutx.h (aout_link_write_symbols): Likewise.
	* pdp11.c (aout_link_write_symbols): Likewise.
	* elflink.h (elf_link_add_object_symbols): Call _bfd_merge_section.
	(elf_bfd_final_link): Adjust global symbols pointing into SEC_MERGE
	sections.
	(elf_link_sec_merge_syms): New.
	(elf_link_input_bfd): Call _bfd_merged_section_offset
	and _bfd_write_merged_section.
	Handle discard_sec_merge.
	* elf-bfd.h (struct elf_link_hash_table): Add merge_info
	field.
	(struct bfd_elf_section_data): Likewise.
	* elf.c (_bfd_elf_make_section_from_shdr): Set SEC_MERGE and
	SEC_STRINGS section flags and entsize from their ELF counterparts.
	(_bfd_elf_link_hash_table_init): Initialize merge_info.
	(elf_fake_sections): Set SHF_MERGE, SHF_STRINGS and sh_entsize
	from their BFD counterparts.
	* merge.c: New file.
	* Makefile.am: Add strtab.lo.
	* Makefile.in: Rebuilt.
include/
	* bfdlink.h (bfd_link_discard): Add discard_sec_merge.
gas/
	* config/obj-elf.c (obj_elf_change_section): Add entsize argument,
	handle SHF_MERGE and SHF_STRINGS.
	(obj_elf_parse_section_letters): Set SHF_MERGE and SHF_STRINGS.
	(obj_elf_section): Allow additional argument specifying entity size.
	* write.c (adjust_reloc_syms): Keep relocations against local symbols
	in SEC_MERGE sections.
ld/
	* ldmain.c (main): Default to discard_sec_merge.
	* lexsup.c (OPTION_DISCARD_NONE): Define.
	(ld_options): Add --discard-none.
	(parse_args): Handle OPTION_DISCARD_NONE.
	* ldlang.c (wild_doit): SEC_MERGE should be set in the output
	section only if SEC_MERGE and SEC_STRINGS flags and entsize of
	all its input sections match.
@
text
@d72 1
d117 1
d206 1
d346 1
d819 1
d1067 4
@


1.52
log
@Fix building bfd.pot in maintainer mode
@
text
@d33 1
a33 1
	dwarf2.lo
d40 1
a40 1
	dwarf2.c
d783 1
@


1.51
log
@Update copyright notices
@
text
@d488 1
a488 2
CFILES = \
	$(SOURCE_CFILES) \
d491 2
d502 26
a527 9
HFILES = \
	elf32-target.h elf64-target.h targmatch.h \
	$(SOURCE_HFILES)

POTFILES = $(CFILES) $(HFILES)

po/POTFILES.in: @@MAINT@@ Makefile $(POTFILES)
	for file in $(POTFILES); do echo $$file; done | sort > tmp \
	  && mv tmp $(srcdir)/po/POTFILES.in
d735 1
a735 2
MOSTLYCLEANFILES = elf32-target.h elf64-target.h ofiles stamp-ofiles \
	targmatch.h
d739 2
@


1.50
log
@Bump version to 2.11.90, fix missing dependencies in bfd/,
and run "make dep-am".
@
text
@d507 1
a507 1
po/POTFILES.in: @@MAINT@@ Makefile
@


1.49
log
@Add PDP-11 support
@
text
@d481 1
a481 1
CFILES = \
d488 4
d505 1
a505 1
POTFILES = $(CFILES) $(SOURCE_HFILES)
d764 3
a936 3
dwarf2.lo: dwarf2.c $(INCDIR)/filenames.h $(INCDIR)/libiberty.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/dwarf2.h
a1006 4
elf32-ia64.lo: elf32-ia64.c $(INCDIR)/filenames.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/opcode/ia64.h $(INCDIR)/elf/ia64.h \
  $(INCDIR)/elf/reloc-macros.h elf32-target.h
d1051 3
a1053 4
elf32-s390.lo: elf32-s390.c $(INCDIR)/filenames.h \
  $(INCDIR)/bfdlink.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/elf/s390.h \
  $(INCDIR)/elf/reloc-macros.h $(INCDIR)/opcode/s390.h \
d1168 1
a1168 1
pdp11.lo: pdp11.c libaout.h $(INCDIR)/bfdlink.h \
a1216 6
peigen.lo: peigen.c $(INCDIR)/filenames.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/i386.h $(INCDIR)/coff/pe.h libcoff.h \
  $(INCDIR)/bfdlink.h libpei.h
pepigen.lo: pepigen.c $(INCDIR)/filenames.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/ia64.h $(INCDIR)/coff/pe.h libcoff.h \
  $(INCDIR)/bfdlink.h libpei.h
d1271 4
d1282 5
a1286 12
elf64-hppa.lo: elf64-hppa.c $(INCDIR)/filenames.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/elf/hppa.h $(INCDIR)/elf/reloc-macros.h \
  libhppa.h elf64-hppa.h elf-hppa.h elf64-target.h
elf64-ia64.lo: elf64-ia64.c $(INCDIR)/filenames.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/opcode/ia64.h $(INCDIR)/elf/ia64.h \
  $(INCDIR)/elf/reloc-macros.h elf64-target.h
elf64-x86-64.lo: elf64-x86-64.c $(INCDIR)/filenames.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/opcode/i386.h $(INCDIR)/elf/x86-64.h \
  $(INCDIR)/elf/reloc-macros.h elf64-target.h
d1296 1
a1296 1
elf64-s390.lo: elf64-s390.c $(INCDIR)/filenames.h \
d1298 1
a1298 2
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/opcode/s390.h \
  $(INCDIR)/elf/s390.h $(INCDIR)/elf/reloc-macros.h \
d1326 14
@


1.48
log
@Apply changes to Makefile.in to Makefile.am
@
text
@d72 1
d116 1
d244 1
d383 1
d788 1
d1169 3
@


1.47
log
@	* Makefile.am (stamp-lib): ranlib the libbfd.a in the build directory.
	* Makefile.in: Regenerate.
@
text
@a391 1
	peigen.c \
d427 2
a428 1
	nlm64.lo
d587 10
d1212 3
@


1.46
log
@Add s390 support
@
text
@d543 1
@


1.45
log
@Remove elf64-ia64.c from list of backend C files - it is auto-generated.
@
text
@d75 1
d118 1
d204 1
d342 1
d424 1
d441 1
d776 1
d1035 5
d1284 5
@


1.44
log
@2001-01-21  Maciej W. Rozycki  <macro@@ds2.pg.gda.pl>

	* Makefile.am (install-data-local): Make use of $(DESTDIR).
	* Makefile.in: Regenerate.
@
text
@a433 1
	elf64-ia64.c \
@


1.44.2.1
log
@Merge from mainline.
@
text
@d388 1
d423 1
a423 2
	nlm64.lo \
	pepigen.lo
d434 1
d472 1
a472 1
SOURCE_CFILES = \
a478 5
BUILD_CFILES = \
	elf32-ia64.c elf64-ia64.c peigen.c pepigen.c

CFILES = $(SOURCE_CFILES) $(BUILD_CFILES)

d488 9
a496 26
## ... and all .h files which are in the build tree.
BUILD_HFILES = \
	elf32-target.h elf64-target.h targmatch.h

HFILES = $(SOURCE_HFILES) $(BUILD_HFILES)

SRC_POTFILES = $(SOURCE_CFILES) $(SOURCE_HFILES)
BLD_POTFILES = $(BUILD_CFILES) $(BUILD_HFILES)

po/SRC-POTFILES.in: @@MAINT@@ Makefile $(SRC_POTFILES)
	for file in $(SRC_POTFILES); do echo $$file; done | sort > tmp \
	  && mv tmp $(srcdir)/po/SRC-POTFILES.in

po/BLD-POTFILES.in: @@MAINT@@ Makefile $(BLD_POTFILES)
	for file in $(BLD_POTFILES); do echo $$file; done | sort > tmp \
	  && mv tmp $(srcdir)/po/BLD-POTFILES.in

# The following target is retained for upgrade purposes.
# This target used to exist in older versions of this makefile, and was
# referenced by <builddir>/po/Makefile (which is created from <srcdir>/po/Make-in)
# So old versions of <builddir>/po/Makefile will try to regenerate themselves
# when make is next run, but that dependency cannot be completed without a build
# of po/POTFILES.in.  Hence the presence of this rule.  This rule will be deleted
# once it is no longer needed - probably in the fall of 2001.
po/POTFILES.in:

a537 1
	  $(RANLIB) libbfd.tmp; \
a580 10
peigen.c : peXXigen.c
	rm -f peigen.c
	sed -e s/XX/pe/g < $(srcdir)/peXXigen.c > peigen.new
	mv -f peigen.new peigen.c

pepigen.c : peXXigen.c
	rm -f pepigen.c
	sed -e s/XX/pep/g < $(srcdir)/peXXigen.c > pepigen.new
	mv -f pepigen.new pepigen.c

d693 2
a694 1
MOSTLYCLEANFILES = ofiles stamp-ofiles
a698 2
DISTCLEANFILES = $(BUILD_CFILES) $(BUILD_HFILES)

a739 3
dwarf2.lo: dwarf2.c $(INCDIR)/filenames.h $(INCDIR)/libiberty.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/dwarf2.h
d908 3
d981 4
d1188 3
a1244 4
elf64-x86-64.lo: elf64-x86-64.c $(INCDIR)/filenames.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/x86-64.h \
  $(INCDIR)/elf/reloc-macros.h elf64-target.h
d1252 12
a1263 5
elf64-hppa.lo: elf64-hppa.c $(INCDIR)/alloca-conf.h \
  $(INCDIR)/filenames.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/hppa.h $(INCDIR)/elf/reloc-macros.h libhppa.h \
  elf64-hppa.h elf-hppa.h elf64-target.h
a1298 14
elf32-ia64.lo: elf32-ia64.c $(INCDIR)/filenames.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/opcode/ia64.h $(INCDIR)/elf/ia64.h \
  $(INCDIR)/elf/reloc-macros.h elf32-target.h
elf64-ia64.lo: elf64-ia64.c $(INCDIR)/filenames.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/opcode/ia64.h $(INCDIR)/elf/ia64.h \
  $(INCDIR)/elf/reloc-macros.h elf64-target.h
peigen.lo: peigen.c $(INCDIR)/filenames.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/i386.h $(INCDIR)/coff/pe.h libcoff.h \
  $(INCDIR)/bfdlink.h libpei.h
pepigen.lo: pepigen.c $(INCDIR)/filenames.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/ia64.h $(INCDIR)/coff/pe.h libcoff.h \
  $(INCDIR)/bfdlink.h libpei.h
@


1.43
log
@Generalize DWARF2 and COFF support.
@
text
@d591 5
a595 4
	$(mkinstalldirs) $(includedir)
	$(INSTALL_DATA) $(BFD_H) $(includedir)/bfd.h
	$(INSTALL_DATA) $(INCDIR)/ansidecl.h $(includedir)/ansidecl.h
	$(INSTALL_DATA) $(INCDIR)/bfdlink.h $(includedir)/bfdlink.h
@


1.42
log
@Add support for x86_64-*-linux-gnu* target
@
text
@d32 2
a33 1
	srec.lo binary.lo tekhex.lo ihex.lo stabs.lo stab-syms.lo
d39 2
a40 1
	srec.c binary.c tekhex.c ihex.c stabs.c stab-syms.c
a171 1
	dwarf2.lo \
a309 1
	dwarf2.c \
@


1.41
log
@ia64-hpux patches from Steve Ellcey.
	* archures.c: (bfd_mach_ia64_elf64, bfd_mach_ia64_elf32) Add defines
	to differentiate elf32 and elf64 on ia64.
	* bfd-in2.h: Regenerate.
	* config.bfd: Add target for "ia64*-*-hpux*".
	* configure.in: Add bfd_elf32_ia64_big_vec to selvecs switch.
	* configure: Regenerate.
	* cpu-ia64.c (bfd_ia64_elf32_arch) Add elf32 arch info structure.
	* targets.c: Add bfd_target bfd_elf32_ia64_big_vec.
	* Makefile.am: Make elf32-ia64.c and elf64-ia64.c derived objects
	from elfxx-ia64.c.  Add depenency rules for making elf32-ia64.lo.
	* Makefile.in: Regnerate.
	* elf64-ia64.c: Deleted
	* elfxx-ia64.c: New file, paramaterized version of elf64-ia64.c.
@
text
@d414 1
d431 1
d1258 4
@


1.40
log
@* som.c: Include alloca-conf.h
@
text
@d189 1
d569 10
d978 4
@


1.39
log
@* config.bfd (sh-*-linux*): Added.
* configure.in (bfd_elf32_shlin_vec, bfd_elf32_shblin_vec): New.
* targets.c: Declare them.
* elf32-sh-lin.c: New file.
* Makefile.am: Compile it.
* elf32-sh.c: Don't override defines from elf32-sh-lin.c.
* configure, Makefile.in: Rebuilt.
@
text
@d961 2
a962 1
  $(INCDIR)/bfdlink.h elf32-target.h
d1015 4
a1018 5
# Keep this one in sync with the one above
elf32-sh-lin.lo: elf32-sh.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/elf/sh.h $(INCDIR)/elf/reloc-macros.h \
  elf32-target.h elf32-sh-lin.c
d1049 1
a1049 1
som.lo: som.c $(INCDIR)/filenames.h
@


1.38
log
@	* Makefile.am (ALL_MACHINES): Add cpu-cris.lo.
	(ALL_MACHINES_CFILES): Add cpu-cris.c.
	(BFD32_BACKENDS): Add aout-cris.lo and elf32-cris.lo.
	(BFD32_BACKENDS_CFILES): Add aout-cris.c and elf32-cris.c.
	(cpu-cris.lo, aout-cris.lo, elf32-cris.lo): New rules.
	* Makefile.in: Rebuild.
	* aclocal.m4: Rebuild.
	* aoutx.h (NAME(aout,machine_type)): Add case for bfd_arch_cris.
	* archures.c (enum bfd_architecture): Add bfd_arch_cris.
	(bfd_cris_arch): Declare.
	(bfd_archures_list): Add bfd_cris_arch.
	* bfd-in2.h: Rebuild.
	* config.bfd: (cris-*-*): New target.
	* configure.in (bfd_elf32_cris_vec, cris_aout_vec): New vectors.
	* configure: Rebuild.
	* elf.c (prep_headers): Add bfd_arch_cris.
	* libbfd.h: Rebuild.
	* libaout.h (enum machine_type): Add M_CRIS.
	* reloc.c: Add CRIS relocations.
	* targets.c (bfd_target bfd_elf32_cris_vec, cris_aout_vec):
	Declare.
	(bfd_target_vect): Add bfd_elf32_cris_vec and cris_aout_vec.
	* cpu-cris.c, aout-cris.c, elf32-cris.c: New files.
	* po/POTFILES.in, po/bfd.pot: Regenerate.
@
text
@d201 1
d339 1
d1014 5
@


1.37
log
@Restore hppa-elf32 to working order.
@
text
@d48 1
d90 1
d131 1
d179 1
d268 1
d316 1
d729 1
d772 4
d926 4
@


1.36
log
@Fix 2000-06-22.  grep after running dep.sed
@
text
@d473 1
a473 1
	hppa_stubs.h libaout.h libbfd.h libcoff.h libecoff.h libhppa.h \
d934 1
a934 1
  libhppa.h elf32-hppa.h elf-hppa.h hppa_stubs.h elf32-target.h
@


1.35
log
@Ensure /usr/include and the like stay out of dependencies.
@
text
@d579 3
a581 1
	if grep ' /' DEP1 > /dev/null 2> /dev/null; then \
d584 1
a584 2
	  sed -f dep.sed < DEP1 > $@@; \
	  echo '# IF YOU PUT ANYTHING HERE IT WILL GO AWAY' >> $@@; \
d674 1
a674 1
CLEANFILES = bfd.h dep.sed stmp-bfd-h DEP DEP1 DEP2 libbfd.a stamp-lib \
@


1.34
log
@2000-06-20  H.J. Lu  <hjl@@gnu.org>

	* Makefile.am: Rebuild dependency.
	* Makefile.in: Rebuild.
@
text
@d579 6
a584 2
	sed -f dep.sed < DEP1 > $@@
	echo '# IF YOU PUT ANYTHING HERE IT WILL GO AWAY' >> $@@
@


1.33
log
@Applied Stephane Carrez <Stephane.Carrez@@worldnet.fr> patches to add support
for m68hc11 and m68hc12 processors.
@
text
@a730 1
cpu-m68k.lo: cpu-m68k.c $(INCDIR)/filenames.h
d733 1
a925 4
elf32-m68hc11.lo: elf32-m68hc11.c $(INCDIR)/bfdlink.h elf-bfd.h \
  $(INCDIR)/elf/m68hc11.h elf32-target.h
elf32-m68hc12.lo: elf32-m68hc12.c $(INCDIR)/bfdlink.h elf-bfd.h \
  $(INCDIR)/elf/m68hc11.h elf32-target.h
d952 8
@


1.32
log
@Get rid of the -1 dummy valued enum in START_RELOC_NUMBERS.
Remove duplicate reloc enums in elf32-d[13]0v.c
Remove EMPTY_HOWTOs in elf32-i386.c
@
text
@d60 2
d101 2
d186 2
d322 2
d732 2
d926 4
@


1.31
log
@Update dependencies.
@
text
@d903 2
a904 1
  $(INCDIR)/bfdlink.h elf32-target.h
d907 2
a908 1
  $(INCDIR)/bfdlink.h elf32-target.h
@


1.30
log
@	* xcoff.h: Rename to xcoff-target.h
	* Makefile.am: Change all instances of xcoff.h to xcoff-target.h
	* coff-rs6000.c: Ditto.
	* coff64-rs6000.c: Ditto.
	* coff-pmac.c: Ditto.
	* Makefile.in: Regenerate.
@
text
@d673 29
a701 17
archive.lo: archive.c $(INCDIR)/aout/ar.h $(INCDIR)/aout/ranlib.h
archures.lo: archures.c
bfd.lo: bfd.c $(INCDIR)/libiberty.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/sym.h libcoff.h \
  libecoff.h $(INCDIR)/coff/ecoff.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h
cache.lo: cache.c
coffgen.lo: coffgen.c $(INCDIR)/coff/internal.h libcoff.h \
  $(INCDIR)/bfdlink.h
corefile.lo: corefile.c
format.lo: format.c
init.lo: init.c
libbfd.lo: libbfd.c
opncls.lo: opncls.c $(INCDIR)/objalloc.h
reloc.lo: reloc.c $(INCDIR)/bfdlink.h
section.lo: section.c $(INCDIR)/bfdlink.h
syms.lo: syms.c $(INCDIR)/bfdlink.h $(INCDIR)/aout/stab_gnu.h \
a702 8
targets.lo: targets.c $(INCDIR)/fnmatch.h targmatch.h
hash.lo: hash.c $(INCDIR)/objalloc.h
linker.lo: linker.c $(INCDIR)/bfdlink.h genlink.h
srec.lo: srec.c $(INCDIR)/libiberty.h
binary.lo: binary.c
tekhex.lo: tekhex.c $(INCDIR)/libiberty.h
ihex.lo: ihex.c $(INCDIR)/libiberty.h
stabs.lo: stabs.c $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def
d705 39
a743 39
cpu-a29k.lo: cpu-a29k.c
cpu-alpha.lo: cpu-alpha.c
cpu-arc.lo: cpu-arc.c
cpu-arm.lo: cpu-arm.c
cpu-avr.lo: cpu-avr.c
cpu-d10v.lo: cpu-d10v.c
cpu-d30v.lo: cpu-d30v.c
cpu-fr30.lo: cpu-fr30.c
cpu-h8300.lo: cpu-h8300.c
cpu-h8500.lo: cpu-h8500.c
cpu-hppa.lo: cpu-hppa.c
cpu-ia64.lo: cpu-ia64.c cpu-ia64-opc.c $(srcdir)/../opcodes/ia64-opc.h \
  $(INCDIR)/opcode/ia64.h
cpu-i370.lo: cpu-i370.c
cpu-i386.lo: cpu-i386.c
cpu-i860.lo: cpu-i860.c
cpu-i960.lo: cpu-i960.c
cpu-m32r.lo: cpu-m32r.c
cpu-m68k.lo: cpu-m68k.c
cpu-m88k.lo: cpu-m88k.c
cpu-m10200.lo: cpu-m10200.c
cpu-m10300.lo: cpu-m10300.c
cpu-mcore.lo: cpu-mcore.c
cpu-mips.lo: cpu-mips.c
cpu-ns32k.lo: cpu-ns32k.c ns32k.h
cpu-pj.lo: cpu-pj.c
cpu-powerpc.lo: cpu-powerpc.c
cpu-rs6000.lo: cpu-rs6000.c
cpu-sh.lo: cpu-sh.c
cpu-sparc.lo: cpu-sparc.c
cpu-tic30.lo: cpu-tic30.c
cpu-tic54x.lo: cpu-tic54x.c
cpu-tic80.lo: cpu-tic80.c
cpu-v850.lo: cpu-v850.c
cpu-vax.lo: cpu-vax.c
cpu-we32k.lo: cpu-we32k.c
cpu-w65.lo: cpu-w65.c
cpu-z8k.lo: cpu-z8k.c
aout-adobe.lo: aout-adobe.c $(INCDIR)/aout/adobe.h \
d746 4
a749 3
aout-arm.lo: aout-arm.c libaout.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/aout/aout64.h aoutx.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h aout-target.h
d753 8
a760 1
  libaout.h aoutf1.h $(INCDIR)/aout/sun4.h $(INCDIR)/aout/aout64.h \
d763 2
a764 11
aout-tic30.lo: aout-tic30.c libaout.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/ar.h aoutx.h
aout0.lo: aout0.c aoutf1.h $(INCDIR)/aout/sun4.h libaout.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h aout-target.h
aout32.lo: aout32.c aoutx.h $(INCDIR)/bfdlink.h libaout.h \
  $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/ar.h
armnetbsd.lo: armnetbsd.c netbsd.h libaout.h $(INCDIR)/bfdlink.h \
  aout-target.h $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
d766 16
a781 3
bout.lo: bout.c $(INCDIR)/bfdlink.h genlink.h $(INCDIR)/bout.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def libaout.h
cf-i386lynx.lo: cf-i386lynx.c coff-i386.c $(INCDIR)/coff/i386.h \
d784 4
a787 1
cf-m68klynx.lo: cf-m68klynx.c coff-m68k.c $(INCDIR)/coff/m68k.h \
d790 10
a799 1
cf-sparclynx.lo: cf-sparclynx.c coff-sparc.c $(INCDIR)/coff/sparc.h \
d802 1
a802 3
coff-a29k.lo: coff-a29k.c $(INCDIR)/coff/a29k.h $(INCDIR)/coff/internal.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h coffswap.h
coff-apollo.lo: coff-apollo.c $(INCDIR)/coff/apollo.h \
d805 5
a809 4
coff-arm.lo: coff-arm.c $(INCDIR)/coff/arm.h $(INCDIR)/coff/internal.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h coffswap.h
coff-aux.lo: coff-aux.c $(INCDIR)/coff/aux-coff.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/m68k.h coff-m68k.c libcoff.h $(INCDIR)/bfdlink.h \
d811 2
a812 2
coff-h8300.lo: coff-h8300.c $(INCDIR)/bfdlink.h genlink.h \
  $(INCDIR)/coff/h8300.h $(INCDIR)/coff/internal.h libcoff.h \
d814 1
a814 7
coff-h8500.lo: coff-h8500.c $(INCDIR)/bfdlink.h $(INCDIR)/coff/h8500.h \
  $(INCDIR)/coff/internal.h libcoff.h coffcode.h coffswap.h
coff-i386.lo: coff-i386.c $(INCDIR)/coff/i386.h $(INCDIR)/coff/internal.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h coffswap.h
coff-i860.lo: coff-i860.c $(INCDIR)/coff/i860.h $(INCDIR)/coff/internal.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h coffswap.h
coff-go32.lo: coff-go32.c coff-i386.c $(INCDIR)/coff/i386.h \
d817 5
a821 11
coff-i960.lo: coff-i960.c $(INCDIR)/coff/i960.h $(INCDIR)/coff/internal.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h coffswap.h
coff-m68k.lo: coff-m68k.c $(INCDIR)/coff/m68k.h $(INCDIR)/coff/internal.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h coffswap.h
coff-m88k.lo: coff-m88k.c $(INCDIR)/coff/m88k.h $(INCDIR)/coff/internal.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h coffswap.h
coff-mips.lo: coff-mips.c $(INCDIR)/bfdlink.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/sym.h $(INCDIR)/coff/symconst.h $(INCDIR)/coff/ecoff.h \
  $(INCDIR)/coff/mips.h libcoff.h libecoff.h coffswap.h \
  ecoffswap.h
coff-pmac.lo: coff-pmac.c $(INCDIR)/coff/internal.h \
d824 7
a830 6
coff-rs6000.lo: coff-rs6000.c $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/rs6000.h libcoff.h $(INCDIR)/bfdlink.h \
  xcoff-target.h coffcode.h coffswap.h
coff-sh.lo: coff-sh.c $(INCDIR)/bfdlink.h $(INCDIR)/coff/sh.h \
  $(INCDIR)/coff/internal.h libcoff.h coffcode.h coffswap.h
coff-sparc.lo: coff-sparc.c $(INCDIR)/coff/sparc.h \
d833 2
a834 2
coff-stgo32.lo: coff-stgo32.c coff-i386.c $(INCDIR)/coff/i386.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/go32exe.h \
d837 5
a841 2
coff-svm68k.lo: coff-svm68k.c coff-m68k.c $(INCDIR)/coff/m68k.h \
  $(INCDIR)/coff/internal.h libcoff.h $(INCDIR)/bfdlink.h \
d843 2
a844 1
coff-tic30.lo: coff-tic30.c $(INCDIR)/bfdlink.h $(INCDIR)/coff/tic30.h \
d846 2
a847 2
coff-tic54x.lo: coff-tic54x.c $(INCDIR)/bfdlink.h $(INCDIR)/coff/tic54x.h \
  $(INCDIR)/coff/ti.h $(INCDIR)/coff/internal.h libcoff.h \
d849 4
a852 3
coff-tic80.lo: coff-tic80.c $(INCDIR)/bfdlink.h $(INCDIR)/coff/tic80.h \
  $(INCDIR)/coff/internal.h libcoff.h coffcode.h coffswap.h
coff-u68k.lo: coff-u68k.c coff-m68k.c $(INCDIR)/coff/m68k.h \
d855 5
a859 2
coff-we32k.lo: coff-we32k.c $(INCDIR)/coff/we32k.h \
  $(INCDIR)/coff/internal.h libcoff.h $(INCDIR)/bfdlink.h \
d861 6
a866 30
coff-w65.lo: coff-w65.c $(INCDIR)/bfdlink.h $(INCDIR)/coff/w65.h \
  $(INCDIR)/coff/internal.h libcoff.h coffcode.h coffswap.h
coff-z8k.lo: coff-z8k.c $(INCDIR)/bfdlink.h $(INCDIR)/coff/z8k.h \
  $(INCDIR)/coff/internal.h libcoff.h coffcode.h coffswap.h
cofflink.lo: cofflink.c $(INCDIR)/bfdlink.h $(INCDIR)/coff/internal.h \
  libcoff.h
dwarf1.lo: dwarf1.c $(INCDIR)/libiberty.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/elf/dwarf.h
dwarf2.lo: dwarf2.c $(INCDIR)/libiberty.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/elf/dwarf2.h
ecoff.lo: ecoff.c $(INCDIR)/bfdlink.h $(INCDIR)/aout/ar.h \
  $(INCDIR)/aout/ranlib.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  libaout.h $(INCDIR)/aout/aout64.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/sym.h $(INCDIR)/coff/symconst.h $(INCDIR)/coff/ecoff.h \
  libcoff.h libecoff.h
ecofflink.lo: ecofflink.c $(INCDIR)/bfdlink.h $(INCDIR)/objalloc.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/sym.h $(INCDIR)/coff/symconst.h $(INCDIR)/coff/ecoff.h \
  libcoff.h libecoff.h
efi-app-ia32.lo: efi-app-ia32.c coff-i386.c $(INCDIR)/coff/i386.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h libcoff.h \
  $(INCDIR)/bfdlink.h coffcode.h peicode.h libpei.h
elf.lo: elf.c $(INCDIR)/bfdlink.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h
elf32-arc.lo: elf32-arc.c elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/arc.h $(INCDIR)/elf/reloc-macros.h elf32-target.h
elfarm-oabi.lo: elfarm-oabi.c $(INCDIR)/elf/arm.h $(INCDIR)/elf/reloc-macros.h \
d868 15
a882 3
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h elf32-arm.h \
  elf32-target.h
elfarm-nabi.lo: elfarm-nabi.c $(INCDIR)/elf/arm.h $(INCDIR)/elf/reloc-macros.h \
d884 4
a887 1
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h elf32-arm.h \
d889 2
a890 1
elf32-avr.lo: elf32-avr.c elf-bfd.h $(INCDIR)/elf/common.h \
d892 3
a894 2
  $(INCDIR)/elf/avr.h $(INCDIR)/elf/reloc-macros.h elf32-target.h
elf32-d10v.lo: elf32-d10v.c elf-bfd.h $(INCDIR)/elf/common.h \
d896 4
d901 9
a909 2
elf32-d30v.lo: elf32-d30v.c elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
d911 13
a923 5
elf32-fr30.lo: elf32-fr30.c elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/fr30.h $(INCDIR)/elf/reloc-macros.h elf32-target.h
elf32-gen.lo: elf32-gen.c elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
d925 1
a925 5
elf32-hppa.lo: elf32-hppa.c elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/hppa.h $(INCDIR)/elf/reloc-macros.h libhppa.h \
  elf32-hppa.h elf-hppa.h hppa_stubs.h elf32-target.h
elf32-i370.lo: elf32-i370.c $(INCDIR)/bfdlink.h elf-bfd.h \
d927 2
a928 2
  $(INCDIR)/elf/i370.h elf32-target.h
elf32-i386.lo: elf32-i386.c $(INCDIR)/bfdlink.h elf-bfd.h \
d930 1
a930 3
  $(INCDIR)/elf/i386.h $(INCDIR)/elf/reloc-macros.h elf32-target.h
elf32-i860.lo: elf32-i860.c elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
d932 1
a932 7
elf32-i960.lo: elf32-i960.c elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/i960.h $(INCDIR)/elf/reloc-macros.h elf32-target.h
elf32-m32r.lo: elf32-m32r.c elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/m32r.h $(INCDIR)/elf/reloc-macros.h elf32-target.h
elf32-m68k.lo: elf32-m68k.c $(INCDIR)/bfdlink.h elf-bfd.h \
d934 1
a934 3
  $(INCDIR)/elf/m68k.h $(INCDIR)/elf/reloc-macros.h elf32-target.h
elf32-m88k.lo: elf32-m88k.c elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
d936 3
a938 2
elf-m10200.lo: elf-m10200.c elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
d940 7
a946 5
elf-m10300.lo: elf-m10300.c elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/mn10300.h $(INCDIR)/elf/reloc-macros.h \
  elf32-target.h
elf32-mcore.lo: elf32-mcore.c $(INCDIR)/bfdlink.h elf-bfd.h \
d948 1
a948 1
  $(INCDIR)/elf/mcore.h $(INCDIR)/elf/reloc-macros.h \
d950 6
a955 2
elf32-mips.lo: elf32-mips.c $(INCDIR)/bfdlink.h genlink.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
d960 20
a979 12
elf32-pj.lo: elf32-pj.c $(INCDIR)/bfdlink.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/pj.h $(INCDIR)/elf/reloc-macros.h elf32-target.h
elf32-ppc.lo: elf32-ppc.c $(INCDIR)/bfdlink.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/ppc.h $(INCDIR)/elf/reloc-macros.h elf32-target.h
elf32-sh.lo: elf32-sh.c $(INCDIR)/bfdlink.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/sh.h $(INCDIR)/elf/reloc-macros.h elf32-target.h
elf32-sparc.lo: elf32-sparc.c $(INCDIR)/bfdlink.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/sparc.h $(INCDIR)/elf/reloc-macros.h \
d981 17
a997 18
elf32-v850.lo: elf32-v850.c $(INCDIR)/bfdlink.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/v850.h $(INCDIR)/elf/reloc-macros.h elf32-target.h
elf32.lo: elf32.c elfcode.h $(INCDIR)/bfdlink.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  elfcore.h elflink.h
elflink.lo: elflink.c $(INCDIR)/bfdlink.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h
epoc-pe-arm.lo: epoc-pe-arm.c pe-arm.c coff-arm.c $(INCDIR)/coff/arm.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h libcoff.h \
  $(INCDIR)/bfdlink.h coffcode.h peicode.h libpei.h
epoc-pei-arm.lo: epoc-pei-arm.c pei-arm.c coff-arm.c \
  $(INCDIR)/coff/arm.h $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h peicode.h \
  libpei.h
hp300bsd.lo: hp300bsd.c libaout.h $(INCDIR)/bfdlink.h \
  aout-target.h $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
d999 6
a1004 9
  aoutx.h $(INCDIR)/bfdlink.h libaout.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h \
  aout-target.h
som.lo: som.c
i386aout.lo: i386aout.c $(INCDIR)/aout/aout64.h libaout.h \
  $(INCDIR)/bfdlink.h aout-target.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
i386bsd.lo: i386bsd.c libaout.h $(INCDIR)/bfdlink.h \
  aout-target.h $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
d1006 3
d1010 18
a1027 1
  $(INCDIR)/bfdlink.h libaout.h $(INCDIR)/aout/aout64.h \
d1029 21
a1049 21
  aout-target.h
i386freebsd.lo: i386freebsd.c freebsd.h libaout.h $(INCDIR)/bfdlink.h \
  aout-target.h $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
i386linux.lo: i386linux.c $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h libaout.h \
  $(INCDIR)/bfdlink.h aout-target.h
i386lynx.lo: i386lynx.c libaout.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/aout/aout64.h aout-target.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
i386msdos.lo: i386msdos.c libaout.h $(INCDIR)/bfdlink.h
i386netbsd.lo: i386netbsd.c netbsd.h libaout.h $(INCDIR)/bfdlink.h \
  aout-target.h $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
i386mach3.lo: i386mach3.c $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h libaout.h \
  $(INCDIR)/bfdlink.h aout-target.h
i386os9k.lo: i386os9k.c $(INCDIR)/bfdlink.h libaout.h \
  $(INCDIR)/os9k.h
ieee.lo: ieee.c $(INCDIR)/ieee.h libieee.h
m68k4knetbsd.lo: m68k4knetbsd.c netbsd.h libaout.h \
d1052 6
a1057 21
m68klinux.lo: m68klinux.c $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h libaout.h \
  $(INCDIR)/bfdlink.h aout-target.h
m68klynx.lo: m68klynx.c libaout.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/aout/aout64.h aout-target.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
m68knetbsd.lo: m68knetbsd.c netbsd.h libaout.h $(INCDIR)/bfdlink.h \
  aout-target.h $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
m88kmach3.lo: m88kmach3.c libaout.h $(INCDIR)/bfdlink.h \
  aout-target.h $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
mipsbsd.lo: mipsbsd.c libaout.h $(INCDIR)/bfdlink.h \
  aout-target.h $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
newsos3.lo: newsos3.c $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h libaout.h \
  $(INCDIR)/bfdlink.h aout-target.h
nlm.lo: nlm.c libnlm.h $(INCDIR)/nlm/common.h $(INCDIR)/nlm/internal.h \
  $(INCDIR)/nlm/external.h
nlm32-i386.lo: nlm32-i386.c $(INCDIR)/nlm/i386-ext.h \
d1060 5
a1064 1
nlm32-sparc.lo: nlm32-sparc.c $(INCDIR)/nlm/sparc32-ext.h \
d1067 40
a1106 43
nlm32-ppc.lo: nlm32-ppc.c $(INCDIR)/nlm/ppc-ext.h libnlm.h \
  $(INCDIR)/nlm/common.h $(INCDIR)/nlm/internal.h $(INCDIR)/nlm/external.h \
  nlmswap.h nlm-target.h
nlm32.lo: nlm32.c nlmcode.h libnlm.h $(INCDIR)/nlm/common.h \
  $(INCDIR)/nlm/internal.h $(INCDIR)/nlm/external.h
ns32knetbsd.lo: ns32knetbsd.c netbsd.h libaout.h $(INCDIR)/bfdlink.h \
  aout-target.h $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
oasys.lo: oasys.c $(INCDIR)/oasys.h liboasys.h
pc532-mach.lo: pc532-mach.c libaout.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/aout/aout64.h aout-target.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
pe-arm.lo: pe-arm.c coff-arm.c $(INCDIR)/coff/arm.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h libcoff.h \
  $(INCDIR)/bfdlink.h coffcode.h peicode.h libpei.h
pei-arm.lo: pei-arm.c coff-arm.c $(INCDIR)/coff/arm.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h libcoff.h \
  $(INCDIR)/bfdlink.h coffcode.h peicode.h libpei.h
pe-i386.lo: pe-i386.c coff-i386.c $(INCDIR)/coff/i386.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h libcoff.h \
  $(INCDIR)/bfdlink.h coffcode.h peicode.h libpei.h
pei-i386.lo: pei-i386.c coff-i386.c $(INCDIR)/coff/i386.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h libcoff.h \
  $(INCDIR)/bfdlink.h coffcode.h peicode.h libpei.h
pe-mcore.lo: pe-mcore.c coff-mcore.c $(INCDIR)/coff/mcore.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h libcoff.h \
  $(INCDIR)/bfdlink.h coffcode.h peicode.h libpei.h
pei-mcore.lo: pei-mcore.c coff-mcore.c $(INCDIR)/coff/mcore.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h libcoff.h \
  $(INCDIR)/bfdlink.h coffcode.h peicode.h libpei.h
pe-ppc.lo: pe-ppc.c coff-ppc.c $(INCDIR)/coff/powerpc.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h libcoff.h \
  $(INCDIR)/bfdlink.h coffcode.h peicode.h libpei.h
pei-ppc.lo: pei-ppc.c coff-ppc.c $(INCDIR)/coff/powerpc.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h libcoff.h \
  $(INCDIR)/bfdlink.h coffcode.h peicode.h libpei.h
pe-sh.lo: pe-sh.c coff-sh.c $(INCDIR)/bfdlink.h $(INCDIR)/coff/sh.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h libcoff.h \
  coffcode.h peicode.h libpei.h
pei-sh.lo: pei-sh.c coff-sh.c $(INCDIR)/bfdlink.h $(INCDIR)/coff/sh.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h libcoff.h \
  coffcode.h peicode.h libpei.h
pe-mips.lo: pe-mips.c $(INCDIR)/coff/mipspe.h $(INCDIR)/coff/internal.h \
d1109 8
a1116 1
pei-mips.lo: pei-mips.c pe-mips.c $(INCDIR)/coff/mipspe.h \
d1119 14
a1132 9
peigen.lo: peigen.c $(INCDIR)/coff/internal.h $(INCDIR)/coff/i386.h \
  $(INCDIR)/coff/pe.h libcoff.h $(INCDIR)/bfdlink.h libpei.h
ppcboot.lo: ppcboot.c
reloc16.lo: reloc16.c $(INCDIR)/bfdlink.h genlink.h \
  $(INCDIR)/coff/internal.h libcoff.h
riscix.lo: riscix.c libaout.h $(INCDIR)/bfdlink.h $(INCDIR)/aout/aout64.h \
  aout-target.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/ar.h
sparclinux.lo: sparclinux.c $(INCDIR)/aout/aout64.h \
d1135 7
a1141 6
sparclynx.lo: sparclynx.c $(INCDIR)/aout/sun4.h libaout.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h aout-target.h
sparcnetbsd.lo: sparcnetbsd.c netbsd.h libaout.h $(INCDIR)/bfdlink.h \
  aout-target.h $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
d1143 21
a1163 4
  $(INCDIR)/aout/sun4.h $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h aout-target.h
vaxnetbsd.lo: vaxnetbsd.c netbsd.h libaout.h $(INCDIR)/bfdlink.h \
  aout-target.h $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
d1165 9
a1173 9
versados.lo: versados.c $(INCDIR)/libiberty.h
vms.lo: vms.c $(INCDIR)/bfdlink.h vms.h
vms-gsd.lo: vms-gsd.c $(INCDIR)/bfdlink.h vms.h
vms-hdr.lo: vms-hdr.c $(INCDIR)/bfdlink.h vms.h
vms-misc.lo: vms-misc.c $(INCDIR)/bfdlink.h vms.h
vms-tir.lo: vms-tir.c $(INCDIR)/bfdlink.h vms.h
xcofflink.lo: xcofflink.c $(INCDIR)/bfdlink.h $(INCDIR)/coff/internal.h \
  libcoff.h
aout64.lo: aout64.c aoutx.h $(INCDIR)/bfdlink.h libaout.h \
d1175 9
a1183 2
  $(INCDIR)/aout/ar.h
coff-alpha.lo: coff-alpha.c $(INCDIR)/bfdlink.h $(INCDIR)/coff/internal.h \
d1186 21
a1206 36
  libecoff.h coffswap.h ecoffswap.h
coff64-rs6000.lo: coff64-rs6000.c $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/rs6k64.h libcoff.h $(INCDIR)/bfdlink.h \
  xcoff-target.h coffcode.h coffswap.h
demo64.lo: demo64.c aoutf1.h $(INCDIR)/aout/sun4.h \
  libaout.h $(INCDIR)/bfdlink.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h \
  aout-target.h
efi-app-ia64.lo: efi-app-ia64.c coff-ia64.c $(INCDIR)/coff/ia64.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h libcoff.h \
  $(INCDIR)/bfdlink.h coffcode.h peicode.h libpei.h
elf64-alpha.lo: elf64-alpha.c elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/alpha.h $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/sym.h $(INCDIR)/coff/symconst.h \
  $(INCDIR)/coff/ecoff.h $(INCDIR)/coff/alpha.h $(INCDIR)/aout/ar.h \
  libcoff.h libecoff.h ecoffswap.h elf64-target.h
elf64-hppa.lo: elf64-hppa.c elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/hppa.h $(INCDIR)/elf/reloc-macros.h libhppa.h \
  elf64-hppa.h elf-hppa.h elf64-target.h
elf64-ia64.lo: elf64-ia64.c elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/opcode/ia64.h $(INCDIR)/elf/ia64.h $(INCDIR)/elf/reloc-macros.h \
  elf64-target.h
elf64-gen.lo: elf64-gen.c elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
  elf64-target.h
elf64-mips.lo: elf64-mips.c $(INCDIR)/aout/ar.h $(INCDIR)/bfdlink.h \
  genlink.h elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/elf/mips.h $(INCDIR)/elf/reloc-macros.h \
  $(INCDIR)/coff/sym.h $(INCDIR)/coff/symconst.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/ecoff.h $(INCDIR)/coff/alpha.h ecoffswap.h \
  elf64-target.h
elf64-sparc.lo: elf64-sparc.c elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
d1209 21
a1229 17
elf64.lo: elf64.c elfcode.h $(INCDIR)/bfdlink.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  elfcore.h elflink.h
nlm32-alpha.lo: nlm32-alpha.c $(INCDIR)/nlm/alpha-ext.h \
  libnlm.h $(INCDIR)/nlm/common.h $(INCDIR)/nlm/internal.h \
  $(INCDIR)/nlm/external.h nlmswap.h nlm-target.h
nlm64.lo: nlm64.c nlmcode.h libnlm.h $(INCDIR)/nlm/common.h \
  $(INCDIR)/nlm/internal.h $(INCDIR)/nlm/external.h
aix386-core.lo: aix386-core.c $(INCDIR)/coff/i386.h \
  $(INCDIR)/coff/internal.h libcoff.h $(INCDIR)/bfdlink.h
hpux-core.lo: hpux-core.c
irix-core.lo: irix-core.c
lynx-core.lo: lynx-core.c
osf-core.lo: osf-core.c
sco5-core.lo: sco5-core.c libaout.h $(INCDIR)/bfdlink.h
trad-core.lo: trad-core.c libaout.h $(INCDIR)/bfdlink.h
cisco-core.lo: cisco-core.c
@


1.29
log
@Restore elf32-hppa target vec.
@
text
@d467 1
a467 1
	nlmcode.h nlmswap.h ns32k.h peicode.h som.h vms.h xcoff.h
d808 1
a808 1
  xcoff.h coffcode.h coffswap.h
d811 1
a811 1
  xcoff.h coffcode.h coffswap.h
d1113 1
a1113 1
  xcoff.h coffcode.h coffswap.h
@


1.28
log
@Fix IA-64 --enable-targets=all bug reports.
	* Makefile.am (BFD32_BACKENDS): Add efi-app-ia32.lo.
	(BFD32_BACKENDS_CFILES): Add efi-app-ia32.c.
	(BFD64_BACKENDS): Delete coff-ia64.lo.  Add efi-app-ia64.lo.
	(BFD64_BACKENDS_CFILES): Delete coff-ia64.c.  Add efi-app-ia64.c.
	* Makefile.in: Rebuild.
@
text
@d176 1
d858 3
a1110 3
coff-ia64.lo: coff-ia64.c $(INCDIR)/coff/ia64.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/pe.h libcoff.h $(INCDIR)/bfdlink.h coffcode.h \
  coffswap.h
d1118 3
@


1.27
log
@Assorted code cleanup and fixes for hppa.  Re-enable elf32-hppa as
it now compiles even if it doesn't work too well.
@
text
@d166 1
d298 1
a392 1
	coff-ia64.lo \
d395 1
a408 1
	coff-ia64.c \
d411 1
@


1.26
log
@	* Makefile.am (BFD64_BACKENDS, BFD64_BACKENDS_CFILES): Add
	coffdu-rs6000.{lo,c}.
	(coff-pmac.lo, coff-rs6000.lo, coff64-rs6000.lo): Add dependency
	on xcoff.h
	* Makefile.in: Regenerate.
	* xcoff.h: New file.
	* coff-pmac.c: Use xcoff.h instead of coff-rs6000.c.
	* coff-rs6000.c: Move all declarations and defines that are
	common to the xcoff backends into xcoff.h
	* coff64-rs6000.c: Ditto,
@
text
@d306 1
d459 6
a464 6
	aout-target.h aoutf1.h aoutx.h coffcode.h coffswap.h \
	ecoffswap.h elf32-arm.h elfcode.h elfcore.h \
	elflink.h freebsd.h genlink.h go32stub.h libaout.h \
	libbfd.h libcoff.h libecoff.h elf-bfd.h libhppa.h libieee.h \
	libnlm.h liboasys.h libpei.h netbsd.h nlm-target.h nlmcode.h \
	nlmswap.h ns32k.h peicode.h som.h vms.h
a665 17
elf64-hppa.lo: elf64-hppa.c elf64-hppa.h elf-bfd.h  \
  $(INCDIR)/elf/hppa.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/reloc-macros.h \
  elf64-target.h
cpu-ia64.lo: cpu-ia64.c cpu-ia64-opc.c $(srcdir)/../opcodes/ia64-opc.h
elf64-ia64.lo: elf64-ia64.c elf-bfd.h $(INCDIR)/opcode/ia64.h \
  $(INCDIR)/elf/ia64.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h $(INCDIR)/elf/reloc-macros.h \
  elf64-target.h
elfarm-oabi.lo: elfarm-oabi.c elf32-arm.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/arm.h $(INCDIR)/elf/reloc-macros.h elf32-target.h

elfarm-nabi.lo: elfarm-nabi.c elf32-arm.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/arm.h $(INCDIR)/elf/reloc-macros.h elf32-target.h

d709 2
d803 1
a803 1
coff-pmac.lo: coff-pmac.c coff-rs6000.c xcoff.h $(INCDIR)/coff/internal.h \
d805 2
a806 2
  coffcode.h coffswap.h
coff-rs6000.lo: coff-rs6000.c xcoff.h $(INCDIR)/coff/internal.h \
d808 1
a808 5
  coffcode.h coffswap.h
coff64-rs6000.lo: coff64-rs6000.c coff-rs6000.c xcoff.h \
  $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/rs6000.h libcoff.h $(INCDIR)/bfdlink.h \
  coffcode.h coffswap.h
d883 4
d1106 5
a1110 1
  $(INCDIR)/coff/pe.h libcoff.h $(INCDIR)/bfdlink.h coffcode.h coffswap.h
d1121 8
@


1.25
log
@	Add XCOFF64 support.

	bfd:
	* Makefile.am (coff64-rs6000.lo): New rule.
	* Makefile.in: Regenerate.
	* coff-rs6000.c (xcoff_mkobject, xcoff_copy_private_bfd_data,
	xcoff_is_local_label_name, xcoff_rtype2howto,
	xcoff_reloc_type_lookup, xcoff_slurp_armap, xcoff_archive_p,
	xcoff_read_ar_hdr, xcoff_openr_next_archived_file, xcoff_write_armap,
	xcoff_write_archive_contents): No longer static, and prefix with _bfd_.
	(NO_COFF_SYMBOLS): Define.
	(xcoff64_swap_sym_in, xcoff64_swap_sym_out, xcoff64_swap_aux_in,
	xcoff64_swap_aux_out): New functions; handle xcoff symbol tables
	internally.
	(MINUS_ONE): New macro.
	(xcoff_howto_tabl, xcoff_reloc_type_lookup): Add 64 bit POS
	relocation.
	(coff_SWAP_sym_in, coff_SWAP_sym_out, coff_SWAP_aux_in,
	coff_SWAP_aux_out): Map to the new functions.
	* coff64-rs6000.c: New file.
	* libcoff.h (bfd_coff_backend_data): Add new fields
	_bfd_coff_force_symnames_in_strings and
	_bfd_coff_debug_string_prefix_length.
	(bfd_coff_force_symnames_in_strings,
	bfd_coff_debug_string_prefix_length): New macros for above fields.
	* coffcode.h (coff_set_arch_mach_hook): Handle XCOFF64 magic.
	Set machine to 620 for XCOFF64.  Use bfd_coff_swap_sym_in instead
	of using coff_swap_sym_in directly.
	(FORCE_SYMNAMES_IN_STRINGS): New macro, defined for XCOFF64.
	(coff_set_flags) Set magic for XCOFF64.
	(coff_compute_section_file_positions): Add symbol name length to
	string section length if bfd_coff_debug_string_prefix_length is
	true.
	(coff_write_object_contents): Don't do reloc overflow for XCOFF64.
	(coff_slurp_line_table): Use bfd_coff_swap_lineno_in instead of
	using coff_swap_lineno_in directly.
	(bfd_coff_backend_data): Add _bfd_coff_force_symnames_in_strings
	and _bfd_coff_debug_string_prefix_length fields.
	* coffgen.c (coff_fix_symbol_name, coff_write_symbols): Force
	symbol names into strings table when
	bfd_coff_force_symnames_in_strings is true.
	* coffswap.h (MAX_SCNHDR_NRELOC, MAX_SCNHDR_NLNNO, GET_RELOC_VADDR,
	SET_RELOC_VADDR): New macros.
	(coff_swap_reloc_in, coff_swap_reloc_out): Use above macros.
	(coff_swap_aux_in, coff_swap_aux_out): Remove RS6000COFF_C
	code.
	(coff_swap_aouthdr_in, coff_swap_aouthdr_out): Handle XCOFF64
	changes within RS6000COFF_C specific code.
	(coff_swap_scnhdr_out): Use PUT_SCNHDR_NLNNO, PUT_SCNHDR_NRELOC,
	MAX_SCNHDR_NRELOC, and MAX_SCNHDR_NLNNO.
	* reloc.c (bfd_perform_relocation, bfd_install_relocation):
	Extend existing hack on target name.
	* xcofflink.c (XCOFF_XVECP): Extend existing hack on
	target name.
	* coff-tic54x.c (ticof): Keep up to date with new fields
	in bfd_coff_backend_data.
	* config.bfd: Add bfd_powerpc_64_arch to targ_arch and define
	targ_selvecs to include rs6000coff64_vec for rs6000.
	* configure.in: Add rs6000coff64_vec case.
 	* cpu-powerpc.c: New bfd_arch_info_type.

	gas:
	* as.c (parse_args): Allow md_parse_option to override -a listing
	option.
	* config/obj-coff.c (add_lineno): Change type of offset parameter
	from "int" to "bfd_vma."
	* config/tc-ppc.c (md_pseudo_table): Add "llong" and "machine."
	(ppc_mach, ppc_subseg_align, ppc_target_format): New.
	(ppc_change_csect): Align correctly for XCOFF64.
	(ppc_machine): New function, which discards "ppc_machine" line.
	(ppc_tc): Cons for 8 when code is 64 bit.
	(md_apply_fix3): Don't check operand->insert.  Handle 64 bit
	relocations.
	(md_parse_option): Handle -a64 and -a32.
	(ppc_xcoff64): New.
	* config/tc-ppc.h (TARGET_MACH): Define.
	(TARGET_FORMAT): Move to function.
	(SUB_SEGMENT_ALIGN): Use ppc_subseg_align.

	include:
	* include/coff/rs6k64.h: New file.

	opcodes:
	* configure.in: Add bfd_powerpc_64_arch.
	* disassemble.c (disassembler): Use print_insn_big_powerpc for
	64 bit code.
@
text
@d391 1
d407 1
d817 1
a817 1
coff-pmac.lo: coff-pmac.c coff-rs6000.c $(INCDIR)/coff/internal.h \
d820 1
a820 1
coff-rs6000.lo: coff-rs6000.c $(INCDIR)/coff/internal.h \
d823 2
a824 1
coff64-rs6000.lo: coff64-rs6000.c coff-rs6000.c $(INCDIR)/coff/internal.h \
@


1.24
log
@        * Makefile.am (BFD64_BACKENDS): Add elf64-hppa.lo
        (BFD64_BACKENDS_CFILES): Add elf64-hppa.c
        (elf64-hppa.lo): Add dependencies.
        * Makefile.in: Rebuilt.
@
text
@d821 3
@


1.23
log
@IA-64 ELF support.
@
text
@d393 1
d408 1
d663 4
@


1.22
log
@Bfd support for generating IA-64 EFI binaries.
	* Makefile.am (BFD64_BACKENDS): Mention coff-ia64.lo.
	(BFD64_BACKENDS_CFILES): Mention coff-ia64.c
	(coff-ia64.lo): Add dependency.
	* Makefile.in: Regenerate.
	* coff-ia64.c: New file.
	* efi-app-ia32.c: Ditto.
	* efi-app-ia64.c: Ditto.
	...
@
text
@d54 1
d93 1
d393 1
d407 1
d661 5
@


1.21
log
@Fix auto-dependency bug.
@
text
@d388 1
d401 1
d1098 2
@


1.20
log
@Mods to allow compilation of BFD all targets.
@
text
@d724 1
a725 1
cpu-tic54x.lo: cpu-tic54x.c
d818 3
a822 3
coff-tic54x.lo: coff-tic54x.c $(INCDIR)/bfdlink.h $(INCDIR)/coff/ti.h \
  $(INCDIR)/coff/tic54x.h $(INCDIR)/coff/internal.h \
  libcoff.h coffcode.h coffswap.h
d855 4
a858 4
elfarm-oabi.lo: elfarm-oabi.c $(INCDIR)/elf/arm.h \
  $(INCDIR)/elf/reloc-macros.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
  elf32-arm.h elf32-target.h
d1134 1
a1134 2
trad-core.lo: trad-core.c libaout.h $(INCDIR)/bfdlink.h \
  hosts/i386linux.h
@


1.19
log
@Remove ``-W -Wall'' from top-level Makefile/configure.
Add ``-W -Wall'' to sub-directories bfd, binutils, gas gprof, ld and
opcodes by the addition of WARN_CFLAGS to Makefile.am and configury to
set it.  Add configure option --enable-build-warnings.
Re-generate all and sundry using auto*-000227.
@
text
@d820 3
a822 2
coff-tic54x.lo: coff-tic54x.c $(INCDIR)/bfdlink.h $(INCDIR)/coff/tic54x.h \
  $(INCDIR)/coff/internal.h libcoff.h coffcode.h coffswap.h
@


1.18
log
@Fix dependency for elfarm-oabi.c
@
text
@d15 3
@


1.17
log
@BFD and include/coff support for tic54x target.
@
text
@d851 1
a851 1
elfarm-oabi.lo: elfarm-oabi.c $(INCDIR)/elf/arm-oabi.h \
@


1.16
log
@Use "gcc -MM" for dependencies, and update them.
@
text
@d69 1
d107 1
d150 1
d281 1
d722 1
d816 2
@


1.15
log
@ATMEL AVR microcontroller support.
@
text
@d7 1
a7 1
MKDEP = mkdep
d549 3
a551 2
	$(MAKE) MKDEP=$(MKDEP) DEP1
	sed -f dep.sed <DEP1 >DEP
a552 5
# This rule really wants a mkdep that runs "gcc -MM".
# The NetBSD mkdep overwrites any existing file contents, and doesn't insert
# the "DO NOT DELETE" line.
# Other mkdep versions require a file that already exists, and do insert it.
# Hence the weirdness....
a553 1
	rm -f DEP2 DEP2a
d555 3
a557 5
	echo > DEP2a
	$(MKDEP) -f DEP2a $(INCLUDES) $(CFLAGS) $?
	sed -e '/DO NOT DELETE/d' -e '/^$$/d' < DEP2a >> DEP2
	rm -f DEP2a
	$(SHELL) $(srcdir)/../move-if-change DEP2 DEP1
d640 1
a640 1
CLEANFILES = bfd.h dep.sed stmp-bfd-h DEP DEP1 libbfd.a stamp-lib \
a651 1
# What appears below is generated by a hacked mkdep using gcc -MM.
d699 1
d867 3
a869 3
elf32-i370.lo: elf32-i370.c elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
  elf32-target.h
a1022 6
pe-mips.lo: pe-mips.c $(INCDIR)/coff/mipspe.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/pe.h libcoff.h $(INCDIR)/bfdlink.h coffcode.h \
  peicode.h
pei-mips.lo: pei-mips.c pe-mips.c $(INCDIR)/coff/mipspe.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h libcoff.h \
  $(INCDIR)/bfdlink.h coffcode.h peicode.h
d1037 1
a1037 1
  coffcode.h peicode.h
d1040 7
a1046 1
  coffcode.h peicode.h
@


1.15.2.1
log
@This is a grab-bag of my stuff from the head branch.
Should have done it separately, I know.
- move bug report address to include file
- objcopy --redefine-sym
- update makefile dependencies (but use automake-000227)
- H.J. Lu's fix to readelf.c
@
text
@d7 1
a7 1
MKDEP = gcc -MM
d549 2
a550 3
	$(MAKE) MKDEP="$(MKDEP)" DEP1
	sed -f dep.sed < DEP1 > $@@
	echo '# IF YOU PUT ANYTHING HERE IT WILL GO AWAY' >> $@@
d552 5
d558 1
d560 5
a564 3
	echo '# DO NOT PUT ANYTHING AFTER THIS LINE, IT WILL GO AWAY.' >> DEP2
	$(MKDEP) $(INCLUDES) $(CFLAGS) $? >> DEP2
	mv -f DEP2 $@@
d647 1
a647 1
CLEANFILES = bfd.h dep.sed stmp-bfd-h DEP DEP1 DEP2 libbfd.a stamp-lib \
d659 1
a706 1
cpu-i370.lo: cpu-i370.c
d874 3
a876 3
elf32-i370.lo: elf32-i370.c $(INCDIR)/bfdlink.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/i370.h elf32-target.h
d1030 6
d1050 1
a1050 1
  coffcode.h peicode.h libpei.h
d1053 1
a1053 7
  coffcode.h peicode.h libpei.h
pe-mips.lo: pe-mips.c $(INCDIR)/coff/mipspe.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/pe.h libcoff.h $(INCDIR)/bfdlink.h coffcode.h \
  peicode.h libpei.h
pei-mips.lo: pei-mips.c pe-mips.c $(INCDIR)/coff/mipspe.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h libcoff.h \
  $(INCDIR)/bfdlink.h coffcode.h peicode.h libpei.h
@


1.15.2.2
log
@Fix auto-dependency bug.
@
text
@d1123 2
a1124 1
trad-core.lo: trad-core.c libaout.h $(INCDIR)/bfdlink.h
@


1.14
log
@Add WinCE support.
@
text
@d44 1
d81 1
d162 1
d292 1
d700 1
d859 3
@


1.13
log
@2000-02-27  Eli Zaretskii  <eliz@@is.elta.co.il>

	* Makefile.am (stamp-lib): Use $(LIBTOOL) --config to get the
	name of the libtool directory.
	* Makefile.in: Rebuild.
@
text
@d221 4
d350 4
d1022 6
d1040 6
@


1.12
log
@Add IBM 370 support.
@
text
@d483 3
a485 2
	if [ -f .libs/libbfd.a ]; then \
	  cp .libs/libbfd.a libbfd.tmp; \
@


1.11
log
@	ELF HPPA doesn't work at present; remove it until it does.
	* config.bfd: Comment out setting targ_defvec to
	bfd_elf32_hppa_vec.
	* Makefile.am: Rebuild dependencies.
	(BFD32_BACKENDS): Remove elf32-hppa.lo.
	(BFD32_BACKENDS_CFILES): Remove elf32-hppa.c.
	(SOURCE_HFILES): Remove elf32-hppa.h and hppa_stubs.h.
	* Makefile.in: Rebuild.
	* targets.c (bfd_target_vector): Comment out bfd_elf32_hppa_vec.
@
text
@d50 1
d86 1
d164 1
d289 1
d855 3
@


1.10
log
@1999-09-11  Donn Terry  <donn@@interix.com>

	* libpei.h: New file, broken out of peicode.h.
	* peigen.c: New file, broken out of peicode.h.
	* peicode.h: A bunch of code moved out to libpei.h and peigen.c.
	* configure.in: Add peigen.lo to list of files required for each
	PE target.
	* Makefile.am: Rebuild dependencies.
	(BFD32_BACKENDS): Add peigen.lo.
	(BFD32_BACKENDS_CFILES): Add peigen.c.
	(SOURCE_HFILES): Add libpei.h.
	* configure, Makefile.in: Rebuild.
@
text
@a161 1
	elf32-hppa.lo \
a285 1
	elf32-hppa.c \
d426 2
a427 2
	ecoffswap.h elf32-arm.h elf32-hppa.h elfcode.h elfcore.h \
	elflink.h freebsd.h genlink.h go32stub.h hppa_stubs.h libaout.h \
a852 4
elf32-hppa.lo: elf32-hppa.c elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/hppa.h $(INCDIR)/elf/reloc-macros.h libhppa.h \
  elf32-hppa.h elf-hppa.h hppa_stubs.h elf32-target.h
@


1.9
log
@1999-09-04  Steve Chamberlain  <sac@@pobox.com>

	* cpu-pj.c: New file.
	* elf32-pj.c: New file.
	* config.bfd (pj*): New cpu.
	(pj-*-*, pjl-*-*): New targets.
	* configure.in (bfd_elf32_pj_vec): New target vector.
	(bfd_elf32_pjl_vec): New target vector.
 	* archures.c (bfd_arch_pj): Define.
	* elf.c (prep_headers): Handle bfd_arch_pj.
	* reloc.c: Define BFD_RELOC_PJ_* relocations.
	* targets.c (bfd_elf32_pj_vec, bfd_elf32_pjl_vec): Declare and add
	to target vector list.
	* Makefile.am: Rebuild dependencies.
	(ALL_MACHINES): Add cpu-pj.lo.
	(ALL_MACHINES_CFILES): Add cpu-pj.c.
	(BFD32_BACKENDS): Add elf32-pj.lo.
	(BFD32_BACKENDS_CFILES): Add elf32-pj.c.
	* configure, Makefile.in, bfd-in2.h, libbfd.h: Rebuild.
@
text
@d219 1
d344 1
d431 2
a432 2
	libnlm.h liboasys.h netbsd.h nlm-target.h nlmcode.h nlmswap.h \
	ns32k.h peicode.h som.h vms.h
d917 1
a917 1
  $(INCDIR)/bfdlink.h coffcode.h peicode.h
d920 2
a921 1
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h peicode.h
d1002 1
a1002 1
  $(INCDIR)/bfdlink.h coffcode.h peicode.h
d1005 1
a1005 1
  $(INCDIR)/bfdlink.h coffcode.h peicode.h
d1008 1
a1008 1
  $(INCDIR)/bfdlink.h coffcode.h peicode.h
d1011 1
a1011 1
  $(INCDIR)/bfdlink.h coffcode.h peicode.h
d1014 1
a1014 1
  $(INCDIR)/bfdlink.h coffcode.h peicode.h
d1017 1
a1017 1
  $(INCDIR)/bfdlink.h coffcode.h peicode.h
d1020 1
a1020 1
  $(INCDIR)/bfdlink.h coffcode.h peicode.h
d1023 3
a1025 1
  $(INCDIR)/bfdlink.h coffcode.h peicode.h
@


1.8
log
@Path from Roland McGrath  <roland@@baalperazim.frob.com>
Added arm-netbsd target.
@
text
@d61 1
d96 1
d173 1
d297 1
d700 1
d892 3
@


1.7
log
@	* Makefile.am: Rename .dep* files to DEP*.  Change DEP variable to
	MKDEP.
	* Makefile.in: Rebuild.
@
text
@d117 1
d240 1
d728 3
@


1.6
log
@	* Makefile.am: Rebuild dependencies.
	* Makefile.in: Rebuild.
@
text
@d7 1
a7 1
DEP = mkdep
d523 5
a527 5
# Have to get rid of .dep1 here so that "$?" later includes all of $(CFILES).
.dep: dep.sed $(CFILES) $(HFILES) bfd.h
	rm -f .dep1
	$(MAKE) DEP=$(DEP) .dep1
	sed -f dep.sed <.dep1 >.dep
d534 8
a541 8
.dep1: $(CFILES)
	rm -f .dep2 .dep2a
	echo '# DO NOT DELETE THIS LINE -- mkdep uses it.' > .dep2
	echo > .dep2a
	$(DEP) -f .dep2a $(INCLUDES) $(CFLAGS) $?
	sed -e '/DO NOT DELETE/d' -e '/^$$/d' < .dep2a >> .dep2
	rm -f .dep2a
	$(SHELL) $(srcdir)/../move-if-change .dep2 .dep1
d549 1
a549 1
dep: .dep
d551 1
a551 1
	cat .dep >> tmp-Makefile
d554 1
a554 1
dep-in: .dep
d556 1
a556 1
	cat .dep >> tmp-Makefile.in
d559 1
a559 1
dep-am: .dep
d561 1
a561 1
	cat .dep >> tmp-Makefile.am
d624 1
a624 1
CLEANFILES = bfd.h dep.sed stmp-bfd-h .dep .dep1 libbfd.a stamp-lib \
@


1.5
log
@	* Makefile.am (SOURCE_HFILES): Add missing headers.
	* Makefile.in: Regenerated.
@
text
@d843 4
a846 4
elf32-hppa.lo: elf32-hppa.c $(INCDIR)/bfdlink.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  elf32-hppa.h libhppa.h $(INCDIR)/elf/hppa.h $(INCDIR)/elf/reloc-macros.h \
  hppa_stubs.h elf32-target.h
d900 1
a900 4
epoc-pe-arm.lo: epoc-ep-arm.c pe-arm.c coff-arm.c $(INCDIR)/coff/arm.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h libcoff.h \
  $(INCDIR)/bfdlink.h coffcode.h peicode.h
epoc-pei-arm.lo: epoc-pei-arm.c pei-arm.c coff-arm.c $(INCDIR)/coff/arm.h \
d903 3
@


1.4
log
@	* Makefile.am: Rebuild dependencies.
	(BFD32_BACKENDS): Add dwarf1.lo.
	(BFD32_BACKENDS_CFILES): Add dwarf1.c.
	* Makefile.in: Rebuild.
@
text
@d420 2
a421 2
	ecoffswap.h elf32-hppa.h \
	elfcode.h genlink.h go32stub.h hppa_stubs.h libaout.h \
d423 2
a424 2
	libnlm.h liboasys.h netbsd.h nlm-target.h nlmcode.h ns32k.h \
	som.h vms.h
@


1.3
log
@Rename epoc-pe interworking function names to avoid a name space clash.
Add epoc-pe to built targets.
@
text
@d147 1
d269 1
d803 3
@


1.2
log
@1999-05-28  Martin Dorey  <mdorey@@madge.com>
	* elf32-i960.c: New file.
	* elf.c (prep_headers): Handle bfd_arch_i960.
	* targets.c (bfd_target_vector): Add &bfd_elf32_i960_vec.
	* config.bfd (i960-*-elf*): New target.
	* configure.in (bfd_elf32_i960_vec): New target vector.
	* Makefile.am (BFD32_BACKENDS): Add elf32-i960.lo.
	(BFD32_BACKENDS_CFILES): Add elf32-i960.c.
	* Makefile.in, aclocal.m4, configure: Rebuild.
@
text
@d175 2
d296 2
d895 6
@


1.1
log
@Initial revision
@
text
@d161 1
d280 1
d844 3
@


1.1.1.1
log
@19990502 sourceware import
@
text
@@

