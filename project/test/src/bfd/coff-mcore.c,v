head	1.42;
access;
symbols
	sid-snapshot-20180601:1.42
	sid-snapshot-20180501:1.42
	sid-snapshot-20180401:1.42
	sid-snapshot-20180301:1.42
	sid-snapshot-20180201:1.42
	sid-snapshot-20180101:1.42
	sid-snapshot-20171201:1.42
	sid-snapshot-20171101:1.42
	sid-snapshot-20171001:1.42
	sid-snapshot-20170901:1.42
	sid-snapshot-20170801:1.42
	sid-snapshot-20170701:1.42
	sid-snapshot-20170601:1.42
	sid-snapshot-20170501:1.42
	sid-snapshot-20170401:1.42
	sid-snapshot-20170301:1.42
	sid-snapshot-20170201:1.42
	sid-snapshot-20170101:1.42
	sid-snapshot-20161201:1.42
	sid-snapshot-20161101:1.42
	sid-snapshot-20160901:1.42
	sid-snapshot-20160801:1.42
	sid-snapshot-20160701:1.42
	sid-snapshot-20160601:1.42
	sid-snapshot-20160501:1.42
	sid-snapshot-20160401:1.42
	sid-snapshot-20160301:1.42
	sid-snapshot-20160201:1.42
	sid-snapshot-20160101:1.42
	sid-snapshot-20151201:1.42
	sid-snapshot-20151101:1.42
	sid-snapshot-20151001:1.42
	sid-snapshot-20150901:1.42
	sid-snapshot-20150801:1.42
	sid-snapshot-20150701:1.42
	sid-snapshot-20150601:1.42
	sid-snapshot-20150501:1.42
	sid-snapshot-20150401:1.42
	sid-snapshot-20150301:1.42
	sid-snapshot-20150201:1.42
	sid-snapshot-20150101:1.42
	sid-snapshot-20141201:1.42
	sid-snapshot-20141101:1.42
	sid-snapshot-20141001:1.42
	sid-snapshot-20140901:1.42
	sid-snapshot-20140801:1.42
	sid-snapshot-20140701:1.42
	sid-snapshot-20140601:1.42
	sid-snapshot-20140501:1.42
	sid-snapshot-20140401:1.42
	sid-snapshot-20140301:1.42
	sid-snapshot-20140201:1.42
	sid-snapshot-20140101:1.42
	sid-snapshot-20131201:1.42
	sid-snapshot-20131101:1.42
	sid-snapshot-20131001:1.42
	binutils-2_24-branch:1.42.0.8
	binutils-2_24-branchpoint:1.42
	binutils-2_21_1:1.40
	sid-snapshot-20130901:1.42
	gdb_7_6_1-2013-08-30-release:1.42
	sid-snapshot-20130801:1.42
	sid-snapshot-20130701:1.42
	sid-snapshot-20130601:1.42
	sid-snapshot-20130501:1.42
	gdb_7_6-2013-04-26-release:1.42
	sid-snapshot-20130401:1.42
	binutils-2_23_2:1.42
	gdb_7_6-branch:1.42.0.6
	gdb_7_6-2013-03-12-branchpoint:1.42
	sid-snapshot-20130301:1.42
	sid-snapshot-20130201:1.42
	sid-snapshot-20130101:1.42
	sid-snapshot-20121201:1.42
	gdb_7_5_1-2012-11-29-release:1.42
	binutils-2_23_1:1.42
	sid-snapshot-20121101:1.42
	binutils-2_23:1.42
	sid-snapshot-20121001:1.42
	sid-snapshot-20120901:1.42
	gdb_7_5-2012-08-17-release:1.42
	sid-snapshot-20120801:1.42
	binutils-2_23-branch:1.42.0.4
	binutils-2_23-branchpoint:1.42
	gdb_7_5-branch:1.42.0.2
	gdb_7_5-2012-07-18-branchpoint:1.42
	sid-snapshot-20120701:1.41
	sid-snapshot-20120601:1.41
	sid-snapshot-20120501:1.41
	binutils-2_22_branch:1.41.0.6
	gdb_7_4_1-2012-04-26-release:1.41
	sid-snapshot-20120401:1.41
	sid-snapshot-20120301:1.41
	sid-snapshot-20120201:1.41
	gdb_7_4-2012-01-24-release:1.41
	sid-snapshot-20120101:1.41
	gdb_7_4-branch:1.41.0.4
	gdb_7_4-2011-12-13-branchpoint:1.41
	sid-snapshot-20111201:1.41
	binutils-2_22:1.41
	sid-snapshot-20111101:1.41
	sid-snapshot-20111001:1.41
	binutils-2_22-branch:1.41.0.2
	binutils-2_22-branchpoint:1.41
	gdb_7_3_1-2011-09-04-release:1.40
	sid-snapshot-20110901:1.41
	sid-snapshot-20110801:1.41
	gdb_7_3-2011-07-26-release:1.40
	sid-snapshot-20110701:1.41
	sid-snapshot-20110601:1.40
	sid-snapshot-20110501:1.40
	gdb_7_3-branch:1.40.0.6
	gdb_7_3-2011-04-01-branchpoint:1.40
	sid-snapshot-20110401:1.40
	sid-snapshot-20110301:1.40
	sid-snapshot-20110201:1.40
	sid-snapshot-20110101:1.40
	binutils-2_21:1.40
	sid-snapshot-20101201:1.40
	binutils-2_21-branch:1.40.0.4
	binutils-2_21-branchpoint:1.40
	sid-snapshot-20101101:1.40
	sid-snapshot-20101001:1.40
	binutils-2_20_1:1.39
	gdb_7_2-2010-09-02-release:1.40
	sid-snapshot-20100901:1.40
	sid-snapshot-20100801:1.40
	gdb_7_2-branch:1.40.0.2
	gdb_7_2-2010-07-07-branchpoint:1.40
	sid-snapshot-20100701:1.40
	sid-snapshot-20100601:1.39
	sid-snapshot-20100501:1.39
	sid-snapshot-20100401:1.39
	gdb_7_1-2010-03-18-release:1.39
	sid-snapshot-20100301:1.39
	gdb_7_1-branch:1.39.0.32
	gdb_7_1-2010-02-18-branchpoint:1.39
	sid-snapshot-20100201:1.39
	sid-snapshot-20100101:1.39
	gdb_7_0_1-2009-12-22-release:1.39
	sid-snapshot-20091201:1.39
	sid-snapshot-20091101:1.39
	binutils-2_20:1.39
	gdb_7_0-2009-10-06-release:1.39
	sid-snapshot-20091001:1.39
	gdb_7_0-branch:1.39.0.30
	gdb_7_0-2009-09-16-branchpoint:1.39
	arc-sim-20090309:1.39
	binutils-arc-20081103-branch:1.39.0.28
	binutils-arc-20081103-branchpoint:1.39
	binutils-2_20-branch:1.39.0.26
	binutils-2_20-branchpoint:1.39
	sid-snapshot-20090901:1.39
	sid-snapshot-20090801:1.39
	msnyder-checkpoint-072509-branch:1.39.0.24
	msnyder-checkpoint-072509-branchpoint:1.39
	sid-snapshot-20090701:1.39
	dje-cgen-play1-branch:1.39.0.22
	dje-cgen-play1-branchpoint:1.39
	sid-snapshot-20090601:1.39
	sid-snapshot-20090501:1.39
	sid-snapshot-20090401:1.39
	arc-20081103-branch:1.39.0.20
	arc-20081103-branchpoint:1.39
	arc-insight_6_8-branch:1.39.0.18
	arc-insight_6_8-branchpoint:1.39
	insight_6_8-branch:1.39.0.16
	insight_6_8-branchpoint:1.39
	sid-snapshot-20090301:1.39
	binutils-2_19_1:1.39
	sid-snapshot-20090201:1.39
	sid-snapshot-20090101:1.39
	reverse-20081226-branch:1.39.0.14
	reverse-20081226-branchpoint:1.39
	sid-snapshot-20081201:1.39
	multiprocess-20081120-branch:1.39.0.12
	multiprocess-20081120-branchpoint:1.39
	sid-snapshot-20081101:1.39
	binutils-2_19:1.39
	sid-snapshot-20081001:1.39
	reverse-20080930-branch:1.39.0.10
	reverse-20080930-branchpoint:1.39
	binutils-2_19-branch:1.39.0.8
	binutils-2_19-branchpoint:1.39
	sid-snapshot-20080901:1.39
	sid-snapshot-20080801:1.39
	reverse-20080717-branch:1.39.0.6
	reverse-20080717-branchpoint:1.39
	sid-snapshot-20080701:1.39
	msnyder-reverse-20080609-branch:1.39.0.4
	msnyder-reverse-20080609-branchpoint:1.39
	drow-reverse-20070409-branch:1.36.0.2
	drow-reverse-20070409-branchpoint:1.36
	sid-snapshot-20080601:1.39
	sid-snapshot-20080501:1.39
	sid-snapshot-20080403:1.39
	sid-snapshot-20080401:1.39
	gdb_6_8-2008-03-27-release:1.39
	sid-snapshot-20080301:1.39
	gdb_6_8-branch:1.39.0.2
	gdb_6_8-2008-02-26-branchpoint:1.39
	sid-snapshot-20080201:1.39
	sid-snapshot-20080101:1.39
	sid-snapshot-20071201:1.39
	sid-snapshot-20071101:1.39
	gdb_6_7_1-2007-10-29-release:1.38
	gdb_6_7-2007-10-10-release:1.38
	sid-snapshot-20071001:1.38
	gdb_6_7-branch:1.38.0.4
	gdb_6_7-2007-09-07-branchpoint:1.38
	binutils-2_18:1.38
	binutils-2_18-branch:1.38.0.2
	binutils-2_18-branchpoint:1.38
	insight_6_6-20070208-release:1.35
	binutils-csl-coldfire-4_1-32:1.35
	binutils-csl-sourcerygxx-4_1-32:1.35
	gdb_6_6-2006-12-18-release:1.35
	binutils-csl-innovasic-fido-3_4_4-33:1.35
	binutils-csl-sourcerygxx-3_4_4-32:1.33
	binutils-csl-coldfire-4_1-30:1.35
	binutils-csl-sourcerygxx-4_1-30:1.35
	binutils-csl-coldfire-4_1-28:1.35
	binutils-csl-sourcerygxx-4_1-29:1.35
	binutils-csl-sourcerygxx-4_1-28:1.35
	gdb_6_6-branch:1.35.0.32
	gdb_6_6-2006-11-15-branchpoint:1.35
	binutils-csl-arm-2006q3-27:1.35
	binutils-csl-sourcerygxx-4_1-27:1.35
	binutils-csl-arm-2006q3-26:1.35
	binutils-csl-sourcerygxx-4_1-26:1.35
	binutils-csl-sourcerygxx-4_1-25:1.35
	binutils-csl-sourcerygxx-4_1-24:1.35
	binutils-csl-sourcerygxx-4_1-23:1.35
	insight_6_5-20061003-release:1.35
	gdb-csl-symbian-6_4_50_20060226-12:1.35
	binutils-csl-sourcerygxx-4_1-21:1.35
	binutils-csl-arm-2006q3-21:1.35
	binutils-csl-sourcerygxx-4_1-22:1.35
	binutils-csl-palmsource-arm-prelinker-1_0-1:1.35
	binutils-csl-sourcerygxx-4_1-20:1.35
	binutils-csl-arm-2006q3-19:1.35
	binutils-csl-sourcerygxx-4_1-19:1.35
	binutils-csl-sourcerygxx-4_1-18:1.35
	binutils-csl-renesas-4_1-9:1.35
	gdb-csl-sourcerygxx-3_4_4-25:1.35
	binutils-csl-sourcerygxx-3_4_4-25:1.33
	nickrob-async-20060828-mergepoint:1.35
	gdb-csl-symbian-6_4_50_20060226-11:1.35
	binutils-csl-renesas-4_1-8:1.35
	binutils-csl-renesas-4_1-7:1.35
	binutils-csl-renesas-4_1-6:1.35
	gdb-csl-sourcerygxx-4_1-17:1.35
	binutils-csl-sourcerygxx-4_1-17:1.35
	gdb-csl-20060226-branch-local-2:1.35
	gdb-csl-sourcerygxx-4_1-14:1.35
	binutils-csl-sourcerygxx-4_1-14:1.35
	binutils-csl-sourcerygxx-4_1-15:1.35
	gdb-csl-sourcerygxx-4_1-13:1.35
	binutils-csl-sourcerygxx-4_1-13:1.35
	binutils-2_17:1.35
	gdb-csl-sourcerygxx-4_1-12:1.35
	binutils-csl-sourcerygxx-4_1-12:1.35
	gdb-csl-sourcerygxx-3_4_4-21:1.35
	binutils-csl-sourcerygxx-3_4_4-21:1.35
	gdb_6_5-20060621-release:1.35
	binutils-csl-wrs-linux-3_4_4-24:1.33
	binutils-csl-wrs-linux-3_4_4-23:1.33
	gdb-csl-sourcerygxx-4_1-9:1.35
	binutils-csl-sourcerygxx-4_1-9:1.35
	gdb-csl-sourcerygxx-4_1-8:1.35
	binutils-csl-sourcerygxx-4_1-8:1.35
	gdb-csl-sourcerygxx-4_1-7:1.35
	binutils-csl-sourcerygxx-4_1-7:1.35
	gdb-csl-arm-2006q1-6:1.35
	binutils-csl-arm-2006q1-6:1.35
	gdb-csl-sourcerygxx-4_1-6:1.35
	binutils-csl-sourcerygxx-4_1-6:1.35
	binutils-csl-wrs-linux-3_4_4-22:1.33
	gdb-csl-symbian-6_4_50_20060226-10:1.35
	gdb-csl-symbian-6_4_50_20060226-9:1.35
	gdb-csl-symbian-6_4_50_20060226-8:1.35
	gdb-csl-coldfire-4_1-11:1.35
	binutils-csl-coldfire-4_1-11:1.35
	gdb-csl-sourcerygxx-3_4_4-19:1.35
	binutils-csl-sourcerygxx-3_4_4-19:1.35
	gdb-csl-coldfire-4_1-10:1.35
	gdb_6_5-branch:1.35.0.30
	gdb_6_5-2006-05-14-branchpoint:1.35
	binutils-csl-coldfire-4_1-10:1.35
	gdb-csl-sourcerygxx-4_1-5:1.35
	binutils-csl-sourcerygxx-4_1-5:1.35
	nickrob-async-20060513-branch:1.35.0.28
	nickrob-async-20060513-branchpoint:1.35
	gdb-csl-sourcerygxx-4_1-4:1.35
	binutils-csl-sourcerygxx-4_1-4:1.35
	msnyder-reverse-20060502-branch:1.35.0.26
	msnyder-reverse-20060502-branchpoint:1.35
	binutils-csl-wrs-linux-3_4_4-21:1.33
	gdb-csl-morpho-4_1-4:1.35
	binutils-csl-morpho-4_1-4:1.35
	gdb-csl-sourcerygxx-3_4_4-17:1.35
	binutils-csl-sourcerygxx-3_4_4-17:1.35
	binutils-csl-wrs-linux-3_4_4-20:1.33
	readline_5_1-import-branch:1.35.0.24
	readline_5_1-import-branchpoint:1.35
	gdb-csl-20060226-branch-merge-to-csl-symbian-1:1.35
	binutils-2_17-branch:1.35.0.22
	binutils-2_17-branchpoint:1.35
	gdb-csl-symbian-20060226-branch:1.35.0.20
	gdb-csl-symbian-20060226-branchpoint:1.35
	gdb-csl-20060226-branch-merge-to-csl-local-1:1.35
	msnyder-reverse-20060331-branch:1.35.0.18
	msnyder-reverse-20060331-branchpoint:1.35
	binutils-csl-2_17-branch:1.35.0.16
	binutils-csl-2_17-branchpoint:1.35
	gdb-csl-available-20060303-branch:1.35.0.14
	gdb-csl-available-20060303-branchpoint:1.35
	gdb-csl-20060226-branch:1.35.0.12
	gdb-csl-20060226-branchpoint:1.35
	gdb_6_4-20051202-release:1.35
	msnyder-fork-checkpoint-branch:1.35.0.10
	msnyder-fork-checkpoint-branchpoint:1.35
	gdb-csl-gxxpro-6_3-branch:1.35.0.8
	gdb-csl-gxxpro-6_3-branchpoint:1.35
	gdb_6_4-branch:1.35.0.6
	gdb_6_4-2005-11-01-branchpoint:1.35
	gdb-csl-arm-20051020-branch:1.35.0.4
	gdb-csl-arm-20051020-branchpoint:1.35
	binutils-csl-gxxpro-3_4-branch:1.33.0.8
	binutils-csl-gxxpro-3_4-branchpoint:1.33
	binutils-2_16_1:1.33
	msnyder-tracepoint-checkpoint-branch:1.35.0.2
	msnyder-tracepoint-checkpoint-branchpoint:1.35
	gdb-csl-arm-20050325-2005-q1b:1.33
	binutils-csl-arm-2005q1b:1.33
	binutils-2_16:1.33
	gdb-csl-arm-20050325-2005-q1a:1.33
	binutils-csl-arm-2005q1a:1.33
	csl-arm-20050325-branch:1.33.0.6
	csl-arm-20050325-branchpoint:1.33
	binutils-csl-arm-2005q1-branch:1.33.0.4
	binutils-csl-arm-2005q1-branchpoint:1.33
	binutils-2_16-branch:1.33.0.2
	binutils-2_16-branchpoint:1.33
	csl-arm-2004-q3d:1.31
	gdb_6_3-20041109-release:1.30
	gdb_6_3-branch:1.30.0.2
	gdb_6_3-20041019-branchpoint:1.30
	csl-arm-2004-q3:1.30
	drow_intercu-merge-20040921:1.30
	drow_intercu-merge-20040915:1.30
	jimb-gdb_6_2-e500-branch:1.29.0.20
	jimb-gdb_6_2-e500-branchpoint:1.29
	gdb_6_2-20040730-release:1.29
	gdb_6_2-branch:1.29.0.16
	gdb_6_2-2004-07-10-gmt-branchpoint:1.29
	gdb_6_1_1-20040616-release:1.29
	binutils-2_15:1.29
	binutils-2_15-branchpoint:1.29
	csl-arm-2004-q1a:1.29
	csl-arm-2004-q1:1.29
	gdb_6_1-2004-04-05-release:1.29
	drow_intercu-merge-20040402:1.29
	drow_intercu-merge-20040327:1.29
	ezannoni_pie-20040323-branch:1.29.0.14
	ezannoni_pie-20040323-branchpoint:1.29
	cagney_tramp-20040321-mergepoint:1.29
	cagney_tramp-20040309-branch:1.29.0.12
	cagney_tramp-20040309-branchpoint:1.29
	gdb_6_1-branch:1.29.0.10
	gdb_6_1-2004-03-01-gmt-branchpoint:1.29
	drow_intercu-20040221-branch:1.29.0.8
	drow_intercu-20040221-branchpoint:1.29
	binutils-2_15-branch:1.29.0.6
	cagney_bfdfile-20040213-branch:1.29.0.4
	cagney_bfdfile-20040213-branchpoint:1.29
	drow-cplus-merge-20040208:1.29
	carlton_dictionary-20040126-merge:1.29
	cagney_bigcore-20040122-branch:1.29.0.2
	cagney_bigcore-20040122-branchpoint:1.29
	drow-cplus-merge-20040113:1.29
	csl-arm-2003-q4:1.29
	drow-cplus-merge-20031224:1.29
	drow-cplus-merge-20031220:1.29
	carlton_dictionary-20031215-merge:1.29
	drow-cplus-merge-20031214:1.29
	carlton-dictionary-20031111-merge:1.28
	gdb_6_0-2003-10-04-release:1.27
	kettenis_sparc-20030918-branch:1.28.0.6
	kettenis_sparc-20030918-branchpoint:1.28
	carlton_dictionary-20030917-merge:1.28
	ezannoni_pie-20030916-branchpoint:1.28
	ezannoni_pie-20030916-branch:1.28.0.4
	cagney_x86i386-20030821-branch:1.28.0.2
	cagney_x86i386-20030821-branchpoint:1.28
	carlton_dictionary-20030805-merge:1.28
	carlton_dictionary-20030627-merge:1.28
	gdb_6_0-branch:1.27.0.6
	gdb_6_0-2003-06-23-branchpoint:1.27
	jimb-ppc64-linux-20030613-branch:1.27.0.4
	jimb-ppc64-linux-20030613-branchpoint:1.27
	binutils-2_14:1.26
	cagney_convert-20030606-branch:1.27.0.2
	cagney_convert-20030606-branchpoint:1.27
	cagney_writestrings-20030508-branch:1.26.0.30
	cagney_writestrings-20030508-branchpoint:1.26
	jimb-ppc64-linux-20030528-branch:1.26.0.28
	jimb-ppc64-linux-20030528-branchpoint:1.26
	carlton_dictionary-20030523-merge:1.26
	cagney_fileio-20030521-branch:1.26.0.26
	cagney_fileio-20030521-branchpoint:1.26
	kettenis_i386newframe-20030517-mergepoint:1.26
	jimb-ppc64-linux-20030509-branch:1.26.0.24
	jimb-ppc64-linux-20030509-branchpoint:1.26
	kettenis_i386newframe-20030504-mergepoint:1.26
	carlton_dictionary-20030430-merge:1.26
	binutils-2_14-branch:1.26.0.22
	binutils-2_14-branchpoint:1.26
	kettenis_i386newframe-20030419-branch:1.26.0.20
	kettenis_i386newframe-20030419-branchpoint:1.26
	carlton_dictionary-20030416-merge:1.26
	cagney_frameaddr-20030409-mergepoint:1.26
	kettenis_i386newframe-20030406-branch:1.26.0.18
	kettenis_i386newframe-20030406-branchpoint:1.26
	cagney_frameaddr-20030403-branchpoint:1.26
	cagney_frameaddr-20030403-branch:1.26.0.16
	cagney_framebase-20030330-mergepoint:1.26
	cagney_framebase-20030326-branch:1.26.0.14
	cagney_framebase-20030326-branchpoint:1.26
	cagney_lazyid-20030317-branch:1.26.0.12
	cagney_lazyid-20030317-branchpoint:1.26
	kettenis-i386newframe-20030316-mergepoint:1.26
	offbyone-20030313-branch:1.26.0.10
	offbyone-20030313-branchpoint:1.26
	kettenis-i386newframe-20030308-branch:1.26.0.8
	kettenis-i386newframe-20030308-branchpoint:1.26
	carlton_dictionary-20030305-merge:1.26
	cagney_offbyone-20030303-branch:1.26.0.6
	cagney_offbyone-20030303-branchpoint:1.26
	carlton_dictionary-20030207-merge:1.26
	interps-20030202-branch:1.26.0.4
	interps-20030202-branchpoint:1.26
	cagney-unwind-20030108-branch:1.26.0.2
	cagney-unwind-20030108-branchpoint:1.26
	binutils-2_13_2_1:1.24
	binutils-2_13_2:1.24
	carlton_dictionary-20021223-merge:1.26
	gdb_5_3-2002-12-12-release:1.24
	carlton_dictionary-20021115-merge:1.24
	binutils-2_13_1:1.24
	kseitz_interps-20021105-merge:1.24
	kseitz_interps-20021103-merge:1.24
	drow-cplus-merge-20021020:1.24
	drow-cplus-merge-20021025:1.24
	carlton_dictionary-20021025-merge:1.24
	carlton_dictionary-20021011-merge:1.24
	drow-cplus-branch:1.24.0.20
	drow-cplus-branchpoint:1.24
	kseitz_interps-20020930-merge:1.24
	carlton_dictionary-20020927-merge:1.24
	carlton_dictionary-branch:1.24.0.18
	carlton_dictionary-20020920-branchpoint:1.24
	sid-20020905-branchpoint:1.24
	sid-20020905-branch:1.24.0.16
	gdb_5_3-branch:1.24.0.14
	gdb_5_3-2002-09-04-branchpoint:1.24
	kseitz_interps-20020829-merge:1.24
	cagney_sysregs-20020825-branch:1.24.0.12
	cagney_sysregs-20020825-branchpoint:1.24
	readline_4_3-import-branch:1.24.0.10
	readline_4_3-import-branchpoint:1.24
	binutils-2_13:1.24
	gdb_5_2_1-2002-07-23-release:1.23
	binutils-2_13-branchpoint:1.24
	binutils-2_13-branch:1.24.0.8
	kseitz_interps-20020528-branch:1.24.0.6
	kseitz_interps-20020528-branchpoint:1.24
	cagney_regbuf-20020515-branch:1.24.0.4
	cagney_regbuf-20020515-branchpoint:1.24
	binutils-2_12_1:1.23
	jimb-macro-020506-branch:1.24.0.2
	jimb-macro-020506-branchpoint:1.24
	gdb_5_2-2002-04-29-release:1.23
	binutils-2_12:1.23
	gdb_5_2-branch:1.23.0.4
	gdb_5_2-2002-03-03-branchpoint:1.23
	binutils-2_12-branch:1.23.0.2
	binutils-2_12-branchpoint:1.23
	gdb_5_1_1-2002-01-24-release:1.19
	gdb_5_1_0_1-2002-01-03-release:1.19
	cygnus_cvs_20020108_pre:1.23
	gdb_5_1_0_1-2002-01-03-branch:1.19.0.6
	gdb_5_1_0_1-2002-01-03-branchpoint:1.19
	gdb_5_1-2001-11-21-release:1.19
	gdb_s390-2001-09-26-branch:1.19.0.4
	gdb_s390-2001-09-26-branchpoint:1.19
	gdb_5_1-2001-07-29-branch:1.19.0.2
	gdb_5_1-2001-07-29-branchpoint:1.19
	binutils-2_11_2:1.18.2.1
	binutils-2_11_1:1.18.2.1
	binutils-2_11:1.18
	x86_64versiong3:1.18
	binutils-2_11-branch:1.18.0.2
	insight-precleanup-2001-01-01:1.17
	binutils-2_10_1:1.15
	binutils-2_10:1.15
	gdb-premipsmulti-2000-06-06-branch:1.15.0.6
	gdb-premipsmulti-2000-06-06-branchpoint:1.15
	gdb_5_0-2000-05-19-release:1.15
	gdb_4_18_2-2000-05-18-release:1.15
	gdb_4_95_1-2000-05-11-snapshot:1.15
	gdb_4_95_0-2000-04-27-snapshot:1.15
	gdb_5_0-2000-04-10-branch:1.15.0.4
	gdb_5_0-2000-04-10-branchpoint:1.15
	binutils-2_10-branch:1.15.0.2
	binutils-2_10-branchpoint:1.15
	binutils_latest_snapshot:1.42
	repo-unification-2000-02-06:1.13
	binu_ss_19990721:1.7
	binu_ss_19990602:1.4
	binu_ss_19990502:1.1.1.1
	cygnus:1.1.1;
locks; strict;
comment	@ * @;


1.42
date	2012.07.13.14.22.43;	author nickc;	state Exp;
branches;
next	1.41;

1.41
date	2011.06.02.13.43.14;	author nickc;	state Exp;
branches;
next	1.40;

1.40
date	2010.06.27.04.07.51;	author amodra;	state Exp;
branches;
next	1.39;

1.39
date	2007.10.15.02.00.11;	author amodra;	state Exp;
branches;
next	1.38;

1.38
date	2007.07.03.14.26.39;	author nickc;	state Exp;
branches;
next	1.37;

1.37
date	2007.04.26.14.46.55;	author amodra;	state Exp;
branches;
next	1.36;

1.36
date	2007.03.26.12.22.59;	author amodra;	state Exp;
branches;
next	1.35;

1.35
date	2005.05.04.15.53.02;	author nickc;	state Exp;
branches;
next	1.34;

1.34
date	2005.05.04.07.19.20;	author nickc;	state Exp;
branches;
next	1.33;

1.33
date	2005.03.03.11.40.57;	author amodra;	state Exp;
branches;
next	1.32;

1.32
date	2005.01.31.23.13.16;	author bje;	state Exp;
branches;
next	1.31;

1.31
date	2004.10.21.15.28.16;	author hjl;	state Exp;
branches;
next	1.30;

1.30
date	2004.08.13.03.15.55;	author amodra;	state Exp;
branches;
next	1.29;

1.29
date	2003.11.24.18.06.40;	author kazu;	state Exp;
branches
	1.29.8.1;
next	1.28;

1.28
date	2003.06.25.06.40.17;	author amodra;	state Exp;
branches;
next	1.27;

1.27
date	2003.06.04.10.47.30;	author sveinse;	state Exp;
branches;
next	1.26;

1.26
date	2002.11.30.08.39.35;	author amodra;	state Exp;
branches;
next	1.25;

1.25
date	2002.11.21.13.11.33;	author amodra;	state Exp;
branches;
next	1.24;

1.24
date	2002.04.04.19.53.35;	author drow;	state Exp;
branches
	1.24.18.1
	1.24.20.1;
next	1.23;

1.23
date	2001.09.21.14.25.08;	author nickc;	state Exp;
branches;
next	1.22;

1.22
date	2001.09.20.23.30.34;	author amodra;	state Exp;
branches;
next	1.21;

1.21
date	2001.09.18.09.57.22;	author amodra;	state Exp;
branches;
next	1.20;

1.20
date	2001.08.28.09.35.16;	author nickc;	state Exp;
branches;
next	1.19;

1.19
date	2001.03.08.21.03.57;	author nickc;	state Exp;
branches;
next	1.18;

1.18
date	2001.01.23.11.45.52;	author kazu;	state Exp;
branches
	1.18.2.1;
next	1.17;

1.17
date	2000.11.11.19.03.23;	author kazu;	state Exp;
branches;
next	1.16;

1.16
date	2000.06.19.01.22.37;	author nickc;	state Exp;
branches;
next	1.15;

1.15
date	2000.03.01.20.39.07;	author nickc;	state Exp;
branches;
next	1.14;

1.14
date	2000.03.01.19.40.53;	author hjl;	state Exp;
branches;
next	1.13;

1.13
date	2000.01.20.19.08.42;	author nickc;	state Exp;
branches;
next	1.12;

1.12
date	2000.01.13.20.46.54;	author nickc;	state Exp;
branches;
next	1.11;

1.11
date	99.12.17.19.03.09;	author nickc;	state Exp;
branches;
next	1.10;

1.10
date	99.11.20.11.53.57;	author nickc;	state Exp;
branches;
next	1.9;

1.9
date	99.11.18.18.36.35;	author nickc;	state Exp;
branches;
next	1.8;

1.8
date	99.08.19.13.04.45;	author nickc;	state Exp;
branches;
next	1.7;

1.7
date	99.07.19.14.55.15;	author nickc;	state Exp;
branches;
next	1.6;

1.6
date	99.07.12.10.28.39;	author ian;	state Exp;
branches;
next	1.5;

1.5
date	99.07.12.07.34.53;	author ian;	state Exp;
branches;
next	1.4;

1.4
date	99.05.16.14.16.52;	author nickc;	state Exp;
branches;
next	1.3;

1.3
date	99.05.15.15.38.12;	author nickc;	state Exp;
branches;
next	1.2;

1.2
date	99.05.07.07.44.11;	author nickc;	state Exp;
branches;
next	1.1;

1.1
date	99.05.03.07.28.55;	author rth;	state Exp;
branches
	1.1.1.1;
next	;

1.29.8.1
date	2004.09.16.17.00.13;	author drow;	state Exp;
branches;
next	;

1.24.18.1
date	2002.12.23.19.37.27;	author carlton;	state Exp;
branches;
next	1.24.18.2;

1.24.18.2
date	2003.06.27.21.49.06;	author carlton;	state Exp;
branches;
next	1.24.18.3;

1.24.18.3
date	2003.12.15.23.59.13;	author carlton;	state Exp;
branches;
next	;

1.24.20.1
date	2003.12.14.20.26.34;	author drow;	state Exp;
branches;
next	;

1.18.2.1
date	2001.06.07.03.08.23;	author amodra;	state Exp;
branches;
next	;

1.1.1.1
date	99.05.03.07.28.55;	author rth;	state Exp;
branches;
next	;


desc
@@


1.42
log
@	* aix386-core.c: Remove use of PTR and PARAMS macros.
	* archive.c: Likewise.
	* cache.c: Likewise.
	* cisco-core.c: Likewise.
	* coff-alpha.c: Likewise.
	* coff-apollo.c: Likewise.
	* coff-aux.c: Likewise.
	* coff-h8300.c: Likewise.
	* coff-h8500.c: Likewise.
	* coff-i386.c: Likewise.
	* coff-i960.c: Likewise.
	* coff-ia64.c: Likewise.
	* coff-m68k.c: Likewise.
	* coff-m88k.c: Likewise.
	* coff-mcore.c: Likewise.
	* coff-mips.c: Likewise.
	* coff-or32.c: Likewise.
	* coff-ppc.c: Likewise.
	* coff-rs6000.c: Likewise.
	* coff-sh.c: Likewise.
	* coff-sparc.c: Likewise.
	* coff-stgo32.c: Likewise.
	* coff-tic30.c: Likewise.
	* coff-tic4x.c: Likewise.
	* coff-tic54x.c: Likewise.
	* coff-tic80.c: Likewise.
	* coff-w65.c: Likewise.
	* cofflink.c: Likewise.
	* cpu-arc.c: Likewise.
	* cpu-cris.c: Likewise.
	* cpu-h8500.c: Likewise.
	* cpu-i960.c: Likewise.
	* cpu-msp430.c: Likewise.
	* cpu-ns32k.c: Likewise.
	* cpu-powerpc.c: Likewise.
	* cpu-rs6000.c: Likewise.
	* cpu-tic4x.c: Likewise.
	* cpu-w65.c: Likewise.
	* ecoff.c: Likewise.
	* ecofflink.c: Likewise.
	* elf-m10200.c: Likewise.
	* elf32-bfin.c: Likewise.
	* elf32-cris.c: Likewise.
	* elf32-crx.c: Likewise.
	* elf32-fr30.c: Likewise.
	* elf32-frv.c: Likewise.
	* elf32-h8300.c: Likewise.
	* elf32-i960.c: Likewise.
	* elf32-m32c.c: Likewise.
	* elf32-m68hc11.c: Likewise.
	* elf32-m68hc12.c: Likewise.
	* elf32-m68hc1x.c: Likewise.
	* elf32-m68k.c: Likewise.
	* elf32-mcore.c: Likewise.
	* elf32-rl78.c: Likewise.
	* elf32-rx.c: Likewise.
	* elf32-s390.c: Likewise.
	* elf32-vax.c: Likewise.
	* elf64-alpha.c: Likewise.
	* elf64-mmix.c: Likewise.
	* elf64-s390.c: Likewise.
	* elf64-sparc.c: Likewise.
	* elfnn-ia64.c: Likewise.
	* elfxx-mips.c: Likewise.
	* elfxx-sparc.c: Likewise.
	* hash.c: Likewise.
	* hp300hpux.c: Likewise.
	* hppabsd-core.c: Likewise.
	* hpux-core.c: Likewise.
	* i386dynix.c: Likewise.
	* i386linux.c: Likewise.
	* i386lynx.c: Likewise.
	* i386mach3.c: Likewise.
	* i386msdos.c: Likewise.
	* i386os9k.c: Likewise.
	* irix-core.c: Likewise.
	* lynx-core.c: Likewise.
	* m68klinux.c: Likewise.
	* mach-o.h: Likewise.
	* mipsbsd.c: Likewise.
	* netbsd-core.c: Likewise.
	* nlm32-i386.c: Likewise.
	* osf-core.c: Likewise.
	* pc532-mach.c: Likewise.
	* pef.c: Likewise.
	* ppcboot.c: Likewise.
	* ptrace-core.c: Likewise.
	* reloc16.c: Likewise.
	* sco5-core.c: Likewise.
	* som.h: Likewise.
	* sparclinux.c: Likewise.
	* sparclynx.c: Likewise.
	* ticoff.h: Likewise.
	* trad-core.c: Likewise.
	* vms-lib.c: Likewise.
	* xsym.h: Likewise.
@
text
@/* BFD back-end for Motorola MCore COFF/PE
   Copyright 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2010, 2011, 2012
   Free Software Foundation, Inc.

   This file is part of BFD, the Binary File Descriptor library.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, 51 Franklin Street - Fifth Floor,
   Boston, MA 02110-1301, USA.  */

#include "sysdep.h"
#include "bfd.h"
#include "libbfd.h"
#include "coff/mcore.h"
#include "coff/internal.h"
#include "coff/pe.h"
#include "libcoff.h"

#ifdef BADMAG
#undef BADMAG
#endif
#define BADMAG(x) MCOREBADMAG(x)

#ifndef NUM_ELEM
#define NUM_ELEM(A) (sizeof (A) / sizeof (A)[0])
#endif

/* This file is compiled more than once, but we only compile the
   final_link routine once.  */
extern bfd_boolean mcore_bfd_coff_final_link
  (bfd *, struct bfd_link_info *);
static bfd_reloc_status_type mcore_coff_unsupported_reloc
  (bfd *, arelent *, asymbol *, void *, asection *, bfd *, char **);


/* The NT loader points the toc register to &toc + 32768, in order to
   use the complete range of a 16-bit displacement. We have to adjust
   for this when we fix up loads displaced off the toc reg.  */
#define TOC_LOAD_ADJUSTMENT (-32768)
#define TOC_SECTION_NAME ".private.toc"

/* The main body of code is in coffcode.h.  */
#define COFF_DEFAULT_SECTION_ALIGNMENT_POWER 2

/* In case we're on a 32-bit machine, construct a 64-bit "-1" value
   from smaller values.  Start with zero, widen, *then* decrement.  */
#define MINUS_ONE	(((bfd_vma)0) - 1)

static reloc_howto_type mcore_coff_howto_table[] =
{
  /* Unused: */
  HOWTO (IMAGE_REL_MCORE_ABSOLUTE,/* type */
	 0,	                 /* rightshift */
	 0,	                 /* size (0 = byte, 1 = short, 2 = long) */
	 0,	                 /* bitsize */
	 FALSE,	                 /* pc_relative */
	 0,	                 /* bitpos */
	 complain_overflow_dont, /* dont complain_on_overflow */
	 NULL,		         /* special_function */
	 "ABSOLUTE",             /* name */
	 FALSE,	                 /* partial_inplace */
	 0x00,	 	         /* src_mask */
	 0x00,        		 /* dst_mask */
	 FALSE),                 /* pcrel_offset */

  HOWTO (IMAGE_REL_MCORE_ADDR32,/* type */
	 0,	                /* rightshift */
	 2,	                /* size (0 = byte, 1 = short, 2 = long) */
	 32,	                /* bitsize */
	 FALSE,	                /* pc_relative */
	 0,	                /* bitpos */
	 complain_overflow_bitfield, /* complain_on_overflow */
	 NULL,		        /* special_function */
	 "ADDR32",              /* name */
	 TRUE,	                /* partial_inplace */
	 0xffffffff,            /* src_mask */
	 0xffffffff,            /* dst_mask */
	 FALSE),                /* pcrel_offset */

  /* 8 bits + 2 zero bits; jmpi/jsri/lrw instructions.
     Should not appear in object files.  */
  HOWTO (IMAGE_REL_MCORE_PCREL_IMM8BY4,	/* type */
	 2,			/* rightshift */
	 1,			/* size (0 = byte, 1 = short, 2 = long) */
	 8,			/* bitsize */
	 TRUE,			/* pc_relative */
	 0,			/* bitpos */
	 complain_overflow_bitfield, /* complain_on_overflow */
	 mcore_coff_unsupported_reloc, /* special_function */
	 "IMM8BY4",             /* name */
	 FALSE,			/* partial_inplace */
	 0,			/* src_mask */
	 0,			/* dst_mask */
	 TRUE),			/* pcrel_offset */

  /* bsr/bt/bf/br instructions; 11 bits + 1 zero bit
     Span 2k instructions == 4k bytes.
     Only useful pieces at the relocated address are the opcode (5 bits) */
  HOWTO (IMAGE_REL_MCORE_PCREL_IMM11BY2,/* type */
	 1,			/* rightshift */
	 1,			/* size (0 = byte, 1 = short, 2 = long) */
	 11,			/* bitsize */
	 TRUE,			/* pc_relative */
	 0,			/* bitpos */
	 complain_overflow_signed, /* complain_on_overflow */
	 NULL,	                /* special_function */
	 "IMM11BY2",            /* name */
	 FALSE,			/* partial_inplace */
	 0x0,			/* src_mask */
	 0x7ff,			/* dst_mask */
	 TRUE),			/* pcrel_offset */

  /* 4 bits + 1 zero bit; 'loopt' instruction only; unsupported.  */
  HOWTO (IMAGE_REL_MCORE_PCREL_IMM4BY2,	/* type */
	 1,			/* rightshift */
	 1,			/* size (0 = byte, 1 = short, 2 = long) */
	 4,			/* bitsize */
	 TRUE,			/* pc_relative */
	 0,			/* bitpos */
	 complain_overflow_bitfield, /* complain_on_overflow */
	 mcore_coff_unsupported_reloc, /* special_function */
	 "IMM4BY2",              /* name */
	 FALSE,			/* partial_inplace */
	 0,			/* src_mask */
	 0,			/* dst_mask */
	 TRUE),			/* pcrel_offset */

  /* 32-bit pc-relative. Eventually this will help support PIC code.  */
  HOWTO (IMAGE_REL_MCORE_PCREL_32,/* type */
	 0,			/* rightshift */
	 2,			/* size (0 = byte, 1 = short, 2 = long) */
	 32,			/* bitsize */
	 TRUE,			/* pc_relative */
	 0,			/* bitpos */
	 complain_overflow_bitfield, /* complain_on_overflow */
	 NULL,	                /* special_function */
	 "PCREL_32",	        /* name */
	 FALSE,			/* partial_inplace */
	 0x0,			/* src_mask */
	 0xffffffff,		/* dst_mask */
	 TRUE),			/* pcrel_offset */

  /* Like PCREL_IMM11BY2, this relocation indicates that there is a
     'jsri' at the specified address. There is a separate relocation
     entry for the literal pool entry that it references, but we
     might be able to change the jsri to a bsr if the target turns out
     to be close enough [even though we won't reclaim the literal pool
     entry, we'll get some runtime efficiency back]. Note that this
     is a relocation that we are allowed to safely ignore.  */
  HOWTO (IMAGE_REL_MCORE_PCREL_JSR_IMM11BY2,/* type */
	 1,			/* rightshift */
	 1,			/* size (0 = byte, 1 = short, 2 = long) */
	 11,			/* bitsize */
	 TRUE,			/* pc_relative */
	 0,			/* bitpos */
	 complain_overflow_signed, /* complain_on_overflow */
	 NULL,	                /* special_function */
	 "JSR_IMM11BY2",        /* name */
	 FALSE,			/* partial_inplace */
	 0x0,			/* src_mask */
	 0x7ff,			/* dst_mask */
	 TRUE),			/* pcrel_offset */

  HOWTO (IMAGE_REL_MCORE_RVA,   /* type */
	 0,			/* rightshift */
	 2,			/* size (0 = byte, 1 = short, 2 = long) */
	 32,			/* bitsize */
	 FALSE,			/* pc_relative */
	 0,			/* bitpos */
	 complain_overflow_signed, /* complain_on_overflow */
	 NULL,                  /* special_function */
	 "MCORE_RVA",           /* name */
	 TRUE,			/* partial_inplace */
	 0xffffffff,		/* src_mask */
	 0xffffffff,		/* dst_mask */
	 TRUE)			/* pcrel_offset */
};

/* Extend the coff_link_hash_table structure with a few M*Core specific fields.
   This allows us to store global data here without actually creating any
   global variables, which is a no-no in the BFD world.  */
typedef struct coff_mcore_link_hash_table
{
  /* The original coff_link_hash_table structure.  MUST be first field.  */
  struct coff_link_hash_table	root;

  bfd *                         bfd_of_toc_owner;
  long int                      global_toc_size;
  long int                      import_table_size;
  long int                      first_thunk_address;
  long int                      thunk_size;
}
mcore_hash_table;

/* Get the MCore coff linker hash table from a link_info structure.  */
#define coff_mcore_hash_table(info) \
  ((mcore_hash_table *) ((info)->hash))


/* Add an entry to the base file.  */

static bfd_boolean
mcore_emit_base_file_entry (struct bfd_link_info *info,
			    bfd *output_bfd,
			    asection *input_section,
			    bfd_vma reloc_offset)
{
  bfd_vma addr = reloc_offset
                 - input_section->vma
                 + input_section->output_offset
                 + input_section->output_section->vma;

  if (coff_data (output_bfd)->pe)
     addr -= pe_data (output_bfd)->pe_opthdr.ImageBase;

  if (fwrite (&addr, sizeof (addr), 1, (FILE *) info->base_file) == 1)
    return TRUE;

  bfd_set_error (bfd_error_system_call);
  return FALSE;
}

static bfd_reloc_status_type
mcore_coff_unsupported_reloc (bfd * abfd,
			      arelent * reloc_entry,
			      asymbol * symbol ATTRIBUTE_UNUSED,
			      void * data ATTRIBUTE_UNUSED,
			      asection * input_section ATTRIBUTE_UNUSED,
			      bfd * output_bfd ATTRIBUTE_UNUSED,
			      char ** error_message ATTRIBUTE_UNUSED)
{
  BFD_ASSERT (reloc_entry->howto != (reloc_howto_type *)0);

  _bfd_error_handler (_("%B: Relocation %s (%d) is not currently supported.\n"),
		      abfd,
		      reloc_entry->howto->name,
		      reloc_entry->howto->type);

  return bfd_reloc_notsupported;
}

/* A cheesy little macro to make the code a little more readable.  */
#define HOW2MAP(bfd_rtype, mcore_rtype)  \
 case bfd_rtype: return & mcore_coff_howto_table [mcore_rtype]

static reloc_howto_type *
mcore_coff_reloc_type_lookup (bfd * abfd ATTRIBUTE_UNUSED,
			      bfd_reloc_code_real_type code)
{
  switch (code)
    {
      HOW2MAP (BFD_RELOC_32,                       IMAGE_REL_MCORE_ADDR32);
      HOW2MAP (BFD_RELOC_MCORE_PCREL_IMM8BY4,      IMAGE_REL_MCORE_PCREL_IMM8BY4);
      HOW2MAP (BFD_RELOC_MCORE_PCREL_IMM11BY2,     IMAGE_REL_MCORE_PCREL_IMM11BY2);
      HOW2MAP (BFD_RELOC_MCORE_PCREL_IMM4BY2,      IMAGE_REL_MCORE_PCREL_IMM4BY2);
      HOW2MAP (BFD_RELOC_32_PCREL,                 IMAGE_REL_MCORE_PCREL_32);
      HOW2MAP (BFD_RELOC_MCORE_PCREL_JSR_IMM11BY2, IMAGE_REL_MCORE_PCREL_JSR_IMM11BY2);
      HOW2MAP (BFD_RELOC_RVA,                      IMAGE_REL_MCORE_RVA);
   default:
      return NULL;
    }
  /*NOTREACHED*/
}
#undef HOW2MAP

static reloc_howto_type *
mcore_coff_reloc_name_lookup (bfd *abfd ATTRIBUTE_UNUSED,
			      const char *r_name)
{
  unsigned int i;

  for (i = 0;
       i < (sizeof (mcore_coff_howto_table)
	    / sizeof (mcore_coff_howto_table[0]));
       i++)
    if (mcore_coff_howto_table[i].name != NULL
	&& strcasecmp (mcore_coff_howto_table[i].name, r_name) == 0)
      return &mcore_coff_howto_table[i];

  return NULL;
}

#define RTYPE2HOWTO(cache_ptr, dst) \
  (cache_ptr)->howto = mcore_coff_howto_table + (dst)->r_type;

static reloc_howto_type *
coff_mcore_rtype_to_howto (bfd * abfd ATTRIBUTE_UNUSED,
			   asection * sec,
			   struct internal_reloc * rel,
			   struct coff_link_hash_entry * h ATTRIBUTE_UNUSED,
			   struct internal_syment * sym,
			   bfd_vma * addendp)
{
  reloc_howto_type * howto;

  if (rel->r_type >= NUM_ELEM (mcore_coff_howto_table))
    return NULL;

  howto = mcore_coff_howto_table + rel->r_type;

  if (rel->r_type == IMAGE_REL_MCORE_RVA)
    * addendp -= pe_data (sec->output_section->owner)->pe_opthdr.ImageBase;

  else if (howto->pc_relative)
    {
      * addendp = sec->vma - 2; /* XXX guess - is this right ? */

      /* If the symbol is defined, then the generic code is going to
         add back the symbol value in order to cancel out an
         adjustment it made to the addend.  However, we set the addend
         to 0 at the start of this function.  We need to adjust here,
         to avoid the adjustment the generic code will make.  FIXME:
         This is getting a bit hackish.  */
      if (sym != NULL && sym->n_scnum != 0)
	* addendp -= sym->n_value;
    }
  else
    * addendp = 0;

  return howto;
}

/* Return TRUE if this relocation should appear in the output .reloc section.
   This function is referenced in pe_mkobject in peicode.h.  */

static bfd_boolean
in_reloc_p (bfd * abfd ATTRIBUTE_UNUSED, reloc_howto_type * howto)
{
  return ! howto->pc_relative && howto->type != IMAGE_REL_MCORE_RVA;
}

/* The reloc processing routine for the optimized COFF linker.  */
static bfd_boolean
coff_mcore_relocate_section (bfd * output_bfd,
			     struct bfd_link_info * info,
			     bfd * input_bfd,
			     asection * input_section,
			     bfd_byte * contents,
			     struct internal_reloc * relocs,
			     struct internal_syment * syms,
			     asection ** sections)
{
  struct internal_reloc * rel;
  struct internal_reloc * relend;

  /* If we are performing a relocatable link, we don't need to do a
     thing.  The caller will take care of adjusting the reloc
     addresses and symbol indices.  */
  if (info->relocatable)
    return TRUE;

  /* Check if we have the same endianness */
  if (   input_bfd->xvec->byteorder != output_bfd->xvec->byteorder
      && output_bfd->xvec->byteorder != BFD_ENDIAN_UNKNOWN)
    {
      (*_bfd_error_handler)
	(_("%B: compiled for a %s system and target is %s.\n"),
	 input_bfd,
         bfd_big_endian (input_bfd) ? _("big endian") : _("little endian"),
         bfd_big_endian (output_bfd) ? _("big endian") : _("little endian"));

      bfd_set_error (bfd_error_wrong_format);
      return FALSE;
    }

  rel = relocs;
  relend = rel + input_section->reloc_count;

  for (; rel < relend; rel++)
    {
      long                           symndx;
      struct internal_syment *       sym;
      bfd_vma                        val;
      bfd_vma                        addend;
      bfd_reloc_status_type          rstat;
      bfd_byte *                     loc;
      unsigned short                 r_type = rel->r_type;
      reloc_howto_type *             howto = NULL;
      struct coff_link_hash_entry *  h;
      const char *                   my_name;

      symndx = rel->r_symndx;
      loc = contents + rel->r_vaddr - input_section->vma;

      if (symndx == -1)
	{
	  h = NULL;
	  sym = NULL;
	}
      else
	{
	  h = obj_coff_sym_hashes (input_bfd)[symndx];
	  sym = syms + symndx;
	}

      addend = 0;

      /* Get the howto and initialise the addend.  */
      howto = bfd_coff_rtype_to_howto (input_bfd, input_section, rel, h,
				       sym, & addend);
      if (howto == NULL)
	return FALSE;

      val = 0;

      if (h == NULL)
	{
	  if (symndx == -1)
	    my_name = "*ABS*";
	  else
	    {
	      asection * sec = sections[symndx];

	      val = (sym->n_value
		     + sec->output_section->vma
		     + sec->output_offset);

	      if (sym == NULL)
		my_name = "*unknown*";
	      else if (   sym->_n._n_n._n_zeroes == 0
		       && sym->_n._n_n._n_offset != 0)
		my_name = obj_coff_strings (input_bfd) + sym->_n._n_n._n_offset;
	      else
		{
		  static char buf [SYMNMLEN + 1];

		  strncpy (buf, sym->_n._n_name, SYMNMLEN);
		  buf[SYMNMLEN] = '\0';
		  my_name = buf;
		}
	    }
	}
      else
	{
	  if (   h->root.type == bfd_link_hash_defined
	      || h->root.type == bfd_link_hash_defweak)
	    {
	      asection * sec = h->root.u.def.section;

	      val = (h->root.u.def.value
		     + sec->output_section->vma
		     + sec->output_offset);
	    }
	  else
	    {
	      if (! ((*info->callbacks->undefined_symbol)
		     (info, h->root.root.string, input_bfd, input_section,
		      rel->r_vaddr - input_section->vma, TRUE)))
		return FALSE;
	    }

	  my_name = h->root.root.string;
	}

      rstat = bfd_reloc_ok;

      /* Each case must do its own relocation, setting rstat appropriately.  */
      switch (r_type)
	{
	default:
	  _bfd_error_handler (_("%B: unsupported relocation type 0x%02x"),
			      input_bfd, r_type);
	  bfd_set_error (bfd_error_bad_value);
	  return FALSE;

	case IMAGE_REL_MCORE_ABSOLUTE:
	  _bfd_error_handler
	    (_("Warning: unsupported reloc %s <file %B, section %A>\n"
	       "sym %ld (%s), r_vaddr %ld (%lx)"),
	     input_bfd, input_section, howto->name,
	     rel->r_symndx, my_name, (long) rel->r_vaddr,
	     (unsigned long) rel->r_vaddr);
	  break;

	case IMAGE_REL_MCORE_PCREL_IMM8BY4:
	case IMAGE_REL_MCORE_PCREL_IMM11BY2:
	case IMAGE_REL_MCORE_PCREL_IMM4BY2:
	case IMAGE_REL_MCORE_PCREL_32:
	case IMAGE_REL_MCORE_PCREL_JSR_IMM11BY2:
	case IMAGE_REL_MCORE_ADDR32:
	  /* XXX fixme - shouldn't this be like the code for the RVA reloc ? */
	  rstat = _bfd_relocate_contents (howto, input_bfd, val, loc);
	  break;

	case IMAGE_REL_MCORE_RVA:
	  rstat = _bfd_final_link_relocate
	    (howto, input_bfd,
	     input_section, contents, rel->r_vaddr - input_section->vma,
	     val, addend);
	  break;
	}

      /* Emit a reloc if the backend thinks it needs it.  */
      if (info->base_file
	  && sym
	  && pe_data (output_bfd)->in_reloc_p (output_bfd, howto)
	  && !mcore_emit_base_file_entry (info, output_bfd, input_section,
					  rel->r_vaddr))
	return FALSE;

      switch (rstat)
	{
	default:
	  abort ();

	case bfd_reloc_ok:
	  break;

	case bfd_reloc_overflow:
	  if (! ((*info->callbacks->reloc_overflow)
		 (info, (h ? &h->root : NULL), my_name, howto->name,
		  (bfd_vma) 0, input_bfd,
		  input_section, rel->r_vaddr - input_section->vma)))
	    return FALSE;
	}
    }

  return TRUE;
}

/* Tailor coffcode.h -- macro heaven.  */

/* We use the special COFF backend linker, with our own special touch.  */

#define coff_bfd_reloc_type_lookup   mcore_coff_reloc_type_lookup
#define coff_bfd_reloc_name_lookup mcore_coff_reloc_name_lookup
#define coff_relocate_section        coff_mcore_relocate_section
#define coff_rtype_to_howto          coff_mcore_rtype_to_howto

#define SELECT_RELOC(internal, howto) {internal.r_type = howto->type;}

/* Make sure that the 'r_offset' field is copied properly
   so that identical binaries will compare the same.  */
#define SWAP_IN_RELOC_OFFSET         H_GET_32
#define SWAP_OUT_RELOC_OFFSET        H_PUT_32

#define COFF_PAGE_SIZE               0x1000

#include "coffcode.h"

/* Forward declaration to initialise alternative_target field.  */
extern const bfd_target TARGET_LITTLE_SYM;

/* The transfer vectors that lead the outside world to all of the above.  */
CREATE_BIG_COFF_TARGET_VEC (TARGET_BIG_SYM, TARGET_BIG_NAME, D_PAGED,
			    (SEC_CODE | SEC_DATA | SEC_DEBUGGING | SEC_READONLY | SEC_LINK_ONCE | SEC_LINK_DUPLICATES),
			    0, & TARGET_LITTLE_SYM, COFF_SWAP_TABLE)
CREATE_LITTLE_COFF_TARGET_VEC (TARGET_LITTLE_SYM, TARGET_LITTLE_NAME, D_PAGED,
			       (SEC_CODE | SEC_DATA | SEC_DEBUGGING | SEC_READONLY | SEC_LINK_ONCE | SEC_LINK_DUPLICATES),
			       0, & TARGET_BIG_SYM, COFF_SWAP_TABLE)
@


1.41
log
@Fix spelling mistakes.
@
text
@d2 1
a2 1
   Copyright 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2010, 2011
d42 1
a42 1
  PARAMS ((bfd *, struct bfd_link_info *));
d44 2
a45 11
  PARAMS ((bfd *, arelent *, asymbol *, PTR, asection *, bfd *, char **));
static bfd_boolean coff_mcore_relocate_section
  PARAMS ((bfd *, struct bfd_link_info *, bfd *, asection *, bfd_byte *,
	   struct internal_reloc *, struct internal_syment *, asection **));
static reloc_howto_type *mcore_coff_reloc_type_lookup
  PARAMS ((bfd *, bfd_reloc_code_real_type));
static reloc_howto_type *coff_mcore_rtype_to_howto
  PARAMS ((bfd *, asection *, struct internal_reloc *,
	   struct coff_link_hash_entry *, struct internal_syment *,
	   bfd_vma *));
static bfd_boolean in_reloc_p PARAMS ((bfd *, reloc_howto_type *));
d235 7
a241 9
mcore_coff_unsupported_reloc (abfd, reloc_entry, symbol, data, input_section,
			   output_bfd, error_message)
     bfd * abfd;
     arelent * reloc_entry;
     asymbol * symbol ATTRIBUTE_UNUSED;
     PTR data ATTRIBUTE_UNUSED;
     asection * input_section ATTRIBUTE_UNUSED;
     bfd * output_bfd ATTRIBUTE_UNUSED;
     char ** error_message ATTRIBUTE_UNUSED;
d258 2
a259 3
mcore_coff_reloc_type_lookup (abfd, code)
     bfd * abfd ATTRIBUTE_UNUSED;
     bfd_reloc_code_real_type code;
d298 6
a303 7
coff_mcore_rtype_to_howto (abfd, sec, rel, h, sym, addendp)
     bfd * abfd ATTRIBUTE_UNUSED;
     asection * sec;
     struct internal_reloc * rel;
     struct coff_link_hash_entry * h ATTRIBUTE_UNUSED;
     struct internal_syment * sym;
     bfd_vma * addendp;
d338 1
a338 3
in_reloc_p (abfd, howto)
     bfd * abfd ATTRIBUTE_UNUSED;
     reloc_howto_type * howto;
d345 8
a352 10
coff_mcore_relocate_section (output_bfd, info, input_bfd, input_section,
			   contents, relocs, syms, sections)
     bfd * output_bfd;
     struct bfd_link_info * info;
     bfd * input_bfd;
     asection * input_section;
     bfd_byte * contents;
     struct internal_reloc * relocs;
     struct internal_syment * syms;
     asection ** sections;
@


1.40
log
@fix set but unused variable warnings
@
text
@d2 1
a2 1
   Copyright 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2010
d380 1
a380 1
  /* Check if we have the same endianess */
@


1.39
log
@	* coff-arm.c (arm_emit_base_file_entry): Check fwrite return value.
	Return status.  Adjust callers.
	* coff-mcore.c (mcore_emit_base_file_entry): Likewise.
	* coff-ppc.c (write_base_file_entry): New function.
	(coff_ppc_relocate_section): Use it.
	* elf32-arm.c (find_thumb_glue): Check asprintf return status.
	(find_arm_glue): Likewise.
	* vms-misc.c (_bfd_vms_output_flush): Check fwrite return value.
@
text
@d2 1
a2 1
   Copyright 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007
a372 2
  bfd_boolean hihalf;
  bfd_vma hihalf_val;
a393 3
  hihalf = FALSE;
  hihalf_val = 0;

@


1.38
log
@Switch sources over to use the GPL version 3
@
text
@a53 2
static void mcore_emit_base_file_entry
  PARAMS ((struct bfd_link_info *, bfd *, asection *, bfd_vma));
d222 5
a226 6
static void
mcore_emit_base_file_entry (info, output_bfd, input_section, reloc_offset)
      struct bfd_link_info * info;
      bfd *                  output_bfd;
      asection *             input_section;
      bfd_vma                reloc_offset;
d236 5
a240 1
  fwrite (&addr, 1, sizeof (addr), (FILE *) info->base_file);
d526 7
a532 6
      if (info->base_file)
	{
	  /* Emit a reloc if the backend thinks it needs it.  */
	  if (sym && pe_data (output_bfd)->in_reloc_p (output_bfd, howto))
            mcore_emit_base_file_entry (info, output_bfd, input_section, rel->r_vaddr);
	}
@


1.37
log
@
bfd/
	Many files: Include sysdep.h before bfd.h.
	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.
binutils/
	* bucumm.h: Split off host dependencies to..
	* sysdep.h: ..here.
	Many files: Include sysdep.h.  Remove duplicate headers and reorder.
	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.
ld/
	Many files: Include sysdep.h first.  Remove duplicate headers.
	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.
opcodes/
	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.
	* ns32k-dis.c: Include sysdep.h first.
@
text
@d5 1
a5 1
This file is part of BFD, the Binary File Descriptor library.
d7 14
a20 14
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, 51 Franklin Street - Fifth Floor,
Boston, MA 02110-1301, USA.  */
@


1.36
log
@	* aout-adobe.c (aout_32_bfd_reloc_name_lookup): Define.
	* aout-arm.c (MY_bfd_reloc_name_lookup): Define.
	(MY (bfd_reloc_name_lookup)): New function.
	* aout-ns32k.c (MY (bfd_reloc_name_lookup)): New function.
	* aout-target.h (NAME (aout, reloc_name_lookup)): Declare.
	(MY_bfd_reloc_name_lookup): Define.
	* aout-tic30.c (tic30_aout_reloc_name_lookup): New function.
	(MY_bfd_reloc_name_lookup): Define.
	* aoutx.h (NAME (aout, reloc_type_lookup)): Don't declare.
	(NAME (aout, reloc_name_lookup)): New function.
	* bout.c (b_out_bfd_reloc_name_lookup): New function.
	* coff-alpha.c (alpha_bfd_reloc_name_lookup): New function.
	(_bfd_ecoff_bfd_reloc_name_lookup): Define.
	* coff-arm.c (coff_arm_reloc_name_lookup): New function.
	(coff_bfd_reloc_name_lookup): Define.
	* coff-i386.c (coff_bfd_reloc_name_lookup): Define.
	(coff_i386_reloc_name_lookup): New function.
	* coff-i860.c (coff_i860_reloc_name_lookup): New function.
	(coff_bfd_reloc_name_lookup): Define.
	* coff-i960.c (coff_i960_reloc_name_lookup): New function.
	(coff_bfd_reloc_name_lookup): Define.
	* coff-m68k.c (m68k_reloc_name_lookup): New function.
	(coff_bfd_reloc_name_lookup): Define.
	* coff-maxq.c (maxq_reloc_name_lookup): New function.
	(coff_bfd_reloc_name_lookup): Define.
	* coff-mcore.c (mcore_coff_reloc_name_lookup): New function.
	(coff_bfd_reloc_name_lookup): Define.
	* coff-mips.c (mips_bfd_reloc_name_lookup): New function.
	(_bfd_ecoff_bfd_reloc_name_lookup): Define.
	* coff-ppc.c (ppc_coff_reloc_name_lookup): New function.
	(coff_bfd_reloc_name_lookup): Define.
	* coff-rs6000.c (coff_bfd_reloc_name_lookup): Define.
	(_bfd_xcoff_reloc_name_lookup): New function.
	(rs6000coff_vec, pmac_xcoff_vec): Init new field.
	* coff-sh.c (coff_bfd_reloc_name_lookup): Define.
	(sh_coff_reloc_name_lookup): New function.
	* coff-sparc.c (coff_sparc_reloc_name_lookup): New function.
	(coff_bfd_reloc_name_lookup): Define.
	* coff-tic30.c (coff_bfd_reloc_name_lookup): Define.
	(tic30_coff_reloc_name_lookup): New function.
	* coff-tic4x.c (coff_bfd_reloc_name_lookup): Define.
	(tic4x_coff_reloc_name_lookup): New function.
	* coff-tic54x.c (coff_bfd_reloc_name_lookup): Define.
	(tic54x_coff_reloc_name_lookup): New function.
	* coff-x86_64.c (coff_bfd_reloc_name_lookup): Define.
	(coff_amd64_reloc_name_lookup): New function.
	* coff-z80.c (coff_z80_reloc_name_lookup): New function.
	(coff_bfd_reloc_name_lookup): Define.
	* coff-z8k.c (coff_z8k_reloc_name_lookup): New function.
	(coff_bfd_reloc_name_lookup): Define.
	* coff64-rs6000.c (coff_bfd_reloc_name_lookup): Define.
	(xcoff64_reloc_name_lookup): New function.
	(rs6000coff64_vec, aix5coff64_vec): Init new field.
	* coffcode.h (coff_bfd_reloc_name_lookup): Define.
	* elf-hppa.h (elf_hppa_reloc_name_lookup): New function.
	* elf-m10200.c (bfd_elf32_bfd_reloc_name_lookup): New function.
	* elf-m10300.c (bfd_elf32_bfd_reloc_name_lookup): New function.
	* elf32-arc.c (bfd_elf32_bfd_reloc_name_lookup): New function.
	* elf32-arm.c (elf32_arm_reloc_name_lookup): New function.
	(bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-avr.c (bfd_elf32_bfd_reloc_name_lookup): New function.
	* elf32-bfin.c (bfin_bfd_reloc_name_lookup): New function.
	(bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-cr16c.c (elf_cr16c_reloc_name_lookup): New function.
	(bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-cris.c (cris_reloc_name_lookup): New function.
	(bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-crx.c (elf_crx_reloc_name_lookup): New function.
	(bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-d10v.c (bfd_elf32_bfd_reloc_name_lookup): New function.
	* elf32-d30v.c (bfd_elf32_bfd_reloc_name_lookup): New function.
	* elf32-dlx.c (elf32_dlx_reloc_name_lookup): New function.
	(bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-fr30.c (fr30_reloc_name_lookup): New function.
	(bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-frv.c (frv_reloc_name_lookup): New function.
	(bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-gen.c (bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-h8300.c (elf32_h8_reloc_name_lookup): New function.
	(bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-hppa.c (bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-i370.c (i370_elf_reloc_name_lookup): New function.
	(bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-i386.c (elf_i386_reloc_name_lookup): New function.
	(bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-i860.c (elf32_i860_reloc_name_lookup): New function.
	(bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-i960.c (elf32_i960_reloc_name_lookup): New function.
	(bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-ip2k.c (ip2k_reloc_name_lookup): New function.
	(bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-iq2000.c (iq2000_reloc_name_lookup): New function.
	(bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-m32c.c (m32c_reloc_name_lookup): New function.
	(bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-m32r.c (bfd_elf32_bfd_reloc_name_lookup): New function.
	* elf32-m68hc11.c (bfd_elf32_bfd_reloc_name_lookup): New function.
	* elf32-m68hc12.c (bfd_elf32_bfd_reloc_name_lookup): New function.
	* elf32-m68k.c (reloc_name_lookup): New function.
	(bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-m88k.c (bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-mcore.c (mcore_elf_reloc_name_lookup): New function.
	(bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-mep.c (mep_reloc_name_lookup): New function.
	(bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-mips.c (bfd_elf32_bfd_reloc_name_lookup): New function.
	(mips_vxworks_bfd_reloc_name_lookup): Likewise.
	(bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-msp430.c (bfd_elf32_bfd_reloc_name_lookup): New function.
	* elf32-mt.c (mt_reloc_name_lookup): New function.
	(bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-openrisc.c (openrisc_reloc_name_lookup): New function.
	(bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-or32.c (bfd_elf32_bfd_reloc_name_lookup): New function.
	* elf32-pj.c (pj_elf_reloc_name_lookup): New function.
	(bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-ppc.c (ppc_elf_reloc_name_lookup): New function.
	(bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-s390.c (elf_s390_reloc_name_lookup): New function.
	(bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-score.c (elf32_score_reloc_name_lookup): New function.
	(bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-sh.c (sh_elf_reloc_name_lookup): New function.
	(bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-sparc.c (bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-spu.c (spu_elf_reloc_name_lookup): New function.
	(bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-v850.c (v850_elf_reloc_name_lookup): New function.
	(bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-vax.c (reloc_name_lookup): New function.
	(bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-xc16x.c (xc16x_reloc_name_lookup): New function.
	(bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-xstormy16.c (xstormy16_reloc_name_lookup): New function.
	(bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-xtensa.c (elf_xtensa_reloc_name_lookup): New function.
	(bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf64-alpha.c (elf64_alpha_bfd_reloc_name_lookup): New function.
	(bfd_elf64_bfd_reloc_name_lookup): Define.
	* elf64-gen.c (bfd_elf64_bfd_reloc_name_lookup): Define.
	* elf64-hppa.c (bfd_elf64_bfd_reloc_name_lookup): Define.
	* elf64-mips.c (bfd_elf64_bfd_reloc_name_lookup): New function.
	* elf64-mmix.c (bfd_elf64_bfd_reloc_name_lookup): New function.
	* elf64-ppc.c (ppc64_elf_reloc_name_lookup): New function.
	(bfd_elf64_bfd_reloc_name_lookup): Define.
	* elf64-s390.c (elf_s390_reloc_name_lookup): New function.
	(bfd_elf64_bfd_reloc_name_lookup): Define.
	* elf64-sh64.c (sh_elf64_reloc_name_lookup): New function.
	(bfd_elf64_bfd_reloc_name_lookup): Define.
	* elf64-sparc.c (bfd_elf64_bfd_reloc_name_lookup): Define.
	* elf64-x86-64.c (elf64_x86_64_reloc_name_lookup): New function.
	(bfd_elf64_bfd_reloc_name_lookup): Define.
	* elfn32-mips.c (bfd_elf32_bfd_reloc_name_lookup): New function.
	* elfxx-ia64.c (elfNN_ia64_reloc_name_lookup): New function.
	(bfd_elfNN_bfd_reloc_name_lookup): Define.
	* elfxx-sparc.c (_bfd_sparc_elf_reloc_name_lookup): New function.
	* elfxx-sparc.h (_bfd_sparc_elf_reloc_name_lookup): Declare.
	* i386msdos.c (msdos_bfd_reloc_name_lookup): Define.
	* i386os9k.c (aout_32_bfd_reloc_name_lookup): Define.
	* ieee.c (ieee_bfd_reloc_name_lookup): Define.
	* libaout.h (NAME (aout, reloc_name_lookup)): Declare.
	* libbfd-in.h (_bfd_norelocs_bfd_reloc_name_lookup): Declare.
	* mipsbsd.c (MY_bfd_reloc_name_lookup): Define.
	(MY(reloc_type_lookup)): Rename from MY(reloc_howto_type_lookup).
	(MY(reloc_name_lookup)): New function.
	* nlm-target.h (nlm_bfd_reloc_name_lookup): Define.
	* oasys.c (oasys_bfd_reloc_name_lookup): Define.
	* pdp11.c (NAME (aout, reloc_name_lookup)): New function.
	* pe-mips.c (coff_mips_reloc_name_lookup): New function.
	(coff_bfd_reloc_name_lookup): Define.
	* reloc.c (bfd_reloc_name_lookup): New function.
	* riscix.c (riscix_reloc_name_lookup): New function.
	(MY_bfd_reloc_name_lookup): Define.
	* som.c (som_bfd_reloc_name_lookup): New function.
	* targets.c (struct bfd_target): Add reloc_name_lookup.
	(BFD_JUMP_TABLE_RELOCS): Add NAME##_bfd_reloc_name_lookup.
	* versados.c (versados_bfd_reloc_name_lookup): Define.
	* vms.c (vms_bfd_reloc_name_lookup): New function.
	* bfd-in2.h: Regenerate.
	* libbfd.h: Regenerate.
@
text
@d22 1
a23 1
#include "sysdep.h"
@


1.35
log
@Update the address and phone number of the FSF organization in the GPL notices
@
text
@d2 1
a2 1
   Copyright 1999, 2000, 2001, 2002, 2003, 2004, 2005
d286 7
d294 10
a303 1
#undef HOW2MAP
d557 1
@


1.34
log
@Update the FSF address in the copyright/GPL notice
@
text
@d19 1
a19 1
Foundation, 59 Temple Place - Suite 330,
@


1.33
log
@update copyright dates
@
text
@d20 1
a20 1
Boston, MA 02111-1307, USA.  */
@


1.32
log
@	* aout-arm.c, aout-target.h, aoutx.h, archive.c, armnetbsd.c,
	bfd-in.h, bfdio.c, coff-alpha.c, coff-arm.c, coff-h8300.c,
	coff-i860.c, coff-mcore.c, coff-or32.c, coff-ppc.c, coff-sh.c,
	coff-sparc.c, coffcode.h, coffgen.c, cofflink.c, cpu-cris.c,
	cpu-h8500.c, cpu-ns32k.c, ecoff.c, ecofflink.c, elf.c,
	elf32-dlx.c, elf32-fr30.c, elf32-frv.c, elf32-hppa.c,
	elf32-i860.c, elf32-ip2k.c, elf32-m32r.c, elf32-sh.c,
	elf32-v850.c, elf64-mips.c, elf64-sparc.c, elflink.c,
	i386aout.c, i386msdos.c, i386os9k.c, ieee.c, mach-o.c,
	nlm32-sparc.c, oasys.c, opncls.c, pdp11.c, pe-mips.c, peXXigen.c,
	pef.c, peicode.h, reloc.c, riscix.c, section.c, simple.c, som.c,
	sparclynx.c, targets.c, vms-misc.c, vms-tir.c, xsym.c, doc/chew.c,
	hosts/delta68.h, hosts/vaxbsd.h: Remove #if 0'd code
	throughout. Similarly, collapse #if 1'd code.
@
text
@d2 1
a2 1
   Copyright 1999, 2000, 2001, 2002, 2003, 2004
@


1.31
log
@bfd/

2004-10-21  H.J. Lu  <hongjiu.lu@@intel.com>

	PR 463
	* aoutx.h (aout_link_input_section_std): Pass proper hash entry
	to linker reloc_overflow callback.
	(aout_link_input_section_ext): Likewise.
	(aout_link_reloc_link_order): Likewise.
	* coff-a29k.c (coff_a29k_relocate_section): Likewise.
	* coff-alpha.c (alpha_ecoff_get_relocated_section_contents):
	Likewise.
	(alpha_relocate_section): Likewise.
	* coff-arm.c (coff_arm_relocate_section): Likewise.
	* coff-h8300.c (h8300_reloc16_extra_cases): Likewise.
	* coff-h8500.c (extra_case): Likewise.
	* coff-i960.c (coff_i960_relocate_section): Likewise.
	* coff-mcore.c (coff_mcore_relocate_section): Likewise.
	* coff-mips.c (mips_relocate_section): Likewise.
	* coff-or32.c (coff_or32_relocate_section): Likewise.
	* coff-ppc.c (coff_ppc_relocate_section): Likewise.
	* coff-rs6000.c (xcoff_ppc_relocate_section): Likewise.
	* coff-sh.c (sh_relocate_section): Likewise.
	* coff-tic80.c (coff_tic80_relocate_section): Likewise.
	* coff-w65.c (w65_reloc16_extra_cases): Likewise.
	* coff-z8k.c (extra_case): Likewise.
	* coff64-rs6000.c (xcoff64_ppc_relocate_section): Likewise.
	* cofflink.c (_bfd_coff_reloc_link_order): Likewise.
	(_bfd_coff_generic_relocate_section): Likewise.
	* ecoff.c (ecoff_reloc_link_order): Likewise.
	* elf-hppa.h (elf_hppa_relocate_section): Likewise.
	* elf-m10200.c (mn10200_elf_relocate_section): Likewise.
	* elf-m10300.c (mn10300_elf_relocate_section): Likewise.
	* elf32-arm.h (elf32_arm_relocate_section): Likewise.
	* elf32-avr.c (elf32_avr_relocate_section): Likewise.
	* elf32-cr16c.c (elf32_cr16c_relocate_section): Likewise.
	* elf32-cris.c (cris_elf_relocate_section): Likewise.
	* elf32-crx.c (elf32_crx_relocate_section): Likewise.
	* elf32-d10v.c (elf32_d10v_relocate_section): Likewise.
	* elf32-fr30.c (fr30_elf_relocate_section): Likewise.
	* elf32-frv.c (elf32_frv_relocate_section): Likewise.
	* elf32-h8300.c (elf32_h8_relocate_section): Likewise.
	* elf32-hppa.c (elf32_hppa_relocate_section): Likewise.
	* elf32-i370.c (i370_elf_relocate_section): Likewise.
	* elf32-i386.c (elf_i386_relocate_section): Likewise.
	* elf32-i860.c (elf32_i860_relocate_section): Likewise.
	* elf32-ip2k.c (ip2k_elf_relocate_section): Likewise.
	* elf32-iq2000.c (iq2000_elf_relocate_section): Likewise.
	* elf32-m32r.c (m32r_elf_relocate_section): Likewise.
	* elf32-m68hc1x.c (elf32_m68hc11_relocate_section): Likewise.
	* elf32-m68k.c (elf_m68k_relocate_section): Likewise.
	* elf32-mcore.c (mcore_elf_relocate_section): Likewise.
	* elf32-msp430.c (elf32_msp430_relocate_section): Likewise.
	* elf32-openrisc.c (openrisc_elf_relocate_section): Likewise.
	* elf32-ppc.c (ppc_elf_relocate_section): Likewise.
	* elf32-s390.c (elf_s390_relocate_section): Likewise.
	* elf32-sh.c (sh_elf_relocate_section): Likewise.
	* elf32-sparc.c (elf32_sparc_relocate_section): Likewise.
	* elf32-v850.c (v850_elf_relocate_section): Likewise.
	* elf32-vax.c (elf_vax_relocate_section): Likewise.
	* elf32-xstormy16.c (xstormy16_elf_relocate_section): Likewise.
	* elf64-alpha.c (elf64_alpha_relocate_section): Likewise.
	* elf64-mmix.c (mmix_elf_relocate_section): Likewise.
	* elf64-ppc.c (ppc64_elf_relocate_section): Likewise.
	* elf64-s390.c (elf_s390_relocate_section): Likewise.
	* elf64-sh64.c (sh_elf64_relocate_section): Likewise.
	* elf64-sparc.c (sparc64_elf_relocate_section): Likewise.
	* elf64-x86-64.c (elf64_x86_64_relocate_section): Likewise.
	* elflink.c (elf_reloc_link_order): Likewise.
	* elfxx-ia64.c (elfNN_ia64_relocate_section): Likewise.
	* elfxx-mips.c (_bfd_mips_elf_relocate_section): Likewise.
	(_bfd_elf_mips_get_relocated_section_contents): Likewise.
	* linker.c (_bfd_generic_reloc_link_order): Likewise.
	* pdp11.c (pdp11_aout_link_input_section): Likewise.
	(aout_link_reloc_link_order): Likewise.
	* reloc.c (bfd_generic_get_relocated_section_contents):
	Likewise.
	* xcofflink.c (xcoff_reloc_link_order): Likewise.
	* simple.c (simple_dummy_reloc_overflow): Updated.

include/

2004-10-21  H.J. Lu  <hongjiu.lu@@intel.com>

	PR 463
	* bfdlink.h (bfd_link_callbacks): Add a pointer to struct
	bfd_link_hash_entry to reloc_overflow.

ld/

2004-10-21  H.J. Lu  <hongjiu.lu@@intel.com>

	PR 463
	* ldmain.c (reloc_overflow): Accept a pointer to struct
	bfd_link_hash_entry. Report symbol location for relocation
	overflow.
@
text
@a42 4
#if 0
static struct bfd_link_hash_table *coff_mcore_link_hash_table_create
  PARAMS ((bfd *));
#endif
a220 29
#if 0
/* Create an MCore coff linker hash table.  */

static struct bfd_link_hash_table *
coff_mcore_link_hash_table_create (abfd)
     bfd * abfd;
{
  mcore_hash_table * ret;

  ret = (mcore_hash_table *) bfd_malloc ((bfd_size_type) sizeof (* ret));
  if (ret == (mcore_hash_table *) NULL)
    return NULL;

  if (! _bfd_coff_link_hash_table_init
      (& ret->root, abfd, _bfd_coff_link_hash_newfunc))
    {
      free (ret);
      return (struct bfd_link_hash_table *) NULL;
    }

  ret->bfd_of_toc_owner = NULL;
  ret->global_toc_size  = 0;
  ret->import_table_size = 0;
  ret->first_thunk_address = 0;
  ret->thunk_size = 0;

  return & ret->root.root;
}
#endif
@


1.30
log
@bfd/
	* bfd.c (_bfd_default_error_handler): Handle %A and %B.
	(bfd_archive_filename, bfd_get_section_ident): Delete.
	* ecofflink.c (bfd_ecoff_debug_accumulate_other): Don't call
	bfd_archive_filename.
	* elflink.c (elf_link_input_bfd): Don't use callbacks->error_handler
	to warn about symbols in discarded sections.  Use _bfd_error_handler.
	* aout-adobe.c (aout_adobe_callback): See below.
	* aout-cris.c (swap_ext_reloc_in): ..
	* coff-arm.c (find_thumb_glue, find_arm_glue,
	coff_arm_relocate_section, bfd_arm_process_before_allocation,
	coff_arm_merge_private_bfd_data, _bfd_coff_arm_set_private_flags,
	coff_arm_copy_private_bfd_data): ..
	* coff-i860.c (i860_reloc_processing): ..
	* coff-mcore.c (mcore_coff_unsupported_reloc,
	coff_mcore_relocate_section): ..
	* coff-ppc.c (coff_ppc_relocate_section): ..
	* coff-rs6000.c (xcoff_create_csect_from_smclas
	* coff-sh.c (sh_relax_section, sh_relax_delete_bytes,
	sh_swap_insns, sh_relocate_section): ..
	* coff-tic54x.c (tic54x_reloc_processing): ..
	* coff-tic80.c (coff_tic80_relocate_section): ..
	* coff64-rs6000.c (xcoff64_create_csect_from_smclas): ..
	* coffcode.h (styp_to_sec_flags, coff_slurp_line_table,
	coff_slurp_symbol_table, coff_classify_symbol,
	coff_slurp_reloc_table): ..
	* coffgen.c (_bfd_coff_read_string_table): ..
	* cofflink.c (coff_link_add_symbols, _bfd_coff_link_input_bfd,
	_bfd_coff_generic_relocate_section): ..
	* cpu-arm.c (bfd_arm_merge_machines): ..
	* cpu-sh.c (sh_merge_bfd_arch): ..
	* elf-hppa.h (elf_hppa_relocate_section): ..
	* elf.c (bfd_elf_string_from_elf_section, setup_group,
	_bfd_elf_setup_group_pointers, bfd_section_from_shdr,
	assign_section_numbers, _bfd_elf_symbol_from_bfd_symbol,
	copy_private_bfd_data, _bfd_elf_validate_reloc): ..
	* elf32-arm.h (find_thumb_glue, find_arm_glue,
	bfd_elf32_arm_process_before_allocation, elf32_thumb_to_arm_stub,
	elf32_arm_to_thumb_stub, elf32_arm_final_link_relocate,
	elf32_arm_relocate_section, elf32_arm_set_private_flags,
	elf32_arm_copy_private_bfd_data, elf32_arm_merge_private_bfd_data): ..
	* elf32-cris.c (cris_elf_relocate_section, cris_elf_check_relocs,
	cris_elf_merge_private_bfd_data
	* elf32-frv.c (elf32_frv_relocate_section, elf32_frv_check_relocs): ..
	* elf32-gen.c (elf32_generic_link_add_symbols): ..
	* elf32-hppa.c (hppa_add_stub, hppa_build_one_stub,
	elf32_hppa_check_relocs, get_local_syms, final_link_relocate,
	elf32_hppa_relocate_section): ..
	* elf32-i370.c (i370_elf_merge_private_bfd_data,
	i370_elf_check_relocs, i370_elf_relocate_section): ..
	* elf32-i386.c (elf_i386_info_to_howto_rel, elf_i386_check_relocs,
	elf_i386_relocate_section): ..
	* elf32-m32r.c (m32r_elf_relocate_section,
	m32r_elf_merge_private_bfd_data): ..
	* elf32-m68hc1x.c (m68hc12_add_stub,
	_bfd_m68hc11_elf_merge_private_bfd_data): ..
	* elf32-m68k.c (elf_m68k_relocate_section): ..
	* elf32-mcore.c (mcore_elf_unsupported_reloc,
	mcore_elf_relocate_section): ..
	* elf32-ppc.c (ppc_elf_merge_private_bfd_data, bad_shared_reloc,
	ppc_elf_check_relocs, ppc_elf_relocate_section,
	ppc_elf_begin_write_processing): ..
	* elf32-s390.c (elf_s390_check_relocs, invalid_tls_insn,
	elf_s390_relocate_section): ..
	* elf32-sh-symbian.c (sh_symbian_import_as,
	sh_symbian_process_embedded_commands,
	sh_symbian_relocate_section): ..
	* elf32-sh.c (sh_elf_relax_section, sh_elf_relax_delete_bytes,
	sh_elf_swap_insns, sh_elf_relocate_section, sh_elf_check_relocs,
	sh_elf_merge_private_data): ..
	* elf32-sparc.c (elf32_sparc_check_relocs,
	elf32_sparc_relocate_section,
	elf32_sparc_merge_private_bfd_data): ..
	* elf32-v850.c (v850_elf_check_relocs,
	v850_elf_merge_private_bfd_data): ..
	* elf32-xtensa.c (elf_xtensa_check_relocs,
	elf_xtensa_relocate_section, elf_xtensa_merge_private_bfd_data): ..
	* elf64-alpha.c (elf64_alpha_relax_with_lituse,
	elf64_alpha_relax_got_load, elf64_alpha_size_got_sections,
	elf64_alpha_relocate_section_r, elf64_alpha_relocate_section): ..
	* elf64-gen.c (elf64_generic_link_add_symbols): ..
	* elf64-ppc.c (ppc64_elf_merge_private_bfd_data, ppc_add_stub,
	ppc64_elf_check_relocs, ppc64_elf_edit_opd,
	ppc64_elf_relocate_section): ..
	* elf64-s390.c (elf_s390_check_relocs, invalid_tls_insn,
	elf_s390_relocate_section): ..
	* elf64-sh64.c (sh_elf64_relocate_section): ..
	* elf64-sparc.c (sparc64_elf_check_relocs,
	sparc64_elf_add_symbol_hook, sparc64_elf_relocate_section,
	sparc64_elf_merge_private_bfd_data): ..
	* elf64-x86-64.c (elf64_x86_64_check_relocs,
	elf64_x86_64_relocate_section): ..
	* elflink.c (_bfd_elf_add_default_symbol,
	_bfd_elf_link_assign_sym_version, elf_link_read_relocs_from_section,
	_bfd_elf_link_output_relocs, elf_link_add_object_symbols,
	bfd_elf_size_dynamic_sections, elf_link_output_extsym,
	elf_get_linked_section_vma, elf_fixup_link_order,
	bfd_elf_final_link, bfd_elf_gc_record_vtinherit,
	bfd_elf_gc_record_vtinherit, _bfd_elf_section_already_linked): ..
	* elfxx-ia64.c (elfNN_ia64_relax_section,
	elfNN_ia64_relocate_section, elfNN_ia64_merge_private_bfd_data): ..
	* elfxx-mips.c (mips_elf_perform_relocation,
	_bfd_mips_elf_check_relocs,
	_bfd_mips_elf_merge_private_bfd_data): ..
	* ieee.c (ieee_slurp_external_symbols): ..
	* ihex.c (ihex_bad_byte, ihex_scan, ihex_read_section): ..
	* libbfd.c (_bfd_generic_verify_endian_match): ..
	* linker.c (_bfd_generic_link_add_one_symbol,
	_bfd_generic_section_already_linked): ..
	* pdp11.c (translate_to_native_sym_flags): ..
	* pe-mips.c (coff_pe_mips_relocate_section): ..
	* peicode.h (pe_ILF_build_a_bfd): ..
	* srec.c (srec_bad_byte): ..
	* stabs.c (_bfd_link_section_stabs): ..
	* xcofflink.c (xcoff_link_add_symbols, xcoff_link_input_bfd): ..
	Replace all uses of bfd_archive_filename and bfd_get_section_ident
	with corresponding %B and %A in _bfd_error_handler format string.
	Replace occurrences of "fprintf (stderr," with _bfd_error_handler
	calls to use %A and %B.  Fix "against symbol .. from section" and
	similar error messages.  Combine multiple _bfd_error_handler calls
	where they were separated due to bfd_archive_filename deficiencies.
	* bfd-in2.h: Regenerate.
include/
	* bfdlink.h (struct bfd_link_callbacks): Remove "error_handler".
	(LD_DEFINITION_IN_DISCARDED_SECTION): Delete.
ld/
	* ldmain.c (link_callbacks): Remove "error_handler".
	* ldmisc.c: Include elf-bfd.h.
	(vfinfo): Sort comment.  Handle %A.  Use %A instead of
	bfd_get_section_indent.
	(error_handler): Delete.
	* ldmisc.h (error_handler): Delete declaration.
@
text
@d559 1
a559 1
		 (info, my_name, howto->name,
@


1.29
log
@	* aix5ppc-core.c: Fix comment typos.
	* aout-arm.c: Likewise.
	* aout-ns32k.c: Likewise.
	* aoutx.h: Likewise.
	* archures.c: Likewise.
	* bfd-in.h: Likewise.
	* bfd.c: Likewise.
	* bfdio.c: Likewise.
	* coff-arm.c: Likewise.
	* coff-h8300.c: Likewise.
	* coff-i860.c: Likewise.
	* coff-m88k.c: Likewise.
	* coff-mcore.c: Likewise.
	* coff-ppc.c: Likewise.
	* coff-rs6000.c: Likewise.
	* coff-z8k.c: Likewise.
	* coff64-rs6000.c: Likewise.
	* coffcode.h: Likewise.
	* cofflink.c: Likewise.
	* cpu-alpha.c: Likewise.
	* cpu-arm.c: Likewise.
	* cpu-ns32k.c: Likewise.
	* dwarf2.c: Likewise.
	* bfd-in2.h: Regenerate.
@
text
@d2 2
a3 1
   Copyright 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.
d288 2
a289 2
  _bfd_error_handler (_("%s: Relocation %s (%d) is not currently supported.\n"),
		      bfd_archive_filename (abfd),
d403 2
a404 2
	(_("%s: compiled for a %s system and target is %s.\n"),
	 bfd_archive_filename (input_bfd),
d510 2
a511 2
	  _bfd_error_handler (_("%s: unsupported relocation type 0x%02x"),
			      bfd_archive_filename (input_bfd), r_type);
d516 6
a521 9
	  fprintf (stderr,
		   _("Warning: unsupported reloc %s <file %s, section %s>\n"),
		   howto->name,
		   bfd_archive_filename (input_bfd),
		   input_section->name);

	  fprintf (stderr,"sym %ld (%s), r_vaddr %ld (%lx)\n",
		   rel->r_symndx, my_name, (long) rel->r_vaddr,
		   (unsigned long) rel->r_vaddr);
@


1.29.8.1
log
@Merge mainline to intercu branch - 2004-09-15
@
text
@d2 1
a2 2
   Copyright 1999, 2000, 2001, 2002, 2003, 2004
   Free Software Foundation, Inc.
d287 2
a288 2
  _bfd_error_handler (_("%B: Relocation %s (%d) is not currently supported.\n"),
		      abfd,
d402 2
a403 2
	(_("%B: compiled for a %s system and target is %s.\n"),
	 input_bfd,
d509 2
a510 2
	  _bfd_error_handler (_("%B: unsupported relocation type 0x%02x"),
			      input_bfd, r_type);
d515 9
a523 6
	  _bfd_error_handler
	    (_("Warning: unsupported reloc %s <file %B, section %A>\n"
	       "sym %ld (%s), r_vaddr %ld (%lx)"),
	     input_bfd, input_section, howto->name,
	     rel->r_symndx, my_name, (long) rel->r_vaddr,
	     (unsigned long) rel->r_vaddr);
@


1.28
log
@Correct spelling of "relocatable".
@
text
@d590 1
a590 1
/* Forward declaration to initialise alterbative_target field.  */
@


1.27
log
@Altered the CREATE_xxx_COFF_TARGET_VEC macro arguments
@
text
@d2 1
a2 1
   Copyright 1999, 2000, 2001, 2002 Free Software Foundation, Inc.
d391 1
a391 1
  /* If we are performing a relocateable link, we don't need to do a
d394 1
a394 1
  if (info->relocateable)
@


1.26
log
@s/boolean/bfd_boolean/ s/true/TRUE/ s/false/FALSE/.  Simplify
comparisons of bfd_boolean vars with TRUE/FALSE.  Formatting.
@
text
@d596 1
a596 1
			    0, & TARGET_LITTLE_SYM)
d599 1
a599 1
			       0, & TARGET_BIG_SYM)
@


1.25
log
@	* coff-mcore.c (SWAP_IN_RELOC_OFFSET): Define.
	(SWAP_OUT_RELOC_OFFSET): Define.
@
text
@d40 1
a40 1
extern boolean mcore_bfd_coff_final_link
d43 1
a43 1
static struct bfd_link_hash_table * coff_mcore_link_hash_table_create
d46 1
a46 1
static bfd_reloc_status_type        mcore_coff_unsupported_reloc
d48 1
a48 1
static boolean                      coff_mcore_relocate_section
d51 1
a51 1
static reloc_howto_type *           mcore_coff_reloc_type_lookup
d53 1
a53 1
static reloc_howto_type *           coff_mcore_rtype_to_howto
d55 2
a56 1
	   struct coff_link_hash_entry *, struct internal_syment *, bfd_vma *));
d59 1
a59 1
static boolean in_reloc_p PARAMS ((bfd *, reloc_howto_type *));
d81 1
a81 1
	 false,	                 /* pc_relative */
d86 1
a86 1
	 false,	                 /* partial_inplace */
d89 1
a89 1
	 false),                 /* pcrel_offset */
d95 1
a95 1
	 false,	                /* pc_relative */
d100 1
a100 1
	 true,	                /* partial_inplace */
d103 1
a103 1
	 false),                /* pcrel_offset */
d111 1
a111 1
	 true,			/* pc_relative */
d116 1
a116 1
	 false,			/* partial_inplace */
d119 1
a119 1
	 true),			/* pcrel_offset */
d128 1
a128 1
	 true,			/* pc_relative */
d133 1
a133 1
	 false,			/* partial_inplace */
d136 1
a136 1
	 true),			/* pcrel_offset */
d143 1
a143 1
	 true,			/* pc_relative */
d148 1
a148 1
	 false,			/* partial_inplace */
d151 1
a151 1
	 true),			/* pcrel_offset */
d158 1
a158 1
	 true,			/* pc_relative */
d163 1
a163 1
	 false,			/* partial_inplace */
d166 1
a166 1
	 true),			/* pcrel_offset */
d179 1
a179 1
	 true,			/* pc_relative */
d184 1
a184 1
	 false,			/* partial_inplace */
d187 1
a187 1
	 true),			/* pcrel_offset */
d193 1
a193 1
	 false,			/* pc_relative */
d198 1
a198 1
	 true,			/* partial_inplace */
d201 1
a201 1
	 true)			/* pcrel_offset */
d362 1
a362 1
/* Return true if this relocation should appear in the output .reloc section.
d365 1
a365 1
static boolean
d374 1
a374 1
static boolean
d388 1
a388 1
  boolean hihalf;
d395 1
a395 1
    return true;
d408 1
a408 1
      return false;
d411 1
a411 1
  hihalf = false;
d450 1
a450 1
	return false;
d496 2
a497 2
		      rel->r_vaddr - input_section->vma, true)))
		return false;
d512 1
a512 1
	  return false;
d564 1
a564 1
	    return false;
d568 1
a568 1
  return true;
@


1.24
log
@2002-04-04  Daniel Jacobowitz  <drow@@mvista.com>

	* aout-adobe.c (aout_32_bfd_link_hash_table_free): Define.
	* aout-target.h (MY_bfd_link_hash_table_free): Conditionally
	define.
	* aout-tic30.c (MY_bfd_link_hash_table_free): Likewise.
	* bfd.c (bfd_link_hash_table_free): Define.
	* binary.c (binary_bfd_link_hash_table_free): Define.
	* bout.c (b_out_bfd_link_hash_table_free): Define.
	* coff-rs6000.c (rs6000coff_vec): Include
	_bfd_generic_link_hash_table_free.
	(pmac_xcoff_vec): Likewise.
	* coff64-rs6000.c (rs6000coff64_vec): Likewise.
	(aix5coff64_vec): Likewise.
	* coffcode.h (coff_bfd_link_hash_table_free): Conditionally define.
	* elf-m10300.c (elf32_mn10300_link_hash_table_free): New function.
	(bfd_elf32_bfd_link_hash_table_free): Define.
	* elf32-hppa.c (elf32_hppa_link_hash_table_free): New function.
	(bfd_elf32_bfd_link_hash_table_free): Define.
	* elfxx-target.h (bfd_elfNN_bfd_link_hash_table_free): Conditionally
	define.
	* i386msdos.c (msdos_bfd_link_hash_table_free): Define.
	* i386os9k.c (os9k_bfd_link_hash_table_free): Define.
	* ieee.c (ieee_bfd_link_hash_table_free): Define.
	* ihex.c (ihex_bfd_link_hash_table_free): Define.
	* libbfd-in.h (_bfd_nolink_bfd_link_hash_table_free): Define.
	(_bfd_generic_link_hash_table_free): Add prototype.
	* libcoff-in.h (_bfd_xcoff_bfd_link_hash_table_free): Add prototype.
	* libecoff.h (_bfd_ecoff_bfd_link_hash_table_free): Define.
	* linker.c (_bfd_generic_link_hash_table_free): New function.
	* mmo.c (mmo_bfd_link_hash_table_free): Define.
	* nlm-target.h (nlm_bfd_link_hash_table_free): Define.
	* oasys.c (oasys_bfd_link_hash_table_free): Define.
	* ppcboot.c (ppcboot_bfd_link_hash_table_free): Define.
	* som.c (som_bfd_link_hash_table_free): Define.
	* srec.c (srec_bfd_link_hash_table_free): Define.
	* tekhex.c (tekhex_bfd_link_hash_table_free): Define.
	* versados.c (versados_bfd_link_hash_table_free): Define.
	* vms.c (vms_bfd_link_hash_table_free): New function.
	* xcofflink.c (_bfd_xcoff_bfd_link_hash_table_free): New function.

	* coff-arm.c (coff_arm_link_hash_table_create): Use bfd_malloc
	instead of bfd_alloc.
	* coff-h8300.c (h8300_coff_link_hash_table_create): Likewise.
	* coff-mcore.c (coff_mcore_link_hash_table_create): Likewise.
	* coff-ppc.c (ppc_coff_link_hash_table_create): Likewise.
	* cofflink.c (_bfd_coff_link_hash_table_create): Likewise.
	* ecoff.c (_bfd_ecoff_bfd_link_hash_table_create): Likewise.
	* elf-m10300.c (elf32_mn10300_link_hash_table_create): Likewise.
	* elf.c (_bfd_elf_link_hash_table_create): Likewise.
	* elf32-arm.h (elf32_arm_link_hash_table_create): Likewise.
	* elf32-cris.c (elf_cris_link_hash_table_create): Likewise.
	* elf32-hppa.c (elf32_hppa_link_hash_table_create): Likewise.
	* elf32-i386.c (elf_i386_link_hash_table_create): Likewise.
	* elf32-m68k.c (elf_m68k_link_hash_table_create): Likewise.
	* elf32-s390.c (elf_s390_link_hash_table_create): Likewise.
	* elf32-sh.c (sh_elf_link_hash_table_create): Likewise.
	* elf64-alpha.c (elf64_alpha_bfd_link_hash_table_create): Likewise.
	* elf64-ppc.c (ppc64_elf_link_hash_table_create): Likewise.
	* elf64-s390.c (elf_s390_link_hash_table_create): Likewise.
	* elf64-sh64.c (sh64_elf64_link_hash_table_create): Likewise.
	* elf64-sparc.c (sparc64_elf_bfd_link_hash_table_create): Likewise.
	* elf64-x86-64.c (elf64_x86_64_link_hash_table_create): Likewise.
	* elfxx-mips.c (_bfd_mips_elf_link_hash_table_create): Likewise.
	* linker.c (_bfd_generic_link_hash_table_create): Likewise.
	* m68klinux.c (linux_link_hash_table_create): Likewise.
	* sparclinux.c (linux_link_hash_table_create): Likewise.
	* sunos.c (sunos_link_hash_table_create): Likewise.
	* xcofflink.c (_bfd_xcoff_bfd_link_hash_table_create): Likewise.

	* targets.c: Add _bfd_link_hash_table_free to xvec.

	* bfd-in2.h: Regenerate.
	* libbfd.h: Regenerate.
	* libcoff.h: Regenerate.
@
text
@d580 5
@


1.24.20.1
log
@Merge drow-cplus-branch to:
  cvs rtag -D 2003-12-14 00:00:00 UTC drow-cplus-merge-20031214 gdb+dejagnu
@
text
@d2 1
a2 1
   Copyright 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.
d40 1
a40 1
extern bfd_boolean mcore_bfd_coff_final_link
d43 1
a43 1
static struct bfd_link_hash_table *coff_mcore_link_hash_table_create
d46 1
a46 1
static bfd_reloc_status_type mcore_coff_unsupported_reloc
d48 1
a48 1
static bfd_boolean coff_mcore_relocate_section
d51 1
a51 1
static reloc_howto_type *mcore_coff_reloc_type_lookup
d53 1
a53 1
static reloc_howto_type *coff_mcore_rtype_to_howto
d55 1
a55 2
	   struct coff_link_hash_entry *, struct internal_syment *,
	   bfd_vma *));
d58 1
a58 1
static bfd_boolean in_reloc_p PARAMS ((bfd *, reloc_howto_type *));
d80 1
a80 1
	 FALSE,	                 /* pc_relative */
d85 1
a85 1
	 FALSE,	                 /* partial_inplace */
d88 1
a88 1
	 FALSE),                 /* pcrel_offset */
d94 1
a94 1
	 FALSE,	                /* pc_relative */
d99 1
a99 1
	 TRUE,	                /* partial_inplace */
d102 1
a102 1
	 FALSE),                /* pcrel_offset */
d110 1
a110 1
	 TRUE,			/* pc_relative */
d115 1
a115 1
	 FALSE,			/* partial_inplace */
d118 1
a118 1
	 TRUE),			/* pcrel_offset */
d127 1
a127 1
	 TRUE,			/* pc_relative */
d132 1
a132 1
	 FALSE,			/* partial_inplace */
d135 1
a135 1
	 TRUE),			/* pcrel_offset */
d142 1
a142 1
	 TRUE,			/* pc_relative */
d147 1
a147 1
	 FALSE,			/* partial_inplace */
d150 1
a150 1
	 TRUE),			/* pcrel_offset */
d157 1
a157 1
	 TRUE,			/* pc_relative */
d162 1
a162 1
	 FALSE,			/* partial_inplace */
d165 1
a165 1
	 TRUE),			/* pcrel_offset */
d178 1
a178 1
	 TRUE,			/* pc_relative */
d183 1
a183 1
	 FALSE,			/* partial_inplace */
d186 1
a186 1
	 TRUE),			/* pcrel_offset */
d192 1
a192 1
	 FALSE,			/* pc_relative */
d197 1
a197 1
	 TRUE,			/* partial_inplace */
d200 1
a200 1
	 TRUE)			/* pcrel_offset */
d361 1
a361 1
/* Return TRUE if this relocation should appear in the output .reloc section.
d364 1
a364 1
static bfd_boolean
d373 1
a373 1
static bfd_boolean
d387 1
a387 1
  bfd_boolean hihalf;
d390 1
a390 1
  /* If we are performing a relocatable link, we don't need to do a
d393 2
a394 2
  if (info->relocatable)
    return TRUE;
d407 1
a407 1
      return FALSE;
d410 1
a410 1
  hihalf = FALSE;
d449 1
a449 1
	return FALSE;
d495 2
a496 2
		      rel->r_vaddr - input_section->vma, TRUE)))
		return FALSE;
d511 1
a511 1
	  return FALSE;
d563 1
a563 1
	    return FALSE;
d567 1
a567 1
  return TRUE;
a579 5
/* Make sure that the 'r_offset' field is copied properly
   so that identical binaries will compare the same.  */
#define SWAP_IN_RELOC_OFFSET         H_GET_32
#define SWAP_OUT_RELOC_OFFSET        H_PUT_32

d584 1
a584 1
/* Forward declaration to initialise alternative_target field.  */
d590 1
a590 1
			    0, & TARGET_LITTLE_SYM, COFF_SWAP_TABLE)
d593 1
a593 1
			       0, & TARGET_BIG_SYM, COFF_SWAP_TABLE)
@


1.24.18.1
log
@2002-12-23  David Carlton  <carlton@@math.stanford.edu>

	* Merge from mainline; tag is carlton_dictionary-20021223-merge.
@
text
@d40 1
a40 1
extern bfd_boolean mcore_bfd_coff_final_link
d43 1
a43 1
static struct bfd_link_hash_table *coff_mcore_link_hash_table_create
d46 1
a46 1
static bfd_reloc_status_type mcore_coff_unsupported_reloc
d48 1
a48 1
static bfd_boolean coff_mcore_relocate_section
d51 1
a51 1
static reloc_howto_type *mcore_coff_reloc_type_lookup
d53 1
a53 1
static reloc_howto_type *coff_mcore_rtype_to_howto
d55 1
a55 2
	   struct coff_link_hash_entry *, struct internal_syment *,
	   bfd_vma *));
d58 1
a58 1
static bfd_boolean in_reloc_p PARAMS ((bfd *, reloc_howto_type *));
d80 1
a80 1
	 FALSE,	                 /* pc_relative */
d85 1
a85 1
	 FALSE,	                 /* partial_inplace */
d88 1
a88 1
	 FALSE),                 /* pcrel_offset */
d94 1
a94 1
	 FALSE,	                /* pc_relative */
d99 1
a99 1
	 TRUE,	                /* partial_inplace */
d102 1
a102 1
	 FALSE),                /* pcrel_offset */
d110 1
a110 1
	 TRUE,			/* pc_relative */
d115 1
a115 1
	 FALSE,			/* partial_inplace */
d118 1
a118 1
	 TRUE),			/* pcrel_offset */
d127 1
a127 1
	 TRUE,			/* pc_relative */
d132 1
a132 1
	 FALSE,			/* partial_inplace */
d135 1
a135 1
	 TRUE),			/* pcrel_offset */
d142 1
a142 1
	 TRUE,			/* pc_relative */
d147 1
a147 1
	 FALSE,			/* partial_inplace */
d150 1
a150 1
	 TRUE),			/* pcrel_offset */
d157 1
a157 1
	 TRUE,			/* pc_relative */
d162 1
a162 1
	 FALSE,			/* partial_inplace */
d165 1
a165 1
	 TRUE),			/* pcrel_offset */
d178 1
a178 1
	 TRUE,			/* pc_relative */
d183 1
a183 1
	 FALSE,			/* partial_inplace */
d186 1
a186 1
	 TRUE),			/* pcrel_offset */
d192 1
a192 1
	 FALSE,			/* pc_relative */
d197 1
a197 1
	 TRUE,			/* partial_inplace */
d200 1
a200 1
	 TRUE)			/* pcrel_offset */
d361 1
a361 1
/* Return TRUE if this relocation should appear in the output .reloc section.
d364 1
a364 1
static bfd_boolean
d373 1
a373 1
static bfd_boolean
d387 1
a387 1
  bfd_boolean hihalf;
d394 1
a394 1
    return TRUE;
d407 1
a407 1
      return FALSE;
d410 1
a410 1
  hihalf = FALSE;
d449 1
a449 1
	return FALSE;
d495 2
a496 2
		      rel->r_vaddr - input_section->vma, TRUE)))
		return FALSE;
d511 1
a511 1
	  return FALSE;
d563 1
a563 1
	    return FALSE;
d567 1
a567 1
  return TRUE;
a578 5

/* Make sure that the 'r_offset' field is copied properly
   so that identical binaries will compare the same.  */
#define SWAP_IN_RELOC_OFFSET         H_GET_32
#define SWAP_OUT_RELOC_OFFSET        H_PUT_32
@


1.24.18.2
log
@2003-06-27  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton_dictionary-20030627-merge.
@
text
@d2 1
a2 1
   Copyright 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.
d391 1
a391 1
  /* If we are performing a relocatable link, we don't need to do a
d394 1
a394 1
  if (info->relocatable)
d596 1
a596 1
			    0, & TARGET_LITTLE_SYM, COFF_SWAP_TABLE)
d599 1
a599 1
			       0, & TARGET_BIG_SYM, COFF_SWAP_TABLE)
@


1.24.18.3
log
@2003-12-15  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton_dictionary-20031215-merge.
	* cp-support.c (class_name_from_physname): Add DMGL_PARAMS to call
	to cplus_demangle.
	(method_name_from_physname): Ditto.
@
text
@d590 1
a590 1
/* Forward declaration to initialise alternative_target field.  */
@


1.23
log
@Fix compile time warnings
@
text
@d2 1
a2 1
   Copyright 1999, 2000, 2001 Free Software Foundation, Inc.
d232 1
a232 1
  ret = (mcore_hash_table *) bfd_alloc (abfd, (bfd_size_type) sizeof (* ret));
d239 1
a239 1
      bfd_release (abfd, ret);
@


1.22
log
@	* bfd.c (bfd_archive_filename): New function.
	* bfd-in2.h: Regenerate.
	* aout-adobe.c: Replace bfd_get_filename with bfd_archive_filename
	in error messages where the bfd is an input bfd.
	* aout-cris.c: Likewise.
	* coff-arm.c: Likewise.
	* coff-mcore.c: Likewise.
	* coff-ppc.c: Likewise.
	* coff-rs6000.c: Likewise.
	* coff-sh.c: Likewise.
	* coff-tic54x.c: Likewise.
	* coff-tic80.c: Likewise.
	* coff64-rs6000.c: Likewise.
	* coffcode.h: Likewise.
	* coffgen.c: Likewise.
	* cofflink.c: Likewise.
	* ecofflink.c: Likewise.
	* elf-hppa.h: Likewise.
	* elf.c: Likewise.
	* elf32-arm.h: Likewise.
	* elf32-cris.c: Likewise.
	* elf32-gen.c: Likewise.
	* elf32-hppa.c: Likewise.
	* elf32-i370.c: Likewise.
	* elf32-i386.c: Likewise.
	* elf32-m32r.c: Likewise.
	* elf32-mcore.c: Likewise.
	* elf32-mips.c: Likewise.
	* elf32-ppc.c: Likewise.
	* elf32-s390.c: Likewise.
	* elf32-sh.c: Likewise.
	* elf32-sparc.c: Likewise.
	* elf32-v850.c: Likewise.
	* elf64-alpha.c: Likewise.
	* elf64-gen.c: Likewise.
	* elf64-ppc.c: Likewise.
	* elf64-s390.c: Likewise.
	* elf64-sparc.c: Likewise.
	* elf64-x86-64.c: Likewise.
	* elflink.h: Likewise.
	* elfxx-ia64.c: Likewise.
	* ieee.c: Likewise.
	* ihex.c: Likewise.
	* libbfd.c: Likewise.
	* pdp11.c: Likewise.
	* pe-mips.c: Likewise.
	* peicode.h: Likewise.
	* srec.c: Likewise.
	* xcofflink.c: Likewise.

	* elf32-arm.h: Make _bfd_error_handler calls K&R compatible.

	* elflink.c (_bfd_elf_create_linker_section): Better grammar for
	error message.

	* coff-mcore.c (coff_mcore_relocate_section): Internalionalise
	error message.

	* elf64-sparc.c (sparc64_elf_add_symbol_hook): Constify stt_types.
	Consolidate error messages, and split long messages to two lines.
@
text
@d42 1
a42 1

d45 1
a58 1
static struct bfd_link_hash_table * coff_mcore_link_hash_table_create PARAMS ((bfd *));
d223 1
d251 1
@


1.21
log
@Touches most files in bfd/, so likely will be blamed for everything..

o  bfd_read and bfd_write lose an unnecessary param and become
   bfd_bread and bfd_bwrite.

o  bfd_*alloc now all take a bfd_size_type arg, and will error if
   size_t is too small.  eg. 32 bit host, 64 bit bfd, verrry big files
   or bugs in linker scripts etc.

o  file_ptr becomes a bfd_signed_vma.  Besides matching sizes with
   various other types involved in handling sections, this should make
   it easier for bfd to support a 64 bit off_t on 32 bit hosts that
   provide it.

o  I've made the H_GET_* and H_PUT_* macros (which invoke bfd_h_{get,put}_*)
   generally available.  They now cast their args to bfd_vma and
   bfd_byte * as appropriate, which removes a swag of casts from the
   source.

o  Bug fixes to bfd_get8, aix386_core_vec, elf32_h8_relax_section, and
   aout-encap.c.

o  Zillions of formatting and -Wconversion fixes.
@
text
@d285 1
a285 1
		      bfd_get_filename (abfd),
d399 4
a402 4
	(_("%s: compiled for a %s endian system and target is %s endian.\n"),
	 bfd_get_filename (input_bfd),
         bfd_big_endian (input_bfd) ? "big" : "little",
         bfd_big_endian (output_bfd) ? "big" : "little");
d507 1
a507 1
			      bfd_get_filename (input_bfd), r_type);
d515 1
a515 1
		   bfd_get_filename (input_bfd),
@


1.20
log
@Add missing prototypes
@
text
@d231 1
a231 1
  ret = ((mcore_hash_table *) bfd_alloc (abfd, sizeof (* ret)));
@


1.19
log
@Update copyright notices
@
text
@d55 4
d224 1
d252 1
d361 1
@


1.18
log
@2001-01-23  Kazu Hirata  <kazu@@hxi.com>

	* coff64-rs6000.c: Fix formatting.
	* coff-arm.c: Likewise.
	* coffgen.c: Likewise.
	* cofflink.c: Likewise.
	* coff-mcore.c: Likewise.
	* coff-mips.c: Likewise.
	* coff-pmac.c: Likewise.
	* coff-ppc.c: Likewise.
	* coff-rs6000.c: Likewise.
	* elf32.c: Likewise.
	* elf32-fr30.c: Likewise.
	* elf32-i370.c: Likewise.
	* elf32-i860.c: Likewise.
	* elf32-m32r.c: Likewise.
	* elf32-m68k.c: Likewise.
	* elf32-mcore.c: Likewise.
	* elf32-ppc.c: Likewise.
	* elf32-sh.c: Likewise.
	* elf32-v850.c: Likewise.
	* elf64-alpha.c: Likewise.
	* elf64-sparc.c: Likewise.
	* elflink.c: Likewise.
	* elflink.h: Likewise.
	* elf-m10200.c: Likewise.
	* elf-m10300.c: Likewise.
	* elfxx-ia64.c: Likewise.
@
text
@d2 1
a2 1
   Copyright (C) 1999 Free Software Foundation, Inc.
@


1.18.2.1
log
@Update copyright notices.
@
text
@d2 1
a2 1
   Copyright 1999, 2000, 2001 Free Software Foundation, Inc.
@


1.17
log
@2000-11-11  Kazu Hirata  <kazu@@hxi.com>

	* coff-i960.c: Likewise.
	* coff-m68k.c: Likewise.
	* coff-m88k.c: Likewise.
	* coff-mcore.c: Likewise.
	* coff-mips.c: Likewise.
@
text
@a67 1

a284 1

a361 1

a559 1

@


1.16
log
@Applied Stephane Carrez <Stephane.Carrez@@worldnet.fr> patches to add support
for m68hc11 and m68hc12 processors.
@
text
@d45 1
a45 1
static bfd_reloc_status_type        mcore_coff_unsupported_reloc 
d73 6
a78 6
  HOWTO (IMAGE_REL_MCORE_ABSOLUTE,/* type */                                 
	 0,	                 /* rightshift */                           
	 0,	                 /* size (0 = byte, 1 = short, 2 = long) */ 
	 0,	                 /* bitsize */                   
	 false,	                 /* pc_relative */                          
	 0,	                 /* bitpos */                               
d80 1
a80 1
	 NULL,		         /* special_function */                     
d82 3
a84 3
	 false,	                 /* partial_inplace */                      
	 0x00,	 	         /* src_mask */                             
	 0x00,        		 /* dst_mask */                             
d86 1
a86 1
  
d88 5
a92 5
	 0,	                /* rightshift */                           
	 2,	                /* size (0 = byte, 1 = short, 2 = long) */ 
	 32,	                /* bitsize */                   
	 false,	                /* pc_relative */                          
	 0,	                /* bitpos */                               
d94 1
a94 1
	 NULL,		        /* special_function */                     
d96 3
a98 3
	 true,	                /* partial_inplace */                      
	 0xffffffff,            /* src_mask */                             
	 0xffffffff,            /* dst_mask */                             
d100 1
a100 1
  
d102 1
a102 1
     Should not appear in object files. */
d117 1
a117 1
  /* bsr/bt/bf/br instructions; 11 bits + 1 zero bit 
d134 1
a134 1
  /* 4 bits + 1 zero bit; 'loopt' instruction only; unsupported. */
d149 1
a149 1
  /* 32-bit pc-relative. Eventually this will help support PIC code. */
d166 1
a166 1
     entry for the literal pool entry that it references, but we 
d170 1
a170 1
     is a relocation that we are allowed to safely ignore.  */ 
d184 1
a184 1
  
d262 1
a262 1
  
a265 1
/*ARGSUSED*/
d278 1
a278 1
  
d283 1
a283 1
  
d288 1
a288 1
/* A cheesy little macro to make the code a little more readable. */
d298 1
a298 1
    { 
d306 1
a306 1
   default: 
a327 1

d330 1
a330 1
  
d335 1
a335 1
  
d339 1
a339 1
      
d351 1
a351 1
  
d363 1
a363 1
}     
d383 1
a383 1
  
d389 1
a389 1
  
d409 1
a409 1
  
d422 1
a422 1
  
d438 1
a438 1
      
d446 1
a446 1
      
d454 2
a455 2
	      
	      val = (sym->n_value 
d464 1
a464 1
	      else 
d467 1
a467 1
		  
d480 1
a480 1
	      
d492 1
a492 1
	  
d494 1
a494 1
	}	
d497 1
a497 1
      
d506 1
a506 1
	  
d508 2
a509 2
	  fprintf (stderr, 
		   _("Warning: unsupported reloc %s <file %s, section %s>\n"), 
d513 2
a514 2
	  
	  fprintf (stderr,"sym %ld (%s), r_vaddr %ld (%lx)\n", 
d516 1
a516 1
		   (unsigned long) rel->r_vaddr);  
d518 1
a518 1
	  
d528 1
a528 1
	  
d536 1
a536 1
      
d543 1
a543 1
  
d548 1
a548 1
	  
d551 1
a551 1
	  
d554 1
a554 1
		 (info, my_name, howto->name, 
d559 1
a559 1
    }     
d565 1
a565 1
/* Tailor coffcode.h -- macro heaven. */
d582 1
a582 1
/* The transfer vectors that lead the outside world to all of the above. */
@


1.15
log
@Fix building with --enable-targets=all
@
text
@d585 6
a590 2
CREATE_BIG_COFF_TARGET_VEC (TARGET_BIG_SYM, TARGET_BIG_NAME, D_PAGED, (SEC_LINK_ONCE | SEC_LINK_DUPLICATES), 0, & TARGET_LITTLE_SYM)
CREATE_LITTLE_COFF_TARGET_VEC (TARGET_LITTLE_SYM, TARGET_LITTLE_NAME, D_PAGED, (SEC_LINK_ONCE | SEC_LINK_DUPLICATES), 0, & TARGET_BIG_SYM)
@


1.14
log
@2000-03-01  H.J. Lu  <hjl@@gnu.org>

	* aoutx.h (aout_link_input_section_std): Pass "true" to
	the undefined_symbol callback.
	(aout_link_input_section_ext): Likewise.
	* bout.c (get_value): Likewise.
	* coff-a29k.c (coff_a29k_relocate_section): Likewise.
	* coff-alpha.c (alpha_ecoff_get_relocated_section_conten):
	Likewise.
	(alpha_relocate_section): Likewise.
	* coff-arm.c (coff_arm_relocate_section): Likewise.
	* coff-i960.c (coff_i960_relocate_section): Likewise.
	* coff-mcore.c (coff_mcore_relocate_section): Likewise.
	* coff-mips.c (mips_relocate_section): Likewise.
	* coff-ppc.c (coff_ppc_relocate_section): Likewise.
	* coff-sh.c (sh_relocate_section): Likewise.
	* coff-tic80.c (coff_tic80_relocate_section): Likewise.
	* cofflink.c (_bfd_coff_generic_relocate_section): Likewise.
	* elf-m10200.c (mn10200_elf_relocate_section): Likewise.
	* elf-m10300.c (mn10300_elf_relocate_section): Likewise.
	* elf32-d10v.c (elf32_d10v_relocate_section): Likewise.
	* elf32-fr30.c (fr30_elf_relocate_section): Likewise.
	* elf32-hppa.c (elf32_hppa_relocate_section): Likewise.
	* elf32-i370.c (i370_elf_relocate_section): Likewise.
	* elf32-m32r.c (m32r_elf_relocate_section): Likewise.
	* elf32-mcore.c (mcore_elf_relocate_section): Likewise.
	* elf32-sh.c (sh_elf_relocate_section): Likewise.
	* elf32-v850.c (v850_elf_relocate_section): Likewise.
	* elflink.c (_bfd_elf_link_record_dynamic_symbol): Likewise.
	* elflink.h (elf_link_output_extsym): Likewise.
	* pe-mips.c (coff_pe_mips_relocate_section): Likewise.
	* reloc.c (bfd_generic_get_relocated_section_conten): Likewise.
	* reloc16.c (_bfd_ppc_xcoff_relocate_section): Likewise.

	* elf-hppa.h (elf_hppa_relocate_section): Pass "false" to the
	undefined_symbol callback when building shared library with
	-Bsymbolic and undefined symbols are allowed. Otherwise, pass
	"true".
	* elf32-arm.h (elf32_arm_relocate_section): Likewise.
	* elf32-i386.c (elf_i386_relocate_section): Likewise.
	* elf32-m68k.c (elf_m68k_relocate_section): Likewise.
	* elf32-mips.c (mips_elf_calculate_relocation): Likewise.
	(elf32_mips_get_relocated_section_content): Likewise.
	* elf32-ppc.c (ppc_elf_relocate_section): Likewise.
	* elf32-sparc.c (elf32_sparc_relocate_section): Likewise.
	* elf64-alpha.c (elf64_alpha_relocate_section): Likewise.
	* elf64-sparc.c (sparc64_elf_relocate_section): Likewise.
@
text
@a54 4
static const bfd_target *           pe_object_p
  PARAMS ((bfd *));


@


1.13
log
@fix spelling of Motorola
@
text
@d495 1
a495 1
		      rel->r_vaddr - input_section->vma)))
@


1.12
log
@Apply for for CR 102957.
@
text
@d1 1
a1 1
/* BFD back-end for Motorolla MCore COFF/PE
@


1.11
log
@Move PE format object file detection code into common place.
@
text
@d67 1
a67 1
#define COFF_DEFAULT_SECTION_ALIGNMENT_POWER (3)
@


1.10
log
@fix typoi
@
text
@a584 63
static const bfd_target *
pe_object_p (abfd)
     bfd * abfd;
{
#ifdef COFF_IMAGE_WITH_PE
  /* We need to hack badly to handle a PE image correctly.  In PE
     images created by the GNU linker, the offset to the COFF header
     is always the size.  However, this is not the case in images
     generated by other PE linkers.  The PE format stores a four byte
     offset to the PE signature just before the COFF header at
     location 0x3c of the file.  We pick up that offset, verify that
     the PE signature is there, and then set ourselves up to read in
     the COFF header.  */
  {
    bfd_byte ext_offset[4];
    file_ptr offset;
    bfd_byte ext_signature[4];
    unsigned long signature;

    if (bfd_seek (abfd, 0x3c, SEEK_SET) != 0
	|| bfd_read (ext_offset, 1, 4, abfd) != 4)
      {
	if (bfd_get_error () != bfd_error_system_call)
	  bfd_set_error (bfd_error_wrong_format);
	return NULL;
      }
    
    offset = bfd_h_get_32 (abfd, ext_offset);
    
    if (bfd_seek (abfd, offset, SEEK_SET) != 0
	|| bfd_read (ext_signature, 1, 4, abfd) != 4)
      {
	if (bfd_get_error () != bfd_error_system_call)
	  bfd_set_error (bfd_error_wrong_format);
	
	return NULL;
      }
    
    signature = bfd_h_get_32 (abfd, ext_signature);

    if (signature != 0x4550)
      {
	bfd_set_error (bfd_error_wrong_format);
	return NULL;
      }

    /* Here is the hack.  coff_object_p wants to read filhsz bytes to
       pick up the COFF header.  We adjust so that that will work.  20
       is the size of the mips COFF filehdr.  */
    if (bfd_seek (abfd, (bfd_tell (abfd) - bfd_coff_filhsz (abfd) + 20),
		  SEEK_SET) != 0)
      {
	if (bfd_get_error () != bfd_error_system_call)
	  bfd_set_error (bfd_error_wrong_format);
	
	return NULL;
      }
  }
#endif

  return coff_object_p (abfd);
}

@


1.9
log
@Fix processing of RVA relocs
@
text
@a530 1
	case IMAGE_REL_MCORE_RVA:
@


1.8
log
@Add code to emit relocs into a base file.
@
text
@d342 1
a342 1
  if (howto->pc_relative)
d443 2
d532 1
d534 7
@


1.7
log
@Add new field to bfd_target structure.
Initialise this field for all known bfd targets.
Add new search function to targets.c
@
text
@d2 1
a2 1
   Copyright 1999 Free Software Foundation, Inc.
d251 19
d534 7
@


1.6
log
@	* Many files: Changes to avoid gcc warnings: Add ATTRIBUTE_UNUSED
	as appropriate.  Use EMPTY_HOWTO as appropriate.  Fill in
	structure initializations.  Add casts.
	* reloc.c (EMPTY_HOWTO): Define.
	* bfd-in2.h: Rebuild.
	* coff-h8300.c (h8300_reloc16_extra_cases): Remove useless
	comparisons against 0.
	* elf32-sparc.c (elf32_sparc_merge_private_bfd_data): Change
	previous_ibfd_e_flags to unsigned long.
	* vms.h (struct vms_private_data_struct): Change section_count to
	unsigned.
	* vms-gsd.c (_bfd_vms_slurp_gsd): Change psect_idx to unsigned.
	(_bfd_vms_write_gsd): Change symnum to unsigned.
	* vms-hdr.c (_bfd_vms_write_hdr): Change symnum to unsigned.
	* vms-tir.c (etir_sta): Change psect to unsigned.
	(alloc_section): Change idx to unsigned.
	(tir_sta, tir_ctl): Change psect to unsigned.
	(_bfd_vms_write_tir): Change len and before to bfd_size_type.
	* vms.c (priv_section_count): Change to unsigned.
@
text
@d613 3
d617 2
a618 117

const bfd_target
TARGET_BIG_SYM =
{
  TARGET_BIG_NAME,
  bfd_target_coff_flavour,	
  BFD_ENDIAN_BIG,		/* data byte order is big */
  BFD_ENDIAN_BIG,		/* header byte order is big */

  (HAS_RELOC | EXEC_P |		/* object flags */
   HAS_LINENO | HAS_DEBUG |
   HAS_SYMS | HAS_LOCALS | WP_TEXT | D_PAGED),

  (SEC_HAS_CONTENTS | SEC_ALLOC | SEC_LOAD | SEC_RELOC /* section flags */
   | SEC_LINK_ONCE | SEC_LINK_DUPLICATES),

  0,				/* leading char */
  '/',				/* ar_pad_char */
  15,				/* ar_max_namelen */

  bfd_getb64, bfd_getb_signed_64, bfd_putb64,
  bfd_getb32, bfd_getb_signed_32, bfd_putb32,
  bfd_getb16, bfd_getb_signed_16, bfd_putb16, /* data */

  bfd_getb64, bfd_getb_signed_64, bfd_putb64,
  bfd_getb32, bfd_getb_signed_32, bfd_putb32,
  bfd_getb16, bfd_getb_signed_16, bfd_putb16, /* hdrs */

  { _bfd_dummy_target,
    pe_object_p, 		/* bfd_check_format */
    bfd_generic_archive_p, 	/* _bfd_dummy_target */
    pe_object_p
  },
  { bfd_false,
    coff_mkobject,
    _bfd_generic_mkarchive, 	/* bfd_set_format */
    bfd_false
  },
  { bfd_false,
    coff_write_object_contents,	/* bfd_write_contents */
    _bfd_write_archive_contents,
    bfd_false
  },

  BFD_JUMP_TABLE_GENERIC (coff),
  BFD_JUMP_TABLE_COPY (coff),
  BFD_JUMP_TABLE_CORE (_bfd_nocore),
  BFD_JUMP_TABLE_ARCHIVE (_bfd_archive_coff),
  BFD_JUMP_TABLE_SYMBOLS (coff),
  BFD_JUMP_TABLE_RELOCS (coff),
  BFD_JUMP_TABLE_WRITE (coff),
  BFD_JUMP_TABLE_LINK (coff),
  BFD_JUMP_TABLE_DYNAMIC (_bfd_nodynamic),

  COFF_SWAP_TABLE,
};

const bfd_target
TARGET_LITTLE_SYM =
{
  TARGET_LITTLE_NAME,
  bfd_target_coff_flavour,
  BFD_ENDIAN_LITTLE,		/* data byte order is little */
  BFD_ENDIAN_LITTLE,		/* header byte order is little */

  (HAS_RELOC | EXEC_P |		/* object flags */
   HAS_LINENO | HAS_DEBUG |
   HAS_SYMS | HAS_LOCALS | WP_TEXT | D_PAGED),

  (SEC_HAS_CONTENTS | SEC_ALLOC | SEC_LOAD | SEC_RELOC /* section flags */
   | SEC_LINK_ONCE | SEC_LINK_DUPLICATES),
  
  0,				/* leading underscore */
  '/',				/* ar_pad_char */
  15,				/* ar_max_namelen */

  bfd_getl64, bfd_getl_signed_64, bfd_putl64,
  bfd_getl32, bfd_getl_signed_32, bfd_putl32,
  bfd_getl16, bfd_getl_signed_16, bfd_putl16, /* data */
  
  bfd_getl64, bfd_getl_signed_64, bfd_putl64,
  bfd_getl32, bfd_getl_signed_32, bfd_putl32,
  bfd_getl16, bfd_getl_signed_16, bfd_putl16, /* hdrs */

/* Note that we allow an object file to be treated as a core file as well. */
  {
    _bfd_dummy_target,
    pe_object_p, 		/* bfd_check_format */
    bfd_generic_archive_p,
    pe_object_p
  },
  {
    bfd_false,
    coff_mkobject,
    _bfd_generic_mkarchive, 	/* bfd_set_format */
    bfd_false
  },
  {
    bfd_false,
    coff_write_object_contents, /* bfd_write_contents */
    _bfd_write_archive_contents,
    bfd_false
  },

  BFD_JUMP_TABLE_GENERIC (coff),
  BFD_JUMP_TABLE_COPY (coff),
  BFD_JUMP_TABLE_CORE (_bfd_nocore),
  BFD_JUMP_TABLE_ARCHIVE (_bfd_archive_coff),
  BFD_JUMP_TABLE_SYMBOLS (coff),
  BFD_JUMP_TABLE_RELOCS (coff),
  BFD_JUMP_TABLE_WRITE (coff),
  BFD_JUMP_TABLE_LINK (coff),
  BFD_JUMP_TABLE_DYNAMIC (_bfd_nodynamic),

  COFF_SWAP_TABLE,
};

@


1.5
log
@	* Many files: Changes to avoid gcc warnings: Remove unused local
	variables.  Add default case to enum switches.
	* coff-arm.c (bfd_arm_allocate_interworking_sections): Only
	compile if not COFF_IMAGE_WITH_PE.
	(record_arm_to_thumb_glue, record_thumb_to_arm_glue): Likewise.
	(bfd_arm_get_bfd_for_interworking): Likewise.
	(bfd_arm_process_before_allocation): Likewise.
	* epoc-pei-arm.c: Don't rename bfd_arm functions.
	* pei-arm.c: Likewise.
	* elf32-mips.c (mips_elf_link_hash_table_create): Don't declare.
	(MIPS_ELF_ADD_DYNAMIC_ENTRY): Correct last change.
	(mips_elf_got16_entry): Put parens around & in body of ==.
	(mips_elf_calculate_relocation): Correct test for empty string.
	* vms-gsd.c: Use _bfd_error_handler rather than fprintf to
	stderr.
	* vms-misc.c (_bfd_vms_length_hash_symbol): Correct sprintf
	format.
@
text
@d257 5
a261 5
     asymbol * symbol;
     PTR data;
     asection * input_section;
     bfd * output_bfd;
     char ** error_message;
d280 1
a280 1
     bfd * abfd;
d305 1
a305 1
     bfd * abfd;
d308 1
a308 1
     struct coff_link_hash_entry * h;
d346 1
a346 1
     bfd * abfd;
@


1.4
log
@reinstate uin_reloc_p
@
text
@d2 1
a2 2
   Copyright 1999
   Free Software Foundation, Inc.
a398 2
      asection *                     toc_section = NULL;
      bfd_vma                        relocation;
@


1.3
log
@Add support for mcore RVA relocs.
@
text
@d342 11
@


1.2
log
@Replace assert (about endianism) with an error message
@
text
@a47 2
static boolean                      in_reloc_p
  PARAMS ((bfd *, reloc_howto_type *));
d85 1
a85 1
	 0,		         /* special_function */                     
d99 1
a99 1
	 0,		        /* special_function */                     
d115 1
a115 1
	 mcore_coff_unsupported_reloc,	/* special_function */
d147 1
a147 1
	 mcore_coff_unsupported_reloc,/* special_function */
d188 14
d292 1
d320 3
a342 9
/* Return true if this relocation should
   appear in the output .reloc section. */
static boolean in_reloc_p (abfd, howto)
     bfd * abfd;
     reloc_howto_type * howto;
{
  return ! howto->pc_relative;
}     

d502 1
@


1.1
log
@Initial revision
@
text
@d360 13
a372 2
  BFD_ASSERT (input_bfd->xvec->byteorder
	      == output_bfd->xvec->byteorder);
@


1.1.1.1
log
@19990502 sourceware import
@
text
@@

