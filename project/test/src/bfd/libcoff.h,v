head	1.65;
access;
symbols
	sid-snapshot-20180601:1.65
	sid-snapshot-20180501:1.65
	sid-snapshot-20180401:1.65
	sid-snapshot-20180301:1.65
	sid-snapshot-20180201:1.65
	sid-snapshot-20180101:1.65
	sid-snapshot-20171201:1.65
	sid-snapshot-20171101:1.65
	sid-snapshot-20171001:1.65
	sid-snapshot-20170901:1.65
	sid-snapshot-20170801:1.65
	sid-snapshot-20170701:1.65
	sid-snapshot-20170601:1.65
	sid-snapshot-20170501:1.65
	sid-snapshot-20170401:1.65
	sid-snapshot-20170301:1.65
	sid-snapshot-20170201:1.65
	sid-snapshot-20170101:1.65
	sid-snapshot-20161201:1.65
	sid-snapshot-20161101:1.65
	sid-snapshot-20160901:1.65
	sid-snapshot-20160801:1.65
	sid-snapshot-20160701:1.65
	sid-snapshot-20160601:1.65
	sid-snapshot-20160501:1.65
	sid-snapshot-20160401:1.65
	sid-snapshot-20160301:1.65
	sid-snapshot-20160201:1.65
	sid-snapshot-20160101:1.65
	sid-snapshot-20151201:1.65
	sid-snapshot-20151101:1.65
	sid-snapshot-20151001:1.65
	sid-snapshot-20150901:1.65
	sid-snapshot-20150801:1.65
	sid-snapshot-20150701:1.65
	sid-snapshot-20150601:1.65
	sid-snapshot-20150501:1.65
	sid-snapshot-20150401:1.65
	sid-snapshot-20150301:1.65
	sid-snapshot-20150201:1.65
	sid-snapshot-20150101:1.65
	sid-snapshot-20141201:1.65
	sid-snapshot-20141101:1.65
	sid-snapshot-20141001:1.65
	sid-snapshot-20140901:1.65
	sid-snapshot-20140801:1.65
	sid-snapshot-20140701:1.65
	sid-snapshot-20140601:1.65
	sid-snapshot-20140501:1.65
	sid-snapshot-20140401:1.65
	sid-snapshot-20140301:1.65
	sid-snapshot-20140201:1.65
	sid-snapshot-20140101:1.65
	sid-snapshot-20131201:1.65
	sid-snapshot-20131101:1.65
	sid-snapshot-20131001:1.65
	binutils-2_24-branch:1.65.0.4
	binutils-2_24-branchpoint:1.65
	binutils-2_21_1:1.58
	sid-snapshot-20130901:1.65
	gdb_7_6_1-2013-08-30-release:1.65
	sid-snapshot-20130801:1.65
	sid-snapshot-20130701:1.65
	sid-snapshot-20130601:1.65
	sid-snapshot-20130501:1.65
	gdb_7_6-2013-04-26-release:1.65
	sid-snapshot-20130401:1.65
	binutils-2_23_2:1.63
	gdb_7_6-branch:1.65.0.2
	gdb_7_6-2013-03-12-branchpoint:1.65
	sid-snapshot-20130301:1.65
	sid-snapshot-20130201:1.65
	sid-snapshot-20130101:1.64
	sid-snapshot-20121201:1.64
	gdb_7_5_1-2012-11-29-release:1.63
	binutils-2_23_1:1.63
	sid-snapshot-20121101:1.64
	binutils-2_23:1.63
	sid-snapshot-20121001:1.63
	sid-snapshot-20120901:1.63
	gdb_7_5-2012-08-17-release:1.63
	sid-snapshot-20120801:1.63
	binutils-2_23-branch:1.63.0.6
	binutils-2_23-branchpoint:1.63
	gdb_7_5-branch:1.63.0.4
	gdb_7_5-2012-07-18-branchpoint:1.63
	sid-snapshot-20120701:1.63
	sid-snapshot-20120601:1.63
	sid-snapshot-20120501:1.63
	binutils-2_22_branch:1.61.0.4
	gdb_7_4_1-2012-04-26-release:1.63
	sid-snapshot-20120401:1.63
	sid-snapshot-20120301:1.63
	sid-snapshot-20120201:1.63
	gdb_7_4-2012-01-24-release:1.63
	sid-snapshot-20120101:1.63
	gdb_7_4-branch:1.63.0.2
	gdb_7_4-2011-12-13-branchpoint:1.63
	sid-snapshot-20111201:1.63
	binutils-2_22:1.61
	sid-snapshot-20111101:1.62
	sid-snapshot-20111001:1.62
	binutils-2_22-branch:1.61.0.2
	binutils-2_22-branchpoint:1.61
	gdb_7_3_1-2011-09-04-release:1.59
	sid-snapshot-20110901:1.61
	sid-snapshot-20110801:1.60
	gdb_7_3-2011-07-26-release:1.59
	sid-snapshot-20110701:1.60
	sid-snapshot-20110601:1.59
	sid-snapshot-20110501:1.59
	gdb_7_3-branch:1.59.0.2
	gdb_7_3-2011-04-01-branchpoint:1.59
	sid-snapshot-20110401:1.59
	sid-snapshot-20110301:1.58
	sid-snapshot-20110201:1.58
	sid-snapshot-20110101:1.58
	binutils-2_21:1.58
	sid-snapshot-20101201:1.58
	binutils-2_21-branch:1.58.0.4
	binutils-2_21-branchpoint:1.58
	sid-snapshot-20101101:1.58
	sid-snapshot-20101001:1.58
	binutils-2_20_1:1.56.2.1
	gdb_7_2-2010-09-02-release:1.58
	sid-snapshot-20100901:1.58
	sid-snapshot-20100801:1.58
	gdb_7_2-branch:1.58.0.2
	gdb_7_2-2010-07-07-branchpoint:1.58
	sid-snapshot-20100701:1.58
	sid-snapshot-20100601:1.58
	sid-snapshot-20100501:1.58
	sid-snapshot-20100401:1.58
	gdb_7_1-2010-03-18-release:1.57
	sid-snapshot-20100301:1.57
	gdb_7_1-branch:1.57.0.4
	gdb_7_1-2010-02-18-branchpoint:1.57
	sid-snapshot-20100201:1.57
	sid-snapshot-20100101:1.57
	gdb_7_0_1-2009-12-22-release:1.57
	sid-snapshot-20091201:1.57
	sid-snapshot-20091101:1.57
	binutils-2_20:1.56.2.1
	gdb_7_0-2009-10-06-release:1.57
	sid-snapshot-20091001:1.57
	gdb_7_0-branch:1.57.0.2
	gdb_7_0-2009-09-16-branchpoint:1.57
	arc-sim-20090309:1.46
	binutils-arc-20081103-branch:1.48.0.12
	binutils-arc-20081103-branchpoint:1.48
	binutils-2_20-branch:1.56.0.2
	binutils-2_20-branchpoint:1.56
	sid-snapshot-20090901:1.56
	sid-snapshot-20090801:1.55
	msnyder-checkpoint-072509-branch:1.55.0.4
	msnyder-checkpoint-072509-branchpoint:1.55
	sid-snapshot-20090701:1.55
	dje-cgen-play1-branch:1.55.0.2
	dje-cgen-play1-branchpoint:1.55
	sid-snapshot-20090601:1.55
	sid-snapshot-20090501:1.55
	sid-snapshot-20090401:1.52
	arc-20081103-branch:1.48.0.10
	arc-20081103-branchpoint:1.48
	arc-insight_6_8-branch:1.46.0.14
	arc-insight_6_8-branchpoint:1.46
	insight_6_8-branch:1.46.0.12
	insight_6_8-branchpoint:1.46
	sid-snapshot-20090301:1.49
	binutils-2_19_1:1.48
	sid-snapshot-20090201:1.48
	sid-snapshot-20090101:1.48
	reverse-20081226-branch:1.48.0.8
	reverse-20081226-branchpoint:1.48
	sid-snapshot-20081201:1.48
	multiprocess-20081120-branch:1.48.0.6
	multiprocess-20081120-branchpoint:1.48
	sid-snapshot-20081101:1.48
	binutils-2_19:1.48
	sid-snapshot-20081001:1.48
	reverse-20080930-branch:1.48.0.4
	reverse-20080930-branchpoint:1.48
	binutils-2_19-branch:1.48.0.2
	binutils-2_19-branchpoint:1.48
	sid-snapshot-20080901:1.48
	sid-snapshot-20080801:1.48
	reverse-20080717-branch:1.46.0.10
	reverse-20080717-branchpoint:1.46
	sid-snapshot-20080701:1.46
	msnyder-reverse-20080609-branch:1.46.0.8
	msnyder-reverse-20080609-branchpoint:1.46
	drow-reverse-20070409-branch:1.45.0.4
	drow-reverse-20070409-branchpoint:1.45
	sid-snapshot-20080601:1.46
	sid-snapshot-20080501:1.46
	sid-snapshot-20080403:1.46
	sid-snapshot-20080401:1.46
	gdb_6_8-2008-03-27-release:1.46
	sid-snapshot-20080301:1.46
	gdb_6_8-branch:1.46.0.6
	gdb_6_8-2008-02-26-branchpoint:1.46
	sid-snapshot-20080201:1.46
	sid-snapshot-20080101:1.46
	sid-snapshot-20071201:1.46
	sid-snapshot-20071101:1.46
	gdb_6_7_1-2007-10-29-release:1.46
	gdb_6_7-2007-10-10-release:1.46
	sid-snapshot-20071001:1.46
	gdb_6_7-branch:1.46.0.4
	gdb_6_7-2007-09-07-branchpoint:1.46
	binutils-2_18:1.46
	binutils-2_18-branch:1.46.0.2
	binutils-2_18-branchpoint:1.46
	insight_6_6-20070208-release:1.45
	binutils-csl-coldfire-4_1-32:1.43.2.1
	binutils-csl-sourcerygxx-4_1-32:1.43.2.1
	gdb_6_6-2006-12-18-release:1.45
	binutils-csl-innovasic-fido-3_4_4-33:1.43.2.1
	binutils-csl-sourcerygxx-3_4_4-32:1.37
	binutils-csl-coldfire-4_1-30:1.43.2.1
	binutils-csl-sourcerygxx-4_1-30:1.43.2.1
	binutils-csl-coldfire-4_1-28:1.43.2.1
	binutils-csl-sourcerygxx-4_1-29:1.43.2.1
	binutils-csl-sourcerygxx-4_1-28:1.43.2.1
	gdb_6_6-branch:1.45.0.2
	gdb_6_6-2006-11-15-branchpoint:1.45
	binutils-csl-arm-2006q3-27:1.43.2.1
	binutils-csl-sourcerygxx-4_1-27:1.43.2.1
	binutils-csl-arm-2006q3-26:1.43.2.1
	binutils-csl-sourcerygxx-4_1-26:1.43.2.1
	binutils-csl-sourcerygxx-4_1-25:1.43.2.1
	binutils-csl-sourcerygxx-4_1-24:1.43.2.1
	binutils-csl-sourcerygxx-4_1-23:1.43.2.1
	insight_6_5-20061003-release:1.44
	gdb-csl-symbian-6_4_50_20060226-12:1.42
	binutils-csl-sourcerygxx-4_1-21:1.43.2.1
	binutils-csl-arm-2006q3-21:1.43.2.1
	binutils-csl-sourcerygxx-4_1-22:1.43.2.1
	binutils-csl-palmsource-arm-prelinker-1_0-1:1.43.2.1
	binutils-csl-sourcerygxx-4_1-20:1.43.2.1
	binutils-csl-arm-2006q3-19:1.43.2.1
	binutils-csl-sourcerygxx-4_1-19:1.43.2.1
	binutils-csl-sourcerygxx-4_1-18:1.43.2.1
	binutils-csl-renesas-4_1-9:1.43.2.1
	gdb-csl-sourcerygxx-3_4_4-25:1.42
	binutils-csl-sourcerygxx-3_4_4-25:1.37
	nickrob-async-20060828-mergepoint:1.45
	gdb-csl-symbian-6_4_50_20060226-11:1.42
	binutils-csl-renesas-4_1-8:1.43.2.1
	binutils-csl-renesas-4_1-7:1.43.2.1
	binutils-csl-renesas-4_1-6:1.43.2.1
	gdb-csl-sourcerygxx-4_1-17:1.42
	binutils-csl-sourcerygxx-4_1-17:1.43.2.1
	gdb-csl-20060226-branch-local-2:1.42
	gdb-csl-sourcerygxx-4_1-14:1.42
	binutils-csl-sourcerygxx-4_1-14:1.43.2.1
	binutils-csl-sourcerygxx-4_1-15:1.43.2.1
	gdb-csl-sourcerygxx-4_1-13:1.42
	binutils-csl-sourcerygxx-4_1-13:1.43.2.1
	binutils-2_17:1.44
	gdb-csl-sourcerygxx-4_1-12:1.42
	binutils-csl-sourcerygxx-4_1-12:1.43.2.1
	gdb-csl-sourcerygxx-3_4_4-21:1.42
	binutils-csl-sourcerygxx-3_4_4-21:1.43.2.1
	gdb_6_5-20060621-release:1.44
	binutils-csl-wrs-linux-3_4_4-24:1.37
	binutils-csl-wrs-linux-3_4_4-23:1.37
	gdb-csl-sourcerygxx-4_1-9:1.42
	binutils-csl-sourcerygxx-4_1-9:1.43
	gdb-csl-sourcerygxx-4_1-8:1.42
	binutils-csl-sourcerygxx-4_1-8:1.43
	gdb-csl-sourcerygxx-4_1-7:1.42
	binutils-csl-sourcerygxx-4_1-7:1.43
	gdb-csl-arm-2006q1-6:1.42
	binutils-csl-arm-2006q1-6:1.43
	gdb-csl-sourcerygxx-4_1-6:1.42
	binutils-csl-sourcerygxx-4_1-6:1.43
	binutils-csl-wrs-linux-3_4_4-22:1.37
	gdb-csl-symbian-6_4_50_20060226-10:1.42
	gdb-csl-symbian-6_4_50_20060226-9:1.42
	gdb-csl-symbian-6_4_50_20060226-8:1.42
	gdb-csl-coldfire-4_1-11:1.42
	binutils-csl-coldfire-4_1-11:1.43
	gdb-csl-sourcerygxx-3_4_4-19:1.42
	binutils-csl-sourcerygxx-3_4_4-19:1.43
	gdb-csl-coldfire-4_1-10:1.42
	gdb_6_5-branch:1.44.0.12
	gdb_6_5-2006-05-14-branchpoint:1.44
	binutils-csl-coldfire-4_1-10:1.43
	gdb-csl-sourcerygxx-4_1-5:1.42
	binutils-csl-sourcerygxx-4_1-5:1.43
	nickrob-async-20060513-branch:1.44.0.10
	nickrob-async-20060513-branchpoint:1.44
	gdb-csl-sourcerygxx-4_1-4:1.42
	binutils-csl-sourcerygxx-4_1-4:1.43
	msnyder-reverse-20060502-branch:1.44.0.8
	msnyder-reverse-20060502-branchpoint:1.44
	binutils-csl-wrs-linux-3_4_4-21:1.37
	gdb-csl-morpho-4_1-4:1.42
	binutils-csl-morpho-4_1-4:1.43
	gdb-csl-sourcerygxx-3_4_4-17:1.42
	binutils-csl-sourcerygxx-3_4_4-17:1.43
	binutils-csl-wrs-linux-3_4_4-20:1.37
	readline_5_1-import-branch:1.44.0.6
	readline_5_1-import-branchpoint:1.44
	gdb-csl-20060226-branch-merge-to-csl-symbian-1:1.42
	binutils-2_17-branch:1.44.0.4
	binutils-2_17-branchpoint:1.44
	gdb-csl-symbian-20060226-branch:1.42.0.16
	gdb-csl-symbian-20060226-branchpoint:1.42
	gdb-csl-20060226-branch-merge-to-csl-local-1:1.42
	msnyder-reverse-20060331-branch:1.44.0.2
	msnyder-reverse-20060331-branchpoint:1.44
	binutils-csl-2_17-branch:1.43.0.2
	binutils-csl-2_17-branchpoint:1.43
	gdb-csl-available-20060303-branch:1.42.0.14
	gdb-csl-available-20060303-branchpoint:1.42
	gdb-csl-20060226-branch:1.42.0.12
	gdb-csl-20060226-branchpoint:1.42
	gdb_6_4-20051202-release:1.42
	msnyder-fork-checkpoint-branch:1.42.0.10
	msnyder-fork-checkpoint-branchpoint:1.42
	gdb-csl-gxxpro-6_3-branch:1.42.0.8
	gdb-csl-gxxpro-6_3-branchpoint:1.42
	gdb_6_4-branch:1.42.0.6
	gdb_6_4-2005-11-01-branchpoint:1.42
	gdb-csl-arm-20051020-branch:1.42.0.4
	gdb-csl-arm-20051020-branchpoint:1.42
	binutils-csl-gxxpro-3_4-branch:1.37.0.8
	binutils-csl-gxxpro-3_4-branchpoint:1.37
	binutils-2_16_1:1.37
	msnyder-tracepoint-checkpoint-branch:1.42.0.2
	msnyder-tracepoint-checkpoint-branchpoint:1.42
	gdb-csl-arm-20050325-2005-q1b:1.37
	binutils-csl-arm-2005q1b:1.37
	binutils-2_16:1.37
	gdb-csl-arm-20050325-2005-q1a:1.37
	binutils-csl-arm-2005q1a:1.37
	csl-arm-20050325-branch:1.37.0.6
	csl-arm-20050325-branchpoint:1.37
	binutils-csl-arm-2005q1-branch:1.37.0.4
	binutils-csl-arm-2005q1-branchpoint:1.37
	binutils-2_16-branch:1.37.0.2
	binutils-2_16-branchpoint:1.37
	csl-arm-2004-q3d:1.36
	gdb_6_3-20041109-release:1.36
	gdb_6_3-branch:1.36.0.2
	gdb_6_3-20041019-branchpoint:1.36
	csl-arm-2004-q3:1.36
	drow_intercu-merge-20040921:1.36
	drow_intercu-merge-20040915:1.36
	jimb-gdb_6_2-e500-branch:1.35.0.6
	jimb-gdb_6_2-e500-branchpoint:1.35
	gdb_6_2-20040730-release:1.35
	gdb_6_2-branch:1.35.0.2
	gdb_6_2-2004-07-10-gmt-branchpoint:1.35
	gdb_6_1_1-20040616-release:1.34
	binutils-2_15:1.34
	binutils-2_15-branchpoint:1.34
	csl-arm-2004-q1a:1.34
	csl-arm-2004-q1:1.34
	gdb_6_1-2004-04-05-release:1.34
	drow_intercu-merge-20040402:1.34
	drow_intercu-merge-20040327:1.34
	ezannoni_pie-20040323-branch:1.34.0.14
	ezannoni_pie-20040323-branchpoint:1.34
	cagney_tramp-20040321-mergepoint:1.34
	cagney_tramp-20040309-branch:1.34.0.12
	cagney_tramp-20040309-branchpoint:1.34
	gdb_6_1-branch:1.34.0.10
	gdb_6_1-2004-03-01-gmt-branchpoint:1.34
	drow_intercu-20040221-branch:1.34.0.8
	drow_intercu-20040221-branchpoint:1.34
	binutils-2_15-branch:1.34.0.6
	cagney_bfdfile-20040213-branch:1.34.0.4
	cagney_bfdfile-20040213-branchpoint:1.34
	drow-cplus-merge-20040208:1.34
	carlton_dictionary-20040126-merge:1.34
	cagney_bigcore-20040122-branch:1.34.0.2
	cagney_bigcore-20040122-branchpoint:1.34
	drow-cplus-merge-20040113:1.34
	csl-arm-2003-q4:1.34
	drow-cplus-merge-20031224:1.34
	drow-cplus-merge-20031220:1.34
	carlton_dictionary-20031215-merge:1.34
	drow-cplus-merge-20031214:1.34
	carlton-dictionary-20031111-merge:1.34
	gdb_6_0-2003-10-04-release:1.30
	kettenis_sparc-20030918-branch:1.32.0.6
	kettenis_sparc-20030918-branchpoint:1.32
	carlton_dictionary-20030917-merge:1.32
	ezannoni_pie-20030916-branchpoint:1.32
	ezannoni_pie-20030916-branch:1.32.0.4
	cagney_x86i386-20030821-branch:1.32.0.2
	cagney_x86i386-20030821-branchpoint:1.32
	carlton_dictionary-20030805-merge:1.32
	carlton_dictionary-20030627-merge:1.32
	gdb_6_0-branch:1.30.0.32
	gdb_6_0-2003-06-23-branchpoint:1.30
	jimb-ppc64-linux-20030613-branch:1.30.0.30
	jimb-ppc64-linux-20030613-branchpoint:1.30
	binutils-2_14:1.30
	cagney_convert-20030606-branch:1.30.0.28
	cagney_convert-20030606-branchpoint:1.30
	cagney_writestrings-20030508-branch:1.30.0.26
	cagney_writestrings-20030508-branchpoint:1.30
	jimb-ppc64-linux-20030528-branch:1.30.0.24
	jimb-ppc64-linux-20030528-branchpoint:1.30
	carlton_dictionary-20030523-merge:1.30
	cagney_fileio-20030521-branch:1.30.0.22
	cagney_fileio-20030521-branchpoint:1.30
	kettenis_i386newframe-20030517-mergepoint:1.30
	jimb-ppc64-linux-20030509-branch:1.30.0.20
	jimb-ppc64-linux-20030509-branchpoint:1.30
	kettenis_i386newframe-20030504-mergepoint:1.30
	carlton_dictionary-20030430-merge:1.30
	binutils-2_14-branch:1.30.0.18
	binutils-2_14-branchpoint:1.30
	kettenis_i386newframe-20030419-branch:1.30.0.16
	kettenis_i386newframe-20030419-branchpoint:1.30
	carlton_dictionary-20030416-merge:1.30
	cagney_frameaddr-20030409-mergepoint:1.30
	kettenis_i386newframe-20030406-branch:1.30.0.14
	kettenis_i386newframe-20030406-branchpoint:1.30
	cagney_frameaddr-20030403-branchpoint:1.30
	cagney_frameaddr-20030403-branch:1.30.0.12
	cagney_framebase-20030330-mergepoint:1.30
	cagney_framebase-20030326-branch:1.30.0.10
	cagney_framebase-20030326-branchpoint:1.30
	cagney_lazyid-20030317-branch:1.30.0.8
	cagney_lazyid-20030317-branchpoint:1.30
	kettenis-i386newframe-20030316-mergepoint:1.30
	offbyone-20030313-branch:1.30.0.6
	offbyone-20030313-branchpoint:1.30
	kettenis-i386newframe-20030308-branch:1.30.0.4
	kettenis-i386newframe-20030308-branchpoint:1.30
	carlton_dictionary-20030305-merge:1.30
	cagney_offbyone-20030303-branch:1.30.0.2
	cagney_offbyone-20030303-branchpoint:1.30
	carlton_dictionary-20030207-merge:1.29
	interps-20030202-branch:1.29.0.4
	interps-20030202-branchpoint:1.29
	cagney-unwind-20030108-branch:1.29.0.2
	cagney-unwind-20030108-branchpoint:1.29
	binutils-2_13_2_1:1.25.2.1
	binutils-2_13_2:1.25.2.1
	carlton_dictionary-20021223-merge:1.29
	gdb_5_3-2002-12-12-release:1.27
	carlton_dictionary-20021115-merge:1.28
	binutils-2_13_1:1.25.2.1
	kseitz_interps-20021105-merge:1.28
	kseitz_interps-20021103-merge:1.28
	drow-cplus-merge-20021020:1.27
	drow-cplus-merge-20021025:1.27
	carlton_dictionary-20021025-merge:1.28
	carlton_dictionary-20021011-merge:1.27
	drow-cplus-branch:1.27.0.12
	drow-cplus-branchpoint:1.27
	kseitz_interps-20020930-merge:1.27
	carlton_dictionary-20020927-merge:1.27
	carlton_dictionary-branch:1.27.0.10
	carlton_dictionary-20020920-branchpoint:1.27
	sid-20020905-branchpoint:1.27
	sid-20020905-branch:1.27.0.8
	gdb_5_3-branch:1.27.0.6
	gdb_5_3-2002-09-04-branchpoint:1.27
	kseitz_interps-20020829-merge:1.27
	cagney_sysregs-20020825-branch:1.27.0.4
	cagney_sysregs-20020825-branchpoint:1.27
	readline_4_3-import-branch:1.27.0.2
	readline_4_3-import-branchpoint:1.27
	binutils-2_13:1.25
	gdb_5_2_1-2002-07-23-release:1.23
	binutils-2_13-branchpoint:1.25
	binutils-2_13-branch:1.25.0.2
	kseitz_interps-20020528-branch:1.24.0.6
	kseitz_interps-20020528-branchpoint:1.24
	cagney_regbuf-20020515-branch:1.24.0.4
	cagney_regbuf-20020515-branchpoint:1.24
	binutils-2_12_1:1.23
	jimb-macro-020506-branch:1.24.0.2
	jimb-macro-020506-branchpoint:1.24
	gdb_5_2-2002-04-29-release:1.23
	binutils-2_12:1.23
	gdb_5_2-branch:1.23.0.4
	gdb_5_2-2002-03-03-branchpoint:1.23
	binutils-2_12-branch:1.23.0.2
	binutils-2_12-branchpoint:1.23
	gdb_5_1_1-2002-01-24-release:1.20
	gdb_5_1_0_1-2002-01-03-release:1.20
	cygnus_cvs_20020108_pre:1.23
	gdb_5_1_0_1-2002-01-03-branch:1.20.0.6
	gdb_5_1_0_1-2002-01-03-branchpoint:1.20
	gdb_5_1-2001-11-21-release:1.20
	gdb_s390-2001-09-26-branch:1.20.0.4
	gdb_s390-2001-09-26-branchpoint:1.20
	gdb_5_1-2001-07-29-branch:1.20.0.2
	gdb_5_1-2001-07-29-branchpoint:1.20
	binutils-2_11_2:1.15.2.2
	binutils-2_11_1:1.15.2.2
	binutils-2_11:1.15
	x86_64versiong3:1.16
	binutils-2_11-branch:1.15.0.2
	insight-precleanup-2001-01-01:1.15
	binutils-2_10_1:1.8
	binutils-2_10:1.8
	gdb-premipsmulti-2000-06-06-branch:1.10.0.2
	gdb-premipsmulti-2000-06-06-branchpoint:1.10
	gdb_5_0-2000-05-19-release:1.8
	gdb_4_18_2-2000-05-18-release:1.8
	gdb_4_95_1-2000-05-11-snapshot:1.8
	gdb_4_95_0-2000-04-27-snapshot:1.8
	gdb_5_0-2000-04-10-branch:1.8.0.4
	gdb_5_0-2000-04-10-branchpoint:1.8
	binutils-2_10-branch:1.8.0.2
	binutils-2_10-branchpoint:1.8
	binutils_latest_snapshot:1.65
	repo-unification-2000-02-06:1.8
	binu_ss_19990721:1.1.1.1
	binu_ss_19990602:1.1.1.1
	binu_ss_19990502:1.1.1.1
	cygnus:1.1.1;
locks; strict;
comment	@ * @;


1.65
date	2013.01.10.20.03.54;	author hjl;	state Exp;
branches;
next	1.64;

1.64
date	2012.10.18.17.42.29;	author ktietz;	state Exp;
branches;
next	1.63;

1.63
date	2011.11.02.14.53.04;	author jbeulich;	state Exp;
branches;
next	1.62;

1.62
date	2011.09.30.10.39.45;	author gingold;	state Exp;
branches;
next	1.61;

1.61
date	2011.08.17.00.39.39;	author amodra;	state Exp;
branches;
next	1.60;

1.60
date	2011.06.13.00.59.15;	author amodra;	state Exp;
branches;
next	1.59;

1.59
date	2011.03.31.08.08.39;	author gingold;	state Exp;
branches;
next	1.58;

1.58
date	2010.03.18.12.27.15;	author hjl;	state Exp;
branches;
next	1.57;

1.57
date	2009.09.05.07.56.22;	author nickc;	state Exp;
branches;
next	1.56;

1.56
date	2009.08.10.21.56.42;	author jkratoch;	state Exp;
branches
	1.56.2.1;
next	1.55;

1.55
date	2009.04.21.17.08.20;	author hjl;	state Exp;
branches;
next	1.54;

1.54
date	2009.04.17.13.46.16;	author hjl;	state Exp;
branches;
next	1.53;

1.53
date	2009.04.16.23.06.59;	author rsandifo;	state Exp;
branches;
next	1.52;

1.52
date	2009.03.14.09.32.33;	author rsandifo;	state Exp;
branches;
next	1.51;

1.51
date	2009.03.14.09.32.06;	author rsandifo;	state Exp;
branches;
next	1.50;

1.50
date	2009.03.14.09.17.56;	author rsandifo;	state Exp;
branches;
next	1.49;

1.49
date	2009.02.18.18.23.07;	author davek;	state Exp;
branches;
next	1.48;

1.48
date	2008.07.30.04.34.56;	author amodra;	state Exp;
branches;
next	1.47;

1.47
date	2008.07.18.11.30.22;	author nickc;	state Exp;
branches;
next	1.46;

1.46
date	2007.07.03.14.26.42;	author nickc;	state Exp;
branches;
next	1.45;

1.45
date	2006.06.19.13.17.44;	author amodra;	state Exp;
branches;
next	1.44;

1.44
date	2006.03.23.08.23.09;	author aj;	state Exp;
branches;
next	1.43;

1.43
date	2006.03.16.12.20.16;	author amodra;	state Exp;
branches
	1.43.2.1;
next	1.42;

1.42
date	2005.05.23.17.44.54;	author fnf;	state Exp;
branches;
next	1.41;

1.41
date	2005.05.04.15.53.34;	author nickc;	state Exp;
branches;
next	1.40;

1.40
date	2005.05.04.07.19.30;	author nickc;	state Exp;
branches;
next	1.39;

1.39
date	2005.04.21.07.45.37;	author nickc;	state Exp;
branches;
next	1.38;

1.38
date	2005.04.12.02.50.24;	author amodra;	state Exp;
branches;
next	1.37;

1.37
date	2005.03.03.11.41.00;	author amodra;	state Exp;
branches;
next	1.36;

1.36
date	2004.07.21.15.42.57;	author hjl;	state Exp;
branches;
next	1.35;

1.35
date	2004.06.28.13.57.59;	author amodra;	state Exp;
branches;
next	1.34;

1.34
date	2003.10.20.14.38.39;	author cagney;	state Exp;
branches
	1.34.8.1;
next	1.33;

1.33
date	2003.10.16.04.11.07;	author cagney;	state Exp;
branches;
next	1.32;

1.32
date	2003.06.25.11.07.05;	author amodra;	state Exp;
branches;
next	1.31;

1.31
date	2003.06.25.06.40.22;	author amodra;	state Exp;
branches;
next	1.30;

1.30
date	2003.02.14.11.16.09;	author nickc;	state Exp;
branches;
next	1.29;

1.29
date	2002.11.30.08.39.39;	author amodra;	state Exp;
branches;
next	1.28;

1.28
date	2002.10.25.02.45.53;	author danglin;	state Exp;
branches;
next	1.27;

1.27
date	2002.08.09.15.38.22;	author nickc;	state Exp;
branches
	1.27.10.1
	1.27.12.1;
next	1.26;

1.26
date	2002.07.31.09.38.03;	author nickc;	state Exp;
branches;
next	1.25;

1.25
date	2002.06.05.03.43.11;	author amodra;	state Exp;
branches
	1.25.2.1;
next	1.24;

1.24
date	2002.04.04.19.53.37;	author drow;	state Exp;
branches
	1.24.4.1
	1.24.6.1;
next	1.23;

1.23
date	2001.10.10.12.08.28;	author kazu;	state Exp;
branches;
next	1.22;

1.22
date	2001.10.01.14.03.35;	author amodra;	state Exp;
branches;
next	1.21;

1.21
date	2001.09.18.09.57.25;	author amodra;	state Exp;
branches;
next	1.20;

1.20
date	2001.06.15.09.03.13;	author nickc;	state Exp;
branches;
next	1.19;

1.19
date	2001.05.25.06.29.21;	author hjl;	state Exp;
branches;
next	1.18;

1.18
date	2001.05.24.20.50.50;	author trix;	state Exp;
branches;
next	1.17;

1.17
date	2001.03.08.21.04.01;	author nickc;	state Exp;
branches;
next	1.16;

1.16
date	2001.02.13.19.23.08;	author dj;	state Exp;
branches;
next	1.15;

1.15
date	2000.12.08.22.50.07;	author nickc;	state Exp;
branches
	1.15.2.1;
next	1.14;

1.14
date	2000.11.30.19.16.54;	author nickc;	state Exp;
branches;
next	1.13;

1.13
date	2000.11.27.12.45.17;	author pb;	state Exp;
branches;
next	1.12;

1.12
date	2000.07.08.12.08.43;	author amodra;	state Exp;
branches;
next	1.11;

1.11
date	2000.06.16.20.40.50;	author nsd;	state Exp;
branches;
next	1.10;

1.10
date	2000.04.29.02.45.34;	author cpopetz;	state Exp;
branches;
next	1.9;

1.9
date	2000.04.26.15.09.43;	author cpopetz;	state Exp;
branches;
next	1.8;

1.8
date	99.09.07.04.28.27;	author ian;	state Exp;
branches;
next	1.7;

1.7
date	99.09.07.03.40.32;	author ian;	state Exp;
branches;
next	1.6;

1.6
date	99.09.07.02.11.54;	author ian;	state Exp;
branches;
next	1.5;

1.5
date	99.08.18.06.00.13;	author ian;	state Exp;
branches;
next	1.4;

1.4
date	99.08.09.02.56.16;	author ian;	state Exp;
branches;
next	1.3;

1.3
date	99.08.05.21.01.37;	author ian;	state Exp;
branches;
next	1.2;

1.2
date	99.07.24.03.16.50;	author ian;	state Exp;
branches;
next	1.1;

1.1
date	99.05.03.07.28.57;	author rth;	state Exp;
branches
	1.1.1.1;
next	;

1.56.2.1
date	2009.09.05.08.00.19;	author nickc;	state Exp;
branches;
next	;

1.43.2.1
date	2006.06.15.15.53.10;	author shinwell;	state Exp;
branches;
next	;

1.34.8.1
date	2004.09.16.17.00.34;	author drow;	state Exp;
branches;
next	;

1.27.10.1
date	2002.10.25.23.49.49;	author carlton;	state Exp;
branches;
next	1.27.10.2;

1.27.10.2
date	2002.12.23.19.37.54;	author carlton;	state Exp;
branches;
next	1.27.10.3;

1.27.10.3
date	2003.03.06.00.56.18;	author carlton;	state Exp;
branches;
next	1.27.10.4;

1.27.10.4
date	2003.06.27.21.49.29;	author carlton;	state Exp;
branches;
next	1.27.10.5;

1.27.10.5
date	2003.11.11.23.50.27;	author carlton;	state Exp;
branches;
next	;

1.27.12.1
date	2003.12.14.20.26.47;	author drow;	state Exp;
branches;
next	;

1.25.2.1
date	2002.10.28.18.45.45;	author drow;	state Exp;
branches;
next	;

1.24.4.1
date	2002.06.15.16.42.39;	author cagney;	state Exp;
branches;
next	;

1.24.6.1
date	2002.06.20.01.31.00;	author kseitz;	state Exp;
branches;
next	1.24.6.2;

1.24.6.2
date	2002.11.03.22.01.37;	author ezannoni;	state Exp;
branches;
next	;

1.15.2.1
date	2001.06.07.03.08.26;	author amodra;	state Exp;
branches;
next	1.15.2.2;

1.15.2.2
date	2001.06.11.10.04.18;	author amodra;	state Exp;
branches;
next	;

1.1.1.1
date	99.05.03.07.28.57;	author rth;	state Exp;
branches;
next	;


desc
@@


1.65
log
@Remove trailing white spaces in bfd

	* aout0.c: Remove trailing white spaces.
	* archive.c: Likewise.
	* archures.c: Likewise.
	* bfd-in.h: Likewise.
	* bfd-in2.h: Likewise.
	* coff-alpha.c: Likewise.
	* coff-i860.c: Likewise.
	* coff-mips.c: Likewise.
	* coff-ppc.c: Likewise.
	* coff-tic80.c: Likewise.
	* coff-x86_64.c: Likewise.
	* coff-z80.c: Likewise.
	* coffcode.h: Likewise.
	* coffgen.c: Likewise.
	* cofflink.c: Likewise.
	* compress.c: Likewise.
	* corefile.c: Likewise.
	* cpu-arm.c: Likewise.
	* cpu-avr.c: Likewise.
	* cpu-bfin.c: Likewise.
	* cpu-cr16.c: Likewise.
	* cpu-cr16c.c: Likewise.
	* cpu-crx.c: Likewise.
	* cpu-h8300.c: Likewise.
	* cpu-i386.c: Likewise.
	* cpu-lm32.c: Likewise.
	* cpu-m68k.c: Likewise.
	* cpu-moxie.c: Likewise.
	* cpu-msp430.c: Likewise.
	* cpu-sh.c: Likewise.
	* cpu-xc16x.c: Likewise.
	* dwarf2.c: Likewise.
	* ecofflink.c: Likewise.
	* ecoffswap.h: Likewise.
	* elf-ifunc.c: Likewise.
	* elf-m10300.c: Likewise.
	* elf-vxworks.c: Likewise.
	* elf32-avr.c: Likewise.
	* elf32-avr.h: Likewise.
	* elf32-cr16.c: Likewise.
	* elf32-cr16c.c: Likewise.
	* elf32-cris.c: Likewise.
	* elf32-crx.c: Likewise.
	* elf32-frv.c: Likewise.
	* elf32-hppa.c: Likewise.
	* elf32-i860.c: Likewise.
	* elf32-ip2k.c: Likewise.
	* elf32-iq2000.c: Likewise.
	* elf32-m32c.c: Likewise.
	* elf32-m68hc1x.c: Likewise.
	* elf32-msp430.c: Likewise.
	* elf32-mt.c: Likewise.
	* elf32-ppc.c: Likewise.
	* elf32-rl78.c: Likewise.
	* elf32-s390.c: Likewise.
	* elf32-score.h: Likewise.
	* elf32-sh-symbian.c: Likewise.
	* elf32-sh.c: Likewise.
	* elf32-spu.c: Likewise.
	* elf32-tic6x.c: Likewise.
	* elf32-v850.c: Likewise.
	* elf32-xc16x.c: Likewise.
	* elf32-xtensa.c: Likewise.
	* elf64-alpha.c: Likewise.
	* elf64-hppa.c: Likewise.
	* elf64-ppc.c: Likewise.
	* elf64-s390.c: Likewise.
	* elfcore.h: Likewise.
	* elflink.c: Likewise.
	* elfxx-mips.c: Likewise.
	* elfxx-sparc.c: Likewise.
	* elfxx-tilegx.c: Likewise.
	* ieee.c: Likewise.
	* libcoff.h: Likewise.
	* libpei.h: Likewise.
	* libxcoff.h: Likewise.
	* linker.c: Likewise.
	* mach-o-i386.c: Likewise.
	* mach-o-target.c: Likewise.
	* mach-o.c: Likewise.
	* mach-o.h: Likewise.
	* mmo.c: Likewise.
	* opncls.c: Likewise.
	* pdp11.c: Likewise.
	* pe-x86_64.c: Likewise.
	* peXXigen.c: Likewise.
	* pef-traceback.h: Likewise.
	* pei-x86_64.c: Likewise.
	* peicode.h: Likewise.
	* plugin.c: Likewise.
	* reloc.c: Likewise.
	* riscix.c: Likewise.
	* section.c: Likewise.
	* som.c: Likewise.
	* syms.c: Likewise.
	* tekhex.c: Likewise.
	* ticoff.h: Likewise.
	* vaxbsd.c: Likewise.
	* xcofflink.c: Likewise.
	* xtensa-isa.c: Likewise.
@
text
@/* DO NOT EDIT!  -*- buffer-read-only: t -*-  This file is automatically 
   generated from "libcoff-in.h" and "coffcode.h".
   Run "make headers" in your build bfd/ to regenerate.  */

/* BFD COFF object file private structure.
   Copyright 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,
   2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011
   Free Software Foundation, Inc.
   Written by Cygnus Support.

   This file is part of BFD, the Binary File Descriptor library.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,
   MA 02110-1301, USA.  */

#include "bfdlink.h"

/* Object file tdata; access macros.  */

#define coff_data(bfd)		      ((bfd)->tdata.coff_obj_data)
#define obj_pe(bfd)                   (coff_data (bfd)->pe)
#define obj_symbols(bfd)	      (coff_data (bfd)->symbols)
#define	obj_sym_filepos(bfd)	      (coff_data (bfd)->sym_filepos)
#define obj_relocbase(bfd)	      (coff_data (bfd)->relocbase)
#define obj_raw_syments(bfd)	      (coff_data (bfd)->raw_syments)
#define obj_raw_syment_count(bfd)     (coff_data (bfd)->raw_syment_count)
#define obj_convert(bfd)	      (coff_data (bfd)->conversion_table)
#define obj_conv_table_size(bfd)      (coff_data (bfd)->conv_table_size)
#define obj_coff_external_syms(bfd)   (coff_data (bfd)->external_syms)
#define obj_coff_keep_syms(bfd)	      (coff_data (bfd)->keep_syms)
#define obj_coff_strings(bfd)	      (coff_data (bfd)->strings)
#define obj_coff_keep_strings(bfd)    (coff_data (bfd)->keep_strings)
#define obj_coff_sym_hashes(bfd)      (coff_data (bfd)->sym_hashes)
#define obj_coff_strings_written(bfd) (coff_data (bfd)->strings_written)
#define obj_coff_local_toc_table(bfd) (coff_data (bfd)->local_toc_sym_map)

/* `Tdata' information kept for COFF files.  */

typedef struct coff_tdata
{
  struct coff_symbol_struct *symbols;	/* Symtab for input bfd.  */
  unsigned int *conversion_table;
  int conv_table_size;
  file_ptr sym_filepos;

  struct coff_ptr_struct *raw_syments;
  unsigned long raw_syment_count;

  /* These are only valid once writing has begun.  */
  long int relocbase;

  /* These members communicate important constants about the symbol table
     to GDB's symbol-reading code.  These `constants' unfortunately vary
     from coff implementation to implementation...  */
  unsigned local_n_btmask;
  unsigned local_n_btshft;
  unsigned local_n_tmask;
  unsigned local_n_tshift;
  unsigned local_symesz;
  unsigned local_auxesz;
  unsigned local_linesz;

  /* The unswapped external symbols.  May be NULL.  Read by
     _bfd_coff_get_external_symbols.  */
  void * external_syms;
  /* If this is TRUE, the external_syms may not be freed.  */
  bfd_boolean keep_syms;

  /* The string table.  May be NULL.  Read by
     _bfd_coff_read_string_table.  */
  char *strings;
  /* If this is TRUE, the strings may not be freed.  */
  bfd_boolean keep_strings;
  /* If this is TRUE, the strings have been written out already.  */
  bfd_boolean strings_written;

  /* Is this a PE format coff file?  */
  int pe;
  /* Used by the COFF backend linker.  */
  struct coff_link_hash_entry **sym_hashes;

  /* Used by the pe linker for PowerPC.  */
  int *local_toc_sym_map;

  struct bfd_link_info *link_info;

  /* Used by coff_find_nearest_line.  */
  void * line_info;

  /* A place to stash dwarf2 info for this bfd.  */
  void * dwarf2_find_line_info;

  /* The timestamp from the COFF file header.  */
  long timestamp;

  /* Copy of some of the f_flags bits in the COFF filehdr structure,
     used by ARM code.  */
  flagword flags;

  /* coff-stgo32 EXE stub header after BFD tdata has been allocated.  Its data
     is kept in internal_filehdr.go32stub beforehand.  */
  char *go32stub;
} coff_data_type;

/* Tdata for pe image files.  */
typedef struct pe_tdata
{
  coff_data_type coff;
  struct internal_extra_pe_aouthdr pe_opthdr;
  int dll;
  int has_reloc_section;
  int dont_strip_reloc;
  bfd_boolean (*in_reloc_p) (bfd *, reloc_howto_type *);
  flagword real_flags;
} pe_data_type;

#define pe_data(bfd)		((bfd)->tdata.pe_obj_data)

/* Tdata for XCOFF files.  */

struct xcoff_tdata
{
  /* Basic COFF information.  */
  coff_data_type coff;

  /* TRUE if this is an XCOFF64 file. */
  bfd_boolean xcoff64;

  /* TRUE if a large a.out header should be generated.  */
  bfd_boolean full_aouthdr;

  /* TOC value.  */
  bfd_vma toc;

  /* Index of section holding TOC.  */
  int sntoc;

  /* Index of section holding entry point.  */
  int snentry;

  /* .text alignment from optional header.  */
  int text_align_power;

  /* .data alignment from optional header.  */
  int data_align_power;

  /* modtype from optional header.  */
  short modtype;

  /* cputype from optional header.  */
  short cputype;

  /* maxdata from optional header.  */
  bfd_vma maxdata;

  /* maxstack from optional header.  */
  bfd_vma maxstack;

  /* Used by the XCOFF backend linker.  */
  asection **csects;
  long *debug_indices;
  unsigned int *lineno_counts;
  unsigned int import_file_id;
};

#define xcoff_data(abfd) ((abfd)->tdata.xcoff_obj_data)

/* We take the address of the first element of an asymbol to ensure that the
   macro is only ever applied to an asymbol.  */
#define coffsymbol(asymbol) ((coff_symbol_type *)(&((asymbol)->the_bfd)))

/* The used_by_bfd field of a section may be set to a pointer to this
   structure.  */

struct coff_section_tdata
{
  /* The relocs, swapped into COFF internal form.  This may be NULL.  */
  struct internal_reloc *relocs;
  /* If this is TRUE, the relocs entry may not be freed.  */
  bfd_boolean keep_relocs;
  /* The section contents.  This may be NULL.  */
  bfd_byte *contents;
  /* If this is TRUE, the contents entry may not be freed.  */
  bfd_boolean keep_contents;
  /* Information cached by coff_find_nearest_line.  */
  bfd_vma offset;
  unsigned int i;
  const char *function;
  /* Optional information about a COMDAT entry; NULL if not COMDAT. */
  struct coff_comdat_info *comdat;
  int line_base;
  /* A pointer used for .stab linking optimizations.  */
  void * stab_info;
  /* Available for individual backends.  */
  void * tdata;
};

/* An accessor macro for the coff_section_tdata structure.  */
#define coff_section_data(abfd, sec) \
  ((struct coff_section_tdata *) (sec)->used_by_bfd)

/* Tdata for sections in XCOFF files.  This is used by the linker.  */

struct xcoff_section_tdata
{
  /* Used for XCOFF csects created by the linker; points to the real
     XCOFF section which contains this csect.  */
  asection *enclosing;
  /* The lineno_count field for the enclosing section, because we are
     going to clobber it there.  */
  unsigned int lineno_count;
  /* The first and last symbol indices for symbols used by this csect.  */
  unsigned long first_symndx;
  unsigned long last_symndx;
};

/* An accessor macro the xcoff_section_tdata structure.  */
#define xcoff_section_data(abfd, sec) \
  ((struct xcoff_section_tdata *) coff_section_data ((abfd), (sec))->tdata)

/* Tdata for sections in PE files.  */

struct pei_section_tdata
{
  /* The virtual size of the section.  */
  bfd_size_type virt_size;
  /* The PE section flags.  */
  long pe_flags;
};

/* An accessor macro for the pei_section_tdata structure.  */
#define pei_section_data(abfd, sec) \
  ((struct pei_section_tdata *) coff_section_data ((abfd), (sec))->tdata)

/* COFF linker hash table entries.  */

struct coff_link_hash_entry
{
  struct bfd_link_hash_entry root;

  /* Symbol index in output file.  Set to -1 initially.  Set to -2 if
     there is a reloc against this symbol.  */
  long indx;

  /* Symbol type.  */
  unsigned short type;

  /* Symbol class.  */
  unsigned char symbol_class;

  /* Number of auxiliary entries.  */
  char numaux;

  /* BFD to take auxiliary entries from.  */
  bfd *auxbfd;

  /* Pointer to array of auxiliary entries, if any.  */
  union internal_auxent *aux;

  /* Flag word; legal values follow.  */
  unsigned short coff_link_hash_flags;
  /* Symbol is a PE section symbol.  */
#define COFF_LINK_HASH_PE_SECTION_SYMBOL (01)
};

/* COFF linker hash table.  */

struct coff_link_hash_table
{
  struct bfd_link_hash_table root;
  /* A pointer to information used to link stabs in sections.  */
  struct stab_info stab_info;
};

/* Look up an entry in a COFF linker hash table.  */

#define coff_link_hash_lookup(table, string, create, copy, follow)	\
  ((struct coff_link_hash_entry *)					\
   bfd_link_hash_lookup (&(table)->root, (string), (create),		\
			 (copy), (follow)))

/* Traverse a COFF linker hash table.  */

#define coff_link_hash_traverse(table, func, info)			\
  (bfd_link_hash_traverse						\
   (&(table)->root,							\
    (bfd_boolean (*) (struct bfd_link_hash_entry *, void *)) (func), \
    (info)))

/* Get the COFF linker hash table from a link_info structure.  */

#define coff_hash_table(p) ((struct coff_link_hash_table *) ((p)->hash))

/* Functions in coffgen.c.  */
extern const bfd_target *coff_object_p
  (bfd *);
extern struct bfd_section *coff_section_from_bfd_index
  (bfd *, int);
extern long coff_get_symtab_upper_bound
  (bfd *);
extern long coff_canonicalize_symtab
  (bfd *, asymbol **);
extern int coff_count_linenumbers
  (bfd *);
extern struct coff_symbol_struct *coff_symbol_from
  (bfd *, asymbol *);
extern bfd_boolean coff_renumber_symbols
  (bfd *, int *);
extern void coff_mangle_symbols
  (bfd *);
extern bfd_boolean coff_write_symbols
  (bfd *);
extern bfd_boolean coff_write_alien_symbol
  (bfd *, asymbol *, struct internal_syment *, bfd_vma *,
   bfd_size_type *, asection **, bfd_size_type *);
extern bfd_boolean coff_write_linenumbers
  (bfd *);
extern alent *coff_get_lineno
  (bfd *, asymbol *);
extern asymbol *coff_section_symbol
  (bfd *, char *);
extern bfd_boolean _bfd_coff_get_external_symbols
  (bfd *);
extern const char *_bfd_coff_read_string_table
  (bfd *);
extern bfd_boolean _bfd_coff_free_symbols
  (bfd *);
extern struct coff_ptr_struct *coff_get_normalized_symtab
  (bfd *);
extern long coff_get_reloc_upper_bound
  (bfd *, sec_ptr);
extern asymbol *coff_make_empty_symbol
  (bfd *);
extern void coff_print_symbol
  (bfd *, void * filep, asymbol *, bfd_print_symbol_type);
extern void coff_get_symbol_info
  (bfd *, asymbol *, symbol_info *ret);
extern bfd_boolean _bfd_coff_is_local_label_name
  (bfd *, const char *);
extern asymbol *coff_bfd_make_debug_symbol
  (bfd *, void *, unsigned long);
extern bfd_boolean coff_find_nearest_line
  (bfd *, asection *, asymbol **, bfd_vma, const char **,
   const char **, unsigned int *);
extern bfd_boolean coff_find_nearest_line_discriminator
  (bfd *, asection *, asymbol **, bfd_vma, const char **,
   const char **, unsigned int *, unsigned int *);
struct dwarf_debug_section;
extern bfd_boolean coff_find_nearest_line_with_names
  (bfd *, const struct dwarf_debug_section *, asection *, asymbol **,
   bfd_vma, const char **, const char **, unsigned int *);
extern bfd_boolean coff_find_inliner_info
  (bfd *, const char **, const char **, unsigned int *);
extern int coff_sizeof_headers
  (bfd *, struct bfd_link_info *);
extern bfd_boolean bfd_coff_reloc16_relax_section
  (bfd *, asection *, struct bfd_link_info *, bfd_boolean *);
extern bfd_byte *bfd_coff_reloc16_get_relocated_section_contents
  (bfd *, struct bfd_link_info *, struct bfd_link_order *,
   bfd_byte *, bfd_boolean, asymbol **);
extern bfd_vma bfd_coff_reloc16_get_value
  (arelent *, struct bfd_link_info *, asection *);
extern void bfd_perform_slip
  (bfd *, unsigned int, asection *, bfd_vma);

/* Functions and types in cofflink.c.  */

#define STRING_SIZE_SIZE 4

/* We use a hash table to merge identical enum, struct, and union
   definitions in the linker.  */

/* Information we keep for a single element (an enum value, a
   structure or union field) in the debug merge hash table.  */

struct coff_debug_merge_element
{
  /* Next element.  */
  struct coff_debug_merge_element *next;

  /* Name.  */
  const char *name;

  /* Type.  */
  unsigned int type;

  /* Symbol index for complex type.  */
  long tagndx;
};

/* A linked list of debug merge entries for a given name.  */

struct coff_debug_merge_type
{
  /* Next type with the same name.  */
  struct coff_debug_merge_type *next;

  /* Class of type.  */
  int type_class;

  /* Symbol index where this type is defined.  */
  long indx;

  /* List of elements.  */
  struct coff_debug_merge_element *elements;
};

/* Information we store in the debug merge hash table.  */

struct coff_debug_merge_hash_entry
{
  struct bfd_hash_entry root;

  /* A list of types with this name.  */
  struct coff_debug_merge_type *types;
};

/* The debug merge hash table.  */

struct coff_debug_merge_hash_table
{
  struct bfd_hash_table root;
};

/* Initialize a COFF debug merge hash table.  */

#define coff_debug_merge_hash_table_init(table) \
  (bfd_hash_table_init (&(table)->root, _bfd_coff_debug_merge_hash_newfunc, \
			sizeof (struct coff_debug_merge_hash_entry)))

/* Free a COFF debug merge hash table.  */

#define coff_debug_merge_hash_table_free(table) \
  (bfd_hash_table_free (&(table)->root))

/* Look up an entry in a COFF debug merge hash table.  */

#define coff_debug_merge_hash_lookup(table, string, create, copy) \
  ((struct coff_debug_merge_hash_entry *) \
   bfd_hash_lookup (&(table)->root, (string), (create), (copy)))

/* Information we keep for each section in the output file when doing
   a relocatable link.  */

struct coff_link_section_info
{
  /* The relocs to be output.  */
  struct internal_reloc *relocs;
  /* For each reloc against a global symbol whose index was not known
     when the reloc was handled, the global hash table entry.  */
  struct coff_link_hash_entry **rel_hashes;
};

/* Information that we pass around while doing the final link step.  */

struct coff_final_link_info
{
  /* General link information.  */
  struct bfd_link_info *info;
  /* Output BFD.  */
  bfd *output_bfd;
  /* Used to indicate failure in traversal routine.  */
  bfd_boolean failed;
  /* If doing "task linking" set only during the time when we want the
     global symbol writer to convert the storage class of defined global
     symbols from global to static. */
  bfd_boolean global_to_static;
  /* Hash table for long symbol names.  */
  struct bfd_strtab_hash *strtab;
  /* When doing a relocatable link, an array of information kept for
     each output section, indexed by the target_index field.  */
  struct coff_link_section_info *section_info;
  /* Symbol index of last C_FILE symbol (-1 if none).  */
  long last_file_index;
  /* Contents of last C_FILE symbol.  */
  struct internal_syment last_file;
  /* Symbol index of first aux entry of last .bf symbol with an empty
     endndx field (-1 if none).  */
  long last_bf_index;
  /* Contents of last_bf_index aux entry.  */
  union internal_auxent last_bf;
  /* Hash table used to merge debug information.  */
  struct coff_debug_merge_hash_table debug_merge;
  /* Buffer large enough to hold swapped symbols of any input file.  */
  struct internal_syment *internal_syms;
  /* Buffer large enough to hold sections of symbols of any input file.  */
  asection **sec_ptrs;
  /* Buffer large enough to hold output indices of symbols of any
     input file.  */
  long *sym_indices;
  /* Buffer large enough to hold output symbols for any input file.  */
  bfd_byte *outsyms;
  /* Buffer large enough to hold external line numbers for any input
     section.  */
  bfd_byte *linenos;
  /* Buffer large enough to hold any input section.  */
  bfd_byte *contents;
  /* Buffer large enough to hold external relocs of any input section.  */
  bfd_byte *external_relocs;
  /* Buffer large enough to hold swapped relocs of any input section.  */
  struct internal_reloc *internal_relocs;
};

/* Most COFF variants have no way to record the alignment of a
   section.  This struct is used to set a specific alignment based on
   the name of the section.  */

struct coff_section_alignment_entry
{
  /* The section name.  */
  const char *name;

  /* This is either (unsigned int) -1, indicating that the section
     name must match exactly, or it is the number of letters which
     must match at the start of the name.  */
  unsigned int comparison_length;

  /* These macros may be used to fill in the first two fields in a
     structure initialization.  */
#define COFF_SECTION_NAME_EXACT_MATCH(name) (name), ((unsigned int) -1)
#define COFF_SECTION_NAME_PARTIAL_MATCH(name) (name), (sizeof (name) - 1)

  /* Only use this entry if the default section alignment for this
     target is at least that much (as a power of two).  If this field
     is COFF_ALIGNMENT_FIELD_EMPTY, it should be ignored.  */
  unsigned int default_alignment_min;

  /* Only use this entry if the default section alignment for this
     target is no greater than this (as a power of two).  If this
     field is COFF_ALIGNMENT_FIELD_EMPTY, it should be ignored.  */
  unsigned int default_alignment_max;

#define COFF_ALIGNMENT_FIELD_EMPTY ((unsigned int) -1)

  /* The desired alignment for this section (as a power of two).  */
  unsigned int alignment_power;
};

extern struct bfd_hash_entry *_bfd_coff_link_hash_newfunc
  (struct bfd_hash_entry *, struct bfd_hash_table *, const char *);
extern bfd_boolean _bfd_coff_link_hash_table_init
  (struct coff_link_hash_table *, bfd *,
   struct bfd_hash_entry *(*) (struct bfd_hash_entry *,
			       struct bfd_hash_table *,
			       const char *),
   unsigned int);
extern struct bfd_link_hash_table *_bfd_coff_link_hash_table_create
  (bfd *);
extern const char *_bfd_coff_internal_syment_name
  (bfd *, const struct internal_syment *, char *);
extern bfd_boolean _bfd_coff_section_already_linked
  (bfd *, asection *, struct bfd_link_info *);
extern bfd_boolean _bfd_coff_link_add_symbols
  (bfd *, struct bfd_link_info *);
extern bfd_boolean _bfd_coff_final_link
  (bfd *, struct bfd_link_info *);
extern struct internal_reloc *_bfd_coff_read_internal_relocs
  (bfd *, asection *, bfd_boolean, bfd_byte *, bfd_boolean,
   struct internal_reloc *);
extern bfd_boolean _bfd_coff_generic_relocate_section
  (bfd *, struct bfd_link_info *, bfd *, asection *, bfd_byte *,
   struct internal_reloc *, struct internal_syment *, asection **);
extern struct bfd_hash_entry *_bfd_coff_debug_merge_hash_newfunc
  (struct bfd_hash_entry *, struct bfd_hash_table *, const char *);
extern bfd_boolean _bfd_coff_write_global_sym
  (struct bfd_hash_entry *, void *);
extern bfd_boolean _bfd_coff_write_task_globals
  (struct coff_link_hash_entry *, void *);
extern bfd_boolean _bfd_coff_link_input_bfd
  (struct coff_final_link_info *, bfd *);
extern bfd_boolean _bfd_coff_reloc_link_order
  (bfd *, struct coff_final_link_info *, asection *,
   struct bfd_link_order *);


#define coff_get_section_contents_in_window \
  _bfd_generic_get_section_contents_in_window

/* Functions in xcofflink.c.  */

extern long _bfd_xcoff_get_dynamic_symtab_upper_bound
  (bfd *);
extern long _bfd_xcoff_canonicalize_dynamic_symtab
  (bfd *, asymbol **);
extern long _bfd_xcoff_get_dynamic_reloc_upper_bound
  (bfd *);
extern long _bfd_xcoff_canonicalize_dynamic_reloc
  (bfd *, arelent **, asymbol **);
extern struct bfd_link_hash_table *_bfd_xcoff_bfd_link_hash_table_create
  (bfd *);
extern void _bfd_xcoff_bfd_link_hash_table_free
  (struct bfd_link_hash_table *);
extern bfd_boolean _bfd_xcoff_bfd_link_add_symbols
  (bfd *, struct bfd_link_info *);
extern bfd_boolean _bfd_xcoff_bfd_final_link
  (bfd *, struct bfd_link_info *);
extern bfd_boolean _bfd_xcoff_define_common_symbol
  (bfd *, struct bfd_link_info *, struct bfd_link_hash_entry *);
extern bfd_boolean _bfd_ppc_xcoff_relocate_section
  (bfd *, struct bfd_link_info *, bfd *, asection *, bfd_byte *,
   struct internal_reloc *, struct internal_syment *, asection **);

/* Functions in coff-ppc.c.  FIXME: These are called by pe.em in the
   linker, and so should start with bfd and be declared in bfd.h.  */

extern bfd_boolean ppc_allocate_toc_section
  (struct bfd_link_info *);
extern bfd_boolean ppc_process_before_allocation
  (bfd *, struct bfd_link_info *);
/* Extracted from coffcode.h.  */
typedef struct coff_ptr_struct
{
  /* Remembers the offset from the first symbol in the file for
     this symbol. Generated by coff_renumber_symbols. */
  unsigned int offset;

  /* Should the value of this symbol be renumbered.  Used for
     XCOFF C_BSTAT symbols.  Set by coff_slurp_symbol_table.  */
  unsigned int fix_value : 1;

  /* Should the tag field of this symbol be renumbered.
     Created by coff_pointerize_aux. */
  unsigned int fix_tag : 1;

  /* Should the endidx field of this symbol be renumbered.
     Created by coff_pointerize_aux. */
  unsigned int fix_end : 1;

  /* Should the x_csect.x_scnlen field be renumbered.
     Created by coff_pointerize_aux. */
  unsigned int fix_scnlen : 1;

  /* Fix up an XCOFF C_BINCL/C_EINCL symbol.  The value is the
     index into the line number entries.  Set by coff_slurp_symbol_table.  */
  unsigned int fix_line : 1;

  /* The container for the symbol structure as read and translated
     from the file. */
  union
  {
    union internal_auxent auxent;
    struct internal_syment syment;
  } u;
} combined_entry_type;


/* Each canonical asymbol really looks like this: */

typedef struct coff_symbol_struct
{
  /* The actual symbol which the rest of BFD works with */
  asymbol symbol;

  /* A pointer to the hidden information for this symbol */
  combined_entry_type *native;

  /* A pointer to the linenumber information for this symbol */
  struct lineno_cache_entry *lineno;

  /* Have the line numbers been relocated yet ? */
  bfd_boolean done_lineno;
} coff_symbol_type;
/* COFF symbol classifications.  */

enum coff_symbol_classification
{
  /* Global symbol.  */
  COFF_SYMBOL_GLOBAL,
  /* Common symbol.  */
  COFF_SYMBOL_COMMON,
  /* Undefined symbol.  */
  COFF_SYMBOL_UNDEFINED,
  /* Local symbol.  */
  COFF_SYMBOL_LOCAL,
  /* PE section symbol.  */
  COFF_SYMBOL_PE_SECTION
};

typedef struct
{
  void (*_bfd_coff_swap_aux_in)
    (bfd *, void *, int, int, int, int, void *);

  void (*_bfd_coff_swap_sym_in)
    (bfd *, void *, void *);

  void (*_bfd_coff_swap_lineno_in)
    (bfd *, void *, void *);

  unsigned int (*_bfd_coff_swap_aux_out)
    (bfd *, void *, int, int, int, int, void *);

  unsigned int (*_bfd_coff_swap_sym_out)
    (bfd *, void *, void *);

  unsigned int (*_bfd_coff_swap_lineno_out)
    (bfd *, void *, void *);

  unsigned int (*_bfd_coff_swap_reloc_out)
    (bfd *, void *, void *);

  unsigned int (*_bfd_coff_swap_filehdr_out)
    (bfd *, void *, void *);

  unsigned int (*_bfd_coff_swap_aouthdr_out)
    (bfd *, void *, void *);

  unsigned int (*_bfd_coff_swap_scnhdr_out)
    (bfd *, void *, void *);

  unsigned int _bfd_filhsz;
  unsigned int _bfd_aoutsz;
  unsigned int _bfd_scnhsz;
  unsigned int _bfd_symesz;
  unsigned int _bfd_auxesz;
  unsigned int _bfd_relsz;
  unsigned int _bfd_linesz;
  unsigned int _bfd_filnmlen;
  bfd_boolean _bfd_coff_long_filenames;

  bfd_boolean _bfd_coff_long_section_names;
  bfd_boolean (*_bfd_coff_set_long_section_names)
    (bfd *, int);

  unsigned int _bfd_coff_default_section_alignment_power;
  bfd_boolean _bfd_coff_force_symnames_in_strings;
  unsigned int _bfd_coff_debug_string_prefix_length;

  void (*_bfd_coff_swap_filehdr_in)
    (bfd *, void *, void *);

  void (*_bfd_coff_swap_aouthdr_in)
    (bfd *, void *, void *);

  void (*_bfd_coff_swap_scnhdr_in)
    (bfd *, void *, void *);

  void (*_bfd_coff_swap_reloc_in)
    (bfd *abfd, void *, void *);

  bfd_boolean (*_bfd_coff_bad_format_hook)
    (bfd *, void *);

  bfd_boolean (*_bfd_coff_set_arch_mach_hook)
    (bfd *, void *);

  void * (*_bfd_coff_mkobject_hook)
    (bfd *, void *, void *);

  bfd_boolean (*_bfd_styp_to_sec_flags_hook)
    (bfd *, void *, const char *, asection *, flagword *);

  void (*_bfd_set_alignment_hook)
    (bfd *, asection *, void *);

  bfd_boolean (*_bfd_coff_slurp_symbol_table)
    (bfd *);

  bfd_boolean (*_bfd_coff_symname_in_debug)
    (bfd *, struct internal_syment *);

  bfd_boolean (*_bfd_coff_pointerize_aux_hook)
    (bfd *, combined_entry_type *, combined_entry_type *,
            unsigned int, combined_entry_type *);

  bfd_boolean (*_bfd_coff_print_aux)
    (bfd *, FILE *, combined_entry_type *, combined_entry_type *,
            combined_entry_type *, unsigned int);

  void (*_bfd_coff_reloc16_extra_cases)
    (bfd *, struct bfd_link_info *, struct bfd_link_order *, arelent *,
           bfd_byte *, unsigned int *, unsigned int *);

  int (*_bfd_coff_reloc16_estimate)
    (bfd *, asection *, arelent *, unsigned int,
            struct bfd_link_info *);

  enum coff_symbol_classification (*_bfd_coff_classify_symbol)
    (bfd *, struct internal_syment *);

  bfd_boolean (*_bfd_coff_compute_section_file_positions)
    (bfd *);

  bfd_boolean (*_bfd_coff_start_final_link)
    (bfd *, struct bfd_link_info *);

  bfd_boolean (*_bfd_coff_relocate_section)
    (bfd *, struct bfd_link_info *, bfd *, asection *, bfd_byte *,
            struct internal_reloc *, struct internal_syment *, asection **);

  reloc_howto_type *(*_bfd_coff_rtype_to_howto)
    (bfd *, asection *, struct internal_reloc *,
            struct coff_link_hash_entry *, struct internal_syment *,
            bfd_vma *);

  bfd_boolean (*_bfd_coff_adjust_symndx)
    (bfd *, struct bfd_link_info *, bfd *, asection *,
            struct internal_reloc *, bfd_boolean *);

  bfd_boolean (*_bfd_coff_link_add_one_symbol)
    (struct bfd_link_info *, bfd *, const char *, flagword,
            asection *, bfd_vma, const char *, bfd_boolean, bfd_boolean,
            struct bfd_link_hash_entry **);

  bfd_boolean (*_bfd_coff_link_output_has_begun)
    (bfd *, struct coff_final_link_info *);

  bfd_boolean (*_bfd_coff_final_link_postscript)
    (bfd *, struct coff_final_link_info *);

  bfd_boolean (*_bfd_coff_print_pdata)
    (bfd *, void *);

} bfd_coff_backend_data;

#define coff_backend_info(abfd) \
  ((bfd_coff_backend_data *) (abfd)->xvec->backend_data)

#define bfd_coff_swap_aux_in(a,e,t,c,ind,num,i) \
  ((coff_backend_info (a)->_bfd_coff_swap_aux_in) (a,e,t,c,ind,num,i))

#define bfd_coff_swap_sym_in(a,e,i) \
  ((coff_backend_info (a)->_bfd_coff_swap_sym_in) (a,e,i))

#define bfd_coff_swap_lineno_in(a,e,i) \
  ((coff_backend_info ( a)->_bfd_coff_swap_lineno_in) (a,e,i))

#define bfd_coff_swap_reloc_out(abfd, i, o) \
  ((coff_backend_info (abfd)->_bfd_coff_swap_reloc_out) (abfd, i, o))

#define bfd_coff_swap_lineno_out(abfd, i, o) \
  ((coff_backend_info (abfd)->_bfd_coff_swap_lineno_out) (abfd, i, o))

#define bfd_coff_swap_aux_out(a,i,t,c,ind,num,o) \
  ((coff_backend_info (a)->_bfd_coff_swap_aux_out) (a,i,t,c,ind,num,o))

#define bfd_coff_swap_sym_out(abfd, i,o) \
  ((coff_backend_info (abfd)->_bfd_coff_swap_sym_out) (abfd, i, o))

#define bfd_coff_swap_scnhdr_out(abfd, i,o) \
  ((coff_backend_info (abfd)->_bfd_coff_swap_scnhdr_out) (abfd, i, o))

#define bfd_coff_swap_filehdr_out(abfd, i,o) \
  ((coff_backend_info (abfd)->_bfd_coff_swap_filehdr_out) (abfd, i, o))

#define bfd_coff_swap_aouthdr_out(abfd, i,o) \
  ((coff_backend_info (abfd)->_bfd_coff_swap_aouthdr_out) (abfd, i, o))

#define bfd_coff_filhsz(abfd) (coff_backend_info (abfd)->_bfd_filhsz)
#define bfd_coff_aoutsz(abfd) (coff_backend_info (abfd)->_bfd_aoutsz)
#define bfd_coff_scnhsz(abfd) (coff_backend_info (abfd)->_bfd_scnhsz)
#define bfd_coff_symesz(abfd) (coff_backend_info (abfd)->_bfd_symesz)
#define bfd_coff_auxesz(abfd) (coff_backend_info (abfd)->_bfd_auxesz)
#define bfd_coff_relsz(abfd)  (coff_backend_info (abfd)->_bfd_relsz)
#define bfd_coff_linesz(abfd) (coff_backend_info (abfd)->_bfd_linesz)
#define bfd_coff_filnmlen(abfd) (coff_backend_info (abfd)->_bfd_filnmlen)
#define bfd_coff_long_filenames(abfd) \
  (coff_backend_info (abfd)->_bfd_coff_long_filenames)
#define bfd_coff_long_section_names(abfd) \
  (coff_backend_info (abfd)->_bfd_coff_long_section_names)
#define bfd_coff_set_long_section_names(abfd, enable) \
  ((coff_backend_info (abfd)->_bfd_coff_set_long_section_names) (abfd, enable))
#define bfd_coff_default_section_alignment_power(abfd) \
  (coff_backend_info (abfd)->_bfd_coff_default_section_alignment_power)
#define bfd_coff_swap_filehdr_in(abfd, i,o) \
  ((coff_backend_info (abfd)->_bfd_coff_swap_filehdr_in) (abfd, i, o))

#define bfd_coff_swap_aouthdr_in(abfd, i,o) \
  ((coff_backend_info (abfd)->_bfd_coff_swap_aouthdr_in) (abfd, i, o))

#define bfd_coff_swap_scnhdr_in(abfd, i,o) \
  ((coff_backend_info (abfd)->_bfd_coff_swap_scnhdr_in) (abfd, i, o))

#define bfd_coff_swap_reloc_in(abfd, i, o) \
  ((coff_backend_info (abfd)->_bfd_coff_swap_reloc_in) (abfd, i, o))

#define bfd_coff_bad_format_hook(abfd, filehdr) \
  ((coff_backend_info (abfd)->_bfd_coff_bad_format_hook) (abfd, filehdr))

#define bfd_coff_set_arch_mach_hook(abfd, filehdr)\
  ((coff_backend_info (abfd)->_bfd_coff_set_arch_mach_hook) (abfd, filehdr))
#define bfd_coff_mkobject_hook(abfd, filehdr, aouthdr)\
  ((coff_backend_info (abfd)->_bfd_coff_mkobject_hook)\
   (abfd, filehdr, aouthdr))

#define bfd_coff_styp_to_sec_flags_hook(abfd, scnhdr, name, section, flags_ptr)\
  ((coff_backend_info (abfd)->_bfd_styp_to_sec_flags_hook)\
   (abfd, scnhdr, name, section, flags_ptr))

#define bfd_coff_set_alignment_hook(abfd, sec, scnhdr)\
  ((coff_backend_info (abfd)->_bfd_set_alignment_hook) (abfd, sec, scnhdr))

#define bfd_coff_slurp_symbol_table(abfd)\
  ((coff_backend_info (abfd)->_bfd_coff_slurp_symbol_table) (abfd))

#define bfd_coff_symname_in_debug(abfd, sym)\
  ((coff_backend_info (abfd)->_bfd_coff_symname_in_debug) (abfd, sym))

#define bfd_coff_force_symnames_in_strings(abfd)\
  (coff_backend_info (abfd)->_bfd_coff_force_symnames_in_strings)

#define bfd_coff_debug_string_prefix_length(abfd)\
  (coff_backend_info (abfd)->_bfd_coff_debug_string_prefix_length)

#define bfd_coff_print_aux(abfd, file, base, symbol, aux, indaux)\
  ((coff_backend_info (abfd)->_bfd_coff_print_aux)\
   (abfd, file, base, symbol, aux, indaux))

#define bfd_coff_reloc16_extra_cases(abfd, link_info, link_order,\
                                     reloc, data, src_ptr, dst_ptr)\
  ((coff_backend_info (abfd)->_bfd_coff_reloc16_extra_cases)\
   (abfd, link_info, link_order, reloc, data, src_ptr, dst_ptr))

#define bfd_coff_reloc16_estimate(abfd, section, reloc, shrink, link_info)\
  ((coff_backend_info (abfd)->_bfd_coff_reloc16_estimate)\
   (abfd, section, reloc, shrink, link_info))

#define bfd_coff_classify_symbol(abfd, sym)\
  ((coff_backend_info (abfd)->_bfd_coff_classify_symbol)\
   (abfd, sym))

#define bfd_coff_compute_section_file_positions(abfd)\
  ((coff_backend_info (abfd)->_bfd_coff_compute_section_file_positions)\
   (abfd))

#define bfd_coff_start_final_link(obfd, info)\
  ((coff_backend_info (obfd)->_bfd_coff_start_final_link)\
   (obfd, info))
#define bfd_coff_relocate_section(obfd,info,ibfd,o,con,rel,isyms,secs)\
  ((coff_backend_info (ibfd)->_bfd_coff_relocate_section)\
   (obfd, info, ibfd, o, con, rel, isyms, secs))
#define bfd_coff_rtype_to_howto(abfd, sec, rel, h, sym, addendp)\
  ((coff_backend_info (abfd)->_bfd_coff_rtype_to_howto)\
   (abfd, sec, rel, h, sym, addendp))
#define bfd_coff_adjust_symndx(obfd, info, ibfd, sec, rel, adjustedp)\
  ((coff_backend_info (abfd)->_bfd_coff_adjust_symndx)\
   (obfd, info, ibfd, sec, rel, adjustedp))
#define bfd_coff_link_add_one_symbol(info, abfd, name, flags, section,\
                                     value, string, cp, coll, hashp)\
  ((coff_backend_info (abfd)->_bfd_coff_link_add_one_symbol)\
   (info, abfd, name, flags, section, value, string, cp, coll, hashp))

#define bfd_coff_link_output_has_begun(a,p) \
  ((coff_backend_info (a)->_bfd_coff_link_output_has_begun) (a, p))
#define bfd_coff_final_link_postscript(a,p) \
  ((coff_backend_info (a)->_bfd_coff_final_link_postscript) (a, p))

#define bfd_coff_have_print_pdata(a) \
  (coff_backend_info (a)->_bfd_coff_print_pdata)
#define bfd_coff_print_pdata(a,p) \
  ((coff_backend_info (a)->_bfd_coff_print_pdata) (a, p))

/* Macro: Returns true if the bfd is a PE executable as opposed to a
   PE object file.  */
#define bfd_pei_p(abfd) \
  (CONST_STRNEQ ((abfd)->xvec->name, "pei-"))
@


1.64
log
@ChangeLog bfd

2012-10-18  Kai Tietz  <ktietz@@redhat.com>

	PR binutils/14067
	* coff-i386.c (bfd_target): Add section flag SEC_EXCLUDE.
	Allow BFD_COMPRESS and BFD_DECOMPRESS flags.
	* coff-x86_64.c: Likewise.
	* coffcode.h (DOT_ZDEBUG): New define.
	(sec_to_styp_flags): Check for .zdebug.
	(styp_to_sec_flags): Likewise.
	* coffgen.c (make_a_section): Handle .debug_* section
	compression/decompression flags.
	* cofflink.c (mark_relocs): Ignore relocations
	for a section, which isn't marked as used.
	(_bfd_coff_link_input_bfd): Add support of compressed
	debug sections.
	* compress.c (decompress_contents): Loop as long
	as there is input available and there is room for
	output.
	* bfd/pe-arm.c: Add .zdebug_ partial match entry.
	* pe-i386.c: Likewise.
	* pe-x86_64.c: Likewise.
	* peXXigen.c (_bfd_XXi_swap_aouthdr_out): Don't clear all
	data-directories as this might destroy content.

        * coff-i386.c (_bfd_generic_find_nearest_line_discriminator):
        define as coff_find_nearest_line_discriminator.
        * libcoff-in.h (coff_find_nearest_line_discriminator): New
        * libcoff.h: Regenerated.
        * coff-x86_64.c: Likewise.
        * coffgen.c (coff_find_nearest_line_discriminator): New function.
        prototype.

ChangeLog binutils

2012-10-18  Kai Tietz  <ktietz@@redhat.com>

	* objdump.c (dump_bfd): Call dump headers after
	call of slurp_symtab.

ChangeLog ld

2012-10-18  Kai Tietz  <ktietz@@redhat.com>

	PR binutils/14067
	* NEWS: Menition new feature.
	* scripttempl/pep.sc: Add zdebug sections.
	* scripttempl/pe.sc: L
@
text
@d736 1
a736 1
  
@


1.63
log
@Building EFI binaries, particularly larger ones (like e.g. Xen does), on Linux
(where relocatable objects are in ELF format) so far led to all local (aka
static) symbols to be discarded, making debugging quite a bit more difficult
(like Linux, Xen builds an internal symbol lookup table from nm output
generated on the binary produced by an earlier linking pass). Therefore, this
patch arranges to insert all (relevant) local symbols from non-COFF objects
into the final executable's symbol table between those coming from COFF input
files and the global ones.

bfd/
2011-11-02  Jan Beulich  <jbeulich@@suse.com>

	* coffgen.c (coff_write_alien_symbol): Make public. Add 'struct
	internal_syment *' parameter. Extend 'dummy' to an array with two
	elements. Set n_numaux early. Handle BSF_FILE.
	(coff_write_symbols): Pass NULL as new third argument to
	coff_write_alien_symbol().
	* cofflink.c (_bfd_coff_final_link): Don't use COFF-specific
	obj_raw_syment_count() on non-COFF input BFD. Insert local symbols
	from non-COFF input BFDs.
	* libcoff-in.h (coff_write_alien_symbol): Declare.
	* libcoff.h (coff_write_alien_symbol): Re-generate.
@
text
@d357 3
@


1.62
log
@2011-09-30  Tristan Gingold  <gingold@@adacore.com>

	* dwarf2.c (struct dwarf2_debug): Add field debug_sections.
	(read_section): Add sec argument. Adjust the code to get section
	names from it.
	(read_indirect_string): Adjust call to read_section.
	(read_abbrevs): Ditto.
	(decode_line_info): Ditto.
	(read_debug_ranges): Ditto.
	(DWARF2_DEBUG_INFO, DWARF2_COMPRESSED_DEBUG_INFO): Remove.
	(find_debug_info): Add debug_sections parameter.  Use it instead
	the above macros.
	(place_sections): Get section names from stash.
	(find_line): Add debug_sections argument.  Initialize
	debug_sections field of stash from it.
	Adjust calls to find_debug_info.
	(_bfd_dwarf2_find_nearest_line): Add debug_sections argument.
	Adjust call to find_line.
	(_bfd_dwarf2_find_line): Adjust call to find_line.
	* libcoff-in.h (struct dwarf_debug_section): New declaration.
	(coff_find_nearest_line_with_names): Likewise.
	* libcoff.h: Regenerate.
	* libbfd-in.h (struct dwarf_debug_section): Move declaration.
	(dwarf_debug_sections): Likewise.
	(_bfd_dwarf2_find_nearest_line): Add debug_sections argument.
	* libbfd.h: Regenerate.
	* elf.c (_bfd_elf_find_nearest_line): Adjust call to
	_bfd_dwarf2_find_nearest_line.
	* elfxx-mips.c (_bfd_mips_elf_find_nearest_line): Ditto.
	* elf64-alpha.c (elf64_alpha_find_nearest_line): Ditto.
	* elf32-arm.c (elf32_arm_find_nearest_line): Ditto.
	* coffgen.c (coff_find_nearest_line_with_names): New function.
	(coff_find_nearest_line): Calls coff_find_nearest_line_with_names.
	* coff-rs6000.c (xcoff_debug_sections): New constant.
	(xcoff_find_nearest_line): New function.
	(rs6000coff_vec): Use xcoff_find_nearest_line.
	(pmac_xcoff_vec): Ditto.
@
text
@d325 3
@


1.61
log
@	PR ld/12762
bfd/
	* bfd-in.h (struct bfd_section_already_linked): Forward declare.
	(_bfd_handle_already_linked): Declare.
	* coff-alpha.c (_bfd_ecoff_section_already_linked): Define as
	_bfd_coff_section_already_linked.
	* coff-mips.c (_bfd_ecoff_section_already_linked): Likewise.
	* coffcode.h (coff_section_already_linked): Likewise.
	* cofflink.c (coff_link_add_symbols): Revert 2011-07-09 changes.
	* elf-bfd.h: Likewise.
	* libbfd-in.h: Likewise.
	* targets.c: Likewise.
	* linker.c (bfd_section_already_linked): Likewise.
	(bfd_section_already_linked_table_lookup): Likewise.
	(bfd_section_already_linked_table_insert): Likewise.
	(_bfd_generic_section_already_linked): Likewise.  Call
	_bfd_handle_already_linked.
	(_bfd_handle_already_linked): New function, split out from..
	* elflink.c (_bfd_elf_section_already_linked): ..here.  Revert
	2011-07-09 changes.  Avoid unnecessary strcmp when matching
	already_linked_list entries.  Match plugin linkonce section.
	(section_signature): Delete.
	* coffgen.c (_bfd_coff_section_already_linked): New function.
	* libcoff-in.h (_bfd_coff_section_already_linked): Declare.
	* libbfd.h: Regenerate.
	* libcoff.h: Regenerate.
	* bfd-in2.h: Regenerate.
ld/
	* ldlang.c (section_already_linked): Revert 2011-07-09 changes.
	* plugin.c: Likewise.
	(asymbol_from_plugin_symbol): Create linkonce section for syms
	with comdat_key.
@
text
@d354 4
@


1.60
log
@	* linker.c (bfd_link_hash_traverse): Follow warning symbol link.
	(_bfd_generic_link_write_global_symbol, fix_syms): Don't handle
	warning symbols here.
	* elf-m10300.c (elf32_mn10300_finish_hash_table_entry): Likewise.
	* elf32-arm.c (allocate_dynrelocs_for_symbol,
	elf32_arm_readonly_dynrelocs): Likewise.
	* elf32-bfin.c (bfin_discard_copies): Likewise.
	* elf32-cris.c (elf_cris_adjust_gotplt_to_got,
	elf_cris_discard_excess_dso_dynamics,
	elf_cris_discard_excess_program_dynamics): Likewise.
	* elf32-hppa.c (allocate_plt_static, allocate_dynrelocs,
	clobber_millicode_symbols, readonly_dynrelocs): Likewise.
	* elf32-i370.c (i370_elf_adjust_dynindx): Likewise.
	* elf32-i386.c (elf_i386_allocate_dynrelocs,
	elf_i386_readonly_dynrelocs): Likewise.
	* elf32-lm32.c (allocate_dynrelocs, readonly_dynrelocs): Likewise.
	* elf32-m32c.c (m32c_relax_plt_check, m32c_relax_plt_realloc): Likewise.
	* elf32-m32r.c (allocate_dynrelocs, readonly_dynrelocs): Likewise.
	* elf32-m68k.c (elf_m68k_discard_copies): Likewise.
	* elf32-microblaze.c (allocate_dynrelocs): Likewise.
	* elf32-ppc.c (allocate_dynrelocs, maybe_set_textrel): Likewise.
	* elf32-s390.c (allocate_dynrelocs, readonly_dynrelocs): Likewise.
	* elf32-score.c (score_elf_sort_hash_table_f): Likewise.
	* elf32-score7.c (score_elf_sort_hash_table_f): Likewise.
	* elf32-sh.c (allocate_dynrelocs, readonly_dynrelocs): Likewise.
	* elf32-tic6x.c (elf32_tic6x_allocate_dynrelocs,
	elf32_tic6x_readonly_dynrelocs): Likewise.
	* elf32-vax.c (elf_vax_discard_copies): Likewise.
	* elf32-xstormy16.c (xstormy16_relax_plt_check,
	xstormy16_relax_plt_realloc): Likewise.
	* elf32-xtensa.c (elf_xtensa_allocate_dynrelocs): Likewise.
	* elf64-alpha.c (elf64_alpha_output_extsym,
	elf64_alpha_calc_got_offsets_for_symbol,
	elf64_alpha_calc_dynrel_sizes, elf64_alpha_size_rela_got_1): Likewise.
	* elf64-hppa.c (elf64_hppa_mark_exported_functions,
	allocate_global_data_opd, elf64_hppa_mark_milli_and_exported_functions,
	elf_hppa_unmark_useless_dynamic_symbols,
	elf_hppa_remark_useless_dynamic_symbols): Likewise.
	* elf64-ppc.c (ppc64_elf_gc_mark_dynamic_ref, func_desc_adjust,
	adjust_opd_syms, adjust_toc_syms, allocate_dynrelocs,
	readonly_dynrelocs, merge_global_got, reallocate_got,
	undo_symbol_twiddle): Likewise.
	* elf64-s390.c (allocate_dynrelocs, readonly_dynrelocs): Likewise.
	* elf64-sh64.c (sh64_elf64_discard_copies): Likewise.
	* elf64-x86-64.c (elf_x86_64_allocate_dynrelocs,
	elf_x86_64_readonly_dynrelocs): Likewise.
	* elflink.c (elf_link_renumber_hash_table_dynsyms,
	elf_link_renumber_local_hash_table_dynsyms, _bfd_elf_export_symbol,
	_bfd_elf_link_find_version_dependencies,
	_bfd_elf_link_assign_sym_version, _bfd_elf_adjust_dynamic_symbol,
	_bfd_elf_link_sec_merge_syms, elf_adjust_dynstr_offsets,
	elf_collect_hash_codes, elf_collect_gnu_hash_codes,
	elf_renumber_gnu_hash_syms, elf_gc_sweep_symbol,
	elf_gc_propagate_vtable_entries_used,
	elf_gc_smash_unused_vtentry_relocs, bfd_elf_gc_mark_dynamic_ref_symbol,
	elf_gc_allocate_got_offsets): Likewise.
	* elfnn-ia64.c (elfNN_ia64_global_dyn_info_free,
	elfNN_ia64_global_dyn_sym_thunk): Likewise.
	* elfxx-mips.c (mips_elf_check_symbols, mips_elf_output_extsym,
	mips_elf_sort_hash_table_f, allocate_dynrelocs): Likewise.
	* elfxx-sparc.c (allocate_dynrelocs, readonly_dynrelocs): Likewise.
	* i386linux.c (linux_tally_symbols): Likewise.
	* m68klinux.c (linux_tally_symbols): Likewise.
	* sparclinux.c (linux_tally_symbols): Likewise.
	* sunos.c (sunos_scan_dynamic_symbol): Likewise.
	* xcofflink.c (xcoff_post_gc_symbol): Likewise.

	* elflink.c (elf_link_output_extsym): Make it a bfd_hash_traverse
	function.  Update all callers.
	* aoutx.h (aout_link_write_other_symbol): Likewise.
	* pdp11.c (aout_link_write_other_symbol): Likewise.
	* cofflink.c (_bfd_coff_write_global_sym): Likewise.
	* ecoff.c (ecoff_link_write_external): Likewise.
	* xcofflink.c (xcoff_write_global_symbol): Likewise.
	* vms-alpha.c (alpha_vms_link_output_symbol): Likewise.  Handle
	warning symbols.
	* ecoff.c (ecoff_link_hash_traverse): Delete.
	* coff-ppc.c (ppc_bfd_coff_final_link): Use bfd_hash_traverse for
	_bfd_coff_write_global_sym.
	* libcoff-in.h (_bfd_coff_write_global_sym): Update prototype.
	* libcoff.h: Regenerate.
@
text
@d553 2
@


1.59
log
@2011-03-31  Tristan Gingold  <gingold@@adacore.com>

	* libcoff-in.h (exec_hdr): Remove.
	* libcoff.h: Regenerate.
@
text
@d7 1
a7 1
   2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009
d566 1
a566 1
  (struct coff_link_hash_entry *, void *);
@


1.58
log
@Don't add IMAGE_FILE_RELOCS_STRIPPED for PIE.

2010-03-18  H.J. Lu  <hongjiu.lu@@intel.com>

	PR binutils/11396
	* libcoff-in.h (pe_tdata): Add dont_strip_reloc.
	* libcoff.h: Regenerated.

	* peXXigen.c (_bfd_XXi_only_swap_filehdr_out): Clear F_RELFLG
	if dont_strip_reloc is set.
	(_bfd_XX_bfd_copy_private_bfd_data_common): Set
	dont_strip_reloc on output if there is no .reloc and
	IMAGE_FILE_RELOCS_STRIPPED isn't set in input.
@
text
@a32 1
#define exec_hdr(bfd)		      (coff_data (bfd)->hdr)
@


1.57
log
@        * bfd/coff-arm.c (coff_arm_relocate_section)
        (record_thumb_to_arm_glue, bfd_arm_process_before_allocation):
        Change member name class to symbol_class.
        * bfd/coff-i960.c (coff_i960_relocate_section) Rename variable
        class to class_val. Change member name class to symbol_class.
        * bfd/coff-rs6000.c (_bfd_xcoff_swap_aux_in)
        (_bfd_xcoff_swap_aux_out): Rename arguments class to in_class.
        * bfd/coff-stgo32.c (adjust_aux_in_post)
        (adjust_aux_out_pre, adjust_aux_out_post): Rename arguments class
        to in_class.
        * bfd/coff64-rs6000.c (_bfd_xcoff64_swap_aux_in)
        (_bfd_xcoff64_swap_aux_out): Rename arguments class to in_class.
        * bfd/coffcode.h (coff_pointerize_aux_hook): Rename variable class
        to n_sclass.
        * bfd/coffgen.c (coff_write_symbol, coff_pointerize_aux): Rename
        variables named class to n_sclass. (coff_write_symbols): Rename
        variable class to sym_class. (bfd_coff_set_symbol_class): Rename
        argument class to symbol_class.
        * bfd/cofflink.c (_bfd_coff_link_hash_newfunc)
        (coff_link_add_symbols, _bfd_coff_link_input_bfd)
        (_bfd_coff_write_global_sym, _bfd_coff_generic_relocate_section):
        Update code to use renamed members.
        * bfd/coffswap.h (coff_swap_aux_in, coff_swap_aux_out): Rename
        argument class to in_class.
        * bfd/libcoff-in.h (struct coff_link_hash_entry, struct
        coff_debug_merge_type) Renamed members class to symbol_class and
        type_class.
        * bfd/libcoff.h Regenerated.
        * bfd/peXXigen.c: (_bfd_XXi_swap_aux_in, _bfd_XXi_swap_aux_out):
        Rename argument class to in_class.
        * bfd/pef.c (bfd_pef_parse_imported_symbol): Update code to use
        renamed members.
        * bfd/pef.h (struct bfd_pef_imported_symbol): Changed name of
        member class to symbol_class.
        * binutils/ieee.c (ieee_read_cxx_misc, ieee_read_cxx_class)
        (ieee_read_reference): Rename variables named class to cxxclass.
        * gas/config/tc-arc.c (struct syntax_classes): Rename member class
        to s_class. (arc_extinst): Rename variable class to
        s_class. Update code to use renamed members.
        * gas/config/tc-mips.c (insn_uses_reg): Rename argument class to
        regclass.
        * gas/config/tc-ppc.c (ppc_csect, ppc_change_csect, ppc_function)
        (ppc_tc, ppc_is_toc_sym, ppc_symbol_new_hook, ppc_frob_label)
        (ppc_fix_adjustable, md_apply_fix): Update code to use renamed
        members.
        * gas/config/tc-ppc.h (struct ppc_tc_sy): Change name of member
        from class to symbol_class. (OBJ_COPY_SYMBOL_ATTRIBUTES): Update
        code to use renamed members.
        * gas/config/tc-score.c (s3_adjust_paritybit): Rename argument
        class to i_class.
        * gas/config/tc-score7.c (s7_adjust_paritybit): Rename argument
        class to i_class.
        * gprof/corefile.c (core_create_function_syms): Rename variable
        class to cxxclass.
        * include/coff/ti.h (GET_LNSZ_SIZE, PUT_LNSZ_SIZE): Updated name
        of class variable to in_class to match changes in function that
        use this macro.
        * include/opcode/ia64.h (struct ia64_operand): Renamed member
        class to op_class
        * ld/emultempl/elf32.em (gld${EMULATION_NAME}_load_symbols)
        (gld${EMULATION_NAME}_try_needed): Rename variable class to
        link_class
        * opcodes/ia64-dis.c (print_insn_ia64): Update code to use renamed
        member.
        * opcodes/m88k-dis.c (m88kdis): Rename variable class to in_class.
        * opcodes/tic80-opc.c (tic80_symbol_to_value)
        (tic80_value_to_symbol): Rename argument class to symbol_class.
@
text
@d125 1
@


1.56
log
@bfd/
	Stop using bfd_usrdata in libbfd.
	* coff-stgo32.c (bfd_coff_go32stub): Remove.
	(stub_bytes, comment): Replace STUBSIZE by GO32_STUBSIZE.
	(adjust_filehdr_in_post): Declare the abfd parameter as unused.
	Replace STUBSIZE by GO32_STUBSIZE.  Save now the stub in
	filehdr_dst->u.go32.stub.  New comment with the reason.
	(adjust_filehdr_out_pre): Replace STUBSIZE by GO32_STUBSIZE.
	Substitute the removed macro bfd_coff_go32stub.
	(adjust_filehdr_out_post, adjust_scnhdr_in_post, adjust_scnhdr_out_pre)
	(adjust_scnhdr_out_post, adjust_aux_in_post, adjust_aux_out_pre)
	(adjust_aux_out_post): Replace STUBSIZE by GO32_STUBSIZE.
	(create_go32_stub, go32_stubbed_coff_bfd_copy_private_bfd_data):
	Replace STUBSIZE by GO32_STUBSIZE.  Substitute the removed macro
	bfd_coff_go32stub.
	* coffcode.h (coff_mkobject_hook): Initialize coff->go32stub.
	* libcoff-in.h (coff_data_type): New field go32stub.
	* libcoff.h: Regenerated.

include/coff/
	Stop using bfd_usrdata in libbfd.
	* go32exe.h (struct external_filehdr_go32_exe <stub>, FILHSZ): Replace
	STUBSIZE by GO32_STUBSIZE.
	(STUBSIZE): Move the definition ...
	* internal.h (GO32_STUBSIZE): ... here and rename it.
	(struct internal_filehdr <go32stub>, F_GO32STUB): New.
@
text
@d261 1
a261 1
  unsigned char class;
d401 1
a401 1
  int class;
a609 1

@


1.56.2.1
log
@        * coff-arm.c (coff_arm_relocate_section)
        (record_thumb_to_arm_glue, bfd_arm_process_before_allocation):
        Change member name class to symbol_class.
        * coff-i960.c (coff_i960_relocate_section) Rename variable
        class to class_val. Change member name class to symbol_class.
        * coff-rs6000.c (_bfd_xcoff_swap_aux_in)
        (_bfd_xcoff_swap_aux_out): Rename arguments class to in_class.
        * coff-stgo32.c (adjust_aux_in_post)
        (adjust_aux_out_pre, adjust_aux_out_post): Rename arguments class
        to in_class.
        * coff64-rs6000.c (_bfd_xcoff64_swap_aux_in)
        (_bfd_xcoff64_swap_aux_out): Rename arguments class to in_class.
        * coffcode.h (coff_pointerize_aux_hook): Rename variable class
        to n_sclass.
        * coffgen.c (coff_write_symbol, coff_pointerize_aux): Rename
        variables named class to n_sclass. (coff_write_symbols): Rename
        variable class to sym_class. (bfd_coff_set_symbol_class): Rename
        argument class to symbol_class.
        * cofflink.c (_bfd_coff_link_hash_newfunc)
        (coff_link_add_symbols, _bfd_coff_link_input_bfd)
        (_bfd_coff_write_global_sym, _bfd_coff_generic_relocate_section):
        Update code to use renamed members.
        * coffswap.h (coff_swap_aux_in, coff_swap_aux_out): Rename
        argument class to in_class.
        * libcoff-in.h (struct coff_link_hash_entry, struct
        coff_debug_merge_type) Renamed members class to symbol_class and
        type_class.
        * libcoff.h Regenerated.
        * peXXigen.c: (_bfd_XXi_swap_aux_in, _bfd_XXi_swap_aux_out):
        Rename argument class to in_class.
        * pef.c (bfd_pef_parse_imported_symbol): Update code to use
        renamed members.
        * pef.h (struct bfd_pef_imported_symbol): Changed name of
        member class to symbol_class.
@
text
@d261 1
a261 1
  unsigned char symbol_class;
d401 1
a401 1
  int type_class;
d610 1
@


1.55
log
@2009-04-21  H.J. Lu  <hongjiu.lu@@intel.com>

	* coff-ia64.c (COFF_PAGE_SIZE): Changed to 8K.

	* coffcode.h (coff_compute_section_file_positions): Clear
	D_PAGED if PE section alignment is smaller than COFF_PAGE_SIZE.

	* libcoff-in.h (pe_tdata): Remove force_minimum_alignment and
	force_minimum_alignment.

	* libcoff.h: Regenerated.

	* pei-ia64.c (PEI_TARGET_SUBSYSTEM): Removed.
	(PEI_FORCE_MINIMUM_ALIGNMENT): Likewise.

	* peicode.h (pe_mkobject): Don't set force_minimum_alignment
	nor target_subsystem.

	* peXXigen.c (_bfd_XXi_swap_aouthdr_out): Don't check
	force_minimum_alignment nor target_subsystem.
@
text
@d113 3
@


1.54
log
@bfd/

2009-04-17  H.J. Lu  <hongjiu.lu@@intel.com>

	PR binutils/10074
	* coffcode.h (bfd_pei_p): New.

	* config.bfd: Remove bfd_efi_bsdrv_ia32_vec,
	bfd_efi_rtdrv_ia32_vec, bfd_efi_bsdrv_x86_64_vec,
	bfd_efi_rtdrv_x86_64_vec, bfd_efi_bsdrv_ia64_vec and
	bfd_efi_rtdrv_ia64_vec.  Replace bfd_efi_app_ia32_vec,
	bfd_efi_app_x86_64_vec and bfd_efi_app_ia64_vec with
	i386pei_vec, x86_64pei_vec and bfd_pei_ia64_vec, respectively.

	* configure.in: Remove bfd_efi_bsdrv_ia32_vec,
	bfd_efi_rtdrv_ia32_vec, bfd_efi_bsdrv_x86_64_vec,
	bfd_efi_rtdrv_x86_64_vec,
	bfd_efi_bsdrv_ia64_vec and bfd_efi_rtdrv_ia64_vec.  Replace
	bfd_efi_ia64_vec with bfd_pei_ia64_vec.
	* targets.c: Likewise.

	* configure: Regenerated.
	* libcoff.h: Likewise.
	* Makefile.in: Likewise.

	* efi-app-ia32.c: Removed.
	* efi-app-x86_64.c: Likewise.
	* efi-bsdrv-ia32.c: Likewise.
	* efi-bsdrv-ia64.c: Likewise.
	* efi-bsdrv-x86_64.c: Likewise.
	* efi-rtdrv-ia32.c: Likewise.
	* efi-rtdrv-ia64.c: Likewise.
	* efi-rtdrv-x86_64.c: Likewise.
	* efi-rtdrv-ia32.c: Likewise.

	* efi-app-ia64.c: Moved to ...
	* pei-ia64.c: This.
	(TARGET_SYM): Set to bfd_pei_ia64_vec.
	(TARGET_NAME): Set to pei-ia64.

	* libpei.h (bfd_target_pei_p): Removed.
	(bfd_target_pei_arch): Likewise.
	(bfd_target_efi_app_p): Likewise.
	(bfd_target_efi_app_arch): Likewise.
	(bfd_target_efi_bsdrv_p): Likewise.
	(bfd_target_efi_bsdrv_arch): Likewise.
	(bfd_target_efi_rtdrv_p): Likewise.
	(bfd_target_efi_rtdrv_arch): Likewise.
	(bfd_pe_executable_p): Likewise.

	* Makefile.am (BFD32_BACKENDS): Remove efi-app-ia32.lo,
	efi-bsdrv-ia32.lo and efi-rtdrv-ia32.lo.
	(BFD32_BACKENDS_CFILES): Remove efi-app-ia32.c, efi-bsdrv-ia32.c
	and efi-rtdrv-ia32.c.
	(BFD64_BACKENDS): Remove efi-app-ia64.lo, efi-bsdrv-ia64.lo,
	efi-rtdrv-ia64.lo, efi-app-x86_64.lo, efi-bsdrv-x86_64.lo and
	efi-rtdrv-x86_64.lo. Add pei-ia64.lo.
	(BFD64_BACKENDS_CFILES): Remove efi-app-ia64.c, efi-bsdrv-ia64.c,
	efi-rtdrv-ia64.c, efi-app-x86_64.c, efi-bsdrv-x86_64.c and
	efi-rtdrv-x86_64.c. Add pei-ia64.c.
	(efi-app-ia64.lo): Removed.
	(efi-bsdrv-ia32.lo): Likewise.
	(efi-rtdrv-ia32.lo): Likewise.
	(efi-app-ia64.lo): Likewise.
	(efi-bsdrv-ia64.lo): Likewise.
	(efi-rtdrv-ia64.lo): Likewise.
	(efi-app-x86_64.lo): Likewise.
	(efi-bsdrv-x86_64.lo): Likewise.
	(efi-rtdrv-x86_64.lo): Likewise.
	(pei-ia64.lo): New.

	* peicode.h (coff_swap_scnhdr_in): Replace bfd_pe_executable_p
	with bfd_pei_p.
	(arch_type): Removed.
	(pe_arch): Likewise.
	(pe_bfd_object_p): Just return coff_object_p.

	* peXXigen.c (_bfd_XXi_swap_scnhdr_out): Replace
	bfd_pe_executable_p with bfd_pei_p.

binutils/

2009-04-17  H.J. Lu  <hongjiu.lu@@intel.com>

	PR binutils/10074
	* objcopy.c: Include coff/i386.h and coff/pe.h.
	(pe_file_alignment): New.
	(pe_heap_commit): Likewise.
	(pe_heap_reserve): Likewise.
	(pe_image_base): Likewise.
	(pe_section_alignment): Likewise.
	(pe_stack_commit): Likewise.
	(pe_stack_reserve): Likewise.
	(pe_subsystem): Likewise.
	(pe_major_subsystem_version): Likewise.
	(pe_minor_subsystem_version): Likewise.
	(set_pe_subsystem): Likewise.
	(convert_efi_target): Likewise.
	(command_line_switch): Add OPTION_FILE_ALIGNMENT,
	OPTION_HEAP, OPTION_IMAGE_BASE, OPTION_SECTION_ALIGNMENT,
	OPTION_STACK and OPTION_SUBSYSTEM.
	(copy_options): Likewise.
	(copy_usage): Add --file-alignment, --heap, --image-base,
	--section-alignment, --stack and --subsystem.
	(copy_object): Set up PE parameters.
	(copy_main): Process Add OPTION_FILE_ALIGNMENT,
	OPTION_HEAP, OPTION_IMAGE_BASE, OPTION_SECTION_ALIGNMENT,
	OPTION_STACK and OPTION_SUBSYSTEM.   Convert EFI target to
	PEI target.

	* NEWS: Mention --file-alignment, --heap, --image-base,
	--section-alignment, --stack and --subsystem command line
	options for objcopy.

	* doc/binutils.texi: Document --file-alignment, --heap,
	--image-base, --section-alignment, --stack and --subsystem
	command line options for objcopy.
@
text
@a123 2
  int target_subsystem;
  bfd_boolean force_minimum_alignment;
@


1.53
log
@bfd/
	* aout-adobe.c (aout_32_bfd_define_common_symbol): Define.
	* aout-target.h (MY_bfd_define_common_symbol): Likewise.
	* aout-tic30.c (MY_bfd_define_common_symbol): Likewise.
	* binary.c (binary_bfd_define_common_symbol): Likewise.
	* bout.c (b_out_bfd_define_common_symbol): Likewise.
	* coff-alpha.c (_bfd_ecoff_bfd_define_common_symbol): Likewise.
	* coff-mips.c (_bfd_ecoff_bfd_define_common_symbol): Likewise.
	* coffcode.h (coff_bfd_define_common_symbol): Likewise.
	* elfxx-target.h (bfd_elfNN_bfd_define_common_symbol): Likewise.
	* i386msdos.c (msdos_bfd_define_common_symbol): Likewise.
	* i386os9k.c (os9k_bfd_define_common_symbol): Likewise.
	* ieee.c (ieee_bfd_define_common_symbol): Likewise.
	* ihex.c (ihex_bfd_define_common_symbol): Likewise.
	* libbfd-in.h (_bfd_nolink_bfd_define_common_symbol): Likewise.
	* mach-o.c (bfd_mach_o_bfd_define_common_symbol): Likewise.
	* mmo.c (mmo_bfd_define_common_symbol): Likewise.
	* nlm-target.h (nlm_bfd_define_common_symbol): Likewise.
	* oasys.c (oasys_bfd_define_common_symbol): Likewise.
	* pef.c (bfd_pef_bfd_define_common_symbol): Likewise.
	* ppcboot.c (ppcboot_bfd_define_common_symbol): Likewise.
	* som.c (som_bfd_define_common_symbol): Likewise.
	* srec.c (srec_bfd_define_common_symbol): Likewise.
	* tekhex.c (tekhex_bfd_define_common_symbol): Likewise.
	* versados.c (versados_bfd_define_common_symbol): Likewise.
	* vms.c (vms_bfd_define_common_symbol): Likewise.
	* xcoff-target.h (_bfd_xcoff_bfd_define_common_symbol): Likewise.
	* xsym.c (bfd_sym_bfd_define_common_symbol): Likewise.
	* coff-rs6000.c (rs6000coff_vec): Add _bfd_xcoff_define_common_symbol.
	(pmac_xcoff_vec): Likewise.
	* coff64-rs6000.c (rs6000coff64_vec): Likewise.
	(aix5coff64_vec): Likewise.
	* linker.c (bfd_generic_define_common_symbol): New function.
	* targets.c (BFD_JUMP_TABLE_LINK): Add NAME##_bfd_define_common_symbol.
	(_bfd_define_common_symbol): New field.
	* libcoff-in.h (_bfd_xcoff_define_common_symbol): Declare.
	* xcofflink.c (_bfd_xcoff_define_common_symbol): New function.
	(xcoff_build_ldsyms): Don't set XCOFF_DEF_REGULAR for common
	symbols here.
	* bfd-in2.h: Regenerate.
	* libbfd.h: Likewise.
	* libcoff.h: Likewise.

ld/
	* ldlang.c (lang_one_common): Use bfd_define_common_symbol.

ld/testsuite/
	* ld-powerpc/aix-export-2.s, ld-powerpc/aix-export-2.nd: New test.
	* ld-powerpc/aix52.exp: Run it.
@
text
@d953 4
@


1.52
log
@bfd/
	* libcoff-in.h (xcoff_tdata): Add a lineno_counts field.
	* libcoff.h: Regenerate.
	* xcofflink.c (xcoff_link_add_symbols): Record per-symbol
	line-number counts in the bfd's lineno_counts field.
	Don't keep per-csect line-number counts.
	(xcoff_sweep): Don't update per-csect line-number counts.
	(bfd_xcoff_size_dynamic_sections): Count the number of line-number
	entries in each output section.
	(xcoff_link_input_bfd): Get the number of line numbers from
	the bfd's lineno_counts field, rather than recalculating it
	from scratch.  Fix the range check when updating C_BINCL and
	C_EINCL symbols.
	(_bfd_xcoff_bfd_final_link): Don't count the output line numbers
	here.  Don't expect csects to have line-number counts.

ld/testsuite/
	* ld-powerpc/aix-lineno-1.s, ld-powerpc/aix-lineno-1.txt,
	ld-powerpc/aix-lineno-1a.dd, ld-powerpc/aix-lineno-1a.nd,
	ld-powerpc/aix-lineno-1b.dd, ld-powerpc/aix-lineno-1b.nd: New tests.
	* ld-powerpc/aix52.exp: Run them.  Copy aix-lineno-1.txt to tmpdir.
@
text
@d596 2
@


1.51
log
@bfd/
	* libcoff-in.h (xcoff_tdata): Change debug_indices to a signed long.
	* libcoff.h: Regenerate.
	* xcofflink.c (xcoff_keep_symbol_p): New function, using the
	"skip" logic from xcoff_link_input_bfd.
	(bfd_xcoff_size_dynamic_sections): Explicitly skip dynamic
	objects in a dynamic link, rather than checking whether csectpp
	is null.  Always allocate debug_index for other objects,
	and always go through the loop.  Update the type of debug_index
	after the change above.  Read the auxillary csect information
	and use xcoff_keep_symbol_p to decide whether a symbol should
	be kept.  Set its debug_index to -2 if not.
	(xcoff_link_input_bfd): Update the type of debug_index after
	the change above and always expect it to be nonnull.  Use it to
	test whether a symbol should be stripped, rather than making the
	decision here.  Postpone all symbol creation to the second pass.
@
text
@d173 1
@


1.50
log
@bfd/
	* libcoff-in.h (xcoff_section_tdata): Update commentary.
	* libcoff.h: Regenerate.
	* xcofflink.c (xcoff_link_add_symbols): Set the csect of XTY_ER
	symbols to bfd_und_section_ptr or bfd_abs_section_ptr, rather than
	the previous symbol's csect.  Treat last_symndx as an inclusive value
	and simplify its handling.
	(xcoff_mark): Treat last_symndx as an inclusive value.  Only mark
	symbols with the right csect.  Don't mark rsec when processing
	relocations against undefined or absolute sections.
	(bfd_xcoff_size_dynamic_sections): Don't check the SEC_MARK flag
	of bfd_und_section_ptr.
	(xcoff_link_input_bfd): Likewise.
@
text
@d172 1
a172 1
  unsigned long *debug_indices;
@


1.49
log
@bfd/ChangeLog

	* coff-alpha.c (alpha_ecoff_backend_data):  Initialise fields which
	control long section name handling with ECOFF_NO_LONG_SECTION_NAMES.
	* coff-mips.c (mips_ecoff_backend_data):  Likewise.
	* coff-rs6000.c (bfd_xcoff_backend_data):  Initialise fields which
	control long section name handling with XCOFF_NO_LONG_SECTION_NAMES.
	(bfd_pmac_xcoff_backend_data):  Likewise.
	* coff64-rs6000.c (bfd_xcoff_backend_data):  Likewise.
	(bfd_xcoff_aix5_backend_data):  Likewise.
	(xcoff64_write_object_contents):  Delete unused long_section_names
	local variable.
	* coff-sh.c (bfd_coff_small_swap_table):  Initialise long section
	name members using COFF_DEFAULT_LONG_SECTION_NAMES and make entire
	struct non-const.
	* coffcode.h (documentation):  Update to describe long section names.
	(COFFLONGSECTIONCATHELPER):  New helper macro.
	(BLANKOR1TOODD):  Likewise.
	(COFF_ENABLE_LONG_SECTION_NAMES):  Likewise.
	(COFF_LONG_SECTION_NAMES_SETTER):  Likewise.
	(COFF_DEFAULT_LONG_SECTION_NAMES):  Likewise.
	(bfd_coff_set_long_section_names_allowed):  New function.
	(bfd_coff_set_long_section_names_disallowed):  Likewise.
	(struct bfd_coff_backend_data):  Add new backend hook function
	pointer _bfd_coff_set_long_section_names.
	(bfd_coff_set_long_section_names):  New backend hook.
	(coff_write_object_contents):  Only generate long section names if
	bfd_coff_long_section_names() indicates they are currently enabled.
	(bfd_coff_std_swap_table):  Make non-const, and initialise long
	section name fields using COFF_DEFAULT_LONG_SECTION_NAMES.
	(ticoff0_swap_table):  Likewise to both.
	(ticoff1_swap_table):  Again, likewise to both.
	* coffgen.c (make_a_section_from_file):  Allow long section names
	as inputs even if not currently allowed for outputs.
	* ecoff.c (_bfd_ecoff_no_long_sections):  New function.
	* efi-app-ia32.c (COFF_LONG_SECTION_NAMES):  Define to 0, not blank.
	* efi-app-ia64.c (COFF_LONG_SECTION_NAMES):  Likewise.
	* efi-app-x86_64.c (COFF_LONG_SECTION_NAMES):  Likewise.
	* efi-bsdrv-ia32.c (COFF_LONG_SECTION_NAMES):  Likewise.
	* efi-bsdrv-ia64.c (COFF_LONG_SECTION_NAMES):  Likewise.
	* efi-bsdrv-x86_64.c (COFF_LONG_SECTION_NAMES):  Likewise.
	* efi-rtdrv-ia32.c (COFF_LONG_SECTION_NAMES):  Likewise.
	* efi-rtdrv-ia64.c (COFF_LONG_SECTION_NAMES):  Likewise.
	* efi-rtdrv-x86_64.c (COFF_LONG_SECTION_NAMES):  Likewise.
	* pei-arm.c (COFF_LONG_SECTION_NAMES):  Likewise.
	* pei-i386.c (COFF_LONG_SECTION_NAMES):  Likewise.
	* pei-mcore.c (COFF_LONG_SECTION_NAMES):  Likewise.
	* pei-mips.c (COFF_LONG_SECTION_NAMES):  Likewise.
	* pei-ppc.c (COFF_LONG_SECTION_NAMES):  Likewise.
	* pei-sh.c (COFF_LONG_SECTION_NAMES):  Likewise.
	* pei-x86_64.c (COFF_LONG_SECTION_NAMES):  Likewise.
	* libcoff-in.h:  Update copyright year to cause updated copyright
	year in generated libcoff.h, and fix typo.
	* libcoff.h:  Regenerated.
	* libecoff.h (ECOFF_NO_LONG_SECTION_NAMES):  New macro.
	(_bfd_ecoff_no_long_sections):  Add prototype.
	* libxcoff.h (XCOFF_NO_LONG_SECTION_NAMES):  New macro.
	* pe-mips.c (COFF_LONG_SECTION_NAMES):  Define empty if not already
	defined by an including .c file.
	* ticoff.h (ticoff0_swap_table):  Make non-const, and initialise
	long section name fields using COFF_DEFAULT_LONG_SECTION_NAMES.
	(ticoff1_swap_table):  Likewise to both.

ld/ChangeLog

	* ld.texinfo:  Update to mention long section name options.
	* NEWS:  Mention new behaviour and command-line options.
	* pe-dll.c (pe_use_coff_long_section_names):  New global variable.
	(pe_output_file_set_long_section_names):  New function.
	(pe_dll_build_sections):  Call it on output BFDs.
	(pe_exe_build_sections):  Likewise.
	(pe_dll_fill_sections):  Likewise.
	(pe_exe_fill_sections):  Likewise.
	* pe-dll.h (pe_use_coff_long_section_names):  Declare extern.
	(pe_output_file_set_long_section_names):  Add prototype.
	* pep-dll.c (pe_use_coff_long_section_names):  Define pep_ alias.
	(pe_output_file_set_long_section_names):  Likewise.
	* pep-dll.h (pep_use_coff_long_section_names):  Declare extern.
	(pep_output_file_set_long_section_names):  Add prototype.
	* pe.em (OPTION_ENABLE_LONG_SECTION_NAMES):  New getopt value macro.
	(OPTION_DISABLE_LONG_SECTION_NAMES):  Likewise.
	(gld${EMULATION_NAME}_add_options):  Add new options to xtra_long[].
	(gld_${EMULATION_NAME}_list_options):  Describe them.
	(gld${EMULATION_NAME}_handle_option):  Set or clear global
	pe_use_coff_long_section_names flag when options recognised.
	(gld_${EMULATION_NAME}_after_open):  En/disable long section names
	for main output bfd by calling pe_output_file_set_long_section_names.
	* pep.em (enum options):  Extend enum with new getopt option values.
	(gld${EMULATION_NAME}_add_options):  Add new options to xtra_long[].
	(gld_${EMULATION_NAME}_list_options):  Describe them.
	(gld${EMULATION_NAME}_handle_option):  Set or clear global
	pe_use_coff_long_section_names flag when options recognised.
	(gld_${EMULATION_NAME}_after_open):  En/disable long section names
	for main output bfd by calling pep_output_file_set_long_section_names.

ld/testsuite/ChangeLog

	* ld-pe/longsecn-1.d:  New test file.
	* ld-pe/longsecn-2.d:  Likewise.
	* ld-pe/longsecn-3.d:  Likewise.
	* ld-pe/longsecn-4.d:  Likewise.
	* ld-pe/longsecn-5.d:  Likewise.
	* ld-pe/longsecn.d:  Likewise.
	* ld-pe/longsecn.exp:  New test control script.
	* ld-pe/longsecn.s:  New test source file.
@
text
@d222 1
a222 2
  /* The first and one past the last symbol indices for symbols used
     by this csect.  */
@


1.48
log
@Silence gcc printf warnings
@
text
@d7 1
a7 1
   2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008
d600 1
a600 1
/* Functions in coff-ppc.c.  FIXME: These are called be pe.em in the
d718 1
d720 3
d859 2
@


1.47
log
@        * pe-arm-wince.c (pe_print_compressed_pdata): Define new function to
        print compressed pdata structure as described on MSDN. This only
        applies to a limited set of architectures (ARM, SH4).
        (slurp_symtab, my_symbol_for_address): Define static helper
        functions for pe_print_compressed_pdata.
        * coffcode.h (bfd_coff_backend_data): Add _bfd_coff_print_pdata field.
        (bfd_coff_have_print_pdata, bfd_coff_print_pdata): Define.
        * bfd/peXXigen.c (_bfd_XX_print_private_bfd_data_common): Add check on
        bfd_coff_backend_data, call the function if non-null.
        * pei-mcore.c: Add target dependent initialisation for
        bfd_coff_backend_data.
        * coff-sh.c: Likewise.
        * coff64-rs6000.c: Likewise.
        * coff-rs6000.c: Likewise.
        * libcoff-in.h: Likewise.
        * cf-i386lynx.c: Likewise.
        * coff-alpha.c: Likewise.
        * coff-apollo.c: Likewise.
        * coff-arm.c: Likewise.
        * coff-aux.c: Likewise.
        * coff-h8300.c: Likewise.
        * coff-h8500.c: Likewise.
        * coff-i386.c: Likewise.
        * coff-i860.c: Likewise.
        * coff-i960.c: Likewise.
        * coff-ia64.c: Likewise.
        * coff-m68k.c: Likewise.
        * coff-m88k.c: Likewise.
        * coff-maxq.c: Likewise.
        * coff-mips.c: Likewise.
        * coff-or32.c: Likewise.
        * coff-sparc.c: Likewise.
        * coff-tic30.c: Likewise.
        * coff-tic4x.c: Likewise.
        * coff-tic54x.c: Likewise.
        * coff-tic80.c: Likewise.
        * coff-w65.c: Likewise.
        * coff-we32k.c: Likewise.
        * coff-x86_64.c: Likewise.
        * coff-z80.c: Likewise.
        * coff-z8k.c: Likewise.
        * pe-mcore.c: Likewise.
        * pe-mips.c: Likewise.
        * pe-ppc.c: Likewise.
        * peXXigen.c: Likewise.
        * pei-ppc.c: Likewise.
        * libcoff.h: Regenerate.
@
text
@d7 1
a7 1
   2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007
@


1.46
log
@Switch sources over to use the GPL version 3
@
text
@d805 3
d940 5
@


1.45
log
@bfd/
	* elf-bfd.h (struct elf_backend_data): Add bfd_link_info pointer
	parameter.
	(_bfd_elf_sizeof_headers): Replace bfd_boolean param with
	bfd_link_info pointer.
	* targets.c (struct bfd_target <_bfd_sizeof_headers>): Likewise.
	* bfd.c (bfd_sizeof_headers): Tweak param name.
	* aout-adobe.c (aout_adobe_sizeof_headers): Adjust.
	* aoutx.h (NAME (aout, sizeof_headers)): Adjust.
	* binary.c (binary_sizeof_headers): Adjust.
	* bout.c (b_out_sizeof_headers): Adjust.
	* coff-rs6000.c (_bfd_xcoff_sizeof_headers): Adjust.
	* coff64-rs6000.c (xcoff64_sizeof_headers): Adjust.
	* coffgen.c (coff_sizeof_headers): Adjust.
	* ecoff.c (_bfd_ecoff_sizeof_headers): Adjust.
	(ecoff_compute_section_file_positions): Adjust.
	(_bfd_ecoff_write_object_contents): Adjust.
	* elf.c (get_program_header_size, _bfd_elf_sizeof_headers): Adjust.
	* elf32-arm.c (elf32_arm_additional_program_headers): Adjust.
	* elf32-i370.c (elf_backend_additional_program_headers): Adjust.
	* elf32-ppc.c (ppc_elf_additional_program_headers): Adjust.
	* elf64-hppa.c (elf64_hppa_additional_program_headers): Adjust.
	* elf64-x86-64.c (elf64_x86_64_additional_program_headers): Adjust.
	* elfxx-ia64.c (elfNN_ia64_additional_program_headers): Adjust.
	* elfxx-mips.c (_bfd_mips_elf_additional_program_headers): Adjust.
	* elfxx-mips.h (_bfd_mips_elf_additional_program_headers): Adjust.
	* i386msdos.c: Convert to ISO C.
	(msdos_sizeof_headers): Adjust.
	* i386os9k.c: Convert to ISO C.
	(os9k_sizeof_headers): Adjust.
	* ieee.c (ieee_sizeof_headers): Adjust.
	* ihex.c (ihex_sizeof_headers): Adjust.
	* libaout.h (NAME (aout, sizeof_headers)): Adjust.
	* libbfd-in.h (_bfd_nolink_sizeof_headers): Adjust.
	* libcoff-in.h (coff_sizeof_headers): Adjust.
	* libecoff.h (_bfd_ecoff_sizeof_headers): Adjust.
	* mach-o.c (bfd_mach_o_sizeof_headers): Adjust.
	* mmo.c (mmo_sizeof_headers): Adjust.
	* oasys.c (oasys_sizeof_headers): Adjust.
	* pdp11.c (NAME (aout, sizeof_headers)): Adjust.
	* pef.c (bfd_pef_sizeof_headers): Adjust.
	* ppcboot.c (ppcboot_sizeof_headers): Adjust.
	* som.c (som_sizeof_headers): Adjust.
	* srec.c (srec_sizeof_headers): Adjust.
	* tekhex.c (tekhex_sizeof_headers): Adjust.
	* versados.c (versados_sizeof_headers): Adjust.
	* vms.c (vms_sizeof_headers): Adjust.
	* xcoff-target.h (_bfd_xcoff_sizeof_headers): Adjust.
	* xsym.c (bfd_sym_sizeof_headers): Adjust.
	* xsym.h (bfd_sym_sizeof_headers): Adjust.
	* bfd-in2.h: Regenerate.
	* libbfd.h: Regenerate.
	* libcoff.h: Regenerate.
ld/
	* ldexp.c (fold_name): Adjust bfd_sizeof_headers call.
@
text
@d7 1
a7 1
   2000, 2001, 2002, 2003, 2004, 2005, 2006
d15 1
a15 1
   the Free Software Foundation; either version 2 of the License, or
d25 2
a26 1
   Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA 02110-1301, USA.  */
@


1.44
log
@Patch by matz@@suse.de:
bfd/ChangeLog:
	* reloc.c: Add BFD_RELOC_X86_64_GOT64, BFD_RELOC_X86_64_GOTPCREL64,
	BFD_RELOC_X86_64_GOTPC64, BFD_RELOC_X86_64_GOTPLT64,
	BFD_RELOC_X86_64_PLTOFF64.
	* bfd-in2.h: Regenerated.
	* libbfd.h: Regenerated.
	* elf64-x86-64.c (x86_64_elf_howto_table): Correct comment.
	Add howtos for above relocs.
	(x86_64_reloc_map): Add mappings for new relocs.
	(elf64_x86_64_check_relocs): R_X86_64_GOT64, R_X86_64_GOTPCREL64,
	R_X86_64_GOTPLT64 need a got entry.  R_X86_64_GOTPLT64 also a PLT
	entry.  R_X86_64_GOTPC64 needs a .got section.  R_X86_64_PLTOFF64
	needs a PLT entry.
	(elf64_x86_64_gc_sweep_hook): Reflect changes from
	elf64_x86_64_check_relocs for the new relocs.
	(elf64_x86_64_relocate_section): Handle new relocs.

gas/ChangeLog:
	* config/tc-i386.c (type_names): Correct placement of 'static'.
	(reloc): Map some more relocs to their 64 bit counterpart when
	size is 8.
	(output_insn): Work around breakage if DEBUG386 is defined.
	(output_disp): A BFD_RELOC_64 with GOT_symbol as operand also
	needs to be mapped to BFD_RELOC_X86_64_GOTPC64 or
	BFD_RELOC_X86_64_GOTPC32.  Also x86-64 handles pcrel addressing
	different from i386.
	(output_imm): Ditto.
	(lex_got): Recognize @@PLTOFF and @@GOTPLT.  Make @@GOT accept also
	Imm64.
	(md_convert_frag): Jumps can now be larger than 2GB away, error
	out in that case.
	(tc_gen_reloc): New relocs are passed through.  BFD_RELOC_64
	and BFD_RELOC_64_PCREL are mapped to BFD_RELOC_X86_64_GOTPC64.

gas/testsuite/ChangeLog:
	* gas/i386/reloc64.s: Accept 64-bit forms.
	* gas/i386/reloc64.d: Adjust.
	* gas/i386/reloc64.l: Adjust.

include/ChangeLog:
	* elf/x86-64.h: Add the new relocations with their official
	numbers.
@
text
@d355 1
a355 1
  (bfd *, bfd_boolean);
@


1.43
log
@	PR 2434
bfd/
	* elflink.c (struct elf_smash_syms_data, elf_smash_syms): Delete.
	(elf_link_add_object_symbols): Delete unnecessary locals.  Rename
	hash_table -> htab.  Formatting.  Save entire symbol table
	before loading as-needed syms, and restore afterwards if lib not
	needed.  Use bfd_hash_allocate rather than bfd_alloc for sym
	name.  Free some buffers earlier.
	* bfd-in.h (struct bfd_hash_table): Add entsize.
	(bfd_hash_table_init, bfd_hash_table_init_n): Adjust prototype.
	* elf-bfd.h (_bfd_elf_link_hash_table_init): Likewise
	* hash.c (bfd_hash_table_init_n): Add entsize param, save to
	hash table.
	(bfd_hash_table_init): Add param, adjust calls.
	* aoutx.h: Adjust all hash_table_init functions and calls.
	* bfd.c: Likewise.
	* coff-arm.c: Likewise.
	* coff-h8300.c: Likewise.
	* coff-ppc.c: Likewise.
	* cofflink.c: Likewise.
	* ecoff.c: Likewise.
	* ecofflink.c: Likewise.
	* elf-m10300.c: Likewise.
	* elf-strtab.c: Likewise.
	* elf.c: Likewise.
	* elf32-arm.c: Likewise.
	* elf32-bfin.c: Likewise.
	* elf32-cris.c: Likewise.
	* elf32-frv.c: Likewise.
	* elf32-hppa.c: Likewise.
	* elf32-i386.c: Likewise.
	* elf32-m32r.c: Likewise.
	* elf32-m68hc1x.c: Likewise.
	* elf32-m68k.c: Likewise.
	* elf32-ppc.c: Likewise.
	* elf32-s390.c: Likewise.
	* elf32-sh.c: Likewise.
	* elf32-vax.c: Likewise.
	* elf64-alpha.c: Likewise.
	* elf64-hppa.c: Likewise.
	* elf64-ppc.c: Likewise.
	* elf64-s390.c: Likewise.
	* elf64-sh64.c: Likewise.
	* elf64-x86-64.c: Likewise.
	* elfxx-ia64.c: Likewise.
	* elfxx-mips.c: Likewise.
	* elfxx-sparc.c: Likewise.
	* i386linux.c: Likewise.
	* libaout.h: Likewise.
	* libbfd-in.h: Likewise.
	* libcoff-in.h: Likewise.
	* linker.c: Likewise.
	* m68klinux.c: Likewise.
	* merge.c: Likewise.
	* opncls.c: Likewise.
	* pdp11.c: Likewise.
	* sparclinux.c: Likewise.
	* stabs.c: Likewise.
	* sunos.c: Likewise.
	* vms.c: Likewise.
	* xcofflink.c: Likewise.
	* section.c (struct section_hash_entry): Move to..
	* libbfd-in.h: ..here.
	* Makefile.am: Run "make dep-am"
	* Makefile.in: Regenerate.
	* bfd-in2.h: Regenerate.
	* libbfd.h: Regenerate.
	* libcoff.h: Regenerate.
binutils/
	* ieee.c (write_ieee_debugging_info): Adjust bfd_hash_table_init calls.
	* wrstabs.c (write_stabs_in_sections_debugging_info): Likewise.
ld/
	* ldcref.c (add_cref): Adjust bfd_hash_table_init calls.
	* ldlang.c (output_statement_table_init, lang_init): Likewise.
	* ldmain.c (add_ysym, add_wrap, add_keepsyms_file): Likewise.
	(undefined_symbol): Likewise.
@
text
@d7 1
a7 1
   2000, 2001, 2002, 2003, 2004, 2005
@


1.43.2.1
log
@Support for ARM "group relocations" numbers 4, and 57 through 83.

	* include/elf/arm.h: Correct names of R_ARM_LDC_G{0,1,2}
	to R_ARM_LDC_SB_G{0,1,2} respectively.

	bfd/
	* bfd-in2.h: Regenerate.
	* elf32-arm.c (R_ARM_ALU_PC_G0_NC, R_ARM_ALU_PC_G0,
	R_ARM_ALU_PC_G1_NC, R_ARM_ALU_PC_G1, R_ARM_ALU_PC_G2,
	R_ARM_LDR_PC_G1, R_ARM_LDR_PC_G2, R_ARM_LDRS_PC_G0,
	R_ARM_LDRS_PC_G1, R_ARM_LDRS_PC_G2, R_ARM_LDC_PC_G0,
	R_ARM_LDC_PC_G1, R_ARM_LDC_PC_G2, R_ARM_ALU_SB_G0_NC,
	R_ARM_ALU_SB_G0, R_ARM_ALU_SB_G1_NC, R_ARM_ALU_SB_G1,
	R_ARM_ALU_SB_G2, R_ARM_LDR_SB_G0, R_ARM_LDR_SB_G1,
	R_ARM_LDR_SB_G2, R_ARM_LDRS_SB_G0, R_ARM_LDRS_SB_G1,
	R_ARM_LDRS_SB_G2, R_ARM_LDC_SB_G0, R_ARM_LDC_SB_G1,
	R_ARM_LDC_SB_G2): New relocation types.
	(R_ARM_PC13): Rename to AAELF name R_ARM_LDR_PC_G0 and
	adjust HOWTO entry to be consistent with R_ARM_LDR_PC_G1
	and friends.
	(elf32_arm_howto_table_3): Delete; contents merged into
	elf32_arm_howto_table_2.
	(elf32_arm_howto_from_type): Adjust correspondingly.
	(elf32_arm_reloc_map): Extend with the above relocations.
	(calculate_group_reloc_mask): New function.
	(identify_add_or_sub): New function.
	(elf32_arm_final_link_relocate): Support for the above
	relocations.
	* reloc.c: Add enumeration entries for BFD_RELOC_ARM_...
	codes to correspond to the above relocations.

	gas/
	* config/tc-arm.c (enum parse_operand_result): New.
	(struct group_reloc_table_entry): New.
	(enum group_reloc_type): New.
	(group_reloc_table): New array.
	(find_group_reloc_table_entry): New function.
	(parse_shifter_operand_group_reloc): New function.
	(parse_address_main): New function, incorporating code
	from the old parse_address function.  To be used via...
	(parse_address): wrapper for parse_address_main; and
	(parse_address_group_reloc): new function, likewise.
	(enum operand_parse_code): New codes OP_SHG, OP_ADDRGLDR,
	OP_ADDRGLDRS, OP_ADDRGLDC.
	(parse_operands): Support for these new operand codes.
	New macro po_misc_or_fail_no_backtrack.
	(encode_arm_cp_address): Preserve group relocations.
	(insns): Modify to use the above operand codes where group
	relocations are permitted.
	(md_apply_fix): Handle the group relocations
	ALU_PC_G0_NC through LDC_SB_G2.
	(tc_gen_reloc): Likewise.
	(arm_force_relocation): Leave group relocations for the linker.
	(arm_fix_adjustable): Likewise.

	gas/testsuite/
	* gas/arm/group-reloc-alu.d: New test.
	* gas/arm/group-reloc-alu-encoding-bad.d: New test.
	* gas/arm/group-reloc-alu-encoding-bad.l: New test.
	* gas/arm/group-reloc-alu-encoding-bad.s: New test.
	* gas/arm/group-reloc-alu-parsing-bad.d: New test.
	* gas/arm/group-reloc-alu-parsing-bad.l: New test.
	* gas/arm/group-reloc-alu-parsing-bad.s: New test.
	* gas/arm/group-reloc-alu.s: New test.
	* gas/arm/group-reloc-ldc.d: New test.
	* gas/arm/group-reloc-ldc-encoding-bad.d: New test.
	* gas/arm/group-reloc-ldc-encoding-bad.l: New test.
	* gas/arm/group-reloc-ldc-encoding-bad.s: New test.
	* gas/arm/group-reloc-ldc-parsing-bad.d: New test.
	* gas/arm/group-reloc-ldc-parsing-bad.l: New test.
	* gas/arm/group-reloc-ldc-parsing-bad.s: New test.
	* gas/arm/group-reloc-ldc.s: New test.
	* gas/arm/group-reloc-ldr.d: New test.
	* gas/arm/group-reloc-ldr-encoding-bad.d: New test.
	* gas/arm/group-reloc-ldr-encoding-bad.l: New test.
	* gas/arm/group-reloc-ldr-encoding-bad.s: New test.
	* gas/arm/group-reloc-ldr-parsing-bad.d: New test.
	* gas/arm/group-reloc-ldr-parsing-bad.l: New test.
	* gas/arm/group-reloc-ldr-parsing-bad.s: New test.
	* gas/arm/group-reloc-ldr.s: New test.
	* gas/arm/group-reloc-ldrs.d: New test.
	* gas/arm/group-reloc-ldrs-encoding-bad.d: New test.
	* gas/arm/group-reloc-ldrs-encoding-bad.l: New test.
	* gas/arm/group-reloc-ldrs-encoding-bad.s: New test.
	* gas/arm/group-reloc-ldrs-parsing-bad.d: New test.
	* gas/arm/group-reloc-ldrs-parsing-bad.l: New test.
	* gas/arm/group-reloc-ldrs-parsing-bad.s: New test.
	* gas/arm/group-reloc-ldrs.s: New test.

	ld/testsuite/
	* ld-arm/group-relocs-alu-bad.d: New test.
	* ld-arm/group-relocs-alu-bad.s: New test.
	* ld-arm/group-relocs.d: New test.
	* ld-arm/group-relocs-ldc-bad.d: New test.
	* ld-arm/group-relocs-ldc-bad.s: New test.
	* ld-arm/group-relocs-ldr-bad.d: New test.
	* ld-arm/group-relocs-ldr-bad.s: New test.
	* ld-arm/group-relocs-ldrs-bad.d: New test.
	* ld-arm/group-relocs-ldrs-bad.s: New test.
	* ld-arm/group-relocs.s: New test.
	* ld-arm/arm-elf.exp: Wire in new tests.
@
text
@d7 1
a7 1
   2000, 2001, 2002, 2003, 2004, 2005, 2006
@


1.42
log
@Approved by nickc@@redhat.com

	2005-05-23  Fred Fish  <fnf@@specifixinc.com>
	* dwarf2.c (struct dwarf2_debug): Add inliner_chain member.
	(struct funcinfo): Add caller_func, caller_file, caller_line.
	tag, and nesting_level members.
	(lookup_address_in_function_table): Change first passed parameter
	from "struct funcinfo *" to "struct comp_unit *".
	(lookup_address_in_function_table): Dereference unit to find function
	table.
	(lookup_address_in_function_table): Traverse the function list to
	create a chain of inlined functions back to the first non inlined
	function.
	(scan_unit_for_functions): Remember tag and nesting level.  Handle
	DW_AT_call_file and DW_AT_call_line.
	(comp_unit_find_nearest_line): Adjust lookup_address_in_function_table
	call to pass unit pointer instead of function table pointer.  For
	inlined functions, save pointer to the inliner chain.
	(_bfd_dwarf2_find_nearest_line): Initialize inliner_chain to NULL.
	(_bfd_dwarf2_find_inliner_info): New function that returns information
	from the inliner chain after a call to bfd_find_nearest_line.

	* bfd.c (bfd_find_inliner_info): Define using BFD_SEND.
	* targets.c (BFD_JUMP_TABLE_SYMBOLS): Add entry for
	NAME##_find_inliner_info.
	(bfd_target): Add _bfd_find_inliner_info.
	* bfd-in2.h: Regenerate.

	* libbfd-in.h (_bfd_nosymbols_find_inliner_info): Define as
	macro that always returns bfd_false.
	(_bfd_dwarf2_find_inliner_info): Declare.
	* libbfd.h: Regenerate.

	* elf32-arm.c (elf32_arm_find_inliner_info): New function
	that calls _bfd_dwarf2_find_inliner_info.
	(bfd_elf32_find_inliner_info): Define to elf32_arm_find_inliner_info.

	* elfxx-mips.c (_bfd_mips_elf_find_inliner_info): New function
	that calls _bfd_dwarf2_find_inliner_info.
	* elfxx-mips.h (_bfd_mips_elf_find_inliner_info): Declare.
	* elfn32-mips.c (bfd_elf32_find_inliner_info): Define to
	_bfd_mips_elf_find_inliner_info.
	* elf64-mips.c (bfd_elf64_find_inliner_info): Ditto.
	* elf32-mips.c (bfd_elf32_find_inliner_info): Ditto.

	* elf.c (_bfd_elf_find_inliner_info): New function that calls
	_bfd_dwarf2_find_inliner_info.
	* elf-bfd.h (_bfd_elf_find_inliner_info): Declare.
	* elfxx-target.h (bfd_elfNN_find_inliner_info): Define to
	_bfd_elf_find_inliner_info.

	* coffgen.c (coff_find_inliner_info): New function that
	calls _bfd_dwarf2_find_inliner_info.
	* libcoff-in.h (coff_find_inliner_info): Declare.
	* libcoff.h: Regenerate.
	* coff-rs6000.c (rs6000coff_vec): Add coff_find_inliner_info.
	(pmac_xcoff_vec) Ditto.
	* coff64-rs6000.c (rs6000coff64_vec): Ditto.
	(aix5coff64_vec): Ditto.

	* aout-target.h (MY_find_inliner_info): Define as
	_bfd_nosymbols_find_inliner_info.
	* aout-tic30.c (MY_find_inliner_info): Ditto.
	* binary.c (binary_find_inliner_info): Ditto.
	* i386msdos.c (msdos_find_inliner_info): Ditto.
	* ihex.c (ihex_find_inliner_info): Ditto.
	* libaout.h (aout_32_find_inliner_info): Ditto.
	* libecoff.h (_bfd_ecoff_find_inliner_info): Ditto.
	* mach-o.c (bfd_mach_o_find_inliner_info): Ditto.
	* mmo.c (mmo_find_inliner_info): Ditto.
	* nlm-target.h (nlm_find_inliner_info): Ditto.
	* pef.c (bfd_pef_find_inliner_info): Ditto.
	* ppcboot.c (ppcboot_find_inliner_info): Ditto.
	* srec.c (srec_find_inliner_info): Ditto.
	* tekhex.c (tekhex_find_inliner_info): Ditto.
	* versados.c (versados_find_inliner_info): Ditto.
	* xsym.c (bfd_sym_find_inliner_info): Ditto.

	* ieee.c (ieee_find_inliner_info): New function that always
	returns FALSE.
	* oasys.c (oasys_find_inliner_info): Ditto.
	* vms.c (vms_find_inliner_info): Ditto.
@
text
@d428 2
a429 1
  (bfd_hash_table_init (&(table)->root, _bfd_coff_debug_merge_hash_newfunc))
d545 2
a546 1
			       const char *));
@


1.41
log
@Update the address and phone number of the FSF organization in the GPL notices
@
text
@d352 2
@


1.40
log
@Update the FSF address in the copyright/GPL notice
@
text
@d25 1
a25 1
   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02110-1301, USA.  */
@


1.39
log
@Update to ISO-C90 and fix formatting
@
text
@d25 1
a25 1
   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
@


1.38
log
@bfd/
	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.
	* aclocal.m4: Regenerate.
	* libcoff.h: Regenerate.
bfd/doc/
	* Makefile.in: Regenerate.
binutils/
	* Makefile.am: Run "make dep-am".
	(syslex.o, sysinfo.o, arparse.o, arlex.o): Add -Wno-error to command.
	(sysroff.o, defparse.o, deflex.o): Likewise.
	(nlmheader.o, rcparse.o, rclex.o): Likewise.
	* Makefile.in: Regenerate.
	* aclocal.m4: Regenerate.
	* config.in: Regenerate.
	* configure: Regenerate.
gas/
	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.
ld/
	* Makefile.am: Run "make dep-am".
	(ldgram.o, ldlex.o, deffilep.o): Add -Wno-error to command.
	* Makefile.in: Regenerate.
	* config.in: Regenerate.
@
text
@d7 1
a7 1
   2000, 2001, 2002, 2003, 2004
d11 1
a11 1
This file is part of BFD, the Binary File Descriptor library.
d13 13
a25 13
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
d29 1
a29 1
/* Object file tdata; access macros */
d31 15
a45 17
#define coff_data(bfd)		((bfd)->tdata.coff_obj_data)
#define exec_hdr(bfd)		(coff_data(bfd)->hdr)
#define obj_pe(bfd)             (coff_data(bfd)->pe)
#define obj_symbols(bfd)	(coff_data(bfd)->symbols)
#define	obj_sym_filepos(bfd)	(coff_data(bfd)->sym_filepos)

#define obj_relocbase(bfd)	(coff_data(bfd)->relocbase)
#define obj_raw_syments(bfd)	(coff_data(bfd)->raw_syments)
#define obj_raw_syment_count(bfd)	(coff_data(bfd)->raw_syment_count)
#define obj_convert(bfd)	(coff_data(bfd)->conversion_table)
#define obj_conv_table_size(bfd) (coff_data(bfd)->conv_table_size)

#define obj_coff_external_syms(bfd) (coff_data (bfd)->external_syms)
#define obj_coff_keep_syms(bfd)	(coff_data (bfd)->keep_syms)
#define obj_coff_strings(bfd)	(coff_data (bfd)->strings)
#define obj_coff_keep_strings(bfd) (coff_data (bfd)->keep_strings)
#define obj_coff_sym_hashes(bfd) (coff_data (bfd)->sym_hashes)
d47 1
a47 2

#define obj_coff_local_toc_table(bfd) (coff_data(bfd)->local_toc_sym_map)
d53 1
a53 1
  struct   coff_symbol_struct *symbols;	/* symtab for input bfd */
d61 1
a61 1
  /* These are only valid once writing has begun */
d77 1
a77 1
  PTR external_syms;
d89 1
a89 1
  /* is this a PE format coff file */
d94 1
a94 1
  /* used by the pe linker for PowerPC */
d100 1
a100 1
  PTR line_info;
d102 2
a103 2
  /* A place to stash dwarf2 info for this bfd. */
  PTR dwarf2_find_line_info;
d114 1
a114 1
/* Tdata for pe image files. */
d121 1
a121 1
  bfd_boolean (*in_reloc_p) PARAMS((bfd *, reloc_howto_type *));
d178 1
a178 1
 * macro is only ever applied to an asymbol.  */
d202 1
a202 1
  PTR stab_info;
d204 1
a204 1
  PTR tdata;
d297 1
a297 1
    (bfd_boolean (*) PARAMS ((struct bfd_link_hash_entry *, PTR))) (func), \
d306 1
a306 1
  PARAMS ((bfd *));
d308 1
a308 1
  PARAMS ((bfd *, int));
d310 1
a310 1
  PARAMS ((bfd *));
d312 1
a312 1
  PARAMS ((bfd *, asymbol **));
d314 1
a314 1
  PARAMS ((bfd *));
d316 1
a316 1
  PARAMS ((bfd *, asymbol *));
d318 1
a318 1
  PARAMS ((bfd *, int *));
d320 1
a320 1
  PARAMS ((bfd *));
d322 1
a322 1
  PARAMS ((bfd *));
d324 1
a324 1
  PARAMS ((bfd *));
d326 1
a326 1
  PARAMS ((bfd *, asymbol *));
d328 1
a328 1
  PARAMS ((bfd *, char *));
d330 1
a330 1
  PARAMS ((bfd *));
d332 1
a332 1
  PARAMS ((bfd *));
d334 1
a334 1
  PARAMS ((bfd *));
d336 1
a336 1
  PARAMS ((bfd *));
d338 1
a338 1
  PARAMS ((bfd *, sec_ptr));
d340 1
a340 1
  PARAMS ((bfd *));
d342 1
a342 1
  PARAMS ((bfd *, PTR filep, asymbol *, bfd_print_symbol_type));
d344 1
a344 1
  PARAMS ((bfd *, asymbol *, symbol_info *ret));
d346 1
a346 1
  PARAMS ((bfd *, const char *));
d348 1
a348 1
  PARAMS ((bfd *, PTR, unsigned long));
d350 2
a351 2
  PARAMS ((bfd *, asection *, asymbol **, bfd_vma, const char **,
	   const char **, unsigned int *));
d353 1
a353 1
  PARAMS ((bfd *, bfd_boolean));
d355 1
a355 1
  PARAMS ((bfd *, asection *, struct bfd_link_info *, bfd_boolean *));
d357 2
a358 2
  PARAMS ((bfd *, struct bfd_link_info *, struct bfd_link_order *,
	   bfd_byte *, bfd_boolean, asymbol **));
d360 1
a360 1
   PARAMS ((arelent *, struct bfd_link_info *, asection *));
d362 1
a362 1
  PARAMS ((bfd *, unsigned int, asection *, bfd_vma));
d537 1
a537 1
  PARAMS ((struct bfd_hash_entry *, struct bfd_hash_table *, const char *));
d539 4
a542 4
  PARAMS ((struct coff_link_hash_table *, bfd *,
	   struct bfd_hash_entry *(*) (struct bfd_hash_entry *,
				       struct bfd_hash_table *,
				       const char *)));
d544 1
a544 1
  PARAMS ((bfd *));
d546 1
a546 1
  PARAMS ((bfd *, const struct internal_syment *, char *));
d548 1
a548 1
  PARAMS ((bfd *, struct bfd_link_info *));
d550 1
a550 1
  PARAMS ((bfd *, struct bfd_link_info *));
d552 2
a553 2
  PARAMS ((bfd *, asection *, bfd_boolean, bfd_byte *, bfd_boolean,
	   struct internal_reloc *));
d555 2
a556 3
  PARAMS ((bfd *, struct bfd_link_info *, bfd *, asection *, bfd_byte *,
	   struct internal_reloc *, struct internal_syment *, asection **));

d558 1
a558 1
  PARAMS ((struct bfd_hash_entry *, struct bfd_hash_table *, const char *));
d560 1
a560 1
  PARAMS ((struct coff_link_hash_entry *, PTR));
d562 1
a562 1
  PARAMS ((struct coff_link_hash_entry *, PTR));
d564 1
a564 1
  PARAMS ((struct coff_final_link_info *, bfd *));
d566 2
a567 2
  PARAMS ((bfd *, struct coff_final_link_info *, asection *,
	   struct bfd_link_order *));
d576 1
a576 1
  PARAMS ((bfd *));
d578 1
a578 1
  PARAMS ((bfd *, asymbol **));
d580 1
a580 1
  PARAMS ((bfd *));
d582 1
a582 1
  PARAMS ((bfd *, arelent **, asymbol **));
d584 1
a584 1
  PARAMS ((bfd *));
d586 1
a586 1
  PARAMS ((struct bfd_link_hash_table *));
d588 1
a588 1
  PARAMS ((bfd *, struct bfd_link_info *));
d590 1
a590 1
  PARAMS ((bfd *, struct bfd_link_info *));
d592 2
a593 2
  PARAMS ((bfd *, struct bfd_link_info *, bfd *, asection *, bfd_byte *,
	   struct internal_reloc *, struct internal_syment *, asection **));
d599 1
a599 1
  PARAMS ((struct bfd_link_info *));
d601 1
a601 1
  PARAMS ((bfd *, struct bfd_link_info *));
d675 1
a675 1
    PARAMS ((bfd *, PTR, int, int, int, int, PTR));
d678 1
a678 1
    PARAMS ((bfd *, PTR, PTR));
d681 1
a681 1
    PARAMS ((bfd *, PTR, PTR));
d684 1
a684 1
    PARAMS ((bfd *, PTR, int, int, int, int, PTR));
d687 1
a687 1
    PARAMS ((bfd *, PTR, PTR));
d690 1
a690 1
    PARAMS ((bfd *, PTR, PTR));
d693 1
a693 1
    PARAMS ((bfd *, PTR, PTR));
d696 1
a696 1
    PARAMS ((bfd *, PTR, PTR));
d699 1
a699 1
    PARAMS ((bfd *, PTR, PTR));
d702 1
a702 1
    PARAMS ((bfd *, PTR, PTR));
d719 1
a719 1
    PARAMS ((bfd *, PTR, PTR));
d722 1
a722 1
    PARAMS ((bfd *, PTR, PTR));
d725 1
a725 1
    PARAMS ((bfd *, PTR, PTR));
d728 1
a728 1
    PARAMS ((bfd *abfd, PTR, PTR));
d731 1
a731 1
    PARAMS ((bfd *, PTR));
d734 1
a734 1
    PARAMS ((bfd *, PTR));
d736 2
a737 2
  PTR (*_bfd_coff_mkobject_hook)
    PARAMS ((bfd *, PTR, PTR));
d740 1
a740 1
    PARAMS ((bfd *, PTR, const char *, asection *, flagword *));
d743 1
a743 1
    PARAMS ((bfd *, asection *, PTR));
d746 1
a746 1
    PARAMS ((bfd *));
d749 1
a749 1
    PARAMS ((bfd *, struct internal_syment *));
d752 2
a753 2
    PARAMS ((bfd *, combined_entry_type *, combined_entry_type *,
            unsigned int, combined_entry_type *));
d756 2
a757 2
    PARAMS ((bfd *, FILE *, combined_entry_type *, combined_entry_type *,
            combined_entry_type *, unsigned int));
d760 2
a761 2
    PARAMS ((bfd *, struct bfd_link_info *, struct bfd_link_order *, arelent *,
           bfd_byte *, unsigned int *, unsigned int *));
d764 2
a765 2
    PARAMS ((bfd *, asection *, arelent *, unsigned int,
            struct bfd_link_info *));
d768 1
a768 1
    PARAMS ((bfd *, struct internal_syment *));
d771 1
a771 1
    PARAMS ((bfd *));
d774 1
a774 1
    PARAMS ((bfd *, struct bfd_link_info *));
d777 2
a778 2
    PARAMS ((bfd *, struct bfd_link_info *, bfd *, asection *, bfd_byte *,
            struct internal_reloc *, struct internal_syment *, asection **));
d781 1
a781 1
    PARAMS ((bfd *, asection *, struct internal_reloc *,
d783 1
a783 1
            bfd_vma *));
d786 2
a787 2
    PARAMS ((bfd *, struct bfd_link_info *, bfd *, asection *,
            struct internal_reloc *, bfd_boolean *));
d790 1
a790 1
    PARAMS ((struct bfd_link_info *, bfd *, const char *, flagword,
d792 1
a792 1
            struct bfd_link_hash_entry **));
d795 1
a795 1
    PARAMS ((bfd *, struct coff_final_link_info *));
d798 1
a798 1
    PARAMS ((bfd *, struct coff_final_link_info *));
d928 1
a928 1
  ((coff_backend_info (a)->_bfd_coff_link_output_has_begun) (a,p))
d930 1
a930 1
  ((coff_backend_info (a)->_bfd_coff_final_link_postscript) (a,p))
@


1.37
log
@update copyright dates
@
text
@d369 1
a369 1
#define STRING_SIZE_SIZE (4)
@


1.36
log
@bfd/

2004-07-21  H.J. Lu  <hongjiu.lu@@intel.com>

	* aout-adobe.c (aout_32_section_already_linked): Defined.
	* aout-target.h (MY_section_already_linked): Likewise.
	* aout-tic30.c (MY_section_already_linked): Likewise.
	* binary.c (binary_section_already_linked): Likewise.
	* bout.c (b_out_section_already_linked): Likewise.
	* coff-alpha.c (_bfd_ecoff_section_already_linked): Likewise.
	* coff-mips.c (_bfd_ecoff_section_already_linked): Likewise.
	* coffcode.h (coff_section_already_linked): Likewise.
	* i386msdos.c (msdos_section_already_linked): Likewise.
	* i386os9k.c (os9k_section_already_linked): Likewise.
	* ieee.c (ieee_section_already_linked): Likewise.
	* ihex.c (ihex_section_already_linked): Likewise.
	* mach-o.c (bfd_mach_o_section_already_linked): Likewise.
	* mmo.c (mmo_section_already_linked): Likewise.
	* nlm-target.h (nlm_section_already_linked): Likewise.
	* oasys.c (oasys_section_already_linked): Likewise.
	* pef.c (bfd_pef_section_already_linked): Likewise.
	* ppcboot.c (ppcboot_section_already_linked): Likewise.
	* som.c (som_bfd_discard_group): Likewise.
	* srec.c (srec_section_already_linked): Likewise.
	* tekhex.c (tekhex_section_already_linked): Likewise.
	* versados.c (versados_section_already_linked): Likewise.
	* vms.c (vms_section_already_linked): Likewise.
	* coff-target.h (_bfd_xcoff_section_already_linked): Likewise.
	* xsym.c (bfd_sym_section_already_linked): Likewise.

	* bfd-in.h (bfd_section_already_linked_table_init): New.
	(bfd_section_already_linked_table_free): Likewise.

	* coff-rs6000.c (rs6000coff_vec): Add
	_bfd_generic_section_already_linked.
	(pmac_xcoff_vec): Likewise.
	* coff64-rs6000.c (rs6000coff64_vec): Likewise.
	(aix5coff64_vec): Likewise.

	* elf-bfd.h (_bfd_elf_section_already_linked): New prototype.
	* elflink.c (_bfd_elf_section_already_linked): New function.

	* elfxx-target.h (bfd_elfNN_section_already_linked): Defined.

	* libbfd-in.h (_bfd_nolink_section_already_linked): Defined.
	(_bfd_generic_section_already_linked): New.
	(bfd_section_already_linked_hash_entry): Likewise.
	(bfd_section_already_linked): Likewise.
	(bfd_section_already_linked_table_lookup): Likewise.
	(bfd_section_already_linked_table_insert): Likewise.

	* linker.c (bfd_section_already_linked): New.
	(_bfd_section_already_linked_table): Likewise.
	(bfd_section_already_linked_table_lookup): Likewise.
	(bfd_section_already_linked_table_insert): Likewise.
	(already_linked_newfunc): Likewise.
	(bfd_section_already_linked_table_init): Likewise.
	(bfd_section_already_linked_table_free): Likewise.
	(_bfd_generic_section_already_linked): Likewise.

	* section.c (bfd_section): Remove comdat.
	(bfd_comdat_info): Moved to ...
	* bfd-in.h (coff_comdat_info): Here.
	(bfd_coff_get_comdat_section): New.
	* coffgen.c (bfd_coff_get_comdat_section): Likewise.
	* libcoff-in.h (coff_section_tdata): Add comdat.
	* coffcode.h (handle_COMDAT): Updated.
	* cofflink.c (coff_link_add_symbols): Likewise.
	* ecoff.c (bfd_debug_section): Likewise.

	* targets.c (bfd_target): Add _section_already_linked.
	(BFD_JUMP_TABLE_LINK): Updated.

	* bfd-in2.h: Regenerated.
	* libbfd.h: Likewise.
	* libcoff.h: Likewise.

binutils/

2004-07-21  H.J. Lu  <hongjiu.lu@@intel.com>

	* objcopy.c (filter_symbols): Use bfd_coff_get_comdat_section
	to access comdat.
	* objdump.c (dump_section_header): Likewise.

ld/

2004-07-21  H.J. Lu  <hongjiu.lu@@intel.com>

	* ldlang.c (already_linked_hash_entry): Removed.
	(already_linked): Likewise.
	(already_linked_table): Likewise.
	(section_already_linked): Call bfd_section_already_linked.
	(lang_process): Replace already_linked_table_init with
	bfd_section_already_linked_table_init and check return. Replace
	already_linked_table_free with bfd_section_already_linked_table_free.
@
text
@d7 1
a7 1
   2000, 2001, 2002, 2003
@


1.35
log
@	* bfd-in.h (struct stab_info): Move from stabs.c.
	* stabs.c (struct stab_link_includes_table): Delete.
	(stab_link_includes_lookup): Delete.
	(_bfd_write_section_stabs, _bfd_write_stab_strings): Remove one
	level of indirection from sinfo parm.
	(_bfd_link_section_stabs): Likewise.  Set SEC_LINKER_CREATED on
	stabstr section.  Adjust hash table accesses.
	* coff-ppc.c (ppc_bfd_coff_final_link): Do include rawsize in contents
	alloc.  Adjust stab_info test.
	* cofflink.c (_bfd_coff_link_hash_table_init): Clear stab_info.
	(_bfd_coff_final_link): Adjust stab_info test.
	(_bfd_coff_link_input_bfd): Ignore SEC_LINKER_CREATED sections.
	* elf-bfd.h (struct elf_link_hash_table): Include struct stab_info
	in place.
	* libcoff-in.h (struct coff_link_hash_table): Likewise.
	* elf.c (_bfd_elf_link_hash_table_init): Clear stab_info.
	* elflink.c (bfd_elf_final_link): Don't attempt to link linker created
	stabstr section.  Adjust stab_info test.
	* libbfd-in.h (_bfd_link_section_stabs, _bfd_write_section_stabs)
	(_bfd_write_stab_strings): Adjust prototypes.
	* libbfd.h: Regenerate.
	* libcoff.h: Regenerate.
	* bfd-in2.h: Regenerate.
@
text
@d201 2
@


1.34
log
@2003-10-19  Andrew Cagney  <cagney@@redhat.com>

	* targets.c: Replace "struct sec" with "struct bfd_section"
	* syms.c, sparclynx.c, section.c, opncls.c: Ditto.
	* libcoff-in.h, libbfd-in.h, elfxx-target.h: Ditto.
	* elf.c, coffgen.c, bfd.c, bfd-in.h, aoutf1.h: Ditto.
	* aout-tic30.c, aout-target.h:
	* bfd-in2.h, libcoff.h, libbfd.h: Regenerate.

Index: binutils/ChangeLog
2003-10-19  Andrew Cagney  <cagney@@redhat.com>

	* coffgrok.h (coff_section): Replace 'struct sec" with "struct
	bfd_section".

Index: gdb/ChangeLog
2003-10-19  Andrew Cagney  <cagney@@redhat.com>

	* symtab.c: Replace "struct sec" with "struct bfd_section".
	* objfiles.c, linespec.c, blockframe.c, block.c: Ditto.

Index: ld/ChangeLog
2003-10-19  Andrew Cagney  <cagney@@redhat.com>

	* pe-dll.c: Replace "struct sec" with "struct bfd_section".

Index: sim/common/ChangeLog
2003-10-19  Andrew Cagney  <cagney@@redhat.com>

	* sim-base.h: Replace "struct sec" with "struct bfd_section".
@
text
@d283 1
a283 1
  PTR stab_info;
@


1.34.8.1
log
@Merge mainline to intercu branch - 2004-09-15
@
text
@a200 2
  /* Optional information about a COMDAT entry; NULL if not COMDAT. */
  struct coff_comdat_info *comdat;
d283 1
a283 1
  struct stab_info stab_info;
@


1.33
log
@Index: doc/ChangeLog
2003-10-15  Andrew Cagney  <cagney@@redhat.com>

	* bfdint.texi (BFD target vector symbols): Rename _get_symtab to
	_canonicalize_symtab.

2003-10-15  Andrew Cagney  <cagney@@redhat.com>

	* targets.c (BFD_JUMP_TABLE_SYMBOLS): Replace NAME##_get_symtab
	with NAME##_canonicalize_symtab.
	* libcoff-in.h (coff_canonicalize_symtab): Update.
	* xsym.h (bfd_sym_canonicalize_symtab): Update.
	* elf-bfd.h (_bfd_elf_canonicalize_symtab): Update.
	* coffgen.c (coff_canonicalize_symtab): Update.
	* libbfd-in.h (_bfd_nosymbols_canonicalize_symtab): Update.
	* libnlm.h (nlmNAME(canonicalize_symtab)): Update.
	* ieee.c (ieee_vec): Update comment.
	* libecoff.h (_bfd_ecoff_canonicalize_symtab): Update.
	* mmo.c (mmo_canonicalize_symtab): Update.
	* nlm-target.h (nlm_canonicalize_symtab): Update.
	* nlmcode.h (nlm_canonicalize_symtab): Update.
	* i386msdos.c (msdos_canonicalize_symtab): Update.
	* hp300hpux.c (MY (canonicalize_symtab)): Update.
	* oasys.c (oasys_canonicalize_symtab): Update.
	* som.c (som_canonicalize_symtab): Update.
	* pef.c (bfd_pef_canonicalize_symtab): Update.
	* nlmcode.h (nlm_canonicalize_symtab): Update.
	* xsym.c (bfd_sym_canonicalize_symtab): Update.
	* vms.c (vms_canonicalize_symtab): Update.
	* versados.c (versados_canonicalize_symtab): Update.
	* mach-o.c (bfd_mach_o_canonicalize_symtab): Update.
	* ieee.c (ieee_canonicalize_symtab): Update.
	* pdp11.c (NAME(aout,canonicalize_symtab)): Update.
	* reloc.c: Update comment.
	* libaout.h (NAME(aout,canonicalize_symtab)): Update.
	* coff64-rs6000.c (aix5coff64_vec): Update.
	* coff64-rs6000.c (bfd_xcoff_aix5_backend_data): Update.
	* coff-rs6000.c (rs6000coff_vec, pmac_xcoff_vec): Update.
	* aoutx.h (NAME(aout,canonicalize_symtab)): Update.
	* elfxx-target.h (bfd_elfNN_canonicalize_symtab): Update.
	* hp300hpux.c (MY_canonicalize_symtab): Update.
	* ecoff.c (_bfd_ecoff_canonicalize_symtab): Update.
	* aout-tic30.c (MY_canonicalize_symtab): Update.
	* aout-target.h (MY_canonicalize_symtab): Update.
	* ppcboot.c (ppcboot_canonicalize_symtab): Update.
	* elf.c (_bfd_elf_canonicalize_symtab): Update.
	* elfcode.h (elf_canonicalize_symtab): Update.
	* ihex.c (ihex_canonicalize_symtab): Update.
	* tekhex.c (tekhex_canonicalize_symtab): Update.
	* binary.c (binary_canonicalize_symtab): Update.
	* srec.c (srec_canonicalize_symtab): Update.
@
text
@d308 1
a308 1
extern struct sec *coff_section_from_bfd_index
@


1.32
log
@Missed copyright update in last commit.
@
text
@d312 1
a312 1
extern long coff_get_symtab
@


1.31
log
@Correct spelling of "relocatable".
@
text
@d7 1
a7 1
   2000, 2001, 2002
@


1.30
log
@Change embedded documentation to use consistent indentation and to split up
long lines.  Change informal style of description for functions lacking real
documentation.
@
text
@d441 1
a441 1
   a relocateable link.  */
d468 1
a468 1
  /* When doing a relocateable link, an array of information kept for
@


1.29
log
@s/boolean/bfd_boolean/ s/true/TRUE/ s/false/FALSE/.  Simplify
comparisons of bfd_boolean vars with TRUE/FALSE.  Formatting.
@
text
@d869 2
a870 1
  ((coff_backend_info (abfd)->_bfd_coff_mkobject_hook) (abfd, filehdr, aouthdr))
d895 2
a896 1
#define bfd_coff_reloc16_extra_cases(abfd, link_info, link_order, reloc, data, src_ptr, dst_ptr)\
d924 2
a925 1
#define bfd_coff_link_add_one_symbol(info,abfd,name,flags,section,value,string,cp,coll,hashp)\
@


1.28
log
@	* aoutx.h (NAME(aout,swap_ext_reloc_in)): Cast bytes->r_index to
	unsigned int.  Cast RELOC_BASE10, RELOC_BASE13 and RELOC_BASE22 to
	unsigned int.
	(NAME(aout,final_link)): Cast enum used in assignment.
	(aout_link_write_symbols): Cast enums in comparisons, int values to
	boolean, enums in assignments to int.
	(aout_link_input_section_std): Cast rel->r_index to unsigned int.
	(aout_link_input_section_ext): Likewise.  Cast enums used in comparisons
	with unsigned ints.
	(aout_link_reloc_link_order): Cast enum to int in assignment.
	* archive.c (_bfd_generic_read_ar_hdr_mag): Cast result of memchr
	calls to char *.
	* bfd-in.h (bfd_set_section_vma): Cast enum true to unsigned int in
	assignment.
	* bfd-in2.h (bfd_set_section_vma): Likewise.
	* bfd.c (bfd_record_phdr): Cast enums in assignments.
	* binary.c (bfd_alloc): Cast enum to long.
	* coffgen.c (_bfd_coff_is_local_label_name): Cast return to boolean.
	* dwarf2.c (read_abbrevs): Add casts to enum types.
	(read_attribute_value): Likewise.
	(arange_add): Cast result of bfd_zalloc call.
	(comp_unit_contains_address): Return true and false.
	(comp_unit_find_nearest_line): Cast return to boolean.
	* format.c (bfd_check_format_matches, bfd_set_format): Likewise.
	* gen-aout.c: define macro '_' if not defined.
	* libbfd.c (bfd_realloc): Cast malloc and realloc to PTR.
	(bfd_bwrite): Cast bfd_realloc to bfd_byte *.
	(bfd_write_bigendian_4byte_int): Cast return to boolean.
	(bfd_seek): Cast bfd_realloc to bfd_byte *.
	(bfd_generic_is_local_label_name): Cast return to boolean.
	* libcoff.h (_bfd_coff_adjust_symndx): Remove extraneous '\'.
	* linker.c (_bfd_link_hash_newfunc): Cast bfd_hash_allocate result to
	struct bfd_hash_entry *.
	(_bfd_generic_link_hash_newfunc): likewise.
	(_bfd_generic_final_link): Cast enum to unsigned int.
	* merge.c (sec_merge_emit): Cast return to boolean.
	(merge_strings): Add casts to const unsigned char *.
	* reloc.c (bfd_get_reloc_code_name): Cast enums in comparison to int.
	(bfd_generic_get_relocated_section_content): Cast enum to unsigned int.
	* section.c (bfd_section_hash_newfunc): Cast bfd_hash_allocate result to
	struct bfd_hash_entry *.
	(bfd_set_section_content): Add cast to PTR in comparison.
	* simple.c (simple_dummy_warning, simple_dummy_undefined_symbol,
	simple_dummy_reloc_overflow, simple_dummy_reloc_dangerous,
	simple_dummy_unattached_reloc,
	bfd_simple_get_relocated_section_contents): Add K&R declarations and
	function definitions.
	* srec.c (S3Forced): Initialize to false.
	(srec_get_symtab): Cast return value from bfd_alloc to asymbol *.
	* stabs.c (_bfd_link_section_stabs): Cast enum to int in comparisons.
	(_bfd_discard_section_stabs): Likewise.  Also cast return to boolean.
	* syms.c (bfd_is_undefined_symclass): Cast return to boolean.
	(_bfd_stab_section_find_nearest_line): Cast enum to bfd_byte in
	comparisons.
@
text
@d81 2
a82 2
  /* If this is true, the external_syms may not be freed.  */
  boolean keep_syms;
d87 4
a90 4
  /* If this is true, the strings may not be freed.  */
  boolean keep_strings;
  /* If this is true, the strings have been written out already.  */
  boolean strings_written;
d124 1
a124 1
  boolean (*in_reloc_p) PARAMS((bfd *, reloc_howto_type *));
d127 1
a127 1
  boolean force_minimum_alignment;
d139 2
a140 2
  /* True if this is an XCOFF64 file. */
  boolean xcoff64;
d142 2
a143 2
  /* True if a large a.out header should be generated.  */
  boolean full_aouthdr;
d191 2
a192 2
  /* If this is true, the relocs entry may not be freed.  */
  boolean keep_relocs;
d195 2
a196 2
  /* If this is true, the contents entry may not be freed.  */
  boolean keep_contents;
d298 1
a298 1
    (boolean (*) PARAMS ((struct bfd_link_hash_entry *, PTR))) (func),	\
d318 1
a318 1
extern boolean coff_renumber_symbols
d322 1
a322 1
extern boolean coff_write_symbols
d324 1
a324 1
extern boolean coff_write_linenumbers
d330 1
a330 1
extern boolean _bfd_coff_get_external_symbols
d334 1
a334 1
extern boolean _bfd_coff_free_symbols
d346 1
a346 1
extern boolean _bfd_coff_is_local_label_name
d350 1
a350 1
extern boolean coff_find_nearest_line
d354 3
a356 3
  PARAMS ((bfd *, boolean));
extern boolean bfd_coff_reloc16_relax_section
  PARAMS ((bfd *, asection *, struct bfd_link_info *, boolean *));
d359 1
a359 1
	   bfd_byte *, boolean, asymbol **));
d461 1
a461 1
  boolean failed;
d465 1
a465 1
  boolean global_to_static;
d539 1
a539 1
extern boolean _bfd_coff_link_hash_table_init
d548 1
a548 1
extern boolean _bfd_coff_link_add_symbols
d550 1
a550 1
extern boolean _bfd_coff_final_link
d553 1
a553 1
  PARAMS ((bfd *, asection *, boolean, bfd_byte *, boolean,
d555 1
a555 1
extern boolean _bfd_coff_generic_relocate_section
d561 1
a561 1
extern boolean _bfd_coff_write_global_sym
d563 1
a563 1
extern boolean _bfd_coff_write_task_globals
d565 1
a565 1
extern boolean _bfd_coff_link_input_bfd
d567 1
a567 1
extern boolean _bfd_coff_reloc_link_order
d589 1
a589 1
extern boolean _bfd_xcoff_bfd_link_add_symbols
d591 1
a591 1
extern boolean _bfd_xcoff_bfd_final_link
d593 1
a593 1
extern boolean _bfd_ppc_xcoff_relocate_section
d600 1
a600 1
extern boolean ppc_allocate_toc_section
d602 1
a602 1
extern boolean ppc_process_before_allocation
d656 1
a656 1
  boolean done_lineno;
d714 2
a715 2
  boolean _bfd_coff_long_filenames;
  boolean _bfd_coff_long_section_names;
d717 1
a717 1
  boolean _bfd_coff_force_symnames_in_strings;
d732 1
a732 1
  boolean (*_bfd_coff_bad_format_hook)
d735 1
a735 1
  boolean (*_bfd_coff_set_arch_mach_hook)
d741 1
a741 1
  boolean (*_bfd_styp_to_sec_flags_hook)
d747 1
a747 1
  boolean (*_bfd_coff_slurp_symbol_table)
d750 1
a750 1
  boolean (*_bfd_coff_symname_in_debug)
d753 1
a753 1
  boolean (*_bfd_coff_pointerize_aux_hook)
d757 1
a757 1
  boolean (*_bfd_coff_print_aux)
d772 1
a772 1
  boolean (*_bfd_coff_compute_section_file_positions)
d775 1
a775 1
  boolean (*_bfd_coff_start_final_link)
d778 1
a778 1
  boolean (*_bfd_coff_relocate_section)
d787 1
a787 1
  boolean (*_bfd_coff_adjust_symndx)
d789 1
a789 1
            struct internal_reloc *, boolean *));
d791 1
a791 1
  boolean (*_bfd_coff_link_add_one_symbol)
d793 1
a793 1
            asection *, bfd_vma, const char *, boolean, boolean,
d796 1
a796 1
  boolean (*_bfd_coff_link_output_has_begun)
d799 1
a799 1
  boolean (*_bfd_coff_final_link_postscript)
@


1.27
log
@Add QNX Neutrino PowerPC support and common up QNX functions
@
text
@d787 1
a787 1
  boolean (*_bfd_coff_adjust_symndx)\
@


1.27.12.1
log
@Merge drow-cplus-branch to:
  cvs rtag -D 2003-12-14 00:00:00 UTC drow-cplus-merge-20031214 gdb+dejagnu
@
text
@d7 1
a7 1
   2000, 2001, 2002, 2003
d81 2
a82 2
  /* If this is TRUE, the external_syms may not be freed.  */
  bfd_boolean keep_syms;
d87 4
a90 4
  /* If this is TRUE, the strings may not be freed.  */
  bfd_boolean keep_strings;
  /* If this is TRUE, the strings have been written out already.  */
  bfd_boolean strings_written;
d124 1
a124 1
  bfd_boolean (*in_reloc_p) PARAMS((bfd *, reloc_howto_type *));
d127 1
a127 1
  bfd_boolean force_minimum_alignment;
d139 2
a140 2
  /* TRUE if this is an XCOFF64 file. */
  bfd_boolean xcoff64;
d142 2
a143 2
  /* TRUE if a large a.out header should be generated.  */
  bfd_boolean full_aouthdr;
d191 2
a192 2
  /* If this is TRUE, the relocs entry may not be freed.  */
  bfd_boolean keep_relocs;
d195 2
a196 2
  /* If this is TRUE, the contents entry may not be freed.  */
  bfd_boolean keep_contents;
d298 1
a298 1
    (bfd_boolean (*) PARAMS ((struct bfd_link_hash_entry *, PTR))) (func), \
d308 1
a308 1
extern struct bfd_section *coff_section_from_bfd_index
d312 1
a312 1
extern long coff_canonicalize_symtab
d318 1
a318 1
extern bfd_boolean coff_renumber_symbols
d322 1
a322 1
extern bfd_boolean coff_write_symbols
d324 1
a324 1
extern bfd_boolean coff_write_linenumbers
d330 1
a330 1
extern bfd_boolean _bfd_coff_get_external_symbols
d334 1
a334 1
extern bfd_boolean _bfd_coff_free_symbols
d346 1
a346 1
extern bfd_boolean _bfd_coff_is_local_label_name
d350 1
a350 1
extern bfd_boolean coff_find_nearest_line
d354 3
a356 3
  PARAMS ((bfd *, bfd_boolean));
extern bfd_boolean bfd_coff_reloc16_relax_section
  PARAMS ((bfd *, asection *, struct bfd_link_info *, bfd_boolean *));
d359 1
a359 1
	   bfd_byte *, bfd_boolean, asymbol **));
d441 1
a441 1
   a relocatable link.  */
d461 1
a461 1
  bfd_boolean failed;
d465 1
a465 1
  bfd_boolean global_to_static;
d468 1
a468 1
  /* When doing a relocatable link, an array of information kept for
d539 1
a539 1
extern bfd_boolean _bfd_coff_link_hash_table_init
d548 1
a548 1
extern bfd_boolean _bfd_coff_link_add_symbols
d550 1
a550 1
extern bfd_boolean _bfd_coff_final_link
d553 1
a553 1
  PARAMS ((bfd *, asection *, bfd_boolean, bfd_byte *, bfd_boolean,
d555 1
a555 1
extern bfd_boolean _bfd_coff_generic_relocate_section
d561 1
a561 1
extern bfd_boolean _bfd_coff_write_global_sym
d563 1
a563 1
extern bfd_boolean _bfd_coff_write_task_globals
d565 1
a565 1
extern bfd_boolean _bfd_coff_link_input_bfd
d567 1
a567 1
extern bfd_boolean _bfd_coff_reloc_link_order
d589 1
a589 1
extern bfd_boolean _bfd_xcoff_bfd_link_add_symbols
d591 1
a591 1
extern bfd_boolean _bfd_xcoff_bfd_final_link
d593 1
a593 1
extern bfd_boolean _bfd_ppc_xcoff_relocate_section
d600 1
a600 1
extern bfd_boolean ppc_allocate_toc_section
d602 1
a602 1
extern bfd_boolean ppc_process_before_allocation
d656 1
a656 1
  bfd_boolean done_lineno;
d714 2
a715 2
  bfd_boolean _bfd_coff_long_filenames;
  bfd_boolean _bfd_coff_long_section_names;
d717 1
a717 1
  bfd_boolean _bfd_coff_force_symnames_in_strings;
d732 1
a732 1
  bfd_boolean (*_bfd_coff_bad_format_hook)
d735 1
a735 1
  bfd_boolean (*_bfd_coff_set_arch_mach_hook)
d741 1
a741 1
  bfd_boolean (*_bfd_styp_to_sec_flags_hook)
d747 1
a747 1
  bfd_boolean (*_bfd_coff_slurp_symbol_table)
d750 1
a750 1
  bfd_boolean (*_bfd_coff_symname_in_debug)
d753 1
a753 1
  bfd_boolean (*_bfd_coff_pointerize_aux_hook)
d757 1
a757 1
  bfd_boolean (*_bfd_coff_print_aux)
d772 1
a772 1
  bfd_boolean (*_bfd_coff_compute_section_file_positions)
d775 1
a775 1
  bfd_boolean (*_bfd_coff_start_final_link)
d778 1
a778 1
  bfd_boolean (*_bfd_coff_relocate_section)
d787 1
a787 1
  bfd_boolean (*_bfd_coff_adjust_symndx)
d789 1
a789 1
            struct internal_reloc *, bfd_boolean *));
d791 1
a791 1
  bfd_boolean (*_bfd_coff_link_add_one_symbol)
d793 1
a793 1
            asection *, bfd_vma, const char *, bfd_boolean, bfd_boolean,
d796 1
a796 1
  bfd_boolean (*_bfd_coff_link_output_has_begun)
d799 1
a799 1
  bfd_boolean (*_bfd_coff_final_link_postscript)
d869 1
a869 2
  ((coff_backend_info (abfd)->_bfd_coff_mkobject_hook)\
   (abfd, filehdr, aouthdr))
d894 1
a894 2
#define bfd_coff_reloc16_extra_cases(abfd, link_info, link_order,\
                                     reloc, data, src_ptr, dst_ptr)\
d922 1
a922 2
#define bfd_coff_link_add_one_symbol(info, abfd, name, flags, section,\
                                     value, string, cp, coll, hashp)\
@


1.27.10.1
log
@2002-10-25  David Carlton  <carlton@@math.stanford.edu>

	* symtab.c (lookup_symbol_aux_block): New function.
	(lookup_symbol_aux_local): Call lookup_symbol_aux_block.
	(lookup_symbol_aux): Ditto.

	* Merge from mainline; tag is carlton_dictionary-20021025-merge.

2002-10-25  David Carlton  <carlton@@math.stanford.edu>

	* cp-support.c: Add comment to demangled name pitfalls.
	* symtab.c (lookup_transparent_type): Add FIXME comment at
	beginning.

2002-10-23  David Carlton  <carlton@@math.stanford.edu>

	* symtab.c: Delete cplusplus_hint.
	Delete prototype for find_template_name_end.
	* dwarf2read.c (scan_partial_symbols): Add in a gdb_assert from a
	later version of my namespace_minimal patch.

2002-10-25  David Carlton  <carlton@@math.stanford.edu>

	* gdb.c++/namespace.exp: Change all of the setup_xfail tests that
	I added into setup_kfails.
@
text
@d787 1
a787 1
  boolean (*_bfd_coff_adjust_symndx)
@


1.27.10.2
log
@2002-12-23  David Carlton  <carlton@@math.stanford.edu>

	* Merge from mainline; tag is carlton_dictionary-20021223-merge.
@
text
@d81 2
a82 2
  /* If this is TRUE, the external_syms may not be freed.  */
  bfd_boolean keep_syms;
d87 4
a90 4
  /* If this is TRUE, the strings may not be freed.  */
  bfd_boolean keep_strings;
  /* If this is TRUE, the strings have been written out already.  */
  bfd_boolean strings_written;
d124 1
a124 1
  bfd_boolean (*in_reloc_p) PARAMS((bfd *, reloc_howto_type *));
d127 1
a127 1
  bfd_boolean force_minimum_alignment;
d139 2
a140 2
  /* TRUE if this is an XCOFF64 file. */
  bfd_boolean xcoff64;
d142 2
a143 2
  /* TRUE if a large a.out header should be generated.  */
  bfd_boolean full_aouthdr;
d191 2
a192 2
  /* If this is TRUE, the relocs entry may not be freed.  */
  bfd_boolean keep_relocs;
d195 2
a196 2
  /* If this is TRUE, the contents entry may not be freed.  */
  bfd_boolean keep_contents;
d298 1
a298 1
    (bfd_boolean (*) PARAMS ((struct bfd_link_hash_entry *, PTR))) (func), \
d318 1
a318 1
extern bfd_boolean coff_renumber_symbols
d322 1
a322 1
extern bfd_boolean coff_write_symbols
d324 1
a324 1
extern bfd_boolean coff_write_linenumbers
d330 1
a330 1
extern bfd_boolean _bfd_coff_get_external_symbols
d334 1
a334 1
extern bfd_boolean _bfd_coff_free_symbols
d346 1
a346 1
extern bfd_boolean _bfd_coff_is_local_label_name
d350 1
a350 1
extern bfd_boolean coff_find_nearest_line
d354 3
a356 3
  PARAMS ((bfd *, bfd_boolean));
extern bfd_boolean bfd_coff_reloc16_relax_section
  PARAMS ((bfd *, asection *, struct bfd_link_info *, bfd_boolean *));
d359 1
a359 1
	   bfd_byte *, bfd_boolean, asymbol **));
d461 1
a461 1
  bfd_boolean failed;
d465 1
a465 1
  bfd_boolean global_to_static;
d539 1
a539 1
extern bfd_boolean _bfd_coff_link_hash_table_init
d548 1
a548 1
extern bfd_boolean _bfd_coff_link_add_symbols
d550 1
a550 1
extern bfd_boolean _bfd_coff_final_link
d553 1
a553 1
  PARAMS ((bfd *, asection *, bfd_boolean, bfd_byte *, bfd_boolean,
d555 1
a555 1
extern bfd_boolean _bfd_coff_generic_relocate_section
d561 1
a561 1
extern bfd_boolean _bfd_coff_write_global_sym
d563 1
a563 1
extern bfd_boolean _bfd_coff_write_task_globals
d565 1
a565 1
extern bfd_boolean _bfd_coff_link_input_bfd
d567 1
a567 1
extern bfd_boolean _bfd_coff_reloc_link_order
d589 1
a589 1
extern bfd_boolean _bfd_xcoff_bfd_link_add_symbols
d591 1
a591 1
extern bfd_boolean _bfd_xcoff_bfd_final_link
d593 1
a593 1
extern bfd_boolean _bfd_ppc_xcoff_relocate_section
d600 1
a600 1
extern bfd_boolean ppc_allocate_toc_section
d602 1
a602 1
extern bfd_boolean ppc_process_before_allocation
d656 1
a656 1
  bfd_boolean done_lineno;
d714 2
a715 2
  bfd_boolean _bfd_coff_long_filenames;
  bfd_boolean _bfd_coff_long_section_names;
d717 1
a717 1
  bfd_boolean _bfd_coff_force_symnames_in_strings;
d732 1
a732 1
  bfd_boolean (*_bfd_coff_bad_format_hook)
d735 1
a735 1
  bfd_boolean (*_bfd_coff_set_arch_mach_hook)
d741 1
a741 1
  bfd_boolean (*_bfd_styp_to_sec_flags_hook)
d747 1
a747 1
  bfd_boolean (*_bfd_coff_slurp_symbol_table)
d750 1
a750 1
  bfd_boolean (*_bfd_coff_symname_in_debug)
d753 1
a753 1
  bfd_boolean (*_bfd_coff_pointerize_aux_hook)
d757 1
a757 1
  bfd_boolean (*_bfd_coff_print_aux)
d772 1
a772 1
  bfd_boolean (*_bfd_coff_compute_section_file_positions)
d775 1
a775 1
  bfd_boolean (*_bfd_coff_start_final_link)
d778 1
a778 1
  bfd_boolean (*_bfd_coff_relocate_section)
d787 1
a787 1
  bfd_boolean (*_bfd_coff_adjust_symndx)
d789 1
a789 1
            struct internal_reloc *, bfd_boolean *));
d791 1
a791 1
  bfd_boolean (*_bfd_coff_link_add_one_symbol)
d793 1
a793 1
            asection *, bfd_vma, const char *, bfd_boolean, bfd_boolean,
d796 1
a796 1
  bfd_boolean (*_bfd_coff_link_output_has_begun)
d799 1
a799 1
  bfd_boolean (*_bfd_coff_final_link_postscript)
@


1.27.10.3
log
@2003-03-05  David Carlton  <carlton@@math.stanford.edu>

	* Merge with mainline.  Tag is carlton_dictionary-20030305-merge.
@
text
@d869 1
a869 2
  ((coff_backend_info (abfd)->_bfd_coff_mkobject_hook)\
   (abfd, filehdr, aouthdr))
d894 1
a894 2
#define bfd_coff_reloc16_extra_cases(abfd, link_info, link_order,\
                                     reloc, data, src_ptr, dst_ptr)\
d922 1
a922 2
#define bfd_coff_link_add_one_symbol(info, abfd, name, flags, section,\
                                     value, string, cp, coll, hashp)\
@


1.27.10.4
log
@2003-06-27  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton_dictionary-20030627-merge.
@
text
@d7 1
a7 1
   2000, 2001, 2002, 2003
d441 1
a441 1
   a relocatable link.  */
d468 1
a468 1
  /* When doing a relocatable link, an array of information kept for
@


1.27.10.5
log
@2003-11-11  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton-dictionary-20031111-merge.
@
text
@d308 1
a308 1
extern struct bfd_section *coff_section_from_bfd_index
d312 1
a312 1
extern long coff_canonicalize_symtab
@


1.26
log
@Rename function arguments to avoid shadowing global symbols of the same name.
@
text
@d2 1
a2 1
   generated from "proto.str			chew".
@


1.25
log
@	* bfd-in.h: Remove "taken from the source" comment.
	* libbfd-in.h: Likewise.
	* libcoff-in.h: Likewise.
	* bfd-in2.h: Regenerate.
	* libbfd.h: Regenerate.
	* libcoff.h: Regenerate.

	* elf.c (bfd_elf_discard_group): Return true.
	* elf-bfd.h (bfd_elf_discard_group): Declare.
	* bfd-in.h (bfd_elf_discard_group): Don't declare here.
	* section.c (bfd_discard_group): Rename to bfd_generic_discard_group.
	* bfd.c (bfd_discard_group): Define.
	* targets.c (struct bfd_target): Add _bfd_discard_group.
	(BFD_JUMP_TABLE_LINK): Here too.
	* libbfd-in.h (_bfd_nolink_bfd_discard_group): Define.
	* aout-adobe.c (aout_32_bfd_discard_group): Define.
	* aout-target.h (MY_bfd_discard_group): Define.
	* aout-tic30.c (MY_bfd_discard_group): Define.
	* binary.c (binary_bfd_discard_group): Define.
	* bout.c (b_out_bfd_discard_group): Define.
	* coff-alpha.c (_bfd_ecoff_bfd_discard_group): Define.
	* coffcode.h (coff_bfd_discard_group): Define.
	* coff-mips.c (_bfd_ecoff_bfd_discard_group): Define.
	* elfxx-target.h (bfd_elfNN_bfd_discard_group): Define.
	* i386msdos.c (msdos_bfd_discard_group): Define.
	* i386os9k.c (os9k_bfd_discard_group): Define.
	* ieee.c (ieee_bfd_discard_group): Define.
	* ihex.c (ihex_bfd_discard_group): Define.
	* mmo.c (mmo_bfd_discard_group): Define.
	* nlm-target.h (nlm_bfd_discard_group): Define.
	* oasys.c (oasys_bfd_discard_group): Define.
	* ppcboot.c (ppcboot_bfd_discard_group): Define.
	* som.c (som_bfd_discard_group): Define.
	* srec.c (srec_bfd_discard_group): Define.
	* tekhex.c (tekhex_bfd_discard_group): Define.
	* versados.c (versados_bfd_discard_group): Define.
	* vms.c (vms_bfd_discard_group): Define.
	* xcoff-target.h (_bfd_xcoff_bfd_discard_group): Define.
	* coff64-rs6000.c (rs6000coff64_vec): Update initialiser.
	(aix5coff64_vec): Likewise.
	* coff-rs6000.c (rs6000coff_vec, pmac_xcoff_vec): Likewise.
@
text
@d2 1
a2 1
   generated from "libcoff-in.h" and "coffcode.h".
@


1.25.2.1
log
@Merge from mainline.
@
text
@d787 1
a787 1
  boolean (*_bfd_coff_adjust_symndx)
@


1.24
log
@2002-04-04  Daniel Jacobowitz  <drow@@mvista.com>

	* aout-adobe.c (aout_32_bfd_link_hash_table_free): Define.
	* aout-target.h (MY_bfd_link_hash_table_free): Conditionally
	define.
	* aout-tic30.c (MY_bfd_link_hash_table_free): Likewise.
	* bfd.c (bfd_link_hash_table_free): Define.
	* binary.c (binary_bfd_link_hash_table_free): Define.
	* bout.c (b_out_bfd_link_hash_table_free): Define.
	* coff-rs6000.c (rs6000coff_vec): Include
	_bfd_generic_link_hash_table_free.
	(pmac_xcoff_vec): Likewise.
	* coff64-rs6000.c (rs6000coff64_vec): Likewise.
	(aix5coff64_vec): Likewise.
	* coffcode.h (coff_bfd_link_hash_table_free): Conditionally define.
	* elf-m10300.c (elf32_mn10300_link_hash_table_free): New function.
	(bfd_elf32_bfd_link_hash_table_free): Define.
	* elf32-hppa.c (elf32_hppa_link_hash_table_free): New function.
	(bfd_elf32_bfd_link_hash_table_free): Define.
	* elfxx-target.h (bfd_elfNN_bfd_link_hash_table_free): Conditionally
	define.
	* i386msdos.c (msdos_bfd_link_hash_table_free): Define.
	* i386os9k.c (os9k_bfd_link_hash_table_free): Define.
	* ieee.c (ieee_bfd_link_hash_table_free): Define.
	* ihex.c (ihex_bfd_link_hash_table_free): Define.
	* libbfd-in.h (_bfd_nolink_bfd_link_hash_table_free): Define.
	(_bfd_generic_link_hash_table_free): Add prototype.
	* libcoff-in.h (_bfd_xcoff_bfd_link_hash_table_free): Add prototype.
	* libecoff.h (_bfd_ecoff_bfd_link_hash_table_free): Define.
	* linker.c (_bfd_generic_link_hash_table_free): New function.
	* mmo.c (mmo_bfd_link_hash_table_free): Define.
	* nlm-target.h (nlm_bfd_link_hash_table_free): Define.
	* oasys.c (oasys_bfd_link_hash_table_free): Define.
	* ppcboot.c (ppcboot_bfd_link_hash_table_free): Define.
	* som.c (som_bfd_link_hash_table_free): Define.
	* srec.c (srec_bfd_link_hash_table_free): Define.
	* tekhex.c (tekhex_bfd_link_hash_table_free): Define.
	* versados.c (versados_bfd_link_hash_table_free): Define.
	* vms.c (vms_bfd_link_hash_table_free): New function.
	* xcofflink.c (_bfd_xcoff_bfd_link_hash_table_free): New function.

	* coff-arm.c (coff_arm_link_hash_table_create): Use bfd_malloc
	instead of bfd_alloc.
	* coff-h8300.c (h8300_coff_link_hash_table_create): Likewise.
	* coff-mcore.c (coff_mcore_link_hash_table_create): Likewise.
	* coff-ppc.c (ppc_coff_link_hash_table_create): Likewise.
	* cofflink.c (_bfd_coff_link_hash_table_create): Likewise.
	* ecoff.c (_bfd_ecoff_bfd_link_hash_table_create): Likewise.
	* elf-m10300.c (elf32_mn10300_link_hash_table_create): Likewise.
	* elf.c (_bfd_elf_link_hash_table_create): Likewise.
	* elf32-arm.h (elf32_arm_link_hash_table_create): Likewise.
	* elf32-cris.c (elf_cris_link_hash_table_create): Likewise.
	* elf32-hppa.c (elf32_hppa_link_hash_table_create): Likewise.
	* elf32-i386.c (elf_i386_link_hash_table_create): Likewise.
	* elf32-m68k.c (elf_m68k_link_hash_table_create): Likewise.
	* elf32-s390.c (elf_s390_link_hash_table_create): Likewise.
	* elf32-sh.c (sh_elf_link_hash_table_create): Likewise.
	* elf64-alpha.c (elf64_alpha_bfd_link_hash_table_create): Likewise.
	* elf64-ppc.c (ppc64_elf_link_hash_table_create): Likewise.
	* elf64-s390.c (elf_s390_link_hash_table_create): Likewise.
	* elf64-sh64.c (sh64_elf64_link_hash_table_create): Likewise.
	* elf64-sparc.c (sparc64_elf_bfd_link_hash_table_create): Likewise.
	* elf64-x86-64.c (elf64_x86_64_link_hash_table_create): Likewise.
	* elfxx-mips.c (_bfd_mips_elf_link_hash_table_create): Likewise.
	* linker.c (_bfd_generic_link_hash_table_create): Likewise.
	* m68klinux.c (linux_link_hash_table_create): Likewise.
	* sparclinux.c (linux_link_hash_table_create): Likewise.
	* sunos.c (sunos_link_hash_table_create): Likewise.
	* xcofflink.c (_bfd_xcoff_bfd_link_hash_table_create): Likewise.

	* targets.c: Add _bfd_link_hash_table_free to xvec.

	* bfd-in2.h: Regenerate.
	* libbfd.h: Regenerate.
	* libcoff.h: Regenerate.
@
text
@d605 1
a605 2
/* And more taken from the source .. */

@


1.24.6.1
log
@Merge with mainline, kseitz_interps-20020619-merge.
@
text
@d605 2
a606 1
/* Extracted from coffcode.h.  */
@


1.24.6.2
log
@merge from mainline
@
text
@d787 1
a787 1
  boolean (*_bfd_coff_adjust_symndx)
@


1.24.4.1
log
@merge from trunk
@
text
@d605 2
a606 1
/* Extracted from coffcode.h.  */
@


1.23
log
@	* aout-encap.c: Fix comment typos.
	* aoutx.h: Likewise.
	* archive.c: Likewise.
	* bout.c: Likewise.
	* coff64-rs6000.c: Likewise.
	* coffcode.h: Likewise.
	* coffgen.c: Likewise.
	* cofflink.c: Likewise.
	* coff-mips.c: Likewise.
	* ecoff.c: Likewise.
	* elf32-m32r.c: Likewise.
	* libcoff-in.h: Likewise.
	* libecoff.h: Likewise.
	* libxcoff.h: Likewise.
	* nlm32-i386.c: Likewise.
	* pdp11.c: Likewise.
	* section.c: Likewise.
	* som.c: Likewise.
	* som.h: Likewise.
	* bfd-in2.h: Regenerate.
	* libcoff.h: Likewise.
@
text
@d7 1
a7 1
   2000, 2001
d587 2
@


1.22
log
@bfd/
	* bfd-in.h: Remove comments regarding generated files.
	* libbfd-in.h: Likewise.
	* libcoff-in.h: Likewise.
	* bfd-in2.h: Regenerate.
	* libbfd.h: Likewise.
	* libcoff.h: Likewise.
bfd/doc/
	* header.sed: New file, adds header to generated files.
	* Makefile.am: Rewrite rules generating libbfd.h, libcoff.h and
	bfd.h, using above.  Add missing elf.c dependecy for libbfd.h.
	* Makefile.in: Regenerate.
@
text
@d180 1
a180 1
/* We take the address of the first element of a asymbol to ensure that the
@


1.21
log
@Touches most files in bfd/, so likely will be blamed for everything..

o  bfd_read and bfd_write lose an unnecessary param and become
   bfd_bread and bfd_bwrite.

o  bfd_*alloc now all take a bfd_size_type arg, and will error if
   size_t is too small.  eg. 32 bit host, 64 bit bfd, verrry big files
   or bugs in linker scripts etc.

o  file_ptr becomes a bfd_signed_vma.  Besides matching sizes with
   various other types involved in handling sections, this should make
   it easier for bfd to support a 64 bit off_t on 32 bit hosts that
   provide it.

o  I've made the H_GET_* and H_PUT_* macros (which invoke bfd_h_{get,put}_*)
   generally available.  They now cast their args to bfd_vma and
   bfd_byte * as appropriate, which removes a swag of casts from the
   source.

o  Bug fixes to bfd_get8, aix386_core_vec, elf32_h8_relax_section, and
   aout-encap.c.

o  Zillions of formatting and -Wconversion fixes.
@
text
@d1 4
a9 3

** NOTE: libcoff.h is a GENERATED file.  Don't change it; instead,
** change libcoff-in.h or coffcode.h.
@


1.20
log
@Chnage styp_flags_to_sec_flags() to a boolean function
@
text
@d305 49
a353 33
extern const bfd_target *coff_object_p PARAMS ((bfd *));
extern struct sec *coff_section_from_bfd_index PARAMS ((bfd *, int));
extern long coff_get_symtab_upper_bound PARAMS ((bfd *));
extern long coff_get_symtab PARAMS ((bfd *, asymbol **));
extern int coff_count_linenumbers PARAMS ((bfd *));
extern struct coff_symbol_struct *coff_symbol_from PARAMS ((bfd *, asymbol *));
extern boolean coff_renumber_symbols PARAMS ((bfd *, int *));
extern void coff_mangle_symbols PARAMS ((bfd *));
extern boolean coff_write_symbols PARAMS ((bfd *));
extern boolean coff_write_linenumbers PARAMS ((bfd *));
extern alent *coff_get_lineno PARAMS ((bfd *, asymbol *));
extern asymbol *coff_section_symbol PARAMS ((bfd *, char *));
extern boolean _bfd_coff_get_external_symbols PARAMS ((bfd *));
extern const char *_bfd_coff_read_string_table PARAMS ((bfd *));
extern boolean _bfd_coff_free_symbols PARAMS ((bfd *));
extern struct coff_ptr_struct *coff_get_normalized_symtab PARAMS ((bfd *));
extern long coff_get_reloc_upper_bound PARAMS ((bfd *, sec_ptr));
extern asymbol *coff_make_empty_symbol PARAMS ((bfd *));
extern void coff_print_symbol PARAMS ((bfd *, PTR filep, asymbol *,
				       bfd_print_symbol_type how));
extern void coff_get_symbol_info PARAMS ((bfd *, asymbol *,
					  symbol_info *ret));
extern boolean _bfd_coff_is_local_label_name PARAMS ((bfd *, const char *));
extern asymbol *coff_bfd_make_debug_symbol PARAMS ((bfd *, PTR,
						    unsigned long));
extern boolean coff_find_nearest_line PARAMS ((bfd *,
					       asection *,
					       asymbol **,
					       bfd_vma offset,
					       CONST char **filename_ptr,
					       CONST char **functionname_ptr,
					       unsigned int *line_ptr));
extern int coff_sizeof_headers PARAMS ((bfd *, boolean reloc));
d358 5
a362 7
	   bfd_byte *, boolean relocateable, asymbol **));
extern bfd_vma bfd_coff_reloc16_get_value PARAMS ((arelent *,
						   struct bfd_link_info *,
						   asection *));
extern void bfd_perform_slip PARAMS ((bfd *abfd, unsigned int slip,
				      asection *input_section,
				      bfd_vma val));
d576 2
a577 1
extern long _bfd_xcoff_get_dynamic_symtab_upper_bound PARAMS ((bfd *));
d580 2
a581 1
extern long _bfd_xcoff_get_dynamic_reloc_upper_bound PARAMS ((bfd *));
d597 2
a598 1
extern boolean ppc_allocate_toc_section PARAMS ((struct bfd_link_info *));
d606 31
a636 33

       /* Remembers the offset from the first symbol in the file for
          this symbol. Generated by coff_renumber_symbols. */
unsigned int offset;

       /* Should the value of this symbol be renumbered.  Used for
          XCOFF C_BSTAT symbols.  Set by coff_slurp_symbol_table.  */
unsigned int fix_value : 1;

       /* Should the tag field of this symbol be renumbered.
          Created by coff_pointerize_aux. */
unsigned int fix_tag : 1;

       /* Should the endidx field of this symbol be renumbered.
          Created by coff_pointerize_aux. */
unsigned int fix_end : 1;

       /* Should the x_csect.x_scnlen field be renumbered.
          Created by coff_pointerize_aux. */
unsigned int fix_scnlen : 1;

       /* Fix up an XCOFF C_BINCL/C_EINCL symbol.  The value is the
          index into the line number entries.  Set by
          coff_slurp_symbol_table.  */
unsigned int fix_line : 1;

       /* The container for the symbol structure as read and translated
           from the file. */

union {
   union internal_auxent auxent;
   struct internal_syment syment;
 } u;
d644 2
a645 2
   /* The actual symbol which the rest of BFD works with */
asymbol symbol;
d647 2
a648 2
   /* A pointer to the hidden information for this symbol */
combined_entry_type *native;
d650 2
a651 2
   /* A pointer to the linenumber information for this symbol */
struct lineno_cache_entry *lineno;
d653 2
a654 2
   /* Have the line numbers been relocated yet ? */
boolean done_lineno;
d674 125
a798 188
  void (*_bfd_coff_swap_aux_in) PARAMS ((
       bfd            *abfd,
       PTR             ext,
       int             type,
       int             class,
       int             indaux,
       int             numaux,
       PTR             in));

  void (*_bfd_coff_swap_sym_in) PARAMS ((
       bfd            *abfd ,
       PTR             ext,
       PTR             in));

  void (*_bfd_coff_swap_lineno_in) PARAMS ((
       bfd            *abfd,
       PTR            ext,
       PTR             in));

 unsigned int (*_bfd_coff_swap_aux_out) PARAMS ((
       bfd     *abfd,
       PTR     in,
       int     type,
       int     class,
       int     indaux,
       int     numaux,
       PTR     ext));

 unsigned int (*_bfd_coff_swap_sym_out) PARAMS ((
      bfd      *abfd,
      PTR      in,
      PTR      ext));

 unsigned int (*_bfd_coff_swap_lineno_out) PARAMS ((
       bfd     *abfd,
       PTR     in,
       PTR     ext));

 unsigned int (*_bfd_coff_swap_reloc_out) PARAMS ((
       bfd     *abfd,
       PTR     src,
       PTR     dst));

 unsigned int (*_bfd_coff_swap_filehdr_out) PARAMS ((
       bfd     *abfd,
       PTR     in,
       PTR     out));

 unsigned int (*_bfd_coff_swap_aouthdr_out) PARAMS ((
       bfd     *abfd,
       PTR     in,
       PTR     out));

 unsigned int (*_bfd_coff_swap_scnhdr_out) PARAMS ((
       bfd     *abfd,
       PTR     in,
       PTR     out));

 unsigned int _bfd_filhsz;
 unsigned int _bfd_aoutsz;
 unsigned int _bfd_scnhsz;
 unsigned int _bfd_symesz;
 unsigned int _bfd_auxesz;
 unsigned int _bfd_relsz;
 unsigned int _bfd_linesz;
 unsigned int _bfd_filnmlen;
 boolean _bfd_coff_long_filenames;
 boolean _bfd_coff_long_section_names;
 unsigned int _bfd_coff_default_section_alignment_power;
 boolean _bfd_coff_force_symnames_in_strings;
 unsigned int _bfd_coff_debug_string_prefix_length;
 void (*_bfd_coff_swap_filehdr_in) PARAMS ((
       bfd     *abfd,
       PTR     ext,
       PTR     in));
 void (*_bfd_coff_swap_aouthdr_in) PARAMS ((
       bfd     *abfd,
       PTR     ext,
       PTR     in));
 void (*_bfd_coff_swap_scnhdr_in) PARAMS ((
       bfd     *abfd,
       PTR     ext,
       PTR     in));
 void (*_bfd_coff_swap_reloc_in) PARAMS ((
       bfd     *abfd,
       PTR     ext,
       PTR     in));
 boolean (*_bfd_coff_bad_format_hook) PARAMS ((
       bfd     *abfd,
       PTR     internal_filehdr));
 boolean (*_bfd_coff_set_arch_mach_hook) PARAMS ((
       bfd     *abfd,
       PTR     internal_filehdr));
 PTR (*_bfd_coff_mkobject_hook) PARAMS ((
       bfd     *abfd,
       PTR     internal_filehdr,
       PTR     internal_aouthdr));
 boolean (*_bfd_styp_to_sec_flags_hook) PARAMS ((
       bfd     *abfd,
       PTR     internal_scnhdr,
       const char *name,
       asection *section,
       flagword *flags_ptr));
 void (*_bfd_set_alignment_hook) PARAMS ((
       bfd     *abfd,
       asection *sec,
       PTR     internal_scnhdr));
 boolean (*_bfd_coff_slurp_symbol_table) PARAMS ((
       bfd     *abfd));
 boolean (*_bfd_coff_symname_in_debug) PARAMS ((
       bfd     *abfd,
       struct internal_syment *sym));
 boolean (*_bfd_coff_pointerize_aux_hook) PARAMS ((
       bfd *abfd,
       combined_entry_type *table_base,
       combined_entry_type *symbol,
       unsigned int indaux,
       combined_entry_type *aux));
 boolean (*_bfd_coff_print_aux) PARAMS ((
       bfd *abfd,
       FILE *file,
       combined_entry_type *table_base,
       combined_entry_type *symbol,
       combined_entry_type *aux,
       unsigned int indaux));
 void (*_bfd_coff_reloc16_extra_cases) PARAMS ((
       bfd     *abfd,
       struct bfd_link_info *link_info,
       struct bfd_link_order *link_order,
       arelent *reloc,
       bfd_byte *data,
       unsigned int *src_ptr,
       unsigned int *dst_ptr));
 int (*_bfd_coff_reloc16_estimate) PARAMS ((
       bfd *abfd,
       asection *input_section,
       arelent *r,
       unsigned int shrink,
       struct bfd_link_info *link_info));
 enum coff_symbol_classification (*_bfd_coff_classify_symbol) PARAMS ((
       bfd *abfd,
       struct internal_syment *));
 boolean (*_bfd_coff_compute_section_file_positions) PARAMS ((
       bfd *abfd));
 boolean (*_bfd_coff_start_final_link) PARAMS ((
       bfd *output_bfd,
       struct bfd_link_info *info));
 boolean (*_bfd_coff_relocate_section) PARAMS ((
       bfd *output_bfd,
       struct bfd_link_info *info,
       bfd *input_bfd,
       asection *input_section,
       bfd_byte *contents,
       struct internal_reloc *relocs,
       struct internal_syment *syms,
       asection **sections));
 reloc_howto_type *(*_bfd_coff_rtype_to_howto) PARAMS ((
       bfd *abfd,
       asection *sec,
       struct internal_reloc *rel,
       struct coff_link_hash_entry *h,
       struct internal_syment *sym,
       bfd_vma *addendp));
 boolean (*_bfd_coff_adjust_symndx) PARAMS ((
       bfd *obfd,
       struct bfd_link_info *info,
       bfd *ibfd,
       asection *sec,
       struct internal_reloc *reloc,
       boolean *adjustedp));
 boolean (*_bfd_coff_link_add_one_symbol) PARAMS ((
       struct bfd_link_info *info,
       bfd *abfd,
       const char *name,
       flagword flags,
       asection *section,
       bfd_vma value,
       const char *string,
       boolean copy,
       boolean collect,
       struct bfd_link_hash_entry **hashp));

 boolean (*_bfd_coff_link_output_has_begun) PARAMS ((
       bfd * abfd,
       struct coff_final_link_info * pfinfo));
 boolean (*_bfd_coff_final_link_postscript) PARAMS ((
       bfd * abfd,
       struct coff_final_link_info * pfinfo));
d802 2
a803 1
#define coff_backend_info(abfd) ((bfd_coff_backend_data *) (abfd)->xvec->backend_data)
d806 1
a806 1
        ((coff_backend_info (a)->_bfd_coff_swap_aux_in) (a,e,t,c,ind,num,i))
d809 1
a809 1
        ((coff_backend_info (a)->_bfd_coff_swap_sym_in) (a,e,i))
d812 1
a812 1
        ((coff_backend_info ( a)->_bfd_coff_swap_lineno_in) (a,e,i))
d815 1
a815 1
        ((coff_backend_info (abfd)->_bfd_coff_swap_reloc_out) (abfd, i, o))
d818 1
a818 1
        ((coff_backend_info (abfd)->_bfd_coff_swap_lineno_out) (abfd, i, o))
d821 1
a821 1
        ((coff_backend_info (a)->_bfd_coff_swap_aux_out) (a,i,t,c,ind,num,o))
d824 1
a824 1
        ((coff_backend_info (abfd)->_bfd_coff_swap_sym_out) (abfd, i, o))
d827 1
a827 1
        ((coff_backend_info (abfd)->_bfd_coff_swap_scnhdr_out) (abfd, i, o))
d830 1
a830 1
        ((coff_backend_info (abfd)->_bfd_coff_swap_filehdr_out) (abfd, i, o))
d833 1
a833 1
        ((coff_backend_info (abfd)->_bfd_coff_swap_aouthdr_out) (abfd, i, o))
d843 2
a844 1
#define bfd_coff_long_filenames(abfd) (coff_backend_info (abfd)->_bfd_coff_long_filenames)
d846 1
a846 1
        (coff_backend_info (abfd)->_bfd_coff_long_section_names)
d848 1
a848 1
        (coff_backend_info (abfd)->_bfd_coff_default_section_alignment_power)
d850 1
a850 1
        ((coff_backend_info (abfd)->_bfd_coff_swap_filehdr_in) (abfd, i, o))
d853 1
a853 1
        ((coff_backend_info (abfd)->_bfd_coff_swap_aouthdr_in) (abfd, i, o))
d856 1
a856 1
        ((coff_backend_info (abfd)->_bfd_coff_swap_scnhdr_in) (abfd, i, o))
d859 1
a859 1
        ((coff_backend_info (abfd)->_bfd_coff_swap_reloc_in) (abfd, i, o))
d862 1
a862 1
        ((coff_backend_info (abfd)->_bfd_coff_bad_format_hook) (abfd, filehdr))
d865 1
a865 1
        ((coff_backend_info (abfd)->_bfd_coff_set_arch_mach_hook) (abfd, filehdr))
d867 1
a867 1
        ((coff_backend_info (abfd)->_bfd_coff_mkobject_hook) (abfd, filehdr, aouthdr))
d870 2
a871 2
        ((coff_backend_info (abfd)->_bfd_styp_to_sec_flags_hook)\
         (abfd, scnhdr, name, section, flags_ptr))
d874 1
a874 1
        ((coff_backend_info (abfd)->_bfd_set_alignment_hook) (abfd, sec, scnhdr))
d877 1
a877 1
        ((coff_backend_info (abfd)->_bfd_coff_slurp_symbol_table) (abfd))
d880 1
a880 1
        ((coff_backend_info (abfd)->_bfd_coff_symname_in_debug) (abfd, sym))
d883 1
a883 1
       (coff_backend_info (abfd)->_bfd_coff_force_symnames_in_strings)
d886 1
a886 1
       (coff_backend_info (abfd)->_bfd_coff_debug_string_prefix_length)
d889 2
a890 2
        ((coff_backend_info (abfd)->_bfd_coff_print_aux)\
         (abfd, file, base, symbol, aux, indaux))
d893 2
a894 2
        ((coff_backend_info (abfd)->_bfd_coff_reloc16_extra_cases)\
         (abfd, link_info, link_order, reloc, data, src_ptr, dst_ptr))
d897 2
a898 2
        ((coff_backend_info (abfd)->_bfd_coff_reloc16_estimate)\
         (abfd, section, reloc, shrink, link_info))
d901 2
a902 2
        ((coff_backend_info (abfd)->_bfd_coff_classify_symbol)\
         (abfd, sym))
d905 2
a906 2
        ((coff_backend_info (abfd)->_bfd_coff_compute_section_file_positions)\
         (abfd))
d909 2
a910 2
        ((coff_backend_info (obfd)->_bfd_coff_start_final_link)\
         (obfd, info))
d912 2
a913 2
        ((coff_backend_info (ibfd)->_bfd_coff_relocate_section)\
         (obfd, info, ibfd, o, con, rel, isyms, secs))
d915 2
a916 2
        ((coff_backend_info (abfd)->_bfd_coff_rtype_to_howto)\
         (abfd, sec, rel, h, sym, addendp))
d918 2
a919 2
        ((coff_backend_info (abfd)->_bfd_coff_adjust_symndx)\
         (obfd, info, ibfd, sec, rel, adjustedp))
d921 2
a922 2
        ((coff_backend_info (abfd)->_bfd_coff_link_add_one_symbol)\
         (info, abfd, name, flags, section, value, string, cp, coll, hashp))
d925 1
a925 1
        ((coff_backend_info (a)->_bfd_coff_link_output_has_begun) (a,p))
d927 1
a927 1
        ((coff_backend_info (a)->_bfd_coff_final_link_postscript) (a,p))
@


1.19
log
@2001-05-25  H.J. Lu  <hjl@@gnu.org>

	* bfd-in2.h: Regenerated.
	* libcoff.h: Likewise.
@
text
@d756 1
a756 1
 flagword (*_bfd_styp_to_sec_flags_hook) PARAMS ((
d760 2
a761 1
       asection *section));
d915 1
a915 1
#define bfd_coff_styp_to_sec_flags_hook(abfd, scnhdr, name, section)\
d917 1
a917 1
         (abfd, scnhdr, name, section))
@


1.18
log
@Support for xcoff64
@
text
@d166 1
a166 1
  bfd_size_type maxdata;
d169 1
a169 1
  bfd_size_type maxstack;
d559 18
@


1.17
log
@Update copyright notices
@
text
@a559 18
/* Functions in xcofflink.c.  */

extern long _bfd_xcoff_get_dynamic_symtab_upper_bound PARAMS ((bfd *));
extern long _bfd_xcoff_canonicalize_dynamic_symtab
  PARAMS ((bfd *, asymbol **));
extern long _bfd_xcoff_get_dynamic_reloc_upper_bound PARAMS ((bfd *));
extern long _bfd_xcoff_canonicalize_dynamic_reloc
  PARAMS ((bfd *, arelent **, asymbol **));
extern struct bfd_link_hash_table *_bfd_xcoff_bfd_link_hash_table_create
  PARAMS ((bfd *));
extern boolean _bfd_xcoff_bfd_link_add_symbols
  PARAMS ((bfd *, struct bfd_link_info *));
extern boolean _bfd_xcoff_bfd_final_link
  PARAMS ((bfd *, struct bfd_link_info *));
extern boolean _bfd_ppc_xcoff_relocate_section
  PARAMS ((bfd *, struct bfd_link_info *, bfd *, asection *, bfd_byte *,
	   struct internal_reloc *, struct internal_syment *, asection **));

@


1.16
log
@* peicode.h (coff_swap_filehdr_out) [COFF_IMAGE_WITH_PE]: Define
as _bfd_XXi_only_swap_filehdr_out.
(pe_mkobject) [PEI_FORCE_MINIMUM_ALIGNMENT]: Set
pe->force_minimum_alignment to TRUE.
(pe_mkobject) [PEI_TARGET_SUBSYSTEM]: Set pe->target_subsystem to
PEI_TARGET_SUBSYSTEM.
(pe_print_private_bfd_data): Call
_bfd_XX_print_private_bfd_data_common() instead of
_bfd_pe_print_private_bfd_data_common().
(pe_bfd_copy_private_bfd_data): Call
_bfd_XX_bfd_copy_private_bfd_data_common() instead of
_bfd_pe_bfd_copy_private_bfd_data_common().
(coff_bfd_copy_private_section_data): Define as
_bfd_XX_bfd_copy_private_section_data instead of
_bfd_pe_bfd_copy_private_section_data.
(coff_get_symbol_info): Define as _bfd_XX_get_symbol_info instead
of a _bfd_pe_get_symbol_info.

* peigen.c: Delete.

* peXXigen.c: Renamed from peigen.c.
(COFF_WITH_XX): Define this macro (will get expanded into
COFF_WITH_pep or COFF_WITH_pe, depending on whether this is being
compiled as peigen.c or pepigen.c.
[COFF_WITH_pep]: Include "coff/ia64.h" instead of "coff/i386.h" to
define the canonical PEP structures and definitions.
(_bfd_XXi_swap_aouthdr_out): If pe->force_minimum_alignment is in
effect, enforce minimum file and section alignments.  If
extra->Subsystem is IMAGE_SUBSYSTEM_UNKNOWN, set it to
pe->target_subsystem (this defaults to IMAGE_SUBSYSTEM_UNKNOWN,
so, by default, this is a no-op).

* libpei.h: Rename COFF_WITH_PEP to COFF_WITH_pep.
(_bfd_XX_bfd_copy_private_bfd_data_common): Add macros to map
_bfd_XXfoo to _bfd_pepfoo if COFF_WIT_PEP is defined and to
_bfd_pefoo if it's not defined.  Use these macros to define
coff swap macros.

* libcoff.h (pe_tdata): Add members target_subsystem and
force_minimum_alignment.

* efi-app-ia64.c (COFF_WITH_pep): Rename COFF_WITH_PEP to
COFF_WITH_pep.
(PEI_TARGET_SUBSYSTEM): Rename from PEI_DEFAULT_TARGET_SUBSYSTEM.

* configure.in (bfd_efi_app_ia64_vec): Use pepigen.lo instead of
peigen.lo.

* coff-ia64.c: Rename COFF_WITH_PEP to COFF_WITH_pep.
(AOUTSZ): Rename PEP64AOUTSZ and PEP64AOUTHDR to PEPAOUTSZ and
PEPAOUTHDR.

* Makefile.in (BFD64_BACKENDS): Mention pepigen.lo.
(BFD64_BACKENDS_CFILES): Mention pepigen.c
(peigen.c): Add rule to generate from peXXigen.c.
(pepigen.c): Ditto.
(pepigen.lo): List dependencies for pepigen.lo.

* unwind-ia64.c (unw_decode_x1): Declare code arg with
ATTRIBUTE_UNUSED.
(unw_decode_x2): Ditto.
(unw_decode_x3): Ditto.
(unw_decode_x4): Ditto.

* pe.h (PEPAOUTSZ): Rename from PEP64AOUTSZ.
Rename from PEPAOUTHDR.
@
text
@d2 2
a3 1
   Copyright (C) 1990, 91, 92, 93, 94, 95, 96, 97, 98, 1999, 2001
@


1.15
log
@Generalize DWARF2 and COFF support.
@
text
@d2 1
a2 1
   Copyright (C) 1990, 91, 92, 93, 94, 95, 96, 97, 98, 1999
d124 2
@


1.15.2.1
log
@Update copyright notices.
@
text
@d2 1
a2 2
   Copyright 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,
   2000, 2001
@


1.15.2.2
log
@Merge from mainline.
@
text
@a124 2
  int target_subsystem;
  boolean force_minimum_alignment;
d164 1
a164 1
  bfd_vma maxdata;
d167 1
a167 1
  bfd_vma maxstack;
@


1.14
log
@Add support for x86_64-*-linux-gnu* target
@
text
@d103 3
@


1.13
log
@2000-11-27  Philip Blundell  <pb@@futuretv.com>

	* libcoff-in.h (coff_tdata): Add `strings_written' flag.
	(obj_coff_strings_written): New accessor macro for above.
	* libcoff.h: Regenerate.
	* cofflink.c (_bfd_coff_final_link): Say that we wrote the
	strings.
	* coffcode.h (coff_write_object_contents): No need to write out
	the string table if it's already been done.
@
text
@d826 1
a826 1
       flagword flags, 
d831 1
a831 1
       boolean collect, 
@


1.12
log
@Add sequence id field to asection.
Tidy comments and replace deprecated CONST with const.
@
text
@d46 1
d87 2
@


1.11
log
@	* coffcode.h (coff_mkobject_hook): Set xcoff_tdata.xcoff64.
	* libcoff-in.h (struct xcoff_tdata): Define xcoff64 field.
	* libcoff.h (struct xcoff_tdata): Define xcoff64 field.
@
text
@d581 1
a581 1
        /* Remembers the offset from the first symbol in the file for
d585 1
a585 1
        /* Should the value of this symbol be renumbered.  Used for
d589 1
a589 1
        /* Should the tag field of this symbol be renumbered.
d593 1
a593 1
        /* Should the endidx field of this symbol be renumbered.
d597 1
a597 1
        /* Should the x_csect.x_scnlen field be renumbered.
d601 1
a601 1
        /* Fix up an XCOFF C_BINCL/C_EINCL symbol.  The value is the
d606 1
a606 1
        /* The container for the symbol structure as read and translated
d616 1
a616 1
 /* Each canonical asymbol really looks like this: */
d620 1
a620 1
    /* The actual symbol which the rest of BFD works with */
d623 1
a623 1
    /* A pointer to the hidden information for this symbol */
d626 1
a626 1
    /* A pointer to the linenumber information for this symbol */
d629 1
a629 1
    /* Have the line numbers been relocated yet ? */
d632 1
a632 1
 /* COFF symbol classifications.  */
d636 1
a636 1
   /* Global symbol.  */
d638 1
a638 1
   /* Common symbol.  */
d640 1
a640 1
   /* Undefined symbol.  */
d642 1
a642 1
   /* Local symbol.  */
d644 1
a644 1
   /* PE section symbol.  */
@


1.10
log
@	* libcoff.h: Sigh, whitespace differences after 'make headers'.
@
text
@d129 3
@


1.9
log
@	Add XCOFF64 support.

	bfd:
	* Makefile.am (coff64-rs6000.lo): New rule.
	* Makefile.in: Regenerate.
	* coff-rs6000.c (xcoff_mkobject, xcoff_copy_private_bfd_data,
	xcoff_is_local_label_name, xcoff_rtype2howto,
	xcoff_reloc_type_lookup, xcoff_slurp_armap, xcoff_archive_p,
	xcoff_read_ar_hdr, xcoff_openr_next_archived_file, xcoff_write_armap,
	xcoff_write_archive_contents): No longer static, and prefix with _bfd_.
	(NO_COFF_SYMBOLS): Define.
	(xcoff64_swap_sym_in, xcoff64_swap_sym_out, xcoff64_swap_aux_in,
	xcoff64_swap_aux_out): New functions; handle xcoff symbol tables
	internally.
	(MINUS_ONE): New macro.
	(xcoff_howto_tabl, xcoff_reloc_type_lookup): Add 64 bit POS
	relocation.
	(coff_SWAP_sym_in, coff_SWAP_sym_out, coff_SWAP_aux_in,
	coff_SWAP_aux_out): Map to the new functions.
	* coff64-rs6000.c: New file.
	* libcoff.h (bfd_coff_backend_data): Add new fields
	_bfd_coff_force_symnames_in_strings and
	_bfd_coff_debug_string_prefix_length.
	(bfd_coff_force_symnames_in_strings,
	bfd_coff_debug_string_prefix_length): New macros for above fields.
	* coffcode.h (coff_set_arch_mach_hook): Handle XCOFF64 magic.
	Set machine to 620 for XCOFF64.  Use bfd_coff_swap_sym_in instead
	of using coff_swap_sym_in directly.
	(FORCE_SYMNAMES_IN_STRINGS): New macro, defined for XCOFF64.
	(coff_set_flags) Set magic for XCOFF64.
	(coff_compute_section_file_positions): Add symbol name length to
	string section length if bfd_coff_debug_string_prefix_length is
	true.
	(coff_write_object_contents): Don't do reloc overflow for XCOFF64.
	(coff_slurp_line_table): Use bfd_coff_swap_lineno_in instead of
	using coff_swap_lineno_in directly.
	(bfd_coff_backend_data): Add _bfd_coff_force_symnames_in_strings
	and _bfd_coff_debug_string_prefix_length fields.
	* coffgen.c (coff_fix_symbol_name, coff_write_symbols): Force
	symbol names into strings table when
	bfd_coff_force_symnames_in_strings is true.
	* coffswap.h (MAX_SCNHDR_NRELOC, MAX_SCNHDR_NLNNO, GET_RELOC_VADDR,
	SET_RELOC_VADDR): New macros.
	(coff_swap_reloc_in, coff_swap_reloc_out): Use above macros.
	(coff_swap_aux_in, coff_swap_aux_out): Remove RS6000COFF_C
	code.
	(coff_swap_aouthdr_in, coff_swap_aouthdr_out): Handle XCOFF64
	changes within RS6000COFF_C specific code.
	(coff_swap_scnhdr_out): Use PUT_SCNHDR_NLNNO, PUT_SCNHDR_NRELOC,
	MAX_SCNHDR_NRELOC, and MAX_SCNHDR_NLNNO.
	* reloc.c (bfd_perform_relocation, bfd_install_relocation):
	Extend existing hack on target name.
	* xcofflink.c (XCOFF_XVECP): Extend existing hack on
	target name.
	* coff-tic54x.c (ticof): Keep up to date with new fields
	in bfd_coff_backend_data.
	* config.bfd: Add bfd_powerpc_64_arch to targ_arch and define
	targ_selvecs to include rs6000coff64_vec for rs6000.
	* configure.in: Add rs6000coff64_vec case.
 	* cpu-powerpc.c: New bfd_arch_info_type.

	gas:
	* as.c (parse_args): Allow md_parse_option to override -a listing
	option.
	* config/obj-coff.c (add_lineno): Change type of offset parameter
	from "int" to "bfd_vma."
	* config/tc-ppc.c (md_pseudo_table): Add "llong" and "machine."
	(ppc_mach, ppc_subseg_align, ppc_target_format): New.
	(ppc_change_csect): Align correctly for XCOFF64.
	(ppc_machine): New function, which discards "ppc_machine" line.
	(ppc_tc): Cons for 8 when code is 64 bit.
	(md_apply_fix3): Don't check operand->insert.  Handle 64 bit
	relocations.
	(md_parse_option): Handle -a64 and -a32.
	(ppc_xcoff64): New.
	* config/tc-ppc.h (TARGET_MACH): Define.
	(TARGET_FORMAT): Move to function.
	(SUB_SEGMENT_ALIGN): Use ppc_subseg_align.

	include:
	* include/coff/rs6k64.h: New file.

	opcodes:
	* configure.in: Add bfd_powerpc_64_arch.
	* disassemble.c (disassembler): Use print_insn_big_powerpc for
	64 bit code.
@
text
@d916 1
a916 1
    	(coff_backend_info (abfd)->_bfd_coff_force_symnames_in_strings)
d919 1
a919 1
    	(coff_backend_info (abfd)->_bfd_coff_debug_string_prefix_length)
@


1.8
log
@	* coffcode.h (bfd_coff_backend_data): Add _bfd_filnmlen field.
	(bfd_coff_filnmlen): Define.
	(bfd_coff_std_swap_table): Initialize new field.
	* coffgen.c (coff_fix_symbol_name): Use bfd_coff_filnmlen rather
	than FILNMLEN.
	(coff_write_symbols): Likewise.
	(coff_get_normalized_symtab): Likewise.
	* coff-sh.c (bfd_coff_small_swap_table): Initialize new field.
	* libcoff.h: Rebuild.
@
text
@d716 2
d914 6
@


1.7
log
@1999-09-06  Donn Terry  <donn@@interix.com>

	* libcoff-in.h (struct pei_section_tdata): Add pe_flags field.
	* coffcode.h (coff_set_alignment_hook): Set pe_flags field if
	COFF_WITH_PE.
	* libcoff.h: Rebuild.
@
text
@d712 1
d874 1
@


1.6
log
@1999-09-06  Donn Terry  <donn@@interix.com>

	* coffcode.h (sec_to_styp_flags): Write separate COFF_WITH_PE
	version.  Move COFF_WITH_PE specific code to new version.
	(stype_to_sec_flags): Likewise.  Add section parameter.
	* coffgen.c (make_a_section_from_file): Set target_index before
	calling styp_to_sec_flags.  Pass section to styp_to_sec_flags.
	* libcoff.h: Rebuild.
@
text
@d219 1
a219 1
/* Tdata for sections in PEI image files.  */
d225 2
@


1.5
log
@1999-08-18  Donn Terry  <donn@@interix.com>

	* coff-i386.c (coff_i386_reloc): Handle R_IMAGEBASE.
	(RTYPE2HOWTO): Return NULL if reloc type is out of range.
	(coff_i386_rtype_to_howto): Likewise.
	* coffcode.h (coff_slurp_symbol_table): Change a -2 to N_DEBUG.
	Completely ignore symbols which are all zero.
	(dummy_reloc16_estimate): Add return 0.
	* cofflink.c (_bfd_coff_link_input_bfd): Rename inner scope
	variable copy to name_copy to avoid shadowing outer scope
	variable.
	* libcoff-in.h (coff_data_type): Change raw_syment_count field
	from unsigned int to unsigned long.  Add timestamp field.
	* libcoff.h: Rebuild.

Also comment changes.
@
text
@d742 2
a743 1
       const char *name));
d896 3
a898 2
#define bfd_coff_styp_to_sec_flags_hook(abfd, scnhdr, name)\
        ((coff_backend_info (abfd)->_bfd_styp_to_sec_flags_hook) (abfd, scnhdr, name))
@


1.4
log
@1999-08-08  Mark Elbrecht  <snowball3@@bigfoot.com>

	* libcoff-in.h (struct coff_section_alignment_entry): Define.
	* coffcode.h (coff_set_custom_section_alignment): New static
	function.
	(coff_section_alignment_table): New static array.
	(coff_new_section_hook): Use coff_set_customer_section_alignment.
	* coff-go32.c (COFF_SECTION_ALIGNMENT_ENTRIES): Define.
	* coff-stgo32.c (COFF_SECTION_ALIGNMENT_ENTRIES): Define.
	* libcoff.h: Rebuild.
@
text
@d59 1
a59 1
  unsigned int raw_syment_count;
d99 3
@


1.3
log
@	Based on patches from Donn Terry <donn@@interix.com>:
	* coffcode.h (enum coff_symbol_classification): Define.
	(bfd_coff_backend_data): Rename _bfd_coff_sym_is_global to
	_bfd_coff_classify_symbol.  Change return type.
	(bfd_coff_classify_symbol): Rename from bfd_coff_sym_is_global.
	(coff_slurp_symbol_table): Use coff_classify_symbol.
	(coff_classify_symbol): New static function.
	(coff_sym_is_global): Never define.
	(bfd_coff_std_swap_table): Initialize with coff_classify_symbol.
	* cofflink.c (coff_link_check_ar_symbols): Use
	bfd_coff_classify_symbol rather than bfd_coff_sym_is_global.
	(coff_link_add_symbols): Likewise.
	(_bfd_coff_link_input_bfd): Likewise.
	* coff-sh.c (bfd_coff_small_swap_table): Initialize with
	coff_classify_symbol.
	* libcoff.h: Rebuild.
@
text
@d2 1
a2 1
   Copyright (C) 1990, 91, 92, 93, 94, 95, 96, 97, 1998
d468 35
@


1.2
log
@1999-07-23  Donn Terry  <donn@@interix.com>

	* libcoff-in.h (coff_link_hash_entry): Add coff_link_hash_flags
	field, and define COFF_LINK_HASH_PE_SECTION_SYMBOL.
	* cofflink.c (coff_link_add_symbols): If PE, handle section
	symbols specially.
	* libcoff.h: Rebuild.
@
text
@d589 16
d741 1
a741 1
 boolean (*_bfd_coff_sym_is_global) PARAMS ((
d881 2
a882 2
#define bfd_coff_sym_is_global(abfd, sym)\
        ((coff_backend_info (abfd)->_bfd_coff_sym_is_global)\
@


1.1
log
@Initial revision
@
text
@d252 5
@


1.1.1.1
log
@19990502 sourceware import
@
text
@@

