head	1.1;
access;
symbols
	binutils-2_23_2:1.1.24.1
	binutils-2_23_1:1.1.24.1
	binutils-2_23-branch:1.1.0.24
	binutils-2_20_1:1.1.22.1
	binutils-2_20:1.1.22.1
	binutils-2_20-branch:1.1.0.22
	binutils-2_19_1:1.1.20.1
	binutils-2_19:1.1.20.1
	binutils-2_19-branch:1.1.0.20
	binutils-2_18:1.1.18.1
	binutils-2_18-branch:1.1.0.18
	binutils-csl-sourcerygxx-3_4_4-32:1.1.14.1
	binutils-csl-sourcerygxx-3_4_4-25:1.1.14.1
	binutils-2_17:1.1.16.1
	binutils-csl-wrs-linux-3_4_4-24:1.1.14.1
	binutils-csl-wrs-linux-3_4_4-23:1.1.14.1
	binutils-csl-wrs-linux-3_4_4-22:1.1.14.1
	binutils-csl-wrs-linux-3_4_4-21:1.1.14.1
	binutils-csl-wrs-linux-3_4_4-20:1.1.14.1
	binutils-2_17-branch:1.1.0.16
	binutils-csl-gxxpro-3_4-branch:1.1.14.1.0.4
	binutils-csl-gxxpro-3_4-branchpoint:1.1.14.1
	binutils-2_16_1:1.1.14.1
	binutils-csl-arm-2005q1b:1.1.14.1
	binutils-2_16:1.1.14.1
	binutils-csl-arm-2005q1a:1.1.14.1
	binutils-csl-arm-2005q1-branch:1.1.14.1.0.2
	binutils-csl-arm-2005q1-branchpoint:1.1.14.1
	binutils-2_16-branch:1.1.0.14
	binutils-2_15:1.1.12.1
	binutils-2_15-branch:1.1.0.12
	binutils-2_14:1.1.10.1
	binutils-2_14-branch:1.1.0.10
	binutils-2_13_2_1:1.1.8.1
	binutils-2_13_2:1.1.8.1
	binutils-2_13_1:1.1.8.1
	binutils-2_13:1.1.8.1
	binutils-2_13-branch:1.1.0.8
	binutils-2_12_1:1.1.6.1
	binutils-2_12:1.1.6.1
	binutils-2_12-branch:1.1.0.6
	binutils-2_11_2:1.1.4.1
	binutils-2_11_1:1.1.4.1
	binutils-2_11:1.1.4.1
	binutils-2_11-branch:1.1.0.4
	binutils-2_10_1:1.1.2.1
	binutils-2_10:1.1.2.1
	binutils_latest_snapshot:1.1.2.1
	binutils-2_10-branch:1.1.0.2;
locks; strict;
comment	@# @;


1.1
date	2000.05.29.14.08.52;	author pb;	state dead;
branches
	1.1.2.1
	1.1.4.1
	1.1.6.1
	1.1.8.1
	1.1.10.1
	1.1.12.1
	1.1.14.1
	1.1.16.1
	1.1.18.1
	1.1.20.1
	1.1.22.1
	1.1.24.1;
next	;

1.1.2.1
date	2000.05.29.14.08.52;	author pb;	state Exp;
branches;
next	;

1.1.4.1
date	2001.03.12.15.40.30;	author pb;	state Exp;
branches;
next	;

1.1.6.1
date	2002.03.08.17.00.49;	author drow;	state Exp;
branches;
next	;

1.1.8.1
date	2002.08.05.20.43.45;	author drow;	state Exp;
branches;
next	;

1.1.10.1
date	2003.04.27.20.36.06;	author drow;	state Exp;
branches;
next	;

1.1.12.1
date	2004.04.09.19.32.14;	author drow;	state Exp;
branches;
next	;

1.1.14.1
date	2005.03.08.17.19.41;	author drow;	state Exp;
branches;
next	;

1.1.16.1
date	2006.04.16.18.36.40;	author drow;	state Exp;
branches;
next	;

1.1.18.1
date	2007.08.06.21.05.18;	author drow;	state Exp;
branches;
next	;

1.1.20.1
date	2008.09.11.08.24.13;	author gingold;	state Exp;
branches;
next	;

1.1.22.1
date	2009.10.16.12.07.01;	author gingold;	state Exp;
branches;
next	;

1.1.24.1
date	2012.11.13.14.51.25;	author gingold;	state Exp;
branches;
next	;


desc
@@


1.1
log
@file format.texi was initially added on branch binutils-2_10-branch.
@
text
@@


1.1.24.1
log
@*** empty log message ***
@
text
@a0 112
@@section File formats
A format is a BFD concept of high level file contents type. The
formats supported by BFD are:

@@itemize @@bullet

@@item
@@code{bfd_object}
@@end itemize
The BFD may contain data, symbols, relocations and debug info.

@@itemize @@bullet

@@item
@@code{bfd_archive}
@@end itemize
The BFD contains other BFDs and an optional index.

@@itemize @@bullet

@@item
@@code{bfd_core}
@@end itemize
The BFD contains the result of an executable core dump.

@@subsection File format functions


@@findex bfd_check_format
@@subsubsection @@code{bfd_check_format}
@@strong{Synopsis}
@@example
bfd_boolean bfd_check_format (bfd *abfd, bfd_format format);
@@end example
@@strong{Description}@@*
Verify if the file attached to the BFD @@var{abfd} is compatible
with the format @@var{format} (i.e., one of @@code{bfd_object},
@@code{bfd_archive} or @@code{bfd_core}).

If the BFD has been set to a specific target before the
call, only the named target and format combination is
checked. If the target has not been set, or has been set to
@@code{default}, then all the known target backends is
interrogated to determine a match.  If the default target
matches, it is used.  If not, exactly one target must recognize
the file, or an error results.

The function returns @@code{TRUE} on success, otherwise @@code{FALSE}
with one of the following error codes:

@@itemize @@bullet

@@item
@@code{bfd_error_invalid_operation} -
if @@code{format} is not one of @@code{bfd_object}, @@code{bfd_archive} or
@@code{bfd_core}.

@@item
@@code{bfd_error_system_call} -
if an error occured during a read - even some file mismatches
can cause bfd_error_system_calls.

@@item
@@code{file_not_recognised} -
none of the backends recognised the file format.

@@item
@@code{bfd_error_file_ambiguously_recognized} -
more than one backend recognised the file format.
@@end itemize

@@findex bfd_check_format_matches
@@subsubsection @@code{bfd_check_format_matches}
@@strong{Synopsis}
@@example
bfd_boolean bfd_check_format_matches
   (bfd *abfd, bfd_format format, char ***matching);
@@end example
@@strong{Description}@@*
Like @@code{bfd_check_format}, except when it returns FALSE with
@@code{bfd_errno} set to @@code{bfd_error_file_ambiguously_recognized}.  In that
case, if @@var{matching} is not NULL, it will be filled in with
a NULL-terminated list of the names of the formats that matched,
allocated with @@code{malloc}.
Then the user may choose a format and try again.

When done with the list that @@var{matching} points to, the caller
should free it.

@@findex bfd_set_format
@@subsubsection @@code{bfd_set_format}
@@strong{Synopsis}
@@example
bfd_boolean bfd_set_format (bfd *abfd, bfd_format format);
@@end example
@@strong{Description}@@*
This function sets the file format of the BFD @@var{abfd} to the
format @@var{format}. If the target set in the BFD does not
support the format requested, the format is invalid, or the BFD
is not open for writing, then an error occurs.

@@findex bfd_format_string
@@subsubsection @@code{bfd_format_string}
@@strong{Synopsis}
@@example
const char *bfd_format_string (bfd_format format);
@@end example
@@strong{Description}@@*
Return a pointer to a const string
@@code{invalid}, @@code{object}, @@code{archive}, @@code{core}, or @@code{unknown},
depending upon the value of @@var{format}.

@


1.1.22.1
log
@bfd/
2009-10-16  Tristan Gingold  <gingold@@adacore.com>

	* configure.in: Bump version to 2.20
	* Makefile.am (RELEASE): Set.
	* configure, Makefile.in: Regenerate.
@
text
@a0 112
@@section File formats
A format is a BFD concept of high level file contents type. The
formats supported by BFD are:

@@itemize @@bullet

@@item
@@code{bfd_object}
@@end itemize
The BFD may contain data, symbols, relocations and debug info.

@@itemize @@bullet

@@item
@@code{bfd_archive}
@@end itemize
The BFD contains other BFDs and an optional index.

@@itemize @@bullet

@@item
@@code{bfd_core}
@@end itemize
The BFD contains the result of an executable core dump.

@@subsection File format functions


@@findex bfd_check_format
@@subsubsection @@code{bfd_check_format}
@@strong{Synopsis}
@@example
bfd_boolean bfd_check_format (bfd *abfd, bfd_format format);
@@end example
@@strong{Description}@@*
Verify if the file attached to the BFD @@var{abfd} is compatible
with the format @@var{format} (i.e., one of @@code{bfd_object},
@@code{bfd_archive} or @@code{bfd_core}).

If the BFD has been set to a specific target before the
call, only the named target and format combination is
checked. If the target has not been set, or has been set to
@@code{default}, then all the known target backends is
interrogated to determine a match.  If the default target
matches, it is used.  If not, exactly one target must recognize
the file, or an error results.

The function returns @@code{TRUE} on success, otherwise @@code{FALSE}
with one of the following error codes:

@@itemize @@bullet

@@item
@@code{bfd_error_invalid_operation} -
if @@code{format} is not one of @@code{bfd_object}, @@code{bfd_archive} or
@@code{bfd_core}.

@@item
@@code{bfd_error_system_call} -
if an error occured during a read - even some file mismatches
can cause bfd_error_system_calls.

@@item
@@code{file_not_recognised} -
none of the backends recognised the file format.

@@item
@@code{bfd_error_file_ambiguously_recognized} -
more than one backend recognised the file format.
@@end itemize

@@findex bfd_check_format_matches
@@subsubsection @@code{bfd_check_format_matches}
@@strong{Synopsis}
@@example
bfd_boolean bfd_check_format_matches
   (bfd *abfd, bfd_format format, char ***matching);
@@end example
@@strong{Description}@@*
Like @@code{bfd_check_format}, except when it returns FALSE with
@@code{bfd_errno} set to @@code{bfd_error_file_ambiguously_recognized}.  In that
case, if @@var{matching} is not NULL, it will be filled in with
a NULL-terminated list of the names of the formats that matched,
allocated with @@code{malloc}.
Then the user may choose a format and try again.

When done with the list that @@var{matching} points to, the caller
should free it.

@@findex bfd_set_format
@@subsubsection @@code{bfd_set_format}
@@strong{Synopsis}
@@example
bfd_boolean bfd_set_format (bfd *abfd, bfd_format format);
@@end example
@@strong{Description}@@*
This function sets the file format of the BFD @@var{abfd} to the
format @@var{format}. If the target set in the BFD does not
support the format requested, the format is invalid, or the BFD
is not open for writing, then an error occurs.

@@findex bfd_format_string
@@subsubsection @@code{bfd_format_string}
@@strong{Synopsis}
@@example
const char *bfd_format_string (bfd_format format);
@@end example
@@strong{Description}@@*
Return a pointer to a const string
@@code{invalid}, @@code{object}, @@code{archive}, @@code{core}, or @@code{unknown},
depending upon the value of @@var{format}.

@


1.1.20.1
log
@Generated files for binutils 2.19.
@
text
@a0 112
@@section File formats
A format is a BFD concept of high level file contents type. The
formats supported by BFD are:

@@itemize @@bullet

@@item
@@code{bfd_object}
@@end itemize
The BFD may contain data, symbols, relocations and debug info.

@@itemize @@bullet

@@item
@@code{bfd_archive}
@@end itemize
The BFD contains other BFDs and an optional index.

@@itemize @@bullet

@@item
@@code{bfd_core}
@@end itemize
The BFD contains the result of an executable core dump.

@@subsection File format functions


@@findex bfd_check_format
@@subsubsection @@code{bfd_check_format}
@@strong{Synopsis}
@@example
bfd_boolean bfd_check_format (bfd *abfd, bfd_format format);
@@end example
@@strong{Description}@@*
Verify if the file attached to the BFD @@var{abfd} is compatible
with the format @@var{format} (i.e., one of @@code{bfd_object},
@@code{bfd_archive} or @@code{bfd_core}).

If the BFD has been set to a specific target before the
call, only the named target and format combination is
checked. If the target has not been set, or has been set to
@@code{default}, then all the known target backends is
interrogated to determine a match.  If the default target
matches, it is used.  If not, exactly one target must recognize
the file, or an error results.

The function returns @@code{TRUE} on success, otherwise @@code{FALSE}
with one of the following error codes:

@@itemize @@bullet

@@item
@@code{bfd_error_invalid_operation} -
if @@code{format} is not one of @@code{bfd_object}, @@code{bfd_archive} or
@@code{bfd_core}.

@@item
@@code{bfd_error_system_call} -
if an error occured during a read - even some file mismatches
can cause bfd_error_system_calls.

@@item
@@code{file_not_recognised} -
none of the backends recognised the file format.

@@item
@@code{bfd_error_file_ambiguously_recognized} -
more than one backend recognised the file format.
@@end itemize

@@findex bfd_check_format_matches
@@subsubsection @@code{bfd_check_format_matches}
@@strong{Synopsis}
@@example
bfd_boolean bfd_check_format_matches
   (bfd *abfd, bfd_format format, char ***matching);
@@end example
@@strong{Description}@@*
Like @@code{bfd_check_format}, except when it returns FALSE with
@@code{bfd_errno} set to @@code{bfd_error_file_ambiguously_recognized}.  In that
case, if @@var{matching} is not NULL, it will be filled in with
a NULL-terminated list of the names of the formats that matched,
allocated with @@code{malloc}.
Then the user may choose a format and try again.

When done with the list that @@var{matching} points to, the caller
should free it.

@@findex bfd_set_format
@@subsubsection @@code{bfd_set_format}
@@strong{Synopsis}
@@example
bfd_boolean bfd_set_format (bfd *abfd, bfd_format format);
@@end example
@@strong{Description}@@*
This function sets the file format of the BFD @@var{abfd} to the
format @@var{format}. If the target set in the BFD does not
support the format requested, the format is invalid, or the BFD
is not open for writing, then an error occurs.

@@findex bfd_format_string
@@subsubsection @@code{bfd_format_string}
@@strong{Synopsis}
@@example
const char *bfd_format_string (bfd_format format);
@@end example
@@strong{Description}@@*
Return a pointer to a const string
@@code{invalid}, @@code{object}, @@code{archive}, @@code{core}, or @@code{unknown},
depending upon the value of @@var{format}.

@


1.1.18.1
log
@Commit generated files for binutils 2.17.90.
@
text
@a0 112
@@section File formats
A format is a BFD concept of high level file contents type. The
formats supported by BFD are:

@@itemize @@bullet

@@item
@@code{bfd_object}
@@end itemize
The BFD may contain data, symbols, relocations and debug info.

@@itemize @@bullet

@@item
@@code{bfd_archive}
@@end itemize
The BFD contains other BFDs and an optional index.

@@itemize @@bullet

@@item
@@code{bfd_core}
@@end itemize
The BFD contains the result of an executable core dump.

@@subsection File format functions


@@findex bfd_check_format
@@subsubsection @@code{bfd_check_format}
@@strong{Synopsis}
@@example
bfd_boolean bfd_check_format (bfd *abfd, bfd_format format);
@@end example
@@strong{Description}@@*
Verify if the file attached to the BFD @@var{abfd} is compatible
with the format @@var{format} (i.e., one of @@code{bfd_object},
@@code{bfd_archive} or @@code{bfd_core}).

If the BFD has been set to a specific target before the
call, only the named target and format combination is
checked. If the target has not been set, or has been set to
@@code{default}, then all the known target backends is
interrogated to determine a match.  If the default target
matches, it is used.  If not, exactly one target must recognize
the file, or an error results.

The function returns @@code{TRUE} on success, otherwise @@code{FALSE}
with one of the following error codes:

@@itemize @@bullet

@@item
@@code{bfd_error_invalid_operation} -
if @@code{format} is not one of @@code{bfd_object}, @@code{bfd_archive} or
@@code{bfd_core}.

@@item
@@code{bfd_error_system_call} -
if an error occured during a read - even some file mismatches
can cause bfd_error_system_calls.

@@item
@@code{file_not_recognised} -
none of the backends recognised the file format.

@@item
@@code{bfd_error_file_ambiguously_recognized} -
more than one backend recognised the file format.
@@end itemize

@@findex bfd_check_format_matches
@@subsubsection @@code{bfd_check_format_matches}
@@strong{Synopsis}
@@example
bfd_boolean bfd_check_format_matches
   (bfd *abfd, bfd_format format, char ***matching);
@@end example
@@strong{Description}@@*
Like @@code{bfd_check_format}, except when it returns FALSE with
@@code{bfd_errno} set to @@code{bfd_error_file_ambiguously_recognized}.  In that
case, if @@var{matching} is not NULL, it will be filled in with
a NULL-terminated list of the names of the formats that matched,
allocated with @@code{malloc}.
Then the user may choose a format and try again.

When done with the list that @@var{matching} points to, the caller
should free it.

@@findex bfd_set_format
@@subsubsection @@code{bfd_set_format}
@@strong{Synopsis}
@@example
bfd_boolean bfd_set_format (bfd *abfd, bfd_format format);
@@end example
@@strong{Description}@@*
This function sets the file format of the BFD @@var{abfd} to the
format @@var{format}. If the target set in the BFD does not
support the format requested, the format is invalid, or the BFD
is not open for writing, then an error occurs.

@@findex bfd_format_string
@@subsubsection @@code{bfd_format_string}
@@strong{Synopsis}
@@example
const char *bfd_format_string (bfd_format format);
@@end example
@@strong{Description}@@*
Return a pointer to a const string
@@code{invalid}, @@code{object}, @@code{archive}, @@code{core}, or @@code{unknown},
depending upon the value of @@var{format}.

@


1.1.16.1
log
@Commit generated files.
@
text
@a0 112
@@section File formats
A format is a BFD concept of high level file contents type. The
formats supported by BFD are:

@@itemize @@bullet

@@item
@@code{bfd_object}
@@end itemize
The BFD may contain data, symbols, relocations and debug info.

@@itemize @@bullet

@@item
@@code{bfd_archive}
@@end itemize
The BFD contains other BFDs and an optional index.

@@itemize @@bullet

@@item
@@code{bfd_core}
@@end itemize
The BFD contains the result of an executable core dump.

@@subsection File format functions


@@findex bfd_check_format
@@subsubsection @@code{bfd_check_format}
@@strong{Synopsis}
@@example
bfd_boolean bfd_check_format (bfd *abfd, bfd_format format);
@@end example
@@strong{Description}@@*
Verify if the file attached to the BFD @@var{abfd} is compatible
with the format @@var{format} (i.e., one of @@code{bfd_object},
@@code{bfd_archive} or @@code{bfd_core}).

If the BFD has been set to a specific target before the
call, only the named target and format combination is
checked. If the target has not been set, or has been set to
@@code{default}, then all the known target backends is
interrogated to determine a match.  If the default target
matches, it is used.  If not, exactly one target must recognize
the file, or an error results.

The function returns @@code{TRUE} on success, otherwise @@code{FALSE}
with one of the following error codes:

@@itemize @@bullet

@@item
@@code{bfd_error_invalid_operation} -
if @@code{format} is not one of @@code{bfd_object}, @@code{bfd_archive} or
@@code{bfd_core}.

@@item
@@code{bfd_error_system_call} -
if an error occured during a read - even some file mismatches
can cause bfd_error_system_calls.

@@item
@@code{file_not_recognised} -
none of the backends recognised the file format.

@@item
@@code{bfd_error_file_ambiguously_recognized} -
more than one backend recognised the file format.
@@end itemize

@@findex bfd_check_format_matches
@@subsubsection @@code{bfd_check_format_matches}
@@strong{Synopsis}
@@example
bfd_boolean bfd_check_format_matches
   (bfd *abfd, bfd_format format, char ***matching);
@@end example
@@strong{Description}@@*
Like @@code{bfd_check_format}, except when it returns FALSE with
@@code{bfd_errno} set to @@code{bfd_error_file_ambiguously_recognized}.  In that
case, if @@var{matching} is not NULL, it will be filled in with
a NULL-terminated list of the names of the formats that matched,
allocated with @@code{malloc}.
Then the user may choose a format and try again.

When done with the list that @@var{matching} points to, the caller
should free it.

@@findex bfd_set_format
@@subsubsection @@code{bfd_set_format}
@@strong{Synopsis}
@@example
bfd_boolean bfd_set_format (bfd *abfd, bfd_format format);
@@end example
@@strong{Description}@@*
This function sets the file format of the BFD @@var{abfd} to the
format @@var{format}. If the target set in the BFD does not
support the format requested, the format is invalid, or the BFD
is not open for writing, then an error occurs.

@@findex bfd_format_string
@@subsubsection @@code{bfd_format_string}
@@strong{Synopsis}
@@example
const char *bfd_format_string (bfd_format format);
@@end example
@@strong{Description}@@*
Return a pointer to a const string
@@code{invalid}, @@code{object}, @@code{archive}, @@code{core}, or @@code{unknown},
depending upon the value of @@var{format}.

@


1.1.14.1
log
@Commit generated files for the binutils 2.16 branch.
@
text
@a0 109
@@section File formats
A format is a BFD concept of high level file contents type. The
formats supported by BFD are:

@@itemize @@bullet

@@item
@@code{bfd_object}
@@end itemize
The BFD may contain data, symbols, relocations and debug info.

@@itemize @@bullet

@@item
@@code{bfd_archive}
@@end itemize
The BFD contains other BFDs and an optional index.

@@itemize @@bullet

@@item
@@code{bfd_core}
@@end itemize
The BFD contains the result of an executable core dump.

@@findex bfd_check_format
@@subsubsection @@code{bfd_check_format}
@@strong{Synopsis}
@@example
bfd_boolean bfd_check_format (bfd *abfd, bfd_format format);
@@end example
@@strong{Description}@@*
Verify if the file attached to the BFD @@var{abfd} is compatible
with the format @@var{format} (i.e., one of @@code{bfd_object},
@@code{bfd_archive} or @@code{bfd_core}).

If the BFD has been set to a specific target before the
call, only the named target and format combination is
checked. If the target has not been set, or has been set to
@@code{default}, then all the known target backends is
interrogated to determine a match.  If the default target
matches, it is used.  If not, exactly one target must recognize
the file, or an error results.

The function returns @@code{TRUE} on success, otherwise @@code{FALSE}
with one of the following error codes:

@@itemize @@bullet

@@item
@@code{bfd_error_invalid_operation} -
if @@code{format} is not one of @@code{bfd_object}, @@code{bfd_archive} or
@@code{bfd_core}.

@@item
@@code{bfd_error_system_call} -
if an error occured during a read - even some file mismatches
can cause bfd_error_system_calls.

@@item
@@code{file_not_recognised} -
none of the backends recognised the file format.

@@item
@@code{bfd_error_file_ambiguously_recognized} -
more than one backend recognised the file format.
@@end itemize

@@findex bfd_check_format_matches
@@subsubsection @@code{bfd_check_format_matches}
@@strong{Synopsis}
@@example
bfd_boolean bfd_check_format_matches
   (bfd *abfd, bfd_format format, char ***matching);
@@end example
@@strong{Description}@@*
Like @@code{bfd_check_format}, except when it returns FALSE with
@@code{bfd_errno} set to @@code{bfd_error_file_ambiguously_recognized}.  In that
case, if @@var{matching} is not NULL, it will be filled in with
a NULL-terminated list of the names of the formats that matched,
allocated with @@code{malloc}.
Then the user may choose a format and try again.

When done with the list that @@var{matching} points to, the caller
should free it.

@@findex bfd_set_format
@@subsubsection @@code{bfd_set_format}
@@strong{Synopsis}
@@example
bfd_boolean bfd_set_format (bfd *abfd, bfd_format format);
@@end example
@@strong{Description}@@*
This function sets the file format of the BFD @@var{abfd} to the
format @@var{format}. If the target set in the BFD does not
support the format requested, the format is invalid, or the BFD
is not open for writing, then an error occurs.

@@findex bfd_format_string
@@subsubsection @@code{bfd_format_string}
@@strong{Synopsis}
@@example
const char *bfd_format_string (bfd_format format);
@@end example
@@strong{Description}@@*
Return a pointer to a const string
@@code{invalid}, @@code{object}, @@code{archive}, @@code{core}, or @@code{unknown},
depending upon the value of @@var{format}.

@


1.1.12.1
log
@Generated files for the 2.15 branch.
@
text
@a0 109
@@section File formats
A format is a BFD concept of high level file contents type. The
formats supported by BFD are:

@@itemize @@bullet

@@item
@@code{bfd_object}
@@end itemize
The BFD may contain data, symbols, relocations and debug info.

@@itemize @@bullet

@@item
@@code{bfd_archive}
@@end itemize
The BFD contains other BFDs and an optional index.

@@itemize @@bullet

@@item
@@code{bfd_core}
@@end itemize
The BFD contains the result of an executable core dump.

@@findex bfd_check_format
@@subsubsection @@code{bfd_check_format}
@@strong{Synopsis}
@@example
bfd_boolean bfd_check_format (bfd *abfd, bfd_format format);
@@end example
@@strong{Description}@@*
Verify if the file attached to the BFD @@var{abfd} is compatible
with the format @@var{format} (i.e., one of @@code{bfd_object},
@@code{bfd_archive} or @@code{bfd_core}).

If the BFD has been set to a specific target before the
call, only the named target and format combination is
checked. If the target has not been set, or has been set to
@@code{default}, then all the known target backends is
interrogated to determine a match.  If the default target
matches, it is used.  If not, exactly one target must recognize
the file, or an error results.

The function returns @@code{TRUE} on success, otherwise @@code{FALSE}
with one of the following error codes:

@@itemize @@bullet

@@item
@@code{bfd_error_invalid_operation} -
if @@code{format} is not one of @@code{bfd_object}, @@code{bfd_archive} or
@@code{bfd_core}.

@@item
@@code{bfd_error_system_call} -
if an error occured during a read - even some file mismatches
can cause bfd_error_system_calls.

@@item
@@code{file_not_recognised} -
none of the backends recognised the file format.

@@item
@@code{bfd_error_file_ambiguously_recognized} -
more than one backend recognised the file format.
@@end itemize

@@findex bfd_check_format_matches
@@subsubsection @@code{bfd_check_format_matches}
@@strong{Synopsis}
@@example
bfd_boolean bfd_check_format_matches
   (bfd *abfd, bfd_format format, char ***matching);
@@end example
@@strong{Description}@@*
Like @@code{bfd_check_format}, except when it returns FALSE with
@@code{bfd_errno} set to @@code{bfd_error_file_ambiguously_recognized}.  In that
case, if @@var{matching} is not NULL, it will be filled in with
a NULL-terminated list of the names of the formats that matched,
allocated with @@code{malloc}.
Then the user may choose a format and try again.

When done with the list that @@var{matching} points to, the caller
should free it.

@@findex bfd_set_format
@@subsubsection @@code{bfd_set_format}
@@strong{Synopsis}
@@example
bfd_boolean bfd_set_format (bfd *abfd, bfd_format format);
@@end example
@@strong{Description}@@*
This function sets the file format of the BFD @@var{abfd} to the
format @@var{format}. If the target set in the BFD does not
support the format requested, the format is invalid, or the BFD
is not open for writing, then an error occurs.

@@findex bfd_format_string
@@subsubsection @@code{bfd_format_string}
@@strong{Synopsis}
@@example
const char *bfd_format_string (bfd_format format);
@@end example
@@strong{Description}@@*
Return a pointer to a const string
@@code{invalid}, @@code{object}, @@code{archive}, @@code{core}, or @@code{unknown},
depending upon the value of @@var{format}.

@


1.1.10.1
log
@Add generated files on 2.14 branch.
@
text
@a0 109
@@section File formats
A format is a BFD concept of high level file contents type. The
formats supported by BFD are:

@@itemize @@bullet

@@item
@@code{bfd_object}
@@end itemize
The BFD may contain data, symbols, relocations and debug info.

@@itemize @@bullet

@@item
@@code{bfd_archive}
@@end itemize
The BFD contains other BFDs and an optional index.

@@itemize @@bullet

@@item
@@code{bfd_core}
@@end itemize
The BFD contains the result of an executable core dump.

@@findex bfd_check_format
@@subsubsection @@code{bfd_check_format}
@@strong{Synopsis}
@@example
bfd_boolean bfd_check_format (bfd *abfd, bfd_format format);
@@end example
@@strong{Description}@@*
Verify if the file attached to the BFD @@var{abfd} is compatible
with the format @@var{format} (i.e., one of @@code{bfd_object},
@@code{bfd_archive} or @@code{bfd_core}).

If the BFD has been set to a specific target before the
call, only the named target and format combination is
checked. If the target has not been set, or has been set to
@@code{default}, then all the known target backends is
interrogated to determine a match.  If the default target
matches, it is used.  If not, exactly one target must recognize
the file, or an error results.

The function returns @@code{TRUE} on success, otherwise @@code{FALSE}
with one of the following error codes:

@@itemize @@bullet

@@item
@@code{bfd_error_invalid_operation} -
if @@code{format} is not one of @@code{bfd_object}, @@code{bfd_archive} or
@@code{bfd_core}.

@@item
@@code{bfd_error_system_call} -
if an error occured during a read - even some file mismatches
can cause bfd_error_system_calls.

@@item
@@code{file_not_recognised} -
none of the backends recognised the file format.

@@item
@@code{bfd_error_file_ambiguously_recognized} -
more than one backend recognised the file format.
@@end itemize

@@findex bfd_check_format_matches
@@subsubsection @@code{bfd_check_format_matches}
@@strong{Synopsis}
@@example
bfd_boolean bfd_check_format_matches (bfd *abfd, bfd_format format,
    char ***matching);
@@end example
@@strong{Description}@@*
Like @@code{bfd_check_format}, except when it returns FALSE with
@@code{bfd_errno} set to @@code{bfd_error_file_ambiguously_recognized}.  In that
case, if @@var{matching} is not NULL, it will be filled in with
a NULL-terminated list of the names of the formats that matched,
allocated with @@code{malloc}.
Then the user may choose a format and try again.

When done with the list that @@var{matching} points to, the caller
should free it.

@@findex bfd_set_format
@@subsubsection @@code{bfd_set_format}
@@strong{Synopsis}
@@example
bfd_boolean bfd_set_format (bfd *abfd, bfd_format format);
@@end example
@@strong{Description}@@*
This function sets the file format of the BFD @@var{abfd} to the
format @@var{format}. If the target set in the BFD does not
support the format requested, the format is invalid, or the BFD
is not open for writing, then an error occurs.

@@findex bfd_format_string
@@subsubsection @@code{bfd_format_string}
@@strong{Synopsis}
@@example
const char *bfd_format_string (bfd_format format);
@@end example
@@strong{Description}@@*
Return a pointer to a const string
@@code{invalid}, @@code{object}, @@code{archive}, @@code{core}, or @@code{unknown},
depending upon the value of @@var{format}.

@


1.1.8.1
log
@Add generated files.
@
text
@a0 108
@@section File formats
A format is a BFD concept of high level file contents type. The
formats supported by BFD are:

@@itemize @@bullet

@@item
@@code{bfd_object}
@@end itemize
The BFD may contain data, symbols, relocations and debug info.

@@itemize @@bullet

@@item
@@code{bfd_archive}
@@end itemize
The BFD contains other BFDs and an optional index.

@@itemize @@bullet

@@item
@@code{bfd_core}
@@end itemize
The BFD contains the result of an executable core dump.

@@findex bfd_check_format
@@subsubsection @@code{bfd_check_format}
@@strong{Synopsis}
@@example
boolean bfd_check_format(bfd *abfd, bfd_format format);
@@end example
@@strong{Description}@@*
Verify if the file attached to the BFD @@var{abfd} is compatible
with the format @@var{format} (i.e., one of @@code{bfd_object},
@@code{bfd_archive} or @@code{bfd_core}).

If the BFD has been set to a specific target before the
call, only the named target and format combination is
checked. If the target has not been set, or has been set to
@@code{default}, then all the known target backends is
interrogated to determine a match.  If the default target
matches, it is used.  If not, exactly one target must recognize
the file, or an error results.

The function returns @@code{true} on success, otherwise @@code{false}
with one of the following error codes:

@@itemize @@bullet

@@item
@@code{bfd_error_invalid_operation} -
if @@code{format} is not one of @@code{bfd_object}, @@code{bfd_archive} or
@@code{bfd_core}.

@@item
@@code{bfd_error_system_call} -
if an error occured during a read - even some file mismatches
can cause bfd_error_system_calls.

@@item
@@code{file_not_recognised} -
none of the backends recognised the file format.

@@item
@@code{bfd_error_file_ambiguously_recognized} -
more than one backend recognised the file format.
@@end itemize

@@findex bfd_check_format_matches
@@subsubsection @@code{bfd_check_format_matches}
@@strong{Synopsis}
@@example
boolean bfd_check_format_matches(bfd *abfd, bfd_format format, char ***matching);
@@end example
@@strong{Description}@@*
Like @@code{bfd_check_format}, except when it returns false with
@@code{bfd_errno} set to @@code{bfd_error_file_ambiguously_recognized}.  In that
case, if @@var{matching} is not NULL, it will be filled in with
a NULL-terminated list of the names of the formats that matched,
allocated with @@code{malloc}.
Then the user may choose a format and try again.

When done with the list that @@var{matching} points to, the caller
should free it.

@@findex bfd_set_format
@@subsubsection @@code{bfd_set_format}
@@strong{Synopsis}
@@example
boolean bfd_set_format(bfd *abfd, bfd_format format);
@@end example
@@strong{Description}@@*
This function sets the file format of the BFD @@var{abfd} to the
format @@var{format}. If the target set in the BFD does not
support the format requested, the format is invalid, or the BFD
is not open for writing, then an error occurs.

@@findex bfd_format_string
@@subsubsection @@code{bfd_format_string}
@@strong{Synopsis}
@@example
const char *bfd_format_string(bfd_format format);
@@end example
@@strong{Description}@@*
Return a pointer to a const string
@@code{invalid}, @@code{object}, @@code{archive}, @@code{core}, or @@code{unknown},
depending upon the value of @@var{format}.

@


1.1.6.1
log
@Add generated files on 2.12 release branch.
@
text
@a0 108
@@section File formats
A format is a BFD concept of high level file contents type. The
formats supported by BFD are:

@@itemize @@bullet

@@item
@@code{bfd_object}
@@end itemize
The BFD may contain data, symbols, relocations and debug info.

@@itemize @@bullet

@@item
@@code{bfd_archive}
@@end itemize
The BFD contains other BFDs and an optional index.

@@itemize @@bullet

@@item
@@code{bfd_core}
@@end itemize
The BFD contains the result of an executable core dump.

@@findex bfd_check_format
@@subsubsection @@code{bfd_check_format}
@@strong{Synopsis}
@@example
boolean bfd_check_format(bfd *abfd, bfd_format format);
@@end example
@@strong{Description}@@*
Verify if the file attached to the BFD @@var{abfd} is compatible
with the format @@var{format} (i.e., one of @@code{bfd_object},
@@code{bfd_archive} or @@code{bfd_core}).

If the BFD has been set to a specific target before the
call, only the named target and format combination is
checked. If the target has not been set, or has been set to
@@code{default}, then all the known target backends is
interrogated to determine a match.  If the default target
matches, it is used.  If not, exactly one target must recognize
the file, or an error results.

The function returns @@code{true} on success, otherwise @@code{false}
with one of the following error codes:

@@itemize @@bullet

@@item
@@code{bfd_error_invalid_operation} -
if @@code{format} is not one of @@code{bfd_object}, @@code{bfd_archive} or
@@code{bfd_core}.

@@item
@@code{bfd_error_system_call} -
if an error occured during a read - even some file mismatches
can cause bfd_error_system_calls.

@@item
@@code{file_not_recognised} -
none of the backends recognised the file format.

@@item
@@code{bfd_error_file_ambiguously_recognized} -
more than one backend recognised the file format.
@@end itemize

@@findex bfd_check_format_matches
@@subsubsection @@code{bfd_check_format_matches}
@@strong{Synopsis}
@@example
boolean bfd_check_format_matches(bfd *abfd, bfd_format format, char ***matching);
@@end example
@@strong{Description}@@*
Like @@code{bfd_check_format}, except when it returns false with
@@code{bfd_errno} set to @@code{bfd_error_file_ambiguously_recognized}.  In that
case, if @@var{matching} is not NULL, it will be filled in with
a NULL-terminated list of the names of the formats that matched,
allocated with @@code{malloc}.
Then the user may choose a format and try again.

When done with the list that @@var{matching} points to, the caller
should free it.

@@findex bfd_set_format
@@subsubsection @@code{bfd_set_format}
@@strong{Synopsis}
@@example
boolean bfd_set_format(bfd *abfd, bfd_format format);
@@end example
@@strong{Description}@@*
This function sets the file format of the BFD @@var{abfd} to the
format @@var{format}. If the target set in the BFD does not
support the format requested, the format is invalid, or the BFD
is not open for writing, then an error occurs.

@@findex bfd_format_string
@@subsubsection @@code{bfd_format_string}
@@strong{Synopsis}
@@example
const char *bfd_format_string(bfd_format format);
@@end example
@@strong{Description}@@*
Return a pointer to a const string
@@code{invalid}, @@code{object}, @@code{archive}, @@code{core}, or @@code{unknown},
depending upon the value of @@var{format}.

@


1.1.4.1
log
@Add generated files to release branch.
@
text
@a0 108
@@section File formats
A format is a BFD concept of high level file contents type. The
formats supported by BFD are:

@@itemize @@bullet

@@item
@@code{bfd_object}
@@end itemize
The BFD may contain data, symbols, relocations and debug info.

@@itemize @@bullet

@@item
@@code{bfd_archive}
@@end itemize
The BFD contains other BFDs and an optional index.

@@itemize @@bullet

@@item
@@code{bfd_core}
@@end itemize
The BFD contains the result of an executable core dump.

@@findex bfd_check_format
@@subsubsection @@code{bfd_check_format}
@@strong{Synopsis}
@@example
boolean bfd_check_format(bfd *abfd, bfd_format format);
@@end example
@@strong{Description}@@*
Verify if the file attached to the BFD @@var{abfd} is compatible
with the format @@var{format} (i.e., one of @@code{bfd_object},
@@code{bfd_archive} or @@code{bfd_core}).

If the BFD has been set to a specific target before the
call, only the named target and format combination is
checked. If the target has not been set, or has been set to
@@code{default}, then all the known target backends is
interrogated to determine a match.  If the default target
matches, it is used.  If not, exactly one target must recognize
the file, or an error results.

The function returns @@code{true} on success, otherwise @@code{false}
with one of the following error codes:

@@itemize @@bullet

@@item
@@code{bfd_error_invalid_operation} -
if @@code{format} is not one of @@code{bfd_object}, @@code{bfd_archive} or
@@code{bfd_core}.

@@item
@@code{bfd_error_system_call} -
if an error occured during a read - even some file mismatches
can cause bfd_error_system_calls.

@@item
@@code{file_not_recognised} -
none of the backends recognised the file format.

@@item
@@code{bfd_error_file_ambiguously_recognized} -
more than one backend recognised the file format.
@@end itemize

@@findex bfd_check_format_matches
@@subsubsection @@code{bfd_check_format_matches}
@@strong{Synopsis}
@@example
boolean bfd_check_format_matches(bfd *abfd, bfd_format format, char ***matching);
@@end example
@@strong{Description}@@*
Like @@code{bfd_check_format}, except when it returns false with
@@code{bfd_errno} set to @@code{bfd_error_file_ambiguously_recognized}.  In that
case, if @@var{matching} is not NULL, it will be filled in with
a NULL-terminated list of the names of the formats that matched,
allocated with @@code{malloc}.
Then the user may choose a format and try again.

When done with the list that @@var{matching} points to, the caller
should free it.

@@findex bfd_set_format
@@subsubsection @@code{bfd_set_format}
@@strong{Synopsis}
@@example
boolean bfd_set_format(bfd *abfd, bfd_format format);
@@end example
@@strong{Description}@@*
This function sets the file format of the BFD @@var{abfd} to the
format @@var{format}. If the target set in the BFD does not
support the format requested, the format is invalid, or the BFD
is not open for writing, then an error occurs.

@@findex bfd_format_string
@@subsubsection @@code{bfd_format_string}
@@strong{Synopsis}
@@example
CONST char *bfd_format_string(bfd_format format);
@@end example
@@strong{Description}@@*
Return a pointer to a const string
@@code{invalid}, @@code{object}, @@code{archive}, @@code{core}, or @@code{unknown},
depending upon the value of @@var{format}.

@


1.1.2.1
log
@Add generated files.
@
text
@a0 108
@@section File formats
A format is a BFD concept of high level file contents type. The
formats supported by BFD are: 

@@itemize @@bullet

@@item
@@code{bfd_object}
@@end itemize
The BFD may contain data, symbols, relocations and debug info.

@@itemize @@bullet

@@item
@@code{bfd_archive}
@@end itemize
The BFD contains other BFDs and an optional index.

@@itemize @@bullet

@@item
@@code{bfd_core}
@@end itemize
The BFD contains the result of an executable core dump.

@@findex bfd_check_format
@@subsubsection @@code{bfd_check_format}
@@strong{Synopsis}
@@example
boolean bfd_check_format(bfd *abfd, bfd_format format);
@@end example
@@strong{Description}@@*
Verify if the file attached to the BFD @@var{abfd} is compatible
with the format @@var{format} (i.e., one of @@code{bfd_object},
@@code{bfd_archive} or @@code{bfd_core}).

If the BFD has been set to a specific target before the
call, only the named target and format combination is
checked. If the target has not been set, or has been set to
@@code{default}, then all the known target backends is
interrogated to determine a match.  If the default target
matches, it is used.  If not, exactly one target must recognize
the file, or an error results.

The function returns @@code{true} on success, otherwise @@code{false}
with one of the following error codes:  

@@itemize @@bullet

@@item
@@code{bfd_error_invalid_operation} -
if @@code{format} is not one of @@code{bfd_object}, @@code{bfd_archive} or
@@code{bfd_core}.

@@item
@@code{bfd_error_system_call} -
if an error occured during a read - even some file mismatches
can cause bfd_error_system_calls.

@@item
@@code{file_not_recognised} -
none of the backends recognised the file format.

@@item
@@code{bfd_error_file_ambiguously_recognized} -
more than one backend recognised the file format.
@@end itemize

@@findex bfd_check_format_matches
@@subsubsection @@code{bfd_check_format_matches}
@@strong{Synopsis}
@@example
boolean bfd_check_format_matches(bfd *abfd, bfd_format format, char ***matching);
@@end example
@@strong{Description}@@*
Like @@code{bfd_check_format}, except when it returns false with
@@code{bfd_errno} set to @@code{bfd_error_file_ambiguously_recognized}.  In that
case, if @@var{matching} is not NULL, it will be filled in with
a NULL-terminated list of the names of the formats that matched,
allocated with @@code{malloc}.
Then the user may choose a format and try again.

When done with the list that @@var{matching} points to, the caller
should free it.

@@findex bfd_set_format
@@subsubsection @@code{bfd_set_format}
@@strong{Synopsis}
@@example
boolean bfd_set_format(bfd *abfd, bfd_format format);
@@end example
@@strong{Description}@@*
This function sets the file format of the BFD @@var{abfd} to the
format @@var{format}. If the target set in the BFD does not
support the format requested, the format is invalid, or the BFD
is not open for writing, then an error occurs.

@@findex bfd_format_string
@@subsubsection @@code{bfd_format_string}
@@strong{Synopsis}
@@example
CONST char *bfd_format_string(bfd_format format);
@@end example
@@strong{Description}@@*
Return a pointer to a const string
@@code{invalid}, @@code{object}, @@code{archive}, @@code{core}, or @@code{unknown},
depending upon the value of @@var{format}.

@

