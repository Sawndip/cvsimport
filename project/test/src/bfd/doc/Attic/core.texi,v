head	1.1;
access;
symbols
	binutils-2_23_2:1.1.24.1
	binutils-2_23_1:1.1.24.1
	binutils-2_23-branch:1.1.0.24
	binutils-2_20_1:1.1.22.1
	binutils-2_20:1.1.22.1
	binutils-2_20-branch:1.1.0.22
	binutils-2_19_1:1.1.20.1
	binutils-2_19:1.1.20.1
	binutils-2_19-branch:1.1.0.20
	binutils-2_18:1.1.18.1
	binutils-2_18-branch:1.1.0.18
	binutils-csl-sourcerygxx-3_4_4-32:1.1.14.1
	binutils-csl-sourcerygxx-3_4_4-25:1.1.14.1
	binutils-2_17:1.1.16.1
	binutils-csl-wrs-linux-3_4_4-24:1.1.14.1
	binutils-csl-wrs-linux-3_4_4-23:1.1.14.1
	binutils-csl-wrs-linux-3_4_4-22:1.1.14.1
	binutils-csl-wrs-linux-3_4_4-21:1.1.14.1
	binutils-csl-wrs-linux-3_4_4-20:1.1.14.1
	binutils-2_17-branch:1.1.0.16
	binutils-csl-gxxpro-3_4-branch:1.1.14.1.0.4
	binutils-csl-gxxpro-3_4-branchpoint:1.1.14.1
	binutils-2_16_1:1.1.14.1
	binutils-csl-arm-2005q1b:1.1.14.1
	binutils-2_16:1.1.14.1
	binutils-csl-arm-2005q1a:1.1.14.1
	binutils-csl-arm-2005q1-branch:1.1.14.1.0.2
	binutils-csl-arm-2005q1-branchpoint:1.1.14.1
	binutils-2_16-branch:1.1.0.14
	binutils-2_15:1.1.12.1
	binutils-2_15-branch:1.1.0.12
	binutils-2_14:1.1.10.1
	binutils-2_14-branch:1.1.0.10
	binutils-2_13_2_1:1.1.8.1
	binutils-2_13_2:1.1.8.1
	binutils-2_13_1:1.1.8.1
	binutils-2_13:1.1.8.1
	binutils-2_13-branch:1.1.0.8
	binutils-2_12_1:1.1.6.1
	binutils-2_12:1.1.6.1
	binutils-2_12-branch:1.1.0.6
	binutils-2_11_2:1.1.4.1
	binutils-2_11_1:1.1.4.1
	binutils-2_11:1.1.4.1
	binutils-2_11-branch:1.1.0.4
	binutils-2_10_1:1.1.2.1
	binutils-2_10:1.1.2.1
	binutils_latest_snapshot:1.1.2.1
	binutils-2_10-branch:1.1.0.2;
locks; strict;
comment	@# @;


1.1
date	2000.05.29.14.08.51;	author pb;	state dead;
branches
	1.1.2.1
	1.1.4.1
	1.1.6.1
	1.1.8.1
	1.1.10.1
	1.1.12.1
	1.1.14.1
	1.1.16.1
	1.1.18.1
	1.1.20.1
	1.1.22.1
	1.1.24.1;
next	;

1.1.2.1
date	2000.05.29.14.08.51;	author pb;	state Exp;
branches;
next	;

1.1.4.1
date	2001.03.12.15.40.30;	author pb;	state Exp;
branches;
next	;

1.1.6.1
date	2002.03.08.17.00.49;	author drow;	state Exp;
branches;
next	;

1.1.8.1
date	2002.08.05.20.43.45;	author drow;	state Exp;
branches;
next	;

1.1.10.1
date	2003.04.27.20.36.06;	author drow;	state Exp;
branches;
next	;

1.1.12.1
date	2004.04.09.19.32.14;	author drow;	state Exp;
branches;
next	;

1.1.14.1
date	2005.03.08.17.19.41;	author drow;	state Exp;
branches;
next	;

1.1.16.1
date	2006.04.16.18.36.40;	author drow;	state Exp;
branches;
next	;

1.1.18.1
date	2007.08.06.21.05.18;	author drow;	state Exp;
branches;
next	;

1.1.20.1
date	2008.09.11.08.24.13;	author gingold;	state Exp;
branches;
next	;

1.1.22.1
date	2009.10.16.12.07.01;	author gingold;	state Exp;
branches;
next	;

1.1.24.1
date	2012.11.13.14.51.25;	author gingold;	state Exp;
branches;
next	;


desc
@@


1.1
log
@file core.texi was initially added on branch binutils-2_10-branch.
@
text
@@


1.1.24.1
log
@*** empty log message ***
@
text
@a0 70
@@section Core files


@@subsection Core file functions


@@strong{Description}@@*
These are functions pertaining to core files.

@@findex bfd_core_file_failing_command
@@subsubsection @@code{bfd_core_file_failing_command}
@@strong{Synopsis}
@@example
const char *bfd_core_file_failing_command (bfd *abfd);
@@end example
@@strong{Description}@@*
Return a read-only string explaining which program was running
when it failed and produced the core file @@var{abfd}.

@@findex bfd_core_file_failing_signal
@@subsubsection @@code{bfd_core_file_failing_signal}
@@strong{Synopsis}
@@example
int bfd_core_file_failing_signal (bfd *abfd);
@@end example
@@strong{Description}@@*
Returns the signal number which caused the core dump which
generated the file the BFD @@var{abfd} is attached to.

@@findex bfd_core_file_pid
@@subsubsection @@code{bfd_core_file_pid}
@@strong{Synopsis}
@@example
int bfd_core_file_pid (bfd *abfd);
@@end example
@@strong{Description}@@*
Returns the PID of the process the core dump the BFD
@@var{abfd} is attached to was generated from.

@@findex core_file_matches_executable_p
@@subsubsection @@code{core_file_matches_executable_p}
@@strong{Synopsis}
@@example
bfd_boolean core_file_matches_executable_p
   (bfd *core_bfd, bfd *exec_bfd);
@@end example
@@strong{Description}@@*
Return @@code{TRUE} if the core file attached to @@var{core_bfd}
was generated by a run of the executable file attached to
@@var{exec_bfd}, @@code{FALSE} otherwise.

@@findex generic_core_file_matches_executable_p
@@subsubsection @@code{generic_core_file_matches_executable_p}
@@strong{Synopsis}
@@example
bfd_boolean generic_core_file_matches_executable_p
   (bfd *core_bfd, bfd *exec_bfd);
@@end example
@@strong{Description}@@*
Return TRUE if the core file attached to @@var{core_bfd}
was generated by a run of the executable file attached
to @@var{exec_bfd}.  The match is based on executable
basenames only.

Note: When not able to determine the core file failing
command or the executable name, we still return TRUE even
though we're not sure that core file and executable match.
This is to avoid generating a false warning in situations
where we really don't know whether they match or not.

@


1.1.22.1
log
@bfd/
2009-10-16  Tristan Gingold  <gingold@@adacore.com>

	* configure.in: Bump version to 2.20
	* Makefile.am (RELEASE): Set.
	* configure, Makefile.in: Regenerate.
@
text
@a0 60
@@section Core files


@@subsection Core file functions


@@strong{Description}@@*
These are functions pertaining to core files.

@@findex bfd_core_file_failing_command
@@subsubsection @@code{bfd_core_file_failing_command}
@@strong{Synopsis}
@@example
const char *bfd_core_file_failing_command (bfd *abfd);
@@end example
@@strong{Description}@@*
Return a read-only string explaining which program was running
when it failed and produced the core file @@var{abfd}.

@@findex bfd_core_file_failing_signal
@@subsubsection @@code{bfd_core_file_failing_signal}
@@strong{Synopsis}
@@example
int bfd_core_file_failing_signal (bfd *abfd);
@@end example
@@strong{Description}@@*
Returns the signal number which caused the core dump which
generated the file the BFD @@var{abfd} is attached to.

@@findex core_file_matches_executable_p
@@subsubsection @@code{core_file_matches_executable_p}
@@strong{Synopsis}
@@example
bfd_boolean core_file_matches_executable_p
   (bfd *core_bfd, bfd *exec_bfd);
@@end example
@@strong{Description}@@*
Return @@code{TRUE} if the core file attached to @@var{core_bfd}
was generated by a run of the executable file attached to
@@var{exec_bfd}, @@code{FALSE} otherwise.

@@findex generic_core_file_matches_executable_p
@@subsubsection @@code{generic_core_file_matches_executable_p}
@@strong{Synopsis}
@@example
bfd_boolean generic_core_file_matches_executable_p
   (bfd *core_bfd, bfd *exec_bfd);
@@end example
@@strong{Description}@@*
Return TRUE if the core file attached to @@var{core_bfd}
was generated by a run of the executable file attached
to @@var{exec_bfd}.  The match is based on executable
basenames only.

Note: When not able to determine the core file failing
command or the executable name, we still return TRUE even
though we're not sure that core file and executable match.
This is to avoid generating a false warning in situations
where we really don't know whether they match or not.

@


1.1.20.1
log
@Generated files for binutils 2.19.
@
text
@a0 60
@@section Core files


@@subsection Core file functions


@@strong{Description}@@*
These are functions pertaining to core files.

@@findex bfd_core_file_failing_command
@@subsubsection @@code{bfd_core_file_failing_command}
@@strong{Synopsis}
@@example
const char *bfd_core_file_failing_command (bfd *abfd);
@@end example
@@strong{Description}@@*
Return a read-only string explaining which program was running
when it failed and produced the core file @@var{abfd}.

@@findex bfd_core_file_failing_signal
@@subsubsection @@code{bfd_core_file_failing_signal}
@@strong{Synopsis}
@@example
int bfd_core_file_failing_signal (bfd *abfd);
@@end example
@@strong{Description}@@*
Returns the signal number which caused the core dump which
generated the file the BFD @@var{abfd} is attached to.

@@findex core_file_matches_executable_p
@@subsubsection @@code{core_file_matches_executable_p}
@@strong{Synopsis}
@@example
bfd_boolean core_file_matches_executable_p
   (bfd *core_bfd, bfd *exec_bfd);
@@end example
@@strong{Description}@@*
Return @@code{TRUE} if the core file attached to @@var{core_bfd}
was generated by a run of the executable file attached to
@@var{exec_bfd}, @@code{FALSE} otherwise.

@@findex generic_core_file_matches_executable_p
@@subsubsection @@code{generic_core_file_matches_executable_p}
@@strong{Synopsis}
@@example
bfd_boolean generic_core_file_matches_executable_p
   (bfd *core_bfd, bfd *exec_bfd);
@@end example
@@strong{Description}@@*
Return TRUE if the core file attached to @@var{core_bfd}
was generated by a run of the executable file attached
to @@var{exec_bfd}.  The match is based on executable
basenames only.

Note: When not able to determine the core file failing
command or the executable name, we still return TRUE even
though we're not sure that core file and executable match.
This is to avoid generating a false warning in situations
where we really don't know whether they match or not.

@


1.1.18.1
log
@Commit generated files for binutils 2.17.90.
@
text
@a0 60
@@section Core files


@@subsection Core file functions


@@strong{Description}@@*
These are functions pertaining to core files.

@@findex bfd_core_file_failing_command
@@subsubsection @@code{bfd_core_file_failing_command}
@@strong{Synopsis}
@@example
const char *bfd_core_file_failing_command (bfd *abfd);
@@end example
@@strong{Description}@@*
Return a read-only string explaining which program was running
when it failed and produced the core file @@var{abfd}.

@@findex bfd_core_file_failing_signal
@@subsubsection @@code{bfd_core_file_failing_signal}
@@strong{Synopsis}
@@example
int bfd_core_file_failing_signal (bfd *abfd);
@@end example
@@strong{Description}@@*
Returns the signal number which caused the core dump which
generated the file the BFD @@var{abfd} is attached to.

@@findex core_file_matches_executable_p
@@subsubsection @@code{core_file_matches_executable_p}
@@strong{Synopsis}
@@example
bfd_boolean core_file_matches_executable_p
   (bfd *core_bfd, bfd *exec_bfd);
@@end example
@@strong{Description}@@*
Return @@code{TRUE} if the core file attached to @@var{core_bfd}
was generated by a run of the executable file attached to
@@var{exec_bfd}, @@code{FALSE} otherwise.

@@findex generic_core_file_matches_executable_p
@@subsubsection @@code{generic_core_file_matches_executable_p}
@@strong{Synopsis}
@@example
bfd_boolean generic_core_file_matches_executable_p
   (bfd *core_bfd, bfd *exec_bfd);
@@end example
@@strong{Description}@@*
Return TRUE if the core file attached to @@var{core_bfd}
was generated by a run of the executable file attached
to @@var{exec_bfd}.  The match is based on executable
basenames only.

Note: When not able to determine the core file failing
command or the executable name, we still return TRUE even
though we're not sure that core file and executable match.
This is to avoid generating a false warning in situations
where we really don't know whether they match or not.

@


1.1.16.1
log
@Commit generated files.
@
text
@a0 60
@@section Core files


@@subsection Core file functions


@@strong{Description}@@*
These are functions pertaining to core files.

@@findex bfd_core_file_failing_command
@@subsubsection @@code{bfd_core_file_failing_command}
@@strong{Synopsis}
@@example
const char *bfd_core_file_failing_command (bfd *abfd);
@@end example
@@strong{Description}@@*
Return a read-only string explaining which program was running
when it failed and produced the core file @@var{abfd}.

@@findex bfd_core_file_failing_signal
@@subsubsection @@code{bfd_core_file_failing_signal}
@@strong{Synopsis}
@@example
int bfd_core_file_failing_signal (bfd *abfd);
@@end example
@@strong{Description}@@*
Returns the signal number which caused the core dump which
generated the file the BFD @@var{abfd} is attached to.

@@findex core_file_matches_executable_p
@@subsubsection @@code{core_file_matches_executable_p}
@@strong{Synopsis}
@@example
bfd_boolean core_file_matches_executable_p
   (bfd *core_bfd, bfd *exec_bfd);
@@end example
@@strong{Description}@@*
Return @@code{TRUE} if the core file attached to @@var{core_bfd}
was generated by a run of the executable file attached to
@@var{exec_bfd}, @@code{FALSE} otherwise.

@@findex generic_core_file_matches_executable_p
@@subsubsection @@code{generic_core_file_matches_executable_p}
@@strong{Synopsis}
@@example
bfd_boolean generic_core_file_matches_executable_p
   (bfd *core_bfd, bfd *exec_bfd);
@@end example
@@strong{Description}@@*
Return TRUE if the core file attached to @@var{core_bfd}
was generated by a run of the executable file attached
to @@var{exec_bfd}.  The match is based on executable
basenames only.

Note: When not able to determine the core file failing
command or the executable name, we still return TRUE even
though we're not sure that core file and executable match.
This is to avoid generating a false warning in situations
where we really don't know whether they match or not.

@


1.1.14.1
log
@Commit generated files for the binutils 2.16 branch.
@
text
@a0 38
@@section Core files


@@strong{Description}@@*
These are functions pertaining to core files.

@@findex bfd_core_file_failing_command
@@subsubsection @@code{bfd_core_file_failing_command}
@@strong{Synopsis}
@@example
const char *bfd_core_file_failing_command (bfd *abfd);
@@end example
@@strong{Description}@@*
Return a read-only string explaining which program was running
when it failed and produced the core file @@var{abfd}.

@@findex bfd_core_file_failing_signal
@@subsubsection @@code{bfd_core_file_failing_signal}
@@strong{Synopsis}
@@example
int bfd_core_file_failing_signal (bfd *abfd);
@@end example
@@strong{Description}@@*
Returns the signal number which caused the core dump which
generated the file the BFD @@var{abfd} is attached to.

@@findex core_file_matches_executable_p
@@subsubsection @@code{core_file_matches_executable_p}
@@strong{Synopsis}
@@example
bfd_boolean core_file_matches_executable_p
   (bfd *core_bfd, bfd *exec_bfd);
@@end example
@@strong{Description}@@*
Return @@code{TRUE} if the core file attached to @@var{core_bfd}
was generated by a run of the executable file attached to
@@var{exec_bfd}, @@code{FALSE} otherwise.

@


1.1.12.1
log
@Generated files for the 2.15 branch.
@
text
@a0 38
@@section Core files


@@strong{Description}@@*
These are functions pertaining to core files.

@@findex bfd_core_file_failing_command
@@subsubsection @@code{bfd_core_file_failing_command}
@@strong{Synopsis}
@@example
const char *bfd_core_file_failing_command (bfd *abfd);
@@end example
@@strong{Description}@@*
Return a read-only string explaining which program was running
when it failed and produced the core file @@var{abfd}.

@@findex bfd_core_file_failing_signal
@@subsubsection @@code{bfd_core_file_failing_signal}
@@strong{Synopsis}
@@example
int bfd_core_file_failing_signal (bfd *abfd);
@@end example
@@strong{Description}@@*
Returns the signal number which caused the core dump which
generated the file the BFD @@var{abfd} is attached to.

@@findex core_file_matches_executable_p
@@subsubsection @@code{core_file_matches_executable_p}
@@strong{Synopsis}
@@example
bfd_boolean core_file_matches_executable_p
   (bfd *core_bfd, bfd *exec_bfd);
@@end example
@@strong{Description}@@*
Return @@code{TRUE} if the core file attached to @@var{core_bfd}
was generated by a run of the executable file attached to
@@var{exec_bfd}, @@code{FALSE} otherwise.

@


1.1.10.1
log
@Add generated files on 2.14 branch.
@
text
@a0 38
@@section Core files


@@strong{Description}@@*
These are functions pertaining to core files.

@@findex bfd_core_file_failing_command
@@subsubsection @@code{bfd_core_file_failing_command}
@@strong{Synopsis}
@@example
const char *bfd_core_file_failing_command(bfd *abfd);
@@end example
@@strong{Description}@@*
Return a read-only string explaining which program was running
when it failed and produced the core file @@var{abfd}.

@@findex bfd_core_file_failing_signal
@@subsubsection @@code{bfd_core_file_failing_signal}
@@strong{Synopsis}
@@example
int bfd_core_file_failing_signal(bfd *abfd);
@@end example
@@strong{Description}@@*
Returns the signal number which caused the core dump which
generated the file the BFD @@var{abfd} is attached to.

@@findex core_file_matches_executable_p
@@subsubsection @@code{core_file_matches_executable_p}
@@strong{Synopsis}
@@example
bfd_boolean core_file_matches_executable_p
   (bfd *core_bfd, bfd *exec_bfd);
@@end example
@@strong{Description}@@*
Return @@code{TRUE} if the core file attached to @@var{core_bfd}
was generated by a run of the executable file attached to
@@var{exec_bfd}, @@code{FALSE} otherwise.

@


1.1.8.1
log
@Add generated files.
@
text
@a0 38
@@section Core files


@@strong{Description}@@*
These are functions pertaining to core files.

@@findex bfd_core_file_failing_command
@@subsubsection @@code{bfd_core_file_failing_command}
@@strong{Synopsis}
@@example
const char *bfd_core_file_failing_command(bfd *abfd);
@@end example
@@strong{Description}@@*
Return a read-only string explaining which program was running
when it failed and produced the core file @@var{abfd}.

@@findex bfd_core_file_failing_signal
@@subsubsection @@code{bfd_core_file_failing_signal}
@@strong{Synopsis}
@@example
int bfd_core_file_failing_signal(bfd *abfd);
@@end example
@@strong{Description}@@*
Returns the signal number which caused the core dump which
generated the file the BFD @@var{abfd} is attached to.

@@findex core_file_matches_executable_p
@@subsubsection @@code{core_file_matches_executable_p}
@@strong{Synopsis}
@@example
boolean core_file_matches_executable_p
   (bfd *core_bfd, bfd *exec_bfd);
@@end example
@@strong{Description}@@*
Return @@code{true} if the core file attached to @@var{core_bfd}
was generated by a run of the executable file attached to
@@var{exec_bfd}, @@code{false} otherwise.

@


1.1.6.1
log
@Add generated files on 2.12 release branch.
@
text
@a0 38
@@section Core files


@@strong{Description}@@*
These are functions pertaining to core files.

@@findex bfd_core_file_failing_command
@@subsubsection @@code{bfd_core_file_failing_command}
@@strong{Synopsis}
@@example
const char *bfd_core_file_failing_command(bfd *abfd);
@@end example
@@strong{Description}@@*
Return a read-only string explaining which program was running
when it failed and produced the core file @@var{abfd}.

@@findex bfd_core_file_failing_signal
@@subsubsection @@code{bfd_core_file_failing_signal}
@@strong{Synopsis}
@@example
int bfd_core_file_failing_signal(bfd *abfd);
@@end example
@@strong{Description}@@*
Returns the signal number which caused the core dump which
generated the file the BFD @@var{abfd} is attached to.

@@findex core_file_matches_executable_p
@@subsubsection @@code{core_file_matches_executable_p}
@@strong{Synopsis}
@@example
boolean core_file_matches_executable_p
   (bfd *core_bfd, bfd *exec_bfd);
@@end example
@@strong{Description}@@*
Return @@code{true} if the core file attached to @@var{core_bfd}
was generated by a run of the executable file attached to
@@var{exec_bfd}, @@code{false} otherwise.

@


1.1.4.1
log
@Add generated files to release branch.
@
text
@a0 38
@@section Core files


@@strong{Description}@@*
These are functions pertaining to core files.

@@findex bfd_core_file_failing_command
@@subsubsection @@code{bfd_core_file_failing_command}
@@strong{Synopsis}
@@example
CONST char *bfd_core_file_failing_command(bfd *abfd);
@@end example
@@strong{Description}@@*
Return a read-only string explaining which program was running
when it failed and produced the core file @@var{abfd}.

@@findex bfd_core_file_failing_signal
@@subsubsection @@code{bfd_core_file_failing_signal}
@@strong{Synopsis}
@@example
int bfd_core_file_failing_signal(bfd *abfd);
@@end example
@@strong{Description}@@*
Returns the signal number which caused the core dump which
generated the file the BFD @@var{abfd} is attached to.

@@findex core_file_matches_executable_p
@@subsubsection @@code{core_file_matches_executable_p}
@@strong{Synopsis}
@@example
boolean core_file_matches_executable_p
   (bfd *core_bfd, bfd *exec_bfd);
@@end example
@@strong{Description}@@*
Return @@code{true} if the core file attached to @@var{core_bfd}
was generated by a run of the executable file attached to
@@var{exec_bfd}, @@code{false} otherwise.

@


1.1.2.1
log
@Add generated files.
@
text
@a0 38
@@section Core files


@@strong{Description}@@*
These are functions pertaining to core files.

@@findex bfd_core_file_failing_command
@@subsubsection @@code{bfd_core_file_failing_command}
@@strong{Synopsis}
@@example
CONST char *bfd_core_file_failing_command(bfd *abfd);
@@end example
@@strong{Description}@@*
Return a read-only string explaining which program was running
when it failed and produced the core file @@var{abfd}.

@@findex bfd_core_file_failing_signal
@@subsubsection @@code{bfd_core_file_failing_signal}
@@strong{Synopsis}
@@example
int bfd_core_file_failing_signal(bfd *abfd);
@@end example
@@strong{Description}@@*
Returns the signal number which caused the core dump which
generated the file the BFD @@var{abfd} is attached to.

@@findex core_file_matches_executable_p
@@subsubsection @@code{core_file_matches_executable_p}
@@strong{Synopsis}
@@example
boolean core_file_matches_executable_p
   (bfd *core_bfd, bfd *exec_bfd);
@@end example
@@strong{Description}@@*
Return @@code{true} if the core file attached to @@var{core_bfd}
was generated by a run of the executable file attached to
@@var{exec_bfd}, @@code{false} otherwise.

@

