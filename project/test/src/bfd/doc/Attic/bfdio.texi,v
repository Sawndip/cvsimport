head	1.1;
access;
symbols
	binutils-2_23_2:1.1.16.1
	binutils-2_23_1:1.1.16.1
	binutils-2_23-branch:1.1.0.16
	binutils-2_20_1:1.1.14.1
	binutils-2_20:1.1.14.1
	binutils-2_20-branch:1.1.0.14
	binutils-2_19_1:1.1.12.1
	binutils-2_19:1.1.12.1
	binutils-2_19-branch:1.1.0.12
	binutils-2_18:1.1.10.1
	binutils-2_18-branch:1.1.0.10
	binutils-csl-sourcerygxx-3_4_4-32:1.1.6.1
	binutils-csl-sourcerygxx-3_4_4-25:1.1.6.1
	binutils-2_17:1.1.8.1
	binutils-csl-wrs-linux-3_4_4-24:1.1.6.1
	binutils-csl-wrs-linux-3_4_4-23:1.1.6.1
	binutils-csl-wrs-linux-3_4_4-22:1.1.6.1
	binutils-csl-wrs-linux-3_4_4-21:1.1.6.1
	binutils-csl-wrs-linux-3_4_4-20:1.1.6.1
	binutils-2_17-branch:1.1.0.8
	binutils-csl-gxxpro-3_4-branch:1.1.6.1.0.4
	binutils-csl-gxxpro-3_4-branchpoint:1.1.6.1
	binutils-2_16_1:1.1.6.1
	binutils-csl-arm-2005q1b:1.1.6.1
	binutils-2_16:1.1.6.1
	binutils-csl-arm-2005q1a:1.1.6.1
	binutils-csl-arm-2005q1-branch:1.1.6.1.0.2
	binutils-csl-arm-2005q1-branchpoint:1.1.6.1
	binutils-2_16-branch:1.1.0.6
	binutils-2_15:1.1.4.1
	binutils-2_15-branch:1.1.0.4
	binutils-2_14:1.1.2.1
	binutils-2_14-branch:1.1.0.2;
locks; strict;
comment	@# @;


1.1
date	2003.04.27.20.36.06;	author drow;	state dead;
branches
	1.1.2.1
	1.1.4.1
	1.1.6.1
	1.1.8.1
	1.1.10.1
	1.1.12.1
	1.1.14.1
	1.1.16.1;
next	;

1.1.2.1
date	2003.04.27.20.36.06;	author drow;	state Exp;
branches;
next	;

1.1.4.1
date	2004.04.09.19.32.14;	author drow;	state Exp;
branches;
next	;

1.1.6.1
date	2005.03.08.17.19.41;	author drow;	state Exp;
branches;
next	;

1.1.8.1
date	2006.04.16.18.36.40;	author drow;	state Exp;
branches;
next	;

1.1.10.1
date	2007.08.06.21.05.18;	author drow;	state Exp;
branches;
next	;

1.1.12.1
date	2008.09.11.08.24.13;	author gingold;	state Exp;
branches;
next	;

1.1.14.1
date	2009.10.16.12.07.01;	author gingold;	state Exp;
branches;
next	;

1.1.16.1
date	2012.11.13.14.51.25;	author gingold;	state Exp;
branches;
next	;


desc
@@


1.1
log
@file bfdio.texi was initially added on branch binutils-2_14-branch.
@
text
@@


1.1.16.1
log
@*** empty log message ***
@
text
@a0 95
@@findex struct bfd_iovec
@@subsubsection @@code{struct bfd_iovec}
@@strong{Description}@@*
The @@code{struct bfd_iovec} contains the internal file I/O class.
Each @@code{BFD} has an instance of this class and all file I/O is
routed through it (it is assumed that the instance implements
all methods listed below).
@@example
struct bfd_iovec
@@{
  /* To avoid problems with macros, a "b" rather than "f"
     prefix is prepended to each method name.  */
  /* Attempt to read/write NBYTES on ABFD's IOSTREAM storing/fetching
     bytes starting at PTR.  Return the number of bytes actually
     transfered (a read past end-of-file returns less than NBYTES),
     or -1 (setting @@code{bfd_error}) if an error occurs.  */
  file_ptr (*bread) (struct bfd *abfd, void *ptr, file_ptr nbytes);
  file_ptr (*bwrite) (struct bfd *abfd, const void *ptr,
                      file_ptr nbytes);
  /* Return the current IOSTREAM file offset, or -1 (setting @@code{bfd_error}
     if an error occurs.  */
  file_ptr (*btell) (struct bfd *abfd);
  /* For the following, on successful completion a value of 0 is returned.
     Otherwise, a value of -1 is returned (and  @@code{bfd_error} is set).  */
  int (*bseek) (struct bfd *abfd, file_ptr offset, int whence);
  int (*bclose) (struct bfd *abfd);
  int (*bflush) (struct bfd *abfd);
  int (*bstat) (struct bfd *abfd, struct stat *sb);
  /* Mmap a part of the files. ADDR, LEN, PROT, FLAGS and OFFSET are the usual
     mmap parameter, except that LEN and OFFSET do not need to be page
     aligned.  Returns (void *)-1 on failure, mmapped address on success.
     Also write in MAP_ADDR the address of the page aligned buffer and in
     MAP_LEN the size mapped (a page multiple).  Use unmap with MAP_ADDR and
     MAP_LEN to unmap.  */
  void *(*bmmap) (struct bfd *abfd, void *addr, bfd_size_type len,
                  int prot, int flags, file_ptr offset,
                  void **map_addr, bfd_size_type *map_len);
@@};
extern const struct bfd_iovec _bfd_memory_iovec;
@@end example

@@findex bfd_get_mtime
@@subsubsection @@code{bfd_get_mtime}
@@strong{Synopsis}
@@example
long bfd_get_mtime (bfd *abfd);
@@end example
@@strong{Description}@@*
Return the file modification time (as read from the file system, or
from the archive header for archive members).

@@findex bfd_get_size
@@subsubsection @@code{bfd_get_size}
@@strong{Synopsis}
@@example
file_ptr bfd_get_size (bfd *abfd);
@@end example
@@strong{Description}@@*
Return the file size (as read from file system) for the file
associated with BFD @@var{abfd}.

The initial motivation for, and use of, this routine is not
so we can get the exact size of the object the BFD applies to, since
that might not be generally possible (archive members for example).
It would be ideal if someone could eventually modify
it so that such results were guaranteed.

Instead, we want to ask questions like "is this NNN byte sized
object I'm about to try read from file offset YYY reasonable?"
As as example of where we might do this, some object formats
use string tables for which the first @@code{sizeof (long)} bytes of the
table contain the size of the table itself, including the size bytes.
If an application tries to read what it thinks is one of these
string tables, without some way to validate the size, and for
some reason the size is wrong (byte swapping error, wrong location
for the string table, etc.), the only clue is likely to be a read
error when it tries to read the table, or a "virtual memory
exhausted" error when it tries to allocate 15 bazillon bytes
of space for the 15 bazillon byte table it is about to read.
This function at least allows us to answer the question, "is the
size reasonable?".

@@findex bfd_mmap
@@subsubsection @@code{bfd_mmap}
@@strong{Synopsis}
@@example
void *bfd_mmap (bfd *abfd, void *addr, bfd_size_type len,
    int prot, int flags, file_ptr offset,
    void **map_addr, bfd_size_type *map_len);
@@end example
@@strong{Description}@@*
Return mmap()ed region of the file, if possible and implemented.
LEN and OFFSET do not need to be page aligned.  The page aligned
address and length are written to MAP_ADDR and MAP_LEN.

@


1.1.14.1
log
@bfd/
2009-10-16  Tristan Gingold  <gingold@@adacore.com>

	* configure.in: Bump version to 2.20
	* Makefile.am (RELEASE): Set.
	* configure, Makefile.in: Regenerate.
@
text
@a0 85
@@findex struct bfd_iovec
@@subsubsection @@code{struct bfd_iovec}
@@strong{Description}@@*
The @@code{struct bfd_iovec} contains the internal file I/O class.
Each @@code{BFD} has an instance of this class and all file I/O is
routed through it (it is assumed that the instance implements
all methods listed below).
@@example
struct bfd_iovec
@@{
  /* To avoid problems with macros, a "b" rather than "f"
     prefix is prepended to each method name.  */
  /* Attempt to read/write NBYTES on ABFD's IOSTREAM storing/fetching
     bytes starting at PTR.  Return the number of bytes actually
     transfered (a read past end-of-file returns less than NBYTES),
     or -1 (setting @@code{bfd_error}) if an error occurs.  */
  file_ptr (*bread) (struct bfd *abfd, void *ptr, file_ptr nbytes);
  file_ptr (*bwrite) (struct bfd *abfd, const void *ptr,
                      file_ptr nbytes);
  /* Return the current IOSTREAM file offset, or -1 (setting @@code{bfd_error}
     if an error occurs.  */
  file_ptr (*btell) (struct bfd *abfd);
  /* For the following, on successful completion a value of 0 is returned.
     Otherwise, a value of -1 is returned (and  @@code{bfd_error} is set).  */
  int (*bseek) (struct bfd *abfd, file_ptr offset, int whence);
  int (*bclose) (struct bfd *abfd);
  int (*bflush) (struct bfd *abfd);
  int (*bstat) (struct bfd *abfd, struct stat *sb);
  /* Just like mmap: (void*)-1 on failure, mmapped address on success.  */
  void *(*bmmap) (struct bfd *abfd, void *addr, bfd_size_type len,
                  int prot, int flags, file_ptr offset);
@@};
@@end example

@@findex bfd_get_mtime
@@subsubsection @@code{bfd_get_mtime}
@@strong{Synopsis}
@@example
long bfd_get_mtime (bfd *abfd);
@@end example
@@strong{Description}@@*
Return the file modification time (as read from the file system, or
from the archive header for archive members).

@@findex bfd_get_size
@@subsubsection @@code{bfd_get_size}
@@strong{Synopsis}
@@example
file_ptr bfd_get_size (bfd *abfd);
@@end example
@@strong{Description}@@*
Return the file size (as read from file system) for the file
associated with BFD @@var{abfd}.

The initial motivation for, and use of, this routine is not
so we can get the exact size of the object the BFD applies to, since
that might not be generally possible (archive members for example).
It would be ideal if someone could eventually modify
it so that such results were guaranteed.

Instead, we want to ask questions like "is this NNN byte sized
object I'm about to try read from file offset YYY reasonable?"
As as example of where we might do this, some object formats
use string tables for which the first @@code{sizeof (long)} bytes of the
table contain the size of the table itself, including the size bytes.
If an application tries to read what it thinks is one of these
string tables, without some way to validate the size, and for
some reason the size is wrong (byte swapping error, wrong location
for the string table, etc.), the only clue is likely to be a read
error when it tries to read the table, or a "virtual memory
exhausted" error when it tries to allocate 15 bazillon bytes
of space for the 15 bazillon byte table it is about to read.
This function at least allows us to answer the question, "is the
size reasonable?".

@@findex bfd_mmap
@@subsubsection @@code{bfd_mmap}
@@strong{Synopsis}
@@example
void *bfd_mmap (bfd *abfd, void *addr, bfd_size_type len,
    int prot, int flags, file_ptr offset);
@@end example
@@strong{Description}@@*
Return mmap()ed region of the file, if possible and implemented.

@


1.1.12.1
log
@Generated files for binutils 2.19.
@
text
@a0 72
@@findex struct bfd_iovec
@@subsubsection @@code{struct bfd_iovec}
@@strong{Description}@@*
The @@code{struct bfd_iovec} contains the internal file I/O class.
Each @@code{BFD} has an instance of this class and all file I/O is
routed through it (it is assumed that the instance implements
all methods listed below).
@@example
struct bfd_iovec
@@{
  /* To avoid problems with macros, a "b" rather than "f"
     prefix is prepended to each method name.  */
  /* Attempt to read/write NBYTES on ABFD's IOSTREAM storing/fetching
     bytes starting at PTR.  Return the number of bytes actually
     transfered (a read past end-of-file returns less than NBYTES),
     or -1 (setting @@code{bfd_error}) if an error occurs.  */
  file_ptr (*bread) (struct bfd *abfd, void *ptr, file_ptr nbytes);
  file_ptr (*bwrite) (struct bfd *abfd, const void *ptr,
                      file_ptr nbytes);
  /* Return the current IOSTREAM file offset, or -1 (setting @@code{bfd_error}
     if an error occurs.  */
  file_ptr (*btell) (struct bfd *abfd);
  /* For the following, on successful completion a value of 0 is returned.
     Otherwise, a value of -1 is returned (and  @@code{bfd_error} is set).  */
  int (*bseek) (struct bfd *abfd, file_ptr offset, int whence);
  int (*bclose) (struct bfd *abfd);
  int (*bflush) (struct bfd *abfd);
  int (*bstat) (struct bfd *abfd, struct stat *sb);
@@};
@@end example

@@findex bfd_get_mtime
@@subsubsection @@code{bfd_get_mtime}
@@strong{Synopsis}
@@example
long bfd_get_mtime (bfd *abfd);
@@end example
@@strong{Description}@@*
Return the file modification time (as read from the file system, or
from the archive header for archive members).

@@findex bfd_get_size
@@subsubsection @@code{bfd_get_size}
@@strong{Synopsis}
@@example
file_ptr bfd_get_size (bfd *abfd);
@@end example
@@strong{Description}@@*
Return the file size (as read from file system) for the file
associated with BFD @@var{abfd}.

The initial motivation for, and use of, this routine is not
so we can get the exact size of the object the BFD applies to, since
that might not be generally possible (archive members for example).
It would be ideal if someone could eventually modify
it so that such results were guaranteed.

Instead, we want to ask questions like "is this NNN byte sized
object I'm about to try read from file offset YYY reasonable?"
As as example of where we might do this, some object formats
use string tables for which the first @@code{sizeof (long)} bytes of the
table contain the size of the table itself, including the size bytes.
If an application tries to read what it thinks is one of these
string tables, without some way to validate the size, and for
some reason the size is wrong (byte swapping error, wrong location
for the string table, etc.), the only clue is likely to be a read
error when it tries to read the table, or a "virtual memory
exhausted" error when it tries to allocate 15 bazillon bytes
of space for the 15 bazillon byte table it is about to read.
This function at least allows us to answer the question, "is the
size reasonable?".

@


1.1.10.1
log
@Commit generated files for binutils 2.17.90.
@
text
@a0 72
@@findex struct bfd_iovec
@@subsubsection @@code{struct bfd_iovec}
@@strong{Description}@@*
The @@code{struct bfd_iovec} contains the internal file I/O class.
Each @@code{BFD} has an instance of this class and all file I/O is
routed through it (it is assumed that the instance implements
all methods listed below).
@@example
struct bfd_iovec
@@{
  /* To avoid problems with macros, a "b" rather than "f"
     prefix is prepended to each method name.  */
  /* Attempt to read/write NBYTES on ABFD's IOSTREAM storing/fetching
     bytes starting at PTR.  Return the number of bytes actually
     transfered (a read past end-of-file returns less than NBYTES),
     or -1 (setting @@code{bfd_error}) if an error occurs.  */
  file_ptr (*bread) (struct bfd *abfd, void *ptr, file_ptr nbytes);
  file_ptr (*bwrite) (struct bfd *abfd, const void *ptr,
                      file_ptr nbytes);
  /* Return the current IOSTREAM file offset, or -1 (setting @@code{bfd_error}
     if an error occurs.  */
  file_ptr (*btell) (struct bfd *abfd);
  /* For the following, on successful completion a value of 0 is returned.
     Otherwise, a value of -1 is returned (and  @@code{bfd_error} is set).  */
  int (*bseek) (struct bfd *abfd, file_ptr offset, int whence);
  int (*bclose) (struct bfd *abfd);
  int (*bflush) (struct bfd *abfd);
  int (*bstat) (struct bfd *abfd, struct stat *sb);
@@};
@@end example

@@findex bfd_get_mtime
@@subsubsection @@code{bfd_get_mtime}
@@strong{Synopsis}
@@example
long bfd_get_mtime (bfd *abfd);
@@end example
@@strong{Description}@@*
Return the file modification time (as read from the file system, or
from the archive header for archive members).

@@findex bfd_get_size
@@subsubsection @@code{bfd_get_size}
@@strong{Synopsis}
@@example
file_ptr bfd_get_size (bfd *abfd);
@@end example
@@strong{Description}@@*
Return the file size (as read from file system) for the file
associated with BFD @@var{abfd}.

The initial motivation for, and use of, this routine is not
so we can get the exact size of the object the BFD applies to, since
that might not be generally possible (archive members for example).
It would be ideal if someone could eventually modify
it so that such results were guaranteed.

Instead, we want to ask questions like "is this NNN byte sized
object I'm about to try read from file offset YYY reasonable?"
As as example of where we might do this, some object formats
use string tables for which the first @@code{sizeof (long)} bytes of the
table contain the size of the table itself, including the size bytes.
If an application tries to read what it thinks is one of these
string tables, without some way to validate the size, and for
some reason the size is wrong (byte swapping error, wrong location
for the string table, etc.), the only clue is likely to be a read
error when it tries to read the table, or a "virtual memory
exhausted" error when it tries to allocate 15 bazillon bytes
of space for the 15 bazillon byte table it is about to read.
This function at least allows us to answer the question, "is the
size reasonable?".

@


1.1.8.1
log
@Commit generated files.
@
text
@a0 72
@@findex struct bfd_iovec
@@subsubsection @@code{struct bfd_iovec}
@@strong{Description}@@*
The @@code{struct bfd_iovec} contains the internal file I/O class.
Each @@code{BFD} has an instance of this class and all file I/O is
routed through it (it is assumed that the instance implements
all methods listed below).
@@example
struct bfd_iovec
@@{
  /* To avoid problems with macros, a "b" rather than "f"
     prefix is prepended to each method name.  */
  /* Attempt to read/write NBYTES on ABFD's IOSTREAM storing/fetching
     bytes starting at PTR.  Return the number of bytes actually
     transfered (a read past end-of-file returns less than NBYTES),
     or -1 (setting @@code{bfd_error}) if an error occurs.  */
  file_ptr (*bread) (struct bfd *abfd, void *ptr, file_ptr nbytes);
  file_ptr (*bwrite) (struct bfd *abfd, const void *ptr,
                      file_ptr nbytes);
  /* Return the current IOSTREAM file offset, or -1 (setting @@code{bfd_error}
     if an error occurs.  */
  file_ptr (*btell) (struct bfd *abfd);
  /* For the following, on successful completion a value of 0 is returned.
     Otherwise, a value of -1 is returned (and  @@code{bfd_error} is set).  */
  int (*bseek) (struct bfd *abfd, file_ptr offset, int whence);
  int (*bclose) (struct bfd *abfd);
  int (*bflush) (struct bfd *abfd);
  int (*bstat) (struct bfd *abfd, struct stat *sb);
@@};
@@end example

@@findex bfd_get_mtime
@@subsubsection @@code{bfd_get_mtime}
@@strong{Synopsis}
@@example
long bfd_get_mtime (bfd *abfd);
@@end example
@@strong{Description}@@*
Return the file modification time (as read from the file system, or
from the archive header for archive members).

@@findex bfd_get_size
@@subsubsection @@code{bfd_get_size}
@@strong{Synopsis}
@@example
long bfd_get_size (bfd *abfd);
@@end example
@@strong{Description}@@*
Return the file size (as read from file system) for the file
associated with BFD @@var{abfd}.

The initial motivation for, and use of, this routine is not
so we can get the exact size of the object the BFD applies to, since
that might not be generally possible (archive members for example).
It would be ideal if someone could eventually modify
it so that such results were guaranteed.

Instead, we want to ask questions like "is this NNN byte sized
object I'm about to try read from file offset YYY reasonable?"
As as example of where we might do this, some object formats
use string tables for which the first @@code{sizeof (long)} bytes of the
table contain the size of the table itself, including the size bytes.
If an application tries to read what it thinks is one of these
string tables, without some way to validate the size, and for
some reason the size is wrong (byte swapping error, wrong location
for the string table, etc.), the only clue is likely to be a read
error when it tries to read the table, or a "virtual memory
exhausted" error when it tries to allocate 15 bazillon bytes
of space for the 15 bazillon byte table it is about to read.
This function at least allows us to answer the question, "is the
size reasonable?".

@


1.1.6.1
log
@Commit generated files for the binutils 2.16 branch.
@
text
@a0 72
@@findex struct bfd_iovec
@@subsubsection @@code{struct bfd_iovec}
@@strong{Description}@@*
The @@code{struct bfd_iovec} contains the internal file I/O class.
Each @@code{BFD} has an instance of this class and all file I/O is
routed through it (it is assumed that the instance implements
all methods listed below).
@@example
struct bfd_iovec
@@{
  /* To avoid problems with macros, a "b" rather than "f"
     prefix is prepended to each method name.  */
  /* Attempt to read/write NBYTES on ABFD's IOSTREAM storing/fetching
     bytes starting at PTR.  Return the number of bytes actually
     transfered (a read past end-of-file returns less than NBYTES),
     or -1 (setting @@code{bfd_error}) if an error occurs.  */
  file_ptr (*bread) (struct bfd *abfd, void *ptr, file_ptr nbytes);
  file_ptr (*bwrite) (struct bfd *abfd, const void *ptr,
                      file_ptr nbytes);
  /* Return the current IOSTREAM file offset, or -1 (setting @@code{bfd_error}
     if an error occurs.  */
  file_ptr (*btell) (struct bfd *abfd);
  /* For the following, on successful completion a value of 0 is returned.
     Otherwise, a value of -1 is returned (and  @@code{bfd_error} is set).  */
  int (*bseek) (struct bfd *abfd, file_ptr offset, int whence);
  int (*bclose) (struct bfd *abfd);
  int (*bflush) (struct bfd *abfd);
  int (*bstat) (struct bfd *abfd, struct stat *sb);
@@};
@@end example

@@findex bfd_get_mtime
@@subsubsection @@code{bfd_get_mtime}
@@strong{Synopsis}
@@example
long bfd_get_mtime (bfd *abfd);
@@end example
@@strong{Description}@@*
Return the file modification time (as read from the file system, or
from the archive header for archive members).

@@findex bfd_get_size
@@subsubsection @@code{bfd_get_size}
@@strong{Synopsis}
@@example
long bfd_get_size (bfd *abfd);
@@end example
@@strong{Description}@@*
Return the file size (as read from file system) for the file
associated with BFD @@var{abfd}.

The initial motivation for, and use of, this routine is not
so we can get the exact size of the object the BFD applies to, since
that might not be generally possible (archive members for example).
It would be ideal if someone could eventually modify
it so that such results were guaranteed.

Instead, we want to ask questions like "is this NNN byte sized
object I'm about to try read from file offset YYY reasonable?"
As as example of where we might do this, some object formats
use string tables for which the first @@code{sizeof (long)} bytes of the
table contain the size of the table itself, including the size bytes.
If an application tries to read what it thinks is one of these
string tables, without some way to validate the size, and for
some reason the size is wrong (byte swapping error, wrong location
for the string table, etc.), the only clue is likely to be a read
error when it tries to read the table, or a "virtual memory
exhausted" error when it tries to allocate 15 bazillon bytes
of space for the 15 bazillon byte table it is about to read.
This function at least allows us to answer the question, "is the
size reasonable?".

@


1.1.4.1
log
@Generated files for the 2.15 branch.
@
text
@a0 41
@@findex bfd_get_mtime
@@subsubsection @@code{bfd_get_mtime}
@@strong{Synopsis}
@@example
long bfd_get_mtime (bfd *abfd);
@@end example
@@strong{Description}@@*
Return the file modification time (as read from the file system, or
from the archive header for archive members).

@@findex bfd_get_size
@@subsubsection @@code{bfd_get_size}
@@strong{Synopsis}
@@example
long bfd_get_size (bfd *abfd);
@@end example
@@strong{Description}@@*
Return the file size (as read from file system) for the file
associated with BFD @@var{abfd}.

The initial motivation for, and use of, this routine is not
so we can get the exact size of the object the BFD applies to, since
that might not be generally possible (archive members for example).
It would be ideal if someone could eventually modify
it so that such results were guaranteed.

Instead, we want to ask questions like "is this NNN byte sized
object I'm about to try read from file offset YYY reasonable?"
As as example of where we might do this, some object formats
use string tables for which the first @@code{sizeof (long)} bytes of the
table contain the size of the table itself, including the size bytes.
If an application tries to read what it thinks is one of these
string tables, without some way to validate the size, and for
some reason the size is wrong (byte swapping error, wrong location
for the string table, etc.), the only clue is likely to be a read
error when it tries to read the table, or a "virtual memory
exhausted" error when it tries to allocate 15 bazillon bytes
of space for the 15 bazillon byte table it is about to read.
This function at least allows us to answer the question, "is the
size reasonable?".

@


1.1.2.1
log
@Add generated files on 2.14 branch.
@
text
@a0 41
@@findex bfd_get_mtime
@@subsubsection @@code{bfd_get_mtime}
@@strong{Synopsis}
@@example
long bfd_get_mtime(bfd *abfd);
@@end example
@@strong{Description}@@*
Return the file modification time (as read from the file system, or
from the archive header for archive members).

@@findex bfd_get_size
@@subsubsection @@code{bfd_get_size}
@@strong{Synopsis}
@@example
long bfd_get_size(bfd *abfd);
@@end example
@@strong{Description}@@*
Return the file size (as read from file system) for the file
associated with BFD @@var{abfd}.

The initial motivation for, and use of, this routine is not
so we can get the exact size of the object the BFD applies to, since
that might not be generally possible (archive members for example).
It would be ideal if someone could eventually modify
it so that such results were guaranteed.

Instead, we want to ask questions like "is this NNN byte sized
object I'm about to try read from file offset YYY reasonable?"
As as example of where we might do this, some object formats
use string tables for which the first @@code{sizeof (long)} bytes of the
table contain the size of the table itself, including the size bytes.
If an application tries to read what it thinks is one of these
string tables, without some way to validate the size, and for
some reason the size is wrong (byte swapping error, wrong location
for the string table, etc.), the only clue is likely to be a read
error when it tries to read the table, or a "virtual memory
exhausted" error when it tries to allocate 15 bazillon bytes
of space for the 15 bazillon byte table it is about to read.
This function at least allows us to answer the quesion, "is the
size reasonable?".

@

