head	1.1;
access;
symbols
	binutils-2_23_2:1.1.24.1
	binutils-2_23_1:1.1.24.1
	binutils-2_23-branch:1.1.0.24
	binutils-2_20_1:1.1.22.1
	binutils-2_20:1.1.22.1
	binutils-2_20-branch:1.1.0.22
	binutils-2_19_1:1.1.20.1
	binutils-2_19:1.1.20.1
	binutils-2_19-branch:1.1.0.20
	binutils-2_18:1.1.18.1
	binutils-2_18-branch:1.1.0.18
	binutils-csl-sourcerygxx-3_4_4-32:1.1.14.1
	binutils-csl-sourcerygxx-3_4_4-25:1.1.14.1
	binutils-2_17:1.1.16.1
	binutils-csl-wrs-linux-3_4_4-24:1.1.14.1
	binutils-csl-wrs-linux-3_4_4-23:1.1.14.1
	binutils-csl-wrs-linux-3_4_4-22:1.1.14.1
	binutils-csl-wrs-linux-3_4_4-21:1.1.14.1
	binutils-csl-wrs-linux-3_4_4-20:1.1.14.1
	binutils-2_17-branch:1.1.0.16
	binutils-csl-gxxpro-3_4-branch:1.1.14.1.0.4
	binutils-csl-gxxpro-3_4-branchpoint:1.1.14.1
	binutils-2_16_1:1.1.14.1
	binutils-csl-arm-2005q1b:1.1.14.1
	binutils-2_16:1.1.14.1
	binutils-csl-arm-2005q1a:1.1.14.1
	binutils-csl-arm-2005q1-branch:1.1.14.1.0.2
	binutils-csl-arm-2005q1-branchpoint:1.1.14.1
	binutils-2_16-branch:1.1.0.14
	binutils-2_15:1.1.12.1
	binutils-2_15-branch:1.1.0.12
	binutils-2_14:1.1.10.1
	binutils-2_14-branch:1.1.0.10
	binutils-2_13_2_1:1.1.8.1
	binutils-2_13_2:1.1.8.1
	binutils-2_13_1:1.1.8.1
	binutils-2_13:1.1.8.1
	binutils-2_13-branch:1.1.0.8
	binutils-2_12_1:1.1.6.1
	binutils-2_12:1.1.6.1
	binutils-2_12-branch:1.1.0.6
	binutils-2_11_2:1.1.4.1
	binutils-2_11_1:1.1.4.1
	binutils-2_11:1.1.4.1
	binutils-2_11-branch:1.1.0.4
	binutils-2_10_1:1.1.2.1
	binutils-2_10:1.1.2.1
	binutils_latest_snapshot:1.1.2.1
	binutils-2_10-branch:1.1.0.2;
locks; strict;
comment	@# @;


1.1
date	2000.05.29.14.08.51;	author pb;	state dead;
branches
	1.1.2.1
	1.1.4.1
	1.1.6.1
	1.1.8.1
	1.1.10.1
	1.1.12.1
	1.1.14.1
	1.1.16.1
	1.1.18.1
	1.1.20.1
	1.1.22.1
	1.1.24.1;
next	;

1.1.2.1
date	2000.05.29.14.08.51;	author pb;	state Exp;
branches;
next	;

1.1.4.1
date	2001.03.12.15.40.30;	author pb;	state Exp;
branches;
next	;

1.1.6.1
date	2002.03.08.17.00.49;	author drow;	state Exp;
branches;
next	;

1.1.8.1
date	2002.08.05.20.43.45;	author drow;	state Exp;
branches;
next	;

1.1.10.1
date	2003.04.27.20.36.06;	author drow;	state Exp;
branches;
next	;

1.1.12.1
date	2004.04.09.19.32.14;	author drow;	state Exp;
branches;
next	;

1.1.14.1
date	2005.03.08.17.19.41;	author drow;	state Exp;
branches;
next	;

1.1.16.1
date	2006.04.16.18.36.40;	author drow;	state Exp;
branches;
next	;

1.1.18.1
date	2007.08.06.21.05.18;	author drow;	state Exp;
branches;
next	;

1.1.20.1
date	2008.09.11.08.24.13;	author gingold;	state Exp;
branches;
next	;

1.1.22.1
date	2009.10.16.12.07.01;	author gingold;	state Exp;
branches;
next	;

1.1.24.1
date	2012.11.13.14.51.25;	author gingold;	state Exp;
branches;
next	;


desc
@@


1.1
log
@file elf.texi was initially added on branch binutils-2_10-branch.
@
text
@@


1.1.24.1
log
@*** empty log message ***
@
text
@a0 9
@@section ELF backends
BFD support for ELF formats is being worked on.
Currently, the best supported back ends are for sparc and i386
(running svr4 or Solaris 2).

Documentation of the internals of the support code still needs
to be written.  The code is changing quickly enough that we
haven't bothered yet.

@


1.1.22.1
log
@bfd/
2009-10-16  Tristan Gingold  <gingold@@adacore.com>

	* configure.in: Bump version to 2.20
	* Makefile.am (RELEASE): Set.
	* configure, Makefile.in: Regenerate.
@
text
@a0 9
@@section ELF backends
BFD support for ELF formats is being worked on.
Currently, the best supported back ends are for sparc and i386
(running svr4 or Solaris 2).

Documentation of the internals of the support code still needs
to be written.  The code is changing quickly enough that we
haven't bothered yet.

@


1.1.20.1
log
@Generated files for binutils 2.19.
@
text
@a0 22
@@section ELF backends
BFD support for ELF formats is being worked on.
Currently, the best supported back ends are for sparc and i386
(running svr4 or Solaris 2).

Documentation of the internals of the support code still needs
to be written.  The code is changing quickly enough that we
haven't bothered yet.

@@findex bfd_elf_find_section
@@subsubsection @@code{bfd_elf_find_section}
@@strong{Synopsis}
@@example
struct elf_internal_shdr *bfd_elf_find_section (bfd *abfd, char *name);
@@end example
@@strong{Description}@@*
Helper functions for GDB to locate the string tables.
Since BFD hides string tables from callers, GDB needs to use an
internal hook to find them.  Sun's .stabstr, in particular,
isn't even pointed to by the .stab section, so ordinary
mechanisms wouldn't work to find it, even if we had some.

@


1.1.18.1
log
@Commit generated files for binutils 2.17.90.
@
text
@a0 22
@@section ELF backends
BFD support for ELF formats is being worked on.
Currently, the best supported back ends are for sparc and i386
(running svr4 or Solaris 2).

Documentation of the internals of the support code still needs
to be written.  The code is changing quickly enough that we
haven't bothered yet.

@@findex bfd_elf_find_section
@@subsubsection @@code{bfd_elf_find_section}
@@strong{Synopsis}
@@example
struct elf_internal_shdr *bfd_elf_find_section (bfd *abfd, char *name);
@@end example
@@strong{Description}@@*
Helper functions for GDB to locate the string tables.
Since BFD hides string tables from callers, GDB needs to use an
internal hook to find them.  Sun's .stabstr, in particular,
isn't even pointed to by the .stab section, so ordinary
mechanisms wouldn't work to find it, even if we had some.

@


1.1.16.1
log
@Commit generated files.
@
text
@a0 22
@@section ELF backends
BFD support for ELF formats is being worked on.
Currently, the best supported back ends are for sparc and i386
(running svr4 or Solaris 2).

Documentation of the internals of the support code still needs
to be written.  The code is changing quickly enough that we
haven't bothered yet.

@@findex bfd_elf_find_section
@@subsubsection @@code{bfd_elf_find_section}
@@strong{Synopsis}
@@example
struct elf_internal_shdr *bfd_elf_find_section (bfd *abfd, char *name);
@@end example
@@strong{Description}@@*
Helper functions for GDB to locate the string tables.
Since BFD hides string tables from callers, GDB needs to use an
internal hook to find them.  Sun's .stabstr, in particular,
isn't even pointed to by the .stab section, so ordinary
mechanisms wouldn't work to find it, even if we had some.

@


1.1.14.1
log
@Commit generated files for the binutils 2.16 branch.
@
text
@a0 24
@@section 
ELF backends

BFD support for ELF formats is being worked on.
Currently, the best supported back ends are for sparc and i386
(running svr4 or Solaris 2).

Documentation of the internals of the support code still needs
to be written.  The code is changing quickly enough that we
haven't bothered yet.

@@findex bfd_elf_find_section
@@subsubsection @@code{bfd_elf_find_section}
@@strong{Synopsis}
@@example
struct elf_internal_shdr *bfd_elf_find_section (bfd *abfd, char *name);
@@end example
@@strong{Description}@@*
Helper functions for GDB to locate the string tables.
Since BFD hides string tables from callers, GDB needs to use an
internal hook to find them.  Sun's .stabstr, in particular,
isn't even pointed to by the .stab section, so ordinary
mechanisms wouldn't work to find it, even if we had some.

@


1.1.12.1
log
@Generated files for the 2.15 branch.
@
text
@a0 24
@@section 
ELF backends

BFD support for ELF formats is being worked on.
Currently, the best supported back ends are for sparc and i386
(running svr4 or Solaris 2).

Documentation of the internals of the support code still needs
to be written.  The code is changing quickly enough that we
haven't bothered yet.

@@findex bfd_elf_find_section
@@subsubsection @@code{bfd_elf_find_section}
@@strong{Synopsis}
@@example
struct elf_internal_shdr *bfd_elf_find_section (bfd *abfd, char *name);
@@end example
@@strong{Description}@@*
Helper functions for GDB to locate the string tables.
Since BFD hides string tables from callers, GDB needs to use an
internal hook to find them.  Sun's .stabstr, in particular,
isn't even pointed to by the .stab section, so ordinary
mechanisms wouldn't work to find it, even if we had some.

@


1.1.10.1
log
@Add generated files on 2.14 branch.
@
text
@a0 24
@@section 
ELF backends

BFD support for ELF formats is being worked on.
Currently, the best supported back ends are for sparc and i386
(running svr4 or Solaris 2).

Documentation of the internals of the support code still needs
to be written.  The code is changing quickly enough that we
haven't bothered yet.

@@findex bfd_elf_find_section
@@subsubsection @@code{bfd_elf_find_section}
@@strong{Synopsis}
@@example
struct elf_internal_shdr *bfd_elf_find_section (bfd *abfd, char *name);
@@end example
@@strong{Description}@@*
Helper functions for GDB to locate the string tables.
Since BFD hides string tables from callers, GDB needs to use an
internal hook to find them.  Sun's .stabstr, in particular,
isn't even pointed to by the .stab section, so ordinary
mechanisms wouldn't work to find it, even if we had some.

@


1.1.8.1
log
@Add generated files.
@
text
@a0 24
@@section 
ELF backends

BFD support for ELF formats is being worked on.
Currently, the best supported back ends are for sparc and i386
(running svr4 or Solaris 2).

Documentation of the internals of the support code still needs
to be written.  The code is changing quickly enough that we
haven't bothered yet.

@@findex bfd_elf_find_section
@@subsubsection @@code{bfd_elf_find_section}
@@strong{Synopsis}
@@example
struct elf_internal_shdr *bfd_elf_find_section (bfd *abfd, char *name);
@@end example
@@strong{Description}@@*
Helper functions for GDB to locate the string tables.
Since BFD hides string tables from callers, GDB needs to use an
internal hook to find them.  Sun's .stabstr, in particular,
isn't even pointed to by the .stab section, so ordinary
mechanisms wouldn't work to find it, even if we had some.

@


1.1.6.1
log
@Add generated files on 2.12 release branch.
@
text
@a0 22
@@section ELF backends
BFD support for ELF formats is being worked on.
Currently, the best supported back ends are for sparc and i386
(running svr4 or Solaris 2).

Documentation of the internals of the support code still needs
to be written.  The code is changing quickly enough that we
haven't bothered yet.

@@findex bfd_elf_find_section
@@subsubsection @@code{bfd_elf_find_section}
@@strong{Synopsis}
@@example
struct elf_internal_shdr *bfd_elf_find_section (bfd *abfd, char *name);
@@end example
@@strong{Description}@@*
Helper functions for GDB to locate the string tables.
Since BFD hides string tables from callers, GDB needs to use an
internal hook to find them.  Sun's .stabstr, in particular,
isn't even pointed to by the .stab section, so ordinary
mechanisms wouldn't work to find it, even if we had some.

@


1.1.4.1
log
@Add generated files to release branch.
@
text
@a0 22
@@section ELF backends
BFD support for ELF formats is being worked on.
Currently, the best supported back ends are for sparc and i386
(running svr4 or Solaris 2).

Documentation of the internals of the support code still needs
to be written.  The code is changing quickly enough that we
haven't bothered yet.

@@findex bfd_elf_find_section
@@subsubsection @@code{bfd_elf_find_section}
@@strong{Synopsis}
@@example
struct elf_internal_shdr *bfd_elf_find_section (bfd *abfd, char *name);
@@end example
@@strong{Description}@@*
Helper functions for GDB to locate the string tables.
Since BFD hides string tables from callers, GDB needs to use an
internal hook to find them.  Sun's .stabstr, in particular,
isn't even pointed to by the .stab section, so ordinary
mechanisms wouldn't work to find it, even if we had some.

@


1.1.2.1
log
@Add generated files.
@
text
@a0 22
@@section ELF backends
BFD support for ELF formats is being worked on.
Currently, the best supported back ends are for sparc and i386
(running svr4 or Solaris 2).

Documentation of the internals of the support code still needs
to be written.  The code is changing quickly enough that we
haven't bothered yet.

@@findex bfd_elf_find_section
@@subsubsection @@code{bfd_elf_find_section}
@@strong{Synopsis}
@@example
struct elf_internal_shdr *bfd_elf_find_section (bfd *abfd, char *name);
@@end example
@@strong{Description}@@*
Helper functions for GDB to locate the string tables.
Since BFD hides string tables from callers, GDB needs to use an
internal hook to find them.  Sun's .stabstr, in particular,
isn't even pointed to by the .stab section, so ordinary
mechanisms wouldn't work to find it, even if we had some.

@

