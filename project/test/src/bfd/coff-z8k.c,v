head	1.25;
access;
symbols
	sid-snapshot-20180601:1.25
	sid-snapshot-20180501:1.25
	sid-snapshot-20180401:1.25
	sid-snapshot-20180301:1.25
	sid-snapshot-20180201:1.25
	sid-snapshot-20180101:1.25
	sid-snapshot-20171201:1.25
	sid-snapshot-20171101:1.25
	sid-snapshot-20171001:1.25
	sid-snapshot-20170901:1.25
	sid-snapshot-20170801:1.25
	sid-snapshot-20170701:1.25
	sid-snapshot-20170601:1.25
	sid-snapshot-20170501:1.25
	sid-snapshot-20170401:1.25
	sid-snapshot-20170301:1.25
	sid-snapshot-20170201:1.25
	sid-snapshot-20170101:1.25
	sid-snapshot-20161201:1.25
	sid-snapshot-20161101:1.25
	sid-snapshot-20160901:1.25
	sid-snapshot-20160801:1.25
	sid-snapshot-20160701:1.25
	sid-snapshot-20160601:1.25
	sid-snapshot-20160501:1.25
	sid-snapshot-20160401:1.25
	sid-snapshot-20160301:1.25
	sid-snapshot-20160201:1.25
	sid-snapshot-20160101:1.25
	sid-snapshot-20151201:1.25
	sid-snapshot-20151101:1.25
	sid-snapshot-20151001:1.25
	sid-snapshot-20150901:1.25
	sid-snapshot-20150801:1.25
	sid-snapshot-20150701:1.25
	sid-snapshot-20150601:1.25
	sid-snapshot-20150501:1.25
	sid-snapshot-20150401:1.25
	sid-snapshot-20150301:1.25
	sid-snapshot-20150201:1.25
	sid-snapshot-20150101:1.25
	sid-snapshot-20141201:1.25
	sid-snapshot-20141101:1.25
	sid-snapshot-20141001:1.25
	sid-snapshot-20140901:1.25
	sid-snapshot-20140801:1.25
	sid-snapshot-20140701:1.25
	sid-snapshot-20140601:1.25
	sid-snapshot-20140501:1.25
	sid-snapshot-20140401:1.25
	sid-snapshot-20140301:1.25
	sid-snapshot-20140201:1.25
	sid-snapshot-20140101:1.25
	sid-snapshot-20131201:1.25
	sid-snapshot-20131101:1.25
	sid-snapshot-20131001:1.25
	binutils-2_24-branch:1.25.0.42
	binutils-2_24-branchpoint:1.25
	binutils-2_21_1:1.25
	sid-snapshot-20130901:1.25
	gdb_7_6_1-2013-08-30-release:1.25
	sid-snapshot-20130801:1.25
	sid-snapshot-20130701:1.25
	sid-snapshot-20130601:1.25
	sid-snapshot-20130501:1.25
	gdb_7_6-2013-04-26-release:1.25
	sid-snapshot-20130401:1.25
	binutils-2_23_2:1.25
	gdb_7_6-branch:1.25.0.40
	gdb_7_6-2013-03-12-branchpoint:1.25
	sid-snapshot-20130301:1.25
	sid-snapshot-20130201:1.25
	sid-snapshot-20130101:1.25
	sid-snapshot-20121201:1.25
	gdb_7_5_1-2012-11-29-release:1.25
	binutils-2_23_1:1.25
	sid-snapshot-20121101:1.25
	binutils-2_23:1.25
	sid-snapshot-20121001:1.25
	sid-snapshot-20120901:1.25
	gdb_7_5-2012-08-17-release:1.25
	sid-snapshot-20120801:1.25
	binutils-2_23-branch:1.25.0.38
	binutils-2_23-branchpoint:1.25
	gdb_7_5-branch:1.25.0.36
	gdb_7_5-2012-07-18-branchpoint:1.25
	sid-snapshot-20120701:1.25
	sid-snapshot-20120601:1.25
	sid-snapshot-20120501:1.25
	binutils-2_22_branch:1.25.0.34
	gdb_7_4_1-2012-04-26-release:1.25
	sid-snapshot-20120401:1.25
	sid-snapshot-20120301:1.25
	sid-snapshot-20120201:1.25
	gdb_7_4-2012-01-24-release:1.25
	sid-snapshot-20120101:1.25
	gdb_7_4-branch:1.25.0.32
	gdb_7_4-2011-12-13-branchpoint:1.25
	sid-snapshot-20111201:1.25
	binutils-2_22:1.25
	sid-snapshot-20111101:1.25
	sid-snapshot-20111001:1.25
	binutils-2_22-branch:1.25.0.30
	binutils-2_22-branchpoint:1.25
	gdb_7_3_1-2011-09-04-release:1.25
	sid-snapshot-20110901:1.25
	sid-snapshot-20110801:1.25
	gdb_7_3-2011-07-26-release:1.25
	sid-snapshot-20110701:1.25
	sid-snapshot-20110601:1.25
	sid-snapshot-20110501:1.25
	gdb_7_3-branch:1.25.0.28
	gdb_7_3-2011-04-01-branchpoint:1.25
	sid-snapshot-20110401:1.25
	sid-snapshot-20110301:1.25
	sid-snapshot-20110201:1.25
	sid-snapshot-20110101:1.25
	binutils-2_21:1.25
	sid-snapshot-20101201:1.25
	binutils-2_21-branch:1.25.0.26
	binutils-2_21-branchpoint:1.25
	sid-snapshot-20101101:1.25
	sid-snapshot-20101001:1.25
	binutils-2_20_1:1.25
	gdb_7_2-2010-09-02-release:1.25
	sid-snapshot-20100901:1.25
	sid-snapshot-20100801:1.25
	gdb_7_2-branch:1.25.0.24
	gdb_7_2-2010-07-07-branchpoint:1.25
	sid-snapshot-20100701:1.25
	sid-snapshot-20100601:1.25
	sid-snapshot-20100501:1.25
	sid-snapshot-20100401:1.25
	gdb_7_1-2010-03-18-release:1.25
	sid-snapshot-20100301:1.25
	gdb_7_1-branch:1.25.0.22
	gdb_7_1-2010-02-18-branchpoint:1.25
	sid-snapshot-20100201:1.25
	sid-snapshot-20100101:1.25
	gdb_7_0_1-2009-12-22-release:1.25
	sid-snapshot-20091201:1.25
	sid-snapshot-20091101:1.25
	binutils-2_20:1.25
	gdb_7_0-2009-10-06-release:1.25
	sid-snapshot-20091001:1.25
	gdb_7_0-branch:1.25.0.20
	gdb_7_0-2009-09-16-branchpoint:1.25
	arc-sim-20090309:1.24
	binutils-arc-20081103-branch:1.25.0.18
	binutils-arc-20081103-branchpoint:1.25
	binutils-2_20-branch:1.25.0.16
	binutils-2_20-branchpoint:1.25
	sid-snapshot-20090901:1.25
	sid-snapshot-20090801:1.25
	msnyder-checkpoint-072509-branch:1.25.0.14
	msnyder-checkpoint-072509-branchpoint:1.25
	sid-snapshot-20090701:1.25
	dje-cgen-play1-branch:1.25.0.12
	dje-cgen-play1-branchpoint:1.25
	sid-snapshot-20090601:1.25
	sid-snapshot-20090501:1.25
	sid-snapshot-20090401:1.25
	arc-20081103-branch:1.25.0.10
	arc-20081103-branchpoint:1.25
	arc-insight_6_8-branch:1.24.0.14
	arc-insight_6_8-branchpoint:1.24
	insight_6_8-branch:1.24.0.12
	insight_6_8-branchpoint:1.24
	sid-snapshot-20090301:1.25
	binutils-2_19_1:1.25
	sid-snapshot-20090201:1.25
	sid-snapshot-20090101:1.25
	reverse-20081226-branch:1.25.0.8
	reverse-20081226-branchpoint:1.25
	sid-snapshot-20081201:1.25
	multiprocess-20081120-branch:1.25.0.6
	multiprocess-20081120-branchpoint:1.25
	sid-snapshot-20081101:1.25
	binutils-2_19:1.25
	sid-snapshot-20081001:1.25
	reverse-20080930-branch:1.25.0.4
	reverse-20080930-branchpoint:1.25
	binutils-2_19-branch:1.25.0.2
	binutils-2_19-branchpoint:1.25
	sid-snapshot-20080901:1.25
	sid-snapshot-20080801:1.25
	reverse-20080717-branch:1.24.0.10
	reverse-20080717-branchpoint:1.24
	sid-snapshot-20080701:1.24
	msnyder-reverse-20080609-branch:1.24.0.8
	msnyder-reverse-20080609-branchpoint:1.24
	drow-reverse-20070409-branch:1.22.0.2
	drow-reverse-20070409-branchpoint:1.22
	sid-snapshot-20080601:1.24
	sid-snapshot-20080501:1.24
	sid-snapshot-20080403:1.24
	sid-snapshot-20080401:1.24
	gdb_6_8-2008-03-27-release:1.24
	sid-snapshot-20080301:1.24
	gdb_6_8-branch:1.24.0.6
	gdb_6_8-2008-02-26-branchpoint:1.24
	sid-snapshot-20080201:1.24
	sid-snapshot-20080101:1.24
	sid-snapshot-20071201:1.24
	sid-snapshot-20071101:1.24
	gdb_6_7_1-2007-10-29-release:1.24
	gdb_6_7-2007-10-10-release:1.24
	sid-snapshot-20071001:1.24
	gdb_6_7-branch:1.24.0.4
	gdb_6_7-2007-09-07-branchpoint:1.24
	binutils-2_18:1.24
	binutils-2_18-branch:1.24.0.2
	binutils-2_18-branchpoint:1.24
	insight_6_6-20070208-release:1.21
	binutils-csl-coldfire-4_1-32:1.21
	binutils-csl-sourcerygxx-4_1-32:1.21
	gdb_6_6-2006-12-18-release:1.21
	binutils-csl-innovasic-fido-3_4_4-33:1.21
	binutils-csl-sourcerygxx-3_4_4-32:1.17
	binutils-csl-coldfire-4_1-30:1.21
	binutils-csl-sourcerygxx-4_1-30:1.21
	binutils-csl-coldfire-4_1-28:1.21
	binutils-csl-sourcerygxx-4_1-29:1.21
	binutils-csl-sourcerygxx-4_1-28:1.21
	gdb_6_6-branch:1.21.0.22
	gdb_6_6-2006-11-15-branchpoint:1.21
	binutils-csl-arm-2006q3-27:1.21
	binutils-csl-sourcerygxx-4_1-27:1.21
	binutils-csl-arm-2006q3-26:1.21
	binutils-csl-sourcerygxx-4_1-26:1.21
	binutils-csl-sourcerygxx-4_1-25:1.21
	binutils-csl-sourcerygxx-4_1-24:1.21
	binutils-csl-sourcerygxx-4_1-23:1.21
	insight_6_5-20061003-release:1.21
	gdb-csl-symbian-6_4_50_20060226-12:1.21
	binutils-csl-sourcerygxx-4_1-21:1.21
	binutils-csl-arm-2006q3-21:1.21
	binutils-csl-sourcerygxx-4_1-22:1.21
	binutils-csl-palmsource-arm-prelinker-1_0-1:1.21
	binutils-csl-sourcerygxx-4_1-20:1.21
	binutils-csl-arm-2006q3-19:1.21
	binutils-csl-sourcerygxx-4_1-19:1.21
	binutils-csl-sourcerygxx-4_1-18:1.21
	binutils-csl-renesas-4_1-9:1.21
	gdb-csl-sourcerygxx-3_4_4-25:1.20
	binutils-csl-sourcerygxx-3_4_4-25:1.17
	nickrob-async-20060828-mergepoint:1.21
	gdb-csl-symbian-6_4_50_20060226-11:1.21
	binutils-csl-renesas-4_1-8:1.21
	binutils-csl-renesas-4_1-7:1.21
	binutils-csl-renesas-4_1-6:1.21
	gdb-csl-sourcerygxx-4_1-17:1.21
	binutils-csl-sourcerygxx-4_1-17:1.21
	gdb-csl-20060226-branch-local-2:1.21
	gdb-csl-sourcerygxx-4_1-14:1.21
	binutils-csl-sourcerygxx-4_1-14:1.21
	binutils-csl-sourcerygxx-4_1-15:1.21
	gdb-csl-sourcerygxx-4_1-13:1.21
	binutils-csl-sourcerygxx-4_1-13:1.21
	binutils-2_17:1.21
	gdb-csl-sourcerygxx-4_1-12:1.21
	binutils-csl-sourcerygxx-4_1-12:1.21
	gdb-csl-sourcerygxx-3_4_4-21:1.21
	binutils-csl-sourcerygxx-3_4_4-21:1.21
	gdb_6_5-20060621-release:1.21
	binutils-csl-wrs-linux-3_4_4-24:1.17
	binutils-csl-wrs-linux-3_4_4-23:1.17
	gdb-csl-sourcerygxx-4_1-9:1.21
	binutils-csl-sourcerygxx-4_1-9:1.21
	gdb-csl-sourcerygxx-4_1-8:1.21
	binutils-csl-sourcerygxx-4_1-8:1.21
	gdb-csl-sourcerygxx-4_1-7:1.21
	binutils-csl-sourcerygxx-4_1-7:1.21
	gdb-csl-arm-2006q1-6:1.21
	binutils-csl-arm-2006q1-6:1.21
	gdb-csl-sourcerygxx-4_1-6:1.21
	binutils-csl-sourcerygxx-4_1-6:1.21
	binutils-csl-wrs-linux-3_4_4-22:1.17
	gdb-csl-symbian-6_4_50_20060226-10:1.21
	gdb-csl-symbian-6_4_50_20060226-9:1.21
	gdb-csl-symbian-6_4_50_20060226-8:1.21
	gdb-csl-coldfire-4_1-11:1.21
	binutils-csl-coldfire-4_1-11:1.21
	gdb-csl-sourcerygxx-3_4_4-19:1.21
	binutils-csl-sourcerygxx-3_4_4-19:1.21
	gdb-csl-coldfire-4_1-10:1.21
	gdb_6_5-branch:1.21.0.20
	gdb_6_5-2006-05-14-branchpoint:1.21
	binutils-csl-coldfire-4_1-10:1.21
	gdb-csl-sourcerygxx-4_1-5:1.21
	binutils-csl-sourcerygxx-4_1-5:1.21
	nickrob-async-20060513-branch:1.21.0.18
	nickrob-async-20060513-branchpoint:1.21
	gdb-csl-sourcerygxx-4_1-4:1.21
	binutils-csl-sourcerygxx-4_1-4:1.21
	msnyder-reverse-20060502-branch:1.21.0.16
	msnyder-reverse-20060502-branchpoint:1.21
	binutils-csl-wrs-linux-3_4_4-21:1.17
	gdb-csl-morpho-4_1-4:1.21
	binutils-csl-morpho-4_1-4:1.21
	gdb-csl-sourcerygxx-3_4_4-17:1.21
	binutils-csl-sourcerygxx-3_4_4-17:1.21
	binutils-csl-wrs-linux-3_4_4-20:1.17
	readline_5_1-import-branch:1.21.0.14
	readline_5_1-import-branchpoint:1.21
	gdb-csl-20060226-branch-merge-to-csl-symbian-1:1.21
	binutils-2_17-branch:1.21.0.12
	binutils-2_17-branchpoint:1.21
	gdb-csl-symbian-20060226-branch:1.21.0.10
	gdb-csl-symbian-20060226-branchpoint:1.21
	gdb-csl-20060226-branch-merge-to-csl-local-1:1.21
	msnyder-reverse-20060331-branch:1.21.0.8
	msnyder-reverse-20060331-branchpoint:1.21
	binutils-csl-2_17-branch:1.21.0.6
	binutils-csl-2_17-branchpoint:1.21
	gdb-csl-available-20060303-branch:1.21.0.4
	gdb-csl-available-20060303-branchpoint:1.21
	gdb-csl-20060226-branch:1.21.0.2
	gdb-csl-20060226-branchpoint:1.21
	gdb_6_4-20051202-release:1.20
	msnyder-fork-checkpoint-branch:1.20.0.8
	msnyder-fork-checkpoint-branchpoint:1.20
	gdb-csl-gxxpro-6_3-branch:1.20.0.6
	gdb-csl-gxxpro-6_3-branchpoint:1.20
	gdb_6_4-branch:1.20.0.4
	gdb_6_4-2005-11-01-branchpoint:1.20
	gdb-csl-arm-20051020-branch:1.20.0.2
	gdb-csl-arm-20051020-branchpoint:1.20
	binutils-csl-gxxpro-3_4-branch:1.17.0.8
	binutils-csl-gxxpro-3_4-branchpoint:1.17
	binutils-2_16_1:1.17
	msnyder-tracepoint-checkpoint-branch:1.19.0.2
	msnyder-tracepoint-checkpoint-branchpoint:1.19
	gdb-csl-arm-20050325-2005-q1b:1.17
	binutils-csl-arm-2005q1b:1.17
	binutils-2_16:1.17
	gdb-csl-arm-20050325-2005-q1a:1.17
	binutils-csl-arm-2005q1a:1.17
	csl-arm-20050325-branch:1.17.0.6
	csl-arm-20050325-branchpoint:1.17
	binutils-csl-arm-2005q1-branch:1.17.0.4
	binutils-csl-arm-2005q1-branchpoint:1.17
	binutils-2_16-branch:1.17.0.2
	binutils-2_16-branchpoint:1.17
	csl-arm-2004-q3d:1.16
	gdb_6_3-20041109-release:1.15
	gdb_6_3-branch:1.15.0.18
	gdb_6_3-20041019-branchpoint:1.15
	csl-arm-2004-q3:1.15
	drow_intercu-merge-20040921:1.15
	drow_intercu-merge-20040915:1.15
	jimb-gdb_6_2-e500-branch:1.15.0.20
	jimb-gdb_6_2-e500-branchpoint:1.15
	gdb_6_2-20040730-release:1.15
	gdb_6_2-branch:1.15.0.16
	gdb_6_2-2004-07-10-gmt-branchpoint:1.15
	gdb_6_1_1-20040616-release:1.15
	binutils-2_15:1.15
	binutils-2_15-branchpoint:1.15
	csl-arm-2004-q1a:1.15
	csl-arm-2004-q1:1.15
	gdb_6_1-2004-04-05-release:1.15
	drow_intercu-merge-20040402:1.15
	drow_intercu-merge-20040327:1.15
	ezannoni_pie-20040323-branch:1.15.0.14
	ezannoni_pie-20040323-branchpoint:1.15
	cagney_tramp-20040321-mergepoint:1.15
	cagney_tramp-20040309-branch:1.15.0.12
	cagney_tramp-20040309-branchpoint:1.15
	gdb_6_1-branch:1.15.0.10
	gdb_6_1-2004-03-01-gmt-branchpoint:1.15
	drow_intercu-20040221-branch:1.15.0.8
	drow_intercu-20040221-branchpoint:1.15
	binutils-2_15-branch:1.15.0.6
	cagney_bfdfile-20040213-branch:1.15.0.4
	cagney_bfdfile-20040213-branchpoint:1.15
	drow-cplus-merge-20040208:1.15
	carlton_dictionary-20040126-merge:1.15
	cagney_bigcore-20040122-branch:1.15.0.2
	cagney_bigcore-20040122-branchpoint:1.15
	drow-cplus-merge-20040113:1.15
	csl-arm-2003-q4:1.15
	drow-cplus-merge-20031224:1.15
	drow-cplus-merge-20031220:1.15
	carlton_dictionary-20031215-merge:1.15
	drow-cplus-merge-20031214:1.15
	carlton-dictionary-20031111-merge:1.13
	gdb_6_0-2003-10-04-release:1.11
	kettenis_sparc-20030918-branch:1.11.0.12
	kettenis_sparc-20030918-branchpoint:1.11
	carlton_dictionary-20030917-merge:1.11
	ezannoni_pie-20030916-branchpoint:1.11
	ezannoni_pie-20030916-branch:1.11.0.10
	cagney_x86i386-20030821-branch:1.11.0.8
	cagney_x86i386-20030821-branchpoint:1.11
	carlton_dictionary-20030805-merge:1.11
	carlton_dictionary-20030627-merge:1.11
	gdb_6_0-branch:1.11.0.6
	gdb_6_0-2003-06-23-branchpoint:1.11
	jimb-ppc64-linux-20030613-branch:1.11.0.4
	jimb-ppc64-linux-20030613-branchpoint:1.11
	binutils-2_14:1.10
	cagney_convert-20030606-branch:1.11.0.2
	cagney_convert-20030606-branchpoint:1.11
	cagney_writestrings-20030508-branch:1.10.0.30
	cagney_writestrings-20030508-branchpoint:1.10
	jimb-ppc64-linux-20030528-branch:1.10.0.28
	jimb-ppc64-linux-20030528-branchpoint:1.10
	carlton_dictionary-20030523-merge:1.10
	cagney_fileio-20030521-branch:1.10.0.26
	cagney_fileio-20030521-branchpoint:1.10
	kettenis_i386newframe-20030517-mergepoint:1.10
	jimb-ppc64-linux-20030509-branch:1.10.0.24
	jimb-ppc64-linux-20030509-branchpoint:1.10
	kettenis_i386newframe-20030504-mergepoint:1.10
	carlton_dictionary-20030430-merge:1.10
	binutils-2_14-branch:1.10.0.22
	binutils-2_14-branchpoint:1.10
	kettenis_i386newframe-20030419-branch:1.10.0.20
	kettenis_i386newframe-20030419-branchpoint:1.10
	carlton_dictionary-20030416-merge:1.10
	cagney_frameaddr-20030409-mergepoint:1.10
	kettenis_i386newframe-20030406-branch:1.10.0.18
	kettenis_i386newframe-20030406-branchpoint:1.10
	cagney_frameaddr-20030403-branchpoint:1.10
	cagney_frameaddr-20030403-branch:1.10.0.16
	cagney_framebase-20030330-mergepoint:1.10
	cagney_framebase-20030326-branch:1.10.0.14
	cagney_framebase-20030326-branchpoint:1.10
	cagney_lazyid-20030317-branch:1.10.0.12
	cagney_lazyid-20030317-branchpoint:1.10
	kettenis-i386newframe-20030316-mergepoint:1.10
	offbyone-20030313-branch:1.10.0.10
	offbyone-20030313-branchpoint:1.10
	kettenis-i386newframe-20030308-branch:1.10.0.8
	kettenis-i386newframe-20030308-branchpoint:1.10
	carlton_dictionary-20030305-merge:1.10
	cagney_offbyone-20030303-branch:1.10.0.6
	cagney_offbyone-20030303-branchpoint:1.10
	carlton_dictionary-20030207-merge:1.10
	interps-20030202-branch:1.10.0.4
	interps-20030202-branchpoint:1.10
	cagney-unwind-20030108-branch:1.10.0.2
	cagney-unwind-20030108-branchpoint:1.10
	binutils-2_13_2_1:1.9
	binutils-2_13_2:1.9
	carlton_dictionary-20021223-merge:1.10
	gdb_5_3-2002-12-12-release:1.9
	carlton_dictionary-20021115-merge:1.9
	binutils-2_13_1:1.9
	kseitz_interps-20021105-merge:1.9
	kseitz_interps-20021103-merge:1.9
	drow-cplus-merge-20021020:1.9
	drow-cplus-merge-20021025:1.9
	carlton_dictionary-20021025-merge:1.9
	carlton_dictionary-20021011-merge:1.9
	drow-cplus-branch:1.9.0.20
	drow-cplus-branchpoint:1.9
	kseitz_interps-20020930-merge:1.9
	carlton_dictionary-20020927-merge:1.9
	carlton_dictionary-branch:1.9.0.18
	carlton_dictionary-20020920-branchpoint:1.9
	sid-20020905-branchpoint:1.9
	sid-20020905-branch:1.9.0.16
	gdb_5_3-branch:1.9.0.14
	gdb_5_3-2002-09-04-branchpoint:1.9
	kseitz_interps-20020829-merge:1.9
	cagney_sysregs-20020825-branch:1.9.0.12
	cagney_sysregs-20020825-branchpoint:1.9
	readline_4_3-import-branch:1.9.0.10
	readline_4_3-import-branchpoint:1.9
	binutils-2_13:1.9
	gdb_5_2_1-2002-07-23-release:1.8
	binutils-2_13-branchpoint:1.9
	binutils-2_13-branch:1.9.0.8
	kseitz_interps-20020528-branch:1.9.0.6
	kseitz_interps-20020528-branchpoint:1.9
	cagney_regbuf-20020515-branch:1.9.0.4
	cagney_regbuf-20020515-branchpoint:1.9
	binutils-2_12_1:1.8
	jimb-macro-020506-branch:1.9.0.2
	jimb-macro-020506-branchpoint:1.9
	gdb_5_2-2002-04-29-release:1.8
	binutils-2_12:1.8
	gdb_5_2-branch:1.8.0.4
	gdb_5_2-2002-03-03-branchpoint:1.8
	binutils-2_12-branch:1.8.0.2
	binutils-2_12-branchpoint:1.8
	gdb_5_1_1-2002-01-24-release:1.6
	gdb_5_1_0_1-2002-01-03-release:1.6
	cygnus_cvs_20020108_pre:1.8
	gdb_5_1_0_1-2002-01-03-branch:1.6.0.6
	gdb_5_1_0_1-2002-01-03-branchpoint:1.6
	gdb_5_1-2001-11-21-release:1.6
	gdb_s390-2001-09-26-branch:1.6.0.4
	gdb_s390-2001-09-26-branchpoint:1.6
	gdb_5_1-2001-07-29-branch:1.6.0.2
	gdb_5_1-2001-07-29-branchpoint:1.6
	binutils-2_11_2:1.3.2.1
	binutils-2_11_1:1.3.2.1
	binutils-2_11:1.3
	x86_64versiong3:1.3
	binutils-2_11-branch:1.3.0.2
	insight-precleanup-2001-01-01:1.3
	binutils-2_10_1:1.2
	binutils-2_10:1.2
	gdb-premipsmulti-2000-06-06-branch:1.2.0.6
	gdb-premipsmulti-2000-06-06-branchpoint:1.2
	gdb_5_0-2000-05-19-release:1.2
	gdb_4_18_2-2000-05-18-release:1.2
	gdb_4_95_1-2000-05-11-snapshot:1.2
	gdb_4_95_0-2000-04-27-snapshot:1.2
	gdb_5_0-2000-04-10-branch:1.2.0.4
	gdb_5_0-2000-04-10-branchpoint:1.2
	binutils-2_10-branch:1.2.0.2
	binutils-2_10-branchpoint:1.2
	binutils_latest_snapshot:1.25
	repo-unification-2000-02-06:1.2
	binu_ss_19990721:1.2
	binu_ss_19990602:1.1.1.1
	binu_ss_19990502:1.1.1.1
	cygnus:1.1.1;
locks; strict;
comment	@ * @;


1.25
date	2008.07.18.11.30.22;	author nickc;	state Exp;
branches;
next	1.24;

1.24
date	2007.07.03.14.26.40;	author nickc;	state Exp;
branches;
next	1.23;

1.23
date	2007.04.26.14.46.55;	author amodra;	state Exp;
branches;
next	1.22;

1.22
date	2007.03.26.12.22.59;	author amodra;	state Exp;
branches;
next	1.21;

1.21
date	2005.12.27.03.06.27;	author amodra;	state Exp;
branches;
next	1.20;

1.20
date	2005.08.26.09.47.43;	author nickc;	state Exp;
branches;
next	1.19;

1.19
date	2005.05.04.15.53.04;	author nickc;	state Exp;
branches;
next	1.18;

1.18
date	2005.05.04.07.19.20;	author nickc;	state Exp;
branches;
next	1.17;

1.17
date	2005.03.03.11.40.57;	author amodra;	state Exp;
branches;
next	1.16;

1.16
date	2004.10.21.15.28.19;	author hjl;	state Exp;
branches;
next	1.15;

1.15
date	2003.11.28.20.07.44;	author cpg;	state Exp;
branches;
next	1.14;

1.14
date	2003.11.24.18.06.40;	author kazu;	state Exp;
branches;
next	1.13;

1.13
date	2003.11.04.11.30.54;	author amodra;	state Exp;
branches;
next	1.12;

1.12
date	2003.10.04.21.09.29;	author cpg;	state Exp;
branches;
next	1.11;

1.11
date	2003.06.04.10.47.33;	author sveinse;	state Exp;
branches;
next	1.10;

1.10
date	2002.11.30.08.39.36;	author amodra;	state Exp;
branches;
next	1.9;

1.9
date	2002.04.25.10.59.16;	author nickc;	state Exp;
branches
	1.9.18.1
	1.9.20.1;
next	1.8;

1.8
date	2001.09.18.09.57.22;	author amodra;	state Exp;
branches;
next	1.7;

1.7
date	2001.08.23.17.05.52;	author nickc;	state Exp;
branches;
next	1.6;

1.6
date	2001.06.06.17.01.33;	author nickc;	state Exp;
branches;
next	1.5;

1.5
date	2001.04.24.15.22.23;	author nickc;	state Exp;
branches;
next	1.4;

1.4
date	2001.03.08.21.03.57;	author nickc;	state Exp;
branches;
next	1.3;

1.3
date	2000.11.16.00.54.12;	author kazu;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	99.07.19.14.55.15;	author nickc;	state Exp;
branches;
next	1.1;

1.1
date	99.05.03.07.28.55;	author rth;	state Exp;
branches
	1.1.1.1;
next	;

1.9.18.1
date	2002.12.23.19.37.29;	author carlton;	state Exp;
branches;
next	1.9.18.2;

1.9.18.2
date	2003.06.27.21.49.07;	author carlton;	state Exp;
branches;
next	1.9.18.3;

1.9.18.3
date	2003.11.11.23.50.09;	author carlton;	state Exp;
branches;
next	1.9.18.4;

1.9.18.4
date	2003.12.15.23.59.15;	author carlton;	state Exp;
branches;
next	;

1.9.20.1
date	2003.12.14.20.26.35;	author drow;	state Exp;
branches;
next	;

1.3.2.1
date	2001.06.07.03.08.23;	author amodra;	state Exp;
branches;
next	;

1.1.1.1
date	99.05.03.07.28.55;	author rth;	state Exp;
branches;
next	;


desc
@@


1.25
log
@        * pe-arm-wince.c (pe_print_compressed_pdata): Define new function to
        print compressed pdata structure as described on MSDN. This only
        applies to a limited set of architectures (ARM, SH4).
        (slurp_symtab, my_symbol_for_address): Define static helper
        functions for pe_print_compressed_pdata.
        * coffcode.h (bfd_coff_backend_data): Add _bfd_coff_print_pdata field.
        (bfd_coff_have_print_pdata, bfd_coff_print_pdata): Define.
        * bfd/peXXigen.c (_bfd_XX_print_private_bfd_data_common): Add check on
        bfd_coff_backend_data, call the function if non-null.
        * pei-mcore.c: Add target dependent initialisation for
        bfd_coff_backend_data.
        * coff-sh.c: Likewise.
        * coff64-rs6000.c: Likewise.
        * coff-rs6000.c: Likewise.
        * libcoff-in.h: Likewise.
        * cf-i386lynx.c: Likewise.
        * coff-alpha.c: Likewise.
        * coff-apollo.c: Likewise.
        * coff-arm.c: Likewise.
        * coff-aux.c: Likewise.
        * coff-h8300.c: Likewise.
        * coff-h8500.c: Likewise.
        * coff-i386.c: Likewise.
        * coff-i860.c: Likewise.
        * coff-i960.c: Likewise.
        * coff-ia64.c: Likewise.
        * coff-m68k.c: Likewise.
        * coff-m88k.c: Likewise.
        * coff-maxq.c: Likewise.
        * coff-mips.c: Likewise.
        * coff-or32.c: Likewise.
        * coff-sparc.c: Likewise.
        * coff-tic30.c: Likewise.
        * coff-tic4x.c: Likewise.
        * coff-tic54x.c: Likewise.
        * coff-tic80.c: Likewise.
        * coff-w65.c: Likewise.
        * coff-we32k.c: Likewise.
        * coff-x86_64.c: Likewise.
        * coff-z80.c: Likewise.
        * coff-z8k.c: Likewise.
        * pe-mcore.c: Likewise.
        * pe-mips.c: Likewise.
        * pe-ppc.c: Likewise.
        * peXXigen.c: Likewise.
        * pei-ppc.c: Likewise.
        * libcoff.h: Regenerate.
@
text
@/* BFD back-end for Zilog Z800n COFF binaries.
   Copyright 1992, 1993, 1994, 1995, 1997, 1999, 2000, 2001, 2002, 2003,
   2004, 2005, 2007, 2008  Free Software Foundation, Inc.
   Contributed by Cygnus Support.
   Written by Steve Chamberlain, <sac@@cygnus.com>.

   This file is part of BFD, the Binary File Descriptor library.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,
   MA 02110-1301, USA.  */

#include "sysdep.h"
#include "bfd.h"
#include "libbfd.h"
#include "bfdlink.h"
#include "coff/z8k.h"
#include "coff/internal.h"
#include "libcoff.h"

#define COFF_DEFAULT_SECTION_ALIGNMENT_POWER (1)

static reloc_howto_type r_imm32 =
HOWTO (R_IMM32, 0, 2, 32, FALSE, 0,
       complain_overflow_bitfield, 0, "r_imm32", TRUE, 0xffffffff,
       0xffffffff, FALSE);

static reloc_howto_type r_imm4l =
HOWTO (R_IMM4L, 0, 0, 4, FALSE, 0,
       complain_overflow_bitfield, 0, "r_imm4l", TRUE, 0xf, 0xf, FALSE);

static reloc_howto_type r_da =
HOWTO (R_IMM16, 0, 1, 16, FALSE, 0,
       complain_overflow_bitfield, 0, "r_da", TRUE, 0x0000ffff, 0x0000ffff,
       FALSE);

static reloc_howto_type r_imm8 =
HOWTO (R_IMM8, 0, 0, 8, FALSE, 0,
       complain_overflow_bitfield, 0, "r_imm8", TRUE, 0x000000ff, 0x000000ff,
       FALSE);

static reloc_howto_type r_rel16 =
HOWTO (R_REL16, 0, 1, 16, FALSE, 0,
       complain_overflow_bitfield, 0, "r_rel16", TRUE, 0x0000ffff, 0x0000ffff,
       TRUE);

static reloc_howto_type r_jr =
HOWTO (R_JR, 1, 0, 8, TRUE, 0, complain_overflow_signed, 0,
       "r_jr", TRUE, 0xff, 0xff, TRUE);

static reloc_howto_type r_disp7 =
HOWTO (R_DISP7, 0, 0, 7, TRUE, 0, complain_overflow_bitfield, 0,
       "r_disp7", TRUE, 0x7f, 0x7f, TRUE);

static reloc_howto_type r_callr =
HOWTO (R_CALLR, 1, 1, 12, TRUE, 0, complain_overflow_signed, 0,
       "r_callr", TRUE, 0xfff, 0xfff, TRUE);

#define BADMAG(x) Z8KBADMAG(x)
#define Z8K 1			/* Customize coffcode.h.  */
#define __A_MAGIC_SET__

/* Code to swap in the reloc.  */
#define SWAP_IN_RELOC_OFFSET	H_GET_32
#define SWAP_OUT_RELOC_OFFSET	H_PUT_32
#define SWAP_OUT_RELOC_EXTRA(abfd, src, dst) \
  dst->r_stuff[0] = 'S'; \
  dst->r_stuff[1] = 'C';

/* Code to turn a r_type into a howto ptr, uses the above howto table.  */

static void
rtype2howto (arelent *internal, struct internal_reloc *dst)
{
  switch (dst->r_type)
    {
    default:
      abort ();
      break;
    case R_IMM8:
      internal->howto = &r_imm8;
      break;
     case R_IMM16:
      internal->howto = &r_da;
      break;
    case R_JR:
      internal->howto = &r_jr;
      break;
    case R_DISP7:
      internal->howto = &r_disp7;
      break;
    case R_CALLR:
      internal->howto = &r_callr;
      break;
    case R_REL16:
      internal->howto = &r_rel16;
      break;
    case R_IMM32:
      internal->howto = &r_imm32;
      break;
    case R_IMM4L:
      internal->howto = &r_imm4l;
      break;
    }
}

#define RTYPE2HOWTO(internal, relocentry) rtype2howto (internal, relocentry)

static reloc_howto_type *
coff_z8k_reloc_type_lookup (bfd *abfd ATTRIBUTE_UNUSED,
                            bfd_reloc_code_real_type code)
{
  switch (code)
    {
    case BFD_RELOC_8:      	return & r_imm8;
    case BFD_RELOC_16:      	return & r_da;
    case BFD_RELOC_32:      	return & r_imm32;
    case BFD_RELOC_8_PCREL:     return & r_jr;
    case BFD_RELOC_16_PCREL:    return & r_rel16;
    case BFD_RELOC_Z8K_DISP7:   return & r_disp7;
    case BFD_RELOC_Z8K_CALLR:   return & r_callr;
    case BFD_RELOC_Z8K_IMM4L:   return & r_imm4l;
    default:			BFD_FAIL ();
      return 0;
    }
}

static reloc_howto_type *
coff_z8k_reloc_name_lookup (bfd *abfd ATTRIBUTE_UNUSED,
			    const char *r_name)
{
  if (strcasecmp (r_imm8.name, r_name) == 0)
    return &r_imm8;
  if (strcasecmp (r_da.name, r_name) == 0)
    return &r_da;
  if (strcasecmp (r_imm32.name, r_name) == 0)
    return &r_imm32;
  if (strcasecmp (r_jr.name, r_name) == 0)
    return &r_jr;
  if (strcasecmp (r_rel16.name, r_name) == 0)
    return &r_rel16;
  if (strcasecmp (r_disp7.name, r_name) == 0)
    return &r_disp7;
  if (strcasecmp (r_callr.name, r_name) == 0)
    return &r_callr;
  if (strcasecmp (r_imm4l.name, r_name) == 0)
    return &r_imm4l;

  return NULL;
}

/* Perform any necessary magic to the addend in a reloc entry.  */

#define CALC_ADDEND(abfd, symbol, ext_reloc, cache_ptr) \
 cache_ptr->addend =  ext_reloc.r_offset;

#define RELOC_PROCESSING(relent,reloc,symbols,abfd,section) \
 reloc_processing(relent, reloc, symbols, abfd, section)

static void
reloc_processing (arelent *relent,
                  struct internal_reloc *reloc,
                  asymbol **symbols,
                  bfd *abfd,
                  asection *section)
{
  relent->address = reloc->r_vaddr;
  rtype2howto (relent, reloc);

  if (reloc->r_symndx > 0)
    relent->sym_ptr_ptr = symbols + obj_convert (abfd)[reloc->r_symndx];
  else
    relent->sym_ptr_ptr = bfd_abs_section_ptr->symbol_ptr_ptr;

  relent->addend = reloc->r_offset;
  relent->address -= section->vma;
}

static void
extra_case (bfd *in_abfd,
            struct bfd_link_info *link_info,
            struct bfd_link_order *link_order,
            arelent *reloc,
            bfd_byte *data,
            unsigned int *src_ptr,
            unsigned int *dst_ptr)
{
  asection * input_section = link_order->u.indirect.section;

  switch (reloc->howto->type)
    {
    case R_IMM8:
      bfd_put_8 (in_abfd,
		 bfd_coff_reloc16_get_value (reloc, link_info, input_section),
		 data + *dst_ptr);
      (*dst_ptr) += 1;
      (*src_ptr) += 1;
      break;

    case R_IMM32:
      /* If no flags are set, assume immediate value.  */
      if (! (*reloc->sym_ptr_ptr)->section->flags)
	{
	  bfd_put_32 (in_abfd,
		      bfd_coff_reloc16_get_value (reloc, link_info,
						  input_section),
		      data + *dst_ptr);
	}
      else
	{
	  bfd_vma dst = bfd_coff_reloc16_get_value (reloc, link_info,
						    input_section);
	  /* Addresses are 23 bit, and the layout of those in a 32-bit
	     value is as follows:
	       1AAAAAAA xxxxxxxx AAAAAAAA AAAAAAAA
	     (A - address bits,  x - ignore).  */
	  dst = (dst & 0xffff) | ((dst & 0xff0000) << 8) | 0x80000000;
	  bfd_put_32 (in_abfd, dst, data + *dst_ptr);
	}
      (*dst_ptr) += 4;
      (*src_ptr) += 4;
      break;

    case R_IMM4L:
      bfd_put_8 (in_abfd,
		 ((bfd_get_8 (in_abfd, data + *dst_ptr) & 0xf0)
		  | (0x0f
		     & bfd_coff_reloc16_get_value (reloc, link_info,
						   input_section))),
		 data + *dst_ptr);
      (*dst_ptr) += 1;
      (*src_ptr) += 1;
      break;

    case R_IMM16:
      bfd_put_16 (in_abfd,
		  bfd_coff_reloc16_get_value (reloc, link_info, input_section),
		  data + *dst_ptr);
      (*dst_ptr) += 2;
      (*src_ptr) += 2;
      break;

    case R_JR:
      {
	bfd_vma dst = bfd_coff_reloc16_get_value (reloc, link_info,
						  input_section);
	bfd_vma dot = (*dst_ptr
		       + input_section->output_offset
		       + input_section->output_section->vma);
	int gap = dst - dot - 1;  /* -1, since we're in the odd byte of the
                                     word and the pc's been incremented.  */

	if (gap & 1)
	  abort ();
	gap /= 2;
	if (gap > 128 || gap < -128)
	  {
	    if (! ((*link_info->callbacks->reloc_overflow)
		   (link_info, NULL,
		    bfd_asymbol_name (*reloc->sym_ptr_ptr),
		    reloc->howto->name, reloc->addend, input_section->owner,
		    input_section, reloc->address)))
	      abort ();
	  }
	bfd_put_8 (in_abfd, gap, data + *dst_ptr);
	(*dst_ptr)++;
	(*src_ptr)++;
	break;
      }

    case R_DISP7:
      {
	bfd_vma dst = bfd_coff_reloc16_get_value (reloc, link_info,
						  input_section);
	bfd_vma dot = (*dst_ptr
		       + input_section->output_offset
		       + input_section->output_section->vma);
	int gap = dst - dot - 1;  /* -1, since we're in the odd byte of the
                                     word and the pc's been incremented.  */

	if (gap & 1)
	  abort ();
	gap /= 2;

	if (gap > 0 || gap < -127)
	  {
	    if (! ((*link_info->callbacks->reloc_overflow)
		   (link_info, NULL,
		    bfd_asymbol_name (*reloc->sym_ptr_ptr),
		    reloc->howto->name, reloc->addend, input_section->owner,
		    input_section, reloc->address)))
	      abort ();
	  }
	bfd_put_8 (in_abfd,
                   (bfd_get_8 ( in_abfd, data + *dst_ptr) & 0x80) + (-gap & 0x7f),
                   data + *dst_ptr);
	(*dst_ptr)++;
	(*src_ptr)++;
	break;
      }

    case R_CALLR:
      {
	bfd_vma dst = bfd_coff_reloc16_get_value (reloc, link_info,
						  input_section);
	bfd_vma dot = (*dst_ptr
		       + input_section->output_offset
		       + input_section->output_section->vma);
	int gap = dst - dot - 2;

	if (gap & 1)
	  abort ();
	if (gap > 4096 || gap < -4095)
	  {
	    if (! ((*link_info->callbacks->reloc_overflow)
		   (link_info, NULL,
		    bfd_asymbol_name (*reloc->sym_ptr_ptr),
		    reloc->howto->name, reloc->addend, input_section->owner,
		    input_section, reloc->address)))
	      abort ();
	  }
	gap /= 2;
	bfd_put_16 (in_abfd,
                    (bfd_get_16 ( in_abfd, data + *dst_ptr) & 0xf000) | (-gap & 0x0fff),
                    data + *dst_ptr);
	(*dst_ptr) += 2;
	(*src_ptr) += 2;
	break;
      }

    case R_REL16:
      {
	bfd_vma dst = bfd_coff_reloc16_get_value (reloc, link_info,
						  input_section);
	bfd_vma dot = (*dst_ptr
		       + input_section->output_offset
		       + input_section->output_section->vma);
	int gap = dst - dot - 2;

	if (gap > 32767 || gap < -32768)
	  {
	    if (! ((*link_info->callbacks->reloc_overflow)
		   (link_info, NULL,
		    bfd_asymbol_name (*reloc->sym_ptr_ptr),
		    reloc->howto->name, reloc->addend, input_section->owner,
		    input_section, reloc->address)))
	      abort ();
	  }
	bfd_put_16 (in_abfd, (bfd_vma) gap, data + *dst_ptr);
	(*dst_ptr) += 2;
	(*src_ptr) += 2;
	break;
      }

    default:
      abort ();
    }
}

#define coff_reloc16_extra_cases    extra_case
#define coff_bfd_reloc_type_lookup  coff_z8k_reloc_type_lookup
#define coff_bfd_reloc_name_lookup coff_z8k_reloc_name_lookup

#ifndef bfd_pe_print_pdata
#define bfd_pe_print_pdata	NULL
#endif

#include "coffcode.h"

#undef  coff_bfd_get_relocated_section_contents
#define coff_bfd_get_relocated_section_contents \
  bfd_coff_reloc16_get_relocated_section_contents

#undef  coff_bfd_relax_section
#define coff_bfd_relax_section bfd_coff_reloc16_relax_section

CREATE_BIG_COFF_TARGET_VEC (z8kcoff_vec, "coff-z8k", 0, 0, '_', NULL, COFF_SWAP_TABLE)
@


1.24
log
@Switch sources over to use the GPL version 3
@
text
@d3 1
a3 1
   2004, 2005, 2007 Free Software Foundation, Inc.
d375 4
@


1.23
log
@
bfd/
	Many files: Include sysdep.h before bfd.h.
	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.
binutils/
	* bucumm.h: Split off host dependencies to..
	* sysdep.h: ..here.
	Many files: Include sysdep.h.  Remove duplicate headers and reorder.
	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.
ld/
	Many files: Include sysdep.h first.  Remove duplicate headers.
	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.
opcodes/
	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.
	* ns32k-dis.c: Include sysdep.h first.
@
text
@d11 1
a11 1
   the Free Software Foundation; either version 2 of the License, or
d21 2
a22 1
   Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA 02110-1301, USA.  */
@


1.22
log
@	* aout-adobe.c (aout_32_bfd_reloc_name_lookup): Define.
	* aout-arm.c (MY_bfd_reloc_name_lookup): Define.
	(MY (bfd_reloc_name_lookup)): New function.
	* aout-ns32k.c (MY (bfd_reloc_name_lookup)): New function.
	* aout-target.h (NAME (aout, reloc_name_lookup)): Declare.
	(MY_bfd_reloc_name_lookup): Define.
	* aout-tic30.c (tic30_aout_reloc_name_lookup): New function.
	(MY_bfd_reloc_name_lookup): Define.
	* aoutx.h (NAME (aout, reloc_type_lookup)): Don't declare.
	(NAME (aout, reloc_name_lookup)): New function.
	* bout.c (b_out_bfd_reloc_name_lookup): New function.
	* coff-alpha.c (alpha_bfd_reloc_name_lookup): New function.
	(_bfd_ecoff_bfd_reloc_name_lookup): Define.
	* coff-arm.c (coff_arm_reloc_name_lookup): New function.
	(coff_bfd_reloc_name_lookup): Define.
	* coff-i386.c (coff_bfd_reloc_name_lookup): Define.
	(coff_i386_reloc_name_lookup): New function.
	* coff-i860.c (coff_i860_reloc_name_lookup): New function.
	(coff_bfd_reloc_name_lookup): Define.
	* coff-i960.c (coff_i960_reloc_name_lookup): New function.
	(coff_bfd_reloc_name_lookup): Define.
	* coff-m68k.c (m68k_reloc_name_lookup): New function.
	(coff_bfd_reloc_name_lookup): Define.
	* coff-maxq.c (maxq_reloc_name_lookup): New function.
	(coff_bfd_reloc_name_lookup): Define.
	* coff-mcore.c (mcore_coff_reloc_name_lookup): New function.
	(coff_bfd_reloc_name_lookup): Define.
	* coff-mips.c (mips_bfd_reloc_name_lookup): New function.
	(_bfd_ecoff_bfd_reloc_name_lookup): Define.
	* coff-ppc.c (ppc_coff_reloc_name_lookup): New function.
	(coff_bfd_reloc_name_lookup): Define.
	* coff-rs6000.c (coff_bfd_reloc_name_lookup): Define.
	(_bfd_xcoff_reloc_name_lookup): New function.
	(rs6000coff_vec, pmac_xcoff_vec): Init new field.
	* coff-sh.c (coff_bfd_reloc_name_lookup): Define.
	(sh_coff_reloc_name_lookup): New function.
	* coff-sparc.c (coff_sparc_reloc_name_lookup): New function.
	(coff_bfd_reloc_name_lookup): Define.
	* coff-tic30.c (coff_bfd_reloc_name_lookup): Define.
	(tic30_coff_reloc_name_lookup): New function.
	* coff-tic4x.c (coff_bfd_reloc_name_lookup): Define.
	(tic4x_coff_reloc_name_lookup): New function.
	* coff-tic54x.c (coff_bfd_reloc_name_lookup): Define.
	(tic54x_coff_reloc_name_lookup): New function.
	* coff-x86_64.c (coff_bfd_reloc_name_lookup): Define.
	(coff_amd64_reloc_name_lookup): New function.
	* coff-z80.c (coff_z80_reloc_name_lookup): New function.
	(coff_bfd_reloc_name_lookup): Define.
	* coff-z8k.c (coff_z8k_reloc_name_lookup): New function.
	(coff_bfd_reloc_name_lookup): Define.
	* coff64-rs6000.c (coff_bfd_reloc_name_lookup): Define.
	(xcoff64_reloc_name_lookup): New function.
	(rs6000coff64_vec, aix5coff64_vec): Init new field.
	* coffcode.h (coff_bfd_reloc_name_lookup): Define.
	* elf-hppa.h (elf_hppa_reloc_name_lookup): New function.
	* elf-m10200.c (bfd_elf32_bfd_reloc_name_lookup): New function.
	* elf-m10300.c (bfd_elf32_bfd_reloc_name_lookup): New function.
	* elf32-arc.c (bfd_elf32_bfd_reloc_name_lookup): New function.
	* elf32-arm.c (elf32_arm_reloc_name_lookup): New function.
	(bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-avr.c (bfd_elf32_bfd_reloc_name_lookup): New function.
	* elf32-bfin.c (bfin_bfd_reloc_name_lookup): New function.
	(bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-cr16c.c (elf_cr16c_reloc_name_lookup): New function.
	(bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-cris.c (cris_reloc_name_lookup): New function.
	(bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-crx.c (elf_crx_reloc_name_lookup): New function.
	(bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-d10v.c (bfd_elf32_bfd_reloc_name_lookup): New function.
	* elf32-d30v.c (bfd_elf32_bfd_reloc_name_lookup): New function.
	* elf32-dlx.c (elf32_dlx_reloc_name_lookup): New function.
	(bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-fr30.c (fr30_reloc_name_lookup): New function.
	(bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-frv.c (frv_reloc_name_lookup): New function.
	(bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-gen.c (bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-h8300.c (elf32_h8_reloc_name_lookup): New function.
	(bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-hppa.c (bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-i370.c (i370_elf_reloc_name_lookup): New function.
	(bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-i386.c (elf_i386_reloc_name_lookup): New function.
	(bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-i860.c (elf32_i860_reloc_name_lookup): New function.
	(bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-i960.c (elf32_i960_reloc_name_lookup): New function.
	(bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-ip2k.c (ip2k_reloc_name_lookup): New function.
	(bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-iq2000.c (iq2000_reloc_name_lookup): New function.
	(bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-m32c.c (m32c_reloc_name_lookup): New function.
	(bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-m32r.c (bfd_elf32_bfd_reloc_name_lookup): New function.
	* elf32-m68hc11.c (bfd_elf32_bfd_reloc_name_lookup): New function.
	* elf32-m68hc12.c (bfd_elf32_bfd_reloc_name_lookup): New function.
	* elf32-m68k.c (reloc_name_lookup): New function.
	(bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-m88k.c (bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-mcore.c (mcore_elf_reloc_name_lookup): New function.
	(bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-mep.c (mep_reloc_name_lookup): New function.
	(bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-mips.c (bfd_elf32_bfd_reloc_name_lookup): New function.
	(mips_vxworks_bfd_reloc_name_lookup): Likewise.
	(bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-msp430.c (bfd_elf32_bfd_reloc_name_lookup): New function.
	* elf32-mt.c (mt_reloc_name_lookup): New function.
	(bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-openrisc.c (openrisc_reloc_name_lookup): New function.
	(bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-or32.c (bfd_elf32_bfd_reloc_name_lookup): New function.
	* elf32-pj.c (pj_elf_reloc_name_lookup): New function.
	(bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-ppc.c (ppc_elf_reloc_name_lookup): New function.
	(bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-s390.c (elf_s390_reloc_name_lookup): New function.
	(bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-score.c (elf32_score_reloc_name_lookup): New function.
	(bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-sh.c (sh_elf_reloc_name_lookup): New function.
	(bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-sparc.c (bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-spu.c (spu_elf_reloc_name_lookup): New function.
	(bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-v850.c (v850_elf_reloc_name_lookup): New function.
	(bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-vax.c (reloc_name_lookup): New function.
	(bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-xc16x.c (xc16x_reloc_name_lookup): New function.
	(bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-xstormy16.c (xstormy16_reloc_name_lookup): New function.
	(bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-xtensa.c (elf_xtensa_reloc_name_lookup): New function.
	(bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf64-alpha.c (elf64_alpha_bfd_reloc_name_lookup): New function.
	(bfd_elf64_bfd_reloc_name_lookup): Define.
	* elf64-gen.c (bfd_elf64_bfd_reloc_name_lookup): Define.
	* elf64-hppa.c (bfd_elf64_bfd_reloc_name_lookup): Define.
	* elf64-mips.c (bfd_elf64_bfd_reloc_name_lookup): New function.
	* elf64-mmix.c (bfd_elf64_bfd_reloc_name_lookup): New function.
	* elf64-ppc.c (ppc64_elf_reloc_name_lookup): New function.
	(bfd_elf64_bfd_reloc_name_lookup): Define.
	* elf64-s390.c (elf_s390_reloc_name_lookup): New function.
	(bfd_elf64_bfd_reloc_name_lookup): Define.
	* elf64-sh64.c (sh_elf64_reloc_name_lookup): New function.
	(bfd_elf64_bfd_reloc_name_lookup): Define.
	* elf64-sparc.c (bfd_elf64_bfd_reloc_name_lookup): Define.
	* elf64-x86-64.c (elf64_x86_64_reloc_name_lookup): New function.
	(bfd_elf64_bfd_reloc_name_lookup): Define.
	* elfn32-mips.c (bfd_elf32_bfd_reloc_name_lookup): New function.
	* elfxx-ia64.c (elfNN_ia64_reloc_name_lookup): New function.
	(bfd_elfNN_bfd_reloc_name_lookup): Define.
	* elfxx-sparc.c (_bfd_sparc_elf_reloc_name_lookup): New function.
	* elfxx-sparc.h (_bfd_sparc_elf_reloc_name_lookup): Declare.
	* i386msdos.c (msdos_bfd_reloc_name_lookup): Define.
	* i386os9k.c (aout_32_bfd_reloc_name_lookup): Define.
	* ieee.c (ieee_bfd_reloc_name_lookup): Define.
	* libaout.h (NAME (aout, reloc_name_lookup)): Declare.
	* libbfd-in.h (_bfd_norelocs_bfd_reloc_name_lookup): Declare.
	* mipsbsd.c (MY_bfd_reloc_name_lookup): Define.
	(MY(reloc_type_lookup)): Rename from MY(reloc_howto_type_lookup).
	(MY(reloc_name_lookup)): New function.
	* nlm-target.h (nlm_bfd_reloc_name_lookup): Define.
	* oasys.c (oasys_bfd_reloc_name_lookup): Define.
	* pdp11.c (NAME (aout, reloc_name_lookup)): New function.
	* pe-mips.c (coff_mips_reloc_name_lookup): New function.
	(coff_bfd_reloc_name_lookup): Define.
	* reloc.c (bfd_reloc_name_lookup): New function.
	* riscix.c (riscix_reloc_name_lookup): New function.
	(MY_bfd_reloc_name_lookup): Define.
	* som.c (som_bfd_reloc_name_lookup): New function.
	* targets.c (struct bfd_target): Add reloc_name_lookup.
	(BFD_JUMP_TABLE_RELOCS): Add NAME##_bfd_reloc_name_lookup.
	* versados.c (versados_bfd_reloc_name_lookup): Define.
	* vms.c (vms_bfd_reloc_name_lookup): New function.
	* bfd-in2.h: Regenerate.
	* libbfd.h: Regenerate.
@
text
@d23 1
a24 1
#include "sysdep.h"
@


1.21
log
@	* coff-h8300.c (h8300_reloc16_extra_cases): Use input section
	"output_offset" instead of link order "offset".
	* coff-h8500.c (extra_case): Likewise.
	* coff-w65.c (w65_reloc16_extra_cases): Likewise.
	* coff-z80.c (extra_case): Likewise.
	* coff-z8k.c (extra_case): Likewise.
	* linker.c (default_indirect_link_order): Likewise, "size" too.
	* ecoff.c (ecoff_indirect_link_order): Likewise.
@
text
@d3 1
a3 1
   2004, 2005 Free Software Foundation, Inc.
d138 24
d372 1
@


1.20
log
@Re-enable GAS for z8k-coff
@
text
@d233 2
a234 2
	bfd_vma dot = (link_order->offset
		       + *dst_ptr
d261 2
a262 2
	bfd_vma dot = (link_order->offset
		       + *dst_ptr
d292 2
a293 2
	bfd_vma dot = (link_order->offset
		       + *dst_ptr
d321 2
a322 2
	bfd_vma dot = (link_order->offset
		       + *dst_ptr
@


1.19
log
@Update the address and phone number of the FSF organization in the GPL notices
@
text
@d3 1
a3 1
   2004 Free Software Foundation, Inc.
d7 1
a7 1
This file is part of BFD, the Binary File Descriptor library.
d9 13
a21 13
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA 02110-1301, USA.  */
d58 2
a59 2
HOWTO (R_JR, 0, 0, 8, TRUE, 0, complain_overflow_signed, 0,
       "r_jr", TRUE, 0, 0, TRUE);
d63 1
a63 1
       "r_disp7", TRUE, 0, 0, TRUE);
d66 1
a66 1
HOWTO (R_CALLR, 0, 1, 12, TRUE, 0, complain_overflow_signed, 0,
a68 10
/* Turn a howto into a reloc number */

static int
coff_z8k_select_reloc (reloc_howto_type *howto)
{
  return howto->type;
}

#define SELECT_RELOC(x,howto) x.r_type = coff_z8k_select_reloc(howto)

d70 1
a70 1
#define Z8K 1			/* Customize coffcode.h */
d119 19
d346 2
a347 1
#define coff_reloc16_extra_cases extra_case
a351 1
#undef coff_bfd_relax_section
d354 2
@


1.18
log
@Update the FSF address in the copyright/GPL notice
@
text
@d21 1
a21 1
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02110-1301, USA.  */
@


1.17
log
@update copyright dates
@
text
@d21 1
a21 1
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
@


1.16
log
@bfd/

2004-10-21  H.J. Lu  <hongjiu.lu@@intel.com>

	PR 463
	* aoutx.h (aout_link_input_section_std): Pass proper hash entry
	to linker reloc_overflow callback.
	(aout_link_input_section_ext): Likewise.
	(aout_link_reloc_link_order): Likewise.
	* coff-a29k.c (coff_a29k_relocate_section): Likewise.
	* coff-alpha.c (alpha_ecoff_get_relocated_section_contents):
	Likewise.
	(alpha_relocate_section): Likewise.
	* coff-arm.c (coff_arm_relocate_section): Likewise.
	* coff-h8300.c (h8300_reloc16_extra_cases): Likewise.
	* coff-h8500.c (extra_case): Likewise.
	* coff-i960.c (coff_i960_relocate_section): Likewise.
	* coff-mcore.c (coff_mcore_relocate_section): Likewise.
	* coff-mips.c (mips_relocate_section): Likewise.
	* coff-or32.c (coff_or32_relocate_section): Likewise.
	* coff-ppc.c (coff_ppc_relocate_section): Likewise.
	* coff-rs6000.c (xcoff_ppc_relocate_section): Likewise.
	* coff-sh.c (sh_relocate_section): Likewise.
	* coff-tic80.c (coff_tic80_relocate_section): Likewise.
	* coff-w65.c (w65_reloc16_extra_cases): Likewise.
	* coff-z8k.c (extra_case): Likewise.
	* coff64-rs6000.c (xcoff64_ppc_relocate_section): Likewise.
	* cofflink.c (_bfd_coff_reloc_link_order): Likewise.
	(_bfd_coff_generic_relocate_section): Likewise.
	* ecoff.c (ecoff_reloc_link_order): Likewise.
	* elf-hppa.h (elf_hppa_relocate_section): Likewise.
	* elf-m10200.c (mn10200_elf_relocate_section): Likewise.
	* elf-m10300.c (mn10300_elf_relocate_section): Likewise.
	* elf32-arm.h (elf32_arm_relocate_section): Likewise.
	* elf32-avr.c (elf32_avr_relocate_section): Likewise.
	* elf32-cr16c.c (elf32_cr16c_relocate_section): Likewise.
	* elf32-cris.c (cris_elf_relocate_section): Likewise.
	* elf32-crx.c (elf32_crx_relocate_section): Likewise.
	* elf32-d10v.c (elf32_d10v_relocate_section): Likewise.
	* elf32-fr30.c (fr30_elf_relocate_section): Likewise.
	* elf32-frv.c (elf32_frv_relocate_section): Likewise.
	* elf32-h8300.c (elf32_h8_relocate_section): Likewise.
	* elf32-hppa.c (elf32_hppa_relocate_section): Likewise.
	* elf32-i370.c (i370_elf_relocate_section): Likewise.
	* elf32-i386.c (elf_i386_relocate_section): Likewise.
	* elf32-i860.c (elf32_i860_relocate_section): Likewise.
	* elf32-ip2k.c (ip2k_elf_relocate_section): Likewise.
	* elf32-iq2000.c (iq2000_elf_relocate_section): Likewise.
	* elf32-m32r.c (m32r_elf_relocate_section): Likewise.
	* elf32-m68hc1x.c (elf32_m68hc11_relocate_section): Likewise.
	* elf32-m68k.c (elf_m68k_relocate_section): Likewise.
	* elf32-mcore.c (mcore_elf_relocate_section): Likewise.
	* elf32-msp430.c (elf32_msp430_relocate_section): Likewise.
	* elf32-openrisc.c (openrisc_elf_relocate_section): Likewise.
	* elf32-ppc.c (ppc_elf_relocate_section): Likewise.
	* elf32-s390.c (elf_s390_relocate_section): Likewise.
	* elf32-sh.c (sh_elf_relocate_section): Likewise.
	* elf32-sparc.c (elf32_sparc_relocate_section): Likewise.
	* elf32-v850.c (v850_elf_relocate_section): Likewise.
	* elf32-vax.c (elf_vax_relocate_section): Likewise.
	* elf32-xstormy16.c (xstormy16_elf_relocate_section): Likewise.
	* elf64-alpha.c (elf64_alpha_relocate_section): Likewise.
	* elf64-mmix.c (mmix_elf_relocate_section): Likewise.
	* elf64-ppc.c (ppc64_elf_relocate_section): Likewise.
	* elf64-s390.c (elf_s390_relocate_section): Likewise.
	* elf64-sh64.c (sh_elf64_relocate_section): Likewise.
	* elf64-sparc.c (sparc64_elf_relocate_section): Likewise.
	* elf64-x86-64.c (elf64_x86_64_relocate_section): Likewise.
	* elflink.c (elf_reloc_link_order): Likewise.
	* elfxx-ia64.c (elfNN_ia64_relocate_section): Likewise.
	* elfxx-mips.c (_bfd_mips_elf_relocate_section): Likewise.
	(_bfd_elf_mips_get_relocated_section_contents): Likewise.
	* linker.c (_bfd_generic_reloc_link_order): Likewise.
	* pdp11.c (pdp11_aout_link_input_section): Likewise.
	(aout_link_reloc_link_order): Likewise.
	* reloc.c (bfd_generic_get_relocated_section_contents):
	Likewise.
	* xcofflink.c (xcoff_reloc_link_order): Likewise.
	* simple.c (simple_dummy_reloc_overflow): Updated.

include/

2004-10-21  H.J. Lu  <hongjiu.lu@@intel.com>

	PR 463
	* bfdlink.h (bfd_link_callbacks): Add a pointer to struct
	bfd_link_hash_entry to reloc_overflow.

ld/

2004-10-21  H.J. Lu  <hongjiu.lu@@intel.com>

	PR 463
	* ldmain.c (reloc_overflow): Accept a pointer to struct
	bfd_link_hash_entry. Report symbol location for relocation
	overflow.
@
text
@d2 2
a3 2
   Copyright 1992, 1993, 1994, 1995, 1997, 1999, 2000, 2001, 2002, 2003
   Free Software Foundation, Inc.
@


1.15
log
@	* cpu-z8k.c: Convert to ISO C90.
	* coff-z8k.c: Likewise.
@
text
@d236 2
a237 1
		   (link_info, bfd_asymbol_name (*reloc->sym_ptr_ptr),
d265 2
a266 1
		   (link_info, bfd_asymbol_name (*reloc->sym_ptr_ptr),
d293 2
a294 1
		   (link_info, bfd_asymbol_name (*reloc->sym_ptr_ptr),
d320 2
a321 1
		   (link_info, bfd_asymbol_name (*reloc->sym_ptr_ptr),
@


1.14
log
@	* aix5ppc-core.c: Fix comment typos.
	* aout-arm.c: Likewise.
	* aout-ns32k.c: Likewise.
	* aoutx.h: Likewise.
	* archures.c: Likewise.
	* bfd-in.h: Likewise.
	* bfd.c: Likewise.
	* bfdio.c: Likewise.
	* coff-arm.c: Likewise.
	* coff-h8300.c: Likewise.
	* coff-i860.c: Likewise.
	* coff-m88k.c: Likewise.
	* coff-mcore.c: Likewise.
	* coff-ppc.c: Likewise.
	* coff-rs6000.c: Likewise.
	* coff-z8k.c: Likewise.
	* coff64-rs6000.c: Likewise.
	* coffcode.h: Likewise.
	* cofflink.c: Likewise.
	* cpu-alpha.c: Likewise.
	* cpu-arm.c: Likewise.
	* cpu-ns32k.c: Likewise.
	* dwarf2.c: Likewise.
	* bfd-in2.h: Regenerate.
@
text
@a30 5
static void extra_case PARAMS ((bfd *, struct bfd_link_info *, struct bfd_link_order *, arelent *, bfd_byte *, unsigned int *, unsigned int *));
static void reloc_processing PARAMS ((arelent *, struct internal_reloc *, asymbol **, bfd *, asection *));
static void rtype2howto PARAMS ((arelent *, struct internal_reloc *));
static int coff_z8k_select_reloc PARAMS ((reloc_howto_type *));

d72 1
a72 2
coff_z8k_select_reloc (howto)
     reloc_howto_type *howto;
d93 1
a93 3
rtype2howto (internal, dst)
     arelent * internal;
     struct internal_reloc *dst;
d138 5
a142 6
reloc_processing (relent, reloc, symbols, abfd, section)
     arelent * relent;
     struct internal_reloc * reloc;
     asymbol ** symbols;
     bfd * abfd;
     asection * section;
d157 7
a163 8
extra_case (in_abfd, link_info, link_order, reloc, data, src_ptr, dst_ptr)
     bfd * in_abfd;
     struct bfd_link_info * link_info;
     struct bfd_link_order * link_order;
     arelent * reloc;
     bfd_byte * data;
     unsigned int * src_ptr;
     unsigned int * dst_ptr;
@


1.13
log
@	* aout-target.h, aoutf1.h, bfdio.c, bfdwin.c: Update copyright date.
	* coff-apollo.c, coff-sparc.c, coff-w65.c, coff-we32k.c: Ditto.
	* coff-z8k.c, coffgen.c, cpu-frv.c, cpu-h8500.c, cpu-hppa.c: Ditto.
	* cpu-ia64-opc.c, cpu-m10300.c, cpu-mips.c, cpu-msp430.c: Ditto.
	* cpu-rs6000.c, cpu-z8k.c, efi-app-ia32.c, elf32-am33lin.c: Ditto.
	* gen-aout.c, hash.c, hp300hpux.c, init.c, mach-o.c: Ditto.
	* nlm-target.h, nlm.c, som.h, stabs.c, sysdep.h, xsym.h: Ditto.
@
text
@d200 1
a200 1
	  /* Adresses are 23 bit, and the layout of those in a 32-bit
@


1.12
log
@2003-10-04  Christian Groessler  <chris@@groessler.org>

	* coff-z8k.c (extra_case): Fix displacement length check for R_JR
	and R_CALLR.
@
text
@d2 1
a2 1
   Copyright 1992, 1993, 1994, 1995, 1997, 1999, 2000, 2001, 2002
@


1.11
log
@Altered the CREATE_xxx_COFF_TARGET_VEC macro arguments
@
text
@d271 1
a271 1
	if (gap > 0 || gap < -128)
d298 1
a298 2
	gap /= 2;
	if (gap > 8191 || gap < -8192)
d306 1
@


1.10
log
@s/boolean/bfd_boolean/ s/true/TRUE/ s/false/FALSE/.  Simplify
comparisons of bfd_boolean vars with TRUE/FALSE.  Formatting.
@
text
@d353 1
a353 1
CREATE_BIG_COFF_TARGET_VEC (z8kcoff_vec, "coff-z8k", 0, 0, '_', NULL)
@


1.9
log
@The patch contains mostly fixes for the disassembler. It also fixes
a crash of the assembler with some malformed source input.
Long segmented addresses are now correctly relocated.
Finally it updates my email address in the MAINTAINERS file.
@
text
@d2 1
a2 1
   Copyright 1992, 1993, 1994, 1995, 1997, 1999, 2000, 2001
d39 3
a41 3
HOWTO (R_IMM32, 0, 2, 32, false, 0,
       complain_overflow_bitfield, 0, "r_imm32", true, 0xffffffff,
       0xffffffff, false);
d44 2
a45 2
HOWTO (R_IMM4L, 0, 0, 4, false, 0,
       complain_overflow_bitfield, 0, "r_imm4l", true, 0xf, 0xf, false);
d48 3
a50 3
HOWTO (R_IMM16, 0, 1, 16, false, 0,
       complain_overflow_bitfield, 0, "r_da", true, 0x0000ffff, 0x0000ffff,
       false);
d53 3
a55 3
HOWTO (R_IMM8, 0, 0, 8, false, 0,
       complain_overflow_bitfield, 0, "r_imm8", true, 0x000000ff, 0x000000ff,
       false);
d58 3
a60 3
HOWTO (R_REL16, 0, 1, 16, false, 0,
       complain_overflow_bitfield, 0, "r_rel16", true, 0x0000ffff, 0x0000ffff,
       true);
d63 2
a64 2
HOWTO (R_JR, 0, 0, 8, true, 0, complain_overflow_signed, 0,
       "r_jr", true, 0, 0, true);
d67 2
a68 2
HOWTO (R_DISP7, 0, 0, 7, true, 0, complain_overflow_bitfield, 0,
       "r_disp7", true, 0, 0, true);
d71 2
a72 2
HOWTO (R_CALLR, 0, 1, 12, true, 0, complain_overflow_signed, 0,
       "r_callr", true, 0xfff, 0xfff, true);
@


1.9.20.1
log
@Merge drow-cplus-branch to:
  cvs rtag -D 2003-12-14 00:00:00 UTC drow-cplus-merge-20031214 gdb+dejagnu
@
text
@d2 1
a2 1
   Copyright 1992, 1993, 1994, 1995, 1997, 1999, 2000, 2001, 2002, 2003
d31 5
d39 3
a41 3
HOWTO (R_IMM32, 0, 2, 32, FALSE, 0,
       complain_overflow_bitfield, 0, "r_imm32", TRUE, 0xffffffff,
       0xffffffff, FALSE);
d44 2
a45 2
HOWTO (R_IMM4L, 0, 0, 4, FALSE, 0,
       complain_overflow_bitfield, 0, "r_imm4l", TRUE, 0xf, 0xf, FALSE);
d48 3
a50 3
HOWTO (R_IMM16, 0, 1, 16, FALSE, 0,
       complain_overflow_bitfield, 0, "r_da", TRUE, 0x0000ffff, 0x0000ffff,
       FALSE);
d53 3
a55 3
HOWTO (R_IMM8, 0, 0, 8, FALSE, 0,
       complain_overflow_bitfield, 0, "r_imm8", TRUE, 0x000000ff, 0x000000ff,
       FALSE);
d58 3
a60 3
HOWTO (R_REL16, 0, 1, 16, FALSE, 0,
       complain_overflow_bitfield, 0, "r_rel16", TRUE, 0x0000ffff, 0x0000ffff,
       TRUE);
d63 2
a64 2
HOWTO (R_JR, 0, 0, 8, TRUE, 0, complain_overflow_signed, 0,
       "r_jr", TRUE, 0, 0, TRUE);
d67 2
a68 2
HOWTO (R_DISP7, 0, 0, 7, TRUE, 0, complain_overflow_bitfield, 0,
       "r_disp7", TRUE, 0, 0, TRUE);
d71 2
a72 2
HOWTO (R_CALLR, 0, 1, 12, TRUE, 0, complain_overflow_signed, 0,
       "r_callr", TRUE, 0xfff, 0xfff, TRUE);
d77 2
a78 1
coff_z8k_select_reloc (reloc_howto_type *howto)
d99 3
a101 1
rtype2howto (arelent *internal, struct internal_reloc *dst)
d146 6
a151 5
reloc_processing (arelent *relent,
                  struct internal_reloc *reloc,
                  asymbol **symbols,
                  bfd *abfd,
                  asection *section)
d166 8
a173 7
extra_case (bfd *in_abfd,
            struct bfd_link_info *link_info,
            struct bfd_link_order *link_order,
            arelent *reloc,
            bfd_byte *data,
            unsigned int *src_ptr,
            unsigned int *dst_ptr)
d200 1
a200 1
	  /* Addresses are 23 bit, and the layout of those in a 32-bit
d271 1
a271 1
	if (gap > 0 || gap < -127)
d298 2
a299 1
	if (gap > 4096 || gap < -4095)
a306 1
	gap /= 2;
d353 1
a353 1
CREATE_BIG_COFF_TARGET_VEC (z8kcoff_vec, "coff-z8k", 0, 0, '_', NULL, COFF_SWAP_TABLE)
@


1.9.18.1
log
@2002-12-23  David Carlton  <carlton@@math.stanford.edu>

	* Merge from mainline; tag is carlton_dictionary-20021223-merge.
@
text
@d2 1
a2 1
   Copyright 1992, 1993, 1994, 1995, 1997, 1999, 2000, 2001, 2002
d39 3
a41 3
HOWTO (R_IMM32, 0, 2, 32, FALSE, 0,
       complain_overflow_bitfield, 0, "r_imm32", TRUE, 0xffffffff,
       0xffffffff, FALSE);
d44 2
a45 2
HOWTO (R_IMM4L, 0, 0, 4, FALSE, 0,
       complain_overflow_bitfield, 0, "r_imm4l", TRUE, 0xf, 0xf, FALSE);
d48 3
a50 3
HOWTO (R_IMM16, 0, 1, 16, FALSE, 0,
       complain_overflow_bitfield, 0, "r_da", TRUE, 0x0000ffff, 0x0000ffff,
       FALSE);
d53 3
a55 3
HOWTO (R_IMM8, 0, 0, 8, FALSE, 0,
       complain_overflow_bitfield, 0, "r_imm8", TRUE, 0x000000ff, 0x000000ff,
       FALSE);
d58 3
a60 3
HOWTO (R_REL16, 0, 1, 16, FALSE, 0,
       complain_overflow_bitfield, 0, "r_rel16", TRUE, 0x0000ffff, 0x0000ffff,
       TRUE);
d63 2
a64 2
HOWTO (R_JR, 0, 0, 8, TRUE, 0, complain_overflow_signed, 0,
       "r_jr", TRUE, 0, 0, TRUE);
d67 2
a68 2
HOWTO (R_DISP7, 0, 0, 7, TRUE, 0, complain_overflow_bitfield, 0,
       "r_disp7", TRUE, 0, 0, TRUE);
d71 2
a72 2
HOWTO (R_CALLR, 0, 1, 12, TRUE, 0, complain_overflow_signed, 0,
       "r_callr", TRUE, 0xfff, 0xfff, TRUE);
@


1.9.18.2
log
@2003-06-27  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton_dictionary-20030627-merge.
@
text
@d353 1
a353 1
CREATE_BIG_COFF_TARGET_VEC (z8kcoff_vec, "coff-z8k", 0, 0, '_', NULL, COFF_SWAP_TABLE)
@


1.9.18.3
log
@2003-11-11  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton-dictionary-20031111-merge.
@
text
@d2 1
a2 1
   Copyright 1992, 1993, 1994, 1995, 1997, 1999, 2000, 2001, 2002, 2003
d271 1
a271 1
	if (gap > 0 || gap < -127)
d298 2
a299 1
	if (gap > 4096 || gap < -4095)
a306 1
	gap /= 2;
@


1.9.18.4
log
@2003-12-15  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton_dictionary-20031215-merge.
	* cp-support.c (class_name_from_physname): Add DMGL_PARAMS to call
	to cplus_demangle.
	(method_name_from_physname): Ditto.
@
text
@d31 5
d77 2
a78 1
coff_z8k_select_reloc (reloc_howto_type *howto)
d99 3
a101 1
rtype2howto (arelent *internal, struct internal_reloc *dst)
d146 6
a151 5
reloc_processing (arelent *relent,
                  struct internal_reloc *reloc,
                  asymbol **symbols,
                  bfd *abfd,
                  asection *section)
d166 8
a173 7
extra_case (bfd *in_abfd,
            struct bfd_link_info *link_info,
            struct bfd_link_order *link_order,
            arelent *reloc,
            bfd_byte *data,
            unsigned int *src_ptr,
            unsigned int *dst_ptr)
d200 1
a200 1
	  /* Addresses are 23 bit, and the layout of those in a 32-bit
@


1.8
log
@Touches most files in bfd/, so likely will be blamed for everything..

o  bfd_read and bfd_write lose an unnecessary param and become
   bfd_bread and bfd_bwrite.

o  bfd_*alloc now all take a bfd_size_type arg, and will error if
   size_t is too small.  eg. 32 bit host, 64 bit bfd, verrry big files
   or bugs in linker scripts etc.

o  file_ptr becomes a bfd_signed_vma.  Besides matching sizes with
   various other types involved in handling sections, this should make
   it easier for bfd to support a 64 bit off_t on 32 bit hosts that
   provide it.

o  I've made the H_GET_* and H_PUT_* macros (which invoke bfd_h_{get,put}_*)
   generally available.  They now cast their args to bfd_vma and
   bfd_byte * as appropriate, which removes a swag of casts from the
   source.

o  Bug fixes to bfd_get8, aix386_core_vec, elf32_h8_relax_section, and
   aout-encap.c.

o  Zillions of formatting and -Wconversion fixes.
@
text
@d188 19
a206 4
      bfd_put_32 (in_abfd,
		  /* 0x80000000 indicates a long segmented address.  */
		  bfd_coff_reloc16_get_value (reloc, link_info, input_section) | 0x80000000,
		  data + *dst_ptr);
@


1.7
log
@Add more missing prototypes
@
text
@d90 2
a91 2
#define SWAP_IN_RELOC_OFFSET   bfd_h_get_32
#define SWAP_OUT_RELOC_OFFSET bfd_h_put_32
d317 1
a317 1
	bfd_put_16 (in_abfd,gap,data + *dst_ptr);
@


1.6
log
@Remove warnings building z8k port.
Fix ld -r behaviour
@
text
@d31 5
d89 1
a89 1
/* Code to swap in the reloc */
d96 1
a96 2
/* Code to turn a r_type into a howto ptr, uses the above howto table
   */
d135 1
a135 1
#define RTYPE2HOWTO(internal, relocentry) rtype2howto(internal,relocentry)
d137 1
a137 1
/* Perform any necessary magic to the addend in a reloc entry */
@


1.5
log
@z8k fixes
@
text
@d2 1
a2 1
   Copyright 1992, 1993, 1994, 1995, 1997, 1999, 2000
d34 1
a34 1
HOWTO (R_IMM32, 0, 1, 32, false, 0,
d39 1
a39 1
HOWTO (R_IMM4L, 0, 1, 4, false, 0,
d48 1
a48 1
HOWTO (R_IMM8, 0, 1, 8, false, 0,
d58 1
a58 1
HOWTO (R_JR, 0, 1, 8, true, 0, complain_overflow_signed, 0,
d62 1
a62 1
HOWTO (R_DISP7, 0, 1, 7, true, 0, complain_overflow_bitfield, 0,
d144 1
a144 1
     struct internal_reloc *reloc;
d153 1
a153 3
    {
      relent->sym_ptr_ptr = symbols + obj_convert (abfd)[reloc->r_symndx];
    }
d155 1
a155 3
    {
      relent->sym_ptr_ptr = bfd_abs_section_ptr->symbol_ptr_ptr;
    }
d163 7
a169 7
     bfd *in_abfd;
     struct bfd_link_info *link_info;
     struct bfd_link_order *link_order;
     arelent *reloc;
     bfd_byte *data;
     unsigned int *src_ptr;
     unsigned int *dst_ptr;
d171 1
a171 1
  asection *input_section = link_order->u.indirect.section;
d185 2
a186 1
		  bfd_coff_reloc16_get_value (reloc, link_info, input_section),
d218 2
a219 2
	int gap = dst - dot - 1;/* -1 since were in the odd byte of the
				    word and the pc's been incremented */
d245 2
a246 2
	int gap = dst - dot - 1;/* -1 since were in the odd byte of the
				    word and the pc's been incremented */
d318 1
@


1.4
log
@Update copyright notices
@
text
@d52 5
d61 8
d113 9
d238 81
@


1.3
log
@2000-11-15  Kazu Hirata  <kazu@@hxi.com>

	* coff-rs6000.c: Fix formatting.
	* coff-sh.c: Likewise.
	* coff-sparc.c: Likewise.
	* coff-tic30.c: Likewise.
	* coff-tic54x.c: Likewise.
	* coff-tic80.c: Likewise.
	* coff-w65.c: Likewise.
	* coff-we32k.c: Likewise.
	* coff-z8k.c: Likewise.
@
text
@d2 2
a3 1
   Copyright 1992, 93, 94, 95, 1997 Free Software Foundation, Inc.
@


1.3.2.1
log
@Update copyright notices.
@
text
@d2 1
a2 2
   Copyright 1992, 1993, 1994, 1995, 1997, 1999, 2000, 2001
   Free Software Foundation, Inc.
@


1.2
log
@Add new field to bfd_target structure.
Initialise this field for all known bfd targets.
Add new search function to targets.c
@
text
@d57 1
a57 1
static int 
a65 1

a69 2


a109 1

a111 1

a114 1

d118 1
a118 1
static void 
a137 1

d174 1
a174 1
		 ((bfd_get_8 (in_abfd, data + *dst_ptr) & 0xf0) 
a224 1

@


1.1
log
@Initial revision
@
text
@d240 1
a240 41
const bfd_target z8kcoff_vec =
{
  "coff-z8k",			/* name */
  bfd_target_coff_flavour,
  BFD_ENDIAN_BIG,		/* data byte order is big */
  BFD_ENDIAN_BIG,		/* header byte order is big */

  (HAS_RELOC | EXEC_P |		/* object flags */
   HAS_LINENO | HAS_DEBUG |
   HAS_SYMS | HAS_LOCALS | WP_TEXT),

  (SEC_HAS_CONTENTS | SEC_ALLOC | SEC_LOAD | SEC_RELOC),	/* section flags */
  '_',				/* leading symbol underscore */
  '/',				/* ar_pad_char */
  15,				/* ar_max_namelen */
  bfd_getb64, bfd_getb_signed_64, bfd_putb64,
     bfd_getb32, bfd_getb_signed_32, bfd_putb32,
     bfd_getb16, bfd_getb_signed_16, bfd_putb16,	/* data */
  bfd_getb64, bfd_getb_signed_64, bfd_putb64,
     bfd_getb32, bfd_getb_signed_32, bfd_putb32,
     bfd_getb16, bfd_getb_signed_16, bfd_putb16,	/* hdrs */

  {_bfd_dummy_target, coff_object_p,	/* bfd_check_format */
   bfd_generic_archive_p, _bfd_dummy_target},
  {bfd_false, coff_mkobject, _bfd_generic_mkarchive,	/* bfd_set_format */
   bfd_false},
  {bfd_false, coff_write_object_contents,	/* bfd_write_contents */
   _bfd_write_archive_contents, bfd_false},

     BFD_JUMP_TABLE_GENERIC (coff),
     BFD_JUMP_TABLE_COPY (coff),
     BFD_JUMP_TABLE_CORE (_bfd_nocore),
     BFD_JUMP_TABLE_ARCHIVE (_bfd_archive_coff),
     BFD_JUMP_TABLE_SYMBOLS (coff),
     BFD_JUMP_TABLE_RELOCS (coff),
     BFD_JUMP_TABLE_WRITE (coff),
     BFD_JUMP_TABLE_LINK (coff),
     BFD_JUMP_TABLE_DYNAMIC (_bfd_nodynamic),

  COFF_SWAP_TABLE,
};
@


1.1.1.1
log
@19990502 sourceware import
@
text
@@

