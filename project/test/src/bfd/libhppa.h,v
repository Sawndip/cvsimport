head	1.21;
access;
symbols
	sid-snapshot-20180601:1.21
	sid-snapshot-20180501:1.21
	sid-snapshot-20180401:1.21
	sid-snapshot-20180301:1.21
	sid-snapshot-20180201:1.21
	sid-snapshot-20180101:1.21
	sid-snapshot-20171201:1.21
	sid-snapshot-20171101:1.21
	sid-snapshot-20171001:1.21
	sid-snapshot-20170901:1.21
	sid-snapshot-20170801:1.21
	sid-snapshot-20170701:1.21
	sid-snapshot-20170601:1.21
	sid-snapshot-20170501:1.21
	sid-snapshot-20170401:1.21
	sid-snapshot-20170301:1.21
	sid-snapshot-20170201:1.21
	sid-snapshot-20170101:1.21
	sid-snapshot-20161201:1.21
	sid-snapshot-20161101:1.21
	sid-snapshot-20160901:1.21
	sid-snapshot-20160801:1.21
	sid-snapshot-20160701:1.21
	sid-snapshot-20160601:1.21
	sid-snapshot-20160501:1.21
	sid-snapshot-20160401:1.21
	sid-snapshot-20160301:1.21
	sid-snapshot-20160201:1.21
	sid-snapshot-20160101:1.21
	sid-snapshot-20151201:1.21
	sid-snapshot-20151101:1.21
	sid-snapshot-20151001:1.21
	sid-snapshot-20150901:1.21
	sid-snapshot-20150801:1.21
	sid-snapshot-20150701:1.21
	sid-snapshot-20150601:1.21
	sid-snapshot-20150501:1.21
	sid-snapshot-20150401:1.21
	sid-snapshot-20150301:1.21
	sid-snapshot-20150201:1.21
	sid-snapshot-20150101:1.21
	sid-snapshot-20141201:1.21
	sid-snapshot-20141101:1.21
	sid-snapshot-20141001:1.21
	sid-snapshot-20140901:1.21
	sid-snapshot-20140801:1.21
	sid-snapshot-20140701:1.21
	sid-snapshot-20140601:1.21
	sid-snapshot-20140501:1.21
	sid-snapshot-20140401:1.21
	sid-snapshot-20140301:1.21
	sid-snapshot-20140201:1.21
	sid-snapshot-20140101:1.21
	sid-snapshot-20131201:1.21
	sid-snapshot-20131101:1.21
	sid-snapshot-20131001:1.21
	binutils-2_24-branch:1.21.0.26
	binutils-2_24-branchpoint:1.21
	binutils-2_21_1:1.21
	sid-snapshot-20130901:1.21
	gdb_7_6_1-2013-08-30-release:1.21
	sid-snapshot-20130801:1.21
	sid-snapshot-20130701:1.21
	sid-snapshot-20130601:1.21
	sid-snapshot-20130501:1.21
	gdb_7_6-2013-04-26-release:1.21
	sid-snapshot-20130401:1.21
	binutils-2_23_2:1.21
	gdb_7_6-branch:1.21.0.24
	gdb_7_6-2013-03-12-branchpoint:1.21
	sid-snapshot-20130301:1.21
	sid-snapshot-20130201:1.21
	sid-snapshot-20130101:1.21
	sid-snapshot-20121201:1.21
	gdb_7_5_1-2012-11-29-release:1.21
	binutils-2_23_1:1.21
	sid-snapshot-20121101:1.21
	binutils-2_23:1.21
	sid-snapshot-20121001:1.21
	sid-snapshot-20120901:1.21
	gdb_7_5-2012-08-17-release:1.21
	sid-snapshot-20120801:1.21
	binutils-2_23-branch:1.21.0.22
	binutils-2_23-branchpoint:1.21
	gdb_7_5-branch:1.21.0.20
	gdb_7_5-2012-07-18-branchpoint:1.21
	sid-snapshot-20120701:1.21
	sid-snapshot-20120601:1.21
	sid-snapshot-20120501:1.21
	binutils-2_22_branch:1.21.0.18
	gdb_7_4_1-2012-04-26-release:1.21
	sid-snapshot-20120401:1.21
	sid-snapshot-20120301:1.21
	sid-snapshot-20120201:1.21
	gdb_7_4-2012-01-24-release:1.21
	sid-snapshot-20120101:1.21
	gdb_7_4-branch:1.21.0.16
	gdb_7_4-2011-12-13-branchpoint:1.21
	sid-snapshot-20111201:1.21
	binutils-2_22:1.21
	sid-snapshot-20111101:1.21
	sid-snapshot-20111001:1.21
	binutils-2_22-branch:1.21.0.14
	binutils-2_22-branchpoint:1.21
	gdb_7_3_1-2011-09-04-release:1.21
	sid-snapshot-20110901:1.21
	sid-snapshot-20110801:1.21
	gdb_7_3-2011-07-26-release:1.21
	sid-snapshot-20110701:1.21
	sid-snapshot-20110601:1.21
	sid-snapshot-20110501:1.21
	gdb_7_3-branch:1.21.0.12
	gdb_7_3-2011-04-01-branchpoint:1.21
	sid-snapshot-20110401:1.21
	sid-snapshot-20110301:1.21
	sid-snapshot-20110201:1.21
	sid-snapshot-20110101:1.21
	binutils-2_21:1.21
	sid-snapshot-20101201:1.21
	binutils-2_21-branch:1.21.0.10
	binutils-2_21-branchpoint:1.21
	sid-snapshot-20101101:1.21
	sid-snapshot-20101001:1.21
	binutils-2_20_1:1.21
	gdb_7_2-2010-09-02-release:1.21
	sid-snapshot-20100901:1.21
	sid-snapshot-20100801:1.21
	gdb_7_2-branch:1.21.0.8
	gdb_7_2-2010-07-07-branchpoint:1.21
	sid-snapshot-20100701:1.21
	sid-snapshot-20100601:1.21
	sid-snapshot-20100501:1.21
	sid-snapshot-20100401:1.21
	gdb_7_1-2010-03-18-release:1.21
	sid-snapshot-20100301:1.21
	gdb_7_1-branch:1.21.0.6
	gdb_7_1-2010-02-18-branchpoint:1.21
	sid-snapshot-20100201:1.21
	sid-snapshot-20100101:1.21
	gdb_7_0_1-2009-12-22-release:1.21
	sid-snapshot-20091201:1.21
	sid-snapshot-20091101:1.21
	binutils-2_20:1.21
	gdb_7_0-2009-10-06-release:1.21
	sid-snapshot-20091001:1.21
	gdb_7_0-branch:1.21.0.4
	gdb_7_0-2009-09-16-branchpoint:1.21
	arc-sim-20090309:1.20
	binutils-arc-20081103-branch:1.20.0.30
	binutils-arc-20081103-branchpoint:1.20
	binutils-2_20-branch:1.21.0.2
	binutils-2_20-branchpoint:1.21
	sid-snapshot-20090901:1.20
	sid-snapshot-20090801:1.20
	msnyder-checkpoint-072509-branch:1.20.0.28
	msnyder-checkpoint-072509-branchpoint:1.20
	sid-snapshot-20090701:1.20
	dje-cgen-play1-branch:1.20.0.26
	dje-cgen-play1-branchpoint:1.20
	sid-snapshot-20090601:1.20
	sid-snapshot-20090501:1.20
	sid-snapshot-20090401:1.20
	arc-20081103-branch:1.20.0.24
	arc-20081103-branchpoint:1.20
	arc-insight_6_8-branch:1.20.0.22
	arc-insight_6_8-branchpoint:1.20
	insight_6_8-branch:1.20.0.20
	insight_6_8-branchpoint:1.20
	sid-snapshot-20090301:1.20
	binutils-2_19_1:1.20
	sid-snapshot-20090201:1.20
	sid-snapshot-20090101:1.20
	reverse-20081226-branch:1.20.0.18
	reverse-20081226-branchpoint:1.20
	sid-snapshot-20081201:1.20
	multiprocess-20081120-branch:1.20.0.16
	multiprocess-20081120-branchpoint:1.20
	sid-snapshot-20081101:1.20
	binutils-2_19:1.20
	sid-snapshot-20081001:1.20
	reverse-20080930-branch:1.20.0.14
	reverse-20080930-branchpoint:1.20
	binutils-2_19-branch:1.20.0.12
	binutils-2_19-branchpoint:1.20
	sid-snapshot-20080901:1.20
	sid-snapshot-20080801:1.20
	reverse-20080717-branch:1.20.0.10
	reverse-20080717-branchpoint:1.20
	sid-snapshot-20080701:1.20
	msnyder-reverse-20080609-branch:1.20.0.8
	msnyder-reverse-20080609-branchpoint:1.20
	drow-reverse-20070409-branch:1.19.0.34
	drow-reverse-20070409-branchpoint:1.19
	sid-snapshot-20080601:1.20
	sid-snapshot-20080501:1.20
	sid-snapshot-20080403:1.20
	sid-snapshot-20080401:1.20
	gdb_6_8-2008-03-27-release:1.20
	sid-snapshot-20080301:1.20
	gdb_6_8-branch:1.20.0.6
	gdb_6_8-2008-02-26-branchpoint:1.20
	sid-snapshot-20080201:1.20
	sid-snapshot-20080101:1.20
	sid-snapshot-20071201:1.20
	sid-snapshot-20071101:1.20
	gdb_6_7_1-2007-10-29-release:1.20
	gdb_6_7-2007-10-10-release:1.20
	sid-snapshot-20071001:1.20
	gdb_6_7-branch:1.20.0.4
	gdb_6_7-2007-09-07-branchpoint:1.20
	binutils-2_18:1.20
	binutils-2_18-branch:1.20.0.2
	binutils-2_18-branchpoint:1.20
	insight_6_6-20070208-release:1.19
	binutils-csl-coldfire-4_1-32:1.19
	binutils-csl-sourcerygxx-4_1-32:1.19
	gdb_6_6-2006-12-18-release:1.19
	binutils-csl-innovasic-fido-3_4_4-33:1.19
	binutils-csl-sourcerygxx-3_4_4-32:1.17
	binutils-csl-coldfire-4_1-30:1.19
	binutils-csl-sourcerygxx-4_1-30:1.19
	binutils-csl-coldfire-4_1-28:1.19
	binutils-csl-sourcerygxx-4_1-29:1.19
	binutils-csl-sourcerygxx-4_1-28:1.19
	gdb_6_6-branch:1.19.0.32
	gdb_6_6-2006-11-15-branchpoint:1.19
	binutils-csl-arm-2006q3-27:1.19
	binutils-csl-sourcerygxx-4_1-27:1.19
	binutils-csl-arm-2006q3-26:1.19
	binutils-csl-sourcerygxx-4_1-26:1.19
	binutils-csl-sourcerygxx-4_1-25:1.19
	binutils-csl-sourcerygxx-4_1-24:1.19
	binutils-csl-sourcerygxx-4_1-23:1.19
	insight_6_5-20061003-release:1.19
	gdb-csl-symbian-6_4_50_20060226-12:1.19
	binutils-csl-sourcerygxx-4_1-21:1.19
	binutils-csl-arm-2006q3-21:1.19
	binutils-csl-sourcerygxx-4_1-22:1.19
	binutils-csl-palmsource-arm-prelinker-1_0-1:1.19
	binutils-csl-sourcerygxx-4_1-20:1.19
	binutils-csl-arm-2006q3-19:1.19
	binutils-csl-sourcerygxx-4_1-19:1.19
	binutils-csl-sourcerygxx-4_1-18:1.19
	binutils-csl-renesas-4_1-9:1.19
	gdb-csl-sourcerygxx-3_4_4-25:1.19
	binutils-csl-sourcerygxx-3_4_4-25:1.17
	nickrob-async-20060828-mergepoint:1.19
	gdb-csl-symbian-6_4_50_20060226-11:1.19
	binutils-csl-renesas-4_1-8:1.19
	binutils-csl-renesas-4_1-7:1.19
	binutils-csl-renesas-4_1-6:1.19
	gdb-csl-sourcerygxx-4_1-17:1.19
	binutils-csl-sourcerygxx-4_1-17:1.19
	gdb-csl-20060226-branch-local-2:1.19
	gdb-csl-sourcerygxx-4_1-14:1.19
	binutils-csl-sourcerygxx-4_1-14:1.19
	binutils-csl-sourcerygxx-4_1-15:1.19
	gdb-csl-sourcerygxx-4_1-13:1.19
	binutils-csl-sourcerygxx-4_1-13:1.19
	binutils-2_17:1.19
	gdb-csl-sourcerygxx-4_1-12:1.19
	binutils-csl-sourcerygxx-4_1-12:1.19
	gdb-csl-sourcerygxx-3_4_4-21:1.19
	binutils-csl-sourcerygxx-3_4_4-21:1.19
	gdb_6_5-20060621-release:1.19
	binutils-csl-wrs-linux-3_4_4-24:1.17
	binutils-csl-wrs-linux-3_4_4-23:1.17
	gdb-csl-sourcerygxx-4_1-9:1.19
	binutils-csl-sourcerygxx-4_1-9:1.19
	gdb-csl-sourcerygxx-4_1-8:1.19
	binutils-csl-sourcerygxx-4_1-8:1.19
	gdb-csl-sourcerygxx-4_1-7:1.19
	binutils-csl-sourcerygxx-4_1-7:1.19
	gdb-csl-arm-2006q1-6:1.19
	binutils-csl-arm-2006q1-6:1.19
	gdb-csl-sourcerygxx-4_1-6:1.19
	binutils-csl-sourcerygxx-4_1-6:1.19
	binutils-csl-wrs-linux-3_4_4-22:1.17
	gdb-csl-symbian-6_4_50_20060226-10:1.19
	gdb-csl-symbian-6_4_50_20060226-9:1.19
	gdb-csl-symbian-6_4_50_20060226-8:1.19
	gdb-csl-coldfire-4_1-11:1.19
	binutils-csl-coldfire-4_1-11:1.19
	gdb-csl-sourcerygxx-3_4_4-19:1.19
	binutils-csl-sourcerygxx-3_4_4-19:1.19
	gdb-csl-coldfire-4_1-10:1.19
	gdb_6_5-branch:1.19.0.30
	gdb_6_5-2006-05-14-branchpoint:1.19
	binutils-csl-coldfire-4_1-10:1.19
	gdb-csl-sourcerygxx-4_1-5:1.19
	binutils-csl-sourcerygxx-4_1-5:1.19
	nickrob-async-20060513-branch:1.19.0.28
	nickrob-async-20060513-branchpoint:1.19
	gdb-csl-sourcerygxx-4_1-4:1.19
	binutils-csl-sourcerygxx-4_1-4:1.19
	msnyder-reverse-20060502-branch:1.19.0.26
	msnyder-reverse-20060502-branchpoint:1.19
	binutils-csl-wrs-linux-3_4_4-21:1.17
	gdb-csl-morpho-4_1-4:1.19
	binutils-csl-morpho-4_1-4:1.19
	gdb-csl-sourcerygxx-3_4_4-17:1.19
	binutils-csl-sourcerygxx-3_4_4-17:1.19
	binutils-csl-wrs-linux-3_4_4-20:1.17
	readline_5_1-import-branch:1.19.0.24
	readline_5_1-import-branchpoint:1.19
	gdb-csl-20060226-branch-merge-to-csl-symbian-1:1.19
	binutils-2_17-branch:1.19.0.22
	binutils-2_17-branchpoint:1.19
	gdb-csl-symbian-20060226-branch:1.19.0.20
	gdb-csl-symbian-20060226-branchpoint:1.19
	gdb-csl-20060226-branch-merge-to-csl-local-1:1.19
	msnyder-reverse-20060331-branch:1.19.0.18
	msnyder-reverse-20060331-branchpoint:1.19
	binutils-csl-2_17-branch:1.19.0.16
	binutils-csl-2_17-branchpoint:1.19
	gdb-csl-available-20060303-branch:1.19.0.14
	gdb-csl-available-20060303-branchpoint:1.19
	gdb-csl-20060226-branch:1.19.0.12
	gdb-csl-20060226-branchpoint:1.19
	gdb_6_4-20051202-release:1.19
	msnyder-fork-checkpoint-branch:1.19.0.10
	msnyder-fork-checkpoint-branchpoint:1.19
	gdb-csl-gxxpro-6_3-branch:1.19.0.8
	gdb-csl-gxxpro-6_3-branchpoint:1.19
	gdb_6_4-branch:1.19.0.6
	gdb_6_4-2005-11-01-branchpoint:1.19
	gdb-csl-arm-20051020-branch:1.19.0.4
	gdb-csl-arm-20051020-branchpoint:1.19
	binutils-csl-gxxpro-3_4-branch:1.17.0.34
	binutils-csl-gxxpro-3_4-branchpoint:1.17
	binutils-2_16_1:1.17
	msnyder-tracepoint-checkpoint-branch:1.19.0.2
	msnyder-tracepoint-checkpoint-branchpoint:1.19
	gdb-csl-arm-20050325-2005-q1b:1.17
	binutils-csl-arm-2005q1b:1.17
	binutils-2_16:1.17
	gdb-csl-arm-20050325-2005-q1a:1.17
	binutils-csl-arm-2005q1a:1.17
	csl-arm-20050325-branch:1.17.0.32
	csl-arm-20050325-branchpoint:1.17
	binutils-csl-arm-2005q1-branch:1.17.0.30
	binutils-csl-arm-2005q1-branchpoint:1.17
	binutils-2_16-branch:1.17.0.28
	binutils-2_16-branchpoint:1.17
	csl-arm-2004-q3d:1.17
	gdb_6_3-20041109-release:1.17
	gdb_6_3-branch:1.17.0.24
	gdb_6_3-20041019-branchpoint:1.17
	csl-arm-2004-q3:1.17
	drow_intercu-merge-20040921:1.17
	drow_intercu-merge-20040915:1.17
	jimb-gdb_6_2-e500-branch:1.17.0.26
	jimb-gdb_6_2-e500-branchpoint:1.17
	gdb_6_2-20040730-release:1.17
	gdb_6_2-branch:1.17.0.22
	gdb_6_2-2004-07-10-gmt-branchpoint:1.17
	gdb_6_1_1-20040616-release:1.17
	binutils-2_15:1.17
	binutils-2_15-branchpoint:1.17
	csl-arm-2004-q1a:1.17
	csl-arm-2004-q1:1.17
	gdb_6_1-2004-04-05-release:1.17
	drow_intercu-merge-20040402:1.17
	drow_intercu-merge-20040327:1.17
	ezannoni_pie-20040323-branch:1.17.0.20
	ezannoni_pie-20040323-branchpoint:1.17
	cagney_tramp-20040321-mergepoint:1.17
	cagney_tramp-20040309-branch:1.17.0.18
	cagney_tramp-20040309-branchpoint:1.17
	gdb_6_1-branch:1.17.0.16
	gdb_6_1-2004-03-01-gmt-branchpoint:1.17
	drow_intercu-20040221-branch:1.17.0.14
	drow_intercu-20040221-branchpoint:1.17
	binutils-2_15-branch:1.17.0.12
	cagney_bfdfile-20040213-branch:1.17.0.10
	cagney_bfdfile-20040213-branchpoint:1.17
	drow-cplus-merge-20040208:1.17
	carlton_dictionary-20040126-merge:1.17
	cagney_bigcore-20040122-branch:1.17.0.8
	cagney_bigcore-20040122-branchpoint:1.17
	drow-cplus-merge-20040113:1.17
	csl-arm-2003-q4:1.17
	drow-cplus-merge-20031224:1.17
	drow-cplus-merge-20031220:1.17
	carlton_dictionary-20031215-merge:1.17
	drow-cplus-merge-20031214:1.17
	carlton-dictionary-20031111-merge:1.17
	gdb_6_0-2003-10-04-release:1.16
	kettenis_sparc-20030918-branch:1.17.0.6
	kettenis_sparc-20030918-branchpoint:1.17
	carlton_dictionary-20030917-merge:1.17
	ezannoni_pie-20030916-branchpoint:1.17
	ezannoni_pie-20030916-branch:1.17.0.4
	cagney_x86i386-20030821-branch:1.17.0.2
	cagney_x86i386-20030821-branchpoint:1.17
	carlton_dictionary-20030805-merge:1.16
	carlton_dictionary-20030627-merge:1.16
	gdb_6_0-branch:1.16.0.66
	gdb_6_0-2003-06-23-branchpoint:1.16
	jimb-ppc64-linux-20030613-branch:1.16.0.64
	jimb-ppc64-linux-20030613-branchpoint:1.16
	binutils-2_14:1.16
	cagney_convert-20030606-branch:1.16.0.62
	cagney_convert-20030606-branchpoint:1.16
	cagney_writestrings-20030508-branch:1.16.0.60
	cagney_writestrings-20030508-branchpoint:1.16
	jimb-ppc64-linux-20030528-branch:1.16.0.58
	jimb-ppc64-linux-20030528-branchpoint:1.16
	carlton_dictionary-20030523-merge:1.16
	cagney_fileio-20030521-branch:1.16.0.56
	cagney_fileio-20030521-branchpoint:1.16
	kettenis_i386newframe-20030517-mergepoint:1.16
	jimb-ppc64-linux-20030509-branch:1.16.0.54
	jimb-ppc64-linux-20030509-branchpoint:1.16
	kettenis_i386newframe-20030504-mergepoint:1.16
	carlton_dictionary-20030430-merge:1.16
	binutils-2_14-branch:1.16.0.52
	binutils-2_14-branchpoint:1.16
	kettenis_i386newframe-20030419-branch:1.16.0.50
	kettenis_i386newframe-20030419-branchpoint:1.16
	carlton_dictionary-20030416-merge:1.16
	cagney_frameaddr-20030409-mergepoint:1.16
	kettenis_i386newframe-20030406-branch:1.16.0.48
	kettenis_i386newframe-20030406-branchpoint:1.16
	cagney_frameaddr-20030403-branchpoint:1.16
	cagney_frameaddr-20030403-branch:1.16.0.46
	cagney_framebase-20030330-mergepoint:1.16
	cagney_framebase-20030326-branch:1.16.0.44
	cagney_framebase-20030326-branchpoint:1.16
	cagney_lazyid-20030317-branch:1.16.0.42
	cagney_lazyid-20030317-branchpoint:1.16
	kettenis-i386newframe-20030316-mergepoint:1.16
	offbyone-20030313-branch:1.16.0.40
	offbyone-20030313-branchpoint:1.16
	kettenis-i386newframe-20030308-branch:1.16.0.38
	kettenis-i386newframe-20030308-branchpoint:1.16
	carlton_dictionary-20030305-merge:1.16
	cagney_offbyone-20030303-branch:1.16.0.36
	cagney_offbyone-20030303-branchpoint:1.16
	carlton_dictionary-20030207-merge:1.16
	interps-20030202-branch:1.16.0.34
	interps-20030202-branchpoint:1.16
	cagney-unwind-20030108-branch:1.16.0.32
	cagney-unwind-20030108-branchpoint:1.16
	binutils-2_13_2_1:1.16
	binutils-2_13_2:1.16
	carlton_dictionary-20021223-merge:1.16
	gdb_5_3-2002-12-12-release:1.16
	carlton_dictionary-20021115-merge:1.16
	binutils-2_13_1:1.16
	kseitz_interps-20021105-merge:1.16
	kseitz_interps-20021103-merge:1.16
	drow-cplus-merge-20021020:1.16
	drow-cplus-merge-20021025:1.16
	carlton_dictionary-20021025-merge:1.16
	carlton_dictionary-20021011-merge:1.16
	drow-cplus-branch:1.16.0.30
	drow-cplus-branchpoint:1.16
	kseitz_interps-20020930-merge:1.16
	carlton_dictionary-20020927-merge:1.16
	carlton_dictionary-branch:1.16.0.28
	carlton_dictionary-20020920-branchpoint:1.16
	sid-20020905-branchpoint:1.16
	sid-20020905-branch:1.16.0.26
	gdb_5_3-branch:1.16.0.24
	gdb_5_3-2002-09-04-branchpoint:1.16
	kseitz_interps-20020829-merge:1.16
	cagney_sysregs-20020825-branch:1.16.0.22
	cagney_sysregs-20020825-branchpoint:1.16
	readline_4_3-import-branch:1.16.0.20
	readline_4_3-import-branchpoint:1.16
	binutils-2_13:1.16
	gdb_5_2_1-2002-07-23-release:1.16
	binutils-2_13-branchpoint:1.16
	binutils-2_13-branch:1.16.0.18
	kseitz_interps-20020528-branch:1.16.0.16
	kseitz_interps-20020528-branchpoint:1.16
	cagney_regbuf-20020515-branch:1.16.0.14
	cagney_regbuf-20020515-branchpoint:1.16
	binutils-2_12_1:1.16
	jimb-macro-020506-branch:1.16.0.12
	jimb-macro-020506-branchpoint:1.16
	gdb_5_2-2002-04-29-release:1.16
	binutils-2_12:1.16
	gdb_5_2-branch:1.16.0.10
	gdb_5_2-2002-03-03-branchpoint:1.16
	binutils-2_12-branch:1.16.0.8
	binutils-2_12-branchpoint:1.16
	gdb_5_1_1-2002-01-24-release:1.16
	gdb_5_1_0_1-2002-01-03-release:1.16
	cygnus_cvs_20020108_pre:1.16
	gdb_5_1_0_1-2002-01-03-branch:1.16.0.6
	gdb_5_1_0_1-2002-01-03-branchpoint:1.16
	gdb_5_1-2001-11-21-release:1.16
	gdb_s390-2001-09-26-branch:1.16.0.4
	gdb_s390-2001-09-26-branchpoint:1.16
	gdb_5_1-2001-07-29-branch:1.16.0.2
	gdb_5_1-2001-07-29-branchpoint:1.16
	binutils-2_11_2:1.15.2.1
	binutils-2_11_1:1.15.2.1
	binutils-2_11:1.15
	x86_64versiong3:1.15
	binutils-2_11-branch:1.15.0.2
	insight-precleanup-2001-01-01:1.15
	binutils-2_10_1:1.9.2.1
	binutils-2_10:1.9.2.1
	gdb-premipsmulti-2000-06-06-branch:1.14.0.2
	gdb-premipsmulti-2000-06-06-branchpoint:1.14
	gdb_5_0-2000-05-19-release:1.9
	gdb_4_18_2-2000-05-18-release:1.9
	gdb_4_95_1-2000-05-11-snapshot:1.9
	gdb_4_95_0-2000-04-27-snapshot:1.9
	gdb_5_0-2000-04-10-branch:1.9.0.4
	gdb_5_0-2000-04-10-branchpoint:1.9
	binutils-2_10-branch:1.9.0.2
	binutils-2_10-branchpoint:1.9
	binutils_latest_snapshot:1.21
	repo-unification-2000-02-06:1.9
	binu_ss_19990721:1.5
	binu_ss_19990602:1.1.1.1
	binu_ss_19990502:1.1.1.1
	cygnus:1.1.1;
locks; strict;
comment	@ * @;


1.21
date	2009.09.02.07.18.37;	author amodra;	state Exp;
branches;
next	1.20;

1.20
date	2007.07.03.14.26.42;	author nickc;	state Exp;
branches;
next	1.19;

1.19
date	2005.05.04.15.53.34;	author nickc;	state Exp;
branches;
next	1.18;

1.18
date	2005.05.04.07.19.30;	author nickc;	state Exp;
branches;
next	1.17;

1.17
date	2003.08.07.07.25.34;	author amodra;	state Exp;
branches;
next	1.16;

1.16
date	2001.03.08.21.04.01;	author nickc;	state Exp;
branches
	1.16.28.1
	1.16.30.1;
next	1.15;

1.15
date	2000.07.09.07.23.07;	author amodra;	state Exp;
branches
	1.15.2.1;
next	1.14;

1.14
date	2000.05.19.00.20.31;	author law;	state Exp;
branches;
next	1.13;

1.13
date	2000.05.04.12.45.43;	author amodra;	state Exp;
branches;
next	1.12;

1.12
date	2000.05.02.00.12.46;	author amodra;	state Exp;
branches;
next	1.11;

1.11
date	2000.04.29.00.56.29;	author amodra;	state Exp;
branches;
next	1.10;

1.10
date	2000.04.24.08.14.43;	author law;	state Exp;
branches;
next	1.9;

1.9
date	99.10.17.23.41.19;	author law;	state Exp;
branches
	1.9.2.1;
next	1.8;

1.8
date	99.10.17.23.21.41;	author law;	state Exp;
branches;
next	1.7;

1.7
date	99.09.19.18.22.20;	author law;	state Exp;
branches;
next	1.6;

1.6
date	99.08.05.03.50.28;	author law;	state Exp;
branches;
next	1.5;

1.5
date	99.07.12.10.29.47;	author ian;	state Exp;
branches;
next	1.4;

1.4
date	99.07.06.23.50.45;	author law;	state Exp;
branches;
next	1.3;

1.3
date	99.07.02.11.26.12;	author law;	state Exp;
branches;
next	1.2;

1.2
date	99.06.16.02.13.40;	author law;	state Exp;
branches;
next	1.1;

1.1
date	99.05.03.07.28.56;	author rth;	state Exp;
branches
	1.1.1.1;
next	;

1.16.28.1
date	2003.09.17.21.27.57;	author carlton;	state Exp;
branches;
next	;

1.16.30.1
date	2003.12.14.20.26.47;	author drow;	state Exp;
branches;
next	;

1.15.2.1
date	2001.06.07.03.08.26;	author amodra;	state Exp;
branches;
next	;

1.9.2.1
date	2000.04.29.01.45.48;	author amodra;	state Exp;
branches;
next	;

1.1.1.1
date	99.05.03.07.28.56;	author rth;	state Exp;
branches;
next	;


desc
@@


1.21
log
@update copyright dates
@
text
@/* HP PA-RISC SOM object file format:  definitions internal to BFD.
   Copyright 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1998, 1999, 2000,
   2003, 2005, 2007  Free Software Foundation, Inc.

   Contributed by the Center for Software Science at the
   University of Utah (pa-gdb-bugs@@cs.utah.edu).

   This file is part of BFD, the Binary File Descriptor library.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,
   MA 02110-1301, USA.  */

#ifndef _LIBHPPA_H
#define _LIBHPPA_H

#define BYTES_IN_WORD 4
#define PA_PAGESIZE 0x1000

/* The PA instruction set variants.  */
enum pa_arch {pa10 = 10, pa11 = 11, pa20 = 20, pa20w = 25};

/* HP PA-RISC relocation types */

enum hppa_reloc_field_selector_type
  {
    R_HPPA_FSEL = 0x0,
    R_HPPA_LSSEL = 0x1,
    R_HPPA_RSSEL = 0x2,
    R_HPPA_LSEL = 0x3,
    R_HPPA_RSEL = 0x4,
    R_HPPA_LDSEL = 0x5,
    R_HPPA_RDSEL = 0x6,
    R_HPPA_LRSEL = 0x7,
    R_HPPA_RRSEL = 0x8,
    R_HPPA_NSEL  = 0x9,
    R_HPPA_NLSEL  = 0xa,
    R_HPPA_NLRSEL  = 0xb,
    R_HPPA_PSEL = 0xc,
    R_HPPA_LPSEL = 0xd,
    R_HPPA_RPSEL = 0xe,
    R_HPPA_TSEL = 0xf,
    R_HPPA_LTSEL = 0x10,
    R_HPPA_RTSEL = 0x11,
    R_HPPA_LTPSEL = 0x12,
    R_HPPA_RTPSEL = 0x13
  };

/* /usr/include/reloc.h defines these to constants.  We want to use
   them in enums, so #undef them before we start using them.  We might
   be able to fix this another way by simply managing not to include
   /usr/include/reloc.h, but currently GDB picks up these defines
   somewhere.  */
#undef e_fsel
#undef e_lssel
#undef e_rssel
#undef e_lsel
#undef e_rsel
#undef e_ldsel
#undef e_rdsel
#undef e_lrsel
#undef e_rrsel
#undef e_nsel
#undef e_nlsel
#undef e_nlrsel
#undef e_psel
#undef e_lpsel
#undef e_rpsel
#undef e_tsel
#undef e_ltsel
#undef e_rtsel
#undef e_one
#undef e_two
#undef e_pcrel
#undef e_con
#undef e_plabel
#undef e_abs

/* for compatibility */
enum hppa_reloc_field_selector_type_alt
  {
    e_fsel = R_HPPA_FSEL,
    e_lssel = R_HPPA_LSSEL,
    e_rssel = R_HPPA_RSSEL,
    e_lsel = R_HPPA_LSEL,
    e_rsel = R_HPPA_RSEL,
    e_ldsel = R_HPPA_LDSEL,
    e_rdsel = R_HPPA_RDSEL,
    e_lrsel = R_HPPA_LRSEL,
    e_rrsel = R_HPPA_RRSEL,
    e_nsel = R_HPPA_NSEL,
    e_nlsel = R_HPPA_NLSEL,
    e_nlrsel = R_HPPA_NLRSEL,
    e_psel = R_HPPA_PSEL,
    e_lpsel = R_HPPA_LPSEL,
    e_rpsel = R_HPPA_RPSEL,
    e_tsel = R_HPPA_TSEL,
    e_ltsel = R_HPPA_LTSEL,
    e_rtsel = R_HPPA_RTSEL,
    e_ltpsel = R_HPPA_LTPSEL,
    e_rtpsel = R_HPPA_RTPSEL
  };

enum hppa_reloc_expr_type
  {
    R_HPPA_E_ONE = 0,
    R_HPPA_E_TWO = 1,
    R_HPPA_E_PCREL = 2,
    R_HPPA_E_CON = 3,
    R_HPPA_E_PLABEL = 7,
    R_HPPA_E_ABS = 18
  };

/* for compatibility */
enum hppa_reloc_expr_type_alt
  {
    e_one = R_HPPA_E_ONE,
    e_two = R_HPPA_E_TWO,
    e_pcrel = R_HPPA_E_PCREL,
    e_con = R_HPPA_E_CON,
    e_plabel = R_HPPA_E_PLABEL,
    e_abs = R_HPPA_E_ABS
  };


/* Relocations for function calls must be accompanied by parameter
   relocation bits.  These bits describe exactly where the caller has
   placed the function's arguments and where it expects to find a return
   value.

   Both ELF and SOM encode this information within the addend field
   of the call relocation.  (Note this could break very badly if one
   was to make a call like bl foo + 0x12345678).

   The high order 10 bits contain parameter relocation information,
   the low order 22 bits contain the constant offset.  */

#define HPPA_R_ARG_RELOC(a)	\
  (((a) >> 22) & 0x3ff)
#define HPPA_R_CONSTANT(a)	\
  ((((bfd_signed_vma)(a)) << (BFD_ARCH_SIZE-22)) >> (BFD_ARCH_SIZE-22))
#define HPPA_R_ADDEND(r, c)	\
  (((r) << 22) + ((c) & 0x3fffff))


/* Some functions to manipulate PA instructions.  */

/* Declare the functions with the unused attribute to avoid warnings.  */
static inline int sign_extend (int, int) ATTRIBUTE_UNUSED;
static inline int low_sign_extend (int, int) ATTRIBUTE_UNUSED;
static inline int sign_unext (int, int) ATTRIBUTE_UNUSED;
static inline int low_sign_unext (int, int) ATTRIBUTE_UNUSED;
static inline int re_assemble_3 (int) ATTRIBUTE_UNUSED;
static inline int re_assemble_12 (int) ATTRIBUTE_UNUSED;
static inline int re_assemble_14 (int) ATTRIBUTE_UNUSED;
static inline int re_assemble_16 (int) ATTRIBUTE_UNUSED;
static inline int re_assemble_17 (int) ATTRIBUTE_UNUSED;
static inline int re_assemble_21 (int) ATTRIBUTE_UNUSED;
static inline int re_assemble_22 (int) ATTRIBUTE_UNUSED;
static inline bfd_signed_vma hppa_field_adjust
  (bfd_vma, bfd_signed_vma, enum hppa_reloc_field_selector_type_alt)
  ATTRIBUTE_UNUSED;
static inline int bfd_hppa_insn2fmt (bfd *, int) ATTRIBUTE_UNUSED;
static inline int hppa_rebuild_insn (int, int, int) ATTRIBUTE_UNUSED;


/* The *sign_extend functions are used to assemble various bitfields
   taken from an instruction and return the resulting immediate
   value.  */

static inline int
sign_extend (int x, int len)
{
  int signbit = (1 << (len - 1));
  int mask = (signbit << 1) - 1;
  return ((x & mask) ^ signbit) - signbit;
}

static inline int
low_sign_extend (int x, int len)
{
  return (x >> 1) - ((x & 1) << (len - 1));
}


/* The re_assemble_* functions prepare an immediate value for
   insertion into an opcode. pa-risc uses all sorts of weird bitfields
   in the instruction to hold the value.  */

static inline int
sign_unext (int x, int len)
{
  int len_ones;

  len_ones = (1 << len) - 1;

  return x & len_ones;
}

static inline int
low_sign_unext (int x, int len)
{
  int temp;
  int sign;

  sign = (x >> (len-1)) & 1;

  temp = sign_unext (x, len-1);

  return (temp << 1) | sign;
}

static inline int
re_assemble_3 (int as3)
{
  return ((  (as3 & 4) << (13-2))
	  | ((as3 & 3) << (13+1)));
}

static inline int
re_assemble_12 (int as12)
{
  return ((  (as12 & 0x800) >> 11)
	  | ((as12 & 0x400) >> (10 - 2))
	  | ((as12 & 0x3ff) << (1 + 2)));
}

static inline int
re_assemble_14 (int as14)
{
  return ((  (as14 & 0x1fff) << 1)
	  | ((as14 & 0x2000) >> 13));
}

static inline int
re_assemble_16 (int as16)
{
  int s, t;

  /* Unusual 16-bit encoding, for wide mode only.  */
  t = (as16 << 1) & 0xffff;
  s = (as16 & 0x8000);
  return (t ^ s ^ (s >> 1)) | (s >> 15);
}

static inline int
re_assemble_17 (int as17)
{
  return ((  (as17 & 0x10000) >> 16)
	  | ((as17 & 0x0f800) << (16 - 11))
	  | ((as17 & 0x00400) >> (10 - 2))
	  | ((as17 & 0x003ff) << (1 + 2)));
}

static inline int
re_assemble_21 (int as21)
{
  return ((  (as21 & 0x100000) >> 20)
	  | ((as21 & 0x0ffe00) >> 8)
	  | ((as21 & 0x000180) << 7)
	  | ((as21 & 0x00007c) << 14)
	  | ((as21 & 0x000003) << 12));
}

static inline int
re_assemble_22 (int as22)
{
  return ((  (as22 & 0x200000) >> 21)
	  | ((as22 & 0x1f0000) << (21 - 16))
	  | ((as22 & 0x00f800) << (16 - 11))
	  | ((as22 & 0x000400) >> (10 - 2))
	  | ((as22 & 0x0003ff) << (1 + 2)));
}


/* Handle field selectors for PA instructions.
   The L and R (and LS, RS etc.) selectors are used in pairs to form a
   full 32 bit address.  eg.

   LDIL	L'start,%r1		; put left part into r1
   LDW	R'start(%r1),%r2	; add r1 and right part to form address

   This function returns sign extended values in all cases.
*/

static inline bfd_signed_vma
hppa_field_adjust (bfd_vma sym_val,
		   bfd_signed_vma addend,
		   enum hppa_reloc_field_selector_type_alt r_field)
{
  bfd_signed_vma value;

  value = sym_val + addend;
  switch (r_field)
    {
    case e_fsel:
      /* F: No change.  */
      break;

    case e_nsel:
      /* N: null selector.  I don't really understand what this is all
	 about, but HP's documentation says "this indicates that zero
	 bits are to be used for the displacement on the instruction.
	 This fixup is used to identify three-instruction sequences to
	 access data (for importing shared library data)."  */
      value = 0;
      break;

    case e_lsel:
    case e_nlsel:
      /* L:  Select top 21 bits.  */
      value = value >> 11;
      break;

    case e_rsel:
      /* R:  Select bottom 11 bits.  */
      value = value & 0x7ff;
      break;

    case e_lssel:
      /* LS:  Round to nearest multiple of 2048 then select top 21 bits.  */
      value = value + 0x400;
      value = value >> 11;
      break;

    case e_rssel:
      /* RS:  Select bottom 11 bits for LS.
	 We need to return a value such that 2048 * LS'x + RS'x == x.
	 ie. RS'x = x - ((x + 0x400) & -0x800)
	 this is just a sign extension from bit 21.  */
      value = ((value & 0x7ff) ^ 0x400) - 0x400;
      break;

    case e_ldsel:
      /* LD:  Round to next multiple of 2048 then select top 21 bits.
	 Yes, if we are already on a multiple of 2048, we go up to the
	 next one.  RD in this case will be -2048.  */
      value = value + 0x800;
      value = value >> 11;
      break;

    case e_rdsel:
      /* RD:  Set bits 0-20 to one.  */
      value = value | -0x800;
      break;

    case e_lrsel:
    case e_nlrsel:
      /* LR:  L with rounding of the addend to nearest 8k.  */
      value = sym_val + ((addend + 0x1000) & -0x2000);
      value = value >> 11;
      break;

    case e_rrsel:
      /* RR:  R with rounding of the addend to nearest 8k.
	 We need to return a value such that 2048 * LR'x + RR'x == x
	 ie. RR'x = s+a - (s + (((a + 0x1000) & -0x2000) & -0x800))
	 .	  = s+a - ((s & -0x800) + ((a + 0x1000) & -0x2000))
	 .	  = (s & 0x7ff) + a - ((a + 0x1000) & -0x2000)  */
      value = (sym_val & 0x7ff) + (((addend & 0x1fff) ^ 0x1000) - 0x1000);
      break;

    default:
      abort ();
    }
  return value;
}

/* PA-RISC OPCODES */
#define get_opcode(insn)	(((insn) >> 26) & 0x3f)

enum hppa_opcode_type
{
  /* None of the opcodes in the first group generate relocs, so we
     aren't too concerned about them.  */
  OP_SYSOP   = 0x00,
  OP_MEMMNG  = 0x01,
  OP_ALU     = 0x02,
  OP_NDXMEM  = 0x03,
  OP_SPOP    = 0x04,
  OP_DIAG    = 0x05,
  OP_FMPYADD = 0x06,
  OP_UNDEF07 = 0x07,
  OP_COPRW   = 0x09,
  OP_COPRDW  = 0x0b,
  OP_COPR    = 0x0c,
  OP_FLOAT   = 0x0e,
  OP_PRDSPEC = 0x0f,
  OP_UNDEF15 = 0x15,
  OP_UNDEF1d = 0x1d,
  OP_FMPYSUB = 0x26,
  OP_FPFUSED = 0x2e,
  OP_SHEXDP0 = 0x34,
  OP_SHEXDP1 = 0x35,
  OP_SHEXDP2 = 0x36,
  OP_UNDEF37 = 0x37,
  OP_SHEXDP3 = 0x3c,
  OP_SHEXDP4 = 0x3d,
  OP_MULTMED = 0x3e,
  OP_UNDEF3f = 0x3f,

  OP_LDIL    = 0x08,
  OP_ADDIL   = 0x0a,

  OP_LDO     = 0x0d,
  OP_LDB     = 0x10,
  OP_LDH     = 0x11,
  OP_LDW     = 0x12,
  OP_LDWM    = 0x13,
  OP_STB     = 0x18,
  OP_STH     = 0x19,
  OP_STW     = 0x1a,
  OP_STWM    = 0x1b,

  OP_LDD     = 0x14,
  OP_STD     = 0x1c,

  OP_FLDW    = 0x16,
  OP_LDWL    = 0x17,
  OP_FSTW    = 0x1e,
  OP_STWL    = 0x1f,

  OP_COMBT   = 0x20,
  OP_COMIBT  = 0x21,
  OP_COMBF   = 0x22,
  OP_COMIBF  = 0x23,
  OP_CMPBDT  = 0x27,
  OP_ADDBT   = 0x28,
  OP_ADDIBT  = 0x29,
  OP_ADDBF   = 0x2a,
  OP_ADDIBF  = 0x2b,
  OP_CMPBDF  = 0x2f,
  OP_BVB     = 0x30,
  OP_BB      = 0x31,
  OP_MOVB    = 0x32,
  OP_MOVIB   = 0x33,
  OP_CMPIBD  = 0x3b,

  OP_COMICLR = 0x24,
  OP_SUBI    = 0x25,
  OP_ADDIT   = 0x2c,
  OP_ADDI    = 0x2d,

  OP_BE      = 0x38,
  OP_BLE     = 0x39,
  OP_BL      = 0x3a
};


/* Given a machine instruction, return its format.  */

static inline int
bfd_hppa_insn2fmt (bfd *abfd, int insn)
{
  enum hppa_opcode_type op = get_opcode (insn);

  switch (op)
    {
    case OP_COMICLR:
    case OP_SUBI:
    case OP_ADDIT:
    case OP_ADDI:
      return 11;

    case OP_COMBT:
    case OP_COMIBT:
    case OP_COMBF:
    case OP_COMIBF:
    case OP_CMPBDT:
    case OP_ADDBT:
    case OP_ADDIBT:
    case OP_ADDBF:
    case OP_ADDIBF:
    case OP_CMPBDF:
    case OP_BVB:
    case OP_BB:
    case OP_MOVB:
    case OP_MOVIB:
    case OP_CMPIBD:
      return 12;

    case OP_LDO:
    case OP_LDB:
    case OP_LDH:
    case OP_LDW:
    case OP_LDWM:
    case OP_STB:
    case OP_STH:
    case OP_STW:
    case OP_STWM:
      if (abfd->arch_info->mach >= 25)
	return 16;	/* Wide mode, format 16.  */
      return 14;

    case OP_FLDW:
    case OP_LDWL:
    case OP_FSTW:
    case OP_STWL:
      /* This is a hack.  Unfortunately, format 11 is already taken
	 and we're using integers rather than an enum, so it's hard
	 to describe the 11a format.  */
      if (abfd->arch_info->mach >= 25)
	return -16;	/* Wide mode, format 16a.  */
      return -11;

    case OP_LDD:
    case OP_STD:
      if (abfd->arch_info->mach >= 25)
	return -10;	/* Wide mode, format 10a.  */
      return 10;

    case OP_BL:
      if ((insn & 0x8000) != 0)
	return 22;
      /* fall thru */
    case OP_BE:
    case OP_BLE:
      return 17;

    case OP_LDIL:
    case OP_ADDIL:
      return 21;

    default:
      break;
    }
  return 32;
}


/* Insert VALUE into INSN using R_FORMAT to determine exactly what
   bits to change.  */

static inline int
hppa_rebuild_insn (int insn, int value, int r_format)
{
  switch (r_format)
    {
    case 11:
      return (insn & ~ 0x7ff) | low_sign_unext (value, 11);

    case 12:
      return (insn & ~ 0x1ffd) | re_assemble_12 (value);


    case 10:
      return (insn & ~ 0x3ff1) | re_assemble_14 (value & -8);

    case -11:
      return (insn & ~ 0x3ff9) | re_assemble_14 (value & -4);

    case 14:
      return (insn & ~ 0x3fff) | re_assemble_14 (value);


    case -10:
      return (insn & ~ 0xfff1) | re_assemble_16 (value & -8);

    case -16:
      return (insn & ~ 0xfff9) | re_assemble_16 (value & -4);

    case 16:
      return (insn & ~ 0xffff) | re_assemble_16 (value);


    case 17:
      return (insn & ~ 0x1f1ffd) | re_assemble_17 (value);

    case 21:
      return (insn & ~ 0x1fffff) | re_assemble_21 (value);

    case 22:
      return (insn & ~ 0x3ff1ffd) | re_assemble_22 (value);

    case 32:
      return value;

    default:
      abort ();
    }
  return insn;
}

#endif /* _LIBHPPA_H */
@


1.20
log
@Switch sources over to use the GPL version 3
@
text
@d3 1
a3 1
   2003, 2007  Free Software Foundation, Inc.
@


1.19
log
@Update the address and phone number of the FSF organization in the GPL notices
@
text
@d3 1
a3 1
   2003 Free Software Foundation, Inc.
d12 1
a12 1
   the Free Software Foundation; either version 2 of the License, or
d22 2
a23 1
   Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA 02110-1301, USA.  */
@


1.18
log
@Update the FSF address in the copyright/GPL notice
@
text
@d22 1
a22 1
   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02110-1301, USA.  */
@


1.17
log
@	* elf-bfd.h: Remove PARAMS macro.  Replace PTR with void *.
	(NAME): Use ## rather than CONCAT4 macro.
	* elfcode.h: Remove one remaining PARAMS macro.
	* elf-eh-frame.c: Convert to C90, remove unneeded casts and prototypes.
	* elf-strtab.c: Likewise.
	* elf-hppa.h: Likewise.
	* elf32-hppa.h: Likewise.
	* elf32-hppa.c: Likewise.
	(elf32_hppa_add_symbol_hook): Delete.
	(elf_backend_add_symbol_hook): Don't define.
	* libhppa.h: Convert to C90.  Replace INLINE with inline.
@
text
@d22 1
a22 1
   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
@


1.16
log
@Update copyright notices
@
text
@d2 2
a3 2
   Copyright 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1998, 1999, 2000
   Free Software Foundation, Inc.
a29 8
#ifndef INLINE
#ifdef __GNUC__
#define INLINE inline
#else
#define INLINE
#endif /* GNU C? */
#endif /* INLINE */

d159 16
a174 16
static INLINE int sign_extend PARAMS ((int, int)) ATTRIBUTE_UNUSED;
static INLINE int low_sign_extend PARAMS ((int, int)) ATTRIBUTE_UNUSED;
static INLINE int sign_unext PARAMS ((int, int)) ATTRIBUTE_UNUSED;
static INLINE int low_sign_unext PARAMS ((int, int)) ATTRIBUTE_UNUSED;
static INLINE int re_assemble_3 PARAMS ((int)) ATTRIBUTE_UNUSED;
static INLINE int re_assemble_12 PARAMS ((int)) ATTRIBUTE_UNUSED;
static INLINE int re_assemble_14 PARAMS ((int)) ATTRIBUTE_UNUSED;
static INLINE int re_assemble_16 PARAMS ((int)) ATTRIBUTE_UNUSED;
static INLINE int re_assemble_17 PARAMS ((int)) ATTRIBUTE_UNUSED;
static INLINE int re_assemble_21 PARAMS ((int)) ATTRIBUTE_UNUSED;
static INLINE int re_assemble_22 PARAMS ((int)) ATTRIBUTE_UNUSED;
static INLINE bfd_signed_vma hppa_field_adjust
  PARAMS ((bfd_vma, bfd_signed_vma,
	   enum hppa_reloc_field_selector_type_alt)) ATTRIBUTE_UNUSED;
static INLINE int bfd_hppa_insn2fmt PARAMS ((bfd *, int)) ATTRIBUTE_UNUSED;
static INLINE int hppa_rebuild_insn PARAMS ((int, int, int)) ATTRIBUTE_UNUSED;
d181 2
a182 3
static INLINE int
sign_extend (x, len)
     int x, len;
d189 2
a190 3
static INLINE int
low_sign_extend (x, len)
     int x, len;
d200 2
a201 3
static INLINE int
sign_unext (x, len)
     int x, len;
d210 2
a211 3
static INLINE int
low_sign_unext (x, len)
     int x, len;
d223 2
a224 3
static INLINE int
re_assemble_3 (as3)
     int as3;
d230 2
a231 3
static INLINE int
re_assemble_12 (as12)
     int as12;
d238 2
a239 3
static INLINE int
re_assemble_14 (as14)
     int as14;
d245 2
a246 3
static INLINE int
re_assemble_16 (as16)
     int as16;
d256 2
a257 3
static INLINE int
re_assemble_17 (as17)
     int as17;
d265 2
a266 3
static INLINE int
re_assemble_21 (as21)
     int as21;
d275 2
a276 3
static INLINE int
re_assemble_22 (as22)
     int as22;
d296 4
a299 5
static INLINE bfd_signed_vma
hppa_field_adjust (sym_val, addend, r_field)
     bfd_vma sym_val;
     bfd_signed_vma addend;
     enum hppa_reloc_field_selector_type_alt r_field;
d462 2
a463 4
static INLINE int
bfd_hppa_insn2fmt (abfd, insn)
     bfd *abfd;
     int insn;
d544 2
a545 5
static INLINE int
hppa_rebuild_insn (insn, value, r_format)
     int insn;
     int value;
     int r_format;
@


1.16.30.1
log
@Merge drow-cplus-branch to:
  cvs rtag -D 2003-12-14 00:00:00 UTC drow-cplus-merge-20031214 gdb+dejagnu
@
text
@d2 2
a3 2
   Copyright 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1998, 1999, 2000,
   2003 Free Software Foundation, Inc.
d30 8
d167 16
a182 16
static inline int sign_extend (int, int) ATTRIBUTE_UNUSED;
static inline int low_sign_extend (int, int) ATTRIBUTE_UNUSED;
static inline int sign_unext (int, int) ATTRIBUTE_UNUSED;
static inline int low_sign_unext (int, int) ATTRIBUTE_UNUSED;
static inline int re_assemble_3 (int) ATTRIBUTE_UNUSED;
static inline int re_assemble_12 (int) ATTRIBUTE_UNUSED;
static inline int re_assemble_14 (int) ATTRIBUTE_UNUSED;
static inline int re_assemble_16 (int) ATTRIBUTE_UNUSED;
static inline int re_assemble_17 (int) ATTRIBUTE_UNUSED;
static inline int re_assemble_21 (int) ATTRIBUTE_UNUSED;
static inline int re_assemble_22 (int) ATTRIBUTE_UNUSED;
static inline bfd_signed_vma hppa_field_adjust
  (bfd_vma, bfd_signed_vma, enum hppa_reloc_field_selector_type_alt)
  ATTRIBUTE_UNUSED;
static inline int bfd_hppa_insn2fmt (bfd *, int) ATTRIBUTE_UNUSED;
static inline int hppa_rebuild_insn (int, int, int) ATTRIBUTE_UNUSED;
d189 3
a191 2
static inline int
sign_extend (int x, int len)
d198 3
a200 2
static inline int
low_sign_extend (int x, int len)
d210 3
a212 2
static inline int
sign_unext (int x, int len)
d221 3
a223 2
static inline int
low_sign_unext (int x, int len)
d235 3
a237 2
static inline int
re_assemble_3 (int as3)
d243 3
a245 2
static inline int
re_assemble_12 (int as12)
d252 3
a254 2
static inline int
re_assemble_14 (int as14)
d260 3
a262 2
static inline int
re_assemble_16 (int as16)
d272 3
a274 2
static inline int
re_assemble_17 (int as17)
d282 3
a284 2
static inline int
re_assemble_21 (int as21)
d293 3
a295 2
static inline int
re_assemble_22 (int as22)
d315 5
a319 4
static inline bfd_signed_vma
hppa_field_adjust (bfd_vma sym_val,
		   bfd_signed_vma addend,
		   enum hppa_reloc_field_selector_type_alt r_field)
d482 4
a485 2
static inline int
bfd_hppa_insn2fmt (bfd *abfd, int insn)
d566 5
a570 2
static inline int
hppa_rebuild_insn (int insn, int value, int r_format)
@


1.16.28.1
log
@2003-09-17  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton_dictionary-20030917-merge.
@
text
@d2 2
a3 2
   Copyright 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1998, 1999, 2000,
   2003 Free Software Foundation, Inc.
d30 8
d167 16
a182 16
static inline int sign_extend (int, int) ATTRIBUTE_UNUSED;
static inline int low_sign_extend (int, int) ATTRIBUTE_UNUSED;
static inline int sign_unext (int, int) ATTRIBUTE_UNUSED;
static inline int low_sign_unext (int, int) ATTRIBUTE_UNUSED;
static inline int re_assemble_3 (int) ATTRIBUTE_UNUSED;
static inline int re_assemble_12 (int) ATTRIBUTE_UNUSED;
static inline int re_assemble_14 (int) ATTRIBUTE_UNUSED;
static inline int re_assemble_16 (int) ATTRIBUTE_UNUSED;
static inline int re_assemble_17 (int) ATTRIBUTE_UNUSED;
static inline int re_assemble_21 (int) ATTRIBUTE_UNUSED;
static inline int re_assemble_22 (int) ATTRIBUTE_UNUSED;
static inline bfd_signed_vma hppa_field_adjust
  (bfd_vma, bfd_signed_vma, enum hppa_reloc_field_selector_type_alt)
  ATTRIBUTE_UNUSED;
static inline int bfd_hppa_insn2fmt (bfd *, int) ATTRIBUTE_UNUSED;
static inline int hppa_rebuild_insn (int, int, int) ATTRIBUTE_UNUSED;
d189 3
a191 2
static inline int
sign_extend (int x, int len)
d198 3
a200 2
static inline int
low_sign_extend (int x, int len)
d210 3
a212 2
static inline int
sign_unext (int x, int len)
d221 3
a223 2
static inline int
low_sign_unext (int x, int len)
d235 3
a237 2
static inline int
re_assemble_3 (int as3)
d243 3
a245 2
static inline int
re_assemble_12 (int as12)
d252 3
a254 2
static inline int
re_assemble_14 (int as14)
d260 3
a262 2
static inline int
re_assemble_16 (int as16)
d272 3
a274 2
static inline int
re_assemble_17 (int as17)
d282 3
a284 2
static inline int
re_assemble_21 (int as21)
d293 3
a295 2
static inline int
re_assemble_22 (int as22)
d315 5
a319 4
static inline bfd_signed_vma
hppa_field_adjust (bfd_vma sym_val,
		   bfd_signed_vma addend,
		   enum hppa_reloc_field_selector_type_alt r_field)
d482 4
a485 2
static inline int
bfd_hppa_insn2fmt (bfd *abfd, int insn)
d566 5
a570 2
static inline int
hppa_rebuild_insn (int insn, int value, int r_format)
@


1.15
log
@Restore hppa-elf32 to working order.
@
text
@d2 1
a2 1
   Copyright (C) 1990, 91, 92, 93, 94, 95, 96, 98, 99, 2000
@


1.15.2.1
log
@Update copyright notices.
@
text
@d2 1
a2 1
   Copyright 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1998, 1999, 2000
@


1.14
log
@        * libhppa.h (re_assemble_3, re_assemble_12, re_assemble_16,
        re_assemble_17, re_assemble_21, re_assemble_22): Don't mask insn.
        (hppa_rebuild_insn): Mask immediate bits here instead.
        * elf-hppa.h (elf_hppa_relocate_insn): Mask here too.
@
text
@d24 2
a25 2
#ifndef _HPPA_H
#define _HPPA_H
a161 1
#define HPPA_WIDE	       (0) /* PSW W-bit, need to check! FIXME */
a162 19
/* These macros get bit fields using HP's numbering (MSB = 0),
 * but note that "MASK" assumes that the LSB bits are what's
 * wanted.
 */
#ifndef GET_FIELD
#define GET_FIELD(X, FROM, TO) \
  ((X) >> (31 - (TO)) & ((1 << ((TO) - (FROM) + 1)) - 1))
#endif
#define GET_BIT(X, WHICH) \
  GET_FIELD (X, WHICH, WHICH)

#define MASK(SIZE) \
  (~((-1) << SIZE))

#define CATENATE(X, XSIZE, Y, YSIZE) \
  (((X & MASK (XSIZE)) << YSIZE) | (Y & MASK (YSIZE)))

#define ELEVEN(X) \
  CATENATE (GET_BIT (X, 10), 1, GET_FIELD (X, 0, 9), 10)
a165 7
/* NOTE: these use the HP convention that f{0} is the _left_ most
 *       bit (MSB) of f; they sometimes have to impose an assumption
 *       about the size of a field; and as far as I can tell, most
 *       aren't used.
 */

#if __GNUC__ > 2 || (__GNUC__ == 2 && __GNUC_MINOR__ >= 7)
d167 21
a187 52
static INLINE unsigned int sign_extend (unsigned int, unsigned int)
     __attribute__ ((__unused__));
static INLINE unsigned int low_sign_extend (unsigned int, unsigned int)
     __attribute__ ((__unused__));
static INLINE unsigned int assemble_3 (unsigned int)
     __attribute__ ((__unused__));
static INLINE unsigned int assemble_6 (unsigned int, unsigned int)
     __attribute__ ((__unused__));
static INLINE unsigned int assemble_12 (unsigned int, unsigned int)
     __attribute__ ((__unused__));
static INLINE unsigned int assemble_16 (unsigned int, unsigned int)
     __attribute__ ((__unused__));
static INLINE unsigned int assemble_16a (unsigned int, unsigned int,
					 unsigned int)
     __attribute__ ((__unused__));
static INLINE unsigned int assemble_17 (unsigned int, unsigned int,
					unsigned int)
     __attribute__ ((__unused__));
static INLINE unsigned int assemble_21 (unsigned int)
     __attribute ((__unused__));

static INLINE unsigned int sign_unext (unsigned int, unsigned int)
     __attribute__ ((__unused__));
static INLINE unsigned int low_sign_unext (unsigned int, unsigned int)
     __attribute__ ((__unused__));
static INLINE unsigned int re_assemble_3 (unsigned int, unsigned int)
     __attribute__ ((__unused__));
static INLINE unsigned int re_assemble_12 (unsigned int, unsigned int)
     __attribute__ ((__unused__));
static INLINE unsigned int re_assemble_16 (unsigned int, unsigned int, int)
     __attribute__ ((__unused__));
static INLINE unsigned int re_assemble_17 (unsigned int, unsigned int)
     __attribute__ ((__unused__));
static INLINE unsigned int re_assemble_22 (unsigned int, unsigned int)
     __attribute__ ((__unused__));
static INLINE unsigned int re_assemble_21 (unsigned int, unsigned int)
     __attribute__ ((__unused__));
static INLINE bfd_signed_vma hppa_field_adjust (bfd_signed_vma, bfd_signed_vma,
						enum hppa_reloc_field_selector_type_alt)
     __attribute__ ((__unused__));
static INLINE int bfd_hppa_insn2fmt (unsigned int)
     __attribute__ ((__unused__));
static INLINE  unsigned int hppa_rebuild_insn (bfd *, unsigned int,
					       unsigned int, unsigned int)
     __attribute__ ((__unused__));
#endif /* gcc 2.7 or higher */


/* The *sign_extend and assemble_* functions are used to assemble
   various bitfields taken from an instruction and return the
   resulting immediate value.  They correspond to functions by the
   same name in HP's PA-RISC 2.0 Architecture Reference Manual.  */
d189 1
a189 1
static INLINE unsigned int
d191 1
a191 1
     unsigned int x, len;
d193 2
a194 2
  unsigned int signbit = (1 << (len - 1));
  unsigned int mask = (signbit << 1) - 1;
d198 1
a198 1
static INLINE unsigned int
d200 1
a200 1
     unsigned int x, len;
a204 6
static INLINE unsigned int
assemble_3 (x)
     unsigned int x;
{
  return CATENATE (GET_BIT (x, 2), 1, GET_FIELD (x, 0, 1), 2);
}
d206 3
a208 6
static INLINE unsigned int
assemble_6 (x, y)
     unsigned int x, y;
{
  return (((x & 1) << 5) + (32 - (y & 0x1f)));
}
d210 1
a210 87
static INLINE unsigned int
assemble_12 (x, y)
     unsigned int x, y;
{
  return CATENATE (CATENATE (y, 1, GET_BIT (x, 10), 1), 2,
 		   GET_FIELD (x, 0, 9), 9);
}

static INLINE unsigned int
assemble_16 (x, y)
     unsigned int x, y;
{
  /* Depends on PSW W-bit !*/
  unsigned int temp;

  if (HPPA_WIDE)
    temp = CATENATE (CATENATE (GET_BIT (y, 13), 1,
			       (GET_BIT (y, 13) ^ GET_BIT (x, 0)), 1), 2,
		     CATENATE ((GET_BIT (y, 13) ^ GET_BIT (x, 1)), 1,
			       GET_FIELD (y, 0, 12), 13), 14);
  else
    temp = CATENATE (CATENATE (GET_BIT (y, 13), 1, GET_BIT (y, 13), 1), 2,
		     CATENATE (GET_BIT (y, 13), 1, GET_FIELD (y, 0, 12), 13), 14);

  return sign_extend (temp, 16);
}

static INLINE unsigned int
assemble_16a (x, y, z)
     unsigned int x, y, z;
{
  /* Depends on PSW W-bit !*/
  unsigned int temp;

  if (HPPA_WIDE)
    temp = CATENATE (CATENATE (z, 1, (z ^ GET_BIT (x, 0)), 1), 2,
		     CATENATE ((z ^ GET_BIT (x, 1)), 1, y, 11), 12);
  else
    temp = CATENATE (CATENATE (z, 1, z, 1), 2, CATENATE (z, 1, y, 11), 12);

  return sign_extend ((temp << 2), 16);
}

static INLINE unsigned int
assemble_17 (x, y, z)
     unsigned int x, y, z;
{
  unsigned int temp;

  temp = CATENATE (CATENATE (z, 1, x, 5), 6,
		   CATENATE (GET_BIT (y, 10), 1, GET_FIELD (y, 0, 9), 10), 11);

  return temp;
}

static INLINE unsigned int
assemble_21 (x)
     unsigned int x;
{
  unsigned int temp;

  temp = ((  (x & 0x000001) << 20)
	  | ((x & 0x000ffe) << 8)
	  | ((x & 0x003000) >> 12)
	  | ((x & 0x00c000) >> 7)
	  | ((x & 0x1f0000) >> 14));
  return temp;
}

static INLINE unsigned int
assemble_22 (a,b,c,d)
     unsigned int a,b,c,d;
{
  unsigned int temp;

  temp = CATENATE (CATENATE (d, 1, a, 5), 6,
		   CATENATE (b, 5, ELEVEN (c), 11), 16);

  return sign_extend (temp, 22);
}


/* The re_assemble_* functions splice together an opcode and an
   immediate value.  pa-risc uses all sorts of weird bitfields in the
   instruction to hold the value.  */

static INLINE unsigned int
d212 1
a212 1
     unsigned int x, len;
d214 1
a214 1
  unsigned int len_ones;
d216 1
a216 1
  len_ones = ((unsigned int) 1 << len) - 1;
d221 1
a221 1
static INLINE unsigned int
d223 1
a223 1
     unsigned int x, len;
d225 2
a226 2
  unsigned int temp;
  unsigned int sign;
d235 3
a237 4
static INLINE unsigned int
re_assemble_3 (insn, as3)
     unsigned int insn;
     unsigned int as3;
d239 1
a239 2
  return (insn
	  | ((as3 & 4) << (13-2))
d243 3
a245 4
static INLINE unsigned int
re_assemble_12 (insn, as12)
     unsigned int insn;
     unsigned int as12;
d247 1
a247 2
  return (insn
	  | ((as12 & 0x800) >> 11)
d252 11
a262 5
static INLINE unsigned int
re_assemble_16 (insn, as16, wide)
     unsigned int insn;
     unsigned int as16;
     int wide;
d264 1
a264 1
  unsigned int s, t;
d266 4
a269 14
  if (wide)
    {
      /* Unusual 16-bit encoding.  */
      t = (as16 << 1) & 0xffff;
      s = (as16 & 0x8000);
      return insn | (t ^ s ^ (s >> 1)) | (s >> 15);
    }
  else
    {
      /* Standard 14-bit encoding.  */
      t = (as16 << 1) & 0x3fff;
      s = (as16 & 0x2000);
      return insn | t | (s >> 13);
    }
d272 3
a274 4
static INLINE unsigned int
re_assemble_17 (insn, as17)
     unsigned int insn;
     unsigned int as17;
d276 1
a276 2
  return (insn
	  | ((as17 & 0x10000) >> 16)
d282 3
a284 4
static INLINE unsigned int
re_assemble_21 (insn, as21)
     unsigned int insn;
     unsigned int as21;
d286 1
a286 2
  return (insn
	  | ((as21 & 0x100000) >> 20)
d293 3
a295 4
static INLINE unsigned int
re_assemble_22 (insn, as22)
     unsigned int insn;
     unsigned int as22;
d297 1
a297 2
  return (insn
	  | ((as22 & 0x200000) >> 21)
d317 1
a317 1
     bfd_signed_vma sym_val;
d327 3
d331 6
a336 1
      /* F: No change.  */
d402 76
a477 2
/* FIXME: this list is incomplete.  It should also be an enumerated
   type rather than #defines.  */
a478 47
#define LDO	0x0d
#define LDB	0x10
#define LDH	0x11
#define LDW	0x12
#define LDWM	0x13
#define STB	0x18
#define STH	0x19
#define STW	0x1a
#define STWM	0x1b
#define COMICLR	0x24
#define SUBI	0x25
#define SUBIO	0x25
#define ADDIT	0x2c
#define ADDITO	0x2c
#define ADDI	0x2d
#define ADDIO	0x2d
#define LDIL	0x08
#define ADDIL	0x0a

#define MOVB	0x32
#define MOVIB	0x33
#define COMBT	0x20
#define COMBF	0x22
#define COMIBT	0x21
#define COMIBF	0x23
#define ADDBT	0x28
#define ADDBF	0x2a
#define ADDIBT	0x29
#define ADDIBF	0x2b
#define BVB	0x30
#define BB	0x31

#define BL	0x3a
#define BLE	0x39
#define BE	0x38

#define CMPBDT	0x27
#define CMPBDF	0x2f
#define CMPIBD	0x3b
#define LDD	0x14
#define STD	0x1c
#define LDWL	0x17
#define STWL	0x1f
#define FLDW    0x16
#define FSTW    0x1e

/* Given a machine instruction, return its format.
d480 1
a480 2
   FIXME:  opcodes which do not map to a known format
   should return an error of some sort.  */
d483 3
a485 2
bfd_hppa_insn2fmt (insn)
     unsigned int insn;
d487 1
a487 1
  unsigned char op = get_opcode (insn);
d491 4
a494 3
    case ADDI:
    case ADDIT:
    case SUBI:
d497 15
a511 15
    case MOVB:
    case MOVIB:
    case COMBT:
    case COMBF:
    case COMIBT:
    case COMIBF:
    case ADDBT:
    case ADDBF:
    case ADDIBT:
    case ADDIBF:
    case BVB:
    case BB:
    case CMPBDT:
    case CMPBDF:
    case CMPIBD:
d514 11
a524 9
    case LDO:
    case LDB:
    case LDH:
    case LDW:
    case LDWM:
    case STB:
    case STH:
    case STW:
    case STWM:
d527 4
a530 4
    case LDWL:
    case STWL:
    case FLDW:
    case FSTW:
d534 2
d538 4
a541 2
    case LDD:
    case STD:
d544 2
a545 4
    case BL:
    case BE:
    case BLE:
      if ((insn & 0x00008000) != 0)
d547 3
d552 2
a553 2
    case LDIL:
    case ADDIL:
d566 5
a570 6
static INLINE unsigned int
hppa_rebuild_insn (abfd, insn, value, r_format)
     bfd *abfd ATTRIBUTE_UNUSED;
     unsigned int insn;
     unsigned int value;
     unsigned int r_format;
d574 38
a611 6
    case 11: return (insn & ~ 0x7ff) | low_sign_unext (value, 11);
    case 12: return re_assemble_12 (insn & ~ 0x1ffd, value);
    case 14: return (insn & ~ 0x3fff) | low_sign_unext (value, 14);
    case 17: return re_assemble_17 (insn & ~ 0x1f1ffd, value);
    case 21: return re_assemble_21 (insn & ~ 0x1fffff, value);
    case 32: return value;
d619 1
a619 1
#endif /* _HPPA_H */
@


1.13
log
@Fix thinko in 2000-05-02 change.
@
text
@d393 1
a393 1
  return ((insn & ~ (7 << 13))
d403 1
a403 1
  return ((insn & ~ 0x1ffd)
d422 1
a422 1
      return (insn & ~ 0xffff) | (t ^ s ^ (s >> 1)) | (s >> 15);
d429 1
a429 1
      return (insn & ~ 0xffff) | t | (s >> 13);
d438 1
a438 1
  return ((insn & ~ 0x1f1ffd)
d450 1
a450 1
  return ((insn & ~ 0x1fffff)
d463 1
a463 1
  return ((insn & ~ 0x3ff1ffd)
d700 1
a700 1
    case 12: return re_assemble_12 (insn, value);
d702 2
a703 2
    case 17: return re_assemble_17 (insn, value);
    case 21: return re_assemble_21 (insn, value);
@


1.12
log
@Assorted code cleanup and fixes for hppa.  Re-enable elf32-hppa as
it now compiles even if it doesn't work too well.
@
text
@d159 1
a159 1
  ((((int)(a)) << (BFD_ARCH_SIZE-22)) >> (BFD_ARCH_SIZE-22))
@


1.11
log
@Correctly check gcc version.
@
text
@a37 47
#if __GNUC__ > 2 || (__GNUC__ == 2 && __GNUC_MINOR__ >= 7)
/* Declare the functions with the unused attribute to avoid warnings.  */
static INLINE unsigned int assemble_3 (unsigned int)
     __attribute__ ((__unused__));
static INLINE void dis_assemble_3 (unsigned int, unsigned int *)
     __attribute__ ((__unused__));
static INLINE unsigned int assemble_12 (unsigned int, unsigned int)
     __attribute__ ((__unused__));
static INLINE void dis_assemble_12 (unsigned int, unsigned int *,
				    unsigned int *)
     __attribute__ ((__unused__));
static INLINE void dis_assemble_16 (unsigned int, unsigned int *, int)
     __attribute__ ((__unused__));
static INLINE unsigned long assemble_17 (unsigned int, unsigned int,
					 unsigned int)
     __attribute__ ((__unused__));
static INLINE void dis_assemble_17 (unsigned int, unsigned int *,
				    unsigned int *, unsigned int *)
     __attribute__ ((__unused__));
static INLINE void dis_assemble_22 (unsigned int, unsigned int *,
				    unsigned int *, unsigned int *,
				    unsigned int *)
     __attribute__ ((__unused__));
static INLINE unsigned long assemble_21 (unsigned int)
     __attribute ((__unused__));
static INLINE void dis_assemble_21 (unsigned int, unsigned int *)
     __attribute__ ((__unused__));
static INLINE unsigned long sign_extend (unsigned int, unsigned int)
     __attribute__ ((__unused__));
static INLINE unsigned int ones (int) __attribute ((__unused__));
static INLINE void sign_unext (unsigned int, unsigned int, unsigned int *)
     __attribute__ ((__unused__));
static INLINE unsigned long low_sign_extend (unsigned int, unsigned int)
     __attribute__ ((__unused__));
static INLINE void low_sign_unext (unsigned int, unsigned int, unsigned int *)
     __attribute__ ((__unused__));
static INLINE unsigned long hppa_field_adjust (unsigned long, unsigned long,
					       unsigned short)
     __attribute__ ((__unused__));
static INLINE int bfd_hppa_insn2fmt (unsigned long)
     __attribute__ ((__unused__));
static INLINE  unsigned long hppa_rebuild_insn (bfd *, unsigned long,
						unsigned long, unsigned long)
     __attribute__ ((__unused__));
#endif /* gcc 2.7 or higher */


d155 7
a161 4
   
#define HPPA_R_ARG_RELOC(a)	(((a) >> 22) & 0x3FF)
#define HPPA_R_CONSTANT(a)	((((int)(a)) << 10) >> 10)
#define HPPA_R_ADDEND(r,c)	(((r) << 22) + ((c) & 0x3FFFFF))
d171 1
a171 1
#endif  
d177 1
a177 1
  
d183 1
a183 1
  
d186 1
a186 1
/* NOTE: these use the HP convention that f{1} is the _left_ most
d192 56
a247 1
static INLINE unsigned long
d251 3
a253 1
  return (int)(x >> (len - 1) ? (-1 << len) | x : x);
d257 2
a258 2
assemble_3 (x)
     unsigned int x;
d260 1
a260 1
  return CATENATE (GET_BIT (x, 2), 1, GET_FIELD (x, 0, 1), 2);
d263 2
a264 2
static INLINE void
dis_assemble_3 (x, r)
a265 1
     unsigned int *r;
d267 1
a267 1
  *r = (((x & 4) >> 2) | ((x & 3) << 1)) & 7;
d274 1
a274 1
  return (((x & 0x1) << 5) + (32 - (y & 0x1f)));
d285 1
a285 34
static INLINE void
dis_assemble_12 (as12, x, y)
     unsigned int as12;
     unsigned int *x, *y;
{
  *y = (as12 & 0x800) >> 11;
  *x = ((as12 & 0x3ff) << 1) | ((as12 & 0x400) >> 10);
}

static INLINE void
dis_assemble_16 (as16, x, wide)
     unsigned int as16;
     unsigned int *x;
     int wide;
{
  unsigned int t1, t2;

  if (wide)
    {
      /* Unusual 16-bit encoding.  */
      t1 = (as16 << 1) & 0xffff;
      t2 = (as16 & 0x8000);
      *x = t1 ^ t2 ^ (t2 >> 1) | (t2 >> 15);
    }
  else
    {
      /* Standard 14-bit encoding.  */
      t1 = (as16 << 1) & 0x3fff;
      t2 = (as16 & 0x2000);
      *x = t1 | (t2 >> 13);
    }
}

static INLINE unsigned long
d304 1
a304 2

static INLINE unsigned long
d314 2
a315 2
  else 
      temp = CATENATE (CATENATE (z, 1, z, 1), 2, CATENATE (z, 1, y, 11), 12);
d320 1
a320 1
static INLINE unsigned long
d324 1
a324 1
  unsigned long temp;
d328 1
a328 1
  
d332 1
a332 24
static INLINE void
dis_assemble_17 (as17, x, y, z)
     unsigned int as17;
     unsigned int *x, *y, *z;
{

  *z = (as17 & 0x10000) >> 16;
  *x = (as17 & 0x0f800) >> 11;
  *y = (((as17 & 0x00400) >> 10) | ((as17 & 0x3ff) << 1)) & 0x7ff;
}

static INLINE void
dis_assemble_22 (as22, a, b, c, d)
     unsigned int as22;
     unsigned int *a, *b, *c, *d;
{

  *d = (as22 & 0x200000) >> 21;
  *a = (as22 & 0x1f0000) >> 16;
  *b = (as22 & 0x0f800) >> 11;
  *c = (((as22 & 0x00400) >> 10) | ((as22 & 0x3ff) << 1)) & 0x7ff;
}

static INLINE unsigned long
d336 1
a336 1
  unsigned long temp;
d338 6
a343 6
  temp = ((x & 1) << 20) |
    ((x & 0xffe) << 8) |
    ((x & 0xc000) >> 7) |
    ((x & 0x1f0000) >> 14) |
    ((x & 0x003000) >> 12);
  return temp & 0x1fffff;
d346 1
a346 1
static INLINE unsigned long
d350 2
a351 2
  unsigned long temp;
  
a357 6
static INLINE void
dis_assemble_21 (as21, x)
     unsigned int as21, *x;
{
  unsigned long temp;

d359 3
a361 7
  temp = (as21 & 0x100000) >> 20;
  temp |= (as21 & 0x0ffe00) >> 8;
  temp |= (as21 & 0x000180) << 7;
  temp |= (as21 & 0x00007c) << 14;
  temp |= (as21 & 0x000003) << 12;
  *x = temp;
}
d364 2
a365 2
ones (n)
     int n;
a367 1
  int i;
d369 1
a369 7
  i = 0;
  len_ones = 0;
  while (i < n)
    {
      len_ones = (len_ones << 1) | 1;
      i++;
    }
d371 1
a371 1
  return len_ones;
d374 2
a375 2
static INLINE void
sign_unext (x, len, result)
a376 1
     unsigned int *result;
d378 6
a383 1
  unsigned int len_ones;
d385 2
a386 1
  len_ones = ones (len);
d388 8
a395 1
  *result = x & len_ones;
d398 4
a401 3
static INLINE unsigned long
low_sign_extend (x, len)
     unsigned int x, len;
d403 4
a406 1
  return (int)((x & 0x1 ? (-1 << (len - 1)) : 0) | x >> 1);
d409 5
a413 4
static INLINE void
low_sign_unext (x, len, result)
     unsigned int x, len;
     unsigned int *result;
d415 1
a415 5
  unsigned int temp;
  unsigned int sign;
  unsigned int rest;
  unsigned int one_bit_at_len;
  unsigned int len_ones;
d417 15
a431 2
  len_ones = ones (len);
  one_bit_at_len = 1 << (len - 1);
d433 11
a443 3
  sign_unext (x, len, &temp);
  sign = temp & one_bit_at_len;
  sign >>= (len - 1);
d445 12
a456 2
  rest = temp & (len_ones ^ one_bit_at_len);
  rest <<= 1;
d458 11
a468 1
  *result = rest | sign;
a470 1
/* Handle field selectors for PA instructions.  */
d472 15
a486 5
static INLINE unsigned long
hppa_field_adjust (value, constant_value, r_field)
     unsigned long value;
     unsigned long constant_value;
     unsigned short r_field;
d488 3
d493 3
a495 11
    case e_fsel:		/* F  : no change		      */
    case e_nsel:		/* N  : no change		       */
      value += constant_value;
      break;

    case e_lssel:		/* LS : if (bit 21) then add 0x800
				   arithmetic shift right 11 bits */
      value += constant_value;
      if (value & 0x00000400)
	value += 0x800;
      value = (value & 0xfffff800) >> 11;
d498 4
a501 6
    case e_rssel:		/* RS : Sign extend from bit 21	*/
      value += constant_value;
      if (value & 0x00000400)
	value |= 0xfffff800;
      else
	value &= 0x7ff;
d504 2
a505 8
    case e_lsel:		/* L  : Arithmetic shift right 11 bits */
    case e_nlsel:		/* NL  : Arithmetic shift right 11 bits */
      value += constant_value;
      value = (value & 0xfffff800) >> 11;
      break;

    case e_rsel:		/* R  : Set bits 0-20 to zero	  */
      value += constant_value;
d509 41
a549 21
    case e_ldsel:		/* LD : Add 0x800, arithmetic shift
				   right 11 bits		  */
      value += constant_value;
      value += 0x800;
      value = (value & 0xfffff800) >> 11;
      break;

    case e_rdsel:		/* RD : Set bits 0-20 to one	   */
      value += constant_value;
      value |= 0xfffff800;
      break;

    case e_lrsel:		/* LR : L with "rounded" constant      */
    case e_nlrsel:		/* NLR : NL with "rounded" constant      */
      value = value + ((constant_value + 0x1000) & 0xffffe000);
      value = (value & 0xfffff800) >> 11;
      break;

    case e_rrsel:		/* RR : R with "rounded" constant      */
      value = value + ((constant_value + 0x1000) & 0xffffe000);
      value = (value & 0x7ff) + constant_value - ((constant_value + 0x1000) & 0xffffe000);
a555 1

d559 1
a559 1
#define get_opcode(insn)	((insn) & 0xfc000000) >> 26
d607 1
a607 1
#define FDLW    0x16
d609 1
a609 1
  
d617 1
a617 1
     unsigned long insn;
a618 1
  int fmt = -1;
d620 1
a620 1
  
d626 2
a627 2
      fmt = 11;
      break;
d643 2
a644 2
      fmt = 12;
      break;
d654 2
a655 2
      fmt = 14;
      break;
d658 1
a658 1
    case FDLW:
d662 3
a664 3
	 to describe the 10a format.  */
      fmt = -11;
      break;
d667 2
a668 2
      fmt = 10;
      break;
d672 1
a672 1
      if ((insn & 0x00008000) == 0x00008000)
d674 2
a675 2
      fmt = 17;
      break;
d678 2
a679 2
      fmt = 21;
      break;
a680 1
      fmt = 32;
d683 1
a683 1
  return fmt;
d689 2
a690 2
   
static INLINE unsigned long
d693 3
a695 3
     unsigned long insn;
     unsigned long value;
     unsigned long r_format;
a696 3
  unsigned long const_part;
  unsigned long rebuilt_part;

d699 6
a704 51
    case 11:
      {
	unsigned w1, w;

	const_part = insn & 0xffffe002;
	dis_assemble_12 (value, &w1, &w);
	rebuilt_part = (w1 << 2) | w;
	return const_part | rebuilt_part;
      }

    case 12:
      {
	unsigned w1, w;

	const_part = insn & 0xffffe002;
	dis_assemble_12 (value, &w1, &w);
	rebuilt_part = (w1 << 2) | w;
	return const_part | rebuilt_part;
      }

    case 14:
      {
	unsigned int ext;
	
	const_part = insn & 0xffffc000;
	low_sign_unext (value, 14, &ext);
	return const_part | ext;
      }

    case 17:
      {
	unsigned w1, w2, w;

	const_part = insn & 0xffe0e002;
	dis_assemble_17 (value, &w1, &w2, &w);
	rebuilt_part = (w2 << 2) | (w1 << 16) | w;
	return const_part | rebuilt_part;
      }

    case 21:
      {
	unsigned int w;

	const_part = insn & 0xffe00000;
	dis_assemble_21 (value, &w);
	return const_part | w;
      }

    case 32:
      const_part = 0;
      return value;
@


1.10
log
@        * libhppa.h (dis_assemble_16): New function.
        (pa_arch): Added pa20w element.
@
text
@d2 1
a2 1
   Copyright (C) 1990, 91, 92, 93, 94, 95, 96, 98, 1999
d38 1
a38 1
#if __GNUC__ >= 2 && __GNUC_MINOR__ >= 7
@


1.9
log
@Fix typo in last change.
@
text
@d49 2
d86 1
a86 1
enum pa_arch {pa10 = 10, pa11 = 11, pa20 = 20};
d280 24
@


1.9.2.1
log
@Correctly check GCC version.
@
text
@d2 1
a2 1
   Copyright (C) 1990, 91, 92, 93, 94, 95, 96, 98, 99, 2000
d38 1
a38 1
#if __GNUC__ > 2 || (__GNUC__ == 2 && __GNUC_MINOR__ >= 7)
@


1.8
log
@
        * libhppa.h (bfd_hppa_insn2fmt): Change to return an int.
@
text
@d586 1
a586 1
  char int = -1;
@


1.7
log
@
        * som.c (NO_PCREL_MODES): Define if the system does not define
        R_SHORT_PCREL_MODE.
        (hppa_som_gen_reloc_type): Handle both short and long pcrel branches.
        (som_write_fixups): Eliminate redundant pcrel mode relocs.  Handle
        R_LONG_PCREL_MODE and R_SHORT_PCREL_MODE
        * libhppa.h (dis_assemble_22): New function.
        (bfd_hppa_insn2fmt): Handle long branch.

        * libhppa.h (bfd_hppa_insn2fmt): Decode and handle formats found
        in PA2.0.
@
text
@d75 1
a75 1
static INLINE char bfd_hppa_insn2fmt (unsigned long)
d582 1
a582 1
static INLINE char
d586 1
a586 1
  char fmt = -1;
@


1.6
log
@        * libhppa.h (R_HPPA_LTPSEL, R_HPPA_RTPSEL): New field selectors
        (e_ltpsel, e_rtpsel): Similarly.
@
text
@d55 4
d339 12
d567 9
d608 3
d624 13
d640 2
@


1.5
log
@	* Many files: Changes to avoid gcc warnings: Add ATTRIBUTE_UNUSED
	as appropriate.  Use EMPTY_HOWTO as appropriate.  Fill in
	structure initializations.  Add casts.
	* reloc.c (EMPTY_HOWTO): Define.
	* bfd-in2.h: Rebuild.
	* coff-h8300.c (h8300_reloc16_extra_cases): Remove useless
	comparisons against 0.
	* elf32-sparc.c (elf32_sparc_merge_private_bfd_data): Change
	previous_ibfd_e_flags to unsigned long.
	* vms.h (struct vms_private_data_struct): Change section_count to
	unsigned.
	* vms-gsd.c (_bfd_vms_slurp_gsd): Change psect_idx to unsigned.
	(_bfd_vms_write_gsd): Change symnum to unsigned.
	* vms-hdr.c (_bfd_vms_write_hdr): Change symnum to unsigned.
	* vms-tir.c (etir_sta): Change psect to unsigned.
	(alloc_section): Change idx to unsigned.
	(tir_sta, tir_ctl): Change psect to unsigned.
	(_bfd_vms_write_tir): Change len and before to bfd_size_type.
	* vms.c (priv_section_count): Change to unsigned.
@
text
@d103 3
a105 1
    R_HPPA_RTSEL = 0x11
d158 3
a160 1
    e_rtsel = R_HPPA_RTSEL
@


1.4
log
@        * libhppa.h: Revert July 2, 1999 patch.
@
text
@d2 2
a3 1
   Copyright (C) 1990, 91, 92, 93, 94 , 95, 1996 Free Software Foundation, Inc.
d614 1
a614 1
     bfd *abfd;
@


1.3
log
@        * libhppa.h (HPPA_R_ARG_RELOC): Delete.
        (HPPA_R_CONSTANT, HPPA_R_ADDEND): Likewise.
@
text
@d180 15
@


1.2
log
@        * libhppa.h: Fix various formatting errors.
        (assemble_3); Rewrite using CATENATE.
        (assemble_17): Fix various bugs.
@
text
@a179 15
/* Relocations for function calls must be accompanied by parameter
   relocation bits.  These bits describe exactly where the caller has
   placed the function's arguments and where it expects to find a return
   value.

   Both ELF and SOM encode this information within the addend field
   of the call relocation.  (Note this could break very badly if one
   was to make a call like bl foo + 0x12345678).

   The high order 10 bits contain parameter relocation information,
   the low order 22 bits contain the constant offset.  */
   
#define HPPA_R_ARG_RELOC(a)	(((a) >> 22) & 0x3FF)
#define HPPA_R_CONSTANT(a)	((((int)(a)) << 10) >> 10)
#define HPPA_R_ADDEND(r,c)	(((r) << 22) + ((c) & 0x3FFFFF))
@


1.1
log
@Initial revision
@
text
@d195 1
a195 1
#define HPPA_WIDE               (0) /* PSW W-bit, need to check! FIXME */
d205 2
a206 2
#define GET_BIT( X, WHICH ) \
  GET_FIELD( X, WHICH, WHICH )
d208 1
a208 1
#define MASK( SIZE ) \
d211 2
a212 2
#define CATENATE( X, XSIZE, Y, YSIZE ) \
  (((X & MASK( XSIZE )) << YSIZE) | (Y & MASK( YSIZE )))
d214 2
a215 2
#define ELEVEN( X ) \
  CATENATE( GET_BIT( X, 10 ), 1, GET_FIELD( X, 0, 9 ), 10)
d236 1
a236 1
  return (((x & 1) << 2) | ((x & 6) >> 1)) & 7;
d247 1
a247 1
static INLINE unsigned int      /* PA 2.0 */
d258 2
a259 3
  return CATENATE( CATENATE( y,                1,
                             GET_BIT( x, 10 ), 1), 2,
                   GET_FIELD( x, 0, 9 ),           9);
d271 1
a271 1
static INLINE unsigned long     /* PA 2.0 */
d278 8
a285 12
  if( HPPA_WIDE ) {
      temp = CATENATE( CATENATE( GET_BIT( y, 13 ), 1,
                                 (GET_BIT( y, 13 )^GET_BIT( x, 0)), 1 ), 2,
                       CATENATE( (GET_BIT( y, 13 )^GET_BIT( x, 1)), 1,
                                 GET_FIELD( y, 0, 12 ), 13 ), 14 );
  }
  else { 
      temp = CATENATE( CATENATE( GET_BIT( y, 13 ), 1,
                                 GET_BIT( y, 13 ), 1 ), 2,
                       CATENATE( GET_BIT( y, 13 ), 1,
                                 GET_FIELD( y, 0, 12 ), 13 ), 14 );
  }
d287 1
a287 1
  return sign_extend( temp, 16 );
d291 1
a291 1
static INLINE unsigned long     /* PA 2.0 */
d298 5
a302 12
  if( HPPA_WIDE ) {
      temp = CATENATE( CATENATE( z,                   1,
                                 (z^GET_BIT( x, 0 )), 1),  2,
                                 
                       CATENATE( (z^GET_BIT( x, 1 )), 1,
                                 y,                   11), 12);
  }
  else {
      temp = CATENATE( CATENATE( z, 1,
                                 z, 1), 2,
                       CATENATE( z, 1,
                                 y, 11), 12);
d304 1
a304 3
  }

  return sign_extend( (temp << 2), 16 );
a311 1
  int           q;
d313 2
a314 4
  temp = CATENATE( CATENATE( z, q,
                             x, q), q,
                   CATENATE( GET_BIT( y, 1 ), 1,
                             GET_FIELD( y, 0, 9 ), 10), 11);
d344 1
a344 1
static INLINE unsigned long     /* PA 2.0 */
d350 2
a351 4
  temp = CATENATE( CATENATE( d, 1,
                             a, 5 ), 6,
                   CATENATE( b, 5,
                             ELEVEN( c ), 11 ), 16 );
d353 1
a353 1
  return sign_extend( temp, 22 );
d442 1
a442 1
    case e_fsel:		/* F  : no change                      */
d455 1
a455 1
    case e_rssel:		/* RS : Sign extend from bit 21        */
d469 1
a469 1
    case e_rsel:		/* R  : Set bits 0-20 to zero          */
d475 1
a475 1
				   right 11 bits                  */
d481 1
a481 1
    case e_rdsel:		/* RD : Set bits 0-20 to one           */
@


1.1.1.1
log
@19990502 sourceware import
@
text
@@

