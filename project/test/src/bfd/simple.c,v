head	1.35;
access;
symbols
	sid-snapshot-20180601:1.35
	sid-snapshot-20180501:1.35
	sid-snapshot-20180401:1.35
	sid-snapshot-20180301:1.35
	sid-snapshot-20180201:1.35
	sid-snapshot-20180101:1.35
	sid-snapshot-20171201:1.35
	sid-snapshot-20171101:1.35
	sid-snapshot-20171001:1.35
	sid-snapshot-20170901:1.35
	sid-snapshot-20170801:1.35
	sid-snapshot-20170701:1.35
	sid-snapshot-20170601:1.35
	sid-snapshot-20170501:1.35
	sid-snapshot-20170401:1.35
	sid-snapshot-20170301:1.35
	sid-snapshot-20170201:1.35
	sid-snapshot-20170101:1.35
	sid-snapshot-20161201:1.35
	sid-snapshot-20161101:1.35
	sid-snapshot-20160901:1.35
	sid-snapshot-20160801:1.35
	sid-snapshot-20160701:1.35
	sid-snapshot-20160601:1.35
	sid-snapshot-20160501:1.35
	sid-snapshot-20160401:1.35
	sid-snapshot-20160301:1.35
	sid-snapshot-20160201:1.35
	sid-snapshot-20160101:1.35
	sid-snapshot-20151201:1.35
	sid-snapshot-20151101:1.35
	sid-snapshot-20151001:1.35
	sid-snapshot-20150901:1.35
	sid-snapshot-20150801:1.35
	sid-snapshot-20150701:1.35
	sid-snapshot-20150601:1.35
	sid-snapshot-20150501:1.35
	sid-snapshot-20150401:1.35
	sid-snapshot-20150301:1.35
	sid-snapshot-20150201:1.35
	sid-snapshot-20150101:1.35
	sid-snapshot-20141201:1.35
	sid-snapshot-20141101:1.35
	sid-snapshot-20141001:1.35
	sid-snapshot-20140901:1.35
	sid-snapshot-20140801:1.35
	sid-snapshot-20140701:1.35
	sid-snapshot-20140601:1.35
	sid-snapshot-20140501:1.35
	sid-snapshot-20140401:1.35
	sid-snapshot-20140301:1.35
	sid-snapshot-20140201:1.35
	sid-snapshot-20140101:1.35
	sid-snapshot-20131201:1.35
	sid-snapshot-20131101:1.35
	sid-snapshot-20131001:1.35
	binutils-2_24-branch:1.35.0.14
	binutils-2_24-branchpoint:1.35
	binutils-2_21_1:1.34.2.1
	sid-snapshot-20130901:1.35
	gdb_7_6_1-2013-08-30-release:1.35
	sid-snapshot-20130801:1.35
	sid-snapshot-20130701:1.35
	sid-snapshot-20130601:1.35
	sid-snapshot-20130501:1.35
	gdb_7_6-2013-04-26-release:1.35
	sid-snapshot-20130401:1.35
	binutils-2_23_2:1.35
	gdb_7_6-branch:1.35.0.12
	gdb_7_6-2013-03-12-branchpoint:1.35
	sid-snapshot-20130301:1.35
	sid-snapshot-20130201:1.35
	sid-snapshot-20130101:1.35
	sid-snapshot-20121201:1.35
	gdb_7_5_1-2012-11-29-release:1.35
	binutils-2_23_1:1.35
	sid-snapshot-20121101:1.35
	binutils-2_23:1.35
	sid-snapshot-20121001:1.35
	sid-snapshot-20120901:1.35
	gdb_7_5-2012-08-17-release:1.35
	sid-snapshot-20120801:1.35
	binutils-2_23-branch:1.35.0.10
	binutils-2_23-branchpoint:1.35
	gdb_7_5-branch:1.35.0.8
	gdb_7_5-2012-07-18-branchpoint:1.35
	sid-snapshot-20120701:1.35
	sid-snapshot-20120601:1.35
	sid-snapshot-20120501:1.35
	binutils-2_22_branch:1.35.0.6
	gdb_7_4_1-2012-04-26-release:1.35
	sid-snapshot-20120401:1.35
	sid-snapshot-20120301:1.35
	sid-snapshot-20120201:1.35
	gdb_7_4-2012-01-24-release:1.35
	sid-snapshot-20120101:1.35
	gdb_7_4-branch:1.35.0.4
	gdb_7_4-2011-12-13-branchpoint:1.35
	sid-snapshot-20111201:1.35
	binutils-2_22:1.35
	sid-snapshot-20111101:1.35
	sid-snapshot-20111001:1.35
	binutils-2_22-branch:1.35.0.2
	binutils-2_22-branchpoint:1.35
	gdb_7_3_1-2011-09-04-release:1.34
	sid-snapshot-20110901:1.35
	sid-snapshot-20110801:1.35
	gdb_7_3-2011-07-26-release:1.34
	sid-snapshot-20110701:1.35
	sid-snapshot-20110601:1.35
	sid-snapshot-20110501:1.35
	gdb_7_3-branch:1.34.0.4
	gdb_7_3-2011-04-01-branchpoint:1.34
	sid-snapshot-20110401:1.34
	sid-snapshot-20110301:1.34
	sid-snapshot-20110201:1.34
	sid-snapshot-20110101:1.34
	binutils-2_21:1.34
	sid-snapshot-20101201:1.34
	binutils-2_21-branch:1.34.0.2
	binutils-2_21-branchpoint:1.34
	sid-snapshot-20101101:1.34
	sid-snapshot-20101001:1.33
	binutils-2_20_1:1.32.2.1
	gdb_7_2-2010-09-02-release:1.33
	sid-snapshot-20100901:1.33
	sid-snapshot-20100801:1.33
	gdb_7_2-branch:1.33.0.6
	gdb_7_2-2010-07-07-branchpoint:1.33
	sid-snapshot-20100701:1.33
	sid-snapshot-20100601:1.33
	sid-snapshot-20100501:1.33
	sid-snapshot-20100401:1.33
	gdb_7_1-2010-03-18-release:1.33
	sid-snapshot-20100301:1.33
	gdb_7_1-branch:1.33.0.4
	gdb_7_1-2010-02-18-branchpoint:1.33
	sid-snapshot-20100201:1.33
	sid-snapshot-20100101:1.33
	gdb_7_0_1-2009-12-22-release:1.33
	sid-snapshot-20091201:1.33
	sid-snapshot-20091101:1.33
	binutils-2_20:1.32.2.1
	gdb_7_0-2009-10-06-release:1.33
	sid-snapshot-20091001:1.33
	gdb_7_0-branch:1.33.0.2
	gdb_7_0-2009-09-16-branchpoint:1.33
	arc-sim-20090309:1.30
	binutils-arc-20081103-branch:1.30.0.22
	binutils-arc-20081103-branchpoint:1.30
	binutils-2_20-branch:1.32.0.2
	binutils-2_20-branchpoint:1.32
	sid-snapshot-20090901:1.31
	sid-snapshot-20090801:1.31
	msnyder-checkpoint-072509-branch:1.31.0.4
	msnyder-checkpoint-072509-branchpoint:1.31
	sid-snapshot-20090701:1.31
	dje-cgen-play1-branch:1.31.0.2
	dje-cgen-play1-branchpoint:1.31
	sid-snapshot-20090601:1.31
	sid-snapshot-20090501:1.31
	sid-snapshot-20090401:1.31
	arc-20081103-branch:1.30.0.20
	arc-20081103-branchpoint:1.30
	arc-insight_6_8-branch:1.30.0.18
	arc-insight_6_8-branchpoint:1.30
	insight_6_8-branch:1.30.0.16
	insight_6_8-branchpoint:1.30
	sid-snapshot-20090301:1.30
	binutils-2_19_1:1.30
	sid-snapshot-20090201:1.30
	sid-snapshot-20090101:1.30
	reverse-20081226-branch:1.30.0.14
	reverse-20081226-branchpoint:1.30
	sid-snapshot-20081201:1.30
	multiprocess-20081120-branch:1.30.0.12
	multiprocess-20081120-branchpoint:1.30
	sid-snapshot-20081101:1.30
	binutils-2_19:1.30
	sid-snapshot-20081001:1.30
	reverse-20080930-branch:1.30.0.10
	reverse-20080930-branchpoint:1.30
	binutils-2_19-branch:1.30.0.8
	binutils-2_19-branchpoint:1.30
	sid-snapshot-20080901:1.30
	sid-snapshot-20080801:1.30
	reverse-20080717-branch:1.30.0.6
	reverse-20080717-branchpoint:1.30
	sid-snapshot-20080701:1.30
	msnyder-reverse-20080609-branch:1.30.0.4
	msnyder-reverse-20080609-branchpoint:1.30
	drow-reverse-20070409-branch:1.25.0.32
	drow-reverse-20070409-branchpoint:1.25
	sid-snapshot-20080601:1.30
	sid-snapshot-20080501:1.30
	sid-snapshot-20080403:1.30
	sid-snapshot-20080401:1.30
	gdb_6_8-2008-03-27-release:1.30
	sid-snapshot-20080301:1.30
	gdb_6_8-branch:1.30.0.2
	gdb_6_8-2008-02-26-branchpoint:1.30
	sid-snapshot-20080201:1.29
	sid-snapshot-20080101:1.29
	sid-snapshot-20071201:1.29
	sid-snapshot-20071101:1.29
	gdb_6_7_1-2007-10-29-release:1.29
	gdb_6_7-2007-10-10-release:1.29
	sid-snapshot-20071001:1.29
	gdb_6_7-branch:1.29.0.4
	gdb_6_7-2007-09-07-branchpoint:1.29
	binutils-2_18:1.29
	binutils-2_18-branch:1.29.0.2
	binutils-2_18-branchpoint:1.29
	insight_6_6-20070208-release:1.25
	binutils-csl-coldfire-4_1-32:1.25
	binutils-csl-sourcerygxx-4_1-32:1.25
	gdb_6_6-2006-12-18-release:1.25
	binutils-csl-innovasic-fido-3_4_4-33:1.25
	binutils-csl-sourcerygxx-3_4_4-32:1.22
	binutils-csl-coldfire-4_1-30:1.25
	binutils-csl-sourcerygxx-4_1-30:1.25
	binutils-csl-coldfire-4_1-28:1.25
	binutils-csl-sourcerygxx-4_1-29:1.25
	binutils-csl-sourcerygxx-4_1-28:1.25
	gdb_6_6-branch:1.25.0.30
	gdb_6_6-2006-11-15-branchpoint:1.25
	binutils-csl-arm-2006q3-27:1.25
	binutils-csl-sourcerygxx-4_1-27:1.25
	binutils-csl-arm-2006q3-26:1.25
	binutils-csl-sourcerygxx-4_1-26:1.25
	binutils-csl-sourcerygxx-4_1-25:1.25
	binutils-csl-sourcerygxx-4_1-24:1.25
	binutils-csl-sourcerygxx-4_1-23:1.25
	insight_6_5-20061003-release:1.25
	gdb-csl-symbian-6_4_50_20060226-12:1.25
	binutils-csl-sourcerygxx-4_1-21:1.25
	binutils-csl-arm-2006q3-21:1.25
	binutils-csl-sourcerygxx-4_1-22:1.25
	binutils-csl-palmsource-arm-prelinker-1_0-1:1.25
	binutils-csl-sourcerygxx-4_1-20:1.25
	binutils-csl-arm-2006q3-19:1.25
	binutils-csl-sourcerygxx-4_1-19:1.25
	binutils-csl-sourcerygxx-4_1-18:1.25
	binutils-csl-renesas-4_1-9:1.25
	gdb-csl-sourcerygxx-3_4_4-25:1.25
	binutils-csl-sourcerygxx-3_4_4-25:1.22
	nickrob-async-20060828-mergepoint:1.25
	gdb-csl-symbian-6_4_50_20060226-11:1.25
	binutils-csl-renesas-4_1-8:1.25
	binutils-csl-renesas-4_1-7:1.25
	binutils-csl-renesas-4_1-6:1.25
	gdb-csl-sourcerygxx-4_1-17:1.25
	binutils-csl-sourcerygxx-4_1-17:1.25
	gdb-csl-20060226-branch-local-2:1.25
	gdb-csl-sourcerygxx-4_1-14:1.25
	binutils-csl-sourcerygxx-4_1-14:1.25
	binutils-csl-sourcerygxx-4_1-15:1.25
	gdb-csl-sourcerygxx-4_1-13:1.25
	binutils-csl-sourcerygxx-4_1-13:1.25
	binutils-2_17:1.25
	gdb-csl-sourcerygxx-4_1-12:1.25
	binutils-csl-sourcerygxx-4_1-12:1.25
	gdb-csl-sourcerygxx-3_4_4-21:1.25
	binutils-csl-sourcerygxx-3_4_4-21:1.25
	gdb_6_5-20060621-release:1.25
	binutils-csl-wrs-linux-3_4_4-24:1.22
	binutils-csl-wrs-linux-3_4_4-23:1.22
	gdb-csl-sourcerygxx-4_1-9:1.25
	binutils-csl-sourcerygxx-4_1-9:1.25
	gdb-csl-sourcerygxx-4_1-8:1.25
	binutils-csl-sourcerygxx-4_1-8:1.25
	gdb-csl-sourcerygxx-4_1-7:1.25
	binutils-csl-sourcerygxx-4_1-7:1.25
	gdb-csl-arm-2006q1-6:1.25
	binutils-csl-arm-2006q1-6:1.25
	gdb-csl-sourcerygxx-4_1-6:1.25
	binutils-csl-sourcerygxx-4_1-6:1.25
	binutils-csl-wrs-linux-3_4_4-22:1.22
	gdb-csl-symbian-6_4_50_20060226-10:1.25
	gdb-csl-symbian-6_4_50_20060226-9:1.25
	gdb-csl-symbian-6_4_50_20060226-8:1.25
	gdb-csl-coldfire-4_1-11:1.25
	binutils-csl-coldfire-4_1-11:1.25
	gdb-csl-sourcerygxx-3_4_4-19:1.25
	binutils-csl-sourcerygxx-3_4_4-19:1.25
	gdb-csl-coldfire-4_1-10:1.25
	gdb_6_5-branch:1.25.0.28
	gdb_6_5-2006-05-14-branchpoint:1.25
	binutils-csl-coldfire-4_1-10:1.25
	gdb-csl-sourcerygxx-4_1-5:1.25
	binutils-csl-sourcerygxx-4_1-5:1.25
	nickrob-async-20060513-branch:1.25.0.26
	nickrob-async-20060513-branchpoint:1.25
	gdb-csl-sourcerygxx-4_1-4:1.25
	binutils-csl-sourcerygxx-4_1-4:1.25
	msnyder-reverse-20060502-branch:1.25.0.24
	msnyder-reverse-20060502-branchpoint:1.25
	binutils-csl-wrs-linux-3_4_4-21:1.22
	gdb-csl-morpho-4_1-4:1.25
	binutils-csl-morpho-4_1-4:1.25
	gdb-csl-sourcerygxx-3_4_4-17:1.25
	binutils-csl-sourcerygxx-3_4_4-17:1.25
	binutils-csl-wrs-linux-3_4_4-20:1.22
	readline_5_1-import-branch:1.25.0.22
	readline_5_1-import-branchpoint:1.25
	gdb-csl-20060226-branch-merge-to-csl-symbian-1:1.25
	binutils-2_17-branch:1.25.0.20
	binutils-2_17-branchpoint:1.25
	gdb-csl-symbian-20060226-branch:1.25.0.18
	gdb-csl-symbian-20060226-branchpoint:1.25
	gdb-csl-20060226-branch-merge-to-csl-local-1:1.25
	msnyder-reverse-20060331-branch:1.25.0.16
	msnyder-reverse-20060331-branchpoint:1.25
	binutils-csl-2_17-branch:1.25.0.14
	binutils-csl-2_17-branchpoint:1.25
	gdb-csl-available-20060303-branch:1.25.0.12
	gdb-csl-available-20060303-branchpoint:1.25
	gdb-csl-20060226-branch:1.25.0.10
	gdb-csl-20060226-branchpoint:1.25
	gdb_6_4-20051202-release:1.25
	msnyder-fork-checkpoint-branch:1.25.0.8
	msnyder-fork-checkpoint-branchpoint:1.25
	gdb-csl-gxxpro-6_3-branch:1.25.0.6
	gdb-csl-gxxpro-6_3-branchpoint:1.25
	gdb_6_4-branch:1.25.0.4
	gdb_6_4-2005-11-01-branchpoint:1.25
	gdb-csl-arm-20051020-branch:1.25.0.2
	gdb-csl-arm-20051020-branchpoint:1.25
	binutils-csl-gxxpro-3_4-branch:1.22.0.8
	binutils-csl-gxxpro-3_4-branchpoint:1.22
	binutils-2_16_1:1.22
	msnyder-tracepoint-checkpoint-branch:1.24.0.2
	msnyder-tracepoint-checkpoint-branchpoint:1.24
	gdb-csl-arm-20050325-2005-q1b:1.22
	binutils-csl-arm-2005q1b:1.22
	binutils-2_16:1.22
	gdb-csl-arm-20050325-2005-q1a:1.22
	binutils-csl-arm-2005q1a:1.22
	csl-arm-20050325-branch:1.22.0.6
	csl-arm-20050325-branchpoint:1.22
	binutils-csl-arm-2005q1-branch:1.22.0.4
	binutils-csl-arm-2005q1-branchpoint:1.22
	binutils-2_16-branch:1.22.0.2
	binutils-2_16-branchpoint:1.22
	csl-arm-2004-q3d:1.19
	gdb_6_3-20041109-release:1.18
	gdb_6_3-branch:1.18.0.2
	gdb_6_3-20041019-branchpoint:1.18
	csl-arm-2004-q3:1.18
	drow_intercu-merge-20040921:1.17
	drow_intercu-merge-20040915:1.17
	jimb-gdb_6_2-e500-branch:1.17.0.6
	jimb-gdb_6_2-e500-branchpoint:1.17
	gdb_6_2-20040730-release:1.17
	gdb_6_2-branch:1.17.0.2
	gdb_6_2-2004-07-10-gmt-branchpoint:1.17
	gdb_6_1_1-20040616-release:1.14
	binutils-2_15:1.14.6.1
	binutils-2_15-branchpoint:1.14
	csl-arm-2004-q1a:1.15
	csl-arm-2004-q1:1.14
	gdb_6_1-2004-04-05-release:1.14
	drow_intercu-merge-20040402:1.14
	drow_intercu-merge-20040327:1.14
	ezannoni_pie-20040323-branch:1.14.0.14
	ezannoni_pie-20040323-branchpoint:1.14
	cagney_tramp-20040321-mergepoint:1.14
	cagney_tramp-20040309-branch:1.14.0.12
	cagney_tramp-20040309-branchpoint:1.14
	gdb_6_1-branch:1.14.0.10
	gdb_6_1-2004-03-01-gmt-branchpoint:1.14
	drow_intercu-20040221-branch:1.14.0.8
	drow_intercu-20040221-branchpoint:1.14
	binutils-2_15-branch:1.14.0.6
	cagney_bfdfile-20040213-branch:1.14.0.4
	cagney_bfdfile-20040213-branchpoint:1.14
	drow-cplus-merge-20040208:1.14
	carlton_dictionary-20040126-merge:1.14
	cagney_bigcore-20040122-branch:1.14.0.2
	cagney_bigcore-20040122-branchpoint:1.14
	drow-cplus-merge-20040113:1.14
	csl-arm-2003-q4:1.14
	drow-cplus-merge-20031224:1.14
	drow-cplus-merge-20031220:1.14
	carlton_dictionary-20031215-merge:1.14
	drow-cplus-merge-20031214:1.14
	carlton-dictionary-20031111-merge:1.13
	gdb_6_0-2003-10-04-release:1.9.6.1
	kettenis_sparc-20030918-branch:1.12.0.2
	kettenis_sparc-20030918-branchpoint:1.12
	carlton_dictionary-20030917-merge:1.11
	ezannoni_pie-20030916-branchpoint:1.11
	ezannoni_pie-20030916-branch:1.11.0.4
	cagney_x86i386-20030821-branch:1.11.0.2
	cagney_x86i386-20030821-branchpoint:1.11
	carlton_dictionary-20030805-merge:1.10
	carlton_dictionary-20030627-merge:1.9
	gdb_6_0-branch:1.9.0.6
	gdb_6_0-2003-06-23-branchpoint:1.9
	jimb-ppc64-linux-20030613-branch:1.9.0.4
	jimb-ppc64-linux-20030613-branchpoint:1.9
	binutils-2_14:1.8
	cagney_convert-20030606-branch:1.9.0.2
	cagney_convert-20030606-branchpoint:1.9
	cagney_writestrings-20030508-branch:1.8.0.14
	cagney_writestrings-20030508-branchpoint:1.8
	jimb-ppc64-linux-20030528-branch:1.8.0.12
	jimb-ppc64-linux-20030528-branchpoint:1.8
	carlton_dictionary-20030523-merge:1.8
	cagney_fileio-20030521-branch:1.8.0.10
	cagney_fileio-20030521-branchpoint:1.8
	kettenis_i386newframe-20030517-mergepoint:1.8
	jimb-ppc64-linux-20030509-branch:1.8.0.8
	jimb-ppc64-linux-20030509-branchpoint:1.8
	kettenis_i386newframe-20030504-mergepoint:1.8
	carlton_dictionary-20030430-merge:1.8
	binutils-2_14-branch:1.8.0.6
	binutils-2_14-branchpoint:1.8
	kettenis_i386newframe-20030419-branch:1.8.0.4
	kettenis_i386newframe-20030419-branchpoint:1.8
	carlton_dictionary-20030416-merge:1.8
	cagney_frameaddr-20030409-mergepoint:1.8
	kettenis_i386newframe-20030406-branch:1.8.0.2
	kettenis_i386newframe-20030406-branchpoint:1.8
	cagney_frameaddr-20030403-branchpoint:1.7
	cagney_frameaddr-20030403-branch:1.7.0.2
	cagney_framebase-20030330-mergepoint:1.5
	cagney_framebase-20030326-branch:1.5.0.14
	cagney_framebase-20030326-branchpoint:1.5
	cagney_lazyid-20030317-branch:1.5.0.12
	cagney_lazyid-20030317-branchpoint:1.5
	kettenis-i386newframe-20030316-mergepoint:1.5
	offbyone-20030313-branch:1.5.0.10
	offbyone-20030313-branchpoint:1.5
	kettenis-i386newframe-20030308-branch:1.5.0.8
	kettenis-i386newframe-20030308-branchpoint:1.5
	carlton_dictionary-20030305-merge:1.5
	cagney_offbyone-20030303-branch:1.5.0.6
	cagney_offbyone-20030303-branchpoint:1.5
	carlton_dictionary-20030207-merge:1.5
	interps-20030202-branch:1.5.0.4
	interps-20030202-branchpoint:1.5
	cagney-unwind-20030108-branch:1.5.0.2
	cagney-unwind-20030108-branchpoint:1.5
	carlton_dictionary-20021223-merge:1.5
	carlton_dictionary-20021115-merge:1.4
	kseitz_interps-20021105-merge:1.3
	kseitz_interps-20020528-branch:1.3.0.4
	kseitz_interps-20021103-merge:1.3
	drow-cplus-branch:1.3.0.2
	drow-cplus-merge-20021020:1.1
	drow-cplus-merge-20021025:1.1
	carlton_dictionary-20021025-merge:1.3
	binutils_latest_snapshot:1.35
	carlton_dictionary-branch:1.1.0.2
	carlton_dictionary-20021011-merge:1.1;
locks; strict;
comment	@ * @;


1.35
date	2011.04.20.00.11.32;	author amodra;	state Exp;
branches;
next	1.34;

1.34
date	2010.10.29.12.10.25;	author hjl;	state Exp;
branches
	1.34.2.1;
next	1.33;

1.33
date	2009.09.09.21.38.58;	author nickc;	state Exp;
branches;
next	1.32;

1.32
date	2009.09.02.07.18.37;	author amodra;	state Exp;
branches
	1.32.2.1;
next	1.31;

1.31
date	2009.03.16.00.52.37;	author amodra;	state Exp;
branches;
next	1.30;

1.30
date	2008.02.16.23.00.12;	author amodra;	state Exp;
branches;
next	1.29;

1.29
date	2007.07.10.13.49.04;	author hjl;	state Exp;
branches;
next	1.28;

1.28
date	2007.07.03.14.26.42;	author nickc;	state Exp;
branches;
next	1.27;

1.27
date	2007.05.31.15.04.52;	author amodra;	state Exp;
branches;
next	1.26;

1.26
date	2007.04.26.14.46.58;	author amodra;	state Exp;
branches;
next	1.25;

1.25
date	2005.06.03.09.52.50;	author amodra;	state Exp;
branches;
next	1.24;

1.24
date	2005.05.04.15.53.38;	author nickc;	state Exp;
branches;
next	1.23;

1.23
date	2005.05.04.07.19.35;	author nickc;	state Exp;
branches;
next	1.22;

1.22
date	2005.03.03.11.41.01;	author amodra;	state Exp;
branches;
next	1.21;

1.21
date	2005.01.31.23.13.29;	author bje;	state Exp;
branches;
next	1.20;

1.20
date	2004.12.07.04.37.56;	author drow;	state Exp;
branches;
next	1.19;

1.19
date	2004.10.21.15.28.30;	author hjl;	state Exp;
branches;
next	1.18;

1.18
date	2004.09.24.07.07.19;	author amodra;	state Exp;
branches;
next	1.17;

1.17
date	2004.06.29.14.13.44;	author amodra;	state Exp;
branches;
next	1.16;

1.16
date	2004.06.24.04.46.26;	author amodra;	state Exp;
branches;
next	1.15;

1.15
date	2004.04.16.03.29.13;	author amodra;	state Exp;
branches;
next	1.14;

1.14
date	2003.11.30.18.40.41;	author kazu;	state Exp;
branches
	1.14.6.1
	1.14.8.1;
next	1.13;

1.13
date	2003.09.23.03.59.25;	author amodra;	state Exp;
branches;
next	1.12;

1.12
date	2003.09.18.09.10.41;	author schwab;	state Exp;
branches;
next	1.11;

1.11
date	2003.08.17.07.37.33;	author hp;	state Exp;
branches;
next	1.10;

1.10
date	2003.06.29.10.06.39;	author amodra;	state Exp;
branches;
next	1.9;

1.9
date	2003.06.05.14.07.52;	author drow;	state Exp;
branches
	1.9.6.1;
next	1.8;

1.8
date	2003.04.06.08.15.58;	author nickc;	state Exp;
branches;
next	1.7;

1.7
date	2003.04.01.00.12.12;	author drow;	state Exp;
branches
	1.7.2.1;
next	1.6;

1.6
date	2003.03.31.18.13.25;	author nickc;	state Exp;
branches;
next	1.5;

1.5
date	2002.11.30.08.39.40;	author amodra;	state Exp;
branches;
next	1.4;

1.4
date	2002.11.07.14.36.31;	author nickc;	state Exp;
branches;
next	1.3;

1.3
date	2002.10.25.15.43.03;	author hp;	state Exp;
branches
	1.3.2.1
	1.3.4.1;
next	1.2;

1.2
date	2002.10.25.03.19.29;	author danglin;	state Exp;
branches;
next	1.1;

1.1
date	2002.10.11.13.53.33;	author drow;	state Exp;
branches
	1.1.2.1;
next	;

1.34.2.1
date	2011.04.27.07.17.41;	author amodra;	state Exp;
branches;
next	;

1.32.2.1
date	2009.09.09.21.40.20;	author nickc;	state Exp;
branches;
next	;

1.14.6.1
date	2004.05.07.06.32.29;	author drow;	state Exp;
branches;
next	;

1.14.8.1
date	2004.09.16.17.00.37;	author drow;	state Exp;
branches;
next	;

1.9.6.1
date	2003.09.18.09.17.27;	author schwab;	state Exp;
branches;
next	;

1.7.2.1
date	2003.04.10.21.33.45;	author cagney;	state Exp;
branches;
next	;

1.3.2.1
date	2002.10.26.17.12.00;	author drow;	state Exp;
branches;
next	1.3.2.2;

1.3.2.2
date	2003.12.14.20.26.51;	author drow;	state Exp;
branches;
next	;

1.3.4.1
date	2002.11.03.22.01.37;	author ezannoni;	state Exp;
branches;
next	;

1.1.2.1
date	2002.10.11.22.22.50;	author carlton;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2002.10.25.23.49.49;	author carlton;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2002.11.15.19.18.29;	author carlton;	state Exp;
branches;
next	1.1.2.4;

1.1.2.4
date	2002.12.23.19.37.59;	author carlton;	state Exp;
branches;
next	1.1.2.5;

1.1.2.5
date	2003.04.16.19.56.47;	author carlton;	state Exp;
branches;
next	1.1.2.6;

1.1.2.6
date	2003.06.27.21.49.30;	author carlton;	state Exp;
branches;
next	1.1.2.7;

1.1.2.7
date	2003.08.05.17.12.55;	author carlton;	state Exp;
branches;
next	1.1.2.8;

1.1.2.8
date	2003.09.17.21.27.57;	author carlton;	state Exp;
branches;
next	1.1.2.9;

1.1.2.9
date	2003.11.11.23.50.28;	author carlton;	state Exp;
branches;
next	1.1.2.10;

1.1.2.10
date	2003.12.15.23.59.52;	author carlton;	state Exp;
branches;
next	;


desc
@@


1.35
log
@	PR ld/12365
include/
	* bfdlink.h (struct bfd_link_callbacks): Modify multiple_definition
	and multiple_common parameters to pass in a bfd_link_hash_entry
	pointer rather than name,bfd etc. found in the hash entry.
bfd/
	* elflink.c (_bfd_elf_merge_symbol): Update multiple_common calls.
	* linker.c (_bfd_generic_link_add_one_symbol): Likewise.  Call
	multiple_definition regardless of allow_multiple_definition.
	* simple.c (simple_dummy_multiple_definition): Update.
	* xcofflink.c (xcoff_link_add_symbols): Update multiple_definition
	calls.
ld/
	* ldmain.c (multiple_definition): Take a bfd_link_hash_entry
	pointer arg rather than "name", "obfd", "osec", "oval".  Add code
	removed from linker.c.  Hack around xcofflink.c oddity in
	passing NULL nbfd.
	(multiple_common): Similarly.
	* plugin.c (orig_allow_multiple_defs): Delete.
	(plugin_call_all_symbols_read): Don't twiddle allow_multiple_definition.
	(plugin_multiple_definition): Update.
@
text
@/* simple.c -- BFD simple client routines
   Copyright 2002, 2003, 2004, 2005, 2007, 2008, 2009, 2010, 2011
   Free Software Foundation, Inc.
   Contributed by MontaVista Software, Inc.

   This file is part of BFD, the Binary File Descriptor library.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,
   MA 02110-1301, USA.  */

#include "sysdep.h"
#include "bfd.h"
#include "libbfd.h"
#include "bfdlink.h"

static bfd_boolean
simple_dummy_warning (struct bfd_link_info *link_info ATTRIBUTE_UNUSED,
		      const char *warning ATTRIBUTE_UNUSED,
		      const char *symbol ATTRIBUTE_UNUSED,
		      bfd *abfd ATTRIBUTE_UNUSED,
		      asection *section ATTRIBUTE_UNUSED,
		      bfd_vma address ATTRIBUTE_UNUSED)
{
  return TRUE;
}

static bfd_boolean
simple_dummy_undefined_symbol (struct bfd_link_info *link_info ATTRIBUTE_UNUSED,
			       const char *name ATTRIBUTE_UNUSED,
			       bfd *abfd ATTRIBUTE_UNUSED,
			       asection *section ATTRIBUTE_UNUSED,
			       bfd_vma address ATTRIBUTE_UNUSED,
			       bfd_boolean fatal ATTRIBUTE_UNUSED)
{
  return TRUE;
}

static bfd_boolean
simple_dummy_reloc_overflow (struct bfd_link_info *link_info ATTRIBUTE_UNUSED,
			     struct bfd_link_hash_entry *entry ATTRIBUTE_UNUSED,
			     const char *name ATTRIBUTE_UNUSED,
			     const char *reloc_name ATTRIBUTE_UNUSED,
			     bfd_vma addend ATTRIBUTE_UNUSED,
			     bfd *abfd ATTRIBUTE_UNUSED,
			     asection *section ATTRIBUTE_UNUSED,
			     bfd_vma address ATTRIBUTE_UNUSED)
{
  return TRUE;
}

static bfd_boolean
simple_dummy_reloc_dangerous (struct bfd_link_info *link_info ATTRIBUTE_UNUSED,
			      const char *message ATTRIBUTE_UNUSED,
			      bfd *abfd ATTRIBUTE_UNUSED,
			      asection *section ATTRIBUTE_UNUSED,
			      bfd_vma address ATTRIBUTE_UNUSED)
{
  return TRUE;
}

static bfd_boolean
simple_dummy_unattached_reloc (struct bfd_link_info *link_info ATTRIBUTE_UNUSED,
			       const char *name ATTRIBUTE_UNUSED,
			       bfd *abfd ATTRIBUTE_UNUSED,
			       asection *section ATTRIBUTE_UNUSED,
			       bfd_vma address ATTRIBUTE_UNUSED)
{
  return TRUE;
}

static bfd_boolean
simple_dummy_multiple_definition (struct bfd_link_info *link_info ATTRIBUTE_UNUSED,
				  struct bfd_link_hash_entry *h ATTRIBUTE_UNUSED,
				  bfd *nbfd ATTRIBUTE_UNUSED,
				  asection *nsec ATTRIBUTE_UNUSED,
				  bfd_vma nval ATTRIBUTE_UNUSED)
{
  return TRUE;
}

static void
simple_dummy_einfo (const char *fmt ATTRIBUTE_UNUSED, ...)
{
}

struct saved_output_info
{
  bfd_vma offset;
  asection *section;
};

static void
simple_save_output_info (bfd *abfd ATTRIBUTE_UNUSED,
			 asection *section,
			 void *ptr)
{
  struct saved_output_info *output_info = (struct saved_output_info *) ptr;
  output_info[section->index].offset = section->output_offset;
  output_info[section->index].section = section->output_section;
  if ((section->flags & SEC_DEBUGGING) != 0
      || section->output_section == NULL)
    {
      section->output_offset = 0;
      section->output_section = section;
    }
}

static void
simple_restore_output_info (bfd *abfd ATTRIBUTE_UNUSED,
			    asection *section,
			    void *ptr)
{
  struct saved_output_info *output_info = (struct saved_output_info *) ptr;
  section->output_offset = output_info[section->index].offset;
  section->output_section = output_info[section->index].section;
}

/*
FUNCTION
	bfd_simple_relocate_secton

SYNOPSIS
	bfd_byte *bfd_simple_get_relocated_section_contents
	  (bfd *abfd, asection *sec, bfd_byte *outbuf, asymbol **symbol_table);

DESCRIPTION
	Returns the relocated contents of section @@var{sec}.  The symbols in
	@@var{symbol_table} will be used, or the symbols from @@var{abfd} if
	@@var{symbol_table} is NULL.  The output offsets for debug sections will
	be temporarily reset to 0.  The result will be stored at @@var{outbuf}
	or allocated with @@code{bfd_malloc} if @@var{outbuf} is @@code{NULL}.

	Returns @@code{NULL} on a fatal error; ignores errors applying
	particular relocations.
*/

bfd_byte *
bfd_simple_get_relocated_section_contents (bfd *abfd,
					   asection *sec,
					   bfd_byte *outbuf,
					   asymbol **symbol_table)
{
  struct bfd_link_info link_info;
  struct bfd_link_order link_order;
  struct bfd_link_callbacks callbacks;
  bfd_byte *contents, *data;
  int storage_needed;
  void *saved_offsets;

  /* Don't apply relocation on executable and shared library.  See
     PR 4756.  */
  if ((abfd->flags & (HAS_RELOC | EXEC_P | DYNAMIC)) != HAS_RELOC
      || ! (sec->flags & SEC_RELOC))
    {
      contents = outbuf;
      if (!bfd_get_full_section_contents (abfd, sec, &contents))
	return NULL;
      return contents;
    }

  /* In order to use bfd_get_relocated_section_contents, we need
     to forge some data structures that it expects.  */

  /* Fill in the bare minimum number of fields for our purposes.  */
  memset (&link_info, 0, sizeof (link_info));
  link_info.output_bfd = abfd;
  link_info.input_bfds = abfd;
  link_info.input_bfds_tail = &abfd->link_next;

  link_info.hash = _bfd_generic_link_hash_table_create (abfd);
  link_info.callbacks = &callbacks;
  callbacks.warning = simple_dummy_warning;
  callbacks.undefined_symbol = simple_dummy_undefined_symbol;
  callbacks.reloc_overflow = simple_dummy_reloc_overflow;
  callbacks.reloc_dangerous = simple_dummy_reloc_dangerous;
  callbacks.unattached_reloc = simple_dummy_unattached_reloc;
  callbacks.multiple_definition = simple_dummy_multiple_definition;
  callbacks.einfo = simple_dummy_einfo;

  memset (&link_order, 0, sizeof (link_order));
  link_order.next = NULL;
  link_order.type = bfd_indirect_link_order;
  link_order.offset = 0;
  link_order.size = sec->size;
  link_order.u.indirect.section = sec;

  data = NULL;
  if (outbuf == NULL)
    {
      bfd_size_type amt = sec->rawsize > sec->size ? sec->rawsize : sec->size;
      data = (bfd_byte *) bfd_malloc (amt);
      if (data == NULL)
	return NULL;
      outbuf = data;
    }

  /* The sections in ABFD may already have output sections and offsets set.
     Because this function is primarily for debug sections, and GCC uses the
     knowledge that debug sections will generally have VMA 0 when emitting
     relocations between DWARF-2 sections (which are supposed to be
     section-relative offsets anyway), we need to reset the output offsets
     to zero.  We also need to arrange for section->output_section->vma plus
     section->output_offset to equal section->vma, which we do by setting
     section->output_section to point back to section.  Save the original
     output offset and output section to restore later.  */
  saved_offsets = malloc (sizeof (struct saved_output_info)
			  * abfd->section_count);
  if (saved_offsets == NULL)
    {
      if (data)
	free (data);
      return NULL;
    }
  bfd_map_over_sections (abfd, simple_save_output_info, saved_offsets);

  if (symbol_table == NULL)
    {
      _bfd_generic_link_add_symbols (abfd, &link_info);

      storage_needed = bfd_get_symtab_upper_bound (abfd);
      symbol_table = (asymbol **) bfd_malloc (storage_needed);
      bfd_canonicalize_symtab (abfd, symbol_table);
    }
  else
    storage_needed = 0;

  contents = bfd_get_relocated_section_contents (abfd,
						 &link_info,
						 &link_order,
						 outbuf,
						 0,
						 symbol_table);
  if (contents == NULL && data != NULL)
    free (data);

  bfd_map_over_sections (abfd, simple_restore_output_info, saved_offsets);
  free (saved_offsets);

  _bfd_generic_link_hash_table_free (link_info.hash);
  return contents;
}
@


1.34
log
@Add compressed debug section support to binutils and ld.

bfd/

2010-10-29  H.J. Lu  <hongjiu.lu@@intel.com>
	    Cary Coutant  <ccoutant@@google.com>

	* archive.c (bfd_openr_next_archived_file): Copy BFD_COMPRESS
	and BFD_DECOMPRESS.

	* bfd.c (BFD_COMPRESS): New.
	(BFD_DECOMPRESS): Likewise.
	(BFD_FLAGS_SAVED): Likewise.
	(bfd_preserve_save): Replace BFD_IN_MEMORY with BFD_FLAGS_SAVED.

	* compress.c (bfd_uncompress_section_contents): Removed.
	(get_uncompressed_size): New.
	(decompress_contents): Likewise.
	(bfd_compress_section_contents): Likewise.
	(bfd_get_full_section_contents): Likewise.
	(bfd_is_section_compressed): Likewise.
	(bfd_init_section_decompress_status): Likewise.
	(bfd_init_section_compress_status): Likewise.

	* dwarf2.c (dwarf_debug_sections): New.
	(dwarf_debug_section_enum): Likewise.
	(read_section): Remove section_name and compressed_section_name.
	Add dwarf_debug_section_enum.  Try compressed debug section.
	(read_indirect_string): Updated.
	(read_abbrevs): Likewise.
	(decode_line_info): Likewise.
	(read_debug_ranges): Likewise.
	(find_line): Updated.

	* ecoff.c (bfd_debug_section): Add compress_status and
	compressed_size.

	* elf.c (_bfd_elf_make_section_from_shdr): Call
	bfd_is_section_compressed to check if a DWARF debug section is
	compressed.  Call bfd_init_section_compress_status or
	bfd_init_section_decompress_status if needed.

	* elflink.c (elf_link_input_bfd): Replace bfd_get_section_contents
	with bfd_get_full_section_contents.
	* merge.c (_bfd_add_merge_section): Likewise.
	* reloc.c (bfd_generic_get_relocated_section_contents): Likewise.
	* simple.c (bfd_simple_get_relocated_section_contents): Likewise.

	* elfxx-target.h (TARGET_BIG_SYM): Allow BFD_COMPRESS and
	BFD_DECOMPRESS.
	(TARGET_LITTLE_SYM): Likewise.

	* libbfd-in.h (dwarf_debug_section): New.
	(dwarf_debug_sections): Likewise.

	* libbfd.c (_bfd_generic_get_section_contents): Issue an error
	when getting contents on compressed/decompressed section.

	* section.c (COMPRESS_SECTION_NONE): New.
	(COMPRESS_SECTION_DONE): Likewise.
	(DECOMPRESS_SECTION_SIZED): Likewise.
	(BFD_FAKE_SECTION): Add compress_status and compressed_size.
	(bfd_malloc_and_get_section): Replace bfd_get_section_contents
	with bfd_get_full_section_contents.

	* bfd-in2.h: Regenerated.
	* libbfd.h: Likewise.

binutils/

2010-10-29  H.J. Lu  <hongjiu.lu@@intel.com>

	* addr2line.c (process_file): Set BFD_DECOMPRESS.

	* objcopy.c (do_debug_sections): New.
	(OPTION_COMPRESS_DEBUG_SECTIONS): New.
	(OPTION_DECOMPRESS_DEBUG_SECTIONS): Likewise.
	(copy_options): Add OPTION_COMPRESS_DEBUG_SECTIONS and
	OPTION_DECOMPRESS_DEBUG_SECTIONS.
	(copy_usage): Add --compress-debug-sections and
	--decompress-debug-sections.
	(copy_file): Set BFD_COMPRESS or BFD_DECOMPRESS.
	(copy_section): Replace bfd_get_section_contents with
	bfd_get_full_section_contents.
	(copy_main): Handle OPTION_COMPRESS_DEBUG_SECTIONS and
	OPTION_DECOMPRESS_DEBUG_SECTIONS.  Check do_debug_sections to
	rename DWARF debug sections.

	* objdump.c (load_specific_debug_section): Replace
	bfd_get_section_contents with bfd_get_full_section_contents.
	Remove bfd_uncompress_section_contents.
	(dump_section): Replace bfd_get_section_contents with
	bfd_get_full_section_contents.
	(display_file): Set BFD_DECOMPRESS if needed.

	* readelf.c (uncompress_section_contents): Set buffer to NULL
	to indiate decompression failure.
	(load_specific_debug_section): Always call
	uncompress_section_contents.

	* doc/binutils.texi: Document --compress-debug-sections and
	--decompress-debug-sections.

binutils/testsuite/

2010-10-29  H.J. Lu  <hongjiu.lu@@intel.com>

	* binutils-all/compress.exp: New.
	* binutils-all/dw2-1.S: Likewise.
	* binutils-all/dw2-2.S: Likewise.
	* binutils-all/libdw2-compressed.out: Likewise.
	* binutils-all/libdw2.out: Likewise.

gas/

2010-10-29  H.J. Lu  <hongjiu.lu@@intel.com>

	* write.c (compress_debug): Optimize section flags check.

gas/testsuite/

2010-10-29  H.J. Lu  <hongjiu.lu@@intel.com>

	* elf/dwarf2-1.s: Replace .zdebug_abbrev section with
	.debug_abbrev section.
	* elf/dwarf2-2.3: Likewise.

	* elf/dwarf2-1.d: Pass --compress-debug-sections to assembler.
	Updated.
	* elf/dwarf2-2.d: Likewise.

	* gas/i386/i386.exp: Remove xfail on dw2-compress-2 and
	x86-64-dw2-compress-2.

ld/

2010-10-29  H.J. Lu  <hongjiu.lu@@intel.com>

	* ldfile.c (ldfile_try_open_bfd): Set BFD_DECOMPRESS after
	bfd_openr returns.
	* emultempl/elf32.em (gld${EMULATION_NAME}_try_needed): Likewise.

	* scripttempl/elf.sc: Include compressed DWARF debug sections.

ld/testsuite/

2010-10-29  H.J. Lu  <hongjiu.lu@@intel.com>

	* ld-elf/compress.exp: New.
	* ld-elf/compress1.s: Likewise.
	* ld-elf/compress1a.d: Likewise.
	* ld-elf/compress1b.d: Likewise.
	* ld-elf/compress1c.d: Likewise.
@
text
@d2 1
a2 1
   Copyright 2002, 2003, 2004, 2005, 2007, 2008, 2009
d85 1
a85 4
				  const char *name ATTRIBUTE_UNUSED,
				  bfd *obfd ATTRIBUTE_UNUSED,
				  asection *osec ATTRIBUTE_UNUSED,
				  bfd_vma oval ATTRIBUTE_UNUSED,
@


1.34.2.1
log
@	PR ld/12696
	PR ld/12672
	PR ld/12507
	PR ld/12365
	PR 10549
Backport fixes for these PRs.
@
text
@d85 4
a88 1
				  struct bfd_link_hash_entry *h ATTRIBUTE_UNUSED,
@


1.33
log
@        Updated soruces in bfd/* to compile cleanly with -Wc++-compat.

        * bfd/aoutx.h: Add casts.
        * bfd/archive.c: Add casts.
        * bfd/archive64.c: Add casts.
        * bfd/archures.c: Add casts.
        * bfd/bfd-in2.h: Regenerated.
        * bfd/bfd.c: Add casts. (enum bfd_direction): Move out to top
        level.
        * bfd/bfdio.c: Add casts.
        * bfd/binary.c: Add casts.
        * bfd/cache.c (cache_bseek,cache_bread_1,cache_bwrite): Updated
        parameter to use enum value instead of int.
        * bfd/coffcode.h: Add casts.
        * bfd/coffgen.c: Add casts.
        * bfd/cofflink.c: Add casts.
        * bfd/compress.c: Add casts.
        * bfd/dwarf1.c: Add casts.
        * bfd/dwarf2.c: Add casts. (struct dwarf2_debug): Rename member
        bfd to bfd_ptr. Update code to use new name.
        * bfd/elf-attrs.c: Add casts.
        * bfd/elf-bfd.h (elf_link_virtual_table_entry): Gives name to
        anonymous struct. (union gotplt_union, struct
        elf_link_virtual_table_entry): Move to top level.
        * bfd/elf-eh-frame.c: Add casts.
        * bfd/elf-strtab.c: Add casts.
        * bfd/elf.c: Add casts. (_bfd_elm_make_Section_from_phdr): Change
        argument name from typename to type_name.
        * bfd/elf32-i386.c: Add casts.
        * bfd/elf64-x86-64.c: Add casts.
        * bfd/elfcode.h: Add casts.
        * bfd/elfcore.h: Add casts.
        * bfd/elflink.c: Add casts.
        * bfd/format.c: Add casts.
        * bfd/hash.c: Add casts.
        * bfd/ihex.c: Add casts.
        * bfd/libaout.h (enum aout_subformat, enum aout_magic): Move to
        top level.
        * bfd/libbfd.c: Add casts.
        * bfd/linker.c: Add casts.
        * bfd/merge.c: Add casts.
        * bfd/opncls.c: Add casts.
        * bfd/peXXigen.c: Add casts.
        * bfd/peicode.h: Add casts.
        * bfd/reloc.c: Add casts.
        * bfd/section.c: Add casts.
        * bfd/simple.c: Add casts.
        * bfd/srec.c: Add casts.
        * bfd/stabs.c: Add casts.
        * bfd/syms.c: Add casts.
        * bfd/targets.c: Add casts.
        * bfd/tekhex.c: Add casts.
        * bfd/verilog.c: Add casts.
        * include/bfdlink.h (struct bfd_link_hash_common_entry): Move to
        top level.
@
text
@d170 3
a172 11
      bfd_size_type amt = sec->rawsize > sec->size ? sec->rawsize : sec->size;
      bfd_size_type size = sec->rawsize ? sec->rawsize : sec->size;

      if (outbuf == NULL)
	contents = (bfd_byte *) bfd_malloc (amt);
      else
	contents = outbuf;

      if (contents)
	bfd_get_section_contents (abfd, sec, contents, 0, size);

@


1.32
log
@update copyright dates
@
text
@d112 1
a112 1
  struct saved_output_info *output_info = ptr;
d128 1
a128 1
  struct saved_output_info *output_info = ptr;
d174 1
a174 1
	contents = bfd_malloc (amt);
d214 1
a214 1
      data = bfd_malloc (amt);
d244 1
a244 1
      symbol_table = bfd_malloc (storage_needed);
@


1.32.2.1
log
@        Updated soruces in bfd/* to compile cleanly with -Wc++-compat.

        * bfd/aoutx.h: Add casts.
        * bfd/archive.c: Add casts.
        * bfd/archive64.c: Add casts.
        * bfd/archures.c: Add casts.
        * bfd/bfd-in2.h: Regenerated.
        * bfd/bfd.c: Add casts. (enum bfd_direction): Move out to top
        level.
        * bfd/bfdio.c: Add casts.
        * bfd/binary.c: Add casts.
        * bfd/cache.c (cache_bseek,cache_bread_1,cache_bwrite): Updated
        parameter to use enum value instead of int.
        * bfd/coffcode.h: Add casts.
        * bfd/coffgen.c: Add casts.
        * bfd/cofflink.c: Add casts.
        * bfd/compress.c: Add casts.
        * bfd/dwarf1.c: Add casts.
        * bfd/dwarf2.c: Add casts. (struct dwarf2_debug): Rename member
        bfd to bfd_ptr. Update code to use new name.
        * bfd/elf-attrs.c: Add casts.
        * bfd/elf-bfd.h (elf_link_virtual_table_entry): Gives name to
        anonymous struct. (union gotplt_union, struct
        elf_link_virtual_table_entry): Move to top level.
        * bfd/elf-eh-frame.c: Add casts.
        * bfd/elf-strtab.c: Add casts.
        * bfd/elf.c: Add casts. (_bfd_elm_make_Section_from_phdr): Change
        argument name from typename to type_name.
        * bfd/elf32-i386.c: Add casts.
        * bfd/elf64-x86-64.c: Add casts.
        * bfd/elfcode.h: Add casts.
        * bfd/elfcore.h: Add casts.
        * bfd/elflink.c: Add casts.
        * bfd/format.c: Add casts.
        * bfd/hash.c: Add casts.
        * bfd/ihex.c: Add casts.
        * bfd/libaout.h (enum aout_subformat, enum aout_magic): Move to
        top level.
        * bfd/libbfd.c: Add casts.
        * bfd/linker.c: Add casts.
        * bfd/merge.c: Add casts.
        * bfd/opncls.c: Add casts.
        * bfd/peXXigen.c: Add casts.
        * bfd/peicode.h: Add casts.
        * bfd/reloc.c: Add casts.
        * bfd/section.c: Add casts.
        * bfd/simple.c: Add casts.
        * bfd/srec.c: Add casts.
        * bfd/stabs.c: Add casts.
        * bfd/syms.c: Add casts.
        * bfd/targets.c: Add casts.
        * bfd/tekhex.c: Add casts.
        * bfd/verilog.c: Add casts.
        * include/bfdlink.h (struct bfd_link_hash_common_entry): Move to
        top level.
@
text
@d112 1
a112 1
  struct saved_output_info *output_info = (struct saved_output_info *) ptr;
d128 1
a128 1
  struct saved_output_info *output_info = (struct saved_output_info *) ptr;
d174 1
a174 1
	contents = (bfd_byte *) bfd_malloc (amt);
d214 1
a214 1
      data = (bfd_byte *) bfd_malloc (amt);
d244 1
a244 1
      symbol_table = (asymbol **) bfd_malloc (storage_needed);
@


1.31
log
@	* simple.c (bfd_simple_get_relocated_section_contents): Use larger
	of rawsize and size for buffer.
@
text
@d2 1
a2 1
   Copyright 2002, 2003, 2004, 2005, 2007, 2008
@


1.30
log
@	* simple.c (bfd_simple_get_relocated_section_contents): Set
	link_info.output_bfd.
@
text
@d213 2
a214 1
      data = bfd_malloc (sec->size);
@


1.29
log
@2007-07-10  H.J. Lu  <hongjiu.lu@@intel.com>

	PR binutils/4756
	* simple.c (bfd_simple_get_relocated_section_content): Don't
	apply relocation on executable and shared library.
@
text
@d2 1
a2 1
   Copyright 2002, 2003, 2004, 2005, 2007
d189 1
@


1.28
log
@Switch sources over to use the GPL version 3
@
text
@d165 4
a168 1
  if (! (sec->flags & SEC_RELOC))
@


1.27
log
@include/
	* bfdlink.h (struct bfd_link_info): Add input_bfds_tail.
bfd/
	* simple.c (bfd_simple_get_relocated_section_content): Init
	input_bfds_tail.
ld/
	* ldlang.c (ldlang_add_file): Use input_bfds_tail.
	* ldmain.c (main): Init input_bfds_tail.  Sort link_info
	initialization.
@
text
@d10 1
a10 1
   the Free Software Foundation; either version 2 of the License, or
d20 2
a21 1
   Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA 02110-1301, USA.  */
@


1.26
log
@
bfd/
	Many files: Include sysdep.h before bfd.h.
	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.
binutils/
	* bucumm.h: Split off host dependencies to..
	* sysdep.h: ..here.
	Many files: Include sysdep.h.  Remove duplicate headers and reorder.
	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.
ld/
	Many files: Include sysdep.h first.  Remove duplicate headers.
	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.
opcodes/
	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.
	* ns32k-dis.c: Include sysdep.h first.
@
text
@d186 1
@


1.25
log
@include/
	* bfdlink.h (struct bfd_link_callbacks): Add einfo.
bfd/
	* configure.in: Bump version
	* configure: Regenerate.
	* elflink.c (elf_link_input_bfd): Use einfo linker callback to print
	discarded section sym refs and kill linker output.
	* simple.c (simple_dummy_einfo): New function.
	(bfd_simple_get_relocated_section_contents): Init callbacks.einfo.
ld/
	* ldmain.c (link_callbacks): Add einfo.
	(add_archive_element): Use passed info, not link_info.
	(constructor_callback): Likewise.
	(reloc_overflow): Don't handle null bfd specially.
	(reloc_dangerous, unattached_reloc): Likewise.
	* ldmisc.c (vfinfo <B>): Print "ld generated" for null bfd.
	(vfinfo <C, D, G>): Handle null bfd.  Wrap comments.
@
text
@d2 1
a2 1
   Copyright 2002, 2003, 2004, 2005
d22 1
a23 1
#include "sysdep.h"
@


1.24
log
@Update the address and phone number of the FSF organization in the GPL notices
@
text
@d95 5
d195 1
@


1.23
log
@Update the FSF address in the copyright/GPL notice
@
text
@d20 1
a20 1
   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02110-1301, USA.  */
@


1.22
log
@update copyright dates
@
text
@d20 1
a20 1
   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
@


1.21
log
@	* aout-arm.c, aout-target.h, aoutx.h, archive.c, armnetbsd.c,
	bfd-in.h, bfdio.c, coff-alpha.c, coff-arm.c, coff-h8300.c,
	coff-i860.c, coff-mcore.c, coff-or32.c, coff-ppc.c, coff-sh.c,
	coff-sparc.c, coffcode.h, coffgen.c, cofflink.c, cpu-cris.c,
	cpu-h8500.c, cpu-ns32k.c, ecoff.c, ecofflink.c, elf.c,
	elf32-dlx.c, elf32-fr30.c, elf32-frv.c, elf32-hppa.c,
	elf32-i860.c, elf32-ip2k.c, elf32-m32r.c, elf32-sh.c,
	elf32-v850.c, elf64-mips.c, elf64-sparc.c, elflink.c,
	i386aout.c, i386msdos.c, i386os9k.c, ieee.c, mach-o.c,
	nlm32-sparc.c, oasys.c, opncls.c, pdp11.c, pe-mips.c, peXXigen.c,
	pef.c, peicode.h, reloc.c, riscix.c, section.c, simple.c, som.c,
	sparclynx.c, targets.c, vms-misc.c, vms-tir.c, xsym.c, doc/chew.c,
	hosts/delta68.h, hosts/vaxbsd.h: Remove #if 0'd code
	throughout. Similarly, collapse #if 1'd code.
@
text
@d2 1
a2 1
   Copyright 2002, 2003, 2004
@


1.20
log
@	Suggested by Fergal Daly <fergal@@esatclear.ie>:
	* simple.c (simple_dummy_multiple_definition): New function.
	(bfd_simple_get_relocated_section_contents): Use it.
@
text
@a245 14
#if 0
  /* NOTE: cagney/2003-04-05: This free, which was introduced on
     2003-03-31 to stop a memory leak, caused a memory corruption
     between GDB and BFD.  The problem, which is stabs specific, can
     be identified by a bunch of failures in relocate.exp vis:

       gdb.base/relocate.exp: get address of static_bar

     Details of the problem can be found on the binutils@@ mailing
     list, see the discussion thread: "gdb.mi/mi-cli.exp failures".  */
  if (storage_needed != 0)
    free (symbol_table);
#endif

a249 1

@


1.19
log
@bfd/

2004-10-21  H.J. Lu  <hongjiu.lu@@intel.com>

	PR 463
	* aoutx.h (aout_link_input_section_std): Pass proper hash entry
	to linker reloc_overflow callback.
	(aout_link_input_section_ext): Likewise.
	(aout_link_reloc_link_order): Likewise.
	* coff-a29k.c (coff_a29k_relocate_section): Likewise.
	* coff-alpha.c (alpha_ecoff_get_relocated_section_contents):
	Likewise.
	(alpha_relocate_section): Likewise.
	* coff-arm.c (coff_arm_relocate_section): Likewise.
	* coff-h8300.c (h8300_reloc16_extra_cases): Likewise.
	* coff-h8500.c (extra_case): Likewise.
	* coff-i960.c (coff_i960_relocate_section): Likewise.
	* coff-mcore.c (coff_mcore_relocate_section): Likewise.
	* coff-mips.c (mips_relocate_section): Likewise.
	* coff-or32.c (coff_or32_relocate_section): Likewise.
	* coff-ppc.c (coff_ppc_relocate_section): Likewise.
	* coff-rs6000.c (xcoff_ppc_relocate_section): Likewise.
	* coff-sh.c (sh_relocate_section): Likewise.
	* coff-tic80.c (coff_tic80_relocate_section): Likewise.
	* coff-w65.c (w65_reloc16_extra_cases): Likewise.
	* coff-z8k.c (extra_case): Likewise.
	* coff64-rs6000.c (xcoff64_ppc_relocate_section): Likewise.
	* cofflink.c (_bfd_coff_reloc_link_order): Likewise.
	(_bfd_coff_generic_relocate_section): Likewise.
	* ecoff.c (ecoff_reloc_link_order): Likewise.
	* elf-hppa.h (elf_hppa_relocate_section): Likewise.
	* elf-m10200.c (mn10200_elf_relocate_section): Likewise.
	* elf-m10300.c (mn10300_elf_relocate_section): Likewise.
	* elf32-arm.h (elf32_arm_relocate_section): Likewise.
	* elf32-avr.c (elf32_avr_relocate_section): Likewise.
	* elf32-cr16c.c (elf32_cr16c_relocate_section): Likewise.
	* elf32-cris.c (cris_elf_relocate_section): Likewise.
	* elf32-crx.c (elf32_crx_relocate_section): Likewise.
	* elf32-d10v.c (elf32_d10v_relocate_section): Likewise.
	* elf32-fr30.c (fr30_elf_relocate_section): Likewise.
	* elf32-frv.c (elf32_frv_relocate_section): Likewise.
	* elf32-h8300.c (elf32_h8_relocate_section): Likewise.
	* elf32-hppa.c (elf32_hppa_relocate_section): Likewise.
	* elf32-i370.c (i370_elf_relocate_section): Likewise.
	* elf32-i386.c (elf_i386_relocate_section): Likewise.
	* elf32-i860.c (elf32_i860_relocate_section): Likewise.
	* elf32-ip2k.c (ip2k_elf_relocate_section): Likewise.
	* elf32-iq2000.c (iq2000_elf_relocate_section): Likewise.
	* elf32-m32r.c (m32r_elf_relocate_section): Likewise.
	* elf32-m68hc1x.c (elf32_m68hc11_relocate_section): Likewise.
	* elf32-m68k.c (elf_m68k_relocate_section): Likewise.
	* elf32-mcore.c (mcore_elf_relocate_section): Likewise.
	* elf32-msp430.c (elf32_msp430_relocate_section): Likewise.
	* elf32-openrisc.c (openrisc_elf_relocate_section): Likewise.
	* elf32-ppc.c (ppc_elf_relocate_section): Likewise.
	* elf32-s390.c (elf_s390_relocate_section): Likewise.
	* elf32-sh.c (sh_elf_relocate_section): Likewise.
	* elf32-sparc.c (elf32_sparc_relocate_section): Likewise.
	* elf32-v850.c (v850_elf_relocate_section): Likewise.
	* elf32-vax.c (elf_vax_relocate_section): Likewise.
	* elf32-xstormy16.c (xstormy16_elf_relocate_section): Likewise.
	* elf64-alpha.c (elf64_alpha_relocate_section): Likewise.
	* elf64-mmix.c (mmix_elf_relocate_section): Likewise.
	* elf64-ppc.c (ppc64_elf_relocate_section): Likewise.
	* elf64-s390.c (elf_s390_relocate_section): Likewise.
	* elf64-sh64.c (sh_elf64_relocate_section): Likewise.
	* elf64-sparc.c (sparc64_elf_relocate_section): Likewise.
	* elf64-x86-64.c (elf64_x86_64_relocate_section): Likewise.
	* elflink.c (elf_reloc_link_order): Likewise.
	* elfxx-ia64.c (elfNN_ia64_relocate_section): Likewise.
	* elfxx-mips.c (_bfd_mips_elf_relocate_section): Likewise.
	(_bfd_elf_mips_get_relocated_section_contents): Likewise.
	* linker.c (_bfd_generic_reloc_link_order): Likewise.
	* pdp11.c (pdp11_aout_link_input_section): Likewise.
	(aout_link_reloc_link_order): Likewise.
	* reloc.c (bfd_generic_get_relocated_section_contents):
	Likewise.
	* xcofflink.c (xcoff_reloc_link_order): Likewise.
	* simple.c (simple_dummy_reloc_overflow): Updated.

include/

2004-10-21  H.J. Lu  <hongjiu.lu@@intel.com>

	PR 463
	* bfdlink.h (bfd_link_callbacks): Add a pointer to struct
	bfd_link_hash_entry to reloc_overflow.

ld/

2004-10-21  H.J. Lu  <hongjiu.lu@@intel.com>

	PR 463
	* ldmain.c (reloc_overflow): Accept a pointer to struct
	bfd_link_hash_entry. Report symbol location for relocation
	overflow.
@
text
@d82 13
d189 1
@


1.18
log
@bfd/
	* dwarf2.c (_bfd_dwarf2_find_nearest_line): Add output section
	vma and output offset to address.
	* simple.c (simple_save_output_info): Only set output section
	and offset for debug sections, or those not already set up by
	the linker.
	(bfd_simple_get_relocated_section_contents): Update comment.
ld/testsuite/
	* ld-elfvsb/elfvsb.exp: Remove file name from "undefined ref" string.
@
text
@d51 1
@


1.17
log
@bfd/
	* elf64-mmix.c (mmix_set_relaxable_size): Save original size in
	rawsize.
	(mmix_elf_perform_relocation): Adjust for above change.
	(mmix_elf_relocate_section): Likewise.
	(mmix_elf_relax_section): Likewise.  Use output_section->rawsize.
	(mmix_elf_get_section_contents): Delete.
	(bfd_elf64_get_section_contents): Delete.
	(mmix_elf_relocate_section): Zero stub area.
	* linker.c (default_indirect_link_order): Alloc max of section size
	and rawsize.
	* simple.c (bfd_simple_get_relocated_section_contents): Likewise.
	* section.c (bfd_malloc_and_get_section): Likewise.
	(struct bfd_section): Update rawsize comment.
	* bfd-in2.h: Regenerate.
ld/
	* ldlang.c (lang_reset_memory_regions): Save last relax pass section
	size in rawsize.
@
text
@d95 6
a100 2
  section->output_offset = 0;
  section->output_section = section;
d124 1
a124 1
	@@var{symbol_table} is NULL.  The output offsets for all sections will
a127 3
	Generally all sections in @@var{abfd} should have their
	@@code{output_section} pointing back to the original section.

@


1.16
log
@bfd/
	* section.c (struct sec): Rename "_cooked_size" to "size".
	Rename "_raw_size" to "rawsize".
	(STD_SECTION): Adjust comments.
	(bfd_set_section_size, bfd_get_section_contents): Use size.
	(bfd_malloc_and_get_section): New function.
	* bfd-in.h (bfd_section_size, bfd_get_section_size): Use size.
	* coff-sh.c (sh_relax_section): Alloc coff_section_data struct early.
	Correctly free reloc and contents memory.
	* elf-eh-frame.c (_bfd_elf_discard_section_eh_frame): Delete FIXME
	and fake CIE now that we can shink section size to zero.
	(_bfd_elf_write_section_eh_frame): Likewise..
	* elf32-ppc.c (ppc_elf_relax_section): Delay reading section contents.
	* elf-m10300.c (mn10300_elf_final_link_relocate): Don't use
	_bfd_stab_section_offset.  Use _bfd_elf_section_offset.
	* stabs.c (_bfd_stab_section_offset_): Remove unused args and
	unneeded indirection.
	* elf.c (_bfd_elf_section_offset): .. and update call.
	* libbfd-in.h (_bfd_stab_section_offset): Update prototype.
	* libbfd.h: Regenerate.
	* bfd-in2.h: Regenerate.

	Replace occurrences of "_raw_size" and "_cooked_size" in most places
	with "size".  Set new "rawsize" for stabs, eh_frame, and SEC_MERGE
	sections.  Use "rawsize", if non-zero, for bfd_get_section_contents
	calls if the section might be a stabs, eh_frame, or SEC_MERGE section.
	Similarly use "rawsize", if non-zero, in reloc functions to validate
	reloc addresses.  Use new bfd_malloc_and_get_section in most places
	where bfd_get_section_contents was called.  Expand all occurrences of
	bfd_section_size and bfd_get_section_size.  Rename "raw_size" var in
	grok_prstatus and similar functions to "size".
	* aix386-core.c (aix386_core_file_p): ..
	* aix5ppc-core.c (xcoff64_core_p): ..
	* aout-adobe.c (aout_adobe_callback, aout_adobe_write_object_contents,
	aout_adobe_set_section_contents): ..
	* aout-target.h (callback): ..
	* aout-tic30.c (tic30_aout_callback, tic30_aout_final_link_relocate,
	MY_bfd_final_link): ..
	* aoutf1.h (sunos4_core_file_p): ..
	* aoutx.h (some_aout_object_p, adjust_o_magic, adjust_z_magic,
	adjust_n_magic, adjust_sizes_and_vmas, translate_from_native_sym_flags,
	final_link, aout_link_input_section): ..
	* binary.c (binary_object_p, binary_canonicalize_symtab,
	binary_set_section_contents): ..
	* bout.c (b_out_callback, b_out_write_object_contents,
	b_out_set_section_contents, b_out_bfd_relax_section,
	b_out_bfd_get_relocated_section_contents): ..
	* cisco-core.c (cisco_core_file_validate): ..
	* coff-alpha.c (alpha_ecoff_object_p,
	alpha_ecoff_get_relocated_section_conten, alpha_relocate_section): ..
	* coff-arm.c (coff_arm_relocate_section,
	bfd_arm_allocate_interworking_sections): ..
	* coff-h8300.c (h8300_reloc16_extra_cases,
	h8300_bfd_link_add_symbols): ..
	* coff-mips.c (mips_refhi_reloc, mips_gprel_reloc): ..
	* coff-ppc.c (coff_ppc_relocate_section, ppc_allocate_toc_section,
	ppc_bfd_coff_final_link): ..
	* coff-rs6000.c (xcoff_reloc_type_br, xcoff_ppc_relocate_section): ..
	* coff-sh.c (sh_relax_section, sh_relax_delete_bytes,
	sh_align_loads, sh_coff_get_relocated_section_contents): ..
	* coff64-rs6000.c (xcoff64_write_object_contents,
	xcoff64_reloc_type_br, xcoff64_ppc_relocate_section): ..
	* coffcode.h (coff_compute_section_file_positions,
	coff_write_object_contents): ..
	* coffgen.c (make_a_section_from_file, coff_write_symbols,
	coff_section_symbol, build_debug_section): ..
	* cofflink.c (coff_link_add_symbols, _bfd_coff_final_link,
	process_embedded_commands, _bfd_coff_link_input_bfd,
	_bfd_coff_write_global_sym): ..
	* cpu-arm.c (bfd_arm_update_notes, bfd_arm_get_mach_from_notes): ..
	* cpu-ns32k.c (do_ns32k_reloc, _bfd_ns32k_final_link_relocate): ..
	* dwarf1.c (parse_line_table, _bfd_dwarf1_find_nearest_line): ..
	* dwarf2.c (read_indirect_string, read_abbrevs, decode_line_info,
	_bfd_dwarf2_find_nearest_line): ..
	* ecoff.c (bfd_debug_section, ecoff_set_symbol_info,
	ecoff_compute_section_file_positions,
	_bfd_ecoff_write_object_contents, ecoff_indirect_link_order): ..
	* elf-eh-frame.c (_bfd_elf_discard_section_eh_frame,
	_bfd_elf_discard_section_eh_frame_hdr,
	_bfd_elf_maybe_strip_eh_frame_hdr, _bfd_elf_eh_frame_section_offset,
	_bfd_elf_write_section_eh_frame,
	_bfd_elf_write_section_eh_frame_hdr): ..
	* elf-hppa.h (elf_hppa_sort_unwind): ..
	* elf-m10200.c (mn10200_elf_relax_section,
	mn10200_elf_relax_delete_bytes,
	mn10200_elf_get_relocated_section_contents): ..
	* elf-m10300.c (_bfd_mn10300_elf_create_got_section,
	mn10300_elf_check_relocs, mn10300_elf_relax_section,
	mn10300_elf_relax_delete_bytes,
	mn10300_elf_get_relocated_section_contents,
	_bfd_mn10300_elf_adjust_dynamic_symbol,
	_bfd_mn10300_elf_discard_copies,
	_bfd_mn10300_elf_size_dynamic_sections,
	_bfd_mn10300_elf_finish_dynamic_sections): ..
	* elf.c (_bfd_elf_print_private_bfd_data, bfd_elf_get_bfd_needed_list,
	_bfd_elf_make_section_from_phdr, elf_fake_sections,
	bfd_elf_set_group_contents, map_sections_to_segments,
	elf_sort_sections, assign_file_positions_for_segments,
	SECTION_SIZE, copy_private_bfd_data,
	_bfd_elf_get_dynamic_reloc_upper_bound,
	_bfd_elf_canonicalize_dynamic_reloc, elfcore_maybe_make_sect,
	_bfd_elfcore_make_pseudosection, elfcore_grok_prstatus,
	elfcore_grok_lwpstatus, elfcore_grok_win32pstatus,
	elfcore_grok_note, elfcore_grok_nto_status, elfcore_grok_nto_gregs,
	_bfd_elf_rel_local_sym, _bfd_elf_get_synthetic_symtab): ..
	* elf32-arm.h (bfd_elf32_arm_allocate_interworking_sect,
	bfd_elf32_arm_process_before_allocation,
	elf32_arm_adjust_dynamic_symbol, allocate_dynrelocs,
	elf32_arm_size_dynamic_sections, elf32_arm_finish_dynamic_sections,
	elf32_arm_write_section): ..
	* elf32-cris.c (cris_elf_grok_prstatus,
	elf_cris_finish_dynamic_sections, cris_elf_gc_sweep_hook,
	elf_cris_adjust_gotplt_to_got, elf_cris_adjust_dynamic_symbol,
	cris_elf_check_relocs, elf_cris_size_dynamic_sections,
	elf_cris_discard_excess_dso_dynamics,
	elf_cris_discard_excess_program_dynamics): ..
	* elf32-d30v.c (bfd_elf_d30v_reloc, bfd_elf_d30v_reloc_21): ..
	* elf32-dlx.c (_bfd_dlx_elf_hi16_reloc): ..
	* elf32-frv.c (_frvfdpic_add_dyn_reloc, _frvfdpic_add_rofixup,
	_frv_create_got_section, _frvfdpic_assign_plt_entries,
	elf32_frvfdpic_size_dynamic_sections,
	elf32_frvfdpic_modify_segment_map,
	elf32_frvfdpic_finish_dynamic_sections): ..
	* elf32-h8300.c (elf32_h8_relax_section, elf32_h8_relax_delete_bytes,
	elf32_h8_get_relocated_section_contents): ..
	* elf32-hppa.c (hppa_build_one_stub, hppa_size_one_stub,
	elf32_hppa_adjust_dynamic_symbol, allocate_plt_static,
	allocate_dynrelocs, elf32_hppa_size_dynamic_sections, group_sections,
	elf32_hppa_size_stubs, elf32_hppa_set_gp, elf32_hppa_build_stubs,
	elf32_hppa_finish_dynamic_sections): ..
	* elf32-i370.c (i370_elf_adjust_dynamic_symbol,
	i370_elf_size_dynamic_sections, i370_elf_check_relocs,
	i370_elf_finish_dynamic_sections): ..
	* elf32-i386.c (elf_i386_grok_prstatus, elf_i386_adjust_dynamic_symbol,
	allocate_dynrelocs, elf_i386_size_dynamic_sections,
	elf_i386_relocate_section, elf_i386_finish_dynamic_sections): ..
	* elf32-i860.c (i860_howto_pc26_reloc, i860_howto_pc16_reloc,
	i860_howto_highadj_reloc, i860_howto_splitn_reloc): ..
	* elf32-ip2k.c (ip2k_is_switch_table_128,
	ip2k_relax_switch_table_128, ip2k_is_switch_table_256,
	ip2k_relax_switch_table_256, ip2k_elf_relax_section,
	adjust_all_relocations, ip2k_elf_relax_delete_bytes): ..
	* elf32-m32r.c (m32r_elf_do_10_pcrel_reloc, m32r_elf_hi16_reloc,
	m32r_elf_generic_reloc, m32r_elf_adjust_dynamic_symbol,
	allocate_dynrelocs, m32r_elf_size_dynamic_sections,
	m32r_elf_relocate_section, m32r_elf_finish_dynamic_sections,
	m32r_elf_relax_section, m32r_elf_relax_delete_bytes,
	m32r_elf_get_relocated_section_contents): ..
	* elf32-m68hc11.c (m68hc11_elf_build_one_stub,
	m68hc11_elf_size_one_stub, m68hc11_elf_relax_section,
	m68hc11_elf_relax_delete_bytes): ..
	* elf32-m68hc12.c (m68hc12_elf_build_one_stub,
	m68hc12_elf_size_one_stub): ..
	* elf32-m68hc1x.c (elf32_m68hc11_size_stubs,
	elf32_m68hc11_build_stubs, m68hc11_elf_special_reloc): ..
	* elf32-m68k.c (elf_m68k_check_relocs, elf_m68k_gc_sweep_hook,
	elf_m68k_adjust_dynamic_symbol, elf_m68k_size_dynamic_sections,
	elf_m68k_discard_copies, elf_m68k_finish_dynamic_sections): ..
	* elf32-mips.c (gprel32_with_gp, mips16_gprel_reloc,
	elf32_mips_grok_prstatus): ..
	* elf32-or32.c (or32_elf_consth_reloc): ..
	* elf32-ppc.c (ppc_elf_relax_section, ppc_elf_addr16_ha_reloc,
	elf_create_pointer_linker_section, ppc_elf_create_linker_section,
	ppc_elf_additional_program_headers, ppc_elf_adjust_dynamic_symbol,
	allocate_dynrelocs, ppc_elf_size_dynamic_sections,
	ppc_elf_finish_dynamic_sections, ppc_elf_grok_prstatus,
	ppc_elf_final_write_processing): ..
	* elf32-s390.c (s390_elf_ldisp_reloc, elf_s390_adjust_dynamic_symbol,
	allocate_dynrelocs, elf_s390_size_dynamic_sections,
	elf_s390_finish_dynamic_sections, elf_s390_grok_prstatus): ..
	* elf32-sh.c (sh_elf_reloc_loop, sh_elf_relax_section,
	sh_elf_relax_delete_bytes, sh_elf_align_loads,
	sh_elf_adjust_dynamic_symbol, allocate_dynrelocs,
	sh_elf_size_dynamic_sections, sh_elf_get_relocated_section_contents,
	sh_elf_finish_dynamic_sections, elf32_shlin_grok_prstatus): ..
	* elf32-sh64-com.c (sh64_address_in_cranges,
	sh64_get_contents_type): ..
	* elf32-sh64.c (sh64_find_section_for_address,
	sh64_elf_final_write_processing): ..
	* elf32-sparc.c (sparc_elf_wdisp16_reloc, sparc_elf_hix22_reloc,
	sparc_elf_lox10_reloc, elf32_sparc_adjust_dynamic_symbol,
	allocate_dynrelocs, elf32_sparc_size_dynamic_sections,
	elf32_sparc_relocate_section, elf32_sparc_finish_dynamic_sections): ..
	* elf32-v850.c (v850_elf_reloc, v850_elf_relax_section): ..
	* elf32-vax.c (elf_vax_check_relocs, elf_vax_adjust_dynamic_symbol,
	elf_vax_size_dynamic_sections, elf_vax_discard_copies,
	elf_vax_instantiate_got_entries, elf_vax_relocate_section,
	elf_vax_finish_dynamic_sections): ..
	* elf32-xstormy16.c (xstormy16_elf_24_reloc,
	xstormy16_elf_check_relocs, xstormy16_relax_plt_check,
	xstormy16_elf_relax_section, xstormy16_elf_always_size_sections,
	xstormy16_elf_finish_dynamic_sections): ..
	* elf32-xtensa.c (xtensa_read_table_entries,
	elf_xtensa_allocate_got_size, elf_xtensa_allocate_local_got_size,
	elf_xtensa_size_dynamic_sections, elf_xtensa_do_reloc,
	bfd_elf_xtensa_reloc, elf_xtensa_relocate_section,
	elf_xtensa_combine_prop_entries, elf_xtensa_finish_dynamic_sections,
	elf_xtensa_discard_info_for_section, elf_xtensa_grok_prstatus,
	get_relocation_opcode, retrieve_contents, find_relaxable_sections,
	collect_source_relocs, is_resolvable_asm_expansion, remove_literals,
	relax_section, shrink_dynamic_reloc_sections, relax_property_section,
	xtensa_callback_required_dependence): ..
	* elf64-alpha.c (elf64_alpha_reloc_gpdisp, elf64_alpha_relax_section,
	elf64_alpha_check_relocs, elf64_alpha_adjust_dynamic_symbol,
	elf64_alpha_calc_got_offsets_for_symbol, elf64_alpha_calc_got_offsets,
	elf64_alpha_size_plt_section, elf64_alpha_size_plt_section_1,
	elf64_alpha_always_size_sections, elf64_alpha_calc_dynrel_sizes,
	elf64_alpha_size_rela_got_section, elf64_alpha_size_rela_got_1,
	elf64_alpha_size_dynamic_sections, elf64_alpha_emit_dynrel,
	elf64_alpha_finish_dynamic_sections, elf64_alpha_final_link): ..
	* elf64-hppa.c (allocate_dynrel_entries,
	elf64_hppa_size_dynamic_sections,
	elf64_hppa_finish_dynamic_sections): ..
	* elf64-mips.c (mips_elf64_gprel32_reloc, mips16_gprel_reloc,
	mips_elf64_canonicalize_dynamic_reloc, mips_elf64_slurp_reloc_table,
	elf64_mips_grok_prstatus): ..
	* elf64-mmix.c (mmix_elf_perform_relocation, mmix_elf_reloc,
	mmix_elf_relocate_section, mmix_elf_final_link,
	mmix_set_relaxable_size, _bfd_mmix_after_linker_allocation,
	mmix_elf_relax_section, mmix_elf_get_section_contents): ..
	* elf64-ppc.c (ppc64_elf_object_p, ppc64_elf_grok_prstatus,
	ppc64_elf_check_relocs, ppc64_elf_func_desc_adjust,
	ppc64_elf_adjust_dynamic_symbol, ppc64_elf_edit_opd,
	allocate_dynrelocs, ppc64_elf_size_dynamic_sections,
	ppc_build_one_stub, ppc_size_one_stub, ppc64_elf_next_toc_section,
	toc_adjusting_stub_needed, group_sections, ppc64_elf_size_stubs,
	ppc64_elf_build_stubs, ppc64_elf_relocate_section,
	ppc64_elf_finish_dynamic_sections): ..
	* elf64-s390.c (s390_elf_ldisp_reloc, elf_s390_adjust_dynamic_symbol,
	allocate_dynrelocs, elf_s390_size_dynamic_sections,
	elf_s390_finish_dynamic_sections): ..
	* elf64-sh64.c (sh_elf64_get_relocated_section_contents,
	sh_elf64_check_relocs, sh64_elf64_adjust_dynamic_symbol,
	sh64_elf64_discard_copies, sh64_elf64_size_dynamic_sections,
	sh64_elf64_finish_dynamic_sections): ..
	* elf64-sparc.c (sparc64_elf_slurp_reloc_table, init_insn_reloc,
	sparc64_elf_check_relocs, sparc64_elf_adjust_dynamic_symbol,
	sparc64_elf_size_dynamic_sections, sparc64_elf_relocate_section,
	sparc64_elf_finish_dynamic_symbol,
	sparc64_elf_finish_dynamic_sections): ..
	* elf64-x86-64.c (elf64_x86_64_grok_prstatus,
	elf64_x86_64_adjust_dynamic_symbol, allocate_dynrelocs,
	elf64_x86_64_size_dynamic_sections, elf64_x86_64_relocate_section,
	elf64_x86_64_finish_dynamic_sections): ..
	* elfarm-nabi.c (elf32_arm_nabi_grok_prstatus): ..
	* elfcode.h (elf_slurp_reloc_table): ..
	* elflink.c (_bfd_elf_create_got_section, elf_add_dt_needed_tag,
	elf_finalize_dynstr, elf_link_add_object_symbols,
	bfd_elf_size_dynamic_sections, elf_link_sort_relocs,
	elf_link_input_bfd, bfd_elf_final_link, bfd_elf_discard_info): ..
	* elfn32-mips.c (gprel32_with_gp, mips16_gprel_reloc,
	elf32_mips_grok_prstatus): ..
	* elfxx-ia64.c (elfNN_ia64_relax_section, allocate_dynrel_entries,
	elfNN_ia64_size_dynamic_sections, elfNN_ia64_install_dyn_reloc,
	elfNN_ia64_choose_gp, elfNN_ia64_final_link,
	elfNN_ia64_finish_dynamic_sections): ..
	* elfxx-mips.c (mips_elf_create_procedure_table,
	mips_elf_check_mips16_stubs, _bfd_mips_elf_gprel16_with_gp,
	_bfd_mips_elf_hi16_reloc, _bfd_mips_elf_generic_reloc,
	mips_elf_global_got_index, mips_elf_multi_got,
	mips_elf_create_compact_rel_section, mips_elf_calculate_relocation,
	mips_elf_allocate_dynamic_relocations,
	mips_elf_create_dynamic_relocation, _bfd_mips_elf_fake_sections,
	_bfd_mips_relax_section, _bfd_mips_elf_adjust_dynamic_symbol,
	_bfd_mips_elf_always_size_sections,
	_bfd_mips_elf_size_dynamic_sections,
	_bfd_mips_elf_finish_dynamic_symbol,
	_bfd_mips_elf_finish_dynamic_sections,
	_bfd_mips_elf_modify_segment_map, _bfd_mips_elf_discard_info,
	_bfd_mips_elf_write_section, _bfd_mips_elf_set_section_contents,
	_bfd_elf_mips_get_relocated_section_contents,
	_bfd_mips_elf_final_link, _bfd_mips_elf_merge_private_bfd_data): ..
	* hp300hpux.c (callback): ..
	* hppabsd-core.c (make_bfd_asection): ..
	* hpux-core.c (make_bfd_asection): ..
	* i386linux.c (linux_link_create_dynamic_sections,
	bfd_i386linux_size_dynamic_sections, linux_finish_dynamic_link): ..
	* i386msdos.c (msdos_write_object_contents): ..
	* i386os9k.c (os9k_callback, os9k_write_object_contents,
	os9k_set_section_contents): ..
	* ieee.c (parse_expression, ieee_slurp_external_symbols,
	ieee_slurp_sections, ieee_slurp_debug, ieee_slurp_section_data,
	ieee_write_section_part, do_with_relocs, do_as_repeat,
	do_without_relocs, ieee_write_debug_part, init_for_output,
	ieee_set_section_contents): ..
	* ihex.c (ihex_scan, ihex_read_section, ihex_get_section_contents): ..
	* irix-core.c (do_sections, make_bfd_asection): ..
	* libaout.h (aout_section_merge_with_text_p): ..
	* libbfd.c (_bfd_generic_get_section_contents,
	_bfd_generic_get_section_contents_in_window): ..
	* linker.c (default_indirect_link_order): ..
	* lynx-core.c (make_bfd_asection): ..
	* m68klinux.c (linux_link_create_dynamic_sections,
	bfd_m68klinux_size_dynamic_sections, linux_finish_dynamic_link): ..
	* mach-o.c (bfd_mach_o_make_bfd_section,
	bfd_mach_o_scan_read_dylinker, bfd_mach_o_scan_read_dylib,
	bfd_mach_o_scan_read_thread, bfd_mach_o_scan_read_symtab,
	bfd_mach_o_scan_read_segment): ..
	* merge.c (_bfd_add_merge_section, record_section, merge_strings,
	_bfd_merge_sections): ..
	* mmo.c (mmo_find_sec_w_addr, mmo_get_spec_section, mmo_get_loc,
	mmo_map_set_sizes, mmo_canonicalize_symtab,
	mmo_internal_write_section, mmo_write_object_contents): ..
	* netbsd-core.c (netbsd_core_file_p): ..
	* nlm32-alpha.c (nlm_alpha_read_reloc, nlm_alpha_write_import,
	nlm_alpha_set_public_section): ..
	* nlm32-ppc.c (nlm_powerpc_read_reloc, nlm_powerpc_write_reloc): ..
	* nlm32-sparc.c (nlm_sparc_write_import): ..
	* nlmcode.h (add_bfd_section, nlm_swap_auxiliary_headers_in,
	nlm_compute_section_file_positions): ..
	* oasys.c (oasys_object_p, oasys_slurp_section_data,
	oasys_write_sections, oasys_write_data, oasys_set_section_contents): ..
	* opncls.c (get_debug_link_info): ..
	* osf-core.c (make_bfd_asection): ..
	* pdp11.c (some_aout_object_p, adjust_o_magic, adjust_z_magic,
	adjust_n_magic, adjust_sizes_and_vmas, squirt_out_relocs,
	final_link, aout_link_input_section): ..
	* peXXigen.c (_bfd_XXi_swap_sym_in, _bfd_XXi_swap_aouthdr_out,
	pe_print_idata, pe_print_edata, pe_print_pdata, pe_print_reloc): ..
	* pef.c (bfd_pef_make_bfd_section, bfd_pef_print_loader_section,
	bfd_pef_scan_start_address, bfd_pef_parse_symbols): ..
	* ppcboot.c (ppcboot_object_p, ppcboot_canonicalize_symtab): ..
	* ptrace-core.c (ptrace_unix_core_file_p): ..
	* reloc.c (bfd_perform_relocation, bfd_install_relocation,
	_bfd_final_link_relocate, bfd_generic_relax_section,
	bfd_generic_get_relocated_section_contents): ..
	* reloc16.c (bfd_coff_reloc16_relax_section,
	bfd_coff_reloc16_get_relocated_section_c): ..
	* riscix.c (riscix_some_aout_object_p): ..
	* rs6000-core.c (read_hdr, make_bfd_asection): ..
	* sco5-core.c (make_bfd_asection): ..
	* simple.c (bfd_simple_get_relocated_section_contents): ..
	* som.c (som_object_setup, setup_sections, som_prep_headers,
	som_write_fixups, som_begin_writing, bfd_section_from_som_symbol,
	som_set_reloc_info, som_get_section_contents,
	som_bfd_link_split_section): ..
	* sparclinux.c (linux_link_create_dynamic_sections,
	bfd_sparclinux_size_dynamic_sections, linux_finish_dynamic_link): ..
	* srec.c (srec_scan, srec_read_section, srec_get_section_contents): ..
	* stabs.c (_bfd_link_section_stabs, _bfd_discard_section_stabs,
	_bfd_write_stab_strings, _bfd_stab_section_offset): ..
	* sunos.c (sunos_read_dynamic_info, sunos_create_dynamic_sections,
	bfd_sunos_size_dynamic_sections, sunos_scan_std_relocs,
	sunos_scan_ext_relocs, sunos_scan_dynamic_symbol,
	sunos_write_dynamic_symbol, sunos_check_dynamic_reloc,
	sunos_finish_dynamic_link): ..
	* syms.c (_bfd_stab_section_find_nearest_line): ..
	* tekhex.c (first_phase, tekhex_set_section_contents,
	tekhex_write_object_contents): ..
	* trad-core.c (trad_unix_core_file_p): ..
	* versados.c (process_esd, process_otr, process_otr): ..
	* vms-gsd.c (_bfd_vms_slurp_gsd, _bfd_vms_write_gsd): ..
	* vms-misc.c (add_new_contents): ..
	* vms-tir.c (check_section, new_section, _bfd_vms_write_tir): ..
	* vms.c (vms_set_section_contents): ..
	* xcofflink.c (xcoff_get_section_contents, xcoff_link_add_symbols,
	xcoff_sweep, bfd_xcoff_size_dynamic_sections, xcoff_build_ldsyms,
	_bfd_xcoff_bfd_final_link, xcoff_link_input_bfd): ..
	* xsym.c (bfd_sym_scan): .. See above.

binutils/
	* objcopy.c (copy_section): Don't set _cooked_size.

include/
	* bfdlink.h (struct bfd_link_order): Update comment.

ld/
	* ldlang.c (print_output_section_statement): Don't print size before
	relaxation.
	(IGNORE_SECTION): Remove bfd arg.  Update all callers.

	* ldexp.c (fold_name): .. See below.
	* ldlang.c (section_already_linked, print_output_section_statement,
	print_input_section, insert_pad, size_input_section,
	lang_check_section_addresses, lang_size_sections_1,
	lang_size_sections, lang_do_assignments_1, lang_set_startof,
	lang_one_common, lang_reset_memory_regions, lang_process,
	lang_abs_symbol_at_end_of, lang_do_version_exports_section): ..
	* ldwrite.c (build_link_order, clone_section, ds, split_sections): ..
	* pe-dll.c (process_def_file, generate_reloc): ..
	* emultempl/elf32.em (gld${EMULATION_NAME}_find_statement_assignment,
	gld${EMULATION_NAME}_before_allocation): ..
	* emultempl/mmix-elfnmmo.em (mmix_after_allocation): ..
	* emultempl/sh64elf.em (sh64_elf_${EMULATION_NAME}_before_allocation,
	sh64_elf_${EMULATION_NAME}_after_allocation): ..
	* emultempl/sunos.em (gld${EMULATION_NAME}_before_allocation): ..
	* emultempl/xtensaelf.em (ld_assign_relative_paged_dot,
	ld_local_file_relocations_fit, ld_xtensa_insert_page_offsets): Use
	"size" instead of "_raw_size" and "_cooked_size".  Expand
	bfd_section_size macro invocations.
@
text
@d146 1
d150 1
a150 1
	contents = bfd_malloc (size);
@


1.15
log
@	* simple.c (bfd_simple_get_relocated_section_contents): Don't
	change reloc_done.  Set and restore _cooked_size.
	(RETURN): Delete.
@
text
@a142 1
  bfd_size_type old_cooked_size;
d146 1
a146 1
      bfd_size_type size = bfd_section_size (abfd, sec);
d178 1
a178 1
  link_order.size = bfd_section_size (abfd, sec);
d184 1
a184 1
      data = bfd_malloc (bfd_section_size (abfd, sec));
a219 6
  /* This function might be called before _cooked_size has been set, and
     bfd_perform_relocation needs _cooked_size to be valid.  */
  old_cooked_size = sec->_cooked_size;
  if (old_cooked_size == 0)
    sec->_cooked_size = sec->_raw_size;

a242 1
  sec->_cooked_size = old_cooked_size;
@


1.14
log
@	* ChangeLog: Fix typos.
	* ecoff.c: Fix comment typos.
	* ecofflink.c: Likewise.
	* format.c: Likewise.
	* hp300hpux.c: Likewise.
	* i386linux.c: Likewise.
	* ieee.c: Likewise.
	* m68klinux.c: Likewise.
	* mach-o.h: Likewise.
	* mipsbsd.c: Likewise.
	* oasys.c: Likewise.
	* opncls.c: Likewise.
	* peXXigen.c: Likewise.
	* reloc.c: Likewise.
	* reloc16.c: Likewise.
	* section.c: Likewise.
	* simple.c: Likewise.
	* som.c: Likewise.
	* som.h: Likewise.
	* sparclinux.c: Likewise.
	* srec.c: Likewise.
	* syms.c: Likewise.
	* targets.c: Likewise.
	* tekhex.c: Likewise.
	* versados.c: Likewise.
	* vms-gsd.c: Likewise.
	* vms-hdr.c: Likewise.
	* vms-misc.c: Likewise.
	* xcofflink.c: Likewise.
	* xsym.h: Likewise.
	* bfd-in2.h: Regenerate.
@
text
@d2 1
a2 1
   Copyright 2002, 2003
d143 1
a143 22
  bfd_boolean saved_reloc_done = sec->reloc_done;

#undef RETURN
#define RETURN(x)				\
  do						\
    {						\
      sec->reloc_done = saved_reloc_done;	\
      return (x);				\
    }						\
  while (0)

  /* Foul hack to prevent bfd_section_size aborts.  The reloc_done flag
     only controls that macro (and the related size macros), selecting
     between _raw_size and _cooked_size.  We may be called with relocation
     done or not, so we need to save the done-flag and mark the section as
     not relocated.

     Debug sections won't change size while we're only relocating.  There
     may be trouble here someday if it tries to run relaxation
     unexpectedly, so make sure.  */
  BFD_ASSERT (sec->_raw_size == sec->_cooked_size);
  sec->reloc_done = 0;
d157 1
a157 1
      RETURN (contents);
d187 1
a187 1
	RETURN (NULL);
d206 1
a206 1
      RETURN (NULL);
d221 6
d250 1
d256 1
a256 1
  RETURN (contents);
@


1.14.8.1
log
@Merge mainline to intercu branch - 2004-09-15
@
text
@d2 1
a2 1
   Copyright 2002, 2003, 2004
d143 22
d168 1
a168 2
      bfd_size_type amt = sec->rawsize > sec->size ? sec->rawsize : sec->size;
      bfd_size_type size = sec->rawsize ? sec->rawsize : sec->size;
d171 1
a171 1
	contents = bfd_malloc (amt);
d178 1
a178 1
      return contents;
d200 1
a200 1
  link_order.size = sec->size;
d206 1
a206 1
      data = bfd_malloc (sec->size);
d208 1
a208 1
	return NULL;
d227 1
a227 1
      return NULL;
d270 1
a270 1
  return contents;
@


1.14.6.1
log
@Additional merges to branch for 2.15.
@
text
@d2 1
a2 1
   Copyright 2002, 2003, 2004
d143 22
a164 1
  bfd_size_type old_cooked_size;
d178 1
a178 1
      return contents;
d208 1
a208 1
	return NULL;
d227 1
a227 1
      return NULL;
a241 6
  /* This function might be called before _cooked_size has been set, and
     bfd_perform_relocation needs _cooked_size to be valid.  */
  old_cooked_size = sec->_cooked_size;
  if (old_cooked_size == 0)
    sec->_cooked_size = sec->_raw_size;

a264 1
  sec->_cooked_size = old_cooked_size;
d270 1
a270 1
  return contents;
@


1.13
log
@	* simple.c (bfd_simple_get_relocated_section_contents): Free the
	hash table using _bfd_generic_link_hash_table_free.
@
text
@d214 1
a214 1
     knowledge that debug sections will generally have VMA 0 when emiting
@


1.12
log
@	* simple.c (bfd_simple_get_relocated_section_contents): Use
	_bfd_generic_link_hash_table_create instead of
	bfd_link_hash_table_create.
@
text
@d268 1
a268 1
  bfd_link_hash_table_free (abfd, link_info.hash);
@


1.11
log
@	* simple.c (bfd_simple_get_relocated_section_contents): Move
	reloc_done hack to before first bfd_section_size call.  Change all
	returns to use new wrapper macro RETURN, restoring sec->reloc_done.
@
text
@d188 1
a188 1
  link_info.hash = bfd_link_hash_table_create (abfd);
@


1.10
log
@Convert to C90 and a few tweaks.
@
text
@d143 22
d178 1
a178 1
      return contents;
d208 1
a208 1
	return NULL;
d227 1
a227 1
      return NULL;
a267 8
  /* Foul hack to prevent bfd_section_size aborts.  This flag only controls
     that macro (and the related size macros), selecting between _raw_size
     and _cooked_size.  Debug sections won't change size while we're only
     relocating.  There may be trouble here someday if it tries to run
     relaxation unexpectedly, so make sure.  */
  BFD_ASSERT (sec->_raw_size == sec->_cooked_size);
  sec->reloc_done = 0;

d270 1
a270 1
  return contents;
@


1.9
log
@	* simple.c (bfd_simple_get_relocated_section_contents): Call
	_bfd_generic_link_add_symbols instead of bfd_link_add_symbols.
@
text
@a26 27
static bfd_boolean simple_dummy_warning
  PARAMS ((struct bfd_link_info *, const char *, const char *, bfd *,
	   asection *, bfd_vma));

static bfd_boolean simple_dummy_undefined_symbol
  PARAMS ((struct bfd_link_info *, const char *, bfd *, asection *,
	   bfd_vma, bfd_boolean));

static bfd_boolean simple_dummy_reloc_overflow
  PARAMS ((struct bfd_link_info *, const char *, const char *, bfd_vma,
	   bfd *, asection *, bfd_vma));

static bfd_boolean simple_dummy_reloc_dangerous
  PARAMS ((struct bfd_link_info *, const char *, bfd *, asection *, bfd_vma));

static bfd_boolean simple_dummy_unattached_reloc
  PARAMS ((struct bfd_link_info *, const char *, bfd *, asection *, bfd_vma));

static void simple_save_output_info
  PARAMS ((bfd *, asection *, PTR));

static void simple_restore_output_info
  PARAMS ((bfd *, asection *, PTR));

bfd_byte * bfd_simple_get_relocated_section_contents
  PARAMS ((bfd *, asection *, bfd_byte *, asymbol **));

d28 6
a33 7
simple_dummy_warning (link_info, warning, symbol, abfd, section, address)
     struct bfd_link_info *link_info ATTRIBUTE_UNUSED;
     const char *warning ATTRIBUTE_UNUSED;
     const char *symbol ATTRIBUTE_UNUSED;
     bfd *abfd ATTRIBUTE_UNUSED;
     asection *section ATTRIBUTE_UNUSED;
     bfd_vma address ATTRIBUTE_UNUSED;
d39 6
a44 7
simple_dummy_undefined_symbol (link_info, name, abfd, section, address, fatal)
     struct bfd_link_info *link_info ATTRIBUTE_UNUSED;
     const char *name ATTRIBUTE_UNUSED;
     bfd *abfd ATTRIBUTE_UNUSED;
     asection *section ATTRIBUTE_UNUSED;
     bfd_vma address ATTRIBUTE_UNUSED;
     bfd_boolean fatal ATTRIBUTE_UNUSED;
d50 7
a56 9
simple_dummy_reloc_overflow (link_info, name, reloc_name, addend, abfd,
			     section, address)
     struct bfd_link_info *link_info ATTRIBUTE_UNUSED;
     const char *name ATTRIBUTE_UNUSED;
     const char *reloc_name ATTRIBUTE_UNUSED;
     bfd_vma addend ATTRIBUTE_UNUSED;
     bfd *abfd ATTRIBUTE_UNUSED;
     asection *section ATTRIBUTE_UNUSED;
     bfd_vma address ATTRIBUTE_UNUSED;
d62 5
a66 6
simple_dummy_reloc_dangerous (link_info, message, abfd, section, address)
     struct bfd_link_info *link_info ATTRIBUTE_UNUSED;
     const char *message ATTRIBUTE_UNUSED;
     bfd *abfd ATTRIBUTE_UNUSED;
     asection *section ATTRIBUTE_UNUSED;
     bfd_vma address ATTRIBUTE_UNUSED;
d72 5
a76 6
simple_dummy_unattached_reloc (link_info, name, abfd, section, address)
     struct bfd_link_info *link_info ATTRIBUTE_UNUSED;
     const char *name ATTRIBUTE_UNUSED;
     bfd *abfd ATTRIBUTE_UNUSED;
     asection *section ATTRIBUTE_UNUSED;
     bfd_vma address ATTRIBUTE_UNUSED;
d88 3
a90 4
simple_save_output_info (abfd, section, ptr)
     bfd *abfd ATTRIBUTE_UNUSED;
     asection *section;
     PTR ptr;
d92 1
a92 1
  struct saved_output_info *output_info = (struct saved_output_info *) ptr;
d100 3
a102 4
simple_restore_output_info (abfd, section, ptr)
     bfd *abfd ATTRIBUTE_UNUSED;
     asection *section;
     PTR ptr;
d104 1
a104 1
  struct saved_output_info *output_info = (struct saved_output_info *) ptr;
d114 2
a115 1
	bfd_byte *bfd_simple_get_relocated_section_contents (bfd *abfd, asection *sec, bfd_byte *outbuf, asymbol **symbol_table);
d132 4
a135 5
bfd_simple_get_relocated_section_contents (abfd, sec, outbuf, symbol_table)
     bfd *abfd;
     asection *sec;
     bfd_byte *outbuf;
     asymbol **symbol_table;
d142 1
a142 1
  PTR saved_offsets;
d214 1
a214 1
      symbol_table = (asymbol **) bfd_malloc (storage_needed);
@


1.9.6.1
log
@	* simple.c (bfd_simple_get_relocated_section_contents): Use
	_bfd_generic_link_hash_table_create instead of
	bfd_link_hash_table_create.
@
text
@d201 1
a201 1
  link_info.hash = _bfd_generic_link_hash_table_create (abfd);
@


1.8
log
@(bfd_simple_get_relocated_section_contents): Disable free that leads to GDB
vs BFD memory corruption.
@
text
@d246 1
a246 1
      bfd_link_add_symbols (abfd, &link_info);
@


1.7
log
@	* simple.c (bfd_simple_get_relocated_section_contents): Add
	parameter symbol_table.  Optionally use it instead of the symbol
	table from the bfd.  Save and restore output offsets and output
	sections  around bfd_get_relocated_section_contents.  Fix a memory
	leak.
	(simple_save_output_info, simple_restore_output_info): New
	functions.
	* bfd-in2.h: Regenerate.
	* dwarf2.c (read_abbrevs): Use
	bfd_simple_get_relocated_section_contents instead of
	bfd_get_section_contents.
	(decode_line_info): Likewise.
	(_bfd_dwarf2_find_nearest_line): Likewise.  Don't call
	find_rela_addend.
	(find_rela_addend): Remove.
	* elfxx-ia64.c (elfNN_ia64_reloc): Weaken sanity check for
	debugging sections.
	(elfNN_ia64_hash_table_create): Create the hash table with malloc,
	not bfd_zalloc.
@
text
@d264 10
d276 1
@


1.7.2.1
log
@Merge with mainline.
@
text
@a263 10
#if 0
  /* NOTE: cagney/2003-04-05: This free, which was introduced on
     2003-03-31 to stop a memory leak, caused a memory corruption
     between GDB and BFD.  The problem, which is stabs specific, can
     be identified by a bunch of failures in relocate.exp vis:

       gdb.base/relocate.exp: get address of static_bar

     Details of the problem can be found on the binutils@@ mailing
     list, see the discussion thread: "gdb.mi/mi-cli.exp failures".  */
a265 1
#endif
@


1.6
log
@Fix memory leaks
@
text
@d45 6
d52 1
a52 1
  PARAMS ((bfd *, asection *, bfd_byte *));
d114 30
d149 1
a149 1
	bfd_byte *bfd_simple_get_relocated_section_contents (bfd *abfd, asection *sec, bfd_byte *outbuf);
d152 4
a155 3
	Returns the relocated contents of section @@var{sec}.  Only symbols
	from @@var{abfd} and the output offsets assigned to sections in
	@@var{abfd} are used.  The result will be stored at @@var{outbuf}
d166 1
a166 1
bfd_simple_get_relocated_section_contents (abfd, sec, outbuf)
d170 1
d177 1
a177 1
  asymbol **symbol_table;
a223 1
  bfd_link_add_symbols (abfd, &link_info);
d225 29
a253 3
  storage_needed = bfd_get_symtab_upper_bound (abfd);
  symbol_table = (asymbol **) bfd_malloc (storage_needed);
  bfd_canonicalize_symtab (abfd, symbol_table);
d264 6
a279 1
  free (symbol_table);
@


1.5
log
@s/boolean/bfd_boolean/ s/true/TRUE/ s/false/FALSE/.  Simplify
comparisons of bfd_boolean vars with TRUE/FALSE.  Formatting.
@
text
@d2 1
a2 1
   Copyright 2002
d138 1
a138 1
  int storage_needed, number_of_symbols;
d190 1
a190 1
  number_of_symbols = bfd_canonicalize_symtab (abfd, symbol_table);
d211 1
@


1.4
log
@Use bfd_simple_get_relocated_section_contents() instead of bfd_get_section_contents().
@
text
@d27 1
a27 1
static boolean simple_dummy_warning
d31 1
a31 1
static boolean simple_dummy_undefined_symbol
d33 1
a33 1
	   bfd_vma, boolean));
d35 1
a35 1
static boolean simple_dummy_reloc_overflow 
d39 1
a39 1
static boolean simple_dummy_reloc_dangerous
d42 1
a42 1
static boolean simple_dummy_unattached_reloc
d48 1
a48 1
static boolean
d57 1
a57 1
  return true;
d60 1
a60 1
static boolean
d67 1
a67 1
     boolean fatal ATTRIBUTE_UNUSED;
d69 1
a69 1
  return true;
d72 1
a72 1
static boolean
d83 1
a83 1
  return true;
d86 1
a86 1
static boolean
d94 1
a94 1
  return true;
d97 1
a97 1
static boolean
d105 1
a105 1
  return true;
@


1.3
log
@	* simple.c: Correct placement of ATTRIBUTE_UNUSED.
@
text
@d141 15
@


1.3.4.1
log
@merge from mainline
@
text
@@


1.3.2.1
log
@Merge drow-cplus-merge-20021025 to drow-cplus-branch.
@
text
@d27 21
d49 7
a55 6
simple_dummy_warning (struct bfd_link_info *link_info ATTRIBUTE_UNUSED,
		      const char *warning ATTRIBUTE_UNUSED,
		      const char *symbol ATTRIBUTE_UNUSED,
		      bfd *abfd ATTRIBUTE_UNUSED,
		      asection *section ATTRIBUTE_UNUSED,
		      bfd_vma address ATTRIBUTE_UNUSED)
d61 7
a67 6
simple_dummy_undefined_symbol (struct bfd_link_info *link_info ATTRIBUTE_UNUSED,
			       const char *name ATTRIBUTE_UNUSED,
			       bfd *abfd ATTRIBUTE_UNUSED,
			       asection *section ATTRIBUTE_UNUSED,
			       bfd_vma address ATTRIBUTE_UNUSED,
			       boolean fatal ATTRIBUTE_UNUSED)
d73 9
a81 7
simple_dummy_reloc_overflow (struct bfd_link_info *link_info ATTRIBUTE_UNUSED,
			     const char *name ATTRIBUTE_UNUSED,
			     const char *reloc_name ATTRIBUTE_UNUSED,
			     bfd_vma addend ATTRIBUTE_UNUSED,
			     bfd *abfd ATTRIBUTE_UNUSED,
			     asection *section ATTRIBUTE_UNUSED,
			     bfd_vma address ATTRIBUTE_UNUSED)
d87 6
a92 5
simple_dummy_reloc_dangerous (struct bfd_link_info *link_info ATTRIBUTE_UNUSED,
			      const char *message ATTRIBUTE_UNUSED,
			      bfd *abfd ATTRIBUTE_UNUSED,
			      asection *section ATTRIBUTE_UNUSED,
			      bfd_vma address ATTRIBUTE_UNUSED)
d98 6
a103 5
simple_dummy_unattached_reloc (struct bfd_link_info *link_info ATTRIBUTE_UNUSED,
			       const char *name ATTRIBUTE_UNUSED,
			       bfd *abfd ATTRIBUTE_UNUSED,
			       asection *section ATTRIBUTE_UNUSED,
			       bfd_vma address ATTRIBUTE_UNUSED)
d129 4
a132 2
bfd_simple_get_relocated_section_contents (bfd *abfd, asection *sec,
					   bfd_byte *outbuf)
@


1.3.2.2
log
@Merge drow-cplus-branch to:
  cvs rtag -D 2003-12-14 00:00:00 UTC drow-cplus-merge-20031214 gdb+dejagnu
@
text
@d2 1
a2 1
   Copyright 2002, 2003
d27 1
a27 1
static bfd_boolean
d35 1
a35 1
  return TRUE;
d38 1
a38 1
static bfd_boolean
d44 1
a44 1
			       bfd_boolean fatal ATTRIBUTE_UNUSED)
d46 1
a46 1
  return TRUE;
d49 1
a49 1
static bfd_boolean
d58 1
a58 1
  return TRUE;
d61 1
a61 1
static bfd_boolean
d68 1
a68 1
  return TRUE;
d71 1
a71 1
static bfd_boolean
d78 1
a78 29
  return TRUE;
}

struct saved_output_info
{
  bfd_vma offset;
  asection *section;
};

static void
simple_save_output_info (bfd *abfd ATTRIBUTE_UNUSED,
			 asection *section,
			 void *ptr)
{
  struct saved_output_info *output_info = ptr;
  output_info[section->index].offset = section->output_offset;
  output_info[section->index].section = section->output_section;
  section->output_offset = 0;
  section->output_section = section;
}

static void
simple_restore_output_info (bfd *abfd ATTRIBUTE_UNUSED,
			    asection *section,
			    void *ptr)
{
  struct saved_output_info *output_info = ptr;
  section->output_offset = output_info[section->index].offset;
  section->output_section = output_info[section->index].section;
d86 1
a86 2
	bfd_byte *bfd_simple_get_relocated_section_contents
	  (bfd *abfd, asection *sec, bfd_byte *outbuf, asymbol **symbol_table);
d89 3
a91 4
	Returns the relocated contents of section @@var{sec}.  The symbols in
	@@var{symbol_table} will be used, or the symbols from @@var{abfd} if
	@@var{symbol_table} is NULL.  The output offsets for all sections will
	be temporarily reset to 0.  The result will be stored at @@var{outbuf}
d102 2
a103 4
bfd_simple_get_relocated_section_contents (bfd *abfd,
					   asection *sec,
					   bfd_byte *outbuf,
					   asymbol **symbol_table)
d109 2
a110 39
  int storage_needed;
  void *saved_offsets;
  bfd_boolean saved_reloc_done = sec->reloc_done;

#undef RETURN
#define RETURN(x)				\
  do						\
    {						\
      sec->reloc_done = saved_reloc_done;	\
      return (x);				\
    }						\
  while (0)

  /* Foul hack to prevent bfd_section_size aborts.  The reloc_done flag
     only controls that macro (and the related size macros), selecting
     between _raw_size and _cooked_size.  We may be called with relocation
     done or not, so we need to save the done-flag and mark the section as
     not relocated.

     Debug sections won't change size while we're only relocating.  There
     may be trouble here someday if it tries to run relaxation
     unexpectedly, so make sure.  */
  BFD_ASSERT (sec->_raw_size == sec->_cooked_size);
  sec->reloc_done = 0;

  if (! (sec->flags & SEC_RELOC))
    {
      bfd_size_type size = bfd_section_size (abfd, sec);

      if (outbuf == NULL)
	contents = bfd_malloc (size);
      else
	contents = outbuf;

      if (contents)
	bfd_get_section_contents (abfd, sec, contents, 0, size);

      RETURN (contents);
    }
d119 1
a119 1
  link_info.hash = _bfd_generic_link_hash_table_create (abfd);
d139 1
a139 1
	RETURN (NULL);
d142 1
d144 3
a146 29
  /* The sections in ABFD may already have output sections and offsets set.
     Because this function is primarily for debug sections, and GCC uses the
     knowledge that debug sections will generally have VMA 0 when emitting
     relocations between DWARF-2 sections (which are supposed to be
     section-relative offsets anyway), we need to reset the output offsets
     to zero.  We also need to arrange for section->output_section->vma plus
     section->output_offset to equal section->vma, which we do by setting
     section->output_section to point back to section.  Save the original
     output offset and output section to restore later.  */
  saved_offsets = malloc (sizeof (struct saved_output_info)
			  * abfd->section_count);
  if (saved_offsets == NULL)
    {
      if (data)
	free (data);
      RETURN (NULL);
    }
  bfd_map_over_sections (abfd, simple_save_output_info, saved_offsets);

  if (symbol_table == NULL)
    {
      _bfd_generic_link_add_symbols (abfd, &link_info);

      storage_needed = bfd_get_symtab_upper_bound (abfd);
      symbol_table = bfd_malloc (storage_needed);
      bfd_canonicalize_symtab (abfd, symbol_table);
    }
  else
    storage_needed = 0;
d157 7
a163 16
#if 0
  /* NOTE: cagney/2003-04-05: This free, which was introduced on
     2003-03-31 to stop a memory leak, caused a memory corruption
     between GDB and BFD.  The problem, which is stabs specific, can
     be identified by a bunch of failures in relocate.exp vis:

       gdb.base/relocate.exp: get address of static_bar

     Details of the problem can be found on the binutils@@ mailing
     list, see the discussion thread: "gdb.mi/mi-cli.exp failures".  */
  if (storage_needed != 0)
    free (symbol_table);
#endif

  bfd_map_over_sections (abfd, simple_restore_output_info, saved_offsets);
  free (saved_offsets);
d165 1
a165 1
  _bfd_generic_link_hash_table_free (link_info.hash);
d167 1
a167 1
  RETURN (contents);
@


1.2
log
@Files missed in previous commit.
@
text
@d28 2
a29 4
  PARAMS ((struct bfd_link_info * ATTRIBUTE_UNUSED,
	   const char * ATTRIBUTE_UNUSED, const char * ATTRIBUTE_UNUSED,
	   bfd * ATTRIBUTE_UNUSED, asection * ATTRIBUTE_UNUSED,
	   bfd_vma ATTRIBUTE_UNUSED));
d32 2
a33 4
  PARAMS ((struct bfd_link_info * ATTRIBUTE_UNUSED,
	   const char * ATTRIBUTE_UNUSED, bfd * ATTRIBUTE_UNUSED,
	   asection * ATTRIBUTE_UNUSED, bfd_vma ATTRIBUTE_UNUSED,
	   boolean ATTRIBUTE_UNUSED));
d36 2
a37 4
  PARAMS ((struct bfd_link_info * ATTRIBUTE_UNUSED,
	   const char * ATTRIBUTE_UNUSED, const char * ATTRIBUTE_UNUSED,
	   bfd_vma ATTRIBUTE_UNUSED, bfd * ATTRIBUTE_UNUSED,
	   asection * ATTRIBUTE_UNUSED, bfd_vma ATTRIBUTE_UNUSED));
d40 1
a40 3
  PARAMS ((struct bfd_link_info * ATTRIBUTE_UNUSED,
	   const char * ATTRIBUTE_UNUSED, bfd * ATTRIBUTE_UNUSED,
	   asection * ATTRIBUTE_UNUSED, bfd_vma ATTRIBUTE_UNUSED));
d43 1
a43 3
  PARAMS ((struct bfd_link_info * ATTRIBUTE_UNUSED,
	   const char * ATTRIBUTE_UNUSED, bfd * ATTRIBUTE_UNUSED,
	   asection * ATTRIBUTE_UNUSED, bfd_vma ATTRIBUTE_UNUSED));
d50 6
a55 6
     struct bfd_link_info *link_info;
     const char *warning;
     const char *symbol;
     bfd *abfd;
     asection *section;
     bfd_vma address;
d62 6
a67 6
     struct bfd_link_info *link_info;
     const char *name;
     bfd *abfd;
     asection *section;
     bfd_vma address;
     boolean fatal;
d75 7
a81 7
     struct bfd_link_info *link_info;
     const char *name;
     const char *reloc_name;
     bfd_vma addend;
     bfd *abfd;
     asection *section;
     bfd_vma address;
d88 5
a92 5
     struct bfd_link_info *link_info;
     const char *message;
     bfd *abfd;
     asection *section;
     bfd_vma address;
d99 5
a103 5
     struct bfd_link_info *link_info;
     const char *name;
     bfd *abfd;
     asection *section;
     bfd_vma address;
@


1.1
log
@        * Makefile.am: Run dep-am.
        (BFD32_LIBS): Add simple.lo.
        (BFD32_LIBS_CFILES): Add simple.c.
        * Makefile.in: Regenerated.
        * bfd-in2.h: Regenerated.
        * simple.c: New file.
@
text
@d27 31
d59 7
a65 6
simple_dummy_warning (struct bfd_link_info *link_info ATTRIBUTE_UNUSED,
		      const char *warning ATTRIBUTE_UNUSED,
		      const char *symbol ATTRIBUTE_UNUSED,
		      bfd *abfd ATTRIBUTE_UNUSED,
		      asection *section ATTRIBUTE_UNUSED,
		      bfd_vma address ATTRIBUTE_UNUSED)
d71 7
a77 6
simple_dummy_undefined_symbol (struct bfd_link_info *link_info ATTRIBUTE_UNUSED,
			       const char *name ATTRIBUTE_UNUSED,
			       bfd *abfd ATTRIBUTE_UNUSED,
			       asection *section ATTRIBUTE_UNUSED,
			       bfd_vma address ATTRIBUTE_UNUSED,
			       boolean fatal ATTRIBUTE_UNUSED)
d83 9
a91 7
simple_dummy_reloc_overflow (struct bfd_link_info *link_info ATTRIBUTE_UNUSED,
			     const char *name ATTRIBUTE_UNUSED,
			     const char *reloc_name ATTRIBUTE_UNUSED,
			     bfd_vma addend ATTRIBUTE_UNUSED,
			     bfd *abfd ATTRIBUTE_UNUSED,
			     asection *section ATTRIBUTE_UNUSED,
			     bfd_vma address ATTRIBUTE_UNUSED)
d97 6
a102 5
simple_dummy_reloc_dangerous (struct bfd_link_info *link_info ATTRIBUTE_UNUSED,
			      const char *message ATTRIBUTE_UNUSED,
			      bfd *abfd ATTRIBUTE_UNUSED,
			      asection *section ATTRIBUTE_UNUSED,
			      bfd_vma address ATTRIBUTE_UNUSED)
d108 6
a113 5
simple_dummy_unattached_reloc (struct bfd_link_info *link_info ATTRIBUTE_UNUSED,
			       const char *name ATTRIBUTE_UNUSED,
			       bfd *abfd ATTRIBUTE_UNUSED,
			       asection *section ATTRIBUTE_UNUSED,
			       bfd_vma address ATTRIBUTE_UNUSED)
d139 4
a142 2
bfd_simple_get_relocated_section_contents (bfd *abfd, asection *sec,
					   bfd_byte *outbuf)
@


1.1.2.1
log
@Merge with mainline; merge tag carlton_dictionary-20021011-merge.
@
text
@@


1.1.2.2
log
@2002-10-25  David Carlton  <carlton@@math.stanford.edu>

	* symtab.c (lookup_symbol_aux_block): New function.
	(lookup_symbol_aux_local): Call lookup_symbol_aux_block.
	(lookup_symbol_aux): Ditto.

	* Merge from mainline; tag is carlton_dictionary-20021025-merge.

2002-10-25  David Carlton  <carlton@@math.stanford.edu>

	* cp-support.c: Add comment to demangled name pitfalls.
	* symtab.c (lookup_transparent_type): Add FIXME comment at
	beginning.

2002-10-23  David Carlton  <carlton@@math.stanford.edu>

	* symtab.c: Delete cplusplus_hint.
	Delete prototype for find_template_name_end.
	* dwarf2read.c (scan_partial_symbols): Add in a gdb_assert from a
	later version of my namespace_minimal patch.

2002-10-25  David Carlton  <carlton@@math.stanford.edu>

	* gdb.c++/namespace.exp: Change all of the setup_xfail tests that
	I added into setup_kfails.
@
text
@a26 21
static boolean simple_dummy_warning
  PARAMS ((struct bfd_link_info *, const char *, const char *, bfd *,
	   asection *, bfd_vma));

static boolean simple_dummy_undefined_symbol
  PARAMS ((struct bfd_link_info *, const char *, bfd *, asection *,
	   bfd_vma, boolean));

static boolean simple_dummy_reloc_overflow 
  PARAMS ((struct bfd_link_info *, const char *, const char *, bfd_vma,
	   bfd *, asection *, bfd_vma));

static boolean simple_dummy_reloc_dangerous
  PARAMS ((struct bfd_link_info *, const char *, bfd *, asection *, bfd_vma));

static boolean simple_dummy_unattached_reloc
  PARAMS ((struct bfd_link_info *, const char *, bfd *, asection *, bfd_vma));

bfd_byte * bfd_simple_get_relocated_section_contents
  PARAMS ((bfd *, asection *, bfd_byte *));

d28 6
a33 7
simple_dummy_warning (link_info, warning, symbol, abfd, section, address)
     struct bfd_link_info *link_info ATTRIBUTE_UNUSED;
     const char *warning ATTRIBUTE_UNUSED;
     const char *symbol ATTRIBUTE_UNUSED;
     bfd *abfd ATTRIBUTE_UNUSED;
     asection *section ATTRIBUTE_UNUSED;
     bfd_vma address ATTRIBUTE_UNUSED;
d39 6
a44 7
simple_dummy_undefined_symbol (link_info, name, abfd, section, address, fatal)
     struct bfd_link_info *link_info ATTRIBUTE_UNUSED;
     const char *name ATTRIBUTE_UNUSED;
     bfd *abfd ATTRIBUTE_UNUSED;
     asection *section ATTRIBUTE_UNUSED;
     bfd_vma address ATTRIBUTE_UNUSED;
     boolean fatal ATTRIBUTE_UNUSED;
d50 7
a56 9
simple_dummy_reloc_overflow (link_info, name, reloc_name, addend, abfd,
			     section, address)
     struct bfd_link_info *link_info ATTRIBUTE_UNUSED;
     const char *name ATTRIBUTE_UNUSED;
     const char *reloc_name ATTRIBUTE_UNUSED;
     bfd_vma addend ATTRIBUTE_UNUSED;
     bfd *abfd ATTRIBUTE_UNUSED;
     asection *section ATTRIBUTE_UNUSED;
     bfd_vma address ATTRIBUTE_UNUSED;
d62 5
a66 6
simple_dummy_reloc_dangerous (link_info, message, abfd, section, address)
     struct bfd_link_info *link_info ATTRIBUTE_UNUSED;
     const char *message ATTRIBUTE_UNUSED;
     bfd *abfd ATTRIBUTE_UNUSED;
     asection *section ATTRIBUTE_UNUSED;
     bfd_vma address ATTRIBUTE_UNUSED;
d72 5
a76 6
simple_dummy_unattached_reloc (link_info, name, abfd, section, address)
     struct bfd_link_info *link_info ATTRIBUTE_UNUSED;
     const char *name ATTRIBUTE_UNUSED;
     bfd *abfd ATTRIBUTE_UNUSED;
     asection *section ATTRIBUTE_UNUSED;
     bfd_vma address ATTRIBUTE_UNUSED;
d102 2
a103 4
bfd_simple_get_relocated_section_contents (abfd, sec, outbuf)
     bfd *abfd;
     asection *sec;
     bfd_byte *outbuf;
@


1.1.2.3
log
@2002-11-15  David Carlton  <carlton@@math.stanford.edu>

	* Merge from mainline; tag is carlton_dictionary-20021115-merge.
@
text
@a140 15
  if (! (sec->flags & SEC_RELOC))
    {
      bfd_size_type size = bfd_section_size (abfd, sec);

      if (outbuf == NULL)
	contents = bfd_malloc (size);
      else
	contents = outbuf;

      if (contents)
	bfd_get_section_contents (abfd, sec, contents, 0, size);

      return contents;
    }

@


1.1.2.4
log
@2002-12-23  David Carlton  <carlton@@math.stanford.edu>

	* Merge from mainline; tag is carlton_dictionary-20021223-merge.
@
text
@d27 1
a27 1
static bfd_boolean simple_dummy_warning
d31 1
a31 1
static bfd_boolean simple_dummy_undefined_symbol
d33 1
a33 1
	   bfd_vma, bfd_boolean));
d35 1
a35 1
static bfd_boolean simple_dummy_reloc_overflow
d39 1
a39 1
static bfd_boolean simple_dummy_reloc_dangerous
d42 1
a42 1
static bfd_boolean simple_dummy_unattached_reloc
d48 1
a48 1
static bfd_boolean
d57 1
a57 1
  return TRUE;
d60 1
a60 1
static bfd_boolean
d67 1
a67 1
     bfd_boolean fatal ATTRIBUTE_UNUSED;
d69 1
a69 1
  return TRUE;
d72 1
a72 1
static bfd_boolean
d83 1
a83 1
  return TRUE;
d86 1
a86 1
static bfd_boolean
d94 1
a94 1
  return TRUE;
d97 1
a97 1
static bfd_boolean
d105 1
a105 1
  return TRUE;
@


1.1.2.5
log
@2003-04-16  David Carlton  <carlton@@bactrian.org>

	* Merge with mainline; tag is carlton_dictionary-20030416-merge.
@
text
@d2 1
a2 1
   Copyright 2002, 2003
a44 6
static void simple_save_output_info
  PARAMS ((bfd *, asection *, PTR));

static void simple_restore_output_info
  PARAMS ((bfd *, asection *, PTR));

d46 1
a46 1
  PARAMS ((bfd *, asection *, bfd_byte *, asymbol **));
a107 30
struct saved_output_info
{
  bfd_vma offset;
  asection *section;
};

static void
simple_save_output_info (abfd, section, ptr)
     bfd *abfd ATTRIBUTE_UNUSED;
     asection *section;
     PTR ptr;
{
  struct saved_output_info *output_info = (struct saved_output_info *) ptr;
  output_info[section->index].offset = section->output_offset;
  output_info[section->index].section = section->output_section;
  section->output_offset = 0;
  section->output_section = section;
}

static void
simple_restore_output_info (abfd, section, ptr)
     bfd *abfd ATTRIBUTE_UNUSED;
     asection *section;
     PTR ptr;
{
  struct saved_output_info *output_info = (struct saved_output_info *) ptr;
  section->output_offset = output_info[section->index].offset;
  section->output_section = output_info[section->index].section;
}

d113 1
a113 1
	bfd_byte *bfd_simple_get_relocated_section_contents (bfd *abfd, asection *sec, bfd_byte *outbuf, asymbol **symbol_table);
d116 3
a118 4
	Returns the relocated contents of section @@var{sec}.  The symbols in
	@@var{symbol_table} will be used, or the symbols from @@var{abfd} if
	@@var{symbol_table} is NULL.  The output offsets for all sections will
	be temporarily reset to 0.  The result will be stored at @@var{outbuf}
d129 1
a129 1
bfd_simple_get_relocated_section_contents (abfd, sec, outbuf, symbol_table)
a132 1
     asymbol **symbol_table;
d138 2
a139 2
  int storage_needed;
  PTR saved_offsets;
d186 1
d188 3
a190 29
  /* The sections in ABFD may already have output sections and offsets set.
     Because this function is primarily for debug sections, and GCC uses the
     knowledge that debug sections will generally have VMA 0 when emiting
     relocations between DWARF-2 sections (which are supposed to be
     section-relative offsets anyway), we need to reset the output offsets
     to zero.  We also need to arrange for section->output_section->vma plus
     section->output_offset to equal section->vma, which we do by setting
     section->output_section to point back to section.  Save the original
     output offset and output section to restore later.  */
  saved_offsets = malloc (sizeof (struct saved_output_info)
			  * abfd->section_count);
  if (saved_offsets == NULL)
    {
      if (data)
	free (data);
      return NULL;
    }
  bfd_map_over_sections (abfd, simple_save_output_info, saved_offsets);

  if (symbol_table == NULL)
    {
      bfd_link_add_symbols (abfd, &link_info);

      storage_needed = bfd_get_symtab_upper_bound (abfd);
      symbol_table = (asymbol **) bfd_malloc (storage_needed);
      bfd_canonicalize_symtab (abfd, symbol_table);
    }
  else
    storage_needed = 0;
a199 17

#if 0
  /* NOTE: cagney/2003-04-05: This free, which was introduced on
     2003-03-31 to stop a memory leak, caused a memory corruption
     between GDB and BFD.  The problem, which is stabs specific, can
     be identified by a bunch of failures in relocate.exp vis:

       gdb.base/relocate.exp: get address of static_bar

     Details of the problem can be found on the binutils@@ mailing
     list, see the discussion thread: "gdb.mi/mi-cli.exp failures".  */
  if (storage_needed != 0)
    free (symbol_table);
#endif

  bfd_map_over_sections (abfd, simple_restore_output_info, saved_offsets);
  free (saved_offsets);
@


1.1.2.6
log
@2003-06-27  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton_dictionary-20030627-merge.
@
text
@d246 1
a246 1
      _bfd_generic_link_add_symbols (abfd, &link_info);
@


1.1.2.7
log
@2003-08-05  David Carlton  <carlton@@kealia.com>

	* configure.in (build_warnings): Delete -Wformat-nonliteral.
	* configure (build_warnings): Ditto.

	* Merge with mainline; tag is carlton_dictionary-20030805-merge.
@
text
@d27 27
d55 7
a61 6
simple_dummy_warning (struct bfd_link_info *link_info ATTRIBUTE_UNUSED,
		      const char *warning ATTRIBUTE_UNUSED,
		      const char *symbol ATTRIBUTE_UNUSED,
		      bfd *abfd ATTRIBUTE_UNUSED,
		      asection *section ATTRIBUTE_UNUSED,
		      bfd_vma address ATTRIBUTE_UNUSED)
d67 7
a73 6
simple_dummy_undefined_symbol (struct bfd_link_info *link_info ATTRIBUTE_UNUSED,
			       const char *name ATTRIBUTE_UNUSED,
			       bfd *abfd ATTRIBUTE_UNUSED,
			       asection *section ATTRIBUTE_UNUSED,
			       bfd_vma address ATTRIBUTE_UNUSED,
			       bfd_boolean fatal ATTRIBUTE_UNUSED)
d79 9
a87 7
simple_dummy_reloc_overflow (struct bfd_link_info *link_info ATTRIBUTE_UNUSED,
			     const char *name ATTRIBUTE_UNUSED,
			     const char *reloc_name ATTRIBUTE_UNUSED,
			     bfd_vma addend ATTRIBUTE_UNUSED,
			     bfd *abfd ATTRIBUTE_UNUSED,
			     asection *section ATTRIBUTE_UNUSED,
			     bfd_vma address ATTRIBUTE_UNUSED)
d93 6
a98 5
simple_dummy_reloc_dangerous (struct bfd_link_info *link_info ATTRIBUTE_UNUSED,
			      const char *message ATTRIBUTE_UNUSED,
			      bfd *abfd ATTRIBUTE_UNUSED,
			      asection *section ATTRIBUTE_UNUSED,
			      bfd_vma address ATTRIBUTE_UNUSED)
d104 6
a109 5
simple_dummy_unattached_reloc (struct bfd_link_info *link_info ATTRIBUTE_UNUSED,
			       const char *name ATTRIBUTE_UNUSED,
			       bfd *abfd ATTRIBUTE_UNUSED,
			       asection *section ATTRIBUTE_UNUSED,
			       bfd_vma address ATTRIBUTE_UNUSED)
d121 4
a124 3
simple_save_output_info (bfd *abfd ATTRIBUTE_UNUSED,
			 asection *section,
			 void *ptr)
d126 1
a126 1
  struct saved_output_info *output_info = ptr;
d134 4
a137 3
simple_restore_output_info (bfd *abfd ATTRIBUTE_UNUSED,
			    asection *section,
			    void *ptr)
d139 1
a139 1
  struct saved_output_info *output_info = ptr;
d149 1
a149 2
	bfd_byte *bfd_simple_get_relocated_section_contents
	  (bfd *abfd, asection *sec, bfd_byte *outbuf, asymbol **symbol_table);
d166 5
a170 4
bfd_simple_get_relocated_section_contents (bfd *abfd,
					   asection *sec,
					   bfd_byte *outbuf,
					   asymbol **symbol_table)
d177 1
a177 1
  void *saved_offsets;
d249 1
a249 1
      symbol_table = bfd_malloc (storage_needed);
@


1.1.2.8
log
@2003-09-17  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton_dictionary-20030917-merge.
@
text
@a142 22
  bfd_boolean saved_reloc_done = sec->reloc_done;

#undef RETURN
#define RETURN(x)				\
  do						\
    {						\
      sec->reloc_done = saved_reloc_done;	\
      return (x);				\
    }						\
  while (0)

  /* Foul hack to prevent bfd_section_size aborts.  The reloc_done flag
     only controls that macro (and the related size macros), selecting
     between _raw_size and _cooked_size.  We may be called with relocation
     done or not, so we need to save the done-flag and mark the section as
     not relocated.

     Debug sections won't change size while we're only relocating.  There
     may be trouble here someday if it tries to run relaxation
     unexpectedly, so make sure.  */
  BFD_ASSERT (sec->_raw_size == sec->_cooked_size);
  sec->reloc_done = 0;
d156 1
a156 1
      RETURN (contents);
d186 1
a186 1
	RETURN (NULL);
d205 1
a205 1
      RETURN (NULL);
d246 8
d256 1
a256 1
  RETURN (contents);
@


1.1.2.9
log
@2003-11-11  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton-dictionary-20031111-merge.
@
text
@d188 1
a188 1
  link_info.hash = _bfd_generic_link_hash_table_create (abfd);
d268 1
a268 1
  _bfd_generic_link_hash_table_free (link_info.hash);
@


1.1.2.10
log
@2003-12-15  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton_dictionary-20031215-merge.
	* cp-support.c (class_name_from_physname): Add DMGL_PARAMS to call
	to cplus_demangle.
	(method_name_from_physname): Ditto.
@
text
@d214 1
a214 1
     knowledge that debug sections will generally have VMA 0 when emitting
@


