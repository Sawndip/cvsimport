head	1.21;
access;
symbols
	sid-snapshot-20180601:1.21
	sid-snapshot-20180501:1.21
	sid-snapshot-20180401:1.21
	sid-snapshot-20180301:1.21
	sid-snapshot-20180201:1.21
	sid-snapshot-20180101:1.21
	sid-snapshot-20171201:1.21
	sid-snapshot-20171101:1.21
	sid-snapshot-20171001:1.21
	sid-snapshot-20170901:1.21
	sid-snapshot-20170801:1.21
	sid-snapshot-20170701:1.21
	sid-snapshot-20170601:1.21
	sid-snapshot-20170501:1.21
	sid-snapshot-20170401:1.21
	sid-snapshot-20170301:1.21
	sid-snapshot-20170201:1.21
	sid-snapshot-20170101:1.21
	sid-snapshot-20161201:1.21
	sid-snapshot-20161101:1.21
	sid-snapshot-20160901:1.21
	sid-snapshot-20160801:1.21
	sid-snapshot-20160701:1.21
	sid-snapshot-20160601:1.21
	sid-snapshot-20160501:1.21
	sid-snapshot-20160401:1.21
	sid-snapshot-20160301:1.21
	sid-snapshot-20160201:1.21
	sid-snapshot-20160101:1.21
	sid-snapshot-20151201:1.21
	sid-snapshot-20151101:1.21
	sid-snapshot-20151001:1.21
	sid-snapshot-20150901:1.21
	sid-snapshot-20150801:1.21
	sid-snapshot-20150701:1.21
	sid-snapshot-20150601:1.21
	sid-snapshot-20150501:1.21
	sid-snapshot-20150401:1.21
	sid-snapshot-20150301:1.21
	sid-snapshot-20150201:1.21
	sid-snapshot-20150101:1.21
	sid-snapshot-20141201:1.21
	sid-snapshot-20141101:1.21
	sid-snapshot-20141001:1.21
	sid-snapshot-20140901:1.21
	sid-snapshot-20140801:1.21
	sid-snapshot-20140701:1.21
	sid-snapshot-20140601:1.21
	sid-snapshot-20140501:1.21
	sid-snapshot-20140401:1.21
	sid-snapshot-20140301:1.21
	sid-snapshot-20140201:1.21
	sid-snapshot-20140101:1.21
	sid-snapshot-20131201:1.21
	sid-snapshot-20131101:1.21
	sid-snapshot-20131001:1.21
	binutils-2_24-branch:1.21.0.4
	binutils-2_24-branchpoint:1.21
	binutils-2_21_1:1.19
	sid-snapshot-20130901:1.21
	gdb_7_6_1-2013-08-30-release:1.21
	sid-snapshot-20130801:1.21
	sid-snapshot-20130701:1.21
	sid-snapshot-20130601:1.21
	sid-snapshot-20130501:1.21
	gdb_7_6-2013-04-26-release:1.21
	sid-snapshot-20130401:1.21
	binutils-2_23_2:1.20
	gdb_7_6-branch:1.21.0.2
	gdb_7_6-2013-03-12-branchpoint:1.21
	sid-snapshot-20130301:1.21
	sid-snapshot-20130201:1.21
	sid-snapshot-20130101:1.20
	sid-snapshot-20121201:1.20
	gdb_7_5_1-2012-11-29-release:1.20
	binutils-2_23_1:1.20
	sid-snapshot-20121101:1.20
	binutils-2_23:1.20
	sid-snapshot-20121001:1.20
	sid-snapshot-20120901:1.20
	gdb_7_5-2012-08-17-release:1.20
	sid-snapshot-20120801:1.20
	binutils-2_23-branch:1.20.0.10
	binutils-2_23-branchpoint:1.20
	gdb_7_5-branch:1.20.0.8
	gdb_7_5-2012-07-18-branchpoint:1.20
	sid-snapshot-20120701:1.20
	sid-snapshot-20120601:1.20
	sid-snapshot-20120501:1.20
	binutils-2_22_branch:1.20.0.6
	gdb_7_4_1-2012-04-26-release:1.20
	sid-snapshot-20120401:1.20
	sid-snapshot-20120301:1.20
	sid-snapshot-20120201:1.20
	gdb_7_4-2012-01-24-release:1.20
	sid-snapshot-20120101:1.20
	gdb_7_4-branch:1.20.0.4
	gdb_7_4-2011-12-13-branchpoint:1.20
	sid-snapshot-20111201:1.20
	binutils-2_22:1.20
	sid-snapshot-20111101:1.20
	sid-snapshot-20111001:1.20
	binutils-2_22-branch:1.20.0.2
	binutils-2_22-branchpoint:1.20
	gdb_7_3_1-2011-09-04-release:1.19
	sid-snapshot-20110901:1.20
	sid-snapshot-20110801:1.20
	gdb_7_3-2011-07-26-release:1.19
	sid-snapshot-20110701:1.20
	sid-snapshot-20110601:1.20
	sid-snapshot-20110501:1.19
	gdb_7_3-branch:1.19.0.12
	gdb_7_3-2011-04-01-branchpoint:1.19
	sid-snapshot-20110401:1.19
	sid-snapshot-20110301:1.19
	sid-snapshot-20110201:1.19
	sid-snapshot-20110101:1.19
	binutils-2_21:1.19
	sid-snapshot-20101201:1.19
	binutils-2_21-branch:1.19.0.10
	binutils-2_21-branchpoint:1.19
	sid-snapshot-20101101:1.19
	sid-snapshot-20101001:1.19
	binutils-2_20_1:1.19
	gdb_7_2-2010-09-02-release:1.19
	sid-snapshot-20100901:1.19
	sid-snapshot-20100801:1.19
	gdb_7_2-branch:1.19.0.8
	gdb_7_2-2010-07-07-branchpoint:1.19
	sid-snapshot-20100701:1.19
	sid-snapshot-20100601:1.19
	sid-snapshot-20100501:1.19
	sid-snapshot-20100401:1.19
	gdb_7_1-2010-03-18-release:1.19
	sid-snapshot-20100301:1.19
	gdb_7_1-branch:1.19.0.6
	gdb_7_1-2010-02-18-branchpoint:1.19
	sid-snapshot-20100201:1.19
	sid-snapshot-20100101:1.19
	gdb_7_0_1-2009-12-22-release:1.19
	sid-snapshot-20091201:1.19
	sid-snapshot-20091101:1.19
	binutils-2_20:1.19
	gdb_7_0-2009-10-06-release:1.19
	sid-snapshot-20091001:1.19
	gdb_7_0-branch:1.19.0.4
	gdb_7_0-2009-09-16-branchpoint:1.19
	arc-sim-20090309:1.17
	binutils-arc-20081103-branch:1.17.0.26
	binutils-arc-20081103-branchpoint:1.17
	binutils-2_20-branch:1.19.0.2
	binutils-2_20-branchpoint:1.19
	sid-snapshot-20090901:1.18
	sid-snapshot-20090801:1.18
	msnyder-checkpoint-072509-branch:1.18.0.4
	msnyder-checkpoint-072509-branchpoint:1.18
	sid-snapshot-20090701:1.18
	dje-cgen-play1-branch:1.18.0.2
	dje-cgen-play1-branchpoint:1.18
	sid-snapshot-20090601:1.18
	sid-snapshot-20090501:1.18
	sid-snapshot-20090401:1.18
	arc-20081103-branch:1.17.0.24
	arc-20081103-branchpoint:1.17
	arc-insight_6_8-branch:1.17.0.22
	arc-insight_6_8-branchpoint:1.17
	insight_6_8-branch:1.17.0.20
	insight_6_8-branchpoint:1.17
	sid-snapshot-20090301:1.18
	binutils-2_19_1:1.17
	sid-snapshot-20090201:1.17
	sid-snapshot-20090101:1.17
	reverse-20081226-branch:1.17.0.18
	reverse-20081226-branchpoint:1.17
	sid-snapshot-20081201:1.17
	multiprocess-20081120-branch:1.17.0.16
	multiprocess-20081120-branchpoint:1.17
	sid-snapshot-20081101:1.17
	binutils-2_19:1.17
	sid-snapshot-20081001:1.17
	reverse-20080930-branch:1.17.0.14
	reverse-20080930-branchpoint:1.17
	binutils-2_19-branch:1.17.0.12
	binutils-2_19-branchpoint:1.17
	sid-snapshot-20080901:1.17
	sid-snapshot-20080801:1.17
	reverse-20080717-branch:1.17.0.10
	reverse-20080717-branchpoint:1.17
	sid-snapshot-20080701:1.17
	msnyder-reverse-20080609-branch:1.17.0.8
	msnyder-reverse-20080609-branchpoint:1.17
	drow-reverse-20070409-branch:1.16.0.34
	drow-reverse-20070409-branchpoint:1.16
	sid-snapshot-20080601:1.17
	sid-snapshot-20080501:1.17
	sid-snapshot-20080403:1.17
	sid-snapshot-20080401:1.17
	gdb_6_8-2008-03-27-release:1.17
	sid-snapshot-20080301:1.17
	gdb_6_8-branch:1.17.0.6
	gdb_6_8-2008-02-26-branchpoint:1.17
	sid-snapshot-20080201:1.17
	sid-snapshot-20080101:1.17
	sid-snapshot-20071201:1.17
	sid-snapshot-20071101:1.17
	gdb_6_7_1-2007-10-29-release:1.17
	gdb_6_7-2007-10-10-release:1.17
	sid-snapshot-20071001:1.17
	gdb_6_7-branch:1.17.0.4
	gdb_6_7-2007-09-07-branchpoint:1.17
	binutils-2_18:1.17
	binutils-2_18-branch:1.17.0.2
	binutils-2_18-branchpoint:1.17
	insight_6_6-20070208-release:1.16
	binutils-csl-coldfire-4_1-32:1.16
	binutils-csl-sourcerygxx-4_1-32:1.16
	gdb_6_6-2006-12-18-release:1.16
	binutils-csl-innovasic-fido-3_4_4-33:1.16
	binutils-csl-sourcerygxx-3_4_4-32:1.13
	binutils-csl-coldfire-4_1-30:1.16
	binutils-csl-sourcerygxx-4_1-30:1.16
	binutils-csl-coldfire-4_1-28:1.16
	binutils-csl-sourcerygxx-4_1-29:1.16
	binutils-csl-sourcerygxx-4_1-28:1.16
	gdb_6_6-branch:1.16.0.32
	gdb_6_6-2006-11-15-branchpoint:1.16
	binutils-csl-arm-2006q3-27:1.16
	binutils-csl-sourcerygxx-4_1-27:1.16
	binutils-csl-arm-2006q3-26:1.16
	binutils-csl-sourcerygxx-4_1-26:1.16
	binutils-csl-sourcerygxx-4_1-25:1.16
	binutils-csl-sourcerygxx-4_1-24:1.16
	binutils-csl-sourcerygxx-4_1-23:1.16
	insight_6_5-20061003-release:1.16
	gdb-csl-symbian-6_4_50_20060226-12:1.16
	binutils-csl-sourcerygxx-4_1-21:1.16
	binutils-csl-arm-2006q3-21:1.16
	binutils-csl-sourcerygxx-4_1-22:1.16
	binutils-csl-palmsource-arm-prelinker-1_0-1:1.16
	binutils-csl-sourcerygxx-4_1-20:1.16
	binutils-csl-arm-2006q3-19:1.16
	binutils-csl-sourcerygxx-4_1-19:1.16
	binutils-csl-sourcerygxx-4_1-18:1.16
	binutils-csl-renesas-4_1-9:1.16
	gdb-csl-sourcerygxx-3_4_4-25:1.16
	binutils-csl-sourcerygxx-3_4_4-25:1.13
	nickrob-async-20060828-mergepoint:1.16
	gdb-csl-symbian-6_4_50_20060226-11:1.16
	binutils-csl-renesas-4_1-8:1.16
	binutils-csl-renesas-4_1-7:1.16
	binutils-csl-renesas-4_1-6:1.16
	gdb-csl-sourcerygxx-4_1-17:1.16
	binutils-csl-sourcerygxx-4_1-17:1.16
	gdb-csl-20060226-branch-local-2:1.16
	gdb-csl-sourcerygxx-4_1-14:1.16
	binutils-csl-sourcerygxx-4_1-14:1.16
	binutils-csl-sourcerygxx-4_1-15:1.16
	gdb-csl-sourcerygxx-4_1-13:1.16
	binutils-csl-sourcerygxx-4_1-13:1.16
	binutils-2_17:1.16
	gdb-csl-sourcerygxx-4_1-12:1.16
	binutils-csl-sourcerygxx-4_1-12:1.16
	gdb-csl-sourcerygxx-3_4_4-21:1.16
	binutils-csl-sourcerygxx-3_4_4-21:1.16
	gdb_6_5-20060621-release:1.16
	binutils-csl-wrs-linux-3_4_4-24:1.13
	binutils-csl-wrs-linux-3_4_4-23:1.13
	gdb-csl-sourcerygxx-4_1-9:1.16
	binutils-csl-sourcerygxx-4_1-9:1.16
	gdb-csl-sourcerygxx-4_1-8:1.16
	binutils-csl-sourcerygxx-4_1-8:1.16
	gdb-csl-sourcerygxx-4_1-7:1.16
	binutils-csl-sourcerygxx-4_1-7:1.16
	gdb-csl-arm-2006q1-6:1.16
	binutils-csl-arm-2006q1-6:1.16
	gdb-csl-sourcerygxx-4_1-6:1.16
	binutils-csl-sourcerygxx-4_1-6:1.16
	binutils-csl-wrs-linux-3_4_4-22:1.13
	gdb-csl-symbian-6_4_50_20060226-10:1.16
	gdb-csl-symbian-6_4_50_20060226-9:1.16
	gdb-csl-symbian-6_4_50_20060226-8:1.16
	gdb-csl-coldfire-4_1-11:1.16
	binutils-csl-coldfire-4_1-11:1.16
	gdb-csl-sourcerygxx-3_4_4-19:1.16
	binutils-csl-sourcerygxx-3_4_4-19:1.16
	gdb-csl-coldfire-4_1-10:1.16
	gdb_6_5-branch:1.16.0.30
	gdb_6_5-2006-05-14-branchpoint:1.16
	binutils-csl-coldfire-4_1-10:1.16
	gdb-csl-sourcerygxx-4_1-5:1.16
	binutils-csl-sourcerygxx-4_1-5:1.16
	nickrob-async-20060513-branch:1.16.0.28
	nickrob-async-20060513-branchpoint:1.16
	gdb-csl-sourcerygxx-4_1-4:1.16
	binutils-csl-sourcerygxx-4_1-4:1.16
	msnyder-reverse-20060502-branch:1.16.0.26
	msnyder-reverse-20060502-branchpoint:1.16
	binutils-csl-wrs-linux-3_4_4-21:1.13
	gdb-csl-morpho-4_1-4:1.16
	binutils-csl-morpho-4_1-4:1.16
	gdb-csl-sourcerygxx-3_4_4-17:1.16
	binutils-csl-sourcerygxx-3_4_4-17:1.16
	binutils-csl-wrs-linux-3_4_4-20:1.13
	readline_5_1-import-branch:1.16.0.24
	readline_5_1-import-branchpoint:1.16
	gdb-csl-20060226-branch-merge-to-csl-symbian-1:1.16
	binutils-2_17-branch:1.16.0.22
	binutils-2_17-branchpoint:1.16
	gdb-csl-symbian-20060226-branch:1.16.0.20
	gdb-csl-symbian-20060226-branchpoint:1.16
	gdb-csl-20060226-branch-merge-to-csl-local-1:1.16
	msnyder-reverse-20060331-branch:1.16.0.18
	msnyder-reverse-20060331-branchpoint:1.16
	binutils-csl-2_17-branch:1.16.0.16
	binutils-csl-2_17-branchpoint:1.16
	gdb-csl-available-20060303-branch:1.16.0.14
	gdb-csl-available-20060303-branchpoint:1.16
	gdb-csl-20060226-branch:1.16.0.12
	gdb-csl-20060226-branchpoint:1.16
	gdb_6_4-20051202-release:1.16
	msnyder-fork-checkpoint-branch:1.16.0.10
	msnyder-fork-checkpoint-branchpoint:1.16
	gdb-csl-gxxpro-6_3-branch:1.16.0.8
	gdb-csl-gxxpro-6_3-branchpoint:1.16
	gdb_6_4-branch:1.16.0.6
	gdb_6_4-2005-11-01-branchpoint:1.16
	gdb-csl-arm-20051020-branch:1.16.0.4
	gdb-csl-arm-20051020-branchpoint:1.16
	binutils-csl-gxxpro-3_4-branch:1.13.0.70
	binutils-csl-gxxpro-3_4-branchpoint:1.13
	binutils-2_16_1:1.13
	msnyder-tracepoint-checkpoint-branch:1.16.0.2
	msnyder-tracepoint-checkpoint-branchpoint:1.16
	gdb-csl-arm-20050325-2005-q1b:1.13
	binutils-csl-arm-2005q1b:1.13
	binutils-2_16:1.13
	gdb-csl-arm-20050325-2005-q1a:1.13
	binutils-csl-arm-2005q1a:1.13
	csl-arm-20050325-branch:1.13.0.68
	csl-arm-20050325-branchpoint:1.13
	binutils-csl-arm-2005q1-branch:1.13.0.66
	binutils-csl-arm-2005q1-branchpoint:1.13
	binutils-2_16-branch:1.13.0.64
	binutils-2_16-branchpoint:1.13
	csl-arm-2004-q3d:1.13
	gdb_6_3-20041109-release:1.13
	gdb_6_3-branch:1.13.0.60
	gdb_6_3-20041019-branchpoint:1.13
	csl-arm-2004-q3:1.13
	drow_intercu-merge-20040921:1.13
	drow_intercu-merge-20040915:1.13
	jimb-gdb_6_2-e500-branch:1.13.0.62
	jimb-gdb_6_2-e500-branchpoint:1.13
	gdb_6_2-20040730-release:1.13
	gdb_6_2-branch:1.13.0.58
	gdb_6_2-2004-07-10-gmt-branchpoint:1.13
	gdb_6_1_1-20040616-release:1.13
	binutils-2_15:1.13
	binutils-2_15-branchpoint:1.13
	csl-arm-2004-q1a:1.13
	csl-arm-2004-q1:1.13
	gdb_6_1-2004-04-05-release:1.13
	drow_intercu-merge-20040402:1.13
	drow_intercu-merge-20040327:1.13
	ezannoni_pie-20040323-branch:1.13.0.56
	ezannoni_pie-20040323-branchpoint:1.13
	cagney_tramp-20040321-mergepoint:1.13
	cagney_tramp-20040309-branch:1.13.0.54
	cagney_tramp-20040309-branchpoint:1.13
	gdb_6_1-branch:1.13.0.52
	gdb_6_1-2004-03-01-gmt-branchpoint:1.13
	drow_intercu-20040221-branch:1.13.0.50
	drow_intercu-20040221-branchpoint:1.13
	binutils-2_15-branch:1.13.0.48
	cagney_bfdfile-20040213-branch:1.13.0.46
	cagney_bfdfile-20040213-branchpoint:1.13
	drow-cplus-merge-20040208:1.13
	carlton_dictionary-20040126-merge:1.13
	cagney_bigcore-20040122-branch:1.13.0.44
	cagney_bigcore-20040122-branchpoint:1.13
	drow-cplus-merge-20040113:1.13
	csl-arm-2003-q4:1.13
	drow-cplus-merge-20031224:1.13
	drow-cplus-merge-20031220:1.13
	carlton_dictionary-20031215-merge:1.13
	drow-cplus-merge-20031214:1.13
	carlton-dictionary-20031111-merge:1.13
	gdb_6_0-2003-10-04-release:1.13
	kettenis_sparc-20030918-branch:1.13.0.42
	kettenis_sparc-20030918-branchpoint:1.13
	carlton_dictionary-20030917-merge:1.13
	ezannoni_pie-20030916-branchpoint:1.13
	ezannoni_pie-20030916-branch:1.13.0.40
	cagney_x86i386-20030821-branch:1.13.0.38
	cagney_x86i386-20030821-branchpoint:1.13
	carlton_dictionary-20030805-merge:1.13
	carlton_dictionary-20030627-merge:1.13
	gdb_6_0-branch:1.13.0.36
	gdb_6_0-2003-06-23-branchpoint:1.13
	jimb-ppc64-linux-20030613-branch:1.13.0.34
	jimb-ppc64-linux-20030613-branchpoint:1.13
	binutils-2_14:1.13
	cagney_convert-20030606-branch:1.13.0.32
	cagney_convert-20030606-branchpoint:1.13
	cagney_writestrings-20030508-branch:1.13.0.30
	cagney_writestrings-20030508-branchpoint:1.13
	jimb-ppc64-linux-20030528-branch:1.13.0.28
	jimb-ppc64-linux-20030528-branchpoint:1.13
	carlton_dictionary-20030523-merge:1.13
	cagney_fileio-20030521-branch:1.13.0.26
	cagney_fileio-20030521-branchpoint:1.13
	kettenis_i386newframe-20030517-mergepoint:1.13
	jimb-ppc64-linux-20030509-branch:1.13.0.24
	jimb-ppc64-linux-20030509-branchpoint:1.13
	kettenis_i386newframe-20030504-mergepoint:1.13
	carlton_dictionary-20030430-merge:1.13
	binutils-2_14-branch:1.13.0.22
	binutils-2_14-branchpoint:1.13
	kettenis_i386newframe-20030419-branch:1.13.0.20
	kettenis_i386newframe-20030419-branchpoint:1.13
	carlton_dictionary-20030416-merge:1.13
	cagney_frameaddr-20030409-mergepoint:1.13
	kettenis_i386newframe-20030406-branch:1.13.0.18
	kettenis_i386newframe-20030406-branchpoint:1.13
	cagney_frameaddr-20030403-branchpoint:1.13
	cagney_frameaddr-20030403-branch:1.13.0.16
	cagney_framebase-20030330-mergepoint:1.13
	cagney_framebase-20030326-branch:1.13.0.14
	cagney_framebase-20030326-branchpoint:1.13
	cagney_lazyid-20030317-branch:1.13.0.12
	cagney_lazyid-20030317-branchpoint:1.13
	kettenis-i386newframe-20030316-mergepoint:1.13
	offbyone-20030313-branch:1.13.0.10
	offbyone-20030313-branchpoint:1.13
	kettenis-i386newframe-20030308-branch:1.13.0.8
	kettenis-i386newframe-20030308-branchpoint:1.13
	carlton_dictionary-20030305-merge:1.13
	cagney_offbyone-20030303-branch:1.13.0.6
	cagney_offbyone-20030303-branchpoint:1.13
	carlton_dictionary-20030207-merge:1.13
	interps-20030202-branch:1.13.0.4
	interps-20030202-branchpoint:1.13
	cagney-unwind-20030108-branch:1.13.0.2
	cagney-unwind-20030108-branchpoint:1.13
	binutils-2_13_2_1:1.11
	binutils-2_13_2:1.11
	carlton_dictionary-20021223-merge:1.13
	gdb_5_3-2002-12-12-release:1.12
	carlton_dictionary-20021115-merge:1.12
	binutils-2_13_1:1.11
	kseitz_interps-20021105-merge:1.12
	kseitz_interps-20021103-merge:1.12
	drow-cplus-merge-20021020:1.12
	drow-cplus-merge-20021025:1.12
	carlton_dictionary-20021025-merge:1.12
	carlton_dictionary-20021011-merge:1.12
	drow-cplus-branch:1.12.0.12
	drow-cplus-branchpoint:1.12
	kseitz_interps-20020930-merge:1.12
	carlton_dictionary-20020927-merge:1.12
	carlton_dictionary-branch:1.12.0.10
	carlton_dictionary-20020920-branchpoint:1.12
	sid-20020905-branchpoint:1.12
	sid-20020905-branch:1.12.0.8
	gdb_5_3-branch:1.12.0.6
	gdb_5_3-2002-09-04-branchpoint:1.12
	kseitz_interps-20020829-merge:1.12
	cagney_sysregs-20020825-branch:1.12.0.4
	cagney_sysregs-20020825-branchpoint:1.12
	readline_4_3-import-branch:1.12.0.2
	readline_4_3-import-branchpoint:1.12
	binutils-2_13:1.11
	gdb_5_2_1-2002-07-23-release:1.8
	binutils-2_13-branchpoint:1.11
	binutils-2_13-branch:1.11.0.6
	kseitz_interps-20020528-branch:1.11.0.4
	kseitz_interps-20020528-branchpoint:1.11
	cagney_regbuf-20020515-branch:1.11.0.2
	cagney_regbuf-20020515-branchpoint:1.11
	binutils-2_12_1:1.7
	jimb-macro-020506-branch:1.10.0.2
	jimb-macro-020506-branchpoint:1.10
	gdb_5_2-2002-04-29-release:1.8
	binutils-2_12:1.7
	gdb_5_2-branch:1.8.0.2
	gdb_5_2-2002-03-03-branchpoint:1.8
	binutils-2_12-branch:1.7.0.2
	binutils-2_12-branchpoint:1.7
	gdb_5_1_1-2002-01-24-release:1.1
	gdb_5_1_0_1-2002-01-03-release:1.1
	cygnus_cvs_20020108_pre:1.7
	gdb_5_1_0_1-2002-01-03-branch:1.1.0.6
	gdb_5_1_0_1-2002-01-03-branchpoint:1.1
	gdb_5_1-2001-11-21-release:1.1
	gdb_s390-2001-09-26-branch:1.1.0.4
	gdb_s390-2001-09-26-branchpoint:1.1
	gdb_5_1-2001-07-29-branch:1.1.0.2
	gdb_5_1-2001-07-29-branchpoint:1.1
	binutils_latest_snapshot:1.21;
locks; strict;
comment	@ * @;


1.21
date	2013.01.10.20.03.54;	author hjl;	state Exp;
branches;
next	1.20;

1.20
date	2011.05.18.07.58.31;	author gingold;	state Exp;
branches;
next	1.19;

1.19
date	2009.09.02.07.18.37;	author amodra;	state Exp;
branches;
next	1.18;

1.18
date	2009.02.18.18.23.07;	author davek;	state Exp;
branches;
next	1.17;

1.17
date	2007.07.03.14.26.42;	author nickc;	state Exp;
branches;
next	1.16;

1.16
date	2005.05.04.15.53.35;	author nickc;	state Exp;
branches;
next	1.15;

1.15
date	2005.05.04.07.19.30;	author nickc;	state Exp;
branches;
next	1.14;

1.14
date	2005.04.21.07.45.37;	author nickc;	state Exp;
branches;
next	1.13;

1.13
date	2002.11.30.08.39.40;	author amodra;	state Exp;
branches;
next	1.12;

1.12
date	2002.08.06.08.59.34;	author amodra;	state Exp;
branches
	1.12.10.1
	1.12.12.1;
next	1.11;

1.11
date	2002.05.10.21.20.10;	author trix;	state Exp;
branches
	1.11.4.1;
next	1.10;

1.10
date	2002.04.28.14.34.39;	author trix;	state Exp;
branches;
next	1.9;

1.9
date	2002.03.18.12.45.41;	author nickc;	state Exp;
branches;
next	1.8;

1.8
date	2002.02.19.05.01.27;	author trix;	state Exp;
branches;
next	1.7;

1.7
date	2001.12.31.04.08.23;	author trix;	state Exp;
branches;
next	1.6;

1.6
date	2001.12.22.17.18.34;	author trix;	state Exp;
branches;
next	1.5;

1.5
date	2001.10.10.12.08.28;	author kazu;	state Exp;
branches;
next	1.4;

1.4
date	2001.09.18.09.57.25;	author amodra;	state Exp;
branches;
next	1.3;

1.3
date	2001.09.06.15.20.00;	author trix;	state Exp;
branches;
next	1.2;

1.2
date	2001.08.10.06.00.53;	author amodra;	state Exp;
branches;
next	1.1;

1.1
date	2001.05.24.20.50.50;	author trix;	state Exp;
branches;
next	;

1.12.10.1
date	2002.12.23.19.37.54;	author carlton;	state Exp;
branches;
next	;

1.12.12.1
date	2003.12.14.20.26.49;	author drow;	state Exp;
branches;
next	;

1.11.4.1
date	2002.08.09.18.34.17;	author kseitz;	state Exp;
branches;
next	;


desc
@@


1.21
log
@Remove trailing white spaces in bfd

	* aout0.c: Remove trailing white spaces.
	* archive.c: Likewise.
	* archures.c: Likewise.
	* bfd-in.h: Likewise.
	* bfd-in2.h: Likewise.
	* coff-alpha.c: Likewise.
	* coff-i860.c: Likewise.
	* coff-mips.c: Likewise.
	* coff-ppc.c: Likewise.
	* coff-tic80.c: Likewise.
	* coff-x86_64.c: Likewise.
	* coff-z80.c: Likewise.
	* coffcode.h: Likewise.
	* coffgen.c: Likewise.
	* cofflink.c: Likewise.
	* compress.c: Likewise.
	* corefile.c: Likewise.
	* cpu-arm.c: Likewise.
	* cpu-avr.c: Likewise.
	* cpu-bfin.c: Likewise.
	* cpu-cr16.c: Likewise.
	* cpu-cr16c.c: Likewise.
	* cpu-crx.c: Likewise.
	* cpu-h8300.c: Likewise.
	* cpu-i386.c: Likewise.
	* cpu-lm32.c: Likewise.
	* cpu-m68k.c: Likewise.
	* cpu-moxie.c: Likewise.
	* cpu-msp430.c: Likewise.
	* cpu-sh.c: Likewise.
	* cpu-xc16x.c: Likewise.
	* dwarf2.c: Likewise.
	* ecofflink.c: Likewise.
	* ecoffswap.h: Likewise.
	* elf-ifunc.c: Likewise.
	* elf-m10300.c: Likewise.
	* elf-vxworks.c: Likewise.
	* elf32-avr.c: Likewise.
	* elf32-avr.h: Likewise.
	* elf32-cr16.c: Likewise.
	* elf32-cr16c.c: Likewise.
	* elf32-cris.c: Likewise.
	* elf32-crx.c: Likewise.
	* elf32-frv.c: Likewise.
	* elf32-hppa.c: Likewise.
	* elf32-i860.c: Likewise.
	* elf32-ip2k.c: Likewise.
	* elf32-iq2000.c: Likewise.
	* elf32-m32c.c: Likewise.
	* elf32-m68hc1x.c: Likewise.
	* elf32-msp430.c: Likewise.
	* elf32-mt.c: Likewise.
	* elf32-ppc.c: Likewise.
	* elf32-rl78.c: Likewise.
	* elf32-s390.c: Likewise.
	* elf32-score.h: Likewise.
	* elf32-sh-symbian.c: Likewise.
	* elf32-sh.c: Likewise.
	* elf32-spu.c: Likewise.
	* elf32-tic6x.c: Likewise.
	* elf32-v850.c: Likewise.
	* elf32-xc16x.c: Likewise.
	* elf32-xtensa.c: Likewise.
	* elf64-alpha.c: Likewise.
	* elf64-hppa.c: Likewise.
	* elf64-ppc.c: Likewise.
	* elf64-s390.c: Likewise.
	* elfcore.h: Likewise.
	* elflink.c: Likewise.
	* elfxx-mips.c: Likewise.
	* elfxx-sparc.c: Likewise.
	* elfxx-tilegx.c: Likewise.
	* ieee.c: Likewise.
	* libcoff.h: Likewise.
	* libpei.h: Likewise.
	* libxcoff.h: Likewise.
	* linker.c: Likewise.
	* mach-o-i386.c: Likewise.
	* mach-o-target.c: Likewise.
	* mach-o.c: Likewise.
	* mach-o.h: Likewise.
	* mmo.c: Likewise.
	* opncls.c: Likewise.
	* pdp11.c: Likewise.
	* pe-x86_64.c: Likewise.
	* peXXigen.c: Likewise.
	* pef-traceback.h: Likewise.
	* pei-x86_64.c: Likewise.
	* peicode.h: Likewise.
	* plugin.c: Likewise.
	* reloc.c: Likewise.
	* riscix.c: Likewise.
	* section.c: Likewise.
	* som.c: Likewise.
	* syms.c: Likewise.
	* tekhex.c: Likewise.
	* ticoff.h: Likewise.
	* vaxbsd.c: Likewise.
	* xcofflink.c: Likewise.
	* xtensa-isa.c: Likewise.
@
text
@/* BFD XCOFF object file private structure.
   Copyright 2001, 2002, 2005, 2007, 2009 Free Software Foundation, Inc.
   Written by Tom Rix, Redhat.

   This file is part of BFD, the Binary File Descriptor library.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,
   MA 02110-1301, USA.  */

#ifndef LIBXCOFF_H
#define LIBXCOFF_H

/* This is the backend information kept for XCOFF files.  This
   structure is constant for a particular backend.  The first element
   is the COFF backend data structure, so that XCOFF targets can use
   the generic COFF code.  */

struct xcoff_backend_data_rec
{
  /* COFF backend information.  */
  bfd_coff_backend_data coff;

  /* Magic number.  */
  unsigned short _xcoff_magic_number;

  /* Architecture and machine for coff_set_arch_mach_hook.  */
  enum bfd_architecture _xcoff_architecture;
  long _xcoff_machine;

  /* Function pointers to xcoff specific swap routines.  */
  void (* _xcoff_swap_ldhdr_in) (bfd *, const void *, struct internal_ldhdr *);
  void (* _xcoff_swap_ldhdr_out)(bfd *, const struct internal_ldhdr *, void *);
  void (* _xcoff_swap_ldsym_in) (bfd *, const void *, struct internal_ldsym *);
  void (* _xcoff_swap_ldsym_out)(bfd *, const struct internal_ldsym *, void *);
  void (* _xcoff_swap_ldrel_in) (bfd *, const void *, struct internal_ldrel *);
  void (* _xcoff_swap_ldrel_out)(bfd *, const struct internal_ldrel *, void *);

  /* Size of the external struct.  */
  unsigned int _xcoff_ldhdrsz;
  unsigned int _xcoff_ldsymsz;
  unsigned int _xcoff_ldrelsz;

  /* Size an entry in a descriptor section.  */
  unsigned int _xcoff_function_descriptor_size;

  /* Size of the small aout file header.  */
  unsigned int _xcoff_small_aout_header_size;

  /* Loader version
     1 : XCOFF32
     2 : XCOFF64.  */
  unsigned long _xcoff_ldhdr_version;

  bfd_boolean (* _xcoff_put_symbol_name)
    (bfd *, struct bfd_strtab_hash *, struct internal_syment *,
     const char *);

  bfd_boolean (* _xcoff_put_ldsymbol_name)
    (bfd *, struct xcoff_loader_info *, struct internal_ldsym *,
     const char *);

  reloc_howto_type *_xcoff_dynamic_reloc;

  asection * (* _xcoff_create_csect_from_smclas)
    (bfd *, union internal_auxent *, const char *);

  /* Line number and relocation overflow.
     XCOFF32 overflows to another section when the line number or the
     relocation count exceeds 0xffff.  XCOFF64 does not overflow.  */
  bfd_boolean (*_xcoff_is_lineno_count_overflow) (bfd *, bfd_vma);
  bfd_boolean (*_xcoff_is_reloc_count_overflow)  (bfd *, bfd_vma);

  /* Loader section symbol and relocation table offset
     XCOFF32 is after the .loader header
     XCOFF64 is offset in .loader header.  */
  bfd_vma (*_xcoff_loader_symbol_offset) (bfd *, struct internal_ldhdr *);
  bfd_vma (*_xcoff_loader_reloc_offset)  (bfd *, struct internal_ldhdr *);

  /* Global linkage.  The first word of global linkage code must be be
     modified by filling in the correct TOC offset.  */
  unsigned long *_xcoff_glink_code;

  /* Size of the global link code in bytes of the xcoff_glink_code table.  */
  unsigned long _xcoff_glink_size;

  /* rtinit.  */
  unsigned int _xcoff_rtinit_size;
  bfd_boolean (*_xcoff_generate_rtinit)
    (bfd *, const char *, const char *, bfd_boolean);
};

/* Look up an entry in an XCOFF link hash table.  */
#define xcoff_link_hash_lookup(table, string, create, copy, follow) \
  ((struct xcoff_link_hash_entry *) \
   bfd_link_hash_lookup (&(table)->root, (string), (create), (copy),\
			 (follow)))

/* Traverse an XCOFF link hash table.  */
#define xcoff_link_hash_traverse(table, func, info)			\
  (bfd_link_hash_traverse						\
   (&(table)->root,							\
    (bfd_boolean (*) (struct bfd_link_hash_entry *, void *)) (func),	\
    (info)))

/* Get the XCOFF link hash table from the info structure.  This is
   just a cast.  */
#define xcoff_hash_table(p) ((struct xcoff_link_hash_table *) ((p)->hash))


#define xcoff_backend(abfd) \
  ((struct xcoff_backend_data_rec *) (abfd)->xvec->backend_data)

#define bfd_xcoff_magic_number(a) ((xcoff_backend (a)->_xcoff_magic_number))
#define bfd_xcoff_architecture(a) ((xcoff_backend (a)->_xcoff_architecture))
#define bfd_xcoff_machine(a)      ((xcoff_backend (a)->_xcoff_machine))

#define bfd_xcoff_swap_ldhdr_in(a, b, c) \
  ((xcoff_backend (a)->_xcoff_swap_ldhdr_in) ((a), (b), (c)))

#define bfd_xcoff_swap_ldhdr_out(a, b, c) \
  ((xcoff_backend (a)->_xcoff_swap_ldhdr_out) ((a), (b), (c)))

#define bfd_xcoff_swap_ldsym_in(a, b, c) \
  ((xcoff_backend (a)->_xcoff_swap_ldsym_in) ((a), (b), (c)))

#define bfd_xcoff_swap_ldsym_out(a, b, c) \
  ((xcoff_backend (a)->_xcoff_swap_ldsym_out) ((a), (b), (c)))

#define bfd_xcoff_swap_ldrel_in(a, b, c) \
  ((xcoff_backend (a)->_xcoff_swap_ldrel_in) ((a), (b), (c)))

#define bfd_xcoff_swap_ldrel_out(a, b, c) \
  ((xcoff_backend (a)->_xcoff_swap_ldrel_out) ((a), (b), (c)))

#define bfd_xcoff_ldhdrsz(a) ((xcoff_backend (a)->_xcoff_ldhdrsz))
#define bfd_xcoff_ldsymsz(a) ((xcoff_backend (a)->_xcoff_ldsymsz))
#define bfd_xcoff_ldrelsz(a) ((xcoff_backend (a)->_xcoff_ldrelsz))
#define bfd_xcoff_function_descriptor_size(a) \
  ((xcoff_backend (a)->_xcoff_function_descriptor_size))
#define bfd_xcoff_small_aout_header_size(a) \
  ((xcoff_backend (a)->_xcoff_small_aout_header_size))

#define bfd_xcoff_ldhdr_version(a) ((xcoff_backend (a)->_xcoff_ldhdr_version))

#define bfd_xcoff_put_symbol_name(a, b, c, d) \
  ((xcoff_backend (a)->_xcoff_put_symbol_name) ((a), (b), (c), (d)))

#define bfd_xcoff_put_ldsymbol_name(a, b, c, d) \
  ((xcoff_backend (a)->_xcoff_put_ldsymbol_name) ((a), (b), (c), (d)))

/* Get the XCOFF hash table entries for a BFD.  */
#define obj_xcoff_sym_hashes(bfd) \
  ((struct xcoff_link_hash_entry **) obj_coff_sym_hashes (bfd))

#define bfd_xcoff_dynamic_reloc_howto(a) \
   ((xcoff_backend (a)->_xcoff_dynamic_reloc))

#define bfd_xcoff_create_csect_from_smclas(a, b, c) \
   ((xcoff_backend (a)->_xcoff_create_csect_from_smclas((a), (b), (c))))

#define bfd_xcoff_is_lineno_count_overflow(a, b) \
   ((xcoff_backend (a)->_xcoff_is_lineno_count_overflow((a), (b))))

#define bfd_xcoff_is_reloc_count_overflow(a, b) \
   ((xcoff_backend (a)->_xcoff_is_reloc_count_overflow((a), (b))))

#define bfd_xcoff_loader_symbol_offset(a, b) \
 ((xcoff_backend (a)->_xcoff_loader_symbol_offset((a), (b))))

#define bfd_xcoff_loader_reloc_offset(a, b) \
 ((xcoff_backend (a)->_xcoff_loader_reloc_offset((a), (b))))

#define bfd_xcoff_glink_code(a, b)   ((xcoff_backend (a)->_xcoff_glink_code[(b)]))
#define bfd_xcoff_glink_code_size(a) ((xcoff_backend (a)->_xcoff_glink_size))

/* Check for the magic number U803XTOCMAGIC or U64_TOCMAGIC for 64 bit
   targets.  */
#define bfd_xcoff_is_xcoff64(a) \
  (   (0x01EF == (bfd_xcoff_magic_number (a))) \
   || (0x01F7 == (bfd_xcoff_magic_number (a))))

/* Check for the magic number U802TOMAGIC for 32 bit targets.  */
#define bfd_xcoff_is_xcoff32(a) (0x01DF == (bfd_xcoff_magic_number (a)))

#define bfd_xcoff_rtinit_size(a)              ((xcoff_backend (a)->_xcoff_rtinit_size))
#define bfd_xcoff_generate_rtinit(a, b, c, d) ((xcoff_backend (a)->_xcoff_generate_rtinit ((a), (b), (c), (d))))

/* Accessor macros for tdata.  */
#define bfd_xcoff_text_align_power(a) ((xcoff_data (a)->text_align_power))
#define bfd_xcoff_data_align_power(a) ((xcoff_data (a)->data_align_power))

/* xcoff*_ppc_relocate_section macros  */
#define XCOFF_MAX_CALCULATE_RELOCATION (0x1c)
#define XCOFF_MAX_COMPLAIN_OVERFLOW (4)
/* N_ONES produces N one bits, without overflowing machine arithmetic.  */
#ifdef N_ONES
#undef N_ONES
#endif
#define N_ONES(n) (((((bfd_vma) 1 << ((n) - 1)) - 1) << 1) | 1)

#define XCOFF_RELOC_FUNCTION_ARGS \
  bfd *, asection *, bfd *, struct internal_reloc *, \
  struct internal_syment *, struct reloc_howto_struct *, bfd_vma, bfd_vma, \
  bfd_vma *relocation, bfd_byte *contents

#define XCOFF_COMPLAIN_FUNCTION_ARGS \
  bfd *, bfd_vma, bfd_vma, struct reloc_howto_struct *howto

extern bfd_boolean (*xcoff_calculate_relocation[XCOFF_MAX_CALCULATE_RELOCATION])
  (XCOFF_RELOC_FUNCTION_ARGS);
extern bfd_boolean (*xcoff_complain_overflow[XCOFF_MAX_COMPLAIN_OVERFLOW])
  (XCOFF_COMPLAIN_FUNCTION_ARGS);

#define XCOFF_NO_LONG_SECTION_NAMES  (FALSE), bfd_coff_set_long_section_names_disallowed

/* Relocation functions */
bfd_boolean xcoff_reloc_type_noop (XCOFF_RELOC_FUNCTION_ARGS);
bfd_boolean xcoff_reloc_type_fail (XCOFF_RELOC_FUNCTION_ARGS);
bfd_boolean xcoff_reloc_type_pos  (XCOFF_RELOC_FUNCTION_ARGS);
bfd_boolean xcoff_reloc_type_neg  (XCOFF_RELOC_FUNCTION_ARGS);
bfd_boolean xcoff_reloc_type_rel  (XCOFF_RELOC_FUNCTION_ARGS);
bfd_boolean xcoff_reloc_type_toc  (XCOFF_RELOC_FUNCTION_ARGS);
bfd_boolean xcoff_reloc_type_ba   (XCOFF_RELOC_FUNCTION_ARGS);
bfd_boolean xcoff_reloc_type_crel (XCOFF_RELOC_FUNCTION_ARGS);

/* Structure to describe dwarf sections.
   Useful to convert from XCOFF section name to flag and vice-versa.
   Also mark if section has a length field at the beginning.  */
struct xcoff_dwsect_name {
  /* A XCOFF dwarf section is identified by its name.  */
  unsigned int flag;

  /* Corresponding XCOFF section name.  */
  const char *name;

  /* True if size must be prepended.  */
  bfd_boolean def_size;
};

/* Number of entries in the array.  The number is known and public so that user
   can 'extend' this array by index.  */
#define XCOFF_DWSECT_NBR_NAMES	8

/* The dwarf sections array.  */
extern const struct xcoff_dwsect_name
  xcoff_dwsect_names[XCOFF_DWSECT_NBR_NAMES];

#endif /* LIBXCOFF_H */
@


1.20
log
@bfd
2011-05-18  Tristan Gingold  <gingold@@adacore.com>

	* libxcoff.h (struct xcoff_dwsect_name): New type.
	(XCOFF_DWSECT_NBR_NAMES): New macro.
	(xcoff_dwsect_names): Declare.
	* coffcode.h (sec_to_styp_flags): Handle xcoff dwarf sections.
	(styp_to_sec_flags): Ditto.
	(coff_new_section_hook): Ditto.
	(coff_slurp_symbol_table): Handle C_DWARF and C_INFO.
	* coff-rs6000.c (xcoff_dwsect_name): New variable.

gas
2011-05-18  Tristan Gingold  <gingold@@adacore.com>

	* config/tc-ppc.h (ppc_tc_sy): Reorder fields.
	Put size into an union with dw.
	(OBJ_COPY_SYMBOL_ATTRIBUTES): Adjust.
	(ppc_xcoff_end): Declare.
	(md_end): Define.
	* config/tc-ppc.c: Add includes for xcoff.
	(ppc_dwsect): New function.
	(md_pseudo_table): Add dwsect.
	(struct dw_subsection): New.
	(dw_sections): New.
	(ppc_change_debug_section): New function.
	(ppc_xcoff_end): Ditto.
	(ppc_function): Adjust for ppc_tc_sy.
	(ppc_symbol_new_hook): Ditto.
	(ppc_frob_symbol): Ditto.
	(ppc_frob_section): Do not set vma for debug sections.
	(ppc_fix_adjustable): Return true for debug sections.
	* config/obj-coff.c: Add includes for xcoff.
	(coff_frob_section): Handle dwarf section.

gas/testsuite
2011-05-18  Tristan Gingold  <gingold@@adacore.com>

	* gas/ppc/xcoff-dwsect-1-32.d: New test.
	* gas/ppc/xcoff-dwsect-1-64.d: Ditto.
	* gas/ppc/xcoff-dwsect-1.s: New file.
	* gas/ppc/aix.exp (do_align_test): Add tests.
@
text
@d80 1
a80 1
     XCOFF32 overflows to another section when the line number or the 
d90 2
a91 2
  
  /* Global linkage.  The first word of global linkage code must be be 
d94 1
a94 1
  
d188 1
a188 1
/* Check for the magic number U803XTOCMAGIC or U64_TOCMAGIC for 64 bit 
@


1.19
log
@update copyright dates
@
text
@d238 22
@


1.18
log
@bfd/ChangeLog

	* coff-alpha.c (alpha_ecoff_backend_data):  Initialise fields which
	control long section name handling with ECOFF_NO_LONG_SECTION_NAMES.
	* coff-mips.c (mips_ecoff_backend_data):  Likewise.
	* coff-rs6000.c (bfd_xcoff_backend_data):  Initialise fields which
	control long section name handling with XCOFF_NO_LONG_SECTION_NAMES.
	(bfd_pmac_xcoff_backend_data):  Likewise.
	* coff64-rs6000.c (bfd_xcoff_backend_data):  Likewise.
	(bfd_xcoff_aix5_backend_data):  Likewise.
	(xcoff64_write_object_contents):  Delete unused long_section_names
	local variable.
	* coff-sh.c (bfd_coff_small_swap_table):  Initialise long section
	name members using COFF_DEFAULT_LONG_SECTION_NAMES and make entire
	struct non-const.
	* coffcode.h (documentation):  Update to describe long section names.
	(COFFLONGSECTIONCATHELPER):  New helper macro.
	(BLANKOR1TOODD):  Likewise.
	(COFF_ENABLE_LONG_SECTION_NAMES):  Likewise.
	(COFF_LONG_SECTION_NAMES_SETTER):  Likewise.
	(COFF_DEFAULT_LONG_SECTION_NAMES):  Likewise.
	(bfd_coff_set_long_section_names_allowed):  New function.
	(bfd_coff_set_long_section_names_disallowed):  Likewise.
	(struct bfd_coff_backend_data):  Add new backend hook function
	pointer _bfd_coff_set_long_section_names.
	(bfd_coff_set_long_section_names):  New backend hook.
	(coff_write_object_contents):  Only generate long section names if
	bfd_coff_long_section_names() indicates they are currently enabled.
	(bfd_coff_std_swap_table):  Make non-const, and initialise long
	section name fields using COFF_DEFAULT_LONG_SECTION_NAMES.
	(ticoff0_swap_table):  Likewise to both.
	(ticoff1_swap_table):  Again, likewise to both.
	* coffgen.c (make_a_section_from_file):  Allow long section names
	as inputs even if not currently allowed for outputs.
	* ecoff.c (_bfd_ecoff_no_long_sections):  New function.
	* efi-app-ia32.c (COFF_LONG_SECTION_NAMES):  Define to 0, not blank.
	* efi-app-ia64.c (COFF_LONG_SECTION_NAMES):  Likewise.
	* efi-app-x86_64.c (COFF_LONG_SECTION_NAMES):  Likewise.
	* efi-bsdrv-ia32.c (COFF_LONG_SECTION_NAMES):  Likewise.
	* efi-bsdrv-ia64.c (COFF_LONG_SECTION_NAMES):  Likewise.
	* efi-bsdrv-x86_64.c (COFF_LONG_SECTION_NAMES):  Likewise.
	* efi-rtdrv-ia32.c (COFF_LONG_SECTION_NAMES):  Likewise.
	* efi-rtdrv-ia64.c (COFF_LONG_SECTION_NAMES):  Likewise.
	* efi-rtdrv-x86_64.c (COFF_LONG_SECTION_NAMES):  Likewise.
	* pei-arm.c (COFF_LONG_SECTION_NAMES):  Likewise.
	* pei-i386.c (COFF_LONG_SECTION_NAMES):  Likewise.
	* pei-mcore.c (COFF_LONG_SECTION_NAMES):  Likewise.
	* pei-mips.c (COFF_LONG_SECTION_NAMES):  Likewise.
	* pei-ppc.c (COFF_LONG_SECTION_NAMES):  Likewise.
	* pei-sh.c (COFF_LONG_SECTION_NAMES):  Likewise.
	* pei-x86_64.c (COFF_LONG_SECTION_NAMES):  Likewise.
	* libcoff-in.h:  Update copyright year to cause updated copyright
	year in generated libcoff.h, and fix typo.
	* libcoff.h:  Regenerated.
	* libecoff.h (ECOFF_NO_LONG_SECTION_NAMES):  New macro.
	(_bfd_ecoff_no_long_sections):  Add prototype.
	* libxcoff.h (XCOFF_NO_LONG_SECTION_NAMES):  New macro.
	* pe-mips.c (COFF_LONG_SECTION_NAMES):  Define empty if not already
	defined by an including .c file.
	* ticoff.h (ticoff0_swap_table):  Make non-const, and initialise
	long section name fields using COFF_DEFAULT_LONG_SECTION_NAMES.
	(ticoff1_swap_table):  Likewise to both.

ld/ChangeLog

	* ld.texinfo:  Update to mention long section name options.
	* NEWS:  Mention new behaviour and command-line options.
	* pe-dll.c (pe_use_coff_long_section_names):  New global variable.
	(pe_output_file_set_long_section_names):  New function.
	(pe_dll_build_sections):  Call it on output BFDs.
	(pe_exe_build_sections):  Likewise.
	(pe_dll_fill_sections):  Likewise.
	(pe_exe_fill_sections):  Likewise.
	* pe-dll.h (pe_use_coff_long_section_names):  Declare extern.
	(pe_output_file_set_long_section_names):  Add prototype.
	* pep-dll.c (pe_use_coff_long_section_names):  Define pep_ alias.
	(pe_output_file_set_long_section_names):  Likewise.
	* pep-dll.h (pep_use_coff_long_section_names):  Declare extern.
	(pep_output_file_set_long_section_names):  Add prototype.
	* pe.em (OPTION_ENABLE_LONG_SECTION_NAMES):  New getopt value macro.
	(OPTION_DISABLE_LONG_SECTION_NAMES):  Likewise.
	(gld${EMULATION_NAME}_add_options):  Add new options to xtra_long[].
	(gld_${EMULATION_NAME}_list_options):  Describe them.
	(gld${EMULATION_NAME}_handle_option):  Set or clear global
	pe_use_coff_long_section_names flag when options recognised.
	(gld_${EMULATION_NAME}_after_open):  En/disable long section names
	for main output bfd by calling pe_output_file_set_long_section_names.
	* pep.em (enum options):  Extend enum with new getopt option values.
	(gld${EMULATION_NAME}_add_options):  Add new options to xtra_long[].
	(gld_${EMULATION_NAME}_list_options):  Describe them.
	(gld${EMULATION_NAME}_handle_option):  Set or clear global
	pe_use_coff_long_section_names flag when options recognised.
	(gld_${EMULATION_NAME}_after_open):  En/disable long section names
	for main output bfd by calling pep_output_file_set_long_section_names.

ld/testsuite/ChangeLog

	* ld-pe/longsecn-1.d:  New test file.
	* ld-pe/longsecn-2.d:  Likewise.
	* ld-pe/longsecn-3.d:  Likewise.
	* ld-pe/longsecn-4.d:  Likewise.
	* ld-pe/longsecn-5.d:  Likewise.
	* ld-pe/longsecn.d:  Likewise.
	* ld-pe/longsecn.exp:  New test control script.
	* ld-pe/longsecn.s:  New test source file.
@
text
@d2 1
a2 1
   Copyright 2001, 2002, 2005, 2007 Free Software Foundation, Inc.
@


1.17
log
@Switch sources over to use the GPL version 3
@
text
@d226 2
@


1.16
log
@Update the address and phone number of the FSF organization in the GPL notices
@
text
@d2 1
a2 1
   Copyright 2001, 2002, 2005 Free Software Foundation, Inc.
d9 1
a9 1
   the Free Software Foundation; either version 2 of the License, or
d19 2
a20 1
   Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA 02110-1301, USA.  */
@


1.15
log
@Update the FSF address in the copyright/GPL notice
@
text
@d19 1
a19 1
   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02110-1301, USA.  */
@


1.14
log
@Update to ISO-C90 and fix formatting
@
text
@d19 1
a19 1
   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
@


1.13
log
@s/boolean/bfd_boolean/ s/true/TRUE/ s/false/FALSE/.  Simplify
comparisons of bfd_boolean vars with TRUE/FALSE.  Formatting.
@
text
@d2 1
a2 1
   Copyright 2001, 2002 Free Software Foundation, Inc.
d42 6
a47 12
  void (* _xcoff_swap_ldhdr_in)
    PARAMS ((bfd *, const PTR, struct internal_ldhdr *));
  void (* _xcoff_swap_ldhdr_out)
    PARAMS ((bfd *, const struct internal_ldhdr *, PTR));
  void (* _xcoff_swap_ldsym_in)
    PARAMS ((bfd *, const PTR, struct internal_ldsym *));
  void (* _xcoff_swap_ldsym_out)
    PARAMS ((bfd *, const struct internal_ldsym *, PTR));
  void (* _xcoff_swap_ldrel_in)
    PARAMS ((bfd *, const PTR, struct internal_ldrel *));
  void (* _xcoff_swap_ldrel_out)
    PARAMS ((bfd *, const struct internal_ldrel *, PTR));
d66 2
a67 2
    PARAMS ((bfd *, struct bfd_strtab_hash *, struct internal_syment *,
	     const char *));
d70 2
a71 2
    PARAMS ((bfd *, struct xcoff_loader_info *, struct internal_ldsym *,
	     const char *));
d76 1
a76 1
    PARAMS ((bfd *, union internal_auxent *, const char *));
d81 2
a82 4
  bfd_boolean (*_xcoff_is_lineno_count_overflow)
    PARAMS ((bfd *, bfd_vma));
  bfd_boolean (*_xcoff_is_reloc_count_overflow)
    PARAMS ((bfd *, bfd_vma));
d87 2
a88 4
  bfd_vma (*_xcoff_loader_symbol_offset)
    PARAMS ((bfd *, struct internal_ldhdr *));
  bfd_vma (*_xcoff_loader_reloc_offset)
    PARAMS ((bfd *, struct internal_ldhdr *));
d100 1
a100 1
    PARAMS ((bfd *, const char *, const char *, bfd_boolean));
d113 1
a113 1
    (bfd_boolean (*) PARAMS ((struct bfd_link_hash_entry *, PTR))) (func),	\
d124 3
a126 3
#define bfd_xcoff_magic_number(a) ((xcoff_backend(a)->_xcoff_magic_number))
#define bfd_xcoff_architecture(a) ((xcoff_backend(a)->_xcoff_architecture))
#define bfd_xcoff_machine(a) ((xcoff_backend(a)->_xcoff_machine))
d129 1
a129 1
  ((xcoff_backend(a)->_xcoff_swap_ldhdr_in) ((a), (b), (c)))
d132 1
a132 1
  ((xcoff_backend(a)->_xcoff_swap_ldhdr_out) ((a), (b), (c)))
d135 1
a135 1
  ((xcoff_backend(a)->_xcoff_swap_ldsym_in) ((a), (b), (c)))
d138 1
a138 1
  ((xcoff_backend(a)->_xcoff_swap_ldsym_out) ((a), (b), (c)))
d141 1
a141 1
  ((xcoff_backend(a)->_xcoff_swap_ldrel_in) ((a), (b), (c)))
d144 1
a144 1
  ((xcoff_backend(a)->_xcoff_swap_ldrel_out) ((a), (b), (c)))
d146 3
a148 3
#define bfd_xcoff_ldhdrsz(a) ((xcoff_backend(a)->_xcoff_ldhdrsz))
#define bfd_xcoff_ldsymsz(a) ((xcoff_backend(a)->_xcoff_ldsymsz))
#define bfd_xcoff_ldrelsz(a) ((xcoff_backend(a)->_xcoff_ldrelsz))
d150 1
a150 1
  ((xcoff_backend(a)->_xcoff_function_descriptor_size))
d152 1
a152 1
  ((xcoff_backend(a)->_xcoff_small_aout_header_size))
d154 1
a154 1
#define bfd_xcoff_ldhdr_version(a) ((xcoff_backend(a)->_xcoff_ldhdr_version))
d157 1
a157 1
  ((xcoff_backend(a)->_xcoff_put_symbol_name) ((a), (b), (c), (d)))
d160 1
a160 1
  ((xcoff_backend(a)->_xcoff_put_ldsymbol_name) ((a), (b), (c), (d)))
d167 1
a167 1
   ((xcoff_backend(a)->_xcoff_dynamic_reloc))
d170 1
a170 1
   ((xcoff_backend(a)->_xcoff_create_csect_from_smclas((a), (b), (c))))
d173 1
a173 1
   ((xcoff_backend(a)->_xcoff_is_lineno_count_overflow((a), (b))))
d176 1
a176 1
   ((xcoff_backend(a)->_xcoff_is_reloc_count_overflow((a), (b))))
d179 1
a179 1
 ((xcoff_backend(a)->_xcoff_loader_symbol_offset((a), (b))))
d182 1
a182 1
 ((xcoff_backend(a)->_xcoff_loader_reloc_offset((a), (b))))
d184 2
a185 2
#define bfd_xcoff_glink_code(a, b) ((xcoff_backend(a)->_xcoff_glink_code[(b)]))
#define bfd_xcoff_glink_code_size(a) ((xcoff_backend(a)->_xcoff_glink_size))
d190 2
a191 2
  (   (0x01EF == (bfd_xcoff_magic_number(a))) \
   || (0x01F7 == (bfd_xcoff_magic_number(a))))
d194 1
a194 1
#define bfd_xcoff_is_xcoff32(a) (0x01DF == (bfd_xcoff_magic_number(a)))
d196 2
a197 2
#define bfd_xcoff_rtinit_size(a) ((xcoff_backend(a)->_xcoff_rtinit_size))
#define bfd_xcoff_generate_rtinit(a, b, c, d) ((xcoff_backend(a)->_xcoff_generate_rtinit ((a), (b), (c), (d))))
d221 1
a221 1
  PARAMS ((XCOFF_RELOC_FUNCTION_ARGS));
d223 1
a223 1
  PARAMS ((XCOFF_COMPLAIN_FUNCTION_ARGS));
d226 8
a233 8
bfd_boolean xcoff_reloc_type_noop PARAMS ((XCOFF_RELOC_FUNCTION_ARGS));
bfd_boolean xcoff_reloc_type_fail PARAMS ((XCOFF_RELOC_FUNCTION_ARGS));
bfd_boolean xcoff_reloc_type_pos PARAMS ((XCOFF_RELOC_FUNCTION_ARGS));
bfd_boolean xcoff_reloc_type_neg PARAMS ((XCOFF_RELOC_FUNCTION_ARGS));
bfd_boolean xcoff_reloc_type_rel PARAMS ((XCOFF_RELOC_FUNCTION_ARGS));
bfd_boolean xcoff_reloc_type_toc PARAMS ((XCOFF_RELOC_FUNCTION_ARGS));
bfd_boolean xcoff_reloc_type_ba PARAMS ((XCOFF_RELOC_FUNCTION_ARGS));
bfd_boolean xcoff_reloc_type_crel PARAMS ((XCOFF_RELOC_FUNCTION_ARGS));
@


1.12
log
@	* libxcoff.h: Use PARAMS on function declarations.
	* coff-rs6000.c (xcoff_generate_rtinit): Simplify size calc.
	* coff64-rs6000.c (xcoff64_generate_rtinit): Likewise.
@
text
@d2 1
a2 1
   Copyright (C) 2001, 2002 Free Software Foundation, Inc.
d71 1
a71 1
  boolean (* _xcoff_put_symbol_name)
d75 1
a75 1
  boolean (* _xcoff_put_ldsymbol_name)
d87 1
a87 1
  boolean (*_xcoff_is_lineno_count_overflow)
d89 1
a89 1
  boolean (*_xcoff_is_reloc_count_overflow)
d109 2
a110 2
  boolean (*_xcoff_generate_rtinit)
    PARAMS ((bfd *, const char *, const char *, boolean));
d123 1
a123 1
    (boolean (*) PARAMS ((struct bfd_link_hash_entry *, PTR))) (func),	\
d230 1
a230 1
extern boolean (*xcoff_calculate_relocation[XCOFF_MAX_CALCULATE_RELOCATION])
d232 1
a232 1
extern boolean (*xcoff_complain_overflow[XCOFF_MAX_COMPLAIN_OVERFLOW])
d236 8
a243 8
boolean xcoff_reloc_type_noop PARAMS ((XCOFF_RELOC_FUNCTION_ARGS));
boolean xcoff_reloc_type_fail PARAMS ((XCOFF_RELOC_FUNCTION_ARGS));
boolean xcoff_reloc_type_pos PARAMS ((XCOFF_RELOC_FUNCTION_ARGS));
boolean xcoff_reloc_type_neg PARAMS ((XCOFF_RELOC_FUNCTION_ARGS));
boolean xcoff_reloc_type_rel PARAMS ((XCOFF_RELOC_FUNCTION_ARGS));
boolean xcoff_reloc_type_toc PARAMS ((XCOFF_RELOC_FUNCTION_ARGS));
boolean xcoff_reloc_type_ba PARAMS ((XCOFF_RELOC_FUNCTION_ARGS));
boolean xcoff_reloc_type_crel PARAMS ((XCOFF_RELOC_FUNCTION_ARGS));
@


1.12.12.1
log
@Merge drow-cplus-branch to:
  cvs rtag -D 2003-12-14 00:00:00 UTC drow-cplus-merge-20031214 gdb+dejagnu
@
text
@d2 1
a2 1
   Copyright 2001, 2002 Free Software Foundation, Inc.
d71 1
a71 1
  bfd_boolean (* _xcoff_put_symbol_name)
d75 1
a75 1
  bfd_boolean (* _xcoff_put_ldsymbol_name)
d87 1
a87 1
  bfd_boolean (*_xcoff_is_lineno_count_overflow)
d89 1
a89 1
  bfd_boolean (*_xcoff_is_reloc_count_overflow)
d109 2
a110 2
  bfd_boolean (*_xcoff_generate_rtinit)
    PARAMS ((bfd *, const char *, const char *, bfd_boolean));
d123 1
a123 1
    (bfd_boolean (*) PARAMS ((struct bfd_link_hash_entry *, PTR))) (func),	\
d230 1
a230 1
extern bfd_boolean (*xcoff_calculate_relocation[XCOFF_MAX_CALCULATE_RELOCATION])
d232 1
a232 1
extern bfd_boolean (*xcoff_complain_overflow[XCOFF_MAX_COMPLAIN_OVERFLOW])
d236 8
a243 8
bfd_boolean xcoff_reloc_type_noop PARAMS ((XCOFF_RELOC_FUNCTION_ARGS));
bfd_boolean xcoff_reloc_type_fail PARAMS ((XCOFF_RELOC_FUNCTION_ARGS));
bfd_boolean xcoff_reloc_type_pos PARAMS ((XCOFF_RELOC_FUNCTION_ARGS));
bfd_boolean xcoff_reloc_type_neg PARAMS ((XCOFF_RELOC_FUNCTION_ARGS));
bfd_boolean xcoff_reloc_type_rel PARAMS ((XCOFF_RELOC_FUNCTION_ARGS));
bfd_boolean xcoff_reloc_type_toc PARAMS ((XCOFF_RELOC_FUNCTION_ARGS));
bfd_boolean xcoff_reloc_type_ba PARAMS ((XCOFF_RELOC_FUNCTION_ARGS));
bfd_boolean xcoff_reloc_type_crel PARAMS ((XCOFF_RELOC_FUNCTION_ARGS));
@


1.12.10.1
log
@2002-12-23  David Carlton  <carlton@@math.stanford.edu>

	* Merge from mainline; tag is carlton_dictionary-20021223-merge.
@
text
@d2 1
a2 1
   Copyright 2001, 2002 Free Software Foundation, Inc.
d71 1
a71 1
  bfd_boolean (* _xcoff_put_symbol_name)
d75 1
a75 1
  bfd_boolean (* _xcoff_put_ldsymbol_name)
d87 1
a87 1
  bfd_boolean (*_xcoff_is_lineno_count_overflow)
d89 1
a89 1
  bfd_boolean (*_xcoff_is_reloc_count_overflow)
d109 2
a110 2
  bfd_boolean (*_xcoff_generate_rtinit)
    PARAMS ((bfd *, const char *, const char *, bfd_boolean));
d123 1
a123 1
    (bfd_boolean (*) PARAMS ((struct bfd_link_hash_entry *, PTR))) (func),	\
d230 1
a230 1
extern bfd_boolean (*xcoff_calculate_relocation[XCOFF_MAX_CALCULATE_RELOCATION])
d232 1
a232 1
extern bfd_boolean (*xcoff_complain_overflow[XCOFF_MAX_COMPLAIN_OVERFLOW])
d236 8
a243 8
bfd_boolean xcoff_reloc_type_noop PARAMS ((XCOFF_RELOC_FUNCTION_ARGS));
bfd_boolean xcoff_reloc_type_fail PARAMS ((XCOFF_RELOC_FUNCTION_ARGS));
bfd_boolean xcoff_reloc_type_pos PARAMS ((XCOFF_RELOC_FUNCTION_ARGS));
bfd_boolean xcoff_reloc_type_neg PARAMS ((XCOFF_RELOC_FUNCTION_ARGS));
bfd_boolean xcoff_reloc_type_rel PARAMS ((XCOFF_RELOC_FUNCTION_ARGS));
bfd_boolean xcoff_reloc_type_toc PARAMS ((XCOFF_RELOC_FUNCTION_ARGS));
bfd_boolean xcoff_reloc_type_ba PARAMS ((XCOFF_RELOC_FUNCTION_ARGS));
bfd_boolean xcoff_reloc_type_crel PARAMS ((XCOFF_RELOC_FUNCTION_ARGS));
@


1.11
log
@XCOFF64 fixes. For setting arch/mach and for R_BR relocations.
@
text
@d42 12
a53 6
  void (* _xcoff_swap_ldhdr_in)(bfd *, const PTR, struct internal_ldhdr *);
  void (* _xcoff_swap_ldhdr_out)(bfd *, const struct internal_ldhdr *, PTR);
  void (* _xcoff_swap_ldsym_in)(bfd *, const PTR, struct internal_ldsym *);
  void (* _xcoff_swap_ldsym_out)(bfd *, const struct internal_ldsym *, PTR);
  void (* _xcoff_swap_ldrel_in)(bfd *, const PTR, struct internal_ldrel *);
  void (* _xcoff_swap_ldrel_out)(bfd *, const struct internal_ldrel *, PTR);
d72 2
a73 2
       PARAMS ((bfd *, struct bfd_strtab_hash *, struct internal_syment *,
		const char *));
d76 2
a77 2
       PARAMS ((bfd *, struct xcoff_loader_info *, struct internal_ldsym *,
		const char *));
d82 1
a82 1
       PARAMS ((bfd *, union internal_auxent *, const char *));
d87 4
a90 2
  boolean (*_xcoff_is_lineno_count_overflow)(bfd *, bfd_vma);
  boolean (*_xcoff_is_reloc_count_overflow)(bfd *, bfd_vma);
d95 4
a98 2
  bfd_vma (*_xcoff_loader_symbol_offset)(bfd *, struct internal_ldhdr *);
  bfd_vma (*_xcoff_loader_reloc_offset)(bfd *, struct internal_ldhdr *);
d109 2
a110 2
  boolean (*_xcoff_generate_rtinit)(bfd *, const char *, const char *, 
				    boolean);
d231 1
a231 1
     (XCOFF_RELOC_FUNCTION_ARGS);
d233 1
a233 1
     (XCOFF_COMPLAIN_FUNCTION_ARGS);
@


1.11.4.1
log
@Merge with kseitz_interps-20020809-merge of CVS head.
@
text
@d42 6
a47 12
  void (* _xcoff_swap_ldhdr_in)
    PARAMS ((bfd *, const PTR, struct internal_ldhdr *));
  void (* _xcoff_swap_ldhdr_out)
    PARAMS ((bfd *, const struct internal_ldhdr *, PTR));
  void (* _xcoff_swap_ldsym_in)
    PARAMS ((bfd *, const PTR, struct internal_ldsym *));
  void (* _xcoff_swap_ldsym_out)
    PARAMS ((bfd *, const struct internal_ldsym *, PTR));
  void (* _xcoff_swap_ldrel_in)
    PARAMS ((bfd *, const PTR, struct internal_ldrel *));
  void (* _xcoff_swap_ldrel_out)
    PARAMS ((bfd *, const struct internal_ldrel *, PTR));
d66 2
a67 2
    PARAMS ((bfd *, struct bfd_strtab_hash *, struct internal_syment *,
	     const char *));
d70 2
a71 2
    PARAMS ((bfd *, struct xcoff_loader_info *, struct internal_ldsym *,
	     const char *));
d76 1
a76 1
    PARAMS ((bfd *, union internal_auxent *, const char *));
d81 2
a82 4
  boolean (*_xcoff_is_lineno_count_overflow)
    PARAMS ((bfd *, bfd_vma));
  boolean (*_xcoff_is_reloc_count_overflow)
    PARAMS ((bfd *, bfd_vma));
d87 2
a88 4
  bfd_vma (*_xcoff_loader_symbol_offset)
    PARAMS ((bfd *, struct internal_ldhdr *));
  bfd_vma (*_xcoff_loader_reloc_offset)
    PARAMS ((bfd *, struct internal_ldhdr *));
d99 2
a100 2
  boolean (*_xcoff_generate_rtinit)
    PARAMS ((bfd *, const char *, const char *, boolean));
d221 1
a221 1
  PARAMS ((XCOFF_RELOC_FUNCTION_ARGS));
d223 1
a223 1
  PARAMS ((XCOFF_COMPLAIN_FUNCTION_ARGS));
@


1.10
log
@Rewrite xcoff*_ppc_relocate_section.
@
text
@d225 10
@


1.9
log
@Add AIX 64 shared library support and emulation layer for binutils
@
text
@d203 22
@


1.8
log
@Add support for -brtl, run time linking, to AIX ld.
@
text
@d2 1
a2 1
   Copyright (C) 2001 Free Software Foundation, Inc.
d5 1
a5 1
This file is part of BFD, the Binary File Descriptor library.
d7 13
a19 13
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
d34 1
a34 1
  /* Magic number */
d37 1
a37 1
  /* Architecture and machine for coff_set_arch_mach_hook */
d41 1
a41 1
  /* function pointers to xcoff specific swap routines */
d49 1
a49 1
  /* size of the external struct */
d54 1
a54 1
  /* size an entry in a descriptor section */
d57 1
a57 1
  /* size of the small aout file header */
d62 1
a62 1
     2 : XCOFF64 */
d65 7
a71 7
  boolean (* _xcoff_put_symbol_name)(bfd *, struct bfd_strtab_hash *,
				     struct internal_syment *,
				     const char *);

  boolean (* _xcoff_put_ldsymbol_name)(bfd *, struct xcoff_loader_info *,
				       struct internal_ldsym *,
				       const char *);
d75 2
a76 1
  asection * (* _xcoff_create_csect_from_smclas) (bfd *, union internal_auxent *, const char *);
d86 1
a86 1
     XCOFF64 is offset in .loader header  */
d97 1
a97 1
  /* rtinit */
a103 1

a109 1

a117 1

d187 5
a191 2
/* Check for the magic number U803XTOCMAGIC for 64 bit targets.  */
#define bfd_xcoff_is_xcoff64(a) (0x01EF == (bfd_xcoff_magic_number(a)))
d198 4
@


1.7
log
@Fix for xcoff <bigaf> big archive format support.
@
text
@d98 2
a99 1
  boolean (*_xcoff_generate_rtinit)(bfd *, const char *, const char *);
d196 1
a196 1
#define bfd_xcoff_generate_rtinit(a, b, c) ((xcoff_backend(a)->_xcoff_generate_rtinit ((a), (b), (c))))
@


1.6
log
@-binitfini emulation, put __rtinit symbol generation into linker.
@
text
@d31 1
a31 4
  /*
   * COFF backend information.  Must be the first field.
   * This is where the std coff swap table goes
   */
d60 3
a62 6
  /*
   * version
   * loader version
   * 1 : xcoff32
   * 2 : xcoff64
   */
d77 3
a79 5
  /*
   * line_no and reloc overflow
   * 32 overflows to another section when the line_no or reloc count go
   * over 0xffff.  64 does not overflow.
   */
d83 3
a85 7
  /*
   * .loader symbol table offset
   * 32 is after the .loader header
   * 64 is offset in .loader header
   *
   * Similar for the reloc table
   */
d88 3
a90 8


  /*
   * Global linkage
   *
   * The first word of global linkage code must be be modified by
   * filling in the correct TOC offset.
   */
d92 2
a93 4

  /*
   * Size of the global link code in bytes of the xcoff_glink_code table
   */
a195 58

/* Functions in xcofflink.c.  */

extern long _bfd_xcoff_get_dynamic_symtab_upper_bound PARAMS ((bfd *));
extern long _bfd_xcoff_canonicalize_dynamic_symtab
  PARAMS ((bfd *, asymbol **));
extern long _bfd_xcoff_get_dynamic_reloc_upper_bound PARAMS ((bfd *));
extern long _bfd_xcoff_canonicalize_dynamic_reloc
  PARAMS ((bfd *, arelent **, asymbol **));
extern struct bfd_link_hash_table *_bfd_xcoff_bfd_link_hash_table_create
  PARAMS ((bfd *));
extern boolean _bfd_xcoff_bfd_link_add_symbols
  PARAMS ((bfd *, struct bfd_link_info *));
extern boolean _bfd_xcoff_bfd_final_link
  PARAMS ((bfd *, struct bfd_link_info *));
extern boolean _bfd_xcoff_slurp_symbol_table
  PARAMS ((bfd *));
extern long _bfd_xcoff_get_symbol_table
  PARAMS ((bfd *, asymbol **));
extern asymbol *_bfd_xcoff_make_empty_symbol
  PARAMS ((bfd *));
extern long _bfd_xcoff_get_symbol_table_upper_bound
  PARAMS ((bfd *));
extern void _bfd_xcoff_print_symbol
  PARAMS ((bfd *, PTR, asymbol *, bfd_print_symbol_type));
extern void _bfd_xcoff_get_symbol_info
  PARAMS ((bfd *, asymbol *, symbol_info *));
extern long _bfd_xcoff_canonicalize_reloc
  PARAMS((bfd *, sec_ptr, arelent **, asymbol **));
extern reloc_howto_type *_bfd_xcoff_rtype_to_howto
  PARAMS ((bfd *, asection *, struct internal_reloc *,
	   struct coff_link_hash_entry *, struct internal_syment *,
	   bfd_vma *));
extern boolean _bfd_xcoff_set_section_contents
  PARAMS ((bfd *, asection *, PTR, file_ptr, bfd_size_type));
boolean _bfd_xcoff_write_object_contents PARAMS ((bfd *));


/* XCOFF support routines for the linker.  */

extern boolean bfd_xcoff_link_record_set
  PARAMS ((bfd *, struct bfd_link_info *, struct bfd_link_hash_entry *,
	   bfd_size_type));
extern boolean bfd_xcoff_import_symbol
  PARAMS ((bfd *, struct bfd_link_info *, struct bfd_link_hash_entry *,
	   bfd_vma, const char *, const char *, const char *, unsigned int));
extern boolean bfd_xcoff_export_symbol
  PARAMS ((bfd *, struct bfd_link_info *, struct bfd_link_hash_entry *));
extern boolean bfd_xcoff_link_count_reloc
  PARAMS ((bfd *, struct bfd_link_info *, const char *));
extern boolean bfd_xcoff_record_link_assignment
  PARAMS ((bfd *, struct bfd_link_info *, const char *));
extern boolean bfd_xcoff_size_dynamic_sections
  PARAMS ((bfd *, struct bfd_link_info *, const char *, const char *,
	   unsigned long, unsigned long, unsigned long, boolean,
	   int, boolean, boolean, struct sec **));
extern boolean xcoff_slurp_reloc_table
  PARAMS ((bfd *, asection *, asymbol **));
@


1.5
log
@	* aout-encap.c: Fix comment typos.
	* aoutx.h: Likewise.
	* archive.c: Likewise.
	* bout.c: Likewise.
	* coff64-rs6000.c: Likewise.
	* coffcode.h: Likewise.
	* coffgen.c: Likewise.
	* cofflink.c: Likewise.
	* coff-mips.c: Likewise.
	* ecoff.c: Likewise.
	* elf32-m32r.c: Likewise.
	* libcoff-in.h: Likewise.
	* libecoff.h: Likewise.
	* libxcoff.h: Likewise.
	* nlm32-i386.c: Likewise.
	* pdp11.c: Likewise.
	* section.c: Likewise.
	* som.c: Likewise.
	* som.h: Likewise.
	* bfd-in2.h: Regenerate.
	* libcoff.h: Likewise.
@
text
@d115 3
d207 1
d209 2
d212 3
@


1.4
log
@Touches most files in bfd/, so likely will be blamed for everything..

o  bfd_read and bfd_write lose an unnecessary param and become
   bfd_bread and bfd_bwrite.

o  bfd_*alloc now all take a bfd_size_type arg, and will error if
   size_t is too small.  eg. 32 bit host, 64 bit bfd, verrry big files
   or bugs in linker scripts etc.

o  file_ptr becomes a bfd_signed_vma.  Besides matching sizes with
   various other types involved in handling sections, this should make
   it easier for bfd to support a 64 bit off_t on 32 bit hosts that
   provide it.

o  I've made the H_GET_* and H_PUT_* macros (which invoke bfd_h_{get,put}_*)
   generally available.  They now cast their args to bfd_vma and
   bfd_byte * as appropriate, which removes a swag of casts from the
   source.

o  Bug fixes to bfd_get8, aix386_core_vec, elf32_h8_relax_section, and
   aout-encap.c.

o  Zillions of formatting and -Wconversion fixes.
@
text
@d52 1
a52 1
  /* size of the the external struct */
@


1.3
log
@Fix import symbols for AIX.
@
text
@d31 2
a32 2
  /* 
   * COFF backend information.  Must be the first field.  
d38 1
a38 1
  unsigned short _xcoff_magic_number;              
d53 1
a53 1
  unsigned int _xcoff_ldhdrsz; 
d63 3
a65 3
  /* 
   * version 
   * loader version 
d75 1
a75 1
  boolean (* _xcoff_put_ldsymbol_name)(bfd *, struct xcoff_loader_info *, 
d83 2
a84 2
  /* 
   * line_no and reloc overflow 
d86 1
a86 1
   * over 0xffff.  64 does not overflow. 
d91 1
a91 1
  /* 
d95 1
a95 1
   * 
d102 3
a104 3
  /* 
   * Global linkage 
   * 
d106 1
a106 1
   * filling in the correct TOC offset.  
d110 1
a110 1
  /* 
d221 1
a221 1
extern boolean _bfd_xcoff_slurp_symbol_table 
d223 1
a223 1
extern long _bfd_xcoff_get_symbol_table 
d225 1
a225 1
extern asymbol *_bfd_xcoff_make_empty_symbol 
d227 1
a227 1
extern long _bfd_xcoff_get_symbol_table_upper_bound 
d229 1
a229 1
extern void _bfd_xcoff_print_symbol 
d231 1
a231 1
extern void _bfd_xcoff_get_symbol_info 
d233 1
a233 1
extern long _bfd_xcoff_canonicalize_reloc 
d262 1
a262 1
extern boolean xcoff_slurp_reloc_table 
@


1.2
log
@	* libxcoff.h (struct xcoff_backend_data_rec): Constify src param
	of _xcoff_swap_ld*.
	* coff-rs6000.c (xcoff_swap_ldhdr_in): Modify type of external
	param to agree with libxcoff.h.
	(xcoff_swap_ldhdr_out): Likewise.
	(xcoff_swap_ldsym_in): Likewise.
	(xcoff_swap_ldsym_out): Likewise.
	(xcoff_swap_ldrel_in): Likewise.
	(xcoff_swap_ldrel_out): Likewise.
	(xcoff_create_csect_from_smclas): Likewise.
	* coff64-rs6000.c: Add missing prototypes.
	(xcoff64_swap_ldhdr_in): Modify type of external param to agree
	with libxcoff.h.
	(xcoff64_swap_ldhdr_out): Likewise.
	(xcoff64_swap_ldsym_in): Likewise.
	(xcoff64_swap_ldsym_out): Likewise.
	(xcoff64_swap_ldrel_in): Likewise.
	(xcoff64_swap_ldrel_out): Likewise.
	(xcoff64_ppc_relocate_section): Make static.
	(xcoff64_slurp_armap): Likewise.
	(xcoff64_archive_p): Likewise.
	(xcoff64_openr_next_archived_file): Likewise.
	(xcoff64_sizeof_headers): Likewise.
	(xcoff64_is_lineno_count_overflow): Likewise.
	(xcoff64_is_reloc_count_overflow): Likewise.
	(xcoff64_loader_symbol_offset): Likewise.
	(xcoff64_loader_reloc_offset): Likewise.
	* elf64-gen.c: Add missing prototypes.
@
text
@d251 1
a251 1
	   bfd_vma, const char *, const char *, const char *));
d253 1
a253 2
  PARAMS ((bfd *, struct bfd_link_info *, struct bfd_link_hash_entry *,
	   boolean));
@


1.1
log
@Support for xcoff64
@
text
@d45 6
a50 6
  void (* _xcoff_swap_ldhdr_in)(bfd *, PTR, struct internal_ldhdr *);
  void (* _xcoff_swap_ldhdr_out)(bfd *, struct internal_ldhdr *, PTR);
  void (* _xcoff_swap_ldsym_in)(bfd *, PTR, struct internal_ldsym *);
  void (* _xcoff_swap_ldsym_out)(bfd *, struct internal_ldsym *, PTR);
  void (* _xcoff_swap_ldrel_in)(bfd *, PTR, struct internal_ldrel *);
  void (* _xcoff_swap_ldrel_out)(bfd *, struct internal_ldrel *, PTR);
@

