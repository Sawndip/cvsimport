head	1.34;
access;
symbols
	sid-snapshot-20180601:1.34
	sid-snapshot-20180501:1.34
	sid-snapshot-20180401:1.34
	sid-snapshot-20180301:1.34
	sid-snapshot-20180201:1.34
	sid-snapshot-20180101:1.34
	sid-snapshot-20171201:1.34
	sid-snapshot-20171101:1.34
	sid-snapshot-20171001:1.34
	sid-snapshot-20170901:1.34
	sid-snapshot-20170801:1.34
	sid-snapshot-20170701:1.34
	sid-snapshot-20170601:1.34
	sid-snapshot-20170501:1.34
	sid-snapshot-20170401:1.34
	sid-snapshot-20170301:1.34
	sid-snapshot-20170201:1.34
	sid-snapshot-20170101:1.34
	sid-snapshot-20161201:1.34
	sid-snapshot-20161101:1.34
	sid-snapshot-20160901:1.34
	sid-snapshot-20160801:1.34
	sid-snapshot-20160701:1.34
	sid-snapshot-20160601:1.34
	sid-snapshot-20160501:1.34
	sid-snapshot-20160401:1.34
	sid-snapshot-20160301:1.34
	sid-snapshot-20160201:1.34
	sid-snapshot-20160101:1.34
	sid-snapshot-20151201:1.34
	sid-snapshot-20151101:1.34
	sid-snapshot-20151001:1.34
	sid-snapshot-20150901:1.34
	sid-snapshot-20150801:1.34
	sid-snapshot-20150701:1.34
	sid-snapshot-20150601:1.34
	sid-snapshot-20150501:1.34
	sid-snapshot-20150401:1.34
	sid-snapshot-20150301:1.34
	sid-snapshot-20150201:1.34
	sid-snapshot-20150101:1.34
	sid-snapshot-20141201:1.34
	sid-snapshot-20141101:1.34
	sid-snapshot-20141001:1.34
	sid-snapshot-20140901:1.34
	sid-snapshot-20140801:1.34
	sid-snapshot-20140701:1.34
	sid-snapshot-20140601:1.34
	sid-snapshot-20140501:1.34
	sid-snapshot-20140401:1.34
	sid-snapshot-20140301:1.34
	sid-snapshot-20140201:1.34
	sid-snapshot-20140101:1.34
	sid-snapshot-20131201:1.34
	sid-snapshot-20131101:1.34
	sid-snapshot-20131001:1.34
	binutils-2_24-branch:1.34.0.4
	binutils-2_24-branchpoint:1.34
	binutils-2_21_1:1.31
	sid-snapshot-20130901:1.34
	gdb_7_6_1-2013-08-30-release:1.34
	sid-snapshot-20130801:1.34
	sid-snapshot-20130701:1.34
	sid-snapshot-20130601:1.34
	sid-snapshot-20130501:1.34
	gdb_7_6-2013-04-26-release:1.34
	sid-snapshot-20130401:1.34
	binutils-2_23_2:1.31
	gdb_7_6-branch:1.34.0.2
	gdb_7_6-2013-03-12-branchpoint:1.34
	sid-snapshot-20130301:1.34
	sid-snapshot-20130201:1.33
	sid-snapshot-20130101:1.31
	sid-snapshot-20121201:1.31
	gdb_7_5_1-2012-11-29-release:1.31
	binutils-2_23_1:1.31
	sid-snapshot-20121101:1.31
	binutils-2_23:1.31
	sid-snapshot-20121001:1.31
	sid-snapshot-20120901:1.31
	gdb_7_5-2012-08-17-release:1.31
	sid-snapshot-20120801:1.31
	binutils-2_23-branch:1.31.0.14
	binutils-2_23-branchpoint:1.31
	gdb_7_5-branch:1.31.0.12
	gdb_7_5-2012-07-18-branchpoint:1.31
	sid-snapshot-20120701:1.31
	sid-snapshot-20120601:1.31
	sid-snapshot-20120501:1.31
	binutils-2_22_branch:1.31.0.10
	gdb_7_4_1-2012-04-26-release:1.31
	sid-snapshot-20120401:1.31
	sid-snapshot-20120301:1.31
	sid-snapshot-20120201:1.31
	gdb_7_4-2012-01-24-release:1.31
	sid-snapshot-20120101:1.31
	gdb_7_4-branch:1.31.0.8
	gdb_7_4-2011-12-13-branchpoint:1.31
	sid-snapshot-20111201:1.31
	binutils-2_22:1.31
	sid-snapshot-20111101:1.31
	sid-snapshot-20111001:1.31
	binutils-2_22-branch:1.31.0.6
	binutils-2_22-branchpoint:1.31
	gdb_7_3_1-2011-09-04-release:1.31
	sid-snapshot-20110901:1.31
	sid-snapshot-20110801:1.31
	gdb_7_3-2011-07-26-release:1.31
	sid-snapshot-20110701:1.31
	sid-snapshot-20110601:1.31
	sid-snapshot-20110501:1.31
	gdb_7_3-branch:1.31.0.4
	gdb_7_3-2011-04-01-branchpoint:1.31
	sid-snapshot-20110401:1.31
	sid-snapshot-20110301:1.31
	sid-snapshot-20110201:1.31
	sid-snapshot-20110101:1.31
	binutils-2_21:1.31
	sid-snapshot-20101201:1.31
	binutils-2_21-branch:1.31.0.2
	binutils-2_21-branchpoint:1.31
	sid-snapshot-20101101:1.31
	sid-snapshot-20101001:1.31
	binutils-2_20_1:1.28.16.1
	gdb_7_2-2010-09-02-release:1.30
	sid-snapshot-20100901:1.31
	sid-snapshot-20100801:1.30
	gdb_7_2-branch:1.30.0.4
	gdb_7_2-2010-07-07-branchpoint:1.30
	sid-snapshot-20100701:1.30
	sid-snapshot-20100601:1.30
	sid-snapshot-20100501:1.30
	sid-snapshot-20100401:1.30
	gdb_7_1-2010-03-18-release:1.30
	sid-snapshot-20100301:1.30
	gdb_7_1-branch:1.30.0.2
	gdb_7_1-2010-02-18-branchpoint:1.30
	sid-snapshot-20100201:1.30
	sid-snapshot-20100101:1.29
	gdb_7_0_1-2009-12-22-release:1.29
	sid-snapshot-20091201:1.29
	sid-snapshot-20091101:1.29
	binutils-2_20:1.28.16.1
	gdb_7_0-2009-10-06-release:1.29
	sid-snapshot-20091001:1.29
	gdb_7_0-branch:1.29.0.2
	gdb_7_0-2009-09-16-branchpoint:1.29
	arc-sim-20090309:1.26
	binutils-arc-20081103-branch:1.28.0.18
	binutils-arc-20081103-branchpoint:1.28
	binutils-2_20-branch:1.28.0.16
	binutils-2_20-branchpoint:1.28
	sid-snapshot-20090901:1.28
	sid-snapshot-20090801:1.28
	msnyder-checkpoint-072509-branch:1.28.0.14
	msnyder-checkpoint-072509-branchpoint:1.28
	sid-snapshot-20090701:1.28
	dje-cgen-play1-branch:1.28.0.12
	dje-cgen-play1-branchpoint:1.28
	sid-snapshot-20090601:1.28
	sid-snapshot-20090501:1.28
	sid-snapshot-20090401:1.28
	arc-20081103-branch:1.28.0.10
	arc-20081103-branchpoint:1.28
	arc-insight_6_8-branch:1.26.0.10
	arc-insight_6_8-branchpoint:1.26
	insight_6_8-branch:1.26.0.8
	insight_6_8-branchpoint:1.26
	sid-snapshot-20090301:1.28
	binutils-2_19_1:1.28
	sid-snapshot-20090201:1.28
	sid-snapshot-20090101:1.28
	reverse-20081226-branch:1.28.0.8
	reverse-20081226-branchpoint:1.28
	sid-snapshot-20081201:1.28
	multiprocess-20081120-branch:1.28.0.6
	multiprocess-20081120-branchpoint:1.28
	sid-snapshot-20081101:1.28
	binutils-2_19:1.28
	sid-snapshot-20081001:1.28
	reverse-20080930-branch:1.28.0.4
	reverse-20080930-branchpoint:1.28
	binutils-2_19-branch:1.28.0.2
	binutils-2_19-branchpoint:1.28
	sid-snapshot-20080901:1.28
	sid-snapshot-20080801:1.28
	reverse-20080717-branch:1.27.0.4
	reverse-20080717-branchpoint:1.27
	sid-snapshot-20080701:1.27
	msnyder-reverse-20080609-branch:1.27.0.2
	msnyder-reverse-20080609-branchpoint:1.27
	drow-reverse-20070409-branch:1.24.0.34
	drow-reverse-20070409-branchpoint:1.24
	sid-snapshot-20080601:1.27
	sid-snapshot-20080501:1.26
	sid-snapshot-20080403:1.26
	sid-snapshot-20080401:1.26
	gdb_6_8-2008-03-27-release:1.26
	sid-snapshot-20080301:1.26
	gdb_6_8-branch:1.26.0.6
	gdb_6_8-2008-02-26-branchpoint:1.26
	sid-snapshot-20080201:1.26
	sid-snapshot-20080101:1.26
	sid-snapshot-20071201:1.26
	sid-snapshot-20071101:1.26
	gdb_6_7_1-2007-10-29-release:1.26
	gdb_6_7-2007-10-10-release:1.26
	sid-snapshot-20071001:1.26
	gdb_6_7-branch:1.26.0.4
	gdb_6_7-2007-09-07-branchpoint:1.26
	binutils-2_18:1.26
	binutils-2_18-branch:1.26.0.2
	binutils-2_18-branchpoint:1.26
	insight_6_6-20070208-release:1.24
	binutils-csl-coldfire-4_1-32:1.24
	binutils-csl-sourcerygxx-4_1-32:1.24
	gdb_6_6-2006-12-18-release:1.24
	binutils-csl-innovasic-fido-3_4_4-33:1.24
	binutils-csl-sourcerygxx-3_4_4-32:1.22
	binutils-csl-coldfire-4_1-30:1.24
	binutils-csl-sourcerygxx-4_1-30:1.24
	binutils-csl-coldfire-4_1-28:1.24
	binutils-csl-sourcerygxx-4_1-29:1.24
	binutils-csl-sourcerygxx-4_1-28:1.24
	gdb_6_6-branch:1.24.0.32
	gdb_6_6-2006-11-15-branchpoint:1.24
	binutils-csl-arm-2006q3-27:1.24
	binutils-csl-sourcerygxx-4_1-27:1.24
	binutils-csl-arm-2006q3-26:1.24
	binutils-csl-sourcerygxx-4_1-26:1.24
	binutils-csl-sourcerygxx-4_1-25:1.24
	binutils-csl-sourcerygxx-4_1-24:1.24
	binutils-csl-sourcerygxx-4_1-23:1.24
	insight_6_5-20061003-release:1.24
	gdb-csl-symbian-6_4_50_20060226-12:1.24
	binutils-csl-sourcerygxx-4_1-21:1.24
	binutils-csl-arm-2006q3-21:1.24
	binutils-csl-sourcerygxx-4_1-22:1.24
	binutils-csl-palmsource-arm-prelinker-1_0-1:1.24
	binutils-csl-sourcerygxx-4_1-20:1.24
	binutils-csl-arm-2006q3-19:1.24
	binutils-csl-sourcerygxx-4_1-19:1.24
	binutils-csl-sourcerygxx-4_1-18:1.24
	binutils-csl-renesas-4_1-9:1.24
	gdb-csl-sourcerygxx-3_4_4-25:1.24
	binutils-csl-sourcerygxx-3_4_4-25:1.22
	nickrob-async-20060828-mergepoint:1.24
	gdb-csl-symbian-6_4_50_20060226-11:1.24
	binutils-csl-renesas-4_1-8:1.24
	binutils-csl-renesas-4_1-7:1.24
	binutils-csl-renesas-4_1-6:1.24
	gdb-csl-sourcerygxx-4_1-17:1.24
	binutils-csl-sourcerygxx-4_1-17:1.24
	gdb-csl-20060226-branch-local-2:1.24
	gdb-csl-sourcerygxx-4_1-14:1.24
	binutils-csl-sourcerygxx-4_1-14:1.24
	binutils-csl-sourcerygxx-4_1-15:1.24
	gdb-csl-sourcerygxx-4_1-13:1.24
	binutils-csl-sourcerygxx-4_1-13:1.24
	binutils-2_17:1.24
	gdb-csl-sourcerygxx-4_1-12:1.24
	binutils-csl-sourcerygxx-4_1-12:1.24
	gdb-csl-sourcerygxx-3_4_4-21:1.24
	binutils-csl-sourcerygxx-3_4_4-21:1.24
	gdb_6_5-20060621-release:1.24
	binutils-csl-wrs-linux-3_4_4-24:1.22
	binutils-csl-wrs-linux-3_4_4-23:1.22
	gdb-csl-sourcerygxx-4_1-9:1.24
	binutils-csl-sourcerygxx-4_1-9:1.24
	gdb-csl-sourcerygxx-4_1-8:1.24
	binutils-csl-sourcerygxx-4_1-8:1.24
	gdb-csl-sourcerygxx-4_1-7:1.24
	binutils-csl-sourcerygxx-4_1-7:1.24
	gdb-csl-arm-2006q1-6:1.24
	binutils-csl-arm-2006q1-6:1.24
	gdb-csl-sourcerygxx-4_1-6:1.24
	binutils-csl-sourcerygxx-4_1-6:1.24
	binutils-csl-wrs-linux-3_4_4-22:1.22
	gdb-csl-symbian-6_4_50_20060226-10:1.24
	gdb-csl-symbian-6_4_50_20060226-9:1.24
	gdb-csl-symbian-6_4_50_20060226-8:1.24
	gdb-csl-coldfire-4_1-11:1.24
	binutils-csl-coldfire-4_1-11:1.24
	gdb-csl-sourcerygxx-3_4_4-19:1.24
	binutils-csl-sourcerygxx-3_4_4-19:1.24
	gdb-csl-coldfire-4_1-10:1.24
	gdb_6_5-branch:1.24.0.30
	gdb_6_5-2006-05-14-branchpoint:1.24
	binutils-csl-coldfire-4_1-10:1.24
	gdb-csl-sourcerygxx-4_1-5:1.24
	binutils-csl-sourcerygxx-4_1-5:1.24
	nickrob-async-20060513-branch:1.24.0.28
	nickrob-async-20060513-branchpoint:1.24
	gdb-csl-sourcerygxx-4_1-4:1.24
	binutils-csl-sourcerygxx-4_1-4:1.24
	msnyder-reverse-20060502-branch:1.24.0.26
	msnyder-reverse-20060502-branchpoint:1.24
	binutils-csl-wrs-linux-3_4_4-21:1.22
	gdb-csl-morpho-4_1-4:1.24
	binutils-csl-morpho-4_1-4:1.24
	gdb-csl-sourcerygxx-3_4_4-17:1.24
	binutils-csl-sourcerygxx-3_4_4-17:1.24
	binutils-csl-wrs-linux-3_4_4-20:1.22
	readline_5_1-import-branch:1.24.0.24
	readline_5_1-import-branchpoint:1.24
	gdb-csl-20060226-branch-merge-to-csl-symbian-1:1.24
	binutils-2_17-branch:1.24.0.22
	binutils-2_17-branchpoint:1.24
	gdb-csl-symbian-20060226-branch:1.24.0.20
	gdb-csl-symbian-20060226-branchpoint:1.24
	gdb-csl-20060226-branch-merge-to-csl-local-1:1.24
	msnyder-reverse-20060331-branch:1.24.0.18
	msnyder-reverse-20060331-branchpoint:1.24
	binutils-csl-2_17-branch:1.24.0.16
	binutils-csl-2_17-branchpoint:1.24
	gdb-csl-available-20060303-branch:1.24.0.14
	gdb-csl-available-20060303-branchpoint:1.24
	gdb-csl-20060226-branch:1.24.0.12
	gdb-csl-20060226-branchpoint:1.24
	gdb_6_4-20051202-release:1.24
	msnyder-fork-checkpoint-branch:1.24.0.10
	msnyder-fork-checkpoint-branchpoint:1.24
	gdb-csl-gxxpro-6_3-branch:1.24.0.8
	gdb-csl-gxxpro-6_3-branchpoint:1.24
	gdb_6_4-branch:1.24.0.6
	gdb_6_4-2005-11-01-branchpoint:1.24
	gdb-csl-arm-20051020-branch:1.24.0.4
	gdb-csl-arm-20051020-branchpoint:1.24
	binutils-csl-gxxpro-3_4-branch:1.22.0.8
	binutils-csl-gxxpro-3_4-branchpoint:1.22
	binutils-2_16_1:1.22
	msnyder-tracepoint-checkpoint-branch:1.24.0.2
	msnyder-tracepoint-checkpoint-branchpoint:1.24
	gdb-csl-arm-20050325-2005-q1b:1.22
	binutils-csl-arm-2005q1b:1.22
	binutils-2_16:1.22
	gdb-csl-arm-20050325-2005-q1a:1.22
	binutils-csl-arm-2005q1a:1.22
	csl-arm-20050325-branch:1.22.0.6
	csl-arm-20050325-branchpoint:1.22
	binutils-csl-arm-2005q1-branch:1.22.0.4
	binutils-csl-arm-2005q1-branchpoint:1.22
	binutils-2_16-branch:1.22.0.2
	binutils-2_16-branchpoint:1.22
	csl-arm-2004-q3d:1.20
	gdb_6_3-20041109-release:1.20
	gdb_6_3-branch:1.20.0.24
	gdb_6_3-20041019-branchpoint:1.20
	csl-arm-2004-q3:1.20
	drow_intercu-merge-20040921:1.20
	drow_intercu-merge-20040915:1.20
	jimb-gdb_6_2-e500-branch:1.20.0.26
	jimb-gdb_6_2-e500-branchpoint:1.20
	gdb_6_2-20040730-release:1.20
	gdb_6_2-branch:1.20.0.22
	gdb_6_2-2004-07-10-gmt-branchpoint:1.20
	gdb_6_1_1-20040616-release:1.20
	binutils-2_15:1.20
	binutils-2_15-branchpoint:1.20
	csl-arm-2004-q1a:1.20
	csl-arm-2004-q1:1.20
	gdb_6_1-2004-04-05-release:1.20
	drow_intercu-merge-20040402:1.20
	drow_intercu-merge-20040327:1.20
	ezannoni_pie-20040323-branch:1.20.0.20
	ezannoni_pie-20040323-branchpoint:1.20
	cagney_tramp-20040321-mergepoint:1.20
	cagney_tramp-20040309-branch:1.20.0.18
	cagney_tramp-20040309-branchpoint:1.20
	gdb_6_1-branch:1.20.0.16
	gdb_6_1-2004-03-01-gmt-branchpoint:1.20
	drow_intercu-20040221-branch:1.20.0.14
	drow_intercu-20040221-branchpoint:1.20
	binutils-2_15-branch:1.20.0.12
	cagney_bfdfile-20040213-branch:1.20.0.10
	cagney_bfdfile-20040213-branchpoint:1.20
	drow-cplus-merge-20040208:1.20
	carlton_dictionary-20040126-merge:1.20
	cagney_bigcore-20040122-branch:1.20.0.8
	cagney_bigcore-20040122-branchpoint:1.20
	drow-cplus-merge-20040113:1.20
	csl-arm-2003-q4:1.20
	drow-cplus-merge-20031224:1.20
	drow-cplus-merge-20031220:1.20
	carlton_dictionary-20031215-merge:1.20
	drow-cplus-merge-20031214:1.20
	carlton-dictionary-20031111-merge:1.20
	gdb_6_0-2003-10-04-release:1.17
	kettenis_sparc-20030918-branch:1.20.0.6
	kettenis_sparc-20030918-branchpoint:1.20
	carlton_dictionary-20030917-merge:1.20
	ezannoni_pie-20030916-branchpoint:1.20
	ezannoni_pie-20030916-branch:1.20.0.4
	cagney_x86i386-20030821-branch:1.20.0.2
	cagney_x86i386-20030821-branchpoint:1.20
	carlton_dictionary-20030805-merge:1.19
	carlton_dictionary-20030627-merge:1.17
	gdb_6_0-branch:1.17.0.32
	gdb_6_0-2003-06-23-branchpoint:1.17
	jimb-ppc64-linux-20030613-branch:1.17.0.30
	jimb-ppc64-linux-20030613-branchpoint:1.17
	binutils-2_14:1.17
	cagney_convert-20030606-branch:1.17.0.28
	cagney_convert-20030606-branchpoint:1.17
	cagney_writestrings-20030508-branch:1.17.0.26
	cagney_writestrings-20030508-branchpoint:1.17
	jimb-ppc64-linux-20030528-branch:1.17.0.24
	jimb-ppc64-linux-20030528-branchpoint:1.17
	carlton_dictionary-20030523-merge:1.17
	cagney_fileio-20030521-branch:1.17.0.22
	cagney_fileio-20030521-branchpoint:1.17
	kettenis_i386newframe-20030517-mergepoint:1.17
	jimb-ppc64-linux-20030509-branch:1.17.0.20
	jimb-ppc64-linux-20030509-branchpoint:1.17
	kettenis_i386newframe-20030504-mergepoint:1.17
	carlton_dictionary-20030430-merge:1.17
	binutils-2_14-branch:1.17.0.18
	binutils-2_14-branchpoint:1.17
	kettenis_i386newframe-20030419-branch:1.17.0.16
	kettenis_i386newframe-20030419-branchpoint:1.17
	carlton_dictionary-20030416-merge:1.17
	cagney_frameaddr-20030409-mergepoint:1.17
	kettenis_i386newframe-20030406-branch:1.17.0.14
	kettenis_i386newframe-20030406-branchpoint:1.17
	cagney_frameaddr-20030403-branchpoint:1.17
	cagney_frameaddr-20030403-branch:1.17.0.12
	cagney_framebase-20030330-mergepoint:1.17
	cagney_framebase-20030326-branch:1.17.0.10
	cagney_framebase-20030326-branchpoint:1.17
	cagney_lazyid-20030317-branch:1.17.0.8
	cagney_lazyid-20030317-branchpoint:1.17
	kettenis-i386newframe-20030316-mergepoint:1.17
	offbyone-20030313-branch:1.17.0.6
	offbyone-20030313-branchpoint:1.17
	kettenis-i386newframe-20030308-branch:1.17.0.4
	kettenis-i386newframe-20030308-branchpoint:1.17
	carlton_dictionary-20030305-merge:1.17
	cagney_offbyone-20030303-branch:1.17.0.2
	cagney_offbyone-20030303-branchpoint:1.17
	carlton_dictionary-20030207-merge:1.16
	interps-20030202-branch:1.16.0.4
	interps-20030202-branchpoint:1.16
	cagney-unwind-20030108-branch:1.16.0.2
	cagney-unwind-20030108-branchpoint:1.16
	binutils-2_13_2_1:1.14
	binutils-2_13_2:1.14
	carlton_dictionary-20021223-merge:1.16
	gdb_5_3-2002-12-12-release:1.14
	carlton_dictionary-20021115-merge:1.15
	binutils-2_13_1:1.14
	kseitz_interps-20021105-merge:1.14
	kseitz_interps-20021103-merge:1.14
	drow-cplus-merge-20021020:1.14
	drow-cplus-merge-20021025:1.14
	carlton_dictionary-20021025-merge:1.14
	carlton_dictionary-20021011-merge:1.14
	drow-cplus-branch:1.14.0.14
	drow-cplus-branchpoint:1.14
	kseitz_interps-20020930-merge:1.14
	carlton_dictionary-20020927-merge:1.14
	carlton_dictionary-branch:1.14.0.12
	carlton_dictionary-20020920-branchpoint:1.14
	sid-20020905-branchpoint:1.14
	sid-20020905-branch:1.14.0.10
	gdb_5_3-branch:1.14.0.8
	gdb_5_3-2002-09-04-branchpoint:1.14
	kseitz_interps-20020829-merge:1.14
	cagney_sysregs-20020825-branch:1.14.0.6
	cagney_sysregs-20020825-branchpoint:1.14
	readline_4_3-import-branch:1.14.0.4
	readline_4_3-import-branchpoint:1.14
	binutils-2_13:1.14
	gdb_5_2_1-2002-07-23-release:1.13
	binutils-2_13-branchpoint:1.14
	binutils-2_13-branch:1.14.0.2
	kseitz_interps-20020528-branch:1.13.0.10
	kseitz_interps-20020528-branchpoint:1.13
	cagney_regbuf-20020515-branch:1.13.0.8
	cagney_regbuf-20020515-branchpoint:1.13
	binutils-2_12_1:1.13
	jimb-macro-020506-branch:1.13.0.6
	jimb-macro-020506-branchpoint:1.13
	gdb_5_2-2002-04-29-release:1.13
	binutils-2_12:1.13
	gdb_5_2-branch:1.13.0.4
	gdb_5_2-2002-03-03-branchpoint:1.13
	binutils-2_12-branch:1.13.0.2
	binutils-2_12-branchpoint:1.13
	gdb_5_1_1-2002-01-24-release:1.8
	gdb_5_1_0_1-2002-01-03-release:1.8
	cygnus_cvs_20020108_pre:1.11
	gdb_5_1_0_1-2002-01-03-branch:1.8.0.6
	gdb_5_1_0_1-2002-01-03-branchpoint:1.8
	gdb_5_1-2001-11-21-release:1.8
	gdb_s390-2001-09-26-branch:1.8.0.4
	gdb_s390-2001-09-26-branchpoint:1.8
	gdb_5_1-2001-07-29-branch:1.8.0.2
	gdb_5_1-2001-07-29-branchpoint:1.8
	binutils-2_11_2:1.6.2.1
	binutils-2_11_1:1.6.2.1
	binutils-2_11:1.6
	x86_64versiong3:1.6
	binutils-2_11-branch:1.6.0.2
	insight-precleanup-2001-01-01:1.5
	binutils-2_10_1:1.1.1.1
	binutils-2_10:1.1.1.1
	gdb-premipsmulti-2000-06-06-branch:1.3.0.4
	gdb-premipsmulti-2000-06-06-branchpoint:1.3
	gdb_5_0-2000-05-19-release:1.3
	gdb_4_18_2-2000-05-18-release:1.3
	gdb_4_95_1-2000-05-11-snapshot:1.3
	gdb_4_95_0-2000-04-27-snapshot:1.3
	gdb_5_0-2000-04-10-branch:1.3.0.2
	gdb_5_0-2000-04-10-branchpoint:1.3
	binutils-2_10-branch:1.1.1.1.0.2
	binutils-2_10-branchpoint:1.1.1.1
	binutils_latest_snapshot:1.34
	repo-unification-2000-02-06:1.1.1.1
	binu_ss_19990721:1.1.1.1
	binu_ss_19990602:1.1.1.1
	binu_ss_19990502:1.1.1.1
	cygnus:1.1.1;
locks; strict;
comment	@ * @;


1.34
date	2013.02.21.03.02.30;	author amodra;	state Exp;
branches;
next	1.33;

1.33
date	2013.01.26.02.08.01;	author amodra;	state Exp;
branches;
next	1.32;

1.32
date	2013.01.10.20.03.54;	author hjl;	state Exp;
branches;
next	1.31;

1.31
date	2010.08.18.12.24.07;	author palves;	state Exp;
branches;
next	1.30;

1.30
date	2010.01.19.13.50.55;	author amodra;	state Exp;
branches;
next	1.29;

1.29
date	2009.09.09.21.38.57;	author nickc;	state Exp;
branches;
next	1.28;

1.28
date	2008.08.01.12.21.28;	author amodra;	state Exp;
branches
	1.28.16.1;
next	1.27;

1.27
date	2008.05.10.01.58.17;	author amodra;	state Exp;
branches;
next	1.26;

1.26
date	2007.08.04.16.31.00;	author hjl;	state Exp;
branches;
next	1.25;

1.25
date	2007.07.03.14.26.42;	author nickc;	state Exp;
branches;
next	1.24;

1.24
date	2005.05.04.15.53.28;	author nickc;	state Exp;
branches;
next	1.23;

1.23
date	2005.05.04.07.19.25;	author nickc;	state Exp;
branches;
next	1.22;

1.22
date	2005.03.03.11.41.00;	author amodra;	state Exp;
branches;
next	1.21;

1.21
date	2005.02.14.16.17.04;	author nickc;	state Exp;
branches;
next	1.20;

1.20
date	2003.08.07.08.38.09;	author amodra;	state Exp;
branches;
next	1.19;

1.19
date	2003.08.04.09.39.46;	author amodra;	state Exp;
branches;
next	1.18;

1.18
date	2003.07.08.08.08.00;	author amodra;	state Exp;
branches;
next	1.17;

1.17
date	2003.02.14.09.21.21;	author nickc;	state Exp;
branches
	1.17.18.1;
next	1.16;

1.16
date	2002.11.30.08.39.39;	author amodra;	state Exp;
branches;
next	1.15;

1.15
date	2002.11.12.23.25.42;	author amodra;	state Exp;
branches;
next	1.14;

1.14
date	2002.06.25.06.21.53;	author amodra;	state Exp;
branches
	1.14.12.1
	1.14.14.1;
next	1.13;

1.13
date	2002.01.28.16.48.52;	author thorpej;	state Exp;
branches
	1.13.10.1;
next	1.12;

1.12
date	2002.01.27.23.27.23;	author thorpej;	state Exp;
branches;
next	1.11;

1.11
date	2001.12.18.07.12.19;	author amodra;	state Exp;
branches;
next	1.10;

1.10
date	2001.11.02.13.12.56;	author hp;	state Exp;
branches;
next	1.9;

1.9
date	2001.09.18.09.57.24;	author amodra;	state Exp;
branches;
next	1.8;

1.8
date	2001.06.30.04.05.13;	author amodra;	state Exp;
branches;
next	1.7;

1.7
date	2001.03.08.21.04.01;	author nickc;	state Exp;
branches;
next	1.6;

1.6
date	2001.01.03.22.53.38;	author kazu;	state Exp;
branches
	1.6.2.1;
next	1.5;

1.5
date	2000.12.15.18.53.04;	author nickc;	state Exp;
branches;
next	1.4;

1.4
date	2000.06.19.01.22.37;	author nickc;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.07.20.27.29;	author msnyder;	state Exp;
branches;
next	1.2;

1.2
date	2000.04.07.03.59.23;	author msnyder;	state Exp;
branches;
next	1.1;

1.1
date	99.05.03.07.28.57;	author rth;	state Exp;
branches
	1.1.1.1;
next	;

1.28.16.1
date	2009.09.09.21.40.19;	author nickc;	state Exp;
branches;
next	;

1.17.18.1
date	2003.07.08.15.05.00;	author amodra;	state Exp;
branches;
next	;

1.14.12.1
date	2002.11.15.19.18.28;	author carlton;	state Exp;
branches;
next	1.14.12.2;

1.14.12.2
date	2002.12.23.19.37.50;	author carlton;	state Exp;
branches;
next	1.14.12.3;

1.14.12.3
date	2003.03.06.00.56.17;	author carlton;	state Exp;
branches;
next	1.14.12.4;

1.14.12.4
date	2003.08.05.17.12.53;	author carlton;	state Exp;
branches;
next	1.14.12.5;

1.14.12.5
date	2003.09.17.21.27.56;	author carlton;	state Exp;
branches;
next	;

1.14.14.1
date	2003.12.14.20.26.44;	author drow;	state Exp;
branches;
next	;

1.13.10.1
date	2002.07.22.21.46.46;	author kseitz;	state Exp;
branches;
next	;

1.6.2.1
date	2001.06.07.03.08.25;	author amodra;	state Exp;
branches;
next	;

1.1.1.1
date	99.05.03.07.28.57;	author rth;	state Exp;
branches;
next	;


desc
@@


1.34
log
@	* elf-bfd.h (struct core_elf_obj_tdata): New.
	(struct elf_obj_tdata): Delete core_signal, core_pid, core_lwpid,
	core_program, and core_command.  Add "core".
	* elf.c (bfd_elf_mkcorefile): Allocate "core" struct.
	Update all refs to tdata core fields.
	* elf32-am33lin.c, * elf32-arm.c, * elf32-cris.c, * elf32-frv.c,
	* elf32-hppa.c, * elf32-i386.c, * elf32-m68k.c, * elf32-mips.c,
	* elf32-nios2.c, * elf32-ppc.c, * elf32-s390.c, * elf32-score.c,
	* elf32-score7.c, * elf32-sh.c, * elf32-sparc.c, * elf32-tilegx.c,
	* elf32-tilepro.c, * elf32-xtensa.c, * elf64-aarch64.c,
	* elf64-hppa.c, * elf64-mips.c, * elf64-ppc.c, * elf64-tilegx.c,
	* elf64-x86-64.c, * elfcore.h, * elfn32-mips.c: Update all refs
	to tdata core fields.
@
text
@/* ELF core file support for BFD.
   Copyright 1995, 1996, 1997, 1998, 2000, 2001, 2002, 2003, 2005, 2007,
   2008, 2010 Free Software Foundation, Inc.

   This file is part of BFD, the Binary File Descriptor library.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,
   MA 02110-1301, USA.  */

char*
elf_core_file_failing_command (bfd *abfd)
{
  return elf_tdata (abfd)->core->command;
}

int
elf_core_file_failing_signal (bfd *abfd)
{
  return elf_tdata (abfd)->core->signal;
}

int
elf_core_file_pid (bfd *abfd)
{
  return elf_tdata (abfd)->core->pid;
}

bfd_boolean
elf_core_file_matches_executable_p (bfd *core_bfd, bfd *exec_bfd)
{
  char* corename;

  /* xvecs must match if both are ELF files for the same target.  */

  if (core_bfd->xvec != exec_bfd->xvec)
    {
      bfd_set_error (bfd_error_system_call);
      return FALSE;
    }

  /* See if the name in the corefile matches the executable name.  */
  corename = elf_tdata (core_bfd)->core->program;
  if (corename != NULL)
    {
      const char* execname = strrchr (exec_bfd->filename, '/');

      execname = execname ? execname + 1 : exec_bfd->filename;

      if (strcmp (execname, corename) != 0)
	return FALSE;
    }

  return TRUE;
}

/*  Core files are simply standard ELF formatted files that partition
    the file using the execution view of the file (program header table)
    rather than the linking view.  In fact, there is no section header
    table in a core file.

    The process status information (including the contents of the general
    register set) and the floating point register set are stored in a
    segment of type PT_NOTE.  We handcraft a couple of extra bfd sections
    that allow standard bfd access to the general registers (.reg) and the
    floating point registers (.reg2).  */

const bfd_target *
elf_core_file_p (bfd *abfd)
{
  Elf_External_Ehdr x_ehdr;	/* Elf file header, external form.  */
  Elf_Internal_Ehdr *i_ehdrp;	/* Elf file header, internal form.  */
  Elf_Internal_Phdr *i_phdrp;	/* Elf program header, internal form.  */
  unsigned int phindex;
  const struct elf_backend_data *ebd;
  bfd_size_type amt;

  /* Read in the ELF header in external format.  */
  if (bfd_bread (&x_ehdr, sizeof (x_ehdr), abfd) != sizeof (x_ehdr))
    {
      if (bfd_get_error () != bfd_error_system_call)
	goto wrong;
      else
	goto fail;
    }

  /* Check the magic number.  */
  if (! elf_file_p (&x_ehdr))
    goto wrong;

  /* FIXME: Check EI_VERSION here !  */

  /* Check the address size ("class").  */
  if (x_ehdr.e_ident[EI_CLASS] != ELFCLASS)
    goto wrong;

  /* Check the byteorder.  */
  switch (x_ehdr.e_ident[EI_DATA])
    {
    case ELFDATA2MSB:		/* Big-endian.  */
      if (! bfd_big_endian (abfd))
	goto wrong;
      break;
    case ELFDATA2LSB:		/* Little-endian.  */
      if (! bfd_little_endian (abfd))
	goto wrong;
      break;
    default:
      goto wrong;
    }

  /* Give abfd an elf_obj_tdata.  */
  if (! (*abfd->xvec->_bfd_set_format[bfd_core]) (abfd))
    goto fail;

  /* Swap in the rest of the header, now that we have the byte order.  */
  i_ehdrp = elf_elfheader (abfd);
  elf_swap_ehdr_in (abfd, &x_ehdr, i_ehdrp);

#if DEBUG & 1
  elf_debug_file (i_ehdrp);
#endif

  ebd = get_elf_backend_data (abfd);

  /* Check that the ELF e_machine field matches what this particular
     BFD format expects.  */

  if (ebd->elf_machine_code != i_ehdrp->e_machine
      && (ebd->elf_machine_alt1 == 0
	  || i_ehdrp->e_machine != ebd->elf_machine_alt1)
      && (ebd->elf_machine_alt2 == 0
	  || i_ehdrp->e_machine != ebd->elf_machine_alt2))
    {
      const bfd_target * const *target_ptr;

      if (ebd->elf_machine_code != EM_NONE)
	goto wrong;

      /* This is the generic ELF target.  Let it match any ELF target
	 for which we do not have a specific backend.  */

      for (target_ptr = bfd_target_vector; *target_ptr != NULL; target_ptr++)
	{
	  const struct elf_backend_data *back;

	  if ((*target_ptr)->flavour != bfd_target_elf_flavour)
	    continue;
	  back = xvec_get_elf_backend_data (*target_ptr);
	  if (back->s->arch_size != ARCH_SIZE)
	    continue;
	  if (back->elf_machine_code == i_ehdrp->e_machine
	      || (back->elf_machine_alt1 != 0
	          && i_ehdrp->e_machine == back->elf_machine_alt1)
	      || (back->elf_machine_alt2 != 0
	          && i_ehdrp->e_machine == back->elf_machine_alt2))
	    {
	      /* target_ptr is an ELF backend which matches this
		 object file, so reject the generic ELF target.  */
	      goto wrong;
	    }
	}
    }

  /* If there is no program header, or the type is not a core file, then
     we are hosed.  */
  if (i_ehdrp->e_phoff == 0 || i_ehdrp->e_type != ET_CORE)
    goto wrong;

  /* Does BFD's idea of the phdr size match the size
     recorded in the file? */
  if (i_ehdrp->e_phentsize != sizeof (Elf_External_Phdr))
    goto wrong;

  /* If the program header count is PN_XNUM(0xffff), the actual
     count is in the first section header.  */
  if (i_ehdrp->e_shoff != 0 && i_ehdrp->e_phnum == PN_XNUM)
    {
      Elf_External_Shdr x_shdr;
      Elf_Internal_Shdr i_shdr;
      bfd_signed_vma where = i_ehdrp->e_shoff;

      if (where != (file_ptr) where)
	goto wrong;

      /* Seek to the section header table in the file.  */
      if (bfd_seek (abfd, (file_ptr) where, SEEK_SET) != 0)
	goto fail;

      /* Read the first section header at index 0, and convert to internal
	 form.  */
      if (bfd_bread (&x_shdr, sizeof (x_shdr), abfd) != sizeof (x_shdr))
	goto fail;
      elf_swap_shdr_in (abfd, &x_shdr, &i_shdr);

      if (i_shdr.sh_info != 0)
	{
	  i_ehdrp->e_phnum = i_shdr.sh_info;
	  if (i_ehdrp->e_phnum != i_shdr.sh_info)
	    goto wrong;
	}
    }

  /* Sanity check that we can read all of the program headers.
     It ought to be good enough to just read the last one.  */
  if (i_ehdrp->e_phnum > 1)
    {
      Elf_External_Phdr x_phdr;
      Elf_Internal_Phdr i_phdr;
      bfd_signed_vma where;

      /* Check that we don't have a totally silly number of
	 program headers.  */
      if (i_ehdrp->e_phnum > (unsigned int) -1 / sizeof (x_phdr)
	  || i_ehdrp->e_phnum > (unsigned int) -1 / sizeof (i_phdr))
	goto wrong;

      where = i_ehdrp->e_phoff + (i_ehdrp->e_phnum - 1) * sizeof (x_phdr);
      if (where != (file_ptr) where)
	goto wrong;
      if ((bfd_size_type) where <= i_ehdrp->e_phoff)
	goto wrong;

      if (bfd_seek (abfd, (file_ptr) where, SEEK_SET) != 0)
	goto fail;
      if (bfd_bread (&x_phdr, sizeof (x_phdr), abfd) != sizeof (x_phdr))
	goto fail;
    }

  /* Move to the start of the program headers.  */
  if (bfd_seek (abfd, (file_ptr) i_ehdrp->e_phoff, SEEK_SET) != 0)
    goto wrong;

  /* Allocate space for the program headers.  */
  amt = sizeof (*i_phdrp) * i_ehdrp->e_phnum;
  i_phdrp = (Elf_Internal_Phdr *) bfd_alloc (abfd, amt);
  if (!i_phdrp)
    goto fail;

  elf_tdata (abfd)->phdr = i_phdrp;

  /* Read and convert to internal form.  */
  for (phindex = 0; phindex < i_ehdrp->e_phnum; ++phindex)
    {
      Elf_External_Phdr x_phdr;

      if (bfd_bread (&x_phdr, sizeof (x_phdr), abfd) != sizeof (x_phdr))
	goto fail;

      elf_swap_phdr_in (abfd, &x_phdr, i_phdrp + phindex);
    }

  /* Set the machine architecture.  Do this before processing the
     program headers since we need to know the architecture type
     when processing the notes of some systems' core files.  */
  if (! bfd_default_set_arch_mach (abfd, ebd->arch, 0)
      /* It's OK if this fails for the generic target.  */
      && ebd->elf_machine_code != EM_NONE)
    goto fail;

  /* Let the backend double check the format and override global
     information.  We do this before processing the program headers
     to allow the correct machine (as opposed to just the default
     machine) to be set, making it possible for grok_prstatus and
     grok_psinfo to rely on the mach setting.  */
  if (ebd->elf_backend_object_p != NULL
      && ! ebd->elf_backend_object_p (abfd))
    goto wrong;

  /* Process each program header.  */
  for (phindex = 0; phindex < i_ehdrp->e_phnum; ++phindex)
    if (! bfd_section_from_phdr (abfd, i_phdrp + phindex, (int) phindex))
      goto fail;

  /* Check for core truncation.  */
  {
    bfd_size_type high = 0;
    struct stat statbuf;
    for (phindex = 0; phindex < i_ehdrp->e_phnum; ++phindex)
      {
	Elf_Internal_Phdr *p = i_phdrp + phindex;
	if (p->p_filesz)
	  {
	    bfd_size_type current = p->p_offset + p->p_filesz;
	    if (high < current)
	      high = current;
	  }
      }
    if (bfd_stat (abfd, &statbuf) == 0)
      {
	if ((bfd_size_type) statbuf.st_size < high)
	  {
	    (*_bfd_error_handler)
	      (_("Warning: %B is truncated: expected core file "
		 "size >= %lu, found: %lu."),
	       abfd, (unsigned long) high, (unsigned long) statbuf.st_size);
	  }
      }
  }

  /* Save the entry point from the ELF header.  */
  bfd_get_start_address (abfd) = i_ehdrp->e_entry;
  return abfd->xvec;

wrong:
  bfd_set_error (bfd_error_wrong_format);
fail:
  return NULL;
}
@


1.33
log
@	* bfd.c (struct bfd_preserve, bfd_preserve_save, bfd_preserve_restore,
	bfd_preserve_finish): Move to..
	* format.c: ..here, splitting out..
	(bfd_reinit): ..this.  New function.
	(bfd_check_format_matches): Use bfd_preserve_save/restore to
	keep bfd state for a match.
	* elfcode.h (elf_object_p): Don't use bfd_preserve_save/restore.
	* elfcore.h (elf_core_file_p): Likewise.
	* mach-o.c (bfd_mach_o_header_p): Likewise.
	* pef.c (bfd_pef_object_p, bfd_pef_xlib_object_p): Likewise.
	* xsym.c (bfd_sym_object_p): Likewise.
	* mmo.c (mmo_scan): Clear abfd->symcount.
	* opncls.c (_bfd_new_bfd): Use a smaller section hash table.
	* section.c (bfd_section_list_clear): Clear section_htab.count.
	* bfd-in2.h: Regenerate.
@
text
@d25 1
a25 1
  return elf_tdata (abfd)->core_command;
d31 1
a31 1
  return elf_tdata (abfd)->core_signal;
d37 1
a37 1
  return elf_tdata (abfd)->core_pid;
d54 1
a54 1
  corename = elf_tdata (core_bfd)->core_program;
@


1.32
log
@Remove trailing white spaces in bfd

	* aout0.c: Remove trailing white spaces.
	* archive.c: Likewise.
	* archures.c: Likewise.
	* bfd-in.h: Likewise.
	* bfd-in2.h: Likewise.
	* coff-alpha.c: Likewise.
	* coff-i860.c: Likewise.
	* coff-mips.c: Likewise.
	* coff-ppc.c: Likewise.
	* coff-tic80.c: Likewise.
	* coff-x86_64.c: Likewise.
	* coff-z80.c: Likewise.
	* coffcode.h: Likewise.
	* coffgen.c: Likewise.
	* cofflink.c: Likewise.
	* compress.c: Likewise.
	* corefile.c: Likewise.
	* cpu-arm.c: Likewise.
	* cpu-avr.c: Likewise.
	* cpu-bfin.c: Likewise.
	* cpu-cr16.c: Likewise.
	* cpu-cr16c.c: Likewise.
	* cpu-crx.c: Likewise.
	* cpu-h8300.c: Likewise.
	* cpu-i386.c: Likewise.
	* cpu-lm32.c: Likewise.
	* cpu-m68k.c: Likewise.
	* cpu-moxie.c: Likewise.
	* cpu-msp430.c: Likewise.
	* cpu-sh.c: Likewise.
	* cpu-xc16x.c: Likewise.
	* dwarf2.c: Likewise.
	* ecofflink.c: Likewise.
	* ecoffswap.h: Likewise.
	* elf-ifunc.c: Likewise.
	* elf-m10300.c: Likewise.
	* elf-vxworks.c: Likewise.
	* elf32-avr.c: Likewise.
	* elf32-avr.h: Likewise.
	* elf32-cr16.c: Likewise.
	* elf32-cr16c.c: Likewise.
	* elf32-cris.c: Likewise.
	* elf32-crx.c: Likewise.
	* elf32-frv.c: Likewise.
	* elf32-hppa.c: Likewise.
	* elf32-i860.c: Likewise.
	* elf32-ip2k.c: Likewise.
	* elf32-iq2000.c: Likewise.
	* elf32-m32c.c: Likewise.
	* elf32-m68hc1x.c: Likewise.
	* elf32-msp430.c: Likewise.
	* elf32-mt.c: Likewise.
	* elf32-ppc.c: Likewise.
	* elf32-rl78.c: Likewise.
	* elf32-s390.c: Likewise.
	* elf32-score.h: Likewise.
	* elf32-sh-symbian.c: Likewise.
	* elf32-sh.c: Likewise.
	* elf32-spu.c: Likewise.
	* elf32-tic6x.c: Likewise.
	* elf32-v850.c: Likewise.
	* elf32-xc16x.c: Likewise.
	* elf32-xtensa.c: Likewise.
	* elf64-alpha.c: Likewise.
	* elf64-hppa.c: Likewise.
	* elf64-ppc.c: Likewise.
	* elf64-s390.c: Likewise.
	* elfcore.h: Likewise.
	* elflink.c: Likewise.
	* elfxx-mips.c: Likewise.
	* elfxx-sparc.c: Likewise.
	* elfxx-tilegx.c: Likewise.
	* ieee.c: Likewise.
	* libcoff.h: Likewise.
	* libpei.h: Likewise.
	* libxcoff.h: Likewise.
	* linker.c: Likewise.
	* mach-o-i386.c: Likewise.
	* mach-o-target.c: Likewise.
	* mach-o.c: Likewise.
	* mach-o.h: Likewise.
	* mmo.c: Likewise.
	* opncls.c: Likewise.
	* pdp11.c: Likewise.
	* pe-x86_64.c: Likewise.
	* peXXigen.c: Likewise.
	* pef-traceback.h: Likewise.
	* pei-x86_64.c: Likewise.
	* peicode.h: Likewise.
	* plugin.c: Likewise.
	* reloc.c: Likewise.
	* riscix.c: Likewise.
	* section.c: Likewise.
	* som.c: Likewise.
	* syms.c: Likewise.
	* tekhex.c: Likewise.
	* ticoff.h: Likewise.
	* vaxbsd.c: Likewise.
	* xcofflink.c: Likewise.
	* xtensa-isa.c: Likewise.
@
text
@a86 1
  struct bfd_preserve preserve;
a88 2
  preserve.marker = NULL;

a122 3
  if (!bfd_preserve_save (abfd, &preserve))
    goto fail;

a125 1
  preserve.marker = elf_tdata (abfd);
a313 2

  bfd_preserve_finish (abfd, &preserve);
a316 9
  /* There is way too much undoing of half-known state here.  The caller,
     bfd_check_format_matches, really shouldn't iterate on live bfd's to
     check match/no-match like it does.  We have to rely on that a call to
     bfd_default_set_arch_mach with the previously known mach, undoes what
     was done by the first bfd_default_set_arch_mach (with mach 0) here.
     For this to work, only elf-data and the mach may be changed by the
     target-specific elf_backend_object_p function.  Note that saving the
     whole bfd here and restoring it would be even worse; the first thing
     you notice is that the cached bfd file position gets out of sync.  */
a317 1

a318 2
  if (preserve.marker != NULL)
    bfd_preserve_restore (abfd, &preserve);
@


1.31
log
@2010-08-18  Pedro Alves  <pedro@@codesourcery.com>

	PR corefile/8210

	bfd/
	* bfd-in2.h: Regenerate.
	* corefile.c (bfd_core_file_pid): New.

	* targets.c (BFD_JUMP_TABLE_CORE): Add NAME##_core_file_pid.
	(struct bfd_target) <_core_file_pid>: New.

	* libbfd-in.h (_bfd_nocore_core_file_pid): Declare.
	* libbfd.c (_bfd_nocore_core_file_pid): New.

	* elf-bfd.h (bfd_elf32_core_file_pid, bfd_elf64_core_file_pid):
	Declare.
	* elfcode.h (elf_core_file_pid): New define.
	* elfcore.h (elf_core_file_pid): New function.

	* elf.c (elfcore_make_pid): Rewrite.
	(elfcore_grok_prstatus): Only set core_pid if not set yet.
	(elfcore_grok_prstatus) [!HAVE_PRSTATUS_T_PR_WHO]: Fallback to
	getting the lwpid from prstat.pr_pid.

	* elf64-x86-64.c (elf64_x86_64_grok_prstatus): Write the LWPID to
	elf_tdata's core_lwpid instead of to core_pid.
	(elf64_x86_64_grok_psinfo): Extract the the main process's PID,
	and store it in elf_tdata's core_pid field.
	* elf32-i386.c (elf_i386_grok_prstatus): Write the LWPID to
	elf_tdata's core_lwpid instead of to core_pid.
	(elf_i386_grok_psinfo): Extract the the main process's PID, and
	store it in elf_tdata's core_pid field.

	* elf32-am33lin.c (elf32_am33lin_grok_prstatus): Write the LWPID
	to elf_tdata's core_lwpid instead of to core_pid.
	* elf32-arm.c (elf32_arm_nabi_grok_prstatus): Write the LWPID to
	elf_tdata's core_lwpid instead of to core_pid.
	* elf32-cris.c (cris_elf_grok_prstatus): Write the LWPID to
	elf_tdata's core_lwpid instead of to core_pid.
	* elf32-frv.c (elf32_frv_grok_prstatus): Write the LWPID to
	elf_tdata's core_lwpid instead of to core_pid.
	* elf32-hppa.c (elf32_hppa_grok_prstatus): Write the LWPID to
	elf_tdata's core_lwpid instead of to core_pid.
	* elf32-mips.c (elf32_mips_grok_prstatus): Write the LWPID to
	elf_tdata's core_lwpid instead of to core_pid.
	* elf32-ppc.c (ppc_elf_grok_prstatus): Write the LWPID to
	elf_tdata's core_lwpid instead of to core_pid.
	* elf32-s390.c (elf_s390_grok_prstatus): Write the LWPID to
	elf_tdata's core_lwpid instead of to core_pid.
	* elf32-score.c (s3_bfd_score_elf_grok_prstatus): Write the LWPID
	to elf_tdata's core_lwpid instead of to core_pid.
	* elf32-score7.c (s7_bfd_score_elf_grok_prstatus): Write the LWPID
	to elf_tdata's core_lwpid instead of to core_pid.
	* elf32-sh.c (elf32_shlin_grok_prstatus): Write the LWPID to
	elf_tdata's core_lwpid instead of to core_pid.
	* elf32-xtensa.c (elf_xtensa_grok_prstatus): Write the LWPID to
	elf_tdata's core_lwpid instead of to core_pid.
	* elf64-hppa.c (elf64_hppa_grok_prstatus): Write the LWPID to
	elf_tdata's core_lwpid instead of to core_pid.
	* elf64-mips.c (elf64_mips_grok_prstatus): Write the LWPID to
	elf_tdata's core_lwpid instead of to core_pid.
	* elf64-ppc.c (ppc64_elf_grok_prstatus): Write the LWPID to
	elf_tdata's core_lwpid instead of to core_pid.
	* elfn32-mips.c (elf32_mips_grok_prstatus): Write the LWPID to
	elf_tdata's core_lwpid instead of to core_pid.

	* plugin.c (bfd_plugin_core_file_pid): New function.
	* aout-target.h (MY_core_file_pid): Define.
	* aout-tic30.c (MY_core_file_pid, MY_core_file_p): New defines.
	* coff-rs6000.c (coff_core_file_pid): New define.
	(rs6000coff_vec, pmac_xcoff_vec): Use BFD_JUMP_TABLE_CORE.
	* coff64-rs6000.c (coff_core_file_pid): New define.
	(rs6000coff64_vec): Use BFD_JUMP_TABLE_CORE.
	(xcoff64_core_file_pid): New define.
	(aix5coff64_vec): Use BFD_JUMP_TABLE_CORE.
	* mach-o-target.c (bfd_mach_o_core_file_pid): New define.
	* aix386-core.c (aix386_core_file_pid): New define.
	* hppabsd-core.c (hppabsd_core_core_file_pid): New define.
	* hpux-core.c (hpux_core_core_file_pid): New define.
	* irix-core.c (irix_core_core_file_pid): New define.
	* lynx-core.c (lynx_core_file_pid): New define.
	* osf-core.c (osf_core_core_file_pid): New define.
	* ptrace-core.c (ptrace_unix_core_file_pid): New define.
	* sco5-core.c (sco5_core_file_pid): New define.
	* xcoff-target.h (coff_core_file_pid): New define.
	* netbsd-core.c (netbsd_core_core_file_pid): New define.

gdb/
2010-08-18  Pedro Alves  <pedro@@codesourcery.com>

	PR corefile/8210

	gdb/
	* corelow.c (add_to_thread_list): Don't use
	gdbarch_core_reg_section_encodes_pid.  Use bfd_core_file_pid.
	(get_core_register_section): Don't use
	gdbarch_core_reg_section_encodes_pid.

	* gdbarch.sh (core_reg_section_encodes_pid): Delete.
	* gdbarch.h, gdbarch.c: Regenerate.
	* amd64-sol2-tdep.c (amd64_sol2_init_abi): Don't set
	gdbarch_core_reg_section_encodes_pid.
	* i386-sol2-tdep.c (i386_sol2_init_abi): Ditto.
	* sparc-sol2-tdep.c (sparc32_sol2_init_abi): Ditto.
	* sparc64-sol2-tdep.c (sparc64_sol2_init_abi): Ditto.
@
text
@d297 1
a297 1
    for (phindex = 0; phindex < i_ehdrp->e_phnum; ++phindex) 
d318 1
a318 1
  
@


1.30
log
@        * elfcode.h (elf_swap_ehdr_out): Handle e_phnum > 0xffff.
	(elf_object_p): Read e_phnum extension.
	(elf_write_shdrs_and_ehdr): Write e_phnum extension.
        * elfcore.h (elf_core_file_p): Read e_phnum extension.  Sanity check
	that we can read last program header.
@
text
@d34 6
@


1.29
log
@        Updated soruces in bfd/* to compile cleanly with -Wc++-compat.

        * bfd/aoutx.h: Add casts.
        * bfd/archive.c: Add casts.
        * bfd/archive64.c: Add casts.
        * bfd/archures.c: Add casts.
        * bfd/bfd-in2.h: Regenerated.
        * bfd/bfd.c: Add casts. (enum bfd_direction): Move out to top
        level.
        * bfd/bfdio.c: Add casts.
        * bfd/binary.c: Add casts.
        * bfd/cache.c (cache_bseek,cache_bread_1,cache_bwrite): Updated
        parameter to use enum value instead of int.
        * bfd/coffcode.h: Add casts.
        * bfd/coffgen.c: Add casts.
        * bfd/cofflink.c: Add casts.
        * bfd/compress.c: Add casts.
        * bfd/dwarf1.c: Add casts.
        * bfd/dwarf2.c: Add casts. (struct dwarf2_debug): Rename member
        bfd to bfd_ptr. Update code to use new name.
        * bfd/elf-attrs.c: Add casts.
        * bfd/elf-bfd.h (elf_link_virtual_table_entry): Gives name to
        anonymous struct. (union gotplt_union, struct
        elf_link_virtual_table_entry): Move to top level.
        * bfd/elf-eh-frame.c: Add casts.
        * bfd/elf-strtab.c: Add casts.
        * bfd/elf.c: Add casts. (_bfd_elm_make_Section_from_phdr): Change
        argument name from typename to type_name.
        * bfd/elf32-i386.c: Add casts.
        * bfd/elf64-x86-64.c: Add casts.
        * bfd/elfcode.h: Add casts.
        * bfd/elfcore.h: Add casts.
        * bfd/elflink.c: Add casts.
        * bfd/format.c: Add casts.
        * bfd/hash.c: Add casts.
        * bfd/ihex.c: Add casts.
        * bfd/libaout.h (enum aout_subformat, enum aout_magic): Move to
        top level.
        * bfd/libbfd.c: Add casts.
        * bfd/linker.c: Add casts.
        * bfd/merge.c: Add casts.
        * bfd/opncls.c: Add casts.
        * bfd/peXXigen.c: Add casts.
        * bfd/peicode.h: Add casts.
        * bfd/reloc.c: Add casts.
        * bfd/section.c: Add casts.
        * bfd/simple.c: Add casts.
        * bfd/srec.c: Add casts.
        * bfd/stabs.c: Add casts.
        * bfd/syms.c: Add casts.
        * bfd/targets.c: Add casts.
        * bfd/tekhex.c: Add casts.
        * bfd/verilog.c: Add casts.
        * include/bfdlink.h (struct bfd_link_hash_common_entry): Move to
        top level.
@
text
@d3 1
a3 1
   2008 Free Software Foundation, Inc.
d187 55
@


1.28
log
@	* elfcore.h (elf_core_file_p): Ensure we have a backend match
	with the correct arch size before rejecting the generic fallback.
	* elfcode.h (elf_object_p): Likewise.  Ensure arch size matches
	before accepting a target.
@
text
@d193 1
a193 1
  i_phdrp = bfd_alloc (abfd, amt);
@


1.28.16.1
log
@        Updated soruces in bfd/* to compile cleanly with -Wc++-compat.

        * bfd/aoutx.h: Add casts.
        * bfd/archive.c: Add casts.
        * bfd/archive64.c: Add casts.
        * bfd/archures.c: Add casts.
        * bfd/bfd-in2.h: Regenerated.
        * bfd/bfd.c: Add casts. (enum bfd_direction): Move out to top
        level.
        * bfd/bfdio.c: Add casts.
        * bfd/binary.c: Add casts.
        * bfd/cache.c (cache_bseek,cache_bread_1,cache_bwrite): Updated
        parameter to use enum value instead of int.
        * bfd/coffcode.h: Add casts.
        * bfd/coffgen.c: Add casts.
        * bfd/cofflink.c: Add casts.
        * bfd/compress.c: Add casts.
        * bfd/dwarf1.c: Add casts.
        * bfd/dwarf2.c: Add casts. (struct dwarf2_debug): Rename member
        bfd to bfd_ptr. Update code to use new name.
        * bfd/elf-attrs.c: Add casts.
        * bfd/elf-bfd.h (elf_link_virtual_table_entry): Gives name to
        anonymous struct. (union gotplt_union, struct
        elf_link_virtual_table_entry): Move to top level.
        * bfd/elf-eh-frame.c: Add casts.
        * bfd/elf-strtab.c: Add casts.
        * bfd/elf.c: Add casts. (_bfd_elm_make_Section_from_phdr): Change
        argument name from typename to type_name.
        * bfd/elf32-i386.c: Add casts.
        * bfd/elf64-x86-64.c: Add casts.
        * bfd/elfcode.h: Add casts.
        * bfd/elfcore.h: Add casts.
        * bfd/elflink.c: Add casts.
        * bfd/format.c: Add casts.
        * bfd/hash.c: Add casts.
        * bfd/ihex.c: Add casts.
        * bfd/libaout.h (enum aout_subformat, enum aout_magic): Move to
        top level.
        * bfd/libbfd.c: Add casts.
        * bfd/linker.c: Add casts.
        * bfd/merge.c: Add casts.
        * bfd/opncls.c: Add casts.
        * bfd/peXXigen.c: Add casts.
        * bfd/peicode.h: Add casts.
        * bfd/reloc.c: Add casts.
        * bfd/section.c: Add casts.
        * bfd/simple.c: Add casts.
        * bfd/srec.c: Add casts.
        * bfd/stabs.c: Add casts.
        * bfd/syms.c: Add casts.
        * bfd/targets.c: Add casts.
        * bfd/tekhex.c: Add casts.
        * bfd/verilog.c: Add casts.
        * include/bfdlink.h (struct bfd_link_hash_common_entry): Move to
        top level.
@
text
@d193 1
a193 1
  i_phdrp = (Elf_Internal_Phdr *) bfd_alloc (abfd, amt);
@


1.27
log
@	* elfcore.h (elf_core_file_p): Warn about core truncation.
@
text
@d162 2
@


1.26
log
@2007-08-04  H.J. Lu  <hongjiu.lu@@intel.com>

	* elf-bfd.h (xvec_get_elf_backend_data): Add const.

	* elfcode.h (elf_object_p): Use xvec_get_elf_backend_data.
	* elfcore.h (elf_core_file_p): Likewise.
@
text
@d2 2
a3 2
   Copyright 1995, 1996, 1997, 1998, 2000, 2001, 2002, 2003, 2005, 2007
   Free Software Foundation, Inc.
d230 26
@


1.25
log
@Switch sources over to use the GPL version 3
@
text
@d161 1
a161 1
	  back = (const struct elf_backend_data *) (*target_ptr)->backend_data;
@


1.24
log
@Update the address and phone number of the FSF organization in the GPL notices
@
text
@d2 1
a2 1
   Copyright 1995, 1996, 1997, 1998, 2000, 2001, 2002, 2003, 2005
d9 1
a9 1
   the Free Software Foundation; either version 2 of the License, or
d19 2
a20 1
   Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA 02110-1301, USA.  */
@


1.23
log
@Update the FSF address in the copyright/GPL notice
@
text
@d19 1
a19 1
   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02110-1301, USA.  */
@


1.22
log
@update copyright dates
@
text
@d19 1
a19 1
   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
@


1.21
log
@(elf_core_file_p): Move the call to elf_backend_object_p to allow the correct
machine to be set before processing the program headers.
@
text
@d2 1
a2 1
   Copyright 1995, 1996, 1997, 1998, 2000, 2001, 2002, 2003
@


1.20
log
@	* elfxx-target.h: Remove PTR cast.
	* targets.c (bfd_target): Make backend_data const void *.
	* elf-bfd.h: Constify all occurrences of struct elf_backend_data.
	* elf-m10300.c: Likewise.
	* elf.c: Likewise.
	* elf32-hppa.c: Likewise.
	* elf32-i386.c: Likewise.
	* elf32-m68hc1x.c: Likewise.
	* elf32-ppc.c: Likewise.
	* elf32-s390.c: Likewise.
	* elf32-sh.c: Likewise.
	* elf32-sh64.c: Likewise.
	* elf32-sparc.c: Likewise.
	* elf32-xtensa.c: Likewise.
	* elf64-mips.c: Likewise.
	* elf64-ppc.c: Likewise.
	* elf64-s390.c: Likewise.
	* elf64-sh64.c: Likewise.
	* elf64-sparc.c: Likewise.
	* elf64-x86-64.c: Likewise.
	* elfcode.h: Likewise.
	* elfcore.h: Likewise.
	* elflink.c: Likewise.
	* elflink.h: Likewise.
	* elfxx-ia64.c: Likewise.
	* elfxx-mips.c: Likewise.
	* elfxx-mips.h: Likewise.
	* elf.c (prep_headers): Remove useless check for null backend_data.
	* bfd-in2.h: Regenerate.
@
text
@d210 1
a210 2
  if (! bfd_default_set_arch_mach (abfd, ebd->arch, 0))
    {
d212 11
a222 3
      if (ebd->elf_machine_code != EM_NONE)
	goto fail;
    }
a231 6
  /* Let the backend double check the format and override global
     information.  */
  if (ebd->elf_backend_object_p
      && (! (*ebd->elf_backend_object_p) (abfd)))
    goto wrong;

@


1.19
log
@	* elfcode.h: Convert to C90, remove unneeded casts and prototypes.
	* elfcore.h: Likewise.
	* elflink.c: Likewise.
	* elflink.h: Likewise.
	* elf.c (sym_is_global): Remove INLINE.
	(align_file_position): Replace INLINE with inline.
	* elfcode.h (elf_swap_dyn_in, elf_swap_dyn_out): Remove INLINE.
	(elf_file_p): Replace INLINE with inline.
@
text
@d79 1
a79 1
  struct elf_backend_data *ebd;
d156 1
a156 1
	  struct elf_backend_data *back;
d160 1
a160 1
	  back = (struct elf_backend_data *) (*target_ptr)->backend_data;
@


1.18
log
@	* elfcode.h (elf_object_p): Allocate tdata via _bfd_set_format.
	* elfcore.h (elf_core_file_p): Likewise.
	* section.c (bfd_section_init): Remove prototype.
@
text
@d22 1
a22 2
elf_core_file_failing_command (abfd)
     bfd *abfd;
d28 1
a28 2
elf_core_file_failing_signal (abfd)
     bfd *abfd;
d34 1
a34 3
elf_core_file_matches_executable_p (core_bfd, exec_bfd)
     bfd *core_bfd;
     bfd *exec_bfd;
d54 1
a54 1
      if (strcmp(execname, corename) != 0)
d73 1
a73 2
elf_core_file_p (abfd)
     bfd *abfd;
d86 1
a86 2
  if (bfd_bread ((PTR) &x_ehdr, (bfd_size_type) sizeof (x_ehdr), abfd)
      != sizeof (x_ehdr))
d190 1
a190 1
  i_phdrp = (Elf_Internal_Phdr *) bfd_alloc (abfd, amt);
d201 1
a201 2
      if (bfd_bread ((PTR) &x_phdr, (bfd_size_type) sizeof (x_phdr), abfd)
	  != sizeof (x_phdr))
@


1.17
log
@(elf_core_file_p): Compare alternate machine codes for ELF backends when
checking if the generic ELF target should be used.
@
text
@a124 5
  /* Give abfd an elf_obj_tdata.  */
  amt = sizeof (struct elf_obj_tdata);
  preserve.marker = bfd_zalloc (abfd, amt);
  if (preserve.marker == NULL)
    goto fail;
d128 4
a131 1
  elf_tdata (abfd) = preserve.marker;
@


1.17.18.1
log
@	* elfcode.h (elf_object_p): Allocate tdata via _bfd_set_format.
	* elfcore.h (elf_core_file_p): Likewise.
@
text
@d125 5
d133 1
a133 4
  /* Give abfd an elf_obj_tdata.  */
  if (! (*abfd->xvec->_bfd_set_format[bfd_core]) (abfd))
    goto fail;
  preserve.marker = elf_tdata (abfd);
@


1.16
log
@s/boolean/bfd_boolean/ s/true/TRUE/ s/false/FALSE/.  Simplify
comparisons of bfd_boolean vars with TRUE/FALSE.  Formatting.
@
text
@d2 1
a2 1
   Copyright 1995, 1996, 1997, 1998, 2000, 2001, 2002
d5 1
a5 1
This file is part of BFD, the Binary File Descriptor library.
d7 13
a19 13
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
a50 1

d55 1
d74 1
a74 3
    floating point registers (.reg2).

 */
d80 3
a82 3
  Elf_External_Ehdr x_ehdr;	/* Elf file header, external form */
  Elf_Internal_Ehdr *i_ehdrp;	/* Elf file header, internal form */
  Elf_Internal_Phdr *i_phdrp;	/* Elf program header, internal form */
d104 1
a104 1
  /* FIXME: Check EI_VERSION here ! */
d113 1
a113 1
    case ELFDATA2MSB:		/* Big-endian */
d117 1
a117 1
    case ELFDATA2LSB:		/* Little-endian */
d169 5
a173 1
	  if (back->elf_machine_code == i_ehdrp->e_machine)
d208 1
d228 2
a229 4
    {
      if (! bfd_section_from_phdr (abfd, i_phdrp + phindex, (int) phindex))
	goto fail;
    }
d236 3
a238 5
  if (ebd->elf_backend_object_p)
    {
      if (! (*ebd->elf_backend_object_p) (abfd))
	goto wrong;
    }
@


1.15
log
@Missed commit in last change.
@
text
@d35 1
a35 1
boolean
d47 1
a47 1
      return false;
d59 1
a59 1
	return false;
d62 1
a62 1
  return true;
@


1.14
log
@	* aout-adobe.c: Don't compare against "true" or "false.
	* aout-target.h: Likewise.
	* aoutx.h: Likewise.
	* archive.c: Likewise.
	* bout.c: Likewise.
	* cache.c: Likewise.
	* coff-a29k.c: Likewise.
	* coff-alpha.c: Likewise.
	* coff-i386.c: Likewise.
	* coff-mips.c: Likewise.
	* coff-or32.c: Likewise.
	* coff64-rs6000.c: Likewise.
	* coffcode.h: Likewise.
	* coffgen.c: Likewise.
	* cpu-ns32k.c: Likewise.
	* ecoff.c: Likewise.
	* ecofflink.c: Likewise.
	* elf.c: Likewise.
	* elf32-arm.h: Likewise.
	* elf32-cris.c: Likewise.
	* elf32-d30v.c: Likewise.
	* elf32-i386.c: Likewise.
	* elf32-mcore.c: Likewise.
	* elf32-ppc.c: Likewise.
	* elf32-sh.c: Likewise.
	* elf32-sh64.c: Likewise.
	* elf32-v850.c: Likewise.
	* elf64-alpha.c: Likewise.
	* elf64-sh64.c: Likewise.
	* elfcode.h: Likewise.
	* elfcore.h: Likewise.
	* elflink.h: Likewise.
	* elfxx-mips.c: Likewise.
	* i386os9k.c: Likewise.
	* ieee.c: Likewise.
	* libbfd.c: Likewise.
	* linker.c: Likewise.
	* mmo.c: Likewise.
	* nlm32-alpha.c: Likewise.
	* nlm32-i386.c: Likewise.
	* nlm32-ppc.c: Likewise.
	* nlm32-sparc.c: Likewise.
	* nlmcode.h: Likewise.
	* oasys.c: Likewise.
	* pdp11.c: Likewise.
	* peicode.h: Likewise.
	* reloc.c: Likewise.
	* som.c: Likewise.
	* srec.c: Likewise.
	* tekhex.c: Likewise.
	* vms.c: Likewise.
	* xcofflink.c: Likewise.
	* elf64-sparc.c: Edit comment to not use "== false".

	* aoutf1.h: Don't use "? true : false".
	* ecoff.c: Likewise.
	* format.c: Likewise.
	* ieee.c: Likewise.
	* linker.c: Likewise.
	* mmo.c: Likewise.
	* oasys.c: Likewise.
@
text
@a87 1
  struct elf_obj_tdata *new_tdata = NULL;
d90 1
a90 1
  preserve.arch_info = abfd->arch_info;
d97 3
a99 2
	bfd_set_error (bfd_error_wrong_format);
      return NULL;
d129 4
a132 16
  new_tdata = (struct elf_obj_tdata *) bfd_zalloc (abfd, amt);
  if (new_tdata == NULL)
    return NULL;
  preserve.tdata = elf_tdata (abfd);
  elf_tdata (abfd) = new_tdata;

  /* Clear section information, since there might be a recognized bfd that
     we now check if we can replace, and we don't want to append to it.  */
  preserve.sections = abfd->sections;
  preserve.section_tail = abfd->section_tail;
  preserve.section_count = abfd->section_count;
  preserve.section_htab = abfd->section_htab;
  abfd->sections = NULL;
  abfd->section_tail = &abfd->sections;
  abfd->section_count = 0;
  if (!bfd_hash_table_init (&abfd->section_htab, bfd_section_hash_newfunc))
d135 2
d241 1
a241 1
  bfd_hash_table_free (&preserve.section_htab);
d257 2
a258 12
  abfd->arch_info = preserve.arch_info;
  if (new_tdata != NULL)
    {
      /* bfd_release frees all memory more recently bfd_alloc'd than
	 its arg, as well as its arg.  */
      bfd_release (abfd, new_tdata);
      elf_tdata (abfd) = preserve.tdata;
      abfd->section_htab = preserve.section_htab;
      abfd->sections = preserve.sections;
      abfd->section_tail = preserve.section_tail;
      abfd->section_count = preserve.section_count;
    }
@


1.14.14.1
log
@Merge drow-cplus-branch to:
  cvs rtag -D 2003-12-14 00:00:00 UTC drow-cplus-merge-20031214 gdb+dejagnu
@
text
@d2 1
a2 1
   Copyright 1995, 1996, 1997, 1998, 2000, 2001, 2002, 2003
d5 1
a5 1
   This file is part of BFD, the Binary File Descriptor library.
d7 13
a19 13
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
d22 2
a23 1
elf_core_file_failing_command (bfd *abfd)
d29 2
a30 1
elf_core_file_failing_signal (bfd *abfd)
d35 4
a38 2
bfd_boolean
elf_core_file_matches_executable_p (bfd *core_bfd, bfd *exec_bfd)
d47 1
a47 1
      return FALSE;
d51 1
a55 1

d58 2
a59 2
      if (strcmp (execname, corename) != 0)
	return FALSE;
d62 1
a62 1
  return TRUE;
d74 3
a76 1
    floating point registers (.reg2).  */
d79 2
a80 1
elf_core_file_p (bfd *abfd)
d82 3
a84 3
  Elf_External_Ehdr x_ehdr;	/* Elf file header, external form.  */
  Elf_Internal_Ehdr *i_ehdrp;	/* Elf file header, internal form.  */
  Elf_Internal_Phdr *i_phdrp;	/* Elf program header, internal form.  */
d86 1
a86 1
  const struct elf_backend_data *ebd;
d88 1
d91 1
a91 1
  preserve.marker = NULL;
d94 2
a95 1
  if (bfd_bread (&x_ehdr, sizeof (x_ehdr), abfd) != sizeof (x_ehdr))
d98 2
a99 3
	goto wrong;
      else
	goto fail;
d106 1
a106 1
  /* FIXME: Check EI_VERSION here !  */
d115 1
a115 1
    case ELFDATA2MSB:		/* Big-endian.  */
d119 1
a119 1
    case ELFDATA2LSB:		/* Little-endian.  */
a126 3
  if (!bfd_preserve_save (abfd, &preserve))
    goto fail;

d128 17
a144 1
  if (! (*abfd->xvec->_bfd_set_format[bfd_core]) (abfd))
a145 1
  preserve.marker = elf_tdata (abfd);
d176 1
a176 1
	  const struct elf_backend_data *back;
d180 2
a181 6
	  back = (const struct elf_backend_data *) (*target_ptr)->backend_data;
	  if (back->elf_machine_code == i_ehdrp->e_machine
	      || (back->elf_machine_alt1 != 0
	          && i_ehdrp->e_machine == back->elf_machine_alt1)
	      || (back->elf_machine_alt2 != 0
	          && i_ehdrp->e_machine == back->elf_machine_alt2))
d206 1
a206 1
  i_phdrp = bfd_alloc (abfd, amt);
d216 2
a217 2

      if (bfd_bread (&x_phdr, sizeof (x_phdr), abfd) != sizeof (x_phdr))
d235 4
a238 2
    if (! bfd_section_from_phdr (abfd, i_phdrp + phindex, (int) phindex))
      goto fail;
d245 5
a249 3
  if (ebd->elf_backend_object_p
      && (! (*ebd->elf_backend_object_p) (abfd)))
    goto wrong;
d251 1
a251 1
  bfd_preserve_finish (abfd, &preserve);
d267 12
a278 2
  if (preserve.marker != NULL)
    bfd_preserve_restore (abfd, &preserve);
@


1.14.12.1
log
@2002-11-15  David Carlton  <carlton@@math.stanford.edu>

	* Merge from mainline; tag is carlton_dictionary-20021115-merge.
@
text
@d88 1
d91 1
a91 1
  preserve.marker = NULL;
d98 2
a99 3
	goto wrong;
      else
	goto fail;
d129 16
a144 4
  preserve.marker = bfd_zalloc (abfd, amt);
  if (preserve.marker == NULL)
    goto fail;
  if (!bfd_preserve_save (abfd, &preserve))
a146 2
  elf_tdata (abfd) = preserve.marker;

d251 1
a251 1
  bfd_preserve_finish (abfd, &preserve);
d267 12
a278 2
  if (preserve.marker != NULL)
    bfd_preserve_restore (abfd, &preserve);
@


1.14.12.2
log
@2002-12-23  David Carlton  <carlton@@math.stanford.edu>

	* Merge from mainline; tag is carlton_dictionary-20021223-merge.
@
text
@d35 1
a35 1
bfd_boolean
d47 1
a47 1
      return FALSE;
d59 1
a59 1
	return FALSE;
d62 1
a62 1
  return TRUE;
@


1.14.12.3
log
@2003-03-05  David Carlton  <carlton@@math.stanford.edu>

	* Merge with mainline.  Tag is carlton_dictionary-20030305-merge.
@
text
@d2 1
a2 1
   Copyright 1995, 1996, 1997, 1998, 2000, 2001, 2002, 2003
d5 1
a5 1
   This file is part of BFD, the Binary File Descriptor library.
d7 13
a19 13
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
d51 1
a55 1

d74 3
a76 1
    floating point registers (.reg2).  */
d82 3
a84 3
  Elf_External_Ehdr x_ehdr;	/* Elf file header, external form.  */
  Elf_Internal_Ehdr *i_ehdrp;	/* Elf file header, internal form.  */
  Elf_Internal_Phdr *i_phdrp;	/* Elf program header, internal form.  */
d106 1
a106 1
  /* FIXME: Check EI_VERSION here !  */
d115 1
a115 1
    case ELFDATA2MSB:		/* Big-endian.  */
d119 1
a119 1
    case ELFDATA2LSB:		/* Little-endian.  */
d171 1
a171 5
	  if (back->elf_machine_code == i_ehdrp->e_machine
	      || (back->elf_machine_alt1 != 0
	          && i_ehdrp->e_machine == back->elf_machine_alt1)
	      || (back->elf_machine_alt2 != 0
	          && i_ehdrp->e_machine == back->elf_machine_alt2))
a205 1

d225 4
a228 2
    if (! bfd_section_from_phdr (abfd, i_phdrp + phindex, (int) phindex))
      goto fail;
d235 5
a239 3
  if (ebd->elf_backend_object_p
      && (! (*ebd->elf_backend_object_p) (abfd)))
    goto wrong;
@


1.14.12.4
log
@2003-08-05  David Carlton  <carlton@@kealia.com>

	* configure.in (build_warnings): Delete -Wformat-nonliteral.
	* configure (build_warnings): Ditto.

	* Merge with mainline; tag is carlton_dictionary-20030805-merge.
@
text
@d22 2
a23 1
elf_core_file_failing_command (bfd *abfd)
d29 2
a30 1
elf_core_file_failing_signal (bfd *abfd)
d36 3
a38 1
elf_core_file_matches_executable_p (bfd *core_bfd, bfd *exec_bfd)
d58 1
a58 1
      if (strcmp (execname, corename) != 0)
d77 2
a78 1
elf_core_file_p (bfd *abfd)
d91 2
a92 1
  if (bfd_bread (&x_ehdr, sizeof (x_ehdr), abfd) != sizeof (x_ehdr))
d125 5
d133 1
a133 4
  /* Give abfd an elf_obj_tdata.  */
  if (! (*abfd->xvec->_bfd_set_format[bfd_core]) (abfd))
    goto fail;
  preserve.marker = elf_tdata (abfd);
d198 1
a198 1
  i_phdrp = bfd_alloc (abfd, amt);
d209 2
a210 1
      if (bfd_bread (&x_phdr, sizeof (x_phdr), abfd) != sizeof (x_phdr))
@


1.14.12.5
log
@2003-09-17  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton_dictionary-20030917-merge.
@
text
@d79 1
a79 1
  const struct elf_backend_data *ebd;
d156 1
a156 1
	  const struct elf_backend_data *back;
d160 1
a160 1
	  back = (const struct elf_backend_data *) (*target_ptr)->backend_data;
@


1.13
log
@* elfcore.h (elf_core_file_p): Improve comment for last change.
@
text
@d2 1
a2 1
   Copyright 1995, 1996, 1997, 1998, 2000, 2001
d103 1
a103 1
  if (elf_file_p (&x_ehdr) == false)
d247 1
a247 1
      if ((*ebd->elf_backend_object_p) (abfd) == false)
@


1.13.10.1
log
@Merge w/trunk (kseitz_interps-20020722-merge).
@
text
@d2 1
a2 1
   Copyright 1995, 1996, 1997, 1998, 2000, 2001, 2002
d103 1
a103 1
  if (! elf_file_p (&x_ehdr))
d247 1
a247 1
      if (! (*ebd->elf_backend_object_p) (abfd))
@


1.12
log
@* elfcore.h (elf_core_file_p): Set the machine architecture
before processing the program headers.
@
text
@d223 3
a225 1
  /* Set the machine architecture.  */
@


1.11
log
@	* elfcode.h (struct bfd_preserve): New.
	(elf_object_p): Replace preserved_* vars with instance of above.
	Save and restore arch_info pointer rather than arch, mach so that
	more cases can be restored.  Save and restore new section_tail,
	section_htab structure, and init appropriately.  Move "rest of
	section header" code so that i_shdrp needs no NULL initialisation.
	Free old section_htab on success.
	* elfcore.h (elf_core_file_p): Likewise.
@
text
@d223 2
a224 2
  /* Process each program header.  */
  for (phindex = 0; phindex < i_ehdrp->e_phnum; ++phindex)
d226 2
a227 1
      if (! bfd_section_from_phdr (abfd, i_phdrp + phindex, (int) phindex))
d231 2
a232 2
  /* Set the machine architecture.  */
  if (! bfd_default_set_arch_mach (abfd, ebd->arch, 0))
d234 1
a234 2
      /* It's OK if this fails for the generic target.  */
      if (ebd->elf_machine_code != EM_NONE)
@


1.10
log
@	* elfcore.h (elf_core_file_p): Preserve and clear abfd section
	information.  Save bfd arch and mach values.  Restore on error.
@
text
@d84 1
a84 1
  Elf_Internal_Phdr *i_phdrp = NULL;	/* Elf program header, internal form */
d87 1
a87 5
  struct elf_obj_tdata *preserved_tdata = elf_tdata (abfd);
  struct sec *preserved_sections = abfd->sections;
  unsigned int preserved_section_count = abfd->section_count;
  enum bfd_architecture previous_arch = bfd_get_arch (abfd);
  unsigned long previous_mach = bfd_get_mach (abfd);
d91 1
a91 4
  /* Clear section information, since there might be a recognized bfd that
     we now check if we can replace, and we don't want to append to it.  */
  abfd->sections = NULL;
  abfd->section_count = 0;
d132 1
d135 12
d249 1
a261 1
  bfd_default_set_arch_mach (abfd, previous_arch, previous_mach);
d263 1
d265 1
a265 2
  if (i_phdrp != NULL)
    bfd_release (abfd, i_phdrp);
d267 10
a276 4
    bfd_release (abfd, new_tdata);
  elf_tdata (abfd) = preserved_tdata;
  abfd->sections = preserved_sections;
  abfd->section_count = preserved_section_count;
@


1.9
log
@Touches most files in bfd/, so likely will be blamed for everything..

o  bfd_read and bfd_write lose an unnecessary param and become
   bfd_bread and bfd_bwrite.

o  bfd_*alloc now all take a bfd_size_type arg, and will error if
   size_t is too small.  eg. 32 bit host, 64 bit bfd, verrry big files
   or bugs in linker scripts etc.

o  file_ptr becomes a bfd_signed_vma.  Besides matching sizes with
   various other types involved in handling sections, this should make
   it easier for bfd to support a 64 bit off_t on 32 bit hosts that
   provide it.

o  I've made the H_GET_* and H_PUT_* macros (which invoke bfd_h_{get,put}_*)
   generally available.  They now cast their args to bfd_vma and
   bfd_byte * as appropriate, which removes a swag of casts from the
   source.

o  Bug fixes to bfd_get8, aix386_core_vec, elf32_h8_relax_section, and
   aout-encap.c.

o  Zillions of formatting and -Wconversion fixes.
@
text
@d88 4
d95 5
d246 10
d263 2
@


1.8
log
@	* elfcore.h (elf_core_file_p): Call bfd_section_from_phdr directly
	instead of _bfd_elfcore_section_from_phdr.
	* elf-bfd.h (_bfd_elfcore_section_from_phdr): Remove.
	* elf.c (_bfd_elfcore_section_from_phdr): Remove.
	(_bfd_elfcore_make_pseudosection): Expedite tail-call.
	(elfcore_grok_prstatus): Likewise.
	(elfcore_grok_lwpstatus): Likewise.
	(bfd_get_elf_phdr_upper_bound): Likewise.
	(elfcore_make_note_pseudosection): Formatting.
	(_bfd_elfcore_strndup): Formatting.
	* elf32-mips.c (mips_elf_sym_is_global): Formatting.
	(_bfd_elf32_mips_grok_prstatus): Expedite tail-call.
@
text
@d89 1
d92 2
a93 1
  if (bfd_read ((PTR) & x_ehdr, sizeof (x_ehdr), 1, abfd) != sizeof (x_ehdr))
d126 2
a127 2
  new_tdata =
    (struct elf_obj_tdata *) bfd_zalloc (abfd, sizeof (struct elf_obj_tdata));
d186 1
a186 1
  if (bfd_seek (abfd, i_ehdrp->e_phoff, SEEK_SET) != 0)
d190 2
a191 2
  i_phdrp = (Elf_Internal_Phdr *)
    bfd_alloc (abfd, sizeof (*i_phdrp) * i_ehdrp->e_phnum);
d201 1
a201 1
      if (bfd_read ((PTR) &x_phdr, sizeof (x_phdr), 1, abfd)
d211 1
a211 1
      if (! bfd_section_from_phdr (abfd, i_phdrp + phindex, phindex))
@


1.7
log
@Update copyright notices
@
text
@d209 1
a209 1
      if (!_bfd_elfcore_section_from_phdr (abfd, i_phdrp + phindex, phindex))
@


1.6
log
@2001-01-03  Kazu Hirata  <kazu@@hxi.com>

	* ecoffswap.h: Fix formatting.
	* elf-bfd.h: Likewise.
	* elfarm-nabi.c: Likewise.
	* elfarm-oabi.c: Likewise.
	* elfcode.h: Likewise.
	* elfcore.h: Likewise.
	* elflink.c: Likewise.
	* elflink.h: Likewise.
	* elfxx-ia64.c: Likewise.
	* elfxx-target.h: Likewise.
@
text
@d2 2
a3 1
   Copyright (C) 1995, 1996, 1997, 1998 Free Software Foundation, Inc.
@


1.6.2.1
log
@Update copyright notices.
@
text
@d2 1
a2 2
   Copyright 1995, 1996, 1997, 1998, 2000, 2001
   Free Software Foundation, Inc.
@


1.5
log
@Move to the start of the program headers before attempting to read them.
@
text
@a19 1

a33 1

d41 1
a41 1
  /* xvecs must match if both are ELF files for the same target. */
d49 1
a49 1
  /* See if the name in the corefile matches the executable name. */
a63 1

d97 1
a97 1
  /* Check the magic number. */
d103 1
a103 1
  /* Check the address size ("class"). */
d107 1
a107 1
  /* Check the byteorder. */
d122 2
a123 2
  /* Give abfd an elf_obj_tdata. */
  new_tdata = 
d127 1
a127 1
  elf_tdata (abfd) = new_tdata;  
d129 1
a129 1
  /* Swap in the rest of the header, now that we have the byte order. */
d173 1
a173 1
     we are hosed. */
d185 2
a186 2
  
  /* Allocate space for the program headers. */
d194 1
a194 1
  /* Read and convert to internal form. */
d205 1
a205 1
  /* Process each program header. */
d212 1
a212 1
  /* Set the machine architecture. */
d220 1
a220 1
  /* Save the entry point from the ELF header. */
@


1.4
log
@Applied Stephane Carrez <Stephane.Carrez@@worldnet.fr> patches to add support
for m68hc11 and m68hc12 processors.
@
text
@d185 4
@


1.3
log
@2000-04-06  Michael Snyder  <msnyder@@seadog.cygnus.com>

        * elfcore.h (elf_core_file_p): preserve value of tdata at entry,
        and restore it on failure.  Release newly allocated tdata on
        failure.
@
text
@d102 1
a102 3
    {
      goto wrong;
    }
@


1.2
log
@2000-04-06  Michael Snyder  <msnyder@@seadog.cygnus.com>

        * elfcore.h (elf_core_file_p): call backend_object_p which
        thereby gets an opportunity to update the arch/machine type.
@
text
@d86 1
a86 1
  Elf_Internal_Phdr *i_phdrp;	/* Elf program header, internal form */
d89 2
d103 1
a103 3
    wrong:
      bfd_set_error (bfd_error_wrong_format);
      return NULL;
d128 1
a128 1
  elf_tdata (abfd) =
d130 1
a130 1
  if (elf_tdata (abfd) == NULL)
d132 1
a132 2

  /* FIXME: from here on down, "goto wrong" will leak memory.  */
d191 1
a191 1
    return NULL;
d201 1
a201 1
	return NULL;
d210 1
a210 1
	return NULL;
d218 1
a218 1
	return NULL;
d233 10
@


1.1
log
@Initial revision
@
text
@d225 8
@


1.1.1.1
log
@19990502 sourceware import
@
text
@@

