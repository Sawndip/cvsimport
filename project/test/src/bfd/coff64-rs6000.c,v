head	1.93;
access;
symbols
	sid-snapshot-20180601:1.93
	sid-snapshot-20180501:1.93
	sid-snapshot-20180401:1.93
	sid-snapshot-20180301:1.93
	sid-snapshot-20180201:1.93
	sid-snapshot-20180101:1.93
	sid-snapshot-20171201:1.93
	sid-snapshot-20171101:1.93
	sid-snapshot-20171001:1.93
	sid-snapshot-20170901:1.93
	sid-snapshot-20170801:1.93
	sid-snapshot-20170701:1.93
	sid-snapshot-20170601:1.93
	sid-snapshot-20170501:1.93
	sid-snapshot-20170401:1.93
	sid-snapshot-20170301:1.93
	sid-snapshot-20170201:1.93
	sid-snapshot-20170101:1.93
	sid-snapshot-20161201:1.93
	sid-snapshot-20161101:1.93
	sid-snapshot-20160901:1.93
	sid-snapshot-20160801:1.93
	sid-snapshot-20160701:1.93
	sid-snapshot-20160601:1.93
	sid-snapshot-20160501:1.93
	sid-snapshot-20160401:1.93
	sid-snapshot-20160301:1.93
	sid-snapshot-20160201:1.93
	sid-snapshot-20160101:1.93
	sid-snapshot-20151201:1.93
	sid-snapshot-20151101:1.93
	sid-snapshot-20151001:1.93
	sid-snapshot-20150901:1.93
	sid-snapshot-20150801:1.93
	sid-snapshot-20150701:1.93
	sid-snapshot-20150601:1.93
	sid-snapshot-20150501:1.93
	sid-snapshot-20150401:1.93
	sid-snapshot-20150301:1.93
	sid-snapshot-20150201:1.93
	sid-snapshot-20150101:1.93
	sid-snapshot-20141201:1.93
	sid-snapshot-20141101:1.93
	sid-snapshot-20141001:1.93
	sid-snapshot-20140901:1.93
	sid-snapshot-20140801:1.93
	sid-snapshot-20140701:1.93
	sid-snapshot-20140601:1.93
	sid-snapshot-20140501:1.93
	sid-snapshot-20140401:1.93
	sid-snapshot-20140301:1.93
	sid-snapshot-20140201:1.93
	sid-snapshot-20140101:1.93
	sid-snapshot-20131201:1.93
	sid-snapshot-20131101:1.93
	sid-snapshot-20131001:1.93
	binutils-2_24-branch:1.93.0.2
	binutils-2_24-branchpoint:1.93
	binutils-2_21_1:1.85
	sid-snapshot-20130901:1.93
	gdb_7_6_1-2013-08-30-release:1.91
	sid-snapshot-20130801:1.93
	sid-snapshot-20130701:1.92
	sid-snapshot-20130601:1.92
	sid-snapshot-20130501:1.91
	gdb_7_6-2013-04-26-release:1.91
	sid-snapshot-20130401:1.91
	binutils-2_23_2:1.90
	gdb_7_6-branch:1.91.0.2
	gdb_7_6-2013-03-12-branchpoint:1.91
	sid-snapshot-20130301:1.91
	sid-snapshot-20130201:1.91
	sid-snapshot-20130101:1.91
	sid-snapshot-20121201:1.91
	gdb_7_5_1-2012-11-29-release:1.89
	binutils-2_23_1:1.90
	sid-snapshot-20121101:1.91
	binutils-2_23:1.90
	sid-snapshot-20121001:1.90
	sid-snapshot-20120901:1.90
	gdb_7_5-2012-08-17-release:1.89
	sid-snapshot-20120801:1.90
	binutils-2_23-branch:1.90.0.2
	binutils-2_23-branchpoint:1.90
	gdb_7_5-branch:1.89.0.8
	gdb_7_5-2012-07-18-branchpoint:1.89
	sid-snapshot-20120701:1.89
	sid-snapshot-20120601:1.89
	sid-snapshot-20120501:1.89
	binutils-2_22_branch:1.89.0.6
	gdb_7_4_1-2012-04-26-release:1.89
	sid-snapshot-20120401:1.89
	sid-snapshot-20120301:1.89
	sid-snapshot-20120201:1.89
	gdb_7_4-2012-01-24-release:1.89
	sid-snapshot-20120101:1.89
	gdb_7_4-branch:1.89.0.4
	gdb_7_4-2011-12-13-branchpoint:1.89
	sid-snapshot-20111201:1.89
	binutils-2_22:1.89
	sid-snapshot-20111101:1.89
	sid-snapshot-20111001:1.89
	binutils-2_22-branch:1.89.0.2
	binutils-2_22-branchpoint:1.89
	gdb_7_3_1-2011-09-04-release:1.85
	sid-snapshot-20110901:1.89
	sid-snapshot-20110801:1.89
	gdb_7_3-2011-07-26-release:1.85
	sid-snapshot-20110701:1.88
	sid-snapshot-20110601:1.87
	sid-snapshot-20110501:1.86
	gdb_7_3-branch:1.85.0.4
	gdb_7_3-2011-04-01-branchpoint:1.85
	sid-snapshot-20110401:1.85
	sid-snapshot-20110301:1.85
	sid-snapshot-20110201:1.85
	sid-snapshot-20110101:1.85
	binutils-2_21:1.85
	sid-snapshot-20101201:1.85
	binutils-2_21-branch:1.85.0.2
	binutils-2_21-branchpoint:1.85
	sid-snapshot-20101101:1.85
	sid-snapshot-20101001:1.85
	binutils-2_20_1:1.78.6.2
	gdb_7_2-2010-09-02-release:1.84
	sid-snapshot-20100901:1.85
	sid-snapshot-20100801:1.84
	gdb_7_2-branch:1.84.0.2
	gdb_7_2-2010-07-07-branchpoint:1.84
	sid-snapshot-20100701:1.84
	sid-snapshot-20100601:1.84
	sid-snapshot-20100501:1.84
	sid-snapshot-20100401:1.84
	gdb_7_1-2010-03-18-release:1.83
	sid-snapshot-20100301:1.83
	gdb_7_1-branch:1.83.0.2
	gdb_7_1-2010-02-18-branchpoint:1.83
	sid-snapshot-20100201:1.83
	sid-snapshot-20100101:1.81
	gdb_7_0_1-2009-12-22-release:1.79
	sid-snapshot-20091201:1.81
	sid-snapshot-20091101:1.79
	binutils-2_20:1.78.6.1
	gdb_7_0-2009-10-06-release:1.79
	sid-snapshot-20091001:1.79
	gdb_7_0-branch:1.79.0.2
	gdb_7_0-2009-09-16-branchpoint:1.79
	arc-sim-20090309:1.70
	binutils-arc-20081103-branch:1.72.0.10
	binutils-arc-20081103-branchpoint:1.72
	binutils-2_20-branch:1.78.0.6
	binutils-2_20-branchpoint:1.78
	sid-snapshot-20090901:1.78
	sid-snapshot-20090801:1.78
	msnyder-checkpoint-072509-branch:1.78.0.4
	msnyder-checkpoint-072509-branchpoint:1.78
	sid-snapshot-20090701:1.78
	dje-cgen-play1-branch:1.78.0.2
	dje-cgen-play1-branchpoint:1.78
	sid-snapshot-20090601:1.78
	sid-snapshot-20090501:1.78
	sid-snapshot-20090401:1.77
	arc-20081103-branch:1.72.0.8
	arc-20081103-branchpoint:1.72
	arc-insight_6_8-branch:1.70.0.14
	arc-insight_6_8-branchpoint:1.70
	insight_6_8-branch:1.70.0.12
	insight_6_8-branchpoint:1.70
	sid-snapshot-20090301:1.73
	binutils-2_19_1:1.71
	sid-snapshot-20090201:1.72
	sid-snapshot-20090101:1.72
	reverse-20081226-branch:1.72.0.6
	reverse-20081226-branchpoint:1.72
	sid-snapshot-20081201:1.72
	multiprocess-20081120-branch:1.72.0.4
	multiprocess-20081120-branchpoint:1.72
	sid-snapshot-20081101:1.72
	binutils-2_19:1.71
	sid-snapshot-20081001:1.72
	reverse-20080930-branch:1.72.0.2
	reverse-20080930-branchpoint:1.72
	binutils-2_19-branch:1.71.0.2
	binutils-2_19-branchpoint:1.71
	sid-snapshot-20080901:1.71
	sid-snapshot-20080801:1.71
	reverse-20080717-branch:1.70.0.10
	reverse-20080717-branchpoint:1.70
	sid-snapshot-20080701:1.70
	msnyder-reverse-20080609-branch:1.70.0.8
	msnyder-reverse-20080609-branchpoint:1.70
	drow-reverse-20070409-branch:1.68.0.2
	drow-reverse-20070409-branchpoint:1.68
	sid-snapshot-20080601:1.70
	sid-snapshot-20080501:1.70
	sid-snapshot-20080403:1.70
	sid-snapshot-20080401:1.70
	gdb_6_8-2008-03-27-release:1.70
	sid-snapshot-20080301:1.70
	gdb_6_8-branch:1.70.0.6
	gdb_6_8-2008-02-26-branchpoint:1.70
	sid-snapshot-20080201:1.70
	sid-snapshot-20080101:1.70
	sid-snapshot-20071201:1.70
	sid-snapshot-20071101:1.70
	gdb_6_7_1-2007-10-29-release:1.70
	gdb_6_7-2007-10-10-release:1.70
	sid-snapshot-20071001:1.70
	gdb_6_7-branch:1.70.0.4
	gdb_6_7-2007-09-07-branchpoint:1.70
	binutils-2_18:1.70
	binutils-2_18-branch:1.70.0.2
	binutils-2_18-branchpoint:1.70
	insight_6_6-20070208-release:1.67
	binutils-csl-coldfire-4_1-32:1.66
	binutils-csl-sourcerygxx-4_1-32:1.66
	gdb_6_6-2006-12-18-release:1.67
	binutils-csl-innovasic-fido-3_4_4-33:1.66
	binutils-csl-sourcerygxx-3_4_4-32:1.58
	binutils-csl-coldfire-4_1-30:1.66
	binutils-csl-sourcerygxx-4_1-30:1.66
	binutils-csl-coldfire-4_1-28:1.66
	binutils-csl-sourcerygxx-4_1-29:1.66
	binutils-csl-sourcerygxx-4_1-28:1.66
	gdb_6_6-branch:1.67.0.2
	gdb_6_6-2006-11-15-branchpoint:1.67
	binutils-csl-arm-2006q3-27:1.66
	binutils-csl-sourcerygxx-4_1-27:1.66
	binutils-csl-arm-2006q3-26:1.66
	binutils-csl-sourcerygxx-4_1-26:1.66
	binutils-csl-sourcerygxx-4_1-25:1.66
	binutils-csl-sourcerygxx-4_1-24:1.66
	binutils-csl-sourcerygxx-4_1-23:1.66
	insight_6_5-20061003-release:1.66
	gdb-csl-symbian-6_4_50_20060226-12:1.66
	binutils-csl-sourcerygxx-4_1-21:1.66
	binutils-csl-arm-2006q3-21:1.66
	binutils-csl-sourcerygxx-4_1-22:1.66
	binutils-csl-palmsource-arm-prelinker-1_0-1:1.66
	binutils-csl-sourcerygxx-4_1-20:1.66
	binutils-csl-arm-2006q3-19:1.66
	binutils-csl-sourcerygxx-4_1-19:1.66
	binutils-csl-sourcerygxx-4_1-18:1.66
	binutils-csl-renesas-4_1-9:1.66
	gdb-csl-sourcerygxx-3_4_4-25:1.65
	binutils-csl-sourcerygxx-3_4_4-25:1.58
	nickrob-async-20060828-mergepoint:1.67
	gdb-csl-symbian-6_4_50_20060226-11:1.66
	binutils-csl-renesas-4_1-8:1.66
	binutils-csl-renesas-4_1-7:1.66
	binutils-csl-renesas-4_1-6:1.66
	gdb-csl-sourcerygxx-4_1-17:1.66
	binutils-csl-sourcerygxx-4_1-17:1.66
	gdb-csl-20060226-branch-local-2:1.66
	gdb-csl-sourcerygxx-4_1-14:1.66
	binutils-csl-sourcerygxx-4_1-14:1.66
	binutils-csl-sourcerygxx-4_1-15:1.66
	gdb-csl-sourcerygxx-4_1-13:1.66
	binutils-csl-sourcerygxx-4_1-13:1.66
	binutils-2_17:1.66
	gdb-csl-sourcerygxx-4_1-12:1.66
	binutils-csl-sourcerygxx-4_1-12:1.66
	gdb-csl-sourcerygxx-3_4_4-21:1.66
	binutils-csl-sourcerygxx-3_4_4-21:1.66
	gdb_6_5-20060621-release:1.66
	binutils-csl-wrs-linux-3_4_4-24:1.58
	binutils-csl-wrs-linux-3_4_4-23:1.58
	gdb-csl-sourcerygxx-4_1-9:1.66
	binutils-csl-sourcerygxx-4_1-9:1.66
	gdb-csl-sourcerygxx-4_1-8:1.66
	binutils-csl-sourcerygxx-4_1-8:1.66
	gdb-csl-sourcerygxx-4_1-7:1.66
	binutils-csl-sourcerygxx-4_1-7:1.66
	gdb-csl-arm-2006q1-6:1.66
	binutils-csl-arm-2006q1-6:1.66
	gdb-csl-sourcerygxx-4_1-6:1.66
	binutils-csl-sourcerygxx-4_1-6:1.66
	binutils-csl-wrs-linux-3_4_4-22:1.58
	gdb-csl-symbian-6_4_50_20060226-10:1.66
	gdb-csl-symbian-6_4_50_20060226-9:1.66
	gdb-csl-symbian-6_4_50_20060226-8:1.66
	gdb-csl-coldfire-4_1-11:1.66
	binutils-csl-coldfire-4_1-11:1.66
	gdb-csl-sourcerygxx-3_4_4-19:1.66
	binutils-csl-sourcerygxx-3_4_4-19:1.66
	gdb-csl-coldfire-4_1-10:1.66
	gdb_6_5-branch:1.66.0.20
	gdb_6_5-2006-05-14-branchpoint:1.66
	binutils-csl-coldfire-4_1-10:1.66
	gdb-csl-sourcerygxx-4_1-5:1.66
	binutils-csl-sourcerygxx-4_1-5:1.66
	nickrob-async-20060513-branch:1.66.0.18
	nickrob-async-20060513-branchpoint:1.66
	gdb-csl-sourcerygxx-4_1-4:1.66
	binutils-csl-sourcerygxx-4_1-4:1.66
	msnyder-reverse-20060502-branch:1.66.0.16
	msnyder-reverse-20060502-branchpoint:1.66
	binutils-csl-wrs-linux-3_4_4-21:1.58
	gdb-csl-morpho-4_1-4:1.66
	binutils-csl-morpho-4_1-4:1.66
	gdb-csl-sourcerygxx-3_4_4-17:1.66
	binutils-csl-sourcerygxx-3_4_4-17:1.66
	binutils-csl-wrs-linux-3_4_4-20:1.58
	readline_5_1-import-branch:1.66.0.14
	readline_5_1-import-branchpoint:1.66
	gdb-csl-20060226-branch-merge-to-csl-symbian-1:1.66
	binutils-2_17-branch:1.66.0.12
	binutils-2_17-branchpoint:1.66
	gdb-csl-symbian-20060226-branch:1.66.0.10
	gdb-csl-symbian-20060226-branchpoint:1.66
	gdb-csl-20060226-branch-merge-to-csl-local-1:1.66
	msnyder-reverse-20060331-branch:1.66.0.8
	msnyder-reverse-20060331-branchpoint:1.66
	binutils-csl-2_17-branch:1.66.0.6
	binutils-csl-2_17-branchpoint:1.66
	gdb-csl-available-20060303-branch:1.66.0.4
	gdb-csl-available-20060303-branchpoint:1.66
	gdb-csl-20060226-branch:1.66.0.2
	gdb-csl-20060226-branchpoint:1.66
	gdb_6_4-20051202-release:1.65
	msnyder-fork-checkpoint-branch:1.65.0.6
	msnyder-fork-checkpoint-branchpoint:1.65
	gdb-csl-gxxpro-6_3-branch:1.65.0.4
	gdb-csl-gxxpro-6_3-branchpoint:1.65
	gdb_6_4-branch:1.65.0.2
	gdb_6_4-2005-11-01-branchpoint:1.65
	gdb-csl-arm-20051020-branch:1.64.0.2
	gdb-csl-arm-20051020-branchpoint:1.64
	binutils-csl-gxxpro-3_4-branch:1.58.0.8
	binutils-csl-gxxpro-3_4-branchpoint:1.58
	binutils-2_16_1:1.58
	msnyder-tracepoint-checkpoint-branch:1.61.0.2
	msnyder-tracepoint-checkpoint-branchpoint:1.61
	gdb-csl-arm-20050325-2005-q1b:1.58
	binutils-csl-arm-2005q1b:1.58
	binutils-2_16:1.58
	gdb-csl-arm-20050325-2005-q1a:1.58
	binutils-csl-arm-2005q1a:1.58
	csl-arm-20050325-branch:1.58.0.6
	csl-arm-20050325-branchpoint:1.58
	binutils-csl-arm-2005q1-branch:1.58.0.4
	binutils-csl-arm-2005q1-branchpoint:1.58
	binutils-2_16-branch:1.58.0.2
	binutils-2_16-branchpoint:1.58
	csl-arm-2004-q3d:1.57
	gdb_6_3-20041109-release:1.56
	gdb_6_3-branch:1.56.0.2
	gdb_6_3-20041019-branchpoint:1.56
	csl-arm-2004-q3:1.55
	drow_intercu-merge-20040921:1.55
	drow_intercu-merge-20040915:1.55
	jimb-gdb_6_2-e500-branch:1.53.0.6
	jimb-gdb_6_2-e500-branchpoint:1.53
	gdb_6_2-20040730-release:1.53
	gdb_6_2-branch:1.53.0.2
	gdb_6_2-2004-07-10-gmt-branchpoint:1.53
	gdb_6_1_1-20040616-release:1.48
	binutils-2_15:1.48
	binutils-2_15-branchpoint:1.48
	csl-arm-2004-q1a:1.50
	csl-arm-2004-q1:1.48
	gdb_6_1-2004-04-05-release:1.48
	drow_intercu-merge-20040402:1.48
	drow_intercu-merge-20040327:1.48
	ezannoni_pie-20040323-branch:1.48.0.14
	ezannoni_pie-20040323-branchpoint:1.48
	cagney_tramp-20040321-mergepoint:1.48
	cagney_tramp-20040309-branch:1.48.0.12
	cagney_tramp-20040309-branchpoint:1.48
	gdb_6_1-branch:1.48.0.10
	gdb_6_1-2004-03-01-gmt-branchpoint:1.48
	drow_intercu-20040221-branch:1.48.0.8
	drow_intercu-20040221-branchpoint:1.48
	binutils-2_15-branch:1.48.0.6
	cagney_bfdfile-20040213-branch:1.48.0.4
	cagney_bfdfile-20040213-branchpoint:1.48
	drow-cplus-merge-20040208:1.48
	carlton_dictionary-20040126-merge:1.48
	cagney_bigcore-20040122-branch:1.48.0.2
	cagney_bigcore-20040122-branchpoint:1.48
	drow-cplus-merge-20040113:1.48
	csl-arm-2003-q4:1.48
	drow-cplus-merge-20031224:1.48
	drow-cplus-merge-20031220:1.48
	carlton_dictionary-20031215-merge:1.48
	drow-cplus-merge-20031214:1.48
	carlton-dictionary-20031111-merge:1.46
	gdb_6_0-2003-10-04-release:1.44
	kettenis_sparc-20030918-branch:1.45.0.6
	kettenis_sparc-20030918-branchpoint:1.45
	carlton_dictionary-20030917-merge:1.45
	ezannoni_pie-20030916-branchpoint:1.45
	ezannoni_pie-20030916-branch:1.45.0.4
	cagney_x86i386-20030821-branch:1.45.0.2
	cagney_x86i386-20030821-branchpoint:1.45
	carlton_dictionary-20030805-merge:1.45
	carlton_dictionary-20030627-merge:1.45
	gdb_6_0-branch:1.44.0.36
	gdb_6_0-2003-06-23-branchpoint:1.44
	jimb-ppc64-linux-20030613-branch:1.44.0.34
	jimb-ppc64-linux-20030613-branchpoint:1.44
	binutils-2_14:1.44
	cagney_convert-20030606-branch:1.44.0.32
	cagney_convert-20030606-branchpoint:1.44
	cagney_writestrings-20030508-branch:1.44.0.30
	cagney_writestrings-20030508-branchpoint:1.44
	jimb-ppc64-linux-20030528-branch:1.44.0.28
	jimb-ppc64-linux-20030528-branchpoint:1.44
	carlton_dictionary-20030523-merge:1.44
	cagney_fileio-20030521-branch:1.44.0.26
	cagney_fileio-20030521-branchpoint:1.44
	kettenis_i386newframe-20030517-mergepoint:1.44
	jimb-ppc64-linux-20030509-branch:1.44.0.24
	jimb-ppc64-linux-20030509-branchpoint:1.44
	kettenis_i386newframe-20030504-mergepoint:1.44
	carlton_dictionary-20030430-merge:1.44
	binutils-2_14-branch:1.44.0.22
	binutils-2_14-branchpoint:1.44
	kettenis_i386newframe-20030419-branch:1.44.0.20
	kettenis_i386newframe-20030419-branchpoint:1.44
	carlton_dictionary-20030416-merge:1.44
	cagney_frameaddr-20030409-mergepoint:1.44
	kettenis_i386newframe-20030406-branch:1.44.0.18
	kettenis_i386newframe-20030406-branchpoint:1.44
	cagney_frameaddr-20030403-branchpoint:1.44
	cagney_frameaddr-20030403-branch:1.44.0.16
	cagney_framebase-20030330-mergepoint:1.44
	cagney_framebase-20030326-branch:1.44.0.14
	cagney_framebase-20030326-branchpoint:1.44
	cagney_lazyid-20030317-branch:1.44.0.12
	cagney_lazyid-20030317-branchpoint:1.44
	kettenis-i386newframe-20030316-mergepoint:1.44
	offbyone-20030313-branch:1.44.0.10
	offbyone-20030313-branchpoint:1.44
	kettenis-i386newframe-20030308-branch:1.44.0.8
	kettenis-i386newframe-20030308-branchpoint:1.44
	carlton_dictionary-20030305-merge:1.44
	cagney_offbyone-20030303-branch:1.44.0.6
	cagney_offbyone-20030303-branchpoint:1.44
	carlton_dictionary-20030207-merge:1.44
	interps-20030202-branch:1.44.0.4
	interps-20030202-branchpoint:1.44
	cagney-unwind-20030108-branch:1.44.0.2
	cagney-unwind-20030108-branchpoint:1.44
	binutils-2_13_2_1:1.33.2.1
	binutils-2_13_2:1.33.2.1
	carlton_dictionary-20021223-merge:1.43
	gdb_5_3-2002-12-12-release:1.41
	carlton_dictionary-20021115-merge:1.41
	binutils-2_13_1:1.33.2.1
	kseitz_interps-20021105-merge:1.41
	kseitz_interps-20021103-merge:1.41
	drow-cplus-merge-20021020:1.41
	drow-cplus-merge-20021025:1.41
	carlton_dictionary-20021025-merge:1.41
	carlton_dictionary-20021011-merge:1.41
	drow-cplus-branch:1.41.0.8
	drow-cplus-branchpoint:1.41
	kseitz_interps-20020930-merge:1.41
	carlton_dictionary-20020927-merge:1.41
	carlton_dictionary-branch:1.41.0.6
	carlton_dictionary-20020920-branchpoint:1.41
	sid-20020905-branchpoint:1.41
	sid-20020905-branch:1.41.0.4
	gdb_5_3-branch:1.41.0.2
	gdb_5_3-2002-09-04-branchpoint:1.41
	kseitz_interps-20020829-merge:1.40
	cagney_sysregs-20020825-branch:1.40.0.4
	cagney_sysregs-20020825-branchpoint:1.40
	readline_4_3-import-branch:1.40.0.2
	readline_4_3-import-branchpoint:1.40
	binutils-2_13:1.33
	gdb_5_2_1-2002-07-23-release:1.19
	binutils-2_13-branchpoint:1.33
	binutils-2_13-branch:1.33.0.2
	kseitz_interps-20020528-branch:1.29.0.2
	kseitz_interps-20020528-branchpoint:1.29
	cagney_regbuf-20020515-branch:1.27.0.2
	cagney_regbuf-20020515-branchpoint:1.27
	binutils-2_12_1:1.16.2.1
	jimb-macro-020506-branch:1.26.0.2
	jimb-macro-020506-branchpoint:1.26
	gdb_5_2-2002-04-29-release:1.19
	binutils-2_12:1.16
	gdb_5_2-branch:1.19.0.2
	gdb_5_2-2002-03-03-branchpoint:1.19
	binutils-2_12-branch:1.16.0.2
	binutils-2_12-branchpoint:1.16
	gdb_5_1_1-2002-01-24-release:1.10
	gdb_5_1_0_1-2002-01-03-release:1.10
	cygnus_cvs_20020108_pre:1.16
	gdb_5_1_0_1-2002-01-03-branch:1.10.0.6
	gdb_5_1_0_1-2002-01-03-branchpoint:1.10
	gdb_5_1-2001-11-21-release:1.10
	gdb_s390-2001-09-26-branch:1.10.0.4
	gdb_s390-2001-09-26-branchpoint:1.10
	gdb_5_1-2001-07-29-branch:1.10.0.2
	gdb_5_1-2001-07-29-branchpoint:1.10
	binutils-2_11_2:1.6.2.1
	binutils-2_11_1:1.6.2.1
	binutils-2_11:1.6
	x86_64versiong3:1.6
	binutils-2_11-branch:1.6.0.2
	insight-precleanup-2001-01-01:1.5
	binutils_latest_snapshot:1.93
	gdb-premipsmulti-2000-06-06-branch:1.3.0.2
	gdb-premipsmulti-2000-06-06-branchpoint:1.3;
locks; strict;
comment	@ * @;


1.93
date	2013.07.24.14.12.40;	author gingold;	state Exp;
branches;
next	1.92;

1.92
date	2013.05.16.15.41.40;	author gingold;	state Exp;
branches;
next	1.91;

1.91
date	2012.10.16.22.56.55;	author brobecke;	state Exp;
branches;
next	1.90;

1.90
date	2012.07.24.21.06.57;	author ccoutant;	state Exp;
branches;
next	1.89;

1.89
date	2011.07.11.15.03.04;	author clm;	state Exp;
branches;
next	1.88;

1.88
date	2011.06.06.01.26.02;	author amodra;	state Exp;
branches;
next	1.87;

1.87
date	2011.05.04.11.05.14;	author gingold;	state Exp;
branches;
next	1.86;

1.86
date	2011.04.26.14.57.37;	author gingold;	state Exp;
branches;
next	1.85;

1.85
date	2010.08.18.12.24.04;	author palves;	state Exp;
branches;
next	1.84;

1.84
date	2010.03.24.15.41.58;	author hjl;	state Exp;
branches;
next	1.83;

1.83
date	2010.01.26.13.42.26;	author gingold;	state Exp;
branches;
next	1.82;

1.82
date	2010.01.23.12.05.31;	author rsandifo;	state Exp;
branches;
next	1.81;

1.81
date	2009.11.23.14.41.29;	author pbrook;	state Exp;
branches;
next	1.80;

1.80
date	2009.11.19.10.06.03;	author gingold;	state Exp;
branches;
next	1.79;

1.79
date	2009.09.05.07.56.21;	author nickc;	state Exp;
branches;
next	1.78;

1.78
date	2009.04.16.23.06.59;	author rsandifo;	state Exp;
branches
	1.78.6.1;
next	1.77;

1.77
date	2009.03.14.09.34.27;	author rsandifo;	state Exp;
branches;
next	1.76;

1.76
date	2009.03.14.09.17.32;	author rsandifo;	state Exp;
branches;
next	1.75;

1.75
date	2009.03.14.09.16.01;	author rsandifo;	state Exp;
branches;
next	1.74;

1.74
date	2009.03.14.09.14.56;	author rsandifo;	state Exp;
branches;
next	1.73;

1.73
date	2009.02.18.18.23.06;	author davek;	state Exp;
branches;
next	1.72;

1.72
date	2008.09.30.10.50.03;	author nickc;	state Exp;
branches;
next	1.71;

1.71
date	2008.07.18.11.30.22;	author nickc;	state Exp;
branches;
next	1.70;

1.70
date	2007.07.03.14.26.40;	author nickc;	state Exp;
branches;
next	1.69;

1.69
date	2007.04.26.14.46.55;	author amodra;	state Exp;
branches;
next	1.68;

1.68
date	2007.03.26.12.22.59;	author amodra;	state Exp;
branches;
next	1.67;

1.67
date	2006.06.19.13.17.43;	author amodra;	state Exp;
branches;
next	1.66;

1.66
date	2005.11.24.06.02.08;	author amodra;	state Exp;
branches;
next	1.65;

1.65
date	2005.10.24.02.50.27;	author hjl;	state Exp;
branches;
next	1.64;

1.64
date	2005.10.15.15.38.12;	author hjl;	state Exp;
branches;
next	1.63;

1.63
date	2005.07.05.09.45.54;	author jakub;	state Exp;
branches;
next	1.62;

1.62
date	2005.06.07.03.13.05;	author amodra;	state Exp;
branches;
next	1.61;

1.61
date	2005.05.23.17.44.52;	author fnf;	state Exp;
branches;
next	1.60;

1.60
date	2005.05.04.15.53.04;	author nickc;	state Exp;
branches;
next	1.59;

1.59
date	2005.05.04.07.19.20;	author nickc;	state Exp;
branches;
next	1.58;

1.58
date	2005.02.20.14.59.06;	author amodra;	state Exp;
branches;
next	1.57;

1.57
date	2004.10.21.15.28.19;	author hjl;	state Exp;
branches;
next	1.56;

1.56
date	2004.10.09.02.51.30;	author amodra;	state Exp;
branches;
next	1.55;

1.55
date	2004.08.13.03.15.56;	author amodra;	state Exp;
branches;
next	1.54;

1.54
date	2004.07.21.15.42.57;	author hjl;	state Exp;
branches;
next	1.53;

1.53
date	2004.06.24.04.46.16;	author amodra;	state Exp;
branches;
next	1.52;

1.52
date	2004.06.15.01.24.22;	author amodra;	state Exp;
branches;
next	1.51;

1.51
date	2004.05.17.16.40.00;	author bwilson;	state Exp;
branches;
next	1.50;

1.50
date	2004.04.30.14.23.39;	author amodra;	state Exp;
branches;
next	1.49;

1.49
date	2004.04.22.14.45.31;	author jakub;	state Exp;
branches;
next	1.48;

1.48
date	2003.12.01.06.33.00;	author kazu;	state Exp;
branches
	1.48.8.1;
next	1.47;

1.47
date	2003.11.24.18.06.40;	author kazu;	state Exp;
branches;
next	1.46;

1.46
date	2003.10.16.04.11.04;	author cagney;	state Exp;
branches;
next	1.45;

1.45
date	2003.06.25.06.40.23;	author amodra;	state Exp;
branches;
next	1.44;

1.44
date	2002.12.24.03.43.44;	author dj;	state Exp;
branches;
next	1.43;

1.43
date	2002.12.08.03.34.38;	author amodra;	state Exp;
branches;
next	1.42;

1.42
date	2002.11.30.08.39.36;	author amodra;	state Exp;
branches;
next	1.41;

1.41
date	2002.09.02.11.47.42;	author amodra;	state Exp;
branches
	1.41.6.1
	1.41.8.1;
next	1.40;

1.40
date	2002.08.22.05.13.04;	author amodra;	state Exp;
branches;
next	1.39;

1.39
date	2002.08.06.08.59.34;	author amodra;	state Exp;
branches;
next	1.38;

1.38
date	2002.08.06.08.51.42;	author amodra;	state Exp;
branches;
next	1.37;

1.37
date	2002.08.06.05.52.29;	author amodra;	state Exp;
branches;
next	1.36;

1.36
date	2002.08.06.03.18.25;	author amodra;	state Exp;
branches;
next	1.35;

1.35
date	2002.08.06.02.29.25;	author amodra;	state Exp;
branches;
next	1.34;

1.34
date	2002.07.30.05.49.24;	author amodra;	state Exp;
branches;
next	1.33;

1.33
date	2002.06.25.06.21.47;	author amodra;	state Exp;
branches
	1.33.2.1;
next	1.32;

1.32
date	2002.06.07.15.04.47;	author amodra;	state Exp;
branches;
next	1.31;

1.31
date	2002.06.05.03.43.09;	author amodra;	state Exp;
branches;
next	1.30;

1.30
date	2002.05.31.01.07.21;	author trix;	state Exp;
branches;
next	1.29;

1.29
date	2002.05.18.13.13.12;	author trix;	state Exp;
branches
	1.29.2.1;
next	1.28;

1.28
date	2002.05.15.00.18.55;	author amodra;	state Exp;
branches;
next	1.27;

1.27
date	2002.05.10.21.20.10;	author trix;	state Exp;
branches
	1.27.2.1;
next	1.26;

1.26
date	2002.05.04.10.07.18;	author trix;	state Exp;
branches;
next	1.25;

1.25
date	2002.04.28.14.34.39;	author trix;	state Exp;
branches;
next	1.24;

1.24
date	2002.04.20.06.47.24;	author trix;	state Exp;
branches;
next	1.23;

1.23
date	2002.04.04.19.53.35;	author drow;	state Exp;
branches;
next	1.22;

1.22
date	2002.03.21.09.15.12;	author amodra;	state Exp;
branches;
next	1.21;

1.21
date	2002.03.20.16.49.10;	author trix;	state Exp;
branches;
next	1.20;

1.20
date	2002.03.18.12.45.36;	author nickc;	state Exp;
branches;
next	1.19;

1.19
date	2002.03.02.13.23.57;	author trix;	state Exp;
branches;
next	1.18;

1.18
date	2002.02.21.03.57.31;	author trix;	state Exp;
branches;
next	1.17;

1.17
date	2002.02.19.05.01.27;	author trix;	state Exp;
branches;
next	1.16;

1.16
date	2001.12.31.04.08.23;	author trix;	state Exp;
branches
	1.16.2.1;
next	1.15;

1.15
date	2001.12.22.17.18.34;	author trix;	state Exp;
branches;
next	1.14;

1.14
date	2001.10.10.12.08.27;	author kazu;	state Exp;
branches;
next	1.13;

1.13
date	2001.09.20.23.30.34;	author amodra;	state Exp;
branches;
next	1.12;

1.12
date	2001.09.18.09.57.22;	author amodra;	state Exp;
branches;
next	1.11;

1.11
date	2001.08.10.06.00.53;	author amodra;	state Exp;
branches;
next	1.10;

1.10
date	2001.05.25.21.23.48;	author hjl;	state Exp;
branches;
next	1.9;

1.9
date	2001.05.24.20.50.50;	author trix;	state Exp;
branches;
next	1.8;

1.8
date	2001.03.16.18.49.32;	author nickc;	state Exp;
branches;
next	1.7;

1.7
date	2001.03.08.21.03.57;	author nickc;	state Exp;
branches;
next	1.6;

1.6
date	2001.01.23.11.45.52;	author kazu;	state Exp;
branches
	1.6.2.1;
next	1.5;

1.5
date	2000.11.28.21.42.16;	author kazu;	state Exp;
branches;
next	1.4;

1.4
date	2000.11.28.01.33.15;	author kazu;	state Exp;
branches;
next	1.3;

1.3
date	2000.05.06.01.47.17;	author cpopetz;	state Exp;
branches;
next	1.2;

1.2
date	2000.04.28.20.02.30;	author cpopetz;	state Exp;
branches;
next	1.1;

1.1
date	2000.04.26.15.09.42;	author cpopetz;	state Exp;
branches;
next	;

1.78.6.1
date	2009.09.05.08.00.18;	author nickc;	state Exp;
branches;
next	1.78.6.2;

1.78.6.2
date	2010.01.30.09.58.02;	author rsandifo;	state Exp;
branches;
next	;

1.48.8.1
date	2004.09.16.17.00.14;	author drow;	state Exp;
branches;
next	;

1.41.6.1
date	2002.12.23.19.37.29;	author carlton;	state Exp;
branches;
next	1.41.6.2;

1.41.6.2
date	2003.02.07.19.17.36;	author carlton;	state Exp;
branches;
next	1.41.6.3;

1.41.6.3
date	2003.06.27.21.49.07;	author carlton;	state Exp;
branches;
next	1.41.6.4;

1.41.6.4
date	2003.11.11.23.50.09;	author carlton;	state Exp;
branches;
next	1.41.6.5;

1.41.6.5
date	2003.12.15.23.59.15;	author carlton;	state Exp;
branches;
next	;

1.41.8.1
date	2003.12.14.20.26.35;	author drow;	state Exp;
branches;
next	;

1.33.2.1
date	2002.09.23.22.12.38;	author drow;	state Exp;
branches;
next	;

1.29.2.1
date	2002.06.20.01.29.46;	author kseitz;	state Exp;
branches;
next	1.29.2.2;

1.29.2.2
date	2002.07.22.21.46.39;	author kseitz;	state Exp;
branches;
next	1.29.2.3;

1.29.2.3
date	2002.08.09.18.34.10;	author kseitz;	state Exp;
branches;
next	1.29.2.4;

1.29.2.4
date	2002.08.30.22.52.35;	author kseitz;	state Exp;
branches;
next	1.29.2.5;

1.29.2.5
date	2002.10.01.00.45.42;	author kseitz;	state Exp;
branches;
next	;

1.27.2.1
date	2002.06.15.16.42.34;	author cagney;	state Exp;
branches;
next	;

1.16.2.1
date	2002.03.20.16.53.22;	author trix;	state Exp;
branches;
next	;

1.6.2.1
date	2001.06.07.03.08.23;	author amodra;	state Exp;
branches;
next	;


desc
@@


1.93
log
@bfd/
2013-07-24  Tristan Gingold  <gingold@@adacore.com>

        * coff-rs6000.c (xcoff_howto_table): Fix masks and pc_relative for
        R_RBR.  Add numbers in comments.
        (_bfd_xcoff_reloc_type_lookup): Handle BFD_RELOC_PPC_B16.
        * coff64-rs6000.c: Likewise.

gas/
2013-07-24  Tristan Gingold  <gingold@@adacore.com>

        * config/tc-ppc.c (md_apply_fix): Adjust BFD_RELOC_PPC_B16 on
        xcoff targets.

gas/testsuite/
2013-07-24  Tristan Gingold  <gingold@@adacore.com>

        * gas/ppc/test2xcoff32.s, gas/ppc/test2xcoff32.d: New files
        * gas/ppc/ppc.exp: Add new test.
        * gas/ppc/xcoff-br16-1.s, gas/ppc/xcoff-br16-1.d,
        gas/ppc/xcoff-br16-2.s, gas/ppc/xcoff-br16-2.d: New files
        * gas/ppc/aix.exp: Add new tests.
@
text
@/* BFD back-end for IBM RS/6000 "XCOFF64" files.
   Copyright 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,
   2010, 2011
   Free Software Foundation, Inc.
   Written Clinton Popetz.
   Contributed by Cygnus Support.

   This file is part of BFD, the Binary File Descriptor library.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,
   MA 02110-1301, USA.  */

#include "sysdep.h"
#include "bfd.h"
#include "bfdlink.h"
#include "libbfd.h"
#include "coff/internal.h"
#include "coff/xcoff.h"
#include "coff/rs6k64.h"
#include "libcoff.h"
#include "libxcoff.h"

#define GET_FILEHDR_SYMPTR H_GET_64
#define PUT_FILEHDR_SYMPTR H_PUT_64
#define GET_AOUTHDR_DATA_START H_GET_64
#define PUT_AOUTHDR_DATA_START H_PUT_64
#define GET_AOUTHDR_TEXT_START H_GET_64
#define PUT_AOUTHDR_TEXT_START H_PUT_64
#define GET_AOUTHDR_TSIZE H_GET_64
#define PUT_AOUTHDR_TSIZE H_PUT_64
#define GET_AOUTHDR_DSIZE H_GET_64
#define PUT_AOUTHDR_DSIZE H_PUT_64
#define GET_AOUTHDR_BSIZE H_GET_64
#define PUT_AOUTHDR_BSIZE H_PUT_64
#define GET_AOUTHDR_ENTRY H_GET_64
#define PUT_AOUTHDR_ENTRY H_PUT_64
#define GET_SCNHDR_PADDR H_GET_64
#define PUT_SCNHDR_PADDR H_PUT_64
#define GET_SCNHDR_VADDR H_GET_64
#define PUT_SCNHDR_VADDR H_PUT_64
#define GET_SCNHDR_SIZE H_GET_64
#define PUT_SCNHDR_SIZE H_PUT_64
#define GET_SCNHDR_SCNPTR H_GET_64
#define PUT_SCNHDR_SCNPTR H_PUT_64
#define GET_SCNHDR_RELPTR H_GET_64
#define PUT_SCNHDR_RELPTR H_PUT_64
#define GET_SCNHDR_LNNOPTR H_GET_64
#define PUT_SCNHDR_LNNOPTR H_PUT_64
#define GET_SCNHDR_NRELOC H_GET_32
#define MAX_SCNHDR_NRELOC 0xffffffff
#define PUT_SCNHDR_NRELOC H_PUT_32
#define GET_SCNHDR_NLNNO H_GET_32
#define MAX_SCNHDR_NLNNO 0xffffffff
#define PUT_SCNHDR_NLNNO H_PUT_32
#define GET_RELOC_VADDR H_GET_64
#define PUT_RELOC_VADDR H_PUT_64

#define COFF_FORCE_SYMBOLS_IN_STRINGS
#define COFF_DEBUG_STRING_WIDE_PREFIX


#define COFF_ADJUST_SCNHDR_OUT_POST(ABFD, INT, EXT)			\
  do									\
    {									\
      memset (((SCNHDR *) EXT)->s_pad, 0,				\
	      sizeof (((SCNHDR *) EXT)->s_pad));			\
    }									\
  while (0)

#define NO_COFF_LINENOS

#define coff_SWAP_lineno_in _bfd_xcoff64_swap_lineno_in
#define coff_SWAP_lineno_out _bfd_xcoff64_swap_lineno_out

static void _bfd_xcoff64_swap_lineno_in
  (bfd *, void *, void *);
static unsigned int _bfd_xcoff64_swap_lineno_out
  (bfd *, void *, void *);
static bfd_boolean _bfd_xcoff64_put_symbol_name
  (bfd *, struct bfd_strtab_hash *, struct internal_syment *, const char *);
static bfd_boolean _bfd_xcoff64_put_ldsymbol_name
  (bfd *, struct xcoff_loader_info *, struct internal_ldsym *, const char *);
static void _bfd_xcoff64_swap_sym_in
  (bfd *, void *, void *);
static unsigned int _bfd_xcoff64_swap_sym_out
  (bfd *, void *, void *);
static void _bfd_xcoff64_swap_aux_in
  (bfd *, void *, int, int, int, int, void *);
static unsigned int _bfd_xcoff64_swap_aux_out
  (bfd *, void *, int, int, int, int, void *);
static void xcoff64_swap_reloc_in
  (bfd *, void *, void *);
static unsigned int xcoff64_swap_reloc_out
  (bfd *, void *, void *);
extern bfd_boolean _bfd_xcoff_mkobject
  (bfd *);
extern bfd_boolean _bfd_xcoff_copy_private_bfd_data
  (bfd *, bfd *);
extern bfd_boolean _bfd_xcoff_is_local_label_name
  (bfd *, const char *);
extern void xcoff64_rtype2howto
  (arelent *, struct internal_reloc *);
extern reloc_howto_type * xcoff64_reloc_type_lookup
  (bfd *, bfd_reloc_code_real_type);
extern bfd_boolean _bfd_xcoff_slurp_armap
  (bfd *);
extern void *_bfd_xcoff_read_ar_hdr
  (bfd *);
extern bfd *_bfd_xcoff_openr_next_archived_file
  (bfd *, bfd *);
extern int _bfd_xcoff_stat_arch_elt
  (bfd *, struct stat *);
extern bfd_boolean _bfd_xcoff_write_armap
  (bfd *, unsigned int, struct orl *, unsigned int, int);
extern bfd_boolean _bfd_xcoff_write_archive_contents
  (bfd *);
extern int _bfd_xcoff_sizeof_headers
  (bfd *, struct bfd_link_info *);
extern void _bfd_xcoff_swap_sym_in
  (bfd *, void *, void *);
extern unsigned int _bfd_xcoff_swap_sym_out
  (bfd *, void *, void *);
extern void _bfd_xcoff_swap_aux_in
  (bfd *, void *, int, int, int, int, void *);
extern unsigned int _bfd_xcoff_swap_aux_out
  (bfd *, void *, int, int, int, int, void *);
static void xcoff64_swap_ldhdr_in
  (bfd *, const void *, struct internal_ldhdr *);
static void xcoff64_swap_ldhdr_out
  (bfd *, const struct internal_ldhdr *, void *d);
static void xcoff64_swap_ldsym_in
  (bfd *, const void *, struct internal_ldsym *);
static void xcoff64_swap_ldsym_out
  (bfd *, const struct internal_ldsym *, void *d);
static void xcoff64_swap_ldrel_in
  (bfd *, const void *, struct internal_ldrel *);
static void xcoff64_swap_ldrel_out
  (bfd *, const struct internal_ldrel *, void *d);
static bfd_boolean xcoff64_write_object_contents
  (bfd *);
static bfd_boolean xcoff64_ppc_relocate_section
  (bfd *, struct bfd_link_info *, bfd *, asection *, bfd_byte *,
   struct internal_reloc *, struct internal_syment *,
   asection **);
static bfd_boolean xcoff64_slurp_armap
  (bfd *);
static const bfd_target *xcoff64_archive_p
  (bfd *);
static bfd *xcoff64_openr_next_archived_file
  (bfd *, bfd *);
static int xcoff64_sizeof_headers
  (bfd *, struct bfd_link_info *);
static asection *xcoff64_create_csect_from_smclas
  (bfd *, union internal_auxent *, const char *);
static bfd_boolean xcoff64_is_lineno_count_overflow
  (bfd *, bfd_vma);
static bfd_boolean xcoff64_is_reloc_count_overflow
  (bfd *, bfd_vma);
static bfd_vma xcoff64_loader_symbol_offset
  (bfd *, struct internal_ldhdr *);
static bfd_vma xcoff64_loader_reloc_offset
  (bfd *, struct internal_ldhdr *);
static bfd_boolean xcoff64_generate_rtinit
  (bfd *, const char *, const char *, bfd_boolean);
static bfd_boolean xcoff64_bad_format_hook
  (bfd *, void *);

/* Relocation functions */
static bfd_boolean xcoff64_reloc_type_br
  (XCOFF_RELOC_FUNCTION_ARGS);

bfd_boolean (*xcoff64_calculate_relocation[XCOFF_MAX_CALCULATE_RELOCATION])
  (XCOFF_RELOC_FUNCTION_ARGS) =
{
  xcoff_reloc_type_pos,	 /* R_POS   (0x00) */
  xcoff_reloc_type_neg,	 /* R_NEG   (0x01) */
  xcoff_reloc_type_rel,	 /* R_REL   (0x02) */
  xcoff_reloc_type_toc,	 /* R_TOC   (0x03) */
  xcoff_reloc_type_fail, /* R_RTB   (0x04) */
  xcoff_reloc_type_toc,	 /* R_GL    (0x05) */
  xcoff_reloc_type_toc,	 /* R_TCL   (0x06) */
  xcoff_reloc_type_fail, /*	    (0x07) */
  xcoff_reloc_type_ba,	 /* R_BA    (0x08) */
  xcoff_reloc_type_fail, /*	    (0x09) */
  xcoff64_reloc_type_br, /* R_BR    (0x0a) */
  xcoff_reloc_type_fail, /*	    (0x0b) */
  xcoff_reloc_type_pos,	 /* R_RL    (0x0c) */
  xcoff_reloc_type_pos,	 /* R_RLA   (0x0d) */
  xcoff_reloc_type_fail, /*	    (0x0e) */
  xcoff_reloc_type_noop, /* R_REF   (0x0f) */
  xcoff_reloc_type_fail, /*	    (0x10) */
  xcoff_reloc_type_fail, /*	    (0x11) */
  xcoff_reloc_type_toc,	 /* R_TRL   (0x12) */
  xcoff_reloc_type_toc,	 /* R_TRLA  (0x13) */
  xcoff_reloc_type_fail, /* R_RRTBI (0x14) */
  xcoff_reloc_type_fail, /* R_RRTBA (0x15) */
  xcoff_reloc_type_ba,	 /* R_CAI   (0x16) */
  xcoff_reloc_type_crel, /* R_CREL  (0x17) */
  xcoff_reloc_type_ba,	 /* R_RBA   (0x18) */
  xcoff_reloc_type_ba,	 /* R_RBAC  (0x19) */
  xcoff64_reloc_type_br, /* R_RBR   (0x1a) */
  xcoff_reloc_type_ba,	 /* R_RBRC  (0x1b) */
};

/* coffcode.h needs these to be defined.  */
/* Internalcoff.h and coffcode.h modify themselves based on these flags.  */
#define XCOFF64
#define RS6000COFF_C 1

#define SELECT_RELOC(internal, howto)					\
  {									\
    internal.r_type = howto->type;					\
    internal.r_size =							\
      ((howto->complain_on_overflow == complain_overflow_signed		\
	? 0x80								\
	: 0)								\
       | (howto->bitsize - 1));						\
  }

#define COFF_DEFAULT_SECTION_ALIGNMENT_POWER (3)
#define COFF_LONG_FILENAMES
#define NO_COFF_SYMBOLS
#define RTYPE2HOWTO(cache_ptr, dst) xcoff64_rtype2howto (cache_ptr, dst)
#define coff_mkobject _bfd_xcoff_mkobject
#define coff_bfd_copy_private_bfd_data _bfd_xcoff_copy_private_bfd_data
#define coff_bfd_is_local_label_name _bfd_xcoff_is_local_label_name
#define coff_bfd_reloc_type_lookup xcoff64_reloc_type_lookup
#define coff_bfd_reloc_name_lookup xcoff64_reloc_name_lookup
#ifdef AIX_CORE
extern const bfd_target * rs6000coff_core_p
  (bfd *abfd);
extern bfd_boolean rs6000coff_core_file_matches_executable_p
  (bfd *cbfd, bfd *ebfd);
extern char *rs6000coff_core_file_failing_command
  (bfd *abfd);
extern int rs6000coff_core_file_failing_signal
  (bfd *abfd);
#define CORE_FILE_P rs6000coff_core_p
#define coff_core_file_failing_command \
  rs6000coff_core_file_failing_command
#define coff_core_file_failing_signal \
  rs6000coff_core_file_failing_signal
#define coff_core_file_matches_executable_p \
  rs6000coff_core_file_matches_executable_p
#define coff_core_file_pid \
  _bfd_nocore_core_file_pid
#else
#define CORE_FILE_P _bfd_dummy_target
#define coff_core_file_failing_command \
  _bfd_nocore_core_file_failing_command
#define coff_core_file_failing_signal \
  _bfd_nocore_core_file_failing_signal
#define coff_core_file_matches_executable_p \
  _bfd_nocore_core_file_matches_executable_p
#define coff_core_file_pid \
  _bfd_nocore_core_file_pid
#endif
#define coff_SWAP_sym_in _bfd_xcoff64_swap_sym_in
#define coff_SWAP_sym_out _bfd_xcoff64_swap_sym_out
#define coff_SWAP_aux_in _bfd_xcoff64_swap_aux_in
#define coff_SWAP_aux_out _bfd_xcoff64_swap_aux_out
#define coff_swap_reloc_in xcoff64_swap_reloc_in
#define coff_swap_reloc_out xcoff64_swap_reloc_out
#define NO_COFF_RELOCS

#ifndef bfd_pe_print_pdata
#define bfd_pe_print_pdata	NULL
#endif

#include "coffcode.h"

/* For XCOFF64, the effective width of symndx changes depending on
   whether we are the first entry.  Sigh.  */
static void
_bfd_xcoff64_swap_lineno_in (bfd *abfd, void *ext1, void *in1)
{
  LINENO *ext = (LINENO *) ext1;
  struct internal_lineno *in = (struct internal_lineno *) in1;

  in->l_lnno = H_GET_32 (abfd, (ext->l_lnno));
  if (in->l_lnno == 0)
    in->l_addr.l_symndx = H_GET_32 (abfd, ext->l_addr.l_symndx);
  else
    in->l_addr.l_paddr = H_GET_64 (abfd, ext->l_addr.l_paddr);
}

static unsigned int
_bfd_xcoff64_swap_lineno_out (bfd *abfd, void *inp, void *outp)
{
  struct internal_lineno *in = (struct internal_lineno *) inp;
  struct external_lineno *ext = (struct external_lineno *) outp;

  H_PUT_32 (abfd, in->l_addr.l_symndx, ext->l_addr.l_symndx);
  H_PUT_32 (abfd, in->l_lnno, (ext->l_lnno));

  if (in->l_lnno == 0)
    H_PUT_32 (abfd, in->l_addr.l_symndx, ext->l_addr.l_symndx);
  else
    H_PUT_64 (abfd, in->l_addr.l_paddr, ext->l_addr.l_paddr);

  return bfd_coff_linesz (abfd);
}

static void
_bfd_xcoff64_swap_sym_in (bfd *abfd, void *ext1, void *in1)
{
  struct external_syment *ext = (struct external_syment *) ext1;
  struct internal_syment *in = (struct internal_syment *) in1;

  in->_n._n_n._n_zeroes = 0;
  in->_n._n_n._n_offset = H_GET_32 (abfd, ext->e_offset);
  in->n_value = H_GET_64 (abfd, ext->e_value);
  in->n_scnum = H_GET_16 (abfd, ext->e_scnum);
  in->n_type = H_GET_16 (abfd, ext->e_type);
  in->n_sclass = H_GET_8 (abfd, ext->e_sclass);
  in->n_numaux = H_GET_8 (abfd, ext->e_numaux);
}

static unsigned int
_bfd_xcoff64_swap_sym_out (bfd *abfd, void *inp, void *extp)
{
  struct internal_syment *in = (struct internal_syment *) inp;
  struct external_syment *ext = (struct external_syment *) extp;

  H_PUT_32 (abfd, in->_n._n_n._n_offset, ext->e_offset);
  H_PUT_64 (abfd, in->n_value, ext->e_value);
  H_PUT_16 (abfd, in->n_scnum, ext->e_scnum);
  H_PUT_16 (abfd, in->n_type, ext->e_type);
  H_PUT_8 (abfd, in->n_sclass, ext->e_sclass);
  H_PUT_8 (abfd, in->n_numaux, ext->e_numaux);
  return bfd_coff_symesz (abfd);
}

static void
_bfd_xcoff64_swap_aux_in (bfd *abfd, void *ext1, int type, int in_class,
                          int indx, int numaux, void *in1)
{
  union external_auxent *ext = (union external_auxent *) ext1;
  union internal_auxent *in = (union internal_auxent *) in1;

  switch (in_class)
    {
    case C_FILE:
      if (ext->x_file.x_n.x_n.x_zeroes[0] == 0)
	{
	  in->x_file.x_n.x_zeroes = 0;
	  in->x_file.x_n.x_offset =
            H_GET_32 (abfd, ext->x_file.x_n.x_n.x_offset);
	}
      else
	{
	  memcpy (in->x_file.x_fname, ext->x_file.x_n.x_fname, FILNMLEN);
	}
      goto end;

      /* RS/6000 "csect" auxents */
    case C_EXT:
    case C_AIX_WEAKEXT:
    case C_HIDEXT:
      if (indx + 1 == numaux)
	{
	  bfd_signed_vma h = 0;
	  bfd_vma l = 0;

	  h = H_GET_S32 (abfd, ext->x_csect.x_scnlen_hi);
	  l = H_GET_32 (abfd, ext->x_csect.x_scnlen_lo);

	  in->x_csect.x_scnlen.l = h << 32 | (l & 0xffffffff);

	  in->x_csect.x_parmhash = H_GET_32 (abfd, ext->x_csect.x_parmhash);
	  in->x_csect.x_snhash = H_GET_16 (abfd, ext->x_csect.x_snhash);
	  /* We don't have to hack bitfields in x_smtyp because it's
	     defined by shifts-and-ands, which are equivalent on all
	     byte orders.  */
	  in->x_csect.x_smtyp = H_GET_8 (abfd, ext->x_csect.x_smtyp);
	  in->x_csect.x_smclas = H_GET_8 (abfd, ext->x_csect.x_smclas);
	  goto end;
	}
      break;

    case C_STAT:
    case C_LEAFSTAT:
    case C_HIDDEN:
      if (type == T_NULL)
	{
	  /* PE defines some extra fields; we zero them out for
	     safety.  */
	  in->x_scn.x_checksum = 0;
	  in->x_scn.x_associated = 0;
	  in->x_scn.x_comdat = 0;

	  goto end;
	}
      break;
    }

  if (in_class == C_BLOCK || in_class == C_FCN || ISFCN (type)
      || ISTAG (in_class))
    {
      in->x_sym.x_fcnary.x_fcn.x_lnnoptr
	= H_GET_64 (abfd, ext->x_sym.x_fcnary.x_fcn.x_lnnoptr);
      in->x_sym.x_fcnary.x_fcn.x_endndx.l
	= H_GET_32 (abfd, ext->x_sym.x_fcnary.x_fcn.x_endndx);
    }
  if (ISFCN (type))
    {
      in->x_sym.x_misc.x_fsize
	= H_GET_32 (abfd, ext->x_sym.x_fcnary.x_fcn.x_fsize);
    }
  else
    {
      in->x_sym.x_misc.x_lnsz.x_lnno
	= H_GET_32 (abfd, ext->x_sym.x_fcnary.x_lnsz.x_lnno);
      in->x_sym.x_misc.x_lnsz.x_size
	= H_GET_16 (abfd, ext->x_sym.x_fcnary.x_lnsz.x_size);
    }

 end: ;
}

static unsigned int
_bfd_xcoff64_swap_aux_out (bfd *abfd, void *inp, int type, int in_class,
                           int indx ATTRIBUTE_UNUSED,
                           int numaux ATTRIBUTE_UNUSED,
                           void *extp)
{
  union internal_auxent *in = (union internal_auxent *) inp;
  union external_auxent *ext = (union external_auxent *) extp;

  memset (ext, 0, bfd_coff_auxesz (abfd));
  switch (in_class)
    {
    case C_FILE:
      if (in->x_file.x_n.x_zeroes == 0)
	{
	  H_PUT_32 (abfd, 0, ext->x_file.x_n.x_n.x_zeroes);
	  H_PUT_32 (abfd, in->x_file.x_n.x_offset,
                    ext->x_file.x_n.x_n.x_offset);
	}
      else
	{
	  memcpy (ext->x_file.x_n.x_fname, in->x_file.x_fname, FILNMLEN);
	}
      H_PUT_8 (abfd, _AUX_FILE, ext->x_auxtype.x_auxtype);
      goto end;

      /* RS/6000 "csect" auxents */
    case C_EXT:
    case C_AIX_WEAKEXT:
    case C_HIDEXT:
      if (indx + 1 == numaux)
	{
	  bfd_vma temp;

	  temp = in->x_csect.x_scnlen.l & 0xffffffff;
	  H_PUT_32 (abfd, temp, ext->x_csect.x_scnlen_lo);
	  temp = in->x_csect.x_scnlen.l >> 32;
	  H_PUT_32 (abfd, temp, ext->x_csect.x_scnlen_hi);
	  H_PUT_32 (abfd, in->x_csect.x_parmhash, ext->x_csect.x_parmhash);
	  H_PUT_16 (abfd, in->x_csect.x_snhash, ext->x_csect.x_snhash);
	  /* We don't have to hack bitfields in x_smtyp because it's
	     defined by shifts-and-ands, which are equivalent on all
	     byte orders.  */
	  H_PUT_8 (abfd, in->x_csect.x_smtyp, ext->x_csect.x_smtyp);
	  H_PUT_8 (abfd, in->x_csect.x_smclas, ext->x_csect.x_smclas);
	  H_PUT_8 (abfd, _AUX_CSECT, ext->x_auxtype.x_auxtype);
	  goto end;
	}
      break;

    case C_STAT:
    case C_LEAFSTAT:
    case C_HIDDEN:
      if (type == T_NULL)
	{
	  goto end;
	}
      break;
    }

  if (in_class == C_BLOCK || in_class == C_FCN || ISFCN (type)
      || ISTAG (in_class))
    {
      H_PUT_64 (abfd, in->x_sym.x_fcnary.x_fcn.x_lnnoptr,
	       ext->x_sym.x_fcnary.x_fcn.x_lnnoptr);
      H_PUT_8 (abfd, _AUX_FCN,
	       ext->x_auxtype.x_auxtype);
      H_PUT_32 (abfd, in->x_sym.x_fcnary.x_fcn.x_endndx.l,
	       ext->x_sym.x_fcnary.x_fcn.x_endndx);
    }
  if (ISFCN (type))
    {
      H_PUT_32 (abfd, in->x_sym.x_misc.x_fsize,
	       ext->x_sym.x_fcnary.x_fcn.x_fsize);
    }
  else
    {
      H_PUT_32 (abfd, in->x_sym.x_misc.x_lnsz.x_lnno,
	       ext->x_sym.x_fcnary.x_lnsz.x_lnno);
      H_PUT_16 (abfd, in->x_sym.x_misc.x_lnsz.x_size,
	       ext->x_sym.x_fcnary.x_lnsz.x_size);
    }

 end:

  return bfd_coff_auxesz (abfd);
}

static bfd_boolean
_bfd_xcoff64_put_symbol_name (bfd *abfd, struct bfd_strtab_hash *strtab,
                              struct internal_syment *sym,
                              const char *name)
{
  bfd_boolean hash;
  bfd_size_type indx;

  hash = TRUE;

  if ((abfd->flags & BFD_TRADITIONAL_FORMAT) != 0)
    hash = FALSE;

  indx = _bfd_stringtab_add (strtab, name, hash, FALSE);

  if (indx == (bfd_size_type) -1)
    return FALSE;

  sym->_n._n_n._n_zeroes = 0;
  sym->_n._n_n._n_offset = STRING_SIZE_SIZE + indx;

  return TRUE;
}

static bfd_boolean
_bfd_xcoff64_put_ldsymbol_name (bfd *abfd ATTRIBUTE_UNUSED,
                                struct xcoff_loader_info *ldinfo,
                                struct internal_ldsym *ldsym,
                                const char *name)
{
  size_t len;
  len = strlen (name);

  if (ldinfo->string_size + len + 3 > ldinfo->string_alc)
    {
      bfd_size_type newalc;
      char *newstrings;

      newalc = ldinfo->string_alc * 2;
      if (newalc == 0)
	newalc = 32;
      while (ldinfo->string_size + len + 3 > newalc)
	newalc *= 2;

      newstrings = bfd_realloc (ldinfo->strings, newalc);
      if (newstrings == NULL)
	{
	  ldinfo->failed = TRUE;
	  return FALSE;
	}
      ldinfo->string_alc = newalc;
      ldinfo->strings = newstrings;
    }

  bfd_put_16 (ldinfo->output_bfd, (bfd_vma) (len + 1),
	      ldinfo->strings + ldinfo->string_size);
  strcpy (ldinfo->strings + ldinfo->string_size + 2, name);
  ldsym->_l._l_l._l_zeroes = 0;
  ldsym->_l._l_l._l_offset = ldinfo->string_size + 2;
  ldinfo->string_size += len + 3;

  return TRUE;
}

/* Routines to swap information in the XCOFF .loader section.  If we
   ever need to write an XCOFF loader, this stuff will need to be
   moved to another file shared by the linker (which XCOFF calls the
   ``binder'') and the loader.  */

/* Swap in the ldhdr structure.  */

static void
xcoff64_swap_ldhdr_in (bfd *abfd,
                       const void *s,
                       struct internal_ldhdr *dst)
{
  const struct external_ldhdr *src = (const struct external_ldhdr *) s;

  dst->l_version = bfd_get_32 (abfd, src->l_version);
  dst->l_nsyms = bfd_get_32 (abfd, src->l_nsyms);
  dst->l_nreloc = bfd_get_32 (abfd, src->l_nreloc);
  dst->l_istlen = bfd_get_32 (abfd, src->l_istlen);
  dst->l_nimpid = bfd_get_32 (abfd, src->l_nimpid);
  dst->l_stlen = bfd_get_32 (abfd, src->l_stlen);
  dst->l_impoff = bfd_get_64 (abfd, src->l_impoff);
  dst->l_stoff = bfd_get_64 (abfd, src->l_stoff);
  dst->l_symoff = bfd_get_64 (abfd, src->l_symoff);
  dst->l_rldoff = bfd_get_64 (abfd, src->l_rldoff);
}

/* Swap out the ldhdr structure.  */

static void
xcoff64_swap_ldhdr_out (bfd *abfd, const struct internal_ldhdr *src, void *d)
{
  struct external_ldhdr *dst = (struct external_ldhdr *) d;

  bfd_put_32 (abfd, (bfd_vma) src->l_version, dst->l_version);
  bfd_put_32 (abfd, src->l_nsyms, dst->l_nsyms);
  bfd_put_32 (abfd, src->l_nreloc, dst->l_nreloc);
  bfd_put_32 (abfd, src->l_istlen, dst->l_istlen);
  bfd_put_32 (abfd, src->l_nimpid, dst->l_nimpid);
  bfd_put_32 (abfd, src->l_stlen, dst->l_stlen);
  bfd_put_64 (abfd, src->l_impoff, dst->l_impoff);
  bfd_put_64 (abfd, src->l_stoff, dst->l_stoff);
  bfd_put_64 (abfd, src->l_symoff, dst->l_symoff);
  bfd_put_64 (abfd, src->l_rldoff, dst->l_rldoff);
}

/* Swap in the ldsym structure.  */

static void
xcoff64_swap_ldsym_in (bfd *abfd, const void *s, struct internal_ldsym *dst)
{
  const struct external_ldsym *src = (const struct external_ldsym *) s;
  /* XCOFF64 does not use l_zeroes like XCOFF32
     Set the internal l_zeroes to 0 so the common 32/64 code uses l_value
     as an offset into the loader symbol table.  */
  dst->_l._l_l._l_zeroes = 0;
  dst->_l._l_l._l_offset = bfd_get_32 (abfd, src->l_offset);
  dst->l_value = bfd_get_64 (abfd, src->l_value);
  dst->l_scnum = bfd_get_16 (abfd, src->l_scnum);
  dst->l_smtype = bfd_get_8 (abfd, src->l_smtype);
  dst->l_smclas = bfd_get_8 (abfd, src->l_smclas);
  dst->l_ifile = bfd_get_32 (abfd, src->l_ifile);
  dst->l_parm = bfd_get_32 (abfd, src->l_parm);
}

/* Swap out the ldsym structure.  */

static void
xcoff64_swap_ldsym_out (bfd *abfd, const struct internal_ldsym *src, void *d)
{
  struct external_ldsym *dst = (struct external_ldsym *) d;

  bfd_put_64 (abfd, src->l_value, dst->l_value);
  bfd_put_32 (abfd, (bfd_vma) src->_l._l_l._l_offset, dst->l_offset);
  bfd_put_16 (abfd, (bfd_vma) src->l_scnum, dst->l_scnum);
  bfd_put_8 (abfd, src->l_smtype, dst->l_smtype);
  bfd_put_8 (abfd, src->l_smclas, dst->l_smclas);
  bfd_put_32 (abfd, src->l_ifile, dst->l_ifile);
  bfd_put_32 (abfd, src->l_parm, dst->l_parm);
}

static void
xcoff64_swap_reloc_in (bfd *abfd, void *s, void *d)
{
  struct external_reloc *src = (struct external_reloc *) s;
  struct internal_reloc *dst = (struct internal_reloc *) d;

  memset (dst, 0, sizeof (struct internal_reloc));

  dst->r_vaddr = bfd_get_64 (abfd, src->r_vaddr);
  dst->r_symndx = bfd_get_32 (abfd, src->r_symndx);
  dst->r_size = bfd_get_8 (abfd, src->r_size);
  dst->r_type = bfd_get_8 (abfd, src->r_type);
}

static unsigned int
xcoff64_swap_reloc_out (bfd *abfd, void *s, void *d)
{
  struct internal_reloc *src = (struct internal_reloc *) s;
  struct external_reloc *dst = (struct external_reloc *) d;

  bfd_put_64 (abfd, src->r_vaddr, dst->r_vaddr);
  bfd_put_32 (abfd, src->r_symndx, dst->r_symndx);
  bfd_put_8 (abfd, src->r_type, dst->r_type);
  bfd_put_8 (abfd, src->r_size, dst->r_size);

  return bfd_coff_relsz (abfd);
}

/* Swap in the ldrel structure.  */

static void
xcoff64_swap_ldrel_in (bfd *abfd, const void *s, struct internal_ldrel *dst)
{
  const struct external_ldrel *src = (const struct external_ldrel *) s;

  dst->l_vaddr = bfd_get_64 (abfd, src->l_vaddr);
  dst->l_symndx = bfd_get_32 (abfd, src->l_symndx);
  dst->l_rtype = bfd_get_16 (abfd, src->l_rtype);
  dst->l_rsecnm = bfd_get_16 (abfd, src->l_rsecnm);
}

/* Swap out the ldrel structure.  */

static void
xcoff64_swap_ldrel_out (bfd *abfd, const struct internal_ldrel *src, void *d)
{
  struct external_ldrel *dst = (struct external_ldrel *) d;

  bfd_put_64 (abfd, src->l_vaddr, dst->l_vaddr);
  bfd_put_16 (abfd, (bfd_vma) src->l_rtype, dst->l_rtype);
  bfd_put_16 (abfd, (bfd_vma) src->l_rsecnm, dst->l_rsecnm);
  bfd_put_32 (abfd, src->l_symndx, dst->l_symndx);
}

static bfd_boolean
xcoff64_write_object_contents (bfd *abfd)
{
  asection *current;
  bfd_boolean hasrelocs = FALSE;
  bfd_boolean haslinno = FALSE;
  file_ptr scn_base;
  file_ptr reloc_base;
  file_ptr lineno_base;
  file_ptr sym_base;
  unsigned long reloc_size = 0;
  unsigned long lnno_size = 0;
  asection *text_sec = NULL;
  asection *data_sec = NULL;
  asection *bss_sec = NULL;
  struct internal_filehdr internal_f;
  struct internal_aouthdr internal_a;

  bfd_set_error (bfd_error_system_call);

  if (! abfd->output_has_begun)
    {
      if (! bfd_coff_compute_section_file_positions (abfd))
	return FALSE;
    }

  /* Work out the size of the reloc and linno areas.  */
  reloc_base = obj_relocbase (abfd);

  for (current = abfd->sections; current != NULL; current = current->next)
    reloc_size += current->reloc_count * bfd_coff_relsz (abfd);

  lineno_base = reloc_base + reloc_size;

  /* Make a pass through the symbol table to count line number entries and
     put them into the correct asections.  */
  lnno_size = coff_count_linenumbers (abfd) * bfd_coff_linesz (abfd);

  sym_base = lineno_base + lnno_size;

  /* Indicate in each section->line_filepos its actual file address.  */
  for (current = abfd->sections; current != NULL; current =  current->next)
    {
      if (current->lineno_count)
	{
	  current->line_filepos = lineno_base;
	  current->moving_line_filepos = lineno_base;
	  lineno_base += current->lineno_count * bfd_coff_linesz (abfd);
	}
      else
	{
	  current->line_filepos = 0;
	}

      if (current->reloc_count)
	{
	  current->rel_filepos = reloc_base;
	  reloc_base += current->reloc_count * bfd_coff_relsz (abfd);
	}
      else
	{
	  current->rel_filepos = 0;
	}
    }

  if ((abfd->flags & EXEC_P) != 0)
    {
      scn_base = bfd_coff_filhsz (abfd) + bfd_coff_aoutsz (abfd);
      internal_f.f_opthdr = bfd_coff_aoutsz (abfd);
    }
  else
    {
      scn_base = bfd_coff_filhsz (abfd);
      internal_f.f_opthdr = 0;
    }

  internal_f.f_nscns = 0;

  if (bfd_seek (abfd, scn_base, SEEK_SET) != 0)
    return FALSE;

  for (current = abfd->sections; current != NULL; current = current->next)
    {
      struct internal_scnhdr section;
      struct external_scnhdr buff;
      bfd_size_type amount;

      internal_f.f_nscns++;

      strncpy (section.s_name, current->name, SCNNMLEN);

      section.s_vaddr = current->vma;
      section.s_paddr = current->lma;
      section.s_size =  current->size;

      /* If this section has no size or is unloadable then the scnptr
	 will be 0 too.  */
      if (current->size == 0
	  || (current->flags & (SEC_LOAD | SEC_HAS_CONTENTS)) == 0)
	{
	  section.s_scnptr = 0;
	}
      else
	{
	  section.s_scnptr = current->filepos;
	}

      section.s_relptr = current->rel_filepos;
      section.s_lnnoptr = current->line_filepos;
      section.s_nreloc = current->reloc_count;

      section.s_nlnno = current->lineno_count;
      if (current->reloc_count != 0)
	hasrelocs = TRUE;
      if (current->lineno_count != 0)
	haslinno = TRUE;

      section.s_flags = sec_to_styp_flags (current->name, current->flags);

      if (!strcmp (current->name, _TEXT))
	{
	  text_sec = current;
	}
      else if (!strcmp (current->name, _DATA))
	{
	  data_sec = current;
	}
      else if (!strcmp (current->name, _BSS))
	{
	  bss_sec = current;
	}

      amount = bfd_coff_scnhsz (abfd);
      if (bfd_coff_swap_scnhdr_out (abfd, &section, &buff) == 0
	  || bfd_bwrite (&buff, amount, abfd) != amount)
	return FALSE;
    }

  internal_f.f_timdat = 0;

  internal_f.f_flags = 0;

  if (!hasrelocs)
    internal_f.f_flags |= F_RELFLG;
  if (!haslinno)
    internal_f.f_flags |= F_LNNO;
  if (abfd->flags & EXEC_P)
    internal_f.f_flags |= F_EXEC;

  /* FIXME: this is wrong for PPC_PE!  */
  if (bfd_little_endian (abfd))
    internal_f.f_flags |= F_AR32WR;
  else
    internal_f.f_flags |= F_AR32W;

  if ((abfd->flags & DYNAMIC) != 0)
    internal_f.f_flags |= F_SHROBJ;
  if (bfd_get_section_by_name (abfd, _LOADER) != NULL)
    internal_f.f_flags |= F_DYNLOAD;

  memset (&internal_a, 0, sizeof internal_a);

  internal_f.f_magic = bfd_xcoff_magic_number (abfd);
  internal_a.magic = (abfd->flags & D_PAGED
		      ? RS6K_AOUTHDR_ZMAGIC
		      : (abfd->flags & WP_TEXT
			 ? RS6K_AOUTHDR_NMAGIC
			 : RS6K_AOUTHDR_OMAGIC));

  /* FIXME: Does anybody ever set this to another value?  */
  internal_a.vstamp = 0;

  /* Now should write relocs, strings, syms.  */
  obj_sym_filepos (abfd) = sym_base;

  internal_f.f_symptr = 0;
  internal_f.f_nsyms = 0;

  /* If bfd_get_symcount (abfd) != 0, then we are not using the COFF
     backend linker, and obj_raw_syment_count is not valid until after
     coff_write_symbols is called.  */
  if (bfd_get_symcount (abfd) != 0)
    {
      int firstundef;

      if (!coff_renumber_symbols (abfd, &firstundef))
	return FALSE;
      coff_mangle_symbols (abfd);
      if (! coff_write_symbols (abfd))
	return FALSE;
      if (! coff_write_linenumbers (abfd))
	return FALSE;
      if (! coff_write_relocs (abfd, firstundef))
	return FALSE;

      internal_f.f_symptr = sym_base;
      internal_f.f_nsyms = bfd_get_symcount (abfd);
    }
  else if (obj_raw_syment_count (abfd) != 0)
    {
      internal_f.f_symptr = sym_base;

      /* AIX appears to require that F_RELFLG not be set if there are
	 local symbols but no relocations.  */
      internal_f.f_flags &=~ F_RELFLG;
    }
  else
    {
      internal_f.f_flags |= F_LSYMS;
    }

  if (text_sec)
    {
      internal_a.tsize = text_sec->size;
      internal_a.text_start = internal_a.tsize ? text_sec->vma : 0;
    }

  if (data_sec)
    {
      internal_a.dsize = data_sec->size;
      internal_a.data_start = internal_a.dsize ? data_sec->vma : 0;
    }

  if (bss_sec)
    {
      internal_a.bsize = bss_sec->size;
      if (internal_a.bsize && bss_sec->vma < internal_a.data_start)
	internal_a.data_start = bss_sec->vma;
    }

  internal_a.entry = bfd_get_start_address (abfd);
  internal_f.f_nsyms = obj_raw_syment_count (abfd);

  if (xcoff_data (abfd)->full_aouthdr)
    {
      bfd_vma toc;
      asection *loader_sec;

      internal_a.vstamp = 1;

      internal_a.o_snentry = xcoff_data (abfd)->snentry;
      if (internal_a.o_snentry == 0)
	internal_a.entry = (bfd_vma) -1;

      if (text_sec != NULL)
	{
	  internal_a.o_sntext = text_sec->target_index;
	  internal_a.o_algntext = bfd_get_section_alignment (abfd, text_sec);
	}
      else
	{
	  internal_a.o_sntext = 0;
	  internal_a.o_algntext = 0;
	}

      if (data_sec != NULL)
	{
	  internal_a.o_sndata = data_sec->target_index;
	  internal_a.o_algndata = bfd_get_section_alignment (abfd, data_sec);
	}
      else
	{
	  internal_a.o_sndata = 0;
	  internal_a.o_algndata = 0;
	}

      loader_sec = bfd_get_section_by_name (abfd, ".loader");
      if (loader_sec != NULL)
	internal_a.o_snloader = loader_sec->target_index;
      else
	internal_a.o_snloader = 0;
      if (bss_sec != NULL)
	internal_a.o_snbss = bss_sec->target_index;
      else
	internal_a.o_snbss = 0;

      toc = xcoff_data (abfd)->toc;
      internal_a.o_toc = toc;
      internal_a.o_sntoc = xcoff_data (abfd)->sntoc;

      internal_a.o_modtype = xcoff_data (abfd)->modtype;
      if (xcoff_data (abfd)->cputype != -1)
	internal_a.o_cputype = xcoff_data (abfd)->cputype;
      else
	{
	  switch (bfd_get_arch (abfd))
	    {
	    case bfd_arch_rs6000:
	      internal_a.o_cputype = 4;
	      break;
	    case bfd_arch_powerpc:
	      if (bfd_get_mach (abfd) == bfd_mach_ppc)
		internal_a.o_cputype = 3;
	      else if (bfd_get_mach (abfd) == bfd_mach_ppc_620)
		internal_a.o_cputype = 2;
	      else
		internal_a.o_cputype = 1;
	      break;
	    default:
	      abort ();
	    }
	}
      internal_a.o_maxstack = xcoff_data (abfd)->maxstack;
      internal_a.o_maxdata = xcoff_data (abfd)->maxdata;
    }

  if (bfd_seek (abfd, (file_ptr) 0, 0) != 0)
    return FALSE;

  {
    char * buff;
    bfd_size_type amount = bfd_coff_filhsz (abfd);

    buff = bfd_malloc (amount);
    if (buff == NULL)
      return FALSE;

    bfd_coff_swap_filehdr_out (abfd, &internal_f, buff);
    amount = bfd_bwrite (buff, amount, abfd);

    free (buff);

    if (amount != bfd_coff_filhsz (abfd))
      return FALSE;
  }

  if (abfd->flags & EXEC_P)
    {
      char * buff;
      bfd_size_type amount = bfd_coff_aoutsz (abfd);

      buff = bfd_malloc (amount);
      if (buff == NULL)
	return FALSE;

      bfd_coff_swap_aouthdr_out (abfd, &internal_a, buff);
      amount = bfd_bwrite (buff, amount, abfd);

      free (buff);

      if (amount != bfd_coff_aoutsz (abfd))
	return FALSE;
    }

  return TRUE;
}

static bfd_boolean
xcoff64_reloc_type_br (bfd *input_bfd,
                       asection *input_section,
                       bfd *output_bfd ATTRIBUTE_UNUSED,
                       struct internal_reloc *rel,
                       struct internal_syment *sym ATTRIBUTE_UNUSED,
                       struct reloc_howto_struct *howto,
                       bfd_vma val,
                       bfd_vma addend,
                       bfd_vma *relocation,
                       bfd_byte *contents)
{
  struct xcoff_link_hash_entry *h;
  bfd_vma section_offset;

  if (0 > rel->r_symndx)
    return FALSE;

  h = obj_xcoff_sym_hashes (input_bfd)[rel->r_symndx];
  section_offset = rel->r_vaddr - input_section->vma;

  /* If we see an R_BR or R_RBR reloc which is jumping to global
     linkage code, and it is followed by an appropriate cror nop
     instruction, we replace the cror with ld r2,40(r1).  This
     restores the TOC after the glink code.  Contrariwise, if the
     call is followed by a ld r2,40(r1), but the call is not
     going to global linkage code, we can replace the load with a
     cror.  */
  if (NULL != h
      && (bfd_link_hash_defined == h->root.type
	  || bfd_link_hash_defweak == h->root.type)
      && section_offset + 8 <= input_section->size)
    {
      bfd_byte *pnext;
      unsigned long next;

      pnext = contents + section_offset + 4;
      next = bfd_get_32 (input_bfd, pnext);

      /* The _ptrgl function is magic.  It is used by the AIX compiler to call
	 a function through a pointer.  */
      if (h->smclas == XMC_GL || strcmp (h->root.root.string, "._ptrgl") == 0)
	{
	  if (next == 0x4def7b82			/* cror 15,15,15  */
	      || next == 0x4ffffb82			/* cror 31,31,31  */
	      || next == 0x60000000)			/* ori	r0,r0,0	  */
	    bfd_put_32 (input_bfd, 0xe8410028, pnext);	/* ld	r2,40(r1) */
	}
      else
	{
	  if (next == 0xe8410028)			/* ld r2,40(r1)	  */
	    bfd_put_32 (input_bfd, 0x60000000, pnext);	/* ori r0,r0,0	  */
	}
    }
  else if (NULL != h && bfd_link_hash_undefined == h->root.type)
    {
      /* Normally, this relocation is against a defined symbol.  In the
	 case where this is a partial link and the output section offset
	 is greater than 2^25, the linker will return an invalid error
	 message that the relocation has been truncated.  Yes it has been
	 truncated but no it not important.  For this case, disable the
	 overflow checking. */
      howto->complain_on_overflow = complain_overflow_dont;
    }

  /* The original PC-relative relocation is biased by -r_vaddr, so adding
     the value below will give the absolute target address.  */
  *relocation = val + addend + rel->r_vaddr;

  howto->src_mask &= ~3;
  howto->dst_mask = howto->src_mask;

  if (h != NULL
      && (h->root.type == bfd_link_hash_defined
	  || h->root.type == bfd_link_hash_defweak)
      && bfd_is_abs_section (h->root.u.def.section)
      && section_offset + 4 <= input_section->size)
    {
      bfd_byte *ptr;
      bfd_vma insn;

      /* Turn the relative branch into an absolute one by setting the
	 AA bit.  */
      ptr = contents + section_offset;
      insn = bfd_get_32 (input_bfd, ptr);
      insn |= 2;
      bfd_put_32 (input_bfd, insn, ptr);

      /* Make the howto absolute too.  */
      howto->pc_relative = FALSE;
      howto->complain_on_overflow = complain_overflow_bitfield;
    }
  else
    {
      /* Use a PC-relative howto and subtract the instruction's address
	 from the target address we calculated above.  */
      howto->pc_relative = TRUE;
      *relocation -= (input_section->output_section->vma
		      + input_section->output_offset
		      + section_offset);
    }
  return TRUE;
}

/* This is the relocation function for the PowerPC64.
   See xcoff_ppc_relocation_section for more information. */

bfd_boolean
xcoff64_ppc_relocate_section (bfd *output_bfd,
                              struct bfd_link_info *info,
                              bfd *input_bfd,
                              asection *input_section,
                              bfd_byte *contents,
                              struct internal_reloc *relocs,
                              struct internal_syment *syms,
                              asection **sections)
{
  struct internal_reloc *rel;
  struct internal_reloc *relend;

  rel = relocs;
  relend = rel + input_section->reloc_count;
  for (; rel < relend; rel++)
    {
      long symndx;
      struct xcoff_link_hash_entry *h;
      struct internal_syment *sym;
      bfd_vma addend;
      bfd_vma val;
      struct reloc_howto_struct howto;
      bfd_vma relocation;
      bfd_vma value_to_relocate;
      bfd_vma address;
      bfd_byte *location;

      /* Relocation type R_REF is a special relocation type which is
	 merely used to prevent garbage collection from occurring for
	 the csect including the symbol which it references.  */
      if (rel->r_type == R_REF)
	continue;

      /* howto */
      howto.type = rel->r_type;
      howto.rightshift = 0;
      howto.bitsize = (rel->r_size & 0x3f) + 1;
      howto.size = howto.bitsize > 16 ? (howto.bitsize > 32 ? 4 : 2) : 1;
      howto.pc_relative = FALSE;
      howto.bitpos = 0;
      howto.complain_on_overflow = (rel->r_size & 0x80
				    ? complain_overflow_signed
				    : complain_overflow_bitfield);
      howto.special_function = NULL;
      howto.name = "internal";
      howto.partial_inplace = TRUE;
      howto.src_mask = howto.dst_mask = N_ONES (howto.bitsize);
      howto.pcrel_offset = FALSE;

      /* symbol */
      val = 0;
      addend = 0;
      h = NULL;
      sym = NULL;
      symndx = rel->r_symndx;

      if (-1 != symndx)
	{
	  asection *sec;

	  h = obj_xcoff_sym_hashes (input_bfd)[symndx];
	  sym = syms + symndx;
	  addend = - sym->n_value;

	  if (NULL == h)
	    {
	      sec = sections[symndx];
	      /* Hack to make sure we use the right TOC anchor value
		 if this reloc is against the TOC anchor.  */
	      if (sec->name[3] == '0'
		  && strcmp (sec->name, ".tc0") == 0)
		val = xcoff_data (output_bfd)->toc;
	      else
		val = (sec->output_section->vma
		       + sec->output_offset
		       + sym->n_value
		       - sec->vma);
	    }
	  else
	    {
	      if (info->unresolved_syms_in_objects != RM_IGNORE
		  && (h->flags & XCOFF_WAS_UNDEFINED) != 0)
		{
		  if (! ((*info->callbacks->undefined_symbol)
			 (info, h->root.root.string,
			  input_bfd, input_section,
			  rel->r_vaddr - input_section->vma,
			  (info->unresolved_syms_in_objects
			   == RM_GENERATE_ERROR))))
		    return FALSE;
		}
	      if (h->root.type == bfd_link_hash_defined
		  || h->root.type == bfd_link_hash_defweak)
		{
		  sec = h->root.u.def.section;
		  val = (h->root.u.def.value
			 + sec->output_section->vma
			 + sec->output_offset);
		}
	      else if (h->root.type == bfd_link_hash_common)
		{
		  sec = h->root.u.c.p->section;
		  val = (sec->output_section->vma
			 + sec->output_offset);
		}
	      else
		{
		  BFD_ASSERT (info->relocatable
			      || (h->flags & XCOFF_DEF_DYNAMIC) != 0
			      || (h->flags & XCOFF_IMPORT) != 0);
		}
	    }
	}

      if (rel->r_type >= XCOFF_MAX_CALCULATE_RELOCATION
	  || !((*xcoff64_calculate_relocation[rel->r_type])
	      (input_bfd, input_section, output_bfd, rel, sym, &howto, val,
	       addend, &relocation, contents)))
	return FALSE;

      /* address */
      address = rel->r_vaddr - input_section->vma;
      location = contents + address;

      if (address > input_section->size)
	abort ();

      /* Get the value we are going to relocate.  */
      if (1 == howto.size)
	value_to_relocate = bfd_get_16 (input_bfd, location);
      else if (2 == howto.size)
	value_to_relocate = bfd_get_32 (input_bfd, location);
      else
	value_to_relocate = bfd_get_64 (input_bfd, location);

      /* overflow.

	 FIXME: We may drop bits during the addition
	 which we don't check for.  We must either check at every single
	 operation, which would be tedious, or we must do the computations
	 in a type larger than bfd_vma, which would be inefficient.  */

      if ((unsigned int) howto.complain_on_overflow
	  >= XCOFF_MAX_COMPLAIN_OVERFLOW)
	abort ();

      if (((*xcoff_complain_overflow[howto.complain_on_overflow])
	   (input_bfd, value_to_relocate, relocation, &howto)))
	{
	  const char *name;
	  char buf[SYMNMLEN + 1];
	  char reloc_type_name[10];

	  if (symndx == -1)
	    {
	      name = "*ABS*";
	    }
	  else if (h != NULL)
	    {
	      name = NULL;
	    }
	  else
	    {
	      name = _bfd_coff_internal_syment_name (input_bfd, sym, buf);
	      if (name == NULL)
		name = "UNKNOWN";
	    }
	  sprintf (reloc_type_name, "0x%02x", rel->r_type);

	  if (! ((*info->callbacks->reloc_overflow)
		 (info, (h ? &h->root : NULL), name, reloc_type_name,
		  (bfd_vma) 0, input_bfd, input_section,
		  rel->r_vaddr - input_section->vma)))
	    return FALSE;
	}

      /* Add RELOCATION to the right bits of VALUE_TO_RELOCATE.  */
      value_to_relocate = ((value_to_relocate & ~howto.dst_mask)
			   | (((value_to_relocate & howto.src_mask)
			       + relocation) & howto.dst_mask));

      /* Put the value back in the object file.  */
      if (1 == howto.size)
	bfd_put_16 (input_bfd, value_to_relocate, location);
      else if (2 == howto.size)
	bfd_put_32 (input_bfd, value_to_relocate, location);
      else
	bfd_put_64 (input_bfd, value_to_relocate, location);

    }
  return TRUE;
}


/* The XCOFF reloc table.  Actually, XCOFF relocations specify the
   bitsize and whether they are signed or not, along with a
   conventional type.  This table is for the types, which are used for
   different algorithms for putting in the reloc.  Many of these
   relocs need special_function entries, which I have not written.  */

reloc_howto_type xcoff64_howto_table[] =
{
  /* 0x00: Standard 64 bit relocation.  */
  HOWTO (R_POS,			/* type */
	 0,			/* rightshift */
	 4,			/* size (0 = byte, 1 = short, 2 = long) */
	 64,			/* bitsize */
	 FALSE,			/* pc_relative */
	 0,			/* bitpos */
	 complain_overflow_bitfield, /* complain_on_overflow */
	 0,			/* special_function */
	 "R_POS_64",		/* name */
	 TRUE,			/* partial_inplace */
	 MINUS_ONE,		/* src_mask */
	 MINUS_ONE,		/* dst_mask */
	 FALSE),		/* pcrel_offset */

  /* 0x01: 64 bit relocation, but store negative value.  */
  HOWTO (R_NEG,			/* type */
	 0,			/* rightshift */
	 -4,			/* size (0 = byte, 1 = short, 2 = long) */
	 64,			/* bitsize */
	 FALSE,			/* pc_relative */
	 0,			/* bitpos */
	 complain_overflow_bitfield, /* complain_on_overflow */
	 0,			/* special_function */
	 "R_NEG",		/* name */
	 TRUE,			/* partial_inplace */
	 MINUS_ONE,		/* src_mask */
	 MINUS_ONE,		/* dst_mask */
	 FALSE),		/* pcrel_offset */

  /* 0x02: 32 bit PC relative relocation.  */
  HOWTO (R_REL,			/* type */
	 0,			/* rightshift */
	 2,			/* size (0 = byte, 1 = short, 2 = long) */
	 32,			/* bitsize */
	 TRUE,			/* pc_relative */
	 0,			/* bitpos */
	 complain_overflow_signed, /* complain_on_overflow */
	 0,			/* special_function */
	 "R_REL",		/* name */
	 TRUE,			/* partial_inplace */
	 0xffffffff,		/* src_mask */
	 0xffffffff,		/* dst_mask */
	 FALSE),		/* pcrel_offset */

  /* 0x03: 16 bit TOC relative relocation.  */
  HOWTO (R_TOC,			/* type */
	 0,			/* rightshift */
	 1,			/* size (0 = byte, 1 = short, 2 = long) */
	 16,			/* bitsize */
	 FALSE,			/* pc_relative */
	 0,			/* bitpos */
	 complain_overflow_bitfield, /* complain_on_overflow */
	 0,			/* special_function */
	 "R_TOC",		/* name */
	 TRUE,			/* partial_inplace */
	 0xffff,		/* src_mask */
	 0xffff,		/* dst_mask */
	 FALSE),		/* pcrel_offset */

  /* 0x04: I don't really know what this is.	*/
  HOWTO (R_RTB,			/* type */
	 1,			/* rightshift */
	 2,			/* size (0 = byte, 1 = short, 2 = long) */
	 32,			/* bitsize */
	 FALSE,			/* pc_relative */
	 0,			/* bitpos */
	 complain_overflow_bitfield, /* complain_on_overflow */
	 0,			/* special_function */
	 "R_RTB",		/* name */
	 TRUE,			/* partial_inplace */
	 0xffffffff,		/* src_mask */
	 0xffffffff,		/* dst_mask */
	 FALSE),		/* pcrel_offset */

  /* 0x05: External TOC relative symbol.  */
  HOWTO (R_GL,			/* type */
	 0,			/* rightshift */
	 1,			/* size (0 = byte, 1 = short, 2 = long) */
	 16,			/* bitsize */
	 FALSE,			/* pc_relative */
	 0,			/* bitpos */
	 complain_overflow_bitfield, /* complain_on_overflow */
	 0,			/* special_function */
	 "R_GL",		/* name */
	 TRUE,			/* partial_inplace */
	 0xffff,		/* src_mask */
	 0xffff,		/* dst_mask */
	 FALSE),		/* pcrel_offset */

  /* 0x06: Local TOC relative symbol.	 */
  HOWTO (R_TCL,			/* type */
	 0,			/* rightshift */
	 1,			/* size (0 = byte, 1 = short, 2 = long) */
	 16,			/* bitsize */
	 FALSE,			/* pc_relative */
	 0,			/* bitpos */
	 complain_overflow_bitfield, /* complain_on_overflow */
	 0,			/* special_function */
	 "R_TCL",		/* name */
	 TRUE,			/* partial_inplace */
	 0xffff,		/* src_mask */
	 0xffff,		/* dst_mask */
	 FALSE),		/* pcrel_offset */

  EMPTY_HOWTO (7),

  /* 0x08: Non modifiable absolute branch.  */
  HOWTO (R_BA,			/* type */
	 0,			/* rightshift */
	 2,			/* size (0 = byte, 1 = short, 2 = long) */
	 26,			/* bitsize */
	 FALSE,			/* pc_relative */
	 0,			/* bitpos */
	 complain_overflow_bitfield, /* complain_on_overflow */
	 0,			/* special_function */
	 "R_BA_26",		/* name */
	 TRUE,			/* partial_inplace */
	 0x03fffffc,		/* src_mask */
	 0x03fffffc,		/* dst_mask */
	 FALSE),		/* pcrel_offset */

  EMPTY_HOWTO (9),

  /* 0x0a: Non modifiable relative branch.  */
  HOWTO (R_BR,			/* type */
	 0,			/* rightshift */
	 2,			/* size (0 = byte, 1 = short, 2 = long) */
	 26,			/* bitsize */
	 TRUE,			/* pc_relative */
	 0,			/* bitpos */
	 complain_overflow_signed, /* complain_on_overflow */
	 0,			/* special_function */
	 "R_BR",		/* name */
	 TRUE,			/* partial_inplace */
	 0x03fffffc,		/* src_mask */
	 0x03fffffc,		/* dst_mask */
	 FALSE),		/* pcrel_offset */

  EMPTY_HOWTO (0xb),

  /* 0x0c: Indirect load.  */
  HOWTO (R_RL,			/* type */
	 0,			/* rightshift */
	 1,			/* size (0 = byte, 1 = short, 2 = long) */
	 16,			/* bitsize */
	 FALSE,			/* pc_relative */
	 0,			/* bitpos */
	 complain_overflow_bitfield, /* complain_on_overflow */
	 0,			/* special_function */
	 "R_RL",		/* name */
	 TRUE,			/* partial_inplace */
	 0xffff,		/* src_mask */
	 0xffff,		/* dst_mask */
	 FALSE),		/* pcrel_offset */

  /* 0x0d: Load address.  */
  HOWTO (R_RLA,			/* type */
	 0,			/* rightshift */
	 1,			/* size (0 = byte, 1 = short, 2 = long) */
	 16,			/* bitsize */
	 FALSE,			/* pc_relative */
	 0,			/* bitpos */
	 complain_overflow_bitfield, /* complain_on_overflow */
	 0,			/* special_function */
	 "R_RLA",		/* name */
	 TRUE,			/* partial_inplace */
	 0xffff,		/* src_mask */
	 0xffff,		/* dst_mask */
	 FALSE),		/* pcrel_offset */

  EMPTY_HOWTO (0xe),

  /* 0x0f: Non-relocating reference.  Bitsize is 1 so that r_rsize is 0.  */
  HOWTO (R_REF,			/* type */
	 0,			/* rightshift */
	 0,			/* size (0 = byte, 1 = short, 2 = long) */
	 1,			/* bitsize */
	 FALSE,			/* pc_relative */
	 0,			/* bitpos */
	 complain_overflow_dont, /* complain_on_overflow */
	 0,			/* special_function */
	 "R_REF",		/* name */
	 FALSE,			/* partial_inplace */
	 0,			/* src_mask */
	 0,			/* dst_mask */
	 FALSE),		/* pcrel_offset */

  EMPTY_HOWTO (0x10),
  EMPTY_HOWTO (0x11),

  /* 0x12: TOC relative indirect load.  */
  HOWTO (R_TRL,			/* type */
	 0,			/* rightshift */
	 1,			/* size (0 = byte, 1 = short, 2 = long) */
	 16,			/* bitsize */
	 FALSE,			/* pc_relative */
	 0,			/* bitpos */
	 complain_overflow_bitfield, /* complain_on_overflow */
	 0,			/* special_function */
	 "R_TRL",		/* name */
	 TRUE,			/* partial_inplace */
	 0xffff,		/* src_mask */
	 0xffff,		/* dst_mask */
	 FALSE),		/* pcrel_offset */

  /* 0x13: TOC relative load address.	 */
  HOWTO (R_TRLA,		/* type */
	 0,			/* rightshift */
	 1,			/* size (0 = byte, 1 = short, 2 = long) */
	 16,			/* bitsize */
	 FALSE,			/* pc_relative */
	 0,			/* bitpos */
	 complain_overflow_bitfield, /* complain_on_overflow */
	 0,			/* special_function */
	 "R_TRLA",		/* name */
	 TRUE,			/* partial_inplace */
	 0xffff,		/* src_mask */
	 0xffff,		/* dst_mask */
	 FALSE),		/* pcrel_offset */

  /* 0x14: Modifiable relative branch.  */
  HOWTO (R_RRTBI,		/* type */
	 1,			/* rightshift */
	 2,			/* size (0 = byte, 1 = short, 2 = long) */
	 32,			/* bitsize */
	 FALSE,			/* pc_relative */
	 0,			/* bitpos */
	 complain_overflow_bitfield, /* complain_on_overflow */
	 0,			/* special_function */
	 "R_RRTBI",		/* name */
	 TRUE,			/* partial_inplace */
	 0xffffffff,		/* src_mask */
	 0xffffffff,		/* dst_mask */
	 FALSE),		/* pcrel_offset */

  /* 0x15: Modifiable absolute branch.  */
  HOWTO (R_RRTBA,		/* type */
	 1,			/* rightshift */
	 2,			/* size (0 = byte, 1 = short, 2 = long) */
	 32,			/* bitsize */
	 FALSE,			/* pc_relative */
	 0,			/* bitpos */
	 complain_overflow_bitfield, /* complain_on_overflow */
	 0,			/* special_function */
	 "R_RRTBA",		/* name */
	 TRUE,			/* partial_inplace */
	 0xffffffff,		/* src_mask */
	 0xffffffff,		/* dst_mask */
	 FALSE),		/* pcrel_offset */

  /* 0x16: Modifiable call absolute indirect.	 */
  HOWTO (R_CAI,			/* type */
	 0,			/* rightshift */
	 1,			/* size (0 = byte, 1 = short, 2 = long) */
	 16,			/* bitsize */
	 FALSE,			/* pc_relative */
	 0,			/* bitpos */
	 complain_overflow_bitfield, /* complain_on_overflow */
	 0,			/* special_function */
	 "R_CAI",		/* name */
	 TRUE,			/* partial_inplace */
	 0xffff,		/* src_mask */
	 0xffff,		/* dst_mask */
	 FALSE),		/* pcrel_offset */

  /* 0x17: Modifiable call relative.	*/
  HOWTO (R_CREL,		/* type */
	 0,			/* rightshift */
	 1,			/* size (0 = byte, 1 = short, 2 = long) */
	 16,			/* bitsize */
	 FALSE,			/* pc_relative */
	 0,			/* bitpos */
	 complain_overflow_bitfield, /* complain_on_overflow */
	 0,			/* special_function */
	 "R_CREL",		/* name */
	 TRUE,			/* partial_inplace */
	 0xffff,		/* src_mask */
	 0xffff,		/* dst_mask */
	 FALSE),		/* pcrel_offset */

  /* 0x18: Modifiable branch absolute.  */
  HOWTO (R_RBA,			/* type */
	 0,			/* rightshift */
	 2,			/* size (0 = byte, 1 = short, 2 = long) */
	 26,			/* bitsize */
	 FALSE,			/* pc_relative */
	 0,			/* bitpos */
	 complain_overflow_bitfield, /* complain_on_overflow */
	 0,			/* special_function */
	 "R_RBA",		/* name */
	 TRUE,			/* partial_inplace */
	 0x03fffffc,		/* src_mask */
	 0x03fffffc,		/* dst_mask */
	 FALSE),		/* pcrel_offset */

  /* 0x19: Modifiable branch absolute.  */
  HOWTO (R_RBAC,		/* type */
	 0,			/* rightshift */
	 2,			/* size (0 = byte, 1 = short, 2 = long) */
	 32,			/* bitsize */
	 FALSE,			/* pc_relative */
	 0,			/* bitpos */
	 complain_overflow_bitfield, /* complain_on_overflow */
	 0,			/* special_function */
	 "R_RBAC",		/* name */
	 TRUE,			/* partial_inplace */
	 0xffffffff,		/* src_mask */
	 0xffffffff,		/* dst_mask */
	 FALSE),		/* pcrel_offset */

  /* 0x1a: Modifiable branch relative.  */
  HOWTO (R_RBR,			/* type */
	 0,			/* rightshift */
	 2,			/* size (0 = byte, 1 = short, 2 = long) */
	 26,			/* bitsize */
	 FALSE,			/* pc_relative */
	 0,			/* bitpos */
	 complain_overflow_signed, /* complain_on_overflow */
	 0,			/* special_function */
	 "R_RBR_26",		/* name */
	 TRUE,			/* partial_inplace */
	 0x03fffffc,		/* src_mask */
	 0x03fffffc,		/* dst_mask */
	 FALSE),		/* pcrel_offset */

  /* 0x1b: Modifiable branch absolute.  */
  HOWTO (R_RBRC,		/* type */
	 0,			/* rightshift */
	 1,			/* size (0 = byte, 1 = short, 2 = long) */
	 16,			/* bitsize */
	 FALSE,			/* pc_relative */
	 0,			/* bitpos */
	 complain_overflow_bitfield, /* complain_on_overflow */
	 0,			/* special_function */
	 "R_RBRC",		/* name */
	 TRUE,			/* partial_inplace */
	 0xffff,		/* src_mask */
	 0xffff,		/* dst_mask */
	 FALSE),		/* pcrel_offset */

  /* 0x1c: Standard 32 bit relocation.  */
  HOWTO (R_POS,			/* type */
	 0,			/* rightshift */
	 2,			/* size (0 = byte, 1 = short, 2 = long) */
	 32,			/* bitsize */
	 FALSE,			/* pc_relative */
	 0,			/* bitpos */
	 complain_overflow_bitfield, /* complain_on_overflow */
	 0,			/* special_function */
	 "R_POS_32",		/* name */
	 TRUE,			/* partial_inplace */
	 0xffffffff,		/* src_mask */
	 0xffffffff,		/* dst_mask */
	 FALSE),		/* pcrel_offset */

  /* 0x1d: 16 bit Non modifiable absolute branch.  */
  HOWTO (R_BA,			/* type */
	 0,			/* rightshift */
	 1,			/* size (0 = byte, 1 = short, 2 = long) */
	 16,			/* bitsize */
	 FALSE,			/* pc_relative */
	 0,			/* bitpos */
	 complain_overflow_bitfield, /* complain_on_overflow */
	 0,			/* special_function */
	 "R_BA_16",		/* name */
	 TRUE,			/* partial_inplace */
	 0xfffc,		/* src_mask */
	 0xfffc,		/* dst_mask */
	 FALSE),		/* pcrel_offset */

  /* 0x1e: Modifiable branch relative.  */
  HOWTO (R_RBR,			/* type */
	 0,			/* rightshift */
	 1,			/* size (0 = byte, 1 = short, 2 = long) */
	 16,			/* bitsize */
	 TRUE,			/* pc_relative */
	 0,			/* bitpos */
	 complain_overflow_signed, /* complain_on_overflow */
	 0,			/* special_function */
	 "R_RBR_16",		/* name */
	 TRUE,			/* partial_inplace */
	 0xfffc,		/* src_mask */
	 0xfffc,		/* dst_mask */
	 FALSE),		/* pcrel_offset */

  /* 0x1f: Modifiable branch absolute.  */
  HOWTO (R_RBA,			/* type */
	 0,			/* rightshift */
	 1,			/* size (0 = byte, 1 = short, 2 = long) */
	 16,			/* bitsize */
	 FALSE,			/* pc_relative */
	 0,			/* bitpos */
	 complain_overflow_bitfield, /* complain_on_overflow */
	 0,			/* special_function */
	 "R_RBA_16",		/* name */
	 TRUE,			/* partial_inplace */
	 0xffff,		/* src_mask */
	 0xffff,		/* dst_mask */
	 FALSE),		/* pcrel_offset */

};

void
xcoff64_rtype2howto (arelent *relent, struct internal_reloc *internal)
{
  if (internal->r_type > R_RBRC)
    abort ();

  /* Default howto layout works most of the time */
  relent->howto = &xcoff64_howto_table[internal->r_type];

  /* Special case some 16 bit reloc */
  if (15 == (internal->r_size & 0x3f))
    {
      if (R_BA == internal->r_type)
	relent->howto = &xcoff64_howto_table[0x1d];
      else if (R_RBR == internal->r_type)
	relent->howto = &xcoff64_howto_table[0x1e];
      else if (R_RBA == internal->r_type)
	relent->howto = &xcoff64_howto_table[0x1f];
    }
  /* Special case 32 bit */
  else if (31 == (internal->r_size & 0x3f))
    {
      if (R_POS == internal->r_type)
	relent->howto = &xcoff64_howto_table[0x1c];
    }

  /* The r_size field of an XCOFF reloc encodes the bitsize of the
     relocation, as well as indicating whether it is signed or not.
     Doublecheck that the relocation information gathered from the
     type matches this information.  The bitsize is not significant
     for R_REF relocs.  */
  if (relent->howto->dst_mask != 0
      && (relent->howto->bitsize
	  != ((unsigned int) internal->r_size & 0x3f) + 1))
    abort ();
}

reloc_howto_type *
xcoff64_reloc_type_lookup (bfd *abfd ATTRIBUTE_UNUSED,
                           bfd_reloc_code_real_type code)
{
  switch (code)
    {
    case BFD_RELOC_PPC_B26:
      return &xcoff64_howto_table[0xa];
    case BFD_RELOC_PPC_BA16:
      return &xcoff64_howto_table[0x1d];
    case BFD_RELOC_PPC_BA26:
      return &xcoff64_howto_table[8];
    case BFD_RELOC_PPC_TOC16:
      return &xcoff64_howto_table[3];
    case BFD_RELOC_16:
      /* Note that this relocation is only internally used by gas.  */
      return &xcoff64_howto_table[0xc];
    case BFD_RELOC_PPC_B16:
      return &xcoff64_howto_table[0x1e];
    case BFD_RELOC_32:
    case BFD_RELOC_CTOR:
      return &xcoff64_howto_table[0x1c];
    case BFD_RELOC_64:
      return &xcoff64_howto_table[0];
    case BFD_RELOC_NONE:
      return &xcoff64_howto_table[0xf];
    default:
      return NULL;
    }
}

static reloc_howto_type *
xcoff64_reloc_name_lookup (bfd *abfd ATTRIBUTE_UNUSED,
			   const char *r_name)
{
  unsigned int i;

  for (i = 0;
       i < sizeof (xcoff64_howto_table) / sizeof (xcoff64_howto_table[0]);
       i++)
    if (xcoff64_howto_table[i].name != NULL
	&& strcasecmp (xcoff64_howto_table[i].name, r_name) == 0)
      return &xcoff64_howto_table[i];

  return NULL;
}

/* Read in the armap of an XCOFF archive.  */

static bfd_boolean
xcoff64_slurp_armap (bfd *abfd)
{
  file_ptr off;
  size_t namlen;
  bfd_size_type sz, amt;
  bfd_byte *contents, *cend;
  bfd_vma c, i;
  carsym *arsym;
  bfd_byte *p;
  file_ptr pos;

  /* This is for the new format.  */
  struct xcoff_ar_hdr_big hdr;

  if (xcoff_ardata (abfd) == NULL)
    {
      bfd_has_map (abfd) = FALSE;
      return TRUE;
    }

  off = bfd_scan_vma (xcoff_ardata_big (abfd)->symoff64,
		      (const char **) NULL, 10);
  if (off == 0)
    {
      bfd_has_map (abfd) = FALSE;
      return TRUE;
    }

  if (bfd_seek (abfd, off, SEEK_SET) != 0)
    return FALSE;

  /* The symbol table starts with a normal archive header.  */
  if (bfd_bread (&hdr, (bfd_size_type) SIZEOF_AR_HDR_BIG, abfd)
      != SIZEOF_AR_HDR_BIG)
    return FALSE;

  /* Skip the name (normally empty).  */
  namlen = strtol (hdr.namlen, (char **) NULL, 10);
  pos = ((namlen + 1) & ~(size_t) 1) + SXCOFFARFMAG;
  if (bfd_seek (abfd, pos, SEEK_CUR) != 0)
    return FALSE;

  sz = bfd_scan_vma (hdr.size, (const char **) NULL, 10);

  /* Read in the entire symbol table.  */
  contents = (bfd_byte *) bfd_alloc (abfd, sz);
  if (contents == NULL)
    return FALSE;
  if (bfd_bread (contents, sz, abfd) != sz)
    return FALSE;

  /* The symbol table starts with an eight byte count.  */
  c = H_GET_64 (abfd, contents);

  if (c * 8 >= sz)
    {
      bfd_set_error (bfd_error_bad_value);
      return FALSE;
    }
  amt = c;
  amt *= sizeof (carsym);
  bfd_ardata (abfd)->symdefs = (carsym *) bfd_alloc (abfd, amt);
  if (bfd_ardata (abfd)->symdefs == NULL)
    return FALSE;

  /* After the count comes a list of eight byte file offsets.  */
  for (i = 0, arsym = bfd_ardata (abfd)->symdefs, p = contents + 8;
       i < c;
       ++i, ++arsym, p += 8)
    arsym->file_offset = H_GET_64 (abfd, p);

  /* After the file offsets come null terminated symbol names.  */
  cend = contents + sz;
  for (i = 0, arsym = bfd_ardata (abfd)->symdefs;
       i < c;
       ++i, ++arsym, p += strlen ((char *) p) + 1)
    {
      if (p >= cend)
	{
	  bfd_set_error (bfd_error_bad_value);
	  return FALSE;
	}
      arsym->name = (char *) p;
    }

  bfd_ardata (abfd)->symdef_count = c;
  bfd_has_map (abfd) = TRUE;

  return TRUE;
}


/* See if this is an NEW XCOFF archive.  */

static const bfd_target *
xcoff64_archive_p (bfd *abfd)
{
  struct artdata *tdata_hold;
  char magic[SXCOFFARMAG];
  /* This is the new format.  */
  struct xcoff_ar_file_hdr_big hdr;
  bfd_size_type amt = SXCOFFARMAG;

  if (bfd_bread (magic, amt, abfd) != amt)
    {
      if (bfd_get_error () != bfd_error_system_call)
	bfd_set_error (bfd_error_wrong_format);
      return NULL;
    }

  if (strncmp (magic, XCOFFARMAGBIG, SXCOFFARMAG) != 0)
    {
      bfd_set_error (bfd_error_wrong_format);
      return NULL;
    }

  /* Copy over the magic string.  */
  memcpy (hdr.magic, magic, SXCOFFARMAG);

  /* Now read the rest of the file header.  */
  amt = SIZEOF_AR_FILE_HDR_BIG - SXCOFFARMAG;
  if (bfd_bread (&hdr.memoff, amt, abfd) != amt)
    {
      if (bfd_get_error () != bfd_error_system_call)
	bfd_set_error (bfd_error_wrong_format);
      return NULL;
    }

  tdata_hold = bfd_ardata (abfd);

  amt = sizeof (struct artdata);
  bfd_ardata (abfd) = (struct artdata *) bfd_zalloc (abfd, amt);
  if (bfd_ardata (abfd) == (struct artdata *) NULL)
    goto error_ret_restore;

  /* Already cleared by bfd_zalloc above.
     bfd_ardata (abfd)->cache = NULL;
     bfd_ardata (abfd)->archive_head = NULL;
     bfd_ardata (abfd)->symdefs = NULL;
     bfd_ardata (abfd)->extended_names = NULL;
     bfd_ardata (abfd)->extended_names_size = 0;  */
  bfd_ardata (abfd)->first_file_filepos = bfd_scan_vma (hdr.firstmemoff,
							(const char **) NULL,
							10);

  amt = SIZEOF_AR_FILE_HDR_BIG;
  bfd_ardata (abfd)->tdata = bfd_zalloc (abfd, amt);
  if (bfd_ardata (abfd)->tdata == NULL)
    goto error_ret;

  memcpy (bfd_ardata (abfd)->tdata, &hdr, SIZEOF_AR_FILE_HDR_BIG);

  if (! xcoff64_slurp_armap (abfd))
    {
    error_ret:
      bfd_release (abfd, bfd_ardata (abfd));
    error_ret_restore:
      bfd_ardata (abfd) = tdata_hold;
      return NULL;
    }

  return abfd->xvec;
}


/* Open the next element in an XCOFF archive.  */

static bfd *
xcoff64_openr_next_archived_file (bfd *archive, bfd *last_file)
{
  bfd_vma filestart;

  if ((xcoff_ardata (archive) == NULL)
      || ! xcoff_big_format_p (archive))
    {
      bfd_set_error (bfd_error_invalid_operation);
      return NULL;
    }

  if (last_file == NULL)
    {
      filestart = bfd_ardata (archive)->first_file_filepos;
    }
  else
    {
      filestart = bfd_scan_vma (arch_xhdr_big (last_file)->nextoff,
				(const char **) NULL, 10);
    }

  if (filestart == 0
      || filestart == bfd_scan_vma (xcoff_ardata_big (archive)->memoff,
				    (const char **) NULL, 10)
      || filestart == bfd_scan_vma (xcoff_ardata_big (archive)->symoff,
				    (const char **) NULL, 10))
    {
      bfd_set_error (bfd_error_no_more_archived_files);
      return NULL;
    }

  return _bfd_get_elt_at_filepos (archive, (file_ptr) filestart);
}

/* We can't use the usual coff_sizeof_headers routine, because AIX
   always uses an a.out header.  */

static int
xcoff64_sizeof_headers (bfd *abfd,
			struct bfd_link_info *info ATTRIBUTE_UNUSED)
{
  int size;

  size = bfd_coff_filhsz (abfd);

  /* Don't think the small aout header can be used since some of the
     old elements have been reordered past the end of the old coff
     small aout size.  */

  if (xcoff_data (abfd)->full_aouthdr)
    size += bfd_coff_aoutsz (abfd);

  size += abfd->section_count * bfd_coff_scnhsz (abfd);
  return size;
}

static asection *
xcoff64_create_csect_from_smclas (bfd *abfd, union internal_auxent *aux,
                                  const char *symbol_name)
{
  asection *return_value = NULL;

  /* Changes from 32 :
     .sv == 8, is only for 32 bit programs
     .ti == 12 and .tb == 13 are now reserved.  */
  static const char *names[19] =
  {
    ".pr", ".ro", ".db", ".tc", ".ua", ".rw", ".gl", ".xo",
    NULL, ".bs", ".ds", ".uc", NULL,  NULL,  NULL,  ".tc0",
    ".td", ".sv64", ".sv3264"
  };

  if ((19 >= aux->x_csect.x_smclas)
      && (NULL != names[aux->x_csect.x_smclas]))
    {

      return_value = bfd_make_section_anyway
	(abfd, names[aux->x_csect.x_smclas]);

    }
  else
    {
      (*_bfd_error_handler)
	(_("%B: symbol `%s' has unrecognized smclas %d"),
	 abfd, symbol_name, aux->x_csect.x_smclas);
      bfd_set_error (bfd_error_bad_value);
    }

  return return_value;
}

static bfd_boolean
xcoff64_is_lineno_count_overflow (bfd *abfd ATTRIBUTE_UNUSED,
                                  bfd_vma value ATTRIBUTE_UNUSED)
{
  return FALSE;
}

static bfd_boolean
xcoff64_is_reloc_count_overflow (bfd *abfd ATTRIBUTE_UNUSED,
                                 bfd_vma value ATTRIBUTE_UNUSED)
{
  return FALSE;
}

static bfd_vma
xcoff64_loader_symbol_offset (bfd *abfd ATTRIBUTE_UNUSED,
                              struct internal_ldhdr *ldhdr)
{
  return (ldhdr->l_symoff);
}

static bfd_vma
xcoff64_loader_reloc_offset (bfd *abfd ATTRIBUTE_UNUSED,
                             struct internal_ldhdr *ldhdr)
{
  return (ldhdr->l_rldoff);
}

static bfd_boolean
xcoff64_bad_format_hook (bfd * abfd, void *filehdr)
{
  struct internal_filehdr *internal_f = (struct internal_filehdr *) filehdr;

  /* Check flavor first.  */
  if (bfd_get_flavour (abfd) != bfd_target_xcoff_flavour)
    return FALSE;

  if (bfd_xcoff_magic_number (abfd) != internal_f->f_magic)
    return FALSE;

  return TRUE;
}

static bfd_boolean
xcoff64_generate_rtinit (bfd *abfd, const char *init, const char *fini,
                         bfd_boolean rtld)
{
  bfd_byte filehdr_ext[FILHSZ];
  bfd_byte scnhdr_ext[SCNHSZ * 3];
  bfd_byte syment_ext[SYMESZ * 10];
  bfd_byte reloc_ext[RELSZ * 3];
  bfd_byte *data_buffer;
  bfd_size_type data_buffer_size;
  bfd_byte *string_table, *st_tmp;
  bfd_size_type string_table_size;
  bfd_vma val;
  size_t initsz, finisz;
  struct internal_filehdr filehdr;
  struct internal_scnhdr text_scnhdr;
  struct internal_scnhdr data_scnhdr;
  struct internal_scnhdr bss_scnhdr;
  struct internal_syment syment;
  union internal_auxent auxent;
  struct internal_reloc reloc;

  char *text_name = ".text";
  char *data_name = ".data";
  char *bss_name = ".bss";
  char *rtinit_name = "__rtinit";
  char *rtld_name = "__rtld";

  if (! bfd_xcoff_rtinit_size (abfd))
    return FALSE;

  initsz = (init == NULL ? 0 : 1 + strlen (init));
  finisz = (fini == NULL ? 0 : 1 + strlen (fini));

  /* File header.  */
  memset (filehdr_ext, 0, FILHSZ);
  memset (&filehdr, 0, sizeof (struct internal_filehdr));
  filehdr.f_magic = bfd_xcoff_magic_number (abfd);
  filehdr.f_nscns = 3;
  filehdr.f_timdat = 0;
  filehdr.f_nsyms = 0;  /* at least 6, no more than 8 */
  filehdr.f_symptr = 0; /* set below */
  filehdr.f_opthdr = 0;
  filehdr.f_flags = 0;

  /* Section headers.  */
  memset (scnhdr_ext, 0, 3 * SCNHSZ);

  /* Text.  */
  memset (&text_scnhdr, 0, sizeof (struct internal_scnhdr));
  memcpy (text_scnhdr.s_name, text_name, strlen (text_name));
  text_scnhdr.s_paddr = 0;
  text_scnhdr.s_vaddr = 0;
  text_scnhdr.s_size = 0;
  text_scnhdr.s_scnptr = 0;
  text_scnhdr.s_relptr = 0;
  text_scnhdr.s_lnnoptr = 0;
  text_scnhdr.s_nreloc = 0;
  text_scnhdr.s_nlnno = 0;
  text_scnhdr.s_flags = STYP_TEXT;

  /* Data.  */
  memset (&data_scnhdr, 0, sizeof (struct internal_scnhdr));
  memcpy (data_scnhdr.s_name, data_name, strlen (data_name));
  data_scnhdr.s_paddr = 0;
  data_scnhdr.s_vaddr = 0;
  data_scnhdr.s_size = 0;    /* set below */
  data_scnhdr.s_scnptr = FILHSZ + 3 * SCNHSZ;
  data_scnhdr.s_relptr = 0;  /* set below */
  data_scnhdr.s_lnnoptr = 0;
  data_scnhdr.s_nreloc = 0;  /* either 1 or 2 */
  data_scnhdr.s_nlnno = 0;
  data_scnhdr.s_flags = STYP_DATA;

  /* Bss.  */
  memset (&bss_scnhdr, 0, sizeof (struct internal_scnhdr));
  memcpy (bss_scnhdr.s_name, bss_name, strlen (bss_name));
  bss_scnhdr.s_paddr = 0; /* set below */
  bss_scnhdr.s_vaddr = 0; /* set below */
  bss_scnhdr.s_size = 0;  /* set below */
  bss_scnhdr.s_scnptr = 0;
  bss_scnhdr.s_relptr = 0;
  bss_scnhdr.s_lnnoptr = 0;
  bss_scnhdr.s_nreloc = 0;
  bss_scnhdr.s_nlnno = 0;
  bss_scnhdr.s_flags = STYP_BSS;

  /* .data
     0x0000	      0x00000000 : rtl
     0x0004	      0x00000000 :
     0x0008	      0x00000018 : offset to init, or 0
     0x000C	      0x00000038 : offset to fini, or 0
     0x0010	      0x00000010 : size of descriptor
     0x0014	      0x00000000 : pad
     0x0018	      0x00000000 : init, needs a reloc
     0x001C	      0x00000000 :
     0x0020	      0x00000058 : offset to init name
     0x0024	      0x00000000 : flags, padded to a word
     0x0028	      0x00000000 : empty init
     0x002C	      0x00000000 :
     0x0030	      0x00000000 :
     0x0034	      0x00000000 :
     0x0038	      0x00000000 : fini, needs a reloc
     0x003C	      0x00000000 :
     0x0040	      0x00000??? : offset to fini name
     0x0044	      0x00000000 : flags, padded to a word
     0x0048	      0x00000000 : empty fini
     0x004C	      0x00000000 :
     0x0050	      0x00000000 :
     0x0054	      0x00000000 :
     0x0058	      init name
     0x0058 + initsz  fini name */

  data_buffer_size = 0x0058 + initsz + finisz;
  data_buffer_size = (data_buffer_size + 7) &~ (bfd_size_type) 7;
  data_buffer = NULL;
  data_buffer = (bfd_byte *) bfd_zmalloc (data_buffer_size);
  if (data_buffer == NULL)
    return FALSE;

  if (initsz)
    {
      val = 0x18;
      bfd_put_32 (abfd, val, &data_buffer[0x08]);
      val = 0x58;
      bfd_put_32 (abfd, val, &data_buffer[0x20]);
      memcpy (&data_buffer[val], init, initsz);
    }

  if (finisz)
    {
      val = 0x38;
      bfd_put_32 (abfd, val, &data_buffer[0x0C]);
      val = 0x58 + initsz;
      bfd_put_32 (abfd, val, &data_buffer[0x40]);
      memcpy (&data_buffer[val], fini, finisz);
    }

  val = 0x10;
  bfd_put_32 (abfd, val, &data_buffer[0x10]);
  data_scnhdr.s_size = data_buffer_size;
  bss_scnhdr.s_paddr = bss_scnhdr.s_vaddr = data_scnhdr.s_size;

  /* String table.  */
  string_table_size = 4;
  string_table_size += strlen (data_name) + 1;
  string_table_size += strlen (rtinit_name) + 1;
  string_table_size += initsz;
  string_table_size += finisz;
  if (rtld)
    string_table_size += strlen (rtld_name) + 1;

  string_table = (bfd_byte *) bfd_zmalloc (string_table_size);
  if (string_table == NULL)
    return FALSE;

  val = string_table_size;
  bfd_put_32 (abfd, val, &string_table[0]);
  st_tmp = string_table + 4;

  /* symbols
     0. .data csect
     2. __rtinit
     4. init function
     6. fini function
     8. __rtld  */
  memset (syment_ext, 0, 10 * SYMESZ);
  memset (reloc_ext, 0, 3 * RELSZ);

  /* .data csect */
  memset (&syment, 0, sizeof (struct internal_syment));
  memset (&auxent, 0, sizeof (union internal_auxent));

  syment._n._n_n._n_offset = st_tmp - string_table;
  memcpy (st_tmp, data_name, strlen (data_name));
  st_tmp += strlen (data_name) + 1;

  syment.n_scnum = 2;
  syment.n_sclass = C_HIDEXT;
  syment.n_numaux = 1;
  auxent.x_csect.x_scnlen.l = data_buffer_size;
  auxent.x_csect.x_smtyp = 3 << 3 | XTY_SD;
  auxent.x_csect.x_smclas = XMC_RW;
  bfd_coff_swap_sym_out (abfd, &syment,
			 &syment_ext[filehdr.f_nsyms * SYMESZ]);
  bfd_coff_swap_aux_out (abfd, &auxent, syment.n_type, syment.n_sclass, 0,
			 syment.n_numaux,
			 &syment_ext[(filehdr.f_nsyms + 1) * SYMESZ]);
  filehdr.f_nsyms += 2;

  /* __rtinit */
  memset (&syment, 0, sizeof (struct internal_syment));
  memset (&auxent, 0, sizeof (union internal_auxent));
  syment._n._n_n._n_offset = st_tmp - string_table;
  memcpy (st_tmp, rtinit_name, strlen (rtinit_name));
  st_tmp += strlen (rtinit_name) + 1;

  syment.n_scnum = 2;
  syment.n_sclass = C_EXT;
  syment.n_numaux = 1;
  auxent.x_csect.x_smtyp = XTY_LD;
  auxent.x_csect.x_smclas = XMC_RW;
  bfd_coff_swap_sym_out (abfd, &syment,
			 &syment_ext[filehdr.f_nsyms * SYMESZ]);
  bfd_coff_swap_aux_out (abfd, &auxent, syment.n_type, syment.n_sclass, 0,
			 syment.n_numaux,
			 &syment_ext[(filehdr.f_nsyms + 1) * SYMESZ]);
  filehdr.f_nsyms += 2;

  /* Init.  */
  if (initsz)
    {
      memset (&syment, 0, sizeof (struct internal_syment));
      memset (&auxent, 0, sizeof (union internal_auxent));

      syment._n._n_n._n_offset = st_tmp - string_table;
      memcpy (st_tmp, init, initsz);
      st_tmp += initsz;

      syment.n_sclass = C_EXT;
      syment.n_numaux = 1;
      bfd_coff_swap_sym_out (abfd, &syment,
			     &syment_ext[filehdr.f_nsyms * SYMESZ]);
      bfd_coff_swap_aux_out (abfd, &auxent, syment.n_type, syment.n_sclass, 0,
			     syment.n_numaux,
			     &syment_ext[(filehdr.f_nsyms + 1) * SYMESZ]);
      /* Reloc.  */
      memset (&reloc, 0, sizeof (struct internal_reloc));
      reloc.r_vaddr = 0x0018;
      reloc.r_symndx = filehdr.f_nsyms;
      reloc.r_type = R_POS;
      reloc.r_size = 63;
      bfd_coff_swap_reloc_out (abfd, &reloc, &reloc_ext[0]);

      filehdr.f_nsyms += 2;
      data_scnhdr.s_nreloc += 1;
    }

  /* Finit.  */
  if (finisz)
    {
      memset (&syment, 0, sizeof (struct internal_syment));
      memset (&auxent, 0, sizeof (union internal_auxent));

      syment._n._n_n._n_offset = st_tmp - string_table;
      memcpy (st_tmp, fini, finisz);
      st_tmp += finisz;

      syment.n_sclass = C_EXT;
      syment.n_numaux = 1;
      bfd_coff_swap_sym_out (abfd, &syment,
			     &syment_ext[filehdr.f_nsyms * SYMESZ]);
      bfd_coff_swap_aux_out (abfd, &auxent, syment.n_type, syment.n_sclass, 0,
			     syment.n_numaux,
			     &syment_ext[(filehdr.f_nsyms + 1) * SYMESZ]);

      /* Reloc.  */
      memset (&reloc, 0, sizeof (struct internal_reloc));
      reloc.r_vaddr = 0x0038;
      reloc.r_symndx = filehdr.f_nsyms;
      reloc.r_type = R_POS;
      reloc.r_size = 63;
      bfd_coff_swap_reloc_out (abfd, &reloc,
			       &reloc_ext[data_scnhdr.s_nreloc * RELSZ]);

      filehdr.f_nsyms += 2;
      data_scnhdr.s_nreloc += 1;
    }

  if (rtld)
    {
      memset (&syment, 0, sizeof (struct internal_syment));
      memset (&auxent, 0, sizeof (union internal_auxent));

      syment._n._n_n._n_offset = st_tmp - string_table;
      memcpy (st_tmp, rtld_name, strlen (rtld_name));
      st_tmp += strlen (rtld_name) + 1;

      syment.n_sclass = C_EXT;
      syment.n_numaux = 1;
      bfd_coff_swap_sym_out (abfd, &syment,
			     &syment_ext[filehdr.f_nsyms * SYMESZ]);
      bfd_coff_swap_aux_out (abfd, &auxent, syment.n_type, syment.n_sclass, 0,
			     syment.n_numaux,
			     &syment_ext[(filehdr.f_nsyms + 1) * SYMESZ]);

      /* Reloc.  */
      memset (&reloc, 0, sizeof (struct internal_reloc));
      reloc.r_vaddr = 0x0000;
      reloc.r_symndx = filehdr.f_nsyms;
      reloc.r_type = R_POS;
      reloc.r_size = 63;
      bfd_coff_swap_reloc_out (abfd, &reloc,
			       &reloc_ext[data_scnhdr.s_nreloc * RELSZ]);

      filehdr.f_nsyms += 2;
      data_scnhdr.s_nreloc += 1;

      bss_scnhdr.s_size = 0;
    }

  data_scnhdr.s_relptr = data_scnhdr.s_scnptr + data_buffer_size;
  filehdr.f_symptr = data_scnhdr.s_relptr + data_scnhdr.s_nreloc * RELSZ;

  bfd_coff_swap_filehdr_out (abfd, &filehdr, filehdr_ext);
  bfd_bwrite (filehdr_ext, FILHSZ, abfd);
  bfd_coff_swap_scnhdr_out (abfd, &text_scnhdr, &scnhdr_ext[SCNHSZ * 0]);
  bfd_coff_swap_scnhdr_out (abfd, &data_scnhdr, &scnhdr_ext[SCNHSZ * 1]);
  bfd_coff_swap_scnhdr_out (abfd, &bss_scnhdr, &scnhdr_ext[SCNHSZ * 2]);
  bfd_bwrite (scnhdr_ext, 3 * SCNHSZ, abfd);
  bfd_bwrite (data_buffer, data_buffer_size, abfd);
  bfd_bwrite (reloc_ext, data_scnhdr.s_nreloc * RELSZ, abfd);
  bfd_bwrite (syment_ext, filehdr.f_nsyms * SYMESZ, abfd);
  bfd_bwrite (string_table, string_table_size, abfd);

  free (data_buffer);
  data_buffer = NULL;

  return TRUE;
}

/* The typical dynamic reloc.  */

static reloc_howto_type xcoff64_dynamic_reloc =
HOWTO (0,			/* type */
       0,			/* rightshift */
       4,			/* size (0 = byte, 1 = short, 2 = long) */
       64,			/* bitsize */
       FALSE,			/* pc_relative */
       0,			/* bitpos */
       complain_overflow_bitfield, /* complain_on_overflow */
       0,			/* special_function */
       "R_POS",			/* name */
       TRUE,			/* partial_inplace */
       MINUS_ONE,		/* src_mask */
       MINUS_ONE,		/* dst_mask */
       FALSE);			/* pcrel_offset */

static unsigned long xcoff64_glink_code[10] =
{
  0xe9820000,	/* ld r12,0(r2) */
  0xf8410028,	/* std r2,40(r1) */
  0xe80c0000,	/* ld r0,0(r12) */
  0xe84c0008,	/* ld r0,8(r12) */
  0x7c0903a6,	/* mtctr r0 */
  0x4e800420,	/* bctr */
  0x00000000,	/* start of traceback table */
  0x000ca000,	/* traceback table */
  0x00000000,	/* traceback table */
  0x00000018,	/* ??? */
};

static const struct xcoff_backend_data_rec bfd_xcoff_backend_data =
  {
    { /* COFF backend, defined in libcoff.h.  */
      _bfd_xcoff64_swap_aux_in,
      _bfd_xcoff64_swap_sym_in,
      _bfd_xcoff64_swap_lineno_in,
      _bfd_xcoff64_swap_aux_out,
      _bfd_xcoff64_swap_sym_out,
      _bfd_xcoff64_swap_lineno_out,
      xcoff64_swap_reloc_out,
      coff_swap_filehdr_out,
      coff_swap_aouthdr_out,
      coff_swap_scnhdr_out,
      FILHSZ,
      AOUTSZ,
      SCNHSZ,
      SYMESZ,
      AUXESZ,
      RELSZ,
      LINESZ,
      FILNMLEN,
      TRUE,			/* _bfd_coff_long_filenames */
      XCOFF_NO_LONG_SECTION_NAMES,  /* _bfd_coff_long_section_names */
      3,			/* _bfd_coff_default_section_alignment_power */
      TRUE,			/* _bfd_coff_force_symnames_in_strings */
      4,			/* _bfd_coff_debug_string_prefix_length */
      coff_swap_filehdr_in,
      coff_swap_aouthdr_in,
      coff_swap_scnhdr_in,
      xcoff64_swap_reloc_in,
      xcoff64_bad_format_hook,
      coff_set_arch_mach_hook,
      coff_mkobject_hook,
      styp_to_sec_flags,
      coff_set_alignment_hook,
      coff_slurp_symbol_table,
      symname_in_debug_hook,
      coff_pointerize_aux_hook,
      coff_print_aux,
      dummy_reloc16_extra_cases,
      dummy_reloc16_estimate,
      NULL,			/* bfd_coff_symbol_classification */
      coff_compute_section_file_positions,
      NULL,			/* _bfd_coff_start_final_link */
      xcoff64_ppc_relocate_section,
      coff_rtype_to_howto,
      NULL,			/* _bfd_coff_adjust_symndx */
      _bfd_generic_link_add_one_symbol,
      coff_link_output_has_begun,
      coff_final_link_postscript,
      NULL			/* print_pdata.  */
    },

    0x01EF,			/* magic number */
    bfd_arch_powerpc,
    bfd_mach_ppc_620,

    /* Function pointers to xcoff specific swap routines.  */
    xcoff64_swap_ldhdr_in,
    xcoff64_swap_ldhdr_out,
    xcoff64_swap_ldsym_in,
    xcoff64_swap_ldsym_out,
    xcoff64_swap_ldrel_in,
    xcoff64_swap_ldrel_out,

    /* Sizes.  */
    LDHDRSZ,
    LDSYMSZ,
    LDRELSZ,
    24,				/* _xcoff_function_descriptor_size */
    0,				/* _xcoff_small_aout_header_size */

    /* Versions.  */
    2,				/* _xcoff_ldhdr_version */

    _bfd_xcoff64_put_symbol_name,
    _bfd_xcoff64_put_ldsymbol_name,
    &xcoff64_dynamic_reloc,
    xcoff64_create_csect_from_smclas,

    /* Lineno and reloc count overflow.  */
    xcoff64_is_lineno_count_overflow,
    xcoff64_is_reloc_count_overflow,

    xcoff64_loader_symbol_offset,
    xcoff64_loader_reloc_offset,

    /* glink.  */
    &xcoff64_glink_code[0],
    40,				/* _xcoff_glink_size */

    /* rtinit.  */
    88,				/* _xcoff_rtinit_size */
    xcoff64_generate_rtinit,
  };

/* The transfer vector that leads the outside world to all of the above.  */
const bfd_target rs6000coff64_vec =
  {
    "aixcoff64-rs6000",
    bfd_target_xcoff_flavour,
    BFD_ENDIAN_BIG,		/* data byte order is big */
    BFD_ENDIAN_BIG,		/* header byte order is big */

    (HAS_RELOC | EXEC_P | HAS_LINENO | HAS_DEBUG | DYNAMIC
     | HAS_SYMS | HAS_LOCALS | WP_TEXT),

    SEC_HAS_CONTENTS | SEC_ALLOC | SEC_LOAD | SEC_RELOC | SEC_CODE | SEC_DATA,
    0,				/* leading char */
    '/',			/* ar_pad_char */
    15,				/* ar_max_namelen */
    0,				/* match priority.  */

    /* data */
    bfd_getb64,
    bfd_getb_signed_64,
    bfd_putb64,
    bfd_getb32,
    bfd_getb_signed_32,
    bfd_putb32,
    bfd_getb16,
    bfd_getb_signed_16,
    bfd_putb16,

    /* hdrs */
    bfd_getb64,
    bfd_getb_signed_64,
    bfd_putb64,
    bfd_getb32,
    bfd_getb_signed_32,
    bfd_putb32,
    bfd_getb16,
    bfd_getb_signed_16,
    bfd_putb16,

    { /* bfd_check_format */
      _bfd_dummy_target,
      coff_object_p,
      xcoff64_archive_p,
      CORE_FILE_P
    },

    { /* bfd_set_format */
      bfd_false,
      coff_mkobject,
      _bfd_generic_mkarchive,
      bfd_false
    },

    {/* bfd_write_contents */
      bfd_false,
      xcoff64_write_object_contents,
      _bfd_xcoff_write_archive_contents,
      bfd_false
    },

    /* Generic */
    _bfd_archive_close_and_cleanup,
    bfd_true,
    coff_new_section_hook,
    _bfd_generic_get_section_contents,
    _bfd_generic_get_section_contents_in_window,

    /* Copy */
    _bfd_xcoff_copy_private_bfd_data,
    _bfd_generic_bfd_merge_private_bfd_data,
    _bfd_generic_init_private_section_data,
    _bfd_generic_bfd_copy_private_section_data,
    _bfd_generic_bfd_copy_private_symbol_data,
    _bfd_generic_bfd_copy_private_header_data,
    _bfd_generic_bfd_set_private_flags,
    _bfd_generic_bfd_print_private_bfd_data,

    /* Core */
    BFD_JUMP_TABLE_CORE (coff),

    /* Archive */
    xcoff64_slurp_armap,
    _bfd_noarchive_slurp_extended_name_table,
    _bfd_noarchive_construct_extended_name_table,
    bfd_dont_truncate_arname,
    _bfd_xcoff_write_armap,
    _bfd_xcoff_read_ar_hdr,
    _bfd_generic_write_ar_hdr,
    xcoff64_openr_next_archived_file,
    _bfd_generic_get_elt_at_index,
    _bfd_xcoff_stat_arch_elt,
    bfd_true,

    /* Symbols */
    coff_get_symtab_upper_bound,
    coff_canonicalize_symtab,
    coff_make_empty_symbol,
    coff_print_symbol,
    coff_get_symbol_info,
    _bfd_xcoff_is_local_label_name,
    coff_bfd_is_target_special_symbol,
    coff_get_lineno,
    coff_find_nearest_line,
    _bfd_generic_find_nearest_line_discriminator,
    _bfd_generic_find_line,
    coff_find_inliner_info,
    coff_bfd_make_debug_symbol,
    _bfd_generic_read_minisymbols,
    _bfd_generic_minisymbol_to_symbol,

    /* Reloc */
    coff_get_reloc_upper_bound,
    coff_canonicalize_reloc,
    xcoff64_reloc_type_lookup,
    xcoff64_reloc_name_lookup,

    /* Write */
    coff_set_arch_mach,
    coff_set_section_contents,

    /* Link */
    xcoff64_sizeof_headers,
    bfd_generic_get_relocated_section_contents,
    bfd_generic_relax_section,
    _bfd_xcoff_bfd_link_hash_table_create,
    _bfd_generic_link_hash_table_free,
    _bfd_xcoff_bfd_link_add_symbols,
    _bfd_generic_link_just_syms,
    _bfd_generic_copy_link_hash_symbol_type,
    _bfd_xcoff_bfd_final_link,
    _bfd_generic_link_split_section,
    bfd_generic_gc_sections,
    bfd_generic_lookup_section_flags,
    bfd_generic_merge_sections,
    bfd_generic_is_group_section,
    bfd_generic_discard_group,
    _bfd_generic_section_already_linked,
    _bfd_xcoff_define_common_symbol,

    /* Dynamic */
    _bfd_xcoff_get_dynamic_symtab_upper_bound,
    _bfd_xcoff_canonicalize_dynamic_symtab,
    _bfd_nodynamic_get_synthetic_symtab,
    _bfd_xcoff_get_dynamic_reloc_upper_bound,
    _bfd_xcoff_canonicalize_dynamic_reloc,

    /* Opposite endian version, none exists */
    NULL,

    &bfd_xcoff_backend_data,
  };

extern const bfd_target *xcoff64_core_p
  (bfd *);
extern bfd_boolean xcoff64_core_file_matches_executable_p
  (bfd *, bfd *);
extern char *xcoff64_core_file_failing_command
  (bfd *);
extern int xcoff64_core_file_failing_signal
  (bfd *);
#define xcoff64_core_file_pid _bfd_nocore_core_file_pid

/* AIX 5 */
static const struct xcoff_backend_data_rec bfd_xcoff_aix5_backend_data =
  {
    { /* COFF backend, defined in libcoff.h.  */
      _bfd_xcoff64_swap_aux_in,
      _bfd_xcoff64_swap_sym_in,
      _bfd_xcoff64_swap_lineno_in,
      _bfd_xcoff64_swap_aux_out,
      _bfd_xcoff64_swap_sym_out,
      _bfd_xcoff64_swap_lineno_out,
      xcoff64_swap_reloc_out,
      coff_swap_filehdr_out,
      coff_swap_aouthdr_out,
      coff_swap_scnhdr_out,
      FILHSZ,
      AOUTSZ,
      SCNHSZ,
      SYMESZ,
      AUXESZ,
      RELSZ,
      LINESZ,
      FILNMLEN,
      TRUE,			/* _bfd_coff_long_filenames */
      XCOFF_NO_LONG_SECTION_NAMES,  /* _bfd_coff_long_section_names */
      3,			/* _bfd_coff_default_section_alignment_power */
      TRUE,			/* _bfd_coff_force_symnames_in_strings */
      4,			/* _bfd_coff_debug_string_prefix_length */
      coff_swap_filehdr_in,
      coff_swap_aouthdr_in,
      coff_swap_scnhdr_in,
      xcoff64_swap_reloc_in,
      xcoff64_bad_format_hook,
      coff_set_arch_mach_hook,
      coff_mkobject_hook,
      styp_to_sec_flags,
      coff_set_alignment_hook,
      coff_slurp_symbol_table,
      symname_in_debug_hook,
      coff_pointerize_aux_hook,
      coff_print_aux,
      dummy_reloc16_extra_cases,
      dummy_reloc16_estimate,
      NULL,			/* bfd_coff_sym_is_global */
      coff_compute_section_file_positions,
      NULL,			/* _bfd_coff_start_final_link */
      xcoff64_ppc_relocate_section,
      coff_rtype_to_howto,
      NULL,			/* _bfd_coff_adjust_symndx */
      _bfd_generic_link_add_one_symbol,
      coff_link_output_has_begun,
      coff_final_link_postscript,
      NULL			/* print_pdata.  */
    },

    U64_TOCMAGIC,		/* magic number */
    bfd_arch_powerpc,
    bfd_mach_ppc_620,

    /* Function pointers to xcoff specific swap routines.  */
    xcoff64_swap_ldhdr_in,
    xcoff64_swap_ldhdr_out,
    xcoff64_swap_ldsym_in,
    xcoff64_swap_ldsym_out,
    xcoff64_swap_ldrel_in,
    xcoff64_swap_ldrel_out,

    /* Sizes.  */
    LDHDRSZ,
    LDSYMSZ,
    LDRELSZ,
    24,				/* _xcoff_function_descriptor_size */
    0,				/* _xcoff_small_aout_header_size */
    /* Versions.  */
    2,				/* _xcoff_ldhdr_version */

    _bfd_xcoff64_put_symbol_name,
    _bfd_xcoff64_put_ldsymbol_name,
    &xcoff64_dynamic_reloc,
    xcoff64_create_csect_from_smclas,

    /* Lineno and reloc count overflow.  */
    xcoff64_is_lineno_count_overflow,
    xcoff64_is_reloc_count_overflow,

    xcoff64_loader_symbol_offset,
    xcoff64_loader_reloc_offset,

    /* glink.  */
    &xcoff64_glink_code[0],
    40,				/* _xcoff_glink_size */

    /* rtinit.  */
    88,				/* _xcoff_rtinit_size */
    xcoff64_generate_rtinit,
  };

/* The transfer vector that leads the outside world to all of the above.  */
const bfd_target aix5coff64_vec =
  {
    "aix5coff64-rs6000",
    bfd_target_xcoff_flavour,
    BFD_ENDIAN_BIG,		/* data byte order is big */
    BFD_ENDIAN_BIG,		/* header byte order is big */

    (HAS_RELOC | EXEC_P | HAS_LINENO | HAS_DEBUG | DYNAMIC
     | HAS_SYMS | HAS_LOCALS | WP_TEXT),

    SEC_HAS_CONTENTS | SEC_ALLOC | SEC_LOAD | SEC_RELOC | SEC_CODE | SEC_DATA,
    0,				/* leading char */
    '/',			/* ar_pad_char */
    15,				/* ar_max_namelen */
    0,				/* match priority.  */

    /* data */
    bfd_getb64,
    bfd_getb_signed_64,
    bfd_putb64,
    bfd_getb32,
    bfd_getb_signed_32,
    bfd_putb32,
    bfd_getb16,
    bfd_getb_signed_16,
    bfd_putb16,

    /* hdrs */
    bfd_getb64,
    bfd_getb_signed_64,
    bfd_putb64,
    bfd_getb32,
    bfd_getb_signed_32,
    bfd_putb32,
    bfd_getb16,
    bfd_getb_signed_16,
    bfd_putb16,

    { /* bfd_check_format */
      _bfd_dummy_target,
      coff_object_p,
      xcoff64_archive_p,
      xcoff64_core_p
    },

    { /* bfd_set_format */
      bfd_false,
      coff_mkobject,
      _bfd_generic_mkarchive,
      bfd_false
    },

    {/* bfd_write_contents */
      bfd_false,
      xcoff64_write_object_contents,
      _bfd_xcoff_write_archive_contents,
      bfd_false
    },

    /* Generic */
    _bfd_archive_close_and_cleanup,
    bfd_true,
    coff_new_section_hook,
    _bfd_generic_get_section_contents,
    _bfd_generic_get_section_contents_in_window,

    /* Copy */
    _bfd_xcoff_copy_private_bfd_data,
    _bfd_generic_bfd_merge_private_bfd_data,
    _bfd_generic_init_private_section_data,
    _bfd_generic_bfd_copy_private_section_data,
    _bfd_generic_bfd_copy_private_symbol_data,
    _bfd_generic_bfd_copy_private_header_data,
    _bfd_generic_bfd_set_private_flags,
    _bfd_generic_bfd_print_private_bfd_data,

    /* Core */
    BFD_JUMP_TABLE_CORE (xcoff64),

    /* Archive */
    xcoff64_slurp_armap,
    _bfd_noarchive_slurp_extended_name_table,
    _bfd_noarchive_construct_extended_name_table,
    bfd_dont_truncate_arname,
    _bfd_xcoff_write_armap,
    _bfd_xcoff_read_ar_hdr,
    _bfd_generic_write_ar_hdr,
    xcoff64_openr_next_archived_file,
    _bfd_generic_get_elt_at_index,
    _bfd_xcoff_stat_arch_elt,
    bfd_true,

    /* Symbols */
    coff_get_symtab_upper_bound,
    coff_canonicalize_symtab,
    coff_make_empty_symbol,
    coff_print_symbol,
    coff_get_symbol_info,
    _bfd_xcoff_is_local_label_name,
    coff_bfd_is_target_special_symbol,
    coff_get_lineno,
    coff_find_nearest_line,
    _bfd_generic_find_nearest_line_discriminator,
    _bfd_generic_find_line,
    coff_find_inliner_info,
    coff_bfd_make_debug_symbol,
    _bfd_generic_read_minisymbols,
    _bfd_generic_minisymbol_to_symbol,

    /* Reloc */
    coff_get_reloc_upper_bound,
    coff_canonicalize_reloc,
    xcoff64_reloc_type_lookup,
    xcoff64_reloc_name_lookup,

    /* Write */
    coff_set_arch_mach,
    coff_set_section_contents,

    /* Link */
    xcoff64_sizeof_headers,
    bfd_generic_get_relocated_section_contents,
    bfd_generic_relax_section,
    _bfd_xcoff_bfd_link_hash_table_create,
    _bfd_generic_link_hash_table_free,
    _bfd_xcoff_bfd_link_add_symbols,
    _bfd_generic_link_just_syms,
    _bfd_generic_copy_link_hash_symbol_type,
    _bfd_xcoff_bfd_final_link,
    _bfd_generic_link_split_section,
    bfd_generic_gc_sections,
    bfd_generic_lookup_section_flags,
    bfd_generic_merge_sections,
    bfd_generic_is_group_section,
    bfd_generic_discard_group,
    _bfd_generic_section_already_linked,
    _bfd_xcoff_define_common_symbol,

    /* Dynamic */
    _bfd_xcoff_get_dynamic_symtab_upper_bound,
    _bfd_xcoff_canonicalize_dynamic_symtab,
    _bfd_nodynamic_get_synthetic_symtab,
    _bfd_xcoff_get_dynamic_reloc_upper_bound,
    _bfd_xcoff_canonicalize_dynamic_reloc,

    /* Opposite endian version, none exists.  */
    NULL,

    & bfd_xcoff_aix5_backend_data,
  };
@


1.92
log
@bfd/
2013-05-16  Tristan Gingold  <gingold@@adacore.com>

	* coff-rs6000.c (_bfd_xcoff_reloc_type_lookup): Handle BFD_RELOC_16.
	* coff64-rs6000.c (xcoff64_reloc_type_lookup): Likewise.


gas/
2013-05-16  Tristan Gingold  <gingold@@adacore.com>

	* config/tc-ppc.c (ppc_is_toc_sym): Symbols of class XMC_TC
	are also TOC symbols.
@
text
@d1376 1
a1376 1
  /* Standard 64 bit relocation.  */
d1391 1
a1391 1
  /* 64 bit relocation, but store negative value.  */
d1406 1
a1406 1
  /* 32 bit PC relative relocation.  */
d1421 1
a1421 1
  /* 16 bit TOC relative relocation.  */
d1436 1
a1436 1
  /* I don't really know what this is.	*/
d1451 1
a1451 1
  /* External TOC relative symbol.  */
d1466 1
a1466 1
  /* Local TOC relative symbol.	 */
d1483 1
a1483 1
  /* Non modifiable absolute branch.  */
d1500 1
a1500 1
  /* Non modifiable relative branch.  */
d1517 1
a1517 1
  /* Indirect load.  */
d1532 1
a1532 1
  /* Load address.  */
d1549 1
a1549 1
  /* Non-relocating reference.  Bitsize is 1 so that r_rsize is 0.  */
d1567 1
a1567 1
  /* TOC relative indirect load.  */
d1582 1
a1582 1
  /* TOC relative load address.	 */
d1597 1
a1597 1
  /* Modifiable relative branch.  */
d1612 1
a1612 1
  /* Modifiable absolute branch.  */
d1627 1
a1627 1
  /* Modifiable call absolute indirect.	 */
d1642 1
a1642 1
  /* Modifiable call relative.	*/
d1657 1
a1657 1
  /* Modifiable branch absolute.  */
d1672 1
a1672 1
  /* Modifiable branch absolute.  */
d1687 1
a1687 1
  /* Modifiable branch relative.  */
d1702 1
a1702 1
  /* Modifiable branch absolute.  */
d1717 1
d1732 1
a1732 1
  /* 16 bit Non modifiable absolute branch.  */
d1747 1
a1747 1
  /* Modifiable branch relative.  */
d1752 1
a1752 1
	 FALSE,			/* pc_relative */
d1758 2
a1759 2
	 0xffff,		/* src_mask */
	 0xffff,		/* dst_mask */
d1762 1
a1762 1
  /* Modifiable branch absolute.  */
d1833 2
@


1.91
log
@dangling pointer in coff64-rs6000 archive cache.

bfd/ChangeLog:

        * coff64-rs6000.c (rs6000coff64_vec): Set _close_and_cleanup
        field to _bfd_archive_close_and_cleanup.
        (aix5coff64_vec): Likewise.
@
text
@d1829 3
@


1.90
log
@2012-07-24  Teresa Johnson  <tejohnson@@google.com>

bfd/
	* bfd.c (bfd_find_nearest_line_discriminator): New macro.
	* coff-rs6000.c: Init _bfd_find_nearest_line_discriminator.
	* coff64-rs6000.c: Likewise.
	* dwarf2.c (struct line_info): Add discriminator field.
	(add_line_info): Fill in new discriminator field.
	(decode_line_info): Record discriminator information instead
        of ignoring it.
	(lookup_address_in_line_info_table): Return discriminator field if
        requested.
	(comp_unit_find_nearest_line): Add discriminator argument.
	(find_line): Likewise.
	(_bfd_dwarf2_find_nearest_line): Likewise.
	(_bfd_dwarf2_find_line): Likewise.
	* elf-bfd.h (_bfd_elf_find_nearest_line_discriminator): New.
        (_bfd_elf_find_line_discriminator): Likewise.
        (_bfd_generic_find_nearest_line_discriminator): Likewise. Defined.
	* elf.c (_bfd_elf_find_nearest_line): Change to a wrapper
        that invokes _bfd_elf_find_nearest_line_discriminator with correct
        arguments.
	(_bfd_elf_find_nearest_line_discriminator): New.
	(_bfd_elf_find_line): Change to a wrapper
        that invokes _bfd_elf_find_line_discriminator with correct
        arguments.
	(_bfd_elf_find_line_discriminator): New.
	* coffgen.c (coff_find_nearest_line_with_names): Handle
        new discriminator argument.
	* elf32-arm.c (elf32_arm_find_nearest_line): Likewise.
	* elf64-alpha.c (elf64_alpha_find_nearest_line): Likewise.
	* elfxx-mips.c (_bfd_mips_elf_find_nearest_line): Likewise.
	* mach-o.c (bfd_mach_o_find_nearest_line): Likewise.
	* libbfd-in.h (_bfd_dwarf2_find_nearest_line): Add discriminator
        argument.
        (_bfd_dwarf2_find_line): Likewise.
        (_bfd_generic_find_nearest_line_discriminator): New.
	* libbfd.c (_bfd_generic_find_nearest_line_discriminator): New.
	* bfd-in2.h: Regenerated.
	* libbfd.h: Likewise.
	* targets.c (BFD_JUMP_TABLE_SYMBOLS): Initialize
        _bfd_find_nearest_line_discriminator with
        _bfd_generic_find_nearest_line_discriminator.
        (bfd_target): Add _bfd_find_nearest_line_discriminator.

binutils/
	* addr2line.c (find_address_in_section): Invoke
        bfd_find_nearest_line_discriminator to get the discriminator.
	(find_offset_in_section): Likewise.
	(translate_addresses): Print discriminator if it is non-zero.
	* objdump.c (show_line): Invoke
        bfd_find_nearest_line_discriminator to get the discriminator,
        and keep track of prev_discriminator. Print discriminator
        if it is non-zero.
	(disassemble_data): Initialize prev_discriminator.
	(dump_reloc_set): Invoke bfd_find_nearest_line_discriminator
        to get the discriminator, and keep track of last_discriminator.
        Print discriminator if it is non-zero.
@
text
@d2671 1
a2671 1
    bfd_true,
d2929 1
a2929 1
    bfd_true,
@


1.89
log
@include/ChangeLog
2011-07-11  Catherine Moore  <clm@@codesourcery.com>

	* bfdlink.h (flag_type): New enumeration.
	(flag_info_list): New structure.
	(flag_info): New structure.

bfd/ChangeLog
2011-07-11  Catherine Moore  <clm@@codesourcery.com>

	* aout-adobe.c (aout_32_bfd_lookup_section_flags): New definition.
	* aout-target.h (MY_bfd_lookup_section_flags): New definition.
	* aout-tic30.c (MY_bfd_lookup_section_flags): New definition.
        * bfd-in2.h: Regenerated.
	* bfd.c (bfd_lookup_section_flags): New definition.
	* binary.c (binary_bfd_lookup_section_flags): New definition.
	* bout.c (b_out_bfd_lookup_section_flags): New definition.
	* coff-alpha.c (_bfd_ecoff_bfd_lookup_section_flags): New definition.
	* coff-mips.c (_bfd_ecoff_bfd_lookup_section_flags): New definition.
	* coff-rs6000.c (rs6000coff_vec): Include
	bfd_generic_lookup_section_flags.
	(pmac_xcoff_vec): Likewise.
	* coffcode.h (coff_bfd_lookup_section_flags): New definition.
	* coff64-rs6000.c (rs6000coff64_vec): Include
	bfd_generic_lookup_section_flags.
	(aix5coff64_vec): Likewise.
	* ecoff.c (bfd_debug_section): Initialize flag_info field.
	* elf-bfd.h (elf_backend_lookup_section_flags_hook): Declare.
	(bfd_elf_lookup_section_flags): Declare.
	* elflink.c (bfd_elf_lookup_section_flags): New function.
	* elfxx-target.h (bfd_elfNN_bfd_lookup_section_flags): Define.
	(elf_backend_lookup_section_flags_hook): Define.
	(elf_backend_data): Add elf_backend_lookup_section_flags_hook.
	* i386msdos.c (msdos_bfd_lookup_section_flags): New define.
	* i386os9k.c (os9k_bfd_lookup_section_flags): New define.
	* ieee.c (ieee_bfd_lookup_section_flags): New define.
	* ihex.c (ihex_bfd_lookup_section_flags): New define.
	* libbfd-in.h (_bfd_nolink_bfd_lookup_section_flags): Declare.
	(bfd_generic_lookup_section_flags): Declare.
	* libbfd.h: Regenerated.
	* mach-o-target.c (bfd_mach_o_bfd_lookup_section_flags): New.
	* mmo.c (mmo_bfd_lookup_section_flags): New definition.
	* nlm-target.h (nlm_bfd_lookup_section_flags): New definition.
	* oasys.c (oasys_bfd_lookup_section_flags): New definition.
	* pef.c (bfd_pef_bfd_lookup_section_flags): New definition.
	* plugin.c (bfd_plugin_bfd_lookup_section_flags): New definition.
	* ppcboot.c (ppcboot_bfd_lookup_section_flags): New definition.
	* reloc.c (bfd_generic_lookup_section_flags): New function.
	* som.c (som_bfd_lookup_section_flags): New definition.
	* srec.c (srec_bfd_lookup_section_flags): New definition.
	* targets.c (flag_info): Declare.
	(NAME##_bfd_lookup_section_flags): Add to LINK jump table.
	(_bfd_lookup_section_flags): New.
	* tekhex.c (tekhex_bfd_lookup_section_flags): New definition.
	* versados.c (versados_bfd_lookup_section_flags): New definition.
	* vms-alpha.c (alpha_vms_bfd_lookup_section_flag): New definition.
	* xsym.c (bfd_sym_bfd_lookup_section_flags): New definition.

ld/ChangeLog
2011-07-11  Catherine Moore  <clm@@codesourcery.com>

	* ld.h (section_flag_list): Add field to struct wildcard_spec.
	* ld.texinfo (INPUT_SECTION_FLAGS): Document.
	* ldgram.y (flag_info_list, flag_info): Add to union.
	(INPUT_SECTION_FLAGS): New token.
	(wildcard_spec): Initialize section_flag_list to NULL for
	each alternative.
	(sect_flag_list, sect_flags): New rules.
	(input_section_spec_no_keep): Add alternatives to recognize
	sect_flags.
	* ldlang.c (walk_wild_consider_section): Initialize
	section_flag_info field of the section struct.
	(lang_add_section): Check input section flags.
	(lang_add_wild): Initialize section_flag_list field of
	the statement struct.
	* ldlang.h (lang_input_statement_struct): Add section_flag_list field.
	(lang_wild_statement_struct): Likewise.
	* ldlex.l (INPUT_SECTION_FLAGS): New token.
	* mri.c (mri_draw_tree): Initialize section_flag_list to NULL.
	* NEWS: Announce INPUT_SECTION_FLAGS enhancement.

ld/testsuite/ChangeLog
2011-07-11 Catherine Moore  <clm@@cm00re.com>

	* ld-scripts/section-flags-1.s: New.
	* ld-scripts/section-flags-1.t: New.
	* ld-scripts/section-flags-2.s: New.
	* ld-scripts/section-flags-2.t: New.
	* ld-scripts/section-flags.exp: New.
@
text
@d2713 1
d2971 1
@


1.88
log
@	* targets.c (bfd_target): Make ar_max_namelen an unsigned char.
	Add match_priority.
	* configure.in: Bump bfd version.
	* elfcode.h (elf_object_p): Delete hacks preventing match of
	EM_NONE and ELFOSABI_NONE targets when a better match exists.
	* elfxx-target.h (elf_match_priority): Define and use.
	* format.c (bfd_check_format_matches): Use target match_priority
	to choose best of multiple matching targets.  In cases with multiple
	matches rerun _bfd_check_format if we don't choose the last match.
	* aout-adobe.c, * aout-arm.c, * aout-target.h, * aout-tic30.c,
	* binary.c, * bout.c, * coff-alpha.c, * coff-i386.c, * coff-i860.c,
	* coff-i960.c, * coff-ia64.c, * coff-mips.c, * coff-or32.c,
	* coff-ppc.c, * coff-rs6000.c, * coff-sh.c, * coff-tic30.c,
	* coff-tic54x.c, * coff-x86_64.c, * coff64-rs6000.c, * coffcode.h,
	* i386msdos.c, * i386os9k.c, * ieee.c, * ihex.c, * mach-o-target.c,
	* mipsbsd.c, * mmo.c, * nlm-target.h, * oasys.c, * pdp11.c,
	* pe-mips.c, * pef.c, * plugin.c, * ppcboot.c, * som.c, * srec.c,
	* tekhex.c, * trad-core.c, * verilog.c, * versados.c, * vms-alpha.c,
	* vms-lib.c, * xsym.c: Init match_priority field.
	* configure: Regenerate.
	* bfd-in2.h: Regenerate.
@
text
@d2741 1
d2998 1
@


1.87
log
@include/coff
2011-05-04  Tristan Gingold  <gingold@@adacore.com>

	* rs6000.h (union external_auxent): Add x_ftype field.
	* rs6k64.h: (struct external_auxent): Remap x_file field.


bfd/
2011-04-28  Tristan Gingold  <gingold@@adacore.com>

	* coff-rs6000.c (_bfd_xcoff_swap_aux_in): Adjust for x_file.
	(bfd_xcoff_swap_aux_out): Ditto.
	* coff64-rs6000.c (_bfd_xcoff64_swap_aux_in): Ditto.
	(bfd_xcoff64_swap_aux_out): Ditto.
@
text
@d3 1
a3 1
   2010
d2625 1
d2881 1
@


1.86
log
@2011-04-26  Tristan Gingold  <gingold@@adacore.com>

	* coff64-rs6000.c: Convert to ISO-C.  Remove PARAMS and PTR macros.
@
text
@d356 1
a356 1
      if (ext->x_file.x_n.x_zeroes[0] == 0)
d359 2
a360 1
	  in->x_file.x_n.x_offset = H_GET_32 (abfd, ext->x_file.x_n.x_offset);
d364 1
a364 1
	  memcpy (in->x_file.x_fname, ext->x_file.x_fname, FILNMLEN);
d448 3
a450 2
	  H_PUT_32 (abfd, 0, ext->x_file.x_n.x_zeroes);
	  H_PUT_32 (abfd, in->x_file.x_n.x_offset, ext->x_file.x_n.x_offset);
d454 1
a454 1
	  memcpy (ext->x_file.x_fname, in->x_file.x_fname, FILNMLEN);
@


1.85
log
@2010-08-18  Pedro Alves  <pedro@@codesourcery.com>

	PR corefile/8210

	bfd/
	* bfd-in2.h: Regenerate.
	* corefile.c (bfd_core_file_pid): New.

	* targets.c (BFD_JUMP_TABLE_CORE): Add NAME##_core_file_pid.
	(struct bfd_target) <_core_file_pid>: New.

	* libbfd-in.h (_bfd_nocore_core_file_pid): Declare.
	* libbfd.c (_bfd_nocore_core_file_pid): New.

	* elf-bfd.h (bfd_elf32_core_file_pid, bfd_elf64_core_file_pid):
	Declare.
	* elfcode.h (elf_core_file_pid): New define.
	* elfcore.h (elf_core_file_pid): New function.

	* elf.c (elfcore_make_pid): Rewrite.
	(elfcore_grok_prstatus): Only set core_pid if not set yet.
	(elfcore_grok_prstatus) [!HAVE_PRSTATUS_T_PR_WHO]: Fallback to
	getting the lwpid from prstat.pr_pid.

	* elf64-x86-64.c (elf64_x86_64_grok_prstatus): Write the LWPID to
	elf_tdata's core_lwpid instead of to core_pid.
	(elf64_x86_64_grok_psinfo): Extract the the main process's PID,
	and store it in elf_tdata's core_pid field.
	* elf32-i386.c (elf_i386_grok_prstatus): Write the LWPID to
	elf_tdata's core_lwpid instead of to core_pid.
	(elf_i386_grok_psinfo): Extract the the main process's PID, and
	store it in elf_tdata's core_pid field.

	* elf32-am33lin.c (elf32_am33lin_grok_prstatus): Write the LWPID
	to elf_tdata's core_lwpid instead of to core_pid.
	* elf32-arm.c (elf32_arm_nabi_grok_prstatus): Write the LWPID to
	elf_tdata's core_lwpid instead of to core_pid.
	* elf32-cris.c (cris_elf_grok_prstatus): Write the LWPID to
	elf_tdata's core_lwpid instead of to core_pid.
	* elf32-frv.c (elf32_frv_grok_prstatus): Write the LWPID to
	elf_tdata's core_lwpid instead of to core_pid.
	* elf32-hppa.c (elf32_hppa_grok_prstatus): Write the LWPID to
	elf_tdata's core_lwpid instead of to core_pid.
	* elf32-mips.c (elf32_mips_grok_prstatus): Write the LWPID to
	elf_tdata's core_lwpid instead of to core_pid.
	* elf32-ppc.c (ppc_elf_grok_prstatus): Write the LWPID to
	elf_tdata's core_lwpid instead of to core_pid.
	* elf32-s390.c (elf_s390_grok_prstatus): Write the LWPID to
	elf_tdata's core_lwpid instead of to core_pid.
	* elf32-score.c (s3_bfd_score_elf_grok_prstatus): Write the LWPID
	to elf_tdata's core_lwpid instead of to core_pid.
	* elf32-score7.c (s7_bfd_score_elf_grok_prstatus): Write the LWPID
	to elf_tdata's core_lwpid instead of to core_pid.
	* elf32-sh.c (elf32_shlin_grok_prstatus): Write the LWPID to
	elf_tdata's core_lwpid instead of to core_pid.
	* elf32-xtensa.c (elf_xtensa_grok_prstatus): Write the LWPID to
	elf_tdata's core_lwpid instead of to core_pid.
	* elf64-hppa.c (elf64_hppa_grok_prstatus): Write the LWPID to
	elf_tdata's core_lwpid instead of to core_pid.
	* elf64-mips.c (elf64_mips_grok_prstatus): Write the LWPID to
	elf_tdata's core_lwpid instead of to core_pid.
	* elf64-ppc.c (ppc64_elf_grok_prstatus): Write the LWPID to
	elf_tdata's core_lwpid instead of to core_pid.
	* elfn32-mips.c (elf32_mips_grok_prstatus): Write the LWPID to
	elf_tdata's core_lwpid instead of to core_pid.

	* plugin.c (bfd_plugin_core_file_pid): New function.
	* aout-target.h (MY_core_file_pid): Define.
	* aout-tic30.c (MY_core_file_pid, MY_core_file_p): New defines.
	* coff-rs6000.c (coff_core_file_pid): New define.
	(rs6000coff_vec, pmac_xcoff_vec): Use BFD_JUMP_TABLE_CORE.
	* coff64-rs6000.c (coff_core_file_pid): New define.
	(rs6000coff64_vec): Use BFD_JUMP_TABLE_CORE.
	(xcoff64_core_file_pid): New define.
	(aix5coff64_vec): Use BFD_JUMP_TABLE_CORE.
	* mach-o-target.c (bfd_mach_o_core_file_pid): New define.
	* aix386-core.c (aix386_core_file_pid): New define.
	* hppabsd-core.c (hppabsd_core_core_file_pid): New define.
	* hpux-core.c (hpux_core_core_file_pid): New define.
	* irix-core.c (irix_core_core_file_pid): New define.
	* lynx-core.c (lynx_core_file_pid): New define.
	* osf-core.c (osf_core_core_file_pid): New define.
	* ptrace-core.c (ptrace_unix_core_file_pid): New define.
	* sco5-core.c (sco5_core_file_pid): New define.
	* xcoff-target.h (coff_core_file_pid): New define.
	* netbsd-core.c (netbsd_core_core_file_pid): New define.

gdb/
2010-08-18  Pedro Alves  <pedro@@codesourcery.com>

	PR corefile/8210

	gdb/
	* corelow.c (add_to_thread_list): Don't use
	gdbarch_core_reg_section_encodes_pid.  Use bfd_core_file_pid.
	(get_core_register_section): Don't use
	gdbarch_core_reg_section_encodes_pid.

	* gdbarch.sh (core_reg_section_encodes_pid): Delete.
	* gdbarch.h, gdbarch.c: Regenerate.
	* amd64-sol2-tdep.c (amd64_sol2_init_abi): Don't set
	gdbarch_core_reg_section_encodes_pid.
	* i386-sol2-tdep.c (i386_sol2_init_abi): Ditto.
	* sparc-sol2-tdep.c (sparc32_sol2_init_abi): Ditto.
	* sparc64-sol2-tdep.c (sparc64_sol2_init_abi): Ditto.
@
text
@d88 1
a88 1
  PARAMS ((bfd *, PTR, PTR));
d90 1
a90 1
  PARAMS ((bfd *, PTR, PTR));
d92 1
a92 2
  PARAMS ((bfd *, struct bfd_strtab_hash *, struct internal_syment *,
	   const char *));
d94 1
a94 2
  PARAMS ((bfd *, struct xcoff_loader_info *, struct internal_ldsym *,
	   const char *));
d96 1
a96 1
  PARAMS ((bfd *, PTR, PTR));
d98 1
a98 1
  PARAMS ((bfd *, PTR, PTR));
d100 1
a100 1
  PARAMS ((bfd *, PTR, int, int, int, int, PTR));
d102 1
a102 1
  PARAMS ((bfd *, PTR, int, int, int, int, PTR));
d104 1
a104 1
  PARAMS ((bfd *, PTR, PTR));
d106 1
a106 1
  PARAMS ((bfd *, PTR, PTR));
d108 1
a108 1
  PARAMS ((bfd *));
d110 1
a110 1
  PARAMS ((bfd *, bfd *));
d112 1
a112 1
  PARAMS ((bfd *, const char *));
d114 1
a114 1
  PARAMS ((arelent *, struct internal_reloc *));
d116 1
a116 1
  PARAMS ((bfd *, bfd_reloc_code_real_type));
d118 3
a120 3
  PARAMS ((bfd *));
extern PTR _bfd_xcoff_read_ar_hdr
  PARAMS ((bfd *));
d122 1
a122 1
  PARAMS ((bfd *, bfd *));
d124 1
a124 1
  PARAMS ((bfd *, struct stat *));
d126 1
a126 1
  PARAMS ((bfd *, unsigned int, struct orl *, unsigned int, int));
d128 1
a128 1
  PARAMS ((bfd *));
d130 1
a130 1
  PARAMS ((bfd *, struct bfd_link_info *));
d132 1
a132 1
  PARAMS ((bfd *, PTR, PTR));
d134 1
a134 1
  PARAMS ((bfd *, PTR, PTR));
d136 1
a136 1
  PARAMS ((bfd *, PTR, int, int, int, int, PTR));
d138 1
a138 1
  PARAMS ((bfd *, PTR, int, int, int, int, PTR));
d140 1
a140 1
  PARAMS ((bfd *, const PTR, struct internal_ldhdr *));
d142 1
a142 1
  PARAMS ((bfd *, const struct internal_ldhdr *, PTR d));
d144 1
a144 1
  PARAMS ((bfd *, const PTR, struct internal_ldsym *));
d146 1
a146 1
  PARAMS ((bfd *, const struct internal_ldsym *, PTR d));
d148 1
a148 1
  PARAMS ((bfd *, const PTR, struct internal_ldrel *));
d150 1
a150 1
  PARAMS ((bfd *, const struct internal_ldrel *, PTR d));
d152 1
a152 1
  PARAMS ((bfd *));
d154 3
a156 3
  PARAMS ((bfd *, struct bfd_link_info *, bfd *, asection *, bfd_byte *,
	   struct internal_reloc *, struct internal_syment *,
	   asection **));
d158 1
a158 1
  PARAMS ((bfd *));
d160 1
a160 1
  PARAMS ((bfd *));
d162 1
a162 1
  PARAMS ((bfd *, bfd *));
d164 1
a164 1
  PARAMS ((bfd *, struct bfd_link_info *));
d166 1
a166 1
  PARAMS ((bfd *, union internal_auxent *, const char *));
d168 1
a168 1
  PARAMS ((bfd *, bfd_vma));
d170 1
a170 1
  PARAMS ((bfd *, bfd_vma));
d172 1
a172 1
  PARAMS ((bfd *, struct internal_ldhdr *));
d174 1
a174 1
  PARAMS ((bfd *, struct internal_ldhdr *));
d176 1
a176 1
  PARAMS ((bfd *, const char *, const char *, bfd_boolean));
d178 1
a178 1
  PARAMS ((bfd *, PTR ));
d182 1
a182 1
  PARAMS ((XCOFF_RELOC_FUNCTION_ARGS));
d185 1
a185 1
  PARAMS ((XCOFF_RELOC_FUNCTION_ARGS)) =
d243 1
a243 1
  PARAMS ((bfd *abfd));
d245 1
a245 1
  PARAMS ((bfd *cbfd, bfd *ebfd));
d247 1
a247 1
  PARAMS ((bfd *abfd));
d249 1
a249 1
  PARAMS ((bfd *abfd));
d287 1
a287 4
_bfd_xcoff64_swap_lineno_in (abfd, ext1, in1)
     bfd *abfd;
     PTR ext1;
     PTR in1;
d300 1
a300 4
_bfd_xcoff64_swap_lineno_out (abfd, inp, outp)
     bfd *abfd;
     PTR inp;
     PTR outp;
d317 1
a317 4
_bfd_xcoff64_swap_sym_in (abfd, ext1, in1)
     bfd *abfd;
     PTR ext1;
     PTR in1;
d332 1
a332 4
_bfd_xcoff64_swap_sym_out (abfd, inp, extp)
     bfd *abfd;
     PTR inp;
     PTR extp;
d347 2
a348 8
_bfd_xcoff64_swap_aux_in (abfd, ext1, type, in_class, indx, numaux, in1)
     bfd *abfd;
     PTR ext1;
     int type;
     int in_class;
     int indx;
     int numaux;
     PTR in1;
d433 4
a436 8
_bfd_xcoff64_swap_aux_out (abfd, inp, type, in_class, indx, numaux, extp)
     bfd *abfd;
     PTR inp;
     int type;
     int in_class;
     int indx ATTRIBUTE_UNUSED;
     int numaux ATTRIBUTE_UNUSED;
     PTR extp;
d441 1
a441 1
  memset ((PTR) ext, 0, bfd_coff_auxesz (abfd));
d520 3
a522 5
_bfd_xcoff64_put_symbol_name (abfd, strtab, sym, name)
     bfd *abfd;
     struct bfd_strtab_hash *strtab;
     struct internal_syment *sym;
     const char *name;
d544 4
a547 5
_bfd_xcoff64_put_ldsymbol_name (abfd, ldinfo, ldsym, name)
     bfd *abfd ATTRIBUTE_UNUSED;
     struct xcoff_loader_info *ldinfo;
     struct internal_ldsym *ldsym;
     const char *name;
d591 3
a593 4
xcoff64_swap_ldhdr_in (abfd, s, dst)
     bfd *abfd;
     const PTR s;
     struct internal_ldhdr *dst;
d612 1
a612 4
xcoff64_swap_ldhdr_out (abfd, src, d)
     bfd *abfd;
     const struct internal_ldhdr *src;
     PTR d;
d631 1
a631 4
xcoff64_swap_ldsym_in (abfd, s, dst)
     bfd *abfd;
     const PTR s;
     struct internal_ldsym *dst;
d650 1
a650 4
xcoff64_swap_ldsym_out (abfd, src, d)
     bfd *abfd;
     const struct internal_ldsym *src;
     PTR d;
d664 1
a664 4
xcoff64_swap_reloc_in (abfd, s, d)
     bfd *abfd;
     PTR s;
     PTR d;
d678 1
a678 4
xcoff64_swap_reloc_out (abfd, s, d)
     bfd *abfd;
     PTR s;
     PTR d;
d694 1
a694 4
xcoff64_swap_ldrel_in (abfd, s, dst)
     bfd *abfd;
     const PTR s;
     struct internal_ldrel *dst;
d707 1
a707 4
xcoff64_swap_ldrel_out (abfd, src, d)
     bfd *abfd;
     const struct internal_ldrel *src;
     PTR d;
d718 1
a718 2
xcoff64_write_object_contents (abfd)
     bfd *abfd;
d729 3
a731 3
  asection *text_sec = ((void *) 0);
  asection *data_sec = ((void *) 0);
  asection *bss_sec = ((void *) 0);
d851 1
a851 1
	  || bfd_bwrite ((PTR) (&buff), amount, abfd) != amount)
d1034 2
a1035 2
    bfd_coff_swap_filehdr_out (abfd, (PTR) &internal_f, (PTR) buff);
    amount = bfd_bwrite ((PTR) buff, amount, abfd);
d1052 2
a1053 2
      bfd_coff_swap_aouthdr_out (abfd, (PTR) &internal_a, (PTR) buff);
      amount = bfd_bwrite ((PTR) buff, amount, abfd);
d1065 10
a1074 12
xcoff64_reloc_type_br (input_bfd, input_section, output_bfd, rel, sym, howto,
		       val, addend, relocation, contents)
     bfd *input_bfd;
     asection *input_section;
     bfd *output_bfd ATTRIBUTE_UNUSED;
     struct internal_reloc *rel;
     struct internal_syment *sym ATTRIBUTE_UNUSED;
     struct reloc_howto_struct *howto;
     bfd_vma val;
     bfd_vma addend;
     bfd_vma *relocation;
     bfd_byte *contents;
d1172 8
a1179 11
xcoff64_ppc_relocate_section (output_bfd, info, input_bfd,
			      input_section, contents, relocs, syms,
			      sections)
     bfd *output_bfd;
     struct bfd_link_info *info;
     bfd *input_bfd;
     asection *input_section;
     bfd_byte *contents;
     struct internal_reloc *relocs;
     struct internal_syment *syms;
     asection **sections;
d1777 1
a1777 3
xcoff64_rtype2howto (relent, internal)
     arelent *relent;
     struct internal_reloc *internal;
d1814 2
a1815 3
xcoff64_reloc_type_lookup (abfd, code)
     bfd *abfd ATTRIBUTE_UNUSED;
     bfd_reloc_code_real_type code;
d1858 1
a1858 2
xcoff64_slurp_armap (abfd)
     bfd *abfd;
d1890 1
a1890 1
  if (bfd_bread ((PTR) &hdr, (bfd_size_type) SIZEOF_AR_HDR_BIG, abfd)
d1906 1
a1906 1
  if (bfd_bread ((PTR) contents, sz, abfd) != sz)
d1953 1
a1953 2
xcoff64_archive_p (abfd)
     bfd *abfd;
d1961 1
a1961 1
  if (bfd_bread ((PTR) magic, amt, abfd) != amt)
d1979 1
a1979 1
  if (bfd_bread ((PTR) &hdr.memoff, amt, abfd) != amt)
d2026 1
a2026 3
xcoff64_openr_next_archived_file (archive, last_file)
     bfd *archive;
     bfd *last_file;
a2081 2


d2083 2
a2084 4
xcoff64_create_csect_from_smclas (abfd, aux, symbol_name)
     bfd *abfd;
     union internal_auxent *aux;
     const char *symbol_name;
d2118 2
a2119 3
xcoff64_is_lineno_count_overflow (abfd, value)
     bfd *abfd ATTRIBUTE_UNUSED;
     bfd_vma value ATTRIBUTE_UNUSED;
d2125 2
a2126 3
xcoff64_is_reloc_count_overflow (abfd, value)
     bfd *abfd ATTRIBUTE_UNUSED;
     bfd_vma value ATTRIBUTE_UNUSED;
d2132 2
a2133 3
xcoff64_loader_symbol_offset (abfd, ldhdr)
     bfd *abfd ATTRIBUTE_UNUSED;
     struct internal_ldhdr *ldhdr;
d2139 2
a2140 3
xcoff64_loader_reloc_offset (abfd, ldhdr)
     bfd *abfd ATTRIBUTE_UNUSED;
     struct internal_ldhdr *ldhdr;
d2146 1
a2146 3
xcoff64_bad_format_hook (abfd, filehdr)
     bfd * abfd;
     PTR filehdr;
d2161 2
a2162 5
xcoff64_generate_rtinit (abfd, init, fini, rtld)
     bfd *abfd;
     const char *init;
     const char *fini;
     bfd_boolean rtld;
d2754 1
a2754 1
    (void *) &bfd_xcoff_backend_data,
d2758 1
a2758 1
  PARAMS ((bfd *));
d2760 1
a2760 1
  PARAMS ((bfd *, bfd *));
d2762 1
a2762 1
  PARAMS ((bfd *));
d2764 2
a2765 3
  PARAMS ((bfd *));
#define xcoff64_core_file_pid \
  _bfd_nocore_core_file_pid
d3009 1
a3009 1
    (void *) & bfd_xcoff_aix5_backend_data,
@


1.84
log
@Update copyright year.

2010-03-24  H.J. Lu  <hongjiu.lu@@intel.com>

	* aout-target.h: Update copyright year.
	* aout-tic30.c: Likewise.
	* coff-alpha.c: Likewise.
	* coff-rs6000.c: Likewise.
	* coff64-rs6000.c: Likewise.
	* elf64-mips.c: Likewise.
	* ieee.c: Likewise.
	* libecoff.h: Likewise.
	* mach-o-target.c: Likewise.
	* mach-o.c: Likewise.
	* oasys.c: Likewise.
	* targets.c: Likewise.
@
text
@d259 2
d269 2
d2760 1
a2760 3
    coff_core_file_failing_command,
    coff_core_file_failing_signal,
    coff_core_file_matches_executable_p,
d2840 2
d3016 1
a3016 3
    xcoff64_core_file_failing_command,
    xcoff64_core_file_failing_signal,
    xcoff64_core_file_matches_executable_p,
@


1.83
log
@2010-01-26  Tristan Gingold  <gingold@@adacore.com>

	* targets.c (BFD_JUMP_TABLE_ARCHIVE): Add initializer for write_ar_hdr.
	(bfd_target): Add _bfd_write_ar_hdr_fn field.
	* archive.c (is_bsd44_extended_name): New macro.
	(_bfd_generic_read_ar_hdr_mag): Use it.  Add extra_size.
	(bfd_slurp_armap): Also check for "__.SYMDEF" as a BSD4.4 extended
	name.
	(_bfd_archive_bsd44_construct_extended_name_table): New function.
	(_bfd_generic_write_ar_hdr): Ditto.
	(_bfd_bsd44_write_ar_hdr): Ditto.
	(_bfd_write_archive_contents): Call _bfd_write_ar_hdr.
	(bsd_write_armap): Adjust firstreal computation.
	* libbfd-in.h (struct areltdata): Add extra_size field.
	(_bfd_generic_write_ar_hdr): Add prototype.
	(_bfd_bsd44_write_ar_hdr): Ditto.
	(_bfd_write_ar_hdr): Define.
	(_bfd_noarchive_write_ar_hdr): Ditto.
	(_bfd_archive_bsd_write_ar_hdr): Ditto.
	(_bfd_archive_coff_write_ar_hdr): Ditto.
	(_bfd_archive_bsd44_slurp_armap): Ditto.
	(_bfd_archive_bsd44_slurp_extended_name_table): Ditto.
	(_bfd_archive_bsd44_construct_extended_name_table): New prototype.
	(_bfd_archive_bsd44_truncate_arname): Ditto.
	(_bfd_archive_bsd44_write_armap): Ditto.
	(_bfd_archive_bsd44_read_ar_hdr): Ditto.
	(_bfd_archive_bsd44_write_ar_hdr): Ditto.
	(_bfd_archive_bsd44_openr_next_archived_file): Ditto.
	(_bfd_archive_bsd44_get_elt_at_index): Ditto.
	(_bfd_archive_bsd44_generic_stat_arch_elt): Ditto.
	(_bfd_archive_bsd44_update_armap_timestamp): Ditto.
	* libbfd.h: Regenerate.
	* oasys.c (oasys_write_ar_hdr): Define.
	* libecoff.h (_bfd_ecoff_write_ar_hdr): Define.
	* ieee.c (ieee_write_ar_hdr): Define.
	* elf64-mips.c (bfd_elf64_archive_write_ar_hdr): Define.
	* coff-rs6000.c (rs6000coff_vec): Adjust for write_ar_hdr field.
	(bfd_pmac_xcoff_backend_data): Ditto.
	* coff64-rs6000.c (rs6000coff64_vec): Ditto.
	(bfd_xcoff_aix5_backend_data): Ditto.
	* coff-alpha.c (alpha_ecoff_write_ar_hdr): Define.
	* aout-target.h (MY_write_ar_hdr): Define it if not defined.
	* aout-tic30.c (MY_write_ar_hdr): Ditto.
	* mach-o-target.c (TARGET_NAME): Use _bfd_archive_bsd44 archive.
	(bfd_mach_o_mkarchive, bfd_mach_o_read_ar_hdr)
	(bfd_mach_o_slurp_armap, bfd_mach_o_slurp_extended_name_table)
	(bfd_mach_o_construct_extended_name_table)
	(bfd_mach_o_truncate_arname, bfd_mach_o_write_armap)
	(bfd_mach_o_get_elt_at_index, bfd_mach_o_generic_stat_arch_elt)
	(bfd_mach_o_update_armap_timestamp): Moved to mach-o.c
	* mach-o.c (bfd_mach_o_mkarchive, bfd_mach_o_read_ar_hdr)
	(bfd_mach_o_slurp_armap, bfd_mach_o_slurp_extended_name_table)
	(bfd_mach_o_construct_extended_name_table)
	(bfd_mach_o_truncate_arname, bfd_mach_o_write_armap)
	(bfd_mach_o_get_elt_at_index, bfd_mach_o_generic_stat_arch_elt)
	(bfd_mach_o_update_armap_timestamp): Moved from mach-o-target.c
	* bfd-in2.h: Regenerate.
@
text
@d2 2
a3 1
   Copyright 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009
@


1.82
log
@bfd/
	* coff-rs6000.c (xcoff_howto_table): Change size to 0 and bitsize to 1.
	(_bfd_xcoff_reloc_type_lookup): Handle BFD_RELOC_NONE.
	* coff64-rs6000.c (xcoff64_howto_table): Change size to 0 and
	bitsize to 1.
	(xcoff64_reloc_type_lookup): Handle BFD_RELOC_NONE.

gas/
	* write.h (fix_at_start): Declare.
	* write.c (fix_new_internal): Add at_beginning parameter.
	Use it instead of REVERSE_SORT_RELOCS.  Fix the handling of
	seg_fix_tailP for the at_beginning/REVERSE_SORT_RELOCS case.
	(fix_new, fix_new_exp): Update accordingly.
	(fix_at_start): New function.
	* config/tc-ppc.c (md_pseudo_table): Add .ref to the OBJ_XCOFF section.
	(ppc_ref): New function, for OBJ_XCOFF.
	(md_apply_fix): Handle BFD_RELOC_NONE for OBJ_XCOFF.
	* config/te-i386aix.h (REVERSE_SORT_RELOCS): Remove #undef.

gas/testsuite/
	* gas/ppc/xcoff-ref-1.s, gas/ppc/xcoff-ref-1.l: New test.
	* gas/ppc/aix.exp: Run it.


ld/testsuite/
	* ld-powerpc/aix-ref-1-32.od, ld-powerpc/aix-ref-1-64.od,
	ld-powerpc/aix-ref-1.s: New tests.
	* ld-powerpc/aix52.exp: Run them.
@
text
@d2766 1
d3022 1
@


1.81
log
@2009-11-23  Paul Brook  <paul@@codesourcery.com>

	ld/
	* ldexp.c: Copy symbol type for simple assignments.

	bfd/
	* libbfd-in.h (_bfd_generic_copy_link_hash_symbol_type): Add
	prototype.
	* elf-bfd.h (_bfd_elf_copy_link_hash_symbol_type): Add prototype.
	* linker.c (_bfd_generic_copy_link_hash_symbol_type): New function.
	* elflink.c (_bfd_elf_copy_link_hash_symbol_type): New function.
	* targets.c (BFD_JUMP_TABLE_LINK, struct bfd_target): Add
	_copy_link_hash_symbol_type.
	* bfd/coff64-rs6000.c (rs6000coff64_vec, aix5coff64_vec): Add
	_bfd_generic_copy_link_hash_symbol_type.
	* bfd/coff-rs6000.c (rs6000coff_vec, pmac_xcoff_vec): Add
	_bfd_generic_copy_link_hash_symbol_type.
	* aout-adobe.c (aout_32_bfd_copy_link_hash_symbol_type): Define.
	* aout-target.h (MY_bfd_copy_link_hash_symbol_type): Define.
	* aout-tic30.c (MY_bfd_copy_link_hash_symbol_type): Define.
	* binary.c (binary_bfd_copy_link_hash_symbol_type): Define.
	* bout.c (b_out_bfd_copy_link_hash_symbol_type): Define.
	* coffcode.h (coff_bfd_copy_link_hash_symbol_type): Define.
	* elfxx-target.h (bfd_elfNN_bfd_copy_link_hash_symbol_type): Define.
	* i386msdos.c (msdos_bfd_copy_link_hash_symbol_type): Define.
	* i386os9k.c (os9k_bfd_copy_link_hash_symbol_type): Define.
	* ieee.c (ieee_bfd_copy_link_hash_symbol_type): Define.
	* ihex.c (ihex_bfd_copy_link_hash_symbol_type): Define.
	* libecoff.h (_bfd_ecoff_bfd_copy_link_hash_symbol_type): Define.
	* mach-o.c (bfd_mach_o_bfd_copy_link_hash_symbol_type): Define.
	* mmo.c (mmo_bfd_copy_link_hash_symbol_type): Define.
	* nlm-target.h (nlm_bfd_copy_link_hash_symbol_type): Define.
	* oasys.c (oasys_bfd_copy_link_hash_symbol_type): Define.
	* pef.c (bfd_pef_bfd_copy_link_hash_symbol_type): Define.
	* ppcboot.c (ppcboot_bfd_copy_link_hash_symbol_type): Define.
	* som.c (som_bfd_copy_link_hash_symbol_type): Define.
	* srec.c (srec_bfd_copy_link_hash_symbol_type): Define.
	* tekhex.c (tekhex_bfd_copy_link_hash_symbol_type): Define.
	* versados.c (versados_bfd_copy_link_hash_symbol_type): Define.
	* vms.c (vms_bfd_copy_link_hash_symbol_type): Define.
	* xsym.c (bfd_sym_bfd_copy_link_hash_symbol_type): Define.
	* bfd-in2.h: Regenerate.
	* libbfd.h: Regenerate.

	ld/testsuite
	* ld-arm/script-type.sym: New test.
	* ld-arm/script-type.s: New test.
	* ld-arm/script-type.s: New test.
@
text
@d1597 1
a1597 1
  /* Non-relocating reference.	*/
d1600 2
a1601 2
	 2,			/* size (0 = byte, 1 = short, 2 = long) */
	 32,			/* bitsize */
d1885 2
@


1.80
log
@2009-11-19  Tristan Gingold  <gingold@@adacore.com>

	* coff-rs6000.c (rs6000coff_vec): Use generic routines instead of
	hard-coded casts.
	(pmac_xcoff_vec): Ditto.
	* coff64-rs6000.c (rs6000coff64_vec): Ditto.
	(aix5coff64_vec): Ditto.
@
text
@d2803 1
d3058 1
@


1.79
log
@        * bfd/coff-arm.c (coff_arm_relocate_section)
        (record_thumb_to_arm_glue, bfd_arm_process_before_allocation):
        Change member name class to symbol_class.
        * bfd/coff-i960.c (coff_i960_relocate_section) Rename variable
        class to class_val. Change member name class to symbol_class.
        * bfd/coff-rs6000.c (_bfd_xcoff_swap_aux_in)
        (_bfd_xcoff_swap_aux_out): Rename arguments class to in_class.
        * bfd/coff-stgo32.c (adjust_aux_in_post)
        (adjust_aux_out_pre, adjust_aux_out_post): Rename arguments class
        to in_class.
        * bfd/coff64-rs6000.c (_bfd_xcoff64_swap_aux_in)
        (_bfd_xcoff64_swap_aux_out): Rename arguments class to in_class.
        * bfd/coffcode.h (coff_pointerize_aux_hook): Rename variable class
        to n_sclass.
        * bfd/coffgen.c (coff_write_symbol, coff_pointerize_aux): Rename
        variables named class to n_sclass. (coff_write_symbols): Rename
        variable class to sym_class. (bfd_coff_set_symbol_class): Rename
        argument class to symbol_class.
        * bfd/cofflink.c (_bfd_coff_link_hash_newfunc)
        (coff_link_add_symbols, _bfd_coff_link_input_bfd)
        (_bfd_coff_write_global_sym, _bfd_coff_generic_relocate_section):
        Update code to use renamed members.
        * bfd/coffswap.h (coff_swap_aux_in, coff_swap_aux_out): Rename
        argument class to in_class.
        * bfd/libcoff-in.h (struct coff_link_hash_entry, struct
        coff_debug_merge_type) Renamed members class to symbol_class and
        type_class.
        * bfd/libcoff.h Regenerated.
        * bfd/peXXigen.c: (_bfd_XXi_swap_aux_in, _bfd_XXi_swap_aux_out):
        Rename argument class to in_class.
        * bfd/pef.c (bfd_pef_parse_imported_symbol): Update code to use
        renamed members.
        * bfd/pef.h (struct bfd_pef_imported_symbol): Changed name of
        member class to symbol_class.
        * binutils/ieee.c (ieee_read_cxx_misc, ieee_read_cxx_class)
        (ieee_read_reference): Rename variables named class to cxxclass.
        * gas/config/tc-arc.c (struct syntax_classes): Rename member class
        to s_class. (arc_extinst): Rename variable class to
        s_class. Update code to use renamed members.
        * gas/config/tc-mips.c (insn_uses_reg): Rename argument class to
        regclass.
        * gas/config/tc-ppc.c (ppc_csect, ppc_change_csect, ppc_function)
        (ppc_tc, ppc_is_toc_sym, ppc_symbol_new_hook, ppc_frob_label)
        (ppc_fix_adjustable, md_apply_fix): Update code to use renamed
        members.
        * gas/config/tc-ppc.h (struct ppc_tc_sy): Change name of member
        from class to symbol_class. (OBJ_COPY_SYMBOL_ATTRIBUTES): Update
        code to use renamed members.
        * gas/config/tc-score.c (s3_adjust_paritybit): Rename argument
        class to i_class.
        * gas/config/tc-score7.c (s7_adjust_paritybit): Rename argument
        class to i_class.
        * gprof/corefile.c (core_create_function_syms): Rename variable
        class to cxxclass.
        * include/coff/ti.h (GET_LNSZ_SIZE, PUT_LNSZ_SIZE): Updated name
        of class variable to in_class to match changes in function that
        use this macro.
        * include/opcode/ia64.h (struct ia64_operand): Renamed member
        class to op_class
        * ld/emultempl/elf32.em (gld${EMULATION_NAME}_load_symbols)
        (gld${EMULATION_NAME}_try_needed): Rename variable class to
        link_class
        * opcodes/ia64-dis.c (print_insn_ia64): Update code to use renamed
        member.
        * opcodes/m88k-dis.c (m88kdis): Rename variable class to in_class.
        * opcodes/tic80-opc.c (tic80_symbol_to_value)
        (tic80_value_to_symbol): Rename argument class to symbol_class.
@
text
@d2744 1
a2744 1
    ((bfd_boolean (*) (bfd *, bfd *)) bfd_true),
d2746 5
a2750 5
    ((bfd_boolean (*) (bfd *, asection *, bfd *, asection *)) bfd_true),
    ((bfd_boolean (*) (bfd *, asymbol *, bfd *, asymbol *)) bfd_true),
    ((bfd_boolean (*) (bfd *, bfd *)) bfd_true),
    ((bfd_boolean (*) (bfd *, flagword)) bfd_true),
    ((bfd_boolean (*) (bfd *, void * )) bfd_true),
d2759 2
a2760 2
    bfd_false,
    ((bfd_boolean (*) (bfd *, char **, bfd_size_type *, const char **)) bfd_false),
d2998 1
a2998 1
    ((bfd_boolean (*) (bfd *, bfd *)) bfd_true),
d3000 5
a3004 5
    ((bfd_boolean (*) (bfd *, asection *, bfd *, asection *)) bfd_true),
    ((bfd_boolean (*) (bfd *, asymbol *, bfd *, asymbol *)) bfd_true),
    ((bfd_boolean (*) (bfd *, bfd *)) bfd_true),
    ((bfd_boolean (*) (bfd *, flagword)) bfd_true),
    ((bfd_boolean (*) (bfd *, void * )) bfd_true),
d3013 2
a3014 2
    bfd_false,
    ((bfd_boolean (*) (bfd *, char **, bfd_size_type *, const char **)) bfd_false),
@


1.78
log
@bfd/
	* aout-adobe.c (aout_32_bfd_define_common_symbol): Define.
	* aout-target.h (MY_bfd_define_common_symbol): Likewise.
	* aout-tic30.c (MY_bfd_define_common_symbol): Likewise.
	* binary.c (binary_bfd_define_common_symbol): Likewise.
	* bout.c (b_out_bfd_define_common_symbol): Likewise.
	* coff-alpha.c (_bfd_ecoff_bfd_define_common_symbol): Likewise.
	* coff-mips.c (_bfd_ecoff_bfd_define_common_symbol): Likewise.
	* coffcode.h (coff_bfd_define_common_symbol): Likewise.
	* elfxx-target.h (bfd_elfNN_bfd_define_common_symbol): Likewise.
	* i386msdos.c (msdos_bfd_define_common_symbol): Likewise.
	* i386os9k.c (os9k_bfd_define_common_symbol): Likewise.
	* ieee.c (ieee_bfd_define_common_symbol): Likewise.
	* ihex.c (ihex_bfd_define_common_symbol): Likewise.
	* libbfd-in.h (_bfd_nolink_bfd_define_common_symbol): Likewise.
	* mach-o.c (bfd_mach_o_bfd_define_common_symbol): Likewise.
	* mmo.c (mmo_bfd_define_common_symbol): Likewise.
	* nlm-target.h (nlm_bfd_define_common_symbol): Likewise.
	* oasys.c (oasys_bfd_define_common_symbol): Likewise.
	* pef.c (bfd_pef_bfd_define_common_symbol): Likewise.
	* ppcboot.c (ppcboot_bfd_define_common_symbol): Likewise.
	* som.c (som_bfd_define_common_symbol): Likewise.
	* srec.c (srec_bfd_define_common_symbol): Likewise.
	* tekhex.c (tekhex_bfd_define_common_symbol): Likewise.
	* versados.c (versados_bfd_define_common_symbol): Likewise.
	* vms.c (vms_bfd_define_common_symbol): Likewise.
	* xcoff-target.h (_bfd_xcoff_bfd_define_common_symbol): Likewise.
	* xsym.c (bfd_sym_bfd_define_common_symbol): Likewise.
	* coff-rs6000.c (rs6000coff_vec): Add _bfd_xcoff_define_common_symbol.
	(pmac_xcoff_vec): Likewise.
	* coff64-rs6000.c (rs6000coff64_vec): Likewise.
	(aix5coff64_vec): Likewise.
	* linker.c (bfd_generic_define_common_symbol): New function.
	* targets.c (BFD_JUMP_TABLE_LINK): Add NAME##_bfd_define_common_symbol.
	(_bfd_define_common_symbol): New field.
	* libcoff-in.h (_bfd_xcoff_define_common_symbol): Declare.
	* xcofflink.c (_bfd_xcoff_define_common_symbol): New function.
	(xcoff_build_ldsyms): Don't set XCOFF_DEF_REGULAR for common
	symbols here.
	* bfd-in2.h: Regenerate.
	* libbfd.h: Likewise.
	* libcoff.h: Likewise.

ld/
	* ldlang.c (lang_one_common): Use bfd_define_common_symbol.

ld/testsuite/
	* ld-powerpc/aix-export-2.s, ld-powerpc/aix-export-2.nd: New test.
	* ld-powerpc/aix52.exp: Run it.
@
text
@d356 1
a356 1
_bfd_xcoff64_swap_aux_in (abfd, ext1, type, class, indx, numaux, in1)
d360 1
a360 1
     int class;
d368 1
a368 1
  switch (class)
d423 2
a424 1
  if (class == C_BLOCK || class == C_FCN || ISFCN (type) || ISTAG (class))
d448 1
a448 1
_bfd_xcoff64_swap_aux_out (abfd, inp, type, class, indx, numaux, extp)
d452 1
a452 1
     int class;
d461 1
a461 1
  switch (class)
d510 2
a511 1
  if (class == C_BLOCK || class == C_FCN || ISFCN (type) || ISTAG (class))
@


1.78.6.1
log
@        * coff-arm.c (coff_arm_relocate_section)
        (record_thumb_to_arm_glue, bfd_arm_process_before_allocation):
        Change member name class to symbol_class.
        * coff-i960.c (coff_i960_relocate_section) Rename variable
        class to class_val. Change member name class to symbol_class.
        * coff-rs6000.c (_bfd_xcoff_swap_aux_in)
        (_bfd_xcoff_swap_aux_out): Rename arguments class to in_class.
        * coff-stgo32.c (adjust_aux_in_post)
        (adjust_aux_out_pre, adjust_aux_out_post): Rename arguments class
        to in_class.
        * coff64-rs6000.c (_bfd_xcoff64_swap_aux_in)
        (_bfd_xcoff64_swap_aux_out): Rename arguments class to in_class.
        * coffcode.h (coff_pointerize_aux_hook): Rename variable class
        to n_sclass.
        * coffgen.c (coff_write_symbol, coff_pointerize_aux): Rename
        variables named class to n_sclass. (coff_write_symbols): Rename
        variable class to sym_class. (bfd_coff_set_symbol_class): Rename
        argument class to symbol_class.
        * cofflink.c (_bfd_coff_link_hash_newfunc)
        (coff_link_add_symbols, _bfd_coff_link_input_bfd)
        (_bfd_coff_write_global_sym, _bfd_coff_generic_relocate_section):
        Update code to use renamed members.
        * coffswap.h (coff_swap_aux_in, coff_swap_aux_out): Rename
        argument class to in_class.
        * libcoff-in.h (struct coff_link_hash_entry, struct
        coff_debug_merge_type) Renamed members class to symbol_class and
        type_class.
        * libcoff.h Regenerated.
        * peXXigen.c: (_bfd_XXi_swap_aux_in, _bfd_XXi_swap_aux_out):
        Rename argument class to in_class.
        * pef.c (bfd_pef_parse_imported_symbol): Update code to use
        renamed members.
        * pef.h (struct bfd_pef_imported_symbol): Changed name of
        member class to symbol_class.
@
text
@d356 1
a356 1
_bfd_xcoff64_swap_aux_in (abfd, ext1, type, in_class, indx, numaux, in1)
d360 1
a360 1
     int in_class;
d368 1
a368 1
  switch (in_class)
d423 1
a423 2
  if (in_class == C_BLOCK || in_class == C_FCN || ISFCN (type)
      || ISTAG (in_class))
d447 1
a447 1
_bfd_xcoff64_swap_aux_out (abfd, inp, type, in_class, indx, numaux, extp)
d451 1
a451 1
     int in_class;
d460 1
a460 1
  switch (in_class)
d509 1
a509 2
  if (in_class == C_BLOCK || in_class == C_FCN || ISFCN (type)
      || ISTAG (in_class))
@


1.78.6.2
log
@bfd/
	* coff-rs6000.c (xcoff_howto_table): Change size to 0 and bitsize to 1.
	(_bfd_xcoff_reloc_type_lookup): Handle BFD_RELOC_NONE.
	* coff64-rs6000.c (xcoff64_howto_table): Change size to 0 and
	bitsize to 1.
	(xcoff64_reloc_type_lookup): Handle BFD_RELOC_NONE.

gas/
	* write.h (fix_at_start): Declare.
	* write.c (fix_new_internal): Add at_beginning parameter.
	Use it instead of REVERSE_SORT_RELOCS.  Fix the handling of
	seg_fix_tailP for the at_beginning/REVERSE_SORT_RELOCS case.
	(fix_new, fix_new_exp): Update accordingly.
	(fix_at_start): New function.
	* config/tc-ppc.c (md_pseudo_table): Add .ref to the OBJ_XCOFF section.
	(ppc_ref): New function, for OBJ_XCOFF.
	(md_apply_fix): Handle BFD_RELOC_NONE for OBJ_XCOFF.
	* config/te-i386aix.h (REVERSE_SORT_RELOCS): Remove #undef.

gas/testsuite/
	* gas/ppc/xcoff-ref-1.s, gas/ppc/xcoff-ref-1.l: New test.
	* gas/ppc/aix.exp: Run it.


ld/testsuite/
	* ld-powerpc/aix-ref-1-32.od, ld-powerpc/aix-ref-1-64.od,
	ld-powerpc/aix-ref-1.s: New tests.
	* ld-powerpc/aix52.exp: Run them.
@
text
@d1597 1
a1597 1
  /* Non-relocating reference.  Bitsize is 1 so that r_rsize is 0.  */
d1600 2
a1601 2
	 0,			/* size (0 = byte, 1 = short, 2 = long) */
	 1,			/* bitsize */
a1884 2
    case BFD_RELOC_NONE:
      return &xcoff64_howto_table[0xf];
@


1.77
log
@include/coff/
	* internal.h (C_AIX_WEAKEXT): New macro.
	(C_WEAKEXT): Use the GNU definition in the generic part of the file,
	and conditionally reset it to C_AIX_WEAKEXT in the XCOFF part of
	the file.
	(CSECT_SYM_P): New macro.
	* xcoff.h (L_WEAK): Define.
	(EXTERN_SYM_P): New macro.

bfd/
	* coffcode.h (coff_pointerize_aux_hook): Update CSECT_SYM_P to
	check whether a symbol has csect information.
	(coff_print_aux): Likewise.
	* coff-rs6000.c (_bfd_xcoff_swap_aux_in): Handle auxillary csect
	information for C_AIX_WEAKEXT too.
	(_bfd_xcoff_swap_aux_out): Likewise.
	(xcoff_reloc_type_br): Handle defweak symbols too.
	* coff64-rs6000.c (_bfd_xcoff64_swap_aux_in): Handle auxillary csect
	information for C_AIX_WEAKEXT too.
	(_bfd_xcoff64_swap_aux_out): Likewise.
	(xcoff64_reloc_type_br): Handle defweak symbols too.
	* coffgen.c (coff_print_symbol): Handle auxillary function
	information for C_AIX_WEAKEXT too.
	* xcofflink.c (_bfd_xcoff_canonicalize_dynamic_symtab): Set BSF_WEAK
	instead of BSF_GLOBAL if the L_WEAK flag is set.
	(xcoff_dynamic_definition_p): New function.
	(xcoff_link_add_dynamic_symbols): Use it to decide whether ldsym
	defines h.  Don't change h if ldsym isn't the definition.  Otherwise,
	always take the symbol class from the ldsym.  Use weak bfd symbol
	types for weak ldsyms.
	(xcoff_link_add_symbols): Use CSECT_SYM_P and EXTERN_SYM_P.
	Fix the check for whether a definition is from a shared object.
	Allow redefinitions of weak symbols.
	(xcoff_link_check_ar_symbols): Use EXTERN_SYM_P.
	(xcoff_keep_symbol_p): Likewise.
	(bfd_xcoff_size_dynamic_sections): Use CSECT_SYM_P.
	(xcoff_link_input_bfd): Use CSECT_SYM_P and EXTERN_SYM_P.
	Add .loader entries for C_AIX_WEAKEXT as well as C_EXT symbols,
	but mark them as L_WEAK.
	(xcoff_write_global_symbol): Treat weak symbols as C_AIX_WEAKEXT
	instead of C_EXT if C_AIX_WEAKEXT == C_WEAKEXT.

gas/
	* config/tc-ppc.c (ppc_frob_symbol): Add csect information for
	C_AIX_WEAKEXT too.

ld/testsuite/
	* ld-powerpc/aix-glink-2a.s, ld-powerpc/aix-glink-2a.ex,
	ld-powerpc/aix-glink-2b.s, ld-powerpc/aix-glink-2c.s,
	ld-powerpc/aix-glink-2c.ex, ld-powerpc/aix-glink-2d.s,
	ld-powerpc/aix-glink-2-32.dd, ld-powerpc/aix-glink-2-64.dd,
	ld-powerpc/aix-weak-1a.s, ld-powerpc/aix-weak-1b.s,
	ld-powerpc/aix-weak-1-rel.hd, ld-powerpc/aix-weak-1-rel.nd,
	ld-powerpc/aix-weak-1-dso.hd, ld-powerpc/aix-weak-1-dso.nd,
	ld-powerpc/aix-weak-1-dso.dnd, ld-powerpc/aix-weak-1.ex,
	ld-powerpc/aix-weak-2a.s, ld-powerpc/aix-weak-2a.ex,
	ld-powerpc/aix-weak-2a.nd, ld-powerpc/aix-weak-2b.s,
	ld-powerpc/aix-weak-2b.nd, ld-powerpc/aix-weak-2c.s,
	ld-powerpc/aix-weak-2c.ex, ld-powerpc/aix-weak-2c.nd,
	ld-powerpc/aix-weak-2c.od, ld-powerpc/aix-weak-3a.s,
	ld-powerpc/aix-weak-3a.ex, ld-powerpc/aix-weak-3b.s,
	ld-powerpc/aix-weak-3b.ex, ld-powerpc/aix-weak-3-32.d,
	ld-powerpc/aix-weak-3-32.dd, ld-powerpc/aix-weak-3-64.d,
	ld-powerpc/aix-weak-3-64.dd: New tests.
	* ld-powerpc/aix52.exp: Run them.  Replace tmp/aix-* with
	tmp/aix64-* in 64-bit ld options.
@
text
@d2808 1
d3062 1
@


1.76
log
@include/coff/
	* xcoff.h (XCOFF_CALLED, XCOFF_IMPORT): Update comments.
	(XCOFF_WAS_UNDEFINED): New flag.
	(xcoff_link_hash_table): Add an "rtld" field.

bfd/
	* coff-rs6000.c (xcoff_ppc_relocate_section): Report relocations
	against undefined symbols if the symbol's XCOFF_WAS_UNDEFINED
	flag is set.  Assert that all undefined symbols are either
	imported or defined by a dynamic object.
	* coff64-rs6000.c (xcoff64_ppc_relocate_section): Likewise.
	* xcofflink.c (xcoff_link_add_symbols): Extend function-symbol
	handling to all relocations.  Only set XCOFF_CALLED for function
	symbols.
	(xcoff_find_function): New function, split out from...
	(bfd_xcoff_export_symbol) ...here.
	(xcoff_set_import_path): New function, split out from...
	(bfd_xcoff_import_symbol): ...here.  Remove assertion for old
	meaning of XCOFF_CALLED.
	(xcoff_mark_symbol): If we mark an undefined and unimported
	symbol, find some way of defining it.  If the symbol is a function
	descriptor, fill in its definition automatically.  If the symbol
	is a function, mark its descriptor and allocate room for global
	linkage code.  Otherwise mark the symbol as implicitly imported.
	Move the code for creating function descriptors from...
	(xcoff_build_ldsyms): ...here.  Use XCOFF_WAS_UNDEFINED to
	check for symbols that were implicitly defined.
	(xcoff_mark): Don't count any dynamic relocations against
	function symbols.
	(bfd_xcoff_size_dynamic_sections): Save the rtld parameter
	in the xcoff link info.
	(xcoff_link_input_bfd): Remove handling of undefined and
	unexported symbols.

ld/
	* emultempl/aix.em (gld${EMULATION_NAME}_handle_option): Make
	-berok and -bernotok control link_info.unresolved_syms_in_objects
	and link_info.unresolved_syms_in_shared_libs instead of
	force_make_executable.

ld/testsuite/
	* ld-powerpc/aix-glink-1.ex, ld-powerpc/aix-glink-1.s,
	ld-powerpc/aix-glink-1-32.dd, ld-powerpc/aix-glink-1-64.dd,
	ld-powerpc/aix-glink-1-32.d, ld-powerpc/aix-glink-1-64.d: New tests.
	* ld-powerpc/aix52.exp: Run them.
@
text
@d384 1
d477 1
d1138 2
a1139 1
      && bfd_link_hash_defined == h->root.type
d1182 2
a1183 1
      && h->root.type == bfd_link_hash_defined
@


1.75
log
@bfd/
	* coff-rs6000.c (xcoff_reloc_type_br): Make the branch absolute
	if the target is absolute.  Fix comment typo.
	(xcoff_ppc_relocate_section): Remove FIXME.
	* coff64-rs6000.c (xcoff64_reloc_type_br): Make the branch absolute
	if the target is absolute.

ld/testsuite/
	* ld-powerpc/aix-abs-branch-1.im, ld-powerpc/aix-abs-branch-1.ex,
	ld-powerpc/aix-abs-branch-1.s,
	ld-powerpc/aix-abs-branch-1.dd: New test.
	* ld-powerpc/aix52.exp: Run it.
@
text
@d1296 11
d1321 1
a1321 2
	      else if ((0 == (h->flags & (XCOFF_DEF_DYNAMIC | XCOFF_IMPORT)))
		       && ! info->relocatable)
d1323 3
a1325 8
		  if (! ((*info->callbacks->undefined_symbol)
			 (info, h->root.root.string, input_bfd, input_section,
			  rel->r_vaddr - input_section->vma, TRUE)))
		    return FALSE;

		  /* Don't try to process the reloc.  It can't help, and
		     it may generate another error.  */
		  continue;
@


1.74
log
@bfd/
	* coff64-rs6000.c (xcoff64_write_object_contents): Set the cputype
	to 2 for bfd_mach_ppc_620.
@
text
@d1120 1
d1126 1
d1137 1
a1137 1
      && rel->r_vaddr - input_section->vma + 8 <= input_section->size)
d1142 1
a1142 1
      pnext = contents + (rel->r_vaddr - input_section->vma) + 4;
d1171 4
a1174 1
  howto->pc_relative = TRUE;
d1178 28
a1205 6
  /* A PC relative reloc includes the section address.  */
  addend += input_section->vma;

  *relocation = val + addend;
  *relocation -= (input_section->output_section->vma
		  + input_section->output_offset);
@


1.73
log
@bfd/ChangeLog

	* coff-alpha.c (alpha_ecoff_backend_data):  Initialise fields which
	control long section name handling with ECOFF_NO_LONG_SECTION_NAMES.
	* coff-mips.c (mips_ecoff_backend_data):  Likewise.
	* coff-rs6000.c (bfd_xcoff_backend_data):  Initialise fields which
	control long section name handling with XCOFF_NO_LONG_SECTION_NAMES.
	(bfd_pmac_xcoff_backend_data):  Likewise.
	* coff64-rs6000.c (bfd_xcoff_backend_data):  Likewise.
	(bfd_xcoff_aix5_backend_data):  Likewise.
	(xcoff64_write_object_contents):  Delete unused long_section_names
	local variable.
	* coff-sh.c (bfd_coff_small_swap_table):  Initialise long section
	name members using COFF_DEFAULT_LONG_SECTION_NAMES and make entire
	struct non-const.
	* coffcode.h (documentation):  Update to describe long section names.
	(COFFLONGSECTIONCATHELPER):  New helper macro.
	(BLANKOR1TOODD):  Likewise.
	(COFF_ENABLE_LONG_SECTION_NAMES):  Likewise.
	(COFF_LONG_SECTION_NAMES_SETTER):  Likewise.
	(COFF_DEFAULT_LONG_SECTION_NAMES):  Likewise.
	(bfd_coff_set_long_section_names_allowed):  New function.
	(bfd_coff_set_long_section_names_disallowed):  Likewise.
	(struct bfd_coff_backend_data):  Add new backend hook function
	pointer _bfd_coff_set_long_section_names.
	(bfd_coff_set_long_section_names):  New backend hook.
	(coff_write_object_contents):  Only generate long section names if
	bfd_coff_long_section_names() indicates they are currently enabled.
	(bfd_coff_std_swap_table):  Make non-const, and initialise long
	section name fields using COFF_DEFAULT_LONG_SECTION_NAMES.
	(ticoff0_swap_table):  Likewise to both.
	(ticoff1_swap_table):  Again, likewise to both.
	* coffgen.c (make_a_section_from_file):  Allow long section names
	as inputs even if not currently allowed for outputs.
	* ecoff.c (_bfd_ecoff_no_long_sections):  New function.
	* efi-app-ia32.c (COFF_LONG_SECTION_NAMES):  Define to 0, not blank.
	* efi-app-ia64.c (COFF_LONG_SECTION_NAMES):  Likewise.
	* efi-app-x86_64.c (COFF_LONG_SECTION_NAMES):  Likewise.
	* efi-bsdrv-ia32.c (COFF_LONG_SECTION_NAMES):  Likewise.
	* efi-bsdrv-ia64.c (COFF_LONG_SECTION_NAMES):  Likewise.
	* efi-bsdrv-x86_64.c (COFF_LONG_SECTION_NAMES):  Likewise.
	* efi-rtdrv-ia32.c (COFF_LONG_SECTION_NAMES):  Likewise.
	* efi-rtdrv-ia64.c (COFF_LONG_SECTION_NAMES):  Likewise.
	* efi-rtdrv-x86_64.c (COFF_LONG_SECTION_NAMES):  Likewise.
	* pei-arm.c (COFF_LONG_SECTION_NAMES):  Likewise.
	* pei-i386.c (COFF_LONG_SECTION_NAMES):  Likewise.
	* pei-mcore.c (COFF_LONG_SECTION_NAMES):  Likewise.
	* pei-mips.c (COFF_LONG_SECTION_NAMES):  Likewise.
	* pei-ppc.c (COFF_LONG_SECTION_NAMES):  Likewise.
	* pei-sh.c (COFF_LONG_SECTION_NAMES):  Likewise.
	* pei-x86_64.c (COFF_LONG_SECTION_NAMES):  Likewise.
	* libcoff-in.h:  Update copyright year to cause updated copyright
	year in generated libcoff.h, and fix typo.
	* libcoff.h:  Regenerated.
	* libecoff.h (ECOFF_NO_LONG_SECTION_NAMES):  New macro.
	(_bfd_ecoff_no_long_sections):  Add prototype.
	* libxcoff.h (XCOFF_NO_LONG_SECTION_NAMES):  New macro.
	* pe-mips.c (COFF_LONG_SECTION_NAMES):  Define empty if not already
	defined by an including .c file.
	* ticoff.h (ticoff0_swap_table):  Make non-const, and initialise
	long section name fields using COFF_DEFAULT_LONG_SECTION_NAMES.
	(ticoff1_swap_table):  Likewise to both.

ld/ChangeLog

	* ld.texinfo:  Update to mention long section name options.
	* NEWS:  Mention new behaviour and command-line options.
	* pe-dll.c (pe_use_coff_long_section_names):  New global variable.
	(pe_output_file_set_long_section_names):  New function.
	(pe_dll_build_sections):  Call it on output BFDs.
	(pe_exe_build_sections):  Likewise.
	(pe_dll_fill_sections):  Likewise.
	(pe_exe_fill_sections):  Likewise.
	* pe-dll.h (pe_use_coff_long_section_names):  Declare extern.
	(pe_output_file_set_long_section_names):  Add prototype.
	* pep-dll.c (pe_use_coff_long_section_names):  Define pep_ alias.
	(pe_output_file_set_long_section_names):  Likewise.
	* pep-dll.h (pep_use_coff_long_section_names):  Declare extern.
	(pep_output_file_set_long_section_names):  Add prototype.
	* pe.em (OPTION_ENABLE_LONG_SECTION_NAMES):  New getopt value macro.
	(OPTION_DISABLE_LONG_SECTION_NAMES):  Likewise.
	(gld${EMULATION_NAME}_add_options):  Add new options to xtra_long[].
	(gld_${EMULATION_NAME}_list_options):  Describe them.
	(gld${EMULATION_NAME}_handle_option):  Set or clear global
	pe_use_coff_long_section_names flag when options recognised.
	(gld_${EMULATION_NAME}_after_open):  En/disable long section names
	for main output bfd by calling pe_output_file_set_long_section_names.
	* pep.em (enum options):  Extend enum with new getopt option values.
	(gld${EMULATION_NAME}_add_options):  Add new options to xtra_long[].
	(gld_${EMULATION_NAME}_list_options):  Describe them.
	(gld${EMULATION_NAME}_handle_option):  Set or clear global
	pe_use_coff_long_section_names flag when options recognised.
	(gld_${EMULATION_NAME}_after_open):  En/disable long section names
	for main output bfd by calling pep_output_file_set_long_section_names.

ld/testsuite/ChangeLog

	* ld-pe/longsecn-1.d:  New test file.
	* ld-pe/longsecn-2.d:  Likewise.
	* ld-pe/longsecn-3.d:  Likewise.
	* ld-pe/longsecn-4.d:  Likewise.
	* ld-pe/longsecn-5.d:  Likewise.
	* ld-pe/longsecn.d:  Likewise.
	* ld-pe/longsecn.exp:  New test control script.
	* ld-pe/longsecn.s:  New test source file.
@
text
@d1051 2
@


1.72
log
@     * coffgen.c (coff_write_symbols): Check to see if a symbol's flags
       do not match it class and if necessary update the class.
       (null_error_handler): New function.  Suppresses the generation of
       bfd error messages.
     * coff64-rs6000.c (bfd_xcoff_backend_data): Update comment.
     * config/tc-tic4x.c (tic4x_globl): Call S_SET_EXTERNAL as well as
     S_SET_STORAGE_CLASS.
@
text
@d2 1
a2 1
   Copyright 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008
a769 1
  bfd_boolean long_section_names;
a838 1
  long_section_names = FALSE;
d2562 1
a2562 1
      FALSE,			/* _bfd_coff_long_section_names */
d2816 1
a2816 1
      FALSE,			/* _bfd_coff_long_section_names */
@


1.71
log
@        * pe-arm-wince.c (pe_print_compressed_pdata): Define new function to
        print compressed pdata structure as described on MSDN. This only
        applies to a limited set of architectures (ARM, SH4).
        (slurp_symtab, my_symbol_for_address): Define static helper
        functions for pe_print_compressed_pdata.
        * coffcode.h (bfd_coff_backend_data): Add _bfd_coff_print_pdata field.
        (bfd_coff_have_print_pdata, bfd_coff_print_pdata): Define.
        * bfd/peXXigen.c (_bfd_XX_print_private_bfd_data_common): Add check on
        bfd_coff_backend_data, call the function if non-null.
        * pei-mcore.c: Add target dependent initialisation for
        bfd_coff_backend_data.
        * coff-sh.c: Likewise.
        * coff64-rs6000.c: Likewise.
        * coff-rs6000.c: Likewise.
        * libcoff-in.h: Likewise.
        * cf-i386lynx.c: Likewise.
        * coff-alpha.c: Likewise.
        * coff-apollo.c: Likewise.
        * coff-arm.c: Likewise.
        * coff-aux.c: Likewise.
        * coff-h8300.c: Likewise.
        * coff-h8500.c: Likewise.
        * coff-i386.c: Likewise.
        * coff-i860.c: Likewise.
        * coff-i960.c: Likewise.
        * coff-ia64.c: Likewise.
        * coff-m68k.c: Likewise.
        * coff-m88k.c: Likewise.
        * coff-maxq.c: Likewise.
        * coff-mips.c: Likewise.
        * coff-or32.c: Likewise.
        * coff-sparc.c: Likewise.
        * coff-tic30.c: Likewise.
        * coff-tic4x.c: Likewise.
        * coff-tic54x.c: Likewise.
        * coff-tic80.c: Likewise.
        * coff-w65.c: Likewise.
        * coff-we32k.c: Likewise.
        * coff-x86_64.c: Likewise.
        * coff-z80.c: Likewise.
        * coff-z8k.c: Likewise.
        * pe-mcore.c: Likewise.
        * pe-mips.c: Likewise.
        * pe-ppc.c: Likewise.
        * peXXigen.c: Likewise.
        * pei-ppc.c: Likewise.
        * libcoff.h: Regenerate.
@
text
@d2583 1
a2583 1
      NULL,			/* bfd_coff_sym_is_global */
@


1.70
log
@Switch sources over to use the GPL version 3
@
text
@d2 1
a2 1
   Copyright 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007
d275 4
d2591 2
a2592 1
      coff_final_link_postscript
d2845 2
a2846 1
      coff_final_link_postscript
@


1.69
log
@
bfd/
	Many files: Include sysdep.h before bfd.h.
	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.
binutils/
	* bucumm.h: Split off host dependencies to..
	* sysdep.h: ..here.
	Many files: Include sysdep.h.  Remove duplicate headers and reorder.
	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.
ld/
	Many files: Include sysdep.h first.  Remove duplicate headers.
	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.
opcodes/
	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.
	* ns32k-dis.c: Include sysdep.h first.
@
text
@d11 1
a11 1
   the Free Software Foundation; either version 2 of the License, or
d21 2
a22 1
   Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA 02110-1301, USA.  */
@


1.68
log
@	* aout-adobe.c (aout_32_bfd_reloc_name_lookup): Define.
	* aout-arm.c (MY_bfd_reloc_name_lookup): Define.
	(MY (bfd_reloc_name_lookup)): New function.
	* aout-ns32k.c (MY (bfd_reloc_name_lookup)): New function.
	* aout-target.h (NAME (aout, reloc_name_lookup)): Declare.
	(MY_bfd_reloc_name_lookup): Define.
	* aout-tic30.c (tic30_aout_reloc_name_lookup): New function.
	(MY_bfd_reloc_name_lookup): Define.
	* aoutx.h (NAME (aout, reloc_type_lookup)): Don't declare.
	(NAME (aout, reloc_name_lookup)): New function.
	* bout.c (b_out_bfd_reloc_name_lookup): New function.
	* coff-alpha.c (alpha_bfd_reloc_name_lookup): New function.
	(_bfd_ecoff_bfd_reloc_name_lookup): Define.
	* coff-arm.c (coff_arm_reloc_name_lookup): New function.
	(coff_bfd_reloc_name_lookup): Define.
	* coff-i386.c (coff_bfd_reloc_name_lookup): Define.
	(coff_i386_reloc_name_lookup): New function.
	* coff-i860.c (coff_i860_reloc_name_lookup): New function.
	(coff_bfd_reloc_name_lookup): Define.
	* coff-i960.c (coff_i960_reloc_name_lookup): New function.
	(coff_bfd_reloc_name_lookup): Define.
	* coff-m68k.c (m68k_reloc_name_lookup): New function.
	(coff_bfd_reloc_name_lookup): Define.
	* coff-maxq.c (maxq_reloc_name_lookup): New function.
	(coff_bfd_reloc_name_lookup): Define.
	* coff-mcore.c (mcore_coff_reloc_name_lookup): New function.
	(coff_bfd_reloc_name_lookup): Define.
	* coff-mips.c (mips_bfd_reloc_name_lookup): New function.
	(_bfd_ecoff_bfd_reloc_name_lookup): Define.
	* coff-ppc.c (ppc_coff_reloc_name_lookup): New function.
	(coff_bfd_reloc_name_lookup): Define.
	* coff-rs6000.c (coff_bfd_reloc_name_lookup): Define.
	(_bfd_xcoff_reloc_name_lookup): New function.
	(rs6000coff_vec, pmac_xcoff_vec): Init new field.
	* coff-sh.c (coff_bfd_reloc_name_lookup): Define.
	(sh_coff_reloc_name_lookup): New function.
	* coff-sparc.c (coff_sparc_reloc_name_lookup): New function.
	(coff_bfd_reloc_name_lookup): Define.
	* coff-tic30.c (coff_bfd_reloc_name_lookup): Define.
	(tic30_coff_reloc_name_lookup): New function.
	* coff-tic4x.c (coff_bfd_reloc_name_lookup): Define.
	(tic4x_coff_reloc_name_lookup): New function.
	* coff-tic54x.c (coff_bfd_reloc_name_lookup): Define.
	(tic54x_coff_reloc_name_lookup): New function.
	* coff-x86_64.c (coff_bfd_reloc_name_lookup): Define.
	(coff_amd64_reloc_name_lookup): New function.
	* coff-z80.c (coff_z80_reloc_name_lookup): New function.
	(coff_bfd_reloc_name_lookup): Define.
	* coff-z8k.c (coff_z8k_reloc_name_lookup): New function.
	(coff_bfd_reloc_name_lookup): Define.
	* coff64-rs6000.c (coff_bfd_reloc_name_lookup): Define.
	(xcoff64_reloc_name_lookup): New function.
	(rs6000coff64_vec, aix5coff64_vec): Init new field.
	* coffcode.h (coff_bfd_reloc_name_lookup): Define.
	* elf-hppa.h (elf_hppa_reloc_name_lookup): New function.
	* elf-m10200.c (bfd_elf32_bfd_reloc_name_lookup): New function.
	* elf-m10300.c (bfd_elf32_bfd_reloc_name_lookup): New function.
	* elf32-arc.c (bfd_elf32_bfd_reloc_name_lookup): New function.
	* elf32-arm.c (elf32_arm_reloc_name_lookup): New function.
	(bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-avr.c (bfd_elf32_bfd_reloc_name_lookup): New function.
	* elf32-bfin.c (bfin_bfd_reloc_name_lookup): New function.
	(bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-cr16c.c (elf_cr16c_reloc_name_lookup): New function.
	(bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-cris.c (cris_reloc_name_lookup): New function.
	(bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-crx.c (elf_crx_reloc_name_lookup): New function.
	(bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-d10v.c (bfd_elf32_bfd_reloc_name_lookup): New function.
	* elf32-d30v.c (bfd_elf32_bfd_reloc_name_lookup): New function.
	* elf32-dlx.c (elf32_dlx_reloc_name_lookup): New function.
	(bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-fr30.c (fr30_reloc_name_lookup): New function.
	(bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-frv.c (frv_reloc_name_lookup): New function.
	(bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-gen.c (bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-h8300.c (elf32_h8_reloc_name_lookup): New function.
	(bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-hppa.c (bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-i370.c (i370_elf_reloc_name_lookup): New function.
	(bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-i386.c (elf_i386_reloc_name_lookup): New function.
	(bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-i860.c (elf32_i860_reloc_name_lookup): New function.
	(bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-i960.c (elf32_i960_reloc_name_lookup): New function.
	(bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-ip2k.c (ip2k_reloc_name_lookup): New function.
	(bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-iq2000.c (iq2000_reloc_name_lookup): New function.
	(bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-m32c.c (m32c_reloc_name_lookup): New function.
	(bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-m32r.c (bfd_elf32_bfd_reloc_name_lookup): New function.
	* elf32-m68hc11.c (bfd_elf32_bfd_reloc_name_lookup): New function.
	* elf32-m68hc12.c (bfd_elf32_bfd_reloc_name_lookup): New function.
	* elf32-m68k.c (reloc_name_lookup): New function.
	(bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-m88k.c (bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-mcore.c (mcore_elf_reloc_name_lookup): New function.
	(bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-mep.c (mep_reloc_name_lookup): New function.
	(bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-mips.c (bfd_elf32_bfd_reloc_name_lookup): New function.
	(mips_vxworks_bfd_reloc_name_lookup): Likewise.
	(bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-msp430.c (bfd_elf32_bfd_reloc_name_lookup): New function.
	* elf32-mt.c (mt_reloc_name_lookup): New function.
	(bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-openrisc.c (openrisc_reloc_name_lookup): New function.
	(bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-or32.c (bfd_elf32_bfd_reloc_name_lookup): New function.
	* elf32-pj.c (pj_elf_reloc_name_lookup): New function.
	(bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-ppc.c (ppc_elf_reloc_name_lookup): New function.
	(bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-s390.c (elf_s390_reloc_name_lookup): New function.
	(bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-score.c (elf32_score_reloc_name_lookup): New function.
	(bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-sh.c (sh_elf_reloc_name_lookup): New function.
	(bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-sparc.c (bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-spu.c (spu_elf_reloc_name_lookup): New function.
	(bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-v850.c (v850_elf_reloc_name_lookup): New function.
	(bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-vax.c (reloc_name_lookup): New function.
	(bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-xc16x.c (xc16x_reloc_name_lookup): New function.
	(bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-xstormy16.c (xstormy16_reloc_name_lookup): New function.
	(bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf32-xtensa.c (elf_xtensa_reloc_name_lookup): New function.
	(bfd_elf32_bfd_reloc_name_lookup): Define.
	* elf64-alpha.c (elf64_alpha_bfd_reloc_name_lookup): New function.
	(bfd_elf64_bfd_reloc_name_lookup): Define.
	* elf64-gen.c (bfd_elf64_bfd_reloc_name_lookup): Define.
	* elf64-hppa.c (bfd_elf64_bfd_reloc_name_lookup): Define.
	* elf64-mips.c (bfd_elf64_bfd_reloc_name_lookup): New function.
	* elf64-mmix.c (bfd_elf64_bfd_reloc_name_lookup): New function.
	* elf64-ppc.c (ppc64_elf_reloc_name_lookup): New function.
	(bfd_elf64_bfd_reloc_name_lookup): Define.
	* elf64-s390.c (elf_s390_reloc_name_lookup): New function.
	(bfd_elf64_bfd_reloc_name_lookup): Define.
	* elf64-sh64.c (sh_elf64_reloc_name_lookup): New function.
	(bfd_elf64_bfd_reloc_name_lookup): Define.
	* elf64-sparc.c (bfd_elf64_bfd_reloc_name_lookup): Define.
	* elf64-x86-64.c (elf64_x86_64_reloc_name_lookup): New function.
	(bfd_elf64_bfd_reloc_name_lookup): Define.
	* elfn32-mips.c (bfd_elf32_bfd_reloc_name_lookup): New function.
	* elfxx-ia64.c (elfNN_ia64_reloc_name_lookup): New function.
	(bfd_elfNN_bfd_reloc_name_lookup): Define.
	* elfxx-sparc.c (_bfd_sparc_elf_reloc_name_lookup): New function.
	* elfxx-sparc.h (_bfd_sparc_elf_reloc_name_lookup): Declare.
	* i386msdos.c (msdos_bfd_reloc_name_lookup): Define.
	* i386os9k.c (aout_32_bfd_reloc_name_lookup): Define.
	* ieee.c (ieee_bfd_reloc_name_lookup): Define.
	* libaout.h (NAME (aout, reloc_name_lookup)): Declare.
	* libbfd-in.h (_bfd_norelocs_bfd_reloc_name_lookup): Declare.
	* mipsbsd.c (MY_bfd_reloc_name_lookup): Define.
	(MY(reloc_type_lookup)): Rename from MY(reloc_howto_type_lookup).
	(MY(reloc_name_lookup)): New function.
	* nlm-target.h (nlm_bfd_reloc_name_lookup): Define.
	* oasys.c (oasys_bfd_reloc_name_lookup): Define.
	* pdp11.c (NAME (aout, reloc_name_lookup)): New function.
	* pe-mips.c (coff_mips_reloc_name_lookup): New function.
	(coff_bfd_reloc_name_lookup): Define.
	* reloc.c (bfd_reloc_name_lookup): New function.
	* riscix.c (riscix_reloc_name_lookup): New function.
	(MY_bfd_reloc_name_lookup): Define.
	* som.c (som_bfd_reloc_name_lookup): New function.
	* targets.c (struct bfd_target): Add reloc_name_lookup.
	(BFD_JUMP_TABLE_RELOCS): Add NAME##_bfd_reloc_name_lookup.
	* versados.c (versados_bfd_reloc_name_lookup): Define.
	* vms.c (vms_bfd_reloc_name_lookup): New function.
	* bfd-in2.h: Regenerate.
	* libbfd.h: Regenerate.
@
text
@d23 1
a24 1
#include "sysdep.h"
@


1.67
log
@bfd/
	* elf-bfd.h (struct elf_backend_data): Add bfd_link_info pointer
	parameter.
	(_bfd_elf_sizeof_headers): Replace bfd_boolean param with
	bfd_link_info pointer.
	* targets.c (struct bfd_target <_bfd_sizeof_headers>): Likewise.
	* bfd.c (bfd_sizeof_headers): Tweak param name.
	* aout-adobe.c (aout_adobe_sizeof_headers): Adjust.
	* aoutx.h (NAME (aout, sizeof_headers)): Adjust.
	* binary.c (binary_sizeof_headers): Adjust.
	* bout.c (b_out_sizeof_headers): Adjust.
	* coff-rs6000.c (_bfd_xcoff_sizeof_headers): Adjust.
	* coff64-rs6000.c (xcoff64_sizeof_headers): Adjust.
	* coffgen.c (coff_sizeof_headers): Adjust.
	* ecoff.c (_bfd_ecoff_sizeof_headers): Adjust.
	(ecoff_compute_section_file_positions): Adjust.
	(_bfd_ecoff_write_object_contents): Adjust.
	* elf.c (get_program_header_size, _bfd_elf_sizeof_headers): Adjust.
	* elf32-arm.c (elf32_arm_additional_program_headers): Adjust.
	* elf32-i370.c (elf_backend_additional_program_headers): Adjust.
	* elf32-ppc.c (ppc_elf_additional_program_headers): Adjust.
	* elf64-hppa.c (elf64_hppa_additional_program_headers): Adjust.
	* elf64-x86-64.c (elf64_x86_64_additional_program_headers): Adjust.
	* elfxx-ia64.c (elfNN_ia64_additional_program_headers): Adjust.
	* elfxx-mips.c (_bfd_mips_elf_additional_program_headers): Adjust.
	* elfxx-mips.h (_bfd_mips_elf_additional_program_headers): Adjust.
	* i386msdos.c: Convert to ISO C.
	(msdos_sizeof_headers): Adjust.
	* i386os9k.c: Convert to ISO C.
	(os9k_sizeof_headers): Adjust.
	* ieee.c (ieee_sizeof_headers): Adjust.
	* ihex.c (ihex_sizeof_headers): Adjust.
	* libaout.h (NAME (aout, sizeof_headers)): Adjust.
	* libbfd-in.h (_bfd_nolink_sizeof_headers): Adjust.
	* libcoff-in.h (coff_sizeof_headers): Adjust.
	* libecoff.h (_bfd_ecoff_sizeof_headers): Adjust.
	* mach-o.c (bfd_mach_o_sizeof_headers): Adjust.
	* mmo.c (mmo_sizeof_headers): Adjust.
	* oasys.c (oasys_sizeof_headers): Adjust.
	* pdp11.c (NAME (aout, sizeof_headers)): Adjust.
	* pef.c (bfd_pef_sizeof_headers): Adjust.
	* ppcboot.c (ppcboot_sizeof_headers): Adjust.
	* som.c (som_sizeof_headers): Adjust.
	* srec.c (srec_sizeof_headers): Adjust.
	* tekhex.c (tekhex_sizeof_headers): Adjust.
	* versados.c (versados_sizeof_headers): Adjust.
	* vms.c (vms_sizeof_headers): Adjust.
	* xcoff-target.h (_bfd_xcoff_sizeof_headers): Adjust.
	* xsym.c (bfd_sym_sizeof_headers): Adjust.
	* xsym.h (bfd_sym_sizeof_headers): Adjust.
	* bfd-in2.h: Regenerate.
	* libbfd.h: Regenerate.
	* libcoff.h: Regenerate.
ld/
	* ldexp.c (fold_name): Adjust bfd_sizeof_headers call.
@
text
@d2 1
a2 1
   Copyright 2000, 2001, 2002, 2003, 2004, 2005, 2006
d240 1
d1847 16
d2745 1
d2997 1
@


1.66
log
@bfd/
	* elf-bfd.h (_bfd_generic_match_sections_by_type): Don't define.
	* libbfd-in.h (_bfd_generic_match_sections_by_type): Delete.
	* libbfd.c (_bfd_generic_match_sections_by_type): Delete.
	* targets.c (bfd_match_sections_by_type): Don't define.
	(BFD_JUMP_TABLE_LINK): Remove _bfd_generic_match_sections_by_type.
	* coff-rs6000.c (rs6000coff_vec, pmac_xcoff_vec): Likewise.
	* coff64-rs6000.c (rs6000coff64_vec, aix5coff64_vec): Likewise.
	* bfd-in2.h: Regenerate.
	* libbfd.h: Regenerate.
ld/
	* ldlang.c (lang_output_section_find_by_flags): Add match_type param.
	Run two passes, first using match_type, second without.
	* ldlang.h (lang_match_sec_type_func): New typedef.
	(lang_output_section_find_by_flags): Update prototype.
	bfd_match_sections_by_type and lang_output_section_find_by_flags.
	* emultempl/pe.em (place_orphan): Likewise.
@
text
@d2 1
a2 1
   Copyright 2000, 2001, 2002, 2003, 2004, 2005
d130 1
a130 1
  PARAMS ((bfd *, bfd_boolean));
d164 1
a164 1
  PARAMS ((bfd *, bfd_boolean));
d2059 2
a2060 3
xcoff64_sizeof_headers (abfd, reloc)
     bfd *abfd;
     bfd_boolean reloc ATTRIBUTE_UNUSED;
@


1.65
log
@2005-10-23  H.J. Lu  <hongjiu.lu@@intel.com>

	* coff-rs6000.c (rs6000coff_vec): Initialize
	_bfd_init_private_section_data with
	_bfd_generic_init_private_section_data.
	(pmac_xcoff_vec): Likewise.
	* coff64-rs6000.c (rs6000coff64_vec): Likewise.
	(aix5coff64_vec): Likewise.
@
text
@a2745 1
    _bfd_generic_match_sections_by_type,
a2996 1
    _bfd_generic_match_sections_by_type,
@


1.64
log
@2005-10-15  H.J. Lu  <hongjiu.lu@@intel.com>

	* coff-rs6000.c (rs6000coff_vec): Initialize
	_bfd_match_sections_by_type with
	_bfd_generic_match_sections_by_type.
	(pmac_xcoff_vec): Likewise.
	* coff64-rs6000.c (rs6000coff64_vec): Likewise.
	(aix5coff64_vec): Likewise.
@
text
@d2685 1
d2937 1
@


1.63
log
@	* libbfd-in.h (struct artdata): Add extended_names_size field.
	* libbfd.h: Rebuilt.
	* coff-rs600.c (_bfd_xcoff_archive_p): Don't clear fields in freshly
	allocated object by bfd_zalloc.
	* coff64-rs6000.c (xcoff64_archive_p): Likewise.
	* ecoff.c (_bfd_ecoff_archive_p): Likewise.
	* archive.c (_bfd_generic_mkarchive, bfd_generic_archive_p): Likewise.
	(get_extended_arelt_filename): Fail if index is bigger or equal to
	extended_names_size.
	(_bfd_generic_read_ar_hdr_mag): Don't set bfd_error_malformed_archive,
	get_extended_arelt_filename already did that.
	(_bfd_slurp_extended_name_table): Initialize extended_names_size field.
	Allocate one extra byte and clear it, in case extended names table
	is not terminated.
@
text
@d2745 1
d2996 1
@


1.62
log
@	* coff-rs6000.c (rs6000coff_vec, pmac_xcoff_vec): Init _bfd_find_line.
	* coff64-rs6000.c (rs6000coff64_vec, aix5coff64_vec): Likewise.
@
text
@d1986 6
a1991 4
  bfd_ardata (abfd)->cache = NULL;
  bfd_ardata (abfd)->archive_head = NULL;
  bfd_ardata (abfd)->symdefs = NULL;
  bfd_ardata (abfd)->extended_names = NULL;
@


1.61
log
@Approved by nickc@@redhat.com

	2005-05-23  Fred Fish  <fnf@@specifixinc.com>
	* dwarf2.c (struct dwarf2_debug): Add inliner_chain member.
	(struct funcinfo): Add caller_func, caller_file, caller_line.
	tag, and nesting_level members.
	(lookup_address_in_function_table): Change first passed parameter
	from "struct funcinfo *" to "struct comp_unit *".
	(lookup_address_in_function_table): Dereference unit to find function
	table.
	(lookup_address_in_function_table): Traverse the function list to
	create a chain of inlined functions back to the first non inlined
	function.
	(scan_unit_for_functions): Remember tag and nesting level.  Handle
	DW_AT_call_file and DW_AT_call_line.
	(comp_unit_find_nearest_line): Adjust lookup_address_in_function_table
	call to pass unit pointer instead of function table pointer.  For
	inlined functions, save pointer to the inliner chain.
	(_bfd_dwarf2_find_nearest_line): Initialize inliner_chain to NULL.
	(_bfd_dwarf2_find_inliner_info): New function that returns information
	from the inliner chain after a call to bfd_find_nearest_line.

	* bfd.c (bfd_find_inliner_info): Define using BFD_SEND.
	* targets.c (BFD_JUMP_TABLE_SYMBOLS): Add entry for
	NAME##_find_inliner_info.
	(bfd_target): Add _bfd_find_inliner_info.
	* bfd-in2.h: Regenerate.

	* libbfd-in.h (_bfd_nosymbols_find_inliner_info): Define as
	macro that always returns bfd_false.
	(_bfd_dwarf2_find_inliner_info): Declare.
	* libbfd.h: Regenerate.

	* elf32-arm.c (elf32_arm_find_inliner_info): New function
	that calls _bfd_dwarf2_find_inliner_info.
	(bfd_elf32_find_inliner_info): Define to elf32_arm_find_inliner_info.

	* elfxx-mips.c (_bfd_mips_elf_find_inliner_info): New function
	that calls _bfd_dwarf2_find_inliner_info.
	* elfxx-mips.h (_bfd_mips_elf_find_inliner_info): Declare.
	* elfn32-mips.c (bfd_elf32_find_inliner_info): Define to
	_bfd_mips_elf_find_inliner_info.
	* elf64-mips.c (bfd_elf64_find_inliner_info): Ditto.
	* elf32-mips.c (bfd_elf32_find_inliner_info): Ditto.

	* elf.c (_bfd_elf_find_inliner_info): New function that calls
	_bfd_dwarf2_find_inliner_info.
	* elf-bfd.h (_bfd_elf_find_inliner_info): Declare.
	* elfxx-target.h (bfd_elfNN_find_inliner_info): Define to
	_bfd_elf_find_inliner_info.

	* coffgen.c (coff_find_inliner_info): New function that
	calls _bfd_dwarf2_find_inliner_info.
	* libcoff-in.h (coff_find_inliner_info): Declare.
	* libcoff.h: Regenerate.
	* coff-rs6000.c (rs6000coff_vec): Add coff_find_inliner_info.
	(pmac_xcoff_vec) Ditto.
	* coff64-rs6000.c (rs6000coff64_vec): Ditto.
	(aix5coff64_vec): Ditto.

	* aout-target.h (MY_find_inliner_info): Define as
	_bfd_nosymbols_find_inliner_info.
	* aout-tic30.c (MY_find_inliner_info): Ditto.
	* binary.c (binary_find_inliner_info): Ditto.
	* i386msdos.c (msdos_find_inliner_info): Ditto.
	* ihex.c (ihex_find_inliner_info): Ditto.
	* libaout.h (aout_32_find_inliner_info): Ditto.
	* libecoff.h (_bfd_ecoff_find_inliner_info): Ditto.
	* mach-o.c (bfd_mach_o_find_inliner_info): Ditto.
	* mmo.c (mmo_find_inliner_info): Ditto.
	* nlm-target.h (nlm_find_inliner_info): Ditto.
	* pef.c (bfd_pef_find_inliner_info): Ditto.
	* ppcboot.c (ppcboot_find_inliner_info): Ditto.
	* srec.c (srec_find_inliner_info): Ditto.
	* tekhex.c (tekhex_find_inliner_info): Ditto.
	* versados.c (versados_find_inliner_info): Ditto.
	* xsym.c (bfd_sym_find_inliner_info): Ditto.

	* ieee.c (ieee_find_inliner_info): New function that always
	returns FALSE.
	* oasys.c (oasys_find_inliner_info): Ditto.
	* vms.c (vms_find_inliner_info): Ditto.
@
text
@d2716 1
d2966 1
@


1.60
log
@Update the address and phone number of the FSF organization in the GPL notices
@
text
@d2716 1
d2965 1
@


1.59
log
@Update the FSF address in the copyright/GPL notice
@
text
@d21 1
a21 1
   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02110-1301, USA.  */
@


1.58
log
@include/
	* xtensa-isa-internal.h (xtensa_length_decode_fn): Warning fix.
	* xtensa-isa.h (xtensa_insnbuf_to_chars): Likewise.
	(xtensa_insnbuf_from_chars, xtensa_isa_length_from_chars): Likewise.
include/coff/
	* xcoff.h (struct xcoff_loader_info): Warning fix.
bfd/
	* bfd-in.h (bfd_elf_bfd_from_remote_memory): Warning fix.
	* coff-m68k.c (bfd_m68k_coff_create_embedded_relocs): Likewise.
	* coff-rs6000.c (xcoff_write_armap_big): Warning fixes.  Remove
	useless assignments.
	(xcoff_write_archive_contents_big): Likewise.
	(_bfd_xcoff_put_ldsymbol_name): Likewise.
	* coff64-rs6000.c (_bfd_xcoff64_put_ldsymbol_name): Likewise.
	* coffgen.c (coff_write_symbols): Make "written" a bfd_vma.
	* cofflink.c (process_embedded_commands): Warning fixes.
	* cpu-arm.c: Delete unnecessary prototypes.  Convert to C90.
	Warning fixes.
	* dwarf2.c: Warning fixes.
	* elf-bfd.h: Likewise.
	* elf-eh-frame.c: Likewise.
	* elf-strtab.c: Likewise.
	* elf.c: Likewise.
	* elf32-m68k.c: Likewise.
	* elf32-ppc.c: Likewise.
	* elf32-sh-symbian.c: Likewise.
	* elf32-sh.c: Delete unnecessary prototypes.  Warning fixes.
	* elf64-sh64.c: Likewise.
	* peicode.h: Likewise.
	* elf64-mmix.c: Warning fixes.
	* elfcode.h: Likewise.
	* elfxx-mips.c: Likewise.
	* libbfd-in.h: Likewise.
	* libbfd.c: Likewise.
	* mach-o.c: Likewise.
	* merge.c: Likewise.
	* mmo.c: Likewise.
	* opncls.c: Likewise.
	* pef.c: Likewise.
	* srec.c: Likewise.
	* vms-hdr.c: Likewise.
	* vms-tir.c: Likewise.
	* xtensa-isa.c: Likewise.
	* xtensa-modules.c: Likewise.
	* xsym.c: Likewise.
	(pstrcmp): Use correct choice of string lengths.  Fix return value.
	(bfd_sym_module_name): Correct string length.
	* bfd-in2.h: Regenerate.
	* libbfd.h: Regenerate.
@
text
@d21 1
a21 1
   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
@


1.57
log
@bfd/

2004-10-21  H.J. Lu  <hongjiu.lu@@intel.com>

	PR 463
	* aoutx.h (aout_link_input_section_std): Pass proper hash entry
	to linker reloc_overflow callback.
	(aout_link_input_section_ext): Likewise.
	(aout_link_reloc_link_order): Likewise.
	* coff-a29k.c (coff_a29k_relocate_section): Likewise.
	* coff-alpha.c (alpha_ecoff_get_relocated_section_contents):
	Likewise.
	(alpha_relocate_section): Likewise.
	* coff-arm.c (coff_arm_relocate_section): Likewise.
	* coff-h8300.c (h8300_reloc16_extra_cases): Likewise.
	* coff-h8500.c (extra_case): Likewise.
	* coff-i960.c (coff_i960_relocate_section): Likewise.
	* coff-mcore.c (coff_mcore_relocate_section): Likewise.
	* coff-mips.c (mips_relocate_section): Likewise.
	* coff-or32.c (coff_or32_relocate_section): Likewise.
	* coff-ppc.c (coff_ppc_relocate_section): Likewise.
	* coff-rs6000.c (xcoff_ppc_relocate_section): Likewise.
	* coff-sh.c (sh_relocate_section): Likewise.
	* coff-tic80.c (coff_tic80_relocate_section): Likewise.
	* coff-w65.c (w65_reloc16_extra_cases): Likewise.
	* coff-z8k.c (extra_case): Likewise.
	* coff64-rs6000.c (xcoff64_ppc_relocate_section): Likewise.
	* cofflink.c (_bfd_coff_reloc_link_order): Likewise.
	(_bfd_coff_generic_relocate_section): Likewise.
	* ecoff.c (ecoff_reloc_link_order): Likewise.
	* elf-hppa.h (elf_hppa_relocate_section): Likewise.
	* elf-m10200.c (mn10200_elf_relocate_section): Likewise.
	* elf-m10300.c (mn10300_elf_relocate_section): Likewise.
	* elf32-arm.h (elf32_arm_relocate_section): Likewise.
	* elf32-avr.c (elf32_avr_relocate_section): Likewise.
	* elf32-cr16c.c (elf32_cr16c_relocate_section): Likewise.
	* elf32-cris.c (cris_elf_relocate_section): Likewise.
	* elf32-crx.c (elf32_crx_relocate_section): Likewise.
	* elf32-d10v.c (elf32_d10v_relocate_section): Likewise.
	* elf32-fr30.c (fr30_elf_relocate_section): Likewise.
	* elf32-frv.c (elf32_frv_relocate_section): Likewise.
	* elf32-h8300.c (elf32_h8_relocate_section): Likewise.
	* elf32-hppa.c (elf32_hppa_relocate_section): Likewise.
	* elf32-i370.c (i370_elf_relocate_section): Likewise.
	* elf32-i386.c (elf_i386_relocate_section): Likewise.
	* elf32-i860.c (elf32_i860_relocate_section): Likewise.
	* elf32-ip2k.c (ip2k_elf_relocate_section): Likewise.
	* elf32-iq2000.c (iq2000_elf_relocate_section): Likewise.
	* elf32-m32r.c (m32r_elf_relocate_section): Likewise.
	* elf32-m68hc1x.c (elf32_m68hc11_relocate_section): Likewise.
	* elf32-m68k.c (elf_m68k_relocate_section): Likewise.
	* elf32-mcore.c (mcore_elf_relocate_section): Likewise.
	* elf32-msp430.c (elf32_msp430_relocate_section): Likewise.
	* elf32-openrisc.c (openrisc_elf_relocate_section): Likewise.
	* elf32-ppc.c (ppc_elf_relocate_section): Likewise.
	* elf32-s390.c (elf_s390_relocate_section): Likewise.
	* elf32-sh.c (sh_elf_relocate_section): Likewise.
	* elf32-sparc.c (elf32_sparc_relocate_section): Likewise.
	* elf32-v850.c (v850_elf_relocate_section): Likewise.
	* elf32-vax.c (elf_vax_relocate_section): Likewise.
	* elf32-xstormy16.c (xstormy16_elf_relocate_section): Likewise.
	* elf64-alpha.c (elf64_alpha_relocate_section): Likewise.
	* elf64-mmix.c (mmix_elf_relocate_section): Likewise.
	* elf64-ppc.c (ppc64_elf_relocate_section): Likewise.
	* elf64-s390.c (elf_s390_relocate_section): Likewise.
	* elf64-sh64.c (sh_elf64_relocate_section): Likewise.
	* elf64-sparc.c (sparc64_elf_relocate_section): Likewise.
	* elf64-x86-64.c (elf64_x86_64_relocate_section): Likewise.
	* elflink.c (elf_reloc_link_order): Likewise.
	* elfxx-ia64.c (elfNN_ia64_relocate_section): Likewise.
	* elfxx-mips.c (_bfd_mips_elf_relocate_section): Likewise.
	(_bfd_elf_mips_get_relocated_section_contents): Likewise.
	* linker.c (_bfd_generic_reloc_link_order): Likewise.
	* pdp11.c (pdp11_aout_link_input_section): Likewise.
	(aout_link_reloc_link_order): Likewise.
	* reloc.c (bfd_generic_get_relocated_section_contents):
	Likewise.
	* xcofflink.c (xcoff_reloc_link_order): Likewise.
	* simple.c (simple_dummy_reloc_overflow): Updated.

include/

2004-10-21  H.J. Lu  <hongjiu.lu@@intel.com>

	PR 463
	* bfdlink.h (bfd_link_callbacks): Add a pointer to struct
	bfd_link_hash_entry to reloc_overflow.

ld/

2004-10-21  H.J. Lu  <hongjiu.lu@@intel.com>

	PR 463
	* ldmain.c (reloc_overflow): Accept a pointer to struct
	bfd_link_hash_entry. Report symbol location for relocation
	overflow.
@
text
@d2 1
a2 1
   Copyright 2000, 2001, 2002, 2003, 2004
d567 1
a567 1
      bfd_byte *newstrings;
d575 1
a575 2
      newstrings = ((bfd_byte *)
		    bfd_realloc ((PTR) ldinfo->strings, newalc));
@


1.56
log
@	* coff-rs6000.c (rs6000coff_vec): Add initializer for
	bfd_is_target_special_symbol.
	* coff64-rs6000.c (rs6000coff64_vec): Likewise.
	* som.c (som_bfd_is_target_special_symbol): Define.
@
text
@d1338 1
a1338 1
	      name = h->root.root.string;
d1349 3
a1351 2
		 (info, name, reloc_type_name, (bfd_vma) 0, input_bfd,
		  input_section, rel->r_vaddr - input_section->vma)))
@


1.55
log
@bfd/
	* bfd.c (_bfd_default_error_handler): Handle %A and %B.
	(bfd_archive_filename, bfd_get_section_ident): Delete.
	* ecofflink.c (bfd_ecoff_debug_accumulate_other): Don't call
	bfd_archive_filename.
	* elflink.c (elf_link_input_bfd): Don't use callbacks->error_handler
	to warn about symbols in discarded sections.  Use _bfd_error_handler.
	* aout-adobe.c (aout_adobe_callback): See below.
	* aout-cris.c (swap_ext_reloc_in): ..
	* coff-arm.c (find_thumb_glue, find_arm_glue,
	coff_arm_relocate_section, bfd_arm_process_before_allocation,
	coff_arm_merge_private_bfd_data, _bfd_coff_arm_set_private_flags,
	coff_arm_copy_private_bfd_data): ..
	* coff-i860.c (i860_reloc_processing): ..
	* coff-mcore.c (mcore_coff_unsupported_reloc,
	coff_mcore_relocate_section): ..
	* coff-ppc.c (coff_ppc_relocate_section): ..
	* coff-rs6000.c (xcoff_create_csect_from_smclas
	* coff-sh.c (sh_relax_section, sh_relax_delete_bytes,
	sh_swap_insns, sh_relocate_section): ..
	* coff-tic54x.c (tic54x_reloc_processing): ..
	* coff-tic80.c (coff_tic80_relocate_section): ..
	* coff64-rs6000.c (xcoff64_create_csect_from_smclas): ..
	* coffcode.h (styp_to_sec_flags, coff_slurp_line_table,
	coff_slurp_symbol_table, coff_classify_symbol,
	coff_slurp_reloc_table): ..
	* coffgen.c (_bfd_coff_read_string_table): ..
	* cofflink.c (coff_link_add_symbols, _bfd_coff_link_input_bfd,
	_bfd_coff_generic_relocate_section): ..
	* cpu-arm.c (bfd_arm_merge_machines): ..
	* cpu-sh.c (sh_merge_bfd_arch): ..
	* elf-hppa.h (elf_hppa_relocate_section): ..
	* elf.c (bfd_elf_string_from_elf_section, setup_group,
	_bfd_elf_setup_group_pointers, bfd_section_from_shdr,
	assign_section_numbers, _bfd_elf_symbol_from_bfd_symbol,
	copy_private_bfd_data, _bfd_elf_validate_reloc): ..
	* elf32-arm.h (find_thumb_glue, find_arm_glue,
	bfd_elf32_arm_process_before_allocation, elf32_thumb_to_arm_stub,
	elf32_arm_to_thumb_stub, elf32_arm_final_link_relocate,
	elf32_arm_relocate_section, elf32_arm_set_private_flags,
	elf32_arm_copy_private_bfd_data, elf32_arm_merge_private_bfd_data): ..
	* elf32-cris.c (cris_elf_relocate_section, cris_elf_check_relocs,
	cris_elf_merge_private_bfd_data
	* elf32-frv.c (elf32_frv_relocate_section, elf32_frv_check_relocs): ..
	* elf32-gen.c (elf32_generic_link_add_symbols): ..
	* elf32-hppa.c (hppa_add_stub, hppa_build_one_stub,
	elf32_hppa_check_relocs, get_local_syms, final_link_relocate,
	elf32_hppa_relocate_section): ..
	* elf32-i370.c (i370_elf_merge_private_bfd_data,
	i370_elf_check_relocs, i370_elf_relocate_section): ..
	* elf32-i386.c (elf_i386_info_to_howto_rel, elf_i386_check_relocs,
	elf_i386_relocate_section): ..
	* elf32-m32r.c (m32r_elf_relocate_section,
	m32r_elf_merge_private_bfd_data): ..
	* elf32-m68hc1x.c (m68hc12_add_stub,
	_bfd_m68hc11_elf_merge_private_bfd_data): ..
	* elf32-m68k.c (elf_m68k_relocate_section): ..
	* elf32-mcore.c (mcore_elf_unsupported_reloc,
	mcore_elf_relocate_section): ..
	* elf32-ppc.c (ppc_elf_merge_private_bfd_data, bad_shared_reloc,
	ppc_elf_check_relocs, ppc_elf_relocate_section,
	ppc_elf_begin_write_processing): ..
	* elf32-s390.c (elf_s390_check_relocs, invalid_tls_insn,
	elf_s390_relocate_section): ..
	* elf32-sh-symbian.c (sh_symbian_import_as,
	sh_symbian_process_embedded_commands,
	sh_symbian_relocate_section): ..
	* elf32-sh.c (sh_elf_relax_section, sh_elf_relax_delete_bytes,
	sh_elf_swap_insns, sh_elf_relocate_section, sh_elf_check_relocs,
	sh_elf_merge_private_data): ..
	* elf32-sparc.c (elf32_sparc_check_relocs,
	elf32_sparc_relocate_section,
	elf32_sparc_merge_private_bfd_data): ..
	* elf32-v850.c (v850_elf_check_relocs,
	v850_elf_merge_private_bfd_data): ..
	* elf32-xtensa.c (elf_xtensa_check_relocs,
	elf_xtensa_relocate_section, elf_xtensa_merge_private_bfd_data): ..
	* elf64-alpha.c (elf64_alpha_relax_with_lituse,
	elf64_alpha_relax_got_load, elf64_alpha_size_got_sections,
	elf64_alpha_relocate_section_r, elf64_alpha_relocate_section): ..
	* elf64-gen.c (elf64_generic_link_add_symbols): ..
	* elf64-ppc.c (ppc64_elf_merge_private_bfd_data, ppc_add_stub,
	ppc64_elf_check_relocs, ppc64_elf_edit_opd,
	ppc64_elf_relocate_section): ..
	* elf64-s390.c (elf_s390_check_relocs, invalid_tls_insn,
	elf_s390_relocate_section): ..
	* elf64-sh64.c (sh_elf64_relocate_section): ..
	* elf64-sparc.c (sparc64_elf_check_relocs,
	sparc64_elf_add_symbol_hook, sparc64_elf_relocate_section,
	sparc64_elf_merge_private_bfd_data): ..
	* elf64-x86-64.c (elf64_x86_64_check_relocs,
	elf64_x86_64_relocate_section): ..
	* elflink.c (_bfd_elf_add_default_symbol,
	_bfd_elf_link_assign_sym_version, elf_link_read_relocs_from_section,
	_bfd_elf_link_output_relocs, elf_link_add_object_symbols,
	bfd_elf_size_dynamic_sections, elf_link_output_extsym,
	elf_get_linked_section_vma, elf_fixup_link_order,
	bfd_elf_final_link, bfd_elf_gc_record_vtinherit,
	bfd_elf_gc_record_vtinherit, _bfd_elf_section_already_linked): ..
	* elfxx-ia64.c (elfNN_ia64_relax_section,
	elfNN_ia64_relocate_section, elfNN_ia64_merge_private_bfd_data): ..
	* elfxx-mips.c (mips_elf_perform_relocation,
	_bfd_mips_elf_check_relocs,
	_bfd_mips_elf_merge_private_bfd_data): ..
	* ieee.c (ieee_slurp_external_symbols): ..
	* ihex.c (ihex_bad_byte, ihex_scan, ihex_read_section): ..
	* libbfd.c (_bfd_generic_verify_endian_match): ..
	* linker.c (_bfd_generic_link_add_one_symbol,
	_bfd_generic_section_already_linked): ..
	* pdp11.c (translate_to_native_sym_flags): ..
	* pe-mips.c (coff_pe_mips_relocate_section): ..
	* peicode.h (pe_ILF_build_a_bfd): ..
	* srec.c (srec_bad_byte): ..
	* stabs.c (_bfd_link_section_stabs): ..
	* xcofflink.c (xcoff_link_add_symbols, xcoff_link_input_bfd): ..
	Replace all uses of bfd_archive_filename and bfd_get_section_ident
	with corresponding %B and %A in _bfd_error_handler format string.
	Replace occurrences of "fprintf (stderr," with _bfd_error_handler
	calls to use %A and %B.  Fix "against symbol .. from section" and
	similar error messages.  Combine multiple _bfd_error_handler calls
	where they were separated due to bfd_archive_filename deficiencies.
	* bfd-in2.h: Regenerate.
include/
	* bfdlink.h (struct bfd_link_callbacks): Remove "error_handler".
	(LD_DEFINITION_IN_DISCARDED_SECTION): Delete.
ld/
	* ldmain.c (link_callbacks): Remove "error_handler".
	* ldmisc.c: Include elf-bfd.h.
	(vfinfo): Sort comment.  Handle %A.  Use %A instead of
	bfd_get_section_indent.
	(error_handler): Delete.
	* ldmisc.h (error_handler): Delete declaration.
@
text
@d2713 1
d2961 1
@


1.54
log
@bfd/

2004-07-21  H.J. Lu  <hongjiu.lu@@intel.com>

	* aout-adobe.c (aout_32_section_already_linked): Defined.
	* aout-target.h (MY_section_already_linked): Likewise.
	* aout-tic30.c (MY_section_already_linked): Likewise.
	* binary.c (binary_section_already_linked): Likewise.
	* bout.c (b_out_section_already_linked): Likewise.
	* coff-alpha.c (_bfd_ecoff_section_already_linked): Likewise.
	* coff-mips.c (_bfd_ecoff_section_already_linked): Likewise.
	* coffcode.h (coff_section_already_linked): Likewise.
	* i386msdos.c (msdos_section_already_linked): Likewise.
	* i386os9k.c (os9k_section_already_linked): Likewise.
	* ieee.c (ieee_section_already_linked): Likewise.
	* ihex.c (ihex_section_already_linked): Likewise.
	* mach-o.c (bfd_mach_o_section_already_linked): Likewise.
	* mmo.c (mmo_section_already_linked): Likewise.
	* nlm-target.h (nlm_section_already_linked): Likewise.
	* oasys.c (oasys_section_already_linked): Likewise.
	* pef.c (bfd_pef_section_already_linked): Likewise.
	* ppcboot.c (ppcboot_section_already_linked): Likewise.
	* som.c (som_bfd_discard_group): Likewise.
	* srec.c (srec_section_already_linked): Likewise.
	* tekhex.c (tekhex_section_already_linked): Likewise.
	* versados.c (versados_section_already_linked): Likewise.
	* vms.c (vms_section_already_linked): Likewise.
	* coff-target.h (_bfd_xcoff_section_already_linked): Likewise.
	* xsym.c (bfd_sym_section_already_linked): Likewise.

	* bfd-in.h (bfd_section_already_linked_table_init): New.
	(bfd_section_already_linked_table_free): Likewise.

	* coff-rs6000.c (rs6000coff_vec): Add
	_bfd_generic_section_already_linked.
	(pmac_xcoff_vec): Likewise.
	* coff64-rs6000.c (rs6000coff64_vec): Likewise.
	(aix5coff64_vec): Likewise.

	* elf-bfd.h (_bfd_elf_section_already_linked): New prototype.
	* elflink.c (_bfd_elf_section_already_linked): New function.

	* elfxx-target.h (bfd_elfNN_section_already_linked): Defined.

	* libbfd-in.h (_bfd_nolink_section_already_linked): Defined.
	(_bfd_generic_section_already_linked): New.
	(bfd_section_already_linked_hash_entry): Likewise.
	(bfd_section_already_linked): Likewise.
	(bfd_section_already_linked_table_lookup): Likewise.
	(bfd_section_already_linked_table_insert): Likewise.

	* linker.c (bfd_section_already_linked): New.
	(_bfd_section_already_linked_table): Likewise.
	(bfd_section_already_linked_table_lookup): Likewise.
	(bfd_section_already_linked_table_insert): Likewise.
	(already_linked_newfunc): Likewise.
	(bfd_section_already_linked_table_init): Likewise.
	(bfd_section_already_linked_table_free): Likewise.
	(_bfd_generic_section_already_linked): Likewise.

	* section.c (bfd_section): Remove comdat.
	(bfd_comdat_info): Moved to ...
	* bfd-in.h (coff_comdat_info): Here.
	(bfd_coff_get_comdat_section): New.
	* coffgen.c (bfd_coff_get_comdat_section): Likewise.
	* libcoff-in.h (coff_section_tdata): Add comdat.
	* coffcode.h (handle_COMDAT): Updated.
	* cofflink.c (coff_link_add_symbols): Likewise.
	* ecoff.c (bfd_debug_section): Likewise.

	* targets.c (bfd_target): Add _section_already_linked.
	(BFD_JUMP_TABLE_LINK): Updated.

	* bfd-in2.h: Regenerated.
	* libbfd.h: Likewise.
	* libcoff.h: Likewise.

binutils/

2004-07-21  H.J. Lu  <hongjiu.lu@@intel.com>

	* objcopy.c (filter_symbols): Use bfd_coff_get_comdat_section
	to access comdat.
	* objdump.c (dump_section_header): Likewise.

ld/

2004-07-21  H.J. Lu  <hongjiu.lu@@intel.com>

	* ldlang.c (already_linked_hash_entry): Removed.
	(already_linked): Likewise.
	(already_linked_table): Likewise.
	(section_already_linked): Call bfd_section_already_linked.
	(lang_process): Replace already_linked_table_init with
	bfd_section_already_linked_table_init and check return. Replace
	already_linked_table_free with bfd_section_already_linked_table_free.
@
text
@d2107 2
a2108 2
	(_("%s: symbol `%s' has unrecognized smclas %d"),
	 bfd_archive_filename (abfd), symbol_name, aux->x_csect.x_smclas);
@


1.53
log
@bfd/
	* section.c (struct sec): Rename "_cooked_size" to "size".
	Rename "_raw_size" to "rawsize".
	(STD_SECTION): Adjust comments.
	(bfd_set_section_size, bfd_get_section_contents): Use size.
	(bfd_malloc_and_get_section): New function.
	* bfd-in.h (bfd_section_size, bfd_get_section_size): Use size.
	* coff-sh.c (sh_relax_section): Alloc coff_section_data struct early.
	Correctly free reloc and contents memory.
	* elf-eh-frame.c (_bfd_elf_discard_section_eh_frame): Delete FIXME
	and fake CIE now that we can shink section size to zero.
	(_bfd_elf_write_section_eh_frame): Likewise..
	* elf32-ppc.c (ppc_elf_relax_section): Delay reading section contents.
	* elf-m10300.c (mn10300_elf_final_link_relocate): Don't use
	_bfd_stab_section_offset.  Use _bfd_elf_section_offset.
	* stabs.c (_bfd_stab_section_offset_): Remove unused args and
	unneeded indirection.
	* elf.c (_bfd_elf_section_offset): .. and update call.
	* libbfd-in.h (_bfd_stab_section_offset): Update prototype.
	* libbfd.h: Regenerate.
	* bfd-in2.h: Regenerate.

	Replace occurrences of "_raw_size" and "_cooked_size" in most places
	with "size".  Set new "rawsize" for stabs, eh_frame, and SEC_MERGE
	sections.  Use "rawsize", if non-zero, for bfd_get_section_contents
	calls if the section might be a stabs, eh_frame, or SEC_MERGE section.
	Similarly use "rawsize", if non-zero, in reloc functions to validate
	reloc addresses.  Use new bfd_malloc_and_get_section in most places
	where bfd_get_section_contents was called.  Expand all occurrences of
	bfd_section_size and bfd_get_section_size.  Rename "raw_size" var in
	grok_prstatus and similar functions to "size".
	* aix386-core.c (aix386_core_file_p): ..
	* aix5ppc-core.c (xcoff64_core_p): ..
	* aout-adobe.c (aout_adobe_callback, aout_adobe_write_object_contents,
	aout_adobe_set_section_contents): ..
	* aout-target.h (callback): ..
	* aout-tic30.c (tic30_aout_callback, tic30_aout_final_link_relocate,
	MY_bfd_final_link): ..
	* aoutf1.h (sunos4_core_file_p): ..
	* aoutx.h (some_aout_object_p, adjust_o_magic, adjust_z_magic,
	adjust_n_magic, adjust_sizes_and_vmas, translate_from_native_sym_flags,
	final_link, aout_link_input_section): ..
	* binary.c (binary_object_p, binary_canonicalize_symtab,
	binary_set_section_contents): ..
	* bout.c (b_out_callback, b_out_write_object_contents,
	b_out_set_section_contents, b_out_bfd_relax_section,
	b_out_bfd_get_relocated_section_contents): ..
	* cisco-core.c (cisco_core_file_validate): ..
	* coff-alpha.c (alpha_ecoff_object_p,
	alpha_ecoff_get_relocated_section_conten, alpha_relocate_section): ..
	* coff-arm.c (coff_arm_relocate_section,
	bfd_arm_allocate_interworking_sections): ..
	* coff-h8300.c (h8300_reloc16_extra_cases,
	h8300_bfd_link_add_symbols): ..
	* coff-mips.c (mips_refhi_reloc, mips_gprel_reloc): ..
	* coff-ppc.c (coff_ppc_relocate_section, ppc_allocate_toc_section,
	ppc_bfd_coff_final_link): ..
	* coff-rs6000.c (xcoff_reloc_type_br, xcoff_ppc_relocate_section): ..
	* coff-sh.c (sh_relax_section, sh_relax_delete_bytes,
	sh_align_loads, sh_coff_get_relocated_section_contents): ..
	* coff64-rs6000.c (xcoff64_write_object_contents,
	xcoff64_reloc_type_br, xcoff64_ppc_relocate_section): ..
	* coffcode.h (coff_compute_section_file_positions,
	coff_write_object_contents): ..
	* coffgen.c (make_a_section_from_file, coff_write_symbols,
	coff_section_symbol, build_debug_section): ..
	* cofflink.c (coff_link_add_symbols, _bfd_coff_final_link,
	process_embedded_commands, _bfd_coff_link_input_bfd,
	_bfd_coff_write_global_sym): ..
	* cpu-arm.c (bfd_arm_update_notes, bfd_arm_get_mach_from_notes): ..
	* cpu-ns32k.c (do_ns32k_reloc, _bfd_ns32k_final_link_relocate): ..
	* dwarf1.c (parse_line_table, _bfd_dwarf1_find_nearest_line): ..
	* dwarf2.c (read_indirect_string, read_abbrevs, decode_line_info,
	_bfd_dwarf2_find_nearest_line): ..
	* ecoff.c (bfd_debug_section, ecoff_set_symbol_info,
	ecoff_compute_section_file_positions,
	_bfd_ecoff_write_object_contents, ecoff_indirect_link_order): ..
	* elf-eh-frame.c (_bfd_elf_discard_section_eh_frame,
	_bfd_elf_discard_section_eh_frame_hdr,
	_bfd_elf_maybe_strip_eh_frame_hdr, _bfd_elf_eh_frame_section_offset,
	_bfd_elf_write_section_eh_frame,
	_bfd_elf_write_section_eh_frame_hdr): ..
	* elf-hppa.h (elf_hppa_sort_unwind): ..
	* elf-m10200.c (mn10200_elf_relax_section,
	mn10200_elf_relax_delete_bytes,
	mn10200_elf_get_relocated_section_contents): ..
	* elf-m10300.c (_bfd_mn10300_elf_create_got_section,
	mn10300_elf_check_relocs, mn10300_elf_relax_section,
	mn10300_elf_relax_delete_bytes,
	mn10300_elf_get_relocated_section_contents,
	_bfd_mn10300_elf_adjust_dynamic_symbol,
	_bfd_mn10300_elf_discard_copies,
	_bfd_mn10300_elf_size_dynamic_sections,
	_bfd_mn10300_elf_finish_dynamic_sections): ..
	* elf.c (_bfd_elf_print_private_bfd_data, bfd_elf_get_bfd_needed_list,
	_bfd_elf_make_section_from_phdr, elf_fake_sections,
	bfd_elf_set_group_contents, map_sections_to_segments,
	elf_sort_sections, assign_file_positions_for_segments,
	SECTION_SIZE, copy_private_bfd_data,
	_bfd_elf_get_dynamic_reloc_upper_bound,
	_bfd_elf_canonicalize_dynamic_reloc, elfcore_maybe_make_sect,
	_bfd_elfcore_make_pseudosection, elfcore_grok_prstatus,
	elfcore_grok_lwpstatus, elfcore_grok_win32pstatus,
	elfcore_grok_note, elfcore_grok_nto_status, elfcore_grok_nto_gregs,
	_bfd_elf_rel_local_sym, _bfd_elf_get_synthetic_symtab): ..
	* elf32-arm.h (bfd_elf32_arm_allocate_interworking_sect,
	bfd_elf32_arm_process_before_allocation,
	elf32_arm_adjust_dynamic_symbol, allocate_dynrelocs,
	elf32_arm_size_dynamic_sections, elf32_arm_finish_dynamic_sections,
	elf32_arm_write_section): ..
	* elf32-cris.c (cris_elf_grok_prstatus,
	elf_cris_finish_dynamic_sections, cris_elf_gc_sweep_hook,
	elf_cris_adjust_gotplt_to_got, elf_cris_adjust_dynamic_symbol,
	cris_elf_check_relocs, elf_cris_size_dynamic_sections,
	elf_cris_discard_excess_dso_dynamics,
	elf_cris_discard_excess_program_dynamics): ..
	* elf32-d30v.c (bfd_elf_d30v_reloc, bfd_elf_d30v_reloc_21): ..
	* elf32-dlx.c (_bfd_dlx_elf_hi16_reloc): ..
	* elf32-frv.c (_frvfdpic_add_dyn_reloc, _frvfdpic_add_rofixup,
	_frv_create_got_section, _frvfdpic_assign_plt_entries,
	elf32_frvfdpic_size_dynamic_sections,
	elf32_frvfdpic_modify_segment_map,
	elf32_frvfdpic_finish_dynamic_sections): ..
	* elf32-h8300.c (elf32_h8_relax_section, elf32_h8_relax_delete_bytes,
	elf32_h8_get_relocated_section_contents): ..
	* elf32-hppa.c (hppa_build_one_stub, hppa_size_one_stub,
	elf32_hppa_adjust_dynamic_symbol, allocate_plt_static,
	allocate_dynrelocs, elf32_hppa_size_dynamic_sections, group_sections,
	elf32_hppa_size_stubs, elf32_hppa_set_gp, elf32_hppa_build_stubs,
	elf32_hppa_finish_dynamic_sections): ..
	* elf32-i370.c (i370_elf_adjust_dynamic_symbol,
	i370_elf_size_dynamic_sections, i370_elf_check_relocs,
	i370_elf_finish_dynamic_sections): ..
	* elf32-i386.c (elf_i386_grok_prstatus, elf_i386_adjust_dynamic_symbol,
	allocate_dynrelocs, elf_i386_size_dynamic_sections,
	elf_i386_relocate_section, elf_i386_finish_dynamic_sections): ..
	* elf32-i860.c (i860_howto_pc26_reloc, i860_howto_pc16_reloc,
	i860_howto_highadj_reloc, i860_howto_splitn_reloc): ..
	* elf32-ip2k.c (ip2k_is_switch_table_128,
	ip2k_relax_switch_table_128, ip2k_is_switch_table_256,
	ip2k_relax_switch_table_256, ip2k_elf_relax_section,
	adjust_all_relocations, ip2k_elf_relax_delete_bytes): ..
	* elf32-m32r.c (m32r_elf_do_10_pcrel_reloc, m32r_elf_hi16_reloc,
	m32r_elf_generic_reloc, m32r_elf_adjust_dynamic_symbol,
	allocate_dynrelocs, m32r_elf_size_dynamic_sections,
	m32r_elf_relocate_section, m32r_elf_finish_dynamic_sections,
	m32r_elf_relax_section, m32r_elf_relax_delete_bytes,
	m32r_elf_get_relocated_section_contents): ..
	* elf32-m68hc11.c (m68hc11_elf_build_one_stub,
	m68hc11_elf_size_one_stub, m68hc11_elf_relax_section,
	m68hc11_elf_relax_delete_bytes): ..
	* elf32-m68hc12.c (m68hc12_elf_build_one_stub,
	m68hc12_elf_size_one_stub): ..
	* elf32-m68hc1x.c (elf32_m68hc11_size_stubs,
	elf32_m68hc11_build_stubs, m68hc11_elf_special_reloc): ..
	* elf32-m68k.c (elf_m68k_check_relocs, elf_m68k_gc_sweep_hook,
	elf_m68k_adjust_dynamic_symbol, elf_m68k_size_dynamic_sections,
	elf_m68k_discard_copies, elf_m68k_finish_dynamic_sections): ..
	* elf32-mips.c (gprel32_with_gp, mips16_gprel_reloc,
	elf32_mips_grok_prstatus): ..
	* elf32-or32.c (or32_elf_consth_reloc): ..
	* elf32-ppc.c (ppc_elf_relax_section, ppc_elf_addr16_ha_reloc,
	elf_create_pointer_linker_section, ppc_elf_create_linker_section,
	ppc_elf_additional_program_headers, ppc_elf_adjust_dynamic_symbol,
	allocate_dynrelocs, ppc_elf_size_dynamic_sections,
	ppc_elf_finish_dynamic_sections, ppc_elf_grok_prstatus,
	ppc_elf_final_write_processing): ..
	* elf32-s390.c (s390_elf_ldisp_reloc, elf_s390_adjust_dynamic_symbol,
	allocate_dynrelocs, elf_s390_size_dynamic_sections,
	elf_s390_finish_dynamic_sections, elf_s390_grok_prstatus): ..
	* elf32-sh.c (sh_elf_reloc_loop, sh_elf_relax_section,
	sh_elf_relax_delete_bytes, sh_elf_align_loads,
	sh_elf_adjust_dynamic_symbol, allocate_dynrelocs,
	sh_elf_size_dynamic_sections, sh_elf_get_relocated_section_contents,
	sh_elf_finish_dynamic_sections, elf32_shlin_grok_prstatus): ..
	* elf32-sh64-com.c (sh64_address_in_cranges,
	sh64_get_contents_type): ..
	* elf32-sh64.c (sh64_find_section_for_address,
	sh64_elf_final_write_processing): ..
	* elf32-sparc.c (sparc_elf_wdisp16_reloc, sparc_elf_hix22_reloc,
	sparc_elf_lox10_reloc, elf32_sparc_adjust_dynamic_symbol,
	allocate_dynrelocs, elf32_sparc_size_dynamic_sections,
	elf32_sparc_relocate_section, elf32_sparc_finish_dynamic_sections): ..
	* elf32-v850.c (v850_elf_reloc, v850_elf_relax_section): ..
	* elf32-vax.c (elf_vax_check_relocs, elf_vax_adjust_dynamic_symbol,
	elf_vax_size_dynamic_sections, elf_vax_discard_copies,
	elf_vax_instantiate_got_entries, elf_vax_relocate_section,
	elf_vax_finish_dynamic_sections): ..
	* elf32-xstormy16.c (xstormy16_elf_24_reloc,
	xstormy16_elf_check_relocs, xstormy16_relax_plt_check,
	xstormy16_elf_relax_section, xstormy16_elf_always_size_sections,
	xstormy16_elf_finish_dynamic_sections): ..
	* elf32-xtensa.c (xtensa_read_table_entries,
	elf_xtensa_allocate_got_size, elf_xtensa_allocate_local_got_size,
	elf_xtensa_size_dynamic_sections, elf_xtensa_do_reloc,
	bfd_elf_xtensa_reloc, elf_xtensa_relocate_section,
	elf_xtensa_combine_prop_entries, elf_xtensa_finish_dynamic_sections,
	elf_xtensa_discard_info_for_section, elf_xtensa_grok_prstatus,
	get_relocation_opcode, retrieve_contents, find_relaxable_sections,
	collect_source_relocs, is_resolvable_asm_expansion, remove_literals,
	relax_section, shrink_dynamic_reloc_sections, relax_property_section,
	xtensa_callback_required_dependence): ..
	* elf64-alpha.c (elf64_alpha_reloc_gpdisp, elf64_alpha_relax_section,
	elf64_alpha_check_relocs, elf64_alpha_adjust_dynamic_symbol,
	elf64_alpha_calc_got_offsets_for_symbol, elf64_alpha_calc_got_offsets,
	elf64_alpha_size_plt_section, elf64_alpha_size_plt_section_1,
	elf64_alpha_always_size_sections, elf64_alpha_calc_dynrel_sizes,
	elf64_alpha_size_rela_got_section, elf64_alpha_size_rela_got_1,
	elf64_alpha_size_dynamic_sections, elf64_alpha_emit_dynrel,
	elf64_alpha_finish_dynamic_sections, elf64_alpha_final_link): ..
	* elf64-hppa.c (allocate_dynrel_entries,
	elf64_hppa_size_dynamic_sections,
	elf64_hppa_finish_dynamic_sections): ..
	* elf64-mips.c (mips_elf64_gprel32_reloc, mips16_gprel_reloc,
	mips_elf64_canonicalize_dynamic_reloc, mips_elf64_slurp_reloc_table,
	elf64_mips_grok_prstatus): ..
	* elf64-mmix.c (mmix_elf_perform_relocation, mmix_elf_reloc,
	mmix_elf_relocate_section, mmix_elf_final_link,
	mmix_set_relaxable_size, _bfd_mmix_after_linker_allocation,
	mmix_elf_relax_section, mmix_elf_get_section_contents): ..
	* elf64-ppc.c (ppc64_elf_object_p, ppc64_elf_grok_prstatus,
	ppc64_elf_check_relocs, ppc64_elf_func_desc_adjust,
	ppc64_elf_adjust_dynamic_symbol, ppc64_elf_edit_opd,
	allocate_dynrelocs, ppc64_elf_size_dynamic_sections,
	ppc_build_one_stub, ppc_size_one_stub, ppc64_elf_next_toc_section,
	toc_adjusting_stub_needed, group_sections, ppc64_elf_size_stubs,
	ppc64_elf_build_stubs, ppc64_elf_relocate_section,
	ppc64_elf_finish_dynamic_sections): ..
	* elf64-s390.c (s390_elf_ldisp_reloc, elf_s390_adjust_dynamic_symbol,
	allocate_dynrelocs, elf_s390_size_dynamic_sections,
	elf_s390_finish_dynamic_sections): ..
	* elf64-sh64.c (sh_elf64_get_relocated_section_contents,
	sh_elf64_check_relocs, sh64_elf64_adjust_dynamic_symbol,
	sh64_elf64_discard_copies, sh64_elf64_size_dynamic_sections,
	sh64_elf64_finish_dynamic_sections): ..
	* elf64-sparc.c (sparc64_elf_slurp_reloc_table, init_insn_reloc,
	sparc64_elf_check_relocs, sparc64_elf_adjust_dynamic_symbol,
	sparc64_elf_size_dynamic_sections, sparc64_elf_relocate_section,
	sparc64_elf_finish_dynamic_symbol,
	sparc64_elf_finish_dynamic_sections): ..
	* elf64-x86-64.c (elf64_x86_64_grok_prstatus,
	elf64_x86_64_adjust_dynamic_symbol, allocate_dynrelocs,
	elf64_x86_64_size_dynamic_sections, elf64_x86_64_relocate_section,
	elf64_x86_64_finish_dynamic_sections): ..
	* elfarm-nabi.c (elf32_arm_nabi_grok_prstatus): ..
	* elfcode.h (elf_slurp_reloc_table): ..
	* elflink.c (_bfd_elf_create_got_section, elf_add_dt_needed_tag,
	elf_finalize_dynstr, elf_link_add_object_symbols,
	bfd_elf_size_dynamic_sections, elf_link_sort_relocs,
	elf_link_input_bfd, bfd_elf_final_link, bfd_elf_discard_info): ..
	* elfn32-mips.c (gprel32_with_gp, mips16_gprel_reloc,
	elf32_mips_grok_prstatus): ..
	* elfxx-ia64.c (elfNN_ia64_relax_section, allocate_dynrel_entries,
	elfNN_ia64_size_dynamic_sections, elfNN_ia64_install_dyn_reloc,
	elfNN_ia64_choose_gp, elfNN_ia64_final_link,
	elfNN_ia64_finish_dynamic_sections): ..
	* elfxx-mips.c (mips_elf_create_procedure_table,
	mips_elf_check_mips16_stubs, _bfd_mips_elf_gprel16_with_gp,
	_bfd_mips_elf_hi16_reloc, _bfd_mips_elf_generic_reloc,
	mips_elf_global_got_index, mips_elf_multi_got,
	mips_elf_create_compact_rel_section, mips_elf_calculate_relocation,
	mips_elf_allocate_dynamic_relocations,
	mips_elf_create_dynamic_relocation, _bfd_mips_elf_fake_sections,
	_bfd_mips_relax_section, _bfd_mips_elf_adjust_dynamic_symbol,
	_bfd_mips_elf_always_size_sections,
	_bfd_mips_elf_size_dynamic_sections,
	_bfd_mips_elf_finish_dynamic_symbol,
	_bfd_mips_elf_finish_dynamic_sections,
	_bfd_mips_elf_modify_segment_map, _bfd_mips_elf_discard_info,
	_bfd_mips_elf_write_section, _bfd_mips_elf_set_section_contents,
	_bfd_elf_mips_get_relocated_section_contents,
	_bfd_mips_elf_final_link, _bfd_mips_elf_merge_private_bfd_data): ..
	* hp300hpux.c (callback): ..
	* hppabsd-core.c (make_bfd_asection): ..
	* hpux-core.c (make_bfd_asection): ..
	* i386linux.c (linux_link_create_dynamic_sections,
	bfd_i386linux_size_dynamic_sections, linux_finish_dynamic_link): ..
	* i386msdos.c (msdos_write_object_contents): ..
	* i386os9k.c (os9k_callback, os9k_write_object_contents,
	os9k_set_section_contents): ..
	* ieee.c (parse_expression, ieee_slurp_external_symbols,
	ieee_slurp_sections, ieee_slurp_debug, ieee_slurp_section_data,
	ieee_write_section_part, do_with_relocs, do_as_repeat,
	do_without_relocs, ieee_write_debug_part, init_for_output,
	ieee_set_section_contents): ..
	* ihex.c (ihex_scan, ihex_read_section, ihex_get_section_contents): ..
	* irix-core.c (do_sections, make_bfd_asection): ..
	* libaout.h (aout_section_merge_with_text_p): ..
	* libbfd.c (_bfd_generic_get_section_contents,
	_bfd_generic_get_section_contents_in_window): ..
	* linker.c (default_indirect_link_order): ..
	* lynx-core.c (make_bfd_asection): ..
	* m68klinux.c (linux_link_create_dynamic_sections,
	bfd_m68klinux_size_dynamic_sections, linux_finish_dynamic_link): ..
	* mach-o.c (bfd_mach_o_make_bfd_section,
	bfd_mach_o_scan_read_dylinker, bfd_mach_o_scan_read_dylib,
	bfd_mach_o_scan_read_thread, bfd_mach_o_scan_read_symtab,
	bfd_mach_o_scan_read_segment): ..
	* merge.c (_bfd_add_merge_section, record_section, merge_strings,
	_bfd_merge_sections): ..
	* mmo.c (mmo_find_sec_w_addr, mmo_get_spec_section, mmo_get_loc,
	mmo_map_set_sizes, mmo_canonicalize_symtab,
	mmo_internal_write_section, mmo_write_object_contents): ..
	* netbsd-core.c (netbsd_core_file_p): ..
	* nlm32-alpha.c (nlm_alpha_read_reloc, nlm_alpha_write_import,
	nlm_alpha_set_public_section): ..
	* nlm32-ppc.c (nlm_powerpc_read_reloc, nlm_powerpc_write_reloc): ..
	* nlm32-sparc.c (nlm_sparc_write_import): ..
	* nlmcode.h (add_bfd_section, nlm_swap_auxiliary_headers_in,
	nlm_compute_section_file_positions): ..
	* oasys.c (oasys_object_p, oasys_slurp_section_data,
	oasys_write_sections, oasys_write_data, oasys_set_section_contents): ..
	* opncls.c (get_debug_link_info): ..
	* osf-core.c (make_bfd_asection): ..
	* pdp11.c (some_aout_object_p, adjust_o_magic, adjust_z_magic,
	adjust_n_magic, adjust_sizes_and_vmas, squirt_out_relocs,
	final_link, aout_link_input_section): ..
	* peXXigen.c (_bfd_XXi_swap_sym_in, _bfd_XXi_swap_aouthdr_out,
	pe_print_idata, pe_print_edata, pe_print_pdata, pe_print_reloc): ..
	* pef.c (bfd_pef_make_bfd_section, bfd_pef_print_loader_section,
	bfd_pef_scan_start_address, bfd_pef_parse_symbols): ..
	* ppcboot.c (ppcboot_object_p, ppcboot_canonicalize_symtab): ..
	* ptrace-core.c (ptrace_unix_core_file_p): ..
	* reloc.c (bfd_perform_relocation, bfd_install_relocation,
	_bfd_final_link_relocate, bfd_generic_relax_section,
	bfd_generic_get_relocated_section_contents): ..
	* reloc16.c (bfd_coff_reloc16_relax_section,
	bfd_coff_reloc16_get_relocated_section_c): ..
	* riscix.c (riscix_some_aout_object_p): ..
	* rs6000-core.c (read_hdr, make_bfd_asection): ..
	* sco5-core.c (make_bfd_asection): ..
	* simple.c (bfd_simple_get_relocated_section_contents): ..
	* som.c (som_object_setup, setup_sections, som_prep_headers,
	som_write_fixups, som_begin_writing, bfd_section_from_som_symbol,
	som_set_reloc_info, som_get_section_contents,
	som_bfd_link_split_section): ..
	* sparclinux.c (linux_link_create_dynamic_sections,
	bfd_sparclinux_size_dynamic_sections, linux_finish_dynamic_link): ..
	* srec.c (srec_scan, srec_read_section, srec_get_section_contents): ..
	* stabs.c (_bfd_link_section_stabs, _bfd_discard_section_stabs,
	_bfd_write_stab_strings, _bfd_stab_section_offset): ..
	* sunos.c (sunos_read_dynamic_info, sunos_create_dynamic_sections,
	bfd_sunos_size_dynamic_sections, sunos_scan_std_relocs,
	sunos_scan_ext_relocs, sunos_scan_dynamic_symbol,
	sunos_write_dynamic_symbol, sunos_check_dynamic_reloc,
	sunos_finish_dynamic_link): ..
	* syms.c (_bfd_stab_section_find_nearest_line): ..
	* tekhex.c (first_phase, tekhex_set_section_contents,
	tekhex_write_object_contents): ..
	* trad-core.c (trad_unix_core_file_p): ..
	* versados.c (process_esd, process_otr, process_otr): ..
	* vms-gsd.c (_bfd_vms_slurp_gsd, _bfd_vms_write_gsd): ..
	* vms-misc.c (add_new_contents): ..
	* vms-tir.c (check_section, new_section, _bfd_vms_write_tir): ..
	* vms.c (vms_set_section_contents): ..
	* xcofflink.c (xcoff_get_section_contents, xcoff_link_add_symbols,
	xcoff_sweep, bfd_xcoff_size_dynamic_sections, xcoff_build_ldsyms,
	_bfd_xcoff_bfd_final_link, xcoff_link_input_bfd): ..
	* xsym.c (bfd_sym_scan): .. See above.

binutils/
	* objcopy.c (copy_section): Don't set _cooked_size.

include/
	* bfdlink.h (struct bfd_link_order): Update comment.

ld/
	* ldlang.c (print_output_section_statement): Don't print size before
	relaxation.
	(IGNORE_SECTION): Remove bfd arg.  Update all callers.

	* ldexp.c (fold_name): .. See below.
	* ldlang.c (section_already_linked, print_output_section_statement,
	print_input_section, insert_pad, size_input_section,
	lang_check_section_addresses, lang_size_sections_1,
	lang_size_sections, lang_do_assignments_1, lang_set_startof,
	lang_one_common, lang_reset_memory_regions, lang_process,
	lang_abs_symbol_at_end_of, lang_do_version_exports_section): ..
	* ldwrite.c (build_link_order, clone_section, ds, split_sections): ..
	* pe-dll.c (process_def_file, generate_reloc): ..
	* emultempl/elf32.em (gld${EMULATION_NAME}_find_statement_assignment,
	gld${EMULATION_NAME}_before_allocation): ..
	* emultempl/mmix-elfnmmo.em (mmix_after_allocation): ..
	* emultempl/sh64elf.em (sh64_elf_${EMULATION_NAME}_before_allocation,
	sh64_elf_${EMULATION_NAME}_after_allocation): ..
	* emultempl/sunos.em (gld${EMULATION_NAME}_before_allocation): ..
	* emultempl/xtensaelf.em (ld_assign_relative_paged_dot,
	ld_local_file_relocations_fit, ld_xtensa_insert_page_offsets): Use
	"size" instead of "_raw_size" and "_cooked_size".  Expand
	bfd_section_size macro invocations.
@
text
@d2742 1
d2989 1
@


1.52
log
@	* section.c (struct sec): Remove usused flags.  Reorganize a little.
	(bfd_get_section_size_before_reloc): Delete.
	(bfd_get_section_size_after_reloc): Delete.
	(STD_SECTION): Update.
	(bfd_get_section_size_now): Delete.
	(bfd_set_section_contents): Don't referece reloc_done.
	(bfd_get_section_contents): Remove reloc_done comment.
	* bout.c (b_out_bfd_get_relocated_section_contents): Don't set
	reloc_done.
	* coff-alpha.c (alpha_ecoff_get_relocated_section_contents): Likewise.
	* ecoff.c (bfd_debug_section): Update initializer.
	* elfxx-mips.c (_bfd_elf_mips_get_relocated_section_contents): Ditto.
	* reloc.c (bfd_generic_get_relocated_section_contents): Likewise.
	* bfd-in.h (bfd_section_size): Expand.
	(bfd_get_section_size): New macro.
	* bfd-in2.h: Regenerate.
	* coff64-rs6000.c (xcoff64_write_object_contents): Replace
	bfd_get_section_size_before_reloc with bfd_get_section_size.
	* coffcode.h (coff_write_object_contents): Likewise.
	* coffgen.c (build_debug_section): Likewise.
	* dwarf1.c (parse_line_table): Likewise.
	(_bfd_dwarf1_find_nearest_line): Likewise.
	* ecoff.c (_bfd_ecoff_write_object_contents): Likewise.
	* i386msdos.c (msdos_write_object_contents): Likewise.
	* pdp11.c (squirt_out_relocs): Likewise.
	* elf32-sh64.c (sh64_find_section_for_address): Remove comment.
	* elf64-mmix.c (mmix_elf_final_link): Update comment.
@
text
@d848 1
a848 1
      section.s_size =  current->_raw_size;
d852 1
a852 1
      if (current->_raw_size == 0
d968 1
a968 1
      internal_a.tsize = bfd_get_section_size (text_sec);
d974 1
a974 1
      internal_a.dsize = bfd_get_section_size (data_sec);
d980 1
a980 1
      internal_a.bsize = bfd_get_section_size (bss_sec);
d1130 1
a1130 2
      && (rel->r_vaddr - input_section->vma + 8
	  <= input_section->_cooked_size))
d1303 1
a1303 1
      if (address > input_section->_raw_size)
@


1.51
log
@binutils ChangeLog:
	2004-05-17  David Heine  <dlheine@@tensilica.com>
	* objcopy.c (setup_bfd_headers): New function.
	(copy_object): Call setup_bfd_headers.
bfd ChangeLog:
	2004-05-17  David Heine  <dlheine@@tensilica.com>
	* aout-target.h (MY_bfd_copy_private_header_data): Define.
	* aout-tic30.c (MY_bfd_copy_private_header_data): Define.
	* bfd.c (bfd_copy_private_header_data): Define.
	* coff-rs6000.c (rs6000coff_vec, pmac_xcoff_vec): Add entries for new
	interface.
	* coff64-rs6000.c (rs6000coff64_vec, aix5coff64_vec): Likewise.
	* coffcode.h (coff_bfd_copy_private_header_data): Define.
	* elf-bfd.h (_bfd_elf_copy_private_header_data): Declare.
	* elf.c (_bfd_elf_copy_private_section_data): Remove code to set up
	segments by calling copy_private_bfd_data.
	(_bfd_elf_copy_private_header_data): Define.
	* elfxx-target.h (bfd_elfNN_bfd_copy_private_header_data): Define.
	* libbfd-in.h (_bfd_generic_bfd_copy_private_header_data): Define.
	* libecoff.h (_bfd_ecoff_bfd_copy_private_header_data): Define.
	* mach-o.c (bfd_mach_o_bfd_copy_private_header_data): Define.
	* mmo.c (mmo_bfd_copy_private_header_data): Define.
	* ppcboot.c (ppcboot_bfd_copy_private_header_data): Define.
	* som.c (som_bfd_copy_private_header_data): Define.
	* targets.c (BFD_JUMP_TABLE_COPY): Add _bfd_copy_private_header_data.
	* vms.c (vms_bfd_copy_private_header_data): Define.
	* bfd-in2.h: Regenerate.
	* libbfd.h: Regenerate.
@
text
@d968 1
a968 1
      internal_a.tsize = bfd_get_section_size_before_reloc (text_sec);
d974 1
a974 1
      internal_a.dsize = bfd_get_section_size_before_reloc (data_sec);
d980 1
a980 1
      internal_a.bsize = bfd_get_section_size_before_reloc (bss_sec);
@


1.50
log
@	* section.c (bfd_make_section_anyway): Add all sections to hash tab.

	* elf-bfd.h (bfd_elf_is_group_section): Declare.
	* elf.c (bfd_elf_is_group_section): New function.
	* elfxx-target.h (bfd_elfNN_bfd_is_group_section
	* section.c (bfd_generic_is_group_section): New function.
	* targets.c (struct bfd_target): Add _bfd_is_group_section field.
	(BFD_JUMP_TABLE_LINK): Adjust.
	* aout-adobe.c (aout_32_bfd_is_group_section): Define.
	* aout-target.h (MY_bfd_is_group_section): Define.
	* aout-tic30.c (MY_bfd_is_group_section): Define.
	* bfd.c (bfd_is_group_section): Define.
	* binary.c (binary_bfd_is_group_section): Define.
	* bout.c (b_out_bfd_is_group_section): Define.
	* coff-alpha.c (_bfd_ecoff_bfd_is_group_section): Define.
	* coff-mips.c (_bfd_ecoff_bfd_is_group_section): Define.
	* coff-rs6000.c (rs6000coff_vec, pmac_xcoff_vec): Adjust.
	* coff64-rs6000.c (rs6000coff64_vec, aix5coff64_vec): Adjust.
	* coffcode.h (coff_bfd_is_group_section): Define.
	* i386msdos.c (msdos_bfd_is_group_section): Define.
	* i386os9k.c (os9k_bfd_is_group_section): Define.
	* ieee.c (ieee_bfd_is_group_section): Define.
	* ihex.c (ihex_bfd_is_group_section): Define.
	* libbfd-in.h (_bfd_nolink_bfd_is_group_section): Define.
	* mach-o.c (bfd_mach_o_bfd_is_group_section): Define.
	* mmo.c (mmo_bfd_is_group_section): Define.
	* nlm-target.h (nlm_bfd_is_group_section): Define.
	* oasys.c (oasys_bfd_is_group_section): Define.
	* pef.c (bfd_pef_bfd_is_group_section): Define.
	* ppcboot.c (ppcboot_bfd_is_group_section): Define.
	* srec.c (srec_bfd_is_group_section): Define.
	* tekhex.c (tekhex_bfd_is_group_section): Define.
	* versados.c (versados_bfd_is_group_section): Define.
	* vms.c (vms_bfd_is_group_section): Define.
	* xsym.c (bfd_sym_bfd_is_group_section): Define.
	* bfd-in2.h: Regenerate.
	* libbfd.h: Regenerate.
@
text
@d2686 1
d2932 1
@


1.49
log
@bfd/
	* bfd.c (bfd_get_synthetic_symtab): Define.
	* targets.c (BFD_JUMP_TABLE_DYNAMIC): Add
	NAME##_get_synthetic_symtab.
	(struct bfd_target): Add _bfd_get_synthetic_symtab.
	* libbfd-in.h (_bfd_nodynamic_get_synthetic_symtab): Define.
	* elf-bfd.h (struct elf_backend_data): Add plt_sym_val and
	relplt_name fields.
	(_bfd_elf_get_synthetic_symtab): New prototype.
	* elfcode.h (elf_get_synthetic_symtab): Define.
	* elf.c (_bfd_elf_get_synthetic_symtab): New function.
	* elfxx-target.h (bfd_elfNN_get_synthetic_symtab): Define.
	(elf_backend_plt_sym_val, elf_backend_relplt_name): Define.
	(elfNN_bed): Add elf_backend_plt_sym_val and elf_backend_relplt_name.
	* bfd-in2.h: Rebuilt.
	* libbfd.h: Rebuilt.
	* elf32-i386.c (elf_i386_plt_sym_val): New function.
	(elf_backend_plt_sym_val): Define.
	* elf64-x86-64.c (elf64_x86_64_plt_sym_val): New function.
	(elf_backend_plt_sym_val): Define.
	* elf32-s390.c (elf_s390_plt_sym_val): New function.
	(elf_backend_plt_sym_val): Define.
	* elf64-s390.c (elf_s390_plt_sym_val): New function.
	(elf_backend_plt_sym_val): Define.
	* elf32-sparc (elf32_sparc_plt_sym_val): New function.
	(elf_backend_plt_sym_val): Define.
	* elf64-sparc.c (sparc64_elf_plt_sym_val): New function.
	(elf_backend_plt_sym_val): Define.
	* elf32-ppc.c (ppc_elf_plt_sym_val): New function.
	(elf_backend_plt_sym_val): Define.
	* aout-target.h (MY_get_synthetic_symtab): Define.
	* aout-tic30.c (MY_get_synthetic_symtab): Define.
	* coff-rs6000.c (rs6000coff_vec): Add
	_bfd_nodynamic_get_synthetic_symtab.
	(pmac_xcoff_vec): Likewise.
	* coff64-rs6000.c (rs6000coff64_vec): Add
	_bfd_nodynamic_get_synthetic_symtab.
	(aix5coff64_vec): Likewise.
	* sunos.c (MY_get_synthetic_symtab): Define.
	* vms.c (vms_get_synthetic_symtab): Define.
binutils/
	* objdump.c (synthsyms, synthcount): New variables.
	(disassemble_data): Use dynsyms for stripped binaries or libraries.
	Add synthetized symbols.
	(dump_bfd): For disassemble, initialize dynsyms always and
	also synthsyms.  Free synthsyms and clear {sym,dynsym,synth}count
	before returning.
@
text
@d2 1
a2 1
   Copyright 2000, 2001, 2002, 2003
d2740 1
d2985 1
@


1.48
log
@	* coff-rs6000.c: Remove ARGSUSED and VARARGS.
	* coff64-rs6000.c: Likewise.
	* coffcode.h: Likewise.
	* elf32-vax.c: Likewise.
	* hash.c: Likewise.
	* hppabsd-core.c: Likewise.
	* hpux-core.c: Likewise.
	* ihex.c: Likewise.
	* netbsd-core.c: Likewise.
	* osf-core.c: Likewise.
	* pdp11.c: Likewise.
	* ptrace-core.c: Likewise.
	* sco5-core.c: Likewise.
	* section.c: Likewise.
	* sunos.c: Likewise.
	* trad-core.c: Likewise.
@
text
@d2745 1
d2989 1
@


1.48.8.1
log
@Merge mainline to intercu branch - 2004-09-15
@
text
@d2 1
a2 1
   Copyright 2000, 2001, 2002, 2003, 2004
d848 1
a848 1
      section.s_size =  current->size;
d852 1
a852 1
      if (current->size == 0
d968 1
a968 1
      internal_a.tsize = text_sec->size;
d974 1
a974 1
      internal_a.dsize = data_sec->size;
d980 1
a980 1
      internal_a.bsize = bss_sec->size;
d1130 2
a1131 1
      && rel->r_vaddr - input_section->vma + 8 <= input_section->size)
d1304 1
a1304 1
      if (address > input_section->size)
d2108 2
a2109 2
	(_("%B: symbol `%s' has unrecognized smclas %d"),
	 abfd, symbol_name, aux->x_csect.x_smclas);
a2685 1
    ((bfd_boolean (*) (bfd *, bfd *)) bfd_true),
a2739 1
    bfd_generic_is_group_section,
a2740 1
    _bfd_generic_section_already_linked,
a2744 1
    _bfd_nodynamic_get_synthetic_symtab,
a2928 1
    ((bfd_boolean (*) (bfd *, bfd *)) bfd_true),
a2982 1
    bfd_generic_is_group_section,
a2983 1
    _bfd_generic_section_already_linked,
a2987 1
    _bfd_nodynamic_get_synthetic_symtab,
@


1.47
log
@	* aix5ppc-core.c: Fix comment typos.
	* aout-arm.c: Likewise.
	* aout-ns32k.c: Likewise.
	* aoutx.h: Likewise.
	* archures.c: Likewise.
	* bfd-in.h: Likewise.
	* bfd.c: Likewise.
	* bfdio.c: Likewise.
	* coff-arm.c: Likewise.
	* coff-h8300.c: Likewise.
	* coff-i860.c: Likewise.
	* coff-m88k.c: Likewise.
	* coff-mcore.c: Likewise.
	* coff-ppc.c: Likewise.
	* coff-rs6000.c: Likewise.
	* coff-z8k.c: Likewise.
	* coff64-rs6000.c: Likewise.
	* coffcode.h: Likewise.
	* cofflink.c: Likewise.
	* cpu-alpha.c: Likewise.
	* cpu-arm.c: Likewise.
	* cpu-ns32k.c: Likewise.
	* dwarf2.c: Likewise.
	* bfd-in2.h: Regenerate.
@
text
@a2056 1
/*ARGSUSED*/
@


1.46
log
@Index: doc/ChangeLog
2003-10-15  Andrew Cagney  <cagney@@redhat.com>

	* bfdint.texi (BFD target vector symbols): Rename _get_symtab to
	_canonicalize_symtab.

2003-10-15  Andrew Cagney  <cagney@@redhat.com>

	* targets.c (BFD_JUMP_TABLE_SYMBOLS): Replace NAME##_get_symtab
	with NAME##_canonicalize_symtab.
	* libcoff-in.h (coff_canonicalize_symtab): Update.
	* xsym.h (bfd_sym_canonicalize_symtab): Update.
	* elf-bfd.h (_bfd_elf_canonicalize_symtab): Update.
	* coffgen.c (coff_canonicalize_symtab): Update.
	* libbfd-in.h (_bfd_nosymbols_canonicalize_symtab): Update.
	* libnlm.h (nlmNAME(canonicalize_symtab)): Update.
	* ieee.c (ieee_vec): Update comment.
	* libecoff.h (_bfd_ecoff_canonicalize_symtab): Update.
	* mmo.c (mmo_canonicalize_symtab): Update.
	* nlm-target.h (nlm_canonicalize_symtab): Update.
	* nlmcode.h (nlm_canonicalize_symtab): Update.
	* i386msdos.c (msdos_canonicalize_symtab): Update.
	* hp300hpux.c (MY (canonicalize_symtab)): Update.
	* oasys.c (oasys_canonicalize_symtab): Update.
	* som.c (som_canonicalize_symtab): Update.
	* pef.c (bfd_pef_canonicalize_symtab): Update.
	* nlmcode.h (nlm_canonicalize_symtab): Update.
	* xsym.c (bfd_sym_canonicalize_symtab): Update.
	* vms.c (vms_canonicalize_symtab): Update.
	* versados.c (versados_canonicalize_symtab): Update.
	* mach-o.c (bfd_mach_o_canonicalize_symtab): Update.
	* ieee.c (ieee_canonicalize_symtab): Update.
	* pdp11.c (NAME(aout,canonicalize_symtab)): Update.
	* reloc.c: Update comment.
	* libaout.h (NAME(aout,canonicalize_symtab)): Update.
	* coff64-rs6000.c (aix5coff64_vec): Update.
	* coff64-rs6000.c (bfd_xcoff_aix5_backend_data): Update.
	* coff-rs6000.c (rs6000coff_vec, pmac_xcoff_vec): Update.
	* aoutx.h (NAME(aout,canonicalize_symtab)): Update.
	* elfxx-target.h (bfd_elfNN_canonicalize_symtab): Update.
	* hp300hpux.c (MY_canonicalize_symtab): Update.
	* ecoff.c (_bfd_ecoff_canonicalize_symtab): Update.
	* aout-tic30.c (MY_canonicalize_symtab): Update.
	* aout-target.h (MY_canonicalize_symtab): Update.
	* ppcboot.c (ppcboot_canonicalize_symtab): Update.
	* elf.c (_bfd_elf_canonicalize_symtab): Update.
	* elfcode.h (elf_canonicalize_symtab): Update.
	* ihex.c (ihex_canonicalize_symtab): Update.
	* tekhex.c (tekhex_canonicalize_symtab): Update.
	* binary.c (binary_canonicalize_symtab): Update.
	* srec.c (srec_canonicalize_symtab): Update.
@
text
@d1794 1
a1794 1
  /* Special case some 16 bit reoloc */
@


1.45
log
@Correct spelling of "relocatable".
@
text
@d2709 1
a2709 1
    coff_get_symtab,
d2952 1
a2952 1
    coff_get_symtab,
@


1.44
log
@* coff64-rs6000.c (xcoff64_ppc_relocate_section): Fix logic reversal.
@
text
@d2 1
a2 1
   Copyright 2000, 2001, 2002
d1280 1
a1280 1
		       && ! info->relocateable)
@


1.43
log
@	* bfd-in.h: Comment typo fix.  Formatting.
	* bfd-in2.h: Regenerate.
	* coff64-rs6000.c (xcoff64_openr_next_archived_file): Warning fix.
	* elf32-m68hc12.c (m68hc12_elf_set_mach_from_flags): Prototype.
	* elf64-mmix.c (mmix_dump_bpo_gregs): Warning fix.
@
text
@d1295 1
a1295 1
	  || ((*xcoff64_calculate_relocation[rel->r_type])
@


1.42
log
@s/boolean/bfd_boolean/ s/true/TRUE/ s/false/FALSE/.  Simplify
comparisons of bfd_boolean vars with TRUE/FALSE.  Formatting.
@
text
@d2022 1
a2022 1
  file_ptr filestart;
d2051 1
a2051 1
  return _bfd_get_elt_at_filepos (archive, filestart);
@


1.41
log
@	* ecoff.c (_bfd_ecoff_set_arch_mach_hook): Don't use hard-coded
	bfd_mach constants.
	(ecoff_get_magic): Likewise.
	* elf32-v850.c (v850_elf_object_p): Likewise.
	(v850_elf_final_write_processing): Likewise.
	* mipsbsd.c (MY(set_arch_mach)): Likewise.
	(MY(write_object_contents)): Likewise.
	* coff64-rs6000.c (xcoff64_write_object_contents): Likewise.
	* coffcode.h (coff_write_object_contents): Likewise.
	(coff_set_arch_mach_hook): Add comment describing machine == 0.
	Remove unnecessary "machine" assignments.
	(coff_write_relocs): Test for the absolute section sym by testing
	section and flags.

	* pdp11.c (NAME(aout,machine_type)): Like aoutx.h.
@
text
@d85 5
a89 3
static void _bfd_xcoff64_swap_lineno_in PARAMS ((bfd *, PTR, PTR));
static unsigned int _bfd_xcoff64_swap_lineno_out PARAMS ((bfd *, PTR, PTR));
static boolean _bfd_xcoff64_put_symbol_name
d92 1
a92 1
static boolean _bfd_xcoff64_put_ldsymbol_name
d95 4
a98 2
static void _bfd_xcoff64_swap_sym_in PARAMS ((bfd *, PTR, PTR));
static unsigned int _bfd_xcoff64_swap_sym_out PARAMS ((bfd *, PTR, PTR));
d103 10
a112 5
static void xcoff64_swap_reloc_in PARAMS ((bfd *, PTR, PTR));
static unsigned int xcoff64_swap_reloc_out PARAMS ((bfd *, PTR, PTR));
extern boolean _bfd_xcoff_mkobject PARAMS ((bfd *));
extern boolean _bfd_xcoff_copy_private_bfd_data PARAMS ((bfd *, bfd *));
extern boolean _bfd_xcoff_is_local_label_name PARAMS ((bfd *, const char *));
d117 9
a125 5
extern boolean _bfd_xcoff_slurp_armap PARAMS ((bfd *));
extern PTR _bfd_xcoff_read_ar_hdr PARAMS ((bfd *));
extern bfd *_bfd_xcoff_openr_next_archived_file PARAMS ((bfd *, bfd *));
extern int _bfd_xcoff_stat_arch_elt PARAMS ((bfd *, struct stat *));
extern boolean _bfd_xcoff_write_armap
d127 8
a134 4
extern boolean _bfd_xcoff_write_archive_contents PARAMS ((bfd *));
extern int _bfd_xcoff_sizeof_headers PARAMS ((bfd *, boolean));
extern void _bfd_xcoff_swap_sym_in PARAMS ((bfd *, PTR, PTR));
extern unsigned int _bfd_xcoff_swap_sym_out PARAMS ((bfd *, PTR, PTR));
d151 3
a153 2
static boolean xcoff64_write_object_contents PARAMS ((bfd *));
static boolean xcoff64_ppc_relocate_section
d157 8
a164 4
static boolean xcoff64_slurp_armap PARAMS ((bfd *));
static const bfd_target *xcoff64_archive_p PARAMS ((bfd *));
static bfd *xcoff64_openr_next_archived_file PARAMS ((bfd *, bfd *));
static int xcoff64_sizeof_headers PARAMS ((bfd *, boolean));
d167 4
a170 2
static boolean xcoff64_is_lineno_count_overflow PARAMS ((bfd *, bfd_vma));
static boolean xcoff64_is_reloc_count_overflow PARAMS ((bfd *, bfd_vma));
d175 4
a178 3
static boolean xcoff64_generate_rtinit
  PARAMS ((bfd *, const char *, const char *, boolean));
static boolean xcoff64_bad_format_hook PARAMS ((bfd *, PTR ));
d181 2
a182 1
static boolean xcoff64_reloc_type_br PARAMS ((XCOFF_RELOC_FUNCTION_ARGS));
d184 1
a184 1
boolean (*xcoff64_calculate_relocation[XCOFF_MAX_CALCULATE_RELOCATION])
d241 3
a243 2
extern const bfd_target * rs6000coff_core_p PARAMS ((bfd *abfd));
extern boolean rs6000coff_core_file_matches_executable_p
d245 4
a248 2
extern char *rs6000coff_core_file_failing_command PARAMS ((bfd *abfd));
extern int rs6000coff_core_file_failing_signal PARAMS ((bfd *abfd));
d528 1
a528 1
static boolean
d535 1
a535 1
  boolean hash;
d538 1
a538 1
  hash = true;
d541 1
a541 1
    hash = false;
d543 1
a543 1
  indx = _bfd_stringtab_add (strtab, name, hash, false);
d546 1
a546 1
    return false;
d551 1
a551 1
  return true;
d554 1
a554 1
static boolean
d579 2
a580 2
	  ldinfo->failed = true;
	  return false;
d593 1
a593 1
  return true;
d752 1
a752 1
static boolean
d757 2
a758 2
  boolean hasrelocs = false;
  boolean haslinno = false;
d765 1
a765 1
  boolean long_section_names;
d777 1
a777 1
	return false;
d833 1
a833 1
    return false;
d835 1
a835 1
  long_section_names = false;
d868 1
a868 1
	hasrelocs = true;
d870 1
a870 1
	haslinno = true;
d890 1
a890 1
	return false;
d941 1
a941 1
	return false;
d944 1
a944 1
	return false;
d946 1
a946 1
	return false;
d948 1
a948 1
	return false;
d1060 1
a1060 1
    return false;
d1068 1
a1068 1
      return false;
d1076 1
a1076 1
      return false;
d1086 1
a1086 1
	return false;
d1094 1
a1094 1
	return false;
d1097 1
a1097 1
  return true;
d1100 1
a1100 1
static boolean
d1117 1
a1117 1
    return false;
d1165 1
a1165 1
  howto->pc_relative = true;
d1175 1
a1175 1
  return true;
d1181 1
a1181 1
boolean
d1223 1
a1223 1
      howto.pc_relative = false;
d1230 1
a1230 1
      howto.partial_inplace = true;
d1232 1
a1232 1
      howto.pcrel_offset = false;
d1284 2
a1285 2
			  rel->r_vaddr - input_section->vma, true)))
		    return false;
d1298 1
a1298 1
	return false;
d1352 1
a1352 1
	    return false;
d1369 1
a1369 1
  return true;
d1386 1
a1386 1
	 false,			/* pc_relative */
d1391 1
a1391 1
	 true,			/* partial_inplace */
d1394 1
a1394 1
	 false),		/* pcrel_offset */
d1401 1
a1401 1
	 false,			/* pc_relative */
d1406 1
a1406 1
	 true,			/* partial_inplace */
d1409 1
a1409 1
	 false),		/* pcrel_offset */
d1416 1
a1416 1
	 true,			/* pc_relative */
d1421 1
a1421 1
	 true,			/* partial_inplace */
d1424 1
a1424 1
	 false),		/* pcrel_offset */
d1431 1
a1431 1
	 false,			/* pc_relative */
d1436 1
a1436 1
	 true,			/* partial_inplace */
d1439 1
a1439 1
	 false),		/* pcrel_offset */
d1446 1
a1446 1
	 false,			/* pc_relative */
d1451 1
a1451 1
	 true,			/* partial_inplace */
d1454 1
a1454 1
	 false),		/* pcrel_offset */
d1461 1
a1461 1
	 false,			/* pc_relative */
d1466 1
a1466 1
	 true,			/* partial_inplace */
d1469 1
a1469 1
	 false),		/* pcrel_offset */
d1476 1
a1476 1
	 false,			/* pc_relative */
d1481 1
a1481 1
	 true,			/* partial_inplace */
d1484 1
a1484 1
	 false),		/* pcrel_offset */
d1493 1
a1493 1
	 false,			/* pc_relative */
d1498 1
a1498 1
	 true,			/* partial_inplace */
d1501 1
a1501 1
	 false),		/* pcrel_offset */
d1510 1
a1510 1
	 true,			/* pc_relative */
d1515 1
a1515 1
	 true,			/* partial_inplace */
d1518 1
a1518 1
	 false),		/* pcrel_offset */
d1527 1
a1527 1
	 false,			/* pc_relative */
d1532 1
a1532 1
	 true,			/* partial_inplace */
d1535 1
a1535 1
	 false),		/* pcrel_offset */
d1542 1
a1542 1
	 false,			/* pc_relative */
d1547 1
a1547 1
	 true,			/* partial_inplace */
d1550 1
a1550 1
	 false),		/* pcrel_offset */
d1559 1
a1559 1
	 false,			/* pc_relative */
d1564 1
a1564 1
	 false,			/* partial_inplace */
d1567 1
a1567 1
	 false),		/* pcrel_offset */
d1577 1
a1577 1
	 false,			/* pc_relative */
d1582 1
a1582 1
	 true,			/* partial_inplace */
d1585 1
a1585 1
	 false),		/* pcrel_offset */
d1592 1
a1592 1
	 false,			/* pc_relative */
d1597 1
a1597 1
	 true,			/* partial_inplace */
d1600 1
a1600 1
	 false),		/* pcrel_offset */
d1607 1
a1607 1
	 false,			/* pc_relative */
d1612 1
a1612 1
	 true,			/* partial_inplace */
d1615 1
a1615 1
	 false),		/* pcrel_offset */
d1622 1
a1622 1
	 false,			/* pc_relative */
d1627 1
a1627 1
	 true,			/* partial_inplace */
d1630 1
a1630 1
	 false),		/* pcrel_offset */
d1637 1
a1637 1
	 false,			/* pc_relative */
d1642 1
a1642 1
	 true,			/* partial_inplace */
d1645 1
a1645 1
	 false),		/* pcrel_offset */
d1652 1
a1652 1
	 false,			/* pc_relative */
d1657 1
a1657 1
	 true,			/* partial_inplace */
d1660 1
a1660 1
	 false),		/* pcrel_offset */
d1667 1
a1667 1
	 false,			/* pc_relative */
d1672 1
a1672 1
	 true,			/* partial_inplace */
d1675 1
a1675 1
	 false),		/* pcrel_offset */
d1682 1
a1682 1
	 false,			/* pc_relative */
d1687 1
a1687 1
	 true,			/* partial_inplace */
d1690 1
a1690 1
	 false),		/* pcrel_offset */
d1697 1
a1697 1
	 false,			/* pc_relative */
d1702 1
a1702 1
	 true,			/* partial_inplace */
d1705 1
a1705 1
	 false),		/* pcrel_offset */
d1712 1
a1712 1
	 false,			/* pc_relative */
d1717 1
a1717 1
	 true,			/* partial_inplace */
d1720 1
a1720 1
	 false),		/* pcrel_offset */
d1726 1
a1726 1
	 false,			/* pc_relative */
d1731 1
a1731 1
	 true,			/* partial_inplace */
d1734 1
a1734 1
	 false),		/* pcrel_offset */
d1741 1
a1741 1
	 false,			/* pc_relative */
d1746 1
a1746 1
	 true,			/* partial_inplace */
d1749 1
a1749 1
	 false),		/* pcrel_offset */
d1756 1
a1756 1
	 false,			/* pc_relative */
d1761 1
a1761 1
	 true,			/* partial_inplace */
d1764 1
a1764 1
	 false),		/* pcrel_offset */
d1771 1
a1771 1
	 false,			/* pc_relative */
d1776 1
a1776 1
	 true,			/* partial_inplace */
d1779 1
a1779 1
	 false),		/* pcrel_offset */
d1849 1
a1849 1
static boolean
d1867 2
a1868 2
      bfd_has_map (abfd) = false;
      return true;
d1875 2
a1876 2
      bfd_has_map (abfd) = false;
      return true;
d1880 1
a1880 1
    return false;
d1885 1
a1885 1
    return false;
d1891 1
a1891 1
    return false;
d1898 1
a1898 1
    return false;
d1900 1
a1900 1
    return false;
d1908 1
a1908 1
      return false;
d1914 1
a1914 1
    return false;
d1931 1
a1931 1
	  return false;
d1937 1
a1937 1
  bfd_has_map (abfd) = true;
d1939 1
a1939 1
  return true;
d2061 1
a2061 1
     boolean reloc ATTRIBUTE_UNUSED;
d2117 1
a2117 1
static boolean
d2122 1
a2122 1
  return false;
d2125 1
a2125 1
static boolean
d2130 1
a2130 1
  return false;
d2149 1
a2149 1
static boolean
d2158 1
a2158 1
    return false;
d2161 1
a2161 1
    return false;
d2163 1
a2163 1
  return true;
d2166 1
a2166 1
static boolean
d2171 1
a2171 1
     boolean rtld;
d2198 1
a2198 1
    return false;
d2287 1
a2287 1
    return false;
d2323 1
a2323 1
    return false;
d2487 1
a2487 1
  return true;
d2497 1
a2497 1
       false,			/* pc_relative */
d2502 1
a2502 1
       true,			/* partial_inplace */
d2505 1
a2505 1
       false);			/* pcrel_offset */
d2542 2
a2543 2
      true,			/* _bfd_coff_long_filenames */
      false,			/* _bfd_coff_long_section_names */
d2545 1
a2545 1
      true,			/* _bfd_coff_force_symnames_in_strings */
d2684 5
a2688 5
    ((boolean (*) (bfd *, bfd *)) bfd_true),
    ((boolean (*) (bfd *, asection *, bfd *, asection *)) bfd_true),
    ((boolean (*) (bfd *, asymbol *, bfd *, asymbol *)) bfd_true),
    ((boolean (*) (bfd *, flagword)) bfd_true),
    ((boolean (*) (bfd *, void * )) bfd_true),
d2698 1
a2698 1
    ((boolean (*) (bfd *, char **, bfd_size_type *, const char **)) bfd_false),
d2755 8
a2762 4
extern const bfd_target *xcoff64_core_p PARAMS ((bfd *));
extern boolean xcoff64_core_file_matches_executable_p PARAMS ((bfd *, bfd *));
extern char *xcoff64_core_file_failing_command PARAMS ((bfd *));
extern int xcoff64_core_file_failing_signal PARAMS ((bfd *));
d2786 2
a2787 2
      true,			/* _bfd_coff_long_filenames */
      false,			/* _bfd_coff_long_section_names */
d2789 1
a2789 1
      true,			/* _bfd_coff_force_symnames_in_strings */
d2927 5
a2931 5
    ((boolean (*) (bfd *, bfd *)) bfd_true),
    ((boolean (*) (bfd *, asection *, bfd *, asection *)) bfd_true),
    ((boolean (*) (bfd *, asymbol *, bfd *, asymbol *)) bfd_true),
    ((boolean (*) (bfd *, flagword)) bfd_true),
    ((boolean (*) (bfd *, void * )) bfd_true),
d2941 1
a2941 1
    ((boolean (*) (bfd *, char **, bfd_size_type *, const char **)) bfd_false),
@


1.41.8.1
log
@Merge drow-cplus-branch to:
  cvs rtag -D 2003-12-14 00:00:00 UTC drow-cplus-merge-20031214 gdb+dejagnu
@
text
@d2 1
a2 1
   Copyright 2000, 2001, 2002, 2003
d85 3
a87 5
static void _bfd_xcoff64_swap_lineno_in
  PARAMS ((bfd *, PTR, PTR));
static unsigned int _bfd_xcoff64_swap_lineno_out
  PARAMS ((bfd *, PTR, PTR));
static bfd_boolean _bfd_xcoff64_put_symbol_name
d90 1
a90 1
static bfd_boolean _bfd_xcoff64_put_ldsymbol_name
d93 2
a94 4
static void _bfd_xcoff64_swap_sym_in
  PARAMS ((bfd *, PTR, PTR));
static unsigned int _bfd_xcoff64_swap_sym_out
  PARAMS ((bfd *, PTR, PTR));
d99 5
a103 10
static void xcoff64_swap_reloc_in
  PARAMS ((bfd *, PTR, PTR));
static unsigned int xcoff64_swap_reloc_out
  PARAMS ((bfd *, PTR, PTR));
extern bfd_boolean _bfd_xcoff_mkobject
  PARAMS ((bfd *));
extern bfd_boolean _bfd_xcoff_copy_private_bfd_data
  PARAMS ((bfd *, bfd *));
extern bfd_boolean _bfd_xcoff_is_local_label_name
  PARAMS ((bfd *, const char *));
d108 5
a112 9
extern bfd_boolean _bfd_xcoff_slurp_armap
  PARAMS ((bfd *));
extern PTR _bfd_xcoff_read_ar_hdr
  PARAMS ((bfd *));
extern bfd *_bfd_xcoff_openr_next_archived_file
  PARAMS ((bfd *, bfd *));
extern int _bfd_xcoff_stat_arch_elt
  PARAMS ((bfd *, struct stat *));
extern bfd_boolean _bfd_xcoff_write_armap
d114 4
a117 8
extern bfd_boolean _bfd_xcoff_write_archive_contents
  PARAMS ((bfd *));
extern int _bfd_xcoff_sizeof_headers
  PARAMS ((bfd *, bfd_boolean));
extern void _bfd_xcoff_swap_sym_in
  PARAMS ((bfd *, PTR, PTR));
extern unsigned int _bfd_xcoff_swap_sym_out
  PARAMS ((bfd *, PTR, PTR));
d134 2
a135 3
static bfd_boolean xcoff64_write_object_contents
  PARAMS ((bfd *));
static bfd_boolean xcoff64_ppc_relocate_section
d139 4
a142 8
static bfd_boolean xcoff64_slurp_armap
  PARAMS ((bfd *));
static const bfd_target *xcoff64_archive_p
  PARAMS ((bfd *));
static bfd *xcoff64_openr_next_archived_file
  PARAMS ((bfd *, bfd *));
static int xcoff64_sizeof_headers
  PARAMS ((bfd *, bfd_boolean));
d145 2
a146 4
static bfd_boolean xcoff64_is_lineno_count_overflow
  PARAMS ((bfd *, bfd_vma));
static bfd_boolean xcoff64_is_reloc_count_overflow
  PARAMS ((bfd *, bfd_vma));
d151 3
a153 4
static bfd_boolean xcoff64_generate_rtinit
  PARAMS ((bfd *, const char *, const char *, bfd_boolean));
static bfd_boolean xcoff64_bad_format_hook
  PARAMS ((bfd *, PTR ));
d156 1
a156 2
static bfd_boolean xcoff64_reloc_type_br
  PARAMS ((XCOFF_RELOC_FUNCTION_ARGS));
d158 1
a158 1
bfd_boolean (*xcoff64_calculate_relocation[XCOFF_MAX_CALCULATE_RELOCATION])
d215 2
a216 3
extern const bfd_target * rs6000coff_core_p
  PARAMS ((bfd *abfd));
extern bfd_boolean rs6000coff_core_file_matches_executable_p
d218 2
a219 4
extern char *rs6000coff_core_file_failing_command
  PARAMS ((bfd *abfd));
extern int rs6000coff_core_file_failing_signal
  PARAMS ((bfd *abfd));
d499 1
a499 1
static bfd_boolean
d506 1
a506 1
  bfd_boolean hash;
d509 1
a509 1
  hash = TRUE;
d512 1
a512 1
    hash = FALSE;
d514 1
a514 1
  indx = _bfd_stringtab_add (strtab, name, hash, FALSE);
d517 1
a517 1
    return FALSE;
d522 1
a522 1
  return TRUE;
d525 1
a525 1
static bfd_boolean
d550 2
a551 2
	  ldinfo->failed = TRUE;
	  return FALSE;
d564 1
a564 1
  return TRUE;
d723 1
a723 1
static bfd_boolean
d728 2
a729 2
  bfd_boolean hasrelocs = FALSE;
  bfd_boolean haslinno = FALSE;
d736 1
a736 1
  bfd_boolean long_section_names;
d748 1
a748 1
	return FALSE;
d804 1
a804 1
    return FALSE;
d806 1
a806 1
  long_section_names = FALSE;
d839 1
a839 1
	hasrelocs = TRUE;
d841 1
a841 1
	haslinno = TRUE;
d861 1
a861 1
	return FALSE;
d912 1
a912 1
	return FALSE;
d915 1
a915 1
	return FALSE;
d917 1
a917 1
	return FALSE;
d919 1
a919 1
	return FALSE;
d1031 1
a1031 1
    return FALSE;
d1039 1
a1039 1
      return FALSE;
d1047 1
a1047 1
      return FALSE;
d1057 1
a1057 1
	return FALSE;
d1065 1
a1065 1
	return FALSE;
d1068 1
a1068 1
  return TRUE;
d1071 1
a1071 1
static bfd_boolean
d1088 1
a1088 1
    return FALSE;
d1136 1
a1136 1
  howto->pc_relative = TRUE;
d1146 1
a1146 1
  return TRUE;
d1152 1
a1152 1
bfd_boolean
d1194 1
a1194 1
      howto.pc_relative = FALSE;
d1201 1
a1201 1
      howto.partial_inplace = TRUE;
d1203 1
a1203 1
      howto.pcrel_offset = FALSE;
d1251 1
a1251 1
		       && ! info->relocatable)
d1255 2
a1256 2
			  rel->r_vaddr - input_section->vma, TRUE)))
		    return FALSE;
d1266 1
a1266 1
	  || !((*xcoff64_calculate_relocation[rel->r_type])
d1269 1
a1269 1
	return FALSE;
d1323 1
a1323 1
	    return FALSE;
d1340 1
a1340 1
  return TRUE;
d1357 1
a1357 1
	 FALSE,			/* pc_relative */
d1362 1
a1362 1
	 TRUE,			/* partial_inplace */
d1365 1
a1365 1
	 FALSE),		/* pcrel_offset */
d1372 1
a1372 1
	 FALSE,			/* pc_relative */
d1377 1
a1377 1
	 TRUE,			/* partial_inplace */
d1380 1
a1380 1
	 FALSE),		/* pcrel_offset */
d1387 1
a1387 1
	 TRUE,			/* pc_relative */
d1392 1
a1392 1
	 TRUE,			/* partial_inplace */
d1395 1
a1395 1
	 FALSE),		/* pcrel_offset */
d1402 1
a1402 1
	 FALSE,			/* pc_relative */
d1407 1
a1407 1
	 TRUE,			/* partial_inplace */
d1410 1
a1410 1
	 FALSE),		/* pcrel_offset */
d1417 1
a1417 1
	 FALSE,			/* pc_relative */
d1422 1
a1422 1
	 TRUE,			/* partial_inplace */
d1425 1
a1425 1
	 FALSE),		/* pcrel_offset */
d1432 1
a1432 1
	 FALSE,			/* pc_relative */
d1437 1
a1437 1
	 TRUE,			/* partial_inplace */
d1440 1
a1440 1
	 FALSE),		/* pcrel_offset */
d1447 1
a1447 1
	 FALSE,			/* pc_relative */
d1452 1
a1452 1
	 TRUE,			/* partial_inplace */
d1455 1
a1455 1
	 FALSE),		/* pcrel_offset */
d1464 1
a1464 1
	 FALSE,			/* pc_relative */
d1469 1
a1469 1
	 TRUE,			/* partial_inplace */
d1472 1
a1472 1
	 FALSE),		/* pcrel_offset */
d1481 1
a1481 1
	 TRUE,			/* pc_relative */
d1486 1
a1486 1
	 TRUE,			/* partial_inplace */
d1489 1
a1489 1
	 FALSE),		/* pcrel_offset */
d1498 1
a1498 1
	 FALSE,			/* pc_relative */
d1503 1
a1503 1
	 TRUE,			/* partial_inplace */
d1506 1
a1506 1
	 FALSE),		/* pcrel_offset */
d1513 1
a1513 1
	 FALSE,			/* pc_relative */
d1518 1
a1518 1
	 TRUE,			/* partial_inplace */
d1521 1
a1521 1
	 FALSE),		/* pcrel_offset */
d1530 1
a1530 1
	 FALSE,			/* pc_relative */
d1535 1
a1535 1
	 FALSE,			/* partial_inplace */
d1538 1
a1538 1
	 FALSE),		/* pcrel_offset */
d1548 1
a1548 1
	 FALSE,			/* pc_relative */
d1553 1
a1553 1
	 TRUE,			/* partial_inplace */
d1556 1
a1556 1
	 FALSE),		/* pcrel_offset */
d1563 1
a1563 1
	 FALSE,			/* pc_relative */
d1568 1
a1568 1
	 TRUE,			/* partial_inplace */
d1571 1
a1571 1
	 FALSE),		/* pcrel_offset */
d1578 1
a1578 1
	 FALSE,			/* pc_relative */
d1583 1
a1583 1
	 TRUE,			/* partial_inplace */
d1586 1
a1586 1
	 FALSE),		/* pcrel_offset */
d1593 1
a1593 1
	 FALSE,			/* pc_relative */
d1598 1
a1598 1
	 TRUE,			/* partial_inplace */
d1601 1
a1601 1
	 FALSE),		/* pcrel_offset */
d1608 1
a1608 1
	 FALSE,			/* pc_relative */
d1613 1
a1613 1
	 TRUE,			/* partial_inplace */
d1616 1
a1616 1
	 FALSE),		/* pcrel_offset */
d1623 1
a1623 1
	 FALSE,			/* pc_relative */
d1628 1
a1628 1
	 TRUE,			/* partial_inplace */
d1631 1
a1631 1
	 FALSE),		/* pcrel_offset */
d1638 1
a1638 1
	 FALSE,			/* pc_relative */
d1643 1
a1643 1
	 TRUE,			/* partial_inplace */
d1646 1
a1646 1
	 FALSE),		/* pcrel_offset */
d1653 1
a1653 1
	 FALSE,			/* pc_relative */
d1658 1
a1658 1
	 TRUE,			/* partial_inplace */
d1661 1
a1661 1
	 FALSE),		/* pcrel_offset */
d1668 1
a1668 1
	 FALSE,			/* pc_relative */
d1673 1
a1673 1
	 TRUE,			/* partial_inplace */
d1676 1
a1676 1
	 FALSE),		/* pcrel_offset */
d1683 1
a1683 1
	 FALSE,			/* pc_relative */
d1688 1
a1688 1
	 TRUE,			/* partial_inplace */
d1691 1
a1691 1
	 FALSE),		/* pcrel_offset */
d1697 1
a1697 1
	 FALSE,			/* pc_relative */
d1702 1
a1702 1
	 TRUE,			/* partial_inplace */
d1705 1
a1705 1
	 FALSE),		/* pcrel_offset */
d1712 1
a1712 1
	 FALSE,			/* pc_relative */
d1717 1
a1717 1
	 TRUE,			/* partial_inplace */
d1720 1
a1720 1
	 FALSE),		/* pcrel_offset */
d1727 1
a1727 1
	 FALSE,			/* pc_relative */
d1732 1
a1732 1
	 TRUE,			/* partial_inplace */
d1735 1
a1735 1
	 FALSE),		/* pcrel_offset */
d1742 1
a1742 1
	 FALSE,			/* pc_relative */
d1747 1
a1747 1
	 TRUE,			/* partial_inplace */
d1750 1
a1750 1
	 FALSE),		/* pcrel_offset */
d1765 1
a1765 1
  /* Special case some 16 bit reloc */
d1820 1
a1820 1
static bfd_boolean
d1838 2
a1839 2
      bfd_has_map (abfd) = FALSE;
      return TRUE;
d1846 2
a1847 2
      bfd_has_map (abfd) = FALSE;
      return TRUE;
d1851 1
a1851 1
    return FALSE;
d1856 1
a1856 1
    return FALSE;
d1862 1
a1862 1
    return FALSE;
d1869 1
a1869 1
    return FALSE;
d1871 1
a1871 1
    return FALSE;
d1879 1
a1879 1
      return FALSE;
d1885 1
a1885 1
    return FALSE;
d1902 1
a1902 1
	  return FALSE;
d1908 1
a1908 1
  bfd_has_map (abfd) = TRUE;
d1910 1
a1910 1
  return TRUE;
d1993 1
a1993 1
  bfd_vma filestart;
d2022 1
a2022 1
  return _bfd_get_elt_at_filepos (archive, (file_ptr) filestart);
d2028 1
d2032 1
a2032 1
     bfd_boolean reloc ATTRIBUTE_UNUSED;
d2088 1
a2088 1
static bfd_boolean
d2093 1
a2093 1
  return FALSE;
d2096 1
a2096 1
static bfd_boolean
d2101 1
a2101 1
  return FALSE;
d2120 1
a2120 1
static bfd_boolean
d2129 1
a2129 1
    return FALSE;
d2132 1
a2132 1
    return FALSE;
d2134 1
a2134 1
  return TRUE;
d2137 1
a2137 1
static bfd_boolean
d2142 1
a2142 1
     bfd_boolean rtld;
d2169 1
a2169 1
    return FALSE;
d2258 1
a2258 1
    return FALSE;
d2294 1
a2294 1
    return FALSE;
d2458 1
a2458 1
  return TRUE;
d2468 1
a2468 1
       FALSE,			/* pc_relative */
d2473 1
a2473 1
       TRUE,			/* partial_inplace */
d2476 1
a2476 1
       FALSE);			/* pcrel_offset */
d2513 2
a2514 2
      TRUE,			/* _bfd_coff_long_filenames */
      FALSE,			/* _bfd_coff_long_section_names */
d2516 1
a2516 1
      TRUE,			/* _bfd_coff_force_symnames_in_strings */
d2655 5
a2659 5
    ((bfd_boolean (*) (bfd *, bfd *)) bfd_true),
    ((bfd_boolean (*) (bfd *, asection *, bfd *, asection *)) bfd_true),
    ((bfd_boolean (*) (bfd *, asymbol *, bfd *, asymbol *)) bfd_true),
    ((bfd_boolean (*) (bfd *, flagword)) bfd_true),
    ((bfd_boolean (*) (bfd *, void * )) bfd_true),
d2669 1
a2669 1
    ((bfd_boolean (*) (bfd *, char **, bfd_size_type *, const char **)) bfd_false),
d2680 1
a2680 1
    coff_canonicalize_symtab,
d2726 4
a2729 8
extern const bfd_target *xcoff64_core_p
  PARAMS ((bfd *));
extern bfd_boolean xcoff64_core_file_matches_executable_p
  PARAMS ((bfd *, bfd *));
extern char *xcoff64_core_file_failing_command
  PARAMS ((bfd *));
extern int xcoff64_core_file_failing_signal
  PARAMS ((bfd *));
d2753 2
a2754 2
      TRUE,			/* _bfd_coff_long_filenames */
      FALSE,			/* _bfd_coff_long_section_names */
d2756 1
a2756 1
      TRUE,			/* _bfd_coff_force_symnames_in_strings */
d2894 5
a2898 5
    ((bfd_boolean (*) (bfd *, bfd *)) bfd_true),
    ((bfd_boolean (*) (bfd *, asection *, bfd *, asection *)) bfd_true),
    ((bfd_boolean (*) (bfd *, asymbol *, bfd *, asymbol *)) bfd_true),
    ((bfd_boolean (*) (bfd *, flagword)) bfd_true),
    ((bfd_boolean (*) (bfd *, void * )) bfd_true),
d2908 1
a2908 1
    ((bfd_boolean (*) (bfd *, char **, bfd_size_type *, const char **)) bfd_false),
d2919 1
a2919 1
    coff_canonicalize_symtab,
@


1.41.6.1
log
@2002-12-23  David Carlton  <carlton@@math.stanford.edu>

	* Merge from mainline; tag is carlton_dictionary-20021223-merge.
@
text
@d85 3
a87 5
static void _bfd_xcoff64_swap_lineno_in
  PARAMS ((bfd *, PTR, PTR));
static unsigned int _bfd_xcoff64_swap_lineno_out
  PARAMS ((bfd *, PTR, PTR));
static bfd_boolean _bfd_xcoff64_put_symbol_name
d90 1
a90 1
static bfd_boolean _bfd_xcoff64_put_ldsymbol_name
d93 2
a94 4
static void _bfd_xcoff64_swap_sym_in
  PARAMS ((bfd *, PTR, PTR));
static unsigned int _bfd_xcoff64_swap_sym_out
  PARAMS ((bfd *, PTR, PTR));
d99 5
a103 10
static void xcoff64_swap_reloc_in
  PARAMS ((bfd *, PTR, PTR));
static unsigned int xcoff64_swap_reloc_out
  PARAMS ((bfd *, PTR, PTR));
extern bfd_boolean _bfd_xcoff_mkobject
  PARAMS ((bfd *));
extern bfd_boolean _bfd_xcoff_copy_private_bfd_data
  PARAMS ((bfd *, bfd *));
extern bfd_boolean _bfd_xcoff_is_local_label_name
  PARAMS ((bfd *, const char *));
d108 5
a112 9
extern bfd_boolean _bfd_xcoff_slurp_armap
  PARAMS ((bfd *));
extern PTR _bfd_xcoff_read_ar_hdr
  PARAMS ((bfd *));
extern bfd *_bfd_xcoff_openr_next_archived_file
  PARAMS ((bfd *, bfd *));
extern int _bfd_xcoff_stat_arch_elt
  PARAMS ((bfd *, struct stat *));
extern bfd_boolean _bfd_xcoff_write_armap
d114 4
a117 8
extern bfd_boolean _bfd_xcoff_write_archive_contents
  PARAMS ((bfd *));
extern int _bfd_xcoff_sizeof_headers
  PARAMS ((bfd *, bfd_boolean));
extern void _bfd_xcoff_swap_sym_in
  PARAMS ((bfd *, PTR, PTR));
extern unsigned int _bfd_xcoff_swap_sym_out
  PARAMS ((bfd *, PTR, PTR));
d134 2
a135 3
static bfd_boolean xcoff64_write_object_contents
  PARAMS ((bfd *));
static bfd_boolean xcoff64_ppc_relocate_section
d139 4
a142 8
static bfd_boolean xcoff64_slurp_armap
  PARAMS ((bfd *));
static const bfd_target *xcoff64_archive_p
  PARAMS ((bfd *));
static bfd *xcoff64_openr_next_archived_file
  PARAMS ((bfd *, bfd *));
static int xcoff64_sizeof_headers
  PARAMS ((bfd *, bfd_boolean));
d145 2
a146 4
static bfd_boolean xcoff64_is_lineno_count_overflow
  PARAMS ((bfd *, bfd_vma));
static bfd_boolean xcoff64_is_reloc_count_overflow
  PARAMS ((bfd *, bfd_vma));
d151 3
a153 4
static bfd_boolean xcoff64_generate_rtinit
  PARAMS ((bfd *, const char *, const char *, bfd_boolean));
static bfd_boolean xcoff64_bad_format_hook
  PARAMS ((bfd *, PTR ));
d156 1
a156 2
static bfd_boolean xcoff64_reloc_type_br
  PARAMS ((XCOFF_RELOC_FUNCTION_ARGS));
d158 1
a158 1
bfd_boolean (*xcoff64_calculate_relocation[XCOFF_MAX_CALCULATE_RELOCATION])
d215 2
a216 3
extern const bfd_target * rs6000coff_core_p
  PARAMS ((bfd *abfd));
extern bfd_boolean rs6000coff_core_file_matches_executable_p
d218 2
a219 4
extern char *rs6000coff_core_file_failing_command
  PARAMS ((bfd *abfd));
extern int rs6000coff_core_file_failing_signal
  PARAMS ((bfd *abfd));
d499 1
a499 1
static bfd_boolean
d506 1
a506 1
  bfd_boolean hash;
d509 1
a509 1
  hash = TRUE;
d512 1
a512 1
    hash = FALSE;
d514 1
a514 1
  indx = _bfd_stringtab_add (strtab, name, hash, FALSE);
d517 1
a517 1
    return FALSE;
d522 1
a522 1
  return TRUE;
d525 1
a525 1
static bfd_boolean
d550 2
a551 2
	  ldinfo->failed = TRUE;
	  return FALSE;
d564 1
a564 1
  return TRUE;
d723 1
a723 1
static bfd_boolean
d728 2
a729 2
  bfd_boolean hasrelocs = FALSE;
  bfd_boolean haslinno = FALSE;
d736 1
a736 1
  bfd_boolean long_section_names;
d748 1
a748 1
	return FALSE;
d804 1
a804 1
    return FALSE;
d806 1
a806 1
  long_section_names = FALSE;
d839 1
a839 1
	hasrelocs = TRUE;
d841 1
a841 1
	haslinno = TRUE;
d861 1
a861 1
	return FALSE;
d912 1
a912 1
	return FALSE;
d915 1
a915 1
	return FALSE;
d917 1
a917 1
	return FALSE;
d919 1
a919 1
	return FALSE;
d1031 1
a1031 1
    return FALSE;
d1039 1
a1039 1
      return FALSE;
d1047 1
a1047 1
      return FALSE;
d1057 1
a1057 1
	return FALSE;
d1065 1
a1065 1
	return FALSE;
d1068 1
a1068 1
  return TRUE;
d1071 1
a1071 1
static bfd_boolean
d1088 1
a1088 1
    return FALSE;
d1136 1
a1136 1
  howto->pc_relative = TRUE;
d1146 1
a1146 1
  return TRUE;
d1152 1
a1152 1
bfd_boolean
d1194 1
a1194 1
      howto.pc_relative = FALSE;
d1201 1
a1201 1
      howto.partial_inplace = TRUE;
d1203 1
a1203 1
      howto.pcrel_offset = FALSE;
d1255 2
a1256 2
			  rel->r_vaddr - input_section->vma, TRUE)))
		    return FALSE;
d1269 1
a1269 1
	return FALSE;
d1323 1
a1323 1
	    return FALSE;
d1340 1
a1340 1
  return TRUE;
d1357 1
a1357 1
	 FALSE,			/* pc_relative */
d1362 1
a1362 1
	 TRUE,			/* partial_inplace */
d1365 1
a1365 1
	 FALSE),		/* pcrel_offset */
d1372 1
a1372 1
	 FALSE,			/* pc_relative */
d1377 1
a1377 1
	 TRUE,			/* partial_inplace */
d1380 1
a1380 1
	 FALSE),		/* pcrel_offset */
d1387 1
a1387 1
	 TRUE,			/* pc_relative */
d1392 1
a1392 1
	 TRUE,			/* partial_inplace */
d1395 1
a1395 1
	 FALSE),		/* pcrel_offset */
d1402 1
a1402 1
	 FALSE,			/* pc_relative */
d1407 1
a1407 1
	 TRUE,			/* partial_inplace */
d1410 1
a1410 1
	 FALSE),		/* pcrel_offset */
d1417 1
a1417 1
	 FALSE,			/* pc_relative */
d1422 1
a1422 1
	 TRUE,			/* partial_inplace */
d1425 1
a1425 1
	 FALSE),		/* pcrel_offset */
d1432 1
a1432 1
	 FALSE,			/* pc_relative */
d1437 1
a1437 1
	 TRUE,			/* partial_inplace */
d1440 1
a1440 1
	 FALSE),		/* pcrel_offset */
d1447 1
a1447 1
	 FALSE,			/* pc_relative */
d1452 1
a1452 1
	 TRUE,			/* partial_inplace */
d1455 1
a1455 1
	 FALSE),		/* pcrel_offset */
d1464 1
a1464 1
	 FALSE,			/* pc_relative */
d1469 1
a1469 1
	 TRUE,			/* partial_inplace */
d1472 1
a1472 1
	 FALSE),		/* pcrel_offset */
d1481 1
a1481 1
	 TRUE,			/* pc_relative */
d1486 1
a1486 1
	 TRUE,			/* partial_inplace */
d1489 1
a1489 1
	 FALSE),		/* pcrel_offset */
d1498 1
a1498 1
	 FALSE,			/* pc_relative */
d1503 1
a1503 1
	 TRUE,			/* partial_inplace */
d1506 1
a1506 1
	 FALSE),		/* pcrel_offset */
d1513 1
a1513 1
	 FALSE,			/* pc_relative */
d1518 1
a1518 1
	 TRUE,			/* partial_inplace */
d1521 1
a1521 1
	 FALSE),		/* pcrel_offset */
d1530 1
a1530 1
	 FALSE,			/* pc_relative */
d1535 1
a1535 1
	 FALSE,			/* partial_inplace */
d1538 1
a1538 1
	 FALSE),		/* pcrel_offset */
d1548 1
a1548 1
	 FALSE,			/* pc_relative */
d1553 1
a1553 1
	 TRUE,			/* partial_inplace */
d1556 1
a1556 1
	 FALSE),		/* pcrel_offset */
d1563 1
a1563 1
	 FALSE,			/* pc_relative */
d1568 1
a1568 1
	 TRUE,			/* partial_inplace */
d1571 1
a1571 1
	 FALSE),		/* pcrel_offset */
d1578 1
a1578 1
	 FALSE,			/* pc_relative */
d1583 1
a1583 1
	 TRUE,			/* partial_inplace */
d1586 1
a1586 1
	 FALSE),		/* pcrel_offset */
d1593 1
a1593 1
	 FALSE,			/* pc_relative */
d1598 1
a1598 1
	 TRUE,			/* partial_inplace */
d1601 1
a1601 1
	 FALSE),		/* pcrel_offset */
d1608 1
a1608 1
	 FALSE,			/* pc_relative */
d1613 1
a1613 1
	 TRUE,			/* partial_inplace */
d1616 1
a1616 1
	 FALSE),		/* pcrel_offset */
d1623 1
a1623 1
	 FALSE,			/* pc_relative */
d1628 1
a1628 1
	 TRUE,			/* partial_inplace */
d1631 1
a1631 1
	 FALSE),		/* pcrel_offset */
d1638 1
a1638 1
	 FALSE,			/* pc_relative */
d1643 1
a1643 1
	 TRUE,			/* partial_inplace */
d1646 1
a1646 1
	 FALSE),		/* pcrel_offset */
d1653 1
a1653 1
	 FALSE,			/* pc_relative */
d1658 1
a1658 1
	 TRUE,			/* partial_inplace */
d1661 1
a1661 1
	 FALSE),		/* pcrel_offset */
d1668 1
a1668 1
	 FALSE,			/* pc_relative */
d1673 1
a1673 1
	 TRUE,			/* partial_inplace */
d1676 1
a1676 1
	 FALSE),		/* pcrel_offset */
d1683 1
a1683 1
	 FALSE,			/* pc_relative */
d1688 1
a1688 1
	 TRUE,			/* partial_inplace */
d1691 1
a1691 1
	 FALSE),		/* pcrel_offset */
d1697 1
a1697 1
	 FALSE,			/* pc_relative */
d1702 1
a1702 1
	 TRUE,			/* partial_inplace */
d1705 1
a1705 1
	 FALSE),		/* pcrel_offset */
d1712 1
a1712 1
	 FALSE,			/* pc_relative */
d1717 1
a1717 1
	 TRUE,			/* partial_inplace */
d1720 1
a1720 1
	 FALSE),		/* pcrel_offset */
d1727 1
a1727 1
	 FALSE,			/* pc_relative */
d1732 1
a1732 1
	 TRUE,			/* partial_inplace */
d1735 1
a1735 1
	 FALSE),		/* pcrel_offset */
d1742 1
a1742 1
	 FALSE,			/* pc_relative */
d1747 1
a1747 1
	 TRUE,			/* partial_inplace */
d1750 1
a1750 1
	 FALSE),		/* pcrel_offset */
d1820 1
a1820 1
static bfd_boolean
d1838 2
a1839 2
      bfd_has_map (abfd) = FALSE;
      return TRUE;
d1846 2
a1847 2
      bfd_has_map (abfd) = FALSE;
      return TRUE;
d1851 1
a1851 1
    return FALSE;
d1856 1
a1856 1
    return FALSE;
d1862 1
a1862 1
    return FALSE;
d1869 1
a1869 1
    return FALSE;
d1871 1
a1871 1
    return FALSE;
d1879 1
a1879 1
      return FALSE;
d1885 1
a1885 1
    return FALSE;
d1902 1
a1902 1
	  return FALSE;
d1908 1
a1908 1
  bfd_has_map (abfd) = TRUE;
d1910 1
a1910 1
  return TRUE;
d1993 1
a1993 1
  bfd_vma filestart;
d2022 1
a2022 1
  return _bfd_get_elt_at_filepos (archive, (file_ptr) filestart);
d2032 1
a2032 1
     bfd_boolean reloc ATTRIBUTE_UNUSED;
d2088 1
a2088 1
static bfd_boolean
d2093 1
a2093 1
  return FALSE;
d2096 1
a2096 1
static bfd_boolean
d2101 1
a2101 1
  return FALSE;
d2120 1
a2120 1
static bfd_boolean
d2129 1
a2129 1
    return FALSE;
d2132 1
a2132 1
    return FALSE;
d2134 1
a2134 1
  return TRUE;
d2137 1
a2137 1
static bfd_boolean
d2142 1
a2142 1
     bfd_boolean rtld;
d2169 1
a2169 1
    return FALSE;
d2258 1
a2258 1
    return FALSE;
d2294 1
a2294 1
    return FALSE;
d2458 1
a2458 1
  return TRUE;
d2468 1
a2468 1
       FALSE,			/* pc_relative */
d2473 1
a2473 1
       TRUE,			/* partial_inplace */
d2476 1
a2476 1
       FALSE);			/* pcrel_offset */
d2513 2
a2514 2
      TRUE,			/* _bfd_coff_long_filenames */
      FALSE,			/* _bfd_coff_long_section_names */
d2516 1
a2516 1
      TRUE,			/* _bfd_coff_force_symnames_in_strings */
d2655 5
a2659 5
    ((bfd_boolean (*) (bfd *, bfd *)) bfd_true),
    ((bfd_boolean (*) (bfd *, asection *, bfd *, asection *)) bfd_true),
    ((bfd_boolean (*) (bfd *, asymbol *, bfd *, asymbol *)) bfd_true),
    ((bfd_boolean (*) (bfd *, flagword)) bfd_true),
    ((bfd_boolean (*) (bfd *, void * )) bfd_true),
d2669 1
a2669 1
    ((bfd_boolean (*) (bfd *, char **, bfd_size_type *, const char **)) bfd_false),
d2726 4
a2729 8
extern const bfd_target *xcoff64_core_p
  PARAMS ((bfd *));
extern bfd_boolean xcoff64_core_file_matches_executable_p
  PARAMS ((bfd *, bfd *));
extern char *xcoff64_core_file_failing_command
  PARAMS ((bfd *));
extern int xcoff64_core_file_failing_signal
  PARAMS ((bfd *));
d2753 2
a2754 2
      TRUE,			/* _bfd_coff_long_filenames */
      FALSE,			/* _bfd_coff_long_section_names */
d2756 1
a2756 1
      TRUE,			/* _bfd_coff_force_symnames_in_strings */
d2894 5
a2898 5
    ((bfd_boolean (*) (bfd *, bfd *)) bfd_true),
    ((bfd_boolean (*) (bfd *, asection *, bfd *, asection *)) bfd_true),
    ((bfd_boolean (*) (bfd *, asymbol *, bfd *, asymbol *)) bfd_true),
    ((bfd_boolean (*) (bfd *, flagword)) bfd_true),
    ((bfd_boolean (*) (bfd *, void * )) bfd_true),
d2908 1
a2908 1
    ((bfd_boolean (*) (bfd *, char **, bfd_size_type *, const char **)) bfd_false),
@


1.41.6.2
log
@2003-02-07  David Carlton  <carlton@@math.stanford.edu>

	* Merge with mainline; tag is carlton_dictionary-20030207-merge.
@
text
@d1295 1
a1295 1
	  || !((*xcoff64_calculate_relocation[rel->r_type])
@


1.41.6.3
log
@2003-06-27  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton_dictionary-20030627-merge.
@
text
@d2 1
a2 1
   Copyright 2000, 2001, 2002, 2003
d1280 1
a1280 1
		       && ! info->relocatable)
@


1.41.6.4
log
@2003-11-11  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton-dictionary-20031111-merge.
@
text
@d2709 1
a2709 1
    coff_canonicalize_symtab,
d2952 1
a2952 1
    coff_canonicalize_symtab,
@


1.41.6.5
log
@2003-12-15  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton_dictionary-20031215-merge.
	* cp-support.c (class_name_from_physname): Add DMGL_PARAMS to call
	to cplus_demangle.
	(method_name_from_physname): Ditto.
@
text
@d1794 1
a1794 1
  /* Special case some 16 bit reloc */
d2057 1
@


1.40
log
@	* coff-rs6000.c (rs6000coff_vec <object_flags>): Add SEC_CODE and
	SEC_DATA.
	(pmac_xcoff_vec): Likewise.
	* coff64-rs6000.c (rs6000coff64_vec): Likewise.
	(aix5coff64_vec): Likewise.
@
text
@d1017 1
a1017 1
	      if (bfd_get_mach (abfd) == 0)
@


1.39
log
@	* libxcoff.h: Use PARAMS on function declarations.
	* coff-rs6000.c (xcoff_generate_rtinit): Simplify size calc.
	* coff64-rs6000.c (xcoff64_generate_rtinit): Likewise.
@
text
@d2598 1
a2598 1
    (SEC_HAS_CONTENTS | SEC_ALLOC | SEC_LOAD | SEC_RELOC),
d2837 1
a2837 1
    (SEC_HAS_CONTENTS | SEC_ALLOC | SEC_LOAD | SEC_RELOC),
@


1.38
log
@	* coff-rs6000.c: (xcoff_rtype2howto): Don't place reloc address in
	addend.
	* coff64-rs6000.c: (xcoff64_rtype2howto): Likewise.
@
text
@d2254 1
a2254 1
  data_buffer_size += (data_buffer_size & 7) ? 8 - (data_buffer_size & 7) : 0;
@


1.37
log
@	* coff-rs6000.c: Formatting fixes.
	(xcoff_calculate_relocation): Use PARAMS in declaration.
	(xcoff_complain_overflow): Likewise.
	(xcoff_ppc_relocate_section): Use old-style function pointer call.
	(bfd_xcoff_backend_data): Remove useless comments.
	(rs6000coff_vec): Likewise.
	(bfd_pmac_xcoff_backend_data): Likewise.
	(pmac_xcoff_vec): Likewise.
	* coff64-rs6000.c: Formatting fixes.
	(xcoff64_calculate_relocation): Use PARAMS in declaration.
	(xcoff64_ppc_relocate_section): Use old-style function pointer call.
	(bfd_xcoff_backend_data): Remove useless comments.
	(rs6000coff64_vec): Likewise.
	(bfd_xcoff_aix5_backend_data): Likewise.
	(aix5coff64_vec): Likewise.
@
text
@a1790 5

  /* Put a meaningful value in addend */
  relent->addend = (internal->r_size & 0x80
		    ? -internal->r_vaddr
		    : internal->r_vaddr);
@


1.36
log
@	* coff-rs6000.c (xcoff_howto_table): Revert some of last change to
	mask entries.  Use complain_overflow_dont for R_REF.
	(xcoff_reloc_type_ba): Revert last change.
	(xcoff_reloc_type_br): Likewise.
	(xcoff_reloc_type_crel): Likewise.
	(xcoff_ppc_relocate_section): Likewise.
	* coff64-rs6000.c (xcoff64_reloc_type_br): Likewise.
	(xcoff64_ppc_relocate_section): Likewise.
	(xcoff64_howto_table): Revert some of last change to mask entries.
	Use complain_overflow_dont for R_REF.
@
text
@d159 1
a159 1
     (XCOFF_RELOC_FUNCTION_ARGS) =
d161 4
a164 4
  xcoff_reloc_type_pos,  /* R_POS   (0x00) */
  xcoff_reloc_type_neg,  /* R_NEG   (0x01) */
  xcoff_reloc_type_rel,  /* R_REL   (0x02) */
  xcoff_reloc_type_toc,  /* R_TOC   (0x03) */
d166 5
a170 5
  xcoff_reloc_type_toc,  /* R_GL    (0x05) */
  xcoff_reloc_type_toc,  /* R_TCL   (0x06) */
  xcoff_reloc_type_fail, /*         (0x07) */
  xcoff_reloc_type_ba,   /* R_BA    (0x08) */
  xcoff_reloc_type_fail, /*         (0x09) */
d172 4
a175 4
  xcoff_reloc_type_fail, /*         (0x0b) */
  xcoff_reloc_type_pos,  /* R_RL    (0x0c) */
  xcoff_reloc_type_pos,  /* R_RLA   (0x0d) */
  xcoff_reloc_type_fail, /*         (0x0e) */
d177 4
a180 4
  xcoff_reloc_type_fail, /*         (0x10) */
  xcoff_reloc_type_fail, /*         (0x11) */
  xcoff_reloc_type_toc,  /* R_TRL   (0x12) */
  xcoff_reloc_type_toc,  /* R_TRLA  (0x13) */
d183 1
a183 1
  xcoff_reloc_type_ba,   /* R_CAI   (0x16) */
d185 2
a186 2
  xcoff_reloc_type_ba,   /* R_RBA   (0x18) */
  xcoff_reloc_type_ba,   /* R_RBAC  (0x19) */
d188 1
a188 1
  xcoff_reloc_type_ba,   /* R_RBRC  (0x1b) */
d217 1
a217 1
  PARAMS((bfd *cbfd, bfd *ebfd));
d725 1
a725 1
     bfd * abfd;
d889 5
a893 3
  internal_a.magic = (abfd->flags & D_PAGED) ? RS6K_AOUTHDR_ZMAGIC :
    (abfd->flags & WP_TEXT) ? RS6K_AOUTHDR_NMAGIC :
    RS6K_AOUTHDR_OMAGIC;
d1059 1
a1059 1
      bfd_coff_swap_aouthdr_out (abfd, (PTR) & internal_a, (PTR) buff);
d1071 2
a1072 2
static boolean 
xcoff64_reloc_type_br (input_bfd, input_section, output_bfd, rel, sym, howto, 
d1087 1
a1087 1
  if (0 > rel->r_symndx) 
d1099 4
a1102 4
  if (NULL != h 
      && bfd_link_hash_defined == h->root.type 
      && (rel->r_vaddr - input_section->vma + 8 <= 
	  input_section->_cooked_size)) 
d1106 1
a1106 1
      
d1109 2
a1110 2
      
      /* The _ptrgl function is magic.  It is used by the AIX compiler to call 
d1112 1
a1112 1
      if (h->smclas == XMC_GL || strcmp (h->root.root.string, "._ptrgl") == 0) 
d1114 6
a1119 6
	  if (next == 0x4def7b82 		       /* cror 15,15,15  */
	      || next == 0x4ffffb82  	               /* cror 31,31,31  */
	      || next == 0x60000000)                   /* ori  r0,r0,0   */
	    bfd_put_32 (input_bfd, 0xe8410028, pnext); /* ld   r2,40(r1) */
	} 
      else 
d1121 2
a1122 2
	  if (next == 0xe8410028)		       /* ld r2,40(r1)   */
	    bfd_put_32 (input_bfd, 0x60000000, pnext); /* ori r0,r0,0    */
d1124 2
a1125 2
    } 
  else if (NULL != h && bfd_link_hash_undefined == h->root.type) 
d1129 1
a1129 1
	 is greater than 2^25, the linker will return an invalid error 
d1131 1
a1131 1
	 truncated but no it not important.  For this case, disable the 
d1135 1
a1135 1
  
d1139 1
a1139 1
  
d1142 1
a1142 1
  
d1144 2
a1145 2
  *relocation -= (input_section->output_section->vma + 
		  input_section->output_offset);
d1184 2
a1185 2
         merely used to prevent garbage collection from occurring for
         the csect including the symbol which it references.  */
d1196 3
a1198 2
      howto.complain_on_overflow = rel->r_size & 0x80 ? 
	complain_overflow_signed : complain_overflow_bitfield;
d1202 1
a1202 1
      howto.src_mask = howto.dst_mask = N_ONES(howto.bitsize);
d1210 1
a1210 1
      symndx = rel->r_symndx;      
d1212 1
a1212 1
      if (-1 != symndx)	
d1215 1
a1215 1
	  
d1219 2
a1220 2
	  
	  if (NULL == h) 
d1233 2
a1234 2
	    } 
	  else 
d1236 2
a1237 2
	      if (h->root.type == bfd_link_hash_defined 
		  || h->root.type == bfd_link_hash_defweak) 
d1243 2
a1244 2
		} 
	      else if (h->root.type == bfd_link_hash_common) 
d1249 3
a1251 3
		} 
	      else if ((0 == (h->flags & (XCOFF_DEF_DYNAMIC | XCOFF_IMPORT))) 
		       && ! info->relocateable) 
d1257 1
a1257 1
		  
d1264 5
a1268 5
      
      if (rel->r_type >= XCOFF_MAX_CALCULATE_RELOCATION 
	  || (false == xcoff64_calculate_relocation[rel->r_type]
	      (input_bfd, input_section, output_bfd, rel, sym, &howto, val, 
	       addend, &relocation, contents))) 
d1270 1
a1270 1
      
d1274 1
a1274 1
      
d1276 2
a1277 2
	abort();
      
d1283 1
a1283 1
      else 
d1285 3
a1287 3
      
      /* overflow.  
	 
d1292 7
a1298 7
      
      if ((unsigned int) howto.complain_on_overflow >= 
	  XCOFF_MAX_COMPLAIN_OVERFLOW)
	abort();
      
      if ((true == xcoff_complain_overflow[howto.complain_on_overflow]
	   (input_bfd, value_to_relocate, relocation, &howto))) 
d1303 2
a1304 2
	  
	  if (symndx == -1) 
d1307 2
a1308 2
	    } 
	  else if (h != NULL) 
d1311 2
a1312 2
	    } 
	  else 
d1319 1
a1319 1
	  
d1327 4
a1330 4
      value_to_relocate = ((value_to_relocate & ~howto.dst_mask) | 
			   (((value_to_relocate & howto.src_mask) + 
			     relocation) & howto.dst_mask));
      
d1338 1
a1338 1
      
d1412 1
a1412 1
  /* I don't really know what this is.  */
d1525 1
a1525 1
  /* Non-relocating reference.  */
d1618 1
a1618 1
  /* Modifiable call relative.  */
d1723 6
a1728 6
  HOWTO (R_RBR,	                /* type */
	 0,	                /* rightshift */
	 1,	                /* size (0 = byte, 1 = short, 2 = long) */
	 16,	                /* bitsize */
	 false,	                /* pc_relative */
	 0,	                /* bitpos */
d1730 6
a1735 6
	 0,		        /* special_function */
	 "R_RBR_16",            /* name */
	 true,	                /* partial_inplace */
	 0xffff,	        /* src_mask */
	 0xffff,        	/* dst_mask */
	 false),                /* pcrel_offset */
d1764 1
a1764 1
  
d1768 1
a1768 1
      if (R_BA == internal->r_type) 
d1770 1
a1770 1
      else if (R_RBR == internal->r_type) 
d1772 1
a1772 1
      else if (R_RBA == internal->r_type) 
d1778 1
a1778 1
      if (R_POS == internal->r_type) 
d1781 1
a1781 1
  
d1793 3
a1795 2
  relent->addend = (internal->r_size & 0x80) ? - internal->r_vaddr 
    : internal->r_vaddr;
d2233 23
a2255 23
     0x0000           0x00000000 : rtl
     0x0004           0x00000000 :
     0x0008           0x00000018 : offset to init, or 0
     0x000C           0x00000038 : offset to fini, or 0
     0x0010           0x00000010 : size of descriptor
     0x0014           0x00000000 : pad
     0x0018           0x00000000 : init, needs a reloc
     0x001C           0x00000000 :
     0x0020           0x00000058 : offset to init name
     0x0024           0x00000000 : flags, padded to a word
     0x0028           0x00000000 : empty init
     0x002C           0x00000000 :
     0x0030           0x00000000 :
     0x0034           0x00000000 :
     0x0038           0x00000000 : fini, needs a reloc
     0x003C           0x00000000 :
     0x0040           0x00000??? : offset to fini name
     0x0044           0x00000000 : flags, padded to a word
     0x0048           0x00000000 : empty fini
     0x004C           0x00000000 :
     0x0050           0x00000000 :
     0x0054           0x00000000 :
     0x0058           init name
d2294 1
a2294 1
  if (true == rtld)
d2498 93
a2590 98
{
  { /* COFF backend, defined in libcoff.h.  */
    _bfd_xcoff64_swap_aux_in,		/* _bfd_coff_swap_aux_in */
    _bfd_xcoff64_swap_sym_in,		/* _bfd_coff_swap_sym_in */
    _bfd_xcoff64_swap_lineno_in,	/* _bfd_coff_swap_lineno_in */
    _bfd_xcoff64_swap_aux_out,		/* _bfd_swap_aux_out */
    _bfd_xcoff64_swap_sym_out,		/* _bfd_swap_sym_out */
    _bfd_xcoff64_swap_lineno_out,	/* _bfd_swap_lineno_out */
    xcoff64_swap_reloc_out,		/* _bfd_swap_reloc_out */
    coff_swap_filehdr_out,		/* _bfd_swap_filehdr_out */
    coff_swap_aouthdr_out,		/* _bfd_swap_aouthdr_out */
    coff_swap_scnhdr_out,		/* _bfd_swap_scnhdr_out */
    FILHSZ,				/* _bfd_filhsz */
    AOUTSZ,				/* _bfd_aoutsz */
    SCNHSZ,				/* _bfd_scnhsz */
    SYMESZ,				/* _bfd_symesz */
    AUXESZ,				/* _bfd_auxesz */
    RELSZ,				/* _bfd_relsz */
    LINESZ,				/* _bfd_linesz */
    FILNMLEN,				/* _bfd_filnmlen */
    true,				/* _bfd_coff_long_filenames */
    false,				/* _bfd_coff_long_section_names */
    (3),			/* _bfd_coff_default_section_alignment_power */
    true,			/* _bfd_coff_force_symnames_in_strings */
    4,				/* _bfd_coff_debug_string_prefix_length */
    coff_swap_filehdr_in,		/* _bfd_coff_swap_filehdr_in */
    coff_swap_aouthdr_in,		/* _bfd_swap_aouthdr_in */
    coff_swap_scnhdr_in,		/* _bfd_swap_scnhdr_in */
    xcoff64_swap_reloc_in,		/* _bfd_reloc_in */
    xcoff64_bad_format_hook,		/* _bfd_bad_format_hook */
    coff_set_arch_mach_hook,		/* _bfd_set_arch_mach_hook */
    coff_mkobject_hook,			/* _bfd_mkobject_hook */
    styp_to_sec_flags,			/* _bfd_syp_to_sec_flags */
    coff_set_alignment_hook,		/* _bfd_set_alignment_hook */
    coff_slurp_symbol_table,		/* _bfd_coff_slurp_symbol_table */
    symname_in_debug_hook,		/* _coff_symname_in_debug_hook */
    coff_pointerize_aux_hook,		/* _bfd_coff_pointerize_aux_hook */
    coff_print_aux,			/* bfd_coff_print_aux */
    dummy_reloc16_extra_cases,		/* _bfd_coff_reloc16_extra_cases */
    dummy_reloc16_estimate,		/* _bfd_coff_reloc16_estimate */
    NULL,				/* bfd_coff_sym_is_global */
    /* _bfd_coff_compute_section_file_positions */
    coff_compute_section_file_positions,
    NULL ,				/* _bfd_coff_start_final_link */
    xcoff64_ppc_relocate_section,	/* _bfd_coff_relocate_section */
    coff_rtype_to_howto,		/* _bfd_coff_rtype_to_howto */
    NULL ,				/* _bfd_coff_addust_symndx */
    _bfd_generic_link_add_one_symbol,	/* _bfd_coff_add_one_symbol */
    coff_link_output_has_begun,		/* _bfd_coff_link_output_has_begun */
    coff_final_link_postscript		/* _bfd_coff_final_link_postscript */
  },

  0x01EF,				/* magic number */
  bfd_arch_powerpc,			/* architecture */
  bfd_mach_ppc_620,			/* machine */

  /* Function pointers to xcoff specific swap routines.  */
  xcoff64_swap_ldhdr_in,		/* _xcoff_swap_ldhdr_in */
  xcoff64_swap_ldhdr_out,		/* _xcoff_swap_ldhdr_out */
  xcoff64_swap_ldsym_in,		/* _xcoff_swap_ldsym_in */
  xcoff64_swap_ldsym_out,		/* _xcoff_swap_ldsym_out */
  xcoff64_swap_ldrel_in,		/* _xcoff_swap_ldrel_in */
  xcoff64_swap_ldrel_out,		/* _xcoff_swap_ldrel_out */

  /* Sizes.  */
  LDHDRSZ,				/* _xcoff_ldhdrsz */
  LDSYMSZ,				/* _xcoff_ldsymsz */
  LDRELSZ,				/* _xcoff_ldrelsz */
  24,					/* _xcoff_function_descriptor_size */
  0,					/* _xcoff_small_aout_header_size */

  /* Versions.  */
  2,					/* _xcoff_ldhdr_version */

  /* xcoff vs xcoff64 putting symbol names.  */
  _bfd_xcoff64_put_symbol_name,		/* _xcoff_put_symbol_name */
  _bfd_xcoff64_put_ldsymbol_name,	/* _xcoff_put_ldsymbol_name */

  /* Dynamic reloc howto.  */
  &xcoff64_dynamic_reloc,

  xcoff64_create_csect_from_smclas,

  /* Lineno and reloc count overflow.  */
  xcoff64_is_lineno_count_overflow,
  xcoff64_is_reloc_count_overflow,

  xcoff64_loader_symbol_offset,
  xcoff64_loader_reloc_offset,

  /* glink.  */
  &xcoff64_glink_code[0],
  40,					/* _xcoff_glink_size */

  /* rtinit.  */
  88,					/* _xcoff_rtinit_size */
  xcoff64_generate_rtinit,		/* _xcoff_generate_rtinit */
};
d2594 76
a2669 43
{
  "aixcoff64-rs6000",
  bfd_target_xcoff_flavour,
  BFD_ENDIAN_BIG,		/* data byte order is big */
  BFD_ENDIAN_BIG,		/* header byte order is big */

  (HAS_RELOC | EXEC_P |		/* object flags */
   HAS_LINENO | HAS_DEBUG | DYNAMIC |
   HAS_SYMS | HAS_LOCALS | WP_TEXT),

  (SEC_HAS_CONTENTS | SEC_ALLOC | SEC_LOAD | SEC_RELOC), /* section flags */
  0,				/* leading char */
  '/',				/* ar_pad_char */
  15,				/* ar_max_namelen??? FIXMEmgo */

  /* data */
  bfd_getb64,			/* bfd_getx64 */
  bfd_getb_signed_64,		/* bfd_getx_signed_64 */
  bfd_putb64,			/* bfd_putx64 */
  bfd_getb32,			/* bfd_getx32 */
  bfd_getb_signed_32,		/* bfd_getx_signed_32 */
  bfd_putb32,			/* bfd_putx32 */
  bfd_getb16,			/* bfd_getx16 */
  bfd_getb_signed_16,		/* bfd_getx_signed_16 */
  bfd_putb16,			/* bfd_putx16 */

  /* hdrs */
  bfd_getb64,			/* bfd_h_getx64 */
  bfd_getb_signed_64,		/* bfd_h_getx_signed_64 */
  bfd_putb64,			/* bfd_h_putx64 */
  bfd_getb32,			/* bfd_h_getx32 */
  bfd_getb_signed_32,		/* bfd_h_getx_signed_32 */
  bfd_putb32,			/* bfd_h_putx32 */
  bfd_getb16,			/* bfd_h_getx16 */
  bfd_getb_signed_16,		/* bfd_h_getx_signed_16 */
  bfd_putb16,			/* bfd_h_putx16 */

  { /* bfd_check_format */
    _bfd_dummy_target,
    coff_object_p,
    xcoff64_archive_p,
    CORE_FILE_P
  },
d2671 2
a2672 1
  { /* bfd_set_format */
d2674 50
a2723 4
    coff_mkobject,
    _bfd_generic_mkarchive,
    bfd_false
  },
d2725 2
a2726 90
  {/* bfd_write_contents */
    bfd_false,
    xcoff64_write_object_contents,
    _bfd_xcoff_write_archive_contents,
    bfd_false
  },

  /* Generic */
  bfd_true,				/* _close_and_cleanup */
  bfd_true,				/* _bfd_free_cached_info */
  coff_new_section_hook,		/* _new_section_hook */
  _bfd_generic_get_section_contents,	/* _bfd_get_section_contents */
  /* _bfd_get_section_contents_in_window */
  _bfd_generic_get_section_contents_in_window,

  /* Copy */
  _bfd_xcoff_copy_private_bfd_data,	/* _bfd_copy_private_bfd */
  /* _bfd_merge_private_bfd_data */
  ((boolean (*) (bfd *, bfd *)) bfd_true),
  /* _bfd_copy_pivate_section_data */
  ((boolean (*) (bfd *, asection *, bfd *, asection *)) bfd_true),
  /* _bfd_copy_private_symbol_data */
  ((boolean (*) (bfd *, asymbol *, bfd *, asymbol *)) bfd_true),
  ((boolean (*) (bfd *, flagword)) bfd_true), /* _bfd_set_private_flags */
  ((boolean (*) (bfd *, void * )) bfd_true),  /* _bfd_print_private_bfd_data */

  /* Core */
  coff_core_file_failing_command,	/* _core_file_failing_command */
  coff_core_file_failing_signal,	/* _core_file_failing_signal */
  coff_core_file_matches_executable_p,	/* _core_file_matches_executable_p */

  /* Archive */
  xcoff64_slurp_armap,			/* _slurp_armap */
  /* XCOFF archives do not have anything which corresponds to an
     extended name table.  */
  bfd_false,				/* _slurp_extended_name_table */
  /* _construct_extended_name_table */
  ((boolean (*) (bfd *, char **, bfd_size_type *, const char **)) bfd_false),
  bfd_dont_truncate_arname,		/* _truncate_arname */
  _bfd_xcoff_write_armap,		/* _write_armap */
  _bfd_xcoff_read_ar_hdr,		/* _read_ar_hdr */
  xcoff64_openr_next_archived_file,	/* _openr_next_archived_file */
  _bfd_generic_get_elt_at_index,	/* _get_elt_at_index */
  _bfd_xcoff_stat_arch_elt,		/* _generic_stat_arch_elt */
  /* XCOFF archives do not have a timestamp.  */
  bfd_true,				/* _update_armap_timestamp */

  /* Symbols */
  coff_get_symtab_upper_bound,		/* _get_symtab_upper_bound */
  coff_get_symtab,			/* _get_symtab */
  coff_make_empty_symbol,		/* _make_empty_symbol */
  coff_print_symbol,			/* _print_symbol */
  coff_get_symbol_info,			/* _get_symbol_info */
  _bfd_xcoff_is_local_label_name,	/* _bfd_is_local_label_name */
  coff_get_lineno,			/* _get_lineno */
  coff_find_nearest_line,		/* _find_nearest_line */
  coff_bfd_make_debug_symbol,		/* _bfd_make_debug_symbol */
  _bfd_generic_read_minisymbols,	/* _read_minisymbols */
  _bfd_generic_minisymbol_to_symbol,	/* _minsymbol_to_symbol */

  /* Reloc */
  coff_get_reloc_upper_bound,		/* _get_reloc_upper_bound */
  coff_canonicalize_reloc,		/* _cononicalize_reloc */
  xcoff64_reloc_type_lookup,		/* _bfd_reloc_type_lookup */

  /* Write */
  coff_set_arch_mach,			/* _set_arch_mach */
  coff_set_section_contents,		/* _set_section_contents */

  /* Link */
  xcoff64_sizeof_headers,		/* _sizeof_headers */
  /* _bfd_get_relocated_section_contents */
  bfd_generic_get_relocated_section_contents,
  bfd_generic_relax_section,		/* _bfd_relax_section */
  _bfd_xcoff_bfd_link_hash_table_create,/* _bfd_link_hash_table_create */
  _bfd_generic_link_hash_table_free,    /* _bfd_link_hash_table_free */
  _bfd_xcoff_bfd_link_add_symbols,	/* _bfd_link_add_symbols */
  _bfd_generic_link_just_syms,		/* _bfd_link_just_syms */
  _bfd_xcoff_bfd_final_link,		/* _bfd_final_link */
  _bfd_generic_link_split_section,	/* _bfd_link_split_section */
  bfd_generic_gc_sections,		/* _bfd_gc_sections */
  bfd_generic_merge_sections,		/* _bfd_merge_sections */
  bfd_generic_discard_group,		/* _bfd_discard_group */

  /* Dynamic */
  /* _get_dynamic_symtab_upper_bound */
  _bfd_xcoff_get_dynamic_symtab_upper_bound,
  _bfd_xcoff_canonicalize_dynamic_symtab,  /* _cononicalize_dynamic_symtab */
  _bfd_xcoff_get_dynamic_reloc_upper_bound,/* _get_dynamic_reloc_upper_bound */
  _bfd_xcoff_canonicalize_dynamic_reloc,   /* _cononicalize_dynamic_reloc */
d2728 2
a2729 6
  /* Opposite endian version, none exists */
  NULL,

  /* back end data */
  (void *) &bfd_xcoff_backend_data,
};
d2732 1
a2732 1
extern boolean xcoff64_core_file_matches_executable_p PARAMS((bfd *, bfd *));
d2738 92
a2829 95
{
  { /* COFF backend, defined in libcoff.h.  */
    _bfd_xcoff64_swap_aux_in,		/* _bfd_coff_swap_aux_in */
    _bfd_xcoff64_swap_sym_in,		/* _bfd_coff_swap_sym_in */
    _bfd_xcoff64_swap_lineno_in,	/* _bfd_coff_swap_lineno_in */
    _bfd_xcoff64_swap_aux_out,		/* _bfd_swap_aux_out */
    _bfd_xcoff64_swap_sym_out,		/* _bfd_swap_sym_out */
    _bfd_xcoff64_swap_lineno_out,	/* _bfd_swap_lineno_out */
    xcoff64_swap_reloc_out,		/* _bfd_swap_reloc_out */
    coff_swap_filehdr_out,		/* _bfd_swap_filehdr_out */
    coff_swap_aouthdr_out,		/* _bfd_swap_aouthdr_out */
    coff_swap_scnhdr_out,		/* _bfd_swap_scnhdr_out */
    FILHSZ,				/* _bfd_filhsz */
    AOUTSZ,				/* _bfd_aoutsz */
    SCNHSZ,				/* _bfd_scnhsz */
    SYMESZ,				/* _bfd_symesz */
    AUXESZ,				/* _bfd_auxesz */
    RELSZ,				/* _bfd_relsz */
    LINESZ,				/* _bfd_linesz */
    FILNMLEN,				/* _bfd_filnmlen */
    true,				/* _bfd_coff_long_filenames */
    false,				/* _bfd_coff_long_section_names */
    (3),			/* _bfd_coff_default_section_alignment_power */
    true,			/* _bfd_coff_force_symnames_in_strings */
    4,				/* _bfd_coff_debug_string_prefix_length */
    coff_swap_filehdr_in,		/* _bfd_coff_swap_filehdr_in */
    coff_swap_aouthdr_in,		/* _bfd_swap_aouthdr_in */
    coff_swap_scnhdr_in,		/* _bfd_swap_scnhdr_in */
    xcoff64_swap_reloc_in,		/* _bfd_reloc_in */
    xcoff64_bad_format_hook,		/* _bfd_bad_format_hook */
    coff_set_arch_mach_hook,		/* _bfd_set_arch_mach_hook */
    coff_mkobject_hook,			/* _bfd_mkobject_hook */
    styp_to_sec_flags,			/* _bfd_syp_to_sec_flags */
    coff_set_alignment_hook,		/* _bfd_set_alignment_hook */
    coff_slurp_symbol_table,		/* _bfd_coff_slurp_symbol_table */
    symname_in_debug_hook,		/* _coff_symname_in_debug_hook */
    coff_pointerize_aux_hook,		/* _bfd_coff_pointerize_aux_hook */
    coff_print_aux,			/* bfd_coff_print_aux */
    dummy_reloc16_extra_cases,		/* _bfd_coff_reloc16_extra_cases */
    dummy_reloc16_estimate,		/* _bfd_coff_reloc16_estimate */
    NULL,				/* bfd_coff_sym_is_global */
    /* _bfd_coff_compute_section_file_positions */
    coff_compute_section_file_positions,
    NULL ,				/* _bfd_coff_start_final_link */
    xcoff64_ppc_relocate_section,	/* _bfd_coff_relocate_section */
    coff_rtype_to_howto,		/* _bfd_coff_rtype_to_howto */
    NULL ,				/* _bfd_coff_addust_symndx */
    _bfd_generic_link_add_one_symbol,	/* _bfd_coff_add_one_symbol */
    coff_link_output_has_begun,		/* _bfd_coff_link_output_has_begun */
    coff_final_link_postscript		/* _bfd_coff_final_link_postscript */
  },

  U64_TOCMAGIC,				/* magic number */
  bfd_arch_powerpc,			/* architecture */
  bfd_mach_ppc_620,			/* machine */

  /* Function pointers to xcoff specific swap routines.	 */
  xcoff64_swap_ldhdr_in,		/* _xcoff_swap_ldhdr_in */
  xcoff64_swap_ldhdr_out,		/* _xcoff_swap_ldhdr_out */
  xcoff64_swap_ldsym_in,		/* _xcoff_swap_ldsym_in */
  xcoff64_swap_ldsym_out,		/* _xcoff_swap_ldsym_out */
  xcoff64_swap_ldrel_in,		/* _xcoff_swap_ldrel_in */
  xcoff64_swap_ldrel_out,		/* _xcoff_swap_ldrel_out */

  /* Sizes.  */
  LDHDRSZ,				/* _xcoff_ldhdrsz */
  LDSYMSZ,				/* _xcoff_ldsymsz */
  LDRELSZ,				/* _xcoff_ldrelsz */
  24,					/* _xcoff_function_descriptor_size */
  0,					/* _xcoff_small_aout_header_size */
  /* Versions.  */
  2,					/* _xcoff_ldhdr_version */

  _bfd_xcoff64_put_symbol_name,		/* _xcoff_put_symbol_name */
  _bfd_xcoff64_put_ldsymbol_name,	/* _xcoff_put_ldsymbol_name */

  /* Dynamic reloc howto.  */
  &xcoff64_dynamic_reloc,
  xcoff64_create_csect_from_smclas,

  /* Lineno and reloc count overflow.  */
  xcoff64_is_lineno_count_overflow,
  xcoff64_is_reloc_count_overflow,

  xcoff64_loader_symbol_offset,
  xcoff64_loader_reloc_offset,

  /* glink.  */
  &xcoff64_glink_code[0],
  40,					/* _xcoff_glink_size */

  /* rtinit.  */
  88,					/* _xcoff_rtinit_size */
  xcoff64_generate_rtinit,		/* _xcoff_generate_rtinit */
};
d2833 76
a2908 43
{
  "aix5coff64-rs6000",
  bfd_target_xcoff_flavour,
  BFD_ENDIAN_BIG,		/* data byte order is big */
  BFD_ENDIAN_BIG,		/* header byte order is big */

  (HAS_RELOC | EXEC_P |		/* object flags */
   HAS_LINENO | HAS_DEBUG | DYNAMIC |
   HAS_SYMS | HAS_LOCALS | WP_TEXT),

  (SEC_HAS_CONTENTS | SEC_ALLOC | SEC_LOAD | SEC_RELOC), /* section flags */
  0,				/* leading char */
  '/',				/* ar_pad_char */
  15,				/* ar_max_namelen??? FIXMEmgo */

  /* data */
  bfd_getb64,			/* bfd_getx64 */
  bfd_getb_signed_64,		/* bfd_getx_signed_64 */
  bfd_putb64,			/* bfd_putx64 */
  bfd_getb32,			/* bfd_getx32 */
  bfd_getb_signed_32,		/* bfd_getx_signed_32 */
  bfd_putb32,			/* bfd_putx32 */
  bfd_getb16,			/* bfd_getx16 */
  bfd_getb_signed_16,		/* bfd_getx_signed_16 */
  bfd_putb16,			/* bfd_putx16 */

  /* hdrs */
  bfd_getb64,			/* bfd_h_getx64 */
  bfd_getb_signed_64,		/* bfd_h_getx_signed_64 */
  bfd_putb64,			/* bfd_h_putx64 */
  bfd_getb32,			/* bfd_h_getx32 */
  bfd_getb_signed_32,		/* bfd_h_getx_signed_32 */
  bfd_putb32,			/* bfd_h_putx32 */
  bfd_getb16,			/* bfd_h_getx16 */
  bfd_getb_signed_16,		/* bfd_h_getx_signed_16 */
  bfd_putb16,			/* bfd_h_putx16 */

  { /* bfd_check_format */
    _bfd_dummy_target,
    coff_object_p,
    xcoff64_archive_p,
    xcoff64_core_p
  },
d2910 2
a2911 1
  { /* bfd_set_format */
d2913 50
a2962 4
    coff_mkobject,
    _bfd_generic_mkarchive,
    bfd_false
  },
d2964 2
a2965 90
  {/* bfd_write_contents */
    bfd_false,
    xcoff64_write_object_contents,
    _bfd_xcoff_write_archive_contents,
    bfd_false
  },

  /* Generic */
  bfd_true,				/* _close_and_cleanup */
  bfd_true,				/* _bfd_free_cached_info */
  coff_new_section_hook,		/* _new_section_hook */
  _bfd_generic_get_section_contents,	/* _bfd_get_section_contents */
  /* _bfd_get_section_contents_in_window */
  _bfd_generic_get_section_contents_in_window,

  /* Copy */
  _bfd_xcoff_copy_private_bfd_data,	/* _bfd_copy_private_bfd */
  /* _bfd_merge_private_bfd_data */
  ((boolean (*) (bfd *, bfd *)) bfd_true),
  /* _bfd_copy_pivate_section_data */
  ((boolean (*) (bfd *, asection *, bfd *, asection *)) bfd_true),
  /* _bfd_copy_private_symbol_data */
  ((boolean (*) (bfd *, asymbol *, bfd *, asymbol *)) bfd_true),
  ((boolean (*) (bfd *, flagword)) bfd_true), /* _bfd_set_private_flags */
  ((boolean (*) (bfd *, void * )) bfd_true),  /* _bfd_print_private_bfd_data */

  /* Core */
  xcoff64_core_file_failing_command,	/* _core_file_failing_command */
  xcoff64_core_file_failing_signal,	/* _core_file_failing_signal */
  xcoff64_core_file_matches_executable_p, /* _core_file_matches_executable_p */

  /* Archive */
  xcoff64_slurp_armap,			/* _slurp_armap */
  /* XCOFF archives do not have anything which corresponds to an
     extended name table.  */
  bfd_false,				/* _slurp_extended_name_table */
  /* _construct_extended_name_table */
  ((boolean (*) (bfd *, char **, bfd_size_type *, const char **)) bfd_false),
  bfd_dont_truncate_arname,		/* _truncate_arname */
  _bfd_xcoff_write_armap,		/* _write_armap */
  _bfd_xcoff_read_ar_hdr,		/* _read_ar_hdr */
  xcoff64_openr_next_archived_file,	/* _openr_next_archived_file */
  _bfd_generic_get_elt_at_index,	/* _get_elt_at_index */
  _bfd_xcoff_stat_arch_elt,		/* _generic_stat_arch_elt */
  /* XCOFF archives do not have a timestamp.  */
  bfd_true,				/* _update_armap_timestamp */

  /* Symbols */
  coff_get_symtab_upper_bound,		/* _get_symtab_upper_bound */
  coff_get_symtab,			/* _get_symtab */
  coff_make_empty_symbol,		/* _make_empty_symbol */
  coff_print_symbol,			/* _print_symbol */
  coff_get_symbol_info,			/* _get_symbol_info */
  _bfd_xcoff_is_local_label_name,	/* _bfd_is_local_label_name */
  coff_get_lineno,			/* _get_lineno */
  coff_find_nearest_line,		/* _find_nearest_line */
  coff_bfd_make_debug_symbol,		/* _bfd_make_debug_symbol */
  _bfd_generic_read_minisymbols,	/* _read_minisymbols */
  _bfd_generic_minisymbol_to_symbol,	/* _minsymbol_to_symbol */

  /* Reloc */
  coff_get_reloc_upper_bound,		/* _get_reloc_upper_bound */
  coff_canonicalize_reloc,		/* _cononicalize_reloc */
  xcoff64_reloc_type_lookup,		/* _bfd_reloc_type_lookup */

  /* Write */
  coff_set_arch_mach,			/* _set_arch_mach */
  coff_set_section_contents,		/* _set_section_contents */

  /* Link */
  xcoff64_sizeof_headers,		/* _sizeof_headers */
  /* _bfd_get_relocated_section_contents */
  bfd_generic_get_relocated_section_contents,
  bfd_generic_relax_section,		/* _bfd_relax_section */
  _bfd_xcoff_bfd_link_hash_table_create,/* _bfd_link_hash_table_create */
  _bfd_generic_link_hash_table_free,    /* _bfd_link_hash_table_free */
  _bfd_xcoff_bfd_link_add_symbols,	/* _bfd_link_add_symbols */
  _bfd_generic_link_just_syms,		/* _bfd_link_just_syms */
  _bfd_xcoff_bfd_final_link,		/* _bfd_final_link */
  _bfd_generic_link_split_section,	/* _bfd_link_split_section */
  bfd_generic_gc_sections,		/* _bfd_gc_sections */
  bfd_generic_merge_sections,		/* _bfd_merge_sections */
  bfd_generic_discard_group,		/* _bfd_discard_group */

  /* Dynamic */
  /* _get_dynamic_symtab_upper_bound */
  _bfd_xcoff_get_dynamic_symtab_upper_bound,
  _bfd_xcoff_canonicalize_dynamic_symtab,  /* _cononicalize_dynamic_symtab */
  _bfd_xcoff_get_dynamic_reloc_upper_bound,/* _get_dynamic_reloc_upper_bound */
  _bfd_xcoff_canonicalize_dynamic_reloc,   /* _cononicalize_dynamic_reloc */
d2967 2
a2968 6
  /* Opposite endian version, none exists.  */
  NULL,

  /* back end data */
  (void *) & bfd_xcoff_aix5_backend_data,
};
@


1.35
log
@	* coff-rs6000.c (xcoff_howto_table): Fix src_mask entries.  Make all
	relocs with bitsize == 16 have size = 1.
	(xcoff_reloc_type_ba): Correct src_mask and dst_mask adjustment.
	(xcoff_reloc_type_br): Likewise.
	(xcoff_reloc_type_crel): Likewise.
	(xcoff_ppc_relocate_section): Set up src_mask and dst_mask correctly.
	* coff64-rs6000.c (xcoff64_reloc_type_br): Correct src_mask and
	dst_mask adjustment.
	(xcoff64_ppc_relocate_section): Set up src_mask and dst_mask correctly.
	(xcoff64_howto_table): Fix src_mask entries.  Make all relocs with
	bitsize == 16 have size = 1.
@
text
@d1135 2
a1136 2
  howto->src_mask |= 3;
  howto->dst_mask &= ~3;
d1199 1
a1199 2
      howto.dst_mask = N_ONES (howto.bitsize);
      howto.src_mask = ~howto.dst_mask & N_ONES (8 << howto.size);
d1360 1
a1360 1
	 0,			/* src_mask */
d1375 1
a1375 1
	 0,			/* src_mask */
d1390 1
a1390 1
	 0,			/* src_mask */
d1405 1
a1405 1
	 0,			/* src_mask */
d1420 1
a1420 1
	 0,			/* src_mask */
d1435 1
a1435 1
	 0,			/* src_mask */
d1450 1
a1450 1
	 0,			/* src_mask */
d1467 1
a1467 1
	 0xfc000003,		/* src_mask */
d1484 1
a1484 1
	 0xfc000003,		/* src_mask */
d1501 1
a1501 1
	 0,			/* src_mask */
d1516 1
a1516 1
	 0,			/* src_mask */
d1529 1
a1529 1
	 complain_overflow_bitfield, /* complain_on_overflow */
d1551 1
a1551 1
	 0,			/* src_mask */
d1566 1
a1566 1
	 0,			/* src_mask */
d1581 1
a1581 1
	 0,			/* src_mask */
d1596 1
a1596 1
	 0,			/* src_mask */
d1611 1
a1611 1
	 0,			/* src_mask */
d1626 1
a1626 1
	 0,			/* src_mask */
d1641 1
a1641 1
	 0xfc000003,		/* src_mask */
d1656 1
a1656 1
	 0,			/* src_mask */
d1671 1
a1671 1
	 0xfc000003,		/* src_mask */
d1686 1
a1686 1
	 0,			/* src_mask */
d1700 1
a1700 1
	 0,			/* src_mask */
d1715 1
a1715 1
	 0x0003,		/* src_mask */
d1730 1
a1730 1
	 0,			/* src_mask */
d1745 1
a1745 1
	 0,			/* src_mask */
@


1.34
log
@	* aoutx.h (some_aout_object_p): Clean up tdata properly on error.
	* archive.c (bfd_generic_archive_p): Likewise.
	* coff-rs6000.c (_bfd_xcoff_archive_p): Likewise.
	(_bfd_xcoff_archive_p): Use bfd_scan_vma in place of strtol.
	* coff64-rs6000.c (xcoff64_slurp_armap): Likewise.
	(xcoff64_archive_p): Likewise.
	(xcoff64_openr_next_archived_file): Likewise.
	(xcoff64_archive_p): Clean up tdata properly on error.
	* coffgen.c (coff_real_object_p): Likewise.
	(coff_object_p): Release filehdr and opthdr.
	* ecoff.c (_bfd_ecoff_archive_p): Clean up tdata properly on error.
	* ieee.c (ieee_archive_p): Likewise.
	* ihex.c (ihex_object_p): Likewise.
	(ihex_mkobject): Always allocate tdata.
	* peicode.h (pe_ILF_object_p): Release bfd_alloc'd buffer on error.
	* srec.c (srec_mkobject): Always allocate tdata.
	(srec_object_p): Clean up tdata properly on error.
	(symbolsrec_object_p): Likewise.
	* versados.c (versados_object_p): Likewise.
	* vms-misc.c (_bfd_vms_get_record): Use bfd_malloc instead of malloc,
	and bfd_realloc instead of realloc.
	(add_new_contents): Use bfd_alloc instead of bfd_malloc for sections.
	* vms.c (vms_initialize): Always allocate tdata.  Use bfd_alloc in
	place of bfd_malloc, simplifying error freeing.  Free hash table too.
	(vms_object_p): Clean up tdata on error.
	(vms_mkobject): Don't complain on stderr if vms_initialize fails.
	(vms_close_and_cleanup): Adjust for bfd_alloc use.
@
text
@d1135 2
a1136 2
  howto->src_mask &= ~3;
  howto->dst_mask = howto->src_mask;
d1199 2
a1200 1
      howto.src_mask = howto.dst_mask = N_ONES(howto.bitsize);
d1361 1
a1361 1
	 MINUS_ONE,		/* src_mask */
d1376 1
a1376 1
	 MINUS_ONE,		/* src_mask */
d1391 1
a1391 1
	 0xffffffff,		/* src_mask */
d1406 1
a1406 1
	 0xffff,		/* src_mask */
d1421 1
a1421 1
	 0xffffffff,		/* src_mask */
d1428 1
a1428 1
	 2,			/* size (0 = byte, 1 = short, 2 = long) */
d1436 1
a1436 1
	 0xffff,		/* src_mask */
d1443 1
a1443 1
	 2,			/* size (0 = byte, 1 = short, 2 = long) */
d1451 1
a1451 1
	 0xffff,		/* src_mask */
d1468 2
a1469 2
	 0x3fffffc,		/* src_mask */
	 0x3fffffc,		/* dst_mask */
d1485 2
a1486 2
	 0x3fffffc,		/* src_mask */
	 0x3fffffc,		/* dst_mask */
d1494 1
a1494 1
	 2,			/* size (0 = byte, 1 = short, 2 = long) */
d1502 1
a1502 1
	 0xffff,		/* src_mask */
d1509 1
a1509 1
	 2,			/* size (0 = byte, 1 = short, 2 = long) */
d1517 1
a1517 1
	 0xffff,		/* src_mask */
d1544 1
a1544 1
	 2,			/* size (0 = byte, 1 = short, 2 = long) */
d1552 1
a1552 1
	 0xffff,		/* src_mask */
d1559 1
a1559 1
	 2,			/* size (0 = byte, 1 = short, 2 = long) */
d1567 1
a1567 1
	 0xffff,		/* src_mask */
d1582 1
a1582 1
	 0xffffffff,		/* src_mask */
d1597 1
a1597 1
	 0xffffffff,		/* src_mask */
d1604 1
a1604 1
	 2,			/* size (0 = byte, 1 = short, 2 = long) */
d1612 1
a1612 1
	 0xffff,		/* src_mask */
d1619 1
a1619 1
	 2,			/* size (0 = byte, 1 = short, 2 = long) */
d1627 1
a1627 1
	 0xffff,		/* src_mask */
d1642 2
a1643 2
	 0xffff,		/* src_mask */
	 0xffff,		/* dst_mask */
d1657 2
a1658 2
	 0xffff,		/* src_mask */
	 0xffff,		/* dst_mask */
d1672 2
a1673 2
	 0xffff,		/* src_mask */
	 0xffff,		/* dst_mask */
d1679 1
a1679 1
	 2,			/* size (0 = byte, 1 = short, 2 = long) */
d1687 1
a1687 1
	 0xffff,		/* src_mask */
d1701 1
a1701 1
	 0xffffffff,		/* src_mask */
d1716 1
a1716 1
	 0xfffc,		/* src_mask */
d1731 1
a1731 1
	 0xffff,	        /* src_mask */
d1746 1
a1746 1
	 0xffff,		/* src_mask */
@


1.33
log
@	* aout-adobe.c: Don't compare against "true" or "false.
	* aout-target.h: Likewise.
	* aoutx.h: Likewise.
	* archive.c: Likewise.
	* bout.c: Likewise.
	* cache.c: Likewise.
	* coff-a29k.c: Likewise.
	* coff-alpha.c: Likewise.
	* coff-i386.c: Likewise.
	* coff-mips.c: Likewise.
	* coff-or32.c: Likewise.
	* coff64-rs6000.c: Likewise.
	* coffcode.h: Likewise.
	* coffgen.c: Likewise.
	* cpu-ns32k.c: Likewise.
	* ecoff.c: Likewise.
	* ecofflink.c: Likewise.
	* elf.c: Likewise.
	* elf32-arm.h: Likewise.
	* elf32-cris.c: Likewise.
	* elf32-d30v.c: Likewise.
	* elf32-i386.c: Likewise.
	* elf32-mcore.c: Likewise.
	* elf32-ppc.c: Likewise.
	* elf32-sh.c: Likewise.
	* elf32-sh64.c: Likewise.
	* elf32-v850.c: Likewise.
	* elf64-alpha.c: Likewise.
	* elf64-sh64.c: Likewise.
	* elfcode.h: Likewise.
	* elfcore.h: Likewise.
	* elflink.h: Likewise.
	* elfxx-mips.c: Likewise.
	* i386os9k.c: Likewise.
	* ieee.c: Likewise.
	* libbfd.c: Likewise.
	* linker.c: Likewise.
	* mmo.c: Likewise.
	* nlm32-alpha.c: Likewise.
	* nlm32-i386.c: Likewise.
	* nlm32-ppc.c: Likewise.
	* nlm32-sparc.c: Likewise.
	* nlmcode.h: Likewise.
	* oasys.c: Likewise.
	* pdp11.c: Likewise.
	* peicode.h: Likewise.
	* reloc.c: Likewise.
	* som.c: Likewise.
	* srec.c: Likewise.
	* tekhex.c: Likewise.
	* vms.c: Likewise.
	* xcofflink.c: Likewise.
	* elf64-sparc.c: Edit comment to not use "== false".

	* aoutf1.h: Don't use "? true : false".
	* ecoff.c: Likewise.
	* format.c: Likewise.
	* ieee.c: Likewise.
	* linker.c: Likewise.
	* mmo.c: Likewise.
	* oasys.c: Likewise.
@
text
@d1843 2
a1844 1
  off = strtol (xcoff_ardata_big (abfd)->symoff64, (char **) NULL, 10);
d1865 1
a1865 4
  /* XXX This actually has to be a call to strtoll (at least on 32-bit
     machines) since the field width is 20 and there numbers with more
     than 32 bits can be represented.  */
  sz = strtol (hdr.size, (char **) NULL, 10);
d1921 1
a1939 14
  /* We are setting bfd_ardata(abfd) here, but since bfd_ardata
     involves a cast, we can't do it as the left operand of
     assignment.  */
  amt = sizeof (struct artdata);
  abfd->tdata.aout_ar_data = (struct artdata *) bfd_zalloc (abfd, amt);

  if (bfd_ardata (abfd) == (struct artdata *) NULL)
    return NULL;

  bfd_ardata (abfd)->cache = NULL;
  bfd_ardata (abfd)->archive_head = NULL;
  bfd_ardata (abfd)->symdefs = NULL;
  bfd_ardata (abfd)->extended_names = NULL;

d1944 2
a1945 3
  if (bfd_bread ((PTR) &hdr.memoff,
		(bfd_size_type) (SIZEOF_AR_FILE_HDR_BIG - SXCOFFARMAG),
		abfd) != SIZEOF_AR_FILE_HDR_BIG - SXCOFFARMAG)
d1952 14
a1965 5
  /* XXX This actually has to be a call to strtoll (at least on 32-bit
     machines) since the field width is 20 and there numbers with more
     than 32 bits can be represented.  */
  bfd_ardata (abfd)->first_file_filepos = strtol (hdr.firstmemoff,
						  (char **) NULL, 10);
d1970 1
a1970 1
    return NULL;
d1976 1
d1978 2
a1979 1
      abfd->tdata.aout_ar_data = (struct artdata *) NULL;
d2009 4
a2012 9
      /* XXX These actually have to be a calls to strtoll (at least
	 on 32-bit machines) since the fields's width is 20 and
	 there numbers with more than 32 bits can be represented.  */
      filestart = strtol (arch_xhdr_big (last_file)->nextoff, (char **) NULL,
			  10);
    }
  /* XXX These actually have to be calls to strtoll (at least on 32-bit
     machines) since the fields's width is 20 and there numbers with more
     than 32 bits can be represented.  */
d2014 4
a2017 4
      || filestart == strtol (xcoff_ardata_big (archive)->memoff,
			      (char **) NULL, 10)
      || filestart == strtol (xcoff_ardata_big (archive)->symoff,
			      (char **) NULL, 10))
@


1.33.2.1
log
@2002-09-23  Daniel Jacobowitz  <drow@@mvista.com>

	Merge from mainline:
	2002-09-23  Alan Modra  <amodra@@bigpond.net.au>
	* elf-eh-frame.c (_bfd_elf_discard_section_eh_frame): Zero relocs
	for discarded FDEs.  Remove redundant assignment.
	* elflink.h (elf_bfd_discard_info): Save edited relocs.

	2002-09-23  Nathan Tallent  <eraxxon@@alumni.rice.edu>
	* dwarf2.c (decode_line_info): Update to correctly decode
	the (non-standard DWARF2) out-of-order address sequences
	generated by the Intel C++ 6.0 compiler for ia64-Linux.

	2002-09-22  H.J. Lu <hjl@@gnu.org>
	* elf64-alpha.c (elf64_alpha_merge_ind_symbols): Don't merge
	the relocation count between different .reloc sections.

	2002-09-22  Mark Elbrecht  <snowball3@@softhome.net>
	* config.bfd: For DJGPP targets, match with any cpu and any machine.

	2002-09-21  Alan Modra  <amodra@@bigpond.net.au>
	* elfcode.h (elf_slurp_reloc_table_from_section): Make "symcount"
	unsigned.  Move "symcount" assignment out of loop.

	2002-09-19  Nathan Tallent  <eraxxon@@alumni.rice.edu>
	* dwarf2.c (_bfd_dwarf2_find_nearest_line): If address length is
	zero, set it to 8 for (non-standard) 64-bit DWARF2 formats
	(e.g. IRIX64).

	2002-09-19  Jakub Jelinek  <jakub@@redhat.com>
	* reloc.c (BFD_RELOC_386_TLS_TPOFF, BFD_RELOC_386_TLS_IE,
	BFD_RELOC_386_TLS_GOTIE): Add.
	* bfd-in2.h, libbfd.h: Rebuilt.
	* elf32-i386.c (elf_howto_table): Add R_386_TLS_TPOFF, R_386_TLS_IE
	and R_386_TLS_GOTIE.
	(elf_i386_reloc_type_lookup): Handle it.
	(struct elf_i386_link_hash_entry): Change tls_type type to unsigned
	char instead of enum, change GOT_* into defines.
	(GOT_TLS_IE_POS, GOT_TLS_IE_NEG, GOT_TLS_IE_BOTH): Define.
	(elf_i386_tls_transition): Handle R_386_TLS_IE and R_386_TLS_GOTIE.
	(elf_i386_check_relocs): Likewise.  Avoid crash if local symbol is
	accessed both as normal and TLS symbol.  Move R_386_TLS_LDM and
	R_386_PLT32 cases so that R_386_TLS_IE can fall through.
	Handle R_386_TLS_LE_32 and R_386_TLS_LE in shared libs.
	(elf_i386_gc_sweep_hook): Handle R_386_TLS_IE and R_386_TLS_GOTIE.
	Handle R_386_TLS_LE_32 and R_386_TLS_LE in shared libs.
	(allocate_dynrelocs): Allocate 2 .got and 2 .rel.got entries if
	tls_type is GOT_TLS_IE_BOTH.
	(elf_i386_size_dynamic_sections): Likewise.
	(elf_i386_relocate_section): Handle R_386_TLS_IE and R_386_TLS_GOTIE.
	Handle R_386_TLS_LE_32 and R_386_TLS_LE in shared libs.
	(elf_i386_finish_dynamic_symbol): Use tls_type & GOT_TLS_IE to catch
	all 4 GOT_TLS_* TLS types.

	2002-09-18  Daniel Jacobowitz  <drow@@mvista.com>
	* elfcode.h (elf_slurp_reloc_table_from_section): Check
	correct relocation count.

	2002-09-17  Daniel Jacobowitz  <drow@@mvista.com>
	* bfd-in.h (bfd_get_dynamic_symcount): Define.
	* bfd.c (struct _bfd): Add dynsymcount.
	* bfd-in2.h: Regenerated.
	* elf.c (_bfd_elf_canonicalize_dynamic_symtab): Set
	abfd->dynsymcount.
	* elfcode.h (elf_slurp_reloc_table_from_section): Check
	for overflow.

	2002-09-17  Alan Modra  <amodra@@bigpond.net.au>
	* elf64-alpha.c (alpha_elf_size_info): Make static.

	2002-09-17  Jakub Jelinek  <jakub@@redhat.com>
	* elf32-ppc.c (ppc_elf_finish_dynamic_symbol): Clear .got word
	even if generating R_PPC_RELATIVE reloc.
	(ppc_elf_relocate_section): Make sure relocation is performed if
	skip == -2.  Clear memory at r_offset when creating dynamic
	relocation.

	2002-09-16  David O'Brien  <obrien@@FreeBSD.org>
	* elf32-i386-fbsd.c: Always label using the EI_OSABI method.
	It is benign for FreeBSD < 4.1.  Minor reformatting.
	* elf64-alpha-fbsd.c: Likewise.

	2002-09-16  Nathan Tallent  <eraxxon@@alumni.rice.edu>
	* ecoff.c (_bfd_ecoff_slurp_symbolic_info) <ioptMax>: Fix error
	reading ECOFF information: 'ioptMax' refers to the actual *size*
	of the optimization symtab, not the number of entries.

	2002-09-16  Jakub Jelinek  <jakub@@redhat.com>
	* elf_i386_relocate_section (R_386_TLS_TPOFF32): Negate addend.

	2002-09-13  Daniel Jacobowitz  <drow@@mvista.com>
	* elf32-arm.h (elf32_arm_adjust_dynamic_symbol): Update
	ELF_LINK_HASH_NEEDS_PLT logic.

	2002-09-11  Nick Clifton  <nickc@@redhat.com>
	* po/da.po: New Danish translation file.
	* configure.in (LINGUAS): Add 'da'.
	* configure: Regenerate.

	2002-09-11  Jakub Jelinek  <jakub@@redhat.com>
	* elf32-i386.c (dtpoff_base, tpoff): Don't crash if tls_segment is
	NULL.
	(elf_i386_relocate_section): Return false after printing error about
	unresolvable relocation.

	2002-09-11  Jeffrey Law  <law@@redhat.com>
	* elf32-h8300.c (elf32_h8_relax_section): Fix typo.

	2002-09-06  Andrew Haley  <aph@@cambridge.redhat.com>
	* elf.c (_bfd_elf_find_nearest_line): Check functionname_ptr and
	line_ptr before deciding we've found a symbol.

	2002-08-29  John David Anglin  <dave@@hiauly1.hia.nrc.ca>
	* bfd-in.h (align_power): Cast constants to bfd_vma type.
	* bfd-in2.h (align_power): Likewise.

	2002-08-24  Kaz Kojima  <kkojima@@rr.iij4u.or.jp>
	* elf32-sh.c (sh_elf_copy_indirect_symbol): New.
	(create_got_section, allocate_dynrelocs, readonly_dynrelocs):
	Likewise.
	(struct elf_sh_pcrel_relocs_copied): Removed.
	(struct elf_sh_dyn_relocs): New.
	(struct elf_sh_link_hash_entry): Replace pcrel_relocs_copied
	field with dyn_relocs.
	(struct elf_sh_link_hash_table): Add short-cuts to get dynamic
	sections and sym_sec.
	(sh_elf_link_hash_newfunc): Clear dyn_relocs.
	(sh_elf_link_hash_table_create): Clear shorts-cuts and sym_sec.
	(sh_elf_create_dynamic_sections): Use create_got_section instead
	of _bfd_elf_create_got_section.
	(sh_elf_check_relocs): Likewise.
	(sh_elf_create_dynamic_sections): Use short-cuts to the dynamic
	sections.
	(sh_elf_adjust_dynamic_symbol, sh_elf_size_dynamic_sections,
	sh_elf_relocate_section, sh_elf_check_relocs,
	sh_elf_finish_dynamic_symbol, sh_elf_finish_dynamic_sections):
	Likewise.
	(sh_elf_adjust_dynamic_symbol): Handle nocopyreloc. Keep the
	dynamic relocations and avoiding the copy relocation when we
	didn't find any dynamic relocations in the section which has
	contents or is read-only.
	(WILL_CALL_FINISH_DYNAMIC_SYMBOL): New.
	(sh_elf_size_dynamic_sections): Don't reset the size of
	.rela.got section even if dynamic_sections_created flag is off.
	Don't use sh_elf_discard_copies. Scan all input bfd and use
	allocate_dynrelocs. Call readonly_dynrelocs to determine
	whether we need DT_TEXTREL.
	(sh_elf_adjust_dynamic_symbol): Use plt.refcount to determine
	whether the symbol was never referred to.
	(sh_elf_relocate_section): Use WILL_CALL_FINISH_DYNAMIC_SYMBOL.
	(sh_elf_gc_sweep_hook): Fill with the real sweep function.
	(sh_elf_check_relocs): Call create_got_section if the short-cut
	to .got is null. Increment reference counters only instead of
	allocating space on dynamic sections here. Don't conditionalize
	uninitialized got.offset value when marking the symbol as a
	global offset table entry. Keep relocations for symbols satisfied
	by a dynamic library to avoid copy relocations for the symbol.
	Set dynobj field of an elf hash table if needed.
	(sh_elf_finish_dynamic_sections): Handle null section pointer
	correctly.
	(elf_backend_copy_indirect_symbol): Defined.
	(elf_backend_can_refcount): Defined.

	2002-08-22  Nick Clifton  <nickc@@redhat.com>
	* po/tr.po: Updated Turkish translation.

	2002-08-21  Stephen Clarke <stephen.clarke@@superh.com>
	* bfd/elf32-sh.c (sh_elf_size_dynamic_sections): Zero
	initialize dynamic section.
	* bfd/elf64-sh64.c (sh64_elf64_size_dynamic_sections):
	Likewise.

	2002-08-13  H.J. Lu <hjl@@gnu.org>
	* elflink.h (NAME(bfd_elf,size_dynamic_sections): Don't count
	definitions in shared objects when checking symbol with
	undefined version.

	2002-08-10  H.J. Lu <hjl@@gnu.org>
	* elflink.h (elf_add_default_symbol): Preserve section across
	elf_merge_symbol.

	2002-08-09  Nick Clifton  <nickc@@redhat.com>
	* po/sv.po: Updated Swedish translation.

	2002-08-08  Alan Modra  <amodra@@bigpond.net.au>
	* elflink.h (elf_link_output_extsym): Don't output symbols from
	SEC_EXCLUDE sections.

	* aoutx.h (aout_link_write_symbols): Correct handling of warning syms.

	2002-08-08  H.J. Lu <hjl@@gnu.org>
	* elflink.h (elf_add_default_symbol): Don't warn a defintion
	overrides an indirect versioned symbol.

	2002-08-07  Alan Modra  <amodra@@bigpond.net.au>
	* elf64-ppc.c (edit_opd): Arrange to drop symbols for discarded .opd
	entries.

	2002-08-07  Jakub Jelinek  <jakub@@redhat.com>
	* elf32-i386.c (elf_i386_relocate_section): Fill in proper addend
	for R_386_TLS_TPOFF32 relocs against symndx 0.

	2002-08-07  Thiemo Seufer <seufer@@csv.ica.uni-stuttgart.de>
	* elfxx-mips.c (mips_elf_global_got_index): Avoid segfault if
	g->global_gotsym is NULL.

	2002-08-06  Alan Modra  <amodra@@bigpond.net.au>
	* xcofflink.c (xcoff_write_global_symbol): Set n_scnum for abs_section.

	2002-08-06  Alan Modra  <amodra@@bigpond.net.au>
	* elf64-ppc.c (ppc64_elf_howto_raw): Zero all src_mask entries.

	2002-08-06  H.J. Lu <hjl@@gnu.org>
	* elflink.h (NAME(bfd_elf,size_dynamic_sections)): Check symbol
	with undefined version if needed.
	(elf_link_assign_sym_version): Match a default symbol with a
	version without definition. No need to hide the default
	definition separately.

	2002-08-06  Alan Modra  <amodra@@bigpond.net.au>
	* coff-rs6000.c: Formatting fixes.
	(xcoff_calculate_relocation): Use PARAMS in declaration.
	(xcoff_complain_overflow): Likewise.
	(xcoff_ppc_relocate_section): Use old-style function pointer call.
	(bfd_xcoff_backend_data): Remove useless comments.
	(rs6000coff_vec): Likewise.
	(bfd_pmac_xcoff_backend_data): Likewise.
	(pmac_xcoff_vec): Likewise.
	* coff64-rs6000.c: Formatting fixes.
	(xcoff64_calculate_relocation): Use PARAMS in declaration.
	(xcoff64_ppc_relocate_section): Use old-style function pointer call.
	(bfd_xcoff_backend_data): Remove useless comments.
	(rs6000coff64_vec): Likewise.
	(bfd_xcoff_aix5_backend_data): Likewise.
	(aix5coff64_vec): Likewise.

	2002-08-06  Alan Modra  <amodra@@bigpond.net.au>
	* coff-rs6000.c: (xcoff_rtype2howto): Don't place reloc address in
	addend.
	* coff64-rs6000.c: (xcoff64_rtype2howto): Likewise.

	2002-08-06  Alan Modra  <amodra@@bigpond.net.au>
	* coff-rs6000.c (xcoff_howto_table): Revert some of last change to
	mask entries.  Use complain_overflow_dont for R_REF.
	(xcoff_reloc_type_ba): Revert last change.
	(xcoff_reloc_type_br): Likewise.
	(xcoff_reloc_type_crel): Likewise.
	(xcoff_ppc_relocate_section): Likewise.
	* coff64-rs6000.c (xcoff64_reloc_type_br): Likewise.
	(xcoff64_ppc_relocate_section): Likewise.
	(xcoff64_howto_table): Revert some of last change to mask entries.
	Use complain_overflow_dont for R_REF.

	* coff-rs6000.c (xcoff_howto_table): Fix src_mask entries.  Make all
	relocs with bitsize == 16 have size = 1.
	(xcoff_reloc_type_ba): Correct src_mask and dst_mask adjustment.
	(xcoff_reloc_type_br): Likewise.
	(xcoff_reloc_type_crel): Likewise.
	(xcoff_ppc_relocate_section): Set up src_mask and dst_mask correctly.
	* coff64-rs6000.c (xcoff64_reloc_type_br): Correct src_mask and
	dst_mask adjustment.
	(xcoff64_ppc_relocate_section): Set up src_mask and dst_mask correctly.
	(xcoff64_howto_table): Fix src_mask entries.  Make all relocs with
	bitsize == 16 have size = 1.

	2002-07-31  Nick Clifton  <nickc@@redhat.com>
	* bfd.c (bfd_alt_mach_code): Rename parameter 'index' to
	'alternative' in order to avoid shadowing global symbol of the
	same name.
	* bfd-in2.h: Regenerate.
	* libbfd.h: Regenerate.
	* libcoff.h: Regenerate.

	2002-07-30  Alan Modra  <amodra@@bigpond.net.au>
	* aoutx.h (some_aout_object_p): Clean up tdata properly on error.
	* archive.c (bfd_generic_archive_p): Likewise.
	* coff-rs6000.c (_bfd_xcoff_archive_p): Likewise.
	(_bfd_xcoff_archive_p): Use bfd_scan_vma in place of strtol.
	* coff64-rs6000.c (xcoff64_slurp_armap): Likewise.
	(xcoff64_archive_p): Likewise.
	(xcoff64_openr_next_archived_file): Likewise.
	(xcoff64_archive_p): Clean up tdata properly on error.
	* coffgen.c (coff_real_object_p): Likewise.
	(coff_object_p): Release filehdr and opthdr.
	* ecoff.c (_bfd_ecoff_archive_p): Clean up tdata properly on error.
	* ieee.c (ieee_archive_p): Likewise.
	* ihex.c (ihex_object_p): Likewise.
	(ihex_mkobject): Always allocate tdata.
	* peicode.h (pe_ILF_object_p): Release bfd_alloc'd buffer on error.
	* srec.c (srec_mkobject): Always allocate tdata.
	(srec_object_p): Clean up tdata properly on error.
	(symbolsrec_object_p): Likewise.
	* versados.c (versados_object_p): Likewise.
	* vms-misc.c (_bfd_vms_get_record): Use bfd_malloc instead of malloc,
	and bfd_realloc instead of realloc.
	(add_new_contents): Use bfd_alloc instead of bfd_malloc for sections.
	* vms.c (vms_initialize): Always allocate tdata.  Use bfd_alloc in
	place of bfd_malloc, simplifying error freeing.  Free hash table too.
	(vms_object_p): Clean up tdata on error.
	(vms_mkobject): Don't complain on stderr if vms_initialize fails.
	(vms_close_and_cleanup): Adjust for bfd_alloc use.

	2002-07-17  Ian Rickards  <irickard@@arm.com>
	* dwarf2.c (concat_filename): If we can't establish the directory
	just return the filename.

	2002-07-16  Alan Modra  <amodra@@bigpond.net.au>
	* elflink.h: Formatting fixes, tidy prototypes.
	(elf_link_assign_sym_version): Move common code out of loop.

	2002-07-04  Bruno Haible  <bruno@@clisp.org>
	* elf32-i386.c: Don't defined ELF_ARCH etc. if this file is included
	by a target variant implementation.
	* elf64-alpha.c: Likewise.
	* elf32-i386-fbsd.c: New file.
	* elf64-alpha-fbsd.c: New file.
	* targets.c: Support bfd_elf32_i386_freebsd_vec and
	bfd_elf64_alpha_freebsd_vec.
	* configure.in: Accept the vectors bfd_elf32_i386_freebsd_vec,
	bfd_elf64_alpha_freebsd_vec.
	* Makefile.am (BFD32_BACKENDS): Add elf32-i386-fbsd.lo.
	(BFD32_BACKENDS_CFILES): Add elf32-i386-fbsd.c.
	(BFD64_BACKENDS): Add elf64-alpha-fbsd.lo.
	(BFD64_BACKENDS_CFILES): Add elf64-alpha-fbsd.c.
	(elf32-i386-fbsd.lo, elf64-alpha-fbsd.lo): Add dependencies.
	* config.bfd: For FreeBSD targets, set targ_defvec to a FreeBSD
	specific targets. Define OLD_FREEBSD_ABI_LABEL if appropriate.
@
text
@d159 1
a159 1
  PARAMS ((XCOFF_RELOC_FUNCTION_ARGS)) =
d889 3
a891 5
  internal_a.magic = (abfd->flags & D_PAGED
		      ? RS6K_AOUTHDR_ZMAGIC
		      : (abfd->flags & WP_TEXT
			 ? RS6K_AOUTHDR_NMAGIC
			 : RS6K_AOUTHDR_OMAGIC));
d1099 2
a1100 2
      && (rel->r_vaddr - input_section->vma + 8
	  <= input_section->_cooked_size))
d1142 2
a1143 2
  *relocation -= (input_section->output_section->vma
		  + input_section->output_offset);
d1194 2
a1195 3
      howto.complain_on_overflow = (rel->r_size & 0x80
				    ? complain_overflow_signed
				    : complain_overflow_bitfield);
d1263 1
a1263 1
	  || ((*xcoff64_calculate_relocation[rel->r_type])
d1290 2
a1291 2
      if ((unsigned int) howto.complain_on_overflow
	  >= XCOFF_MAX_COMPLAIN_OVERFLOW)
d1294 1
a1294 1
      if (((*xcoff_complain_overflow[howto.complain_on_overflow])
d1324 3
a1326 3
      value_to_relocate = ((value_to_relocate & ~howto.dst_mask)
			   | (((value_to_relocate & howto.src_mask)
			       + relocation) & howto.dst_mask));
d1427 1
a1427 1
	 1,			/* size (0 = byte, 1 = short, 2 = long) */
d1442 1
a1442 1
	 1,			/* size (0 = byte, 1 = short, 2 = long) */
d1493 1
a1493 1
	 1,			/* size (0 = byte, 1 = short, 2 = long) */
d1508 1
a1508 1
	 1,			/* size (0 = byte, 1 = short, 2 = long) */
d1529 1
a1529 1
	 complain_overflow_dont, /* complain_on_overflow */
d1543 1
a1543 1
	 1,			/* size (0 = byte, 1 = short, 2 = long) */
d1558 1
a1558 1
	 1,			/* size (0 = byte, 1 = short, 2 = long) */
d1603 1
a1603 1
	 1,			/* size (0 = byte, 1 = short, 2 = long) */
d1618 1
a1618 1
	 1,			/* size (0 = byte, 1 = short, 2 = long) */
d1641 2
a1642 2
	 0x03fffffc,		/* src_mask */
	 0x03fffffc,		/* dst_mask */
d1656 2
a1657 2
	 0xffffffff,		/* src_mask */
	 0xffffffff,		/* dst_mask */
d1671 2
a1672 2
	 0x03fffffc,		/* src_mask */
	 0x03fffffc,		/* dst_mask */
d1678 1
a1678 1
	 1,			/* size (0 = byte, 1 = short, 2 = long) */
d1788 4
d1843 1
a1843 2
  off = bfd_scan_vma (xcoff_ardata_big (abfd)->symoff64,
		      (const char **) NULL, 10);
d1864 4
a1867 1
  sz = bfd_scan_vma (hdr.size, (const char **) NULL, 10);
a1922 1
  struct artdata *tdata_hold;
d1941 14
d1959 3
a1961 2
  amt = SIZEOF_AR_FILE_HDR_BIG - SXCOFFARMAG;
  if (bfd_bread ((PTR) &hdr.memoff, amt, abfd) != amt)
d1968 5
a1972 14
  tdata_hold = bfd_ardata (abfd);

  amt = sizeof (struct artdata);
  bfd_ardata (abfd) = (struct artdata *) bfd_zalloc (abfd, amt);
  if (bfd_ardata (abfd) == (struct artdata *) NULL)
    goto error_ret_restore;

  bfd_ardata (abfd)->cache = NULL;
  bfd_ardata (abfd)->archive_head = NULL;
  bfd_ardata (abfd)->symdefs = NULL;
  bfd_ardata (abfd)->extended_names = NULL;
  bfd_ardata (abfd)->first_file_filepos = bfd_scan_vma (hdr.firstmemoff,
							(const char **) NULL,
							10);
d1977 1
a1977 1
    goto error_ret;
a1982 1
    error_ret:
d1984 1
a1984 2
    error_ret_restore:
      bfd_ardata (abfd) = tdata_hold;
d2014 9
a2022 4
      filestart = bfd_scan_vma (arch_xhdr_big (last_file)->nextoff,
				(const char **) NULL, 10);
    }

d2024 4
a2027 4
      || filestart == bfd_scan_vma (xcoff_ardata_big (archive)->memoff,
				    (const char **) NULL, 10)
      || filestart == bfd_scan_vma (xcoff_ardata_big (archive)->symoff,
				    (const char **) NULL, 10))
d2300 1
a2300 1
  if (rtld)
d2506 18
a2523 18
      _bfd_xcoff64_swap_aux_in,
      _bfd_xcoff64_swap_sym_in,
      _bfd_xcoff64_swap_lineno_in,
      _bfd_xcoff64_swap_aux_out,
      _bfd_xcoff64_swap_sym_out,
      _bfd_xcoff64_swap_lineno_out,
      xcoff64_swap_reloc_out,
      coff_swap_filehdr_out,
      coff_swap_aouthdr_out,
      coff_swap_scnhdr_out,
      FILHSZ,
      AOUTSZ,
      SCNHSZ,
      SYMESZ,
      AUXESZ,
      RELSZ,
      LINESZ,
      FILNMLEN,
d2526 1
a2526 1
      3,			/* _bfd_coff_default_section_alignment_power */
d2529 15
a2543 15
      coff_swap_filehdr_in,
      coff_swap_aouthdr_in,
      coff_swap_scnhdr_in,
      xcoff64_swap_reloc_in,
      xcoff64_bad_format_hook,
      coff_set_arch_mach_hook,
      coff_mkobject_hook,
      styp_to_sec_flags,
      coff_set_alignment_hook,
      coff_slurp_symbol_table,
      symname_in_debug_hook,
      coff_pointerize_aux_hook,
      coff_print_aux,
      dummy_reloc16_extra_cases,
      dummy_reloc16_estimate,
d2545 1
d2548 6
a2553 6
      xcoff64_ppc_relocate_section,
      coff_rtype_to_howto,
      NULL,			/* _bfd_coff_adjust_symndx */
      _bfd_generic_link_add_one_symbol,
      coff_link_output_has_begun,
      coff_final_link_postscript
d2557 2
a2558 2
    bfd_arch_powerpc,
    bfd_mach_ppc_620,
d2561 6
a2566 6
    xcoff64_swap_ldhdr_in,
    xcoff64_swap_ldhdr_out,
    xcoff64_swap_ldsym_in,
    xcoff64_swap_ldsym_out,
    xcoff64_swap_ldrel_in,
    xcoff64_swap_ldrel_out,
d2569 3
a2571 3
    LDHDRSZ,
    LDSYMSZ,
    LDRELSZ,
d2578 5
a2582 2
    _bfd_xcoff64_put_symbol_name,
    _bfd_xcoff64_put_ldsymbol_name,
d2584 1
d2600 1
a2600 1
    xcoff64_generate_rtinit,
d2611 3
a2613 2
    (HAS_RELOC | EXEC_P | HAS_LINENO | HAS_DEBUG | DYNAMIC
     | HAS_SYMS | HAS_LOCALS | WP_TEXT),
d2615 1
a2615 1
    (SEC_HAS_CONTENTS | SEC_ALLOC | SEC_LOAD | SEC_RELOC),
d2618 1
a2618 1
    15,				/* ar_max_namelen */
d2621 9
a2629 9
    bfd_getb64,
    bfd_getb_signed_64,
    bfd_putb64,
    bfd_getb32,
    bfd_getb_signed_32,
    bfd_putb32,
    bfd_getb16,
    bfd_getb_signed_16,
    bfd_putb16,
d2632 9
a2640 9
    bfd_getb64,
    bfd_getb_signed_64,
    bfd_putb64,
    bfd_getb32,
    bfd_getb_signed_32,
    bfd_putb32,
    bfd_getb16,
    bfd_getb_signed_16,
    bfd_putb16,
d2664 5
a2668 4
    bfd_true,
    bfd_true,
    coff_new_section_hook,
    _bfd_generic_get_section_contents,
d2672 2
a2673 1
    _bfd_xcoff_copy_private_bfd_data,
d2675 1
d2677 1
d2679 2
a2680 2
    ((boolean (*) (bfd *, flagword)) bfd_true),
    ((boolean (*) (bfd *, void * )) bfd_true),
d2683 3
a2685 3
    coff_core_file_failing_command,
    coff_core_file_failing_signal,
    coff_core_file_matches_executable_p,
d2688 5
a2692 2
    xcoff64_slurp_armap,
    bfd_false,
d2694 8
a2701 7
    bfd_dont_truncate_arname,
    _bfd_xcoff_write_armap,
    _bfd_xcoff_read_ar_hdr,
    xcoff64_openr_next_archived_file,
    _bfd_generic_get_elt_at_index,
    _bfd_xcoff_stat_arch_elt,
    bfd_true,
d2704 11
a2714 11
    coff_get_symtab_upper_bound,
    coff_get_symtab,
    coff_make_empty_symbol,
    coff_print_symbol,
    coff_get_symbol_info,
    _bfd_xcoff_is_local_label_name,
    coff_get_lineno,
    coff_find_nearest_line,
    coff_bfd_make_debug_symbol,
    _bfd_generic_read_minisymbols,
    _bfd_generic_minisymbol_to_symbol,
d2717 3
a2719 3
    coff_get_reloc_upper_bound,
    coff_canonicalize_reloc,
    xcoff64_reloc_type_lookup,
d2722 2
a2723 2
    coff_set_arch_mach,
    coff_set_section_contents,
d2726 2
a2727 1
    xcoff64_sizeof_headers,
d2729 10
a2738 10
    bfd_generic_relax_section,
    _bfd_xcoff_bfd_link_hash_table_create,
    _bfd_generic_link_hash_table_free,
    _bfd_xcoff_bfd_link_add_symbols,
    _bfd_generic_link_just_syms,
    _bfd_xcoff_bfd_final_link,
    _bfd_generic_link_split_section,
    bfd_generic_gc_sections,
    bfd_generic_merge_sections,
    bfd_generic_discard_group,
d2741 1
d2743 3
a2745 3
    _bfd_xcoff_canonicalize_dynamic_symtab,
    _bfd_xcoff_get_dynamic_reloc_upper_bound,
    _bfd_xcoff_canonicalize_dynamic_reloc,
d2750 1
d2763 18
a2780 18
      _bfd_xcoff64_swap_aux_in,
      _bfd_xcoff64_swap_sym_in,
      _bfd_xcoff64_swap_lineno_in,
      _bfd_xcoff64_swap_aux_out,
      _bfd_xcoff64_swap_sym_out,
      _bfd_xcoff64_swap_lineno_out,
      xcoff64_swap_reloc_out,
      coff_swap_filehdr_out,
      coff_swap_aouthdr_out,
      coff_swap_scnhdr_out,
      FILHSZ,
      AOUTSZ,
      SCNHSZ,
      SYMESZ,
      AUXESZ,
      RELSZ,
      LINESZ,
      FILNMLEN,
d2783 1
a2783 1
      3,			/* _bfd_coff_default_section_alignment_power */
d2786 15
a2800 15
      coff_swap_filehdr_in,
      coff_swap_aouthdr_in,
      coff_swap_scnhdr_in,
      xcoff64_swap_reloc_in,
      xcoff64_bad_format_hook,
      coff_set_arch_mach_hook,
      coff_mkobject_hook,
      styp_to_sec_flags,
      coff_set_alignment_hook,
      coff_slurp_symbol_table,
      symname_in_debug_hook,
      coff_pointerize_aux_hook,
      coff_print_aux,
      dummy_reloc16_extra_cases,
      dummy_reloc16_estimate,
d2802 1
d2805 6
a2810 6
      xcoff64_ppc_relocate_section,
      coff_rtype_to_howto,
      NULL,			/* _bfd_coff_adjust_symndx */
      _bfd_generic_link_add_one_symbol,
      coff_link_output_has_begun,
      coff_final_link_postscript
d2814 2
a2815 2
    bfd_arch_powerpc,
    bfd_mach_ppc_620,
d2818 6
a2823 6
    xcoff64_swap_ldhdr_in,
    xcoff64_swap_ldhdr_out,
    xcoff64_swap_ldsym_in,
    xcoff64_swap_ldsym_out,
    xcoff64_swap_ldrel_in,
    xcoff64_swap_ldrel_out,
d2826 3
a2828 3
    LDHDRSZ,
    LDSYMSZ,
    LDRELSZ,
d2834 4
a2837 2
    _bfd_xcoff64_put_symbol_name,
    _bfd_xcoff64_put_ldsymbol_name,
d2854 1
a2854 1
    xcoff64_generate_rtinit,
d2865 3
a2867 2
    (HAS_RELOC | EXEC_P | HAS_LINENO | HAS_DEBUG | DYNAMIC
     | HAS_SYMS | HAS_LOCALS | WP_TEXT),
d2869 1
a2869 1
    (SEC_HAS_CONTENTS | SEC_ALLOC | SEC_LOAD | SEC_RELOC),
d2872 1
a2872 1
    15,				/* ar_max_namelen */
d2875 9
a2883 9
    bfd_getb64,
    bfd_getb_signed_64,
    bfd_putb64,
    bfd_getb32,
    bfd_getb_signed_32,
    bfd_putb32,
    bfd_getb16,
    bfd_getb_signed_16,
    bfd_putb16,
d2886 9
a2894 9
    bfd_getb64,
    bfd_getb_signed_64,
    bfd_putb64,
    bfd_getb32,
    bfd_getb_signed_32,
    bfd_putb32,
    bfd_getb16,
    bfd_getb_signed_16,
    bfd_putb16,
d2918 5
a2922 4
    bfd_true,
    bfd_true,
    coff_new_section_hook,
    _bfd_generic_get_section_contents,
d2926 2
a2927 1
    _bfd_xcoff_copy_private_bfd_data,
d2929 1
d2931 1
d2933 2
a2934 2
    ((boolean (*) (bfd *, flagword)) bfd_true),
    ((boolean (*) (bfd *, void * )) bfd_true),
d2937 3
a2939 3
    xcoff64_core_file_failing_command,
    xcoff64_core_file_failing_signal,
    xcoff64_core_file_matches_executable_p,
d2942 5
a2946 2
    xcoff64_slurp_armap,
    bfd_false,
d2948 8
a2955 7
    bfd_dont_truncate_arname,
    _bfd_xcoff_write_armap,
    _bfd_xcoff_read_ar_hdr,
    xcoff64_openr_next_archived_file,
    _bfd_generic_get_elt_at_index,
    _bfd_xcoff_stat_arch_elt,
    bfd_true,
d2958 11
a2968 11
    coff_get_symtab_upper_bound,
    coff_get_symtab,
    coff_make_empty_symbol,
    coff_print_symbol,
    coff_get_symbol_info,
    _bfd_xcoff_is_local_label_name,
    coff_get_lineno,
    coff_find_nearest_line,
    coff_bfd_make_debug_symbol,
    _bfd_generic_read_minisymbols,
    _bfd_generic_minisymbol_to_symbol,
d2971 3
a2973 3
    coff_get_reloc_upper_bound,
    coff_canonicalize_reloc,
    xcoff64_reloc_type_lookup,
d2976 2
a2977 2
    coff_set_arch_mach,
    coff_set_section_contents,
d2980 2
a2981 1
    xcoff64_sizeof_headers,
d2983 10
a2992 10
    bfd_generic_relax_section,
    _bfd_xcoff_bfd_link_hash_table_create,
    _bfd_generic_link_hash_table_free,
    _bfd_xcoff_bfd_link_add_symbols,
    _bfd_generic_link_just_syms,
    _bfd_xcoff_bfd_final_link,
    _bfd_generic_link_split_section,
    bfd_generic_gc_sections,
    bfd_generic_merge_sections,
    bfd_generic_discard_group,
d2995 1
d2997 3
a2999 3
    _bfd_xcoff_canonicalize_dynamic_symtab,
    _bfd_xcoff_get_dynamic_reloc_upper_bound,
    _bfd_xcoff_canonicalize_dynamic_reloc,
d3004 1
@


1.32
log
@Replace bfd_alloc/bfd_malloc + memset with bfd_zalloc/bfd_zmalloc
@
text
@d745 1
a745 1
  if (abfd->output_has_begun == false)
@


1.31
log
@	* bfd-in.h: Remove "taken from the source" comment.
	* libbfd-in.h: Likewise.
	* libcoff-in.h: Likewise.
	* bfd-in2.h: Regenerate.
	* libbfd.h: Regenerate.
	* libcoff.h: Regenerate.

	* elf.c (bfd_elf_discard_group): Return true.
	* elf-bfd.h (bfd_elf_discard_group): Declare.
	* bfd-in.h (bfd_elf_discard_group): Don't declare here.
	* section.c (bfd_discard_group): Rename to bfd_generic_discard_group.
	* bfd.c (bfd_discard_group): Define.
	* targets.c (struct bfd_target): Add _bfd_discard_group.
	(BFD_JUMP_TABLE_LINK): Here too.
	* libbfd-in.h (_bfd_nolink_bfd_discard_group): Define.
	* aout-adobe.c (aout_32_bfd_discard_group): Define.
	* aout-target.h (MY_bfd_discard_group): Define.
	* aout-tic30.c (MY_bfd_discard_group): Define.
	* binary.c (binary_bfd_discard_group): Define.
	* bout.c (b_out_bfd_discard_group): Define.
	* coff-alpha.c (_bfd_ecoff_bfd_discard_group): Define.
	* coffcode.h (coff_bfd_discard_group): Define.
	* coff-mips.c (_bfd_ecoff_bfd_discard_group): Define.
	* elfxx-target.h (bfd_elfNN_bfd_discard_group): Define.
	* i386msdos.c (msdos_bfd_discard_group): Define.
	* i386os9k.c (os9k_bfd_discard_group): Define.
	* ieee.c (ieee_bfd_discard_group): Define.
	* ihex.c (ihex_bfd_discard_group): Define.
	* mmo.c (mmo_bfd_discard_group): Define.
	* nlm-target.h (nlm_bfd_discard_group): Define.
	* oasys.c (oasys_bfd_discard_group): Define.
	* ppcboot.c (ppcboot_bfd_discard_group): Define.
	* som.c (som_bfd_discard_group): Define.
	* srec.c (srec_bfd_discard_group): Define.
	* tekhex.c (tekhex_bfd_discard_group): Define.
	* versados.c (versados_bfd_discard_group): Define.
	* vms.c (vms_bfd_discard_group): Define.
	* xcoff-target.h (_bfd_xcoff_bfd_discard_group): Define.
	* coff64-rs6000.c (rs6000coff64_vec): Update initialiser.
	(aix5coff64_vec): Likewise.
	* coff-rs6000.c (rs6000coff_vec, pmac_xcoff_vec): Likewise.
@
text
@d2267 1
a2267 1
  data_buffer = (bfd_byte *)bfd_malloc (data_buffer_size);
a2270 2
  memset (data_buffer, 0, data_buffer_size);

d2303 4
a2306 2
  string_table = (bfd_byte *)bfd_malloc (string_table_size);
  memset (string_table, 0, string_table_size);
@


1.30
log
@Add 16 bit R_RBA.
@
text
@d2738 1
d2992 1
@


1.29
log
@Fix C_FILE auxent.
@
text
@d1733 16
d1769 2
@


1.29.2.1
log
@Merge with mainline, kseitz_interps-20020619-merge.
@
text
@a1732 16

  /* Modifiable branch absolute.  */
  HOWTO (R_RBA,			/* type */
	 0,			/* rightshift */
	 1,			/* size (0 = byte, 1 = short, 2 = long) */
	 16,			/* bitsize */
	 false,			/* pc_relative */
	 0,			/* bitpos */
	 complain_overflow_bitfield, /* complain_on_overflow */
	 0,			/* special_function */
	 "R_RBA_16",		/* name */
	 true,			/* partial_inplace */
	 0xffff,		/* src_mask */
	 0xffff,		/* dst_mask */
	 false),		/* pcrel_offset */

a1752 2
      else if (R_RBA == internal->r_type) 
	relent->howto = &xcoff64_howto_table[0x1f];
d2249 1
a2249 1
  data_buffer = (bfd_byte *) bfd_zmalloc (data_buffer_size);
d2253 2
d2287 2
a2288 4
  string_table = (bfd_byte *) bfd_zmalloc (string_table_size);
  if (string_table == NULL)
    return false;

a2719 1
  bfd_generic_discard_group,		/* _bfd_discard_group */
a2972 1
  bfd_generic_discard_group,		/* _bfd_discard_group */
@


1.29.2.2
log
@Merge w/trunk (kseitz_interps-20020722-merge).
@
text
@d745 1
a745 1
  if (! abfd->output_has_begun)
@


1.29.2.3
log
@Merge with kseitz_interps-20020809-merge of CVS head.
@
text
@d159 1
a159 1
  PARAMS ((XCOFF_RELOC_FUNCTION_ARGS)) =
d161 4
a164 4
  xcoff_reloc_type_pos,	 /* R_POS   (0x00) */
  xcoff_reloc_type_neg,	 /* R_NEG   (0x01) */
  xcoff_reloc_type_rel,	 /* R_REL   (0x02) */
  xcoff_reloc_type_toc,	 /* R_TOC   (0x03) */
d166 5
a170 5
  xcoff_reloc_type_toc,	 /* R_GL    (0x05) */
  xcoff_reloc_type_toc,	 /* R_TCL   (0x06) */
  xcoff_reloc_type_fail, /*	    (0x07) */
  xcoff_reloc_type_ba,	 /* R_BA    (0x08) */
  xcoff_reloc_type_fail, /*	    (0x09) */
d172 4
a175 4
  xcoff_reloc_type_fail, /*	    (0x0b) */
  xcoff_reloc_type_pos,	 /* R_RL    (0x0c) */
  xcoff_reloc_type_pos,	 /* R_RLA   (0x0d) */
  xcoff_reloc_type_fail, /*	    (0x0e) */
d177 4
a180 4
  xcoff_reloc_type_fail, /*	    (0x10) */
  xcoff_reloc_type_fail, /*	    (0x11) */
  xcoff_reloc_type_toc,	 /* R_TRL   (0x12) */
  xcoff_reloc_type_toc,	 /* R_TRLA  (0x13) */
d183 1
a183 1
  xcoff_reloc_type_ba,	 /* R_CAI   (0x16) */
d185 2
a186 2
  xcoff_reloc_type_ba,	 /* R_RBA   (0x18) */
  xcoff_reloc_type_ba,	 /* R_RBAC  (0x19) */
d188 1
a188 1
  xcoff_reloc_type_ba,	 /* R_RBRC  (0x1b) */
d217 1
a217 1
  PARAMS ((bfd *cbfd, bfd *ebfd));
d725 1
a725 1
     bfd *abfd;
d889 3
a891 5
  internal_a.magic = (abfd->flags & D_PAGED
		      ? RS6K_AOUTHDR_ZMAGIC
		      : (abfd->flags & WP_TEXT
			 ? RS6K_AOUTHDR_NMAGIC
			 : RS6K_AOUTHDR_OMAGIC));
d1057 1
a1057 1
      bfd_coff_swap_aouthdr_out (abfd, (PTR) &internal_a, (PTR) buff);
d1069 2
a1070 2
static boolean
xcoff64_reloc_type_br (input_bfd, input_section, output_bfd, rel, sym, howto,
d1085 1
a1085 1
  if (0 > rel->r_symndx)
d1097 4
a1100 4
  if (NULL != h
      && bfd_link_hash_defined == h->root.type
      && (rel->r_vaddr - input_section->vma + 8
	  <= input_section->_cooked_size))
d1104 1
a1104 1

d1107 2
a1108 2

      /* The _ptrgl function is magic.  It is used by the AIX compiler to call
d1110 1
a1110 1
      if (h->smclas == XMC_GL || strcmp (h->root.root.string, "._ptrgl") == 0)
d1112 6
a1117 6
	  if (next == 0x4def7b82			/* cror 15,15,15  */
	      || next == 0x4ffffb82			/* cror 31,31,31  */
	      || next == 0x60000000)			/* ori	r0,r0,0	  */
	    bfd_put_32 (input_bfd, 0xe8410028, pnext);	/* ld	r2,40(r1) */
	}
      else
d1119 2
a1120 2
	  if (next == 0xe8410028)			/* ld r2,40(r1)	  */
	    bfd_put_32 (input_bfd, 0x60000000, pnext);	/* ori r0,r0,0	  */
d1122 2
a1123 2
    }
  else if (NULL != h && bfd_link_hash_undefined == h->root.type)
d1127 1
a1127 1
	 is greater than 2^25, the linker will return an invalid error
d1129 1
a1129 1
	 truncated but no it not important.  For this case, disable the
d1133 1
a1133 1

d1137 1
a1137 1

d1140 1
a1140 1

d1142 2
a1143 2
  *relocation -= (input_section->output_section->vma
		  + input_section->output_offset);
d1182 2
a1183 2
	 merely used to prevent garbage collection from occurring for
	 the csect including the symbol which it references.  */
d1194 2
a1195 3
      howto.complain_on_overflow = (rel->r_size & 0x80
				    ? complain_overflow_signed
				    : complain_overflow_bitfield);
d1199 1
a1199 1
      howto.src_mask = howto.dst_mask = N_ONES (howto.bitsize);
d1207 1
a1207 1
      symndx = rel->r_symndx;
d1209 1
a1209 1
      if (-1 != symndx)
d1212 1
a1212 1

d1216 2
a1217 2

	  if (NULL == h)
d1230 2
a1231 2
	    }
	  else
d1233 2
a1234 2
	      if (h->root.type == bfd_link_hash_defined
		  || h->root.type == bfd_link_hash_defweak)
d1240 2
a1241 2
		}
	      else if (h->root.type == bfd_link_hash_common)
d1246 3
a1248 3
		}
	      else if ((0 == (h->flags & (XCOFF_DEF_DYNAMIC | XCOFF_IMPORT)))
		       && ! info->relocateable)
d1254 1
a1254 1

d1261 5
a1265 5

      if (rel->r_type >= XCOFF_MAX_CALCULATE_RELOCATION
	  || ((*xcoff64_calculate_relocation[rel->r_type])
	      (input_bfd, input_section, output_bfd, rel, sym, &howto, val,
	       addend, &relocation, contents)))
d1267 1
a1267 1

d1271 1
a1271 1

d1273 2
a1274 2
	abort ();

d1280 1
a1280 1
      else
d1282 3
a1284 3

      /* overflow.

d1289 7
a1295 7

      if ((unsigned int) howto.complain_on_overflow
	  >= XCOFF_MAX_COMPLAIN_OVERFLOW)
	abort ();

      if (((*xcoff_complain_overflow[howto.complain_on_overflow])
	   (input_bfd, value_to_relocate, relocation, &howto)))
d1300 2
a1301 2

	  if (symndx == -1)
d1304 2
a1305 2
	    }
	  else if (h != NULL)
d1308 2
a1309 2
	    }
	  else
d1316 1
a1316 1

d1324 4
a1327 4
      value_to_relocate = ((value_to_relocate & ~howto.dst_mask)
			   | (((value_to_relocate & howto.src_mask)
			       + relocation) & howto.dst_mask));

d1335 1
a1335 1

d1409 1
a1409 1
  /* I don't really know what this is.	*/
d1427 1
a1427 1
	 1,			/* size (0 = byte, 1 = short, 2 = long) */
d1442 1
a1442 1
	 1,			/* size (0 = byte, 1 = short, 2 = long) */
d1467 2
a1468 2
	 0x03fffffc,		/* src_mask */
	 0x03fffffc,		/* dst_mask */
d1484 2
a1485 2
	 0x03fffffc,		/* src_mask */
	 0x03fffffc,		/* dst_mask */
d1493 1
a1493 1
	 1,			/* size (0 = byte, 1 = short, 2 = long) */
d1508 1
a1508 1
	 1,			/* size (0 = byte, 1 = short, 2 = long) */
d1522 1
a1522 1
  /* Non-relocating reference.	*/
d1529 1
a1529 1
	 complain_overflow_dont, /* complain_on_overflow */
d1543 1
a1543 1
	 1,			/* size (0 = byte, 1 = short, 2 = long) */
d1558 1
a1558 1
	 1,			/* size (0 = byte, 1 = short, 2 = long) */
d1603 1
a1603 1
	 1,			/* size (0 = byte, 1 = short, 2 = long) */
d1615 1
a1615 1
  /* Modifiable call relative.	*/
d1618 1
a1618 1
	 1,			/* size (0 = byte, 1 = short, 2 = long) */
d1641 2
a1642 2
	 0x03fffffc,		/* src_mask */
	 0x03fffffc,		/* dst_mask */
d1656 2
a1657 2
	 0xffffffff,		/* src_mask */
	 0xffffffff,		/* dst_mask */
d1671 2
a1672 2
	 0x03fffffc,		/* src_mask */
	 0x03fffffc,		/* dst_mask */
d1678 1
a1678 1
	 1,			/* size (0 = byte, 1 = short, 2 = long) */
d1720 6
a1725 6
  HOWTO (R_RBR,			/* type */
	 0,			/* rightshift */
	 1,			/* size (0 = byte, 1 = short, 2 = long) */
	 16,			/* bitsize */
	 false,			/* pc_relative */
	 0,			/* bitpos */
d1727 6
a1732 6
	 0,			/* special_function */
	 "R_RBR_16",		/* name */
	 true,			/* partial_inplace */
	 0xffff,		/* src_mask */
	 0xffff,		/* dst_mask */
	 false),		/* pcrel_offset */
d1761 1
a1761 1

d1765 1
a1765 1
      if (R_BA == internal->r_type)
d1767 1
a1767 1
      else if (R_RBR == internal->r_type)
d1769 1
a1769 1
      else if (R_RBA == internal->r_type)
d1775 1
a1775 1
      if (R_POS == internal->r_type)
d1778 1
a1778 1

d1788 4
d1843 1
a1843 2
  off = bfd_scan_vma (xcoff_ardata_big (abfd)->symoff64,
		      (const char **) NULL, 10);
d1864 4
a1867 1
  sz = bfd_scan_vma (hdr.size, (const char **) NULL, 10);
a1922 1
  struct artdata *tdata_hold;
d1941 14
d1959 3
a1961 2
  amt = SIZEOF_AR_FILE_HDR_BIG - SXCOFFARMAG;
  if (bfd_bread ((PTR) &hdr.memoff, amt, abfd) != amt)
d1968 5
a1972 14
  tdata_hold = bfd_ardata (abfd);

  amt = sizeof (struct artdata);
  bfd_ardata (abfd) = (struct artdata *) bfd_zalloc (abfd, amt);
  if (bfd_ardata (abfd) == (struct artdata *) NULL)
    goto error_ret_restore;

  bfd_ardata (abfd)->cache = NULL;
  bfd_ardata (abfd)->archive_head = NULL;
  bfd_ardata (abfd)->symdefs = NULL;
  bfd_ardata (abfd)->extended_names = NULL;
  bfd_ardata (abfd)->first_file_filepos = bfd_scan_vma (hdr.firstmemoff,
							(const char **) NULL,
							10);
d1977 1
a1977 1
    goto error_ret;
a1982 1
    error_ret:
d1984 1
a1984 2
    error_ret_restore:
      bfd_ardata (abfd) = tdata_hold;
d2014 9
a2022 4
      filestart = bfd_scan_vma (arch_xhdr_big (last_file)->nextoff,
				(const char **) NULL, 10);
    }

d2024 4
a2027 4
      || filestart == bfd_scan_vma (xcoff_ardata_big (archive)->memoff,
				    (const char **) NULL, 10)
      || filestart == bfd_scan_vma (xcoff_ardata_big (archive)->symoff,
				    (const char **) NULL, 10))
d2239 23
a2261 23
     0x0000	      0x00000000 : rtl
     0x0004	      0x00000000 :
     0x0008	      0x00000018 : offset to init, or 0
     0x000C	      0x00000038 : offset to fini, or 0
     0x0010	      0x00000010 : size of descriptor
     0x0014	      0x00000000 : pad
     0x0018	      0x00000000 : init, needs a reloc
     0x001C	      0x00000000 :
     0x0020	      0x00000058 : offset to init name
     0x0024	      0x00000000 : flags, padded to a word
     0x0028	      0x00000000 : empty init
     0x002C	      0x00000000 :
     0x0030	      0x00000000 :
     0x0034	      0x00000000 :
     0x0038	      0x00000000 : fini, needs a reloc
     0x003C	      0x00000000 :
     0x0040	      0x00000??? : offset to fini name
     0x0044	      0x00000000 : flags, padded to a word
     0x0048	      0x00000000 : empty fini
     0x004C	      0x00000000 :
     0x0050	      0x00000000 :
     0x0054	      0x00000000 :
     0x0058	      init name
d2265 1
a2265 1
  data_buffer_size = (data_buffer_size + 7) &~ (bfd_size_type) 7;
d2300 1
a2300 1
  if (rtld)
d2504 98
a2601 93
  {
    { /* COFF backend, defined in libcoff.h.  */
      _bfd_xcoff64_swap_aux_in,
      _bfd_xcoff64_swap_sym_in,
      _bfd_xcoff64_swap_lineno_in,
      _bfd_xcoff64_swap_aux_out,
      _bfd_xcoff64_swap_sym_out,
      _bfd_xcoff64_swap_lineno_out,
      xcoff64_swap_reloc_out,
      coff_swap_filehdr_out,
      coff_swap_aouthdr_out,
      coff_swap_scnhdr_out,
      FILHSZ,
      AOUTSZ,
      SCNHSZ,
      SYMESZ,
      AUXESZ,
      RELSZ,
      LINESZ,
      FILNMLEN,
      true,			/* _bfd_coff_long_filenames */
      false,			/* _bfd_coff_long_section_names */
      3,			/* _bfd_coff_default_section_alignment_power */
      true,			/* _bfd_coff_force_symnames_in_strings */
      4,			/* _bfd_coff_debug_string_prefix_length */
      coff_swap_filehdr_in,
      coff_swap_aouthdr_in,
      coff_swap_scnhdr_in,
      xcoff64_swap_reloc_in,
      xcoff64_bad_format_hook,
      coff_set_arch_mach_hook,
      coff_mkobject_hook,
      styp_to_sec_flags,
      coff_set_alignment_hook,
      coff_slurp_symbol_table,
      symname_in_debug_hook,
      coff_pointerize_aux_hook,
      coff_print_aux,
      dummy_reloc16_extra_cases,
      dummy_reloc16_estimate,
      NULL,			/* bfd_coff_sym_is_global */
      coff_compute_section_file_positions,
      NULL,			/* _bfd_coff_start_final_link */
      xcoff64_ppc_relocate_section,
      coff_rtype_to_howto,
      NULL,			/* _bfd_coff_adjust_symndx */
      _bfd_generic_link_add_one_symbol,
      coff_link_output_has_begun,
      coff_final_link_postscript
    },

    0x01EF,			/* magic number */
    bfd_arch_powerpc,
    bfd_mach_ppc_620,

    /* Function pointers to xcoff specific swap routines.  */
    xcoff64_swap_ldhdr_in,
    xcoff64_swap_ldhdr_out,
    xcoff64_swap_ldsym_in,
    xcoff64_swap_ldsym_out,
    xcoff64_swap_ldrel_in,
    xcoff64_swap_ldrel_out,

    /* Sizes.  */
    LDHDRSZ,
    LDSYMSZ,
    LDRELSZ,
    24,				/* _xcoff_function_descriptor_size */
    0,				/* _xcoff_small_aout_header_size */

    /* Versions.  */
    2,				/* _xcoff_ldhdr_version */

    _bfd_xcoff64_put_symbol_name,
    _bfd_xcoff64_put_ldsymbol_name,
    &xcoff64_dynamic_reloc,
    xcoff64_create_csect_from_smclas,

    /* Lineno and reloc count overflow.  */
    xcoff64_is_lineno_count_overflow,
    xcoff64_is_reloc_count_overflow,

    xcoff64_loader_symbol_offset,
    xcoff64_loader_reloc_offset,

    /* glink.  */
    &xcoff64_glink_code[0],
    40,				/* _xcoff_glink_size */

    /* rtinit.  */
    88,				/* _xcoff_rtinit_size */
    xcoff64_generate_rtinit,
  };
d2605 50
a2654 76
  {
    "aixcoff64-rs6000",
    bfd_target_xcoff_flavour,
    BFD_ENDIAN_BIG,		/* data byte order is big */
    BFD_ENDIAN_BIG,		/* header byte order is big */

    (HAS_RELOC | EXEC_P | HAS_LINENO | HAS_DEBUG | DYNAMIC
     | HAS_SYMS | HAS_LOCALS | WP_TEXT),

    (SEC_HAS_CONTENTS | SEC_ALLOC | SEC_LOAD | SEC_RELOC),
    0,				/* leading char */
    '/',			/* ar_pad_char */
    15,				/* ar_max_namelen */

    /* data */
    bfd_getb64,
    bfd_getb_signed_64,
    bfd_putb64,
    bfd_getb32,
    bfd_getb_signed_32,
    bfd_putb32,
    bfd_getb16,
    bfd_getb_signed_16,
    bfd_putb16,

    /* hdrs */
    bfd_getb64,
    bfd_getb_signed_64,
    bfd_putb64,
    bfd_getb32,
    bfd_getb_signed_32,
    bfd_putb32,
    bfd_getb16,
    bfd_getb_signed_16,
    bfd_putb16,

    { /* bfd_check_format */
      _bfd_dummy_target,
      coff_object_p,
      xcoff64_archive_p,
      CORE_FILE_P
    },

    { /* bfd_set_format */
      bfd_false,
      coff_mkobject,
      _bfd_generic_mkarchive,
      bfd_false
    },

    {/* bfd_write_contents */
      bfd_false,
      xcoff64_write_object_contents,
      _bfd_xcoff_write_archive_contents,
      bfd_false
    },

    /* Generic */
    bfd_true,
    bfd_true,
    coff_new_section_hook,
    _bfd_generic_get_section_contents,
    _bfd_generic_get_section_contents_in_window,

    /* Copy */
    _bfd_xcoff_copy_private_bfd_data,
    ((boolean (*) (bfd *, bfd *)) bfd_true),
    ((boolean (*) (bfd *, asection *, bfd *, asection *)) bfd_true),
    ((boolean (*) (bfd *, asymbol *, bfd *, asymbol *)) bfd_true),
    ((boolean (*) (bfd *, flagword)) bfd_true),
    ((boolean (*) (bfd *, void * )) bfd_true),

    /* Core */
    coff_core_file_failing_command,
    coff_core_file_failing_signal,
    coff_core_file_matches_executable_p,
d2656 1
a2656 2
    /* Archive */
    xcoff64_slurp_armap,
d2658 88
a2745 50
    ((boolean (*) (bfd *, char **, bfd_size_type *, const char **)) bfd_false),
    bfd_dont_truncate_arname,
    _bfd_xcoff_write_armap,
    _bfd_xcoff_read_ar_hdr,
    xcoff64_openr_next_archived_file,
    _bfd_generic_get_elt_at_index,
    _bfd_xcoff_stat_arch_elt,
    bfd_true,

    /* Symbols */
    coff_get_symtab_upper_bound,
    coff_get_symtab,
    coff_make_empty_symbol,
    coff_print_symbol,
    coff_get_symbol_info,
    _bfd_xcoff_is_local_label_name,
    coff_get_lineno,
    coff_find_nearest_line,
    coff_bfd_make_debug_symbol,
    _bfd_generic_read_minisymbols,
    _bfd_generic_minisymbol_to_symbol,

    /* Reloc */
    coff_get_reloc_upper_bound,
    coff_canonicalize_reloc,
    xcoff64_reloc_type_lookup,

    /* Write */
    coff_set_arch_mach,
    coff_set_section_contents,

    /* Link */
    xcoff64_sizeof_headers,
    bfd_generic_get_relocated_section_contents,
    bfd_generic_relax_section,
    _bfd_xcoff_bfd_link_hash_table_create,
    _bfd_generic_link_hash_table_free,
    _bfd_xcoff_bfd_link_add_symbols,
    _bfd_generic_link_just_syms,
    _bfd_xcoff_bfd_final_link,
    _bfd_generic_link_split_section,
    bfd_generic_gc_sections,
    bfd_generic_merge_sections,
    bfd_generic_discard_group,

    /* Dynamic */
    _bfd_xcoff_get_dynamic_symtab_upper_bound,
    _bfd_xcoff_canonicalize_dynamic_symtab,
    _bfd_xcoff_get_dynamic_reloc_upper_bound,
    _bfd_xcoff_canonicalize_dynamic_reloc,
d2747 2
a2748 2
    /* Opposite endian version, none exists */
    NULL,
d2750 3
a2752 2
    (void *) &bfd_xcoff_backend_data,
  };
d2755 1
a2755 1
extern boolean xcoff64_core_file_matches_executable_p PARAMS ((bfd *, bfd *));
d2761 95
a2855 92
  {
    { /* COFF backend, defined in libcoff.h.  */
      _bfd_xcoff64_swap_aux_in,
      _bfd_xcoff64_swap_sym_in,
      _bfd_xcoff64_swap_lineno_in,
      _bfd_xcoff64_swap_aux_out,
      _bfd_xcoff64_swap_sym_out,
      _bfd_xcoff64_swap_lineno_out,
      xcoff64_swap_reloc_out,
      coff_swap_filehdr_out,
      coff_swap_aouthdr_out,
      coff_swap_scnhdr_out,
      FILHSZ,
      AOUTSZ,
      SCNHSZ,
      SYMESZ,
      AUXESZ,
      RELSZ,
      LINESZ,
      FILNMLEN,
      true,			/* _bfd_coff_long_filenames */
      false,			/* _bfd_coff_long_section_names */
      3,			/* _bfd_coff_default_section_alignment_power */
      true,			/* _bfd_coff_force_symnames_in_strings */
      4,			/* _bfd_coff_debug_string_prefix_length */
      coff_swap_filehdr_in,
      coff_swap_aouthdr_in,
      coff_swap_scnhdr_in,
      xcoff64_swap_reloc_in,
      xcoff64_bad_format_hook,
      coff_set_arch_mach_hook,
      coff_mkobject_hook,
      styp_to_sec_flags,
      coff_set_alignment_hook,
      coff_slurp_symbol_table,
      symname_in_debug_hook,
      coff_pointerize_aux_hook,
      coff_print_aux,
      dummy_reloc16_extra_cases,
      dummy_reloc16_estimate,
      NULL,			/* bfd_coff_sym_is_global */
      coff_compute_section_file_positions,
      NULL,			/* _bfd_coff_start_final_link */
      xcoff64_ppc_relocate_section,
      coff_rtype_to_howto,
      NULL,			/* _bfd_coff_adjust_symndx */
      _bfd_generic_link_add_one_symbol,
      coff_link_output_has_begun,
      coff_final_link_postscript
    },

    U64_TOCMAGIC,		/* magic number */
    bfd_arch_powerpc,
    bfd_mach_ppc_620,

    /* Function pointers to xcoff specific swap routines.  */
    xcoff64_swap_ldhdr_in,
    xcoff64_swap_ldhdr_out,
    xcoff64_swap_ldsym_in,
    xcoff64_swap_ldsym_out,
    xcoff64_swap_ldrel_in,
    xcoff64_swap_ldrel_out,

    /* Sizes.  */
    LDHDRSZ,
    LDSYMSZ,
    LDRELSZ,
    24,				/* _xcoff_function_descriptor_size */
    0,				/* _xcoff_small_aout_header_size */
    /* Versions.  */
    2,				/* _xcoff_ldhdr_version */

    _bfd_xcoff64_put_symbol_name,
    _bfd_xcoff64_put_ldsymbol_name,
    &xcoff64_dynamic_reloc,
    xcoff64_create_csect_from_smclas,

    /* Lineno and reloc count overflow.  */
    xcoff64_is_lineno_count_overflow,
    xcoff64_is_reloc_count_overflow,

    xcoff64_loader_symbol_offset,
    xcoff64_loader_reloc_offset,

    /* glink.  */
    &xcoff64_glink_code[0],
    40,				/* _xcoff_glink_size */

    /* rtinit.  */
    88,				/* _xcoff_rtinit_size */
    xcoff64_generate_rtinit,
  };
d2859 50
a2908 76
  {
    "aix5coff64-rs6000",
    bfd_target_xcoff_flavour,
    BFD_ENDIAN_BIG,		/* data byte order is big */
    BFD_ENDIAN_BIG,		/* header byte order is big */

    (HAS_RELOC | EXEC_P | HAS_LINENO | HAS_DEBUG | DYNAMIC
     | HAS_SYMS | HAS_LOCALS | WP_TEXT),

    (SEC_HAS_CONTENTS | SEC_ALLOC | SEC_LOAD | SEC_RELOC),
    0,				/* leading char */
    '/',			/* ar_pad_char */
    15,				/* ar_max_namelen */

    /* data */
    bfd_getb64,
    bfd_getb_signed_64,
    bfd_putb64,
    bfd_getb32,
    bfd_getb_signed_32,
    bfd_putb32,
    bfd_getb16,
    bfd_getb_signed_16,
    bfd_putb16,

    /* hdrs */
    bfd_getb64,
    bfd_getb_signed_64,
    bfd_putb64,
    bfd_getb32,
    bfd_getb_signed_32,
    bfd_putb32,
    bfd_getb16,
    bfd_getb_signed_16,
    bfd_putb16,

    { /* bfd_check_format */
      _bfd_dummy_target,
      coff_object_p,
      xcoff64_archive_p,
      xcoff64_core_p
    },

    { /* bfd_set_format */
      bfd_false,
      coff_mkobject,
      _bfd_generic_mkarchive,
      bfd_false
    },

    {/* bfd_write_contents */
      bfd_false,
      xcoff64_write_object_contents,
      _bfd_xcoff_write_archive_contents,
      bfd_false
    },

    /* Generic */
    bfd_true,
    bfd_true,
    coff_new_section_hook,
    _bfd_generic_get_section_contents,
    _bfd_generic_get_section_contents_in_window,

    /* Copy */
    _bfd_xcoff_copy_private_bfd_data,
    ((boolean (*) (bfd *, bfd *)) bfd_true),
    ((boolean (*) (bfd *, asection *, bfd *, asection *)) bfd_true),
    ((boolean (*) (bfd *, asymbol *, bfd *, asymbol *)) bfd_true),
    ((boolean (*) (bfd *, flagword)) bfd_true),
    ((boolean (*) (bfd *, void * )) bfd_true),

    /* Core */
    xcoff64_core_file_failing_command,
    xcoff64_core_file_failing_signal,
    xcoff64_core_file_matches_executable_p,
d2910 1
a2910 2
    /* Archive */
    xcoff64_slurp_armap,
d2912 88
a2999 50
    ((boolean (*) (bfd *, char **, bfd_size_type *, const char **)) bfd_false),
    bfd_dont_truncate_arname,
    _bfd_xcoff_write_armap,
    _bfd_xcoff_read_ar_hdr,
    xcoff64_openr_next_archived_file,
    _bfd_generic_get_elt_at_index,
    _bfd_xcoff_stat_arch_elt,
    bfd_true,

    /* Symbols */
    coff_get_symtab_upper_bound,
    coff_get_symtab,
    coff_make_empty_symbol,
    coff_print_symbol,
    coff_get_symbol_info,
    _bfd_xcoff_is_local_label_name,
    coff_get_lineno,
    coff_find_nearest_line,
    coff_bfd_make_debug_symbol,
    _bfd_generic_read_minisymbols,
    _bfd_generic_minisymbol_to_symbol,

    /* Reloc */
    coff_get_reloc_upper_bound,
    coff_canonicalize_reloc,
    xcoff64_reloc_type_lookup,

    /* Write */
    coff_set_arch_mach,
    coff_set_section_contents,

    /* Link */
    xcoff64_sizeof_headers,
    bfd_generic_get_relocated_section_contents,
    bfd_generic_relax_section,
    _bfd_xcoff_bfd_link_hash_table_create,
    _bfd_generic_link_hash_table_free,
    _bfd_xcoff_bfd_link_add_symbols,
    _bfd_generic_link_just_syms,
    _bfd_xcoff_bfd_final_link,
    _bfd_generic_link_split_section,
    bfd_generic_gc_sections,
    bfd_generic_merge_sections,
    bfd_generic_discard_group,

    /* Dynamic */
    _bfd_xcoff_get_dynamic_symtab_upper_bound,
    _bfd_xcoff_canonicalize_dynamic_symtab,
    _bfd_xcoff_get_dynamic_reloc_upper_bound,
    _bfd_xcoff_canonicalize_dynamic_reloc,
d3001 2
a3002 2
    /* Opposite endian version, none exists.  */
    NULL,
d3004 3
a3006 2
    (void *) & bfd_xcoff_aix5_backend_data,
  };
@


1.29.2.4
log
@Merge with kseitz_interps-20020829-merge tag from trunk.
@
text
@d2598 1
a2598 1
    SEC_HAS_CONTENTS | SEC_ALLOC | SEC_LOAD | SEC_RELOC | SEC_CODE | SEC_DATA,
d2837 1
a2837 1
    SEC_HAS_CONTENTS | SEC_ALLOC | SEC_LOAD | SEC_RELOC | SEC_CODE | SEC_DATA,
@


1.29.2.5
log
@Merge with kseitz_interps-20020930-merge.
@
text
@d1017 1
a1017 1
	      if (bfd_get_mach (abfd) == bfd_mach_ppc)
@


1.28
log
@Fix ld --just-symbols
	* aix5ppc-core.c: Warning fixes.
	* aout-adobe.c (aout_32_bfd_link_just_syms): Define.
	* aout-target.h (MY_bfd_link_just_syms): Define.
	* aout-tic30.c (MY_bfd_link_just_syms): Define.
	* bfd.c (bfd_link_just_syms): Define.
	* binary.c (binary_bfd_link_just_syms): Define.
	* bout.c (b_out_bfd_link_just_syms): Define.
	* coff-rs6000.c (rs6000coff_vec, pmac_xcoff_vec): Update initializer.
	* coff64-rs6000.c (rs6000coff64_vec, aix5coff64_vec): Likewise.
	* coffcode.h (coff_bfd_link_just_syms): Define.
	* elf-bfd.h (enum elf_link_info_type): Add ELF_INFO_TYPE_JUST_SYMS.
	(elf_discarded_section): Check for ELF_INFO_TYPE_JUST_SYMS.
	(_bfd_elf_link_just_syms): Declare.
	* elf.c (_bfd_elf_link_just_syms): New function.
	* elf-eh-frame.c (_bfd_elf_maybe_strip_eh_frame_hdr): Check that
	sections haven't already been discarded by the linker.
	* elflink.h (elf_link_add_object_symbols): Likewise for stab
	sections and SEC_MERGE sections.
	(elf_bfd_discard_info): Similarly here.
	* elfxx-target.h (bfd_elfNN_bfd_link_just_syms): Define.
	* i386msdos.c (msdos_bfd_link_just_syms): Define.
	* i386os9k.c (os9k_bfd_link_just_syms): Define.
	* ieee.c (ieee_bfd_link_just_syms): Define.
	* ihex.c (ihex_bfd_link_just_syms): Define.
	* libbfd-in.h (_bfd_nolink_bfd_link_just_syms): Define.
	(_bfd_generic_link_just_syms): Declare.
	* libecoff.h (_bfd_ecoff_bfd_link_just_syms): Define.
	* linker.c (_bfd_generic_link_just_syms): New function.
	* mmo.c (mmo_bfd_link_just_syms): Define.
	* nlm-target.h (nlm_bfd_link_just_syms): Define.
	* oasys.c (oasys_bfd_link_just_syms): Define.
	* ppcboot.c (ppcboot_bfd_link_just_syms): Define.
	* som.c (som_bfd_link_just_syms): Define.
	* srec.c (srec_bfd_link_just_syms): Define.
	* targets.c (struct bfd_target): Add _bfd_link_just_syms.
	(BFD_JUMP_TABLE_LINK): And here.
	* tekhex.c (tekhex_bfd_link_just_syms): Define.
	* versados.c (versados_bfd_link_just_syms): Define.
	* vms.c (vms_bfd_link_just_syms): Define.
	* libbfd.h: Regenerate.
	* bfd-in2.h: Regenerate.
@
text
@d427 1
a427 1
      if (ext->x_file.x_n.x_zeroes == 0)
@


1.27
log
@XCOFF64 fixes. For setting arch/mach and for R_BR relocations.
@
text
@d2715 2
a2716 1
  _bfd_xcoff_bfd_final_link,		/* _bfd_filnal_link */
d2968 2
a2969 1
  _bfd_xcoff_bfd_final_link,		/* _bfd_filnal_link */
@


1.27.2.1
log
@merge from trunk
@
text
@d427 1
a427 1
      if (in->x_file.x_n.x_zeroes == 0)
a1732 16

  /* Modifiable branch absolute.  */
  HOWTO (R_RBA,			/* type */
	 0,			/* rightshift */
	 1,			/* size (0 = byte, 1 = short, 2 = long) */
	 16,			/* bitsize */
	 false,			/* pc_relative */
	 0,			/* bitpos */
	 complain_overflow_bitfield, /* complain_on_overflow */
	 0,			/* special_function */
	 "R_RBA_16",		/* name */
	 true,			/* partial_inplace */
	 0xffff,		/* src_mask */
	 0xffff,		/* dst_mask */
	 false),		/* pcrel_offset */

a1752 2
      else if (R_RBA == internal->r_type) 
	relent->howto = &xcoff64_howto_table[0x1f];
d2249 1
a2249 1
  data_buffer = (bfd_byte *) bfd_zmalloc (data_buffer_size);
d2253 2
d2287 2
a2288 4
  string_table = (bfd_byte *) bfd_zmalloc (string_table_size);
  if (string_table == NULL)
    return false;

d2715 1
a2715 2
  _bfd_generic_link_just_syms,		/* _bfd_link_just_syms */
  _bfd_xcoff_bfd_final_link,		/* _bfd_final_link */
a2718 1
  bfd_generic_discard_group,		/* _bfd_discard_group */
d2967 1
a2967 2
  _bfd_generic_link_just_syms,		/* _bfd_link_just_syms */
  _bfd_xcoff_bfd_final_link,		/* _bfd_final_link */
a2970 1
  bfd_generic_discard_group,		/* _bfd_discard_group */
@


1.26
log
@Fix problem with objdump and 16 bit R_BA.
@
text
@d155 36
d1069 78
d1263 1
a1263 1
	  || (false == xcoff_calculate_relocation[rel->r_type]
@


1.25
log
@Rewrite xcoff*_ppc_relocate_section.
@
text
@d99 2
d204 3
a206 1

d621 34
d1244 1
a1244 1
	 "R_POS",		/* name */
d1351 1
a1351 1
	 "R_BA",		/* name */
d1555 1
a1555 1
	 "R_RBR",		/* name */
d1578 2
a1579 2
	 4,			/* size (0 = byte, 1 = short, 2 = long) */
	 64,			/* bitsize */
d1584 1
a1584 1
	 "R_POS",		/* name */
d1586 2
a1587 2
	 MINUS_ONE,		/* src_mask */
	 MINUS_ONE,		/* dst_mask */
d1593 1
a1593 1
	 2,			/* size (0 = byte, 1 = short, 2 = long) */
d1599 1
a1599 1
	 "R_BA",		/* name */
d1604 15
d1626 1
a1626 7
  relent->howto = xcoff64_howto_table + internal->r_type;

  /* Check for relocs we don't know of.  */
  if (internal->r_type
      >= sizeof (xcoff64_howto_table) / sizeof (xcoff64_howto_table[0]))
    abort ();
  if (internal->r_type != relent->howto->type)
d1629 18
d1656 4
a1659 6
#if 0
  if ((internal->r_size & 0x80) != 0
      ? (relent->howto->complain_on_overflow != complain_overflow_signed)
      : (relent->howto->complain_on_overflow != complain_overflow_bitfield))
    abort ();
#endif
d1679 2
a1681 2
    case BFD_RELOC_64:
      return &xcoff64_howto_table[0x1c];
d2380 1
a2380 1
    coff_swap_reloc_out,		/* _bfd_swap_reloc_out */
d2400 1
a2400 1
    coff_swap_reloc_in,			/* _bfd_reloc_in */
d2635 1
a2635 1
    coff_swap_reloc_out,		/* _bfd_swap_reloc_out */
d2655 1
a2655 1
    coff_swap_reloc_in,			/* _bfd_reloc_in */
@


1.24
log
@Fix C_FILE auxent on xcoff64.
@
text
@d995 2
a996 3
/* This is the relocation function for the RS/6000/POWER/PowerPC.
   This is currently the only processor which uses XCOFF; I hope that
   will never change.  */
d998 1
a998 1
static boolean
d1024 4
a1027 1
      bfd_reloc_status_type rstat;
d1030 2
a1031 2
	 merely used to prevent garbage collection from occurring for
	 the csect including the symbol which it references.  */
d1035 1
a1035 17
      symndx = rel->r_symndx;

      if (symndx == -1)
	{
	  h = NULL;
	  sym = NULL;
	  addend = 0;
	}
      else
	{
	  h = obj_xcoff_sym_hashes (input_bfd)[symndx];
	  sym = syms + symndx;
	  addend = - sym->n_value;
	}

      /* We build the howto information on the fly.  */

a1037 1
      howto.size = 4;
d1039 1
d1042 2
a1043 4
      if ((rel->r_size & 0x80) != 0)
	howto.complain_on_overflow = complain_overflow_signed;
      else
	howto.complain_on_overflow = complain_overflow_bitfield;
d1047 1
a1047 15

      if (howto.bitsize == 64)
	{
	  howto.src_mask = howto.dst_mask = MINUS_ONE;
	}
      else if (howto.bitsize == 32)
	{
	  howto.src_mask = howto.dst_mask = 0xffffffff;
	}
      else
	{
	  howto.src_mask = howto.dst_mask = (1 << howto.bitsize) - 1;
	  if (howto.bitsize == 16)
	    howto.size = 1;
	}
d1050 1
d1052 4
d1057 1
a1057 1
      if (h == NULL)
d1060 6
a1065 7

	  if (symndx == -1)
	    {
	      sec = bfd_abs_section_ptr;
	      val = 0;
	    }
	  else
d1078 2
a1079 8
	    }

	}
      else
	{

	  if (h->root.type == bfd_link_hash_defined
	      || h->root.type == bfd_link_hash_defweak)
d1081 16
a1096 97
	      asection *sec;

	      sec = h->root.u.def.section;
	      val = (h->root.u.def.value
		     + sec->output_section->vma
		     + sec->output_offset);

	    }
	  else if (h->root.type == bfd_link_hash_common)
	    {
	      asection *sec;

	      sec = h->root.u.c.p->section;
	      val = (sec->output_section->vma
		     + sec->output_offset);
	    }
	  else if ((h->flags & XCOFF_DEF_DYNAMIC) != 0
		   || (h->flags & XCOFF_IMPORT) != 0)
	    {
	      /* Every symbol in a shared object is defined somewhere.  */
	      val = 0;
	    }
	  else if (! info->relocateable)
	    {
	      if (! ((*info->callbacks->undefined_symbol)
		     (info, h->root.root.string, input_bfd, input_section,
		      rel->r_vaddr - input_section->vma, true)))
		return false;

	      /* Don't try to process the reloc.  It can't help, and
		 it may generate another error.  */
	      continue;
	    }
	}

      /* I took the relocation type definitions from two documents:
	 the PowerPC AIX Version 4 Application Binary Interface, First
	 Edition (April 1992), and the PowerOpen ABI, Big-Endian
	 32-Bit Hardware Implementation (June 30, 1994).  Differences
	 between the documents are noted below.  */

      switch (rel->r_type)
	{
	case R_RTB:
	case R_RRTBI:
	case R_RRTBA:
	  /* These relocs are defined by the PowerPC ABI to be
	     relative branches which use half of the difference
	     between the symbol and the program counter.  I can't
	     quite figure out when this is useful.  These relocs are
	     not defined by the PowerOpen ABI.  */
	default:
	  (*_bfd_error_handler)
	    (_("%s: unsupported relocation type 0x%02x"),
	     bfd_archive_filename (input_bfd), (unsigned int) rel->r_type);
	  bfd_set_error (bfd_error_bad_value);
	  return false;
	case R_POS:
	  /* Simple positive relocation.  */
	  break;
	case R_NEG:
	  /* Simple negative relocation.  */
	  val = - val;
	  break;
	case R_REL:
	  /* Simple PC relative relocation.  */
	  howto.pc_relative = true;
	  break;
	case R_TOC:
	  /* TOC relative relocation.  The value in the instruction in
	     the input file is the offset from the input file TOC to
	     the desired location.  We want the offset from the final
	     TOC to the desired location.  We have:
	     isym = iTOC + in
	     iinsn = in + o
	     osym = oTOC + on
	     oinsn = on + o
	     so we must change insn by on - in.
	  */
	case R_GL:
	  /* Global linkage relocation.  The value of this relocation
	     is the address of the entry in the TOC section.  */
	case R_TCL:
	  /* Local object TOC address.  I can't figure out the
	     difference between this and case R_GL.  */
	case R_TRL:
	  /* TOC relative relocation.  A TOC relative load instruction
	     which may be changed to a load address instruction.
	     FIXME: We don't currently implement this optimization.  */
	case R_TRLA:
	  /* TOC relative relocation.  This is a TOC relative load
	     address instruction which may be changed to a load
	     instruction.  FIXME: I don't know if this is the correct
	     implementation.  */
	  if (h != NULL && h->smclas != XMC_TD)
	    {
	      if (h->toc_section == NULL)
d1098 8
a1105 6
		  (*_bfd_error_handler)
		    (_("%s: TOC reloc at 0x%x to symbol `%s' with no TOC entry"),
		     bfd_archive_filename (input_bfd), rel->r_vaddr,
		     h->root.root.string);
		  bfd_set_error (bfd_error_bad_value);
		  return false;
a1106 4

	      BFD_ASSERT ((h->flags & XCOFF_SET_TOC) == 0);
	      val = (h->toc_section->output_section->vma
		     + h->toc_section->output_offset);
a1107 56

	  val = ((val - xcoff_data (output_bfd)->toc)
		 - (sym->n_value - xcoff_data (input_bfd)->toc));

	  addend = 0;
	  break;
	case R_BA:
	  /* Absolute branch.  We don't want to mess with the lower
	     two bits of the instruction.  */
	case R_CAI:
	  /* The PowerPC ABI defines this as an absolute call which
	     may be modified to become a relative call.  The PowerOpen
	     ABI does not define this relocation type.  */
	case R_RBA:
	  /* Absolute branch which may be modified to become a
	     relative branch.  */
	case R_RBAC:
	  /* The PowerPC ABI defines this as an absolute branch to a
	     fixed address which may be modified to an absolute branch
	     to a symbol.  The PowerOpen ABI does not define this
	     relocation type.  */
	case R_RBRC:
	  /* The PowerPC ABI defines this as an absolute branch to a
	     fixed address which may be modified to a relative branch.
	     The PowerOpen ABI does not define this relocation type.  */
	  howto.src_mask &= ~3;
	  howto.dst_mask = howto.src_mask;
	  break;
	case R_BR:
	  /* Relative branch.  We don't want to mess with the lower
	     two bits of the instruction.  */
	case R_CREL:
	  /* The PowerPC ABI defines this as a relative call which may
	     be modified to become an absolute call.  The PowerOpen
	     ABI does not define this relocation type.  */
	case R_RBR:
	  /* A relative branch which may be modified to become an
	     absolute branch.  FIXME: We don't implement this,
	     although we should for symbols of storage mapping class
	     XMC_XO.  */
	  howto.pc_relative = true;
	  howto.src_mask &= ~3;
	  howto.dst_mask = howto.src_mask;
	  howto.size = 2;
	  howto.complain_on_overflow = complain_overflow_bitfield;
	  break;
	case R_RL:
	  /* The PowerPC AIX ABI describes this as a load which may be
	     changed to a load address.  The PowerOpen ABI says this
	     is the same as case R_POS.  */
	  break;
	case R_RLA:
	  /* The PowerPC AIX ABI describes this as a load address
	     which may be changed to a load.  The PowerOpen ABI says
	     this is the same as R_POS.  */
	  break;
d1109 41
a1149 28

      /* If we see an R_BR or R_RBR reloc which is jumping to global
	 linkage code, and it is followed by an appropriate cror nop
	 instruction, we replace the cror with ld r2,40(r1).  This
	 restores the TOC after the glink code.  Contrariwise, if the
	 call is followed by a ld r2,40(r1), but the call is not
	 going to global linkage code, we can replace the load with a
	 cror.  */
      if ((rel->r_type == R_BR || rel->r_type == R_RBR)
	  && h != NULL
	  && h->root.type == bfd_link_hash_defined
	  && (rel->r_vaddr - input_section->vma + 8
	      <= input_section->_cooked_size))
	{
	  bfd_byte *pnext;
	  unsigned long next;

	  pnext = contents + (rel->r_vaddr - input_section->vma) + 4;
	  next = bfd_get_32 (input_bfd, pnext);


	  /* The _ptrgl function is magic.  It is used by the AIX
	   * compiler to call a function through a pointer.
	   *
	   * special case XMC_GL, global linkage
	   */
	  if (h->smclas == XMC_GL
	      || strcmp (h->root.root.string, "._ptrgl") == 0)
d1151 3
a1153 7
	      if (next == 0x4def7b82 /* cror 15,15,15 */
		  || next == 0x4ffffb82 /* cror 31,31,31 */
		  || next == 0x60000000 /* ori r0,r0,0 */)
		bfd_put_32 (input_bfd, (bfd_vma) 0xe8410028 /* ld r2,40(r1) */,
			    pnext);
	    }
	  else
a1154 30
	      if (next == 0xe8410028 /* ld r2,40(r1) */)
		bfd_put_32 (input_bfd, (bfd_vma) 0x60000000 /* ori r0,r0,0 */,
			    pnext);
	    }
	}

      /* A PC relative reloc includes the section address.  */
      if (howto.pc_relative)
	addend += input_section->vma;

      rstat = _bfd_final_link_relocate (&howto, input_bfd, input_section,
					contents,
					rel->r_vaddr - input_section->vma,
					val, addend);

      switch (rstat)
	{
	default:
	  abort ();
	case bfd_reloc_ok:
	  break;
	case bfd_reloc_overflow:
	  {
	    const char *name;
	    char buf[SYMNMLEN + 1];
	    char howto_name[10];

	    if (symndx == -1)
	      name = "*ABS*";
	    else if (h != NULL)
d1156 28
a1183 14
	    else
	      {
		name = _bfd_coff_internal_syment_name (input_bfd, sym, buf);
		if (name == NULL)
		  return false;
	      }
	    sprintf (howto_name, "0x%02x", rel->r_type);

	    if (! ((*info->callbacks->reloc_overflow)
		   (info, name, howto_name, (bfd_vma) 0, input_bfd,
		    input_section, rel->r_vaddr - input_section->vma)))
	      return false;
	  }
	}
a1184 1

@


1.23
log
@2002-04-04  Daniel Jacobowitz  <drow@@mvista.com>

	* aout-adobe.c (aout_32_bfd_link_hash_table_free): Define.
	* aout-target.h (MY_bfd_link_hash_table_free): Conditionally
	define.
	* aout-tic30.c (MY_bfd_link_hash_table_free): Likewise.
	* bfd.c (bfd_link_hash_table_free): Define.
	* binary.c (binary_bfd_link_hash_table_free): Define.
	* bout.c (b_out_bfd_link_hash_table_free): Define.
	* coff-rs6000.c (rs6000coff_vec): Include
	_bfd_generic_link_hash_table_free.
	(pmac_xcoff_vec): Likewise.
	* coff64-rs6000.c (rs6000coff64_vec): Likewise.
	(aix5coff64_vec): Likewise.
	* coffcode.h (coff_bfd_link_hash_table_free): Conditionally define.
	* elf-m10300.c (elf32_mn10300_link_hash_table_free): New function.
	(bfd_elf32_bfd_link_hash_table_free): Define.
	* elf32-hppa.c (elf32_hppa_link_hash_table_free): New function.
	(bfd_elf32_bfd_link_hash_table_free): Define.
	* elfxx-target.h (bfd_elfNN_bfd_link_hash_table_free): Conditionally
	define.
	* i386msdos.c (msdos_bfd_link_hash_table_free): Define.
	* i386os9k.c (os9k_bfd_link_hash_table_free): Define.
	* ieee.c (ieee_bfd_link_hash_table_free): Define.
	* ihex.c (ihex_bfd_link_hash_table_free): Define.
	* libbfd-in.h (_bfd_nolink_bfd_link_hash_table_free): Define.
	(_bfd_generic_link_hash_table_free): Add prototype.
	* libcoff-in.h (_bfd_xcoff_bfd_link_hash_table_free): Add prototype.
	* libecoff.h (_bfd_ecoff_bfd_link_hash_table_free): Define.
	* linker.c (_bfd_generic_link_hash_table_free): New function.
	* mmo.c (mmo_bfd_link_hash_table_free): Define.
	* nlm-target.h (nlm_bfd_link_hash_table_free): Define.
	* oasys.c (oasys_bfd_link_hash_table_free): Define.
	* ppcboot.c (ppcboot_bfd_link_hash_table_free): Define.
	* som.c (som_bfd_link_hash_table_free): Define.
	* srec.c (srec_bfd_link_hash_table_free): Define.
	* tekhex.c (tekhex_bfd_link_hash_table_free): Define.
	* versados.c (versados_bfd_link_hash_table_free): Define.
	* vms.c (vms_bfd_link_hash_table_free): New function.
	* xcofflink.c (_bfd_xcoff_bfd_link_hash_table_free): New function.

	* coff-arm.c (coff_arm_link_hash_table_create): Use bfd_malloc
	instead of bfd_alloc.
	* coff-h8300.c (h8300_coff_link_hash_table_create): Likewise.
	* coff-mcore.c (coff_mcore_link_hash_table_create): Likewise.
	* coff-ppc.c (ppc_coff_link_hash_table_create): Likewise.
	* cofflink.c (_bfd_coff_link_hash_table_create): Likewise.
	* ecoff.c (_bfd_ecoff_bfd_link_hash_table_create): Likewise.
	* elf-m10300.c (elf32_mn10300_link_hash_table_create): Likewise.
	* elf.c (_bfd_elf_link_hash_table_create): Likewise.
	* elf32-arm.h (elf32_arm_link_hash_table_create): Likewise.
	* elf32-cris.c (elf_cris_link_hash_table_create): Likewise.
	* elf32-hppa.c (elf32_hppa_link_hash_table_create): Likewise.
	* elf32-i386.c (elf_i386_link_hash_table_create): Likewise.
	* elf32-m68k.c (elf_m68k_link_hash_table_create): Likewise.
	* elf32-s390.c (elf_s390_link_hash_table_create): Likewise.
	* elf32-sh.c (sh_elf_link_hash_table_create): Likewise.
	* elf64-alpha.c (elf64_alpha_bfd_link_hash_table_create): Likewise.
	* elf64-ppc.c (ppc64_elf_link_hash_table_create): Likewise.
	* elf64-s390.c (elf_s390_link_hash_table_create): Likewise.
	* elf64-sh64.c (sh64_elf64_link_hash_table_create): Likewise.
	* elf64-sparc.c (sparc64_elf_bfd_link_hash_table_create): Likewise.
	* elf64-x86-64.c (elf64_x86_64_link_hash_table_create): Likewise.
	* elfxx-mips.c (_bfd_mips_elf_link_hash_table_create): Likewise.
	* linker.c (_bfd_generic_link_hash_table_create): Likewise.
	* m68klinux.c (linux_link_hash_table_create): Likewise.
	* sparclinux.c (linux_link_hash_table_create): Likewise.
	* sunos.c (sunos_link_hash_table_create): Likewise.
	* xcofflink.c (_bfd_xcoff_bfd_link_hash_table_create): Likewise.

	* targets.c: Add _bfd_link_hash_table_free to xvec.

	* bfd-in2.h: Regenerate.
	* libbfd.h: Regenerate.
	* libcoff.h: Regenerate.
@
text
@d296 1
a296 1
      if (ext->x_file.x_n.x_zeroes == 0)
@


1.22
log
@	* coff64-rs6000.c (_bfd_xcoff64_put_symbol_name): Prototype.
	Whitespace changes.
	* archive.c: Update copyright date.
	* bfd-in2.h: Regenerate.
	* libbfd.h: Regenerate.
	* Makefile.am: Run "make dep-am"
	* Makefile.in: Regenerate.
	* po/SRC-POTFILES.in: Regenerate.
@
text
@d2715 1
d2967 1
@


1.21
log
@Fix extracting from AIX big archives.
@
text
@d87 3
d135 2
a136 2
	 struct internal_reloc *, struct internal_syment *,
	 asection **));
d149 1
a149 1
static boolean xcoff64_generate_rtinit 
d178 1
a178 1
extern boolean rs6000coff_core_file_matches_executable_p 
d1028 2
a1029 2
         merely used to prevent garbage collection from occurring for
         the csect including the symbol which it references.  */
d1282 6
a1287 6
         linkage code, and it is followed by an appropriate cror nop
         instruction, we replace the cror with ld r2,40(r1).  This
         restores the TOC after the glink code.  Contrariwise, if the
         call is followed by a ld r2,40(r1), but the call is not
         going to global linkage code, we can replace the load with a
         cror.  */
d1436 1
a1436 1
  /* I don't really know what this is.	*/
d1549 1
a1549 1
  /* Non-relocating reference.	*/
d1642 1
a1642 1
  /* Modifiable call relative.	*/
d1732 13
a1744 13
  HOWTO (R_BA,	                /* type */
	 0,	                /* rightshift */
	 2,	                /* size (0 = byte, 1 = short, 2 = long) */
	 16,	                /* bitsize */
	 false,	                /* pc_relative */
	 0,	                /* bitpos */
	 complain_overflow_bitfield, /* complain_on_overflow */
	 0,		        /* special_function */
	 "R_BA",                /* name */
	 true,	                /* partial_inplace */
	 0xfffc,	        /* src_mask */
	 0xfffc,        	/* dst_mask */
	 false),                /* pcrel_offset */
d2132 1
a2132 1
static boolean 
d2156 1
a2156 1
  
d2162 1
a2162 1
  
d2173 1
a2173 1
  filehdr.f_nscns = 3; 
d2216 1
a2216 1
  bss_scnhdr.s_relptr = 0;  
d2222 1
a2222 1
  /* .data 
d2227 1
a2227 1
     0x0010           0x00000010 : size of descriptor 
d2235 2
a2236 2
     0x0030           0x00000000 : 
     0x0034           0x00000000 : 
d2243 2
a2244 2
     0x0050           0x00000000 : 
     0x0054           0x00000000 : 
d2254 1
a2254 1
  
d2257 1
a2257 1
  if (initsz) 
d2266 1
a2266 1
  if (finisz) 
d2294 2
a2295 2
  
  /* symbols 
d2298 2
a2299 2
     4. init function 
     6. fini function 
d2318 1
a2318 1
  bfd_coff_swap_sym_out (abfd, &syment, 
d2320 2
a2321 2
  bfd_coff_swap_aux_out (abfd, &auxent, syment.n_type, syment.n_sclass, 0, 
			 syment.n_numaux, 
d2331 1
a2331 1
  
d2337 1
a2337 1
  bfd_coff_swap_sym_out (abfd, &syment, 
d2339 2
a2340 2
  bfd_coff_swap_aux_out (abfd, &auxent, syment.n_type, syment.n_sclass, 0, 
			 syment.n_numaux, 
d2345 1
a2345 1
  if (initsz) 
d2356 1
a2356 1
      bfd_coff_swap_sym_out (abfd, &syment, 
d2358 2
a2359 2
      bfd_coff_swap_aux_out (abfd, &auxent, syment.n_type, syment.n_sclass, 0, 
			     syment.n_numaux, 
d2374 1
a2374 1
  if (finisz) 
d2385 1
a2385 1
      bfd_coff_swap_sym_out (abfd, &syment, 
d2387 2
a2388 2
      bfd_coff_swap_aux_out (abfd, &auxent, syment.n_type, syment.n_sclass, 0, 
			     syment.n_numaux, 
d2397 1
a2397 1
      bfd_coff_swap_reloc_out (abfd, &reloc, 
d2415 1
a2415 1
      bfd_coff_swap_sym_out (abfd, &syment, 
d2417 2
a2418 2
      bfd_coff_swap_aux_out (abfd, &auxent, syment.n_type, syment.n_sclass, 0, 
			     syment.n_numaux, 
d2427 1
a2427 1
      bfd_coff_swap_reloc_out (abfd, &reloc, 
d2475 10
a2484 10
  0xe9820000,   /* ld r12,0(r2) */
  0xf8410028,   /* std r2,40(r1) */
  0xe80c0000,   /* ld r0,0(r12) */
  0xe84c0008,   /* ld r0,8(r12) */
  0x7c0903a6,   /* mtctr r0 */
  0x4e800420,   /* bctr */
  0x00000000,   /* start of traceback table */
  0x000ca000,   /* traceback table */
  0x00000000,   /* traceback table */
  0x00000018,   /* ??? */
d2490 39
a2528 39
    _bfd_xcoff64_swap_aux_in,         /* _bfd_coff_swap_aux_in */
    _bfd_xcoff64_swap_sym_in,         /* _bfd_coff_swap_sym_in */
    _bfd_xcoff64_swap_lineno_in,      /* _bfd_coff_swap_lineno_in */
    _bfd_xcoff64_swap_aux_out,        /* _bfd_swap_aux_out */
    _bfd_xcoff64_swap_sym_out,        /* _bfd_swap_sym_out */
    _bfd_xcoff64_swap_lineno_out,     /* _bfd_swap_lineno_out */
    coff_swap_reloc_out,              /* _bfd_swap_reloc_out */
    coff_swap_filehdr_out,            /* _bfd_swap_filehdr_out */
    coff_swap_aouthdr_out,            /* _bfd_swap_aouthdr_out */
    coff_swap_scnhdr_out,             /* _bfd_swap_scnhdr_out */
    FILHSZ,                           /* _bfd_filhsz */
    AOUTSZ,                           /* _bfd_aoutsz */
    SCNHSZ,                           /* _bfd_scnhsz */
    SYMESZ,                           /* _bfd_symesz */
    AUXESZ,                           /* _bfd_auxesz */
    RELSZ,                            /* _bfd_relsz */
    LINESZ,                           /* _bfd_linesz */
    FILNMLEN,                         /* _bfd_filnmlen */
    true,                             /* _bfd_coff_long_filenames */
    false,                            /* _bfd_coff_long_section_names */
    (3),                              /* _bfd_coff_default_section_alignment_power */
    true,                             /* _bfd_coff_force_symnames_in_strings */
    4,                                /* _bfd_coff_debug_string_prefix_length */
    coff_swap_filehdr_in,             /* _bfd_coff_swap_filehdr_in */
    coff_swap_aouthdr_in,             /* _bfd_swap_aouthdr_in */
    coff_swap_scnhdr_in,              /* _bfd_swap_scnhdr_in */
    coff_swap_reloc_in,               /* _bfd_reloc_in */
    xcoff64_bad_format_hook,          /* _bfd_bad_format_hook */
    coff_set_arch_mach_hook,          /* _bfd_set_arch_mach_hook */
    coff_mkobject_hook,               /* _bfd_mkobject_hook */
    styp_to_sec_flags,                /* _bfd_syp_to_sec_flags */
    coff_set_alignment_hook,          /* _bfd_set_alignment_hook */
    coff_slurp_symbol_table,          /* _bfd_coff_slurp_symbol_table */
    symname_in_debug_hook,            /* _coff_symname_in_debug_hook */
    coff_pointerize_aux_hook,         /* _bfd_coff_pointerize_aux_hook */
    coff_print_aux,                   /* bfd_coff_print_aux */
    dummy_reloc16_extra_cases,        /* _bfd_coff_reloc16_extra_cases */
    dummy_reloc16_estimate,           /* _bfd_coff_reloc16_estimate */
    NULL,                             /* bfd_coff_sym_is_global */
d2531 7
a2537 7
    NULL ,                            /* _bfd_coff_start_final_link */
    xcoff64_ppc_relocate_section,     /* _bfd_coff_relocate_section */
    coff_rtype_to_howto,              /* _bfd_coff_rtype_to_howto */
    NULL ,                            /* _bfd_coff_addust_symndx */
    _bfd_generic_link_add_one_symbol, /* _bfd_coff_add_one_symbol */
    coff_link_output_has_begun,       /* _bfd_coff_link_output_has_begun */
    coff_final_link_postscript        /* _bfd_coff_final_link_postscript */
d2540 3
a2542 3
  0x01EF,                             /* magic number */
  bfd_arch_powerpc,                   /* architecture */
  bfd_mach_ppc_620,                   /* machine */
d2545 6
a2550 6
  xcoff64_swap_ldhdr_in,                /* _xcoff_swap_ldhdr_in */
  xcoff64_swap_ldhdr_out,               /* _xcoff_swap_ldhdr_out */
  xcoff64_swap_ldsym_in,                /* _xcoff_swap_ldsym_in */
  xcoff64_swap_ldsym_out,               /* _xcoff_swap_ldsym_out */
  xcoff64_swap_ldrel_in,                /* _xcoff_swap_ldrel_in */
  xcoff64_swap_ldrel_out,               /* _xcoff_swap_ldrel_out */
d2553 5
a2557 5
  LDHDRSZ,                              /* _xcoff_ldhdrsz */
  LDSYMSZ,                              /* _xcoff_ldsymsz */
  LDRELSZ,                              /* _xcoff_ldrelsz */
  24,                                   /* _xcoff_function_descriptor_size */
  0,                                    /* _xcoff_small_aout_header_size */
d2560 1
a2560 1
  2,                                    /* _xcoff_ldhdr_version */
d2563 2
a2564 2
  _bfd_xcoff64_put_symbol_name,          /* _xcoff_put_symbol_name */
  _bfd_xcoff64_put_ldsymbol_name,        /* _xcoff_put_ldsymbol_name */
d2580 1
a2580 1
  40,           /* _xcoff_glink_size */
d2583 2
a2584 2
  88,           /* _xcoff_rtinit_size */
  xcoff64_generate_rtinit,  /* _xcoff_generate_rtinit */
d2605 9
a2613 9
  bfd_getb64,         /* bfd_getx64 */
  bfd_getb_signed_64, /* bfd_getx_signed_64 */
  bfd_putb64,         /* bfd_putx64 */
  bfd_getb32,         /* bfd_getx32 */
  bfd_getb_signed_32, /* bfd_getx_signed_32 */
  bfd_putb32,         /* bfd_putx32 */
  bfd_getb16,         /* bfd_getx16 */
  bfd_getb_signed_16, /* bfd_getx_signed_16 */
  bfd_putb16,         /* bfd_putx16 */
d2616 9
a2624 9
  bfd_getb64,         /* bfd_h_getx64 */
  bfd_getb_signed_64, /* bfd_h_getx_signed_64 */
  bfd_putb64,         /* bfd_h_putx64 */
  bfd_getb32,         /* bfd_h_getx32 */
  bfd_getb_signed_32, /* bfd_h_getx_signed_32 */
  bfd_putb32,         /* bfd_h_putx32 */
  bfd_getb16,         /* bfd_h_getx16 */
  bfd_getb_signed_16, /* bfd_h_getx_signed_16 */
  bfd_putb16,         /* bfd_h_putx16 */
d2648 4
a2651 4
  bfd_true,                          /* _close_and_cleanup */
  bfd_true,                          /* _bfd_free_cached_info */
  coff_new_section_hook,             /* _new_section_hook */
  _bfd_generic_get_section_contents, /* _bfd_get_section_contents */
d2656 1
a2656 1
  _bfd_xcoff_copy_private_bfd_data, /* _bfd_copy_private_bfd */
d2667 3
a2669 4
  coff_core_file_failing_command,    /* _core_file_failing_command */
  coff_core_file_failing_signal,     /* _core_file_failing_signal */
  /* _core_file_matches_executable_p */
  coff_core_file_matches_executable_p,
d2672 4
a2675 5
  xcoff64_slurp_armap,                  /* _slurp_armap */
  /* XCOFF archives do not have
     anything which corresponds to
     an extended name table.  */
  bfd_false,                               /* _slurp_extended_name_table */
d2678 8
a2685 9
  bfd_dont_truncate_arname,                /* _truncate_arname */
  _bfd_xcoff_write_armap,                  /* _write_armap */
  _bfd_xcoff_read_ar_hdr,                  /* _read_ar_hdr */
  xcoff64_openr_next_archived_file,        /* _openr_next_archived_file */
  _bfd_generic_get_elt_at_index,           /* _get_elt_at_index */
  _bfd_xcoff_stat_arch_elt,                /* _generic_stat_arch_elt */
  /* XCOFF archives do not have
     a timestamp.  */
  bfd_true,                                /* _update_armap_timestamp */
d2688 11
a2698 11
  coff_get_symtab_upper_bound,             /* _get_symtab_upper_bound */
  coff_get_symtab,                         /* _get_symtab */
  coff_make_empty_symbol,                  /* _make_empty_symbol */
  coff_print_symbol,                       /* _print_symbol */
  coff_get_symbol_info,                    /* _get_symbol_info */
  _bfd_xcoff_is_local_label_name,          /* _bfd_is_local_label_name */
  coff_get_lineno,                         /* _get_lineno */
  coff_find_nearest_line,                  /* _find_nearest_line */
  coff_bfd_make_debug_symbol,              /* _bfd_make_debug_symbol */
  _bfd_generic_read_minisymbols,           /* _read_minisymbols */
  _bfd_generic_minisymbol_to_symbol,       /* _minsymbol_to_symbol */
d2701 3
a2703 3
  coff_get_reloc_upper_bound,              /* _get_reloc_upper_bound */
  coff_canonicalize_reloc,           /* _cononicalize_reloc */
  xcoff64_reloc_type_lookup,               /* _bfd_reloc_type_lookup */
d2706 2
a2707 2
  coff_set_arch_mach,                      /* _set_arch_mach */
  coff_set_section_contents,               /* _set_section_contents */
d2710 1
a2710 1
  xcoff64_sizeof_headers,               /* _sizeof_headers */
d2713 7
a2719 7
  bfd_generic_relax_section,               /* _bfd_relax_section */
  _bfd_xcoff_bfd_link_hash_table_create,   /* _bfd_link_hash_table_create */
  _bfd_xcoff_bfd_link_add_symbols,         /* _bfd_link_add_symbols */
  _bfd_xcoff_bfd_final_link,               /* _bfd_filnal_link */
  _bfd_generic_link_split_section,         /* _bfd_link_split_section */
  bfd_generic_gc_sections,                 /* _bfd_gc_sections */
  bfd_generic_merge_sections,               /* _bfd_merge_sections */
d2735 4
a2738 4
extern const bfd_target * xcoff64_core_p PARAMS ((bfd *));
extern boolean            xcoff64_core_file_matches_executable_p PARAMS((bfd *, bfd *));
extern char *             xcoff64_core_file_failing_command PARAMS ((bfd *));
extern int                xcoff64_core_file_failing_signal PARAMS ((bfd *));
d2741 1
a2741 1
static const struct xcoff_backend_data_rec bfd_xcoff_aix5_backend_data = 
d2744 40
a2783 40
    _bfd_xcoff64_swap_aux_in,         /* _bfd_coff_swap_aux_in */
    _bfd_xcoff64_swap_sym_in,         /* _bfd_coff_swap_sym_in */ 
    _bfd_xcoff64_swap_lineno_in,      /* _bfd_coff_swap_lineno_in */
    _bfd_xcoff64_swap_aux_out,        /* _bfd_swap_aux_out */
    _bfd_xcoff64_swap_sym_out,        /* _bfd_swap_sym_out */
    _bfd_xcoff64_swap_lineno_out,     /* _bfd_swap_lineno_out */
    coff_swap_reloc_out,              /* _bfd_swap_reloc_out */
    coff_swap_filehdr_out,            /* _bfd_swap_filehdr_out */
    coff_swap_aouthdr_out,            /* _bfd_swap_aouthdr_out */
    coff_swap_scnhdr_out,             /* _bfd_swap_scnhdr_out */
    FILHSZ,                           /* _bfd_filhsz */
    AOUTSZ,                           /* _bfd_aoutsz */
    SCNHSZ,                           /* _bfd_scnhsz */
    SYMESZ,                           /* _bfd_symesz */
    AUXESZ,                           /* _bfd_auxesz */
    RELSZ,                            /* _bfd_relsz */
    LINESZ,                           /* _bfd_linesz */
    FILNMLEN,                         /* _bfd_filnmlen */
    true,                             /* _bfd_coff_long_filenames */
    false,                            /* _bfd_coff_long_section_names */
    (3),                              /* _bfd_coff_default_section_alignment_power */
    true,                             /* _bfd_coff_force_symnames_in_strings */
    4,                                /* _bfd_coff_debug_string_prefix_length */
    coff_swap_filehdr_in,             /* _bfd_coff_swap_filehdr_in */
    coff_swap_aouthdr_in,             /* _bfd_swap_aouthdr_in */
    coff_swap_scnhdr_in,              /* _bfd_swap_scnhdr_in */
    coff_swap_reloc_in,               /* _bfd_reloc_in */
    xcoff64_bad_format_hook,          /* _bfd_bad_format_hook */
    coff_set_arch_mach_hook,          /* _bfd_set_arch_mach_hook */
    coff_mkobject_hook,               /* _bfd_mkobject_hook */
    styp_to_sec_flags,                /* _bfd_syp_to_sec_flags */
    coff_set_alignment_hook,          /* _bfd_set_alignment_hook */
    coff_slurp_symbol_table,          /* _bfd_coff_slurp_symbol_table */
    symname_in_debug_hook,            /* _coff_symname_in_debug_hook */
    coff_pointerize_aux_hook,         /* _bfd_coff_pointerize_aux_hook */
    coff_print_aux,                   /* bfd_coff_print_aux */
    dummy_reloc16_extra_cases,        /* _bfd_coff_reloc16_extra_cases */
    dummy_reloc16_estimate,           /* _bfd_coff_reloc16_estimate */
    NULL,                             /* bfd_coff_sym_is_global */
                                      /* _bfd_coff_compute_section_file_positions */
d2785 7
a2791 7
    NULL ,                            /* _bfd_coff_start_final_link */
    xcoff64_ppc_relocate_section,     /* _bfd_coff_relocate_section */
    coff_rtype_to_howto,              /* _bfd_coff_rtype_to_howto */
    NULL ,                            /* _bfd_coff_addust_symndx */
    _bfd_generic_link_add_one_symbol, /* _bfd_coff_add_one_symbol */
    coff_link_output_has_begun,       /* _bfd_coff_link_output_has_begun */
    coff_final_link_postscript        /* _bfd_coff_final_link_postscript */
d2794 11
a2804 11
  U64_TOCMAGIC,                       /* magic number */
  bfd_arch_powerpc,                   /* architecture */
  bfd_mach_ppc_620,                   /* machine */

  /* Function pointers to xcoff specific swap routines.  */
  xcoff64_swap_ldhdr_in,                /* _xcoff_swap_ldhdr_in */
  xcoff64_swap_ldhdr_out,               /* _xcoff_swap_ldhdr_out */
  xcoff64_swap_ldsym_in,                /* _xcoff_swap_ldsym_in */
  xcoff64_swap_ldsym_out,               /* _xcoff_swap_ldsym_out */
  xcoff64_swap_ldrel_in,                /* _xcoff_swap_ldrel_in */
  xcoff64_swap_ldrel_out,               /* _xcoff_swap_ldrel_out */
d2807 5
a2811 5
  LDHDRSZ,                              /* _xcoff_ldhdrsz */
  LDSYMSZ,                              /* _xcoff_ldsymsz */
  LDRELSZ,                              /* _xcoff_ldrelsz */
  24,                                   /* _xcoff_function_descriptor_size */
  0,                                    /* _xcoff_small_aout_header_size */
d2813 1
a2813 1
  2,                                    /* _xcoff_ldhdr_version */
d2815 2
a2816 2
  _bfd_xcoff64_put_symbol_name,          /* _xcoff_put_symbol_name */
  _bfd_xcoff64_put_ldsymbol_name,        /* _xcoff_put_ldsymbol_name */
d2820 1
a2820 1
  xcoff64_create_csect_from_smclas,  
d2825 1
a2825 1
  
d2831 1
a2831 1
  40,           /* _xcoff_glink_size */
d2834 2
a2835 2
  88,                                    /* _xcoff_rtinit_size */
  xcoff64_generate_rtinit,               /* _xcoff_generate_rtinit */
d2855 22
a2876 22
                      /* data */
  bfd_getb64,         /* bfd_getx64 */
  bfd_getb_signed_64, /* bfd_getx_signed_64 */
  bfd_putb64,         /* bfd_putx64 */
  bfd_getb32,         /* bfd_getx32 */
  bfd_getb_signed_32, /* bfd_getx_signed_32 */
  bfd_putb32,         /* bfd_putx32 */
  bfd_getb16,         /* bfd_getx16 */
  bfd_getb_signed_16, /* bfd_getx_signed_16 */
  bfd_putb16,         /* bfd_putx16 */ 

                      /* hdrs */
  bfd_getb64,         /* bfd_h_getx64 */
  bfd_getb_signed_64, /* bfd_h_getx_signed_64 */
  bfd_putb64,         /* bfd_h_putx64 */
  bfd_getb32,         /* bfd_h_getx32 */
  bfd_getb_signed_32, /* bfd_h_getx_signed_32 */
  bfd_putb32,         /* bfd_h_putx32 */
  bfd_getb16,         /* bfd_h_getx16 */
  bfd_getb_signed_16, /* bfd_h_getx_signed_16 */
  bfd_putb16,         /* bfd_h_putx16 */
  
d2878 3
a2880 3
    _bfd_dummy_target, 
    coff_object_p, 	
    xcoff64_archive_p, 
d2883 1
a2883 1
  
d2885 1
a2885 1
    bfd_false, 
d2887 1
a2887 1
    _bfd_generic_mkarchive, 
d2890 1
a2890 1
  
d2892 1
a2892 1
    bfd_false, 
d2894 1
a2894 1
    _bfd_xcoff_write_archive_contents, 
d2897 1
a2897 1
  
d2899 6
a2904 6
  bfd_true,                          /* _close_and_cleanup */
  bfd_true,                          /* _bfd_free_cached_info */
  coff_new_section_hook,             /* _new_section_hook */
  _bfd_generic_get_section_contents, /* _bfd_get_section_contents */
                                     /* _bfd_get_section_contents_in_window */
  _bfd_generic_get_section_contents_in_window, 
d2907 2
a2908 2
  _bfd_xcoff_copy_private_bfd_data, /* _bfd_copy_private_bfd */
                                    /* _bfd_merge_private_bfd_data */ 
d2910 1
a2910 1
                                    /* _bfd_copy_pivate_section_data */
d2912 1
a2912 1
                                    /* _bfd_copy_private_symbol_data */
d2918 2
a2919 2
  xcoff64_core_file_failing_command,    /* _core_file_failing_command */
  xcoff64_core_file_failing_signal,     /* _core_file_failing_signal */
d2923 5
a2927 6
  xcoff64_slurp_armap,                  /* _slurp_armap */
                                           /* XCOFF archives do not have 
											  anything which corresponds to 
											  an extended name table.  */
  bfd_false,                               /* _slurp_extended_name_table */
                                           /* _construct_extended_name_table */
d2929 8
a2936 9
  bfd_dont_truncate_arname,                /* _truncate_arname */
  _bfd_xcoff_write_armap,                  /* _write_armap */
  _bfd_xcoff_read_ar_hdr,                  /* _read_ar_hdr */
  xcoff64_openr_next_archived_file,        /* _openr_next_archived_file */
  _bfd_generic_get_elt_at_index,           /* _get_elt_at_index */
  _bfd_xcoff_stat_arch_elt,                /* _generic_stat_arch_elt */
                                           /* XCOFF archives do not have 
					      a timestamp.  */
  bfd_true,                                /* _update_armap_timestamp */
d2939 11
a2949 11
  coff_get_symtab_upper_bound,             /* _get_symtab_upper_bound */
  coff_get_symtab,                         /* _get_symtab */
  coff_make_empty_symbol,                  /* _make_empty_symbol */
  coff_print_symbol,                       /* _print_symbol */
  coff_get_symbol_info,                    /* _get_symbol_info */
  _bfd_xcoff_is_local_label_name,          /* _bfd_is_local_label_name */
  coff_get_lineno,                         /* _get_lineno */
  coff_find_nearest_line,                  /* _find_nearest_line */
  coff_bfd_make_debug_symbol,              /* _bfd_make_debug_symbol */
  _bfd_generic_read_minisymbols,           /* _read_minisymbols */
  _bfd_generic_minisymbol_to_symbol,       /* _minsymbol_to_symbol */
d2952 3
a2954 3
  coff_get_reloc_upper_bound,              /* _get_reloc_upper_bound */
  coff_canonicalize_reloc,           /* _cononicalize_reloc */
  xcoff64_reloc_type_lookup,               /* _bfd_reloc_type_lookup */
d2957 2
a2958 2
  coff_set_arch_mach,                      /* _set_arch_mach */
  coff_set_section_contents,               /* _set_section_contents */
d2961 2
a2962 2
  xcoff64_sizeof_headers,               /* _sizeof_headers */
                                      /* _bfd_get_relocated_section_contents */
d2964 7
a2970 7
  bfd_generic_relax_section,               /* _bfd_relax_section */
  _bfd_xcoff_bfd_link_hash_table_create,   /* _bfd_link_hash_table_create */
  _bfd_xcoff_bfd_link_add_symbols,         /* _bfd_link_add_symbols */
  _bfd_xcoff_bfd_final_link,               /* _bfd_filnal_link */
  _bfd_generic_link_split_section,         /* _bfd_link_split_section */
  bfd_generic_gc_sections,                 /* _bfd_gc_sections */
  bfd_generic_merge_sections,               /* _bfd_merge_sections */
d2973 2
a2974 2
                                          /* _get_dynamic_symtab_upper_bound */
  _bfd_xcoff_get_dynamic_symtab_upper_bound,  
d2981 1
a2981 1
  
@


1.20
log
@Add AIX 64 shared library support and emulation layer for binutils
@
text
@d106 1
a106 1
extern int _bfd_xcoff_generic_stat_arch_elt PARAMS ((bfd *, struct stat *));
d2680 1
a2680 1
  xcoff64_openr_next_archived_file,     /* _openr_next_archived_file */
d2682 1
a2682 1
  _bfd_xcoff_generic_stat_arch_elt,        /* _generic_dtat_arch_elt */
d2933 1
a2933 1
  xcoff64_openr_next_archived_file,     /* _openr_next_archived_file */
d2935 1
a2935 1
  _bfd_xcoff_generic_stat_arch_elt,        /* _generic_dtat_arch_elt */
@


1.19
log
@Replace immediate howto type initializers with symbolic.
@
text
@d7 1
a7 1
This file is part of BFD, the Binary File Descriptor library.
d9 13
a21 13
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
d133 1
a133 1
	 asection **sections));
d147 2
a148 1
  PARAMS((bfd *, const char *, const char *, boolean));
d150 1
a150 1
/* coffcode.h needs these to be defined */
d457 6
a462 3
_bfd_xcoff64_put_symbol_name (bfd *abfd, struct bfd_strtab_hash *strtab,
			      struct internal_syment *sym,
			      const char *name) {
a488 1

d674 1
a674 1
  /* Work out the size of the reloc and linno areas */
d683 1
a683 1
     put them into the correct asections */
d688 1
a688 1
  /* Indicate in each section->line_filepos its actual file address */
d798 1
a798 1
  /* FIXME: this is wrong for PPC_PE! */
d811 1
a811 5

  /* This can only be called from the xcoff64 backend so the magic #
     must be for xcoff64.  */
  internal_f.f_magic = 0757;

d819 1
a819 1
  /* Now should write relocs, strings, syms */
a1363 1

a1370 1

a1799 2


d2112 17
d2166 1
a2166 1
  /* file header */
d2177 1
a2177 1
  /* section headers */
d2180 1
a2180 1
  /* text */
d2193 1
a2193 1
  /* data */
d2206 1
a2206 1
  /* bss */
d2277 1
a2277 1
  /* string table */
d2341 1
a2341 1
  /* init */
d2358 1
a2358 1
      /* reloc */
d2370 1
a2370 1
  /* finit */
d2388 1
a2388 1
      /* reloc */
d2418 1
a2418 1
      /* reloc */
d2486 1
a2486 1
  { /* COFF backend, defined in libcoff.h */
d2507 3
a2509 3
    (3),                        /* _bfd_coff_default_section_alignment_power */
    true,                            /* _bfd_coff_force_symnames_in_strings */
    4,                               /* _bfd_coff_debug_string_prefix_length */
d2514 1
a2514 1
    coff_bad_format_hook,             /* _bfd_bad_format_hook */
d2519 1
a2519 1
    coff_slurp_symbol_table,     /* _bfd_coff_slurp_symbol_table */
d2529 1
a2529 1
    xcoff64_ppc_relocate_section,  /* _bfd_coff_relocate_section */
d2541 1
a2541 1
  /* function pointers to xcoff specific swap routines */
d2549 1
a2549 1
  /* sizes */
d2555 2
a2556 1
  /* versions */
d2559 1
a2559 1
  /* xcoff vs xcoff64 putting symbol names */
d2563 1
a2563 1
  /* dynamic reloc howto */
d2568 1
a2568 1
  /* lineno and reloc count overflow */
d2575 1
a2575 1
  /* glink */
d2579 1
a2579 1
  /* rtinit */
d2584 1
a2584 1
/* The transfer vector that leads the outside world to all of the above. */
d2733 253
@


1.18
log
@XCOFF booke tests.  Fix tlbre, tlbwe ppc WS field.
@
text
@d2 1
a2 1
   Copyright 2000, 2001
d1377 1
a1377 1
  HOWTO (0,			/* type */
d1392 1
a1392 1
  HOWTO (1,			/* type */
d1407 1
a1407 1
  HOWTO (2,			/* type */
d1422 1
a1422 1
  HOWTO (3,			/* type */
d1437 1
a1437 1
  HOWTO (4,			/* type */
d1452 1
a1452 1
  HOWTO (5,			/* type */
d1467 1
a1467 1
  HOWTO (6,			/* type */
d1484 1
a1484 1
  HOWTO (8,			/* type */
d1501 1
a1501 1
  HOWTO (0xa,			/* type */
d1518 1
a1518 1
  HOWTO (0xc,			/* type */
d1533 1
a1533 1
  HOWTO (0xd,			/* type */
d1550 1
a1550 1
  HOWTO (0xf,			/* type */
d1568 1
a1568 1
  HOWTO (0x12,			/* type */
d1583 1
a1583 1
  HOWTO (0x13,			/* type */
d1598 1
a1598 1
  HOWTO (0x14,			/* type */
d1613 1
a1613 1
  HOWTO (0x15,			/* type */
d1628 1
a1628 1
  HOWTO (0x16,			/* type */
d1643 1
a1643 1
  HOWTO (0x17,			/* type */
d1658 1
a1658 1
  HOWTO (0x18,			/* type */
d1673 1
a1673 1
  HOWTO (0x19,			/* type */
d1688 1
a1688 1
  HOWTO (0x1a,			/* type */
d1703 1
a1703 1
  HOWTO (0x1b,			/* type */
d1717 1
a1717 1
  HOWTO (0x1c,			/* type */
d1732 1
a1732 1
  HOWTO (0x1d,	                /* type */
@


1.17
log
@Add support for -brtl, run time linking, to AIX ld.
@
text
@d1717 1
a1717 1
  HOWTO (0,			/* type */
d1729 16
a1744 1
	 false)			/* pcrel_offset */
d1787 2
@


1.16
log
@Fix for xcoff <bigaf> big archive format support.
@
text
@d147 1
a147 2
  PARAMS((bfd *, const char *, const char *));

d173 3
a175 2
extern const bfd_target * rs6000coff_core_p ();
extern boolean rs6000coff_core_file_matches_executable_p ();
d2101 1
a2101 1
xcoff64_generate_rtinit  (abfd, init, fini)
d2105 1
d2108 3
a2110 3
  bfd_byte scnhdr_ext[SCNHSZ];
  bfd_byte syment_ext[SYMESZ * 8];
  bfd_byte reloc_ext[RELSZ * 2];
d2118 3
a2120 1
  struct internal_scnhdr scnhdr;
d2125 1
d2127 1
d2129 1
d2131 1
a2131 2
  if (! bfd_xcoff_rtinit_size (abfd) 
      || (init == NULL && fini == NULL))
d2141 1
a2141 1
  filehdr.f_nscns = 1; 
d2148 41
a2188 13
  /* section header */
  memset (scnhdr_ext, 0, SCNHSZ);
  memset (&scnhdr, 0, sizeof (struct internal_scnhdr));
  memcpy (scnhdr.s_name, data_name, strlen (data_name));
  scnhdr.s_paddr = 0;
  scnhdr.s_vaddr = 0;
  scnhdr.s_size = 0;    /* set below */
  scnhdr.s_scnptr = FILHSZ + SCNHSZ;
  scnhdr.s_relptr = 0;  /* set below */
  scnhdr.s_lnnoptr = 0;
  scnhdr.s_nreloc = 0;  /* either 1 or 2 */
  scnhdr.s_nlnno = 0;
  scnhdr.s_flags = STYP_DATA;
d2245 2
a2246 1
  scnhdr.s_size = data_buffer_size;
d2254 2
d2267 4
a2270 3
     6. fini function */
  memset (syment_ext, 0, 8 * SYMESZ);
  memset (reloc_ext, 0, 2 * RELSZ);
d2280 1
a2280 1
  syment.n_scnum = 1;
d2300 1
a2300 1
  syment.n_scnum = 1;
d2338 1
a2338 1
      scnhdr.s_nreloc += 1;
d2366 31
a2396 1
			       &reloc_ext[scnhdr.s_nreloc * RELSZ]);
d2399 3
a2401 1
      scnhdr.s_nreloc += 1;
d2404 2
a2405 2
  scnhdr.s_relptr = scnhdr.s_scnptr + data_buffer_size;
  filehdr.f_symptr = scnhdr.s_relptr + scnhdr.s_nreloc * RELSZ;
d2409 4
a2412 2
  bfd_coff_swap_scnhdr_out (abfd, &scnhdr, scnhdr_ext);
  bfd_bwrite (scnhdr_ext, SCNHSZ, abfd);
d2414 1
a2414 1
  bfd_bwrite (reloc_ext, scnhdr.s_nreloc * RELSZ, abfd);
a2551 1

@


1.16.2.1
log
@Fix extracting from AIX big archives.
@
text
@d106 1
a106 1
extern int _bfd_xcoff_stat_arch_elt PARAMS ((bfd *, struct stat *));
d2580 1
a2580 1
  xcoff64_openr_next_archived_file,        /* _openr_next_archived_file */
d2582 1
a2582 1
  _bfd_xcoff_stat_arch_elt,                /* _generic_stat_arch_elt */
@


1.15
log
@-binitfini emulation, put __rtinit symbol generation into linker.
@
text
@d146 3
d2185 1
d2187 3
d2346 3
@


1.14
log
@	* aout-encap.c: Fix comment typos.
	* aoutx.h: Likewise.
	* archive.c: Likewise.
	* bout.c: Likewise.
	* coff64-rs6000.c: Likewise.
	* coffcode.h: Likewise.
	* coffgen.c: Likewise.
	* cofflink.c: Likewise.
	* coff-mips.c: Likewise.
	* ecoff.c: Likewise.
	* elf32-m32r.c: Likewise.
	* libcoff-in.h: Likewise.
	* libecoff.h: Likewise.
	* libxcoff.h: Likewise.
	* nlm32-i386.c: Likewise.
	* pdp11.c: Likewise.
	* section.c: Likewise.
	* som.c: Likewise.
	* som.h: Likewise.
	* bfd-in2.h: Regenerate.
	* libcoff.h: Likewise.
@
text
@d2097 246
d2467 4
@


1.13
log
@	* bfd.c (bfd_archive_filename): New function.
	* bfd-in2.h: Regenerate.
	* aout-adobe.c: Replace bfd_get_filename with bfd_archive_filename
	in error messages where the bfd is an input bfd.
	* aout-cris.c: Likewise.
	* coff-arm.c: Likewise.
	* coff-mcore.c: Likewise.
	* coff-ppc.c: Likewise.
	* coff-rs6000.c: Likewise.
	* coff-sh.c: Likewise.
	* coff-tic54x.c: Likewise.
	* coff-tic80.c: Likewise.
	* coff64-rs6000.c: Likewise.
	* coffcode.h: Likewise.
	* coffgen.c: Likewise.
	* cofflink.c: Likewise.
	* ecofflink.c: Likewise.
	* elf-hppa.h: Likewise.
	* elf.c: Likewise.
	* elf32-arm.h: Likewise.
	* elf32-cris.c: Likewise.
	* elf32-gen.c: Likewise.
	* elf32-hppa.c: Likewise.
	* elf32-i370.c: Likewise.
	* elf32-i386.c: Likewise.
	* elf32-m32r.c: Likewise.
	* elf32-mcore.c: Likewise.
	* elf32-mips.c: Likewise.
	* elf32-ppc.c: Likewise.
	* elf32-s390.c: Likewise.
	* elf32-sh.c: Likewise.
	* elf32-sparc.c: Likewise.
	* elf32-v850.c: Likewise.
	* elf64-alpha.c: Likewise.
	* elf64-gen.c: Likewise.
	* elf64-ppc.c: Likewise.
	* elf64-s390.c: Likewise.
	* elf64-sparc.c: Likewise.
	* elf64-x86-64.c: Likewise.
	* elflink.h: Likewise.
	* elfxx-ia64.c: Likewise.
	* ieee.c: Likewise.
	* ihex.c: Likewise.
	* libbfd.c: Likewise.
	* pdp11.c: Likewise.
	* pe-mips.c: Likewise.
	* peicode.h: Likewise.
	* srec.c: Likewise.
	* xcofflink.c: Likewise.

	* elf32-arm.h: Make _bfd_error_handler calls K&R compatible.

	* elflink.c (_bfd_elf_create_linker_section): Better grammar for
	error message.

	* coff-mcore.c (coff_mcore_relocate_section): Internalionalise
	error message.

	* elf64-sparc.c (sparc64_elf_add_symbol_hook): Constify stt_types.
	Consolidate error messages, and split long messages to two lines.
@
text
@d2015 1
a2015 1
  /* Don't think the small aout header can be used since some of the the
@


1.12
log
@Touches most files in bfd/, so likely will be blamed for everything..

o  bfd_read and bfd_write lose an unnecessary param and become
   bfd_bread and bfd_bwrite.

o  bfd_*alloc now all take a bfd_size_type arg, and will error if
   size_t is too small.  eg. 32 bit host, 64 bit bfd, verrry big files
   or bugs in linker scripts etc.

o  file_ptr becomes a bfd_signed_vma.  Besides matching sizes with
   various other types involved in handling sections, this should make
   it easier for bfd to support a 64 bit off_t on 32 bit hosts that
   provide it.

o  I've made the H_GET_* and H_PUT_* macros (which invoke bfd_h_{get,put}_*)
   generally available.  They now cast their args to bfd_vma and
   bfd_byte * as appropriate, which removes a swag of casts from the
   source.

o  Bug fixes to bfd_get8, aix386_core_vec, elf32_h8_relax_section, and
   aout-encap.c.

o  Zillions of formatting and -Wconversion fixes.
@
text
@d1162 1
a1162 1
	     bfd_get_filename (input_bfd), (unsigned int) rel->r_type);
d1208 1
a1208 1
		     bfd_get_filename (input_bfd), rel->r_vaddr,
d2058 1
a2058 1
	 bfd_get_filename (abfd), symbol_name, aux->x_csect.x_smclas);
@


1.11
log
@	* libxcoff.h (struct xcoff_backend_data_rec): Constify src param
	of _xcoff_swap_ld*.
	* coff-rs6000.c (xcoff_swap_ldhdr_in): Modify type of external
	param to agree with libxcoff.h.
	(xcoff_swap_ldhdr_out): Likewise.
	(xcoff_swap_ldsym_in): Likewise.
	(xcoff_swap_ldsym_out): Likewise.
	(xcoff_swap_ldrel_in): Likewise.
	(xcoff_swap_ldrel_out): Likewise.
	(xcoff_create_csect_from_smclas): Likewise.
	* coff64-rs6000.c: Add missing prototypes.
	(xcoff64_swap_ldhdr_in): Modify type of external param to agree
	with libxcoff.h.
	(xcoff64_swap_ldhdr_out): Likewise.
	(xcoff64_swap_ldsym_in): Likewise.
	(xcoff64_swap_ldsym_out): Likewise.
	(xcoff64_swap_ldrel_in): Likewise.
	(xcoff64_swap_ldrel_out): Likewise.
	(xcoff64_ppc_relocate_section): Make static.
	(xcoff64_slurp_armap): Likewise.
	(xcoff64_archive_p): Likewise.
	(xcoff64_openr_next_archived_file): Likewise.
	(xcoff64_sizeof_headers): Likewise.
	(xcoff64_is_lineno_count_overflow): Likewise.
	(xcoff64_is_reloc_count_overflow): Likewise.
	(xcoff64_loader_symbol_offset): Likewise.
	(xcoff64_loader_reloc_offset): Likewise.
	* elf64-gen.c: Add missing prototypes.
@
text
@d30 1
a30 1
#include "libcoff.h" 
d33 27
a59 27
#define GET_FILEHDR_SYMPTR bfd_h_get_64
#define PUT_FILEHDR_SYMPTR bfd_h_put_64
#define GET_AOUTHDR_DATA_START bfd_h_get_64
#define PUT_AOUTHDR_DATA_START bfd_h_put_64
#define GET_AOUTHDR_TEXT_START bfd_h_get_64
#define PUT_AOUTHDR_TEXT_START bfd_h_put_64
#define GET_AOUTHDR_TSIZE bfd_h_get_64
#define PUT_AOUTHDR_TSIZE bfd_h_put_64
#define GET_AOUTHDR_DSIZE bfd_h_get_64
#define PUT_AOUTHDR_DSIZE bfd_h_put_64
#define GET_AOUTHDR_BSIZE bfd_h_get_64
#define PUT_AOUTHDR_BSIZE bfd_h_put_64
#define GET_AOUTHDR_ENTRY bfd_h_get_64
#define PUT_AOUTHDR_ENTRY bfd_h_put_64
#define GET_SCNHDR_PADDR bfd_h_get_64
#define PUT_SCNHDR_PADDR bfd_h_put_64
#define GET_SCNHDR_VADDR bfd_h_get_64
#define PUT_SCNHDR_VADDR bfd_h_put_64
#define GET_SCNHDR_SIZE bfd_h_get_64
#define PUT_SCNHDR_SIZE bfd_h_put_64
#define GET_SCNHDR_SCNPTR bfd_h_get_64
#define PUT_SCNHDR_SCNPTR bfd_h_put_64
#define GET_SCNHDR_RELPTR bfd_h_get_64
#define PUT_SCNHDR_RELPTR bfd_h_put_64
#define GET_SCNHDR_LNNOPTR bfd_h_get_64
#define PUT_SCNHDR_LNNOPTR bfd_h_put_64
#define GET_SCNHDR_NRELOC bfd_h_get_32
d61 2
a62 2
#define PUT_SCNHDR_NRELOC bfd_h_put_32
#define GET_SCNHDR_NLNNO bfd_h_get_32
d64 3
a66 3
#define PUT_SCNHDR_NLNNO bfd_h_put_32
#define GET_RELOC_VADDR bfd_h_get_64
#define PUT_RELOC_VADDR bfd_h_put_64
d72 7
a78 9
#define COFF_ADJUST_SCNHDR_OUT_POST(ABFD,INT,EXT) \
do { \
  memset (((SCNHDR *)EXT)->s_pad, 0, sizeof (((SCNHDR *)EXT)->s_pad));\
} while(0)

/* In case we're on a 32-bit machine, construct a 64-bit "-1" value
   from smaller values.  Start with zero, widen, *then* decrement.  */
#define MINUS_ONE       (((bfd_vma)0) - 1)

a84 8
#define PUTWORD bfd_h_put_32
#define PUTHALF bfd_h_put_16
#define PUTBYTE bfd_h_put_8
#define GETWORD bfd_h_get_32
#define GETHALF bfd_h_get_16
#define GETBYTE bfd_h_get_8


d90 71
d162 38
a199 1
/* For XCOFF64, the effective width of symndx changes depending on 
d203 1
a203 1
     bfd            *abfd;
d207 2
a208 2
  LINENO *ext = (LINENO *)ext1;
  struct internal_lineno      *in = (struct internal_lineno *)in1;
d210 1
a210 1
  in->l_lnno = bfd_h_get_32(abfd, (bfd_byte *) (ext->l_lnno));
d212 1
a212 2
    in->l_addr.l_symndx = 
	    bfd_h_get_32(abfd, (bfd_byte *) ext->l_addr.l_symndx);
d214 1
a214 2
    in->l_addr.l_paddr = 
	    bfd_h_get_64(abfd, (bfd_byte *) ext->l_addr.l_paddr);
d219 9
a227 8
     bfd       *abfd;
     PTR	inp;
     PTR	outp;
{
  struct internal_lineno *in = (struct internal_lineno *)inp;
  struct external_lineno *ext = (struct external_lineno *)outp;
  PUTWORD(abfd, in->l_addr.l_symndx, (bfd_byte *)
	  ext->l_addr.l_symndx);
a228 1
  bfd_h_put_32 (abfd, in->l_lnno,  (bfd_byte *) (ext->l_lnno));
d230 1
a230 1
    bfd_h_put_32 (abfd, in->l_addr.l_symndx, (bfd_byte *)ext->l_addr.l_symndx);
d232 1
a232 1
    bfd_h_put_64 (abfd, in->l_addr.l_paddr, (bfd_byte *)ext->l_addr.l_paddr);
a236 6

static void _bfd_xcoff64_swap_sym_in PARAMS ((bfd *, PTR, PTR));
static unsigned int _bfd_xcoff64_swap_sym_out PARAMS ((bfd *, PTR, PTR));
static void _bfd_xcoff64_swap_aux_in PARAMS ((bfd *, PTR, int, int, int, int, PTR));
static unsigned int _bfd_xcoff64_swap_aux_out PARAMS ((bfd *, PTR, int, int, int, int, PTR));

d239 1
a239 1
     bfd            *abfd;
d243 2
a244 2
  struct external_syment *ext = (struct external_syment *)ext1;
  struct internal_syment      *in = (struct internal_syment *)in1;
d247 6
a252 6
  in->_n._n_n._n_offset = bfd_h_get_32(abfd, (bfd_byte *) ext->e_offset);
  in->n_value = bfd_h_get_64(abfd, (bfd_byte *) ext->e_value);
  in->n_scnum = bfd_h_get_16(abfd, (bfd_byte *) ext->e_scnum);
  in->n_type = bfd_h_get_16(abfd, (bfd_byte *) ext->e_type);
  in->n_sclass = bfd_h_get_8(abfd, ext->e_sclass);
  in->n_numaux = bfd_h_get_8(abfd, ext->e_numaux);
d257 13
a269 13
     bfd       *abfd;
     PTR	inp;
     PTR	extp;
{
  struct internal_syment *in = (struct internal_syment *)inp;
  struct external_syment *ext =(struct external_syment *)extp;

  bfd_h_put_32(abfd, in->_n._n_n._n_offset, (bfd_byte *)  ext->e_offset);
  bfd_h_put_64(abfd,  in->n_value , (bfd_byte *) ext->e_value);
  bfd_h_put_16(abfd,  in->n_scnum , (bfd_byte *) ext->e_scnum);
  bfd_h_put_16(abfd,  in->n_type , (bfd_byte *) ext->e_type);
  bfd_h_put_8(abfd,  in->n_sclass , ext->e_sclass);
  bfd_h_put_8(abfd,  in->n_numaux , ext->e_numaux);
d275 7
a281 7
     bfd            *abfd;
     PTR 	      ext1;
     int             type;
     int             class;
     int	      indx;
     int	      numaux;
     PTR 	      in1;
d283 2
a284 2
  union external_auxent *ext = (union external_auxent *)ext1;
  union internal_auxent *in = (union internal_auxent *)in1;
d286 2
a287 1
  switch (class) {
d289 2
a290 1
      if (ext->x_file.x_n.x_zeroes == 0) {
d292 4
a295 3
	  in->x_file.x_n.x_offset = 
	   bfd_h_get_32(abfd, (bfd_byte *) ext->x_file.x_n.x_offset);
	} else {
d308 2
a309 2
	  h = bfd_h_get_signed_32(abfd, ext->x_csect.x_scnlen_hi);
	  l = bfd_h_get_32 (abfd, ext->x_csect.x_scnlen_lo);
d313 2
a314 3
	  in->x_csect.x_parmhash = bfd_h_get_32 (abfd,
						 ext->x_csect.x_parmhash);
	  in->x_csect.x_snhash   = bfd_h_get_16 (abfd, ext->x_csect.x_snhash);
d318 2
a319 2
	  in->x_csect.x_smtyp    = bfd_h_get_8  (abfd, ext->x_csect.x_smtyp);
	  in->x_csect.x_smclas   = bfd_h_get_8  (abfd, ext->x_csect.x_smclas);
d327 2
a328 1
      if (type == T_NULL) {
d330 1
a330 1
             safety.  */
d342 16
a357 4
      in->x_sym.x_fcnary.x_fcn.x_lnnoptr = bfd_h_get_64(abfd, (bfd_byte *)
	      ext->x_sym.x_fcnary.x_fcn.x_lnnoptr);
      in->x_sym.x_fcnary.x_fcn.x_endndx.l = bfd_h_get_32(abfd, (bfd_byte *)
	      ext->x_sym.x_fcnary.x_fcn.x_endndx);
a358 13
  if (ISFCN(type)) {
    in->x_sym.x_misc.x_fsize = bfd_h_get_32(abfd, (bfd_byte *) ext->x_sym.x_fcnary.x_fcn.x_fsize);
  }
  else {
    in->x_sym.x_misc.x_lnsz.x_lnno = bfd_h_get_32(abfd, (bfd_byte *)
	    ext->x_sym.x_fcnary.x_lnsz.x_lnno);
    in->x_sym.x_misc.x_lnsz.x_size = bfd_h_get_16(abfd, (bfd_byte *)
	    ext->x_sym.x_fcnary.x_lnsz.x_size);
  }

end: ;
  /* the semicolon is because MSVC doesn't like labels at
     end of block. */
d360 1
a362 2


d365 7
a371 7
     bfd   *abfd;
     PTR 	inp;
     int   type;
     int   class;
     int   indx ATTRIBUTE_UNUSED;
     int   numaux ATTRIBUTE_UNUSED;
     PTR	extp;
d373 2
a374 2
  union internal_auxent *in = (union internal_auxent *)inp;
  union external_auxent *ext = (union external_auxent *)extp;
d376 1
a376 1
  memset((PTR)ext, 0, bfd_coff_auxesz (abfd));
d379 11
a389 38
  case C_FILE:
    if (ext->x_file.x_n.x_zeroes == 0) {
      bfd_h_put_32 (abfd, 0, (bfd_byte *) ext->x_file.x_n.x_zeroes);
      bfd_h_put_32 (abfd, in->x_file.x_n.x_offset,
	      (bfd_byte *) ext->x_file.x_n.x_offset);
    } else {
      memcpy (ext->x_file.x_fname, in->x_file.x_fname, FILNMLEN);
    }
    bfd_h_put_8 (abfd, _AUX_FILE, (bfd_byte *) ext->x_auxtype.x_auxtype);
    goto end;

  /* RS/6000 "csect" auxents */
  case C_EXT:
  case C_HIDEXT:
    if (indx + 1 == numaux)
      {
	bfd_vma temp;

	temp = in->x_csect.x_scnlen.l & 0xffffffff;
	bfd_h_put_32 (abfd, temp, ext->x_csect.x_scnlen_lo);
	temp = in->x_csect.x_scnlen.l >> 32;
	bfd_h_put_32 (abfd, temp, ext->x_csect.x_scnlen_hi);
	bfd_h_put_32 (abfd, in->x_csect.x_parmhash, ext->x_csect.x_parmhash);
	bfd_h_put_16 (abfd, in->x_csect.x_snhash,	ext->x_csect.x_snhash);
	/* We don't have to hack bitfields in x_smtyp because it's
	   defined by shifts-and-ands, which are equivalent on all
	   byte orders.  */
	bfd_h_put_8 (abfd, in->x_csect.x_smtyp,	ext->x_csect.x_smtyp);
	bfd_h_put_8 (abfd, in->x_csect.x_smclas, ext->x_csect.x_smclas);
    	bfd_h_put_8 (abfd, _AUX_CSECT, (bfd_byte *) ext->x_auxtype.x_auxtype);
	goto end;
      }
    break;

  case C_STAT:
  case C_LEAFSTAT:
  case C_HIDDEN:
    if (type == T_NULL) {
d391 32
a423 2
    break;
  }
d427 6
a432 5
      bfd_h_put_64(abfd,  in->x_sym.x_fcnary.x_fcn.x_lnnoptr, 
		   (bfd_byte *) ext->x_sym.x_fcnary.x_fcn.x_lnnoptr);
      bfd_h_put_8 (abfd, _AUX_FCN, (bfd_byte *) ext->x_auxtype.x_auxtype);
      bfd_h_put_32(abfd,  in->x_sym.x_fcnary.x_fcn.x_endndx.l, 
		   (bfd_byte *) ext->x_sym.x_fcnary.x_fcn.x_endndx);
d435 4
a438 2
    bfd_h_put_32 (abfd, in->x_sym.x_misc.x_fsize,
		  (bfd_byte *)  ext->x_sym.x_fcnary.x_fcn.x_fsize);
d441 4
a444 4
      bfd_h_put_32(abfd, in->x_sym.x_misc.x_lnsz.x_lnno, 
	      (bfd_byte *)ext->x_sym.x_fcnary.x_lnsz.x_lnno);
      bfd_h_put_16(abfd, in->x_sym.x_misc.x_lnsz.x_size, 
	      (bfd_byte *)ext->x_sym.x_fcnary.x_lnsz.x_size);
d447 1
a447 1
end:
d453 1
a453 1
_bfd_xcoff64_put_symbol_name (bfd *abfd, struct bfd_strtab_hash *strtab, 
d458 1
a458 1
  
d460 1
a460 1
  
d463 1
a463 1
  
d465 1
a465 1
  
d468 1
a468 1
  
d471 1
a471 1
  
d478 3
a480 3
	 struct xcoff_loader_info *ldinfo;
	 struct internal_ldsym *ldsym;
	 const char *name;
d486 20
a505 15
  if (ldinfo->string_size + len + 3 > ldinfo->string_alc){
    size_t newalc;
    bfd_byte *newstrings;

    newalc = ldinfo->string_alc * 2;
    if (newalc == 0)
      newalc = 32;
    while (ldinfo->string_size + len + 3 > newalc)
      newalc *= 2;
    
    newstrings = ((bfd_byte *)
		  bfd_realloc ((PTR) ldinfo->strings, newalc));
    if (newstrings == NULL) {
      ldinfo->failed = true;
      return false;
d507 2
a508 5
    ldinfo->string_alc = newalc;
    ldinfo->strings = newstrings;
  }
  
  bfd_put_16 (ldinfo->output_bfd, len + 1,
d514 1
a514 1
  
a517 73
extern boolean _bfd_xcoff_mkobject PARAMS ((bfd *));
extern boolean _bfd_xcoff_copy_private_bfd_data PARAMS ((bfd *, bfd *));
extern boolean _bfd_xcoff_is_local_label_name PARAMS ((bfd *, const char *));
extern void xcoff64_rtype2howto
  PARAMS ((arelent *, struct internal_reloc *));
extern reloc_howto_type * xcoff64_reloc_type_lookup
  PARAMS ((bfd *, bfd_reloc_code_real_type));
extern boolean _bfd_xcoff_slurp_armap PARAMS ((bfd *));
extern PTR _bfd_xcoff_read_ar_hdr PARAMS ((bfd *));
extern bfd *_bfd_xcoff_openr_next_archived_file PARAMS ((bfd *, bfd *));
extern int _bfd_xcoff_generic_stat_arch_elt PARAMS ((bfd *, struct stat *));
extern boolean _bfd_xcoff_write_armap
  PARAMS ((bfd *, unsigned int, struct orl *, unsigned int, int));
extern boolean _bfd_xcoff_write_archive_contents PARAMS ((bfd *));
extern int _bfd_xcoff_sizeof_headers PARAMS ((bfd *, boolean));
extern void _bfd_xcoff_swap_sym_in PARAMS ((bfd *, PTR, PTR));
extern unsigned int _bfd_xcoff_swap_sym_out PARAMS ((bfd *, PTR, PTR));
extern void _bfd_xcoff_swap_aux_in PARAMS ((bfd *, PTR, int, int, int, int, PTR));
extern unsigned int _bfd_xcoff_swap_aux_out PARAMS ((bfd *, PTR, int, int, int, int, PTR));

/* coffcode.h needs these to be defined */
/* Internalcoff.h and coffcode.h modify themselves based on these flags.  */
#define XCOFF64 
#define RS6000COFF_C 1

#define SELECT_RELOC(internal, howto)					\
  {									\
    internal.r_type = howto->type;					\
    internal.r_size =							\
      ((howto->complain_on_overflow == complain_overflow_signed		\
	? 0x80								\
	: 0)								\
       | (howto->bitsize - 1));						\
  }

#define COFF_DEFAULT_SECTION_ALIGNMENT_POWER (3)
#define COFF_LONG_FILENAMES
#define NO_COFF_SYMBOLS
#define RTYPE2HOWTO(cache_ptr, dst) xcoff64_rtype2howto (cache_ptr, dst)
#define coff_mkobject _bfd_xcoff_mkobject 
#define coff_bfd_copy_private_bfd_data _bfd_xcoff_copy_private_bfd_data 
#define coff_bfd_is_local_label_name _bfd_xcoff_is_local_label_name 
#define coff_bfd_reloc_type_lookup xcoff64_reloc_type_lookup 
#ifdef AIX_CORE
extern const bfd_target * rs6000coff_core_p ();
extern boolean rs6000coff_core_file_matches_executable_p ();
extern char *rs6000coff_core_file_failing_command PARAMS ((bfd *abfd));
extern int rs6000coff_core_file_failing_signal PARAMS ((bfd *abfd));
#define CORE_FILE_P rs6000coff_core_p
#define coff_core_file_failing_command \
  rs6000coff_core_file_failing_command
#define coff_core_file_failing_signal \
  rs6000coff_core_file_failing_signal
#define coff_core_file_matches_executable_p \
  rs6000coff_core_file_matches_executable_p
#else
#define CORE_FILE_P _bfd_dummy_target
#define coff_core_file_failing_command \
  _bfd_nocore_core_file_failing_command
#define coff_core_file_failing_signal \
  _bfd_nocore_core_file_failing_signal
#define coff_core_file_matches_executable_p \
  _bfd_nocore_core_file_matches_executable_p
#endif
#define coff_SWAP_sym_in _bfd_xcoff64_swap_sym_in
#define coff_SWAP_sym_out _bfd_xcoff64_swap_sym_out
#define coff_SWAP_aux_in _bfd_xcoff64_swap_aux_in
#define coff_SWAP_aux_out _bfd_xcoff64_swap_aux_out



#include "coffcode.h"

a522 30
static void xcoff64_swap_ldhdr_in
  PARAMS ((bfd *, const PTR, struct internal_ldhdr *));
static void xcoff64_swap_ldhdr_out
  PARAMS ((bfd *, const struct internal_ldhdr *, PTR d));
static void xcoff64_swap_ldsym_in
  PARAMS ((bfd *, const PTR, struct internal_ldsym *));
static void xcoff64_swap_ldsym_out
  PARAMS ((bfd *, const struct internal_ldsym *, PTR d));
static void xcoff64_swap_ldrel_in
  PARAMS ((bfd *, const PTR, struct internal_ldrel *));
static void xcoff64_swap_ldrel_out
  PARAMS ((bfd *, const struct internal_ldrel *, PTR d));
static boolean xcoff64_write_object_contents PARAMS ((bfd *));
static boolean xcoff64_ppc_relocate_section
  PARAMS ((bfd *, struct bfd_link_info *, bfd *, asection *, bfd_byte *,
	   struct internal_reloc *, struct internal_syment *,
	   asection **sections));
static boolean xcoff64_slurp_armap PARAMS ((bfd *));
static const bfd_target *xcoff64_archive_p PARAMS ((bfd *));
static bfd *xcoff64_openr_next_archived_file PARAMS ((bfd *, bfd *));
static int xcoff64_sizeof_headers PARAMS ((bfd *, boolean));
static asection *xcoff64_create_csect_from_smclas
  PARAMS ((bfd *, union internal_auxent *, const char *));
static boolean xcoff64_is_lineno_count_overflow PARAMS ((bfd *, bfd_vma));
static boolean xcoff64_is_reloc_count_overflow PARAMS ((bfd *, bfd_vma));
static bfd_vma xcoff64_loader_symbol_offset
  PARAMS ((bfd *, struct internal_ldhdr *));
static bfd_vma xcoff64_loader_reloc_offset
  PARAMS ((bfd *, struct internal_ldhdr *));

d555 1
a555 1
  bfd_put_32 (abfd, src->l_version, dst->l_version);
d576 3
a578 5
  /* 
   * XCOFF64 does not use l_zeroes like XCOFF32
   * Set the internal l_zeroes to 0 so the common 32/64 code uses l_value
   * as an offset into the loader symbol table
   */
d600 2
a601 2
  bfd_put_32 (abfd, src->_l._l_l._l_offset, dst->l_offset);
  bfd_put_16 (abfd, src->l_scnum, dst->l_scnum);
d635 2
a636 2
  bfd_put_16 (abfd, src->l_rtype, dst->l_rtype);
  bfd_put_16 (abfd, src->l_rsecnm, dst->l_rsecnm);
d654 3
a656 3
  asection *text_sec = ((void *)0) ;
  asection *data_sec = ((void *)0) ;
  asection *bss_sec = ((void *)0) ;
d662 5
a666 4
  if (abfd->output_has_begun == false) {
    if (! bfd_coff_compute_section_file_positions (abfd))
      return false;
  }
d671 1
a671 1
  for (current = abfd->sections; current != NULL; current = current->next) {
a672 1
  }
d682 34
a715 15
  /* Indicate in each section->line_filepos its actual file address */   
  for (current = abfd->sections; current != NULL; current =  current->next) {
    if (current->lineno_count) {
      current->line_filepos = lineno_base;
      current->moving_line_filepos = lineno_base;
      lineno_base += current->lineno_count * bfd_coff_linesz (abfd);
    } else {
      current->line_filepos = 0;
    }
    
    if (current->reloc_count) {
      current->rel_filepos = reloc_base;
      reloc_base += current->reloc_count * bfd_coff_relsz (abfd);
    } else {
      current->rel_filepos = 0;
a716 9
  }
   
  if ((abfd->flags & EXEC_P) != 0) {
    scn_base = bfd_coff_filhsz (abfd) + bfd_coff_aoutsz (abfd);
    internal_f.f_opthdr = bfd_coff_aoutsz (abfd);
  } else {
    scn_base = bfd_coff_filhsz (abfd);
    internal_f.f_opthdr = 0;
  }
d724 54
a777 47
  for (current = abfd->sections; current != NULL; current = current->next) {
    
    struct internal_scnhdr section;
    struct external_scnhdr buff;

    internal_f.f_nscns++;

    strncpy (section.s_name, current->name, SCNNMLEN);

    section.s_vaddr = current->vma;
    section.s_paddr = current->lma;
    section.s_size =  current->_raw_size;

    /*
      If this section has no size or is unloadable then the scnptr
      will be 0 too
    */
    if (current->_raw_size == 0 ||
	(current->flags & (SEC_LOAD | SEC_HAS_CONTENTS)) == 0) {
      section.s_scnptr = 0;
    } else {
      section.s_scnptr = current->filepos;
    }

    section.s_relptr = current->rel_filepos;
    section.s_lnnoptr = current->line_filepos;
    section.s_nreloc = current->reloc_count;

    section.s_nlnno = current->lineno_count;
    if (current->reloc_count != 0)
      hasrelocs = true;
    if (current->lineno_count != 0)
      haslinno = true;

    section.s_flags = sec_to_styp_flags (current->name, current->flags);

    if (!strcmp (current->name, _TEXT)) {
	text_sec = current;
    } else if (!strcmp (current->name, _DATA)) {
      data_sec = current;
    } else if (!strcmp (current->name, _BSS)) {
      bss_sec = current;
    }

    if (bfd_coff_swap_scnhdr_out (abfd, &section, &buff) == 0
	|| bfd_write ((PTR) (&buff), 1, bfd_coff_scnhsz (abfd), abfd) 
	!= bfd_coff_scnhsz (abfd))
d779 1
a779 1
  }
d806 2
a807 4
  /* 
   * This can only be called from the xcoff64 backend so the magic # must 
   * be for xcoff64 
   */
d823 6
a828 7
  /* 
   * If bfd_get_symcount (abfd) != 0, then we are not using the COFF
   *  backend linker, and obj_raw_syment_count is not valid until after
   * coff_write_symbols is called.  
   */
  if (bfd_get_symcount (abfd) != 0) {
    int firstundef;
d830 16
a845 9
    if (!coff_renumber_symbols (abfd, &firstundef))
      return false;
    coff_mangle_symbols (abfd);
    if (! coff_write_symbols (abfd))
      return false;
    if (! coff_write_linenumbers (abfd))
      return false;
    if (! coff_write_relocs (abfd, firstundef))
      return false;
d847 8
a854 13
    internal_f.f_symptr = sym_base;
    internal_f.f_nsyms = bfd_get_symcount (abfd);
  } else if (obj_raw_syment_count (abfd) != 0) {
    internal_f.f_symptr = sym_base;
    
    /* 
     * AIX appears to require that F_RELFLG not be set if there are
     *  local symbols but no relocations.  
     */
    internal_f.f_flags &=~ F_RELFLG;
  } else {
    internal_f.f_flags |= F_LSYMS;
  }
d856 3
a858 2
  if (text_sec) {
    internal_a.tsize = bfd_get_section_size_before_reloc (text_sec);
d860 1
a860 1
  }
d862 5
a866 4
  if (data_sec) {
    internal_a.dsize = bfd_get_section_size_before_reloc (data_sec);
    internal_a.data_start = internal_a.dsize ? data_sec->vma : 0;
  }
d868 6
a873 5
  if (bss_sec) {
    internal_a.bsize = bfd_get_section_size_before_reloc (bss_sec);
    if (internal_a.bsize && bss_sec->vma < internal_a.data_start)
      internal_a.data_start = bss_sec->vma;
  }
d878 2
a879 2
  if (xcoff_data (abfd)->full_aouthdr) {

d889 2
a890 1
      if (text_sec != NULL) {
d893 17
a909 12
      } else {
	internal_a.o_sntext = 0;
	internal_a.o_algntext = 0;
      }

      if (data_sec != NULL) {
	internal_a.o_sndata = data_sec->target_index;
	internal_a.o_algndata = bfd_get_section_alignment (abfd, data_sec);
      } else {
	internal_a.o_sndata = 0;
	internal_a.o_algndata = 0;
      }
d947 3
a949 3
  }
   
  if (bfd_seek (abfd, (file_ptr) 0, 0 ) != 0)
d951 1
a951 1
  
d954 4
a957 4
    bfd_size_type amount;
    
    buff = bfd_malloc (bfd_coff_filhsz (abfd));
    if (buff == ((void *)0) ) 
d959 4
a962 4
    
    bfd_coff_swap_filehdr_out (abfd, (PTR) & internal_f, (PTR) buff);
    amount = bfd_write ((PTR) buff, 1, bfd_coff_filhsz (abfd), abfd);
    
d964 1
a964 1
    
a967 2
  
  if (abfd->flags & EXEC_P) {
d969 8
a976 2
    char * buff;
    bfd_size_type amount;
d978 2
a979 6
    buff = bfd_malloc (bfd_coff_aoutsz (abfd));
    if (buff == NULL) 
      return false;
      
    bfd_coff_swap_aouthdr_out (abfd, (PTR) & internal_a, (PTR) buff);
    amount = bfd_write ((PTR) buff, 1, bfd_coff_aoutsz (abfd), abfd);
d981 1
a981 5
    free (buff);
      
    if (amount != bfd_coff_aoutsz (abfd))
      return false;
  }  
d983 3
d1030 12
a1041 9
      if (symndx == -1)	{
	h = NULL;
	sym = NULL;
	addend = 0;
      } else {    
	h = obj_xcoff_sym_hashes (input_bfd)[symndx];
	sym = syms + symndx;
	addend = - sym->n_value;
      }
d1059 14
a1072 9
      if (howto.bitsize == 64) {
	howto.src_mask = howto.dst_mask = MINUS_ONE;
      } else if (howto.bitsize == 32) {
	howto.src_mask = howto.dst_mask = 0xffffffff;
      } else {
	howto.src_mask = howto.dst_mask = (1 << howto.bitsize) - 1;
	if (howto.bitsize == 16)
	  howto.size = 1;
      }
d1077 3
a1079 2
      if (h == NULL) {
	asection *sec;
d1081 5
a1085 10
	if (symndx == -1) {
	  sec = bfd_abs_section_ptr;
	  val = 0;
	} else {
	  sec = sections[symndx];
	  /* Hack to make sure we use the right TOC anchor value
	     if this reloc is against the TOC anchor.  */
	  if (sec->name[3] == '0'
	      && strcmp (sec->name, ".tc0") == 0)
	    val = xcoff_data (output_bfd)->toc;
d1087 14
a1100 4
	    val = (sec->output_section->vma
		   + sec->output_offset
		   + sym->n_value
		   - sec->vma);
d1102 2
d1105 14
a1118 1
      } else {
d1120 16
a1135 8
	if (h->root.type == bfd_link_hash_defined
	    || h->root.type == bfd_link_hash_defweak) {
	  asection *sec;
	  
	  sec = h->root.u.def.section;
	  val = (h->root.u.def.value
		 + sec->output_section->vma
		 + sec->output_offset);
d1137 4
a1140 19
	} else if (h->root.type == bfd_link_hash_common) {
	  asection *sec;
	  
	  sec = h->root.u.c.p->section;
	  val = (sec->output_section->vma
		 + sec->output_offset);
	} else if ((h->flags & XCOFF_DEF_DYNAMIC) != 0
		   || (h->flags & XCOFF_IMPORT) != 0) {
	  /* Every symbol in a shared object is defined somewhere.  */
	  val = 0;
	} else if (! info->relocateable) {
	  if (! ((*info->callbacks->undefined_symbol)
		 (info, h->root.root.string, input_bfd, input_section,
		  rel->r_vaddr - input_section->vma, true)))
	    return false;
	  
	  /* Don't try to process the reloc.  It can't help, and
	     it may generate another error.  */
	  continue;
a1141 1
      }
d1149 64
a1212 63
      switch (rel->r_type) {
      case R_RTB:
      case R_RRTBI:
      case R_RRTBA:
	/* These relocs are defined by the PowerPC ABI to be
	   relative branches which use half of the difference
	   between the symbol and the program counter.  I can't
	   quite figure out when this is useful.  These relocs are
	   not defined by the PowerOpen ABI.  */
      default:
	(*_bfd_error_handler)
	  (_("%s: unsupported relocation type 0x%02x"),
	   bfd_get_filename (input_bfd), (unsigned int) rel->r_type);
	bfd_set_error (bfd_error_bad_value);
	return false;
      case R_POS:
	/* Simple positive relocation.  */
	break;
      case R_NEG:
	/* Simple negative relocation.  */
	val = - val;
	break;
      case R_REL:
	/* Simple PC relative relocation.  */
	howto.pc_relative = true;
	break;
      case R_TOC:
	/* TOC relative relocation.  The value in the instruction in
	   the input file is the offset from the input file TOC to
	   the desired location.  We want the offset from the final
	   TOC to the desired location.  We have:
	   isym = iTOC + in
	   iinsn = in + o
	   osym = oTOC + on
	   oinsn = on + o
	   so we must change insn by on - in.
	*/
      case R_GL:
	/* Global linkage relocation.  The value of this relocation
	   is the address of the entry in the TOC section.  */
      case R_TCL:
	/* Local object TOC address.  I can't figure out the
	   difference between this and case R_GL.  */
      case R_TRL:
	/* TOC relative relocation.  A TOC relative load instruction
	   which may be changed to a load address instruction.
	   FIXME: We don't currently implement this optimization.  */
      case R_TRLA:
	/* TOC relative relocation.  This is a TOC relative load
	   address instruction which may be changed to a load
	   instruction.  FIXME: I don't know if this is the correct
	   implementation.  */
	if (h != NULL && h->smclas != XMC_TD)
	  {
	    if (h->toc_section == NULL)
	      {
		(*_bfd_error_handler)
		  (_("%s: TOC reloc at 0x%x to symbol `%s' with no TOC entry"),
		   bfd_get_filename (input_bfd), rel->r_vaddr,
		   h->root.root.string);
		bfd_set_error (bfd_error_bad_value);
		return false;
	      }
d1214 4
a1217 3
	    BFD_ASSERT ((h->flags & XCOFF_SET_TOC) == 0);
	    val = (h->toc_section->output_section->vma
		   + h->toc_section->output_offset);
d1219 2
a1220 1
	  }
d1222 53
a1274 57

	val = ((val - xcoff_data (output_bfd)->toc)
	       - (sym->n_value - xcoff_data (input_bfd)->toc));

	addend = 0;
	break;
      case R_BA:
	/* Absolute branch.  We don't want to mess with the lower
	   two bits of the instruction.  */
      case R_CAI:
	/* The PowerPC ABI defines this as an absolute call which
             may be modified to become a relative call.  The PowerOpen
             ABI does not define this relocation type.  */
      case R_RBA:
	/* Absolute branch which may be modified to become a
             relative branch.  */
      case R_RBAC:
	/* The PowerPC ABI defines this as an absolute branch to a
             fixed address which may be modified to an absolute branch
             to a symbol.  The PowerOpen ABI does not define this
             relocation type.  */
      case R_RBRC:
	/* The PowerPC ABI defines this as an absolute branch to a
             fixed address which may be modified to a relative branch.
             The PowerOpen ABI does not define this relocation type.  */
	howto.src_mask &= ~3;
	howto.dst_mask = howto.src_mask;
	break;
      case R_BR:
	/* Relative branch.  We don't want to mess with the lower
	   two bits of the instruction.  */
      case R_CREL:
	/* The PowerPC ABI defines this as a relative call which may
             be modified to become an absolute call.  The PowerOpen
             ABI does not define this relocation type.  */
      case R_RBR:
	/* A relative branch which may be modified to become an
             absolute branch.  FIXME: We don't implement this,
             although we should for symbols of storage mapping class
             XMC_XO.  */
	howto.pc_relative = true;
	howto.src_mask &= ~3;
	howto.dst_mask = howto.src_mask;
	howto.size = 2;
	howto.complain_on_overflow = complain_overflow_bitfield;
	break;
      case R_RL:
	/* The PowerPC AIX ABI describes this as a load which may be
             changed to a load address.  The PowerOpen ABI says this
             is the same as case R_POS.  */
	break;
      case R_RLA:
	/* The PowerPC AIX ABI describes this as a load address
	   which may be changed to a load.  The PowerOpen ABI says
	   this is the same as R_POS.  */
	break;
      }
d1283 6
a1288 6
      if ((rel->r_type == R_BR || rel->r_type == R_RBR) && 
	  h != NULL && 
	  h->root.type == bfd_link_hash_defined &&
	  (rel->r_vaddr - input_section->vma + 8
	   <= input_section->_cooked_size)) {

d1297 2
a1298 2
	   * compiler to call a function through a pointer.  
	   * 
d1304 5
a1308 4
	      if (next == 0x4def7b82		/* cror 15,15,15 */
		  || next == 0x4ffffb82		/* cror 31,31,31 */
		  || next == 0x60000000)	/* ori r0,r0,0 */
		bfd_put_32 (input_bfd, 0xe8410028, pnext); /* ld r2,40(r1) */
d1312 3
a1314 2
	      if (next == 0xe8410028)		/* ld r2,40(r1) */
		bfd_put_32 (input_bfd, 0x60000000, pnext); /* ori r0,r0,0 */
d1374 6
a1379 6
  HOWTO (0,	                /* type */
	 0,	                /* rightshift */
	 4,	                /* size (0 = byte, 1 = short, 2 = long) */
	 64,	                /* bitsize */
	 false,	                /* pc_relative */
	 0,	                /* bitpos */
d1381 6
a1386 6
	 0,		        /* special_function */
	 "R_POS",               /* name */
	 true,	                /* partial_inplace */
	 MINUS_ONE,            /* src_mask */
	 MINUS_ONE,            /* dst_mask */
	 false),                /* pcrel_offset */
d1389 6
a1394 6
  HOWTO (1,	                /* type */
	 0,	                /* rightshift */
	 -4,	                /* size (0 = byte, 1 = short, 2 = long) */
	 64,	                /* bitsize */
	 false,	                /* pc_relative */
	 0,	                /* bitpos */
d1396 6
a1401 6
	 0,		        /* special_function */
	 "R_NEG",               /* name */
	 true,	                /* partial_inplace */
	 MINUS_ONE,            /* src_mask */
	 MINUS_ONE,            /* dst_mask */
	 false),                /* pcrel_offset */
d1404 6
a1409 6
  HOWTO (2,	                /* type */
	 0,	                /* rightshift */
	 2,	                /* size (0 = byte, 1 = short, 2 = long) */
	 32,	                /* bitsize */
	 true,	                /* pc_relative */
	 0,	                /* bitpos */
d1411 6
a1416 6
	 0,		        /* special_function */
	 "R_REL",               /* name */
	 true,	                /* partial_inplace */
	 0xffffffff,            /* src_mask */
	 0xffffffff,            /* dst_mask */
	 false),                /* pcrel_offset */
d1419 6
a1424 6
  HOWTO (3,	                /* type */
	 0,	                /* rightshift */
	 1,	                /* size (0 = byte, 1 = short, 2 = long) */
	 16,	                /* bitsize */
	 false,	                /* pc_relative */
	 0,	                /* bitpos */
d1426 14
a1439 14
	 0,		        /* special_function */
	 "R_TOC",               /* name */
	 true,	                /* partial_inplace */
	 0xffff,	        /* src_mask */
	 0xffff,        	/* dst_mask */
	 false),                /* pcrel_offset */

  /* I don't really know what this is.  */
  HOWTO (4,	                /* type */
	 1,	                /* rightshift */
	 2,	                /* size (0 = byte, 1 = short, 2 = long) */
	 32,	                /* bitsize */
	 false,	                /* pc_relative */
	 0,	                /* bitpos */
d1441 6
a1446 6
	 0,		        /* special_function */
	 "R_RTB",               /* name */
	 true,	                /* partial_inplace */
	 0xffffffff,	        /* src_mask */
	 0xffffffff,        	/* dst_mask */
	 false),                /* pcrel_offset */
d1449 6
a1454 6
  HOWTO (5,	                /* type */
	 0,	                /* rightshift */
	 2,	                /* size (0 = byte, 1 = short, 2 = long) */
	 16,	                /* bitsize */
	 false,	                /* pc_relative */
	 0,	                /* bitpos */
d1456 14
a1469 14
	 0,		        /* special_function */
	 "R_GL",                /* name */
	 true,	                /* partial_inplace */
	 0xffff,	        /* src_mask */
	 0xffff,        	/* dst_mask */
	 false),                /* pcrel_offset */

  /* Local TOC relative symbol.  */
  HOWTO (6,	                /* type */
	 0,	                /* rightshift */
	 2,	                /* size (0 = byte, 1 = short, 2 = long) */
	 16,	                /* bitsize */
	 false,	                /* pc_relative */
	 0,	                /* bitpos */
d1471 6
a1476 6
	 0,		        /* special_function */
	 "R_TCL",               /* name */
	 true,	                /* partial_inplace */
	 0xffff,	        /* src_mask */
	 0xffff,        	/* dst_mask */
	 false),                /* pcrel_offset */
d1481 6
a1486 6
  HOWTO (8,	                /* type */
	 0,	                /* rightshift */
	 2,	                /* size (0 = byte, 1 = short, 2 = long) */
	 26,	                /* bitsize */
	 false,	                /* pc_relative */
	 0,	                /* bitpos */
d1488 6
a1493 6
	 0,		        /* special_function */
	 "R_BA",                /* name */
	 true,	                /* partial_inplace */
	 0x3fffffc,	        /* src_mask */
	 0x3fffffc,        	/* dst_mask */
	 false),                /* pcrel_offset */
d1498 6
a1503 6
  HOWTO (0xa,	                /* type */
	 0,	                /* rightshift */
	 2,	                /* size (0 = byte, 1 = short, 2 = long) */
	 26,	                /* bitsize */
	 true,	                /* pc_relative */
	 0,	                /* bitpos */
d1505 6
a1510 6
	 0,		        /* special_function */
	 "R_BR",                /* name */
	 true,	                /* partial_inplace */
	 0x3fffffc,	        /* src_mask */
	 0x3fffffc,        	/* dst_mask */
	 false),                /* pcrel_offset */
d1515 6
a1520 6
  HOWTO (0xc,	                /* type */
	 0,	                /* rightshift */
	 2,	                /* size (0 = byte, 1 = short, 2 = long) */
	 16,	                /* bitsize */
	 false,	                /* pc_relative */
	 0,	                /* bitpos */
d1522 6
a1527 6
	 0,		        /* special_function */
	 "R_RL",                /* name */
	 true,	                /* partial_inplace */
	 0xffff,	        /* src_mask */
	 0xffff,        	/* dst_mask */
	 false),                /* pcrel_offset */
d1530 6
a1535 6
  HOWTO (0xd,	                /* type */
	 0,	                /* rightshift */
	 2,	                /* size (0 = byte, 1 = short, 2 = long) */
	 16,	                /* bitsize */
	 false,	                /* pc_relative */
	 0,	                /* bitpos */
d1537 6
a1542 6
	 0,		        /* special_function */
	 "R_RLA",               /* name */
	 true,	                /* partial_inplace */
	 0xffff,	        /* src_mask */
	 0xffff,        	/* dst_mask */
	 false),                /* pcrel_offset */
d1546 7
a1552 7
  /* Non-relocating reference.  */
  HOWTO (0xf,	                /* type */
	 0,	                /* rightshift */
	 2,	                /* size (0 = byte, 1 = short, 2 = long) */
	 32,	                /* bitsize */
	 false,	                /* pc_relative */
	 0,	                /* bitpos */
d1554 6
a1559 6
	 0,		        /* special_function */
	 "R_REF",               /* name */
	 false,	                /* partial_inplace */
	 0,		        /* src_mask */
	 0,     	   	/* dst_mask */
	 false),                /* pcrel_offset */
d1565 6
a1570 6
  HOWTO (0x12,	                /* type */
	 0,	                /* rightshift */
	 2,	                /* size (0 = byte, 1 = short, 2 = long) */
	 16,	                /* bitsize */
	 false,	                /* pc_relative */
	 0,	                /* bitpos */
d1572 14
a1585 14
	 0,		        /* special_function */
	 "R_TRL",               /* name */
	 true,	                /* partial_inplace */
	 0xffff,	        /* src_mask */
	 0xffff,        	/* dst_mask */
	 false),                /* pcrel_offset */

  /* TOC relative load address.  */
  HOWTO (0x13,	                /* type */
	 0,	                /* rightshift */
	 2,	                /* size (0 = byte, 1 = short, 2 = long) */
	 16,	                /* bitsize */
	 false,	                /* pc_relative */
	 0,	                /* bitpos */
d1587 6
a1592 6
	 0,		        /* special_function */
	 "R_TRLA",              /* name */
	 true,	                /* partial_inplace */
	 0xffff,	        /* src_mask */
	 0xffff,        	/* dst_mask */
	 false),                /* pcrel_offset */
d1595 6
a1600 6
  HOWTO (0x14,	                /* type */
	 1,	                /* rightshift */
	 2,	                /* size (0 = byte, 1 = short, 2 = long) */
	 32,	                /* bitsize */
	 false,	                /* pc_relative */
	 0,	                /* bitpos */
d1602 6
a1607 6
	 0,		        /* special_function */
	 "R_RRTBI",             /* name */
	 true,	                /* partial_inplace */
	 0xffffffff,	        /* src_mask */
	 0xffffffff,        	/* dst_mask */
	 false),                /* pcrel_offset */
d1610 6
a1615 6
  HOWTO (0x15,	                /* type */
	 1,	                /* rightshift */
	 2,	                /* size (0 = byte, 1 = short, 2 = long) */
	 32,	                /* bitsize */
	 false,	                /* pc_relative */
	 0,	                /* bitpos */
d1617 14
a1630 14
	 0,		        /* special_function */
	 "R_RRTBA",             /* name */
	 true,	                /* partial_inplace */
	 0xffffffff,	        /* src_mask */
	 0xffffffff,        	/* dst_mask */
	 false),                /* pcrel_offset */

  /* Modifiable call absolute indirect.  */
  HOWTO (0x16,	                /* type */
	 0,	                /* rightshift */
	 2,	                /* size (0 = byte, 1 = short, 2 = long) */
	 16,	                /* bitsize */
	 false,	                /* pc_relative */
	 0,	                /* bitpos */
d1632 14
a1645 14
	 0,		        /* special_function */
	 "R_CAI",               /* name */
	 true,	                /* partial_inplace */
	 0xffff,	        /* src_mask */
	 0xffff,        	/* dst_mask */
	 false),                /* pcrel_offset */

  /* Modifiable call relative.  */
  HOWTO (0x17,	                /* type */
	 0,	                /* rightshift */
	 2,	                /* size (0 = byte, 1 = short, 2 = long) */
	 16,	                /* bitsize */
	 false,	                /* pc_relative */
	 0,	                /* bitpos */
d1647 6
a1652 6
	 0,		        /* special_function */
	 "R_CREL",              /* name */
	 true,	                /* partial_inplace */
	 0xffff,	        /* src_mask */
	 0xffff,        	/* dst_mask */
	 false),                /* pcrel_offset */
d1655 6
a1660 6
  HOWTO (0x18,	                /* type */
	 0,	                /* rightshift */
	 2,	                /* size (0 = byte, 1 = short, 2 = long) */
	 26,	                /* bitsize */
	 false,	                /* pc_relative */
	 0,	                /* bitpos */
d1662 6
a1667 6
	 0,		        /* special_function */
	 "R_RBA",               /* name */
	 true,	                /* partial_inplace */
	 0xffff,	        /* src_mask */
	 0xffff,        	/* dst_mask */
	 false),                /* pcrel_offset */
d1670 6
a1675 6
  HOWTO (0x19,	                /* type */
	 0,	                /* rightshift */
	 2,	                /* size (0 = byte, 1 = short, 2 = long) */
	 32,	                /* bitsize */
	 false,	                /* pc_relative */
	 0,	                /* bitpos */
d1677 6
a1682 6
	 0,		        /* special_function */
	 "R_RBAC",              /* name */
	 true,	                /* partial_inplace */
	 0xffff,	        /* src_mask */
	 0xffff,        	/* dst_mask */
	 false),                /* pcrel_offset */
d1685 6
a1690 6
  HOWTO (0x1a,	                /* type */
	 0,	                /* rightshift */
	 2,	                /* size (0 = byte, 1 = short, 2 = long) */
	 26,	                /* bitsize */
	 false,	                /* pc_relative */
	 0,	                /* bitpos */
d1692 6
a1697 6
	 0,		        /* special_function */
	 "R_RBR",               /* name */
	 true,	                /* partial_inplace */
	 0xffff,	        /* src_mask */
	 0xffff,        	/* dst_mask */
	 false),                /* pcrel_offset */
d1700 6
a1705 6
  HOWTO (0x1b,	                /* type */
	 0,	                /* rightshift */
	 2,	                /* size (0 = byte, 1 = short, 2 = long) */
	 16,	                /* bitsize */
	 false,	                /* pc_relative */
	 0,	                /* bitpos */
d1707 20
a1726 21
	 0,		        /* special_function */
	 "R_RBRC",              /* name */
	 true,	                /* partial_inplace */
	 0xffff,	        /* src_mask */
	 0xffff,        	/* dst_mask */
	 false),                /* pcrel_offset */

  HOWTO (0,                     /* type */
         0,                     /* rightshift */
         4,                     /* size (0 = byte, 1 = short, 2 = long) */
         64,                    /* bitsize */
         false,                 /* pc_relative */
         0,                     /* bitpos */
         complain_overflow_bitfield, /* complain_on_overflow */
         0,                     /* special_function */
         "R_POS",               /* name */
         true,                  /* partial_inplace */
         MINUS_ONE,             /* src_mask */
	 MINUS_ONE,             /* dst_mask */
	 false)                 /* pcrel_offset */

d1749 1
a1749 1
      && (relent->howto->bitsize 
d1793 1
a1793 1
  bfd_size_type sz;
d1798 1
d1803 5
a1807 4
  if (xcoff_ardata (abfd) == NULL) {
    bfd_has_map (abfd) = false;
    return true;
  }
d1810 5
a1814 4
  if (off == 0)	{
    bfd_has_map (abfd) = false;
    return true;
  }
d1820 2
a1821 1
  if (bfd_read ((PTR) &hdr, SIZEOF_AR_HDR_BIG, 1, abfd) != SIZEOF_AR_HDR_BIG)
d1826 2
a1827 1
  if (bfd_seek (abfd, ((namlen + 1) & ~1) + SXCOFFARFMAG, SEEK_CUR) != 0)
d1839 1
a1839 1
  if (bfd_read ((PTR) contents, 1, sz, abfd) != sz)
d1843 1
a1843 1
  c = bfd_h_get_64 (abfd, contents);
d1845 8
a1852 7
  if (c * 8 >= sz) {
    bfd_set_error (bfd_error_bad_value);
    return false;
  }
      
  bfd_ardata (abfd)->symdefs = ((carsym *)
				bfd_alloc (abfd, c * sizeof (carsym)));
d1855 1
a1855 1
      
d1860 1
a1860 1
    arsym->file_offset = bfd_h_get_64 (abfd, p);
a1882 1

d1892 11
a1902 3
  
  if (bfd_read ((PTR) magic, SXCOFFARMAG, 1, abfd) != SXCOFFARMAG) {
    if (bfd_get_error () != bfd_error_system_call)
d1904 2
a1905 7
    return NULL;
  }

  if (strncmp (magic, XCOFFARMAGBIG, SXCOFFARMAG) != 0) {
    bfd_set_error (bfd_error_wrong_format);
    return NULL;
  }
d1910 2
a1911 2
  abfd->tdata.aout_ar_data =
    (struct artdata *) bfd_zalloc (abfd, sizeof (struct artdata));
d1925 8
a1932 6
  if (bfd_read ((PTR) &hdr.memoff, SIZEOF_AR_FILE_HDR_BIG - SXCOFFARMAG, 1,
		abfd) != SIZEOF_AR_FILE_HDR_BIG - SXCOFFARMAG) {
    if (bfd_get_error () != bfd_error_system_call)
      bfd_set_error (bfd_error_wrong_format);
    return NULL;
  }
d1940 2
a1941 1
  bfd_ardata (abfd)->tdata = bfd_zalloc (abfd, SIZEOF_AR_FILE_HDR_BIG);
d1944 1
a1944 1
  
d1947 6
a1952 6
  if (! xcoff64_slurp_armap (abfd)) {
   
    bfd_release (abfd, bfd_ardata (abfd));
    abfd->tdata.aout_ar_data = (struct artdata *) NULL;
    return NULL;
  }
d1967 6
a1972 5
  if ((xcoff_ardata (archive) == NULL) || 
      (! xcoff_big_format_p (archive))) {
    bfd_set_error (bfd_error_invalid_operation);
    return NULL;
  }
d1974 2
a1975 1
  if (last_file == NULL) {
d1977 9
a1985 7
  } else {
    /* XXX These actually have to be a calls to strtoll (at least
       on 32-bit machines) since the fields's width is 20 and
       there numbers with more than 32 bits can be represented.  */
    filestart = strtol (arch_xhdr_big (last_file)->nextoff, (char **) NULL,
			10);
  } 
d1993 5
a1997 4
			      (char **) NULL, 10)) {
    bfd_set_error (bfd_error_no_more_archived_files);
    return NULL;
  }
d2013 1
a2013 1
  size = bfd_coff_filhsz(abfd);
d2015 3
a2017 5
  /*
   * Don't think the small aout header can be used since some of the the
   * old elements have been reordered past the end of the old coff 
   * small aout size
   */
d2020 1
a2020 1
    size += bfd_coff_aoutsz(abfd);
d2022 1
a2022 1
  size += abfd->section_count * bfd_coff_scnhsz(abfd);
d2029 1
a2029 1
xcoff64_create_csect_from_smclas (abfd, aux, symbol_name) 
d2036 5
a2040 6
  /* 
   * Changes from 32 :
   * .sv == 8, is only for 32 bit programs
   * .ti == 12 and .tb == 13 are now reserved
   */
  static const char *names[19] = {
d2043 1
a2043 1
    ".td", ".sv64", ".sv3264" 
d2046 3
a2048 2
  if ((19 >= aux->x_csect.x_smclas) &&
      (NULL != names[aux->x_csect.x_smclas])) {
d2050 2
a2051 2
    return_value = bfd_make_section_anyway 
      (abfd, names[aux->x_csect.x_smclas]);
d2053 8
a2060 6
  } else {
    (*_bfd_error_handler)
      (_("%s: symbol `%s' has unrecognized smclas %d"),
       bfd_get_filename (abfd), symbol_name, aux->x_csect.x_smclas);
    bfd_set_error (bfd_error_bad_value);
  }
d2065 1
a2065 1
static boolean 
d2067 2
a2068 2
    bfd *abfd ATTRIBUTE_UNUSED;
	bfd_vma value ATTRIBUTE_UNUSED;
d2073 1
a2073 1
static boolean 
d2075 2
a2076 2
    bfd *abfd ATTRIBUTE_UNUSED;
	bfd_vma value ATTRIBUTE_UNUSED;
d2083 2
a2084 2
    bfd *abfd ATTRIBUTE_UNUSED;
	struct internal_ldhdr *ldhdr;
d2091 2
a2092 2
    bfd *abfd ATTRIBUTE_UNUSED;
    struct internal_ldhdr *ldhdr;
d2100 13
a2112 13
  HOWTO (0,	                /* type */                                 
	 0,	                /* rightshift */                           
	 4,	                /* size (0 = byte, 1 = short, 2 = long) */ 
	 64,	                /* bitsize */                   
	 false,	                /* pc_relative */                          
	 0,	                /* bitpos */                               
	 complain_overflow_bitfield, /* complain_on_overflow */
	 0,		        /* special_function */                     
	 "R_POS",               /* name */                                 
	 true,	                /* partial_inplace */                      
	 MINUS_ONE,            /* src_mask */                             
	 MINUS_ONE,            /* dst_mask */                             
	 false);                /* pcrel_offset */
d2128 1
a2128 1
static const struct xcoff_backend_data_rec bfd_xcoff_backend_data = 
d2132 1
a2132 1
    _bfd_xcoff64_swap_sym_in,         /* _bfd_coff_swap_sym_in */ 
d2170 1
a2170 1
                                 /* _bfd_coff_compute_section_file_positions */
d2209 1
a2209 1
  xcoff64_create_csect_from_smclas,  
d2214 1
a2214 1
  
d2241 1
a2241 1
                      /* data */
d2250 1
a2250 1
  bfd_putb16,         /* bfd_putx16 */ 
d2252 1
a2252 1
                      /* hdrs */
d2262 1
a2262 1
  
d2264 4
a2267 4
    _bfd_dummy_target, 
    coff_object_p, 	
    xcoff64_archive_p, 
   CORE_FILE_P 
d2269 1
a2269 1
  
d2271 1
a2271 1
    bfd_false, 
d2273 1
a2273 1
    _bfd_generic_mkarchive, 
d2276 1
a2276 1
  
d2278 1
a2278 1
    bfd_false, 
d2280 1
a2280 1
    _bfd_xcoff_write_archive_contents, 
d2283 1
a2283 1
  
d2289 2
a2290 2
                                     /* _bfd_get_section_contents_in_window */
  _bfd_generic_get_section_contents_in_window, 
d2294 1
a2294 1
                                    /* _bfd_merge_private_bfd_data */ 
d2296 1
a2296 1
                                    /* _bfd_copy_pivate_section_data */
d2298 1
a2298 1
                                    /* _bfd_copy_private_symbol_data */
d2306 2
a2307 2
                                          /* _core_file_matches_executable_p */
  coff_core_file_matches_executable_p, 
d2311 3
a2313 3
                                           /* XCOFF archives do not have 
					      anything which corresponds to 
					      an extended name table.  */
d2315 1
a2315 1
                                           /* _construct_extended_name_table */
d2323 2
a2324 2
                                           /* XCOFF archives do not have 
					      a timestamp.  */
d2351 1
a2351 1
                                      /* _bfd_get_relocated_section_contents */
d2362 2
a2363 2
                                          /* _get_dynamic_symtab_upper_bound */
  _bfd_xcoff_get_dynamic_symtab_upper_bound,  
d2370 1
a2370 1
  
@


1.10
log
@2001-05-25  H.J. Lu  <hjl@@gnu.org>

	* coff-rs6000.c (rs6000coff_vec): Use rs6000coff_core_p,
	rs6000coff_core_file_matches_executable_p,
	rs6000coff_core_file_failing_command and
	rs6000coff_core_file_failing_signal only if AIX_CORE is
	defined.
	(pmac_xcoff_vec): Likewise.
	* coff64-rs6000.c (rs6000coff64_vec): Likewise.
@
text
@d95 6
d497 30
d530 7
a536 5
xcoff64_swap_ldhdr_in (abfd, src, dst)
  bfd *abfd;
 const struct external_ldhdr *src;
 struct internal_ldhdr *dst;
 {
d552 1
a552 1
xcoff64_swap_ldhdr_out (abfd, src, dst)
d555 1
a555 1
     struct external_ldhdr *dst;
d557 2
d574 1
a574 1
xcoff64_swap_ldsym_in (abfd, src, dst)
d576 1
a576 1
     const struct external_ldsym *src;
d579 1
d598 1
a598 1
xcoff64_swap_ldsym_out (abfd, src, dst)
d601 1
a601 1
     struct external_ldsym *dst;
d603 2
d617 1
a617 1
xcoff64_swap_ldrel_in (abfd, src, dst)
d619 1
a619 1
     const struct external_ldrel *src;
d622 2
d633 1
a633 1
xcoff64_swap_ldrel_out (abfd, src, dst)
d636 1
a636 1
     struct external_ldrel *dst;
d638 2
d976 1
a976 1
boolean
d1748 1
a1748 1
boolean
d1841 1
a1841 1
const bfd_target *
d1910 1
a1910 1
bfd *
d1951 1
a1951 1
int
d2010 1
a2010 1
boolean 
d2018 1
a2018 1
boolean 
d2026 1
a2026 1
bfd_vma
d2034 1
a2034 1
bfd_vma
a2318 2


@


1.9
log
@Support for xcoff64
@
text
@a412 4
extern const bfd_target * rs6000coff_core_p ();
extern boolean rs6000coff_core_file_matches_executable_p ();
extern char *rs6000coff_core_file_failing_command PARAMS ((bfd *abfd));
extern int rs6000coff_core_file_failing_signal PARAMS ((bfd *abfd));
d456 5
d462 15
d2165 1
a2165 1
    rs6000coff_core_p
d2202 2
a2203 2
  rs6000coff_core_file_failing_command,    /* _core_file_failing_command */
  rs6000coff_core_file_failing_signal,     /* _core_file_failing_signal */
d2205 1
a2205 1
  rs6000coff_core_file_matches_executable_p, 
@


1.8
log
@Fix syntax errors.
@
text
@a22 4
/* Internalcoff.h and coffcode.h modify themselves based on these flags.  */
#define XCOFF64
#define RS6000COFF_C 1

d25 1
d28 1
d30 2
a31 1
#include "libcoff.h"
d71 1
d75 6
a80 1
} while (0)
d84 2
a85 2
#define coff_SWAP_lineno_in xcoff64_swap_lineno_in
#define coff_SWAP_lineno_out xcoff64_swap_lineno_out
d94 2
a95 1
/* For XCOFF64, the effective width of symndx changes depending on
d98 1
a98 1
xcoff64_swap_lineno_in (abfd, ext1, in1)
d108 1
a108 1
    in->l_addr.l_symndx =
d111 2
a112 2
    in->l_addr.l_symndx =
	    bfd_h_get_64(abfd, (bfd_byte *) ext->l_addr.l_symndx);
d116 1
a116 1
xcoff64_swap_lineno_out (abfd, inp, outp)
d130 1
a130 1
    bfd_h_put_64 (abfd, in->l_addr.l_symndx, (bfd_byte *)ext->l_addr.l_symndx);
d135 5
a139 4
static void xcoff64_swap_sym_in PARAMS ((bfd *, PTR, PTR));
static unsigned int xcoff64_swap_sym_out PARAMS ((bfd *, PTR, PTR));
static void xcoff64_swap_aux_in PARAMS ((bfd *, PTR, int, int, int, int, PTR));
static unsigned int xcoff64_swap_aux_out PARAMS ((bfd *, PTR, int, int, int, int, PTR));
d142 1
a142 1
xcoff64_swap_sym_in (abfd, ext1, in1)
d147 1
a147 1
  SYMENT *ext = (SYMENT *)ext1;
d151 1
a151 1
  in->_n._n_n._n_offset = bfd_h_get_32(abfd, (bfd_byte *) ext->e.e.e_offset);
d160 1
a160 1
xcoff64_swap_sym_out (abfd, inp, extp)
d166 1
a166 1
  SYMENT *ext =(SYMENT *)extp;
d168 1
a168 1
  bfd_h_put_32(abfd, in->_n._n_n._n_offset, (bfd_byte *)  ext->e.e.e_offset);
d178 1
a178 1
xcoff64_swap_aux_in (abfd, ext1, type, class, indx, numaux, in1)
d187 1
a187 1
  AUXENT    *ext = (AUXENT *)ext1;
d192 1
a192 1
      if (ext->x_file.x_fname[0] == 0) {
d194 1
a194 1
	  in->x_file.x_n.x_offset =
d197 2
a198 11
	    if (numaux > 1)
	      {
		if (indx == 0)
	  memcpy (in->x_file.x_fname, ext->x_file.x_fname,
			  numaux * sizeof (AUXENT));
	      }
	    else
	      {
		memcpy (in->x_file.x_fname, ext->x_file.x_fname, FILNMLEN);
	      }
	  }
d206 8
a213 4
	  in->x_csect.x_scnlen.l =
	      bfd_h_get_32(abfd, ext->x_csect.x_scnlen_lo);
	  /* FIXME: If we want section lengths larger than 32 bits, we need
	     to modify the internal coff structures to support it.  */
d260 1
a260 1
     end of block.  */
d264 2
d267 1
a267 1
xcoff64_swap_aux_out (abfd, inp, type, class, indx, numaux, extp)
d277 1
a277 1
  AUXENT *ext = (AUXENT *)extp;
d283 3
a285 5
    if (in->x_file.x_fname[0] == 0)
      {
      PUTWORD(abfd, 0, (bfd_byte *) ext->x_file.x_n.x_zeroes);
      PUTWORD(abfd,
	      in->x_file.x_n.x_offset,
d287 2
d290 1
a290 5
    else
      {
      memcpy (ext->x_file.x_fname, in->x_file.x_fname, FILNMLEN);
      }
    PUTBYTE (abfd, _AUX_FILE, (bfd_byte *) ext->x_auxtype.x_auxtype);
d298 8
a305 3
	PUTWORD (abfd, in->x_csect.x_scnlen.l, ext->x_csect.x_scnlen_lo);
	PUTWORD (abfd, in->x_csect.x_parmhash,	ext->x_csect.x_parmhash);
	PUTHALF (abfd, in->x_csect.x_snhash,	ext->x_csect.x_snhash);
d309 3
a311 3
	PUTBYTE (abfd, in->x_csect.x_smtyp,	ext->x_csect.x_smtyp);
	PUTBYTE (abfd, in->x_csect.x_smclas,	ext->x_csect.x_smclas);
    	PUTBYTE (abfd, _AUX_CSECT, (bfd_byte *) ext->x_auxtype.x_auxtype);
d327 5
a331 5
      bfd_h_put_64(abfd,  in->x_sym.x_fcnary.x_fcn.x_lnnoptr,
	      (bfd_byte *) ext->x_sym.x_fcnary.x_fcn.x_lnnoptr);
      PUTBYTE (abfd, _AUX_FCN, (bfd_byte *) ext->x_auxtype.x_auxtype);
      PUTWORD(abfd,  in->x_sym.x_fcnary.x_fcn.x_endndx.l,
	      (bfd_byte *) ext->x_sym.x_fcnary.x_fcn.x_endndx);
d334 2
a335 2
    PUTWORD (abfd, in->x_sym.x_misc.x_fsize,
	     (bfd_byte *)  ext->x_sym.x_fcnary.x_fcn.x_fsize);
d338 1
a338 1
      bfd_h_put_32(abfd, in->x_sym.x_misc.x_lnsz.x_lnno,
d340 1
a340 1
      bfd_h_put_16(abfd, in->x_sym.x_misc.x_lnsz.x_size,
d345 1
d349 1907
a2255 4
#define coff_SWAP_sym_in xcoff64_swap_sym_in
#define coff_SWAP_sym_out xcoff64_swap_sym_out
#define coff_SWAP_aux_in xcoff64_swap_aux_in
#define coff_SWAP_aux_out xcoff64_swap_aux_out
a2256 2
#define TARGET_NAME "aixcoff64-rs6000"
#define TARGET_SYM rs6000coff64_vec
a2257 1
#include "xcoff-target.h"
@


1.7
log
@Update copyright notices
@
text
@d144 2
a145 2
  in->_n._n_n._n_offset = bfd_h_get_32(abfd, (bfd_byte *) ext->e_offset);
  in->n_value = bfd_h_get_64(abfd, (bfd_byte *) ext->e.e_value);
d161 2
a162 2
  bfd_h_put_32(abfd, in->_n._n_n._n_offset, (bfd_byte *)  ext->e_offset);
  bfd_h_put_64(abfd,  in->n_value , (bfd_byte *) ext->e.e_value);
@


1.6
log
@2001-01-23  Kazu Hirata  <kazu@@hxi.com>

	* coff64-rs6000.c: Fix formatting.
	* coff-arm.c: Likewise.
	* coffgen.c: Likewise.
	* cofflink.c: Likewise.
	* coff-mcore.c: Likewise.
	* coff-mips.c: Likewise.
	* coff-pmac.c: Likewise.
	* coff-ppc.c: Likewise.
	* coff-rs6000.c: Likewise.
	* elf32.c: Likewise.
	* elf32-fr30.c: Likewise.
	* elf32-i370.c: Likewise.
	* elf32-i860.c: Likewise.
	* elf32-m32r.c: Likewise.
	* elf32-m68k.c: Likewise.
	* elf32-mcore.c: Likewise.
	* elf32-ppc.c: Likewise.
	* elf32-sh.c: Likewise.
	* elf32-v850.c: Likewise.
	* elf64-alpha.c: Likewise.
	* elf64-sparc.c: Likewise.
	* elflink.c: Likewise.
	* elflink.h: Likewise.
	* elf-m10200.c: Likewise.
	* elf-m10300.c: Likewise.
	* elfxx-ia64.c: Likewise.
@
text
@d2 1
a2 1
   Copyright 2000
@


1.6.2.1
log
@Update copyright notices.
@
text
@d2 1
a2 1
   Copyright 2000, 2001
@


1.5
log
@2000-11-28  Kazu Hirata  <kazu@@hxi.com>

	* aoutx.h: Fix formatting.
	* bfd-in.h: Likewise.
	* bfd-in2.h: Likewise.
	* cache.c: Likewise.
	* cisco-core.c: Likewise.
	* coff64-rs6000.c: Likewise.
	* coffcode.h: Likewise.
	* coffswap.h: Likewise.
	* corefile.c: Likewise.
@
text
@a351 1

@


1.4
log
@2000-11-27  Kazu Hirata  <kazu@@hxi.com>

	* coff64-rs6000.c: Fix formatting.
	* coffgen.c: Likewise.
	* cofflink.c: Likewise.
@
text
@d75 1
a75 1
} while(0)
@


1.3
log
@	* xcoff.h: Rename to xcoff-target.h
	* Makefile.am: Change all instances of xcoff.h to xcoff-target.h
	* coff-rs6000.c: Ditto.
	* coff64-rs6000.c: Ditto.
	* coff-pmac.c: Ditto.
	* Makefile.in: Regenerate.
@
text
@d24 1
a24 1
#define XCOFF64 
a33 1

a71 1

d89 1
a89 2

/* For XCOFF64, the effective width of symndx changes depending on 
d102 1
a102 1
    in->l_addr.l_symndx = 
d105 1
a105 1
    in->l_addr.l_symndx = 
a128 1

a142 1

d145 1
a145 1
  in->n_value = bfd_h_get_64(abfd, (bfd_byte *) ext->e.e_value); 
d187 1
a187 1
	  in->x_file.x_n.x_offset = 
d208 1
a208 1
	  in->x_csect.x_scnlen.l = 
d210 1
a210 1
	  /* FIXME: If we want section lengths larger than 32 bits, we need 
d258 1
a258 1
     end of block. */
a261 2


d322 1
a322 1
      bfd_h_put_64(abfd,  in->x_sym.x_fcnary.x_fcn.x_lnnoptr, 
d325 1
a325 1
      PUTWORD(abfd,  in->x_sym.x_fcnary.x_fcn.x_endndx.l, 
d333 1
a333 1
      bfd_h_put_32(abfd, in->x_sym.x_misc.x_lnsz.x_lnno, 
d335 1
a335 1
      bfd_h_put_16(abfd, in->x_sym.x_misc.x_lnsz.x_size, 
a341 1

@


1.2
log
@	* Makefile.am (BFD64_BACKENDS, BFD64_BACKENDS_CFILES): Add
	coffdu-rs6000.{lo,c}.
	(coff-pmac.lo, coff-rs6000.lo, coff64-rs6000.lo): Add dependency
	on xcoff.h
	* Makefile.in: Regenerate.
	* xcoff.h: New file.
	* coff-pmac.c: Use xcoff.h instead of coff-rs6000.c.
	* coff-rs6000.c: Move all declarations and defines that are
	common to the xcoff backends into xcoff.h
	* coff64-rs6000.c: Ditto,
@
text
@d359 1
a359 1
#include "xcoff.h"
@


1.1
log
@	Add XCOFF64 support.

	bfd:
	* Makefile.am (coff64-rs6000.lo): New rule.
	* Makefile.in: Regenerate.
	* coff-rs6000.c (xcoff_mkobject, xcoff_copy_private_bfd_data,
	xcoff_is_local_label_name, xcoff_rtype2howto,
	xcoff_reloc_type_lookup, xcoff_slurp_armap, xcoff_archive_p,
	xcoff_read_ar_hdr, xcoff_openr_next_archived_file, xcoff_write_armap,
	xcoff_write_archive_contents): No longer static, and prefix with _bfd_.
	(NO_COFF_SYMBOLS): Define.
	(xcoff64_swap_sym_in, xcoff64_swap_sym_out, xcoff64_swap_aux_in,
	xcoff64_swap_aux_out): New functions; handle xcoff symbol tables
	internally.
	(MINUS_ONE): New macro.
	(xcoff_howto_tabl, xcoff_reloc_type_lookup): Add 64 bit POS
	relocation.
	(coff_SWAP_sym_in, coff_SWAP_sym_out, coff_SWAP_aux_in,
	coff_SWAP_aux_out): Map to the new functions.
	* coff64-rs6000.c: New file.
	* libcoff.h (bfd_coff_backend_data): Add new fields
	_bfd_coff_force_symnames_in_strings and
	_bfd_coff_debug_string_prefix_length.
	(bfd_coff_force_symnames_in_strings,
	bfd_coff_debug_string_prefix_length): New macros for above fields.
	* coffcode.h (coff_set_arch_mach_hook): Handle XCOFF64 magic.
	Set machine to 620 for XCOFF64.  Use bfd_coff_swap_sym_in instead
	of using coff_swap_sym_in directly.
	(FORCE_SYMNAMES_IN_STRINGS): New macro, defined for XCOFF64.
	(coff_set_flags) Set magic for XCOFF64.
	(coff_compute_section_file_positions): Add symbol name length to
	string section length if bfd_coff_debug_string_prefix_length is
	true.
	(coff_write_object_contents): Don't do reloc overflow for XCOFF64.
	(coff_slurp_line_table): Use bfd_coff_swap_lineno_in instead of
	using coff_swap_lineno_in directly.
	(bfd_coff_backend_data): Add _bfd_coff_force_symnames_in_strings
	and _bfd_coff_debug_string_prefix_length fields.
	* coffgen.c (coff_fix_symbol_name, coff_write_symbols): Force
	symbol names into strings table when
	bfd_coff_force_symnames_in_strings is true.
	* coffswap.h (MAX_SCNHDR_NRELOC, MAX_SCNHDR_NLNNO, GET_RELOC_VADDR,
	SET_RELOC_VADDR): New macros.
	(coff_swap_reloc_in, coff_swap_reloc_out): Use above macros.
	(coff_swap_aux_in, coff_swap_aux_out): Remove RS6000COFF_C
	code.
	(coff_swap_aouthdr_in, coff_swap_aouthdr_out): Handle XCOFF64
	changes within RS6000COFF_C specific code.
	(coff_swap_scnhdr_out): Use PUT_SCNHDR_NLNNO, PUT_SCNHDR_NRELOC,
	MAX_SCNHDR_NRELOC, and MAX_SCNHDR_NLNNO.
	* reloc.c (bfd_perform_relocation, bfd_install_relocation):
	Extend existing hack on target name.
	* xcofflink.c (XCOFF_XVECP): Extend existing hack on
	target name.
	* coff-tic54x.c (ticof): Keep up to date with new fields
	in bfd_coff_backend_data.
	* config.bfd: Add bfd_powerpc_64_arch to targ_arch and define
	targ_selvecs to include rs6000coff64_vec for rs6000.
	* configure.in: Add rs6000coff64_vec case.
 	* cpu-powerpc.c: New bfd_arch_info_type.

	gas:
	* as.c (parse_args): Allow md_parse_option to override -a listing
	option.
	* config/obj-coff.c (add_lineno): Change type of offset parameter
	from "int" to "bfd_vma."
	* config/tc-ppc.c (md_pseudo_table): Add "llong" and "machine."
	(ppc_mach, ppc_subseg_align, ppc_target_format): New.
	(ppc_change_csect): Align correctly for XCOFF64.
	(ppc_machine): New function, which discards "ppc_machine" line.
	(ppc_tc): Cons for 8 when code is 64 bit.
	(md_apply_fix3): Don't check operand->insert.  Handle 64 bit
	relocations.
	(md_parse_option): Handle -a64 and -a32.
	(ppc_xcoff64): New.
	* config/tc-ppc.h (TARGET_MACH): Define.
	(TARGET_FORMAT): Move to function.
	(SUB_SEGMENT_ALIGN): Use ppc_subseg_align.

	include:
	* include/coff/rs6k64.h: New file.

	opcodes:
	* configure.in: Add bfd_powerpc_64_arch.
	* disassemble.c (disassembler): Use print_insn_big_powerpc for
	64 bit code.
@
text
@a72 2
#define TARGET_SYM rs6000coff64_vec
#define TARGET_NAME "aixcoff64-rs6000"
a131 1
#define NO_COFF_SYMBOLS
a349 15
#define SELECT_RELOC(internal, howto)					\
  {									\
    internal.r_type = howto->type;					\
    internal.r_size =							\
      ((howto->complain_on_overflow == complain_overflow_signed		\
	? 0x80								\
	: 0)								\
       | (howto->bitsize - 1));						\
  }

#define COFF_DEFAULT_SECTION_ALIGNMENT_POWER (3)

#define COFF_LONG_FILENAMES

#define RTYPE2HOWTO(cache_ptr, dst) _bfd_xcoff_rtype2howto (cache_ptr, dst)
d355 6
a360 107
#define coff_mkobject _bfd_xcoff_mkobject
#define coff_bfd_copy_private_bfd_data _bfd_xcoff_copy_private_bfd_data
#define coff_bfd_is_local_label_name _bfd_xcoff_is_local_label_name
#define coff_bfd_reloc_type_lookup _bfd_xcoff_reloc_type_lookup
#define coff_relocate_section _bfd_ppc_xcoff_relocate_section

extern boolean _bfd_xcoff_mkobject PARAMS ((bfd *));
extern boolean _bfd_xcoff_copy_private_bfd_data PARAMS ((bfd *, bfd *));
extern boolean _bfd_xcoff_is_local_label_name PARAMS ((bfd *, const char *));
extern void _bfd_xcoff_rtype2howto
  PARAMS ((arelent *, struct internal_reloc *));
extern reloc_howto_type *_bfd_xcoff_reloc_type_lookup
  PARAMS ((bfd *, bfd_reloc_code_real_type));
extern boolean _bfd_xcoff_slurp_armap PARAMS ((bfd *));
extern const bfd_target *_bfd_xcoff_archive_p PARAMS ((bfd *));
extern PTR _bfd_xcoff_read_ar_hdr PARAMS ((bfd *));
extern bfd *_bfd_xcoff_openr_next_archived_file PARAMS ((bfd *, bfd *));
extern int _bfd_xcoff_generic_stat_arch_elt PARAMS ((bfd *, struct stat *));
extern boolean _bfd_xcoff_write_armap
  PARAMS ((bfd *, unsigned int, struct orl *, unsigned int, int));
extern boolean _bfd_xcoff_write_archive_contents PARAMS ((bfd *));
extern int _bfd_xcoff_sizeof_headers PARAMS ((bfd *, boolean));

#define _bfd_xcoff_slurp_extended_name_table bfd_false
#define _bfd_xcoff_construct_extended_name_table \
  ((boolean (*) PARAMS ((bfd *, char **, bfd_size_type *, const char **))) \
   bfd_false)
#define _bfd_xcoff_truncate_arname bfd_dont_truncate_arname

/* We can use the standard get_elt_at_index routine.  */

#define _bfd_xcoff_get_elt_at_index _bfd_generic_get_elt_at_index

/* XCOFF archives do not have a timestamp.  */

#define _bfd_xcoff_update_armap_timestamp bfd_true

#include "coffcode.h"

#define CORE_FILE_P _bfd_dummy_target

#define coff_core_file_failing_command _bfd_nocore_core_file_failing_command
#define coff_core_file_failing_signal _bfd_nocore_core_file_failing_signal
#define coff_core_file_matches_executable_p \
  _bfd_nocore_core_file_matches_executable_p

#define _bfd_xcoff_bfd_get_relocated_section_contents \
  coff_bfd_get_relocated_section_contents
#define _bfd_xcoff_bfd_relax_section coff_bfd_relax_section
#define _bfd_xcoff_bfd_gc_sections coff_bfd_gc_sections
#define _bfd_xcoff_bfd_link_split_section coff_bfd_link_split_section

/* The transfer vector that leads the outside world to all of the above. */

const bfd_target
#ifdef TARGET_SYM
  TARGET_SYM =
#else
  rs6000coff64_vec =
#endif
{
#ifdef TARGET_NAME
  TARGET_NAME,
#else
  "aixcoff64-rs6000",		/* name */
#endif
  bfd_target_coff_flavour,
  BFD_ENDIAN_BIG,		/* data byte order is big */
  BFD_ENDIAN_BIG,		/* header byte order is big */

  (HAS_RELOC | EXEC_P |		/* object flags */
   HAS_LINENO | HAS_DEBUG | DYNAMIC |
   HAS_SYMS | HAS_LOCALS | WP_TEXT),

  (SEC_HAS_CONTENTS | SEC_ALLOC | SEC_LOAD | SEC_RELOC), /* section flags */
  0,				/* leading char */
  '/',				/* ar_pad_char */
  15,				/* ar_max_namelen??? FIXMEmgo */

  bfd_getb64, bfd_getb_signed_64, bfd_putb64,
     bfd_getb32, bfd_getb_signed_32, bfd_putb32,
     bfd_getb16, bfd_getb_signed_16, bfd_putb16, /* data */
  bfd_getb64, bfd_getb_signed_64, bfd_putb64,
     bfd_getb32, bfd_getb_signed_32, bfd_putb32,
     bfd_getb16, bfd_getb_signed_16, bfd_putb16, /* hdrs */

  {_bfd_dummy_target, coff_object_p, 	/* bfd_check_format */
     _bfd_xcoff_archive_p, CORE_FILE_P},
  {bfd_false, coff_mkobject,		/* bfd_set_format */
     _bfd_generic_mkarchive, bfd_false},
  {bfd_false, coff_write_object_contents,	/* bfd_write_contents */
     _bfd_xcoff_write_archive_contents, bfd_false},

     BFD_JUMP_TABLE_GENERIC (coff),
     BFD_JUMP_TABLE_COPY (coff),
     BFD_JUMP_TABLE_CORE (coff),
     BFD_JUMP_TABLE_ARCHIVE (_bfd_xcoff),
     BFD_JUMP_TABLE_SYMBOLS (coff),
     BFD_JUMP_TABLE_RELOCS (coff),
     BFD_JUMP_TABLE_WRITE (coff),
     BFD_JUMP_TABLE_LINK (_bfd_xcoff),
     BFD_JUMP_TABLE_DYNAMIC (_bfd_xcoff),

  NULL,
  
  COFF_SWAP_TABLE
};
@

