head	1.22;
access;
symbols
	sid-snapshot-20180601:1.22
	sid-snapshot-20180501:1.22
	sid-snapshot-20180401:1.22
	sid-snapshot-20180301:1.22
	sid-snapshot-20180201:1.22
	sid-snapshot-20180101:1.22
	sid-snapshot-20171201:1.22
	sid-snapshot-20171101:1.22
	sid-snapshot-20171001:1.22
	sid-snapshot-20170901:1.22
	sid-snapshot-20170801:1.22
	sid-snapshot-20170701:1.22
	sid-snapshot-20170601:1.22
	sid-snapshot-20170501:1.22
	sid-snapshot-20170401:1.22
	sid-snapshot-20170301:1.22
	sid-snapshot-20170201:1.22
	sid-snapshot-20170101:1.22
	sid-snapshot-20161201:1.22
	sid-snapshot-20161101:1.22
	sid-snapshot-20160901:1.22
	sid-snapshot-20160801:1.22
	sid-snapshot-20160701:1.22
	sid-snapshot-20160601:1.22
	sid-snapshot-20160501:1.22
	sid-snapshot-20160401:1.22
	sid-snapshot-20160301:1.22
	sid-snapshot-20160201:1.22
	sid-snapshot-20160101:1.22
	sid-snapshot-20151201:1.22
	sid-snapshot-20151101:1.22
	sid-snapshot-20151001:1.22
	sid-snapshot-20150901:1.22
	sid-snapshot-20150801:1.22
	sid-snapshot-20150701:1.22
	sid-snapshot-20150601:1.22
	sid-snapshot-20150501:1.22
	sid-snapshot-20150401:1.22
	sid-snapshot-20150301:1.22
	sid-snapshot-20150201:1.22
	sid-snapshot-20150101:1.22
	sid-snapshot-20141201:1.22
	sid-snapshot-20141101:1.22
	sid-snapshot-20141001:1.22
	sid-snapshot-20140901:1.22
	sid-snapshot-20140801:1.22
	sid-snapshot-20140701:1.22
	sid-snapshot-20140601:1.22
	sid-snapshot-20140501:1.22
	sid-snapshot-20140401:1.22
	sid-snapshot-20140301:1.22
	sid-snapshot-20140201:1.22
	sid-snapshot-20140101:1.22
	sid-snapshot-20131201:1.22
	sid-snapshot-20131101:1.22
	sid-snapshot-20131001:1.22
	binutils-2_24-branch:1.22.0.22
	binutils-2_24-branchpoint:1.22
	binutils-2_21_1:1.22
	sid-snapshot-20130901:1.22
	gdb_7_6_1-2013-08-30-release:1.22
	sid-snapshot-20130801:1.22
	sid-snapshot-20130701:1.22
	sid-snapshot-20130601:1.22
	sid-snapshot-20130501:1.22
	gdb_7_6-2013-04-26-release:1.22
	sid-snapshot-20130401:1.22
	binutils-2_23_2:1.22
	gdb_7_6-branch:1.22.0.20
	gdb_7_6-2013-03-12-branchpoint:1.22
	sid-snapshot-20130301:1.22
	sid-snapshot-20130201:1.22
	sid-snapshot-20130101:1.22
	sid-snapshot-20121201:1.22
	gdb_7_5_1-2012-11-29-release:1.22
	binutils-2_23_1:1.22
	sid-snapshot-20121101:1.22
	binutils-2_23:1.22
	sid-snapshot-20121001:1.22
	sid-snapshot-20120901:1.22
	gdb_7_5-2012-08-17-release:1.22
	sid-snapshot-20120801:1.22
	binutils-2_23-branch:1.22.0.18
	binutils-2_23-branchpoint:1.22
	gdb_7_5-branch:1.22.0.16
	gdb_7_5-2012-07-18-branchpoint:1.22
	sid-snapshot-20120701:1.22
	sid-snapshot-20120601:1.22
	sid-snapshot-20120501:1.22
	binutils-2_22_branch:1.22.0.14
	gdb_7_4_1-2012-04-26-release:1.22
	sid-snapshot-20120401:1.22
	sid-snapshot-20120301:1.22
	sid-snapshot-20120201:1.22
	gdb_7_4-2012-01-24-release:1.22
	sid-snapshot-20120101:1.22
	gdb_7_4-branch:1.22.0.12
	gdb_7_4-2011-12-13-branchpoint:1.22
	sid-snapshot-20111201:1.22
	binutils-2_22:1.22
	sid-snapshot-20111101:1.22
	sid-snapshot-20111001:1.22
	binutils-2_22-branch:1.22.0.10
	binutils-2_22-branchpoint:1.22
	gdb_7_3_1-2011-09-04-release:1.22
	sid-snapshot-20110901:1.22
	sid-snapshot-20110801:1.22
	gdb_7_3-2011-07-26-release:1.22
	sid-snapshot-20110701:1.22
	sid-snapshot-20110601:1.22
	sid-snapshot-20110501:1.22
	gdb_7_3-branch:1.22.0.8
	gdb_7_3-2011-04-01-branchpoint:1.22
	sid-snapshot-20110401:1.22
	sid-snapshot-20110301:1.22
	sid-snapshot-20110201:1.22
	sid-snapshot-20110101:1.22
	binutils-2_21:1.22
	sid-snapshot-20101201:1.22
	binutils-2_21-branch:1.22.0.6
	binutils-2_21-branchpoint:1.22
	sid-snapshot-20101101:1.22
	sid-snapshot-20101001:1.22
	binutils-2_20_1:1.20.2.2
	gdb_7_2-2010-09-02-release:1.22
	sid-snapshot-20100901:1.22
	sid-snapshot-20100801:1.22
	gdb_7_2-branch:1.22.0.4
	gdb_7_2-2010-07-07-branchpoint:1.22
	sid-snapshot-20100701:1.22
	sid-snapshot-20100601:1.22
	sid-snapshot-20100501:1.22
	sid-snapshot-20100401:1.22
	gdb_7_1-2010-03-18-release:1.22
	sid-snapshot-20100301:1.22
	gdb_7_1-branch:1.22.0.2
	gdb_7_1-2010-02-18-branchpoint:1.22
	sid-snapshot-20100201:1.22
	sid-snapshot-20100101:1.21
	gdb_7_0_1-2009-12-22-release:1.21
	sid-snapshot-20091201:1.21
	sid-snapshot-20091101:1.21
	binutils-2_20:1.20.2.1
	gdb_7_0-2009-10-06-release:1.21
	sid-snapshot-20091001:1.21
	gdb_7_0-branch:1.21.0.2
	gdb_7_0-2009-09-16-branchpoint:1.21
	arc-sim-20090309:1.19
	binutils-arc-20081103-branch:1.19.0.26
	binutils-arc-20081103-branchpoint:1.19
	binutils-2_20-branch:1.20.0.2
	binutils-2_20-branchpoint:1.20
	sid-snapshot-20090901:1.19
	sid-snapshot-20090801:1.19
	msnyder-checkpoint-072509-branch:1.19.0.24
	msnyder-checkpoint-072509-branchpoint:1.19
	sid-snapshot-20090701:1.19
	dje-cgen-play1-branch:1.19.0.22
	dje-cgen-play1-branchpoint:1.19
	sid-snapshot-20090601:1.19
	sid-snapshot-20090501:1.19
	sid-snapshot-20090401:1.19
	arc-20081103-branch:1.19.0.20
	arc-20081103-branchpoint:1.19
	arc-insight_6_8-branch:1.19.0.18
	arc-insight_6_8-branchpoint:1.19
	insight_6_8-branch:1.19.0.16
	insight_6_8-branchpoint:1.19
	sid-snapshot-20090301:1.19
	binutils-2_19_1:1.19
	sid-snapshot-20090201:1.19
	sid-snapshot-20090101:1.19
	reverse-20081226-branch:1.19.0.14
	reverse-20081226-branchpoint:1.19
	sid-snapshot-20081201:1.19
	multiprocess-20081120-branch:1.19.0.12
	multiprocess-20081120-branchpoint:1.19
	sid-snapshot-20081101:1.19
	binutils-2_19:1.19
	sid-snapshot-20081001:1.19
	reverse-20080930-branch:1.19.0.10
	reverse-20080930-branchpoint:1.19
	binutils-2_19-branch:1.19.0.8
	binutils-2_19-branchpoint:1.19
	sid-snapshot-20080901:1.19
	sid-snapshot-20080801:1.19
	reverse-20080717-branch:1.19.0.6
	reverse-20080717-branchpoint:1.19
	sid-snapshot-20080701:1.19
	msnyder-reverse-20080609-branch:1.19.0.4
	msnyder-reverse-20080609-branchpoint:1.19
	drow-reverse-20070409-branch:1.16.0.34
	drow-reverse-20070409-branchpoint:1.16
	sid-snapshot-20080601:1.19
	sid-snapshot-20080501:1.19
	sid-snapshot-20080403:1.19
	sid-snapshot-20080401:1.19
	gdb_6_8-2008-03-27-release:1.19
	sid-snapshot-20080301:1.19
	gdb_6_8-branch:1.19.0.2
	gdb_6_8-2008-02-26-branchpoint:1.19
	sid-snapshot-20080201:1.18
	sid-snapshot-20080101:1.18
	sid-snapshot-20071201:1.18
	sid-snapshot-20071101:1.18
	gdb_6_7_1-2007-10-29-release:1.18
	gdb_6_7-2007-10-10-release:1.18
	sid-snapshot-20071001:1.18
	gdb_6_7-branch:1.18.0.4
	gdb_6_7-2007-09-07-branchpoint:1.18
	binutils-2_18:1.18
	binutils-2_18-branch:1.18.0.2
	binutils-2_18-branchpoint:1.18
	insight_6_6-20070208-release:1.16
	binutils-csl-coldfire-4_1-32:1.16
	binutils-csl-sourcerygxx-4_1-32:1.16
	gdb_6_6-2006-12-18-release:1.16
	binutils-csl-innovasic-fido-3_4_4-33:1.16
	binutils-csl-sourcerygxx-3_4_4-32:1.13
	binutils-csl-coldfire-4_1-30:1.16
	binutils-csl-sourcerygxx-4_1-30:1.16
	binutils-csl-coldfire-4_1-28:1.16
	binutils-csl-sourcerygxx-4_1-29:1.16
	binutils-csl-sourcerygxx-4_1-28:1.16
	gdb_6_6-branch:1.16.0.32
	gdb_6_6-2006-11-15-branchpoint:1.16
	binutils-csl-arm-2006q3-27:1.16
	binutils-csl-sourcerygxx-4_1-27:1.16
	binutils-csl-arm-2006q3-26:1.16
	binutils-csl-sourcerygxx-4_1-26:1.16
	binutils-csl-sourcerygxx-4_1-25:1.16
	binutils-csl-sourcerygxx-4_1-24:1.16
	binutils-csl-sourcerygxx-4_1-23:1.16
	insight_6_5-20061003-release:1.16
	gdb-csl-symbian-6_4_50_20060226-12:1.16
	binutils-csl-sourcerygxx-4_1-21:1.16
	binutils-csl-arm-2006q3-21:1.16
	binutils-csl-sourcerygxx-4_1-22:1.16
	binutils-csl-palmsource-arm-prelinker-1_0-1:1.16
	binutils-csl-sourcerygxx-4_1-20:1.16
	binutils-csl-arm-2006q3-19:1.16
	binutils-csl-sourcerygxx-4_1-19:1.16
	binutils-csl-sourcerygxx-4_1-18:1.16
	binutils-csl-renesas-4_1-9:1.16
	gdb-csl-sourcerygxx-3_4_4-25:1.16
	binutils-csl-sourcerygxx-3_4_4-25:1.13
	nickrob-async-20060828-mergepoint:1.16
	gdb-csl-symbian-6_4_50_20060226-11:1.16
	binutils-csl-renesas-4_1-8:1.16
	binutils-csl-renesas-4_1-7:1.16
	binutils-csl-renesas-4_1-6:1.16
	gdb-csl-sourcerygxx-4_1-17:1.16
	binutils-csl-sourcerygxx-4_1-17:1.16
	gdb-csl-20060226-branch-local-2:1.16
	gdb-csl-sourcerygxx-4_1-14:1.16
	binutils-csl-sourcerygxx-4_1-14:1.16
	binutils-csl-sourcerygxx-4_1-15:1.16
	gdb-csl-sourcerygxx-4_1-13:1.16
	binutils-csl-sourcerygxx-4_1-13:1.16
	binutils-2_17:1.16
	gdb-csl-sourcerygxx-4_1-12:1.16
	binutils-csl-sourcerygxx-4_1-12:1.16
	gdb-csl-sourcerygxx-3_4_4-21:1.16
	binutils-csl-sourcerygxx-3_4_4-21:1.16
	gdb_6_5-20060621-release:1.16
	binutils-csl-wrs-linux-3_4_4-24:1.13
	binutils-csl-wrs-linux-3_4_4-23:1.13
	gdb-csl-sourcerygxx-4_1-9:1.16
	binutils-csl-sourcerygxx-4_1-9:1.16
	gdb-csl-sourcerygxx-4_1-8:1.16
	binutils-csl-sourcerygxx-4_1-8:1.16
	gdb-csl-sourcerygxx-4_1-7:1.16
	binutils-csl-sourcerygxx-4_1-7:1.16
	gdb-csl-arm-2006q1-6:1.16
	binutils-csl-arm-2006q1-6:1.16
	gdb-csl-sourcerygxx-4_1-6:1.16
	binutils-csl-sourcerygxx-4_1-6:1.16
	binutils-csl-wrs-linux-3_4_4-22:1.13
	gdb-csl-symbian-6_4_50_20060226-10:1.16
	gdb-csl-symbian-6_4_50_20060226-9:1.16
	gdb-csl-symbian-6_4_50_20060226-8:1.16
	gdb-csl-coldfire-4_1-11:1.16
	binutils-csl-coldfire-4_1-11:1.16
	gdb-csl-sourcerygxx-3_4_4-19:1.16
	binutils-csl-sourcerygxx-3_4_4-19:1.16
	gdb-csl-coldfire-4_1-10:1.16
	gdb_6_5-branch:1.16.0.30
	gdb_6_5-2006-05-14-branchpoint:1.16
	binutils-csl-coldfire-4_1-10:1.16
	gdb-csl-sourcerygxx-4_1-5:1.16
	binutils-csl-sourcerygxx-4_1-5:1.16
	nickrob-async-20060513-branch:1.16.0.28
	nickrob-async-20060513-branchpoint:1.16
	gdb-csl-sourcerygxx-4_1-4:1.16
	binutils-csl-sourcerygxx-4_1-4:1.16
	msnyder-reverse-20060502-branch:1.16.0.26
	msnyder-reverse-20060502-branchpoint:1.16
	binutils-csl-wrs-linux-3_4_4-21:1.13
	gdb-csl-morpho-4_1-4:1.16
	binutils-csl-morpho-4_1-4:1.16
	gdb-csl-sourcerygxx-3_4_4-17:1.16
	binutils-csl-sourcerygxx-3_4_4-17:1.16
	binutils-csl-wrs-linux-3_4_4-20:1.13
	readline_5_1-import-branch:1.16.0.24
	readline_5_1-import-branchpoint:1.16
	gdb-csl-20060226-branch-merge-to-csl-symbian-1:1.16
	binutils-2_17-branch:1.16.0.22
	binutils-2_17-branchpoint:1.16
	gdb-csl-symbian-20060226-branch:1.16.0.20
	gdb-csl-symbian-20060226-branchpoint:1.16
	gdb-csl-20060226-branch-merge-to-csl-local-1:1.16
	msnyder-reverse-20060331-branch:1.16.0.18
	msnyder-reverse-20060331-branchpoint:1.16
	binutils-csl-2_17-branch:1.16.0.16
	binutils-csl-2_17-branchpoint:1.16
	gdb-csl-available-20060303-branch:1.16.0.14
	gdb-csl-available-20060303-branchpoint:1.16
	gdb-csl-20060226-branch:1.16.0.12
	gdb-csl-20060226-branchpoint:1.16
	gdb_6_4-20051202-release:1.16
	msnyder-fork-checkpoint-branch:1.16.0.10
	msnyder-fork-checkpoint-branchpoint:1.16
	gdb-csl-gxxpro-6_3-branch:1.16.0.8
	gdb-csl-gxxpro-6_3-branchpoint:1.16
	gdb_6_4-branch:1.16.0.6
	gdb_6_4-2005-11-01-branchpoint:1.16
	gdb-csl-arm-20051020-branch:1.16.0.4
	gdb-csl-arm-20051020-branchpoint:1.16
	binutils-csl-gxxpro-3_4-branch:1.13.0.14
	binutils-csl-gxxpro-3_4-branchpoint:1.13
	binutils-2_16_1:1.13
	msnyder-tracepoint-checkpoint-branch:1.16.0.2
	msnyder-tracepoint-checkpoint-branchpoint:1.16
	gdb-csl-arm-20050325-2005-q1b:1.13
	binutils-csl-arm-2005q1b:1.13
	binutils-2_16:1.13
	gdb-csl-arm-20050325-2005-q1a:1.13
	binutils-csl-arm-2005q1a:1.13
	csl-arm-20050325-branch:1.13.0.12
	csl-arm-20050325-branchpoint:1.13
	binutils-csl-arm-2005q1-branch:1.13.0.10
	binutils-csl-arm-2005q1-branchpoint:1.13
	binutils-2_16-branch:1.13.0.8
	binutils-2_16-branchpoint:1.13
	csl-arm-2004-q3d:1.13
	gdb_6_3-20041109-release:1.13
	gdb_6_3-branch:1.13.0.4
	gdb_6_3-20041019-branchpoint:1.13
	csl-arm-2004-q3:1.13
	drow_intercu-merge-20040921:1.13
	drow_intercu-merge-20040915:1.13
	jimb-gdb_6_2-e500-branch:1.13.0.6
	jimb-gdb_6_2-e500-branchpoint:1.13
	gdb_6_2-20040730-release:1.13
	gdb_6_2-branch:1.13.0.2
	gdb_6_2-2004-07-10-gmt-branchpoint:1.13
	gdb_6_1_1-20040616-release:1.11
	binutils-2_15:1.11
	binutils-2_15-branchpoint:1.11
	csl-arm-2004-q1a:1.11
	csl-arm-2004-q1:1.11
	gdb_6_1-2004-04-05-release:1.11
	drow_intercu-merge-20040402:1.11
	drow_intercu-merge-20040327:1.11
	ezannoni_pie-20040323-branch:1.11.0.56
	ezannoni_pie-20040323-branchpoint:1.11
	cagney_tramp-20040321-mergepoint:1.11
	cagney_tramp-20040309-branch:1.11.0.54
	cagney_tramp-20040309-branchpoint:1.11
	gdb_6_1-branch:1.11.0.52
	gdb_6_1-2004-03-01-gmt-branchpoint:1.11
	drow_intercu-20040221-branch:1.11.0.50
	drow_intercu-20040221-branchpoint:1.11
	binutils-2_15-branch:1.11.0.48
	cagney_bfdfile-20040213-branch:1.11.0.46
	cagney_bfdfile-20040213-branchpoint:1.11
	drow-cplus-merge-20040208:1.11
	carlton_dictionary-20040126-merge:1.11
	cagney_bigcore-20040122-branch:1.11.0.44
	cagney_bigcore-20040122-branchpoint:1.11
	drow-cplus-merge-20040113:1.11
	csl-arm-2003-q4:1.11
	drow-cplus-merge-20031224:1.11
	drow-cplus-merge-20031220:1.11
	carlton_dictionary-20031215-merge:1.11
	drow-cplus-merge-20031214:1.11
	carlton-dictionary-20031111-merge:1.11
	gdb_6_0-2003-10-04-release:1.11
	kettenis_sparc-20030918-branch:1.11.0.42
	kettenis_sparc-20030918-branchpoint:1.11
	carlton_dictionary-20030917-merge:1.11
	ezannoni_pie-20030916-branchpoint:1.11
	ezannoni_pie-20030916-branch:1.11.0.40
	cagney_x86i386-20030821-branch:1.11.0.38
	cagney_x86i386-20030821-branchpoint:1.11
	carlton_dictionary-20030805-merge:1.11
	carlton_dictionary-20030627-merge:1.11
	gdb_6_0-branch:1.11.0.36
	gdb_6_0-2003-06-23-branchpoint:1.11
	jimb-ppc64-linux-20030613-branch:1.11.0.34
	jimb-ppc64-linux-20030613-branchpoint:1.11
	binutils-2_14:1.11
	cagney_convert-20030606-branch:1.11.0.32
	cagney_convert-20030606-branchpoint:1.11
	cagney_writestrings-20030508-branch:1.11.0.30
	cagney_writestrings-20030508-branchpoint:1.11
	jimb-ppc64-linux-20030528-branch:1.11.0.28
	jimb-ppc64-linux-20030528-branchpoint:1.11
	carlton_dictionary-20030523-merge:1.11
	cagney_fileio-20030521-branch:1.11.0.26
	cagney_fileio-20030521-branchpoint:1.11
	kettenis_i386newframe-20030517-mergepoint:1.11
	jimb-ppc64-linux-20030509-branch:1.11.0.24
	jimb-ppc64-linux-20030509-branchpoint:1.11
	kettenis_i386newframe-20030504-mergepoint:1.11
	carlton_dictionary-20030430-merge:1.11
	binutils-2_14-branch:1.11.0.22
	binutils-2_14-branchpoint:1.11
	kettenis_i386newframe-20030419-branch:1.11.0.20
	kettenis_i386newframe-20030419-branchpoint:1.11
	carlton_dictionary-20030416-merge:1.11
	cagney_frameaddr-20030409-mergepoint:1.11
	kettenis_i386newframe-20030406-branch:1.11.0.18
	kettenis_i386newframe-20030406-branchpoint:1.11
	cagney_frameaddr-20030403-branchpoint:1.11
	cagney_frameaddr-20030403-branch:1.11.0.16
	cagney_framebase-20030330-mergepoint:1.11
	cagney_framebase-20030326-branch:1.11.0.14
	cagney_framebase-20030326-branchpoint:1.11
	cagney_lazyid-20030317-branch:1.11.0.12
	cagney_lazyid-20030317-branchpoint:1.11
	kettenis-i386newframe-20030316-mergepoint:1.11
	offbyone-20030313-branch:1.11.0.10
	offbyone-20030313-branchpoint:1.11
	kettenis-i386newframe-20030308-branch:1.11.0.8
	kettenis-i386newframe-20030308-branchpoint:1.11
	carlton_dictionary-20030305-merge:1.11
	cagney_offbyone-20030303-branch:1.11.0.6
	cagney_offbyone-20030303-branchpoint:1.11
	carlton_dictionary-20030207-merge:1.11
	interps-20030202-branch:1.11.0.4
	interps-20030202-branchpoint:1.11
	cagney-unwind-20030108-branch:1.11.0.2
	cagney-unwind-20030108-branchpoint:1.11
	binutils-2_13_2_1:1.10
	binutils-2_13_2:1.10
	carlton_dictionary-20021223-merge:1.11
	gdb_5_3-2002-12-12-release:1.10
	carlton_dictionary-20021115-merge:1.10
	binutils-2_13_1:1.10
	kseitz_interps-20021105-merge:1.10
	kseitz_interps-20021103-merge:1.10
	drow-cplus-merge-20021020:1.10
	drow-cplus-merge-20021025:1.10
	carlton_dictionary-20021025-merge:1.10
	carlton_dictionary-20021011-merge:1.10
	drow-cplus-branch:1.10.0.24
	drow-cplus-branchpoint:1.10
	kseitz_interps-20020930-merge:1.10
	carlton_dictionary-20020927-merge:1.10
	carlton_dictionary-branch:1.10.0.22
	carlton_dictionary-20020920-branchpoint:1.10
	sid-20020905-branchpoint:1.10
	sid-20020905-branch:1.10.0.20
	gdb_5_3-branch:1.10.0.18
	gdb_5_3-2002-09-04-branchpoint:1.10
	kseitz_interps-20020829-merge:1.10
	cagney_sysregs-20020825-branch:1.10.0.16
	cagney_sysregs-20020825-branchpoint:1.10
	readline_4_3-import-branch:1.10.0.14
	readline_4_3-import-branchpoint:1.10
	binutils-2_13:1.10
	gdb_5_2_1-2002-07-23-release:1.10
	binutils-2_13-branchpoint:1.10
	binutils-2_13-branch:1.10.0.12
	kseitz_interps-20020528-branch:1.10.0.10
	kseitz_interps-20020528-branchpoint:1.10
	cagney_regbuf-20020515-branch:1.10.0.8
	cagney_regbuf-20020515-branchpoint:1.10
	binutils-2_12_1:1.10
	jimb-macro-020506-branch:1.10.0.6
	jimb-macro-020506-branchpoint:1.10
	gdb_5_2-2002-04-29-release:1.10
	binutils-2_12:1.10
	gdb_5_2-branch:1.10.0.4
	gdb_5_2-2002-03-03-branchpoint:1.10
	binutils-2_12-branch:1.10.0.2
	binutils-2_12-branchpoint:1.10
	gdb_5_1_1-2002-01-24-release:1.7
	gdb_5_1_0_1-2002-01-03-release:1.7
	cygnus_cvs_20020108_pre:1.10
	gdb_5_1_0_1-2002-01-03-branch:1.7.0.6
	gdb_5_1_0_1-2002-01-03-branchpoint:1.7
	gdb_5_1-2001-11-21-release:1.7
	gdb_s390-2001-09-26-branch:1.7.0.4
	gdb_s390-2001-09-26-branchpoint:1.7
	gdb_5_1-2001-07-29-branch:1.7.0.2
	gdb_5_1-2001-07-29-branchpoint:1.7
	binutils-2_11_2:1.6.2.1
	binutils-2_11_1:1.6.2.1
	binutils-2_11:1.6
	x86_64versiong3:1.6
	binutils-2_11-branch:1.6.0.2
	insight-precleanup-2001-01-01:1.6
	binutils-2_10_1:1.4
	binutils-2_10:1.4
	gdb-premipsmulti-2000-06-06-branch:1.4.0.6
	gdb-premipsmulti-2000-06-06-branchpoint:1.4
	gdb_5_0-2000-05-19-release:1.4
	gdb_4_18_2-2000-05-18-release:1.4
	gdb_4_95_1-2000-05-11-snapshot:1.4
	gdb_4_95_0-2000-04-27-snapshot:1.4
	gdb_5_0-2000-04-10-branch:1.4.0.4
	gdb_5_0-2000-04-10-branchpoint:1.4
	binutils-2_10-branch:1.4.0.2
	binutils-2_10-branchpoint:1.4
	binutils_latest_snapshot:1.22
	repo-unification-2000-02-06:1.4
	binu_ss_19990721:1.3
	binu_ss_19990602:1.1.1.1
	binu_ss_19990502:1.1.1.1
	cygnus:1.1.1;
locks; strict;
comment	@ * @;


1.22
date	2010.01.11.09.53.27;	author amodra;	state Exp;
branches;
next	1.21;

1.21
date	2009.09.09.21.38.57;	author nickc;	state Exp;
branches;
next	1.20;

1.20
date	2009.09.02.07.18.36;	author amodra;	state Exp;
branches
	1.20.2.1;
next	1.19;

1.19
date	2008.02.14.13.02.38;	author nathan;	state Exp;
branches;
next	1.18;

1.18
date	2007.07.03.14.26.40;	author nickc;	state Exp;
branches;
next	1.17;

1.17
date	2007.04.26.14.46.56;	author amodra;	state Exp;
branches;
next	1.16;

1.16
date	2005.05.04.15.53.06;	author nickc;	state Exp;
branches;
next	1.15;

1.15
date	2005.05.04.07.19.21;	author nickc;	state Exp;
branches;
next	1.14;

1.14
date	2005.04.11.08.23.01;	author nickc;	state Exp;
branches;
next	1.13;

1.13
date	2004.06.24.04.46.16;	author amodra;	state Exp;
branches;
next	1.12;

1.12
date	2004.06.15.01.24.22;	author amodra;	state Exp;
branches;
next	1.11;

1.11
date	2002.11.30.08.39.36;	author amodra;	state Exp;
branches
	1.11.50.1;
next	1.10;

1.10
date	2001.09.18.09.57.22;	author amodra;	state Exp;
branches
	1.10.22.1
	1.10.24.1;
next	1.9;

1.9
date	2001.09.17.15.13.13;	author hjl;	state Exp;
branches;
next	1.8;

1.8
date	2001.08.09.14.38.04;	author amodra;	state Exp;
branches;
next	1.7;

1.7
date	2001.05.11.09.55.02;	author nickc;	state Exp;
branches;
next	1.6;

1.6
date	2000.11.16.19.29.48;	author kazu;	state Exp;
branches
	1.6.2.1;
next	1.5;

1.5
date	2000.07.10.05.14.13;	author amodra;	state Exp;
branches;
next	1.4;

1.4
date	99.10.18.12.45.21;	author aph;	state Exp;
branches;
next	1.3;

1.3
date	99.07.11.19.49.29;	author ian;	state Exp;
branches;
next	1.2;

1.2
date	99.06.17.13.26.08;	author amylaar;	state Exp;
branches;
next	1.1;

1.1
date	99.05.03.07.28.55;	author rth;	state Exp;
branches
	1.1.1.1;
next	;

1.20.2.1
date	2009.09.09.21.40.18;	author nickc;	state Exp;
branches;
next	1.20.2.2;

1.20.2.2
date	2010.01.11.09.53.51;	author amodra;	state Exp;
branches;
next	;

1.11.50.1
date	2004.09.16.17.00.18;	author drow;	state Exp;
branches;
next	;

1.10.22.1
date	2002.12.23.19.37.35;	author carlton;	state Exp;
branches;
next	;

1.10.24.1
date	2003.12.14.20.26.37;	author drow;	state Exp;
branches;
next	;

1.6.2.1
date	2001.06.11.10.04.08;	author amodra;	state Exp;
branches;
next	;

1.1.1.1
date	99.05.03.07.28.55;	author rth;	state Exp;
branches;
next	;


desc
@@


1.22
log
@	PR 11103
	* dwarf1.c (parse_die): Correct FORM_STRING data pointer increment.
@
text
@/* DWARF 1 find nearest line (_bfd_dwarf1_find_nearest_line).
   Copyright 1998, 1999, 2000, 2001, 2002, 2004, 2005, 2007, 2008, 2009, 2010
   Free Software Foundation, Inc.

   Written by Gavin Romig-Koch of Cygnus Solutions (gavin@@cygnus.com).

   This file is part of BFD.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 3 of the License, or (at
   your option) any later version.

   This program is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,
   MA 02110-1301, USA.  */

#include "sysdep.h"
#include "bfd.h"
#include "libiberty.h"
#include "libbfd.h"
#include "elf-bfd.h"
#include "elf/dwarf.h"

/* dwarf1_debug is the starting point for all dwarf1 info.  */

struct dwarf1_debug
{
  /* The bfd we are working with.  */
  bfd* abfd;

  /* Pointer to the symbol table.  */
  asymbol** syms;

  /* List of already parsed compilation units.  */
  struct dwarf1_unit* lastUnit;

  /* The buffer for the .debug section.
     Zero indicates that the .debug section failed to load.  */
  bfd_byte *debug_section;

  /* Pointer to the end of the .debug_info section memory buffer.  */
  bfd_byte *debug_section_end;

  /* The buffer for the .line section.  */
  bfd_byte *line_section;

  /* End of that buffer.  */
  bfd_byte *line_section_end;

  /* The current or next unread die within the .debug section.  */
  bfd_byte *currentDie;
};

/* One dwarf1_unit for each parsed compilation unit die.  */

struct dwarf1_unit
{
  /* Linked starting from stash->lastUnit.  */
  struct dwarf1_unit* prev;

  /* Name of the compilation unit.  */
  char *name;

  /* The highest and lowest address used in the compilation unit.  */
  unsigned long low_pc;
  unsigned long high_pc;

  /* Does this unit have a statement list?  */
  int has_stmt_list;

  /* If any, the offset of the line number table in the .line section.  */
  unsigned long stmt_list_offset;

  /* If non-zero, a pointer to the first child of this unit.  */
  bfd_byte *first_child;

  /* How many line entries?  */
  unsigned long line_count;

  /* The decoded line number table (line_count entries).  */
  struct linenumber* linenumber_table;

  /* The list of functions in this unit.  */
  struct dwarf1_func* func_list;
};

/* One dwarf1_func for each parsed function die.  */

struct dwarf1_func
{
  /* Linked starting from aUnit->func_list.  */
  struct dwarf1_func* prev;

  /* Name of function.  */
  char* name;

  /* The highest and lowest address used in the compilation unit.  */
  unsigned long low_pc;
  unsigned long high_pc;
};

/* Used to return info about a parsed die.  */
struct die_info
{
  unsigned long length;
  unsigned long sibling;
  unsigned long low_pc;
  unsigned long high_pc;
  unsigned long stmt_list_offset;

  char* name;

  int has_stmt_list;

  unsigned short tag;
};

/* Parsed line number information.  */
struct linenumber
{
  /* First address in the line.  */
  unsigned long addr;

  /* The line number.  */
  unsigned long linenumber;
};

/* Find the form of an attr, from the attr field.  */
#define FORM_FROM_ATTR(attr)	((attr) & 0xF)	/* Implicitly specified.  */

/* Return a newly allocated dwarf1_unit.  It should be cleared and
   then attached into the 'stash' at 'stash->lastUnit'.  */

static struct dwarf1_unit*
alloc_dwarf1_unit (struct dwarf1_debug* stash)
{
  bfd_size_type amt = sizeof (struct dwarf1_unit);

  struct dwarf1_unit* x = (struct dwarf1_unit *) bfd_zalloc (stash->abfd, amt);
  if (x)
    {
      x->prev = stash->lastUnit;
      stash->lastUnit = x;
    }

  return x;
}

/* Return a newly allocated dwarf1_func.  It must be cleared and
   attached into 'aUnit' at 'aUnit->func_list'.  */

static struct dwarf1_func *
alloc_dwarf1_func (struct dwarf1_debug* stash, struct dwarf1_unit* aUnit)
{
  bfd_size_type amt = sizeof (struct dwarf1_func);

  struct dwarf1_func* x = (struct dwarf1_func *) bfd_zalloc (stash->abfd, amt);
  if (x)
    {
      x->prev = aUnit->func_list;
      aUnit->func_list = x;
    }

  return x;
}

/* parse_die - parse a Dwarf1 die.
   Parse the die starting at 'aDiePtr' into 'aDieInfo'.
   'abfd' must be the bfd from which the section that 'aDiePtr'
   points to was pulled from.

   Return FALSE if the die is invalidly formatted; TRUE otherwise.  */

static bfd_boolean
parse_die (bfd *             abfd,
	   struct die_info * aDieInfo,
	   bfd_byte *        aDiePtr,
	   bfd_byte *        aDiePtrEnd)
{
  bfd_byte *this_die = aDiePtr;
  bfd_byte *xptr = this_die;

  memset (aDieInfo, 0, sizeof (* aDieInfo));

  /* First comes the length.  */
  aDieInfo->length = bfd_get_32 (abfd, (bfd_byte *) xptr);
  xptr += 4;
  if (aDieInfo->length == 0
      || (this_die + aDieInfo->length) >= aDiePtrEnd)
    return FALSE;
  if (aDieInfo->length < 6)
    {
      /* Just padding bytes.  */
      aDieInfo->tag = TAG_padding;
      return TRUE;
    }

  /* Then the tag.  */
  aDieInfo->tag = bfd_get_16 (abfd, (bfd_byte *) xptr);
  xptr += 2;

  /* Then the attributes.  */
  while (xptr < (this_die + aDieInfo->length))
    {
      unsigned short attr;

      /* Parse the attribute based on its form.  This section
         must handle all dwarf1 forms, but need only handle the
	 actual attributes that we care about.  */
      attr = bfd_get_16 (abfd, (bfd_byte *) xptr);
      xptr += 2;

      switch (FORM_FROM_ATTR (attr))
	{
	case FORM_DATA2:
	  xptr += 2;
	  break;
	case FORM_DATA4:
	case FORM_REF:
	  if (attr == AT_sibling)
	    aDieInfo->sibling = bfd_get_32 (abfd, (bfd_byte *) xptr);
	  else if (attr == AT_stmt_list)
	    {
	      aDieInfo->stmt_list_offset = bfd_get_32 (abfd, (bfd_byte *) xptr);
	      aDieInfo->has_stmt_list = 1;
	    }
	  xptr += 4;
	  break;
	case FORM_DATA8:
	  xptr += 8;
	  break;
	case FORM_ADDR:
	  if (attr == AT_low_pc)
	    aDieInfo->low_pc = bfd_get_32 (abfd, (bfd_byte *) xptr);
	  else if (attr == AT_high_pc)
	    aDieInfo->high_pc = bfd_get_32 (abfd, (bfd_byte *) xptr);
	  xptr += 4;
	  break;
	case FORM_BLOCK2:
	  xptr += 2 + bfd_get_16 (abfd, (bfd_byte *) xptr);
	  break;
	case FORM_BLOCK4:
	  xptr += 4 + bfd_get_32 (abfd, (bfd_byte *) xptr);
	  break;
	case FORM_STRING:
	  if (attr == AT_name)
	    aDieInfo->name = (char *) xptr;
	  xptr += strlen ((char *) xptr) + 1;
	  break;
	}
    }

  return TRUE;
}

/* Parse a dwarf1 line number table for 'aUnit->stmt_list_offset'
   into 'aUnit->linenumber_table'.  Return FALSE if an error
   occurs; TRUE otherwise.  */

static bfd_boolean
parse_line_table (struct dwarf1_debug* stash, struct dwarf1_unit* aUnit)
{
  bfd_byte *xptr;

  /* Load the ".line" section from the bfd if we haven't already.  */
  if (stash->line_section == 0)
    {
      asection *msec;
      bfd_size_type size;

      msec = bfd_get_section_by_name (stash->abfd, ".line");
      if (! msec)
	return FALSE;

      size = msec->rawsize ? msec->rawsize : msec->size;
      stash->line_section
	= bfd_simple_get_relocated_section_contents
	(stash->abfd, msec, NULL, stash->syms);

      if (! stash->line_section)
	return FALSE;

      stash->line_section_end = stash->line_section + size;
    }

  xptr = stash->line_section + aUnit->stmt_list_offset;
  if (xptr < stash->line_section_end)
    {
      unsigned long eachLine;
      bfd_byte *tblend;
      unsigned long base;
      bfd_size_type amt;

      /* First comes the length.  */
      tblend = bfd_get_32 (stash->abfd, (bfd_byte *) xptr) + xptr;
      xptr += 4;

      /* Then the base address for each address in the table.  */
      base = bfd_get_32 (stash->abfd, (bfd_byte *) xptr);
      xptr += 4;

      /* How many line entrys?
	 10 = 4 (line number) + 2 (pos in line) + 4 (address in line).  */
      aUnit->line_count = (tblend - xptr) / 10;

      /* Allocate an array for the entries.  */
      amt = sizeof (struct linenumber) * aUnit->line_count;
      aUnit->linenumber_table = (struct linenumber *) bfd_alloc (stash->abfd,
                                                                 amt);
      if (!aUnit->linenumber_table)
	return FALSE;

      for (eachLine = 0; eachLine < aUnit->line_count; eachLine++)
	{
	  /* A line number.  */
	  aUnit->linenumber_table[eachLine].linenumber
	    = bfd_get_32 (stash->abfd, (bfd_byte *) xptr);
	  xptr += 4;

	  /* Skip the position within the line.  */
	  xptr += 2;

	  /* And finally the address.  */
	  aUnit->linenumber_table[eachLine].addr
	    = base + bfd_get_32 (stash->abfd, (bfd_byte *) xptr);
	  xptr += 4;
	}
    }

  return TRUE;
}

/* Parse each function die in a compilation unit 'aUnit'.
   The first child die of 'aUnit' should be in 'aUnit->first_child',
   the result is placed in 'aUnit->func_list'.
   Return FALSE if error; TRUE otherwise.  */

static bfd_boolean
parse_functions_in_unit (struct dwarf1_debug* stash, struct dwarf1_unit* aUnit)
{
  bfd_byte *eachDie;

  if (aUnit->first_child)
    for (eachDie = aUnit->first_child;
 	 eachDie < stash->debug_section_end;
	 )
      {
	struct die_info eachDieInfo;

	if (! parse_die (stash->abfd, &eachDieInfo, eachDie,
			 stash->debug_section_end))
	  return FALSE;

	if (eachDieInfo.tag == TAG_global_subroutine
	    || eachDieInfo.tag == TAG_subroutine
	    || eachDieInfo.tag == TAG_inlined_subroutine
	    || eachDieInfo.tag == TAG_entry_point)
	  {
	    struct dwarf1_func* aFunc = alloc_dwarf1_func (stash,aUnit);
	    if (!aFunc)
	      return FALSE;

	    aFunc->name = eachDieInfo.name;
	    aFunc->low_pc = eachDieInfo.low_pc;
	    aFunc->high_pc = eachDieInfo.high_pc;
	  }

	/* Move to next sibling, if none, end loop */
	if (eachDieInfo.sibling)
	  eachDie = stash->debug_section + eachDieInfo.sibling;
	else
	  break;
      }

  return TRUE;
}

/* Find the nearest line to 'addr' in 'aUnit'.
   Return whether we found the line (or a function) without error.  */

static bfd_boolean
dwarf1_unit_find_nearest_line (struct dwarf1_debug* stash,
			       struct dwarf1_unit* aUnit,
			       unsigned long addr,
			       const char **filename_ptr,
			       const char **functionname_ptr,
			       unsigned int *linenumber_ptr)
{
  int line_p = FALSE;
  int func_p = FALSE;

  if (aUnit->low_pc <= addr && addr < aUnit->high_pc)
    {
      if (aUnit->has_stmt_list)
	{
	  unsigned long i;
	  struct dwarf1_func* eachFunc;

	  if (! aUnit->linenumber_table)
	    {
	      if (! parse_line_table (stash, aUnit))
		return FALSE;
	    }

	  if (! aUnit->func_list)
	    {
	      if (! parse_functions_in_unit (stash, aUnit))
		return FALSE;
	    }

	  for (i = 0; i < aUnit->line_count; i++)
	    {
	      if (aUnit->linenumber_table[i].addr <= addr
		  && addr < aUnit->linenumber_table[i+1].addr)
		{
		  *filename_ptr = aUnit->name;
		  *linenumber_ptr = aUnit->linenumber_table[i].linenumber;
		  line_p = TRUE;
		  break;
		}
	    }

	  for (eachFunc = aUnit->func_list;
	       eachFunc;
	       eachFunc = eachFunc->prev)
	    {
	      if (eachFunc->low_pc <= addr
		  && addr < eachFunc->high_pc)
		{
		  *functionname_ptr = eachFunc->name;
		  func_p = TRUE;
		  break;
		}
	    }
	}
    }

  return line_p || func_p;
}

/* The DWARF 1 version of find_nearest line.
   Return TRUE if the line is found without error.  */

bfd_boolean
_bfd_dwarf1_find_nearest_line (bfd *abfd,
			       asection *section,
			       asymbol **symbols,
			       bfd_vma offset,
			       const char **filename_ptr,
			       const char **functionname_ptr,
			       unsigned int *linenumber_ptr)
{
  struct dwarf1_debug *stash = elf_tdata (abfd)->dwarf1_find_line_info;

  struct dwarf1_unit* eachUnit;

  /* What address are we looking for? */
  unsigned long addr = (unsigned long)(offset + section->vma);

  *filename_ptr = NULL;
  *functionname_ptr = NULL;
  *linenumber_ptr = 0;

  if (! stash)
    {
      asection *msec;
      bfd_size_type size = sizeof (struct dwarf1_debug);

      stash = elf_tdata (abfd)->dwarf1_find_line_info
	= (struct dwarf1_debug *) bfd_zalloc (abfd, size);

      if (! stash)
	return FALSE;

      msec = bfd_get_section_by_name (abfd, ".debug");
      if (! msec)
	/* No dwarf1 info.  Note that at this point the stash
	   has been allocated, but contains zeros, this lets
	   future calls to this function fail quicker.  */
	return FALSE;

      size = msec->rawsize ? msec->rawsize : msec->size;
      stash->debug_section
	= bfd_simple_get_relocated_section_contents (abfd, msec, NULL,
						     symbols);

      if (! stash->debug_section)
	return FALSE;

      stash->debug_section_end = stash->debug_section + size;
      stash->currentDie = stash->debug_section;
      stash->abfd = abfd;
      stash->syms = symbols;
    }

  /* A null debug_section indicates that there was no dwarf1 info
     or that an error occured while setting up the stash.  */

  if (! stash->debug_section)
    return FALSE;

  /* Look at the previously parsed units to see if any contain
     the addr.  */
  for (eachUnit = stash->lastUnit; eachUnit; eachUnit = eachUnit->prev)
    if (eachUnit->low_pc <= addr && addr < eachUnit->high_pc)
      return dwarf1_unit_find_nearest_line (stash, eachUnit, addr,
					    filename_ptr,
					    functionname_ptr,
					    linenumber_ptr);

  while (stash->currentDie < stash->debug_section_end)
    {
      struct die_info aDieInfo;

      if (! parse_die (stash->abfd, &aDieInfo, stash->currentDie,
		       stash->debug_section_end))
	return FALSE;

      if (aDieInfo.tag == TAG_compile_unit)
	{
	  struct dwarf1_unit* aUnit
	    = alloc_dwarf1_unit (stash);
	  if (!aUnit)
	    return FALSE;

	  aUnit->name = aDieInfo.name;
	  aUnit->low_pc = aDieInfo.low_pc;
	  aUnit->high_pc = aDieInfo.high_pc;
	  aUnit->has_stmt_list = aDieInfo.has_stmt_list;
	  aUnit->stmt_list_offset = aDieInfo.stmt_list_offset;

	  /* A die has a child if it's followed by a die that is
	     not it's sibling.  */
	  if (aDieInfo.sibling
	      && stash->currentDie + aDieInfo.length
                    < stash->debug_section_end
	      && stash->currentDie + aDieInfo.length
	            != stash->debug_section + aDieInfo.sibling)
	    aUnit->first_child = stash->currentDie + aDieInfo.length;
	  else
	    aUnit->first_child = 0;

	  if (aUnit->low_pc <= addr && addr < aUnit->high_pc)
	    return dwarf1_unit_find_nearest_line (stash, aUnit, addr,
						  filename_ptr,
						  functionname_ptr,
						  linenumber_ptr);
	}

      if (aDieInfo.sibling != 0)
	stash->currentDie = stash->debug_section + aDieInfo.sibling;
      else
	stash->currentDie += aDieInfo.length;
    }

  return FALSE;
}
@


1.21
log
@        Updated soruces in bfd/* to compile cleanly with -Wc++-compat.

        * bfd/aoutx.h: Add casts.
        * bfd/archive.c: Add casts.
        * bfd/archive64.c: Add casts.
        * bfd/archures.c: Add casts.
        * bfd/bfd-in2.h: Regenerated.
        * bfd/bfd.c: Add casts. (enum bfd_direction): Move out to top
        level.
        * bfd/bfdio.c: Add casts.
        * bfd/binary.c: Add casts.
        * bfd/cache.c (cache_bseek,cache_bread_1,cache_bwrite): Updated
        parameter to use enum value instead of int.
        * bfd/coffcode.h: Add casts.
        * bfd/coffgen.c: Add casts.
        * bfd/cofflink.c: Add casts.
        * bfd/compress.c: Add casts.
        * bfd/dwarf1.c: Add casts.
        * bfd/dwarf2.c: Add casts. (struct dwarf2_debug): Rename member
        bfd to bfd_ptr. Update code to use new name.
        * bfd/elf-attrs.c: Add casts.
        * bfd/elf-bfd.h (elf_link_virtual_table_entry): Gives name to
        anonymous struct. (union gotplt_union, struct
        elf_link_virtual_table_entry): Move to top level.
        * bfd/elf-eh-frame.c: Add casts.
        * bfd/elf-strtab.c: Add casts.
        * bfd/elf.c: Add casts. (_bfd_elm_make_Section_from_phdr): Change
        argument name from typename to type_name.
        * bfd/elf32-i386.c: Add casts.
        * bfd/elf64-x86-64.c: Add casts.
        * bfd/elfcode.h: Add casts.
        * bfd/elfcore.h: Add casts.
        * bfd/elflink.c: Add casts.
        * bfd/format.c: Add casts.
        * bfd/hash.c: Add casts.
        * bfd/ihex.c: Add casts.
        * bfd/libaout.h (enum aout_subformat, enum aout_magic): Move to
        top level.
        * bfd/libbfd.c: Add casts.
        * bfd/linker.c: Add casts.
        * bfd/merge.c: Add casts.
        * bfd/opncls.c: Add casts.
        * bfd/peXXigen.c: Add casts.
        * bfd/peicode.h: Add casts.
        * bfd/reloc.c: Add casts.
        * bfd/section.c: Add casts.
        * bfd/simple.c: Add casts.
        * bfd/srec.c: Add casts.
        * bfd/stabs.c: Add casts.
        * bfd/syms.c: Add casts.
        * bfd/targets.c: Add casts.
        * bfd/tekhex.c: Add casts.
        * bfd/verilog.c: Add casts.
        * include/bfdlink.h (struct bfd_link_hash_common_entry): Move to
        top level.
@
text
@d2 1
a2 1
   Copyright 1998, 1999, 2000, 2001, 2002, 2004, 2005, 2007, 2008
d254 2
a255 2
	    aDieInfo->name = (char *)xptr;
	  xptr += strlen (aDieInfo->name) + 1;
@


1.20
log
@update copyright dates
@
text
@d146 1
a146 1
  struct dwarf1_unit* x = bfd_zalloc (stash->abfd, amt);
d164 1
a164 1
  struct dwarf1_func* x = bfd_zalloc (stash->abfd, amt);
d315 2
a316 1
      aUnit->linenumber_table = bfd_alloc (stash->abfd, amt);
d477 1
a477 1
	= bfd_zalloc (abfd, size);
@


1.20.2.1
log
@        Updated soruces in bfd/* to compile cleanly with -Wc++-compat.

        * bfd/aoutx.h: Add casts.
        * bfd/archive.c: Add casts.
        * bfd/archive64.c: Add casts.
        * bfd/archures.c: Add casts.
        * bfd/bfd-in2.h: Regenerated.
        * bfd/bfd.c: Add casts. (enum bfd_direction): Move out to top
        level.
        * bfd/bfdio.c: Add casts.
        * bfd/binary.c: Add casts.
        * bfd/cache.c (cache_bseek,cache_bread_1,cache_bwrite): Updated
        parameter to use enum value instead of int.
        * bfd/coffcode.h: Add casts.
        * bfd/coffgen.c: Add casts.
        * bfd/cofflink.c: Add casts.
        * bfd/compress.c: Add casts.
        * bfd/dwarf1.c: Add casts.
        * bfd/dwarf2.c: Add casts. (struct dwarf2_debug): Rename member
        bfd to bfd_ptr. Update code to use new name.
        * bfd/elf-attrs.c: Add casts.
        * bfd/elf-bfd.h (elf_link_virtual_table_entry): Gives name to
        anonymous struct. (union gotplt_union, struct
        elf_link_virtual_table_entry): Move to top level.
        * bfd/elf-eh-frame.c: Add casts.
        * bfd/elf-strtab.c: Add casts.
        * bfd/elf.c: Add casts. (_bfd_elm_make_Section_from_phdr): Change
        argument name from typename to type_name.
        * bfd/elf32-i386.c: Add casts.
        * bfd/elf64-x86-64.c: Add casts.
        * bfd/elfcode.h: Add casts.
        * bfd/elfcore.h: Add casts.
        * bfd/elflink.c: Add casts.
        * bfd/format.c: Add casts.
        * bfd/hash.c: Add casts.
        * bfd/ihex.c: Add casts.
        * bfd/libaout.h (enum aout_subformat, enum aout_magic): Move to
        top level.
        * bfd/libbfd.c: Add casts.
        * bfd/linker.c: Add casts.
        * bfd/merge.c: Add casts.
        * bfd/opncls.c: Add casts.
        * bfd/peXXigen.c: Add casts.
        * bfd/peicode.h: Add casts.
        * bfd/reloc.c: Add casts.
        * bfd/section.c: Add casts.
        * bfd/simple.c: Add casts.
        * bfd/srec.c: Add casts.
        * bfd/stabs.c: Add casts.
        * bfd/syms.c: Add casts.
        * bfd/targets.c: Add casts.
        * bfd/tekhex.c: Add casts.
        * bfd/verilog.c: Add casts.
        * include/bfdlink.h (struct bfd_link_hash_common_entry): Move to
        top level.
@
text
@d146 1
a146 1
  struct dwarf1_unit* x = (struct dwarf1_unit *) bfd_zalloc (stash->abfd, amt);
d164 1
a164 1
  struct dwarf1_func* x = (struct dwarf1_func *) bfd_zalloc (stash->abfd, amt);
d315 1
a315 2
      aUnit->linenumber_table = (struct linenumber *) bfd_alloc (stash->abfd,
                                                                 amt);
d476 1
a476 1
	= (struct dwarf1_debug *) bfd_zalloc (abfd, size);
@


1.20.2.2
log
@	PR 11103
	* dwarf1.c (parse_die): Correct FORM_STRING data pointer increment.
@
text
@d2 1
a2 1
   Copyright 1998, 1999, 2000, 2001, 2002, 2004, 2005, 2007, 2008, 2009, 2010
d254 2
a255 2
	    aDieInfo->name = (char *) xptr;
	  xptr += strlen ((char *) xptr) + 1;
@


1.19
log
@	* dwarf1.c (struct dwarf1_debug): Add syms member.
	(alloc_dwarf1_unit, alloc_dwarf1_func): Check for out of memory.
	(parse_line_table, _bfd_dwarf1_find_nearest_line): Relocate
	section contents, check for out of memory.

	* dwarf1.c (struct dwarf1_debug): Change data pointers to bfd_byte.
	(parse_die): Change data pointers to bfd_byte.
	(parse_line_table, parse_functions_in_unit): Likewise.
@
text
@d2 1
a2 1
   Copyright 1998, 1999, 2000, 2001, 2002, 2004, 2005, 2007
@


1.18
log
@Switch sources over to use the GPL version 3
@
text
@d38 3
d46 1
a46 1
  char* debug_section;
d49 1
a49 1
  char* debug_section_end;
d52 1
a52 1
  char* line_section;
d55 1
a55 1
  char* line_section_end;
d58 1
a58 1
  char* currentDie;
d69 1
a69 1
  char* name;
d82 1
a82 1
  char* first_child;
d147 5
a151 2
  x->prev = stash->lastUnit;
  stash->lastUnit = x;
d165 5
a169 2
  x->prev = aUnit->func_list;
  aUnit->func_list = x;
d184 2
a185 2
	   char *            aDiePtr,
	   char *            aDiePtrEnd)
d187 2
a188 2
  char* this_die = aDiePtr;
  char* xptr = this_die;
d254 2
a255 2
	    aDieInfo->name = xptr;
	  xptr += strlen (xptr) + 1;
d270 1
a270 1
  char* xptr;
d283 3
a285 1
      stash->line_section = bfd_alloc (stash->abfd, size);
a289 7
      if (! bfd_get_section_contents (stash->abfd, msec, stash->line_section,
				      0, size))
	{
	  stash->line_section = 0;
	  return FALSE;
	}

d297 1
a297 1
      char *tblend;
d316 2
d347 1
a347 1
  char* eachDie;
d366 2
d453 1
a453 1
			       asymbol **symbols ATTRIBUTE_UNUSED,
d489 3
a491 1
      stash->debug_section = bfd_alloc (abfd, size);
a495 7
      if (! bfd_get_section_contents (abfd, msec, stash->debug_section,
				      0, size))
	{
	  stash->debug_section = 0;
	  return FALSE;
	}

d499 1
d529 2
@


1.17
log
@
bfd/
	Many files: Include sysdep.h before bfd.h.
	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.
binutils/
	* bucumm.h: Split off host dependencies to..
	* sysdep.h: ..here.
	Many files: Include sysdep.h.  Remove duplicate headers and reorder.
	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.
ld/
	Many files: Include sysdep.h first.  Remove duplicate headers.
	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.
opcodes/
	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.
	* ns32k-dis.c: Include sysdep.h first.
@
text
@d11 1
a11 1
   the Free Software Foundation; either version 2 of the License, or (at
d21 2
a22 1
   Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA 02110-1301, USA.  */
@


1.16
log
@Update the address and phone number of the FSF organization in the GPL notices
@
text
@d2 1
a2 1
   Copyright 1998, 1999, 2000, 2001, 2002, 2004, 2005
d23 1
a24 1
#include "sysdep.h"
@


1.15
log
@Update the FSF address in the copyright/GPL notice
@
text
@d21 1
a21 1
   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02110-1301, USA.  */
@


1.14
log
@Convert to ISO C90 formatting
@
text
@d21 1
a21 1
   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
@


1.13
log
@bfd/
	* section.c (struct sec): Rename "_cooked_size" to "size".
	Rename "_raw_size" to "rawsize".
	(STD_SECTION): Adjust comments.
	(bfd_set_section_size, bfd_get_section_contents): Use size.
	(bfd_malloc_and_get_section): New function.
	* bfd-in.h (bfd_section_size, bfd_get_section_size): Use size.
	* coff-sh.c (sh_relax_section): Alloc coff_section_data struct early.
	Correctly free reloc and contents memory.
	* elf-eh-frame.c (_bfd_elf_discard_section_eh_frame): Delete FIXME
	and fake CIE now that we can shink section size to zero.
	(_bfd_elf_write_section_eh_frame): Likewise..
	* elf32-ppc.c (ppc_elf_relax_section): Delay reading section contents.
	* elf-m10300.c (mn10300_elf_final_link_relocate): Don't use
	_bfd_stab_section_offset.  Use _bfd_elf_section_offset.
	* stabs.c (_bfd_stab_section_offset_): Remove unused args and
	unneeded indirection.
	* elf.c (_bfd_elf_section_offset): .. and update call.
	* libbfd-in.h (_bfd_stab_section_offset): Update prototype.
	* libbfd.h: Regenerate.
	* bfd-in2.h: Regenerate.

	Replace occurrences of "_raw_size" and "_cooked_size" in most places
	with "size".  Set new "rawsize" for stabs, eh_frame, and SEC_MERGE
	sections.  Use "rawsize", if non-zero, for bfd_get_section_contents
	calls if the section might be a stabs, eh_frame, or SEC_MERGE section.
	Similarly use "rawsize", if non-zero, in reloc functions to validate
	reloc addresses.  Use new bfd_malloc_and_get_section in most places
	where bfd_get_section_contents was called.  Expand all occurrences of
	bfd_section_size and bfd_get_section_size.  Rename "raw_size" var in
	grok_prstatus and similar functions to "size".
	* aix386-core.c (aix386_core_file_p): ..
	* aix5ppc-core.c (xcoff64_core_p): ..
	* aout-adobe.c (aout_adobe_callback, aout_adobe_write_object_contents,
	aout_adobe_set_section_contents): ..
	* aout-target.h (callback): ..
	* aout-tic30.c (tic30_aout_callback, tic30_aout_final_link_relocate,
	MY_bfd_final_link): ..
	* aoutf1.h (sunos4_core_file_p): ..
	* aoutx.h (some_aout_object_p, adjust_o_magic, adjust_z_magic,
	adjust_n_magic, adjust_sizes_and_vmas, translate_from_native_sym_flags,
	final_link, aout_link_input_section): ..
	* binary.c (binary_object_p, binary_canonicalize_symtab,
	binary_set_section_contents): ..
	* bout.c (b_out_callback, b_out_write_object_contents,
	b_out_set_section_contents, b_out_bfd_relax_section,
	b_out_bfd_get_relocated_section_contents): ..
	* cisco-core.c (cisco_core_file_validate): ..
	* coff-alpha.c (alpha_ecoff_object_p,
	alpha_ecoff_get_relocated_section_conten, alpha_relocate_section): ..
	* coff-arm.c (coff_arm_relocate_section,
	bfd_arm_allocate_interworking_sections): ..
	* coff-h8300.c (h8300_reloc16_extra_cases,
	h8300_bfd_link_add_symbols): ..
	* coff-mips.c (mips_refhi_reloc, mips_gprel_reloc): ..
	* coff-ppc.c (coff_ppc_relocate_section, ppc_allocate_toc_section,
	ppc_bfd_coff_final_link): ..
	* coff-rs6000.c (xcoff_reloc_type_br, xcoff_ppc_relocate_section): ..
	* coff-sh.c (sh_relax_section, sh_relax_delete_bytes,
	sh_align_loads, sh_coff_get_relocated_section_contents): ..
	* coff64-rs6000.c (xcoff64_write_object_contents,
	xcoff64_reloc_type_br, xcoff64_ppc_relocate_section): ..
	* coffcode.h (coff_compute_section_file_positions,
	coff_write_object_contents): ..
	* coffgen.c (make_a_section_from_file, coff_write_symbols,
	coff_section_symbol, build_debug_section): ..
	* cofflink.c (coff_link_add_symbols, _bfd_coff_final_link,
	process_embedded_commands, _bfd_coff_link_input_bfd,
	_bfd_coff_write_global_sym): ..
	* cpu-arm.c (bfd_arm_update_notes, bfd_arm_get_mach_from_notes): ..
	* cpu-ns32k.c (do_ns32k_reloc, _bfd_ns32k_final_link_relocate): ..
	* dwarf1.c (parse_line_table, _bfd_dwarf1_find_nearest_line): ..
	* dwarf2.c (read_indirect_string, read_abbrevs, decode_line_info,
	_bfd_dwarf2_find_nearest_line): ..
	* ecoff.c (bfd_debug_section, ecoff_set_symbol_info,
	ecoff_compute_section_file_positions,
	_bfd_ecoff_write_object_contents, ecoff_indirect_link_order): ..
	* elf-eh-frame.c (_bfd_elf_discard_section_eh_frame,
	_bfd_elf_discard_section_eh_frame_hdr,
	_bfd_elf_maybe_strip_eh_frame_hdr, _bfd_elf_eh_frame_section_offset,
	_bfd_elf_write_section_eh_frame,
	_bfd_elf_write_section_eh_frame_hdr): ..
	* elf-hppa.h (elf_hppa_sort_unwind): ..
	* elf-m10200.c (mn10200_elf_relax_section,
	mn10200_elf_relax_delete_bytes,
	mn10200_elf_get_relocated_section_contents): ..
	* elf-m10300.c (_bfd_mn10300_elf_create_got_section,
	mn10300_elf_check_relocs, mn10300_elf_relax_section,
	mn10300_elf_relax_delete_bytes,
	mn10300_elf_get_relocated_section_contents,
	_bfd_mn10300_elf_adjust_dynamic_symbol,
	_bfd_mn10300_elf_discard_copies,
	_bfd_mn10300_elf_size_dynamic_sections,
	_bfd_mn10300_elf_finish_dynamic_sections): ..
	* elf.c (_bfd_elf_print_private_bfd_data, bfd_elf_get_bfd_needed_list,
	_bfd_elf_make_section_from_phdr, elf_fake_sections,
	bfd_elf_set_group_contents, map_sections_to_segments,
	elf_sort_sections, assign_file_positions_for_segments,
	SECTION_SIZE, copy_private_bfd_data,
	_bfd_elf_get_dynamic_reloc_upper_bound,
	_bfd_elf_canonicalize_dynamic_reloc, elfcore_maybe_make_sect,
	_bfd_elfcore_make_pseudosection, elfcore_grok_prstatus,
	elfcore_grok_lwpstatus, elfcore_grok_win32pstatus,
	elfcore_grok_note, elfcore_grok_nto_status, elfcore_grok_nto_gregs,
	_bfd_elf_rel_local_sym, _bfd_elf_get_synthetic_symtab): ..
	* elf32-arm.h (bfd_elf32_arm_allocate_interworking_sect,
	bfd_elf32_arm_process_before_allocation,
	elf32_arm_adjust_dynamic_symbol, allocate_dynrelocs,
	elf32_arm_size_dynamic_sections, elf32_arm_finish_dynamic_sections,
	elf32_arm_write_section): ..
	* elf32-cris.c (cris_elf_grok_prstatus,
	elf_cris_finish_dynamic_sections, cris_elf_gc_sweep_hook,
	elf_cris_adjust_gotplt_to_got, elf_cris_adjust_dynamic_symbol,
	cris_elf_check_relocs, elf_cris_size_dynamic_sections,
	elf_cris_discard_excess_dso_dynamics,
	elf_cris_discard_excess_program_dynamics): ..
	* elf32-d30v.c (bfd_elf_d30v_reloc, bfd_elf_d30v_reloc_21): ..
	* elf32-dlx.c (_bfd_dlx_elf_hi16_reloc): ..
	* elf32-frv.c (_frvfdpic_add_dyn_reloc, _frvfdpic_add_rofixup,
	_frv_create_got_section, _frvfdpic_assign_plt_entries,
	elf32_frvfdpic_size_dynamic_sections,
	elf32_frvfdpic_modify_segment_map,
	elf32_frvfdpic_finish_dynamic_sections): ..
	* elf32-h8300.c (elf32_h8_relax_section, elf32_h8_relax_delete_bytes,
	elf32_h8_get_relocated_section_contents): ..
	* elf32-hppa.c (hppa_build_one_stub, hppa_size_one_stub,
	elf32_hppa_adjust_dynamic_symbol, allocate_plt_static,
	allocate_dynrelocs, elf32_hppa_size_dynamic_sections, group_sections,
	elf32_hppa_size_stubs, elf32_hppa_set_gp, elf32_hppa_build_stubs,
	elf32_hppa_finish_dynamic_sections): ..
	* elf32-i370.c (i370_elf_adjust_dynamic_symbol,
	i370_elf_size_dynamic_sections, i370_elf_check_relocs,
	i370_elf_finish_dynamic_sections): ..
	* elf32-i386.c (elf_i386_grok_prstatus, elf_i386_adjust_dynamic_symbol,
	allocate_dynrelocs, elf_i386_size_dynamic_sections,
	elf_i386_relocate_section, elf_i386_finish_dynamic_sections): ..
	* elf32-i860.c (i860_howto_pc26_reloc, i860_howto_pc16_reloc,
	i860_howto_highadj_reloc, i860_howto_splitn_reloc): ..
	* elf32-ip2k.c (ip2k_is_switch_table_128,
	ip2k_relax_switch_table_128, ip2k_is_switch_table_256,
	ip2k_relax_switch_table_256, ip2k_elf_relax_section,
	adjust_all_relocations, ip2k_elf_relax_delete_bytes): ..
	* elf32-m32r.c (m32r_elf_do_10_pcrel_reloc, m32r_elf_hi16_reloc,
	m32r_elf_generic_reloc, m32r_elf_adjust_dynamic_symbol,
	allocate_dynrelocs, m32r_elf_size_dynamic_sections,
	m32r_elf_relocate_section, m32r_elf_finish_dynamic_sections,
	m32r_elf_relax_section, m32r_elf_relax_delete_bytes,
	m32r_elf_get_relocated_section_contents): ..
	* elf32-m68hc11.c (m68hc11_elf_build_one_stub,
	m68hc11_elf_size_one_stub, m68hc11_elf_relax_section,
	m68hc11_elf_relax_delete_bytes): ..
	* elf32-m68hc12.c (m68hc12_elf_build_one_stub,
	m68hc12_elf_size_one_stub): ..
	* elf32-m68hc1x.c (elf32_m68hc11_size_stubs,
	elf32_m68hc11_build_stubs, m68hc11_elf_special_reloc): ..
	* elf32-m68k.c (elf_m68k_check_relocs, elf_m68k_gc_sweep_hook,
	elf_m68k_adjust_dynamic_symbol, elf_m68k_size_dynamic_sections,
	elf_m68k_discard_copies, elf_m68k_finish_dynamic_sections): ..
	* elf32-mips.c (gprel32_with_gp, mips16_gprel_reloc,
	elf32_mips_grok_prstatus): ..
	* elf32-or32.c (or32_elf_consth_reloc): ..
	* elf32-ppc.c (ppc_elf_relax_section, ppc_elf_addr16_ha_reloc,
	elf_create_pointer_linker_section, ppc_elf_create_linker_section,
	ppc_elf_additional_program_headers, ppc_elf_adjust_dynamic_symbol,
	allocate_dynrelocs, ppc_elf_size_dynamic_sections,
	ppc_elf_finish_dynamic_sections, ppc_elf_grok_prstatus,
	ppc_elf_final_write_processing): ..
	* elf32-s390.c (s390_elf_ldisp_reloc, elf_s390_adjust_dynamic_symbol,
	allocate_dynrelocs, elf_s390_size_dynamic_sections,
	elf_s390_finish_dynamic_sections, elf_s390_grok_prstatus): ..
	* elf32-sh.c (sh_elf_reloc_loop, sh_elf_relax_section,
	sh_elf_relax_delete_bytes, sh_elf_align_loads,
	sh_elf_adjust_dynamic_symbol, allocate_dynrelocs,
	sh_elf_size_dynamic_sections, sh_elf_get_relocated_section_contents,
	sh_elf_finish_dynamic_sections, elf32_shlin_grok_prstatus): ..
	* elf32-sh64-com.c (sh64_address_in_cranges,
	sh64_get_contents_type): ..
	* elf32-sh64.c (sh64_find_section_for_address,
	sh64_elf_final_write_processing): ..
	* elf32-sparc.c (sparc_elf_wdisp16_reloc, sparc_elf_hix22_reloc,
	sparc_elf_lox10_reloc, elf32_sparc_adjust_dynamic_symbol,
	allocate_dynrelocs, elf32_sparc_size_dynamic_sections,
	elf32_sparc_relocate_section, elf32_sparc_finish_dynamic_sections): ..
	* elf32-v850.c (v850_elf_reloc, v850_elf_relax_section): ..
	* elf32-vax.c (elf_vax_check_relocs, elf_vax_adjust_dynamic_symbol,
	elf_vax_size_dynamic_sections, elf_vax_discard_copies,
	elf_vax_instantiate_got_entries, elf_vax_relocate_section,
	elf_vax_finish_dynamic_sections): ..
	* elf32-xstormy16.c (xstormy16_elf_24_reloc,
	xstormy16_elf_check_relocs, xstormy16_relax_plt_check,
	xstormy16_elf_relax_section, xstormy16_elf_always_size_sections,
	xstormy16_elf_finish_dynamic_sections): ..
	* elf32-xtensa.c (xtensa_read_table_entries,
	elf_xtensa_allocate_got_size, elf_xtensa_allocate_local_got_size,
	elf_xtensa_size_dynamic_sections, elf_xtensa_do_reloc,
	bfd_elf_xtensa_reloc, elf_xtensa_relocate_section,
	elf_xtensa_combine_prop_entries, elf_xtensa_finish_dynamic_sections,
	elf_xtensa_discard_info_for_section, elf_xtensa_grok_prstatus,
	get_relocation_opcode, retrieve_contents, find_relaxable_sections,
	collect_source_relocs, is_resolvable_asm_expansion, remove_literals,
	relax_section, shrink_dynamic_reloc_sections, relax_property_section,
	xtensa_callback_required_dependence): ..
	* elf64-alpha.c (elf64_alpha_reloc_gpdisp, elf64_alpha_relax_section,
	elf64_alpha_check_relocs, elf64_alpha_adjust_dynamic_symbol,
	elf64_alpha_calc_got_offsets_for_symbol, elf64_alpha_calc_got_offsets,
	elf64_alpha_size_plt_section, elf64_alpha_size_plt_section_1,
	elf64_alpha_always_size_sections, elf64_alpha_calc_dynrel_sizes,
	elf64_alpha_size_rela_got_section, elf64_alpha_size_rela_got_1,
	elf64_alpha_size_dynamic_sections, elf64_alpha_emit_dynrel,
	elf64_alpha_finish_dynamic_sections, elf64_alpha_final_link): ..
	* elf64-hppa.c (allocate_dynrel_entries,
	elf64_hppa_size_dynamic_sections,
	elf64_hppa_finish_dynamic_sections): ..
	* elf64-mips.c (mips_elf64_gprel32_reloc, mips16_gprel_reloc,
	mips_elf64_canonicalize_dynamic_reloc, mips_elf64_slurp_reloc_table,
	elf64_mips_grok_prstatus): ..
	* elf64-mmix.c (mmix_elf_perform_relocation, mmix_elf_reloc,
	mmix_elf_relocate_section, mmix_elf_final_link,
	mmix_set_relaxable_size, _bfd_mmix_after_linker_allocation,
	mmix_elf_relax_section, mmix_elf_get_section_contents): ..
	* elf64-ppc.c (ppc64_elf_object_p, ppc64_elf_grok_prstatus,
	ppc64_elf_check_relocs, ppc64_elf_func_desc_adjust,
	ppc64_elf_adjust_dynamic_symbol, ppc64_elf_edit_opd,
	allocate_dynrelocs, ppc64_elf_size_dynamic_sections,
	ppc_build_one_stub, ppc_size_one_stub, ppc64_elf_next_toc_section,
	toc_adjusting_stub_needed, group_sections, ppc64_elf_size_stubs,
	ppc64_elf_build_stubs, ppc64_elf_relocate_section,
	ppc64_elf_finish_dynamic_sections): ..
	* elf64-s390.c (s390_elf_ldisp_reloc, elf_s390_adjust_dynamic_symbol,
	allocate_dynrelocs, elf_s390_size_dynamic_sections,
	elf_s390_finish_dynamic_sections): ..
	* elf64-sh64.c (sh_elf64_get_relocated_section_contents,
	sh_elf64_check_relocs, sh64_elf64_adjust_dynamic_symbol,
	sh64_elf64_discard_copies, sh64_elf64_size_dynamic_sections,
	sh64_elf64_finish_dynamic_sections): ..
	* elf64-sparc.c (sparc64_elf_slurp_reloc_table, init_insn_reloc,
	sparc64_elf_check_relocs, sparc64_elf_adjust_dynamic_symbol,
	sparc64_elf_size_dynamic_sections, sparc64_elf_relocate_section,
	sparc64_elf_finish_dynamic_symbol,
	sparc64_elf_finish_dynamic_sections): ..
	* elf64-x86-64.c (elf64_x86_64_grok_prstatus,
	elf64_x86_64_adjust_dynamic_symbol, allocate_dynrelocs,
	elf64_x86_64_size_dynamic_sections, elf64_x86_64_relocate_section,
	elf64_x86_64_finish_dynamic_sections): ..
	* elfarm-nabi.c (elf32_arm_nabi_grok_prstatus): ..
	* elfcode.h (elf_slurp_reloc_table): ..
	* elflink.c (_bfd_elf_create_got_section, elf_add_dt_needed_tag,
	elf_finalize_dynstr, elf_link_add_object_symbols,
	bfd_elf_size_dynamic_sections, elf_link_sort_relocs,
	elf_link_input_bfd, bfd_elf_final_link, bfd_elf_discard_info): ..
	* elfn32-mips.c (gprel32_with_gp, mips16_gprel_reloc,
	elf32_mips_grok_prstatus): ..
	* elfxx-ia64.c (elfNN_ia64_relax_section, allocate_dynrel_entries,
	elfNN_ia64_size_dynamic_sections, elfNN_ia64_install_dyn_reloc,
	elfNN_ia64_choose_gp, elfNN_ia64_final_link,
	elfNN_ia64_finish_dynamic_sections): ..
	* elfxx-mips.c (mips_elf_create_procedure_table,
	mips_elf_check_mips16_stubs, _bfd_mips_elf_gprel16_with_gp,
	_bfd_mips_elf_hi16_reloc, _bfd_mips_elf_generic_reloc,
	mips_elf_global_got_index, mips_elf_multi_got,
	mips_elf_create_compact_rel_section, mips_elf_calculate_relocation,
	mips_elf_allocate_dynamic_relocations,
	mips_elf_create_dynamic_relocation, _bfd_mips_elf_fake_sections,
	_bfd_mips_relax_section, _bfd_mips_elf_adjust_dynamic_symbol,
	_bfd_mips_elf_always_size_sections,
	_bfd_mips_elf_size_dynamic_sections,
	_bfd_mips_elf_finish_dynamic_symbol,
	_bfd_mips_elf_finish_dynamic_sections,
	_bfd_mips_elf_modify_segment_map, _bfd_mips_elf_discard_info,
	_bfd_mips_elf_write_section, _bfd_mips_elf_set_section_contents,
	_bfd_elf_mips_get_relocated_section_contents,
	_bfd_mips_elf_final_link, _bfd_mips_elf_merge_private_bfd_data): ..
	* hp300hpux.c (callback): ..
	* hppabsd-core.c (make_bfd_asection): ..
	* hpux-core.c (make_bfd_asection): ..
	* i386linux.c (linux_link_create_dynamic_sections,
	bfd_i386linux_size_dynamic_sections, linux_finish_dynamic_link): ..
	* i386msdos.c (msdos_write_object_contents): ..
	* i386os9k.c (os9k_callback, os9k_write_object_contents,
	os9k_set_section_contents): ..
	* ieee.c (parse_expression, ieee_slurp_external_symbols,
	ieee_slurp_sections, ieee_slurp_debug, ieee_slurp_section_data,
	ieee_write_section_part, do_with_relocs, do_as_repeat,
	do_without_relocs, ieee_write_debug_part, init_for_output,
	ieee_set_section_contents): ..
	* ihex.c (ihex_scan, ihex_read_section, ihex_get_section_contents): ..
	* irix-core.c (do_sections, make_bfd_asection): ..
	* libaout.h (aout_section_merge_with_text_p): ..
	* libbfd.c (_bfd_generic_get_section_contents,
	_bfd_generic_get_section_contents_in_window): ..
	* linker.c (default_indirect_link_order): ..
	* lynx-core.c (make_bfd_asection): ..
	* m68klinux.c (linux_link_create_dynamic_sections,
	bfd_m68klinux_size_dynamic_sections, linux_finish_dynamic_link): ..
	* mach-o.c (bfd_mach_o_make_bfd_section,
	bfd_mach_o_scan_read_dylinker, bfd_mach_o_scan_read_dylib,
	bfd_mach_o_scan_read_thread, bfd_mach_o_scan_read_symtab,
	bfd_mach_o_scan_read_segment): ..
	* merge.c (_bfd_add_merge_section, record_section, merge_strings,
	_bfd_merge_sections): ..
	* mmo.c (mmo_find_sec_w_addr, mmo_get_spec_section, mmo_get_loc,
	mmo_map_set_sizes, mmo_canonicalize_symtab,
	mmo_internal_write_section, mmo_write_object_contents): ..
	* netbsd-core.c (netbsd_core_file_p): ..
	* nlm32-alpha.c (nlm_alpha_read_reloc, nlm_alpha_write_import,
	nlm_alpha_set_public_section): ..
	* nlm32-ppc.c (nlm_powerpc_read_reloc, nlm_powerpc_write_reloc): ..
	* nlm32-sparc.c (nlm_sparc_write_import): ..
	* nlmcode.h (add_bfd_section, nlm_swap_auxiliary_headers_in,
	nlm_compute_section_file_positions): ..
	* oasys.c (oasys_object_p, oasys_slurp_section_data,
	oasys_write_sections, oasys_write_data, oasys_set_section_contents): ..
	* opncls.c (get_debug_link_info): ..
	* osf-core.c (make_bfd_asection): ..
	* pdp11.c (some_aout_object_p, adjust_o_magic, adjust_z_magic,
	adjust_n_magic, adjust_sizes_and_vmas, squirt_out_relocs,
	final_link, aout_link_input_section): ..
	* peXXigen.c (_bfd_XXi_swap_sym_in, _bfd_XXi_swap_aouthdr_out,
	pe_print_idata, pe_print_edata, pe_print_pdata, pe_print_reloc): ..
	* pef.c (bfd_pef_make_bfd_section, bfd_pef_print_loader_section,
	bfd_pef_scan_start_address, bfd_pef_parse_symbols): ..
	* ppcboot.c (ppcboot_object_p, ppcboot_canonicalize_symtab): ..
	* ptrace-core.c (ptrace_unix_core_file_p): ..
	* reloc.c (bfd_perform_relocation, bfd_install_relocation,
	_bfd_final_link_relocate, bfd_generic_relax_section,
	bfd_generic_get_relocated_section_contents): ..
	* reloc16.c (bfd_coff_reloc16_relax_section,
	bfd_coff_reloc16_get_relocated_section_c): ..
	* riscix.c (riscix_some_aout_object_p): ..
	* rs6000-core.c (read_hdr, make_bfd_asection): ..
	* sco5-core.c (make_bfd_asection): ..
	* simple.c (bfd_simple_get_relocated_section_contents): ..
	* som.c (som_object_setup, setup_sections, som_prep_headers,
	som_write_fixups, som_begin_writing, bfd_section_from_som_symbol,
	som_set_reloc_info, som_get_section_contents,
	som_bfd_link_split_section): ..
	* sparclinux.c (linux_link_create_dynamic_sections,
	bfd_sparclinux_size_dynamic_sections, linux_finish_dynamic_link): ..
	* srec.c (srec_scan, srec_read_section, srec_get_section_contents): ..
	* stabs.c (_bfd_link_section_stabs, _bfd_discard_section_stabs,
	_bfd_write_stab_strings, _bfd_stab_section_offset): ..
	* sunos.c (sunos_read_dynamic_info, sunos_create_dynamic_sections,
	bfd_sunos_size_dynamic_sections, sunos_scan_std_relocs,
	sunos_scan_ext_relocs, sunos_scan_dynamic_symbol,
	sunos_write_dynamic_symbol, sunos_check_dynamic_reloc,
	sunos_finish_dynamic_link): ..
	* syms.c (_bfd_stab_section_find_nearest_line): ..
	* tekhex.c (first_phase, tekhex_set_section_contents,
	tekhex_write_object_contents): ..
	* trad-core.c (trad_unix_core_file_p): ..
	* versados.c (process_esd, process_otr, process_otr): ..
	* vms-gsd.c (_bfd_vms_slurp_gsd, _bfd_vms_write_gsd): ..
	* vms-misc.c (add_new_contents): ..
	* vms-tir.c (check_section, new_section, _bfd_vms_write_tir): ..
	* vms.c (vms_set_section_contents): ..
	* xcofflink.c (xcoff_get_section_contents, xcoff_link_add_symbols,
	xcoff_sweep, bfd_xcoff_size_dynamic_sections, xcoff_build_ldsyms,
	_bfd_xcoff_bfd_final_link, xcoff_link_input_bfd): ..
	* xsym.c (bfd_sym_scan): .. See above.

binutils/
	* objcopy.c (copy_section): Don't set _cooked_size.

include/
	* bfdlink.h (struct bfd_link_order): Update comment.

ld/
	* ldlang.c (print_output_section_statement): Don't print size before
	relaxation.
	(IGNORE_SECTION): Remove bfd arg.  Update all callers.

	* ldexp.c (fold_name): .. See below.
	* ldlang.c (section_already_linked, print_output_section_statement,
	print_input_section, insert_pad, size_input_section,
	lang_check_section_addresses, lang_size_sections_1,
	lang_size_sections, lang_do_assignments_1, lang_set_startof,
	lang_one_common, lang_reset_memory_regions, lang_process,
	lang_abs_symbol_at_end_of, lang_do_version_exports_section): ..
	* ldwrite.c (build_link_order, clone_section, ds, split_sections): ..
	* pe-dll.c (process_def_file, generate_reloc): ..
	* emultempl/elf32.em (gld${EMULATION_NAME}_find_statement_assignment,
	gld${EMULATION_NAME}_before_allocation): ..
	* emultempl/mmix-elfnmmo.em (mmix_after_allocation): ..
	* emultempl/sh64elf.em (sh64_elf_${EMULATION_NAME}_before_allocation,
	sh64_elf_${EMULATION_NAME}_after_allocation): ..
	* emultempl/sunos.em (gld${EMULATION_NAME}_before_allocation): ..
	* emultempl/xtensaelf.em (ld_assign_relative_paged_dot,
	ld_local_file_relocations_fit, ld_xtensa_insert_page_offsets): Use
	"size" instead of "_raw_size" and "_cooked_size".  Expand
	bfd_section_size macro invocations.
@
text
@d2 2
a3 1
   Copyright 1998, 1999, 2000, 2001, 2002, 2004 Free Software Foundation, Inc.
d5 1
a5 1
Written by Gavin Romig-Koch of Cygnus Solutions (gavin@@cygnus.com).
d7 1
a7 1
This file is part of BFD.
d9 13
a21 13
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
d32 2
a33 2
struct dwarf1_debug {

d59 2
a60 1
struct dwarf1_unit {
d71 1
a71 1
  /* Does this unit have a statement list? */
d80 1
a80 1
  /* How many line entries? */
d92 2
a93 1
struct dwarf1_func {
d106 2
a107 1
struct die_info {
d122 2
a123 1
struct linenumber {
d132 1
a132 15
#define FORM_FROM_ATTR(attr)	((attr) & 0xF)	/* Implicitly specified */

static struct dwarf1_unit *alloc_dwarf1_unit
  PARAMS ((struct dwarf1_debug *));
static struct dwarf1_func *alloc_dwarf1_func
  PARAMS ((struct dwarf1_debug *, struct dwarf1_unit *));
static bfd_boolean parse_die
  PARAMS ((bfd *, struct die_info *, char *, char *));
static bfd_boolean parse_line_table
  PARAMS ((struct dwarf1_debug *, struct dwarf1_unit *));
static bfd_boolean parse_functions_in_unit
  PARAMS ((struct dwarf1_debug *, struct dwarf1_unit *));
static bfd_boolean dwarf1_unit_find_nearest_line
  PARAMS ((struct dwarf1_debug *, struct dwarf1_unit *, unsigned long,
	   const char **, const char **, unsigned int *));
d138 1
a138 2
alloc_dwarf1_unit (stash)
  struct dwarf1_debug* stash;
d142 1
a142 1
  struct dwarf1_unit* x = (struct dwarf1_unit*) bfd_zalloc (stash->abfd, amt);
d152 2
a153 4
static struct dwarf1_func*
alloc_dwarf1_func (stash, aUnit)
     struct dwarf1_debug* stash;
     struct dwarf1_unit* aUnit;
d157 1
a157 1
  struct dwarf1_func* x = (struct dwarf1_func*) bfd_zalloc (stash->abfd, amt);
d172 4
a175 5
parse_die (abfd, aDieInfo, aDiePtr, aDiePtrEnd)
     bfd* abfd;
     struct die_info* aDieInfo;
     char*            aDiePtr;
     char*            aDiePtrEnd;
d180 1
a180 1
  memset (aDieInfo,0,sizeof (*aDieInfo));
a206 1

d258 1
a258 3
parse_line_table (stash, aUnit)
  struct dwarf1_debug* stash;
  struct dwarf1_unit* aUnit;
d273 1
a273 1
      stash->line_section = (char *) bfd_alloc (stash->abfd, size);
d305 1
a305 1
	 10 = 4 (line number) + 2 (pos in line) + 4 (address in line) */
d310 1
a310 2
      aUnit->linenumber_table = ((struct linenumber *)
				 bfd_alloc (stash->abfd, amt));
d338 1
a338 3
parse_functions_in_unit (stash, aUnit)
     struct dwarf1_debug* stash;
     struct dwarf1_unit* aUnit;
d344 1
a344 1
	 eachDie < stash->debug_section_end;
d379 6
a384 9
dwarf1_unit_find_nearest_line (stash, aUnit, addr,
		       filename_ptr, functionname_ptr,
		       linenumber_ptr)
  struct dwarf1_debug* stash;
  struct dwarf1_unit* aUnit;
  unsigned long addr;
  const char **filename_ptr;
  const char **functionname_ptr;
  unsigned int *linenumber_ptr;
d442 7
a448 9
_bfd_dwarf1_find_nearest_line (abfd, section, symbols, offset,
                              filename_ptr, functionname_ptr, linenumber_ptr)
     bfd *abfd;
     asection *section;
     asymbol **symbols ATTRIBUTE_UNUSED;
     bfd_vma offset;
     const char **filename_ptr;
     const char **functionname_ptr;
     unsigned int *linenumber_ptr;
d467 1
a467 1
	= (struct dwarf1_debug *) bfd_zalloc (abfd, size);
d474 4
a477 6
	{
	  /* No dwarf1 info.  Note that at this point the stash
	     has been allocated, but contains zeros, this lets
	     future calls to this function fail quicker.  */
	  return FALSE;
	}
d480 1
a480 1
      stash->debug_section = (char *) bfd_alloc (abfd, size);
d506 5
a510 7
    {
      if (eachUnit->low_pc <= addr && addr < eachUnit->high_pc)
	return dwarf1_unit_find_nearest_line (stash, eachUnit, addr,
					      filename_ptr,
					      functionname_ptr,
					      linenumber_ptr);
    }
a556 2

/* EOF */
@


1.12
log
@	* section.c (struct sec): Remove usused flags.  Reorganize a little.
	(bfd_get_section_size_before_reloc): Delete.
	(bfd_get_section_size_after_reloc): Delete.
	(STD_SECTION): Update.
	(bfd_get_section_size_now): Delete.
	(bfd_set_section_contents): Don't referece reloc_done.
	(bfd_get_section_contents): Remove reloc_done comment.
	* bout.c (b_out_bfd_get_relocated_section_contents): Don't set
	reloc_done.
	* coff-alpha.c (alpha_ecoff_get_relocated_section_contents): Likewise.
	* ecoff.c (bfd_debug_section): Update initializer.
	* elfxx-mips.c (_bfd_elf_mips_get_relocated_section_contents): Ditto.
	* reloc.c (bfd_generic_get_relocated_section_contents): Likewise.
	* bfd-in.h (bfd_section_size): Expand.
	(bfd_get_section_size): New macro.
	* bfd-in2.h: Regenerate.
	* coff64-rs6000.c (xcoff64_write_object_contents): Replace
	bfd_get_section_size_before_reloc with bfd_get_section_size.
	* coffcode.h (coff_write_object_contents): Likewise.
	* coffgen.c (build_debug_section): Likewise.
	* dwarf1.c (parse_line_table): Likewise.
	(_bfd_dwarf1_find_nearest_line): Likewise.
	* ecoff.c (_bfd_ecoff_write_object_contents): Likewise.
	* i386msdos.c (msdos_write_object_contents): Likewise.
	* pdp11.c (squirt_out_relocs): Likewise.
	* elf32-sh64.c (sh64_find_section_for_address): Remove comment.
	* elf64-mmix.c (mmix_elf_final_link): Update comment.
@
text
@d288 1
a288 1
      size = bfd_get_section_size (msec);
d295 1
a295 1
				      (bfd_vma) 0, size))
d505 1
a505 1
      size = bfd_get_section_size (msec);
d512 1
a512 1
				      (bfd_vma) 0, size))
@


1.11
log
@s/boolean/bfd_boolean/ s/true/TRUE/ s/false/FALSE/.  Simplify
comparisons of bfd_boolean vars with TRUE/FALSE.  Formatting.
@
text
@d2 1
a2 1
   Copyright 1998, 1999, 2000, 2001, 2002 Free Software Foundation, Inc.
d288 1
a288 1
      size = bfd_get_section_size_before_reloc (msec);
d505 1
a505 1
      size = bfd_get_section_size_before_reloc (msec);
@


1.11.50.1
log
@Merge mainline to intercu branch - 2004-09-15
@
text
@d2 1
a2 1
   Copyright 1998, 1999, 2000, 2001, 2002, 2004 Free Software Foundation, Inc.
d288 1
a288 1
      size = msec->rawsize ? msec->rawsize : msec->size;
d295 1
a295 1
				      0, size))
d505 1
a505 1
      size = msec->rawsize ? msec->rawsize : msec->size;
d512 1
a512 1
				      0, size))
@


1.10
log
@Touches most files in bfd/, so likely will be blamed for everything..

o  bfd_read and bfd_write lose an unnecessary param and become
   bfd_bread and bfd_bwrite.

o  bfd_*alloc now all take a bfd_size_type arg, and will error if
   size_t is too small.  eg. 32 bit host, 64 bit bfd, verrry big files
   or bugs in linker scripts etc.

o  file_ptr becomes a bfd_signed_vma.  Besides matching sizes with
   various other types involved in handling sections, this should make
   it easier for bfd to support a 64 bit off_t on 32 bit hosts that
   provide it.

o  I've made the H_GET_* and H_PUT_* macros (which invoke bfd_h_{get,put}_*)
   generally available.  They now cast their args to bfd_vma and
   bfd_byte * as appropriate, which removes a swag of casts from the
   source.

o  Bug fixes to bfd_get8, aix386_core_vec, elf32_h8_relax_section, and
   aout-encap.c.

o  Zillions of formatting and -Wconversion fixes.
@
text
@d2 1
a2 1
   Copyright 1998, 1999, 2000, 2001 Free Software Foundation, Inc.
d129 2
a130 1
static struct dwarf1_unit *alloc_dwarf1_unit PARAMS ((struct dwarf1_debug *));
d133 3
a135 2
static boolean parse_die PARAMS ((bfd *, struct die_info *, char *, char *));
static boolean parse_line_table
d137 1
a137 1
static boolean parse_functions_in_unit
d139 1
a139 1
static boolean dwarf1_unit_find_nearest_line
d181 1
a181 1
   Return false if the die is invalidly formatted; true otherwise.  */
d183 1
a183 1
static boolean
d200 1
a200 1
    return false;
d205 1
a205 1
      return true;
d264 1
a264 1
  return true;
d268 2
a269 2
   into 'aUnit->linenumber_table'.  Return false if an error
   occurs; true otherwise.  */
d271 1
a271 1
static boolean
d286 1
a286 1
	return false;
d292 1
a292 1
	return false;
d298 1
a298 1
	  return false;
d346 1
a346 1
  return true;
d352 1
a352 1
   Return false if error; true otherwise.  */
d354 1
a354 1
static boolean
d370 1
a370 1
	  return false;
d391 1
a391 1
  return true;
d397 1
a397 1
static boolean
d408 2
a409 2
  int line_p = false;
  int func_p = false;
d421 1
a421 1
		return false;
d427 1
a427 1
		return false;
d437 1
a437 1
		  line_p = true;
d450 1
a450 1
		  func_p = true;
d461 1
a461 1
   Return true if the line is found without error.  */
d463 1
a463 1
boolean
d494 1
a494 1
	return false;
d502 1
a502 1
	  return false;
d509 1
a509 1
	return false;
d515 1
a515 1
	  return false;
d527 1
a527 1
    return false;
d546 1
a546 1
	return false;
d583 1
a583 1
  return false;
@


1.10.24.1
log
@Merge drow-cplus-branch to:
  cvs rtag -D 2003-12-14 00:00:00 UTC drow-cplus-merge-20031214 gdb+dejagnu
@
text
@d2 1
a2 1
   Copyright 1998, 1999, 2000, 2001, 2002 Free Software Foundation, Inc.
d129 1
a129 2
static struct dwarf1_unit *alloc_dwarf1_unit
  PARAMS ((struct dwarf1_debug *));
d132 2
a133 3
static bfd_boolean parse_die
  PARAMS ((bfd *, struct die_info *, char *, char *));
static bfd_boolean parse_line_table
d135 1
a135 1
static bfd_boolean parse_functions_in_unit
d137 1
a137 1
static bfd_boolean dwarf1_unit_find_nearest_line
d179 1
a179 1
   Return FALSE if the die is invalidly formatted; TRUE otherwise.  */
d181 1
a181 1
static bfd_boolean
d198 1
a198 1
    return FALSE;
d203 1
a203 1
      return TRUE;
d262 1
a262 1
  return TRUE;
d266 2
a267 2
   into 'aUnit->linenumber_table'.  Return FALSE if an error
   occurs; TRUE otherwise.  */
d269 1
a269 1
static bfd_boolean
d284 1
a284 1
	return FALSE;
d290 1
a290 1
	return FALSE;
d296 1
a296 1
	  return FALSE;
d344 1
a344 1
  return TRUE;
d350 1
a350 1
   Return FALSE if error; TRUE otherwise.  */
d352 1
a352 1
static bfd_boolean
d368 1
a368 1
	  return FALSE;
d389 1
a389 1
  return TRUE;
d395 1
a395 1
static bfd_boolean
d406 2
a407 2
  int line_p = FALSE;
  int func_p = FALSE;
d419 1
a419 1
		return FALSE;
d425 1
a425 1
		return FALSE;
d435 1
a435 1
		  line_p = TRUE;
d448 1
a448 1
		  func_p = TRUE;
d459 1
a459 1
   Return TRUE if the line is found without error.  */
d461 1
a461 1
bfd_boolean
d492 1
a492 1
	return FALSE;
d500 1
a500 1
	  return FALSE;
d507 1
a507 1
	return FALSE;
d513 1
a513 1
	  return FALSE;
d525 1
a525 1
    return FALSE;
d544 1
a544 1
	return FALSE;
d581 1
a581 1
  return FALSE;
@


1.10.22.1
log
@2002-12-23  David Carlton  <carlton@@math.stanford.edu>

	* Merge from mainline; tag is carlton_dictionary-20021223-merge.
@
text
@d2 1
a2 1
   Copyright 1998, 1999, 2000, 2001, 2002 Free Software Foundation, Inc.
d129 1
a129 2
static struct dwarf1_unit *alloc_dwarf1_unit
  PARAMS ((struct dwarf1_debug *));
d132 2
a133 3
static bfd_boolean parse_die
  PARAMS ((bfd *, struct die_info *, char *, char *));
static bfd_boolean parse_line_table
d135 1
a135 1
static bfd_boolean parse_functions_in_unit
d137 1
a137 1
static bfd_boolean dwarf1_unit_find_nearest_line
d179 1
a179 1
   Return FALSE if the die is invalidly formatted; TRUE otherwise.  */
d181 1
a181 1
static bfd_boolean
d198 1
a198 1
    return FALSE;
d203 1
a203 1
      return TRUE;
d262 1
a262 1
  return TRUE;
d266 2
a267 2
   into 'aUnit->linenumber_table'.  Return FALSE if an error
   occurs; TRUE otherwise.  */
d269 1
a269 1
static bfd_boolean
d284 1
a284 1
	return FALSE;
d290 1
a290 1
	return FALSE;
d296 1
a296 1
	  return FALSE;
d344 1
a344 1
  return TRUE;
d350 1
a350 1
   Return FALSE if error; TRUE otherwise.  */
d352 1
a352 1
static bfd_boolean
d368 1
a368 1
	  return FALSE;
d389 1
a389 1
  return TRUE;
d395 1
a395 1
static bfd_boolean
d406 2
a407 2
  int line_p = FALSE;
  int func_p = FALSE;
d419 1
a419 1
		return FALSE;
d425 1
a425 1
		return FALSE;
d435 1
a435 1
		  line_p = TRUE;
d448 1
a448 1
		  func_p = TRUE;
d459 1
a459 1
   Return TRUE if the line is found without error.  */
d461 1
a461 1
bfd_boolean
d492 1
a492 1
	return FALSE;
d500 1
a500 1
	  return FALSE;
d507 1
a507 1
	return FALSE;
d513 1
a513 1
	  return FALSE;
d525 1
a525 1
    return FALSE;
d544 1
a544 1
	return FALSE;
d581 1
a581 1
  return FALSE;
@


1.9
log
@2001-09-17  H.J. Lu  <hjl@@gnu.org>

	* dwarf1.c (parse_die): Take a new arg for the end of the
	section. Return false if die is beyond the section.
	(parse_functions_in_unit): Pass the end of the section to
	parse_die ().
	(_bfd_dwarf1_find_nearest_line): Likewise.
@
text
@d148 3
a150 3
  struct dwarf1_unit* x =
    (struct dwarf1_unit*) bfd_zalloc (stash->abfd,
				      sizeof (struct dwarf1_unit));
d165 3
a167 3
  struct dwarf1_func* x =
    (struct dwarf1_func*) bfd_zalloc (stash->abfd,
				      sizeof (struct dwarf1_func));
d280 1
a280 1
      unsigned long size;
d292 2
a293 1
      if (! bfd_get_section_contents (stash->abfd, msec, stash->line_section, 0, size))
d306 1
a306 2

      char* tblend;
d308 1
d323 3
a325 3
      aUnit->linenumber_table = (struct linenumber *)
	bfd_alloc (stash->abfd,
		   sizeof (struct linenumber) * aUnit->line_count);
d486 1
a486 1
      unsigned long size;
d488 2
a489 2
      stash = elf_tdata (abfd)->dwarf1_find_line_info =
	(struct dwarf1_debug*) bfd_zalloc (abfd, sizeof (struct dwarf1_debug));
d509 2
a510 1
      if (! bfd_get_section_contents (abfd, msec, stash->debug_section, 0, size))
@


1.8
log
@	* coff-rs6000.c: Add missing prototypes.
	(xcoff_ppc_relocate_section, xcoff_is_lineno_count_overflow,
	xcoff_is_reloc_count_overflow, xcoff_loader_symbol_offset,
	xcoff_loader_reloc_offset): Make static.
	* dwarf1.c: Add missing prototypes.
	* dwarf2.c: Add missing prototypes.
	(struct abbrev_info): Move definition.
	(struct attr_abbrev, ABBREV_HASH_SIZE, ATTR_ALLOC_CHUNK): Likewise.
	* elf.c: Add missing prototypes.
	* elf32-gen.c: Likewise.
	* elf32-i386.c: Likewise.
	* elf32-ppc.c: Likewise.
	(ppc_elf_sort_rela): Use PTR instead of "void *".
	* elflink.h: Add missing prototypes.  Formatting fixes.
	* merge.c: Add missing prototypes.
	(last4_eq): Use PTR instead of "void *".
	(last_eq): Likewise.
	* syms.c: Add missing prototypes.
@
text
@d132 1
a132 1
static boolean parse_die PARAMS ((bfd *, struct die_info *, char *));
d182 1
a182 1
parse_die (abfd, aDieInfo, aDiePtr)
d186 1
d196 2
a197 1
  if (aDieInfo->length == 0)
d365 2
a366 1
	if (! parse_die (stash->abfd, &eachDieInfo, eachDie))
d540 2
a541 1
      if (! parse_die (stash->abfd, &aDieInfo, stash->currentDie))
@


1.7
log
@Change type of 'addr' to be unsigned long, in order to match its use.
@
text
@d2 1
a2 1
   Copyright 1998, 1999, 2000 Free Software Foundation, Inc.
d128 12
@


1.6
log
@2000-11-16  Kazu Hirata  <kazu@@hxi.com>

	* dwarf1.c: Fix formatting.
	* dwarf2.c: Likewise.
@
text
@d461 1
a461 1
  bfd_vma addr = offset + section->vma;
@


1.6.2.1
log
@Merge from mainline.
@
text
@d461 1
a461 1
  unsigned long addr = (unsigned long)(offset + section->vma);
@


1.5
log
@Ryan Bradetich's warning fixes.
@
text
@d4 1
a4 1
Written by Gavin Romig-Koch of Cygnus Solutions (gavin@@cygnus.com).  
d29 1
a29 1
/* dwarf1_debug is the starting point for all dwarf1 info. */
d33 1
a33 1
  /* The bfd we are working with. */
d36 1
a36 1
  /* List of already parsed compilation units. */
d39 2
a40 2
  /* The buffer for the .debug section. 
     Zero indicates that the .debug section failed to load. */
d43 1
a43 1
  /* Pointer to the end of the .debug_info section memory buffer. */
d46 1
a46 1
  /* The buffer for the .line section. */
d49 1
a49 1
  /* End of that buffer. */
d52 1
a52 1
  /* The current or next unread die within the .debug section. */
d56 1
a56 1
/* One dwarf1_unit for each parsed compilation unit die. */
d59 1
a59 1
  /* Linked starting from stash->lastUnit. */
d62 1
a62 1
  /* Name of the compilation unit. */
d65 1
a65 1
  /* The highest and lowest address used in the compilation unit. */
d72 1
a72 1
  /* If any, the offset of the line number table in the .line section. */
d75 1
a75 1
  /* If non-zero, a pointer to the first child of this unit. */
d81 1
a81 1
  /* The decoded line number table (line_count entries). */
d84 1
a84 1
  /* The list of functions in this unit. */
a87 2


d91 1
a91 1
  /* Linked starting from aUnit->func_list. */
d93 2
a94 2
  
  /* Name of function. */
d96 2
a97 2
  
  /* The highest and lowest address used in the compilation unit. */
d102 1
a102 2

/* Used to return info about a parsed die. */
d109 3
a111 3
  
  char* name; 
  
d117 1
a117 2

/* Parsed line number information. */
d119 1
a119 1
  /* First address in the line. */
d122 1
a122 1
  /* The line number. */
d126 1
a126 2

/* Find the form of an attr, from the attr field. */
a128 1

d130 1
a130 1
   then attached into the 'stash' at 'stash->lastUnit'. */
d136 2
a137 2
  struct dwarf1_unit* x = 
    (struct dwarf1_unit*) bfd_zalloc (stash->abfd, 
d146 1
a146 1
   attached into 'aUnit' at 'aUnit->func_list'. */
d153 2
a154 2
  struct dwarf1_func* x = 
    (struct dwarf1_func*) bfd_zalloc (stash->abfd, 
d158 1
a158 1
  
d165 1
a165 1
   points to was pulled from. 
d167 1
a167 1
   Return false if the die is invalidly formatted; true otherwise. */
d178 1
a178 1
  memset (aDieInfo,0,sizeof(*aDieInfo));
d180 1
a180 1
  /* First comes the length. */
d187 1
a187 1
      /* Just padding bytes. */
d192 1
a192 1
  /* Then the tag. */
d195 2
a196 2
      
  /* Then the attributes. */
d200 2
a201 2
      
      /* Parse the attribute based on its form.  This section 
d203 1
a203 1
	 actual attributes that we care about. */
d207 1
a207 1
      
d252 3
a254 3
   into 'aUnit->linenumber_table'.  Return false if an error 
   occurs; true otherwise. */
  
d262 1
a262 1
  /* Load the ".line" section from the bfd if we haven't already. */ 
d267 1
a267 1
      
d271 1
a271 1
	  
d274 1
a274 1
      
d295 1
a295 1
      /* First comes the length. */
d299 1
a299 1
      /* Then the base address for each address in the table. */
d307 1
a307 1
      /* Allocate an array for the entries. */
d309 1
a309 1
	bfd_alloc (stash->abfd, 
d311 1
a311 1
	
d314 1
a314 1
	  /* A line number. */
d319 1
a319 1
	  /* Skip the position within the line. */
d322 2
a323 2
	  /* And finally the address. */
	  aUnit->linenumber_table[eachLine].addr 
d335 1
a335 1
   Return false if error; true otherwise. */
d350 1
a350 1
	
d353 1
a353 1
	
d360 1
a360 1
	    
d365 1
a365 1
	
d372 1
a372 1
  
d377 1
a377 1
   Return whether we found the line (or a function) without error. */
d380 1
a380 1
dwarf1_unit_find_nearest_line (stash, aUnit, addr, 
d424 2
a425 2
	  for (eachFunc = aUnit->func_list; 
	       eachFunc; 
a441 3



d443 1
a443 1
   Return true if the line is found without error. */
a465 1
  
d471 1
a471 1
      
d474 1
a474 1
      
d477 1
a477 1
      
d483 1
a483 1
	     future calls to this function fail quicker. */
d489 1
a489 1
      
d505 1
a505 1
     or that an error occured while setting up the stash. */
a508 1
  
d511 1
a511 1
     the addr. */
d516 2
a517 2
					      filename_ptr, 
					      functionname_ptr, 
d527 1
a527 1
      
d532 1
a532 1
	  
d538 1
a538 1
	  
d540 3
a542 3
	     not it's sibling. */
	  if (aDieInfo.sibling 
	      && stash->currentDie + aDieInfo.length 
d544 1
a544 1
	      && stash->currentDie + aDieInfo.length 
d551 3
a553 3
	    return dwarf1_unit_find_nearest_line (stash, aUnit, addr, 
						  filename_ptr, 
						  functionname_ptr, 
d556 1
a556 1
      
a564 1

@


1.4
log
@1999-10-15  Andrew Haley  <aph@@cygnus.com>

	* dwarf1.c (parse_die): Fail to parse a die if its length is zero.
@
text
@d2 1
a2 1
   Copyright 1998, 1999 Free Software Foundation, Inc.
d187 1
a187 1
  aDieInfo->length = bfd_get_32 (abfd, xptr);
d199 1
a199 1
  aDieInfo->tag = bfd_get_16 (abfd, xptr);
d211 1
a211 1
      attr = bfd_get_16 (abfd, xptr);
d222 1
a222 1
	    aDieInfo->sibling = bfd_get_32 (abfd, xptr);
d225 1
a225 1
	      aDieInfo->stmt_list_offset = bfd_get_32 (abfd, xptr);
d235 1
a235 1
	    aDieInfo->low_pc = bfd_get_32 (abfd, xptr);
d237 1
a237 1
	    aDieInfo->high_pc = bfd_get_32 (abfd, xptr);
d241 1
a241 1
	  xptr += 2 + bfd_get_16 (abfd, xptr);
d244 1
a244 1
	  xptr += 4 + bfd_get_32 (abfd, xptr);
d279 1
a279 1
      stash->line_section = (unsigned char*) bfd_alloc (stash->abfd, size);
d302 1
a302 1
      tblend = bfd_get_32 (stash->abfd, xptr) + xptr;
d306 1
a306 1
      base = bfd_get_32 (stash->abfd, xptr);
d314 1
a314 1
      aUnit->linenumber_table = (struct linenumber*)
d322 1
a322 1
	    = bfd_get_32 (stash->abfd, xptr);
d330 1
a330 1
	    = base + bfd_get_32 (stash->abfd, xptr);
d498 1
a498 1
      stash->debug_section = (unsigned char*) bfd_alloc (abfd, size);
@


1.3
log
@	* Many files: Changes to avoid gcc warnings: Add ATTRIBUTE_UNUSED
	as appropriate.  Fill in structure initializations.  Add variable
	initializations.  Add casts.
	* dwarf1.c (parse_line_table): Change eachLine to unsigned long.
	(dwarf1_unit_find_nearest_line): Change i to unsigned long.
@
text
@d189 2
@


1.2
log
@	* dwarf1.c (alloc_dwarf1_unit): Allocate using bfd_zalloc.
	* (alloc_dwarf1_func): Likewise.
@
text
@d2 1
a2 1
   Copyright 1998 Free Software Foundation, Inc.
d294 1
a294 1
      int eachLine;
d401 1
a401 1
	  int i;
d457 1
a457 1
     asymbol **symbols;
@


1.1
log
@Initial revision
@
text
@d143 2
a144 2
    (struct dwarf1_unit*) bfd_alloc (stash->abfd, 
				       sizeof (struct dwarf1_unit));
d160 2
a161 2
    (struct dwarf1_func*) bfd_alloc (stash->abfd, 
				  sizeof (struct dwarf1_func));
@


1.1.1.1
log
@19990502 sourceware import
@
text
@@

