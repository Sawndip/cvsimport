head	1.2;
access;
symbols
	msnyder-fork-checkpoint-branch:1.2.0.2
	msnyder-fork-checkpoint-branchpoint:1.2
	jimb-rda-nptl-branch:1.1.0.2;
locks; strict;
comment	@ * @;


1.2
date	2005.06.30.03.24.18;	author jimb;	state Exp;
branches;
next	1.1;

1.1
date	2004.10.26.23.04.44;	author jimb;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2004.10.26.23.04.44;	author jimb;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2004.11.01.04.37.09;	author jimb;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2004.11.01.04.58.32;	author jimb;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Add support for the Linux NPTL (New POSIX Thread Library) thread
implementation.
* arch.h, lwp-pool.c, lwp-pool.h, stock-breakpoints.c:
* stock-breakpoints.h: New files.
* gdbserv-thread-db.h (continue_lwp, singlestep_lwp, attach_lwp)
(stop_lwp): Move these ...
* lwp-ctrl.h: ... to here (new file).
* server.h (struct child_process): Include a pointer to the
architecture object, a breakpoint table, and a pointer to the
"focus thread".
* linux-target.c: Create architecture objects for the i386 and
FRV, and describe breakpoints for those architectures.
#include "arch.h".
[STOCK_BREAKPOINTS]: #include "stock-breakpoints.h".
(allocate_empty_arch): New function.
[X86_LINUX_TARGET] (stock_table_to_x86, x86_table_to_stock)
(stock_bp_to_x86, x86_bp_to_stock, x86_make_bp_table, x86_set_bp)
(x86_delete_bp, x86_bp_hit_p, x86_make_arch): New functions.
(MAKE_ARCH): #define to call x86_make_arch.
[X86_LINUX_TARGET] (stock_table_to_frv, frv_table_to_stock)
(stock_bp_to_frv, frv_bp_to_stock, frv_make_bp_table, frv_set_bp)
(frv_delete_bp, frv_bp_hit_p, frv_make_arch): New functions.
(MAKE_ARCH): #define to call frv_make_arch.
(linux_attach): If MAKE_ARCH is #defined, create an architecture
object for this process.  And if we have an architecture object,
make a breakpoint table.
* thread-db.c: #include <assert.h>, "arch.h", "lwp-ctrl.h", and
"lwp-pool.h".
(struct gdbserv_thread): Remove state-tracking flags 'attached',
'stopped', 'waited', and 'stepping'; all that state is handled
inside lwp-pool.c now.
(add_thread_to_list): Zero the entire newly allocated thread
structure.
(thread_list_lookup_by_lid): Prefer threads whose ti_lid values
are different from that of the main process.
(thread_db_state_str, thread_db_type_str): Don't include
formatting spaces here.
(thread_db_event_str): New function.
(thread_debug_name): New function.
(get_thread_signals): Return a value indicating success or failure.
(ignore_thread_signal): New function.
(using_thread_db_events, create_notification, death_notification)
(get_event_notification, set_event_breakpoint)
(insert_thread_db_event_breakpoints)
(delete_thread_db_event_breakpoints, request_thread_db_events)
(hit_thread_db_event_breakpoint, handle_thread_db_event): New
variables and functions, for using libthread_db's event interface.
(thread_db_open): Gather error-handling code next to the operation
that might fail.  Decide here whether to use the signal-based
debugging interface, or the event-based debugging interface.
(stop_thread, stop_all_threads, struct event_list, pending_events)
(pending_events_listsize, pending_events_top, add_pending_event)
(select_pending_event, send_pending_signals, wait_all_threads):
Deleted; we now use lwp-pool.c for all this.
(attach_thread, continue_thread, continue_all_threads)
(singlestep_thread, thread_db_singlestep_program)
(thread_db_continue_thread, thread_db_singlestep_thread): Use the
lwp-pool.c functions, instead of calling the lwp manipulation
functions directly and managing state here.  Keep track of the
focus thread.
(find_new_threads_callback): Always call attach_thread.  If we're
using libthread_db events, enable event reporting for the new
thread.
(update_thread_list): Take the current child process as an
argument; if the current focus thread disappears, clear the
process's focus_thread pointer.
(thread_db_thread_next): Pass the current child process to
update_thread_list.
(thread_db_thread_info): Reformat thread descriptions.  Mark
threads whose pid is equal to the process ID.
(thread_db_check_child_state): Use the lwp-pool functions, instead
of calling waitpid and the old stop-all-threads functions.  If we
have a focus thread, only check for a status on that thread.
Check for libthread_db events.  Use ignore_thread_signal, instead
of writing it out.
(thread_db_break_program): New function.
(thread_db_attach): Register it as the target's 'break_program'
method.  Always preload the symbol list with the names we'll need
for the signal-based interface, even if we have td_symbol_list.
Use lwp_pool_new_stopped to register the initial thread.  Clear
the focus thread.
* ptrace-target.c: #define _GNU_SOURCE and #include <sys/types.h>
and <linux/unistd.h>, to get declarations for the functions we
need.
#include "lwp-ctrl.h".
(continue_lwp, singlestep_lwp, attach_lwp): Remove
unnecessary 'extern' keywords.  Move pre-function comments to
lwp-ctrl.h.  Take an ordinary 'pid_t', not an 'lwpid_t', since
we're calling ptrace / tkill, and that's what they expect; rename
arguments accordingly.  Preserve value of errno across calls to
fprintf when reporting errors.
(kill_lwp): All the above, and use tkill system call if available.
* configure.in: Whenever we include thread-db.o in TARGET_MODULES,
also include lwp-pool.o.
On i386 and FRV Linux, use the stock-breakpoints module.
* config.in: Add template for STOCK_BREAKPOINTS.
* Makefile.am (EXTRA_rda_SOURCES): Include stock-breakpoints.c.
* Makefile.in, aclocal.m4, configure: Regenerated.
@
text
@/* stock-breakpoints.c

   Copyright 2004 Red Hat, Inc.

   This file is part of RDA, the Red Hat Debug Agent (and library).

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.
   
   Alternative licenses for RDA may be arranged by contacting Red Hat,
   Inc.  */

#include "config.h"

#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#include "gdbserv.h"
#include "gdbserv-target.h"
#include "gdbserv-utils.h"
#include "server.h"
#include "stock-breakpoints.h"

struct stock_bp
{
  /* All breakpoints in a table are kept in a doubly-linked ring, with
     the table's HEAD member as the head of the ring.  */
  struct stock_bp *prev, *next;

  /* The table to which this breakpoint belongs.  */
  struct stock_bp_table *table;

  /* The address at which this breakpoint is set.  */
  struct gdbserv_reg addr;

  /* The reference count for this breakpoint.  (You must delete this
     breakpoint this many times before it actually goes away.)  */
  int ref_count;

  /* The original contents of the memory at the breakpoint address,
     before we wrote the breakpoint instructions into it.  The length
     is taken from TABLE.  */
  void *saved;
};

struct stock_bp_table
{
  /* The head of a doubly-linked ring of breakpoints.  */
  struct stock_bp head;

  /* The gdbserver whose breakpoints we manage, and a target to use to
     talk to it.  */
  struct gdbserv *serv;
  struct gdbserv_target *target;

  /* The target we use to operate on PROCESS.  */
  
  /* The breakpoint instruction we store, and its length.  */
  size_t bp_insn_len;
  void *bp_insn_data;
};


struct stock_bp_table *
stock_bp_make_table (struct gdbserv *serv,
		     struct gdbserv_target *target)
{
  struct stock_bp_table *t = malloc (sizeof (*t));

  memset (t, 0, sizeof (*t));
  t->head.prev = t->head.next = &t->head;
  t->serv = serv;
  t->target = target;
  t->bp_insn_len = 0;

  return t;
}


struct gdbserv *
stock_bp_table_serv (struct stock_bp_table *table)
{
  return table->serv;
}


struct gdbserv_target *
stock_bp_table_target (struct stock_bp_table *table)
{
  return table->target;
}


void
stock_bp_set_bp_insn (struct stock_bp_table *t,
		      size_t len, void *data)
{
  t->bp_insn_len = len;
  t->bp_insn_data = malloc (len);
  memcpy (t->bp_insn_data, data, len);
}


struct stock_bp *
stock_bp_set_bp (struct stock_bp_table *table,
		 struct gdbserv_reg *addr)
{
  struct gdbserv *serv = table->serv;
  struct gdbserv_target *target = table->target;
  struct stock_bp *b;
  unsigned long long addr_int;
  int status;

  gdbserv_reg_to_ulonglong (serv, addr, &addr_int);

  /* Search the breakpoint table for a breakpoint at this address.  */
  for (b = table->head.next; b != &table->head; b = b->next)
    {
      unsigned long long bp_addr_int;

      gdbserv_reg_to_ulonglong (serv, &b->addr, &bp_addr_int);
      if (addr_int == bp_addr_int)
	{
	  /* We've found an extant breakpoint at the same address.
	     Increment its reference count, and return it.  */
	  b->ref_count++;
	  return b;
	}

      /* If this breakpoint partially overlaps the one we're
	 inserting, that seems like either a mistake, or something
	 that arch-specific code would need to deal with (in which
	 case this breakpoint implementation is not appropriate for
	 that architecture), so print a warning.

	 Keep in mind the oddities of unsigned arithmetic and
	 comparison; think carefully before simplifying this.  */
      if (bp_addr_int - addr_int < table->bp_insn_len
	  || addr_int - bp_addr_int < table->bp_insn_len)
	fprintf (stderr, "warning: new breakpoint at 0x%llx overlaps "
		 "existing breakpoint at 0x%llx\n",
		 addr_int, bp_addr_int);
    }

  /* We didn't find any existing breakpoint, so let's make a new one.  */
  b = malloc (sizeof (*b));

  memset (b, 0, sizeof (*b));
  b->next = table->head.next;
  b->prev = &table->head;
  b->table = table;
  memcpy (&b->addr, addr, sizeof (b->addr));
  b->ref_count = 1;
  b->saved = malloc (table->bp_insn_len);

  /* Save the old contents of the memory at addr.  */
  status = target->get_mem (serv, addr, b->saved, table->bp_insn_len);
  if (status != table->bp_insn_len)
    {
      fprintf (stderr,
	       "warning: couldn't save memory under breakpoint at 0x%llx\n",
	       addr_int);
      free (b->saved);
      free (b);
      return 0;
    }

  /* Write the breakpoint instruction.  */
  status = target->set_mem (serv, addr,
			    table->bp_insn_data, table->bp_insn_len);
  if (status != table->bp_insn_len)
    {
      fprintf (stderr,
	       "warning: couldn't write breakpoint to memory at 0x%llx\n",
	       addr_int);
      free (b->saved);
      free (b);
      return 0;
    }

  /* Flush the instruction caches.  */
  target->flush_i_cache (serv);

  /* Link the successfully-inserted breakpoint into the table.  */
  table->head.next->prev = b;
  table->head.next = b;

  return b;
}


int
stock_bp_delete_bp (struct stock_bp *b)
{
  struct stock_bp_table *table = b->table;
  struct gdbserv *serv = table->serv;
  struct gdbserv_target *target = table->target;
  int status;

  /* Drop a reference to this breakpoint.  */
  if (--b->ref_count > 0)
    /* There are still other references to this breakpoint, so leave
       it in.  */
    return 0;

  /* Unlink this breakpoint from its table.  */
  b->next->prev = b->prev;
  b->prev->next = b->next;

  /* Write the original breakpoint contents back to memory.  */
  status = target->set_mem (serv, &b->addr, b->saved, table->bp_insn_len);
  if (status != table->bp_insn_len)
    {
      unsigned long long bp_addr_int;

      gdbserv_reg_to_ulonglong (serv, &b->addr, &bp_addr_int);
      fprintf (stderr,
	       "warning: couldn't remove breakpoint at 0x%llx\n",
	       bp_addr_int);

      free (b->saved);
      free (b);
      return -1;
    }

  /* Flush the instruction caches.  */
  target->flush_i_cache (serv);

  free (b->saved);
  free (b);
  return 0;
}


struct stock_bp_table *
stock_bp_table (struct stock_bp *breakpoint)
{
  return breakpoint->table;
}


void
stock_bp_addr (struct gdbserv_reg *addr,
	       struct stock_bp *breakpoint)
{
  memcpy (addr, &breakpoint->addr, sizeof (*addr));
}
@


1.1
log
@file stock-breakpoints.c was initially added on branch jimb-rda-nptl-branch.
@
text
@d1 260
@


1.1.2.1
log
@Add an architecture object to the Unix server.
* arch.h: New header file.
* server.h (struct arch): New forward struct declaration.
(struct child_process): Add an 'arch' member to the process.
* thread-db.c: #include arch.h.
* linux-target.c: #include arch.h.
(allocate_empty_arch): New function.
(x86_make_arch): New function.
(MAKE_ARCH): New #definition.
(linux_attach): Initialize process's architecture.

Provide arch-independent framework for breakpoints.
* server.h (struct arch_bp_table): New forward struct declaration.
(struct child_process): New member: 'breakpoint_table'.
* linux-target.c (linux_attach): Initialize process's breakpoint
table, if the architecture defines a breakpoint table constructor.
* arch.h (struct arch): Add fields pointing to breakpoint functions.

Provide a module implementing breakpoints for architectures that
support a simple software breakpoint model ("patch these bytes
into the instruction stream").
* stock-breakpoints.h, stock-breakpoints.c: New files.
* linux-target.c: If STOCK_BREAKPOINTS is #defined, then #include
"stock-breakpoints.h".
* Makefile.am (EXTRA_rda_SOURCES): Add stock-breakpoints.c.
* Makefile.in: Updated.

Define x86 breakpoint functions using the stock-breakpoints.c
model.
* configure.in: When configuring for an x86 target, include
stock-breakpoints.o in the mix, and #define STOCK_BREAKPOINTS.
* configure: Regenerated.
* config.in (STOCK_BREAKPOINTS): Provide #definition template.
* linux-target.c (stock_table_to_x86, x86_table_to_stock,
stock_bp_to_x86, x86_bp_to_stock, x86_make_bp_table, x86_set_bp,
x86_delete_bp, x86_bp_hit_p): New functions.
(x86_make_arch): Register the latter four as our breakpoint
methods.

Use the libthread_db event interface to communicate with the
thread library, if the old signal-based interface is not
supported.
* thread-db.c: #include <assert.h>.
(thread_db_event_str): New function.
(get_target_int_by_name, set_target_int_by_name, get_thread_signals)
(cancel_signal, restart_signal, debug_signal): Move these to just
before thread_db_dlopen; get_thread_signals is a subroutine of that.
(using_thread_db_events, create_notification, death_notification,
create_event_breakpoint, death_event_breakpoint): New global vars.
(get_event_notification, set_event_breakpoint)
(insert_thread_db_event_breakpoints)
(delete_thread_db_event_breakpoints, request_thread_db_events)
(hit_thread_db_event_breakpoint): New functions.
(thread_db_open): Call get_thread_signals, and if that fails, call
request_thread_db_events.
(struct event_list): Add 'thread_db_event' member.
(add_pending_event): Initialize it.
(delete_pending_event, handle_thread_db_events): New functions.
(find_new_threads_callback): If we're using the event interface,
enable event reporting on each new thread we find.
(select_pending_event): Return a value to indicate whether we
selected any event at all.
(continue_all_threads): Send a restart signal only if we're using
the signal-based interface.
(thread_db_check_child_state): If we're using the libthread_db
event interface to communicate with the inferior thread library,
check for those events here.  If select_pending_event says it
didn't find anything interesting, that means we consumed all the
reportable events; continue the program silently.
* ptrace-target.c: #include <sys/types.h> and <linux/unistd.h>.
(tkill): Generate code for this syscall.
(stop_lwp): Use tkill instead of kill.

* thread-db.c (thread_db_check_child_state): Call stop_all_threads
before calling update_thread_list, so RDA will have to compete for
CPU with fewer running threads.

* thread-db.c (wait_all_threads): Move calls to
select_pending_event and send_pending_signals from here...
(thread_db_check_child_state): To here.

* thread-db.c (ignore_thread_signal): New function.
(thread_db_check_child_state): Call it, instead of writing it out.

* thread-db.c (thread_db_open): Return 0 on success, -1 on
failure, like most of the other int-valued functions in this file,
and like most system calls.

* thread-db.c (struct gdbserv_thread): Doc fixes.

* thread-db.c: #include "gdbserv-utils.h", to get prototypes for
the 'struct gdbserv_reg' manipulation functions.

* thread-db.c (thread_db_noisy): Initialize to 1.

* thread-db.c (thread_debug_name): New function.
(find_new_threads_callback): If noisy, report new threads.
(stop_thread): If noisy, report stopping threads.
(select_pending_event): If noisy, report what we selected.
(wait_all_threads): If noisy, report before each thread we wait
for.

* thread-db.c (stop_all_threads): Doc fixes.

* aclocal.m4: Regenerated.
@
text
@a0 256
/* stock-breakpoints.c

   Copyright 2004 Red Hat, Inc.

   This file is part of RDA, the Red Hat Debug Agent (and library).

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.
   
   Alternative licenses for RDA may be arranged by contacting Red Hat,
   Inc.  */

#include "config.h"

#include <stdlib.h>
#include <stdio.h>

#include "gdbserv.h"
#include "gdbserv-target.h"
#include "server.h"
#include "stock-breakpoints.h"

struct stock_bp
{
  /* All breakpoints in a table are kept in a doubly-linked ring, with
     the table's HEAD member as the head of the ring.  */
  struct stock_bp *prev, *next;

  /* The table to which this breakpoint belongs.  */
  struct stock_bp_table *table;

  /* The address at which this breakpoint is set.  */
  struct gdbserv_reg addr;

  /* The reference count for this breakpoint.  (You must delete this
     breakpoint this many times before it actually goes away.)  */
  int ref_count;

  /* The original contents of the memory at the breakpoint address,
     before we wrote the breakpoint instructions into it.  The length
     is taken from TABLE.  */
  void *saved;
};

struct stock_bp_table
{
  /* The head of a doubly-linked ring of breakpoints.  */
  struct stock_bp head;

  /* The gdbserver whose breakpoints we manage, and a target to use to
     talk to it.  */
  struct gdbserv *serv;
  struct gdbserv_target *target;

  /* The target we use to operate on PROCESS.  */
  
  /* The breakpoint instruction we store, and its length.  */
  size_t bp_insn_len;
  void *bp_insn_data;
};


struct stock_bp_table *
stock_bp_make_table (struct gdbserv *serv,
		     struct gdbserv_target *target)
{
  struct stock_bp_table *t = malloc (sizeof (*t));

  memset (t, 0, sizeof (*t));
  t->head.prev = t->head.next = &t->head;
  t->serv = serv;
  t->target = target;
  t->bp_insn_len = 0;
}


struct gdbserv *
stock_bp_table_serv (struct stock_bp_table *table)
{
  return table->serv;
}


struct gdbserv_target *
stock_bp_table_target (struct stock_bp_table *table)
{
  return table->target;
}


void
stock_bp_set_bp_insn (struct stock_bp_table *t,
		      size_t len, void *data)
{
  t->bp_insn_len = len;
  t->bp_insn_data = malloc (len);
  memcpy (t->bp_insn_data, data, len);
}


struct stock_bp *
stock_bp_set_bp (struct stock_bp_table *table,
		 struct gdbserv_reg *addr)
{
  struct gdbserv *serv = table->serv;
  struct gdbserv_target *target = table->target;
  struct stock_bp *b;
  unsigned long long addr_int;
  int status;

  gdbserv_reg_to_ulonglong (serv, addr, &addr_int);

  /* Search the breakpoint table for a breakpoint at this address.  */
  for (b = table->head.next; b != &table->head; b = b->next)
    {
      unsigned long long bp_addr_int;

      gdbserv_reg_to_ulonglong (serv, &b->addr, &bp_addr_int);
      if (addr_int == bp_addr_int)
	{
	  /* We've found an extant breakpoint at the same address.
	     Increment its reference count, and return it.  */
	  b->ref_count++;
	  return b;
	}

      /* If this breakpoint partially overlaps the one we're
	 inserting, that seems like either a mistake, or something
	 that arch-specific code would need to deal with (in which
	 case this breakpoint implementation is not appropriate for
	 that architecture), so print a warning.

	 Keep in mind the oddities of unsigned arithmetic and
	 comparison; think carefully before simplifying this.  */
      if (bp_addr_int - addr_int < table->bp_insn_len
	  || addr_int - bp_addr_int < table->bp_insn_len)
	fprintf (stderr, "warning: new breakpoint at 0x%llx overlaps "
		 "existing breakpoint at 0x%llx\n",
		 addr_int, bp_addr_int);
    }

  /* We didn't find any existing breakpoint, so let's make a new one.  */
  b = malloc (sizeof (*b));

  memset (b, 0, sizeof (*b));
  b->next = table->head.next;
  b->prev = &table->head;
  b->table = table;
  memcpy (&b->addr, addr, sizeof (b->addr));
  b->ref_count = 1;
  b->saved = malloc (table->bp_insn_len);

  /* Save the old contents of the memory at addr.  */
  status = target->get_mem (serv, addr, b->saved, table->bp_insn_len);
  if (status != table->bp_insn_len)
    {
      fprintf (stderr,
	       "warning: couldn't save memory under breakpoint at 0x%llx\n",
	       addr_int);
      free (b->saved);
      free (b);
      return 0;
    }

  /* Write the breakpoint instruction.  */
  status = target->set_mem (serv, addr,
			    table->bp_insn_data, table->bp_insn_len);
  if (status != table->bp_insn_len)
    {
      fprintf (stderr,
	       "warning: couldn't write breakpoint to memory at 0x%llx\n",
	       addr_int);
      free (b->saved);
      free (b);
      return 0;
    }

  /* Flush the instruction caches.  */
  target->flush_i_cache (serv);

  /* Link the successfully-inserted breakpoint into the table.  */
  table->head.next->prev = b;
  table->head.next = b;

  return b;
}


int
stock_bp_delete_bp (struct stock_bp *b)
{
  struct stock_bp_table *table = b->table;
  struct gdbserv *serv = table->serv;
  struct gdbserv_target *target = table->target;
  int status;

  /* Drop a reference to this breakpoint.  */
  if (--b->ref_count > 0)
    /* There are still other references to this breakpoint, so leave
       it in.  */
    return 0;

  /* Unlink this breakpoint from its table.  */
  b->next->prev = b->prev;
  b->prev->next = b->next;

  /* Write the original breakpoint contents back to memory.  */
  status = target->set_mem (serv, &b->addr, b->saved, table->bp_insn_len);
  if (status != table->bp_insn_len)
    {
      unsigned long long bp_addr_int;

      gdbserv_reg_to_ulonglong (serv, &b->addr, &bp_addr_int);
      fprintf (stderr,
	       "warning: couldn't remove breakpoint at 0x%llx\n",
	       bp_addr_int);

      free (b->saved);
      free (b);
      return -1;
    }

  /* Flush the instruction caches.  */
  target->flush_i_cache (serv);

  free (b->saved);
  free (b);
  return 0;
}


struct stock_bp_table *
stock_bp_table (struct stock_bp *breakpoint)
{
  return breakpoint->table;
}


void
stock_bp_addr (struct gdbserv_reg *addr,
	       struct stock_bp *breakpoint)
{
  memcpy (addr, &breakpoint->addr, sizeof (*addr));
}
@


1.1.2.2
log
@* stock-breakpoints.c: #include all headers necessary to get
prototypes for functions used in this file.
* thread-db.c: Same.
@
text
@a28 1
#include <string.h>
a31 1
#include "gdbserv-utils.h"
@


1.1.2.3
log
@* stock-breakpoints.c (stock_bp_make_table): Bother to return the
breakpoint table constructed.
@
text
@a87 2

  return t;
@


