head	1.3;
access;
symbols
	msnyder-fork-checkpoint-branch:1.3.0.6
	msnyder-fork-checkpoint-branchpoint:1.3
	msnyder-tracepoint-checkpoint-branch:1.3.0.4
	msnyder-tracepoint-checkpoint-branchpoint:1.3
	jimb-rda-nptl-branch:1.3.0.2
	jimb-rda-nptl-branchpoint:1.3;
locks; strict;
comment	@ * @;


1.3
date	2003.02.07.23.03.09;	author kevinb;	state Exp;
branches;
next	1.2;

1.2
date	2002.12.18.20.25.11;	author kevinb;	state Exp;
branches;
next	1.1;

1.1
date	2002.08.28.01.22.28;	author kevinb;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Fix mips single step code for mips64 n32 and n64 targets.  Adjust register
information.
@
text
@/* ptrace-target.h

   Copyright 2001, 2002 Red Hat, Inc.

   This file is part of RDA, the Red Hat Debug Agent (and library).

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.
   
   Alternative licenses for RDA may be arranged by contacting Red Hat,
   Inc.  */

#include <sys/ptrace.h>
#include <sys/user.h>

/* Shared definitions for an RDA based native gdb server using ptrace. */

#ifdef PTRACE_XFER_TYPE_LONG
typedef long ptrace_xfer_type;
#endif

#ifdef PTRACE_XFER_TYPE_LONG_LONG
typedef long long ptrace_xfer_type;
#endif

#ifdef PTRACE_ARG1_TYPE_LONG
typedef long ptrace_arg1_type;
#endif

#ifdef PTRACE_ARG1_TYPE_LONG_LONG
typedef long long ptrace_arg1_type;
#endif

#ifdef PTRACE_ARG2_TYPE_LONG
typedef long ptrace_arg2_type;
#endif

#ifdef PTRACE_ARG2_TYPE_LONG_LONG
typedef long long ptrace_arg2_type;
#endif

#ifdef PTRACE_ARG3_TYPE_LONG
typedef long ptrace_arg3_type;
#endif

#ifdef PTRACE_ARG3_TYPE_LONG_LONG
typedef long long ptrace_arg3_type;
#endif

#ifdef PTRACE_ARG4_TYPE_LONG
typedef long ptrace_arg4_type;
#endif

#ifdef PTRACE_ARG4_TYPE_LONG_LONG
typedef long long ptrace_arg4_type;
#endif

int ptrace_write_user (struct gdbserv *serv, int pid, ptrace_arg3_type addr,
                       int len, const void *buff);
int ptrace_read_user (struct gdbserv *serv, int pid, ptrace_arg3_type addr,
                      int len, void *buff);
int ptrace_get_gregs (struct gdbserv *serv, int alt_pid, void *buff);
int ptrace_set_gregs (struct gdbserv *serv, int alt_pid, const void *buff);
int ptrace_get_fpregs (struct gdbserv *serv, int alt_pid, void *buff);
int ptrace_set_fpregs (struct gdbserv *serv, int alt_pid,  const void *buff);
int ptrace_get_fpxregs (struct gdbserv *serv, int alt_pid, void *buff);
int ptrace_set_fpxregs (struct gdbserv *serv, int alt_pid, const void *buff);
int ptrace_check_child_state (struct child_process *process);
long ptrace_set_mem (struct gdbserv *serv, struct gdbserv_reg *addr, void *data, long len);
long ptrace_get_mem (struct gdbserv *serv, struct gdbserv_reg *addr, void *data, long len);
@


1.2
log
@	* ptrace-target.h, ptrace-target.c (ptrace_write_user)
	(ptrace_read_user): Add struct gdbserv argument.
	* linux-target.c: Fix all callers (and callers of callers).
	* ptrace-target.c (ptrace_write_user, ptrace_read_user): Add
	debugging printf()s.
	(ptrace_xfer_mem): Fix debugging printf()s so that they'll print
	useful results when sizeof (long long) is the same as
	sizeof (ptrace_xfer_type).
	(ptrace_xfer_mem): Decode address using gdbserv_host_bytes_from_reg()
	instead of gdbserv_reg_to_ulong().
@
text
@d81 2
@


1.1
log
@Added files comprising RDA.
@
text
@d70 4
a73 2
int ptrace_write_user (int, ptrace_arg3_type, int, const void *);
int ptrace_read_user (int, ptrace_arg3_type, int, void *);
@

