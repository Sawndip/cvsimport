head	1.4;
access;
symbols
	msnyder-fork-checkpoint-branch:1.3.0.2
	msnyder-fork-checkpoint-branchpoint:1.3
	jimb-rda-nptl-branch:1.1.0.2;
locks; strict;
comment	@ * @;


1.4
date	2012.06.14.20.21.57;	author kevinb;	state Exp;
branches;
next	1.3;

1.3
date	2005.11.08.21.58.36;	author kevinb;	state Exp;
branches;
next	1.2;

1.2
date	2005.06.30.03.24.18;	author jimb;	state Exp;
branches;
next	1.1;

1.1
date	2004.11.23.06.02.19;	author jimb;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2004.11.23.06.02.19;	author jimb;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2004.11.29.19.25.02;	author jimb;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2004.11.29.19.36.22;	author jimb;	state Exp;
branches;
next	1.1.2.4;

1.1.2.4
date	2004.12.03.21.36.40;	author jimb;	state Exp;
branches;
next	;


desc
@@


1.4
log
@	* lwp-pool.c (struct lwp): Add new field `disabled'.
	(empty_lwp_slot): New static global.
	(hash_empty_slot, resize_hash, lwp_pool_stop_all)
	(lwp_pool_continue_all, clear_all_do_step_flags)
	(hash_find): Rename to hash_find_1.  Add parameter `create_p'.
	Initialize `disabled' field.
	(hash_find, hash_find_no_create, lwp_pool_disable_lwp)
	(lwp_pool_enable_lwp): New functions.
	(hash_delete): Revise method used for deleting a slot from
	the hash table.
	(lwp_pool_continue_all): Don't continue disabled LWPs.
	(lwp_pool_continue_lwp): Print a warning instead of an error, and
	then only when LWP Pool diagnostics are enabled when attempting
	to continue a LWP with the state of
	lwp_state_stopped_stop_pending_interesting.
	* lwp-pool.h (lwp_pool_disable_lwp, lwp_pool_enable_lwp): Declare.
	* thread-db.c (find_new_threads_callback): Adjust thread
	deletion / reuse message.
	(update_thread_list): Disable continuation of zombie threads.
	(thread_db_break_program): Enable diagnostic message for "monitor
	thread-db-noisy".  Use kill_lwp() instead of kill().
	(thread_db_check_child_state): Don't stop on signals from zombie
	threads.
@
text
@/* lwp-pool.h --- interface to a stoppable, waitable LWP pool.

   Copyright 2004 Red Hat, Inc.

   This file is part of RDA, the Red Hat Debug Agent (and library).

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.
   
   Alternative licenses for RDA may be arranged by contacting Red Hat,
   Inc.  */

#ifndef RDA_UNIX_LWP_POOL_H
#define RDA_UNIX_LWP_POOL_H

#include <sys/types.h>
#include <sys/wait.h>

struct gdbserv;

/* These functions manage a set of LWPs that you can wait for for á là
   waitpid, but that you can also stop and continue as a group without
   disturbing individual threads' wait statuses.

   Here we use "LWP" to mean the kernel-level thingy that is running
   code, and "thread" to mean the POSIX threads / libthread_db-level
   object.  The Linux kernel calls an 'LWP' a 'thread', which would be
   confusing.

   The LWPs must be either children of the calling process, or
   processes we have attached to --- something we will hear about when
   we call 'waitpid'.

   We have separate tables for Unix LWP's and libthread_db threads,
   because even though standard Linux distributions have never used
   M:N threads, there still isn't a simple 1:1 relationship between
   them.  Before the thread library has been loaded and initialized
   itself, you have an LWP with no thread.  After a thread has exited,
   but before any other thread has joined with it, you can have a
   thread with no LWP.  Add that to the way libthread_db reports the
   id of an exited LWP as being equal to ps_getpid (proc_handle), and
   it becomes worthwhile having a clear separation between the two.  */


/* Add PID to the LWP pool, assuming that PID is stopped, and the
   uninteresting wait status has been received (and thrown away).  Use
   this for a child that has been forked, and where we've waited for
   the exec SIGSTOP.  */
void lwp_pool_new_stopped (pid_t pid);


/* Attach to PID, add it to the LWP pool, and wait for it to stop.  If
   PID is already in the pool, do nothing and return 0.  If PID was
   not already in the pool and we successfully attached to it, return
   1.  On failure, return -1 and set errno.

   If there is an interesting wait status available for PID,
   lwp_pool_waitpid will report it, but the wait status caused by the
   attach is handled internally, and will not be reported via
   lwp_pool_waitpid.  */
int lwp_pool_attach (struct gdbserv *serv, pid_t pid);


/* Do we need a function for detaching from each LWP in the pool
   individually?  */


/* Behave like 'waitpid (PID, STAT_LOC, OPTIONS)', but do not report
   boring wait statuses --- those due to calls to lwp_pool_attach,
   lwp_pool_stop_all, etc.

   PID must be either -1 (wait for any process) or a positive
   integer (wait for the process with that specific pid).

   The only bit that may be set in OPTIONS is WNOHANG.  We need to
   monitor the status of all LWP's, so we add __WALL as appropriate.  */
pid_t lwp_pool_waitpid (struct gdbserv *serv, pid_t pid, int *stat_loc, int options);


/* Stop all running LWP's in the pool.  This function does not return
   until all LWP's are known to be stopped.

   The wait status caused by the stop is handled internally, and will
   not be reported by lwp_pool_waitpid.  */
void lwp_pool_stop_all (struct gdbserv *serv);


/* Continue all stopped, uninteresting LWP's in the pool.
   If some of the LWP's have been resumed with lwp_pool_singlestep or
   lwp_pool_continue, those will be left to continue to run.  */
void lwp_pool_continue_all (struct gdbserv *serv);


/* Continue PID.  If SIGNAL is non-zero, continue it with signal
   SIGNAL.  Return zero on success, -1 on failure.  */
int lwp_pool_continue_lwp (struct gdbserv *serv, pid_t pid, int signal);


/* Continue PID in SERV for one instruction, delivering SIGNAL if it
   is non-zero, and stop with SIGSTOP if/when that instruction has
   been completed.  */
int lwp_pool_singlestep_lwp (struct gdbserv *serv, pid_t pid, int signal);

/* Disable the LWP denoted by PID.  */
void lwp_pool_disable_lwp (pid_t pid);

/* Enable the LWP denoted by PID.  */
void lwp_pool_enable_lwp (pid_t pid);


#endif /* RDA_UNIX_LWP_POOL_H */
@


1.3
log
@Add diagnostic messages.
@
text
@d116 6
@


1.2
log
@Add support for the Linux NPTL (New POSIX Thread Library) thread
implementation.
* arch.h, lwp-pool.c, lwp-pool.h, stock-breakpoints.c:
* stock-breakpoints.h: New files.
* gdbserv-thread-db.h (continue_lwp, singlestep_lwp, attach_lwp)
(stop_lwp): Move these ...
* lwp-ctrl.h: ... to here (new file).
* server.h (struct child_process): Include a pointer to the
architecture object, a breakpoint table, and a pointer to the
"focus thread".
* linux-target.c: Create architecture objects for the i386 and
FRV, and describe breakpoints for those architectures.
#include "arch.h".
[STOCK_BREAKPOINTS]: #include "stock-breakpoints.h".
(allocate_empty_arch): New function.
[X86_LINUX_TARGET] (stock_table_to_x86, x86_table_to_stock)
(stock_bp_to_x86, x86_bp_to_stock, x86_make_bp_table, x86_set_bp)
(x86_delete_bp, x86_bp_hit_p, x86_make_arch): New functions.
(MAKE_ARCH): #define to call x86_make_arch.
[X86_LINUX_TARGET] (stock_table_to_frv, frv_table_to_stock)
(stock_bp_to_frv, frv_bp_to_stock, frv_make_bp_table, frv_set_bp)
(frv_delete_bp, frv_bp_hit_p, frv_make_arch): New functions.
(MAKE_ARCH): #define to call frv_make_arch.
(linux_attach): If MAKE_ARCH is #defined, create an architecture
object for this process.  And if we have an architecture object,
make a breakpoint table.
* thread-db.c: #include <assert.h>, "arch.h", "lwp-ctrl.h", and
"lwp-pool.h".
(struct gdbserv_thread): Remove state-tracking flags 'attached',
'stopped', 'waited', and 'stepping'; all that state is handled
inside lwp-pool.c now.
(add_thread_to_list): Zero the entire newly allocated thread
structure.
(thread_list_lookup_by_lid): Prefer threads whose ti_lid values
are different from that of the main process.
(thread_db_state_str, thread_db_type_str): Don't include
formatting spaces here.
(thread_db_event_str): New function.
(thread_debug_name): New function.
(get_thread_signals): Return a value indicating success or failure.
(ignore_thread_signal): New function.
(using_thread_db_events, create_notification, death_notification)
(get_event_notification, set_event_breakpoint)
(insert_thread_db_event_breakpoints)
(delete_thread_db_event_breakpoints, request_thread_db_events)
(hit_thread_db_event_breakpoint, handle_thread_db_event): New
variables and functions, for using libthread_db's event interface.
(thread_db_open): Gather error-handling code next to the operation
that might fail.  Decide here whether to use the signal-based
debugging interface, or the event-based debugging interface.
(stop_thread, stop_all_threads, struct event_list, pending_events)
(pending_events_listsize, pending_events_top, add_pending_event)
(select_pending_event, send_pending_signals, wait_all_threads):
Deleted; we now use lwp-pool.c for all this.
(attach_thread, continue_thread, continue_all_threads)
(singlestep_thread, thread_db_singlestep_program)
(thread_db_continue_thread, thread_db_singlestep_thread): Use the
lwp-pool.c functions, instead of calling the lwp manipulation
functions directly and managing state here.  Keep track of the
focus thread.
(find_new_threads_callback): Always call attach_thread.  If we're
using libthread_db events, enable event reporting for the new
thread.
(update_thread_list): Take the current child process as an
argument; if the current focus thread disappears, clear the
process's focus_thread pointer.
(thread_db_thread_next): Pass the current child process to
update_thread_list.
(thread_db_thread_info): Reformat thread descriptions.  Mark
threads whose pid is equal to the process ID.
(thread_db_check_child_state): Use the lwp-pool functions, instead
of calling waitpid and the old stop-all-threads functions.  If we
have a focus thread, only check for a status on that thread.
Check for libthread_db events.  Use ignore_thread_signal, instead
of writing it out.
(thread_db_break_program): New function.
(thread_db_attach): Register it as the target's 'break_program'
method.  Always preload the symbol list with the names we'll need
for the signal-based interface, even if we have td_symbol_list.
Use lwp_pool_new_stopped to register the initial thread.  Clear
the focus thread.
* ptrace-target.c: #define _GNU_SOURCE and #include <sys/types.h>
and <linux/unistd.h>, to get declarations for the functions we
need.
#include "lwp-ctrl.h".
(continue_lwp, singlestep_lwp, attach_lwp): Remove
unnecessary 'extern' keywords.  Move pre-function comments to
lwp-ctrl.h.  Take an ordinary 'pid_t', not an 'lwpid_t', since
we're calling ptrace / tkill, and that's what they expect; rename
arguments accordingly.  Preserve value of errno across calls to
fprintf when reporting errors.
(kill_lwp): All the above, and use tkill system call if available.
* configure.in: Whenever we include thread-db.o in TARGET_MODULES,
also include lwp-pool.o.
On i386 and FRV Linux, use the stock-breakpoints module.
* config.in: Add template for STOCK_BREAKPOINTS.
* Makefile.am (EXTRA_rda_SOURCES): Include stock-breakpoints.c.
* Makefile.in, aclocal.m4, configure: Regenerated.
@
text
@d73 1
a73 1
int lwp_pool_attach (pid_t pid);
d89 1
a89 1
pid_t lwp_pool_waitpid (pid_t pid, int *stat_loc, int options);
d97 1
a97 1
void lwp_pool_stop_all (void);
d103 1
a103 1
void lwp_pool_continue_all (void);
d108 1
a108 1
int lwp_pool_continue_lwp (pid_t pid, int signal);
d113 1
a113 4
   been completed.

   The SERV argument is there because singlestep_lwp requires it.
   Inconsistency, bleah.  */
@


1.1
log
@file lwp-pool.h was initially added on branch jimb-rda-nptl-branch.
@
text
@d1 120
@


1.1.2.1
log
@Separate management of kernel-level LWPs from that of libpthread /
libthread_db-level threads.
* lwp-pool.c, lwp-pool.h: New files.
* thread-db.c: #include "lwp-ctrl.h" and "lwp-pool.h".
(struct gdbserv_thread): Delete members 'attached', 'stopped',
'waited', and 'stepping'.  This structure is now just a
'td_thrinfo_t' and a list link.  Describe some quirks in the
meanings of certain 'ti' fields.
(thread_list_lookup_by_lid): Move later in file, so we can use
information directly from our proc handle.  Be skeptical of ZOMBIE
or UNKNOWN threads whose LWP ID is equal to the PID in the proc
handle.
(thread_debug_name): Move later in file, so we can use
thread_db_state_str.
(attach_thread): Use lwp pool functions to attach.  Attach to
zombies.  When using signal-based communication, send the thread
the restart signal immediately.
(find_new_threads_callback): Go ahead and attach to all threads.
The LWP pool functions tolerate attaching to a given LWP more than
once.
(update_thread_list): Take the process as an argument.  If the
focus thread has disappeared, set process->focus_thread to NULL.
(thread_db_thread_next): Pass the process to update_thread_list.
(stop_thread, stop_all_threads, add_pending_event,
delete_pending_event, select_pending_event, send_pending_signals,
wait_all_threads, continue_all_threads): Deleted.
(handle_thread_db_event): Renamed from handle_thread_db_events.
Take the process structure as an argument, and check only for a
thread-db event notification from process->event_thread.  Use LWP
pool functions.
(continue_thread, singlestep_thread): Use LWP pool functions.
(thread_db_continue_program, thread_db_singlestep_program,
thread_db_continue_thread, thread_db_singlestep_thread): Use LWP
pool functions, and update process->focus_thread appropriately.
(thread_db_check_child_state): Use the LWP pool functions.  Rather
than stopping all LWP's, choosing the most interesting events, and
then arranging to re-create all the other wait statuses we got,
just pick the first event we get from lwp_pool_waitpid (either on
the focus thread, if there is one, or on any thread) and report
that.  Use the new handle_thread_db_event function.
(struct event_list, pending_events, pending_events_listsize,
pending_events_top): Deleted; replaced by LWP pool code.
(thread_db_attach): Tell the LWP pool about the PID we're
attaching to.  Clear the focus thread.
* server.h (struct process): New member: 'focus_thread'.
* gdbserv-thread-db.h (continue_lwp, singlestep_lwp, attach_lwp,
stop_lwp): Move declarations from here...
* lwp-ctrl.h: ... to here.  New file.
(kill_lwp): Renamed from stop_lwp; allow caller to specify any
signal.
* ptrace-target.c: #include "lwp-ctrl.h".
(continue_lwp, singlestep_lwp, attach_lwp, stop_lwp): Move
function comments to lwp-ctrl.h, and expand.
* configure.in: Whenever we select 'thread-db.o', select
'lwp-pool.o' as well.
* configure: Regenerated.

* thread-db.c (thread_db_check_child_state): Remove extraneous
call to handle_waitstatus.  Remove extra check for exited main
thread.

* thread-db.c (thread_db_thread_info): List the type and state
before the PID, and mention whether the LWP's PID is equal to that
of the main thread, since ZOMBIE and UNKNOWN threads whose LWP's
PID is equal are probably actually exited threads.

* thread-db.c (add_thread_to_list): Zero out entire structure.

* thread-db.c (thread_db_state_str, thread_db_type_str): Remove
spaces from names; we don't always want them, and the caller can
use printf formatting directives to arrange things as they please.

* ptrace-target.c (continue_lwp, singlestep_lwp, attach_lwp,
stop_lwp): Change arguments from 'lwpid_t' to 'pid_t'.  lwpid_t is
strictly a thread-db type; these are functions that use system
calls, which all expect pid_t.  Rename arguments from 'lwpid' to
'pid'.

* ptrace-target.c: #define _GNU_SOURCE to get declaration for
strsignal.
(kill_lwp): Enhance error reporting.
@
text
@a0 173
/* lwp-pool.h --- interface to a stoppable, waitable LWP pool.

   Copyright 2004 Red Hat, Inc.

   This file is part of RDA, the Red Hat Debug Agent (and library).

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.
   
   Alternative licenses for RDA may be arranged by contacting Red Hat,
   Inc.  */

#ifndef RDA_UNIX_LWP_POOL_H
#define RDA_UNIX_LWP_POOL_H

#include <sys/types.h>
#include <sys/wait.h>

struct gdbserv;

/* These functions manage a set of LWPs that you can wait for for á là
   waitpid, but that you can also stop and continue as a group without
   disturbing individual threads' wait statuses.

   Here we use "LWP" to mean the kernel-level thingy that is running
   code, and "thread" to mean the POSIX threads / libthread_db-level
   object.  The Linux kernel calls an 'LWP' a 'thread', which would be
   confusing.

   The LWPs must be either children of the calling process, or
   processes we have attached to --- something we will hear about when
   we call 'waitpid'.

   We have separate tables for Unix LWP's and libthread_db threads,
   because even though standard Linux distributions have never used
   M:N threads, there still isn't a simple 1:1 relationship between
   them.  Before the thread library has been loaded and initialized
   itself, you have an LWP with no thread.  After a thread has exited,
   but before any other thread has joined with it, you can have a
   thread with no LWP.  Add that to the way libthread_db reports the
   id of an exited LWP as being equal to ps_getpid (proc_handle), and
   it becomes worthwhile having a clear separation between the two.  */


/* Add PID to the LWP pool, assuming that PID is stopped, and the
   uninteresting wait status has been received (and thrown away).  Use
   this for a child that has been forked, and where we've waited for
   the exec SIGSTOP.  */
void lwp_pool_new_stopped (pid_t pid);


/* Attach to PID, add it to the LWP pool, and wait for it to stop.  If
   PID is already in the pool, do nothing and return 0.  If PID was
   not already in the pool and we successfully attached to it, return
   1.  On failure, return -1 and set errno.

   If there is an interesting wait status available for PID,
   lwp_pool_waitpid will report it, but the wait status caused by the
   attach is handled internally, and will not be reported via
   lwp_pool_waitpid.  */
int lwp_pool_attach (pid_t pid);


/* Do we need a function for detaching from each LWP in the pool
   individually?  */


/* Behave like 'waitpid (PID, STAT_LOC, OPTIONS)', but do not report
   boring wait statuses --- those due to calls to lwp_pool_attach,
   lwp_pool_stop_all, etc.

   PID must be either -1 (wait for any process) or a positive
   integer (wait for the process with that specific pid).

   The only bit that may be set in OPTIONS is WNOHANG.  We need to
   monitor the status of all LWP's, so we add __WALL as appropriate.  */
pid_t lwp_pool_waitpid (pid_t pid, int *stat_loc, int options);


/* Stop all running LWP's in the pool.  This function does not return
   until all LWP's are known to be stopped.

   The wait status caused by the stop is handled internally, and will
   not be reported by lwp_pool_waitpid.  */
void lwp_pool_stop_all (void);


/* Continue all stopped, uninteresting LWP's in the pool.
   If some of the LWP's have been resumed with lwp_pool_singlestep or
   lwp_pool_continue, those will be left to continue to run.  */
void lwp_pool_continue_all (void);


/* Continue LWP.  If SIGNAL is non-zero, continue it with signal
   SIGNAL.  Return zero on success, -1 on failure.  */
int lwp_pool_continue_lwp (pid_t pid, int signal);


/* Continue LWP in SERV for one instruction, delivering SIGNAL if it
   is non-zero, and stop with SIGSTOP if/when that instruction has
   been completed.

   The SERV argument is there because singlestep_lwp requires it.
   Inconsistency, bleah.  */
int lwp_pool_singlestep_lwp (struct gdbserv *serv, pid_t lwp, int signal);


/* Under NPTL, LWP's simply disappear, without becoming a zombie or
   producing any wait status.  At the kernel level, we have no way of
   knowing that the LWP's PID is now free and may be reused ---
   perhaps by an entirely different program!  So we need to use the
   death events from libthread_db to help us keep our LWP table clean.

   There are two steps:

   - first, the thread sends RDA a libthread_db TD_DEATH event,
     indicating that it is about to exit.

   - then, the thread takes some pre-negotiated action (hitting a
     breakpoint; making a system call) to notify libthread_db that
     there are events queued it should attend to.

   What's tricky here is that the queueing of the event and the
   notification are not synchronized.  So RDA could easily receive
   TD_DEATH events for several threads when the first of those threads
   performs its notification.  We need to continue to manage the LWPs
   of the remaining threads whose death is foretold (are there any
   named Santiago?) until they have completed their notifications.

   (And since RDA consumes all the events each time a notification is
   received, we should be prepared to receive notifications even when
   the queue is empty.  But that's not our problem here.)

   So the LWP pool code has the following two entry points:

   - The first indicates that a TD_DEATH event has been received for a
     given thread, and that once it has completed its notification, we
     should expect to hear nothing from it again.

   - The second indicates that some LWP, whether marked for death or
     not, has completed its notification.

   So when a thread completes its notification, *and* that thread has
   been marked for death, we should drop it from the LWP pool.  */


/* Indicate that LWP's death has been foretold by a TD_DEATH message
   from libthread_db.  Once we are told that it has completed its
   event notification by a call to lwp_pool_nptl_death_notified, we
   will forget about LWP entirely.  */
void lwp_pool_thread_db_death_event (pid_t lwp);


/* Indicate that LWP has completed its event notification.  LWP must
   be currently stopped.  If LWP's death has been fortold by a call to
   lwp_pool_nptl_death_event, when LWP is continued, we will remove it
   from the LWP pool and forget about it entirely.  */
void lwp_pool_thread_db_death_notified (pid_t lwp);


#endif /* RDA_UNIX_LWP_POOL_H */
@


1.1.2.2
log
@* lwp-pool.h (lwp_pool_singlestep_lwp, lwp_pool_continue_lwp): Doc
fixes.
@
text
@d106 1
a106 1
/* Continue PID.  If SIGNAL is non-zero, continue it with signal
d111 1
a111 1
/* Continue PID in SERV for one instruction, delivering SIGNAL if it
d117 1
a117 1
int lwp_pool_singlestep_lwp (struct gdbserv *serv, pid_t pid, int signal);
@


1.1.2.3
log
@Move libthread_db event-based thread death logic from lwp-pool.c
to thread-db.c, so the former can stay innocent of libthread_db's
details, and limit itself to kernel behavior.
* lwp-pool.h (lwp_pool_continue_and_drop): New declaration.
(lwp_pool_thread_db_death_event,
lwp_pool_thread_db_death_notified): Declarations deleted.
* lwp-pool.c (enum death_state): Move to thread-db.c.
(struct lwp): Delete 'death_state' member.
(hash_find): Don't initialize it.
(interesting_queue): Don't provide an initializer for it.
(check_stop_pending): Don't abort if wait_and_handle didn't put
the thread in a stopped state; that could be caused by kernel
behavior (say, threads exiting silently), not necessarily a logic
flaw in lwp-pool.c.
(death_state_str, debug_report_death_state_change): Move to
thread-db.c.
(lwp_pool_thread_db_death_event,
lwp_pool_thread_db_death_notified): Move to thread-db.c, and
rename (see below).
(check_for_exiting_nptl_lwp): Delete.
(lwp_pool_continue_all, lwp_pool_continue_lwp): Don't call
check_for_exiting_nptl_lwp.
(lwp_pool_continue_and_drop_lwp): New function.
* thread-db.c (enum death_state): Moved here from lwp-pool.c.
(struct gdbserv_thread): New member death_state.
(add_thread_to_list): Initialize it.
(death_state_str, debug_report_death_state_change): Moved here
from lwp-pool.c.
(death_state_got_event, death_state_notified): Renamed from
lwp_pool_thread_db_death_event and lwp_pool_thread_db_death_notified,
and changed to update the death state of a 'struct gdbserv_thread'
instead of a 'struct lwp'.
(handle_thread_db_event): Call death_state_got_event instead of
lwp_pool_thread_db_death_event, and death_state_notified instead
of lwp_pool_thread_db_death_notified.
(continue_thread): If the thread's death state indicates that it's
going to disappear without further ado when continued, continue it
with lwp_pool_continue_and_drop_lwp, not lwp_pool_continue_lwp.
@
text
@a110 17
/* Continue LWP, and forget about it entirely.  LWP should not produce
   any further wait statuses.  If SIGNAL is non-zero, continue it with
   signal SIGNAL.  Return zero on success, -1 on failure.  (On
   failure, the LWP is still present in the LWP pool.)

   Under NPTL, LWP's simply disappear, without becoming a zombie or
   producing any wait status.  At the kernel level, we have no way of
   knowing that the LWP's PID is now free and may be reused ---
   perhaps by an entirely different program!  However, libthread_db
   can provide its clients with events that indicate when a thread is
   about to die; we must rely on that information to help us keep our
   LWP table clean.  Otherwise, we may find ourselves sending signals
   to processes we don't have any relation to, and certainly won't get
   wait statuses for.  */
int lwp_pool_continue_and_drop_lwp (pid_t pid, int signal);


d120 53
@


1.1.2.4
log
@Remove code to handle threads exiting without generating a wait
status; that was a kernel bug, not an intended feature, and
there's no easy way to support both.
* lwp-pool.c (lwp_pool_continue_and_drop): Delete function.
* lwp-pool.h (lwp_pool_continue_and_drop): Delete declaration.
* thread-db.c (enum death_state): Delete type.
(struct gdbserv_thread): Remove 'death_state' member.
(add_thread_to_list): Don't initialize it.
(death_state_str, debug_report_death_state_change,
death_state_got_event, death_state_notified): Delete functions.
(handle_thread_db_event): Don't handle death events specially, and
don't handle the notifying thread specially.
(continue_thread): Don't treat threads whose death has been
foretold and who have completed their notification specially.
@
text
@d111 17
@


