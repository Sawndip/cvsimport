head	1.10;
access;
symbols
	msnyder-fork-checkpoint-branch:1.9.0.2
	msnyder-fork-checkpoint-branchpoint:1.9
	msnyder-tracepoint-checkpoint-branch:1.7.0.2
	msnyder-tracepoint-checkpoint-branchpoint:1.7
	jimb-rda-nptl-branch:1.6.0.2
	jimb-rda-nptl-branchpoint:1.6;
locks; strict;
comment	@# @;


1.10
date	2005.12.07.17.51.48;	author kevinb;	state Exp;
branches;
next	1.9;

1.9
date	2005.08.24.01.14.35;	author kevinb;	state Exp;
branches;
next	1.8;

1.8
date	2005.06.30.03.24.18;	author jimb;	state Exp;
branches;
next	1.7;

1.7
date	2005.03.10.22.52.55;	author jimb;	state Exp;
branches;
next	1.6;

1.6
date	2004.03.10.18.36.47;	author kevinb;	state Exp;
branches
	1.6.2.1;
next	1.5;

1.5
date	2003.11.14.21.17.17;	author kevinb;	state Exp;
branches;
next	1.4;

1.4
date	2003.01.17.20.05.34;	author kevinb;	state Exp;
branches;
next	1.3;

1.3
date	2003.01.16.18.20.19;	author kevinb;	state Exp;
branches;
next	1.2;

1.2
date	2002.11.27.21.28.31;	author kevinb;	state Exp;
branches;
next	1.1;

1.1
date	2002.08.28.01.22.28;	author kevinb;	state Exp;
branches;
next	;

1.6.2.1
date	2004.10.26.23.04.44;	author jimb;	state Exp;
branches;
next	1.6.2.2;

1.6.2.2
date	2004.11.23.06.02.19;	author jimb;	state Exp;
branches;
next	1.6.2.3;

1.6.2.3
date	2005.03.10.22.18.13;	author jimb;	state Exp;
branches;
next	1.6.2.4;

1.6.2.4
date	2005.03.11.00.31.13;	author jimb;	state Exp;
branches;
next	;


desc
@@


1.10
log
@	* Makefile.am (EXTRA_rda_SOURCES): Add diagnostics.c.
	* configure.in (TARGET_MODULES): Add diagnostics.o.
	* Makefile.in, configure: Regenerate.
	* diagnostics.c: New file.
	* diagnostics.h (output_O_packet, print_sigstop_message): New
	functions.
	* ptrace-target.c (diagnostics.h): Include.
	(ptrace_break_program): Call print_sigstop_message().
	* thread_db.c (thread_db_break_program): Likewise.
@
text
@dnl Process this file with autoconf to produce a configure script.
AC_INIT(server.h)
AC_CANONICAL_SYSTEM
# case "$target" in
#    sh-*) CC=sh-linux-gnu-gcc;;
# esac
AM_INIT_AUTOMAKE(rda,0.1)
AM_CONFIG_HEADER(config.h:config.in)

dnl automake support
AM_MAINTAINER_MODE
AM_PROG_LIBTOOL
AC_EXEEXT
AC_LANG_C

arm32=yes
AC_ARG_ENABLE(arm32,
[  --enable-arm32=yes to force arm to 32 bit compilation],
[case "${enableval}" in
  yes) arm32=yes ;;
  no)  arm32=no ;;
  *)
esac])

dnl headers
AC_CHECK_HEADERS(errno.h ptrace.h signal.h string.h strings.h sys/procfs.h \
	asm/reg.h sys/ptrace.h sys/reg.h sys/wait.h )

# Provide descriptions for the various preprocessor symbols.
# (Autoheader is happy even if only one of the AC_DEFINEs has a
# description, so we could put these with the first AC_DEFINE.  But
# it's better to have the descriptions for symbols that are used
# across multiple architectures in an architecture-independent spot;
# we don't want them going away if architectures get dropped.)
AH_TEMPLATE(FPREGSET_T, [Define the type name of an fpregset])
AH_TEMPLATE(HAVE_LWPID_T, [Define if system headers will define lwpid_t])
AH_TEMPLATE(HAVE_PRFPREGSET_T,
            [Define if system headers will define prfpregset_t])
AH_TEMPLATE(HAVE_PRGREGSET_T, [Define if system headers will define psaddr_t])
AH_TEMPLATE(HAVE_PSADDR_T, [Define if system headers will define psaddr_t])
AH_TEMPLATE(LIBTHREAD_DB_SO, [Define name / location of libthread_db.so])
AH_TEMPLATE(LINUX_TARGET, [Define if target is any Linux])
AH_TEMPLATE(PTRACE_ARG1_TYPE_LONG,
            [Define if ptrace arg1 type is long or unsigned long.])
AH_TEMPLATE(PTRACE_ARG1_TYPE_LONG_LONG,
            [Define if ptrace arg1 type is long long or unsigned long long.])
AH_TEMPLATE(PTRACE_ARG2_TYPE_LONG,
            [Define if ptrace arg2 type is long or unsigned long.])
AH_TEMPLATE(PTRACE_ARG2_TYPE_LONG_LONG,
            [Define if ptrace arg2 type is long long or unsigned long long.])
AH_TEMPLATE(PTRACE_ARG3_TYPE_LONG,
            [Define if ptrace arg3 type is long or unsigned long.])
AH_TEMPLATE(PTRACE_ARG3_TYPE_LONG_LONG,
            [Define if ptrace arg3 type is long long or unsigned long long.])
AH_TEMPLATE(PTRACE_ARG4_TYPE_LONG,
            [Define if ptrace arg4 type is long or unsigned long.])
AH_TEMPLATE(PTRACE_ARG4_TYPE_LONG_LONG,
            [Define if ptrace arg4 type is long long or unsigned long long.])
AH_TEMPLATE(PTRACE_XFER_SIZE,
	    [Define for ptrace systems, to the size of a ptrace word.])
AH_TEMPLATE(PTRACE_XFER_TYPE_LONG,
            [Define if ptrace transfer type is long or unsigned long.])
AH_TEMPLATE(PTRACE_XFER_TYPE_LONG_LONG,
          [Define if ptrace transfer type is long long or unsigned long long.])

case "$target" in
  am33_2.0*linux*)
    TARGET_MODULES="linux-target.o thread-db.o lwp-pool.o ptrace-target.o"
    AC_DEFINE(LINUX_TARGET)
    AC_DEFINE(GREGSET_T,  prgregset_t)
    AC_DEFINE(HAVE_LWPID_T)
    AC_DEFINE(HAVE_PSADDR_T)
    AC_DEFINE(HAVE_PRGREGSET_T)
    AC_DEFINE(FPREGSET_T, prfpregset_t)
    AC_DEFINE(HAVE_PRFPREGSET_T)
    ;;
  mips64*linux*)
    TARGET_MODULES="linux-target.o thread-db.o lwp-pool.o ptrace-target.o" 
    AC_DEFINE(LINUX_TARGET)
    AC_DEFINE(GREGSET_T,  prgregset_t)
    AC_DEFINE(FPREGSET_T, prfpregset_t)
    AC_DEFINE(HAVE_LWPID_T)
    AC_DEFINE(HAVE_PSADDR_T)
    AC_DEFINE(HAVE_PRGREGSET_T)
    AC_DEFINE(HAVE_PRFPREGSET_T)
    ;;
  i?86*linux* | \
  powerpc*linux* | \
  arm*linux* | \
  mips*linux* | \
  frv*linux*)
    TARGET_MODULES="linux-target.o thread-db.o lwp-pool.o ptrace-target.o" 
    AC_DEFINE(LINUX_TARGET)
    AC_DEFINE(GREGSET_T,  prgregset_t)
    AC_DEFINE(FPREGSET_T, prfpregset_t)
    AC_DEFINE(HAVE_LWPID_T)
    AC_DEFINE(HAVE_PSADDR_T)
    AC_DEFINE(HAVE_PRGREGSET_T)
    AC_DEFINE(HAVE_PRFPREGSET_T)
    ;;
  *linux*)
    TARGET_MODULES="linux-target.o no-threads.o ptrace-target.o" 
    AC_DEFINE(LINUX_TARGET)
    AC_DEFINE(GREGSET_T,  prgregset_t)
    AC_DEFINE(FPREGSET_T, prfpregset_t)
    AC_DEFINE(HAVE_LWPID_T)
    AC_DEFINE(HAVE_PSADDR_T)
    AC_DEFINE(HAVE_PRGREGSET_T)
    AC_DEFINE(HAVE_PRFPREGSET_T)
    ;;
  *solaris*)
    TARGET_MODULES="solaris-target.o dummy-target.o" 
    AC_DEFINE(SOLARIS_TARGET, [1], [Define if target is any Solaris])
# Place-holders -- not necessarily correct...
    AC_DEFINE(GREGSET_T,  gregset_t,
              [Define the type name of a gregset])
    AC_DEFINE(FPREGSET_T, fpregset_t)
    ;;
esac

# Some architectures use the stock breakpoint model.
case "$target" in
  i?86*linux* | frv*linux* | am33*linux*)
    TARGET_MODULES="$TARGET_MODULES stock-breakpoints.o"
    AC_DEFINE(STOCK_BREAKPOINTS, [1],
              [Define if the target uses the stock-breakpoints.o module.])
  ;;
esac

TARGET_MODULES="$TARGET_MODULES diagnostics.o"

AC_SUBST(TARGET_MODULES)

case "$target" in
  am33_2.0*linux*)
    AC_DEFINE(AM33_2_0_LINUX_TARGET, [1],
              [Define if target is am33 Linux.])
    AC_DEFINE(PTRACE_XFER_SIZE, 4)
    AC_DEFINE(PTRACE_XFER_TYPE_LONG)
    AC_DEFINE(PTRACE_ARG1_TYPE_LONG)
    AC_DEFINE(PTRACE_ARG2_TYPE_LONG)
    AC_DEFINE(PTRACE_ARG3_TYPE_LONG)
    AC_DEFINE(PTRACE_ARG4_TYPE_LONG)
    ;;
  *solaris*)
    dnl FIXME: differentiate between flavors of Solaris!
    AC_DEFINE(SPARC32_SOLARIS_TARGET, [1],
              [Define if target is 32-bit SPARC Solaris.])
    AC_DEFINE(PTRACE_XFER_SIZE, 4)
    AC_DEFINE(PTRACE_XFER_TYPE_LONG)
    AC_DEFINE(PTRACE_ARG1_TYPE_LONG)
    AC_DEFINE(PTRACE_ARG2_TYPE_LONG)
    AC_DEFINE(PTRACE_ARG3_TYPE_LONG)
    AC_DEFINE(PTRACE_ARG4_TYPE_LONG)
    ;;
  sh*linux*)
    AC_DEFINE(SH_LINUX_TARGET, [1], [Define if target is SH (3? 4?) Linux])
    AC_DEFINE(PTRACE_XFER_SIZE, 4)
    AC_DEFINE(PTRACE_XFER_TYPE_LONG)
    AC_DEFINE(PTRACE_ARG1_TYPE_LONG)
    AC_DEFINE(PTRACE_ARG2_TYPE_LONG)
    AC_DEFINE(PTRACE_ARG3_TYPE_LONG)
    AC_DEFINE(PTRACE_ARG4_TYPE_LONG)
    ;;
  mips64*linux*)
    AC_DEFINE(MIPS64_LINUX_TARGET, [1], [Define if target is 64-bit MIPS Linux])
    AC_MSG_CHECKING([mips abi])
    mipsabi=o32
    AC_COMPILE_IFELSE([AC_LANG_SOURCE([[
#if !defined(_ABIN32) || _MIPS_SIM != _ABIN32
#error not n32
#endif
    ]])],[mipsabi=n32])
    AC_COMPILE_IFELSE([AC_LANG_SOURCE([[
#if !defined(_ABI64) || _MIPS_SIM != _ABI64
#error not n64
#endif
    ]])],[mipsabi=n64])
    AC_MSG_RESULT([$mipsabi])
    case $mipsabi in
      o32)
	AC_DEFINE(MIPS_ABI_O32, [1], [Define if target uses MIPS o32 ABI])
	AC_DEFINE(PTRACE_XFER_SIZE, 4)
	AC_DEFINE(PTRACE_XFER_TYPE_LONG)
	AC_DEFINE(PTRACE_ARG1_TYPE_LONG)
	AC_DEFINE(PTRACE_ARG2_TYPE_LONG)
	AC_DEFINE(PTRACE_ARG3_TYPE_LONG)
	AC_DEFINE(PTRACE_ARG4_TYPE_LONG)
        ;;
      n32)
	AC_DEFINE(MIPS_ABI_N32, [1], [Define if target uses MIPS n32 ABI])
	AC_DEFINE(PTRACE_XFER_SIZE, 8)
	AC_DEFINE(PTRACE_XFER_TYPE_LONG_LONG)
	AC_DEFINE(PTRACE_ARG1_TYPE_LONG_LONG)
	AC_DEFINE(PTRACE_ARG2_TYPE_LONG_LONG)
	AC_DEFINE(PTRACE_ARG3_TYPE_LONG_LONG)
	AC_DEFINE(PTRACE_ARG4_TYPE_LONG_LONG)
        ;;
      n64)
	AC_DEFINE(MIPS_ABI_N64, [1], [Define if target uses MIPS n64 ABI])
	AC_DEFINE(PTRACE_XFER_SIZE, 8)
	AC_DEFINE(PTRACE_XFER_TYPE_LONG)
	AC_DEFINE(PTRACE_ARG1_TYPE_LONG)
	AC_DEFINE(PTRACE_ARG2_TYPE_LONG)
	AC_DEFINE(PTRACE_ARG3_TYPE_LONG)
	AC_DEFINE(PTRACE_ARG4_TYPE_LONG)
        ;;
    esac
    ;;
  mips*linux*)
    AC_DEFINE(MIPS_LINUX_TARGET, [1], [Define if target is (32-bit) MIPS Linux])
    AC_DEFINE(MIPS_ABI_O32)
    AC_DEFINE(PTRACE_XFER_SIZE, 4)
    AC_DEFINE(PTRACE_XFER_TYPE_LONG)
    AC_DEFINE(PTRACE_ARG1_TYPE_LONG)
    AC_DEFINE(PTRACE_ARG2_TYPE_LONG)
    AC_DEFINE(PTRACE_ARG3_TYPE_LONG)
    AC_DEFINE(PTRACE_ARG4_TYPE_LONG)
    ;;
  i?86*linux*)
    AC_DEFINE(X86_LINUX_TARGET, [1], [Define if target is x86 Linux])
    AC_DEFINE(PTRACE_XFER_SIZE, 4)
    AC_DEFINE(PTRACE_XFER_TYPE_LONG)
    AC_DEFINE(PTRACE_ARG1_TYPE_LONG)
    AC_DEFINE(PTRACE_ARG2_TYPE_LONG)
    AC_DEFINE(PTRACE_ARG3_TYPE_LONG)
    AC_DEFINE(PTRACE_ARG4_TYPE_LONG)
    ;;
  powerpc*linux*)
    AC_DEFINE(PPC_LINUX_TARGET, [1], [Define if target is powerpc Linux])
    AC_DEFINE(PTRACE_XFER_SIZE, 4)
    AC_DEFINE(PTRACE_XFER_TYPE_LONG)
    AC_DEFINE(PTRACE_ARG1_TYPE_LONG)
    AC_DEFINE(PTRACE_ARG2_TYPE_LONG)
    AC_DEFINE(PTRACE_ARG3_TYPE_LONG)
    AC_DEFINE(PTRACE_ARG4_TYPE_LONG)
    ;;
  m68k*linux*)
    AC_DEFINE(M68K_LINUX_TARGET, [1], [Define if target is m68k Linux])
    AC_DEFINE(PTRACE_XFER_SIZE, 4)
    AC_DEFINE(PTRACE_XFER_TYPE_LONG)
    AC_DEFINE(PTRACE_ARG1_TYPE_LONG)
    AC_DEFINE(PTRACE_ARG2_TYPE_LONG)
    AC_DEFINE(PTRACE_ARG3_TYPE_LONG)
    AC_DEFINE(PTRACE_ARG4_TYPE_LONG)
    ;;
  alpha*linux*)
    AC_DEFINE(ALPHA_LINUX_TARGET, [1],
              [Define if target is Alpha Linux])
    AC_DEFINE(PTRACE_XFER_SIZE, 8)
    AC_DEFINE(PTRACE_XFER_TYPE_LONG_LONG)
    AC_DEFINE(PTRACE_ARG1_TYPE_LONG_LONG)
    AC_DEFINE(PTRACE_ARG2_TYPE_LONG_LONG)
    AC_DEFINE(PTRACE_ARG3_TYPE_LONG_LONG)
    AC_DEFINE(PTRACE_ARG4_TYPE_LONG_LONG)
    ;;
  arm*linux*)
	if test "$arm32" = "yes"; then
	    AC_DEFINE(ARM_LINUX_TARGET, [1],
	              [Define if target is ARM Linux])
    	    AC_DEFINE(PTRACE_XFER_SIZE, 4)
    	    AC_DEFINE(PTRACE_XFER_TYPE_LONG)
    	    AC_DEFINE(PTRACE_ARG1_TYPE_LONG)
      	    AC_DEFINE(PTRACE_ARG2_TYPE_LONG)
    	    AC_DEFINE(PTRACE_ARG3_TYPE_LONG)
    	    AC_DEFINE(PTRACE_ARG4_TYPE_LONG)
	else
    	    AC_DEFINE(ARM_LINUX_TARGET)
    	    AC_DEFINE(PTRACE_XFER_SIZE, 8)
    	    AC_DEFINE(PTRACE_XFER_TYPE_LONG_LONG)
    	    AC_DEFINE(PTRACE_ARG1_TYPE_LONG_LONG)
    	    AC_DEFINE(PTRACE_ARG2_TYPE_LONG_LONG)
    	    AC_DEFINE(PTRACE_ARG3_TYPE_LONG_LONG)
    	    AC_DEFINE(PTRACE_ARG4_TYPE_LONG_LONG)
	fi
	;;
  frv*linux*)
    AC_DEFINE(FRV_LINUX_TARGET, [1],
              [Define if target is FRV Linux])
    AC_DEFINE(PTRACE_XFER_SIZE, 4)
    AC_DEFINE(PTRACE_XFER_TYPE_LONG)
    AC_DEFINE(PTRACE_ARG1_TYPE_LONG)
    AC_DEFINE(PTRACE_ARG2_TYPE_LONG)
    AC_DEFINE(PTRACE_ARG3_TYPE_LONG)
    AC_DEFINE(PTRACE_ARG4_TYPE_LONG)
    ;;
esac

dnl Outputs
AC_OUTPUT(Makefile)
@


1.9
log
@Add support for am33 linux.
@
text
@d130 2
@


1.8
log
@Add support for the Linux NPTL (New POSIX Thread Library) thread
implementation.
* arch.h, lwp-pool.c, lwp-pool.h, stock-breakpoints.c:
* stock-breakpoints.h: New files.
* gdbserv-thread-db.h (continue_lwp, singlestep_lwp, attach_lwp)
(stop_lwp): Move these ...
* lwp-ctrl.h: ... to here (new file).
* server.h (struct child_process): Include a pointer to the
architecture object, a breakpoint table, and a pointer to the
"focus thread".
* linux-target.c: Create architecture objects for the i386 and
FRV, and describe breakpoints for those architectures.
#include "arch.h".
[STOCK_BREAKPOINTS]: #include "stock-breakpoints.h".
(allocate_empty_arch): New function.
[X86_LINUX_TARGET] (stock_table_to_x86, x86_table_to_stock)
(stock_bp_to_x86, x86_bp_to_stock, x86_make_bp_table, x86_set_bp)
(x86_delete_bp, x86_bp_hit_p, x86_make_arch): New functions.
(MAKE_ARCH): #define to call x86_make_arch.
[X86_LINUX_TARGET] (stock_table_to_frv, frv_table_to_stock)
(stock_bp_to_frv, frv_bp_to_stock, frv_make_bp_table, frv_set_bp)
(frv_delete_bp, frv_bp_hit_p, frv_make_arch): New functions.
(MAKE_ARCH): #define to call frv_make_arch.
(linux_attach): If MAKE_ARCH is #defined, create an architecture
object for this process.  And if we have an architecture object,
make a breakpoint table.
* thread-db.c: #include <assert.h>, "arch.h", "lwp-ctrl.h", and
"lwp-pool.h".
(struct gdbserv_thread): Remove state-tracking flags 'attached',
'stopped', 'waited', and 'stepping'; all that state is handled
inside lwp-pool.c now.
(add_thread_to_list): Zero the entire newly allocated thread
structure.
(thread_list_lookup_by_lid): Prefer threads whose ti_lid values
are different from that of the main process.
(thread_db_state_str, thread_db_type_str): Don't include
formatting spaces here.
(thread_db_event_str): New function.
(thread_debug_name): New function.
(get_thread_signals): Return a value indicating success or failure.
(ignore_thread_signal): New function.
(using_thread_db_events, create_notification, death_notification)
(get_event_notification, set_event_breakpoint)
(insert_thread_db_event_breakpoints)
(delete_thread_db_event_breakpoints, request_thread_db_events)
(hit_thread_db_event_breakpoint, handle_thread_db_event): New
variables and functions, for using libthread_db's event interface.
(thread_db_open): Gather error-handling code next to the operation
that might fail.  Decide here whether to use the signal-based
debugging interface, or the event-based debugging interface.
(stop_thread, stop_all_threads, struct event_list, pending_events)
(pending_events_listsize, pending_events_top, add_pending_event)
(select_pending_event, send_pending_signals, wait_all_threads):
Deleted; we now use lwp-pool.c for all this.
(attach_thread, continue_thread, continue_all_threads)
(singlestep_thread, thread_db_singlestep_program)
(thread_db_continue_thread, thread_db_singlestep_thread): Use the
lwp-pool.c functions, instead of calling the lwp manipulation
functions directly and managing state here.  Keep track of the
focus thread.
(find_new_threads_callback): Always call attach_thread.  If we're
using libthread_db events, enable event reporting for the new
thread.
(update_thread_list): Take the current child process as an
argument; if the current focus thread disappears, clear the
process's focus_thread pointer.
(thread_db_thread_next): Pass the current child process to
update_thread_list.
(thread_db_thread_info): Reformat thread descriptions.  Mark
threads whose pid is equal to the process ID.
(thread_db_check_child_state): Use the lwp-pool functions, instead
of calling waitpid and the old stop-all-threads functions.  If we
have a focus thread, only check for a status on that thread.
Check for libthread_db events.  Use ignore_thread_signal, instead
of writing it out.
(thread_db_break_program): New function.
(thread_db_attach): Register it as the target's 'break_program'
method.  Always preload the symbol list with the names we'll need
for the signal-based interface, even if we have td_symbol_list.
Use lwp_pool_new_stopped to register the initial thread.  Clear
the focus thread.
* ptrace-target.c: #define _GNU_SOURCE and #include <sys/types.h>
and <linux/unistd.h>, to get declarations for the functions we
need.
#include "lwp-ctrl.h".
(continue_lwp, singlestep_lwp, attach_lwp): Remove
unnecessary 'extern' keywords.  Move pre-function comments to
lwp-ctrl.h.  Take an ordinary 'pid_t', not an 'lwpid_t', since
we're calling ptrace / tkill, and that's what they expect; rename
arguments accordingly.  Preserve value of errno across calls to
fprintf when reporting errors.
(kill_lwp): All the above, and use tkill system call if available.
* configure.in: Whenever we include thread-db.o in TARGET_MODULES,
also include lwp-pool.o.
On i386 and FRV Linux, use the stock-breakpoints module.
* config.in: Add template for STOCK_BREAKPOINTS.
* Makefile.am (EXTRA_rda_SOURCES): Include stock-breakpoints.c.
* Makefile.in, aclocal.m4, configure: Regenerated.
@
text
@d67 10
d123 1
a123 1
  i?86*linux* | frv*linux*)
d133 10
@


1.7
log
@Make config.in generated automatically again.
* configure.in: Provide descriptions for all the preprocessor
symbols we define.
* configure: Regenerated.
* config.in: Regenerated using autoheader.
@
text
@d68 1
a68 1
    TARGET_MODULES="linux-target.o thread-db.o ptrace-target.o" 
d82 1
a82 1
    TARGET_MODULES="linux-target.o thread-db.o ptrace-target.o" 
d111 9
@


1.6
log
@Enable thread support for linux running on FR-V.
@
text
@d29 37
d103 1
a103 1
    AC_DEFINE(SOLARIS_TARGET)
d105 2
a106 1
    AC_DEFINE(GREGSET_T,  gregset_t)
d116 2
a117 1
    AC_DEFINE(SPARC32_SOLARIS_TARGET)
d126 1
a126 1
    AC_DEFINE(SH_LINUX_TARGET)
d135 1
a135 1
    AC_DEFINE(MIPS64_LINUX_TARGET)
d151 1
a151 1
	AC_DEFINE(MIPS_ABI_O32)
d160 1
a160 1
	AC_DEFINE(MIPS_ABI_N32)
d169 1
a169 1
	AC_DEFINE(MIPS_ABI_N64)
d180 1
a180 1
    AC_DEFINE(MIPS_LINUX_TARGET)
d190 1
a190 1
    AC_DEFINE(X86_LINUX_TARGET)
d199 1
a199 1
    AC_DEFINE(PPC_LINUX_TARGET)
d208 1
a208 1
    AC_DEFINE(M68K_LINUX_TARGET)
d217 2
a218 1
    AC_DEFINE(ALPHA_LINUX_TARGET)
d228 2
a229 1
	    AC_DEFINE(ARM_LINUX_TARGET)
d247 2
a248 1
    AC_DEFINE(FRV_LINUX_TARGET)
@


1.6.2.1
log
@Add an architecture object to the Unix server.
* arch.h: New header file.
* server.h (struct arch): New forward struct declaration.
(struct child_process): Add an 'arch' member to the process.
* thread-db.c: #include arch.h.
* linux-target.c: #include arch.h.
(allocate_empty_arch): New function.
(x86_make_arch): New function.
(MAKE_ARCH): New #definition.
(linux_attach): Initialize process's architecture.

Provide arch-independent framework for breakpoints.
* server.h (struct arch_bp_table): New forward struct declaration.
(struct child_process): New member: 'breakpoint_table'.
* linux-target.c (linux_attach): Initialize process's breakpoint
table, if the architecture defines a breakpoint table constructor.
* arch.h (struct arch): Add fields pointing to breakpoint functions.

Provide a module implementing breakpoints for architectures that
support a simple software breakpoint model ("patch these bytes
into the instruction stream").
* stock-breakpoints.h, stock-breakpoints.c: New files.
* linux-target.c: If STOCK_BREAKPOINTS is #defined, then #include
"stock-breakpoints.h".
* Makefile.am (EXTRA_rda_SOURCES): Add stock-breakpoints.c.
* Makefile.in: Updated.

Define x86 breakpoint functions using the stock-breakpoints.c
model.
* configure.in: When configuring for an x86 target, include
stock-breakpoints.o in the mix, and #define STOCK_BREAKPOINTS.
* configure: Regenerated.
* config.in (STOCK_BREAKPOINTS): Provide #definition template.
* linux-target.c (stock_table_to_x86, x86_table_to_stock,
stock_bp_to_x86, x86_bp_to_stock, x86_make_bp_table, x86_set_bp,
x86_delete_bp, x86_bp_hit_p): New functions.
(x86_make_arch): Register the latter four as our breakpoint
methods.

Use the libthread_db event interface to communicate with the
thread library, if the old signal-based interface is not
supported.
* thread-db.c: #include <assert.h>.
(thread_db_event_str): New function.
(get_target_int_by_name, set_target_int_by_name, get_thread_signals)
(cancel_signal, restart_signal, debug_signal): Move these to just
before thread_db_dlopen; get_thread_signals is a subroutine of that.
(using_thread_db_events, create_notification, death_notification,
create_event_breakpoint, death_event_breakpoint): New global vars.
(get_event_notification, set_event_breakpoint)
(insert_thread_db_event_breakpoints)
(delete_thread_db_event_breakpoints, request_thread_db_events)
(hit_thread_db_event_breakpoint): New functions.
(thread_db_open): Call get_thread_signals, and if that fails, call
request_thread_db_events.
(struct event_list): Add 'thread_db_event' member.
(add_pending_event): Initialize it.
(delete_pending_event, handle_thread_db_events): New functions.
(find_new_threads_callback): If we're using the event interface,
enable event reporting on each new thread we find.
(select_pending_event): Return a value to indicate whether we
selected any event at all.
(continue_all_threads): Send a restart signal only if we're using
the signal-based interface.
(thread_db_check_child_state): If we're using the libthread_db
event interface to communicate with the inferior thread library,
check for those events here.  If select_pending_event says it
didn't find anything interesting, that means we consumed all the
reportable events; continue the program silently.
* ptrace-target.c: #include <sys/types.h> and <linux/unistd.h>.
(tkill): Generate code for this syscall.
(stop_lwp): Use tkill instead of kill.

* thread-db.c (thread_db_check_child_state): Call stop_all_threads
before calling update_thread_list, so RDA will have to compete for
CPU with fewer running threads.

* thread-db.c (wait_all_threads): Move calls to
select_pending_event and send_pending_signals from here...
(thread_db_check_child_state): To here.

* thread-db.c (ignore_thread_signal): New function.
(thread_db_check_child_state): Call it, instead of writing it out.

* thread-db.c (thread_db_open): Return 0 on success, -1 on
failure, like most of the other int-valued functions in this file,
and like most system calls.

* thread-db.c (struct gdbserv_thread): Doc fixes.

* thread-db.c: #include "gdbserv-utils.h", to get prototypes for
the 'struct gdbserv_reg' manipulation functions.

* thread-db.c (thread_db_noisy): Initialize to 1.

* thread-db.c (thread_debug_name): New function.
(find_new_threads_callback): If noisy, report new threads.
(stop_thread): If noisy, report stopping threads.
(select_pending_event): If noisy, report what we selected.
(wait_all_threads): If noisy, report before each thread we wait
for.

* thread-db.c (stop_all_threads): Doc fixes.

* aclocal.m4: Regenerated.
@
text
@a72 8
# Some architectures use the stock breakpoint model.
case "$target" in
  i?86*linux*)
    TARGET_MODULES="$TARGET_MODULES stock-breakpoints.o"
    AC_DEFINE(STOCK_BREAKPOINTS)
  ;;
esac

@


1.6.2.2
log
@Separate management of kernel-level LWPs from that of libpthread /
libthread_db-level threads.
* lwp-pool.c, lwp-pool.h: New files.
* thread-db.c: #include "lwp-ctrl.h" and "lwp-pool.h".
(struct gdbserv_thread): Delete members 'attached', 'stopped',
'waited', and 'stepping'.  This structure is now just a
'td_thrinfo_t' and a list link.  Describe some quirks in the
meanings of certain 'ti' fields.
(thread_list_lookup_by_lid): Move later in file, so we can use
information directly from our proc handle.  Be skeptical of ZOMBIE
or UNKNOWN threads whose LWP ID is equal to the PID in the proc
handle.
(thread_debug_name): Move later in file, so we can use
thread_db_state_str.
(attach_thread): Use lwp pool functions to attach.  Attach to
zombies.  When using signal-based communication, send the thread
the restart signal immediately.
(find_new_threads_callback): Go ahead and attach to all threads.
The LWP pool functions tolerate attaching to a given LWP more than
once.
(update_thread_list): Take the process as an argument.  If the
focus thread has disappeared, set process->focus_thread to NULL.
(thread_db_thread_next): Pass the process to update_thread_list.
(stop_thread, stop_all_threads, add_pending_event,
delete_pending_event, select_pending_event, send_pending_signals,
wait_all_threads, continue_all_threads): Deleted.
(handle_thread_db_event): Renamed from handle_thread_db_events.
Take the process structure as an argument, and check only for a
thread-db event notification from process->event_thread.  Use LWP
pool functions.
(continue_thread, singlestep_thread): Use LWP pool functions.
(thread_db_continue_program, thread_db_singlestep_program,
thread_db_continue_thread, thread_db_singlestep_thread): Use LWP
pool functions, and update process->focus_thread appropriately.
(thread_db_check_child_state): Use the LWP pool functions.  Rather
than stopping all LWP's, choosing the most interesting events, and
then arranging to re-create all the other wait statuses we got,
just pick the first event we get from lwp_pool_waitpid (either on
the focus thread, if there is one, or on any thread) and report
that.  Use the new handle_thread_db_event function.
(struct event_list, pending_events, pending_events_listsize,
pending_events_top): Deleted; replaced by LWP pool code.
(thread_db_attach): Tell the LWP pool about the PID we're
attaching to.  Clear the focus thread.
* server.h (struct process): New member: 'focus_thread'.
* gdbserv-thread-db.h (continue_lwp, singlestep_lwp, attach_lwp,
stop_lwp): Move declarations from here...
* lwp-ctrl.h: ... to here.  New file.
(kill_lwp): Renamed from stop_lwp; allow caller to specify any
signal.
* ptrace-target.c: #include "lwp-ctrl.h".
(continue_lwp, singlestep_lwp, attach_lwp, stop_lwp): Move
function comments to lwp-ctrl.h, and expand.
* configure.in: Whenever we select 'thread-db.o', select
'lwp-pool.o' as well.
* configure: Regenerated.

* thread-db.c (thread_db_check_child_state): Remove extraneous
call to handle_waitstatus.  Remove extra check for exited main
thread.

* thread-db.c (thread_db_thread_info): List the type and state
before the PID, and mention whether the LWP's PID is equal to that
of the main thread, since ZOMBIE and UNKNOWN threads whose LWP's
PID is equal are probably actually exited threads.

* thread-db.c (add_thread_to_list): Zero out entire structure.

* thread-db.c (thread_db_state_str, thread_db_type_str): Remove
spaces from names; we don't always want them, and the caller can
use printf formatting directives to arrange things as they please.

* ptrace-target.c (continue_lwp, singlestep_lwp, attach_lwp,
stop_lwp): Change arguments from 'lwpid_t' to 'pid_t'.  lwpid_t is
strictly a thread-db type; these are functions that use system
calls, which all expect pid_t.  Rename arguments from 'lwpid' to
'pid'.

* ptrace-target.c: #define _GNU_SOURCE to get declaration for
strsignal.
(kill_lwp): Enhance error reporting.
@
text
@d31 1
a31 1
    TARGET_MODULES="linux-target.o thread-db.o lwp-pool.o ptrace-target.o" 
d45 1
a45 1
    TARGET_MODULES="linux-target.o thread-db.o lwp-pool.o ptrace-target.o" 
@


1.6.2.3
log
@* linux-target.c (stock_table_to_frv, frv_table_to_stock,
stock_bp_to_frv, frv_bp_to_stock, frv_make_bp_table, frv_set_bp,
frv_delete_bp, frv_bp_hit_p): New functions.
(frv_make_arch): Register the latter four as our breakpoint
methods.
(MAKE_ARCH): New #definition.
* configure.in: Use stock-breakpoints.o on FRV Linux, too.
* configure: Regenerated.
@
text
@d75 1
a75 1
  i?86*linux* | frv*linux*)
@


1.6.2.4
log
@Merge changes from trunk, to make progressive branch-vs.-trunk
diffs easier to generate.

2005-03-10  Jim Blandy  <jimb@@redhat.com>

* Makefile.in, aclocal.m4: Regenerated with automake 1.9.4.

Make config.in generated automatically again.
* configure.in: Provide descriptions for all the preprocessor
symbols we define.
* configure: Regenerated.
* config.in: Regenerated using autoheader.

* linux-target.c (frv_fdpic_loadmap_addresses): Use '%lx' for
unsigned long argument.
@
text
@a28 37
# Provide descriptions for the various preprocessor symbols.
# (Autoheader is happy even if only one of the AC_DEFINEs has a
# description, so we could put these with the first AC_DEFINE.  But
# it's better to have the descriptions for symbols that are used
# across multiple architectures in an architecture-independent spot;
# we don't want them going away if architectures get dropped.)
AH_TEMPLATE(FPREGSET_T, [Define the type name of an fpregset])
AH_TEMPLATE(HAVE_LWPID_T, [Define if system headers will define lwpid_t])
AH_TEMPLATE(HAVE_PRFPREGSET_T,
            [Define if system headers will define prfpregset_t])
AH_TEMPLATE(HAVE_PRGREGSET_T, [Define if system headers will define psaddr_t])
AH_TEMPLATE(HAVE_PSADDR_T, [Define if system headers will define psaddr_t])
AH_TEMPLATE(LIBTHREAD_DB_SO, [Define name / location of libthread_db.so])
AH_TEMPLATE(LINUX_TARGET, [Define if target is any Linux])
AH_TEMPLATE(PTRACE_ARG1_TYPE_LONG,
            [Define if ptrace arg1 type is long or unsigned long.])
AH_TEMPLATE(PTRACE_ARG1_TYPE_LONG_LONG,
            [Define if ptrace arg1 type is long long or unsigned long long.])
AH_TEMPLATE(PTRACE_ARG2_TYPE_LONG,
            [Define if ptrace arg2 type is long or unsigned long.])
AH_TEMPLATE(PTRACE_ARG2_TYPE_LONG_LONG,
            [Define if ptrace arg2 type is long long or unsigned long long.])
AH_TEMPLATE(PTRACE_ARG3_TYPE_LONG,
            [Define if ptrace arg3 type is long or unsigned long.])
AH_TEMPLATE(PTRACE_ARG3_TYPE_LONG_LONG,
            [Define if ptrace arg3 type is long long or unsigned long long.])
AH_TEMPLATE(PTRACE_ARG4_TYPE_LONG,
            [Define if ptrace arg4 type is long or unsigned long.])
AH_TEMPLATE(PTRACE_ARG4_TYPE_LONG_LONG,
            [Define if ptrace arg4 type is long long or unsigned long long.])
AH_TEMPLATE(PTRACE_XFER_SIZE,
	    [Define for ptrace systems, to the size of a ptrace word.])
AH_TEMPLATE(PTRACE_XFER_TYPE_LONG,
            [Define if ptrace transfer type is long or unsigned long.])
AH_TEMPLATE(PTRACE_XFER_TYPE_LONG_LONG,
          [Define if ptrace transfer type is long long or unsigned long long.])

d66 1
a66 1
    AC_DEFINE(SOLARIS_TARGET, [1], [Define if target is any Solaris])
d68 1
a68 2
    AC_DEFINE(GREGSET_T,  gregset_t,
              [Define the type name of a gregset])
d77 1
a77 2
    AC_DEFINE(STOCK_BREAKPOINTS, [1],
              [Define if the target uses the stock-breakpoints.o module.])
d86 1
a86 2
    AC_DEFINE(SPARC32_SOLARIS_TARGET, [1],
              [Define if target is 32-bit SPARC Solaris.])
d95 1
a95 1
    AC_DEFINE(SH_LINUX_TARGET, [1], [Define if target is SH (3? 4?) Linux])
d104 1
a104 1
    AC_DEFINE(MIPS64_LINUX_TARGET, [1], [Define if target is 64-bit MIPS Linux])
d120 1
a120 1
	AC_DEFINE(MIPS_ABI_O32, [1], [Define if target uses MIPS o32 ABI])
d129 1
a129 1
	AC_DEFINE(MIPS_ABI_N32, [1], [Define if target uses MIPS n32 ABI])
d138 1
a138 1
	AC_DEFINE(MIPS_ABI_N64, [1], [Define if target uses MIPS n64 ABI])
d149 1
a149 1
    AC_DEFINE(MIPS_LINUX_TARGET, [1], [Define if target is (32-bit) MIPS Linux])
d159 1
a159 1
    AC_DEFINE(X86_LINUX_TARGET, [1], [Define if target is x86 Linux])
d168 1
a168 1
    AC_DEFINE(PPC_LINUX_TARGET, [1], [Define if target is powerpc Linux])
d177 1
a177 1
    AC_DEFINE(M68K_LINUX_TARGET, [1], [Define if target is m68k Linux])
d186 1
a186 2
    AC_DEFINE(ALPHA_LINUX_TARGET, [1],
              [Define if target is Alpha Linux])
d196 1
a196 2
	    AC_DEFINE(ARM_LINUX_TARGET, [1],
	              [Define if target is ARM Linux])
d214 1
a214 2
    AC_DEFINE(FRV_LINUX_TARGET, [1],
              [Define if target is FRV Linux])
@


1.5
log
@Linux/FR-V support.
@
text
@d43 2
a44 1
  mips*linux*)
@


1.4
log
@	* configure.in (mips64*linux*n64, mips64*linux*n32, mips64*linux*o32):
	Remove cases.  Instead, use compiler's preprocessor symbols to test
	which ABI is being used.
	* configure: Regenerate.
@
text
@d27 1
a27 1
	asm/reg.h sys/ptrace.h sys/reg.h sys/user.h sys/wait.h )
d204 9
@


1.3
log
@	* config.in (LIBTHREAD_DB_SO): New macro.
	* configure.in (mips64*linux*): Remove no-threads.o from
	TARGET_MODULES list.  Add thread-db.o to this list.
	* configure: Regenerate.
@
text
@a28 3
dnl define ptrace_xfer_type
dnl define ptrace_arg3_type

d94 1
a94 11
  mips64*linux*n64)
    AC_DEFINE(MIPS64_LINUX_TARGET)
    AC_DEFINE(MIPS_ABI_N64)
    AC_DEFINE(PTRACE_XFER_SIZE, 8)
    AC_DEFINE(PTRACE_XFER_TYPE_LONG)
    AC_DEFINE(PTRACE_ARG1_TYPE_LONG)
    AC_DEFINE(PTRACE_ARG2_TYPE_LONG)
    AC_DEFINE(PTRACE_ARG3_TYPE_LONG)
    AC_DEFINE(PTRACE_ARG4_TYPE_LONG)
    ;;
  mips64*linux*n32)
d96 42
a137 17
    AC_DEFINE(MIPS_ABI_N32)
    AC_DEFINE(PTRACE_XFER_SIZE, 8)
    AC_DEFINE(PTRACE_XFER_TYPE_LONG_LONG)
    AC_DEFINE(PTRACE_ARG1_TYPE_LONG_LONG)
    AC_DEFINE(PTRACE_ARG2_TYPE_LONG_LONG)
    AC_DEFINE(PTRACE_ARG3_TYPE_LONG_LONG)
    AC_DEFINE(PTRACE_ARG4_TYPE_LONG_LONG)
    ;;
  mips64*linux*o32)
    AC_DEFINE(MIPS64_LINUX_TARGET)
    AC_DEFINE(MIPS_ABI_O32)
    AC_DEFINE(PTRACE_XFER_SIZE, 4)
    AC_DEFINE(PTRACE_XFER_TYPE_LONG)
    AC_DEFINE(PTRACE_ARG1_TYPE_LONG)
    AC_DEFINE(PTRACE_ARG2_TYPE_LONG)
    AC_DEFINE(PTRACE_ARG3_TYPE_LONG)
    AC_DEFINE(PTRACE_ARG4_TYPE_LONG)
@


1.2
log
@Add mips64-linux targets.
@
text
@d34 1
a34 1
    TARGET_MODULES="linux-target.o no-threads.o ptrace-target.o" 
@


1.1
log
@Added files comprising RDA.
@
text
@d33 10
d97 30
d129 1
a192 4

if test -f /usr/include/foo.h; then
  AC_DEFINE(HAVE_AC_DEFINE, 1, [define if have AC_DEFINE])
fi
@

