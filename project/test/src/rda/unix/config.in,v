head	1.7;
access;
symbols
	msnyder-fork-checkpoint-branch:1.7.0.2
	msnyder-fork-checkpoint-branchpoint:1.7
	msnyder-tracepoint-checkpoint-branch:1.5.0.2
	msnyder-tracepoint-checkpoint-branchpoint:1.5
	jimb-rda-nptl-branch:1.4.0.2
	jimb-rda-nptl-branchpoint:1.4;
locks; strict;
comment	@# @;


1.7
date	2005.08.24.01.14.35;	author kevinb;	state Exp;
branches;
next	1.6;

1.6
date	2005.06.30.03.24.18;	author jimb;	state Exp;
branches;
next	1.5;

1.5
date	2005.03.10.22.52.55;	author jimb;	state Exp;
branches;
next	1.4;

1.4
date	2003.11.14.21.17.17;	author kevinb;	state Exp;
branches
	1.4.2.1;
next	1.3;

1.3
date	2003.01.16.18.20.18;	author kevinb;	state Exp;
branches;
next	1.2;

1.2
date	2002.11.27.21.28.31;	author kevinb;	state Exp;
branches;
next	1.1;

1.1
date	2002.08.28.01.22.28;	author kevinb;	state Exp;
branches;
next	;

1.4.2.1
date	2004.10.26.23.04.44;	author jimb;	state Exp;
branches;
next	1.4.2.2;

1.4.2.2
date	2005.03.11.00.31.13;	author jimb;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Add support for am33 linux.
@
text
@/* config.in.  Generated from configure.in by autoheader.  */

/* Define if target is Alpha Linux */
#undef ALPHA_LINUX_TARGET

/* Define if target is am33 Linux. */
#undef AM33_2_0_LINUX_TARGET

/* Define if target is ARM Linux */
#undef ARM_LINUX_TARGET

/* Define the type name of an fpregset */
#undef FPREGSET_T

/* Define if target is FRV Linux */
#undef FRV_LINUX_TARGET

/* Define the type name of a gregset */
#undef GREGSET_T

/* Define to 1 if you have the <asm/reg.h> header file. */
#undef HAVE_ASM_REG_H

/* Define to 1 if you have the <errno.h> header file. */
#undef HAVE_ERRNO_H

/* Define to 1 if you have the <inttypes.h> header file. */
#undef HAVE_INTTYPES_H

/* Define if system headers will define lwpid_t */
#undef HAVE_LWPID_T

/* Define to 1 if you have the <memory.h> header file. */
#undef HAVE_MEMORY_H

/* Define if system headers will define prfpregset_t */
#undef HAVE_PRFPREGSET_T

/* Define if system headers will define psaddr_t */
#undef HAVE_PRGREGSET_T

/* Define if system headers will define psaddr_t */
#undef HAVE_PSADDR_T

/* Define to 1 if you have the <ptrace.h> header file. */
#undef HAVE_PTRACE_H

/* Define to 1 if you have the <signal.h> header file. */
#undef HAVE_SIGNAL_H

/* Define to 1 if you have the <stdint.h> header file. */
#undef HAVE_STDINT_H

/* Define to 1 if you have the <stdlib.h> header file. */
#undef HAVE_STDLIB_H

/* Define to 1 if you have the <strings.h> header file. */
#undef HAVE_STRINGS_H

/* Define to 1 if you have the <string.h> header file. */
#undef HAVE_STRING_H

/* Define to 1 if you have the <sys/procfs.h> header file. */
#undef HAVE_SYS_PROCFS_H

/* Define to 1 if you have the <sys/ptrace.h> header file. */
#undef HAVE_SYS_PTRACE_H

/* Define to 1 if you have the <sys/reg.h> header file. */
#undef HAVE_SYS_REG_H

/* Define to 1 if you have the <sys/stat.h> header file. */
#undef HAVE_SYS_STAT_H

/* Define to 1 if you have the <sys/types.h> header file. */
#undef HAVE_SYS_TYPES_H

/* Define to 1 if you have the <sys/wait.h> header file. */
#undef HAVE_SYS_WAIT_H

/* Define to 1 if you have the <unistd.h> header file. */
#undef HAVE_UNISTD_H

/* Define name / location of libthread_db.so */
#undef LIBTHREAD_DB_SO

/* Define if target is any Linux */
#undef LINUX_TARGET

/* Define if target is m68k Linux */
#undef M68K_LINUX_TARGET

/* Define if target is 64-bit MIPS Linux */
#undef MIPS64_LINUX_TARGET

/* Define if target uses MIPS n32 ABI */
#undef MIPS_ABI_N32

/* Define if target uses MIPS n64 ABI */
#undef MIPS_ABI_N64

/* Define if target uses MIPS o32 ABI */
#undef MIPS_ABI_O32

/* Define if target is (32-bit) MIPS Linux */
#undef MIPS_LINUX_TARGET

/* Name of package */
#undef PACKAGE

/* Define to the address where bug reports for this package should be sent. */
#undef PACKAGE_BUGREPORT

/* Define to the full name of this package. */
#undef PACKAGE_NAME

/* Define to the full name and version of this package. */
#undef PACKAGE_STRING

/* Define to the one symbol short name of this package. */
#undef PACKAGE_TARNAME

/* Define to the version of this package. */
#undef PACKAGE_VERSION

/* Define if target is powerpc Linux */
#undef PPC_LINUX_TARGET

/* Define if ptrace arg1 type is long or unsigned long. */
#undef PTRACE_ARG1_TYPE_LONG

/* Define if ptrace arg1 type is long long or unsigned long long. */
#undef PTRACE_ARG1_TYPE_LONG_LONG

/* Define if ptrace arg2 type is long or unsigned long. */
#undef PTRACE_ARG2_TYPE_LONG

/* Define if ptrace arg2 type is long long or unsigned long long. */
#undef PTRACE_ARG2_TYPE_LONG_LONG

/* Define if ptrace arg3 type is long or unsigned long. */
#undef PTRACE_ARG3_TYPE_LONG

/* Define if ptrace arg3 type is long long or unsigned long long. */
#undef PTRACE_ARG3_TYPE_LONG_LONG

/* Define if ptrace arg4 type is long or unsigned long. */
#undef PTRACE_ARG4_TYPE_LONG

/* Define if ptrace arg4 type is long long or unsigned long long. */
#undef PTRACE_ARG4_TYPE_LONG_LONG

/* Define for ptrace systems, to the size of a ptrace word. */
#undef PTRACE_XFER_SIZE

/* Define if ptrace transfer type is long or unsigned long. */
#undef PTRACE_XFER_TYPE_LONG

/* Define if ptrace transfer type is long long or unsigned long long. */
#undef PTRACE_XFER_TYPE_LONG_LONG

/* Define if target is SH (3? 4?) Linux */
#undef SH_LINUX_TARGET

/* Define if target is any Solaris */
#undef SOLARIS_TARGET

/* Define if target is 32-bit SPARC Solaris. */
#undef SPARC32_SOLARIS_TARGET

/* Define to 1 if you have the ANSI C header files. */
#undef STDC_HEADERS

/* Define if the target uses the stock-breakpoints.o module. */
#undef STOCK_BREAKPOINTS

/* Version number of package */
#undef VERSION

/* Define if target is x86 Linux */
#undef X86_LINUX_TARGET
@


1.6
log
@Add support for the Linux NPTL (New POSIX Thread Library) thread
implementation.
* arch.h, lwp-pool.c, lwp-pool.h, stock-breakpoints.c:
* stock-breakpoints.h: New files.
* gdbserv-thread-db.h (continue_lwp, singlestep_lwp, attach_lwp)
(stop_lwp): Move these ...
* lwp-ctrl.h: ... to here (new file).
* server.h (struct child_process): Include a pointer to the
architecture object, a breakpoint table, and a pointer to the
"focus thread".
* linux-target.c: Create architecture objects for the i386 and
FRV, and describe breakpoints for those architectures.
#include "arch.h".
[STOCK_BREAKPOINTS]: #include "stock-breakpoints.h".
(allocate_empty_arch): New function.
[X86_LINUX_TARGET] (stock_table_to_x86, x86_table_to_stock)
(stock_bp_to_x86, x86_bp_to_stock, x86_make_bp_table, x86_set_bp)
(x86_delete_bp, x86_bp_hit_p, x86_make_arch): New functions.
(MAKE_ARCH): #define to call x86_make_arch.
[X86_LINUX_TARGET] (stock_table_to_frv, frv_table_to_stock)
(stock_bp_to_frv, frv_bp_to_stock, frv_make_bp_table, frv_set_bp)
(frv_delete_bp, frv_bp_hit_p, frv_make_arch): New functions.
(MAKE_ARCH): #define to call frv_make_arch.
(linux_attach): If MAKE_ARCH is #defined, create an architecture
object for this process.  And if we have an architecture object,
make a breakpoint table.
* thread-db.c: #include <assert.h>, "arch.h", "lwp-ctrl.h", and
"lwp-pool.h".
(struct gdbserv_thread): Remove state-tracking flags 'attached',
'stopped', 'waited', and 'stepping'; all that state is handled
inside lwp-pool.c now.
(add_thread_to_list): Zero the entire newly allocated thread
structure.
(thread_list_lookup_by_lid): Prefer threads whose ti_lid values
are different from that of the main process.
(thread_db_state_str, thread_db_type_str): Don't include
formatting spaces here.
(thread_db_event_str): New function.
(thread_debug_name): New function.
(get_thread_signals): Return a value indicating success or failure.
(ignore_thread_signal): New function.
(using_thread_db_events, create_notification, death_notification)
(get_event_notification, set_event_breakpoint)
(insert_thread_db_event_breakpoints)
(delete_thread_db_event_breakpoints, request_thread_db_events)
(hit_thread_db_event_breakpoint, handle_thread_db_event): New
variables and functions, for using libthread_db's event interface.
(thread_db_open): Gather error-handling code next to the operation
that might fail.  Decide here whether to use the signal-based
debugging interface, or the event-based debugging interface.
(stop_thread, stop_all_threads, struct event_list, pending_events)
(pending_events_listsize, pending_events_top, add_pending_event)
(select_pending_event, send_pending_signals, wait_all_threads):
Deleted; we now use lwp-pool.c for all this.
(attach_thread, continue_thread, continue_all_threads)
(singlestep_thread, thread_db_singlestep_program)
(thread_db_continue_thread, thread_db_singlestep_thread): Use the
lwp-pool.c functions, instead of calling the lwp manipulation
functions directly and managing state here.  Keep track of the
focus thread.
(find_new_threads_callback): Always call attach_thread.  If we're
using libthread_db events, enable event reporting for the new
thread.
(update_thread_list): Take the current child process as an
argument; if the current focus thread disappears, clear the
process's focus_thread pointer.
(thread_db_thread_next): Pass the current child process to
update_thread_list.
(thread_db_thread_info): Reformat thread descriptions.  Mark
threads whose pid is equal to the process ID.
(thread_db_check_child_state): Use the lwp-pool functions, instead
of calling waitpid and the old stop-all-threads functions.  If we
have a focus thread, only check for a status on that thread.
Check for libthread_db events.  Use ignore_thread_signal, instead
of writing it out.
(thread_db_break_program): New function.
(thread_db_attach): Register it as the target's 'break_program'
method.  Always preload the symbol list with the names we'll need
for the signal-based interface, even if we have td_symbol_list.
Use lwp_pool_new_stopped to register the initial thread.  Clear
the focus thread.
* ptrace-target.c: #define _GNU_SOURCE and #include <sys/types.h>
and <linux/unistd.h>, to get declarations for the functions we
need.
#include "lwp-ctrl.h".
(continue_lwp, singlestep_lwp, attach_lwp): Remove
unnecessary 'extern' keywords.  Move pre-function comments to
lwp-ctrl.h.  Take an ordinary 'pid_t', not an 'lwpid_t', since
we're calling ptrace / tkill, and that's what they expect; rename
arguments accordingly.  Preserve value of errno across calls to
fprintf when reporting errors.
(kill_lwp): All the above, and use tkill system call if available.
* configure.in: Whenever we include thread-db.o in TARGET_MODULES,
also include lwp-pool.o.
On i386 and FRV Linux, use the stock-breakpoints module.
* config.in: Add template for STOCK_BREAKPOINTS.
* Makefile.am (EXTRA_rda_SOURCES): Include stock-breakpoints.c.
* Makefile.in, aclocal.m4, configure: Regenerated.
@
text
@d6 3
@


1.5
log
@Make config.in generated automatically again.
* configure.in: Provide descriptions for all the preprocessor
symbols we define.
* configure: Regenerated.
* config.in: Regenerated using autoheader.
@
text
@d171 3
@


1.4
log
@Linux/FR-V support.
@
text
@d1 1
a1 2
/* config.in.  At one time this was generated automatically from
  configure.in by autoheader.  It is now being maintained by hand.  */
d3 14
a16 2
/* Name of package */
#undef PACKAGE
d18 2
a19 2
/* Version number of package */
#undef VERSION
d21 1
a21 1
/* Define if system has <errno.h> */
d24 19
a42 1
/* Define if system has <ptrace.h> */
d45 1
a45 1
/* Define if system has <signal.h> */
d48 5
a52 2
/* Define if system has <string.h> */
#undef HAVE_STRING_H
d54 1
a54 1
/* Define if system has <strings.h> */
d57 4
a60 1
/* Define if system has <sys/procfs.h> */
d63 1
a63 4
/* Define if system has <asm/reg.h> */
#undef HAVE_ASM_REG_H

/* Define if system has <sys/ptrace.h> */
d66 1
a66 1
/* Define if system has <sys/reg.h> */
d69 5
a73 2
/* Define if system has <sys/user.h> */
#undef HAVE_SYS_USER_H
d75 1
a75 1
/* Define if system has <sys/wait.h> */
d78 41
a118 2
/* Define for ptrace systems, to the size of a ptrace word. */
#undef PTRACE_XFER_SIZE
d120 2
a121 2
/* Define if ptrace transfer type is long or unsigned long. */
#undef PTRACE_XFER_TYPE_LONG
d123 2
a124 2
/* Define if ptrace transfer type is long long or unsigned long long. */
#undef PTRACE_XFER_TYPE_LONG_LONG
d150 2
d153 2
a154 2
/* Define if target is x86 Linux */
#undef X86_LINUX_TARGET
d156 2
a157 11
/* Define if target is powerpc Linux */
#undef PPC_LINUX_TARGET

/* Define if target is m68k Linux */
#undef M68K_LINUX_TARGET

/* Define if target is alpha Linux */
#undef ALPHA_LINUX_TARGET

/* Define if target is arm Linux */
#undef ARM_LINUX_TARGET
a161 21
/* Define if target is 64-bit MIPS Linux */
#undef MIPS64_LINUX_TARGET

/* Define if target is (32-bit) MIPS Linux */
#undef MIPS_LINUX_TARGET

/* Define if target uses MIPS n64 ABI */
#undef MIPS_ABI_N64

/* Define if target uses MIPS n32 ABI */
#undef MIPS_ABI_N32

/* Define if target uses MIPS o32 ABI */
#undef MIPS_ABI_O32

/* Define if target is FR-V Linux r FR-V uClinux */
#undef FRV_LINUX_TARGET

/* Define if target is any Linux */
#undef LINUX_TARGET

d165 2
a166 2
/* Define the type name of a gregset */
#undef GREGSET_T
d168 2
a169 2
/* Define the type name of an fpregset */
#undef FPREGSET_T
d171 2
a172 2
/* Define if system headers will define lwpid_t */
#undef HAVE_LWPID_T
d174 2
a175 11
/* Define if system headers will define psaddr_t */
#undef HAVE_PSADDR_T

/* Define if system headers will define prgregset_t */
#undef HAVE_PRGREGSET_T

/* Define if system headers will define prfpregset_t */
#undef HAVE_PRFPREGSET_T

/* Define name / location of libthread_db.so */
#undef LIBTHREAD_DB_SO
@


1.4.2.1
log
@Add an architecture object to the Unix server.
* arch.h: New header file.
* server.h (struct arch): New forward struct declaration.
(struct child_process): Add an 'arch' member to the process.
* thread-db.c: #include arch.h.
* linux-target.c: #include arch.h.
(allocate_empty_arch): New function.
(x86_make_arch): New function.
(MAKE_ARCH): New #definition.
(linux_attach): Initialize process's architecture.

Provide arch-independent framework for breakpoints.
* server.h (struct arch_bp_table): New forward struct declaration.
(struct child_process): New member: 'breakpoint_table'.
* linux-target.c (linux_attach): Initialize process's breakpoint
table, if the architecture defines a breakpoint table constructor.
* arch.h (struct arch): Add fields pointing to breakpoint functions.

Provide a module implementing breakpoints for architectures that
support a simple software breakpoint model ("patch these bytes
into the instruction stream").
* stock-breakpoints.h, stock-breakpoints.c: New files.
* linux-target.c: If STOCK_BREAKPOINTS is #defined, then #include
"stock-breakpoints.h".
* Makefile.am (EXTRA_rda_SOURCES): Add stock-breakpoints.c.
* Makefile.in: Updated.

Define x86 breakpoint functions using the stock-breakpoints.c
model.
* configure.in: When configuring for an x86 target, include
stock-breakpoints.o in the mix, and #define STOCK_BREAKPOINTS.
* configure: Regenerated.
* config.in (STOCK_BREAKPOINTS): Provide #definition template.
* linux-target.c (stock_table_to_x86, x86_table_to_stock,
stock_bp_to_x86, x86_bp_to_stock, x86_make_bp_table, x86_set_bp,
x86_delete_bp, x86_bp_hit_p): New functions.
(x86_make_arch): Register the latter four as our breakpoint
methods.

Use the libthread_db event interface to communicate with the
thread library, if the old signal-based interface is not
supported.
* thread-db.c: #include <assert.h>.
(thread_db_event_str): New function.
(get_target_int_by_name, set_target_int_by_name, get_thread_signals)
(cancel_signal, restart_signal, debug_signal): Move these to just
before thread_db_dlopen; get_thread_signals is a subroutine of that.
(using_thread_db_events, create_notification, death_notification,
create_event_breakpoint, death_event_breakpoint): New global vars.
(get_event_notification, set_event_breakpoint)
(insert_thread_db_event_breakpoints)
(delete_thread_db_event_breakpoints, request_thread_db_events)
(hit_thread_db_event_breakpoint): New functions.
(thread_db_open): Call get_thread_signals, and if that fails, call
request_thread_db_events.
(struct event_list): Add 'thread_db_event' member.
(add_pending_event): Initialize it.
(delete_pending_event, handle_thread_db_events): New functions.
(find_new_threads_callback): If we're using the event interface,
enable event reporting on each new thread we find.
(select_pending_event): Return a value to indicate whether we
selected any event at all.
(continue_all_threads): Send a restart signal only if we're using
the signal-based interface.
(thread_db_check_child_state): If we're using the libthread_db
event interface to communicate with the inferior thread library,
check for those events here.  If select_pending_event says it
didn't find anything interesting, that means we consumed all the
reportable events; continue the program silently.
* ptrace-target.c: #include <sys/types.h> and <linux/unistd.h>.
(tkill): Generate code for this syscall.
(stop_lwp): Use tkill instead of kill.

* thread-db.c (thread_db_check_child_state): Call stop_all_threads
before calling update_thread_list, so RDA will have to compete for
CPU with fewer running threads.

* thread-db.c (wait_all_threads): Move calls to
select_pending_event and send_pending_signals from here...
(thread_db_check_child_state): To here.

* thread-db.c (ignore_thread_signal): New function.
(thread_db_check_child_state): Call it, instead of writing it out.

* thread-db.c (thread_db_open): Return 0 on success, -1 on
failure, like most of the other int-valued functions in this file,
and like most system calls.

* thread-db.c (struct gdbserv_thread): Doc fixes.

* thread-db.c: #include "gdbserv-utils.h", to get prototypes for
the 'struct gdbserv_reg' manipulation functions.

* thread-db.c (thread_db_noisy): Initialize to 1.

* thread-db.c (thread_debug_name): New function.
(find_new_threads_callback): If noisy, report new threads.
(stop_thread): If noisy, report stopping threads.
(select_pending_event): If noisy, report what we selected.
(wait_all_threads): If noisy, report before each thread we wait
for.

* thread-db.c (stop_all_threads): Doc fixes.

* aclocal.m4: Regenerated.
@
text
@a138 3

/* Define if we're using the stock breakpoint implementation.  */
#undef STOCK_BREAKPOINTS
@


1.4.2.2
log
@Merge changes from trunk, to make progressive branch-vs.-trunk
diffs easier to generate.

2005-03-10  Jim Blandy  <jimb@@redhat.com>

* Makefile.in, aclocal.m4: Regenerated with automake 1.9.4.

Make config.in generated automatically again.
* configure.in: Provide descriptions for all the preprocessor
symbols we define.
* configure: Regenerated.
* config.in: Regenerated using autoheader.

* linux-target.c (frv_fdpic_loadmap_addresses): Use '%lx' for
unsigned long argument.
@
text
@d1 2
a2 1
/* config.in.  Generated from configure.in by autoheader.  */
d4 2
a5 2
/* Define if target is Alpha Linux */
#undef ALPHA_LINUX_TARGET
d7 2
a8 5
/* Define if target is ARM Linux */
#undef ARM_LINUX_TARGET

/* Define the type name of an fpregset */
#undef FPREGSET_T
d10 1
a10 10
/* Define if target is FRV Linux */
#undef FRV_LINUX_TARGET

/* Define the type name of a gregset */
#undef GREGSET_T

/* Define to 1 if you have the <asm/reg.h> header file. */
#undef HAVE_ASM_REG_H

/* Define to 1 if you have the <errno.h> header file. */
d13 1
a13 19
/* Define to 1 if you have the <inttypes.h> header file. */
#undef HAVE_INTTYPES_H

/* Define if system headers will define lwpid_t */
#undef HAVE_LWPID_T

/* Define to 1 if you have the <memory.h> header file. */
#undef HAVE_MEMORY_H

/* Define if system headers will define prfpregset_t */
#undef HAVE_PRFPREGSET_T

/* Define if system headers will define psaddr_t */
#undef HAVE_PRGREGSET_T

/* Define if system headers will define psaddr_t */
#undef HAVE_PSADDR_T

/* Define to 1 if you have the <ptrace.h> header file. */
d16 1
a16 1
/* Define to 1 if you have the <signal.h> header file. */
d19 2
a20 5
/* Define to 1 if you have the <stdint.h> header file. */
#undef HAVE_STDINT_H

/* Define to 1 if you have the <stdlib.h> header file. */
#undef HAVE_STDLIB_H
d22 1
a22 1
/* Define to 1 if you have the <strings.h> header file. */
d25 2
a26 2
/* Define to 1 if you have the <string.h> header file. */
#undef HAVE_STRING_H
d28 2
a29 2
/* Define to 1 if you have the <sys/procfs.h> header file. */
#undef HAVE_SYS_PROCFS_H
d31 1
a31 1
/* Define to 1 if you have the <sys/ptrace.h> header file. */
d34 1
a34 1
/* Define to 1 if you have the <sys/reg.h> header file. */
d37 2
a38 5
/* Define to 1 if you have the <sys/stat.h> header file. */
#undef HAVE_SYS_STAT_H

/* Define to 1 if you have the <sys/types.h> header file. */
#undef HAVE_SYS_TYPES_H
d40 1
a40 1
/* Define to 1 if you have the <sys/wait.h> header file. */
d43 2
a44 2
/* Define to 1 if you have the <unistd.h> header file. */
#undef HAVE_UNISTD_H
d46 2
a47 2
/* Define name / location of libthread_db.so */
#undef LIBTHREAD_DB_SO
d49 2
a50 41
/* Define if target is any Linux */
#undef LINUX_TARGET

/* Define if target is m68k Linux */
#undef M68K_LINUX_TARGET

/* Define if target is 64-bit MIPS Linux */
#undef MIPS64_LINUX_TARGET

/* Define if target uses MIPS n32 ABI */
#undef MIPS_ABI_N32

/* Define if target uses MIPS n64 ABI */
#undef MIPS_ABI_N64

/* Define if target uses MIPS o32 ABI */
#undef MIPS_ABI_O32

/* Define if target is (32-bit) MIPS Linux */
#undef MIPS_LINUX_TARGET

/* Name of package */
#undef PACKAGE

/* Define to the address where bug reports for this package should be sent. */
#undef PACKAGE_BUGREPORT

/* Define to the full name of this package. */
#undef PACKAGE_NAME

/* Define to the full name and version of this package. */
#undef PACKAGE_STRING

/* Define to the one symbol short name of this package. */
#undef PACKAGE_TARNAME

/* Define to the version of this package. */
#undef PACKAGE_VERSION

/* Define if target is powerpc Linux */
#undef PPC_LINUX_TARGET
a75 2
/* Define for ptrace systems, to the size of a ptrace word. */
#undef PTRACE_XFER_SIZE
d77 11
a87 2
/* Define if ptrace transfer type is long or unsigned long. */
#undef PTRACE_XFER_TYPE_LONG
d89 2
a90 2
/* Define if ptrace transfer type is long long or unsigned long long. */
#undef PTRACE_XFER_TYPE_LONG_LONG
d95 21
d119 2
a120 2
/* Define if target is 32-bit SPARC Solaris. */
#undef SPARC32_SOLARIS_TARGET
d122 2
a123 2
/* Define to 1 if you have the ANSI C header files. */
#undef STDC_HEADERS
d125 11
a135 2
/* Define if the target uses the stock-breakpoints.o module. */
#undef STOCK_BREAKPOINTS
d137 2
a138 2
/* Version number of package */
#undef VERSION
d140 2
a141 2
/* Define if target is x86 Linux */
#undef X86_LINUX_TARGET
@


1.3
log
@	* config.in (LIBTHREAD_DB_SO): New macro.
	* configure.in (mips64*linux*): Remove no-threads.o from
	TARGET_MODULES list.  Add thread-db.o to this list.
	* configure: Regenerate.
@
text
@d110 3
@


1.2
log
@Add mips64-linux targets.
@
text
@d133 3
@


1.1
log
@Added files comprising RDA.
@
text
@d95 4
a98 1
/* Define if target is MIPS Linux */
d100 9
@

