head	1.12;
access;
symbols
	binutils-2_24-branch:1.12.0.22
	binutils-2_24-branchpoint:1.12
	binutils-2_21_1:1.12
	binutils-2_23_2:1.12
	binutils-2_23_1:1.12
	binutils-2_23:1.12
	binutils-2_23-branch:1.12.0.20
	binutils-2_23-branchpoint:1.12
	binutils-2_22_branch:1.12.0.18
	binutils-2_22:1.12
	binutils-2_22-branch:1.12.0.16
	binutils-2_22-branchpoint:1.12
	binutils-2_21:1.12
	binutils-2_21-branch:1.12.0.14
	binutils-2_21-branchpoint:1.12
	binutils-2_20_1:1.12
	binutils-2_20:1.12
	binutils-arc-20081103-branch:1.12.0.12
	binutils-arc-20081103-branchpoint:1.12
	binutils-2_20-branch:1.12.0.10
	binutils-2_20-branchpoint:1.12
	dje-cgen-play1-branch:1.12.0.8
	dje-cgen-play1-branchpoint:1.12
	arc-20081103-branch:1.12.0.6
	arc-20081103-branchpoint:1.12
	binutils-2_19_1:1.12
	binutils-2_19:1.12
	binutils-2_19-branch:1.12.0.4
	binutils-2_19-branchpoint:1.12
	binutils-2_18:1.12
	binutils-2_18-branch:1.12.0.2
	binutils-2_18-branchpoint:1.12
	binutils-csl-coldfire-4_1-32:1.11
	binutils-csl-sourcerygxx-4_1-32:1.11
	binutils-csl-innovasic-fido-3_4_4-33:1.11
	binutils-csl-sourcerygxx-3_4_4-32:1.10
	binutils-csl-coldfire-4_1-30:1.11
	binutils-csl-sourcerygxx-4_1-30:1.11
	binutils-csl-coldfire-4_1-28:1.11
	binutils-csl-sourcerygxx-4_1-29:1.11
	binutils-csl-sourcerygxx-4_1-28:1.11
	binutils-csl-arm-2006q3-27:1.11
	binutils-csl-sourcerygxx-4_1-27:1.11
	binutils-csl-arm-2006q3-26:1.11
	binutils-csl-sourcerygxx-4_1-26:1.11
	binutils-csl-sourcerygxx-4_1-25:1.11
	binutils-csl-sourcerygxx-4_1-24:1.11
	binutils-csl-sourcerygxx-4_1-23:1.11
	binutils-csl-sourcerygxx-4_1-21:1.11
	binutils-csl-arm-2006q3-21:1.11
	binutils-csl-sourcerygxx-4_1-22:1.11
	binutils-csl-palmsource-arm-prelinker-1_0-1:1.11
	binutils-csl-sourcerygxx-4_1-20:1.11
	binutils-csl-arm-2006q3-19:1.11
	binutils-csl-sourcerygxx-4_1-19:1.11
	binutils-csl-sourcerygxx-4_1-18:1.11
	binutils-csl-renesas-4_1-9:1.11
	binutils-csl-sourcerygxx-3_4_4-25:1.10
	binutils-csl-renesas-4_1-8:1.11
	binutils-csl-renesas-4_1-7:1.11
	binutils-csl-renesas-4_1-6:1.11
	binutils-csl-sourcerygxx-4_1-17:1.11
	binutils-csl-sourcerygxx-4_1-14:1.11
	binutils-csl-sourcerygxx-4_1-15:1.11
	binutils-csl-sourcerygxx-4_1-13:1.11
	binutils-2_17:1.11
	binutils-csl-sourcerygxx-4_1-12:1.11
	binutils-csl-sourcerygxx-3_4_4-21:1.11
	binutils-csl-wrs-linux-3_4_4-24:1.10
	binutils-csl-wrs-linux-3_4_4-23:1.10
	binutils-csl-sourcerygxx-4_1-9:1.11
	binutils-csl-sourcerygxx-4_1-8:1.11
	binutils-csl-sourcerygxx-4_1-7:1.11
	binutils-csl-arm-2006q1-6:1.11
	binutils-csl-sourcerygxx-4_1-6:1.11
	binutils-csl-wrs-linux-3_4_4-22:1.10
	binutils-csl-coldfire-4_1-11:1.11
	binutils-csl-sourcerygxx-3_4_4-19:1.11
	binutils-csl-coldfire-4_1-10:1.11
	binutils-csl-sourcerygxx-4_1-5:1.11
	binutils-csl-sourcerygxx-4_1-4:1.11
	binutils-csl-wrs-linux-3_4_4-21:1.10
	binutils-csl-morpho-4_1-4:1.11
	binutils-csl-sourcerygxx-3_4_4-17:1.11
	binutils-csl-wrs-linux-3_4_4-20:1.10
	binutils-2_17-branch:1.11.0.4
	binutils-2_17-branchpoint:1.11
	binutils-csl-2_17-branch:1.11.0.2
	binutils-csl-2_17-branchpoint:1.11
	binutils-csl-gxxpro-3_4-branch:1.10.0.6
	binutils-csl-gxxpro-3_4-branchpoint:1.10
	binutils-2_16_1:1.10
	binutils-csl-arm-2005q1b:1.10
	binutils-2_16:1.10
	binutils-csl-arm-2005q1a:1.10
	binutils-csl-arm-2005q1-branch:1.10.0.4
	binutils-csl-arm-2005q1-branchpoint:1.10
	binutils-2_16-branch:1.10.0.2
	binutils-2_16-branchpoint:1.10
	csl-arm-2004-q3d:1.9
	csl-arm-2004-q3:1.9
	gprof-pre-ansify-2004-05-26:1.8
	gprof-post-ansify-2004-05-26:1.9
	binutils-2_15:1.8
	binutils-2_15-branchpoint:1.8
	csl-arm-2004-q1a:1.8
	csl-arm-2004-q1:1.8
	binutils-2_15-branch:1.8.0.8
	cagney_bfdfile-20040213-branch:1.8.0.6
	cagney_bfdfile-20040213-branchpoint:1.8
	cagney_bigcore-20040122-branch:1.8.0.4
	cagney_bigcore-20040122-branchpoint:1.8
	csl-arm-2003-q4:1.8
	binutils-2_14:1.8
	binutils-2_14-branch:1.8.0.2
	binutils-2_14-branchpoint:1.8
	binutils-2_13_2_1:1.7
	binutils-2_13_2:1.7
	binutils-2_13_1:1.7
	binutils-2_13:1.7
	binutils-2_13-branchpoint:1.7
	binutils-2_13-branch:1.7.0.4
	binutils-2_12_1:1.7
	binutils-2_12:1.7
	binutils-2_12-branch:1.7.0.2
	binutils-2_12-branchpoint:1.7
	cygnus_cvs_20020108_pre:1.4
	binutils-2_11_2:1.2.2.2
	binutils-2_11_1:1.2.2.2
	binutils-2_11:1.2
	x86_64versiong3:1.2
	binutils-2_11-branch:1.2.0.2
	binutils-2_10_1:1.1.1.1
	binutils-2_10:1.1.1.1
	binutils-2_10-branch:1.1.1.1.0.2
	binutils-2_10-branchpoint:1.1.1.1
	binutils_latest_snapshot:1.12
	repo-unification-2000-02-06:1.1.1.1
	binu_ss_19990721:1.1.1.1
	binu_ss_19990602:1.1.1.1
	binu_ss_19990502:1.1.1.1
	cygnus:1.1.1;
locks; strict;
comment	@ * @;


1.12
date	2007.07.06.10.40.34;	author nickc;	state Exp;
branches;
next	1.11;

1.11
date	2005.05.09.06.55.25;	author nickc;	state Exp;
branches;
next	1.10;

1.10
date	2005.03.03.12.05.12;	author amodra;	state Exp;
branches;
next	1.9;

1.9
date	2004.05.26.04.55.55;	author bje;	state Exp;
branches;
next	1.8;

1.8
date	2002.11.30.08.39.44;	author amodra;	state Exp;
branches;
next	1.7;

1.7
date	2002.02.01.08.24.16;	author amodra;	state Exp;
branches;
next	1.6;

1.6
date	2002.02.01.01.18.06;	author amodra;	state Exp;
branches;
next	1.5;

1.5
date	2002.01.31.12.56.07;	author amodra;	state Exp;
branches;
next	1.4;

1.4
date	2001.03.14.03.14.56;	author amodra;	state Exp;
branches;
next	1.3;

1.3
date	2001.03.13.21.07.30;	author nickc;	state Exp;
branches;
next	1.2;

1.2
date	2000.07.24.20.59.03;	author nickc;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	99.05.03.07.29.11;	author rth;	state Exp;
branches
	1.1.1.1;
next	;

1.2.2.1
date	2001.06.07.03.16.28;	author amodra;	state Exp;
branches;
next	1.2.2.2;

1.2.2.2
date	2001.06.11.10.05.03;	author amodra;	state Exp;
branches;
next	;

1.1.1.1
date	99.05.03.07.29.11;	author rth;	state Exp;
branches;
next	;


desc
@@


1.12
log
@CHange FSF sources over to GPLv3
@
text
@/* symtab.h

   Copyright 2000, 2001, 2002, 2004, 2007 Free Software Foundation, Inc.

   This file is part of GNU Binutils.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,
   MA 02110-1301, USA.  */

#ifndef symtab_h
#define symtab_h

/* For a profile to be intelligible to a human user, it is necessary
   to map code-addresses into source-code information.  Source-code
   information can be any combination of: (i) function-name, (ii)
   source file-name, and (iii) source line number.

   The symbol table is used to map addresses into source-code
   information.  */

#define NBBS 10

/* Symbol-entry.  For each external in the specified file we gather
   its address, the number of calls and compute its share of cpu time.  */
typedef struct sym
  {
    /* Common information:

       In the symbol-table, fields ADDR and FUNC_NAME are guaranteed
       to contain valid information.  FILE may be 0, if unknown and
       LINE_NUM maybe 0 if unknown.  */

    bfd_vma addr;		/* Address of entry point.  */
    bfd_vma end_addr;		/* End-address.  */
    const char *name;		/* Name of function this sym is from.  */
    Source_File *file;		/* Source file symbol comes from.  */
    int line_num;		/* Source line number.  */
    unsigned int		/* Boolean fields:  */
      is_func:1,		/*  Is this a function entry point?  */
      is_static:1,		/*  Is this a local (static) symbol?  */
      is_bb_head:1,		/*  Is this the head of a basic-blk?  */
      mapped:1,			/*  This symbol was mapped to another name.  */
      has_been_placed:1;	/*  Have we placed this symbol?  */
    unsigned long ncalls;	/* How many times executed  */
    int nuses;			/* How many times this symbol appears in
				   a particular context.  */
    bfd_vma bb_addr[NBBS];	/* Address of basic-block start.  */
    unsigned long bb_calls[NBBS];/* How many times basic-block was called.  */
    struct sym *next;		/* For building chains of syms.  */
    struct sym *prev;		/* For building chains of syms.  */

    /* Profile specific information:  */

    /* Histogram specific information:  */
    struct
      {
	double time;		/* (Weighted) ticks in this routine.  */
	bfd_vma scaled_addr;	/* Scaled entry point.  */
      }
    hist;

    /* Call-graph specific information:  */
    struct
      {
	unsigned long self_calls; /* How many calls to self.  */
	double child_time;	/* Cumulative ticks in children.  */
	int index;		/* Index in the graph list.  */
	int top_order;		/* Graph call chain top-sort order.  */
	bfd_boolean print_flag;	/* Should this be printed?  */
	struct
	  {
	    double fract;	/* What % of time propagates.  */
	    double self;	/* How much self time propagates.  */
	    double child;	/* How much child time propagates.  */
	  }
	prop;
	struct
	  {
	    int num;		/* Internal number of cycle on.  */
	    struct sym *head;	/* Head of cycle.  */
	    struct sym *next;	/* Next member of cycle.  */
	  }
	cyc;
	struct arc *parents;	/* List of caller arcs.  */
	struct arc *children;	/* List of callee arcs.  */
      }
    cg;
  }
Sym;

/* Symbol-tables are always assumed to be sorted
   in increasing order of addresses.  */
typedef struct
  {
    unsigned int len;		/* # of symbols in this table.  */
    Sym *base;			/* First element in symbol table.  */
    Sym *limit;			/* Limit = base + len.  */
  }
Sym_Table;

extern Sym_Table symtab;	/* The symbol table.  */

extern void sym_init        (Sym *);
extern void symtab_finalize (Sym_Table *);
#ifdef DEBUG
extern Sym *dbg_sym_lookup  (Sym_Table *, bfd_vma);
#endif
extern Sym *sym_lookup      (Sym_Table *, bfd_vma);
extern void find_call       (Sym *, bfd_vma, bfd_vma);

#endif /* symtab_h */
@


1.11
log
@Update the address of the FSF
@
text
@d3 1
a3 1
   Copyright 2000, 2001, 2002, 2004 Free Software Foundation, Inc.
d5 1
a5 1
This file is part of GNU Binutils.
d7 14
a20 13
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA 02110-1301, USA.  */
@


1.10
log
@update copyright dates
@
text
@d19 1
a19 1
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
@


1.9
log
@	* alpha.c, basic_blocks.c, basic_blocks.h, bb_exit_func.c,
	call_graph.c, call_graph.h, cg_arcs.c, cg_arcs.h, cg_dfn.c,
	cg_dfn.h, cg_print.c, cg_print.h, corefile.c, corefile.h,
	gmon_io.c, gmon_io.h, gprof.c, gprof.h, hertz.h, hist.c, hist.h,
	i386.c, mips.c, search_list.c, search_list.h, source.c, source.h,
	sparc.c, sym_ids.c, sym_ids.h, symtab.c, symtab.h, tahoe.c,
	utils.c, utils.h, vax.c, gen-c-prog.awk: Convert K&R C to ANSI C.
@
text
@d3 1
a3 1
   Copyright 2000, 2001, 2002 Free Software Foundation, Inc.
@


1.8
log
@s/boolean/bfd_boolean/ s/true/TRUE/ s/false/FALSE/.  Simplify
comparisons of bfd_boolean vars with TRUE/FALSE.  Formatting.
@
text
@d114 2
a115 2
extern void sym_init        PARAMS ((Sym *));
extern void symtab_finalize PARAMS ((Sym_Table *));
d117 1
a117 1
extern Sym *dbg_sym_lookup  PARAMS ((Sym_Table *, bfd_vma));
d119 2
a120 2
extern Sym *sym_lookup      PARAMS ((Sym_Table *, bfd_vma));
extern void find_call       PARAMS ((Sym *, bfd_vma, bfd_vma));
@


1.7
log
@	* alpha.c (alpha_find_call): Warning fixes.
	* mips.c (mips_find_call): Likewise.
	* sparc.c (sparc_find_call): Likewise.
	* basic_blocks.c: Warning fixes.  Eliminate DEFUN.
	* call_graph.c: Likewise.
	* cg_arcs.c: Likewise.
	* cg_dfn.cp: Likewise.
	* gprof.c: Likewise.
	* gprof.h: Likewise.
	* hist.c: Likewise.
	* search_list.c: Likewise.
	* source.c: Likewise.
	* source.h: Likewise.
	* sym_ids.c: Likewise.
	* symtab.c: Likewise.
	* symtab.h: Likewise.
	* utils.c: Likewise.
	* cg_print.c: Likewise.
	(struct function_map, symbol_map, symbol_map_count): Move
	declaration to..
	* corefile: ..here.
	* corefile.c: Warning fixes.  Eliminate DEFUN.
	(struct function_map): Remove declaration.
	* gmon_io.c: Warning fixes.  Eliminate DEFUN.
	(gmon_io_read_64): Make static.
	(gmon_io_write_64): Likewise.
	(gmon_read_raw_arc): Likewise.
	(gmon_write_raw_arc): Likewise.
	(gmon_io_write_8): Don't pass char, pass int param.
	* gmon_io.h (gmon_io_write_8): Likewise.

and a few copyright dates that should have been done previously.
@
text
@d80 1
a80 1
	boolean print_flag;	/* Should this be printed?  */
@


1.6
log
@	* basic_blocks.c: Replace bool with boolean, TRUE with true and
	FALSE with false throughout.
	* basic_blocks.h: Likewise.
	* cg_arcs.c: Likewise.
	* cg_dfn.c: Likewise.
	* cg_print.c: Likewise.
	* corefile.c: Likewise.
	* gmon_io.c: Likewise.
	* gprof.c: Likewise.
	* hist.c: Likewise.
	* mips.c: Likewise.
	* source.c: Likewise.
	* source.h: Likewise.
	* sym_ids.c: Likewise.
	* sym_ids.h: Likewise.
	* symtab.h: Likewise.
	* tahoe.c: Likewise.
	* vax.c: Likewise.
	* gprof.h: Likewise.
	(TRUE): Don't define.
	(FALSE): Don't define.
@
text
@d3 1
a3 1
   Copyright 2000, 2001 Free Software Foundation, Inc.
d116 3
@


1.5
log
@	* alpha.c (alpha_Instruction): Don't use.
	(alpha_find_call): Avoid use of bitfields and casts between
	pointers and integers of different sizes.  Avoid endian problems
	when cross-compiling.
	* vax.c (vax_find_call): Likewise.
	(struct modebyte): Don't use.
	(vax_operandmode): Pass in an unsigned char *.
	(vax_operandlength): Likewise.
	(vax_reladdr): Rename to vax_offset and return relative offset
	rather than address.
	* i386.c (i386_find_call): Avoid casts between pointers and
	integers of different sizes.
	* sparc.c (sparc_find_call): Likewise.  Avoid endian problems.
	* tahoe.c (tahoe_find_call): Likewise.
	(tahoe_reladdr): Rename to tahoe_offset and return relative offset
	rather than address.

	* basic_blocks.h: Don't include headers here.
	* call_graph.h: Likewise.
	* cg_arcs.h: Likewise.
	* cg_print.h: Likewise.
	* corefile.h: Likewise.
	* gmon_io.h: Likewise.
	* gmon_out.h: Likewise.
	* hertz.h: Likewise.
	* hist.h: Likewise.
	* source.h: Likewise.
	* sym_ids.h: Likewise.
	* symtab.h: Likewise.
	* gprof.h: Don't include ansidecl.h, do include bfd.h.
	(bool): Don't typedef.
	* alpha.c: Adjust #include's for above header changes.
	* basic_blocks.c: Likewise.
	* call_graph.c: Likewise.
	* cg_arcs.c: Likewise.
	* cg_dfn.c: Likewise.
	* cg_print.c: Likewise.
	* corefile.c: Likewise.
	* gmon_io.c: Likewise.
	* gprof.c: Likewise.
	* hertz.c: Likewise.
	* hist.c: Likewise.
	* i386.c: Likewise.
	* mips.c: Likewise.
	* sparc.c: Likewise.
	* sym_ids.c: Likewise.
	* symtab.c: Likewise.
	* tahoe.c: Likewise.
	* utils.c: Likewise.
	* vax.c: Likewise.

	* po/POTFILES.in: Regenerate.
@
text
@d80 1
a80 1
	bool print_flag;	/* Should this be printed?  */
@


1.4
log
@David Mosberger's fixes for cross compiling gprof.
@
text
@a23 3
#include "bfd.h"
#include "gprof.h"

a30 2

#include "source.h"
@


1.3
log
@Fix typos in ChangeLog; fix dates in copyright notices
@
text
@d2 2
a3 2
   
   Copyright 2000 Free Software Foundation, Inc.
d31 1
a31 1
  
d44 1
a44 1
      
d48 1
a48 1
    
@


1.2
log
@Add GPL copyright notices to uncopyrighted files.
Add copy of GPL.
@
text
@d3 1
a3 1
   Copyright (C) 2000  Free Software Foundation, Inc.
@


1.2.2.1
log
@Update copyright notices.
@
text
@d2 2
a3 2

   Copyright 2000, 2001 Free Software Foundation, Inc.
@


1.2.2.2
log
@Merge from mainline.
@
text
@d31 1
a31 1

d44 1
a44 1

d48 1
a48 1

@


1.1
log
@Initial revision
@
text
@d1 20
d27 7
a33 9
/*
 * For a profile to be intelligible to a human user, it is necessary
 * to map code-addresses into source-code information.  Source-code
 * information can be any combination of: (i) function-name, (ii)
 * source file-name, and (iii) source line number.
 *
 * The symbol table is used to map addresses into source-code
 * information.
 */
d39 2
a40 4
/*
 * Symbol-entry.  For each external in the specified file we gather
 * its address, the number of calls and compute its share of cpu time.
 */
d43 24
a66 24
    /*
     * Common information:
     *
     * In the symbol-table, fields ADDR and FUNC_NAME are guaranteed
     * to contain valid information.  FILE may be 0, if unknown and
     * LINE_NUM maybe 0 if unknown.
     */
    bfd_vma addr;		/* address of entry point */
    bfd_vma end_addr;		/* end-address */
    const char *name;		/* name of function this sym is from */
    Source_File *file;		/* source file symbol comes from */
    int line_num;		/* source line number */
    unsigned int is_func:1,	/* is this a function entry point? */
      is_static:1,		/* is this a local (static) symbol? */
      is_bb_head:1,		/* is this the head of a basic-blk? */
      mapped:1,			/* this symbol was mapped to another name */
      has_been_placed:1;	/* have we placed this symbol?  */
    unsigned long ncalls;	/* how many times executed */
    int nuses;			/* how many times this symbol appears in
				   a particular context */
    bfd_vma bb_addr[NBBS];	/* address of basic-block start */
    unsigned long bb_calls[NBBS]; /* how many times basic-block was called */
    struct sym *next;		/* for building chains of syms */
    struct sym *prev;		/* for building chains of syms */
d68 1
a68 1
    /* profile-specific information: */
d70 1
a70 1
    /* histogram specific info: */
d73 2
a74 2
	double time;		/* (weighted) ticks in this routine */
	bfd_vma scaled_addr;	/* scaled entry point */
d78 1
a78 1
    /* call-graph specific info: */
d81 5
a85 5
	unsigned long self_calls; /* how many calls to self */
	double child_time;	/* cumulative ticks in children */
	int index;		/* index in the graph list */
	int top_order;		/* graph call chain top-sort order */
	bool print_flag;	/* should this be printed? */
d88 3
a90 3
	    double fract;	/* what % of time propagates */
	    double self;	/* how much self time propagates */
	    double child;	/* how much child time propagates */
d95 3
a97 3
	    int num;		/* internal number of cycle on */
	    struct sym *head;	/* head of cycle */
	    struct sym *next;	/* next member of cycle */
d100 2
a101 2
	struct arc *parents;	/* list of caller arcs */
	struct arc *children;	/* list of callee arcs */
d107 2
a108 4
/*
 * Symbol-tables are always assumed to be sorted in increasing order
 * of addresses:
 */
d111 3
a113 3
    unsigned int len;		/* # of symbols in this table */
    Sym *base;			/* first element in symbol table */
    Sym *limit;			/* limit = base + len */
d117 1
a117 1
extern Sym_Table symtab;	/* the symbol table */
d119 4
a122 5
extern void sym_init PARAMS ((Sym * sym));
extern void symtab_finalize PARAMS ((Sym_Table * symtab));
extern Sym *sym_lookup PARAMS ((Sym_Table * symtab, bfd_vma address));

extern void find_call PARAMS ((Sym *, bfd_vma, bfd_vma));
@


1.1.1.1
log
@19990502 sourceware import
@
text
@@

