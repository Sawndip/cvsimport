head	1.14;
access;
symbols
	binutils-2_24-branch:1.14.0.20
	binutils-2_24-branchpoint:1.14
	binutils-2_21_1:1.14
	binutils-2_23_2:1.14
	binutils-2_23_1:1.14
	binutils-2_23:1.14
	binutils-2_23-branch:1.14.0.18
	binutils-2_23-branchpoint:1.14
	binutils-2_22_branch:1.14.0.16
	binutils-2_22:1.14
	binutils-2_22-branch:1.14.0.14
	binutils-2_22-branchpoint:1.14
	binutils-2_21:1.14
	binutils-2_21-branch:1.14.0.12
	binutils-2_21-branchpoint:1.14
	binutils-2_20_1:1.14
	binutils-2_20:1.14
	binutils-arc-20081103-branch:1.14.0.10
	binutils-arc-20081103-branchpoint:1.14
	binutils-2_20-branch:1.14.0.8
	binutils-2_20-branchpoint:1.14
	dje-cgen-play1-branch:1.14.0.6
	dje-cgen-play1-branchpoint:1.14
	arc-20081103-branch:1.14.0.4
	arc-20081103-branchpoint:1.14
	binutils-2_19_1:1.14
	binutils-2_19:1.14
	binutils-2_19-branch:1.14.0.2
	binutils-2_19-branchpoint:1.14
	binutils-2_18:1.13
	binutils-2_18-branch:1.13.0.2
	binutils-2_18-branchpoint:1.13
	binutils-csl-coldfire-4_1-32:1.12
	binutils-csl-sourcerygxx-4_1-32:1.12
	binutils-csl-innovasic-fido-3_4_4-33:1.12
	binutils-csl-sourcerygxx-3_4_4-32:1.11
	binutils-csl-coldfire-4_1-30:1.12
	binutils-csl-sourcerygxx-4_1-30:1.12
	binutils-csl-coldfire-4_1-28:1.12
	binutils-csl-sourcerygxx-4_1-29:1.12
	binutils-csl-sourcerygxx-4_1-28:1.12
	binutils-csl-arm-2006q3-27:1.12
	binutils-csl-sourcerygxx-4_1-27:1.12
	binutils-csl-arm-2006q3-26:1.12
	binutils-csl-sourcerygxx-4_1-26:1.12
	binutils-csl-sourcerygxx-4_1-25:1.12
	binutils-csl-sourcerygxx-4_1-24:1.12
	binutils-csl-sourcerygxx-4_1-23:1.12
	binutils-csl-sourcerygxx-4_1-21:1.12
	binutils-csl-arm-2006q3-21:1.12
	binutils-csl-sourcerygxx-4_1-22:1.12
	binutils-csl-palmsource-arm-prelinker-1_0-1:1.12
	binutils-csl-sourcerygxx-4_1-20:1.12
	binutils-csl-arm-2006q3-19:1.12
	binutils-csl-sourcerygxx-4_1-19:1.12
	binutils-csl-sourcerygxx-4_1-18:1.12
	binutils-csl-renesas-4_1-9:1.12
	binutils-csl-sourcerygxx-3_4_4-25:1.11
	binutils-csl-renesas-4_1-8:1.12
	binutils-csl-renesas-4_1-7:1.12
	binutils-csl-renesas-4_1-6:1.12
	binutils-csl-sourcerygxx-4_1-17:1.12
	binutils-csl-sourcerygxx-4_1-14:1.12
	binutils-csl-sourcerygxx-4_1-15:1.12
	binutils-csl-sourcerygxx-4_1-13:1.12
	binutils-2_17:1.12
	binutils-csl-sourcerygxx-4_1-12:1.12
	binutils-csl-sourcerygxx-3_4_4-21:1.12
	binutils-csl-wrs-linux-3_4_4-24:1.11
	binutils-csl-wrs-linux-3_4_4-23:1.11
	binutils-csl-sourcerygxx-4_1-9:1.12
	binutils-csl-sourcerygxx-4_1-8:1.12
	binutils-csl-sourcerygxx-4_1-7:1.12
	binutils-csl-arm-2006q1-6:1.12
	binutils-csl-sourcerygxx-4_1-6:1.12
	binutils-csl-wrs-linux-3_4_4-22:1.11
	binutils-csl-coldfire-4_1-11:1.12
	binutils-csl-sourcerygxx-3_4_4-19:1.12
	binutils-csl-coldfire-4_1-10:1.12
	binutils-csl-sourcerygxx-4_1-5:1.12
	binutils-csl-sourcerygxx-4_1-4:1.12
	binutils-csl-wrs-linux-3_4_4-21:1.11
	binutils-csl-morpho-4_1-4:1.12
	binutils-csl-sourcerygxx-3_4_4-17:1.12
	binutils-csl-wrs-linux-3_4_4-20:1.11
	binutils-2_17-branch:1.12.0.4
	binutils-2_17-branchpoint:1.12
	binutils-csl-2_17-branch:1.12.0.2
	binutils-csl-2_17-branchpoint:1.12
	binutils-csl-gxxpro-3_4-branch:1.11.0.6
	binutils-csl-gxxpro-3_4-branchpoint:1.11
	binutils-2_16_1:1.11
	binutils-csl-arm-2005q1b:1.11
	binutils-2_16:1.11
	binutils-csl-arm-2005q1a:1.11
	binutils-csl-arm-2005q1-branch:1.11.0.4
	binutils-csl-arm-2005q1-branchpoint:1.11
	binutils-2_16-branch:1.11.0.2
	binutils-2_16-branchpoint:1.11
	csl-arm-2004-q3d:1.10
	csl-arm-2004-q3:1.10
	gprof-pre-ansify-2004-05-26:1.8
	gprof-post-ansify-2004-05-26:1.9
	binutils-2_15:1.8
	binutils-2_15-branchpoint:1.8
	csl-arm-2004-q1a:1.8
	csl-arm-2004-q1:1.8
	binutils-2_15-branch:1.8.0.12
	cagney_bfdfile-20040213-branch:1.8.0.10
	cagney_bfdfile-20040213-branchpoint:1.8
	cagney_bigcore-20040122-branch:1.8.0.8
	cagney_bigcore-20040122-branchpoint:1.8
	csl-arm-2003-q4:1.8
	binutils-2_14:1.8
	binutils-2_14-branch:1.8.0.6
	binutils-2_14-branchpoint:1.8
	binutils-2_13_2_1:1.8
	binutils-2_13_2:1.8
	binutils-2_13_1:1.8
	binutils-2_13:1.8
	binutils-2_13-branchpoint:1.8
	binutils-2_13-branch:1.8.0.4
	binutils-2_12_1:1.8
	binutils-2_12:1.8
	binutils-2_12-branch:1.8.0.2
	binutils-2_12-branchpoint:1.8
	cygnus_cvs_20020108_pre:1.6
	binutils-2_11_2:1.4.2.2
	binutils-2_11_1:1.4.2.2
	binutils-2_11:1.4
	x86_64versiong3:1.4
	binutils-2_11-branch:1.4.0.2
	binutils-2_10_1:1.3
	binutils-2_10:1.3
	binutils-2_10-branch:1.3.0.2
	binutils-2_10-branchpoint:1.3
	binutils_latest_snapshot:1.14
	repo-unification-2000-02-06:1.2
	binu_ss_19990721:1.2
	binu_ss_19990602:1.1.1.1
	binu_ss_19990502:1.1.1.1
	cygnus:1.1.1;
locks; strict;
comment	@ * @;


1.14
date	2008.07.30.04.34.57;	author amodra;	state Exp;
branches;
next	1.13;

1.13
date	2007.07.06.10.40.34;	author nickc;	state Exp;
branches;
next	1.12;

1.12
date	2005.05.09.06.55.25;	author nickc;	state Exp;
branches;
next	1.11;

1.11
date	2005.03.03.12.05.12;	author amodra;	state Exp;
branches;
next	1.10;

1.10
date	2004.06.15.01.11.43;	author amodra;	state Exp;
branches;
next	1.9;

1.9
date	2004.05.26.04.55.55;	author bje;	state Exp;
branches;
next	1.8;

1.8
date	2002.02.01.08.24.16;	author amodra;	state Exp;
branches;
next	1.7;

1.7
date	2002.01.31.12.56.07;	author amodra;	state Exp;
branches;
next	1.6;

1.6
date	2001.03.14.03.14.56;	author amodra;	state Exp;
branches;
next	1.5;

1.5
date	2001.03.13.21.07.30;	author nickc;	state Exp;
branches;
next	1.4;

1.4
date	2000.07.24.20.59.03;	author nickc;	state Exp;
branches
	1.4.2.1;
next	1.3;

1.3
date	2000.03.31.02.57.38;	author amodra;	state Exp;
branches;
next	1.2;

1.2
date	99.06.30.22.38.25;	author ian;	state Exp;
branches;
next	1.1;

1.1
date	99.05.03.07.29.11;	author rth;	state Exp;
branches
	1.1.1.1;
next	;

1.4.2.1
date	2001.06.07.03.16.28;	author amodra;	state Exp;
branches;
next	1.4.2.2;

1.4.2.2
date	2001.06.11.10.05.03;	author amodra;	state Exp;
branches;
next	;

1.1.1.1
date	99.05.03.07.29.11;	author rth;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Silence gcc printf warnings
@
text
@/* symtab.c

   Copyright 1999, 2000, 2001, 2002, 2004, 2007, 2008
   Free Software Foundation, Inc.

   This file is part of GNU Binutils.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA
   02110-1301, USA.  */

#include "gprof.h"
#include "search_list.h"
#include "source.h"
#include "symtab.h"
#include "cg_arcs.h"
#include "corefile.h"

static int cmp_addr (const PTR, const PTR);

Sym_Table symtab;


/* Initialize a symbol (so it's empty).  */

void
sym_init (Sym *sym)
{
  memset (sym, 0, sizeof (*sym));

  /* It is not safe to assume that a binary zero corresponds
     to a floating-point 0.0, so initialize floats explicitly.  */
  sym->hist.time = 0.0;
  sym->cg.child_time = 0.0;
  sym->cg.prop.fract = 0.0;
  sym->cg.prop.self = 0.0;
  sym->cg.prop.child = 0.0;
}


/* Compare the function entry-point of two symbols and return <0, =0,
   or >0 depending on whether the left value is smaller than, equal
   to, or greater than the right value.  If two symbols are equal
   but one has is_func set and the other doesn't, we make the
   non-function symbol one "bigger" so that the function symbol will
   survive duplicate removal.  Finally, if both symbols have the
   same is_func value, we discriminate against is_static such that
   the global symbol survives.  */

static int
cmp_addr (const PTR lp, const PTR rp)
{
  const Sym *left = (const Sym *) lp;
  const Sym *right = (const Sym *) rp;

  if (left->addr > right->addr)
    return 1;
  else if (left->addr < right->addr)
    return -1;

  if (left->is_func != right->is_func)
    return right->is_func - left->is_func;

  return left->is_static - right->is_static;
}


void
symtab_finalize (Sym_Table *tab)
{
  Sym *src, *dst;
  bfd_vma prev_addr;

  if (!tab->len)
    return;

  /* Sort symbol table in order of increasing function addresses.  */
  qsort (tab->base, tab->len, sizeof (Sym), cmp_addr);

  /* Remove duplicate entries to speed-up later processing and
     set end_addr if its not set yet.  */
  prev_addr = tab->base[0].addr + 1;

  for (src = dst = tab->base; src < tab->limit; ++src)
    {
      if (src->addr == prev_addr)
	{
	  /* If same address, favor global symbol over static one,
	     then function over line number.  If both symbols are
	     either static or global and either function or line, check
	     whether one has name beginning with underscore while
	     the other doesn't.  In such cases, keep sym without
	     underscore.  This takes cares of compiler generated
	     symbols (such as __gnu_compiled, __c89_used, etc.).  */
	  if ((!src->is_static && dst[-1].is_static)
	      || ((src->is_static == dst[-1].is_static)
		  && ((src->is_func && !dst[-1].is_func)
		      || ((src->is_func == dst[-1].is_func)
			  && ((src->name[0] != '_' && dst[-1].name[0] == '_')
			      || (src->name[0]
				  && src->name[1] != '_'
				  && dst[-1].name[1] == '_'))))))
	    {
	      DBG (AOUTDEBUG | IDDEBUG,
		   printf ("[symtab_finalize] favor %s@@%c%c over %s@@%c%c",
			   src->name, src->is_static ? 't' : 'T',
			   src->is_func ? 'F' : 'f',
			   dst[-1].name, dst[-1].is_static ? 't' : 'T',
			   dst[-1].is_func ? 'F' : 'f');
		   printf (" (addr=%lx)\n", (unsigned long) src->addr));

	      dst[-1] = *src;
	    }
	  else
	    {
	      DBG (AOUTDEBUG | IDDEBUG,
		   printf ("[symtab_finalize] favor %s@@%c%c over %s@@%c%c",
			   dst[-1].name, dst[-1].is_static ? 't' : 'T',
			   dst[-1].is_func ? 'F' : 'f',
			   src->name, src->is_static ? 't' : 'T',
			   src->is_func ? 'F' : 'f');
		   printf (" (addr=%lx)\n", (unsigned long) src->addr));
	    }
	}
      else
	{
	  if (dst > tab->base && dst[-1].end_addr == 0)
	    dst[-1].end_addr = src->addr - 1;

	  /* Retain sym only if it has a non-empty address range.  */
	  if (!src->end_addr || src->addr <= src->end_addr)
	    {
	      *dst = *src;
	      dst++;
	      prev_addr = src->addr;
	    }
	}
    }

  if (tab->len > 0 && dst[-1].end_addr == 0)
    dst[-1].end_addr
      = core_text_sect->vma + bfd_get_section_size (core_text_sect) - 1;

  DBG (AOUTDEBUG | IDDEBUG,
       printf ("[symtab_finalize]: removed %d duplicate entries\n",
	       tab->len - (int) (dst - tab->base)));

  tab->limit = dst;
  tab->len = tab->limit - tab->base;

  DBG (AOUTDEBUG | IDDEBUG,
       unsigned int j;

       for (j = 0; j < tab->len; ++j)
	 {
	   printf ("[symtab_finalize] 0x%lx-0x%lx\t%s\n",
		   (unsigned long) tab->base[j].addr,
		   (unsigned long) tab->base[j].end_addr,
		   tab->base[j].name);
	 }
  );
}


#ifdef DEBUG

Sym *
dbg_sym_lookup (Sym_Table *sym_tab, bfd_vma address)
{
  unsigned long low, mid, high;
  Sym *sym;

  fprintf (stderr, "[dbg_sym_lookup] address 0x%lx\n",
	   (unsigned long) address);

  sym = sym_tab->base;
  for (low = 0, high = sym_tab->len - 1; low != high;)
    {
      mid = (high + low) >> 1;

      fprintf (stderr, "[dbg_sym_lookup] low=0x%lx, mid=0x%lx, high=0x%lx\n",
	       low, mid, high);
      fprintf (stderr, "[dbg_sym_lookup] sym[m]=0x%lx sym[m + 1]=0x%lx\n",
	       (unsigned long) sym[mid].addr,
	       (unsigned long) sym[mid + 1].addr);

      if (sym[mid].addr <= address && sym[mid + 1].addr > address)
	return &sym[mid];

      if (sym[mid].addr > address)
	high = mid;
      else
	low = mid + 1;
    }

  fprintf (stderr, "[dbg_sym_lookup] binary search fails???\n");

  return 0;
}

#endif	/* DEBUG */


/* Look up an address in the symbol-table that is sorted by address.
   If address does not hit any symbol, 0 is returned.  */
Sym *
sym_lookup (Sym_Table *sym_tab, bfd_vma address)
{
  long low, high;
  long mid = -1;
  Sym *sym;
#ifdef DEBUG
  int probes = 0;
#endif /* DEBUG */

  if (!sym_tab->len)
    return 0;

  sym = sym_tab->base;
  for (low = 0, high = sym_tab->len - 1; low != high;)
    {
      DBG (LOOKUPDEBUG, ++probes);
      mid = (high + low) / 2;

      if (sym[mid].addr <= address && sym[mid + 1].addr > address)
	{
	  if (address > sym[mid].end_addr)
	    {
	      /* Address falls into gap between
		 sym[mid] and sym[mid + 1].  */
	      return 0;
	    }
	  else
	    {
	      DBG (LOOKUPDEBUG,
		   printf ("[sym_lookup] %d probes (symtab->len=%u)\n",
			   probes, sym_tab->len - 1));
	      return &sym[mid];
	    }
	}

      if (sym[mid].addr > address)
	high = mid;
      else
	low = mid + 1;
    }

  if (sym[mid + 1].addr <= address)
    {
      if (address > sym[mid + 1].end_addr)
	{
	  /* Address is beyond end of sym[mid + 1].  */
	  return 0;
	}
      else
	{
	  DBG (LOOKUPDEBUG, printf ("[sym_lookup] %d (%u) probes, fall off\n",
				    probes, sym_tab->len - 1));
	  return &sym[mid + 1];
	}
    }

  return 0;
}
@


1.13
log
@CHange FSF sources over to GPLv3
@
text
@d3 2
a4 1
   Copyright 1999, 2000, 2001, 2002, 2004, 2007 Free Software Foundation, Inc.
d168 3
a170 2
		 (long) tab->base[j].addr, (long) tab->base[j].end_addr,
		 tab->base[j].name);
d181 1
a181 1
  long low, mid, high;
@


1.12
log
@Update the address of the FSF
@
text
@d3 1
a3 1
   Copyright 1999, 2000, 2001, 2002, 2004 Free Software Foundation, Inc.
d9 1
a9 1
   the Free Software Foundation; either version 2 of the License, or
@


1.11
log
@update copyright dates
@
text
@d19 2
a20 2
   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
   02111-1307, USA.  */
@


1.10
log
@	* corefile.c (core_init): Use bfd_get_section_size
	instead of bfd_get_section_size_before_reloc or _raw_size.
	* symtab.c (symtab_finalize): Likewise.
@
text
@d3 1
a3 1
   Copyright 2000, 2001, 2002, 2004 Free Software Foundation, Inc.
@


1.9
log
@	* alpha.c, basic_blocks.c, basic_blocks.h, bb_exit_func.c,
	call_graph.c, call_graph.h, cg_arcs.c, cg_arcs.h, cg_dfn.c,
	cg_dfn.h, cg_print.c, cg_print.h, corefile.c, corefile.h,
	gmon_io.c, gmon_io.h, gprof.c, gprof.h, hertz.h, hist.c, hist.h,
	i386.c, mips.c, search_list.c, search_list.h, source.c, source.h,
	sparc.c, sym_ids.c, sym_ids.h, symtab.c, symtab.h, tahoe.c,
	utils.c, utils.h, vax.c, gen-c-prog.awk: Convert K&R C to ANSI C.
@
text
@d3 1
a3 1
   Copyright 2000, 2001, 2002 Free Software Foundation, Inc.
d151 2
a152 1
    dst[-1].end_addr = core_text_sect->vma + core_text_sect->_raw_size - 1;
@


1.8
log
@	* alpha.c (alpha_find_call): Warning fixes.
	* mips.c (mips_find_call): Likewise.
	* sparc.c (sparc_find_call): Likewise.
	* basic_blocks.c: Warning fixes.  Eliminate DEFUN.
	* call_graph.c: Likewise.
	* cg_arcs.c: Likewise.
	* cg_dfn.cp: Likewise.
	* gprof.c: Likewise.
	* gprof.h: Likewise.
	* hist.c: Likewise.
	* search_list.c: Likewise.
	* source.c: Likewise.
	* source.h: Likewise.
	* sym_ids.c: Likewise.
	* symtab.c: Likewise.
	* symtab.h: Likewise.
	* utils.c: Likewise.
	* cg_print.c: Likewise.
	(struct function_map, symbol_map, symbol_map_count): Move
	declaration to..
	* corefile: ..here.
	* corefile.c: Warning fixes.  Eliminate DEFUN.
	(struct function_map): Remove declaration.
	* gmon_io.c: Warning fixes.  Eliminate DEFUN.
	(gmon_io_read_64): Make static.
	(gmon_io_write_64): Likewise.
	(gmon_read_raw_arc): Likewise.
	(gmon_write_raw_arc): Likewise.
	(gmon_io_write_8): Don't pass char, pass int param.
	* gmon_io.h (gmon_io_write_8): Likewise.

and a few copyright dates that should have been done previously.
@
text
@d29 1
a29 1
static int cmp_addr PARAMS ((const PTR, const PTR));
d37 1
a37 2
sym_init (sym)
     Sym *sym;
d61 1
a61 3
cmp_addr (lp, rp)
     const PTR lp;
     const PTR rp;
d79 1
a79 2
symtab_finalize (tab)
     Sym_Table *tab;
d176 1
a176 3
dbg_sym_lookup (sym_tab, address)
     Sym_Table *sym_tab;
     bfd_vma address;
d215 1
a215 3
sym_lookup (sym_tab, address)
     Sym_Table *sym_tab;
     bfd_vma address;
@


1.7
log
@	* alpha.c (alpha_Instruction): Don't use.
	(alpha_find_call): Avoid use of bitfields and casts between
	pointers and integers of different sizes.  Avoid endian problems
	when cross-compiling.
	* vax.c (vax_find_call): Likewise.
	(struct modebyte): Don't use.
	(vax_operandmode): Pass in an unsigned char *.
	(vax_operandlength): Likewise.
	(vax_reladdr): Rename to vax_offset and return relative offset
	rather than address.
	* i386.c (i386_find_call): Avoid casts between pointers and
	integers of different sizes.
	* sparc.c (sparc_find_call): Likewise.  Avoid endian problems.
	* tahoe.c (tahoe_find_call): Likewise.
	(tahoe_reladdr): Rename to tahoe_offset and return relative offset
	rather than address.

	* basic_blocks.h: Don't include headers here.
	* call_graph.h: Likewise.
	* cg_arcs.h: Likewise.
	* cg_print.h: Likewise.
	* corefile.h: Likewise.
	* gmon_io.h: Likewise.
	* gmon_out.h: Likewise.
	* hertz.h: Likewise.
	* hist.h: Likewise.
	* source.h: Likewise.
	* sym_ids.h: Likewise.
	* symtab.h: Likewise.
	* gprof.h: Don't include ansidecl.h, do include bfd.h.
	(bool): Don't typedef.
	* alpha.c: Adjust #include's for above header changes.
	* basic_blocks.c: Likewise.
	* call_graph.c: Likewise.
	* cg_arcs.c: Likewise.
	* cg_dfn.c: Likewise.
	* cg_print.c: Likewise.
	* corefile.c: Likewise.
	* gmon_io.c: Likewise.
	* gprof.c: Likewise.
	* hertz.c: Likewise.
	* hist.c: Likewise.
	* i386.c: Likewise.
	* mips.c: Likewise.
	* sparc.c: Likewise.
	* sym_ids.c: Likewise.
	* symtab.c: Likewise.
	* tahoe.c: Likewise.
	* utils.c: Likewise.
	* vax.c: Likewise.

	* po/POTFILES.in: Regenerate.
@
text
@d3 1
a3 1
   Copyright 2000, 2001 Free Software Foundation, Inc.
d29 2
d37 2
a38 1
DEFUN (sym_init, (sym), Sym * sym)
d62 3
a64 1
DEFUN (cmp_addr, (lp, rp), const PTR lp AND const PTR rp)
d66 2
a67 2
  Sym *left = (Sym *) lp;
  Sym *right = (Sym *) rp;
d82 2
a83 1
DEFUN (symtab_finalize, (tab), Sym_Table * tab)
d180 3
a182 1
DEFUN (dbg_sym_lookup, (symtab, address), Sym_Table * symtab AND bfd_vma address)
d190 2
a191 2
  sym = symtab->base;
  for (low = 0, high = symtab->len - 1; low != high;)
d221 3
a223 1
DEFUN (sym_lookup, (symtab, address), Sym_Table * symtab AND bfd_vma address)
d232 1
a232 1
  if (!symtab->len)
d235 2
a236 2
  sym = symtab->base;
  for (low = 0, high = symtab->len - 1; low != high;)
d253 1
a253 1
			   probes, symtab->len - 1));
d274 1
a274 1
				    probes, symtab->len - 1));
@


1.6
log
@David Mosberger's fixes for cross compiling gprof.
@
text
@d23 3
a27 1
#include "symtab.h"
@


1.5
log
@Fix typos in ChangeLog; fix dates in copyright notices
@
text
@d3 1
a3 1
   Copyright 2000 Free Software Foundation, Inc.
d36 1
a36 1
  
d89 1
a89 1
  
d117 1
a117 1
	      
d145 1
a145 1
  
d160 1
a160 1
         {
d164 1
a164 1
         }
d184 1
a184 1
      
d190 1
a190 1
      
d199 1
a199 1
  
d201 1
a201 1
  
d228 1
a228 1
      
d245 1
a245 1
      
d251 1
a251 1
  
d266 1
a266 1
  
@


1.4
log
@Add GPL copyright notices to uncopyrighted files.
Add copy of GPL.
@
text
@d3 1
a3 1
   Copyright (C) 2000  Free Software Foundation, Inc.
@


1.4.2.1
log
@Update copyright notices.
@
text
@d3 1
a3 1
   Copyright 2000, 2001 Free Software Foundation, Inc.
@


1.4.2.2
log
@Merge from mainline.
@
text
@d36 1
a36 1

d89 1
a89 1

d117 1
a117 1

d145 1
a145 1

d160 1
a160 1
	 {
d164 1
a164 1
	 }
d184 1
a184 1

d190 1
a190 1

d199 1
a199 1

d201 1
a201 1

d228 1
a228 1

d245 1
a245 1

d251 1
a251 1

d266 1
a266 1

@


1.3
log
@Don't use post-increment on structure copy to work around a ppc gcc bug.
@
text
@d1 21
d30 2
a31 3
/*
 * Initialize a symbol (so it's empty).
 */
d36 3
a38 4
  /*
   * It is not safe to assume that a binary zero corresponds to
   * a floating-point 0.0, so initialize floats explicitly:
   */
d47 9
a55 10
/*
 * Compare the function entry-point of two symbols and return <0, =0,
 * or >0 depending on whether the left value is smaller than, equal
 * to, or greater than the right value.  If two symbols are equal
 * but one has is_func set and the other doesn't, we make the
 * non-function symbol one "bigger" so that the function symbol will
 * survive duplicate removal.  Finally, if both symbols have the
 * same is_func value, we discriminate against is_static such that
 * the global symbol survives.
 */
d63 1
a63 3
    {
      return 1;
    }
d65 1
a65 3
    {
      return -1;
    }
d68 1
a68 3
    {
      return right->is_func - left->is_func;
    }
d81 1
a81 3
    {
      return;
    }
d83 1
a83 3
  /*
   * Sort symbol table in order of increasing function addresses:
   */
d86 2
a87 4
  /*
   * Remove duplicate entries to speed-up later processing and
   * set end_addr if its not set yet:
   */
d89 1
d94 7
a100 9
	  /*
	   * If same address, favor global symbol over static one,
	   * then function over line number.  If both symbols are
	   * either static or global and either function or line, check
	   * whether one has name beginning with underscore while
	   * the other doesn't.  In such cases, keep sym without
	   * underscore.  This takes cares of compiler generated
	   * symbols (such as __gnu_compiled, __c89_used, etc.).
	   */
d117 1
d134 1
a134 3
	    {
	      dst[-1].end_addr = src->addr - 1;
	    }
d136 1
a136 1
	  /* retain sym only if it has a non-empty address range: */
d145 1
d147 1
a147 3
    {
      dst[-1].end_addr = core_text_sect->vma + core_text_sect->_raw_size - 1;
    }
d160 5
a164 5
       {
       printf ("[symtab_finalize] 0x%lx-0x%lx\t%s\n",
	       (long) tab->base[j].addr, (long) tab->base[j].end_addr,
	       tab->base[j].name);
       }
d184 1
d190 1
d192 2
a193 3
	{
	  return &sym[mid];
	}
d195 1
a195 3
	{
	  high = mid;
	}
d197 1
a197 3
	{
	  low = mid + 1;
	}
d199 1
d201 1
d208 2
a209 4
/*
 * Look up an address in the symbol-table that is sorted by address.
 * If address does not hit any symbol, 0 is returned.
 */
d221 1
a221 3
    {
      return 0;
    }
d228 1
d233 2
a234 4
	      /*
	       * Address falls into gap between sym[mid] and
	       * sym[mid + 1]:
	       */
d245 1
d247 1
a247 3
	{
	  high = mid;
	}
d249 1
a249 3
	{
	  low = mid + 1;
	}
d251 1
d256 1
a256 1
	  /* address is beyond end of sym[mid + 1]: */
d266 1
@


1.2
log
@	* Many files: Add casts in many print statements to cast bfd_vma
	values to unsigned long when calling printf.
	* Makefile.am ($(OBJECTS)): Add gmon.h.
	* Makefile.in: Rebuild.
@
text
@d135 2
a136 1
	      *dst++ = *src;
@


1.1
log
@Initial revision
@
text
@d111 1
a111 1
		   printf (" (addr=%lx)\n", src->addr));
d122 1
a122 1
		   printf (" (addr=%lx)\n", src->addr));
d173 2
a174 1
  fprintf (stderr, "[dbg_sym_lookup] address 0x%lx\n", address);
d183 2
a184 1
	       sym[mid].addr, sym[mid + 1].addr);
@


1.1.1.1
log
@19990502 sourceware import
@
text
@@

