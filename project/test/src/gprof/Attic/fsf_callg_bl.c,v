head	1.1;
access;
symbols
	binutils-2_23_2:1.1.24.1
	binutils-2_23_1:1.1.24.1
	binutils-2_23-branch:1.1.0.24
	binutils-2_20_1:1.1.22.1
	binutils-2_20:1.1.22.1
	binutils-2_20-branch:1.1.0.22
	binutils-2_19_1:1.1.20.1
	binutils-2_19:1.1.20.1
	binutils-2_19-branch:1.1.0.20
	binutils-2_18:1.1.18.1
	binutils-2_18-branch:1.1.0.18
	binutils-csl-sourcerygxx-3_4_4-32:1.1.14.1
	binutils-csl-sourcerygxx-3_4_4-25:1.1.14.1
	binutils-2_17:1.1.16.1
	binutils-csl-wrs-linux-3_4_4-24:1.1.14.1
	binutils-csl-wrs-linux-3_4_4-23:1.1.14.1
	binutils-csl-wrs-linux-3_4_4-22:1.1.14.1
	binutils-csl-wrs-linux-3_4_4-21:1.1.14.1
	binutils-csl-wrs-linux-3_4_4-20:1.1.14.1
	binutils-2_17-branch:1.1.0.16
	binutils-csl-gxxpro-3_4-branch:1.1.14.1.0.4
	binutils-csl-gxxpro-3_4-branchpoint:1.1.14.1
	binutils-2_16_1:1.1.14.1
	binutils-csl-arm-2005q1b:1.1.14.1
	binutils-2_16:1.1.14.1
	binutils-csl-arm-2005q1a:1.1.14.1
	binutils-csl-arm-2005q1-branch:1.1.14.1.0.2
	binutils-csl-arm-2005q1-branchpoint:1.1.14.1
	binutils-2_16-branch:1.1.0.14
	binutils-2_15:1.1.12.1
	binutils-2_15-branch:1.1.0.12
	binutils-2_14:1.1.10.1
	binutils-2_14-branch:1.1.0.10
	binutils-2_13_2_1:1.1.8.1
	binutils-2_13_2:1.1.8.1
	binutils-2_13_1:1.1.8.1
	binutils-2_13:1.1.8.1
	binutils-2_13-branch:1.1.0.8
	binutils-2_12_1:1.1.6.1
	binutils-2_12:1.1.6.1
	binutils-2_12-branch:1.1.0.6
	binutils-2_11_2:1.1.4.1
	binutils-2_11_1:1.1.4.1
	binutils-2_11:1.1.4.1
	binutils-2_11-branch:1.1.0.4
	binutils-2_10_1:1.1.2.1
	binutils-2_10:1.1.2.1
	binutils_latest_snapshot:1.1.2.1
	binutils-2_10-branch:1.1.0.2;
locks; strict;
comment	@ * @;


1.1
date	2000.05.29.14.08.53;	author pb;	state dead;
branches
	1.1.2.1
	1.1.4.1
	1.1.6.1
	1.1.8.1
	1.1.10.1
	1.1.12.1
	1.1.14.1
	1.1.16.1
	1.1.18.1
	1.1.20.1
	1.1.22.1
	1.1.24.1;
next	;

1.1.2.1
date	2000.05.29.14.08.53;	author pb;	state Exp;
branches;
next	;

1.1.4.1
date	2001.03.12.15.41.03;	author pb;	state Exp;
branches;
next	;

1.1.6.1
date	2002.03.08.17.01.25;	author drow;	state Exp;
branches;
next	;

1.1.8.1
date	2002.08.05.20.43.48;	author drow;	state Exp;
branches;
next	;

1.1.10.1
date	2003.04.27.20.36.13;	author drow;	state Exp;
branches;
next	;

1.1.12.1
date	2004.04.09.19.32.19;	author drow;	state Exp;
branches;
next	;

1.1.14.1
date	2005.03.08.17.19.51;	author drow;	state Exp;
branches;
next	;

1.1.16.1
date	2006.04.16.18.36.45;	author drow;	state Exp;
branches;
next	;

1.1.18.1
date	2007.08.06.21.05.37;	author drow;	state Exp;
branches;
next	;

1.1.20.1
date	2008.09.11.08.24.18;	author gingold;	state Exp;
branches;
next	;

1.1.22.1
date	2009.10.16.12.07.04;	author gingold;	state Exp;
branches;
next	;

1.1.24.1
date	2012.11.13.14.51.33;	author gingold;	state Exp;
branches;
next	;


desc
@@


1.1
log
@file fsf_callg_bl.c was initially added on branch binutils-2_10-branch.
@
text
@@


1.1.24.1
log
@*** empty log message ***
@
text
@a0 95
/* ==> Do not modify this file!!  It is created automatically
   from fsf_callg_bl.m using the gen-c-prog.awk script.  <== */

#include <stdio.h>
#include "ansidecl.h"

void  fsf_callg_blurb (FILE *);
void
fsf_callg_blurb (file)
     FILE *file;
{
  fputs ("\n", file);
  fputs (" This table describes the call tree of the program, and was sorted by\n", file);
  fputs (" the total amount of time spent in each function and its children.\n", file);
  fputs ("\n", file);
  fputs (" Each entry in this table consists of several lines.  The line with the\n", file);
  fputs (" index number at the left hand margin lists the current function.\n", file);
  fputs (" The lines above it list the functions that called this function,\n", file);
  fputs (" and the lines below it list the functions this one called.\n", file);
  fputs (" This line lists:\n", file);
  fputs ("     index	A unique number given to each element of the table.\n", file);
  fputs ("		Index numbers are sorted numerically.\n", file);
  fputs ("		The index number is printed next to every function name so\n", file);
  fputs ("		it is easier to look up where the function is in the table.\n", file);
  fputs ("\n", file);
  fputs ("     % time	This is the percentage of the `total' time that was spent\n", file);
  fputs ("		in this function and its children.  Note that due to\n", file);
  fputs ("		different viewpoints, functions excluded by options, etc,\n", file);
  fputs ("		these numbers will NOT add up to 100%.\n", file);
  fputs ("\n", file);
  fputs ("     self	This is the total amount of time spent in this function.\n", file);
  fputs ("\n", file);
  fputs ("     children	This is the total amount of time propagated into this\n", file);
  fputs ("		function by its children.\n", file);
  fputs ("\n", file);
  fputs ("     called	This is the number of times the function was called.\n", file);
  fputs ("		If the function called itself recursively, the number\n", file);
  fputs ("		only includes non-recursive calls, and is followed by\n", file);
  fputs ("		a `+' and the number of recursive calls.\n", file);
  fputs ("\n", file);
  fputs ("     name	The name of the current function.  The index number is\n", file);
  fputs ("		printed after it.  If the function is a member of a\n", file);
  fputs ("		cycle, the cycle number is printed between the\n", file);
  fputs ("		function's name and the index number.\n", file);
  fputs ("\n", file);
  fputs ("\n", file);
  fputs (" For the function's parents, the fields have the following meanings:\n", file);
  fputs ("\n", file);
  fputs ("     self	This is the amount of time that was propagated directly\n", file);
  fputs ("		from the function into this parent.\n", file);
  fputs ("\n", file);
  fputs ("     children	This is the amount of time that was propagated from\n", file);
  fputs ("		the function's children into this parent.\n", file);
  fputs ("\n", file);
  fputs ("     called	This is the number of times this parent called the\n", file);
  fputs ("		function `/' the total number of times the function\n", file);
  fputs ("		was called.  Recursive calls to the function are not\n", file);
  fputs ("		included in the number after the `/'.\n", file);
  fputs ("\n", file);
  fputs ("     name	This is the name of the parent.  The parent's index\n", file);
  fputs ("		number is printed after it.  If the parent is a\n", file);
  fputs ("		member of a cycle, the cycle number is printed between\n", file);
  fputs ("		the name and the index number.\n", file);
  fputs ("\n", file);
  fputs (" If the parents of the function cannot be determined, the word\n", file);
  fputs (" `<spontaneous>' is printed in the `name' field, and all the other\n", file);
  fputs (" fields are blank.\n", file);
  fputs ("\n", file);
  fputs (" For the function's children, the fields have the following meanings:\n", file);
  fputs ("\n", file);
  fputs ("     self	This is the amount of time that was propagated directly\n", file);
  fputs ("		from the child into the function.\n", file);
  fputs ("\n", file);
  fputs ("     children	This is the amount of time that was propagated from the\n", file);
  fputs ("		child's children to the function.\n", file);
  fputs ("\n", file);
  fputs ("     called	This is the number of times the function called\n", file);
  fputs ("		this child `/' the total number of times the child\n", file);
  fputs ("		was called.  Recursive calls by the child are not\n", file);
  fputs ("		listed in the number after the `/'.\n", file);
  fputs ("\n", file);
  fputs ("     name	This is the name of the child.  The child's index\n", file);
  fputs ("		number is printed after it.  If the child is a\n", file);
  fputs ("		member of a cycle, the cycle number is printed\n", file);
  fputs ("		between the name and the index number.\n", file);
  fputs ("\n", file);
  fputs (" If there are any cycles (circles) in the call graph, there is an\n", file);
  fputs (" entry for the cycle-as-a-whole.  This entry shows who called the\n", file);
  fputs (" cycle (as parents) and the members of the cycle (as children.)\n", file);
  fputs (" The `+' recursive calls entry shows the number of function calls that\n", file);
  fputs (" were internal to the cycle, and the calls entry for each member shows,\n", file);
  fputs (" for that member, how many times it was called from other members of\n", file);
  fputs (" the cycle.\n", file);
  fputs ("\n", file);
}
@


1.1.22.1
log
@bfd/
2009-10-16  Tristan Gingold  <gingold@@adacore.com>

	* configure.in: Bump version to 2.20
	* Makefile.am (RELEASE): Set.
	* configure, Makefile.in: Regenerate.
@
text
@a0 95
/* ==> Do not modify this file!!  It is created automatically
   from fsf_callg_bl.m using the gen-c-prog.awk script.  <== */

#include <stdio.h>
#include "ansidecl.h"

void  fsf_callg_blurb (FILE *);
void
fsf_callg_blurb (file)
     FILE *file;
{
  fputs ("\n", file);
  fputs (" This table describes the call tree of the program, and was sorted by\n", file);
  fputs (" the total amount of time spent in each function and its children.\n", file);
  fputs ("\n", file);
  fputs (" Each entry in this table consists of several lines.  The line with the\n", file);
  fputs (" index number at the left hand margin lists the current function.\n", file);
  fputs (" The lines above it list the functions that called this function,\n", file);
  fputs (" and the lines below it list the functions this one called.\n", file);
  fputs (" This line lists:\n", file);
  fputs ("     index	A unique number given to each element of the table.\n", file);
  fputs ("		Index numbers are sorted numerically.\n", file);
  fputs ("		The index number is printed next to every function name so\n", file);
  fputs ("		it is easier to look up where the function in the table.\n", file);
  fputs ("\n", file);
  fputs ("     % time	This is the percentage of the `total' time that was spent\n", file);
  fputs ("		in this function and its children.  Note that due to\n", file);
  fputs ("		different viewpoints, functions excluded by options, etc,\n", file);
  fputs ("		these numbers will NOT add up to 100%.\n", file);
  fputs ("\n", file);
  fputs ("     self	This is the total amount of time spent in this function.\n", file);
  fputs ("\n", file);
  fputs ("     children	This is the total amount of time propagated into this\n", file);
  fputs ("		function by its children.\n", file);
  fputs ("\n", file);
  fputs ("     called	This is the number of times the function was called.\n", file);
  fputs ("		If the function called itself recursively, the number\n", file);
  fputs ("		only includes non-recursive calls, and is followed by\n", file);
  fputs ("		a `+' and the number of recursive calls.\n", file);
  fputs ("\n", file);
  fputs ("     name	The name of the current function.  The index number is\n", file);
  fputs ("		printed after it.  If the function is a member of a\n", file);
  fputs ("		cycle, the cycle number is printed between the\n", file);
  fputs ("		function's name and the index number.\n", file);
  fputs ("\n", file);
  fputs ("\n", file);
  fputs (" For the function's parents, the fields have the following meanings:\n", file);
  fputs ("\n", file);
  fputs ("     self	This is the amount of time that was propagated directly\n", file);
  fputs ("		from the function into this parent.\n", file);
  fputs ("\n", file);
  fputs ("     children	This is the amount of time that was propagated from\n", file);
  fputs ("		the function's children into this parent.\n", file);
  fputs ("\n", file);
  fputs ("     called	This is the number of times this parent called the\n", file);
  fputs ("		function `/' the total number of times the function\n", file);
  fputs ("		was called.  Recursive calls to the function are not\n", file);
  fputs ("		included in the number after the `/'.\n", file);
  fputs ("\n", file);
  fputs ("     name	This is the name of the parent.  The parent's index\n", file);
  fputs ("		number is printed after it.  If the parent is a\n", file);
  fputs ("		member of a cycle, the cycle number is printed between\n", file);
  fputs ("		the name and the index number.\n", file);
  fputs ("\n", file);
  fputs (" If the parents of the function cannot be determined, the word\n", file);
  fputs (" `<spontaneous>' is printed in the `name' field, and all the other\n", file);
  fputs (" fields are blank.\n", file);
  fputs ("\n", file);
  fputs (" For the function's children, the fields have the following meanings:\n", file);
  fputs ("\n", file);
  fputs ("     self	This is the amount of time that was propagated directly\n", file);
  fputs ("		from the child into the function.\n", file);
  fputs ("\n", file);
  fputs ("     children	This is the amount of time that was propagated from the\n", file);
  fputs ("		child's children to the function.\n", file);
  fputs ("\n", file);
  fputs ("     called	This is the number of times the function called\n", file);
  fputs ("		this child `/' the total number of times the child\n", file);
  fputs ("		was called.  Recursive calls by the child are not\n", file);
  fputs ("		listed in the number after the `/'.\n", file);
  fputs ("\n", file);
  fputs ("     name	This is the name of the child.  The child's index\n", file);
  fputs ("		number is printed after it.  If the child is a\n", file);
  fputs ("		member of a cycle, the cycle number is printed\n", file);
  fputs ("		between the name and the index number.\n", file);
  fputs ("\n", file);
  fputs (" If there are any cycles (circles) in the call graph, there is an\n", file);
  fputs (" entry for the cycle-as-a-whole.  This entry shows who called the\n", file);
  fputs (" cycle (as parents) and the members of the cycle (as children.)\n", file);
  fputs (" The `+' recursive calls entry shows the number of function calls that\n", file);
  fputs (" were internal to the cycle, and the calls entry for each member shows,\n", file);
  fputs (" for that member, how many times it was called from other members of\n", file);
  fputs (" the cycle.\n", file);
  fputs ("\n", file);
}
@


1.1.20.1
log
@Generated files for binutils 2.19.
@
text
@a0 95
/* ==> Do not modify this file!!  It is created automatically
   from fsf_callg_bl.m using the gen-c-prog.awk script.  <== */

#include <stdio.h>
#include "ansidecl.h"

void  fsf_callg_blurb (FILE *);
void
fsf_callg_blurb (file)
     FILE *file;
{
  fputs ("\n", file);
  fputs (" This table describes the call tree of the program, and was sorted by\n", file);
  fputs (" the total amount of time spent in each function and its children.\n", file);
  fputs ("\n", file);
  fputs (" Each entry in this table consists of several lines.  The line with the\n", file);
  fputs (" index number at the left hand margin lists the current function.\n", file);
  fputs (" The lines above it list the functions that called this function,\n", file);
  fputs (" and the lines below it list the functions this one called.\n", file);
  fputs (" This line lists:\n", file);
  fputs ("     index	A unique number given to each element of the table.\n", file);
  fputs ("		Index numbers are sorted numerically.\n", file);
  fputs ("		The index number is printed next to every function name so\n", file);
  fputs ("		it is easier to look up where the function in the table.\n", file);
  fputs ("\n", file);
  fputs ("     % time	This is the percentage of the `total' time that was spent\n", file);
  fputs ("		in this function and its children.  Note that due to\n", file);
  fputs ("		different viewpoints, functions excluded by options, etc,\n", file);
  fputs ("		these numbers will NOT add up to 100%.\n", file);
  fputs ("\n", file);
  fputs ("     self	This is the total amount of time spent in this function.\n", file);
  fputs ("\n", file);
  fputs ("     children	This is the total amount of time propagated into this\n", file);
  fputs ("		function by its children.\n", file);
  fputs ("\n", file);
  fputs ("     called	This is the number of times the function was called.\n", file);
  fputs ("		If the function called itself recursively, the number\n", file);
  fputs ("		only includes non-recursive calls, and is followed by\n", file);
  fputs ("		a `+' and the number of recursive calls.\n", file);
  fputs ("\n", file);
  fputs ("     name	The name of the current function.  The index number is\n", file);
  fputs ("		printed after it.  If the function is a member of a\n", file);
  fputs ("		cycle, the cycle number is printed between the\n", file);
  fputs ("		function's name and the index number.\n", file);
  fputs ("\n", file);
  fputs ("\n", file);
  fputs (" For the function's parents, the fields have the following meanings:\n", file);
  fputs ("\n", file);
  fputs ("     self	This is the amount of time that was propagated directly\n", file);
  fputs ("		from the function into this parent.\n", file);
  fputs ("\n", file);
  fputs ("     children	This is the amount of time that was propagated from\n", file);
  fputs ("		the function's children into this parent.\n", file);
  fputs ("\n", file);
  fputs ("     called	This is the number of times this parent called the\n", file);
  fputs ("		function `/' the total number of times the function\n", file);
  fputs ("		was called.  Recursive calls to the function are not\n", file);
  fputs ("		included in the number after the `/'.\n", file);
  fputs ("\n", file);
  fputs ("     name	This is the name of the parent.  The parent's index\n", file);
  fputs ("		number is printed after it.  If the parent is a\n", file);
  fputs ("		member of a cycle, the cycle number is printed between\n", file);
  fputs ("		the name and the index number.\n", file);
  fputs ("\n", file);
  fputs (" If the parents of the function cannot be determined, the word\n", file);
  fputs (" `<spontaneous>' is printed in the `name' field, and all the other\n", file);
  fputs (" fields are blank.\n", file);
  fputs ("\n", file);
  fputs (" For the function's children, the fields have the following meanings:\n", file);
  fputs ("\n", file);
  fputs ("     self	This is the amount of time that was propagated directly\n", file);
  fputs ("		from the child into the function.\n", file);
  fputs ("\n", file);
  fputs ("     children	This is the amount of time that was propagated from the\n", file);
  fputs ("		child's children to the function.\n", file);
  fputs ("\n", file);
  fputs ("     called	This is the number of times the function called\n", file);
  fputs ("		this child `/' the total number of times the child\n", file);
  fputs ("		was called.  Recursive calls by the child are not\n", file);
  fputs ("		listed in the number after the `/'.\n", file);
  fputs ("\n", file);
  fputs ("     name	This is the name of the child.  The child's index\n", file);
  fputs ("		number is printed after it.  If the child is a\n", file);
  fputs ("		member of a cycle, the cycle number is printed\n", file);
  fputs ("		between the name and the index number.\n", file);
  fputs ("\n", file);
  fputs (" If there are any cycles (circles) in the call graph, there is an\n", file);
  fputs (" entry for the cycle-as-a-whole.  This entry shows who called the\n", file);
  fputs (" cycle (as parents) and the members of the cycle (as children.)\n", file);
  fputs (" The `+' recursive calls entry shows the number of function calls that\n", file);
  fputs (" were internal to the cycle, and the calls entry for each member shows,\n", file);
  fputs (" for that member, how many times it was called from other members of\n", file);
  fputs (" the cycle.\n", file);
  fputs ("\n", file);
}
@


1.1.18.1
log
@Commit generated files for binutils 2.17.90.
@
text
@a0 95
/* ==> Do not modify this file!!  It is created automatically
   from fsf_callg_bl.m using the gen-c-prog.awk script.  <== */

#include <stdio.h>
#include "ansidecl.h"

void  fsf_callg_blurb (FILE *);
void
fsf_callg_blurb (file)
     FILE *file;
{
  fputs ("\n", file);
  fputs (" This table describes the call tree of the program, and was sorted by\n", file);
  fputs (" the total amount of time spent in each function and its children.\n", file);
  fputs ("\n", file);
  fputs (" Each entry in this table consists of several lines.  The line with the\n", file);
  fputs (" index number at the left hand margin lists the current function.\n", file);
  fputs (" The lines above it list the functions that called this function,\n", file);
  fputs (" and the lines below it list the functions this one called.\n", file);
  fputs (" This line lists:\n", file);
  fputs ("     index	A unique number given to each element of the table.\n", file);
  fputs ("		Index numbers are sorted numerically.\n", file);
  fputs ("		The index number is printed next to every function name so\n", file);
  fputs ("		it is easier to look up where the function in the table.\n", file);
  fputs ("\n", file);
  fputs ("     % time	This is the percentage of the `total' time that was spent\n", file);
  fputs ("		in this function and its children.  Note that due to\n", file);
  fputs ("		different viewpoints, functions excluded by options, etc,\n", file);
  fputs ("		these numbers will NOT add up to 100%.\n", file);
  fputs ("\n", file);
  fputs ("     self	This is the total amount of time spent in this function.\n", file);
  fputs ("\n", file);
  fputs ("     children	This is the total amount of time propagated into this\n", file);
  fputs ("		function by its children.\n", file);
  fputs ("\n", file);
  fputs ("     called	This is the number of times the function was called.\n", file);
  fputs ("		If the function called itself recursively, the number\n", file);
  fputs ("		only includes non-recursive calls, and is followed by\n", file);
  fputs ("		a `+' and the number of recursive calls.\n", file);
  fputs ("\n", file);
  fputs ("     name	The name of the current function.  The index number is\n", file);
  fputs ("		printed after it.  If the function is a member of a\n", file);
  fputs ("		cycle, the cycle number is printed between the\n", file);
  fputs ("		function's name and the index number.\n", file);
  fputs ("\n", file);
  fputs ("\n", file);
  fputs (" For the function's parents, the fields have the following meanings:\n", file);
  fputs ("\n", file);
  fputs ("     self	This is the amount of time that was propagated directly\n", file);
  fputs ("		from the function into this parent.\n", file);
  fputs ("\n", file);
  fputs ("     children	This is the amount of time that was propagated from\n", file);
  fputs ("		the function's children into this parent.\n", file);
  fputs ("\n", file);
  fputs ("     called	This is the number of times this parent called the\n", file);
  fputs ("		function `/' the total number of times the function\n", file);
  fputs ("		was called.  Recursive calls to the function are not\n", file);
  fputs ("		included in the number after the `/'.\n", file);
  fputs ("\n", file);
  fputs ("     name	This is the name of the parent.  The parent's index\n", file);
  fputs ("		number is printed after it.  If the parent is a\n", file);
  fputs ("		member of a cycle, the cycle number is printed between\n", file);
  fputs ("		the name and the index number.\n", file);
  fputs ("\n", file);
  fputs (" If the parents of the function cannot be determined, the word\n", file);
  fputs (" `<spontaneous>' is printed in the `name' field, and all the other\n", file);
  fputs (" fields are blank.\n", file);
  fputs ("\n", file);
  fputs (" For the function's children, the fields have the following meanings:\n", file);
  fputs ("\n", file);
  fputs ("     self	This is the amount of time that was propagated directly\n", file);
  fputs ("		from the child into the function.\n", file);
  fputs ("\n", file);
  fputs ("     children	This is the amount of time that was propagated from the\n", file);
  fputs ("		child's children to the function.\n", file);
  fputs ("\n", file);
  fputs ("     called	This is the number of times the function called\n", file);
  fputs ("		this child `/' the total number of times the child\n", file);
  fputs ("		was called.  Recursive calls by the child are not\n", file);
  fputs ("		listed in the number after the `/'.\n", file);
  fputs ("\n", file);
  fputs ("     name	This is the name of the child.  The child's index\n", file);
  fputs ("		number is printed after it.  If the child is a\n", file);
  fputs ("		member of a cycle, the cycle number is printed\n", file);
  fputs ("		between the name and the index number.\n", file);
  fputs ("\n", file);
  fputs (" If there are any cycles (circles) in the call graph, there is an\n", file);
  fputs (" entry for the cycle-as-a-whole.  This entry shows who called the\n", file);
  fputs (" cycle (as parents) and the members of the cycle (as children.)\n", file);
  fputs (" The `+' recursive calls entry shows the number of function calls that\n", file);
  fputs (" were internal to the cycle, and the calls entry for each member shows,\n", file);
  fputs (" for that member, how many times it was called from other members of\n", file);
  fputs (" the cycle.\n", file);
  fputs ("\n", file);
}
@


1.1.16.1
log
@Commit generated files.
@
text
@a0 95
/* ==> Do not modify this file!!  It is created automatically
   from fsf_callg_bl.m using the gen-c-prog.awk script.  <== */

#include <stdio.h>
#include "ansidecl.h"

void  fsf_callg_blurb (FILE *);
void
fsf_callg_blurb (file)
     FILE *file;
{
  fputs ("\n", file);
  fputs (" This table describes the call tree of the program, and was sorted by\n", file);
  fputs (" the total amount of time spent in each function and its children.\n", file);
  fputs ("\n", file);
  fputs (" Each entry in this table consists of several lines.  The line with the\n", file);
  fputs (" index number at the left hand margin lists the current function.\n", file);
  fputs (" The lines above it list the functions that called this function,\n", file);
  fputs (" and the lines below it list the functions this one called.\n", file);
  fputs (" This line lists:\n", file);
  fputs ("     index	A unique number given to each element of the table.\n", file);
  fputs ("		Index numbers are sorted numerically.\n", file);
  fputs ("		The index number is printed next to every function name so\n", file);
  fputs ("		it is easier to look up where the function in the table.\n", file);
  fputs ("\n", file);
  fputs ("     % time	This is the percentage of the `total' time that was spent\n", file);
  fputs ("		in this function and its children.  Note that due to\n", file);
  fputs ("		different viewpoints, functions excluded by options, etc,\n", file);
  fputs ("		these numbers will NOT add up to 100%.\n", file);
  fputs ("\n", file);
  fputs ("     self	This is the total amount of time spent in this function.\n", file);
  fputs ("\n", file);
  fputs ("     children	This is the total amount of time propagated into this\n", file);
  fputs ("		function by its children.\n", file);
  fputs ("\n", file);
  fputs ("     called	This is the number of times the function was called.\n", file);
  fputs ("		If the function called itself recursively, the number\n", file);
  fputs ("		only includes non-recursive calls, and is followed by\n", file);
  fputs ("		a `+' and the number of recursive calls.\n", file);
  fputs ("\n", file);
  fputs ("     name	The name of the current function.  The index number is\n", file);
  fputs ("		printed after it.  If the function is a member of a\n", file);
  fputs ("		cycle, the cycle number is printed between the\n", file);
  fputs ("		function's name and the index number.\n", file);
  fputs ("\n", file);
  fputs ("\n", file);
  fputs (" For the function's parents, the fields have the following meanings:\n", file);
  fputs ("\n", file);
  fputs ("     self	This is the amount of time that was propagated directly\n", file);
  fputs ("		from the function into this parent.\n", file);
  fputs ("\n", file);
  fputs ("     children	This is the amount of time that was propagated from\n", file);
  fputs ("		the function's children into this parent.\n", file);
  fputs ("\n", file);
  fputs ("     called	This is the number of times this parent called the\n", file);
  fputs ("		function `/' the total number of times the function\n", file);
  fputs ("		was called.  Recursive calls to the function are not\n", file);
  fputs ("		included in the number after the `/'.\n", file);
  fputs ("\n", file);
  fputs ("     name	This is the name of the parent.  The parent's index\n", file);
  fputs ("		number is printed after it.  If the parent is a\n", file);
  fputs ("		member of a cycle, the cycle number is printed between\n", file);
  fputs ("		the name and the index number.\n", file);
  fputs ("\n", file);
  fputs (" If the parents of the function cannot be determined, the word\n", file);
  fputs (" `<spontaneous>' is printed in the `name' field, and all the other\n", file);
  fputs (" fields are blank.\n", file);
  fputs ("\n", file);
  fputs (" For the function's children, the fields have the following meanings:\n", file);
  fputs ("\n", file);
  fputs ("     self	This is the amount of time that was propagated directly\n", file);
  fputs ("		from the child into the function.\n", file);
  fputs ("\n", file);
  fputs ("     children	This is the amount of time that was propagated from the\n", file);
  fputs ("		child's children to the function.\n", file);
  fputs ("\n", file);
  fputs ("     called	This is the number of times the function called\n", file);
  fputs ("		this child `/' the total number of times the child\n", file);
  fputs ("		was called.  Recursive calls by the child are not\n", file);
  fputs ("		listed in the number after the `/'.\n", file);
  fputs ("\n", file);
  fputs ("     name	This is the name of the child.  The child's index\n", file);
  fputs ("		number is printed after it.  If the child is a\n", file);
  fputs ("		member of a cycle, the cycle number is printed\n", file);
  fputs ("		between the name and the index number.\n", file);
  fputs ("\n", file);
  fputs (" If there are any cycles (circles) in the call graph, there is an\n", file);
  fputs (" entry for the cycle-as-a-whole.  This entry shows who called the\n", file);
  fputs (" cycle (as parents) and the members of the cycle (as children.)\n", file);
  fputs (" The `+' recursive calls entry shows the number of function calls that\n", file);
  fputs (" were internal to the cycle, and the calls entry for each member shows,\n", file);
  fputs (" for that member, how many times it was called from other members of\n", file);
  fputs (" the cycle.\n", file);
  fputs ("\n", file);
}
@


1.1.14.1
log
@Commit generated files for the binutils 2.16 branch.
@
text
@a0 95
/* ==> Do not modify this file!!  It is created automatically
   from fsf_callg_bl.m using the gen-c-prog.awk script.  <== */

#include <stdio.h>
#include "ansidecl.h"

void  fsf_callg_blurb (FILE *);
void
fsf_callg_blurb (file)
     FILE *file;
{
  fputs ("\n", file);
  fputs (" This table describes the call tree of the program, and was sorted by\n", file);
  fputs (" the total amount of time spent in each function and its children.\n", file);
  fputs ("\n", file);
  fputs (" Each entry in this table consists of several lines.  The line with the\n", file);
  fputs (" index number at the left hand margin lists the current function.\n", file);
  fputs (" The lines above it list the functions that called this function,\n", file);
  fputs (" and the lines below it list the functions this one called.\n", file);
  fputs (" This line lists:\n", file);
  fputs ("     index	A unique number given to each element of the table.\n", file);
  fputs ("		Index numbers are sorted numerically.\n", file);
  fputs ("		The index number is printed next to every function name so\n", file);
  fputs ("		it is easier to look up where the function in the table.\n", file);
  fputs ("\n", file);
  fputs ("     % time	This is the percentage of the `total' time that was spent\n", file);
  fputs ("		in this function and its children.  Note that due to\n", file);
  fputs ("		different viewpoints, functions excluded by options, etc,\n", file);
  fputs ("		these numbers will NOT add up to 100%.\n", file);
  fputs ("\n", file);
  fputs ("     self	This is the total amount of time spent in this function.\n", file);
  fputs ("\n", file);
  fputs ("     children	This is the total amount of time propagated into this\n", file);
  fputs ("		function by its children.\n", file);
  fputs ("\n", file);
  fputs ("     called	This is the number of times the function was called.\n", file);
  fputs ("		If the function called itself recursively, the number\n", file);
  fputs ("		only includes non-recursive calls, and is followed by\n", file);
  fputs ("		a `+' and the number of recursive calls.\n", file);
  fputs ("\n", file);
  fputs ("     name	The name of the current function.  The index number is\n", file);
  fputs ("		printed after it.  If the function is a member of a\n", file);
  fputs ("		cycle, the cycle number is printed between the\n", file);
  fputs ("		function's name and the index number.\n", file);
  fputs ("\n", file);
  fputs ("\n", file);
  fputs (" For the function's parents, the fields have the following meanings:\n", file);
  fputs ("\n", file);
  fputs ("     self	This is the amount of time that was propagated directly\n", file);
  fputs ("		from the function into this parent.\n", file);
  fputs ("\n", file);
  fputs ("     children	This is the amount of time that was propagated from\n", file);
  fputs ("		the function's children into this parent.\n", file);
  fputs ("\n", file);
  fputs ("     called	This is the number of times this parent called the\n", file);
  fputs ("		function `/' the total number of times the function\n", file);
  fputs ("		was called.  Recursive calls to the function are not\n", file);
  fputs ("		included in the number after the `/'.\n", file);
  fputs ("\n", file);
  fputs ("     name	This is the name of the parent.  The parent's index\n", file);
  fputs ("		number is printed after it.  If the parent is a\n", file);
  fputs ("		member of a cycle, the cycle number is printed between\n", file);
  fputs ("		the name and the index number.\n", file);
  fputs ("\n", file);
  fputs (" If the parents of the function cannot be determined, the word\n", file);
  fputs (" `<spontaneous>' is printed in the `name' field, and all the other\n", file);
  fputs (" fields are blank.\n", file);
  fputs ("\n", file);
  fputs (" For the function's children, the fields have the following meanings:\n", file);
  fputs ("\n", file);
  fputs ("     self	This is the amount of time that was propagated directly\n", file);
  fputs ("		from the child into the function.\n", file);
  fputs ("\n", file);
  fputs ("     children	This is the amount of time that was propagated from the\n", file);
  fputs ("		child's children to the function.\n", file);
  fputs ("\n", file);
  fputs ("     called	This is the number of times the function called\n", file);
  fputs ("		this child `/' the total number of times the child\n", file);
  fputs ("		was called.  Recursive calls by the child are not\n", file);
  fputs ("		listed in the number after the `/'.\n", file);
  fputs ("\n", file);
  fputs ("     name	This is the name of the child.  The child's index\n", file);
  fputs ("		number is printed after it.  If the child is a\n", file);
  fputs ("		member of a cycle, the cycle number is printed\n", file);
  fputs ("		between the name and the index number.\n", file);
  fputs ("\n", file);
  fputs (" If there are any cycles (circles) in the call graph, there is an\n", file);
  fputs (" entry for the cycle-as-a-whole.  This entry shows who called the\n", file);
  fputs (" cycle (as parents) and the members of the cycle (as children.)\n", file);
  fputs (" The `+' recursive calls entry shows the number of function calls that\n", file);
  fputs (" were internal to the cycle, and the calls entry for each member shows,\n", file);
  fputs (" for that member, how many times it was called from other members of\n", file);
  fputs (" the cycle.\n", file);
  fputs ("\n", file);
}
@


1.1.12.1
log
@Generated files for the 2.15 branch.
@
text
@a0 95
/* ==> Do not modify this file!!  It is created automatically
   from fsf_callg_bl.m using the gen-c-prog.awk script.  <== */

#include <stdio.h>
#include "ansidecl.h"

void  fsf_callg_blurb PARAMS ((FILE *));
void
fsf_callg_blurb (file)
     FILE *file;
{
  fputs ("\n", file);
  fputs (" This table describes the call tree of the program, and was sorted by\n", file);
  fputs (" the total amount of time spent in each function and its children.\n", file);
  fputs ("\n", file);
  fputs (" Each entry in this table consists of several lines.  The line with the\n", file);
  fputs (" index number at the left hand margin lists the current function.\n", file);
  fputs (" The lines above it list the functions that called this function,\n", file);
  fputs (" and the lines below it list the functions this one called.\n", file);
  fputs (" This line lists:\n", file);
  fputs ("     index	A unique number given to each element of the table.\n", file);
  fputs ("		Index numbers are sorted numerically.\n", file);
  fputs ("		The index number is printed next to every function name so\n", file);
  fputs ("		it is easier to look up where the function in the table.\n", file);
  fputs ("\n", file);
  fputs ("     % time	This is the percentage of the `total' time that was spent\n", file);
  fputs ("		in this function and its children.  Note that due to\n", file);
  fputs ("		different viewpoints, functions excluded by options, etc,\n", file);
  fputs ("		these numbers will NOT add up to 100%.\n", file);
  fputs ("\n", file);
  fputs ("     self	This is the total amount of time spent in this function.\n", file);
  fputs ("\n", file);
  fputs ("     children	This is the total amount of time propagated into this\n", file);
  fputs ("		function by its children.\n", file);
  fputs ("\n", file);
  fputs ("     called	This is the number of times the function was called.\n", file);
  fputs ("		If the function called itself recursively, the number\n", file);
  fputs ("		only includes non-recursive calls, and is followed by\n", file);
  fputs ("		a `+' and the number of recursive calls.\n", file);
  fputs ("\n", file);
  fputs ("     name	The name of the current function.  The index number is\n", file);
  fputs ("		printed after it.  If the function is a member of a\n", file);
  fputs ("		cycle, the cycle number is printed between the\n", file);
  fputs ("		function's name and the index number.\n", file);
  fputs ("\n", file);
  fputs ("\n", file);
  fputs (" For the function's parents, the fields have the following meanings:\n", file);
  fputs ("\n", file);
  fputs ("     self	This is the amount of time that was propagated directly\n", file);
  fputs ("		from the function into this parent.\n", file);
  fputs ("\n", file);
  fputs ("     children	This is the amount of time that was propagated from\n", file);
  fputs ("		the function's children into this parent.\n", file);
  fputs ("\n", file);
  fputs ("     called	This is the number of times this parent called the\n", file);
  fputs ("		function `/' the total number of times the function\n", file);
  fputs ("		was called.  Recursive calls to the function are not\n", file);
  fputs ("		included in the number after the `/'.\n", file);
  fputs ("\n", file);
  fputs ("     name	This is the name of the parent.  The parent's index\n", file);
  fputs ("		number is printed after it.  If the parent is a\n", file);
  fputs ("		member of a cycle, the cycle number is printed between\n", file);
  fputs ("		the name and the index number.\n", file);
  fputs ("\n", file);
  fputs (" If the parents of the function cannot be determined, the word\n", file);
  fputs (" `<spontaneous>' is printed in the `name' field, and all the other\n", file);
  fputs (" fields are blank.\n", file);
  fputs ("\n", file);
  fputs (" For the function's children, the fields have the following meanings:\n", file);
  fputs ("\n", file);
  fputs ("     self	This is the amount of time that was propagated directly\n", file);
  fputs ("		from the child into the function.\n", file);
  fputs ("\n", file);
  fputs ("     children	This is the amount of time that was propagated from the\n", file);
  fputs ("		child's children to the function.\n", file);
  fputs ("\n", file);
  fputs ("     called	This is the number of times the function called\n", file);
  fputs ("		this child `/' the total number of times the child\n", file);
  fputs ("		was called.  Recursive calls by the child are not\n", file);
  fputs ("		listed in the number after the `/'.\n", file);
  fputs ("\n", file);
  fputs ("     name	This is the name of the child.  The child's index\n", file);
  fputs ("		number is printed after it.  If the child is a\n", file);
  fputs ("		member of a cycle, the cycle number is printed\n", file);
  fputs ("		between the name and the index number.\n", file);
  fputs ("\n", file);
  fputs (" If there are any cycles (circles) in the call graph, there is an\n", file);
  fputs (" entry for the cycle-as-a-whole.  This entry shows who called the\n", file);
  fputs (" cycle (as parents) and the members of the cycle (as children.)\n", file);
  fputs (" The `+' recursive calls entry shows the number of function calls that\n", file);
  fputs (" were internal to the cycle, and the calls entry for each member shows,\n", file);
  fputs (" for that member, how many times it was called from other members of\n", file);
  fputs (" the cycle.\n", file);
  fputs ("\n", file);
}
@


1.1.10.1
log
@Add generated files on 2.14 branch.
@
text
@a0 95
/* ==> Do not modify this file!!  It is created automatically
   from fsf_callg_bl.m using the gen-c-prog.awk script.  <== */

#include <stdio.h>
#include "ansidecl.h"

void  fsf_callg_blurb PARAMS ((FILE *));
void
fsf_callg_blurb (file)
     FILE *file;
{
  fputs ("\n", file);
  fputs (" This table describes the call tree of the program, and was sorted by\n", file);
  fputs (" the total amount of time spent in each function and its children.\n", file);
  fputs ("\n", file);
  fputs (" Each entry in this table consists of several lines.  The line with the\n", file);
  fputs (" index number at the left hand margin lists the current function.\n", file);
  fputs (" The lines above it list the functions that called this function,\n", file);
  fputs (" and the lines below it list the functions this one called.\n", file);
  fputs (" This line lists:\n", file);
  fputs ("     index	A unique number given to each element of the table.\n", file);
  fputs ("		Index numbers are sorted numerically.\n", file);
  fputs ("		The index number is printed next to every function name so\n", file);
  fputs ("		it is easier to look up where the function in the table.\n", file);
  fputs ("\n", file);
  fputs ("     % time	This is the percentage of the `total' time that was spent\n", file);
  fputs ("		in this function and its children.  Note that due to\n", file);
  fputs ("		different viewpoints, functions excluded by options, etc,\n", file);
  fputs ("		these numbers will NOT add up to 100%.\n", file);
  fputs ("\n", file);
  fputs ("     self	This is the total amount of time spent in this function.\n", file);
  fputs ("\n", file);
  fputs ("     children	This is the total amount of time propagated into this\n", file);
  fputs ("		function by its children.\n", file);
  fputs ("\n", file);
  fputs ("     called	This is the number of times the function was called.\n", file);
  fputs ("		If the function called itself recursively, the number\n", file);
  fputs ("		only includes non-recursive calls, and is followed by\n", file);
  fputs ("		a `+' and the number of recursive calls.\n", file);
  fputs ("\n", file);
  fputs ("     name	The name of the current function.  The index number is\n", file);
  fputs ("		printed after it.  If the function is a member of a\n", file);
  fputs ("		cycle, the cycle number is printed between the\n", file);
  fputs ("		function's name and the index number.\n", file);
  fputs ("\n", file);
  fputs ("\n", file);
  fputs (" For the function's parents, the fields have the following meanings:\n", file);
  fputs ("\n", file);
  fputs ("     self	This is the amount of time that was propagated directly\n", file);
  fputs ("		from the function into this parent.\n", file);
  fputs ("\n", file);
  fputs ("     children	This is the amount of time that was propagated from\n", file);
  fputs ("		the function's children into this parent.\n", file);
  fputs ("\n", file);
  fputs ("     called	This is the number of times this parent called the\n", file);
  fputs ("		function `/' the total number of times the function\n", file);
  fputs ("		was called.  Recursive calls to the function are not\n", file);
  fputs ("		included in the number after the `/'.\n", file);
  fputs ("\n", file);
  fputs ("     name	This is the name of the parent.  The parent's index\n", file);
  fputs ("		number is printed after it.  If the parent is a\n", file);
  fputs ("		member of a cycle, the cycle number is printed between\n", file);
  fputs ("		the name and the index number.\n", file);
  fputs ("\n", file);
  fputs (" If the parents of the function cannot be determined, the word\n", file);
  fputs (" `<spontaneous>' is printed in the `name' field, and all the other\n", file);
  fputs (" fields are blank.\n", file);
  fputs ("\n", file);
  fputs (" For the function's children, the fields have the following meanings:\n", file);
  fputs ("\n", file);
  fputs ("     self	This is the amount of time that was propagated directly\n", file);
  fputs ("		from the child into the function.\n", file);
  fputs ("\n", file);
  fputs ("     children	This is the amount of time that was propagated from the\n", file);
  fputs ("		child's children to the function.\n", file);
  fputs ("\n", file);
  fputs ("     called	This is the number of times the function called\n", file);
  fputs ("		this child `/' the total number of times the child\n", file);
  fputs ("		was called.  Recursive calls by the child are not\n", file);
  fputs ("		listed in the number after the `/'.\n", file);
  fputs ("\n", file);
  fputs ("     name	This is the name of the child.  The child's index\n", file);
  fputs ("		number is printed after it.  If the child is a\n", file);
  fputs ("		member of a cycle, the cycle number is printed\n", file);
  fputs ("		between the name and the index number.\n", file);
  fputs ("\n", file);
  fputs (" If there are any cycles (circles) in the call graph, there is an\n", file);
  fputs (" entry for the cycle-as-a-whole.  This entry shows who called the\n", file);
  fputs (" cycle (as parents) and the members of the cycle (as children.)\n", file);
  fputs (" The `+' recursive calls entry shows the number of function calls that\n", file);
  fputs (" were internal to the cycle, and the calls entry for each member shows,\n", file);
  fputs (" for that member, how many times it was called from other members of\n", file);
  fputs (" the cycle.\n", file);
  fputs ("\n", file);
}
@


1.1.8.1
log
@Add generated files.
@
text
@a0 95
/* ==> Do not modify this file!!  It is created automatically
   from fsf_callg_bl.m using the gen-c-prog.awk script.  <== */

#include <stdio.h>
#include "ansidecl.h"

void  fsf_callg_blurb PARAMS ((FILE *));
void
fsf_callg_blurb (file)
     FILE *file;
{
  fputs ("\n", file);
  fputs (" This table describes the call tree of the program, and was sorted by\n", file);
  fputs (" the total amount of time spent in each function and its children.\n", file);
  fputs ("\n", file);
  fputs (" Each entry in this table consists of several lines.  The line with the\n", file);
  fputs (" index number at the left hand margin lists the current function.\n", file);
  fputs (" The lines above it list the functions that called this function,\n", file);
  fputs (" and the lines below it list the functions this one called.\n", file);
  fputs (" This line lists:\n", file);
  fputs ("     index	A unique number given to each element of the table.\n", file);
  fputs ("		Index numbers are sorted numerically.\n", file);
  fputs ("		The index number is printed next to every function name so\n", file);
  fputs ("		it is easier to look up where the function in the table.\n", file);
  fputs ("\n", file);
  fputs ("     % time	This is the percentage of the `total' time that was spent\n", file);
  fputs ("		in this function and its children.  Note that due to\n", file);
  fputs ("		different viewpoints, functions excluded by options, etc,\n", file);
  fputs ("		these numbers will NOT add up to 100%.\n", file);
  fputs ("\n", file);
  fputs ("     self	This is the total amount of time spent in this function.\n", file);
  fputs ("\n", file);
  fputs ("     children	This is the total amount of time propagated into this\n", file);
  fputs ("		function by its children.\n", file);
  fputs ("\n", file);
  fputs ("     called	This is the number of times the function was called.\n", file);
  fputs ("		If the function called itself recursively, the number\n", file);
  fputs ("		only includes non-recursive calls, and is followed by\n", file);
  fputs ("		a `+' and the number of recursive calls.\n", file);
  fputs ("\n", file);
  fputs ("     name	The name of the current function.  The index number is\n", file);
  fputs ("		printed after it.  If the function is a member of a\n", file);
  fputs ("		cycle, the cycle number is printed between the\n", file);
  fputs ("		function's name and the index number.\n", file);
  fputs ("\n", file);
  fputs ("\n", file);
  fputs (" For the function's parents, the fields have the following meanings:\n", file);
  fputs ("\n", file);
  fputs ("     self	This is the amount of time that was propagated directly\n", file);
  fputs ("		from the function into this parent.\n", file);
  fputs ("\n", file);
  fputs ("     children	This is the amount of time that was propagated from\n", file);
  fputs ("		the function's children into this parent.\n", file);
  fputs ("\n", file);
  fputs ("     called	This is the number of times this parent called the\n", file);
  fputs ("		function `/' the total number of times the function\n", file);
  fputs ("		was called.  Recursive calls to the function are not\n", file);
  fputs ("		included in the number after the `/'.\n", file);
  fputs ("\n", file);
  fputs ("     name	This is the name of the parent.  The parent's index\n", file);
  fputs ("		number is printed after it.  If the parent is a\n", file);
  fputs ("		member of a cycle, the cycle number is printed between\n", file);
  fputs ("		the name and the index number.\n", file);
  fputs ("\n", file);
  fputs (" If the parents of the function cannot be determined, the word\n", file);
  fputs (" `<spontaneous>' is printed in the `name' field, and all the other\n", file);
  fputs (" fields are blank.\n", file);
  fputs ("\n", file);
  fputs (" For the function's children, the fields have the following meanings:\n", file);
  fputs ("\n", file);
  fputs ("     self	This is the amount of time that was propagated directly\n", file);
  fputs ("		from the child into the function.\n", file);
  fputs ("\n", file);
  fputs ("     children	This is the amount of time that was propagated from the\n", file);
  fputs ("		child's children to the function.\n", file);
  fputs ("\n", file);
  fputs ("     called	This is the number of times the function called\n", file);
  fputs ("		this child `/' the total number of times the child\n", file);
  fputs ("		was called.  Recursive calls by the child are not\n", file);
  fputs ("		listed in the number after the `/'.\n", file);
  fputs ("\n", file);
  fputs ("     name	This is the name of the child.  The child's index\n", file);
  fputs ("		number is printed after it.  If the child is a\n", file);
  fputs ("		member of a cycle, the cycle number is printed\n", file);
  fputs ("		between the name and the index number.\n", file);
  fputs ("\n", file);
  fputs (" If there are any cycles (circles) in the call graph, there is an\n", file);
  fputs (" entry for the cycle-as-a-whole.  This entry shows who called the\n", file);
  fputs (" cycle (as parents) and the members of the cycle (as children.)\n", file);
  fputs (" The `+' recursive calls entry shows the number of function calls that\n", file);
  fputs (" were internal to the cycle, and the calls entry for each member shows,\n", file);
  fputs (" for that member, how many times it was called from other members of\n", file);
  fputs (" the cycle.\n", file);
  fputs ("\n", file);
}
@


1.1.6.1
log
@Add generated files on 2.12 release branch.
@
text
@a0 95
/* ==> Do not modify this file!!  It is created automatically
   from fsf_callg_bl.m using the gen-c-prog.awk script.  <== */

#include <stdio.h>
#include "ansidecl.h"

void  fsf_callg_blurb PARAMS ((FILE *));
void
fsf_callg_blurb (file)
     FILE *file;
{
  fputs ("\n", file);
  fputs (" This table describes the call tree of the program, and was sorted by\n", file);
  fputs (" the total amount of time spent in each function and its children.\n", file);
  fputs ("\n", file);
  fputs (" Each entry in this table consists of several lines.  The line with the\n", file);
  fputs (" index number at the left hand margin lists the current function.\n", file);
  fputs (" The lines above it list the functions that called this function,\n", file);
  fputs (" and the lines below it list the functions this one called.\n", file);
  fputs (" This line lists:\n", file);
  fputs ("     index	A unique number given to each element of the table.\n", file);
  fputs ("		Index numbers are sorted numerically.\n", file);
  fputs ("		The index number is printed next to every function name so\n", file);
  fputs ("		it is easier to look up where the function in the table.\n", file);
  fputs ("\n", file);
  fputs ("     % time	This is the percentage of the `total' time that was spent\n", file);
  fputs ("		in this function and its children.  Note that due to\n", file);
  fputs ("		different viewpoints, functions excluded by options, etc,\n", file);
  fputs ("		these numbers will NOT add up to 100%.\n", file);
  fputs ("\n", file);
  fputs ("     self	This is the total amount of time spent in this function.\n", file);
  fputs ("\n", file);
  fputs ("     children	This is the total amount of time propagated into this\n", file);
  fputs ("		function by its children.\n", file);
  fputs ("\n", file);
  fputs ("     called	This is the number of times the function was called.\n", file);
  fputs ("		If the function called itself recursively, the number\n", file);
  fputs ("		only includes non-recursive calls, and is followed by\n", file);
  fputs ("		a `+' and the number of recursive calls.\n", file);
  fputs ("\n", file);
  fputs ("     name	The name of the current function.  The index number is\n", file);
  fputs ("		printed after it.  If the function is a member of a\n", file);
  fputs ("		cycle, the cycle number is printed between the\n", file);
  fputs ("		function's name and the index number.\n", file);
  fputs ("\n", file);
  fputs ("\n", file);
  fputs (" For the function's parents, the fields have the following meanings:\n", file);
  fputs ("\n", file);
  fputs ("     self	This is the amount of time that was propagated directly\n", file);
  fputs ("		from the function into this parent.\n", file);
  fputs ("\n", file);
  fputs ("     children	This is the amount of time that was propagated from\n", file);
  fputs ("		the function's children into this parent.\n", file);
  fputs ("\n", file);
  fputs ("     called	This is the number of times this parent called the\n", file);
  fputs ("		function `/' the total number of times the function\n", file);
  fputs ("		was called.  Recursive calls to the function are not\n", file);
  fputs ("		included in the number after the `/'.\n", file);
  fputs ("\n", file);
  fputs ("     name	This is the name of the parent.  The parent's index\n", file);
  fputs ("		number is printed after it.  If the parent is a\n", file);
  fputs ("		member of a cycle, the cycle number is printed between\n", file);
  fputs ("		the name and the index number.\n", file);
  fputs ("\n", file);
  fputs (" If the parents of the function cannot be determined, the word\n", file);
  fputs (" `<spontaneous>' is printed in the `name' field, and all the other\n", file);
  fputs (" fields are blank.\n", file);
  fputs ("\n", file);
  fputs (" For the function's children, the fields have the following meanings:\n", file);
  fputs ("\n", file);
  fputs ("     self	This is the amount of time that was propagated directly\n", file);
  fputs ("		from the child into the function.\n", file);
  fputs ("\n", file);
  fputs ("     children	This is the amount of time that was propagated from the\n", file);
  fputs ("		child's children to the function.\n", file);
  fputs ("\n", file);
  fputs ("     called	This is the number of times the function called\n", file);
  fputs ("		this child `/' the total number of times the child\n", file);
  fputs ("		was called.  Recursive calls by the child are not\n", file);
  fputs ("		listed in the number after the `/'.\n", file);
  fputs ("\n", file);
  fputs ("     name	This is the name of the child.  The child's index\n", file);
  fputs ("		number is printed after it.  If the child is a\n", file);
  fputs ("		member of a cycle, the cycle number is printed\n", file);
  fputs ("		between the name and the index number.\n", file);
  fputs ("\n", file);
  fputs (" If there are any cycles (circles) in the call graph, there is an\n", file);
  fputs (" entry for the cycle-as-a-whole.  This entry shows who called the\n", file);
  fputs (" cycle (as parents) and the members of the cycle (as children.)\n", file);
  fputs (" The `+' recursive calls entry shows the number of function calls that\n", file);
  fputs (" were internal to the cycle, and the calls entry for each member shows,\n", file);
  fputs (" for that member, how many times it was called from other members of\n", file);
  fputs (" the cycle.\n", file);
  fputs ("\n", file);
}
@


1.1.4.1
log
@Add generated files to release branch.
@
text
@a0 93
/* ==> Do not modify this file!!  It is created automatically
   from fsf_callg_bl.m using the gen-c-prog.awk script.  <== */

#include <stdio.h>

void
fsf_callg_blurb (file)
     FILE *file;
{
  fputs ("\n", file);
  fputs (" This table describes the call tree of the program, and was sorted by\n", file);
  fputs (" the total amount of time spent in each function and its children.\n", file);
  fputs ("\n", file);
  fputs (" Each entry in this table consists of several lines.  The line with the\n", file);
  fputs (" index number at the left hand margin lists the current function.\n", file);
  fputs (" The lines above it list the functions that called this function,\n", file);
  fputs (" and the lines below it list the functions this one called.\n", file);
  fputs (" This line lists:\n", file);
  fputs ("     index	A unique number given to each element of the table.\n", file);
  fputs ("		Index numbers are sorted numerically.\n", file);
  fputs ("		The index number is printed next to every function name so\n", file);
  fputs ("		it is easier to look up where the function in the table.\n", file);
  fputs ("\n", file);
  fputs ("     % time	This is the percentage of the `total' time that was spent\n", file);
  fputs ("		in this function and its children.  Note that due to\n", file);
  fputs ("		different viewpoints, functions excluded by options, etc,\n", file);
  fputs ("		these numbers will NOT add up to 100%.\n", file);
  fputs ("\n", file);
  fputs ("     self	This is the total amount of time spent in this function.\n", file);
  fputs ("\n", file);
  fputs ("     children	This is the total amount of time propagated into this\n", file);
  fputs ("		function by its children.\n", file);
  fputs ("\n", file);
  fputs ("     called	This is the number of times the function was called.\n", file);
  fputs ("		If the function called itself recursively, the number\n", file);
  fputs ("		only includes non-recursive calls, and is followed by\n", file);
  fputs ("		a `+' and the number of recursive calls.\n", file);
  fputs ("\n", file);
  fputs ("     name	The name of the current function.  The index number is\n", file);
  fputs ("		printed after it.  If the function is a member of a\n", file);
  fputs ("		cycle, the cycle number is printed between the\n", file);
  fputs ("		function's name and the index number.\n", file);
  fputs ("\n", file);
  fputs ("\n", file);
  fputs (" For the function's parents, the fields have the following meanings:\n", file);
  fputs ("\n", file);
  fputs ("     self	This is the amount of time that was propagated directly\n", file);
  fputs ("		from the function into this parent.\n", file);
  fputs ("\n", file);
  fputs ("     children	This is the amount of time that was propagated from\n", file);
  fputs ("		the function's children into this parent.\n", file);
  fputs ("\n", file);
  fputs ("     called	This is the number of times this parent called the\n", file);
  fputs ("		function `/' the total number of times the function\n", file);
  fputs ("		was called.  Recursive calls to the function are not\n", file);
  fputs ("		included in the number after the `/'.\n", file);
  fputs ("\n", file);
  fputs ("     name	This is the name of the parent.  The parent's index\n", file);
  fputs ("		number is printed after it.  If the parent is a\n", file);
  fputs ("		member of a cycle, the cycle number is printed between\n", file);
  fputs ("		the name and the index number.\n", file);
  fputs ("\n", file);
  fputs (" If the parents of the function cannot be determined, the word\n", file);
  fputs (" `<spontaneous>' is printed in the `name' field, and all the other\n", file);
  fputs (" fields are blank.\n", file);
  fputs ("\n", file);
  fputs (" For the function's children, the fields have the following meanings:\n", file);
  fputs ("\n", file);
  fputs ("     self	This is the amount of time that was propagated directly\n", file);
  fputs ("		from the child into the function.\n", file);
  fputs ("\n", file);
  fputs ("     children	This is the amount of time that was propagated from the\n", file);
  fputs ("		child's children to the function.\n", file);
  fputs ("\n", file);
  fputs ("     called	This is the number of times the function called\n", file);
  fputs ("		this child `/' the total number of times the child\n", file);
  fputs ("		was called.  Recursive calls by the child are not\n", file);
  fputs ("		listed in the number after the `/'.\n", file);
  fputs ("\n", file);
  fputs ("     name	This is the name of the child.  The child's index\n", file);
  fputs ("		number is printed after it.  If the child is a\n", file);
  fputs ("		member of a cycle, the cycle number is printed\n", file);
  fputs ("		between the name and the index number.\n", file);
  fputs ("\n", file);
  fputs (" If there are any cycles (circles) in the call graph, there is an\n", file);
  fputs (" entry for the cycle-as-a-whole.  This entry shows who called the\n", file);
  fputs (" cycle (as parents) and the members of the cycle (as children.)\n", file);
  fputs (" The `+' recursive calls entry shows the number of function calls that\n", file);
  fputs (" were internal to the cycle, and the calls entry for each member shows,\n", file);
  fputs (" for that member, how many times it was called from other members of\n", file);
  fputs (" the cycle.\n", file);
  fputs ("\n", file);
}
@


1.1.2.1
log
@Add generated files.
@
text
@a0 93
/* ==> Do not modify this file!!  It is created automatically
   from fsf_callg_bl.m using the gen-c-prog.awk script.  <== */

#include <stdio.h>

void
fsf_callg_blurb (file)
     FILE *file;
{
  fputs ("\n", file);
  fputs (" This table describes the call tree of the program, and was sorted by\n", file);
  fputs (" the total amount of time spent in each function and its children.\n", file);
  fputs ("\n", file);
  fputs (" Each entry in this table consists of several lines.  The line with the\n", file);
  fputs (" index number at the left hand margin lists the current function.\n", file);
  fputs (" The lines above it list the functions that called this function,\n", file);
  fputs (" and the lines below it list the functions this one called.\n", file);
  fputs (" This line lists:\n", file);
  fputs ("     index	A unique number given to each element of the table.\n", file);
  fputs ("		Index numbers are sorted numerically.\n", file);
  fputs ("		The index number is printed next to every function name so\n", file);
  fputs ("		it is easier to look up where the function in the table.\n", file);
  fputs ("\n", file);
  fputs ("     % time	This is the percentage of the `total' time that was spent\n", file);
  fputs ("		in this function and its children.  Note that due to\n", file);
  fputs ("		different viewpoints, functions excluded by options, etc,\n", file);
  fputs ("		these numbers will NOT add up to 100%.\n", file);
  fputs ("\n", file);
  fputs ("     self	This is the total amount of time spent in this function.\n", file);
  fputs ("\n", file);
  fputs ("     children	This is the total amount of time propagated into this\n", file);
  fputs ("		function by its children.\n", file);
  fputs ("\n", file);
  fputs ("     called	This is the number of times the function was called.\n", file);
  fputs ("		If the function called itself recursively, the number\n", file);
  fputs ("		only includes non-recursive calls, and is followed by\n", file);
  fputs ("		a `+' and the number of recursive calls.\n", file);
  fputs ("\n", file);
  fputs ("     name	The name of the current function.  The index number is\n", file);
  fputs ("		printed after it.  If the function is a member of a\n", file);
  fputs ("		cycle, the cycle number is printed between the\n", file);
  fputs ("		function's name and the index number.\n", file);
  fputs ("\n", file);
  fputs ("\n", file);
  fputs (" For the function's parents, the fields have the following meanings:\n", file);
  fputs ("\n", file);
  fputs ("     self	This is the amount of time that was propagated directly\n", file);
  fputs ("		from the function into this parent.\n", file);
  fputs ("\n", file);
  fputs ("     children	This is the amount of time that was propagated from\n", file);
  fputs ("		the function's children into this parent.\n", file);
  fputs ("\n", file);
  fputs ("     called	This is the number of times this parent called the\n", file);
  fputs ("		function `/' the total number of times the function\n", file);
  fputs ("		was called.  Recursive calls to the function are not\n", file);
  fputs ("		included in the number after the `/'.\n", file);
  fputs ("\n", file);
  fputs ("     name	This is the name of the parent.  The parent's index\n", file);
  fputs ("		number is printed after it.  If the parent is a\n", file);
  fputs ("		member of a cycle, the cycle number is printed between\n", file);
  fputs ("		the name and the index number.\n", file);
  fputs ("\n", file);
  fputs (" If the parents of the function cannot be determined, the word\n", file);
  fputs (" `<spontaneous>' is printed in the `name' field, and all the other\n", file);
  fputs (" fields are blank.\n", file);
  fputs ("\n", file);
  fputs (" For the function's children, the fields have the following meanings:\n", file);
  fputs ("\n", file);
  fputs ("     self	This is the amount of time that was propagated directly\n", file);
  fputs ("		from the child into the function.\n", file);
  fputs ("\n", file);
  fputs ("     children	This is the amount of time that was propagated from the\n", file);
  fputs ("		child's children to the function.\n", file);
  fputs ("\n", file);
  fputs ("     called	This is the number of times the function called\n", file);
  fputs ("		this child `/' the total number of times the child\n", file);
  fputs ("		was called.  Recursive calls by the child are not\n", file);
  fputs ("		listed in the number after the `/'.\n", file);
  fputs ("\n", file);
  fputs ("     name	This is the name of the child.  The child's index\n", file);
  fputs ("		number is printed after it.  If the child is a\n", file);
  fputs ("		member of a cycle, the cycle number is printed\n", file);
  fputs ("		between the name and the index number.\n", file);
  fputs ("\n", file);
  fputs (" If there are any cycles (circles) in the call graph, there is an\n", file);
  fputs (" entry for the cycle-as-a-whole.  This entry shows who called the\n", file);
  fputs (" cycle (as parents) and the members of the cycle (as children.)\n", file);
  fputs (" The `+' recursive calls entry shows the number of function calls that\n", file);
  fputs (" were internal to the cycle, and the calls entry for each member shows,\n", file);
  fputs (" for that member, how many times it was called from other members of\n", file);
  fputs (" the cycle.\n", file);
  fputs ("\n", file);
}
@

