head	1.4;
access;
symbols
	binutils-2_24-branch:1.4.0.8
	binutils-2_24-branchpoint:1.4
	binutils-2_21_1:1.3
	binutils-2_23_2:1.4
	binutils-2_23_1:1.4
	binutils-2_23:1.4
	binutils-2_23-branch:1.4.0.6
	binutils-2_23-branchpoint:1.4
	binutils-2_22_branch:1.4.0.4
	binutils-2_22:1.4
	binutils-2_22-branch:1.4.0.2
	binutils-2_22-branchpoint:1.4
	binutils-2_21:1.3
	binutils-2_21-branch:1.3.0.12
	binutils-2_21-branchpoint:1.3
	binutils-2_20_1:1.3
	binutils-2_20:1.3
	binutils-arc-20081103-branch:1.3.0.10
	binutils-arc-20081103-branchpoint:1.3
	binutils-2_20-branch:1.3.0.8
	binutils-2_20-branchpoint:1.3
	dje-cgen-play1-branch:1.3.0.6
	dje-cgen-play1-branchpoint:1.3
	arc-20081103-branch:1.3.0.4
	arc-20081103-branchpoint:1.3
	binutils-2_19_1:1.3
	binutils-2_19:1.3
	binutils-2_19-branch:1.3.0.2
	binutils-2_19-branchpoint:1.3
	binutils_latest_snapshot:1.4
	added-to-binutils:1.3;
locks; strict;
comment	@ * @;


1.4
date	2011.07.28.23.25.06;	author ccoutant;	state Exp;
branches;
next	1.3;

1.3
date	2008.03.13.21.04.21;	author iant;	state Exp;
branches;
next	1.2;

1.2
date	2007.12.14.19.00.21;	author iant;	state Exp;
branches;
next	1.1;

1.1
date	2007.11.22.00.05.51;	author iant;	state Exp;
branches;
next	;


desc
@@


1.4
log
@	* workqueue-internal.h (Workqueue_threader::should_cancel_thread):
	Add thread_number parameter.
	(Workqueue_threader_threadpool::should_cancel_thread): Likewise.
	* workqueue-threads.cc
	(Workqueue_threader_threadpool::should_cancel_thread): Cancel
	current thread if its thread number is greater than desired thread
	count.
	* workqueue.cc (Workqueue_threader_single::should_cancel_thread):
	Add thread_number parameter.
	(Workqueue::should_cancel_thread): Likewise.
	(Workqueue::find_runnable_or_wait): Pass thread_number to
	should_cancel_thread.
	* workqueue.h (Workqueue::should_cancel_thread): Add thread_number
	parameter.
@
text
@// workqueue-internal.h -- internal work queue header for gold   -*- C++ -*-

// Copyright 2006, 2007, 2008 Free Software Foundation, Inc.
// Written by Ian Lance Taylor <iant@@google.com>.

// This file is part of gold.

// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,
// MA 02110-1301, USA.

#ifndef GOLD_WORKQUEUE_INTERNAL_H
#define GOLD_WORKQUEUE_INTERNAL_H

#include <queue>
#include <csignal>

#include "gold-threads.h"
#include "workqueue.h"

// This is an internal header file for different gold workqueue
// implementations.

namespace gold
{

class Workqueue_thread;

// The Workqueue_threader abstract class.  This is the interface used
// by the general workqueue code to manage threads.

class Workqueue_threader
{
 public:
  Workqueue_threader(Workqueue* workqueue)
    : workqueue_(workqueue)
  { }
  virtual ~Workqueue_threader()
  { }

  // Set the number of threads to use.  This is ignored when not using
  // threads.
  virtual void
  set_thread_count(int) = 0;

  // Return whether to cancel the current thread.
  virtual bool
  should_cancel_thread(int thread_number) = 0;

 protected:
  // Get the Workqueue.
  Workqueue*
  get_workqueue()
  { return this->workqueue_; }

 private:
  // The Workqueue.
  Workqueue* workqueue_;
};

// The threaded instantiation of Workqueue_threader.

class Workqueue_threader_threadpool : public Workqueue_threader
{
 public:
  Workqueue_threader_threadpool(Workqueue*);

  ~Workqueue_threader_threadpool();

  // Set the thread count.
  void
  set_thread_count(int);

  // Return whether to cancel a thread.
  bool
  should_cancel_thread(int thread_number);

  // Process all tasks.  This keeps running until told to cancel.
  void
  process(int thread_number)
  { this->get_workqueue()->process(thread_number); }

 private:
  // This is set if we need to check the thread count.
  volatile sig_atomic_t check_thread_count_;

  // Lock for the remaining members.
  Lock lock_;
  // The number of threads we want to create.  This is set to zero
  // when all threads should exit.
  int desired_thread_count_;
  // The number of threads currently running.
  int threads_;
};

} // End namespace gold.

#endif // !defined(GOLD_WORKQUEUE_INTERNAL_H)
@


1.3
log
@Update copyright years.  Update language files.
@
text
@d59 1
a59 1
  should_cancel_thread() = 0;
d87 1
a87 1
  should_cancel_thread();
@


1.2
log
@Rewrite workqueue.  This version eliminates the master thread, and
reduces the amount of locking required to find a new thread to run.
@
text
@d3 1
a3 1
// Copyright 2006, 2007 Free Software Foundation, Inc.
@


1.1
log
@Add threading support.
@
text
@d27 1
d40 2
a41 2
// The Workqueue_runner abstract class.  This is the interface used by
// the general workqueue code to actually run a task.
d43 1
a43 1
class Workqueue_runner
d46 1
a46 1
  Workqueue_runner(Workqueue* workqueue)
d49 1
a49 1
  virtual ~Workqueue_runner()
a51 4
  // Run a task.  This is always called in the main thread.
  virtual void
  run(Task*, Task_locker*) = 0;

d57 4
d62 3
a64 5
  // This is called by an implementation when a task is completed.
  void completed(Task* t, Task_locker* tl)
  { this->workqueue_->completed(t, tl); }

  Workqueue* get_workqueue() const
d68 1
d72 1
a72 1
// The threaded instantiation of Workqueue_runner.
d74 1
a74 1
class Workqueue_runner_threadpool : public Workqueue_runner
d77 1
a77 1
  Workqueue_runner_threadpool(Workqueue* workqueue);
d79 1
a79 4
  ~Workqueue_runner_threadpool();

  void
  run(Task*, Task_locker*);
d81 1
d85 1
a85 7
 private:
  // This class can not be copied.
  Workqueue_runner_threadpool(const Workqueue_runner_threadpool&);
  Workqueue_runner_threadpool& operator=(const Workqueue_runner_threadpool&);

  // Return the next Task and Task_locker to run.  This returns false
  // if the calling thread should simply exit.
d87 1
a87 1
  get_next(Task**, Task_locker**);
d89 1
a89 1
  // This is called when the thread completes a task.
d91 2
a92 1
  thread_completed(Task*, Task_locker*);
d94 3
a96 3
  // The Workqueue_thread class calls functions from this and from the
  // parent Workqueue_runner.
  friend class Workqueue_thread;
d98 4
a101 9
  // An entry on the queue of tasks to run.
  typedef std::pair<Task*, Task_locker*> Task_queue_entry;

  // A queue of tasks to run.
  typedef std::queue<Task_queue_entry> Task_queue;

  // The number of threads we want to create.  This is only changed in
  // the main thread or when only one thread is running.  This is set
  // to zero when all threads should exit.
d103 2
a104 10
  // A lock controlling access to the remaining fields.
  Lock lock_;
  // The number of threads we have created.
  int actual_thread_count_;
  // The number of threads which are running a task.
  int running_thread_count_;
  // A queue of tasks to run.
  Task_queue task_queue_;
  // A condition variable which signals when the task_queue_ changed.
  Condvar task_queue_condvar_;
@

