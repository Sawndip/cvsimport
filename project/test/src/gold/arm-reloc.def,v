head	1.4;
access;
symbols
	binutils-2_24-branch:1.4.0.8
	binutils-2_24-branchpoint:1.4
	binutils-2_21_1:1.3
	binutils-2_23_2:1.4
	binutils-2_23_1:1.4
	binutils-2_23:1.4
	binutils-2_23-branch:1.4.0.6
	binutils-2_23-branchpoint:1.4
	binutils-2_22_branch:1.4.0.4
	binutils-2_22:1.4
	binutils-2_22-branch:1.4.0.2
	binutils-2_22-branchpoint:1.4
	binutils-2_21:1.3
	binutils-2_21-branch:1.3.0.2
	binutils-2_21-branchpoint:1.3
	binutils_latest_snapshot:1.4;
locks; strict;
comment	@# @;


1.4
date	2010.12.14.19.03.29;	author rwild;	state Exp;
branches;
next	1.3;

1.3
date	2010.02.19.22.53.54;	author dougkwan;	state Exp;
branches;
next	1.2;

1.2
date	2010.02.04.03.32.18;	author dougkwan;	state Exp;
branches;
next	1.1;

1.1
date	2010.02.03.05.36.55;	author dougkwan;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Fix typos in gold.

gold/:
	* dwarf_reader.cc: Remove outdated comment.
	* gold-threads.cc: Fix typo in error message.
	* archive.cc: Fix typos in comments.
	* archive.h: Likewise.
	* arm-reloc-property.cc: Likewise.
	* arm-reloc-property.h: Likewise.
	* arm-reloc.def: Likewise.
	* arm.cc: Likewise.
	* attributes.h: Likewise.
	* cref.cc: Likewise.
	* ehframe.cc: Likewise.
	* fileread.h: Likewise.
	* gold.h: Likewise.
	* i386.cc: Likewise.
	* icf.cc: Likewise.
	* incremental.h: Likewise.
	* int_encoding.cc: Likewise.
	* layout.h: Likewise.
	* main.cc: Likewise.
	* merge.h: Likewise.
	* object.cc: Likewise.
	* object.h: Likewise.
	* options.cc: Likewise.
	* readsyms.cc: Likewise.
	* reduced_debug_output.cc: Likewise.
	* reloc.cc: Likewise.
	* script-sections.cc: Likewise.
	* sparc.cc: Likewise.
	* symtab.h: Likewise.
	* target-reloc.h: Likewise.
	* target.cc: Likewise.
	* target.h: Likewise.
	* timer.cc: Likewise.
	* timer.h: Likewise.
	* x86_64.cc: Likewise.
@
text
@// arm-reloc.def -- ARM relocation definitions.

// Copyright 2010 Free Software Foundation, Inc.
// Written by Doug Kwan <dougkwan@@google.com>.

// This file is part of gold.

// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,
// MA 02110-1301, USA.

// The information here is based on the official ARM document "ELF for ARM
// Architecture" (Document number ARM IHI 0044C).  The first five columns of
// the table below are derived from Table 4-8 in the ARM ELF document.  Each
// relocation from Table 4-8 corresponds to one relocation definition in the
// table below.  A relocation definition has the following information:
//
// Name: This is the name of the relocation without the "R_ARM_" prefix.
//
// Type: Relocation type.  There are four.
//   - STATIC for static relocations processed by a static linker.
//   - DYNAMIC for dynamic relocations processed by a dynamic linker.
//   - PRIVATE for R_ARM_PRIVATE_<n> private relocation type.
//   - OBSOLETE for old relocation types no longer used.
//   We do not use DEPRECATED as a distinct type since we still have to
//   handle deprecated relocations so we one of the types above.
//
// Deprecated:  Whether this is a deprecated relocation type.  The linker
//   is expected to handle these though they should not be generated by fully
//   conforming tool-chains.
//
// Operation: An expression specifying how the linker should perform a
//   relocation.  If there is no operation or the operation cannot be
//   specified, it is "NONE".
//
// Implemented: Whether this is implemented by the gold.
//
// Group_index: For a group relocation type, it is one of 0, 1 or 2.  For
//   a non-group relocation type, it is -1.
//
// Overflow: Whether gold should check for overflow.  This is "No" by default
//   for relocation types DYNAMIC, PRIVATE and OBSOLETE.
//
// Overflow-----------------------------------------------------------------+
// Group index----------------------------------------------------------+   |
// Implemented-------------------------------------------------------+  |   |
// Operation-------------------------------+                         |  |   |
// Class----------------------------+      |                         |  |   |
// Deprecated--------------------+  |      |                         |  |   |
// Type----------------+         |  |      |                         |  |   |
// Name                |         |  |      |                         |  |   |
// |                   |         |  |      |                         |  |   |
RD(NONE              , STATIC  , N, MISC , NONE                   ,  Y, -1, N)
RD(PC24              , STATIC  , Y, ARM  , ((S + A) | T) - P      ,  Y, -1, Y)
RD(ABS32             , STATIC  , N, DATA , (S + A) | T            ,  Y, -1, N)
RD(REL32             , STATIC  , N, DATA , ((S + A) | T) - P      ,  Y, -1, N)
RD(LDR_PC_G0         , STATIC  , N, ARM  , S + A - P              ,  Y,  0, Y)
RD(ABS16             , STATIC  , N, DATA , S + A                  ,  Y, -1, Y)
RD(ABS12             , STATIC  , N, ARM  , S + A                  ,  Y, -1, Y)
RD(THM_ABS5          , STATIC  , N, THM16, S + A                  ,  Y, -1, Y)
RD(ABS8              , STATIC  , N, DATA , S + A                  ,  Y, -1, Y)
RD(SBREL32           , STATIC  , N, DATA , ((S + A) | T) - B(S)   ,  N, -1, N)
RD(THM_CALL          , STATIC  , N, THM32, ((S + A) | T) - P      ,  Y, -1, Y)
RD(THM_PC8           , STATIC  , N, THM16, S + A - Pa             ,  Y, -1, Y)
RD(BREL_ADJ          , DYNAMIC , N, DATA , DELTA_B(S) + A         ,  Y, -1, N)
RD(TLS_DESC          , DYNAMIC , N, DATA , NONE                   ,  Y, -1, N)
RD(THM_SWI8          , OBSOLETE, N, NONE , NONE                   ,  N, -1, N)
RD(XPC25             , OBSOLETE, N, NONE , NONE                   ,  N, -1, N)
RD(THM_XPC22         , OBSOLETE, N, NONE , NONE                   ,  N, -1, N)
RD(TLS_DTPMOD32      , DYNAMIC , N, DATA , Module(S)              ,  Y, -1, N)
RD(TLS_DTPOFF32      , DYNAMIC , N, DATA , S + A - TLS            ,  Y, -1, N)
RD(TLS_TPOFF32       , DYNAMIC , N, DATA , S + A - tp             ,  Y, -1, N)
RD(COPY              , DYNAMIC , N, MISC , NONE                   ,  Y, -1, N)
RD(GLOB_DAT          , DYNAMIC , N, DATA , (S + A) | T            ,  Y, -1, N)
RD(JUMP_SLOT         , DYNAMIC , N, DATA , (S + A) | T            ,  Y, -1, N)
RD(RELATIVE          , DYNAMIC , N, DATA , B(S) + A               ,  Y, -1, N)
RD(GOTOFF32          , STATIC  , N, DATA , ((S + A) | T) - GOT_ORG,  Y, -1, N)
RD(BASE_PREL         , STATIC  , N, DATA , B(S) + A - P           ,  Y, -1, N)
RD(GOT_BREL          , STATIC  , N, DATA , GOT(S) + A - GOT_ORG   ,  Y, -1, N)
RD(PLT32             , STATIC  , Y, ARM  , ((S + A) | T) - P      ,  Y, -1, Y)
RD(CALL              , STATIC  , N, ARM  , ((S + A) | T) - P      ,  Y, -1, Y)
RD(JUMP24            , STATIC  , N, ARM  , ((S + A) | T) - P      ,  Y, -1, Y)
RD(THM_JUMP24        , STATIC  , N, THM32, ((S + A) | T) - P      ,  Y, -1, Y)
RD(BASE_ABS          , STATIC  , N, DATA , B(S) + A               ,  Y, -1, N)
RD(ALU_PCREL_7_0     , OBSOLETE, N, NONE , NONE                   ,  N, -1, N)
RD(ALU_PCREL_15_8    , OBSOLETE, N, NONE , NONE                   ,  N, -1, N)
RD(ALU_PCREL_23_15   , OBSOLETE, N, NONE , NONE                   ,  N, -1, N)
RD(LDR_SBREL_11_0_NC , STATIC  , Y, ARM  , S + A - B(S)           ,  N, -1, N)
RD(ALU_SBREL_19_12_NC, STATIC  , Y, ARM  , S + A - B(S)           ,  N, -1, N)
RD(ALU_SBREL_27_20_CK, STATIC  , Y, ARM  , S + A - B(S)           ,  N, -1, Y)
RD(TARGET1           , STATIC  , N, MISC , NONE                   ,  Y, -1, N)
RD(SBREL31           , STATIC  , Y, DATA , ((S + A) | T) - B(S)   ,  N, -1, N)
RD(V4BX              , STATIC  , N, MISC , NONE                   ,  Y, -1, N)
RD(TARGET2           , STATIC  , N, MISC , NONE                   ,  Y, -1, N)
RD(PREL31            , STATIC  , N, DATA , ((S + A) | T) - P      ,  Y, -1, Y)
RD(MOVW_ABS_NC       , STATIC  , N, ARM  , (S + A) | T            ,  Y, -1, N)
RD(MOVT_ABS          , STATIC  , N, ARM  , S + A                  ,  Y, -1, Y)
RD(MOVW_PREL_NC      , STATIC  , N, ARM  , ((S + A) | T) - P      ,  Y, -1, N)
RD(MOVT_PREL         , STATIC  , N, ARM  , (S + A)  - P           ,  Y, -1, Y)
RD(THM_MOVW_ABS_NC   , STATIC  , N, THM32, (S + A) | T            ,  Y, -1, N)
RD(THM_MOVT_ABS      , STATIC  , N, THM32, S + A                  ,  Y, -1, N)
RD(THM_MOVW_PREL_NC  , STATIC  , N, THM32, ((S + A) | T) - P      ,  Y, -1, N)
RD(THM_MOVT_PREL     , STATIC  , N, THM32, S + A - P              ,  Y, -1, N)
RD(THM_JUMP19        , STATIC  , N, THM32, ((S + A) | T) - P      ,  Y, -1, Y)
RD(THM_JUMP6         , STATIC  , N, THM16, S + A - P              ,  Y, -1, Y)
RD(THM_ALU_PREL_11_0 , STATIC  , N, THM32, ((S + A) | T) - Pa     ,  Y, -1, Y)
RD(THM_PC12          , STATIC  , N, THM32, S + A - Pa             ,  Y, -1, Y)
RD(ABS32_NOI         , STATIC  , N, DATA , S + A                  ,  Y, -1, N)
RD(REL32_NOI         , STATIC  , N, DATA , S + A - P              ,  N, -1, N)
RD(ALU_PC_G0_NC      , STATIC  , N, ARM  , ((S + A) | T) - P      ,  Y,  0, N)
RD(ALU_PC_G0         , STATIC  , N, ARM  , ((S + A) | T) - P      ,  Y,  0, Y)
RD(ALU_PC_G1_NC      , STATIC  , N, ARM  , ((S + A) | T) - P      ,  Y,  1, N)
RD(ALU_PC_G1         , STATIC  , N, ARM  , ((S + A) | T) - P      ,  Y,  1, Y)
RD(ALU_PC_G2         , STATIC  , N, ARM  , ((S + A) | T) - P      ,  Y,  2, Y)
RD(LDR_PC_G1         , STATIC  , N, ARM  , S + A - P              ,  Y,  1, Y)
RD(LDR_PC_G2         , STATIC  , N, ARM  , S + A - P              ,  Y,  2, Y)
RD(LDRS_PC_G0        , STATIC  , N, ARM  , S + A - P              ,  Y,  0, Y)
RD(LDRS_PC_G1        , STATIC  , N, ARM  , S + A - P              ,  Y,  1, Y)
RD(LDRS_PC_G2        , STATIC  , N, ARM  , S + A - P              ,  Y,  2, Y)
RD(LDC_PC_G0         , STATIC  , N, ARM  , S + A - P              ,  Y,  0, Y)
RD(LDC_PC_G1         , STATIC  , N, ARM  , S + A - P              ,  Y,  1, Y)
RD(LDC_PC_G2         , STATIC  , N, ARM  , S + A - P              ,  Y,  2, Y)
RD(ALU_SB_G0_NC      , STATIC  , N, ARM  , ((S + A) | T) - B(S)   ,  Y,  0, N)
RD(ALU_SB_G0         , STATIC  , N, ARM  , ((S + A) | T) - B(S)   ,  Y,  0, Y)
RD(ALU_SB_G1_NC      , STATIC  , N, ARM  , ((S + A) | T) - B(S)   ,  Y,  1, N)
RD(ALU_SB_G1         , STATIC  , N, ARM  , ((S + A) | T) - B(S)   ,  Y,  1, Y)
RD(ALU_SB_G2         , STATIC  , N, ARM  , ((S + A) | T) - B(S)   ,  Y,  2, Y)
RD(LDR_SB_G0         , STATIC  , N, ARM  , S + A - B(S)           ,  Y,  0, Y)
RD(LDR_SB_G1         , STATIC  , N, ARM  , S + A - B(S)           ,  Y,  1, Y)
RD(LDR_SB_G2         , STATIC  , N, ARM  , S + A - B(S)           ,  Y,  2, Y)
RD(LDRS_SB_G0        , STATIC  , N, ARM  , S + A - B(S)           ,  Y,  0, Y)
RD(LDRS_SB_G1        , STATIC  , N, ARM  , S + A - B(S)           ,  Y,  1, Y)
RD(LDRS_SB_G2        , STATIC  , N, ARM  , S + A - B(S)           ,  Y,  2, Y)
RD(LDC_SB_G0         , STATIC  , N, ARM  , S + A - B(S)           ,  Y,  0, Y)
RD(LDC_SB_G1         , STATIC  , N, ARM  , S + A - B(S)           ,  Y,  1, Y)
RD(LDC_SB_G2         , STATIC  , N, ARM  , S + A - B(S)           ,  Y,  2, Y)
RD(MOVW_BREL_NC      , STATIC  , N, ARM  , ((S + A) | T) - B(S)   ,  Y, -1, N)
RD(MOVT_BREL         , STATIC  , N, ARM  , S + A - B(S)           ,  Y, -1, Y)
RD(MOVW_BREL         , STATIC  , N, ARM  , ((S + A) | T) - B(S)   ,  Y, -1, Y)
RD(THM_MOVW_BREL_NC  , STATIC  , N, THM32, ((S + A) | T) - B(S)   ,  Y, -1, N)
RD(THM_MOVT_BREL     , STATIC  , N, THM32, S + A - B(S)           ,  Y, -1, N)
RD(THM_MOVW_BREL     , STATIC  , N, THM32, ((S + A) | T) - B(S)   ,  Y, -1, Y)
RD(TLS_GOTDESC       , STATIC  , N, DATA , NONE                   ,  Y, -1, N)
RD(TLS_CALL          , STATIC  , N, ARM  , NONE                   ,  N, -1, Y)
RD(TLS_DESCSEQ       , STATIC  , N, ARM  , NONE                   ,  N, -1, Y)
RD(THM_TLS_CALL      , STATIC  , N, THM32, NONE                   ,  N, -1, Y)
RD(PLT32_ABS         , STATIC  , N, DATA , PLT(S) + A             ,  N, -1, N)
RD(GOT_ABS           , STATIC  , N, DATA , GOT(S) + A             ,  N, -1, N)
RD(GOT_PREL          , STATIC  , N, DATA , GOT(S) + A - P         ,  Y, -1, N)
RD(GOT_BREL12        , STATIC  , N, ARM  , GOT(S) + A - GOT_ORG   ,  N, -1, Y)
RD(GOTOFF12          , STATIC  , N, ARM  , S + A - GOT_ORG        ,  N, -1, Y)
RD(GOTRELAX          , STATIC  , N, MISC , NONE                   ,  N, -1, N)
RD(GNU_VTENTRY       , STATIC  , Y, DATA , NONE                   ,  Y, -1, N)
RD(GNU_VTINHERIT     , STATIC  , Y, DATA , NONE                   ,  Y, -1, N)
RD(THM_JUMP11        , STATIC  , N, THM16, S + A - P              ,  Y, -1, Y)
RD(THM_JUMP8         , STATIC  , N, THM16, S + A - P              ,  Y, -1, Y)
RD(TLS_GD32          , STATIC  , N, DATA , GOT(S) + A - P         ,  Y, -1, N)
RD(TLS_LDM32         , STATIC  , N, DATA , GOT(S) + A - P         ,  Y, -1, N)
RD(TLS_LDO32         , STATIC  , N, DATA , S + A - TLS            ,  Y, -1, N)
RD(TLS_IE32          , STATIC  , N, DATA , GOT(S) + A - P         ,  Y, -1, N)
RD(TLS_LE32          , STATIC  , N, DATA , S + A - tp             ,  Y, -1, N)
RD(TLS_LDO12         , STATIC  , N, ARM  , S + A - TLS            ,  N, -1, Y)
RD(TLS_LE12          , STATIC  , N, ARM  , S + A - tp             ,  N, -1, Y)
RD(TLS_IE12GP        , STATIC  , N, ARM  , GOT(S) + A - GOT_ORG   ,  N, -1, Y)
RD(PRIVATE_0         , PRIVATE , N, NONE , NONE                   ,  N, -1, N)
RD(PRIVATE_1         , PRIVATE , N, NONE , NONE                   ,  N, -1, N)
RD(PRIVATE_2         , PRIVATE , N, NONE , NONE                   ,  N, -1, N)
RD(PRIVATE_3         , PRIVATE , N, NONE , NONE                   ,  N, -1, N)
RD(PRIVATE_4         , PRIVATE , N, NONE , NONE                   ,  N, -1, N)
RD(PRIVATE_5         , PRIVATE , N, NONE , NONE                   ,  N, -1, N)
RD(PRIVATE_6         , PRIVATE , N, NONE , NONE                   ,  N, -1, N)
RD(PRIVATE_7         , PRIVATE , N, NONE , NONE                   ,  N, -1, N)
RD(PRIVATE_8         , PRIVATE , N, NONE , NONE                   ,  N, -1, N)
RD(PRIVATE_9         , PRIVATE , N, NONE , NONE                   ,  N, -1, N)
RD(PRIVATE_10        , PRIVATE , N, NONE , NONE                   ,  N, -1, N)
RD(PRIVATE_11        , PRIVATE , N, NONE , NONE                   ,  N, -1, N)
RD(PRIVATE_12        , PRIVATE , N, NONE , NONE                   ,  N, -1, N)
RD(PRIVATE_13        , PRIVATE , N, NONE , NONE                   ,  N, -1, N)
RD(PRIVATE_14        , PRIVATE , N, NONE , NONE                   ,  N, -1, N)
RD(PRIVATE_15        , PRIVATE , N, NONE , NONE                   ,  N, -1, N)
RD(ME_TOO            , OBSOLETE, N, NONE , NONE                   ,  N, -1, N)
RD(THM_TLS_DESCSEQ16 , STATIC  , N, THM16, NONE                   ,  N, -1, Y)
RD(THM_TLS_DESCSEQ32 , STATIC  , N, THM32, NONE                   ,  N, -1, Y)
@


1.3
log
@2010-02-18  Doug Kwan  <dougkwan@@google.com>

	* arm-reloc.def: Mark R_ARM_TLS_GD32, R_ARM_TLS_LDM32,
	R_ARM_TLS_LDO32, R_ARM_TLS_IE32 and R_ARM_TLS_LE32 are implemented.
	* arm.cc (Arm_relocation_functions): New forward declaration.
	(Target_arm::Target_arm): Initialize new data members
	got_mod_index_offset_ and tls_base_symbol_defined_.
	(Target_arm::Relocate::relocate_tls): New method.
	(Target_arm::optimize_tls_reloc, Target_arm::define_tls_base_symbol,
	 Target_arm::got_mod_index_entry, Target_arm::rel_tls_desc_section):
	New methods.
   	(Target_arm::Got_type): Add GOT_TYPE_TLS_NOFFSET, GOT_TYPE_OFFSET,
	GOT_TYPE_TLS_PAIR and GOT_TYPE_TLS_DESC.
	(Target_arm::got_mod_index_offset_,
	Target_arm::tls_base_symbol_defined_): New data members.
	(Target_arm::Scan::local, Target::Scan::global,
	Target_arm::Relocate::relocate): Handle 32-bit initial TLS
	relocations.
@
text
@d27 1
a27 1
// table below.  A relocation defintion has the following information:
d43 1
a43 1
// Operation: An expression specifying how the linker should performace a
@


1.2
log
@2010-02-03  Doug Kwan  <dougkwan@@google.com>

	* arm-reloc-property.cc
	(Arm_reloc_property_table::reloc_name_in_error_message): New method
	definition.
	* arm-reloc-property.h
	(Arm_reloc_property_table::get_implemented_static_reloc_property):
	New method definition.
	(Arm_reloc_property_table::reloc_name_in_error_message): New method
	declaration.
	* arm-reloc.def (THM_MOVT_ABS, THM_MOVT_PREL, THM_MOVT_BREL): Change
	overflow to N.
	(GOT_PREL): Change implemented to Y.
	* arm.cc (Target_arm::reloc_uses_thumb_bit): Remove method.
	(Target_arm::Relocate::reloc_needs_sym_origin): Remove method.
	(Arm_relocate_functions::movw_abs_nc): Remove method.
	(Arm_relocate_functions::movt_abs): Ditto.
	(Arm_relocate_functions::thm_movw_abs_nc): Ditto.
	(Arm_relocate_functions::thm_movt_abs): Ditto.
	(Arm_relocate_functions::movw_rel_nc): Ditto.
	(Arm_relocate_functions::movw_rel): Ditto.
	(Arm_relocate_functions::movt_rel): Ditto.
	(Arm_relocate_functions:thm_movw_rel_nc): Ditto.
	(Arm_relocate_functions:thm_movw_rel): Ditto.
	(Arm_relocate_functions:thm_movt_rel): Ditto.
	(Arm_relocate_functions::movw, Arm_relocate_functions::movt,
	(Arm_relocate_functions::thm_movw, Arm_relocate_functions::thm_movt):
	New method definitions.
	(Arm_relocation_functions::arm_grp_alu): Add assertion for group index.
	(Arm_relocation_functions::arm_grp_ldr): Ditto.
	(Arm_relocation_functions::arm_grp_ldrs): Ditto.
	(Arm_relocation_functions::arm_grp_ldc): Ditto.
	(Target_arm::Relocate::relocate): Check for non-static or
	unimplemented relocation code and exit early.  Change calls to
	Target_arm::reloc_uses_thumb_bit and
	Target_arm::Reloc::reloc_needs_sym_origin to use relocation property
	instead.  Refactor code to handle similar relocations to increase
	code sharing.  Remove check for unsupported relocation code in switch
	statement.
	(Target_arm::Relocatable_size_for_reloc::get_size_for_reloc): Use
	relocation property table to find out size.  Change error message to
	print out the name of a relocation code instead of the numeric value.
	(Target_arm::scan_reloc_for_stub): Use relocation property table
	instead of calling Target_arm::reloc_uses_thumb_bit().
@
text
@d168 5
a172 5
RD(TLS_GD32          , STATIC  , N, DATA , GOT(S) + A - P         ,  N, -1, N)
RD(TLS_LDM32         , STATIC  , N, DATA , GOT(S) + A - P         ,  N, -1, N)
RD(TLS_LDO32         , STATIC  , N, DATA , S + A - TLS            ,  N, -1, N)
RD(TLS_IE32          , STATIC  , N, DATA , GOT(S) + A - P         ,  N, -1, N)
RD(TLS_LE32          , STATIC  , N, DATA , S + A - tp             ,  N, -1, N)
@


1.1
log
@2010-02-02  Doug Kwan  <dougkwan@@google.com>

	* Makefile.am (HFILES): Add arm-reloc-property.h.
	(DEFFILES): New.
 	(TARGETSOURCES): Add arm-reloc-property.cc
 	(ALL_TARGETOBJS): Add arm-reloc-property.$(OBJEXT)
	(libgold_a_SOURCES): $(DEFFILES)
	* Makefile.in: Regenerate.
	* arm-reloc-property.cc: New file.
	* arm-reloc-property.h: New file.
	* arm-reloc.def: New file.
	* arm.cc: Update comments.
	(arm-reloc-property.h): New included header.
	(arm_reloc_property_table): New global variable.
	(Target_arm::do_select_as_default_target): New method definition.
	* configure.tgt (armeb*-*-*,armbe*-*-*,arm*-*-*): Add
	arm-reloc-property to targ_extra_obj.
	* parameters.cc (set_parameters_target): Call
	Target::select_as_default_target().
	* target.h (Target::select_as_default_target): New method definition.
	(Target::do_select_as_default_target): Same.
@
text
@d112 1
a112 1
RD(THM_MOVT_ABS      , STATIC  , N, THM32, S + A                  ,  Y, -1, Y)
d114 1
a114 1
RD(THM_MOVT_PREL     , STATIC  , N, THM32, S + A - P              ,  Y, -1, Y)
d152 1
a152 1
RD(THM_MOVT_BREL     , STATIC  , N, THM32, S + A - B(S)           ,  Y, -1, Y)
d160 1
a160 1
RD(GOT_PREL          , STATIC  , N, DATA , GOT(S) + A - P         ,  N, -1, N)
@

