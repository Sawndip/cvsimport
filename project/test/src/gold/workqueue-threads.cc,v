head	1.5;
access;
symbols
	binutils-2_24-branch:1.5.0.8
	binutils-2_24-branchpoint:1.5
	binutils-2_21_1:1.4
	binutils-2_23_2:1.5
	binutils-2_23_1:1.5
	binutils-2_23:1.5
	binutils-2_23-branch:1.5.0.6
	binutils-2_23-branchpoint:1.5
	binutils-2_22_branch:1.5.0.4
	binutils-2_22:1.5
	binutils-2_22-branch:1.5.0.2
	binutils-2_22-branchpoint:1.5
	binutils-2_21:1.4
	binutils-2_21-branch:1.4.0.12
	binutils-2_21-branchpoint:1.4
	binutils-2_20_1:1.4
	binutils-2_20:1.4
	binutils-arc-20081103-branch:1.4.0.10
	binutils-arc-20081103-branchpoint:1.4
	binutils-2_20-branch:1.4.0.8
	binutils-2_20-branchpoint:1.4
	dje-cgen-play1-branch:1.4.0.6
	dje-cgen-play1-branchpoint:1.4
	arc-20081103-branch:1.4.0.4
	arc-20081103-branchpoint:1.4
	binutils-2_19_1:1.4
	binutils-2_19:1.4
	binutils-2_19-branch:1.4.0.2
	binutils-2_19-branchpoint:1.4
	binutils_latest_snapshot:1.5
	added-to-binutils:1.4;
locks; strict;
comment	@// @;


1.5
date	2011.07.28.23.25.06;	author ccoutant;	state Exp;
branches;
next	1.4;

1.4
date	2008.03.13.21.04.21;	author iant;	state Exp;
branches;
next	1.3;

1.3
date	2007.12.14.19.00.21;	author iant;	state Exp;
branches;
next	1.2;

1.2
date	2007.12.06.05.27.24;	author iant;	state Exp;
branches;
next	1.1;

1.1
date	2007.11.22.00.05.51;	author iant;	state Exp;
branches;
next	;


desc
@@


1.5
log
@	* workqueue-internal.h (Workqueue_threader::should_cancel_thread):
	Add thread_number parameter.
	(Workqueue_threader_threadpool::should_cancel_thread): Likewise.
	* workqueue-threads.cc
	(Workqueue_threader_threadpool::should_cancel_thread): Cancel
	current thread if its thread number is greater than desired thread
	count.
	* workqueue.cc (Workqueue_threader_single::should_cancel_thread):
	Add thread_number parameter.
	(Workqueue::should_cancel_thread): Likewise.
	(Workqueue::find_runnable_or_wait): Pass thread_number to
	should_cancel_thread.
	* workqueue.h (Workqueue::should_cancel_thread): Add thread_number
	parameter.
@
text
@// workqueue-threads.cc -- the threaded workqueue for gold

// Copyright 2007, 2008 Free Software Foundation, Inc.
// Written by Ian Lance Taylor <iant@@google.com>.

// This file is part of gold.

// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,
// MA 02110-1301, USA.

// This file holds the workqueue implementation which may be used when
// using threads.

#include "gold.h"

#ifdef ENABLE_THREADS

#include <cstring>
#include <pthread.h>

#include "debug.h"
#include "gold-threads.h"
#include "workqueue.h"
#include "workqueue-internal.h"

namespace gold
{

// Class Workqueue_thread represents a single thread.  Creating an
// instance of this spawns a new thread.

class Workqueue_thread
{
 public:
  Workqueue_thread(Workqueue_threader_threadpool*, int thread_number);

  ~Workqueue_thread();

 private:
  // This class can not be copied.
  Workqueue_thread(const Workqueue_thread&);
  Workqueue_thread& operator=(const Workqueue_thread&);

  // Check for error from a pthread function.
  void
  check(const char* function, int err) const;

  // A function to pass to pthread_create.  This is called with a
  // pointer to an instance of this object.
  static void*
  thread_body(void*);

  // A pointer to the threadpool that this thread is part of.
  Workqueue_threader_threadpool* threadpool_;
  // The thread number.
  int thread_number_;
  // The thread ID.
  pthread_t tid_;
};

// Create the thread in the constructor.

Workqueue_thread::Workqueue_thread(Workqueue_threader_threadpool* threadpool,
				   int thread_number)
  : threadpool_(threadpool), thread_number_(thread_number)
{
  pthread_attr_t attr;
  int err = pthread_attr_init(&attr);
  this->check("pthread_attr_init", err);

  err = pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
  this->check("pthread_attr_setdetachstate", err);

  err = pthread_create(&this->tid_, &attr, &Workqueue_thread::thread_body,
		       reinterpret_cast<void*>(this));
  this->check("pthread_create", err);

  err = pthread_attr_destroy(&attr);
  this->check("pthread_attr_destroy", err);
}

// The destructor will be called when the thread is exiting.

Workqueue_thread::~Workqueue_thread()
{
}

// Check for an error.

void
Workqueue_thread::check(const char* function, int err) const
{
  if (err != 0)
    gold_fatal(_("%s failed: %s"), function, strerror(err));
}

// Passed to pthread_create.

extern "C"
void*
Workqueue_thread::thread_body(void* arg)
{
  Workqueue_thread* pwt = reinterpret_cast<Workqueue_thread*>(arg);

  pwt->threadpool_->process(pwt->thread_number_);

  // Delete the thread object as we exit.
  delete pwt;

  return NULL;
}

// Class Workqueue_threader_threadpool.

// Constructor.

Workqueue_threader_threadpool::Workqueue_threader_threadpool(
    Workqueue* workqueue)
  : Workqueue_threader(workqueue),
    check_thread_count_(0),
    lock_(),
    desired_thread_count_(1),
    threads_(1)
{
}

// Destructor.

Workqueue_threader_threadpool::~Workqueue_threader_threadpool()
{
  // Tell the threads to exit.
  this->get_workqueue()->set_thread_count(0);
}

// Set the thread count.

void
Workqueue_threader_threadpool::set_thread_count(int thread_count)
{
  int create;
  {
    Hold_lock hl(this->lock_);

    this->desired_thread_count_ = thread_count;
    create = this->desired_thread_count_ - this->threads_;
    if (create < 0)
      this->check_thread_count_ = 1;
  }

  if (create > 0)
    {
      for (int i = 0; i < create; ++i)
	{
	  // Note that threads delete themselves when they exit, so we
	  // don't keep pointers to them.
	  new Workqueue_thread(this, this->threads_);
	  ++this->threads_;
	}
    }
}

// Return whether the current thread should be cancelled.

bool
Workqueue_threader_threadpool::should_cancel_thread(int thread_number)
{
  // Fast exit without taking a lock.
  if (!this->check_thread_count_)
    return false;

  {
    Hold_lock hl(this->lock_);
    if (thread_number > this->desired_thread_count_)
      {
	--this->threads_;
	if (this->threads_ <= this->desired_thread_count_)
	  this->check_thread_count_ = 0;
	return true;
      }
  }

  return false;
}

} // End namespace gold.

#endif // defined(ENABLE_THREADS)
@


1.4
log
@Update copyright years.  Update language files.
@
text
@d177 1
a177 1
Workqueue_threader_threadpool::should_cancel_thread()
d185 1
a185 1
    if (this->threads_ > this->desired_thread_count_)
d188 2
a191 1
    this->check_thread_count_ = 0;
@


1.3
log
@Rewrite workqueue.  This version eliminates the master thread, and
reduces the amount of locking required to find a new thread to run.
@
text
@d3 1
a3 1
// Copyright 2007 Free Software Foundation, Inc.
@


1.2
log
@Fix comment.
@
text
@d47 1
a47 1
  Workqueue_thread(Workqueue_runner_threadpool*);
a64 4
  // The main loop of the thread.
  void
  run();

d66 3
a68 1
  Workqueue_runner_threadpool* threadpool_;
d75 3
a77 2
Workqueue_thread::Workqueue_thread(Workqueue_runner_threadpool* threadpool)
  : threadpool_(threadpool)
d116 2
a117 1
  pwt->run();
d125 1
a125 24
// This is the main loop of a worker thread.  It picks up a new Task
// and runs it.

void
Workqueue_thread::run()
{
  Workqueue_runner_threadpool* threadpool = this->threadpool_;
  Workqueue* workqueue = threadpool->get_workqueue();

  while (true)
    {
      Task* t;
      Task_locker* tl;
      if (!threadpool->get_next(&t, &tl))
	return;

      gold_debug(DEBUG_TASK, "running   task %s", t->name().c_str());

      t->run(workqueue);
      threadpool->thread_completed(t, tl);
    }
}

// Class Workqueue_runner_threadpool.
d129 4
a132 3
Workqueue_runner_threadpool::Workqueue_runner_threadpool(Workqueue* workqueue)
  : Workqueue_runner(workqueue),
    desired_thread_count_(0),
d134 2
a135 4
    actual_thread_count_(0),
    running_thread_count_(0),
    task_queue_(),
    task_queue_condvar_(this->lock_)
d141 1
a141 1
Workqueue_runner_threadpool::~Workqueue_runner_threadpool()
d144 1
a144 3
  Hold_lock hl(this->lock_);
  this->desired_thread_count_ = 0;
  this->task_queue_condvar_.broadcast();
d147 1
a147 3
// Run a task.  This doesn't actually run the task: it pushes it on
// the queue of tasks to run.  This is always called in the main
// thread.
d150 1
a150 1
Workqueue_runner_threadpool::run(Task* t, Task_locker* tl)
d152 3
a154 1
  Hold_lock hl(this->lock_);
d156 7
a162 6
  // This is where we create threads as needed, subject to the limit
  // of the desired thread count.
  gold_assert(this->desired_thread_count_ > 0);
  gold_assert(this->actual_thread_count_ >= this->running_thread_count_);
  if (this->actual_thread_count_ == this->running_thread_count_
      && this->actual_thread_count_ < this->desired_thread_count_)
d164 7
a170 4
      // Note that threads delete themselves when they exit, so we
      // don't keep pointers to them.
      new Workqueue_thread(this);
      ++this->actual_thread_count_;
a171 3

  this->task_queue_.push(std::make_pair(t, tl));
  this->task_queue_condvar_.signal();
d174 1
a174 14
// Set the thread count.  This is only called in the main thread, and
// is only called when there are no threads running.

void
Workqueue_runner_threadpool::set_thread_count(int thread_count)
{
  gold_assert(this->running_thread_count_ <= 1);
  gold_assert(thread_count > 0);
  this->desired_thread_count_ = thread_count;
}

// Get the next task to run.  This is always called by an instance of
// Workqueue_thread, and is never called in the main thread.  It
// returns false if the calling thread should exit.
d177 1
a177 1
Workqueue_runner_threadpool::get_next(Task** pt, Task_locker** ptl)
d179 3
a181 9
  Hold_lock hl(this->lock_);

  // This is where we destroy threads, by telling them to exit.
  gold_assert(this->actual_thread_count_ > this->running_thread_count_);
  if (this->actual_thread_count_ > this->desired_thread_count_)
    {
      --this->actual_thread_count_;
      return false;
    }
a182 28
  while (this->task_queue_.empty() && this->desired_thread_count_ > 0)
    {
      // Wait for a new task to become available.
      this->task_queue_condvar_.wait();
    }

  // Check whether we are exiting.
  if (this->desired_thread_count_ == 0)
    {
      gold_assert(this->actual_thread_count_ > 0);
      --this->actual_thread_count_;
      return false;
    }

  *pt = this->task_queue_.front().first;
  *ptl = this->task_queue_.front().second;
  this->task_queue_.pop();

  ++this->running_thread_count_;

  return true;
}

// This is called when a thread completes its task.

void
Workqueue_runner_threadpool::thread_completed(Task* t, Task_locker* tl)
{
d185 6
a190 3
    gold_assert(this->actual_thread_count_ > 0);
    gold_assert(this->running_thread_count_ > 0);
    --this->running_thread_count_;
d193 1
a193 1
  this->completed(t, tl);
@


1.1
log
@Add threading support.
@
text
@d173 3
a175 2
// Run a task.  This doesn't actually run the task: it pushes on the
// queue of tasks to run.  This is always called in the main thread.
@

