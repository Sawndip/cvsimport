head	1.28;
access;
symbols
	binutils-2_24-branch:1.28.0.2
	binutils-2_24-branchpoint:1.28
	binutils-2_21_1:1.26
	binutils-2_23_2:1.27
	binutils-2_23_1:1.27
	binutils-2_23:1.27
	binutils-2_23-branch:1.27.0.6
	binutils-2_23-branchpoint:1.27
	binutils-2_22_branch:1.27.0.4
	binutils-2_22:1.27
	binutils-2_22-branch:1.27.0.2
	binutils-2_22-branchpoint:1.27
	binutils-2_21:1.26
	binutils-2_21-branch:1.26.0.2
	binutils-2_21-branchpoint:1.26
	binutils-2_20_1:1.23
	binutils-2_20:1.23
	binutils-arc-20081103-branch:1.22.0.6
	binutils-arc-20081103-branchpoint:1.22
	binutils-2_20-branch:1.23.0.4
	binutils-2_20-branchpoint:1.23
	dje-cgen-play1-branch:1.23.0.2
	dje-cgen-play1-branchpoint:1.23
	arc-20081103-branch:1.22.0.4
	arc-20081103-branchpoint:1.22
	binutils-2_19_1:1.22
	binutils-2_19:1.22
	binutils-2_19-branch:1.22.0.2
	binutils-2_19-branchpoint:1.22
	binutils_latest_snapshot:1.28
	added-to-binutils:1.21;
locks; strict;
comment	@ * @;


1.28
date	2013.04.29.17.15.08;	author ccoutant;	state Exp;
branches;
next	1.27;

1.27
date	2011.06.28.05.39.45;	author ian;	state Exp;
branches;
next	1.26;

1.26
date	2010.08.03.20.38.09;	author ccoutant;	state Exp;
branches;
next	1.25;

1.25
date	2010.03.19.19.11.21;	author dougkwan;	state Exp;
branches;
next	1.24;

1.24
date	2010.03.16.01.26.15;	author dougkwan;	state Exp;
branches;
next	1.23;

1.23
date	2009.06.23.07.04.10;	author ian;	state Exp;
branches;
next	1.22;

1.22
date	2008.07.24.07.23.20;	author ian;	state Exp;
branches;
next	1.21;

1.21
date	2008.03.13.21.04.21;	author iant;	state Exp;
branches;
next	1.20;

1.20
date	2007.12.19.01.23.46;	author iant;	state Exp;
branches;
next	1.19;

1.19
date	2007.12.19.00.29.28;	author iant;	state Exp;
branches;
next	1.18;

1.18
date	2007.12.18.00.48.04;	author iant;	state Exp;
branches;
next	1.17;

1.17
date	2007.12.14.05.24.17;	author iant;	state Exp;
branches;
next	1.16;

1.16
date	2007.12.05.22.56.51;	author iant;	state Exp;
branches;
next	1.15;

1.15
date	2007.12.05.00.48.49;	author iant;	state Exp;
branches;
next	1.14;

1.14
date	2007.12.01.06.34.12;	author iant;	state Exp;
branches;
next	1.13;

1.13
date	2007.11.30.00.35.27;	author iant;	state Exp;
branches;
next	1.12;

1.12
date	2007.10.12.06.06.34;	author iant;	state Exp;
branches;
next	1.11;

1.11
date	2007.09.22.21.02.10;	author iant;	state Exp;
branches;
next	1.10;

1.10
date	2007.09.21.06.12.32;	author iant;	state Exp;
branches;
next	1.9;

1.9
date	2007.09.19.20.44.15;	author iant;	state Exp;
branches;
next	1.8;

1.8
date	2007.09.19.17.38.00;	author iant;	state Exp;
branches;
next	1.7;

1.7
date	2007.09.18.05.16.39;	author iant;	state Exp;
branches;
next	1.6;

1.6
date	2007.05.16.17.42.48;	author iant;	state Exp;
branches;
next	1.5;

1.5
date	2006.11.29.17.56.40;	author iant;	state Exp;
branches;
next	1.4;

1.4
date	2006.11.07.04.40.46;	author iant;	state Exp;
branches;
next	1.3;

1.3
date	2006.09.29.19.58.17;	author iant;	state Exp;
branches;
next	1.2;

1.2
date	2006.09.26.21.50.25;	author iant;	state Exp;
branches;
next	1.1;

1.1
date	2006.08.18.22.29.20;	author iant;	state Exp;
branches;
next	;


desc
@@


1.28
log
@2013-04-29  Alexander Ivchenko  <alexander.ivchenko@@intel.com>

gold/
	* output.cc (Output_section::add_merge_input_section): Allow
	to merge sections if the alignment is more than character size.
	* merge.h (Output_merge_string::Output_merge_string): Remove
	assert.
	* merge.cc (Output_merge_string<Char_type>::do_add_input_section): Count
	only not-null strings. Check the alignment of strings.
	* stringpool.h
	(Stringpool_template<Stringpool_char>::Stringpool_template): Add
	alignment as the argument.
	(Stringpool_template<Stringpool_char>::addralign_): New class member.
	* stringpool.cc (Stringpool_template<Stringpool_char>::new_key_offset):
	Align non-zero length strings according to the addralign_.
	(Stringpool_template<Stringpool_char>::set_string_offsets):
	Updating offsets according to the given alignment.
	* testsuite/Makefile.am (text_section_grouping): Test if string
	literals are getting merged.
	* testsuite/Makefile.in: Regenerate.
	* testsuite/merge_string_literals_1.c: New file.
	* testsuite/merge_string_literals_2.c: Ditto.
	* testsuite/merge_string_literals.sh: Ditto.
@
text
@// stringpool.h -- a string pool for gold    -*- C++ -*-

// Copyright 2006, 2007, 2008, 2009, 2010, 2011 Free Software Foundation, Inc.
// Written by Ian Lance Taylor <iant@@google.com>.

// This file is part of gold.

// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,
// MA 02110-1301, USA.

#include <string>
#include <list>
#include <vector>

#ifndef GOLD_STRINGPOOL_H
#define GOLD_STRINGPOOL_H

namespace gold
{

class Output_file;

// Return the length of a string in units of Char_type.

template<typename Char_type>
inline size_t
string_length(const Char_type* p)
{
  size_t len = 0;
  for (; *p != 0; ++p)
    ++len;
  return len;
}

// Specialize string_length for char.  Maybe we could just use
// std::char_traits<>::length?

template<>
inline size_t
string_length(const char* p)
{
  return strlen(p);
}

// A Stringpool is a pool of unique strings.  It provides the
// following features:

// Every string in the pool is unique.  Thus, if you have two strings
// in the Stringpool, you can compare them for equality by using
// pointer comparison rather than string comparison.

// There is a key associated with every string in the pool.  If you
// add strings to the Stringpool in the same order, then the key for
// each string will always be the same for any run of the linker.
// This is not true of the string pointers themselves, as they may
// change due to address space randomization.  Some parts of the
// linker (e.g., the symbol table) use the key value instead of the
// string pointer so that repeated runs of the linker will generate
// precisely the same output.

// When you add a string to a Stringpool, Stringpool will optionally
// make a copy of it.  Thus there is no requirement to keep a copy
// elsewhere.

// A Stringpool can be turned into a string table, a sequential series
// of null terminated strings.  The first string may optionally be a
// single zero byte, as required for SHT_STRTAB sections.  This
// conversion is only permitted after all strings have been added to
// the Stringpool.  After doing this conversion, you can ask for the
// offset of any string (or any key) in the stringpool in the string
// table, and you can write the resulting string table to an output
// file.

// When a Stringpool is turned into a string table, then as an
// optimization it will reuse string suffixes to avoid duplicating
// strings.  That is, given the strings "abc" and "bc", only the
// string "abc" will be stored, and "bc" will be represented by an
// offset into the middle of the string "abc".


// A simple chunked vector class--this is a subset of std::vector
// which stores memory in chunks.  We don't provide iterators, because
// we don't need them.

template<typename Element>
class Chunked_vector
{
 public:
  Chunked_vector()
    : chunks_(), size_(0)
  { }

  // Clear the elements.
  void
  clear()
  {
    this->chunks_.clear();
    this->size_ = 0;
  }

  // Reserve elements.
  void
  reserve(unsigned int n)
  {
    if (n > this->chunks_.size() * chunk_size)
      {
	this->chunks_.resize((n + chunk_size - 1) / chunk_size);
	// We need to call reserve() of all chunks since changing
	// this->chunks_ casues Element_vectors to be copied.  The
	// reserved capacity of an Element_vector may be lost in copying.
	for (size_t i = 0; i < this->chunks_.size(); ++i)
	  this->chunks_[i].reserve(chunk_size);
      }
  }

  // Get the number of elements.
  size_t
  size() const
  { return this->size_; }

  // Push a new element on the back of the vector.
  void
  push_back(const Element& element)
  {
    size_t chunk_index = this->size_ / chunk_size;
    if (chunk_index >= this->chunks_.size())
      {
	this->chunks_.push_back(Element_vector());
	this->chunks_.back().reserve(chunk_size);
	gold_assert(chunk_index < this->chunks_.size());
      }
    this->chunks_[chunk_index].push_back(element);
    this->size_++;
  }

  // Return a reference to an entry in the vector.
  Element&
  operator[](size_t i)
  { return this->chunks_[i / chunk_size][i % chunk_size]; }

  const Element&
  operator[](size_t i) const
  { return this->chunks_[i / chunk_size][i % chunk_size]; }

 private:
  static const unsigned int chunk_size = 8192;

  typedef std::vector<Element> Element_vector;
  typedef std::vector<Element_vector> Chunk_vector;

  Chunk_vector chunks_;
  size_t size_;
};


// Stringpools are implemented in terms of Stringpool_template, which
// is generalized on the type of character used for the strings.  Most
// uses will want the Stringpool type which uses char.  Other cases
// are used for merging wide string constants.

template<typename Stringpool_char>
class Stringpool_template
{
 public:
  // The type of a key into the stringpool.  As described above, a key
  // value will always be the same during any run of the linker.  Zero
  // is never a valid key value.
  typedef size_t Key;

  // Create a Stringpool.
  Stringpool_template(uint64_t addralign = 1);

  ~Stringpool_template();

  // Clear all the data from the stringpool.
  void
  clear();

  // Hint to the stringpool class that you intend to insert n additional
  // elements.  The stringpool class can use this info however it likes;
  // in practice it will resize its internal hashtables to make room.
  void
  reserve(unsigned int n);

  // Indicate that we should not reserve offset 0 to hold the empty
  // string when converting the stringpool to a string table.  This
  // should not be called for a proper ELF SHT_STRTAB section.
  void
  set_no_zero_null()
  {
    gold_assert(this->string_set_.empty()
		&& this->offset_ == sizeof(Stringpool_char));
    this->zero_null_ = false;
    this->offset_ = 0;
  }

  // Indicate that this string pool should be optimized, even if not
  // running with -O2.
  void
  set_optimize()
  { this->optimize_ = true; }

  // Add the string S to the pool.  This returns a canonical permanent
  // pointer to the string in the pool.  If COPY is true, the string
  // is copied into permanent storage.  If PKEY is not NULL, this sets
  // *PKEY to the key for the string.
  const Stringpool_char*
  add(const Stringpool_char* s, bool copy, Key* pkey);

  // Add the string S to the pool.
  const Stringpool_char*
  add(const std::basic_string<Stringpool_char>& s, bool copy, Key* pkey)
  { return this->add_with_length(s.data(), s.size(), copy, pkey); }

  // Add string S of length LEN characters to the pool.  If COPY is
  // true, S need not be null terminated.
  const Stringpool_char*
  add_with_length(const Stringpool_char* s, size_t len, bool copy, Key* pkey);

  // If the string S is present in the pool, return the canonical
  // string pointer.  Otherwise, return NULL.  If PKEY is not NULL,
  // set *PKEY to the key.
  const Stringpool_char*
  find(const Stringpool_char* s, Key* pkey) const;

  // Turn the stringpool into a string table: determine the offsets of
  // all the strings.  After this is called, no more strings may be
  // added to the stringpool.
  void
  set_string_offsets();

  // Get the offset of the string S in the string table.  This returns
  // the offset in bytes, not in units of Stringpool_char.  This may
  // only be called after set_string_offsets has been called.
  section_offset_type
  get_offset(const Stringpool_char* s) const;

  // Get the offset of the string S in the string table.
  section_offset_type
  get_offset(const std::basic_string<Stringpool_char>& s) const
  { return this->get_offset_with_length(s.c_str(), s.size()); }

  // Get the offset of string S, with length LENGTH characters, in the
  // string table.
  section_offset_type
  get_offset_with_length(const Stringpool_char* s, size_t length) const;

  // Get the offset of the string with key K.
  section_offset_type
  get_offset_from_key(Key k) const
  {
    gold_assert(k <= this->key_to_offset_.size());
    return this->key_to_offset_[k - 1];
  }

  // Get the size of the string table.  This returns the number of
  // bytes, not in units of Stringpool_char.
  section_size_type
  get_strtab_size() const
  {
    gold_assert(this->strtab_size_ != 0);
    return this->strtab_size_;
  }

  // Write the string table into the output file at the specified
  // offset.
  void
  write(Output_file*, off_t offset);

  // Write the string table into the specified buffer, of the
  // specified size.  buffer_size should be at least
  // get_strtab_size().
  void
  write_to_buffer(unsigned char* buffer, section_size_type buffer_size);

  // Dump statistical information to stderr.
  void
  print_stats(const char*) const;

 private:
  Stringpool_template(const Stringpool_template&);
  Stringpool_template& operator=(const Stringpool_template&);

  // Return whether two strings are equal.
  static bool
  string_equal(const Stringpool_char*, const Stringpool_char*);

  // Compute a hash code for a string.  LENGTH is the length of the
  // string in characters.
  static size_t
  string_hash(const Stringpool_char*, size_t length);

  // We store the actual data in a list of these buffers.
  struct Stringdata
  {
    // Length of data in buffer.
    size_t len;
    // Allocated size of buffer.
    size_t alc;
    // Buffer.
    char data[1];
  };

  // Add a new key offset entry.
  void
  new_key_offset(size_t);

  // Copy a string into the buffers, returning a canonical string.
  const Stringpool_char*
  add_string(const Stringpool_char*, size_t);

  // Return whether s1 is a suffix of s2.
  static bool
  is_suffix(const Stringpool_char* s1, size_t len1,
            const Stringpool_char* s2, size_t len2);

  // The hash table key includes the string, the length of the string,
  // and the hash code for the string.  We put the hash code
  // explicitly into the key so that we can do a find()/insert()
  // sequence without having to recompute the hash.  Computing the
  // hash code is a significant user of CPU time in the linker.
  struct Hashkey
  {
    const Stringpool_char* string;
    // Length is in characters, not bytes.
    size_t length;
    size_t hash_code;

    // This goes in an STL container, so we need a default
    // constructor.
    Hashkey()
      : string(NULL), length(0), hash_code(0)
    { }

    // Note that these constructors are relatively expensive, because
    // they compute the hash code.
    explicit Hashkey(const Stringpool_char* s)
      : string(s), length(string_length(s)), hash_code(string_hash(s, length))
    { }

    Hashkey(const Stringpool_char* s, size_t len)
      : string(s), length(len), hash_code(string_hash(s, len))
    { }
  };

  // Hash function.  This is trivial, since we have already computed
  // the hash.
  struct Stringpool_hash
  {
    size_t
    operator()(const Hashkey& hk) const
    { return hk.hash_code; }
  };

  // Equality comparison function for hash table.
  struct Stringpool_eq
  {
    bool
    operator()(const Hashkey&, const Hashkey&) const;
  };

  // The hash table is a map from strings to Keys.

  typedef Key Hashval;

  typedef Unordered_map<Hashkey, Hashval, Stringpool_hash,
			Stringpool_eq> String_set_type;

  // Comparison routine used when sorting into a string table.

  typedef typename String_set_type::iterator Stringpool_sort_info;

  struct Stringpool_sort_comparison
  {
    bool
    operator()(const Stringpool_sort_info&, const Stringpool_sort_info&) const;
  };

  // Keys map to offsets via a Chunked_vector.  We only use the
  // offsets if we turn this into an string table section.
  typedef Chunked_vector<section_offset_type> Key_to_offset;

  // List of Stringdata structures.
  typedef std::list<Stringdata*> Stringdata_list;

  // Mapping from const char* to namepool entry.
  String_set_type string_set_;
  // Mapping from Key to string table offset.
  Key_to_offset key_to_offset_;
  // List of buffers.
  Stringdata_list strings_;
  // Size of string table.
  section_size_type strtab_size_;
  // Whether to reserve offset 0 to hold the null string.
  bool zero_null_;
  // Whether to optimize the string table.
  bool optimize_;
  // offset of the next string.
  section_offset_type offset_;
  // The alignment of strings in the stringpool.
  uint64_t addralign_;
};

// The most common type of Stringpool.
typedef Stringpool_template<char> Stringpool;

} // End namespace gold.

#endif // !defined(GOLD_STRINGPOOL_H)
@


1.27
log
@	* symtab.cc (Symbol::versioned_name): New function.
	(Symbol_table::add_to_final_symtab): Use versioned_name when
	appropriate.
	(Symbol_table::sized_write_symbol): Likewise.
	* symtab.h (class Symbol): Declare versioned_name.
	* stringpool.h (class Stringpool_template): Add variant of add
	which takes a std::basic_string.
	* testsuite/Makefile.am (check_PROGRAMS): Add ver_test_12.
	(ver_test_12_SOURCES, ver_test_12_DEPENDENCIES): New variables.
	(ver_test_12_LDFLAGS, ver_test_12_LDADD): New variables.
	(ver_test_12.o): New target.
	* testsuite/Makefile.in: Rebuild.
@
text
@d183 1
a183 1
  Stringpool_template();
d412 2
@


1.26
log
@	* merge.cc (Output_merge_string::do_add_input_section): Count strings
	to reserve space in merged_strings vector. Keep total input size
	for stats.
	(Output_merge_string::do_print_merge_stats): Print total input size.
	* merge.h (Output_merge_string): Add input_size_ field.
	* stringpool.cc (Stringpool_template::string_length): Move
	implementations out of Stringpool_template class and place in
	stringpool.h.
	* stringpool.h (string_length): Move out of Stringpool_template.
@
text
@d3 1
a3 1
// Copyright 2006, 2007, 2008 Free Software Foundation, Inc.
d222 5
@


1.25
log
@2010-03-19  Doug Kwan  <dougkwan@@google.com>

	* arm.cc (Stub_table::Stub_table): Initialize new data members
	Stub_table::reloc_stubs_size_ and Stub_table::reloc_stubs_addralign_.
	(Stub_table::add_reloc_stub): Assign stub offset and update
	Stub_table::reloc_stubs_size_ and Stub_table::reloc_stubs_addralign_.
	(Stub_table::reloc_stubs_size_, Stub_table::reloc_stubs_addralign_):
	New data members.
 	(Stub_table::update_data_size_and_addralign): Use
	Stub_table::reloc_stubs_size_ and Stub_table::reloc_stubs_addralign_
	instead of going over all reloc stubs.
 	(Stub_table::finalize_stubs): Do not assign reloc stub offsets.
	* stringpool.cc (Stringpool_template::Stringpool_template): Initialize
	Stringpool_template::offset_ to size of Stringpool_char.
 	(Stringpool_template::new_key_offset): Remove code to initialize
	Stringpool_template::offset_.
	* stringpool.h (Stringpool_template::set_no_zero_null): Set
	Stringpool_template::offset_ to zero.
@
text
@d35 22
a290 4
  // Return the length of a string in units of Stringpool_char.
  static size_t
  string_length(const Stringpool_char*);

@


1.24
log
@2010-03-15  Doug Kwan  <dougkwan@@google.com>

	* stringpool.cc (Stringpool_template::Stringpool_template): Initialize
	offset_.
	(Stringpool_template::new_key_offset): New method.
	(Stringpool_template::add_string): Assign offsets when adding new
	strings.
	(Stringpool_template::set_string_offsets): Do not set string offsets
	when not optimizing.
	* stringpool.h (Chunked_vector::Chunked_vector): Initialize data
	member size_.
   	(Chunked_vector::clear): Clear size_.
   	(Chunked_vector::reserve): Call reserve method of all Element_vectors.
   	(Chunked_vector::size): Return size_.
   	(Chunked_vector::push_back): Use size_ to find insert position.
	(Chunked_vector::size_): New data member.
	(Stringpool_template::set_no_zero_null): Assert string set is empty.
	(Stringpool_template::new_key_offset): New method declaration.
	(Stringpool_template::offset_): New data member.
@
text
@d181 2
a182 1
    gold_assert(this->string_set_.empty());
d184 1
@


1.23
log
@	PR 10133
	* stringpool.h (class Stringpool_template): Add optimize_ field.
	(Stringpool_template::set_optimize): New function.
	* stringpool.cc (Stringpool_template::Stringpool_template):
	Initialize optimize_ field.
	(Stringpool_template::set_string_offsets): Test local optimize
	fild rather than parameter.
	* layout.cc (Layout::Layout): Call set_optimize on the section
	name stringpool.
@
text
@d80 1
a80 1
    : chunks_()
d86 4
a89 1
  { this->chunks_.clear(); }
d95 1
a95 2
    n += chunk_size - 1;
    while (n >= chunk_size)
d97 6
a102 3
	this->chunks_.push_back(Element_vector());
	this->chunks_.back().reserve(chunk_size);
	n -= chunk_size;
d109 1
a109 7
  {
    if (this->chunks_.empty())
      return 0;
    else
      return ((this->chunks_.size() - 1) * chunk_size
	      + this->chunks_.back().size());
  }
d115 2
a116 1
    if (this->chunks_.empty() || this->chunks_.back().size() == chunk_size)
d120 1
d122 2
a123 1
    this->chunks_.back().push_back(element);
d142 1
d180 4
a183 1
  { this->zero_null_ = false; }
d291 4
d385 2
@


1.22
log
@	* stringpool.cc (Stringpool_template::add_with_length): Set key to
	array size plus one.
	(Stringpool_template::set_string_offsets): Subtract one from key
	before using it as an array index.
	(Stringpool_template::get_offset_with_length): Likewise.
	(Stringpool_template::write_to_buffer): Likewise.
	* stringpool.h (Stringpool_template::get_offset_from_key):
	Likewise.
@
text
@d179 6
d373 2
@


1.21
log
@Update copyright years.  Update language files.
@
text
@d223 2
a224 2
    gold_assert(k < this->key_to_offset_.size());
    return this->key_to_offset_[k];
@


1.20
log
@Move Stringpool offsets into a chunked_vector indexed by keys.
@
text
@d3 1
a3 1
// Copyright 2006, 2007 Free Software Foundation, Inc.
@


1.19
log
@Use string length when available when calling Stringpool.  Compare
pointers first when looking up Stringpool entries.
@
text
@d25 1
d60 3
a62 2
// offset of any string in the stringpool in the string table, and you
// can write the resulting string table to an output file.
d70 73
d219 8
a274 2
    // Buffer index.
    unsigned int index;
d281 1
a281 1
  add_string(const Stringpool_char*, size_t, Key*);
d333 1
a333 3
  // The hash table is a map from strings to a pair of Key and string
  // table offsets.  We only use the offsets if we turn this into an
  // string table section.
d335 1
a335 1
  typedef std::pair<Key, section_offset_type> Hashval;
d350 4
d359 2
a364 4
  // Next Stringdata index.
  unsigned int next_index_;
  // Next key value for a string we don't copy.
  int next_uncopied_key_;
@


1.18
log
@Add section_size_type and section_offset_type, use them to replace a
lot of instances of off_t.
@
text
@d111 2
a112 1
  // Add the prefix of length LEN of string S to the pool.
d114 1
a114 1
  add_prefix(const Stringpool_char* s, size_t len, Key* pkey);
d137 6
a142 1
  { return this->get_offset(s.c_str()); }
d227 1
a227 1
    Hashkey(const Stringpool_char* s)
@


1.17
log
@From Craig Silverstein: size hash tables to avoid resizing.
@
text
@d130 1
a130 1
  off_t
d134 1
a134 1
  off_t
d140 1
a140 1
  off_t
d156 1
a156 1
  write_to_buffer(unsigned char* buffer, size_t buffer_size);
d250 1
a250 1
  typedef std::pair<Key, off_t> Hashval;
d273 1
a273 1
  off_t strtab_size_;
@


1.16
log
@Rework Stringpool to not compute the hash code twice when adding a new
string.
@
text
@d91 6
@


1.15
log
@Stringpool stats.  Also make Symbol_table support functions inline.
@
text
@d164 9
d188 30
a217 1
  add_string(const Stringpool_char*, Key*);
d219 7
a225 1
  // Hash function.
d229 2
a230 1
    operator()(const Stringpool_char*) const;
d237 1
a237 1
    operator()(const Stringpool_char* p1, const Stringpool_char* p2) const;
d240 5
a244 4
  // Return whether s1 is a suffix of s2.
  static bool
  is_suffix(const Stringpool_char* s1, size_t len1,
            const Stringpool_char* s2, size_t len2);
d246 1
a246 14
  // The hash table is a map from string names to a pair of Key and
  // string table offsets.  We only use the offsets if we turn this
  // into an string table section.

  typedef std::pair<Key, off_t> Val;

#ifdef HAVE_TR1_UNORDERED_SET
  typedef Unordered_map<const Stringpool_char*, Val, Stringpool_hash,
			Stringpool_eq,
			std::allocator<std::pair<const Stringpool_char* const,
						 Val> >,
			true> String_set_type;
#else
  typedef Unordered_map<const Stringpool_char*, Val, Stringpool_hash,
a247 1
#endif
d249 3
a251 11
  // Comparison routine used when sorting into a string table.  We
  // store string-sizes in the sort-vector so we don't have to
  // recompute them log(n) times as we sort.
  struct Stringpool_sort_info
  {
    typename String_set_type::iterator it;
    size_t string_length;
    Stringpool_sort_info(typename String_set_type::iterator i, size_t s)
      : it(i), string_length(s)
    { }
  };
@


1.14
log
@Compress all debug sections.
@
text
@d152 4
@


1.13
log
@From Craig Silverstein: Add support for compressing .debug_str section.
@
text
@d150 1
a150 1
  write_to_buffer(char* buffer, size_t buffer_size);
@


1.12
log
@Add an option for Stringpools to not copy strings.
@
text
@d87 4
d145 6
@


1.11
log
@Add licensing text to every source file.
@
text
@d50 3
a52 2
// When you add a string to a Stringpool, Stringpool will make a copy
// of it.  Thus there is no need to keep a copy elsewhere.
d95 3
a97 2
  // pointer to the string in the pool.  If PKEY is not NULL, this
  // sets *PKEY to the key for the string.
d99 1
a99 6
  add(const Stringpool_char* s, Key* pkey);

  // Add the string S to the pool.
  const Stringpool_char*
  add(const std::basic_string<Stringpool_char>& s, Key* pkey)
  { return this->add(s.c_str(), pkey); }
d103 1
a103 1
  add(const Stringpool_char* s, size_t len, Key* pkey);
d232 2
@


1.10
log
@Set Stringpool zero_null option via a call, not a default constructor
argument.
@
text
@d3 20
@


1.9
log
@Note that a Stringpool keeps a copy of a string.
@
text
@d61 2
a62 5
  // Create a Stringpool.  ZERO_NULL is true if we should reserve
  // offset 0 to hold the empty string when converting the stringpool
  // to a string table.  ZERO_NULL should be true if you want a proper
  // ELF SHT_STRTAB section.
  Stringpool_template(bool zero_null = true);
d65 7
@


1.8
log
@Better comments for Stringpool.
@
text
@d30 3
@


1.7
log
@Compute string lengths before sorting.  From Craig Silverstein.
@
text
@a5 3
// Stringpool
//   Manage a pool of unique strings.

d14 35
d53 3
a55 5
  // The type of a key into the stringpool.  A key value will always
  // be the same during any run of the linker.  The string pointers
  // may change when using address space randomization.  We use key
  // values in order to get repeatable runs when the value is inserted
  // into an unordered hash table.  Zero is never a valid key.
d59 3
a61 1
  // offset 0 to hold the empty string.
d66 3
a68 3
  // Add a string to the pool.  This returns a canonical permanent
  // pointer to the string.  If PKEY is not NULL, this sets *PKEY to
  // the key for the string.
d70 1
a70 1
  add(const Stringpool_char*, Key* pkey);
d72 1
d77 1
a77 1
  // Add the prefix of a string to the pool.
d79 1
a79 1
  add(const Stringpool_char*, size_t, Key* pkey);
d81 3
a83 2
  // If a string is present, return the canonical string.  Otherwise,
  // return NULL.  If PKEY is not NULL, set *PKEY to the key.
d85 1
a85 1
  find(const Stringpool_char*, Key* pkey) const;
d87 3
a89 2
  // Turn the stringpool into an ELF strtab: determine the offsets of
  // all the strings.
d93 3
a95 2
  // Get the offset of a string in an ELF strtab.  This returns the
  // offset in bytes, not characters.
d97 1
a97 1
  get_offset(const Stringpool_char*) const;
d99 1
d104 2
a105 2
  // Get the size of the ELF strtab.  This returns the number of
  // bytes, not characters.
d113 2
a114 1
  // Write the strtab into the output file at the specified offset.
d122 1
a122 1
  // Return the length of a string.
d143 1
d150 1
d163 2
a164 2
  // ELF strtab offsets.  We only use the offsets if we turn this into
  // an ELF strtab section.
d179 1
a179 1
  // Comparison routine used when sorting into an ELF strtab.  We
d204 1
a204 1
  // Size of ELF strtab.
@


1.6
log
@Add support for SHF_MERGE sections.
@
text
@d119 2
a120 1
  is_suffix(const Stringpool_char* s1, const Stringpool_char* s2);
d139 11
a149 1
  // Comparison routine used when sorting into an ELF strtab.
d154 1
a154 2
    operator()(typename String_set_type::iterator,
	       typename String_set_type::iterator) const;
@


1.5
log
@Hash tables, dynamic section, i386 PLT, gold_assert.
@
text
@d17 2
a18 1
class Stringpool
d28 3
a30 1
  Stringpool();
d32 1
a32 1
  ~Stringpool();
d37 2
a38 2
  const char*
  add(const char*, Key* pkey);
d40 2
a41 2
  const char*
  add(const std::string& s, Key* pkey)
d45 2
a46 2
  const char*
  add(const char *, size_t, Key* pkey);
d50 2
a51 2
  const char*
  find(const char*, Key* pkey) const;
d58 2
a59 1
  // Get the offset of a string in an ELF strtab.
d61 1
a61 1
  get_offset(const char*) const;
d64 1
a64 1
  get_offset(const std::string& s) const
d67 2
a68 1
  // Get the size of the ELF strtab.
d81 6
a86 2
  Stringpool(const Stringpool&);
  Stringpool& operator=(const Stringpool&);
d102 2
a103 2
  const char*
  add_string(const char*, Key*);
d108 1
a108 1
    operator()(const char*) const;
d114 1
a114 2
    operator()(const char* p1, const char* p2) const
    { return strcmp(p1, p2) == 0; }
d118 2
a119 1
  static bool is_suffix(const char* s1, const char* s2);
d128 1
a128 1
  typedef Unordered_map<const char*, Val, Stringpool_hash,
d130 2
a131 1
			std::allocator<std::pair<const char* const, Val> >,
d134 1
a134 1
  typedef Unordered_map<const char*, Val, Stringpool_hash,
d143 2
a144 2
    operator()(String_set_type::iterator,
	       String_set_type::iterator) const;
d158 2
d161 3
@


1.4
log
@Rework stringpool and hash tables so that we always generate the same
output regardless of randomize_va_space.
@
text
@d66 4
a69 1
  { return this->strtab_size_; }
@


1.3
log
@Snapshot.  Now able to produce a minimal executable which actually
runs.
@
text
@d20 7
d32 2
a33 1
  // pointer to the string.
d35 1
a35 1
  add(const char*);
d38 2
a39 2
  add(const std::string& s)
  { return this->add(s.c_str()); }
d43 1
a43 1
  add(const char *, size_t);
d46 1
a46 1
  // return NULL.
d48 1
a48 1
  find(const char*) const;
d55 1
a55 1
  // Get the offset of a string.
d83 2
d91 1
a91 1
  add_string(const char*);
d109 5
a113 2
  // The hash table is a map from string names to offsets.  We only
  // use the offsets if we turn this into an ELF strtab section.
d116 1
a116 1
  typedef Unordered_map<const char*, off_t, Stringpool_hash,
d118 1
a118 1
			std::allocator<std::pair<const char* const, off_t> >,
d121 1
a121 1
  typedef Unordered_map<const char*, off_t, Stringpool_hash,
d134 4
d139 3
a141 1
  std::list<Stringdata*> strings_;
d143 2
@


1.2
log
@g++ 3.2.2 portability fixes.
@
text
@d15 2
d26 2
a27 1
  const char* add(const char*);
d29 2
a30 1
  const char* add(const std::string& s)
d34 29
a62 1
  const char* add(const char *, size_t);
d68 2
a69 1
  struct stringdata
d79 3
a81 1
  const char* add_string(const char*);
d96 6
d103 3
a105 2
  typedef Unordered_set<const char*, Stringpool_hash, Stringpool_eq,
			std::allocator<const char*>,
d108 2
a109 2
  typedef Unordered_set<const char*, Stringpool_hash, Stringpool_eq,
			std::allocator<const char*> > String_set_type;
d112 9
d122 2
a123 1
  std::list<stringdata*> strings_;
@


1.1
log
@Another snapshot of the current state of the sources.  Gets to the
point of symbol resolution and can now issue a multiple definition
error.  Also added target selection infrastructure.
@
text
@d61 1
d65 5
@

