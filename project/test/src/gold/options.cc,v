head	1.120;
access;
symbols
	binutils-2_24-branch:1.120.0.2
	binutils-2_24-branchpoint:1.120
	binutils-2_21_1:1.106
	binutils-2_23_2:1.118
	binutils-2_23_1:1.118
	binutils-2_23:1.118
	binutils-2_23-branch:1.118.0.2
	binutils-2_23-branchpoint:1.118
	binutils-2_22_branch:1.114.0.4
	binutils-2_22:1.114
	binutils-2_22-branch:1.114.0.2
	binutils-2_22-branchpoint:1.114
	binutils-2_21:1.106
	binutils-2_21-branch:1.106.0.2
	binutils-2_21-branchpoint:1.106
	binutils-2_20_1:1.89.2.1
	binutils-2_20:1.89.2.1
	binutils-arc-20081103-branch:1.78.0.4
	binutils-arc-20081103-branchpoint:1.78
	binutils-2_20-branch:1.89.0.2
	binutils-2_20-branchpoint:1.89
	dje-cgen-play1-branch:1.88.0.2
	dje-cgen-play1-branchpoint:1.88
	arc-20081103-branch:1.78.0.2
	arc-20081103-branchpoint:1.78
	binutils-2_19_1:1.76
	binutils-2_19:1.76
	binutils-2_19-branch:1.76.0.2
	binutils-2_19-branchpoint:1.76
	binutils_latest_snapshot:1.120
	added-to-binutils:1.63;
locks; strict;
comment	@// @;


1.120
date	2013.05.10.22.33.35;	author roland;	state Exp;
branches;
next	1.119;

1.119
date	2013.03.08.22.34.46;	author ian;	state Exp;
branches;
next	1.118;

1.118
date	2012.02.15.00.56.16;	author ccoutant;	state Exp;
branches
	1.118.2.1;
next	1.117;

1.117
date	2011.11.03.04.32.01;	author ian;	state Exp;
branches;
next	1.116;

1.116
date	2011.10.03.17.01.43;	author dnovillo;	state Exp;
branches;
next	1.115;

1.115
date	2011.09.26.23.42.06;	author ccoutant;	state Exp;
branches;
next	1.114;

1.114
date	2011.07.11.16.19.51;	author ian;	state Exp;
branches
	1.114.2.1;
next	1.113;

1.113
date	2011.07.06.22.15.12;	author ccoutant;	state Exp;
branches;
next	1.112;

1.112
date	2011.07.06.21.19.31;	author ccoutant;	state Exp;
branches;
next	1.111;

1.111
date	2011.07.03.04.46.56;	author ian;	state Exp;
branches;
next	1.110;

1.110
date	2011.06.28.23.12.31;	author ian;	state Exp;
branches;
next	1.109;

1.109
date	2011.04.12.00.44.48;	author ccoutant;	state Exp;
branches;
next	1.108;

1.108
date	2011.03.30.21.07.13;	author ccoutant;	state Exp;
branches;
next	1.107;

1.107
date	2010.12.14.19.03.30;	author rwild;	state Exp;
branches;
next	1.106;

1.106
date	2010.10.14.22.10.22;	author ccoutant;	state Exp;
branches;
next	1.105;

1.105
date	2010.08.27.08.50.05;	author nickc;	state Exp;
branches;
next	1.104;

1.104
date	2010.08.25.08.36.54;	author nickc;	state Exp;
branches;
next	1.103;

1.103
date	2010.05.18.18.08.03;	author espindola;	state Exp;
branches;
next	1.102;

1.102
date	2010.04.07.21.42.22;	author dougkwan;	state Exp;
branches;
next	1.101;

1.101
date	2010.03.22.14.18.24;	author espindola;	state Exp;
branches;
next	1.100;

1.100
date	2010.02.27.00.36.49;	author dougkwan;	state Exp;
branches;
next	1.99;

1.99
date	2010.01.22.19.43.00;	author dougkwan;	state Exp;
branches;
next	1.98;

1.98
date	2010.01.06.22.37.18;	author ian;	state Exp;
branches;
next	1.97;

1.97
date	2009.12.30.22.35.48;	author ian;	state Exp;
branches;
next	1.96;

1.96
date	2009.12.29.23.12.15;	author tmsriram;	state Exp;
branches;
next	1.95;

1.95
date	2009.12.22.01.33.43;	author tmsriram;	state Exp;
branches;
next	1.94;

1.94
date	2009.10.14.05.25.01;	author ian;	state Exp;
branches;
next	1.93;

1.93
date	2009.10.13.21.17.43;	author tmsriram;	state Exp;
branches;
next	1.92;

1.92
date	2009.10.10.07.39.04;	author cgd;	state Exp;
branches;
next	1.91;

1.91
date	2009.10.09.23.18.19;	author dougkwan;	state Exp;
branches;
next	1.90;

1.90
date	2009.09.18.20.02.21;	author csilvers;	state Exp;
branches;
next	1.89;

1.89
date	2009.08.25.01.10.48;	author ccoutant;	state Exp;
branches
	1.89.2.1;
next	1.88;

1.88
date	2009.06.24.05.01.17;	author ian;	state Exp;
branches;
next	1.87;

1.87
date	2009.06.23.06.39.46;	author ian;	state Exp;
branches;
next	1.86;

1.86
date	2009.05.26.22.52.56;	author dougkwan;	state Exp;
branches;
next	1.85;

1.85
date	2009.05.19.22.14.17;	author ccoutant;	state Exp;
branches;
next	1.84;

1.84
date	2009.03.06.23.12.37;	author ccoutant;	state Exp;
branches;
next	1.83;

1.83
date	2009.02.28.04.39.57;	author ian;	state Exp;
branches;
next	1.82;

1.82
date	2009.02.06.23.49.43;	author ian;	state Exp;
branches;
next	1.81;

1.81
date	2009.01.23.17.05.16;	author cgf;	state Exp;
branches;
next	1.80;

1.80
date	2008.12.05.21.34.50;	author ccoutant;	state Exp;
branches;
next	1.79;

1.79
date	2008.11.06.07.23.31;	author csilvers;	state Exp;
branches;
next	1.78;

1.78
date	2008.10.07.23.40.21;	author ccoutant;	state Exp;
branches;
next	1.77;

1.77
date	2008.09.19.22.54.57;	author ccoutant;	state Exp;
branches;
next	1.76;

1.76
date	2008.08.28.14.51.04;	author kvanhees;	state Exp;
branches;
next	1.75;

1.75
date	2008.07.22.23.01.20;	author ian;	state Exp;
branches;
next	1.74;

1.74
date	2008.05.28.20.48.16;	author ian;	state Exp;
branches;
next	1.73;

1.73
date	2008.05.21.21.37.44;	author ian;	state Exp;
branches;
next	1.72;

1.72
date	2008.05.06.20.40.33;	author ian;	state Exp;
branches;
next	1.71;

1.71
date	2008.04.17.22.45.47;	author ccoutant;	state Exp;
branches;
next	1.70;

1.70
date	2008.04.17.20.23.59;	author davem;	state Exp;
branches;
next	1.69;

1.69
date	2008.04.11.20.28.34;	author ian;	state Exp;
branches;
next	1.68;

1.68
date	2008.04.09.00.48.13;	author ian;	state Exp;
branches;
next	1.67;

1.67
date	2008.03.26.23.36.46;	author ian;	state Exp;
branches;
next	1.66;

1.66
date	2008.03.25.23.48.25;	author ian;	state Exp;
branches;
next	1.65;

1.65
date	2008.03.25.21.39.01;	author ian;	state Exp;
branches;
next	1.64;

1.64
date	2008.03.24.03.48.29;	author ian;	state Exp;
branches;
next	1.63;

1.63
date	2008.03.07.07.00.48;	author iant;	state Exp;
branches;
next	1.62;

1.62
date	2008.03.06.05.51.42;	author iant;	state Exp;
branches;
next	1.61;

1.61
date	2008.03.06.00.53.37;	author iant;	state Exp;
branches;
next	1.60;

1.60
date	2008.03.04.23.10.38;	author iant;	state Exp;
branches;
next	1.59;

1.59
date	2008.03.04.18.21.43;	author iant;	state Exp;
branches;
next	1.58;

1.58
date	2008.02.28.20.35.39;	author iant;	state Exp;
branches;
next	1.57;

1.57
date	2008.02.28.00.18.24;	author iant;	state Exp;
branches;
next	1.56;

1.56
date	2008.02.27.22.38.18;	author iant;	state Exp;
branches;
next	1.55;

1.55
date	2008.02.26.22.48.08;	author iant;	state Exp;
branches;
next	1.54;

1.54
date	2008.02.26.22.10.32;	author iant;	state Exp;
branches;
next	1.53;

1.53
date	2008.02.26.21.45.30;	author iant;	state Exp;
branches;
next	1.52;

1.52
date	2008.02.13.22.47.28;	author iant;	state Exp;
branches;
next	1.51;

1.51
date	2008.02.13.02.44.50;	author iant;	state Exp;
branches;
next	1.50;

1.50
date	2008.02.08.07.06.58;	author iant;	state Exp;
branches;
next	1.49;

1.49
date	2008.02.07.07.33.46;	author iant;	state Exp;
branches;
next	1.48;

1.48
date	2008.02.07.01.51.25;	author iant;	state Exp;
branches;
next	1.47;

1.47
date	2008.02.06.08.13.50;	author iant;	state Exp;
branches;
next	1.46;

1.46
date	2008.01.23.01.31.13;	author iant;	state Exp;
branches;
next	1.45;

1.45
date	2008.01.15.23.41.28;	author iant;	state Exp;
branches;
next	1.44;

1.44
date	2008.01.09.19.57.45;	author iant;	state Exp;
branches;
next	1.43;

1.43
date	2008.01.07.05.19.02;	author iant;	state Exp;
branches;
next	1.42;

1.42
date	2008.01.06.00.47.10;	author iant;	state Exp;
branches;
next	1.41;

1.41
date	2008.01.04.05.35.24;	author iant;	state Exp;
branches;
next	1.40;

1.40
date	2007.12.08.03.05.27;	author iant;	state Exp;
branches;
next	1.39;

1.39
date	2007.11.30.00.35.27;	author iant;	state Exp;
branches;
next	1.38;

1.38
date	2007.11.22.00.05.51;	author iant;	state Exp;
branches;
next	1.37;

1.37
date	2007.11.15.23.03.45;	author iant;	state Exp;
branches;
next	1.36;

1.36
date	2007.11.15.01.12.55;	author iant;	state Exp;
branches;
next	1.35;

1.35
date	2007.11.14.16.53.24;	author iant;	state Exp;
branches;
next	1.34;

1.34
date	2007.11.14.09.39.13;	author iant;	state Exp;
branches;
next	1.33;

1.33
date	2007.11.14.07.34.53;	author iant;	state Exp;
branches;
next	1.32;

1.32
date	2007.11.14.01.03.01;	author iant;	state Exp;
branches;
next	1.31;

1.31
date	2007.10.30.06.27.03;	author iant;	state Exp;
branches;
next	1.30;

1.30
date	2007.10.27.00.29.34;	author iant;	state Exp;
branches;
next	1.29;

1.29
date	2007.10.26.18.03.24;	author iant;	state Exp;
branches;
next	1.28;

1.28
date	2007.10.23.05.05.48;	author iant;	state Exp;
branches;
next	1.27;

1.27
date	2007.10.22.18.04.43;	author iant;	state Exp;
branches;
next	1.26;

1.26
date	2007.10.18.23.20.53;	author iant;	state Exp;
branches;
next	1.25;

1.25
date	2007.10.17.06.24.50;	author iant;	state Exp;
branches;
next	1.24;

1.24
date	2007.10.16.22.38.35;	author iant;	state Exp;
branches;
next	1.23;

1.23
date	2007.10.15.03.33.03;	author iant;	state Exp;
branches;
next	1.22;

1.22
date	2007.10.14.06.49.14;	author iant;	state Exp;
branches;
next	1.21;

1.21
date	2007.10.12.05.51.25;	author iant;	state Exp;
branches;
next	1.20;

1.20
date	2007.10.10.19.30.39;	author iant;	state Exp;
branches;
next	1.19;

1.19
date	2007.10.10.19.02.56;	author iant;	state Exp;
branches;
next	1.18;

1.18
date	2007.10.07.18.06.27;	author iant;	state Exp;
branches;
next	1.17;

1.17
date	2007.10.04.05.49.04;	author iant;	state Exp;
branches;
next	1.16;

1.16
date	2007.10.02.21.24.41;	author iant;	state Exp;
branches;
next	1.15;

1.15
date	2007.09.22.21.02.10;	author iant;	state Exp;
branches;
next	1.14;

1.14
date	2007.09.21.05.43.33;	author iant;	state Exp;
branches;
next	1.13;

1.13
date	2007.09.19.23.50.56;	author iant;	state Exp;
branches;
next	1.12;

1.12
date	2007.09.06.23.37.53;	author iant;	state Exp;
branches;
next	1.11;

1.11
date	2007.08.22.17.07.36;	author iant;	state Exp;
branches;
next	1.10;

1.10
date	2007.08.22.05.06.38;	author iant;	state Exp;
branches;
next	1.9;

1.9
date	2007.08.21.23.37.56;	author iant;	state Exp;
branches;
next	1.8;

1.8
date	2007.08.21.20.37.32;	author iant;	state Exp;
branches;
next	1.7;

1.7
date	2006.11.29.17.56.40;	author iant;	state Exp;
branches;
next	1.6;

1.6
date	2006.11.14.19.21.05;	author iant;	state Exp;
branches;
next	1.5;

1.5
date	2006.11.03.18.48.03;	author iant;	state Exp;
branches;
next	1.4;

1.4
date	2006.11.03.18.26.10;	author iant;	state Exp;
branches;
next	1.3;

1.3
date	2006.10.20.20.40.49;	author iant;	state Exp;
branches;
next	1.2;

1.2
date	2006.09.29.19.58.17;	author iant;	state Exp;
branches;
next	1.1;

1.1
date	2006.08.04.23.10.59;	author iant;	state Exp;
branches;
next	;

1.118.2.1
date	2013.05.10.22.35.30;	author roland;	state Exp;
branches;
next	;

1.114.2.1
date	2011.12.19.21.14.39;	author ian;	state Exp;
branches;
next	;

1.89.2.1
date	2009.10.16.05.51.17;	author ian;	state Exp;
branches;
next	;


desc
@@


1.120
log
@gold/
	* options.h (General_options): Add --rosegment-gap option.
	* options.cc (finalize): --rosegment-gap implies --rosegment.
	* layout.cc (set_segment_offsets): Let user option override
	target->rosegment_gap().
@
text
@// options.c -- handle command line options for gold

// Copyright 2006, 2007, 2008, 2009, 2010, 2011, 2013
// Free Software Foundation, Inc.
// Written by Ian Lance Taylor <iant@@google.com>.

// This file is part of gold.

// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,
// MA 02110-1301, USA.

#include "gold.h"

#include <cerrno>
#include <cstdlib>
#include <cstring>
#include <fstream>
#include <vector>
#include <iostream>
#include <sys/stat.h>
#include "filenames.h"
#include "libiberty.h"
#include "demangle.h"
#include "../bfd/bfdver.h"

#include "debug.h"
#include "script.h"
#include "target-select.h"
#include "options.h"
#include "plugin.h"

namespace gold
{

General_options
Position_dependent_options::default_options_;

namespace options
{

// This flag is TRUE if we should register the command-line options as they
// are constructed.  It is set after construction of the options within
// class Position_dependent_options.
static bool ready_to_register = false;

// This global variable is set up as General_options is constructed.
static std::vector<const One_option*> registered_options;

// These are set up at the same time -- the variables that accept one
// dash, two, or require -z.  A single variable may be in more than
// one of these data structures.
typedef Unordered_map<std::string, One_option*> Option_map;
static Option_map* long_options = NULL;
static One_option* short_options[128];

void
One_option::register_option()
{
  if (!ready_to_register)
    return;

  registered_options.push_back(this);

  // We can't make long_options a static Option_map because we can't
  // guarantee that will be initialized before register_option() is
  // first called.
  if (long_options == NULL)
    long_options = new Option_map;

  // TWO_DASHES means that two dashes are preferred, but one is ok too.
  if (!this->longname.empty())
    (*long_options)[this->longname] = this;

  const int shortname_as_int = static_cast<int>(this->shortname);
  gold_assert(shortname_as_int >= 0 && shortname_as_int < 128);
  if (this->shortname != '\0')
    {
      gold_assert(short_options[shortname_as_int] == NULL);
      short_options[shortname_as_int] = this;
    }
}

void
One_option::print() const
{
  bool comma = false;
  printf("  ");
  int len = 2;
  if (this->shortname != '\0')
    {
      len += printf("-%c", this->shortname);
      if (this->helparg)
	{
	  // -z takes long-names only.
	  gold_assert(this->dashes != DASH_Z);
	  len += printf(" %s", gettext(this->helparg));
	}
      comma = true;
    }
  if (!this->longname.empty()
      && !(this->longname[0] == this->shortname
	   && this->longname[1] == '\0'))
    {
      if (comma)
	len += printf(", ");
      switch (this->dashes)
	{
	case options::ONE_DASH: case options::EXACTLY_ONE_DASH:
	  len += printf("-");
	  break;
	case options::TWO_DASHES: case options::EXACTLY_TWO_DASHES:
	  len += printf("--");
	  break;
	case options::DASH_Z:
	  len += printf("-z ");
	  break;
	default:
	  gold_unreachable();
	}
      len += printf("%s", this->longname.c_str());
      if (this->helparg)
	{
	  // For most options, we print "--frob FOO".  But for -z
	  // we print "-z frob=FOO".
	  len += printf("%c%s", this->dashes == options::DASH_Z ? '=' : ' ',
			gettext(this->helparg));
	}
    }

  if (len >= 30)
    {
      printf("\n");
      len = 0;
    }
  for (; len < 30; ++len)
    std::putchar(' ');

  // TODO: if we're boolean, add " (default)" when appropriate.
  printf("%s\n", gettext(this->helpstring));
}

void
help()
{
  printf(_("Usage: %s [options] file...\nOptions:\n"), gold::program_name);

  std::vector<const One_option*>::const_iterator it;
  for (it = registered_options.begin(); it != registered_options.end(); ++it)
    (*it)->print();

  // config.guess and libtool.m4 look in ld --help output for the
  // string "supported targets".
  printf(_("%s: supported targets:"), gold::program_name);
  std::vector<const char*> supported_names;
  gold::supported_target_names(&supported_names);
  for (std::vector<const char*>::const_iterator p = supported_names.begin();
       p != supported_names.end();
       ++p)
    printf(" %s", *p);
  printf("\n");

  printf(_("%s: supported emulations:"), gold::program_name);
  supported_names.clear();
  gold::supported_emulation_names(&supported_names);
  for (std::vector<const char*>::const_iterator p = supported_names.begin();
       p != supported_names.end();
       ++p)
    printf(" %s", *p);
  printf("\n");

  // REPORT_BUGS_TO is defined in bfd/bfdver.h.
  const char* report = REPORT_BUGS_TO;
  if (*report != '\0')
    printf(_("Report bugs to %s\n"), report);
}

// For bool, arg will be NULL (boolean options take no argument);
// we always just set to true.
void
parse_bool(const char*, const char*, bool* retval)
{
  *retval = true;
}

void
parse_uint(const char* option_name, const char* arg, int* retval)
{
  char* endptr;
  *retval = strtol(arg, &endptr, 0);
  if (*endptr != '\0' || *retval < 0)
    gold_fatal(_("%s: invalid option value (expected an integer): %s"),
	       option_name, arg);
}

void
parse_int(const char* option_name, const char* arg, int* retval)
{
  char* endptr;
  *retval = strtol(arg, &endptr, 0);
  if (*endptr != '\0')
    gold_fatal(_("%s: invalid option value (expected an integer): %s"),
	       option_name, arg);
}

void
parse_uint64(const char* option_name, const char* arg, uint64_t* retval)
{
  char* endptr;
  *retval = strtoull(arg, &endptr, 0);
  if (*endptr != '\0')
    gold_fatal(_("%s: invalid option value (expected an integer): %s"),
	       option_name, arg);
}

void
parse_double(const char* option_name, const char* arg, double* retval)
{
  char* endptr;
  *retval = strtod(arg, &endptr);
  if (*endptr != '\0')
    gold_fatal(_("%s: invalid option value "
		 "(expected a floating point number): %s"),
	       option_name, arg);
}

void
parse_percent(const char* option_name, const char* arg, double* retval)
{
  char* endptr;
  *retval = strtod(arg, &endptr) / 100.0;
  if (*endptr != '\0')
    gold_fatal(_("%s: invalid option value "
		 "(expected a floating point number): %s"),
	       option_name, arg);
}

void
parse_string(const char* option_name, const char* arg, const char** retval)
{
  if (*arg == '\0')
    gold_fatal(_("%s: must take a non-empty argument"), option_name);
  *retval = arg;
}

void
parse_optional_string(const char*, const char* arg, const char** retval)
{
  *retval = arg;
}

void
parse_dirlist(const char*, const char* arg, Dir_list* retval)
{
  retval->push_back(Search_directory(arg, false));
}

void
parse_set(const char*, const char* arg, String_set* retval)
{
  retval->insert(std::string(arg));
}

void
parse_choices(const char* option_name, const char* arg, const char** retval,
	      const char* choices[], int num_choices)
{
  for (int i = 0; i < num_choices; i++)
    if (strcmp(choices[i], arg) == 0)
      {
	*retval = arg;
	return;
      }

  // If we get here, the user did not enter a valid choice, so we die.
  std::string choices_list;
  for (int i = 0; i < num_choices; i++)
    {
      choices_list += choices[i];
      if (i != num_choices - 1)
	choices_list += ", ";
    }
  gold_fatal(_("%s: must take one of the following arguments: %s"),
	     option_name, choices_list.c_str());
}

} // End namespace options.

// Define the handler for "special" options (set via DEFINE_special).

void
General_options::parse_help(const char*, const char*, Command_line*)
{
  options::help();
  ::exit(EXIT_SUCCESS);
}

void
General_options::parse_version(const char* opt, const char*, Command_line*)
{
  bool print_short = (opt[0] == '-' && opt[1] == 'v');
  gold::print_version(print_short);
  this->printed_version_ = true;
  if (!print_short)
    ::exit(EXIT_SUCCESS);
}

void
General_options::parse_V(const char*, const char*, Command_line*)
{
  gold::print_version(true);
  this->printed_version_ = true;

  printf(_("  Supported targets:\n"));
  std::vector<const char*> supported_names;
  gold::supported_target_names(&supported_names);
  for (std::vector<const char*>::const_iterator p = supported_names.begin();
       p != supported_names.end();
       ++p)
    printf("   %s\n", *p);

  printf(_("  Supported emulations:\n"));
  supported_names.clear();
  gold::supported_emulation_names(&supported_names);
  for (std::vector<const char*>::const_iterator p = supported_names.begin();
       p != supported_names.end();
       ++p)
    printf("   %s\n", *p);
}

void
General_options::parse_defsym(const char*, const char* arg,
			      Command_line* cmdline)
{
  cmdline->script_options().define_symbol(arg);
}

void
General_options::parse_incremental(const char*, const char*,
				   Command_line*)
{
  this->incremental_mode_ = INCREMENTAL_AUTO;
}

void
General_options::parse_no_incremental(const char*, const char*,
				      Command_line*)
{
  this->incremental_mode_ = INCREMENTAL_OFF;
}

void
General_options::parse_incremental_full(const char*, const char*,
					Command_line*)
{
  this->incremental_mode_ = INCREMENTAL_FULL;
}

void
General_options::parse_incremental_update(const char*, const char*,
					  Command_line*)
{
  this->incremental_mode_ = INCREMENTAL_UPDATE;
}

void
General_options::parse_incremental_changed(const char*, const char*,
					   Command_line*)
{
  this->implicit_incremental_ = true;
  this->incremental_disposition_ = INCREMENTAL_CHANGED;
}

void
General_options::parse_incremental_unchanged(const char*, const char*,
					     Command_line*)
{
  this->implicit_incremental_ = true;
  this->incremental_disposition_ = INCREMENTAL_UNCHANGED;
}

void
General_options::parse_incremental_unknown(const char*, const char*,
					   Command_line*)
{
  this->implicit_incremental_ = true;
  this->incremental_disposition_ = INCREMENTAL_CHECK;
}

void
General_options::parse_incremental_startup_unchanged(const char*, const char*,
						     Command_line*)
{
  this->implicit_incremental_ = true;
  this->incremental_startup_disposition_ = INCREMENTAL_UNCHANGED;
}

void
General_options::parse_library(const char*, const char* arg,
			       Command_line* cmdline)
{
  Input_file_argument::Input_file_type type;
  const char* name;
  if (arg[0] == ':')
    {
      type = Input_file_argument::INPUT_FILE_TYPE_SEARCHED_FILE;
      name = arg + 1;
    }
  else
    {
      type = Input_file_argument::INPUT_FILE_TYPE_LIBRARY;
      name = arg;
    }
  Input_file_argument file(name, type, "", false, *this);
  cmdline->inputs().add_file(file);
}

#ifdef ENABLE_PLUGINS
void
General_options::parse_plugin(const char*, const char* arg,
			      Command_line*)
{
  this->add_plugin(arg);
}

// Parse --plugin-opt.

void
General_options::parse_plugin_opt(const char*, const char* arg,
				  Command_line*)
{
  this->add_plugin_option(arg);
}
#endif // ENABLE_PLUGINS

void
General_options::parse_R(const char* option, const char* arg,
			 Command_line* cmdline)
{
  struct stat s;
  if (::stat(arg, &s) != 0 || S_ISDIR(s.st_mode))
    this->add_to_rpath(arg);
  else
    this->parse_just_symbols(option, arg, cmdline);
}

void
General_options::parse_just_symbols(const char*, const char* arg,
				    Command_line* cmdline)
{
  Input_file_argument file(arg, Input_file_argument::INPUT_FILE_TYPE_FILE,
			   "", true, *this);
  cmdline->inputs().add_file(file);
}

// Handle --section-start.

void
General_options::parse_section_start(const char*, const char* arg,
				     Command_line*)
{
  const char* eq = strchr(arg, '=');
  if (eq == NULL)
    {
      gold_error(_("invalid argument to --section-start; "
		   "must be SECTION=ADDRESS"));
      return;
    }

  std::string section_name(arg, eq - arg);

  ++eq;
  const char* val_start = eq;
  if (eq[0] == '0' && (eq[1] == 'x' || eq[1] == 'X'))
    eq += 2;
  if (*eq == '\0')
    {
      gold_error(_("--section-start address missing"));
      return;
    }
  uint64_t addr = 0;
  hex_init();
  for (; *eq != '\0'; ++eq)
    {
      if (!hex_p(*eq))
	{
	  gold_error(_("--section-start argument %s is not a valid hex number"),
		     val_start);
	  return;
	}
      addr <<= 4;
      addr += hex_value(*eq);
    }

  this->section_starts_[section_name] = addr;
}

// Look up a --section-start value.

bool
General_options::section_start(const char* secname, uint64_t* paddr) const
{
  if (this->section_starts_.empty())
    return false;
  std::map<std::string, uint64_t>::const_iterator p =
    this->section_starts_.find(secname);
  if (p == this->section_starts_.end())
    return false;
  *paddr = p->second;
  return true;
}

void
General_options::parse_static(const char*, const char*, Command_line*)
{
  this->set_static(true);
}

void
General_options::parse_script(const char*, const char* arg,
			      Command_line* cmdline)
{
  if (!read_commandline_script(arg, cmdline))
    gold::gold_fatal(_("unable to parse script file %s"), arg);
}

void
General_options::parse_version_script(const char*, const char* arg,
				      Command_line* cmdline)
{
  if (!read_version_script(arg, cmdline))
    gold::gold_fatal(_("unable to parse version script file %s"), arg);
}

void
General_options::parse_dynamic_list(const char*, const char* arg,
				    Command_line* cmdline)
{
  if (!read_dynamic_list(arg, cmdline, &this->dynamic_list_))
    gold::gold_fatal(_("unable to parse dynamic-list script file %s"), arg);
}

void
General_options::parse_start_group(const char*, const char*,
				   Command_line* cmdline)
{
  cmdline->inputs().start_group();
}

void
General_options::parse_end_group(const char*, const char*,
				 Command_line* cmdline)
{
  cmdline->inputs().end_group();
}

void
General_options::parse_start_lib(const char*, const char*,
				 Command_line* cmdline)
{
  cmdline->inputs().start_lib(cmdline->position_dependent_options());
}

void
General_options::parse_end_lib(const char*, const char*,
			       Command_line* cmdline)
{
  cmdline->inputs().end_lib();
}

// The function add_excluded_libs() in ld/ldlang.c of GNU ld breaks up a list
// of names separated by commas or colons and puts them in a linked list.
// We implement the same parsing of names here but store names in an unordered
// map to speed up searching of names.

void
General_options::parse_exclude_libs(const char*, const char* arg,
				    Command_line*)
{
  const char* p = arg;

  while (*p != '\0')
    {
      size_t length = strcspn(p, ",:");
      this->excluded_libs_.insert(std::string(p, length));
      p += (p[length] ? length + 1 : length);
    }
}

// The checking logic is based on the function check_excluded_libs() in
// ld/ldlang.c of GNU ld but our implementation is different because we use
// an unordered map instead of a linked list, which is what GNU ld uses.  GNU
// ld searches sequentially in the excluded libs list.  For a given archive,
// a match is found if the archive's name matches exactly one of the list
// entry or if the archive's name is of the form FOO.a and FOO matches exactly
// one of the list entry.  An entry "ALL" in the list is considered as a
// wild-card and matches any given name.

bool
General_options::check_excluded_libs(const std::string &name) const
{
  Unordered_set<std::string>::const_iterator p;

  // Exit early for the most common case.
  if (excluded_libs_.empty())
    return false;

  // If we see "ALL", all archives are excluded from automatic export.
  p = excluded_libs_.find(std::string("ALL"));
  if (p != excluded_libs_.end())
    return true;

  // First strip off any directories in name.
  const char* basename = lbasename(name.c_str());

  // Try finding an exact match.
  p = excluded_libs_.find(std::string(basename));
  if (p != excluded_libs_.end())
    return true;

  // Try matching NAME without ".a" at the end.
  size_t length = strlen(basename);
  if ((length >= 2)
      && (basename[length - 2] == '.')
      && (basename[length - 1] == 'a'))
    {
      p = excluded_libs_.find(std::string(basename, length - 2));
      if (p != excluded_libs_.end())
	return true;
    }

  return false;
}

// Recognize input and output target names.  The GNU linker accepts
// these with --format and --oformat.  This code is intended to be
// minimally compatible.  In practice for an ELF target this would be
// the same target as the input files; that name always start with
// "elf".  Non-ELF targets would be "srec", "symbolsrec", "tekhex",
// "binary", "ihex".

General_options::Object_format
General_options::string_to_object_format(const char* arg)
{
  if (strncmp(arg, "elf", 3) == 0 || strcmp(arg, "default") == 0)
    return gold::General_options::OBJECT_FORMAT_ELF;
  else if (strcmp(arg, "binary") == 0)
    return gold::General_options::OBJECT_FORMAT_BINARY;
  else
    {
      gold::gold_error(_("format '%s' not supported; treating as elf "
			 "(supported formats: elf, binary)"),
		       arg);
      return gold::General_options::OBJECT_FORMAT_ELF;
    }
}

void
General_options::parse_fix_v4bx(const char*, const char*,
				Command_line*)
{
  this->fix_v4bx_ = FIX_V4BX_REPLACE;
}

void
General_options::parse_fix_v4bx_interworking(const char*, const char*,
					     Command_line*)
{
  this->fix_v4bx_ = FIX_V4BX_INTERWORKING;
}

void
General_options::parse_EB(const char*, const char*, Command_line*)
{
  this->endianness_ = ENDIANNESS_BIG;
}

void
General_options::parse_EL(const char*, const char*, Command_line*)
{
  this->endianness_ = ENDIANNESS_LITTLE;
}

} // End namespace gold.

namespace
{

void
usage()
{
  fprintf(stderr,
	  _("%s: use the --help option for usage information\n"),
	  gold::program_name);
  ::exit(EXIT_FAILURE);
}

void
usage(const char* msg, const char* opt)
{
  fprintf(stderr,
	  _("%s: %s: %s\n"),
	  gold::program_name, opt, msg);
  usage();
}

// If the default sysroot is relocatable, try relocating it based on
// the prefix FROM.

static char*
get_relative_sysroot(const char* from)
{
  char* path = make_relative_prefix(gold::program_name, from,
				    TARGET_SYSTEM_ROOT);
  if (path != NULL)
    {
      struct stat s;
      if (::stat(path, &s) == 0 && S_ISDIR(s.st_mode))
	return path;
      free(path);
    }

  return NULL;
}

// Return the default sysroot.  This is set by the --with-sysroot
// option to configure.  Note we do not free the return value of
// get_relative_sysroot, which is a small memory leak, but is
// necessary since we store this pointer directly in General_options.

static const char*
get_default_sysroot()
{
  const char* sysroot = TARGET_SYSTEM_ROOT;
  if (*sysroot == '\0')
    return NULL;

  if (TARGET_SYSTEM_ROOT_RELOCATABLE)
    {
      char* path = get_relative_sysroot(BINDIR);
      if (path == NULL)
	path = get_relative_sysroot(TOOLBINDIR);
      if (path != NULL)
	return path;
    }

  return sysroot;
}

// Parse a long option.  Such options have the form
// <-|--><option>[=arg].  If "=arg" is not present but the option
// takes an argument, the next word is taken to the be the argument.
// If equals_only is set, then only the <option>=<arg> form is
// accepted, not the <option><space><arg> form.  Returns a One_option
// struct or NULL if argv[i] cannot be parsed as a long option.  In
// the not-NULL case, *arg is set to the option's argument (NULL if
// the option takes no argument), and *i is advanced past this option.
// NOTE: it is safe for argv and arg to point to the same place.
gold::options::One_option*
parse_long_option(int argc, const char** argv, bool equals_only,
		  const char** arg, int* i)
{
  const char* const this_argv = argv[*i];

  const char* equals = strchr(this_argv, '=');
  const char* option_start = this_argv + strspn(this_argv, "-");
  std::string option(option_start,
		     equals ? equals - option_start : strlen(option_start));

  gold::options::Option_map::iterator it
      = gold::options::long_options->find(option);
  if (it == gold::options::long_options->end())
    return NULL;

  gold::options::One_option* retval = it->second;

  // If the dash-count doesn't match, we fail.
  if (this_argv[0] != '-')  // no dashes at all: had better be "-z <longopt>"
    {
      if (retval->dashes != gold::options::DASH_Z)
	return NULL;
    }
  else if (this_argv[1] != '-')   // one dash
    {
      if (retval->dashes != gold::options::ONE_DASH
	  && retval->dashes != gold::options::EXACTLY_ONE_DASH
	  && retval->dashes != gold::options::TWO_DASHES)
	return NULL;
    }
  else                            // two dashes (or more!)
    {
      if (retval->dashes != gold::options::TWO_DASHES
	  && retval->dashes != gold::options::EXACTLY_TWO_DASHES
	  && retval->dashes != gold::options::ONE_DASH)
	return NULL;
    }

  // Now that we know the option is good (or else bad in a way that
  // will cause us to die), increment i to point past this argv.
  ++(*i);

  // Figure out the option's argument, if any.
  if (!retval->takes_argument())
    {
      if (equals)
	usage(_("unexpected argument"), this_argv);
      else
	*arg = NULL;
    }
  else
    {
      if (equals)
	*arg = equals + 1;
      else if (retval->takes_optional_argument())
	*arg = retval->default_value;
      else if (*i < argc && !equals_only)
	*arg = argv[(*i)++];
      else
	usage(_("missing argument"), this_argv);
    }

  return retval;
}

// Parse a short option.  Such options have the form -<option>[arg].
// If "arg" is not present but the option takes an argument, the next
// word is taken to the be the argument.  If the option does not take
// an argument, it may be followed by another short option.  Returns a
// One_option struct or NULL if argv[i] cannot be parsed as a short
// option.  In the not-NULL case, *arg is set to the option's argument
// (NULL if the option takes no argument), and *i is advanced past
// this option.  This function keeps *i the same if we parsed a short
// option that does not take an argument, that looks to be followed by
// another short option in the same word.
gold::options::One_option*
parse_short_option(int argc, const char** argv, int pos_in_argv_i,
		   const char** arg, int* i)
{
  const char* const this_argv = argv[*i];

  if (this_argv[0] != '-')
    return NULL;

  // We handle -z as a special case.
  static gold::options::One_option dash_z("", gold::options::DASH_Z,
					  'z', "", NULL, "Z-OPTION", false,
					  NULL);
  gold::options::One_option* retval = NULL;
  if (this_argv[pos_in_argv_i] == 'z')
    retval = &dash_z;
  else
    {
      const int char_as_int = static_cast<int>(this_argv[pos_in_argv_i]);
      if (char_as_int > 0 && char_as_int < 128)
	retval = gold::options::short_options[char_as_int];
    }

  if (retval == NULL)
    return NULL;

  // Figure out the option's argument, if any.
  if (!retval->takes_argument())
    {
      *arg = NULL;
      // We only advance past this argument if it's the only one in argv.
      if (this_argv[pos_in_argv_i + 1] == '\0')
	++(*i);
    }
  else
    {
      // If we take an argument, we'll eat up this entire argv entry.
      ++(*i);
      if (this_argv[pos_in_argv_i + 1] != '\0')
	*arg = this_argv + pos_in_argv_i + 1;
      else if (retval->takes_optional_argument())
	*arg = retval->default_value;
      else if (*i < argc)
	*arg = argv[(*i)++];
      else
	usage(_("missing argument"), this_argv);
    }

  // If we're a -z option, we need to parse our argument as a
  // long-option, e.g. "-z stacksize=8192".
  if (retval == &dash_z)
    {
      int dummy_i = 0;
      const char* dash_z_arg = *arg;
      retval = parse_long_option(1, arg, true, arg, &dummy_i);
      if (retval == NULL)
	usage(_("unknown -z option"), dash_z_arg);
    }

  return retval;
}

} // End anonymous namespace.

namespace gold
{

General_options::General_options()
  : printed_version_(false),
    execstack_status_(EXECSTACK_FROM_INPUT),
    icf_status_(ICF_NONE),
    static_(false),
    do_demangle_(false),
    plugins_(NULL),
    dynamic_list_(),
    incremental_mode_(INCREMENTAL_OFF),
    incremental_disposition_(INCREMENTAL_STARTUP),
    incremental_startup_disposition_(INCREMENTAL_CHECK),
    implicit_incremental_(false),
    excluded_libs_(),
    symbols_to_retain_(),
    section_starts_(),
    fix_v4bx_(FIX_V4BX_NONE),
    endianness_(ENDIANNESS_NOT_SET)
{
  // Turn off option registration once construction is complete.
  gold::options::ready_to_register = false;
}

General_options::Object_format
General_options::format_enum() const
{
  return General_options::string_to_object_format(this->format());
}

General_options::Object_format
General_options::oformat_enum() const
{
  return General_options::string_to_object_format(this->oformat());
}

// Add the sysroot, if any, to the search paths.

void
General_options::add_sysroot()
{
  if (this->sysroot() == NULL || this->sysroot()[0] == '\0')
    {
      this->set_sysroot(get_default_sysroot());
      if (this->sysroot() == NULL || this->sysroot()[0] == '\0')
	return;
    }

  char* canonical_sysroot = lrealpath(this->sysroot());

  for (Dir_list::iterator p = this->library_path_.value.begin();
       p != this->library_path_.value.end();
       ++p)
    p->add_sysroot(this->sysroot(), canonical_sysroot);

  free(canonical_sysroot);
}

// Return whether FILENAME is in a system directory.

bool
General_options::is_in_system_directory(const std::string& filename) const
{
  for (Dir_list::const_iterator p = this->library_path_.value.begin();
       p != this->library_path_.value.end();
       ++p)
    {
      // We use a straight string comparison rather than calling
      // FILENAME_CMP because we are only interested in the cases
      // where we found the file in a system directory, which means
      // that we used the directory name as a prefix for a -L search.
      if (p->is_system_directory()
	  && filename.compare(0, p->name().size(), p->name()) == 0)
	return true;
    }
  return false;
}

// Add a plugin to the list of plugins.

void
General_options::add_plugin(const char* filename)
{
  if (this->plugins_ == NULL)
    this->plugins_ = new Plugin_manager(*this);
  this->plugins_->add_plugin(filename);
}

// Add a plugin option to a plugin.

void
General_options::add_plugin_option(const char* arg)
{
  if (this->plugins_ == NULL)
    gold_fatal("--plugin-opt requires --plugin.");
  this->plugins_->add_plugin_option(arg);
}

// Set up variables and other state that isn't set up automatically by
// the parse routine, and ensure options don't contradict each other
// and are otherwise kosher.

void
General_options::finalize()
{
  // Normalize the strip modifiers.  They have a total order:
  // strip_all > strip_debug > strip_non_line > strip_debug_gdb.
  // If one is true, set all beneath it to true as well.
  if (this->strip_all())
    this->set_strip_debug(true);
  if (this->strip_debug())
    this->set_strip_debug_non_line(true);
  if (this->strip_debug_non_line())
    this->set_strip_debug_gdb(true);

  if (this->Bshareable())
    this->set_shared(true);

  // If the user specifies both -s and -r, convert the -s to -S.
  // -r requires us to keep externally visible symbols!
  if (this->strip_all() && this->relocatable())
    {
      this->set_strip_all(false);
      gold_assert(this->strip_debug());
    }

  // For us, -dc and -dp are synonyms for --define-common.
  if (this->dc())
    this->set_define_common(true);
  if (this->dp())
    this->set_define_common(true);

  // We also set --define-common if we're not relocatable, as long as
  // the user didn't explicitly ask for something different.
  if (!this->user_set_define_common())
    this->set_define_common(!this->relocatable());

  // execstack_status_ is a three-state variable; update it based on
  // -z [no]execstack.
  if (this->execstack())
    this->set_execstack_status(EXECSTACK_YES);
  else if (this->noexecstack())
    this->set_execstack_status(EXECSTACK_NO);

  // icf_status_ is a three-state variable; update it based on the
  // value of this->icf().
  if (strcmp(this->icf(), "none") == 0)
    this->set_icf_status(ICF_NONE);
  else if (strcmp(this->icf(), "safe") == 0)
    this->set_icf_status(ICF_SAFE);
  else
    this->set_icf_status(ICF_ALL);

  // Handle the optional argument for --demangle.
  if (this->user_set_demangle())
    {
      this->set_do_demangle(true);
      const char* style = this->demangle();
      if (*style != '\0')
	{
	  enum demangling_styles style_code;

	  style_code = cplus_demangle_name_to_style(style);
	  if (style_code == unknown_demangling)
	    gold_fatal("unknown demangling style '%s'", style);
	  cplus_demangle_set_style(style_code);
	}
    }
  else if (this->user_set_no_demangle())
    this->set_do_demangle(false);
  else
    {
      // Testing COLLECT_NO_DEMANGLE makes our default demangling
      // behaviour identical to that of gcc's linker wrapper.
      this->set_do_demangle(getenv("COLLECT_NO_DEMANGLE") == NULL);
    }

  // -M is equivalent to "-Map -".
  if (this->print_map() && !this->user_set_Map())
    {
      this->set_Map("-");
      this->set_user_set_Map();
    }

  // Using -n or -N implies -static.
  if (this->nmagic() || this->omagic())
    this->set_static(true);

  // If --thread_count is specified, it applies to
  // --thread-count-{initial,middle,final}, though it doesn't override
  // them.
  if (this->thread_count() > 0 && this->thread_count_initial() == 0)
    this->set_thread_count_initial(this->thread_count());
  if (this->thread_count() > 0 && this->thread_count_middle() == 0)
    this->set_thread_count_middle(this->thread_count());
  if (this->thread_count() > 0 && this->thread_count_final() == 0)
    this->set_thread_count_final(this->thread_count());

  // Let's warn if you set the thread-count but we're going to ignore it.
#ifndef ENABLE_THREADS
  if (this->threads())
    {
      gold_warning(_("ignoring --threads: "
		     "%s was compiled without thread support"),
		   program_name);
      this->set_threads(false);
    }
  if (this->thread_count() > 0 || this->thread_count_initial() > 0
      || this->thread_count_middle() > 0 || this->thread_count_final() > 0)
    gold_warning(_("ignoring --thread-count: "
		   "%s was compiled without thread support"),
		 program_name);
#endif

  std::string libpath;
  if (this->user_set_Y())
    {
      libpath = this->Y();
      if (libpath.compare(0, 2, "P,") == 0)
	libpath.erase(0, 2);
    }
  else if (!this->nostdlib())
    {
#ifndef NATIVE_LINKER
#define NATIVE_LINKER 0
#endif
      const char* p = LIB_PATH;
      if (strcmp(p, "::DEFAULT::") != 0)
	libpath = p;
      else if (NATIVE_LINKER
	       || this->user_set_sysroot()
	       || *TARGET_SYSTEM_ROOT != '\0')
	{
	  this->add_to_library_path_with_sysroot("/lib");
	  this->add_to_library_path_with_sysroot("/usr/lib");
	}
      else
	this->add_to_library_path_with_sysroot(TOOLLIBDIR);
    }

  if (!libpath.empty())
    {
      size_t pos = 0;
      size_t next_pos;
      do
	{
	  next_pos = libpath.find(':', pos);
	  size_t len = (next_pos == std::string::npos
			? next_pos
			: next_pos - pos);
	  if (len != 0)
	    this->add_to_library_path_with_sysroot(libpath.substr(pos, len));
	  pos = next_pos + 1;
	}
      while (next_pos != std::string::npos);
    }

  // Parse the contents of -retain-symbols-file into a set.
  if (this->retain_symbols_file())
    {
      std::ifstream in;
      in.open(this->retain_symbols_file());
      if (!in)
	gold_fatal(_("unable to open -retain-symbols-file file %s: %s"),
		   this->retain_symbols_file(), strerror(errno));
      std::string line;
      std::getline(in, line);   // this chops off the trailing \n, if any
      while (in)
	{
	  if (!line.empty() && line[line.length() - 1] == '\r')   // Windows
	    line.resize(line.length() - 1);
	  this->symbols_to_retain_.insert(line);
	  std::getline(in, line);
	}
    }

  // -Bgroup implies --unresolved-symbols=report-all.
  if (this->Bgroup() && !this->user_set_unresolved_symbols())
    this->set_unresolved_symbols("report-all");

  // -shared implies --allow-shlib-undefined.  Currently
  // ---allow-shlib-undefined controls warnings issued based on the
  // -symbol table.  --unresolved-symbols controls warnings issued
  // -based on relocations.
  if (this->shared() && !this->user_set_allow_shlib_undefined())
    this->set_allow_shlib_undefined(true);

  // Normalize library_path() by adding the sysroot to all directories
  // in the path, as appropriate.
  this->add_sysroot();

  // Now that we've normalized the options, check for contradictory ones.
  if (this->shared() && this->is_static())
    gold_fatal(_("-shared and -static are incompatible"));
  if (this->shared() && this->pie())
    gold_fatal(_("-shared and -pie are incompatible"));
  if (this->pie() && this->is_static())
    gold_fatal(_("-pie and -static are incompatible"));

  if (this->shared() && this->relocatable())
    gold_fatal(_("-shared and -r are incompatible"));
  if (this->pie() && this->relocatable())
    gold_fatal(_("-pie and -r are incompatible"));

  if (!this->shared())
    {
      if (this->filter() != NULL)
	gold_fatal(_("-F/--filter may not used without -shared"));
      if (this->any_auxiliary())
	gold_fatal(_("-f/--auxiliary may not be used without -shared"));
    }

  // TODO: implement support for -retain-symbols-file with -r, if needed.
  if (this->relocatable() && this->retain_symbols_file())
    gold_fatal(_("-retain-symbols-file does not yet work with -r"));

  if (this->oformat_enum() != General_options::OBJECT_FORMAT_ELF
      && (this->shared()
	  || this->pie()
	  || this->relocatable()))
    gold_fatal(_("binary output format not compatible "
		 "with -shared or -pie or -r"));

  if (this->user_set_hash_bucket_empty_fraction()
      && (this->hash_bucket_empty_fraction() < 0.0
	  || this->hash_bucket_empty_fraction() >= 1.0))
    gold_fatal(_("--hash-bucket-empty-fraction value %g out of range "
		 "[0.0, 1.0)"),
	       this->hash_bucket_empty_fraction());

  if (this->implicit_incremental_ && this->incremental_mode_ == INCREMENTAL_OFF)
    gold_fatal(_("Options --incremental-changed, --incremental-unchanged, "
		 "--incremental-unknown require the use of --incremental"));

  // Check for options that are not compatible with incremental linking.
  // Where an option can be disabled without seriously changing the semantics
  // of the link, we turn the option off; otherwise, we issue a fatal error.

  if (this->incremental_mode_ != INCREMENTAL_OFF)
    {
      if (this->relocatable())
	gold_fatal(_("incremental linking is not compatible with -r"));
      if (this->emit_relocs())
	gold_fatal(_("incremental linking is not compatible with "
		     "--emit-relocs"));
      if (this->has_plugins())
	gold_fatal(_("incremental linking is not compatible with --plugin"));
      if (this->gc_sections())
	{
	  gold_warning(_("ignoring --gc-sections for an incremental link"));
	  this->set_gc_sections(false);
	}
      if (this->icf_enabled())
	{
	  gold_warning(_("ignoring --icf for an incremental link"));
	  this->set_icf_status(ICF_NONE);
	}
      if (strcmp(this->compress_debug_sections(), "none") != 0)
	{
	  gold_warning(_("ignoring --compress-debug-sections for an "
			 "incremental link"));
	  this->set_compress_debug_sections("none");
	}
    }

  // --rosegment-gap implies --rosegment.
  if (this->user_set_rosegment_gap())
    this->set_rosegment(true);

  // FIXME: we can/should be doing a lot more sanity checking here.
}

// Search_directory methods.

// This is called if we have a sysroot.  Apply the sysroot if
// appropriate.  Record whether the directory is in the sysroot.

void
Search_directory::add_sysroot(const char* sysroot,
			      const char* canonical_sysroot)
{
  gold_assert(*sysroot != '\0');
  if (this->put_in_sysroot_)
    {
      if (!IS_DIR_SEPARATOR(this->name_[0])
	  && !IS_DIR_SEPARATOR(sysroot[strlen(sysroot) - 1]))
	this->name_ = '/' + this->name_;
      this->name_ = sysroot + this->name_;
      this->is_in_sysroot_ = true;
    }
  else
    {
      // Check whether this entry is in the sysroot.  To do this
      // correctly, we need to use canonical names.  Otherwise we will
      // get confused by the ../../.. paths that gcc tends to use.
      char* canonical_name = lrealpath(this->name_.c_str());
      int canonical_name_len = strlen(canonical_name);
      int canonical_sysroot_len = strlen(canonical_sysroot);
      if (canonical_name_len > canonical_sysroot_len
	  && IS_DIR_SEPARATOR(canonical_name[canonical_sysroot_len]))
	{
	  canonical_name[canonical_sysroot_len] = '\0';
	  if (FILENAME_CMP(canonical_name, canonical_sysroot) == 0)
	    this->is_in_sysroot_ = true;
	}
      free(canonical_name);
    }
}

// Input_arguments methods.

// Add a file to the list.

Input_argument&
Input_arguments::add_file(Input_file_argument& file)
{
  file.set_arg_serial(++this->file_count_);
  if (this->in_group_)
    {
      gold_assert(!this->input_argument_list_.empty());
      gold_assert(this->input_argument_list_.back().is_group());
      return this->input_argument_list_.back().group()->add_file(file);
    }
  if (this->in_lib_)
    {
      gold_assert(!this->input_argument_list_.empty());
      gold_assert(this->input_argument_list_.back().is_lib());
      return this->input_argument_list_.back().lib()->add_file(file);
    }
  this->input_argument_list_.push_back(Input_argument(file));
  return this->input_argument_list_.back();
}

// Start a group.

void
Input_arguments::start_group()
{
  if (this->in_group_)
    gold_fatal(_("May not nest groups"));
  if (this->in_lib_)
    gold_fatal(_("may not nest groups in libraries"));
  Input_file_group* group = new Input_file_group();
  this->input_argument_list_.push_back(Input_argument(group));
  this->in_group_ = true;
}

// End a group.

void
Input_arguments::end_group()
{
  if (!this->in_group_)
    gold_fatal(_("Group end without group start"));
  this->in_group_ = false;
}

// Start a lib.

void
Input_arguments::start_lib(const Position_dependent_options& options)
{
  if (this->in_lib_)
    gold_fatal(_("may not nest libraries"));
  if (this->in_group_)
    gold_fatal(_("may not nest libraries in groups"));
  Input_file_lib* lib = new Input_file_lib(options);
  this->input_argument_list_.push_back(Input_argument(lib));
  this->in_lib_ = true;
}

// End a lib.

void
Input_arguments::end_lib()
{
  if (!this->in_lib_)
    gold_fatal(_("lib end without lib start"));
  this->in_lib_ = false;
}

// Command_line options.

Command_line::Command_line()
{
}

// Pre_options is the hook that sets the ready_to_register flag.

Command_line::Pre_options::Pre_options()
{
  gold::options::ready_to_register = true;
}

// Process the command line options.  For process_one_option, i is the
// index of argv to process next, and must be an option (that is,
// start with a dash).  The return value is the index of the next
// option to process (i+1 or i+2, or argc to indicate processing is
// done).  no_more_options is set to true if (and when) "--" is seen
// as an option.

int
Command_line::process_one_option(int argc, const char** argv, int i,
				 bool* no_more_options)
{
  gold_assert(argv[i][0] == '-' && !(*no_more_options));

  // If we are reading "--", then just set no_more_options and return.
  if (argv[i][1] == '-' && argv[i][2] == '\0')
    {
      *no_more_options = true;
      return i + 1;
    }

  int new_i = i;
  options::One_option* option = NULL;
  const char* arg = NULL;

  // First, try to process argv as a long option.
  option = parse_long_option(argc, argv, false, &arg, &new_i);
  if (option)
    {
      option->reader->parse_to_value(argv[i], arg, this, &this->options_);
      return new_i;
    }

  // Now, try to process argv as a short option.  Since several short
  // options can be combined in one argv, we may have to parse a lot
  // until we're done reading this argv.
  int pos_in_argv_i = 1;
  while (new_i == i)
    {
      option = parse_short_option(argc, argv, pos_in_argv_i, &arg, &new_i);
      if (!option)
	break;
      option->reader->parse_to_value(argv[i], arg, this, &this->options_);
      ++pos_in_argv_i;
    }
  if (option)
    return new_i;

  // I guess it's neither a long option nor a short option.
  usage(_("unknown option"), argv[i]);
  return argc;
}


void
Command_line::process(int argc, const char** argv)
{
  bool no_more_options = false;
  int i = 0;
  while (i < argc)
    {
      this->position_options_.copy_from_options(this->options());
      if (no_more_options || argv[i][0] != '-')
	{
	  Input_file_argument file(argv[i],
				   Input_file_argument::INPUT_FILE_TYPE_FILE,
				   "", false, this->position_options_);
	  this->inputs_.add_file(file);
	  ++i;
	}
      else
	i = process_one_option(argc, argv, i, &no_more_options);
    }

  if (this->inputs_.in_group())
    {
      fprintf(stderr, _("%s: missing group end\n"), program_name);
      usage();
    }

  // Normalize the options and ensure they don't contradict each other.
  this->options_.finalize();
}

// Finalize the version script options and return them.

const Version_script_info&
Command_line::version_script()
{
  this->options_.finalize_dynamic_list();
  Version_script_info* vsi = this->script_options_.version_script_info();
  vsi->finalize();
  return *vsi;
}

} // End namespace gold.
@


1.119
log
@	* options.cc (General_options::string_to_object_format): Accept
	"default".
@
text
@d3 2
a4 1
// Copyright 2006, 2007, 2008, 2009, 2010, 2011 Free Software Foundation, Inc.
d105 5
a109 5
        {
          // -z takes long-names only.
          gold_assert(this->dashes != DASH_Z);
          len += printf(" %s", gettext(this->helparg));
        }
d117 1
a117 1
        len += printf(", ");
d119 13
a131 13
        {
        case options::ONE_DASH: case options::EXACTLY_ONE_DASH:
          len += printf("-");
          break;
        case options::TWO_DASHES: case options::EXACTLY_TWO_DASHES:
          len += printf("--");
          break;
        case options::DASH_Z:
          len += printf("-z ");
          break;
        default:
          gold_unreachable();
        }
d134 6
a139 6
        {
          // For most options, we print "--frob FOO".  But for -z
          // we print "-z frob=FOO".
          len += printf("%c%s", this->dashes == options::DASH_Z ? '=' : ' ',
                        gettext(this->helparg));
        }
d204 1
a204 1
               option_name, arg);
d214 1
a214 1
               option_name, arg);
d224 1
a224 1
               option_name, arg);
d277 1
a277 1
              const char* choices[], int num_choices)
d282 2
a283 2
        *retval = arg;
        return;
d292 1
a292 1
        choices_list += ", ";
d295 1
a295 1
             option_name, choices_list.c_str());
d344 1
a344 1
                              Command_line* cmdline)
d351 1
a351 1
                                   Command_line*)
d358 1
a358 1
                                      Command_line*)
d379 1
a379 1
                                           Command_line*)
d387 1
a387 1
                                             Command_line*)
d395 1
a395 1
                                           Command_line*)
d411 1
a411 1
                               Command_line* cmdline)
d432 1
a432 1
                              Command_line*)
d441 1
a441 1
                                  Command_line*)
d449 1
a449 1
                         Command_line* cmdline)
d460 1
a460 1
                                    Command_line* cmdline)
d532 1
a532 1
                              Command_line* cmdline)
d540 1
a540 1
                                      Command_line* cmdline)
d548 1
a548 1
                                    Command_line* cmdline)
d556 1
a556 1
                                   Command_line* cmdline)
d563 1
a563 1
                                 Command_line* cmdline)
d570 1
a570 1
                                 Command_line* cmdline)
d577 1
a577 1
                               Command_line* cmdline)
d589 1
a589 1
                                    Command_line*)
d663 2
a664 2
                         "(supported formats: elf, binary)"),
                       arg);
d671 1
a671 1
                                Command_line*)
d704 2
a705 2
          _("%s: use the --help option for usage information\n"),
          gold::program_name);
d713 2
a714 2
          _("%s: %s: %s\n"),
          gold::program_name, opt, msg);
d725 1
a725 1
                                    TARGET_SYSTEM_ROOT);
d730 1
a730 1
        return path;
d753 1
a753 1
        path = get_relative_sysroot(TOOLBINDIR);
d755 1
a755 1
        return path;
d772 1
a772 1
                  const char** arg, int* i)
d779 1
a779 1
                     equals ? equals - option_start : strlen(option_start));
d792 1
a792 1
        return NULL;
d797 3
a799 3
          && retval->dashes != gold::options::EXACTLY_ONE_DASH
          && retval->dashes != gold::options::TWO_DASHES)
        return NULL;
d804 3
a806 3
          && retval->dashes != gold::options::EXACTLY_TWO_DASHES
          && retval->dashes != gold::options::ONE_DASH)
        return NULL;
d817 1
a817 1
        usage(_("unexpected argument"), this_argv);
d819 1
a819 1
        *arg = NULL;
d824 1
a824 1
        *arg = equals + 1;
d828 1
a828 1
        *arg = argv[(*i)++];
d830 1
a830 1
        usage(_("missing argument"), this_argv);
d848 1
a848 1
                   const char** arg, int* i)
d857 1
a857 1
                                          'z', "", NULL, "Z-OPTION", false,
d866 1
a866 1
        retval = gold::options::short_options[char_as_int];
d878 1
a878 1
        ++(*i);
d885 1
a885 1
        *arg = this_argv + pos_in_argv_i + 1;
d889 1
a889 1
        *arg = argv[(*i)++];
d891 1
a891 1
        usage(_("missing argument"), this_argv);
d902 1
a902 1
        usage(_("unknown -z option"), dash_z_arg);
d956 1
a956 1
        return;
d1121 2
a1122 2
                   "%s was compiled without thread support"),
                 program_name);
d1174 2
a1175 2
        gold_fatal(_("unable to open -retain-symbols-file file %s: %s"),
                   this->retain_symbols_file(), strerror(errno));
d1179 6
a1184 6
        {
          if (!line.empty() && line[line.length() - 1] == '\r')   // Windows
            line.resize(line.length() - 1);
          this->symbols_to_retain_.insert(line);
          std::getline(in, line);
        }
d1243 1
a1243 1
                 "--incremental-unknown require the use of --incremental"));
d1276 4
d1290 1
a1290 1
                              const char* canonical_sysroot)
d1296 2
a1297 2
          && !IS_DIR_SEPARATOR(sysroot[strlen(sysroot) - 1]))
        this->name_ = '/' + this->name_;
d1310 6
a1315 6
          && IS_DIR_SEPARATOR(canonical_name[canonical_sysroot_len]))
        {
          canonical_name[canonical_sysroot_len] = '\0';
          if (FILENAME_CMP(canonical_name, canonical_sysroot) == 0)
            this->is_in_sysroot_ = true;
        }
d1414 1
a1414 1
                                 bool* no_more_options)
d1445 1
a1445 1
        break;
d1467 1
a1467 1
        {
d1471 3
a1473 3
          this->inputs_.add_file(file);
          ++i;
        }
d1475 1
a1475 1
        i = process_one_option(argc, argv, i, &no_more_options);
@


1.118
log
@	* options.cc (General_options::finalize): Disallow -pie and -static.
@
text
@d655 1
a655 1
  if (strncmp(arg, "elf", 3) == 0)
@


1.118.2.1
log
@gold/
	* options.h (General_options): Add --rosegment-gap option.
	* options.cc (finalize): --rosegment-gap implies --rosegment.
	* layout.cc (set_segment_offsets): Let user option override
	target->rosegment_gap().
@
text
@d3 1
a3 2
// Copyright 2006, 2007, 2008, 2009, 2010, 2011, 2013
// Free Software Foundation, Inc.
d104 5
a108 5
	{
	  // -z takes long-names only.
	  gold_assert(this->dashes != DASH_Z);
	  len += printf(" %s", gettext(this->helparg));
	}
d116 1
a116 1
	len += printf(", ");
d118 13
a130 13
	{
	case options::ONE_DASH: case options::EXACTLY_ONE_DASH:
	  len += printf("-");
	  break;
	case options::TWO_DASHES: case options::EXACTLY_TWO_DASHES:
	  len += printf("--");
	  break;
	case options::DASH_Z:
	  len += printf("-z ");
	  break;
	default:
	  gold_unreachable();
	}
d133 6
a138 6
	{
	  // For most options, we print "--frob FOO".  But for -z
	  // we print "-z frob=FOO".
	  len += printf("%c%s", this->dashes == options::DASH_Z ? '=' : ' ',
			gettext(this->helparg));
	}
d203 1
a203 1
	       option_name, arg);
d213 1
a213 1
	       option_name, arg);
d223 1
a223 1
	       option_name, arg);
d276 1
a276 1
	      const char* choices[], int num_choices)
d281 2
a282 2
	*retval = arg;
	return;
d291 1
a291 1
	choices_list += ", ";
d294 1
a294 1
	     option_name, choices_list.c_str());
d343 1
a343 1
			      Command_line* cmdline)
d350 1
a350 1
				   Command_line*)
d357 1
a357 1
				      Command_line*)
d378 1
a378 1
					   Command_line*)
d386 1
a386 1
					     Command_line*)
d394 1
a394 1
					   Command_line*)
d410 1
a410 1
			       Command_line* cmdline)
d431 1
a431 1
			      Command_line*)
d440 1
a440 1
				  Command_line*)
d448 1
a448 1
			 Command_line* cmdline)
d459 1
a459 1
				    Command_line* cmdline)
d531 1
a531 1
			      Command_line* cmdline)
d539 1
a539 1
				      Command_line* cmdline)
d547 1
a547 1
				    Command_line* cmdline)
d555 1
a555 1
				   Command_line* cmdline)
d562 1
a562 1
				 Command_line* cmdline)
d569 1
a569 1
				 Command_line* cmdline)
d576 1
a576 1
			       Command_line* cmdline)
d588 1
a588 1
				    Command_line*)
d662 2
a663 2
			 "(supported formats: elf, binary)"),
		       arg);
d670 1
a670 1
				Command_line*)
d703 2
a704 2
	  _("%s: use the --help option for usage information\n"),
	  gold::program_name);
d712 2
a713 2
	  _("%s: %s: %s\n"),
	  gold::program_name, opt, msg);
d724 1
a724 1
				    TARGET_SYSTEM_ROOT);
d729 1
a729 1
	return path;
d752 1
a752 1
	path = get_relative_sysroot(TOOLBINDIR);
d754 1
a754 1
	return path;
d771 1
a771 1
		  const char** arg, int* i)
d778 1
a778 1
		     equals ? equals - option_start : strlen(option_start));
d791 1
a791 1
	return NULL;
d796 3
a798 3
	  && retval->dashes != gold::options::EXACTLY_ONE_DASH
	  && retval->dashes != gold::options::TWO_DASHES)
	return NULL;
d803 3
a805 3
	  && retval->dashes != gold::options::EXACTLY_TWO_DASHES
	  && retval->dashes != gold::options::ONE_DASH)
	return NULL;
d816 1
a816 1
	usage(_("unexpected argument"), this_argv);
d818 1
a818 1
	*arg = NULL;
d823 1
a823 1
	*arg = equals + 1;
d827 1
a827 1
	*arg = argv[(*i)++];
d829 1
a829 1
	usage(_("missing argument"), this_argv);
d847 1
a847 1
		   const char** arg, int* i)
d856 1
a856 1
					  'z', "", NULL, "Z-OPTION", false,
d865 1
a865 1
	retval = gold::options::short_options[char_as_int];
d877 1
a877 1
	++(*i);
d884 1
a884 1
	*arg = this_argv + pos_in_argv_i + 1;
d888 1
a888 1
	*arg = argv[(*i)++];
d890 1
a890 1
	usage(_("missing argument"), this_argv);
d901 1
a901 1
	usage(_("unknown -z option"), dash_z_arg);
d955 1
a955 1
	return;
d1120 2
a1121 2
		   "%s was compiled without thread support"),
		 program_name);
d1173 2
a1174 2
	gold_fatal(_("unable to open -retain-symbols-file file %s: %s"),
		   this->retain_symbols_file(), strerror(errno));
d1178 6
a1183 6
	{
	  if (!line.empty() && line[line.length() - 1] == '\r')   // Windows
	    line.resize(line.length() - 1);
	  this->symbols_to_retain_.insert(line);
	  std::getline(in, line);
	}
d1242 1
a1242 1
		 "--incremental-unknown require the use of --incremental"));
a1274 4
  // --rosegment-gap implies --rosegment.
  if (this->user_set_rosegment_gap())
    this->set_rosegment(true);

d1285 1
a1285 1
			      const char* canonical_sysroot)
d1291 2
a1292 2
	  && !IS_DIR_SEPARATOR(sysroot[strlen(sysroot) - 1]))
	this->name_ = '/' + this->name_;
d1305 6
a1310 6
	  && IS_DIR_SEPARATOR(canonical_name[canonical_sysroot_len]))
	{
	  canonical_name[canonical_sysroot_len] = '\0';
	  if (FILENAME_CMP(canonical_name, canonical_sysroot) == 0)
	    this->is_in_sysroot_ = true;
	}
d1409 1
a1409 1
				 bool* no_more_options)
d1440 1
a1440 1
	break;
d1462 1
a1462 1
	{
d1466 3
a1468 3
	  this->inputs_.add_file(file);
	  ++i;
	}
d1470 1
a1470 1
	i = process_one_option(argc, argv, i, &no_more_options);
@


1.117
log
@	* configure.ac: Add --with-lib-path option.  Define LIB_PATH and
	NATIVE_LINKER.
	* Makefile.am (AM_CPPFLAGS): Define TOOLLIBDIR.
	* options.cc (General_options::finalize): Use library search path
	from configure script if specified.  If not native and no sysroot,
	only search TOOLLIBDIR.
	* options.h (Search_directory::Search_directory): Change name to
	const std::string&.
	(General_options::add_to_library_path_with_sysroot): Change arg to
	const std::string&.
	* configure, Makefile.in, config.in: Rebuild.
@
text
@d1206 2
@


1.116
log
@	* options.cc (parse_uint): Fix dereference of RETVAL.
@
text
@d1124 1
d1127 22
a1148 3
      std::string s = this->Y();
      if (s.compare(0, 2, "P,") == 0)
	s.erase(0, 2);
d1150 2
d1156 1
a1156 1
	  next_pos = s.find(':', pos);
d1161 1
a1161 1
	    this->add_to_library_path_with_sysroot(s.substr(pos, len).c_str());
a1165 7
  else if (!this->nostdlib())
    {
      // Even if they don't specify it, we add -L /lib and -L /usr/lib.
      // FIXME: We should only do this when configured in native mode.
      this->add_to_library_path_with_sysroot("/lib");
      this->add_to_library_path_with_sysroot("/usr/lib");
    }
@


1.115
log
@	* gold/gold.cc (queue_initial_tasks): Move option checks ...
	* gold/options.cc (General_options::finalize): ... to here. Disable
	some options; make others fatal.
@
text
@d201 1
a201 1
  if (*endptr != '\0' || retval < 0)
@


1.114
log
@	PR gold/12979
	* options.h (class General_options): Add -Bgroup.
	* options.cc (General_options::finalize): If -Bgroup is set,
	default to --unresolved-symbols=report-all.
	* layout.cc (Layout::finish_dynamic_section): Implement -Bgroup.
	* target-reloc.h (issue_undefined_symbol_error): Handle
	--unresolved-symbols=report-all.
@
text
@d1227 31
@


1.114.2.1
log
@	Copy from mainline to binutils 2.22 branch:

	2011-12-17  Cary Coutant  <ccoutant@@google.com>

	* dwarf_reader.cc (Sized_dwarf_line_info::read_lines): Add casts.
	* resolve.cc (Symbol_table::resolve): Likewise.
	* i386.cc (Target_i386::do_code_fill): Use char constants for nop
	arrays.
	* x86_64.cc (Target_x86_64::do_code_fill): Likewise.

	2011-10-31  Cary Coutant  <ccoutant@@google.com>

	PR gold/13023
	* expression.cc (Expression::eval_with_dot): Add
	is_section_dot_assignment parameter.
	(Expression::eval_maybe_dot): Likewise.  Adjust value when rhs is
	absolute and assigning to dot within a section.
	* script-sections.cc
	(Output_section_element_assignment::set_section_addresses): Pass
	dot_section to set_if_absolute.
	(Output_section_element_dot_assignment::finalize_symbols): Pass TRUE
	as is_section_dot_assignment flag to eval_with_dot.
	(Output_section_element_dot_assignment::set_section_addresses):
	Likewise.
	* script.cc (Symbol_assignment::set_if_absolute): Add dot_section
	parameter.  Also set value if relative to dot_section; set the
	symbol's output_section.
	* script.h (Expression::eval_with_dot): Add is_section_dot_assignment
	parameter.  Adjust all callers.
	(Expression::eval_maybe_dot): Likewise.
	(Symbol_assignment::set_if_absolute): Add dot_section parameter.
	Adjust all callers.
	* testsuite/script_test_2.t: Test assignment of an absolute value
	to dot within an output section element.

	2011-10-31  Cary Coutant  <ccoutant@@google.com>

	* options.h (class General_options): Add --[no-]gnu-unique options.
	* symtab.cc (Symbol_table::sized_write_globals): Convert
	STB_GNU_UNIQUE to STB_GLOBAL if --no-gnu-unique.

	2011-10-31  Cary Coutant  <ccoutant@@google.com>

	PR gold/13359
	* i386.cc (Target_i386::Relocate::relocate_tls): Remove
	unnecessary assertion.
	* x86_64.cc (Target_x86_64::Relocate::relocate_tls): Likewise.

	2011-10-31 Sriraman Tallam  <tmsriram@@google.com>

	* symtab.h (Symbol_table::gc_mark_symbol_for_shlib): Rename to
	gc_mark_symbol.
	* symtab.cc (Symbol_table::gc_mark_symbol_for_shlib): Rename to
	gc_mark_symbol.
	Change to just keep the section associated with symbol.
	(Symbol_table::add_from_relobj): Mark symbols as not garbage when
	they are externally visible and --export-dynamic is turned on.
	(Symbol_table::gc_mark_dyn_syms): Call gc_mark_symbol.

	2011-10-19  Ian Lance Taylor  <iant@@google.com>

	PR gold/13163
	* script-sections.cc
	(Output_section_element_dot_assignment::needs_output_section): New
	function.

	2011-10-19  Ian Lance Taylor  <iant@@google.com>

	PR gold/13204
	* layout.cc (Layout::segment_precedes): Don't assert failure if a
	--section-start option was seen.
	* options.h (General_options::any_section_start): New function.

	2011-10-18  Cary Coutant  <ccoutant@@google.com>

	* output.cc (posix_fallocate): Return 0 on success, errno on failure.
	(Output_file::map_no_anonymous): Check for non-zero
	return code from posix_fallocate.

	2011-10-17  Cary Coutant  <ccoutant@@google.com>

	PR gold/13245
	* plugin.cc (is_visible_from_outside): Check for symbols
	referenced from dynamic objects.
	* resolve.cc (Symbol_table::resolve): Don't count references
	from dynamic objects as references from real ELF files.
	* testsuite/plugin_test_2.sh: Adjust expected result.

	2011-10-17  Cary Coutant  <ccoutant@@google.com>

	* readsyms.cc (Read_symbols::run): Don't queue an unblocker
	task for members of lib groups.

	2011-10-17  Cary Coutant  <ccoutant@@google.com>

	PR gold/13288
	* fileread.cc (File_read::find_view): Add assert.
	(File_read::make_view): Move bounds check (replace with assert)...
	(File_read::find_or_make_view): ... to here.

	2011-10-12  Cary Coutant  <ccoutant@@google.com>

	* output.cc (Output_file::open_base_file): Handle case where
	::read returns less than requested size.

	2011-10-10  Cary Coutant  <ccoutant@@google.com>

	* incremental.cc (Sized_relobj_incr::Sized_relobj_incr):
	Initialize defined_count_.
	(Sized_relobj_incr::do_add_symbols): Count defined symbols.
	(Sized_relobj_incr::do_get_global_symbol_counts): Rewrite.
	(Sized_incr_dynobj::Sized_incr_dynobj): Initialize defined_count_.
	(Sized_incr_dynobj::do_add_symbols): Count defined symbols.
	(Sized_incr_dynobj::do_get_global_symbol_counts): Rewrite.
	* incremental.h (Sized_relobj_incr::defined_count_): New data
	member.
	(Sized_incr_dynobj::defined_count_): New data member.
	* plugin.cc (Sized_pluginobj::do_get_global_symbol_counts):
	Return zeroes instead of internal error.

	2011-10-10  Cary Coutant  <ccoutant@@google.com>

	PR gold/13249
	* output.cc (Output_reloc::Output_reloc): Add use_plt_offset flag.
	(Output_reloc::symbol_value): Return PLT offset if flag is set.
	* output.h (class Output_reloc): Add use_plt_offset flag.
	(Output_reloc::type_): Adjust size of bit field.
	(Output_reloc::use_plt_offset_): New bit field.
	(class Output_data_reloc): Adjust all calls to Output_reloc_type.
	(Output_data_reloc::add_local_relative): (RELA only) Add use_plt_offset
	flag.  Adjust all callers.
	* x86_64.cc (Target_x86_64::Scan::local): Check for IFUNC when
	creating RELATIVE relocations.

	2011-10-03   Diego Novillo  <dnovillo@@google.com>

	* options.cc (parse_uint): Fix dereference of RETVAL.

	2011-09-29  Cary Coutant  <ccoutant@@google.com>

	* incremental.cc (Sized_incremental_binary::do_process_got_plt):
	Check for NULL.
	* symtab.cc (Symbol_table::add_from_relobj): Ignore version
	symbols during incremental update.
	(Symbol_table::add_from_dynobj): Likewise.

	2011-09-26  Cary Coutant  <ccoutant@@google.com>

	* gold.cc (queue_initial_tasks): Move option checks ...
	* options.cc (General_options::finalize): ... to here. Disable
	some options; make others fatal.

	2011-09-23  Simon Baldwin  <simonb@@google.com>

	* configure.ac: Add new --with-gold-ldadd and --with-gold-ldflags
	configuration options.
	* configure: Regenerate.
	* Makefile.am: Handle GOLD_LDADD and GOLD_LDFLAGS.
	* Makefile.in: Regenerate.
	* testsuite/Makefile.in: Regenerate.
@
text
@d201 1
a201 1
  if (*endptr != '\0' || *retval < 0)
a1226 31
  // Check for options that are not compatible with incremental linking.
  // Where an option can be disabled without seriously changing the semantics
  // of the link, we turn the option off; otherwise, we issue a fatal error.

  if (this->incremental_mode_ != INCREMENTAL_OFF)
    {
      if (this->relocatable())
	gold_fatal(_("incremental linking is not compatible with -r"));
      if (this->emit_relocs())
	gold_fatal(_("incremental linking is not compatible with "
		     "--emit-relocs"));
      if (this->has_plugins())
	gold_fatal(_("incremental linking is not compatible with --plugin"));
      if (this->gc_sections())
	{
	  gold_warning(_("ignoring --gc-sections for an incremental link"));
	  this->set_gc_sections(false);
	}
      if (this->icf_enabled())
	{
	  gold_warning(_("ignoring --icf for an incremental link"));
	  this->set_icf_status(ICF_NONE);
	}
      if (strcmp(this->compress_debug_sections(), "none") != 0)
	{
	  gold_warning(_("ignoring --compress-debug-sections for an "
			 "incremental link"));
	  this->set_compress_debug_sections("none");
	}
    }

@


1.113
log
@	* incremental.cc (Sized_incremental_binary::do_file_has_changed):
	Check disposition for startup file.
	(Incremental_inputs::report_command_line): Ignore
	--incremental-startup-unchanged option.
	* options.cc (General_options::parse_incremental_startup_unchanged):
	New function.
	(General_options::General_options): Initialize new data member.
	* options.h (Incremental_disposition): Add INCREMENTAL_STARTUP.
	(General_options): Add --incremental-startup-unchanged option.
	(General_options::incremental_startup_disposition): New function.
	(General_options::incremental_startup_disposition_): New data member.
@
text
@d1171 8
@


1.112
log
@	* incremental.cc (Incremental_inputs::report_command_line): Ignore
	--incremental-patch option.
	* layout.cc (Free_list::allocate): Extend allocation beyond original
	end if enabled.
	(Layout::make_output_section): Mark sections that should get
	patch space.
	* options.cc (parse_percent): New function.
	* options.h (parse_percent): New function.
	(DEFINE_percent): New macro.
	(General_options): Add --incremental-patch option.
	* output.cc (Output_section::Output_section): Initialize new data
	members.
	(Output_section::add_input_section): Print section name when out
	of patch space.
	(Output_section::add_output_section_data): Likewise.
	(Output_section::set_final_data_size): Add patch space when
	doing --incremental-full.
	(Output_section::do_reset_address_and_file_offset): Remove patch
	space.
	(Output_segment::set_section_list_addresses): Print debug output
	only if --incremental-update.
	* output.h (Output_section::set_is_patch_space_allowed): New function.
	(Output_section::is_patch_space_allowed_): New data member.
	(Output_section::patch_space_): New data member.
	* parameters.cc (Parameters::incremental_full): New function.
	* parameters.h (Parameters::incremental_full): New function
	* testsuite/Makefile.am (incremental_test_2): Add test for
	--incremental-patch option.
	* testsuite/Makefile.in: Regenerate.
	* testsuite/two_file_test_1_v1.cc (t1, t2, t3): Add comments.
	(t18): Remove function body.
@
text
@d401 8
d921 2
a922 1
    incremental_disposition_(INCREMENTAL_CHECK),
@


1.111
log
@	PR gold/12957
	* options.h (class General_options): Add -f and -F.
	* options.cc (General_options::finalize): Fatal error if -f/-F
	are used without -shared.
	* layout.cc (Layout::finish_dynamic_section): Implement -f/-F.
@
text
@d238 11
@


1.110
log
@	PR gold/12934
	* target-select.cc (Target_selector::Target_selector): Add
	emulation parameter.  Change all callers.
	(select_target_by_bfd_name): Rename from select_target_by_name.
	Change all callers.
	(select_target_by_emulation): New function.
	(supported_emulation_names): New function.
	* target-select.h (class Target_selector): Add emulation_ field.
	Update declarations.
	(Target_selector::recognize_by_bfd_name): Rename from
	recognize_by_name.  Change all callers.
	(Target_selector::supported_bfd_names): Rename from
	supported_names.  Change all callers.
	(Target_selector::recognize_by_emulation): New function.
	(Target_selector::supported_emulations): New function.
	(Target_selector::emulation): New function.
	(Target_selector::do_recognize_by_bfd_name): Rename from
	do_recognize_by_name.  Change all callers.
	(Target_selector::do_supported_bfd_names): Rename from
	do_supported_names.  Change all callers.
	(Target_selector::do_recognize_by_emulation): New function.
	(Target_selector::do_supported_emulations): New function.
	(select_target_by_bfd_name): Change name in declaration.
	(select_target_by_emulation): Declare.
	(supported_emulation_names): Declare.
	* parameters.cc (parameters_force_valid_target): Try to find
	target based on emulation from -m option.
	* options.h (class General_options): Change doc string for -m.
	* options.cc (help): Print emulations.
	(General_options::parse_V): Likewise.
	* freebsd.h (Target_selector_freebsd::Target_selector_freebsd):
	Add emulation parameter.  Change all callers.
@
text
@d1169 8
@


1.109
log
@	* archive.cc (Archive::include_member): Adjust call to
	report_object.
	(Add_archive_symbols::run): Track argument serial numbers.
	(Lib_group::include_member): Likewise.
	(Add_lib_group_symbols::run): Adjust call to report_archive_begin.
	* archive.h (Incremental_archive_entry::Archive_member):
	Initialize arg_serial_.
	(Archive_member::arg_serial_): New data member.
	* dynobj.cc (Dynobj::Dynobj): Allow input_file_ to be NULL.
	(Sized_dynobj::do_add_symbols): Track symbols when doing an
	incremental link.
	(Sized_dynobj::do_for_all_local_got_entries): New function.
	* dynobj.h: (Sized_dynobj::do_for_all_local_got_entries): New
	function.
	* fileread.cc (get_mtime): New function.
	* fileread.h (get_mtime): New function.
	* gold.cc (queue_initial_tasks): Check for incremental update.
	(process_incremental_input): New function.
	(queue_middle_tasks): Don't force valid target for incremental
	update.
	* incremental-dump.cc (find_input_containing_global): Adjust
	size of symbol info entry.
	(dump_incremental_inputs): Dump argument serial number and
	in_system_directory flag; bias shndx by 1; print symbol names
	when dumping per-file symbol lists; use new symbol info readers.
	* incremental.cc
	(Output_section_incremental_inputs:update_data_size): New function.
	(Sized_incremental_binary::setup_readers): Setup input readers
	for each input file; build maps for files added from libraries
	and scripts.
	(Sized_incremental_binary::check_input_args): New function.
	(Sized_incremental_binary::do_check_inputs): Build map of argument
	serial numbers to input arguments.
	(Sized_incremental_binary::do_file_has_changed): Rename
	do_file_is_unchanged to this; compare file modification times.
	(Sized_incremental_binary::do_init_layout): New function.
	(Sized_incremental_binary::do_reserve_layout): New function.
	(Sized_incremental_binary::do_get_input_reader): Remove.
	(Sized_incremental_binary::get_symtab_view): New function.
	(Incremental_checker::can_incrementally_link_output_file): Remove.
	(Incremental_inputs::report_command_line): Exclude --debug options.
	(Incremental_inputs::report_archive_begin): Add parameter; track
	argument serial numbers; don't put input file entry for archive
	before archive members.
	(Incremental_inputs::report_archive_end): Put input file entry
	for archive after archive members.
	(Incremental_inputs::report_object): Add parameter; track argument
	serial numbers and in_system_directory flag.
	(Incremental_inputs::report_script): Add parameter; track argument
	serial numbers.
	(Output_section_incremental_inputs::set_final_data_size): Adjust
	size of symbol info entry; check for forwarding symbols.
	(Output_section_incremental_inputs::write_input_files): Write
	in_system_directory flag and argument serial number.
	(Output_section_incremental_inputs::write_info_blocks): Map section
	indices between incremental info and original input file; store
	input section index for each symbol.
	(class Local_got_offset_visitor): Derive from Got_offset_list::Visitor;
	change operator() to visit().
	(class Global_got_offset_visitor): Likewise.
	(class Global_symbol_visitor_got_plt):
	(Output_section_incremental_inputs::write_got_plt): Use new visitor
	classes.
	(Sized_incr_relobj::Sized_incr_relobj): New constructor.
	(Sized_incr_relobj::do_read_symbols): New function.
	(Sized_incr_relobj::do_layout): New function.
	(Sized_incr_relobj::do_layout_deferred_sections): New function.
	(Sized_incr_relobj::do_add_symbols): New function.
	(Sized_incr_relobj::do_should_include_member): New function.
	(Sized_incr_relobj::do_for_all_global_symbols): New function.
	(Sized_incr_relobj::do_for_all_local_got_entries): New function.
	(Sized_incr_relobj::do_section_size): New function.
	(Sized_incr_relobj::do_section_name): New function.
	(Sized_incr_relobj::do_section_contents): New function.
	(Sized_incr_relobj::do_section_flags): New function.
	(Sized_incr_relobj::do_section_entsize): New function.
	(Sized_incr_relobj::do_section_address): New function.
	(Sized_incr_relobj::do_section_type): New function.
	(Sized_incr_relobj::do_section_link): New function.
	(Sized_incr_relobj::do_section_info): New function.
	(Sized_incr_relobj::do_section_addralign): New function.
	(Sized_incr_relobj::do_initialize_xindex): New function.
	(Sized_incr_relobj::do_get_global_symbol_counts): New function.
	(Sized_incr_relobj::do_read_relocs): New function.
	(Sized_incr_relobj::do_gc_process_relocs): New function.
	(Sized_incr_relobj::do_scan_relocs): New function.
	(Sized_incr_relobj::do_count_local_symbols): New function.
	(Sized_incr_relobj::do_finalize_local_symbols): New function.
	(Sized_incr_relobj::do_set_local_dynsym_indexes): New function.
	(Sized_incr_relobj::do_set_local_dynsym_offset): New function.
	(Sized_incr_relobj::do_relocate): New function.
	(Sized_incr_relobj::do_set_section_offset): New function.
	(Sized_incr_dynobj::Sized_incr_dynobj): New function.
	(Sized_incr_dynobj::do_read_symbols): New function.
	(Sized_incr_dynobj::do_layout): New function.
	(Sized_incr_dynobj::do_add_symbols): New function.
	(Sized_incr_dynobj::do_should_include_member): New function.
	(Sized_incr_dynobj::do_for_all_global_symbols): New function.
	(Sized_incr_dynobj::do_for_all_local_got_entries): New function.
	(Sized_incr_dynobj::do_section_size): New function.
	(Sized_incr_dynobj::do_section_name): New function.
	(Sized_incr_dynobj::do_section_contents): New function.
	(Sized_incr_dynobj::do_section_flags): New function.
	(Sized_incr_dynobj::do_section_entsize): New function.
	(Sized_incr_dynobj::do_section_address): New function.
	(Sized_incr_dynobj::do_section_type): New function.
	(Sized_incr_dynobj::do_section_link): New function.
	(Sized_incr_dynobj::do_section_info): New function.
	(Sized_incr_dynobj::do_section_addralign): New function.
	(Sized_incr_dynobj::do_initialize_xindex): New function.
	(Sized_incr_dynobj::do_get_global_symbol_counts): New function.
	(make_sized_incremental_object): New function.
	(Incremental_library::copy_unused_symbols): New function.
	(Incremental_library::do_for_all_unused_symbols): New function.
	* incremental.h (enum Incremental_input_flags): New type.
	(class Incremental_checker): Remove.
	(Incremental_input_entry::Incremental_input_entry): Add argument
	serial number.
	(Incremental_input_entry::arg_serial): New function.
	(Incremental_input_entry::set_is_in_system_directory): New function.
	(Incremental_input_entry::is_in_system_directory): New function.
	(Incremental_input_entry::arg_serial_): New data member.
	(Incremental_input_entry::is_in_system_directory_): New data member.
	(class Script_info): Move here from script.h.
	(Script_info::Script_info): Add filename parameter.
	(Script_info::filename): New function.
	(Script_info::filename_): New data member.
	(Incremental_script_entry::Incremental_script_entry): Add argument
	serial number.
	(Incremental_object_entry::Incremental_object_entry): Likewise.
	(Incremental_object_entry::add_input_section): Build list of input
	sections with map to original shndx.
	(Incremental_object_entry::get_input_section_index): New function.
	(Incremental_object_entry::shndx_): New data member.
	(Incremental_object_entry::name_key_): Rename; adjust all refs.
	(Incremental_object_entry::sh_size_): Rename; adjust all refs.
	(Incremental_archive_entry::Incremental_archive_entry): Add argument
	serial number.
	(Incremental_inputs::report_archive_begin): Likewise.
	(Incremental_inputs::report_object): Likewise.
	(Incremental_inputs::report_script): Likewise.
	(class Incremental_global_symbol_reader): New class.
	(Incremental_input_entry_reader::Incremental_input_entry_reader): Read
	and store flags and input file type.
	(Incremental_input_entry_reader::arg_serial): New function.
	(Incremental_input_entry_reader::type): Extract type from flags.
	(Incremental_input_entry_reader::is_in_system_directory): New function.
	(Incremental_input_entry_reader::get_input_section_count): Call
	accessor function for type.
	(Incremental_input_entry_reader::get_symbol_offset): Call accessor
	function for type; adjust size of global symbol entry.
	(Incremental_input_entry_reader::get_global_symbol_count): Call
	accessor function for type.
	(Incremental_input_entry_reader::get_object_count): Likewise.
	(Incremental_input_entry_reader::get_object_offset): Likewise.
	(Incremental_input_entry_reader::get_member_count): Likewise.
	(Incremental_input_entry_reader::get_unused_symbol_count): Likewise.
	(Incremental_input_entry_reader::get_member_offset): Likewise.
	(Incremental_input_entry_reader::get_unused_symbol): Likewise.
	(Incremental_input_entry_reader::Global_symbol_info): Remove.
	(Incremental_input_entry_reader::get_global_symbol_info): Remove.
	(Incremental_input_entry_reader::get_global_symbol_reader): New
	function.
	(Incremental_input_entry_reader::get_output_symbol_index): New
	function.
	(Incremental_input_entry_reader::type_): Remove.
	(Incremental_input_entry_reader::flags_): New data member.
	(Incremental_inputs_reader::input_file_offset): New function.
	(Incremental_inputs_reader::input_file_index): New function.
	(Incremental_inputs_reader::input_file): Call input_file_offset.
	(Incremental_inputs_reader::input_file_at_offset): New function.
	(Incremental_relocs_reader::get_r_type): Reformat.
	(Incremental_relocs_reader::get_r_shndx): Reformat.
	(Incremental_relocs_reader::get_r_offset): Reformat.
	(Incremental_relocs_reader::data): New function.
	(Incremental_binary::Incremental_binary): Initialize new data members.
	(Incremental_binary::check_inputs): Add cmdline parameter.
	(Incremental_binary::file_is_unchanged): Remove.
	(Input_reader::arg_serial): New function.
	(Input_reader::get_unused_symbol_count): New function.
	(Input_reader::get_unused_symbol): New function.
	(Input_reader::do_arg_serial): New function.
	(Input_reader::do_get_unused_symbol_count): New function.
	(Input_reader::do_get_unused_symbol): New function.
	(Incremental_binary::input_file_count): New function.
	(Incremental_binary::get_input_reader): Change signature to use
	index instead of filename.
	(Incremental_binary::file_has_changed): New function.
	(Incremental_binary::get_input_argument): New function.
	(Incremental_binary::get_library): New function.
	(Incremental_binary::get_script_info): New function.
	(Incremental_binary::init_layout): New function.
	(Incremental_binary::reserve_layout): New function.
	(Incremental_binary::output_file): New function.
	(Incremental_binary::do_check_inputs): New function.
	(Incremental_binary::do_file_is_unchanged): Remove.
	(Incremental_binary::do_file_has_changed): New function.
	(Incremental_binary::do_init_layout): New function.
	(Incremental_binary::do_reserve_layout): New function.
	(Incremental_binary::do_input_file_count): New function.
	(Incremental_binary::do_get_input_reader): Change signature.
	(Incremental_binary::input_args_map_): New data member.
	(Incremental_binary::library_map_): New data member.
	(Incremental_binary::script_map_): New data member.
	(Sized_incremental_binary::Sized_incremental_binary): Initialize
	new data members.
	(Sized_incremental_binary::output_section): New function.
	(Sized_incremental_binary::inputs_reader): Add const.
	(Sized_incremental_binary::symtab_reader): Add const.
	(Sized_incremental_binary::relocs_reader): Add const.
	(Sized_incremental_binary::got_plt_reader): Add const.
	(Sized_incremental_binary::get_symtab_view): New function.
	(Sized_incremental_binary::Inputs_reader): New typedef.
	(Sized_incremental_binary::Input_entry_reader): New typedef.
	(Sized_incremental_binary::do_check_inputs): Add cmdline parameter.
	(Sized_incremental_binary::do_file_is_unchanged): Remove.
	(Sized_incremental_binary::do_file_has_changed): New function.
	(Sized_incremental_binary::do_init_layout): New function.
	(Sized_incremental_binary::do_reserve_layout): New function.
	(Sized_input_reader::Inputs_reader): Remove.
	(Sized_input_reader::Input_entry_reader): Remove.
	(Sized_input_reader::do_arg_serial): New function.
	(Sized_input_reader::do_get_unused_symbol_count): New function.
	(Sized_input_reader::do_get_unused_symbol): New function.
	(Sized_incremental_binary::do_input_file_count): New function.
	(Sized_incremental_binary::do_get_input_reader): Change signature;
	use index instead of filename.
	(Sized_incremental_binary::section_map_): New data member.
	(Sized_incremental_binary::input_entry_readers_): New data member.
	(class Sized_incr_relobj): New class.
	(class Sized_incr_dynobj): New class.
	(make_sized_incremental_object): New function.
	(class Incremental_library): New class.
	* layout.cc (Free_list::num_lists): New static data member.
	(Free_list::num_nodes): New static data member.
	(Free_list::num_removes): New static data member.
	(Free_list::num_remove_visits): New static data member.
	(Free_list::num_allocates): New static data member.
	(Free_list::num_allocate_visits): New static data member.
	(Free_list::init): New function.
	(Free_list::remove): New function.
	(Free_list::allocate): New function.
	(Free_list::dump): New function.
	(Free_list::print_stats): New function.
	(Layout_task_runner::run): Resize output file for incremental updates.
	(Layout::Layout): Initialize new data members.
	(Layout::set_incremental_base): New function.
	(Layout::init_fixed_output_section): New function.
	(Layout::layout_eh_frame): Do not build .eh_frame_hdr section for
	incremental updates.
	(Layout::create_gold_note): Do not create gold note section for
	incremental updates.
	(Layout::set_segment_offsets): Do not recalculate RELRO alignment
	for incremental updates.
	(Layout::set_section_offsets): For incremental updates, allocate space
	from free list.
	(Layout::create_symtab_sections): Layout with offsets relative to
	start of section; for incremental updates, allocate space from free
	list.
	(Layout::create_shdrs): For incremental updates, allocate space from
	free list.
	(Layout::finish_dynamic_section): For incremental updates, do not
	check --as-needed (fixed in subsequent patch).
	* layout.h (class Free_list): New class.
	(Layout::set_incremental_base): New function.
	(Layout::incremental_base): New function.
	(Layout::init_fixed_output_section): New function.
	(Layout::allocate): New function.
	(Layout::incremental_base_): New data member.
	(Layout::free_list_): New data member.
	* main.cc (main): Print Free_list statistics.
	* object.cc (Relobj::finalize_incremental_relocs): Add
	clear_counts parameter; clear counts only when clear_counts is set.
	(Sized_relobj::Sized_relobj): Initialize new base class.
	(Sized_relobj::do_layout): Don't report special sections.
	(Sized_relobj::do_for_all_local_got_entries): New function.
	(Sized_relobj::write_local_symbols): Add symtab_off parameter; add
	symtab_off to all symbol table offsets.
	(Sized_relobj::do_get_global_symbol_counts): Add typename keyword.
	* object.h (class Got_offset_list): Move to top of file.
	(Object::Object): Allow case where input_file == NULL.
	(Object::~Object): Likewise.
	(Object::input_file): Assert that input_file != NULL.
	(Object::lock): Allow case where input_file == NULL.
	(Object::unlock): Likewise.
	(Object::is_locked): Likewise.
	(Object::token): Likewise.
	(Object::release): Likewise.
	(Object::is_incremental): New function.
	(Object::get_mtime): New function.
	(Object::for_all_local_got_entries): New function.
	(Object::clear_view_cache_marks): Allow case where input_file == NULL.
	(Object::set_is_in_system_directory): New function.
	(Object::is_in_system_directory): New function.
	(Object::do_is_incremental): New function.
	(Object::do_get_mtime): New function.
	(Object::do_for_all_local_got_entries): New function.
	(Object::is_in_system_directory_): New data member.
	(Relobj::finalize_incremental_relocs): Add clear_counts parameter.
	(class Sized_relobj_base): New class.
	(class Sized_relobj): Derive from Sized_relobj_base.
	(class Sized_relobj::Symbols): Redeclare from base class.
	(class Sized_relobj::local_got_offset_list): Remove.
	(class Sized_relobj::Output_sections): Redeclare from base class.
	(class Sized_relobj::do_for_all_local_got_entries): New function.
	(class Sized_relobj::write_local_symbols): Add offset parameter.
	(class Sized_relobj::local_symbol_offset_): Update comment.
	(class Sized_relobj::local_dynsym_offset_): Update comment.
	* options.cc (Input_arguments::add_file): Remove const.
	* options.h (Input_file_argument::Input_file_argument):
	Initialize arg_serial_ (all constructors).
	(Input_file_argument::set_arg_serial): New function.
	(Input_file_argument::arg_serial): New function.
	(Input_file_argument::arg_serial_): New data member.
	(Input_arguments::Input_arguments): Initialize file_count_.
	(Input_arguments::add_file): Remove const.
	(Input_arguments::number_of_input_files): New function.
	(Input_arguments::file_count_): New data member.
	(Command_line::number_of_input_files): Call
	Input_arguments::number_of_input_files.
	* output.cc (Output_segment_headers::Output_segment_headers):
	Set current size.
	(Output_section::Input_section::current_data_size): New function.
	(Output_section::Output_section): Initialize new data members.
	(Output_section::add_input_section): Don't do merge sections for
	an incremental link; allocate space from free list for an
	incremental update.
	(Output_section::add_output_section_data): Allocate space from
	free list for an incremental update.
	(Output_section::update_data_size): New function.
	(Output_section::set_fixed_layout): New function.
	(Output_section::reserve): New function.
	(Output_segment::set_section_addresses): Remove const.
	(Output_segment::set_section_list_addresses): Remove const; allocate
	space from free list for an incremental update.
	(Output_segment::set_offset): Adjust size of RELRO segment for an
	incremental update.
	* output.h (Output_data::current_data_size): Move here from
	child classes.
	(Output_data::pre_finalize_data_size): New function.
	(Output_data::update_data_size): New function.
	(Output_section_headers::update_data_size): new function.
	(Output_section_data_build::current_data_size): Move to Output_data.
	(Output_data_strtab::update_data_size): New function.
	(Output_section::current_data_size): Move to Output_data.
	(Output_section::set_fixed_layout): New function.
	(Output_section::has_fixed_layout): New function.
	(Output_section::reserve): New function.
	(Output_section::update_data_size): New function.
	(Output_section::has_fixed_layout_): New data member.
	(Output_section::free_list_): New data member.
	(Output_segment::set_section_addresses): Remove const.
	(Output_segment::set_section_list_addresses): Remove const.
	* plugin.cc (Sized_pluginobj::do_for_all_local_got_entries):
	New function.
	* plugin.h (Sized_pluginobj::do_for_all_local_got_entries):
	New function.
	* readsyms.cc (Read_symbols::do_read_symbols): Add library
	parameter when calling Add_symbols constructor; store argument
	serial number for members of a lib group.
	(Add_symbols::locks): Allow case where token == NULL.
	(Add_symbols::run): Report libraries denoted by --start-lib/--end-lib.
	(Read_member::~Read_member): New function.
	(Read_member::is_runnable): New function.
	(Read_member::locks): New function.
	(Read_member::run): New function.
	(Check_script::~Check_script): New function.
	(Check_script::is_runnable): New function.
	(Check_script::locks): New function.
	(Check_script::run): New function.
	(Check_library::~Check_library): New function.
	(Check_library::is_runnable): New function.
	(Check_library::locks): New function.
	(Check_library::run): New function.
	* readsyms.h (Add_symbols::Add_symbols): Add library parameter.
	(Add_symbols::library_): New data member.
	(class Read_member): New class.
	(class Check_script): New class.
	(class Check_library): New class.
	* reloc.cc (Read_relocs::is_runnable): Allow case where
	token == NULL.
	(Read_relocs::locks): Likewise.
	(Scan_relocs::locks): Likewise.
	(Relocate_task::locks): Likewise.
	(Sized_relobj::do_scan_relocs): Tell finalize_incremental_relocs
	to clear counters.
	(Sized_relobj::incremental_relocs_scan): Fix comment.
	(Sized_relobj::do_relocate): Pass output file offset to
	write_local_symbols.
	(Sized_relobj::incremental_relocs_write_reltype): Use reloc_size
	from class declaration.
	* script.cc (read_input_script): Allocate Script_info; pass
	argument serial number to report_script.
	* script.h (class Script_info): Move to incremental.h.
	* symtab.cc (Symbol_table::add_from_incrobj): New function.
	* symtab.h (Symbol_table::add_from_incrobj): New function.
	(Symbol_table::set_file_offset): New function.
@
text
@d3 1
a3 1
// Copyright 2006, 2007, 2008, 2009, 2010 Free Software Foundation, Inc.
d173 9
d312 1
d320 8
@


1.108
log
@	* archive.cc (Archive::include_member): Adjust call to report_object.
	(Add_archive_symbols::run): Add script_info to call to
	report_archive_begin.
	(Lib_group::include_member): Adjust call to report_object.
	(Add_lib_group_symbols::run): Adjust call to report_object.
	* incremental-dump.cc (dump_incremental_inputs): Remove unnecessary
	blocks.  Add object count for script input files.
	* incremental.cc (Incremental_inputs::report_archive_begin): Add
	script_info parameter; change all callers.
	(Incremental_inputs::report_object): Add script_info parameter;
	change all callers.
	(Incremental_inputs::report_script): Store backpointer to
	incremental info entry.
	(Output_section_incremental_inputs::set_final_data_size): Record
	additional information for scripts.
	(Output_section_incremental_inputs::write_info_blocks): Likewise.
	* incremental.h (Incremental_script_entry::add_object): New function.
	(Incremental_script_entry::get_object_count): New function.
	(Incremental_script_entry::get_object): New function.
	(Incremental_script_entry::objects_): New data member; adjust
	constructor.
	(Incremental_inputs::report_archive_begin): Add script_info parameter.
	(Incremental_inputs::report_object): Add script_info parameter.
	(Incremental_inputs_reader::get_object_count): New function.
	(Incremental_inputs_reader::get_object_offset): New function.
	* options.cc (Input_arguments::add_file): Return reference to
	new input argument.
	* options.h (Input_argument::set_script_info): New function.
	(Input_argument::script_info): New function.
	(Input_argument::script_info_): New data member; adjust all
	constructors.
	(Input_file_group::add_file): Return reference to new input argument.
	(Input_file_lib::add_file): Likewise.
	(Input_arguments::add_file): Likewise.
	* readsyms.cc (Add_symbols::run): Adjust call to report_object.
	* script.cc (Parser_closure::Parser_closure): Add script_info
	parameter; adjust all callers.
	(Parser_closure::script_info): New function.
	(Parser_closure::script_info_): New data member.
	(read_input_script): Report scripts earlier to incremental info.
	(script_add_file): Set script_info in Input_argument.
	(script_add_library): Likewise.
	* script.h (Script_options::Script_info): Rewrite class.
@
text
@d1218 1
a1218 1
Input_arguments::add_file(const Input_file_argument& file)
d1220 1
@


1.107
log
@Fix typos in gold.

gold/:
	* dwarf_reader.cc: Remove outdated comment.
	* gold-threads.cc: Fix typo in error message.
	* archive.cc: Fix typos in comments.
	* archive.h: Likewise.
	* arm-reloc-property.cc: Likewise.
	* arm-reloc-property.h: Likewise.
	* arm-reloc.def: Likewise.
	* arm.cc: Likewise.
	* attributes.h: Likewise.
	* cref.cc: Likewise.
	* ehframe.cc: Likewise.
	* fileread.h: Likewise.
	* gold.h: Likewise.
	* i386.cc: Likewise.
	* icf.cc: Likewise.
	* incremental.h: Likewise.
	* int_encoding.cc: Likewise.
	* layout.h: Likewise.
	* main.cc: Likewise.
	* merge.h: Likewise.
	* object.cc: Likewise.
	* object.h: Likewise.
	* options.cc: Likewise.
	* readsyms.cc: Likewise.
	* reduced_debug_output.cc: Likewise.
	* reloc.cc: Likewise.
	* script-sections.cc: Likewise.
	* sparc.cc: Likewise.
	* symtab.h: Likewise.
	* target-reloc.h: Likewise.
	* target.cc: Likewise.
	* target.h: Likewise.
	* timer.cc: Likewise.
	* timer.h: Likewise.
	* x86_64.cc: Likewise.
@
text
@d1217 1
a1217 1
void
d1224 1
a1224 1
      this->input_argument_list_.back().group()->add_file(file);
d1226 1
a1226 1
  else if (this->in_lib_)
d1230 1
a1230 1
      this->input_argument_list_.back().lib()->add_file(file);
d1232 2
a1233 2
  else
    this->input_argument_list_.push_back(Input_argument(file));
@


1.106
log
@	* debug.h (DEBUG_INCREMENTAL): New flag.
	(debug_string_to_enum): Add DEBUG_INCREMENTAL).
	* gold.cc (queue_initial_tasks): Check parameters for incremental link
	mode.
	* incremental.cc (report_command_line): Ignore all forms of
	--incremental.
	* layout.cc (Layout::Layout): Check parameters for incremental link
	mode.
	* options.cc (General_options::parse_incremental): New function.
	(General_options::parse_no_incremental): New function.
	(General_options::parse_incremental_full): New function.
	(General_options::parse_incremental_update): New function.
	(General_options::incremental_mode_): New data member.
	(General_options::finalize): Check incremental_mode_.
	* options.h (General_options): Update help text for --incremental.
	Add --no-incremental, --incremental-full, --incremental-update.
	(General_options::Incremental_mode): New enum type.
	(General_options::incremental_mode): New function.
	(General_options::incremental_mode_): New data member.
	* parameters.cc (Parameters::incremental_mode_): New data member.
	(Parameters::set_options): Set incremental_mode_.
	(Parameters::set_incremental_full): New function.
	(Parameters::incremental): New function.
	(Parameters::incremental_update): New function.
	(set_parameters_incremental_full): New function.
	* parameters.h (Parameters::set_incremental_full): New function.
	(Parameters::incremental): New function.
	(Parameters::incremental_update): New function.
	(Parameters::incremental_mode_): New data member.
	(set_parameters_incremental_full): New function.
	* plugin.cc (Plugin_manager::add_input_file): Check parameters for
	incremental link mode.
	* reloc.cc (Sized_relobj::do_read_relocs): Likewise.
	(Sized_relobj::do_relocate_sections): Likewise.
	* testsuite/Makefile.am (incremental_test): Use --incremental-full
	option.
	* testsuite/Makefile.in: Regenerate.
	* testsuite/incremental_test.sh: Filter all forms of --incremental.
@
text
@d3 1
a3 1
// Copyright 2006, 2007, 2008, 2009 Free Software Foundation, Inc.
d53 1
a53 1
// are constructed.  It is set after contruction of the options within
d62 1
a62 1
// one of thes data structures.
d545 1
a545 1
// of names seperated by commas or colons and puts them in a linked list.
@


1.105
log
@        * options.cc (version_script): Fix small typo in previous
        whitespace tidyup.
@
text
@d320 28
d883 1
d1169 1
a1169 1
  if (this->implicit_incremental_ && !this->incremental())
@


1.104
log
@        * archive.cc: Formatting fixes: Remove whitespace between
        typename and following asterisk.  Remove whitespace between
        function name and opening parenthesis.
        * archive.h: Likewise.
        * arm.cc: Likewise.
        * attributes.cc: Likewise.
        * attributes.h: Likewise.
        * common.cc: Likewise.
        * copy-relocs.cc: Likewise.
        * dirsearch.h: Likewise.
        * dynobj.cc: Likewise.
        * ehframe.cc: Likewise.
        * ehframe.h: Likewise.
        * expression.cc: Likewise.
        * fileread.cc: Likewise.
        * fileread.h: Likewise.
        * gc.h: Likewise.
        * gold-threads.cc: Likewise.
        * gold.cc: Likewise.
        * i386.cc: Likewise.
        * icf.h: Likewise.
        * incremental-dump.cc: Likewise.
        * incremental.cc: Likewise.
        * layout.cc: Likewise.
        * layout.h: Likewise.
        * main.cc: Likewise.
        * merge.cc: Likewise.
        * merge.h: Likewise.
        * object.cc: Likewise.
        * object.h: Likewise.
        * options.cc: Likewise.
        * options.h: Likewise.
        * output.cc: Likewise.
        * output.h: Likewise.
        * plugin.cc: Likewise.
        * plugin.h: Likewise.
        * powerpc.cc: Likewise.
        * reloc.cc: Likewise.
        * script-c.h: Likewise.
        * script-sections.cc: Likewise.
        * script.cc: Likewise.
        * stringpool.cc: Likewise.
        * symtab.cc: Likewise.
        * symtab.h: Likewise.
        * target.cc: Likewise.
        * timer.cc: Likewise.
        * timer.h: Likewise.
        * version.cc: Likewise.
        * x86_64.cc: Likewise.
@
text
@d1359 1
a1359 1
  return* vsi;
@


1.103
log
@2010-05-18  Rafael Espindola  <espindola@@google.com>

	* options.cc (General_options::finalize): Handle -nostdlib.
	* options.h (nostdlib): New option.
	* script.cc (script_add_search_dir): Handle -nostdlib.
@
text
@d208 1
a208 1
parse_uint64(const char* option_name, const char* arg, uint64_t *retval)
d348 1
a348 1
  const char *name;
d525 1
a525 1
  const char *p = arg;
d545 1
a545 1
General_options::check_excluded_libs (const std::string &name) const
d559 1
a559 1
  const char *basename = lbasename(name.c_str());
d644 1
a644 1
usage(const char* msg, const char *opt)
d1359 1
a1359 1
  return *vsi;
@


1.102
log
@2010-04-07  Doug Kwan  <dougkwan@@google.com>

	* arm.cc: Replace "endianity" with "endianness" in comments.
	(Arm_exidx_cantunwind): Ditto.
	(Arm_relobj::Arm_relobj): Initialize merge_flags_and_attribures.
	(Arm_relobj::merge_flags_and_attributes): New method.
	(Arm_relobj::merge_flags_and_attributes_): New data member.
	(Arm_exidx_cantunwind::do_fixed_endian_write): Fix formatting.
	(Arm_relobj::scan_sections_for_stubs): Ditto.
	(Arm_relobj::do_read_symbols): Check to see if we really want to
	merge processor-specific flags and attributes.  Exit early if
	an object is empty except for section names and the undefined symbol.
	(Target_arm::do_finalize_sections): Move check for ELF format to
	Arm_relobj::do_read_symbols.  Merge processor specific flags and
	attributes from a regular object only when we have determined that
	it is aapropriate.  Do not create an .ARM.attributes section in
	output if there is no regular input object.
	(Target_arm::merge_processor_specific_flags): Check
	--warn-mismatch before printing any error.
	(Target_arm::merge_object_attributes): Ditto.
	* gold.cc (queue_middle_tasks): Handle the case in which there is
	no regular object in input.
	* options.cc (General_options::parse_EB): New method.
	(General_options::parse_EL): Same.
	(General_options::General_options): Initialize endianness_.
	* options.h (-EB, -EL, -no-pipeline-knowledge, -p, --warn-mismatch):
	New options.
	(General_options::Endianness): New enum.
	(General_options::endianness): New method.
	(General_options::endianness_): New data member.
	* parameters.cc (Parameters::set_options): Check target endianness.
	(Parameters::set_target_once): Ditto.
	(Parameters::check_target_endianness): New method.
	(parameters_force_valid_target): If either -EL or -EB is specified,
	use it to define endianness of default target.
	* parameters.h (Parameters::check_target_endianness): New method
	declaration.
	* target.h (class Target): Change "endianity" to "endianness"
	in comments.
@
text
@d1077 1
a1077 1
  else
@


1.101
log
@2010-03-22  Rafael Espindola  <espindola@@google.com>

	* archive.cc (Should_include): Move to archive.h.
	(should_include_member): Make it a member of Archive.
	(Lib_group): New.
	(Add_lib_group_symbols): New.
	* archive.h: Include options.h.
	(Archive_member): Moved from Archive.
	(Should_include): Moved from archive.cc.
	(Lib_group): New.
	(Add_lib_group_symbols): New.
	* dynobj.cc (do_should_include_member): New.
	* dynobj.h (do_should_include_member): New.
	* gold.cc (queue_initial_tasks): Update call to queue.
	* main.cc (main): Print lib group stats.
	* object.cc (do_should_include_member): New.
	* object.h: Include archive.h.
	(Object::should_include_member): New.
	(Object::do_should_include_member): New.
	(Sized_relobj::do_should_include_member): New.
	* options.cc (General_options::parse_start_lib): New.
	(General_options::parse_end_lib): New.
	(Input_arguments::add_file): Handle lib groups.
	(Input_arguments::start_group): Check we are not in a lib.
	(Input_arguments::start_lib): New.
	(Input_arguments::end_lib): New.
	* options.h (General_options): Add start_lib and end_lib.
	(Input_argument::lib_): New.
	(Input_argument::lib): New.
	(Input_argument::is_lib): New.
	(Input_file_lib): New.
	(Input_arguments::in_lib_): New.
	(Input_arguments::in_lib): New.
	(Input_arguments::start_lib): New.
	(Input_arguments::end_lib_): New.
	* plugin.cc (Pluginobj::get_symbol_resolution_info): Mark symbols
	in unused members as preempted.
	(Sized_pluginobj::do_should_include_member): New.
	* plugin.h (Sized_pluginobj::do_should_include_member): New.
	* readsyms.cc (Read_symbols::locks): If we are just reading a member,
	return the blocker.
	(Read_symbols::do_whole_lib_group): New.
	(Read_symbols::do_lib_group): New.
	(Read_symbols::do_read_symbols): Handle lib groups.
	(Read_symbols::get_name): Handle lib groups.
	* readsyms.h (Read_symbols): Add an archive member pointer.
	(Read_symbols::do_whole_lib_group): New.
	(Read_symbols::do_lib_group): New.
	(Read_symbols::member_): New.
	* script.cc (read_input_script): Update call to queue_soon.
@
text
@d617 12
d860 2
a861 1
    fix_v4bx_(FIX_V4BX_NONE)
@


1.100
log
@2010-02-26  Doug Kwan  <dougkwan@@google.com>

	* arm.cc (Target_arm::scan_reloc_for_stub): Move code handling
	R_ARM_V4BX to Target_arm::scan_reloc_section_for_stubs.
	(Target_arm::scan_reloc_section_for_stubs): Instead of calling
	scan_reloc_for_stub, do all processing of R_ARM_V4BX here.
	* options.cc (General_options::General_options): Initialize member
	fix_v4bx_.
	* testsuite/Makefile.am (check_SCRIPTS): Add arm_fix_v4bx.sh
	(check_DATA): Add arm_fix_v4bx.stdout, arm_fix_v4bx_interworking.stdout
	and rm_no_fix_v4bx.stdout
	(arm_fix_v4bx.stdout, arm_fix_v4bx, arm_fix_v4bx.o,
	arm_fix_v4bx_interworking.stdout, arm_fix_v4bx_interworking,
	arm_no_fix_v4bx.stdout, arm_no_fix_v4bx): New make rules.
	(MOSTLYCLEANFILES): Add arm_fix_v4bx, arm_fix_v4bx_interworking
	and arm_no_fix_v4bx.
	* Makefile.in: Regenerate.
	* testsuite/arm_fix_v4bx.s: New file.
	* testsuite/arm_fix_v4bx.sh: Ditto.
@
text
@d502 14
d1178 1
a1178 3
  if (!this->in_group_)
    this->input_argument_list_.push_back(Input_argument(file));
  else
d1184 8
d1201 2
d1218 24
@


1.99
log
@2010-01-22  Viktor Kutuzov  <vkutuzov@@accesssoftek.com>

	* gold/arm.cc (Target_arm): Updated fix_v4bx method and usage of
	Fix_v4bx enum values .
	* gold/options.h (General_options): New option definitions.
	(General_options::fix_v4bx): New method.
	(General_options::Fix_v4bx): New enum.
	* gold/options.cc (General_options::parse_fix_v4bx): New method.
	(General_options::parse_fix_v4bx_interworking): New method.
@
text
@d833 2
a834 1
    section_starts_()
@


1.98
log
@	PR 10980
	* options.cc (General_options::parse_section_start): New function.
	(General_options::section_start): New function.
	(General_options::General_options): Initialize all members.
	* options.h: Include <map>
	(class General_options): Add --section-start.  Add section_starts_
	member.
	* layout.cc (Layout::attach_allocated_section_to_segment): If
	--section-start was used, set the address of the segment.  Remove
	local sort_sections.
	(Layout::relaxation_loop_body): If the address of the load segment
	has been set by --section-start, don't use it.
	* output.h (Output_segment::update_flags_for_output_section): New
	function.
	* output.cc (Output_segment::add_output_section): Call
	update_flags_for_output_section.
@
text
@d589 14
@


1.97
log
@	PR 10861
	* script.h (class Version_script_info): Define Language enum.
	Update declarations.  Define Glob, Exact, and Lookup types.  Add
	new fields globals_, locals_, and is_finalized_.
	* script.cc: Various formatting fixes.
	(class Parser_closure): Change language_stack_ from a vector of
	std::string to one of Version_script_info::Language.  Adjust all
	uses accordingly.
	(class Lazy_demangler): Remove.
	(struct Version_expression): Change language from std::string to
	Version_script_info::Language.
	(Version_script_info::Version_script_info): New function.
	(Version_script_info::~Version_script_info): Don't call clear.
	(Version_script_info::finalize): New function.
	(Version_script_info::build_lookup_tables): New function.
	(Version_script_info::build_expression_list_lookup): New
	function.
	(Version_script_info::get_symbol_version_helper): Rewrite to use
	lookup tables.
	(Version_script_info::print_expression_list): Adjust to use
	Version_script_info::Language.
	(script_push_lex_into_version_mode): Check that the version script
	has not been finalized.
	(version_script_push_lang): Change language string to
	Version_script_info::Language.
	* options.cc (Command_line::version_script): New function.
	* options.h (class General_options): Add finalize_dynamic_list
	function.  Change version_script from declaration to definition.
	* testsuite/ver_test_4.script: Remove duplicate def of t2_2.
	* testsuite/version_script.map: Remove duplicate def of foo.
	* testsuite/Makefile.am (ver_matching_def.so): Depend upon
	version_script.map.
	* testsuite/Makefile.in: Rebuild.
@
text
@d401 57
d809 11
a819 3
    execstack_status_(General_options::EXECSTACK_FROM_INPUT), static_(false),
    do_demangle_(false), plugins_(),
    incremental_disposition_(INCREMENTAL_CHECK), implicit_incremental_(false)
@


1.96
log
@* options.cc (General_options::parse_version): Allow -v to exit
without an error if there is nothing to link.
@
text
@d1212 11
@


1.95
log
@2009-12-21  Sriraman Tallam  <tmsriram@@google.com>

	* options.cc (General_options::parse_version): Make -v continue and do
	the link like GNU ld does.
@
text
@d293 1
@


1.94
log
@	Add support for -pie.
	* options.h (class General_options): Add -pie and
	--pic-executable.
	(General_options::output_is_position_independent): Test -pie.
	(General_options::output_is_executable): Return true if not shared
	and not relocatable.
	(General_options::output_is_pie): Remove.
	* options.cc (General_options::finalize): Reject incompatible uses
	of -pie.
	* gold.cc (queue_middle_tasks): A -pie link is not static.
	* symtab.h (Symbol::needs_plt_entry): Return false if -pie.
	* symtab.cc (Symbol::final_value_is_known): Return false if
	output_is_position_independent.
	* layout.cc (Layout::set_segment_offsets): Start at address 0 if
	output_is_position_independent.
	* output.cc (Output_file_header::do_sized_write): Use ET_DYN if
	output_is_position_independent.
	* i386.cc (Output_data_plt_i386::do_write): Use the PIC PLT if
	output_is_position_independent.
	* testsuite/Makefile.am (check_PROGRAMS): Add basic_pie_test and
	two_file_pie_test.
	(basic_pie_test.o, basic_pie_test): New targets.
	(two_file_test_1_pie.o, two_file_test_1b_pie.o): New targets.
	(two_file_test_2_pie.o, two_file_test_main_pie.o): New targets.
	(two_file_pie_test): New target.
	* testsuite/Makefile.in: Rebuild.
	* README: Remove note saying that -pie is not supported.
@
text
@d291 4
a294 2
  gold::print_version(opt[0] == '-' && opt[1] == 'v');
  ::exit(EXIT_SUCCESS);
@


1.93
log
@	* gc.h (gc_process_relocs): Check if icf is enabled using new
	function.
	* gold.cc (queue_initial_tasks): Likewise.
	(queue_middle_tasks): Likewise.
	* object.cc (do_layout): Likewise.
	* symtab.cc (is_section_folded): Likewise.
	* main.cc (main): Likewise.
	* reloc.cc (Read_relocs::run): Likewise.
	(Sized_relobj::do_scan_relocs): Likewise.
	* icf.cc (is_function_ctor_or_dtor): New function.
	(Icf::find_identical_sections): Check if function is ctor or dtor when
	safe icf is chosen.
	* options.h (General_options::icf): Change option to be an enum.
	(Icf_status): New enum.
	(icf_enabled): New method.
	(icf_safe_folding): New method.
	(set_icf_status): New method.
	(icf_status_): New variable.
	* (options.cc) (General_options::finalize): Set icf_status_.
	* testsuite/Makefile.am: Add commands to build icf_safe_test. Modify
	icf_test and icf_keep_unique_test to use the --icf enum flag.
	* testsuite/icf_safe_test.sh: New file.
	* testsuite/icf_safe_test.cc: New file.
@
text
@d1004 2
d1009 2
d1017 5
a1021 2
      && (this->shared() || this->relocatable()))
    gold_fatal(_("binary output format not compatible with -shared or -r"));
@


1.92
log
@2009-10-10  Chris Demetriou  <cgd@@google.com>

	* options.h (Input_file_argument::Input_file_type): New enum.
	(Input_file_argument::is_lib_): Replace with...
	(Input_file_argument::type_): New member.
	(Input_file_argument::Input_file_argument): Take Input_file_type
	'type' rather than boolean 'is_lib' as second argument.
	(Input_file_argument::is_lib): Use type_.
	(Input_file_argument::is_searched_file): New function.
	(Input_file_argument::may_need_search): Handle is_searched_file.
	* options.cc (General_options::parse_library): Support -l:filename.
	(General_options::parse_just_symbols): Update for Input_file_argument
	changes.
	(Command_line::process): Likewise.
	* archive.cc (Archive::get_file_and_offset): Likewise.
	* plugin.cc (Plugin_manager::release_input_file): Likewise.
	* script.cc (read_script_file, script_add_file): Likewise.
	* fileread.cc (Input_file::Input_file): Likewise.
	(Input_file::will_search_for): Handle is_searched_file.
	(Input_file::open): Likewise.
	* readsyms.cc (Read_symbols::get_name): Likewise.
	* testsuite/Makefile.am (searched_file_test): New test.
	* testsuite/Makefile.in: Regenerate.
	* testsuite/searched_file_test.cc: New file.
	* testsuite/searched_file_test_lib.cc: New file.
@
text
@d877 9
@


1.91
log
@2009-10-09  Doug Kwan  <dougkwan@@google.com>

	* layout.cc (Layout::make_output_section): Call target hook to make
	ordinary output section.
	(Layout::finalize): Adjust parameter list of call the
	Target::may_relax().
	* layout.h (class Layout::section_list): New method.
	* merge.h (Output_merge_base::entsize): Change visibility to public.
	(Output_merge_base::is_string, Output_merge_base::do_is_string):
	New methods.
	(Output_merge_string::do_is_string): New method.
	* object.cc (Sized_relobj::do_setup): renamed from
	Sized_relobj::set_up.
	* object.h (Sized_relobj::adjust_shndx,
	Sized_relobj::initializ_input_to_output_maps,
	Sized_relobj::free_input_to_output_maps): Change visibilities to
	protected.
	(Sized_relobj::setup): Virtualize.
	(Sized_relobj::do_setup): New method declaration.
	(Sized_relobj::invalidate_section_offset,
	Sized_relobj::do_invalidate_section_offset): New method decfinitions.
	(Sized_relobj::elf_file, Sized_relobj::local_values): New methods.
	* options.cc (parse_int): New function.
	* options.h (parse_int): New declaration.
	(DEFINE_int): New macro.
	(stub_group_size): New option.
	* output.cc (Output_section::Output_section): Initialize memebers
	merge_section_map_, merge_section_by_properties_map_,
	relaxed_input_section_map_, is_relaxed_input_section_map_valid_.
	(Output_section::add_input_section): Handled deferred code-fill
	generation and remove an old comment.
	(Output_section::add_relaxed_input_section): New method definition.
	(Output_section::add_merge_input_section): Use merge section by
	properties map to speed to search.  Update merge section maps
	as appropriate.
	(Output_section::build_relaxation_map): New method definition.
	(Output_section::convert_input_sections_in_list_to_relaxed_sections):
	Same.
	(Output_section::relax_input_section): Renamed to
	Output_section::convert_input_sections_to_relaxed_sections and change
	interface to take a vector of pointers to relaxed sections.
	(Output_section::find_merge_section,
	Output_section::find_relaxed_input_section): New method definitions.
	(Output_section::is_input_address_mapped,
	Output_section::output_offset, Output_section::output_address):
	Use output section data maps to speed up searching.
	(Output_section::find_starting_output_address): Add comments.
	(Output_section::do_write,
	Output_section::write_to_postprocessing_buffer): Do code-fill
	generation as appropriate.
	(Output_section::get_input_sections): Invalidate relaxed input section
	map.
	(Output_section::restore_states): Adjust type of checkpoint .
	Invalidate relaxed input section map.
	* output.h (Output_merge_base): New class declaration.
	(Input_section_specifier): New class defintion.
	(class Output_relaxed_input_section) Change base class to
	Output_section_data_build.
	(Output_relaxed_input_section::Output_relaxed_input_section): Adjust
	base class initializer.
	(Output_section::add_relaxed_input_section): New method declaration.
	(Output_section::Input_section): Change visibility to protected.
     	(Output_section::Input_section::relobj,
	Output_section::Input_section::shndx): Handle relaxed input sections.
	Output_section::input_sections) Change visibility to protected.  Also
	define overload to return a non-const pointer.
	(Output_section::Merge_section_properties): New class defintion.
	(Output_section::Merge_section_by_properties_map,
	Output_section::Output_section_data_by_input_section_map,
	Output_section::Relaxation_map): New types.
	(Output_section::relax_input_section): Rename method to
	Output_section::convert_input_sections_to_relaxed_sections and change
	interface to take a vector of relaxed section pointers.
	(Output_section::find_merge_section,
	Output_section::find_relaxed_input_section,
	Output_section::build_relaxation_map,
	Output_section::convert_input_sections_in_list_to_relaxed_sections):
	New method declarations.
	(Output_section::merge_section_map_
	Output_section::merge_section_by_properties_map_,
	Output_section::relaxed_input_section_map_,
	Output_section::is_relaxed_input_section_map_valid_,
	Output_section::generate_code_fills_at_write_): New data members.
	* script-sections.cc
	(Output_section_element_input::set_section_addresses): Call
	current_data_size and addralign methods of relaxed input sections.
	(Orphan_output_section::set_section_addresses): Call current_data_size
	and addralign methods of relaxed input sections.
	* symtab.cc (Symbol_table::compute_final_value): Extract template
	from the body of Symbol_table::sized_finalize_symbol.
	(Symbol_table::sized_finalized_symbol): Call
	Symbol_table::compute_final_value.
	* symtab.h (Symbol_table::Compute_final_value_status): New enum type.
	(Symbol_table::compute_final_value): New templated method declaration.
	* target.cc (Target::do_make_output_section): New method defintion.
	* target.h (Target::make_output_section): New method declaration.
	(Target::relax): Add more parameters for input objects, symbol table
	and layout.  Adjust call to do_relax.
	(Target::do_make_output_section): New method declaration.
	(Target::do_relax): Add parameters for input objects, symbol table
	and layout.
@
text
@d344 13
a356 1
  Input_file_argument file(arg, true, "", false, *this);
d393 2
a394 1
  Input_file_argument file(arg, false, "", true, *this);
d1173 3
a1175 2
          Input_file_argument file(argv[i], false, "", false,
                                   this->position_options_);
@


1.90
log
@	* object.cc (Sized_relobj::do_count): Test should_retain_symbol map.
	* options.cc: Include <cerrno> and <fstream>.
	(General_options::finalize): Parse -retain-symbols-file tag.
	* options.h: New flag.
	(General_options): New method should_retain_symbol, new
	variable symbols_to_retain.
	* symtab.cc (Symbol_table::sized_finalize_symbol): Test
	should_retain_symbol map.
	* testsuite/Makefile.am (retain_symbols_file_test): New test.
	* testsuite/Makefile.in: Regenerate.
	* testsuite/retain_symbols_file_test.sh: New file.
@
text
@d198 10
@


1.89
log
@	* options.h (Command_line::Pre_options): New class.
	(Command_line::pre_options): New member.
	* options.cc (gold::options::ready_to_register): New variable.
	(One_option::register_option): Do nothing if not registering options.
	Assert if same short option registered twice.
	(General_options::General_options): Turn off option registration when
	done constructing.
	(Command_line::Pre_options::Pre_options): New constructor.
@
text
@d25 1
d28 1
d943 19
d976 4
@


1.89.2.1
log
@Merge elfcpp and gold from trunk.
@
text
@a24 1
#include <cerrno>
a26 1
#include <fstream>
a195 10
parse_int(const char* option_name, const char* arg, int* retval)
{
  char* endptr;
  *retval = strtol(arg, &endptr, 0);
  if (*endptr != '\0')
    gold_fatal(_("%s: invalid option value (expected an integer): %s"),
               option_name, arg);
}

void
d332 1
a332 13
  Input_file_argument::Input_file_type type;
  const char *name;
  if (arg[0] == ':')
    {
      type = Input_file_argument::INPUT_FILE_TYPE_SEARCHED_FILE;
      name = arg + 1;
    }
  else
    {
      type = Input_file_argument::INPUT_FILE_TYPE_LIBRARY;
      name = arg;
    }
  Input_file_argument file(name, type, "", false, *this);
d369 1
a369 2
  Input_file_argument file(arg, Input_file_argument::INPUT_FILE_TYPE_FILE,
			   "", true, *this);
a851 9
  // icf_status_ is a three-state variable; update it based on the
  // value of this->icf().
  if (strcmp(this->icf(), "none") == 0)
    this->set_icf_status(ICF_NONE);
  else if (strcmp(this->icf(), "safe") == 0)
    this->set_icf_status(ICF_SAFE);
  else
    this->set_icf_status(ICF_ALL);

a940 19
  // Parse the contents of -retain-symbols-file into a set.
  if (this->retain_symbols_file())
    {
      std::ifstream in;
      in.open(this->retain_symbols_file());
      if (!in)
        gold_fatal(_("unable to open -retain-symbols-file file %s: %s"),
                   this->retain_symbols_file(), strerror(errno));
      std::string line;
      std::getline(in, line);   // this chops off the trailing \n, if any
      while (in)
        {
          if (!line.empty() && line[line.length() - 1] == '\r')   // Windows
            line.resize(line.length() - 1);
          this->symbols_to_retain_.insert(line);
          std::getline(in, line);
        }
    }

a950 2
  if (this->shared() && this->pie())
    gold_fatal(_("-shared and -pie are incompatible"));
a953 6
  if (this->pie() && this->relocatable())
    gold_fatal(_("-pie and -r are incompatible"));

  // TODO: implement support for -retain-symbols-file with -r, if needed.
  if (this->relocatable() && this->retain_symbols_file())
    gold_fatal(_("-retain-symbols-file does not yet work with -r"));
d956 2
a957 5
      && (this->shared()
	  || this->pie()
	  || this->relocatable()))
    gold_fatal(_("binary output format not compatible "
		 "with -shared or -pie or -r"));
d1125 2
a1126 3
	  Input_file_argument file(argv[i],
				   Input_file_argument::INPUT_FILE_TYPE_FILE,
				   "", false, this->position_options_);
@


1.88
log
@	PR 10237
	* options.cc (General_options::parse_V): Set printed_version_.
	(General_options::General_options): Initialize printed_version_.
	* options.h (class General_options): Add printed_version_ field.
	* gold.cc (queue_initial_tasks): If there are no input files,
	don't give a fatal error if we printed the version information.
	(queue_middle_tasks): If using -r with a shared object, give a
	fatal error rather than an ordinary error.
@
text
@d50 5
d68 3
d86 4
a89 1
    short_options[shortname_as_int] = this;
d728 2
d1055 7
@


1.87
log
@	PR 10030
	* yyscript.y: Parse TARGET.
	* script.cc (script_set_target): New function.
	* script-c.h (script_set_target): Declare.
	* options.cc (General_options::string_to_object_format): Rename
	from string_to_object_format in anonymous namespace.  Change
	callers.
	* options.h (class General_options): Declare
	string_to_object_format.
@
text
@d276 1
d712 2
a713 1
  : execstack_status_(General_options::EXECSTACK_FROM_INPUT), static_(false),
@


1.86
log
@2009-05-26  Doug Kwan  <dougkwan@@google.com>

        * options.cc (General_options::parse_exclude_libs).  Fix a comment.
        (General_options::check_excluded_libs): Strip off directories in
        archive name before matching like GNU ld does.
        * testsuite/Makefile.am (MOSTLYCLEANFILES,
        exclude_libs_test_DEPENDENCIES): Add alt/libexclude_libs_test_3.a
        (exclude_libs_test_LDFLAGS): Add linker option
        -Wl,--exclude-libs,libexclude_libs_test_3
        (exclude_libs_test_LADD): Add alt/libexclude_libs_test_3.a as
        an explicit archive without using -l.
        (alt/libexclude_libs_test_3.a): New make rule.
        * testsuite/Makefile.in: Regenerate.
        * testsuite/exclude_libs_test.c : Declare lib3_default().
        (main): Call it.
        * exclude_libs_test.sh: Add tests for alt/exclude_libs_test_3.a.
        * exclude_libs_test_3.c: New file.
@
text
@d469 23
a514 23
// Recognize input and output target names.  The GNU linker accepts
// these with --format and --oformat.  This code is intended to be
// minimally compatible.  In practice for an ELF target this would be
// the same target as the input files; that name always start with
// "elf".  Non-ELF targets would be "srec", "symbolsrec", "tekhex",
// "binary", "ihex".

gold::General_options::Object_format
string_to_object_format(const char* arg)
{
  if (strncmp(arg, "elf", 3) == 0)
    return gold::General_options::OBJECT_FORMAT_ELF;
  else if (strcmp(arg, "binary") == 0)
    return gold::General_options::OBJECT_FORMAT_BINARY;
  else
    {
      gold::gold_error(_("format '%s' not supported; treating as elf "
                         "(supported formats: elf, binary)"),
                       arg);
      return gold::General_options::OBJECT_FORMAT_ELF;
    }
}

d720 1
a720 1
  return string_to_object_format(this->format());
d726 1
a726 1
  return string_to_object_format(this->oformat());
@


1.85
log
@2009-05-19  Doug Kwan  <dougkwan@@google.com>

	* archive.cc (Archive::Archive): Move constructor from archive.h
	to here.  Initialize no_export_.
	(Archive::get_elf_object_for_member): Set no_export flag of object.
	* archive.h (Archive::Archive): Move constructor body to
	archive.cc.
	(Archive::no_export): New method.
	(Archive::no_export_): New field.
	* object.h (Object::Object): Initialize no_export_ to false.
	(Object::no_export, Object::set_no_export): New methods.
	(Object::no_export_): New field.
	* options.cc (General_options::parse_exclude_libs): New method.
	(General_options::check_excluded_libs) Same.
	* options.h (exclude_libs): New option.
	(General_options::check_excluded_libs): New method declaration.
	(General_options::excluded_libs_): New field.
	* symtab.cc (Symbol_table::add_from_relobj): Hide symbols with
	default or protected visibility if an object has no-export flag set.
	testsuite/Makefile.am (check_PROGRAMS): Add exclude_libs_test.
	(check_SCRIPTS): Add exclude_libs_test.sh.
	(check_DATA): Add exclude_libs_test.syms.
	(MOSTLYCLEANFILES): Add exclude_libs_test.syms,
	libexclude_libs_test_1.a and libexclude_libs_test_2.a.
	(exclude_libs_test_SOURCES, exclude_libs_test_DEPENDENCIES,
	exclude_libs_test_LDFLAGS and exclude_libs_test_LDADD): Define.
	(exclude_libs_test.syms, libexclude_libs_test_1.a,
	libexclude_libs_test_2.a): New rules.
	* testsuite/Makefile.in: Regenerate.
	* testsuite/exclude_libs_test.c: New file.
	* testsuite/exclude_libs_test.sh: Ditto.
	* testsuite/exclude_libs_test_1.c: Ditto.
	* testsuite/exclude_libs_test_2.c: Ditto.
@
text
@d406 1
a406 1
// of names seperated by commas or semi-colons and puts them in a linked list.
d447 3
d451 1
a451 1
  p = excluded_libs_.find(name);
d456 1
a456 1
  size_t length = name.length();
d458 2
a459 2
      && (name[length-2] == '.')
      && (name[length-1] == 'a'))
d461 1
a461 1
      p = excluded_libs_.find(name.substr(0, length - 2));
@


1.84
log
@	* options.cc (parse_short_option): Keep dash_z from registering itself.
@
text
@d405 61
@


1.83
log
@	PR 6811
	* options.h (class Search_directory): Add is_system_directory.
	(class General_options): Declare is_in_system_directory.
	* options.cc (get_relative_sysroot): Make static.
	(get_default_sysroot): Make static.
	(General_optoins::is_in_system_directory): New function.
	* fileread.cc (Input_file::is_in_system_directory): New function.
	* fileread.h (class Input_file): Declare is_in_system_directory.
	* object.h (class Object): Add is_in_system_directory.
	(class Input_objects): Remove system_library_directory_ field.
	* object.cc (Input_objects::add_object): Don't set
	system_library_directory_.
	(input_objects::found_in_system_library_directory): Remove.
	* symtab.cc (Symbol_table::write_globals): Remove input_objects
	parameter.  Change all callers.
	(Symbol_table::sized_write_globals): Likewise.
	(Symbol_table::warn_about_undefined_dynobj_symbol): Likewise.
	Call Object::is_in_system_directory.
	* symtab.h (class Symbol_table): Update declarations.
@
text
@d590 1
a590 1
                                          'z', "", "-z", "Z-OPTION", false,
@


1.82
log
@	* options.h (enum Incremental_disposition): Define.
	(class General_options): Add new options: --incremental,
	--incremental_changed, --incremental_unchanged,
	--incremental_unknown.  Add incremental_disposition_ and
	implicit_incremental_ fields.
	(General_options::incremental_disposition): New function.
	(class Position_dependent_options): Add incremental_disposition
	option.
	(Position_dependent_options::copy_from_options): Set incremental
	dispositions.
	* options.cc (General_options::parse_incremental_changed): New
	function.
        (General_options::parse_incremental_unchanged): New function.
        (General_options::parse_incremental_unknown): New function.
        (General_options::General_options): Initialize new fields
	incremental_disposition_ and implicit_incremental_.
        (General_options::finalize): Check for uasge of --incremental-*
	without --incremental.
@
text
@d3 1
a3 1
// Copyright 2006, 2007, 2008 Free Software Foundation, Inc.
d454 1
a454 1
char*
d475 1
a475 1
const char*
d687 20
@


1.81
log
@* options.h (General_options::gc_sections): Define as a no-op for now.
(General_options::no_keep_memory): Ditto.
(General_options::Bshareable): Define.
* options.cc (General_options::finalize): Honor -Bshareable.
@
text
@d293 24
d648 2
a649 1
    do_demangle_(false), plugins_()
d867 4
@


1.80
log
@2008-12-05  Rafael Avila de Espindola  <espindola@@google.com>

	* options.cc (General_options::parse_plugin_opt): New.
	(General_options::add_plugin): The argument now is just the filename.
	(General_options::add_plugin_option): New.
	* options.h (plugin_opt): New.
	(add_plugin): Change argument name.
	(add_plugin_option): New.
	* plugin.cc (Plugin::load): Don't parse the plugin option.
	* plugin.h (Plugin::Plugin): Rename argument. Init filename_.
	(Plugin::add_option): New.
	(Plugin::args_): Change type.
	(Plugin::filename_): New.
	(Plugin_manager::add_plugin_option): New.
	* testsuite/Makefile.am (plugin_test_1): Use new syntax.
	* testsuite/Makefile.in: Regenerate.
@
text
@d699 3
@


1.79
log
@	* options.cc (General_options::parse_dynamic_list): New function.
	* options.h (General_options): New flags dynamic_list,
	dynamic_list_data, dynamic_list_cpp_new, and
	dynamic_list_cpp_typeinfo.  New variable dynamic_list_.
	(General_options::in_dynamic_list): New function.
	* script.cc (Lex::Mode): New enum DYNAMIC_LIST.
	(Lex::can_start_name): Add support for DYNAMIC_LIST mode.
	(Lex::can_continue_name): Likewise.
	(yylex): Likewise.
	(read_script_file): New parameter script_options.
	(read_dynamic_list): New function.
	(Script_options::define_dynamic_list): New function.
	(dynamic_list_keyword_parsecodes): New variable.
	(dynamic_list_keywords): New variable.
	* script.h (Script_options::define_dynamic_list): New function
	prototype.
	(read_dynamic_list): New function prototype.
	* symtab.cc (strprefix): New macro.
	(Symbol::should_add_dynsym_entry): Support dynamic_list,
	dynamic_list_data, dynamic_list_cpp_new, and
	dynamic_list_cpp_typeinfo.
	* yyscript.y (PARSING_DYNAMIC_LIST): New token.
	(dynamic_list_expr): New rule.
	(dynamic_list_nodes): Likewise.
	(dynamic_list_node): Likewise.
	* testsuite/Makefile.am (dynamic_list): New test.
	* testsuite/Makefile.in: Regenerated.
	* testsuite/dynamic_list.t: New file.
	* testsuite/dynamic_list.sh: New file.
@
text
@d307 9
d662 1
a662 1
// Add a plugin and its arguments to the list of plugins.
d665 1
a665 1
General_options::add_plugin(const char* arg)
d669 11
a679 1
  this->plugins_->add_plugin(arg);
@


1.78
log
@	* options.c (General_options::finalize): Add check for -static and
	-shared.
	* gold.cc (queue_middle_tasks): Assert that list of dynamic objects
	is not empty.
@
text
@d351 8
@


1.77
log
@Add plugin functionality for link-time optimization (LTO).

include/:
	* plugin-api.h: New file.

gold/:
	* configure.ac (plugins): Add --enable-plugins option.
	* configure: Regenerate.
	* config.in: Regenerate.
	* Makefile.am (LIBDL): New variable.
	(CCFILES): Add plugin.cc.
	(HFILES): Add plugin.h.
	(ldadd_var): Add LIBDL.
	* Makefile.in: Regenerate.

	* archive.cc: Include "plugin.h".
	(Archive::setup): Don't preread archive symbols when using a plugin.
	(Archive::get_file_and_offset): Add memsize parameter.  Change callers.
	(Archive::get_elf_object_for_member): Call plugin hooks for claiming
	files.
	(Archive::include_member): Add symbols from plugin objects.
	* archive.h (Archive::get_file_and_offset): Add memsize parameter.
	* descriptors.cc (Descriptors::open): Check for file descriptors
	abandoned by plugins.
	(Descriptors::claim_for_plugin): New function.
	* descriptors.h (Descriptors::claim_for_plugin): New function.
	(Open_descriptor::is_claimed): New field.
	(claim_descriptor_for_plugin): New function.
	* fileread.cc (File_read::claim_for_plugin): New function.
	* fileread.h (File_read::claim_for_plugin): New function.
	(File_read::descriptor): New function.
	* gold.cc: Include "plugin.h".
	(queue_initial_tasks): Add task to call plugin hooks for generating
	new object files.
	* main.cc: Include "plugin.h".
	(main): Load plugin libraries.
	* object.h (Pluginobj): Declare.
	(Object::pluginobj): New function.
	(Object::do_pluginobj): New function.
	(Object::set_target): New function.
	* options.cc: Include "plugin.h".
	(General_options::parse_plugin): New function.
	(General_options::General_options): Initialize plugins_ field.
	(General_options::add_plugin): New function.
	* options.h (Plugin_manager): Declare.
	(General_options): Add --plugin option.
	(General_options::has_plugins): New function.
	(General_options::plugins): New function.
	(General_options::add_plugin): New function.
	(General_options::plugins_): New field.
	* plugin.cc: New file.
	* plugin.h: New file.
	* readsyms.cc: Include "plugin.h".
	(Read_symbols::do_read_symbols): Check for archive before checking
	for ELF file.  Call plugin hooks to claim files.
	* resolve.cc (Symbol_table::resolve): Record when symbol is referenced
	from a real object file; force override when processing replacement
	files.
	* symtab.cc (Symbol::init_fields): Initialize in_real_elf_ field.
	(Symbol::init_base_object): Likewise.
	(Symbol::init_base_output_data): Likewise.
	(Symbol::init_base_output_segment): Likewise.
	(Symbol::init_base_constant): Likewise.
	(Symbol::init_base_undefined): Likewise.
	(Symbol::output_section): Assert that object is not a plugin.
	(Symbol_table::add_from_pluginobj): New function.
	(Symbol_table::sized_finalize_symbol): Treat symbols from plugins as
	undefined.
	(Symbol_table::sized_write_globals): Likewise.
	(Symbol_table::add_from_pluginobj): Instantiate template.
	* symtab.h (Sized_pluginobj): Declare.
	(Symbol::in_real_elf): New function.
	(Symbol::set_in_real_elf): New function.
	(Symbol::in_real_elf_): New field.
	(Symbol_table::add_from_pluginobj): New function.

	* testsuite/Makefile.am (AM_CFLAGS): New variable.
	(LIBDL): New variable.
	(LDADD): Add LIBDL.
	(check_PROGRAMS): Add plugin_test_1 and plugin_test_2.
	(check_SCRIPTS): Add plugin_test_1.sh and plugin_test_2.sh.
	(check_DATA): Add plugin_test_1.err and plugin_test_2.err.
	(MOSTLYCLEANFILES): Likewise.
	* testsuite/Makefile.in: Regenerate.
	* testsuite/plugin_test.c: New file.
	* testsuite/plugin_test_1.sh: New file.
	* testsuite/plugin_test_2.sh: New file.
@
text
@d795 3
@


1.76
log
@2008-08-28  Kris Van Hees  <kris.van.hees@@oracle.com>

        PR gold/6858
        * options.cc (General_options::finalize): Allow undefined symbols
        in shlibs if linking -shared.

        PR gold/6859
        * symtab.cc (Symbol::init_base_undefined): Mark explicitly undefined
        symbols as not needing a dynsym entry.
@
text
@d39 1
d300 9
d607 1
a607 1
    do_demangle_(false)
d645 10
@


1.75
log
@	* options.h (class General_options): Define -n/--nmagic and
	-N/--omagic.
	* options.cc (General_options::finalize): For -n/--nmagic or
	-N/--omagic, set -static.
	* layout.cc (Layout::attach_allocated_section_to_segment): If
	-N/--omagic, don't put read-only and read-write sections in
	different segments.
	(Layout::find_first_load_seg): If -N/--omagic, don't insist on
	finding a read-only segment.
	(Layout::set_segment_offsets): If -N/--omagic or -n/--nmagic,
	don't set the minimum segment alignment to the common page size,
	and don't set the file offset to the address modulo the page size.
	* script-sections.cc (Script_sections::create_segments): If
	-n/--omagic, don't put read-only and read-write sections in
	different segments.
@
text
@d767 3
@


1.74
log
@elfcpp/:
	* dwarf.h (enum DW_FORM): Define.
gold/:
	* reduced_debug_output.cc: New file.
	* reduced_debug_output.h: New file.
	* options.h (class General_optoins): Add --strip-debug-non-line.
	* options.cc (General_options::finalize): Add strip_debug_non_line
	to the strip heirarchy.
	* layout.h (class Layout): Add debug_abbrev_ and debug_info_
	fields.
	* layout.cc: Include "reduced_debug_output.h".
	(Layout::Layout): Initialize new fields.
	(line_only_debug_sections): New static array.
	(is_lines_only_debug_sections): New static inline function.
	(Layout::include_section): Handle --strip-debug-non-line.
	(Layout::make_output_section): If --strip-debug-non-line, build
	new output sections for .debug_abbrev and .debug_info.
	* dwarf_reader.cc (read_unsigned_LEB_128): Move to namespace
	gold.  Warn about possible overflow.
	(read_signed_LEB_128): Likewise.
	* dwarf_reader.h: (read_unsigned_LEB_128): Declare.
	(read_signed_LEB_128): Declare.
	* Makefile.am (CCFILES): Add reduced_debug_output.cc.
	(HFILES): Add reduced_debug_output.h.
	* Makefile.in: Rebuild.
@
text
@d709 4
@


1.73
log
@	* mapfile.cc: New file.
	* mapfile.h: New file.
	* options.h (class General_options): Add -M/--print-map and -Map.
	* options.cc (General_options::finalize): Make -M equivalent to
	-Map -.
	* main.cc: Include <cstdio> and "mapfile.h".
	(main): Open mapfile if requested.
	* gold.cc (class Middle_runner): Add mapfile_ field.  Update
	constructor.  Change caller.
	(queue_initial_tasks): Add mapfile parameter.  Change caller.
	(queue_middle_tasks): Likewise.
	* gold.h (queue_initial_tasks, queue_middle_tasks): Update
	declarations.
	* archive.cc: Include "mapfile.h".
	(Archive::add_symbols): Add mapfile parameter.  Change all
	callers.  Pass mapfile, symbol, and reason to include_member.
	(Archive::include_all_members): Add mapfile parameter.  Change all
	callers.
	(Archive::include_member): Add mapfile, sym, and why parameters.
	Change all callers.  Report inclusion to map file.
	* archive.h: Include "fileread.h".
	(class Archive): Update declarations.
	(Archive::file): New const method.
	(class Add_archive_symbols): Add mapfile_ field.  Update
	constructor.  Change all callers.
	* readsyms.h (class Read_symbols): Likewise.
	(class Finish_group): Likewise.
	(class Read_script): Likewise.
	* common.cc: Include "mapfile.h".
	(Symbol_table::allocate_commons): Add mapfile parameter.  Change
	all callers.
	(Symbol_table::do_allocate_commons): Likewise.
	(Symbol_table::do_allocate_commons_list): Likewise.  Report common
	symbol allocation to mapfile.
	* common.h (class Allocate_commons_task): Add mapfile_ field.
	Update constructor.  Change all callers.
	* symtab.h (class Symbol_table): Update declarations.
	* layout.cc: Include "mapfile.h".
	(Layout_task_runner::run): Print information to mapfile.
	(Layout::create_gold_note): Change Output_data_fixed_space to
	Output_data_zero_fill.
	(Layout::create_build_id): Likewise.
	(Layout::print_to_mapfile): New function.
	* layout.h (class Layout_task_runner): Add mapfile_ field.  Update
	constructor.  Change caller.
	(class Layout): Declare print_to_mapfile.
	* output.cc (Output_section::Input_section::print_to_mapfile): New
	function.
	(Output_section::add_input_section): If producing a map, always
	add to input_sections_ list.
	(Output_section::do_print_to_mapfile): New function.
	(Output_segment::print_sections_to_mapfile): New function.
	(Output_segment::print_section_list_to_mapfile): New function.
	* output.h: Include "mapfile.h".
	(Output_data::print_to_mapfile): New function.
	(Output_data::do_print_to_mapfile): New virtual function.
	(Output_segment_headers::do_print_to_mapfile): New function.
	(Output_file_header::do_print_to_mapfile): New function.
	(Output_data_const::do_print_to_mapfile): New function.
	(class Output_data_const_buffer): Add map_name_ field.  Update
	constructor.  Change all callers.  Add do_print_to_mapfile
	function.
	(class Output_data_fixed_space): Likewise.
	(class Output_data_space): Likewise.
	(class Output_data_zero_fill): New class.
	(Output_data_strtab::do_print_to_mapfile): New function.
	(Output_data_reloc_base::do_print_to_mapfile): New function.
	(Output_relocatable_relocs::do_print_to_mapfile): New function.
	(Output_data_group::do_print_to_mapfile): New function.
	(Output_data_got::do_print_to_mapfile): New function.
	(Output_data_dynamic::do_print_to_mapfile): New function.
	(Output_symtab_xindex::do_print_to_mapfile): New function.
	(class Output_section): Declare do_print_to_mapflie.  Declare
	print_to_mapfile in Input_section.
	(class Output_segment): Declare new functions.
	* object.h (Sized_relobj::symbol_count): New function.
	* script-sections.cc
	(Output_section_element_dot_assignment::set_section_addresses):
	Change Output_data_fixed_space to Output_data_zero_fill.
	(Output_data_expression::do_print_to_mapfile): New function.
	* script.cc (read_input_script): Add mapfile parameter.  Change
	all callers.
	* script.h (read_input_script): Update declaration.
	* ehframe.h (Eh_frame_hdr::do_print_to_mapfile): New function.
	(Eh_frame::do_print_to_mapfile): New function.
	* merge.h (Output_merge_data::do_print_to_mapfile): New function.
	(Output_merge_string::do_print_to_mapfile): New function.
	* i386.cc (Output_data_plt_i386::do_print_to_mapfile): New
	function.
	* sparc.cc (Output_data_plt_sparc::do_print_to_mapfile): New
	function.
	* x86_64.cc (Output_data_plt_x86_64::do_print_to_mapfile): New
	function.
	* Makefile.am (CCFILES): Add mapfile.cc.
	(HFILES): Add mapfile.h.
	* Makefile.in: Rebuild.
@
text
@d643 2
a644 2
  // strip_all > strip_debug > strip_debug_gdb.  If one is true, set
  // all beneath it to true as well.
d648 2
@


1.72
log
@	* options.h (DEFINE_var): Add set_user_set_##varname__.
	(DEFINE_bool_alias): New macro.
	(class General_options): Define -Bstatic using DEFINE_bool_alias
	rather than DEFINE_special.  Add --undefined as an alias for -z
	defs.
	* options.cc (General_options::parse_Bstatic): Remove.
@
text
@d700 7
@


1.71
log
@	* errors.cc (Errors::info): New function.
	(gold_info): New function.
	* errors.h (Errors::info): New function.
	* gold.h (gold_info): New function.
	* object.cc (Input_objects::add_object): Print trace output.
	* options.cc (options::parse_set): New function.
	(General_options::parse_wrap): Deleted.
	(General_options::General_options): Deleted initializer.
	* options.h (options::String_set): New typedef.
	(options::parse_set): New function.
	(DEFINE_set): New macro.
	(General_options::wrap): Changed to use DEFINE_set. Changed
	callers of any_wrap_symbols and is_wrap_symbol.
	(General_options::trace, General_options::trace_symbol):
	New options.
	(General_options::any_wrap_symbols, General_options::is_wrap_symbol)
	(General_options::wrap_symbols_): Deleted.
	* symtab.cc (Symbol_table::add_from_object): Print trace output.
@
text
@a284 6
General_options::parse_Bstatic(const char*, const char*, Command_line*)
{
  this->set_Bdynamic(false);
}

void
@


1.70
log
@	* options.cc (General_options::parse_V): New function.
	* options.h: Add entries for -V and -Qy.
@
text
@d225 6
a346 7
General_options::parse_wrap(const char*, const char* arg,
			    Command_line*)
{
  this->wrap_symbols_.insert(std::string(arg));
}

void
d603 1
a603 1
    do_demangle_(false), wrap_symbols_()
@


1.69
log
@	* options.h (General_options): Add entries for '-Y' and
	'-relax'.
	* options.cc (General_options:finalize): If -Y was used, add those
	entries to the library path instead of the default "/lib" and
	"/usr/lib".
@
text
@d266 13
@


1.68
log
@	* options.h (class General_options): Define --wrap as a special
	option.  Add wrap_symbols_ field.
	(General_options::any_wrap_symbols): New function.
	(General_options::is_wrap_symbol): New function.
	* options.cc (General_options::parse_wrap): New function.
	(General_options::General_options): Initialize wrap_symbols_.
	* symtab.cc (Symbol_table::wrap_symbol): New function.
	(Symbol_table::add_from_object): Handle --wrap.
	* symtab.h (class Symbol_table): Declare wrap_symbol.
	* target.h (Target::wrap_char): New function.
	(Target::Target_info): Add wrap_char field.
	* i386.cc (Target_i386::i386_info): Initialize wrap_char.
	* x86_64.cc (Target_x86_64::x86_64_info): Likewise.
	* testsuite/testfile.cc (Target_test::test_target_info):
	Likewise.
@
text
@d720 27
a746 4
  // Even if they don't specify it, we add -L /lib and -L /usr/lib.
  // FIXME: We should only do this when configured in native mode.
  this->add_to_library_path_with_sysroot("/lib");
  this->add_to_library_path_with_sysroot("/usr/lib");
@


1.67
log
@	PR gold/5986
	Fix problems building gold with gcc 4.3.0.
	* gold.h (TEMPLATE_ATTRIBUTE_PRINTF_4): Define.
	(gold_error_at_location, gold_warning_at_location): Use it.
	* configure.ac: Check whether we can compile and use a template
	function with a printf attribute.
	* x86_64.cc (Target_x86_64::do_code_fill): Swap out a 32-bit value
	when jumping over bytes.
	* object.cc: Instantiate Object::read_section_data.
	* debug.h: Include <cstring>
	* dwarf_reader.cc: Include <algorithm>
	* main.cc: Include <cstring>.
	* options.cc: Include <cstring>.
	* output.cc: Include <cstring>.
	* script.cc: Include <cstring>.
	* script.h: Include <string>.
	* symtab.cc: Include <cstring> and <algorithm>.
	* target-select.cc: Include <cstring>.
	* version.cc: Include <string>.
	* testsuite/testmain.cc: Include <cstdlib>.
	* configure, config.in: Rebuild.
@
text
@d328 7
d591 1
a591 1
    do_demangle_(false)
@


1.66
log
@	* options.cc: Include "../bfd/bfdver.h".
	(options::help): Print bug reporting address.
@
text
@d26 1
@


1.65
log
@	* options.cc (options::help): Print list of supported targets.
	* target-select.h: Include <vector>.
	(class Target_selector): Make machine_, size_, and is_big_endian_
	fields const.  Add bfd_name_ and instantiated_target_ fields.
	(Target_selector::Target_selector): Add bfd_name parameter.
	(Target_selector::recognize): Make non-virtual, call
	do_recognize.
	(Target_selector::recognize_by_name): Make non-virtual, call
	do_recognize_by_name.
	(Target_selector::supported_names): New function.
	(Target_selector::bfd_name): New function.
	(Target_selector::do_instantiate_target): New pure virtual
	function.
	(Target_selector::do_recognize): New virtual function.
	(Target_selector::do_recognize_by_name): New virtual function.
	(Target_selector::instantiate_target): New private function.
	(supported_target_names): Declare.
	* target-select.cc (Target_selector::Target_selector): Update for
	new parameter and fields.
	(select_target_by_name): Check that the name matches before
	calling recognize_by_name.
	(supported_target_names): New function.
	* i386.cc (class Target_selector_i386): Update Target_selector
	constructor call.  Remove recognize and recognize_by_name.  Add
	do_instantiate_target.
	* x86_64.cc (class Target_selector_x86_64): Likewise.
	* testsuite/testfile.cc (class Target_selector_test): Update for
	changes to Target_selector.
@
text
@d32 1
d157 5
@


1.64
log
@	* options.cc: Include "demangle.h".
	(parse_optional_string): New function.
	(parse_long_option): Handle takes_optional_argument.
	(parse_short_option): Update dash_z initializer.  Handle
	takes_optional_argument.
	(General_options::General_options): Initialize do_demangle_.
	(General_options::finalize): Set do_demangle_.  Handle demangling
	style.
	* options.h (parse_optional_string): Declare.
	(struct One_option): Add optional_arg field.  Update constructor.
	Update call constructor calls.  Add takes_optional_argument
	function.
	(DEFINE_var): Add optional_arg__ parameter.  Change all callers.
	(DEFINE_optional_string): Define.
	(General_options::demangle): Change from DEFINE_bool to
	DEFINE_optional_string.
	(General_options::no_demangle): New function.
	(General_options::do_demangle): New function.
	(General_options::set_do_demangle): New function.
	(General_options::execstack_status_): Move definition to end of
	class definition.
	(General_options::static_): Likewise.
	(General_options::do_demangle_): New field.
	* object.cc (big_endian>::get_symbol_location_info): Call
	Options::do_demangle, not Options::demangle.
	* symtab.cc (demangle): Likewise.
@
text
@d145 11
@


1.63
log
@Recognize --hash-bucket-empty-fraction.
@
text
@d31 1
d195 6
d476 2
d508 2
a509 1
                                          'z', "", "-z", "Z-OPTION", NULL);
d537 2
d565 2
a566 1
  : execstack_status_(General_options::EXECSTACK_FROM_INPUT), static_(false)
d645 24
@


1.62
log
@Use N_ for option help strings, and call gettext when printing them.
@
text
@d175 11
d674 7
@


1.61
log
@From Craig Silverstein: accept any string for input format, warn if
thread options when not supported.
@
text
@d90 1
a90 1
          len += printf(" %s", this->helparg);
d120 1
a120 1
                        this->helparg);
d133 1
a133 1
  printf("%s\n", this->helpstring);
@


1.60
log
@From Craig Silverstein: rework option handling to make it easier to
add a new option.
@
text
@d344 1
a344 1
      gold::gold_error(_("format '%s' not supported "
d630 16
@


1.59
log
@From Craig Silverstein: rename some option functions in preparation
for reworking option handling.
@
text
@d26 1
d34 1
d40 2
a41 1
// The information we keep for a single command line option.
d43 1
a43 1
struct options::One_option
a44 99
  // The single character option name, or '\0' if this is only a long
  // option.
  char short_option;

  // The long option name, or NULL if this is only a short option.
  const char* long_option;

  // Description of the option for --help output, or NULL if there is none.
  const char* doc;

  // How to print the option name in --help output, or NULL to use the
  // default.
  const char* help_output;

  // Long option dash control.  This is ignored if long_option is
  // NULL.
  enum
    {
      // Long option normally takes one dash; two dashes are also
      // accepted.
      ONE_DASH,
      // Long option normally takes two dashes; one dash is also
      // accepted.
      TWO_DASHES,
      // Long option always takes two dashes.
      EXACTLY_TWO_DASHES
    } dash;

  // Function for special handling, or NULL.  Returns the number of
  // arguments to skip.  This will normally be at least 1, but it may
  // be 0 if this function changes *argv.  ARG points to the location
  // in *ARGV where the option starts, which may be helpful for a
  // short option.
  int (*special)(int argc, char** argv, char *arg, bool long_option,
		 Command_line*);

  // If this is a position independent option which does not take an
  // argument, this is the member function to call to record it.  (In
  // this file, the bool will always be 'true' to indicate the option
  // is set.)
  void (General_options::*general_noarg)(bool);

  // If this is a position independent function which takes an
  // argument, this is the member function to call to record it.
  void (General_options::*general_arg)(const char*);

  // If this is a position dependent option which does not take an
  // argument, this is the member function to call to record it.  (In
  // this file, the bool will always be 'true' to indicate the option
  // is set.)
  void (Position_dependent_options::*dependent_noarg)(bool);

  // If this is a position dependent option which takes an argument,
  // this is the member function to record it.
  void (Position_dependent_options::*dependent_arg)(const char*);

  // Return whether this option takes an argument.
  bool
  takes_argument() const
  { return this->general_arg != NULL || this->dependent_arg != NULL; }
};

// We have a separate table for -z options.

struct options::One_z_option
{
  // The name of the option.
  const char* name;

  // The member function in General_options called to record an option
  // which does not take an argument.
  void (General_options::*set_noarg)(bool);

  // The member function in General_options called to record an option
  // which does take an argument.
  void (General_options::*set_arg)(const char*);
};

// We have a separate table for --debug options.

struct options::One_debug_option
{
  // The name of the option.
  const char* name;

  // The flags to turn on.
  unsigned int debug_flags;
};

class options::Command_line_options
{
 public:
  static const One_option options[];
  static const int options_size;
  static const One_z_option z_options[];
  static const int z_options_size;
  static const One_debug_option debug_options[];
  static const int debug_options_size;
};
d46 9
a54 1
} // End namespace gold.
d56 2
a57 1
namespace
d59 7
d67 9
a75 7
// Recognize input and output target names.  The GNU linker accepts
// these with --format and --oformat.  This code is intended to be
// minimally compatible.  In practice for an ELF target this would be
// the same target as the input files; that name always start with
// "elf".  Non-ELF targets would be "srec", "symbolsrec", "tekhex",
// "binary", "ihex".  See also
// General_options::default_target_settings.
d77 2
a78 2
gold::General_options::Object_format
string_to_object_format(const char* arg)
d80 45
a124 5
  if (strncmp(arg, "elf", 3) == 0)
    return gold::General_options::OBJECT_FORMAT_ELF;
  else if (strcmp(arg, "binary") == 0)
    return gold::General_options::OBJECT_FORMAT_BINARY;
  else
d126 2
a127 4
      gold::gold_error(_("format '%s' not supported "
			 "(supported formats: elf, binary)"),
		       arg);
      return gold::General_options::OBJECT_FORMAT_ELF;
d129 5
d136 9
a144 1
// Handle the special -defsym option, which defines a symbol.
d146 4
a149 3
int
add_to_defsym(int argc, char** argv, char* arg, bool long_option,
              gold::Command_line* cmdline)
d151 1
a151 5
  int ret;
  const char* val = cmdline->get_special_argument("defsym", argc, argv, arg,
						  long_option, &ret);
  cmdline->script_options().define_symbol(val);
  return ret;
d154 9
a162 1
// Handle the special -l option, which adds an input file.
d164 2
a165 3
int
library(int argc, char** argv, char* arg, bool long_option,
	gold::Command_line* cmdline)
d167 5
a171 1
  return cmdline->process_l_option(argc, argv, arg, long_option);
d174 7
a180 7
// Handle the -R option.  Historically the GNU linker made -R a
// synonym for --just-symbols.  ELF linkers have traditionally made -R
// a synonym for -rpath.  When ELF support was added to the GNU
// linker, -R was changed to switch based on the argument: if the
// argument is an ordinary file, we treat it as --just-symbols,
// otherwise we treat it as -rpath.  We need to be compatible with
// this, because existing build scripts rely on it.
d182 9
a190 3
int
handle_r_option(int argc, char** argv, char* arg, bool long_option,
		gold::Command_line* cmdline)
d192 17
a208 9
  int ret;
  const char* val = cmdline->get_special_argument("R", argc, argv, arg,
						  long_option, &ret);
  struct stat s;
  if (::stat(val, &s) != 0 || S_ISDIR(s.st_mode))
    cmdline->add_to_rpath(val);
  else
    cmdline->add_just_symbols_file(val);
  return ret;
d211 3
a213 1
// Handle the --just-symbols option.
d215 2
a216 3
int
handle_just_symbols_option(int argc, char** argv, char* arg,
			   bool long_option, gold::Command_line* cmdline)
d218 2
a219 5
  int ret;
  const char* val = cmdline->get_special_argument("just-symbols", argc, argv,
						  arg, long_option, &ret);
  cmdline->add_just_symbols_file(val);
  return ret;
d222 6
a227 1
// Handle the special -T/--script option, which reads a linker script.
d229 2
a230 3
int
invoke_script(int argc, char** argv, char* arg, bool long_option,
	      gold::Command_line* cmdline)
d232 1
a232 7
  int ret;
  const char* script_name = cmdline->get_special_argument("script", argc, argv,
							  arg, long_option,
							  &ret);
  if (!read_commandline_script(script_name, cmdline))
    gold::gold_fatal(_("unable to parse script file %s"), script_name);
  return ret;
d235 6
a240 1
// Handle the special --version-script option, which reads a version script.
d242 3
a244 3
int
invoke_version_script(int argc, char** argv, char* arg, bool long_option,
                      gold::Command_line* cmdline)
d246 2
a247 8
  int ret;
  const char* script_name = cmdline->get_special_argument("version-script",
                                                          argc, argv,
							  arg, long_option,
							  &ret);
  if (!read_version_script(script_name, cmdline))
    gold::gold_fatal(_("unable to parse version script file %s"), script_name);
  return ret;
d250 10
a259 1
// Handle the special --start-group option.
d261 3
a263 2
int
start_group(int, char**, char* arg, bool, gold::Command_line* cmdline)
d265 2
a266 2
  cmdline->start_group(arg);
  return 1;
d269 5
a273 1
// Handle the special --end-group option.
d275 11
a285 2
int
end_group(int, char**, char* arg, bool, gold::Command_line* cmdline)
d287 2
a288 2
  cmdline->end_group(arg);
  return 1;
d291 6
a296 1
// Report usage information for ld --help, and exit.
d298 3
a300 2
int
help(int, char**, char*, bool, gold::Command_line*)
d302 2
a303 1
  printf(_("Usage: %s [options] file...\nOptions:\n"), gold::program_name);
d305 1
a305 73
  const int options_size = gold::options::Command_line_options::options_size;
  const gold::options::One_option* options =
    gold::options::Command_line_options::options;
  for (int i = 0; i < options_size; ++i)
    {
      if (options[i].doc == NULL)
	continue;

      printf("  ");
      int len = 2;
      bool comma = false;

      int j = i;
      do
	{
	  if (options[j].help_output != NULL)
	    {
	      if (comma)
		{
		  printf(", ");
		  len += 2;
		}
	      printf(options[j].help_output);
	      len += std::strlen(options[j].help_output);
              comma = true;
	    }
	  else
	    {
	      if (options[j].short_option != '\0')
		{
		  if (comma)
		    {
		      printf(", ");
		      len += 2;
		    }
		  printf("-%c", options[j].short_option);
		  len += 2;
                  comma = true;
		}

	      if (options[j].long_option != NULL)
		{
		  if (comma)
		    {
		      printf(", ");
		      len += 2;
		    }
		  if (options[j].dash == gold::options::One_option::ONE_DASH)
		    {
		      printf("-");
		      ++len;
		    }
		  else
		    {
		      printf("--");
		      len += 2;
		    }
		  printf("%s", options[j].long_option);
		  len += std::strlen(options[j].long_option);
                  comma = true;
		}
	    }
	  ++j;
	}
      while (j < options_size && options[j].doc == NULL);

      if (len >= 30)
	{
	  printf("\n");
	  len = 0;
	}
      for (; len < 30; ++len)
	std::putchar(' ');
d307 2
a308 2
      std::puts(options[i].doc);
    }
d310 8
a317 1
  ::exit(EXIT_SUCCESS);
d319 7
a325 1
  return 0;
d328 6
a333 1
// Report version information.
d335 2
a336 2
int
version(int, char**, char* opt, bool, gold::Command_line*)
d338 11
a348 3
  gold::print_version(opt[0] == 'v' && opt[1] == '\0');
  ::exit(EXIT_SUCCESS);
  return 0;
d358 1
a358 1
				    TARGET_SYSTEM_ROOT);
d363 1
a363 1
	return path;
d371 3
a373 1
// option to configure.
d375 1
a375 1
std::string
d380 1
a380 1
    return "";
d384 1
a384 1
      char* path = get_relative_sysroot (BINDIR);
d386 1
a386 1
	path = get_relative_sysroot (TOOLBINDIR);
d388 1
a388 5
	{
	  std::string ret = path;
	  free(path);
	  return ret;
	}
d394 51
a444 1
} // End anonymous namespace.
d446 17
a462 2
namespace gold
{
d464 2
a465 241
// Helper macros used to specify the options.  We could also do this
// using constructors, but then g++ would generate code to initialize
// the array.  We want the array to be initialized statically so that
// we get better startup time.

#define GENERAL_NOARG(short_option, long_option, doc, help, dash, func)	\
  { short_option, long_option, doc, help, options::One_option::dash, \
      NULL, func, NULL, NULL, NULL }
#define GENERAL_ARG(short_option, long_option, doc, help, dash, func)	\
  { short_option, long_option, doc, help, options::One_option::dash, \
      NULL, NULL, func, NULL, NULL }
#define POSDEP_NOARG(short_option, long_option, doc, help, dash, func)	\
  { short_option, long_option, doc, help, options::One_option::dash, \
      NULL,  NULL, NULL, func, NULL }
#define POSDEP_ARG(short_option, long_option, doc, help, dash, func)	\
  { short_option, long_option, doc, help, options::One_option::dash, \
      NULL, NULL, NULL, NULL, func }
#define SPECIAL(short_option, long_option, doc, help, dash, func)	\
  { short_option, long_option, doc, help, options::One_option::dash, \
      func, NULL, NULL, NULL, NULL }

// Here is the actual list of options which we accept.

const options::One_option
options::Command_line_options::options[] =
{
  GENERAL_NOARG('\0', "allow-shlib-undefined",
		N_("Allow unresolved references in shared libraries"),
		NULL, TWO_DASHES,
		&General_options::set_allow_shlib_undefined),
  GENERAL_NOARG('\0', "no-allow-shlib-undefined",
		N_("Do not allow unresolved references in shared libraries"),
		NULL, TWO_DASHES,
		&General_options::set_no_allow_shlib_undefined),
  POSDEP_NOARG('\0', "as-needed",
	       N_("Only set DT_NEEDED for dynamic libs if used"),
	       NULL, TWO_DASHES, &Position_dependent_options::set_as_needed),
  POSDEP_NOARG('\0', "no-as-needed",
	       N_("Always DT_NEEDED for dynamic libs (default)"),
	       NULL, TWO_DASHES, &Position_dependent_options::set_no_as_needed),
  POSDEP_NOARG('\0', "Bdynamic",
	       N_("-l searches for shared libraries"),
	       NULL, ONE_DASH,
	       &Position_dependent_options::set_Bdynamic),
  POSDEP_NOARG('\0', "Bstatic",
	       N_("-l does not search for shared libraries"),
	       NULL, ONE_DASH,
	       &Position_dependent_options::set_Bstatic),
  GENERAL_NOARG('\0', "Bsymbolic", N_("Bind defined symbols locally"),
		NULL, ONE_DASH, &General_options::set_Bsymbolic),
  POSDEP_ARG('b', "format", N_("Set input format (elf, binary)"),
	     N_("-b FORMAT, --format FORMAT"), TWO_DASHES,
	     &Position_dependent_options::set_format),
#ifdef HAVE_ZLIB_H
# define ZLIB_STR  ",zlib"
#else
# define ZLIB_STR  ""
#endif
  GENERAL_ARG('\0', "compress-debug-sections",
              N_("Compress .debug_* sections in the output file "
                 "(default is none)"),
              N_("--compress-debug-sections=[none" ZLIB_STR "]"),
              TWO_DASHES,
              &General_options::set_compress_debug_sections),
  GENERAL_NOARG('d', "define-common", N_("Define common symbols"),
		NULL, TWO_DASHES, &General_options::set_define_common),
  GENERAL_NOARG('\0', "dc", NULL, NULL, ONE_DASH,
		&General_options::set_define_common),
  GENERAL_NOARG('\0', "dp", NULL, NULL, ONE_DASH,
		&General_options::set_define_common),
  GENERAL_NOARG('\0', "no-define-common", N_("Do not define common symbols"),
		NULL, TWO_DASHES, &General_options::set_no_define_common),
  SPECIAL('\0', "defsym", N_("Define a symbol"),
          N_("--defsym SYMBOL=EXPRESSION"), TWO_DASHES,
          &add_to_defsym),
  GENERAL_NOARG('\0', "demangle", N_("Demangle C++ symbols in log messages"),
                NULL, TWO_DASHES, &General_options::set_demangle),
  GENERAL_NOARG('\0', "no-demangle",
		N_("Do not demangle C++ symbols in log messages"),
                NULL, TWO_DASHES, &General_options::set_no_demangle),
  GENERAL_NOARG('\0', "detect-odr-violations",
                N_("Try to detect violations of the One Definition Rule"),
                NULL, TWO_DASHES, &General_options::set_detect_odr_violations),
  GENERAL_ARG('e', "entry", N_("Set program start address"),
	      N_("-e ADDRESS, --entry ADDRESS"), TWO_DASHES,
	      &General_options::set_entry),
  GENERAL_NOARG('E', "export-dynamic", N_("Export all dynamic symbols"),
                NULL, TWO_DASHES, &General_options::set_export_dynamic),
  GENERAL_NOARG('\0', "eh-frame-hdr", N_("Create exception frame header"),
                NULL, TWO_DASHES, &General_options::set_eh_frame_hdr),
  GENERAL_ARG('h', "soname", N_("Set shared library name"),
	      N_("-h FILENAME, -soname FILENAME"), ONE_DASH,
	      &General_options::set_soname),
  GENERAL_ARG('I', "dynamic-linker", N_("Set dynamic linker path"),
	      N_("-I PROGRAM, --dynamic-linker PROGRAM"), TWO_DASHES,
	      &General_options::set_dynamic_linker),
  SPECIAL('l', "library", N_("Search for library LIBNAME"),
	  N_("-lLIBNAME, --library LIBNAME"), TWO_DASHES,
	  &library),
  GENERAL_ARG('L', "library-path", N_("Add directory to search path"),
	      N_("-L DIR, --library-path DIR"), TWO_DASHES,
	      &General_options::add_to_search_path),
  GENERAL_ARG('m', NULL, N_("Ignored for compatibility"), NULL, ONE_DASH,
	      &General_options::ignore),
  GENERAL_ARG('o', "output", N_("Set output file name"),
	      N_("-o FILE, --output FILE"), TWO_DASHES,
	      &General_options::set_output),
  GENERAL_ARG('O', "optimize", N_("Optimize output file size"),
	      N_("-O level"), ONE_DASH,
	      &General_options::set_optimize),
  GENERAL_ARG('\0', "oformat", N_("Set output format (only binary supported)"),
	      N_("--oformat FORMAT"), EXACTLY_TWO_DASHES,
	      &General_options::set_oformat),
  GENERAL_NOARG('q', "emit-relocs", N_("Generate relocations in output"),
		NULL, TWO_DASHES, &General_options::set_emit_relocs),
  GENERAL_NOARG('r', "relocatable", N_("Generate relocatable output"), NULL,
		TWO_DASHES, &General_options::set_relocatable),
  // -R really means -rpath, but can mean --just-symbols for
  // compatibility with GNU ld.  -rpath is always -rpath, so we list
  // it separately.
  SPECIAL('R', NULL, N_("Add DIR to runtime search path"),
	  N_("-R DIR"), ONE_DASH, &handle_r_option),
  GENERAL_ARG('\0', "rpath", NULL, N_("-rpath DIR"), ONE_DASH,
	      &General_options::add_to_rpath),
  SPECIAL('\0', "just-symbols", N_("Read only symbol values from file"),
	  N_("-R FILE, --just-symbols FILE"), TWO_DASHES,
	  &handle_just_symbols_option),
  GENERAL_ARG('\0', "rpath-link",
              N_("Add DIR to link time shared library search path"),
              N_("--rpath-link DIR"), TWO_DASHES,
              &General_options::add_to_rpath_link),
  GENERAL_NOARG('s', "strip-all", N_("Strip all symbols"), NULL,
		TWO_DASHES, &General_options::set_strip_all),
  GENERAL_NOARG('\0', "strip-debug-gdb",
                N_("Strip debug symbols that are unused by gdb "
                   "(at least versions <= 6.7)"),
		NULL, TWO_DASHES, &General_options::set_strip_debug_gdb),
  // This must come after -Sdebug since it's a prefix of it.
  GENERAL_NOARG('S', "strip-debug", N_("Strip debugging information"), NULL,
		TWO_DASHES, &General_options::set_strip_debug),
  GENERAL_NOARG('\0', "shared", N_("Generate shared library"),
		NULL, ONE_DASH, &General_options::set_shared),
  GENERAL_NOARG('\0', "static", N_("Do not link against shared libraries"),
		NULL, ONE_DASH, &General_options::set_static),
  GENERAL_NOARG('\0', "stats", N_("Print resource usage statistics"),
		NULL, TWO_DASHES, &General_options::set_stats),
  GENERAL_ARG('\0', "sysroot", N_("Set target system root directory"),
	      N_("--sysroot DIR"), TWO_DASHES, &General_options::set_sysroot),
  GENERAL_ARG('\0', "Tbss", N_("Set the address of the bss segment"),
              N_("-Tbss ADDRESS"), ONE_DASH,
              &General_options::set_Tbss),
  GENERAL_ARG('\0', "Tdata", N_("Set the address of the data segment"),
              N_("-Tdata ADDRESS"), ONE_DASH,
              &General_options::set_Tdata),
  GENERAL_ARG('\0', "Ttext", N_("Set the address of the text segment"),
              N_("-Ttext ADDRESS"), ONE_DASH,
              &General_options::set_Ttext),
  // This must come after -Ttext and friends since it's a prefix of
  // them.
  SPECIAL('T', "script", N_("Read linker script"),
	  N_("-T FILE, --script FILE"), TWO_DASHES,
	  &invoke_script),
  SPECIAL('\0', "version-script", N_("Read version script"),
	  N_("--version-script FILE"), TWO_DASHES,
	  &invoke_version_script),
  GENERAL_NOARG('\0', "threads", N_("Run the linker multi-threaded"),
		NULL, TWO_DASHES, &General_options::set_threads),
  GENERAL_NOARG('\0', "no-threads", N_("Do not run the linker multi-threaded"),
		NULL, TWO_DASHES, &General_options::set_no_threads),
  GENERAL_ARG('\0', "thread-count", N_("Number of threads to use"),
	      N_("--thread-count COUNT"), TWO_DASHES,
	      &General_options::set_thread_count),
  GENERAL_ARG('\0', "thread-count-initial",
	      N_("Number of threads to use in initial pass"),
	      N_("--thread-count-initial COUNT"), TWO_DASHES,
	      &General_options::set_thread_count_initial),
  GENERAL_ARG('\0', "thread-count-middle",
	      N_("Number of threads to use in middle pass"),
	      N_("--thread-count-middle COUNT"), TWO_DASHES,
	      &General_options::set_thread_count_middle),
  GENERAL_ARG('\0', "thread-count-final",
	      N_("Number of threads to use in final pass"),
	      N_("--thread-count-final COUNT"), TWO_DASHES,
	      &General_options::set_thread_count_final),
  POSDEP_NOARG('\0', "whole-archive",
               N_("Include all archive contents"),
               NULL, TWO_DASHES,
               &Position_dependent_options::set_whole_archive),
  POSDEP_NOARG('\0', "no-whole-archive",
               N_("Include only needed archive contents"),
               NULL, TWO_DASHES,
               &Position_dependent_options::set_no_whole_archive),

  GENERAL_ARG('z', NULL,
	      N_("Subcommands as follows:\n\
    -z execstack              Mark output as requiring executable stack\n\
    -z noexecstack            Mark output as not requiring executable stack\n\
    -z max-page-size=SIZE     Set maximum page size to SIZE\n\
    -z common-page-size=SIZE  Set common page size to SIZE"),
	      N_("-z SUBCOMMAND"), ONE_DASH,
	      &General_options::handle_z_option),

  SPECIAL('(', "start-group", N_("Start a library search group"), NULL,
	  TWO_DASHES, &start_group),
  SPECIAL(')', "end-group", N_("End a library search group"), NULL,
	  TWO_DASHES, &end_group),
  SPECIAL('\0', "help", N_("Report usage information"), NULL,
	  TWO_DASHES, &help),
  SPECIAL('v', "version", N_("Report version information"), NULL,
	  TWO_DASHES, &version),
  GENERAL_ARG('\0', "debug", N_("Turn on debugging (all,task,script)"),
	      N_("--debug=TYPE"), TWO_DASHES,
	      &General_options::handle_debug_option)
};

const int options::Command_line_options::options_size =
  sizeof (options) / sizeof (options[0]);

// The -z options.

const options::One_z_option
options::Command_line_options::z_options[] =
{
  { "execstack", &General_options::set_execstack, NULL },
  { "noexecstack", &General_options::set_noexecstack, NULL },
  { "max-page-size", NULL, &General_options::set_max_page_size },
  { "common-page-size", NULL, &General_options::set_common_page_size }
};

const int options::Command_line_options::z_options_size =
  sizeof(z_options) / sizeof(z_options[0]);

// The --debug options.

const options::One_debug_option
options::Command_line_options::debug_options[] =
{
  { "all", DEBUG_ALL },
  { "task", DEBUG_TASK },
  { "script", DEBUG_SCRIPT }
};
d467 31
a497 2
const int options::Command_line_options::debug_options_size =
  sizeof(debug_options) / sizeof(debug_options[0]);
d499 2
a500 1
// The default values for the general options.
d502 2
a503 65
General_options::General_options()
  : define_common_(false),
    user_set_define_common_(false),
    entry_(NULL),
    export_dynamic_(false),
    soname_(NULL),
    dynamic_linker_(NULL),
    search_path_(),
    optimization_level_(0),
    output_file_name_("a.out"),
    oformat_(OBJECT_FORMAT_ELF),
    oformat_string_(NULL),
    emit_relocs_(false),
    is_relocatable_(false),
    strip_(STRIP_NONE),
    allow_shlib_undefined_(false),
    symbolic_(false),
    compress_debug_sections_(NO_COMPRESSION),
    detect_odr_violations_(false),
    create_eh_frame_hdr_(false),
    rpath_(),
    rpath_link_(),
    is_shared_(false),
    is_static_(false),
    print_stats_(false),
    sysroot_(),
    bss_segment_address_(-1U),   // -1 indicates value not set by user
    data_segment_address_(-1U),
    text_segment_address_(-1U),
    threads_(false),
    thread_count_initial_(0),
    thread_count_middle_(0),
    thread_count_final_(0),
    execstack_(EXECSTACK_FROM_INPUT),
    max_page_size_(0),
    common_page_size_(0),
    debug_(0)
{
  // We initialize demangle_ based on the environment variable
  // COLLECT_NO_DEMANGLE.  The gcc collect2 program will demangle the
  // output of the linker, unless COLLECT_NO_DEMANGLE is set in the
  // environment.  Acting the same way here lets us provide the same
  // interface by default.
  this->demangle_ = getenv("COLLECT_NO_DEMANGLE") == NULL;
}

// Handle the --oformat option.

void
General_options::set_oformat(const char* arg)
{
  this->oformat_string_ = arg;
  this->oformat_ = string_to_object_format(arg);
}

// Handle the -z option.

void
General_options::handle_z_option(const char* arg)
{
  // ARG may be a word, like "noexec", or it may be an option in its
  // own right, like "max-page-size=SIZE".
  const char* argarg = strchr(arg, '=');   // the argument to the -z argument
  int arglen;
  if (argarg)
d505 4
a508 2
      arglen = argarg - arg;
      argarg++;
d511 10
a520 1
    arglen = strlen(arg);
d522 9
a530 20
  const int z_options_size = options::Command_line_options::z_options_size;
  const gold::options::One_z_option* z_options =
    gold::options::Command_line_options::z_options;
  for (int i = 0; i < z_options_size; ++i)
    {
      if (memcmp(arg, z_options[i].name, arglen) == 0
          && z_options[i].name[arglen] == '\0')
	{
          if (z_options[i].set_noarg && argarg)
            gold::gold_fatal(_("-z subcommand does not take an argument: %s\n"),
                             z_options[i].name);
          else if (z_options[i].set_arg && !argarg)
            gold::gold_fatal(_("-z subcommand requires an argument: %s\n"),
                             z_options[i].name);
          else if (z_options[i].set_arg)
            (this->*(z_options[i].set_arg))(argarg);
          else
            (this->*(z_options[i].set_noarg))(true);
          return;
        }
d533 1
a533 2
  gold::gold_fatal(_("%s: unrecognized -z subcommand: %s\n"),
                   program_name, arg);
d536 9
a544 1
// Handle the --debug option.
d546 2
a547 2
void
General_options::handle_debug_option(const char* arg)
d549 2
a550 12
  const int debug_options_size =
    options::Command_line_options::debug_options_size;
  const gold::options::One_debug_option* debug_options =
    options::Command_line_options::debug_options;
  for (int i = 0; i < debug_options_size; ++i)
    {
      if (strcmp(arg, debug_options[i].name) == 0)
	{
	  this->set_debug(debug_options[i].debug_flags);
	  return;
	}
    }
d552 4
a555 3
  fprintf(stderr, _("%s: unrecognized --debug subcommand: %s\n"),
	  program_name, arg);
  ::exit(EXIT_FAILURE);
d563 1
a563 1
  if (this->sysroot_.empty())
d565 3
a567 3
      this->sysroot_ = get_default_sysroot();
      if (this->sysroot_.empty())
	return;
d570 1
a570 2
  const char* sysroot = this->sysroot_.c_str();
  char* canonical_sysroot = lrealpath(sysroot);
d572 2
a573 2
  for (Dir_list::iterator p = this->search_path_.begin();
       p != this->search_path_.end();
d575 1
a575 1
    p->add_sysroot(sysroot, canonical_sysroot);
d580 59
a638 1
// The default values for the position dependent options.
d640 3
a642 7
Position_dependent_options::Position_dependent_options()
  : do_static_search_(false),
    as_needed_(false),
    include_whole_archive_(false),
    input_format_(General_options::OBJECT_FORMAT_ELF)
{
}
d644 3
a646 1
// Set the input format.
d648 1
a648 4
void
Position_dependent_options::set_format(const char* arg)
{
  this->input_format_ = string_to_object_format(arg);
d658 1
a658 1
			      const char* canonical_sysroot)
d664 2
a665 2
	  && !IS_DIR_SEPARATOR(sysroot[strlen(sysroot) - 1]))
	this->name_ = '/' + this->name_;
d678 6
a683 6
	  && IS_DIR_SEPARATOR(canonical_name[canonical_sysroot_len]))
	{
	  canonical_name[canonical_sysroot_len] = '\0';
	  if (FILENAME_CMP(canonical_name, canonical_sysroot) == 0)
	    this->is_in_sysroot_ = true;
	}
d710 2
a711 1
  gold_assert(!this->in_group_);
d722 2
a723 1
  gold_assert(this->in_group_);
a729 1
  : options_(), position_options_(), script_options_(), inputs_()
d733 6
a738 5
// Process the command line options.  For process_one_option,
// i is the index of argv to process next, and the return value
// is the index of the next option to process (i+1 or i+2, or argc
// to indicate processing is done).  no_more_options is set to true
// if (and when) "--" is seen as an option.
d741 1
a741 1
Command_line::process_one_option(int argc, char** argv, int i,
d744 1
a744 3
  const int options_size = options::Command_line_options::options_size;
  const options::One_option* options = options::Command_line_options::options;
  gold_assert(i < argc);
d746 2
a747 1
  if (argv[i][0] != '-' || *no_more_options)
d749 1
a749 1
      this->add_file(argv[i], false);
d753 7
a759 3
  // Option starting with '-'.
  int dashes = 1;
  if (argv[i][1] == '-')
d761 2
a762 6
      dashes = 2;
      if (argv[i][2] == '\0')
        {
          *no_more_options = true;
          return i + 1;
        }
d765 11
a775 53
  // Look for a long option match.
  char* opt = argv[i] + dashes;
  char first = opt[0];
  int skiparg = 0;
  char* arg = strchr(opt, '=');
  bool argument_with_equals = arg != NULL;
  if (arg != NULL)
    {
      *arg = '\0';
      ++arg;
    }
  else if (i + 1 < argc)
    {
      arg = argv[i + 1];
      skiparg = 1;
    }

  int j;
  for (j = 0; j < options_size; ++j)
    {
      if (options[j].long_option != NULL
          && (dashes == 2
	      || (options[j].dash
		  != options::One_option::EXACTLY_TWO_DASHES))
          && first == options[j].long_option[0]
          && strcmp(opt, options[j].long_option) == 0)
        {
          if (options[j].special)
    	    {
    	      // Restore the '=' we clobbered above.
    	      if (arg != NULL && skiparg == 0)
    	        arg[-1] = '=';
    	      i += options[j].special(argc - i, argv + i, opt, true, this);
    	    }
          else
    	    {
    	      if (!options[j].takes_argument())
    	        {
    	          if (argument_with_equals)
    	    	    this->usage(_("unexpected argument"), argv[i]);
    	          arg = NULL;
    	          skiparg = 0;
    	        }
    	      else
    	        {
    	          if (arg == NULL)
    	    	    this->usage(_("missing argument"), argv[i]);
    	        }
    	      this->apply_option(options[j], arg);
    	      i += skiparg + 1;
    	    }
          break;
        }
d777 2
a778 2
  if (j < options_size)
    return i;
d780 3
a782 55
  // If we saw two dashes, we needed to have seen a long option.
  if (dashes == 2)
    this->usage(_("unknown option"), argv[i]);

  // Look for a short option match.  There may be more than one
  // short option in a given argument.
  bool done = false;
  char* s = argv[i] + 1;
  ++i;
  while (*s != '\0' && !done)
    {
      char opt = *s;
      int j;
      for (j = 0; j < options_size; ++j)
        {
          if (options[j].short_option == opt)
    	    {
    	      if (options[j].special)
    	        {
    	          // Undo the argument skip done above.
    	          --i;
    	          i += options[j].special(argc - i, argv + i, s, false,
                                          this);
    	          done = true;
    	        }
    	      else
    	        {
    	          arg = NULL;
    	          if (options[j].takes_argument())
    	    	    {
    	    	      if (s[1] != '\0')
    	    	        {
    	    	          arg = s + 1;
    	    	          done = true;
    	    	        }
    	    	      else if (i < argc)
    	    	        {
    	    	          arg = argv[i];
    	    	          ++i;
    	    	        }
    	    	      else
    	    	        this->usage(_("missing argument"), opt);
    	    	    }
    	          this->apply_option(options[j], arg);
    	        }
    	      break;
    	    }
        }

      if (j >= options_size)
        this->usage(_("unknown option"), *s);

      ++s;
    }
  return i;
d787 1
a787 1
Command_line::process(int argc, char** argv)
d792 12
a803 1
    i = process_one_option(argc, argv, i, &no_more_options);
d808 1
a808 1
      this->usage();
d811 2
a812 176
  // FIXME: We should only do this when configured in native mode.
  this->options_.add_to_search_path_with_sysroot("/lib");
  this->options_.add_to_search_path_with_sysroot("/usr/lib");

  this->options_.add_sysroot();

  // Ensure options don't contradict each other and are otherwise kosher.
  this->normalize_options();
}

// Extract an option argument for a special option.  LONGNAME is the
// long name of the option.  This sets *PRET to the return value for
// the special function handler to skip to the next option.

const char*
Command_line::get_special_argument(const char* longname, int argc, char** argv,
				   const char* arg, bool long_option,
				   int *pret)
{
  if (long_option)
    {
      size_t longlen = strlen(longname);
      gold_assert(strncmp(arg, longname, longlen) == 0);
      arg += longlen;
      if (*arg == '=')
	{
	  *pret = 1;
	  return arg + 1;
	}
      else if (argc > 1)
	{
	  gold_assert(*arg == '\0');
	  *pret = 2;
	  return argv[1];
	}
    }
  else
    {
      if (arg[1] != '\0')
	{
	  *pret = 1;
	  return arg + 1;
	}
      else if (argc > 1)
	{
	  *pret = 2;
	  return argv[1];
	}
    }

  this->usage(_("missing argument"), arg);
}

// Ensure options don't contradict each other and are otherwise kosher.

void
Command_line::normalize_options()
{
  if (this->options_.shared() && this->options_.relocatable())
    gold_fatal(_("-shared and -r are incompatible"));

  if (this->options_.oformat_enum() != General_options::OBJECT_FORMAT_ELF
      && (this->options_.shared() || this->options_.relocatable()))
    gold_fatal(_("binary output format not compatible with -shared or -r"));

  // If the user specifies both -s and -r, convert the -s as -S.
  // -r requires us to keep externally visible symbols!
  if (this->options_.strip_all() && this->options_.relocatable())
    {
      // Clears the strip_all() status, replacing it with strip_debug().
      this->options_.set_strip_debug(true);
    }

  // Set default value for define_common.
  if (!this->options_.user_set_define_common())
    this->options_.set_define_common(!this->options_.relocatable());

  // FIXME: we can/should be doing a lot more sanity checking here.
}


// Apply a command line option.

void
Command_line::apply_option(const options::One_option& opt,
			   const char* arg)
{
  if (arg == NULL)
    {
      if (opt.general_noarg)
	(this->options_.*(opt.general_noarg))(true);
      else if (opt.dependent_noarg)
	(this->position_options_.*(opt.dependent_noarg))(true);
      else
	gold_unreachable();
    }
  else
    {
      if (opt.general_arg)
	(this->options_.*(opt.general_arg))(arg);
      else if (opt.dependent_arg)
	(this->position_options_.*(opt.dependent_arg))(arg);
      else
	gold_unreachable();
    }
}

// Add an input file or library.

void
Command_line::add_file(const char* name, bool is_lib)
{
  Input_file_argument file(name, is_lib, "", false, this->position_options_);
  this->inputs_.add_file(file);
}

// Handle the -l option, which requires special treatment.

int
Command_line::process_l_option(int argc, char** argv, char* arg,
			       bool long_option)
{
  int ret;
  const char* libname = this->get_special_argument("library", argc, argv, arg,
						   long_option, &ret);
  this->add_file(libname, true);
  return ret;
}

// Handle the --start-group option.

void
Command_line::start_group(const char* arg)
{
  if (this->inputs_.in_group())
    this->usage(_("may not nest groups"), arg);
  this->inputs_.start_group();
}

// Handle the --end-group option.

void
Command_line::end_group(const char* arg)
{
  if (!this->inputs_.in_group())
    this->usage(_("group end without group start"), arg);
  this->inputs_.end_group();
}

// Report a usage error.  */

void
Command_line::usage()
{
  fprintf(stderr,
	  _("%s: use the --help option for usage information\n"),
	  program_name);
  ::exit(EXIT_FAILURE);
}

void
Command_line::usage(const char* msg, const char *opt)
{
  fprintf(stderr,
	  _("%s: %s: %s\n"),
	  program_name, opt, msg);
  this->usage();
}

void
Command_line::usage(const char* msg, char opt)
{
  fprintf(stderr,
	  _("%s: -%c: %s\n"),
	  program_name, opt, msg);
  this->usage();
@


1.58
log
@Support -d/--define-common.
@
text
@d1139 1
a1139 1
  if (this->options_.oformat() != General_options::OBJECT_FORMAT_ELF
@


1.57
log
@From Craig Silverstein: Have Parameters point to General_options.
@
text
@d491 8
d675 3
a677 1
  : entry_(NULL),
d1150 4
@


1.56
log
@Implement -q/--emit-relocs.
@
text
@a32 1
#include "target-select.h"
a716 28
}

// The x86_64 kernel build converts a binary file to an object file
// using -r --format binary --oformat elf32-i386 foo.o.  In order to
// support that for gold we support determining the default target
// choice from the output format.  We recognize names that the GNU
// linker uses.

Target*
General_options::default_target() const
{
  if (this->oformat_string_ != NULL)
    {
      Target* target = select_target_by_name(this->oformat_string_);
      if (target != NULL)
	return target;

      gold_error(_("unrecognized output format %s"),
		 this->oformat_string_);
    }

  // The GOLD_DEFAULT_xx macros are defined by the configure script.
  Target* target = select_target(elfcpp::GOLD_DEFAULT_MACHINE,
				 GOLD_DEFAULT_SIZE,
				 GOLD_DEFAULT_BIG_ENDIAN,
				 0, 0);
  gold_assert(target != NULL);
  return target;
@


1.55
log
@From Craig Silverstein: rework handling of Script_options.
@
text
@d533 2
d536 1
a536 1
		ONE_DASH, &General_options::set_relocatable),
d677 1
@


1.54
log
@From Craig Silverstein: implement -z max-page-size and -z
common-page-size.
@
text
@d172 13
d492 3
a494 3
  GENERAL_ARG('\0', "defsym", N_("Define a symbol"),
	      N_("--defsym SYMBOL=EXPRESSION"), TWO_DASHES,
	      &General_options::add_to_defsym),
d665 3
a667 2
General_options::General_options(Script_options* script_options)
  : export_dynamic_(false),
d698 1
a698 2
    debug_(0),
    script_options_(script_options)
a707 8
// Handle the --defsym option.

void
General_options::add_to_defsym(const char* arg)
{
  this->script_options_->define_symbol(arg);
}

d928 2
a929 2
Command_line::Command_line(Script_options* script_options)
  : options_(script_options), position_options_(), inputs_()
@


1.53
log
@From Craig Silverstein: rename option functions for future option
handling rewrite.
@
text
@d112 7
a118 2
  // The member function in General_options called to record it.
  void (General_options::*set)(bool);
d601 3
a603 1
    -z noexecstack            Mark output as not requiring executable stack"),
d628 4
a631 2
  { "execstack", &General_options::set_execstack },
  { "noexecstack", &General_options::set_noexecstack },
d682 2
d745 12
d762 2
a763 1
      if (strcmp(arg, z_options[i].name) == 0)
d765 12
a776 3
	  (this->*(z_options[i].set))(true);
	  return;
	}
d779 2
a780 3
  fprintf(stderr, _("%s: unrecognized -z subcommand: %s\n"),
	  program_name, arg);
  ::exit(EXIT_FAILURE);
@


1.52
log
@Implement -Tdata and -Tbss.
@
text
@d80 4
a83 2
  // argument, this is the member function to call to record it.
  void (General_options::*general_noarg)();
d90 4
a93 2
  // argument, this is the member function to call to record it.
  void (Position_dependent_options::*dependent_noarg)();
d113 1
a113 1
  void (General_options::*set)();
d449 1
a449 1
	       NULL, TWO_DASHES, &Position_dependent_options::clear_as_needed),
d453 1
a453 1
	       &Position_dependent_options::set_dynamic_search),
d457 1
a457 1
	       &Position_dependent_options::set_static_search),
d459 1
a459 1
		NULL, ONE_DASH, &General_options::set_symbolic),
d462 1
a462 1
	     &Position_dependent_options::set_input_format),
d476 1
a476 1
	      &General_options::define_symbol),
d481 1
a481 1
                NULL, TWO_DASHES, &General_options::clear_demangle),
d491 1
a491 1
                NULL, TWO_DASHES, &General_options::set_create_eh_frame_hdr),
d508 2
a509 2
	      &General_options::set_output_file_name),
  GENERAL_ARG('O', NULL, N_("Optimize output file size"),
d511 1
a511 1
	      &General_options::set_optimization_level),
d514 2
a515 2
	      &General_options::set_output_format),
  GENERAL_NOARG('r', NULL, N_("Generate relocatable output"), NULL,
d550 1
a550 1
              &General_options::set_bss_segment_address),
d553 1
a553 1
              &General_options::set_data_segment_address),
d556 1
a556 1
              &General_options::set_text_segment_address),
d568 1
a568 1
		NULL, TWO_DASHES, &General_options::clear_threads),
d591 1
a591 1
               &Position_dependent_options::clear_whole_archive),
d650 2
a651 2
    output_format_(OBJECT_FORMAT_ELF),
    output_format_string_(NULL),
d687 1
a687 1
General_options::define_symbol(const char* arg)
d695 1
a695 1
General_options::set_output_format(const char* arg)
d697 2
a698 2
  this->output_format_string_ = arg;
  this->output_format_ = string_to_object_format(arg);
d710 1
a710 1
  if (this->output_format_string_ != NULL)
d712 1
a712 1
      Target* target = select_target_by_name(this->output_format_string_);
d717 1
a717 1
		 this->output_format_string_);
d741 1
a741 1
	  (this->*(z_options[i].set))();
d810 1
a810 1
Position_dependent_options::set_input_format(const char* arg)
d1115 1
a1115 1
  if (this->options_.is_shared() && this->options_.is_relocatable())
d1118 2
a1119 2
  if (this->options_.output_format() != General_options::OBJECT_FORMAT_ELF
      && (this->options_.is_shared() || this->options_.is_relocatable()))
d1124 1
a1124 1
  if (this->options_.strip_all() && this->options_.is_relocatable())
d1127 1
a1127 1
      this->options_.set_strip_debug();
d1143 1
a1143 1
	(this->options_.*(opt.general_noarg))();
d1145 1
a1145 1
	(this->position_options_.*(opt.dependent_noarg))();
@


1.51
log
@Support selecting target by name.
@
text
@d544 7
a550 1
  GENERAL_ARG('\0', "Ttext", N_("Set the address of the .text section"),
d553 2
a554 1
  // This must come after -Ttext since it's a prefix of it.
d661 3
a663 1
    text_segment_address_(-1U),   // -1 indicates value not set by user
@


1.50
log
@Add support for --format binary for input files.
@
text
@d33 1
d144 2
a145 1
// "binary", "ihex".
d640 1
d684 1
d686 28
@


1.49
log
@Support --oformat binary.
@
text
@d138 23
d454 3
d637 1
a637 1
    output_format_(OUTPUT_FORMAT_ELF),
d676 1
a676 5
// Handle the --oformat option.  The GNU linker accepts a target name
// with --oformat.  In practice for an ELF target this would be the
// same target as the input files.  That name always start with "elf".
// Non-ELF targets would be "srec", "symbolsrec", "tekhex", "binary",
// "ihex".
d681 1
a681 7
  if (strncmp(arg, "elf", 3) == 0)
    this->output_format_ = OUTPUT_FORMAT_ELF;
  else if (strcmp(arg, "binary") == 0)
    this->output_format_ = OUTPUT_FORMAT_BINARY;
  else
    gold_error(_("format '%s' not supported (supported formats: elf, binary)"),
	       arg);
d757 9
a765 1
    include_whole_archive_(false)
d767 1
d1073 1
a1073 1
  if (this->options_.output_format() != General_options::OUTPUT_FORMAT_ELF
@


1.48
log
@Implement --just-symbols, including -R FILE.  Fix symbol values when
doing a relocatable link.
@
text
@d480 3
d611 1
d650 18
d880 2
a881 2
    	  || (options[j].dash
    	      != options::One_option::EXACTLY_TWO_DASHES))
d1047 4
@


1.47
log
@Initial -r support.
@
text
@d147 36
d262 1
a262 1
	      len += std::strlen(options[i].help_output);
d482 10
a491 3
  GENERAL_ARG('R', "rpath", N_("Add DIR to runtime search path"),
              N_("-R DIR, -rpath DIR"), ONE_DASH,
              &General_options::add_to_rpath),
d1069 1
a1069 1
  Input_file_argument file(name, is_lib, "", this->position_options_);
@


1.46
log
@Parse a SECTIONS clause in a linker script.
@
text
@d980 3
@


1.45
log
@From Andrew Chatham and Craig Silverstein: Add support for version
scripts.
@
text
@d523 1
a523 1
  GENERAL_ARG('\0', "debug", N_("Turn on debugging (all,task)"),
d550 1
@


1.44
log
@Support assignments and expressions in linker scripts.
@
text
@d158 17
a174 1
    gold::gold_error(_("unable to parse script file %s"), script_name);
d477 3
@


1.43
log
@Report linker script errors with line numbers.  Ignore OUTPUT_FORMAT
with three arguments, and ignore OUTPUT_ARCH.
@
text
@d3 1
a3 1
// Copyright 2006, 2007 Free Software Foundation, Inc.
d32 1
d158 1
a158 1
    gold::gold_error(_("unable to parse script file %s\n"), script_name);
d390 3
d538 2
a539 3
General_options::General_options()
  : entry_(NULL),
    export_dynamic_(false),
d564 2
a565 1
    debug_(0)
d575 1
a575 1
// The default values for the position dependent options.
d577 2
a578 4
Position_dependent_options::Position_dependent_options()
  : do_static_search_(false),
    as_needed_(false),
    include_whole_archive_(false)
d580 1
d651 9
d736 2
a737 2
Command_line::Command_line()
  : options_(), position_options_(), inputs_()
@


1.42
log
@Add support for -e and for ENTRY in linker scripts.
@
text
@d157 1
a157 2
    gold::gold_error(_("%s: unable to parse script file %s\n"),
		     gold::program_name, arg);
@


1.41
log
@Add -h/-soname option.
@
text
@d398 3
d406 1
a406 1
	      N_("-h FILENAME, --soname FILENAME"), ONE_DASH,
d536 2
a537 1
  : export_dynamic_(false),
@


1.40
log
@From Craig Silverstein: Fix error message, add this->.
@
text
@d402 3
d534 1
@


1.39
log
@From Craig Silverstein: Add support for compressing .debug_str section.
@
text
@d389 1
a389 1
              &General_options::set_compress_debug_symbols),
@


1.38
log
@Add threading support.
@
text
@d379 11
d539 1
@


1.37
log
@From Craig Silverstein: Add --strip-debug-gdb.
@
text
@d31 1
d110 11
d128 2
d264 1
a264 1
  ::exit(0);
d275 1
a275 1
  ::exit(0);
d483 4
a486 1
	  TWO_DASHES, &version)
d504 12
d541 2
a542 1
    execstack_(EXECSTACK_FROM_INPUT)
d580 24
a603 1
  ::exit(1);
d1017 1
a1017 1
  ::exit(1);
@


1.36
log
@From Craig Silverstein: Add support for --demangle.
@
text
@d405 5
@


1.35
log
@Add heuristics for undefined symbol warnings.
@
text
@d25 1
d365 5
d509 6
@


1.34
log
@Default to --allow-shlib-undefined for now.
@
text
@d486 1
a486 1
    allow_shlib_undefined_(true),
@


1.33
log
@Warn about undefined references in shared libraries if we have seen
all the DT_NEEDED entries for that library.
@
text
@d486 1
a486 1
    allow_shlib_undefined_(false),
@


1.32
log
@From Craig Silverstein: Rework debug info code a bit, add option for
ODR violations, add test case.
@
text
@d340 8
d486 1
@


1.31
log
@From Craig Silverstein: Implement OPTION in linker scripts.
@
text
@d356 3
d479 1
@


1.30
log
@From Craig Silverstein and Ian Lance Taylor: Process --script option.
@
text
@d398 4
a404 3
  GENERAL_ARG('\0', "Ttext", N_("Set the address of the .text section"),
              N_("-Ttext ADDRESS"), ONE_DASH,
              &General_options::set_text_segment_address),
d627 9
a635 4
// Process the command line options.

void
Command_line::process(int argc, char** argv)
d638 12
a649 5
  const options::One_option* options =
    options::Command_line_options::options;
  bool no_more_options = false;
  int i = 0;
  while (i < argc)
d651 7
a657 6
      if (argv[i][0] != '-' || no_more_options)
	{
	  this->add_file(argv[i], false);
	  ++i;
	  continue;
	}
d659 16
a674 11
      // Option starting with '-'.
      int dashes = 1;
      if (argv[i][1] == '-')
	{
	  dashes = 2;
	  if (argv[i][2] == '\0')
	    {
	      no_more_options = true;
	      continue;
	    }
	}
d676 39
a714 16
      // Look for a long option match.
      char* opt = argv[i] + dashes;
      char first = opt[0];
      int skiparg = 0;
      char* arg = strchr(opt, '=');
      bool argument_with_equals = arg != NULL;
      if (arg != NULL)
	{
	  *arg = '\0';
	  ++arg;
	}
      else if (i + 1 < argc)
	{
	  arg = argv[i + 1];
	  skiparg = 1;
	}
d716 12
d730 37
a766 37
	{
	  if (options[j].long_option != NULL
	      && (dashes == 2
		  || (options[j].dash
		      != options::One_option::EXACTLY_TWO_DASHES))
	      && first == options[j].long_option[0]
	      && strcmp(opt, options[j].long_option) == 0)
	    {
	      if (options[j].special)
		{
		  // Restore the '=' we clobbered above.
		  if (arg != NULL && skiparg == 0)
		    arg[-1] = '=';
		  i += options[j].special(argc - i, argv + i, opt, true, this);
		}
	      else
		{
		  if (!options[j].takes_argument())
		    {
		      if (argument_with_equals)
			this->usage(_("unexpected argument"), argv[i]);
		      arg = NULL;
		      skiparg = 0;
		    }
		  else
		    {
		      if (arg == NULL)
			this->usage(_("missing argument"), argv[i]);
		    }
		  this->apply_option(options[j], arg);
		  i += skiparg + 1;
		}
	      break;
	    }
	}
      if (j < options_size)
	continue;
d768 4
a771 48
      // If we saw two dashes, we need to see a long option.
      if (dashes == 2)
	this->usage(_("unknown option"), argv[i]);

      // Look for a short option match.  There may be more than one
      // short option in a given argument.
      bool done = false;
      char* s = argv[i] + 1;
      ++i;
      while (*s != '\0' && !done)
	{
	  char opt = *s;
	  int j;
	  for (j = 0; j < options_size; ++j)
	    {
	      if (options[j].short_option == opt)
		{
		  if (options[j].special)
		    {
		      // Undo the argument skip done above.
		      --i;
		      i += options[j].special(argc - i, argv + i, s, false,
					      this);
		      done = true;
		    }
		  else
		    {
		      arg = NULL;
		      if (options[j].takes_argument())
			{
			  if (s[1] != '\0')
			    {
			      arg = s + 1;
			      done = true;
			    }
			  else if (i < argc)
			    {
			      arg = argv[i];
			      ++i;
			    }
			  else
			    this->usage(_("missing argument"), opt);
			}
		      this->apply_option(options[j], arg);
		    }
		  break;
		}
	    }
a772 2
	  if (j >= options_size)
	    this->usage(_("unknown option"), *s);
d774 7
a780 3
	  ++s;
	}
    }
@


1.29
log
@From Craig Silverstein: Minimal --script implementation.
@
text
@d72 2
a73 1
  int (*special)(int argc, char** argv, char *arg, Command_line*);
d125 2
a126 1
library(int argc, char** argv, char* arg, gold::Command_line* cmdline)
d128 17
a144 1
  return cmdline->process_l_option(argc, argv, arg);
d150 1
a150 1
start_group(int, char**, char* arg, gold::Command_line* cmdline)
d159 1
a159 1
end_group(int, char**, char* arg, gold::Command_line* cmdline)
d168 1
a168 1
help(int, char**, char*, gold::Command_line*)
d257 1
a257 1
version(int, char**, char* opt, gold::Command_line*)
d398 3
a400 3
  GENERAL_ARG('T', "script", N_("Read linker script"),
              N_("-T FILE, --script FILE"), TWO_DASHES,
              &General_options::set_script),
d685 6
a690 1
		i += options[j].special(argc - 1, argv + i, opt, this);
d735 2
a736 1
		      i += options[j].special(argc - i, argv + i, s, this);
d786 43
d884 2
a885 1
Command_line::process_l_option(int argc, char** argv, char* arg)
d888 2
a889 14
  const char* libname;
  if (arg[1] != '\0')
    {
      ret = 1;
      libname = arg + 1;
    }
  else if (argc > 1)
    {
      ret = 2;
      libname = argv[argc + 1];
    }
  else
    this->usage(_("missing argument"), arg);

a890 1

@


1.28
log
@Add support for PT_GNU_STACK.
@
text
@d380 3
@


1.27
log
@Implement -Bstatic/-Bdynamic.
@
text
@d96 11
d112 2
d410 8
d431 12
d465 2
a466 1
    thread_count_final_(0)
d479 22
d745 1
a745 1
      fprintf(stderr, _("%s: missing group end"), program_name);
@


1.26
log
@Add support for -Bsymbolic.
@
text
@d315 8
@


1.25
log
@Add infrastructure for threading support.
@
text
@d315 2
d412 1
@


1.24
log
@From Craig Silverstein: implement -Ttext.
@
text
@d360 19
d417 5
a421 1
    text_segment_address_(-1U)   // -1 indicates value not set by user
@


1.23
log
@Fix exit status.
@
text
@d309 6
a314 7
  SPECIAL('l', "library", N_("Search for library LIBNAME"),
	  N_("-lLIBNAME, --library LIBNAME"), TWO_DASHES,
	  &library),
  SPECIAL('(', "start-group", N_("Start a library search group"), NULL,
	  TWO_DASHES, &start_group),
  SPECIAL(')', "end-group", N_("End a library search group"), NULL,
	  TWO_DASHES, &end_group),
d317 2
d322 3
d330 3
a335 3
  GENERAL_ARG('o', "output", N_("Set output file name"),
	      N_("-o FILE, --output FILE"), TWO_DASHES,
	      &General_options::set_output_file_name),
d341 4
a348 6
  GENERAL_NOARG('\0', "eh-frame-hdr", N_("Create exception frame header"),
                NULL, TWO_DASHES, &General_options::set_create_eh_frame_hdr),
  GENERAL_ARG('\0', "rpath-link",
              N_("Add DIR to link time shared library search path"),
              N_("--rpath-link DIR"), TWO_DASHES,
              &General_options::add_to_rpath_link),
d357 3
a359 6
  POSDEP_NOARG('\0', "as-needed",
	       N_("Only set DT_NEEDED for dynamic libs if used"),
	       NULL, TWO_DASHES, &Position_dependent_options::set_as_needed),
  POSDEP_NOARG('\0', "no-as-needed",
	       N_("Always DT_NEEDED for dynamic libs (default)"),
	       NULL, TWO_DASHES, &Position_dependent_options::clear_as_needed),
d368 4
d397 2
a398 1
    sysroot_()
@


1.22
log
@Run all error handling through an Errors object.  Delete output file
on error.
@
text
@d218 1
a218 1
  ::exit(true);
d229 1
a229 1
  ::exit(true);
d770 1
a770 1
  ::exit(false);
@


1.21
log
@Add --stats option to print runtime and memory usage statistics.
@
text
@d218 1
a218 1
  gold::gold_exit(true);
d229 1
a229 1
  gold::gold_exit(true);
d770 1
a770 1
  gold_exit(false);
@


1.20
log
@From Craig Silverstein: don't permit -s and -r.
@
text
@d351 2
d393 1
@


1.19
log
@Implement -s and -S options which strip symbols.
@
text
@d657 3
d661 17
@


1.18
log
@Add --version option.
@
text
@d337 4
d385 1
@


1.17
log
@Full support for --sysroot.
@
text
@d223 10
d364 3
a366 1
	  TWO_DASHES, &help)
@


1.16
log
@From Craig Silverstein: add support for searching for input files
named in linker scripts.
@
text
@d23 2
d26 3
a29 1
#include "gold.h"
d223 45
d337 2
a338 2
  GENERAL_ARG('\0', "sysroot", N_("Currently ignored"), NULL, TWO_DASHES,
	      &General_options::ignore),
d373 2
a374 1
    is_static_(false)
d387 60
d527 1
d529 4
a532 1
	*arg = '\0';
d555 2
d636 4
a639 2
  this->options_.add_to_search_path("/lib");
  this->options_.add_to_search_path("/usr/lib");
@


1.15
log
@Add licensing text to every source file.
@
text
@d288 2
d555 1
a555 1
  Input_file_argument file(name, is_lib, this->position_options_);
@


1.14
log
@From Craig Silverstein: Add -O option.
@
text
@d3 20
@


1.13
log
@Fix handling of --eh-frame-hdr option.
@
text
@d247 3
d295 1
@


1.12
log
@Add -rpath-link option, currently unused.
@
text
@d256 1
a256 1
                NULL, TWO_DASHES, &General_options::create_eh_frame_hdr),
@


1.11
log
@Recognize and ignore the --eh-frame-hdr option.
@
text
@d252 1
a252 1
  GENERAL_ARG('R', "rpath", N_("Add directory to runtime search path"),
d257 4
d296 1
@


1.10
log
@Add support for -E/--export-dynamic.  Also clean up --help output a bit.
@
text
@d255 2
d290 1
@


1.9
log
@Implement --whole-archive.
@
text
@d141 1
d154 1
d176 1
d183 1
a183 1
      if (len > 30)
d231 1
a231 1
	  N_("-lLIBNAME --library LIBNAME"), TWO_DASHES,
d237 2
d260 1
a260 1
	       N_("Only set DT_NEEDED for following dynamic libs if used"),
d263 1
a263 1
	       N_("Always DT_NEEDED for following dynamic libs (default)"),
d283 2
a284 1
  : dynamic_linker_(NULL),
@


1.8
log
@Add support for -rpath.
@
text
@d260 8
d282 1
d291 3
a293 1
  : do_static_search_(false)
@


1.7
log
@Hash tables, dynamic section, i386 PLT, gold_assert.
@
text
@d247 3
@


1.6
log
@More dynamic object support, initial scripting support.
@
text
@d294 2
a295 2
      assert(!this->input_argument_list_.empty());
      assert(this->input_argument_list_.back().is_group());
d305 1
a305 1
  assert(!this->in_group_);
d316 1
a316 1
  assert(this->in_group_);
@


1.5
log
@Ignored the -m option, for old linker compatibility.
@
text
@d234 3
d251 6
d267 2
a268 1
  : search_path_(),
d283 37
d323 1
a323 1
  : options_(), position_options_(), inputs_(), in_group_(false)
d459 1
a459 1
  if (this->in_group_)
d502 1
a502 8
  if (!this->in_group_)
    this->inputs_.push_back(Input_argument(file));
  else
    {
      assert(!this->inputs_.empty());
      assert(this->inputs_.back().is_group());
      this->inputs_.back().group()->add_file(file);
    }
d535 1
a535 1
  if (this->in_group_)
d537 1
a537 6

  // This object is leaked.
  Input_file_group* group = new Input_file_group();
  this->inputs_.push_back(Input_argument(group));

  this->in_group_ = true;
d545 1
a545 1
  if (!this->in_group_)
d547 1
a547 1
  this->in_group_ = false;
@


1.4
log
@Can now do a full static link of hello, world in C or C++
@
text
@d237 2
@


1.3
log
@Framework for relocation scanning.  Implement simple static TLS
relocations.
@
text
@d92 18
d230 4
d271 1
a271 1
// Construct a Command_line.
d274 1
d292 1
a292 2
	  this->inputs_.push_back(Input_argument(argv[i], false,
						 this->position_options_));
d410 6
d447 16
d483 1
a483 2
  this->inputs_.push_back(Input_argument(libname, true,
					 this->position_options_));
d486 25
@


1.2
log
@Snapshot.  Now able to produce a minimal executable which actually
runs.
@
text
@d220 2
d237 1
@


1.1
log
@Initial CVS checkin of gold
@
text
@d8 3
d13 1
a13 1
struct gold::options::One_option
d48 1
a48 1
  int (*special)(int argc, char** argv, char *arg, gold::Command_line*);
d52 1
a52 1
  void (gold::General_options::*general_noarg)();
d56 1
a56 1
  void (gold::General_options::*general_arg)(const char*);
d60 1
a60 1
  void (gold::Position_dependent_options::*dependent_noarg)();
d64 1
a64 1
  void (gold::Position_dependent_options::*dependent_arg)(const char*);
d72 1
a72 1
class gold::options::Command_line_options
d79 2
d84 8
d178 4
a181 1
} // End empty namespace.
d189 1
a189 1
  { short_option, long_option, doc, help, gold::options::One_option::dash, \
d192 1
a192 1
  { short_option, long_option, doc, help, gold::options::One_option::dash, \
d195 1
a195 1
  { short_option, long_option, doc, help, gold::options::One_option::dash, \
d198 1
a198 1
  { short_option, long_option, doc, help, gold::options::One_option::dash, \
d201 1
a201 1
  { short_option, long_option, doc, help, gold::options::One_option::dash, \
d206 2
a207 2
const gold::options::One_option
gold::options::Command_line_options::options[] =
d209 3
d214 4
a217 1
	      &gold::General_options::add_to_search_path),
d219 1
a219 1
		ONE_DASH, &gold::General_options::set_relocatable),
d221 1
a221 1
		NULL, ONE_DASH, &gold::General_options::set_static),
d226 1
a226 1
const int gold::options::Command_line_options::options_size =
d231 5
a235 2
gold::General_options::General_options()
  : is_relocatable_(false)
d241 1
a241 1
gold::Position_dependent_options::Position_dependent_options()
d248 1
a248 1
gold::Command_line::Command_line()
d255 1
a255 1
gold::Command_line::process(int argc, char** argv)
d257 3
a259 3
  const int options_size = gold::options::Command_line_options::options_size;
  const gold::options::One_option* options =
    gold::options::Command_line_options::options;
d266 1
a266 1
	  this->inputs_.push_back(Input_argument(argv[i],
d303 1
a303 1
		      != gold::options::One_option::EXACTLY_TWO_DASHES))
d384 4
d393 2
a394 2
gold::Command_line::apply_option(const gold::options::One_option& opt,
				 const char* arg)
d403 1
a403 1
	gold::gold_unreachable();
d412 1
a412 1
	gold::gold_unreachable();
d416 26
d445 1
a445 1
gold::Command_line::usage()
d449 2
a450 2
	  gold::program_name);
  gold::gold_exit(false);
d454 1
a454 1
gold::Command_line::usage(const char* msg, const char *opt)
d458 1
a458 1
	  gold::program_name, opt, msg);
d463 1
a463 1
gold::Command_line::usage(const char* msg, char opt)
d467 1
a467 1
	  gold::program_name, opt, msg);
d470 2
@

