head	1.189;
access;
symbols
	binutils-2_24-branch:1.189.0.2
	binutils-2_24-branchpoint:1.189
	binutils-2_21_1:1.152.2.1
	binutils-2_23_2:1.177
	binutils-2_23_1:1.177
	binutils-2_23:1.177
	binutils-2_23-branch:1.177.0.2
	binutils-2_23-branchpoint:1.177
	binutils-2_22_branch:1.169.2.1.0.2
	binutils-2_22:1.169.2.1
	binutils-2_22-branch:1.169.0.2
	binutils-2_22-branchpoint:1.169
	binutils-2_21:1.152
	binutils-2_21-branch:1.152.0.2
	binutils-2_21-branchpoint:1.152
	binutils-2_20_1:1.106.2.3
	binutils-2_20:1.106.2.1
	binutils-arc-20081103-branch:1.87.0.4
	binutils-arc-20081103-branchpoint:1.87
	binutils-2_20-branch:1.106.0.2
	binutils-2_20-branchpoint:1.106
	dje-cgen-play1-branch:1.102.0.2
	dje-cgen-play1-branchpoint:1.102
	arc-20081103-branch:1.87.0.2
	arc-20081103-branchpoint:1.87
	binutils-2_19_1:1.84
	binutils-2_19:1.84
	binutils-2_19-branch:1.84.0.2
	binutils-2_19-branchpoint:1.84
	binutils_latest_snapshot:1.189
	added-to-binutils:1.63;
locks; strict;
comment	@ * @;


1.189
date	2013.07.19.23.07.08;	author roland;	state Exp;
branches;
next	1.188;

1.188
date	2013.05.30.23.01.11;	author ccoutant;	state Exp;
branches;
next	1.187;

1.187
date	2013.05.10.22.33.35;	author roland;	state Exp;
branches;
next	1.186;

1.186
date	2013.05.10.20.35.47;	author roland;	state Exp;
branches;
next	1.185;

1.185
date	2013.04.26.21.38.57;	author ccoutant;	state Exp;
branches;
next	1.184;

1.184
date	2013.02.15.15.44.03;	author ian;	state Exp;
branches;
next	1.183;

1.183
date	2013.01.24.18.49.54;	author tmsriram;	state Exp;
branches;
next	1.182;

1.182
date	2013.01.18.17.44.31;	author vapier;	state Exp;
branches;
next	1.181;

1.181
date	2013.01.07.16.57.57;	author hjl;	state Exp;
branches;
next	1.180;

1.180
date	2012.12.12.03.41.39;	author amodra;	state Exp;
branches;
next	1.179;

1.179
date	2012.12.07.00.03.18;	author amodra;	state Exp;
branches;
next	1.178;

1.178
date	2012.12.06.03.13.16;	author amodra;	state Exp;
branches;
next	1.177;

1.177
date	2012.06.07.05.14.44;	author ccoutant;	state Exp;
branches
	1.177.2.1;
next	1.176;

1.176
date	2012.06.06.22.12.47;	author ccoutant;	state Exp;
branches;
next	1.175;

1.175
date	2012.04.17.00.28.41;	author ccoutant;	state Exp;
branches;
next	1.174;

1.174
date	2012.03.21.19.02.21;	author ccoutant;	state Exp;
branches;
next	1.173;

1.173
date	2011.11.03.04.32.01;	author ian;	state Exp;
branches;
next	1.172;

1.172
date	2011.11.03.03.38.34;	author ian;	state Exp;
branches;
next	1.171;

1.171
date	2011.10.31.22.43.49;	author ccoutant;	state Exp;
branches;
next	1.170;

1.170
date	2011.10.19.15.05.58;	author ian;	state Exp;
branches;
next	1.169;

1.169
date	2011.07.15.21.43.08;	author ian;	state Exp;
branches
	1.169.2.1;
next	1.168;

1.168
date	2011.07.11.16.19.51;	author ian;	state Exp;
branches;
next	1.167;

1.167
date	2011.07.09.06.11.34;	author ian;	state Exp;
branches;
next	1.166;

1.166
date	2011.07.06.22.15.12;	author ccoutant;	state Exp;
branches;
next	1.165;

1.165
date	2011.07.06.21.19.32;	author ccoutant;	state Exp;
branches;
next	1.164;

1.164
date	2011.07.03.04.46.56;	author ian;	state Exp;
branches;
next	1.163;

1.163
date	2011.07.02.00.39.13;	author ian;	state Exp;
branches;
next	1.162;

1.162
date	2011.07.01.22.05.01;	author ian;	state Exp;
branches;
next	1.161;

1.161
date	2011.06.28.23.12.31;	author ian;	state Exp;
branches;
next	1.160;

1.160
date	2011.06.23.00.46.13;	author ian;	state Exp;
branches;
next	1.159;

1.159
date	2011.05.24.23.31.07;	author ccoutant;	state Exp;
branches;
next	1.158;

1.158
date	2011.05.16.23.41.23;	author ian;	state Exp;
branches;
next	1.157;

1.157
date	2011.04.12.00.44.48;	author ccoutant;	state Exp;
branches;
next	1.156;

1.156
date	2011.03.30.21.07.13;	author ccoutant;	state Exp;
branches;
next	1.155;

1.155
date	2011.03.07.22.51.39;	author ian;	state Exp;
branches;
next	1.154;

1.154
date	2011.01.25.06.08.47;	author ian;	state Exp;
branches;
next	1.153;

1.153
date	2010.12.09.23.19.50;	author ccoutant;	state Exp;
branches;
next	1.152;

1.152
date	2010.10.14.22.10.22;	author ccoutant;	state Exp;
branches
	1.152.2.1;
next	1.151;

1.151
date	2010.10.11.23.15.25;	author ccoutant;	state Exp;
branches;
next	1.150;

1.150
date	2010.09.09.15.29.01;	author espindola;	state Exp;
branches;
next	1.149;

1.149
date	2010.08.25.08.36.54;	author nickc;	state Exp;
branches;
next	1.148;

1.148
date	2010.08.12.18.27.46;	author dougkwan;	state Exp;
branches;
next	1.147;

1.147
date	2010.06.01.23.37.57;	author tmsriram;	state Exp;
branches;
next	1.146;

1.146
date	2010.05.18.18.08.03;	author espindola;	state Exp;
branches;
next	1.145;

1.145
date	2010.04.21.16.32.28;	author aph;	state Exp;
branches;
next	1.144;

1.144
date	2010.04.07.21.42.22;	author dougkwan;	state Exp;
branches;
next	1.143;

1.143
date	2010.03.22.14.18.24;	author espindola;	state Exp;
branches;
next	1.142;

1.142
date	2010.03.10.17.37.11;	author ccoutant;	state Exp;
branches;
next	1.141;

1.141
date	2010.03.06.02.34.13;	author ian;	state Exp;
branches;
next	1.140;

1.140
date	2010.02.13.02.04.20;	author tmsriram;	state Exp;
branches;
next	1.139;

1.139
date	2010.01.22.19.43.00;	author dougkwan;	state Exp;
branches;
next	1.138;

1.138
date	2010.01.15.04.58.34;	author dougkwan;	state Exp;
branches;
next	1.137;

1.137
date	2010.01.11.07.39.36;	author dougkwan;	state Exp;
branches;
next	1.136;

1.136
date	2010.01.07.18.31.30;	author ian;	state Exp;
branches;
next	1.135;

1.135
date	2010.01.07.18.16.24;	author ian;	state Exp;
branches;
next	1.134;

1.134
date	2010.01.07.06.05.23;	author ian;	state Exp;
branches;
next	1.133;

1.133
date	2010.01.07.05.57.25;	author ian;	state Exp;
branches;
next	1.132;

1.132
date	2010.01.06.22.37.18;	author ian;	state Exp;
branches;
next	1.131;

1.131
date	2010.01.06.05.30.24;	author ian;	state Exp;
branches;
next	1.130;

1.130
date	2010.01.05.22.55.08;	author ian;	state Exp;
branches;
next	1.129;

1.129
date	2010.01.05.21.52.51;	author ian;	state Exp;
branches;
next	1.128;

1.128
date	2010.01.05.05.56.28;	author ian;	state Exp;
branches;
next	1.127;

1.127
date	2010.01.05.00.32.22;	author ian;	state Exp;
branches;
next	1.126;

1.126
date	2010.01.04.23.59.13;	author ian;	state Exp;
branches;
next	1.125;

1.125
date	2009.12.31.06.05.49;	author ian;	state Exp;
branches;
next	1.124;

1.124
date	2009.12.31.01.57.55;	author ian;	state Exp;
branches;
next	1.123;

1.123
date	2009.12.30.22.35.48;	author ian;	state Exp;
branches;
next	1.122;

1.122
date	2009.12.30.20.23.29;	author ian;	state Exp;
branches;
next	1.121;

1.121
date	2009.12.14.19.53.05;	author ian;	state Exp;
branches;
next	1.120;

1.120
date	2009.12.11.13.42.12;	author nickc;	state Exp;
branches;
next	1.119;

1.119
date	2009.11.25.08.08.45;	author dougkwan;	state Exp;
branches;
next	1.118;

1.118
date	2009.11.25.04.32.36;	author dougkwan;	state Exp;
branches;
next	1.117;

1.117
date	2009.11.04.01.24.41;	author ian;	state Exp;
branches;
next	1.116;

1.116
date	2009.11.03.15.57.02;	author ian;	state Exp;
branches;
next	1.115;

1.115
date	2009.10.28.00.42.34;	author ian;	state Exp;
branches;
next	1.114;

1.114
date	2009.10.14.05.25.02;	author ian;	state Exp;
branches;
next	1.113;

1.113
date	2009.10.13.21.23.00;	author ian;	state Exp;
branches;
next	1.112;

1.112
date	2009.10.13.21.17.43;	author tmsriram;	state Exp;
branches;
next	1.111;

1.111
date	2009.10.10.07.39.04;	author cgd;	state Exp;
branches;
next	1.110;

1.110
date	2009.10.09.23.18.19;	author dougkwan;	state Exp;
branches;
next	1.109;

1.109
date	2009.10.06.22.58.27;	author ian;	state Exp;
branches;
next	1.108;

1.108
date	2009.10.01.00.58.38;	author dougkwan;	state Exp;
branches;
next	1.107;

1.107
date	2009.09.18.20.02.21;	author csilvers;	state Exp;
branches;
next	1.106;

1.106
date	2009.08.25.01.10.48;	author ccoutant;	state Exp;
branches
	1.106.2.1;
next	1.105;

1.105
date	2009.08.24.23.31.45;	author ccoutant;	state Exp;
branches;
next	1.104;

1.104
date	2009.08.12.19.03.16;	author tmsriram;	state Exp;
branches;
next	1.103;

1.103
date	2009.08.05.20.51.56;	author tmsriram;	state Exp;
branches;
next	1.102;

1.102
date	2009.06.24.05.01.17;	author ian;	state Exp;
branches;
next	1.101;

1.101
date	2009.06.23.06.39.47;	author ian;	state Exp;
branches;
next	1.100;

1.100
date	2009.06.22.20.23.21;	author ian;	state Exp;
branches;
next	1.99;

1.99
date	2009.06.05.21.32.56;	author dougkwan;	state Exp;
branches;
next	1.98;

1.98
date	2009.05.19.22.14.17;	author ccoutant;	state Exp;
branches;
next	1.97;

1.97
date	2009.05.15.17.01.04;	author ian;	state Exp;
branches;
next	1.96;

1.96
date	2009.03.14.05.56.46;	author ian;	state Exp;
branches;
next	1.95;

1.95
date	2009.02.28.04.39.57;	author ian;	state Exp;
branches;
next	1.94;

1.94
date	2009.02.06.23.49.43;	author ian;	state Exp;
branches;
next	1.93;

1.93
date	2009.01.28.02.25.33;	author tmsriram;	state Exp;
branches;
next	1.92;

1.92
date	2009.01.23.17.05.16;	author cgf;	state Exp;
branches;
next	1.91;

1.91
date	2008.12.18.01.53.38;	author ian;	state Exp;
branches;
next	1.90;

1.90
date	2008.12.05.21.34.50;	author ccoutant;	state Exp;
branches;
next	1.89;

1.89
date	2008.12.05.21.13.35;	author ccoutant;	state Exp;
branches;
next	1.88;

1.88
date	2008.11.06.07.23.31;	author csilvers;	state Exp;
branches;
next	1.87;

1.87
date	2008.09.19.22.54.57;	author ccoutant;	state Exp;
branches;
next	1.86;

1.86
date	2008.09.16.04.23.29;	author aoliva;	state Exp;
branches;
next	1.85;

1.85
date	2008.09.12.05.42.29;	author cgd;	state Exp;
branches;
next	1.84;

1.84
date	2008.08.07.17.02.11;	author ccoutant;	state Exp;
branches;
next	1.83;

1.83
date	2008.07.22.23.55.24;	author ian;	state Exp;
branches;
next	1.82;

1.82
date	2008.07.22.23.01.20;	author ian;	state Exp;
branches;
next	1.81;

1.81
date	2008.07.22.22.08.43;	author ian;	state Exp;
branches;
next	1.80;

1.80
date	2008.05.28.20.48.16;	author ian;	state Exp;
branches;
next	1.79;

1.79
date	2008.05.21.21.37.44;	author ian;	state Exp;
branches;
next	1.78;

1.78
date	2008.05.20.04.00.46;	author ian;	state Exp;
branches;
next	1.77;

1.77
date	2008.05.07.06.08.01;	author ian;	state Exp;
branches;
next	1.76;

1.76
date	2008.05.06.20.40.33;	author ian;	state Exp;
branches;
next	1.75;

1.75
date	2008.05.06.18.32.38;	author ian;	state Exp;
branches;
next	1.74;

1.74
date	2008.05.06.17.46.31;	author ian;	state Exp;
branches;
next	1.73;

1.73
date	2008.05.06.05.03.15;	author ian;	state Exp;
branches;
next	1.72;

1.72
date	2008.04.17.22.45.47;	author ccoutant;	state Exp;
branches;
next	1.71;

1.71
date	2008.04.17.20.23.59;	author davem;	state Exp;
branches;
next	1.70;

1.70
date	2008.04.16.23.21.01;	author davem;	state Exp;
branches;
next	1.69;

1.69
date	2008.04.11.20.28.34;	author ian;	state Exp;
branches;
next	1.68;

1.68
date	2008.04.09.01.19.09;	author ian;	state Exp;
branches;
next	1.67;

1.67
date	2008.04.09.00.48.13;	author ian;	state Exp;
branches;
next	1.66;

1.66
date	2008.03.25.05.11.41;	author ian;	state Exp;
branches;
next	1.65;

1.65
date	2008.03.24.03.48.29;	author ian;	state Exp;
branches;
next	1.64;

1.64
date	2008.03.22.18.51.35;	author ian;	state Exp;
branches;
next	1.63;

1.63
date	2008.03.20.05.22.37;	author iant;	state Exp;
branches;
next	1.62;

1.62
date	2008.03.13.01.46.17;	author iant;	state Exp;
branches;
next	1.61;

1.61
date	2008.03.07.18.50.04;	author iant;	state Exp;
branches;
next	1.60;

1.60
date	2008.03.07.07.00.48;	author iant;	state Exp;
branches;
next	1.59;

1.59
date	2008.03.06.05.51.42;	author iant;	state Exp;
branches;
next	1.58;

1.58
date	2008.03.06.00.53.37;	author iant;	state Exp;
branches;
next	1.57;

1.57
date	2008.03.06.00.15.04;	author iant;	state Exp;
branches;
next	1.56;

1.56
date	2008.03.04.23.10.38;	author iant;	state Exp;
branches;
next	1.55;

1.55
date	2008.03.04.18.21.43;	author iant;	state Exp;
branches;
next	1.54;

1.54
date	2008.02.28.20.35.39;	author iant;	state Exp;
branches;
next	1.53;

1.53
date	2008.02.28.00.18.24;	author iant;	state Exp;
branches;
next	1.52;

1.52
date	2008.02.27.22.38.18;	author iant;	state Exp;
branches;
next	1.51;

1.51
date	2008.02.26.22.48.08;	author iant;	state Exp;
branches;
next	1.50;

1.50
date	2008.02.26.22.10.32;	author iant;	state Exp;
branches;
next	1.49;

1.49
date	2008.02.26.21.45.30;	author iant;	state Exp;
branches;
next	1.48;

1.48
date	2008.02.13.22.47.28;	author iant;	state Exp;
branches;
next	1.47;

1.47
date	2008.02.13.02.44.50;	author iant;	state Exp;
branches;
next	1.46;

1.46
date	2008.02.08.07.06.58;	author iant;	state Exp;
branches;
next	1.45;

1.45
date	2008.02.07.07.33.46;	author iant;	state Exp;
branches;
next	1.44;

1.44
date	2008.02.07.01.51.25;	author iant;	state Exp;
branches;
next	1.43;

1.43
date	2008.02.04.22.44.35;	author iant;	state Exp;
branches;
next	1.42;

1.42
date	2008.01.15.23.41.28;	author iant;	state Exp;
branches;
next	1.41;

1.41
date	2008.01.09.19.57.45;	author iant;	state Exp;
branches;
next	1.40;

1.40
date	2008.01.06.00.47.10;	author iant;	state Exp;
branches;
next	1.39;

1.39
date	2008.01.04.05.35.24;	author iant;	state Exp;
branches;
next	1.38;

1.38
date	2007.12.14.04.53.22;	author iant;	state Exp;
branches;
next	1.37;

1.37
date	2007.12.08.03.05.27;	author iant;	state Exp;
branches;
next	1.36;

1.36
date	2007.12.04.01.30.46;	author iant;	state Exp;
branches;
next	1.35;

1.35
date	2007.11.30.00.35.27;	author iant;	state Exp;
branches;
next	1.34;

1.34
date	2007.11.22.00.05.51;	author iant;	state Exp;
branches;
next	1.33;

1.33
date	2007.11.15.23.03.45;	author iant;	state Exp;
branches;
next	1.32;

1.32
date	2007.11.15.01.12.55;	author iant;	state Exp;
branches;
next	1.31;

1.31
date	2007.11.14.07.34.53;	author iant;	state Exp;
branches;
next	1.30;

1.30
date	2007.11.14.01.03.01;	author iant;	state Exp;
branches;
next	1.29;

1.29
date	2007.10.30.06.27.03;	author iant;	state Exp;
branches;
next	1.28;

1.28
date	2007.10.27.00.29.34;	author iant;	state Exp;
branches;
next	1.27;

1.27
date	2007.10.26.18.03.24;	author iant;	state Exp;
branches;
next	1.26;

1.26
date	2007.10.23.05.05.48;	author iant;	state Exp;
branches;
next	1.25;

1.25
date	2007.10.22.18.04.43;	author iant;	state Exp;
branches;
next	1.24;

1.24
date	2007.10.18.23.20.53;	author iant;	state Exp;
branches;
next	1.23;

1.23
date	2007.10.17.06.24.50;	author iant;	state Exp;
branches;
next	1.22;

1.22
date	2007.10.16.22.38.35;	author iant;	state Exp;
branches;
next	1.21;

1.21
date	2007.10.12.05.51.25;	author iant;	state Exp;
branches;
next	1.20;

1.20
date	2007.10.10.19.30.39;	author iant;	state Exp;
branches;
next	1.19;

1.19
date	2007.10.10.19.02.56;	author iant;	state Exp;
branches;
next	1.18;

1.18
date	2007.10.04.05.49.04;	author iant;	state Exp;
branches;
next	1.17;

1.17
date	2007.10.02.21.24.41;	author iant;	state Exp;
branches;
next	1.16;

1.16
date	2007.09.22.21.02.10;	author iant;	state Exp;
branches;
next	1.15;

1.15
date	2007.09.21.05.43.33;	author iant;	state Exp;
branches;
next	1.14;

1.14
date	2007.09.19.23.50.56;	author iant;	state Exp;
branches;
next	1.13;

1.13
date	2007.09.06.23.37.53;	author iant;	state Exp;
branches;
next	1.12;

1.12
date	2007.08.22.17.07.36;	author iant;	state Exp;
branches;
next	1.11;

1.11
date	2007.08.22.05.06.38;	author iant;	state Exp;
branches;
next	1.10;

1.10
date	2007.08.21.23.37.56;	author iant;	state Exp;
branches;
next	1.9;

1.9
date	2007.08.21.20.37.32;	author iant;	state Exp;
branches;
next	1.8;

1.8
date	2006.11.29.17.56.40;	author iant;	state Exp;
branches;
next	1.7;

1.7
date	2006.11.14.19.21.05;	author iant;	state Exp;
branches;
next	1.6;

1.6
date	2006.11.03.18.48.03;	author iant;	state Exp;
branches;
next	1.5;

1.5
date	2006.11.03.18.26.10;	author iant;	state Exp;
branches;
next	1.4;

1.4
date	2006.10.20.20.40.49;	author iant;	state Exp;
branches;
next	1.3;

1.3
date	2006.09.29.19.58.17;	author iant;	state Exp;
branches;
next	1.2;

1.2
date	2006.09.21.22.13.18;	author iant;	state Exp;
branches;
next	1.1;

1.1
date	2006.08.04.23.10.59;	author iant;	state Exp;
branches;
next	;

1.177.2.1
date	2013.05.10.22.35.30;	author roland;	state Exp;
branches;
next	1.177.2.2;

1.177.2.2
date	2013.05.13.16.41.11;	author roland;	state Exp;
branches;
next	1.177.2.3;

1.177.2.3
date	2013.07.19.20.14.22;	author roland;	state Exp;
branches;
next	1.177.2.4;

1.177.2.4
date	2013.07.19.23.08.00;	author roland;	state Exp;
branches;
next	;

1.169.2.1
date	2011.11.15.15.31.56;	author mgretton;	state Exp;
branches;
next	1.169.2.2;

1.169.2.2
date	2011.12.19.21.14.39;	author ian;	state Exp;
branches;
next	;

1.152.2.1
date	2011.03.07.22.51.50;	author ian;	state Exp;
branches;
next	;

1.106.2.1
date	2009.10.16.05.51.17;	author ian;	state Exp;
branches;
next	1.106.2.2;

1.106.2.2
date	2009.11.04.01.28.30;	author ian;	state Exp;
branches;
next	1.106.2.3;

1.106.2.3
date	2010.01.13.16.19.03;	author ian;	state Exp;
branches;
next	;


desc
@@


1.189
log
@gold/
	* options.h (General_options): Add -Trodata-segment option.
	* parameters.cc (Parameters::check_rodata_segment): New function.
	(Parameters::set_target_once): Call it.
	* parameters.h (Parameters): Declare it (private member function).
	* layout.cc (load_seg_unusable_for_headers): New function, broken
	out of Layout::relaxation_loop_body.  If TARGET->isolate_execinstr()
	then validate rodata segment rather than text segment.
	(relaxation_loop_body): Call that.
	(is_text_segment): New function.  Don't admit a non-executable
	segment if TARGET->isolate_execinstr().
	(set_segment_offsets): Call it.  Honor -Trodata-segment option.
@
text
@// options.h -- handle command line options for gold  -*- C++ -*-

// Copyright 2006, 2007, 2008, 2009, 2010, 2011, 2013
// Free Software Foundation, Inc.
// Written by Ian Lance Taylor <iant@@google.com>.

// This file is part of gold.

// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,
// MA 02110-1301, USA.

// General_options (from Command_line::options())
//   All the options (a.k.a. command-line flags)
// Input_argument (from Command_line::inputs())
//   The list of input files, including -l options.
// Command_line
//   Everything we get from the command line -- the General_options
//   plus the Input_arguments.
//
// There are also some smaller classes, such as
// Position_dependent_options which hold a subset of General_options
// that change as options are parsed (as opposed to the usual behavior
// of the last instance of that option specified on the commandline wins).

#ifndef GOLD_OPTIONS_H
#define GOLD_OPTIONS_H

#include <cstdlib>
#include <cstring>
#include <list>
#include <map>
#include <string>
#include <vector>

#include "elfcpp.h"
#include "script.h"

namespace gold
{

class Command_line;
class General_options;
class Search_directory;
class Input_file_group;
class Input_file_lib;
class Position_dependent_options;
class Target;
class Plugin_manager;
class Script_info;

// Incremental build action for a specific file, as selected by the user.

enum Incremental_disposition
{
  // Startup files that appear before the first disposition option.
  // These will default to INCREMENTAL_CHECK unless the
  // --incremental-startup-unchanged option is given.
  // (For files added implicitly by gcc before any user options.)
  INCREMENTAL_STARTUP,
  // Determine the status from the timestamp (default).
  INCREMENTAL_CHECK,
  // Assume the file changed from the previous build.
  INCREMENTAL_CHANGED,
  // Assume the file didn't change from the previous build.
  INCREMENTAL_UNCHANGED
};

// The nested namespace is to contain all the global variables and
// structs that need to be defined in the .h file, but do not need to
// be used outside this class.
namespace options
{
typedef std::vector<Search_directory> Dir_list;
typedef Unordered_set<std::string> String_set;

// These routines convert from a string option to various types.
// Each gives a fatal error if it cannot parse the argument.

extern void
parse_bool(const char* option_name, const char* arg, bool* retval);

extern void
parse_int(const char* option_name, const char* arg, int* retval);

extern void
parse_uint(const char* option_name, const char* arg, int* retval);

extern void
parse_uint64(const char* option_name, const char* arg, uint64_t* retval);

extern void
parse_double(const char* option_name, const char* arg, double* retval);

extern void
parse_percent(const char* option_name, const char* arg, double* retval);

extern void
parse_string(const char* option_name, const char* arg, const char** retval);

extern void
parse_optional_string(const char* option_name, const char* arg,
		      const char** retval);

extern void
parse_dirlist(const char* option_name, const char* arg, Dir_list* retval);

extern void
parse_set(const char* option_name, const char* arg, String_set* retval);

extern void
parse_choices(const char* option_name, const char* arg, const char** retval,
	      const char* choices[], int num_choices);

struct Struct_var;

// Most options have both a shortname (one letter) and a longname.
// This enum controls how many dashes are expected for longname access
// -- shortnames always use one dash.  Most longnames will accept
// either one dash or two; the only difference between ONE_DASH and
// TWO_DASHES is how we print the option in --help.  However, some
// longnames require two dashes, and some require only one.  The
// special value DASH_Z means that the option is preceded by "-z".
enum Dashes
{
  ONE_DASH, TWO_DASHES, EXACTLY_ONE_DASH, EXACTLY_TWO_DASHES, DASH_Z
};

// LONGNAME is the long-name of the option with dashes converted to
//    underscores, or else the short-name if the option has no long-name.
//    It is never the empty string.
// DASHES is an instance of the Dashes enum: ONE_DASH, TWO_DASHES, etc.
// SHORTNAME is the short-name of the option, as a char, or '\0' if the
//    option has no short-name.  If the option has no long-name, you
//    should specify the short-name in *both* VARNAME and here.
// DEFAULT_VALUE is the value of the option if not specified on the
//    commandline, as a string.
// HELPSTRING is the descriptive text used with the option via --help
// HELPARG is how you define the argument to the option.
//    --help output is "-shortname HELPARG, --longname HELPARG: HELPSTRING"
//    HELPARG should be NULL iff the option is a bool and takes no arg.
// OPTIONAL_ARG is true if this option takes an optional argument.  An
//    optional argument must be specifid as --OPTION=VALUE, not
//    --OPTION VALUE.
// READER provides parse_to_value, which is a function that will convert
//    a char* argument into the proper type and store it in some variable.
// A One_option struct initializes itself with the global list of options
// at constructor time, so be careful making one of these.
struct One_option
{
  std::string longname;
  Dashes dashes;
  char shortname;
  const char* default_value;
  const char* helpstring;
  const char* helparg;
  bool optional_arg;
  Struct_var* reader;

  One_option(const char* ln, Dashes d, char sn, const char* dv,
	     const char* hs, const char* ha, bool oa, Struct_var* r)
    : longname(ln), dashes(d), shortname(sn), default_value(dv ? dv : ""),
      helpstring(hs), helparg(ha), optional_arg(oa), reader(r)
  {
    // In longname, we convert all underscores to dashes, since GNU
    // style uses dashes in option names.  longname is likely to have
    // underscores in it because it's also used to declare a C++
    // function.
    const char* pos = strchr(this->longname.c_str(), '_');
    for (; pos; pos = strchr(pos, '_'))
      this->longname[pos - this->longname.c_str()] = '-';

    // We only register ourselves if our helpstring is not NULL.  This
    // is to support the "no-VAR" boolean variables, which we
    // conditionally turn on by defining "no-VAR" help text.
    if (this->helpstring)
      this->register_option();
  }

  // This option takes an argument iff helparg is not NULL.
  bool
  takes_argument() const
  { return this->helparg != NULL; }

  // Whether the argument is optional.
  bool
  takes_optional_argument() const
  { return this->optional_arg; }

  // Register this option with the global list of options.
  void
  register_option();

  // Print this option to stdout (used with --help).
  void
  print() const;
};

// All options have a Struct_##varname that inherits from this and
// actually implements parse_to_value for that option.
struct Struct_var
{
  // OPTION: the name of the option as specified on the commandline,
  //    including leading dashes, and any text following the option:
  //    "-O", "--defsym=mysym=0x1000", etc.
  // ARG: the arg associated with this option, or NULL if the option
  //    takes no argument: "2", "mysym=0x1000", etc.
  // CMDLINE: the global Command_line object.  Used by DEFINE_special.
  // OPTIONS: the global General_options object.  Used by DEFINE_special.
  virtual void
  parse_to_value(const char* option, const char* arg,
		 Command_line* cmdline, General_options* options) = 0;
  virtual
  ~Struct_var()  // To make gcc happy.
  { }
};

// This is for "special" options that aren't of any predefined type.
struct Struct_special : public Struct_var
{
  // If you change this, change the parse-fn in DEFINE_special as well.
  typedef void (General_options::*Parse_function)(const char*, const char*,
						  Command_line*);
  Struct_special(const char* varname, Dashes dashes, char shortname,
		 Parse_function parse_function,
		 const char* helpstring, const char* helparg)
    : option(varname, dashes, shortname, "", helpstring, helparg, false, this),
      parse(parse_function)
  { }

  void parse_to_value(const char* option, const char* arg,
		      Command_line* cmdline, General_options* options)
  { (options->*(this->parse))(option, arg, cmdline); }

  One_option option;
  Parse_function parse;
};

}  // End namespace options.


// These are helper macros use by DEFINE_uint64/etc below.
// This macro is used inside the General_options_ class, so defines
// var() and set_var() as General_options methods.  Arguments as are
// for the constructor for One_option.  param_type__ is the same as
// type__ for built-in types, and "const type__ &" otherwise.
//
// When we define the linker command option "assert", the macro argument
// varname__ of DEFINE_var below will be replaced by "assert".  On Mac OSX
// assert.h is included implicitly by one of the library headers we use.  To
// avoid unintended macro substitution of "assert()", we need to enclose
// varname__ with parenthese.
#define DEFINE_var(varname__, dashes__, shortname__, default_value__,        \
		   default_value_as_string__, helpstring__, helparg__,       \
		   optional_arg__, type__, param_type__, parse_fn__)	     \
 public:                                                                     \
  param_type__                                                               \
  (varname__)() const                                                        \
  { return this->varname__##_.value; }                                       \
									     \
  bool                                                                       \
  user_set_##varname__() const                                               \
  { return this->varname__##_.user_set_via_option; }                         \
									     \
  void									     \
  set_user_set_##varname__()						     \
  { this->varname__##_.user_set_via_option = true; }			     \
									     \
 private:                                                                    \
  struct Struct_##varname__ : public options::Struct_var                     \
  {                                                                          \
    Struct_##varname__()                                                     \
      : option(#varname__, dashes__, shortname__, default_value_as_string__, \
	       helpstring__, helparg__, optional_arg__, this),		     \
	user_set_via_option(false), value(default_value__)                   \
    { }                                                                      \
									     \
    void                                                                     \
    parse_to_value(const char* option_name, const char* arg,                 \
		   Command_line*, General_options*)                          \
    {                                                                        \
      parse_fn__(option_name, arg, &this->value);                            \
      this->user_set_via_option = true;                                      \
    }                                                                        \
									     \
    options::One_option option;                                              \
    bool user_set_via_option;                                                \
    type__ value;                                                            \
  };                                                                         \
  Struct_##varname__ varname__##_;                                           \
  void                                                                       \
  set_##varname__(param_type__ value)                                        \
  { this->varname__##_.value = value; }

// These macros allow for easy addition of a new commandline option.

// If no_helpstring__ is not NULL, then in addition to creating
// VARNAME, we also create an option called no-VARNAME (or, for a -z
// option, noVARNAME).
#define DEFINE_bool(varname__, dashes__, shortname__, default_value__,   \
		    helpstring__, no_helpstring__)                       \
  DEFINE_var(varname__, dashes__, shortname__, default_value__,          \
	     default_value__ ? "true" : "false", helpstring__, NULL,     \
	     false, bool, bool, options::parse_bool)			 \
  struct Struct_no_##varname__ : public options::Struct_var              \
  {                                                                      \
    Struct_no_##varname__() : option((dashes__ == options::DASH_Z	 \
				      ? "no" #varname__			 \
				      : "no-" #varname__),		 \
				     dashes__, '\0',			 \
				     default_value__ ? "false" : "true", \
				     no_helpstring__, NULL, false, this) \
    { }                                                                  \
									 \
    void                                                                 \
    parse_to_value(const char*, const char*,                             \
		   Command_line*, General_options* options)              \
    {                                                                    \
      options->set_##varname__(false);                                   \
      options->set_user_set_##varname__();                               \
    }                                                                    \
									 \
    options::One_option option;                                          \
  };                                                                     \
  Struct_no_##varname__ no_##varname__##_initializer_

#define DEFINE_enable(varname__, dashes__, shortname__, default_value__, \
		      helpstring__, no_helpstring__)                     \
  DEFINE_var(enable_##varname__, dashes__, shortname__, default_value__, \
	     default_value__ ? "true" : "false", helpstring__, NULL,     \
	     false, bool, bool, options::parse_bool)			 \
  struct Struct_disable_##varname__ : public options::Struct_var         \
  {                                                                      \
    Struct_disable_##varname__() : option("disable-" #varname__,         \
				     dashes__, '\0',                     \
				     default_value__ ? "false" : "true", \
				     no_helpstring__, NULL, false, this) \
    { }                                                                  \
									 \
    void                                                                 \
    parse_to_value(const char*, const char*,                             \
		   Command_line*, General_options* options)              \
    { options->set_enable_##varname__(false); }                          \
									 \
    options::One_option option;                                          \
  };                                                                     \
  Struct_disable_##varname__ disable_##varname__##_initializer_

#define DEFINE_int(varname__, dashes__, shortname__, default_value__,   \
		   helpstring__, helparg__)                             \
  DEFINE_var(varname__, dashes__, shortname__, default_value__,         \
	     #default_value__, helpstring__, helparg__, false,		\
	     int, int, options::parse_int)

#define DEFINE_uint(varname__, dashes__, shortname__, default_value__,  \
		   helpstring__, helparg__)                             \
  DEFINE_var(varname__, dashes__, shortname__, default_value__,         \
	     #default_value__, helpstring__, helparg__, false,		\
	     int, int, options::parse_uint)

#define DEFINE_uint64(varname__, dashes__, shortname__, default_value__, \
		      helpstring__, helparg__)                           \
  DEFINE_var(varname__, dashes__, shortname__, default_value__,          \
	     #default_value__, helpstring__, helparg__, false,		 \
	     uint64_t, uint64_t, options::parse_uint64)

#define DEFINE_double(varname__, dashes__, shortname__, default_value__, \
		      helpstring__, helparg__)				 \
  DEFINE_var(varname__, dashes__, shortname__, default_value__,		 \
	     #default_value__, helpstring__, helparg__, false,		 \
	     double, double, options::parse_double)

#define DEFINE_percent(varname__, dashes__, shortname__, default_value__, \
		       helpstring__, helparg__)				  \
  DEFINE_var(varname__, dashes__, shortname__, default_value__ / 100.0,	  \
	     #default_value__, helpstring__, helparg__, false,		  \
	     double, double, options::parse_percent)

#define DEFINE_string(varname__, dashes__, shortname__, default_value__, \
		      helpstring__, helparg__)                           \
  DEFINE_var(varname__, dashes__, shortname__, default_value__,          \
	     default_value__, helpstring__, helparg__, false,		 \
	     const char*, const char*, options::parse_string)

// This is like DEFINE_string, but we convert each occurrence to a
// Search_directory and store it in a vector.  Thus we also have the
// add_to_VARNAME() method, to append to the vector.
#define DEFINE_dirlist(varname__, dashes__, shortname__,                  \
			   helpstring__, helparg__)                       \
  DEFINE_var(varname__, dashes__, shortname__, ,                          \
	     "", helpstring__, helparg__, false, options::Dir_list,	  \
	     const options::Dir_list&, options::parse_dirlist)            \
  void                                                                    \
  add_to_##varname__(const char* new_value)                               \
  { options::parse_dirlist(NULL, new_value, &this->varname__##_.value); } \
  void                                                                    \
  add_search_directory_to_##varname__(const Search_directory& dir)        \
  { this->varname__##_.value.push_back(dir); }

// This is like DEFINE_string, but we store a set of strings.
#define DEFINE_set(varname__, dashes__, shortname__,                      \
		   helpstring__, helparg__)                               \
  DEFINE_var(varname__, dashes__, shortname__, ,                          \
	     "", helpstring__, helparg__, false, options::String_set,     \
	     const options::String_set&, options::parse_set)              \
 public:                                                                  \
  bool                                                                    \
  any_##varname__() const                                                 \
  { return !this->varname__##_.value.empty(); }                           \
									  \
  bool                                                                    \
  is_##varname__(const char* symbol) const                                \
  {                                                                       \
    return (!this->varname__##_.value.empty()                             \
	    && (this->varname__##_.value.find(std::string(symbol))        \
		!= this->varname__##_.value.end()));                      \
  }									  \
									  \
  options::String_set::const_iterator					  \
  varname__##_begin() const						  \
  { return this->varname__##_.value.begin(); }				  \
									  \
  options::String_set::const_iterator					  \
  varname__##_end() const						  \
  { return this->varname__##_.value.end(); }

// When you have a list of possible values (expressed as string)
// After helparg__ should come an initializer list, like
//   {"foo", "bar", "baz"}
#define DEFINE_enum(varname__, dashes__, shortname__, default_value__,   \
		    helpstring__, helparg__, ...)                        \
  DEFINE_var(varname__, dashes__, shortname__, default_value__,          \
	     default_value__, helpstring__, helparg__, false,		 \
	     const char*, const char*, parse_choices_##varname__)        \
 private:                                                                \
  static void parse_choices_##varname__(const char* option_name,         \
					const char* arg,                 \
					const char** retval) {           \
    const char* choices[] = __VA_ARGS__;                                 \
    options::parse_choices(option_name, arg, retval,                     \
			   choices, sizeof(choices) / sizeof(*choices)); \
  }

// This is like DEFINE_bool, but VARNAME is the name of a different
// option.  This option becomes an alias for that one.  INVERT is true
// if this option is an inversion of the other one.
#define DEFINE_bool_alias(option__, varname__, dashes__, shortname__,	\
			  helpstring__, no_helpstring__, invert__)	\
 private:								\
  struct Struct_##option__ : public options::Struct_var			\
  {									\
    Struct_##option__()							\
      : option(#option__, dashes__, shortname__, "", helpstring__,	\
	       NULL, false, this)					\
    { }									\
									\
    void								\
    parse_to_value(const char*, const char*,				\
		   Command_line*, General_options* options)		\
    {									\
      options->set_##varname__(!invert__);				\
      options->set_user_set_##varname__();				\
    }									\
									\
    options::One_option option;						\
  };									\
  Struct_##option__ option__##_;					\
									\
  struct Struct_no_##option__ : public options::Struct_var		\
  {									\
    Struct_no_##option__()						\
      : option((dashes__ == options::DASH_Z				\
		? "no" #option__					\
		: "no-" #option__),					\
	       dashes__, '\0', "", no_helpstring__,			\
	       NULL, false, this)					\
    { }									\
									\
    void								\
    parse_to_value(const char*, const char*,				\
		   Command_line*, General_options* options)		\
    {									\
      options->set_##varname__(invert__);				\
      options->set_user_set_##varname__();				\
    }									\
									\
    options::One_option option;						\
  };									\
  Struct_no_##option__ no_##option__##_initializer_

// This is like DEFINE_uint64, but VARNAME is the name of a different
// option.  This option becomes an alias for that one.
#define DEFINE_uint64_alias(option__, varname__, dashes__, shortname__,	\
			    helpstring__, helparg__)			\
 private:								\
  struct Struct_##option__ : public options::Struct_var			\
  {									\
    Struct_##option__()							\
      : option(#option__, dashes__, shortname__, "", helpstring__,	\
	       helparg__, false, this)					\
    { }									\
									\
    void								\
    parse_to_value(const char* option_name, const char* arg,		\
		   Command_line*, General_options* options)		\
    {									\
      uint64_t value;							\
      options::parse_uint64(option_name, arg, &value);			\
      options->set_##varname__(value);					\
      options->set_user_set_##varname__();				\
    }									\
									\
    options::One_option option;						\
  };									\
  Struct_##option__ option__##_;

// This is used for non-standard flags.  It defines no functions; it
// just calls General_options::parse_VARNAME whenever the flag is
// seen.  We declare parse_VARNAME as a static member of
// General_options; you are responsible for defining it there.
// helparg__ should be NULL iff this special-option is a boolean.
#define DEFINE_special(varname__, dashes__, shortname__,                \
		       helpstring__, helparg__)                         \
 private:                                                               \
  void parse_##varname__(const char* option, const char* arg,           \
			 Command_line* inputs);                         \
  struct Struct_##varname__ : public options::Struct_special            \
  {                                                                     \
    Struct_##varname__()                                                \
      : options::Struct_special(#varname__, dashes__, shortname__,      \
				&General_options::parse_##varname__,    \
				helpstring__, helparg__)                \
    { }                                                                 \
  };                                                                    \
  Struct_##varname__ varname__##_initializer_

// An option that takes an optional string argument.  If the option is
// used with no argument, the value will be the default, and
// user_set_via_option will be true.
#define DEFINE_optional_string(varname__, dashes__, shortname__,	\
			       default_value__,				\
			       helpstring__, helparg__)			\
  DEFINE_var(varname__, dashes__, shortname__, default_value__,		\
	     default_value__, helpstring__, helparg__, true,		\
	     const char*, const char*, options::parse_optional_string)

// A directory to search.  For each directory we record whether it is
// in the sysroot.  We need to know this so that, if a linker script
// is found within the sysroot, we will apply the sysroot to any files
// named by that script.

class Search_directory
{
 public:
  // We need a default constructor because we put this in a
  // std::vector.
  Search_directory()
    : name_(NULL), put_in_sysroot_(false), is_in_sysroot_(false)
  { }

  // This is the usual constructor.
  Search_directory(const std::string& name, bool put_in_sysroot)
    : name_(name), put_in_sysroot_(put_in_sysroot), is_in_sysroot_(false)
  {
    if (this->name_.empty())
      this->name_ = ".";
  }

  // This is called if we have a sysroot.  The sysroot is prefixed to
  // any entries for which put_in_sysroot_ is true.  is_in_sysroot_ is
  // set to true for any enries which are in the sysroot (this will
  // naturally include any entries for which put_in_sysroot_ is true).
  // SYSROOT is the sysroot, CANONICAL_SYSROOT is the result of
  // passing SYSROOT to lrealpath.
  void
  add_sysroot(const char* sysroot, const char* canonical_sysroot);

  // Get the directory name.
  const std::string&
  name() const
  { return this->name_; }

  // Return whether this directory is in the sysroot.
  bool
  is_in_sysroot() const
  { return this->is_in_sysroot_; }

  // Return whether this is considered a system directory.
  bool
  is_system_directory() const
  { return this->put_in_sysroot_ || this->is_in_sysroot_; }

 private:
  // The directory name.
  std::string name_;
  // True if the sysroot should be added as a prefix for this
  // directory (if there is a sysroot).  This is true for system
  // directories that we search by default.
  bool put_in_sysroot_;
  // True if this directory is in the sysroot (if there is a sysroot).
  // This is true if there is a sysroot and either 1) put_in_sysroot_
  // is true, or 2) the directory happens to be in the sysroot based
  // on a pathname comparison.
  bool is_in_sysroot_;
};

class General_options
{
 private:
  // NOTE: For every option that you add here, also consider if you
  // should add it to Position_dependent_options.
  DEFINE_special(help, options::TWO_DASHES, '\0',
		 N_("Report usage information"), NULL);
  DEFINE_special(version, options::TWO_DASHES, 'v',
		 N_("Report version information"), NULL);
  DEFINE_special(V, options::EXACTLY_ONE_DASH, '\0',
		 N_("Report version and target information"), NULL);

  // These options are sorted approximately so that for each letter in
  // the alphabet, we show the option whose shortname is that letter
  // (if any) and then every longname that starts with that letter (in
  // alphabetical order).  For both, lowercase sorts before uppercase.
  // The -z options come last.

  DEFINE_bool(add_needed, options::TWO_DASHES, '\0', false,
	      N_("Not supported"),
	      N_("Do not copy DT_NEEDED tags from shared libraries"));

  DEFINE_bool_alias(allow_multiple_definition, muldefs, options::TWO_DASHES,
		    '\0', N_("Allow multiple definitions of symbols"),
		    N_("Do not allow multiple definitions"), false);

  DEFINE_bool(allow_shlib_undefined, options::TWO_DASHES, '\0', false,
	      N_("Allow unresolved references in shared libraries"),
	      N_("Do not allow unresolved references in shared libraries"));

  DEFINE_bool(as_needed, options::TWO_DASHES, '\0', false,
	      N_("Only set DT_NEEDED for shared libraries if used"),
	      N_("Always DT_NEEDED for shared libraries"));

  DEFINE_enum(assert, options::ONE_DASH, '\0', NULL,
	      N_("Ignored"), N_("[ignored]"),
	      {"definitions", "nodefinitions", "nosymbolic", "pure-text"});

  // This should really be an "enum", but it's too easy for folks to
  // forget to update the list as they add new targets.  So we just
  // accept any string.  We'll fail later (when the string is parsed),
  // if the target isn't actually supported.
  DEFINE_string(format, options::TWO_DASHES, 'b', "elf",
		N_("Set input format"), ("[elf,binary]"));

  DEFINE_bool(Bdynamic, options::ONE_DASH, '\0', true,
	      N_("-l searches for shared libraries"), NULL);
  DEFINE_bool_alias(Bstatic, Bdynamic, options::ONE_DASH, '\0',
		    N_("-l does not search for shared libraries"), NULL,
		    true);
  DEFINE_bool_alias(dy, Bdynamic, options::ONE_DASH, '\0',
		    N_("alias for -Bdynamic"), NULL, false);
  DEFINE_bool_alias(dn, Bdynamic, options::ONE_DASH, '\0',
		    N_("alias for -Bstatic"), NULL, true);

  DEFINE_bool(Bgroup, options::ONE_DASH, '\0', false,
	      N_("Use group name lookup rules for shared library"), NULL);

  DEFINE_bool(Bsymbolic, options::ONE_DASH, '\0', false,
	      N_("Bind defined symbols locally"), NULL);

  DEFINE_bool(Bsymbolic_functions, options::ONE_DASH, '\0', false,
	      N_("Bind defined function symbols locally"), NULL);

  DEFINE_optional_string(build_id, options::TWO_DASHES, '\0', "tree",
			 N_("Generate build ID note"),
			 N_("[=STYLE]"));

  DEFINE_uint64(build_id_chunk_size_for_treehash,
		options::TWO_DASHES, '\0', 2 << 20,
		N_("Chunk size for '--build-id=tree'"), N_("SIZE"));

  DEFINE_uint64(build_id_min_file_size_for_treehash, options::TWO_DASHES,
		'\0', 40 << 20,
		N_("Minimum output file size for '--build-id=tree' to work"
		   " differently than '--build-id=sha1'"), N_("SIZE"));

  DEFINE_bool(check_sections, options::TWO_DASHES, '\0', true,
	      N_("Check segment addresses for overlaps (default)"),
	      N_("Do not check segment addresses for overlaps"));

#ifdef HAVE_ZLIB_H
  DEFINE_enum(compress_debug_sections, options::TWO_DASHES, '\0', "none",
	      N_("Compress .debug_* sections in the output file"),
	      ("[none,zlib]"),
	      {"none", "zlib"});
#else
  DEFINE_enum(compress_debug_sections, options::TWO_DASHES, '\0', "none",
	      N_("Compress .debug_* sections in the output file"),
	      N_("[none]"),
	      {"none"});
#endif

  DEFINE_bool(copy_dt_needed_entries, options::TWO_DASHES, '\0', false,
	      N_("Not supported"),
	      N_("Do not copy DT_NEEDED tags from shared libraries"));

  DEFINE_bool(cref, options::TWO_DASHES, '\0', false,
	      N_("Output cross reference table"),
	      N_("Do not output cross reference table"));

  DEFINE_bool(ctors_in_init_array, options::TWO_DASHES, '\0', true,
	      N_("Use DT_INIT_ARRAY for all constructors (default)"),
	      N_("Handle constructors as directed by compiler"));

  DEFINE_bool(define_common, options::TWO_DASHES, 'd', false,
	      N_("Define common symbols"),
	      N_("Do not define common symbols"));
  DEFINE_bool(dc, options::ONE_DASH, '\0', false,
	      N_("Alias for -d"), NULL);
  DEFINE_bool(dp, options::ONE_DASH, '\0', false,
	      N_("Alias for -d"), NULL);

  DEFINE_string(debug, options::TWO_DASHES, '\0', "",
		N_("Turn on debugging"),
		N_("[all,files,script,task][,...]"));

  DEFINE_special(defsym, options::TWO_DASHES, '\0',
		 N_("Define a symbol"), N_("SYMBOL=EXPRESSION"));

  DEFINE_optional_string(demangle, options::TWO_DASHES, '\0', NULL,
			 N_("Demangle C++ symbols in log messages"),
			 N_("[=STYLE]"));

  DEFINE_bool(no_demangle, options::TWO_DASHES, '\0', false,
	      N_("Do not demangle C++ symbols in log messages"),
	      NULL);

  DEFINE_bool(detect_odr_violations, options::TWO_DASHES, '\0', false,
	      N_("Look for violations of the C++ One Definition Rule"),
	      N_("Do not look for violations of the C++ One Definition Rule"));

  DEFINE_bool(discard_all, options::TWO_DASHES, 'x', false,
	      N_("Delete all local symbols"), NULL);
  DEFINE_bool(discard_locals, options::TWO_DASHES, 'X', false,
	      N_("Delete all temporary local symbols"), NULL);

  DEFINE_bool(dynamic_list_data, options::TWO_DASHES, '\0', false,
	      N_("Add data symbols to dynamic symbols"), NULL);

  DEFINE_bool(dynamic_list_cpp_new, options::TWO_DASHES, '\0', false,
	      N_("Add C++ operator new/delete to dynamic symbols"), NULL);

  DEFINE_bool(dynamic_list_cpp_typeinfo, options::TWO_DASHES, '\0', false,
	      N_("Add C++ typeinfo to dynamic symbols"), NULL);

  DEFINE_special(dynamic_list, options::TWO_DASHES, '\0',
		 N_("Read a list of dynamic symbols"), N_("FILE"));

  DEFINE_string(entry, options::TWO_DASHES, 'e', NULL,
		N_("Set program start address"), N_("ADDRESS"));

  DEFINE_special(exclude_libs, options::TWO_DASHES, '\0',
		 N_("Exclude libraries from automatic export"),
		 N_(("lib,lib ...")));

  DEFINE_bool(export_dynamic, options::TWO_DASHES, 'E', false,
	      N_("Export all dynamic symbols"),
	      N_("Do not export all dynamic symbols (default)"));

  DEFINE_set(export_dynamic_symbol, options::TWO_DASHES, '\0',
	     N_("Export SYMBOL to dynamic symbol table"), N_("SYMBOL"));

  DEFINE_special(EB, options::ONE_DASH, '\0',
		 N_("Link big-endian objects."), NULL);

  DEFINE_special(EL, options::ONE_DASH, '\0',
		 N_("Link little-endian objects."), NULL);

  DEFINE_bool(eh_frame_hdr, options::TWO_DASHES, '\0', false,
	      N_("Create exception frame header"), NULL);

  DEFINE_bool(enum_size_warning, options::TWO_DASHES, '\0', true, NULL,
	      N_("(ARM only) Do not warn about objects with incompatible "
		 "enum sizes"));

  DEFINE_set(auxiliary, options::TWO_DASHES, 'f',
	     N_("Auxiliary filter for shared object symbol table"),
	     N_("SHLIB"));

  DEFINE_string(filter, options::TWO_DASHES, 'F', NULL,
		N_("Filter for shared object symbol table"),
		N_("SHLIB"));

  DEFINE_bool(fatal_warnings, options::TWO_DASHES, '\0', false,
	      N_("Treat warnings as errors"),
	      N_("Do not treat warnings as errors"));

  DEFINE_string(fini, options::ONE_DASH, '\0', "_fini",
		N_("Call SYMBOL at unload-time"), N_("SYMBOL"));

  DEFINE_bool(fix_cortex_a8, options::TWO_DASHES, '\0', false,
	      N_("(ARM only) Fix binaries for Cortex-A8 erratum."),
	      N_("(ARM only) Do not fix binaries for Cortex-A8 erratum."));

  DEFINE_bool(fix_arm1176, options::TWO_DASHES, '\0', true,
	      N_("(ARM only) Fix binaries for ARM1176 erratum."),
	      N_("(ARM only) Do not fix binaries for ARM1176 erratum."));

  DEFINE_bool(merge_exidx_entries, options::TWO_DASHES, '\0', true,
	      N_("(ARM only) Merge exidx entries in debuginfo."),
	      N_("(ARM only) Do not merge exidx entries in debuginfo."));

  DEFINE_special(fix_v4bx, options::TWO_DASHES, '\0',
		 N_("(ARM only) Rewrite BX rn as MOV pc, rn for ARMv4"),
		 NULL);

  DEFINE_special(fix_v4bx_interworking, options::TWO_DASHES, '\0',
		 N_("(ARM only) Rewrite BX rn branch to ARMv4 interworking "
		    "veneer"),
		 NULL);

  DEFINE_bool(g, options::EXACTLY_ONE_DASH, '\0', false,
	      N_("Ignored"), NULL);

  DEFINE_bool(gdb_index, options::TWO_DASHES, '\0', false,
	      N_("Generate .gdb_index section"),
	      N_("Do not generate .gdb_index section"));

  DEFINE_bool(gnu_unique, options::TWO_DASHES, '\0', true,
	      N_("Enable STB_GNU_UNIQUE symbol binding (default)"),
	      N_("Disable STB_GNU_UNIQUE symbol binding"));

  DEFINE_string(soname, options::ONE_DASH, 'h', NULL,
		N_("Set shared library name"), N_("FILENAME"));

  DEFINE_double(hash_bucket_empty_fraction, options::TWO_DASHES, '\0', 0.0,
		N_("Min fraction of empty buckets in dynamic hash"),
		N_("FRACTION"));

  DEFINE_enum(hash_style, options::TWO_DASHES, '\0', "sysv",
	      N_("Dynamic hash style"), N_("[sysv,gnu,both]"),
	      {"sysv", "gnu", "both"});

  DEFINE_string(dynamic_linker, options::TWO_DASHES, 'I', NULL,
		N_("Set dynamic linker path"), N_("PROGRAM"));

  DEFINE_special(incremental, options::TWO_DASHES, '\0',
		 N_("Do an incremental link if possible; "
		    "otherwise, do a full link and prepare output "
		    "for incremental linking"), NULL);

  DEFINE_special(no_incremental, options::TWO_DASHES, '\0',
		 N_("Do a full link (default)"), NULL);

  DEFINE_special(incremental_full, options::TWO_DASHES, '\0',
		 N_("Do a full link and "
		    "prepare output for incremental linking"), NULL);

  DEFINE_special(incremental_update, options::TWO_DASHES, '\0',
		 N_("Do an incremental link; exit if not possible"), NULL);

  DEFINE_string(incremental_base, options::TWO_DASHES, '\0', NULL,
		N_("Set base file for incremental linking"
		   " (default is output file)"),
		N_("FILE"));

  DEFINE_special(incremental_changed, options::TWO_DASHES, '\0',
		 N_("Assume files changed"), NULL);

  DEFINE_special(incremental_unchanged, options::TWO_DASHES, '\0',
		 N_("Assume files didn't change"), NULL);

  DEFINE_special(incremental_unknown, options::TWO_DASHES, '\0',
		 N_("Use timestamps to check files (default)"), NULL);

  DEFINE_special(incremental_startup_unchanged, options::TWO_DASHES, '\0',
		 N_("Assume startup files unchanged "
		    "(files preceding this option)"), NULL);

  DEFINE_percent(incremental_patch, options::TWO_DASHES, '\0', 10,
		 N_("Amount of extra space to allocate for patches"),
		 N_("PERCENT"));

  DEFINE_string(init, options::ONE_DASH, '\0', "_init",
		N_("Call SYMBOL at load-time"), N_("SYMBOL"));

  DEFINE_special(just_symbols, options::TWO_DASHES, '\0',
		 N_("Read only symbol values from FILE"), N_("FILE"));

  DEFINE_bool(map_whole_files, options::TWO_DASHES, '\0',
	      sizeof(void*) >= 8,
	      N_("Map whole files to memory (default on 64-bit hosts)"),
	      N_("Map relevant file parts to memory (default on 32-bit "
		 "hosts)"));
  DEFINE_bool(keep_files_mapped, options::TWO_DASHES, '\0', true,
	      N_("Keep files mapped across passes (default)"),
	      N_("Release mapped files after each pass"));

  DEFINE_bool(ld_generated_unwind_info, options::TWO_DASHES, '\0', true,
	      N_("Generate unwind information for PLT (default)"),
	      N_("Do not generate unwind information for PLT"));

  DEFINE_special(library, options::TWO_DASHES, 'l',
		 N_("Search for library LIBNAME"), N_("LIBNAME"));

  DEFINE_dirlist(library_path, options::TWO_DASHES, 'L',
		 N_("Add directory to search path"), N_("DIR"));

  DEFINE_bool(text_reorder, options::TWO_DASHES, '\0', true,
	      N_("Enable text section reordering for GCC section names "
		 "(default)"),
	      N_("Disable text section reordering for GCC section names"));

  DEFINE_bool(nostdlib, options::ONE_DASH, '\0', false,
	      N_("Only search directories specified on the command line."),
	      NULL);

  DEFINE_bool(rosegment, options::TWO_DASHES, '\0', false,
	      N_("Put read-only non-executable sections in their own segment"),
	      NULL);

  DEFINE_uint64(rosegment_gap, options::TWO_DASHES, '\0', -1U,
		N_("Set offset between executable and read-only segments"),
		N_("OFFSET"));

  DEFINE_string(m, options::EXACTLY_ONE_DASH, 'm', "",
		N_("Set GNU linker emulation; obsolete"), N_("EMULATION"));

  DEFINE_bool(mmap_output_file, options::TWO_DASHES, '\0', true,
	      N_("Map the output file for writing (default)."),
	      N_("Do not map the output file for writing."));

  DEFINE_bool(print_map, options::TWO_DASHES, 'M', false,
	      N_("Write map file on standard output"), NULL);
  DEFINE_string(Map, options::ONE_DASH, '\0', NULL, N_("Write map file"),
		N_("MAPFILENAME"));

  DEFINE_bool(nmagic, options::TWO_DASHES, 'n', false,
	      N_("Do not page align data"), NULL);
  DEFINE_bool(omagic, options::EXACTLY_TWO_DASHES, 'N', false,
	      N_("Do not page align data, do not make text readonly"),
	      N_("Page align data, make text readonly"));

  DEFINE_enable(new_dtags, options::EXACTLY_TWO_DASHES, '\0', true,
		N_("Enable use of DT_RUNPATH and DT_FLAGS"),
		N_("Disable use of DT_RUNPATH and DT_FLAGS"));

  DEFINE_bool(noinhibit_exec, options::TWO_DASHES, '\0', false,
	      N_("Create an output file even if errors occur"), NULL);

  DEFINE_bool_alias(no_undefined, defs, options::TWO_DASHES, '\0',
		    N_("Report undefined symbols (even with --shared)"),
		    NULL, false);

  DEFINE_string(output, options::TWO_DASHES, 'o', "a.out",
		N_("Set output file name"), N_("FILE"));

  DEFINE_uint(optimize, options::EXACTLY_ONE_DASH, 'O', 0,
	      N_("Optimize output file size"), N_("LEVEL"));

  DEFINE_string(oformat, options::EXACTLY_TWO_DASHES, '\0', "elf",
		N_("Set output format"), N_("[binary]"));

  DEFINE_bool(p, options::ONE_DASH, '\0', false,
	      N_("(ARM only) Ignore for backward compatibility"), NULL);

  DEFINE_bool(pie, options::ONE_DASH, '\0', false,
	      N_("Create a position independent executable"), NULL);
  DEFINE_bool_alias(pic_executable, pie, options::TWO_DASHES, '\0',
		    N_("Create a position independent executable"), NULL,
		    false);

  DEFINE_bool(pipeline_knowledge, options::ONE_DASH, '\0', false,
	      NULL, N_("(ARM only) Ignore for backward compatibility"));

  DEFINE_var(plt_align, options::TWO_DASHES, '\0', 0, "5",
	     N_("(PowerPC64 only) Align PLT call stubs to fit cache lines"),
	     N_("[=P2ALIGN]"), true, int, int, options::parse_uint);

  DEFINE_bool(plt_static_chain, options::TWO_DASHES, '\0', false,
	      N_("(PowerPC64 only) PLT call stubs should load r11"),
	      N_("(PowerPC64 only) PLT call stubs should not load r11"));

  DEFINE_bool(plt_thread_safe, options::TWO_DASHES, '\0', false,
	      N_("(PowerPC64 only) PLT call stubs with load-load barrier"),
	      N_("(PowerPC64 only) PLT call stubs without barrier"));

#ifdef ENABLE_PLUGINS
  DEFINE_special(plugin, options::TWO_DASHES, '\0',
		 N_("Load a plugin library"), N_("PLUGIN"));
  DEFINE_special(plugin_opt, options::TWO_DASHES, '\0',
		 N_("Pass an option to the plugin"), N_("OPTION"));
#endif

  DEFINE_bool(posix_fallocate, options::TWO_DASHES, '\0', true,
	      N_("Use posix_fallocate to reserve space in the output file"
		 " (default)."),
	      N_("Use fallocate or ftruncate to reserve space."));

  DEFINE_bool(preread_archive_symbols, options::TWO_DASHES, '\0', false,
	      N_("Preread archive symbols when multi-threaded"), NULL);

  DEFINE_bool(print_output_format, options::TWO_DASHES, '\0', false,
	      N_("Print default output format"), NULL);

  DEFINE_string(print_symbol_counts, options::TWO_DASHES, '\0', NULL,
		N_("Print symbols defined and used for each input"),
		N_("FILENAME"));

  DEFINE_bool(Qy, options::EXACTLY_ONE_DASH, '\0', false,
	      N_("Ignored for SVR4 compatibility"), NULL);

  DEFINE_bool(emit_relocs, options::TWO_DASHES, 'q', false,
	      N_("Generate relocations in output"), NULL);

  DEFINE_bool(relocatable, options::EXACTLY_ONE_DASH, 'r', false,
	      N_("Generate relocatable output"), NULL);
  DEFINE_bool_alias(i, relocatable, options::EXACTLY_ONE_DASH, '\0',
		    N_("Synonym for -r"), NULL, false);

  DEFINE_bool(relax, options::TWO_DASHES, '\0', false,
	      N_("Relax branches on certain targets"), NULL);

  DEFINE_string(retain_symbols_file, options::TWO_DASHES, '\0', NULL,
		N_("keep only symbols listed in this file"), N_("FILE"));

  // -R really means -rpath, but can mean --just-symbols for
  // compatibility with GNU ld.  -rpath is always -rpath, so we list
  // it separately.
  DEFINE_special(R, options::EXACTLY_ONE_DASH, 'R',
		 N_("Add DIR to runtime search path"), N_("DIR"));

  DEFINE_dirlist(rpath, options::ONE_DASH, '\0',
		 N_("Add DIR to runtime search path"), N_("DIR"));

  DEFINE_dirlist(rpath_link, options::TWO_DASHES, '\0',
		 N_("Add DIR to link time shared library search path"),
		 N_("DIR"));

  DEFINE_string(section_ordering_file, options::TWO_DASHES, '\0', NULL,
		N_("Layout sections in the order specified."),
		N_("FILENAME"));

  DEFINE_special(section_start, options::TWO_DASHES, '\0',
		 N_("Set address of section"), N_("SECTION=ADDRESS"));

  DEFINE_optional_string(sort_common, options::TWO_DASHES, '\0', NULL,
			 N_("Sort common symbols by alignment"),
			 N_("[={ascending,descending}]"));

  DEFINE_enum(sort_section, options::TWO_DASHES, '\0', "none",
	      N_("Sort sections by name.  \'--no-text-reorder\'"
		 " will override \'--sort-section=name\' for .text"),
	      N_("[none,name]"),
	      {"none", "name"});

  DEFINE_uint(spare_dynamic_tags, options::TWO_DASHES, '\0', 5,
	      N_("Dynamic tag slots to reserve (default 5)"),
	      N_("COUNT"));

  DEFINE_bool(strip_all, options::TWO_DASHES, 's', false,
	      N_("Strip all symbols"), NULL);
  DEFINE_bool(strip_debug, options::TWO_DASHES, 'S', false,
	      N_("Strip debugging information"), NULL);
  DEFINE_bool(strip_debug_non_line, options::TWO_DASHES, '\0', false,
	      N_("Emit only debug line number information"), NULL);
  DEFINE_bool(strip_debug_gdb, options::TWO_DASHES, '\0', false,
	      N_("Strip debug symbols that are unused by gdb "
		 "(at least versions <= 7.4)"), NULL);
  DEFINE_bool(strip_lto_sections, options::TWO_DASHES, '\0', true,
	      N_("Strip LTO intermediate code sections"), NULL);

  DEFINE_int(stub_group_size, options::TWO_DASHES , '\0', 1,
	     N_("(ARM, PowerPC only) The maximum distance from instructions "
		"in a group of sections to their stubs.  Negative values mean "
		"stubs are always after (PowerPC before) the group.  1 means "
		"use default size.\n"),
	     N_("SIZE"));

  DEFINE_bool(no_keep_memory, options::TWO_DASHES, '\0', false,
	      N_("Use less memory and more disk I/O "
		 "(included only for compatibility with GNU ld)"), NULL);

  DEFINE_bool(shared, options::ONE_DASH, 'G', false,
	      N_("Generate shared library"), NULL);

  DEFINE_bool(Bshareable, options::ONE_DASH, '\0', false,
	      N_("Generate shared library"), NULL);

  DEFINE_uint(split_stack_adjust_size, options::TWO_DASHES, '\0', 0x4000,
	      N_("Stack size when -fsplit-stack function calls non-split"),
	      N_("SIZE"));

  // This is not actually special in any way, but I need to give it
  // a non-standard accessor-function name because 'static' is a keyword.
  DEFINE_special(static, options::ONE_DASH, '\0',
		 N_("Do not link against shared libraries"), NULL);

  DEFINE_enum(icf, options::TWO_DASHES, '\0', "none",
	      N_("Identical Code Folding. "
		 "\'--icf=safe\' Folds ctors, dtors and functions whose"
		 " pointers are definitely not taken."),
	      ("[none,all,safe]"),
	      {"none", "all", "safe"});

  DEFINE_uint(icf_iterations, options::TWO_DASHES , '\0', 0,
	      N_("Number of iterations of ICF (default 2)"), N_("COUNT"));

  DEFINE_bool(print_icf_sections, options::TWO_DASHES, '\0', false,
	      N_("List folded identical sections on stderr"),
	      N_("Do not list folded identical sections"));

  DEFINE_set(keep_unique, options::TWO_DASHES, '\0',
	     N_("Do not fold this symbol during ICF"), N_("SYMBOL"));

  DEFINE_bool(gc_sections, options::TWO_DASHES, '\0', false,
	      N_("Remove unused sections"),
	      N_("Don't remove unused sections (default)"));

  DEFINE_bool(print_gc_sections, options::TWO_DASHES, '\0', false,
	      N_("List removed unused sections on stderr"),
	      N_("Do not list removed unused sections"));

  DEFINE_bool(stats, options::TWO_DASHES, '\0', false,
	      N_("Print resource usage statistics"), NULL);

  DEFINE_string(sysroot, options::TWO_DASHES, '\0', "",
		N_("Set target system root directory"), N_("DIR"));

  DEFINE_bool(trace, options::TWO_DASHES, 't', false,
	      N_("Print the name of each input file"), NULL);

  DEFINE_special(script, options::TWO_DASHES, 'T',
		 N_("Read linker script"), N_("FILE"));

  DEFINE_bool(threads, options::TWO_DASHES, '\0', false,
	      N_("Run the linker multi-threaded"),
	      N_("Do not run the linker multi-threaded"));
  DEFINE_uint(thread_count, options::TWO_DASHES, '\0', 0,
	      N_("Number of threads to use"), N_("COUNT"));
  DEFINE_uint(thread_count_initial, options::TWO_DASHES, '\0', 0,
	      N_("Number of threads to use in initial pass"), N_("COUNT"));
  DEFINE_uint(thread_count_middle, options::TWO_DASHES, '\0', 0,
	      N_("Number of threads to use in middle pass"), N_("COUNT"));
  DEFINE_uint(thread_count_final, options::TWO_DASHES, '\0', 0,
	      N_("Number of threads to use in final pass"), N_("COUNT"));

  DEFINE_uint64(Tbss, options::ONE_DASH, '\0', -1U,
		N_("Set the address of the bss segment"), N_("ADDRESS"));
  DEFINE_uint64(Tdata, options::ONE_DASH, '\0', -1U,
		N_("Set the address of the data segment"), N_("ADDRESS"));
  DEFINE_uint64(Ttext, options::ONE_DASH, '\0', -1U,
		N_("Set the address of the text segment"), N_("ADDRESS"));
  DEFINE_uint64_alias(Ttext_segment, Ttext, options::ONE_DASH, '\0',
		      N_("Set the address of the text segment"),
		      N_("ADDRESS"));
  DEFINE_uint64(Trodata_segment, options::ONE_DASH, '\0', -1U,
		N_("Set the address of the rodata segment"), N_("ADDRESS"));

  DEFINE_bool(toc_optimize, options::TWO_DASHES, '\0', true,
	      N_("(PowerPC64 only) Optimize TOC code sequences"),
	      N_("(PowerPC64 only) Don't optimize TOC code sequences"));

  DEFINE_bool(toc_sort, options::TWO_DASHES, '\0', true,
	      N_("(PowerPC64 only) Sort TOC and GOT sections"),
	      N_("(PowerPC64 only) Don't sort TOC and GOT sections"));

  DEFINE_set(undefined, options::TWO_DASHES, 'u',
	     N_("Create undefined reference to SYMBOL"), N_("SYMBOL"));

  DEFINE_enum(unresolved_symbols, options::TWO_DASHES, '\0', NULL,
	      N_("How to handle unresolved symbols"),
	      ("ignore-all,report-all,ignore-in-object-files,"
	       "ignore-in-shared-libs"),
	      {"ignore-all", "report-all", "ignore-in-object-files",
		  "ignore-in-shared-libs"});

  DEFINE_bool(verbose, options::TWO_DASHES, '\0', false,
	      N_("Synonym for --debug=files"), NULL);

  DEFINE_special(version_script, options::TWO_DASHES, '\0',
		 N_("Read version script"), N_("FILE"));

  DEFINE_bool(warn_common, options::TWO_DASHES, '\0', false,
	      N_("Warn about duplicate common symbols"),
	      N_("Do not warn about duplicate common symbols (default)"));

  DEFINE_bool(warn_constructors, options::TWO_DASHES, '\0', false,
	      N_("Ignored"), N_("Ignored"));

  DEFINE_bool(warn_execstack, options::TWO_DASHES, '\0', false,
	      N_("Warn if the stack is executable"),
	      N_("Do not warn if the stack is executable (default)"));

  DEFINE_bool(warn_mismatch, options::TWO_DASHES, '\0', true,
	      NULL, N_("Don't warn about mismatched input files"));

  DEFINE_bool(warn_multiple_gp, options::TWO_DASHES, '\0', false,
	      N_("Ignored"), NULL);

  DEFINE_bool(warn_search_mismatch, options::TWO_DASHES, '\0', true,
	      N_("Warn when skipping an incompatible library"),
	      N_("Don't warn when skipping an incompatible library"));

  DEFINE_bool(warn_shared_textrel, options::TWO_DASHES, '\0', false,
	      N_("Warn if text segment is not shareable"),
	      N_("Do not warn if text segment is not shareable (default)"));

  DEFINE_bool(warn_unresolved_symbols, options::TWO_DASHES, '\0', false,
	      N_("Report unresolved symbols as warnings"),
	      NULL);
  DEFINE_bool_alias(error_unresolved_symbols, warn_unresolved_symbols,
		    options::TWO_DASHES, '\0',
		    N_("Report unresolved symbols as errors"),
		    NULL, true);

  DEFINE_bool(wchar_size_warning, options::TWO_DASHES, '\0', true, NULL,
	      N_("(ARM only) Do not warn about objects with incompatible "
		 "wchar_t sizes"));

  DEFINE_bool(whole_archive, options::TWO_DASHES, '\0', false,
	      N_("Include all archive contents"),
	      N_("Include only needed archive contents"));

  DEFINE_set(wrap, options::TWO_DASHES, '\0',
	     N_("Use wrapper functions for SYMBOL"), N_("SYMBOL"));

  DEFINE_set(trace_symbol, options::TWO_DASHES, 'y',
	     N_("Trace references to symbol"), N_("SYMBOL"));

  DEFINE_bool(undefined_version, options::TWO_DASHES, '\0', true,
	      N_("Allow unused version in script (default)"),
	      N_("Do not allow unused version in script"));

  DEFINE_string(Y, options::EXACTLY_ONE_DASH, 'Y', "",
		N_("Default search path for Solaris compatibility"),
		N_("PATH"));

  DEFINE_special(start_group, options::TWO_DASHES, '(',
		 N_("Start a library search group"), NULL);
  DEFINE_special(end_group, options::TWO_DASHES, ')',
		 N_("End a library search group"), NULL);


  DEFINE_special(start_lib, options::TWO_DASHES, '\0',
		 N_("Start a library"), NULL);
  DEFINE_special(end_lib, options::TWO_DASHES, '\0',
		 N_("End a library "), NULL);

  DEFINE_string(fuse_ld, options::ONE_DASH, '\0', "",
		N_("Ignored for GCC linker option compatibility"),
		"");

  // The -z options.

  DEFINE_bool(combreloc, options::DASH_Z, '\0', true,
	      N_("Sort dynamic relocs"),
	      N_("Do not sort dynamic relocs"));
  DEFINE_uint64(common_page_size, options::DASH_Z, '\0', 0,
		N_("Set common page size to SIZE"), N_("SIZE"));
  DEFINE_bool(defs, options::DASH_Z, '\0', false,
	      N_("Report undefined symbols (even with --shared)"),
	      NULL);
  DEFINE_bool(execstack, options::DASH_Z, '\0', false,
	      N_("Mark output as requiring executable stack"), NULL);
  DEFINE_bool(initfirst, options::DASH_Z, '\0', false,
	      N_("Mark DSO to be initialized first at runtime"),
	      NULL);
  DEFINE_bool(interpose, options::DASH_Z, '\0', false,
	      N_("Mark object to interpose all DSOs but executable"),
	      NULL);
  DEFINE_bool_alias(lazy, now, options::DASH_Z, '\0',
		    N_("Mark object for lazy runtime binding (default)"),
		    NULL, true);
  DEFINE_bool(loadfltr, options::DASH_Z, '\0', false,
	      N_("Mark object requiring immediate process"),
	      NULL);
  DEFINE_uint64(max_page_size, options::DASH_Z, '\0', 0,
		N_("Set maximum page size to SIZE"), N_("SIZE"));
  DEFINE_bool(muldefs, options::DASH_Z, '\0', false,
	      N_("Allow multiple definitions of symbols"),
	      NULL);
  // copyreloc is here in the list because there is only -z
  // nocopyreloc, not -z copyreloc.
  DEFINE_bool(copyreloc, options::DASH_Z, '\0', true,
	      NULL,
	      N_("Do not create copy relocs"));
  DEFINE_bool(nodefaultlib, options::DASH_Z, '\0', false,
	      N_("Mark object not to use default search paths"),
	      NULL);
  DEFINE_bool(nodelete, options::DASH_Z, '\0', false,
	      N_("Mark DSO non-deletable at runtime"),
	      NULL);
  DEFINE_bool(nodlopen, options::DASH_Z, '\0', false,
	      N_("Mark DSO not available to dlopen"),
	      NULL);
  DEFINE_bool(nodump, options::DASH_Z, '\0', false,
	      N_("Mark DSO not available to dldump"),
	      NULL);
  DEFINE_bool(noexecstack, options::DASH_Z, '\0', false,
	      N_("Mark output as not requiring executable stack"), NULL);
  DEFINE_bool(now, options::DASH_Z, '\0', false,
	      N_("Mark object for immediate function binding"),
	      NULL);
  DEFINE_bool(origin, options::DASH_Z, '\0', false,
	      N_("Mark DSO to indicate that needs immediate $ORIGIN "
		 "processing at runtime"), NULL);
  DEFINE_bool(relro, options::DASH_Z, '\0', false,
	      N_("Where possible mark variables read-only after relocation"),
	      N_("Don't mark variables read-only after relocation"));
  DEFINE_bool(text, options::DASH_Z, '\0', false,
	      N_("Do not permit relocations in read-only segments"),
	      N_("Permit relocations in read-only segments (default)"));
  DEFINE_bool_alias(textoff, text, options::DASH_Z, '\0',
		    N_("Permit relocations in read-only segments (default)"),
		    NULL, true);

 public:
  typedef options::Dir_list Dir_list;

  General_options();

  // Does post-processing on flags, making sure they all have
  // non-conflicting values.  Also converts some flags from their
  // "standard" types (string, etc), to another type (enum, DirList),
  // which can be accessed via a separate method.  Dies if it notices
  // any problems.
  void finalize();

  // True if we printed the version information.
  bool
  printed_version() const
  { return this->printed_version_; }

  // The macro defines output() (based on --output), but that's a
  // generic name.  Provide this alternative name, which is clearer.
  const char*
  output_file_name() const
  { return this->output(); }

  // This is not defined via a flag, but combines flags to say whether
  // the output is position-independent or not.
  bool
  output_is_position_independent() const
  { return this->shared() || this->pie(); }

  // Return true if the output is something that can be exec()ed, such
  // as a static executable, or a position-dependent or
  // position-independent executable, but not a dynamic library or an
  // object file.
  bool
  output_is_executable() const
  { return !this->shared() && !this->relocatable(); }

  // This would normally be static(), and defined automatically, but
  // since static is a keyword, we need to come up with our own name.
  bool
  is_static() const
  { return static_; }

  // In addition to getting the input and output formats as a string
  // (via format() and oformat()), we also give access as an enum.
  enum Object_format
  {
    // Ordinary ELF.
    OBJECT_FORMAT_ELF,
    // Straight binary format.
    OBJECT_FORMAT_BINARY
  };

  // Convert a string to an Object_format.  Gives an error if the
  // string is not recognized.
  static Object_format
  string_to_object_format(const char* arg);

  // Note: these functions are not very fast.
  Object_format format_enum() const;
  Object_format oformat_enum() const;

  // Return whether FILENAME is in a system directory.
  bool
  is_in_system_directory(const std::string& name) const;

  // RETURN whether SYMBOL_NAME should be kept, according to symbols_to_retain_.
  bool
  should_retain_symbol(const char* symbol_name) const
    {
      if (symbols_to_retain_.empty())    // means flag wasn't specified
	return true;
      return symbols_to_retain_.find(symbol_name) != symbols_to_retain_.end();
    }

  // These are the best way to get access to the execstack state,
  // not execstack() and noexecstack() which are hard to use properly.
  bool
  is_execstack_set() const
  { return this->execstack_status_ != EXECSTACK_FROM_INPUT; }

  bool
  is_stack_executable() const
  { return this->execstack_status_ == EXECSTACK_YES; }

  bool
  icf_enabled() const
  { return this->icf_status_ != ICF_NONE; }

  bool
  icf_safe_folding() const
  { return this->icf_status_ == ICF_SAFE; }

  // The --demangle option takes an optional string, and there is also
  // a --no-demangle option.  This is the best way to decide whether
  // to demangle or not.
  bool
  do_demangle() const
  { return this->do_demangle_; }

  // Returns TRUE if any plugin libraries have been loaded.
  bool
  has_plugins() const
  { return this->plugins_ != NULL; }

  // Return a pointer to the plugin manager.
  Plugin_manager*
  plugins() const
  { return this->plugins_; }

  // True iff SYMBOL was found in the file specified by dynamic-list.
  bool
  in_dynamic_list(const char* symbol) const
  { return this->dynamic_list_.version_script_info()->symbol_is_local(symbol); }

  // Finalize the dynamic list.
  void
  finalize_dynamic_list()
  { this->dynamic_list_.version_script_info()->finalize(); }

  // The mode selected by the --incremental options.
  enum Incremental_mode
  {
    // No incremental linking (--no-incremental).
    INCREMENTAL_OFF,
    // Incremental update only (--incremental-update).
    INCREMENTAL_UPDATE,
    // Force a full link, but prepare for subsequent incremental link
    // (--incremental-full).
    INCREMENTAL_FULL,
    // Incremental update if possible, fallback to full link  (--incremental).
    INCREMENTAL_AUTO
  };

  // The incremental linking mode.
  Incremental_mode
  incremental_mode() const
  { return this->incremental_mode_; }

  // The disposition given by the --incremental-changed,
  // --incremental-unchanged or --incremental-unknown option.  The
  // value may change as we proceed parsing the command line flags.
  Incremental_disposition
  incremental_disposition() const
  { return this->incremental_disposition_; }

  // The disposition to use for startup files (those that precede the
  // first --incremental-changed, etc. option).
  Incremental_disposition
  incremental_startup_disposition() const
  { return this->incremental_startup_disposition_; }

  // Return true if S is the name of a library excluded from automatic
  // symbol export.
  bool
  check_excluded_libs(const std::string &s) const;

  // If an explicit start address was given for section SECNAME with
  // the --section-start option, return true and set *PADDR to the
  // address.  Otherwise return false.
  bool
  section_start(const char* secname, uint64_t* paddr) const;

  // Return whether any --section-start option was used.
  bool
  any_section_start() const
  { return !this->section_starts_.empty(); }

  enum Fix_v4bx
  {
    // Leave original instruction.
    FIX_V4BX_NONE,
    // Replace instruction.
    FIX_V4BX_REPLACE,
    // Generate an interworking veneer.
    FIX_V4BX_INTERWORKING
  };

  Fix_v4bx
  fix_v4bx() const
  { return (this->fix_v4bx_); }

  enum Endianness
  {
    ENDIANNESS_NOT_SET,
    ENDIANNESS_BIG,
    ENDIANNESS_LITTLE
  };

  Endianness
  endianness() const
  { return this->endianness_; }

 private:
  // Don't copy this structure.
  General_options(const General_options&);
  General_options& operator=(const General_options&);

  // Whether to mark the stack as executable.
  enum Execstack
  {
    // Not set on command line.
    EXECSTACK_FROM_INPUT,
    // Mark the stack as executable (-z execstack).
    EXECSTACK_YES,
    // Mark the stack as not executable (-z noexecstack).
    EXECSTACK_NO
  };

  enum Icf_status
  {
    // Do not fold any functions (Default or --icf=none).
    ICF_NONE,
    // All functions are candidates for folding. (--icf=all).
    ICF_ALL,
    // Only ctors and dtors are candidates for folding. (--icf=safe).
    ICF_SAFE
  };

  void
  set_icf_status(Icf_status value)
  { this->icf_status_ = value; }

  void
  set_execstack_status(Execstack value)
  { this->execstack_status_ = value; }

  void
  set_do_demangle(bool value)
  { this->do_demangle_ = value; }

  void
  set_static(bool value)
  { static_ = value; }

  // These are called by finalize() to set up the search-path correctly.
  void
  add_to_library_path_with_sysroot(const std::string& arg)
  { this->add_search_directory_to_library_path(Search_directory(arg, true)); }

  // Apply any sysroot to the directory lists.
  void
  add_sysroot();

  // Add a plugin and its arguments to the list of plugins.
  void
  add_plugin(const char* filename);

  // Add a plugin option.
  void
  add_plugin_option(const char* opt);

  // Whether we printed version information.
  bool printed_version_;
  // Whether to mark the stack as executable.
  Execstack execstack_status_;
  // Whether to do code folding.
  Icf_status icf_status_;
  // Whether to do a static link.
  bool static_;
  // Whether to do demangling.
  bool do_demangle_;
  // List of plugin libraries.
  Plugin_manager* plugins_;
  // The parsed output of --dynamic-list files.  For convenience in
  // script.cc, we store this as a Script_options object, even though
  // we only use a single Version_tree from it.
  Script_options dynamic_list_;
  // The incremental linking mode.
  Incremental_mode incremental_mode_;
  // The disposition given by the --incremental-changed,
  // --incremental-unchanged or --incremental-unknown option.  The
  // value may change as we proceed parsing the command line flags.
  Incremental_disposition incremental_disposition_;
  // The disposition to use for startup files (those marked
  // INCREMENTAL_STARTUP).
  Incremental_disposition incremental_startup_disposition_;
  // Whether we have seen one of the options that require incremental
  // build (--incremental-changed, --incremental-unchanged,
  // --incremental-unknown, or --incremental-startup-unchanged).
  bool implicit_incremental_;
  // Libraries excluded from automatic export, via --exclude-libs.
  Unordered_set<std::string> excluded_libs_;
  // List of symbol-names to keep, via -retain-symbol-info.
  Unordered_set<std::string> symbols_to_retain_;
  // Map from section name to address from --section-start.
  std::map<std::string, uint64_t> section_starts_;
  // Whether to process armv4 bx instruction relocation.
  Fix_v4bx fix_v4bx_;
  // Endianness.
  Endianness endianness_;
};

// The position-dependent options.  We use this to store the state of
// the commandline at a particular point in parsing for later
// reference.  For instance, if we see "ld --whole-archive foo.a
// --no-whole-archive," we want to store the whole-archive option with
// foo.a, so when the time comes to parse foo.a we know we should do
// it in whole-archive mode.  We could store all of General_options,
// but that's big, so we just pick the subset of flags that actually
// change in a position-dependent way.

#define DEFINE_posdep(varname__, type__)        \
 public:                                        \
  type__                                        \
  varname__() const                             \
  { return this->varname__##_; }                \
						\
  void                                          \
  set_##varname__(type__ value)                 \
  { this->varname__##_ = value; }               \
 private:                                       \
  type__ varname__##_

class Position_dependent_options
{
 public:
  Position_dependent_options(const General_options& options
			     = Position_dependent_options::default_options_)
  { copy_from_options(options); }

  void copy_from_options(const General_options& options)
  {
    this->set_as_needed(options.as_needed());
    this->set_Bdynamic(options.Bdynamic());
    this->set_format_enum(options.format_enum());
    this->set_whole_archive(options.whole_archive());
    this->set_incremental_disposition(options.incremental_disposition());
  }

  DEFINE_posdep(as_needed, bool);
  DEFINE_posdep(Bdynamic, bool);
  DEFINE_posdep(format_enum, General_options::Object_format);
  DEFINE_posdep(whole_archive, bool);
  DEFINE_posdep(incremental_disposition, Incremental_disposition);

 private:
  // This is a General_options with everything set to its default
  // value.  A Position_dependent_options created with no argument
  // will take its values from here.
  static General_options default_options_;
};


// A single file or library argument from the command line.

class Input_file_argument
{
 public:
  enum Input_file_type
  {
    // A regular file, name used as-is, not searched.
    INPUT_FILE_TYPE_FILE,
    // A library name.  When used, "lib" will be prepended and ".so" or
    // ".a" appended to make a filename, and that filename will be searched
    // for using the -L paths.
    INPUT_FILE_TYPE_LIBRARY,
    // A regular file, name used as-is, but searched using the -L paths.
    INPUT_FILE_TYPE_SEARCHED_FILE
  };

  // name: file name or library name
  // type: the type of this input file.
  // extra_search_path: an extra directory to look for the file, prior
  //         to checking the normal library search path.  If this is "",
  //         then no extra directory is added.
  // just_symbols: whether this file only defines symbols.
  // options: The position dependent options at this point in the
  //         command line, such as --whole-archive.
  Input_file_argument()
    : name_(), type_(INPUT_FILE_TYPE_FILE), extra_search_path_(""),
      just_symbols_(false), options_(), arg_serial_(0)
  { }

  Input_file_argument(const char* name, Input_file_type type,
		      const char* extra_search_path,
		      bool just_symbols,
		      const Position_dependent_options& options)
    : name_(name), type_(type), extra_search_path_(extra_search_path),
      just_symbols_(just_symbols), options_(options), arg_serial_(0)
  { }

  // You can also pass in a General_options instance instead of a
  // Position_dependent_options.  In that case, we extract the
  // position-independent vars from the General_options and only store
  // those.
  Input_file_argument(const char* name, Input_file_type type,
		      const char* extra_search_path,
		      bool just_symbols,
		      const General_options& options)
    : name_(name), type_(type), extra_search_path_(extra_search_path),
      just_symbols_(just_symbols), options_(options), arg_serial_(0)
  { }

  const char*
  name() const
  { return this->name_.c_str(); }

  const Position_dependent_options&
  options() const
  { return this->options_; }

  bool
  is_lib() const
  { return type_ == INPUT_FILE_TYPE_LIBRARY; }

  bool
  is_searched_file() const
  { return type_ == INPUT_FILE_TYPE_SEARCHED_FILE; }

  const char*
  extra_search_path() const
  {
    return (this->extra_search_path_.empty()
	    ? NULL
	    : this->extra_search_path_.c_str());
  }

  // Return whether we should only read symbols from this file.
  bool
  just_symbols() const
  { return this->just_symbols_; }

  // Return whether this file may require a search using the -L
  // options.
  bool
  may_need_search() const
  {
    return (this->is_lib()
	    || this->is_searched_file()
	    || !this->extra_search_path_.empty());
  }

  // Set the serial number for this argument.
  void
  set_arg_serial(unsigned int arg_serial)
  { this->arg_serial_ = arg_serial; }

  // Get the serial number.
  unsigned int
  arg_serial() const
  { return this->arg_serial_; }

 private:
  // We use std::string, not const char*, here for convenience when
  // using script files, so that we do not have to preserve the string
  // in that case.
  std::string name_;
  Input_file_type type_;
  std::string extra_search_path_;
  bool just_symbols_;
  Position_dependent_options options_;
  // A unique index for this file argument in the argument list.
  unsigned int arg_serial_;
};

// A file or library, or a group, from the command line.

class Input_argument
{
 public:
  // Create a file or library argument.
  explicit Input_argument(Input_file_argument file)
    : is_file_(true), file_(file), group_(NULL), lib_(NULL), script_info_(NULL)
  { }

  // Create a group argument.
  explicit Input_argument(Input_file_group* group)
    : is_file_(false), group_(group), lib_(NULL), script_info_(NULL)
  { }

  // Create a lib argument.
  explicit Input_argument(Input_file_lib* lib)
    : is_file_(false), group_(NULL), lib_(lib), script_info_(NULL)
  { }

  // Return whether this is a file.
  bool
  is_file() const
  { return this->is_file_; }

  // Return whether this is a group.
  bool
  is_group() const
  { return !this->is_file_ && this->lib_ == NULL; }

  // Return whether this is a lib.
  bool
  is_lib() const
  { return this->lib_ != NULL; }

  // Return the information about the file.
  const Input_file_argument&
  file() const
  {
    gold_assert(this->is_file_);
    return this->file_;
  }

  // Return the information about the group.
  const Input_file_group*
  group() const
  {
    gold_assert(!this->is_file_);
    return this->group_;
  }

  Input_file_group*
  group()
  {
    gold_assert(!this->is_file_);
    return this->group_;
  }

  // Return the information about the lib.
  const Input_file_lib*
  lib() const
  {
    gold_assert(!this->is_file_);
    gold_assert(this->lib_);
    return this->lib_;
  }

  Input_file_lib*
  lib()
  {
    gold_assert(!this->is_file_);
    gold_assert(this->lib_);
    return this->lib_;
  }

  // If a script generated this argument, store a pointer to the script info.
  // Currently used only for recording incremental link information.
  void
  set_script_info(Script_info* info)
  { this->script_info_ = info; }

  Script_info*
  script_info() const
  { return this->script_info_; }

 private:
  bool is_file_;
  Input_file_argument file_;
  Input_file_group* group_;
  Input_file_lib* lib_;
  Script_info* script_info_;
};

typedef std::vector<Input_argument> Input_argument_list;

// A group from the command line.  This is a set of arguments within
// --start-group ... --end-group.

class Input_file_group
{
 public:
  typedef Input_argument_list::const_iterator const_iterator;

  Input_file_group()
    : files_()
  { }

  // Add a file to the end of the group.
  Input_argument&
  add_file(const Input_file_argument& arg)
  {
    this->files_.push_back(Input_argument(arg));
    return this->files_.back();
  }

  // Iterators to iterate over the group contents.

  const_iterator
  begin() const
  { return this->files_.begin(); }

  const_iterator
  end() const
  { return this->files_.end(); }

 private:
  Input_argument_list files_;
};

// A lib from the command line.  This is a set of arguments within
// --start-lib ... --end-lib.

class Input_file_lib
{
 public:
  typedef Input_argument_list::const_iterator const_iterator;

  Input_file_lib(const Position_dependent_options& options)
    : files_(), options_(options)
  { }

  // Add a file to the end of the lib.
  Input_argument&
  add_file(const Input_file_argument& arg)
  {
    this->files_.push_back(Input_argument(arg));
    return this->files_.back();
  }

  const Position_dependent_options&
  options() const
  { return this->options_; }

  // Iterators to iterate over the lib contents.

  const_iterator
  begin() const
  { return this->files_.begin(); }

  const_iterator
  end() const
  { return this->files_.end(); }

  size_t
  size() const
  { return this->files_.size(); }

 private:
  Input_argument_list files_;
  Position_dependent_options options_;
};

// A list of files from the command line or a script.

class Input_arguments
{
 public:
  typedef Input_argument_list::const_iterator const_iterator;

  Input_arguments()
    : input_argument_list_(), in_group_(false), in_lib_(false), file_count_(0)
  { }

  // Add a file.
  Input_argument&
  add_file(Input_file_argument& arg);

  // Start a group (the --start-group option).
  void
  start_group();

  // End a group (the --end-group option).
  void
  end_group();

  // Start a lib (the --start-lib option).
  void
  start_lib(const Position_dependent_options&);

  // End a lib (the --end-lib option).
  void
  end_lib();

  // Return whether we are currently in a group.
  bool
  in_group() const
  { return this->in_group_; }

  // Return whether we are currently in a lib.
  bool
  in_lib() const
  { return this->in_lib_; }

  // The number of entries in the list.
  int
  size() const
  { return this->input_argument_list_.size(); }

  // Iterators to iterate over the list of input files.

  const_iterator
  begin() const
  { return this->input_argument_list_.begin(); }

  const_iterator
  end() const
  { return this->input_argument_list_.end(); }

  // Return whether the list is empty.
  bool
  empty() const
  { return this->input_argument_list_.empty(); }

  // Return the number of input files.  This may be larger than
  // input_argument_list_.size(), because of files that are part
  // of groups or libs.
  int
  number_of_input_files() const
  { return this->file_count_; }

 private:
  Input_argument_list input_argument_list_;
  bool in_group_;
  bool in_lib_;
  unsigned int file_count_;
};


// All the information read from the command line.  These are held in
// three separate structs: one to hold the options (--foo), one to
// hold the filenames listed on the commandline, and one to hold
// linker script information.  This third is not a subset of the other
// two because linker scripts can be specified either as options (via
// -T) or as a file.

class Command_line
{
 public:
  typedef Input_arguments::const_iterator const_iterator;

  Command_line();

  // Process the command line options.  This will exit with an
  // appropriate error message if an unrecognized option is seen.
  void
  process(int argc, const char** argv);

  // Process one command-line option.  This takes the index of argv to
  // process, and returns the index for the next option.  no_more_options
  // is set to true if argv[i] is "--".
  int
  process_one_option(int argc, const char** argv, int i,
		     bool* no_more_options);

  // Get the general options.
  const General_options&
  options() const
  { return this->options_; }

  // Get the position dependent options.
  const Position_dependent_options&
  position_dependent_options() const
  { return this->position_options_; }

  // Get the linker-script options.
  Script_options&
  script_options()
  { return this->script_options_; }

  // Finalize the version-script options and return them.
  const Version_script_info&
  version_script();

  // Get the input files.
  Input_arguments&
  inputs()
  { return this->inputs_; }

  // The number of input files.
  int
  number_of_input_files() const
  { return this->inputs_.number_of_input_files(); }

  // Iterators to iterate over the list of input files.

  const_iterator
  begin() const
  { return this->inputs_.begin(); }

  const_iterator
  end() const
  { return this->inputs_.end(); }

 private:
  Command_line(const Command_line&);
  Command_line& operator=(const Command_line&);

  // This is a dummy class to provide a constructor that runs before
  // the constructor for the General_options.  The Pre_options constructor
  // is used as a hook to set the flag enabling the options to register
  // themselves.
  struct Pre_options {
    Pre_options();
  };

  // This must come before options_!
  Pre_options pre_options_;
  General_options options_;
  Position_dependent_options position_options_;
  Script_options script_options_;
  Input_arguments inputs_;
};

} // End namespace gold.

#endif // !defined(GOLD_OPTIONS_H)
@


1.188
log
@2013-05-30  Alexander Ivchenko  <alexander.ivchenko@@intel.com>
	    Sriraman Tallam  <tmsriram@@google.com>

	* options.h (sort_section): New option.
	* output.h (Input_section_sort_section_prefix_special_ordering_compare):
	Rename from Input_section_sort_section_name_special_ordering_compare.
	(Input_section_sort_section_name_compare): New struct.
	* output.cc (Output_section::Input_section_sort_section_name_compare::
	operator()): New function.
	(Output_section::sort_attached_input_sections): Use new sort function
	for .text if --sort-section=name is specified.
	* layout.cc (Layout::make_output_section):
	Add sorting by name when --sort-section=name is specified.
	* testsuite/Makefile.am (text_section_grouping): Test option
	--sort-section=name.
	* testsuite/Makefile.in: Regenerate.
	* testsuite/section_sorting_name.cc: New file.
	* testsuite/section_sorting_name.sh: New file.
@
text
@d1165 2
@


1.187
log
@gold/
	* options.h (General_options): Add --rosegment-gap option.
	* options.cc (finalize): --rosegment-gap implies --rosegment.
	* layout.cc (set_segment_offsets): Let user option override
	target->rosegment_gap().
@
text
@d1059 6
@


1.186
log
@gold/
	* options.h (General_options): Remove leading space from help
	messages for -nostdlib and --rosegment.
@
text
@d930 4
@


1.185
log
@2013-04-26  Geoff Pike  <gpike@@chromium.org>

gold/
	* gold.cc (queue_final_tasks): invoke layout->queue_build_id_tasks().
	* layout.cc (Hash_task): New class.
	(Layout::queue_build_id_tasks): New function.
	(Layout::write_build_id): Handle single-thread portion of build ID
	computation.  (In some cases, all of it is single-threaded.)  Replace
	{sha1,md5}_process_bytes with {sha1,md5}_buffer to get the same
	functionality in fewer lines of code.
	* layout.h (Layout::queue_build_id_tasks): New function declaration.
	* options.h (General_options): make "--build-id" default to tree
	rather than sha1.  Add two new options related to --build-id=tree:
	--build-id-chunk-size-for-treehash and
	--build-id-min-file-size-for-treehash.
	* Makefile.am: add testing of --build-id=tree and related new options
	(these tests will be invoked by "make check").
	* Makefile.in: Regenerate.
@
text
@d3 2
a4 1
// Copyright 2006, 2007, 2008, 2009, 2010, 2011 Free Software Foundation, Inc.
d124 1
a124 1
              const char* choices[], int num_choices);
d172 1
a172 1
             const char* hs, const char* ha, bool oa, Struct_var* r)
d223 1
a223 1
                 Command_line* cmdline, General_options* options) = 0;
d234 1
a234 1
                                                  Command_line*);
d236 2
a237 2
                 Parse_function parse_function,
                 const char* helpstring, const char* helparg)
d243 1
a243 1
                      Command_line* cmdline, General_options* options)
d265 2
a266 2
                   default_value_as_string__, helpstring__, helparg__,       \
                   optional_arg__, type__, param_type__, parse_fn__)	     \
d271 1
a271 1
                                                                             \
d275 1
a275 1
                                                                             \
d285 2
a286 2
               helpstring__, helparg__, optional_arg__, this),		     \
        user_set_via_option(false), value(default_value__)                   \
d288 1
a288 1
                                                                             \
d291 1
a291 1
                   Command_line*, General_options*)                          \
d296 1
a296 1
                                                                             \
d312 1
a312 1
                    helpstring__, no_helpstring__)                       \
d314 2
a315 2
             default_value__ ? "true" : "false", helpstring__, NULL,     \
             false, bool, bool, options::parse_bool)			 \
d322 2
a323 2
                                     default_value__ ? "false" : "true", \
                                     no_helpstring__, NULL, false, this) \
d325 1
a325 1
                                                                         \
d328 1
a328 1
                   Command_line*, General_options* options)              \
d333 1
a333 1
                                                                         \
d339 1
a339 1
                      helpstring__, no_helpstring__)                     \
d341 2
a342 2
             default_value__ ? "true" : "false", helpstring__, NULL,     \
             false, bool, bool, options::parse_bool)			 \
d346 3
a348 3
                                     dashes__, '\0',                     \
                                     default_value__ ? "false" : "true", \
                                     no_helpstring__, NULL, false, this) \
d350 1
a350 1
                                                                         \
d353 1
a353 1
                   Command_line*, General_options* options)              \
d355 1
a355 1
                                                                         \
d361 1
a361 1
                   helpstring__, helparg__)                             \
d363 2
a364 2
             #default_value__, helpstring__, helparg__, false,		\
             int, int, options::parse_int)
d367 1
a367 1
                   helpstring__, helparg__)                             \
d369 2
a370 2
             #default_value__, helpstring__, helparg__, false,		\
             int, int, options::parse_uint)
d373 1
a373 1
                      helpstring__, helparg__)                           \
d375 2
a376 2
             #default_value__, helpstring__, helparg__, false,		 \
             uint64_t, uint64_t, options::parse_uint64)
d391 1
a391 1
                      helpstring__, helparg__)                           \
d393 2
a394 2
             default_value__, helpstring__, helparg__, false,		 \
             const char*, const char*, options::parse_string)
d400 1
a400 1
                           helpstring__, helparg__)                       \
d402 2
a403 2
             "", helpstring__, helparg__, false, options::Dir_list,	  \
             const options::Dir_list&, options::parse_dirlist)            \
d413 1
a413 1
                   helpstring__, helparg__)                               \
d415 2
a416 2
             "", helpstring__, helparg__, false, options::String_set,     \
             const options::String_set&, options::parse_set)              \
d426 2
a427 2
            && (this->varname__##_.value.find(std::string(symbol))        \
                != this->varname__##_.value.end()));                      \
d442 1
a442 1
                    helpstring__, helparg__, ...)                        \
d444 2
a445 2
             default_value__, helpstring__, helparg__, false,		 \
             const char*, const char*, parse_choices_##varname__)        \
d448 2
a449 2
                                        const char* arg,                 \
                                        const char** retval) {           \
d452 1
a452 1
                           choices, sizeof(choices) / sizeof(*choices)); \
d534 1
a534 1
                       helpstring__, helparg__)                         \
d537 1
a537 1
                         Command_line* inputs);                         \
d542 2
a543 2
                                &General_options::parse_##varname__,    \
                                helpstring__, helparg__)                \
d555 2
a556 2
             default_value__, helpstring__, helparg__, true,		\
             const char*, const char*, options::parse_optional_string)
d624 1
a624 1
                 N_("Report usage information"), NULL);
d626 1
a626 1
                 N_("Report version information"), NULL);
d628 1
a628 1
                 N_("Report version and target information"), NULL);
d645 2
a646 2
              N_("Allow unresolved references in shared libraries"),
              N_("Do not allow unresolved references in shared libraries"));
d649 2
a650 2
              N_("Only set DT_NEEDED for shared libraries if used"),
              N_("Always DT_NEEDED for shared libraries"));
d661 1
a661 1
                N_("Set input format"), ("[elf,binary]"));
d664 1
a664 1
              N_("-l searches for shared libraries"), NULL);
d677 1
a677 1
              N_("Bind defined symbols locally"), NULL);
d687 2
a688 2
                options::TWO_DASHES, '\0', 2 << 20,
                N_("Chunk size for '--build-id=tree'"), N_("SIZE"));
d691 3
a693 3
                '\0', 40 << 20,
                N_("Minimum output file size for '--build-id=tree' to work"
                   " differently than '--build-id=sha1'"), N_("SIZE"));
d701 3
a703 3
              N_("Compress .debug_* sections in the output file"),
              ("[none,zlib]"),
              {"none", "zlib"});
d706 3
a708 3
              N_("Compress .debug_* sections in the output file"),
              N_("[none]"),
              {"none"});
d724 2
a725 2
              N_("Define common symbols"),
              N_("Do not define common symbols"));
d727 1
a727 1
              N_("Alias for -d"), NULL);
d729 1
a729 1
              N_("Alias for -d"), NULL);
d732 2
a733 2
                N_("Turn on debugging"),
                N_("[all,files,script,task][,...]"));
d736 1
a736 1
                 N_("Define a symbol"), N_("SYMBOL=EXPRESSION"));
d747 1
a747 1
              N_("Look for violations of the C++ One Definition Rule"),
d753 1
a753 1
              N_("Delete all temporary local symbols"), NULL);
d756 1
a756 1
              N_("Add data symbols to dynamic symbols"), NULL);
d759 1
a759 1
              N_("Add C++ operator new/delete to dynamic symbols"), NULL);
d762 1
a762 1
              N_("Add C++ typeinfo to dynamic symbols"), NULL);
d765 1
a765 1
                 N_("Read a list of dynamic symbols"), N_("FILE"));
d768 1
a768 1
                N_("Set program start address"), N_("ADDRESS"));
d775 1
a775 1
              N_("Export all dynamic symbols"),
d788 1
a788 1
              N_("Create exception frame header"), NULL);
d807 1
a807 1
                N_("Call SYMBOL at unload-time"), N_("SYMBOL"));
d822 2
a823 2
                 N_("(ARM only) Rewrite BX rn as MOV pc, rn for ARMv4"),
                 NULL);
d826 3
a828 3
                 N_("(ARM only) Rewrite BX rn branch to ARMv4 interworking "
                    "veneer"),
                 NULL);
d842 1
a842 1
                N_("Set shared library name"), N_("FILENAME"));
d853 1
a853 1
                N_("Set dynamic linker path"), N_("PROGRAM"));
d871 3
a873 3
                N_("Set base file for incremental linking"
                   " (default is output file)"),
                N_("FILE"));
d876 1
a876 1
                 N_("Assume files changed"), NULL);
d879 1
a879 1
                 N_("Assume files didn't change"), NULL);
d882 1
a882 1
                 N_("Use timestamps to check files (default)"), NULL);
d885 1
a885 1
                 N_("Assume startup files unchanged "
d893 1
a893 1
                N_("Call SYMBOL at load-time"), N_("SYMBOL"));
d896 1
a896 1
                 N_("Read only symbol values from FILE"), N_("FILE"));
d900 3
a902 3
              N_("Map whole files to memory (default on 64-bit hosts)"),
              N_("Map relevant file parts to memory (default on 32-bit "
                 "hosts)"));
d904 2
a905 2
              N_("Keep files mapped across passes (default)"),
              N_("Release mapped files after each pass"));
d912 1
a912 1
                 N_("Search for library LIBNAME"), N_("LIBNAME"));
d915 1
a915 1
                 N_("Add directory to search path"), N_("DIR"));
d923 2
a924 2
              N_(" Only search directories specified on the command line."),
              NULL);
d927 2
a928 2
              N_(" Put read-only non-executable sections in their own segment"),
              NULL);
d931 1
a931 1
                N_("Set GNU linker emulation; obsolete"), N_("EMULATION"));
d934 2
a935 2
              N_("Map the output file for writing (default)."),
              N_("Do not map the output file for writing."));
d960 1
a960 1
                N_("Set output file name"), N_("FILE"));
d963 1
a963 1
              N_("Optimize output file size"), N_("LEVEL"));
d994 1
a994 1
                 N_("Load a plugin library"), N_("PLUGIN"));
d996 1
a996 1
                 N_("Pass an option to the plugin"), N_("OPTION"));
d1000 1
a1000 1
              N_("Use posix_fallocate to reserve space in the output file"
d1002 1
a1002 1
              N_("Use fallocate or ftruncate to reserve space."));
d1005 1
a1005 1
              N_("Preread archive symbols when multi-threaded"), NULL);
d1018 1
a1018 1
              N_("Generate relocations in output"), NULL);
d1021 1
a1021 1
              N_("Generate relocatable output"), NULL);
d1029 1
a1029 1
                N_("keep only symbols listed in this file"), N_("FILE"));
d1035 1
a1035 1
                 N_("Add DIR to runtime search path"), N_("DIR"));
d1038 1
a1038 1
                 N_("Add DIR to runtime search path"), N_("DIR"));
d1041 2
a1042 2
                 N_("Add DIR to link time shared library search path"),
                 N_("DIR"));
d1060 1
a1060 1
              N_("Strip all symbols"), NULL);
d1062 1
a1062 1
              N_("Strip debugging information"), NULL);
d1064 1
a1064 1
              N_("Emit only debug line number information"), NULL);
d1066 2
a1067 2
              N_("Strip debug symbols that are unused by gdb "
                 "(at least versions <= 7.4)"), NULL);
d1069 1
a1069 1
              N_("Strip LTO intermediate code sections"), NULL);
d1072 1
a1072 1
             N_("(ARM, PowerPC only) The maximum distance from instructions "
d1079 2
a1080 2
              N_("Use less memory and more disk I/O "
                 "(included only for compatibility with GNU ld)"), NULL);
d1083 1
a1083 1
              N_("Generate shared library"), NULL);
d1086 1
a1086 1
              N_("Generate shared library"), NULL);
d1095 1
a1095 1
                 N_("Do not link against shared libraries"), NULL);
d1098 5
a1102 5
              N_("Identical Code Folding. "
                 "\'--icf=safe\' Folds ctors, dtors and functions whose"
                 " pointers are definitely not taken."),
	      ("[none,all,safe]"),	
              {"none", "all", "safe"});
d1105 1
a1105 1
              N_("Number of iterations of ICF (default 2)"), N_("COUNT"));
d1108 2
a1109 2
              N_("List folded identical sections on stderr"),
              N_("Do not list folded identical sections"));
d1115 2
a1116 2
              N_("Remove unused sections"),
              N_("Don't remove unused sections (default)"));
d1119 2
a1120 2
              N_("List removed unused sections on stderr"),
              N_("Do not list removed unused sections"));
d1123 1
a1123 1
              N_("Print resource usage statistics"), NULL);
d1126 1
a1126 1
                N_("Set target system root directory"), N_("DIR"));
d1129 1
a1129 1
              N_("Print the name of each input file"), NULL);
d1132 1
a1132 1
                 N_("Read linker script"), N_("FILE"));
d1135 2
a1136 2
              N_("Run the linker multi-threaded"),
              N_("Do not run the linker multi-threaded"));
d1138 1
a1138 1
              N_("Number of threads to use"), N_("COUNT"));
d1140 1
a1140 1
              N_("Number of threads to use in initial pass"), N_("COUNT"));
d1142 1
a1142 1
              N_("Number of threads to use in middle pass"), N_("COUNT"));
d1144 1
a1144 1
              N_("Number of threads to use in final pass"), N_("COUNT"));
d1147 1
a1147 1
                N_("Set the address of the bss segment"), N_("ADDRESS"));
d1149 1
a1149 1
                N_("Set the address of the data segment"), N_("ADDRESS"));
d1151 1
a1151 1
                N_("Set the address of the text segment"), N_("ADDRESS"));
d1175 1
a1175 1
              N_("Synonym for --debug=files"), NULL);
d1178 1
a1178 1
                 N_("Read version script"), N_("FILE"));
d1218 2
a1219 2
              N_("Include all archive contents"),
              N_("Include only needed archive contents"));
d1225 1
a1225 1
             N_("Trace references to symbol"), N_("SYMBOL"));
d1236 1
a1236 1
                 N_("Start a library search group"), NULL);
d1238 1
a1238 1
                 N_("End a library search group"), NULL);
d1242 1
a1242 1
                 N_("Start a library"), NULL);
d1244 1
a1244 1
                 N_("End a library "), NULL);
d1256 1
a1256 1
                N_("Set common page size to SIZE"), N_("SIZE"));
d1258 2
a1259 2
              N_("Report undefined symbols (even with --shared)"),
              NULL);
d1261 1
a1261 1
              N_("Mark output as requiring executable stack"), NULL);
d1275 1
a1275 1
                N_("Set maximum page size to SIZE"), N_("SIZE"));
d1297 1
a1297 1
              N_("Mark output as not requiring executable stack"), NULL);
d1303 1
a1303 1
                 "processing at runtime"), NULL);
d1385 1
a1385 1
        return true;
d1528 1
a1528 1
    ICF_ALL,	
d1621 1
a1621 1
                                                \
d1632 1
a1632 1
                             = Position_dependent_options::default_options_)
d1689 3
a1691 3
                      const char* extra_search_path,
                      bool just_symbols,
                      const Position_dependent_options& options)
d1701 3
a1703 3
                      const char* extra_search_path,
                      bool just_symbols,
                      const General_options& options)
d1728 2
a1729 2
            ? NULL
            : this->extra_search_path_.c_str());
d2042 1
a2042 1
                     bool* no_more_options);
@


1.184
log
@	* options.h (DEFINE_uint64_alias): Define.
	(class General_options): Add -Ttext-segment as an alias for
	-Ttext.
@
text
@d681 1
a681 1
  DEFINE_optional_string(build_id, options::TWO_DASHES, '\0', "sha1",
d685 9
@


1.183
log
@Default text reordering fix with a flag to turn it off.

2013-01-24  Sriraman Tallam  <tmsriram@@google.com>

	* layout.cc (Layout::layout): Check for option text_reorder.
	(Layout::make_output_section): Ditto.
	* options.h (text_reorder): New option.
	* output.cc (Input_section_sort_compare): Remove special ordering
	of section names.
	(Output_section::
	 Input_section_sort_section_name_special_ordering_compare::
	 operator()): New function.
	(Output_section::sort_attached_input_sections): Use new sort function
	for .text.
	* output.h (Input_section_sort_section_name_special_ordering_compare):
	New struct.
	* testsuite/Makefile.am (text_section_grouping): Test option
	--no-text-reorder
	* testsuite/Makefile.in: Regenerate.
	* testsuite/text_section_grouping.sh: Check order of functions without
	default text reordering.
@
text
@d501 26
d1142 3
@


1.182
log
@gold: enable new dtags by default

The "new" dtags options have been around for 14+ years, and for all the
targets that gold supports, these flags have always existed.  So enable
them by default.

Having behavior be different from ld.bfd isn't new, and this behavior
is the "better" one, so there shouldn't be a problem based on that.

Signed-off-by: Mike Frysinger <vapier@@gentoo.org>
@
text
@d881 5
@


1.181
log
@Add -fuse-ld= for GCC linker option compatibility

	* options.h (General_options): Add -fuse-ld= for GCC linker
	option compatibility.
@
text
@d907 1
a907 1
  DEFINE_enable(new_dtags, options::EXACTLY_TWO_DASHES, '\0', false,
@


1.180
log
@	* options.h (General_options): Add --toc-sort/--no-toc-sort.
	Replace no_toc_optimize with toc_optimize.
	* output.h (Output_section::input_sections): Provide non-const variant.
	* powerpc.cc (Powerpc_relobj::has_small_toc_reloc_,
	set_has_small_toc_reloc, has_small_toc_reloc): New variable and
	accessors.
	(Target_powerpc::Scan::local, global): Call set_has_small_toc_reloc.
	(class Sort_toc_sections): New.
	(Target_powerpc::do_finalize_sections): Sort toc sections.
	(Target_powerpc::Relocate::relocate): Update toc_optimize test.
@
text
@d1202 4
@


1.179
log
@	* options.h (General_options): Add no_toc_optimize.
	* powerpc.cc (ok_lo_toc_insn): New function.
	(Target_powerpc::Relocate::relocate): Optimize toc access sequences.
@
text
@d1112 7
a1118 2
  DEFINE_bool(no_toc_optimize, options::TWO_DASHES, '\0', false,
	      N_("(PowerPC64 only) Don't optimize TOC code sequences"), NULL);
@


1.178
log
@	* options.h (General_options): Add plt_align, plt_static_chain,
	plt_thread_safe.  Update stub_group_size help text.
	* powerpc.cc (Target_powerpc::plt_thread_safe): New access function
	for new plt_thread_safe_ var.
	(use_plt_offset): Correct comments.
	(Target_powerpc::do_relax): Look for thread creation symbols to
	determine default plt_thread_safe value.  Clear plt call stubs
	as well as branch stubs each iteration.
	(add_2_2_11, add_12_12_11, bnectr_p4, cmpldi_2_0, xor_11_11_11): New
	insn constants.
	(l, hi, ha, write_insn): Move earlier.
	(Stub_table): Delete prev_size, add last_plt_size and last_branch_size.
	(Stub_table::clear_stubs): Rename from clear_long_branch_stubs, clear
	plt stubs too.
	(Stub_table::update_size): Adjust.
	(Stub_table::prev_size, set_prev_size): Delete.
	(Stub_table::stub_align): Let --plt-align affect result.
	(Stub_table::plt_call_size): Calculate sizes for various stubs.
	(Stub_table::branch_stub_size): Use last_plt_size in address calc.
	(Stub_table::add_plt_call_stub): Pass iterator to plt_call_size.
	(Stub_table::do_write): Support more stub variants.
@
text
@d1112 3
@


1.177
log
@gold/
	* layout.cc (gdb_sections): Remove ".debug_" prefixes,
	add .debug_macro.
	(lines_only_debug_sections): Likewise.
	(gdb_fast_lookup_sections): New static array.
	(is_gdb_debug_section): Rename formal parameter.
	(is_lines_only_debug_section): Likewise.
	(is_gdb_fast_lookup_section): New function.
	(Layout::include_section): Check for ".zdebug_" prefix; pass
	section name suffix to is_gdb_debug_section, et al.; check for
	fast-lookup sections when building .gdb_index.
	* options.h (--strip-debug-gdb): Update GDB version number.
@
text
@d939 12
d1031 4
a1034 3
             N_("(ARM only) The maximum distance from instructions in a group "
		"of sections to their stubs.  Negative values mean stubs "
		"are always after the group. 1 means using default size.\n"),
@


1.177.2.1
log
@gold/
	* options.h (General_options): Add --rosegment-gap option.
	* options.cc (finalize): --rosegment-gap implies --rosegment.
	* layout.cc (set_segment_offsets): Let user option override
	target->rosegment_gap().
@
text
@d3 1
a3 2
// Copyright 2006, 2007, 2008, 2009, 2010, 2011, 2013
// Free Software Foundation, Inc.
d123 1
a123 1
	      const char* choices[], int num_choices);
d171 1
a171 1
	     const char* hs, const char* ha, bool oa, Struct_var* r)
d222 1
a222 1
		 Command_line* cmdline, General_options* options) = 0;
d233 1
a233 1
						  Command_line*);
d235 2
a236 2
		 Parse_function parse_function,
		 const char* helpstring, const char* helparg)
d242 1
a242 1
		      Command_line* cmdline, General_options* options)
d264 2
a265 2
		   default_value_as_string__, helpstring__, helparg__,       \
		   optional_arg__, type__, param_type__, parse_fn__)	     \
d270 1
a270 1
									     \
d274 1
a274 1
									     \
d284 2
a285 2
	       helpstring__, helparg__, optional_arg__, this),		     \
	user_set_via_option(false), value(default_value__)                   \
d287 1
a287 1
									     \
d290 1
a290 1
		   Command_line*, General_options*)                          \
d295 1
a295 1
									     \
d311 1
a311 1
		    helpstring__, no_helpstring__)                       \
d313 2
a314 2
	     default_value__ ? "true" : "false", helpstring__, NULL,     \
	     false, bool, bool, options::parse_bool)			 \
d321 2
a322 2
				     default_value__ ? "false" : "true", \
				     no_helpstring__, NULL, false, this) \
d324 1
a324 1
									 \
d327 1
a327 1
		   Command_line*, General_options* options)              \
d332 1
a332 1
									 \
d338 1
a338 1
		      helpstring__, no_helpstring__)                     \
d340 2
a341 2
	     default_value__ ? "true" : "false", helpstring__, NULL,     \
	     false, bool, bool, options::parse_bool)			 \
d345 3
a347 3
				     dashes__, '\0',                     \
				     default_value__ ? "false" : "true", \
				     no_helpstring__, NULL, false, this) \
d349 1
a349 1
									 \
d352 1
a352 1
		   Command_line*, General_options* options)              \
d354 1
a354 1
									 \
d360 1
a360 1
		   helpstring__, helparg__)                             \
d362 2
a363 2
	     #default_value__, helpstring__, helparg__, false,		\
	     int, int, options::parse_int)
d366 1
a366 1
		   helpstring__, helparg__)                             \
d368 2
a369 2
	     #default_value__, helpstring__, helparg__, false,		\
	     int, int, options::parse_uint)
d372 1
a372 1
		      helpstring__, helparg__)                           \
d374 2
a375 2
	     #default_value__, helpstring__, helparg__, false,		 \
	     uint64_t, uint64_t, options::parse_uint64)
d390 1
a390 1
		      helpstring__, helparg__)                           \
d392 2
a393 2
	     default_value__, helpstring__, helparg__, false,		 \
	     const char*, const char*, options::parse_string)
d399 1
a399 1
			   helpstring__, helparg__)                       \
d401 2
a402 2
	     "", helpstring__, helparg__, false, options::Dir_list,	  \
	     const options::Dir_list&, options::parse_dirlist)            \
d412 1
a412 1
		   helpstring__, helparg__)                               \
d414 2
a415 2
	     "", helpstring__, helparg__, false, options::String_set,     \
	     const options::String_set&, options::parse_set)              \
d425 2
a426 2
	    && (this->varname__##_.value.find(std::string(symbol))        \
		!= this->varname__##_.value.end()));                      \
d441 1
a441 1
		    helpstring__, helparg__, ...)                        \
d443 2
a444 2
	     default_value__, helpstring__, helparg__, false,		 \
	     const char*, const char*, parse_choices_##varname__)        \
d447 2
a448 2
					const char* arg,                 \
					const char** retval) {           \
d451 1
a451 1
			   choices, sizeof(choices) / sizeof(*choices)); \
d507 1
a507 1
		       helpstring__, helparg__)                         \
d510 1
a510 1
			 Command_line* inputs);                         \
d515 2
a516 2
				&General_options::parse_##varname__,    \
				helpstring__, helparg__)                \
d528 2
a529 2
	     default_value__, helpstring__, helparg__, true,		\
	     const char*, const char*, options::parse_optional_string)
d597 1
a597 1
		 N_("Report usage information"), NULL);
d599 1
a599 1
		 N_("Report version information"), NULL);
d601 1
a601 1
		 N_("Report version and target information"), NULL);
d618 2
a619 2
	      N_("Allow unresolved references in shared libraries"),
	      N_("Do not allow unresolved references in shared libraries"));
d622 2
a623 2
	      N_("Only set DT_NEEDED for shared libraries if used"),
	      N_("Always DT_NEEDED for shared libraries"));
d634 1
a634 1
		N_("Set input format"), ("[elf,binary]"));
d637 1
a637 1
	      N_("-l searches for shared libraries"), NULL);
d650 1
a650 1
	      N_("Bind defined symbols locally"), NULL);
d665 3
a667 3
	      N_("Compress .debug_* sections in the output file"),
	      ("[none,zlib]"),
	      {"none", "zlib"});
d670 3
a672 3
	      N_("Compress .debug_* sections in the output file"),
	      N_("[none]"),
	      {"none"});
d688 2
a689 2
	      N_("Define common symbols"),
	      N_("Do not define common symbols"));
d691 1
a691 1
	      N_("Alias for -d"), NULL);
d693 1
a693 1
	      N_("Alias for -d"), NULL);
d696 2
a697 2
		N_("Turn on debugging"),
		N_("[all,files,script,task][,...]"));
d700 1
a700 1
		 N_("Define a symbol"), N_("SYMBOL=EXPRESSION"));
d711 1
a711 1
	      N_("Look for violations of the C++ One Definition Rule"),
d717 1
a717 1
	      N_("Delete all temporary local symbols"), NULL);
d720 1
a720 1
	      N_("Add data symbols to dynamic symbols"), NULL);
d723 1
a723 1
	      N_("Add C++ operator new/delete to dynamic symbols"), NULL);
d726 1
a726 1
	      N_("Add C++ typeinfo to dynamic symbols"), NULL);
d729 1
a729 1
		 N_("Read a list of dynamic symbols"), N_("FILE"));
d732 1
a732 1
		N_("Set program start address"), N_("ADDRESS"));
d739 1
a739 1
	      N_("Export all dynamic symbols"),
d752 1
a752 1
	      N_("Create exception frame header"), NULL);
d771 1
a771 1
		N_("Call SYMBOL at unload-time"), N_("SYMBOL"));
d786 2
a787 2
		 N_("(ARM only) Rewrite BX rn as MOV pc, rn for ARMv4"),
		 NULL);
d790 3
a792 3
		 N_("(ARM only) Rewrite BX rn branch to ARMv4 interworking "
		    "veneer"),
		 NULL);
d806 1
a806 1
		N_("Set shared library name"), N_("FILENAME"));
d817 1
a817 1
		N_("Set dynamic linker path"), N_("PROGRAM"));
d835 3
a837 3
		N_("Set base file for incremental linking"
		   " (default is output file)"),
		N_("FILE"));
d840 1
a840 1
		 N_("Assume files changed"), NULL);
d843 1
a843 1
		 N_("Assume files didn't change"), NULL);
d846 1
a846 1
		 N_("Use timestamps to check files (default)"), NULL);
d849 1
a849 1
		 N_("Assume startup files unchanged "
d857 1
a857 1
		N_("Call SYMBOL at load-time"), N_("SYMBOL"));
d860 1
a860 1
		 N_("Read only symbol values from FILE"), N_("FILE"));
d864 3
a866 3
	      N_("Map whole files to memory (default on 64-bit hosts)"),
	      N_("Map relevant file parts to memory (default on 32-bit "
		 "hosts)"));
d868 2
a869 2
	      N_("Keep files mapped across passes (default)"),
	      N_("Release mapped files after each pass"));
d876 1
a876 1
		 N_("Search for library LIBNAME"), N_("LIBNAME"));
d879 1
a879 1
		 N_("Add directory to search path"), N_("DIR"));
d882 2
a883 2
	      N_(" Only search directories specified on the command line."),
	      NULL);
d886 2
a887 6
	      N_(" Put read-only non-executable sections in their own segment"),
	      NULL);

  DEFINE_uint64(rosegment_gap, options::TWO_DASHES, '\0', -1U,
		N_("Set offset between executable and read-only segments"),
		N_("OFFSET"));
d890 1
a890 1
		N_("Set GNU linker emulation; obsolete"), N_("EMULATION"));
d893 2
a894 2
	      N_("Map the output file for writing (default)."),
	      N_("Do not map the output file for writing."));
d919 1
a919 1
		N_("Set output file name"), N_("FILE"));
d922 1
a922 1
	      N_("Optimize output file size"), N_("LEVEL"));
d941 1
a941 1
		 N_("Load a plugin library"), N_("PLUGIN"));
d943 1
a943 1
		 N_("Pass an option to the plugin"), N_("OPTION"));
d947 1
a947 1
	      N_("Use posix_fallocate to reserve space in the output file"
d949 1
a949 1
	      N_("Use fallocate or ftruncate to reserve space."));
d952 1
a952 1
	      N_("Preread archive symbols when multi-threaded"), NULL);
d965 1
a965 1
	      N_("Generate relocations in output"), NULL);
d968 1
a968 1
	      N_("Generate relocatable output"), NULL);
d976 1
a976 1
		N_("keep only symbols listed in this file"), N_("FILE"));
d982 1
a982 1
		 N_("Add DIR to runtime search path"), N_("DIR"));
d985 1
a985 1
		 N_("Add DIR to runtime search path"), N_("DIR"));
d988 2
a989 2
		 N_("Add DIR to link time shared library search path"),
		 N_("DIR"));
d1007 1
a1007 1
	      N_("Strip all symbols"), NULL);
d1009 1
a1009 1
	      N_("Strip debugging information"), NULL);
d1011 1
a1011 1
	      N_("Emit only debug line number information"), NULL);
d1013 2
a1014 2
	      N_("Strip debug symbols that are unused by gdb "
		 "(at least versions <= 7.4)"), NULL);
d1016 1
a1016 1
	      N_("Strip LTO intermediate code sections"), NULL);
d1019 1
a1019 1
	     N_("(ARM only) The maximum distance from instructions in a group "
d1025 2
a1026 2
	      N_("Use less memory and more disk I/O "
		 "(included only for compatibility with GNU ld)"), NULL);
d1029 1
a1029 1
	      N_("Generate shared library"), NULL);
d1032 1
a1032 1
	      N_("Generate shared library"), NULL);
d1041 1
a1041 1
		 N_("Do not link against shared libraries"), NULL);
d1044 5
a1048 5
	      N_("Identical Code Folding. "
		 "\'--icf=safe\' Folds ctors, dtors and functions whose"
		 " pointers are definitely not taken."),
	      ("[none,all,safe]"),
	      {"none", "all", "safe"});
d1051 1
a1051 1
	      N_("Number of iterations of ICF (default 2)"), N_("COUNT"));
d1054 2
a1055 2
	      N_("List folded identical sections on stderr"),
	      N_("Do not list folded identical sections"));
d1061 2
a1062 2
	      N_("Remove unused sections"),
	      N_("Don't remove unused sections (default)"));
d1065 2
a1066 2
	      N_("List removed unused sections on stderr"),
	      N_("Do not list removed unused sections"));
d1069 1
a1069 1
	      N_("Print resource usage statistics"), NULL);
d1072 1
a1072 1
		N_("Set target system root directory"), N_("DIR"));
d1075 1
a1075 1
	      N_("Print the name of each input file"), NULL);
d1078 1
a1078 1
		 N_("Read linker script"), N_("FILE"));
d1081 2
a1082 2
	      N_("Run the linker multi-threaded"),
	      N_("Do not run the linker multi-threaded"));
d1084 1
a1084 1
	      N_("Number of threads to use"), N_("COUNT"));
d1086 1
a1086 1
	      N_("Number of threads to use in initial pass"), N_("COUNT"));
d1088 1
a1088 1
	      N_("Number of threads to use in middle pass"), N_("COUNT"));
d1090 1
a1090 1
	      N_("Number of threads to use in final pass"), N_("COUNT"));
d1093 1
a1093 1
		N_("Set the address of the bss segment"), N_("ADDRESS"));
d1095 1
a1095 1
		N_("Set the address of the data segment"), N_("ADDRESS"));
d1097 1
a1097 1
		N_("Set the address of the text segment"), N_("ADDRESS"));
d1110 1
a1110 1
	      N_("Synonym for --debug=files"), NULL);
d1113 1
a1113 1
		 N_("Read version script"), N_("FILE"));
d1153 2
a1154 2
	      N_("Include all archive contents"),
	      N_("Include only needed archive contents"));
d1160 1
a1160 1
	     N_("Trace references to symbol"), N_("SYMBOL"));
d1171 1
a1171 1
		 N_("Start a library search group"), NULL);
d1173 1
a1173 1
		 N_("End a library search group"), NULL);
d1177 1
a1177 1
		 N_("Start a library"), NULL);
d1179 1
a1179 1
		 N_("End a library "), NULL);
d1187 1
a1187 1
		N_("Set common page size to SIZE"), N_("SIZE"));
d1189 2
a1190 2
	      N_("Report undefined symbols (even with --shared)"),
	      NULL);
d1192 1
a1192 1
	      N_("Mark output as requiring executable stack"), NULL);
d1206 1
a1206 1
		N_("Set maximum page size to SIZE"), N_("SIZE"));
d1228 1
a1228 1
	      N_("Mark output as not requiring executable stack"), NULL);
d1234 1
a1234 1
		 "processing at runtime"), NULL);
d1316 1
a1316 1
	return true;
d1459 1
a1459 1
    ICF_ALL,
d1552 1
a1552 1
						\
d1563 1
a1563 1
			     = Position_dependent_options::default_options_)
d1620 3
a1622 3
		      const char* extra_search_path,
		      bool just_symbols,
		      const Position_dependent_options& options)
d1632 3
a1634 3
		      const char* extra_search_path,
		      bool just_symbols,
		      const General_options& options)
d1659 2
a1660 2
	    ? NULL
	    : this->extra_search_path_.c_str());
d1973 1
a1973 1
		     bool* no_more_options);
@


1.177.2.2
log
@gold/
	* options.h (General_options): Remove leading space from help
	messages for -nostdlib and --rosegment.
@
text
@d883 1
a883 1
	      N_("Only search directories specified on the command line."),
d887 1
a887 1
	      N_("Put read-only non-executable sections in their own segment"),
@


1.177.2.3
log
@gold/
	* options.h (DEFINE_uint64_alias): Define.
	(class General_options): Add -Ttext-segment as an alias for
	-Ttext.
@
text
@a501 26
// This is like DEFINE_uint64, but VARNAME is the name of a different
// option.  This option becomes an alias for that one.
#define DEFINE_uint64_alias(option__, varname__, dashes__, shortname__,	\
			    helpstring__, helparg__)			\
 private:								\
  struct Struct_##option__ : public options::Struct_var			\
  {									\
    Struct_##option__()							\
      : option(#option__, dashes__, shortname__, "", helpstring__,	\
	       helparg__, false, this)					\
    { }									\
									\
    void								\
    parse_to_value(const char* option_name, const char* arg,		\
		   Command_line*, General_options* options)		\
    {									\
      uint64_t value;							\
      options::parse_uint64(option_name, arg, &value);			\
      options->set_##varname__(value);					\
      options->set_user_set_##varname__();				\
    }									\
									\
    options::One_option option;						\
  };									\
  Struct_##option__ option__##_;

a1102 3
  DEFINE_uint64_alias(Ttext_segment, Ttext, options::ONE_DASH, '\0',
		      N_("Set the address of the text segment"),
		      N_("ADDRESS"));
@


1.177.2.4
log
@gold/
	* options.h (General_options): Add -Trodata-segment option.
	* parameters.cc (Parameters::check_rodata_segment): New function.
	(Parameters::set_target_once): Call it.
	* parameters.h (Parameters): Declare it (private member function).
	* layout.cc (load_seg_unusable_for_headers): New function, broken
	out of Layout::relaxation_loop_body.  If TARGET->isolate_execinstr()
	then validate rodata segment rather than text segment.
	(relaxation_loop_body): Call that.
	(is_text_segment): New function.  Don't admit a non-executable
	segment if TARGET->isolate_execinstr().
	(set_segment_offsets): Call it.  Honor -Trodata-segment option.
@
text
@a1131 2
  DEFINE_uint64(Trodata_segment, options::ONE_DASH, '\0', -1U,
		N_("Set the address of the rodata segment"), N_("ADDRESS"));
@


1.176
log
@gold/
	* configure.ac: Add check for fallocate.
	* configure: Regenerate.
	* config.in: Regenerate.

	* options.h (class General_options): Add --mmap-output-file and
	--posix-fallocate options.
	* output.cc: (posix_fallocate): Remove; replace with...
	(gold_fallocate): New function.
	(Output_file::map_no_anonymous): Call gold_fallocate.
	(Output_file::map): Check --mmap-output-file option.
@
text
@d1014 1
a1014 1
                 "(at least versions <= 6.7)"), NULL);
@


1.175
log
@	* archive.cc (Library_base::should_include_member): Check for
	--export-dynamic-symbol.
	* options.h (class General_options): Add --export-dynamic-symbol.
	* symtab.cc (Symbol::should_add_dynsym_entry): Check for
	--export-dynamic-symbol.
	(Symbol_table::gc_mark_undef_symbols): Likewise.
	(Symbol_table::do_add_undefined_symbols_from_command_line): Likewise.
@
text
@d892 4
d946 5
@


1.174
log
@2012-03-21  Cary Coutant  <ccoutant@@google.com>

	* Makefile.am: Add gdb-index.cc, gdb-index.h.
	* Makefile.in: Regenerate.
	* dwarf_reader.cc (Sized_elf_reloc_mapper::do_initialize): New function.
	(Sized_elf_reloc_mapper::symbol_section): New function.
	(Sized_elf_reloc_mapper::do_get_reloc_target): New function.
	(make_elf_reloc_mapper): New function.
	(Dwarf_abbrev_table::clear_abbrev_codes): New function.
	(Dwarf_abbrev_table::do_read_abbrevs): New function.
	(Dwarf_abbrev_table::do_get_abbrev): New function.
	(Dwarf_ranges_table::read_ranges_table): New function.
	(Dwarf_ranges_table::read_range_list): New function.
	(Dwarf_pubnames_table::read_section): New function.
	(Dwarf_pubnames_table::read_header): New function.
	(Dwarf_pubnames_table::next_name): New function.
	(Dwarf_die::Dwarf_die): New function.
	(Dwarf_die::read_attributes): New function.
	(Dwarf_die::skip_attributes): New function.
	(Dwarf_die::set_name): New function.
	(Dwarf_die::set_linkage_name): New function.
	(Dwarf_die::attribute): New function.
	(Dwarf_die::string_attribute): New function.
	(Dwarf_die::int_attribute): New function.
	(Dwarf_die::uint_attribute): New function.
	(Dwarf_die::ref_attribute): New function.
	(Dwarf_die::child_offset): New function.
	(Dwarf_die::sibling_offset): New function.
	(Dwarf_info_reader::check_buffer): New function.
	(Dwarf_info_reader::parse): New function.
	(Dwarf_info_reader::do_parse): New function.
	(Dwarf_info_reader::do_read_string_table): New function.
	(Dwarf_info_reader::lookup_reloc): New function.
	(Dwarf_info_reader::get_string): New function.
	(Dwarf_info_reader::visit_compilation_unit): New function.
	(Dwarf_info_reader::visit_type_unit): New function.
	(Sized_dwarf_line_info::Sized_dwarf_line_info): Use
	Sized_elf_reloc_mapper.
	(Sized_dwarf_line_info::symbol_section): Remove function.
	(Sized_dwarf_line_info::read_relocs): Use Sized_elf_reloc_mapper.
	(Sized_dwarf_line_info::read_line_mappings): Remove object
	parameter, adjust callers.
	(Sized_dwarf_line_info::format_file_lineno): Fix type of cast.
	* dwarf_reader.h: Include <sys/types.h>.
	(class Track_relocs): Remove forward declaration.
	(class Elf_reloc_mapper): New class.
	(class Sized_elf_reloc_mapper): New class.
	(class Dwarf_abbrev_table): New class.
	(class Dwarf_range_list): New class.
	(class Dwarf_ranges_table): New class.
	(class Dwarf_pubnames_table): New class.
	(class Dwarf_die): New class.
	(class Dwarf_info_reader): New class.
	(Sized_dwarf_line_info::read_line_mappings): Remove object parameter.
	(Sized_dwarf_line_info::symbol_section): Remove member function.
	* dynobj.h (Sized_dynobj::do_section_contents): Refactor code from
	base class.
	* gdb-index.cc: New source file.
	* gdb-index.h: New source file.
	* incremental.cc (Sized_relobj_incr::do_layout): Track .debug_info
	and .debug_types sections, call Layout::add_to_gdb_index.
	(Sized_relobj_incr::do_section_name): Implement.
	(Sized_relobj_incr::do_section_contents): Adjust parameter list and
	return type; Implement.
	(Sized_incr_dynobj::do_section_contents): Adjust parameter list and
	return type.
	* incremental.h (Sized_relobj_incr::do_section_contents): Adjust
	parameter list and return type.
	(Sized_incr_dynobj::do_section_contents): Likewise.
	* layout.cc: Include gdb-index.h.
	(Layout::Layout): Initialize gdb_index_data_.
	(Layout::init_fixed_output_section): Check for .gdb_index section.
	(Layout::add_to_gdb_index): New function. Instantiate.
	* layout.h: Add forward declaration for class Gdb_index.
	(Layout::add_to_gdb_index): New member function.
	(Layout::gdb_index_data_): New data member.
	* main.cc: Include gdb-index.h.
	(main): Print statistics for gdb index.
	* object.cc (Object::section_contents): Move code into
	do_section_contents.
	(need_decompressed_section): Check for sections needed when building
	gdb index.
	(build_compressed_section_map): Likewise.
	(Sized_relobj_file::do_read_symbols): Need local symbols when building
	gdb index.
	(Sized_relobj_file::do_layout): Track .debug_info and .debug_types
	sections; call Layout::add_to_gdb_index.
	(Sized_relobj_file::do_decompressed_section_contents): Call
	do_section_contents directly.
	* object.h (Object::do_section_contents): Adjust parameter list and
	return type.
	(Object::do_decompressed_section_contents): Call do_section_contents
	directly.
	(Sized_relobj_file::do_section_contents): Adjust parameter list and
	return type.
	* options.h (class General_options): Add --gdb-index option.
	* plugin.cc (Sized_pluginobj::do_section_contents): Adjust parameter
	list and return type.
	* plugin.h (Sized_pluginobj::do_section_contents): Likewise.
	* reloc.h (Track_relocs::checkpoint): New function.
	(Track_relocs::reset): New function.

	* testsuite/Makefile.am (gdb_index_test_1.sh, gdb_index_test_2.sh):
	New test cases.
	* testsuite/Makefile.in: Regenerate.
	* testsuite/gdb_index_test.cc: New test source file.
	* testsuite/gdb_index_test_1.sh: New test source file.
	* testsuite/gdb_index_test_2.sh: New test source file.
@
text
@d742 3
@


1.173
log
@	* configure.ac: Add --with-lib-path option.  Define LIB_PATH and
	NATIVE_LINKER.
	* Makefile.am (AM_CPPFLAGS): Define TOOLLIBDIR.
	* options.cc (General_options::finalize): Use library search path
	from configure script if specified.  If not native and no sysroot,
	only search TOOLLIBDIR.
	* options.h (Search_directory::Search_directory): Change name to
	const std::string&.
	(General_options::add_to_library_path_with_sysroot): Change arg to
	const std::string&.
	* configure, Makefile.in, config.in: Rebuild.
@
text
@d794 4
@


1.172
log
@	* arm.cc (Target_arm::may_use_v5t_interworking): Check whether
	we are working around the ARM1176 Erratum.
	* options.h (General_options::fix_arm1176): Add option.
	* testsuite/Makefile.am: Add testcases, and keep current ones
	working.
	* testsuite/Makefile.in: Regenerate.
	* testsuite/arm_fix_1176.s: New file.
	* testsuite/arm_fix_1176.sh: Likewise.
@
text
@d546 1
a546 1
  Search_directory(const char* name, bool put_in_sysroot)
d1466 1
a1466 1
  add_to_library_path_with_sysroot(const char* arg)
@


1.171
log
@	* options.h (class General_options): Add --[no-]gnu-unique options.
	* symtab.cc (Symbol_table::sized_write_globals): Convert
	STB_GNU_UNIQUE to STB_GLOBAL if --no-gnu-unique.
@
text
@d774 4
@


1.170
log
@	PR gold/13204
	* layout.cc (Layout::segment_precedes): Don't assert failure if a
	--section-start option was seen.
	* options.h (General_options::any_section_start): New function.
@
text
@d790 4
@


1.169
log
@	* options.h (class General_options): Add --print-output-format.
	Move -EL next to -EB, for  better --help output.
	* target-select.cc: Include <cstdio>, "options.h", and
	"parameters.h".
	(Target_selector::do_target_bfd_name): New function.
	(print_output_format): New function.
	* target-select.h (class Target_selector): Update declarations.
	(Target_selector::target_bfd_name): New function.
	(print_output_format): Declare.
	* main.cc: Include "target-select.h".
	(main): Handle --print-output-format.
	* gold.cc: Include "target-select.h".
	(queue_initial_tasks): Handle --print-output-format when there are
	no input files.
	* parameters.cc (parameters_force_valid_target): Give a better
	error message if -EB/-EL does not match target.
	* freebsd.h (Target_selector_freebsd::do_target_bfd_name): New
	function.
@
text
@d1384 5
@


1.169.2.1
log
@	Apply mainline patches.
	2011-11-02  Matthew Gretton-Dann  <matthew.gretton-dann@@arm.com>
	* gold/arm.cc (Target_arm::may_use_v5t_interworking): Check whether
	we are working around the ARM1176 Erratum.
	* gold/options.h (General_options::fix_arm1176): Add option.
	* gold/testsuite/Makefile.am: Add testcases, and keep current ones
	working.
	* gold/testsuite/Makefile.in: Regenerate.
	* gold/testsuite/arm_fix_1176.s: New file.
	* gold/testsuite/arm_fix_1176.sh: Likewise.
	2011-11-02  Matthew Gretton-Dann  <matthew.gretton-dann@@arm.com>
	* gold/arm.cc (Target_arm::Target_arm): Remove initialisation of
	may_use_blx_.
	(Target_arm::may_use_blx): Remove method.
	(Target_arm::set_may_use_blx): Likewise.
	(Target_arm::may_use_v4t_interworking): New method.
	(Target_arm::may_use_v5t_interworking): Likewise.
	(Target_arm::may_use_blx_): Remove member variable.
	(Arm_relocate_functions::arm_branch_common): Check for v5T
	interworking.
	(Arm_relocate_functions::thumb_branch_common): Likewise.
	(Reloc_stub::stub_type_for_reloc): Likewise.
	(Target_arm::do_finalize_sections): Correct interworking checks.
	* gold/testsuite/Makefile.am: Add new tests.
	* gold/testsuite/Makefile.in: Regenerate.
	* gold/testsuite/arm_farcall_arm_arm.s: New test.
	* gold/testsuite/arm_farcall_arm_arm.sh: Likewise.
	* gold/testsuite/arm_farcall_arm_thumb.s: Likewise.
	* gold/testsuite/arm_farcall_arm_thumb.sh: Likewise.
	* gold/testsuite/arm_farcall_thumb_arm.s: Likewise.
	* gold/testsuite/arm_farcall_thumb_arm.sh: Likewise.
	* gold/testsuite/arm_farcall_thumb_thumb.s: Likewise.
	* gold/testsuite/arm_farcall_thumb_thumb.sh: Likewise.
@
text
@a773 4
  DEFINE_bool(fix_arm1176, options::TWO_DASHES, '\0', true,
	      N_("(ARM only) Fix binaries for ARM1176 erratum."),
	      N_("(ARM only) Do not fix binaries for ARM1176 erratum."));

@


1.169.2.2
log
@	Copy from mainline to binutils 2.22 branch:

	2011-12-17  Cary Coutant  <ccoutant@@google.com>

	* dwarf_reader.cc (Sized_dwarf_line_info::read_lines): Add casts.
	* resolve.cc (Symbol_table::resolve): Likewise.
	* i386.cc (Target_i386::do_code_fill): Use char constants for nop
	arrays.
	* x86_64.cc (Target_x86_64::do_code_fill): Likewise.

	2011-10-31  Cary Coutant  <ccoutant@@google.com>

	PR gold/13023
	* expression.cc (Expression::eval_with_dot): Add
	is_section_dot_assignment parameter.
	(Expression::eval_maybe_dot): Likewise.  Adjust value when rhs is
	absolute and assigning to dot within a section.
	* script-sections.cc
	(Output_section_element_assignment::set_section_addresses): Pass
	dot_section to set_if_absolute.
	(Output_section_element_dot_assignment::finalize_symbols): Pass TRUE
	as is_section_dot_assignment flag to eval_with_dot.
	(Output_section_element_dot_assignment::set_section_addresses):
	Likewise.
	* script.cc (Symbol_assignment::set_if_absolute): Add dot_section
	parameter.  Also set value if relative to dot_section; set the
	symbol's output_section.
	* script.h (Expression::eval_with_dot): Add is_section_dot_assignment
	parameter.  Adjust all callers.
	(Expression::eval_maybe_dot): Likewise.
	(Symbol_assignment::set_if_absolute): Add dot_section parameter.
	Adjust all callers.
	* testsuite/script_test_2.t: Test assignment of an absolute value
	to dot within an output section element.

	2011-10-31  Cary Coutant  <ccoutant@@google.com>

	* options.h (class General_options): Add --[no-]gnu-unique options.
	* symtab.cc (Symbol_table::sized_write_globals): Convert
	STB_GNU_UNIQUE to STB_GLOBAL if --no-gnu-unique.

	2011-10-31  Cary Coutant  <ccoutant@@google.com>

	PR gold/13359
	* i386.cc (Target_i386::Relocate::relocate_tls): Remove
	unnecessary assertion.
	* x86_64.cc (Target_x86_64::Relocate::relocate_tls): Likewise.

	2011-10-31 Sriraman Tallam  <tmsriram@@google.com>

	* symtab.h (Symbol_table::gc_mark_symbol_for_shlib): Rename to
	gc_mark_symbol.
	* symtab.cc (Symbol_table::gc_mark_symbol_for_shlib): Rename to
	gc_mark_symbol.
	Change to just keep the section associated with symbol.
	(Symbol_table::add_from_relobj): Mark symbols as not garbage when
	they are externally visible and --export-dynamic is turned on.
	(Symbol_table::gc_mark_dyn_syms): Call gc_mark_symbol.

	2011-10-19  Ian Lance Taylor  <iant@@google.com>

	PR gold/13163
	* script-sections.cc
	(Output_section_element_dot_assignment::needs_output_section): New
	function.

	2011-10-19  Ian Lance Taylor  <iant@@google.com>

	PR gold/13204
	* layout.cc (Layout::segment_precedes): Don't assert failure if a
	--section-start option was seen.
	* options.h (General_options::any_section_start): New function.

	2011-10-18  Cary Coutant  <ccoutant@@google.com>

	* output.cc (posix_fallocate): Return 0 on success, errno on failure.
	(Output_file::map_no_anonymous): Check for non-zero
	return code from posix_fallocate.

	2011-10-17  Cary Coutant  <ccoutant@@google.com>

	PR gold/13245
	* plugin.cc (is_visible_from_outside): Check for symbols
	referenced from dynamic objects.
	* resolve.cc (Symbol_table::resolve): Don't count references
	from dynamic objects as references from real ELF files.
	* testsuite/plugin_test_2.sh: Adjust expected result.

	2011-10-17  Cary Coutant  <ccoutant@@google.com>

	* readsyms.cc (Read_symbols::run): Don't queue an unblocker
	task for members of lib groups.

	2011-10-17  Cary Coutant  <ccoutant@@google.com>

	PR gold/13288
	* fileread.cc (File_read::find_view): Add assert.
	(File_read::make_view): Move bounds check (replace with assert)...
	(File_read::find_or_make_view): ... to here.

	2011-10-12  Cary Coutant  <ccoutant@@google.com>

	* output.cc (Output_file::open_base_file): Handle case where
	::read returns less than requested size.

	2011-10-10  Cary Coutant  <ccoutant@@google.com>

	* incremental.cc (Sized_relobj_incr::Sized_relobj_incr):
	Initialize defined_count_.
	(Sized_relobj_incr::do_add_symbols): Count defined symbols.
	(Sized_relobj_incr::do_get_global_symbol_counts): Rewrite.
	(Sized_incr_dynobj::Sized_incr_dynobj): Initialize defined_count_.
	(Sized_incr_dynobj::do_add_symbols): Count defined symbols.
	(Sized_incr_dynobj::do_get_global_symbol_counts): Rewrite.
	* incremental.h (Sized_relobj_incr::defined_count_): New data
	member.
	(Sized_incr_dynobj::defined_count_): New data member.
	* plugin.cc (Sized_pluginobj::do_get_global_symbol_counts):
	Return zeroes instead of internal error.

	2011-10-10  Cary Coutant  <ccoutant@@google.com>

	PR gold/13249
	* output.cc (Output_reloc::Output_reloc): Add use_plt_offset flag.
	(Output_reloc::symbol_value): Return PLT offset if flag is set.
	* output.h (class Output_reloc): Add use_plt_offset flag.
	(Output_reloc::type_): Adjust size of bit field.
	(Output_reloc::use_plt_offset_): New bit field.
	(class Output_data_reloc): Adjust all calls to Output_reloc_type.
	(Output_data_reloc::add_local_relative): (RELA only) Add use_plt_offset
	flag.  Adjust all callers.
	* x86_64.cc (Target_x86_64::Scan::local): Check for IFUNC when
	creating RELATIVE relocations.

	2011-10-03   Diego Novillo  <dnovillo@@google.com>

	* options.cc (parse_uint): Fix dereference of RETVAL.

	2011-09-29  Cary Coutant  <ccoutant@@google.com>

	* incremental.cc (Sized_incremental_binary::do_process_got_plt):
	Check for NULL.
	* symtab.cc (Symbol_table::add_from_relobj): Ignore version
	symbols during incremental update.
	(Symbol_table::add_from_dynobj): Likewise.

	2011-09-26  Cary Coutant  <ccoutant@@google.com>

	* gold.cc (queue_initial_tasks): Move option checks ...
	* options.cc (General_options::finalize): ... to here. Disable
	some options; make others fatal.

	2011-09-23  Simon Baldwin  <simonb@@google.com>

	* configure.ac: Add new --with-gold-ldadd and --with-gold-ldflags
	configuration options.
	* configure: Regenerate.
	* Makefile.am: Handle GOLD_LDADD and GOLD_LDFLAGS.
	* Makefile.in: Regenerate.
	* testsuite/Makefile.in: Regenerate.
@
text
@a793 4
  DEFINE_bool(gnu_unique, options::TWO_DASHES, '\0', true,
	      N_("Enable STB_GNU_UNIQUE symbol binding (default)"),
	      N_("Disable STB_GNU_UNIQUE symbol binding"));

a1387 5
  // Return whether any --section-start option was used.
  bool
  any_section_start() const
  { return !this->section_starts_.empty(); }

@


1.168
log
@	PR gold/12979
	* options.h (class General_options): Add -Bgroup.
	* options.cc (General_options::finalize): If -Bgroup is set,
	default to --unresolved-symbols=report-all.
	* layout.cc (Layout::finish_dynamic_section): Implement -Bgroup.
	* target-reloc.h (issue_undefined_symbol_error): Handle
	--unresolved-symbols=report-all.
@
text
@d745 3
a750 3
  DEFINE_special(EL, options::ONE_DASH, '\0',
		 N_("Link little-endian objects."), NULL);

d930 3
@


1.167
log
@	PR gold/12386
	* options.h (class General_options): Add --unresolved-symbols.
	* target-reloc.h (issue_undefined_symbol_error): Check
	--unresolved-symbols.  Add comments.
@
text
@d646 3
@


1.166
log
@	* incremental.cc (Sized_incremental_binary::do_file_has_changed):
	Check disposition for startup file.
	(Incremental_inputs::report_command_line): Ignore
	--incremental-startup-unchanged option.
	* options.cc (General_options::parse_incremental_startup_unchanged):
	New function.
	(General_options::General_options): Initialize new data member.
	* options.h (Incremental_disposition): Add INCREMENTAL_STARTUP.
	(General_options): Add --incremental-startup-unchanged option.
	(General_options::incremental_startup_disposition): New function.
	(General_options::incremental_startup_disposition_): New data member.
@
text
@d1072 7
@


1.165
log
@	* incremental.cc (Incremental_inputs::report_command_line): Ignore
	--incremental-patch option.
	* layout.cc (Free_list::allocate): Extend allocation beyond original
	end if enabled.
	(Layout::make_output_section): Mark sections that should get
	patch space.
	* options.cc (parse_percent): New function.
	* options.h (parse_percent): New function.
	(DEFINE_percent): New macro.
	(General_options): Add --incremental-patch option.
	* output.cc (Output_section::Output_section): Initialize new data
	members.
	(Output_section::add_input_section): Print section name when out
	of patch space.
	(Output_section::add_output_section_data): Likewise.
	(Output_section::set_final_data_size): Add patch space when
	doing --incremental-full.
	(Output_section::do_reset_address_and_file_offset): Remove patch
	space.
	(Output_segment::set_section_list_addresses): Print debug output
	only if --incremental-update.
	* output.h (Output_section::set_is_patch_space_allowed): New function.
	(Output_section::is_patch_space_allowed_): New data member.
	(Output_section::patch_space_): New data member.
	* parameters.cc (Parameters::incremental_full): New function.
	* parameters.h (Parameters::incremental_full): New function
	* testsuite/Makefile.am (incremental_test_2): Add test for
	--incremental-patch option.
	* testsuite/Makefile.in: Regenerate.
	* testsuite/two_file_test_1_v1.cc (t1, t2, t3): Add comments.
	(t18): Remove function body.
@
text
@d66 5
d830 4
d1354 6
d1477 3
d1481 2
a1482 2
  // build (--incremental-changed, --incremental-unchanged or
  // --incremental-unknown)
@


1.164
log
@	PR gold/12957
	* options.h (class General_options): Add -f and -F.
	* options.cc (General_options::finalize): Fatal error if -f/-F
	are used without -shared.
	* layout.cc (Layout::finish_dynamic_section): Implement -f/-F.
@
text
@d101 3
d378 6
d825 4
@


1.163
log
@	PR gold/12525
	* options.h (class General_options): Support -z notext.
	* testsuite/Makefile.am (two_file_shared_1_nonpic.so): Use
	-Wl,-z,notext.
	(two_file_shared_nonpic.so): Likewise.
	(two_file_shared_mixed.so): Likewise.
	(two_file_shared_mixed_1.so): Likewise.
	(weak_undef_lib_nonpic.so): Likewise.
	(alt/weak_undef_lib_nonpic.so): Likewise.
	(tls_test_shared_nonpic.so): Likewise.
	* testsuite/Makefile.in: Rebuild.
@
text
@d738 8
@


1.162
log
@	PR gold/12571
	* options.h (class General_options): Add
	--ld-generated-unwind-info.
	* ehframe.cc (Fde::write): Add address parameter.  Change all
	callers.  If associated with PLT, fill in address and size.
	(Cie::set_output_offset): Only add merge mapping if there is an
	object.
	(Cie::write): Add address parameter.  Change all callers.
	(Eh_frame::add_ehframe_for_plt): New function.
	* ehframe.h (class Fde): Update declarations.  Move shndx_ and
	input_offset_ fields into union u_, with new plt field.
	(Fde::Fde): Adjust for new union field.
	(Fde::Fde) [Output_data version]: New constructor.
	(Fde::add_mapping): Only add merge mapping if there is an object.
	(class Cie): Update declarations.
	(class Eh_frame): Declare add_ehframe_for_plt.
	* layout.cc (Layout::layout_eh_frame): Break out code into
	make_eh_frame_section, and call it.
	(Layout::make_eh_frame_section): New function.
	(Layout::add_eh_frame_for_plt): New function.
	* layout.h (class Layout): Update declarations.
	* merge.cc (Merge_map::add_mapping): Add assertion.
	* i386.cc: Include "dwarf.h".
	(class Output_data_plt_i386): Make first_plt_entry,
	dyn_first_plt_entry, exec_plt_entry, and dyn_plt_entry const.  Add
	plt_eh_frame_cie_size, plt_eh_frame_fde_size, plt_eh_frame_cie,
	and plt_eh_frame_fde.
	(Output_data_plt_i386::Output_data_plt_i386): Align to 16-byte
	boundary.  Call add_eh_frame_for_plt if appropriate.
	* x86_64.cc: Include "dwarf.h".
	(class Output_data_plt_x86_64): Align to 16-byte boundary.  Make
	first_plt_entry, plt_entry and tlsdesc_plt_entry const.  Add
	plt_eh_frame_cie_size, plt_eh_frame_fde_size, plt_eh_frame_cie,
	and plt_eh_frame_fde.
	(Output_data_plt_x86_64::init): Call add_eh_frame_for_plt if
	appropriate.
@
text
@d1173 1
a1173 1
	      NULL);
@


1.161
log
@	PR gold/12934
	* target-select.cc (Target_selector::Target_selector): Add
	emulation parameter.  Change all callers.
	(select_target_by_bfd_name): Rename from select_target_by_name.
	Change all callers.
	(select_target_by_emulation): New function.
	(supported_emulation_names): New function.
	* target-select.h (class Target_selector): Add emulation_ field.
	Update declarations.
	(Target_selector::recognize_by_bfd_name): Rename from
	recognize_by_name.  Change all callers.
	(Target_selector::supported_bfd_names): Rename from
	supported_names.  Change all callers.
	(Target_selector::recognize_by_emulation): New function.
	(Target_selector::supported_emulations): New function.
	(Target_selector::emulation): New function.
	(Target_selector::do_recognize_by_bfd_name): Rename from
	do_recognize_by_name.  Change all callers.
	(Target_selector::do_supported_bfd_names): Rename from
	do_supported_names.  Change all callers.
	(Target_selector::do_recognize_by_emulation): New function.
	(Target_selector::do_supported_emulations): New function.
	(select_target_by_bfd_name): Change name in declaration.
	(select_target_by_emulation): Declare.
	(supported_emulation_names): Declare.
	* parameters.cc (parameters_force_valid_target): Try to find
	target based on emulation from -m option.
	* options.h (class General_options): Change doc string for -m.
	* options.cc (help): Print emulations.
	(General_options::parse_V): Likewise.
	* freebsd.h (Target_selector_freebsd::Target_selector_freebsd):
	Add emulation parameter.  Change all callers.
@
text
@d823 4
@


1.160
log
@	PR gold/12910
	* options.h (class General_options): Add --ctors-in-init-array.
	* layout.cc (Layout::get_output_section): Treat SHT_INIT_ARRAY and
	friends as SHT_PROGBITS for merging sections.
	(Layout::layout): Remove special handling of .init_array and
	friends.  Don't sort if doing relocatable link.  Sort for .ctors
	and .dtors if ctors_in_init_array.
	(Layout::make_output_section): Force correct section types for
	.init_array and friends.  Don't sort if doing relocatable link,
	Don't sort .ctors and .dtors if ctors_in_init_array.
	(Layout::section_name_mapping): Remove .ctors. and .dtorso.
	(Layout::output_section_name): Add relobj parameter.  Change all
	callers.  Handle .ctors. and .dtors. in code rather than table.
	Handle .ctors and .dtors if ctors_in_init_array.
	(Layout::match_file_name): New function, moved from output.cc.
	* layout.h (class Layout): Update declarations.
	* output.cc: Include "layout.h".
	(Input_section_sort_entry::get_priority): New function.
	(Input_section_sort_entry::match_file_name): Just call
	Layout::match_file_name.
	(Output_section::Input_section_sort_init_fini_compare::operator()):
	Handle .ctors and .dtors.  Sort by explicit priority rather than
	by name.
	* configure.ac: Remove CONSTRUCTOR_PRIORITY test and conditional.
	* testsuite/initpri2.c: New test.
	* testsuite/Makefile.am: Don't test CONSTRUCTOR_PRIORITY.
	(check_PROGRAMS): Add initpri2.
	(initpri2_SOURCES, initpri2_DEPENDENCIES): New variables.
	(initpri2_LDFLAGS, initpri2_LDADD): New variables.
	* configure, testsuite/Makefile.in: Rebuild.
@
text
@d838 1
a838 1
                N_("Ignored for compatibility"), N_("EMULATION"));
@


1.159
log
@	* gold.cc (queue_initial_tasks): Pass incremental base filename
	to Output_file::open_base_file; don't print error message.
	* incremental-dump.cc (main): Adjust call to
	Output_file::open_for_modification.
	* incremental-dump.cc (main): Likewise.
	* incremental.cc (Incremental_inputs::report_command_line):
	Ignore --incremental-base option when comparing command lines.
	Ignore parameter when given as separate argument.
	* options.h (class General_options): Add --incremental-base.
	* output.cc (Output_file::Output_file):
	(Output_file::open_base_file): Add base_name and writable parameters;
	read base file into new file; print error message here.
	(Output_file::map_no_anonymous): Add writable parameter; adjust all
	callers.
	* output.h (Output_file::open_for_modification): Rename to...
	(Output_file::open_base_file): ...this; add base_name and
	writable parameters; adjust all callers.
	(Output_file::map_no_anonymous): Add writable parameter; adjust all
	callers.
	* testsuite/Makefile.am (incremental_test_4): Test
	--incremental-base.
	* testsuite/Makefile.in: Regenerate.
@
text
@d3 1
a3 1
// Copyright 2006, 2007, 2008, 2009, 2010 Free Software Foundation, Inc.
d666 4
@


1.158
log
@	* options.h (class General_options): Make -i a synonym for -r.
@
text
@d790 5
@


1.157
log
@	* archive.cc (Archive::include_member): Adjust call to
	report_object.
	(Add_archive_symbols::run): Track argument serial numbers.
	(Lib_group::include_member): Likewise.
	(Add_lib_group_symbols::run): Adjust call to report_archive_begin.
	* archive.h (Incremental_archive_entry::Archive_member):
	Initialize arg_serial_.
	(Archive_member::arg_serial_): New data member.
	* dynobj.cc (Dynobj::Dynobj): Allow input_file_ to be NULL.
	(Sized_dynobj::do_add_symbols): Track symbols when doing an
	incremental link.
	(Sized_dynobj::do_for_all_local_got_entries): New function.
	* dynobj.h: (Sized_dynobj::do_for_all_local_got_entries): New
	function.
	* fileread.cc (get_mtime): New function.
	* fileread.h (get_mtime): New function.
	* gold.cc (queue_initial_tasks): Check for incremental update.
	(process_incremental_input): New function.
	(queue_middle_tasks): Don't force valid target for incremental
	update.
	* incremental-dump.cc (find_input_containing_global): Adjust
	size of symbol info entry.
	(dump_incremental_inputs): Dump argument serial number and
	in_system_directory flag; bias shndx by 1; print symbol names
	when dumping per-file symbol lists; use new symbol info readers.
	* incremental.cc
	(Output_section_incremental_inputs:update_data_size): New function.
	(Sized_incremental_binary::setup_readers): Setup input readers
	for each input file; build maps for files added from libraries
	and scripts.
	(Sized_incremental_binary::check_input_args): New function.
	(Sized_incremental_binary::do_check_inputs): Build map of argument
	serial numbers to input arguments.
	(Sized_incremental_binary::do_file_has_changed): Rename
	do_file_is_unchanged to this; compare file modification times.
	(Sized_incremental_binary::do_init_layout): New function.
	(Sized_incremental_binary::do_reserve_layout): New function.
	(Sized_incremental_binary::do_get_input_reader): Remove.
	(Sized_incremental_binary::get_symtab_view): New function.
	(Incremental_checker::can_incrementally_link_output_file): Remove.
	(Incremental_inputs::report_command_line): Exclude --debug options.
	(Incremental_inputs::report_archive_begin): Add parameter; track
	argument serial numbers; don't put input file entry for archive
	before archive members.
	(Incremental_inputs::report_archive_end): Put input file entry
	for archive after archive members.
	(Incremental_inputs::report_object): Add parameter; track argument
	serial numbers and in_system_directory flag.
	(Incremental_inputs::report_script): Add parameter; track argument
	serial numbers.
	(Output_section_incremental_inputs::set_final_data_size): Adjust
	size of symbol info entry; check for forwarding symbols.
	(Output_section_incremental_inputs::write_input_files): Write
	in_system_directory flag and argument serial number.
	(Output_section_incremental_inputs::write_info_blocks): Map section
	indices between incremental info and original input file; store
	input section index for each symbol.
	(class Local_got_offset_visitor): Derive from Got_offset_list::Visitor;
	change operator() to visit().
	(class Global_got_offset_visitor): Likewise.
	(class Global_symbol_visitor_got_plt):
	(Output_section_incremental_inputs::write_got_plt): Use new visitor
	classes.
	(Sized_incr_relobj::Sized_incr_relobj): New constructor.
	(Sized_incr_relobj::do_read_symbols): New function.
	(Sized_incr_relobj::do_layout): New function.
	(Sized_incr_relobj::do_layout_deferred_sections): New function.
	(Sized_incr_relobj::do_add_symbols): New function.
	(Sized_incr_relobj::do_should_include_member): New function.
	(Sized_incr_relobj::do_for_all_global_symbols): New function.
	(Sized_incr_relobj::do_for_all_local_got_entries): New function.
	(Sized_incr_relobj::do_section_size): New function.
	(Sized_incr_relobj::do_section_name): New function.
	(Sized_incr_relobj::do_section_contents): New function.
	(Sized_incr_relobj::do_section_flags): New function.
	(Sized_incr_relobj::do_section_entsize): New function.
	(Sized_incr_relobj::do_section_address): New function.
	(Sized_incr_relobj::do_section_type): New function.
	(Sized_incr_relobj::do_section_link): New function.
	(Sized_incr_relobj::do_section_info): New function.
	(Sized_incr_relobj::do_section_addralign): New function.
	(Sized_incr_relobj::do_initialize_xindex): New function.
	(Sized_incr_relobj::do_get_global_symbol_counts): New function.
	(Sized_incr_relobj::do_read_relocs): New function.
	(Sized_incr_relobj::do_gc_process_relocs): New function.
	(Sized_incr_relobj::do_scan_relocs): New function.
	(Sized_incr_relobj::do_count_local_symbols): New function.
	(Sized_incr_relobj::do_finalize_local_symbols): New function.
	(Sized_incr_relobj::do_set_local_dynsym_indexes): New function.
	(Sized_incr_relobj::do_set_local_dynsym_offset): New function.
	(Sized_incr_relobj::do_relocate): New function.
	(Sized_incr_relobj::do_set_section_offset): New function.
	(Sized_incr_dynobj::Sized_incr_dynobj): New function.
	(Sized_incr_dynobj::do_read_symbols): New function.
	(Sized_incr_dynobj::do_layout): New function.
	(Sized_incr_dynobj::do_add_symbols): New function.
	(Sized_incr_dynobj::do_should_include_member): New function.
	(Sized_incr_dynobj::do_for_all_global_symbols): New function.
	(Sized_incr_dynobj::do_for_all_local_got_entries): New function.
	(Sized_incr_dynobj::do_section_size): New function.
	(Sized_incr_dynobj::do_section_name): New function.
	(Sized_incr_dynobj::do_section_contents): New function.
	(Sized_incr_dynobj::do_section_flags): New function.
	(Sized_incr_dynobj::do_section_entsize): New function.
	(Sized_incr_dynobj::do_section_address): New function.
	(Sized_incr_dynobj::do_section_type): New function.
	(Sized_incr_dynobj::do_section_link): New function.
	(Sized_incr_dynobj::do_section_info): New function.
	(Sized_incr_dynobj::do_section_addralign): New function.
	(Sized_incr_dynobj::do_initialize_xindex): New function.
	(Sized_incr_dynobj::do_get_global_symbol_counts): New function.
	(make_sized_incremental_object): New function.
	(Incremental_library::copy_unused_symbols): New function.
	(Incremental_library::do_for_all_unused_symbols): New function.
	* incremental.h (enum Incremental_input_flags): New type.
	(class Incremental_checker): Remove.
	(Incremental_input_entry::Incremental_input_entry): Add argument
	serial number.
	(Incremental_input_entry::arg_serial): New function.
	(Incremental_input_entry::set_is_in_system_directory): New function.
	(Incremental_input_entry::is_in_system_directory): New function.
	(Incremental_input_entry::arg_serial_): New data member.
	(Incremental_input_entry::is_in_system_directory_): New data member.
	(class Script_info): Move here from script.h.
	(Script_info::Script_info): Add filename parameter.
	(Script_info::filename): New function.
	(Script_info::filename_): New data member.
	(Incremental_script_entry::Incremental_script_entry): Add argument
	serial number.
	(Incremental_object_entry::Incremental_object_entry): Likewise.
	(Incremental_object_entry::add_input_section): Build list of input
	sections with map to original shndx.
	(Incremental_object_entry::get_input_section_index): New function.
	(Incremental_object_entry::shndx_): New data member.
	(Incremental_object_entry::name_key_): Rename; adjust all refs.
	(Incremental_object_entry::sh_size_): Rename; adjust all refs.
	(Incremental_archive_entry::Incremental_archive_entry): Add argument
	serial number.
	(Incremental_inputs::report_archive_begin): Likewise.
	(Incremental_inputs::report_object): Likewise.
	(Incremental_inputs::report_script): Likewise.
	(class Incremental_global_symbol_reader): New class.
	(Incremental_input_entry_reader::Incremental_input_entry_reader): Read
	and store flags and input file type.
	(Incremental_input_entry_reader::arg_serial): New function.
	(Incremental_input_entry_reader::type): Extract type from flags.
	(Incremental_input_entry_reader::is_in_system_directory): New function.
	(Incremental_input_entry_reader::get_input_section_count): Call
	accessor function for type.
	(Incremental_input_entry_reader::get_symbol_offset): Call accessor
	function for type; adjust size of global symbol entry.
	(Incremental_input_entry_reader::get_global_symbol_count): Call
	accessor function for type.
	(Incremental_input_entry_reader::get_object_count): Likewise.
	(Incremental_input_entry_reader::get_object_offset): Likewise.
	(Incremental_input_entry_reader::get_member_count): Likewise.
	(Incremental_input_entry_reader::get_unused_symbol_count): Likewise.
	(Incremental_input_entry_reader::get_member_offset): Likewise.
	(Incremental_input_entry_reader::get_unused_symbol): Likewise.
	(Incremental_input_entry_reader::Global_symbol_info): Remove.
	(Incremental_input_entry_reader::get_global_symbol_info): Remove.
	(Incremental_input_entry_reader::get_global_symbol_reader): New
	function.
	(Incremental_input_entry_reader::get_output_symbol_index): New
	function.
	(Incremental_input_entry_reader::type_): Remove.
	(Incremental_input_entry_reader::flags_): New data member.
	(Incremental_inputs_reader::input_file_offset): New function.
	(Incremental_inputs_reader::input_file_index): New function.
	(Incremental_inputs_reader::input_file): Call input_file_offset.
	(Incremental_inputs_reader::input_file_at_offset): New function.
	(Incremental_relocs_reader::get_r_type): Reformat.
	(Incremental_relocs_reader::get_r_shndx): Reformat.
	(Incremental_relocs_reader::get_r_offset): Reformat.
	(Incremental_relocs_reader::data): New function.
	(Incremental_binary::Incremental_binary): Initialize new data members.
	(Incremental_binary::check_inputs): Add cmdline parameter.
	(Incremental_binary::file_is_unchanged): Remove.
	(Input_reader::arg_serial): New function.
	(Input_reader::get_unused_symbol_count): New function.
	(Input_reader::get_unused_symbol): New function.
	(Input_reader::do_arg_serial): New function.
	(Input_reader::do_get_unused_symbol_count): New function.
	(Input_reader::do_get_unused_symbol): New function.
	(Incremental_binary::input_file_count): New function.
	(Incremental_binary::get_input_reader): Change signature to use
	index instead of filename.
	(Incremental_binary::file_has_changed): New function.
	(Incremental_binary::get_input_argument): New function.
	(Incremental_binary::get_library): New function.
	(Incremental_binary::get_script_info): New function.
	(Incremental_binary::init_layout): New function.
	(Incremental_binary::reserve_layout): New function.
	(Incremental_binary::output_file): New function.
	(Incremental_binary::do_check_inputs): New function.
	(Incremental_binary::do_file_is_unchanged): Remove.
	(Incremental_binary::do_file_has_changed): New function.
	(Incremental_binary::do_init_layout): New function.
	(Incremental_binary::do_reserve_layout): New function.
	(Incremental_binary::do_input_file_count): New function.
	(Incremental_binary::do_get_input_reader): Change signature.
	(Incremental_binary::input_args_map_): New data member.
	(Incremental_binary::library_map_): New data member.
	(Incremental_binary::script_map_): New data member.
	(Sized_incremental_binary::Sized_incremental_binary): Initialize
	new data members.
	(Sized_incremental_binary::output_section): New function.
	(Sized_incremental_binary::inputs_reader): Add const.
	(Sized_incremental_binary::symtab_reader): Add const.
	(Sized_incremental_binary::relocs_reader): Add const.
	(Sized_incremental_binary::got_plt_reader): Add const.
	(Sized_incremental_binary::get_symtab_view): New function.
	(Sized_incremental_binary::Inputs_reader): New typedef.
	(Sized_incremental_binary::Input_entry_reader): New typedef.
	(Sized_incremental_binary::do_check_inputs): Add cmdline parameter.
	(Sized_incremental_binary::do_file_is_unchanged): Remove.
	(Sized_incremental_binary::do_file_has_changed): New function.
	(Sized_incremental_binary::do_init_layout): New function.
	(Sized_incremental_binary::do_reserve_layout): New function.
	(Sized_input_reader::Inputs_reader): Remove.
	(Sized_input_reader::Input_entry_reader): Remove.
	(Sized_input_reader::do_arg_serial): New function.
	(Sized_input_reader::do_get_unused_symbol_count): New function.
	(Sized_input_reader::do_get_unused_symbol): New function.
	(Sized_incremental_binary::do_input_file_count): New function.
	(Sized_incremental_binary::do_get_input_reader): Change signature;
	use index instead of filename.
	(Sized_incremental_binary::section_map_): New data member.
	(Sized_incremental_binary::input_entry_readers_): New data member.
	(class Sized_incr_relobj): New class.
	(class Sized_incr_dynobj): New class.
	(make_sized_incremental_object): New function.
	(class Incremental_library): New class.
	* layout.cc (Free_list::num_lists): New static data member.
	(Free_list::num_nodes): New static data member.
	(Free_list::num_removes): New static data member.
	(Free_list::num_remove_visits): New static data member.
	(Free_list::num_allocates): New static data member.
	(Free_list::num_allocate_visits): New static data member.
	(Free_list::init): New function.
	(Free_list::remove): New function.
	(Free_list::allocate): New function.
	(Free_list::dump): New function.
	(Free_list::print_stats): New function.
	(Layout_task_runner::run): Resize output file for incremental updates.
	(Layout::Layout): Initialize new data members.
	(Layout::set_incremental_base): New function.
	(Layout::init_fixed_output_section): New function.
	(Layout::layout_eh_frame): Do not build .eh_frame_hdr section for
	incremental updates.
	(Layout::create_gold_note): Do not create gold note section for
	incremental updates.
	(Layout::set_segment_offsets): Do not recalculate RELRO alignment
	for incremental updates.
	(Layout::set_section_offsets): For incremental updates, allocate space
	from free list.
	(Layout::create_symtab_sections): Layout with offsets relative to
	start of section; for incremental updates, allocate space from free
	list.
	(Layout::create_shdrs): For incremental updates, allocate space from
	free list.
	(Layout::finish_dynamic_section): For incremental updates, do not
	check --as-needed (fixed in subsequent patch).
	* layout.h (class Free_list): New class.
	(Layout::set_incremental_base): New function.
	(Layout::incremental_base): New function.
	(Layout::init_fixed_output_section): New function.
	(Layout::allocate): New function.
	(Layout::incremental_base_): New data member.
	(Layout::free_list_): New data member.
	* main.cc (main): Print Free_list statistics.
	* object.cc (Relobj::finalize_incremental_relocs): Add
	clear_counts parameter; clear counts only when clear_counts is set.
	(Sized_relobj::Sized_relobj): Initialize new base class.
	(Sized_relobj::do_layout): Don't report special sections.
	(Sized_relobj::do_for_all_local_got_entries): New function.
	(Sized_relobj::write_local_symbols): Add symtab_off parameter; add
	symtab_off to all symbol table offsets.
	(Sized_relobj::do_get_global_symbol_counts): Add typename keyword.
	* object.h (class Got_offset_list): Move to top of file.
	(Object::Object): Allow case where input_file == NULL.
	(Object::~Object): Likewise.
	(Object::input_file): Assert that input_file != NULL.
	(Object::lock): Allow case where input_file == NULL.
	(Object::unlock): Likewise.
	(Object::is_locked): Likewise.
	(Object::token): Likewise.
	(Object::release): Likewise.
	(Object::is_incremental): New function.
	(Object::get_mtime): New function.
	(Object::for_all_local_got_entries): New function.
	(Object::clear_view_cache_marks): Allow case where input_file == NULL.
	(Object::set_is_in_system_directory): New function.
	(Object::is_in_system_directory): New function.
	(Object::do_is_incremental): New function.
	(Object::do_get_mtime): New function.
	(Object::do_for_all_local_got_entries): New function.
	(Object::is_in_system_directory_): New data member.
	(Relobj::finalize_incremental_relocs): Add clear_counts parameter.
	(class Sized_relobj_base): New class.
	(class Sized_relobj): Derive from Sized_relobj_base.
	(class Sized_relobj::Symbols): Redeclare from base class.
	(class Sized_relobj::local_got_offset_list): Remove.
	(class Sized_relobj::Output_sections): Redeclare from base class.
	(class Sized_relobj::do_for_all_local_got_entries): New function.
	(class Sized_relobj::write_local_symbols): Add offset parameter.
	(class Sized_relobj::local_symbol_offset_): Update comment.
	(class Sized_relobj::local_dynsym_offset_): Update comment.
	* options.cc (Input_arguments::add_file): Remove const.
	* options.h (Input_file_argument::Input_file_argument):
	Initialize arg_serial_ (all constructors).
	(Input_file_argument::set_arg_serial): New function.
	(Input_file_argument::arg_serial): New function.
	(Input_file_argument::arg_serial_): New data member.
	(Input_arguments::Input_arguments): Initialize file_count_.
	(Input_arguments::add_file): Remove const.
	(Input_arguments::number_of_input_files): New function.
	(Input_arguments::file_count_): New data member.
	(Command_line::number_of_input_files): Call
	Input_arguments::number_of_input_files.
	* output.cc (Output_segment_headers::Output_segment_headers):
	Set current size.
	(Output_section::Input_section::current_data_size): New function.
	(Output_section::Output_section): Initialize new data members.
	(Output_section::add_input_section): Don't do merge sections for
	an incremental link; allocate space from free list for an
	incremental update.
	(Output_section::add_output_section_data): Allocate space from
	free list for an incremental update.
	(Output_section::update_data_size): New function.
	(Output_section::set_fixed_layout): New function.
	(Output_section::reserve): New function.
	(Output_segment::set_section_addresses): Remove const.
	(Output_segment::set_section_list_addresses): Remove const; allocate
	space from free list for an incremental update.
	(Output_segment::set_offset): Adjust size of RELRO segment for an
	incremental update.
	* output.h (Output_data::current_data_size): Move here from
	child classes.
	(Output_data::pre_finalize_data_size): New function.
	(Output_data::update_data_size): New function.
	(Output_section_headers::update_data_size): new function.
	(Output_section_data_build::current_data_size): Move to Output_data.
	(Output_data_strtab::update_data_size): New function.
	(Output_section::current_data_size): Move to Output_data.
	(Output_section::set_fixed_layout): New function.
	(Output_section::has_fixed_layout): New function.
	(Output_section::reserve): New function.
	(Output_section::update_data_size): New function.
	(Output_section::has_fixed_layout_): New data member.
	(Output_section::free_list_): New data member.
	(Output_segment::set_section_addresses): Remove const.
	(Output_segment::set_section_list_addresses): Remove const.
	* plugin.cc (Sized_pluginobj::do_for_all_local_got_entries):
	New function.
	* plugin.h (Sized_pluginobj::do_for_all_local_got_entries):
	New function.
	* readsyms.cc (Read_symbols::do_read_symbols): Add library
	parameter when calling Add_symbols constructor; store argument
	serial number for members of a lib group.
	(Add_symbols::locks): Allow case where token == NULL.
	(Add_symbols::run): Report libraries denoted by --start-lib/--end-lib.
	(Read_member::~Read_member): New function.
	(Read_member::is_runnable): New function.
	(Read_member::locks): New function.
	(Read_member::run): New function.
	(Check_script::~Check_script): New function.
	(Check_script::is_runnable): New function.
	(Check_script::locks): New function.
	(Check_script::run): New function.
	(Check_library::~Check_library): New function.
	(Check_library::is_runnable): New function.
	(Check_library::locks): New function.
	(Check_library::run): New function.
	* readsyms.h (Add_symbols::Add_symbols): Add library parameter.
	(Add_symbols::library_): New data member.
	(class Read_member): New class.
	(class Check_script): New class.
	(class Check_library): New class.
	* reloc.cc (Read_relocs::is_runnable): Allow case where
	token == NULL.
	(Read_relocs::locks): Likewise.
	(Scan_relocs::locks): Likewise.
	(Relocate_task::locks): Likewise.
	(Sized_relobj::do_scan_relocs): Tell finalize_incremental_relocs
	to clear counters.
	(Sized_relobj::incremental_relocs_scan): Fix comment.
	(Sized_relobj::do_relocate): Pass output file offset to
	write_local_symbols.
	(Sized_relobj::incremental_relocs_write_reltype): Use reloc_size
	from class declaration.
	* script.cc (read_input_script): Allocate Script_info; pass
	argument serial number to report_script.
	* script.h (class Script_info): Move to incremental.h.
	* symtab.cc (Symbol_table::add_from_incrobj): New function.
	* symtab.h (Symbol_table::add_from_incrobj): New function.
	(Symbol_table::set_file_offset): New function.
@
text
@a763 3
  DEFINE_bool(i, options::EXACTLY_ONE_DASH, '\0', false,
	      N_("Ignored"), NULL);

d896 2
@


1.156
log
@	* archive.cc (Archive::include_member): Adjust call to report_object.
	(Add_archive_symbols::run): Add script_info to call to
	report_archive_begin.
	(Lib_group::include_member): Adjust call to report_object.
	(Add_lib_group_symbols::run): Adjust call to report_object.
	* incremental-dump.cc (dump_incremental_inputs): Remove unnecessary
	blocks.  Add object count for script input files.
	* incremental.cc (Incremental_inputs::report_archive_begin): Add
	script_info parameter; change all callers.
	(Incremental_inputs::report_object): Add script_info parameter;
	change all callers.
	(Incremental_inputs::report_script): Store backpointer to
	incremental info entry.
	(Output_section_incremental_inputs::set_final_data_size): Record
	additional information for scripts.
	(Output_section_incremental_inputs::write_info_blocks): Likewise.
	* incremental.h (Incremental_script_entry::add_object): New function.
	(Incremental_script_entry::get_object_count): New function.
	(Incremental_script_entry::get_object): New function.
	(Incremental_script_entry::objects_): New data member; adjust
	constructor.
	(Incremental_inputs::report_archive_begin): Add script_info parameter.
	(Incremental_inputs::report_object): Add script_info parameter.
	(Incremental_inputs_reader::get_object_count): New function.
	(Incremental_inputs_reader::get_object_offset): New function.
	* options.cc (Input_arguments::add_file): Return reference to
	new input argument.
	* options.h (Input_argument::set_script_info): New function.
	(Input_argument::script_info): New function.
	(Input_argument::script_info_): New data member; adjust all
	constructors.
	(Input_file_group::add_file): Return reference to new input argument.
	(Input_file_lib::add_file): Likewise.
	(Input_arguments::add_file): Likewise.
	* readsyms.cc (Add_symbols::run): Adjust call to report_object.
	* script.cc (Parser_closure::Parser_closure): Add script_info
	parameter; adjust all callers.
	(Parser_closure::script_info): New function.
	(Parser_closure::script_info_): New data member.
	(read_input_script): Report scripts earlier to incremental info.
	(script_add_file): Set script_info in Input_argument.
	(script_add_library): Likewise.
	* script.h (Script_options::Script_info): Rewrite class.
@
text
@d60 1
d1523 1
a1523 1
      just_symbols_(false), options_()
d1531 1
a1531 1
      just_symbols_(just_symbols), options_(options)
d1543 1
a1543 1
      just_symbols_(just_symbols), options_(options)
d1585 10
d1604 2
d1788 1
a1788 1
    : input_argument_list_(), in_group_(false), in_lib_(false)
d1793 1
a1793 1
  add_file(const Input_file_argument& arg);
d1841 7
d1852 1
d1909 1
a1909 1
  { return this->inputs_.size(); }
@


1.155
log
@	PR gold/12525
	* options.h (class General_options): Add -dy and -dn.
@
text
@d1602 1
a1602 1
    : is_file_(true), file_(file), group_(NULL), lib_(NULL)
d1607 1
a1607 1
    : is_file_(false), group_(group), lib_(NULL)
d1612 1
a1612 1
    : is_file_(false), group_(NULL), lib_(lib)
d1670 10
d1685 1
d1703 1
a1703 1
  void
d1705 4
a1708 1
  { this->files_.push_back(Input_argument(arg)); }
d1737 1
a1737 1
  void
d1739 4
a1742 1
  { this->files_.push_back(Input_argument(arg)); }
d1779 1
a1779 1
  void
@


1.154
log
@	* options.h (class General_options): Accept
	--no-detect-odr-violations.
@
text
@d626 4
@


1.153
log
@	* layout.cc (Layout::layout_gnu_stack): Add warnings for executable
	stack.
	* layout.h (Layout::layout_gnu_stack): Add pointer to Object
	parameter; change all callers.
	* object.cc (Sized_relobj::do_layout): Adjust call to layout_gnu_stack.
	* options.h (warn_execstack): New option.
@
text
@d685 2
a686 2
              N_("Try to detect violations of the One Definition Rule"),
              NULL);
@


1.152
log
@	* debug.h (DEBUG_INCREMENTAL): New flag.
	(debug_string_to_enum): Add DEBUG_INCREMENTAL).
	* gold.cc (queue_initial_tasks): Check parameters for incremental link
	mode.
	* incremental.cc (report_command_line): Ignore all forms of
	--incremental.
	* layout.cc (Layout::Layout): Check parameters for incremental link
	mode.
	* options.cc (General_options::parse_incremental): New function.
	(General_options::parse_no_incremental): New function.
	(General_options::parse_incremental_full): New function.
	(General_options::parse_incremental_update): New function.
	(General_options::incremental_mode_): New data member.
	(General_options::finalize): Check incremental_mode_.
	* options.h (General_options): Update help text for --incremental.
	Add --no-incremental, --incremental-full, --incremental-update.
	(General_options::Incremental_mode): New enum type.
	(General_options::incremental_mode): New function.
	(General_options::incremental_mode_): New data member.
	* parameters.cc (Parameters::incremental_mode_): New data member.
	(Parameters::set_options): Set incremental_mode_.
	(Parameters::set_incremental_full): New function.
	(Parameters::incremental): New function.
	(Parameters::incremental_update): New function.
	(set_parameters_incremental_full): New function.
	* parameters.h (Parameters::set_incremental_full): New function.
	(Parameters::incremental): New function.
	(Parameters::incremental_update): New function.
	(Parameters::incremental_mode_): New data member.
	(set_parameters_incremental_full): New function.
	* plugin.cc (Plugin_manager::add_input_file): Check parameters for
	incremental link mode.
	* reloc.cc (Sized_relobj::do_read_relocs): Likewise.
	(Sized_relobj::do_relocate_sections): Likewise.
	* testsuite/Makefile.am (incremental_test): Use --incremental-full
	option.
	* testsuite/Makefile.in: Regenerate.
	* testsuite/incremental_test.sh: Filter all forms of --incremental.
@
text
@d1038 4
@


1.152.2.1
log
@	PR gold/12525
	* options.h (class General_options): Add -dy and -dn.
@
text
@a625 4
  DEFINE_bool_alias(dy, Bdynamic, options::ONE_DASH, '\0',
		    N_("alias for -Bdynamic"), NULL, false);
  DEFINE_bool_alias(dn, Bdynamic, options::ONE_DASH, '\0',
		    N_("alias for -Bstatic"), NULL, true);
@


1.151
log
@	* options.h (class General_options): Redefine -z lazy as an alias for
	the negation of -z now.
@
text
@d773 14
a786 3
  DEFINE_bool(incremental, options::TWO_DASHES, '\0', false,
              N_("Work in progress; do not use"),
              N_("Do a full build"));
d1277 19
d1414 2
@


1.150
log
@2010-09-09  Rafael Espindola  <espindola@@google.com>

	* layout.cc (Layout::attach_allocated_section_to_segment): Don't put
	sections with different PF_X flags in the same segment.
	(Layout::find_first_load_seg): Search all segments to find the first
	one.
	* options.h (rosegment): New.
@
text
@d1100 3
a1102 3
  DEFINE_bool(lazy, options::DASH_Z, '\0', false,
	      N_("Mark object for lazy runtime binding (default)"),
	      NULL);
@


1.149
log
@        * archive.cc: Formatting fixes: Remove whitespace between
        typename and following asterisk.  Remove whitespace between
        function name and opening parenthesis.
        * archive.h: Likewise.
        * arm.cc: Likewise.
        * attributes.cc: Likewise.
        * attributes.h: Likewise.
        * common.cc: Likewise.
        * copy-relocs.cc: Likewise.
        * dirsearch.h: Likewise.
        * dynobj.cc: Likewise.
        * ehframe.cc: Likewise.
        * ehframe.h: Likewise.
        * expression.cc: Likewise.
        * fileread.cc: Likewise.
        * fileread.h: Likewise.
        * gc.h: Likewise.
        * gold-threads.cc: Likewise.
        * gold.cc: Likewise.
        * i386.cc: Likewise.
        * icf.h: Likewise.
        * incremental-dump.cc: Likewise.
        * incremental.cc: Likewise.
        * layout.cc: Likewise.
        * layout.h: Likewise.
        * main.cc: Likewise.
        * merge.cc: Likewise.
        * merge.h: Likewise.
        * object.cc: Likewise.
        * object.h: Likewise.
        * options.cc: Likewise.
        * options.h: Likewise.
        * output.cc: Likewise.
        * output.h: Likewise.
        * plugin.cc: Likewise.
        * plugin.h: Likewise.
        * powerpc.cc: Likewise.
        * reloc.cc: Likewise.
        * script-c.h: Likewise.
        * script-sections.cc: Likewise.
        * script.cc: Likewise.
        * stringpool.cc: Likewise.
        * symtab.cc: Likewise.
        * symtab.h: Likewise.
        * target.cc: Likewise.
        * timer.cc: Likewise.
        * timer.h: Likewise.
        * version.cc: Likewise.
        * x86_64.cc: Likewise.
@
text
@d811 4
@


1.148
log
@Index: gold/arm.cc
===================================================================
RCS file: /cvs/src/src/gold/arm.cc,v
retrieving revision 1.116
diff -u -u -p -r1.116 arm.cc
--- gold/arm.cc	3 Aug 2010 14:07:12 -0000	1.116
+++ gold/arm.cc	6 Aug 2010 07:59:30 -0000
@@@@ -10290,11 +10290,11 @@@@ Target_arm<big_endian>::merge_object_att
 	    out_attr[i].set_int_value(in_attr[i].int_value());
 	  break;
 	case elfcpp::Tag_ABI_PCS_wchar_t:
-	  // FIXME: Make it possible to turn off this warning.
 	  if (out_attr[i].int_value()
 	      && in_attr[i].int_value()
 	      && out_attr[i].int_value() != in_attr[i].int_value()
-	      && parameters->options().warn_mismatch())
+	      && parameters->options().warn_mismatch()
+	      && parameters->options().wchar_size_warning())
 	    {
 	      gold_warning(_("%s uses %u-byte wchar_t yet the output is to "
 			     "use %u-byte wchar_t; use of wchar_t values "
@@@@ -10315,10 +10315,10 @@@@ Target_arm<big_endian>::merge_object_att
 		  // Use whatever requirements the new object has.
 		  out_attr[i].set_int_value(in_attr[i].int_value());
 		}
-	      // FIXME: Make it possible to turn off this warning.
 	      else if (in_attr[i].int_value() != elfcpp::AEABI_enum_forced_wide
 		       && out_attr[i].int_value() != in_attr[i].int_value()
-		       && parameters->options().warn_mismatch())
+		       && parameters->options().warn_mismatch()
+		       && parameters->options().enum_size_warning())
 		{
 		  unsigned int in_value = in_attr[i].int_value();
 		  unsigned int out_value = out_attr[i].int_value();
Index: gold/options.h
===================================================================
RCS file: /cvs/src/src/gold/options.h,v
retrieving revision 1.147
diff -u -u -p -r1.147 options.h
--- gold/options.h	1 Jun 2010 23:37:57 -0000	1.147
+++ gold/options.h	6 Aug 2010 07:59:30 -0000
@@@@ -722,6 +722,10 @@@@ class General_options
   DEFINE_special(EL, options::ONE_DASH, '\0',
 		 N_("Link little-endian objects."), NULL);

+  DEFINE_bool(enum_size_warning, options::TWO_DASHES, '\0', true, NULL,
+	      N_("(ARM only) Do not warn about objects with incompatible "
+		 "enum sizes"));
+
   DEFINE_bool(fatal_warnings, options::TWO_DASHES, '\0', false,
 	      N_("Treat warnings as errors"),
 	      N_("Do not treat warnings as errors"));
@@@@ -1038,6 +1042,10 @@@@ class General_options
 		    N_("Report unresolved symbols as errors"),
 		    NULL, true);

+  DEFINE_bool(wchar_size_warning, options::TWO_DASHES, '\0', true, NULL,
+	      N_("(ARM only) Do not warn about objects with incompatible "
+		 "wchar_t sizes"));
+
   DEFINE_bool(whole_archive, options::TWO_DASHES, '\0', false,
               N_("Include all archive contents"),
               N_("Include only needed archive contents"));
@
text
@d1272 1
a1272 1
  check_excluded_libs (const std::string &s) const;
d1358 1
a1358 1
  add_plugin(const char *filename);
@


1.147
log
@	* gold.h (is_wildcard_string): New function.
	* layout.cc (Layout::layout): Pass this pointer to add_input_section.
	(Layout::layout_eh_frame): Ditto.
	(Layout::find_section_order_index): New method.
	(Layout::read_layout_from_file): New method.
	* layout.h (Layout::find_section_order_index): New method.
	(Layout::read_layout_from_file): New method.
	(Layout::input_section_position_): New private member.
	(Layout::input_section_glob_): New private member.
	* main.cc (main): Call read_layout_from_file here.
	* options.h (--section-ordering-file): New option.
	* output.cc (Output_section::input_section_order_specified_): New
	member.
	(Output_section::Output_section): Initialize new member.
	(Output_section::add_input_section): Add new parameter.
	Keep input sections when --section-ordering-file is used.
	(Output_section::set_final_data_size): Sort input sections when
	section ordering file is specified.
	(Output_section::Input_section_sort_entry): Add new parameter.
	Check sorting type.
	(Output_section::Input_section_sort_entry::compare_section_ordering):
	New method.
	(Output_section::Input_section_sort_compare::operator()): Change to
	consider section_order_index.
	(Output_section::Input_section_sort_init_fini_compare::operator()):
	Change to consider section_order_index.
	(Output_section::Input_section_sort_section_order_index_compare
	::operator()): New method.
	(Output_section::sort_attached_input_sections): Change to sort
	according to section order when specified.
	(Output_section::add_input_section<32, true>): Add new parameter.
	(Output_section::add_input_section<64, true>): Add new parameter.
	(Output_section::add_input_section<32, false>): Add new parameter.
	(Output_section::add_input_section<64, false>): Add new parameter.
	* output.h (Output_section::add_input_section): Add new parameter.
	(Output_section::input_section_order_specified): New
	method.
	(Output_section::set_input_section_order_specified): New method.
	(Input_section::Input_section): Initialize section_order_index_.
	(Input_section::section_order_index): New method.
	(Input_section::set_section_order_index): New method.
	(Input_section::section_order_index_): New member.
	(Input_section::Input_section_sort_section_order_index_compare): New
	struct.
	(Output_section::input_section_order_specified_): New member.
	* script-sections.cc (is_wildcard_string): Delete and move modified
	method to gold.h.
	(Output_section_element_input::Output_section_element_input): Modify
	call to is_wildcard_string.
	(Output_section_element_input::Input_section_pattern
	::Input_section_pattern): Ditto.
	(Output_section_element_input::Output_section_element_input): Ditto.
	* testsuite/Makefile.am (final_layout): New test case.
	* testsuite/Makefile.in: Regenerate.
	* testsuite/final_layout.cc: New file.
	* testsuite/final_layout.sh: New file.
@
text
@d725 4
d1045 4
@


1.146
log
@2010-05-18  Rafael Espindola  <espindola@@google.com>

	* options.cc (General_options::finalize): Handle -nostdlib.
	* options.h (nostdlib): New option.
	* script.cc (script_add_search_dir): Handle -nostdlib.
@
text
@d895 4
@


1.145
log
@2010-04-15  Andrew Haley  <aph@@redhat.com>

	* emultempl/armelf.em (merge_exidx_entries): New variable.
	(OPTION_NO_MERGE_EXIDX_ENTRIES): New definition.
	("no-merge-exidx-entries"): New option.
	* ld.texinfo (merge-exidx-entries): Document this option.

2010-04-15  Andrew Haley  <aph@@redhat.com>

	* bfd-in.h (elf32_arm_fix_exidx_coverage): Add new flag:
	merge_exidx_entries.
	* bfd-in2.h: Likewise.
	* elf32-arm.c (elf32_arm_fix_exidx_coverage): Likewise.  Use it to
	control merging of exidx entries.

2010-04-15  Andrew Haley  <aph@@redhat.com>

	* options.h (merge_exidx_entries): New option.
	* arm.cc (class Arm_exidx_fixup): Add new arg, merge_exidx_entries.
	(class Arm_exidx_fixup::merge_exidx_entries_): New member.
	(Output_section::fix_exidx_coverage): Add new arg, merge_exidx_entries.
	(Target_arm::merge_exidx_entries): New function.
	(process_exidx_entry): Don't merge if merge_exidx_entries_ is false.
	(Arm_output_section::fix_exidx_coverage): Pass merge_exidx_entries
	to Arm_exidx_fixup constructor.
	Add new arg, merge_exidx_entries.
	(Target_arm::fix_exidx_coverage): pass merge_exidx_entries to
	Arm_output_section::fix_exidx_coverage.
@
text
@d803 4
@


1.144
log
@2010-04-07  Doug Kwan  <dougkwan@@google.com>

	* arm.cc: Replace "endianity" with "endianness" in comments.
	(Arm_exidx_cantunwind): Ditto.
	(Arm_relobj::Arm_relobj): Initialize merge_flags_and_attribures.
	(Arm_relobj::merge_flags_and_attributes): New method.
	(Arm_relobj::merge_flags_and_attributes_): New data member.
	(Arm_exidx_cantunwind::do_fixed_endian_write): Fix formatting.
	(Arm_relobj::scan_sections_for_stubs): Ditto.
	(Arm_relobj::do_read_symbols): Check to see if we really want to
	merge processor-specific flags and attributes.  Exit early if
	an object is empty except for section names and the undefined symbol.
	(Target_arm::do_finalize_sections): Move check for ELF format to
	Arm_relobj::do_read_symbols.  Merge processor specific flags and
	attributes from a regular object only when we have determined that
	it is aapropriate.  Do not create an .ARM.attributes section in
	output if there is no regular input object.
	(Target_arm::merge_processor_specific_flags): Check
	--warn-mismatch before printing any error.
	(Target_arm::merge_object_attributes): Ditto.
	* gold.cc (queue_middle_tasks): Handle the case in which there is
	no regular object in input.
	* options.cc (General_options::parse_EB): New method.
	(General_options::parse_EL): Same.
	(General_options::General_options): Initialize endianness_.
	* options.h (-EB, -EL, -no-pipeline-knowledge, -p, --warn-mismatch):
	New options.
	(General_options::Endianness): New enum.
	(General_options::endianness): New method.
	(General_options::endianness_): New data member.
	* parameters.cc (Parameters::set_options): Check target endianness.
	(Parameters::set_target_once): Ditto.
	(Parameters::check_target_endianness): New method.
	(parameters_force_valid_target): If either -EL or -EB is specified,
	use it to define endianness of default target.
	* parameters.h (Parameters::check_target_endianness): New method
	declaration.
	* target.h (class Target): Change "endianity" to "endianness"
	in comments.
@
text
@d736 4
@


1.143
log
@2010-03-22  Rafael Espindola  <espindola@@google.com>

	* archive.cc (Should_include): Move to archive.h.
	(should_include_member): Make it a member of Archive.
	(Lib_group): New.
	(Add_lib_group_symbols): New.
	* archive.h: Include options.h.
	(Archive_member): Moved from Archive.
	(Should_include): Moved from archive.cc.
	(Lib_group): New.
	(Add_lib_group_symbols): New.
	* dynobj.cc (do_should_include_member): New.
	* dynobj.h (do_should_include_member): New.
	* gold.cc (queue_initial_tasks): Update call to queue.
	* main.cc (main): Print lib group stats.
	* object.cc (do_should_include_member): New.
	* object.h: Include archive.h.
	(Object::should_include_member): New.
	(Object::do_should_include_member): New.
	(Sized_relobj::do_should_include_member): New.
	* options.cc (General_options::parse_start_lib): New.
	(General_options::parse_end_lib): New.
	(Input_arguments::add_file): Handle lib groups.
	(Input_arguments::start_group): Check we are not in a lib.
	(Input_arguments::start_lib): New.
	(Input_arguments::end_lib): New.
	* options.h (General_options): Add start_lib and end_lib.
	(Input_argument::lib_): New.
	(Input_argument::lib): New.
	(Input_argument::is_lib): New.
	(Input_file_lib): New.
	(Input_arguments::in_lib_): New.
	(Input_arguments::in_lib): New.
	(Input_arguments::start_lib): New.
	(Input_arguments::end_lib_): New.
	* plugin.cc (Pluginobj::get_symbol_resolution_info): Mark symbols
	in unused members as preempted.
	(Sized_pluginobj::do_should_include_member): New.
	* plugin.h (Sized_pluginobj::do_should_include_member): New.
	* readsyms.cc (Read_symbols::locks): If we are just reading a member,
	return the blocker.
	(Read_symbols::do_whole_lib_group): New.
	(Read_symbols::do_lib_group): New.
	(Read_symbols::do_read_symbols): Handle lib groups.
	(Read_symbols::get_name): Handle lib groups.
	* readsyms.h (Read_symbols): Add an archive member pointer.
	(Read_symbols::do_whole_lib_group): New.
	(Read_symbols::do_lib_group): New.
	(Read_symbols::member_): New.
	* script.cc (read_input_script): Update call to queue_soon.
@
text
@d716 3
d722 3
d833 3
d842 3
d1007 3
d1274 11
d1376 2
@


1.142
log
@	* fileread.cc (File_read::~File_read): Don't delete whole_file_view_.
	(File_read::open[1]): Remove initial mapping of whole_file_view_.
	(File_read::open[2]): Add whole_file_view_ to list of views.
	(File_read::make_view): Remove test of whole_file_view_.
	(File_read::find_or_make_view): Create whole_file_view_ if
	necessary.
	(File_read::clear_views): Replace bool parameter with enum;
	adjust all callers.  Don't delete views with permanent data;
	do delete cached views and views from archives if
	--no-keep-files-mapped is set.  Set whole_file_view_ to NULL
	if clearing the corresponding view.
	* fileread.h (File_read::Clear_views_mode): New enum.
	(File_read::View::is_permanent_view): New method.
	(File_read::clear_views): Replace bool parameter
	with enum; adjust all callers.
	* options.h (General_options): Change keep_files_mapped option;
	add map_whole_files.
	* readsyms.cc (Add_symbols::run): Delete sd_ object before
	releasing the file.
	* reloc.cc (Scan_relocs::run): Delete rd_ object before releasing
	the file.
@
text
@d56 1
d1037 6
d1510 1
a1510 1
    : is_file_(true), file_(file), group_(NULL)
d1515 6
a1520 1
    : is_file_(false), group_(group)
d1531 6
a1536 1
  { return !this->is_file_; }
d1561 17
d1582 1
d1618 40
d1666 1
a1666 1
    : input_argument_list_(), in_group_(false)
d1681 8
d1694 5
d1722 1
@


1.141
log
@	* options.h (class General_options): Add --spare-dynamic-tags.
	* output.cc (Output_data_dynamic::set_final_data_size): Implement
	--spare-dynamic-tags.
@
text
@d777 1
a777 1
  DEFINE_bool(keep_files_mapped, options::TWO_DASHES, '\0',
d782 3
@


1.140
log
@2010-02-12  Sriraman Tallam  <tmsriram@@google.com>

	* arm.cc (Scan::local_reloc_may_be_function_pointer): New function.
	(Scan::global_reloc_may_be_function_pointer): New function.
	* sparc.cc (Scan::local_reloc_may_be_function_pointer): New function.
	(Scan::global_reloc_may_be_function_pointer): New function.
	* powerpc.cc (Scan::local_reloc_may_be_function_pointer): New function.
	(Scan::global_reloc_may_be_function_pointer): New function.
	* i386.cc (Scan::local_reloc_may_be_function_pointer): New function.
	(Scan::global_reloc_may_be_function_pointer): New function.
	* x86_64.cc (Scan::local_reloc_may_be_function_pointer): New function.
	(Scan::global_reloc_may_be_function_pointer): New function.
	(Scan::possible_function_pointer_reloc): New function.
	(Target_x86_64::can_check_for_function_pointers): New function.
	* gc.h (gc_process_relocs): Scan relocation types to determine if
	function pointers were taken for targets that support it.
	* icf.cc (Icf::find_identical_sections): Include functions for
	folding in safe ICF whose pointer is not taken.
	* icf.h (Secn_fptr_taken_set): New typedef.
	(fptr_section_id_): New member.
	(section_has_function_pointers): New function.
	(set_section_has_function_pointers): New function.
	(check_section_for_function_pointers): New function.
	* options.h: Fix comment for safe ICF option.
	* target.h (can_check_for_function_pointers): New function.
	* testsuite/Makefile.am: Add icf_safe_so_test test case.
	Modify icf_safe_test for X86-64.
	* testsuite/Makefile.in: Regenerate.
	* testsuite/icf_safe_so_test.cc: New file.
	* testsuite/icf_safe_so_test.sh: New file.
	* testsuite/icf_safe_test.cc (kept_func_3): New function.
	(main): Change to take pointer to function kept_func_3.
	* testsuite/icf_safe_test.sh (arch_specific_safe_fold): Check if safe
	folding is done correctly for X86-64.
@
text
@d878 4
@


1.139
log
@2010-01-22  Viktor Kutuzov  <vkutuzov@@accesssoftek.com>

	* gold/arm.cc (Target_arm): Updated fix_v4bx method and usage of
	Fix_v4bx enum values .
	* gold/options.h (General_options): New option definitions.
	(General_options::fix_v4bx): New method.
	(General_options::Fix_v4bx): New enum.
	* gold/options.cc (General_options::parse_fix_v4bx): New method.
	(General_options::parse_fix_v4bx_interworking): New method.
@
text
@d917 2
a918 1
                 "\'--icf=safe\' folds only ctors and dtors."),
@


1.138
log
@2010-01-14  Doug Kwan  <dougkwan@@google.com>

	* arm.cc (map, utility): Include headers.
	(Target_arm::apply_cortex_a8_workaround): New method.
	(Arm_relobj::do_relocate_sections): Apply any Cortex-A8 workaround.
	(Target_arm::Scan::local): Handle R_ARM_THM_JUMP24, R_ARM_THM_JUMP19.
	(Target_arm::Scan::global): R_ARM_THM_JUMP19.
	(Target_arm::do_finalize_sections): Set fix_cortex_a8_ according to
	the --[no-]fix-cortex-a8 command line options.
	(Target_arm::Relocate::relocate): Handle R_ARM_JUMP19.
	(Target_arm::relocate_stub): Use addend in instruction template.
	* options.h (DEFINE_bool): Set the user-set flag.
	(General_options): Add --[no-]-fix-cortex options.
	* output.cc (Output_section::convert_input_sections_to_relaxed_sections)
	: Update fast look-up map after conversion.
@
text
@d729 9
d1230 14
d1333 2
@


1.137
log
@2010-01-10  Doug Kwan  <dougkwan@@google.com>

	* options.h (DEFINE_var): Use parentheses around argument varname__
	in macro body to avoid any unintended subsequent substitutions.
@
text
@d318 4
a321 1
    { options->set_##varname__(false); }                                 \
d725 4
@


1.136
log
@	PR 10980
	* options.h (class General_options): Add --warn-unresolved-symbols
	and --error-unresolved-symbols.
	* errors.cc (Errors::undefined_symbol): Implement
	--warn-unresolved-symbols.
@
text
@d247 6
d258 1
a258 1
  varname__() const                                                          \
@


1.135
log
@	* options.h (class General_options): Add -z text and -z textoff.
	* layout.cc (Layout::finish_dynamic_section): Implement -z text.
@
text
@d975 8
@


1.134
log
@	PR 10980
	* options.h (class General_options): Add --warn-shared-textrel.
	* layout.cc (Layout::finish_dynamic_section): Implement
	--warn-shared-textrel.
@
text
@d1055 6
@


1.133
log
@	PR 10980
	* options.h (class General_options): Add --warn-multiple-gp.
@
text
@d971 4
@


1.132
log
@	PR 10980
	* options.cc (General_options::parse_section_start): New function.
	(General_options::section_start): New function.
	(General_options::General_options): Initialize all members.
	* options.h: Include <map>
	(class General_options): Add --section-start.  Add section_starts_
	member.
	* layout.cc (Layout::attach_allocated_section_to_segment): If
	--section-start was used, set the address of the segment.  Remove
	local sort_sections.
	(Layout::relaxation_loop_body): If the address of the load segment
	has been set by --section-start, don't use it.
	* output.h (Output_segment::update_flags_for_output_section): New
	function.
	* output.cc (Output_segment::add_output_section): Call
	update_flags_for_output_section.
@
text
@d964 3
@


1.131
log
@	PR 10980
	* options.h (class General_options): Add --undefined-version.
	* script.cc (struct Version_expression): Add was_matched_by_symbol
	field.
	(Version_script_info::matched_symbol): New function.
	(Version_script_info::get_symbol_version_helper): Call
	matched_symbol.
	(Version_script_info::check_unmatched_names): New function.
	* script.h (class Version_script_info): Update declarations.
	* gold.cc (queue_middle_tasks): Handle --no-undefined-version.
@
text
@d42 1
d849 3
d1181 6
d1274 2
@


1.130
log
@	* options.h (class General_options): Use DEFINE_bool_alias for
	allow_multiple_definition.
	* resolve.cc (Symbol_table::should_override): Don't test
	allow_multiple_definition.
@
text
@d974 4
@


1.129
log
@	PR 10980
	* options.h (class General_options): Add --cref.
	* main.cc (main): Print cref table if --cref.  Don't close mapfile
	until after printing cref table.
	* cref.cc: Include "symtab.h".
	(class Cref_inputs): Define Cref_table_compare and Cref_table.
	(Cref_table_compare::operator()): New function.
	(Cref_inputs::gather_cref): New function.
	(filecol): New static const.
	(Cref_inputs::print_cref): New function.
	(Cref::print_cref): New function.
	* cref.h: Include <cstdio>.
	(class Cref): Update declarations.
	* mapfile.h (Mapfile::file): New function.
	* object.h (class Object): Define Symbols.  Declare virtual
	do_get_global_symbols.
	(Object::get_global_symbols): New function.
	* object.cc (Input_objects::add_object): Pass object to cref_ if
	--cref.
	(Input_objects::archive_start): Likewise.
	(Input_objects::archive_stop): Likewise.
	(Input_objects::print_cref): New function.
	* dynobj.h (Sized_dynobj::do_get_global_symbols): New function.
	* dynobj.cc (big_endian>::do_add_symbols): Create symbols_ if
	--cref.
	* plugin.cc (Sized_pluginobj::do_get_global_symbols): New
	function.
	* plugin.h (class Sized_pluginobj): Update declarations.
@
text
@d587 3
a589 3
  DEFINE_bool(allow_multiple_definition, options::TWO_DASHES, '\0', false,
	      N_("Allow multiple definitions of symbols"),
	      N_("Do not allow multiple definitions"));
@


1.128
log
@	PR 10980
	* options.h (class General_options): Add
	--allow-multiple-definition and -z muldefs.
	* resolve.cc (Symbol_table::should_override): Don't warn about a
	multiple symbol definition if --allow-multiple-definition or -z
	muldefs.
@
text
@d3 1
a3 1
// Copyright 2006, 2007, 2008, 2009 Free Software Foundation, Inc.
d646 4
@


1.127
log
@	PR 10980
	* options.h (class General_options): Add --add-needed and
	--copy-dt-needed-entries.  Tweak --as-needed help entry.
	* object.cc (Input_objects::check_dynamic_dependencies): Give an
	error if --copy-dt-needed-entries aka --add-needed is used and
	would cause a change in behaviour.
@
text
@d587 4
d1005 5
@


1.126
log
@	PR 10980
	* options.h (class General_options): Add -G as a short version of
	--shared.  Add no-op options -assert, -g, and -i.
@
text
@d583 4
d592 2
a593 2
              N_("Only set DT_NEEDED for dynamic libs if used"),
              N_("Always DT_NEEDED for dynamic libs"));
d638 4
@


1.125
log
@	PR 10980
	* options.h (class General_options): Permit two dashes with
	--retain-symbols-file.
@
text
@d591 4
d699 3
d705 3
d858 1
a858 1
  DEFINE_bool(shared, options::ONE_DASH, '\0', false,
@


1.124
log
@	PR 10931
	* options.h (class General_options): Add --sort-common option.
	* symtab.h (class Symbol_table): Define Sort_commons_order enum.
	* common.cc (Sort_common): Add sort_order parameter to
	constructor.  Add sort_order_ field.
	(Sort_commons::operator): Check sort_order_.
	(Symbol_table::allocate_commons): Determine the sort order.
	(Symbol_table::do_allocate_commons): Add sort_order parameter.
	Change all callers.
	(Symbol_table::do_allocate_commons_list): Likewise.
@
text
@d806 2
a807 2
  DEFINE_string(retain_symbols_file, options::EXACTLY_ONE_DASH, '\0', NULL,
                N_("keep only symbols listed in this file"), N_("[file]"));
@


1.123
log
@	PR 10861
	* script.h (class Version_script_info): Define Language enum.
	Update declarations.  Define Glob, Exact, and Lookup types.  Add
	new fields globals_, locals_, and is_finalized_.
	* script.cc: Various formatting fixes.
	(class Parser_closure): Change language_stack_ from a vector of
	std::string to one of Version_script_info::Language.  Adjust all
	uses accordingly.
	(class Lazy_demangler): Remove.
	(struct Version_expression): Change language from std::string to
	Version_script_info::Language.
	(Version_script_info::Version_script_info): New function.
	(Version_script_info::~Version_script_info): Don't call clear.
	(Version_script_info::finalize): New function.
	(Version_script_info::build_lookup_tables): New function.
	(Version_script_info::build_expression_list_lookup): New
	function.
	(Version_script_info::get_symbol_version_helper): Rewrite to use
	lookup tables.
	(Version_script_info::print_expression_list): Adjust to use
	Version_script_info::Language.
	(script_push_lex_into_version_mode): Check that the version script
	has not been finalized.
	(version_script_push_lang): Change language string to
	Version_script_info::Language.
	* options.cc (Command_line::version_script): New function.
	* options.h (class General_options): Add finalize_dynamic_list
	function.  Change version_script from declaration to definition.
	* testsuite/ver_test_4.script: Remove duplicate def of t2_2.
	* testsuite/version_script.map: Remove duplicate def of foo.
	* testsuite/Makefile.am (ver_matching_def.so): Depend upon
	version_script.map.
	* testsuite/Makefile.in: Rebuild.
@
text
@d822 4
@


1.122
log
@	PR 10670
	* options.h (class General_options): Add -x/--discard-all.
	* object.cc (Sized_relobj::do_count_local_symbols): Handle
	--discard-all.  If the local symbol needs a dynamic entry, check
	that before handling --discard-locals.
@
text
@d1121 5
d1560 1
a1560 1
  // Get the version-script options: a convenience routine.
d1562 1
a1562 2
  version_script() const
  { return *this->script_options_.version_script_info(); }
@


1.121
log
@	Revert -Wshadow changes, all changes from:
	2009-12-11  Doug Kwan  <dougkwan@@google.com>
	2009-12-11  Nick Clifton  <nickc@@redhat.com>
	* configure.ac: Remove -Wshadow when setting WARN_CXXFLAGS.
@
text
@d657 2
@


1.120
log
@Add -Wshadow to the gcc command line options used when compiling the binutils.
Fix up all warnings generated by the addition of this switch.
@
text
@d230 1
a230 1
  void parse_to_value(const char* opt, const char* arg,
d232 1
a232 1
  { (options->*(this->parse))(opt, arg, cmdline); }
d520 2
a521 2
  Search_directory(const char* cname, bool put_in_sysroot)
    : name_(cname), put_in_sysroot_(put_in_sysroot), is_in_sysroot_(false)
d1301 6
a1306 6
  Input_file_argument(const char* aname, Input_file_type type,
                      const char* aextra_search_path,
                      bool ajust_symbols,
                      const Position_dependent_options& aoptions)
    : name_(aname), type_(type), extra_search_path_(aextra_search_path),
      just_symbols_(ajust_symbols), options_(aoptions)
d1313 6
a1318 6
  Input_file_argument(const char* aname, Input_file_type type,
                      const char* aextra_search_path,
                      bool ajust_symbols,
                      const General_options& aoptions)
    : name_(aname), type_(type), extra_search_path_(aextra_search_path),
      just_symbols_(ajust_symbols), options_(aoptions)
d1377 2
a1378 2
  explicit Input_argument(Input_file_argument afile)
    : is_file_(true), file_(afile), group_(NULL)
d1382 2
a1383 2
  explicit Input_argument(Input_file_group* agroup)
    : is_file_(false), group_(agroup)
@


1.119
log
@2009-11-25  Doug Kwan  <dougkwan@@google.com>

	Revert:

	2009-11-25  Doug Kwan  <dougkwan@@google.com>

		* arm.cc (Target_arm::Target_arm): Move method definition
		outside of class definition.  Add code to handle
		--target1-rel, --target1-abs and --target2= options.
		(Target_arm::get_reloc_reloc_type): Change method to be
		non-static and const.
		(Target_arm::target1_is_rel_, Target_arm::target2_reloc_):
		New data member declaration.
		(Target_arm::Scan::local, Target_arm::Scan::global,
		Target_arm::Relocate::relocate,
		Target_arm::Relocatable_size_for_reloc::get_size_for_reloc):
		Adjust call to Target_arm::get_real_reloc_type.
		(Target_arm::get_real_reloc_type): Use command line options
		to determine real types of R_ARM_TARGET1 and R_ARM_TARGET2.
		* options.h (--target1-rel, --target1-abs, --target2): New
		ARM-only options.
@
text
@d230 1
a230 1
  void parse_to_value(const char* option, const char* arg,
d232 1
a232 1
  { (options->*(this->parse))(option, arg, cmdline); }
d520 2
a521 2
  Search_directory(const char* name, bool put_in_sysroot)
    : name_(name), put_in_sysroot_(put_in_sysroot), is_in_sysroot_(false)
d1301 6
a1306 6
  Input_file_argument(const char* name, Input_file_type type,
                      const char* extra_search_path,
                      bool just_symbols,
                      const Position_dependent_options& options)
    : name_(name), type_(type), extra_search_path_(extra_search_path),
      just_symbols_(just_symbols), options_(options)
d1313 6
a1318 6
  Input_file_argument(const char* name, Input_file_type type,
                      const char* extra_search_path,
                      bool just_symbols,
                      const General_options& options)
    : name_(name), type_(type), extra_search_path_(extra_search_path),
      just_symbols_(just_symbols), options_(options)
d1377 2
a1378 2
  explicit Input_argument(Input_file_argument file)
    : is_file_(true), file_(file), group_(NULL)
d1382 2
a1383 2
  explicit Input_argument(Input_file_group* group)
    : is_file_(false), group_(group)
@


1.118
log
@2009-11-25  Doug Kwan  <dougkwan@@google.com>

	* arm.cc (Target_arm::Target_arm): Move method definition outside of
	class definition.  Add code to handle --target1-rel, --target1-abs
	and --target2= options.
	(Target_arm::get_reloc_reloc_type): Change method to be non-static
	and const.
	(Target_arm::target1_is_rel_, Target_arm::target2_reloc_): New data
	member declaration.
	(Target_arm::Scan::local, Target_arm::Scan::global,
	Target_arm::Relocate::relocate,
	Target_arm::Relocatable_size_for_reloc::get_size_for_reloc): Adjust
	call to Target_arm::get_real_reloc_type.
	(Target_arm::get_real_reloc_type): Use command line options to
	determine real types of R_ARM_TARGET1 and R_ARM_TARGET2.
	* options.h (--target1-rel, --target1-abs, --target2): New ARM-only
	options.
@
text
@a886 11
  DEFINE_bool(target1_rel, options::TWO_DASHES, '\0', false,
	      N_("(ARM only) Force R_ARM_TARGET1 type to R_ARM_REL32"),
	      NULL);
  DEFINE_bool(target1_abs, options::TWO_DASHES, '\0', false,
	      N_("(ARM only) Force R_ARM_TARGET1 type to R_ARM_ABS32"),
	      NULL);
  DEFINE_enum(target2, options::TWO_DASHES, '\0', "default",
	      N_("(ARM only) Set R_ARM_TARGET2 relocation type"),
	      N_("[default, rel, abs, got-rel"),
	      {"default", "rel", "abs", "got-rel"});

@


1.117
log
@	PR 10860
	* options.h (class General_options): Add --warn-common.
	* resolve.cc (Symbol_table::resolve): Handle --warn-common when
	merging two common symbols.
	(Symbol_table::should_override): Handle --warn-common when merging
	a common symbol with a defined symbol.  Use report_resolve_problem
	for multiple definitions.
	(Symbol_table::report_resolve_problem): New function.
	* symtab.h (class Symbol_table): Declare report_resolve_problem.
@
text
@d887 11
@


1.116
log
@	* options.h (class General_options): Add --warn_constructors.
@
text
@d921 4
@


1.115
log
@	* fileread.cc: (File_read::View::~View): Use the new
	data_ownership_ filed.
	(File_read::~File_read): Dispose the new whole_file_view_.
	(File_read::open): Mmap the whole file if needed.
	(File_read::open): Use whole_file_view_ instead of contents_.
	(File_read::find_view): Use whole_file_view_ if applicable.
	(File_read::do_read): Use whole_file_view_ instead of contents_.
	(File_read::make_view): Use whole_file_view_ instead of contents_,
	update File_read::View::View call.
	(File_read::find_or_make_view): Update File_read::View::View
	call.
	* fileread.h: (File_read::File_read): Initialize whole_file_view_,
	remove contents_
	(File_read::View::Data_ownership): New enum.
	(File_read::View::View): Replace bool mapped_ with Data_ownership
	argument.
	(File_read::View::mapped_): Remove (replaced by data_ownership_).
	(File_read::View::data_ownership_): New field.
	(File_read::contents_): Remove (replaced by whole_file_view_).
	(File_read::whole_file_view_): New field.
	* options.h (class General_options): Add --keep-files-mapped.
@
text
@d921 3
@


1.114
log
@	Add support for -pie.
	* options.h (class General_options): Add -pie and
	--pic-executable.
	(General_options::output_is_position_independent): Test -pie.
	(General_options::output_is_executable): Return true if not shared
	and not relocatable.
	(General_options::output_is_pie): Remove.
	* options.cc (General_options::finalize): Reject incompatible uses
	of -pie.
	* gold.cc (queue_middle_tasks): A -pie link is not static.
	* symtab.h (Symbol::needs_plt_entry): Return false if -pie.
	* symtab.cc (Symbol::final_value_is_known): Return false if
	output_is_position_independent.
	* layout.cc (Layout::set_segment_offsets): Start at address 0 if
	output_is_position_independent.
	* output.cc (Output_file_header::do_sized_write): Use ET_DYN if
	output_is_position_independent.
	* i386.cc (Output_data_plt_i386::do_write): Use the PIC PLT if
	output_is_position_independent.
	* testsuite/Makefile.am (check_PROGRAMS): Add basic_pie_test and
	two_file_pie_test.
	(basic_pie_test.o, basic_pie_test): New targets.
	(two_file_test_1_pie.o, two_file_test_1b_pie.o): New targets.
	(two_file_test_2_pie.o, two_file_test_main_pie.o): New targets.
	(two_file_pie_test): New target.
	* testsuite/Makefile.in: Rebuild.
	* README: Remove note saying that -pie is not supported.
@
text
@d726 6
@


1.113
log
@	* options.h (class General_options): Add -init and -fini.
	* layout.cc (Layout::finish_dynamic_section): Emit
	given init and fini functions.
@
text
@d766 6
d1018 1
a1018 1
  { return this->shared(); }
d1026 1
a1026 7
  { return !this->shared() || this->output_is_pie(); }

  // Return true if the output is a position-independent executable.
  // This is currently not supported.
  bool
  output_is_pie() const
  { return false; }
@


1.112
log
@	* gc.h (gc_process_relocs): Check if icf is enabled using new
	function.
	* gold.cc (queue_initial_tasks): Likewise.
	(queue_middle_tasks): Likewise.
	* object.cc (do_layout): Likewise.
	* symtab.cc (is_section_folded): Likewise.
	* main.cc (main): Likewise.
	* reloc.cc (Read_relocs::run): Likewise.
	(Sized_relobj::do_scan_relocs): Likewise.
	* icf.cc (is_function_ctor_or_dtor): New function.
	(Icf::find_identical_sections): Check if function is ctor or dtor when
	safe icf is chosen.
	* options.h (General_options::icf): Change option to be an enum.
	(Icf_status): New enum.
	(icf_enabled): New method.
	(icf_safe_folding): New method.
	(set_icf_status): New method.
	(icf_status_): New variable.
	* (options.cc) (General_options::finalize): Set icf_status_.
	* testsuite/Makefile.am: Add commands to build icf_safe_test. Modify
	icf_test and icf_keep_unique_test to use the --icf enum flag.
	* testsuite/icf_safe_test.sh: New file.
	* testsuite/icf_safe_test.cc: New file.
@
text
@d690 3
d720 3
@


1.111
log
@2009-10-10  Chris Demetriou  <cgd@@google.com>

	* options.h (Input_file_argument::Input_file_type): New enum.
	(Input_file_argument::is_lib_): Replace with...
	(Input_file_argument::type_): New member.
	(Input_file_argument::Input_file_argument): Take Input_file_type
	'type' rather than boolean 'is_lib' as second argument.
	(Input_file_argument::is_lib): Use type_.
	(Input_file_argument::is_searched_file): New function.
	(Input_file_argument::may_need_search): Handle is_searched_file.
	* options.cc (General_options::parse_library): Support -l:filename.
	(General_options::parse_just_symbols): Update for Input_file_argument
	changes.
	(Command_line::process): Likewise.
	* archive.cc (Archive::get_file_and_offset): Likewise.
	* plugin.cc (Plugin_manager::release_input_file): Likewise.
	* script.cc (read_script_file, script_add_file): Likewise.
	* fileread.cc (Input_file::Input_file): Likewise.
	(Input_file::will_search_for): Handle is_searched_file.
	(Input_file::open): Likewise.
	* readsyms.cc (Read_symbols::get_name): Likewise.
	* testsuite/Makefile.am (searched_file_test): New test.
	* testsuite/Makefile.in: Regenerate.
	* testsuite/searched_file_test.cc: New file.
	* testsuite/searched_file_test_lib.cc: New file.
@
text
@d839 5
a843 3
  DEFINE_bool(icf, options::TWO_DASHES, '\0', false,
              N_("Identical Code Folding (Fold identical functions)"),
              N_("Don't fold identical functions (default)"));
d1070 8
d1128 14
d1175 2
@


1.110
log
@2009-10-09  Doug Kwan  <dougkwan@@google.com>

	* layout.cc (Layout::make_output_section): Call target hook to make
	ordinary output section.
	(Layout::finalize): Adjust parameter list of call the
	Target::may_relax().
	* layout.h (class Layout::section_list): New method.
	* merge.h (Output_merge_base::entsize): Change visibility to public.
	(Output_merge_base::is_string, Output_merge_base::do_is_string):
	New methods.
	(Output_merge_string::do_is_string): New method.
	* object.cc (Sized_relobj::do_setup): renamed from
	Sized_relobj::set_up.
	* object.h (Sized_relobj::adjust_shndx,
	Sized_relobj::initializ_input_to_output_maps,
	Sized_relobj::free_input_to_output_maps): Change visibilities to
	protected.
	(Sized_relobj::setup): Virtualize.
	(Sized_relobj::do_setup): New method declaration.
	(Sized_relobj::invalidate_section_offset,
	Sized_relobj::do_invalidate_section_offset): New method decfinitions.
	(Sized_relobj::elf_file, Sized_relobj::local_values): New methods.
	* options.cc (parse_int): New function.
	* options.h (parse_int): New declaration.
	(DEFINE_int): New macro.
	(stub_group_size): New option.
	* output.cc (Output_section::Output_section): Initialize memebers
	merge_section_map_, merge_section_by_properties_map_,
	relaxed_input_section_map_, is_relaxed_input_section_map_valid_.
	(Output_section::add_input_section): Handled deferred code-fill
	generation and remove an old comment.
	(Output_section::add_relaxed_input_section): New method definition.
	(Output_section::add_merge_input_section): Use merge section by
	properties map to speed to search.  Update merge section maps
	as appropriate.
	(Output_section::build_relaxation_map): New method definition.
	(Output_section::convert_input_sections_in_list_to_relaxed_sections):
	Same.
	(Output_section::relax_input_section): Renamed to
	Output_section::convert_input_sections_to_relaxed_sections and change
	interface to take a vector of pointers to relaxed sections.
	(Output_section::find_merge_section,
	Output_section::find_relaxed_input_section): New method definitions.
	(Output_section::is_input_address_mapped,
	Output_section::output_offset, Output_section::output_address):
	Use output section data maps to speed up searching.
	(Output_section::find_starting_output_address): Add comments.
	(Output_section::do_write,
	Output_section::write_to_postprocessing_buffer): Do code-fill
	generation as appropriate.
	(Output_section::get_input_sections): Invalidate relaxed input section
	map.
	(Output_section::restore_states): Adjust type of checkpoint .
	Invalidate relaxed input section map.
	* output.h (Output_merge_base): New class declaration.
	(Input_section_specifier): New class defintion.
	(class Output_relaxed_input_section) Change base class to
	Output_section_data_build.
	(Output_relaxed_input_section::Output_relaxed_input_section): Adjust
	base class initializer.
	(Output_section::add_relaxed_input_section): New method declaration.
	(Output_section::Input_section): Change visibility to protected.
     	(Output_section::Input_section::relobj,
	Output_section::Input_section::shndx): Handle relaxed input sections.
	Output_section::input_sections) Change visibility to protected.  Also
	define overload to return a non-const pointer.
	(Output_section::Merge_section_properties): New class defintion.
	(Output_section::Merge_section_by_properties_map,
	Output_section::Output_section_data_by_input_section_map,
	Output_section::Relaxation_map): New types.
	(Output_section::relax_input_section): Rename method to
	Output_section::convert_input_sections_to_relaxed_sections and change
	interface to take a vector of relaxed section pointers.
	(Output_section::find_merge_section,
	Output_section::find_relaxed_input_section,
	Output_section::build_relaxation_map,
	Output_section::convert_input_sections_in_list_to_relaxed_sections):
	New method declarations.
	(Output_section::merge_section_map_
	Output_section::merge_section_by_properties_map_,
	Output_section::relaxed_input_section_map_,
	Output_section::is_relaxed_input_section_map_valid_,
	Output_section::generate_code_fills_at_write_): New data members.
	* script-sections.cc
	(Output_section_element_input::set_section_addresses): Call
	current_data_size and addralign methods of relaxed input sections.
	(Orphan_output_section::set_section_addresses): Call current_data_size
	and addralign methods of relaxed input sections.
	* symtab.cc (Symbol_table::compute_final_value): Extract template
	from the body of Symbol_table::sized_finalize_symbol.
	(Symbol_table::sized_finalized_symbol): Call
	Symbol_table::compute_final_value.
	* symtab.h (Symbol_table::Compute_final_value_status): New enum type.
	(Symbol_table::compute_final_value): New templated method declaration.
	* target.cc (Target::do_make_output_section): New method defintion.
	* target.h (Target::make_output_section): New method declaration.
	(Target::relax): Add more parameters for input objects, symbol table
	and layout.  Adjust call to do_relax.
	(Target::do_make_output_section): New method declaration.
	(Target::do_relax): Add parameters for input objects, symbol table
	and layout.
@
text
@d1231 12
d1244 1
a1244 2
  // is_lib: true if name is a library name: that is, emits the leading
  //         "lib" and trailing ".so"/".a" from the name
d1252 2
a1253 2
    : name_(), is_lib_(false), extra_search_path_(""), just_symbols_(false),
      options_()
d1256 1
a1256 1
  Input_file_argument(const char* name, bool is_lib,
d1260 1
a1260 1
    : name_(name), is_lib_(is_lib), extra_search_path_(extra_search_path),
d1268 1
a1268 1
  Input_file_argument(const char* name, bool is_lib,
d1272 1
a1272 1
    : name_(name), is_lib_(is_lib), extra_search_path_(extra_search_path),
d1286 5
a1290 1
  { return this->is_lib_; }
d1309 5
a1313 1
  { return this->is_lib_ || !this->extra_search_path_.empty(); }
d1320 1
a1320 1
  bool is_lib_;
@


1.109
log
@	* options.h (class General_options): Define
	split_stack_adjust_size parameter.
	* object.h (class Object): Add uses_split_stack_ and
	has_no_split_stack_ fields.  Add uses_split_stack and
	has_no_split_stack accessor functions.  Declare
	handle_split_stack_section.
	(class Reloc_symbol_changes): Define.
	(class Sized_relobj): Define Function_offsets.  Declare
	split_stack_adjust, split_stack_adjust_reltype, and
	find_functions.
	* object.cc (Object::handle_split_stack_section): New function.
	(Sized_relobj::do_layout): Call handle_split_stack_section.
	* dynobj.cc (Sized_dynobj::do_layout): Call
	handle_split_stack_section.
	* reloc.cc (Sized_relobj::relocate_sections): Call
	split_stack_adjust for executable sections in split_stack
	objects.  Pass reloc_map to relocate_section.
	(Sized_relobj::split_stack_adjust): New function.
	(Sized_relobj::split_stack_adjust_reltype): New function.
	(Sized_relobj::find_functions): New function.
	* target-reloc.h: Include "object.h".
	(relocate_section): Add reloc_symbol_changes parameter.  Change
	all callers.
	* target.h (class Target): Add calls_non_split method.  Declare
	do_calls_non_split virtual method.  Declare match_view and
	set_view_to_nop.
	* target.cc: Include "elfcpp.h".
	(Target::do_calls_non_split): New function.
	(Target::match_view): New function.
	(Target::set_view_to_nop): New function.
	* gold.cc (queue_middle_tasks): Give an error if mixing
	split-stack and non-split-stack objects with -r.
	* i386.cc (Target_i386::relocate_section): Add
	reloc_symbol_changes parameter.
	(Target_i386::do_calls_non_split): New function.
	* x86_64.cc (Target_x86_64::relocate_section): Add
	reloc_symbol_changes parameter.
	(Target_x86_64::do_calls_non_split): New function.
	* arm.cc (Target_arm::relocate_section): Add reloc_symbol_changes
	parameter.
	* powerpc.cc (Target_powerpc::relocate_section): Add
	reloc_symbol_changes parameter.
	* sparc.cc (Target_sparc::relocate_section): Add
	reloc_symbol_changes parameter.
	* configure.ac: Call AM_CONDITIONAL for the default target.
	* configure: Rebuild.
	* testsuite/Makefile.am (TEST_AS): New variable.
	(check_SCRIPTS): Add split_i386.sh and split_x86_64.sh.
	(check_DATA): Add split_i386 and split_x86_64 files.
	(SPLIT_DEFSYMS): Define.
	(split_i386_[1234n].o): New targets.
	(split_i386_[124]): New targets.
	(split_i386_[1234r].stdout): New targets.
	(split_x86_64_[1234n].o): New targets.
	(split_x86_64_[124]): New targets.
	(split_x86_64_[1234r].stdout): New targets.
	(MOSTLYCLEANFILES): Add new executables.
	* testsuite/split_i386.sh: New file.
	* testsuite/split_x86_64.sh: New file.
	* testsuite/split_i386_1.s: New file.
	* testsuite/split_i386_2.s: New file.
	* testsuite/split_i386_3.s: New file.
	* testsuite/split_i386_4.s: New file.
	* testsuite/split_i386_n.s: New file.
	* testsuite/split_x86_64_1.s: New file.
	* testsuite/split_x86_64_2.s: New file.
	* testsuite/split_x86_64_3.s: New file.
	* testsuite/split_x86_64_4.s: New file.
	* testsuite/split_x86_64_n.s: New file.
	* testsuite/testfile.cc (Target_test): Update relocation_section
	function.
	* testsuite/Makefile.in: Rebuild.
@
text
@d86 3
d339 6
d814 6
@


1.108
log
@2009-09-30  Doug Kwan  <dougkwan@@google.com>

	* arm.cc (Target_arm::may_need_copy_reloc): Check for THUMB function
	symbol and call Symbol::may_need_copy_reloc to determine if
	a copy reloc is needed.
	* copy-relocs.cc (Copy_relocs::need_copy_reloc): Return false if -z
	nocopyreloc is given in command line.
	(Copy_relocs::emit_copy_reloc): Assert that -z nocopyreloc is not
	given in command line.
	* i386.cc (Target_i386::may_need_copy_reloc): Remove.
	(Target_i386::Scan::global): Use Symbol::may_need_copy_reloc instead
	of the removed Target_i386::may_need_copy_reloc.
	* options.h (copyreloc): New option with default value false.
	* powerpc.cc (Target_powerpc::may_need_copy_reloc): Remove.
	(Target_powerpc::Scan::global): Use Symbol::may_need_copy_reloc
	instead of the removed Target_powerpc::may_need_copy_reloc.
	* sparc.cc (Target_powerpc::may_need_copy_reloc): Remove.
	(Target_sparc::Scan::global): Use Symbol::may_need_copy_reloc
	instead of the removed Target_sparc::may_need_copy_reloc.
	* symtab.h (Symbol::may_need_copy_reloc): New method definition.
	* x86_64.cc (Target_powerpc::may_need_copy_reloc): Remove.
	(Target_x86_64::Scan::global): Use Symbol::may_need_copy_reloc
	instead of the removed Target_x86_64::may_need_copy_reloc.
@
text
@d815 4
@


1.107
log
@	* object.cc (Sized_relobj::do_count): Test should_retain_symbol map.
	* options.cc: Include <cerrno> and <fstream>.
	(General_options::finalize): Parse -retain-symbols-file tag.
	* options.h: New flag.
	(General_options): New method should_retain_symbol, new
	variable symbols_to_retain.
	* symtab.cc (Symbol_table::sized_finalize_symbol): Test
	should_retain_symbol map.
	* testsuite/Makefile.am (retain_symbols_file_test): New test.
	* testsuite/Makefile.in: Regenerate.
	* testsuite/retain_symbols_file_test.sh: New file.
@
text
@d931 3
@


1.106
log
@	* options.h (Command_line::Pre_options): New class.
	(Command_line::pre_options): New member.
	* options.cc (gold::options::ready_to_register): New variable.
	(One_option::register_option): Do nothing if not registering options.
	Assert if same short option registered twice.
	(General_options::General_options): Turn off option registration when
	done constructing.
	(Command_line::Pre_options::Pre_options): New constructor.
@
text
@d777 3
d1027 9
d1147 1
a1147 1
  // Libraries excluded from automatic export via --exclude-libs
d1149 2
@


1.106.2.1
log
@Merge elfcpp and gold from trunk.
@
text
@a85 3
parse_int(const char* option_name, const char* arg, int* retval);

extern void
a335 6
#define DEFINE_int(varname__, dashes__, shortname__, default_value__,   \
                   helpstring__, helparg__)                             \
  DEFINE_var(varname__, dashes__, shortname__, default_value__,         \
             #default_value__, helpstring__, helparg__, false,		\
             int, int, options::parse_int)

a680 3
  DEFINE_string(fini, options::ONE_DASH, '\0', "_fini",
                N_("Call SYMBOL at unload-time"), N_("SYMBOL"));

a707 3
  DEFINE_string(init, options::ONE_DASH, '\0', "_init",
                N_("Call SYMBOL at load-time"), N_("SYMBOL"));

a750 6
  DEFINE_bool(pie, options::ONE_DASH, '\0', false,
	      N_("Create a position independent executable"), NULL);
  DEFINE_bool_alias(pic_executable, pie, options::TWO_DASHES, '\0',
		    N_("Create a position independent executable"), NULL,
		    false);

a776 3
  DEFINE_string(retain_symbols_file, options::EXACTLY_ONE_DASH, '\0', NULL,
                N_("keep only symbols listed in this file"), N_("[file]"));

a801 6
  DEFINE_int(stub_group_size, options::TWO_DASHES , '\0', 1,
             N_("(ARM only) The maximum distance from instructions in a group "
		"of sections to their stubs.  Negative values mean stubs "
		"are always after the group. 1 means using default size.\n"),
	     N_("SIZE"));

a811 4
  DEFINE_uint(split_stack_adjust_size, options::TWO_DASHES, '\0', 0x4000,
	      N_("Stack size when -fsplit-stack function calls non-split"),
	      N_("SIZE"));

d817 3
a819 5
  DEFINE_enum(icf, options::TWO_DASHES, '\0', "none",
              N_("Identical Code Folding. "
                 "\'--icf=safe\' folds only ctors and dtors."),
	      ("[none,all,safe]"),	
              {"none", "all", "safe"});
a927 3
  DEFINE_bool(copyreloc, options::DASH_Z, '\0', true,
	      NULL,
	      N_("Do not create copy relocs"));
d979 1
a979 1
  { return this->shared() || this->pie(); }
d987 7
a993 1
  { return !this->shared() && !this->relocatable(); }
a1023 9
  // RETURN whether SYMBOL_NAME should be kept, according to symbols_to_retain_.
  bool
  should_retain_symbol(const char* symbol_name) const
    {
      if (symbols_to_retain_.empty())    // means flag wasn't specified
        return true;
      return symbols_to_retain_.find(symbol_name) != symbols_to_retain_.end();
    }

a1033 8
  bool
  icf_enabled() const
  { return this->icf_status_ != ICF_NONE; }

  bool
  icf_safe_folding() const
  { return this->icf_status_ == ICF_SAFE; }

a1083 14
  enum Icf_status
  {
    // Do not fold any functions (Default or --icf=none).
    ICF_NONE,
    // All functions are candidates for folding. (--icf=all).
    ICF_ALL,	
    // Only ctors and dtors are candidates for folding. (--icf=safe).
    ICF_SAFE
  };

  void
  set_icf_status(Icf_status value)
  { this->icf_status_ = value; }

a1116 2
  // Whether to do code folding.
  Icf_status icf_status_;
d1135 1
a1135 1
  // Libraries excluded from automatic export, via --exclude-libs.
a1136 2
  // List of symbol-names to keep, via -retain-symbol-info.
  Unordered_set<std::string> symbols_to_retain_;
a1194 12
  enum Input_file_type
  {
    // A regular file, name used as-is, not searched.
    INPUT_FILE_TYPE_FILE,
    // A library name.  When used, "lib" will be prepended and ".so" or
    // ".a" appended to make a filename, and that filename will be searched
    // for using the -L paths.
    INPUT_FILE_TYPE_LIBRARY,
    // A regular file, name used as-is, but searched using the -L paths.
    INPUT_FILE_TYPE_SEARCHED_FILE
  };

d1196 2
a1197 1
  // type: the type of this input file.
d1205 2
a1206 2
    : name_(), type_(INPUT_FILE_TYPE_FILE), extra_search_path_(""),
      just_symbols_(false), options_()
d1209 1
a1209 1
  Input_file_argument(const char* name, Input_file_type type,
d1213 1
a1213 1
    : name_(name), type_(type), extra_search_path_(extra_search_path),
d1221 1
a1221 1
  Input_file_argument(const char* name, Input_file_type type,
d1225 1
a1225 1
    : name_(name), type_(type), extra_search_path_(extra_search_path),
d1239 1
a1239 5
  { return type_ == INPUT_FILE_TYPE_LIBRARY; }

  bool
  is_searched_file() const
  { return type_ == INPUT_FILE_TYPE_SEARCHED_FILE; }
d1258 1
a1258 5
  {
    return (this->is_lib()
	    || this->is_searched_file()
	    || !this->extra_search_path_.empty());
  }
d1265 1
a1265 1
  Input_file_type type_;
@


1.106.2.2
log
@	PR 10860
	* options.h (class General_options): Add --warn-common.
	* resolve.cc (Symbol_table::resolve): Handle --warn-common when
	merging two common symbols.
	(Symbol_table::should_override): Handle --warn-common when merging
	a common symbol with a defined symbol.  Use report_resolve_problem
	for multiple definitions.
	(Symbol_table::report_resolve_problem): New function.
	* symtab.h (class Symbol_table): Declare report_resolve_problem.
@
text
@a914 4
  DEFINE_bool(warn_common, options::TWO_DASHES, '\0', false,
	      N_("Warn about duplicate common symbols"),
	      N_("Do not warn about duplicate common symbols (default)"));

@


1.106.2.3
log
@	Bring over from mainline:
	2010-01-04  Ian Lance Taylor  <iant@@google.com>

	PR 10980
	* options.h (class General_options): Add --add-needed and
	--copy-dt-needed-entries.  Tweak --as-needed help entry.
	* object.cc (Input_objects::check_dynamic_dependencies): Give an
	error if --copy-dt-needed-entries aka --add-needed is used and
	would cause a change in behaviour.
@
text
@d3 1
a3 1
// Copyright 2006, 2007, 2008, 2009, 2010 Free Software Foundation, Inc.
a582 4
  DEFINE_bool(add_needed, options::TWO_DASHES, '\0', false,
	      N_("Not supported"),
	      N_("Do not copy DT_NEEDED tags from shared libraries"));

d588 2
a589 2
              N_("Only set DT_NEEDED for shared libraries if used"),
              N_("Always DT_NEEDED for shared libraries"));
a629 4
  DEFINE_bool(copy_dt_needed_entries, options::TWO_DASHES, '\0', false,
	      N_("Not supported"),
	      N_("Do not copy DT_NEEDED tags from shared libraries"));

@


1.105
log
@	(General_options::no_keep_memory): Remove incorrect short option.
@
text
@d1482 10
@


1.104
log
@Sriraman Tallam  <tmsriram@@google.com>

	* icf.cc (Icf::find_identical_sections): Unfold symbols that have
	been maked as --keep-unique.
	(Icf::unfold_section): New function.
	* icf.h (Icf::unfold_section): New function.
	* options.h (General_options::keep_unique): New option.
	* testsuite/Makefile.am: Add commands to build icf_keep_unique_test.
	* testsuite/Makefile.in: Regenerate.
	* testsuite/icf_keep_unique_test.sh: New file.
	* testsuite/icf_keep_unique_test.cc: New file.
@
text
@d802 3
a804 2
  DEFINE_bool(no_keep_memory, options::TWO_DASHES, 's', false,
              N_("Use less memory and more disk I/O (included only for compatibility with GNU ld)"), NULL);
@


1.103
log
@*** empty log message ***
@
text
@d817 1
a817 1
              N_("Fold identical functions"),
d827 3
@


1.102
log
@	PR 10237
	* options.cc (General_options::parse_V): Set printed_version_.
	(General_options::General_options): Initialize printed_version_.
	* options.h (class General_options): Add printed_version_ field.
	* gold.cc (queue_initial_tasks): If there are no input files,
	don't give a fatal error if we printed the version information.
	(queue_middle_tasks): If using -r with a shared object, give a
	fatal error rather than an ordinary error.
@
text
@d816 11
@


1.101
log
@	PR 10030
	* yyscript.y: Parse TARGET.
	* script.cc (script_set_target): New function.
	* script-c.h (script_set_target): Declare.
	* options.cc (General_options::string_to_object_format): Rename
	from string_to_object_format in anonymous namespace.  Change
	callers.
	* options.h (class General_options): Declare
	string_to_object_format.
@
text
@d949 5
d1098 2
d1116 1
a1116 1
  // Wheater we have seen one of the options that require incremental
@


1.100
log
@	PR 10141
	* options.h (class General_options): Add -z lazy and -z now.  Sort
	-z options into alphabetical order.
	* layout.cc (Layout::finish_dynamic_section): Handle -z now.
@
text
@d991 5
@


1.99
log
@2009-06-05  Doug Kwan  <dougkwan@@google.com>

	* Makefile.am (CCFILES): Add target.cc.
	* Makefile.in: Regenerate.
	* i386.cc (class Target_i386): Define new virtual method to
	override do_is_local_label_name in parent.
	* object.cc (Sized_relobj::do_count_local_symbols): Discard
	local symbols if --discard-locals or -X is given.
	* options.h (class General_options): Declare new options
	'--discard-locals' and '-X' for discarding locals.
	* target.h (class Target): Define new methods is_local_label_name.
	Declare new virtual method do_is_local_label_name.
	* target.cc: New file.
	* testsuite/Makefile.am (check_PROGRAMS): Add discard_locals_test.
	(check_SCRIPTS): Add discard_locals_test.sh.
	(check_DATA): Add discard_local_tests.syms.
	(discard_locals_test_SOURCES, discard_locals_test_LDFLAGS): Define.
	(discard_local_tests.syms, discard_locals_test.o): New make rules.
	* testsuite/Makefile.in: Regenerate.
	* testsuite/discard_locals_test.c: New file.
	* testsuite/discard_locals_test.sh: Same.
@
text
@a898 4
  DEFINE_uint64(max_page_size, options::DASH_Z, '\0', 0,
                N_("Set maximum page size to SIZE"), N_("SIZE"));
  DEFINE_bool(noexecstack, options::DASH_Z, '\0', false,
              N_("Mark output as not requiring executable stack"), NULL);
d905 3
d911 2
d925 8
a935 3
  DEFINE_bool(origin, options::DASH_Z, '\0', false,
	      N_("Mark DSO to indicate that needs immediate $ORIGIN "
                 "processing at runtime"), NULL);
@


1.98
log
@2009-05-19  Doug Kwan  <dougkwan@@google.com>

	* archive.cc (Archive::Archive): Move constructor from archive.h
	to here.  Initialize no_export_.
	(Archive::get_elf_object_for_member): Set no_export flag of object.
	* archive.h (Archive::Archive): Move constructor body to
	archive.cc.
	(Archive::no_export): New method.
	(Archive::no_export_): New field.
	* object.h (Object::Object): Initialize no_export_ to false.
	(Object::no_export, Object::set_no_export): New methods.
	(Object::no_export_): New field.
	* options.cc (General_options::parse_exclude_libs): New method.
	(General_options::check_excluded_libs) Same.
	* options.h (exclude_libs): New option.
	(General_options::check_excluded_libs): New method declaration.
	(General_options::excluded_libs_): New field.
	* symtab.cc (Symbol_table::add_from_relobj): Hide symbols with
	default or protected visibility if an object has no-export flag set.
	testsuite/Makefile.am (check_PROGRAMS): Add exclude_libs_test.
	(check_SCRIPTS): Add exclude_libs_test.sh.
	(check_DATA): Add exclude_libs_test.syms.
	(MOSTLYCLEANFILES): Add exclude_libs_test.syms,
	libexclude_libs_test_1.a and libexclude_libs_test_2.a.
	(exclude_libs_test_SOURCES, exclude_libs_test_DEPENDENCIES,
	exclude_libs_test_LDFLAGS and exclude_libs_test_LDADD): Define.
	(exclude_libs_test.syms, libexclude_libs_test_1.a,
	libexclude_libs_test_2.a): New rules.
	* testsuite/Makefile.in: Regenerate.
	* testsuite/exclude_libs_test.c: New file.
	* testsuite/exclude_libs_test.sh: Ditto.
	* testsuite/exclude_libs_test_1.c: Ditto.
	* testsuite/exclude_libs_test_2.c: Ditto.
@
text
@d648 3
@


1.97
log
@	* gold.h (Incremental_argument_list): Remove (invalid) forward
	declaration.
	* incremental.cc (Incremental_inputs::report_achive): New method.
	(Incremental_inputs::report_object): New method.
	(Incremental_inputs::report_script): New method.
	(Incremental_inputs::finalize_inputs): New method.
	(Incremental_inputs::finalize): Call finalize_inputs().
	(Incremental_inputs::sized_create_incremental_inputs_section_data):
	Create inputs entries.
	* incremental.h (Incremental_input_type): New enum.
	(Incremental_inputs::Incremental_input): Initialize new fields.
	(Incremental_inputs::report_inputs): New method.
	(Incremental_inputs::report_achive): New method.
	(Incremental_inputs::report_object): New method.
	(Incremental_inputs::report_script): New method.
	(Incremental_inputs::finalize_inputs): New method.
	(Incremental_inputs::Input_info): New struct.
	(Incremental_inputs::Input_info_map): New typedef.
	(Incremental_inputs::lock_): New field.
	(Incremental_inputs::Inputs_): New field.
	(Incremental_inputs::Inputs_map): New field.
	* main.cc (main): Call Incremental_input::report_inputs.
	* options.h (Input_argument_list): Typedef moved from
	Input_arguments.
	(Input_file_group::Files): Remove, use ::Input_argument_list.
	(Input_file_group::Input_argument_list): Remove, use
	::Input_argument_list.
	* plugin.cc (Plugin_manager::add_input_file): Add error in
	incremental build.
	* read_syms.cc (do_read_syms): Call Incremental_input::report_*
	functions.
	* script.cc (read_input_script): Call
	Incremental_input::report_script.
	* script.h (Script_info): New class.
@
text
@d663 4
d1029 5
d1099 2
@


1.96
log
@	* readsyms.cc (Read_symbols::incompatible_warning): New function.
	(Read_symbols::requeue): New function.
	(Read_symbols::do_read_symbols): If make_elf_object fails because
	the target type is not configured, and the file was searched for,
	issue a warning and retry with the next directory.
	(Add_symbols::run): If the file has an incompatible format, and
	it was searched for, requeue the Read_symbols task.  On error,
	release the object.
	* readsyms.h (class Read_symbols): Add dirindex_ field.  Add
	dirindex parameter to constructor.  Change all callers.  Declare
	incompatible_warning and requeue.
	(class Add_symbols): Add dirpath_, dirindex_, mapfile_,
	input_argument_ and input_group_ fields.  Add them to
	constructor.  Change all callers.
	(class Read_script): Add dirindex_ field.  Add it to constructor.
	Change all callers.
	* archive.cc (Archive::setup): Remove input_objects parameter.
	Change all callers.
	(Archive::get_file_and_offset): Likewise.
	(Archive::read_all_symbols): Likewise.
	(Archive::read_symbols): Likewise.
	(Archive::get_elf_object_for_member): Remove input_objects
	parameter.  Add punconfigured parameter.  Change all callers.
	(Archive::add_symbols): Change return type to bool.  Check return
	value of include_member.
	(Archive::include_all_members): Likewise.
	(Archive::include_member): Change return type to bool.  Return
	false if first included object has incompatible target.  Set
	included_member_ field.
	(Add_archive_symbols::run): If add_symbols returns false, requeue
	Read_symbols task.
	* archive.h (class Archive): Add included_member_ field.
	Initialize it in constructor.  Add input_file and searched_for
	methods.  Update declarations.
	(class Add_archive_symbols): Add dirpath_, dirindex_, and
	input_argument_ fields.  Add them to constructor.  Change all
	callers.
	* script.cc: Include "target-select.h".
	(class Parser_closure): Add skip_on_incompatible_target_ and
	found_incompatible_target_ fields.  Add
	skip_on_incompatible_target parameter to constructor.  Change all
	callers.  Add methods skip_on_incompatible_target,
	clear_skip_on_incompatible_target, found_incompatible_target, and
	set_found_incompatible_target.
	(read_input_script): Add dirindex parameter.  Change all callers.
	If parser finds an incompatible target, requeue Read_symbols
	task.
	(script_set_symbol): Clear skip_on_incompatible_target in
	closure.
	(script_add_assertion, script_parse_option): Likewise.
	(script_start_sections, script_add_phdr): Likewise.
	(script_check_output_format): New function.
	* script.h (read_input_script): Update declaration.
	* script-c.h (script_check_output_format): Declare.
	* yyscript.y (file_cmd): Handle OUTPUT_FORMAT.
	(ignore_cmd): Remove OUTPUT_FORMAT.
	* fileread.cc (Input_file::Input_file): Add explicit this.
	(Input_file::will_search_for): New function.
	(Input_file::open): Add pindex parameter.  Change all callers.
	* fileread.h (class Input_file): Add input_file_argument method.
	Declare will_search_for.  Update declarations.
	* object.cc (make_elf_object): Add punconfigured parameter.
	Change all callers.
	* object.h (class Object): Make input_file public.  Add
	searched_for method.
	(make_elf_object): Update declaration.
	* dirsearch.cc (Dirsearch::find): Add pindex parameter.  Use it to
	restart search.
	* dirsearch.h (class Dirsearch): Update declaration.
	* options.h (class General_options): Add --warn-search-mismatch.
	* parameters.cc (Parameters::is_compatible_target): New function.
	* parameters.h (class Parameters): Declare is_compatible_target.
	* workqueue.cc (Workqueue::add_blocker): New function.
	* workqueue.h (class Workqueue): Declare add_blocker.
@
text
@d1278 2
d1286 1
a1286 2
  typedef std::vector<Input_argument> Files;
  typedef Files::const_iterator const_iterator;
d1308 1
a1308 1
  Files files_;
a1315 1
  typedef std::vector<Input_argument> Input_argument_list;
@


1.95
log
@	PR 6811
	* options.h (class Search_directory): Add is_system_directory.
	(class General_options): Declare is_in_system_directory.
	* options.cc (get_relative_sysroot): Make static.
	(get_default_sysroot): Make static.
	(General_optoins::is_in_system_directory): New function.
	* fileread.cc (Input_file::is_in_system_directory): New function.
	* fileread.h (class Input_file): Declare is_in_system_directory.
	* object.h (class Object): Add is_in_system_directory.
	(class Input_objects): Remove system_library_directory_ field.
	* object.cc (Input_objects::add_object): Don't set
	system_library_directory_.
	(input_objects::found_in_system_library_directory): Remove.
	* symtab.cc (Symbol_table::write_globals): Remove input_objects
	parameter.  Change all callers.
	(Symbol_table::sized_write_globals): Likewise.
	(Symbol_table::warn_about_undefined_dynobj_symbol): Likewise.
	Call Object::is_in_system_directory.
	* symtab.h (class Symbol_table): Update declarations.
@
text
@d857 4
@


1.94
log
@	* options.h (enum Incremental_disposition): Define.
	(class General_options): Add new options: --incremental,
	--incremental_changed, --incremental_unchanged,
	--incremental_unknown.  Add incremental_disposition_ and
	implicit_incremental_ fields.
	(General_options::incremental_disposition): New function.
	(class Position_dependent_options): Add incremental_disposition
	option.
	(Position_dependent_options::copy_from_options): Set incremental
	dispositions.
	* options.cc (General_options::parse_incremental_changed): New
	function.
        (General_options::parse_incremental_unchanged): New function.
        (General_options::parse_incremental_unknown): New function.
        (General_options::General_options): Initialize new fields
	incremental_disposition_ and implicit_incremental_.
        (General_options::finalize): Check for uasge of --incremental-*
	without --incremental.
@
text
@d537 5
d543 1
d545 3
d549 4
d978 4
@


1.93
log
@2009-01-20  Sriraman Tallam <tmsriram@@google.com>

	* Makefile.am (CCFILES): Add gc.cc.
	(HFILES): Add gc.h.
	* Makefile.in: Regenerate.
	* gold.cc (Gc_runner): New class.
	(queue_initial_tasks): Call garbage collection related tasks
	when corresponding options are invoked.
	(queue_middle_gc_tasks): New function.
	(queue_middle_tasks): Reorder tasks to allow relocs to be read and
	processed early before laying out sections during garbage collection.
	* gold.h (queue_middle_gc_tasks): New function.
	(is_prefix_of): Move from "layout.cc".
	* i386.cc (Target_i386::gc_process_relocs): New function.
	* layout.cc (is_prefix_of): Remove. Move to "gold.h"
	* main.cc (main): Create object of class "Garbage_collection".
	* object.cc (Relobj::copy_symbols_data): New function.
	(Relobj::is_section_name_included): New function.
	(Sized_relobj::do_layout): Allow this function to be called twice
	during garbage collection and defer layout of section during the
	first call.
	* object.h (Relobj::get_symbols_data): New function.
	(Relobj::is_section_name_included): New function.
	(Relobj::copy_symbols_data): New function.
	(Relobj::set_symbols_data): New function.
	(Relobj::get_relocs_data): New function.
	(Relobj::set_relocs_data): New function.
	(Relobj::is_output_section_offset_invalid): New pure virtual function.
	(Relobj::gc_process_relocs): New function.
	(Relobj::do_gc_process_relocs): New pure virtual function.
	(Relobj::sd_): New data member.
	(Sized_relobj::is_output_section_offset_invalid): New function.
	(Sized_relobj::do_gc_process_relocs): New function.
	* options.h (General_options::gc_sections): Modify to not be a no-op.
	(General_options::print_gc_sections): New option.
	* plugin.cc (Plugin_finish::run): Remove function call to
	Plugin_manager::layout_deferred_objects.  Move it to "gold.cc".
	* powerpc.cc (Target_powerpc::gc_process_relocs): New function.
	* reloc.cc (Read_relocs::run): Add task to process relocs and
	determine unreferenced sections when doing garbage collection.
	(Gc_process_relocs): New class.
	(Sized_relobj::do_gc_process_relocs): New function.
	(Sized_relobj::do_scan_relocs): Don't try to scan the relocs for
	sections that are garbage collected.
	* reloc.h (Gc_process_relocs): New class.
	* sparc.cc (Target_sparc::gc_process_relocs): New function.
	* symtab.cc (Symbol::should_add_dynsym_entry): Do not add entries for
	symbols whose corresponding sections are garbage collected.
	(Symbol_table::Symbol_table): Add new parameter for the garbage
	collection object.
	(Symbol_table::gc_mark_undef_symbols): New function.
	(Symbol_table::gc_mark_symbol_for_shlib): New function.
	(Symbol_table::gc_mark_dyn_syms): New function.
	(Symbol_table::resolve): Do not treat symbols seen in dynamic objects
	as garbage.
	(Symbol_table::add_from_object): Likewise.
	(Symbol_table::add_from_relobj): When building shared objects, do not
	treat externally visible symbols as garbage.
	(Symbol_table::sized_finalize_symbol): Do not check dynamic symbol
	table information for static and relocatable links.
	* symtab.h (Symbol_table::set_gc): New function.
	(Symbol_table::gc): New function.
	(Symbol_table::gc_mark_undef_symbols): New function.
	(Symbol_table::gc_mark_symbol_for_shlib): New function.
	(Symbol_table::gc_mark_dyn_syms): New function.
	(Symbol_table::gc_): New data member.
	* target.h (Sized_target::gc_process_relocs): New pure virtual
	function.
	* x86_64.cc (Target_x86_64::gc_process_relocs): New function.
	* testsuite/testfile.cc (Target_test::gc_process_relocs): New function.
@
text
@d59 12
d675 13
d797 1
a797 1
              N_("Remove unused sections"), 
d799 1
a799 1
 
d801 1
a801 1
              N_("List removed unused sections on stderr"), 
d997 7
d1061 8
d1105 1
d1112 1
@


1.92
log
@* options.h (General_options::gc_sections): Define as a no-op for now.
(General_options::no_keep_memory): Ditto.
(General_options::Bshareable): Define.
* options.cc (General_options::finalize): Honor -Bshareable.
@
text
@d3 1
a3 1
// Copyright 2006, 2007, 2008 Free Software Foundation, Inc.
a583 4
  DEFINE_bool(gc_sections, options::TWO_DASHES, '\0', true,
	      N_("(noop) Garbage collect sections"),
	      N_("(noop) Do not garbage collect sections"));

d771 8
@


1.91
log
@	* options.h (class General_options): Add --no case for
	--export-dynamic.
@
text
@d584 4
d761 3
d767 3
@


1.90
log
@2008-12-05  Rafael Avila de Espindola  <espindola@@google.com>

	* options.cc (General_options::parse_plugin_opt): New.
	(General_options::add_plugin): The argument now is just the filename.
	(General_options::add_plugin_option): New.
	* options.h (plugin_opt): New.
	(add_plugin): Change argument name.
	(add_plugin_option): New.
	* plugin.cc (Plugin::load): Don't parse the plugin option.
	* plugin.h (Plugin::Plugin): Rename argument. Init filename_.
	(Plugin::add_option): New.
	(Plugin::args_): Change type.
	(Plugin::filename_): New.
	(Plugin_manager::add_plugin_option): New.
	* testsuite/Makefile.am (plugin_test_1): Use new syntax.
	* testsuite/Makefile.in: Regenerate.
@
text
@d639 2
a640 1
              N_("Export all dynamic symbols"), NULL);
@


1.89
log
@	* layout.cc (Layout::include_section): Check for SHF_EXCLUDE.
	Handle --strip-lto-sections option.
	* options.h (strip_lto_sections): New option.
@
text
@d707 3
a709 1
                 N_("Load a plugin library"), N_("PLUGIN[,ARG,...]"));
d996 5
a1000 1
  add_plugin(const char* arg);
@


1.88
log
@	* options.cc (General_options::parse_dynamic_list): New function.
	* options.h (General_options): New flags dynamic_list,
	dynamic_list_data, dynamic_list_cpp_new, and
	dynamic_list_cpp_typeinfo.  New variable dynamic_list_.
	(General_options::in_dynamic_list): New function.
	* script.cc (Lex::Mode): New enum DYNAMIC_LIST.
	(Lex::can_start_name): Add support for DYNAMIC_LIST mode.
	(Lex::can_continue_name): Likewise.
	(yylex): Likewise.
	(read_script_file): New parameter script_options.
	(read_dynamic_list): New function.
	(Script_options::define_dynamic_list): New function.
	(dynamic_list_keyword_parsecodes): New variable.
	(dynamic_list_keywords): New variable.
	* script.h (Script_options::define_dynamic_list): New function
	prototype.
	(read_dynamic_list): New function prototype.
	* symtab.cc (strprefix): New macro.
	(Symbol::should_add_dynsym_entry): Support dynamic_list,
	dynamic_list_data, dynamic_list_cpp_new, and
	dynamic_list_cpp_typeinfo.
	* yyscript.y (PARSING_DYNAMIC_LIST): New token.
	(dynamic_list_expr): New rule.
	(dynamic_list_nodes): Likewise.
	(dynamic_list_node): Likewise.
	* testsuite/Makefile.am (dynamic_list): New test.
	* testsuite/Makefile.in: Regenerated.
	* testsuite/dynamic_list.t: New file.
	* testsuite/dynamic_list.sh: New file.
@
text
@d751 2
@


1.87
log
@Add plugin functionality for link-time optimization (LTO).

include/:
	* plugin-api.h: New file.

gold/:
	* configure.ac (plugins): Add --enable-plugins option.
	* configure: Regenerate.
	* config.in: Regenerate.
	* Makefile.am (LIBDL): New variable.
	(CCFILES): Add plugin.cc.
	(HFILES): Add plugin.h.
	(ldadd_var): Add LIBDL.
	* Makefile.in: Regenerate.

	* archive.cc: Include "plugin.h".
	(Archive::setup): Don't preread archive symbols when using a plugin.
	(Archive::get_file_and_offset): Add memsize parameter.  Change callers.
	(Archive::get_elf_object_for_member): Call plugin hooks for claiming
	files.
	(Archive::include_member): Add symbols from plugin objects.
	* archive.h (Archive::get_file_and_offset): Add memsize parameter.
	* descriptors.cc (Descriptors::open): Check for file descriptors
	abandoned by plugins.
	(Descriptors::claim_for_plugin): New function.
	* descriptors.h (Descriptors::claim_for_plugin): New function.
	(Open_descriptor::is_claimed): New field.
	(claim_descriptor_for_plugin): New function.
	* fileread.cc (File_read::claim_for_plugin): New function.
	* fileread.h (File_read::claim_for_plugin): New function.
	(File_read::descriptor): New function.
	* gold.cc: Include "plugin.h".
	(queue_initial_tasks): Add task to call plugin hooks for generating
	new object files.
	* main.cc: Include "plugin.h".
	(main): Load plugin libraries.
	* object.h (Pluginobj): Declare.
	(Object::pluginobj): New function.
	(Object::do_pluginobj): New function.
	(Object::set_target): New function.
	* options.cc: Include "plugin.h".
	(General_options::parse_plugin): New function.
	(General_options::General_options): Initialize plugins_ field.
	(General_options::add_plugin): New function.
	* options.h (Plugin_manager): Declare.
	(General_options): Add --plugin option.
	(General_options::has_plugins): New function.
	(General_options::plugins): New function.
	(General_options::add_plugin): New function.
	(General_options::plugins_): New field.
	* plugin.cc: New file.
	* plugin.h: New file.
	* readsyms.cc: Include "plugin.h".
	(Read_symbols::do_read_symbols): Check for archive before checking
	for ELF file.  Call plugin hooks to claim files.
	* resolve.cc (Symbol_table::resolve): Record when symbol is referenced
	from a real object file; force override when processing replacement
	files.
	* symtab.cc (Symbol::init_fields): Initialize in_real_elf_ field.
	(Symbol::init_base_object): Likewise.
	(Symbol::init_base_output_data): Likewise.
	(Symbol::init_base_output_segment): Likewise.
	(Symbol::init_base_constant): Likewise.
	(Symbol::init_base_undefined): Likewise.
	(Symbol::output_section): Assert that object is not a plugin.
	(Symbol_table::add_from_pluginobj): New function.
	(Symbol_table::sized_finalize_symbol): Treat symbols from plugins as
	undefined.
	(Symbol_table::sized_write_globals): Likewise.
	(Symbol_table::add_from_pluginobj): Instantiate template.
	* symtab.h (Sized_pluginobj): Declare.
	(Symbol::in_real_elf): New function.
	(Symbol::set_in_real_elf): New function.
	(Symbol::in_real_elf_): New field.
	(Symbol_table::add_from_pluginobj): New function.

	* testsuite/Makefile.am (AM_CFLAGS): New variable.
	(LIBDL): New variable.
	(LDADD): Add LIBDL.
	(check_PROGRAMS): Add plugin_test_1 and plugin_test_2.
	(check_SCRIPTS): Add plugin_test_1.sh and plugin_test_2.sh.
	(check_DATA): Add plugin_test_1.err and plugin_test_2.err.
	(MOSTLYCLEANFILES): Likewise.
	* testsuite/Makefile.in: Regenerate.
	* testsuite/plugin_test.c: New file.
	* testsuite/plugin_test_1.sh: New file.
	* testsuite/plugin_test_2.sh: New file.
@
text
@d623 12
d948 5
d1002 4
@


1.86
log
@* options.h (General_options::output_is_executable): New.
(General_options::output_is_pie): New.
* i386.cc (Target_i386::define_tls_base_symbol): Use SEGMENT_START
for shared libraries.
* x86_64.cc (Target_x86_64::define_tls_base_symbol): Likewise.
@
text
@d57 1
d693 5
d700 1
d926 10
d973 4
d983 2
@


1.85
log
@2008-09-11  Chris Demetriou  <cgd@@google.com>

        * options.h (origin): New -z option.
        * layout.cc (Layout:finish_dynamic_section): If "-z origin"
        is specified, set DF_ORIGIN in DT_FLAGS and set DF_1_ORIGIN
        in DT_FLAGS_1.
@
text
@d868 14
@


1.84
log
@2008-08-06  Cary Coutant <ccoutant@@google.com>

	* archive.cc (Archive::total_archives, Archive::total_members)
	(Archive::total_members_loaded): New variables.
	(Archive::setup): Add parameter.  Add option to preread
	archive symbols.
	(Archive::read_armap): Add counter.
	(Archive::get_file_and_offset): New function.
	(Archive::get_elf_object_for_member): New function.
	(Archive::read_all_symbols): New function.
	(Archive::read_symbols): New function.
	(Archive::add_symbols): Add counters.
	(Archive::include_all_members): Use armap to find members if it's
	already built.
	(Archive::include_member): Skip reading symbols if already read.
	Factored code into Archive::get_file_and_offset and
	Archive::get_elf_object_for_member.  Changed call to
	Mapfile::report_include_archive_member.
	(Archive::print_stats): New function.
	* archive.h: Declare Object and Read_symbols_data classes.
	(Archive::Archive): Add initializers for new members.
	(Archive::setup): Add parameter.
	(Archive::print_stats): New function.
	(Archive::total_archives, Archive::total_members)
	(Archive::total_members_loaded): New variables.
	(Archive::get_file_and_offset): New function.
	(Archive::get_elf_object_for_member): New function.
	(Archive::read_all_symbols): New function.
	(Archive::read_symbols): New function.
	(Archive::Archive_member): New class.
	(Archive::members_): New member.
	(Archive::num_members_): New member.
	* main.cc: Include archive.h.
	(main): Call Archive::print_stats.
	* mapfile.cc (Mapfile::report_include_archive_member): Delete
	archive parameter; member_name is now the fully-decorated name.
	* mapfile.h (Mapfile::report_include_archive_member): Likewise.
	* options.h: (General_options): Add --preread-archive-symbols option.
	* readsyms.cc (Read_symbols::do_read_symbols): Change call to
	Archive::setup.
@
text
@d840 3
@


1.83
log
@	* options.h (class General_options): Define --check-sections.
	* layout.cc (Layout::set_segment_offsets): Handle
	--check-sections.
@
text
@d692 2
@


1.82
log
@	* options.h (class General_options): Define -n/--nmagic and
	-N/--omagic.
	* options.cc (General_options::finalize): For -n/--nmagic or
	-N/--omagic, set -static.
	* layout.cc (Layout::attach_allocated_section_to_segment): If
	-N/--omagic, don't put read-only and read-write sections in
	different segments.
	(Layout::find_first_load_seg): If -N/--omagic, don't insist on
	finding a read-only segment.
	(Layout::set_segment_offsets): If -N/--omagic or -n/--nmagic,
	don't set the minimum segment alignment to the common page size,
	and don't set the file offset to the address modulo the page size.
	* script-sections.cc (Script_sections::create_segments): If
	-n/--omagic, don't put read-only and read-write sections in
	different segments.
@
text
@d579 4
@


1.81
log
@	* cref.cc: New file.
	* cref.h: New file.
	* options.h (class General_options): Add --print-symbol-counts.
	* main.cc (main): Issue defined symbol report if requested.
	* archive.cc (Archive::interpret_header): Make into a const member
	function.
	(Archive::add_symbols): Call Input_objects::archive_start and
	archive_stop.
	(Archive::const_iterator): Define new class.
	(Archive::begin, Archive::end): New functions.
	(Archive::include_all_members): Rewrite to use iterator.
	(Archive::count_members): New function.
	* archive.h (class Archive): Update declarations.
	(Archive::filename): New function.
	* object.cc: Include "cref.h".
	(Sized_relobj::Sized_relobj): Initialize defined_count_.
	(Sized_relobj::do_get_global_symbol_counts): New function.
	(Input_objects::add_object): Add object to cross-referencer.
	(Input_objects::archive_start): New function.
	(Input_objects::archive_stop): New function.
	(Input_objects::print_symbol_counts): New function.
	* object.h: Declare Cref and Archive.
	(Object::get_global_symbol_counts): New function.
	(Object::do_get_global_symbol_counts): New pure virtual function.
	(class Sized_relobj): Add defined_count_ field.  Update
	declarations.
	(class Input_objects): Add cref_ field.  Update constructor.
	Update declarations.
	* dynobj.cc (Sized_dynobj::Sized_dynobj): Initialize symbols_ and
	defined_count_.
	(Sized_dynobj::do_add_symbols): Allocate symbols_ if printing
	symbol counts.
	(Sized_dynobj::do_get_global_symbol_counts): New function.
	* dynobj.h (class Sized_dynobj): Add fields symbols_ and
	defined_count_.  Update declarations.  Define Symbols typedef.
	* symtab.cc (Symbol_table::add_from_relobj): Add defined
	parameter.  Change all callers.
	(Symbol_table::add_from_dynobj): Add sympointers and defined
	parameters.  Change all callers.
	* symtab.h (class Symbol_table): Update declarations.
	* Makefile.am (CCFILES): Add cref.cc.
	(HFILES): Add cref.h.
	* Makefile.in: Rebuild.
@
text
@d662 6
@


1.80
log
@elfcpp/:
	* dwarf.h (enum DW_FORM): Define.
gold/:
	* reduced_debug_output.cc: New file.
	* reduced_debug_output.h: New file.
	* options.h (class General_optoins): Add --strip-debug-non-line.
	* options.cc (General_options::finalize): Add strip_debug_non_line
	to the strip heirarchy.
	* layout.h (class Layout): Add debug_abbrev_ and debug_info_
	fields.
	* layout.cc: Include "reduced_debug_output.h".
	(Layout::Layout): Initialize new fields.
	(line_only_debug_sections): New static array.
	(is_lines_only_debug_sections): New static inline function.
	(Layout::include_section): Handle --strip-debug-non-line.
	(Layout::make_output_section): If --strip-debug-non-line, build
	new output sections for .debug_abbrev and .debug_info.
	* dwarf_reader.cc (read_unsigned_LEB_128): Move to namespace
	gold.  Warn about possible overflow.
	(read_signed_LEB_128): Likewise.
	* dwarf_reader.h: (read_unsigned_LEB_128): Declare.
	(read_signed_LEB_128): Declare.
	* Makefile.am (CCFILES): Add reduced_debug_output.cc.
	(HFILES): Add reduced_debug_output.h.
	* Makefile.in: Rebuild.
@
text
@d682 4
@


1.79
log
@	* mapfile.cc: New file.
	* mapfile.h: New file.
	* options.h (class General_options): Add -M/--print-map and -Map.
	* options.cc (General_options::finalize): Make -M equivalent to
	-Map -.
	* main.cc: Include <cstdio> and "mapfile.h".
	(main): Open mapfile if requested.
	* gold.cc (class Middle_runner): Add mapfile_ field.  Update
	constructor.  Change caller.
	(queue_initial_tasks): Add mapfile parameter.  Change caller.
	(queue_middle_tasks): Likewise.
	* gold.h (queue_initial_tasks, queue_middle_tasks): Update
	declarations.
	* archive.cc: Include "mapfile.h".
	(Archive::add_symbols): Add mapfile parameter.  Change all
	callers.  Pass mapfile, symbol, and reason to include_member.
	(Archive::include_all_members): Add mapfile parameter.  Change all
	callers.
	(Archive::include_member): Add mapfile, sym, and why parameters.
	Change all callers.  Report inclusion to map file.
	* archive.h: Include "fileread.h".
	(class Archive): Update declarations.
	(Archive::file): New const method.
	(class Add_archive_symbols): Add mapfile_ field.  Update
	constructor.  Change all callers.
	* readsyms.h (class Read_symbols): Likewise.
	(class Finish_group): Likewise.
	(class Read_script): Likewise.
	* common.cc: Include "mapfile.h".
	(Symbol_table::allocate_commons): Add mapfile parameter.  Change
	all callers.
	(Symbol_table::do_allocate_commons): Likewise.
	(Symbol_table::do_allocate_commons_list): Likewise.  Report common
	symbol allocation to mapfile.
	* common.h (class Allocate_commons_task): Add mapfile_ field.
	Update constructor.  Change all callers.
	* symtab.h (class Symbol_table): Update declarations.
	* layout.cc: Include "mapfile.h".
	(Layout_task_runner::run): Print information to mapfile.
	(Layout::create_gold_note): Change Output_data_fixed_space to
	Output_data_zero_fill.
	(Layout::create_build_id): Likewise.
	(Layout::print_to_mapfile): New function.
	* layout.h (class Layout_task_runner): Add mapfile_ field.  Update
	constructor.  Change caller.
	(class Layout): Declare print_to_mapfile.
	* output.cc (Output_section::Input_section::print_to_mapfile): New
	function.
	(Output_section::add_input_section): If producing a map, always
	add to input_sections_ list.
	(Output_section::do_print_to_mapfile): New function.
	(Output_segment::print_sections_to_mapfile): New function.
	(Output_segment::print_section_list_to_mapfile): New function.
	* output.h: Include "mapfile.h".
	(Output_data::print_to_mapfile): New function.
	(Output_data::do_print_to_mapfile): New virtual function.
	(Output_segment_headers::do_print_to_mapfile): New function.
	(Output_file_header::do_print_to_mapfile): New function.
	(Output_data_const::do_print_to_mapfile): New function.
	(class Output_data_const_buffer): Add map_name_ field.  Update
	constructor.  Change all callers.  Add do_print_to_mapfile
	function.
	(class Output_data_fixed_space): Likewise.
	(class Output_data_space): Likewise.
	(class Output_data_zero_fill): New class.
	(Output_data_strtab::do_print_to_mapfile): New function.
	(Output_data_reloc_base::do_print_to_mapfile): New function.
	(Output_relocatable_relocs::do_print_to_mapfile): New function.
	(Output_data_group::do_print_to_mapfile): New function.
	(Output_data_got::do_print_to_mapfile): New function.
	(Output_data_dynamic::do_print_to_mapfile): New function.
	(Output_symtab_xindex::do_print_to_mapfile): New function.
	(class Output_section): Declare do_print_to_mapflie.  Declare
	print_to_mapfile in Input_section.
	(class Output_segment): Declare new functions.
	* object.h (Sized_relobj::symbol_count): New function.
	* script-sections.cc
	(Output_section_element_dot_assignment::set_section_addresses):
	Change Output_data_fixed_space to Output_data_zero_fill.
	(Output_data_expression::do_print_to_mapfile): New function.
	* script.cc (read_input_script): Add mapfile parameter.  Change
	all callers.
	* script.h (read_input_script): Update declaration.
	* ehframe.h (Eh_frame_hdr::do_print_to_mapfile): New function.
	(Eh_frame::do_print_to_mapfile): New function.
	* merge.h (Output_merge_data::do_print_to_mapfile): New function.
	(Output_merge_string::do_print_to_mapfile): New function.
	* i386.cc (Output_data_plt_i386::do_print_to_mapfile): New
	function.
	* sparc.cc (Output_data_plt_sparc::do_print_to_mapfile): New
	function.
	* x86_64.cc (Output_data_plt_x86_64::do_print_to_mapfile): New
	function.
	* Makefile.am (CCFILES): Add mapfile.cc.
	(HFILES): Add mapfile.h.
	* Makefile.in: Rebuild.
@
text
@d711 2
@


1.78
log
@	* options.h (class General_options): Add -z relro.
	* layout.cc (Layout::Layout): Initialize relro_segment_.
	(Layout::add_output_section_data): Return the output section.
	(Layout::make_output_section): Rcognize relro sections and mark
	them appropriately.
	(Layout::attach_allocated_section_to_segment): Put relro sections
	in a PT_GNU_RELRO segment.
	(Layout::create_initial_dynamic_sections): Mark the .dynamic
	section as relro.
	(Layout::segment_precedes): Sort PT_GNU_RELRO segments after
	PT_TLS segments.
	(Layout::linkonce_mapping): Map d.rel.ro.local to
	.data.rel.ro.local.
	(Layout::output_section_name): Us .data.rel.ro.local for any
	section which begins with that.
	* layout.h (class Layout): Update add_output_section_data
	declaration.  Add relro_segment_ field.
	* output.cc (Output_section::Output_section): Initialize is_relro_
	and is_relro_local_ fields.
	(Output_segment::add_output_section): Group relro sections.
	(Output_segment::is_first_section_relro): New function.
	(Output_segment::maximum_alignment): If there is a relro section,
	align the segment to the common page size.
	(Output_segment::set_section_addresses): Track whether we are
	looking at relro sections.  If the last section is a relro
	section, align to the common page size.
	(Output_segment::set_section_list_addresses): Add in_relro
	parameter.  Change all callers.  Align to the page size when
	moving from relro to non-relro section.
	(Output_segment::set_offset): Align memsz of a PT_GNU_RELRO
	segment.
	* output.h (class Output_section): Add is_relro_ and
	is_relro_local_ fields.
	(Output_section::is_relro): New function.
	(Output_section::set_is_relro): New function.
	(Output_section::is_relro_local): New function.
	(Output_section::set_is_relro_local): New function.
	(class Output_segment): Update declarations.
	* i386.cc (Target_i386::got_section): Mark .got section as relro.
	* sparc.cc (Target_sparc::got_section): Likewise.
	* x86_64.cc (Target_x86_64::got_section): Likewise.
	* testsuite/relro_test_main.cc: New file.
	* testsuite/relro_test.cc: New file.
	* testsuite/Makefile.am (check_PROGRAMS): Add relro_test.
	(relro_test_SOURCES, relro_test_DEPENDENCIES): New variables.
	(relro_test_LDFLAGS, relro_test_LDADD): New variables.
	(relro_test.so, relro_test_pic.o): New targets.
	* testsuite/Makefile.in: Rebuild.
@
text
@d657 5
@


1.77
log
@	PR 6049
	* options.h (DEFINE_set): Add VARNAME_begin and VARNAME_end
	functions.
	(class General_options): Remove existing --undefined, and add
	--no-undefined instead.  Add new --undefined as synonym for -u.
	* archive.cc (Archive::add_symbols): Check whether symbol was
	named with -u.
	* gold.cc (queue_middle_tasks): Add -u symbols to symbol table.
	* symtab.h (class Symbol): Rename CONSTANT to IS_CONSTANT; change
	all uses.  Add IS_UNDEFINED.  Update declarations to split
	different versions of init_base.  Declare init_base_undefined.
	(Symbol::is_defined): Handle IS_UNDEFINED.
	(Symbol::is_undefined): Likewise.
	(Symbol::is_weak_undefined): Call is_undefined.
	(Symbol::is_absolute): Handle IS_CONSTANT.
	(class Sized_symbol): Update declarations to split different
	versions of init.  Declare init_undefined.
	(class Symbol_table): Declare new functions.
	* symtab.cc (Symbol::init_base_object): Rename from init_base.
	Change all callers.
	(Symbol::init_base_output_data): Likewise.
	(Symbol::init_base_output_segment): Likewise.
	(Symbol::init_base_constant): Likewise.
	(Symbol::init_base_undefined): New function.
	(Sized_symbol::init_object): Rename from init.  Change all
	callers.
	(Sized_symbol::init_output_data): Likewise.
	(Sized_symbol::init_output_segment): Likewise.
	(Sized_symbol::init_constant): Likewise.
	(Sized_symbol::init_undefined): New function.
	(Symbol_table::add_undefined_symbols_from_command_line): New
	function.
	(Symbol_table::do_add_undefined_symbols_from_command_line): New
	function.
	(Symbol::final_value_is_known): Handle IS_UNDEFINED.
	(Symbol::output_section): Likewise.
	(Symbol::set_output_section): Likewise.
	(Symbol_table::sized_finalize_symbol): Likewise.
	(Symbol_table::sized_write_globals): Likewise.
	* resolve.cc (Symbol_table::should_override): Likewise.
	(Symbol::override_base_with_special): Likewise.
@
text
@d814 3
@


1.76
log
@	* options.h (DEFINE_var): Add set_user_set_##varname__.
	(DEFINE_bool_alias): New macro.
	(class General_options): Define -Bstatic using DEFINE_bool_alias
	rather than DEFINE_special.  Add --undefined as an alias for -z
	defs.
	* options.cc (General_options::parse_Bstatic): Remove.
@
text
@d372 1
d379 9
a387 1
  }
d664 4
d749 2
a750 4
  DEFINE_bool_alias(undefined, defs, options::TWO_DASHES, '\0',
		    "Allow undefined symbols with --shared",
		    "Report undefined symbols (even with --shared)",
		    true);
@


1.75
log
@	* options.h (class General_options): Add --fatal-warnings.
	* main.cc (main): Implement --fatal-warnings.
	* errors.h (Errors::warning_count): New function.
@
text
@d242 4
d397 47
d556 3
a558 4
  // Bstatic affects the same variable as Bdynamic, so we have to use
  // the "special" macro to make that happen.
  DEFINE_special(Bstatic, options::ONE_DASH, '\0',
                 N_("-l does not search for shared libraries"), NULL);
d736 5
@


1.74
log
@	* options.h (class General_options): Add -Bsymbolic-functions.
	* symtab.h (Symbol::is_preemptible): Check for
	-Bsymbolic-functions.
@
text
@d568 4
@


1.73
log
@2008-05-05  Ian Lance Taylor  <iant@@google.com>

	* options.h (DEFINE_bool): For DASH_Z, create the negative option
	as noVARNAME rather than no-VARNAME.
	(class General_options): Add option -z combreloc.
	* output.h (class Output_reloc) [SHT_REL]: Declare compare and
	get_address.
	(Output_reloc::sort_before) [SHT_REL]: New function.
	(Output_reloc::sort_before) [SHT_RELA]: New function.
	(class Output_data_reloc_base): Add sort_relocs_ field.  Define
	Sort_relocs_comparison.
	(Output_data_reloc_base::Output_data_reloc_base): Add sort_relocs
	parameter.  Change all callers.
	(Output_data_reloc::Output_data_reloc) [both versions]: Add
	sort_relocs parameter.  Change all callers.
	* output.cc (Output_reloc::get_address): New function, broken out
	of write_rel.
	(Output_reloc::write_rel): Call it.
	(Output_reloc::compare): New function.
	(Output_data_reloc_base::do_write): Optionally sort relocs.
@
text
@d513 3
@


1.72
log
@	* errors.cc (Errors::info): New function.
	(gold_info): New function.
	* errors.h (Errors::info): New function.
	* gold.h (gold_info): New function.
	* object.cc (Input_objects::add_object): Print trace output.
	* options.cc (options::parse_set): New function.
	(General_options::parse_wrap): Deleted.
	(General_options::General_options): Deleted initializer.
	* options.h (options::String_set): New typedef.
	(options::parse_set): New function.
	(DEFINE_set): New macro.
	(General_options::wrap): Changed to use DEFINE_set. Changed
	callers of any_wrap_symbols and is_wrap_symbol.
	(General_options::trace, General_options::trace_symbol):
	New options.
	(General_options::any_wrap_symbols, General_options::is_wrap_symbol)
	(General_options::wrap_symbols_): Deleted.
	* symtab.cc (Symbol_table::add_from_object): Print trace output.
@
text
@d271 2
a272 1
// VARNAME, we also create an option called no-VARNAME.
d280 4
a283 1
    Struct_no_##varname__() : option("no-" #varname__, dashes__, '\0',   \
d706 3
a708 2
  // Both execstack and noexecstack differ from the default execstack_
  // value, so we need to use different variables for them.
@


1.71
log
@	* options.cc (General_options::parse_V): New function.
	* options.h: Add entries for -V and -Qy.
@
text
@d64 1
d92 3
d354 18
d650 3
d685 5
a689 2
  DEFINE_special(wrap, options::TWO_DASHES, '\0',
		 N_("Use wrapper functions for SYMBOL"), N_("SYMBOL"));
a797 13
  // Whether there are any symbols to wrap.
  bool
  any_wrap_symbols() const
  { return !this->wrap_symbols_.empty(); }

  // Whether to wrap SYMBOL.
  bool
  is_wrap_symbol(const char* symbol) const
  {
    return (this->wrap_symbols_.find(std::string(symbol))
	    != this->wrap_symbols_.end());
  }

a840 2
  // List of symbols used with --wrap.
  Unordered_set<std::string> wrap_symbols_;
@


1.70
log
@elfcpp/

	* elfcpp.h (DF_1_NOW, DF_1_GLOBAL, DF_1_GROUP,
	DF_1_NODELETE, DF_1_LOADFLTR, DF_1_INITFIRST,
	DF_1_NOOPEN, DF_1_ORIGIN, DF_1_DIRECT, DF_1_TRANS,
	DF_1_INTERPOSE, DF_1_NODEFLIB, DF_1_NODUMP,
	DF_1_CONLFAT): New enum constants.

gold/

	* options.h (DEFINE_enable): New macro.
	(new_dtags): New enable option.
	(initfirst, interpose, loadfltr, nodefaultlib,
	nodelete, nodlopen, nodump): New -z options.
	* layout.cc (Layout:finish_dynamic_section): If new
	dtags enabled, emit DT_RUNPATH.  Also, emit a
	DT_FLAGS_1 containing any specified -z flags.
@
text
@d453 2
d581 3
@


1.69
log
@	* options.h (General_options): Add entries for '-Y' and
	'-relax'.
	* options.cc (General_options:finalize): If -Y was used, add those
	entries to the library path instead of the default "/lib" and
	"/usr/lib".
@
text
@d289 22
d563 4
d682 21
@


1.68
log
@	* options.h (class General_options): Add --noinhibit-exec option.
	* main.cc (main): Check --noinhibit-exec.
@
text
@d559 3
d632 4
@


1.67
log
@	* options.h (class General_options): Define --wrap as a special
	option.  Add wrap_symbols_ field.
	(General_options::any_wrap_symbols): New function.
	(General_options::is_wrap_symbol): New function.
	* options.cc (General_options::parse_wrap): New function.
	(General_options::General_options): Initialize wrap_symbols_.
	* symtab.cc (Symbol_table::wrap_symbol): New function.
	(Symbol_table::add_from_object): Handle --wrap.
	* symtab.h (class Symbol_table): Declare wrap_symbol.
	* target.h (Target::wrap_char): New function.
	(Target::Target_info): Add wrap_char field.
	* i386.cc (Target_i386::i386_info): Initialize wrap_char.
	* x86_64.cc (Target_x86_64::x86_64_info): Likewise.
	* testsuite/testfile.cc (Target_test::test_target_info):
	Likewise.
@
text
@d541 3
@


1.66
log
@	* options.h (class General_options): Define build_id option.
	* layout.h (class Layout): Declare write_build_id, create_note,
	create_build_id.  Add build_id_note_ member.
	* layout.cc: Include <cerrno>, <fcntl.h>, <unistd.h>,
	"libiberty.h", "md5.h", "sha1.h".
	(Layout::Layout): Initialize eh_frame_data_,
	eh_frame_hdr_section_, and build_id_note_.
	(Layout::finalize): Call create_build_id.
	(Layout::create_note): New function, broken out of
	Layout::create_gold_note.
	(Layout::create_gold_note): Call create_note.
	(Layout::create_build_id): New function.
	(Layout::write_build_id): New function.
	(Close_task_runner::run): Call write_build_id.
@
text
@d623 3
d708 13
d764 2
@


1.65
log
@	* options.cc: Include "demangle.h".
	(parse_optional_string): New function.
	(parse_long_option): Handle takes_optional_argument.
	(parse_short_option): Update dash_z initializer.  Handle
	takes_optional_argument.
	(General_options::General_options): Initialize do_demangle_.
	(General_options::finalize): Set do_demangle_.  Handle demangling
	style.
	* options.h (parse_optional_string): Declare.
	(struct One_option): Add optional_arg field.  Update constructor.
	Update call constructor calls.  Add takes_optional_argument
	function.
	(DEFINE_var): Add optional_arg__ parameter.  Change all callers.
	(DEFINE_optional_string): Define.
	(General_options::demangle): Change from DEFINE_bool to
	DEFINE_optional_string.
	(General_options::no_demangle): New function.
	(General_options::do_demangle): New function.
	(General_options::set_do_demangle): New function.
	(General_options::execstack_status_): Move definition to end of
	class definition.
	(General_options::static_): Likewise.
	(General_options::do_demangle_): New field.
	* object.cc (big_endian>::get_symbol_location_info): Call
	Options::do_demangle, not Options::demangle.
	* symtab.cc (demangle): Likewise.
@
text
@d463 4
@


1.64
log
@	* gold.h: Include <cstddef> and <sys/types.h>
	* options.h: Include <cstring>.
@
text
@d84 4
d121 3
d136 1
d140 1
a140 1
             const char* hs, const char* ha, Struct_var* r)
d142 1
a142 1
      helpstring(hs), helparg(ha), reader(r)
d164 5
d206 1
a206 1
    : option(varname, dashes, shortname, "", helpstring, helparg, this),
d228 1
a228 1
                   type__, param_type__, parse_fn__)                         \
d243 1
a243 1
               helpstring__, helparg__, this),                               \
d272 1
a272 1
             bool, bool, options::parse_bool)                            \
d277 1
a277 1
                                     no_helpstring__, NULL, this)        \
d292 1
a292 1
             #default_value__, helpstring__, helparg__,                 \
d298 1
a298 1
             #default_value__, helpstring__, helparg__,                  \
d304 1
a304 1
	     #default_value__, helpstring__, helparg__,			 \
d310 1
a310 1
             default_value__, helpstring__, helparg__,                   \
d319 1
a319 1
             "", helpstring__, helparg__, options::Dir_list,              \
d334 1
a334 1
             default_value__, helpstring__, helparg__,                   \
d365 9
d490 7
a496 4
  DEFINE_bool(demangle, options::TWO_DASHES, '\0',
              getenv("COLLECT_NO_DEMANGLE") == NULL,
              N_("Demangle C++ symbols in log messages"),
              N_("Do not demangle C++ symbols in log messages"));
d694 7
a716 1
  Execstack execstack_status_;
d719 5
a723 1
  { execstack_status_ = value; }
a724 1
  bool static_;
d737 7
@


1.63
log
@From Craig Silverstein: implement -z defs.
@
text
@d40 1
@


1.62
log
@From Craig Silverstein: Implement --debug=files to track file opens,
and implement --verbose as a synonym.
@
text
@d604 3
@


1.61
log
@From Craig Silverstein: sort options into alphabetical order.
@
text
@d461 2
a462 1
                N_("Turn on debugging"), N_("[task,script,all][,...]"));
d582 3
@


1.60
log
@Recognize --hash-bucket-empty-fraction.
@
text
@d409 6
d423 7
a439 7
  // This should really be an "enum", but it's too easy for folks to
  // forget to update the list as they add new targets.  So we just
  // accept any string.  We'll fail later (when the string is parsed),
  // if the target isn't actually supported.
  DEFINE_string(format, options::TWO_DASHES, 'b', "elf",
                N_("Set input format"), ("[elf,binary]"));

d460 3
d498 3
a533 3
  DEFINE_special(just_symbols, options::TWO_DASHES, '\0',
                 N_("Read only symbol values from FILE"), N_("FILE"));

d540 2
a544 2
  DEFINE_bool(strip_debug, options::TWO_DASHES, 'S', false,
              N_("Strip debugging information"), NULL);
a559 7
  DEFINE_uint64(Tbss, options::ONE_DASH, '\0', -1U,
                N_("Set the address of the bss segment"), N_("ADDRESS"));
  DEFINE_uint64(Tdata, options::ONE_DASH, '\0', -1U,
                N_("Set the address of the data segment"), N_("ADDRESS"));
  DEFINE_uint64(Ttext, options::ONE_DASH, '\0', -1U,
                N_("Set the address of the text segment"), N_("ADDRESS"));

a561 2
  DEFINE_special(version_script, options::TWO_DASHES, '\0',
                 N_("Read version script"), N_("FILE"));
d575 10
d594 1
a594 4
  DEFINE_string(debug, options::TWO_DASHES, '\0', "",
                N_("Turn on debugging"), N_("[task,script,all][,...]"));

  // The -z flags.
d598 2
d602 2
a605 4
  DEFINE_uint64(max_page_size, options::DASH_Z, '\0', 0,
                N_("Set maximum page size to SIZE"), N_("SIZE"));
  DEFINE_uint64(common_page_size, options::DASH_Z, '\0', 0,
                N_("Set common page size to SIZE"), N_("SIZE"));
@


1.59
log
@Use N_ for option help strings, and call gettext when printing them.
@
text
@d74 4
a77 1
parse_uint64(const char* option_name, const char* arg, uint64_t *retval);
d287 6
d477 4
@


1.58
log
@From Craig Silverstein: accept any string for input format, warn if
thread options when not supported.
@
text
@d396 1
a396 1
                 _("Report usage information"), NULL);
d398 1
a398 1
                 _("Report version information"), NULL);
d401 2
a402 2
              _("Allow unresolved references in shared libraries"),
              _("Do not allow unresolved references in shared libraries"));
d405 2
a406 2
              _("Only set DT_NEEDED for dynamic libs if used"),
              _("Always DT_NEEDED for dynamic libs"));
d409 1
a409 1
              _("-l searches for shared libraries"), NULL);
d413 1
a413 1
                 _("-l does not search for shared libraries"), NULL);
d416 1
a416 1
              _("Bind defined symbols locally"), NULL);
d423 1
a423 1
                _("Set input format"), _("[elf,binary]"));
d427 2
a428 2
              _("Compress .debug_* sections in the output file"),
              _("[none,zlib]"),
d432 2
a433 2
              _("Compress .debug_* sections in the output file"),
              _("[none]"),
d438 2
a439 2
              _("Define common symbols"),
              _("Do not define common symbols"));
d441 1
a441 1
              _("Alias for -d"), NULL);
d443 1
a443 1
              _("Alias for -d"), NULL);
d446 1
a446 1
                 _("Define a symbol"), _("SYMBOL=EXPRESSION"));
d450 2
a451 2
              _("Demangle C++ symbols in log messages"),
              _("Do not demangle C++ symbols in log messages"));
d454 1
a454 1
              _("Try to detect violations of the One Definition Rule"),
d458 1
a458 1
                _("Set program start address"), _("ADDRESS"));
d461 1
a461 1
              _("Export all dynamic symbols"), NULL);
d464 1
a464 1
              _("Create exception frame header"), NULL);
d467 1
a467 1
                _("Set shared library name"), _("FILENAME"));
d470 1
a470 1
	      _("Dynamic hash style"), _("[sysv,gnu,both]"),
d474 1
a474 1
                _("Set dynamic linker path"), _("PROGRAM"));
d477 1
a477 1
                 _("Search for library LIBNAME"), _("LIBNAME"));
d480 1
a480 1
                 _("Add directory to search path"), _("DIR"));
d483 1
a483 1
                _("Ignored for compatibility"), _("EMULATION"));
d486 1
a486 1
                _("Set output file name"), _("FILE"));
d489 1
a489 1
              _("Optimize output file size"), _("LEVEL"));
d491 2
a492 3
  DEFINE_enum(oformat, options::EXACTLY_TWO_DASHES, '\0', "elf",
              _("Set output format"), _("[binary]"),
              {"elf", "binary"});
d495 1
a495 1
              _("Generate relocations in output"), NULL);
d498 1
a498 1
              _("Generate relocatable output"), NULL);
d504 1
a504 1
                 _("Add DIR to runtime search path"), _("DIR"));
d507 1
a507 1
                 _("Add DIR to runtime search path"), _("DIR"));
d510 1
a510 1
                 _("Read only symbol values from FILE"), _("FILE"));
d513 2
a514 2
                 _("Add DIR to link time shared library search path"),
                 _("DIR"));
d517 1
a517 1
              _("Strip all symbols"), NULL);
d519 1
a519 1
              _("Strip debug symbols that are unused by gdb "
d522 1
a522 1
              _("Strip debugging information"), NULL);
d525 1
a525 1
              _("Generate shared library"), NULL);
d530 1
a530 1
                 _("Do not link against shared libraries"), NULL);
d533 1
a533 1
              _("Print resource usage statistics"), NULL);
d536 1
a536 1
                _("Set target system root directory"), _("DIR"));
d539 1
a539 1
                _("Set the address of the bss segment"), _("ADDRESS"));
d541 1
a541 1
                _("Set the address of the data segment"), _("ADDRESS"));
d543 1
a543 1
                _("Set the address of the text segment"), _("ADDRESS"));
d546 1
a546 1
                 _("Read linker script"), _("FILE"));
d548 1
a548 1
                 _("Read version script"), _("FILE"));
d551 2
a552 2
              _("Run the linker multi-threaded"),
              _("Do not run the linker multi-threaded"));
d554 1
a554 1
              _("Number of threads to use"), _("COUNT"));
d556 1
a556 1
              _("Number of threads to use in initial pass"), _("COUNT"));
d558 1
a558 1
              _("Number of threads to use in middle pass"), _("COUNT"));
d560 1
a560 1
              _("Number of threads to use in final pass"), _("COUNT"));
d563 2
a564 2
              _("Include all archive contents"),
              _("Include only needed archive contents"));
d567 1
a567 1
                 _("Start a library search group"), NULL);
d569 1
a569 1
                 _("End a library search group"), NULL);
d572 1
a572 1
                _("Turn on debugging"), _("[task,script,all][,...]"));
d579 1
a579 1
              _("Mark output as requiring executable stack"), NULL);
d581 1
a581 1
              _("Mark output as not requiring executable stack"), NULL);
d583 1
a583 1
                _("Set maximum page size to SIZE"), _("SIZE"));
d585 1
a585 1
                _("Set common page size to SIZE"), _("SIZE"));
@


1.57
log
@Support --hash-style=gnu.
@
text
@d418 6
a423 5
  DEFINE_enum(format, options::TWO_DASHES, 'b', "elf",
              _("Set input format"), _("[elf,binary]"),
              {"elf", "binary",
               "elf32-i386", "elf32-little", "elf32-big",
               "elf64-x86_64", "elf64-little", "elf64-big"});
@


1.56
log
@From Craig Silverstein: rework option handling to make it easier to
add a new option.
@
text
@d468 4
@


1.55
log
@From Craig Silverstein: rename some option functions in preparation
for reworking option handling.
@
text
@a22 2
// Command_line
//   Holds everything we get from the command line.
d24 1
a24 1
//   Options which are not position dependent.
d27 8
a34 2
// Position_dependent_options (from Input_argument::options())
//   Position dependent options which apply to this argument.
d51 2
d57 3
d62 130
d193 148
a340 4
class Command_line_options;
struct One_option;
struct One_z_option;
struct One_debug_option;
a341 1
} // End namespace gold::options.
a389 3
// The position independent options which apply to the whole link.
// There are a lot of them.

d392 31
a422 8
 public:
  enum Object_format
  {
    // Ordinary ELF.
    OBJECT_FORMAT_ELF,
    // Straight binary format.
    OBJECT_FORMAT_BINARY
  };
d424 11
a434 1
  General_options();
d436 146
a581 4
  // -d: define common symbols.
  bool
  define_common() const
  { return this->define_common_; }
d583 2
a584 4
  // -e: set entry address.
  const char*
  entry() const
  { return this->entry_; }
d586 1
a586 4
  // -E: export dynamic symbols.
  bool
  export_dynamic() const
  { return this->export_dynamic_; }
d588 6
a593 21
  // -h: shared library name.
  const char*
  soname() const
  { return this->soname_; }

  // -I: dynamic linker name.
  const char*
  dynamic_linker() const
  { return this->dynamic_linker_; }

  // -L: Library search path.
  typedef std::vector<Search_directory> Dir_list;

  const Dir_list&
  library_path() const
  { return this->search_path_; }

  // -O: optimization level (0: don't try to optimize output size).
  int
  optimize() const
  { return this->optimization_level_; }
d595 2
a596 1
  // -o: Output file name.
d599 1
a599 92
  { return this->output_file_name_; }

  // --oformat: Output format.
  Object_format
  oformat_enum() const
  { return this->oformat_; }

  const char*
  oformat() const
  { return this->oformat_string_; }

  // Return the default target.
  Target*
  default_target() const;

  // -q: Whether to emit relocations.
  bool
  emit_relocs() const
  { return this->emit_relocs_; }

  // -r: Whether we are doing a relocatable link.
  bool
  relocatable() const
  { return this->is_relocatable_; }

  // -s: Strip all symbols.
  bool
  strip_all() const
  { return this->strip_ == STRIP_ALL; }

  // -S: Strip debugging information.
  bool
  strip_debug() const
  { return this->strip_ == STRIP_ALL || this->strip_ == STRIP_DEBUG; }

  // --strip-debug-gdb: strip only debugging information that's not
  // used by gdb (at least, for gdb versions <= 6.7).
  bool
  strip_debug_gdb() const
  { return this->strip_debug() || this->strip_ == STRIP_DEBUG_UNUSED_BY_GDB; }

  // --allow-shlib-undefined: do not warn about unresolved symbols in
  // --shared libraries.
  bool
  allow_shlib_undefined() const
  { return this->allow_shlib_undefined_; }

  // -Bsymbolic: bind defined symbols locally.
  bool
  Bsymbolic() const
  { return this->symbolic_; }

  // --compress-debug-sections: compress .debug_* sections in the
  // output file using the given compression method.  This is useful
  // when the tools (such as gdb) support compressed sections.
  bool
  compress_debug_sections() const
  { return this->compress_debug_sections_ != NO_COMPRESSION; }

  bool
  zlib_compress_debug_sections() const
  { return this->compress_debug_sections_ == ZLIB_COMPRESSION; }

  // --demangle: demangle C++ symbols in our log messages.
  bool
  demangle() const
  { return this->demangle_; }

  // --detect-odr-violations: Whether to search for One Defn Rule violations.
  bool
  detect_odr_violations() const
  { return this->detect_odr_violations_; }

  // --eh-frame-hdr: Whether to generate an exception frame header.
  bool
  eh_frame_hdr() const
  { return this->create_eh_frame_hdr_; }

  // --rpath: The runtime search path.
  const Dir_list&
  rpath() const
  { return this->rpath_; }

  // --rpath-link: The link time search patch for shared libraries.
  const Dir_list&
  rpath_link() const
  { return this->rpath_link_; }

  // --shared: Whether generating a shared object.
  bool
  shared() const
  { return this->is_shared_; }
d607 2
a608 1
  // --static: Whether doing a static link.
d611 1
a611 1
  { return this->is_static_; }
d613 9
a621 54
  // --stats: Print resource usage statistics.
  bool
  stats() const
  { return this->print_stats_; }

  // --sysroot: The system root of a cross-linker.
  const std::string&
  sysroot() const
  { return this->sysroot_; }

  // -Tbss: The address of the BSS segment
  uint64_t
  Tbss() const
  { return this->bss_segment_address_; }

  // Whether -Tbss was used.
  bool
  user_set_Tbss() const
  { return this->bss_segment_address_ != -1U; }

  // -Tdata: The address of the data segment
  uint64_t
  Tdata() const
  { return this->data_segment_address_; }

  // Whether -Tdata was used.
  bool
  user_set_Tdata() const
  { return this->data_segment_address_ != -1U; }

  // -Ttext: The address of the .text section
  uint64_t
  Ttext() const
  { return this->text_segment_address_; }

  // Whether -Ttext was used.
  bool
  user_set_Ttext() const
  { return this->text_segment_address_ != -1U; }

  // --threads: Whether to use threads.
  bool
  threads() const
  { return this->threads_; }

  // --thread-count-initial: Threads to use in initial pass.
  int
  thread_count_initial() const
  { return this->thread_count_initial_; }

  // --thread-count-middle: Threads to use in middle pass.
  int
  thread_count_middle() const
  { return this->thread_count_middle_; }
d623 3
a625 4
  // --thread-count-final: Threads to use in final pass.
  int
  thread_count_final() const
  { return this->thread_count_final_; }
d627 2
a628 1
  // -z execstack, -z noexecstack
d631 1
a631 1
  { return this->execstack_ != EXECSTACK_FROM_INPUT; }
d635 1
a635 16
  { return this->execstack_ == EXECSTACK_YES; }

  // -z max-page-size
  uint64_t
  max_page_size() const
  { return this->max_page_size_; }

  // -z common-page-size
  uint64_t
  common_page_size() const
  { return this->common_page_size_; }

  // --debug
  unsigned int
  debug() const
  { return this->debug_; }
a641 16
  friend class Command_line;
  friend class options::Command_line_options;

  // Which symbols to strip.
  enum Strip
  {
    // Don't strip any symbols.
    STRIP_NONE,
    // Strip all symbols.
    STRIP_ALL,
    // Strip debugging information.
    STRIP_DEBUG,
    // Strip debugging information that's not used by gdb (at least <= 6.7)
    STRIP_DEBUG_UNUSED_BY_GDB
  };

d647 1
a647 1
    // Mark the stack as executable.
d649 1
a649 1
    // Mark the stack as not executable.
d653 1
a653 112
  // What compression method to use
  enum CompressionMethod
  {
    NO_COMPRESSION,
    ZLIB_COMPRESSION,
  };

  void
  set_define_common(bool value)
  {
    this->define_common_ = value;
    this->user_set_define_common_ = true;
  }

  void
  set_no_define_common(bool value)
  { this->set_define_common(!value); }

  bool
  user_set_define_common() const
  { return this->user_set_define_common_; }

  void
  set_entry(const char* arg)
  { this->entry_ = arg; }

  void
  set_export_dynamic(bool value)
  { this->export_dynamic_ = value; }

  void
  set_soname(const char* arg)
  { this->soname_ = arg; }

  void
  set_dynamic_linker(const char* arg)
  { this->dynamic_linker_ = arg; }

  void
  add_to_search_path(const char* arg)
  { this->search_path_.push_back(Search_directory(arg, false)); }

  void
  add_to_search_path_with_sysroot(const char* arg)
  { this->search_path_.push_back(Search_directory(arg, true)); }

  void
  set_optimize(const char* arg)
  {
    char* endptr;
    this->optimization_level_ = strtol(arg, &endptr, 0);
    if (*endptr != '\0' || this->optimization_level_ < 0)
      gold_fatal(_("invalid optimization level: %s"), arg);
  }

  void
  set_output(const char* arg)
  { this->output_file_name_ = arg; }

  void
  set_oformat(const char*);

  void
  set_emit_relocs(bool value)
  { this->emit_relocs_ = value; }

  void
  set_relocatable(bool value)
  { this->is_relocatable_ = value; }

  void
  set_strip_all(bool)
  { this->strip_ = STRIP_ALL; }

  // Note: normalize_options() depends on the fact that this turns off
  // STRIP_ALL if it were already set.
  void
  set_strip_debug(bool)
  { this->strip_ = STRIP_DEBUG; }

  void
  set_strip_debug_gdb(bool)
  { this->strip_ = STRIP_DEBUG_UNUSED_BY_GDB; }

  void
  set_allow_shlib_undefined(bool value)
  { this->allow_shlib_undefined_ = value; }

  void
  set_no_allow_shlib_undefined(bool value)
  { this->set_allow_shlib_undefined(!value); }

  void
  set_Bsymbolic(bool value)
  { this->symbolic_ = value; }

  void set_compress_debug_sections(const char* arg)
  {
    if (strcmp(arg, "none") == 0)
      this->compress_debug_sections_ = NO_COMPRESSION;
#ifdef HAVE_ZLIB_H
    else if (strcmp(arg, "zlib") == 0)
      this->compress_debug_sections_ = ZLIB_COMPRESSION;
#endif
    else
      gold_fatal(_("unsupported argument to --compress-debug-sections: %s"),
                 arg);
  }

  void
  add_to_defsym(const char* arg);

d655 2
a656 26
  set_demangle(bool value)
  { this->demangle_ = value; }

  void
  set_no_demangle(bool value)
  { this->set_demangle(!value); }

  void
  set_detect_odr_violations(bool value)
  { this->detect_odr_violations_ = value; }

  void
  set_eh_frame_hdr(bool value)
  { this->create_eh_frame_hdr_ = value; }

  void
  add_to_rpath(const char* arg)
  { this->rpath_.push_back(Search_directory(arg, false)); }

  void
  add_to_rpath_link(const char* arg)
  { this->rpath_link_.push_back(Search_directory(arg, false)); }

  void
  set_shared(bool value)
  { this->is_shared_ = value; }
d658 1
d661 1
a661 5
  { this->is_static_ = value; }

  void
  set_stats(bool value)
  { this->print_stats_ = value; }
d663 1
d665 2
a666 110
  set_sysroot(const char* arg)
  { this->sysroot_ = arg; }

  void
  set_segment_address(const char* name, const char* arg, uint64_t* val)
  {
    char* endptr;
    *val = strtoull(arg, &endptr, 0);
    if (*endptr != '\0' || *val == -1U)
      gold_fatal(_("invalid argument to %s: %s"), name, arg);
  }

  void
  set_Tbss(const char* arg)
  { this->set_segment_address("-Tbss", arg, &this->bss_segment_address_); }

  void
  set_Tdata(const char* arg)
  { this->set_segment_address("-Tdata", arg, &this->data_segment_address_); }

  void
  set_Ttext(const char* arg)
  { this->set_segment_address("-Ttext", arg, &this->text_segment_address_); }

  int
  parse_thread_count(const char* arg)
  {
    char* endptr;
    const int count = strtol(arg, &endptr, 0);
    if (*endptr != '\0' || count < 0)
      gold_fatal(_("invalid thread count: %s"), arg);
    return count;
  }

  void
  set_threads(bool value)
  {
#ifndef ENABLE_THREADS
    if (value)
      gold_fatal(_("--threads not supported"));
#endif
    this->threads_ = value;
  }

  void
  set_no_threads(bool value)
  { this->set_threads(!value); }

  void
  set_thread_count(const char* arg)
  {
    int count = this->parse_thread_count(arg);
    this->thread_count_initial_ = count;
    this->thread_count_middle_ = count;
    this->thread_count_final_ = count;
  }

  void
  set_thread_count_initial(const char* arg)
  { this->thread_count_initial_ = this->parse_thread_count(arg); }

  void
  set_thread_count_middle(const char* arg)
  { this->thread_count_middle_ = this->parse_thread_count(arg); }

  void
  set_thread_count_final(const char* arg)
  { this->thread_count_final_ = this->parse_thread_count(arg); }

  void
  ignore(const char*)
  { }

  void
  set_execstack(bool)
  { this->execstack_ = EXECSTACK_YES; }

  void
  set_noexecstack(bool)
  { this->execstack_ = EXECSTACK_NO; }

  void
  set_max_page_size(const char* arg)
  {
    char* endptr;
    this->max_page_size_ = strtoull(arg, &endptr, 0);
    if (*endptr != '\0' || this->max_page_size_ == 0)
      gold_fatal(_("invalid max-page-size: %s"), arg);
  }

  void
  set_common_page_size(const char* arg)
  {
    char* endptr;
    this->common_page_size_ = strtoull(arg, &endptr, 0);
    if (*endptr != '\0' || this->common_page_size_ == 0)
      gold_fatal(_("invalid common-page-size: %s"), arg);
  }

  void
  set_debug(unsigned int flags)
  { this->debug_ = flags; }

  // Handle the -z option.
  void
  handle_z_option(const char*);

  // Handle the --debug option.
  void
  handle_debug_option(const char*);
a670 38

  bool define_common_;
  bool user_set_define_common_;
  const char* entry_;
  bool export_dynamic_;
  const char* soname_;
  const char* dynamic_linker_;
  Dir_list search_path_;
  int optimization_level_;
  const char* output_file_name_;
  Object_format oformat_;
  const char* oformat_string_;
  bool emit_relocs_;
  bool is_relocatable_;
  Strip strip_;
  bool allow_shlib_undefined_;
  bool symbolic_;
  CompressionMethod compress_debug_sections_;
  bool demangle_;
  bool detect_odr_violations_;
  bool create_eh_frame_hdr_;
  Dir_list rpath_;
  Dir_list rpath_link_;
  bool is_shared_;
  bool is_static_;
  bool print_stats_;
  std::string sysroot_;
  uint64_t bss_segment_address_;
  uint64_t data_segment_address_;
  uint64_t text_segment_address_;
  bool threads_;
  int thread_count_initial_;
  int thread_count_middle_;
  int thread_count_final_;
  Execstack execstack_;
  uint64_t max_page_size_;
  uint64_t common_page_size_;
  unsigned int debug_;
d673 20
a692 1
// The current state of the position dependent options.
d697 16
a712 57
  typedef General_options::Object_format Object_format;

  Position_dependent_options();

  // -Bdynamic/-Bstatic: Whether we are searching for a static archive
  // -rather than a shared object.
  bool
  Bdynamic() const
  { return !this->do_static_search_; }

  // --as-needed: Whether to add a DT_NEEDED argument only if the
  // dynamic object is used.
  bool
  as_needed() const
  { return this->as_needed_; }

  // --whole-archive: Whether to include the entire contents of an
  // --archive.
  bool
  whole_archive() const
  { return this->include_whole_archive_; }

  // --format: The format of the input file.
  Object_format
  format_enum() const
  { return this->input_format_; }

  void
  set_Bstatic(bool value)
  { this->do_static_search_ = value; }

  void
  set_Bdynamic(bool value)
  { this->set_Bstatic(!value); }

  void
  set_as_needed(bool value)
  { this->as_needed_ = value; }

  void
  set_no_as_needed(bool value)
  { this->set_as_needed(!value); }

  void
  set_whole_archive(bool value)
  { this->include_whole_archive_ = value; }

  void
  set_no_whole_archive(bool value)
  { this->set_whole_archive(!value); }

  void
  set_format(const char*);

  void
  set_format_enum(Object_format value)
  { this->input_format_ = value; }
d715 4
a718 4
  bool do_static_search_;
  bool as_needed_;
  bool include_whole_archive_;
  Object_format input_format_;
d721 1
d743 14
a756 2
		      bool just_symbols,
		      const Position_dependent_options& options)
d778 1
a778 1
	    : this->extra_search_path_.c_str());
d943 7
a949 1
// All the information read from the command line.
d961 1
a961 1
  process(int argc, char** argv);
d964 2
a965 5
  // process, and returns the index for the next option.
  int
  process_one_option(int argc, char** argv, int i, bool* no_more_options);

  // Handle a -l option.
d967 2
a968 28
  process_l_option(int, char**, char*, bool);

  // Handle a -R option when it means --rpath.
  void
  add_to_rpath(const char* arg)
  { this->options_.add_to_rpath(arg); }

  // Add a file for which we just read the symbols.
  void
  add_just_symbols_file(const char* arg)
  {
    this->inputs_.add_file(Input_file_argument(arg, false, "", true,
					       this->position_options_));
  }

  // Handle a --start-group option.
  void
  start_group(const char* arg);

  // Handle a --end-group option.
  void
  end_group(const char* arg);

  // Get an option argument--a helper function for special processing.
  const char*
  get_special_argument(const char* longname, int argc, char** argv,
		       const char* arg, bool long_option,
		       int *pret);
d990 5
a1012 21

  // Report usage error.
  void
  usage() ATTRIBUTE_NORETURN;
  void
  usage(const char* msg, const char* opt) ATTRIBUTE_NORETURN;
  void
  usage(const char* msg, char opt) ATTRIBUTE_NORETURN;

  // Apply a command line option.
  void
  apply_option(const gold::options::One_option&, const char*);

  // Add a file.
  void
  add_file(const char* name, bool is_lib);

  // Examine the result of processing the command-line, and verify
  // the flags do not contradict each other or are otherwise illegal.
  void
  normalize_options();
@


1.54
log
@Support -d/--define-common.
@
text
@d153 1
a153 1
  search_path() const
d168 1
a168 1
  oformat() const
d172 1
a172 1
  oformat_string() const
d270 1
a270 1
  print_stats() const
d699 2
a700 2
  Bstatic() const
  { return this->do_static_search_; }
d716 1
a716 1
  format() const
d745 4
@


1.53
log
@From Craig Silverstein: Have Parameters point to General_options.
@
text
@d124 5
d392 15
d648 2
@


1.52
log
@Implement -q/--emit-relocs.
@
text
@d166 4
d251 6
@


1.51
log
@From Craig Silverstein: rework handling of Script_options.
@
text
@d170 5
d417 4
d627 1
@


1.50
log
@From Craig Silverstein: implement -z max-page-size and -z
common-page-size.
@
text
@d122 1
a122 1
  General_options(Script_options*);
d127 1
a127 1
  { return this->script_options_->entry(); }
a257 5
  // --version-script: The version script to apply if --shared is true.
  const Version_script_info&
  version_script() const
  { return *this->script_options_->version_script_info(); }

a331 9
  // Return the options which may be set from a linker script.
  Script_options*
  script_options()
  { return this->script_options_; }

  const Script_options*
  script_options() const
  { return this->script_options_; }

d373 1
a373 1
  { this->script_options_->set_entry(arg, strlen(arg)); }
d609 1
a642 3
  // Some options can also be set from linker scripts.  Those are
  // stored here.
  Script_options* script_options_;
d927 1
a927 1
  Command_line(Script_options*);
d980 2
a981 2
  // Get the options which may be set from a linker script.
  Script_options*
d983 1
a983 1
  { return this->options_.script_options(); }
d985 4
a988 3
  const Script_options*
  script_options() const
  { return this->options_.script_options(); }
d1032 1
@


1.49
log
@From Craig Silverstein: rename option functions for future option
handling rewrite.
@
text
@d322 10
d590 18
d653 2
@


1.48
log
@Implement -Tdata and -Tbss.
@
text
@d153 1
a153 1
  optimization_level() const
d163 2
a164 2
  output_format() const
  { return this->output_format_; }
d172 1
a172 1
  is_relocatable() const
d199 1
a199 1
  symbolic() const
d225 1
a225 1
  create_eh_frame_hdr() const
d240 1
a240 1
  is_shared() const
d265 1
a265 1
  bss_segment_address() const
d270 1
a270 1
  user_set_bss_segment_address() const
d275 1
a275 1
  data_segment_address() const
d280 1
a280 1
  user_set_data_segment_address() const
d285 1
a285 1
  text_segment_address() const
d290 1
a290 1
  user_set_text_segment_address() const
d380 2
a381 2
  set_export_dynamic()
  { this->export_dynamic_ = true; }
d400 1
a400 1
  set_optimization_level(const char* arg)
d409 1
a409 1
  set_output_file_name(const char* arg)
d413 1
a413 1
  set_output_format(const char*);
d416 2
a417 2
  set_relocatable()
  { this->is_relocatable_ = true; }
d420 1
a420 1
  set_strip_all()
d426 1
a426 1
  set_strip_debug()
d430 1
a430 1
  set_strip_debug_gdb()
d434 2
a435 2
  set_allow_shlib_undefined()
  { this->allow_shlib_undefined_ = true; }
d438 2
a439 2
  set_no_allow_shlib_undefined()
  { this->allow_shlib_undefined_ = false; }
d442 2
a443 2
  set_symbolic()
  { this->symbolic_ = true; }
d459 1
a459 1
  define_symbol(const char* arg);
d462 2
a463 2
  set_demangle()
  { this->demangle_ = true; }
d466 2
a467 2
  clear_demangle()
  { this->demangle_ = false; }
d470 2
a471 2
  set_detect_odr_violations()
  { this->detect_odr_violations_ = true; }
d474 2
a475 2
  set_create_eh_frame_hdr()
  { this->create_eh_frame_hdr_ = true; }
d486 2
a487 2
  set_shared()
  { this->is_shared_ = true; }
d490 2
a491 2
  set_static()
  { this->is_static_ = true; }
d494 2
a495 2
  set_stats()
  { this->print_stats_ = true; }
d511 1
a511 1
  set_bss_segment_address(const char* arg)
d515 1
a515 1
  set_data_segment_address(const char* arg)
d519 1
a519 1
  set_text_segment_address(const char* arg)
d533 1
a533 1
  set_threads()
d536 2
a537 1
    gold_fatal(_("--threads not supported"));
d539 1
a539 1
    this->threads_ = true;
d543 2
a544 2
  clear_threads()
  { this->threads_ = false; }
d572 1
a572 1
  set_execstack()
d576 1
a576 1
  set_noexecstack()
d601 2
a602 2
  Object_format output_format_;
  const char* output_format_string_;
d643 1
a643 1
  do_static_search() const
d655 1
a655 1
  include_whole_archive() const
d660 1
a660 1
  input_format() const
d664 2
a665 2
  set_static_search()
  { this->do_static_search_ = true; }
d668 2
a669 2
  set_dynamic_search()
  { this->do_static_search_ = false; }
d672 2
a673 2
  set_as_needed()
  { this->as_needed_ = true; }
d676 2
a677 2
  clear_as_needed()
  { this->as_needed_ = false; }
d680 2
a681 2
  set_whole_archive()
  { this->include_whole_archive_ = true; }
d684 2
a685 2
  clear_whole_archive()
  { this->include_whole_archive_ = false; }
d688 1
a688 1
  set_input_format(const char*);
@


1.47
log
@Support selecting target by name.
@
text
@d263 20
d502 1
a502 1
  set_text_segment_address(const char* arg)
d505 3
a507 4
    this->text_segment_address_ = strtoull(arg, &endptr, 0);
    if (*endptr != '\0'
	|| this->text_segment_address_ == -1U)
      gold_fatal(_("invalid argument to -Ttext: %s"), arg);
d510 12
d616 2
@


1.46
log
@Add support for --format binary for input files.
@
text
@d40 1
d49 1
a161 1

d166 4
d570 1
@


1.45
log
@Support --oformat binary.
@
text
@d112 8
d161 1
a161 9
  enum Output_format
  {
    // Ordinary ELF.
    OUTPUT_FORMAT_ELF,
    // Straight binary format.
    OUTPUT_FORMAT_BINARY
  };

  Output_format
d564 1
a564 1
  Output_format output_format_;
d596 2
d618 5
d647 3
d654 1
@


1.44
log
@Implement --just-symbols, including -R FILE.  Fix symbol values when
doing a relocatable link.
@
text
@d151 14
d388 3
d564 1
@


1.43
log
@Treat an empty directory argument as the current directory.
@
text
@d639 1
d643 2
a644 1
    : name_(), is_lib_(false), extra_search_path_(""), options_()
d649 1
d652 1
a652 1
      options_(options)
d675 5
d693 1
d859 13
@


1.42
log
@From Andrew Chatham and Craig Silverstein: Add support for version
scripts.
@
text
@d76 4
a79 1
  { gold_assert(!this->name_.empty()); }
@


1.41
log
@Support assignments and expressions in linker scripts.
@
text
@d236 5
@


1.40
log
@Add support for -e and for ENTRY in linker scripts.
@
text
@d3 1
a3 1
// Copyright 2006, 2007 Free Software Foundation, Inc.
d109 1
a109 1
  General_options();
d114 1
a114 1
  { return this->entry_; }
d280 9
d330 1
a330 1
  { this->entry_ = arg; }
d409 3
a532 1
  const char* entry_;
d560 3
d827 1
a827 1
  Command_line();
a850 5
  // Set the entry symbol from a linker script.
  void
  set_entry(const char* entry)
  { this->options_.set_entry(entry); }

d866 9
@


1.39
log
@Add -h/-soname option.
@
text
@d111 5
d320 4
d521 1
d836 5
@


1.38
log
@Fix --thread-count-middle and --thread-count-final.
@
text
@d116 5
d319 4
d513 1
@


1.37
log
@From Craig Silverstein: Fix error message, add this->.
@
text
@d469 1
a469 1
  { this->thread_count_initial_ = this->parse_thread_count(arg); }
d473 1
a473 1
  { this->thread_count_initial_ = this->parse_thread_count(arg); }
@


1.36
log
@From Craig Silverstein: Use gold_fatal in options.h, beef up value checks.
@
text
@d368 1
a368 1
  void set_compress_debug_symbols(const char* arg)
d377 1
a377 1
      gold_fatal(_("unsupported argument to --compress-debug-symbols: %s"),
@


1.35
log
@From Craig Silverstein: Add support for compressing .debug_str section.
@
text
@d327 6
a332 1
  { this->optimization_level_ = atoi(arg); }
d377 1
a377 1
      gold_fatal(_("Unsupported argument to --compress-debug-symbols: %s"),
d428 1
a428 5
      {
        fprintf(stderr, _("%s: invalid argument to -Ttext: %s\n"),
                program_name, arg);
        ::exit(1);
      }
d435 1
a435 1
    int count = strtol(arg, &endptr, 0);
d437 1
a437 5
      {
	fprintf(stderr, _("%s: invalid thread count: %s\n"),
		program_name, arg);
	::exit(1);
      }
d443 6
a448 1
  { this->threads_ = true; }
@


1.34
log
@Add threading support.
@
text
@d153 2
a154 2
  // -Sgdb: strip only debugging information that's not used by
  //         gdb (at least, for gdb versions <= 6.7).
d170 11
d302 7
d363 13
d510 1
@


1.33
log
@From Craig Silverstein: Add --strip-debug-gdb.
@
text
@d49 2
a50 1
namespace options {
d55 1
d254 5
d454 4
d462 4
d494 1
@


1.32
log
@From Craig Silverstein: Add support for --demangle.
@
text
@d151 6
d268 3
a270 1
    STRIP_DEBUG
d321 4
@


1.31
log
@Warn about undefined references in shared libraries if we have seen
all the DT_NEEDED entries for that library.
@
text
@d162 5
d327 8
d452 1
@


1.30
log
@From Craig Silverstein: Rework debug info code a bit, add option for
ODR violations, add test case.
@
text
@d151 6
d310 8
d437 1
@


1.29
log
@From Craig Silverstein: Implement OPTION in linker scripts.
@
text
@d156 5
d308 4
d424 1
@


1.28
log
@From Craig Silverstein and Ian Lance Taylor: Process --script option.
@
text
@d699 5
@


1.27
log
@From Craig Silverstein: Minimal --script implementation.
@
text
@d40 2
d47 1
a322 8
  set_script(const char* arg)
  {
    fprintf(stderr, _("%s: cannot parse %s: -T/--script not yet supported\n"),
            program_name, arg);
    ::exit(1);
  }

  void
d701 1
a701 1
  process_l_option(int, char**, char*);
d711 6
d721 5
@


1.26
log
@Add support for PT_GNU_STACK.
@
text
@d320 8
@


1.25
log
@Implement -Bstatic/-Bdynamic.
@
text
@d50 1
d218 9
d246 11
d388 12
d424 1
@


1.24
log
@Add support for -Bsymbolic.
@
text
@d400 2
a401 2
  // -Bstatic: Whether we are searching for a static archive rather
  // than a shared object.
@


1.23
log
@Add infrastructure for threading support.
@
text
@d147 5
d275 4
d378 1
@


1.22
log
@From Craig Silverstein: implement -Ttext.
@
text
@d192 20
d311 43
d377 4
d613 5
d668 5
@


1.21
log
@Add --stats option to print runtime and memory usage statistics.
@
text
@d172 1
a172 1
  // --statis: Print resource usage statistics.
d182 10
d278 14
d313 1
@


1.20
log
@From Craig Silverstein: don't permit -s and -r.
@
text
@d172 5
d260 4
d287 1
@


1.19
log
@Implement -s and -S options which strip symbols.
@
text
@d228 2
d591 5
@


1.18
log
@Full support for --sysroot.
@
text
@d137 10
d185 11
d225 8
d270 1
@


1.17
log
@From Craig Silverstein: add support for searching for input files
named in linker scripts.
@
text
@d53 44
d116 1
a116 1
  typedef std::vector<const char*> Dir_list;
d162 5
d185 5
a189 1
  { this->search_path_.push_back(arg); }
d209 1
a209 1
  { this->rpath_.push_back(arg); }
d213 1
a213 1
  { this->rpath_link_.push_back(arg); }
d224 4
d231 4
d246 1
d316 1
a316 1
  //         command line, such as --group.
@


1.16
log
@Add licensing text to every source file.
@
text
@d247 8
d256 1
a256 1
    : name_(), is_lib_(false), options_()
d260 1
d262 2
a263 1
    : name_(name), is_lib_(is_lib), options_(options)
d278 14
d298 1
@


1.15
log
@From Craig Silverstein: Add -O option.
@
text
@d3 20
@


1.14
log
@Fix handling of --eh-frame-hdr option.
@
text
@d15 1
d58 5
d119 4
d157 1
@


1.13
log
@Add -rpath-link option, currently unused.
@
text
@d121 1
a121 1
  create_eh_frame_hdr()
@


1.12
log
@Recognize and ignore the --eh-frame-hdr option.
@
text
@d77 5
d129 4
d151 1
@


1.11
log
@Add support for -E/--export-dynamic.  Also clean up --help output a bit.
@
text
@d67 5
d116 4
d140 1
@


1.10
log
@Implement --whole-archive.
@
text
@d40 5
d91 4
d126 1
@


1.9
log
@Add support for -rpath.
@
text
@d145 6
d167 8
d178 1
@


1.8
log
@Hash tables, dynamic section, i386 PLT, gold_assert.
@
text
@d46 1
a46 1
  typedef std::list<const char*> Dir_list;
d62 5
d102 4
d121 1
@


1.7
log
@More dynamic object support, initial scripting support.
@
text
@a17 1
#include <cassert>
d220 1
a220 1
    assert(this->is_file_);
d228 1
a228 1
    assert(!this->is_file_);
d235 1
a235 1
    assert(!this->is_file_);
@


1.6
log
@Ignored the -m option, for old linker compatibility.
@
text
@d41 5
d74 4
d82 4
d109 1
a114 4

  // Don't copy this structure.
  General_options(const General_options&);
  General_options& operator=(const General_options&);
d125 1
a125 1
  // -than a shared object.
d127 1
a127 1
  do_static_search()
d130 5
a134 3
 private:
  friend class Command_line;
  friend class options::Command_line_options;
d144 9
d154 1
d163 1
a163 1
    : name_(NULL), is_lib_(false), options_()
d173 1
a173 1
  { return this->name_; }
d184 4
a187 1
  const char* name_;
d278 49
a331 1
  typedef std::vector<Input_argument> Input_arguments;
a390 1
  bool in_group_;
@


1.5
log
@Can now do a full static link of hello, world in C or C++
@
text
@d92 4
@


1.4
log
@Framework for relocation scanning.  Implement simple static TLS
relocations.
@
text
@d18 1
d24 1
d133 1
a133 1
class Input_argument
d136 6
a141 2
  Input_argument(const char* name, bool is_lib,
		 const Position_dependent_options& options)
d163 3
a165 2
// A list of input files.
class Input_argument_list : public std::vector<Input_argument>
d167 80
d254 3
d268 8
d281 9
a289 4
  // Get the list of input files.
  const Input_argument_list&
  inputs() const
  { return this->inputs_; }
d292 18
a309 4
  void usage() ATTRIBUTE_NORETURN;
  void usage(const char* msg, const char* opt) ATTRIBUTE_NORETURN;
  void usage(const char* msg, char opt) ATTRIBUTE_NORETURN;
  void apply_option(const gold::options::One_option&, const char*);
d313 2
a314 1
  Input_argument_list inputs_;
@


1.3
log
@Snapshot.  Now able to produce a minimal executable which actually
runs.
@
text
@d17 1
d56 5
d83 4
d93 1
d157 5
a181 2

  typedef std::list<Input_argument> Input_argument_list;
@


1.2
log
@New drop, with first cut of section layout code.
@
text
@d16 1
d45 5
d69 4
d81 1
d123 3
a125 2
  Input_argument(const char* name, const Position_dependent_options& options)
    : name_(name), options_(options)
d138 1
a138 5
  { return this->name_[0] == '-' && this->name_[1] == 'l'; }

  const char*
  lib_basename() const
  { return this->name_ + 2; }
d142 1
d158 5
d169 1
@


1.1
log
@Initial CVS checkin of gold
@
text
@a16 2
#include "gold.h"

@

