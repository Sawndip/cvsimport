head	1.14;
access;
symbols
	binutils-2_24-branch:1.14.0.8
	binutils-2_24-branchpoint:1.14
	binutils-2_21_1:1.12
	binutils-2_23_2:1.14
	binutils-2_23_1:1.14
	binutils-2_23:1.14
	binutils-2_23-branch:1.14.0.6
	binutils-2_23-branchpoint:1.14
	binutils-2_22_branch:1.14.0.4
	binutils-2_22:1.14
	binutils-2_22-branch:1.14.0.2
	binutils-2_22-branchpoint:1.14
	binutils-2_21:1.12
	binutils-2_21-branch:1.12.0.2
	binutils-2_21-branchpoint:1.12
	binutils-2_20_1:1.9
	binutils-2_20:1.9
	binutils-arc-20081103-branch:1.7.0.6
	binutils-arc-20081103-branchpoint:1.7
	binutils-2_20-branch:1.9.0.4
	binutils-2_20-branchpoint:1.9
	dje-cgen-play1-branch:1.9.0.2
	dje-cgen-play1-branchpoint:1.9
	arc-20081103-branch:1.7.0.4
	arc-20081103-branchpoint:1.7
	binutils-2_19_1:1.7
	binutils-2_19:1.7
	binutils-2_19-branch:1.7.0.2
	binutils-2_19-branchpoint:1.7
	binutils_latest_snapshot:1.14
	added-to-binutils:1.5;
locks; strict;
comment	@// @;


1.14
date	2011.06.08.04.43.28;	author ccoutant;	state Exp;
branches;
next	1.13;

1.13
date	2011.04.18.05.39.43;	author ian;	state Exp;
branches;
next	1.12;

1.12
date	2010.01.07.18.31.30;	author ian;	state Exp;
branches;
next	1.11;

1.11
date	2009.12.14.19.53.04;	author ian;	state Exp;
branches;
next	1.10;

1.10
date	2009.12.11.13.42.12;	author nickc;	state Exp;
branches;
next	1.9;

1.9
date	2009.03.24.04.50.32;	author ian;	state Exp;
branches;
next	1.8;

1.8
date	2009.02.06.19.20.09;	author cgd;	state Exp;
branches;
next	1.7;

1.7
date	2008.04.17.22.45.47;	author ccoutant;	state Exp;
branches;
next	1.6;

1.6
date	2008.04.09.00.33.48;	author ian;	state Exp;
branches;
next	1.5;

1.5
date	2008.03.13.21.04.21;	author iant;	state Exp;
branches;
next	1.4;

1.4
date	2008.01.07.05.19.02;	author iant;	state Exp;
branches;
next	1.3;

1.3
date	2007.11.22.00.05.51;	author iant;	state Exp;
branches;
next	1.2;

1.2
date	2007.11.15.01.12.55;	author iant;	state Exp;
branches;
next	1.1;

1.1
date	2007.10.14.06.49.13;	author iant;	state Exp;
branches;
next	;


desc
@@


1.14
log
@	* common.cc (Symbol_table::do_allocate_commons_list): Call
	gold_fallback.
	* errors.cc (Errors::fatal): Adjust call to gold_exit.
	(Errors::fallback): New function.
	(gold_fallback): New function.
	* errors.h (Errors::fallback): New function.
	* gold.cc (gold_exit): Change status parameter to enum; adjust
	all callers.
	(queue_initial_tasks): Call gold_fallback.
	* gold.h: Include cstdlib.
	(Exit_status): New enum type.
	(gold_exit): Change status parameter to enum.
	(gold_fallback): New function.
	* layout.cc (Layout::set_section_offsets): Call gold_fallback.
	(Layout::create_symtab_sections): Likewise.
	(Layout::create_shdrs): Likewise.
	* main.cc (main): Adjust call to gold_exit.
	* output.cc (Output_data_got::add_got_entry): Call gold_fallback.
	(Output_data_got::add_got_entry_pair): Likewise.
	(Output_section::add_input_section): Likewise.
	(Output_section::add_output_section_data): Likewise.
	(Output_segment::set_section_list_addresses): Likewise.
	* x86_64.cc (Output_data_plt_x86_64::add_entry): Likewise.
@
text
@// errors.cc -- handle errors for gold

// Copyright 2006, 2007, 2008, 2009, 2010, 2011 Free Software Foundation, Inc.
// Written by Ian Lance Taylor <iant@@google.com>.

// This file is part of gold.

// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,
// MA 02110-1301, USA.

#include "gold.h"

#include <cstdarg>
#include <cstdio>

#include "gold-threads.h"
#include "parameters.h"
#include "object.h"
#include "symtab.h"
#include "errors.h"

namespace gold
{

// Class Errors.

const int Errors::max_undefined_error_report;

Errors::Errors(const char* program_name)
  : program_name_(program_name), lock_(NULL), initialize_lock_(&this->lock_),
    error_count_(0), warning_count_(0), undefined_symbols_()
{
}

// Initialize the lock_ field.  If we have not yet processed the
// parameters, then we can't initialize, since we don't yet know
// whether we are using threads.  That is OK, since if we haven't
// processed the parameters, we haven't created any threads, and we
// don't need a lock.  Return true if the lock is now initialized.

bool
Errors::initialize_lock()
{
  return this->initialize_lock_.initialize();
}

// Increment a counter, holding the lock if available.

void
Errors::increment_counter(int *counter)
{
  if (!this->initialize_lock())
    {
      // The lock does not exist, which means that we don't need it.
      ++*counter;
    }
  else
    {
      Hold_lock h(*this->lock_);
      ++*counter;
    }
}

// Report a fatal error.

void
Errors::fatal(const char* format, va_list args)
{
  fprintf(stderr, _("%s: fatal error: "), this->program_name_);
  vfprintf(stderr, format, args);
  fputc('\n', stderr);
  gold_exit(GOLD_ERR);
}

// Report a fallback error.

void
Errors::fallback(const char* format, va_list args)
{
  fprintf(stderr, _("%s: fatal error: "), this->program_name_);
  vfprintf(stderr, format, args);
  fputc('\n', stderr);
  gold_exit(GOLD_FALLBACK);
}

// Report an error.

void
Errors::error(const char* format, va_list args)
{
  fprintf(stderr, _("%s: error: "), this->program_name_);
  vfprintf(stderr, format, args);
  fputc('\n', stderr);

  this->increment_counter(&this->error_count_);
}

// Report a warning.

void
Errors::warning(const char* format, va_list args)
{
  fprintf(stderr, _("%s: warning: "), this->program_name_);
  vfprintf(stderr, format, args);
  fputc('\n', stderr);

  this->increment_counter(&this->warning_count_);
}

// Print an informational message.

void
Errors::info(const char* format, va_list args)
{
  vfprintf(stderr, format, args);
  fputc('\n', stderr);
}

// Report an error at a reloc location.

template<int size, bool big_endian>
void
Errors::error_at_location(const Relocate_info<size, big_endian>* relinfo,
			  size_t relnum, off_t reloffset,
			  const char* format, va_list args)
{
  fprintf(stderr, _("%s: error: "),
	  relinfo->location(relnum, reloffset).c_str());
  vfprintf(stderr, format, args);
  fputc('\n', stderr);

  this->increment_counter(&this->error_count_);
}

// Report a warning at a reloc location.

template<int size, bool big_endian>
void
Errors::warning_at_location(const Relocate_info<size, big_endian>* relinfo,
			    size_t relnum, off_t reloffset,
			    const char* format, va_list args)
{
  fprintf(stderr, _("%s: warning: "), 
	  relinfo->location(relnum, reloffset).c_str());
  vfprintf(stderr, format, args);
  fputc('\n', stderr);

  this->increment_counter(&this->warning_count_);
}

// Issue an undefined symbol error with a caller-supplied location string.

void
Errors::undefined_symbol(const Symbol* sym, const std::string& location)
{
  bool initialized = this->initialize_lock();
  gold_assert(initialized);

  const char* zmsg;
  {
    Hold_lock h(*this->lock_);
    if (++this->undefined_symbols_[sym] >= max_undefined_error_report)
      return;
    if (parameters->options().warn_unresolved_symbols())
      {
	++this->warning_count_;
	zmsg = _("warning");
      }
    else
      {
	++this->error_count_;
	zmsg = _("error");
      }
  }

  const char* const version = sym->version();
  if (version == NULL)
    fprintf(stderr, _("%s: %s: undefined reference to '%s'\n"),
	    location.c_str(), zmsg, sym->demangled_name().c_str());
  else
    fprintf(stderr,
            _("%s: %s: undefined reference to '%s', version '%s'\n"),
	    location.c_str(), zmsg, sym->demangled_name().c_str(), version);
}

// Issue a debugging message.

void
Errors::debug(const char* format, ...)
{
  fprintf(stderr, _("%s: "), this->program_name_);

  va_list args;
  va_start(args, format);
  vfprintf(stderr, format, args);
  va_end(args);

  fputc('\n', stderr);
}

// The functions which the rest of the code actually calls.

// Report a fatal error.

void
gold_fatal(const char* format, ...)
{
  va_list args;
  va_start(args, format);
  parameters->errors()->fatal(format, args);
  va_end(args);
}

// Report a fallback error.

void
gold_fallback(const char* format, ...)
{
  va_list args;
  va_start(args, format);
  parameters->errors()->fallback(format, args);
  va_end(args);
}

// Report an error.

void
gold_error(const char* format, ...)
{
  va_list args;
  va_start(args, format);
  parameters->errors()->error(format, args);
  va_end(args);
}

// Report a warning.

void
gold_warning(const char* format, ...)
{
  va_list args;
  va_start(args, format);
  parameters->errors()->warning(format, args);
  va_end(args);
}

// Print an informational message.

void
gold_info(const char* format, ...)
{
  va_list args;
  va_start(args, format);
  parameters->errors()->info(format, args);
  va_end(args);
}

// Report an error at a location.

template<int size, bool big_endian>
void
gold_error_at_location(const Relocate_info<size, big_endian>* relinfo,
		       size_t relnum, off_t reloffset,
		       const char* format, ...)
{
  va_list args;
  va_start(args, format);
  parameters->errors()->error_at_location(relinfo, relnum, reloffset,
					  format, args);
  va_end(args);
}

// Report a warning at a location.

template<int size, bool big_endian>
void
gold_warning_at_location(const Relocate_info<size, big_endian>* relinfo,
			 size_t relnum, off_t reloffset,
			 const char* format, ...)
{
  va_list args;
  va_start(args, format);
  parameters->errors()->warning_at_location(relinfo, relnum, reloffset,
					    format, args);
  va_end(args);
}

// Report an undefined symbol.

void
gold_undefined_symbol(const Symbol* sym)
{
  parameters->errors()->undefined_symbol(sym, sym->object()->name().c_str());
}

// Report an undefined symbol at a reloc location

template<int size, bool big_endian>
void
gold_undefined_symbol_at_location(const Symbol* sym,
		      const Relocate_info<size, big_endian>* relinfo,
		      size_t relnum, off_t reloffset)
{
  parameters->errors()->undefined_symbol(sym,
                                         relinfo->location(relnum, reloffset));
}

#ifdef HAVE_TARGET_32_LITTLE
template
void
gold_error_at_location<32, false>(const Relocate_info<32, false>* relinfo,
				  size_t relnum, off_t reloffset,
				  const char* format, ...);
#endif

#ifdef HAVE_TARGET_32_BIG
template
void
gold_error_at_location<32, true>(const Relocate_info<32, true>* relinfo,
				 size_t relnum, off_t reloffset,
				 const char* format, ...);
#endif

#ifdef HAVE_TARGET_64_LITTLE
template
void
gold_error_at_location<64, false>(const Relocate_info<64, false>* relinfo,
				  size_t relnum, off_t reloffset,
				  const char* format, ...);
#endif

#ifdef HAVE_TARGET_64_BIG
template
void
gold_error_at_location<64, true>(const Relocate_info<64, true>* relinfo,
				 size_t relnum, off_t reloffset,
				 const char* format, ...);
#endif

#ifdef HAVE_TARGET_32_LITTLE
template
void
gold_warning_at_location<32, false>(const Relocate_info<32, false>* relinfo,
				    size_t relnum, off_t reloffset,
				    const char* format, ...);
#endif

#ifdef HAVE_TARGET_32_BIG
template
void
gold_warning_at_location<32, true>(const Relocate_info<32, true>* relinfo,
				   size_t relnum, off_t reloffset,
				   const char* format, ...);
#endif

#ifdef HAVE_TARGET_64_LITTLE
template
void
gold_warning_at_location<64, false>(const Relocate_info<64, false>* relinfo,
				    size_t relnum, off_t reloffset,
				    const char* format, ...);
#endif

#ifdef HAVE_TARGET_64_BIG
template
void
gold_warning_at_location<64, true>(const Relocate_info<64, true>* relinfo,
				   size_t relnum, off_t reloffset,
				   const char* format, ...);
#endif

#ifdef HAVE_TARGET_32_LITTLE
template
void
gold_undefined_symbol_at_location<32, false>(
    const Symbol* sym,
    const Relocate_info<32, false>* relinfo,
    size_t relnum, off_t reloffset);
#endif

#ifdef HAVE_TARGET_32_BIG
template
void
gold_undefined_symbol_at_location<32, true>(
    const Symbol* sym,
    const Relocate_info<32, true>* relinfo,
    size_t relnum, off_t reloffset);
#endif

#ifdef HAVE_TARGET_64_LITTLE
template
void
gold_undefined_symbol_at_location<64, false>(
    const Symbol* sym,
    const Relocate_info<64, false>* relinfo,
    size_t relnum, off_t reloffset);
#endif

#ifdef HAVE_TARGET_64_BIG
template
void
gold_undefined_symbol_at_location<64, true>(
    const Symbol* sym,
    const Relocate_info<64, true>* relinfo,
    size_t relnum, off_t reloffset);
#endif

} // End namespace gold.
@


1.13
log
@	* object.cc (Relocate_info::location): Simplify location string.
	* errors.cc (Errors::error_at_location): Don't print program
	name.
	(Errors::warning_at_location): Likewise.
	(Errors::undefined_symbol): Likewise.
	* testsuite/debug_msg.sh: Update accordingly.
@
text
@d84 12
a95 1
  gold_exit(false);
d226 11
@


1.12
log
@	PR 10980
	* options.h (class General_options): Add --warn-unresolved-symbols
	and --error-unresolved-symbols.
	* errors.cc (Errors::undefined_symbol): Implement
	--warn-unresolved-symbols.
@
text
@d3 1
a3 1
// Copyright 2006, 2007, 2008, 2009, 2010 Free Software Foundation, Inc.
d128 1
a128 1
  fprintf(stderr, _("%s: %s: error: "), this->program_name_,
d144 1
a144 1
  fprintf(stderr, _("%s: %s: warning: "), this->program_name_,
d179 2
a180 3
    fprintf(stderr, _("%s: %s: %s: undefined reference to '%s'\n"),
	    this->program_name_, location.c_str(), zmsg,
	    sym->demangled_name().c_str());
d183 2
a184 3
            _("%s: %s: %s: undefined reference to '%s', version '%s'\n"),
	    this->program_name_, location.c_str(), zmsg,
	    sym->demangled_name().c_str(), version);
@


1.11
log
@	Revert -Wshadow changes, all changes from:
	2009-12-11  Doug Kwan  <dougkwan@@google.com>
	2009-12-11  Nick Clifton  <nickc@@redhat.com>
	* configure.ac: Remove -Wshadow when setting WARN_CXXFLAGS.
@
text
@d3 1
a3 1
// Copyright 2006, 2007, 2008 Free Software Foundation, Inc.
d159 2
d165 10
a174 1
    ++this->error_count_;
d176 1
d179 2
a180 2
    fprintf(stderr, _("%s: %s: error: undefined reference to '%s'\n"),
	    this->program_name_, location.c_str(),
d184 2
a185 2
            _("%s: %s: error: undefined reference to '%s', version '%s'\n"),
	    this->program_name_, location.c_str(),
@


1.10
log
@Add -Wshadow to the gcc command line options used when compiling the binutils.
Fix up all warnings generated by the addition of this switch.
@
text
@d3 1
a3 1
// Copyright 2006, 2007, 2008, 2009 Free Software Foundation, Inc.
d41 2
a42 2
Errors::Errors(const char* prog_name)
  : program_name_(prog_name), lock_(NULL), initialize_lock_(&this->lock_),
@


1.9
log
@2009-03-23  Ian Lance Taylor  <iant@@google.com>

	* gold-threads.h (class Initialize_lock): Define.
	* gold-threads.cc (class Initialize_lock_once): Define.
	(initialize_lock_control): New static variable.
	(initialize_lock_pointer): New static variable.
	(initialize_lock_once): New static function.
	(Initialize_lock::Initialize_lock): Define.
	(Initialize_lock::initialize): Define.
	* target-select.h: Include "gold-threads.h".
	(class Target_selector): Add lock_ and initialize_lock_ fields.
	Don't define instantiate_target, just declare it.
	* target-select.cc (Target_selector::Target_selector): Initialize
	new fields.
	(Target_selector::instantiate_target): Define.
	* descriptors.h: Include "gold-threads.h".
	(class Descriptors): Add initialize_lock_ field.
	* descriptors.cc (Descriptors::Descriptors): Initialize new
	field.
	(Descriptors::open): Use initialize_lock_ field
	* errors.h (class Errors): Add initialize_lock_ field.
	* errors.cc (Errors::Errors): Initialize new field.
	(Errors::initialize_lock): Use initialize_lock_ field.
	* powerpc.cc (class Target_selector_powerpc): Remove
	instantiated_target_ field.  In do_recognize call
	instantiate_target rather than do_instantiate_target.  In
	do_instantiate_target just allocate a new target.
	* sparc.cc (class Target_selector_sparc): Likewise.
@
text
@d3 1
a3 1
// Copyright 2006, 2007, 2008 Free Software Foundation, Inc.
d41 2
a42 2
Errors::Errors(const char* program_name)
  : program_name_(program_name), lock_(NULL), initialize_lock_(&this->lock_),
@


1.8
log
@2009-02-06  Chris Demetriou  <cgd@@google.com>

	* gold.h (gold_undefined_symbol): Change to take only a Symbol
	pointer and to report location as the file name associated with
	the symbol.
	(gold_undefined_symbol_at_location): New function to replace the
	old gold_undefined_symbol functionality.
	* target-reloc.h (relocate_section): Update to use
	gold_undefined_symbol_at_location.
	* symtab.cc (Symbol_table::warn_about_undefined_dynobj_symbol):
	Call gold_undefined_symbol function rather than gold_error.
	* errors.h (Errors::undefined_symbol): Take location as a
	string, rather than calculating it from a relocation.
	* errors.cc (Errors::fatal): Print "fatal error:" before the
	formatted message.
	(Errors::error, Errors::error_at_location): Print "error: "
	before the formatted message.
	(Errors::undefined_symbol): Take location as a string, rather
	than calculating it from a relocation.
	(gold_undefined_symbol_at_location): New function akin to
	old gold_undefined_symbol, calculates location from relocation.
	(gold_undefined_symbol): Change to take only a Symbol pointer
	and to report location as the file name associated with the symbol.
	* testsuite/debug_msg.sh: Update for changed error messages.
	* testsuite/undef_symbol.sh: Likewise.
@
text
@d42 2
a43 2
  : program_name_(program_name), lock_(NULL), error_count_(0),
    warning_count_(0), undefined_symbols_()
d56 1
a56 3
  if (this->lock_ == NULL && parameters->options_valid())
    this->lock_ = new Lock;
  return this->lock_ != NULL;
@


1.7
log
@	* errors.cc (Errors::info): New function.
	(gold_info): New function.
	* errors.h (Errors::info): New function.
	* gold.h (gold_info): New function.
	* object.cc (Input_objects::add_object): Print trace output.
	* options.cc (options::parse_set): New function.
	(General_options::parse_wrap): Deleted.
	(General_options::General_options): Deleted initializer.
	* options.h (options::String_set): New typedef.
	(options::parse_set): New function.
	(DEFINE_set): New macro.
	(General_options::wrap): Changed to use DEFINE_set. Changed
	callers of any_wrap_symbols and is_wrap_symbol.
	(General_options::trace, General_options::trace_symbol):
	New options.
	(General_options::any_wrap_symbols, General_options::is_wrap_symbol)
	(General_options::wrap_symbols_): Deleted.
	* symtab.cc (Symbol_table::add_from_object): Print trace output.
@
text
@d83 1
a83 1
  fprintf(stderr, "%s: ", this->program_name_);
d94 1
a94 1
  fprintf(stderr, "%s: ", this->program_name_);
d130 1
a130 1
  fprintf(stderr, "%s: %s: ", this->program_name_,
d154 1
a154 1
// Issue an undefined symbol error.
a155 1
template<int size, bool big_endian>
d157 1
a157 3
Errors::undefined_symbol(const Symbol* sym,
			 const Relocate_info<size, big_endian>* relinfo,
			 size_t relnum, off_t reloffset)
d169 2
a170 2
    fprintf(stderr, _("%s: %s: undefined reference to '%s'\n"),
	    this->program_name_, relinfo->location(relnum, reloffset).c_str(),
d173 3
a175 2
    fprintf(stderr, _("%s: %s: undefined reference to '%s', version '%s'\n"),
	    this->program_name_, relinfo->location(relnum, reloffset).c_str(),
d272 8
d282 1
a282 1
gold_undefined_symbol(const Symbol* sym,
d286 2
a287 1
  parameters->errors()->undefined_symbol(sym, relinfo, relnum, reloffset);
d357 4
a360 3
gold_undefined_symbol<32, false>(const Symbol* sym,
				 const Relocate_info<32, false>* relinfo,
				 size_t relnum, off_t reloffset);
d366 4
a369 3
gold_undefined_symbol<32, true>(const Symbol* sym,
				const Relocate_info<32, true>* relinfo,
				size_t relnum, off_t reloffset);
d375 4
a378 3
gold_undefined_symbol<64, false>(const Symbol* sym,
				 const Relocate_info<64, false>* relinfo,
				 size_t relnum, off_t reloffset);
d384 4
a387 3
gold_undefined_symbol<64, true>(const Symbol* sym,
				const Relocate_info<64, true>* relinfo,
				size_t relnum, off_t reloffset);
@


1.6
log
@	* errors.cc (Errors::undefined_symbol): Mention symbol version if
	there is one.
@
text
@d113 9
d231 11
@


1.5
log
@Update copyright years.  Update language files.
@
text
@d161 9
a169 3
  fprintf(stderr, _("%s: %s: undefined reference to '%s'\n"),
	  this->program_name_, relinfo->location(relnum, reloffset).c_str(),
	  sym->demangled_name().c_str());
@


1.4
log
@Report linker script errors with line numbers.  Ignore OUTPUT_FORMAT
with three arguments, and ignore OUTPUT_ARCH.
@
text
@d3 1
a3 1
// Copyright 2006, 2007 Free Software Foundation, Inc.
@


1.3
log
@Add threading support.
@
text
@d47 5
a51 1
// Initialize the lock_ field.
d53 1
a53 1
void
d56 1
a56 1
  if (this->lock_ == NULL)
d58 18
d98 1
a98 5
  this->initialize_lock();
  {
    Hold_lock h(*this->lock_);
    ++this->error_count_;
  }
d110 1
a110 5
  this->initialize_lock();
  {
    Hold_lock h(*this->lock_);
    ++this->warning_count_;
  }
d126 1
a126 5
  this->initialize_lock();
  {
    Hold_lock h(*this->lock_);
    ++this->error_count_;
  }
d142 1
a142 5
  this->initialize_lock();
  {
    Hold_lock h(*this->lock_);
    ++this->warning_count_;
  }
d153 2
a154 1
  this->initialize_lock();
@


1.2
log
@From Craig Silverstein: Add support for --demangle.
@
text
@d42 2
a43 2
  : program_name_(program_name), lock_(), error_count_(0), warning_count_(0),
    undefined_symbols_()
d47 9
d75 2
d78 1
a78 1
    Hold_lock h(this->lock_);
d91 2
d94 1
a94 1
    Hold_lock h(this->lock_);
d111 2
d114 1
a114 1
    Hold_lock h(this->lock_);
d131 2
d134 1
a134 1
    Hold_lock h(this->lock_);
d147 1
d149 1
a149 1
    Hold_lock h(this->lock_);
d159 14
@


1.1
log
@Run all error handling through an Errors object.  Delete output file
on error.
@
text
@d138 1
a138 1
	  sym->name());
@

