head	1.4;
access;
symbols
	binutils-2_24-branch:1.4.0.10
	binutils-2_24-branchpoint:1.4
	binutils-2_21_1:1.4
	binutils-2_23_2:1.4
	binutils-2_23_1:1.4
	binutils-2_23:1.4
	binutils-2_23-branch:1.4.0.8
	binutils-2_23-branchpoint:1.4
	binutils-2_22_branch:1.4.0.6
	binutils-2_22:1.4
	binutils-2_22-branch:1.4.0.4
	binutils-2_22-branchpoint:1.4
	binutils-2_21:1.4
	binutils-2_21-branch:1.4.0.2
	binutils-2_21-branchpoint:1.4
	binutils_latest_snapshot:1.4;
locks; strict;
comment	@# @;


1.4
date	2010.10.06.08.58.58;	author nickc;	state Exp;
branches;
next	1.3;

1.3
date	2010.09.18.00.31.02;	author ian;	state Exp;
branches;
next	1.2;

1.2
date	2010.09.08.21.06.53;	author espindola;	state Exp;
branches;
next	1.1;

1.1
date	2010.09.08.16.10.33;	author nickc;	state Exp;
branches;
next	;


desc
@@


1.4
log
@        * script-sections.cc(class Memory_region): Remove
        current_lma_offset_ field.  Rename current_vma_offset_ to
        current_offset_.  Add last_section_ field.
        (Memory_region::get_current_vma_address): Rename to
        get_current_address.
        (Memory_region::get_current_lma_address): Delete.
        (Memory_region::increment_vma_offset): Rename to
        increment_offset.
        (Memory_region::increment_lma_offset): Delete.
        (Memory_region::attributes_compatible): New method.  Returns
        true if the provided section is compatible with the region.
        (Memory_region::get_last_section): New method.  Returns the last
        section to use the region.
        (Memory_region::set_last_section): New method.  Stores the last
        section to use the region.
        (Script_sections::block_in_region): New method.  Returns true if
        a block of memory is contained within a region.
        (Script_sections::find_memory_region): New method.  Locates a
        memory region to be used to set a VMA or LMA address.
        (Output_section_definition::set_section_addresses): Add code to
        check for addresses set by memory regions.
        (Output_segment::set_section_addresses): Remove memory region
        walking code.
        (Script_sections::create_segment): Add a warning if a header
        segment is created outside of any region.
        * script-sections.h (class Script_sections): Add prototypes for
        find_memory_region and block_in_region methods.
        * testsuite/memory_test.s: Use .long instead of .word.
        * testsuite/memory_test.t: Add some more output sections.
        * testsuite/memory_test.sh: Update expected output.

        * ld.texinfo: Update description of computation of VMA and LMA
        addresses for output sections.

        * ld-scripts/rgn-at5.t: Add some more output sections.
        * ld-scripts/rgn-at5.d: Update expected output.
@
text
@#!/bin/sh

# memory_test.sh -- test MEMORY regions.

# Copyright 2010 Free Software Foundation, Inc.
# Written by Nick Clifton  <nickc@@redhat.com>

# This file is part of gold.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,
# MA 02110-1301, USA.


# NOTE: The linker script used in this test (memory_test.t)
# should be the same as the one used in the rgn-at5 linker
# test (ld/testsuite/ld-scripts/rgn-at5.t).
#
# Modulo some section ordering the output from GOLD in this
# test should be the same as the output from GNU LD in the
# rgn-at5 test.

check()
{
    file=$1
    pattern=$2
    found=`grep "$pattern" $file`
    if test -z "$found"; then
        echo "pattern \"$pattern\" not found in file $file."
	echo $found
        exit 1
    fi
}

check memory_test.stdout \
  "  LOAD           0x001000 0x0*02000 0x0*02000 0x0*04 0x0*04 R   0x1000"
check memory_test.stdout \
  "  LOAD           0x001004 0x0*01000 0x0*02004 0x0*04 0x0*04 R   0x1000"
check memory_test.stdout \
  "  LOAD           0x001008 0x0*02008 0x0*02008 0x0*08 0x0*08 R   0x1000"
check memory_test.stdout \
  "  LOAD           0x002000 0x0*05000 0x0*05000 0x0*04 0x0*04 R   0x1000"
check memory_test.stdout \
  "  LOAD           0x00203c 0x0*04000 0x0*0603c 0x0*04 0x0*04 R   0x1000"

exit 0
@


1.3
log
@	* testsuite/memory_test.sh: Adjust for change of 2010-09-10.
@
text
@d26 8
d47 3
a49 1
  "  LOAD           0x001000 0x0*00000000 0x0*00000000 0x00000\?2 0x00000\?2 R   0x1000"
d51 1
a51 1
  "  LOAD           0x00112c 0x0*00001000 0x0*0000012c 0x00000\?2 0x00000\?2 R   0x1000"
d53 1
a53 1
  "  LOAD           0x002000 0x0*00005000 0x0*00005000 0x00000\?2 0x00000\?2 R   0x1000"
d55 1
a55 2
  "  LOAD           0x00203c 0x0*00004000 0x0*0000603c 0x00000\?2 0x00000\?2 R   0x1000"

@


1.2
log
@2010-09-08  Rafael Espindola  <espindola@@google.com>

	* Makefile.am (memory_test.stdout): Run readelf with -W
	* Makefile.in: Regenerate.
	* testsuite/memory_test.sh: Make the regexps accept both 32 and 64 bit outputs.
@
text
@d45 1
a45 1
  "  LOAD           0x00203c 0x0*00004000 0x0*0000603c 0x0000\?2a 0x0000\?2a R E 0x1000"
@


1.1
log
@        * README: Remove claim that MEMORY is not supported.
        * expression.cc (script_exp_function_origin)
        (script_exp_function_length): Move from here to ...
        * script.cc: ... here.
        (script_set_section_region, script_add_memory)
        (script_parse_memory_attr, script_include_directive): New
        functions.
        * script-sections.cc
        (class Memory_region): New class.
        (class Output_section_definition): Add set_memory_region,
        set_section_vma, set_section_lma and get_section_name methods.
        (class Script_Sections): Add add_memory_region,
        find_memory_region, find_memory_region_origin,
        find_memory_region_length and set_memory_region methods.
        Have set_section_addresses method walk the list of set memory
        regions.
        Extend the print methos to display memory regions.
        * script-sections.h: Add prototypes for new methods.
        Add enum for MEMORY region attributes.
        * yyscript.y: Add support for parsing MEMORY regions.
        * script-c.h: Add prototypes for new functions.
        * testsuite/Makefile.am: Add test of MEMORY region functionality.
        * testsuite/Makefile.in: Regenerate.
        * testsuite/memory_test.sh: New script.
        * testsuite/memory_test.s: New assembler source file.
        * testsuite/memory_test.t: New linker script.
@
text
@d39 1
a39 1
  "  LOAD           0x001000 0x00000000 0x00000000 0x00002 0x00002 R   0x1000"
d41 1
a41 1
  "  LOAD           0x00112c 0x00001000 0x0000012c 0x00002 0x00002 R   0x1000"
d43 1
a43 1
  "  LOAD           0x002000 0x00005000 0x00005000 0x00002 0x00002 R   0x1000"
d45 1
a45 1
  "  LOAD           0x00203c 0x00004000 0x0000603c 0x0002a 0x0002a R E 0x1000"
@

