head	1.2;
access;
symbols
	binutils-2_24-branch:1.2.0.2
	binutils-2_24-branchpoint:1.2
	binutils-2_21_1:1.1
	binutils-2_23_2:1.1
	binutils-2_23_1:1.1
	binutils-2_23:1.1
	binutils-2_23-branch:1.1.0.8
	binutils-2_23-branchpoint:1.1
	binutils-2_22_branch:1.1.0.6
	binutils-2_22:1.1
	binutils-2_22-branch:1.1.0.4
	binutils-2_22-branchpoint:1.1
	binutils-2_21:1.1
	binutils-2_21-branch:1.1.0.2
	binutils-2_21-branchpoint:1.1
	binutils_latest_snapshot:1.2;
locks; strict;
comment	@ * @;


1.2
date	2013.03.07.05.31.44;	author amodra;	state Exp;
branches;
next	1.1;

1.1
date	2010.08.19.22.50.16;	author ian;	state Exp;
branches;
next	;


desc
@@


1.2
log
@	* testsuite/ifunc-sel.h (ifunc_sel, ifunc_one): Mark
	always_inline.  Add assembly for powerpc to avoid GOT.
@
text
@/* Used by the elf ifunc tests.  */
#ifndef ELF_IFUNC_SEL_H
#define ELF_IFUNC_SEL_H 1

extern int global;

static inline __attribute__ ((always_inline)) void *
ifunc_sel (int (*f1) (void), int (*f2) (void), int (*f3) (void))
{
#ifdef __powerpc__
  /* When generating PIC, powerpc gcc loads the address of "global"
     from the GOT, but the GOT may not have been relocated.
     Similarly, "f1", "f2" and "f3" may be loaded from non-relocated
     GOT entries.

     There is NO WAY to make this ill conceived IFUNC misfeature
     reliably work on targets that use a GOT for function or variable
     addresses, short of implementing two passes over relocations in
     ld.so, with ifunc relocations being applied after all other
     relocations, globally.

     Cheat.  Don't use the GOT.  Rely on this function being inlined
     and calculate all variable and function addresses relative to pc.
     Using the 'X' constraint is risky, but that's the only way to
     make the asm here see the function names for %4, %5 and %6.
     Sadly, powerpc64 gcc doesn't accept use of %3 here with 'X' for
     some reason, so we expand it ourselves.  */
  register void *ret __asm__ ("r3");
  void *temp1, *temp2;
  __asm__ ("mflr %1\n\t"
	   "bcl 20,31,1f\n"
	   "1:\tmflr %2\n\t"
	   "mtlr %1\n\t"
	   "addis %1,%2,global-1b@@ha\n\t"
	   "lwz %1,global-1b@@l(%1)\n\t"
	   "addis %0,%2,%4-1b@@ha\n\t"
	   "addi %0,%0,%4-1b@@l\n\t"
	   "cmpwi %1,1\n\t"
	   "beqlr\n\t"
	   "addis %0,%2,%5-1b@@ha\n\t"
	   "addi %0,%0,%5-1b@@l\n\t"
	   "cmpwi %1,-1\n\t"
	   "beqlr\n\t"
	   "addis %0,%2,%6-1b@@ha\n\t"
	   "addi %0,%0,%6-1b@@l"
	   : "=&b" (ret), "=&b" (temp1), "=&b" (temp2)
	   : "X" (&global), "X" (f1), "X" (f2), "X" (f3));
  return ret;
#else
  switch (global)
    {
    case 1:
      return f1;
    case -1:
      return f2;
    default:
      return f3;
    }
#endif
}

static inline __attribute__ ((always_inline)) void *
ifunc_one (int (*f1) (void))
{
#ifdef __powerpc__
  /* As above, PIC may use an unrelocated GOT entry for f1.

     Case study: ifuncmain6pie's shared library, ifuncmod6.so, wants
     the address of "foo" in function get_foo().  So there is a GOT
     entry for "foo" in ifuncmod6.so.  ld.so relocates ifuncmod6.so
     *before* ifuncmain6pie, and on finding "foo" to be STT_GNU_IFUNC,
     calls this function with f1 set to "one".  But the address of
     "one" is loaded from ifuncmain6pie's GOT, which hasn't been
     relocated yet.

     Cheat as for ifunc-sel.  */
  register void *ret __asm__ ("r3");
  void *temp;
  __asm__ ("mflr %1\n\t"
	   "bcl 20,31,1f\n"
	   "1:\tmflr %0\n\t"
	   "mtlr %1\n\t"
	   "addis %0,%0,%2-1b@@ha\n\t"
	   "addi %0,%0,%2-1b@@l"
	   : "=&b" (ret), "=&r" (temp)
	   : "X" (f1));
  return ret;
#else
  return f1;
#endif
}
#endif
@


1.1
log
@	PR 10893
	* i386.cc (class Output_data_plt_i386): Update declarations.
	Define Global_ifunc and Local_ifunc types.  Add global_ifuncs_ and
	local_ifuncs_ fields.
	(Target_i386::do_plt_section_for_global): New function.
	(Target_i386::do_plt_section_for_local): New function.
	(Output_data_plt_i386::Output_data_plt_i386): Add symtab
	parameter; change all callers.  Initialize global_ifuncs_ and
	local_ifuncs_.  If doing a static link define __rel_iplt_start and
	__rel_iplt_end.
	(Output_data_plt_i386::add_entry): Handle IFUNC symbols.
	(Output_data_plt_i386::add_local_ifunc_entry): New function.
	(Output_data_plt_i386::do_write): Fix GOT entries for IFUNC
	symbols.
	(Target_i386::make_plt_section): New function, broken out of
	make_plt_entry.  Set sh_info field of .rel.plt to point to .plt.
	(Target_i386::make_plt_entry): Call make_plt_section.
	(Target_i386::make_local_ifunc_plt_entry): New function.
	(Target_i386::Scan::reloc_needs_iplt_for_ifunc): New function.
	(Target_i386::Scan::local): Handle IFUNC symbols.  Add
	R_386_IRELATIVE to switch.
	(Target_i386::Scan::global): Likewise.
	(Target_i386::Relocate::relocate): Likewise.
	(Target_i386::Relocatable_size_for_reloc): Add R_386_IRELATIVE to
	switch.
	* x86_64.cc (class Output_data_plt_x86_64): Update declarations.
	(Target_x86_64::do_plt_section_for_global): New function.
	(Target_x86_64::do_plt_section_for_local): New function.
	(Output_data_plt_x86_64::Output_data_plt_x86_64): Add symtab
	parameter; change all callers.  If doing a static link define
	__rela_iplt_start and __rela_iplt_end.
	(Output_data_plt_x86_64::add_entry): Handle IFUNC symbols.
	(Output_data_plt_x86_64::add_local_ifunc_entry): New function.
	(Target_x86_64::make_plt_section): Set sh_info field of .rel.plt
	to point to .plt.
	(Target_x86_64::make_local_ifunc_plt_entry): New function.
	(Target_x86_64::Scan::check_non_pic): Add R_X86_64_IRELATIVE to
	switch.
	(Target_x86_64::Scan::reloc_needs_iplt_for_ifunc): New function.
	(Target_x86_64::Scan::local): Handle IFUNC symbols.  Add
	R_X86_64_IRELATIVE to switch.
	(Target_x86_64::Scan::global): Likewise.
	(Target_x86_64::Relocate::relocate): Likewise.
	(Target_x86_64::Relocatable_size_for_reloc): Add R_X86_64_IRELATIVE to
	switch.
	* target.h (class Target): Add plt_section_for_global and
	plt_section_for_local functions.  Add do_plt_section_for_global
	and do_plt_section_for_local virtual functions.
	* symtab.h (Symbol::needs_plt_entry): Handle IFUNC symbol.  Add
	clarifying comments.
	(Symbol::use_plt_offset): Handle IFUNC symbol.
	* object.cc (Sized_relobj::Sized_relobj): Initialize
	local_plt_offsets_.
	(Sized_relobj::local_has_plt_offset): New function.
	(Sized_relobj::local_plt_offset): New function.
	(Sized_relobj::set_local_plt_offset): New function.
	(Sized_relobj::do_count): Handle IFUNC symbol.
	* object.h (class Symbol_value): Add is_ifunc_symbol_ field.  Take
	a bit away from input_shndx_ field.  Add set_is_func_symbol and
	is_ifunc_symbol functions.
	(class Sized_relobj): Update declarations.  Remove Tls_got_entry
	and Local_tls_got_offsets.  Define Local_plt_offsets.  Add
	local_plt_offsets_ field.
	(Sized_relobj::clear_local_symbols): Clear local_plt_offsets_.
	* output.h (class Output_section_data): Add non-const
	output_section function.
	(class Output_data_got): Update declarations.
	(class Output_data_got::Got_entry): Add use_plt_offset_ field.
	Add use_plt_offset parameter to global and local constructors.
	Change all callers.  Change local_sym_index_ field to 31 bits.
	Change GSYM_CODE and CONSTANT_CODE accordingly.
	* output.cc (Output_data_reloc_base::do_adjust_output_section): If
	doing a static link don't set sh_link field.
	(Output_data_got::Got_entry::write): Use PLT offset if
	appropriate.
	(Output_data_got::add_global_plt): New function.
	(Output_data_got::add_local_plt): New function.
	* target-reloc.h (relocate_section): Handle IFUNC symbol.
	* defstd.cc (in_section): Remove entries for __rel_iplt_start,
	__rel_iplt_end, __rela_iplt_start, and __rela_iplt_end.
	* configure.ac: Set IFUNC automake conditional for glibc >= 2.11.
	* testsuite/Makefile.am: Add a bunch of IFUNC tests, all within
	IFUNC conditional.
	* testsuite/ifunc-sel.h: New file.
	* testsuite/ifuncmain1.c: New file.
	* testsuite/ifuncmain1vis.c: New file.
	* testsuite/ifuncmod1.c: New file.
	* testsuite/ifuncdep2.c: New file.
	* testsuite/ifuncmain2.c: New file.
	* testsuite/ifuncmain3.c: New file.
	* testsuite/ifuncmod3.c: New file.
	* testsuite/ifuncmain4.c: New file.
	* testsuite/ifuncmain5.c: New file.
	* testsuite/ifuncmod5.c: New file.
	* testsuite/ifuncmain6pie.c: New file.
	* testsuite/ifuncmod6.c: New file.
	* testsuite/ifuncmain7.c: New file.
	* configure, testsuite/Makefile.in: Rebuild.
@
text
@d7 1
a7 1
static inline void *
d10 50
a59 9
 switch (global)
   {
   case 1:
     return f1;
   case -1:
     return f2;
   default:
     return f3;
   }
d62 1
a62 1
static inline void *
d65 24
d90 1
@

