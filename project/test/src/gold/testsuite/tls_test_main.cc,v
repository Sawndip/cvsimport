head	1.10;
access;
symbols
	binutils-2_24-branch:1.10.0.8
	binutils-2_24-branchpoint:1.10
	binutils-2_21_1:1.9
	binutils-2_23_2:1.10
	binutils-2_23_1:1.10
	binutils-2_23:1.10
	binutils-2_23-branch:1.10.0.6
	binutils-2_23-branchpoint:1.10
	binutils-2_22_branch:1.10.0.4
	binutils-2_22:1.10
	binutils-2_22-branch:1.10.0.2
	binutils-2_22-branchpoint:1.10
	binutils-2_21:1.9
	binutils-2_21-branch:1.9.0.2
	binutils-2_21-branchpoint:1.9
	binutils-2_20_1:1.7
	binutils-2_20:1.7
	binutils-arc-20081103-branch:1.7.0.10
	binutils-arc-20081103-branchpoint:1.7
	binutils-2_20-branch:1.7.0.8
	binutils-2_20-branchpoint:1.7
	dje-cgen-play1-branch:1.7.0.6
	dje-cgen-play1-branchpoint:1.7
	arc-20081103-branch:1.7.0.4
	arc-20081103-branchpoint:1.7
	binutils-2_19_1:1.7
	binutils-2_19:1.7
	binutils-2_19-branch:1.7.0.2
	binutils-2_19-branchpoint:1.7
	binutils_latest_snapshot:1.10
	added-to-binutils:1.5;
locks; strict;
comment	@// @;


1.10
date	2011.05.16.23.29.30;	author ian;	state Exp;
branches;
next	1.9;

1.9
date	2009.12.14.19.53.05;	author ian;	state Exp;
branches;
next	1.8;

1.8
date	2009.12.12.01.26.12;	author dougkwan;	state Exp;
branches;
next	1.7;

1.7
date	2008.08.15.04.57.46;	author ccoutant;	state Exp;
branches;
next	1.6;

1.6
date	2008.04.17.07.12.00;	author ian;	state Exp;
branches;
next	1.5;

1.5
date	2008.03.13.21.04.21;	author iant;	state Exp;
branches;
next	1.4;

1.4
date	2007.10.14.03.23.38;	author iant;	state Exp;
branches;
next	1.3;

1.3
date	2007.10.12.17.32.20;	author iant;	state Exp;
branches;
next	1.2;

1.2
date	2007.10.08.07.24.21;	author iant;	state Exp;
branches;
next	1.1;

1.1
date	2007.10.07.17.10.10;	author iant;	state Exp;
branches;
next	;


desc
@@


1.10
log
@	* testsuite/tls_test_main.cc: Use semaphores instead of mutexes.
@
text
@// tls_test.cc -- test TLS variables for gold, main function

// Copyright 2006, 2007, 2008, 2011 Free Software Foundation, Inc.
// Written by Ian Lance Taylor <iant@@google.com>.

// This file is part of gold.

// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,
// MA 02110-1301, USA.

// This is the main function for the TLS test.  See tls_test.cc for
// more information.

#include <cassert>
#include <cstdio>
#include <pthread.h>
#include <semaphore.h>

#include "tls_test.h"

// We make these macros so the assert() will give useful line-numbers.
#define safe_lock(semptr)			\
  do						\
    {						\
      int err = sem_wait(semptr);		\
      assert(err == 0);				\
    }						\
  while (0)

#define safe_unlock(semptr)			\
  do						\
    {						\
      int err = sem_post(semptr);		\
      assert(err == 0);				\
    }						\
  while (0)

struct Sem_set
{
  sem_t sem1;
  sem_t sem2;
  sem_t sem3;
};

Sem_set sems1;
Sem_set sems2;

bool failed = false;

void
check(const char* name, bool val)
{
  if (!val)
    {
      fprintf(stderr, "Test %s failed\n", name);
      failed = true;
    }
}

// The body of the thread function.  This acquires the first
// semaphore, runs the tests, and then releases the second semaphore.
// Then it acquires the third semaphore, and the runs the verification
// test again.

void*
thread_routine(void* arg)
{
  Sem_set* pms = static_cast<Sem_set*>(arg);

  // Acquire the first semaphore.
  if (pms)
    safe_lock(&pms->sem1);

  // Run the tests.
  check("t1", t1());
  check("t2", t2());
  check("t3", t3());
  check("t4", t4());
  f5b(f5a());
  check("t5", t5());
  f6b(f6a());
  check("t6", t6());
  check("t8", t8());
  check("t9", t9());
  f10b(f10a());
  check("t10", t10());
  check("t11", t11() != 0);
  check("t12", t12());
  check("t_last", t_last());

  // Release the second semaphore.
  if (pms)
    safe_unlock(&pms->sem2);

  // Acquire the third semaphore.
  if (pms)
    safe_lock(&pms->sem3);

  check("t_last", t_last());

  return 0;
}

// The main function.

int
main()
{
  // First, as a sanity check, run through the tests in the "main" thread.
  thread_routine(0);

  // Set up the semaphores.  We want the first thread to start right
  // away, tell us when it is done with the first part, and wait for
  // us to release it.  We want the second thread to wait to start,
  // tell us when it is done with the first part, and wait for us to
  // release it.
  sem_init(&sems1.sem1, 0, 1);
  sem_init(&sems1.sem2, 0, 0);
  sem_init(&sems1.sem3, 0, 0);

  sem_init(&sems2.sem1, 0, 0);
  sem_init(&sems2.sem2, 0, 0);
  sem_init(&sems2.sem3, 0, 0);

  pthread_t thread1;
  int err = pthread_create(&thread1, NULL, thread_routine, &sems1);
  assert(err == 0);

  pthread_t thread2;
  err = pthread_create(&thread2, NULL, thread_routine, &sems2);
  assert(err == 0);

  // Wait for the first thread to complete the first part.
  safe_lock(&sems1.sem2);

  // Tell the second thread to start.
  safe_unlock(&sems2.sem1);

  // Wait for the second thread to complete the first part.
  safe_lock(&sems2.sem2);

  // Tell the first thread to continue and finish.
  safe_unlock(&sems1.sem3);

  // Wait for the first thread to finish.
  void* thread_val;
  err = pthread_join(thread1, &thread_val);
  assert(err == 0);
  assert(thread_val == 0);

  // Tell the second thread to continue and finish.
  safe_unlock(&sems2.sem3);

  // Wait for the second thread to finish.
  err = pthread_join(thread2, &thread_val);
  assert(err == 0);
  assert(thread_val == 0);

  // All done.
  return failed ? 1 : 0;
}
@


1.9
log
@	Revert -Wshadow changes, all changes from:
	2009-12-11  Doug Kwan  <dougkwan@@google.com>
	2009-12-11  Nick Clifton  <nickc@@redhat.com>
	* configure.ac: Remove -Wshadow when setting WARN_CXXFLAGS.
@
text
@d3 1
a3 1
// Copyright 2006, 2007, 2008 Free Software Foundation, Inc.
d29 1
d34 1
a34 1
#define safe_lock(muptr)			\
d37 1
a37 1
      int err = pthread_mutex_lock(muptr);	\
d42 1
a42 1
#define safe_unlock(muptr)			\
d45 1
a45 1
      int err = pthread_mutex_unlock(muptr);	\
d50 1
a50 1
struct Mutex_set
d52 3
a54 3
  pthread_mutex_t mutex1;
  pthread_mutex_t mutex2;
  pthread_mutex_t mutex3;
d57 2
a58 7
Mutex_set mutexes1 = { PTHREAD_MUTEX_INITIALIZER,
		       PTHREAD_MUTEX_INITIALIZER,
		       PTHREAD_MUTEX_INITIALIZER };

Mutex_set mutexes2 = { PTHREAD_MUTEX_INITIALIZER,
		       PTHREAD_MUTEX_INITIALIZER,
		       PTHREAD_MUTEX_INITIALIZER } ;
d72 4
a75 3
// The body of the thread function.  This gets a lock on the first
// mutex, runs the tests, and then unlocks the second mutex.  Then it
// locks the third mutex, and the runs the verification test again.
d80 1
a80 1
  Mutex_set* pms = static_cast<Mutex_set*>(arg);
d82 1
a82 1
  // Lock the first mutex.
d84 1
a84 1
    safe_lock(&pms->mutex1);
d103 1
a103 1
  // Unlock the second mutex.
d105 1
a105 1
    safe_unlock(&pms->mutex2);
d107 1
a107 1
  // Lock the third mutex.
d109 1
a109 1
    safe_lock(&pms->mutex3);
d124 1
a124 1
  // Set up the mutex locks.  We want the first thread to start right
d129 7
a135 6
  safe_lock(&mutexes1.mutex2);
  safe_lock(&mutexes1.mutex3);

  safe_lock(&mutexes2.mutex1);
  safe_lock(&mutexes2.mutex2);
  safe_lock(&mutexes2.mutex3);
d138 1
a138 1
  int err = pthread_create(&thread1, NULL, thread_routine, &mutexes1);
d142 1
a142 1
  err = pthread_create(&thread2, NULL, thread_routine, &mutexes2);
d146 1
a146 1
  safe_lock(&mutexes1.mutex2);
d149 1
a149 1
  safe_unlock(&mutexes2.mutex1);
d152 1
a152 1
  safe_lock(&mutexes2.mutex2);
d155 1
a155 1
  safe_unlock(&mutexes1.mutex3);
d164 1
a164 1
  safe_unlock(&mutexes2.mutex3);
@


1.8
log
@2009-12-11  Doug Kwan  <dougkwan@@google.com>

	* arm.cc (Target_arm::do_finalize_sections): Fix build breakage
	due to -Wshadow.
	* attributes.cc (Object_attribute::size): Ditto.
	(Attributes_section_data::size): Ditto.
	(Attributes_section_data::Attributes_section_data): Ditto.
	(Output_attributes_section_data::do_write): Ditto.
	* attributes.h (Object_attribute::set_type): Ditto.
	* testsuite/tls_test_main.cc (safe_lock, safe_unlock): Ditto.
@
text
@d36 2
a37 2
      int pthread_err = pthread_mutex_lock(muptr);	\
      assert(pthread_err == 0);				\
d44 2
a45 2
      int pthread_err = pthread_mutex_unlock(muptr);	\
      assert(pthread_err == 0);				\
@


1.7
log
@2008-08-14  Cary Coutant  <ccoutant@@google.com>

	* x86_64.cc (Target_x86_64::Relocate::relocat_tls):
	Use addend for DTPOFF32, DTPOFF64, and TPOFF32 relocs.
	* testsuite/tls_test.cc (struct int128): 128-bit struct
	for testing TLS relocs with non-zero addend.
	(v12): New TLS variable.
	(t12): New test.
	(t_last): Add check for v12.
	* testsuite/tls_test.h (t12): New function.
	* testsuite/tls_test_main.cc (thread_routine): Call new test.
@
text
@d36 2
a37 2
      int err = pthread_mutex_lock(muptr);	\
      assert(err == 0);				\
d44 2
a45 2
      int err = pthread_mutex_unlock(muptr);	\
      assert(err == 0);				\
@


1.6
log
@	* common.cc (Symbol_table::allocate_commons): Remove options
	parameter.  Change caller.
	(Symbol_table::do_allocate_commons): Remove options parameter.
	Change caller.  Just call do_allocate_commons_list twice.
	(Symbol_table::do_allocate_commons_list): New function, broken out
	of do_allocate_commons.
	* common.h (class Allocate_commons_task): Remove options_ field.
	Update constructor.
	* symtab.cc (Symbol_table::Symbol_table): Initialize
	tls_commons_.
	(Symbol_table::add_from_object): Put TLS common symbols on
	tls_commons_ list.
	(Symbol_table::sized_finalize_symbol): Handle STT_TLS symbols
	which are IN_OUTPUT_DATA.
	* symtab.h (class Symbol_table): Add tls_commons_ field.  Update
	allocate_commons and do_allocate_commons declarations.  Declare
	do_allocate_commons_list.
	* gold.cc (queue_middle_tasks): Update creation of
	Allocate_commons_task to not pass options.
	* testsuite/Makefile.am (INCLUDES): Add -I.. .
	(TLS_TEST_C_FLAGS): New variable.
	(tls_test_c_pic.o): New target.
	(tls_test_shared.so): Link in tls_test_c_pic.o.
	(tls_test_c_pic_ie.o): New target.
	(tls_test_ie_shared.so): Link in tls_test_c_pic_ie.o.
	(tls_test_DEPENDENCIES, tls_test_LDADD): Add tls_test_c.o.
	(tls_test_c.o): New target.
	(tls_pic_test_DEPENDENCIES): Add tls_test_c_pic.o.
	(tls_pic_test_LDADD): Likewise.
	(tls_shared_gd_to_ie_test_DEPENDENCIES): Add tls_test_c_pic.o.
	(tls_shared_gd_to_ie_test_LDADD): Likewise.
	(tls_test_c_gnu2.o): New target.
	(tls_shared_gnu2_gd_to_ie_test_DEPENDENCIES): Add
	tls_test_c_gnu2.o.
	(tls_shared_gnu2_gd_to_ie_test_LDADD): Likewise.
	(tls_test_gnu2_shared.so): Link in tls_test_c_gnu2.o.
	(tls_test_shared_nonpic.so): Link in tls_test_c.o.
	* testsuite/tls_test.cc: Include "config.h".
	(t_last): Call t11_last.
	* testsuite/tls_test.h (t11, t11_last): Declare.
	* testsuite/tls_test_c.c: New file.
	* testsuite/tls_test_main.cc (thread_routine): Call t11.
	* configure.ac: Check for OpenMP support.
	* configure, config.in, Makefile.in: Rebuild.
	* testsuite/Makefile.in: Rebuild.
@
text
@d103 1
@


1.5
log
@Update copyright years.  Update language files.
@
text
@d102 1
@


1.4
log
@From Craig Silverstein: TLS test cleanups.
@
text
@d3 1
a3 1
// Copyright 2006, 2007 Free Software Foundation, Inc.
@


1.3
log
@From Craig Silverstein: expand the TLS test to a second file, to test
IE to LE conversion.
@
text
@d32 17
d86 2
a87 2
  int err = pthread_mutex_lock(&pms->mutex1);
  assert(err == 0);
d105 2
a106 2
  err = pthread_mutex_unlock(&pms->mutex2);
  assert(err == 0);
d109 2
a110 2
  err = pthread_mutex_lock(&pms->mutex3);
  assert(err == 0);
d122 3
d130 2
a131 4
  int err = pthread_mutex_lock(&mutexes1.mutex2);
  assert(err == 0);
  err = pthread_mutex_lock(&mutexes1.mutex3);
  assert(err == 0);
d133 3
a135 6
  err = pthread_mutex_lock(&mutexes2.mutex1);
  assert(err == 0);
  err = pthread_mutex_lock(&mutexes2.mutex2);
  assert(err == 0);
  err = pthread_mutex_lock(&mutexes2.mutex3);
  assert(err == 0);
d138 1
a138 1
  err = pthread_create(&thread1, NULL, thread_routine, &mutexes1);
d146 1
a146 2
  err = pthread_mutex_lock(&mutexes1.mutex2);
  assert(err == 0);
d149 1
a149 2
  err = pthread_mutex_unlock(&mutexes2.mutex1);
  assert(err == 0);
d152 1
a152 2
  err = pthread_mutex_lock(&mutexes2.mutex2);
  assert(err == 0);
d155 1
a155 2
  err = pthread_mutex_unlock(&mutexes1.mutex3);
  assert(err == 0);
d164 1
a164 2
  err = pthread_mutex_unlock(&mutexes2.mutex3);
  assert(err == 0);
@


1.2
log
@Make TLS test fail more reliably.
@
text
@d81 5
a85 1
  check("t7", t7());
d95 1
a95 1
  check("t7", t7());
@


1.1
log
@Add a TLS test case.
@
text
@d27 1
d47 12
d73 4
a76 4
  assert(t1());
  assert(t2());
  assert(t3());
  assert(t4());
d78 1
a78 1
  assert(t5());
d80 2
a81 2
  assert(t6());
  assert(t7());
d91 1
a91 1
  assert(t7());
d158 1
a158 1
  return 0;
@

