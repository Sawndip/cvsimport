head	1.3;
access;
symbols
	binutils-2_24-branch:1.3.0.2
	binutils-2_24-branchpoint:1.3
	binutils-2_23_2:1.1
	binutils-2_23_1:1.1
	binutils-2_23:1.1
	binutils-2_23-branch:1.1.0.2
	binutils-2_23-branchpoint:1.1
	binutils_latest_snapshot:1.3;
locks; strict;
comment	@// @;


1.3
date	2013.01.17.00.00.48;	author tmsriram;	state Exp;
branches;
next	1.2;

1.2
date	2013.01.16.22.47.14;	author tmsriram;	state Exp;
branches;
next	1.1;

1.1
date	2011.09.29.23.45.57;	author tmsriram;	state Exp;
branches;
next	;


desc
@@


1.3
log
@2013-01-16  Sriraman Tallam  <tmsriram@@google.com>

	* testsuite/plugin_final_layout.cc: Fix comment.
@
text
@// plugin_final_layout.cc -- a test case for gold

// Copyright 2011 Free Software Foundation, Inc.
// Written by Sriraman Tallam <tmsriram@@google.com>.

// This file is part of gold.

// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,
// MA 02110-1301, USA.

// The goal of this program is to verify if section ordering
// via plugins happens correctly.  Also, test if plugin based ordering
// overrides default text section ordering where ".text.hot" sections
// are grouped.  The plugin does not want foo and baz next to each other.
// Plugin section order is foo() followed by bar() and then baz().

__attribute__ ((section(".text._Z3barv")))
void bar ()
{
}

__attribute__ ((section(".text.hot._Z3bazv")))
void baz ()
{
}

__attribute__ ((section(".text.hot._Z3foov")))
void foo ()
{
}

int main ()
{
  return 0;
}
@


1.2
log
@2013-01-16  Sriraman Tallam  <tmsriram@@google.com>

	* layout.cc (Layout::layout): Do not do default sorting for
	text sections when section ordering is specified.
	(make_output_section): Ditto.
	* testsuite/plugin_final_layout.cc: Name the function sections
	to catch reordering issues.
@
text
@d24 1
a24 1
// via plugins happens correctly.  Also, test is plugin based ordering
@


1.1
log
@
2011-09-29 Sriraman Tallam  <tmsriram@@google.com>

	* layout.h (section_order_map_): New member.
	(get_section_order_map): New member function.
	* output.cc (Output_section::add_input_section): Check for patterns
	only when --section-ordering-file is specified.
	* gold.cc (queue_middle_tasks): Delay updating order of sections till
	output_sections have been formed.
	* layout.cc (Layout_Layout): Initialize section_order_map_.
	* plugin.cc (update_section_order): Store order in order_map. Do not
	update the order.
	* testsuite/Makefile.am: Add test case for plugin_final_layout.
	* testsuite/Makefile.in: Regenerate.
	* testsuite/plugin_section_order.c: New file.
	* testsuite/plugin_final_layout.cc: New file.
	* testsuite/plugin_final_layout.sh: New file.
@
text
@d24 4
a27 1
// via plugins happens correctly.
d29 1
d34 1
d39 1
@

