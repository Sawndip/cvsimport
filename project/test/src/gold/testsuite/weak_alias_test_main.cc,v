head	1.2;
access;
symbols
	binutils-2_24-branch:1.2.0.8
	binutils-2_24-branchpoint:1.2
	binutils-2_21_1:1.1
	binutils-2_23_2:1.2
	binutils-2_23_1:1.2
	binutils-2_23:1.2
	binutils-2_23-branch:1.2.0.6
	binutils-2_23-branchpoint:1.2
	binutils-2_22_branch:1.2.0.4
	binutils-2_22:1.2
	binutils-2_22-branch:1.2.0.2
	binutils-2_22-branchpoint:1.2
	binutils-2_21:1.1
	binutils-2_21-branch:1.1.0.12
	binutils-2_21-branchpoint:1.1
	binutils-2_20_1:1.1
	binutils-2_20:1.1
	binutils-arc-20081103-branch:1.1.0.10
	binutils-arc-20081103-branchpoint:1.1
	binutils-2_20-branch:1.1.0.8
	binutils-2_20-branchpoint:1.1
	dje-cgen-play1-branch:1.1.0.6
	dje-cgen-play1-branchpoint:1.1
	arc-20081103-branch:1.1.0.4
	arc-20081103-branchpoint:1.1
	binutils-2_19_1:1.1
	binutils-2_19:1.1
	binutils-2_19-branch:1.1.0.2
	binutils-2_19-branchpoint:1.1
	binutils_latest_snapshot:1.2;
locks; strict;
comment	@// @;


1.2
date	2011.07.02.05.30.00;	author ian;	state Exp;
branches;
next	1.1;

1.1
date	2008.04.09.22.45.08;	author ian;	state Exp;
branches;
next	;


desc
@@


1.2
log
@	PR gold/12525
	PR gold/12952
	* resolve.cc (Symbol::override_base_with_special): Don't override
	the version if the overriding symbol has a different name.
	* dynobj.cc (Versions::add_def): Add dynpool parameter.  Change
	all callers.  If we give an error about an undefined version,
	define the base version if necessary.
	* dynobj.h (class Versions): Update declaration.
	* testsuite/weak_alias_test_5.cc: New file.
	* testsuite/weak_alias_test.script: New file.
	* testsuite/weak_alias_test_main.cc: Check that versioned_symbol
	and versioned_alias have the right value, and call t2.
	* testsuite/Makefile.am (weak_alias_test_DEPENDENCIES): Add
	weak_alias_test_5.so.
	(weak_alias_test_LDADD): Likewise.
	(weak_alias_test_5_pic.o, weak_alias_test_5.so): New targets.
	* testsuite/Makefile.in: Rebuild.
@
text
@// weak_alias_test_main.cc -- test weak aliases for gold

// Copyright 2008 Free Software Foundation, Inc.
// Written by Ian Lance Taylor <iant@@google.com>.

// This file is part of gold.

// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,
// MA 02110-1301, USA.

#include <assert.h>

// Defined in both weak_alias_test_1.cc and weak_alias_test_2.cc, but
// we should get the one in weak_alias_test_1.cc.
extern int weak_symbol;

// Defined in weak_alias_test_2.cc.
extern int strong_symbol;

// weak_aliased is an alias for this.
int strong_aliased = 3;

// Defined as a weak alias in weak_alias_test_1.cc.
int weak_aliased_2 = 6;

// Defined in weak_alias_test_1.cc
extern int strong_aliased_3;
extern int weak_aliased_4;

// Defined in weak_alias_test_5.cc
extern int versioned_symbol;
extern int versioned_alias;

extern bool t1();
extern bool t2();

int
main()
{
  // weak_symbol should come from weak_alias_test_3.cc.
  assert(weak_symbol == 4);

  // strong_symbol should come from weak_alias_test_2.cc.
  assert(strong_symbol == 2);

  // strong_aliased should come from this file, above.
  assert(strong_aliased == 3);

  // weak_aliased_2 should come from this file, above.
  assert(weak_aliased_2 == 6);

  // strong_aliased_3 should come from weak_alias_test_1.cc.
  assert(strong_aliased_3 == 7);

  // weak_aliased_4 should come from weak_alias_test_1.cc.
  assert(weak_aliased_4 == 8);

  // Make sure the symbols look right from a shared library.
  assert(t1());

  // versioned_symbol comes from weak_alias_test_5.cc.
  assert(versioned_symbol == 1);
  // So does versioned_alias.
  assert(versioned_alias == 1);

  // Make sure the versioned symbols look right from a shared library.
  assert(t2());
}
@


1.1
log
@	* symtab.cc (Symbol_table::add_from_dynobj): Only look for weak
	aliases for symbols defined in the same object.
	* testsuite/Makefile.am (check_PROGRAMS): Add weak_alias_test.
	(weak_alias_test_SOURCES): New variable.
	(weak_alias_test_DEPENDENCIES): New variable.
	(weak_alias_test_LDFLAGS): New variable.
	(weak_alias_test_LDADD): New variable.
	(weak_alias_test_1_pic.o, weak_alias_test_1.so): New targets.
	(weak_alias_test_2_pic.o, weak_alias_test_2.so): New targets.
	(weak_alias_test_3.o): New target.
	(weak_alias_test_4_pic.o, weak_alias_test_4.so): New targets.
	* testsuite/weak_alias_test_main.cc: New file.
	* testsuite/weak_alias_test_1.cc: New file.
	* testsuite/weak_alias_test_2.cc: New file.
	* testsuite/weak_alias_test_3.cc: New file.
@
text
@d42 4
d47 1
d72 8
@

