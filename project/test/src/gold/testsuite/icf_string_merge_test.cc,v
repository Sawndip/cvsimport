head	1.1;
access;
symbols
	binutils-2_24-branch:1.1.0.10
	binutils-2_24-branchpoint:1.1
	binutils-2_21_1:1.1
	binutils-2_23_2:1.1
	binutils-2_23_1:1.1
	binutils-2_23:1.1
	binutils-2_23-branch:1.1.0.8
	binutils-2_23-branchpoint:1.1
	binutils-2_22_branch:1.1.0.6
	binutils-2_22:1.1
	binutils-2_22-branch:1.1.0.4
	binutils-2_22-branchpoint:1.1
	binutils-2_21:1.1
	binutils-2_21-branch:1.1.0.2
	binutils-2_21-branchpoint:1.1
	binutils_latest_snapshot:1.1;
locks; strict;
comment	@// @;


1.1
date	2010.04.20.21.13.30;	author tmsriram;	state Exp;
branches;
next	;


desc
@@


1.1
log
@2010-04-18  Sriraman Tallam  <tmsriram@@google.com>

	* icf.cc (get_section_contents): Check for preemptible functions.
	Ignore addend when appropriate.
	* symtab.cc (should_add_dynsym_entry): Add new parameter.  Check for
	section folded.
	(add_from_relobj): Check for section folded.
	(set_dynsym_indexes): Fix call to should_add_dynsym_entry.
	* symtab.h (should_add_dynsym_entry): Add new parameter.
	* target-reloc.h (scan_relocs): Check for section folded.
	* x86_64.cc (Target_x86_64::Scan::possible_function_pointer_reloc):
	Check reloc types for function pointers in shared objects.
	* testsuite/Makefile.am (icf_virtual_function_folding_test): New test
	case.
	(icf_preemptible_functions_test): New test case.
	(icf_string_merge_test): New test case.
	* testsuite.Makefile.in: Regenerate.
	* testsuite/icf_safe_so_test.sh: Change to not fold foo_glob and
	bar_glob.  Refactor code.
	* testsuite/icf_preemptible_functions_test.cc: New file.
	* testsuite/icf_preemptible_functions_test.sh: New file.
	* testsuite/icf_string_merge_test.cc: New file.
	* testsuite/icf_string_merge_test.sh: New file.
	* testsuite/icf_virtual_function_folding_test.cc: New file.
	* testsuite/icf_virtual_function_folding_test.sh: New file.
@
text
@// icf_string_merge_test.cc -- a test case for gold

// Copyright 2010 Free Software Foundation, Inc.
// Written by Sriraman Tallam <tmsriram@@google.com>.

// This file is part of gold.

// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,
// MA 02110-1301, USA.

// The goal of this program is to verify is strings are handled correctly
// by ICF.  ICF inlines strings that can be merged.  In some cases, the
// addend of the relocation pointing to a string merge section must be
// ignored.  This program has no pair of identical functions that can be
// folded.  However, if the addend is not ignored then get2 and get3 will
// become identical.

const char* const str1 = "aaaaaaaaaastr1";
const char* const str2 = "bbbbaaaaaastr1";
const char* const str3 = "cccccaaaaastr1";

const char* get1()
{
  return str1;
}
const char* get2()
{
  return str2;
}

const char* get3()
{
  return str3;
}
int main()
{
  return 0;
}
@
