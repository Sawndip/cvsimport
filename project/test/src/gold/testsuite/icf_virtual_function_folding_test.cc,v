head	1.3;
access;
symbols
	binutils-2_24-branch:1.3.0.8
	binutils-2_24-branchpoint:1.3
	binutils-2_21_1:1.2.2.1
	binutils-2_23_2:1.3
	binutils-2_23_1:1.3
	binutils-2_23:1.3
	binutils-2_23-branch:1.3.0.6
	binutils-2_23-branchpoint:1.3
	binutils-2_22_branch:1.3.0.4
	binutils-2_22:1.3
	binutils-2_22-branch:1.3.0.2
	binutils-2_22-branchpoint:1.3
	binutils-2_21:1.2.2.1
	binutils-2_21-branch:1.2.0.2
	binutils-2_21-branchpoint:1.2
	binutils_latest_snapshot:1.3;
locks; strict;
comment	@// @;


1.3
date	2010.12.01.16.53.57;	author ian;	state Exp;
branches;
next	1.2;

1.2
date	2010.04.23.18.49.23;	author tmsriram;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	2010.04.20.21.13.30;	author tmsriram;	state Exp;
branches;
next	;

1.2.2.1
date	2010.12.01.16.57.23;	author ian;	state Exp;
branches;
next	;


desc
@@


1.3
log
@	* testsuite/icf_virtual_function_folding_test.cc (class Bar): Add
	virtual destructor.
@
text
@// icf_virtual_function_folding_test.cc -- a test case for gold

// Copyright 2010 Free Software Foundation, Inc.
// Written by Sriraman Tallam <tmsriram@@google.com>.

// This file is part of gold.

// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,
// MA 02110-1301, USA.

// Foo::fn1 is folded into fn2 with ICF.  Since this file is linked as a
// position independent executable, a dynamic reloc is needed
// for the virtual call fn1 entry in the vtable.  This test makes sure
// the call to Foo::fn1 works correctly after the folding.

int fn2(void *)
{
  return 0xA;
}

namespace
{

class Bar
{
 public:
  virtual ~Bar() { }
  virtual int fn1();
};

int Bar::fn1()
{
  return 123;
}

class Foo : public Bar
{
  virtual int fn1();
};

int Foo::fn1()
{
  return 0xA;
}

Bar* get()
{
  Bar *f = new Foo();
  return f;
}

} // end of anonymous namespace.

int main()
{
  Bar *f = get();
  f->fn1();
  return 0;
}
@


1.2
log
@2010-04-23  Sriraman Tallam  <tmsriram@@google.com>

	* gc.h (gc_process_relocs): Pass information on relocs pointing to
	sections that are not ordinary to icf.
	* icf.cc (get_section_contents): Handle relocation pointing to section
	with no object or shndx information.
	* testsuite/Makefile.am: Remove icf_virtual_function_folding_test.sh
	* testsuite/Makefile.in: Regenerate.
	* testsuite/icf_virtual_function_folding_test.cc: Remove printf.
	* testsuite/icf_virtual_function_folding_test.sh: Delete file.
@
text
@d39 1
@


1.2.2.1
log
@	* testsuite/icf_virtual_function_folding_test.cc (class Bar): Add
	virtual destructor.
@
text
@a38 1
  virtual ~Bar() { }
@


1.1
log
@2010-04-18  Sriraman Tallam  <tmsriram@@google.com>

	* icf.cc (get_section_contents): Check for preemptible functions.
	Ignore addend when appropriate.
	* symtab.cc (should_add_dynsym_entry): Add new parameter.  Check for
	section folded.
	(add_from_relobj): Check for section folded.
	(set_dynsym_indexes): Fix call to should_add_dynsym_entry.
	* symtab.h (should_add_dynsym_entry): Add new parameter.
	* target-reloc.h (scan_relocs): Check for section folded.
	* x86_64.cc (Target_x86_64::Scan::possible_function_pointer_reloc):
	Check reloc types for function pointers in shared objects.
	* testsuite/Makefile.am (icf_virtual_function_folding_test): New test
	case.
	(icf_preemptible_functions_test): New test case.
	(icf_string_merge_test): New test case.
	* testsuite.Makefile.in: Regenerate.
	* testsuite/icf_safe_so_test.sh: Change to not fold foo_glob and
	bar_glob.  Refactor code.
	* testsuite/icf_preemptible_functions_test.cc: New file.
	* testsuite/icf_preemptible_functions_test.sh: New file.
	* testsuite/icf_string_merge_test.cc: New file.
	* testsuite/icf_string_merge_test.sh: New file.
	* testsuite/icf_virtual_function_folding_test.cc: New file.
	* testsuite/icf_virtual_function_folding_test.sh: New file.
@
text
@a27 2
#include <stdio.h>

a29 1
  printf("fn1==fn2\n");
a53 1
  printf("fn1==fn2\n");
@

