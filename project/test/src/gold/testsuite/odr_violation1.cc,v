head	1.3;
access;
symbols
	binutils-2_24-branch:1.3.0.8
	binutils-2_24-branchpoint:1.3
	binutils-2_21_1:1.2
	binutils-2_23_2:1.3
	binutils-2_23_1:1.3
	binutils-2_23:1.3
	binutils-2_23-branch:1.3.0.6
	binutils-2_23-branchpoint:1.3
	binutils-2_22_branch:1.3.0.4
	binutils-2_22:1.3
	binutils-2_22-branch:1.3.0.2
	binutils-2_22-branchpoint:1.3
	binutils-2_21:1.2
	binutils-2_21-branch:1.2.0.2
	binutils-2_21-branchpoint:1.2
	binutils-2_20_1:1.1
	binutils-2_20:1.1
	binutils-arc-20081103-branch:1.1.0.10
	binutils-arc-20081103-branchpoint:1.1
	binutils-2_20-branch:1.1.0.8
	binutils-2_20-branchpoint:1.1
	dje-cgen-play1-branch:1.1.0.6
	dje-cgen-play1-branchpoint:1.1
	arc-20081103-branch:1.1.0.4
	arc-20081103-branchpoint:1.1
	binutils-2_19_1:1.1
	binutils-2_19:1.1
	binutils-2_19-branch:1.1.0.2
	binutils-2_19-branchpoint:1.1
	binutils_latest_snapshot:1.3
	added-to-binutils:1.1;
locks; strict;
comment	@// @;


1.3
date	2011.03.10.01.31.33;	author ian;	state Exp;
branches;
next	1.2;

1.2
date	2010.07.27.08.22.49;	author ian;	state Exp;
branches;
next	1.1;

1.1
date	2007.11.14.01.03.01;	author iant;	state Exp;
branches;
next	;


desc
@@


1.3
log
@	* dwarf_reader.cc (Sized_dwarf_line_info): Include all lines,
	but mark earlier ones as non-canonical
	(offset_to_iterator): Update search target and example
	(do_addr2line): Return extra lines in a vector*
	(format_file_lineno): Extract from do_addr2line
	(one_addr2line): Add vector* out-param
	* dwarf_reader.h (Offset_to_lineno_entry): New field recording
	when a lineno entry appeared last for its instruction
	(Dwarf_line_info): Add vector* out-param
	* object.cc (Relocate_info): Pass NULL for the vector* out-param
	* symtab.cc (Odr_violation_compare): Include the lineno in the
	comparison again.
	(linenos_from_loc): New. Combine the canonical line for an
	address with its other lines.
	(True_if_intersect): New. Helper functor to make
	std::set_intersection a query.
	(detect_odr_violations): Compare sets of lines instead of just
	one line for each function. This became less deterministic, but
	has fewer false positives.
	* symtab.h: Declarations.
	* testsuite/Makefile.am (odr_violation2.o): Compile with -O2 to
	mix an optimized and non-optimized object in the same binary
	(odr_violation2.so): Same.
	* testsuite/Makefile.in: Regenerate from Makefile.am.
	* testsuite/debug_msg.cc (main): Make OdrDerived classes.
	* testsuite/debug_msg.sh: Update line numbers and add
	assertions.
	* testsuite/odr_violation1.cc: Use OdrDerived, in a
	non-optimized context.
	* testsuite/odr_violation2.cc: Make sure Ordering::operator()
	isn't inlined, and use OdrDerived in an optimized context.
	* testsuite/odr_header1.h: Defines OdrDerived, where
	optimization will change the
	first-instruction-in-the-destructor's file and line number.
	* testsuite/odr_header2.h: Defines OdrBase.
@
text
@#include <algorithm>
#include "odr_header1.h"

class Ordering {
 public:
  bool operator()(int a, int b) {
    return a < b;
  }
};

void SortAscending(int array[], int size) {
  std::sort(array, array + size, Ordering());
}

extern "C" int OverriddenCFunction(int i) __attribute__ ((weak));
extern "C" int OverriddenCFunction(int i) {
  return i;
}

// Instantiate the Derived vtable, without optimization.
OdrBase* CreateOdrDerived1() {
  return new OdrDerived;
}
@


1.2
log
@	* testsuite/debug_msg.sh: Test mixed weak/strong symbol behavior.
	* gold/testsuite/debug_msg.cc: Likewise.
	* gold/testsuite/odr_violation1.cc
	* gold/testsuite/odr_violation2.cc
@
text
@d2 1
d19 5
@


1.1
log
@From Craig Silverstein: Rework debug info code a bit, add option for
ODR violations, add test case.
@
text
@d13 5
@

