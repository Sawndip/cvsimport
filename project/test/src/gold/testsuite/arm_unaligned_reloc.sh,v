head	1.2;
access;
symbols
	binutils-2_24-branch:1.2.0.4
	binutils-2_24-branchpoint:1.2
	binutils-2_23_2:1.2
	binutils-2_23_1:1.2
	binutils-2_23:1.2
	binutils-2_23-branch:1.2.0.2
	binutils-2_23-branchpoint:1.2
	binutils-2_22_branch:1.1.2.1.0.2
	binutils-2_22:1.1.2.1
	binutils-2_22-branch:1.1.0.2
	binutils-2_22-branchpoint:1.1
	binutils_latest_snapshot:1.2;
locks; strict;
comment	@# @;


1.2
date	2011.11.10.00.41.53;	author dougkwan;	state Exp;
branches;
next	1.1;

1.1
date	2011.07.06.17.58.42;	author dougkwan;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2011.11.21.09.32.17;	author gingold;	state Exp;
branches;
next	;


desc
@@


1.2
log
@2011-11-09  Doug Kwan  <dougkwan@@google.com>

	PR gold/13362
	* arm.cc (Arm_scan_relocatable_relocs::Default_scan_relocatable_relocs):
	Use unaligned 4-byte relocs for static 32-bit data as required by EABI.
	* reloc.h (Relocatable_relocs::Reloc_strategy): New enum
	RELOC_ADJUST_FOR_SECTION_4_UNALIGNED.
	(Relocate_functions::rel_unaligned): New.
	(Relocate_functions::rel32_unaligned): New.
	* target-reloc.h (relocate_for_relocatable): Add code to handle
	RELOC_ADJUST_FOR_SECTION_4_UNALIGNED.
	* testsuite/Makefile.am (arm_unaligned_reloc_r.stdout,
	arm_unaligned_reloc_r): New targets.
	* testsuite/Makefile.in: Regenerate.
	* arm_unaligned_reloc.sh: Check unaligned relocs in relocatable
	linking.
@
text
@#!/bin/sh

# arm_unaligned_reloc.sh -- test ARM unaligned static data relocations.

# Copyright 2011 Free Software Foundation, Inc.
# Written by Doug Kwan <dougkwan@@google.com>

# This file is part of gold.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,
# MA 02110-1301, USA.

# This file goes with the assembler source file arm_unaligned_reloc.s,
# that is assembled and linked as a dummy executable.  We want to check
# it is okay to do unaligned static data relocations.

check()
{
    if ! grep -q -e "$2" "$1"
    then
	echo "Did not find pattern \"$2\" in $1:"
	echo "   $2"
	echo ""
	echo "Actual disassembly below:"
	cat "$1"
	exit 1
    fi
}

check arm_unaligned_reloc.stdout "^00009000 <x>:$"
check arm_unaligned_reloc.stdout "^0000a001 <abs32>:$"
check arm_unaligned_reloc.stdout "^    a001:	00009000 .*$"
check arm_unaligned_reloc.stdout "^0000a005 <rel32>:"
check arm_unaligned_reloc.stdout "^    a005:	ffffeffb .*$"
check arm_unaligned_reloc.stdout "^0000a009 <abs16>:"
check arm_unaligned_reloc.stdout "^    a009:	00009000 .*$"

check arm_unaligned_reloc_r.stdout "^   1:	00000000 .*$"
check arm_unaligned_reloc_r.stdout "^[	]*1: R_ARM_ABS32	.data.0$"
check arm_unaligned_reloc_r.stdout "^   5:	00000000 .*$"
check arm_unaligned_reloc_r.stdout "^[	]*5: R_ARM_REL32	.data.0$"
check arm_unaligned_reloc_r.stdout "^   9:	00000000 .*$"
check arm_unaligned_reloc_r.stdout "^[	]*9: R_ARM_ABS16	.data.0$"

exit 0
@


1.1
log
@2011-07-05  Doug Kwan  <dougkwan@@google.com>

	PR gold/12771
	* arm.cc (Arm_relocate_functions::abs8): Use int32_t for addend and
	Arm_Address type for relocation result.
	(Arm_relocate_functions::abs16): Use unaligned access.  Also fix
	overflow check.
	(Arm_relocate_functions::abs32): Use unaligned access.
	(Arm_relocate_functions::rel32): Ditto.
	(Arm_relocate_functions::prel31): Ditto.
	(Arm_exidix_cantunwind::do_fixed_endian_write): Ditto.
	* testsuite/Makefile.am: Add new test arm_unaligned_reloc for unaligned
	static data relocations.
	* testsuite/Makefile.in: Regnerate.
	* testsuite/arm_unaligned_reloc.{s,sh}: New files.
@
text
@d50 7
@


1.1.2.1
log
@Merge of
CVSROOT:	/cvs/src
Module name:	src
Changes by:	dougkwan@@sourceware.org	2011-11-10 00:41:53

Modified files:
	gold           : ChangeLog arm.cc reloc.h target-reloc.h
	gold/testsuite : Makefile.am Makefile.in arm_unaligned_reloc.sh

Log message:
	2011-11-09  Doug Kwan  <dougkwan@@google.com>

	PR gold/13362
	* arm.cc (Arm_scan_relocatable_relocs::Default_scan_relocatable_relocs):
	Use unaligned 4-byte relocs for static 32-bit data as required by EABI.
	* reloc.h (Relocatable_relocs::Reloc_strategy): New enum
	RELOC_ADJUST_FOR_SECTION_4_UNALIGNED.
	(Relocate_functions::rel_unaligned): New.
	(Relocate_functions::rel32_unaligned): New.
	* target-reloc.h (relocate_for_relocatable): Add code to handle
	RELOC_ADJUST_FOR_SECTION_4_UNALIGNED.
	* testsuite/Makefile.am (arm_unaligned_reloc_r.stdout,
	arm_unaligned_reloc_r): New targets.
	* testsuite/Makefile.in: Regenerate.
	* arm_unaligned_reloc.sh: Check unaligned relocs in relocatable
	linking.
@
text
@a49 7
check arm_unaligned_reloc_r.stdout "^   1:	00000000 .*$"
check arm_unaligned_reloc_r.stdout "^[	]*1: R_ARM_ABS32	.data.0$"
check arm_unaligned_reloc_r.stdout "^   5:	00000000 .*$"
check arm_unaligned_reloc_r.stdout "^[	]*5: R_ARM_REL32	.data.0$"
check arm_unaligned_reloc_r.stdout "^   9:	00000000 .*$"
check arm_unaligned_reloc_r.stdout "^[	]*9: R_ARM_ABS16	.data.0$"

@


