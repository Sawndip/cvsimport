head	1.1;
access;
symbols
	binutils-2_24-branch:1.1.0.20
	binutils-2_24-branchpoint:1.1
	binutils-2_21_1:1.1
	binutils-2_23_2:1.1
	binutils-2_23_1:1.1
	binutils-2_23:1.1
	binutils-2_23-branch:1.1.0.18
	binutils-2_23-branchpoint:1.1
	binutils-2_22_branch:1.1.0.16
	binutils-2_22:1.1
	binutils-2_22-branch:1.1.0.14
	binutils-2_22-branchpoint:1.1
	binutils-2_21:1.1
	binutils-2_21-branch:1.1.0.12
	binutils-2_21-branchpoint:1.1
	binutils-2_20_1:1.1
	binutils-2_20:1.1
	binutils-arc-20081103-branch:1.1.0.10
	binutils-arc-20081103-branchpoint:1.1
	binutils-2_20-branch:1.1.0.8
	binutils-2_20-branchpoint:1.1
	dje-cgen-play1-branch:1.1.0.6
	dje-cgen-play1-branchpoint:1.1
	arc-20081103-branch:1.1.0.4
	arc-20081103-branchpoint:1.1
	binutils-2_19_1:1.1
	binutils-2_19:1.1
	binutils-2_19-branch:1.1.0.2
	binutils-2_19-branchpoint:1.1
	binutils_latest_snapshot:1.1
	added-to-binutils:1.1;
locks; strict;
comment	@// @;


1.1
date	2008.01.09.19.57.45;	author iant;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Support assignments and expressions in linker scripts.
@
text
@// script_test_1.cc -- linker script test 1 for gold  -*- C++ -*-

// Copyright 2008 Free Software Foundation, Inc.
// Written by Ian Lance Taylor <iant@@google.com>.

// This file is part of gold.

// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,
// MA 02110-1301, USA.

// A test for a linker script which sets symbols to values.

#include <cassert>
#include <cstddef>
#include <stdint.h>

extern char a, b, c, d, e, f, g;
int sym = 3;
int common_sym;

int
main(int, char**)
{
  assert(reinterpret_cast<intptr_t>(&a) == 123);
  assert(reinterpret_cast<intptr_t>(&b) == reinterpret_cast<intptr_t>(&a) * 2);
  assert(reinterpret_cast<intptr_t>(&c)
	 == reinterpret_cast<intptr_t>(&b) + 3 * 6);
  assert(reinterpret_cast<intptr_t>(&d)
	 == (reinterpret_cast<intptr_t>(&b) + 3) * 6);
  assert(reinterpret_cast<int*>(&e) == &sym);
  assert(reinterpret_cast<intptr_t>(&f)
	 == reinterpret_cast<intptr_t>(&sym) + 10);
  assert(reinterpret_cast<int*>(&g) == &common_sym);
  return 0;
}
@
