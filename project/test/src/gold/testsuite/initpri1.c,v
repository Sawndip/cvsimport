head	1.4;
access;
symbols
	binutils-2_24-branch:1.4.0.10
	binutils-2_24-branchpoint:1.4
	binutils-2_21_1:1.4
	binutils-2_23_2:1.4
	binutils-2_23_1:1.4
	binutils-2_23:1.4
	binutils-2_23-branch:1.4.0.8
	binutils-2_23-branchpoint:1.4
	binutils-2_22_branch:1.4.0.6
	binutils-2_22:1.4
	binutils-2_22-branch:1.4.0.4
	binutils-2_22-branchpoint:1.4
	binutils-2_21:1.4
	binutils-2_21-branch:1.4.0.2
	binutils-2_21-branchpoint:1.4
	binutils-2_20_1:1.3.4.1
	binutils-2_20:1.3.4.1
	binutils-arc-20081103-branch:1.2.0.6
	binutils-arc-20081103-branchpoint:1.2
	binutils-2_20-branch:1.3.0.4
	binutils-2_20-branchpoint:1.3
	dje-cgen-play1-branch:1.3.0.2
	dje-cgen-play1-branchpoint:1.3
	arc-20081103-branch:1.2.0.4
	arc-20081103-branchpoint:1.2
	binutils-2_19_1:1.2
	binutils-2_19:1.2
	binutils-2_19-branch:1.2.0.2
	binutils-2_19-branchpoint:1.2
	binutils_latest_snapshot:1.4;
locks; strict;
comment	@ * @;


1.4
date	2009.09.27.05.20.03;	author ian;	state Exp;
branches;
next	1.3;

1.3
date	2008.12.09.16.03.47;	author ian;	state Exp;
branches
	1.3.4.1;
next	1.2;

1.2
date	2008.03.29.08.09.55;	author ian;	state Exp;
branches;
next	1.1;

1.1
date	2008.03.28.22.42.34;	author ian;	state Exp;
branches;
next	;

1.3.4.1
date	2009.10.16.05.51.18;	author ian;	state Exp;
branches;
next	;


desc
@@


1.4
log
@	* testsuite/initpri1.c: Don't try to use constructor priorities if
	compiling with gcc before 4.3.
@
text
@/* initpri1.c -- test constructor priorities.

   Copyright 2007, 2008, 2009 Free Software Foundation, Inc.
   Copied from the gcc testsuite, where the test was contributed by
   Mark Mitchell <mark@@codesourcery.com>.

   This file is part of gold.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,
   MA 02110-1301, USA.  */

/* This tests that the linker handles constructor and destructor
   priorities correctly.  */

#include <stdlib.h>

/* Constructor priorities in attributes were added in gcc 4.3.  */
#if __GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ > 2)

int i;
int j;

void c1(void) __attribute__((constructor (500)));
void c2(void) __attribute__((constructor (700)));
void c3(void) __attribute__((constructor (600)));

void c1() {
  if (i++ != 0)
    abort ();
}

void c2() {
  if (i++ != 2)
    abort ();
}

void c3() {
  if (i++ != 1)
    abort ();
}

void d1(void) __attribute__((destructor (500)));
void d2(void) __attribute__((destructor (700)));
void d3(void) __attribute__((destructor (600)));

void d1() {
  if (--i != 0)
    abort ();
}

void d2() {
  if (--i != 2)
    abort ();
}

void d3() {
  if (j != 4)
    abort ();
  if (--i != 1)
    abort ();
}

void cd4(void) __attribute__((constructor (800), destructor (800)));

void cd4() {
  if (i != 3)
    abort ();
  ++j;
}

void cd5(void) __attribute__((constructor, destructor));

void cd5() {
  if (i != 3)
    abort();
  ++j;
}

int main (void) {
  if (i != 3)
    return 1;
  if (j != 2)
    abort ();
  return 0;
}

#else /* !(__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ > 2)) */

int main (void) {
  exit (0);
}

#endif /* !(__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ > 2)) */
@


1.3
log
@	* testsuite/initpri1.c: Change all declarations to be full
	prototypes by adding void, to avoid compiler warnings.
@
text
@d3 1
a3 1
   Copyright 2007, 2008 Free Software Foundation, Inc.
d22 1
a22 1
   MA 02110-1301, USA.
d24 2
a25 3
   This is a test of a common symbol in the main program and a
   versioned symbol in a shared library.  The common symbol in the
   main program should override the shared library symbol.  */
d29 3
d98 8
@


1.3.4.1
log
@Merge elfcpp and gold from trunk.
@
text
@d3 1
a3 1
   Copyright 2007, 2008, 2009 Free Software Foundation, Inc.
d22 1
a22 1
   MA 02110-1301, USA.  */
d24 3
a26 2
/* This tests that the linker handles constructor and destructor
   priorities correctly.  */
a29 3
/* Constructor priorities in attributes were added in gcc 4.3.  */
#if __GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ > 2)

a95 8

#else /* !(__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ > 2)) */

int main (void) {
  exit (0);
}

#endif /* !(__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ > 2)) */
@


1.2
log
@	* output.cc
	(Output_section::Input_section_sort_entry::has_priority): New
	function.
	(Output_section::Input_section_sort_entry::match_file_name): New
	function.
	(Output_section::Input_section_sort_entry::match_section_name):
	Remove.
	(Output_section::Input_section_sort_entry::match_section_name_prefix):
	Remove.
	(Output_section::Input_section_sort_entry::match_section_file):
	Remove.
	(Output_section::Input_section_sort_compare::operator()): Rewrite
	using new Input_section_sort_entry functions.  Sort crtbegin and
	crtend first.  Sort sections with no priority before sections with
	a priority.
	* testsuite/initpri1.c (d3): Check j != 4.
	(cd5): New constructor/destructor function.
	(main): Check j != 2.
@
text
@d33 3
a35 3
void c1() __attribute__((constructor (500)));
void c2() __attribute__((constructor (700)));
void c3() __attribute__((constructor (600)));
d52 3
a54 3
void d1() __attribute__((destructor (500)));
void d2() __attribute__((destructor (700)));
void d3() __attribute__((destructor (600)));
d73 1
a73 1
void cd4() __attribute__((constructor (800), destructor (800)));
d81 1
a81 1
void cd5() __attribute__((constructor, destructor));
d89 1
a89 1
int main () {
@


1.1
log
@	* layout.cc (Layout::layout): If we see an input section with a
	name that needs sorting, set the must_sort flag for the output
	section.
	(Layout::make_output_section): If the name of the output section
	indicates that it might	require sorting, set the may_sort flag.
	* output.h (Output_section::may_sort_attached_input_sections): New
	function.
	(Output_section::set_may_sort_attached_input_sections): New
	function.
	(Output_section::must_sort_attached_input_sections): New
	function.
	(Output_section::set_must_sort_attached_input_sections): New
	function.
	(class Output_section): Declare Input_section_sort_entry.  Define
	Input_section_sort_compare.  Declare
	sort_attached_input_sections.  Add new fields:
	may_sort_attached_input_sections_,
	must_sort_attached_input_sections_,
	attached_input_sections_are_sorted_.
	* output.cc (Output_section::Output_section): Initialize new
	fields.
	(Output_section::add_input_section): Add an entry to
	input_sections_ if may_sort or must_sort are true.
	(Output_section::set_final_data_size): Call
	sort_attached_input_sections if necessary.
	(Output_section::Input_section_sort_entry): Define new class.
	(Output_section::Input_section_sort_compare::operator()): New
	function.
	(Output_section::sort_attached_input_sections): New function.
	* configure.ac: Check whether the compiler supports constructor
	priorities.  Define a CONSTRUCTOR_PRIORITY automake conditional.
	* testsuite/initpri1.c: New file.
	* testsuite/Makefile.am (check_PROGRAMS): Add initpri1 if
	CONSTRUCTOR_PRIORITY.
	(initpri1_SOURCES, initpri1_DEPENDENCIES): New variables.
	(initpri1_LDFLAGS): New variable.
	* configure, Makefile.in, testsuite/Makefile.in: Rebuild.
@
text
@d67 1
a67 1
  if (j != 2)
d81 8
d92 1
a92 1
  if (j != 1)
@

