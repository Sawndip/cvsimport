head	1.3;
access;
symbols
	binutils-2_24-branch:1.3.0.10
	binutils-2_24-branchpoint:1.3
	binutils-2_21_1:1.3
	binutils-2_23_2:1.3
	binutils-2_23_1:1.3
	binutils-2_23:1.3
	binutils-2_23-branch:1.3.0.8
	binutils-2_23-branchpoint:1.3
	binutils-2_22_branch:1.3.0.6
	binutils-2_22:1.3
	binutils-2_22-branch:1.3.0.4
	binutils-2_22-branchpoint:1.3
	binutils-2_21:1.3
	binutils-2_21-branch:1.3.0.2
	binutils-2_21-branchpoint:1.3
	binutils-2_20_1:1.2
	binutils-2_20:1.2
	binutils-arc-20081103-branch:1.2.0.10
	binutils-arc-20081103-branchpoint:1.2
	binutils-2_20-branch:1.2.0.8
	binutils-2_20-branchpoint:1.2
	dje-cgen-play1-branch:1.2.0.6
	dje-cgen-play1-branchpoint:1.2
	arc-20081103-branch:1.2.0.4
	arc-20081103-branchpoint:1.2
	binutils-2_19_1:1.2
	binutils-2_19:1.2
	binutils-2_19-branch:1.2.0.2
	binutils-2_19-branchpoint:1.2
	binutils_latest_snapshot:1.3
	added-to-binutils:1.1;
locks; strict;
comment	@# @;


1.3
date	2010.04.23.04.47.33;	author ian;	state Exp;
branches;
next	1.2;

1.2
date	2008.04.10.01.02.46;	author ian;	state Exp;
branches;
next	1.1;

1.1
date	2008.02.04.22.54.31;	author iant;	state Exp;
branches;
next	;


desc
@@


1.3
log
@	* expression.cc (Expression::Expression_eval_info): Add
	result_alignment_pointer field.
	(Expression::eval_with_dot): Add result_alignment_pointer
	parameter.  Change all callers.
	(Expression::eval_maybe_dot): Likewise.
	(class Binary_expression): Add alignment_pointer parameter to
	left_value and right_value.  Change all callers.
	(BINARY_EXPRESSION): Set result alignment.
	(class Trinary_expression): Add alignment_pointer parameter to
	arg2_value and arg3_value.  Change all callers.
	(Trinary_cond::value): Set result alignment.
	(Max_expression::value, Min_expression::value): Likewise.
	(Align_expression::value): Likewise.
	* script-sections.cc (class Sections_element): Add dot_alignment
	parameter to set_section_addresses virtual function.  Update
	instantiations.
	(class Output_section_element): Likewise.
	(Script_sections::create_segments): Add dot_alignment parameter.
	Change all callers.
	(Script_sections::create_segments_from_phdrs_clause): Likewise.
	(Script_sections::set_phdrs_clause_addresses): Likewise.
	* script-sections.h: Update declarations.
	* script.h: Update declarations.
	* output.h (Output_segment::set_minimum_p_align): Don't decrease
	min_p_align.
	* testsuite/script_test_3.t: Set large alignment.
	* testsuite/script_test_3.sh: Make sure that at least one LOAD
	segment has expected alignment.
@
text
@#!/bin/sh

# script_test_3.sh -- test PHDRS

# Copyright 2008 Free Software Foundation, Inc.
# Written by Ian Lance Taylor <iant@@google.com>.

# This file is part of gold.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,
# MA 02110-1301, USA.

# This file goes with script_test_3.t, which is a linker script which
# uses a PHDRS clause.  We run objdump -p on a program linked with
# that linker script.

check()
{
    if ! grep -q "$2" "$1"
    then
	echo "Did not find expected segment in $1:"
	echo "   $2"
	echo ""
	echo "Actual output below:"
	cat "$1"
	exit 1
    fi
}

check_count()
{
    if test "`grep -c "$2" "$1"`" != "$3"
    then
	echo "Did not find expected segment in $1:"
	echo "   $2"
	echo ""
	echo "Actual output below:"
	cat "$1"
	exit 1
    fi
}

check_count script_test_3.stdout "^  INTERP" 1
check_count script_test_3.stdout "^  LOAD" 3
check_count script_test_3.stdout "^  DYNAMIC" 1

# Make sure that the size of the INTERP segment is the same as the
# size of the .interp section.
section=`fgrep .interp script_test_3.stdout | grep PROGBITS`
if test "$section" = ""; then
  echo "Did not find .interp section"
  echo ""
  echo "Actual output below:"
  cat script_test_3.stdout
  exit 1
fi
# Remove the brackets around the section number, since they can give
# an unpredictable number of fields.
section=`echo "$section" | sed -e 's/[][]*//g'`
section_size=`echo "$section" | awk '{ print $6; }'`

segment=`grep '^  INTERP' script_test_3.stdout`
# We already checked above that we have an INTERP segment.
segment_size=`echo "$segment" | awk '{ print $5; }'`

# Now $section_size looks like 000013 and $segment_size looks like
# 0x00013.  Both numbers are in hex.
section_size=`echo "$section_size" | sed -e 's/^0*//'`
segment_size=`echo "$segment_size" | sed -e 's/^0x//' -e 's/^0*//'`

if test "$section_size" != "$segment_size"; then
  echo ".interp size $section_size != PT_INTERP size $segment_size"
  exit 1
fi

# At least one PT_LOAD segment should have an alignment >= 0x100000.
found=no
for a in `grep LOAD script_test_3.stdout | sed -e 's/^.* 0x/0x/'`; do
  script="BEGIN { if ($a >= 0x100000) { print \"true\" } else { print \"false\" } }"
  x=`awk "$script" < /dev/null`
  if test "$x" = "true"; then
    found=yes
  fi
done
if test "$found" = "no"; then
  echo "no LOAD segment has required alignment"
  exit 1
fi

exit 0
@


1.2
log
@	PR gold/5996
	* script-sections.cc (Sections_element::allocate_to_segment): Add
	orphan parameter.
	(Output_section_definition::allocate_to_segment): Likewise.
	(Orphan_output_section::allocate_to_segment): Likewise.
	(Script_sections::attach_sections_using_phdrs_clause): Don't
	propagate non-PT_LOAD segments to orphan sections.
	* testsuite/Makefile.am (script_test_3.stdout): Generate using
	readelf rather than objdump.
	* testsuite/script_test_3.sh: Adjust accordingly.  Test that
	.interp section and PT_INTERP segment are the same size.
	* testsuite/Makefile.in: Rebuild.
@
text
@d88 14
@


1.1
log
@Implement PHDRS.
@
text
@d55 32
a86 3
check_count script_test_3.stdout "INTERP off" 1
check_count script_test_3.stdout "LOAD off" 3
check_count script_test_3.stdout "DYNAMIC off" 1
@

