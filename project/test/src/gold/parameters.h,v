head	1.34;
access;
symbols
	binutils-2_24-branch:1.34.0.2
	binutils-2_24-branchpoint:1.34
	binutils-2_21_1:1.30
	binutils-2_23_2:1.33
	binutils-2_23_1:1.33
	binutils-2_23:1.33
	binutils-2_23-branch:1.33.0.2
	binutils-2_23-branchpoint:1.33
	binutils-2_22_branch:1.32.0.4
	binutils-2_22:1.32
	binutils-2_22-branch:1.32.0.2
	binutils-2_22-branchpoint:1.32
	binutils-2_21:1.30
	binutils-2_21-branch:1.30.0.2
	binutils-2_21-branchpoint:1.30
	binutils-2_20_1:1.26.4.1
	binutils-2_20:1.26.4.1
	binutils-arc-20081103-branch:1.25.0.6
	binutils-arc-20081103-branchpoint:1.25
	binutils-2_20-branch:1.26.0.4
	binutils-2_20-branchpoint:1.26
	dje-cgen-play1-branch:1.26.0.2
	dje-cgen-play1-branchpoint:1.26
	arc-20081103-branch:1.25.0.4
	arc-20081103-branchpoint:1.25
	binutils-2_19_1:1.25
	binutils-2_19:1.25
	binutils-2_19-branch:1.25.0.2
	binutils-2_19-branchpoint:1.25
	binutils_latest_snapshot:1.34
	added-to-binutils:1.25;
locks; strict;
comment	@ * @;


1.34
date	2013.07.19.23.07.08;	author roland;	state Exp;
branches;
next	1.33;

1.33
date	2011.10.18.00.06.09;	author ccoutant;	state Exp;
branches
	1.33.2.1;
next	1.32;

1.32
date	2011.07.06.21.19.32;	author ccoutant;	state Exp;
branches;
next	1.31;

1.31
date	2011.05.25.00.17.47;	author ian;	state Exp;
branches;
next	1.30;

1.30
date	2010.10.14.22.10.22;	author ccoutant;	state Exp;
branches;
next	1.29;

1.29
date	2010.04.07.21.42.22;	author dougkwan;	state Exp;
branches;
next	1.28;

1.28
date	2010.02.12.03.23.26;	author ian;	state Exp;
branches;
next	1.27;

1.27
date	2009.09.30.22.21.13;	author ian;	state Exp;
branches;
next	1.26;

1.26
date	2009.03.14.05.56.46;	author ian;	state Exp;
branches
	1.26.4.1;
next	1.25;

1.25
date	2008.03.13.21.04.21;	author iant;	state Exp;
branches;
next	1.24;

1.24
date	2008.03.13.01.46.17;	author iant;	state Exp;
branches;
next	1.23;

1.23
date	2008.02.28.00.18.24;	author iant;	state Exp;
branches;
next	1.22;

1.22
date	2008.02.27.22.38.18;	author iant;	state Exp;
branches;
next	1.21;

1.21
date	2008.02.26.22.10.32;	author iant;	state Exp;
branches;
next	1.20;

1.20
date	2008.02.26.21.45.30;	author iant;	state Exp;
branches;
next	1.19;

1.19
date	2008.02.06.20.32.10;	author iant;	state Exp;
branches;
next	1.18;

1.18
date	2007.12.01.06.34.12;	author iant;	state Exp;
branches;
next	1.17;

1.17
date	2007.11.28.19.39.40;	author iant;	state Exp;
branches;
next	1.16;

1.16
date	2007.11.22.00.05.51;	author iant;	state Exp;
branches;
next	1.15;

1.15
date	2007.11.15.23.03.45;	author iant;	state Exp;
branches;
next	1.14;

1.14
date	2007.11.15.01.12.55;	author iant;	state Exp;
branches;
next	1.13;

1.13
date	2007.11.14.07.34.53;	author iant;	state Exp;
branches;
next	1.12;

1.12
date	2007.11.14.01.03.01;	author iant;	state Exp;
branches;
next	1.11;

1.11
date	2007.10.27.00.29.34;	author iant;	state Exp;
branches;
next	1.10;

1.10
date	2007.10.18.23.20.53;	author iant;	state Exp;
branches;
next	1.9;

1.9
date	2007.10.16.23.23.08;	author iant;	state Exp;
branches;
next	1.8;

1.8
date	2007.10.14.06.49.14;	author iant;	state Exp;
branches;
next	1.7;

1.7
date	2007.10.14.04.10.25;	author iant;	state Exp;
branches;
next	1.6;

1.6
date	2007.10.10.19.02.56;	author iant;	state Exp;
branches;
next	1.5;

1.5
date	2007.10.04.05.49.04;	author iant;	state Exp;
branches;
next	1.4;

1.4
date	2007.09.28.06.36.25;	author iant;	state Exp;
branches;
next	1.3;

1.3
date	2007.09.26.07.01.35;	author iant;	state Exp;
branches;
next	1.2;

1.2
date	2007.09.22.21.02.10;	author iant;	state Exp;
branches;
next	1.1;

1.1
date	2007.09.21.07.20.01;	author iant;	state Exp;
branches;
next	;

1.33.2.1
date	2013.07.19.23.08.00;	author roland;	state Exp;
branches;
next	;

1.26.4.1
date	2009.10.16.05.51.18;	author ian;	state Exp;
branches;
next	;


desc
@@


1.34
log
@gold/
	* options.h (General_options): Add -Trodata-segment option.
	* parameters.cc (Parameters::check_rodata_segment): New function.
	(Parameters::set_target_once): Call it.
	* parameters.h (Parameters): Declare it (private member function).
	* layout.cc (load_seg_unusable_for_headers): New function, broken
	out of Layout::relaxation_loop_body.  If TARGET->isolate_execinstr()
	then validate rodata segment rather than text segment.
	(relaxation_loop_body): Call that.
	(is_text_segment): New function.  Don't admit a non-executable
	segment if TARGET->isolate_execinstr().
	(set_segment_offsets): Call it.  Honor -Trodata-segment option.
@
text
@// parameters.h -- general parameters for a link using gold  -*- C++ -*-

// Copyright 2006, 2007, 2008, 2009, 2010, 2013 Free Software Foundation, Inc.
// Written by Ian Lance Taylor <iant@@google.com>.

// This file is part of gold.

// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,
// MA 02110-1301, USA.

#ifndef GOLD_PARAMETERS_H
#define GOLD_PARAMETERS_H

namespace gold
{

class General_options;
class Errors;
class Timer;
class Target;
template<int size, bool big_endian>
class Sized_target;
class Set_parameters_target_once;

// Here we define the Parameters class which simply holds simple
// general parameters which apply to the entire link.  We use a global
// variable for this.  The parameters class holds three types of data:
//    1) An Errors struct.  Any part of the code that wants to log an
//       error can use parameters->errors().
//    2) A const General_options.  These are the options as read on
//       the commandline.
//    3) Target information, such as size and endian-ness.  This is
//       available as soon as we've decided on the Target (after
//       parsing the first .o file).
//    4) Whether we're doing a static link or not.  This is set
//       after all inputs have been read and we know if any is a
//       dynamic library.

class Parameters
{
 public:
  Parameters();

  // These should be called as soon as they are known.
  void
  set_errors(Errors* errors);

  void
  set_timer(Timer* timer);

  void
  set_options(const General_options* options);

  void
  set_target(Target* target);

  void
  set_doing_static_link(bool doing_static_link);

  // Return the error object.
  Errors*
  errors() const
  { return this->errors_; }

  // Return the timer object.
  Timer*
  timer() const
  { return this->timer_; }

  // Whether the options are valid.  This should not normally be
  // called, but it is needed by gold_exit.
  bool
  options_valid() const
  { return this->options_ != NULL; }

  // Return the options object.
  const General_options&
  options() const
  {
    gold_assert(this->options_valid());
    return *this->options_;
  }

  // Return whether the target field has been set.
  bool
  target_valid() const
  { return this->target_ != NULL; }

  // The target of the output file we are generating.
  const Target&
  target() const
  {
    gold_assert(this->target_valid());
    return *this->target_;
  }

  // The Sized_target of the output file.  The caller must request the
  // right size and endianness.
  template<int size, bool big_endian>
  Sized_target<size, big_endian>*
  sized_target() const
  {
    gold_assert(this->target_valid());
    return static_cast<Sized_target<size, big_endian>*>(this->target_);
  }

  // Clear the target, for testing.
  void
  clear_target();

  // Return true if TARGET is compatible with the current target.
  bool
  is_compatible_target(const Target*) const;

  bool
  doing_static_link() const
  {
    gold_assert(this->doing_static_link_valid_);
    return this->doing_static_link_;
  }

  // This is just a copy of options().debug().  We make a copy so we
  // don't have to #include options.h in order to inline
  // is_debugging_enabled, below.
  int
  debug() const
  {
    // This can be called before the options are set up.
    if (!this->options_valid())
      return 0;
    return debug_;
  }

  // Return the name of the entry symbol.
  const char*
  entry() const;

  // A convenience routine for combining size and endianness.  It also
  // checks the HAVE_TARGET_FOO configure options and dies if the
  // current target's size/endianness is not supported according to
  // HAVE_TARGET_FOO.  Otherwise it returns this enum
  enum Target_size_endianness
  { TARGET_32_LITTLE, TARGET_32_BIG, TARGET_64_LITTLE, TARGET_64_BIG };

  Target_size_endianness
  size_and_endianness() const;

  // Set the incremental linking mode to INCREMENTAL_FULL.  Used when
  // the linker determines that an incremental update is not possible.
  // Returns false if the incremental mode was INCREMENTAL_UPDATE,
  // indicating that the linker should exit if an update is not possible.
  bool
  set_incremental_full();

  // Return true if we need to prepare incremental linking information.
  bool
  incremental() const;

  // Return true if we are doing a full incremental link.
  bool
  incremental_full() const;

  // Return true if we are doing an incremental update.
  bool
  incremental_update() const;

 private:
  void
  set_target_once(Target*);

  void
  check_target_endianness();

  void
  check_rodata_segment();

  friend class Set_parameters_target_once;

  Errors* errors_;
  Timer* timer_;
  const General_options* options_;
  Target* target_;
  bool doing_static_link_valid_;
  bool doing_static_link_;
  int debug_;
  int incremental_mode_;
  Set_parameters_target_once* set_parameters_target_once_;
};

// This is a global variable.
extern const Parameters* parameters;

// We use free functions for these since they affect a global variable
// that is internal to parameters.cc.

extern void
set_parameters_errors(Errors* errors);

extern void
set_parameters_timer(Timer* timer);

extern void
set_parameters_options(const General_options* options);

extern void
set_parameters_target(Target* target);

extern void
set_parameters_doing_static_link(bool doing_static_link);

extern bool
set_parameters_incremental_full();

// Ensure that the target to be valid by using the default target if
// necessary.

extern void
parameters_force_valid_target();

// Clear the current target, for testing.

extern void
parameters_clear_target();

// Return whether we are doing a particular debugging type.  The
// argument is one of the flags from debug.h.

inline bool
is_debugging_enabled(unsigned int type)
{ return (parameters->debug() & type) != 0; }

} // End namespace gold.

#endif // !defined(GOLD_PARAMETERS_H)
@


1.33
log
@	* gold.cc: Include timer.h.
	(queue_middle_tasks): Stamp time.
	(queue_final_tasks): Likewise.
	* main.cc (main): Store timer in parameters.  Print timers
	for each pass.
	* parameters.cc (Parameters::Parameters): Initialize timer_.
	(Parameters::set_timer): New function.
	(set_parameters_timer): New function.
	* parameters.h (Parameters::set_timer): New function.
	(Parameters::timer): New function.
	(Parameters::timer_): New data member.
	(set_parameters_timer): New function.
	* timer.cc (Timer::stamp): New function.
	(Timer::get_pass_time): New function.
	* timer.h (Timer::stamp): New function.
	(Timer::get_pass_time): New function.
	(Timer::pass_times_): New data member.
@
text
@d3 1
a3 1
// Copyright 2006, 2007, 2008, 2009, 2010 Free Software Foundation, Inc.
d186 3
@


1.33.2.1
log
@gold/
	* options.h (General_options): Add -Trodata-segment option.
	* parameters.cc (Parameters::check_rodata_segment): New function.
	(Parameters::set_target_once): Call it.
	* parameters.h (Parameters): Declare it (private member function).
	* layout.cc (load_seg_unusable_for_headers): New function, broken
	out of Layout::relaxation_loop_body.  If TARGET->isolate_execinstr()
	then validate rodata segment rather than text segment.
	(relaxation_loop_body): Call that.
	(is_text_segment): New function.  Don't admit a non-executable
	segment if TARGET->isolate_execinstr().
	(set_segment_offsets): Call it.  Honor -Trodata-segment option.
@
text
@d3 1
a3 1
// Copyright 2006, 2007, 2008, 2009, 2010, 2013 Free Software Foundation, Inc.
a185 3
  void
  check_rodata_segment();

@


1.32
log
@	* incremental.cc (Incremental_inputs::report_command_line): Ignore
	--incremental-patch option.
	* layout.cc (Free_list::allocate): Extend allocation beyond original
	end if enabled.
	(Layout::make_output_section): Mark sections that should get
	patch space.
	* options.cc (parse_percent): New function.
	* options.h (parse_percent): New function.
	(DEFINE_percent): New macro.
	(General_options): Add --incremental-patch option.
	* output.cc (Output_section::Output_section): Initialize new data
	members.
	(Output_section::add_input_section): Print section name when out
	of patch space.
	(Output_section::add_output_section_data): Likewise.
	(Output_section::set_final_data_size): Add patch space when
	doing --incremental-full.
	(Output_section::do_reset_address_and_file_offset): Remove patch
	space.
	(Output_segment::set_section_list_addresses): Print debug output
	only if --incremental-update.
	* output.h (Output_section::set_is_patch_space_allowed): New function.
	(Output_section::is_patch_space_allowed_): New data member.
	(Output_section::patch_space_): New data member.
	* parameters.cc (Parameters::incremental_full): New function.
	* parameters.h (Parameters::incremental_full): New function
	* testsuite/Makefile.am (incremental_test_2): Add test for
	--incremental-patch option.
	* testsuite/Makefile.in: Regenerate.
	* testsuite/two_file_test_1_v1.cc (t1, t2, t3): Add comments.
	(t18): Remove function body.
@
text
@d31 1
d61 3
d77 5
d189 1
d209 3
@


1.31
log
@	* archive.cc (Library_base::should_include_member): Pull in object
	from archive if it defines the entry symbol.
	* parameters.cc (Parameters::entry): New function.
	* parameters.h (class Parameters): Declare entry.
	* output.h (class Output_file_header): Remove entry_ field.
	* output.cc (Output_file_header::Output_file_header): Remove entry
	parameter.  Change all callers.
	(Output_file_header::entry): Use parameters->entry.
	* gold.cc (queue_middle_tasks): Likewise.
	* plugin.cc (Plugin_hook::run): Likewise.
@
text
@d162 4
@


1.30
log
@	* debug.h (DEBUG_INCREMENTAL): New flag.
	(debug_string_to_enum): Add DEBUG_INCREMENTAL).
	* gold.cc (queue_initial_tasks): Check parameters for incremental link
	mode.
	* incremental.cc (report_command_line): Ignore all forms of
	--incremental.
	* layout.cc (Layout::Layout): Check parameters for incremental link
	mode.
	* options.cc (General_options::parse_incremental): New function.
	(General_options::parse_no_incremental): New function.
	(General_options::parse_incremental_full): New function.
	(General_options::parse_incremental_update): New function.
	(General_options::incremental_mode_): New data member.
	(General_options::finalize): Check incremental_mode_.
	* options.h (General_options): Update help text for --incremental.
	Add --no-incremental, --incremental-full, --incremental-update.
	(General_options::Incremental_mode): New enum type.
	(General_options::incremental_mode): New function.
	(General_options::incremental_mode_): New data member.
	* parameters.cc (Parameters::incremental_mode_): New data member.
	(Parameters::set_options): Set incremental_mode_.
	(Parameters::set_incremental_full): New function.
	(Parameters::incremental): New function.
	(Parameters::incremental_update): New function.
	(set_parameters_incremental_full): New function.
	* parameters.h (Parameters::set_incremental_full): New function.
	(Parameters::incremental): New function.
	(Parameters::incremental_update): New function.
	(Parameters::incremental_mode_): New data member.
	(set_parameters_incremental_full): New function.
	* plugin.cc (Plugin_manager::add_input_file): Check parameters for
	incremental link mode.
	* reloc.cc (Sized_relobj::do_read_relocs): Likewise.
	(Sized_relobj::do_relocate_sections): Likewise.
	* testsuite/Makefile.am (incremental_test): Use --incremental-full
	option.
	* testsuite/Makefile.in: Regenerate.
	* testsuite/incremental_test.sh: Filter all forms of --incremental.
@
text
@d137 4
@


1.29
log
@2010-04-07  Doug Kwan  <dougkwan@@google.com>

	* arm.cc: Replace "endianity" with "endianness" in comments.
	(Arm_exidx_cantunwind): Ditto.
	(Arm_relobj::Arm_relobj): Initialize merge_flags_and_attribures.
	(Arm_relobj::merge_flags_and_attributes): New method.
	(Arm_relobj::merge_flags_and_attributes_): New data member.
	(Arm_exidx_cantunwind::do_fixed_endian_write): Fix formatting.
	(Arm_relobj::scan_sections_for_stubs): Ditto.
	(Arm_relobj::do_read_symbols): Check to see if we really want to
	merge processor-specific flags and attributes.  Exit early if
	an object is empty except for section names and the undefined symbol.
	(Target_arm::do_finalize_sections): Move check for ELF format to
	Arm_relobj::do_read_symbols.  Merge processor specific flags and
	attributes from a regular object only when we have determined that
	it is aapropriate.  Do not create an .ARM.attributes section in
	output if there is no regular input object.
	(Target_arm::merge_processor_specific_flags): Check
	--warn-mismatch before printing any error.
	(Target_arm::merge_object_attributes): Ditto.
	* gold.cc (queue_middle_tasks): Handle the case in which there is
	no regular object in input.
	* options.cc (General_options::parse_EB): New method.
	(General_options::parse_EL): Same.
	(General_options::General_options): Initialize endianness_.
	* options.h (-EB, -EL, -no-pipeline-knowledge, -p, --warn-mismatch):
	New options.
	(General_options::Endianness): New enum.
	(General_options::endianness): New method.
	(General_options::endianness_): New data member.
	* parameters.cc (Parameters::set_options): Check target endianness.
	(Parameters::set_target_once): Ditto.
	(Parameters::check_target_endianness): New method.
	(parameters_force_valid_target): If either -EL or -EB is specified,
	use it to define endianness of default target.
	* parameters.h (Parameters::check_target_endianness): New method
	declaration.
	* target.h (class Target): Change "endianity" to "endianness"
	in comments.
@
text
@d147 14
d177 1
d199 3
@


1.28
log
@	* gold-threads.h (class Once): Define.
	(class Initialize_lock): Rewrite as child of Once.
	* gold-threads.cc (class Once_initialize): Define.
	(once_pointer_control): New static variable.
	(once_pointer, once_arg): New static variables.
	(c_run_once): New static function.
	(Once::Once, Once::run_once, Once::internal_run): New functions.
	(class Initialize_lock_once): Remove.
	(initialize_lock_control): Remove.
	(initialize_lock_pointer): Remove.
	(initialize_lock_once): Remove.
	(Initialize_lock::Initialize_lock): Move to gold-threads.h.
	(Initialize_lock::initialize): Rewrite.
	(Initialize_lock::do_run_once): New function.
	* archive.cc (Archive::interpret_header): Only clear name if it is
	not already empty.
	* fileread.cc: Include "gold-threads.h"
	(file_counts_lock): New static variable.
	(file_counts_initialize_lock): Likewise.
	(File_read::release): Only increment counts when using --stats.
	Use a lock around the increment.
	* parameters.cc (class Set_parameters_target_once): Define.
	(set_parameters_target_once): New static variable.
	(Parameters::Parameters): Move here from parameters.h.
	(Parameters::set_target): Rewrite.
	(Parameters::set_target_once): New function.
	(Parameters::clear_target): Move here and rewrite.
	* parameters.h (class Parameters): Update declarations.  Add
	set_parameters_target_once_ field.
	(Parameters::Parameters): Move to parameters.cc.
	(Parameters::clear_target): Likewise.
	* readsyms.cc (Read_symbols::do_group): Create a Start_group
	task.
	(Start_group::~Start_group): New function.
	(Start_group::is_runnable): New function.
	(Start_group::locks, Start_group::run): New functions.
	(Finish_group::run): Change saw_undefined to size_t.
	* readsyms.h (class Start_group): Define.
	(class Finish_group): Change saw_undefined_ field to size_t.
	(Finish_group::Finish_group): Remove saw_undefined and
	this_blocker parameters.  Change all callers.
	(Finish_group::set_saw_undefined): New function.
	(Finish_group::set_blocker): New function.
	* symtab.h (class Symbol_table): Change saw_undefined to return
	size_t.  Change saw_undefined_ field to size_t.
	* target-select.cc (Set_target_once::do_run_once): New function.
	(Target_selector::Target_selector): Initialize set_target_once_
	field.  Don't initialize lock_ and initialize_lock_ fields.
	(Target_selector::instantiate_target): Rewrite.
	(Target_selector::set_target): New function.
	* target-select.h (class Set_target_once): Define.
	(class Target_selector): Update declarations.  Make
	Set_target_once a friend.  Remove lock_ and initialize_lock_
	fields.  Add set_target_once_ field.
@
text
@d152 3
@


1.27
log
@	* object.h (class Object): Remove target_ field, and target,
	sized_target, and set_target methods.
	(Object::sized_target): Remove.
	(class Sized_relobj): Update declarations.  Remove sized_target.
	* object.cc (Sized_relobj::setup): Remove target parameter.
	Change all callers.
	(Input_objects::add_object): Don't do anything with the target.
	(make_elf_sized_object): Add punconfigured parameter.  Change all
	callers.  Set or test parameter target.
	* dynobj.cc (Sized_dynobj::target): Remove target parameter.
	Change all callers.
	* parameters.cc (Parameters::set_target): Change parameter type to
	be non-const.
	(Parameters::default_target): Remove.
	(set_parameters_target): Change parameter type to be non-const.
	(parameters_force_valid_target): New function.
	(parameters_clear_target): New function.
	* parameters.h (class Parameters): Update declarations.  Remove
	default_target method.  Add sized_target and clear_target
	methods.  Change target_ to be non-const.
	(set_parameters_target): Update declaration.
	(parameters_force_valid_target): Declare.
	(parameters_clear_target): Declare.
	* readsyms.cc (Read_symbols::do_read_symbols): Pass punconfigured
	as NULL if we aren't searching.
	(Add_symbols::run): Don't check for compatible target.
	* fileread.cc (Input_file::open_binary): Call
	parameters_force_valid_target.
	* gold.cc (queue_middle_tasks): Likewise.
	* plugin.cc (make_sized_plugin_object): Likewise.  Don't call
	set_target on object.
	* dynobj.h (class Sized_dynobj): Update declarations.
	* archive.cc (Archive::get_elf_object_for_member): Return NULL if
	make_elf_object returns NULL.
	(Archive::include_member): Don't check whether object target is
	compatible.
	* output.cc (Output_section::add_input_section): Get target from
	parameters.
	(Output_section::relax_input_section): Likewise.
	* reloc.cc (Sized_relobj::do_gc_process_relocs): Get target from
	parameters.
	(Sized_relobj::do_scan_relocs): Likewise.
	(Sized_relobj::relocate_sections): Likewise.
	* resolve.cc (Symbol_table::resolve): Likewise.
	* symtab.cc (Symbol_table::wrap_symbol): Likewise.  Remove object
	parameter.  Change all callers.
	(Symbol_table::add_from_object): Get target from parameters.
	(Symbol_table::add_from_relobj): Don't check object target.
	(Symbol_table::add_from_dynobj): Likewise.
	(Symbol_table::define_special_symbol): Get target from
	parameters.
	* symtab.h (class Symbol_table): Update declaration.
	* testsuite/binary_unittest.cc (gold_testsuite): Remove target
	parameter.  Change all callers.  Clear parameter target.
	(Binary_test): Test target here.
	* testsuite/object_unittest.cc (gold_testsuite): Remove
	target_test_pointer parameter.  Change all callers.
	(Object_test): Test target here.
@
text
@d3 1
a3 1
// Copyright 2006, 2007, 2008 Free Software Foundation, Inc.
d34 1
d53 1
a53 5
  Parameters()
    : errors_(NULL), options_(NULL), target_(NULL),
      doing_static_link_valid_(false), doing_static_link_(false),
      debug_(0)
  { }
d112 1
a112 2
  clear_target()
  { this->target_ = NULL; }
d149 5
d160 1
@


1.26
log
@	* readsyms.cc (Read_symbols::incompatible_warning): New function.
	(Read_symbols::requeue): New function.
	(Read_symbols::do_read_symbols): If make_elf_object fails because
	the target type is not configured, and the file was searched for,
	issue a warning and retry with the next directory.
	(Add_symbols::run): If the file has an incompatible format, and
	it was searched for, requeue the Read_symbols task.  On error,
	release the object.
	* readsyms.h (class Read_symbols): Add dirindex_ field.  Add
	dirindex parameter to constructor.  Change all callers.  Declare
	incompatible_warning and requeue.
	(class Add_symbols): Add dirpath_, dirindex_, mapfile_,
	input_argument_ and input_group_ fields.  Add them to
	constructor.  Change all callers.
	(class Read_script): Add dirindex_ field.  Add it to constructor.
	Change all callers.
	* archive.cc (Archive::setup): Remove input_objects parameter.
	Change all callers.
	(Archive::get_file_and_offset): Likewise.
	(Archive::read_all_symbols): Likewise.
	(Archive::read_symbols): Likewise.
	(Archive::get_elf_object_for_member): Remove input_objects
	parameter.  Add punconfigured parameter.  Change all callers.
	(Archive::add_symbols): Change return type to bool.  Check return
	value of include_member.
	(Archive::include_all_members): Likewise.
	(Archive::include_member): Change return type to bool.  Return
	false if first included object has incompatible target.  Set
	included_member_ field.
	(Add_archive_symbols::run): If add_symbols returns false, requeue
	Read_symbols task.
	* archive.h (class Archive): Add included_member_ field.
	Initialize it in constructor.  Add input_file and searched_for
	methods.  Update declarations.
	(class Add_archive_symbols): Add dirpath_, dirindex_, and
	input_argument_ fields.  Add them to constructor.  Change all
	callers.
	* script.cc: Include "target-select.h".
	(class Parser_closure): Add skip_on_incompatible_target_ and
	found_incompatible_target_ fields.  Add
	skip_on_incompatible_target parameter to constructor.  Change all
	callers.  Add methods skip_on_incompatible_target,
	clear_skip_on_incompatible_target, found_incompatible_target, and
	set_found_incompatible_target.
	(read_input_script): Add dirindex parameter.  Change all callers.
	If parser finds an incompatible target, requeue Read_symbols
	task.
	(script_set_symbol): Clear skip_on_incompatible_target in
	closure.
	(script_add_assertion, script_parse_option): Likewise.
	(script_start_sections, script_add_phdr): Likewise.
	(script_check_output_format): New function.
	* script.h (read_input_script): Update declaration.
	* script-c.h (script_check_output_format): Declare.
	* yyscript.y (file_cmd): Handle OUTPUT_FORMAT.
	(ignore_cmd): Remove OUTPUT_FORMAT.
	* fileread.cc (Input_file::Input_file): Add explicit this.
	(Input_file::will_search_for): New function.
	(Input_file::open): Add pindex parameter.  Change all callers.
	* fileread.h (class Input_file): Add input_file_argument method.
	Declare will_search_for.  Update declarations.
	* object.cc (make_elf_object): Add punconfigured parameter.
	Change all callers.
	* object.h (class Object): Make input_file public.  Add
	searched_for method.
	(make_elf_object): Update declaration.
	* dirsearch.cc (Dirsearch::find): Add pindex parameter.  Use it to
	restart search.
	* dirsearch.h (class Dirsearch): Update declaration.
	* options.h (class General_options): Add --warn-search-mismatch.
	* parameters.cc (Parameters::is_compatible_target): New function.
	* parameters.h (class Parameters): Declare is_compatible_target.
	* workqueue.cc (Workqueue::add_blocker): New function.
	* workqueue.h (class Workqueue): Declare add_blocker.
@
text
@d32 2
d66 1
a66 1
  set_target(const Target* target);
d103 14
a116 4
  // When we don't have an output file to associate a target, make a
  // default one, with guesses about size and endianness.
  const Target&
  default_target() const;
d155 1
a155 1
  const Target* target_;
d174 1
a174 1
set_parameters_target(const Target* target);
d178 12
a189 1
  
@


1.26.4.1
log
@Merge elfcpp and gold from trunk.
@
text
@a31 2
template<int size, bool big_endian>
class Sized_target;
d64 1
a64 1
  set_target(Target* target);
d101 4
a104 14
  // The Sized_target of the output file.  The caller must request the
  // right size and endianness.
  template<int size, bool big_endian>
  Sized_target<size, big_endian>*
  sized_target() const
  {
    gold_assert(this->target_valid());
    return static_cast<Sized_target<size, big_endian>*>(this->target_);
  }

  // Clear the target, for testing.
  void
  clear_target()
  { this->target_ = NULL; }
d143 1
a143 1
  Target* target_;
d162 1
a162 1
set_parameters_target(Target* target);
d166 1
a166 12

// Ensure that the target to be valid by using the default target if
// necessary.

extern void
parameters_force_valid_target();

// Clear the current target, for testing.

extern void
parameters_clear_target();

@


1.25
log
@Update copyright years.  Update language files.
@
text
@d106 4
@


1.24
log
@From Craig Silverstein: Implement --debug=files to track file opens,
and implement --verbose as a synonym.
@
text
@d3 1
a3 1
// Copyright 2006, 2007 Free Software Foundation, Inc.
@


1.23
log
@From Craig Silverstein: Have Parameters point to General_options.
@
text
@d119 3
a121 1
    gold_assert(this->options_valid());
@


1.22
log
@Implement -q/--emit-relocs.
@
text
@d35 11
a45 5
// variable for this.  This is in contrast to the General_options
// class, which holds the complete state of position independent
// command line options.  The hope is that Parameters will stay fairly
// simple, so that if this turns into a library it will be clear how
// these parameters should be set.
d50 18
a67 1
  Parameters(Errors*);
d78 1
a78 1
  { return this->options_valid_; }
d80 3
a82 3
  // Whether to use threads.
  bool
  threads() const
d84 2
a85 2
    gold_assert(this->options_valid_);
    return this->threads_;
d88 1
a88 9
  // Return the output file name.
  const char*
  output_file_name() const
  {
    gold_assert(this->options_valid_);
    return this->output_file_name_;
  }

  // Whether we are generating a regular executable.
d90 2
a91 5
  output_is_executable() const
  {
    gold_assert(this->output_file_type_ != OUTPUT_INVALID);
    return this->output_file_type_ == OUTPUT_EXECUTABLE;
  }
d93 3
a95 103
  // Whether we are generating a shared library.
  bool
  output_is_shared() const
  {
    gold_assert(this->output_file_type_ != OUTPUT_INVALID);
    return this->output_file_type_ == OUTPUT_SHARED;
  }

  // Whether we are generating an object file.
  bool
  output_is_object() const
  {
    gold_assert(this->output_file_type_ != OUTPUT_INVALID);
    return this->output_file_type_ == OUTPUT_OBJECT;
  }

  // Whether we are generating position-independent output.
  // This is the case when generating either a shared library
  // or a regular executable with the --pic-executable option.
  // FIXME: support --pic-executable
  bool
  output_is_position_independent() const
  { return output_is_shared(); }

  // Whether to emit relocations in the output.
  bool
  emit_relocs() const
  { return this->emit_relocs_; }

  // The target system root directory.  This is NULL if there isn't
  // one.
  const std::string&
  sysroot() const
  {
    gold_assert(this->options_valid_);
    return this->sysroot_;
  }

  // Whether to strip all symbols.
  bool
  strip_all() const
  {
    gold_assert(this->strip_ != STRIP_INVALID);
    return this->strip_ == STRIP_ALL;
  }

  // Whether to strip debugging information.
  bool
  strip_debug() const
  {
    gold_assert(this->strip_ != STRIP_INVALID);
    return this->strip_ == STRIP_ALL || this->strip_ == STRIP_DEBUG;
  }

  // Whether to strip debugging information that's not used by gdb.
  bool
  strip_debug_gdb() const
  {
    gold_assert(this->strip_ != STRIP_INVALID);
    return this->strip_debug() || this->strip_ == STRIP_DEBUG_UNUSED_BY_GDB;
  }

  // Whether to permit unresolved references from shared libraries.
  bool
  allow_shlib_undefined() const
  {
    gold_assert(this->options_valid_);
    return this->allow_shlib_undefined_;
  }

  // Whether we are doing a symbolic link, in which all defined
  // symbols are bound locally.
  bool
  Bsymbolic() const
  {
    gold_assert(this->options_valid_);
    return this->symbolic_;
  }

  // Whether we should demangle C++ symbols in our log messages.
  bool
  demangle() const
  { return this->demangle_; }

  // Whether we should try to detect violations of the One Definition Rule.
  bool
  detect_odr_violations() const
  {
    gold_assert(this->options_valid_);
    return this->detect_odr_violations_;
  }

  // The general linker optimization level (-O).
  int
  optimize() const
  {
    gold_assert(this->options_valid_);
    return this->optimization_level_;
  }

  // Whether the -E/--export-dynamic flag is set.
  bool
  export_dynamic() const
d97 2
a98 2
    gold_assert(this->options_valid_);
    return this->export_dynamic_;
d101 4
a104 8
  // Return the debug flags.  These are the flags for which we should
  // report internal debugging information.
  unsigned int
  debug() const
  {
    gold_assert(this->options_valid_);
    return this->debug_;
  }
a105 3
  // Whether we are doing a static link--a link in which none of the
  // input files are shared libraries.  This is only known after we
  // have seen all the input files.
d109 1
a109 1
    gold_assert(this->is_doing_static_link_valid_);
d113 3
a115 15
  // Return whether the target field has been set.
  bool
  is_target_valid() const
  { return this->is_target_valid_; }

  // The target of the output file we are generating.
  Target*
  target() const
  {
    gold_assert(this->is_target_valid_);
    return this->target_;
  }

  // The size of the output file we are generating.  This should
  // return 32 or 64.
d117 1
a117 1
  get_size() const
d119 2
a120 2
    gold_assert(this->is_target_valid_);
    return this->size_;
d123 6
a128 7
  // Whether the output is big endian.
  bool
  is_big_endian() const
  {
    gold_assert(this->is_target_valid_);
    return this->is_big_endian_;
  }
d130 2
a131 7
  // The maximum page size
  uint64_t
  max_page_size() const
  {
    gold_assert(this->is_target_valid_);
    return this->max_page_size_;
  }
a132 19
  // The common page size
  uint64_t
  common_page_size() const
  {
    gold_assert(this->is_target_valid_);
    return this->common_page_size_;
  }

  // Set values recorded from options.
  void
  set_from_options(const General_options*);

  // Set whether we are doing a static link.
  void
  set_doing_static_link(bool doing_static_link);

  // Set the target.
  void
  set_target(Target* target);
a134 29
  // The types of output files.
  enum Output_file_type
    {
      // Uninitialized.
      OUTPUT_INVALID,
      // Generating executable.
      OUTPUT_EXECUTABLE,
      // Generating shared library.
      OUTPUT_SHARED,
      // Generating object file.
      OUTPUT_OBJECT
    };

  // Which symbols to strip.
  enum Strip
  {
    // Uninitialize.
    STRIP_INVALID,
    // Don't strip any symbols.
    STRIP_NONE,
    // Strip all symbols.
    STRIP_ALL,
    // Strip debugging information.
    STRIP_DEBUG,
    // Strip debugging information that's not used by gdb (at least <= 6.7)
    STRIP_DEBUG_UNUSED_BY_GDB
  };

  // A pointer to the error handling object.
d136 3
a138 33

  // Whether the fields set from the options are valid.
  bool options_valid_;
  // Whether to use threads.
  bool threads_;
  // The output file name.
  const char* output_file_name_;
  // The type of the output file.
  Output_file_type output_file_type_;
  // Whether to emit relocations (-q/--emit-relocs).
  bool emit_relocs_;
  // The target system root directory.
  std::string sysroot_;
  // Which symbols to strip.
  Strip strip_;
  // Whether to allow undefined references from shared libraries.
  bool allow_shlib_undefined_;
  // Whether we are doing a symbolic link.
  bool symbolic_;
  // Whether we should demangle C++ symbols in our log messages.
  bool demangle_;
  // Whether we try to detect One Definition Rule violations.
  bool detect_odr_violations_;
  // The optimization level.
  int optimization_level_;
  // Whether the -E/--export-dynamic flag is set.
  bool export_dynamic_;
  // The debug flags.
  unsigned int debug_;

  // Whether the doing_static_link_ field is valid.
  bool is_doing_static_link_valid_;
  // Whether we are doing a static link.
d140 1
a140 11
  // Whether the target_ field is valid.
  bool is_target_valid_;
  // The target.
  Target* target_;
  // The size of the output file--32 or 64.
  int size_;
  // Whether the output file is big endian.
  bool is_big_endian_;
  // The maximum page size and common page size
  int max_page_size_;
  int common_page_size_;
d146 2
a147 2
// Initialize the global variable.
extern void initialize_parameters(Errors*);
d149 2
a150 2
// Set the options.
extern void set_parameters_from_options(const General_options*);
d152 2
a153 2
// Set the target recorded in the global parameters variable.
extern void set_parameters_target(Target* target);
d155 2
a156 2
// Set whether we are doing a static link.
extern void set_parameters_doing_static_link(bool doing_static_link);
d158 3
@


1.21
log
@From Craig Silverstein: implement -z max-page-size and -z
common-page-size.
@
text
@d105 5
d306 2
@


1.20
log
@From Craig Silverstein: rename option functions for future option
handling rewrite.
@
text
@d233 16
d332 3
@


1.19
log
@Support creating empty output when there are no input objects.
@
text
@d149 1
a149 1
  symbolic() const
d168 1
a168 1
  // The general linker optimization level.
d170 1
a170 1
  optimization_level() const
@


1.18
log
@Compress all debug sections.
@
text
@d203 5
@


1.17
log
@Don't try to delete the output file if we don't know its name yet.
@
text
@d31 1
d203 8
d216 1
a216 1
    gold_assert(this->is_size_and_endian_valid_);
d224 1
a224 1
    gold_assert(this->is_size_and_endian_valid_);
d236 1
a236 1
  // Set the size and endianness.
d238 1
a238 1
  set_size_and_endianness(int size, bool is_big_endian);
d303 4
a306 2
  // Whether the size_ and is_big_endian_ fields are valid.
  bool is_size_and_endian_valid_;
d322 2
a323 2
// Set the size and endianness of the global parameters variable.
extern void set_parameters_size_and_endianness(int size, bool is_big_endian);
@


1.16
log
@Add threading support.
@
text
@d50 6
@


1.15
log
@From Craig Silverstein: Add --strip-debug-gdb.
@
text
@d50 8
d177 9
d259 2
d281 2
d310 7
@


1.14
log
@From Craig Silverstein: Add support for --demangle.
@
text
@d115 8
d232 3
a234 1
    STRIP_DEBUG
@


1.13
log
@Warn about undefined references in shared libraries if we have seen
all the DT_NEEDED entries for that library.
@
text
@d132 5
d244 2
@


1.12
log
@From Craig Silverstein: Rework debug info code a bit, add option for
ODR violations, add test case.
@
text
@d115 8
d235 2
@


1.11
log
@From Craig Silverstein and Ian Lance Taylor: Process --script option.
@
text
@d124 8
d229 2
@


1.10
log
@Add support for -Bsymbolic.
@
text
@d43 1
a43 1
  Parameters(const General_options*, Errors*);
d53 4
a56 1
  { return this->output_file_name_; }
d61 4
a64 1
  { return this->output_file_type_ == OUTPUT_EXECUTABLE; }
d69 4
a72 1
  { return this->output_file_type_ == OUTPUT_SHARED; }
d77 4
a80 1
  { return this->output_file_type_ == OUTPUT_OBJECT; }
d94 4
a97 1
  { return this->sysroot_; }
d102 4
a105 1
  { return this->strip_ == STRIP_ALL; }
d110 4
a113 1
  { return this->strip_ == STRIP_ALL || this->strip_ == STRIP_DEBUG; }
d119 20
a138 1
  { return this->symbolic_; }
d167 3
a169 9
  // The general linker optimization level.
  int
  optimization_level() const
  { return this->optimization_level_; }

  // Whether the -E/--export-dynamic flag is set.
  bool
  export_dynamic() const
  { return this->export_dynamic_; }
d183 2
d196 2
d209 2
d221 4
a235 4
  // The optimization level.
  int optimization_level_;
  // Whether the -E/--export-dynamic flag is set.
  bool export_dynamic_;
d242 4
a245 1
extern void initialize_parameters(const General_options*, Errors*);
@


1.9
log
@From Cary Coutant: preliminary shared library support.
@
text
@d94 6
d179 2
@


1.8
log
@Run all error handling through an Errors object.  Delete output file
on error.
@
text
@d70 8
d126 5
d186 2
@


1.7
log
@Fix typo in comment.
@
text
@d30 1
d43 11
a53 1
  Parameters(const General_options*);
d149 5
d179 1
a179 1
extern void initialize_parameters(const General_options*);
@


1.6
log
@Implement -s and -S options which strip symbols.
@
text
@d173 1
a173 1
#endif // !defined(GOLD_PARAMATERS_H)
@


1.5
log
@Full support for --sysroot.
@
text
@d65 10
d127 11
d142 3
a144 1
  
@


1.4
log
@Use parameters to track whether we are doing a static link.  Fix up
final_value_is_known for weak undefined symbols.  Pointed out by Cary
Coutant.
@
text
@d59 6
d119 3
@


1.3
log
@Put size and endianness in parameters.
@
text
@d59 10
d91 4
d113 4
d135 3
@


1.2
log
@Add licensing text to every source file.
@
text
@d59 17
d81 4
d99 6
d114 3
@


1.1
log
@Add global parameters.
@
text
@d3 20
@

