head	1.1;
access;
symbols
	binutils-2_24-branch:1.1.0.20
	binutils-2_24-branchpoint:1.1
	binutils-2_21_1:1.1
	binutils-2_23_2:1.1
	binutils-2_23_1:1.1
	binutils-2_23:1.1
	binutils-2_23-branch:1.1.0.18
	binutils-2_23-branchpoint:1.1
	binutils-2_22_branch:1.1.0.16
	binutils-2_22:1.1
	binutils-2_22-branch:1.1.0.14
	binutils-2_22-branchpoint:1.1
	binutils-2_21:1.1
	binutils-2_21-branch:1.1.0.12
	binutils-2_21-branchpoint:1.1
	binutils-2_20_1:1.1
	binutils-2_20:1.1
	binutils-arc-20081103-branch:1.1.0.10
	binutils-arc-20081103-branchpoint:1.1
	binutils-2_20-branch:1.1.0.8
	binutils-2_20-branchpoint:1.1
	dje-cgen-play1-branch:1.1.0.6
	dje-cgen-play1-branchpoint:1.1
	arc-20081103-branch:1.1.0.4
	arc-20081103-branchpoint:1.1
	binutils-2_19_1:1.1
	binutils-2_19:1.1
	binutils-2_19-branch:1.1.0.2
	binutils-2_19-branchpoint:1.1
	binutils_latest_snapshot:1.1;
locks; strict;
comment	@# @;


1.1
date	2008.04.03.00.33.37;	author ian;	state Exp;
branches;
next	;


desc
@@


1.1
log
@	* TODO: New file.
@
text
@Things that still need to be done: -*- Text -*-

 o - Performance

   All performance could be tuned, but one area that could be looked
   at especially is performance with flags, particularly
   --detect-odr-violations and --compress-debug-sections.

 o - Threads

   Why is the usertime when we run with threads the same (or almost
   the same) as when we run without?  Is it because threads spend most
   of their time waiting on the same resources?  On each other?
   Something else?

 o - ODR false positives

   ODR false positives can happen when we optimize, since code in .h
   files may be optimized in different ways in different compilation
   units.  It's possible we could fix this for real by looking at the
   full debug info and using DW_TAG_inlined_subroutine in a clever way
   to correct for inlining.  But that would be very expensive, I
   think.  The easier solution is to recommend people only do
   ODR-detection with -g0.

 o - Better testing
@
