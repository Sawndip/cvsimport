head	1.5;
access;
symbols
	binutils-2_24-branch:1.5.0.20
	binutils-2_24-branchpoint:1.5
	binutils-2_21_1:1.5
	binutils-2_23_2:1.5
	binutils-2_23_1:1.5
	binutils-2_23:1.5
	binutils-2_23-branch:1.5.0.18
	binutils-2_23-branchpoint:1.5
	binutils-2_22_branch:1.5.0.16
	binutils-2_22:1.5
	binutils-2_22-branch:1.5.0.14
	binutils-2_22-branchpoint:1.5
	binutils-2_21:1.5
	binutils-2_21-branch:1.5.0.12
	binutils-2_21-branchpoint:1.5
	binutils-2_20_1:1.5
	binutils-2_20:1.5
	binutils-arc-20081103-branch:1.5.0.10
	binutils-arc-20081103-branchpoint:1.5
	binutils-2_20-branch:1.5.0.8
	binutils-2_20-branchpoint:1.5
	dje-cgen-play1-branch:1.5.0.6
	dje-cgen-play1-branchpoint:1.5
	arc-20081103-branch:1.5.0.4
	arc-20081103-branchpoint:1.5
	binutils-2_19_1:1.5
	binutils-2_19:1.5
	binutils-2_19-branch:1.5.0.2
	binutils-2_19-branchpoint:1.5
	binutils_latest_snapshot:1.5
	added-to-binutils:1.4;
locks; strict;
comment	@ * @;


1.5
date	2008.04.16.22.54.29;	author ian;	state Exp;
branches;
next	1.4;

1.4
date	2008.03.13.21.04.21;	author iant;	state Exp;
branches;
next	1.3;

1.3
date	2008.02.06.08.13.50;	author iant;	state Exp;
branches;
next	1.2;

1.2
date	2007.09.22.21.02.10;	author iant;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.16.00.38.25;	author iant;	state Exp;
branches;
next	;


desc
@@


1.5
log
@	* copy-relocs.cc: New file.
	* copy-relocs.h: New file.
	* reloc.cc: Remove Copy_relocs code.
	* reloc.h: Likewise.
	* reloc-types.h (struct Reloc_types) [both versions]: Add
	get_reloc_addend_noerror.
	* output.h (class Output_data_reloc<elfcpp::SHT_REL>): Add
	variants of add_global which take an addend which must be zero.
	* i386.cc: Include "copy-relocs.h".
	(class Target_i386): Change type of copy_relocs_ to variable,
	update initializer.
	(Target_i386::copy_reloc): Rewrite to pass to Copy_relocs class.
	Change all callers.
	(Target_i386::do_finalize_sections): Change handling of
	copy_relocs_.
	* sparc.cc: Include "copy-relocs.h".
	(class Target_sparc): Change type of copy_relocs_ to variable,
	update initializer.
	(Target_sparc::copy_reloc): Rewrite to pass to Copy_relocs class.
	Change all callers.
	(Target_sparc::do_finalize_sections): Change handling of
	copy_relocs_.
	* x86_64.cc: Include "copy-relocs.h".
	(class Target_x86_64): Change type of copy_relocs_ to variable,
	update initializer.
	(Target_x86_64::copy_reloc): Rewrite to pass to Copy_relocs
	class.  Change all callers.
	(Target_x86_64::do_finalize_sections): Change handling of
	copy_relocs_.
	* Makefile.am (CCFILES): Add copy-relocs.cc.
	(HFILES): Add copy-relocs.h.
@
text
@// reloc-types.h -- ELF relocation templates for gold  -*- C++ -*-

// Copyright 2006, 2007, 2008 Free Software Foundation, Inc.
// Written by Ian Lance Taylor <iant@@google.com>.

// This file is part of gold.

// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,
// MA 02110-1301, USA.

// This header files defines a few convenient templated types for use
// when handling ELF relocations.

#ifndef GOLD_RELOC_TYPES_H
#define GOLD_RELOC_TYPES_H

#include "elfcpp.h"

namespace gold
{

// Pick the ELF relocation accessor class and the size based on
// SH_TYPE, which is either elfcpp::SHT_REL or elfcpp::SHT_RELA.

template<int sh_type, int size, bool big_endian>
struct Reloc_types;

template<int size, bool big_endian>
struct Reloc_types<elfcpp::SHT_REL, size, big_endian>
{
  typedef typename elfcpp::Rel<size, big_endian> Reloc;
  typedef typename elfcpp::Rel_write<size, big_endian> Reloc_write;
  static const int reloc_size = elfcpp::Elf_sizes<size>::rel_size;

  static inline typename elfcpp::Elf_types<size>::Elf_Swxword
  get_reloc_addend(const Reloc*)
  { gold_unreachable(); }

  static inline typename elfcpp::Elf_types<size>::Elf_Swxword
  get_reloc_addend_noerror(const Reloc*)
  { return 0; }

  static inline void
  set_reloc_addend(Reloc_write*,
		   typename elfcpp::Elf_types<size>::Elf_Swxword)
  { gold_unreachable(); }

  static inline void
  copy_reloc_addend(Reloc_write*, const Reloc*)
  { gold_unreachable(); }
};

template<int size, bool big_endian>
struct Reloc_types<elfcpp::SHT_RELA, size, big_endian>
{
  typedef typename elfcpp::Rela<size, big_endian> Reloc;
  typedef typename elfcpp::Rela_write<size, big_endian> Reloc_write;
  static const int reloc_size = elfcpp::Elf_sizes<size>::rela_size;

  static inline typename elfcpp::Elf_types<size>::Elf_Swxword
  get_reloc_addend(const Reloc* p)
  { return p->get_r_addend(); }

  static inline typename elfcpp::Elf_types<size>::Elf_Swxword
  get_reloc_addend_noerror(const Reloc* p)
  { return p->get_r_addend(); }

  static inline void
  set_reloc_addend(Reloc_write* p,
		   typename elfcpp::Elf_types<size>::Elf_Swxword val)
  { p->put_r_addend(val); }

  static inline void
  copy_reloc_addend(Reloc_write* to, const Reloc* from)
  { to->put_r_addend(from->get_r_addend()); }
};

}; // End namespace gold.

#endif // !defined(GOLD_RELOC_TYPE_SH)
@


1.4
log
@Update copyright years.  Update language files.
@
text
@d51 4
d76 4
@


1.3
log
@Initial -r support.
@
text
@d3 1
a3 1
// Copyright 2006, 2007 Free Software Foundation, Inc.
@


1.2
log
@Add licensing text to every source file.
@
text
@d44 1
d46 13
d65 1
d67 13
@


1.1
log
@Snapshot.  Includes first cut at output relocation sections.
@
text
@d3 20
@

