head	1.42;
access;
symbols
	binutils-2_24-branch:1.42.0.2
	binutils-2_24-branchpoint:1.42
	binutils-2_21_1:1.34
	binutils-2_23_2:1.40
	binutils-2_23_1:1.40
	binutils-2_23:1.40
	binutils-2_23-branch:1.40.0.2
	binutils-2_23-branchpoint:1.40
	binutils-2_22_branch:1.38.0.4
	binutils-2_22:1.38
	binutils-2_22-branch:1.38.0.2
	binutils-2_22-branchpoint:1.38
	binutils-2_21:1.34
	binutils-2_21-branch:1.34.0.2
	binutils-2_21-branchpoint:1.34
	binutils-2_20_1:1.27.4.1
	binutils-2_20:1.27.4.1
	binutils-arc-20081103-branch:1.25.0.6
	binutils-arc-20081103-branchpoint:1.25
	binutils-2_20-branch:1.27.0.4
	binutils-2_20-branchpoint:1.27
	dje-cgen-play1-branch:1.27.0.2
	dje-cgen-play1-branchpoint:1.27
	arc-20081103-branch:1.25.0.4
	arc-20081103-branchpoint:1.25
	binutils-2_19_1:1.25
	binutils-2_19:1.25
	binutils-2_19-branch:1.25.0.2
	binutils-2_19-branchpoint:1.25
	binutils_latest_snapshot:1.42
	added-to-binutils:1.25;
locks; strict;
comment	@// @;


1.42
date	2013.07.30.21.26.53;	author ccoutant;	state Exp;
branches;
next	1.41;

1.41
date	2013.07.19.23.07.08;	author roland;	state Exp;
branches;
next	1.40;

1.40
date	2012.05.02.21.37.23;	author roland;	state Exp;
branches
	1.40.2.1;
next	1.39;

1.39
date	2011.10.18.00.06.09;	author ccoutant;	state Exp;
branches;
next	1.38;

1.38
date	2011.07.15.21.43.08;	author ian;	state Exp;
branches;
next	1.37;

1.37
date	2011.07.06.21.19.32;	author ccoutant;	state Exp;
branches;
next	1.36;

1.36
date	2011.06.28.23.12.31;	author ian;	state Exp;
branches;
next	1.35;

1.35
date	2011.05.25.00.17.47;	author ian;	state Exp;
branches;
next	1.34;

1.34
date	2010.10.14.22.10.22;	author ccoutant;	state Exp;
branches;
next	1.33;

1.33
date	2010.04.07.21.42.22;	author dougkwan;	state Exp;
branches;
next	1.32;

1.32
date	2010.02.12.03.23.26;	author ian;	state Exp;
branches;
next	1.31;

1.31
date	2010.02.03.05.36.55;	author dougkwan;	state Exp;
branches;
next	1.30;

1.30
date	2009.12.14.19.53.05;	author ian;	state Exp;
branches;
next	1.29;

1.29
date	2009.12.11.13.42.12;	author nickc;	state Exp;
branches;
next	1.28;

1.28
date	2009.09.30.22.21.13;	author ian;	state Exp;
branches;
next	1.27;

1.27
date	2009.03.24.00.31.29;	author ian;	state Exp;
branches
	1.27.4.1;
next	1.26;

1.26
date	2009.03.14.05.56.46;	author ian;	state Exp;
branches;
next	1.25;

1.25
date	2008.03.13.21.04.21;	author iant;	state Exp;
branches;
next	1.24;

1.24
date	2008.03.13.01.46.17;	author iant;	state Exp;
branches;
next	1.23;

1.23
date	2008.03.06.00.17.43;	author iant;	state Exp;
branches;
next	1.22;

1.22
date	2008.03.04.23.10.38;	author iant;	state Exp;
branches;
next	1.21;

1.21
date	2008.03.04.18.21.43;	author iant;	state Exp;
branches;
next	1.20;

1.20
date	2008.02.28.00.18.24;	author iant;	state Exp;
branches;
next	1.19;

1.19
date	2008.02.27.22.38.18;	author iant;	state Exp;
branches;
next	1.18;

1.18
date	2008.02.26.22.10.32;	author iant;	state Exp;
branches;
next	1.17;

1.17
date	2008.02.26.21.45.30;	author iant;	state Exp;
branches;
next	1.16;

1.16
date	2007.12.01.06.34.12;	author iant;	state Exp;
branches;
next	1.15;

1.15
date	2007.11.22.00.05.51;	author iant;	state Exp;
branches;
next	1.14;

1.14
date	2007.11.15.23.03.45;	author iant;	state Exp;
branches;
next	1.13;

1.13
date	2007.11.15.01.12.55;	author iant;	state Exp;
branches;
next	1.12;

1.12
date	2007.11.14.07.34.53;	author iant;	state Exp;
branches;
next	1.11;

1.11
date	2007.11.14.01.03.01;	author iant;	state Exp;
branches;
next	1.10;

1.10
date	2007.10.27.00.29.34;	author iant;	state Exp;
branches;
next	1.9;

1.9
date	2007.10.18.23.20.53;	author iant;	state Exp;
branches;
next	1.8;

1.8
date	2007.10.16.23.23.08;	author iant;	state Exp;
branches;
next	1.7;

1.7
date	2007.10.14.06.49.14;	author iant;	state Exp;
branches;
next	1.6;

1.6
date	2007.10.10.19.02.56;	author iant;	state Exp;
branches;
next	1.5;

1.5
date	2007.10.04.05.49.04;	author iant;	state Exp;
branches;
next	1.4;

1.4
date	2007.09.28.06.36.25;	author iant;	state Exp;
branches;
next	1.3;

1.3
date	2007.09.26.07.01.35;	author iant;	state Exp;
branches;
next	1.2;

1.2
date	2007.09.22.21.02.10;	author iant;	state Exp;
branches;
next	1.1;

1.1
date	2007.09.21.07.20.01;	author iant;	state Exp;
branches;
next	;

1.40.2.1
date	2013.07.19.23.08.00;	author roland;	state Exp;
branches;
next	;

1.27.4.1
date	2009.10.16.05.51.18;	author ian;	state Exp;
branches;
next	;


desc
@@


1.42
log
@    gold/
    	* parameters.cc (Parameters::entry): Return target-specific entry
    	symbol name.
    	* target.h (Target::entry_symbol_name): New function.
    	(Target_info::entry_symbol_name): New data member.

    	* arm.cc (Target_arm::arm_info): Add entry_symbol_name.
    	(Target_arm_nacl::arm_nacl_info): Likewise.
    	* i386.cc (Target_i386::i386_info): Likewise.
    	(Target_i386_nacl::i386_nacl_info): Likewise.
    	* powerpc.cc (Target_powerpc::powerpc_info): Likewise.
    	* sparc.cc (Target_sparc::sparc_info): Likewise.
    	* tilegx.cc (Target_tilegx::tilegx_info): Likewise.
    	* x86_64.cc: (Target_x86_64::x86_64_info) Likewise.
    	(Target_x86_64_nacl::x86_64_nacl_info) Likewise.
    	* testsuite/testfile.cc (Target_test::test_target_info): Likewise.
@
text
@// parameters.cc -- general parameters for a link using gold

// Copyright 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013
// Free Software Foundation, Inc.
// Written by Ian Lance Taylor <iant@@google.com>.

// This file is part of gold.

// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,
// MA 02110-1301, USA.

#include "gold.h"

#include "debug.h"
#include "options.h"
#include "target.h"
#include "target-select.h"

namespace gold
{

// Our local version of the variable, which is not const.

static Parameters static_parameters;

// The global variable.

const Parameters* parameters = &static_parameters;

// A helper class to set the target once.

class Set_parameters_target_once : public Once
{
 public:
  Set_parameters_target_once(Parameters* parameters)
    : parameters_(parameters)
  { }

 protected:
  void
  do_run_once(void* arg)
  { this->parameters_->set_target_once(static_cast<Target*>(arg)); }

 private:
  Parameters* parameters_;
};

// We only need one Set_parameters_target_once.

static
Set_parameters_target_once set_parameters_target_once(&static_parameters);

// Class Parameters.

Parameters::Parameters()
   : errors_(NULL), timer_(NULL), options_(NULL), target_(NULL),
     doing_static_link_valid_(false), doing_static_link_(false),
     debug_(0), incremental_mode_(General_options::INCREMENTAL_OFF),
     set_parameters_target_once_(&set_parameters_target_once)
 {
 }

void
Parameters::set_errors(Errors* errors)
{
  gold_assert(this->errors_ == NULL);
  this->errors_ = errors;
}

void
Parameters::set_timer(Timer* timer)
{
  gold_assert(this->timer_ == NULL);
  this->timer_ = timer;
}

void
Parameters::set_options(const General_options* options)
{
  gold_assert(!this->options_valid());
  this->options_ = options;
  // For speed, we convert the options() debug var from a string to an
  // enum (from debug.h).
  this->debug_ = debug_string_to_enum(this->options().debug());
  // Set incremental_mode_ based on the value of the --incremental option.
  // We copy the mode into parameters because it can change based on inputs.
  this->incremental_mode_ = this->options().incremental_mode();
  // If --verbose is set, it acts as "--debug=files".
  if (options->verbose())
    this->debug_ |= DEBUG_FILES;
  if (this->target_valid())
    this->check_target_endianness();
}

void
Parameters::set_doing_static_link(bool doing_static_link)
{
  gold_assert(!this->doing_static_link_valid_);
  this->doing_static_link_ = doing_static_link;
  this->doing_static_link_valid_ = true;
}

void
Parameters::set_target(Target* target)
{
  this->set_parameters_target_once_->run_once(static_cast<void*>(target));
  gold_assert(target == this->target_);
}

// This is called at most once.

void
Parameters::set_target_once(Target* target)
{
  gold_assert(this->target_ == NULL);
  this->target_ = target;
  if (this->options_valid())
    {
      this->check_target_endianness();
      this->check_rodata_segment();
    }
}

// Clear the target, for testing.

void
Parameters::clear_target()
{
  this->target_ = NULL;
  // We need a new Set_parameters_target_once so that we can set the
  // target again.
  this->set_parameters_target_once_ = new Set_parameters_target_once(this);
}

// Return whether TARGET is compatible with the target we are using.

bool
Parameters::is_compatible_target(const Target* target) const
{
  if (this->target_ == NULL)
    return true;
  return target == this->target_;
}

Parameters::Target_size_endianness
Parameters::size_and_endianness() const
{
  if (this->target().get_size() == 32)
    {
      if (!this->target().is_big_endian())
	{
#ifdef HAVE_TARGET_32_LITTLE
	  return TARGET_32_LITTLE;
#else
	  gold_unreachable();
#endif
	}
      else
	{
#ifdef HAVE_TARGET_32_BIG
	  return TARGET_32_BIG;
#else
	  gold_unreachable();
#endif
	}
    }
  else if (parameters->target().get_size() == 64)
    {
      if (!parameters->target().is_big_endian())
	{
#ifdef HAVE_TARGET_64_LITTLE
	  return TARGET_64_LITTLE;
#else
	  gold_unreachable();
#endif
	}
      else
	{
#ifdef HAVE_TARGET_64_BIG
	  return TARGET_64_BIG;
#else
	  gold_unreachable();
#endif
	}
    }
  else
    gold_unreachable();
}

// If output endianness is specified in command line, check that it does
// not conflict with the target.

void
Parameters::check_target_endianness()
{
  General_options::Endianness endianness = this->options().endianness();
  if (endianness != General_options::ENDIANNESS_NOT_SET)
    {
      bool big_endian;
      if (endianness == General_options::ENDIANNESS_BIG)
	big_endian = true;
      else
	{
	  gold_assert(endianness == General_options::ENDIANNESS_LITTLE);
	  big_endian = false;;
	}

      if (this->target().is_big_endian() != big_endian)
	gold_error(_("input file does not match -EB/EL option"));
    }
}

void
Parameters::check_rodata_segment()
{
  if (this->options().user_set_Trodata_segment()
      && !this->options().rosegment()
      && !this->target().isolate_execinstr())
    gold_error(_("-Trodata-segment is meaningless without --rosegment"));
}

// Return the name of the entry symbol.

const char*
Parameters::entry() const
{
  const char* ret = this->options().entry();
  if (ret == NULL)
    ret = parameters->target().entry_symbol_name();
  return ret;
}

// Set the incremental linking mode to INCREMENTAL_FULL.  Used when
// the linker determines that an incremental update is not possible.
// Returns false if the incremental mode was INCREMENTAL_UPDATE,
// indicating that the linker should exit if an update is not possible.

bool
Parameters::set_incremental_full()
{
  gold_assert(this->incremental_mode_ != General_options::INCREMENTAL_OFF);
  if (this->incremental_mode_ == General_options::INCREMENTAL_UPDATE)
    return false;
  this->incremental_mode_ = General_options::INCREMENTAL_FULL;
  return true;
}

// Return true if we need to prepare incremental linking information.

bool
Parameters::incremental() const
{
  return this->incremental_mode_ != General_options::INCREMENTAL_OFF;
}

// Return true if we are doing a full incremental link.

bool
Parameters::incremental_full() const
{
  return this->incremental_mode_ == General_options::INCREMENTAL_FULL;
}

// Return true if we are doing an incremental update.

bool
Parameters::incremental_update() const
{
  return (this->incremental_mode_ == General_options::INCREMENTAL_UPDATE
	  || this->incremental_mode_ == General_options::INCREMENTAL_AUTO);
}

void
set_parameters_errors(Errors* errors)
{ static_parameters.set_errors(errors); }

void
set_parameters_timer(Timer* timer)
{ static_parameters.set_timer(timer); }

void
set_parameters_options(const General_options* options)
{ static_parameters.set_options(options); }

void
set_parameters_target(Target* target)
{
  static_parameters.set_target(target);
  target->select_as_default_target();
}

void
set_parameters_doing_static_link(bool doing_static_link)
{ static_parameters.set_doing_static_link(doing_static_link); }

// Set the incremental linking mode to INCREMENTAL_FULL.  Used when
// the linker determines that an incremental update is not possible.
// Returns false if the incremental mode was INCREMENTAL_UPDATE,
// indicating that the linker should exit if an update is not possible.
bool
set_parameters_incremental_full()
{ return static_parameters.set_incremental_full(); }

// Force the target to be valid by using the default.  Use the
// --oformat option is set; this supports the x86_64 kernel build,
// which converts a binary file to an object file using -r --format
// binary --oformat elf32-i386 foo.o.  Otherwise use the configured
// default.

void
parameters_force_valid_target()
{
  if (parameters->target_valid())
    return;

  gold_assert(parameters->options_valid());
  if (parameters->options().user_set_oformat())
    {
      const char* bfd_name = parameters->options().oformat();
      Target* target = select_target_by_bfd_name(bfd_name);
      if (target != NULL)
	{
	  set_parameters_target(target);
	  return;
	}

      gold_error(_("unrecognized output format %s"), bfd_name);
    }

  if (parameters->options().user_set_m())
    {
      const char* emulation = parameters->options().m();
      Target* target = select_target_by_emulation(emulation);
      if (target != NULL)
	{
	  set_parameters_target(target);
	  return;
	}

      gold_error(_("unrecognized emulation %s"), emulation);
    }

  // The GOLD_DEFAULT_xx macros are defined by the configure script.
  bool is_big_endian;
  General_options::Endianness endianness = parameters->options().endianness();
  if (endianness == General_options::ENDIANNESS_BIG)
    is_big_endian = true;
  else if (endianness == General_options::ENDIANNESS_LITTLE)
    is_big_endian = false;
  else
    is_big_endian = GOLD_DEFAULT_BIG_ENDIAN;

  Target* target = select_target(NULL, 0,
				 elfcpp::GOLD_DEFAULT_MACHINE,
				 GOLD_DEFAULT_SIZE,
				 is_big_endian,
				 elfcpp::GOLD_DEFAULT_OSABI,
				 0);

  if (target == NULL)
    {
      gold_assert(is_big_endian != GOLD_DEFAULT_BIG_ENDIAN);
      gold_fatal(_("no supported target for -EB/-EL option"));
    }

  set_parameters_target(target);
}

// Clear the current target, for testing.

void
parameters_clear_target()
{
  static_parameters.clear_target();
}

} // End namespace gold.
@


1.41
log
@gold/
	* options.h (General_options): Add -Trodata-segment option.
	* parameters.cc (Parameters::check_rodata_segment): New function.
	(Parameters::set_target_once): Call it.
	* parameters.h (Parameters): Declare it (private member function).
	* layout.cc (load_seg_unusable_for_headers): New function, broken
	out of Layout::relaxation_loop_body.  If TARGET->isolate_execinstr()
	then validate rodata segment rather than text segment.
	(relaxation_loop_body): Call that.
	(is_text_segment): New function.  Don't admit a non-executable
	segment if TARGET->isolate_execinstr().
	(set_segment_offsets): Call it.  Honor -Trodata-segment option.
@
text
@d241 1
a241 4
    {
      // FIXME: Need to support target specific entry symbol.
      ret = "_start";
    }
@


1.40
log
@	* configure.ac (ENABLE_GOLD): Consider *-*-nacl* targets ELF.
	* configure: Regenerate.

gold/
	* nacl.cc: New file.
	* nacl.h: New file.
	* Makefile.am (CCFILES, HFILES): Add them.
	* Makefile.in: Regenerate.
	* i386.cc (Output_data_plt_i386_nacl): New class.
	(Output_data_plt_i386_nacl_exec): New class.
	(Output_data_plt_i386_nacl_dyn): New class.
	(Target_i386_nacl): New class.
	(Target_selector_i386_nacl): New class.
	(target_selector_i386): Use it instead of Target_selector_i386.
	* x86_64.cc (Output_data_plt_x86_64_nacl): New class.
	(Target_x86_64_nacl): New class.
	(Target_selector_x86_64_nacl): New class.
	(target_selector_x86_64, target_selector_x32): Use it instead of
	Target_selector_x86_64.
	* arm.cc (Output_data_plt_arm_nacl): New class.
	(Target_arm_nacl): New class.
	(Target_selector_arm_nacl): New class.
	(target_selector_arm, target_selector_armbe): Use it instead of
	Target_selector_arm.

	* target-select.cc (select_target): Take new Input_file* and off_t
	arguments, pass them on to recognize method of selector.
	* object.cc (make_elf_sized_object): Update caller.
	* parameters.cc (parameters_force_valid_target): Likewise.
	* incremental.cc (make_sized_incremental_binary): Likewise.
	* target-select.h: Update decl.
	(Target_selector::recognize): Take new Input_file* argument,
	pass it on to do_recognize.
	(Target_selector::do_recognize): Take new Input_file* argument.
	* freebsd.h (Target_selector_freebsd::do_recognize): Likewise.
	* powerpc.cc (Target_selector_powerpc::do_recognize): Likewise.
	* sparc.cc (Target_selector_sparc::do_recognize): Likewise.
	* testsuite/testfile.cc (Target_selector::do_recognize): Likewise.

	* target.h (Target::Target_info): New members isolate_execinstr
	and rosegment_gap.
	(Target::isolate_execinstr, Target::rosegment_gap): New methods.
	* arm.cc (Target_arm::arm_info): Update initializer.
	* i386.cc (Target_i386::i386_info): Likewise.
	* powerpc.cc (Target_powerpc::powerpc_info): Likewise.
	* sparc.cc (Target_sparc::sparc_info): Likewise.
	* x86_64.cc (Target_x86_64::x86_64_info): Likewise.
	* testsuite/testfile.cc (Target_test::test_target_info): Likewise.
	* layout.cc (Layout::attach_allocated_section_to_segment):
	Take new const Target* argument.  If target->isolate_execinstr(), act
	like --rosegment.
	(Layout::find_first_load_seg): Take new const Target* argument;
	if target->isolate_execinstr(), reject PF_X segments.
	(Layout::relaxation_loop_body): Update caller.
	(Layout::set_segment_offsets): If target->isolate_execinstr(),
	reset file offset to zero when we hit LOAD_SEG, and then do a second
	loop over the segments before LOAD_SEG to reassign offsets after
	addresses have been determined.  Handle target->rosegment_gap().
	(Layout::attach_section_to_segment): Take new const Target* argument;
	pass it to attach_allocated_section_to_segment.
	(Layout::make_output_section): Update caller.
	(Layout::attach_sections_to_segments): Take new const Target* argument;
	pass it to attach_section_to_segment.
	* gold.cc (queue_middle_tasks): Update caller.
	* layout.h (Layout): Update method decls with new arguments.

	* arm.cc (Target_arm::Target_arm): Take optional argument for the
	Target_info pointer to use.
	(Target_arm::do_make_data_plt): New virtual method.
	(Target_arm::make_data_plt): New method that calls it.
	(Target_arm::make_plt_entry): Use it.
	(Output_data_plt_arm::Output_data_plt_arm): Take additional argument
	for the section alignment.
	(Output_data_plt_arm::do_first_plt_entry_offset): New abstract virtual
	method.
	(Output_data_plt_arm::first_plt_entry_offset): Call it.
	(Output_data_plt_arm::do_get_plt_entry_size): New abstract virtual
	method.
	(Output_data_plt_arm::get_plt_entry_size): Call it.
	(Output_data_plt_arm::do_fill_plt_entry): New abstract virtual method.
	(Output_data_plt_arm::fill_plt_entry): New method that calls it.
	(Output_data_plt_arm::do_fill_first_plt_entry): New abstract virtual
	method.
	(Output_data_plt_arm::fill_first_plt_entry): New method that calls it.
	(Output_data_plt_arm::set_final_data_size): Use get_plt_entry_size
	method instead of sizeof(plt_entry).
	(Output_data_plt_arm::add_entry): Likewise.
	Use first_plt_entry_offset method instead of sizeof(first_plt_entry).
	(Target_arm::first_plt_entry_offset): Call method on this->plt_ rather
	than static method.
	(Target_arm::plt_entry_size): Likewise.
	(Output_data_plt_arm::first_plt_entry, Output_data_plt_arm::plt_entry):
	Move to ...
	(Output_data_plt_arm_standard): ... here, new class.
	(Output_data_plt_arm::do_write): Move guts of PLT filling to...
	(Output_data_plt_arm_standard::do_fill_first_plt_entry): ... here ...
	(Output_data_plt_arm_standard::do_fill_plt_entry): ... and here.

	* x86_64.cc (Output_data_plt_x86_64::Output_data_plt_x86_64):
	Take additional argument for the PLT entry size.
	(Output_data_plt_x86_64::get_tlsdesc_plt_offset):
	Use get_plt_entry_size method rather than plt_entry_size variable.
	(Output_data_plt_x86_64::reserve_slot): Likewise.
	(Output_data_plt_x86_64::do_adjust_output_section): Likewise.
	(Output_data_plt_x86_64::add_entry): Likewise.
	(Output_data_plt_x86_64::add_local_ifunc_entry): Likewise.
	(Output_data_plt_x86_64::address_for_global): Likewise.
	(Output_data_plt_x86_64::address_for_local): Likewise.
	(Output_data_plt_x86_64::set_final_data_size): Likewise.
	(Output_data_plt_x86_64::first_plt_entry_offset): Likewise.
	Make method non-static.
	(Output_data_plt_x86_64::do_get_plt_entry_size): New abstract virtual
	method.
	(Output_data_plt_x86_64::get_plt_entry_size): Just call that.
	(Output_data_plt_x86_64::do_add_eh_frame): New abstract virtual method.
	(Output_data_plt_x86_64::add_eh_frame): New method to call it.
	(Output_data_plt_x86_64::do_fill_first_plt_entry): New abstract
	virtual method.
	(Output_data_plt_x86_64::fill_first_plt_entry): New method to call it.
	(Output_data_plt_x86_64::do_fill_plt_entry): New abstract
	virtual method.
	(Output_data_plt_x86_64::fill_plt_entry): New method to call it.
	(Output_data_plt_x86_64::do_fill_tlsdesc_entry): New abstract
	virtual method.
	(Output_data_plt_x86_64::fill_tlsdesc_entry): New method to call it.
	(Output_data_plt_x86_64::plt_entry_size)
	(Output_data_plt_x86_64::first_plt_entry)
	(Output_data_plt_x86_64::plt_entry)
	(Output_data_plt_x86_64::tlsdesc_plt_entry)
	(Output_data_plt_x86_64::plt_eh_frame_fde_size)
	(Output_data_plt_x86_64::plt_eh_frame_fde): Move to ...
	(Output_data_plt_x86_64_standard): ... here, new class.
	(Target_x86_64::Target_x86_64): Take optional argument for the
	Target_info pointer to use.
	(Target_x86_64::do_make_data_plt): New virtual method.
	(Target_x86_64::make_data_plt): New method to call it.
	(Target_x86_64::init_got_plt_for_update): Use that.
	Call this->plt_->add_eh_frame method here.
	(Output_data_plt_x86_64::init):	Don't do add_eh_frame_for_plt here.
	(Target_x86_64::first_plt_entry_offset): Call method on this->plt_
	rather than static method.
	(Target_x86_64::plt_entry_size): Likewise.
	(Output_data_plt_x86_64::do_write): Use get_plt_entry_size method
	rather than plt_entry_size variable.  Move guts of PLT filling to...
	(Output_data_plt_x86_64_standard::do_fill_first_plt_entry): ... here ...
	(Output_data_plt_x86_64_standard::do_fill_plt_entry): ... and here ...
	(Output_data_plt_x86_64_standard::do_fill_tlsdesc_entry): ... and here.

	* i386.cc (Output_data_plt_i386::Output_data_plt_i386): Take
	additional argument for the section alignment.
	Don't do add_eh_frame_for_plt here.
	(Output_data_plt_i386::first_plt_entry_offset): Make the method
	non-static.  Use get_plt_entry_size method rather than plt_entry_size
	variable.
	(Output_data_plt_i386::do_get_plt_entry_size): New abstract virtual
	method.
	(Output_data_plt_i386::get_plt_entry_size): Call it.
	(Output_data_plt_i386::do_add_eh_frame): New abstract virtual method.
	(Output_data_plt_i386::add_eh_frame): New method to call it.
	(Output_data_plt_i386::do_fill_first_plt_entry): New abstract virtual
	method.
	(Output_data_plt_i386::fill_first_plt_entry): New method to call it.
	(Output_data_plt_i386::do_fill_plt_entry): New abstract virtual
	method.
	(Output_data_plt_i386::fill_plt_entry): New method to call it.
	(Output_data_plt_i386::set_final_data_size): Use get_plt_entry_size
	method instead of plt_entry_size.
	(Output_data_plt_i386::plt_entry_size)
	(Output_data_plt_i386::plt_eh_frame_fde_size)
	(Output_data_plt_i386::plt_eh_frame_fde): Move to ...
	(Output_data_plt_i386_standard): ... here, new class.
	(Output_data_plt_i386_exec): New class.
	(Output_data_plt_i386::exec_first_plt_entry): Move to ...
	(Output_data_plt_i386_exec::first_plt_entry): ... here.
	(Output_data_plt_i386::exec_plt_entry): Move to ...
	(Output_data_plt_i386_exec::plt_entry): ... here.
	(Output_data_plt_i386_dyn): New class.
	(Output_data_plt_i386::first_plt_entry): Move to ...
	(Output_data_plt_i386_dyn::first_plt_entry): ... here.
	(Output_data_plt_i386::dyn_plt_entry): Move to ...
	(Output_data_plt_i386_dyn::plt_entry): ... here.
	(Target_i386::Target_i386): Take optional argument for the Target_info
	pointer to use.
	(Target_i386::do_make_data_plt): New virtual method.
	(Target_i386::make_data_plt): New method to call it.
	(Target_i386::make_plt_section): Use that.
	Call this->plt_->add_eh_frame method here.
	(Output_data_plt_i386::add_entry): Use get_plt_entry_size method
	rather than plt_entry_size variable.
	(Output_data_plt_i386::add_local_ifunc_entry): Likewise.
	(Output_data_plt_i386::address_for_local): Likewise.
	(Output_data_plt_i386::do_write): Likewise.
	Move guts of PLT filling to...
	(Output_data_plt_i386_exec::do_fill_first_plt_entry): ... here ...
	(Output_data_plt_i386_exec::do_fill_plt_entry): ... and here ...
	(Output_data_plt_i386_dyn::do_fill_first_plt_entry): ... and here ...
	(Output_data_plt_i386_dyn::do_fill_plt_entry): ... and here.

Change-Id: Id24b95600489835ff5e860a39c147203d4380c2b
@
text
@d3 1
a3 1
// Copyright 2006, 2007, 2008, 2009, 2010, 2011, 2012
d130 4
a133 1
    this->check_target_endianness();
d225 9
@


1.40.2.1
log
@gold/
	* options.h (General_options): Add -Trodata-segment option.
	* parameters.cc (Parameters::check_rodata_segment): New function.
	(Parameters::set_target_once): Call it.
	* parameters.h (Parameters): Declare it (private member function).
	* layout.cc (load_seg_unusable_for_headers): New function, broken
	out of Layout::relaxation_loop_body.  If TARGET->isolate_execinstr()
	then validate rodata segment rather than text segment.
	(relaxation_loop_body): Call that.
	(is_text_segment): New function.  Don't admit a non-executable
	segment if TARGET->isolate_execinstr().
	(set_segment_offsets): Call it.  Honor -Trodata-segment option.
@
text
@d3 1
a3 1
// Copyright 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013
d130 1
a130 4
    {
      this->check_target_endianness();
      this->check_rodata_segment();
    }
a221 9
void
Parameters::check_rodata_segment()
{
  if (this->options().user_set_Trodata_segment()
      && !this->options().rosegment()
      && !this->target().isolate_execinstr())
    gold_error(_("-Trodata-segment is meaningless without --rosegment"));
}

@


1.39
log
@	* gold.cc: Include timer.h.
	(queue_middle_tasks): Stamp time.
	(queue_final_tasks): Likewise.
	* main.cc (main): Store timer in parameters.  Print timers
	for each pass.
	* parameters.cc (Parameters::Parameters): Initialize timer_.
	(Parameters::set_timer): New function.
	(set_parameters_timer): New function.
	* parameters.h (Parameters::set_timer): New function.
	(Parameters::timer): New function.
	(Parameters::timer_): New data member.
	(set_parameters_timer): New function.
	* timer.cc (Timer::stamp): New function.
	(Timer::get_pass_time): New function.
	* timer.h (Timer::stamp): New function.
	(Timer::get_pass_time): New function.
	(Timer::pass_times_): New data member.
@
text
@d3 2
a4 1
// Copyright 2006, 2007, 2008, 2009, 2010, 2011 Free Software Foundation, Inc.
d216 1
a216 1
      
d356 2
a357 1
  Target* target = select_target(elfcpp::GOLD_DEFAULT_MACHINE,
@


1.38
log
@	* options.h (class General_options): Add --print-output-format.
	Move -EL next to -EB, for  better --help output.
	* target-select.cc: Include <cstdio>, "options.h", and
	"parameters.h".
	(Target_selector::do_target_bfd_name): New function.
	(print_output_format): New function.
	* target-select.h (class Target_selector): Update declarations.
	(Target_selector::target_bfd_name): New function.
	(print_output_format): Declare.
	* main.cc: Include "target-select.h".
	(main): Handle --print-output-format.
	* gold.cc: Include "target-select.h".
	(queue_initial_tasks): Handle --print-output-format when there are
	no input files.
	* parameters.cc (parameters_force_valid_target): Give a better
	error message if -EB/-EL does not match target.
	* freebsd.h (Target_selector_freebsd::do_target_bfd_name): New
	function.
@
text
@d67 1
a67 1
   : errors_(NULL), options_(NULL), target_(NULL),
d82 7
d280 4
@


1.37
log
@	* incremental.cc (Incremental_inputs::report_command_line): Ignore
	--incremental-patch option.
	* layout.cc (Free_list::allocate): Extend allocation beyond original
	end if enabled.
	(Layout::make_output_section): Mark sections that should get
	patch space.
	* options.cc (parse_percent): New function.
	* options.h (parse_percent): New function.
	(DEFINE_percent): New macro.
	(General_options): Add --incremental-patch option.
	* output.cc (Output_section::Output_section): Initialize new data
	members.
	(Output_section::add_input_section): Print section name when out
	of patch space.
	(Output_section::add_output_section_data): Likewise.
	(Output_section::set_final_data_size): Add patch space when
	doing --incremental-full.
	(Output_section::do_reset_address_and_file_offset): Remove patch
	space.
	(Output_segment::set_section_list_addresses): Print debug output
	only if --incremental-update.
	* output.h (Output_section::set_is_patch_space_allowed): New function.
	(Output_section::is_patch_space_allowed_): New data member.
	(Output_section::patch_space_): New data member.
	* parameters.cc (Parameters::incremental_full): New function.
	* parameters.h (Parameters::incremental_full): New function
	* testsuite/Makefile.am (incremental_test_2): Add test for
	--incremental-patch option.
	* testsuite/Makefile.in: Regenerate.
	* testsuite/two_file_test_1_v1.cc (t1, t2, t3): Add comments.
	(t18): Remove function body.
@
text
@d349 7
a355 1
  gold_assert(target != NULL);
@


1.36
log
@	PR gold/12934
	* target-select.cc (Target_selector::Target_selector): Add
	emulation parameter.  Change all callers.
	(select_target_by_bfd_name): Rename from select_target_by_name.
	Change all callers.
	(select_target_by_emulation): New function.
	(supported_emulation_names): New function.
	* target-select.h (class Target_selector): Add emulation_ field.
	Update declarations.
	(Target_selector::recognize_by_bfd_name): Rename from
	recognize_by_name.  Change all callers.
	(Target_selector::supported_bfd_names): Rename from
	supported_names.  Change all callers.
	(Target_selector::recognize_by_emulation): New function.
	(Target_selector::supported_emulations): New function.
	(Target_selector::emulation): New function.
	(Target_selector::do_recognize_by_bfd_name): Rename from
	do_recognize_by_name.  Change all callers.
	(Target_selector::do_supported_bfd_names): Rename from
	do_supported_names.  Change all callers.
	(Target_selector::do_recognize_by_emulation): New function.
	(Target_selector::do_supported_emulations): New function.
	(select_target_by_bfd_name): Change name in declaration.
	(select_target_by_emulation): Declare.
	(supported_emulation_names): Declare.
	* parameters.cc (parameters_force_valid_target): Try to find
	target based on emulation from -m option.
	* options.h (class General_options): Change doc string for -m.
	* options.cc (help): Print emulations.
	(General_options::parse_V): Likewise.
	* freebsd.h (Target_selector_freebsd::Target_selector_freebsd):
	Add emulation parameter.  Change all callers.
@
text
@d251 8
@


1.35
log
@	* archive.cc (Library_base::should_include_member): Pull in object
	from archive if it defines the entry symbol.
	* parameters.cc (Parameters::entry): New function.
	* parameters.h (class Parameters): Declare entry.
	* output.h (class Output_file_header): Remove entry_ field.
	* output.cc (Output_file_header::Output_file_header): Remove entry
	parameter.  Change all callers.
	(Output_file_header::entry): Use parameters->entry.
	* gold.cc (queue_middle_tasks): Likewise.
	* plugin.cc (Plugin_hook::run): Likewise.
@
text
@d3 1
a3 1
// Copyright 2006, 2007, 2008, 2009, 2010 Free Software Foundation, Inc.
d302 2
a303 1
      Target* target = select_target_by_name(parameters->options().oformat());
d310 14
a323 2
      gold_error(_("unrecognized output format %s"),
                 parameters->options().oformat());
@


1.34
log
@	* debug.h (DEBUG_INCREMENTAL): New flag.
	(debug_string_to_enum): Add DEBUG_INCREMENTAL).
	* gold.cc (queue_initial_tasks): Check parameters for incremental link
	mode.
	* incremental.cc (report_command_line): Ignore all forms of
	--incremental.
	* layout.cc (Layout::Layout): Check parameters for incremental link
	mode.
	* options.cc (General_options::parse_incremental): New function.
	(General_options::parse_no_incremental): New function.
	(General_options::parse_incremental_full): New function.
	(General_options::parse_incremental_update): New function.
	(General_options::incremental_mode_): New data member.
	(General_options::finalize): Check incremental_mode_.
	* options.h (General_options): Update help text for --incremental.
	Add --no-incremental, --incremental-full, --incremental-update.
	(General_options::Incremental_mode): New enum type.
	(General_options::incremental_mode): New function.
	(General_options::incremental_mode_): New data member.
	* parameters.cc (Parameters::incremental_mode_): New data member.
	(Parameters::set_options): Set incremental_mode_.
	(Parameters::set_incremental_full): New function.
	(Parameters::incremental): New function.
	(Parameters::incremental_update): New function.
	(set_parameters_incremental_full): New function.
	* parameters.h (Parameters::set_incremental_full): New function.
	(Parameters::incremental): New function.
	(Parameters::incremental_update): New function.
	(Parameters::incremental_mode_): New data member.
	(set_parameters_incremental_full): New function.
	* plugin.cc (Plugin_manager::add_input_file): Check parameters for
	incremental link mode.
	* reloc.cc (Sized_relobj::do_read_relocs): Likewise.
	(Sized_relobj::do_relocate_sections): Likewise.
	* testsuite/Makefile.am (incremental_test): Use --incremental-full
	option.
	* testsuite/Makefile.in: Regenerate.
	* testsuite/incremental_test.sh: Filter all forms of --incremental.
@
text
@d214 14
@


1.33
log
@2010-04-07  Doug Kwan  <dougkwan@@google.com>

	* arm.cc: Replace "endianity" with "endianness" in comments.
	(Arm_exidx_cantunwind): Ditto.
	(Arm_relobj::Arm_relobj): Initialize merge_flags_and_attribures.
	(Arm_relobj::merge_flags_and_attributes): New method.
	(Arm_relobj::merge_flags_and_attributes_): New data member.
	(Arm_exidx_cantunwind::do_fixed_endian_write): Fix formatting.
	(Arm_relobj::scan_sections_for_stubs): Ditto.
	(Arm_relobj::do_read_symbols): Check to see if we really want to
	merge processor-specific flags and attributes.  Exit early if
	an object is empty except for section names and the undefined symbol.
	(Target_arm::do_finalize_sections): Move check for ELF format to
	Arm_relobj::do_read_symbols.  Merge processor specific flags and
	attributes from a regular object only when we have determined that
	it is aapropriate.  Do not create an .ARM.attributes section in
	output if there is no regular input object.
	(Target_arm::merge_processor_specific_flags): Check
	--warn-mismatch before printing any error.
	(Target_arm::merge_object_attributes): Ditto.
	* gold.cc (queue_middle_tasks): Handle the case in which there is
	no regular object in input.
	* options.cc (General_options::parse_EB): New method.
	(General_options::parse_EL): Same.
	(General_options::General_options): Initialize endianness_.
	* options.h (-EB, -EL, -no-pipeline-knowledge, -p, --warn-mismatch):
	New options.
	(General_options::Endianness): New enum.
	(General_options::endianness): New method.
	(General_options::endianness_): New data member.
	* parameters.cc (Parameters::set_options): Check target endianness.
	(Parameters::set_target_once): Ditto.
	(Parameters::check_target_endianness): New method.
	(parameters_force_valid_target): If either -EL or -EB is specified,
	use it to define endianness of default target.
	* parameters.h (Parameters::check_target_endianness): New method
	declaration.
	* target.h (class Target): Change "endianity" to "endianness"
	in comments.
@
text
@d69 1
a69 1
     debug_(0),
d89 3
d214 32
d265 8
@


1.32
log
@	* gold-threads.h (class Once): Define.
	(class Initialize_lock): Rewrite as child of Once.
	* gold-threads.cc (class Once_initialize): Define.
	(once_pointer_control): New static variable.
	(once_pointer, once_arg): New static variables.
	(c_run_once): New static function.
	(Once::Once, Once::run_once, Once::internal_run): New functions.
	(class Initialize_lock_once): Remove.
	(initialize_lock_control): Remove.
	(initialize_lock_pointer): Remove.
	(initialize_lock_once): Remove.
	(Initialize_lock::Initialize_lock): Move to gold-threads.h.
	(Initialize_lock::initialize): Rewrite.
	(Initialize_lock::do_run_once): New function.
	* archive.cc (Archive::interpret_header): Only clear name if it is
	not already empty.
	* fileread.cc: Include "gold-threads.h"
	(file_counts_lock): New static variable.
	(file_counts_initialize_lock): Likewise.
	(File_read::release): Only increment counts when using --stats.
	Use a lock around the increment.
	* parameters.cc (class Set_parameters_target_once): Define.
	(set_parameters_target_once): New static variable.
	(Parameters::Parameters): Move here from parameters.h.
	(Parameters::set_target): Rewrite.
	(Parameters::set_target_once): New function.
	(Parameters::clear_target): Move here and rewrite.
	* parameters.h (class Parameters): Update declarations.  Add
	set_parameters_target_once_ field.
	(Parameters::Parameters): Move to parameters.cc.
	(Parameters::clear_target): Likewise.
	* readsyms.cc (Read_symbols::do_group): Create a Start_group
	task.
	(Start_group::~Start_group): New function.
	(Start_group::is_runnable): New function.
	(Start_group::locks, Start_group::run): New functions.
	(Finish_group::run): Change saw_undefined to size_t.
	* readsyms.h (class Start_group): Define.
	(class Finish_group): Change saw_undefined_ field to size_t.
	(Finish_group::Finish_group): Remove saw_undefined and
	this_blocker parameters.  Change all callers.
	(Finish_group::set_saw_undefined): New function.
	(Finish_group::set_blocker): New function.
	* symtab.h (class Symbol_table): Change saw_undefined to return
	size_t.  Change saw_undefined_ field to size_t.
	* target-select.cc (Set_target_once::do_run_once): New function.
	(Target_selector::Target_selector): Initialize set_target_once_
	field.  Don't initialize lock_ and initialize_lock_ fields.
	(Target_selector::instantiate_target): Rewrite.
	(Target_selector::set_target): New function.
	* target-select.h (class Set_target_once): Define.
	(class Target_selector): Update declarations.  Make
	Set_target_once a friend.  Remove lock_ and initialize_lock_
	fields.  Add set_target_once_ field.
@
text
@d92 2
d118 2
d188 23
d257 9
d268 1
a268 1
				 GOLD_DEFAULT_BIG_ENDIAN,
@


1.31
log
@2010-02-02  Doug Kwan  <dougkwan@@google.com>

	* Makefile.am (HFILES): Add arm-reloc-property.h.
	(DEFFILES): New.
 	(TARGETSOURCES): Add arm-reloc-property.cc
 	(ALL_TARGETOBJS): Add arm-reloc-property.$(OBJEXT)
	(libgold_a_SOURCES): $(DEFFILES)
	* Makefile.in: Regenerate.
	* arm-reloc-property.cc: New file.
	* arm-reloc-property.h: New file.
	* arm-reloc.def: New file.
	* arm.cc: Update comments.
	(arm-reloc-property.h): New included header.
	(arm_reloc_property_table): New global variable.
	(Target_arm::do_select_as_default_target): New method definition.
	* configure.tgt (armeb*-*-*,armbe*-*-*,arm*-*-*): Add
	arm-reloc-property to targ_extra_obj.
	* parameters.cc (set_parameters_target): Call
	Target::select_as_default_target().
	* target.h (Target::select_as_default_target): New method definition.
	(Target::do_select_as_default_target): Same.
@
text
@d3 1
a3 1
// Copyright 2006, 2007, 2008 Free Software Foundation, Inc.
d33 41
d105 22
a126 4
  if (!this->target_valid())
    this->target_ = target;
  else
    gold_assert(target == this->target_);
a183 9

// Our local version of the variable, which is not const.

static Parameters static_parameters;

// The global variable.

const Parameters* parameters = &static_parameters;

@


1.30
log
@	Revert -Wshadow changes, all changes from:
	2009-12-11  Doug Kwan  <dougkwan@@google.com>
	2009-12-11  Nick Clifton  <nickc@@redhat.com>
	* configure.ac: Remove -Wshadow when setting WARN_CXXFLAGS.
@
text
@d144 4
a147 1
{ static_parameters.set_target(target); }
@


1.29
log
@Add -Wshadow to the gcc command line options used when compiling the binutils.
Fix up all warnings generated by the addition of this switch.
@
text
@d3 1
a3 1
// Copyright 2006, 2007, 2008, 2009 Free Software Foundation, Inc.
d34 1
a34 1
Parameters::set_errors(Errors* errs)
d37 1
a37 1
  this->errors_ = errs;
d41 1
a41 1
Parameters::set_options(const General_options* opts)
d44 1
a44 1
  this->options_ = opts;
d49 1
a49 1
  if (opts->verbose())
d54 1
a54 1
Parameters::set_doing_static_link(bool doing_staticlink)
d57 1
a57 1
  this->doing_static_link_ = doing_staticlink;
d62 1
a62 1
Parameters::set_target(Target* targ)
d65 1
a65 1
    this->target_ = targ;
d67 1
a67 1
    gold_assert(targ == this->target_);
d73 1
a73 1
Parameters::is_compatible_target(const Target* targ) const
d77 1
a77 1
  return targ == this->target_;
@


1.28
log
@	* object.h (class Object): Remove target_ field, and target,
	sized_target, and set_target methods.
	(Object::sized_target): Remove.
	(class Sized_relobj): Update declarations.  Remove sized_target.
	* object.cc (Sized_relobj::setup): Remove target parameter.
	Change all callers.
	(Input_objects::add_object): Don't do anything with the target.
	(make_elf_sized_object): Add punconfigured parameter.  Change all
	callers.  Set or test parameter target.
	* dynobj.cc (Sized_dynobj::target): Remove target parameter.
	Change all callers.
	* parameters.cc (Parameters::set_target): Change parameter type to
	be non-const.
	(Parameters::default_target): Remove.
	(set_parameters_target): Change parameter type to be non-const.
	(parameters_force_valid_target): New function.
	(parameters_clear_target): New function.
	* parameters.h (class Parameters): Update declarations.  Remove
	default_target method.  Add sized_target and clear_target
	methods.  Change target_ to be non-const.
	(set_parameters_target): Update declaration.
	(parameters_force_valid_target): Declare.
	(parameters_clear_target): Declare.
	* readsyms.cc (Read_symbols::do_read_symbols): Pass punconfigured
	as NULL if we aren't searching.
	(Add_symbols::run): Don't check for compatible target.
	* fileread.cc (Input_file::open_binary): Call
	parameters_force_valid_target.
	* gold.cc (queue_middle_tasks): Likewise.
	* plugin.cc (make_sized_plugin_object): Likewise.  Don't call
	set_target on object.
	* dynobj.h (class Sized_dynobj): Update declarations.
	* archive.cc (Archive::get_elf_object_for_member): Return NULL if
	make_elf_object returns NULL.
	(Archive::include_member): Don't check whether object target is
	compatible.
	* output.cc (Output_section::add_input_section): Get target from
	parameters.
	(Output_section::relax_input_section): Likewise.
	* reloc.cc (Sized_relobj::do_gc_process_relocs): Get target from
	parameters.
	(Sized_relobj::do_scan_relocs): Likewise.
	(Sized_relobj::relocate_sections): Likewise.
	* resolve.cc (Symbol_table::resolve): Likewise.
	* symtab.cc (Symbol_table::wrap_symbol): Likewise.  Remove object
	parameter.  Change all callers.
	(Symbol_table::add_from_object): Get target from parameters.
	(Symbol_table::add_from_relobj): Don't check object target.
	(Symbol_table::add_from_dynobj): Likewise.
	(Symbol_table::define_special_symbol): Get target from
	parameters.
	* symtab.h (class Symbol_table): Update declaration.
	* testsuite/binary_unittest.cc (gold_testsuite): Remove target
	parameter.  Change all callers.  Clear parameter target.
	(Binary_test): Test target here.
	* testsuite/object_unittest.cc (gold_testsuite): Remove
	target_test_pointer parameter.  Change all callers.
	(Object_test): Test target here.
@
text
@d3 1
a3 1
// Copyright 2006, 2007, 2008 Free Software Foundation, Inc.
d34 1
a34 1
Parameters::set_errors(Errors* errors)
d37 1
a37 1
  this->errors_ = errors;
d41 1
a41 1
Parameters::set_options(const General_options* options)
d44 1
a44 1
  this->options_ = options;
d49 1
a49 1
  if (options->verbose())
d54 1
a54 1
Parameters::set_doing_static_link(bool doing_static_link)
d57 1
a57 1
  this->doing_static_link_ = doing_static_link;
d62 1
a62 1
Parameters::set_target(Target* target)
d65 1
a65 1
    this->target_ = target;
d67 1
a67 1
    gold_assert(target == this->target_);
d73 1
a73 1
Parameters::is_compatible_target(const Target* target) const
d77 1
a77 1
  return target == this->target_;
@


1.27
log
@2009-03-23  Ian Lance Taylor  <iant@@google.com>

	* freebsd.h: New file.
	* i386.cc: Include "freebsd.h".
	(Target_i386): Derive from Target_freebsd rather than
	Sized_target.
	(Target_selector_i386): Derive from Target_selector_freebsd rather
	than Target_selector.
	* x86_64.cc: Include "freebsd.h".
	(Target_x86_64): Derive from Target_freebsd rather than
	Sized_target.
	(Target_selector_x86_64): Derive from Target_selector_freebsd
	rather than Target_selector.
	* target.h (class Target): Add adjust_elf_header and
	do_adjust_elf_header.
	* output.cc (Output_file_header:: do_sized_write): Call target
	adjust_elf_header routine.
	* configure.tgt: Set targ_osabi.
	* configure.ac: Define GOLD_DEFAULT_OSABI.
	* parameters.cc (Parameters::default_target): Pass
	GOLD_DEFAULT_OSABI to select_target.
	* target-select.h (class Target_selector): Make instantiate_target
	protected rather than private.
	* Makefile.am (HFILES): Add freebsd.h.
	* configure, Makefile.in, config.in: Rebuild.
@
text
@d62 1
a62 1
Parameters::set_target(const Target* target)
a69 31
// The x86_64 kernel build converts a binary file to an object file
// using -r --format binary --oformat elf32-i386 foo.o.  In order to
// support that for gold we support determining the default target
// choice from the output format.  We recognize names that the GNU
// linker uses.

const Target&
Parameters::default_target() const
{
  gold_assert(this->options_valid());
  if (this->options().user_set_oformat())
    {
      const Target* target
          = select_target_by_name(this->options().oformat());
      if (target != NULL)
	return *target;

      gold_error(_("unrecognized output format %s"),
                 this->options().oformat());
    }

  // The GOLD_DEFAULT_xx macros are defined by the configure script.
  const Target* target = select_target(elfcpp::GOLD_DEFAULT_MACHINE,
                                       GOLD_DEFAULT_SIZE,
                                       GOLD_DEFAULT_BIG_ENDIAN,
				       elfcpp::GOLD_DEFAULT_OSABI,
				       0);
  gold_assert(target != NULL);
  return *target;
}

d143 1
a143 1
set_parameters_target(const Target* target)
d150 44
@


1.27.4.1
log
@Merge elfcpp and gold from trunk.
@
text
@d62 1
a62 1
Parameters::set_target(Target* target)
d70 31
d174 1
a174 1
set_parameters_target(Target* target)
a180 44
// Force the target to be valid by using the default.  Use the
// --oformat option is set; this supports the x86_64 kernel build,
// which converts a binary file to an object file using -r --format
// binary --oformat elf32-i386 foo.o.  Otherwise use the configured
// default.

void
parameters_force_valid_target()
{
  if (parameters->target_valid())
    return;

  gold_assert(parameters->options_valid());
  if (parameters->options().user_set_oformat())
    {
      Target* target = select_target_by_name(parameters->options().oformat());
      if (target != NULL)
	{
	  set_parameters_target(target);
	  return;
	}

      gold_error(_("unrecognized output format %s"),
                 parameters->options().oformat());
    }

  // The GOLD_DEFAULT_xx macros are defined by the configure script.
  Target* target = select_target(elfcpp::GOLD_DEFAULT_MACHINE,
				 GOLD_DEFAULT_SIZE,
				 GOLD_DEFAULT_BIG_ENDIAN,
				 elfcpp::GOLD_DEFAULT_OSABI,
				 0);
  gold_assert(target != NULL);
  set_parameters_target(target);
}

// Clear the current target, for testing.

void
parameters_clear_target()
{
  static_parameters.clear_target();
}

@


1.26
log
@	* readsyms.cc (Read_symbols::incompatible_warning): New function.
	(Read_symbols::requeue): New function.
	(Read_symbols::do_read_symbols): If make_elf_object fails because
	the target type is not configured, and the file was searched for,
	issue a warning and retry with the next directory.
	(Add_symbols::run): If the file has an incompatible format, and
	it was searched for, requeue the Read_symbols task.  On error,
	release the object.
	* readsyms.h (class Read_symbols): Add dirindex_ field.  Add
	dirindex parameter to constructor.  Change all callers.  Declare
	incompatible_warning and requeue.
	(class Add_symbols): Add dirpath_, dirindex_, mapfile_,
	input_argument_ and input_group_ fields.  Add them to
	constructor.  Change all callers.
	(class Read_script): Add dirindex_ field.  Add it to constructor.
	Change all callers.
	* archive.cc (Archive::setup): Remove input_objects parameter.
	Change all callers.
	(Archive::get_file_and_offset): Likewise.
	(Archive::read_all_symbols): Likewise.
	(Archive::read_symbols): Likewise.
	(Archive::get_elf_object_for_member): Remove input_objects
	parameter.  Add punconfigured parameter.  Change all callers.
	(Archive::add_symbols): Change return type to bool.  Check return
	value of include_member.
	(Archive::include_all_members): Likewise.
	(Archive::include_member): Change return type to bool.  Return
	false if first included object has incompatible target.  Set
	included_member_ field.
	(Add_archive_symbols::run): If add_symbols returns false, requeue
	Read_symbols task.
	* archive.h (class Archive): Add included_member_ field.
	Initialize it in constructor.  Add input_file and searched_for
	methods.  Update declarations.
	(class Add_archive_symbols): Add dirpath_, dirindex_, and
	input_argument_ fields.  Add them to constructor.  Change all
	callers.
	* script.cc: Include "target-select.h".
	(class Parser_closure): Add skip_on_incompatible_target_ and
	found_incompatible_target_ fields.  Add
	skip_on_incompatible_target parameter to constructor.  Change all
	callers.  Add methods skip_on_incompatible_target,
	clear_skip_on_incompatible_target, found_incompatible_target, and
	set_found_incompatible_target.
	(read_input_script): Add dirindex parameter.  Change all callers.
	If parser finds an incompatible target, requeue Read_symbols
	task.
	(script_set_symbol): Clear skip_on_incompatible_target in
	closure.
	(script_add_assertion, script_parse_option): Likewise.
	(script_start_sections, script_add_phdr): Likewise.
	(script_check_output_format): New function.
	* script.h (read_input_script): Update declaration.
	* script-c.h (script_check_output_format): Declare.
	* yyscript.y (file_cmd): Handle OUTPUT_FORMAT.
	(ignore_cmd): Remove OUTPUT_FORMAT.
	* fileread.cc (Input_file::Input_file): Add explicit this.
	(Input_file::will_search_for): New function.
	(Input_file::open): Add pindex parameter.  Change all callers.
	* fileread.h (class Input_file): Add input_file_argument method.
	Declare will_search_for.  Update declarations.
	* object.cc (make_elf_object): Add punconfigured parameter.
	Change all callers.
	* object.h (class Object): Make input_file public.  Add
	searched_for method.
	(make_elf_object): Update declaration.
	* dirsearch.cc (Dirsearch::find): Add pindex parameter.  Use it to
	restart search.
	* dirsearch.h (class Dirsearch): Update declaration.
	* options.h (class General_options): Add --warn-search-mismatch.
	* parameters.cc (Parameters::is_compatible_target): New function.
	* parameters.h (class Parameters): Declare is_compatible_target.
	* workqueue.cc (Workqueue::add_blocker): New function.
	* workqueue.h (class Workqueue): Declare add_blocker.
@
text
@d95 2
a96 1
                                       0, 0);
@


1.25
log
@Update copyright years.  Update language files.
@
text
@d100 10
@


1.24
log
@From Craig Silverstein: Implement --debug=files to track file opens,
and implement --verbose as a synonym.
@
text
@d3 1
a3 1
// Copyright 2006, 2007 Free Software Foundation, Inc.
@


1.23
log
@Don't use the user-specified output format unless the user actually
specified one.
@
text
@d48 3
@


1.22
log
@From Craig Silverstein: rework option handling to make it easier to
add a new option.
@
text
@d77 1
a77 1
  if (this->options().oformat() != NULL)
@


1.21
log
@From Craig Silverstein: rename some option functions in preparation
for reworking option handling.
@
text
@d25 1
d45 3
a47 2
  // For speed, we make our own copy of the debug variable.
  this->debug_ = this->options().debug();
@


1.20
log
@From Craig Silverstein: Have Parameters point to General_options.
@
text
@d75 1
a75 1
  if (this->options().oformat_string() != NULL)
d78 1
a78 1
          = select_target_by_name(this->options().oformat_string());
d83 1
a83 1
		 this->options().oformat_string());
@


1.19
log
@Implement -q/--emit-relocs.
@
text
@d27 1
a27 1
#include "parameters.h"
d32 6
a37 1
// Initialize the parameters from the options.
d39 2
a40 9
Parameters::Parameters(Errors* errors)
  : errors_(errors), threads_(false), output_file_name_(NULL),
    output_file_type_(OUTPUT_INVALID), emit_relocs_(false), sysroot_(),
    strip_(STRIP_INVALID), allow_shlib_undefined_(false),
    symbolic_(false), demangle_(false), detect_odr_violations_(false),
    optimization_level_(0), export_dynamic_(false), debug_(0),
    is_doing_static_link_valid_(false), doing_static_link_(false),
    is_target_valid_(false), target_(NULL), size_(0), is_big_endian_(false),
    max_page_size_(0), common_page_size_(0)
d42 4
d48 7
a54 23
// Set fields from the command line options.

void
Parameters::set_from_options(const General_options* options)
{
  this->threads_ = options->threads();
  this->output_file_name_ = options->output_file_name();
  this->emit_relocs_ = options->emit_relocs();
  this->sysroot_ = options->sysroot();
  this->allow_shlib_undefined_ = options->allow_shlib_undefined();
  this->symbolic_ = options->Bsymbolic();
  this->demangle_ = options->demangle();
  this->detect_odr_violations_ = options->detect_odr_violations();
  this->optimization_level_ = options->optimize();
  this->export_dynamic_ = options->export_dynamic();
  this->debug_ = options->debug();

  if (options->shared())
    this->output_file_type_ = OUTPUT_SHARED;
  else if (options->relocatable())
    this->output_file_type_ = OUTPUT_OBJECT;
  else
    this->output_file_type_ = OUTPUT_EXECUTABLE;
d56 5
a60 6
  if (options->strip_all())
    this->strip_ = STRIP_ALL;
  else if (options->strip_debug())
    this->strip_ = STRIP_DEBUG;
  else if (options->strip_debug_gdb())
    this->strip_ = STRIP_DEBUG_UNUSED_BY_GDB;
d62 2
a63 1
    this->strip_ = STRIP_NONE;
d65 5
a69 2
  this->max_page_size_ = options->max_page_size();
  this->common_page_size_ = options->common_page_size();
d71 10
a80 2
  this->options_valid_ = true;
}
d82 3
a84 1
// Set whether we are doing a static link.
d86 7
a92 5
void
Parameters::set_doing_static_link(bool doing_static_link)
{
  this->doing_static_link_ = doing_static_link;
  this->is_doing_static_link_valid_ = true;
d95 2
a96 4
// Set the target.

void
Parameters::set_target(Target* target)
d98 1
a98 1
  if (!this->is_target_valid_)
d100 35
a134 4
      this->target_ = target;
      this->size_ = target->get_size();
      this->is_big_endian_ = target->is_big_endian();
      this->is_target_valid_ = true;
d137 1
a137 1
    gold_assert(target == this->target_);
d140 1
d143 1
a143 1
static Parameters* static_parameters;
d147 1
a147 1
const Parameters* parameters;
d149 3
a151 1
// Initialize the global variable.
d154 2
a155 6
initialize_parameters(Errors* errors)
{
  parameters = static_parameters = new Parameters(errors);
}

// Set values from the options.
d158 2
a159 6
set_parameters_from_options(const General_options* options)
{
  static_parameters->set_from_options(options);
}

// Set whether we are doing a static link.
d163 1
a163 11
{
  static_parameters->set_doing_static_link(doing_static_link);
}

// Set the target.

void
set_parameters_target(Target* target)
{
  static_parameters->set_target(target);
}
@


1.18
log
@From Craig Silverstein: implement -z max-page-size and -z
common-page-size.
@
text
@d36 1
a36 1
    output_file_type_(OUTPUT_INVALID), sysroot_(),
d53 1
@


1.17
log
@From Craig Silverstein: rename option functions for future option
handling rewrite.
@
text
@d41 2
a42 1
    is_target_valid_(false), target_(NULL)
d77 3
@


1.16
log
@Compress all debug sections.
@
text
@d54 1
a54 1
  this->symbolic_ = options->symbolic();
d57 1
a57 1
  this->optimization_level_ = options->optimization_level();
d61 1
a61 1
  if (options->is_shared())
d63 1
a63 1
  else if (options->is_relocatable())
@


1.15
log
@Add threading support.
@
text
@d26 1
d41 1
a41 1
    is_size_and_endian_valid_(false), size_(0), is_big_endian_(false)
d89 1
a89 1
// Set the size and endianness.
d92 1
a92 1
Parameters::set_size_and_endianness(int size, bool is_big_endian)
d94 1
a94 1
  if (!this->is_size_and_endian_valid_)
d96 4
a99 3
      this->size_ = size;
      this->is_big_endian_ = is_big_endian;
      this->is_size_and_endian_valid_ = true;
d102 1
a102 4
    {
      gold_assert(size == this->size_);
      gold_assert(is_big_endian == this->is_big_endian_);
    }
d137 1
a137 1
// Set the size and endianness.
d140 1
a140 1
set_parameters_size_and_endianness(int size, bool is_big_endian)
d142 1
a142 1
  static_parameters->set_size_and_endianness(size, is_big_endian);
@


1.14
log
@From Craig Silverstein: Add --strip-debug-gdb.
@
text
@d34 1
a34 1
  : errors_(errors), output_file_name_(NULL),
d38 1
a38 1
    optimization_level_(0), export_dynamic_(false),
d49 1
d58 1
@


1.13
log
@From Craig Silverstein: Add support for --demangle.
@
text
@d69 2
@


1.12
log
@Warn about undefined references in shared libraries if we have seen
all the DT_NEEDED entries for that library.
@
text
@d37 1
a37 1
    symbolic_(false), detect_odr_violations_(false),
d53 1
@


1.11
log
@From Craig Silverstein: Rework debug info code a bit, add option for
ODR violations, add test case.
@
text
@d36 2
a37 1
    strip_(STRIP_INVALID), symbolic_(false), detect_odr_violations_(false),
d51 1
@


1.10
log
@From Craig Silverstein and Ian Lance Taylor: Process --script option.
@
text
@d36 1
a36 1
    strip_(STRIP_INVALID), symbolic_(false),
d51 1
@


1.9
log
@Add support for -Bsymbolic.
@
text
@d33 5
a37 3
Parameters::Parameters(const General_options* options, Errors* errors)
  : errors_(errors), output_file_name_(options->output_file_name()),
    sysroot_(options->sysroot()), symbolic_(options->symbolic()),
d39 1
a39 3
    is_size_and_endian_valid_(false), size_(0), is_big_endian_(false),
    optimization_level_(options->optimization_level()),
    export_dynamic_(options->export_dynamic())
d41 13
d67 2
d109 9
a117 1
initialize_parameters(const General_options* options, Errors* errors)
d119 1
a119 1
  parameters = static_parameters = new Parameters(options, errors);
@


1.8
log
@From Cary Coutant: preliminary shared library support.
@
text
@d35 1
a35 1
    sysroot_(options->sysroot()),
@


1.7
log
@Run all error handling through an Errors object.  Delete output file
on error.
@
text
@d38 2
a39 1
    optimization_level_(options->optimization_level())
@


1.6
log
@Implement -s and -S options which strip symbols.
@
text
@d33 3
a35 2
Parameters::Parameters(const General_options* options)
  : sysroot_(options->sysroot()),
d93 1
a93 1
initialize_parameters(const General_options* options)
d95 1
a95 1
  parameters = static_parameters = new Parameters(options);
@


1.5
log
@Full support for --sysroot.
@
text
@d45 7
@


1.4
log
@Use parameters to track whether we are doing a static link.  Fix up
final_value_is_known for weak undefined symbols.  Pointed out by Cary
Coutant.
@
text
@d34 2
a35 1
  : is_doing_static_link_valid_(false), doing_static_link_(false),
@


1.3
log
@Put size and endianness in parameters.
@
text
@d34 2
a35 1
  : is_size_and_endian_valid_(false), size_(0), is_big_endian_(false),
d46 9
d88 10
@


1.2
log
@Add licensing text to every source file.
@
text
@d34 2
a35 1
  : optimization_level_(options->optimization_level())
d45 22
d76 7
a82 1
  parameters = new Parameters(options);
@


1.1
log
@Add global parameters.
@
text
@d3 20
@

