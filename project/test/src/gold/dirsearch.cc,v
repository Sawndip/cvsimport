head	1.15;
access;
symbols
	binutils-2_24-branch:1.15.0.4
	binutils-2_24-branchpoint:1.15
	binutils-2_21_1:1.12
	binutils-2_23_2:1.15
	binutils-2_23_1:1.15
	binutils-2_23:1.15
	binutils-2_23-branch:1.15.0.2
	binutils-2_23-branchpoint:1.15
	binutils-2_22_branch:1.14.0.4
	binutils-2_22:1.14
	binutils-2_22-branch:1.14.0.2
	binutils-2_22-branchpoint:1.14
	binutils-2_21:1.12
	binutils-2_21-branch:1.12.0.2
	binutils-2_21-branchpoint:1.12
	binutils-2_20_1:1.11
	binutils-2_20:1.11
	binutils-arc-20081103-branch:1.10.0.6
	binutils-arc-20081103-branchpoint:1.10
	binutils-2_20-branch:1.11.0.4
	binutils-2_20-branchpoint:1.11
	dje-cgen-play1-branch:1.11.0.2
	dje-cgen-play1-branchpoint:1.11
	arc-20081103-branch:1.10.0.4
	arc-20081103-branchpoint:1.10
	binutils-2_19_1:1.10
	binutils-2_19:1.10
	binutils-2_19-branch:1.10.0.2
	binutils-2_19-branchpoint:1.10
	binutils_latest_snapshot:1.15
	added-to-binutils:1.10;
locks; strict;
comment	@// @;


1.15
date	2011.11.17.17.46.54;	author sterling;	state Exp;
branches;
next	1.14;

1.14
date	2011.07.03.04.16.13;	author ian;	state Exp;
branches;
next	1.13;

1.13
date	2011.05.25.06.15.28;	author ian;	state Exp;
branches;
next	1.12;

1.12
date	2010.02.11.07.42.17;	author ian;	state Exp;
branches;
next	1.11;

1.11
date	2009.03.14.05.56.46;	author ian;	state Exp;
branches;
next	1.10;

1.10
date	2008.03.13.21.04.21;	author iant;	state Exp;
branches;
next	1.9;

1.9
date	2008.03.13.01.46.17;	author iant;	state Exp;
branches;
next	1.8;

1.8
date	2007.12.14.19.00.21;	author iant;	state Exp;
branches;
next	1.7;

1.7
date	2007.11.22.00.05.51;	author iant;	state Exp;
branches;
next	1.6;

1.6
date	2007.10.14.06.49.13;	author iant;	state Exp;
branches;
next	1.5;

1.5
date	2007.10.04.05.49.04;	author iant;	state Exp;
branches;
next	1.4;

1.4
date	2007.09.22.21.02.10;	author iant;	state Exp;
branches;
next	1.3;

1.3
date	2006.11.29.17.56.40;	author iant;	state Exp;
branches;
next	1.2;

1.2
date	2006.08.04.23.19.45;	author iant;	state Exp;
branches;
next	1.1;

1.1
date	2006.08.04.23.10.59;	author iant;	state Exp;
branches;
next	;


desc
@@


1.15
log
@2011-11-17  Sterling Augustine  <saugustine@@google.com>

	* script.cc (script_include_directive): Implement.
	(read_script_file): New local variables name and search_path. Update
	comment. Call IS_ABSOLUTE_PATH and Dirsearch::find_file_in_dir_list.
	* dirsearch.h (Dirsearch::find_file_in_dir_list): Declare new method.
	* dirsearch.cc (Dirsearch::find_file_in_dir_list): Implement it.
@
text
@// dirsearch.cc -- directory searching for gold

// Copyright 2006, 2007, 2008, 2009, 2010, 2011 Free Software Foundation, Inc.
// Written by Ian Lance Taylor <iant@@google.com>.

// This file is part of gold.

// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,
// MA 02110-1301, USA.

#include "gold.h"

#include <cerrno>
#include <cstring>
#include <sys/types.h>
#include <sys/stat.h>
#include <dirent.h>

#include "debug.h"
#include "gold-threads.h"
#include "options.h"
#include "workqueue.h"
#include "dirsearch.h"

namespace
{

// Read all the files in a directory.

class Dir_cache
{
 public:
  Dir_cache(const char* dirname)
    : dirname_(dirname), files_()
  { }

  // Read the files in the directory.
  void read_files();

  // Return whether a file (a base name) is present in the directory.
  bool find(const std::string&) const;

 private:
  // We can not copy this class.
  Dir_cache(const Dir_cache&);
  Dir_cache& operator=(const Dir_cache&);

  const char* dirname_;
  Unordered_set<std::string> files_;
};

void
Dir_cache::read_files()
{
  DIR* d = opendir(this->dirname_);
  if (d == NULL)
    {
      // We ignore directories which do not exist or are actually file
      // names.
      if (errno != ENOENT && errno != ENOTDIR)
	gold::gold_error(_("%s: can not read directory: %s"),
			 this->dirname_, strerror(errno));
      return;
    }

  dirent* de;
  while ((de = readdir(d)) != NULL)
    this->files_.insert(std::string(de->d_name));

  if (closedir(d) != 0)
    gold::gold_warning("%s: closedir failed: %s", this->dirname_,
		       strerror(errno));
}

bool
Dir_cache::find(const std::string& basename) const
{
  return this->files_.find(basename) != this->files_.end();
}

// A mapping from directory names to caches.  A lock permits
// concurrent update.  There is no lock for read operations--some
// other mechanism must be used to prevent reads from conflicting with
// writes.

class Dir_caches
{
 public:
  Dir_caches()
    : lock_(), caches_()
  { }

  ~Dir_caches();

  // Add a cache for a directory.
  void add(const char*);

  // Look up a directory in the cache.  This much be locked against
  // calls to Add.
  Dir_cache* lookup(const char*) const;

 private:
  // We can not copy this class.
  Dir_caches(const Dir_caches&);
  Dir_caches& operator=(const Dir_caches&);

  typedef Unordered_map<const char*, Dir_cache*> Cache_hash;

  gold::Lock lock_;
  Cache_hash caches_;
};

Dir_caches::~Dir_caches()
{
  for (Cache_hash::iterator p = this->caches_.begin();
       p != this->caches_.end();
       ++p)
    delete p->second;
}

void
Dir_caches::add(const char* dirname)
{
  {
    gold::Hold_lock hl(this->lock_);
    if (this->lookup(dirname) != NULL)
      return;
  }

  Dir_cache* cache = new Dir_cache(dirname);

  cache->read_files();

  {
    gold::Hold_lock hl(this->lock_);

    std::pair<const char*, Dir_cache*> v(dirname, cache);
    std::pair<Cache_hash::iterator, bool> p = this->caches_.insert(v);
    gold_assert(p.second);
  }
}

Dir_cache*
Dir_caches::lookup(const char* dirname) const
{
  Cache_hash::const_iterator p = this->caches_.find(dirname);
  if (p == this->caches_.end())
    return NULL;
  return p->second;
}

// The caches.

Dir_caches* caches;

// A Task to read the directory.

class Dir_cache_task : public gold::Task
{
 public:
  Dir_cache_task(const char* dir, gold::Task_token& token)
    : dir_(dir), token_(token)
  { }

  gold::Task_token*
  is_runnable();

  void
  locks(gold::Task_locker*);

  void
  run(gold::Workqueue*);

  std::string
  get_name() const
  { return std::string("Dir_cache_task ") + this->dir_; }

 private:
  const char* dir_;
  gold::Task_token& token_;
};

// We can always run the task to read the directory.

gold::Task_token*
Dir_cache_task::is_runnable()
{
  return NULL;
}

// Return the locks to hold.  We use a blocker lock to prevent file
// lookups from starting until the directory contents have been read.

void
Dir_cache_task::locks(gold::Task_locker* tl)
{
  tl->add(this, &this->token_);
}

// Run the task--read the directory contents.

void
Dir_cache_task::run(gold::Workqueue*)
{
  caches->add(this->dir_);
}

}

namespace gold
{

// Initialize.

void
Dirsearch::initialize(Workqueue* workqueue,
		      const General_options::Dir_list* directories)
{
  gold_assert(caches == NULL);
  caches = new Dir_caches;
  this->directories_ = directories;
  this->token_.add_blockers(directories->size());
  for (General_options::Dir_list::const_iterator p = directories->begin();
       p != directories->end();
       ++p)
    workqueue->queue(new Dir_cache_task(p->name().c_str(), this->token_));
}

// Search for a file.  NOTE: we only log failed file-lookup attempts
// here.  Successfully lookups will eventually get logged in
// File_read::open.

std::string
Dirsearch::find(const std::vector<std::string>& names,
		bool* is_in_sysroot, int* pindex,
		std::string *found_name) const
{
  gold_assert(!this->token_.is_blocked());
  gold_assert(*pindex >= 0);

  for (unsigned int i = static_cast<unsigned int>(*pindex);
       i < this->directories_->size();
       ++i)
    {
      const Search_directory* p = &this->directories_->at(i);
      Dir_cache* pdc = caches->lookup(p->name().c_str());
      gold_assert(pdc != NULL);
      for (std::vector<std::string>::const_iterator n = names.begin();
	   n != names.end();
	   ++n)
	{
	  if (pdc->find(*n))
	    {
	      *is_in_sysroot = p->is_in_sysroot();
	      *pindex = i;
	      *found_name = *n;
	      return p->name() + '/' + *n;
	    }
	  else
	    gold_debug(DEBUG_FILES, "Attempt to open %s/%s failed",
		       p->name().c_str(), (*n).c_str());
	}
    }

  *pindex = -2;
  return std::string();
}

// Search for a file in a directory list.  This is a low-level function and
// therefore can be used before options and parameters are set.

std::string
Dirsearch::find_file_in_dir_list(const std::string& name,
                                 const General_options::Dir_list& directories,
                                 const std::string& extra_search_dir)
{
  struct stat buf;
  std::string extra_name = extra_search_dir + '/' + name;

  if (stat(extra_name.c_str(), &buf) == 0)
    return extra_name;
  for (General_options::Dir_list::const_iterator dir = directories.begin();
       dir != directories.end();
       ++dir)
    {
      std::string full_name = dir->name() + '/' + name;
      if (stat(full_name.c_str(), &buf) == 0)
        return full_name;
    }
  return name;
}

} // End namespace gold.
@


1.14
log
@	* dirsearch.cc (Dir_cache::read_files): Ignore ENOTDIR errors.
@
text
@d28 1
d281 24
@


1.13
log
@	* dirsearch.cc (Dirsearch::find): Replace n1 and n2 parameters
	with name parameter.  Add found_name parameter.
	* fileread.cc (Input_file::find_file): Adjust code accordingly.
	* dirsearch.h (class Dirsearch): Update declaration.
@
text
@d69 3
a71 2
      // We ignore directories which do not exist.
      if (errno != ENOENT)
@


1.12
log
@	* dirsearch.cc (Dirsearch::initialize): Add all blockers before
	queueing any tasks.
	* gold.cc (queue_middle_gc_tasks): Likewise.  Fix final blocker.
	(queue_middle_tasks): Add all blockers before queueing any tasks.
	(queue_final_tasks): Likewise.
	* token.h (Task_token::add_blockers): New function.
	* object.h (Input_objects::number_of_relobjs): New function.
@
text
@d3 1
a3 1
// Copyright 2006, 2007, 2008, 2009, 2010 Free Software Foundation, Inc.
d244 3
a246 2
Dirsearch::find(const std::string& n1, const std::string& n2,
		bool* is_in_sysroot, int* pindex) const
d258 3
a260 1
      if (pdc->find(n1))
d262 3
a264 13
	  *is_in_sysroot = p->is_in_sysroot();
	  *pindex = i;
	  return p->name() + '/' + n1;
	}
      else
        gold_debug(DEBUG_FILES, "Attempt to open %s/%s failed",
                   p->name().c_str(), n1.c_str());

      if (!n2.empty())
        {
          if (pdc->find(n2))
            {
              *is_in_sysroot = p->is_in_sysroot();
d266 6
a271 5
              return p->name() + '/' + n2;
            }
          else
            gold_debug(DEBUG_FILES, "Attempt to open %s/%s failed",
                       p->name().c_str(), n2.c_str());
@


1.11
log
@	* readsyms.cc (Read_symbols::incompatible_warning): New function.
	(Read_symbols::requeue): New function.
	(Read_symbols::do_read_symbols): If make_elf_object fails because
	the target type is not configured, and the file was searched for,
	issue a warning and retry with the next directory.
	(Add_symbols::run): If the file has an incompatible format, and
	it was searched for, requeue the Read_symbols task.  On error,
	release the object.
	* readsyms.h (class Read_symbols): Add dirindex_ field.  Add
	dirindex parameter to constructor.  Change all callers.  Declare
	incompatible_warning and requeue.
	(class Add_symbols): Add dirpath_, dirindex_, mapfile_,
	input_argument_ and input_group_ fields.  Add them to
	constructor.  Change all callers.
	(class Read_script): Add dirindex_ field.  Add it to constructor.
	Change all callers.
	* archive.cc (Archive::setup): Remove input_objects parameter.
	Change all callers.
	(Archive::get_file_and_offset): Likewise.
	(Archive::read_all_symbols): Likewise.
	(Archive::read_symbols): Likewise.
	(Archive::get_elf_object_for_member): Remove input_objects
	parameter.  Add punconfigured parameter.  Change all callers.
	(Archive::add_symbols): Change return type to bool.  Check return
	value of include_member.
	(Archive::include_all_members): Likewise.
	(Archive::include_member): Change return type to bool.  Return
	false if first included object has incompatible target.  Set
	included_member_ field.
	(Add_archive_symbols::run): If add_symbols returns false, requeue
	Read_symbols task.
	* archive.h (class Archive): Add included_member_ field.
	Initialize it in constructor.  Add input_file and searched_for
	methods.  Update declarations.
	(class Add_archive_symbols): Add dirpath_, dirindex_, and
	input_argument_ fields.  Add them to constructor.  Change all
	callers.
	* script.cc: Include "target-select.h".
	(class Parser_closure): Add skip_on_incompatible_target_ and
	found_incompatible_target_ fields.  Add
	skip_on_incompatible_target parameter to constructor.  Change all
	callers.  Add methods skip_on_incompatible_target,
	clear_skip_on_incompatible_target, found_incompatible_target, and
	set_found_incompatible_target.
	(read_input_script): Add dirindex parameter.  Change all callers.
	If parser finds an incompatible target, requeue Read_symbols
	task.
	(script_set_symbol): Clear skip_on_incompatible_target in
	closure.
	(script_add_assertion, script_parse_option): Likewise.
	(script_start_sections, script_add_phdr): Likewise.
	(script_check_output_format): New function.
	* script.h (read_input_script): Update declaration.
	* script-c.h (script_check_output_format): Declare.
	* yyscript.y (file_cmd): Handle OUTPUT_FORMAT.
	(ignore_cmd): Remove OUTPUT_FORMAT.
	* fileread.cc (Input_file::Input_file): Add explicit this.
	(Input_file::will_search_for): New function.
	(Input_file::open): Add pindex parameter.  Change all callers.
	* fileread.h (class Input_file): Add input_file_argument method.
	Declare will_search_for.  Update declarations.
	* object.cc (make_elf_object): Add punconfigured parameter.
	Change all callers.
	* object.h (class Object): Make input_file public.  Add
	searched_for method.
	(make_elf_object): Update declaration.
	* dirsearch.cc (Dirsearch::find): Add pindex parameter.  Use it to
	restart search.
	* dirsearch.h (class Dirsearch): Update declaration.
	* options.h (class General_options): Add --warn-search-mismatch.
	* parameters.cc (Parameters::is_compatible_target): New function.
	* parameters.h (class Parameters): Declare is_compatible_target.
	* workqueue.cc (Workqueue::add_blocker): New function.
	* workqueue.h (class Workqueue): Declare add_blocker.
@
text
@d3 1
a3 1
// Copyright 2006, 2007, 2008 Free Software Foundation, Inc.
d232 1
d236 1
a236 4
    {
      this->token_.add_blocker();
      workqueue->queue(new Dir_cache_task(p->name().c_str(), this->token_));
    }
@


1.10
log
@Update copyright years.  Update language files.
@
text
@d223 2
d241 3
a243 2
// NOTE: we only log failed file-lookup attempts here.  Successfully
// lookups will eventually get logged in File_read::open.
d247 1
a247 1
		bool *is_in_sysroot) const
d250 1
d252 3
a254 4
  for (General_options::Dir_list::const_iterator p =
	 this->directories_->begin();
       p != this->directories_->end();
       ++p)
d256 1
d262 1
d274 1
d283 1
@


1.9
log
@From Craig Silverstein: Implement --debug=files to track file opens,
and implement --verbose as a synonym.
@
text
@d3 1
a3 1
// Copyright 2006, 2007 Free Software Foundation, Inc.
@


1.8
log
@Rewrite workqueue.  This version eliminates the master thread, and
reduces the amount of locking required to find a new thread to run.
@
text
@d30 1
d239 3
d260 14
a273 4
      if (!n2.empty() && pdc->find(n2))
	{
	  *is_in_sysroot = p->is_in_sysroot();
	  return p->name() + '/' + n2;
@


1.7
log
@Add threading support.
@
text
@d31 2
d174 2
a175 2
  Is_runnable_type
  is_runnable(gold::Workqueue*);
d177 2
a178 2
  gold::Task_locker*
  locks(gold::Workqueue*);
d194 2
a195 2
gold::Task::Is_runnable_type
Dir_cache_task::is_runnable(gold::Workqueue*)
d197 1
a197 1
  return IS_RUNNABLE;
d203 2
a204 2
gold::Task_locker*
Dir_cache_task::locks(gold::Workqueue* workqueue)
d206 1
a206 1
  return new gold::Task_locker_block(this->token_, workqueue);
@


1.6
log
@Run all error handling through an Errors object.  Delete output file
on error.
@
text
@d161 1
a161 1
Dir_caches caches;
d172 2
a173 1
  Is_runnable_type is_runnable(gold::Workqueue*);
d175 2
a176 1
  gold::Task_locker* locks(gold::Workqueue*);
d178 6
a183 1
  void run(gold::Workqueue*);
d212 1
a212 1
  caches.add(this->dir_);
d224 2
d247 1
a247 1
      Dir_cache* pdc = caches.lookup(p->name().c_str());
@


1.5
log
@Full support for --sysroot.
@
text
@d26 1
d67 4
a70 7
      if (errno == ENOENT)
	return;

      char *s = NULL;
      if (asprintf(&s, _("can not read directory %s"), this->dirname_) < 0)
	gold::gold_nomem();
      gold::gold_fatal(s, true);
d78 2
a79 1
    gold::gold_fatal("closedir failed", true);
@


1.4
log
@Add licensing text to every source file.
@
text
@a213 13
Dirsearch::Dirsearch()
  : directories_(), token_()
{
}

void
Dirsearch::add(Workqueue* workqueue, const char* d)
{
  this->directories_.push_back(d);
  this->token_.add_blocker();
  workqueue->queue(new Dir_cache_task(d, this->token_));
}

d215 2
a216 1
Dirsearch::add(Workqueue* workqueue, const General_options::Dir_list& list)
d218 3
a220 2
  for (General_options::Dir_list::const_iterator p = list.begin();
       p != list.end();
d222 4
a225 1
    this->add(workqueue, *p);
d229 2
a230 1
Dirsearch::find(const std::string& n1, const std::string& n2) const
d234 3
a236 2
  for (std::list<const char*>::const_iterator p = this->directories_.begin();
       p != this->directories_.end();
d239 1
a239 1
      Dir_cache* pdc = caches.lookup(*p);
d242 4
a245 1
	return std::string(*p) + '/' + n1;
d247 4
a250 1
	return std::string(*p) + '/' + n2;
@


1.3
log
@Hash tables, dynamic section, i386 PLT, gold_assert.
@
text
@d3 20
@


1.2
log
@Include <cassert>
@
text
@a5 1
#include <cassert>
d127 1
a127 1
    assert(p.second);
d219 1
a219 1
  assert(!this->token_.is_blocked());
d226 1
a226 1
      assert(pdc != NULL);
@


1.1
log
@Initial CVS checkin of gold
@
text
@d6 1
@

