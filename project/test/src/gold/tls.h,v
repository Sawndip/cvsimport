head	1.4;
access;
symbols
	binutils-2_24-branch:1.4.0.20
	binutils-2_24-branchpoint:1.4
	binutils-2_21_1:1.4
	binutils-2_23_2:1.4
	binutils-2_23_1:1.4
	binutils-2_23:1.4
	binutils-2_23-branch:1.4.0.18
	binutils-2_23-branchpoint:1.4
	binutils-2_22_branch:1.4.0.16
	binutils-2_22:1.4
	binutils-2_22-branch:1.4.0.14
	binutils-2_22-branchpoint:1.4
	binutils-2_21:1.4
	binutils-2_21-branch:1.4.0.12
	binutils-2_21-branchpoint:1.4
	binutils-2_20_1:1.4
	binutils-2_20:1.4
	binutils-arc-20081103-branch:1.4.0.10
	binutils-arc-20081103-branchpoint:1.4
	binutils-2_20-branch:1.4.0.8
	binutils-2_20-branchpoint:1.4
	dje-cgen-play1-branch:1.4.0.6
	dje-cgen-play1-branchpoint:1.4
	arc-20081103-branch:1.4.0.4
	arc-20081103-branchpoint:1.4
	binutils-2_19_1:1.4
	binutils-2_19:1.4
	binutils-2_19-branch:1.4.0.2
	binutils-2_19-branchpoint:1.4
	binutils_latest_snapshot:1.4
	added-to-binutils:1.4;
locks; strict;
comment	@ * @;


1.4
date	2008.03.13.21.04.21;	author iant;	state Exp;
branches;
next	1.3;

1.3
date	2007.12.20.21.21.24;	author iant;	state Exp;
branches;
next	1.2;

1.2
date	2007.10.14.06.49.14;	author iant;	state Exp;
branches;
next	1.1;

1.1
date	2007.10.08.05.12.59;	author iant;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Update copyright years.  Update language files.
@
text
@// tls.h -- Thread-Local Storage utility routines for gold   -*- C++ -*-

// Copyright 2006, 2007, 2008 Free Software Foundation, Inc.
// Written by Ian Lance Taylor <iant@@google.com>.

// This file is part of gold.

// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,
// MA 02110-1301, USA.

#ifndef GOLD_TLS_H
#define GOLD_TLS_H

#include "elfcpp.h"
#include "reloc.h"

namespace gold
{

namespace tls
{

// This is used for relocations that can be converted to a different,
// more efficient type of relocation.

enum Tls_optimization
{
  TLSOPT_NONE,    // Can not convert this relocation to a more efficient one.
  TLSOPT_TO_LD,   // Can convert General Dynamic to Local Dynamic.
  TLSOPT_TO_LE,   // Can convert GD or LD to Local-Exec.
  TLSOPT_TO_IE,   // Can convert GD or LD or LE to Initial-Exec.
};

// Check the range for a TLS relocation.  This is inlined for efficiency.

template<int size, bool big_endian>
inline void
check_range(const Relocate_info<size, big_endian>* relinfo,
            size_t relnum,
            typename elfcpp::Elf_types<size>::Elf_Addr rel_offset,
            section_size_type view_size, int off)
{
  typename elfcpp::Elf_types<size>::Elf_Addr offset = rel_offset + off;
  // Elf_Addr is unsigned, so this also tests for signed offset < 0.
  if (offset > view_size)
    gold_error_at_location(relinfo, relnum, rel_offset,
			   _("TLS relocation out of range"));
}

// Check the validity of a TLS relocation.  This is like assert.

template<int size, bool big_endian>
inline void
check_tls(const Relocate_info<size, big_endian>* relinfo,
          size_t relnum,
          typename elfcpp::Elf_types<size>::Elf_Addr rel_offset,
          bool valid)
{
  if (!valid)
    gold_error_at_location(relinfo, relnum, rel_offset,
			   _("TLS relocation against invalid instruction"));
}


} // End namespace tls.

} // End namespace gold.

#endif // !defined(GOLD_TLS_H)
@


1.3
log
@Convert more instances of off_t to be 32-bit types.
@
text
@d3 1
a3 1
// Copyright 2006, 2007 Free Software Foundation, Inc.
@


1.2
log
@Run all error handling through an Errors object.  Delete output file
on error.
@
text
@d53 1
a53 1
            off_t view_size, off_t off)
d55 3
a57 2
  off_t offset = rel_offset + off;
  if (offset < 0 || offset > view_size)
@


1.1
log
@From Craig Silverstein: add tls.h, use it in i386.cc.
@
text
@d57 2
a58 6
    {
      fprintf(stderr, _("%s: %s: TLS relocation out of range\n"),
	      program_name,
	      relinfo->location(relnum, rel_offset).c_str());
      gold_exit(false);
    }
d71 2
a72 7
    {
      fprintf(stderr,
	      _("%s: %s: TLS relocation against invalid instruction\n"),
	      program_name,
	      relinfo->location(relnum, rel_offset).c_str());
      gold_exit(false);
    }
@

