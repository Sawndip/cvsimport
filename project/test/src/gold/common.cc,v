head	1.29;
access;
symbols
	binutils-2_24-branch:1.29.0.4
	binutils-2_24-branchpoint:1.29
	binutils-2_21_1:1.26
	binutils-2_23_2:1.29
	binutils-2_23_1:1.29
	binutils-2_23:1.29
	binutils-2_23-branch:1.29.0.2
	binutils-2_23-branchpoint:1.29
	binutils-2_22_branch:1.28.0.4
	binutils-2_22:1.28
	binutils-2_22-branch:1.28.0.2
	binutils-2_22-branchpoint:1.28
	binutils-2_21:1.26
	binutils-2_21-branch:1.26.0.2
	binutils-2_21-branchpoint:1.26
	binutils-2_20_1:1.18.4.1
	binutils-2_20:1.18
	binutils-arc-20081103-branch:1.17.0.6
	binutils-arc-20081103-branchpoint:1.17
	binutils-2_20-branch:1.18.0.4
	binutils-2_20-branchpoint:1.18
	dje-cgen-play1-branch:1.18.0.2
	dje-cgen-play1-branchpoint:1.18
	arc-20081103-branch:1.17.0.4
	arc-20081103-branchpoint:1.17
	binutils-2_19_1:1.17
	binutils-2_19:1.17
	binutils-2_19-branch:1.17.0.2
	binutils-2_19-branchpoint:1.17
	binutils_latest_snapshot:1.29
	added-to-binutils:1.14;
locks; strict;
comment	@// @;


1.29
date	2012.07.11.14.18.40;	author ian;	state Exp;
branches;
next	1.28;

1.28
date	2011.06.08.04.43.28;	author ccoutant;	state Exp;
branches;
next	1.27;

1.27
date	2011.06.08.04.05.24;	author ccoutant;	state Exp;
branches;
next	1.26;

1.26
date	2010.08.25.08.36.54;	author nickc;	state Exp;
branches;
next	1.25;

1.25
date	2010.08.18.18.33.05;	author ccoutant;	state Exp;
branches;
next	1.24;

1.24
date	2010.08.03.14.07.13;	author ian;	state Exp;
branches;
next	1.23;

1.23
date	2010.02.12.04.33.53;	author ian;	state Exp;
branches;
next	1.22;

1.22
date	2009.12.31.05.07.21;	author ian;	state Exp;
branches;
next	1.21;

1.21
date	2009.12.31.01.57.55;	author ian;	state Exp;
branches;
next	1.20;

1.20
date	2009.12.30.06.57.17;	author ian;	state Exp;
branches;
next	1.19;

1.19
date	2009.11.04.15.56.03;	author ian;	state Exp;
branches;
next	1.18;

1.18
date	2009.06.22.06.51.53;	author ian;	state Exp;
branches
	1.18.4.1;
next	1.17;

1.17
date	2008.05.21.21.37.44;	author ian;	state Exp;
branches;
next	1.16;

1.16
date	2008.04.17.07.12.00;	author ian;	state Exp;
branches;
next	1.15;

1.15
date	2008.03.27.19.57.41;	author ian;	state Exp;
branches;
next	1.14;

1.14
date	2008.03.13.21.04.21;	author iant;	state Exp;
branches;
next	1.13;

1.13
date	2008.02.29.19.19.17;	author iant;	state Exp;
branches;
next	1.12;

1.12
date	2008.02.28.00.18.24;	author iant;	state Exp;
branches;
next	1.11;

1.11
date	2007.12.14.19.00.21;	author iant;	state Exp;
branches;
next	1.10;

1.10
date	2007.11.29.20.10.16;	author iant;	state Exp;
branches;
next	1.9;

1.9
date	2007.11.22.00.05.51;	author iant;	state Exp;
branches;
next	1.8;

1.8
date	2007.09.26.07.01.34;	author iant;	state Exp;
branches;
next	1.7;

1.7
date	2007.09.22.21.02.10;	author iant;	state Exp;
branches;
next	1.6;

1.6
date	2007.09.19.06.01.35;	author iant;	state Exp;
branches;
next	1.5;

1.5
date	2006.11.29.17.56.40;	author iant;	state Exp;
branches;
next	1.4;

1.4
date	2006.11.14.19.21.05;	author iant;	state Exp;
branches;
next	1.3;

1.3
date	2006.11.06.22.46.08;	author iant;	state Exp;
branches;
next	1.2;

1.2
date	2006.11.03.18.38.43;	author iant;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.03.18.26.10;	author iant;	state Exp;
branches;
next	;

1.18.4.1
date	2009.11.04.15.56.34;	author ian;	state Exp;
branches;
next	;


desc
@@


1.29
log
@	* arm.cc (Arm_relocate_functions::abs16): Remove unused typedef.
	(Arm_exidx_cantunwind::do_fixed_endian_write): Likewise.
	(Target_arm::scan_reloc_for_stub): Likewise.
	* common.cc (Symbol_table::do_allocate_commons_list): Likewise.
	* dwarf_reader.cc (Dwarf_die::skip_attributes): Likewise.
	* ehframe.cc (Eh_frame::do_add_ehframe_input_section): Likewise.
	* incremental.cc (Sized_incr_dynobj::do_add_symbols): Likewise.
	* powerpc.cc (Target_powerpc::relocate_tls): Likewise.
@
text
@// common.cc -- handle common symbols for gold

// Copyright 2006, 2007, 2008, 2009, 2010, 2011, 2012
// Free Software Foundation, Inc.
// Written by Ian Lance Taylor <iant@@google.com>.

// This file is part of gold.

// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,
// MA 02110-1301, USA.

#include "gold.h"

#include <algorithm>

#include "workqueue.h"
#include "mapfile.h"
#include "layout.h"
#include "output.h"
#include "symtab.h"
#include "common.h"

namespace gold
{

// Allocate_commons_task methods.

// This task allocates the common symbols.  We arrange to run it
// before anything else which needs to access the symbol table.

Task_token*
Allocate_commons_task::is_runnable()
{
  return NULL;
}

// Release a blocker.

void
Allocate_commons_task::locks(Task_locker* tl)
{
  tl->add(this, this->blocker_);
}

// Allocate the common symbols.

void
Allocate_commons_task::run(Workqueue*)
{
  this->symtab_->allocate_commons(this->layout_, this->mapfile_);
}

// This class is used to sort the common symbol.  We normally put the
// larger common symbols first.  This can be changed by using
// --sort-commons, which tells the linker to sort by alignment.

template<int size>
class Sort_commons
{
 public:
  Sort_commons(const Symbol_table* symtab,
	       Symbol_table::Sort_commons_order sort_order)
    : symtab_(symtab), sort_order_(sort_order)
  { }

  bool operator()(const Symbol* a, const Symbol* b) const;

 private:
  // The symbol table.
  const Symbol_table* symtab_;
  // How to sort.
  Symbol_table::Sort_commons_order sort_order_;
};

template<int size>
bool
Sort_commons<size>::operator()(const Symbol* pa, const Symbol* pb) const
{
  if (pa == NULL)
    return false;
  if (pb == NULL)
    return true;

  const Symbol_table* symtab = this->symtab_;
  const Sized_symbol<size>* psa = symtab->get_sized_symbol<size>(pa);
  const Sized_symbol<size>* psb = symtab->get_sized_symbol<size>(pb);

  // The size.
  typename Sized_symbol<size>::Size_type sa = psa->symsize();
  typename Sized_symbol<size>::Size_type sb = psb->symsize();

  // The alignment.
  typename Sized_symbol<size>::Value_type aa = psa->value();
  typename Sized_symbol<size>::Value_type ab = psb->value();

  if (this->sort_order_ == Symbol_table::SORT_COMMONS_BY_ALIGNMENT_DESCENDING)
    {
      if (aa < ab)
	return false;
      else if (ab < aa)
	return true;
    }
  else if (this->sort_order_
	   == Symbol_table::SORT_COMMONS_BY_ALIGNMENT_ASCENDING)
    {
      if (aa < ab)
	return true;
      else if (ab < aa)
	return false;
    }
  else
    gold_assert(this->sort_order_
		== Symbol_table::SORT_COMMONS_BY_SIZE_DESCENDING);

  // Sort by descending size.
  if (sa < sb)
    return false;
  else if (sb < sa)
    return true;

  if (this->sort_order_ == Symbol_table::SORT_COMMONS_BY_SIZE_DESCENDING)
    {
      // When the symbols are the same size, we sort them by
      // alignment, largest alignment first.
      if (aa < ab)
	return false;
      else if (ab < aa)
	return true;
    }

  // Otherwise we stabilize the sort by sorting by name.
  return strcmp(psa->name(), psb->name()) < 0;
}

// Allocate the common symbols.

void
Symbol_table::allocate_commons(Layout* layout, Mapfile* mapfile)
{
  Sort_commons_order sort_order;
  if (!parameters->options().user_set_sort_common())
    sort_order = SORT_COMMONS_BY_SIZE_DESCENDING;
  else
    {
      const char* order = parameters->options().sort_common();
      if (*order == '\0' || strcmp(order, "descending") == 0)
	sort_order = SORT_COMMONS_BY_ALIGNMENT_DESCENDING;
      else if (strcmp(order, "ascending") == 0)
	sort_order = SORT_COMMONS_BY_ALIGNMENT_ASCENDING;
      else
	{
	  gold_error("invalid --sort-common argument: %s", order);
	  sort_order = SORT_COMMONS_BY_SIZE_DESCENDING;
	}
    }

  if (parameters->target().get_size() == 32)
    {
#if defined(HAVE_TARGET_32_LITTLE) || defined(HAVE_TARGET_32_BIG)
      this->do_allocate_commons<32>(layout, mapfile, sort_order);
#else
      gold_unreachable();
#endif
    }
  else if (parameters->target().get_size() == 64)
    {
#if defined(HAVE_TARGET_64_LITTLE) || defined(HAVE_TARGET_64_BIG)
      this->do_allocate_commons<64>(layout, mapfile, sort_order);
#else
      gold_unreachable();
#endif
    }
  else
    gold_unreachable();
}

// Allocated the common symbols, sized version.

template<int size>
void
Symbol_table::do_allocate_commons(Layout* layout, Mapfile* mapfile,
				  Sort_commons_order sort_order)
{
  if (!this->commons_.empty())
    this->do_allocate_commons_list<size>(layout, COMMONS_NORMAL,
					 &this->commons_, mapfile,
					 sort_order);
  if (!this->tls_commons_.empty())
    this->do_allocate_commons_list<size>(layout, COMMONS_TLS,
					 &this->tls_commons_, mapfile,
					 sort_order);
  if (!this->small_commons_.empty())
    this->do_allocate_commons_list<size>(layout, COMMONS_SMALL,
					 &this->small_commons_, mapfile,
					 sort_order);
  if (!this->large_commons_.empty())
    this->do_allocate_commons_list<size>(layout, COMMONS_LARGE,
					 &this->large_commons_, mapfile,
					 sort_order);
}

// Allocate the common symbols in a list.  IS_TLS indicates whether
// these are TLS common symbols.

template<int size>
void
Symbol_table::do_allocate_commons_list(
    Layout* layout,
    Commons_section_type commons_section_type,
    Commons_type* commons,
    Mapfile* mapfile,
    Sort_commons_order sort_order)
{
  // We've kept a list of all the common symbols.  But the symbol may
  // have been resolved to a defined symbol by now.  And it may be a
  // forwarder.  First remove all non-common symbols.
  bool any = false;
  uint64_t addralign = 0;
  for (Commons_type::iterator p = commons->begin();
       p != commons->end();
       ++p)
    {
      Symbol* sym = *p;
      if (sym->is_forwarder())
	{
	  sym = this->resolve_forwards(sym);
	  *p = sym;
	}
      if (!sym->is_common())
	*p = NULL;
      else
	{
	  any = true;
	  Sized_symbol<size>* ssym = this->get_sized_symbol<size>(sym);
	  if (ssym->value() > addralign)
	    addralign = ssym->value();
	}
    }
  if (!any)
    return;

  // Sort the common symbols.
  std::sort(commons->begin(), commons->end(),
	    Sort_commons<size>(this, sort_order));

  // Place them in a newly allocated BSS section.
  elfcpp::Elf_Xword flags = elfcpp::SHF_WRITE | elfcpp::SHF_ALLOC;
  const char* name;
  const char* ds_name;
  switch (commons_section_type)
    {
    case COMMONS_NORMAL:
      name = ".bss";
      ds_name = "** common";
      break;
    case COMMONS_TLS:
      flags |= elfcpp::SHF_TLS;
      name = ".tbss";
      ds_name = "** tls common";
      break;
    case COMMONS_SMALL:
      flags |= parameters->target().small_common_section_flags();
      name = ".sbss";
      ds_name = "** small common";
      break;
    case COMMONS_LARGE:
      flags |= parameters->target().large_common_section_flags();
      name = ".lbss";
      ds_name = "** large common";
      break;
    default:
      gold_unreachable();
    }

  Output_data_space* poc;
  Output_section* os;

  if (!parameters->incremental_update())
    {
      poc = new Output_data_space(addralign, ds_name);
      os = layout->add_output_section_data(name, elfcpp::SHT_NOBITS, flags,
					   poc, ORDER_INVALID, false);
    }
  else
    {
      // When doing an incremental update, we need to allocate each common
      // directly from the output section's free list.
      poc = NULL;
      os = layout->find_output_section(name);
    }

  if (os != NULL)
    {
      if (commons_section_type == COMMONS_SMALL)
	os->set_is_small_section();
      else if (commons_section_type == COMMONS_LARGE)
	os->set_is_large_section();
    }

  // Allocate them all.

  off_t off = 0;
  for (Commons_type::iterator p = commons->begin();
       p != commons->end();
       ++p)
    {
      Symbol* sym = *p;
      if (sym == NULL)
	break;

      // Because we followed forwarding symbols above, but we didn't
      // do it reliably before adding symbols to the list, it is
      // possible for us to have the same symbol on the list twice.
      // This can happen in the horrible case where a program defines
      // a common symbol with the same name as a versioned libc
      // symbol.  That will show up here as a symbol which has already
      // been allocated and is therefore no longer a common symbol.
      if (!sym->is_common())
	continue;

      Sized_symbol<size>* ssym = this->get_sized_symbol<size>(sym);

      // Record the symbol in the map file now, before we change its
      // value.  Pass the size in separately so that we don't have to
      // templatize the map code, which is not performance sensitive.
      if (mapfile != NULL)
	mapfile->report_allocate_common(sym, ssym->symsize());

      if (poc != NULL)
	{
	  off = align_address(off, ssym->value());
	  ssym->allocate_common(poc, off);
	  off += ssym->symsize();
	}
      else
	{
	  // For an incremental update, allocate from the free list.
	  off = os->allocate(ssym->symsize(), ssym->value());
	  if (off == -1)
	    gold_fallback(_("out of patch space in section %s; "
			    "relink with --incremental-full"),
			  os->name());
	  ssym->allocate_common(os, off);
	}
    }

  if (poc != NULL)
    poc->set_current_data_size(off);

  commons->clear();
}

} // End namespace gold.
@


1.28
log
@	* common.cc (Symbol_table::do_allocate_commons_list): Call
	gold_fallback.
	* errors.cc (Errors::fatal): Adjust call to gold_exit.
	(Errors::fallback): New function.
	(gold_fallback): New function.
	* errors.h (Errors::fallback): New function.
	* gold.cc (gold_exit): Change status parameter to enum; adjust
	all callers.
	(queue_initial_tasks): Call gold_fallback.
	* gold.h: Include cstdlib.
	(Exit_status): New enum type.
	(gold_exit): Change status parameter to enum.
	(gold_fallback): New function.
	* layout.cc (Layout::set_section_offsets): Call gold_fallback.
	(Layout::create_symtab_sections): Likewise.
	(Layout::create_shdrs): Likewise.
	* main.cc (main): Adjust call to gold_exit.
	* output.cc (Output_data_got::add_got_entry): Call gold_fallback.
	(Output_data_got::add_got_entry_pair): Likewise.
	(Output_section::add_input_section): Likewise.
	(Output_section::add_output_section_data): Likewise.
	(Output_segment::set_section_list_addresses): Likewise.
	* x86_64.cc (Output_data_plt_x86_64::add_entry): Likewise.
@
text
@d3 2
a4 1
// Copyright 2006, 2007, 2008, 2009, 2010 Free Software Foundation, Inc.
a225 3
  typedef typename Sized_symbol<size>::Value_type Value_type;
  typedef typename Sized_symbol<size>::Size_type Size_type;

@


1.27
log
@	* common.cc (Symbol_table::do_allocate_commons_list): For incremental
	update, allocate common from bss section's free list.
	* incremental-dump.cc (dump_incremental_inputs): Print flag for
	linker-defined symbols.
	* incremental.cc (Sized_incremental_binary::do_process_got_plt):
	Skip GOT and PLT entries that are no longer referenced.
	(Output_section_incremental_inputs::write_info_blocks): Mark
	linker-defined symbols.
	(Sized_incr_relobj::do_add_symbols): Process linker-defined symbols.
	* output.cc (Output_section::allocate): New function.
	* output.h (Output_section::allocate): New function.
	* resolve.cc (Symbol_table::report_resolve_problem): Add case for
	linker-defined symbols.
	(Symbol::override_base_with_special): Copy is_predefined_ flag.
	* symtab.cc (Symbol::init_fields): Initialize is_predefined_ flag.
	(Symbol::init_base_output_data): Likewise.
	(Symbol::init_base_output_segment): Likewise.
	(Symbol::init_base_constant): Likewise.
	(Sized_symbol::init_output_data): Likewise.
	(Sized_symbol::init_output_segment): Likewise.
	(Sized_symbol::init_constant): Likewise.
	(Symbol_table::do_define_in_output_data): Likewise.
	(Symbol_table::do_define_in_output_segment): Likewise.
	(Symbol_table::do_define_as_constant): Likewise.
	* symtab.h (Symbol::is_predefined): New function.
	(Symbol::init_base_output_data): Add is_predefined parameter.
	(Symbol::init_base_output_segment): Likewise.
	(Symbol::init_base_constant): Likewise.
	(Symbol::is_predefined_): New data member.
	(Sized_symbol::init_output_data): Add is_predefined parameter.
	(Sized_symbol::init_output_segment): Likewise.
	(Sized_symbol::init_constant): Likewise.
	(enum Symbol_table::Defined): Add INCREMENTAL_BASE.
@
text
@d354 3
a356 3
	    gold_fatal(_("out of patch space in section %s; "
			 "relink with --incremental-full"),
			 os->name());
@


1.26
log
@        * archive.cc: Formatting fixes: Remove whitespace between
        typename and following asterisk.  Remove whitespace between
        function name and opening parenthesis.
        * archive.h: Likewise.
        * arm.cc: Likewise.
        * attributes.cc: Likewise.
        * attributes.h: Likewise.
        * common.cc: Likewise.
        * copy-relocs.cc: Likewise.
        * dirsearch.h: Likewise.
        * dynobj.cc: Likewise.
        * ehframe.cc: Likewise.
        * ehframe.h: Likewise.
        * expression.cc: Likewise.
        * fileread.cc: Likewise.
        * fileread.h: Likewise.
        * gc.h: Likewise.
        * gold-threads.cc: Likewise.
        * gold.cc: Likewise.
        * i386.cc: Likewise.
        * icf.h: Likewise.
        * incremental-dump.cc: Likewise.
        * incremental.cc: Likewise.
        * layout.cc: Likewise.
        * layout.h: Likewise.
        * main.cc: Likewise.
        * merge.cc: Likewise.
        * merge.h: Likewise.
        * object.cc: Likewise.
        * object.h: Likewise.
        * options.cc: Likewise.
        * options.h: Likewise.
        * output.cc: Likewise.
        * output.h: Likewise.
        * plugin.cc: Likewise.
        * plugin.h: Likewise.
        * powerpc.cc: Likewise.
        * reloc.cc: Likewise.
        * script-c.h: Likewise.
        * script-sections.cc: Likewise.
        * script.cc: Likewise.
        * stringpool.cc: Likewise.
        * symtab.cc: Likewise.
        * symtab.h: Likewise.
        * target.cc: Likewise.
        * timer.cc: Likewise.
        * timer.h: Likewise.
        * version.cc: Likewise.
        * x86_64.cc: Likewise.
@
text
@d289 17
a305 6
  Output_data_space* poc = new Output_data_space(addralign, ds_name);
  Output_section* os = layout->add_output_section_data(name,
						       elfcpp::SHT_NOBITS,
						       flags, poc,
						       ORDER_INVALID,
						       false);
d343 16
a358 3
      off = align_address(off, ssym->value());
      ssym->allocate_common(poc, off);
      off += ssym->symsize();
d361 2
a362 1
  poc->set_current_data_size(off);
@


1.25
log
@	* common.cc (Sort_commons::operator()): Remove unnecessary code.
@
text
@d289 2
a290 2
  Output_data_space *poc = new Output_data_space(addralign, ds_name);
  Output_section *os = layout->add_output_section_data(name,
@


1.24
log
@2010-08-03  Ian Lance Taylor  <iant@@google.com>

	PR 11805
	* layout.h (enum Output_section_order): Define.
	(class Layout): Update declarations.
	* layout.cc (Layout::get_output_section): Add order parameter.
	Remove is_interp, is_dynamic_linker_section, is_last_relro, and
	is_first_non_relro parameters.  Change all callers.
	(Layout::choose_output_section): Likewise.
	(Layout::add_output_section_data): Likewise.
	(Layout::make_output_section): Likewise.  Set order.
	(Layout::default_section_order): New function.
	(Layout::layout_eh_frame): Call add_output_section_to_nonload.
	* output.cc (Output_section::Output_section): Initialize order_.
	Don't initialize deleted fields.
	(Output_segment::Output_segment): Don't initialize deleted
	fields.
	(Output_segment::add_output_section_to_load): New function
	replacing add_output_section.  Change all callers to call this or
	add_output_section_to_nonload.
	(Output_segment::add_output_section_to_nonload): New function.
	(Output_segment::remove_output_section): Rewrite.
	(Output_segment::add_initial_output_data): Likewise.
	(Output_segment::has_any_data_sections): Likewise.
	(Output_segment::is_first_section_relro): Likewise.
	(Output_segment::maximum_alignment): Likewise.
	(Output_segment::has_dynamic_reloc): New function replacing
	dynamic_reloc_count.  Change all callers.
	(Output_segment::has_dynamic_reloc_list): New function replacing
	dynamic_reloc_count_list.  Change all callers.
	(Output_segment::set_section_addresses): Rewrite.
	(Output_segment::set_offset): Rewrite.
	(Output_segment::find_first_and_last_list): Remove.
	(Output_segment::set_tls_offsets): Rewrite.
	(Output_segment::first_section_load_address): Likewise.
	(Output_segment::output_section_count): Likewise.
	(Output_segment::section_with_lowest_load_address): Likewise.
	(Output_segment::write_section_headers): Likewise.
	(Output_segment::print_sections_to_map): Likewise.
	* output.h (class Output_data): Remove dynamic_reloc_count_
	field.  Add has_dynamic_reloc_ field.  Make bools into bitfields.
	(Output_data::add_dynamic_reloc): Rewrite.
	(Output_data::has_dynamic_reloc): New function.
	(Output_data::dynamic_reloc_count): Remove.
	(class Output_section): Add order_ field.  Remvoe is_relro_local_,
	is_last_relro_, is_first_non_relro_, is_interp_,
	is_dynamic_linker_section_ fields.  Add order and set_order
	functions.  Remove is_relro_local, set_is_relro_local,
	is_last_relro, set_is_last_relro, is_first_non_relro,
	set_is_first_non_relro functions, is_interp, set_is_interp,
	is_dynamic_linker_section, and set_is_dynamic_linker_section
	functions.
	(class Output_segment): Change Output_data_list from std::list to
	std:;vector.  Add output_lists_ field.  Remove output_data_ and
	output_bss_ fields.  Update declarations.
@
text
@d91 1
a91 10
    {
      if (pb == NULL)
	{
	  // Stabilize sort.  The order really doesn't matter, because
	  // these entries will be discarded, but we want to return
	  // the same result every time we compare pa and pb.
	  return pa < pb;
	}
      return false;
    }
@


1.23
log
@	* gold.cc (queue_middle_gc_tasks): Use a separate blocker for each
	Read_relocs task.
	(queue_middle_tasks): Likewise, and also for Scan_relocs.  Run
	Allocate_commons_task first.
	* reloc.cc (Read_relocs::run): Pass next_blocker_ down to next
	task, rather than symtab_lock_.
	(Gc_process_relocs::~Gc_process_relocs): New function.
	(Gc_process_relocs::is_runnable): Check this_blocker_.
	(Gc_process_relocs::locks): Use next_blocker_ rather than
	blocker_.
	(Scan_relocs::~Scan_relocs): New function.
	(Scan_relocs::is_runnable): Check this_blocker_ rather than
	symtab_lock_.
	(Scan_relocs::locks): Drop symtab_lock_ and blocker_.  Add
	next_blocker_.
	* reloc.h (class Read_relocs): Drop symtab_lock_ and blocker_
	fields.  Add this_blocker_ and next_blocker_ fields.  Adjust
	constructor accordingly.
	(class Gc_process_relocs): Likewise.
	(class Scan_relocs): Likewise.
	* common.h (class Allocate_commons_task): Remove symtab_lock_
	field, and corresponding constructor parameter.
	* common.cc (Allocate_commons_tasK::is_runnable): Remove use of
	symtab_lock_.
	(Allocate_commons_task::locks): Likewise.
@
text
@d301 3
a303 2
						       flags, poc, false,
						       false, false, false);
@


1.22
log
@	PR 10979
	* common.cc (Sort_commons::operator()): Stabilize sort when both
	entries are NULL.
	(Symbol_table::do_allocate_commons_list): When allocating common
	symbols, skip a symbol which is no longer common.
	* symtab.h (Symbol::is_common): Test whether the symbol comes from
	an object before checking its type.
	* testsuite/common_test_2.c: New file.
	* testsuite/common_test_3.c: New file.
	* testsuite/Makefile.am (check_PROGRAMS): Add common_test_2.
	(common_test_2_SOURCES, common_test_2_DEPENDENCIES): Define.
	(common_test_2_LDFLAGS, common_test_2_LDADD): Define.
	(common_test_2_pic.o, common_test_2.so): New targets.
	(common_test_3_pic.o, common_test_3.so): New targets.
	* testsuite/Makefile.in: Rebuild.
@
text
@d3 1
a3 1
// Copyright 2006, 2007, 2008 Free Software Foundation, Inc.
d39 2
a40 2
// This task allocates the common symbols.  We need a lock on the
// symbol table.
a44 2
  if (!this->symtab_lock_->is_writable())
    return this->symtab_lock_;
d48 1
a48 1
// Return the locks we hold: one on the symbol table, and one blocker.
a53 1
  tl->add(this, this->symtab_lock_);
@


1.21
log
@	PR 10931
	* options.h (class General_options): Add --sort-common option.
	* symtab.h (class Symbol_table): Define Sort_commons_order enum.
	* common.cc (Sort_common): Add sort_order parameter to
	constructor.  Add sort_order_ field.
	(Sort_commons::operator): Check sort_order_.
	(Symbol_table::allocate_commons): Determine the sort order.
	(Symbol_table::do_allocate_commons): Add sort_order parameter.
	Change all callers.
	(Symbol_table::do_allocate_commons_list): Likewise.
@
text
@d94 10
a103 1
    return false;
d324 11
@


1.20
log
@	* layout.cc (Layout::Layout): Initialize increase_relro_.
	(Layout::get_output_section): Add is_relro, is_last_relro, and
	is_first_non_relro parameters.  Change all callers.
	(Layout::choose_output_section): Likewise.
	(Layout::add_output_section_data): Likewise.
	(Layout::make_output_section): Likewise.
	(Layout::set_segment_offsets): Clear increase_relro when using a
	linker script.
	* layout.h (class Layout): Add increase_relro method.  Add
	increase_relro_ field.  Update declarations.
	* output.cc (Output_section::Output_section): Initialize
	is_last_relro_ and is_first_non_relro_.
	(Output_segment::add_output_section): Group relro sections is
	do_sort is true.  Handle is_last_relro and is_first_non_relro.
	(Output_segment::maximum_alignment): Remove relro handling.
	(Output_segment::set_section_addresses): Add increase_relro
	parameter.  Change all callers.  Add initial alignment to align
	relro sections on separate page.  Remove old relro handling.
	(Output_segment::set_section_list_addresses): Remove in_relro
	parameter.  Change all callers.
	(Output_segment::set_offset): Add increase parameter.  Change all
	callers.  Remove old relro handling.
	* output.h (class Output_section): Add new methods: is_last_relro,
	set_is_last_relro, is_first_non_relro, set_is_first_non_relro.
	Add is_last_relro_ and is_first_non_relro_ fields.
	* i386.cc (Target_i386::got_section): Don't call set_is_relro.
	Create separate .got.plt section.  Call increase_relro.
	* x86_64.cc (Target_x86_64::got_section): Likewise.
	* testsuite/relro_script_test.t: Add .got.plt.
@
text
@d67 3
a69 2
// This class is used to sort the common symbol by size.  We put the
// larger common symbols first.
d75 3
a77 2
  Sort_commons(const Symbol_table* symtab)
    : symtab_(symtab)
d83 1
d85 2
d102 1
a102 1
  // Sort by largest size first.
d105 25
d135 9
a143 8
  // When the symbols are the same size, we sort them by alignment,
  // largest alignment first.
  typename Sized_symbol<size>::Value_type va = psa->value();
  typename Sized_symbol<size>::Value_type vb = psb->value();
  if (va < vb)
    return false;
  else if (vb < va)
    return true;
d154 17
d174 1
a174 1
      this->do_allocate_commons<32>(layout, mapfile);
d182 1
a182 1
      this->do_allocate_commons<64>(layout, mapfile);
d195 2
a196 1
Symbol_table::do_allocate_commons(Layout* layout, Mapfile* mapfile)
d200 2
a201 1
					 &this->commons_, mapfile);
d204 2
a205 1
					 &this->tls_commons_, mapfile);
d208 2
a209 1
					 &this->small_commons_, mapfile);
d212 2
a213 1
					 &this->large_commons_, mapfile);
d225 2
a226 1
    Mapfile* mapfile)
d259 1
a259 2
  // Sort the common symbols by size, so that they pack better into
  // memory.
d261 1
a261 1
	    Sort_commons<size>(this));
@


1.19
log
@	* layout.cc (Layout::get_output_section): Add is_interp and
	is_dynamic_linker_section parameters.  Change all callers.
	(Layout::choose_output_section): Likewise.
	(Layout::make_output_section): Likewise.
	(Layout::add_output_section_data): Add is_dynamic_linker_section
	parameter.  Change all callers.
	* layout.h (class Layout): Update declarations.
	* output.h (class Output_section): Add is_interp, set_is_interp,
	is_dynamic_linker_section, set_is_dynamic_linker_section methods.
	Add is_interp_, is_dynamic_linker_section_ fields.  Change
	generate_code_fills_at_write_ to a bitfield.
	* output.cc (Output_section::Output_sections): Initialize new
	fields.
	(Output_segment::add_output_section): Add do_sort parameter.
	Change all callers.
@
text
@d242 2
a243 1
						       flags, poc, false);
@


1.18
log
@	* layout.cc (Layout::make_output_section): Call
	Target::new_output_section.
	(Layout::attach_allocated_section_to_segment): Put large section
	sections in a separate load segment with the large segment flag
	set.
	(Layout::segment_precedes): Sort large data segments after other
	load segments.
	(align_file_offset): New static function.
	(Layout::set_segment_offsets): Use align_file_offset.
	* output.h (class Output_section): Add is_small_section_ and
	is_large_section_ fields.
	(Output_section::is_small_section): New function.
	(Output_section::set_is_small_section):  New function.
	(Output_section::is_large_section): New function.
	(Output_section::set_is_large_section): New function.
	(Output_section::is_large_data_section): New function.
	(class Output_segment): Add is_large_data_segment_ field.
	(Output_segment::is_large_data_segment): New function.
	(Output_segment::set_is_large_data_segment): New function.
	* output.cc (Output_section::Output_section): Initialize new
	fields.
	(Output_segment::Output_segment): Likewise.
	(Output_segment::add_output_section): Add assertion that large
	data sections always go in large data segments.  Force small data
	sections to the end of the list of data sections.  Force small BSS
	sections to the start of the list of BSS sections.  For large BSS
	sections to the end of the list of BSS sections.
	* symtab.h (class Symbol): Declare is_common_shndx.
	(Symbol::is_defined): Check Symbol::is_common_shndx.
	(Symbol::is_common): Likewise.
	(class Symbol_table): Define enum Commons_section_type.  Update
	declarations.  Add small_commons_ and large_commons_ fields.
	* symtab.cc (Symbol::is_common_shndx): New function.
	(Symbol_table::Symbol_table): Initialize new fields.
	(Symbol_table::add_from_object): Put small and large common
	symbols in the right list.
	(Symbol_table::sized_finalized_symbol): Check
	Symbol::is_common_shndx.
	(Symbol_table::sized_write_globals): Likewise.
	* common.cc (Symbol_table::do_allocate_commons): Allocate new
	common symbol lists.  Don't call do_allocate_commons_list if the
	list is empty.
	(Symbol_table::do_allocate_commons_list): Remove is_tls
	parameter.  Add comons_section_type parameter.  Change all
	callers.  Handle small and large common symbols.
	* object.cc (Sized_relobj::do_finalize_local_symbols): Check
	Symbol::is_common_shndx.
	* resolve.cc (symbol_to_bits): Likewise.
	* target.h (Target::small_common_shndx): New function.
	(Target::small_common_section_flags): New function.
	(Target::large_common_shndx): New function.
	(Target::large_common_section_flags): New function.
	(Target::new_output_section): New function.
	(Target::Target_info): Add small_common_shndx, large_common_shndx,
	small_common_section_flags, and large_common_section_flags
	fields.
	(Target::do_new_output_section): New virtual function.
	* arm.cc (Target_arm::arm_info): Initialize new fields.
	* i386.cc (Target_i386::i386_info): Likewise.
	* powerpc.cc (Target_powerpc::powerpc_info) [all versions]:
	Likewise.
	* sparc.c (Target_sparc::sparc_info) [all versions]: Likewise.
	* x86_64.cc (Target_x86_64::x86_64_info): Likewise.
	(Target_x86_64::do_new_output_section): New function.
	* configure.ac: Define conditional MCMODEL_MEDIUM.
	* testsuite/Makefile.am (check_PROGRAMS): Add large.
	(large_SOURCES, large_CFLAGS, large_DEPENDENCIES): Define.
	(large_LDFLAGS): Define.
	* testsuite/large.c: New file.
	* testsuite/testfile.cc (Target_test::test_target_info):
	Initialize new fields.
	* configure, testsuite/Makefile.in: Rebuild.
@
text
@d242 1
a242 1
						       flags, poc);
@


1.18.4.1
log
@	* layout.cc (Layout::get_output_section): Add is_interp and
	is_dynamic_linker_section parameters.  Change all callers.
	(Layout::choose_output_section): Likewise.
	(Layout::make_output_section): Likewise.
	(Layout::add_output_section_data): Add is_dynamic_linker_section
	parameter.  Change all callers.
	* layout.h (class Layout): Update declarations.
	* output.h (class Output_section): Add is_interp, set_is_interp,
	is_dynamic_linker_section, set_is_dynamic_linker_section methods.
	Add is_interp_, is_dynamic_linker_section_ fields.  Change
	generate_code_fills_at_write_ to a bitfield.
	* output.cc (Output_section::Output_sections): Initialize new
	fields.
	(Output_segment::add_output_section): Add do_sort parameter.
	Change all callers.
@
text
@d242 1
a242 1
						       flags, poc, false);
@


1.17
log
@	* mapfile.cc: New file.
	* mapfile.h: New file.
	* options.h (class General_options): Add -M/--print-map and -Map.
	* options.cc (General_options::finalize): Make -M equivalent to
	-Map -.
	* main.cc: Include <cstdio> and "mapfile.h".
	(main): Open mapfile if requested.
	* gold.cc (class Middle_runner): Add mapfile_ field.  Update
	constructor.  Change caller.
	(queue_initial_tasks): Add mapfile parameter.  Change caller.
	(queue_middle_tasks): Likewise.
	* gold.h (queue_initial_tasks, queue_middle_tasks): Update
	declarations.
	* archive.cc: Include "mapfile.h".
	(Archive::add_symbols): Add mapfile parameter.  Change all
	callers.  Pass mapfile, symbol, and reason to include_member.
	(Archive::include_all_members): Add mapfile parameter.  Change all
	callers.
	(Archive::include_member): Add mapfile, sym, and why parameters.
	Change all callers.  Report inclusion to map file.
	* archive.h: Include "fileread.h".
	(class Archive): Update declarations.
	(Archive::file): New const method.
	(class Add_archive_symbols): Add mapfile_ field.  Update
	constructor.  Change all callers.
	* readsyms.h (class Read_symbols): Likewise.
	(class Finish_group): Likewise.
	(class Read_script): Likewise.
	* common.cc: Include "mapfile.h".
	(Symbol_table::allocate_commons): Add mapfile parameter.  Change
	all callers.
	(Symbol_table::do_allocate_commons): Likewise.
	(Symbol_table::do_allocate_commons_list): Likewise.  Report common
	symbol allocation to mapfile.
	* common.h (class Allocate_commons_task): Add mapfile_ field.
	Update constructor.  Change all callers.
	* symtab.h (class Symbol_table): Update declarations.
	* layout.cc: Include "mapfile.h".
	(Layout_task_runner::run): Print information to mapfile.
	(Layout::create_gold_note): Change Output_data_fixed_space to
	Output_data_zero_fill.
	(Layout::create_build_id): Likewise.
	(Layout::print_to_mapfile): New function.
	* layout.h (class Layout_task_runner): Add mapfile_ field.  Update
	constructor.  Change caller.
	(class Layout): Declare print_to_mapfile.
	* output.cc (Output_section::Input_section::print_to_mapfile): New
	function.
	(Output_section::add_input_section): If producing a map, always
	add to input_sections_ list.
	(Output_section::do_print_to_mapfile): New function.
	(Output_segment::print_sections_to_mapfile): New function.
	(Output_segment::print_section_list_to_mapfile): New function.
	* output.h: Include "mapfile.h".
	(Output_data::print_to_mapfile): New function.
	(Output_data::do_print_to_mapfile): New virtual function.
	(Output_segment_headers::do_print_to_mapfile): New function.
	(Output_file_header::do_print_to_mapfile): New function.
	(Output_data_const::do_print_to_mapfile): New function.
	(class Output_data_const_buffer): Add map_name_ field.  Update
	constructor.  Change all callers.  Add do_print_to_mapfile
	function.
	(class Output_data_fixed_space): Likewise.
	(class Output_data_space): Likewise.
	(class Output_data_zero_fill): New class.
	(Output_data_strtab::do_print_to_mapfile): New function.
	(Output_data_reloc_base::do_print_to_mapfile): New function.
	(Output_relocatable_relocs::do_print_to_mapfile): New function.
	(Output_data_group::do_print_to_mapfile): New function.
	(Output_data_got::do_print_to_mapfile): New function.
	(Output_data_dynamic::do_print_to_mapfile): New function.
	(Output_symtab_xindex::do_print_to_mapfile): New function.
	(class Output_section): Declare do_print_to_mapflie.  Declare
	print_to_mapfile in Input_section.
	(class Output_segment): Declare new functions.
	* object.h (Sized_relobj::symbol_count): New function.
	* script-sections.cc
	(Output_section_element_dot_assignment::set_section_addresses):
	Change Output_data_fixed_space to Output_data_zero_fill.
	(Output_data_expression::do_print_to_mapfile): New function.
	* script.cc (read_input_script): Add mapfile parameter.  Change
	all callers.
	* script.h (read_input_script): Update declaration.
	* ehframe.h (Eh_frame_hdr::do_print_to_mapfile): New function.
	(Eh_frame::do_print_to_mapfile): New function.
	* merge.h (Output_merge_data::do_print_to_mapfile): New function.
	(Output_merge_string::do_print_to_mapfile): New function.
	* i386.cc (Output_data_plt_i386::do_print_to_mapfile): New
	function.
	* sparc.cc (Output_data_plt_sparc::do_print_to_mapfile): New
	function.
	* x86_64.cc (Output_data_plt_x86_64::do_print_to_mapfile): New
	function.
	* Makefile.am (CCFILES): Add mapfile.cc.
	(HFILES): Add mapfile.h.
	* Makefile.in: Rebuild.
@
text
@d149 12
a160 4
  this->do_allocate_commons_list<size>(layout, false, &this->commons_,
				       mapfile);
  this->do_allocate_commons_list<size>(layout, true, &this->tls_commons_,
				       mapfile);
d168 5
a172 3
Symbol_table::do_allocate_commons_list(Layout* layout, bool is_tls,
				       Commons_type* commons,
				       Mapfile* mapfile)
a210 7

  Output_data_space *poc = new Output_data_space(addralign,
						 (is_tls
						  ? "** tls common"
						  : "** common"));

  const char* name = ".bss";
d212 3
a214 1
  if (is_tls)
d216 6
d223 26
a248 1
      flags |= elfcpp::SHF_TLS;
a249 1
  layout->add_output_section_data(name, elfcpp::SHT_NOBITS, flags, poc);
@


1.16
log
@	* common.cc (Symbol_table::allocate_commons): Remove options
	parameter.  Change caller.
	(Symbol_table::do_allocate_commons): Remove options parameter.
	Change caller.  Just call do_allocate_commons_list twice.
	(Symbol_table::do_allocate_commons_list): New function, broken out
	of do_allocate_commons.
	* common.h (class Allocate_commons_task): Remove options_ field.
	Update constructor.
	* symtab.cc (Symbol_table::Symbol_table): Initialize
	tls_commons_.
	(Symbol_table::add_from_object): Put TLS common symbols on
	tls_commons_ list.
	(Symbol_table::sized_finalize_symbol): Handle STT_TLS symbols
	which are IN_OUTPUT_DATA.
	* symtab.h (class Symbol_table): Add tls_commons_ field.  Update
	allocate_commons and do_allocate_commons declarations.  Declare
	do_allocate_commons_list.
	* gold.cc (queue_middle_tasks): Update creation of
	Allocate_commons_task to not pass options.
	* testsuite/Makefile.am (INCLUDES): Add -I.. .
	(TLS_TEST_C_FLAGS): New variable.
	(tls_test_c_pic.o): New target.
	(tls_test_shared.so): Link in tls_test_c_pic.o.
	(tls_test_c_pic_ie.o): New target.
	(tls_test_ie_shared.so): Link in tls_test_c_pic_ie.o.
	(tls_test_DEPENDENCIES, tls_test_LDADD): Add tls_test_c.o.
	(tls_test_c.o): New target.
	(tls_pic_test_DEPENDENCIES): Add tls_test_c_pic.o.
	(tls_pic_test_LDADD): Likewise.
	(tls_shared_gd_to_ie_test_DEPENDENCIES): Add tls_test_c_pic.o.
	(tls_shared_gd_to_ie_test_LDADD): Likewise.
	(tls_test_c_gnu2.o): New target.
	(tls_shared_gnu2_gd_to_ie_test_DEPENDENCIES): Add
	tls_test_c_gnu2.o.
	(tls_shared_gnu2_gd_to_ie_test_LDADD): Likewise.
	(tls_test_gnu2_shared.so): Link in tls_test_c_gnu2.o.
	(tls_test_shared_nonpic.so): Link in tls_test_c.o.
	* testsuite/tls_test.cc: Include "config.h".
	(t_last): Call t11_last.
	* testsuite/tls_test.h (t11, t11_last): Declare.
	* testsuite/tls_test_c.c: New file.
	* testsuite/tls_test_main.cc (thread_routine): Call t11.
	* configure.ac: Check for OpenMP support.
	* configure, config.in, Makefile.in: Rebuild.
	* testsuite/Makefile.in: Rebuild.
@
text
@d28 1
d64 1
a64 1
  this->symtab_->allocate_commons(this->layout_);
d121 1
a121 1
Symbol_table::allocate_commons(Layout* layout)
d126 1
a126 1
      this->do_allocate_commons<32>(layout);
d134 1
a134 1
      this->do_allocate_commons<64>(layout);
d147 1
a147 1
Symbol_table::do_allocate_commons(Layout* layout)
d149 4
a152 2
  this->do_allocate_commons_list<size>(layout, false, &this->commons_);
  this->do_allocate_commons_list<size>(layout, true, &this->tls_commons_);
d161 2
a162 1
				       Commons_type* commons)
d202 4
a205 1
  Output_data_space *poc = new Output_data_space(addralign);
d227 7
@


1.15
log
@	* common.cc (Sort_commons::operator): Correct sorting algorithm.
	* testsuite/common_test_1.c: New file.
	* testsuite/Makefile.am (check_PROGRAMS): Add common_test_1.
	(common_test_1_SOURCES): New variable.
	(common_test_1_DEPENDENCIES): New variable.
	(common_test_1_LDFLAGS): New variable.
@
text
@d63 1
a63 1
  this->symtab_->allocate_commons(this->options_, this->layout_);
d120 1
a120 1
Symbol_table::allocate_commons(const General_options& options, Layout* layout)
d125 1
a125 1
      this->do_allocate_commons<32>(options, layout);
d133 1
a133 1
      this->do_allocate_commons<64>(options, layout);
d146 13
a158 2
Symbol_table::do_allocate_commons(const General_options&,
				  Layout* layout)
d168 2
a169 2
  for (Commons_type::iterator p = this->commons_.begin();
       p != this->commons_.end();
d193 1
a193 1
  std::sort(this->commons_.begin(), this->commons_.end(),
d196 1
a196 1
  // Place them in a newly allocated .bss section.
d200 8
a207 3
  layout->add_output_section_data(".bss", elfcpp::SHT_NOBITS,
				  elfcpp::SHF_WRITE | elfcpp::SHF_ALLOC,
				  poc);
d212 2
a213 2
  for (Commons_type::iterator p = this->commons_.begin();
       p != this->commons_.end();
d227 1
a227 1
  this->commons_.clear();
@


1.14
log
@Update copyright years.  Update language files.
@
text
@d96 1
d101 1
a101 1
  else if (sb > sa)
d104 2
a105 1
  // When the symbols are the same size, we sort them by alignment.
d110 1
a110 1
  else if (vb > va)
@


1.13
log
@Remove gcc 3.2 compatibility hacks.
@
text
@d3 1
a3 1
// Copyright 2006, 2007 Free Software Foundation, Inc.
@


1.12
log
@From Craig Silverstein: Have Parameters point to General_options.
@
text
@d93 2
a94 6
  const Sized_symbol<size>* psa;
  psa = symtab->get_sized_symbol SELECT_SIZE_NAME(size) (pa
                                                         SELECT_SIZE(size));
  const Sized_symbol<size>* psb;
  psb = symtab->get_sized_symbol SELECT_SIZE_NAME(size) (pb
                                                         SELECT_SIZE(size));
d170 1
a170 4
	  Sized_symbol<size>* ssym;
	  ssym = this->get_sized_symbol SELECT_SIZE_NAME(size) (
              sym
              SELECT_SIZE(size));
d201 1
a201 5

      Sized_symbol<size>* ssym;
      ssym = this->get_sized_symbol SELECT_SIZE_NAME(size) (sym
                                                            SELECT_SIZE(size));

a202 1

a203 1

@


1.11
log
@Rewrite workqueue.  This version eliminates the master thread, and
reduces the amount of locking required to find a new thread to run.
@
text
@d124 1
a124 1
  if (parameters->get_size() == 32)
d132 1
a132 1
  else if (parameters->get_size() == 64)
@


1.10
log
@Clean up setting address and section offset.
@
text
@d41 2
a42 2
Task::Is_runnable_type
Allocate_commons_task::is_runnable(Workqueue*)
d45 2
a46 2
    return IS_LOCKED;
  return IS_RUNNABLE;
d51 2
a52 1
class Allocate_commons_task::Allocate_commons_locker : public Task_locker
d54 2
a55 17
 public:
  Allocate_commons_locker(Task_token& symtab_lock, Task* task,
			  Task_token& blocker, Workqueue* workqueue)
    : symtab_locker_(symtab_lock, task),
      blocker_(blocker, workqueue)
  { }

 private:
  Task_locker_write symtab_locker_;
  Task_locker_block blocker_;
};

Task_locker*
Allocate_commons_task::locks(Workqueue* workqueue)
{
  return new Allocate_commons_locker(*this->symtab_lock_, this,
				     *this->blocker_, workqueue);
@


1.9
log
@Add threading support.
@
text
@d234 1
a234 1
  poc->set_space_size(off);
@


1.8
log
@Put size and endianness in parameters.
@
text
@d229 1
a229 4
      Size_type symsize = ssym->symsize();
      ssym->init(ssym->name(), poc, off, symsize, ssym->type(),
		 ssym->binding(), ssym->visibility(), ssym->nonvis(),
		 false);
d231 1
a231 1
      off += symsize;
@


1.7
log
@Add licensing text to every source file.
@
text
@d138 1
a138 1
  if (this->get_size() == 32)
d146 1
a146 1
  else if (this->get_size() == 64)
@


1.6
log
@Add control over template specialization.
@
text
@d3 20
@


1.5
log
@Hash tables, dynamic section, i386 PLT, gold_assert.
@
text
@d119 7
a125 1
    this->do_allocate_commons<32>(options, layout);
d127 7
a133 1
    this->do_allocate_commons<64>(options, layout);
@


1.4
log
@More dynamic object support, initial scripting support.
@
text
@d123 1
a123 1
    abort();
d174 1
a174 1
  Output_data_common *poc = new Output_data_common(addralign);
d205 1
a205 1
  poc->set_common_size(off);
@


1.3
log
@Split Object into Dynobj and Relobj, incorporate elfcpp swapping changes.
@
text
@d174 1
a174 1
  Output_section_common *poc = new Output_section_common(addralign);
@


1.2
log
@gcc 3.2.2 portability hacks.
@
text
@d10 1
@


1.1
log
@Can now do a full static link of hello, world in C or C++
@
text
@d87 2
a88 2
  psa = symtab->get_sized_symbol SELECT_SIZE_NAME (pa
						   SELECT_SIZE(size));
d90 2
a91 2
  psb = symtab->get_sized_symbol SELECT_SIZE_NAME (pb
						   SELECT_SIZE(size));
d156 3
a158 2
	  ssym = this->get_sized_symbol SELECT_SIZE_NAME (sym
							  SELECT_SIZE(size));
d191 2
a192 2
      ssym = this->get_sized_symbol SELECT_SIZE_NAME (sym
						      SELECT_SIZE(size));
@

