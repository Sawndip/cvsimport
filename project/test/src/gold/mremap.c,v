head	1.3;
access;
symbols
	binutils-2_24-branch:1.3.0.8
	binutils-2_24-branchpoint:1.3
	binutils-2_21_1:1.2
	binutils-2_23_2:1.3
	binutils-2_23_1:1.3
	binutils-2_23:1.3
	binutils-2_23-branch:1.3.0.6
	binutils-2_23-branchpoint:1.3
	binutils-2_22_branch:1.3.0.4
	binutils-2_22:1.3
	binutils-2_22-branch:1.3.0.2
	binutils-2_22-branchpoint:1.3
	binutils-2_21:1.2
	binutils-2_21-branch:1.2.0.6
	binutils-2_21-branchpoint:1.2
	binutils-2_20_1:1.2
	binutils-2_20:1.2
	binutils-2_20-branch:1.2.0.4
	binutils-2_20-branchpoint:1.2
	dje-cgen-play1-branch:1.2.0.2
	dje-cgen-play1-branchpoint:1.2
	binutils_latest_snapshot:1.3;
locks; strict;
comment	@ * @;


1.3
date	2011.04.12.18.06.16;	author ian;	state Exp;
branches;
next	1.2;

1.2
date	2009.03.28.05.22.30;	author ian;	state Exp;
branches;
next	1.1;

1.1
date	2009.03.27.23.21.09;	author ian;	state Exp;
branches;
next	;


desc
@@


1.3
log
@	* configure.ac: Check for sys/mman.h and mmap.  Check for mremap
	with MREMAP_MAYMOVE.
	* output.h (class Output_file): Add map_is_allocated_ field.
	* output.cc: Only #include <sys/mman.h> if it exists.  If mmap is
	not available, provide stubs.  If mremap is not available, #define
	it to gold_mremap.
	(MREMAP_MAYMOVE): Define if not defined.
	(Output_file::Output_file): Initialize map_is_allocated_.
	(Output_file::resize): Check map_is_allocated_.
	(Output_file::map_anonymous): If mmap fails, use malloc.
	(Output_file::unmap): Don't do anything for an anonymous map.
	* fileread.cc: Only #include <sys/mman.h> if it exists.  If mmap
	is not available, provide stubs.
	(File_read::View::~View): Use free rather than delete[].
	(File_read::make_view): Use malloc rather than new[].  If mmap
	fails, use malloc.
	(File_read::find_or_make_view): Use malloc rather than new[].
	* gold.h: Remove HAVE_REMAP code.
	* mremap.c: #include <errno.h>.  Only #include <sys/mman.h> if it
	exists.  Rename mremap to gold_mremap.  If mmap is not available
	don't do anything.
	* configure, config.in: Rebuild.
@
text
@/* mremap.c -- version of mremap for gold.  */

/* Copyright 2009, 2011 Free Software Foundation, Inc.
   Written by Ian Lance Taylor <iant@@google.com>.

   This file is part of gold.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,
   MA 02110-1301, USA.  */

#include "config.h"
#include "ansidecl.h"

#include <errno.h>
#include <string.h>
#include <sys/types.h>

#ifdef HAVE_SYS_MMAN_H
#include <sys/mman.h>
#endif

extern void *gold_mremap (void *, size_t, size_t, int);

#ifdef HAVE_MMAP

/* This file implements mremap for systems which don't have it.  The
   gold code requires support for mmap.  However, there are systems
   which have mmap but not mremap.  This is not a general replacement
   for mremap; it only supports the features which are required for
   gold.  In particular, we assume that the MREMAP_MAYMOVE flag is
   set.  */

/* Some BSD systems still use MAP_ANON instead of MAP_ANONYMOUS.  */

#ifndef MAP_ANONYMOUS
# define MAP_ANONYMOUS MAP_ANON
#endif

void *
gold_mremap (void *old_address, size_t old_size, size_t new_size,
	     int flags ATTRIBUTE_UNUSED)
{
  void *ret;

  ret = mmap (0, new_size, PROT_READ | PROT_WRITE,
	      MAP_PRIVATE | MAP_ANONYMOUS, -1, 0);
  if (ret == MAP_FAILED)
    return ret;
  memcpy (ret, old_address,
	  old_size < new_size ? old_size : new_size);
  (void) munmap (old_address, old_size);
  return ret;
}

#else /* !defined(HAVE_MMAP) */

#ifndef MAP_FAILED
#define MAP_FAILED ((void *) -1)
#endif

#ifndef ENOSYS
#define ENOSYS EINVAL
#endif

void *
gold_mremap (void *old_address ATTRIBUTE_UNUSED,
	     size_t old_size ATTRIBUTE_UNUSED,
	     size_t new_size ATTRIBUTE_UNUSED,
	     int flags ATTRIBUTE_UNUSED)
{
  errno = ENOSYS;
  return MAP_FAILED;
}

#endif /* !defined(HAVE_MMAP) */
@


1.2
log
@	* ffsll.c: New file.
	* configure.ac: Call AC_REPLACE_FUNCS on ffsll.
	* gold.h (ffsll): Declare if HAVE_FFSLL is not defined.
	* ftruncate.c (ftruncate): Declare before definition.
	* mremap.c (mremap): Likewise.
	* pread.c (pread): Likewise.
	* configure, Makefile.in, config.in: Rebuild.
@
text
@d3 1
a3 1
/* Copyright 2009 Free Software Foundation, Inc.
d26 1
d29 2
d32 5
a50 2
extern void *mremap (void *, size_t, size_t, int, ...);

d52 2
a53 2
mremap (void *old_address, size_t old_size, size_t new_size,
	int flags ATTRIBUTE_UNUSED, ...)
d66 22
@


1.1
log
@	* mremap.c: New file.
	* configure.ac: Call AC_REPLACE_FUNCS on mremap.
	* gold.h (MREMAP_MAYMOVE): Define if HAVE_MREMAP is not defined.
	(mremap): Declare if HAVE_MREMAP is not defined.
	* configure, Makefile.in, config.in: Rebuild.
@
text
@d43 2
@

