head	1.40;
access;
symbols
	sid-snapshot-20180601:1.40
	sid-snapshot-20180501:1.40
	sid-snapshot-20180401:1.40
	sid-snapshot-20180301:1.40
	sid-snapshot-20180201:1.40
	sid-snapshot-20180101:1.40
	sid-snapshot-20171201:1.40
	sid-snapshot-20171101:1.40
	sid-snapshot-20171001:1.40
	sid-snapshot-20170901:1.40
	sid-snapshot-20170801:1.40
	sid-snapshot-20170701:1.40
	sid-snapshot-20170601:1.40
	sid-snapshot-20170501:1.40
	sid-snapshot-20170401:1.40
	sid-snapshot-20170301:1.40
	sid-snapshot-20170201:1.40
	sid-snapshot-20170101:1.40
	sid-snapshot-20161201:1.40
	sid-snapshot-20161101:1.40
	sid-snapshot-20160901:1.40
	sid-snapshot-20160801:1.40
	sid-snapshot-20160701:1.40
	sid-snapshot-20160601:1.40
	sid-snapshot-20160501:1.40
	sid-snapshot-20160401:1.40
	sid-snapshot-20160301:1.40
	sid-snapshot-20160201:1.40
	sid-snapshot-20160101:1.40
	sid-snapshot-20151201:1.40
	sid-snapshot-20151101:1.40
	sid-snapshot-20151001:1.40
	sid-snapshot-20150901:1.40
	sid-snapshot-20150801:1.40
	sid-snapshot-20150701:1.40
	sid-snapshot-20150601:1.40
	sid-snapshot-20150501:1.40
	sid-snapshot-20150401:1.40
	sid-snapshot-20150301:1.40
	sid-snapshot-20150201:1.40
	sid-snapshot-20150101:1.40
	sid-snapshot-20141201:1.40
	sid-snapshot-20141101:1.40
	sid-snapshot-20141001:1.40
	sid-snapshot-20140901:1.40
	sid-snapshot-20140801:1.40
	sid-snapshot-20140701:1.40
	sid-snapshot-20140601:1.40
	sid-snapshot-20140501:1.40
	sid-snapshot-20140401:1.40
	sid-snapshot-20140301:1.40
	sid-snapshot-20140201:1.40
	sid-snapshot-20140101:1.40
	sid-snapshot-20131201:1.40
	sid-snapshot-20131101:1.40
	sid-snapshot-20131001:1.40
	sid-snapshot-20130901:1.40
	sid-snapshot-20130801:1.40
	sid-snapshot-20130701:1.40
	sid-snapshot-20130601:1.40
	sid-snapshot-20130501:1.40
	sid-snapshot-20130401:1.40
	sid-snapshot-20130301:1.40
	sid-snapshot-20130201:1.40
	sid-snapshot-20130101:1.40
	sid-snapshot-20121201:1.40
	sid-snapshot-20121101:1.40
	sid-snapshot-20121001:1.40
	sid-snapshot-20120901:1.40
	sid-snapshot-20120801:1.40
	sid-snapshot-20120701:1.40
	sid-snapshot-20120601:1.40
	sid-snapshot-20120501:1.40
	sid-snapshot-20120401:1.40
	sid-snapshot-20120301:1.40
	sid-snapshot-20120201:1.40
	sid-snapshot-20120101:1.40
	sid-snapshot-20111201:1.40
	sid-snapshot-20111101:1.40
	sid-snapshot-20111001:1.40
	sid-snapshot-20110901:1.40
	sid-snapshot-20110801:1.40
	sid-snapshot-20110701:1.40
	sid-snapshot-20110601:1.40
	sid-snapshot-20110501:1.40
	sid-snapshot-20110401:1.40
	sid-snapshot-20110301:1.40
	sid-snapshot-20110201:1.40
	sid-snapshot-20110101:1.40
	sid-snapshot-20101201:1.40
	sid-snapshot-20101101:1.40
	sid-snapshot-20101001:1.40
	sid-snapshot-20100901:1.40
	sid-snapshot-20100801:1.40
	sid-snapshot-20100701:1.40
	sid-snapshot-20100601:1.40
	sid-snapshot-20100501:1.40
	sid-snapshot-20100401:1.40
	sid-snapshot-20100301:1.40
	sid-snapshot-20100201:1.40
	sid-snapshot-20100101:1.40
	sid-snapshot-20091201:1.40
	sid-snapshot-20091101:1.40
	sid-snapshot-20091001:1.40
	sid-snapshot-20090901:1.40
	sid-snapshot-20090801:1.40
	sid-snapshot-20090701:1.40
	sid-snapshot-20090601:1.40
	sid-snapshot-20090501:1.40
	sid-snapshot-20090401:1.40
	sid-snapshot-20090301:1.40
	sid-snapshot-20090201:1.40
	sid-snapshot-20090101:1.40
	sid-snapshot-20081201:1.40
	sid-snapshot-20081101:1.40
	sid-snapshot-20081001:1.40
	sid-snapshot-20080901:1.40
	sid-snapshot-20080801:1.40
	sid-snapshot-20080701:1.40
	sid-snapshot-20080601:1.40
	sid-snapshot-20080501:1.40
	sid-snapshot-20080403:1.40
	sid-snapshot-20080401:1.40
	sid-snapshot-20080301:1.40
	sid-snapshot-20080201:1.40
	sid-snapshot-20080101:1.40
	sid-snapshot-20071201:1.40
	sid-snapshot-20071101:1.40
	sid-snapshot-20071001:1.40
	sid-20020905-branchpoint:1.34
	sid-20020905-branch:1.34.0.2
	cygnus_cvs_20020108_pre:1.34;
locks; strict;
comment	@# @;


1.40
date	2007.02.05.20.28.38;	author brolley;	state Exp;
branches;
next	1.39;

1.39
date	2006.10.18.18.30.52;	author brolley;	state Exp;
branches;
next	1.38;

1.38
date	2006.06.26.22.00.12;	author brolley;	state Exp;
branches;
next	1.37;

1.37
date	2005.12.16.10.23.12;	author nathan;	state Exp;
branches;
next	1.36;

1.36
date	2005.06.24.18.42.19;	author brolley;	state Exp;
branches;
next	1.35;

1.35
date	2003.10.21.21.27.41;	author brolley;	state Exp;
branches;
next	1.34;

1.34
date	2001.12.28.21.16.48;	author fche;	state Exp;
branches;
next	1.33;

1.33
date	2001.12.17.09.31.17;	author mrg;	state Exp;
branches;
next	1.32;

1.32
date	2001.12.04.22.40.52;	author fche;	state Exp;
branches;
next	1.31;

1.31
date	2001.11.27.22.58.59;	author fitzsim;	state Exp;
branches;
next	1.30;

1.30
date	2001.11.08.21.55.10;	author fche;	state Exp;
branches;
next	1.29;

1.29
date	2001.10.29.18.14.53;	author fche;	state Exp;
branches;
next	1.28;

1.28
date	2001.10.29.17.44.36;	author fche;	state Exp;
branches;
next	1.27;

1.27
date	2001.10.26.18.51.59;	author fche;	state Exp;
branches;
next	1.26;

1.26
date	2001.10.26.18.46.35;	author fche;	state Exp;
branches;
next	1.25;

1.25
date	2001.10.26.18.03.30;	author fche;	state Exp;
branches;
next	1.24;

1.24
date	2001.10.17.17.47.55;	author brolley;	state Exp;
branches;
next	1.23;

1.23
date	2001.10.04.17.33.48;	author fche;	state Exp;
branches;
next	1.22;

1.22
date	2001.10.03.17.24.17;	author fche;	state Exp;
branches;
next	1.21;

1.21
date	2001.09.27.21.21.37;	author fche;	state Exp;
branches;
next	1.20;

1.20
date	2001.08.08.00.16.09;	author bje;	state Exp;
branches;
next	1.19;

1.19
date	2001.08.07.01.45.34;	author fche;	state Exp;
branches;
next	1.18;

1.18
date	2001.08.07.00.33.08;	author bje;	state Exp;
branches;
next	1.17;

1.17
date	2001.08.04.10.40.26;	author bje;	state Exp;
branches;
next	1.16;

1.16
date	2001.07.18.20.57.58;	author jjohnstn;	state Exp;
branches;
next	1.15;

1.15
date	2001.06.23.11.18.01;	author fche;	state Exp;
branches;
next	1.14;

1.14
date	2001.04.05.17.17.01;	author fche;	state Exp;
branches;
next	1.13;

1.13
date	2001.04.04.23.52.58;	author fche;	state Exp;
branches;
next	1.12;

1.12
date	2001.03.13.21.44.22;	author fche;	state Exp;
branches;
next	1.11;

1.11
date	2001.03.13.21.39.20;	author fche;	state Exp;
branches;
next	1.10;

1.10
date	2001.03.06.17.00.41;	author fche;	state Exp;
branches;
next	1.9;

1.9
date	2001.01.23.21.24.23;	author fche;	state Exp;
branches;
next	1.8;

1.8
date	2001.01.23.17.24.53;	author fche;	state Exp;
branches;
next	1.7;

1.7
date	2001.01.23.17.04.23;	author fche;	state Exp;
branches;
next	1.6;

1.6
date	2001.01.15.19.14.42;	author fche;	state Exp;
branches;
next	1.5;

1.5
date	2001.01.13.14.26.05;	author mrg;	state Exp;
branches;
next	1.4;

1.4
date	2001.01.11.16.32.30;	author nsd;	state Exp;
branches;
next	1.3;

1.3
date	2001.01.04.00.59.47;	author jjohnstn;	state Exp;
branches;
next	1.2;

1.2
date	2000.12.15.21.14.57;	author fche;	state Exp;
branches;
next	1.1;

1.1
date	2000.12.07.19.30.45;	author fche;	state Exp;
branches;
next	;


desc
@@


1.40
log
@Support for Toshiba MeP.
@
text
@:
# Emulate a standalone simulator.  Construct a sid configuration file
# and run it.

eval 'exec perl -S $0 ${1+"$@@"}'
    if $running_under_some_shell;
$running_under_some_shell = 0;

#use strict;
use Getopt::Long;
use File::Basename;
require 5.004;

%cpu_comptype = (
		 "arm" => "hw-cpu-arm7t",
		 "thumb" => "hw-cpu-arm7t",
		 "x86" => "hw-cpu-x86",
	         # INSERT NEW ENTRIES HERE
		 "m32r" => "hw-cpu-m32r/d",
		 "mep" => "hw-cpu-mep",
		 "mt" => "hw-cpu-mt",
		 "sh5" => "hw-cpu-sh5",
		 "xstormy16" => "hw-cpu-xstormy16",
		 );

%cpu_defaultendian = (
		      "x86" => "-EL",
		      "m32r" => "-EB",
		      "mt" => "-EB",
		      "sh5" => "-EL",
		      "xstormy16" => "-EL",
		      );

%gloss_comptype = (
		   "arm" => "sw-gloss-arm/angel",
		   "thumb" => "sw-gloss-arm/angel",
		   "x86" => "sw-gloss-generic/libgloss",
	           # INSERT NEW ENTRIES HERE
		   "m32r" => "sw-gloss-m32r/libgloss",
		   "mep" => "sw-gloss-generic/libgloss",
		   "mt" => "sw-gloss-generic/libgloss",
		   "sh5" => "sw-gloss-generic/libgloss",
		   "xstormy16" => "sw-gloss-generic/libgloss",
		   );

%gloss_memspecs = (
		   "arm" => "0x00000000,0x00800000",
		   "thumb" => "0x00000000,0x00800000",
		   "x86" => "0x00000,0x500000",
	           # INSERT NEW ENTRIES HERE
		   "m32r" => "0x00000000,0x00800000",
		   "mep" => "0x00000000,0x00200000:0x00300000,0x10000",
		   "mt" => "0x00000000,0x00800000",
		   "sh5" => "0x00000000,0x00800000", # check this
		   "xstormy16" => "0x00000000,0x00800000",
		  );



# ----------------------------------------------------------------------------
# Consume argument list

$opt_cpu="";
$opt_help=0;
$opt_version=0;
$opt_verbose=0;
$opt_save_temps=0;
$opt_no_run=0;
$opt_trace_extract=0;
$opt_trace_semantics=0;
$opt_trace_disassemble=0;
$opt_trace_counter=0;
$opt_trace_core=0;
$opt_trace_core_visual=0;
$opt_enable_warnings=0;
@@opt_memory_region = ();
$opt_gdb=0;
$opt_persistent=0;
$opt_gprof=0;
$opt_tksm=0;
$opt_board="gloss-stdio";
$opt_engine="pbb";
$opt_EB=0;
$opt_EL=0;
$opt_sidrtc="";
$opt_sidcodec="";
@@opt_wrap = ();
%opt_load=();
%opt_gdbport=();

$any_tcl = 0;

# sid executable
if ($ENV{'SID'}) {
  $sid=$ENV{'SID'};
} else {
  $sid = dirname($0);
  $sid .= "/sid";
}

$version=q$Id: configrun-sid.in,v 1.39 2006/10/18 18:30:52 brolley Exp $;

# by default the loader data mapper connects to the cpu-mapper access-port
$load_mapper_data = "cpu-mapper access-port";

# (see perldoc Getopt::Long)
%options = (
	    "help!" => ["help", "Print this help message."],
	    "version!" => ["version", "Print wrapper / sid versions."],
	    "cpu=s" => ["cpu=CPU   (REQUIRED)", "Select target processor.", "none"],
	    "verbose|v!" => ["verbose|v", "Turn on various run-time verbosity settings.", "no"],
	    "save-temps!" => ["save-temps", "Keep generated sid configuration file.", "no"],
	    "trace-extract!" => ["trace-extract", "Turn on CPU insn decode tracing.", "no"],
	    "trace-semantics!" => ["trace-semantics", "Turn on CPU insn execute tracing.", "no"],
	    "trace-disassemble!" => ["trace-disassemble", "Turn on CPU insn execute disassembly.", "no"],
	    "trace-counter!" => ["trace-counter", "Turn on CPU insn counter.", "no"],
	    "trace-core!" => ["trace-core", "Turn on bus access tracing.", "no"],
	    # "trace-core-visual!" => ["trace-core-visual", "Turn on visual bus access tracing.", "no"],
	    "enable-warnings!" => ["enable-warnings", "Enable CPU execution warnings.", "no"],
	    "memory-region=s@@" => ["memory-region=BASE,SIZE", "Add RAM region from BASE to BASE+SIZE-1.", "no",
				   "other options:",
				   "   bus=MAPPER     Attach memory to bus MAPPER",
				   "   read-only      Make memory read-only",
				   "   alias=BASE2    Add an alias at BASE2",
				   "   file=FILENAME  Load/save memory image from file",
				   "   mmap           Memory map given file",
				   "   latency=R:W    Set read, write latencies  [0:0]",
				   "   latency=RW     Set both latencies           [0]"],
	    "gdb=i" => ["gdb=PORT", "Add a gdb/debugger interface on TCP port.", "",
			"Equivalent to --gdbport cpu=PORT.           [none]"],
	    "gdbport=i%" => ["gdbport PROCESSOR=PORT", "Add a gdb/debugger interface on TCP port", "",
			     "for the given processor. May be specified",
			     "more than once to debug multiple CPUs.      [none]"],
	    "tksched!" => ["tksched", "Add a simple visual scheduler controller.", "no"],
	    "tksm!" => ["tksm", "Add an experimental Tk system monitor.", "no"],
	    "board=s" => ["board=BOARD", "Model given board or system.", "gloss"],
	    "engine=s" => ["engine=scache|pbb", "Set given cgen CPU engine.", "pbb"],
	    "EB!" => ["-EB | -EL", "Set powerup CPU mode to big/little endian.", "auto"],
	    "EL!" => [],
	    "persistent!" => ["persistent", "Rerun top-level loop indefinitely.", "no"],
	    "no-run!" => ["no-run", "Make config file (--save-temps) and exit.", "no"],
	    "insn-count=i" => ["insn-count=N", "Block of uninterrupted ticks for insns", "10000"],
	    "gprof!" => ["gprof", "GPROF-profile, collect every insn-count ticks", "no"],
	    "sidrtc=s" => [],
	    "sidcodec=s" => [],
	    "wrap=s@@" => ["wrap=COMPONENT", "Turn on SID API tracing for named component", "none"],
	    "load=s%" => ["load PROCESSOR=NAME", "Specify an executable to be loaded into", "",
	                  "a specific processor. May be specified more",
                          "than once to load multiple processors.  [cpu=exec]"],
	    "icache=s" => ["icache=TYPE", "Add an instruction cache.", "none"],
	    "dcache=s" => ["dcache=TYPE", "Add a data cache.", "none",
			  "refer to any existing \"hw-cache-TYPE\" component type",
			  "e.g., direct/64kb/32, 4way/256kb/64/lru"],
	   );

@@options = keys (%options);

sub usage {
  print STDERR "\nUsage: $0 --cpu=CPU [option ..] [--] [exec args ..]\n";
  print STDERR "Options:\n";
  
  foreach $usage_msgs (sort (values %options))
    {
      my $num_entries = scalar (@@{$usage_msgs});
      next if ($num_entries < 2);
      
      my $option = @@{$usage_msgs}[0];
      my $synopsis = @@{$usage_msgs}[1];
      my $default = @@{$usage_msgs}[2];

      # Special handling for single dash options (eg. -EL).
      if ($option =~ /^-/)
	{
	  printf STDERR " %-26s ", $option;
	} else {
	  printf STDERR " --%-24s ", $option;
	}

      # If a default value has been given, display it within [ ].
      if ($default ne "")
	{
	  my $width = 48 - length ($default);
	  printf STDERR "%-${width}s%s\n", $synopsis, "[" . $default . "]";
	}
      else
	{
	  printf STDERR "%s\n", $synopsis;
	}

      # Print any supplementary lines of help.
      for ($i = 3; $i < $num_entries; $i++)
	{
	  printf STDERR "%28s%s\n", " ", @@{$usage_msgs}[$i];
	}
    }
  exit (0);
}

sub configure_gloss
  {
    my $board = $_[0];
    $memspecs = $gloss_memspecs{$opt_cpu};
    @@regions = split (/:/, $memspecs);
    foreach $region (@@regions)
      {
	push @@opt_memory_region, $region;
      }

    $gloss_component_type = $gloss_comptype{$opt_cpu} || die "Unknown cpu $opt_cpu for gloss component type\n";
    $first_section .= "# gloss\n" .
      &sidconf_new("$gloss_component_type", "gloss") . "\n";

    $second_section .= "# gloss
relate gloss cpu cpu
connect-pin init-sequence output-2 -> gloss reset
connect-pin cpu trap <-> gloss trap
connect-pin cpu trap-code -> gloss trap-code
set gloss verbose? $opt_verbose
connect-bus gloss target-memory $bus_upstream
";
    if ($opt_cpu eq "x86")
      {
	 $second_section .= "set gloss syscall-numbering-scheme cygmon\n";
      }

    if ($#exec_args >= 0) {
      $second_section .= "# args
set gloss command-line \"$exec @@exec_args\"
";
    }

    # pick tty of choice
    if ($board =~ /tty/)
      {
        $any_tcl = 1;

        $first_section .= "# gloss <-> tty\n" .
	    &sidconf_new("hw-visual-tty", "tty") . "\n";
	    $third_section .= "# gloss <-> tty
relate tty \"$gloss_component_type gloss\" gloss
";
      }

    # check if gdb option is not specified
    if ($opt_gdb == 0)
      {
	# gloss-stdio only allowed if gdb not specified
        if ($board =~ /stdio/)
          {
  	    $first_section .= "# gloss <-> stdio\n" .
	      &sidconf_new("sid-io-stdio", "stdio") . "\n";
	    $second_section .= "# gloss <-> stdio
set host-sched 0-regular? 1
set host-sched 0-time 150 # apprx. human perception limit
connect-pin host-sched 0-event -> stdio poll
connect-pin gloss debug-tx -> stdio stdout
connect-pin gloss debug-rx <- stdio stdin
";
          }
        $second_section .= "# gloss w/o gdb
connect-pin gloss process-signal -> main stop!
connect-pin gloss process-signal -> yield-net input
";
      }
    # gloss gdb connections handled later in gdb section
}

my @@ARGV_COPY = @@ARGV;

# handle args
&GetOptions(@@options);

# handle version/help
if ($opt_version) {
  print STDERR "$version\n";
  system ("$sid", "-v");
  exit (0);
}
if ($opt_help || $opt_cpu eq "") {
  &usage;
}

# handle leftover options
$exec = $#ARGV >= 0 ? (shift @@ARGV) : "";
@@exec_args = ();
foreach $arg (@@ARGV) {
  # The double quotemeta() call is intended to allow arguments containing
  # weird characters to go through both the cfgroot parser AND the run-time
  # target libgloss parser.
  push @@exec_args, quotemeta(quotemeta($arg));
}

#if (!$exec && !$opt_gdb)
#  {
#    warn "Executable name not supplied";
#  }

# --load cpu=<name> overrides $exec
if ($opt_load{"cpu"})
{
    if ($exec && $exec ne $opt_load{"cpu"})
    {
	warn "--load cpu=" . $opt_load{"cpu"} . " overrides $exec\n";
    }
    $exec = $opt_load{"cpu"};
}
elsif ($exec)
  {
      $opt_load{"cpu"} = "$exec";
  }

# --gdbport cpu=port overrides --gdb
if ($opt_gdbport{"cpu"})
{
    if ($opt_gdb && $opt_gdb ne $opt_gdbport{"cpu"})
    {
	warn "--gdbport cpu=" . $opt_gdbport{"cpu"} . " overrides --gdb=$opt_gdb\n";
    }
    $opt_gdb = $opt_gdbport{"cpu"};
}
elsif ($opt_gdb)
  {
      $opt_gdbport{"cpu"} = $opt_gdb;
  }

if ($exec)
  {
    die "Cannot read executable `$exec'" if (! -r $exec && ! $opt_no_run);
  }

# infer --save-temps from --no-run
if ($opt_no_run && (! $opt_save_temps))
  {
    $opt_save_temps = 1;
  }

# infer --persistent from --gdb=xxxx
if ($opt_gdb)
  {
    $opt_persistent = 1;
  }

# complete component library list
%component_libs=(
		 "audio" => "audio_component_library",
		 "cache" => "cache_component_library",
		 "cgencpu" => "cgen_component_library",
		 "consoles" => "console_component_library",
		 "gdb" => "gdb_component_library",
		 "gloss" => "gloss_component_library",
		 "glue" => "glue_component_library",
		 "ide" => "ide_component_library",
		 "interrupt" => "interrupt_component_library",
		 "hd44780u" => "hd44780u_component_library",
		 "loader" => "loader_component_library",
		 "mapper" => "mapper_component_library",
		 "memory" => "mem_component_library",
		 "mmu" => "mmu_component_library",
		 "parport" => "parport_component_library",
		 "prof" => "prof_component_library",
		 "rtc" => "rtc_component_library",
		 "sched" => "sched_component_library",
		 "tclapi" => "tcl_bridge_library",
		 "timers" => "timer_component_library",
		 "uart" => "uart_component_library",
		 "x86" => "x86_component_library"
);


# ----------------------------------------------------------------------------
# Configuration file construction

# Don't bother compute accurate values if config file is temporary
# anyway.
if ($opt_norun || $opt_save_temps) {
  $whoami=qx{whoami}; chop ($whoami);
  $hostname=qx{hostname}; chop ($hostname);
  $date=qx{date}; chop ($date);
  $uname=qx{uname}; chop ($uname);
} else {
  $whoami="";
  $hostname="";
  $date="";
  $uname="";
}
$zeroth_section = "# sid configuration file
# created by $version
# run by $whoami @@ $hostname ($uname) at $date
# args: @@ARGV_COPY\n";

if ($opt_verbose) { $zeroth_section .= "set main verbose? true\n"; }

$cpu_component_type = $cpu_comptype{$opt_cpu} || die "Unknown cpu $opt_cpu for cpu component type\n";
$first_section = "# first section\n" .
  &sidconf_new("$cpu_component_type", "cpu") . "\n" .
  &sidconf_new("hw-mapper-basic", "cpu-mapper") . "\n" .
  &sidconf_new("hw-glue-sequence-8", "init-sequence") . "\n" .
  &sidconf_new("hw-glue-sequence-1", "hw-reset-net") . "\n" .
  &sidconf_new("hw-glue-sequence-8", "deinit-sequence") . "\n" .
  &sidconf_new("hw-glue-sequence-1", "yield-net") . "\n" .
  &sidconf_new("hw-glue-sequence-2", "cache-flush-net") . "\n" .
  &sidconf_new("sid-sched-host-accurate", "host-sched") . "\n" .
  &sidconf_new("sid-sched-sim", "target-sched") . "\n" .
  "";

if ($opt_cpu eq "mt")
  {
      $first_section .= "# add io bus probe\n" .
      &sidconf_new("hw-glue-probe-bus", "io-bus-probe") . "\n";
  }

if ($opt_trace_core || $opt_trace_core_visual)
  {
    $first_section .= "# core tracing\n" .
      &sidconf_new("hw-glue-probe-bus", "bus-probe") . "\n";
    $bus_upstream = "bus-probe upstream";
  }
else
  {
    $bus_upstream = "cpu-mapper access-port";
  }

if ($opt_insn_count)
  {
    $cpu_insn_count = $opt_insn_count;
  }
else
  {
    $cpu_insn_count = 10000;
  }

if ($opt_gprof)
  {
    $first_section .= "# gprof\n" .
      &sidconf_new("sw-profile-gprof", "gprof") . "\n";
  }

$enable_z_packet = "false";
$second_section = "# second section
# settings
set cpu step-insn-count $cpu_insn_count\n" .
($opt_trace_semantics ? "set cpu trace-semantics? $opt_trace_semantics\n" : "") .
($opt_trace_disassemble ? "set cpu trace-disassemble? $opt_trace_disassemble\n" : "") .
($opt_trace_counter ? "set cpu trace-counter? $opt_trace_counter\n" : "") .
($opt_trace_extract ? "set cpu trace-extract? $opt_trace_extract\n" : "") .
($opt_enable_warnings ? "set cpu enable-warnings? $opt_enable_warnings\n" : "") .
"set host-sched num-clients 10 # large enough?
set target-sched num-clients 10 # large enough?
# pin connections
connect-pin main perform-activity -> host-sched advance
connect-pin main perform-activity -> target-sched advance
connect-pin main starting -> init-sequence input
connect-pin main stopping -> deinit-sequence input
connect-pin init-sequence output-0 -> hw-reset-net input
connect-pin hw-reset-net output-0 -> cpu reset!
set target-sched 0-name \"CPU stepping\"
connect-pin target-sched 0-event -> cpu step!
connect-pin target-sched 0-control <- cpu step-cycles
connect-pin target-sched time-query <- cpu time-query
connect-pin target-sched time-high -> cpu time-high
connect-pin target-sched time-low -> cpu time-low
connect-pin yield-net output-0 -> cpu yield
connect-pin yield-net output-0 -> host-sched yield
";

if ($opt_icache) {
  $first_section .= &sidconf_new("hw-cache-$opt_icache", "icache") . "\n";
  $second_section .= "connect-bus cpu insn-memory icache upstream
connect-bus icache downstream $bus_upstream
set icache report-heading \"icache profile report\"
connect-pin init-sequence output-1 -> icache invalidate-all
connect-pin deinit-sequence output-6 -> icache report!
connect-pin cache-flush-net output-0 -> icache flush-all
connect-pin cache-flush-net output-1 -> icache invalidate-all\n";
  # $bus_upstream = "icache upstream";
} else {
  $second_section .= "connect-bus cpu insn-memory $bus_upstream\n";
}

if ($opt_dcache) {
  $first_section .= &sidconf_new("hw-cache-$opt_dcache", "dcache") . "\n";
  $second_section .= "connect-bus cpu data-memory dcache upstream
connect-bus dcache downstream $bus_upstream
set dcache report-heading \"dcache profile report\"
connect-pin init-sequence output-1 -> dcache invalidate-all
connect-pin deinit-sequence output-6 -> dcache report!
connect-pin cache-flush-net output-0 -> dcache flush-all
connect-pin cache-flush-net output-1 -> dcache invalidate-all\n";
  $bus_upstream = "dcache upstream";
} else {
  $second_section .= "connect-bus cpu data-memory $bus_upstream\n";
}

if ($opt_cpu eq "x86")
  {
      $second_section .= "set cpu memory-mode cygmon\n";
  }

if ($opt_cpu eq "mt")
  {
      # Uncomment the next three lines to enable io bus tracing.
      #$second_section .= "# Connect bus tracer to io bus accessor\n" .
      #"connect-bus cpu io-memory io-bus-probe upstream\n" .
      #"set io-bus-probe trace? 1\n";
  }

if ($opt_gprof)
  {
    $second_section .= "# gprof connections
connect-pin deinit-sequence output-7 -> gprof store
connect-pin cpu sample-gprof -> gprof sample
connect-pin cpu gprof-pc -> gprof pc
connect-pin cpu gprof-pc-hi -> gprof pc-hi
connect-pin cpu cg-caller -> gprof cg-caller
connect-pin cpu cg-callee -> gprof cg-callee
relate gprof target-component cpu
";
    if ($opt_cpu eq "mep") {
      $second_section .= "set gprof bucket-size 2\n";
    }
    else {
      $second_section .= "set gprof bucket-size 4\n";
    }
  }

if ($opt_trace_core || $opt_trace_core_visual)
  {
    $second_section .= "# core tracing
connect-bus bus-probe downstream cpu-mapper access-port
";
  }

if ($opt_trace_core)
  {
    $second_section .= "set bus-probe trace? 1\n";
  }

$third_section = "";


# ----------------------------------------------------------------------------
# Board-dependent logic


if ($opt_board =~ /pid7t/)
  {
    # XXX: incorrect!
    # XXX: what about SRAM, SSRAM memory regions???

    if ($opt_board =~ /cygmon/)
      {
	die "board pid7t-cygmon only supported in little-endian mode (-EL)\n" unless ($opt_EL);
	unshift @@opt_memory_region, ( "0x04000000,0x00100000,file=armpid-cygmon.img,read-only" );
      }
    elsif ($opt_board =~ /eCosstub/)
      {
	die "board pid7t-eCos only supported in little-endian mode (-EL)\n" unless ($opt_EL);
	unshift @@opt_memory_region, ( "0x04000000,0x00100000,file=armpid-eCos.img,read-only" );
      }
    if ($opt_board =~ /redboot/)
      {
	die "board pid7t-redboot only supported in little-endian mode (-EL)\n" unless ($opt_EL);
	unshift @@opt_memory_region, ( "0x04000000,0x00100000,file=armpid-redboot.img,read-only" );
      }
    else
      {
	unshift @@opt_memory_region, ( "0x04000000,0x00100000" ); # default 1MB ROM - writeable
      }

    unshift @@opt_memory_region, ( "0x00000000,0x01000000" ); # default 16MB RAM

    $first_section .= "# pid7t components\n" .
      &sidconf_new("hw-remap/pause-arm/ref", "remapper") . "\n" .
      &sidconf_new("hw-timer-arm/ref-sched", "timer1") . "\n" .
      &sidconf_new("hw-timer-arm/ref-sched", "timer2") . "\n" .
      &sidconf_new("hw-interrupt-arm/ref", "intctrl") . "\n" .
      &sidconf_new("hw-uart-ns16550", "uart1") . "\n" .
      &sidconf_new("hw-uart-ns16550", "uart2") . "\n" .
      &sidconf_new("hw-parport-ps/2", "parport") . "\n" .
      "";

    $second_section .= "# pid7t control connections
connect-pin target-sched 2-control <- timer1 divided-clock-control
connect-pin target-sched 2-event -> timer1 divided-clock-event
set target-sched 2-scale 1/4  # artificial speed-up
connect-pin timer1 interrupt -> intctrl interrupt-source-4
connect-pin target-sched 3-control <- timer2 divided-clock-control
connect-pin target-sched 3-event -> timer2 divided-clock-event
set target-sched 3-scale 1/4  # artificial speed-up
connect-pin timer2 interrupt -> intctrl interrupt-source-5
connect-pin intctrl interrupt -> cpu nirq
connect-pin intctrl fast-interrupt -> cpu nfiq
connect-pin hw-reset-net output-0 -> uart1 Reset
connect-pin hw-reset-net output-0 -> uart2 Reset
connect-pin hw-reset-net output-0 -> intctrl reset
connect-pin hw-reset-net output-0 -> timer1 reset
connect-pin hw-reset-net output-0 -> timer2 reset
connect-pin uart1 INTR -> intctrl interrupt-source-8
connect-pin uart2 INTR -> intctrl interrupt-source-9
connect-pin parport INTP -> intctrl interrupt-source-10
# pid7t memory map
connect-bus cpu-mapper intctrl:[0xA000000,0xA000013] intctrl irq-registers
connect-bus cpu-mapper intctrl:[0xA000100,0xA00010F] intctrl fiq-registers
connect-bus cpu-mapper timer1:[0xA800000,0xA80000F] timer1 registers
connect-bus cpu-mapper timer2:[0xA800020,0xA80002F] timer2 registers
connect-bus cpu-mapper remapper:[0xB000000,0xB000037] remapper registers
connect-bus cpu-mapper uart1:[0xD800000,0xD80001F,4,1] uart1 Bus
connect-bus cpu-mapper uart2:[0xD800020,0xD80003F,4,1] uart2 Bus
connect-bus cpu-mapper parport:[0xD800040,0xD80005F,4,1] parport Bus
# set uart unframed mode
set uart1 sio-framing? 0
set uart2 sio-framing? 0
# remapper configuration
# NB: remapping polarity is opposite to document
set remapper num-relocations 1
set remapper 0-start 0x0
set remapper 0-end 0xFFFF
set remapper 0-reloc-to 0x04000000
";

    # reconnect bus masters to pass through remapper
    $third_section .= "# remapper reconnection
connect-bus remapper all $bus_upstream
disconnect-bus cpu insn-memory $bus_upstream
connect-bus cpu insn-memory remapper access-port
disconnect-bus cpu data-memory $bus_upstream
connect-bus cpu data-memory remapper access-port
";

    # create uart <-> real world connections
    if ($opt_board =~ /normalmap/)
      {
    $third_section .= "# disable remapper
set remapper remapping? no
";
      }

      # pull in this configuration.
       configure_uart1_uart2();
  }
elsif ($opt_board =~ /^cma110/)
  {
    # missing:
    # PS/2 kbd/ms, PCI, flash, gloss

    unshift @@opt_memory_region, ( "0x00000000,0x00800000" ); # default 8MB RAM
    if ($opt_board =~ /:cma222/)
      {

        $first_section .= "# cma110/cma222 specific parts\n" .
	  &sidconf_new("hw-timer-arm/ref-sched", "timer") . "\n" .
	  &sidconf_new("hw-interrupt-cogent/cma222", "intctrl") . "\n" .
	  "";

        $second_section .= "# cma222 control connections
connect-pin target-sched 2-control <- timer divided-clock-control
connect-pin target-sched 2-event -> timer divided-clock-event
connect-pin timer interrupt -> intctrl interrupt-source-4
connect-pin intctrl interrupt -> cpu nirq
# connect the on-cpu board devices
connect-bus cpu-mapper intctrl:[0xF600000,0xF600037] intctrl irq-registers
connect-bus cpu-mapper timer:[0xF700020,0xF70003F] timer registers
";
      }
    else
      {
        die "Unknown board `$opt_board'\n";
      }

    $first_section .= "# cma110 common parts\n" .
      &sidconf_new("hw-uart-ns16550", "uart1") . "\n" .
      &sidconf_new("hw-uart-ns16550", "uart2") . "\n" .
      &sidconf_new("hw-parport-ps/2", "parport") . "\n" .
      &sidconf_new("hw-rtc-ds1642", "rtc") . "\n" .
      &sidconf_new("hw-lcd-hd44780u-a02", "lcd") . "\n" .
      &sidconf_new("hw-visual-lcd", "display") . "\n" .
      "";

    $second_section .= "# cma110 control connections
connect-pin hw-reset-net output-0 -> uart1 Reset
connect-pin hw-reset-net output-0 -> uart2 Reset
connect-pin hw-reset-net output-0 -> timer reset
connect-pin uart1 INTR -> intctrl interrupt-source-2
connect-pin uart2 INTR -> intctrl interrupt-source-1
connect-pin parport INTP -> intctrl interrupt-source-4
# configure the clock
set host-sched num-clients 10
set host-sched 0-regular? 1
set host-sched 0-time 1000 # 1 sec
connect-pin host-sched 0-event -> rtc clock
connect-pin rtc clock-control -> host-sched 1-control
connect-pin rtc clock-event <- host-sched 1-event
# configure the lcd
#set display width 40 # 8 chars X 5 pixels per char
# note that hw-lcd-hd44780u may not support width of 80; this board
# has one though.
set display width 80 # 16 chars X 5 pixels per char
set display height 16 # two lines of 8 pixels
connect-pin host-sched 9-event -> lcd refresh-sync-event
connect-pin host-sched 9-control <- lcd refresh-sync-control
connect-pin lcd row-col -> display row-col
connect-pin lcd FR -> display FR
# memory map
# 8MB main memory
#connect-bus PCI pcibus:[0x4000000,0x5FEFFFF] pcibus config-space
#connect-bus ??? ??????:[0x5FF0000,0x5FFFFFF] v360epc registers
# ARM EPROM/FLASH memory
connect-bus cpu-mapper rtc:[0xE800000,0xE803FFF] rtc read-write-port
connect-bus cpu-mapper uart1:[0xE900000,0xE90001F,4,1] uart1 Bus
connect-bus cpu-mapper uart2:[0xE900020,0xE90003F,4,1] uart2 Bus
connect-bus cpu-mapper parport:[0xE900080,0xE90009F,4,1] parport Bus
# kbd/ms
connect-bus cpu-mapper lcd:[0xE900100,0xE90010F,4,1] lcd bus
# DIP switches
#connect-bus PCI pcibus:[0xF200000,0xF2FFFFF] pcibus control-registers
# set uart unframed mode
set uart1 sio-framing? 0
set uart2 sio-framing? 0
";

    # pull in this configuration.
    configure_uart1_uart2();

  }
elsif ($opt_cpu eq "mep" && ($opt_board ne "gloss-stdio"))
  {
    # Fallback defaults for incomplete configurations
    $mepcfg_index = -1; # flag to detect match
    $mepcfg_core_id = 0;
    $mepcfg_core_rev = 1;
    $mepcfg_imem_size = 0;
    $mepcfg_dmem_size = 0;
    $mepcfg_icache_size = 0;
    $mepcfg_icache_way = 1;
    $mepcfg_icache_line_size = 32;
    $mepcfg_dcache_size = 0;
    $mepcfg_dcache_way = 1;
    $mepcfg_dcache_line_size = 32;
    $mepcfg_dsu = 0;
    $mepcfg_intc_channel_bitw = 32;
    $mepcfg_intc = 0;
    $mepcfg_dmac = 0;
    $mepcfg_cop_vliw_bitw = 0;
    $mepcfg_opt_abs = 0;
    $mepcfg_opt_ave = 0;
    $mepcfg_opt_bit = 0;
    $mepcfg_opt_clip = 0;
    $mepcfg_opt_cp = 0;
    $mepcfg_opt_div = 0;
    $mepcfg_opt_ldz = 0;
    $mepcfg_opt_min = 0;
    $mepcfg_opt_mul = 0;
    $mepcfg_opt_sat = 0;
    $mepcfg_dsp = 0;
    $mepcfg_uci = 0;
    @@mep_boards = ();

    $mepcfg_index = 1;
    $mepcfg_imem_size = 16;
    $mepcfg_dmem_size = 32;
    $mepcfg_icache_size = 16;
    $mepcfg_icache_way = 1;
    $mepcfg_icache_line_size = 32;
    $mepcfg_dcache_size = 16;
    $mepcfg_dcache_way = 1;
    $mepcfg_dcache_line_size = 32;
    $mepcfg_intc_channel_bitw = 16;
    $mepcfg_opt_cp = 1;
    $mepcfg_cop_vliw_bitw = 64;
    $mepcfg_opt_abs = 1;
    $mepcfg_opt_ave = 1;
    $mepcfg_opt_bit = 1;
    $mepcfg_opt_clp = 1;
    $mepcfg_opt_div = 1;
    $mepcfg_opt_ldz = 1;
    $mepcfg_opt_min = 1;
    $mepcfg_opt_mul = 1;
    $mepcfg_opt_sat = 1;
    $mepcfg_endian = "big";
    $mepcfg_intc = 1;
    $mepcfg_dsu = 1;
    $mepcfg_dmac = 1;
    $mepcfg_dsp = 1;
    $mepcfg_uci = 1;

    # Eww, ugly hack to change "hw-cpu-mep" in $first_section to
    # "hw-cpu-mep-extNNN" for NNN=$mepcfg_index
    $first_section =~ s|new hw-cpu-mep|new hw-cpu-mep-ext$mepcfg_index|;

    # cpu attributes
    if ($mepcfg_endian eq "big") { $opt_EB = 1; }
    elsif ($mepcfg_endian eq "little") { $opt_EL = 1; }

    $csr17 = (($mepcfg_core_id << 16) | (1 << 8) | $mepcfg_core_rev);
    $second_section .= "set cpu csr17 $csr17\n";

    $second_section .= "set cpu abs-option? " . ($mepcfg_opt_abs) . "\n";
    $second_section .= "set cpu ave-option? " . ($mepcfg_opt_ave) . "\n";
    $second_section .= "set cpu bit-option? " . ($mepcfg_opt_bit) . "\n";
    $second_section .= "set cpu clip-option? " . ($mepcfg_opt_clip) . "\n";
    $second_section .= "set cpu cp-option? " .  ($mepcfg_opt_cp) . "\n";
    $second_section .= "set cpu div-option? " . ($mepcfg_opt_div) . "\n";
    $second_section .= "set cpu ldz-option? " . ($mepcfg_opt_ldz) . "\n";
    $second_section .= "set cpu minmax-option? " . ($mepcfg_opt_min) . "\n";
    $second_section .= "set cpu mul-option? " . ($mepcfg_opt_mul) . "\n";
    $second_section .= "set cpu sat-option? " . ($mepcfg_opt_sat) . "\n";

    $second_section .= "set cpu debug-option? " . ($mepcfg_dsu) . "\n";
    $second_section .= "set cpu dsp-option? " . ($mepcfg_dsp) . "\n";
    $second_section .= "set cpu uci-option? " . ($mepcfg_uci) . "\n";

    $second_section .= "set cpu vliw32-option? " . ($mepcfg_cop_vliw_bits == 32 ? 1 : 0) . "\n";
    $second_section .= "set cpu vliw64-option? " . ($mepcfg_cop_vliw_bits == 64 ? 1 : 0) . "\n";

    # dmem/imem calculations; see mep RCFG definition and memory layout chapter
    $mep_imem_base = ($mepcfg_imem_size == 0 ? 0 : 0x00200000);
    $mep_imem_size = 1024 * $mepcfg_imem_size;
    $mep_dmem_base = (($mepcfg_dmem_size == 0) ? 0 :
		      ($mepcfg_imem_size == 0) ? 0x00200000 :
		      ($mepcfg_dmem_size > 16) ? 0x00208000 :
		      ($mepcfg_imem_size >= 12) ? 0x00204000 :
		      ($mepcfg_dmem_size <= 8) ? 0x00202000 :
		      ($mepcfg_dmem_size <= 16) ? 0x00204000 :
		      0xdeadbeef); # can't happen

    $mep_dmem_bank0_base = $mep_dmem_base;
    $mep_dmem_bank1_base = $mep_dmem_base + 1024 * ($mepcfg_dmem_size == 6 ? 4 :
						    $mepcfg_dmem_size == 12 ? 8 :
						    $mepcfg_dmem_size == 24 ? 16 :
						    $mepcfg_dmem_size / 2);
    $mep_dmem_bank0_size = 1024 * $mepcfg_dmem_size / 2;
    $mep_dmem_bank1_size = 1024 * $mepcfg_dmem_size / 2;

    # These are complex bitfields:
    # LCFG: local memory configuration
    $csr27 = (0x01000100 | # fixed bits
	      ($mepcfg_imem_size << 16) | # IRSZ
	      ($mepcfg_dmem_size << 0) | # DRSZ
	      (($mep_dmem_base >> 12) & 0xf)); # DRBA
    $second_section .= "set cpu csr27 $csr27\n";

    # CCFG: cache memory configuration
    $csr28 = (0x00000000 | # no fixed bits
	      ($mepcfg_icache_size << 16) | # ICSZ
	      ($mepcfg_dcache_size << 0)); # DCSZ
    $second_section .= "set cpu csr28 $csr28\n";

    # control bus layout
    $zeroth_section .= "load libmepfamily.la mepfamily_component_library\n";
    $first_section .= "# control space
new hw-mapper-basic cpu-control-space
set cpu-control-space latency 1
new hw-mapper-basic cpu-local-space
" .
  ($mepcfg_dsu ? "new hw-debug-mep cpu-dsu\n" : "") .
  ($mepcfg_dmac ? "new hw-dma-mep cpu-dmac\n" : "") .
  ($mepcfg_intc ? "new hw-interrupt-mep-${mepcfg_intc_channel_bitw} cpu-intc\n" : "");

    $second_section .= "# configuration / connection of control space peripherals
connect-bus cpu control-space cpu-control-space access-port
" .
  ($mepcfg_dsu ? "connect-bus cpu-control-space dsu[4*0x800-0x802] cpu-dsu status-regs
connect-bus cpu-control-space dsu[4*0x900-0x902] cpu-dsu insn-regs
connect-bus cpu-control-space dsu[4*0xA00-0xA05] cpu-dsu data-regs\n" : "") .
  ($mepcfg_dmac ? "connect-bus cpu-control-space dmac[4*0x1000-0x1009] cpu-dmac control-regs-low
connect-bus cpu-control-space dmac[4*0x1FFF-0x1FFF] cpu-dmac control-regs-high\n" : "") .
  ($mepcfg_intc ? "connect-bus cpu-control-space intc[4*0x0-0x7] cpu-intc registers\n" : "");

    $third_section .=
      ($mepcfg_dmac ? "# mep dmac connection
connect-bus cpu-dmac local-memory cpu-local-space access-port
connect-bus cpu-dmac main-memory cpu-mapper access-port
set target-sched 2-name \"DMA controller burst events\"
connect-pin target-sched 2-event -> cpu-dmac burst-event
connect-pin target-sched 2-control <- cpu-dmac burst-control
" : "") .
  ($mepcfg_intc ? "# mep intc connection
connect-pin cpu-intc interrupt -> cpu interrupt
" : "");

    # mep instruction fetch buffer: 8 bytes
    $first_section .= "# instruction fetch buffer
new hw-cache-buffer-8 cpu-insn-buffer
set cpu-insn-buffer write-through? true
connect-pin cache-flush-net output-0 -> cpu-insn-buffer flush-all
connect-pin init-sequence output-1 -> cpu-insn-buffer invalidate-all
";

    # "default" memory layout
    push @@opt_memory_region, "0x00000000,0x200,latency=5";    # vec
    push @@opt_memory_region, "0x00010000,0x60000,latency=5";  # romdata.m
    push @@opt_memory_region, "0x00080000,0x80000,latency=5";  # code.m
    push @@opt_memory_region, "0x00100000,0x80000,latency=5";  # data.m
    # push @@opt_memory_region, "0x00300000,0x10000";  # icache data testing area
    # push @@opt_memory_region, "0x00310000,0x10000";  # icache tag testing area
    # push @@opt_memory_region, "0x00320000,0x10000";  # dcache data testing area
    # push @@opt_memory_region, "0x00330000,0x10000";  # dcache tag testing area
    push @@opt_memory_region, "0x01000000,0x8000,latency=5";   # romdata.s
    push @@opt_memory_region, "0x01008000,0x8000,latency=5";   # data.s
    push @@opt_memory_region, "0x02000000,0x100000,latency=5"; # data.l
    push @@opt_memory_region, "0x02200000,0x100000,latency=5"; # romdata.l
    push @@opt_memory_region, "0x02300000,0x100000,latency=5"; # code.l
    push @@opt_memory_region, "0x03000000,0x100000,latency=5"; # stack
    push @@opt_memory_region, "0x04000000,0x100000,latency=5"; # heap

    $third_section .= "connect-bus cpu-mapper local:[0x00200000,0x00210000] cpu-local-space access-port\n";

    push @@opt_memory_region, ($mep_imem_base - 0x00200000) . "," . $mep_imem_size . ",bus=cpu-local-space,latency=2" if $mep_imem_size;
    push @@opt_memory_region, ($mep_dmem_bank0_base - 0x00200000) . "," . $mep_dmem_bank0_size . ",bus=cpu-local-space,latency=2" if $mep_dmem_bank0_size;
    push @@opt_memory_region, ($mep_dmem_bank1_base - 0x00200000) . "," . $mep_dmem_bank1_size . ",bus=cpu-local-space,latency=2" if $mep_dmem_bank1_size;

    if ($mepcfg_icache_size)
      {
	$cachetype =
	  ($mepcfg_icache_way == 1 ? "direct" : ($mepcfg_icache_way . "way")) . "/" .
	    $mepcfg_icache_size . "kb" . "/" .
	      $mepcfg_icache_line_size .
		($mepcfg_icache_way == 1 ? "" : "/random");

	configure_mep_cached_bus("insn", $cachetype, $mepcfg_dsu);
	$third_section .= "# icache tag test area
new hw-glue-probe-bus cpu-insn-cache-tagtest
new hw-memory-ram/rom-basic cpu-insn-cache-tag
set cpu-insn-cache-tag size 0x10000
connect-bus cpu-mapper [0x00310000-0x0031FFFF] cpu-insn-cache-tagtest upstream
connect-bus cpu-insn-cache-tagtest downstream cpu-insn-cache-tag read-write-port
connect-pin cpu-insn-cache-tagtest address -> cpu-insn-cache invalidate-all
";
      }
    else
      {
	$second_section .= "
disconnect-bus cpu insn-memory cpu-mapper access-port
connect-bus cpu insn-memory cpu-insn-buffer upstream
connect-bus cpu-insn-buffer downstream cpu-mapper access-port
connect-pin init-sequence output-0 -> cpu-insn-buffer invalidate-all\n";
      }
    if ($mepcfg_dcache_size)
      {
	$cachetype =
	  ($mepcfg_dcache_way == 1 ? "direct" : ($mepcfg_dcache_way . "way")) . "/" .
	    $mepcfg_dcache_size . "kb" . "/" .
	      $mepcfg_dcache_line_size .
		($mepcfg_dcache_way == 1 ? "" : "/random");
	configure_mep_cached_bus("data", $cachetype, $mepcfg_dsu);
	$bus_upstream = "cpu-data-cachefilter access-port";
	$third_section .= "# dcache tag test area
new hw-glue-probe-bus cpu-data-cache-tagtest
new hw-memory-ram/rom-basic cpu-data-cache-tag
set cpu-data-cache-tag size 0x10000
connect-bus cpu-mapper [0x00330000-0x0033FFFF] cpu-data-cache-tagtest upstream
connect-bus cpu-data-cache-tagtest downstream cpu-data-cache-tag read-write-port
connect-pin cpu-data-cache-tagtest address -> cpu-data-cache invalidate-all
";
      }
    else
      {
	$bus_upstream = "cpu-mapper access-port";
      }

    if ($opt_board =~ /gloss/)
      {
	# prevent configure_gloss from adding in the overlapping defaults
	$gloss_memspecs{$opt_cpu}="";
	configure_gloss ($opt_board);
      }
  }
elsif ($opt_board =~ /gloss/)
  {
    configure_gloss($opt_board);
  }
else
  {
    die "Unknown board `$opt_board'\n";
  }



# ------------------------------------------------------------------------
# Handle endianness

if ($opt_EB && $opt_EL) { die "Both -EB and -EL specified\n"; }
if (!$opt_EB && !$opt_EL && $opt_gdb != 0)
  {
    if ($cpu_defaultendian{$opt_cpu} eq "-EB") { $opt_EB = 1; }
    elsif ($cpu_defaultendian{$opt_cpu} eq "-EL") { $opt_EL = 1; }
    else { warn "Should specify endianness"; &usage; }
  }
elsif (!$opt_EB && !$opt_EL && !$exec)
  {
    warn "Should specify executable"; &usage;
  }
if ($opt_EB) { $third_section .= "set cpu endian big\n"; }
if ($opt_EL) { $third_section .= "set cpu endian little\n"; }


# ----------------------------------------------------------------------------
# Misc. logic

# this is used by both the arm710t and cogent cma110 boards.
sub configure_uart1_uart2
  {
    # create uart <-> real world connections
    if ($opt_board =~ /uart1:stdio/)
      {
	$first_section .= "# stdio1\n" .
	  &sidconf_new("sid-io-stdio", "stdio1") . "\n";
	$second_section .= "# stdio1 polling
set host-sched 0-regular? 1
set host-sched 0-time 50
connect-pin host-sched 0-event -> stdio1 poll
";
	$third_section .= "# stdio1 connection
connect-pin uart1 Sout -> stdio1 stdout
connect-pin uart1 Sin <- stdio1 stdin
";
      }

    if ($opt_board =~ /uart2:stdio/)
      {
	$first_section .= "# stdio2\n" .
	  &sidconf_new("sid-io-stdio", "stdio2") . "\n";
	$second_section .= "# stdio2 polling
set host-sched 0-regular? 1
set host-sched 0-time 50
connect-pin host-sched 0-event -> stdio2 poll
";
	$third_section .= "# stdio2 connection
connect-pin uart2 Sout -> stdio2 stdout
connect-pin uart2 Sin <- stdio2 stdout
";
      }

    if ($opt_board =~ /uart1:tty/)
      {
	$any_tcl = 1;

	$first_section .= "# tty1\n" .
	  &sidconf_new("hw-visual-tty", "tty1") . "\n";
	$third_section .= "# tty1 auto-connection
relate tty1 \"hw-uart-ns16550 uart1\" uart1
";
      }

    if ($opt_board =~ /uart2:tty/)
      {
	$any_tcl = 1;

	$first_section .= "# tty2\n" .
	  &sidconf_new("hw-visual-tty", "tty2") . "\n";
	$third_section .= "# tty2 auto-connection
relate tty2 \"hw-uart-ns16550 uart2\" uart2
";
      }

    if ($opt_board =~ /uart1:([0-9]+)/)
      {
	$port = $1;

	$first_section .= "# uart1 socket\n" .
	  &sidconf_new("sid-io-socket-server", "uart1-console") . "\n";

	$second_section .= "# uart1 socketio config
connect-pin host-sched 3-event -> uart1-console poll-event
connect-pin host-sched 3-control <- uart1-console poll-control
set uart1-console verbose? $opt_verbose
set uart1-console sockaddr-local 0.0.0.0:$port
connect-pin init-sequence output-2 -> uart1-console init
connect-pin deinit-sequence output-6 -> uart1-console fini
# make big receive fifo
set uart1 in-fifo-length 4096
";

	$third_section .= "# uart1 <-> socket
connect-pin uart1 Sout -> uart1-console tx
connect-pin uart1 Sin <- uart1-console rx
";
      }

    if ($opt_board =~ /uart2:([0-9]+)/)
      {
	$port = $1;

	$first_section .= "# uart2 socket\n" .
	  &sidconf_new("sid-io-socket-server", "uart2-console") . "\n";

	$second_section .= "# uart2 socketio config
connect-pin host-sched 4-event -> uart2-console poll-event
connect-pin host-sched 4-control <- uart2-console poll-control
set uart2-console verbose? $opt_verbose
set uart2-console sockaddr-local 0.0.0.0:$port
connect-pin init-sequence output-2 -> uart2-console init
connect-pin deinit-sequence output-6 -> uart2-console fini
# make big receive fifo
set uart2 in-fifo-length 4096
";

	$third_section .= "# uart2 <-> socket
connect-pin uart2 Sout -> uart2-console tx
connect-pin uart2 Sin <- uart2-console rx
";
      }

    if ($opt_board =~ /uart1:gdb/ && $opt_gdb != 0)
      {
	$third_section .= "# uart1 <-> cpu-gdb also
connect-pin uart1 Sout -> cpu-gdb target-tx
";
      }

    if ($opt_board =~ /uart2:gdb/ && $opt_gdb != 0)
      {
	$third_section .= "# uart2 <-> cpu-gdb also
connect-pin uart2 Sout -> cpu-gdb target-tx
";
      }
  }


sub configure_harvard_bus
  {
    my $cpu = $_[0];

    $first_section .= "# $cpu harvard bus mappers\n" .
	  &sidconf_new("hw-mapper-basic", "data-mapper") . "\n" .
	  &sidconf_new("hw-mapper-basic", "insn-mapper") . "\n";

    $second_section .= "# $cpu harvard bus specific.
disconnect-bus cpu insn-memory $bus_upstream
connect-bus cpu insn-memory insn-mapper access-port
disconnect-bus cpu data-memory $bus_upstream
";
    if ($opt_trace_core || $opt_trace_core_visual)
      {
        $second_section .= "# $cpu harvard bus data probe.
connect-bus cpu data-memory bus-probe upstream
disconnect-bus bus-probe downstream cpu-mapper access-port
connect-bus bus-probe downstream data-mapper access-port
";
      }
    else
      {
    $second_section .= "# $cpu harvard bus data mapping.
connect-bus cpu data-memory data-mapper access-port
";
      }

    if ($opt_board =~ /gloss/)
      {
        $second_section .= "# $cpu harvard bus specific gloss .
disconnect-bus gloss target-memory $bus_upstream
connect-bus gloss target-memory data-mapper access-port
";
      }

  }

sub configure_mep_cached_bus
  {
    my $addrspace = $_[0];
    my $cachetype = $_[1];
    my $dsu_p = $_[2];

    $first_section .= "# $addrspace caching
new hw-mapper-transparent cpu-${addrspace}-cachefilter
new hw-cache-$cachetype cpu-${addrspace}-cache
set cpu-${addrspace}-cache hit-latency 1
set cpu-${addrspace}-cache miss-latency 1
connect-pin cpu ${addrspace}-cache-enable -> cpu-${addrspace}-cachefilter bank
connect-pin cache-flush-net output-0 -> cpu-${addrspace}-cache flush-all
connect-pin cache-flush-net output-1 -> cpu-${addrspace}-cache invalidate-all
";
    $second_section .= "# $addrspace cache filtering
disconnect-bus cpu ${addrspace}-memory $bus_upstream
";

    if ($addrspace eq "insn") {
      $second_section .= "connect-bus cpu insn-memory cpu-insn-buffer upstream\n";
      $cpubus = "cpu-insn-buffer downstream";
    } else {
      $cpubus = "cpu data-memory";
    }

    if ($dsu_p) {
      $second_section .= "connect-bus $cpubus cpu-dsu ${addrspace}-upstream
connect-bus cpu-dsu ${addrspace}-downstream cpu-${addrspace}-cachefilter access-port
";
    } else {
      $second_section .= "connect-bus $cpubus cpu-${addrspace}-cachefilter access-port\n";
    }

    $second_section .=
"connect-bus cpu-${addrspace}-cachefilter ${addrspace}:[0x00000000-0x007FFFFF]{0,1}:uncacheable cpu-mapper access-port
connect-bus cpu-${addrspace}-cachefilter ${addrspace}:[0x00800000-0x7FFFFFFF]{1}:cached cpu-${addrspace}-cache upstream
connect-bus cpu-${addrspace}-cachefilter ${addrspace}:[0x00800000-0x7FFFFFFF]{0}:uncached cpu-mapper access-port
connect-bus cpu-${addrspace}-cachefilter ${addrspace}:[0x80000000-0xBFFFFFFF]{0,1}:uncacheable cpu-mapper access-port
connect-bus cpu-${addrspace}-cachefilter ${addrspace}:[0xC0000000-0xFFFFFFFF]{1}:cached cpu-${addrspace}-cache upstream
connect-bus cpu-${addrspace}-cachefilter ${addrspace}:[0xC0000000-0xFFFFFFFF]{0}:uncached cpu-mapper access-port
connect-bus cpu-${addrspace}-cache downstream cpu-mapper access-port
# $addrspace cache setup
set cpu-${addrspace}-cache report-heading \"${addrspace} profile report\"
connect-pin init-sequence output-1 -> cpu-${addrspace}-cache invalidate-all\n" .
  ($opt_trace_counter ? "connect-pin deinit-sequence output-6 -> cpu-${addrspace}-cache report!\n" : "");
  }

if ($opt_cpu eq "arm")
  {
    $enable_z_packet = "true";
  }

if ($opt_cpu eq "mt")
  {
    $enable_z_packet = "true";
  }

if ($opt_cpu eq "sh5")
  {
    $enable_z_packet = "true";
  }

if ($opt_cpu eq "xstormy16")
  {
    $enable_z_packet = "true";
  }

if ($opt_cpu eq "mep")
  {
    $enable_z_packet = "true";
  }

# --engine
if ($opt_engine eq "pbb")
  {
# FIXME: the x86 component should support this setting
    if ($opt_cpu ne "x86")
      {
	$second_section .= "set cpu engine-type pbb\n";
      } 
  }
elsif ($opt_engine eq "scache")
  {
    $second_section .= "set cpu engine-type scache\n";
  }
else
  {
    die "Invalid engine type $opt_engine\n";
  }


# --gdb
# Generate a gdb component for each processor requested.
$non_cpu_gdbs=0;
foreach $processor (keys %opt_gdbport)
  {
    $first_section .= "# $processor gdb\n" .
      &sidconf_new("sw-debug-gdb", "${processor}-gdb") . "\n" .
      &sidconf_new("sid-io-socket-server", "${processor}-gdb-socket") . "\n";
    $second_section .= "# ${processor}-gdb
relate ${processor}-gdb cpu $processor
relate ${processor}-gdb cfgroot main
relate ${processor}-gdb target-schedulers target-sched
relate ${processor}-gdb host-schedulers host-sched
connect-pin ${processor}-gdb process-signal -> main stop!
connect-pin init-sequence output-3 -> ${processor}-gdb init
connect-pin deinit-sequence output-5 -> ${processor}-gdb deinit
connect-pin ${processor}-gdb yield -> yield-net input
connect-pin ${processor}-gdb flush-icache -> cache-flush-net input
connect-pin cache-flush-net output-1 -> $processor flush-icache
connect-pin ${processor}-gdb restart -> hw-reset-net input
set ${processor}-gdb exit-on-detach? 1\n" .
($opt_verbose ? "set ${processor}-gdb trace-gdbsid? $opt_verbose\n" : "") .
($opt_verbose ? "set ${processor}-gdb trace-gdbserv? $opt_verbose\n" : "") .
"# ${processor}-gdb-socket
connect-pin init-sequence output-2 -> ${processor}-gdb-socket init
connect-pin deinit-sequence output-6 -> ${processor}-gdb-socket fini
connect-pin ${processor}-gdb-socket rx -> ${processor}-gdb remote-rx
connect-pin ${processor}-gdb-socket tx <- ${processor}-gdb remote-tx
connect-pin host-sched 6-event -> ${processor}-gdb-socket poll-event
connect-pin host-sched 6-control <- ${processor}-gdb-socket poll-control
set ${processor}-gdb-socket sockaddr-local 0.0.0.0:$opt_gdbport{$processor}\n" .
($opt_verbose ? "set ${processor}-gdb-socket verbose? $opt_verbose\n" : "");
    if ($processor ne "cpu")
      {
	$non_cpu_gdbs ++;
      }
  }

# Update the enable thresholds of the shedulers to account for GDB components
# attached to processors other than the cpu.
if ($non_cpu_gdbs != 0)
  {
    $opt_persistent = 1;
    $sched_threshold = $non_cpu_gdbs + 1;
    $third_section .= "
# We want the target scheduler to come up enabled, so update the enabled?
# attribute to match the threshold. The GDB components will take care of
# disabling it when necessary.
set target-sched enable-threshold $sched_threshold
set target-sched enabled? $sched_threshold
";
  }

# Additional settings for main cpu gdb.
if ($opt_gdb)
  {
    if ($opt_board =~ /gloss/)
      {
	$second_section .= "# gdb w/ gloss
connect-pin gloss trap-chain <-> cpu-gdb trap
connect-pin gloss trap-code-chain -> cpu-gdb trap-code
connect-pin gloss process-signal -> cpu-gdb gloss-process-signal
connect-pin gloss debug-tx -> cpu-gdb target-tx
relate cpu-gdb gloss gloss
set cpu-gdb enable-Z-packet? $enable_z_packet
set cpu-gdb operating-mode? false
";
      }
    else
      {
	$second_section .= "# gdb w/o gloss
connect-pin cpu trap <-> cpu-gdb trap
connect-pin cpu trap-code -> cpu-gdb trap-code
";
      }
  }

# Generate a loader for each processor
foreach $processor (keys %opt_load)
  {
    $first_section .= "# ${processor} loader\n" .
	&sidconf_new("sw-load-elf", "${processor}-loader") . "\n";
    $second_section .= "# ${processor} loader
set ${processor}-loader file \"$opt_load{$processor}\" \n" .
($opt_verbose ? "set ${processor}-loader verbose? $opt_verbose\n" : "");

    # Have the loader write data via $load_mapper_data for the "cpu" processor
    if ($processor eq "cpu")
      {
	  $second_section .=
	      "connect-bus ${processor}-loader load-accessor-data $load_mapper_data\n";
      }
    else
      {
	  $second_section .=
	      "connect-bus ${processor}-loader load-accessor-data ${processor}-mapper access-port # don't trace loading\n";
      }

    $second_section .=
	"connect-bus ${processor}-loader load-accessor-insn ${processor}-mapper access-port # don't trace loading
connect-pin init-sequence output-1 -> ${processor}-loader load!
connect-pin ${processor}-loader start-pc-set -> ${processor} start-pc-set!
connect-pin ${processor}-loader endian-set -> ${processor} endian-set!
connect-pin ${processor}-loader error -> main stop!
";
  }

# --trace-core-visual

if ($opt_trace_core_visual != 0)
  {
    $any_tcl = 1;

    $first_section .= "# visual bus access viewer\n" .
      &sidconf_new("hw-visual-probe-bus", "visual-bus-probe") . "\n";
    $second_section .= "# visual bus access viewer
set visual-bus-probe addr2line-cmd \"arm-elf-addr2line -C -f -e $exec\"
relate visual-bus-probe cpu cpu
connect-pin bus-probe address -> visual-bus-probe address
connect-pin bus-probe data-high -> visual-bus-probe data-high
connect-pin bus-probe data-low -> visual-bus-probe data-low
connect-pin bus-probe status -> visual-bus-probe status
connect-pin bus-probe type -> visual-bus-probe type
";
  }

# --tksm
if ($opt_tksm != 0)
  {
    $any_tcl = 1;

    $first_section .= "# tk system monitor\n" .
      &sidconf_new("sid-control-tksm", "tksm") . "\n";

    $second_section .= "# tk system monitor
relate main component-catalog-informees tksm
# refresh
set host-sched 1-regular? 1
set host-sched 1-time 1000
connect-pin host-sched 1-event -> tksm refresh
";
  }

if ($opt_tksm && $opt_gdb)
  {
    $third_section .= "# triggerpoint signal
connect-pin tksm triggerpoint-hit -> cpu-gdb stop-target
";
  }


# ----------------------------------------------------------------------------
# Memory logic.

$mems = 0;
while ($#opt_memory_region >= 0)
  {
    $spec = shift @@opt_memory_region;
    $mems ++;
    # Format: BASE,SIZE
    #         [,bus=MAPPER]
    #         [,read-only]
    #         [,alias=BASE2]
    #         [,file=NAME]
    #         [,mmap]
    #         [,latency=R[:W]]
    #         [,relate=COMPONENT/RELATION]  (deprecated)
    @@spec = split /,/, $spec;

    # print STDERR "spec=$spec\n";
    die "Cannot parse memory region specification `$spec'.\n" if ($#spec < 1);

    $base = shift @@spec;
    $base = oct($base) if ($base =~ /^0/);
    $size = shift @@spec;
    $size = oct($size) if ($size =~ /^0/);

    die "Illegal memory region size `$size'\n" if ($size <= 0);

    $last = $base + $size - 1;
    $membus = "read-write-port"; # default read-write
    $memfile = ""; # default no file
    $memmapper = "cpu-mapper";
    $mmap = 0; # default no mmap
    $latr = 0; $latw = 0; # default no latencies
    @@aliases = ();
    @@relates = ();

    # common stuff
    $first_section .= "# memory region $mems ($spec)\n" .
      &sidconf_new("hw-memory-ram/rom-basic", "mem$mems") . "\n";
    $third_section .= "# memory region $mems ($spec) configuration\n" .
      "set mem$mems size $size\n";

    # consume other options
    while ($#spec >= 0)
      {
	$opt = shift @@spec;
	if ($opt eq "read-only") { $membus = "read-only-port"; }
	elsif ($opt eq "mmap") { $mmap = 1; }
	elsif ($opt =~ /bus=(.+)/) { $memmapper = $1; }
	elsif ($opt =~ /file=(.+)/) { $memfile = $1; }
	elsif ($opt =~ /alias=(.+)/) { push @@aliases, $1 }
	elsif ($opt =~ /relate=(.+)/) { push @@relates, $1 }
	elsif ($opt =~ /latency=(\d+):(\d+)/) { $latr = $1; $latw = $2 }
	elsif ($opt =~ /latency=(\d+)/) { $latr = $1; $latw = $1 }
	else { die "Cannot parse memory region option `$opt'.\n"; }
      }

    # process memory maps
    $third_section .= "connect-bus $memmapper mem$mems:[$base,$last] mem$mems $membus\n";

    foreach $alias (@@aliases)
      {
	$alias = oct($alias) if ($alias =~ /^0/);
	$aliasend = $alias + $size - 1;
	$third_section .= "connect-bus $memmapper mem$mems:[$alias,$aliasend] mem$mems $membus\n";
      }

    foreach $relate (@@relates) {
      $relate =~ /(.*)\/(.*)/;
      $third_section .= "relate $1 $2 mem$mems\n";
    }

    # process file backing store
    if ($memfile)
      {
	$third_section .= "set mem$mems image-file \"$memfile\"\n";

	if ($mmap) {
	  $third_section .= "connect-pin init-sequence output-1 -> mem$mems image-mmap\n";
	} else {
	  $third_section .= "connect-pin init-sequence output-1 -> mem$mems image-load\n";
	}

	# save only if memory was writeable and not memory-mapped
	if ($membus eq "read-write-port" && !$mmap) {
	  $third_section .= "connect-pin deinit-sequence output-6 -> mem$mems image-store\n";
	}
      }

    # process latencies
    if ($latr != 0) { $third_section .= "set mem$mems read-latency $latr\n" }
    if ($latw != 0) { $third_section .= "set mem$mems write-latency $latw\n" }
  }


# ----------------------------------------------------------------------------
# Really miscellanous stuff.

# sidrtc: 8 bytes
if ($opt_sidrtc)
  {
    $addr = $opt_sidrtc;
    $addr = oct($addr) if ($addr =~ /^0/);
    $addrend = $addr + 7;

    $first_section .= "# special rtc\n" .
      &sidconf_new("hw-rtc-sid", "sidrtc") . "\n";

    $third_section .= "# special rtc mapping
connect-bus cpu-mapper sidrtc:[$addr,$addrend] sidrtc registers
";
  }


# sidcodec: 20 bytes
if ($opt_sidcodec)
  {
    $addr = $opt_sidcodec;
    $addr = oct($addr) if ($addr =~ /^0/);
    $addrend = $addr + 19;

    $first_section .= "# special codec & host audio\n" .
      &sidconf_new("hw-audio-sid", "sidcodec") . "\n" .
      &sidconf_new("sid-io-audio", "sidaudio") . "\n" .
      "";

    $third_section .= "# special codec mapping
connect-bus cpu-mapper sidcodec:[$addr,$addrend] sidcodec registers
# codec <-> host audio connections
connect-pin sidcodec tx-sample -> sidaudio tx-sample
connect-pin sidcodec rx-sample <- sidaudio rx-sample
connect-pin sidcodec tx-mode -> sidaudio tx-mode
connect-pin sidcodec tx-pending <- sidaudio tx-pending
connect-pin sidcodec rx-mode -> sidaudio rx-mode
connect-pin sidcodec rx-pending <- sidaudio rx-pending
connect-pin sidcodec config-set -> sidaudio config-set
# host audio polling
set host-sched 7-regular? 1
set host-sched 7-time 100
connect-pin host-sched 7-event -> sidaudio poll
";
  }

# --tksched
if ($opt_tksched != 0)
  {
    $any_tcl = 1;

    $first_section .= "# tk visual scheduler controller\n" .
      &sidconf_new("sid-visual-sched", "tksched") . "\n";

    $second_section .= "# tk system monitor
relate tksched scheduler target-sched
";
  }

# any tcl stuff?
if ($any_tcl)
  {
    $first_section .= "# tcl/tk adaptive event polling" . "\n" .
      &sidconf_new("bridge-tcl", "tcl-event-consumer") . "\n";
    $third_section .= "# tcl/tk adaptive event polling
connect-pin host-sched 2-event -> tcl-event-consumer !event
connect-pin host-sched 2-control <- tcl-event-consumer !event-control
connect-pin init-sequence output-7 -> tcl-event-consumer !event
";
  }


# add dso commands
foreach $lib (sort keys %component_libs)
  {
    $symbol = $component_libs{$lib};
    $lib_la = "lib" . $lib . ".la";

    # minor optimization: don't include large tcl dll unless needed
    next if ($any_tcl == 0 && $lib eq "tclapi");

    $zeroth_section .= "load $lib_la $symbol\n";
  }


# ----------------------------------------------------------------------------
if ($opt_persistent) { $zeroth_section .= "set main persistent? true\n"; }

# Build config file
$tmpdir = $ENV{'TMPDIR'} ? $ENV{'TMPDIR'} : "/tmp";
$basename = $exec ne "" ? `basename $exec` : "sid";
chomp($basename);
$tfile = $opt_save_temps ? "$basename.conf" : "$tmpdir/$basename-$$.conf";
open CONFIG, ">$tfile" || die ("Cannot write to $tfile\n");
print CONFIG $zeroth_section;
print CONFIG $first_section;
print CONFIG $second_section;
print CONFIG $third_section;
close CONFIG;

# ----------------------------------------------------------------------------
# Exit early?

if ($opt_save_temps)
  {
    print "Configuration file saved to `$tfile'.\n";
  }

if ($opt_no_run)
  {
    exit (0);
  }


# ----------------------------------------------------------------------------
# (Generate and) run a simulator

@@args = ("$sid");
push @@args, ($tfile);

# spawn sid child process
system @@args;
$exit_value = $?;

# Process the exit code.
if (($exit_value & 0xff00) == 0xff00) # catch old perls' fork rc bugs
 {
   print "\nCannot run `@@args': $!\n";
 }

if (! $opt_save_temps)
  {
    unlink $tfile;
  }

exit ($exit_value >> 8);


# ----------------------------------------------------------------------------


sub sidconf_new {
  my ($comptype,$compname) = @@_;
  my $wrap_this = 0;
  for ($i=0; $i<scalar(@@opt_wrap); $i++) {
    if ($opt_wrap[$i] eq $compname) {
      $wrap_this = 1;
      $any_tcl = 1;
    }
  }
  # print $wrap_this == 0 ? "not" : "";
  # print " wrapping $compname $comptype\n";
  if ($wrap_this)
    {
      return "new sid-api-trace ${compname}
new ${comptype} ${compname}-traced
relate ${compname} victim ${compname}-traced";
    }
  else
    {
      return "new ${comptype} ${compname}";
    }
}


# Local Variables:
# mode: perl
# End:
@


1.39
log
@sh64 configury.
@
text
@d20 1
d40 1
d52 1
d101 1
a101 1
$version=q$Id: configrun-sid.in,v 1.38 2006/06/26 22:00:12 brolley Exp $;
d456 1
a516 1
set gprof bucket-size 4 # bytes per bucket
d518 6
d725 243
d1158 25
d1184 7
d1192 13
d1226 4
@


1.38
log
@2006-06-26  Dave Brolley  <brolley@@redhat.com>

        * configrun-sid.in (opt_gprof): Do not
        "connect-pin target-sched 0-event -> gprof sample".
        Do not "set gprof value-attribute pc".
        connect-pin cpu sample-gprof -> gprof sample.
        connect-pin cpu gprof-pc -> gprof pc.
        connect-pin cpu gprof-pc-hi -> gprof pc-hi.
@
text
@d21 1
d29 1
d40 1
d51 1
d98 1
a98 1
$version=q$Id: configrun-sid.in,v 1.37 2005/12/16 10:23:12 nathan Exp $;
d919 5
@


1.37
log
@	Second part of ms1 to mt renaming.
	* bfd/archures.c (bfd_arch_mt): Renamed.
	(bfd_mt_arch): Renamed.
	(bfd_archures_list): Adjusted.
	* bfd/bfd-in2.h: Rebuilt.
	* bfd/config.bfd (mt): Remove special case targ_archs.
	(mt-*-elf): Rename bfd_elf32_mt_vec.
	* bfd/configure: Rebuilt.
	* bfd/configure.in (bfd_elf32_mt_vec): Renamed.
	(selarchs) Remove mt special case.
	* bfd/cpu-mt.c (arch_info_struct): Adjust.
	(bfd_mt_arch): Renamed, adjust.
	* bfd/elf32-mt.c (mt_reloc_type_lookup, mt_info_to_howto_rela,
	mt_elf_relocate_hi16, mt_final_link_relocate, mt_relocate_section,
	mt_elf_howto_table): Renamed, adjusted.
	(mt_elf_gc_mark_hook, mt_elf_gc_sweep_hook, mt_elf_check_relocs,
	elf32_mt_machine, mt_elf_object_p, mt_elf_set_private_flags,
	mt_elf_copy_private_bfd_data, mt_elf_merge_private_bfd_data,
	mt_elf_print_private_bfd_data): Renamed, adjusted.
	(TARGET_BIG_SYM, TARGET_BIG_NAME, ELF_ARCH, ELF_MACHINE_CODE,
	ELF_MAXPAGESIZE, elf_info_to_howto, elf_backend_relocate_section,
	bfd_elf32_bfd_reloc_type_lookup, elf_backend_gc_mark_hook,
	elf_backend_gc_sweep_hook, elf_backend_check_relocs,
	eld_backend_object_p, bfd_elf32_bfd_set_private_flags,
	bfd_elf32_bfd_copy_private_bfd_data,
	bfd_elf32_bfd_merge_private_bfd_data,
	bfd_elf32_bfd_print_private_bfd_data): Adjusted.
	* bfd/libbfd.h: Regenerated.
	* bfd/reloc.c (BFD_RELOC_MT_PC16, BFD_RELOC_MT_HI16,
	BFD_RELOC_MT_LO16, BFD_RELOC_MT_GNU_VTINHERIT,
	BFD_RELOC_MT_GNU_VTENTRY, BFD_RELOC_MT_PCINSN8): Renamed.
	* bfd/targets.c (bfd_elf32_mt_vec): Renamed.
	(_bfd_target_vector): Adjusted.
	* binutils/readelf.c (guess_is_rela): Use EM_MT.
	(dump_relocations, get_machine_name): Adjust.

	* cpu/mt.cpu (define-arch, define-isa): Set name to mt.
	(define-mach): Adjust.
	* cpu/mt.opc (CGEN_ASM_HASH): Update.
	(mt_asm_hash, mt_cgen_insn_supported): Renamed.
	(parse_loopsize, parse_imm16): Adjust.

	* gas/configure: Rebuilt.
	* gas/configure.in (mt): Remove special case.
	* gas/config/tc-mt.c (opcodes/mt-desc.h, opcodes/mt-opc.h): Change
	#includes.
	(mt_insn, mt_mach, mt_mach_bitmask, mt_flags, mt_architectures):
	Rename, adjust.
	(md_parse_option, md_show_usage, md_begin, md_assemble,
	md_cgen_lookup_reloc, md_atof): Adjust.
	(mt_force_relocation, mt_apply_fix, mt_fix_adjustable): Rename, adjust.
	* gas/config/tc-mt.h (TC_MT): Rename.
	(LISTING_HEADER, TARGET_ARCH, TARGET_FORMAT): Adjust.
	(md_apply_fix): Adjust.
	(mt_apply_fix, mt_fix_adjustable, mt_force_relocation): Rename.
	(TC_FORCE_RELOCATION, tc_fix_adjustable): Adjust.

	* gdb/mt-tdep.c (mt_arch_constants, mt_gdb_regnums): Rename, adjust.
	(mt_register_name, mt_register_type, mt_register_reggroup_p,
	mt_return_value, mt_skip_prologue, mt_breapoint_from_pc,
	mt_pseudo_register_read, mt_pseudo_register_write, mt_frame_align,
	mt_registers_info, mt_push_dummy_call, mt_unwind_cache,
	mt_frame_unwind_cache, mt_unwind_pc, mt_unwind_dummy_id,
	mt_frame_this_id, mt_frame_prev_register, mt_frame_base_address,
	mt_frame_unwind, mt_frame_sniffer, mt_frame_base, mt_gdbarch_init,
	_initialize_mt_tdep): Rename & adjust.

	* include/dis-asm.h (print_insn_mt): Renamed.

	* include/elf/common.h (EM_MT): Renamed.
	* include/elf/mt.h: Rename relocs, cpu & other defines.

	* ld/emulparams/elf32mt.sh (ARCH, OUTPUT_FORMAT): Adjust.

	* opcodes/Makefile.am (HFILES, CFILES, ALL_MACHINES): Adjust.
	(stamp-mt): Adjust rule.
	(mt-asm.lo, mt-desc.lo, mt-dis.lo, mt-ibld.lo, mt-opc.lo): Rename &
	adjust.
	* opcodes/Makefile.in: Rebuilt.
	* opcodes/configure: Rebuilt.
	* opcodes/configure.in (bfd_mt_arch): Rename & adjust.
	* opcodes/disassemble.c (ARCH_mt): Renamed.
	(disassembler): Adjust.
	* opcodes/mt-asm.c: Renamed, rebuilt.
	* opcodes/mt-desc.c: Renamed, rebuilt.
	* opcodes/mt-desc.h: Renamed, rebuilt.
	* opcodes/mt-dis.c: Renamed, rebuilt.
	* opcodes/mt-ibld.c: Renamed, rebuilt.
	* opcodes/mt-opc.c: Renamed, rebuilt.
	* opcodes/mt-opc.h: Renamed, rebuilt.

	* sid/Makefile.in: Rebuilt.
	* sid/aclocal.m4: Rebuilt.
	* sid/configure: Rebuilt.
	* sid/sid.spec: Adjust.
	* sid/bsp/Makefile.am: Adjust.
	* sid/bsp/Makefile.in: Rebuilt.
	* sid/bsp/aclocal.m4: Rebuilt.
	* sid/bsp/configrun-sid.in: Adjust.
	* sid/bsp/pregen/Makefile.in: Rebuilt.
	* sid/bsp/pregen/mt-gdb.conf: Renamed & rebuilt.
	* sid/bsp/pregen/mt-gloss.conf: Renamed & rebuilt.
	* sid/bsp/pregen/pregen-configs.in: Adjust.
	* sid/component/aclocal.m4: Rebuilt.
	* sid/component/configure: Rebuilt.
	* sid/component/tconfig.in: Adjust.
	* sid/component/bochs/aclocal.m4: Rebuilt.
	* sid/component/cache/Makefile.in: Rebuilt.
	* sid/component/cgen-cpu/Makefile.in: Rebuilt.
	* sid/component/cgen-cpu/aclocal.m4: Rebuilt.
	* sid/component/cgen-cpu/compCGEN.cxx: Adjust.
	* sid/component/cgen-cpu/configure: Rebuilt.
	* sid/component/cgen-cpu/configure.in: Rebult.
	* sid/component/cgen-cpu/mt/Makefile.am: Adjust.
	* sid/component/cgen-cpu/mt/Makefile.in: Rebuilt.
	* sid/component/cgen-cpu/mt/hw-cpu-mt.txt: Adjust.
	* sid/component/cgen-cpu/mt/mt-cpu.h: Rebuilt.
	* sid/component/cgen-cpu/mt/mt-decode.cxx: Rebuilt.
	* sid/component/cgen-cpu/mt/mt-decode.h: Rebuilt.
	* sid/component/cgen-cpu/mt/mt-defs.h: Rebuilt.
	* sid/component/cgen-cpu/mt/mt-desc.h: Rebuilt.
	* sid/component/cgen-cpu/mt/mt-sem.cxx: Rebuilt.
	* sid/component/cgen-cpu/mt/mt-write.cxx: Rebuilt.
	* sid/component/cgen-cpu/mt/mt.cxx: Adjust.
	* sid/component/cgen-cpu/mt/mt.h: Adjust.
	* sid/component/consoles/Makefile.in: Rebuilt.
	* sid/component/families/aclocal.m4: Rebuilt.
	* sid/component/families/configure: Rebuilt.
	* sid/component/gdb/Makefile.in: Rebuilt.
	* sid/component/gloss/Makefile.in: Rebuilt.
	* sid/component/glue/Makefile.in: Rebuilt.
	* sid/component/ide/Makefile.in: Rebuilt.
	* sid/component/interrupt/Makefile.in: Rebuilt.
	* sid/component/lcd/Makefile.in: Rebuilt.
	* sid/component/lcd/testsuite/Makefile.in: Rebuilt.
	* sid/component/loader/Makefile.am: Rebuilt.
	* sid/component/loader/Makefile.in: Rebuilt.
	* sid/component/mapper/Makefile.in: Rebuilt.
	* sid/component/mapper/testsuite/Makefile.in: Rebuilt.
	* sid/component/memory/Makefile.in: Rebuilt.
	* sid/component/mmu/Makefile.in: Rebuilt.
	* sid/component/parport/Makefile.in: Rebuilt.
	* sid/component/profiling/Makefile.in: Rebuilt.
	* sid/component/rtc/Makefile.in: Rebuilt.
	* sid/component/sched/Makefile.in: Rebuilt.
	* sid/component/testsuite/Makefile.in: Rebuilt.
	* sid/component/timers/aclocal.m4: Rebuilt.
	* sid/component/timers/configure: Rebuilt.
	* sid/component/uart/Makefile.in: Rebuilt.
	* sid/component/uart/testsuite/Makefile.in: Rebuilt.
	* sid/config/config.sub: Adjust.
	* sid/config/info.tcl.in: Adjust.
	* sid/config/sidtargets.m4: Adjust.
	* sid/doc/Makefile.in: Rebuilt.
	* sid/main/dynamic/Makefile.am: Rebuilt.
	* sid/main/dynamic/Makefile.in: Rebuilt.
	* sid/main/dynamic/aclocal.m4: Rebuilt.
	* sid/main/dynamic/configure: Rebuilt.
@
text
@d94 1
a94 1
$version=q$Id: configrun-sid.in,v 1.36 2005/06/24 18:42:19 brolley Exp $;
a501 1
connect-pin target-sched 0-event -> gprof sample
d503 3
a505 1
relate gprof target-component cpu
d508 1
a508 1
set gprof value-attribute pc
@


1.36
log
@2005-06-24  Dave Brolley  <brolley@@redhat.com>

        * configrun-sid.in: Add ms1 support.
        * Makefile.am: Likewise.
@
text
@d20 1
a20 1
		 "ms1" => "hw-cpu-ms1",
d27 1
a27 1
		      "ms1" => "-EB",
d37 1
a37 1
		   "ms1" => "sw-gloss-generic/libgloss",
d47 1
a47 1
		   "ms1" => "0x00000000,0x00800000",
d94 1
a94 1
$version=q$Id: configrun-sid.in,v 1.35 2003/10/21 21:27:41 brolley Exp $;
d399 1
a399 1
if ($opt_cpu eq "ms1")
d491 1
a491 1
if ($opt_cpu eq "ms1")
d909 1
a909 1
if ($opt_cpu eq "ms1")
@


1.35
log
@2003-10-07  Dave Brolley  <brolley@@redhat.com>

        For Graydon Hoare  <graydon@@redhat.com>
        * configrun-sid.in: Add --tksched option for scheduler control panel.
@
text
@d20 1
d27 1
d37 1
d47 1
d94 1
a94 1
$version=q$Id: configrun-sid.in,v 1.34 2001/12/28 21:16:48 fche Exp $;
d399 6
d491 8
d909 5
@


1.34
log
@* --trace-counter extensions

[bsp]
2001-12-27  Frank Ch. Eigler  <fche@@redhat.com>

	* configrun-sid.in: Make cpu<->sched pin connections for time queries.

[component/cgen-cpu]
2001-12-27  Frank Ch. Eigler  <fche@@redhat.com>

	* cgen-cpu.h (cgen_bi_endian_cpu): Make trace_count a host_int_8.
	* compCGEN.cxx (cgen_read_memory): Don't distort memory latency

[include]
2001-12-27  Frank Ch. Eigler  <fche@@redhat.com>

	* sidcpuutil.h (basic_cpu): Add scheduler_time_query member.
	Add flush_icache(PC) virtual function.

[bsp/pregen]
2001-12-27  Frank Ch. Eigler  <fche@@redhat.com>

	* ALL.conf: Regenerated with cpu/sched etc. changes.
@
text
@d90 1
a90 1
$version=q$Id: configrun-sid.in,v 1.33 2001/12/17 09:31:17 mrg Exp $;
d123 1
d1211 12
@


1.33
log
@* sanyo xstormy16 sid support.


[ChangeLog]
	* sid.spec: Add /usr/bin/xstormy16-elf-sid.

[bsp/ChangeLog]
	* Makefile.am (FAM10SCRIPTS): Add Xstormy16 support.
	* configrun-sid.in: Likewise.
	* xstormy16-elf-sid: New Xstormy16 frontend.

[bsp/pregen/ChangeLog]
	* pregen-configs.in: Add support for Xstormy16.
	* xstormy16-gloss.conf: New file.
	* xstormy16-gdb.conf: Likewise.
	* xstormy16-gloss-gdb.conf: Likewise.
	* xstormy16-gloss-gdb-tksm.conf: Likewise.

[component/ChangeLog]
	* CATALOG: Add hw-cpu-xstormy16.
	* tconfig.in: Add SIDTARGET_XSTORMY16.

[component/cgen-cpu/ChangeLog]
	* compCGEN.cxx: If SIDTARGET_XSTORMY16, add hw-cpu-xstormy16 support.
	* configure.in: Decend into xstormy16 if necessary.

[config/ChangeLog]
	* sidtargets.m4: Add Xstormy16 support.
	* config.sub: Likewise.
	* info.tcl.in: Likewise.
@
text
@d90 1
a90 1
$version=q$Id: configrun-sid.in,v 1.32 2001/12/04 22:40:52 fche Exp $;
d440 3
@


1.32
log
@2001-12-04  Frank Ch. Eigler  <fche@@redhat.com>

	* configrun-sid.in (opt_EB, opt_EL): Delay error checking until
	after $opt_board processing.
@
text
@d19 2
a20 1
		 "m32r" => "hw-cpu-m32r/d"
d25 2
a26 1
		      "m32r" => "-EB"
d34 2
a35 1
		   "m32r" => "sw-gloss-m32r/libgloss"
d43 2
a44 1
		   "m32r" => "0x00000000,0x00800000"
d90 1
a90 1
$version=q$Id: configrun-sid.in,v 1.31 2001/11/27 22:58:59 fitzsim Exp $;
d887 4
@


1.31
log
@	Changes to many generated files -- incorporate bochs into
	build system and configrun-sid.
@
text
@d86 1
a86 1
$version=q$Id: configrun-sid.in,v 1.106 2001/11/19 17:52:31 fche Exp $;
a498 13
if ($opt_EB && $opt_EL) { die "Both -EB and -EL specified\n"; }
if (!$opt_EB && !$opt_EL && $opt_gdb != 0)
  {
    if ($cpu_defaultendian{$opt_cpu} eq "-EB") { $opt_EB = 1; }
    elsif ($cpu_defaultendian{$opt_cpu} eq "-EL") { $opt_EL = 1; }
    else { warn "Should specify endianness"; &usage; }
  }
elsif (!$opt_EB && !$opt_EL && !$exec)
  {
    warn "Should specify executable"; &usage;
  }
if ($opt_EB) { $third_section .= "set cpu endian big\n"; }
if ($opt_EL) { $third_section .= "set cpu endian little\n"; }
d694 23
a716 1
#
a836 3
# ----------------------------------------------------------------------------
# Misc. logic

d876 2
d1073 1
@


1.30
log
@* call graph profiling support

[sid/bsp]
2001-11-08  Frank Ch. Eigler  <fche@@redhat.com>

	* configrun-sid.in (gprof): Connect call-graph pins.

[sid/include]
2001-11-08  Frank Ch. Eigler  <fche@@redhat.com>

	* sidcpuutil.h (basic_cpu): Add cg caller/callee pins, trace_stream
	fields.
	(basic_cpu ctor): Initialize them.
	(cg_profile): New function.

[sid/component/cgen-cpu]
2001-11-08  Frank Ch. Eigler  <fche@@redhat.com>

	* cgen-cpu.h (cgen_bi_endian_cpu): Remove trace_stream field: it's
	in basic_cpu now.
	* compCGEN.cxx: Corresponding change.

[sid/component/profiling]
2001-11-08  Frank Ch. Eigler  <fche@@redhat.com>

	* gprof.cxx (gprof_component): Add cg caller/callee pins, cg_count_map
	field.
	(accumulate_call): New function.
	(reset): Clear cg map.
	(store): Emit call graph info.  Emit histogram iff nonempty.
	* sw-profile-gprof.xml: Document call graph functionality.
	* sw-profile-gprof.txt: Regenerated.
@
text
@d17 1
d23 1
d30 1
d38 1
d86 1
a86 1
$version=q$Id: configrun-sid.in,v 1.29 2001/10/29 18:14:53 fche Exp $;
d205 4
d349 2
a350 1
		 "uart" => "uart_component_library"
d468 5
d880 5
a884 1
    $second_section .= "set cpu engine-type pbb\n";
@


1.29
log
@2001-10-29  Frank Ch. Eigler  <fche@@redhat.com>

	* configrun-sid.in (memory-region): Create component in first section.
@
text
@d82 1
a82 1
$version=q$Id: configrun-sid.in,v 1.28 2001/10/29 17:44:36 fche Exp $;
d103 1
a103 1
				   "   bus=MAPPER     Attach memory to bus MAPPER, not data",
d123 1
a123 1
	    "gprof!" => ["gprof", "GPROF-profile, collect every N ticks", "no"],
d465 2
@


1.28
log
@* tweak

2001-10-29  Frank Ch. Eigler  <fche@@redhat.com>

	* configrun-sid.in (gdb): Support no-gloss case generally.
@
text
@d82 1
a82 1
$version=q$Id: configrun-sid.in,v 1.27 2001/10/26 18:51:59 fche Exp $;
d1064 4
a1067 3
    $third_section .= "# memory region $mems ($spec)\n" .
      &sidconf_new("hw-memory-ram/rom-basic", "mem$mems") . "\n" .
	"set mem$mems size $size\n";
@


1.27
log
@* verbose typo fix, duh
@
text
@d82 1
a82 1
$version=q$Id: configrun-sid.in,v 1.26 2001/10/26 18:46:35 fche Exp $;
d944 1
a944 1
    elsif ($opt_board =~ /pid7t/)
d946 1
a946 1
	$second_section .= "# cpu-gdb w/ pid7t
@


1.26
log
@2001-10-26  Frank Ch. Eigler  <fche@@redhat.com>

	* configrun-sid.in: Correct cache-flush-net -> i/dcache connections.
@
text
@d82 1
a82 1
$version=q$Id: configrun-sid.in,v 1.25 2001/10/26 18:03:30 fche Exp $;
d92 1
a92 1
	    "v|verbose!" => ["v|verbose", "Turn on various run-time verbosity settings.", "no"],
@


1.25
log
@2001-10-26  Frank Ch. Eigler  <fche@@redhat.com>

	* configrun-sid.in: Add "--version" option.  Add "bus=MAPPER"
	memory-region option.  Avoid needless subprocess calls for
	config file stamping.  Add cache-flush net between gdb and
	all external caches.
@
text
@d82 1
a82 1
$version=q$Id: configrun-sid.in,v 1.93.2.2 2001/10/18 21:45:10 fche Exp $;
d438 2
a439 2
connect-pin cache-flush-net output-1 -> icache flush-all
connect-pin cache-flush-net output-2 -> icache invalidate-all\n";
d452 2
a453 2
connect-pin cache-flush-net output-1 -> dcache flush-all
connect-pin cache-flush-net output-2 -> dcache invalidate-all\n";
@


1.24
log
@2001-10-17  Dave Brolley  <brolley@@redhat.com>

	* configrun-sid.in: Move check of $opt_persistent and $opt_verbose to
	just before output.
	Check for gdb components attached to processors other than the main
	cpu. Adjust the enable-threshold of target-sched accordingly.
@
text
@d11 1
d46 1
d74 10
d90 1
d92 1
a92 1
	    "verbose!" => ["verbose", "Turn on various run-time verbosity settings.", "no"],
d103 1
d249 6
a254 1
# handle help
d348 7
a354 3
# sid executable
if ($ENV{'SID'}) {
  $sid=$ENV{'SID'};
d356 4
a359 3
  $sid = qx{dirname $0};
  chomp $sid;
  $sid .= "/sid";
a360 6

$whoami=qx{whoami}; chop ($whoami);
$hostname=qx{hostname}; chop ($hostname);
$date=qx{date}; chop ($date);
$uname=qx{uname}; chop ($uname);
$version=q$Id: configrun-sid.in,v 1.23 2001/10/04 17:33:48 fche Exp $;
d366 2
d376 1
d437 3
a439 1
connect-pin deinit-sequence output-6 -> icache report!\n";
d451 3
a453 1
connect-pin deinit-sequence output-6 -> dcache report!\n";
d893 2
a894 1
connect-pin ${processor}-gdb flush-icache -> $processor flush-icache
d1036 1
d1057 1
d1074 1
d1084 1
a1084 1
    $third_section .= "connect-bus cpu-mapper mem$mems:[$base,$last] mem$mems $membus\n";
d1090 1
a1090 1
	$third_section .= "connect-bus cpu-mapper mem$mems:[$alias,$aliasend] mem$mems $membus\n";
a1196 1
if ($opt_verbose) { $zeroth_section .= "set main verbose? true\n"; }
@


1.23
log
@2001-10-04  Frank Ch. Eigler  <fche@@redhat.com>

	* configrun-sid.in: Throughout, set boolean attributes only to
	non-default values.
@
text
@d342 1
a342 1
$version=q$Id: configrun-sid.in,v 1.22 2001/10/03 17:24:17 fche Exp $;
a347 4
if ($opt_verbose) { $zeroth_section .= "set main verbose? true\n"; }
if ($opt_persistent) { $zeroth_section .= "set main persistent? true\n"; }


d853 1
d882 19
d1168 2
a1169 1

@


1.22
log
@2001-10-03  Frank Ch. Eigler  <fche@@redhat.com>

        * configrun-sid.in (gdb): Add cfgroot relationship.
@
text
@d342 1
a342 1
$version=q$Id: configrun-sid.in,v 1.21 2001/09/27 21:21:37 fche Exp $;
d393 7
a399 7
set cpu step-insn-count $cpu_insn_count
set cpu trace-semantics? $opt_trace_semantics
set cpu trace-disassemble? $opt_trace_disassemble
set cpu trace-counter? $opt_trace_counter
set cpu trace-extract? $opt_trace_extract
set cpu enable-warnings? $opt_enable_warnings
set host-sched num-clients 10 # large enough?
d873 4
a876 4
set ${processor}-gdb exit-on-detach? 1
set ${processor}-gdb trace-gdbsid? $opt_verbose
set ${processor}-gdb trace-gdbserv? $opt_verbose
# ${processor}-gdb-socket
d883 2
a884 3
set ${processor}-gdb-socket sockaddr-local 0.0.0.0:$opt_gdbport{$processor}
set ${processor}-gdb-socket verbose? $opt_verbose
";
d917 2
a918 3
set ${processor}-loader file \"$opt_load{$processor}\"
set ${processor}-loader verbose? $opt_verbose
";
@


1.21
log
@* bsp support for caches

2001-09-27  Frank Ch. Eigler  <fche@@redhat.com>

        * configrun-sid.in (icache, dcache): New options.
@
text
@d342 1
a342 1
$version=q$Id: configrun-sid.in,v 1.20 2001/08/08 00:16:09 bje Exp $;
d864 1
@


1.20
log
@2001-08-07  Ben Elliston  <bje@@redhat.com>

	* configrun-sid.in (%options): New hash containing options/help.
	(@@options): Set to keys (%options).
	(usage): Use the new structure of %options.
@
text
@d115 5
a119 1
                          "than once to load multiple processors.  [cpu=exec]"]
d342 1
a342 1
$version=q$Id: configrun-sid.in,v 1.19 2001/08/07 01:45:34 fche Exp $;
a411 3
# bus connections
connect-bus cpu insn-memory $bus_upstream
connect-bus cpu data-memory $bus_upstream
d413 24
@


1.19
log
@2001-08-06  Frank Ch. Eigler  <fche@@redhat.com>

        * configrun-sid.in (opt_load): Don't load if empty $exec.
        Always create mappers, separately from opt_load logic.
@
text
@a12 2


d76 43
a118 30
@@options = (
	    "cpu=s",
	    "help!",
	    "verbose!",
	    "save-temps!",
	    "trace-extract!",
	    "trace-semantics!",
	    "trace-disassemble!",
	    "trace-counter!",
	    "trace-core!",
	    "trace-core-visual!",
	    "enable-warnings!",
	    "memory-region=s@@",
	    "gdb=i",
	    "gdbport=i%",
	    "tv=i",
	    "tksm!",
	    "board=s",
	    "engine=s",
	    "EB!",
	    "EL!",
	    "persistent!",
	    "no-run!",
	    "insn-count=i",
	    "gprof!",
	    "sidrtc=s",
	    "sidcodec=s",
	    "wrap=s@@",
	    "load=s%",
);
d121 37
a157 44
  print STDERR "
Usage: $0 --cpu=CPU [option ..] [--] [exec args ..]
Options:
 --help                     Print this help message.
 --cpu=CPU   (REQUIRED)     Select target processor                     [none]
 --verbose                  Turn on various run-time verbosity settings.  [no]
 --save-temps               Keep generated sid configuration file.        [no]
 --trace-extract            Turn on CPU insn decode tracing.              [no]
 --trace-semantics          Turn on CPU insn execute tracing.             [no]
 --trace-disassemble        Turn on CPU insn execute disassembly.         [no]
 --trace-counter            Turn on CPU insn counter.                     [no]
 --trace-core               Turn on bus access tracing.                   [no]
 --enable-warnings          Enable CPU execution warnings.                [no]
 --memory-region=BASE,SIZE  Add RAM region from BASE to BASE+SIZE-1.      [no]
                            other options:
                               read-only      Make memory read-only
                               alias=BASE2    Add an alias at BASE2
                               file=FILENAME  Load/save memory image from file
                               mmap           Memory map given file
                               latency=R:W    Set read, write latencies  [0:0]
                               latency=RW     Set both latencies           [0]
 --gdb=PORT                 Add a gdb/debugger interface on TCP port.
                            Equivalent to --gdbport cpu=PORT.           [none]
 --gdbport PROCESSOR=PORT   Add a gdb/debugger interface on TCP port
                            for the given processor. May be specified
                            more than once to debug multiple
                            processors.                                 [none]
 --board=BOARD              Model given board or system.               [gloss]
 --engine=scache|pbb        Set given cgen CPU engine.                   [pbb]
 -EB | -EL                  Set powerup CPU mode to big/little endian   [auto]
 --tksm                     Add an experimental Tk system monitor         [no]
 --persistent               Rerun top-level loop indefinitely             [no]
 --no-run                   Make config file (--save-temps) and exit.     [no]
 --insn-count=N             Block of uninterrupted ticks for insns     [10000]
 --gprof                    GPROF-profile, collect every N ticks          [no]
 --wrap=COMPONENT           Turn on SID API tracing for named component [none]
 --load PROCESSOR=NAME      Specify an executable to be loaded into
                            a specific processor. May be specified more
                            than once to load multiple processors.  [cpu=exec]
";

# temporarily disabled, until BLT build problems are fixed:
# --trace-core-visual        Turn on visual bus access tracing.            [no]

d338 1
a338 1
$version=q$Id: configrun-sid.in,v 1.18 2001/08/07 00:33:08 bje Exp $;
@


1.18
log
@2001-08-06  Ben Elliston  <bje@@redhat.com>

	* configrun-sid.in (%component_libs): Add "cache" key/value.
@
text
@d256 1
a256 1
else
d334 1
a334 1
$version=q$Id: configrun-sid.in,v 1.17 2001/08/04 10:40:26 bje Exp $;
d347 1
d882 1
a882 1
# Generate a loader and mapper for each processor
a885 1
	&sidconf_new("hw-mapper-basic", "${processor}-mapper") . "\n" .
@


1.17
log
@[bsp/ChangeLog]
2001-08-01  Dave Brolley  <brolley@@redhat.com>

	* configrun-sid.in (opt_load): New option.
	(opt_gdbport): New option.
	(mapper): Renamed to cpu-mapper.
	(loader): Renamed to cpu-loader.
	(gdb): Renamed to cpu-gdb.
	(gdb-socket): Renamed to cpu-gdb-socket.
	($exec): Reconcile with new --load option.
	($opt_gdb): Reconcile with new --gdbport option.

2001-07-18  Jeff Johnston  <jjohnstn@@redhat.com>

	* configrun-sid.in: Add --enable-warnings option which connects
	to enable-warnings? setting of cpu.

2001-05-29  matthew green  <mrg@@redhat.com>

	* configrun-sid.in ($opt_trace_disassemble): New option variable
	for inline disassembly of running code, using new
	`--trace-disassemble' option.
	($opt_trace_counter): Display a count for instructions as they
	run, either for semantic or disassembly tracing, using new
	`--trace-counter' option.

[bsp/pregen/ChangeLog]
2001-07-18  Jeff Johnston  <jjohnstn@@redhat.com>

	* (*.conf): Regenerated after adding --enable-warnings option
	to configrun-sid.in.

2001-05-29  matthew green  <mrg@@redhat.com>

	* arm-cma-tksm.conf: Regenerated.
	* arm-cma.conf, arm-gloss-tksm.conf, arm-gloss.conf: Likewise.
	* arm-glossBE.conf, arm-pid-redboot-tksm.conf: Likewise.
	* arm-pid-redboot.conf, arm-pid-tksm.conf, arm-pid.conf: Likewise.
	* arm-pidBE.conf: Likewise.

2001-01-23  Frank Ch. Eigler  <fche@@redhat.com>

	* *.conf: Regenerated with sorted "load" commands.

2001-01-17  Jeff Johnston  <jjohnstn@@redhat.com>

	* *.conf: Regenerated.
@
text
@d295 1
d334 1
a334 1
$version=q$Id: configrun-sid.in,v 1.83 2001/08/02 20:53:15 brolley Exp $;
@


1.16
log
@
2001-07-18  Jeff Johnston  <jjohnstn@@redhat.com>

        * configrun-sid.in: Added --enable-warnings option which ties to
        the enable-warnings? setting of the cpu.
@
text
@d52 2
d69 2
d74 2
a75 2
# by default the loader data mapper connects to the mapper access-port
$load_mapper_data = "mapper access-port";
d85 2
d92 1
d106 1
d119 2
d131 6
a136 1
 --gdb=PORT                 Add a gdb/debugger interface on TCP port.   [none]
d146 3
d247 28
d333 1
a333 1
$version=q$Id: configrun-sid.in,v 1.15 2001/06/23 11:18:01 fche Exp $;
a345 1
  &sidconf_new("hw-mapper-basic", "mapper") . "\n" .
d362 1
a362 1
    $bus_upstream = "mapper access-port";
d384 3
a386 1
set cpu trace-result? $opt_trace_semantics
a406 1

d421 1
a421 1
connect-bus bus-probe downstream mapper access-port
d507 8
a514 8
connect-bus mapper intctrl:[0xA000000,0xA000013] intctrl irq-registers
connect-bus mapper intctrl:[0xA000100,0xA00010F] intctrl fiq-registers
connect-bus mapper timer1:[0xA800000,0xA80000F] timer1 registers
connect-bus mapper timer2:[0xA800020,0xA80002F] timer2 registers
connect-bus mapper remapper:[0xB000000,0xB000037] remapper registers
connect-bus mapper uart1:[0xD800000,0xD80001F,4,1] uart1 Bus
connect-bus mapper uart2:[0xD800020,0xD80003F,4,1] uart2 Bus
connect-bus mapper parport:[0xD800040,0xD80005F,4,1] parport Bus
d566 2
a567 2
connect-bus mapper intctrl:[0xF600000,0xF600037] intctrl irq-registers
connect-bus mapper timer:[0xF700020,0xF70003F] timer registers
d613 4
a616 4
connect-bus mapper rtc:[0xE800000,0xE803FFF] rtc read-write-port
connect-bus mapper uart1:[0xE900000,0xE90001F,4,1] uart1 Bus
connect-bus mapper uart2:[0xE900020,0xE90003F,4,1] uart2 Bus
connect-bus mapper parport:[0xE900080,0xE90009F,4,1] parport Bus
d618 1
a618 1
connect-bus mapper lcd:[0xE900100,0xE90010F,4,1] lcd bus
d746 2
a747 2
	$third_section .= "# uart1 <-> gdb also
connect-pin uart1 Sout -> gdb target-tx
d753 2
a754 2
	$third_section .= "# uart2 <-> gdb also
connect-pin uart2 Sout -> gdb target-tx
d780 1
a780 1
disconnect-bus bus-probe downstream mapper access-port
d808 1
d825 2
a826 1
if ($opt_gdb != 0)
d828 25
a852 27
    $first_section .= "# gdb\n" .
      &sidconf_new("sw-debug-gdb", "gdb") . "\n" .
      &sidconf_new("sid-io-socket-server", "gdb-socket") . "\n" .
      "";

    $second_section .= "# gdb
relate gdb cpu cpu
relate gdb target-schedulers target-sched
relate gdb host-schedulers host-sched
connect-pin gdb process-signal -> main stop!
connect-pin init-sequence output-3 -> gdb init
connect-pin deinit-sequence output-5 -> gdb deinit
connect-pin gdb yield -> yield-net input
connect-pin gdb flush-icache -> cpu flush-icache
connect-pin gdb restart -> hw-reset-net input
set gdb exit-on-detach? 1
set gdb trace-gdbsid? $opt_verbose
set gdb trace-gdbserv? $opt_verbose
# gdb-socket
connect-pin init-sequence output-2 -> gdb-socket init
connect-pin deinit-sequence output-6 -> gdb-socket fini
connect-pin gdb-socket rx -> gdb remote-rx
connect-pin gdb-socket tx <- gdb remote-tx
connect-pin host-sched 6-event -> gdb-socket poll-event
connect-pin host-sched 6-control <- gdb-socket poll-control
set gdb-socket sockaddr-local 0.0.0.0:$opt_gdb
set gdb-socket verbose? $opt_verbose
d854 1
d856 3
d862 7
a868 7
connect-pin gloss trap-chain <-> gdb trap
connect-pin gloss trap-code-chain -> gdb trap-code
connect-pin gloss process-signal -> gdb gloss-process-signal
connect-pin gloss debug-tx -> gdb target-tx
relate gdb gloss gloss
set gdb enable-Z-packet? $enable_z_packet
set gdb operating-mode? false
d873 3
a875 3
	$second_section .= "# gdb w/ pid7t
connect-pin cpu trap <-> gdb trap
connect-pin cpu trap-code -> gdb trap-code
d880 10
d891 11
a901 4
if ($exec)
  {
    $first_section .= "# loader\n" .
      &sidconf_new("sw-load-elf", "loader") . "\n";
d903 6
a908 9
    $second_section .= "# loader
set loader file \"$exec\"
set loader verbose? $opt_verbose
connect-bus loader load-accessor-data $load_mapper_data # don't trace loading
connect-bus loader load-accessor-insn mapper access-port # don't trace loading
connect-pin init-sequence output-1 -> loader load!
connect-pin loader start-pc-set -> cpu start-pc-set!
connect-pin loader endian-set -> cpu endian-set!
connect-pin loader error -> main stop!
a909 1

a911 1

d951 1
a951 1
connect-pin tksm triggerpoint-hit -> gdb stop-target
d1010 1
a1010 1
    $third_section .= "connect-bus mapper mem$mems:[$base,$last] mem$mems $membus\n";
d1016 1
a1016 1
	$third_section .= "connect-bus mapper mem$mems:[$alias,$aliasend] mem$mems $membus\n";
d1061 1
a1061 1
connect-bus mapper sidrtc:[$addr,$addrend] sidrtc registers
d1079 1
a1079 1
connect-bus mapper sidcodec:[$addr,$addrend] sidcodec registers
@


1.15
log
@* tweak

2001-06-23  Frank Ch. Eigler  <fche@@redhat.com>

        * configrun-sid.in: Add support for --memory-region latency settings.
@
text
@d54 1
d83 1
d112 1
d287 1
a287 1
$version=q$Id: configrun-sid.in,v 1.14 2001/04/05 17:17:01 fche Exp $;
d341 1
@


1.14
log
@* demo prep

[bsp/ChangeLog]
2001-04-05  Frank Ch. Eigler  <fche@@redhat.com>

        * configrun-sid.in: Remove unused "--board=none" clause.
        (board=pid7t): Support "redboot", a new alternative to "cygmon",
        and "eCosstub".

[bsp/pregen/ChangeLog]
2001-04-05  Frank Ch. Eigler  <fche@@redhat.com>

        * pregen-configs.in (arm): Generate redboot rather than cygmon .conf
        files.
        * arm-pid-redboot.conf, arm-pid-redboot-tksm.conf: New files.
        * armpid-redboot.img: New ROM image for RedBoot snapshot 2001-04-05.
        * arm-pid-cygmon.conf, arm-pid-cygmon-tksm.conf: Zapped files.
@
text
@d116 2
d284 1
a284 1
$version=q$Id: configrun-sid.in,v 1.13 2001/04/04 23:52:58 fche Exp $;
d903 1
d920 1
d935 5
a939 3
	elsif ($opt =~ /file=(.*)/) { $memfile = $1; }
	elsif ($opt =~ /alias=(.*)/) { push @@aliases, $1 }
	elsif ($opt =~ /relate=(.*)/) { push @@relates, $1 }
d974 4
@


1.13
log
@* arm tweak

[bsp/ChangeLog]
2001-04-04  Frank Ch. Eigler  <fche@@redhat.com>

        * configrun-sid.in: For arm target, set emable_z_packet.

[bsp/pregen/ChangeLog]
2001-04-04  Frank Ch. Eigler  <fche@@redhat.com>

        * arm-*.conf: Regenerated with new enable_z_packet default.
@
text
@d282 1
a282 1
$version=q$Id: configrun-sid.in,v 1.12 2001/03/13 21:44:22 fche Exp $;
d398 1
a398 10
if ($opt_board eq "none")
  {
    $memspecs = $gloss_memspecs{$opt_cpu} || die "Unknown cpu $opt_cpu for gloss memory specs\n";
    @@regions = split (/:/, $memspecs);
    foreach $region (@@regions)
      {
	push @@opt_memory_region, $region;
      }
  }
elsif ($opt_board =~ /pid7t/)
d412 5
@


1.12
log
@* usability tweak

2001-03-13  Frank Ch. Eigler  <fche@@redhat.com>

        * configrun-sid.in: Trigger usage message if --cpu option absent.
        Note that --cpu is required in that message.
@
text
@d282 1
a282 1
$version=q$Id: configrun-sid.in,v 1.11 2001/03/13 21:39:20 fche Exp $;
d754 4
@


1.11
log
@* mmap support

[bsp/ChangeLog]
2001-03-13  Frank Ch. Eigler  <fche@@redhat.com>

        * configrun-sid.in: Add "mmap" memory region option.
        Document it and others in "--help" text.

[component/memory/ChangeLog]
2001-03-13  Frank Ch. Eigler  <fche@@redhat.com>

        Adding support for memory-mapped files and pin-based error signalling.
        * generic.cxx (generic_memory ctor): Add three new pins.
        (generic_memory dtor): munmap if mapping.
        (attempt_resize): Drive error pin when needed.  munmap if mapping.
        (imageload_handler, imagestore_handler): Drive error pin when needed.
        (imagemsync_handler, imagemmap_handler): New functions.
        * generic.h: Corresponding changes.
        * hw-memory-ram_rom-basic.txt: Document extensions.

[component/testsuite/ChangeLog]
2001-03-13  Frank Ch. Eigler  <fche@@redhat.com>

        * sidcomp.mapper/busif.exp: Disable if !enable_shared.
        * sidcomp.memory/genericmemory.exp: Add tests for mmap functions.
@
text
@d101 1
a101 1
Usage: $0 [option ..] [--] [exec args ..]
d104 1
a104 1
 --cpu=CPU                  Select target processor                     [none]
d205 1
a205 1
if ($opt_help) {
d282 1
a282 1
$version=q$Id: configrun-sid.in,v 1.49 2001/03/12 20:14:04 jjohnstn Exp $;
@


1.10
log
@* merge & robustness fix

2001-03-06  Frank Ch. Eigler  <fche@@redhat.com>

	* configrun-sid.in: Remove unused configuration variables.
	Find sid executable relative to this script in install tree.
	Roll back $gloss_specified change.

2001-02-23  John Healy  <jhealy@@redhat.com>

	* configrun-sid.in: Added $gloss_specified variable.
	Added error reporting for sim run.
@
text
@a1 2
# -*- perl -*-
#
d69 2
d73 1
a73 1
@@options = (	   
d111 5
d147 1
a147 1
    
d167 1
a167 1
  
d177 2
a178 2
      { 
	# gloss-stdio only allowed if gdb not specified 
d216 1
a216 1
  push @@exec_args, quotemeta(quotemeta($arg)); 
d230 1
a230 1
if ($opt_no_run && (! $opt_save_temps)) 
d243 2
a244 2
		 "audio" => "audio_component_library", 
		 "cgencpu" => "cgen_component_library", 
d282 1
a282 1
$version=q$Id: configrun-sid.in,v 1.9 2001/01/23 21:24:23 fche Exp $;
d304 1
a304 1
if ($opt_trace_core || $opt_trace_core_visual) 
d317 2
a318 2
    $cpu_insn_count = $opt_insn_count; 
  } 
d325 1
a325 1
  { 
d375 1
a375 1
    $second_section .= "set bus-probe trace? 1\n";  
d380 1
a380 1
if (!$opt_EB && !$opt_EL && $opt_gdb != 0) 
d386 1
a386 1
elsif (!$opt_EB && !$opt_EL && !$exec) 
d407 1
a407 5
elsif ($opt_board =~ /gloss/)
  {
    configure_gloss($opt_board);
  }
elsif ($opt_board =~ /pid7t/) 
d498 1
a498 1
elsif ($opt_board =~ /^cma110/) 
d582 4
d696 1
a696 1
    if ($opt_board =~ /uart1:gdb/ && $opt_gdb != 0) 
d703 1
a703 1
    if ($opt_board =~ /uart2:gdb/ && $opt_gdb != 0) 
d750 1
a750 1
   
d761 1
a761 1
elsif ($opt_engine eq "scache") 
d833 1
a833 1
connect-bus loader load-accessor-data mapper access-port # don't trace loading
d868 1
a868 1
    $first_section .= "# tk system monitor\n" . 
d900 2
a901 1
    #         [,relate=COMPONENT/RELATION]  (depracated)
d905 1
a905 1
    
d916 1
d926 1
a926 1
    while ($#spec >= 0) 
d930 1
d947 4
a950 5
    foreach $relate (@@relates)
      {
	$relate =~ /(.*)\/(.*)/;
	$third_section .= "relate $1 $2 mem$mems\n";
      }
d953 1
a953 1
    if ($memfile) 
d955 12
a966 8
	$third_section .= "set mem$mems image-file \"$memfile\"
connect-pin init-sequence output-1 -> mem$mems image-load
";
	# save only if memory was writeable
	if ($membus eq "read-write-port")
	  {
	    $third_section .= "connect-pin deinit-sequence output-6 -> mem$mems image-store\n";
	  }
d978 1
a978 1
    $addr = oct($addr) if ($addr =~ /^0/);    
d994 1
a994 1
    $addr = oct($addr) if ($addr =~ /^0/);    
d1085 1
a1085 1
# Process the exit code. 
d1091 1
a1091 1
if (! $opt_save_temps) 
d1125 4
@


1.9
log
@* simplify / robustify

2001-01-23  Frank Ch. Eigler  <fche@@redhat.com>

        * configrun-sid.in: Use system perlfunc, not fork/exec, to spawn
        child sid process.
@
text
@a14 7
# sid component library pointers: AUTOCONF these!
$sidsharedir="@@prefix@@/share/sid";
$sidsuffix_la=".la";
$sidprefix="lib";

# sid executable pointers
$sid=$ENV{'SID'} ? $ENV{'SID'} : "sid"; # look in $SID or install tree
a131 1

d264 8
d277 1
a277 1
$version=q$Id: configrun-sid.in,v 1.8 2001/01/23 17:24:53 fche Exp $;
d738 1
a738 1
    if ($opt_board =~ /gloss/ || $opt_board =~ /user/)
d798 1
a798 1
    if ($opt_board =~ /gloss/) 
d1026 1
a1026 1
    $lib_la = "$sidprefix$lib$sidsuffix_la";
d1072 7
a1078 1
$exit_value = $? >> 8;
d1085 1
a1085 1
exit $exit_value;
@


1.8
log
@* prevent gratuitious differences in pregen updates

2001-01-23  Frank Ch. Eigler  <fche@@redhat.com>

	* configrun-sid.in: Generate sorted list of "load" commands.
@
text
@d277 1
a277 1
$version=q$Id: configrun-sid.in,v 1.7 2001/01/23 17:04:23 fche Exp $;
d1070 3
a1072 20

# fork & exec
$pid = fork();
if ($pid < 0)
  {
    die "Fork failed\n";
  }
elsif ($pid == 0)
  {
    # child
    exec @@args;
    die "Exec failed\n";
  }
else
  {
    $SIG{'INT'} = sub { kill 'INT', $pid; };
    $SIG{'QUIT'} = sub { kill 'QUIT', $pid; };
    $SIG{'TERM'} = sub { kill 'TERM', $pid; };
    wait;
  }
d1078 5
a1082 1
exit 0;
@


1.7
log
@* cleanup

[ChangeLog]
2001-01-23  Frank Ch. Eigler  <fche@@redhat.com>

	* configrun-sid.in: Become a shell script.  Use "eval exec perl" hack
	to divert to a perl interpreter on $PATH, instead of /usr/bin/env.

[pregen/ChangeLog]
2001-01-23  Frank Ch. Eigler  <fche@@redhat.com>

	* arm-pid-cygmon.conf, arm-pid-cygmon-tksm.com: Regenerated.
@
text
@d277 1
a277 1
$version=q$Id: configrun-sid.in,v 1.6 2001/01/15 19:14:42 fche Exp $;
d1023 1
a1023 1
while(($lib,$symbol) = each %component_libs)
d1025 1
@


1.6
log
@* usability improvement

[ChangeLog]
2001-01-15  Frank Ch. Eigler  <fche@@redhat.com>

	* configrun-sid.in (--verbose, --persistent): Only emit these settings
	if corresponding command line option is given.

[pregen/ChangeLog]
2001-01-15  Frank Ch. Eigler  <fche@@redhat.com>

	* *.conf: Regenerated.
@
text
@d1 1
a1 1
#! /usr/bin/env perl
d7 4
d277 1
a277 1
$version=q$Id: configrun-sid.in,v 1.5 2001/01/13 14:26:05 mrg Exp $;
d414 1
a414 1
	unshift @@opt_memory_region, ( "0x04000000,0x00100000,file=$sidsharedir/armpid-cygmon.img,read-only" );
d419 1
a419 1
	unshift @@opt_memory_region, ( "0x04000000,0x00100000,file=$sidsharedir/armpid-eCos.img,read-only" );
@


1.5
log
@[bsp/ChangeLog]
2001-01-13  matthew green  <mrg@@redhat.com>

	* configrun-sid.in: `load-accessor' becomes Harvard architecture
	friendly.  Split into `load-accessor-insn' and `load-accessor-data'.

[component/loader/ChangeLog]
2001-01-13  matthew green  <mrg@@redhat.com>

	* compLoader.cxx (load_accessor): Delete member.
	(load_accessor_insn, load_accessor_data): New bus* members.
	(ctor): Initialise load_accessor_insn and load_accessor_data.
	Add `load-accessor-insn' and `load-accessor-data' accessors
	and delete `load-accessor'.
	(load_function): Extend to 64 bit addresses, and have an instruction
	space identifier.
	(load_it): Check both load_accessor_insn and load_accessor_data are set,
	and use the appropriate one.  Extend messages to meantion instruction or
	data loads.
	* elfload.h (fetchQuadLittle, fetchQuadBig, fetchQuad): New macros.
	(PFLOAD): Make 64-bit & Harvard address space friendly
	(sw-load-elf.txt): Document `load-accessor-insn' and `load-accessor-data'
	accessors.
        * elfload.c (readElfFile): Support 64-bit ELF as well as 32-bit ELF.
	* sw-load-elf.txt: Document `load-accessor-insn' and `load-accessor-data'
	accessors.
@
text
@d273 1
a273 1
$version=q$Id: configrun-sid.in,v 1.4 2001/01/11 16:32:30 nsd Exp $;
d277 4
a280 4
# args: @@ARGV_COPY
set main verbose? $opt_verbose
set main persistent? $opt_persistent
";
@


1.4
log
@	* configrun-sid.in ($enable_z_packet): New variable.
	($opt_gdb != 0): Use $enable_z_packet.
@
text
@d273 1
a273 1
$version=q$Id: configrun-sid.in,v 1.3 2001/01/04 00:59:47 jjohnstn Exp $;
d824 2
a825 1
connect-bus loader load-accessor mapper access-port # don't trace loading
@


1.3
log
@
2001-01-03  Jeff Johnston  <jjohnstn@@redhat.com>

        * configrun-sid.in: Imply --persistent if --gdb=xxxx specified.
        Also set gdb "exit-on-detach" setting if gdb specified and
        connect gdb restart pin to hw-reset-net.  This will cause hw reset
        if gdb restarts a program or if gdb terminates and is run again.
@
text
@d273 1
a273 1
$version=q$Id: configrun-sid.in,v 1.2 2000/12/15 21:14:57 fche Exp $;
d321 1
d802 1
a802 1
set gdb enable-Z-packet? false
@


1.2
log
@* improved automation

2000-12-15  Frank Ch. Eigler  <fche@@redhat.com>

	* configrun-sid.in: Add support for default endianness for --gdb runs.
@
text
@d234 5
d273 1
a273 1
$version=q$Id: configrun-sid.in,v 1.32 2000/11/21 21:13:02 fche Exp $;
d778 2
@


1.1
log
@* public snapshot of sid simulator
@
text
@d27 4
a112 1
 --trace-core-visual        Turn on visual bus access tracing.            [no]
d125 4
d365 10
a374 1
if (!$opt_EB && !$opt_EL && !$exec) { warn "Should specify executable or endianness"; &usage; }
@

