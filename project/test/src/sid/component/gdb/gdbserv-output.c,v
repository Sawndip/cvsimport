head	1.1;
access;
symbols
	sid-snapshot-20180601:1.1
	sid-snapshot-20180501:1.1
	sid-snapshot-20180401:1.1
	sid-snapshot-20180301:1.1
	sid-snapshot-20180201:1.1
	sid-snapshot-20180101:1.1
	sid-snapshot-20171201:1.1
	sid-snapshot-20171101:1.1
	sid-snapshot-20171001:1.1
	sid-snapshot-20170901:1.1
	sid-snapshot-20170801:1.1
	sid-snapshot-20170701:1.1
	sid-snapshot-20170601:1.1
	sid-snapshot-20170501:1.1
	sid-snapshot-20170401:1.1
	sid-snapshot-20170301:1.1
	sid-snapshot-20170201:1.1
	sid-snapshot-20170101:1.1
	sid-snapshot-20161201:1.1
	sid-snapshot-20161101:1.1
	sid-snapshot-20160901:1.1
	sid-snapshot-20160801:1.1
	sid-snapshot-20160701:1.1
	sid-snapshot-20160601:1.1
	sid-snapshot-20160501:1.1
	sid-snapshot-20160401:1.1
	sid-snapshot-20160301:1.1
	sid-snapshot-20160201:1.1
	sid-snapshot-20160101:1.1
	sid-snapshot-20151201:1.1
	sid-snapshot-20151101:1.1
	sid-snapshot-20151001:1.1
	sid-snapshot-20150901:1.1
	sid-snapshot-20150801:1.1
	sid-snapshot-20150701:1.1
	sid-snapshot-20150601:1.1
	sid-snapshot-20150501:1.1
	sid-snapshot-20150401:1.1
	sid-snapshot-20150301:1.1
	sid-snapshot-20150201:1.1
	sid-snapshot-20150101:1.1
	sid-snapshot-20141201:1.1
	sid-snapshot-20141101:1.1
	sid-snapshot-20141001:1.1
	sid-snapshot-20140901:1.1
	sid-snapshot-20140801:1.1
	sid-snapshot-20140701:1.1
	sid-snapshot-20140601:1.1
	sid-snapshot-20140501:1.1
	sid-snapshot-20140401:1.1
	sid-snapshot-20140301:1.1
	sid-snapshot-20140201:1.1
	sid-snapshot-20140101:1.1
	sid-snapshot-20131201:1.1
	sid-snapshot-20131101:1.1
	sid-snapshot-20131001:1.1
	sid-snapshot-20130901:1.1
	sid-snapshot-20130801:1.1
	sid-snapshot-20130701:1.1
	sid-snapshot-20130601:1.1
	sid-snapshot-20130501:1.1
	sid-snapshot-20130401:1.1
	sid-snapshot-20130301:1.1
	sid-snapshot-20130201:1.1
	sid-snapshot-20130101:1.1
	sid-snapshot-20121201:1.1
	sid-snapshot-20121101:1.1
	sid-snapshot-20121001:1.1
	sid-snapshot-20120901:1.1
	sid-snapshot-20120801:1.1
	sid-snapshot-20120701:1.1
	sid-snapshot-20120601:1.1
	sid-snapshot-20120501:1.1
	sid-snapshot-20120401:1.1
	sid-snapshot-20120301:1.1
	sid-snapshot-20120201:1.1
	sid-snapshot-20120101:1.1
	sid-snapshot-20111201:1.1
	sid-snapshot-20111101:1.1
	sid-snapshot-20111001:1.1
	sid-snapshot-20110901:1.1
	sid-snapshot-20110801:1.1
	sid-snapshot-20110701:1.1
	sid-snapshot-20110601:1.1
	sid-snapshot-20110501:1.1
	sid-snapshot-20110401:1.1
	sid-snapshot-20110301:1.1
	sid-snapshot-20110201:1.1
	sid-snapshot-20110101:1.1
	sid-snapshot-20101201:1.1
	sid-snapshot-20101101:1.1
	sid-snapshot-20101001:1.1
	sid-snapshot-20100901:1.1
	sid-snapshot-20100801:1.1
	sid-snapshot-20100701:1.1
	sid-snapshot-20100601:1.1
	sid-snapshot-20100501:1.1
	sid-snapshot-20100401:1.1
	sid-snapshot-20100301:1.1
	sid-snapshot-20100201:1.1
	sid-snapshot-20100101:1.1
	sid-snapshot-20091201:1.1
	sid-snapshot-20091101:1.1
	sid-snapshot-20091001:1.1
	sid-snapshot-20090901:1.1
	sid-snapshot-20090801:1.1
	sid-snapshot-20090701:1.1
	sid-snapshot-20090601:1.1
	sid-snapshot-20090501:1.1
	sid-snapshot-20090401:1.1
	sid-snapshot-20090301:1.1
	sid-snapshot-20090201:1.1
	sid-snapshot-20090101:1.1
	sid-snapshot-20081201:1.1
	sid-snapshot-20081101:1.1
	sid-snapshot-20081001:1.1
	sid-snapshot-20080901:1.1
	sid-snapshot-20080801:1.1
	sid-snapshot-20080701:1.1
	sid-snapshot-20080601:1.1
	sid-snapshot-20080501:1.1
	sid-snapshot-20080403:1.1
	sid-snapshot-20080401:1.1
	sid-snapshot-20080301:1.1
	sid-snapshot-20080201:1.1
	sid-snapshot-20080101:1.1
	sid-snapshot-20071201:1.1
	sid-snapshot-20071101:1.1
	sid-snapshot-20071001:1.1
	sid-20020905-branchpoint:1.1
	sid-20020905-branch:1.1.0.2
	cygnus_cvs_20020108_pre:1.1;
locks; strict;
comment	@ * @;


1.1
date	2000.12.07.19.30.50;	author fche;	state Exp;
branches;
next	;


desc
@@


1.1
log
@* public snapshot of sid simulator
@
text
@/*
 * gdbserv-output.c -- part of GDB remote server.
 *
 * Copyright (C) 2000 Red Hat.
 * This file is part of SID and is licensed under the GPL.
 * See the file COPYING.SID for conditions for redistribution.
 */


#include <stdio.h>
#include "gdbserv.h"
#include "gdbserv-state.h"
#include "gdbserv-utils.h"

FILE *gdbserv_output_trace;

void
gdbserv_output_attach (struct gdbserv *gdbserv)
{
  gdbserv->output.buf[0] = '$';
  gdbserv->output.len = 1;
}

void
gdbserv_output_detach (struct gdbserv *gdbserv)
{
  gdbserv->output.len = 0;
}

void
gdbserv_output_char (struct gdbserv *gdbserv, char c)
{
  if (gdbserv->output.len < sizeof (gdbserv->output.buf))
    {
      gdbserv->output.buf[gdbserv->output.len++] = c;
    }
}

void
gdbserv_output_string (struct gdbserv *gdbserv, const char *packet)
{
  int i;
  for (i = 0; i < strlen (packet); i++)
    gdbserv_output_char (gdbserv, packet[i]);
}

void
gdbserv_output_byte (struct gdbserv *gdbserv, int h)
{
  gdbserv_output_char (gdbserv, gdbserv_to_hex (h >> 4));
  gdbserv_output_char (gdbserv, gdbserv_to_hex (h >> 0));
}

void
gdbserv_output_nibble (struct gdbserv *gdbserv, int h)
{
  gdbserv_output_char (gdbserv, gdbserv_to_hex (h));
}

void
gdbserv_output_bytes (struct gdbserv *gdbserv, const char *buf, unsigned sizeof_buf)
{
  int i;
  for (i = 0; i < sizeof_buf; i++)
    {
      gdbserv_output_byte (gdbserv, buf[i]);
    }
}

void
gdbserv_output_reg_leb (struct gdbserv *gdbserv, struct gdbserv_reg *reg, int len)
{
  int i;
  if (len == 0)
    {
      if (reg->negative_p)
	gdbserv_output_char (gdbserv, '-');
      for (i = reg->len -1 ; i >= 0; i--)
	gdbserv_output_byte (gdbserv, reg->buf[i]);
    }
  else
    {
      /* FIXME - discard the negative sign. */
      if (reg->negative_p)
	abort ();
      for (i = len - 1; i >= 0; i--)
	{
	  int byte = reg->len - len + i;
	  if (byte < 0 || byte >= reg->len)
	    gdbserv_output_byte (gdbserv, 0);
	  else
	    gdbserv_output_byte (gdbserv, reg->buf[byte]);
	}
    }
}

void
gdbserv_output_reg_beb (struct gdbserv *gdbserv, struct gdbserv_reg *reg, int len)
{
  int i;
  if (len == 0)
    {
      if (reg->negative_p)
	{
	  gdbserv_output_char (gdbserv, '-');
	}
      for (i = 0; i < reg->len; i++)
	gdbserv_output_byte (gdbserv, reg->buf[i]);
    }
  else
    {
      /* FIXME - discard the negative sign. */
      if (reg->negative_p)
	abort ();
      for (i = 0; i < len; i++)
	{
	  int byte = reg->len - len + i;
	  if (byte < 0 || byte >= reg->len)
	    gdbserv_output_byte (gdbserv, 0);
	  else
	    gdbserv_output_byte (gdbserv, reg->buf[byte]);
	}
    }
}

void
gdbserv_output_discard (struct gdbserv *gdbserv)
{
  gdbserv->output.len = 1;
}

void
gdbserv_output_packet (struct gdbserv *gdbserv)
{
  /* compute / append a checksum.  Do not include that in the packet
     size. */
  int i;
  int sizeof_buf;
  unsigned long checksum = 0;
  for (i = 1; i < gdbserv->output.len; i++)
    {
      checksum += gdbserv->output.buf[i];
    }
  sizeof_buf = gdbserv->output.len;
  gdbserv->output.buf[sizeof_buf++] = '#';
  gdbserv->output.buf[sizeof_buf++] = gdbserv_to_hex (checksum >> 4);
  gdbserv->output.buf[sizeof_buf++] = gdbserv_to_hex (checksum >> 0);
  if (gdbserv_output_trace)
    {
      int i;
      fprintf (gdbserv_output_trace, "[<-%d ", sizeof_buf);
      for (i = 0; i < sizeof_buf; i++)
	{
	  fprintf (gdbserv_output_trace, "%c", gdbserv->output.buf[i]);
	}
      fprintf (gdbserv_output_trace, " ]\n");
    }
  gdbserv->client->write (gdbserv, gdbserv->output.buf, sizeof_buf);
  /* assume that it gets through */
  /* gdbserv_output_discard (gdbserv); */
  gdbserv_input_wait_for_ack (gdbserv);
}
@
