head	1.1;
access;
symbols
	sid-snapshot-20180601:1.1
	sid-snapshot-20180501:1.1
	sid-snapshot-20180401:1.1
	sid-snapshot-20180301:1.1
	sid-snapshot-20180201:1.1
	sid-snapshot-20180101:1.1
	sid-snapshot-20171201:1.1
	sid-snapshot-20171101:1.1
	sid-snapshot-20171001:1.1
	sid-snapshot-20170901:1.1
	sid-snapshot-20170801:1.1
	sid-snapshot-20170701:1.1
	sid-snapshot-20170601:1.1
	sid-snapshot-20170501:1.1
	sid-snapshot-20170401:1.1
	sid-snapshot-20170301:1.1
	sid-snapshot-20170201:1.1
	sid-snapshot-20170101:1.1
	sid-snapshot-20161201:1.1
	sid-snapshot-20161101:1.1
	sid-snapshot-20160901:1.1
	sid-snapshot-20160801:1.1
	sid-snapshot-20160701:1.1
	sid-snapshot-20160601:1.1
	sid-snapshot-20160501:1.1
	sid-snapshot-20160401:1.1
	sid-snapshot-20160301:1.1
	sid-snapshot-20160201:1.1
	sid-snapshot-20160101:1.1
	sid-snapshot-20151201:1.1
	sid-snapshot-20151101:1.1
	sid-snapshot-20151001:1.1
	sid-snapshot-20150901:1.1
	sid-snapshot-20150801:1.1
	sid-snapshot-20150701:1.1
	sid-snapshot-20150601:1.1
	sid-snapshot-20150501:1.1
	sid-snapshot-20150401:1.1
	sid-snapshot-20150301:1.1
	sid-snapshot-20150201:1.1
	sid-snapshot-20150101:1.1
	sid-snapshot-20141201:1.1
	sid-snapshot-20141101:1.1
	sid-snapshot-20141001:1.1
	sid-snapshot-20140901:1.1
	sid-snapshot-20140801:1.1
	sid-snapshot-20140701:1.1
	sid-snapshot-20140601:1.1
	sid-snapshot-20140501:1.1
	sid-snapshot-20140401:1.1
	sid-snapshot-20140301:1.1
	sid-snapshot-20140201:1.1
	sid-snapshot-20140101:1.1
	sid-snapshot-20131201:1.1
	sid-snapshot-20131101:1.1
	sid-snapshot-20131001:1.1
	sid-snapshot-20130901:1.1
	sid-snapshot-20130801:1.1
	sid-snapshot-20130701:1.1
	sid-snapshot-20130601:1.1
	sid-snapshot-20130501:1.1
	sid-snapshot-20130401:1.1
	sid-snapshot-20130301:1.1
	sid-snapshot-20130201:1.1
	sid-snapshot-20130101:1.1
	sid-snapshot-20121201:1.1
	sid-snapshot-20121101:1.1
	sid-snapshot-20121001:1.1
	sid-snapshot-20120901:1.1
	sid-snapshot-20120801:1.1
	sid-snapshot-20120701:1.1
	sid-snapshot-20120601:1.1
	sid-snapshot-20120501:1.1
	sid-snapshot-20120401:1.1
	sid-snapshot-20120301:1.1
	sid-snapshot-20120201:1.1
	sid-snapshot-20120101:1.1
	sid-snapshot-20111201:1.1
	sid-snapshot-20111101:1.1
	sid-snapshot-20111001:1.1
	sid-snapshot-20110901:1.1
	sid-snapshot-20110801:1.1
	sid-snapshot-20110701:1.1
	sid-snapshot-20110601:1.1
	sid-snapshot-20110501:1.1
	sid-snapshot-20110401:1.1
	sid-snapshot-20110301:1.1
	sid-snapshot-20110201:1.1
	sid-snapshot-20110101:1.1
	sid-snapshot-20101201:1.1
	sid-snapshot-20101101:1.1
	sid-snapshot-20101001:1.1
	sid-snapshot-20100901:1.1
	sid-snapshot-20100801:1.1
	sid-snapshot-20100701:1.1
	sid-snapshot-20100601:1.1
	sid-snapshot-20100501:1.1
	sid-snapshot-20100401:1.1
	sid-snapshot-20100301:1.1
	sid-snapshot-20100201:1.1
	sid-snapshot-20100101:1.1
	sid-snapshot-20091201:1.1
	sid-snapshot-20091101:1.1
	sid-snapshot-20091001:1.1
	sid-snapshot-20090901:1.1
	sid-snapshot-20090801:1.1
	sid-snapshot-20090701:1.1
	sid-snapshot-20090601:1.1
	sid-snapshot-20090501:1.1
	sid-snapshot-20090401:1.1
	sid-snapshot-20090301:1.1
	sid-snapshot-20090201:1.1
	sid-snapshot-20090101:1.1
	sid-snapshot-20081201:1.1
	sid-snapshot-20081101:1.1
	sid-snapshot-20081001:1.1
	sid-snapshot-20080901:1.1
	sid-snapshot-20080801:1.1
	sid-snapshot-20080701:1.1
	sid-snapshot-20080601:1.1
	sid-snapshot-20080501:1.1
	sid-snapshot-20080403:1.1
	sid-snapshot-20080401:1.1
	sid-snapshot-20080301:1.1
	sid-snapshot-20080201:1.1
	sid-snapshot-20080101:1.1
	sid-snapshot-20071201:1.1
	sid-snapshot-20071101:1.1
	sid-snapshot-20071001:1.1
	sid-20020905-branchpoint:1.1
	sid-20020905-branch:1.1.0.2
	cygnus_cvs_20020108_pre:1.1;
locks; strict;
comment	@ * @;


1.1
date	2000.12.07.19.30.50;	author fche;	state Exp;
branches;
next	;


desc
@@


1.1
log
@* public snapshot of sid simulator
@
text
@/*
 * gdbserv.h -- part of GDB remote server.
 *
 * Copyright (C) 2000 Red Hat.
 * This file is part of SID and is licensed under the GPL.
 * See the file COPYING.SID for conditions for redistribution.
 */


struct gdbserv;
struct gdbserv_target;
struct gdbserv_client;

/* If non-null, used to write tracing from the corresponding comonent */
extern FILE *gdbserv_state_trace;
extern FILE *gdbserv_input_trace;
extern FILE *gdbserv_output_trace;


/* A ``struct gdbserv_reg'' is an object for storing an arbitrary
   numeric value in a system independant way.  Part of an input packet
   will be parsed into a REG object (using gdbserv_input_reg_...) and
   then later converted into a specific value (using
   gdbserv_reg_to_...).  The bytes in BUF are always ordered
   big-endian. */

enum {
  GDBSERV_REG_SIZE = 16 /* space for a 128-bit quantity */
};
struct gdbserv_reg {
  int negative_p;
  int len;
  unsigned char buf[GDBSERV_REG_SIZE];
};

/* This is a callback to the target so that it to is notified of the
   connecting client.  The target can reject the connection by
   returning NULL */

typedef struct gdbserv_target *(gdbserv_target_attach) (struct gdbserv *gdbserv,
							void *globalstate);

/* Notify the server that the client has initiated a connection.
   Returns a gdbser struct for the session (or null if the target
   rejected the connect). */

struct gdbserv *gdbserv_fromclient_attach (struct gdbserv_client *gdbclient,
					   gdbserv_target_attach *to_target_attach,
					   void *target_attach_data);

/* Notify the server that the client has disconnected. */

void gdbserv_fromclient_detach (struct gdbserv *gdbserv);


/* Events comming in from the client */


/* Raw characters from the client<->server. */
void gdbserv_fromclient_data (struct gdbserv *gdbserv, const char *data, int sizeof_data);

/* An out-of-band break/cntrl-c request. */
void gdbserv_fromclient_break (struct gdbserv *gdbserv);


/* Events comming in from the target */


/* The target stops.  Could be: breakpoint (SIGTRAP); stop from remote
   debugger (SIGINT) or a simple request to stop nothing (0).  (See
   gdb/target.h) */
enum {
  GDBSERV_SIGNONE = 0,
  GDBSERV_SIGINT = 2,
  GDBSERV_SIGQUIT = 3,
  GDBSERV_SIGILL = 4,
  GDBSERV_SIGTRAP = 5,
  GDBSERV_SIGFPE = 8,
  GDBSERV_SIGKILL = 9,
  GDBSERV_SIGSEGV = 11
};

/* Target has reset */
void gdbserv_fromtarget_reset (struct gdbserv *client);

/* Target has encountered a break (suspend) condition */
void gdbserv_fromtarget_break (struct gdbserv *client, int sigval);

/* Target has exited */
void gdbserv_fromtarget_exit (struct gdbserv *client, int sigval);


/* Fetch data from the current input packet.
   Return -1 on error. */


/* Number of characters remaining in input packet */
int gdbserv_input_size (struct gdbserv *gdbserv);

/* NIBBLE: 4 bit quantity represented by a single HEX digit.
   BYTE: 8 bit quantity represented by two HEX digits. */
int gdbserv_input_nibble (struct gdbserv *gdbserv);
int gdbserv_input_byte (struct gdbserv *gdbserv);

/* BYTES: LEN 8 bit stream represented by LEN*2 HEX digits.
   BINARY: LEN 8 bit stream represented by LEN bytes + escape characters */
int gdbserv_input_bytes (struct gdbserv *gdbserv, char *buf, int len);
int gdbserv_input_escaped_binary (struct gdbserv *gdbserv, char *buf, int len);

/* Next character/string in packet.  Return -1 on error. */
int gdbserv_input_peek (struct gdbserv *gdbserv);
int gdbserv_input_char (struct gdbserv *gdbserv);
int gdbserv_input_string (struct gdbserv *gdbserv, char *buf, int len);

/* Peek at input packet comparing next few characters against STRING.
   Return -1 on non or partial match.  Return strlen (STRING) on full
   match and skip corresponding number of characters in input
   packet. */
int gdbserv_input_string_match (struct gdbserv *gdbserv, const char *string);

/* A small unsigned integer encoded using HEX. */
int gdbserv_input_hex_ulong (struct gdbserv *gdbserv, unsigned long *val);

/* Parse a HEX value of almost arbitrary length into the ``struct
   gdbserv_reg''.  When BYTE_LEN is zero, it may include a leading
   minus sign. When BYTE_LEN is non-zero it indicates the exact number
   of RAW BYTES (HEX digits / 2) that should be transfered to
   REG. ..._hex_beb () expects a true big-endian hex value.
   ..._hex_leb () expects a hybrid little-endian hex value - the bytes
   are ordered little-endian but the hex encoded nibble-pair that make
   up a byte is ordered big endian (ex: 0x12345678 is leb encoded as
   78563412). */
int gdbserv_input_reg_beb (struct gdbserv *gdbserv, struct gdbserv_reg *reg, int byte_len);
int gdbserv_input_reg_leb (struct gdbserv *gdbserv, struct gdbserv_reg *reg, int byte_len);


/* Write data to the current output packet. */


/* Integer values converted to HEX. */
void gdbserv_output_nibble (struct gdbserv *gdbserv, int h);
void gdbserv_output_byte (struct gdbserv *gdbserv, int h);
void gdbserv_output_bytes (struct gdbserv *gdbserv, const char *buf, unsigned sizeof_buf); 

/* Character values output verbatum. */
void gdbserv_output_char (struct gdbserv *gdbserv, char c);
void gdbserv_output_string (struct gdbserv *gdbserv, const char *buf);

/* Output a HEX value of almost arbitrary length in ``struct
   gdbserv_reg''.  May include a leading minus sign.  When BYTE_LEN is
   non-zero this specifies the exact number of RAW bytes (two HEX
   characters per byte) that should be output. */
/* FIXME: Can't have both a leading minus sign and a non-zero
   BYTE_LENGTH. */
void gdbserv_output_reg_beb (struct gdbserv *gdbserv, struct gdbserv_reg *reg, int byte_len);
void gdbserv_output_reg_leb (struct gdbserv *gdbserv, struct gdbserv_reg *reg, int byte_len);
@
