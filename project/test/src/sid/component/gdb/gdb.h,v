head	1.12;
access;
symbols
	sid-snapshot-20180601:1.12
	sid-snapshot-20180501:1.12
	sid-snapshot-20180401:1.12
	sid-snapshot-20180301:1.12
	sid-snapshot-20180201:1.12
	sid-snapshot-20180101:1.12
	sid-snapshot-20171201:1.12
	sid-snapshot-20171101:1.12
	sid-snapshot-20171001:1.12
	sid-snapshot-20170901:1.12
	sid-snapshot-20170801:1.12
	sid-snapshot-20170701:1.12
	sid-snapshot-20170601:1.12
	sid-snapshot-20170501:1.12
	sid-snapshot-20170401:1.12
	sid-snapshot-20170301:1.12
	sid-snapshot-20170201:1.12
	sid-snapshot-20170101:1.12
	sid-snapshot-20161201:1.12
	sid-snapshot-20161101:1.12
	sid-snapshot-20160901:1.12
	sid-snapshot-20160801:1.12
	sid-snapshot-20160701:1.12
	sid-snapshot-20160601:1.12
	sid-snapshot-20160501:1.12
	sid-snapshot-20160401:1.12
	sid-snapshot-20160301:1.12
	sid-snapshot-20160201:1.12
	sid-snapshot-20160101:1.12
	sid-snapshot-20151201:1.12
	sid-snapshot-20151101:1.12
	sid-snapshot-20151001:1.12
	sid-snapshot-20150901:1.12
	sid-snapshot-20150801:1.12
	sid-snapshot-20150701:1.12
	sid-snapshot-20150601:1.12
	sid-snapshot-20150501:1.12
	sid-snapshot-20150401:1.12
	sid-snapshot-20150301:1.12
	sid-snapshot-20150201:1.12
	sid-snapshot-20150101:1.12
	sid-snapshot-20141201:1.12
	sid-snapshot-20141101:1.12
	sid-snapshot-20141001:1.12
	sid-snapshot-20140901:1.12
	sid-snapshot-20140801:1.12
	sid-snapshot-20140701:1.12
	sid-snapshot-20140601:1.12
	sid-snapshot-20140501:1.12
	sid-snapshot-20140401:1.12
	sid-snapshot-20140301:1.12
	sid-snapshot-20140201:1.12
	sid-snapshot-20140101:1.12
	sid-snapshot-20131201:1.12
	sid-snapshot-20131101:1.12
	sid-snapshot-20131001:1.12
	sid-snapshot-20130901:1.12
	sid-snapshot-20130801:1.12
	sid-snapshot-20130701:1.12
	sid-snapshot-20130601:1.12
	sid-snapshot-20130501:1.12
	sid-snapshot-20130401:1.12
	sid-snapshot-20130301:1.12
	sid-snapshot-20130201:1.12
	sid-snapshot-20130101:1.12
	sid-snapshot-20121201:1.12
	sid-snapshot-20121101:1.12
	sid-snapshot-20121001:1.12
	sid-snapshot-20120901:1.12
	sid-snapshot-20120801:1.12
	sid-snapshot-20120701:1.12
	sid-snapshot-20120601:1.12
	sid-snapshot-20120501:1.12
	sid-snapshot-20120401:1.12
	sid-snapshot-20120301:1.12
	sid-snapshot-20120201:1.12
	sid-snapshot-20120101:1.12
	sid-snapshot-20111201:1.12
	sid-snapshot-20111101:1.12
	sid-snapshot-20111001:1.12
	sid-snapshot-20110901:1.12
	sid-snapshot-20110801:1.12
	sid-snapshot-20110701:1.12
	sid-snapshot-20110601:1.12
	sid-snapshot-20110501:1.12
	sid-snapshot-20110401:1.12
	sid-snapshot-20110301:1.12
	sid-snapshot-20110201:1.12
	sid-snapshot-20110101:1.12
	sid-snapshot-20101201:1.12
	sid-snapshot-20101101:1.12
	sid-snapshot-20101001:1.12
	sid-snapshot-20100901:1.12
	sid-snapshot-20100801:1.12
	sid-snapshot-20100701:1.12
	sid-snapshot-20100601:1.12
	sid-snapshot-20100501:1.12
	sid-snapshot-20100401:1.12
	sid-snapshot-20100301:1.12
	sid-snapshot-20100201:1.12
	sid-snapshot-20100101:1.12
	sid-snapshot-20091201:1.12
	sid-snapshot-20091101:1.12
	sid-snapshot-20091001:1.12
	sid-snapshot-20090901:1.12
	sid-snapshot-20090801:1.12
	sid-snapshot-20090701:1.12
	sid-snapshot-20090601:1.12
	sid-snapshot-20090501:1.12
	sid-snapshot-20090401:1.12
	sid-snapshot-20090301:1.12
	sid-snapshot-20090201:1.12
	sid-snapshot-20090101:1.12
	sid-snapshot-20081201:1.12
	sid-snapshot-20081101:1.12
	sid-snapshot-20081001:1.12
	sid-snapshot-20080901:1.12
	sid-snapshot-20080801:1.12
	sid-snapshot-20080701:1.12
	sid-snapshot-20080601:1.11
	sid-snapshot-20080501:1.11
	sid-snapshot-20080403:1.11
	sid-snapshot-20080401:1.11
	sid-snapshot-20080301:1.11
	sid-snapshot-20080201:1.11
	sid-snapshot-20080101:1.11
	sid-snapshot-20071201:1.11
	sid-snapshot-20071101:1.11
	sid-snapshot-20071001:1.11
	sid-20020905-branchpoint:1.8
	sid-20020905-branch:1.8.0.2
	cygnus_cvs_20020108_pre:1.6;
locks; strict;
comment	@ * @;


1.12
date	2008.06.17.18.08.51;	author brolley;	state Exp;
branches;
next	1.11;

1.11
date	2005.11.14.20.04.53;	author brolley;	state Exp;
branches;
next	1.10;

1.10
date	2005.08.19.19.43.50;	author brolley;	state Exp;
branches;
next	1.9;

1.9
date	2003.01.08.03.05.59;	author bje;	state Exp;
branches;
next	1.8;

1.8
date	2002.05.08.19.15.30;	author fche;	state Exp;
branches;
next	1.7;

1.7
date	2002.02.12.21.58.58;	author fche;	state Exp;
branches;
next	1.6;

1.6
date	2001.10.17.17.50.13;	author brolley;	state Exp;
branches;
next	1.5;

1.5
date	2001.10.03.17.06.01;	author fche;	state Exp;
branches;
next	1.4;

1.4
date	2001.08.03.06.02.43;	author mrg;	state Exp;
branches;
next	1.3;

1.3
date	2001.07.30.16.12.19;	author fche;	state Exp;
branches;
next	1.2;

1.2
date	2001.01.04.01.00.11;	author jjohnstn;	state Exp;
branches;
next	1.1;

1.1
date	2000.12.07.19.30.50;	author fche;	state Exp;
branches;
next	;


desc
@@


1.12
log
@2008-06-17  Dave Brolley  <brolley@@redhat.com>

        * gdbserv-target.h (set_exec_direction): New member of
        gdbserv_target.
        * gdbserv-state.c (gdbserv_data_packet): Initialize exec_direction.
        Check for a 'b' prefix for the S, s, C, and c packets.  Call
        gdbserv->target->set_exec_direction.
        * gdb.h (set_exec_direction): New function prototype.
        * gdb.cxx (set_exec_direction_hook): New function.
        (gdbsid_target_attach): Set gdbtarget->set_exec_direction.
        (set_exec_direction): New function.
@
text
@// gdb.h - description.  -*- C++ -*-

// Copyright (C) 1999, 2000, 2001, 2002, 2005, 2006 Red Hat.
// This file is part of SID and is licensed under the GPL.
// See the file COPYING.SID for conditions for redistribution.

#ifndef GDB_DEF_H
#define GDB_DEF_H	1

#include <sidtypes.h>
#include <sidcomp.h>
#include <sidcomputil.h>
#include <sidpinutil.h>
#include <sidattrutil.h>
#include <sidcpuutil.h>
#include <sidpinattrutil.h>
#include <sidmiscutil.h>
#include <sidwatchutil.h>
#include <sidso.h>

#include <vector>
#include <cstdio>
#include <map>

using std::vector;
using std::string;
using std::map;
using std::cerr;
using std::endl;
using std::ios;
using std::cout;

using sid::component;
using sid::bus;
using sid::host_int_8;
using sid::host_int_4;
using sid::host_int_2;
using sid::host_int_1;
using sid::big_int_1;
using sid::big_int_2;
using sid::big_int_4;
using sid::big_int_8;
using sid::little_int_1;
using sid::little_int_2;
using sid::little_int_4;
using sid::little_int_8;
using sid::component_library;
using sid::COMPONENT_LIBRARY_MAGIC;

using sidutil::make_attribute;
using sidutil::make_numeric_attribute;
using sidutil::fixed_attribute_map_component;
using sidutil::no_bus_component;
using sidutil::no_accessor_component;
using sidutil::fixed_relation_map_component;
using sidutil::fixed_pin_map_component;
using sidutil::configurable_component;
using sidutil::callback_pin;
using sidutil::output_pin;
using sidutil::input_pin;
using sidutil::cpu_trap_handled;
using sidutil::parse_attribute;
using sidutil::endian;
using sidutil::endian_unknown;
using sidutil::endian_big;
using sidutil::endian_little;
using sidutil::map_watchable_name;
using sidutil::tokenize;

class gdb: public virtual component,
	   public virtual fixed_attribute_map_component,
	   public virtual fixed_pin_map_component,
	   public no_bus_component,
	   public no_accessor_component,
	   public virtual fixed_relation_map_component,
	   public virtual configurable_component
{
public:
  gdb();
  ~gdb() throw();

private:
  friend class callback_pin<gdb>;

  // match cpu for attribute conversion convenience
  typedef host_int_2 dbg_register_number_t;
  
  // initialization connections
  callback_pin<gdb> init_pin;
  void init_handler (host_int_4);
  callback_pin<gdb> deinit_pin;
  void deinit_handler (host_int_4);

  // socket<->gdb connections
  bool connected_p;
  callback_pin<gdb> remote_rx_pin;
  void remote_rx_eof_handler();
  void remote_rx_handler(host_int_4 value);
  output_pin remote_tx_pin;

  // cpu/gloss<->gdb connections
  component* cfgroot;
  component* cpu;
  component* gloss;
  input_pin cpu_trap_code_pin;
  callback_pin<gdb> cpu_trap_ipin;
  output_pin cpu_trap_opin;
  unsigned long last_signal; 
  void cpu_trap_handler (host_int_4 value);
  callback_pin<gdb> gloss_process_signal_pin;  // signal from gloss
  void gloss_signal_handler (host_int_4 value);
  callback_pin<gdb> target_tx_pin; // signal from pin
  void target_tx_handler (host_int_4 value);
  output_pin icache_flush_pin; // signal to cpu

  // cpu<->target system connections
  output_pin yield_pin; // signal to target subsystem
  vector<component*> target_schedulers;
  vector<component*> host_schedulers;
  vector<bool> target_schedulers_enabled;
  vector<bool> host_schedulers_host_time_yielded;
  // turn target subsystem on/off
  output_pin process_signal_pin;  // signal to cfgroot
  output_pin restart_pin; // signal to hw-reset
  void target_power (bool on);

  // This setting allows us to compensate for some Harvardized
  // addressing schemes, where a PC value is annotated with
  // address space identification bits.
  host_int_8 gdb_pc_mask; // 0=disabled

  // hw breakpoint tracking
  typedef map<host_int_8,int> hw_breakpoints_t;
  hw_breakpoints_t hw_breakpoints; // address -> insertion-count
  bool add_hw_breakpoint (host_int_8, host_int_4);
  bool remove_hw_breakpoint (host_int_8, host_int_4);
  bool remove_all_hw_breakpoints ();

  // sw breakpoint tracking
  typedef map<host_int_8,string> sw_breakpoints_t;
  sw_breakpoints_t sw_breakpoints; // address -> memory-image
  bool add_sw_breakpoint (host_int_8, host_int_4);
  bool remove_sw_breakpoint (host_int_8, host_int_4);
  bool remove_all_sw_breakpoints ();

  // hw watchpoint tracking
  typedef map<string,int> hw_watchpoints_t;
  hw_watchpoints_t hw_watchpoints; // watcher name -> insertion-count
  bool add_hw_watchpoint (host_int_8, host_int_4);
  bool remove_hw_watchpoint (host_int_8, host_int_4);
  bool remove_hw_watchpoint (const string &);
  bool remove_all_hw_watchpoints ();

  // pending signal tracking
  typedef map<int,int> pending_signal_counts_t;
  pending_signal_counts_t pending_signal_counts;

  // pending step control tracking
  host_int_8 step_range_start, step_range_end;

  // sid<->gdb target control
  callback_pin<gdb> stop_pin; // special-purpose "interrupt target" pin
  void stop_handler (host_int_4);
  callback_pin<gdb> trapstop_pin; // special-purpose "breakpoint target" pin
  void trapstop_handler (host_int_4);
  callback_pin<gdb> start_pin; // special-purpose "resume target" pin
  void start_handler (host_int_4);

  // settings
  bool exit_on_detach;
  bool trace_gdbserv;
  bool trace_gdbsid;
  void update_trace_flags();
  bool enable_Z_packet; // support z* at all
  bool force_Z_sw_to_hw; // map z0 -> z1
  bool force_Z_hw_to_sw; // map z1 -> z0
  bool fallback_Z_sw_to_hw; // hw, if error during sw breakpoint add attempt
  bool enable_E_packet;
  bool operating_mode_p;

  // gdbserv state
  struct gdbserv* gdbserv;
  struct gdbserv_client* gdbserv_client;

  virtual void configure (const string &config);

public:
  // gdbserv_client<->gdb callback hooks
  void gdbsid_client_write (const unsigned char* ch, unsigned len);
  // gdbserv<->gdb callback hooks
  struct gdbserv_target* gdbsid_target_attach (struct gdbserv *gdbserv);
  void process_rcmd (const char *cmd, int sizeof_cmd);
  void process_get_gen ();
  void process_set_gen ();
  void process_set_args ();
  int process_set_reg (int reg);
  int process_set_regs ();
  void process_get_reg (int reg);
  void process_get_regs ();
  void process_get_exp_regs ();
  void process_get_mem (struct gdbserv_reg *reg_addr, struct gdbserv_reg *reg_len);
  void process_set_mem (struct gdbserv_reg *reg_addr, struct gdbserv_reg *reg_len, int binary);
  void process_set_pc (struct gdbserv_reg *val);
  int process_signal (int sigval);
  void flush_i_cache();
  unsigned long compute_signal (unsigned long sig);
  unsigned long get_trap_number ();
  void supply_expedited_regs ();
  int exit_program (); 
  int break_program ();
  void restart_program ();
  int singlestep_program ();
  int rangestep_program (struct gdbserv_reg *range_start, struct gdbserv_reg *range_end);
  void sigkill_program ();
  int continue_program ();
  int Z_breakpoint_ok_p (unsigned long type, struct gdbserv_reg *addr, struct gdbserv_reg *len);
  int remove_breakpoint (unsigned long type, struct gdbserv_reg *addr, struct gdbserv_reg *len);
  int set_breakpoint (unsigned long type, struct gdbserv_reg *addr, struct gdbserv_reg *len);
  int set_exec_direction (const char* direction);
  void process_detach ();
};



extern "C" struct gdbserv_target* gdbsid_target_attach_hook (struct gdbserv *gdbserv, 
							     void *globalstate);
extern "C" void process_get_gen_hook (struct gdbserv *gdbserv);
extern "C" void process_set_gen_hook (struct gdbserv *gdbserv);
extern "C" void process_set_args_hook (struct gdbserv *gdbserv);
extern "C" int process_set_reg_hook (struct gdbserv *gdbserv, int reg);
extern "C" int process_set_regs_hook (struct gdbserv *gdbserv);
extern "C" void process_get_reg_hook (struct gdbserv *gdbserv, int reg);
extern "C" void process_get_regs_hook (struct gdbserv *gdbserv);
extern "C" void process_get_exp_regs_hook (struct gdbserv *gdbserv);
extern "C" unsigned long get_trap_number_hook (struct gdbserv *gdbserv);
extern "C" void process_get_mem_hook (struct gdbserv *gdbserv,
				      struct gdbserv_reg *reg_addr,
				      struct gdbserv_reg *reg_len);
extern "C" void process_set_mem_hook (struct gdbserv *gdbserv,
				      struct gdbserv_reg *reg_addr,
				      struct gdbserv_reg *reg_len,
				      int binary);
extern "C" void process_set_pc_hook (struct gdbserv *gdbserv, struct gdbserv_reg *val);
extern "C" int process_signal_hook (struct gdbserv *gdbserv, int sig);
extern "C" void flush_i_cache_hook (struct gdbserv *gdbserv );
extern "C" unsigned long compute_signal_hook (struct gdbserv *gdbserv, unsigned long sig);
extern "C" int exit_program_hook (struct gdbserv *gdbserv); 
extern "C" int break_program_hook (struct gdbserv *gdbserv);
extern "C" void restart_program_hook (struct gdbserv *gdbserv);
extern "C" int singlestep_program_hook (struct gdbserv *gdbserv);
extern "C" int rangestep_program_hook (struct gdbserv *gdbserv, 
				       struct gdbserv_reg *val1, 
				       struct gdbserv_reg *val2);
extern "C" void sigkill_program_hook (struct gdbserv *gdbserv);
extern "C" int continue_program_hook (struct gdbserv *gdbserv );
extern "C" int remove_breakpoint_hook (struct gdbserv *gdbserv, unsigned long type,
				       struct gdbserv_reg *addr, struct gdbserv_reg *len);
extern "C" int set_breakpoint_hook (struct gdbserv *gdbserv, unsigned long type,
				    struct gdbserv_reg *addr, struct gdbserv_reg *len);
extern "C" void process_detach_hook (struct gdbserv *gdbserv);

#endif // GDB_DEF_H
@


1.11
log
@2005-11-14  Dave Brolley  <brolley@@redhat.com>

        * gdb.h (hw_watchpoints_t): New typedef in gdb.
        (hw_watchpoints): New member of gdb.
        (remove_all_hw_watchpoints, remove_hw_watchpoint): New methods
        of gdb.
        (add_hw_watchpoint): New method of gdb.
        * gdb.cxx (remove_breakpoint): Handle GDBSERV_TARGET_BP_WRITE.
        (set_breakpoint): Likewise.
        (remove_all_hw_watchpoints, remove_hw_watchpoint): New methods
        of gdb.
        (add_hw_watchpoint): New method of gdb.
        (process_detach): Call remove_all_hw_watchpoints.
@
text
@d3 1
a3 1
// Copyright (C) 1999, 2000, 2001, 2002, 2005 Red Hat.
d219 1
@


1.10
log
@2005-08-19  Dave Brolley  <brolley@@redhat.com>

        * Contribute the following changes:

        2005-07-13  Dave Brolley  <brolley@@redhat.com>

        * gdb.h (configurable_component): Inherit virtually from
        fixed_attribute_map_component.

        2005-06-06  Dave Brolley  <brolley@@redhat.com>

        * gdb.cxx (configure): New virtual override in gdb.
        * gdb.h (configure): Likewise.
        (gdb): fixed_pin_map_component, fixed_relation_map_component and
        configurable_component inherited virtually.
        * sw-debug-gdb.xml: Add description of new interfaces.
        * sw-debug-gdb.txt: Regenerated.
@
text
@d146 8
@


1.9
log
@* update copyright notice to be in sync with Red Hat tree.
@
text
@d3 1
a3 1
// Copyright (C) 1999, 2000, 2001, 2002 Red Hat.
d57 1
d71 2
a72 2
	   public fixed_attribute_map_component,
	   public fixed_pin_map_component,
d75 2
a76 1
	   public fixed_relation_map_component
d177 2
@


1.8
log
@2002-05-07  Frank Ch. Eigler  <fche@@redhat.com>

	* gdb.cxx (add_sw_breakpoint, remove_sw_breakpoint): New functions
	for managing software breakpoints (Z0/z0 packets).
	(remove_all_hw_breakpoints): Ditto.
	(set_breakpoint, remove_breakpoints): Dispatch to them as appropriate.
	* gdb.h (force_Z_sw_to_hw, force_Z_hw_to_sw, fallback_Z_sw_to_hw):
	New parameters / attributes.
	(gdb_pc_mask): Renamed parameter from hw_breakpoint_pc_mask.
	* sw-debug-gdb.xml: Document new attributes.
	* sw-debug-gdb.txt: Regenerated.
@
text
@d3 1
a3 1
// Copyright (C) 1999-2002 Red Hat.
@


1.7
log
@* step-out-of-range packet support

[sid/include]
2002-02-12  Frank Ch. Eigler  <fche@@redhat.com>

	* sidcpuutil.h (basic_cpu ctor): Add full gdb-register-pc attribute.
	(basic_cpu add_watchable_register): Associate watchable with raw
	Value*, not attribute string.

[sid/component/gdb]
2002-02-11  Frank Ch. Eigler  <fche@@redhat.com>

	* gdb.cxx (rangestep_program_hook, rangestep_program): New functions.
	(process_set_pc): Implement.
	(gdb ctor): Support new attribute "enable-E-packet?", default true.
	(cpu_trap_handler): When rangestepping, keep CPU going as needed.
	(exit_program, break_program, singlestep_program): Clear
	range-stepping variables.
	(continue_program, stop_handler, trapstop_handler): Ditto.
	* gdb.h: Corresponding changes.
	* gdbserv-state.c (gdbserv_data_packet): Implement support for
	'E'/'e' packets through new rangestep_program target hook.
	(gdbserv_fromtarget_break): Discard pending output packet.
	* gdbserv-state.h: Corresponding changes.
@
text
@d3 1
a3 1
// Copyright (C) 1999, 2000, 2001, 2002 Red Hat.
d35 1
a36 1
using sid::host_int_8;
d38 1
d125 5
d133 2
a134 3
  host_int_8 hw_breakpoint_pc_mask; // 0=disabled
  bool add_hw_breakpoint (host_int_8);
  bool remove_hw_breakpoint (host_int_8);
d137 7
d164 4
a167 1
  bool enable_Z_packet;
@


1.6
log
@2001-10-16  Dave Brolley  <brolley@@redhat.com>

	* gdb.h (target_schedulers_enabled): New vector member of class gdb.
	(host_schedulers_host_time_yielded): Ditto.
	* gdb.cxx (increment_attribute): New function.
	(target_power): Maintain internal vectors to track whether we have
	enabled the target scheduler and asked the host scheduler to yield host
	time. Increment/decrement the appropriate attribute of each scheduler
	instead of setting to 1 or 0.
	(init_handler): Initialize internal vectors representing the state of
	the host and target schedulers.
@
text
@d3 1
a3 1
// Copyright (C) 1999, 2000, 2001 Red Hat.
d136 3
d153 1
d186 1
d223 3
@


1.5
log
@* support "monitor set COMPONENT ATTRIBUTE VALUE" from gdb.
* part 1/2

2001-10-03  Frank Ch. Eigler  <fche@@redhat.com>

        * gdb.cxx (ctor): Add "cfgroot" relationship.
        (process_rcmd_hook, process_rcmd): Support "set" Rcmds.
        * gdb.h: Corresponding changes.
@
text
@d117 2
@


1.4
log
@* make it compile with GCC 3.0:
        - missing throw() specifiers in bus & component dtors
	- `std::' vs `::' namespace issues
@
text
@d99 1
d159 1
@


1.3
log
@* gdb-interface extension

2001-07-30  Frank Ch. Eigler  <fche@@redhat.com>

	* gdb.h (gdb::hw_breakpoint_pc_mask): New member variable.
	* gdb.cxx (gdb ctor): Expose it as `Z-packet-pc-mask' attribute.
	(remove_hw_breakpoint, add_hw_breakpoint): Respect it.
@
text
@d77 1
a77 1
  ~gdb();
@


1.2
log
@
2001-01-03  Jeff Johnston  <jjohnstn@@redhat.com>

        * gdb.cxx (restart_program): Added code to drive
        new "restart" output pin.
        * gdb.h (restart_pin): New output pin.
@
text
@d124 1
@


1.1
log
@* public snapshot of sid simulator
@
text
@d3 1
a3 1
// Copyright (C) 1999, 2000 Red Hat.
d118 1
@

