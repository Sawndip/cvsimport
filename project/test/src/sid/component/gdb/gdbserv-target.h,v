head	1.3;
access;
symbols
	sid-snapshot-20180601:1.3
	sid-snapshot-20180501:1.3
	sid-snapshot-20180401:1.3
	sid-snapshot-20180301:1.3
	sid-snapshot-20180201:1.3
	sid-snapshot-20180101:1.3
	sid-snapshot-20171201:1.3
	sid-snapshot-20171101:1.3
	sid-snapshot-20171001:1.3
	sid-snapshot-20170901:1.3
	sid-snapshot-20170801:1.3
	sid-snapshot-20170701:1.3
	sid-snapshot-20170601:1.3
	sid-snapshot-20170501:1.3
	sid-snapshot-20170401:1.3
	sid-snapshot-20170301:1.3
	sid-snapshot-20170201:1.3
	sid-snapshot-20170101:1.3
	sid-snapshot-20161201:1.3
	sid-snapshot-20161101:1.3
	sid-snapshot-20160901:1.3
	sid-snapshot-20160801:1.3
	sid-snapshot-20160701:1.3
	sid-snapshot-20160601:1.3
	sid-snapshot-20160501:1.3
	sid-snapshot-20160401:1.3
	sid-snapshot-20160301:1.3
	sid-snapshot-20160201:1.3
	sid-snapshot-20160101:1.3
	sid-snapshot-20151201:1.3
	sid-snapshot-20151101:1.3
	sid-snapshot-20151001:1.3
	sid-snapshot-20150901:1.3
	sid-snapshot-20150801:1.3
	sid-snapshot-20150701:1.3
	sid-snapshot-20150601:1.3
	sid-snapshot-20150501:1.3
	sid-snapshot-20150401:1.3
	sid-snapshot-20150301:1.3
	sid-snapshot-20150201:1.3
	sid-snapshot-20150101:1.3
	sid-snapshot-20141201:1.3
	sid-snapshot-20141101:1.3
	sid-snapshot-20141001:1.3
	sid-snapshot-20140901:1.3
	sid-snapshot-20140801:1.3
	sid-snapshot-20140701:1.3
	sid-snapshot-20140601:1.3
	sid-snapshot-20140501:1.3
	sid-snapshot-20140401:1.3
	sid-snapshot-20140301:1.3
	sid-snapshot-20140201:1.3
	sid-snapshot-20140101:1.3
	sid-snapshot-20131201:1.3
	sid-snapshot-20131101:1.3
	sid-snapshot-20131001:1.3
	sid-snapshot-20130901:1.3
	sid-snapshot-20130801:1.3
	sid-snapshot-20130701:1.3
	sid-snapshot-20130601:1.3
	sid-snapshot-20130501:1.3
	sid-snapshot-20130401:1.3
	sid-snapshot-20130301:1.3
	sid-snapshot-20130201:1.3
	sid-snapshot-20130101:1.3
	sid-snapshot-20121201:1.3
	sid-snapshot-20121101:1.3
	sid-snapshot-20121001:1.3
	sid-snapshot-20120901:1.3
	sid-snapshot-20120801:1.3
	sid-snapshot-20120701:1.3
	sid-snapshot-20120601:1.3
	sid-snapshot-20120501:1.3
	sid-snapshot-20120401:1.3
	sid-snapshot-20120301:1.3
	sid-snapshot-20120201:1.3
	sid-snapshot-20120101:1.3
	sid-snapshot-20111201:1.3
	sid-snapshot-20111101:1.3
	sid-snapshot-20111001:1.3
	sid-snapshot-20110901:1.3
	sid-snapshot-20110801:1.3
	sid-snapshot-20110701:1.3
	sid-snapshot-20110601:1.3
	sid-snapshot-20110501:1.3
	sid-snapshot-20110401:1.3
	sid-snapshot-20110301:1.3
	sid-snapshot-20110201:1.3
	sid-snapshot-20110101:1.3
	sid-snapshot-20101201:1.3
	sid-snapshot-20101101:1.3
	sid-snapshot-20101001:1.3
	sid-snapshot-20100901:1.3
	sid-snapshot-20100801:1.3
	sid-snapshot-20100701:1.3
	sid-snapshot-20100601:1.3
	sid-snapshot-20100501:1.3
	sid-snapshot-20100401:1.3
	sid-snapshot-20100301:1.3
	sid-snapshot-20100201:1.3
	sid-snapshot-20100101:1.3
	sid-snapshot-20091201:1.3
	sid-snapshot-20091101:1.3
	sid-snapshot-20091001:1.3
	sid-snapshot-20090901:1.3
	sid-snapshot-20090801:1.3
	sid-snapshot-20090701:1.3
	sid-snapshot-20090601:1.3
	sid-snapshot-20090501:1.3
	sid-snapshot-20090401:1.3
	sid-snapshot-20090301:1.3
	sid-snapshot-20090201:1.3
	sid-snapshot-20090101:1.3
	sid-snapshot-20081201:1.3
	sid-snapshot-20081101:1.3
	sid-snapshot-20081001:1.3
	sid-snapshot-20080901:1.3
	sid-snapshot-20080801:1.3
	sid-snapshot-20080701:1.3
	sid-snapshot-20080601:1.2
	sid-snapshot-20080501:1.2
	sid-snapshot-20080403:1.2
	sid-snapshot-20080401:1.2
	sid-snapshot-20080301:1.2
	sid-snapshot-20080201:1.2
	sid-snapshot-20080101:1.2
	sid-snapshot-20071201:1.2
	sid-snapshot-20071101:1.2
	sid-snapshot-20071001:1.2
	sid-20020905-branchpoint:1.2
	sid-20020905-branch:1.2.0.2
	cygnus_cvs_20020108_pre:1.1;
locks; strict;
comment	@ * @;


1.3
date	2008.06.17.18.08.51;	author brolley;	state Exp;
branches;
next	1.2;

1.2
date	2002.02.12.21.58.58;	author fche;	state Exp;
branches;
next	1.1;

1.1
date	2000.12.07.19.30.50;	author fche;	state Exp;
branches;
next	;


desc
@@


1.3
log
@2008-06-17  Dave Brolley  <brolley@@redhat.com>

        * gdbserv-target.h (set_exec_direction): New member of
        gdbserv_target.
        * gdbserv-state.c (gdbserv_data_packet): Initialize exec_direction.
        Check for a 'b' prefix for the S, s, C, and c packets.  Call
        gdbserv->target->set_exec_direction.
        * gdb.h (set_exec_direction): New function prototype.
        * gdb.cxx (set_exec_direction_hook): New function.
        (gdbsid_target_attach): Set gdbtarget->set_exec_direction.
        (set_exec_direction): New function.
@
text
@/*
 * gdbserv-target.h -- part of GDB remote server.
 *
 * Copyright (C) 2000, 2002, 2006 Red Hat.
 * This file is part of SID and is licensed under the GPL.
 * See the file COPYING.SID for conditions for redistribution.
 */


struct gdbserv;

enum gdbserv_target_rc {
  GDBSERV_TARGET_RC_ERROR = -1, /* Failed, ack with ``Enn''. */
  GDBSERV_TARGET_RC_OK = 0, /* Ok, ack with ``OK'' where applicable. */
  GDBSERV_TARGET_RC_UNKNOWN = 1 /* Not supported, or silent. */
};

enum gdbserv_target_bp {
  GDBSERV_TARGET_BP_UNKNOWN = -1,
  GDBSERV_TARGET_BP_SOFTWARE,
  GDBSERV_TARGET_BP_HARDWARE,
  GDBSERV_TARGET_BP_WRITE,
  GDBSERV_TARGET_BP_READ,
  GDBSERV_TARGET_BP_ACCESS
};


struct gdbserv_target {
  /* GDB Client */

  /* Remote Qq packet methods */
  void (*process_get_gen) (struct gdbserv *);
  void (*process_set_gen) (struct gdbserv *);
  void (*process_rcmd) (struct gdbserv *, const char *cmd, int sizeof_cmd);

  void (*process_set_args) (struct gdbserv *);

  /* Register Processing: old/tested */
  /* Either implement process_set_reg, process_get_regs,
     process_set_regs OR get_sizeof_reg, get_reg, set_reg. */
  int (*process_set_reg) (struct gdbserv *, int reg);
  int (*process_set_regs) (struct gdbserv *);
  void (*process_get_regs) (struct gdbserv *);

  /* Deprecated / SID Only. */
  void (*process_get_reg) (struct gdbserv *, int reg);
  void (*process_get_exp_regs) (struct gdbserv *);


  /* Register Processing: new/untested/WIP */

  /* Input/Output a ``struct gdbserv_reg'' according to the target
     dependant byte ordering.  See gdbserv_input_reg_{beb,leb} and
     gdbserv_output_reg_{beb,leb}. Return a negative value to indicate
     a parse error. */
  int (*input_reg) (struct gdbserv *gdbserv, struct gdbserv_reg *reg, int len);
  void (*output_reg) (struct gdbserv *gdbserv, struct gdbserv_reg *reg, int len);

  /* Return the REG-NR for the ``I''th register in the ``Gg'' packets.
     Return a negative value when there are no more registers. Called
     iteratively starting with 0. */
  int (*gg_reg_nr) (struct gdbserv *, int index);

  /* (optional) Return the REG-NR for ``expedited'' register ``I'' in
     the ``T'' packet.  Return a negative value when there are no more
     registers.  Expedited registers help improve the remote protocol
     performance.  Called iteratively starting with 0. */
  int (*expedited_reg_nr) (struct gdbserv *, int index);

  /* Return the SIZE of a REG-NR register (as returned by REG_NR() or
     EXPEDITED_REG_NR()).  2*SIZE characters are assumed to represent
     that register in the ``Gg'' packets.  Return a negated SIZE if
     there is a ``hole'' in the G packet - data but no corresponding
     register. */
  long (*sizeof_reg) (struct gdbserv *, int regnr);

  /* Update REGNR with the value in REG. Return a negative value if
     the write breaks. */
  int (*set_reg) (struct gdbserv *, int regnr, struct gdbserv_reg *reg);

  /* Return REGNR in ``struct gdbserv_reg''. Return a negative value
     if the write breaks. */
  int (*get_reg) (struct gdbserv *, int regnr, struct gdbserv_reg *reg);

  /* Deprecated / SID only. */
  void (*process_get_mem) (struct gdbserv *, struct gdbserv_reg *addr, struct gdbserv_reg *len);
  void (*process_set_mem) (struct gdbserv *, struct gdbserv_reg *addr, struct gdbserv_reg *len, int binary);


  /* Memory Processing: Transfer LEN bytes of raw memory to/from
     target. Return number of actual bytes transfered or -1 on
     error. */
  long (*get_mem) (struct gdbserv *, struct gdbserv_reg *addr, void *data, long len);
  long (*set_mem) (struct gdbserv *, struct gdbserv_reg *addr, void *data, long len);

  /* Other operations. */
  void (*process_set_pc) (struct gdbserv *, struct gdbserv_reg *val);
  int (*process_signal) (struct gdbserv *, int sigval);

  void (*flush_i_cache) (struct gdbserv *);

  unsigned long (*compute_signal) (struct gdbserv *, unsigned long);
  unsigned long (*get_trap_number) (struct gdbserv *);


  /* Program state methods */
#if 0 /* ASVP */
  void (*exit_program) (struct gdbserv *);
  void (*break_program) (struct gdbserv *);
  int (*reset_program) (struct gdbserv *);
  void (*restart_program) (struct gdbserv *);
  void (*singlestep_program) (struct gdbserv *);
  void (*cyclestep_program) (struct gdbserv *);
  void (*sigkill_program) (struct gdbserv *);
  void (*continue_program) (struct gdbserv *);
#else /* SID */
  int (*exit_program) (struct gdbserv *);
  int (*break_program) (struct gdbserv *);
  int (*reset_program) (struct gdbserv *);
  void (*restart_program) (struct gdbserv *);
  int (*singlestep_program) (struct gdbserv *);
  int (*rangestep_program) (struct gdbserv *, 
			    struct gdbserv_reg *range_start, 
			    struct gdbserv_reg *range_end);
  void (*cyclestep_program) (struct gdbserv *);
  void (*sigkill_program) (struct gdbserv *);
  int (*continue_program) (struct gdbserv *);
  int (*set_exec_direction) (struct gdbserv *, const char *direction);
#endif

  /* Breakpoint methods */
#if 0 /* ASVP */
  enum gdbserv_target_rc (*remove_breakpoint) (struct gdbserv *,
					       enum gdbserv_target_bp type,
					       struct gdbserv_reg *addr,
					       struct gdbserv_reg *len);
  enum gdbserv_target_rc (*set_breakpoint) (struct gdbserv *,
					    enum gdbserv_target_bp type,
					    struct gdbserv_reg *addr,
					    struct gdbserv_reg *len);
#else /* SID */
  int (*remove_breakpoint) (struct gdbserv *, unsigned long type, 
			    struct gdbserv_reg *addr, struct gdbserv_reg *len);
  int (*set_breakpoint) (struct gdbserv *, unsigned long type,
			 struct gdbserv_reg *addr, struct gdbserv_reg *len);
#endif

  /* misc methods */
  void (*process_target_packet) (struct gdbserv *);

  /* shutdown */
  void (*detach) (struct gdbserv *);

  /* instance specific data */
  void *data;
};

void *gdbserv_target_data (struct gdbserv *gdbserv);


@


1.2
log
@* step-out-of-range packet support

[sid/include]
2002-02-12  Frank Ch. Eigler  <fche@@redhat.com>

	* sidcpuutil.h (basic_cpu ctor): Add full gdb-register-pc attribute.
	(basic_cpu add_watchable_register): Associate watchable with raw
	Value*, not attribute string.

[sid/component/gdb]
2002-02-11  Frank Ch. Eigler  <fche@@redhat.com>

	* gdb.cxx (rangestep_program_hook, rangestep_program): New functions.
	(process_set_pc): Implement.
	(gdb ctor): Support new attribute "enable-E-packet?", default true.
	(cpu_trap_handler): When rangestepping, keep CPU going as needed.
	(exit_program, break_program, singlestep_program): Clear
	range-stepping variables.
	(continue_program, stop_handler, trapstop_handler): Ditto.
	* gdb.h: Corresponding changes.
	* gdbserv-state.c (gdbserv_data_packet): Implement support for
	'E'/'e' packets through new rangestep_program target hook.
	(gdbserv_fromtarget_break): Discard pending output packet.
	* gdbserv-state.h: Corresponding changes.
@
text
@d4 1
a4 1
 * Copyright (C) 2000, 2002 Red Hat.
d128 1
@


1.1
log
@* public snapshot of sid simulator
@
text
@d4 1
a4 1
 * Copyright (C) 2000 Red Hat.
d122 3
@

