head	1.2;
access;
symbols
	sid-snapshot-20180601:1.2
	sid-snapshot-20180501:1.2
	sid-snapshot-20180401:1.2
	sid-snapshot-20180301:1.2
	sid-snapshot-20180201:1.2
	sid-snapshot-20180101:1.2
	sid-snapshot-20171201:1.2
	sid-snapshot-20171101:1.2
	sid-snapshot-20171001:1.2
	sid-snapshot-20170901:1.2
	sid-snapshot-20170801:1.2
	sid-snapshot-20170701:1.2
	sid-snapshot-20170601:1.2
	sid-snapshot-20170501:1.2
	sid-snapshot-20170401:1.2
	sid-snapshot-20170301:1.2
	sid-snapshot-20170201:1.2
	sid-snapshot-20170101:1.2
	sid-snapshot-20161201:1.2
	sid-snapshot-20161101:1.2
	sid-snapshot-20160901:1.2
	sid-snapshot-20160801:1.2
	sid-snapshot-20160701:1.2
	sid-snapshot-20160601:1.2
	sid-snapshot-20160501:1.2
	sid-snapshot-20160401:1.2
	sid-snapshot-20160301:1.2
	sid-snapshot-20160201:1.2
	sid-snapshot-20160101:1.2
	sid-snapshot-20151201:1.2
	sid-snapshot-20151101:1.2
	sid-snapshot-20151001:1.2
	sid-snapshot-20150901:1.2
	sid-snapshot-20150801:1.2
	sid-snapshot-20150701:1.2
	sid-snapshot-20150601:1.2
	sid-snapshot-20150501:1.2
	sid-snapshot-20150401:1.2
	sid-snapshot-20150301:1.2
	sid-snapshot-20150201:1.2
	sid-snapshot-20150101:1.2
	sid-snapshot-20141201:1.2
	sid-snapshot-20141101:1.2
	sid-snapshot-20141001:1.2
	sid-snapshot-20140901:1.2
	sid-snapshot-20140801:1.2
	sid-snapshot-20140701:1.2
	sid-snapshot-20140601:1.2
	sid-snapshot-20140501:1.2
	sid-snapshot-20140401:1.2
	sid-snapshot-20140301:1.2
	sid-snapshot-20140201:1.2
	sid-snapshot-20140101:1.2
	sid-snapshot-20131201:1.2
	sid-snapshot-20131101:1.2
	sid-snapshot-20131001:1.2
	sid-snapshot-20130901:1.2
	sid-snapshot-20130801:1.2
	sid-snapshot-20130701:1.2
	sid-snapshot-20130601:1.2
	sid-snapshot-20130501:1.2
	sid-snapshot-20130401:1.2
	sid-snapshot-20130301:1.2
	sid-snapshot-20130201:1.2
	sid-snapshot-20130101:1.2
	sid-snapshot-20121201:1.2
	sid-snapshot-20121101:1.2
	sid-snapshot-20121001:1.2
	sid-snapshot-20120901:1.2
	sid-snapshot-20120801:1.2
	sid-snapshot-20120701:1.2
	sid-snapshot-20120601:1.2
	sid-snapshot-20120501:1.2
	sid-snapshot-20120401:1.2
	sid-snapshot-20120301:1.2
	sid-snapshot-20120201:1.2
	sid-snapshot-20120101:1.2
	sid-snapshot-20111201:1.2
	sid-snapshot-20111101:1.2
	sid-snapshot-20111001:1.2
	sid-snapshot-20110901:1.2
	sid-snapshot-20110801:1.2
	sid-snapshot-20110701:1.2
	sid-snapshot-20110601:1.2
	sid-snapshot-20110501:1.2
	sid-snapshot-20110401:1.2
	sid-snapshot-20110301:1.2
	sid-snapshot-20110201:1.2
	sid-snapshot-20110101:1.2
	sid-snapshot-20101201:1.2
	sid-snapshot-20101101:1.2
	sid-snapshot-20101001:1.2
	sid-snapshot-20100901:1.2
	sid-snapshot-20100801:1.2
	sid-snapshot-20100701:1.2
	sid-snapshot-20100601:1.2
	sid-snapshot-20100501:1.2
	sid-snapshot-20100401:1.2
	sid-snapshot-20100301:1.2
	sid-snapshot-20100201:1.2
	sid-snapshot-20100101:1.2
	sid-snapshot-20091201:1.2
	sid-snapshot-20091101:1.2
	sid-snapshot-20091001:1.2
	sid-snapshot-20090901:1.2
	sid-snapshot-20090801:1.2
	sid-snapshot-20090701:1.2
	sid-snapshot-20090601:1.2
	sid-snapshot-20090501:1.2
	sid-snapshot-20090401:1.2
	sid-snapshot-20090301:1.2
	sid-snapshot-20090201:1.2
	sid-snapshot-20090101:1.2
	sid-snapshot-20081201:1.2
	sid-snapshot-20081101:1.2
	sid-snapshot-20081001:1.2
	sid-snapshot-20080901:1.2
	sid-snapshot-20080801:1.2
	sid-snapshot-20080701:1.2
	sid-snapshot-20080601:1.2
	sid-snapshot-20080501:1.2
	sid-snapshot-20080403:1.2
	sid-snapshot-20080401:1.2
	sid-snapshot-20080301:1.2
	sid-snapshot-20080201:1.2
	sid-snapshot-20080101:1.2
	sid-snapshot-20071201:1.2
	sid-snapshot-20071101:1.2
	sid-snapshot-20071001:1.2
	sid-20020905-branchpoint:1.2
	sid-20020905-branch:1.2.0.2
	cygnus_cvs_20020108_pre:1.2;
locks; strict;
comment	@// @;


1.2
date	2001.06.22.07.22.52;	author bje;	state Exp;
branches;
next	1.1;

1.1
date	2000.12.07.19.30.55;	author fche;	state Exp;
branches;
next	;


desc
@@


1.2
log
@2001-06-22  Ben Elliston  <bje@@redhat.com>

	* am29.cxx (am29_bus::write): Never return bus::delayed.
	(am29_bus::read) [big_int_1]: Likewise.
	(am29_bus::read) [little_int_1]: Likewise.
@
text
@// am29.cxx - Implementation of AMD's 29xxx flash memory.  -*- C++ -*-

// Copyright (C) 1999, 2000 Red Hat.
// This file is part of SID and is licensed under the GPL.
// See the file COPYING.SID for conditions for redistribution.

#include <sidcomp.h>
#include <sidbusutil.h>

#include "am29.h"

enum {
  STATE_READ,
  STATE_UNLOCK1,
  STATE_UNLOCK2,
  STATE_AUTOSELECT,
  STATE_PROGRAM,
  STATE_ERASE0,
  STATE_ERASE1,
  STATE_ERASE2,
  STATE_BYPASS,
  STATE_BYPASS_RESET
};

enum {
  UNLOCK = 0x555,
  UNLOCK2 = 0x2AA
};

enum {
  AUTOSELECT_CMD = 0x90,
  ERASE_CMD = 0x80,
  ERASE_CHIP_CMD = 0x10,
  ERASE_SECTOR_CMD = 0x30,
  PROGRAM_CMD = 0xA0,
  UNLOCK1_CMD = 0xAA,
  UNLOCK2_CMD = 0x55,
  BYPASS_CMD = 0x20,
  BYPASS_PROG_CMD = 0xA0,
  BYPASS_RESET_CMD = 0x90
};
 
am29_flash_memory::am29_flash_memory (size_t ms, size_t ss, host_int_1 id)
  :my_bus(this),
   manufacturerCode(0x01)
{
  // set incoming parameters
  deviceIdCode = id;
  sector_size = ss;
  if (!attempt_resize(ms))
    {
      throw bad_alloc();
    }
  
  mode = STATE_READ;
  erase();

  add_bus("read-write-port", &this->my_bus);
  add_attribute_ro("mode", &mode);
  add_attribute("device-code", &deviceIdCode, "setting");
  add_attribute_ro_value("manufacturer-code", manufacturerCode, "setting");
}

void
am29_flash_memory::stream_state (ostream& out) const
{
  flash_uniform_sector_memory::stream_state(out);
  if (!out.good())
    return;

  out << ':' << "device-code " << deviceIdCode;
}

void
am29_flash_memory::destream_state (istream& in)
{
  flash_uniform_sector_memory::destream_state(in);
  if (!in.good())
    return;

  char ch;
  string key;

  in.get(ch);
  if (ch != ':')
    {
      in.setstate(ios::badbit);
      return;
    }
  in >> key;
  if (key != "device-code")
    {
      in.setstate(ios::badbit);
      return;
    }
  in >> deviceIdCode;
}


// Erase the entire chip.
void
am29_flash_memory::erase()
{
  for (unsigned i = 0; i < buffer_length; i++)
    {
     buffer[i] = 0xFF;
    }
}

// Erase a sector.
void
am29_flash_memory::erase(unsigned sector)
{
  host_int_4 start_addr = sector_size * sector;

  if (start_addr >= buffer_length)
    return;

  host_int_4 end_addr = sector_size * (sector + 1);

  if (end_addr > buffer_length)
    end_addr = buffer_length;
  
  assert(start_addr < end_addr);
  assert(start_addr < buffer_length);
  assert(end_addr < buffer_length);
  
  for (unsigned i = start_addr; i < end_addr; i++)
    {
      buffer[i] = 0xFF;
    }
}


bool
am29_flash_memory::write_ok(host_int_4 address)
{
  return (mode == STATE_PROGRAM);
}


bus::status
am29_flash_memory::am29_bus::read(host_int_4 address,
				  little_int_1& data) throw ()
{
  if (target->mode == STATE_AUTOSELECT)
    {
      if ((address & 0xF) == 0)
	data = target->manufacturerCode;
      else if ((address & 0xF) == 1)
	data = target->deviceIdCode;
      else if ((address & 0xF) == 2)
	{
	  // FIXME: All sectors are unprotected.
	  data = 0;
	}
      return bus::ok;
    }
  
  // Bounds check the memory reference.
  if (address > target->buffer_length)
    {
      return bus::unmapped;
    }
  data = target->buffer[address];
  return sid::bus::ok;
}
 

bus::status
am29_flash_memory::am29_bus::read(host_int_4 address,
				  big_int_1& data) throw ()
{
  little_int_1 littleData(data);
  bus::status result = read(address, littleData);
  data = littleData;
  return result;
}	


bus::status
am29_flash_memory::am29_bus::write(host_int_4 address, 
				   little_int_1 le_data) throw()
{
  host_int_1 data = le_data;
      
  switch (target->mode)
    {
    case STATE_READ:
      if (address == UNLOCK && data == UNLOCK1_CMD)
	{
	  target->mode = STATE_UNLOCK1;
	  return bus::ok;
	}
      return bus::unpermitted;

    case STATE_AUTOSELECT:
      // Don't care about the address bits for the reset command.
      if (data == 0xF0)
	{
	  target->mode = STATE_READ;
	  return bus::ok;
	}
      return bus::ok;

    case STATE_BYPASS:
      // Don't care about address bits for the bypass program cmd.
      if (data == BYPASS_PROG_CMD)
	target->mode = STATE_PROGRAM;
      else if (data == BYPASS_RESET_CMD)
	target->mode = STATE_BYPASS_RESET;
      else
	target->mode = STATE_READ;
      return bus::ok;

    case STATE_BYPASS_RESET:
      // Go back to read mode unconditionally -- this is the
      // expected behaviour even if the magic codes are wrong.
      target->mode = STATE_READ;
      return bus::ok;

    case STATE_ERASE0:
      if (address == UNLOCK && data == UNLOCK1_CMD)
	target->mode = STATE_ERASE1;
      else
	target->mode = STATE_READ;
      return bus::ok;

    case STATE_ERASE1:
      if (address == UNLOCK2 && data == UNLOCK2_CMD)
	target->mode = STATE_ERASE2;
      else
	target->mode = STATE_READ;
      return bus::ok;

    case STATE_ERASE2:
      if (address == UNLOCK && data == ERASE_CHIP_CMD)
	{
	  target->erase();
	}
      else if (UNLOCK && data == ERASE_SECTOR_CMD)
	{
	  target->erase((address >> 16));
	}
      target->mode = STATE_READ;
      return bus::ok;
	  
    case STATE_UNLOCK1:
      if (address == UNLOCK2 && data == UNLOCK2_CMD)
	target->mode = STATE_UNLOCK2;
      else
	target->mode = STATE_READ;
      return bus::ok;
	  
    case STATE_UNLOCK2:
      if (address == UNLOCK && data == AUTOSELECT_CMD)
	target->mode = STATE_AUTOSELECT;
      else if (address == UNLOCK && data == PROGRAM_CMD)
	target->mode = STATE_PROGRAM;
      else if (address == UNLOCK && data == ERASE_CMD)
	target->mode = STATE_ERASE0;
      else if (address == UNLOCK && data == BYPASS_CMD)
	target->mode = STATE_BYPASS;
      else
	target->mode = STATE_READ;
      return bus::ok;
    }

  if (address > target->buffer_length)
    {
      return bus::unmapped;
    }

  if (target->write_ok(address))
    {
      little_int_1 old_data = target->buffer[address];
      for (int i = 0; i < 8; i++)
	{
	  int mask = 1 << i;
	  if (((old_data & mask) == 0) && ((data & mask) != 0))
	    {
	      // Cannot change a 0 back to a 1, so clear this bit.
	      data &= ~mask;
	    }
	}
		  
      target->buffer[address] = data;
      target->mode = STATE_READ;
      return bus::ok;
    }
 // XXX: error
}


bus::status
am29_flash_memory::am29_bus::write(host_int_4 address,
				   big_int_1 data) throw ()
{
  return write(address, little_int_1(data));
}

// static const description table for flash family
// Details taken from AMD data sheet, publication no. 21354, 1999-05-18.

const am29_flash_memory_type am29_flash_memory::types[] = 
{
  { "f010a", 128*1024, 16*1024, 0x20 },
  { "lv010b", 128*1024, 16*1024, 0x6E },
  { "lv040b", 512*1024, 64*1024, 0x4F },
  { "lv081b", 1024*1024, 64*1024, 0x38 },
  { "lv017b", 2*1024*1024, 64*1024, 0xC8 },
  { "lv033c", 4*1024*1024, 64*1024, 0xA3 },
  // termination
  { 0, 0, 0, 0 }
};
@


1.1
log
@* public snapshot of sid simulator
@
text
@d146 1
a146 1
  try
d148 5
a152 1
      if (target->mode == STATE_AUTOSELECT)
d154 2
a155 10
	  if ((address & 0xF) == 0)
	    data = target->manufacturerCode;
	  else if ((address & 0xF) == 1)
	    data = target->deviceIdCode;
	  else if ((address & 0xF) == 2)
	    {
	      // FIXME: All sectors are unprotected.
	      data = 0;
	    }
	  return bus::ok;
d157 1
a157 8

      // Bounds check the memory reference.
      if (address > target->buffer_length)
	{
	  return bus::unmapped;
	}
      data = target->buffer[address];
      return sid::bus::ok;
d159 3
a161 1
  catch (...)
d163 1
a163 1
      return sid::bus::delayed;
d165 2
d174 4
a177 11
  try
    {
      little_int_1 littleData(data);
      bus::status result = read(address, littleData);
      data = littleData;
      return result;
    }
  catch (...)
    {
      return sid::bus::delayed;
    }
d185 3
a187 1
  try
d189 2
a190 3
      host_int_1 data = le_data;
      
      switch (target->mode)
d192 1
a192 25
	case STATE_READ:
	  if (address == UNLOCK && data == UNLOCK1_CMD)
	    {
	      target->mode = STATE_UNLOCK1;
	      return bus::ok;
	    }
          return bus::unpermitted;

	case STATE_AUTOSELECT:
	  // Don't care about the address bits for the reset command.
	  if (data == 0xF0)
	    {
	      target->mode = STATE_READ;
	      return bus::ok;
	    }
          return bus::ok;

	case STATE_BYPASS:
	  // Don't care about address bits for the bypass program cmd.
	  if (data == BYPASS_PROG_CMD)
	    target->mode = STATE_PROGRAM;
	  else if (data == BYPASS_RESET_CMD)
	    target->mode = STATE_BYPASS_RESET;
	  else
	    target->mode = STATE_READ;
d194 2
d197 4
a200 3
	case STATE_BYPASS_RESET:
	  // Go back to read mode unconditionally -- this is the
	  // expected behaviour even if the magic codes are wrong.
d203 2
d206 22
a227 6
	case STATE_ERASE0:
	  if (address == UNLOCK && data == UNLOCK1_CMD)
	    target->mode = STATE_ERASE1;
	  else
	    target->mode = STATE_READ;
	  return bus::ok;
d229 6
a234 6
	case STATE_ERASE1:
	  if (address == UNLOCK2 && data == UNLOCK2_CMD)
	    target->mode = STATE_ERASE2;
	  else
	    target->mode = STATE_READ;
	  return bus::ok;
d236 11
a246 11
	case STATE_ERASE2:
	  if (address == UNLOCK && data == ERASE_CHIP_CMD)
	    {
	      target->erase();
	    }
	  else if (UNLOCK && data == ERASE_SECTOR_CMD)
	    {
	      target->erase((address >> 16));
	    }
	  target->mode = STATE_READ;
	  return bus::ok;
d248 6
a253 6
	case STATE_UNLOCK1:
	  if (address == UNLOCK2 && data == UNLOCK2_CMD)
	    target->mode = STATE_UNLOCK2;
	  else
	    target->mode = STATE_READ;
	  return bus::ok;
d255 18
a272 13
	case STATE_UNLOCK2:
	  if (address == UNLOCK && data == AUTOSELECT_CMD)
	    target->mode = STATE_AUTOSELECT;
	  else if (address == UNLOCK && data == PROGRAM_CMD)
	    target->mode = STATE_PROGRAM;
	  else if (address == UNLOCK && data == ERASE_CMD)
	    target->mode = STATE_ERASE0;
	  else if (address == UNLOCK && data == BYPASS_CMD)
	    target->mode = STATE_BYPASS;
	  else
	    target->mode = STATE_READ;
	  return bus::ok;
	}
d274 4
a277 1
      if (address > target->buffer_length)
d279 2
a280 7
	  return bus::unmapped;
	}

      if (target->write_ok(address))
        {
	  little_int_1 old_data = target->buffer[address];
	  for (int i = 0; i < 8; i++)
d282 2
a283 6
	      int mask = 1 << i;
	      if (((old_data & mask) == 0) && ((data & mask) != 0))
		{
		  // Cannot change a 0 back to a 1, so clear this bit.
		  data &= ~mask;
		}
d285 1
d287 3
a289 10
          target->buffer[address] = data;
	  target->mode = STATE_READ;
          return bus::ok;
        }
      else
        return bus::delayed;
    }
  catch (...)
    {
      return bus::delayed;
d291 1
@

