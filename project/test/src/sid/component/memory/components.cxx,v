head	1.3;
access;
symbols
	sid-snapshot-20180601:1.3
	sid-snapshot-20180501:1.3
	sid-snapshot-20180401:1.3
	sid-snapshot-20180301:1.3
	sid-snapshot-20180201:1.3
	sid-snapshot-20180101:1.3
	sid-snapshot-20171201:1.3
	sid-snapshot-20171101:1.3
	sid-snapshot-20171001:1.3
	sid-snapshot-20170901:1.3
	sid-snapshot-20170801:1.3
	sid-snapshot-20170701:1.3
	sid-snapshot-20170601:1.3
	sid-snapshot-20170501:1.3
	sid-snapshot-20170401:1.3
	sid-snapshot-20170301:1.3
	sid-snapshot-20170201:1.3
	sid-snapshot-20170101:1.3
	sid-snapshot-20161201:1.3
	sid-snapshot-20161101:1.3
	sid-snapshot-20160901:1.3
	sid-snapshot-20160801:1.3
	sid-snapshot-20160701:1.3
	sid-snapshot-20160601:1.3
	sid-snapshot-20160501:1.3
	sid-snapshot-20160401:1.3
	sid-snapshot-20160301:1.3
	sid-snapshot-20160201:1.3
	sid-snapshot-20160101:1.3
	sid-snapshot-20151201:1.3
	sid-snapshot-20151101:1.3
	sid-snapshot-20151001:1.3
	sid-snapshot-20150901:1.3
	sid-snapshot-20150801:1.3
	sid-snapshot-20150701:1.3
	sid-snapshot-20150601:1.3
	sid-snapshot-20150501:1.3
	sid-snapshot-20150401:1.3
	sid-snapshot-20150301:1.3
	sid-snapshot-20150201:1.3
	sid-snapshot-20150101:1.3
	sid-snapshot-20141201:1.3
	sid-snapshot-20141101:1.3
	sid-snapshot-20141001:1.3
	sid-snapshot-20140901:1.3
	sid-snapshot-20140801:1.3
	sid-snapshot-20140701:1.3
	sid-snapshot-20140601:1.3
	sid-snapshot-20140501:1.3
	sid-snapshot-20140401:1.3
	sid-snapshot-20140301:1.3
	sid-snapshot-20140201:1.3
	sid-snapshot-20140101:1.3
	sid-snapshot-20131201:1.3
	sid-snapshot-20131101:1.3
	sid-snapshot-20131001:1.3
	sid-snapshot-20130901:1.3
	sid-snapshot-20130801:1.3
	sid-snapshot-20130701:1.3
	sid-snapshot-20130601:1.3
	sid-snapshot-20130501:1.3
	sid-snapshot-20130401:1.3
	sid-snapshot-20130301:1.3
	sid-snapshot-20130201:1.3
	sid-snapshot-20130101:1.3
	sid-snapshot-20121201:1.3
	sid-snapshot-20121101:1.3
	sid-snapshot-20121001:1.3
	sid-snapshot-20120901:1.3
	sid-snapshot-20120801:1.3
	sid-snapshot-20120701:1.3
	sid-snapshot-20120601:1.3
	sid-snapshot-20120501:1.3
	sid-snapshot-20120401:1.3
	sid-snapshot-20120301:1.3
	sid-snapshot-20120201:1.3
	sid-snapshot-20120101:1.3
	sid-snapshot-20111201:1.3
	sid-snapshot-20111101:1.3
	sid-snapshot-20111001:1.3
	sid-snapshot-20110901:1.3
	sid-snapshot-20110801:1.3
	sid-snapshot-20110701:1.3
	sid-snapshot-20110601:1.3
	sid-snapshot-20110501:1.3
	sid-snapshot-20110401:1.3
	sid-snapshot-20110301:1.3
	sid-snapshot-20110201:1.3
	sid-snapshot-20110101:1.3
	sid-snapshot-20101201:1.3
	sid-snapshot-20101101:1.3
	sid-snapshot-20101001:1.3
	sid-snapshot-20100901:1.3
	sid-snapshot-20100801:1.3
	sid-snapshot-20100701:1.3
	sid-snapshot-20100601:1.3
	sid-snapshot-20100501:1.3
	sid-snapshot-20100401:1.3
	sid-snapshot-20100301:1.3
	sid-snapshot-20100201:1.3
	sid-snapshot-20100101:1.3
	sid-snapshot-20091201:1.3
	sid-snapshot-20091101:1.3
	sid-snapshot-20091001:1.3
	sid-snapshot-20090901:1.3
	sid-snapshot-20090801:1.3
	sid-snapshot-20090701:1.3
	sid-snapshot-20090601:1.3
	sid-snapshot-20090501:1.3
	sid-snapshot-20090401:1.3
	sid-snapshot-20090301:1.3
	sid-snapshot-20090201:1.3
	sid-snapshot-20090101:1.3
	sid-snapshot-20081201:1.3
	sid-snapshot-20081101:1.3
	sid-snapshot-20081001:1.3
	sid-snapshot-20080901:1.3
	sid-snapshot-20080801:1.3
	sid-snapshot-20080701:1.3
	sid-snapshot-20080601:1.3
	sid-snapshot-20080501:1.3
	sid-snapshot-20080403:1.3
	sid-snapshot-20080401:1.3
	sid-snapshot-20080301:1.3
	sid-snapshot-20080201:1.3
	sid-snapshot-20080101:1.3
	sid-snapshot-20071201:1.3
	sid-snapshot-20071101:1.3
	sid-snapshot-20071001:1.3
	sid-20020905-branchpoint:1.1
	sid-20020905-branch:1.1.0.2
	cygnus_cvs_20020108_pre:1.1;
locks; strict;
comment	@// @;


1.3
date	2007.02.05.20.28.41;	author brolley;	state Exp;
branches;
next	1.2;

1.2
date	2006.03.01.21.07.01;	author fche;	state Exp;
branches;
next	1.1;

1.1
date	2000.12.07.19.30.55;	author fche;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Support for Toshiba MeP.
@
text
@// components.cxx - definitions for this component library. -*- C++ -*-

// Copyright (C) 1999, 2000 Red Hat.
// This file is part of SID and is licensed under the GPL.
// See the file COPYING.SID for conditions for redistribution.

#include "config.h"

#include <sidcomp.h>
#include <sidso.h>

#include <vector>
#include <string>

#include "am29.h"
#include "at29.h"
#include "ramrom.h"
#include "mep-cache-tag.h"

using std::vector;
using std::string;

using sid::component;
using sid::component_library;
using sid::COMPONENT_LIBRARY_MAGIC;



// ----------------------------------------------------------------------------


static
vector<string>
compMemoryListTypes()
{
  vector<string> types;

  types.push_back("hw-memory-ram/rom-basic");

  types.push_back("hw-memory-flash-at29");
  for (const at29_flash_memory_type* ft = at29_flash_memory::types;
       ft->name != 0;
       ft++)
    {
      types.push_back(string("hw-memory-flash-at29") + ft->name);
    }

  types.push_back("hw-memory-flash-am29");
  for (const am29_flash_memory_type* ft = am29_flash_memory::types;
       ft->name != 0;
       ft++)
    {
      types.push_back(string("hw-memory-flash-am29") + ft->name);
    }

  types.push_back ("hw-mep-cache-tag-memory");

  return types;
}


static
component*
compMemoryCreate(const string& typeName)
{
  // Protect against the constructors throwing exceptions
  try
    {
      if (typeName == "hw-memory-ram/rom-basic")
	return new ramrom_memory();
      
      if (typeName == "hw-memory-flash-at29")
	return new at29_flash_memory(512*1024, 512, 0x5B); // default: AT29C040
      for (const at29_flash_memory_type* ft = at29_flash_memory::types;
	   ft->name != 0;
	   ft++)
	{
	  string that_type = string("hw-memory-flash-at29") + ft->name;
	  if (that_type == typeName)
	    return new at29_flash_memory(ft->memory_size, ft->sector_size, ft->device_id);
	}

      if (typeName == "hw-memory-flash-am29")
	{
	  // default: Am29LV040B
	  return new am29_flash_memory(512*1024, 64*1024, 0x4F);
	}
      for (const am29_flash_memory_type* ft = am29_flash_memory::types;
	   ft->name != 0;
	   ft++)
	{
	  string that_type = string("hw-memory-flash-am29") + ft->name;
	  if (that_type == typeName)
	    return new am29_flash_memory(ft->memory_size, ft->sector_size, ft->device_id);
	}

      if (typeName == "hw-mep-cache-tag-memory")
	return new mep_cache_tag_memory ();
    }
  catch (...) { }

  return 0;
}


static
void
compMemoryDelete(component* c)
{
  // generic_memory is a base class for all components that may have come from here
  delete dynamic_cast<generic_memory*>(c);
}



// static object
DLLEXPORT extern const component_library mem_component_library;

const component_library mem_component_library =
{
  COMPONENT_LIBRARY_MAGIC,
  & compMemoryListTypes, 
  & compMemoryCreate,
  & compMemoryDelete
};
@


1.2
log
@* DLLEXPORT decoration tweak, from Rex Sung-Tien Cho <song10@@andestech.com>
@
text
@d18 1
d56 2
d96 3
@


1.1
log
@* public snapshot of sid simulator
@
text
@d111 1
a111 1
extern const component_library mem_component_library;
d113 1
a113 1
const component_library mem_component_library DLLEXPORT = 
@

