head	1.7;
access;
symbols
	sid-snapshot-20180601:1.7
	sid-snapshot-20180501:1.7
	sid-snapshot-20180401:1.7
	sid-snapshot-20180301:1.7
	sid-snapshot-20180201:1.7
	sid-snapshot-20180101:1.7
	sid-snapshot-20171201:1.7
	sid-snapshot-20171101:1.7
	sid-snapshot-20171001:1.7
	sid-snapshot-20170901:1.7
	sid-snapshot-20170801:1.7
	sid-snapshot-20170701:1.7
	sid-snapshot-20170601:1.7
	sid-snapshot-20170501:1.7
	sid-snapshot-20170401:1.7
	sid-snapshot-20170301:1.7
	sid-snapshot-20170201:1.7
	sid-snapshot-20170101:1.7
	sid-snapshot-20161201:1.7
	sid-snapshot-20161101:1.7
	sid-snapshot-20160901:1.7
	sid-snapshot-20160801:1.7
	sid-snapshot-20160701:1.7
	sid-snapshot-20160601:1.7
	sid-snapshot-20160501:1.7
	sid-snapshot-20160401:1.7
	sid-snapshot-20160301:1.7
	sid-snapshot-20160201:1.7
	sid-snapshot-20160101:1.7
	sid-snapshot-20151201:1.7
	sid-snapshot-20151101:1.7
	sid-snapshot-20151001:1.7
	sid-snapshot-20150901:1.7
	sid-snapshot-20150801:1.7
	sid-snapshot-20150701:1.7
	sid-snapshot-20150601:1.7
	sid-snapshot-20150501:1.7
	sid-snapshot-20150401:1.7
	sid-snapshot-20150301:1.7
	sid-snapshot-20150201:1.7
	sid-snapshot-20150101:1.7
	sid-snapshot-20141201:1.7
	sid-snapshot-20141101:1.7
	sid-snapshot-20141001:1.7
	sid-snapshot-20140901:1.7
	sid-snapshot-20140801:1.7
	sid-snapshot-20140701:1.7
	sid-snapshot-20140601:1.7
	sid-snapshot-20140501:1.7
	sid-snapshot-20140401:1.7
	sid-snapshot-20140301:1.7
	sid-snapshot-20140201:1.7
	sid-snapshot-20140101:1.7
	sid-snapshot-20131201:1.7
	sid-snapshot-20131101:1.7
	sid-snapshot-20131001:1.7
	sid-snapshot-20130901:1.7
	sid-snapshot-20130801:1.7
	sid-snapshot-20130701:1.7
	sid-snapshot-20130601:1.7
	sid-snapshot-20130501:1.7
	sid-snapshot-20130401:1.7
	sid-snapshot-20130301:1.7
	sid-snapshot-20130201:1.7
	sid-snapshot-20130101:1.7
	sid-snapshot-20121201:1.7
	sid-snapshot-20121101:1.7
	sid-snapshot-20121001:1.7
	sid-snapshot-20120901:1.7
	sid-snapshot-20120801:1.7
	sid-snapshot-20120701:1.7
	sid-snapshot-20120601:1.7
	sid-snapshot-20120501:1.7
	sid-snapshot-20120401:1.7
	sid-snapshot-20120301:1.7
	sid-snapshot-20120201:1.7
	sid-snapshot-20120101:1.7
	sid-snapshot-20111201:1.7
	sid-snapshot-20111101:1.7
	sid-snapshot-20111001:1.7
	sid-snapshot-20110901:1.7
	sid-snapshot-20110801:1.7
	sid-snapshot-20110701:1.7
	sid-snapshot-20110601:1.7
	sid-snapshot-20110501:1.7
	sid-snapshot-20110401:1.7
	sid-snapshot-20110301:1.7
	sid-snapshot-20110201:1.7
	sid-snapshot-20110101:1.7
	sid-snapshot-20101201:1.7
	sid-snapshot-20101101:1.7
	sid-snapshot-20101001:1.7
	sid-snapshot-20100901:1.7
	sid-snapshot-20100801:1.7
	sid-snapshot-20100701:1.7
	sid-snapshot-20100601:1.7
	sid-snapshot-20100501:1.7
	sid-snapshot-20100401:1.7
	sid-snapshot-20100301:1.7
	sid-snapshot-20100201:1.7
	sid-snapshot-20100101:1.7
	sid-snapshot-20091201:1.7
	sid-snapshot-20091101:1.7
	sid-snapshot-20091001:1.7
	sid-snapshot-20090901:1.7
	sid-snapshot-20090801:1.7
	sid-snapshot-20090701:1.7
	sid-snapshot-20090601:1.7
	sid-snapshot-20090501:1.7
	sid-snapshot-20090401:1.7
	sid-snapshot-20090301:1.7
	sid-snapshot-20090201:1.7
	sid-snapshot-20090101:1.7
	sid-snapshot-20081201:1.7
	sid-snapshot-20081101:1.7
	sid-snapshot-20081001:1.7
	sid-snapshot-20080901:1.7
	sid-snapshot-20080801:1.7
	sid-snapshot-20080701:1.7
	sid-snapshot-20080601:1.6
	sid-snapshot-20080501:1.6
	sid-snapshot-20080403:1.6
	sid-snapshot-20080401:1.6
	sid-snapshot-20080301:1.6
	sid-snapshot-20080201:1.6
	sid-snapshot-20080101:1.6
	sid-snapshot-20071201:1.6
	sid-snapshot-20071101:1.6
	sid-snapshot-20071001:1.6
	sid-20020905-branchpoint:1.5
	sid-20020905-branch:1.5.0.2
	cygnus_cvs_20020108_pre:1.5;
locks; strict;
comment	@ * @;


1.7
date	2008.06.17.18.09.26;	author brolley;	state Exp;
branches;
next	1.6;

1.6
date	2007.02.05.20.28.41;	author brolley;	state Exp;
branches;
next	1.5;

1.5
date	2001.08.03.06.02.46;	author mrg;	state Exp;
branches;
next	1.4;

1.4
date	2001.06.21.12.49.39;	author bje;	state Exp;
branches;
next	1.3;

1.3
date	2001.03.13.21.39.21;	author fche;	state Exp;
branches;
next	1.2;

1.2
date	2001.03.01.19.15.34;	author fche;	state Exp;
branches;
next	1.1;

1.1
date	2000.12.07.19.30.55;	author fche;	state Exp;
branches;
next	;


desc
@@


1.7
log
@2008-06-17  Dave Brolley  <brolley@@redhat.com>

        * generic.h: Remove 'using sidutil::no_relation_component'. Add
        'using sidutil::fixed_relation_map_component'.
        (generic_memory): New inherits from reversible_component and
        fixed_relation_map_component. Now inherits virtually from
        fixed_pin_map_component and fixed_attribute_map_component.
        (sched): New member of generic_memory.
        (change_log): Likewise.
        (record_update): New method of generic_memory.
        (restore_state_to_time): Likewise.
        (generic_read_write_bus::write_any): call record_update if this
        memory is reversible.
        * generic.cxx (generic_memory): Initialize sched and
        change_log. Add sim-sched relation.
        (record_update): New method of generic_memory.
        (restore_state_to_time): Likewise.
@
text
@// generic.h - Header for the generic_memory class.  -*- C++ -*-

// Copyright (C) 1999-2001, 2006, 2007 Red Hat.
// This file is part of SID and is licensed under the GPL.
// See the file COPYING.SID for conditions for redistribution.

#ifndef GENERIC_H
#define GENERIC_H


#include <sidcomp.h>
#include <sidso.h>
#include <sidcomputil.h>
#include <sidattrutil.h>
#include <sidpinutil.h>
#include <sidbusutil.h>
#include <sidtypes.h>
#include <sidmiscutil.h>

#include <vector>
#include <string>
#include <stdexcept>
#include <iostream>
#include <new>

using std::vector;
using std::string;
using std::bad_alloc;
using std::istream;
using std::ostream;
using std::ios;
using std::cerr;
using std::endl;
using std::ifstream;

using sid::component;
using sid::bus;
using sid::host_int_1;
using sid::host_int_2;
using sid::host_int_4;
using sid::little_int_1;
using sid::little_int_2;
using sid::little_int_4;
using sid::little_int_8;
using sid::big_int_1;
using sid::big_int_2;
using sid::big_int_4;
using sid::big_int_8;

using sidutil::fixed_pin_map_component;
using sidutil::no_accessor_component;
using sidutil::fixed_attribute_map_component;
using sidutil::fixed_relation_map_component;
using sidutil::fixed_bus_map_component;
using sidutil::reversible_component;
using sidutil::std_error_string;
using sidutil::callback_pin;
using sidutil::output_pin;


// ----------------------------------------------------------------------------


class generic_memory: public virtual component,
		      protected virtual fixed_pin_map_component,
		      protected no_accessor_component,
		      protected virtual fixed_attribute_map_component,
		      protected fixed_relation_map_component,
		      protected fixed_bus_map_component,
		      protected reversible_component
{
public:
  generic_memory() throw (bad_alloc);
  ~generic_memory();

protected:
  // memory buffers
  friend class generic_read_only_bus;
  friend class generic_read_write_bus;
  host_int_1* buffer;
  host_int_4 buffer_length;
  bool mmapping_p;

  // state control
  virtual string save_state() { return make_attribute(*this); }
  virtual component::status restore_state(const string& state)
  {
    return parse_attribute(state, *this);
  }
  virtual void stream_state (ostream&) const;
  virtual void destream_state (istream&);

  friend ostream& operator << (ostream& o, const generic_memory& it);
  friend istream& operator >> (istream& i, generic_memory& it);

  host_int_4 max_buffer_length;
  bool attempt_resize (host_int_4 new_length) throw();

  host_int_4 base_address;
  bool warn_rom_write;
  bool allow_rom_write;
  
  host_int_2 read_latency;
  host_int_2 write_latency;

protected:
  // Change logging for the purpose of reverse simulation.
  component *sched;
  sidutil::change_log change_log;
  void record_update (host_int_4 address, const void *bytes, unsigned width);
  virtual void restore_state_to_time (sid::host_int_4 tick);

private:
  string get_size_attr ();
  component::status set_size_attr (const string& s);

  string image_file_name;
  callback_pin<generic_memory> imageload_pin;
  void imageload_handler (host_int_4);
  callback_pin<generic_memory> imagestore_pin;
  void imagestore_handler (host_int_4);
  output_pin error_pin;
  callback_pin<generic_memory> imagemmap_pin;
  void imagemmap_handler (host_int_4);
  callback_pin<generic_memory> imagemsync_pin;
  void imagemsync_handler (host_int_4);
};




class generic_read_only_bus: public bus
{
public:
  generic_read_only_bus(generic_memory* target): 
    target(target) {}

  // some macros to make manufacturing of the cartesian-product calls simpler
#define SID_GB_WRITE(type2) \
      bus::status write(host_int_4 address, type2 data) throw () \
	  { if (! target->warn_rom_write && ! target->allow_rom_write) \
	       return bus::unpermitted;			\
	    cerr << "Warning: invalid write to ROM address 0x" << std::hex << target->base_address + address << endl; \
	    if (target->allow_rom_write)		\
	        return this->write_any(address,data);	\
	    else					\
		return bus::ok; }
 
#define SID_GB_READ(type2) \
      bus::status read(host_int_4 address, type2& data) throw () \
	  { return this->read_any(address,data); }
  
  // ----------------------------------------------------------------
  
    SID_GB_WRITE(little_int_1);
    SID_GB_WRITE(little_int_2);
    SID_GB_WRITE(little_int_4);
    SID_GB_WRITE(little_int_8);
    SID_GB_READ(little_int_1);
    SID_GB_READ(little_int_2);
    SID_GB_READ(little_int_4);
    SID_GB_READ(little_int_8);

    SID_GB_WRITE(big_int_1);
    SID_GB_WRITE(big_int_2);
    SID_GB_WRITE(big_int_4);
    SID_GB_WRITE(big_int_8);
    SID_GB_READ(big_int_1);
    SID_GB_READ(big_int_2);
    SID_GB_READ(big_int_4);
    SID_GB_READ(big_int_8);
      
#undef SID_GB_WRITE
#undef SID_GB_READ

protected:
  generic_memory* target;

  template <typename DataType>
  inline bus::status
  read_any(host_int_4 address, DataType& data);

  template <typename DataType>
  inline bus::status
  write_any(host_int_4 address, DataType data);
};




class generic_read_write_bus: public generic_read_only_bus
{
public:
  generic_read_write_bus(generic_memory* target): 
    generic_read_only_bus(target) {}


  // some macros to make manufacturing of the cartesian-product calls simpler
#define SID_GB_WRITE(type2) \
      bus::status write(host_int_4 address, type2 data) throw () \
	      { return this->write_any(address,data); } \
  
  // ----------------------------------------------------------------
  
    SID_GB_WRITE(little_int_1);
    SID_GB_WRITE(little_int_2);
    SID_GB_WRITE(little_int_4);
    SID_GB_WRITE(little_int_8);

    SID_GB_WRITE(big_int_1);
    SID_GB_WRITE(big_int_2);
    SID_GB_WRITE(big_int_4);
    SID_GB_WRITE(big_int_8);
      
#undef SID_GB_WRITE
};



// ----------------------------------------------------------------------------

template <typename DataType>
inline bus::status
generic_read_only_bus::write_any(host_int_4 address, DataType data)
{
  const unsigned width = sizeof(typename DataType::value_type); 

  // Range check address
  if (LIKELY((address >= 0) && ((address+width) <= target->buffer_length)))
    {
      typename DataType::value_type mem_image = data.target_memory_value();
      if (UNLIKELY (target->reversible_p))
	target->record_update (address, & mem_image, width);
      memcpy (& target->buffer[address], & mem_image, width);
      bus::status st (bus::ok);
      st.latency = target->write_latency;
      return st;
    }

  return bus::unmapped;
}


template <typename DataType>
inline sid::bus::status
generic_read_only_bus::read_any(host_int_4 address, DataType& data)
{
  const unsigned width = sizeof(typename DataType::value_type);

  // Range check address
  if (LIKELY((address >= 0) && ((address+width) <= target->buffer_length)))
    {
      typename DataType::value_type mem_image;
      memcpy (& mem_image, & target->buffer[address], width);
      data.set_target_memory_value (mem_image);
      bus::status st (bus::ok);
      st.latency = target->read_latency;
      return st;
    }

  return bus::unmapped;
}



// ----------------------------------------------------------------------------



#endif // GENERIC_H

@


1.6
log
@Support for Toshiba MeP.
@
text
@d3 1
a3 1
// Copyright (C) 1999-2001, 2007 Red Hat.
d53 1
a53 1
using sidutil::no_relation_component;
d55 1
d65 1
a65 1
		      protected fixed_pin_map_component,
d67 4
a70 3
		      protected fixed_attribute_map_component,
		      protected no_relation_component,
		      protected fixed_bus_map_component
d106 7
d232 2
@


1.5
log
@* make it compile with GCC 3.0:
        - missing throw() specifiers in bus & component dtors
	- `std::' vs `::' namespace issues
@
text
@d3 1
a3 1
// Copyright (C) 1999-2001 Red Hat.
d72 1
a72 1
  ~generic_memory() throw ();
d97 7
a107 3
  host_int_2 read_latency;
  host_int_2 write_latency;

d132 7
a138 1
	  { return bus::unpermitted; } 
d173 4
a206 5

protected:
  template <typename DataType>
  inline bus::status
  write_any(host_int_4 address, DataType data);
d215 1
a215 1
generic_read_write_bus::write_any(host_int_4 address, DataType data)
@


1.4
log
@2001-06-21  Ben Elliston  <bje@@redhat.com>

	* generic.h (generic_memory::read_latency): New member.
	(generic_memory::write_latency): Likewise.
	(generic_read_write_bus::write_any): Set write latency on return.
	(generic_read_only_bus::read_any): Likewise for read latency.
	* generic.cxx (generic_memory constructor): Initialise new
	read_latency and write_latency members. Add attributes for them.
	* hw-memory-ram_rom-basic.txt: Document extensions.
	* hw-memory-flash-am29.txt: Likewise.
	* hw-memory-flash-at29.txt: Likewise.
@
text
@d72 1
a72 1
  ~generic_memory();
@


1.3
log
@* mmap support

[bsp/ChangeLog]
2001-03-13  Frank Ch. Eigler  <fche@@redhat.com>

        * configrun-sid.in: Add "mmap" memory region option.
        Document it and others in "--help" text.

[component/memory/ChangeLog]
2001-03-13  Frank Ch. Eigler  <fche@@redhat.com>

        Adding support for memory-mapped files and pin-based error signalling.
        * generic.cxx (generic_memory ctor): Add three new pins.
        (generic_memory dtor): munmap if mapping.
        (attempt_resize): Drive error pin when needed.  munmap if mapping.
        (imageload_handler, imagestore_handler): Drive error pin when needed.
        (imagemsync_handler, imagemmap_handler): New functions.
        * generic.h: Corresponding changes.
        * hw-memory-ram_rom-basic.txt: Document extensions.

[component/testsuite/ChangeLog]
2001-03-13  Frank Ch. Eigler  <fche@@redhat.com>

        * sidcomp.mapper/busif.exp: Disable if !enable_shared.
        * sidcomp.memory/genericmemory.exp: Add tests for mmap functions.
@
text
@d39 1
d101 3
d215 3
a217 1
      return bus::ok; 
d236 3
a238 1
      return bus::ok;
@


1.2
log
@* branch probability hinting

[cgen/ChangeLog]
2001-03-01  Frank Ch. Eigler  <fche@@redhat.com>

	* sid.cpu (-op-gen-set-trace[-parallel], -create-virtual-insns!):
	Emit LIKELY/UNLIKELY branch probability hints.
	* sid-decode.cpu (-gen-record-args): Ditto.

[sid/include/ChangeLog]
2001-03-01  Frank Ch. Eigler  <fche@@redhat.com>

	* sidconfig.h (LIKELY, UNLIKELY): New conditional cover macros
	for gcc's __builtin_expect branch probability hinting function.
	* sidbusutil.h (passthrough_bus, mux_password_bus, harvard_bus):
	Add some branch probability hints.
	* sidcpuutil.h (step_pin_handler, stop_after_insns_p,
	{read,write}_{insn,data}_memory): Ditto.
	* sidpinutil.h (callback_pin::driven): Remove unnecessary assert
	from critical path.

[eg. sid/component/mapper/ChangeLog]
2001-03-01  Frank Ch. Eigler  <fche@@redhat.com>

	* compMapper.cxx ({read,write}_strideoffset_any): Added b.p. hints.
	(write_any, read_any, locate): Ditto.

[sid/component/cgen-cpu/ChangeLog]
2001-03-01  Frank Ch. Eigler  <fche@@redhat.com>

	* cgen-engine.h (set_pbb_engine, chain, get_next_vpc, pbb_find,
	pbb_find_or_alloc, pbb_before, pbb_after): Add branch probability
	hints.

[eg. sid/component/cgen-cpu/arm7t/ChangeLog]
2001-03-01  Frank Ch. Eigler  <fche@@redhat.com>

	* arm-decode.cxx, -sem.cxx, -semsw.cxx: Regenerated w/ b.p. hints.
	* thumb-decode.cxx, -sem.cxx, -semsw.cxx: Ditto.
@
text
@d3 1
a3 1
// Copyright (C) 1999, 2000 Red Hat.
d56 1
d79 1
d105 5
@


1.1
log
@* public snapshot of sid simulator
@
text
@d200 1
a200 1
  if ((address >= 0) && ((address+width) <= target->buffer_length))
d218 1
a218 1
  if ((address >= 0) && ((address+width) <= target->buffer_length))
@

