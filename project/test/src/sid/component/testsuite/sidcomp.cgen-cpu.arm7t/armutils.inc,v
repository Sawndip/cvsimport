head	1.1;
access;
symbols
	sid-snapshot-20180601:1.1
	sid-snapshot-20180501:1.1
	sid-snapshot-20180401:1.1
	sid-snapshot-20180301:1.1
	sid-snapshot-20180201:1.1
	sid-snapshot-20180101:1.1
	sid-snapshot-20171201:1.1
	sid-snapshot-20171101:1.1
	sid-snapshot-20171001:1.1
	sid-snapshot-20170901:1.1
	sid-snapshot-20170801:1.1
	sid-snapshot-20170701:1.1
	sid-snapshot-20170601:1.1
	sid-snapshot-20170501:1.1
	sid-snapshot-20170401:1.1
	sid-snapshot-20170301:1.1
	sid-snapshot-20170201:1.1
	sid-snapshot-20170101:1.1
	sid-snapshot-20161201:1.1
	sid-snapshot-20161101:1.1
	sid-snapshot-20160901:1.1
	sid-snapshot-20160801:1.1
	sid-snapshot-20160701:1.1
	sid-snapshot-20160601:1.1
	sid-snapshot-20160501:1.1
	sid-snapshot-20160401:1.1
	sid-snapshot-20160301:1.1
	sid-snapshot-20160201:1.1
	sid-snapshot-20160101:1.1
	sid-snapshot-20151201:1.1
	sid-snapshot-20151101:1.1
	sid-snapshot-20151001:1.1
	sid-snapshot-20150901:1.1
	sid-snapshot-20150801:1.1
	sid-snapshot-20150701:1.1
	sid-snapshot-20150601:1.1
	sid-snapshot-20150501:1.1
	sid-snapshot-20150401:1.1
	sid-snapshot-20150301:1.1
	sid-snapshot-20150201:1.1
	sid-snapshot-20150101:1.1
	sid-snapshot-20141201:1.1
	sid-snapshot-20141101:1.1
	sid-snapshot-20141001:1.1
	sid-snapshot-20140901:1.1
	sid-snapshot-20140801:1.1
	sid-snapshot-20140701:1.1
	sid-snapshot-20140601:1.1
	sid-snapshot-20140501:1.1
	sid-snapshot-20140401:1.1
	sid-snapshot-20140301:1.1
	sid-snapshot-20140201:1.1
	sid-snapshot-20140101:1.1
	sid-snapshot-20131201:1.1
	sid-snapshot-20131101:1.1
	sid-snapshot-20131001:1.1
	sid-snapshot-20130901:1.1
	sid-snapshot-20130801:1.1
	sid-snapshot-20130701:1.1
	sid-snapshot-20130601:1.1
	sid-snapshot-20130501:1.1
	sid-snapshot-20130401:1.1
	sid-snapshot-20130301:1.1
	sid-snapshot-20130201:1.1
	sid-snapshot-20130101:1.1
	sid-snapshot-20121201:1.1
	sid-snapshot-20121101:1.1
	sid-snapshot-20121001:1.1
	sid-snapshot-20120901:1.1
	sid-snapshot-20120801:1.1
	sid-snapshot-20120701:1.1
	sid-snapshot-20120601:1.1
	sid-snapshot-20120501:1.1
	sid-snapshot-20120401:1.1
	sid-snapshot-20120301:1.1
	sid-snapshot-20120201:1.1
	sid-snapshot-20120101:1.1
	sid-snapshot-20111201:1.1
	sid-snapshot-20111101:1.1
	sid-snapshot-20111001:1.1
	sid-snapshot-20110901:1.1
	sid-snapshot-20110801:1.1
	sid-snapshot-20110701:1.1
	sid-snapshot-20110601:1.1
	sid-snapshot-20110501:1.1
	sid-snapshot-20110401:1.1
	sid-snapshot-20110301:1.1
	sid-snapshot-20110201:1.1
	sid-snapshot-20110101:1.1
	sid-snapshot-20101201:1.1
	sid-snapshot-20101101:1.1
	sid-snapshot-20101001:1.1
	sid-snapshot-20100901:1.1
	sid-snapshot-20100801:1.1
	sid-snapshot-20100701:1.1
	sid-snapshot-20100601:1.1
	sid-snapshot-20100501:1.1
	sid-snapshot-20100401:1.1
	sid-snapshot-20100301:1.1
	sid-snapshot-20100201:1.1
	sid-snapshot-20100101:1.1
	sid-snapshot-20091201:1.1
	sid-snapshot-20091101:1.1
	sid-snapshot-20091001:1.1
	sid-snapshot-20090901:1.1
	sid-snapshot-20090801:1.1
	sid-snapshot-20090701:1.1
	sid-snapshot-20090601:1.1
	sid-snapshot-20090501:1.1
	sid-snapshot-20090401:1.1
	sid-snapshot-20090301:1.1
	sid-snapshot-20090201:1.1
	sid-snapshot-20090101:1.1
	sid-snapshot-20081201:1.1
	sid-snapshot-20081101:1.1
	sid-snapshot-20081001:1.1
	sid-snapshot-20080901:1.1
	sid-snapshot-20080801:1.1
	sid-snapshot-20080701:1.1
	sid-snapshot-20080601:1.1
	sid-snapshot-20080501:1.1
	sid-snapshot-20080403:1.1
	sid-snapshot-20080401:1.1
	sid-snapshot-20080301:1.1
	sid-snapshot-20080201:1.1
	sid-snapshot-20080101:1.1
	sid-snapshot-20071201:1.1
	sid-snapshot-20071101:1.1
	sid-snapshot-20071001:1.1
	sid-20020905-branchpoint:1.1
	sid-20020905-branch:1.1.0.2
	cygnus_cvs_20020108_pre:1.1;
locks; strict;
comment	@# @;


1.1
date	2001.05.14.06.35.30;	author bje;	state Exp;
branches;
next	;


desc
@@


1.1
log
@2001-05-14  Ben Elliston  <bje@@redhat.com>

	* sidcomp.cgen-cpu/armconf.exp: Move to sidcomp.cgen-cpu.arm7t.
	* sidcomp.cgen-cpu/armeit.conf: Ditto.
	* sidcomp.cgen-cpu/armeit.tcl: Ditto.
	* sidcomp.cgen-cpu/armfiq.cs: Ditto.
	* sidcomp.cgen-cpu/armhello.ms: Ditto.
	* sidcomp.cgen-cpu/armimemfault.ms: Ditto.
	* sidcomp.cgen-cpu/arminvinsn.ms: Ditto.
	* sidcomp.cgen-cpu/armirq.cs: Ditto.
	* sidcomp.cgen-cpu/armmemfault.ms: Ditto.
	* sidcomp.cgen-cpu/armmisc.exp: Ditto.
	* sidcomp.cgen-cpu/armutils.inc: Ditto.
@
text
@# r0-r3 are used as tmps, consider them call clobbered by these macros.
# This uses the angel rom monitor calls.
# ??? How do we use the \@@ facility of .macros ???
# @@ is the comment char!

# Various useful constants.

	.equ NBIT, 0x80000000
	.equ ZBIT, 0x40000000
	.equ CBIT, 0x20000000
	.equ VBIT, 0x10000000

	.equ IBIT, 0x80
	.equ FBIT, 0x40
	.equ TBIT, 0x20

	.equ MODE_BITS, 0x1f
	.equ USER_MODE, 0x10
	.equ FIQ_MODE, 0x11
	.equ IRQ_MODE, 0x12
	.equ SUPERVISOR_MODE, 0x13
	.equ ABORT_MODE, 0x17
	.equ UNDEFINED_MODE, 0x1b
	.equ SYSTEM_MODE, 0x1f

	.equ RESET_ADDR, 0
	.equ UNDEFINED_INSN_ADDR, 4
	.equ SWI_ADDR, 8
	.equ PREFETCH_ABORT_ADDR, 12
	.equ DATA_ABORT_ADDR, 16
	.equ IRQ_ADDR, 0x18
	.equ FIQ_ADDR, 0x1c

# Move an arbitrary constant into REG.

	.macro mvi_h_gr reg, val
	ldr \reg,[pc]
	b . + 8
	.word \val
	.endm

# Move an address into REG.

	.macro mvaddr_h_gr reg, addr
	ldr \reg,[pc]
	b . + 8
	.word \addr
	.endm

# Use this macro as the entry point of your testcase.

	.macro start
	.data
failmsg:
	.asciz "fail\n"
passmsg:
	.asciz "pass\n"
	.text

do_pass:
	mov r0, #4 @@ write0 angel call
	ldr r1, passmsg_addr
	swi 0x123456
	b do_exit
passmsg_addr:
	.word passmsg

do_fail:
	mov r0, #4 @@ write0 angel call
	ldr r1, failmsg_addr
	swi 0x123456
	b do_exit
failmsg_addr:
	.word failmsg

do_exit:
	bl . + 8
	.word 0x20026
	mov r0,#0x18
	ldr r1,[r14]
	swi #0x123456
	# If that returns, punt with a sigill.
# This is "undefined" but it's not properly decoded yet.
	.word 0x07ffffff
# This is stc which isn't recognized yet.
	stc 0,cr0,[r0]

	.global _start
_start:
	.endm

# *** Other macros know pass/fail are 4 bytes in size!  Yuck.

	.macro pass
	b do_pass
	.endm

	.macro fail
	b do_fail
	.endm

# Verify REG has a certain value.
# Other macros know this only clobbers r0.

	.macro test_h_gr reg, val
	mvaddr_h_gr r0, \val
	cmp \reg, r0
	beq . + 8
	fail
	.endm

# Set the condition codes.  unfinished

	.macro mvi_h_cc c, n, v, z
	ldi8 r0, 0
	ldi8 r1, 1
	.if xxx
	cmp r0, r1
	.else
	cmp r1, r0
	.endif
	.endm

# Verify the condition codes have a certain value.

	.macro test_h_cc c, n, v, z
	.if xxx
	bc . + 8
	fail
	.else
	bnc . + 8
	fail
	.endif
	.endm
@
