head	1.4;
access;
symbols
	sid-snapshot-20180601:1.4
	sid-snapshot-20180501:1.4
	sid-snapshot-20180401:1.4
	sid-snapshot-20180301:1.4
	sid-snapshot-20180201:1.4
	sid-snapshot-20180101:1.4
	sid-snapshot-20171201:1.4
	sid-snapshot-20171101:1.4
	sid-snapshot-20171001:1.4
	sid-snapshot-20170901:1.4
	sid-snapshot-20170801:1.4
	sid-snapshot-20170701:1.4
	sid-snapshot-20170601:1.4
	sid-snapshot-20170501:1.4
	sid-snapshot-20170401:1.4
	sid-snapshot-20170301:1.4
	sid-snapshot-20170201:1.4
	sid-snapshot-20170101:1.4
	sid-snapshot-20161201:1.4
	sid-snapshot-20161101:1.4
	sid-snapshot-20160901:1.4
	sid-snapshot-20160801:1.4
	sid-snapshot-20160701:1.4
	sid-snapshot-20160601:1.4
	sid-snapshot-20160501:1.4
	sid-snapshot-20160401:1.4
	sid-snapshot-20160301:1.4
	sid-snapshot-20160201:1.4
	sid-snapshot-20160101:1.4
	sid-snapshot-20151201:1.4
	sid-snapshot-20151101:1.4
	sid-snapshot-20151001:1.4
	sid-snapshot-20150901:1.4
	sid-snapshot-20150801:1.4
	sid-snapshot-20150701:1.4
	sid-snapshot-20150601:1.4
	sid-snapshot-20150501:1.4
	sid-snapshot-20150401:1.4
	sid-snapshot-20150301:1.4
	sid-snapshot-20150201:1.4
	sid-snapshot-20150101:1.4
	sid-snapshot-20141201:1.4
	sid-snapshot-20141101:1.4
	sid-snapshot-20141001:1.4
	sid-snapshot-20140901:1.4
	sid-snapshot-20140801:1.4
	sid-snapshot-20140701:1.4
	sid-snapshot-20140601:1.4
	sid-snapshot-20140501:1.4
	sid-snapshot-20140401:1.4
	sid-snapshot-20140301:1.4
	sid-snapshot-20140201:1.4
	sid-snapshot-20140101:1.4
	sid-snapshot-20131201:1.4
	sid-snapshot-20131101:1.4
	sid-snapshot-20131001:1.4
	sid-snapshot-20130901:1.4
	sid-snapshot-20130801:1.4
	sid-snapshot-20130701:1.4
	sid-snapshot-20130601:1.4
	sid-snapshot-20130501:1.4
	sid-snapshot-20130401:1.4
	sid-snapshot-20130301:1.4
	sid-snapshot-20130201:1.4
	sid-snapshot-20130101:1.4
	sid-snapshot-20121201:1.4
	sid-snapshot-20121101:1.4
	sid-snapshot-20121001:1.4
	sid-snapshot-20120901:1.4
	sid-snapshot-20120801:1.4
	sid-snapshot-20120701:1.4
	sid-snapshot-20120601:1.4
	sid-snapshot-20120501:1.4
	sid-snapshot-20120401:1.4
	sid-snapshot-20120301:1.4
	sid-snapshot-20120201:1.4
	sid-snapshot-20120101:1.4
	sid-snapshot-20111201:1.4
	sid-snapshot-20111101:1.4
	sid-snapshot-20111001:1.4
	sid-snapshot-20110901:1.4
	sid-snapshot-20110801:1.4
	sid-snapshot-20110701:1.4
	sid-snapshot-20110601:1.4
	sid-snapshot-20110501:1.4
	sid-snapshot-20110401:1.4
	sid-snapshot-20110301:1.4
	sid-snapshot-20110201:1.4
	sid-snapshot-20110101:1.4
	sid-snapshot-20101201:1.4
	sid-snapshot-20101101:1.4
	sid-snapshot-20101001:1.4
	sid-snapshot-20100901:1.4
	sid-snapshot-20100801:1.4
	sid-snapshot-20100701:1.4
	sid-snapshot-20100601:1.4
	sid-snapshot-20100501:1.4
	sid-snapshot-20100401:1.4
	sid-snapshot-20100301:1.4
	sid-snapshot-20100201:1.4
	sid-snapshot-20100101:1.4
	sid-snapshot-20091201:1.4
	sid-snapshot-20091101:1.4
	sid-snapshot-20091001:1.4
	sid-snapshot-20090901:1.4
	sid-snapshot-20090801:1.4
	sid-snapshot-20090701:1.4
	sid-snapshot-20090601:1.4
	sid-snapshot-20090501:1.4
	sid-snapshot-20090401:1.4
	sid-snapshot-20090301:1.4
	sid-snapshot-20090201:1.4
	sid-snapshot-20090101:1.4
	sid-snapshot-20081201:1.4
	sid-snapshot-20081101:1.4
	sid-snapshot-20081001:1.4
	sid-snapshot-20080901:1.4
	sid-snapshot-20080801:1.4
	sid-snapshot-20080701:1.4
	sid-snapshot-20080601:1.4
	sid-snapshot-20080501:1.4
	sid-snapshot-20080403:1.4
	sid-snapshot-20080401:1.4
	sid-snapshot-20080301:1.4
	sid-snapshot-20080201:1.4
	sid-snapshot-20080101:1.4
	sid-snapshot-20071201:1.4
	sid-snapshot-20071101:1.4
	sid-snapshot-20071001:1.4
	sid-20020905-branchpoint:1.4
	sid-20020905-branch:1.4.0.2
	cygnus_cvs_20020108_pre:1.4;
locks; strict;
comment	@# @;


1.4
date	2001.07.13.15.19.09;	author fche;	state Exp;
branches;
next	1.3;

1.3
date	2001.06.21.05.54.42;	author bje;	state Exp;
branches;
next	1.2;

1.2
date	2001.06.20.07.18.35;	author bje;	state Exp;
branches;
next	1.1;

1.1
date	2000.12.07.19.31.02;	author fche;	state Exp;
branches;
next	;


desc
@@


1.4
log
@* test suite cleanup

2001-07-13  Frank Ch. Eigler  <fche@@redhat.com>

	* config/default.exp: Stop using [sid_find_file] for component libs.
	Forget about mksid.
	* sidcomp.*/*.exp: Stop using [sid_find_file] to find component
	shared libraries for "load" cmds in sid configuration files.
@
text
@set test "sid configuration"
sid_config_component_etc_test "base.conf" \
    "load libhd44780u.la hd44780u_component_library" \
    "hw-lcd-hd44780u-a02" \
    "load liblcd-char-display.la lcd_char_display_component_library
new hw-lcd-char-display display
relate tester display display"
pass $test

# Initialisation.
set LCD(IR) 0
set LCD(AC) 0
set LCD(DR) 1

set test "sid startup"
if [sid_start "base.conf"] then { pass $test } else { fail $test ; return }

set test "acquire bus"
set bus [sid_cmd "sid::component::find_bus $victim bus"]
if {$bus == ""} { fail $test } else { pass $test }

set display [sid_cmd "set relationships(display)"]

set test "Save state"
set state [sid_cmd "sid::component::attribute_value $victim state-snapshot"]
if {$state != ""} then { pass $test } else { fail $test }

foreach test_type { regular resstate } {
set test "get display row-col pin"
set row_col_pin [sid_cmd "sid::component::find_pin $display row-col"]
if {$row_col_pin != ""} { pass $test } else { fail $test }
sid_cmd "sid::component::connect_pin $victim row_col $row_col_pin"

set test "correct AC value after DR write"
# The 32 is in HEX, but somebody is not grok-ing the 0x prefix
set result [sid_cmd "sid::bus::write_h4_l1 $bus $LCD(DR) 0x32"]
if ![sid_bus_ok_p $result] {
    fail $test
} else {
    set result [sid_cmd "sid::bus::read_h4_l1 $bus $LCD(AC)"]
    if {[sid_bus_ok_p $result] && [lindex $result 1] == 1} {
	pass $test
    } else {
	fail $test
    }
}

set test "correct AC value after 2nd DR write"
# The 23 is in HEX, but somebody is not grok-ing the 0x prefix
set result [sid_cmd "sid::bus::write_h4_l1 $bus $LCD(DR) 0x23"]
if ![sid_bus_ok_p $result] {
    fail $test
} else {
    set result [sid_cmd "sid::bus::read_h4_l1 $bus $LCD(AC)"]
    if {[sid_bus_ok_p $result] && [lindex $result 1] == 2} {
	pass $test
    } else {
	fail $test
    }
}

set test "DR read"
sid_cmd "sid::bus::write_h4_l1 $bus $LCD(IR) 4"
sid_cmd "sid::bus::read_h4_l1 $bus $LCD(DR)"
set result [sid_cmd "sid::bus::read_h4_l1 $bus $LCD(DR)"]
if {[sid_bus_ok_p $result] && [lindex $result 1] == 0x23} {
    pass $test
} else {
    fail $test
}


set test "AC read"
set result [sid_cmd "sid::bus::read_h4_l1 $bus $LCD(AC)"]
if {[sid_bus_ok_p $result] && [lindex $result 1] == 0} {
    pass $test
} else {
    fail $test
}


# FIXME: it seems like binding callback procedures to a certain pair
# of pins in the LCD controller or the character display would make it
# possible to verify that the right things are displayed.

set test "display ``Hi Alex!''"
set result [sid_cmd "sid::bus::write_h4_l1 $bus $LCD(IR) 0x80"]
set okay 1

foreach char [split "Hi Alex!" ""] {
    scan $char %c code
    set result [sid_cmd "sid::bus::write_h4_l1 $bus $LCD(DR) $code"]
    if ![sid_bus_ok_p $result] {
	set okay 0
	break
    }
}

set test "draw Cygnus logo"
sid_cmd "sid::bus::write_h4_l1 $bus $LCD(IR) 0x43"

set okay 1
foreach byte {3 4 9 0xA 0xA 0xA 0xA 9 4 3 0 0 0 0 0 0 4 0x13 0xB 0 0 0xA 0x13 4 0x18} {
    set result [sid_cmd "sid::bus::write_h4_l1 $bus $LCD(DR) $byte"]
    if ![sid_bus_ok_p $result] {
	set okay 0
	break
    }
}
sid_cmd "sid::bus::write_h4_l1 $bus $LCD(IR) 1"
sid_cmd "sid::bus::write_h4_l1 $bus $LCD(IR) 0x80"
sid_cmd "sid::bus::write_h4_l1 $bus $LCD(DR) 0"
sid_cmd "sid::bus::write_h4_l1 $bus $LCD(DR) 2"
if {$okay} { pass $test } else { fail $test }

set test "display ``Cygnus rules''"
set okay 1
foreach char [split "Cygnus" ""] {
    scan $char %c byte
    set result [sid_cmd "sid::bus::write_h4_l1 $bus $LCD(DR) $code"]
    if ![sid_bus_ok_p $result] {
	set okay 0
	break
    }
}

sid_cmd "sid::bus::write_h4_l1 $bus $LCD(IR) 0xC0"
sid_cmd "sid::bus::write_h4_l1 $bus $LCD(DR) 1"
sid_cmd "sid::bus::write_h4_l1 $bus $LCD(DR) 3"

foreach char [split "rules!" ""] {
    scan $char %c byte
    set result [sid_cmd "sid::bus::write_h4_l1 $bus $LCD(DR) $code"]
    if ![sid_bus_ok_p $result] {
	set okay 0
	break
    }
}

set res_testtype [string compare $test_type "regular"]
if { $res_testtype == 0 } {
  set test "Restore state"
  set ok [sid_cmd "sid::component::set_attribute_value $victim state-snapshot [list $state]"]
  if {$ok == "ok"} then { pass $test } else { fail $test }
}
}

set test "sid stop"
if [sid_stop] then { pass $test } else { fail $test ; return }


# zap temp file if tests were successful 
global exit_status
if {$exit_status == "0"} then { file delete "base.conf" }
@


1.3
log
@2001-06-21  Ben Elliston  <bje@@redhat.com>

	* sidcomp.cache/utils.exp: Use sid_bus_ok_p to detect bus write
	errors instead of the common construction: if {$result == "ok"}.
	* sidcomp.ide/diskio.exp: Likewise.
	* sidcomp.lcd/lcdbase.exp: Likewise.
	* sidcomp.mapper/basicmapper.exp: Likewise.
	* sidcomp.memory/am29.exp: Likewise.
	* sidcomp.memory/at29.exp: Likewise.
	* sidcomp.memory/at29val.exp: Likewise.
	* sidcomp.memory/genericmemory.exp: Likewise.
	* sidcomp.mmu/arm-remap.exp: Likewise.
	* sidcomp.rtc/ds1642.exp: Likewise.
	* sidcomp.rtc/ds1742.exp: Likewise.
	* sidcomp.timers/timerbase.exp: Likewise.
@
text
@d3 1
a3 1
    "load [sid_find_file libhd44780u.la] hd44780u_component_library" \
d5 1
a5 1
    "load [sid_find_file liblcd-char-display.la] lcd_char_display_component_library
@


1.2
log
@2001-06-20  Ben Elliston  <bje@@redhat.com>

	* sidcomp.cache/coherency.exp: Use sid_bus_ok_p to detect bus read
	errors instead of the frequently used (and less readable)
	construction: if {[lindex $result] 0 == "ok"}.
	* sidcomp.cache/writealloc.exp: Likewise.
	* sidcomp.cache/writethru.exp: Likewise.
	* sidcomp.gloss/angel.exp: Likewise.
	* sidcomp.ide/diskio.exp: Likewise.
	* sidcomp.interrupt/arm-interrupt.exp: Likewise.
	* sidcomp.interrupt/cma222-interrupt.exp: Likewise.
	* sidcomp.lcd/lcdbase.exp: Likewise.
	* sidcomp.mapper/basicmapper.exp: Likewise.
	* sidcomp.memory/am29.exp: Likewise.
	* sidcomp.memory/at29.exp: Likewise.
	* sidcomp.memory/at29val.exp: Likewise.
	* sidcomp.memory/genericmemory.exp: Likewise.
	* sidcomp.mmu/arm-remap.exp: Likewise.
	* sidcomp.parport/parport.exp: Likewise.
	* sidcomp.rtc/ds1642.exp: Likewise.
	* sidcomp.rtc/ds1742.exp: Likewise.
	* sidcomp.timers/timerbase.exp: Likewise.
	* sidcomp.timers/timersched.exp: Likewise.
@
text
@d37 1
a37 1
if {$result != "ok"} { 
d51 1
a51 1
if {$result != "ok"} {
d93 1
a93 1
    if {$result != "ok"} {
d105 1
a105 1
    if {$result != "ok"} {
d121 1
a121 1
    if {$result != "ok"} {
d134 1
a134 1
    if {$result != "ok"} {
@


1.1
log
@* public snapshot of sid simulator
@
text
@d41 1
a41 1
    if {[lindex $result 0] == "ok" && [lindex $result 1] == 1} {
d55 1
a55 1
    if {[lindex $result 0] == "ok" && [lindex $result 1] == 2} {
d66 1
a66 1
if {[lindex $result 0] == "ok" && [lindex $result 1] == 0x23} {
d75 1
a75 1
if {[lindex $result 0] == "ok" && [lindex $result 1] == 0} {
@

