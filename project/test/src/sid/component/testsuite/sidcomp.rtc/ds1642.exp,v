head	1.4;
access;
symbols
	sid-snapshot-20180601:1.4
	sid-snapshot-20180501:1.4
	sid-snapshot-20180401:1.4
	sid-snapshot-20180301:1.4
	sid-snapshot-20180201:1.4
	sid-snapshot-20180101:1.4
	sid-snapshot-20171201:1.4
	sid-snapshot-20171101:1.4
	sid-snapshot-20171001:1.4
	sid-snapshot-20170901:1.4
	sid-snapshot-20170801:1.4
	sid-snapshot-20170701:1.4
	sid-snapshot-20170601:1.4
	sid-snapshot-20170501:1.4
	sid-snapshot-20170401:1.4
	sid-snapshot-20170301:1.4
	sid-snapshot-20170201:1.4
	sid-snapshot-20170101:1.4
	sid-snapshot-20161201:1.4
	sid-snapshot-20161101:1.4
	sid-snapshot-20160901:1.4
	sid-snapshot-20160801:1.4
	sid-snapshot-20160701:1.4
	sid-snapshot-20160601:1.4
	sid-snapshot-20160501:1.4
	sid-snapshot-20160401:1.4
	sid-snapshot-20160301:1.4
	sid-snapshot-20160201:1.4
	sid-snapshot-20160101:1.4
	sid-snapshot-20151201:1.4
	sid-snapshot-20151101:1.4
	sid-snapshot-20151001:1.4
	sid-snapshot-20150901:1.4
	sid-snapshot-20150801:1.4
	sid-snapshot-20150701:1.4
	sid-snapshot-20150601:1.4
	sid-snapshot-20150501:1.4
	sid-snapshot-20150401:1.4
	sid-snapshot-20150301:1.4
	sid-snapshot-20150201:1.4
	sid-snapshot-20150101:1.4
	sid-snapshot-20141201:1.4
	sid-snapshot-20141101:1.4
	sid-snapshot-20141001:1.4
	sid-snapshot-20140901:1.4
	sid-snapshot-20140801:1.4
	sid-snapshot-20140701:1.4
	sid-snapshot-20140601:1.4
	sid-snapshot-20140501:1.4
	sid-snapshot-20140401:1.4
	sid-snapshot-20140301:1.4
	sid-snapshot-20140201:1.4
	sid-snapshot-20140101:1.4
	sid-snapshot-20131201:1.4
	sid-snapshot-20131101:1.4
	sid-snapshot-20131001:1.4
	sid-snapshot-20130901:1.4
	sid-snapshot-20130801:1.4
	sid-snapshot-20130701:1.4
	sid-snapshot-20130601:1.4
	sid-snapshot-20130501:1.4
	sid-snapshot-20130401:1.4
	sid-snapshot-20130301:1.4
	sid-snapshot-20130201:1.4
	sid-snapshot-20130101:1.4
	sid-snapshot-20121201:1.4
	sid-snapshot-20121101:1.4
	sid-snapshot-20121001:1.4
	sid-snapshot-20120901:1.4
	sid-snapshot-20120801:1.4
	sid-snapshot-20120701:1.4
	sid-snapshot-20120601:1.4
	sid-snapshot-20120501:1.4
	sid-snapshot-20120401:1.4
	sid-snapshot-20120301:1.4
	sid-snapshot-20120201:1.4
	sid-snapshot-20120101:1.4
	sid-snapshot-20111201:1.4
	sid-snapshot-20111101:1.4
	sid-snapshot-20111001:1.4
	sid-snapshot-20110901:1.4
	sid-snapshot-20110801:1.4
	sid-snapshot-20110701:1.4
	sid-snapshot-20110601:1.4
	sid-snapshot-20110501:1.4
	sid-snapshot-20110401:1.4
	sid-snapshot-20110301:1.4
	sid-snapshot-20110201:1.4
	sid-snapshot-20110101:1.4
	sid-snapshot-20101201:1.4
	sid-snapshot-20101101:1.4
	sid-snapshot-20101001:1.4
	sid-snapshot-20100901:1.4
	sid-snapshot-20100801:1.4
	sid-snapshot-20100701:1.4
	sid-snapshot-20100601:1.4
	sid-snapshot-20100501:1.4
	sid-snapshot-20100401:1.4
	sid-snapshot-20100301:1.4
	sid-snapshot-20100201:1.4
	sid-snapshot-20100101:1.4
	sid-snapshot-20091201:1.4
	sid-snapshot-20091101:1.4
	sid-snapshot-20091001:1.4
	sid-snapshot-20090901:1.4
	sid-snapshot-20090801:1.4
	sid-snapshot-20090701:1.4
	sid-snapshot-20090601:1.4
	sid-snapshot-20090501:1.4
	sid-snapshot-20090401:1.4
	sid-snapshot-20090301:1.4
	sid-snapshot-20090201:1.4
	sid-snapshot-20090101:1.4
	sid-snapshot-20081201:1.4
	sid-snapshot-20081101:1.4
	sid-snapshot-20081001:1.4
	sid-snapshot-20080901:1.4
	sid-snapshot-20080801:1.4
	sid-snapshot-20080701:1.4
	sid-snapshot-20080601:1.4
	sid-snapshot-20080501:1.4
	sid-snapshot-20080403:1.4
	sid-snapshot-20080401:1.4
	sid-snapshot-20080301:1.4
	sid-snapshot-20080201:1.4
	sid-snapshot-20080101:1.4
	sid-snapshot-20071201:1.4
	sid-snapshot-20071101:1.4
	sid-snapshot-20071001:1.4
	sid-20020905-branchpoint:1.4
	sid-20020905-branch:1.4.0.2
	cygnus_cvs_20020108_pre:1.4;
locks; strict;
comment	@# @;


1.4
date	2001.07.13.15.19.10;	author fche;	state Exp;
branches;
next	1.3;

1.3
date	2001.06.21.05.54.43;	author bje;	state Exp;
branches;
next	1.2;

1.2
date	2001.06.20.07.18.45;	author bje;	state Exp;
branches;
next	1.1;

1.1
date	2000.12.07.19.31.04;	author fche;	state Exp;
branches;
next	;


desc
@@


1.4
log
@* test suite cleanup

2001-07-13  Frank Ch. Eigler  <fche@@redhat.com>

	* config/default.exp: Stop using [sid_find_file] for component libs.
	Forget about mksid.
	* sidcomp.*/*.exp: Stop using [sid_find_file] to find component
	shared libraries for "load" cmds in sid configuration files.
@
text
@# Initialisation.
set size 2048

# FIXME: need to test the frequency test.

proc get_epoch {} {
    global victim
    return [sid_cmd "sid::component::attribute_value $victim epoch-time"]
}

proc mask {value mask} {
    return [expr $value & $mask]
}

# Enter write mode.
proc start_write {} {
    global bus
    set result [sid_cmd "sid::bus::write_h4_l1 $bus 0x7F8 0x80"]
    return [sid_bus_ok_p $result]
}    

# Leave write mode.
proc end_write {} {
    global bus
    set result [sid_cmd "sid::bus::write_h4_l1 $bus 0x7F8 0x0"]
    return [sid_bus_ok_p $result]
}

# Enter read mode.
proc start_read {} {
    global bus
    set result [sid_cmd "sid::bus::write_h4_l1 $bus 0x7F8 0x40"]
    return [sid_bus_ok_p $result]
}

# Leave read mode.
proc end_read {} {
    global bus
    set result [sid_cmd "sid::bus::write_h4_l1 $bus 0x7F8 0x0"]
    return [sid_bus_ok_p $result]
}


set test "sid configuration"
sid_config_component_etc_test_with_tracing "ds1642.conf" \
    "load librtc.la rtc_component_library" \
    "hw-rtc-ds1642" \
    "load libsched.la sched_component_library
new sid-sched-host-accurate sched
load libmemory.la mem_component_library
new hw-memory-ram/rom-basic nvram
set sched num-clients 1
set sched enabled? 1
set nvram size 2048
connect-bus real-victim memory-bus nvram read-write-port
connect-pin sched 0-control <- wrapper clock-control
connect-pin sched 0-event -> wrapper clock-event
relate tester sched sched"

pass $test

set test "sid start"
if {[sid_start "ds1642.conf"]} { pass $test } else { fail $test ; return }


set test "read-write-port bus is present"
set result [sid_cmd "sid::component::find_bus $victim read-write-port"]
if {$result != ""} { pass $test } else { fail $test }

set test "clock pin is present"
set result [sid_cmd "sid::component::find_pin $victim clock"]
if {$result != ""} { pass $test } else { fail $test }

set test "all attributes are present"
sid_assert_includes_all "sid::component::attribute_names $victim" \
    {"state-snapshot" "hour" "minute" "second" "epoch-time" "year"
	"month" "date" "day-of-week"}

set test "reported time since epoch is sensible"
set result [get_epoch]
if {$result != "" && [expr abs($result - [clock seconds]) < 5]} {
    pass $test
} else {
    fail $test
}


# Set up an array of triggerpoint sensor pins (connected to the victim).
# Maintain another array that counts the number of times the triggerpoints are hit.

catch {unset watchpins triggercount}
foreach watchable {epoch-time oscillating write-mode} {
    set test "establish a triggerpoint for watchable state variable: $watchable"
    set watchpins($watchable) [sid_cmd "sid::pin::new"]
    sid_cmd "set triggercount($watchable) 0"
    sid_cmd \
	    "set hook_driven_h4($watchpins($watchable)) {global triggercount driven_h4_value; incr triggercount($watchable)}"

    # Some limited URL encoding hacks.
    # see sid/include/sidwatchutil.h for the rules.
    regsub -- "-" $watchable "%2D" watchEnc
    set result [sid_cmd "sid::component::connect_pin $victim watch:${watchEnc}:change $watchpins($watchable)"]
    if {$result == "ok"} { pass $test } else { fail $test }
}


set test "save state"
set saved(time) [get_epoch]
set saved(state) \
    [sid_cmd "sid::component::attribute_value $victim state-snapshot"]
if {$saved(state) != ""} { pass $test } else { fail $test }

set test "time is incremented by an advancing clock"
set origin [get_epoch]
set clock_pin [sid_cmd "sid::component::find_pin $victim clock"]
for {set i 0} {$i < 5} {incr i} {
    sid_cmd "sid::pin::driven_h4 $clock_pin 0"
}
# Time should now be advanced by 5.
set result [get_epoch]
if {$result != "" && [expr ($result - $origin) == 5]} {
    pass $test
} else {
    fail $test
}

set origin [get_epoch]

set test "read year attribute"
set result [sid_cmd "sid::component::attribute_value $victim year"]
if {$result != ""} {
    set test_year $result
    scan [clock format $origin -gmt true -format %y] %d host_year
    if {$test_year == $host_year} {
	pass $test
    } else {
	fail "$test -- got $test_year, expected $host_year"
    }
} else {
    fail $test
}

set test "read month attribute"
set result [sid_cmd "sid::component::attribute_value $victim month"]
if {$result != ""} {
    set test_month $result
    scan [clock format $origin -gmt true -format %m] %d host_month
    if {$test_month == $host_month} {
	pass $test
    } else {
	fail "$test -- got $test_month, expected $host_month"
    }
} else {
    fail $test
}

set test "read date attribute"
set result [sid_cmd "sid::component::attribute_value $victim date"]
if {$result != ""} {
    set test_date $result
    scan [clock format $origin -gmt true -format %d] %d host_date
    if {$test_date == $host_date} {
	pass $test
    } else {
	fail "$test -- got $test_date, expected $host_date"
    }
} else {
    fail $test
}

set test "read day-of-week attribute"
set result [sid_cmd "sid::component::attribute_value $victim day-of-week"]
if {$result != ""} {
    set test_weekday $result
    scan [clock format $origin -gmt true -format %w] %d host_weekday
    incr host_weekday
    if {$test_weekday == $host_weekday} {
	pass $test
    } else {
	fail "$test -- got $test_weekday, expected $host_weekday"
    }
} else {
    fail $test
}

set test "read hour attribute"
set result [sid_cmd "sid::component::attribute_value $victim hour"]
if {$result != ""} {
    set test_hour $result
    scan [clock format $origin -gmt true -format %H] %d host_hour
    if {$test_hour == $host_hour} {
	pass $test
    } else {
	fail "$test -- got $test_hour, expected $host_hour"
    }
} else {
    fail $test
}

set test "read minute attribute"
set result [sid_cmd "sid::component::attribute_value $victim minute"]
if {$result != ""} {
    set test_minute $result
    scan [clock format $origin -gmt true -format %M] %d host_minute
    if {$test_minute == $host_minute} {
	pass $test
    } else {
	fail "$test -- got $test_minute, expected $host_minute"
    }
} else {
    fail $test
}

set test "read second attribute"
set result [sid_cmd "sid::component::attribute_value $victim second"]
if {$result != ""} {
    set test_second $result
    scan [clock format $origin -gmt true -format %S] %d host_second
    if {$test_second == $host_second} {
	pass $test
    } else {
	fail "$test -- got $test_second, expected $host_second"
    }
} else {
    fail $test
}

set test "fill regular non-volatile memory with test bytes"
set okay 1
set bus [sid_cmd "sid::component::find_bus $victim read-write-port"]
if {$bus == ""} { 
    fail $test 
} else {
    for {set addr 0} {$addr < [expr $size - 8]} {incr addr} {
	if {$addr % 2} { set data 0x55 } else { set data 0xAA }
	set result [sid_cmd "sid::bus::write_h4_l1 $bus $addr $data"]
	if ![sid_bus_ok_p $result] { set okay 0; break }
    }
    if {$okay} { pass $test } else { fail $test }
}


set test "validate memory was written correctly"
set okay 1
set bus [sid_cmd "sid::component::find_bus $victim read-write-port"]
if {$bus == ""} {
    fail $test
} else {
    for {set addr 0} {$addr < [expr $size - 8]} {incr addr} {
	if {$addr % 2} { set data 0x55 } else { set data 0xAA }
	set result [sid_cmd "sid::bus::read_h4_l1 $bus $addr"]
	if {![sid_bus_ok_p $result] || [lindex $result 1] != $data} {
	    set okay 0
	    break
	}
    }
    if {$okay} { pass $test } else { fail $test }
}


# Make sure out of range addresses are caught.
set test "out by one address is caught unmapped"
set bus [sid_cmd "sid::component::find_bus $victim read-write-port"]
if {$bus == ""} {
    fail $test
} else {
    set result [sid_cmd "sid::bus::write_h4_l1 $bus $size 0"]
    if {[lindex $result 0] != "unmapped"} { fail $test } else { pass $test }
}


set test "battery is not flat"
set result [sid_cmd "sid::bus::read_h4_l1 $bus 0x7FC"]
if {[sid_bus_ok_p $result] && [mask [lindex $result 1] 0x80] == 0x80} {
    pass $test
} else {
    fail "$test -- got $result, expected 0x80 to be set"
}


set test "read mode does not alter epoch time"
if {[start_read] && [end_read]} {
    set now [get_epoch]
    if {$origin == $now} {
	pass $test
    } else {
	fail "$test -- got $now, expected $origin"
    }
} else { 
    fail $test
}


set test "write mode does not alter epoch time"
if {[start_write] && [end_write]} {
    set now [get_epoch]
    if {$origin == $now} {
	pass $test
    } else {
	fail "$test -- got $now, expected $origin"
    }
} else { fail $test }


set test "read year register"
set result [sid_cmd "sid::bus::read_h4_l1 $bus 0x7FF"]
scan [clock format $origin -gmt true -format %y] %x year
if {[sid_bus_ok_p $result] && [lindex $result 1] == $year} {
    pass $test
} else {
    fail $test
}


set test "read month register"
set result [sid_cmd "sid::bus::read_h4_l1 $bus 0x7FE"]
scan [clock format $origin -gmt true -format %m] %x month
if {[sid_bus_ok_p $result] && [mask [lindex $result 1] 0x1F] == $month} {
    pass $test
} else {
    fail $test
}


set test "read date register"
set result [sid_cmd "sid::bus::read_h4_l1 $bus 0x7FD"]
scan [clock format $origin -gmt true -format %d] %x date
if {[sid_bus_ok_p $result] && [mask [lindex $result 1] 0x3F] == $date} {
    pass $test
} else {
    fail $test
}


set test "read day register"
set result [sid_cmd "sid::bus::read_h4_l1 $bus 0x7FC"]
set wday [expr [clock format $origin -gmt true -format %w] + 1]

if {[sid_bus_ok_p $result] && [mask [lindex $result 1] 0x07] == $wday} {
    pass $test
} else {
    fail $test
}


set test "read hour register"
set result [sid_cmd "sid::bus::read_h4_l1 $bus 0x7FB"]
scan [clock format $origin -gmt true -format %H] %x hour
if {[sid_bus_ok_p $result] && [mask [lindex $result 1] 0x3F] == $hour} {
    pass $test
} else {
    fail $test
}


set test "read minutes register"
set result [sid_cmd "sid::bus::read_h4_l1 $bus 0x7FA"]
scan [clock format $origin -gmt true -format %M] %x mins
if {[sid_bus_ok_p $result] && [mask [lindex $result 1] 0x7F] == $mins} {
    pass $test
} else {
    fail $test
}


set test "read seconds register"
set result [sid_cmd "sid::bus::read_h4_l1 $bus 0x7F9"]
scan [clock format $origin -gmt true -format %S] %x secs
set sec [mask [lindex $result 1] 0x7F]

if {[sid_bus_ok_p $result] && [mask [lindex $result 1] 0x7F] == $secs} {
    pass $test
} else {
    fail $test
}


set test "read bit stops the clock"
set origin [get_epoch]
if {[start_read]} {
    set clock_pin [sid_cmd "sid::component::find_pin $victim clock"]
    for {set i 0} {$i < 5} {incr i} {
	sid_cmd "sid::pin::driven_h4 $clock_pin 0"
    }
    # Time should now be advanced by 5.
    if {![end_read]} {
	fail $test
    } else {
	set now [get_epoch]
	if {$now == $origin} { pass $test } else { fail $test }
    }
} else { fail $test }


set test "write bit stops the clock"
set origin [get_epoch]
if {[start_read]} {
    set clock_pin [sid_cmd "sid::component::find_pin $victim clock"]
    for {set i 0} {$i < 5} {incr i} {
	sid_cmd "sid::pin::driven_h4 $clock_pin 0"
    }
    # Time should now be advanced by 5.
    if {![end_write]} {
	fail $test
    } else {
	set now [get_epoch]
	if {$now == $origin} { pass $test } else { fail $test }
    }
} else { fail $test }


# Disconnect the oscillator.

set test "disconnect the oscillator"
set origin [get_epoch]
set result [sid_cmd "sid::bus::write_h4_l1 $bus 0x7F9 0x80"]
if [sid_bus_ok_p $result] { pass $test } else { fail $test }

set clock_pin [sid_cmd "sid::component::find_pin $victim clock"]
for {set i 0} {$i < 5} {incr i} {
    sid_cmd "sid::pin::driven_h4 $clock_pin 0"
}
# Time should now be advanced by 5.

set test "read year register with oscillator disconnected"
set result [sid_cmd "sid::bus::read_h4_l1 $bus 0x7FF"]
scan [clock format $origin -gmt true -format %y] %x year
if {[sid_bus_ok_p $result] && [lindex $result 1] == $year} {
    pass $test
} else {
    fail $test
}


set test "read month register with oscillator disconnected"
set result [sid_cmd "sid::bus::read_h4_l1 $bus 0x7FE"]
scan [clock format $origin -gmt true -format %m] %x month
if {[sid_bus_ok_p $result] && [mask [lindex $result 1] 0x1F] == $month} {
    pass $test
} else {
    fail $test
}


set test "read date register with oscillator disconnected"
set result [sid_cmd "sid::bus::read_h4_l1 $bus 0x7FD"]
scan [clock format $origin -gmt true -format %d] %x date
if {[sid_bus_ok_p $result] && [mask [lindex $result 1] 0x3F] == $date} {
    pass $test
} else {
    fail $test
}


set test "read day register with oscillator disconnected"
set result [sid_cmd "sid::bus::read_h4_l1 $bus 0x7FC"]
set wday [expr [clock format $origin -gmt true -format %w] + 1]
if {[sid_bus_ok_p $result] && [mask [lindex $result 1] 0x07] == $wday} {
    pass $test
} else {
    fail $test
}


set test "read hour register with oscillator disconnected"
set result [sid_cmd "sid::bus::read_h4_l1 $bus 0x7FB"]
scan [clock format $origin -gmt true -format %H] %x hour
if {[sid_bus_ok_p $result] && [mask [lindex $result 1] 0x3F] == $hour} {
    pass $test
} else {
    fail $test
}


set test "read minutes register with oscillator disconnected"
set result [sid_cmd "sid::bus::read_h4_l1 $bus 0x7FA"]
scan [clock format $origin -gmt true -format %M] %x mins
if {[sid_bus_ok_p $result] && [mask [lindex $result 1] 0x7F] == $mins} {
    pass $test
} else {
    fail $test
}


set test "read seconds register with oscillator disconnected"
set result [sid_cmd "sid::bus::read_h4_l1 $bus 0x7F9"]
scan [clock format $origin -gmt true -format %S] %x secs
set sec [mask [lindex $result 1] 0x7F]
if {[sid_bus_ok_p $result] && $sec == $secs} {
    pass $test
} else {
    fail $test
}

# Reconnect the oscillator.

set test "reconnect the oscillator"
set result [sid_cmd "sid::bus::write_h4_l1 $bus 0x7F9 0"]
if [sid_bus_ok_p $result] { pass $test } else { fail $test }

set clock_pin [sid_cmd "sid::component::find_pin $victim clock"]
for {set i 0} {$i < 5} {incr i} {
    sid_cmd "sid::pin::driven_h4 $clock_pin 0"
}
# Time should now be advanced by 5.

# Check that epoch time has advanced by 5.
set test "reconnecting the oscillator works"
set result [get_epoch]
if {[expr $result - $origin] == 5} { pass $test } else { fail $test }

# Test altering each field of the time/date structure.
# These are written to the registers as BCD.

set test "modify the year register"
set origin [get_epoch]
set year 05
start_write
set result [sid_cmd "sid::bus::write_h4_l1 $bus 0x7FF $year"]
if ![sid_bus_ok_p $result] {
    fail $test
} else {
    end_write
    if {[get_epoch] != $origin} { pass $test } else { fail $test }
}


set test "modify the month register"
set origin [get_epoch]
start_read
set result [sid_cmd "sid::bus::read_h4_l1 $bus 0x7FE"]
if ![sid_bus_ok_p $result] {
    fail $test
} else {
    end_read
    set month [lindex $result 1]
    incr month
    if {$month > 12} { set month 1 }
    start_write
    set result [sid_cmd "sid::bus::write_h4_l1 $bus 0x7FE $month"]
    if ![sid_bus_ok_p $result] {
	fail $test
    } else {
	end_write
	if {[get_epoch] != $origin} { pass $test } else { fail $test }
    }
}


set test "modify the date register"
set origin [get_epoch]
start_read
set result [sid_cmd "sid::bus::read_h4_l1 $bus 0x7FD"]
if ![sid_bus_ok_p $result] {
    fail $test
} else {
    end_read
    set date [lindex $result 1]
    incr date
    # Don't bother trying to handle variable number of days/month.
    if {$date > 28} { set date 1 }
    start_write
    set result [sid_cmd "sid::bus::write_h4_l1 $bus 0x7FD $date"]
    if ![sid_bus_ok_p $result] {
	fail $test
    } else {
	end_write
	if {[get_epoch] != $origin} { pass $test } else { fail $test }
    }
}


set test "modify the day register with an invalid value"
set result [sid_cmd "sid::bus::write_h4_l1 $bus 0x7FC 0"]
if [sid_bus_ok_p $result] { pass $test } else { fail $test }


set test "modify the day register"
set origin [get_epoch]
start_read
set result [sid_cmd "sid::bus::read_h4_l1 $bus 0x7FC"]
if ![sid_bus_ok_p $result] {
    fail $test
} else {
    end_read
    set day [lindex $result 1]
    set data [expr $day & 0xF8]
    set day [expr $day & 0x07]
    if {$day > 7} { set day 1 } else { incr day }
    set day [expr $data | $day]
    start_write
    set result [sid_cmd "sid::bus::write_h4_l1 $bus 0x7FC $day"]
    if ![sid_bus_ok_p $result] { 
	fail $test
    } else {
	end_write
	if {[get_epoch] == $origin} { pass $test } else { fail $test }
    }
}


set test "modify the hour register"
set origin [get_epoch]
start_read
set result [sid_cmd "sid::bus::read_h4_l1 $bus 0x7FB"]
if ![sid_bus_ok_p $result] {
    fail $test
} else {
    end_read
    set hour [lindex $result 1]
    incr hour
    if {$hour > 23} { set hour 0 }
    start_write
    set result [sid_cmd "sid::bus::write_h4_l1 $bus 0x7FB $hour"]
    if ![sid_bus_ok_p $result] {
	fail $test
    } else {
	end_write
	if {[get_epoch] != $origin} { pass $test } else { fail $test }
    }
}


set test "modify the minute register"
set origin [get_epoch]
start_read
set result [sid_cmd "sid::bus::read_h4_l1 $bus 0x7FA"]
if ![sid_bus_ok_p $result] {
    fail $test
} else {
    end_read
    set minute [lindex $result 1]
    incr minute
    if {$minute > 59} { set minute 0 }
    start_write
    set result [sid_cmd "sid::bus::write_h4_l1 $bus 0x7FA $minute"]
    if ![sid_bus_ok_p $result] {
	fail $test
    } else {
	end_write
	if {[get_epoch] != $origin} { pass $test } else { fail $test }
    }
}


set test "modify the second register"
set origin [get_epoch]
start_read
set result [sid_cmd "sid::bus::read_h4_l1 $bus 0x7F9"]
if ![sid_bus_ok_p $result] {
    fail $test
} else {
    end_read
    set seconds [lindex $result 1]
    incr seconds
    if {$seconds > 59} { set seconds 0 }
    start_write
    set result [sid_cmd "sid::bus::write_h4_l1 $bus 0x7F9 $seconds"]
    if ![sid_bus_ok_p $result] {
	fail $test
    } else {
	end_write
	if {[get_epoch] != $origin} { pass $test } else { fail $test }
    }
}

# FIXME: test store state.

# This list specifies addresses and bitmasks to locate free, unused
# bits which may be used as NVRAM.

foreach pair {{0x7FE 0xE0} {0x7FD 0xC0} {0x7FC 0x38} {0x7FB 0xC0} {0x7FA 0x80}} {
    set hex_addr [lindex $pair 0]
    set hex_mask [lindex $pair 1]

    set test "store data in free bits at $hex_addr"
    set result [sid_cmd "sid::bus::write_h4_l1 $bus $hex_addr 0xFF"]
    if [sid_bus_ok_p $result] {
	set result [sid_cmd "sid::bus::read_h4_l1 $bus $hex_addr"]
	if {[sid_bus_ok_p $result] && \
		[mask [lindex $result 1] $hex_mask] == $hex_mask} {
	    pass $test
	} else {
	    fail "$test -- readback error"
	}
    } else {
	fail "$test -- write error"
    }
}

set test "epoch-time triggerpoint fired 16 times"
if {[sid_cmd "set triggercount(epoch-time)"] == "16"} { pass $test } else { fail $test }

set test "oscillating triggerpoint fired twice"
if {[sid_cmd "set triggercount(oscillating)"] == "2"} { pass $test } else { fail $test }

set test "write-mode triggerpoint fired 37 times"
if {[sid_cmd "set triggercount(write-mode)"] == "37"} { pass $test } else { fail $test }

catch {unset watchpins triggercount}


# FIXME: add tests for the frequency test function.

set test "sid stop"
if [sid_stop] then { pass $test } else { fail $test ; return }

# zap temp file if tests were successful 
global exit_status
if {$exit_status == "0"} then { file delete "ds1642.conf" }
@


1.3
log
@2001-06-21  Ben Elliston  <bje@@redhat.com>

	* sidcomp.cache/utils.exp: Use sid_bus_ok_p to detect bus write
	errors instead of the common construction: if {$result == "ok"}.
	* sidcomp.ide/diskio.exp: Likewise.
	* sidcomp.lcd/lcdbase.exp: Likewise.
	* sidcomp.mapper/basicmapper.exp: Likewise.
	* sidcomp.memory/am29.exp: Likewise.
	* sidcomp.memory/at29.exp: Likewise.
	* sidcomp.memory/at29val.exp: Likewise.
	* sidcomp.memory/genericmemory.exp: Likewise.
	* sidcomp.mmu/arm-remap.exp: Likewise.
	* sidcomp.rtc/ds1642.exp: Likewise.
	* sidcomp.rtc/ds1742.exp: Likewise.
	* sidcomp.timers/timerbase.exp: Likewise.
@
text
@d46 1
a46 1
    "load [sid_find_file librtc.la] rtc_component_library" \
d48 1
a48 1
    "load [sid_find_file libsched.la] sched_component_library
d50 1
a50 1
load [sid_find_file libmemory.la] mem_component_library
@


1.2
log
@2001-06-20  Ben Elliston  <bje@@redhat.com>

	* sidcomp.cache/coherency.exp: Use sid_bus_ok_p to detect bus read
	errors instead of the frequently used (and less readable)
	construction: if {[lindex $result] 0 == "ok"}.
	* sidcomp.cache/writealloc.exp: Likewise.
	* sidcomp.cache/writethru.exp: Likewise.
	* sidcomp.gloss/angel.exp: Likewise.
	* sidcomp.ide/diskio.exp: Likewise.
	* sidcomp.interrupt/arm-interrupt.exp: Likewise.
	* sidcomp.interrupt/cma222-interrupt.exp: Likewise.
	* sidcomp.lcd/lcdbase.exp: Likewise.
	* sidcomp.mapper/basicmapper.exp: Likewise.
	* sidcomp.memory/am29.exp: Likewise.
	* sidcomp.memory/at29.exp: Likewise.
	* sidcomp.memory/at29val.exp: Likewise.
	* sidcomp.memory/genericmemory.exp: Likewise.
	* sidcomp.mmu/arm-remap.exp: Likewise.
	* sidcomp.parport/parport.exp: Likewise.
	* sidcomp.rtc/ds1642.exp: Likewise.
	* sidcomp.rtc/ds1742.exp: Likewise.
	* sidcomp.timers/timerbase.exp: Likewise.
	* sidcomp.timers/timersched.exp: Likewise.
@
text
@d19 1
a19 1
    if {$result == "ok"} { return 1 } else { return 0 }
d26 1
a26 1
    if {$result == "ok"} { return 1 } else { return 0 }
d33 1
a33 1
    if {$result == "ok"} { return 1 } else { return 0 }
d40 1
a40 1
    if {$result == "ok"} { return 1 } else { return 0 }
d237 1
a237 1
	if {$result != "ok"} { set okay 0; break }
d268 1
a268 1
    if {$result != "unmapped"} { fail $test } else { pass $test }
d417 1
a417 1
if {$result == "ok"} { pass $test } else { fail $test }
d499 1
a499 1
if {$result == "ok"} { pass $test } else { fail $test }
d520 1
a520 1
if {$result != "ok"} {
d541 1
a541 1
    if {$result != "ok"} { 
d564 1
a564 1
    if {$result != "ok"} {
d575 1
a575 1
if {$result == "ok"} { pass $test } else { fail $test }
d593 1
a593 1
    if {$result != "ok"} {
d615 1
a615 1
    if {$result != "ok"} {
d637 1
a637 1
    if {$result != "ok"} {
d659 1
a659 1
    if {$result != "ok"} {
d678 1
a678 1
    if {$result == "ok"} {
@


1.1
log
@* public snapshot of sid simulator
@
text
@d252 1
a252 1
	if {[lindex $result 0] != "ok" || [lindex $result 1] != $data} {
d274 1
a274 1
if {[lindex $result 0] == "ok" && [mask [lindex $result 1] 0x80] == 0x80} {
d308 1
a308 1
if {[lindex $result 0] == "ok" && [lindex $result 1] == $year} {
d318 1
a318 1
if {[lindex $result 0] == "ok" && [mask [lindex $result 1] 0x1F] == $month} {
d328 1
a328 1
if {[lindex $result 0] == "ok" && [mask [lindex $result 1] 0x3F] == $date} {
d339 1
a339 1
if {[lindex $result 0] == "ok" && [mask [lindex $result 1] 0x07] == $wday} {
d349 1
a349 1
if {[lindex $result 0] == "ok" && [mask [lindex $result 1] 0x3F] == $hour} {
d359 1
a359 1
if {[lindex $result 0] == "ok" && [mask [lindex $result 1] 0x7F] == $mins} {
d371 1
a371 1
if {[lindex $result 0] == "ok" && [mask [lindex $result 1] 0x7F] == $secs} {
d428 1
a428 1
if {[lindex $result 0] == "ok" && [lindex $result 1] == $year} {
d438 1
a438 1
if {[lindex $result 0] == "ok" && [mask [lindex $result 1] 0x1F] == $month} {
d448 1
a448 1
if {[lindex $result 0] == "ok" && [mask [lindex $result 1] 0x3F] == $date} {
d458 1
a458 1
if {[lindex $result 0] == "ok" && [mask [lindex $result 1] 0x07] == $wday} {
d468 1
a468 1
if {[lindex $result 0] == "ok" && [mask [lindex $result 1] 0x3F] == $hour} {
d478 1
a478 1
if {[lindex $result 0] == "ok" && [mask [lindex $result 1] 0x7F] == $mins} {
d489 1
a489 1
if {[lindex $result 0] == "ok" && $sec == $secs} {
d532 1
a532 1
if {[lindex $result 0] != "ok"} {
d554 1
a554 1
if {[lindex $result 0] != "ok"} {
d582 1
a582 1
if {[lindex $result 0] != "ok"} {
d606 1
a606 1
if {[lindex $result 0] != "ok"} {
d628 1
a628 1
if {[lindex $result 0] != "ok"} {
d650 1
a650 1
if {[lindex $result 0] != "ok"} {
d680 1
a680 1
	if {[lindex $result 0] == "ok" && \
@

