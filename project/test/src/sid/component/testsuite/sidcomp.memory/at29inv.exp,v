head	1.2;
access;
symbols
	sid-snapshot-20180601:1.2
	sid-snapshot-20180501:1.2
	sid-snapshot-20180401:1.2
	sid-snapshot-20180301:1.2
	sid-snapshot-20180201:1.2
	sid-snapshot-20180101:1.2
	sid-snapshot-20171201:1.2
	sid-snapshot-20171101:1.2
	sid-snapshot-20171001:1.2
	sid-snapshot-20170901:1.2
	sid-snapshot-20170801:1.2
	sid-snapshot-20170701:1.2
	sid-snapshot-20170601:1.2
	sid-snapshot-20170501:1.2
	sid-snapshot-20170401:1.2
	sid-snapshot-20170301:1.2
	sid-snapshot-20170201:1.2
	sid-snapshot-20170101:1.2
	sid-snapshot-20161201:1.2
	sid-snapshot-20161101:1.2
	sid-snapshot-20160901:1.2
	sid-snapshot-20160801:1.2
	sid-snapshot-20160701:1.2
	sid-snapshot-20160601:1.2
	sid-snapshot-20160501:1.2
	sid-snapshot-20160401:1.2
	sid-snapshot-20160301:1.2
	sid-snapshot-20160201:1.2
	sid-snapshot-20160101:1.2
	sid-snapshot-20151201:1.2
	sid-snapshot-20151101:1.2
	sid-snapshot-20151001:1.2
	sid-snapshot-20150901:1.2
	sid-snapshot-20150801:1.2
	sid-snapshot-20150701:1.2
	sid-snapshot-20150601:1.2
	sid-snapshot-20150501:1.2
	sid-snapshot-20150401:1.2
	sid-snapshot-20150301:1.2
	sid-snapshot-20150201:1.2
	sid-snapshot-20150101:1.2
	sid-snapshot-20141201:1.2
	sid-snapshot-20141101:1.2
	sid-snapshot-20141001:1.2
	sid-snapshot-20140901:1.2
	sid-snapshot-20140801:1.2
	sid-snapshot-20140701:1.2
	sid-snapshot-20140601:1.2
	sid-snapshot-20140501:1.2
	sid-snapshot-20140401:1.2
	sid-snapshot-20140301:1.2
	sid-snapshot-20140201:1.2
	sid-snapshot-20140101:1.2
	sid-snapshot-20131201:1.2
	sid-snapshot-20131101:1.2
	sid-snapshot-20131001:1.2
	sid-snapshot-20130901:1.2
	sid-snapshot-20130801:1.2
	sid-snapshot-20130701:1.2
	sid-snapshot-20130601:1.2
	sid-snapshot-20130501:1.2
	sid-snapshot-20130401:1.2
	sid-snapshot-20130301:1.2
	sid-snapshot-20130201:1.2
	sid-snapshot-20130101:1.2
	sid-snapshot-20121201:1.2
	sid-snapshot-20121101:1.2
	sid-snapshot-20121001:1.2
	sid-snapshot-20120901:1.2
	sid-snapshot-20120801:1.2
	sid-snapshot-20120701:1.2
	sid-snapshot-20120601:1.2
	sid-snapshot-20120501:1.2
	sid-snapshot-20120401:1.2
	sid-snapshot-20120301:1.2
	sid-snapshot-20120201:1.2
	sid-snapshot-20120101:1.2
	sid-snapshot-20111201:1.2
	sid-snapshot-20111101:1.2
	sid-snapshot-20111001:1.2
	sid-snapshot-20110901:1.2
	sid-snapshot-20110801:1.2
	sid-snapshot-20110701:1.2
	sid-snapshot-20110601:1.2
	sid-snapshot-20110501:1.2
	sid-snapshot-20110401:1.2
	sid-snapshot-20110301:1.2
	sid-snapshot-20110201:1.2
	sid-snapshot-20110101:1.2
	sid-snapshot-20101201:1.2
	sid-snapshot-20101101:1.2
	sid-snapshot-20101001:1.2
	sid-snapshot-20100901:1.2
	sid-snapshot-20100801:1.2
	sid-snapshot-20100701:1.2
	sid-snapshot-20100601:1.2
	sid-snapshot-20100501:1.2
	sid-snapshot-20100401:1.2
	sid-snapshot-20100301:1.2
	sid-snapshot-20100201:1.2
	sid-snapshot-20100101:1.2
	sid-snapshot-20091201:1.2
	sid-snapshot-20091101:1.2
	sid-snapshot-20091001:1.2
	sid-snapshot-20090901:1.2
	sid-snapshot-20090801:1.2
	sid-snapshot-20090701:1.2
	sid-snapshot-20090601:1.2
	sid-snapshot-20090501:1.2
	sid-snapshot-20090401:1.2
	sid-snapshot-20090301:1.2
	sid-snapshot-20090201:1.2
	sid-snapshot-20090101:1.2
	sid-snapshot-20081201:1.2
	sid-snapshot-20081101:1.2
	sid-snapshot-20081001:1.2
	sid-snapshot-20080901:1.2
	sid-snapshot-20080801:1.2
	sid-snapshot-20080701:1.2
	sid-snapshot-20080601:1.2
	sid-snapshot-20080501:1.2
	sid-snapshot-20080403:1.2
	sid-snapshot-20080401:1.2
	sid-snapshot-20080301:1.2
	sid-snapshot-20080201:1.2
	sid-snapshot-20080101:1.2
	sid-snapshot-20071201:1.2
	sid-snapshot-20071101:1.2
	sid-snapshot-20071001:1.2
	sid-20020905-branchpoint:1.2
	sid-20020905-branch:1.2.0.2
	cygnus_cvs_20020108_pre:1.2;
locks; strict;
comment	@# @;


1.2
date	2001.07.13.15.19.09;	author fche;	state Exp;
branches;
next	1.1;

1.1
date	2000.12.07.19.31.03;	author fche;	state Exp;
branches;
next	;


desc
@@


1.2
log
@* test suite cleanup

2001-07-13  Frank Ch. Eigler  <fche@@redhat.com>

	* config/default.exp: Stop using [sid_find_file] for component libs.
	Forget about mksid.
	* sidcomp.*/*.exp: Stop using [sid_find_file] to find component
	shared libraries for "load" cmds in sid configuration files.
@
text
@# Initialisation.
set manufacturer_code 0x1F
set default_size 524288
set default_sector_size 512
set default_device_code 0x5B

set test "sid configuration"
sid_config_component_test "at29b.conf" \
    "load libmemory.la mem_component_library" \
    "hw-memory-flash-at29"
pass $test

set test "sid start"
if {[sid_start "at29b.conf"]} { pass $test } else { fail $test ; return }

set test "try to set size-max"
set status [sid_cmd "sid::component::set_attribute_value $victim size-max 1024"]
set tsize [sid_cmd "sid::component::attribute_value $victim size-max"]
if {$status == "bad_value" && $tsize == "33554432"} { pass $test } else { fail $test }

set test "set size to 10000000000000000"
set status1 [sid_cmd "sid::component::set_attribute_value $victim size 8192"]
set status2 [sid_cmd "sid::component::set_attribute_value $victim size 10000000000000000"]
set result [sid_cmd "sid::component::attribute_value $victim size"]
if { $status1 == "ok" && $status2 == "bad_value" && $result == "8192"} { pass $test } else { fail $test }
# $result should be what it was last set successfully

set test "set size to size-max+1"
set maxsize [sid_cmd "sid::component::attribute_value $victim size-max"]
set result [sid_cmd "sid::component::attribute_value $victim size"]
set size [expr {$maxsize + 1}]
set status [sid_cmd "sid::component::set_attribute_value $victim size $size"]
set result [sid_cmd "sid::component::attribute_value $victim size"]
if {$status == "bad_value" && $result == "8192"} { pass $test } else { fail $test }

foreach badvalue {-1 abcdefghijklmn FALSE 1.234e-10} {
# -1 gives bad value because the 2's compliment of -1 is bigger than size-max
    set test "set size to $badvalue"
    set status [sid_cmd "sid::component::set_attribute_value $victim size $badvalue"]
    set result [sid_cmd "sid::component::attribute_value $victim size"]
    if {$status == "bad_value" && $result == "8192"} { pass $test } else { 
        fail $test }
}

set test "set size to 0"
set status [sid_cmd "sid::component::set_attribute_value $victim size 0"]
set result [sid_cmd "sid::component::attribute_value $victim size"]
if {$status == "ok" && $result == "0"} { pass $test } else { fail $test }

foreach badvalue {-1 0 10000000000000000 xyz FALSE 1.234e-10} {
    set test "set sector-size to $badvalue"
    set status [sid_cmd "sid::component::set_attribute_value $victim sector-size $badvalue"]
    set result [sid_cmd "sid::component::attribute_value $victim sector-size"]
    if {$status == "bad_value" && $result == $default_sector_size} { pass $test } else { fail "$test -- got $status, $result" }
}

set test "set device-code to 0x100"
set status1 [sid_cmd "sid::component::set_attribute_value $victim device-code 0x01"]
set status2 [sid_cmd "sid::component::set_attribute_value $victim device-code 0x100"]
set result [sid_cmd "sid::component::attribute_value $victim device-code"]
if {$status1 == "ok" && $status == "bad_value" && $result == "1"} { pass $test } else { fail $test }

set test "set device-code to -1"
# should set to 255
set status [sid_cmd "sid::component::set_attribute_value $victim device-code -1"]
set result [sid_cmd "sid::component::attribute_value $victim device-code"]
if {$status == "ok" && $result == "0xFF"} { pass $test } else { fail $test }

foreach badvalue {10000000000000000 xyz FALSE 1.234e-10} {
    set test "set device-code to $badvalue"
    set status [sid_cmd "sid::component::set_attribute_value $victim device-code $badvalue"]
    set result [sid_cmd "sid::component::attribute_value $victim device-code"]
    if {$status == "bad_value" && $result == "0xFF"} { pass $test } else { 
        fail $test }
}

#cr 101337
set test "set sector-size bigger than size "
set status1 [sid_cmd "sid::component::set_attribute_value $victim size 32768"]
set status2 [sid_cmd "sid::component::set_attribute_value $victim sector-size 65536"]
set ssize [sid_cmd "sid::component::attribute_value $victim sector-size"]
set size [sid_cmd "sid::component::attribute_value $victim size"]
if {$status1 == "ok" && $status2 == "bad_value" && $ssize<=$size} then { pass $test } else { fail $test }

set test "drive image-load with unset image-file attribute"
set names [sid_cmd "sid::component::attribute_value $victim image-file"]
set pin [sid_cmd "sid::component::find_pin $victim image-load"]
sid_cmd "sid::pin::driven_h4 $pin 0"
if {$names == "" && $pin != ""} then { pass $test } else { fail $test }

set test "drive image-store with unset image-file attribute"
set names [sid_cmd "sid::component::attribute_value $victim image-file"]
set pin [sid_cmd "sid::component::find_pin $victim image-store"]
sid_cmd "sid::pin::driven_h4 $pin 0"
if {$names == "" && $pin != ""} then { pass $test } else { fail $test }

set test "attribute list with incorrect category names"
set category "something"
set names [sid_cmd "sid::component::attribute_names_in_category $victim $category"]
if {$names == ""} then { pass $test } else { fail $test }

set test "query incorrect attributes name"
set value [sid_cmd "sid::component::attribute_value $victim seqattr"]
if {$value == ""} then { pass $test } else { fail $test }

set test "set attributes values to non existing attribute"
set status [sid_cmd "sid::component::set_attribute_value $victim attr 112"]
if {$status == "not_found"} then { pass $test } else { fail $test }

set test "find pin that does not exist"
set pin [sid_cmd "sid::component::find_pin $victim newpin"]
if {$pin == ""} then { pass $test } else { fail $test }

set test "connect pin that does not exist"
set pin [sid_cmd "sid::pin::new"]
set status [sid_cmd "sid::component::connect_pin $victim newpin2 $pin"]
if {$status == "not_found"} then { pass $test } else { fail $test }

set test "disconnect pin that does not exist"
set pin [sid_cmd "sid::pin::new"]
set status [sid_cmd "sid::component::disconnect_pin $victim output--0 $pin"]
if {$status == "not_found" } then { pass $test } else { fail $test }

set test "check connected pins that does not exist"
set pins [sid_cmd "sid::component::connected_pins $victim notexist"]
if {$pins == ""} then { pass $test } else { fail $test }

set test "connect read-write-port as a accessor"
set bus [sid_cmd "sid::bus::new"]
set status [sid_cmd "sid::component::connect_accessor $victim read-write-port $bus"]
if {$status == "not_found"} then { pass $test } else { fail $test }

set test "check connected read-write-port bus"
set bus [sid_cmd "sid::component::connected_bus $victim read-write-port"]
if {$bus == ""} then { pass $test } else { fail $test }

set test "connect accessor that does not exist"
set bus [sid_cmd "sid::bus::new"]
set status [sid_cmd "sid::component::connect_accessor $victim accessor $bus"]
if {$status == "not_found"} then { pass $test } else { fail $test }

set test "find bus that does not exist"
set bus [sid_cmd "sid::component::find_bus $victim anybus"]
if {$bus == ""} then { pass $test } else { fail $test }

set test "find connected bus that does not exist"
set bus [sid_cmd "sid::component::connected_bus $victim anybus"]
if {$bus == ""} then { pass $test } else { fail $test }

set test "set relationships that does not exist"
set status [sid_cmd "sid::component::relate $victim relationship $victim"]
if {$status == "not_found"} then { pass $test } else { fail $test }

set test "query relationships that does not exist"
set comps [sid_cmd "sid::component::related_components $victim relation2"]
if {$comps == ""} then { pass $test } else { fail $test }



set test "sid stop"
if [sid_stop] then { pass $test } else { fail $test ; return }


# zap temp file if tests were successful 
global exit_status
if {$exit_status == "0"} then { file delete "at29b.conf" }
@


1.1
log
@* public snapshot of sid simulator
@
text
@d9 1
a9 1
    "load [sid_find_file libmemory.la] mem_component_library" \
@

