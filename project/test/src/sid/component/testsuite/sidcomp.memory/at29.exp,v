head	1.4;
access;
symbols
	sid-snapshot-20180601:1.4
	sid-snapshot-20180501:1.4
	sid-snapshot-20180401:1.4
	sid-snapshot-20180301:1.4
	sid-snapshot-20180201:1.4
	sid-snapshot-20180101:1.4
	sid-snapshot-20171201:1.4
	sid-snapshot-20171101:1.4
	sid-snapshot-20171001:1.4
	sid-snapshot-20170901:1.4
	sid-snapshot-20170801:1.4
	sid-snapshot-20170701:1.4
	sid-snapshot-20170601:1.4
	sid-snapshot-20170501:1.4
	sid-snapshot-20170401:1.4
	sid-snapshot-20170301:1.4
	sid-snapshot-20170201:1.4
	sid-snapshot-20170101:1.4
	sid-snapshot-20161201:1.4
	sid-snapshot-20161101:1.4
	sid-snapshot-20160901:1.4
	sid-snapshot-20160801:1.4
	sid-snapshot-20160701:1.4
	sid-snapshot-20160601:1.4
	sid-snapshot-20160501:1.4
	sid-snapshot-20160401:1.4
	sid-snapshot-20160301:1.4
	sid-snapshot-20160201:1.4
	sid-snapshot-20160101:1.4
	sid-snapshot-20151201:1.4
	sid-snapshot-20151101:1.4
	sid-snapshot-20151001:1.4
	sid-snapshot-20150901:1.4
	sid-snapshot-20150801:1.4
	sid-snapshot-20150701:1.4
	sid-snapshot-20150601:1.4
	sid-snapshot-20150501:1.4
	sid-snapshot-20150401:1.4
	sid-snapshot-20150301:1.4
	sid-snapshot-20150201:1.4
	sid-snapshot-20150101:1.4
	sid-snapshot-20141201:1.4
	sid-snapshot-20141101:1.4
	sid-snapshot-20141001:1.4
	sid-snapshot-20140901:1.4
	sid-snapshot-20140801:1.4
	sid-snapshot-20140701:1.4
	sid-snapshot-20140601:1.4
	sid-snapshot-20140501:1.4
	sid-snapshot-20140401:1.4
	sid-snapshot-20140301:1.4
	sid-snapshot-20140201:1.4
	sid-snapshot-20140101:1.4
	sid-snapshot-20131201:1.4
	sid-snapshot-20131101:1.4
	sid-snapshot-20131001:1.4
	sid-snapshot-20130901:1.4
	sid-snapshot-20130801:1.4
	sid-snapshot-20130701:1.4
	sid-snapshot-20130601:1.4
	sid-snapshot-20130501:1.4
	sid-snapshot-20130401:1.4
	sid-snapshot-20130301:1.4
	sid-snapshot-20130201:1.4
	sid-snapshot-20130101:1.4
	sid-snapshot-20121201:1.4
	sid-snapshot-20121101:1.4
	sid-snapshot-20121001:1.4
	sid-snapshot-20120901:1.4
	sid-snapshot-20120801:1.4
	sid-snapshot-20120701:1.4
	sid-snapshot-20120601:1.4
	sid-snapshot-20120501:1.4
	sid-snapshot-20120401:1.4
	sid-snapshot-20120301:1.4
	sid-snapshot-20120201:1.4
	sid-snapshot-20120101:1.4
	sid-snapshot-20111201:1.4
	sid-snapshot-20111101:1.4
	sid-snapshot-20111001:1.4
	sid-snapshot-20110901:1.4
	sid-snapshot-20110801:1.4
	sid-snapshot-20110701:1.4
	sid-snapshot-20110601:1.4
	sid-snapshot-20110501:1.4
	sid-snapshot-20110401:1.4
	sid-snapshot-20110301:1.4
	sid-snapshot-20110201:1.4
	sid-snapshot-20110101:1.4
	sid-snapshot-20101201:1.4
	sid-snapshot-20101101:1.4
	sid-snapshot-20101001:1.4
	sid-snapshot-20100901:1.4
	sid-snapshot-20100801:1.4
	sid-snapshot-20100701:1.4
	sid-snapshot-20100601:1.4
	sid-snapshot-20100501:1.4
	sid-snapshot-20100401:1.4
	sid-snapshot-20100301:1.4
	sid-snapshot-20100201:1.4
	sid-snapshot-20100101:1.4
	sid-snapshot-20091201:1.4
	sid-snapshot-20091101:1.4
	sid-snapshot-20091001:1.4
	sid-snapshot-20090901:1.4
	sid-snapshot-20090801:1.4
	sid-snapshot-20090701:1.4
	sid-snapshot-20090601:1.4
	sid-snapshot-20090501:1.4
	sid-snapshot-20090401:1.4
	sid-snapshot-20090301:1.4
	sid-snapshot-20090201:1.4
	sid-snapshot-20090101:1.4
	sid-snapshot-20081201:1.4
	sid-snapshot-20081101:1.4
	sid-snapshot-20081001:1.4
	sid-snapshot-20080901:1.4
	sid-snapshot-20080801:1.4
	sid-snapshot-20080701:1.4
	sid-snapshot-20080601:1.4
	sid-snapshot-20080501:1.4
	sid-snapshot-20080403:1.4
	sid-snapshot-20080401:1.4
	sid-snapshot-20080301:1.4
	sid-snapshot-20080201:1.4
	sid-snapshot-20080101:1.4
	sid-snapshot-20071201:1.4
	sid-snapshot-20071101:1.4
	sid-snapshot-20071001:1.4
	sid-20020905-branchpoint:1.4
	sid-20020905-branch:1.4.0.2
	cygnus_cvs_20020108_pre:1.4;
locks; strict;
comment	@# @;


1.4
date	2001.07.13.15.19.09;	author fche;	state Exp;
branches;
next	1.3;

1.3
date	2001.06.21.05.54.42;	author bje;	state Exp;
branches;
next	1.2;

1.2
date	2001.06.20.07.18.40;	author bje;	state Exp;
branches;
next	1.1;

1.1
date	2000.12.07.19.31.03;	author fche;	state Exp;
branches;
next	;


desc
@@


1.4
log
@* test suite cleanup

2001-07-13  Frank Ch. Eigler  <fche@@redhat.com>

	* config/default.exp: Stop using [sid_find_file] for component libs.
	Forget about mksid.
	* sidcomp.*/*.exp: Stop using [sid_find_file] to find component
	shared libraries for "load" cmds in sid configuration files.
@
text
@# Initialisation.
set manufacturer_code 0x1F

set test "sid configuration"
sid_config_component_test "at29.conf" \
    "load libmemory.la mem_component_library" \
    "hw-memory-flash-at29"
pass $test

set test "sid start"
if {[sid_start "at29.conf"]} { pass $test } else { fail $test ; return }


set test "attribute list"
sid_assert_includes_all "sid::component::attribute_names $victim" \
   {size sector-size device-code manufacturer-code image-file}


set test "read-write-port bus is present"
set result [sid_cmd "sid::component::find_bus $victim read-write-port"]
if {$result != ""} { pass $test } else { fail $test }


set test "set size to 512 bytes"
sid_assert_success "sid::component::set_attribute_value $victim size 200"


set test "validate size is 512 bytes"
set size [sid_cmd "sid::component::attribute_value $victim size"]
if {$size == "200"} { pass $test } else { fail $test }


set test "test for memory leaks"
set iterations 100
for {set i 0} {$i < $iterations} {incr i} {
    # some size between 1 .. 16MB
    set size [expr {1000000 + (($i * 101) % 16) * 1000000}]
    sid_cmd "sid::component::set_attribute_value $victim size $size"
}
sid_assert_success "sid::component::set_attribute_value $victim size 0"


set test "set memory size to 8192 bytes"
sid_assert_success "sid::component::set_attribute_value $victim size 8192"

# Test various sector sizes.

foreach bad_sectorsize {0 8193} {
    set test "set an invalid sector size of $bad_sectorsize bytes"
    set result [sid_cmd \
      "sid::component::set_attribute_value $victim sector-size $bad_sectorsize"]
    if {$result == "bad_value"} { pass $test } else { fail $test}
}
 
foreach sectorsize {16 32 128 256 512 1024} {
    set test "set and validate sector size of $sectorsize bytes"
    sid_cmd "sid::component::set_attribute_value $victim sector-size $sectorsize"
    set result [sid_cmd "sid::component::attribute_value $victim sector-size"]
    if {$result == $sectorsize} { pass $test } else { 
	fail "$test -- got $result and expected $sectorsize"
    }
}

set test "set sector size to 256 bytes"
sid_assert_success "sid::component::set_attribute_value $victim sector-size 256"


set test "validate sector size is 256 bytes"
sid_assert_success "sid::component::attribute_value $victim sector-size"


set test "read memory image from a file"
set file [open "test.dat" w]
fconfigure $file -translation binary
set data 0
set size [sid_cmd "sid::component::attribute_value $victim size"]
for {set i 0} {$i < $size} {incr i} {
    set data [expr {(($data * 19) + 13) % 256}]
    puts -nonewline $file [binary format "c" $data]
}
close $file
set res [sid_cmd "sid::component::set_attribute_value $victim image-file test.dat"]
set pin [sid_cmd "sid::component::find_pin $victim image-load"]
sid_cmd "sid::pin::driven_h4 $pin 0"
file delete -force $file
if {$res == "ok" && $pin != ""} then { pass $test } else { fail $test }
file delete -force $file


set test "verify read memory image"
set data 0
set bus [sid_cmd "sid::component::find_bus $victim read-write-port"]
set size [sid_cmd "sid::component::attribute_value $victim size"]
for {set i 0} {$i < $size} {incr i} {
    set data [expr {(($data * 19) + 13) % 256}]
    set addr $i
    set result [sid_cmd "sid::bus::read_h4_l1 $bus $addr"]
    if ![sid_bus_ok_p $result] { fail $test; break }
    set result_data [lindex $result 1]
    if {$result_data != $data} {
	fail "$test - mismatch @@ $i - $result_data vs $data"
	break
    }
}
if {$i == $size} { pass $test } else { fail "$test $i $size" }


foreach hex_addr {0x0 0x100 0x1E0 0x20F 0x222 0x29A 0x4BC 0x551 0x555 0x6B0 0x1010 0x10FF} {
    set test "unpermitted write to address $hex_addr has no effect"
    set hex_data 0xAA

    set result [sid_cmd "sid::bus::read_h4_l1 $bus $hex_addr"]
    if {[sid_bus_ok_p $result] && [lindex $result 1] == $hex_data} {
	unresolved "magic byte already in address $hex_addr"
	continue
    }

    set result [sid_cmd "sid::bus::write_h4_l1 $bus $hex_addr $hex_data"]
    if ![sid_bus_ok_p $result] {
	fail "$test (bus error)"
    } else {
	set result [sid_cmd "sid::bus::read_h4_l1 $bus $hex_addr"]
	if {[sid_bus_ok_p $result] && [lindex $result 1] != $hex_data} {
	    pass $test
	} else {
	    fail "$test -- mismatch @@ $hex_addr, $hex_data vs [lindex $result 1]"
	}
    }
}


set test "writing magic bytes to disable software data protection"
set okay 1
foreach pair {{0xAA 0x5555} {0x55 0xAAAA} {0xA0 0x5555}} {
    set hex_data [lindex $pair 0]
    set hex_addr [lindex $pair 1]
    set result [sid_cmd "sid::bus::write_h4_l1 $bus $hex_addr $hex_data"]
    if ![sid_bus_ok_p $result] {
	set okay 0
	break
    }
}
if {$okay} { pass $test } else { fail "$test (bus error)" }


set test "program the first sector"
set size [sid_cmd "sid::component::attribute_value $victim size"]
set sector_size [sid_cmd "sid::component::attribute_value $victim sector-size"]
set okay 1
for {set addr 0} {$addr < $sector_size} {incr addr} {
    set result [sid_cmd "sid::bus::write_h4_l1 $bus $addr 0x66"]
    if ![sid_bus_ok_p $result] {
	set okay 0
	break
    }
}


set test "validate the first sector"
set okay 1
for {set addr 0} {$addr < $sector_size} {incr addr} {
    set result [sid_cmd "sid::bus::read_h4_l1 $bus $addr"]
    if {![sid_bus_ok_p $result] || [lindex $result 1] != 0x66} {
	set okay 0
	warning "results: $result"
	break
    }
}
if {$okay} { pass $test } else { fail $test }


set test "illegitimately program the second sector"
set size [sid_cmd "sid::component::attribute_value $victim size"]
set sector_size [sid_cmd "sid::component::attribute_value $victim sector-size"]
set okay 1
for {set addr $sector_size} {$addr < [expr $sector_size + 16]} {incr addr} {
    set result [sid_cmd "sid::bus::write_h4_l1 $bus $addr 0x66"]
    if ![sid_bus_ok_p $result] {
	set okay 0
	break
    }
}
if {$okay} { pass $test } else { fail $test }


set test "validate the second sector -- writes should have no effect"
set okay 1
for {set addr $sector_size} {$addr < [expr $sector_size + 16]} {incr addr} {
    set result [sid_cmd "sid::bus::read_h4_l1 $bus $addr"]
    if {![sid_bus_ok_p $result] || [lindex $result 1] == 0x66} {
	set okay 0
	break
    }
}
if {$okay} { pass $test } else { fail $test }


set test "writing magic bytes to disable software data protection (2)"
set okay 1
foreach pair {{0xAA 0x5555} {0x55 0xAAAA} {0xA0 0x5555}} {
    set hex_data [lindex $pair 0]
    set hex_addr [lindex $pair 1]
    set result [sid_cmd "sid::bus::write_h4_l1 $bus $hex_addr $hex_data"]
    if ![sid_bus_ok_p $result] {
	set okay 0
	break
    }
}
if {$okay} { pass $test } else { fail "$test (bus error)" }


set test "program the third sector"
set size [sid_cmd "sid::component::attribute_value $victim size"]
set sector_size [sid_cmd "sid::component::attribute_value $victim sector-size"]
set okay 1
for {set addr 0} {$addr < $sector_size} {incr addr} {
    set addr [expr [expr 2 * $sector_size] + $addr]
    set result [sid_cmd "sid::bus::write_h4_l1 $bus $addr 0x66"]
    if ![sid_bus_ok_p $result] {
	set okay 0
	break
    }
}


set test "validate the third sector"
set okay 1
for {set addr 0} {$addr < $sector_size} {incr addr} {
    set addr [expr [expr 2 * $sector_size] + $addr]
    set result [sid_cmd "sid::bus::read_h4_l1 $bus $addr"]
    if {![sid_bus_ok_p $result] || [lindex $result 1] != 0x66} {
	set okay 0
	warning "results: $result"
	break
    }
}
if {$okay} { pass $test } else { fail $test }


set test "read manufacturer code without issuing id command"
set result [sid_cmd "sid::bus::read_h4_l1 $bus 0"]
if {[sid_bus_ok_p $result] && [lindex $result 1] != 0x1F} { pass $test } else { fail $test }


set test "writing magic bytes to enter identification mode"
set okay 1
foreach pair {{0xAA 0x5555} {0x55 0xAAAA} {0x90 0x5555}} {
    set hex_data [lindex $pair 0]
    set hex_addr [lindex $pair 1]
    set result [sid_cmd "sid::bus::write_h4_l1 $bus $hex_addr $hex_data"]
    if ![sid_bus_ok_p $result] {
	set okay 0
	break
    }
}
if {$okay} { pass $test } else { fail "$test (bus error)" }


set test "read manufacturer code"
set result [sid_cmd "sid::bus::read_h4_l1 $bus 0"]
if {[sid_bus_ok_p $result] && [lindex $result 1] == 0x1F} { pass $test } else { fail $test }


set test "read device id code for a low-voltage flash (id=0x3B)"
sid_cmd "sid::component::set_attribute_value $victim device-code 0x3B"
set result [sid_cmd "sid::component::attribute_value $victim device-code"]
if {$result != 0x3B} {
    fail $test
} else {
    set result [sid_cmd "sid::bus::read_h4_l1 $bus 1"]
    if {[sid_bus_ok_p $result] && [lindex $result 1] == 0x3B} { 
	pass $test 
    } else { 
	fail $test
    }
}    


set test "return to normal operating mode"
set okay 1
foreach pair {{0xAA 0x5555} {0x55 0xAAAA} {0xF0 0x5555}} {
    set hex_data [lindex $pair 0]
    set hex_addr [lindex $pair 1]
    set result [sid_cmd "sid::bus::write_h4_l1 $bus $hex_addr $hex_data"]
    if ![sid_bus_ok_p $result] {
	set okay 0
	break
    }
}
if {$okay} { pass $test } else { fail "$test (bus error)" }


set test "check for normal operating mode"
set result [sid_cmd "sid::bus::read_h4_l1 $bus 0"]
if {[sid_bus_ok_p $result] && [lindex $result 1] != 0x1F} { pass $test } else { fail $test }


set test "sid stop"
if [sid_stop] then { pass $test } else { fail $test ; return }


# zap temp file if tests were successful 
global exit_status
if {$exit_status == "0"} then { file delete "at29.conf" }
@


1.3
log
@2001-06-21  Ben Elliston  <bje@@redhat.com>

	* sidcomp.cache/utils.exp: Use sid_bus_ok_p to detect bus write
	errors instead of the common construction: if {$result == "ok"}.
	* sidcomp.ide/diskio.exp: Likewise.
	* sidcomp.lcd/lcdbase.exp: Likewise.
	* sidcomp.mapper/basicmapper.exp: Likewise.
	* sidcomp.memory/am29.exp: Likewise.
	* sidcomp.memory/at29.exp: Likewise.
	* sidcomp.memory/at29val.exp: Likewise.
	* sidcomp.memory/genericmemory.exp: Likewise.
	* sidcomp.mmu/arm-remap.exp: Likewise.
	* sidcomp.rtc/ds1642.exp: Likewise.
	* sidcomp.rtc/ds1742.exp: Likewise.
	* sidcomp.timers/timerbase.exp: Likewise.
@
text
@d6 1
a6 1
    "load [sid_find_file libmemory.la] mem_component_library" \
@


1.2
log
@2001-06-20  Ben Elliston  <bje@@redhat.com>

	* sidcomp.cache/coherency.exp: Use sid_bus_ok_p to detect bus read
	errors instead of the frequently used (and less readable)
	construction: if {[lindex $result] 0 == "ok"}.
	* sidcomp.cache/writealloc.exp: Likewise.
	* sidcomp.cache/writethru.exp: Likewise.
	* sidcomp.gloss/angel.exp: Likewise.
	* sidcomp.ide/diskio.exp: Likewise.
	* sidcomp.interrupt/arm-interrupt.exp: Likewise.
	* sidcomp.interrupt/cma222-interrupt.exp: Likewise.
	* sidcomp.lcd/lcdbase.exp: Likewise.
	* sidcomp.mapper/basicmapper.exp: Likewise.
	* sidcomp.memory/am29.exp: Likewise.
	* sidcomp.memory/at29.exp: Likewise.
	* sidcomp.memory/at29val.exp: Likewise.
	* sidcomp.memory/genericmemory.exp: Likewise.
	* sidcomp.mmu/arm-remap.exp: Likewise.
	* sidcomp.parport/parport.exp: Likewise.
	* sidcomp.rtc/ds1642.exp: Likewise.
	* sidcomp.rtc/ds1742.exp: Likewise.
	* sidcomp.timers/timerbase.exp: Likewise.
	* sidcomp.timers/timersched.exp: Likewise.
@
text
@d119 1
a119 1
    if {$result != "ok"} { 
d138 1
a138 1
    if {$result != "ok"} {
d152 1
a152 1
    if {$result != "ok"} {
d178 1
a178 1
    if {$result != "ok"} {
d204 1
a204 1
    if {$result != "ok"} {
d219 1
a219 1
    if {$result != "ok"} {
d251 1
a251 1
    if {$result != "ok"} {
d285 1
a285 1
    if {$result != "ok"} {
@


1.1
log
@* public snapshot of sid simulator
@
text
@d98 1
a98 2
    set status [lindex $result 0]
    if {$status != "ok"} { fail "$test - bad"; break }
d113 1
a113 1
    if {[lindex $result 0] == "ok" && [lindex $result 1] == $hex_data} {
d123 1
a123 1
	if {[lindex $result 0] == "ok" && [lindex $result 1] != $hex_data} {
d163 1
a163 1
    if {[lindex $result 0] != "ok" || [lindex $result 1] != 0x66} {
d165 1
a165 1
	warning "results: [lindex $result 0] [lindex $result 1]"
d190 1
a190 1
    if {[lindex $result 0] != "ok" || [lindex $result 1] == 0x66} {
d231 1
a231 1
    if {[lindex $result 0] != "ok" || [lindex $result 1] != 0x66} {
d233 1
a233 1
	warning "results: [lindex $result 0] [lindex $result 1]"
d242 1
a242 1
if {[lindex $result 0] == "ok" && [lindex $result 1] != 0x1F} { pass $test } else { fail $test }
d261 1
a261 1
if {[lindex $result 0] == "ok" && [lindex $result 1] == 0x1F} { pass $test } else { fail $test }
d271 1
a271 1
    if {[lindex $result 0] == "ok" && [lindex $result 1] == 0x3B} { 
d295 1
a295 1
if {[lindex $result 0] == "ok" && [lindex $result 1] != 0x1F} { pass $test } else { fail $test }
@

