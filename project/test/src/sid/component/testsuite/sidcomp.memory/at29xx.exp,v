head	1.2;
access;
symbols
	sid-snapshot-20180601:1.2
	sid-snapshot-20180501:1.2
	sid-snapshot-20180401:1.2
	sid-snapshot-20180301:1.2
	sid-snapshot-20180201:1.2
	sid-snapshot-20180101:1.2
	sid-snapshot-20171201:1.2
	sid-snapshot-20171101:1.2
	sid-snapshot-20171001:1.2
	sid-snapshot-20170901:1.2
	sid-snapshot-20170801:1.2
	sid-snapshot-20170701:1.2
	sid-snapshot-20170601:1.2
	sid-snapshot-20170501:1.2
	sid-snapshot-20170401:1.2
	sid-snapshot-20170301:1.2
	sid-snapshot-20170201:1.2
	sid-snapshot-20170101:1.2
	sid-snapshot-20161201:1.2
	sid-snapshot-20161101:1.2
	sid-snapshot-20160901:1.2
	sid-snapshot-20160801:1.2
	sid-snapshot-20160701:1.2
	sid-snapshot-20160601:1.2
	sid-snapshot-20160501:1.2
	sid-snapshot-20160401:1.2
	sid-snapshot-20160301:1.2
	sid-snapshot-20160201:1.2
	sid-snapshot-20160101:1.2
	sid-snapshot-20151201:1.2
	sid-snapshot-20151101:1.2
	sid-snapshot-20151001:1.2
	sid-snapshot-20150901:1.2
	sid-snapshot-20150801:1.2
	sid-snapshot-20150701:1.2
	sid-snapshot-20150601:1.2
	sid-snapshot-20150501:1.2
	sid-snapshot-20150401:1.2
	sid-snapshot-20150301:1.2
	sid-snapshot-20150201:1.2
	sid-snapshot-20150101:1.2
	sid-snapshot-20141201:1.2
	sid-snapshot-20141101:1.2
	sid-snapshot-20141001:1.2
	sid-snapshot-20140901:1.2
	sid-snapshot-20140801:1.2
	sid-snapshot-20140701:1.2
	sid-snapshot-20140601:1.2
	sid-snapshot-20140501:1.2
	sid-snapshot-20140401:1.2
	sid-snapshot-20140301:1.2
	sid-snapshot-20140201:1.2
	sid-snapshot-20140101:1.2
	sid-snapshot-20131201:1.2
	sid-snapshot-20131101:1.2
	sid-snapshot-20131001:1.2
	sid-snapshot-20130901:1.2
	sid-snapshot-20130801:1.2
	sid-snapshot-20130701:1.2
	sid-snapshot-20130601:1.2
	sid-snapshot-20130501:1.2
	sid-snapshot-20130401:1.2
	sid-snapshot-20130301:1.2
	sid-snapshot-20130201:1.2
	sid-snapshot-20130101:1.2
	sid-snapshot-20121201:1.2
	sid-snapshot-20121101:1.2
	sid-snapshot-20121001:1.2
	sid-snapshot-20120901:1.2
	sid-snapshot-20120801:1.2
	sid-snapshot-20120701:1.2
	sid-snapshot-20120601:1.2
	sid-snapshot-20120501:1.2
	sid-snapshot-20120401:1.2
	sid-snapshot-20120301:1.2
	sid-snapshot-20120201:1.2
	sid-snapshot-20120101:1.2
	sid-snapshot-20111201:1.2
	sid-snapshot-20111101:1.2
	sid-snapshot-20111001:1.2
	sid-snapshot-20110901:1.2
	sid-snapshot-20110801:1.2
	sid-snapshot-20110701:1.2
	sid-snapshot-20110601:1.2
	sid-snapshot-20110501:1.2
	sid-snapshot-20110401:1.2
	sid-snapshot-20110301:1.2
	sid-snapshot-20110201:1.2
	sid-snapshot-20110101:1.2
	sid-snapshot-20101201:1.2
	sid-snapshot-20101101:1.2
	sid-snapshot-20101001:1.2
	sid-snapshot-20100901:1.2
	sid-snapshot-20100801:1.2
	sid-snapshot-20100701:1.2
	sid-snapshot-20100601:1.2
	sid-snapshot-20100501:1.2
	sid-snapshot-20100401:1.2
	sid-snapshot-20100301:1.2
	sid-snapshot-20100201:1.2
	sid-snapshot-20100101:1.2
	sid-snapshot-20091201:1.2
	sid-snapshot-20091101:1.2
	sid-snapshot-20091001:1.2
	sid-snapshot-20090901:1.2
	sid-snapshot-20090801:1.2
	sid-snapshot-20090701:1.2
	sid-snapshot-20090601:1.2
	sid-snapshot-20090501:1.2
	sid-snapshot-20090401:1.2
	sid-snapshot-20090301:1.2
	sid-snapshot-20090201:1.2
	sid-snapshot-20090101:1.2
	sid-snapshot-20081201:1.2
	sid-snapshot-20081101:1.2
	sid-snapshot-20081001:1.2
	sid-snapshot-20080901:1.2
	sid-snapshot-20080801:1.2
	sid-snapshot-20080701:1.2
	sid-snapshot-20080601:1.2
	sid-snapshot-20080501:1.2
	sid-snapshot-20080403:1.2
	sid-snapshot-20080401:1.2
	sid-snapshot-20080301:1.2
	sid-snapshot-20080201:1.2
	sid-snapshot-20080101:1.2
	sid-snapshot-20071201:1.2
	sid-snapshot-20071101:1.2
	sid-snapshot-20071001:1.2
	sid-20020905-branchpoint:1.2
	sid-20020905-branch:1.2.0.2
	cygnus_cvs_20020108_pre:1.2;
locks; strict;
comment	@# @;


1.2
date	2001.07.13.15.19.09;	author fche;	state Exp;
branches;
next	1.1;

1.1
date	2000.12.07.19.31.03;	author fche;	state Exp;
branches;
next	;


desc
@@


1.2
log
@* test suite cleanup

2001-07-13  Frank Ch. Eigler  <fche@@redhat.com>

	* config/default.exp: Stop using [sid_find_file] for component libs.
	Forget about mksid.
	* sidcomp.*/*.exp: Stop using [sid_find_file] to find component
	shared libraries for "load" cmds in sid configuration files.
@
text
@set test "at29c256 :sid configuration"
sid_config_component_test "at29c256.conf" \
    "load libmemory.la mem_component_library" \
    "hw-memory-flash-at29c256"
pass $test

set test "at29c256 :sid start"
if {[sid_start "at29c256.conf"]} { pass $test } else { fail $test ; return }


set test "at29c256 :validate size is 32*1024 bytes"
set size [sid_cmd "sid::component::attribute_value $victim size"]
if {$size == "32768"} { pass $test } else { fail $test }

set test "at29c256 :validate sector-size is 64"
set size [sid_cmd "sid::component::attribute_value $victim sector-size"]
if {$size == "64"} { pass $test } else { fail $test }

set test "at29c256 :validate device-code is 0xDC"
set code [sid_cmd "sid::component::attribute_value $victim device-code"]
if {$code == "0xDC"} { pass $test } else { fail $test }

set test "at29c256 :sid stop"
if [sid_stop] then { pass $test } else { fail $test ; return }

# zap temp file if tests were successful 
global exit_status
if {$exit_status == "0"} then { file delete "at29c256.conf" }


set test "at29lv256 :sid configuration"
sid_config_component_test "at29lv256.conf" \
    "load [sid_find_file libmemory.la] mem_component_library" \
    "hw-memory-flash-at29lv256"
pass $test

set test "at29lv256 :sid start"
if {[sid_start "at29lv256.conf"]} { pass $test } else { fail $test ; return }


set test "at29lv256 :validate size is 32*1024 bytes"
set size [sid_cmd "sid::component::attribute_value $victim size"]
if {$size == "32768"} { pass $test } else { fail $test }

set test "at29lv256 :validate sector-size is 64"
set size [sid_cmd "sid::component::attribute_value $victim sector-size"]
if {$size == "64"} { pass $test } else { fail $test }

set test "at29lv256 :validate device-code is 0xBC"
set code [sid_cmd "sid::component::attribute_value $victim device-code"]
if {$code == "0xBC"} { pass $test } else { fail $test }

set test "at29lv256 :sid stop"
if [sid_stop] then { pass $test } else { fail $test ; return }

# zap temp file if tests were successful 
global exit_status
if {$exit_status == "0"} then { file delete "at29lv256.conf" }


set test "at29c257 :sid configuration"
sid_config_component_test "at29c257.conf" \
    "load [sid_find_file libmemory.la] mem_component_library" \
    "hw-memory-flash-at29c257"
pass $test

set test "at29c257 :sid start"
if {[sid_start "at29c257.conf"]} { pass $test } else { fail $test ; return }


set test "at29c257 :validate size is 32*1024 bytes"
set size [sid_cmd "sid::component::attribute_value $victim size"]
if {$size == "32768"} { pass $test } else { fail $test }

set test "at29c257 :validate sector-size is 64"
set size [sid_cmd "sid::component::attribute_value $victim sector-size"]
if {$size == "64"} { pass $test } else { fail $test }

set test "at29c257 :validate device-code is 0xDC"
set code [sid_cmd "sid::component::attribute_value $victim device-code"]
if {$code == "0xDC"} { pass $test } else { fail $test }

set test "at29c257 :sid stop"
if [sid_stop] then { pass $test } else { fail $test ; return }

# zap temp file if tests were successful 
global exit_status
if {$exit_status == "0"} then { file delete "at29c257.conf" }


set test "at29c512 :sid configuration"
sid_config_component_test "at29c512.conf" \
    "load [sid_find_file libmemory.la] mem_component_library" \
    "hw-memory-flash-at29c512"
pass $test

set test "at29c512 :sid start"
if {[sid_start "at29c512.conf"]} { pass $test } else { fail $test ; return }


set test "at29c512 :validate size is 64*1024 bytes"
set size [sid_cmd "sid::component::attribute_value $victim size"]
if {$size == "65536"} { pass $test } else { fail $test }

set test "at29c512 :validate sector-size is 128"
set size [sid_cmd "sid::component::attribute_value $victim sector-size"]
if {$size == "128"} { pass $test } else { fail $test }

set test "at29c512 :validate device-code is 0x5D"
set code [sid_cmd "sid::component::attribute_value $victim device-code"]
if {$code == "0x5D"} { pass $test } else { fail $test }

set test "at29c512 :sid stop"
if [sid_stop] then { pass $test } else { fail $test ; return }

# zap temp file if tests were successful 
global exit_status
if {$exit_status == "0"} then { file delete "at29c512.conf" }


set test "at29lv512 :sid configuration"
sid_config_component_test "at29lv512.conf" \
    "load [sid_find_file libmemory.la] mem_component_library" \
    "hw-memory-flash-at29lv512"
pass $test

set test "at29lv512 :sid start"
if {[sid_start "at29lv512.conf"]} { pass $test } else { fail $test ; return }


set test "at29lv512 :validate size is 64*1024 bytes"
set size [sid_cmd "sid::component::attribute_value $victim size"]
if {$size == "65536"} { pass $test } else { fail $test }

set test "at29lv512 :validate sector-size is 128"
set size [sid_cmd "sid::component::attribute_value $victim sector-size"]
if {$size == "128"} { pass $test } else { fail $test }

set test "at29lv512 :validate device-code is 0x3D"
set code [sid_cmd "sid::component::attribute_value $victim device-code"]
if {$code == "0x3D"} { pass $test } else { fail $test }

set test "at29lv512 :sid stop"
if [sid_stop] then { pass $test } else { fail $test ; return }

# zap temp file if tests were successful 
global exit_status
if {$exit_status == "0"} then { file delete "at29lv512.conf" }


set test "at29c010a :sid configuration"
sid_config_component_test "at29c010a.conf" \
    "load [sid_find_file libmemory.la] mem_component_library" \
    "hw-memory-flash-at29c010a"
pass $test

set test "at29c010a :sid start"
if {[sid_start "at29c010a.conf"]} { pass $test } else { fail $test ; return }


set test "at29c010a :validate size is 128*1024 bytes"
set size [sid_cmd "sid::component::attribute_value $victim size"]
if {$size == "131072"} { pass $test } else { fail $test }

set test "at29c010a :validate sector-size is 128"
set size [sid_cmd "sid::component::attribute_value $victim sector-size"]
if {$size == "128"} { pass $test } else { fail $test }

set test "at29c010a :validate device-code is 0xD5"
set code [sid_cmd "sid::component::attribute_value $victim device-code"]
if {$code == "0xD5"} { pass $test } else { fail $test }

set test "at29c010a :sid stop"
if [sid_stop] then { pass $test } else { fail $test ; return }

# zap temp file if tests were successful 
global exit_status
if {$exit_status == "0"} then { file delete "at29c010a.conf" }


set test "at29lv010a :sid configuration"
sid_config_component_test "at29lv010a.conf" \
    "load [sid_find_file libmemory.la] mem_component_library" \
    "hw-memory-flash-at29lv010a"
pass $test

set test "at29lv010a :sid start"
if {[sid_start "at29lv010a.conf"]} { pass $test } else { fail $test ; return }


set test "at29lv010a :validate size is 128*1024 bytes"
set size [sid_cmd "sid::component::attribute_value $victim size"]
if {$size == "131072"} { pass $test } else { fail $test }

set test "at29lv010a :validate sector-size is 128"
set size [sid_cmd "sid::component::attribute_value $victim sector-size"]
if {$size == "128"} { pass $test } else { fail $test }

set test "at29lv010a :validate device-code is 0x35"
set code [sid_cmd "sid::component::attribute_value $victim device-code"]
if {$code == "0x35"} { pass $test } else { fail $test }

set test "at29lv010a :sid stop"
if [sid_stop] then { pass $test } else { fail $test ; return }

# zap temp file if tests were successful 
global exit_status
if {$exit_status == "0"} then { file delete "at29lv010a.conf" }


set test "at29bv010a :sid configuration"
sid_config_component_test "at29bv010a.conf" \
    "load [sid_find_file libmemory.la] mem_component_library" \
    "hw-memory-flash-at29bv010a"
pass $test

set test "at29bv010a :sid start"
if {[sid_start "at29bv010a.conf"]} { pass $test } else { fail $test ; return }


set test "at29bv010a :validate size is 128*1024 bytes"
set size [sid_cmd "sid::component::attribute_value $victim size"]
if {$size == "131072"} { pass $test } else { fail $test }

set test "at29bv010a :validate sector-size is 128"
set size [sid_cmd "sid::component::attribute_value $victim sector-size"]
if {$size == "128"} { pass $test } else { fail $test }

set test "at29bv010a :validate device-code is 0x35"
set code [sid_cmd "sid::component::attribute_value $victim device-code"]
if {$code == "0x35"} { pass $test } else { fail $test }

set test "at29bv010a :sid stop"
if [sid_stop] then { pass $test } else { fail $test ; return }

# zap temp file if tests were successful 
global exit_status
if {$exit_status == "0"} then { file delete "at29bv010a.conf" }


set test "at29c020 :sid configuration"
sid_config_component_test "at29c020.conf" \
    "load [sid_find_file libmemory.la] mem_component_library" \
    "hw-memory-flash-at29c020"
pass $test

set test "at29c020 :sid start"
if {[sid_start "at29c020.conf"]} { pass $test } else { fail $test ; return }


set test "at29c020 :validate size is 256*1024 bytes"
set size [sid_cmd "sid::component::attribute_value $victim size"]
if {$size == "262144"} { pass $test } else { fail $test }

set test "at29c020 :validate sector-size is 256"
set size [sid_cmd "sid::component::attribute_value $victim sector-size"]
if {$size == "256"} { pass $test } else { fail $test }

set test "at29c020 :validate device-code is 0xDA"
set code [sid_cmd "sid::component::attribute_value $victim device-code"]
if {$code == "0xDA"} { pass $test } else { fail $test }

set test "at29c020 :sid stop"
if [sid_stop] then { pass $test } else { fail $test ; return }

# zap temp file if tests were successful 
global exit_status
if {$exit_status == "0"} then { file delete "at29c020.conf" }


set test "at29lv020 :sid configuration"
sid_config_component_test "at29lv020.conf" \
    "load [sid_find_file libmemory.la] mem_component_library" \
    "hw-memory-flash-at29lv020"
pass $test

set test "at29lv020 :sid start"
if {[sid_start "at29lv020.conf"]} { pass $test } else { fail $test ; return }


set test "at29lv020 :validate size is 256*1024 bytes"
set size [sid_cmd "sid::component::attribute_value $victim size"]
if {$size == "262144"} { pass $test } else { fail $test }

set test "at29lv020 :validate sector-size is 256"
set size [sid_cmd "sid::component::attribute_value $victim sector-size"]
if {$size == "256"} { pass $test } else { fail $test }

set test "at29lv020 :validate device-code is 0xBA"
set code [sid_cmd "sid::component::attribute_value $victim device-code"]
if {$code == "0xBA"} { pass $test } else { fail $test }

set test "at29lv020 :sid stop"
if [sid_stop] then { pass $test } else { fail $test ; return }

# zap temp file if tests were successful 
global exit_status
if {$exit_status == "0"} then { file delete "at29lv020.conf" }


set test "at29bv020 :sid configuration"
sid_config_component_test "at29bv020.conf" \
    "load [sid_find_file libmemory.la] mem_component_library" \
    "hw-memory-flash-at29bv020"
pass $test

set test "at29bv020 :sid start"
if {[sid_start "at29bv020.conf"]} { pass $test } else { fail $test ; return }


set test "at29bv020 :validate size is 256*1024 bytes"
set size [sid_cmd "sid::component::attribute_value $victim size"]
if {$size == "262144"} { pass $test } else { fail $test }

set test "at29bv020 :validate sector-size is 256"
set size [sid_cmd "sid::component::attribute_value $victim sector-size"]
if {$size == "256"} { pass $test } else { fail $test }

set test "at29bv020 :validate device-code is 0xBA"
set code [sid_cmd "sid::component::attribute_value $victim device-code"]
if {$code == "0xBA"} { pass $test } else { fail $test }

set test "at29bv020 :sid stop"
if [sid_stop] then { pass $test } else { fail $test ; return }

# zap temp file if tests were successful 
global exit_status
if {$exit_status == "0"} then { file delete "at29bv020.conf" }


set test "at29c040a :sid configuration"
sid_config_component_test "at29c040.conf" \
    "load [sid_find_file libmemory.la] mem_component_library" \
    "hw-memory-flash-at29c040"
pass $test

set test "at29c040a :sid start"
if {[sid_start "at29c040.conf"]} { pass $test } else { fail $test ; return }


set test "at29c040a :validate size is 512*1024 bytes"
set size [sid_cmd "sid::component::attribute_value $victim size"]
if {$size == "524288"} { pass $test } else { fail $test }

set test "at29c040a :validate sector-size is 512"
set size [sid_cmd "sid::component::attribute_value $victim sector-size"]
if {$size == "512"} { pass $test } else { fail $test }

set test "at29c040a :validate device-code is 0x5B"
set code [sid_cmd "sid::component::attribute_value $victim device-code"]
if {$code == "0x5B"} { pass $test } else { fail $test }

set test "at29c040a :sid stop"
if [sid_stop] then { pass $test } else { fail $test ; return }

# zap temp file if tests were successful 
global exit_status
if {$exit_status == "0"} then { file delete "at29c040.conf" }


set test "at29lv040 :sid configuration"
sid_config_component_test "at29lv040.conf" \
    "load [sid_find_file libmemory.la] mem_component_library" \
    "hw-memory-flash-at29lv040"
pass $test

set test "at29lv040 :sid start"
if {[sid_start "at29lv040.conf"]} { pass $test } else { fail $test ; return }


set test "at29lv040 :validate size is 512*1024 bytes"
set size [sid_cmd "sid::component::attribute_value $victim size"]
if {$size == "524288"} { pass $test } else { fail $test }

set test "at29lv040 :validate sector-size is 512"
set size [sid_cmd "sid::component::attribute_value $victim sector-size"]
if {$size == "512"} { pass $test } else { fail $test }

set test "at29lv040 :validate device-code is 0x3B"
set code [sid_cmd "sid::component::attribute_value $victim device-code"]
if {$code == "0x3B"} { pass $test } else { fail $test }

set test "at29lv040 :sid stop"
if [sid_stop] then { pass $test } else { fail $test ; return }

# zap temp file if tests were successful 
global exit_status
if {$exit_status == "0"} then { file delete "at29lv040.conf" }


set test "at29bv040 :sid configuration"
sid_config_component_test "at29bv040.conf" \
    "load [sid_find_file libmemory.la] mem_component_library" \
    "hw-memory-flash-at29bv040"
pass $test

set test "at29bv040 :sid start"
if {[sid_start "at29bv040.conf"]} { pass $test } else { fail $test ; return }


set test "at29bv040 :validate size is 512*1024 bytes"
set size [sid_cmd "sid::component::attribute_value $victim size"]
if {$size == "524288"} { pass $test } else { fail $test }

set test "at29bv040 :validate sector-size is 512"
set size [sid_cmd "sid::component::attribute_value $victim sector-size"]
if {$size == "512"} { pass $test } else { fail $test }

set test "at29bv040 :validate device-code is 0x3B"
set code [sid_cmd "sid::component::attribute_value $victim device-code"]
if {$code == "0x3B"} { pass $test } else { fail $test }

set test "at29bv040 :sid stop"
if [sid_stop] then { pass $test } else { fail $test ; return }

# zap temp file if tests were successful 
global exit_status
if {$exit_status == "0"} then { file delete "at29bv040.conf" }


set test "at29c040a :sid configuration"
sid_config_component_test "at29c040a.conf" \
    "load [sid_find_file libmemory.la] mem_component_library" \
    "hw-memory-flash-at29c040a"
pass $test

set test "at29c040a :sid start"
if {[sid_start "at29c040a.conf"]} { pass $test } else { fail $test ; return }


set test "at29c040a :validate size is 512*1024 bytes"
set size [sid_cmd "sid::component::attribute_value $victim size"]
if {$size == "524288"} { pass $test } else { fail $test }

set test "at29c040a :validate sector-size is 256"
set size [sid_cmd "sid::component::attribute_value $victim sector-size"]
if {$size == "256"} { pass $test } else { fail $test }

set test "at29c040a :validate device-code is 0xA4"
set code [sid_cmd "sid::component::attribute_value $victim device-code"]
if {$code == "0xA4"} { pass $test } else { fail $test }

set test "at29c040a :sid stop"
if [sid_stop] then { pass $test } else { fail $test ; return }

# zap temp file if tests were successful 
global exit_status
if {$exit_status == "0"} then { file delete "at29c040a.conf" }


set test "at29lv040a :sid configuration"
sid_config_component_test "at29lv040a.conf" \
    "load [sid_find_file libmemory.la] mem_component_library" \
    "hw-memory-flash-at29lv040a"
pass $test

set test "at29lv040a :sid start"
if {[sid_start "at29lv040a.conf"]} { pass $test } else { fail $test ; return }


set test "at29lv040a :validate size is 512*1024 bytes"
set size [sid_cmd "sid::component::attribute_value $victim size"]
if {$size == "524288"} { pass $test } else { fail $test }

set test "at29lv040a :validate sector-size is 256"
set size [sid_cmd "sid::component::attribute_value $victim sector-size"]
if {$size == "256"} { pass $test } else { fail $test }

set test "at29lv040a :validate device-code is 0xC4"
set code [sid_cmd "sid::component::attribute_value $victim device-code"]
if {$code == "0xC4"} { pass $test } else { fail $test }

set test "at29lv040a :sid stop"
if [sid_stop] then { pass $test } else { fail $test ; return }

# zap temp file if tests were successful 
global exit_status
if {$exit_status == "0"} then { file delete "at29lv040a.conf" }


set test "at29bv040a :sid configuration"
sid_config_component_test "at29bv040a.conf" \
    "load [sid_find_file libmemory.la] mem_component_library" \
    "hw-memory-flash-at29bv040a"
pass $test

set test "at29bv040a :sid start"
if {[sid_start "at29bv040a.conf"]} { pass $test } else { fail $test ; return }


set test "at29bv040a :validate size is 512*1024 bytes"
set size [sid_cmd "sid::component::attribute_value $victim size"]
if {$size == "524288"} { pass $test } else { fail $test }

set test "at29bv040a :validate sector-size is 256"
set size [sid_cmd "sid::component::attribute_value $victim sector-size"]
if {$size == "256"} { pass $test } else { fail $test }

set test "at29bv040a :validate device-code is 0xC4"
set code [sid_cmd "sid::component::attribute_value $victim device-code"]
if {$code == "0xC4"} { pass $test } else { fail $test }

set test "at29bv040a :sid stop"
if [sid_stop] then { pass $test } else { fail $test ; return }

# zap temp file if tests were successful 
global exit_status
if {$exit_status == "0"} then { file delete "at29bv040a.conf" }

@


1.1
log
@* public snapshot of sid simulator
@
text
@d3 1
a3 1
    "load [sid_find_file libmemory.la] mem_component_library" \
@

