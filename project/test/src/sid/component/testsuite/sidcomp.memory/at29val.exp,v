head	1.4;
access;
symbols
	sid-snapshot-20180601:1.4
	sid-snapshot-20180501:1.4
	sid-snapshot-20180401:1.4
	sid-snapshot-20180301:1.4
	sid-snapshot-20180201:1.4
	sid-snapshot-20180101:1.4
	sid-snapshot-20171201:1.4
	sid-snapshot-20171101:1.4
	sid-snapshot-20171001:1.4
	sid-snapshot-20170901:1.4
	sid-snapshot-20170801:1.4
	sid-snapshot-20170701:1.4
	sid-snapshot-20170601:1.4
	sid-snapshot-20170501:1.4
	sid-snapshot-20170401:1.4
	sid-snapshot-20170301:1.4
	sid-snapshot-20170201:1.4
	sid-snapshot-20170101:1.4
	sid-snapshot-20161201:1.4
	sid-snapshot-20161101:1.4
	sid-snapshot-20160901:1.4
	sid-snapshot-20160801:1.4
	sid-snapshot-20160701:1.4
	sid-snapshot-20160601:1.4
	sid-snapshot-20160501:1.4
	sid-snapshot-20160401:1.4
	sid-snapshot-20160301:1.4
	sid-snapshot-20160201:1.4
	sid-snapshot-20160101:1.4
	sid-snapshot-20151201:1.4
	sid-snapshot-20151101:1.4
	sid-snapshot-20151001:1.4
	sid-snapshot-20150901:1.4
	sid-snapshot-20150801:1.4
	sid-snapshot-20150701:1.4
	sid-snapshot-20150601:1.4
	sid-snapshot-20150501:1.4
	sid-snapshot-20150401:1.4
	sid-snapshot-20150301:1.4
	sid-snapshot-20150201:1.4
	sid-snapshot-20150101:1.4
	sid-snapshot-20141201:1.4
	sid-snapshot-20141101:1.4
	sid-snapshot-20141001:1.4
	sid-snapshot-20140901:1.4
	sid-snapshot-20140801:1.4
	sid-snapshot-20140701:1.4
	sid-snapshot-20140601:1.4
	sid-snapshot-20140501:1.4
	sid-snapshot-20140401:1.4
	sid-snapshot-20140301:1.4
	sid-snapshot-20140201:1.4
	sid-snapshot-20140101:1.4
	sid-snapshot-20131201:1.4
	sid-snapshot-20131101:1.4
	sid-snapshot-20131001:1.4
	sid-snapshot-20130901:1.4
	sid-snapshot-20130801:1.4
	sid-snapshot-20130701:1.4
	sid-snapshot-20130601:1.4
	sid-snapshot-20130501:1.4
	sid-snapshot-20130401:1.4
	sid-snapshot-20130301:1.4
	sid-snapshot-20130201:1.4
	sid-snapshot-20130101:1.4
	sid-snapshot-20121201:1.4
	sid-snapshot-20121101:1.4
	sid-snapshot-20121001:1.4
	sid-snapshot-20120901:1.4
	sid-snapshot-20120801:1.4
	sid-snapshot-20120701:1.4
	sid-snapshot-20120601:1.4
	sid-snapshot-20120501:1.4
	sid-snapshot-20120401:1.4
	sid-snapshot-20120301:1.4
	sid-snapshot-20120201:1.4
	sid-snapshot-20120101:1.4
	sid-snapshot-20111201:1.4
	sid-snapshot-20111101:1.4
	sid-snapshot-20111001:1.4
	sid-snapshot-20110901:1.4
	sid-snapshot-20110801:1.4
	sid-snapshot-20110701:1.4
	sid-snapshot-20110601:1.4
	sid-snapshot-20110501:1.4
	sid-snapshot-20110401:1.4
	sid-snapshot-20110301:1.4
	sid-snapshot-20110201:1.4
	sid-snapshot-20110101:1.4
	sid-snapshot-20101201:1.4
	sid-snapshot-20101101:1.4
	sid-snapshot-20101001:1.4
	sid-snapshot-20100901:1.4
	sid-snapshot-20100801:1.4
	sid-snapshot-20100701:1.4
	sid-snapshot-20100601:1.4
	sid-snapshot-20100501:1.4
	sid-snapshot-20100401:1.4
	sid-snapshot-20100301:1.4
	sid-snapshot-20100201:1.4
	sid-snapshot-20100101:1.4
	sid-snapshot-20091201:1.4
	sid-snapshot-20091101:1.4
	sid-snapshot-20091001:1.4
	sid-snapshot-20090901:1.4
	sid-snapshot-20090801:1.4
	sid-snapshot-20090701:1.4
	sid-snapshot-20090601:1.4
	sid-snapshot-20090501:1.4
	sid-snapshot-20090401:1.4
	sid-snapshot-20090301:1.4
	sid-snapshot-20090201:1.4
	sid-snapshot-20090101:1.4
	sid-snapshot-20081201:1.4
	sid-snapshot-20081101:1.4
	sid-snapshot-20081001:1.4
	sid-snapshot-20080901:1.4
	sid-snapshot-20080801:1.4
	sid-snapshot-20080701:1.4
	sid-snapshot-20080601:1.4
	sid-snapshot-20080501:1.4
	sid-snapshot-20080403:1.4
	sid-snapshot-20080401:1.4
	sid-snapshot-20080301:1.4
	sid-snapshot-20080201:1.4
	sid-snapshot-20080101:1.4
	sid-snapshot-20071201:1.4
	sid-snapshot-20071101:1.4
	sid-snapshot-20071001:1.4
	sid-20020905-branchpoint:1.4
	sid-20020905-branch:1.4.0.2
	cygnus_cvs_20020108_pre:1.4;
locks; strict;
comment	@# @;


1.4
date	2001.07.13.15.19.09;	author fche;	state Exp;
branches;
next	1.3;

1.3
date	2001.06.21.05.54.42;	author bje;	state Exp;
branches;
next	1.2;

1.2
date	2001.06.20.07.18.40;	author bje;	state Exp;
branches;
next	1.1;

1.1
date	2000.12.07.19.31.03;	author fche;	state Exp;
branches;
next	;


desc
@@


1.4
log
@* test suite cleanup

2001-07-13  Frank Ch. Eigler  <fche@@redhat.com>

	* config/default.exp: Stop using [sid_find_file] for component libs.
	Forget about mksid.
	* sidcomp.*/*.exp: Stop using [sid_find_file] to find component
	shared libraries for "load" cmds in sid configuration files.
@
text
@# Initialisation.
set manufacturer_code 0x1F
set default_size 524288
set default_sector_size 512
set default_device_code 0x5B

set test "sid configuration"
sid_config_component_test_with_tracing "at29a.conf" \
    "load libmemory.la mem_component_library" \
    "hw-memory-flash-at29"
pass $test

set test "sid start"
if {[sid_start "at29a.conf"]} { pass $test } else { fail $test ; return }

set test "check setting attribute list"
set category "setting"
sid_assert_includes_all "sid::component::attribute_names_in_category $victim $category" \
  {size sector-size image-file size-max}

set test "check pin attribute list"
set category "pin"
sid_assert_includes_all "sid::component::attribute_names_in_category $victim $category" \
  {image-load image-store}

set test "check register attribute list"
set category "register"
set result [sid_cmd "sid::component::attribute_names_in_category $victim $category"]
if {$result == ""} { pass $test } else { fail $test }

set test "check watchable attribute list"
set category "watchable"
set result [sid_cmd "sid::component::attribute_names_in_category $victim $category"]
if {$result == ""} { pass $test } else { fail $test }

set test "check pin names"
sid_assert_includes_all "sid::component::pin_names $victim" {image-load image-store}

set test "check bus names"
sid_assert_includes_all "sid::component::bus_names $victim" {read-write-port}

set test "check accessor names"
set result [sid_cmd "sid::component::accessor_names $victim"]
if {$result == ""} { pass $test } else { fail $test }

set test "check relationships"
set result [sid_cmd "sid::component::relationship_names $victim"]
if {$result == ""} { pass $test } else { fail $test }

set test "check default device-code is $default_device_code"
set size [sid_cmd "sid::component::attribute_value $victim device-code"]
if {$size == $default_device_code} { pass $test } else { fail $test }

set test "check default manufacturer-code is $manufacturer_code"
set size [sid_cmd "sid::component::attribute_value $victim manufacturer-code"]
if {$size == $manufacturer_code} { pass $test } else { fail $test }

set test "check default size is $default_size"
set size [sid_cmd "sid::component::attribute_value $victim size"]
if {$size == $default_size} { pass $test } else { fail $test }

set test "check default sector-size is $default_sector_size"
set size [sid_cmd "sid::component::attribute_value $victim sector-size"]
if {$size == $default_sector_size} { pass $test } else { fail $test }

set test "try to set manufacturer-code to 0x2F"
set status [sid_cmd "sid::component::set_attribute_value $victim manufacturer-code 0x2F"]
set code [sid_cmd "sid::component::attribute_value $victim manufacturer-code"]
if {$status == "bad_value" && $code == "0x1F"} { pass $test } else { fail $test }

set test "check size-max"
set maxsize [sid_cmd "sid::component::attribute_value $victim size-max"]
if {$maxsize == "33554432"} { pass $test } else { fail $test }

set test "set size to size-max"
set status [sid_cmd "sid::component::set_attribute_value $victim size $maxsize"]
set result [sid_cmd "sid::component::attribute_value $victim size"]
if {$status == "ok" && $result == "33554432"} { pass $test } else { fail $test }

set test "set size to size-max-1"
set size [expr {$maxsize - 1}]
set status [sid_cmd "sid::component::set_attribute_value $victim size $size"]
set result [sid_cmd "sid::component::attribute_value $victim size"]
if {$status == "ok" && $result == "33554431"} { pass $test } else { fail $test }

set test "set sector-size to 1"
set status [sid_cmd "sid::component::set_attribute_value $victim sector-size 1"]
set result [sid_cmd "sid::component::attribute_value $victim sector-size"]
if {$status == "ok" && $result == "1"} { pass $test } else { fail $test }

set test "set sector-size to 0"
set status [sid_cmd "sid::component::set_attribute_value $victim sector-size 0"]
set result [sid_cmd "sid::component::attribute_value $victim sector-size"]
if {$status == "bad_value" && $result == "1"} { pass $test } else { fail $test }

set test "set device-code to 0x01"
set status [sid_cmd "sid::component::set_attribute_value $victim device-code 0x01"]
set result [sid_cmd "sid::component::attribute_value $victim device-code"]
if {$status == "ok" && $result == "0x01"} { pass $test } else { fail $test }

set test "set device-code to 0x00"
set status [sid_cmd "sid::component::set_attribute_value $victim device-code 0x00"]
set result [sid_cmd "sid::component::attribute_value $victim device-code"]
if {$status == "ok" && $result == "0x00"} { pass $test } else { fail $test }

set test "read memory image from a file that contains more bytes than the size"
set file [open "test.dat1" w]
fconfigure $file -translation binary
set data 0
set size 4096
set status [sid_cmd "sid::component::set_attribute_value $victim size $size"]
for {set i 0} {$i < $size} {incr i} {
    set data [expr {(($data * 19) + 13) % 256}]
    puts -nonewline $file [binary format "c" $data]
}
close $file
set status [sid_cmd "sid::component::set_attribute_value $victim size 2048"]
set res [sid_cmd "sid::component::set_attribute_value $victim image-file test.dat1"]
set pin [sid_cmd "sid::component::find_pin $victim image-load"]
sid_cmd "sid::pin::driven_h4 $pin 0"
if {$status == "ok" && $res == "ok" && $pin != ""} then { pass $test } else { fail $test }


set test "verify after image-load"
set data 0
set rwp [sid_cmd "sid::component::find_bus $victim read-write-port"]
set size [sid_cmd "sid::component::attribute_value $victim size"]
for {set i 0} {$i < $size} {incr i} {
    set data [expr {(($data * 19) + 13) % 256}]
    set addr $i
    set result [sid_cmd "sid::bus::read_h4_l1 $rwp $addr"]
    if ![sid_bus_ok_p $result] { fail "$test - bad"; break }
    set result_data [lindex $result 1]
    if {$result_data != $data} {
       fail "$test - mismatch @@ $i - $result_data vs $data"
       break
    }
}
if {$i == $size} then { pass $test } 

set test "read memory image from a file that contains less bytes than the size"
set status [sid_cmd "sid::component::set_attribute_value $victim size 8192"]
set rwp [sid_cmd "sid::component::find_bus $victim read-write-port"]
set data 5
for {set addr 4096} {$addr < 8192} {incr addr} {
   set data [expr {(($data * 17) + 23) % 256}]
   set result [sid_cmd "sid::bus::write_h4_l1 $rwp $addr $data"]
   if ![sid_bus_ok_p $result] then { break }
}
set res [sid_cmd "sid::component::set_attribute_value $victim image-file test.dat1"]
set pin [sid_cmd "sid::component::find_pin $victim image-load"]
sid_cmd "sid::pin::driven_h4 $pin 0"
if { $addr == 8192 && $status == "ok" && $res == "ok" && $pin != ""} then { pass $test } else { fail $test }

set test "verify after image-load II"
set data 0
set rwp [sid_cmd "sid::component::find_bus $victim read-write-port"]
set size [sid_cmd "sid::component::attribute_value $victim size"]
for {set i 0} {$i < $size} {incr i} {
    if {$i < 4096 } then {
	set data [expr {(($data * 19) + 13) % 256}]
    } else {
	set data 0
    }
    set addr $i
    set result [sid_cmd "sid::bus::read_h4_l1 $rwp $addr"]
    if ![sid_bus_ok_p $result] { fail "$test (bus error @@ $addr)"; break }
    set result_data [lindex $result 1]
    if {$result_data != $data} {
       fail "$test - mismatch @@ $i - $result_data vs $data"
       break
    }
}
if {$i == $size} then { pass $test } 


proc unlock_sector {} {
    global rwp
    foreach pair {{0xAA 0x5555} {0x55 0xAAAA} {0xA0 0x5555}} {
	set hex_data [lindex $pair 0]
	set hex_addr [lindex $pair 1]
	set result [sid_cmd "sid::bus::write_h4_l1 $rwp $hex_addr $hex_data"]
        if ![sid_bus_ok_p $result] {
	    return 0
	}
    }
    return 1
}

set test "set memory before image-store"
set num_bytes [expr $size - 4096]
set sector_size [sid_cmd "sid::component::attribute_value $victim sector-size"]
if {[expr $num_bytes % $sector_size] != 0} {
    unresolved "$test -- memory size is not a multiple of the sector size"
} else {
    for {set i 4096} {$i < $size} {incr i} {
	set addr $i
	if {[expr $addr % $sector_size] == 0} {
	    if {![unlock_sector]} { fail $test; break }
	}
	set data [expr ($i - 4096) % 256]
	set result [sid_cmd "sid::bus::write_h4_l1 $rwp $addr $data"]
	if ![sid_bus_ok_p $result] { fail "$test - $result @@ $addr "; break }
	set result [sid_cmd "sid::bus::read_h4_l1 $rwp $addr"]
        if {![sid_bus_ok_p $result] || [lindex $result 1] != $data} {
	    warning "$test -- validating data @@ $addr, got $result"
	}
    }
    if {$i == $size} then { pass $test }
}

set test "drive image-store"
file delete -force file.2
set res [sid_cmd "sid::component::set_attribute_value $victim image-file file.2"]
set file [sid_cmd "sid::component::attribute_value $victim image-file"]
if {$file != "file.2"} {
    fail $test
} else {
    set pin [sid_cmd "sid::component::find_pin $victim image-store"]
    sid_cmd "sid::pin::driven_h4 $pin 0"
    if { $res == "ok" && $pin != ""} then { pass $test } else { fail $test }
}

set test "reset memory after image-store"
set size [sid_cmd "sid::component::attribute_value $victim size"]
for {set i 0} {$i < $size} {incr i} {
    if {[expr $i % $sector_size] == 0} {
	if {![unlock_sector]} {
	    fail $test; break
	}
    }
    set data [expr 2*$i%256]
    set result [sid_cmd "sid::bus::write_h4_l1 $rwp $i $data"]
    if ![sid_bus_ok_p $result] { fail $test; break }
}
if { $i == $size } then { pass $test }

set test "load the stored image and verify values"
set file [sid_cmd "sid::component::attribute_value $victim image-file"]
if {$file != "file.2"} { fail $test }
set pin [sid_cmd "sid::component::find_pin $victim image-load"]
sid_cmd "sid::pin::driven_h4 $pin 0"
set size [sid_cmd "sid::component::attribute_value $victim size"]
if {$size != 8192} { fail $test }
set data 0
for {set i 0} {$i < $size} {incr i} {
    set addr $i
    if {$i < 4096 } then {
	set data [expr {(($data * 19) + 13) % 256}]
    } else {
	set data [expr ($i - 4096) % 256]
    }
    set result [sid_cmd "sid::bus::read_h4_l1 $rwp $addr"]
    if ![sid_bus_ok_p $result] { fail "$test - bad"; break }
    set result_data [lindex $result 1]
    if {$result_data != $data} {
       fail "$test - mismatch @@ $i - $result_data vs $data"
       break
    }
}
if {$size == 8192 && $i == $size && $pin != ""} then { pass $test ; file delete -force $file }

set test "find image-store pin"
set p [sid_cmd "sid::component::find_pin $victim image-store"]
if {$p != ""} then { pass $test } else { fail $test }

set test "sid stop"
if [sid_stop] then { pass $test } else { fail $test ; return }


# zap temp file if tests were successful 
global exit_status
if {$exit_status == "0"} then { file delete "at29a.conf" }
@


1.3
log
@2001-06-21  Ben Elliston  <bje@@redhat.com>

	* sidcomp.cache/utils.exp: Use sid_bus_ok_p to detect bus write
	errors instead of the common construction: if {$result == "ok"}.
	* sidcomp.ide/diskio.exp: Likewise.
	* sidcomp.lcd/lcdbase.exp: Likewise.
	* sidcomp.mapper/basicmapper.exp: Likewise.
	* sidcomp.memory/am29.exp: Likewise.
	* sidcomp.memory/at29.exp: Likewise.
	* sidcomp.memory/at29val.exp: Likewise.
	* sidcomp.memory/genericmemory.exp: Likewise.
	* sidcomp.mmu/arm-remap.exp: Likewise.
	* sidcomp.rtc/ds1642.exp: Likewise.
	* sidcomp.rtc/ds1742.exp: Likewise.
	* sidcomp.timers/timerbase.exp: Likewise.
@
text
@d9 1
a9 1
    "load [sid_find_file libmemory.la] mem_component_library" \
@


1.2
log
@2001-06-20  Ben Elliston  <bje@@redhat.com>

	* sidcomp.cache/coherency.exp: Use sid_bus_ok_p to detect bus read
	errors instead of the frequently used (and less readable)
	construction: if {[lindex $result] 0 == "ok"}.
	* sidcomp.cache/writealloc.exp: Likewise.
	* sidcomp.cache/writethru.exp: Likewise.
	* sidcomp.gloss/angel.exp: Likewise.
	* sidcomp.ide/diskio.exp: Likewise.
	* sidcomp.interrupt/arm-interrupt.exp: Likewise.
	* sidcomp.interrupt/cma222-interrupt.exp: Likewise.
	* sidcomp.lcd/lcdbase.exp: Likewise.
	* sidcomp.mapper/basicmapper.exp: Likewise.
	* sidcomp.memory/am29.exp: Likewise.
	* sidcomp.memory/at29.exp: Likewise.
	* sidcomp.memory/at29val.exp: Likewise.
	* sidcomp.memory/genericmemory.exp: Likewise.
	* sidcomp.mmu/arm-remap.exp: Likewise.
	* sidcomp.parport/parport.exp: Likewise.
	* sidcomp.rtc/ds1642.exp: Likewise.
	* sidcomp.rtc/ds1742.exp: Likewise.
	* sidcomp.timers/timerbase.exp: Likewise.
	* sidcomp.timers/timersched.exp: Likewise.
@
text
@d148 1
a148 1
   if {$result != "ok"} then { puts $result; break }
d183 1
a183 1
	if {$result != "ok"} {
d203 1
a203 1
	if {$result != "ok"} then { fail "$test - $result @@ $addr "; break }
d234 1
a234 1
    if {$result != "ok"} { fail "$test - bad"; break }
d265 1
a265 1
if {$p != ""} then { pass $test } else { puts $status; fail $test }
@


1.1
log
@* public snapshot of sid simulator
@
text
@d132 1
a132 2
    set status [lindex $result 0]
    if {$status != "ok"} { fail "$test - bad"; break }
d167 1
a167 2
    set status [lindex $result 0]
    if {$status != "ok"} { fail "$test - $status @@ $addr"; break }
d205 1
a205 1
	if {[lindex $result 0] != "ok" || [lindex $result 1] != $data} {
d254 1
a254 2
    set status [lindex $result 0]
    if {$status != "ok"} { fail "$test - bad"; break }
@

