head	1.3;
access;
symbols
	sid-snapshot-20180601:1.3
	sid-snapshot-20180501:1.3
	sid-snapshot-20180401:1.3
	sid-snapshot-20180301:1.3
	sid-snapshot-20180201:1.3
	sid-snapshot-20180101:1.3
	sid-snapshot-20171201:1.3
	sid-snapshot-20171101:1.3
	sid-snapshot-20171001:1.3
	sid-snapshot-20170901:1.3
	sid-snapshot-20170801:1.3
	sid-snapshot-20170701:1.3
	sid-snapshot-20170601:1.3
	sid-snapshot-20170501:1.3
	sid-snapshot-20170401:1.3
	sid-snapshot-20170301:1.3
	sid-snapshot-20170201:1.3
	sid-snapshot-20170101:1.3
	sid-snapshot-20161201:1.3
	sid-snapshot-20161101:1.3
	sid-snapshot-20160901:1.3
	sid-snapshot-20160801:1.3
	sid-snapshot-20160701:1.3
	sid-snapshot-20160601:1.3
	sid-snapshot-20160501:1.3
	sid-snapshot-20160401:1.3
	sid-snapshot-20160301:1.3
	sid-snapshot-20160201:1.3
	sid-snapshot-20160101:1.3
	sid-snapshot-20151201:1.3
	sid-snapshot-20151101:1.3
	sid-snapshot-20151001:1.3
	sid-snapshot-20150901:1.3
	sid-snapshot-20150801:1.3
	sid-snapshot-20150701:1.3
	sid-snapshot-20150601:1.3
	sid-snapshot-20150501:1.3
	sid-snapshot-20150401:1.3
	sid-snapshot-20150301:1.3
	sid-snapshot-20150201:1.3
	sid-snapshot-20150101:1.3
	sid-snapshot-20141201:1.3
	sid-snapshot-20141101:1.3
	sid-snapshot-20141001:1.3
	sid-snapshot-20140901:1.3
	sid-snapshot-20140801:1.3
	sid-snapshot-20140701:1.3
	sid-snapshot-20140601:1.3
	sid-snapshot-20140501:1.3
	sid-snapshot-20140401:1.3
	sid-snapshot-20140301:1.3
	sid-snapshot-20140201:1.3
	sid-snapshot-20140101:1.3
	sid-snapshot-20131201:1.3
	sid-snapshot-20131101:1.3
	sid-snapshot-20131001:1.3
	sid-snapshot-20130901:1.3
	sid-snapshot-20130801:1.3
	sid-snapshot-20130701:1.3
	sid-snapshot-20130601:1.3
	sid-snapshot-20130501:1.3
	sid-snapshot-20130401:1.3
	sid-snapshot-20130301:1.3
	sid-snapshot-20130201:1.3
	sid-snapshot-20130101:1.3
	sid-snapshot-20121201:1.3
	sid-snapshot-20121101:1.3
	sid-snapshot-20121001:1.3
	sid-snapshot-20120901:1.3
	sid-snapshot-20120801:1.3
	sid-snapshot-20120701:1.3
	sid-snapshot-20120601:1.3
	sid-snapshot-20120501:1.3
	sid-snapshot-20120401:1.3
	sid-snapshot-20120301:1.3
	sid-snapshot-20120201:1.3
	sid-snapshot-20120101:1.3
	sid-snapshot-20111201:1.3
	sid-snapshot-20111101:1.3
	sid-snapshot-20111001:1.3
	sid-snapshot-20110901:1.3
	sid-snapshot-20110801:1.3
	sid-snapshot-20110701:1.3
	sid-snapshot-20110601:1.3
	sid-snapshot-20110501:1.3
	sid-snapshot-20110401:1.3
	sid-snapshot-20110301:1.3
	sid-snapshot-20110201:1.3
	sid-snapshot-20110101:1.3
	sid-snapshot-20101201:1.3
	sid-snapshot-20101101:1.3
	sid-snapshot-20101001:1.3
	sid-snapshot-20100901:1.3
	sid-snapshot-20100801:1.3
	sid-snapshot-20100701:1.3
	sid-snapshot-20100601:1.3
	sid-snapshot-20100501:1.3
	sid-snapshot-20100401:1.3
	sid-snapshot-20100301:1.3
	sid-snapshot-20100201:1.3
	sid-snapshot-20100101:1.3
	sid-snapshot-20091201:1.3
	sid-snapshot-20091101:1.3
	sid-snapshot-20091001:1.3
	sid-snapshot-20090901:1.3
	sid-snapshot-20090801:1.3
	sid-snapshot-20090701:1.3
	sid-snapshot-20090601:1.3
	sid-snapshot-20090501:1.3
	sid-snapshot-20090401:1.3
	sid-snapshot-20090301:1.3
	sid-snapshot-20090201:1.3
	sid-snapshot-20090101:1.3
	sid-snapshot-20081201:1.3
	sid-snapshot-20081101:1.3
	sid-snapshot-20081001:1.3
	sid-snapshot-20080901:1.3
	sid-snapshot-20080801:1.3
	sid-snapshot-20080701:1.3
	sid-snapshot-20080601:1.3
	sid-snapshot-20080501:1.3
	sid-snapshot-20080403:1.3
	sid-snapshot-20080401:1.3
	sid-snapshot-20080301:1.3
	sid-snapshot-20080201:1.3
	sid-snapshot-20080101:1.3
	sid-snapshot-20071201:1.3
	sid-snapshot-20071101:1.3
	sid-snapshot-20071001:1.3
	sid-20020905-branchpoint:1.3
	sid-20020905-branch:1.3.0.2
	cygnus_cvs_20020108_pre:1.3;
locks; strict;
comment	@# @;


1.3
date	2001.07.13.15.19.10;	author fche;	state Exp;
branches;
next	1.2;

1.2
date	2001.06.20.07.18.47;	author bje;	state Exp;
branches;
next	1.1;

1.1
date	2000.12.07.19.31.05;	author fche;	state Exp;
branches;
next	;


desc
@@


1.3
log
@* test suite cleanup

2001-07-13  Frank Ch. Eigler  <fche@@redhat.com>

	* config/default.exp: Stop using [sid_find_file] for component libs.
	Forget about mksid.
	* sidcomp.*/*.exp: Stop using [sid_find_file] to find component
	shared libraries for "load" cmds in sid configuration files.
@
text
@if {! $sidtarget(arm)} then { untested "hw-timer-arm/ref-* not available"; return }

set test "sid configuration w/ scheduler"
sid_config_component_etc_test_with_tracing "sched.conf" \
    "load libtimers.la timer_component_library" \
    "hw-timer-arm/ref-sched" \
    "load libsched.la sched_component_library
new sid-sched-sim sched
set sched num-clients 1
set sched enabled? 1
connect-pin sched 0-control <- wrapper divided-clock-control
connect-pin sched 0-event -> wrapper divided-clock-event
relate tester sched sched
"
pass $test

set test "sid startup"
if [sid_start "sched.conf"] then { pass $test } else { fail $test ; return }

set test "test presence of scheduler component"
set sched [sid_cmd "set relationships(sched)"]
if {"$sched" == ""} then { fail $test } else { pass $test }

set test "attribute list"
sid_assert_success "sid::component::attribute_names $victim"

set test "reserved register write_h4_l4 (0x04)"
set bus [sid_cmd "sid::component::find_bus $victim registers"]
sid_assert_success "sid::bus::write_h4_l4 $bus 4 0"
set test "reserved register read_h4_l4 (0x04)"
sid_assert_success "sid::bus::read_h4_l4 $bus 4"

set test "reserved register write_h4_l4 (0x10)"
set bus [sid_cmd "sid::component::find_bus $victim registers"]
sid_assert_success "sid::bus::write_h4_l4 $bus 0x10 0"
set test "reserved register read_h4_l4 (0x010)"
sid_assert_success "sid::bus::read_h4_l4 $bus 0x10"

set test "set / retrieve a load value (byte)"
set bus [sid_cmd "sid::component::find_bus $victim registers"]
sid_cmd "sid::bus::write_h4_l1 $bus 0 0xAA"
set val [sid_cmd "sid::bus::read_h4_l1 $bus 0"]
if {[sid_bus_ok_p $val] && [lindex $val 1] == 0xAA} then {pass $test} else {fail $test}

set test "set / retrieve a load value (half-word)"
set bus [sid_cmd "sid::component::find_bus $victim registers"]
sid_cmd "sid::bus::write_h4_l2 $bus 0 0xAABB"
set val [sid_cmd "sid::bus::read_h4_l2 $bus 0"]
if {[sid_bus_ok_p $val] && [lindex $val 1] == 0xAABB} then {pass $test} else {fail $test}

set test "set / retrieve a load value (word)"
set bus [sid_cmd "sid::component::find_bus $victim registers"]
sid_cmd "sid::bus::write_h4_l4 $bus 0 0xC"
set val [sid_cmd "sid::bus::read_h4_l4 $bus 0x0"]
if {[sid_bus_ok_p $val] && [lindex $val 1] == 0xC} then {pass $test} else {fail $test}

set test "retrieve timer value (word)"
set bus [sid_cmd "sid::component::find_bus $victim registers"]
set val [sid_cmd "sid::bus::read_h4_l4 $bus 0x4"]
if {[sid_bus_ok_p $val] && [lindex $val 1] == 0xC} then {pass $test} else {fail $test}

set test "clear interrupts"
set bus [sid_cmd "sid::component::find_bus $victim registers"]
set result [sid_cmd "sid::bus::write_h4_l4 $bus 0x0C 0"]
if [sid_bus_ok_p $result] then {pass $test} else {fail $test}

set test "get control word"
set bus [sid_cmd "sid::component::find_bus $victim registers"]
set result [sid_cmd "sid::bus::read_h4_l4 $bus 0x08"]
# XXX: assert also the current value of the control word?
if [sid_bus_ok_p $result] then { pass $test } else { fail $test }

set test "turn timer on"
set bus [sid_cmd "sid::component::find_bus $victim registers"]
set result [sid_cmd "sid::bus::write_h4_l4 $bus 0x08 0xC4"]
# C4: enabled | periodic | prescale=01 (divide-by-16)
if [sid_bus_ok_p $result] then { pass $test } else { fail $test }

set test "tick presence of scheduler clock pin"
set clock_pin [sid_cmd "sid::component::find_pin $sched advance"]
if {$clock_pin == ""} then { fail $test } else { pass $test }

# 0C = last value stored in timer, a few tests ago
set test "tick timer for almost 0x0C steps = 0xB scheduler ticks"
set sensor_pin [sid_cmd "sid::pin::new"]
sid_cmd "set sensor_count 0"
sid_cmd "set sensor_state 0"
sid_cmd "set hook_driven_h4($sensor_pin) {global driven_h4_value; incr sensor_count ; set sensor_state \$driven_h4_value}"
sid_cmd "sid::component::connect_pin $victim interrupt $sensor_pin"
# one less tick than enough
for {set i 0} {$i < 0xB} {incr i} {
    sid_cmd "sid::pin::driven_h4 $clock_pin 0"
}
set val [sid_cmd "set sensor_count"]
if {$val == "0"} then {pass $test} else {fail $test}

# one more tick - timer should trigger
set test "tick timer for final tick"
sid_cmd "sid::pin::driven_h4 $clock_pin 0"
set val1 [sid_cmd "set sensor_count"]
set val2 [sid_cmd "set sensor_state"]
if {$val1 == "1" && $val2 == "1"} then {pass $test} else {fail $test}

set test "clear interrupt"
set bus [sid_cmd "sid::component::find_bus $victim registers"]
set val [sid_cmd "sid::bus::write_h4_l4 $bus 0x0C 0"]
set val1 [sid_cmd "set sensor_count"]
set val2 [sid_cmd "set sensor_state"]
if {$val1 == 2 && $val2 == 0} then {pass $test} else {fail $test}


set test "sid stop"
if [sid_stop] then { pass $test } else { fail $test ; return }


# zap temp file if tests were successful 
global exit_status
if {$exit_status == "0"} then { file delete "sched.conf" }
@


1.2
log
@2001-06-20  Ben Elliston  <bje@@redhat.com>

	* sidcomp.cache/coherency.exp: Use sid_bus_ok_p to detect bus read
	errors instead of the frequently used (and less readable)
	construction: if {[lindex $result] 0 == "ok"}.
	* sidcomp.cache/writealloc.exp: Likewise.
	* sidcomp.cache/writethru.exp: Likewise.
	* sidcomp.gloss/angel.exp: Likewise.
	* sidcomp.ide/diskio.exp: Likewise.
	* sidcomp.interrupt/arm-interrupt.exp: Likewise.
	* sidcomp.interrupt/cma222-interrupt.exp: Likewise.
	* sidcomp.lcd/lcdbase.exp: Likewise.
	* sidcomp.mapper/basicmapper.exp: Likewise.
	* sidcomp.memory/am29.exp: Likewise.
	* sidcomp.memory/at29.exp: Likewise.
	* sidcomp.memory/at29val.exp: Likewise.
	* sidcomp.memory/genericmemory.exp: Likewise.
	* sidcomp.mmu/arm-remap.exp: Likewise.
	* sidcomp.parport/parport.exp: Likewise.
	* sidcomp.rtc/ds1642.exp: Likewise.
	* sidcomp.rtc/ds1742.exp: Likewise.
	* sidcomp.timers/timerbase.exp: Likewise.
	* sidcomp.timers/timersched.exp: Likewise.
@
text
@d5 1
a5 1
    "load [sid_find_file libtimers.la] timer_component_library" \
d7 1
a7 1
    "load [sid_find_file libsched.la] sched_component_library
@


1.1
log
@* public snapshot of sid simulator
@
text
@d43 1
a43 1
if {[lindex $val 0] == "ok" && [lindex $val 1] == 0xAA} then {pass $test} else {fail $test}
d49 1
a49 1
if {[lindex $val 0] == "ok" && [lindex $val 1] == 0xAABB} then {pass $test} else {fail $test}
d55 1
a55 1
if {[lindex $val 0] == "ok" && [lindex $val 1] == 0xC} then {pass $test} else {fail $test}
d60 1
a60 1
if {[lindex $val 0] == "ok" && [lindex $val 1] == 0xC} then {pass $test} else {fail $test}
d64 2
a65 2
set val [sid_cmd "sid::bus::write_h4_l4 $bus 0x0C 0"]
if {$val == "ok"} then {pass $test} else {fail $test}
d69 1
a69 1
set val [sid_cmd "sid::bus::read_h4_l4 $bus 0x08"]
d71 1
a71 1
if {[string match "ok*" $val]} then {pass $test} else {fail $test}
d75 1
a75 1
set val [sid_cmd "sid::bus::write_h4_l4 $bus 0x08 0xC4"]
d77 1
a77 1
if {$val == "ok"} then {pass $test} else {fail $test}
@

