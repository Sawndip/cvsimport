head	1.2;
access;
symbols;
locks; strict;
comment	@.\" @;


1.2
date	2001.05.14.06.35.30;	author bje;	state dead;
branches;
next	1.1;

1.1
date	2000.12.07.19.30.59;	author fche;	state Exp;
branches;
next	;


desc
@@


1.2
log
@2001-05-14  Ben Elliston  <bje@@redhat.com>

	* sidcomp.cgen-cpu/armconf.exp: Move to sidcomp.cgen-cpu.arm7t.
	* sidcomp.cgen-cpu/armeit.conf: Ditto.
	* sidcomp.cgen-cpu/armeit.tcl: Ditto.
	* sidcomp.cgen-cpu/armfiq.cs: Ditto.
	* sidcomp.cgen-cpu/armhello.ms: Ditto.
	* sidcomp.cgen-cpu/armimemfault.ms: Ditto.
	* sidcomp.cgen-cpu/arminvinsn.ms: Ditto.
	* sidcomp.cgen-cpu/armirq.cs: Ditto.
	* sidcomp.cgen-cpu/armmemfault.ms: Ditto.
	* sidcomp.cgen-cpu/armmisc.exp: Ditto.
	* sidcomp.cgen-cpu/armutils.inc: Ditto.
@
text
@# output(): Fault (invalid insn) pc=0x8044\n
# mach(): all

# Invoke an invalid instruction to test the angel component's handling of it.

	.include "armutils.inc"

	start

# This is the "undefined" special insn.
# ??? The expected output specifies the address of this insn as 0x8044.
# For one, we want to ensure a correct pc is set when the fault handler
# is called.  However, we could make this less fragile.
	.word 0xe7ffffff

	fail
@


1.1
log
@* public snapshot of sid simulator
@
text
@@

