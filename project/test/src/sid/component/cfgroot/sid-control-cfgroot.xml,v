head	1.3;
access;
symbols
	sid-snapshot-20180601:1.3
	sid-snapshot-20180501:1.3
	sid-snapshot-20180401:1.3
	sid-snapshot-20180301:1.3
	sid-snapshot-20180201:1.3
	sid-snapshot-20180101:1.3
	sid-snapshot-20171201:1.3
	sid-snapshot-20171101:1.3
	sid-snapshot-20171001:1.3
	sid-snapshot-20170901:1.3
	sid-snapshot-20170801:1.3
	sid-snapshot-20170701:1.3
	sid-snapshot-20170601:1.3
	sid-snapshot-20170501:1.3
	sid-snapshot-20170401:1.3
	sid-snapshot-20170301:1.3
	sid-snapshot-20170201:1.3
	sid-snapshot-20170101:1.3
	sid-snapshot-20161201:1.3
	sid-snapshot-20161101:1.3
	sid-snapshot-20160901:1.3
	sid-snapshot-20160801:1.3
	sid-snapshot-20160701:1.3
	sid-snapshot-20160601:1.3
	sid-snapshot-20160501:1.3
	sid-snapshot-20160401:1.3
	sid-snapshot-20160301:1.3
	sid-snapshot-20160201:1.3
	sid-snapshot-20160101:1.3
	sid-snapshot-20151201:1.3
	sid-snapshot-20151101:1.3
	sid-snapshot-20151001:1.3
	sid-snapshot-20150901:1.3
	sid-snapshot-20150801:1.3
	sid-snapshot-20150701:1.3
	sid-snapshot-20150601:1.3
	sid-snapshot-20150501:1.3
	sid-snapshot-20150401:1.3
	sid-snapshot-20150301:1.3
	sid-snapshot-20150201:1.3
	sid-snapshot-20150101:1.3
	sid-snapshot-20141201:1.3
	sid-snapshot-20141101:1.3
	sid-snapshot-20141001:1.3
	sid-snapshot-20140901:1.3
	sid-snapshot-20140801:1.3
	sid-snapshot-20140701:1.3
	sid-snapshot-20140601:1.3
	sid-snapshot-20140501:1.3
	sid-snapshot-20140401:1.3
	sid-snapshot-20140301:1.3
	sid-snapshot-20140201:1.3
	sid-snapshot-20140101:1.3
	sid-snapshot-20131201:1.3
	sid-snapshot-20131101:1.3
	sid-snapshot-20131001:1.3
	sid-snapshot-20130901:1.3
	sid-snapshot-20130801:1.3
	sid-snapshot-20130701:1.3
	sid-snapshot-20130601:1.3
	sid-snapshot-20130501:1.3
	sid-snapshot-20130401:1.3
	sid-snapshot-20130301:1.3
	sid-snapshot-20130201:1.3
	sid-snapshot-20130101:1.3
	sid-snapshot-20121201:1.3
	sid-snapshot-20121101:1.3
	sid-snapshot-20121001:1.3
	sid-snapshot-20120901:1.3
	sid-snapshot-20120801:1.3
	sid-snapshot-20120701:1.3
	sid-snapshot-20120601:1.3
	sid-snapshot-20120501:1.3
	sid-snapshot-20120401:1.3
	sid-snapshot-20120301:1.3
	sid-snapshot-20120201:1.3
	sid-snapshot-20120101:1.3
	sid-snapshot-20111201:1.3
	sid-snapshot-20111101:1.3
	sid-snapshot-20111001:1.3
	sid-snapshot-20110901:1.3
	sid-snapshot-20110801:1.3
	sid-snapshot-20110701:1.3
	sid-snapshot-20110601:1.3
	sid-snapshot-20110501:1.3
	sid-snapshot-20110401:1.3
	sid-snapshot-20110301:1.3
	sid-snapshot-20110201:1.3
	sid-snapshot-20110101:1.3
	sid-snapshot-20101201:1.3
	sid-snapshot-20101101:1.3
	sid-snapshot-20101001:1.3
	sid-snapshot-20100901:1.3
	sid-snapshot-20100801:1.3
	sid-snapshot-20100701:1.3
	sid-snapshot-20100601:1.3
	sid-snapshot-20100501:1.3
	sid-snapshot-20100401:1.3
	sid-snapshot-20100301:1.3
	sid-snapshot-20100201:1.3
	sid-snapshot-20100101:1.3
	sid-snapshot-20091201:1.3
	sid-snapshot-20091101:1.3
	sid-snapshot-20091001:1.3
	sid-snapshot-20090901:1.3
	sid-snapshot-20090801:1.3
	sid-snapshot-20090701:1.3
	sid-snapshot-20090601:1.3
	sid-snapshot-20090501:1.3
	sid-snapshot-20090401:1.3
	sid-snapshot-20090301:1.3
	sid-snapshot-20090201:1.3
	sid-snapshot-20090101:1.3
	sid-snapshot-20081201:1.3
	sid-snapshot-20081101:1.3
	sid-snapshot-20081001:1.3
	sid-snapshot-20080901:1.3
	sid-snapshot-20080801:1.3
	sid-snapshot-20080701:1.3
	sid-snapshot-20080601:1.3
	sid-snapshot-20080501:1.3
	sid-snapshot-20080403:1.3
	sid-snapshot-20080401:1.3
	sid-snapshot-20080301:1.3
	sid-snapshot-20080201:1.3
	sid-snapshot-20080101:1.3
	sid-snapshot-20071201:1.3
	sid-snapshot-20071101:1.3
	sid-snapshot-20071001:1.3
	sid-20020905-branchpoint:1.2
	sid-20020905-branch:1.2.0.2
	cygnus_cvs_20020108_pre:1.1;
locks; strict;
comment	@# @;


1.3
date	2005.08.19.19.39.07;	author brolley;	state Exp;
branches;
next	1.2;

1.2
date	2002.05.30.15.23.59;	author fche;	state Exp;
branches;
next	1.1;

1.1
date	2001.08.03.01.47.52;	author bje;	state Exp;
branches;
next	;


desc
@@


1.3
log
@2005-08-19  Dave Brolley  <brolley@@redhat.com>

        * Contribute these changes:

        2005-07-13  Dave Brolley  <brolley@@redhat.com>

        * compConfig.cxx (new_config_pin): Removed from
        dynamic_configurator_component.
        (clients): Added to dynamic_configurator_component.
        (dynamic_configurator_component): Remove new-config pin. Add
        clients as a multi relation.
        (step_pin_handler): Set the configure! attribute of each component
        related via the client relationship.
        (do_configure): Set config_names[0] and config_specs[0] if the
        handle is zero.
        * sid-control-dynamic-configurator.xml: Document the removal of the
        new-config pin and the addition of the clients relationship.
        * sid-control-dynamic-configurator.txt: Regenerated.

        2005-07-05  Dave Brolley  <brolley@@redhat.com>

        * compConfig.cxx (reset_pin_handler): New method of
        dynamic_configurator_component.
        (set_start_config): Likewise.
        (reset): Likewise.
        (reset_pin): New member of dynamic_configurator_component.
        (config_error_pin): Likewise.
        (dynamic_configurator_component): Initialize current_config, prev_config
        and prev_user_config in the reset method. Add "start-config" attribute.
        Add "reset" and "config-error" pins.
        (configure): Check result of do_configure. Drive config_error_pin if not
        ok.
        (configure_pin_handler): Drive config_error_pin if the handle is not
        valid.
        * sid-control-dynamic-configurator.xml: Document the "config-error" and
"reset"
        pins
        * sid-control-dynamic-configurator.txt: Regenerated.

        2005-06-21  Dave Brolley  <brolley@@redhat.com>

        * compConfig.cxx (step_pin_handler): Always drive new_config_pin.

        2005-06-06  Dave Brolley  <brolley@@redhat.com>

        * Makefile.am (pkgdata_DATA): Add sid-control-dynamic-configurator.txt.
        * Makefile.in: Regenerated.
        * compConfig.cxx (cfgroot_component::configure): Renamed to
        configure_file.
        (restore_config,set_syscall_config,check_config_change): New methods of
        dynamic_configurator_component.
        (in_function): Likewise.
        (prev_user_config): New member of dynamic_configurator_component.
        (dynamic_configurator_component): Prime the config_stack with a dummy
        entry.
        (add_warmup_functions): Tokenize based on ",".
        (add_profile_functions): Move on to the next spec on parse error.
        (dynamic_configurator_component::configure): Drive config_result_pin wit
h
        prev_user_config. Call set_syscall_config and check_config_change.
        (do_configure): Don't drive the config_result_pin here. Don't drive the
        step_control_pin here. Duplicate the first stack entry for the first
        config in the dummy entry of the stack. Now takes a reference to a
        config handle.
        (configure_pin_handler): Drive the config_result_pin with prev_user_conf
ig.
        Call restore_config, sys_syscall_config and check_config_change.
        (function_callee_pin_handler): Always use sid-internal-warmup for _Sid_c
onfig.
        (function_return_pin_handler): Return if the loader can't identify the c
urrent
        function. Call restore_config and check_config_change.
        * sid-control-dynamic-configurator.txt: New file.
        * sid-control-dynamic-configurator.xml: New file.

        2005-05-29  Dave Brolley  <brolley@@redhat.com>

        * compConfig.cxx (std::pair,sidutil::tokenize): Add using clause for the
se.
        (dynamic_config,lookup_dynamic_config): New methods of cfgroot_component
.
        (dynamic_configs,found_dynamic_config): New members of cfgroot_component
.
        (configure_line): Initialize num_invalid_chars.
        (cfgroot_component): Initialize dynamic_configs and found_dynamic_config
.
        Add virtual attributes dynamic-config! and lookup-dynamic-config!. Add
        attribute found-dynamic-config.
        (dynamic_configurator_component): New class.
        (compConfigListTypes): Push back sid-control-dynamic-configurator.
        (compConfigCreate): Handle sid-control-dynamic-configurator.
        (compConfigDelete): Delete dynamic_configurator_component.
@
text
@<?xml version="1.0" ?>
<!DOCTYPE defcomplib SYSTEM "http://sources.redhat.com/sid/component.dtd">

<defcomplib lib="internal" dlsym="config_component_library">
  <defcomponent name="sid-control-cfgroot" type="concrete">

    <!-- pins -->
    <defpin name="run!" direction="in" values="any" behaviors="startup" />
    <defpin name="starting" direction="out" values="void" behaviors="main loop" />
    <defpin name="perform-activity" direction="out" values="void" behaviors="main loop" />
    <defpin name="stop!" direction="in" values="any" behaviors="main loop" />
    <defpin name="stopping" direction="out" values="void" behaviors="main loop" />
    
    
    <!-- attributes -->
    <defattribute name="config-file!" default="file name" behaviors="configuration" />
    <defattribute name="config-line!" default="any string" behaviors="configuration" />
    <defattribute name="config-file-history" category="register" default="file names" behaviors="configuration" />
    <defattribute name="verbose?" category="setting" default="boolean" values="false" behaviors="configuration, main loop" />
    <defattribute name="persistent?" category="setting" default="boolean" values="false" behaviors="main loop" />
    <defattribute name="auto-print?" category="setting" default="boolean" values="true" behaviors="main loop" />
    <defattribute name="state-snapshot" default="opaque string" behaviors="state save/restore" />
    <defattribute name="starting" category="pin" behaviors="main loop" />
    <defattribute name="running" category="register" default="boolean" behaviors="main loop" />
    <defattribute name="activity-count" category="register" default="number" behaviors="main loop" />
    <defattribute name="stop-code" category="register" default="number" behaviors="main loop" />
    <defattribute name="perform-activity" category="pin" behaviors="main loop" />
    <defattribute name="stop!" category="pin" behaviors="main loop" />
    <defattribute name="stopping" category="pin" behaviors="main loop" />
    <defattribute name="dynamic-config!"        default="config spec"   behaviors="configuration" />
    <defattribute name="lookup-dynamic-config!" default="config name"   behaviors="configuration" />
    <defattribute name="found-dynamic-config"   default="config string" behaviors="configuration" />
    
    <!-- relationships -->
    <defrelationship name="component-catalog-informees" behaviors="simulation startup" />
    
  </defcomponent>

  <synop>This component configures and executes a simulation run. This component also
    maintains a mapping of configuration names to configuration strings for use by the
    sid-control-dynamic-configurator components associated with each board.
  </synop>

  <func>
    <modelling>
      <p>
      This component encapsulates the configuration file parser
      and the simulation main loop.  It does not correspond to
      hardware.</p>

      <title>
      configuration file format</title>

      <p>The configuration file format is very simple, and the
      parser/lexer are minimal.  Each command in the configuration
      file maps to 1-3 <tt>sid::component</tt> API calls.  There is no
      application- or component-dependent logic.</p>


      <title>Grammar:</title>

      <code>cfg-file ::= cfg-line | cfg-file cfg-line</code>

      <code>cfg-line ::=
  load-cmd | new-cmd | connect-pin-cmd | disconnect-pin-cmd |
  connect-bus-cmd | disconnect-bus-cmd | set-cmd | relate-cmd | unrelate-cmd
      </code>

      <code>load-cmd ::= "load" file-name symbol-name
file-name ::= string
symbol-name ::= string
      </code>

      <p>Register a component library.  Load the shared library from
      the file named by the first string, or fall back to the sid
      mainline executable itself.  Look up a component_library symbol
      named by the second string.  Add all component type names to the
      catalog of types.  Its
      <tt>sid::component_library::list_component_types</tt> hook is
      called.  A compatibility magic value in the component library is
      tested.  If a filename omits a directory specification, then the
      installed location and a search path held in the
      <tt>SID_LIBRARY_PATH</tt> environment variable is searched for
      the library.  The library directory under that given by
      <tt>SID_EXEC_PREFIX</tt> environment variable (optionally set at
      sid installation time), or else the build-time
      <tt>--exec-prefix</tt>, is also searched.</p>

      <code>new-cmd ::= "new" type-name comp-name
type-name ::= string
comp-name ::= string
      </code>

      <p>Instantiate a new component.  The first string is the
      component type, as registered in a prior load-cmd.  The second
      string is the new component instance's nick-name.  The nicknames
      must be unique among those built by cfgroot.  The lucky winner's
      <tt>sid::component_library::create_component</tt> hook is
      called.</p>

      <code>connect-pin-cmd ::= "connect-pin" comp-name pin-name dir comp-name pin-name
dir ::= "-&gt;" | "&lt;-" | "&lt;-&gt;"
comp-name ::= string
pin-name ::= string
      </code>

      <p> Establish a new pin-to-pin connection between two
      components.  The component/pin to the left of the <tt>-&gt;</tt> or right
      of the <tt>&lt;-</tt> operator receives
      a<tt>sid::component::connect_pin</tt> call.  The other receives
	a <tt>sid::component::find_pin</tt> call.  If the <tt>&lt;-&gt;</tt>
      operator is specified, then establish two pin-to-pin links in
      opposite directions.</p>

      <code>
disconnect-pin-cmd ::= "disconnect-pin" comp-name pin-name dir comp-name pin-name
dir ::= "-&gt;" | "&lt;-" | "&lt;-&gt;"
comp-name ::= string
pin-name ::= string
</code>

      <p> Break an existing pin-to-pin connection between two
      components.  The component/pin to the left of the <tt>-&gt;</tt>
      or right of the <tt>&lt;-</tt> operator receives a
      <tt>sid::component::disconnect_pin</tt> call.  The other
      receives a <tt>sid::component::find_pin</tt> call.  If the
      <tt>&lt;-&gt;</tt> operator is specified, then the connection
      will be broken in both directions.</p>

      <code>connect-bus-cmd ::= "connect-bus" comp-name acc-name comp-name bus-name
comp-name ::= string
acc-name ::= string
bus-name ::= string
</code>

      <p>Establish a new accessor-to-bus connection between two
      components.  The left component receives a
      <tt>sid::component::connect_accessor</tt> call; the right
      component receives a <tt>sid::component::find_bus</tt> call.</p>

      <code>disconnect-bus-cmd ::= "disconnect-bus" comp-name acc-name comp-name bus-name
comp-name ::= string
acc-name ::= string
bus-name ::= string
</code>
      <p>Break an existing accessor-to-bus connection between two
      components.  The left component recevies a
      <tt>sid::component::disconnect_accessor</tt> call; the right
      component receives a <tt>sid::component::find_bus</tt> call.</p>

      <code>set-cmd ::= "set" comp-name attr-name attr-value
comp-name ::= string
attr-name ::= string
attr-value ::= string
</code>

      <p>Set the given attribute of the given component to the given
      value.  The component receives a
      <tt>sid::component::set_attribute_value</tt> call.</p>

      <code>relate-cmd ::= "relate" comp-name rel-name comp-name
comp-name ::= string
rel-name ::= string
</code>

      <p>Add the second named component to the named component
      relationship set for the first given component.  The first
      component receives a <tt>sid::component::relate</tt> call.</p>

      <code>unrelate-cmd ::= "unrelate" comp-name rel-name comp-name
comp-name ::= string
rel-name ::= string
</code>

      <p>Remove the second named component from the named component
      relationship set for the first given component.  The first
      component receives a <tt>sid::component::unrelate</tt> call.</p>


      <title>Lexer issues:</title>

      <p>A string is a white-space-separated sequence of printable (
      <tt>isprint()</tt>) characters.  If started with double-quotes,
      all characters between opening and closing quotes are included
      in the string.  Embedded lexer control characters ('<tt>\</tt>'
      and '<tt>"</tt>') may be escaped by a '<tt>\</tt>' prefix.
      "<tt>\n</tt>" is interpreted as a C++ <tt>\n</tt>.  (What other
      escape sequences are worth supporting?)</p>

      <p>A "<tt>#</tt>" character found where a string is expected is
      interpreted as a comment to end-of-line, and the search for the
      next string found is returned instead.</p>



    </modelling>

    <behavior name="configuration">

      <p>
      When the 
	<attribute>config-file!</attribute> attribute is written to, the value is
      interpreted as a file name, and processed as a configuration
      file.  The name of the file is appended to a history list,
      which is accessible as the read-only attribute 
	<attribute>config-file-history</attribute>.</p>

      <p>
      The format of the configuration file is described in the
      APPENDIX below.  As each line is read, the appropriate component
      API functions are called.  In case of any failure, a message is
      printed to standard error, and a failure result code will be
      returned from the <tt>set_attribute_value</tt> call.</p>

      <p>
      If the <attribute>auto-print?</attribute> attribute is set to a
      true value, then as each component instance is created, all its
      attributes in the <tt>auto-print</tt> category will be queried
      and printed to standard output.</p>

      <p>
      The effects of multiple writes to the
      <attribute>config-file!</attribute> attribute are cumulative.
      The <tt>sid-control-cfgroot</tt> component is always implicitly
      present with the component name <tt>main</tt>.  If the
      <attribute>verbose?</attribute> attribute is set, some tracing
      messages are printed during configuration.</p>

      <p>
      When the <attribute>config-line!</attribute> attribute is
      written to, the supplied value is interpreted as a single
      configuration command and executed, as if that value was written
      to a file, and the file's name supplied to the
      <attribute>config-file!</attribute> attribute.</p>

      <p>
      When the 
	<attribute>dynamic-config!</attribute> attribute is written to, the value is
      interpreted as a configuration spec of the form NAME:CONFIG_STRING[|NAME:CONFIG_STRING]*.
      Each CONFIG_STRING is then associated with the given NAME.</p>

      <p>
      When the 
	<attribute>lookup-dynamic-config!</attribute> attribute is written to, the value is
      interpreted as a name previously associated with a config string via the 
      <attribute>dynamic-config!</attribute> attribute.  The associated configuration
      string is then made available via the <attribute>found-dynamic-config</attribute> attribute.</p>

    </behavior>

    <behavior name="startup">

      <p>
      When the <pin>run!</pin> pin is driven, the simulation top level
      loop begins. This process has several stages.  </p>

      <p>
      First, all components registered in the
	<relationship>component-catalog-informees</relationship> relationship are given the
      then-current list of components.  This is done by setting a
      number of individual component relationships for every informee.
      Each relationship contains a single instantiated component
      pointer, and has the name constructed as "TYPE NAME", as
      appropriate for that component.</p>

      <p>
      Immediately after this, the simulation main loop behavior takes
      over.  Only after that main loop is finished will control return
      to the function that sent the <pin>run!</pin> signal to this
      component.</p>

    </behavior>

    <behavior name="main loop">
      The main loop has two levels.  An infinite outer loop remains
      active as long as the
      <attribute>persistent?</attribute> attribute is set to a
      boolean
      <tt>true</tt> value.  

      The body of this loop performs a sequence of steps.  First, it
      drives the <pin>starting</pin> output pin.  Then, it enters the
      inner main loop.  At the start of this loop, the
      <attribute>running</attribute> attribute is set to boolean
      <tt>true</tt>.  In the loop, the
      <attribute>activity-count</attribute> attribute is incremented,
      and the <pin> perform-activity</pin> output pin is repeatedly
      driven.  This loop runs until the <pin>stop!</pin> input pin is
      driven.  (This could happen during the initial
      <pin>starting</pin> signal, in which case this inner loop will
      not be entered at all.)  The value driven on the <pin>stop!</pin>
      is stored in the <attribute>stop-code</attribute> attribute.
      After the inner loop exits, the <pin>stopping</pin> output pin is driven.
    </behavior>

    <convention name="supervisory" supported="true"/>
    <convention name="save/restore" supported="true">state is minimal.</convention>
    <convention name="triggerpoints" supported="false"/>

    <convention name="recursion-inhibit" supported="true">It prevents
      harmful recursion from the <pin>run!</pin> input pin.
    </convention>

    <convention name="categories" supported="true">
      It presents attributes in the <tt>setting</tt>, <tt>pin</tt>,
      and <tt>register</tt> categories.
    </convention>


  </func>
  <env>
  </env>

  
</defcomplib>
    


@


1.2
log
@2002-05-30  Frank Ch. Eigler  <fche@@redhat.com>

	* compConfig.cxx (stop): Store incoming code in new "stop-code"
	attribute.
	* sid-control-cfgroot.xml: Document this.
	* sid-control-cfgroot.txt: Regenerated.
@
text
@d30 3
a32 1
    
d39 3
a41 1
  <synop>This component configures and executes a simulation run.
d236 13
@


1.1
log
@* new XML documentation.
* ChangeLog entries to follow later.
@
text
@d26 1
d274 3
a276 2
      not be entered at all.)  After the inner loop exits, the
      <pin>stopping</pin> output pin is driven.
@

