head	1.4;
access;
symbols
	sid-snapshot-20180601:1.4
	sid-snapshot-20180501:1.4
	sid-snapshot-20180401:1.4
	sid-snapshot-20180301:1.4
	sid-snapshot-20180201:1.4
	sid-snapshot-20180101:1.4
	sid-snapshot-20171201:1.4
	sid-snapshot-20171101:1.4
	sid-snapshot-20171001:1.4
	sid-snapshot-20170901:1.4
	sid-snapshot-20170801:1.4
	sid-snapshot-20170701:1.4
	sid-snapshot-20170601:1.4
	sid-snapshot-20170501:1.4
	sid-snapshot-20170401:1.4
	sid-snapshot-20170301:1.4
	sid-snapshot-20170201:1.4
	sid-snapshot-20170101:1.4
	sid-snapshot-20161201:1.4
	sid-snapshot-20161101:1.4
	sid-snapshot-20160901:1.4
	sid-snapshot-20160801:1.4
	sid-snapshot-20160701:1.4
	sid-snapshot-20160601:1.4
	sid-snapshot-20160501:1.4
	sid-snapshot-20160401:1.4
	sid-snapshot-20160301:1.4
	sid-snapshot-20160201:1.4
	sid-snapshot-20160101:1.4
	sid-snapshot-20151201:1.4
	sid-snapshot-20151101:1.4
	sid-snapshot-20151001:1.4
	sid-snapshot-20150901:1.4
	sid-snapshot-20150801:1.4
	sid-snapshot-20150701:1.4
	sid-snapshot-20150601:1.4
	sid-snapshot-20150501:1.4
	sid-snapshot-20150401:1.4
	sid-snapshot-20150301:1.4
	sid-snapshot-20150201:1.4
	sid-snapshot-20150101:1.4
	sid-snapshot-20141201:1.4
	sid-snapshot-20141101:1.4
	sid-snapshot-20141001:1.4
	sid-snapshot-20140901:1.4
	sid-snapshot-20140801:1.4
	sid-snapshot-20140701:1.4
	sid-snapshot-20140601:1.4
	sid-snapshot-20140501:1.4
	sid-snapshot-20140401:1.4
	sid-snapshot-20140301:1.4
	sid-snapshot-20140201:1.4
	sid-snapshot-20140101:1.4
	sid-snapshot-20131201:1.4
	sid-snapshot-20131101:1.4
	sid-snapshot-20131001:1.4
	sid-snapshot-20130901:1.4
	sid-snapshot-20130801:1.4
	sid-snapshot-20130701:1.4
	sid-snapshot-20130601:1.4
	sid-snapshot-20130501:1.4
	sid-snapshot-20130401:1.4
	sid-snapshot-20130301:1.4
	sid-snapshot-20130201:1.4
	sid-snapshot-20130101:1.4
	sid-snapshot-20121201:1.4
	sid-snapshot-20121101:1.4
	sid-snapshot-20121001:1.4
	sid-snapshot-20120901:1.4
	sid-snapshot-20120801:1.4
	sid-snapshot-20120701:1.4
	sid-snapshot-20120601:1.4
	sid-snapshot-20120501:1.4
	sid-snapshot-20120401:1.4
	sid-snapshot-20120301:1.4
	sid-snapshot-20120201:1.4
	sid-snapshot-20120101:1.4
	sid-snapshot-20111201:1.4
	sid-snapshot-20111101:1.4
	sid-snapshot-20111001:1.4
	sid-snapshot-20110901:1.4
	sid-snapshot-20110801:1.4
	sid-snapshot-20110701:1.4
	sid-snapshot-20110601:1.4
	sid-snapshot-20110501:1.4
	sid-snapshot-20110401:1.4
	sid-snapshot-20110301:1.4
	sid-snapshot-20110201:1.4
	sid-snapshot-20110101:1.4
	sid-snapshot-20101201:1.4
	sid-snapshot-20101101:1.4
	sid-snapshot-20101001:1.4
	sid-snapshot-20100901:1.4
	sid-snapshot-20100801:1.4
	sid-snapshot-20100701:1.4
	sid-snapshot-20100601:1.4
	sid-snapshot-20100501:1.4
	sid-snapshot-20100401:1.4
	sid-snapshot-20100301:1.4
	sid-snapshot-20100201:1.4
	sid-snapshot-20100101:1.4
	sid-snapshot-20091201:1.4
	sid-snapshot-20091101:1.4
	sid-snapshot-20091001:1.4
	sid-snapshot-20090901:1.4
	sid-snapshot-20090801:1.4
	sid-snapshot-20090701:1.4
	sid-snapshot-20090601:1.4
	sid-snapshot-20090501:1.4
	sid-snapshot-20090401:1.4
	sid-snapshot-20090301:1.4
	sid-snapshot-20090201:1.4
	sid-snapshot-20090101:1.4
	sid-snapshot-20081201:1.4
	sid-snapshot-20081101:1.4
	sid-snapshot-20081001:1.4
	sid-snapshot-20080901:1.4
	sid-snapshot-20080801:1.4
	sid-snapshot-20080701:1.4
	sid-snapshot-20080601:1.4
	sid-snapshot-20080501:1.4
	sid-snapshot-20080403:1.4
	sid-snapshot-20080401:1.4
	sid-snapshot-20080301:1.4
	sid-snapshot-20080201:1.4
	sid-snapshot-20080101:1.4
	sid-snapshot-20071201:1.4
	sid-snapshot-20071101:1.4
	sid-snapshot-20071001:1.4
	sid-20020905-branchpoint:1.3
	sid-20020905-branch:1.3.0.2
	cygnus_cvs_20020108_pre:1.2;
locks; strict;
comment	@# @;


1.4
date	2005.08.19.19.39.07;	author brolley;	state Exp;
branches;
next	1.3;

1.3
date	2002.05.30.15.23.59;	author fche;	state Exp;
branches;
next	1.2;

1.2
date	2001.08.03.01.30.15;	author bje;	state Exp;
branches;
next	1.1;

1.1
date	2000.12.07.19.30.46;	author fche;	state Exp;
branches;
next	;


desc
@@


1.4
log
@2005-08-19  Dave Brolley  <brolley@@redhat.com>

        * Contribute these changes:

        2005-07-13  Dave Brolley  <brolley@@redhat.com>

        * compConfig.cxx (new_config_pin): Removed from
        dynamic_configurator_component.
        (clients): Added to dynamic_configurator_component.
        (dynamic_configurator_component): Remove new-config pin. Add
        clients as a multi relation.
        (step_pin_handler): Set the configure! attribute of each component
        related via the client relationship.
        (do_configure): Set config_names[0] and config_specs[0] if the
        handle is zero.
        * sid-control-dynamic-configurator.xml: Document the removal of the
        new-config pin and the addition of the clients relationship.
        * sid-control-dynamic-configurator.txt: Regenerated.

        2005-07-05  Dave Brolley  <brolley@@redhat.com>

        * compConfig.cxx (reset_pin_handler): New method of
        dynamic_configurator_component.
        (set_start_config): Likewise.
        (reset): Likewise.
        (reset_pin): New member of dynamic_configurator_component.
        (config_error_pin): Likewise.
        (dynamic_configurator_component): Initialize current_config, prev_config
        and prev_user_config in the reset method. Add "start-config" attribute.
        Add "reset" and "config-error" pins.
        (configure): Check result of do_configure. Drive config_error_pin if not
        ok.
        (configure_pin_handler): Drive config_error_pin if the handle is not
        valid.
        * sid-control-dynamic-configurator.xml: Document the "config-error" and
"reset"
        pins
        * sid-control-dynamic-configurator.txt: Regenerated.

        2005-06-21  Dave Brolley  <brolley@@redhat.com>

        * compConfig.cxx (step_pin_handler): Always drive new_config_pin.

        2005-06-06  Dave Brolley  <brolley@@redhat.com>

        * Makefile.am (pkgdata_DATA): Add sid-control-dynamic-configurator.txt.
        * Makefile.in: Regenerated.
        * compConfig.cxx (cfgroot_component::configure): Renamed to
        configure_file.
        (restore_config,set_syscall_config,check_config_change): New methods of
        dynamic_configurator_component.
        (in_function): Likewise.
        (prev_user_config): New member of dynamic_configurator_component.
        (dynamic_configurator_component): Prime the config_stack with a dummy
        entry.
        (add_warmup_functions): Tokenize based on ",".
        (add_profile_functions): Move on to the next spec on parse error.
        (dynamic_configurator_component::configure): Drive config_result_pin wit
h
        prev_user_config. Call set_syscall_config and check_config_change.
        (do_configure): Don't drive the config_result_pin here. Don't drive the
        step_control_pin here. Duplicate the first stack entry for the first
        config in the dummy entry of the stack. Now takes a reference to a
        config handle.
        (configure_pin_handler): Drive the config_result_pin with prev_user_conf
ig.
        Call restore_config, sys_syscall_config and check_config_change.
        (function_callee_pin_handler): Always use sid-internal-warmup for _Sid_c
onfig.
        (function_return_pin_handler): Return if the loader can't identify the c
urrent
        function. Call restore_config and check_config_change.
        * sid-control-dynamic-configurator.txt: New file.
        * sid-control-dynamic-configurator.xml: New file.

        2005-05-29  Dave Brolley  <brolley@@redhat.com>

        * compConfig.cxx (std::pair,sidutil::tokenize): Add using clause for the
se.
        (dynamic_config,lookup_dynamic_config): New methods of cfgroot_component
.
        (dynamic_configs,found_dynamic_config): New members of cfgroot_component
.
        (configure_line): Initialize num_invalid_chars.
        (cfgroot_component): Initialize dynamic_configs and found_dynamic_config
.
        Add virtual attributes dynamic-config! and lookup-dynamic-config!. Add
        attribute found-dynamic-config.
        (dynamic_configurator_component): New class.
        (compConfigListTypes): Push back sid-control-dynamic-configurator.
        (compConfigCreate): Handle sid-control-dynamic-configurator.
        (compConfigDelete): Delete dynamic_configurator_component.
@
text
@           sid-control-cfgroot (internal :: config_component_library)

Synopsis:

   This component configures and executes a simulation run. This component
   also maintains a mapping of configuration names to configuration strings
   for use by the sid-control-dynamic-configurator components associated with
   each board.

     ----------------------------------------------------------------------

Functionality:

  Modelling:

   This component encapsulates the configuration file parser and the
   simulation main loop. It does not correspond to hardware.

   configuration file format

   The configuration file format is very simple, and the parser/lexer are
   minimal. Each command in the configuration file maps to 1-3 sid::component
   API calls. There is no application- or component-dependent logic.

   Grammar:

 cfg-file ::= cfg-line | cfg-file cfg-line

 cfg-line ::=
   load-cmd | new-cmd | connect-pin-cmd | disconnect-pin-cmd |
   connect-bus-cmd | disconnect-bus-cmd | set-cmd | relate-cmd | unrelate-cmd
      

 load-cmd ::= "load" file-name symbol-name
 file-name ::= string
 symbol-name ::= string
      

   Register a component library. Load the shared library from the file named
   by the first string, or fall back to the sid mainline executable itself.
   Look up a component_library symbol named by the second string. Add all
   component type names to the catalog of types. Its
   sid::component_library::list_component_types hook is called. A
   compatibility magic value in the component library is tested. If a
   filename omits a directory specification, then the installed location and
   a search path held in the SID_LIBRARY_PATH environment variable is
   searched for the library. The library directory under that given by
   SID_EXEC_PREFIX environment variable (optionally set at sid installation
   time), or else the build-time --exec-prefix, is also searched.

 new-cmd ::= "new" type-name comp-name
 type-name ::= string
 comp-name ::= string
      

   Instantiate a new component. The first string is the component type, as
   registered in a prior load-cmd. The second string is the new component
   instance's nick-name. The nicknames must be unique among those built by
   cfgroot. The lucky winner's sid::component_library::create_component hook
   is called.

 connect-pin-cmd ::= "connect-pin" comp-name pin-name dir comp-name pin-name
 dir ::= "->" | "<-" | "<->"
 comp-name ::= string
 pin-name ::= string
      

   Establish a new pin-to-pin connection between two components. The
   component/pin to the left of the -> or right of the <- operator receives
   asid::component::connect_pin call. The other receives a
   sid::component::find_pin call. If the <-> operator is specified, then
   establish two pin-to-pin links in opposite directions.

 disconnect-pin-cmd ::= "disconnect-pin" comp-name pin-name dir comp-name pin-name
 dir ::= "->" | "<-" | "<->"
 comp-name ::= string
 pin-name ::= string

   Break an existing pin-to-pin connection between two components. The
   component/pin to the left of the -> or right of the <- operator receives a
   sid::component::disconnect_pin call. The other receives a
   sid::component::find_pin call. If the <-> operator is specified, then the
   connection will be broken in both directions.

 connect-bus-cmd ::= "connect-bus" comp-name acc-name comp-name bus-name
 comp-name ::= string
 acc-name ::= string
 bus-name ::= string

   Establish a new accessor-to-bus connection between two components. The
   left component receives a sid::component::connect_accessor call; the right
   component receives a sid::component::find_bus call.

 disconnect-bus-cmd ::= "disconnect-bus" comp-name acc-name comp-name bus-name
 comp-name ::= string
 acc-name ::= string
 bus-name ::= string

   Break an existing accessor-to-bus connection between two components. The
   left component recevies a sid::component::disconnect_accessor call; the
   right component receives a sid::component::find_bus call.

 set-cmd ::= "set" comp-name attr-name attr-value
 comp-name ::= string
 attr-name ::= string
 attr-value ::= string

   Set the given attribute of the given component to the given value. The
   component receives a sid::component::set_attribute_value call.

 relate-cmd ::= "relate" comp-name rel-name comp-name
 comp-name ::= string
 rel-name ::= string

   Add the second named component to the named component relationship set for
   the first given component. The first component receives a
   sid::component::relate call.

 unrelate-cmd ::= "unrelate" comp-name rel-name comp-name
 comp-name ::= string
 rel-name ::= string

   Remove the second named component from the named component relationship
   set for the first given component. The first component receives a
   sid::component::unrelate call.

   Lexer issues:

   A string is a white-space-separated sequence of printable ( isprint())
   characters. If started with double-quotes, all characters between opening
   and closing quotes are included in the string. Embedded lexer control
   characters ('\' and '"') may be escaped by a '\' prefix. "\n" is
   interpreted as a C++ \n. (What other escape sequences are worth
   supporting?)

   A "#" character found where a string is expected is interpreted as a
   comment to end-of-line, and the search for the next string found is
   returned instead.

   +-----------------------------------------------------------+
   |                         Behaviors                         |
   |-----------------------------------------------------------|
   |configuration|When the config-file! attribute is written   |
   |             |to, the value is interpreted as a file name, |
   |             |and processed as a configuration file. The   |
   |             |name of the file is appended to a history    |
   |             |list, which is accessible as the read-only   |
   |             |attribute config-file-history.               |
   |             |                                             |
   |             |The format of the configuration file is      |
   |             |described in the APPENDIX below. As each line|
   |             |is read, the appropriate component API       |
   |             |functions are called. In case of any failure,|
   |             |a message is printed to standard error, and a|
   |             |failure result code will be returned from the|
   |             |set_attribute_value call.                    |
   |             |                                             |
   |             |If the auto-print? attribute is set to a true|
   |             |value, then as each component instance is    |
   |             |created, all its attributes in the auto-print|
   |             |category will be queried and printed to      |
   |             |standard output.                             |
   |             |                                             |
   |             |The effects of multiple writes to the        |
   |             |config-file! attribute are cumulative. The   |
   |             |sid-control-cfgroot component is always      |
   |             |implicitly present with the component name   |
   |             |main. If the verbose? attribute is set, some |
   |             |tracing messages are printed during          |
   |             |configuration.                               |
   |             |                                             |
   |             |When the config-line! attribute is written   |
   |             |to, the supplied value is interpreted as a   |
   |             |single configuration command and executed, as|
   |             |if that value was written to a file, and the |
   |             |file's name supplied to the config-file!     |
   |             |attribute.                                   |
   |             |                                             |
   |             |When the dynamic-config! attribute is written|
   |             |to, the value is interpreted as a            |
   |             |configuration spec of the form               |
   |             |NAME:CONFIG_STRING[|NAME:CONFIG_STRING]*.    |
   |             |Each CONFIG_STRING is then associated with   |
   |             |the given NAME.                              |
   |             |                                             |
   |             |When the lookup-dynamic-config! attribute is |
   |             |written to, the value is interpreted as a    |
   |             |name previously associated with a config     |
   |             |string via the dynamic-config! attribute. The|
   |             |associated configuration string is then made |
   |             |available via the found-dynamic-config       |
   |             |attribute.                                   |
   |-------------+---------------------------------------------|
   |      startup|When the run! pin is driven, the simulation  |
   |             |top level loop begins. This process has      |
   |             |several stages.                              |
   |             |                                             |
   |             |First, all components registered in the      |
   |             |component-catalog-informees relationship are |
   |             |given the then-current list of components.   |
   |             |This is done by setting a number of          |
   |             |individual component relationships for every |
   |             |informee. Each relationship contains a single|
   |             |instantiated component pointer, and has the  |
   |             |name constructed as "TYPE NAME", as          |
   |             |appropriate for that component.              |
   |             |                                             |
   |             |Immediately after this, the simulation main  |
   |             |loop behavior takes over. Only after that    |
   |             |main loop is finished will control return to |
   |             |the function that sent the run! signal to    |
   |             |this component.                              |
   |-------------+---------------------------------------------|
   |    main loop|The main loop has two levels. An infinite    |
   |             |outer loop remains active as long as the     |
   |             |persistent? attribute is set to a boolean    |
   |             |true value. The body of this loop performs a |
   |             |sequence of steps. First, it drives the      |
   |             |starting output pin. Then, it enters the     |
   |             |inner main loop. At the start of this loop,  |
   |             |the running attribute is set to boolean true.|
   |             |In the loop, the activity-count attribute is |
   |             |incremented, and the perform-activity output |
   |             |pin is repeatedly driven. This loop runs     |
   |             |until the stop! input pin is driven. (This   |
   |             |could happen during the initial starting     |
   |             |signal, in which case this inner loop will   |
   |             |not be entered at all.) The value driven on  |
   |             |the stop! is stored in the stop-code         |
   |             |attribute. After the inner loop exits, the   |
   |             |stopping output pin is driven.               |
   +-----------------------------------------------------------+

   +----------------------------------------------------+
   |                  SID Conventions                   |
   |----------------------------------------------------|
   |        supervisory|supported  |-                   |
   |-------------------+-----------+--------------------|
   |       save/restore|supported  |-                   |
   |-------------------+-----------+--------------------|
   |      triggerpoints|not        |-                   |
   |                   |supported  |                    |
   |-------------------+-----------+--------------------|
   |  recursion-inhibit|supported  |run!                |
   |-------------------+-----------+--------------------|
   |         categories|supported  |settingpinregister  |
   +----------------------------------------------------+

     ----------------------------------------------------------------------

Environment:

     ----------------------------------------------------------------------

Component Reference:

  Component: sid-control-cfgroot

   +--------------------------------------------------------+
   |                          pins                          |
   |--------------------------------------------------------|
   |       name       | direction | legalvalues | behaviors |
   |------------------+-----------+-------------+-----------|
   |run!              |in         |-            |startup    |
   |------------------+-----------+-------------+-----------|
   |starting          |out        |-            |main loop  |
   |------------------+-----------+-------------+-----------|
   |perform-activity  |out        |-            |main loop  |
   |------------------+-----------+-------------+-----------|
   |stop!             |in         |-            |main loop  |
   |------------------+-----------+-------------+-----------|
   |stopping          |out        |-            |main loop  |
   +--------------------------------------------------------+

   +------------------------------------------------------------------------+
   |                               attributes                               |
   |------------------------------------------------------------------------|
   |         name         |category|legal |default|       behaviors        ||
   |                      |        |values| value |                        ||
   |----------------------+--------+------+-------+------------------------||
   |config-file!          |-       |-     |-      |configuration           ||
   |----------------------+--------+------+-------+------------------------||
   |config-line!          |-       |-     |-      |configuration           ||
   |----------------------+--------+------+-------+------------------------||
   |config-file-history   |register|-     |-      |configuration           ||
   |----------------------+--------+------+-------+------------------------||
   |verbose?              |setting |-     |-      |configuration, main loop||
   |----------------------+--------+------+-------+------------------------||
   |persistent?           |setting |-     |-      |main loop               ||
   |----------------------+--------+------+-------+------------------------||
   |auto-print?           |setting |-     |-      |main loop               ||
   |----------------------+--------+------+-------+------------------------||
   |state-snapshot        |-       |-     |-      |state save/restore      ||
   |----------------------+--------+------+-------+------------------------||
   |starting              |pin     |-     |-      |main loop               ||
   |----------------------+--------+------+-------+------------------------||
   |running               |register|-     |-      |main loop               ||
   |----------------------+--------+------+-------+------------------------||
   |activity-count        |register|-     |-      |main loop               ||
   |----------------------+--------+------+-------+------------------------||
   |stop-code             |register|-     |-      |main loop               ||
   |----------------------+--------+------+-------+------------------------||
   |perform-activity      |pin     |-     |-      |main loop               ||
   |----------------------+--------+------+-------+------------------------||
   |stop!                 |pin     |-     |-      |main loop               ||
   |----------------------+--------+------+-------+------------------------||
   |stopping              |pin     |-     |-      |main loop               ||
   |----------------------+--------+------+-------+------------------------||
   |dynamic-config!       |-       |-     |-      |configuration           ||
   |----------------------+--------+------+-------+------------------------||
   |lookup-dynamic-config!|-       |-     |-      |configuration           ||
   |----------------------+--------+------+-------+------------------------||
   |found-dynamic-config  |-       |-     |-      |configuration           ||
   +------------------------------------------------------------------------+
@


1.3
log
@2002-05-30  Frank Ch. Eigler  <fche@@redhat.com>

	* compConfig.cxx (stop): Store incoming code in new "stop-code"
	attribute.
	* sid-control-cfgroot.xml: Document this.
	* sid-control-cfgroot.txt: Regenerated.
@
text
@d5 4
a8 1
   This component configures and executes a simulation run.
d140 108
a247 121
   +-------------------------------------------------+
   |                    Behaviors                    |
   |-------------------------------------------------|
   | configuration | When the config-file! attribute |
   |               | is written to, the value is     |
   |               | interpreted as a file name, and |
   |               | processed as a configuration    |
   |               | file. The name of the file is   |
   |               | appended to a history list,     |
   |               | which is accessible as the      |
   |               | read-only attribute             |
   |               | config-file-history.            |
   |               |                                 |
   |               | The format of the configuration |
   |               | file is described in the        |
   |               | APPENDIX below. As each line is |
   |               | read, the appropriate component |
   |               | API functions are called. In    |
   |               | case of any failure, a message  |
   |               | is printed to standard error,   |
   |               | and a failure result code will  |
   |               | be returned from the            |
   |               | set_attribute_value call.       |
   |               |                                 |
   |               | If the auto-print? attribute is |
   |               | set to a true value, then as    |
   |               | each component instance is      |
   |               | created, all its attributes in  |
   |               | the auto-print category will be |
   |               | queried and printed to standard |
   |               | output.                         |
   |               |                                 |
   |               | The effects of multiple writes  |
   |               | to the config-file! attribute   |
   |               | are cumulative. The             |
   |               | sid-control-cfgroot component   |
   |               | is always implicitly present    |
   |               | with the component name main.   |
   |               | If the verbose? attribute is    |
   |               | set, some tracing messages are  |
   |               | printed during configuration.   |
   |               |                                 |
   |               | When the config-line! attribute |
   |               | is written to, the supplied     |
   |               | value is interpreted as a       |
   |               | single configuration command    |
   |               | and executed, as if that value  |
   |               | was written to a file, and the  |
   |               | file's name supplied to the     |
   |               | config-file! attribute.         |
   |---------------+---------------------------------|
   |       startup | When the run! pin is driven,    |
   |               | the simulation top level loop   |
   |               | begins. This process has        |
   |               | several stages.                 |
   |               |                                 |
   |               | First, all components           |
   |               | registered in the               |
   |               | component-catalog-informees     |
   |               | relationship are given the      |
   |               | then-current list of            |
   |               | components. This is done by     |
   |               | setting a number of individual  |
   |               | component relationships for     |
   |               | every informee. Each            |
   |               | relationship contains a single  |
   |               | instantiated component pointer, |
   |               | and has the name constructed as |
   |               | "TYPE NAME", as appropriate for |
   |               | that component.                 |
   |               |                                 |
   |               | Immediately after this, the     |
   |               | simulation main loop behavior   |
   |               | takes over. Only after that     |
   |               | main loop is finished will      |
   |               | control return to the function  |
   |               | that sent the run! signal to    |
   |               | this component.                 |
   |---------------+---------------------------------|
   |     main loop | The main loop has two levels.   |
   |               | An infinite outer loop remains  |
   |               | active as long as the           |
   |               | persistent? attribute is set to |
   |               | a boolean true value. The body  |
   |               | of this loop performs a         |
   |               | sequence of steps. First, it    |
   |               | drives the starting output pin. |
   |               | Then, it enters the inner main  |
   |               | loop. At the start of this      |
   |               | loop, the running attribute is  |
   |               | set to boolean true. In the     |
   |               | loop, the activity-count        |
   |               | attribute is incremented, and   |
   |               | the perform-activity output pin |
   |               | is repeatedly driven. This loop |
   |               | runs until the stop! input pin  |
   |               | is driven. (This could happen   |
   |               | during the initial starting     |
   |               | signal, in which case this      |
   |               | inner loop will not be entered  |
   |               | at all.) The value driven on    |
   |               | the stop! is stored in the      |
   |               | stop-code attribute. After the  |
   |               | inner loop exits, the stopping  |
   |               | output pin is driven.           |
   +-------------------------------------------------+

   +-------------------------------------------------+
   |                 SID Conventions                 |
   |-------------------------------------------------|
   |      supervisory|supported   |-                 |
   |-----------------+------------+------------------|
   |     save/restore|supported   |-                 |
   |-----------------+------------+------------------|
   |    triggerpoints|not         |-                 |
   |                 |supported   |                  |
   |-----------------+------------+------------------|
   |recursion-inhibit|supported   |run!              |
   |-----------------+------------+------------------|
   |       categories|supported   |settingpinregister|
   +-------------------------------------------------+
d259 56
a314 52
   +-------------------------------------------------+
   |                      pins                       |
   |-------------------------------------------------|
   |      name       |direction|legalvalues|behaviors|
   |-----------------+---------+-----------+---------|
   |run!             |in       |-          |startup  |
   |-----------------+---------+-----------+---------|
   |starting         |out      |-          |main loop|
   |-----------------+---------+-----------+---------|
   |perform-activity |out      |-          |main loop|
   |-----------------+---------+-----------+---------|
   |stop!            |in       |-          |main loop|
   |-----------------+---------+-----------+---------|
   |stopping         |out      |-          |main loop|
   +-------------------------------------------------+

   +-----------------------------------------------------------+
   |                        attributes                         |
   |-----------------------------------------------------------|
   |       name        |category|legal |default|  behaviors   ||
   |                   |        |values| value |              ||
   |-------------------+--------+------+-------+--------------||
   |config-file!       |-       |-     |-      |configuration ||
   |-------------------+--------+------+-------+--------------||
   |config-line!       |-       |-     |-      |configuration ||
   |-------------------+--------+------+-------+--------------||
   |config-file-history|register|-     |-      |configuration ||
   |-------------------+--------+------+-------+--------------||
   |verbose?           |setting |-     |-      |configuration,||
   |                   |        |      |       |main loop     ||
   |-------------------+--------+------+-------+--------------||
   |persistent?        |setting |-     |-      |main loop     ||
   |-------------------+--------+------+-------+--------------||
   |auto-print?        |setting |-     |-      |main loop     ||
   |-------------------+--------+------+-------+--------------||
   |state-snapshot     |-       |-     |-      |state         ||
   |                   |        |      |       |save/restore  ||
   |-------------------+--------+------+-------+--------------||
   |starting           |pin     |-     |-      |main loop     ||
   |-------------------+--------+------+-------+--------------||
   |running            |register|-     |-      |main loop     ||
   |-------------------+--------+------+-------+--------------||
   |activity-count     |register|-     |-      |main loop     ||
   |-------------------+--------+------+-------+--------------||
   |stop-code          |register|-     |-      |main loop     ||
   |-------------------+--------+------+-------+--------------||
   |perform-activity   |pin     |-     |-      |main loop     ||
   |-------------------+--------+------+-------+--------------||
   |stop!              |pin     |-     |-      |main loop     ||
   |-------------------+--------+------+-------+--------------||
   |stopping           |pin     |-     |-      |main loop     ||
   +-----------------------------------------------------------+
@


1.2
log
@* Freshly generated documentation.
* ChangeLog entries to follow later.
@
text
@d237 5
a241 3
   |               | at all.) After the inner loop   |
   |               | exits, the stopping output pin  |
   |               | is driven.                      |
d312 2
@


1.1
log
@* public snapshot of sid simulator
@
text
@d1 1
a1 2
* Name
  sid-control-cfgroot
d3 1
a3 2
* Synopsis
  This component configures and executes a simulation run.
d5 312
a316 234
  Pins: run! starting perform-activity stop! stopping
  Attributes: verbose? config-file! config-line! persistent? state-snapshot
	running starting perform-activity stop! stopping auto-print?
	config-file-history activity-count
  Relationships: component-catalog-informees

  Shared library: (not available)
  Symbol: config_component_library

* Functionality
 
  - Modelling
    * This component encapsulates the configuration file parser
      and the simulation main loop.  It does not correspond to
      hardware.

  - Behaviors
    * Configuration

      When the "config-file!" attribute is written to, the value is
      interpreted as a file name, and processed as a configuration
      file.  The name of the file is appended to a history list,
      which is accessible as the read-only attribute "config-file-history".

      The format of the configuration file is described in the APPENDIX
      below.  As each line is read, the appropriate component API
      functions are called.  In case of any failure, a message is
      printed to standard error, and a failure result code will be
      returned from the set_attribute_value call.

      If the "auto-print?" attribute is set to a true value, then as
      each component instance is created, all its attributes in the
      "auto-print" category will be queried and printed to standard
      output.

      The effects of multiple writes to the "config-file!" attribute
      are cumulative.  The sid-control-cfgroot component is always
      implicitly present with the component name "main".  If the
      "verbose?" attribute is set, some tracing messages are printed 
      during configuration.

      When the "config-line!" attribute is written to, the supplied
      value is interpreted as a single configuration command and
      executed, as if that value was written to a file, and the file's
      name supplied to the "config-file!" attribute.

    * Startup

      When the "run!" pin is driven, the simulation top level loop
      begins.  This process has several stages.  

      First, all components registered in the
      "component-catalog-informees" relationship are given the
      then-current list of components.  This is done by setting a
      number of individual component relationships for every informee.
      Each relationship contains a single instantiated component
      pointer, and has the name constructed as "TYPE NAME", as
      appropriate for that component.

      Immediately after this, the simulation main loop behavior takes
      over.  Only after that main loop is finished will control return
      to the function that sent the "run!" signal to this component.

    * Main loop

      The main loop has two levels.  An infinite outer loop remains
      active as long as the "persistent?" attribute is set to a
      boolean true value.  

      The body of this loop performs a sequence of steps.  First, it
      drives the "starting" output pin.  Then, it enters the inner
      main loop.  At the start of this loop, the "running" attribute
      is set to boolean true.  In the loop, the "activity-count"
      attribute is incremented, and the "perform-activity" output pin
      is repeatedly driven.  This loop runs until the "stop!" input
      pin is driven.  (This could happen during the initial "starting"
      signal, in which case this inner loop will not be entered at
      all.)  After the inner loop exits, the "stopping" output pin is
      driven.

  - SID conventions
    * This is a supervisory component.
    * It supports state save/restore, though state is minimal.
    * It does not support triggerpoints.
    * It prevents harmful recursion from the "run!" input pin.
    * It presents attributes in the "setting", "pin", and "register"
      categories.

* Environment
  - Related components

* SID interface reference
  - low level:
    * pins
      - run! | input | any | startup
      - starting | output | void | main loop
      - perform-activity | output | void | main loop
      - stop! | input | any | main loop
      - stopping | output | void | main loop

    * attributes
      - config-file! | | file name | n/a | configuration
      - config-line! | | any string | n/a | configuration
      - config-file-history | register | file names | n/a | configuration
      - verbose? | setting | boolean | false | configuration, main loop
      - persistent? | setting | boolean | false | main loop
      - auto-print? | setting | boolean | true | main loop
      - state-snapshot | | opaque string | n/a | state save/restore
      - starting | pin | n/a | n/a | main loop	
      - running | register | boolean | n/a | main loop
      - activity-count | register | number | n/a | main loop	
      - perform-activity | pin | n/a | n/a | main loop	
      - stop! | pin | n/a | n/a | main loop	
      - stopping | pin | n/a | n/a | main loop	

    * relationships
      - component-catalog-informees | simulation startup


APPENDIX: configuration file format

The configuration file format is very simple, and the parser/lexer are
minimal.  Each command in the configuration file maps to 1-3
sid::component API calls.  There is no application- or
component-dependent logic.


Grammar:

cfg-file ::= cfg-line | cfg-file cfg-line

cfg-line ::=
  load-cmd | new-cmd | connect-pin-cmd | disconnect-pin-cmd |
  connect-bus-cmd | disconnect-bus-cmd | set-cmd | relate-cmd | unrelate-cmd

load-cmd ::= "load" file-name symbol-name
file-name ::= string
symbol-name ::= string
  -- Register a component library.  Load the shared library from the
     file named by the first string, or fall back to the sid mainline
     executable itself.  Look up a component_library symbol named by
     the second string.  Add all component type names to the catalog
     of types.  Its sid::component_library::list_component_types hook is
     called.  A compatibility magic value in the component library is
     tested.  If a filename omits a directory specification, then the
     installed location and a search path held in the SID_LIBRARY_PATH
     environment variable is searched for the library.  The library
     directory under that given by SID_EXEC_PREFIX environment variable
     (optionally set at sid installation time), or else the build-time
     --exec-prefix, is also searched.

new-cmd ::= "new" type-name comp-name
type-name ::= string
comp-name ::= string
  -- Instantiate a new component.  The first string is the component
     type, as registered in a prior load-cmd.  The second string is the
     new component instance's nick-name.  The nicknames must be unique
     among those built by cfgroot.  The lucky winner's
     sid::component_library::create_component hook is called.

connect-pin-cmd ::= "connect-pin" comp-name pin-name dir comp-name pin-name
dir ::= "->" | "<-" | "<->"
comp-name ::= string
pin-name ::= string
  -- Establish a new pin-to-pin connection between two components.
     The component/pin to the left of the "->" or right of the "<-"
     operator receives a sid::component::connect_pin call.  The other
     receives a sid::component::find_pin call.  If the "<->" operator
     is specified, then establish two pin-to-pin links in opposite
     directions.

disconnect-pin-cmd ::= "disconnect-pin" comp-name pin-name dir
		       comp-name pin-name
dir ::= "->" | "<-" | "<->"
comp-name ::= string
pin-name ::= string
  -- Break an existing pin-to-pin connection between two components.
     The component/pin to the left of the "->" or right of the "<-"
     operator receives a sid::component::disconnect_pin call.  The
     other receives a sid::component::find_pin call.  If the "<->"
     operator is specified, then the connection will be broken in both
     directions.

connect-bus-cmd ::= "connect-bus" comp-name acc-name comp-name bus-name
comp-name ::= string
acc-name ::= string
bus-name ::= string
  -- Establish a new accessor-to-bus connection between two components.
     The left component receives a sid::component::connect_accessor call; the
     right component receives a sid::component::find_bus call.

disconnect-bus-cmd ::= "disconnect-bus" comp-name acc-name comp-name bus-name
comp-name ::= string
acc-name ::= string
bus-name ::= string
  -- Break an existing accessor-to-bus connection between two
     components.  The left component recevies a
     sid::component::disconnect_accessor call; the right component
     receives a sid::component::find_bus call.

set-cmd ::= "set" comp-name attr-name attr-value
comp-name ::= string
attr-name ::= string
attr-value ::= string
  -- Set the given attribute of the given component to the given value.
     The component receives a sid::component::set_attribute_value call.

relate-cmd ::= "relate" comp-name rel-name comp-name
comp-name ::= string
rel-name ::= string
  -- Add the second named component to the named component relationship
     set for the first given component.  The first component receives
     a sid::component::relate call.

unrelate-cmd ::= "unrelate" comp-name rel-name comp-name
comp-name ::= string
rel-name ::= string
  -- Remove the second named component from the named component relationship
     set for the first given component.  The first component receives
     a sid::component::unrelate call.


Lexer issues:

A string is a white-space-separated sequence of printable (isprint())
characters.  If started with double-quotes, all characters between
opening and closing quotes are included in the string.  Embedded lexer
control characters ('\' and '"') may be escaped by a '\' prefix.  "\n"
is interpreted as a C++ \n.  (What other escape sequences are worth
supporting?)

A "#" character found where a string is expected is interpreted as a
comment to end-of-line, and the search for the next string found is
returned instead.
@

