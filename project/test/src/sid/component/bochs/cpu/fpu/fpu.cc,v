head	1.1;
access;
symbols
	sid-snapshot-20180601:1.1
	sid-snapshot-20180501:1.1
	sid-snapshot-20180401:1.1
	sid-snapshot-20180301:1.1
	sid-snapshot-20180201:1.1
	sid-snapshot-20180101:1.1
	sid-snapshot-20171201:1.1
	sid-snapshot-20171101:1.1
	sid-snapshot-20171001:1.1
	sid-snapshot-20170901:1.1
	sid-snapshot-20170801:1.1
	sid-snapshot-20170701:1.1
	sid-snapshot-20170601:1.1
	sid-snapshot-20170501:1.1
	sid-snapshot-20170401:1.1
	sid-snapshot-20170301:1.1
	sid-snapshot-20170201:1.1
	sid-snapshot-20170101:1.1
	sid-snapshot-20161201:1.1
	sid-snapshot-20161101:1.1
	sid-snapshot-20160901:1.1
	sid-snapshot-20160801:1.1
	sid-snapshot-20160701:1.1
	sid-snapshot-20160601:1.1
	sid-snapshot-20160501:1.1
	sid-snapshot-20160401:1.1
	sid-snapshot-20160301:1.1
	sid-snapshot-20160201:1.1
	sid-snapshot-20160101:1.1
	sid-snapshot-20151201:1.1
	sid-snapshot-20151101:1.1
	sid-snapshot-20151001:1.1
	sid-snapshot-20150901:1.1
	sid-snapshot-20150801:1.1
	sid-snapshot-20150701:1.1
	sid-snapshot-20150601:1.1
	sid-snapshot-20150501:1.1
	sid-snapshot-20150401:1.1
	sid-snapshot-20150301:1.1
	sid-snapshot-20150201:1.1
	sid-snapshot-20150101:1.1
	sid-snapshot-20141201:1.1
	sid-snapshot-20141101:1.1
	sid-snapshot-20141001:1.1
	sid-snapshot-20140901:1.1
	sid-snapshot-20140801:1.1
	sid-snapshot-20140701:1.1
	sid-snapshot-20140601:1.1
	sid-snapshot-20140501:1.1
	sid-snapshot-20140401:1.1
	sid-snapshot-20140301:1.1
	sid-snapshot-20140201:1.1
	sid-snapshot-20140101:1.1
	sid-snapshot-20131201:1.1
	sid-snapshot-20131101:1.1
	sid-snapshot-20131001:1.1
	sid-snapshot-20130901:1.1
	sid-snapshot-20130801:1.1
	sid-snapshot-20130701:1.1
	sid-snapshot-20130601:1.1
	sid-snapshot-20130501:1.1
	sid-snapshot-20130401:1.1
	sid-snapshot-20130301:1.1
	sid-snapshot-20130201:1.1
	sid-snapshot-20130101:1.1
	sid-snapshot-20121201:1.1
	sid-snapshot-20121101:1.1
	sid-snapshot-20121001:1.1
	sid-snapshot-20120901:1.1
	sid-snapshot-20120801:1.1
	sid-snapshot-20120701:1.1
	sid-snapshot-20120601:1.1
	sid-snapshot-20120501:1.1
	sid-snapshot-20120401:1.1
	sid-snapshot-20120301:1.1
	sid-snapshot-20120201:1.1
	sid-snapshot-20120101:1.1
	sid-snapshot-20111201:1.1
	sid-snapshot-20111101:1.1
	sid-snapshot-20111001:1.1
	sid-snapshot-20110901:1.1
	sid-snapshot-20110801:1.1
	sid-snapshot-20110701:1.1
	sid-snapshot-20110601:1.1
	sid-snapshot-20110501:1.1
	sid-snapshot-20110401:1.1
	sid-snapshot-20110301:1.1
	sid-snapshot-20110201:1.1
	sid-snapshot-20110101:1.1
	sid-snapshot-20101201:1.1
	sid-snapshot-20101101:1.1
	sid-snapshot-20101001:1.1
	sid-snapshot-20100901:1.1
	sid-snapshot-20100801:1.1
	sid-snapshot-20100701:1.1
	sid-snapshot-20100601:1.1
	sid-snapshot-20100501:1.1
	sid-snapshot-20100401:1.1
	sid-snapshot-20100301:1.1
	sid-snapshot-20100201:1.1
	sid-snapshot-20100101:1.1
	sid-snapshot-20091201:1.1
	sid-snapshot-20091101:1.1
	sid-snapshot-20091001:1.1
	sid-snapshot-20090901:1.1
	sid-snapshot-20090801:1.1
	sid-snapshot-20090701:1.1
	sid-snapshot-20090601:1.1
	sid-snapshot-20090501:1.1
	sid-snapshot-20090401:1.1
	sid-snapshot-20090301:1.1
	sid-snapshot-20090201:1.1
	sid-snapshot-20090101:1.1
	sid-snapshot-20081201:1.1
	sid-snapshot-20081101:1.1
	sid-snapshot-20081001:1.1
	sid-snapshot-20080901:1.1
	sid-snapshot-20080801:1.1
	sid-snapshot-20080701:1.1
	sid-snapshot-20080601:1.1
	sid-snapshot-20080501:1.1
	sid-snapshot-20080403:1.1
	sid-snapshot-20080401:1.1
	sid-snapshot-20080301:1.1
	sid-snapshot-20080201:1.1
	sid-snapshot-20080101:1.1
	sid-snapshot-20071201:1.1
	sid-snapshot-20071101:1.1
	sid-snapshot-20071001:1.1
	sid-20020905-branchpoint:1.1
	sid-20020905-branch:1.1.0.2;
locks; strict;
comment	@// @;


1.1
date	2002.02.15.01.18.45;	author fitzsim;	state Exp;
branches;
next	;


desc
@@


1.1
log
@	* debug/debug.h: Move to top-level bochs directory.
	* debug: Remove directory.
	* pic/*: New files.
	* floppy/*: New files.
	* cmos/*: New files.
	* unmapped/*: New files.
	* dma/*: New files.
	* pit/*: New files.
	* cpu/x86.h: Rename to sid-x86-cpu-wrapper.h.
	* cpu/x86.cc: Rename to sid-x86-cpu-wrapper.cc.
	* cpu/x86-memory-modes.cc: Rename to sid-x86-memory-modes.cc.
	* memory/*: Move to cpu/memory/*.
	* fpu/*: Move to cpu/fpu/*.
	* bochs.h: Change #include's to reflect new and moved files.
	Add sid expansions for A20ADDR(x), BX_INP(addr, len),
	BX_OUTP(addr, val, len), BX_RAISE_HLDA(),
	BX_SET_ENABLE_A20(enabled), BX_GET_ENABLE_A20(), and
	BX_NULL_TIMER_HANDLE.
	* components.cxx: Add support for cmos, dma, pic, pit, floppy,
	unmapped.
	* config.h.in: Set BX_SUPPORT_TASKING, BX_DMA_FLOPPY_IO and
	BX_SUPPORT_A20 to 1 by default.
	Set SMF macros to 0 for cmos, dma, pic, pit, floppy and unmapped
	components.
	* configure.in: Add pic, pit, cmos, dma, floppy, and unmapped
	Makefiles to AC_OUTPUT.
	* cpu/exception-sid.cc: Remove.  Merge differences into
	cpu/exception.cc.
	* cpu/cpu-sid.h: Remove.  Merge differences into cpu/cpu.h.
	* cpu/cpu-sid.cc: Remove.  Merge differences into cpu/cpu.cc.
	* cpu/init-sid.cc: Remove.  Merge differences into cpu/init.cc.
	* cpu/soft_int-sid.cc: Remove.
	* cpu/debugstuff-sid.cc: Remove.  Merge differences into
	cpu/debugstuff.cc.
	* cpu/ctrl_xfer32-sid.cc: Remove.
	* cpu/fetchdecode-sid.cc: Remove.
	* cpu/Makefile.am: Remove references to removed files.
	(SUBDIRS) Add memory and fpu.
	(SUBLIBS) Add memory/libmemory.la and fpu/libfpu.la.
	(INCLUDES) Add memory and fpu directories.
	* cpu/cpu.cc: Remove BX_HRQ related FIXME's.
	Add interrupt pin support.
	* cpu/debugstuff.cc (BX_SUPPORT_SID): Add implementations of
	dbg_get_reg, dbg_set_reg, and dbg_get_eflags for when
	BX_DEBUGGER isn't defined.
	* cpu/io.cc: Remove #if 0's -- no longer needed.
	* cpu/io_pro.cc: Likewise.
	* gui/x-gui.cc: Change title bar messages.
	* keyboard/keyboard.cc: Change keyboard to remove serial delay
	pin.
	* keyboard/sid-keyboard-wrapper.cc: Add a20-related pins.
	Remove serial-delay pin.
	Add cmos accessor.
	Add trigger-irq pin.
	* keyboard/sid-keyboard-wrapper.h: Likewise.
	* vga/sid-vga-wrapper.cc: Rename buses from eg. 3b4 to 0x3b4.
	Import imagemmap code from generic.cxx.
	* vga/vga.cc: Cap number of rows at BX_MAX_TEXT_LINES.
	* Makefile.am (SUBDIRLIST): Add pic, pit, cmos, dma, floppy,
	unmapped.
	Removed fpu, memory.
	(SUBLIBLIST): Likewise.
	(INCLUDES): Likewise.
@
text
@//  Copyright (C) 2001  MandrakeSoft S.A.
//
//    MandrakeSoft S.A.
//    43, rue d'Aboukir
//    75002 Paris - France
//    http://www.linux-mandrake.com/
//    http://www.mandrakesoft.com/
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA


#include "bochs.h"

#define LOG_THIS genlog->

// Nomenclature used to signify argument types
//
// Es = single real
// El = double real
// Ea = 14/28 bytes    98/108b bytes (FRSTOR,FSAVE)???
// Ew = word integer (2 bytes)
// Ed = dword integer (4 bytes) (short int)
// Et = extended real
// Eb = packed BCD
// Eq = quadword integer (8 bytes) (long integer)



  void
BX_CPU_C::ESC0(BxInstruction_t *i)
{
  if ( BX_CPU_THIS_PTR cr0.em || BX_CPU_THIS_PTR cr0.ts ) {
    exception(BX_NM_EXCEPTION, 0, 0);
    }
#if BX_SUPPORT_FPU
  fpu_execute(i);
#else
  BX_INFO(("ESC0 not implemented\n"));
#endif
}

  void
BX_CPU_C::ESC1(BxInstruction_t *i)
{
  if ( BX_CPU_THIS_PTR cr0.em || BX_CPU_THIS_PTR cr0.ts ) {
    exception(BX_NM_EXCEPTION, 0, 0);
    }
#if BX_SUPPORT_FPU
  fpu_execute(i);
#else
  BX_INFO(("ESC1 not implemented\n"));
#endif
}

  void
BX_CPU_C::ESC2(BxInstruction_t *i)
{
  if ( BX_CPU_THIS_PTR cr0.em || BX_CPU_THIS_PTR cr0.ts ) {
    exception(BX_NM_EXCEPTION, 0, 0);
    }
#if BX_SUPPORT_FPU
  fpu_execute(i);
#else
  BX_INFO(("ESC2 not implemented\n"));
#endif
}

  void
BX_CPU_C::ESC3(BxInstruction_t *i)
{
  if ( BX_CPU_THIS_PTR cr0.em || BX_CPU_THIS_PTR cr0.ts ) {
    exception(BX_NM_EXCEPTION, 0, 0);
    }

//BX_DEBUG(( "CS:EIP = %04x:%08x\n",
//  BX_CPU.sregs[BX_SEG_REG_CS].selector.value, BX_CPU.prev_eip));

#if BX_SUPPORT_FPU
  fpu_execute(i);
#else
  BX_INFO(("ESC3 not implemented\n"));
#endif
}

  void
BX_CPU_C::ESC4(BxInstruction_t *i)
{
  if ( BX_CPU_THIS_PTR cr0.em || BX_CPU_THIS_PTR cr0.ts ) {
    exception(BX_NM_EXCEPTION, 0, 0);
    }
#if BX_SUPPORT_FPU
  fpu_execute(i);
#else
  BX_INFO(("ESC4 not implemented\n"));
#endif
}

  void
BX_CPU_C::ESC5(BxInstruction_t *i)
{
  if ( BX_CPU_THIS_PTR cr0.em || BX_CPU_THIS_PTR cr0.ts ) {
    exception(BX_NM_EXCEPTION, 0, 0);
    }
#if BX_SUPPORT_FPU
  fpu_execute(i);
#else
  BX_INFO(("ESC5 not implemented\n"));
#endif
}

  void
BX_CPU_C::ESC6(BxInstruction_t *i)
{
  if ( BX_CPU_THIS_PTR cr0.em || BX_CPU_THIS_PTR cr0.ts ) {
    exception(BX_NM_EXCEPTION, 0, 0);
    }
#if BX_SUPPORT_FPU
  fpu_execute(i);
#else
  BX_INFO(("ESC6 not implemented\n"));
#endif
}

  void
BX_CPU_C::ESC7(BxInstruction_t *i)
{
  if ( BX_CPU_THIS_PTR cr0.em || BX_CPU_THIS_PTR cr0.ts ) {
    exception(BX_NM_EXCEPTION, 0, 0);
    }
#if BX_SUPPORT_FPU
  fpu_execute(i);
#else
  BX_INFO(("ESC7 not implemented\n"));
#endif
}

  void
BX_CPU_C::FWAIT(BxInstruction_t *i)
{
#if BX_CPU_LEVEL < 3
  // WAIT doesn't generate single steps on 8086.
  // The same goes for prefix instructions, and instructions which
  // modify segment registers. (pg4-16)
  // single_step_event = 0;
  BX_PANIC(("WAIT: not implemented for < 386\n"));
#else // BX_CPU_LEVEL >= 3

  if ( BX_CPU_THIS_PTR cr0.ts && BX_CPU_THIS_PTR cr0.mp ) {
    exception(BX_NM_EXCEPTION, 0, 0); // no error
    }
#if BX_SUPPORT_FPU
  fpu_execute(i);
#else
  BX_INFO(("FWAIT: no FPU\n"));
#endif

#endif
}


#if BX_SUPPORT_FPU==0
  // if supporting FPU, this function in glue logic file
  void
BX_CPU_C::fpu_init(void)
{
}
#endif
@
