head	1.1;
access;
symbols
	sid-snapshot-20180601:1.1
	sid-snapshot-20180501:1.1
	sid-snapshot-20180401:1.1
	sid-snapshot-20180301:1.1
	sid-snapshot-20180201:1.1
	sid-snapshot-20180101:1.1
	sid-snapshot-20171201:1.1
	sid-snapshot-20171101:1.1
	sid-snapshot-20171001:1.1
	sid-snapshot-20170901:1.1
	sid-snapshot-20170801:1.1
	sid-snapshot-20170701:1.1
	sid-snapshot-20170601:1.1
	sid-snapshot-20170501:1.1
	sid-snapshot-20170401:1.1
	sid-snapshot-20170301:1.1
	sid-snapshot-20170201:1.1
	sid-snapshot-20170101:1.1
	sid-snapshot-20161201:1.1
	sid-snapshot-20161101:1.1
	sid-snapshot-20160901:1.1
	sid-snapshot-20160801:1.1
	sid-snapshot-20160701:1.1
	sid-snapshot-20160601:1.1
	sid-snapshot-20160501:1.1
	sid-snapshot-20160401:1.1
	sid-snapshot-20160301:1.1
	sid-snapshot-20160201:1.1
	sid-snapshot-20160101:1.1
	sid-snapshot-20151201:1.1
	sid-snapshot-20151101:1.1
	sid-snapshot-20151001:1.1
	sid-snapshot-20150901:1.1
	sid-snapshot-20150801:1.1
	sid-snapshot-20150701:1.1
	sid-snapshot-20150601:1.1
	sid-snapshot-20150501:1.1
	sid-snapshot-20150401:1.1
	sid-snapshot-20150301:1.1
	sid-snapshot-20150201:1.1
	sid-snapshot-20150101:1.1
	sid-snapshot-20141201:1.1
	sid-snapshot-20141101:1.1
	sid-snapshot-20141001:1.1
	sid-snapshot-20140901:1.1
	sid-snapshot-20140801:1.1
	sid-snapshot-20140701:1.1
	sid-snapshot-20140601:1.1
	sid-snapshot-20140501:1.1
	sid-snapshot-20140401:1.1
	sid-snapshot-20140301:1.1
	sid-snapshot-20140201:1.1
	sid-snapshot-20140101:1.1
	sid-snapshot-20131201:1.1
	sid-snapshot-20131101:1.1
	sid-snapshot-20131001:1.1
	sid-snapshot-20130901:1.1
	sid-snapshot-20130801:1.1
	sid-snapshot-20130701:1.1
	sid-snapshot-20130601:1.1
	sid-snapshot-20130501:1.1
	sid-snapshot-20130401:1.1
	sid-snapshot-20130301:1.1
	sid-snapshot-20130201:1.1
	sid-snapshot-20130101:1.1
	sid-snapshot-20121201:1.1
	sid-snapshot-20121101:1.1
	sid-snapshot-20121001:1.1
	sid-snapshot-20120901:1.1
	sid-snapshot-20120801:1.1
	sid-snapshot-20120701:1.1
	sid-snapshot-20120601:1.1
	sid-snapshot-20120501:1.1
	sid-snapshot-20120401:1.1
	sid-snapshot-20120301:1.1
	sid-snapshot-20120201:1.1
	sid-snapshot-20120101:1.1
	sid-snapshot-20111201:1.1
	sid-snapshot-20111101:1.1
	sid-snapshot-20111001:1.1
	sid-snapshot-20110901:1.1
	sid-snapshot-20110801:1.1
	sid-snapshot-20110701:1.1
	sid-snapshot-20110601:1.1
	sid-snapshot-20110501:1.1
	sid-snapshot-20110401:1.1
	sid-snapshot-20110301:1.1
	sid-snapshot-20110201:1.1
	sid-snapshot-20110101:1.1
	sid-snapshot-20101201:1.1
	sid-snapshot-20101101:1.1
	sid-snapshot-20101001:1.1
	sid-snapshot-20100901:1.1
	sid-snapshot-20100801:1.1
	sid-snapshot-20100701:1.1
	sid-snapshot-20100601:1.1
	sid-snapshot-20100501:1.1
	sid-snapshot-20100401:1.1
	sid-snapshot-20100301:1.1
	sid-snapshot-20100201:1.1
	sid-snapshot-20100101:1.1
	sid-snapshot-20091201:1.1
	sid-snapshot-20091101:1.1
	sid-snapshot-20091001:1.1
	sid-snapshot-20090901:1.1
	sid-snapshot-20090801:1.1
	sid-snapshot-20090701:1.1
	sid-snapshot-20090601:1.1
	sid-snapshot-20090501:1.1
	sid-snapshot-20090401:1.1
	sid-snapshot-20090301:1.1
	sid-snapshot-20090201:1.1
	sid-snapshot-20090101:1.1
	sid-snapshot-20081201:1.1
	sid-snapshot-20081101:1.1
	sid-snapshot-20081001:1.1
	sid-snapshot-20080901:1.1
	sid-snapshot-20080801:1.1
	sid-snapshot-20080701:1.1
	sid-snapshot-20080601:1.1
	sid-snapshot-20080501:1.1
	sid-snapshot-20080403:1.1
	sid-snapshot-20080401:1.1
	sid-snapshot-20080301:1.1
	sid-snapshot-20080201:1.1
	sid-snapshot-20080101:1.1
	sid-snapshot-20071201:1.1
	sid-snapshot-20071101:1.1
	sid-snapshot-20071001:1.1
	sid-20020905-branchpoint:1.1
	sid-20020905-branch:1.1.0.2;
locks; strict;
comment	@ * @;


1.1
date	2002.02.15.01.18.45;	author fitzsim;	state Exp;
branches;
next	;


desc
@@


1.1
log
@	* debug/debug.h: Move to top-level bochs directory.
	* debug: Remove directory.
	* pic/*: New files.
	* floppy/*: New files.
	* cmos/*: New files.
	* unmapped/*: New files.
	* dma/*: New files.
	* pit/*: New files.
	* cpu/x86.h: Rename to sid-x86-cpu-wrapper.h.
	* cpu/x86.cc: Rename to sid-x86-cpu-wrapper.cc.
	* cpu/x86-memory-modes.cc: Rename to sid-x86-memory-modes.cc.
	* memory/*: Move to cpu/memory/*.
	* fpu/*: Move to cpu/fpu/*.
	* bochs.h: Change #include's to reflect new and moved files.
	Add sid expansions for A20ADDR(x), BX_INP(addr, len),
	BX_OUTP(addr, val, len), BX_RAISE_HLDA(),
	BX_SET_ENABLE_A20(enabled), BX_GET_ENABLE_A20(), and
	BX_NULL_TIMER_HANDLE.
	* components.cxx: Add support for cmos, dma, pic, pit, floppy,
	unmapped.
	* config.h.in: Set BX_SUPPORT_TASKING, BX_DMA_FLOPPY_IO and
	BX_SUPPORT_A20 to 1 by default.
	Set SMF macros to 0 for cmos, dma, pic, pit, floppy and unmapped
	components.
	* configure.in: Add pic, pit, cmos, dma, floppy, and unmapped
	Makefiles to AC_OUTPUT.
	* cpu/exception-sid.cc: Remove.  Merge differences into
	cpu/exception.cc.
	* cpu/cpu-sid.h: Remove.  Merge differences into cpu/cpu.h.
	* cpu/cpu-sid.cc: Remove.  Merge differences into cpu/cpu.cc.
	* cpu/init-sid.cc: Remove.  Merge differences into cpu/init.cc.
	* cpu/soft_int-sid.cc: Remove.
	* cpu/debugstuff-sid.cc: Remove.  Merge differences into
	cpu/debugstuff.cc.
	* cpu/ctrl_xfer32-sid.cc: Remove.
	* cpu/fetchdecode-sid.cc: Remove.
	* cpu/Makefile.am: Remove references to removed files.
	(SUBDIRS) Add memory and fpu.
	(SUBLIBS) Add memory/libmemory.la and fpu/libfpu.la.
	(INCLUDES) Add memory and fpu directories.
	* cpu/cpu.cc: Remove BX_HRQ related FIXME's.
	Add interrupt pin support.
	* cpu/debugstuff.cc (BX_SUPPORT_SID): Add implementations of
	dbg_get_reg, dbg_set_reg, and dbg_get_eflags for when
	BX_DEBUGGER isn't defined.
	* cpu/io.cc: Remove #if 0's -- no longer needed.
	* cpu/io_pro.cc: Likewise.
	* gui/x-gui.cc: Change title bar messages.
	* keyboard/keyboard.cc: Change keyboard to remove serial delay
	pin.
	* keyboard/sid-keyboard-wrapper.cc: Add a20-related pins.
	Remove serial-delay pin.
	Add cmos accessor.
	Add trigger-irq pin.
	* keyboard/sid-keyboard-wrapper.h: Likewise.
	* vga/sid-vga-wrapper.cc: Rename buses from eg. 3b4 to 0x3b4.
	Import imagemmap code from generic.cxx.
	* vga/vga.cc: Cap number of rows at BX_MAX_TEXT_LINES.
	* Makefile.am (SUBDIRLIST): Add pic, pit, cmos, dma, floppy,
	unmapped.
	Removed fpu, memory.
	(SUBLIBLIST): Likewise.
	(INCLUDES): Likewise.
@
text
@/*---------------------------------------------------------------------------+
 |  poly_2xm1.c                                                              |
 |                                                                           |
 | Function to compute 2^x-1 by a polynomial approximation.                  |
 |                                                                           |
 | Copyright (C) 1992,1993,1994,1997                                         |
 |                  W. Metzenthen, 22 Parker St, Ormond, Vic 3163, Australia |
 |                  E-mail   billm@@suburbia.net                              |
 |                                                                           |
 |                                                                           |
 +---------------------------------------------------------------------------*/

#include "exception.h"
#include "reg_constant.h"
#include "fpu_emu.h"
#include "fpu_system.h"
#include "control_w.h"
#include "poly.h"


#define	HIPOWER	11
static const u64 lterms[HIPOWER] =
{
  BX_CONST64(0x0000000000000000),  /* This term done separately as 12 bytes */
  BX_CONST64(0xf5fdeffc162c7543),
  BX_CONST64(0x1c6b08d704a0bfa6),
  BX_CONST64(0x0276556df749cc21),
  BX_CONST64(0x002bb0ffcf14f6b8),
  BX_CONST64(0x0002861225ef751c),
  BX_CONST64(0x00001ffcbfcd5422),
  BX_CONST64(0x00000162c005d5f1),
  BX_CONST64(0x0000000da96ccb1b),
  BX_CONST64(0x0000000078d1b897),
  BX_CONST64(0x000000000422b029)
};

static const Xsig hiterm = MK_XSIG(0xb17217f7, 0xd1cf79ab, 0xc8a39194);

/* Four slices: 0.0 : 0.25 : 0.50 : 0.75 : 1.0,
   These numbers are 2^(1/4), 2^(1/2), and 2^(3/4)
 */
static const Xsig shiftterm0 = MK_XSIG(0, 0, 0);
static const Xsig shiftterm1 = MK_XSIG(0x9837f051, 0x8db8a96f, 0x46ad2318);
static const Xsig shiftterm2 = MK_XSIG(0xb504f333, 0xf9de6484, 0x597d89b3);
static const Xsig shiftterm3 = MK_XSIG(0xd744fcca, 0xd69d6af4, 0x39a68bb9);

static const Xsig *shiftterm[] = { &shiftterm0, &shiftterm1,
				     &shiftterm2, &shiftterm3 };


/*--- poly_2xm1() -----------------------------------------------------------+
 | Requires st(0) which is TAG_Valid and < 1.                                |
 +---------------------------------------------------------------------------*/
int	poly_2xm1(u_char sign, FPU_REG *arg, FPU_REG *result)
{
  s32       exponent, shift;
  u64       Xll;
  Xsig      accumulator, Denom, argSignif;
  u_char    tag;

  exponent = exponent16(arg);

#ifdef PARANOID
  if ( exponent >= 0 )    	/* Don't want a |number| >= 1.0 */
    {
      /* Number negative, too large, or not Valid. */
      EXCEPTION(EX_INTERNAL|0x127);
      return 1;
    }
#endif /* PARANOID */

  argSignif.lsw = 0;
  XSIG_LL(argSignif) = Xll = significand(arg);

  if ( exponent == -1 )
    {
      shift = (argSignif.msw & 0x40000000) ? 3 : 2;
      /* subtract 0.5 or 0.75 */
      exponent -= 2;
      XSIG_LL(argSignif) <<= 2;
      Xll <<= 2;
    }
  else if ( exponent == -2 )
    {
      shift = 1;
      /* subtract 0.25 */
      exponent--;
      XSIG_LL(argSignif) <<= 1;
      Xll <<= 1;
    }
  else
    shift = 0;

  if ( exponent < -2 )
    {
      /* Shift the argument right by the required places. */
      if ( FPU_shrx(&Xll, -2-exponent) >= 0x80000000U )
	Xll++;	/* round up */
    }

  accumulator.lsw = accumulator.midw = accumulator.msw = 0;
  polynomial_Xsig(&accumulator, &Xll, lterms, HIPOWER-1);
  mul_Xsig_Xsig(&accumulator, &argSignif);
  shr_Xsig(&accumulator, 3);

  mul_Xsig_Xsig(&argSignif, &hiterm);   /* The leading term */
  add_two_Xsig(&accumulator, &argSignif, &exponent);

  if ( shift )
    {
      /* The argument is large, use the identity:
	 f(x+a) = f(a) * (f(x) + 1) - 1;
	 */
      shr_Xsig(&accumulator, - exponent);
      accumulator.msw |= 0x80000000;      /* add 1.0 */
      mul_Xsig_Xsig(&accumulator, shiftterm[shift]);
      accumulator.msw &= 0x3fffffff;      /* subtract 1.0 */
      exponent = 1;
    }

  if ( sign != SIGN_POS )
    {
      /* The argument is negative, use the identity:
	     f(-x) = -f(x) / (1 + f(x))
	 */
      Denom.lsw = accumulator.lsw;
      XSIG_LL(Denom) = XSIG_LL(accumulator);
      if ( exponent < 0 )
	shr_Xsig(&Denom, - exponent);
      else if ( exponent > 0 )
	{
	  /* exponent must be 1 here */
	  XSIG_LL(Denom) <<= 1;
	  if ( Denom.lsw & 0x80000000 )
	    XSIG_LL(Denom) |= 1;
	  (Denom.lsw) <<= 1;
	}
      Denom.msw |= 0x80000000;      /* add 1.0 */
      div_Xsig(&accumulator, &Denom, &accumulator);
    }

  /* Convert to 64 bit signed-compatible */
  exponent += round_Xsig(&accumulator);

  result = &st(0);
  significand(result) = XSIG_LL(accumulator);
  setexponent16(result, exponent);

  tag = FPU_round(result, 1, 0, FULL_PRECISION, sign);

  setsign(result, sign);
  FPU_settag0(tag);

  return 0;

}
@
