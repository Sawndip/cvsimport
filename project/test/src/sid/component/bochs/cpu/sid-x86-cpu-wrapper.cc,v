head	1.3;
access;
symbols
	sid-snapshot-20180601:1.3
	sid-snapshot-20180501:1.3
	sid-snapshot-20180401:1.3
	sid-snapshot-20180301:1.3
	sid-snapshot-20180201:1.3
	sid-snapshot-20180101:1.3
	sid-snapshot-20171201:1.3
	sid-snapshot-20171101:1.3
	sid-snapshot-20171001:1.3
	sid-snapshot-20170901:1.3
	sid-snapshot-20170801:1.3
	sid-snapshot-20170701:1.3
	sid-snapshot-20170601:1.3
	sid-snapshot-20170501:1.3
	sid-snapshot-20170401:1.3
	sid-snapshot-20170301:1.3
	sid-snapshot-20170201:1.3
	sid-snapshot-20170101:1.3
	sid-snapshot-20161201:1.3
	sid-snapshot-20161101:1.3
	sid-snapshot-20160901:1.3
	sid-snapshot-20160801:1.3
	sid-snapshot-20160701:1.3
	sid-snapshot-20160601:1.3
	sid-snapshot-20160501:1.3
	sid-snapshot-20160401:1.3
	sid-snapshot-20160301:1.3
	sid-snapshot-20160201:1.3
	sid-snapshot-20160101:1.3
	sid-snapshot-20151201:1.3
	sid-snapshot-20151101:1.3
	sid-snapshot-20151001:1.3
	sid-snapshot-20150901:1.3
	sid-snapshot-20150801:1.3
	sid-snapshot-20150701:1.3
	sid-snapshot-20150601:1.3
	sid-snapshot-20150501:1.3
	sid-snapshot-20150401:1.3
	sid-snapshot-20150301:1.3
	sid-snapshot-20150201:1.3
	sid-snapshot-20150101:1.3
	sid-snapshot-20141201:1.3
	sid-snapshot-20141101:1.3
	sid-snapshot-20141001:1.3
	sid-snapshot-20140901:1.3
	sid-snapshot-20140801:1.3
	sid-snapshot-20140701:1.3
	sid-snapshot-20140601:1.3
	sid-snapshot-20140501:1.3
	sid-snapshot-20140401:1.3
	sid-snapshot-20140301:1.3
	sid-snapshot-20140201:1.3
	sid-snapshot-20140101:1.3
	sid-snapshot-20131201:1.3
	sid-snapshot-20131101:1.3
	sid-snapshot-20131001:1.3
	sid-snapshot-20130901:1.3
	sid-snapshot-20130801:1.3
	sid-snapshot-20130701:1.3
	sid-snapshot-20130601:1.3
	sid-snapshot-20130501:1.3
	sid-snapshot-20130401:1.3
	sid-snapshot-20130301:1.3
	sid-snapshot-20130201:1.3
	sid-snapshot-20130101:1.3
	sid-snapshot-20121201:1.3
	sid-snapshot-20121101:1.3
	sid-snapshot-20121001:1.3
	sid-snapshot-20120901:1.3
	sid-snapshot-20120801:1.3
	sid-snapshot-20120701:1.3
	sid-snapshot-20120601:1.3
	sid-snapshot-20120501:1.3
	sid-snapshot-20120401:1.3
	sid-snapshot-20120301:1.3
	sid-snapshot-20120201:1.3
	sid-snapshot-20120101:1.3
	sid-snapshot-20111201:1.3
	sid-snapshot-20111101:1.3
	sid-snapshot-20111001:1.3
	sid-snapshot-20110901:1.3
	sid-snapshot-20110801:1.3
	sid-snapshot-20110701:1.3
	sid-snapshot-20110601:1.3
	sid-snapshot-20110501:1.3
	sid-snapshot-20110401:1.3
	sid-snapshot-20110301:1.3
	sid-snapshot-20110201:1.3
	sid-snapshot-20110101:1.3
	sid-snapshot-20101201:1.3
	sid-snapshot-20101101:1.3
	sid-snapshot-20101001:1.3
	sid-snapshot-20100901:1.3
	sid-snapshot-20100801:1.3
	sid-snapshot-20100701:1.3
	sid-snapshot-20100601:1.3
	sid-snapshot-20100501:1.3
	sid-snapshot-20100401:1.3
	sid-snapshot-20100301:1.3
	sid-snapshot-20100201:1.3
	sid-snapshot-20100101:1.3
	sid-snapshot-20091201:1.3
	sid-snapshot-20091101:1.3
	sid-snapshot-20091001:1.3
	sid-snapshot-20090901:1.3
	sid-snapshot-20090801:1.3
	sid-snapshot-20090701:1.3
	sid-snapshot-20090601:1.3
	sid-snapshot-20090501:1.3
	sid-snapshot-20090401:1.3
	sid-snapshot-20090301:1.3
	sid-snapshot-20090201:1.3
	sid-snapshot-20090101:1.3
	sid-snapshot-20081201:1.3
	sid-snapshot-20081101:1.3
	sid-snapshot-20081001:1.3
	sid-snapshot-20080901:1.3
	sid-snapshot-20080801:1.3
	sid-snapshot-20080701:1.3
	sid-snapshot-20080601:1.3
	sid-snapshot-20080501:1.3
	sid-snapshot-20080403:1.3
	sid-snapshot-20080401:1.3
	sid-snapshot-20080301:1.3
	sid-snapshot-20080201:1.3
	sid-snapshot-20080101:1.3
	sid-snapshot-20071201:1.3
	sid-snapshot-20071101:1.3
	sid-snapshot-20071001:1.3
	sid-20020905-branchpoint:1.2
	sid-20020905-branch:1.2.0.2;
locks; strict;
comment	@// @;


1.3
date	2006.07.11.18.21.32;	author fche;	state Exp;
branches;
next	1.2;

1.2
date	2002.03.04.23.33.01;	author fitzsim;	state Exp;
branches;
next	1.1;

1.1
date	2002.02.15.01.18.44;	author fitzsim;	state Exp;
branches;
next	;


desc
@@


1.3
log
@2006-07-11  Thiemo Seufer  <ths@@networkno.de>

	* cpu/sid-x86-cpu-wrapper.* (get_pc): Implement function.
@
text
@//  sid-x86-cpu-wrapper.cc - member function implementations for the sid x86 cpu component. -*- C++ -*-
//
//  Copyright (C) 2001 Red Hat.
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA

#include "sid-x86-cpu-wrapper.h"

x86_cpu::x86_cpu ()
    : interrupt_pin(this, & x86_cpu::interrupt),
      hold_request_pin(this, & x86_cpu::hold_request),
      enable_a20_pin(this, & x86_cpu::enable_a20),
      in_hardware_mode(false),
      _a20_enabled(true),
      a20_mask(0xffffffff),
      memory_mode("default"),
      blocking_on_syscall(false),
      verbose_p(false),
      io_memory_bus(0)
{
  bx_cpu.init(this, &bx_mem);

  add_pin("interrupt", & this->interrupt_pin);
  add_pin("interrupt-acknowledge", & this->interrupt_acknowledge_pin);
  add_pin("interrupt-ack-response", & this->interrupt_acknowledge_response_pin);

  add_pin("hold-request", & this->hold_request_pin);
  add_pin("hold-acknowledge", & this->hold_acknowledge_pin);

  add_pin("enable-a20", & this->enable_a20_pin);
  add_pin("a20-enabled", & this->a20_enabled_pin);

  add_accessor("io-memory", & this->io_memory_bus);

  // set up registers for use by gloss component.
  // see libgloss/i386/* for calling conventions
  // and exception-sid.cc for handling of int 0x80
  add_watchable_register (string("syscall-arg0"), &bx_cpu.gen_reg[0].erx);
  add_watchable_register (string("syscall-arg1"), &bx_cpu.gen_reg[3].erx);
  add_watchable_register (string("syscall-arg2"), &bx_cpu.gen_reg[1].erx);
  add_watchable_register (string("syscall-arg3"), &bx_cpu.gen_reg[2].erx);
  add_watchable_register (string("syscall-result"), &bx_cpu.gen_reg[0].erx);

  add_watchable_register (string("syscall-trap"), &bx_cpu.gen_reg[0].erx);    
  add_watchable_register (string("syscall-error"), &syscall_error);

  // set up debugging interface
  // there are 16 integer registers
  create_gdb_register_attrs (16, "4;5;8;9", & this->bx_cpu.eip);
  
  add_attribute ("enable-warnings?", & this->warnings_enabled, "setting");
  add_attribute ("hardware-mode?", & this->in_hardware_mode, "setting");
  add_attribute ("memory-mode", & this->memory_mode, "setting");
  add_attribute ("verbose?", & this->verbose_p, "setting");
}

void
x86_cpu::do_syscall()
{
  sid::host_int_4 tempAX = bx_cpu.gen_reg[0].erx;
  sid::host_int_4 tempBX = bx_cpu.gen_reg[3].erx;
  sid::host_int_4 tempCX = bx_cpu.gen_reg[1].erx;
  sid::host_int_4 tempDX = bx_cpu.gen_reg[2].erx;
  
  sidutil::cpu_trap_disposition whatnext = signal_trap(sidutil::cpu_trap_software, bx_cpu.gen_reg[0].erx);
  
  switch (whatnext)
    {
    case sidutil::cpu_trap_unhandled:
      cerr << "hw-cpu-x86: cpu syscall trap unhandled" << endl;
      this->blocking_on_syscall = false;
      return;
    case sidutil::cpu_trap_reissue:
      bx_cpu.gen_reg[0].erx = tempAX;
      bx_cpu.gen_reg[3].erx = tempBX;
      bx_cpu.gen_reg[1].erx = tempCX;
      bx_cpu.gen_reg[2].erx = tempDX;
      this->blocking_on_syscall = true;
      return;
    case sidutil::cpu_trap_skip:
      /* fall-through */
    case sidutil::cpu_trap_handled:
      this->blocking_on_syscall = false;
      return;
    default:
      abort ();
    }
  this->yield();
  throw sidutil::cpu_exception();
}

void
x86_cpu::do_breakpoint()
{
  sidutil::cpu_trap_disposition whatnext = signal_trap(sidutil::cpu_trap_breakpoint, 0);
  
  switch (whatnext)
    {
    case sidutil::cpu_trap_unhandled:
      cerr << "hw-cpu-x86: cpu breakpoint trap unhandled" << endl;
      break;
      
    case sidutil::cpu_trap_skip:
    case sidutil::cpu_trap_handled:
    case sidutil::cpu_trap_reissue:
      break;
      
    default:
      abort();
    }
  this->yield();
  throw sidutil::cpu_exception();
}

void
x86_cpu::step_insns ()
{
  try
    {
      if (!this->blocking_on_syscall)
          bx_cpu.cpu_loop(1);
      else
        do_syscall();
    }
  catch (sidutil::cpu_exception& t)
    {
      this->yield();
    }
  
  if (this->enable_step_trap_p) 
    this->signal_trap (sidutil::cpu_trap_stepped);
}

void
x86_cpu::reset ()
{
  bx_cpu.reset(BX_RESET_HARDWARE);

  if (!in_hardware_mode)
    enter_protected_mode();

}

void
x86_cpu::flush_icache ()
{
  bx_cpu.invalidate_prefetch_q();
}

void
x86_cpu::set_pc (sid::host_int_4 value)
{
  // FIXME: this should check if we're using the extended (32-bit)
  // instruction pointer or the 16-bit one
  bx_cpu.eip = value - bx_cpu.sregs[BX_SEG_REG_CS].cache.u.segment.base;
}

sid::host_int_4
x86_cpu::get_pc (void)
{
  return bx_cpu.eip;
}

string
x86_cpu::dbg_get_reg(unsigned int reg)
{
  string attr;
  sid::host_int_4 val;
  val = bx_cpu.dbg_get_reg(reg + 10);
  
  // Change to "target endian".
  sid::little_int_4 v = val;
  for (unsigned i = 0; i < 4; i++)
    attr += v.read_byte (i);
  
  if (verbose_p)
    cerr << "dbg_get_reg: reg = " << reg << endl;
  
  return attr;
}

sid::component::status
x86_cpu::dbg_set_reg(unsigned int reg, const string &attr)
{
  // change from "target endian"
  sid::little_int_4 v;
  for (unsigned i = 0; i < 4; i++)
    v.write_byte (i, attr[i]);
  sid::host_int_4 val = v;
  
  if (verbose_p)
    {
      cerr << "dbg_set_reg: reg = " << reg;
      fprintf(stderr, " val = %p\n", val);
    }
  
  if(bx_cpu.dbg_set_reg(reg + 10, val))
    return sid::component::ok;
  else
    return sid::component::bad_value;
}

void
x86_cpu::interrupt(host_int_4 val)
{
  bx_cpu.set_INTR(val);
}

void
x86_cpu::hold_request(host_int_4 val)
{
  bx_cpu.set_HRQ(val);
}

host_int_8
x86_cpu::now(void)
{
  return sched_query.now();
}

void
x86_cpu::enable_a20(host_int_4 val)
{
  if (val)
    {
      _a20_enabled = true;
      a20_mask   = 0xffffffff;
    }
  else
    {
      _a20_enabled = false;
      a20_mask   = 0xffefffff;
    }
}

host_int_4
x86_cpu::a20_enabled(void)
{
  if(_a20_enabled)
    return 1;
  else
    return 0;
}

bool
x86_cpu::hardware_mode(void)
{
  return in_hardware_mode;
}

void
x86_cpu::drive_interrupt_acknowledge_pin(void)
{
  interrupt_acknowledge_pin.drive(1);
}

host_int_1
x86_cpu::interrupt_acknowledged(void)
{
  return interrupt_acknowledge_response_pin.sense();
}

void
x86_cpu::drive_hold_acknowledge_pin(void)
{
  hold_acknowledge_pin.drive(1);
}

little_int_1
x86_cpu::read_io_memory_1 (host_int_4 addr)
{
  little_int_1 val;
  bus::status status;

  status = io_memory_bus->read(addr, val);

  if (status != bus::ok)
    {
      cerr << "[IOMEM ] operation: read_1" << endl;
      cerr << "[IOMEM ] addr: " << setbase(16) << addr << setbase(10) << endl;
      cerr << "[IOMEM ] val: " << setbase(16) << addr << setbase(10) << endl;
      cerr << "[IOMEM ] status: " << (status == bus::misaligned ? "misaligned" :
                                     (status == bus::unmapped ? "unmapped" : "unpermitted")) << endl;
      // FIXME: range check needed?
      if (addr >= 0x02e0 && addr <= 0x02ef)
        return 0;
      else
        return 0xff;
    }
  else
    {
      return val;
    }
}

void
x86_cpu::write_io_memory_1 (host_int_4 addr, little_int_1 value)
{
  bus::status status;

  status = io_memory_bus->write(addr, value);

  if (status != bus::ok)
    {
      cerr << "[IOMEM ] operation: write_1" << endl;
      cerr << "[IOMEM ] addr: " << setbase(16) << addr << setbase(10) << endl;
      cerr << "[IOMEM ] val: " << setbase(16) << value << setbase(10) << endl;
      cerr << "[IOMEM ] status: " << (status == bus::misaligned ? "misaligned" :
                                      (status == bus::unmapped ? "unmapped" : "unpermitted")) << endl;
    }
}

little_int_2
x86_cpu::read_io_memory_2 (host_int_4 addr)
{
  little_int_2 val;
  bus::status status;

  status = io_memory_bus->read(addr, val);

  if (status != bus::ok)
    {
      cerr << "[IOMEM ] operation: read_2" << endl;
      cerr << "[IOMEM ] addr: " << setbase(16) << addr << setbase(10) << endl;
      cerr << "[IOMEM ] val: " << setbase(16) << addr << setbase(10) << endl;
      cerr << "[IOMEM ] status: " << (status == bus::misaligned ? "misaligned" :
                                     (status == bus::unmapped ? "unmapped" : "unpermitted")) << endl;
      // FIXME: range check needed?
      if (addr >= 0x02e0 && addr <= 0x02ef)
        return 0;
      else
        return 0xffff;
    }
  else
    {
      return val;
    }
}

void
x86_cpu::write_io_memory_2 (host_int_4 addr, little_int_2 value)
{
  bus::status status;
  
  status = io_memory_bus->write(addr, value);
  
  if (status != bus::ok)
    {
      cerr << "[IOMEM ] operation: write_2" << endl;
      cerr << "[IOMEM ] addr: " << setbase(16) << addr << setbase(10) << endl;
      cerr << "[IOMEM ] val: " << setbase(16) << value << setbase(10) << endl;
      cerr << "[IOMEM ] status: " << (status == bus::misaligned ? "misaligned" :
                                      (status == bus::unmapped ? "unmapped" : "unpermitted")) << endl;
    }
}

little_int_4
x86_cpu::read_io_memory_4 (host_int_4 addr)
{
  little_int_4 val;
  bus::status status;

  status = io_memory_bus->read(addr, val);

  if (status != bus::ok)
    {
      cerr << "[IOMEM ] operation: read_4" << endl;
      cerr << "[IOMEM ] addr: " << setbase(16) << addr << setbase(10) << endl;
      cerr << "[IOMEM ] val: " << setbase(16) << addr << setbase(10) << endl;
      cerr << "[IOMEM ] status: " << (status == bus::misaligned ? "misaligned" :
                                     (status == bus::unmapped ? "unmapped" : "unpermitted")) << endl;
      // FIXME: range check needed?
      if (addr >= 0x02e0 && addr <= 0x02ef)
        return 0;
      else
        return 0xffffffff;
    }
  else
    {
      return val;
    }
}

void
x86_cpu::write_io_memory_4 (host_int_4 addr, little_int_4 value)
{
  bus::status status;
  
  status = io_memory_bus->write(addr, value);
  
  if (status != bus::ok)
    {
      cerr << "[IOMEM ] operation: write_4" << endl;
      cerr << "[IOMEM ] addr: " << setbase(16) << addr << setbase(10) << endl;
      cerr << "[IOMEM ] val: " << setbase(16) << value << setbase(10) << endl;
      cerr << "[IOMEM ] status: " << (status == bus::misaligned ? "misaligned" :
                                      (status == bus::unmapped ? "unmapped" : "unpermitted")) << endl;
    }
}
@


1.2
log
@	* Makefile.am (SUBDIRLIST): Add harddrv.
	(SUBLIBLIST): Add harddrv/libharddrv.la.
	(INCLUDES): Add harddrv.
	* bochs.h: Include harddrv.h header.
	* components.cxx: Add hw-disk-harddrive type.
	* configure.in (AC_OUTPUT): Add harddrv/Makefile.
	* cmos/sid-cmos-wrapper.cc: Remove cmos_irq_number,
	use_host_time and start_time attributes.
	Add base_memory_in_k, extended_memory_in_k attributes.
	Remove get_time function.
	* cpu/cpu.cc: Change mem->read_physical calls to access_linear
	calls.
	* cpu/cpu.h: Change _16_bit_base_reg references to
	a_16_bit_base_reg, to prevent compiler warnings on some hosts.
	* cpu/init.cc: Likewise.
	* cpu/proc_ctrl.cc: Add RDTSC implementation.
	* floppy/sid-floppy-wrapper.cc: Split up io memory range so that
	3f6 is left for hard drive.
	Add command-delay attribute.
	* keyboard/keyboard.cc: Handle reads from, and writes to port
	0x92.
	* keyboard/sid-keyboard-wrapper.cc: Add serial-delay attribute.
	* pic/sid-pic-wrapper.cc: Change implementation; provide one pin
	per irq, rather than one irq-number pin.
	* vga/sid-vga-wrapper.cc: Fix cmos writing bug.
	* vga/vga.cc: Add BX_SUPPORT_SID ifdefs, so that diffs between
	this file and the bochs version are clearer.
@
text
@d170 6
@


1.1
log
@	* debug/debug.h: Move to top-level bochs directory.
	* debug: Remove directory.
	* pic/*: New files.
	* floppy/*: New files.
	* cmos/*: New files.
	* unmapped/*: New files.
	* dma/*: New files.
	* pit/*: New files.
	* cpu/x86.h: Rename to sid-x86-cpu-wrapper.h.
	* cpu/x86.cc: Rename to sid-x86-cpu-wrapper.cc.
	* cpu/x86-memory-modes.cc: Rename to sid-x86-memory-modes.cc.
	* memory/*: Move to cpu/memory/*.
	* fpu/*: Move to cpu/fpu/*.
	* bochs.h: Change #include's to reflect new and moved files.
	Add sid expansions for A20ADDR(x), BX_INP(addr, len),
	BX_OUTP(addr, val, len), BX_RAISE_HLDA(),
	BX_SET_ENABLE_A20(enabled), BX_GET_ENABLE_A20(), and
	BX_NULL_TIMER_HANDLE.
	* components.cxx: Add support for cmos, dma, pic, pit, floppy,
	unmapped.
	* config.h.in: Set BX_SUPPORT_TASKING, BX_DMA_FLOPPY_IO and
	BX_SUPPORT_A20 to 1 by default.
	Set SMF macros to 0 for cmos, dma, pic, pit, floppy and unmapped
	components.
	* configure.in: Add pic, pit, cmos, dma, floppy, and unmapped
	Makefiles to AC_OUTPUT.
	* cpu/exception-sid.cc: Remove.  Merge differences into
	cpu/exception.cc.
	* cpu/cpu-sid.h: Remove.  Merge differences into cpu/cpu.h.
	* cpu/cpu-sid.cc: Remove.  Merge differences into cpu/cpu.cc.
	* cpu/init-sid.cc: Remove.  Merge differences into cpu/init.cc.
	* cpu/soft_int-sid.cc: Remove.
	* cpu/debugstuff-sid.cc: Remove.  Merge differences into
	cpu/debugstuff.cc.
	* cpu/ctrl_xfer32-sid.cc: Remove.
	* cpu/fetchdecode-sid.cc: Remove.
	* cpu/Makefile.am: Remove references to removed files.
	(SUBDIRS) Add memory and fpu.
	(SUBLIBS) Add memory/libmemory.la and fpu/libfpu.la.
	(INCLUDES) Add memory and fpu directories.
	* cpu/cpu.cc: Remove BX_HRQ related FIXME's.
	Add interrupt pin support.
	* cpu/debugstuff.cc (BX_SUPPORT_SID): Add implementations of
	dbg_get_reg, dbg_set_reg, and dbg_get_eflags for when
	BX_DEBUGGER isn't defined.
	* cpu/io.cc: Remove #if 0's -- no longer needed.
	* cpu/io_pro.cc: Likewise.
	* gui/x-gui.cc: Change title bar messages.
	* keyboard/keyboard.cc: Change keyboard to remove serial delay
	pin.
	* keyboard/sid-keyboard-wrapper.cc: Add a20-related pins.
	Remove serial-delay pin.
	Add cmos accessor.
	Add trigger-irq pin.
	* keyboard/sid-keyboard-wrapper.h: Likewise.
	* vga/sid-vga-wrapper.cc: Rename buses from eg. 3b4 to 0x3b4.
	Import imagemmap code from generic.cxx.
	* vga/vga.cc: Cap number of rows at BX_MAX_TEXT_LINES.
	* Makefile.am (SUBDIRLIST): Add pic, pit, cmos, dma, floppy,
	unmapped.
	Removed fpu, memory.
	(SUBLIBLIST): Likewise.
	(INCLUDES): Likewise.
@
text
@d66 1
a66 1
  add_attribute("verbose?", & this->verbose_p, "setting");
d133 1
a133 1
        bx_cpu.cpu_loop(1);
d153 1
d221 6
d290 5
a294 1
      //      exit(0);
a315 1
      //      exit(0);
d334 5
a338 1
      //      exit(0);
a359 1
      //      exit(0);
d378 5
a382 1
      //      exit(0);
a403 1
      //      exit(0);
a405 1

@

