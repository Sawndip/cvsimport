head	1.1;
access;
symbols
	sid-snapshot-20180601:1.1
	sid-snapshot-20180501:1.1
	sid-snapshot-20180401:1.1
	sid-snapshot-20180301:1.1
	sid-snapshot-20180201:1.1
	sid-snapshot-20180101:1.1
	sid-snapshot-20171201:1.1
	sid-snapshot-20171101:1.1
	sid-snapshot-20171001:1.1
	sid-snapshot-20170901:1.1
	sid-snapshot-20170801:1.1
	sid-snapshot-20170701:1.1
	sid-snapshot-20170601:1.1
	sid-snapshot-20170501:1.1
	sid-snapshot-20170401:1.1
	sid-snapshot-20170301:1.1
	sid-snapshot-20170201:1.1
	sid-snapshot-20170101:1.1
	sid-snapshot-20161201:1.1
	sid-snapshot-20161101:1.1
	sid-snapshot-20160901:1.1
	sid-snapshot-20160801:1.1
	sid-snapshot-20160701:1.1
	sid-snapshot-20160601:1.1
	sid-snapshot-20160501:1.1
	sid-snapshot-20160401:1.1
	sid-snapshot-20160301:1.1
	sid-snapshot-20160201:1.1
	sid-snapshot-20160101:1.1
	sid-snapshot-20151201:1.1
	sid-snapshot-20151101:1.1
	sid-snapshot-20151001:1.1
	sid-snapshot-20150901:1.1
	sid-snapshot-20150801:1.1
	sid-snapshot-20150701:1.1
	sid-snapshot-20150601:1.1
	sid-snapshot-20150501:1.1
	sid-snapshot-20150401:1.1
	sid-snapshot-20150301:1.1
	sid-snapshot-20150201:1.1
	sid-snapshot-20150101:1.1
	sid-snapshot-20141201:1.1
	sid-snapshot-20141101:1.1
	sid-snapshot-20141001:1.1
	sid-snapshot-20140901:1.1
	sid-snapshot-20140801:1.1
	sid-snapshot-20140701:1.1
	sid-snapshot-20140601:1.1
	sid-snapshot-20140501:1.1
	sid-snapshot-20140401:1.1
	sid-snapshot-20140301:1.1
	sid-snapshot-20140201:1.1
	sid-snapshot-20140101:1.1
	sid-snapshot-20131201:1.1
	sid-snapshot-20131101:1.1
	sid-snapshot-20131001:1.1
	sid-snapshot-20130901:1.1
	sid-snapshot-20130801:1.1
	sid-snapshot-20130701:1.1
	sid-snapshot-20130601:1.1
	sid-snapshot-20130501:1.1
	sid-snapshot-20130401:1.1
	sid-snapshot-20130301:1.1
	sid-snapshot-20130201:1.1
	sid-snapshot-20130101:1.1
	sid-snapshot-20121201:1.1
	sid-snapshot-20121101:1.1
	sid-snapshot-20121001:1.1
	sid-snapshot-20120901:1.1
	sid-snapshot-20120801:1.1
	sid-snapshot-20120701:1.1
	sid-snapshot-20120601:1.1
	sid-snapshot-20120501:1.1
	sid-snapshot-20120401:1.1
	sid-snapshot-20120301:1.1
	sid-snapshot-20120201:1.1
	sid-snapshot-20120101:1.1
	sid-snapshot-20111201:1.1
	sid-snapshot-20111101:1.1
	sid-snapshot-20111001:1.1
	sid-snapshot-20110901:1.1
	sid-snapshot-20110801:1.1
	sid-snapshot-20110701:1.1
	sid-snapshot-20110601:1.1
	sid-snapshot-20110501:1.1
	sid-snapshot-20110401:1.1
	sid-snapshot-20110301:1.1
	sid-snapshot-20110201:1.1
	sid-snapshot-20110101:1.1
	sid-snapshot-20101201:1.1
	sid-snapshot-20101101:1.1
	sid-snapshot-20101001:1.1
	sid-snapshot-20100901:1.1
	sid-snapshot-20100801:1.1
	sid-snapshot-20100701:1.1
	sid-snapshot-20100601:1.1
	sid-snapshot-20100501:1.1
	sid-snapshot-20100401:1.1
	sid-snapshot-20100301:1.1
	sid-snapshot-20100201:1.1
	sid-snapshot-20100101:1.1
	sid-snapshot-20091201:1.1
	sid-snapshot-20091101:1.1
	sid-snapshot-20091001:1.1
	sid-snapshot-20090901:1.1
	sid-snapshot-20090801:1.1
	sid-snapshot-20090701:1.1
	sid-snapshot-20090601:1.1
	sid-snapshot-20090501:1.1
	sid-snapshot-20090401:1.1
	sid-snapshot-20090301:1.1
	sid-snapshot-20090201:1.1
	sid-snapshot-20090101:1.1
	sid-snapshot-20081201:1.1
	sid-snapshot-20081101:1.1
	sid-snapshot-20081001:1.1
	sid-snapshot-20080901:1.1
	sid-snapshot-20080801:1.1
	sid-snapshot-20080701:1.1
	sid-snapshot-20080601:1.1
	sid-snapshot-20080501:1.1
	sid-snapshot-20080403:1.1
	sid-snapshot-20080401:1.1
	sid-snapshot-20080301:1.1
	sid-snapshot-20080201:1.1
	sid-snapshot-20080101:1.1
	sid-snapshot-20071201:1.1
	sid-snapshot-20071101:1.1
	sid-snapshot-20071001:1.1
	sid-20020905-branchpoint:1.1
	sid-20020905-branch:1.1.0.2
	cygnus_cvs_20020108_pre:1.1;
locks; strict;
comment	@// @;


1.1
date	2001.11.27.22.59.01;	author fitzsim;	state Exp;
branches;
next	;


desc
@@


1.1
log
@	Changes to many generated files -- incorporate bochs into
	build system and configrun-sid.
@
text
@//  Copyright (C) 2001  MandrakeSoft S.A.
//
//    MandrakeSoft S.A.
//    43, rue d'Aboukir
//    75002 Paris - France
//    http://www.linux-mandrake.com/
//    http://www.mandrakesoft.com/
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA





#define NEED_CPU_REG_SHORTCUTS 1
#include "bochs.h"
#define LOG_THIS BX_CPU_THIS_PTR




  void
BX_CPU_C::Resolve32Mod0Rm0(BxInstruction_t *i)
{
  i->rm_addr = EAX;
}
  void
BX_CPU_C::Resolve32Mod0Rm1(BxInstruction_t *i)
{
  i->rm_addr = ECX;
}
  void
BX_CPU_C::Resolve32Mod0Rm2(BxInstruction_t *i)
{
  i->rm_addr = EDX;
}
  void
BX_CPU_C::Resolve32Mod0Rm3(BxInstruction_t *i)
{
  i->rm_addr = EBX;
}
  void
BX_CPU_C::Resolve32Mod0Rm6(BxInstruction_t *i)
{
  i->rm_addr = ESI;
}
  void
BX_CPU_C::Resolve32Mod0Rm7(BxInstruction_t *i)
{
  i->rm_addr = EDI;
}


  void
BX_CPU_C::Resolve32Mod1or2Rm0(BxInstruction_t *i)
{
  i->rm_addr = EAX + i->displ32u;
}
  void
BX_CPU_C::Resolve32Mod1or2Rm1(BxInstruction_t *i)
{
  i->rm_addr = ECX + i->displ32u;
}
  void
BX_CPU_C::Resolve32Mod1or2Rm2(BxInstruction_t *i)
{
  i->rm_addr = EDX + i->displ32u;
}
  void
BX_CPU_C::Resolve32Mod1or2Rm3(BxInstruction_t *i)
{
  i->rm_addr = EBX + i->displ32u;
}
  void
BX_CPU_C::Resolve32Mod1or2Rm5(BxInstruction_t *i)
{
  i->rm_addr = EBP + i->displ32u;
}
  void
BX_CPU_C::Resolve32Mod1or2Rm6(BxInstruction_t *i)
{
  i->rm_addr = ESI + i->displ32u;
}
  void
BX_CPU_C::Resolve32Mod1or2Rm7(BxInstruction_t *i)
{
  i->rm_addr = EDI + i->displ32u;
}


  void
BX_CPU_C::Resolve32Mod0Base0(BxInstruction_t *i)
{
  Bit32u scaled_index;

  if (i->index != 4)
    scaled_index = BX_READ_32BIT_REG(i->index) << i->scale;
  else
    scaled_index = 0;
  i->rm_addr = EAX + scaled_index;
}
  void
BX_CPU_C::Resolve32Mod0Base1(BxInstruction_t *i)
{
  Bit32u scaled_index;

  if (i->index != 4)
    scaled_index = BX_READ_32BIT_REG(i->index) << i->scale;
  else
    scaled_index = 0;
  i->rm_addr = ECX + scaled_index;
}
  void
BX_CPU_C::Resolve32Mod0Base2(BxInstruction_t *i)
{
  Bit32u scaled_index;

  if (i->index != 4)
    scaled_index = BX_READ_32BIT_REG(i->index) << i->scale;
  else
    scaled_index = 0;
  i->rm_addr = EDX + scaled_index;
}
  void
BX_CPU_C::Resolve32Mod0Base3(BxInstruction_t *i)
{
  Bit32u scaled_index;

  if (i->index != 4)
    scaled_index = BX_READ_32BIT_REG(i->index) << i->scale;
  else
    scaled_index = 0;
  i->rm_addr = EBX + scaled_index;
}
  void
BX_CPU_C::Resolve32Mod0Base4(BxInstruction_t *i)
{
  Bit32u scaled_index;

  if (i->index != 4)
    scaled_index = BX_READ_32BIT_REG(i->index) << i->scale;
  else
    scaled_index = 0;
  i->rm_addr = ESP + scaled_index;
}
  void
BX_CPU_C::Resolve32Mod0Base5(BxInstruction_t *i)
{
  Bit32u scaled_index;

  if (i->index != 4)
    scaled_index = BX_READ_32BIT_REG(i->index) << i->scale;
  else
    scaled_index = 0;
  i->rm_addr = i->displ32u + scaled_index;
}
  void
BX_CPU_C::Resolve32Mod0Base6(BxInstruction_t *i)
{
  Bit32u scaled_index;

  if (i->index != 4)
    scaled_index = BX_READ_32BIT_REG(i->index) << i->scale;
  else
    scaled_index = 0;
  i->rm_addr = ESI + scaled_index;
}
  void
BX_CPU_C::Resolve32Mod0Base7(BxInstruction_t *i)
{
  Bit32u scaled_index;

  if (i->index != 4)
    scaled_index = BX_READ_32BIT_REG(i->index) << i->scale;
  else
    scaled_index = 0;
  i->rm_addr = EDI + scaled_index;
}




  void
BX_CPU_C::Resolve32Mod1or2Base0(BxInstruction_t *i)
{
  Bit32u scaled_index;

  if (i->index != 4)
    scaled_index = BX_READ_32BIT_REG(i->index) << i->scale;
  else
    scaled_index = 0;
  i->rm_addr = EAX + scaled_index + i->displ32u;
}
  void
BX_CPU_C::Resolve32Mod1or2Base1(BxInstruction_t *i)
{
  Bit32u scaled_index;

  if (i->index != 4)
    scaled_index = BX_READ_32BIT_REG(i->index) << i->scale;
  else
    scaled_index = 0;
  i->rm_addr = ECX + scaled_index + i->displ32u;
}
  void
BX_CPU_C::Resolve32Mod1or2Base2(BxInstruction_t *i)
{
  Bit32u scaled_index;

  if (i->index != 4)
    scaled_index = BX_READ_32BIT_REG(i->index) << i->scale;
  else
    scaled_index = 0;
  i->rm_addr = EDX + scaled_index + i->displ32u;
}
  void
BX_CPU_C::Resolve32Mod1or2Base3(BxInstruction_t *i)
{
  Bit32u scaled_index;

  if (i->index != 4)
    scaled_index = BX_READ_32BIT_REG(i->index) << i->scale;
  else
    scaled_index = 0;
  i->rm_addr = EBX + scaled_index + i->displ32u;
}
  void
BX_CPU_C::Resolve32Mod1or2Base4(BxInstruction_t *i)
{
  Bit32u scaled_index;

  if (i->index != 4)
    scaled_index = BX_READ_32BIT_REG(i->index) << i->scale;
  else
    scaled_index = 0;
  i->rm_addr = ESP + scaled_index + i->displ32u;
}
  void
BX_CPU_C::Resolve32Mod1or2Base5(BxInstruction_t *i)
{
  Bit32u scaled_index;

  if (i->index != 4)
    scaled_index = BX_READ_32BIT_REG(i->index) << i->scale;
  else
    scaled_index = 0;
  i->rm_addr = EBP + scaled_index + i->displ32u;
}
  void
BX_CPU_C::Resolve32Mod1or2Base6(BxInstruction_t *i)
{
  Bit32u scaled_index;

  if (i->index != 4)
    scaled_index = BX_READ_32BIT_REG(i->index) << i->scale;
  else
    scaled_index = 0;
  i->rm_addr = ESI + scaled_index + i->displ32u;
}
  void
BX_CPU_C::Resolve32Mod1or2Base7(BxInstruction_t *i)
{
  Bit32u scaled_index;

  if (i->index != 4)
    scaled_index = BX_READ_32BIT_REG(i->index) << i->scale;
  else
    scaled_index = 0;
  i->rm_addr = EDI + scaled_index + i->displ32u;
}
@
