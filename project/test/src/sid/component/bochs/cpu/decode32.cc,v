head	1.2;
access;
symbols
	sid-snapshot-20180601:1.2
	sid-snapshot-20180501:1.2
	sid-snapshot-20180401:1.2
	sid-snapshot-20180301:1.2
	sid-snapshot-20180201:1.2
	sid-snapshot-20180101:1.2
	sid-snapshot-20171201:1.2
	sid-snapshot-20171101:1.2
	sid-snapshot-20171001:1.2
	sid-snapshot-20170901:1.2
	sid-snapshot-20170801:1.2
	sid-snapshot-20170701:1.2
	sid-snapshot-20170601:1.2
	sid-snapshot-20170501:1.2
	sid-snapshot-20170401:1.2
	sid-snapshot-20170301:1.2
	sid-snapshot-20170201:1.2
	sid-snapshot-20170101:1.2
	sid-snapshot-20161201:1.2
	sid-snapshot-20161101:1.2
	sid-snapshot-20160901:1.2
	sid-snapshot-20160801:1.2
	sid-snapshot-20160701:1.2
	sid-snapshot-20160601:1.2
	sid-snapshot-20160501:1.2
	sid-snapshot-20160401:1.2
	sid-snapshot-20160301:1.2
	sid-snapshot-20160201:1.2
	sid-snapshot-20160101:1.2
	sid-snapshot-20151201:1.2
	sid-snapshot-20151101:1.2
	sid-snapshot-20151001:1.2
	sid-snapshot-20150901:1.2
	sid-snapshot-20150801:1.2
	sid-snapshot-20150701:1.2
	sid-snapshot-20150601:1.2
	sid-snapshot-20150501:1.2
	sid-snapshot-20150401:1.2
	sid-snapshot-20150301:1.2
	sid-snapshot-20150201:1.2
	sid-snapshot-20150101:1.2
	sid-snapshot-20141201:1.2
	sid-snapshot-20141101:1.2
	sid-snapshot-20141001:1.2
	sid-snapshot-20140901:1.2
	sid-snapshot-20140801:1.2
	sid-snapshot-20140701:1.2
	sid-snapshot-20140601:1.2
	sid-snapshot-20140501:1.2
	sid-snapshot-20140401:1.2
	sid-snapshot-20140301:1.2
	sid-snapshot-20140201:1.2
	sid-snapshot-20140101:1.2
	sid-snapshot-20131201:1.2
	sid-snapshot-20131101:1.2
	sid-snapshot-20131001:1.2
	sid-snapshot-20130901:1.2
	sid-snapshot-20130801:1.2
	sid-snapshot-20130701:1.2
	sid-snapshot-20130601:1.2
	sid-snapshot-20130501:1.2
	sid-snapshot-20130401:1.2
	sid-snapshot-20130301:1.2
	sid-snapshot-20130201:1.2
	sid-snapshot-20130101:1.2
	sid-snapshot-20121201:1.2
	sid-snapshot-20121101:1.2
	sid-snapshot-20121001:1.2
	sid-snapshot-20120901:1.2
	sid-snapshot-20120801:1.2
	sid-snapshot-20120701:1.2
	sid-snapshot-20120601:1.2
	sid-snapshot-20120501:1.2
	sid-snapshot-20120401:1.2
	sid-snapshot-20120301:1.2
	sid-snapshot-20120201:1.2
	sid-snapshot-20120101:1.2
	sid-snapshot-20111201:1.2
	sid-snapshot-20111101:1.2
	sid-snapshot-20111001:1.2
	sid-snapshot-20110901:1.2
	sid-snapshot-20110801:1.2
	sid-snapshot-20110701:1.2
	sid-snapshot-20110601:1.2
	sid-snapshot-20110501:1.2
	sid-snapshot-20110401:1.2
	sid-snapshot-20110301:1.2
	sid-snapshot-20110201:1.2
	sid-snapshot-20110101:1.2
	sid-snapshot-20101201:1.2
	sid-snapshot-20101101:1.2
	sid-snapshot-20101001:1.2
	sid-snapshot-20100901:1.2
	sid-snapshot-20100801:1.2
	sid-snapshot-20100701:1.2
	sid-snapshot-20100601:1.2
	sid-snapshot-20100501:1.2
	sid-snapshot-20100401:1.2
	sid-snapshot-20100301:1.2
	sid-snapshot-20100201:1.2
	sid-snapshot-20100101:1.2
	sid-snapshot-20091201:1.2
	sid-snapshot-20091101:1.2
	sid-snapshot-20091001:1.2
	sid-snapshot-20090901:1.2
	sid-snapshot-20090801:1.2
	sid-snapshot-20090701:1.2
	sid-snapshot-20090601:1.2
	sid-snapshot-20090501:1.2
	sid-snapshot-20090401:1.2
	sid-snapshot-20090301:1.2
	sid-snapshot-20090201:1.2
	sid-snapshot-20090101:1.2
	sid-snapshot-20081201:1.2
	sid-snapshot-20081101:1.2
	sid-snapshot-20081001:1.2
	sid-snapshot-20080901:1.2
	sid-snapshot-20080801:1.2
	sid-snapshot-20080701:1.2
	sid-snapshot-20080601:1.2
	sid-snapshot-20080501:1.2
	sid-snapshot-20080403:1.2
	sid-snapshot-20080401:1.2
	sid-snapshot-20080301:1.2
	sid-snapshot-20080201:1.2
	sid-snapshot-20080101:1.2
	sid-snapshot-20071201:1.2
	sid-snapshot-20071101:1.2
	sid-snapshot-20071001:1.2
	sid-20020905-branchpoint:1.2
	sid-20020905-branch:1.2.0.2
	cygnus_cvs_20020108_pre:1.1;
locks; strict;
comment	@// @;


1.2
date	2002.03.04.23.33.01;	author fitzsim;	state Exp;
branches;
next	1.1;

1.1
date	2001.11.27.22.59.00;	author fitzsim;	state Exp;
branches;
next	;


desc
@@


1.2
log
@	* Makefile.am (SUBDIRLIST): Add harddrv.
	(SUBLIBLIST): Add harddrv/libharddrv.la.
	(INCLUDES): Add harddrv.
	* bochs.h: Include harddrv.h header.
	* components.cxx: Add hw-disk-harddrive type.
	* configure.in (AC_OUTPUT): Add harddrv/Makefile.
	* cmos/sid-cmos-wrapper.cc: Remove cmos_irq_number,
	use_host_time and start_time attributes.
	Add base_memory_in_k, extended_memory_in_k attributes.
	Remove get_time function.
	* cpu/cpu.cc: Change mem->read_physical calls to access_linear
	calls.
	* cpu/cpu.h: Change _16_bit_base_reg references to
	a_16_bit_base_reg, to prevent compiler warnings on some hosts.
	* cpu/init.cc: Likewise.
	* cpu/proc_ctrl.cc: Add RDTSC implementation.
	* floppy/sid-floppy-wrapper.cc: Split up io memory range so that
	3f6 is left for hard drive.
	Add command-delay attribute.
	* keyboard/keyboard.cc: Handle reads from, and writes to port
	0x92.
	* keyboard/sid-keyboard-wrapper.cc: Add serial-delay attribute.
	* pic/sid-pic-wrapper.cc: Change implementation; provide one pin
	per irq, rather than one irq-number pin.
	* vga/sid-vga-wrapper.cc: Fix cmos writing bug.
	* vga/vga.cc: Add BX_SUPPORT_SID ifdefs, so that diffs between
	this file and the bochs version are clearer.
@
text
@//  Copyright (C) 2001  MandrakeSoft S.A.
//
//    MandrakeSoft S.A.
//    43, rue d'Aboukir
//    75002 Paris - France
//    http://www.linux-mandrake.com/
//    http://www.mandrakesoft.com/
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA





#define NEED_CPU_REG_SHORTCUTS 1
#include "bochs.h"
#define LOG_THIS BX_CPU_THIS_PTR




  void
BX_CPU_C::decode_exgx32(unsigned modrm)
{
  unsigned  mod, rm, ss;
  unsigned sib, base, index;
  Bit32u displ32, index_reg_val, base_reg_val;
  Bit8u  displ8;

  /* NOTES:
   * seg_reg_mod01_base & mod10_base aren't correct???
   */
  /* use 32bit addressing modes.  orthogonal base & index registers,
     scaling available, etc. */

  BX_INSTR_MODRM32(modrm);

  mod = modrm & 0xc0;
  rm  = modrm & 0x07;

  i->nnn = (modrm>>3) & 0x07;

  if (mod == 0xc0) { /* mod, reg, reg */
    i->rm_addr = rm;
    BX_CPU_THIS_PTR rm_type = BX_REGISTER_REF;
#if BX_WEIRDISMS
    i->seg_reg = NULL;
#endif
    }
  else { /* mod != 3 */
    BX_CPU_THIS_PTR rm_type = BX_MEMORY_REF;
    if (rm != 4) { /* rm != 100b, no s-i-b byte */
      // one byte modrm
      if (mod == 0x00) {
        if (i->seg_reg)
          i->seg_reg = i->seg_reg;
        else
          i->seg_reg = & BX_CPU_THIS_PTR ds;
        if (rm == 5) { // no reg, 32-bit displacement
          i->rm_addr = fetch_next_dword();
          }
        else {
          // else reg indirect, no displacement
          i->rm_addr = BX_READ_32BIT_REG(rm);
          }
        return;
        }
      if (mod == 0x40) {
        if (i->seg_reg)
          i->seg_reg = i->seg_reg;
        else
          i->seg_reg = BX_CPU_THIS_PTR sreg_mod01_rm32[rm];
        // reg, 8-bit displacement, sign extend
        displ8 = fetch_next_byte();
        i->rm_addr = BX_READ_32BIT_REG(rm);
        i->rm_addr += ((Bit8s) displ8);
        return;
        }
      // mod == 0x80
      if (i->seg_reg)
        i->seg_reg = i->seg_reg;
      else
        i->seg_reg = BX_CPU_THIS_PTR sreg_mod10_rm32[rm];
      // reg, 32-bit displacement
      displ32 = fetch_next_dword();
      i->rm_addr = BX_READ_32BIT_REG(rm);
      i->rm_addr += displ32;
      return;
      }
    else { /* rm == 4, s-i-b byte follows */
      sib = fetch_next_byte();
      BX_INSTR_SIB32(sib);
      base  = sib & 0x07; sib >>= 3;
      index = sib & 0x07; sib >>= 3;
      ss    = sib;

      if (mod == 0x00) {
        if (i->seg_reg)
          i->seg_reg = i->seg_reg;
        else
          i->seg_reg = BX_CPU_THIS_PTR sreg_mod00_base32[base];
        if (base != 5) /* base != 101b, no displacement */
          base_reg_val = BX_READ_32BIT_REG(base);
        else {
          BX_INSTR_SIB_mod0_base5(ss);
          base_reg_val = fetch_next_dword();
          }
        index_reg_val = 0;
        if (index != 4) {
          index_reg_val = BX_READ_32BIT_REG(index);
          index_reg_val <<= ss;
          }
#ifdef BX_INSTR_SIB_MOD0_IND4
        else {
          BX_INSTR_SIB_MOD0_IND4();
          }
#endif
        i->rm_addr = base_reg_val + index_reg_val;
        return;
        }
      if (mod == 0x40) {
        if (i->seg_reg)
          i->seg_reg = i->seg_reg;
        else
          i->seg_reg = BX_CPU_THIS_PTR sreg_mod01_base32[base];
        displ8 = fetch_next_byte();
        base_reg_val = BX_READ_32BIT_REG(base);
        index_reg_val = 0;
        if (index != 4) {
          index_reg_val = BX_READ_32BIT_REG(index);
          index_reg_val <<= ss;
          }
#ifdef BX_INSTR_SIB_MOD1_IND4
        else {
          BX_INSTR_SIB_MOD1_IND4();
          }
#endif
        i->rm_addr = base_reg_val + index_reg_val + (Bit8s) displ8;
        return;
        }

      // mod == 0x80
      if (i->seg_reg)
        i->seg_reg = i->seg_reg;
      else
        i->seg_reg = BX_CPU_THIS_PTR sreg_mod10_base32[base];
      displ32 = fetch_next_dword();
      base_reg_val = BX_READ_32BIT_REG(base);
      index_reg_val = 0;
      if (index != 4) {
        index_reg_val = BX_READ_32BIT_REG(index);
        index_reg_val <<= ss;
        }
#ifdef BX_INSTR_SIB_MOD2_IND4
      else {
        BX_INSTR_SIB_MOD2_IND4();
        }
#endif
      i->rm_addr = base_reg_val + index_reg_val + displ32;
      return;
      }
    } /* if (mod != 3) */
}
@


1.1
log
@	Changes to many generated files -- incorporate bochs into
	build system and configrun-sid.
@
text
@a36 1
#if 0
a174 1
#endif
@

