head	1.2;
access;
symbols
	sid-snapshot-20180601:1.2
	sid-snapshot-20180501:1.2
	sid-snapshot-20180401:1.2
	sid-snapshot-20180301:1.2
	sid-snapshot-20180201:1.2
	sid-snapshot-20180101:1.2
	sid-snapshot-20171201:1.2
	sid-snapshot-20171101:1.2
	sid-snapshot-20171001:1.2
	sid-snapshot-20170901:1.2
	sid-snapshot-20170801:1.2
	sid-snapshot-20170701:1.2
	sid-snapshot-20170601:1.2
	sid-snapshot-20170501:1.2
	sid-snapshot-20170401:1.2
	sid-snapshot-20170301:1.2
	sid-snapshot-20170201:1.2
	sid-snapshot-20170101:1.2
	sid-snapshot-20161201:1.2
	sid-snapshot-20161101:1.2
	sid-snapshot-20160901:1.2
	sid-snapshot-20160801:1.2
	sid-snapshot-20160701:1.2
	sid-snapshot-20160601:1.2
	sid-snapshot-20160501:1.2
	sid-snapshot-20160401:1.2
	sid-snapshot-20160301:1.2
	sid-snapshot-20160201:1.2
	sid-snapshot-20160101:1.2
	sid-snapshot-20151201:1.2
	sid-snapshot-20151101:1.2
	sid-snapshot-20151001:1.2
	sid-snapshot-20150901:1.2
	sid-snapshot-20150801:1.2
	sid-snapshot-20150701:1.2
	sid-snapshot-20150601:1.2
	sid-snapshot-20150501:1.2
	sid-snapshot-20150401:1.2
	sid-snapshot-20150301:1.2
	sid-snapshot-20150201:1.2
	sid-snapshot-20150101:1.2
	sid-snapshot-20141201:1.2
	sid-snapshot-20141101:1.2
	sid-snapshot-20141001:1.2
	sid-snapshot-20140901:1.2
	sid-snapshot-20140801:1.2
	sid-snapshot-20140701:1.2
	sid-snapshot-20140601:1.2
	sid-snapshot-20140501:1.2
	sid-snapshot-20140401:1.2
	sid-snapshot-20140301:1.2
	sid-snapshot-20140201:1.2
	sid-snapshot-20140101:1.2
	sid-snapshot-20131201:1.2
	sid-snapshot-20131101:1.2
	sid-snapshot-20131001:1.2
	sid-snapshot-20130901:1.2
	sid-snapshot-20130801:1.2
	sid-snapshot-20130701:1.2
	sid-snapshot-20130601:1.2
	sid-snapshot-20130501:1.2
	sid-snapshot-20130401:1.2
	sid-snapshot-20130301:1.2
	sid-snapshot-20130201:1.2
	sid-snapshot-20130101:1.2
	sid-snapshot-20121201:1.2
	sid-snapshot-20121101:1.2
	sid-snapshot-20121001:1.2
	sid-snapshot-20120901:1.2
	sid-snapshot-20120801:1.2
	sid-snapshot-20120701:1.2
	sid-snapshot-20120601:1.2
	sid-snapshot-20120501:1.2
	sid-snapshot-20120401:1.2
	sid-snapshot-20120301:1.2
	sid-snapshot-20120201:1.2
	sid-snapshot-20120101:1.2
	sid-snapshot-20111201:1.2
	sid-snapshot-20111101:1.2
	sid-snapshot-20111001:1.2
	sid-snapshot-20110901:1.2
	sid-snapshot-20110801:1.2
	sid-snapshot-20110701:1.2
	sid-snapshot-20110601:1.2
	sid-snapshot-20110501:1.2
	sid-snapshot-20110401:1.2
	sid-snapshot-20110301:1.2
	sid-snapshot-20110201:1.2
	sid-snapshot-20110101:1.2
	sid-snapshot-20101201:1.2
	sid-snapshot-20101101:1.2
	sid-snapshot-20101001:1.2
	sid-snapshot-20100901:1.2
	sid-snapshot-20100801:1.2
	sid-snapshot-20100701:1.2
	sid-snapshot-20100601:1.2
	sid-snapshot-20100501:1.2
	sid-snapshot-20100401:1.2
	sid-snapshot-20100301:1.2
	sid-snapshot-20100201:1.2
	sid-snapshot-20100101:1.2
	sid-snapshot-20091201:1.2
	sid-snapshot-20091101:1.2
	sid-snapshot-20091001:1.2
	sid-snapshot-20090901:1.2
	sid-snapshot-20090801:1.2
	sid-snapshot-20090701:1.2
	sid-snapshot-20090601:1.2
	sid-snapshot-20090501:1.2
	sid-snapshot-20090401:1.2
	sid-snapshot-20090301:1.2
	sid-snapshot-20090201:1.2
	sid-snapshot-20090101:1.2
	sid-snapshot-20081201:1.2
	sid-snapshot-20081101:1.2
	sid-snapshot-20081001:1.2
	sid-snapshot-20080901:1.2
	sid-snapshot-20080801:1.2
	sid-snapshot-20080701:1.2
	sid-snapshot-20080601:1.2
	sid-snapshot-20080501:1.2
	sid-snapshot-20080403:1.2
	sid-snapshot-20080401:1.2
	sid-snapshot-20080301:1.2
	sid-snapshot-20080201:1.2
	sid-snapshot-20080101:1.2
	sid-snapshot-20071201:1.2
	sid-snapshot-20071101:1.2
	sid-snapshot-20071001:1.2
	sid-20020905-branchpoint:1.2
	sid-20020905-branch:1.2.0.2;
locks; strict;
comment	@// @;


1.2
date	2002.03.04.23.33.03;	author fitzsim;	state Exp;
branches;
next	1.1;

1.1
date	2002.02.15.01.18.47;	author fitzsim;	state Exp;
branches;
next	;


desc
@@


1.2
log
@	* Makefile.am (SUBDIRLIST): Add harddrv.
	(SUBLIBLIST): Add harddrv/libharddrv.la.
	(INCLUDES): Add harddrv.
	* bochs.h: Include harddrv.h header.
	* components.cxx: Add hw-disk-harddrive type.
	* configure.in (AC_OUTPUT): Add harddrv/Makefile.
	* cmos/sid-cmos-wrapper.cc: Remove cmos_irq_number,
	use_host_time and start_time attributes.
	Add base_memory_in_k, extended_memory_in_k attributes.
	Remove get_time function.
	* cpu/cpu.cc: Change mem->read_physical calls to access_linear
	calls.
	* cpu/cpu.h: Change _16_bit_base_reg references to
	a_16_bit_base_reg, to prevent compiler warnings on some hosts.
	* cpu/init.cc: Likewise.
	* cpu/proc_ctrl.cc: Add RDTSC implementation.
	* floppy/sid-floppy-wrapper.cc: Split up io memory range so that
	3f6 is left for hard drive.
	Add command-delay attribute.
	* keyboard/keyboard.cc: Handle reads from, and writes to port
	0x92.
	* keyboard/sid-keyboard-wrapper.cc: Add serial-delay attribute.
	* pic/sid-pic-wrapper.cc: Change implementation; provide one pin
	per irq, rather than one irq-number pin.
	* vga/sid-vga-wrapper.cc: Fix cmos writing bug.
	* vga/vga.cc: Add BX_SUPPORT_SID ifdefs, so that diffs between
	this file and the bochs version are clearer.
@
text
@// sid-floppy-wrapper.cc - SID import of the bochs floppy component.  -*- C++ -*-

// Copyright (C) 1999, 2000, 2001, 2002 Red Hat.
// This file is part of SID and is licensed under the GPL.
// See the file COPYING.SID for conditions for redistribution.

#include "sid-floppy-wrapper.h"

floppy::floppy ()
    : init_pin(this, & floppy::init),
      reset_pin(this, & floppy::reset),
      command_delay_pin(this, & floppy::command_delay),
      dma_channel_pin(this, & floppy::dma_channel),
      ports_0x3f2_0x3f5_bus(this, & floppy::read_port_0x3f2_0x3f5, & floppy::write_port_0x3f2_0x3f5),
      port_0x3f7_bus(this, & floppy::read_port_0x3f7, & floppy::write_port_0x3f7),
      floppy_dma_channel(2), floppy_a_type("1.44"), floppy_b_type("none"),
      cmos_registers_bus(0), dma_channels_bus(0), dma_bus(0)
{
  add_pin("terminal-count", & this->terminal_count_pin);

  add_pin("interrupt", & this->interrupt_pin);
  add_pin("command-delay-control", & this->command_delay_control_pin);

  add_pin("init", & this->init_pin);
  add_pin("reset", & this->reset_pin);
  add_pin("command-delay", & this->command_delay_pin);

  add_bus("ports-0x3f2-0x3f5", & this->ports_0x3f2_0x3f5_bus);
  add_bus("port-0x3f7", & this->port_0x3f7_bus);

  add_accessor("cmos-registers", & this->cmos_registers_bus);
  add_accessor("dma-channels", & this->dma_channels_bus);
  add_accessor("dma", & this->dma_bus);

  add_pin("read-write", & this->read_write_pin);
  add_pin("dma-channel", & this->dma_channel_pin);

  add_attribute("floppy-a-type", & this->floppy_a_type, "setting");
  add_attribute("floppy-b-type", & this->floppy_b_type, "setting");

  add_attribute("floppy-a-path", & this->floppy_a_path, "setting");
  add_attribute("floppy-b-path", & this->floppy_b_path, "setting");

  add_attribute("floppy-a-inserted?", & this->floppy_a_is_inserted, "setting");
  add_attribute("floppy-b-inserted?", & this->floppy_b_is_inserted, "setting");

  add_attribute("dma-channel", & this->floppy_dma_channel, "setting");

  bx_floppy.command_delay = 500;

  add_attribute("command-delay", & this->bx_floppy.command_delay, "setting");
}

void
floppy::init(host_int_4)
{
  host_int_1 num_floppies = 0;
  host_int_1 bx_floppy_type = BX_FLOPPY_NONE;
  little_int_1 old_register_value;
  little_int_1 new_register_value;

  bx_floppy.init(this);

  // Check for floppy a:

  // start out with no drive 0 and no drive 1
  old_register_value = 0x0;

  if (cmos_registers_bus)
    cmos_registers_bus->write(host_int_4(0x10), old_register_value);

  if (floppy_a_type == "none")
    {
      new_register_value = (old_register_value & 0x0f) | 0x00;
      bx_floppy_type = BX_FLOPPY_NONE;
    }
  else if (floppy_a_type == "1.2")
    {
      new_register_value = (old_register_value & 0x0f) | 0x20;
      bx_floppy_type = BX_FLOPPY_1_2;
    }
  else if (floppy_a_type == "720")
    {
      new_register_value = (old_register_value & 0x0f) | 0x30;
      bx_floppy_type = BX_FLOPPY_720K;
    }
  else if (floppy_a_type == "1.44")
    {
      new_register_value = (old_register_value & 0x0f) | 0x40;
      bx_floppy_type = BX_FLOPPY_1_44;
    }
  else if (floppy_a_type == "2.88")
    {
      new_register_value = (old_register_value & 0x0f) | 0x50;
      bx_floppy_type = BX_FLOPPY_2_88;
    }
  else
    cerr << "floppy: Invalid floppy a type." << endl;

  if (bx_floppy_type != BX_FLOPPY_NONE)
    {
      num_floppies++;
      if (floppy_a_is_inserted)
        bx_floppy.call_evaluate_media(bx_floppy_type, floppy_a_path.c_str(), 0);
    }

  // Check for floppy b:
  if (floppy_b_type == "none")
    {
      new_register_value = (new_register_value & 0xf0) | 0x00;
      bx_floppy_type = BX_FLOPPY_NONE;        
    }
  else if (floppy_b_type == "1.2")
    {
      new_register_value = (new_register_value & 0xf0) | 0x02;
      bx_floppy_type = BX_FLOPPY_1_2;
    }
  else if (floppy_b_type == "720")
    {
      new_register_value = (new_register_value & 0xf0) | 0x03;
      bx_floppy_type = BX_FLOPPY_720K;
    }
  else if (floppy_b_type == "1.44")
    {
      new_register_value = (new_register_value & 0xf0) | 0x04;
      bx_floppy_type = BX_FLOPPY_1_44;
    }
  else if (floppy_b_type == "2.88")
    {
      new_register_value = (new_register_value & 0xf0) | 0x05;
      bx_floppy_type = BX_FLOPPY_2_88;
    }
  else
    cerr << "floppy: Invalid floppy b type." << endl;
  
  if (bx_floppy_type != BX_FLOPPY_NONE)
    {
      num_floppies++;
      if (floppy_b_is_inserted)
        bx_floppy.call_evaluate_media(bx_floppy_type, floppy_b_path.c_str(), 1);
    }

  if (cmos_registers_bus)
    {
      cmos_registers_bus->write(host_int_4(0x10), new_register_value);

      cmos_registers_bus->read(host_int_4(0x14), old_register_value);

      if (num_floppies > 0)
        {
          new_register_value = (old_register_value & 0x3e) | ((num_floppies - 1) << 6) | 1;
          cmos_registers_bus->write(host_int_4(0x14), new_register_value);
        }
      else
        {
          new_register_value = old_register_value & 0x3e;
          cmos_registers_bus->write(host_int_4(0x14), new_register_value);
        }
    }
}

void
floppy::reset(host_int_4)
{
  bx_floppy.reset(BX_RESET_HARDWARE);
}

void
floppy::drive_interrupt_pin(void)
{
  interrupt_pin.drive(1);
}

void
floppy::drive_command_delay_control_pin(host_int_4 value, bool regular)
{
  host_int_4 code = value | (regular << 31);

  command_delay_control_pin.drive(code);
}

void
floppy::channel_request(host_int_4 channel, little_int_1 val)
{
  if (dma_channels_bus)
    dma_channels_bus->write(channel, val);
  else
    cerr << "floppy: dma-channels bus not connected." << endl;
}

bool
floppy::terminal_count(void)
{
  return terminal_count_pin.sense();
}

bus::status
floppy::read_port_0x3f2_0x3f5 (host_int_4 addr, little_int_1 mask, little_int_1 & data)
{
  addr += 0x3f2;
  data = bx_floppy.read(addr, 1);
  return bus::ok;
}

bus::status
floppy::write_port_0x3f2_0x3f5 (host_int_4 addr, little_int_1 mask, little_int_1 data)
{
  addr += 0x3f2;
  bx_floppy.write(addr, data, 1);
  return bus::ok;
}

bus::status
floppy::read_port_0x3f7 (host_int_4 addr, little_int_1 mask, little_int_1 & data)
{
  addr += 0x3f7;
  data = bx_floppy.read(addr, 1);
  return bus::ok;
}

bus::status
floppy::write_port_0x3f7 (host_int_4 addr, little_int_1 mask, little_int_1 data)
{
  addr += 0x3f7;
  bx_floppy.write(addr, data, 1);
  return bus::ok;
}

host_int_4
floppy::dma_channel_number(void)
{
  return floppy_dma_channel;
}

void
floppy::dma_channel(host_int_4 phy_addr)
{
  little_int_1 sid_data_byte;
  Bit8u bochs_data_byte;

  if (read_write_pin.sense())
    {
      // read mode
      dma_bus->read(phy_addr, sid_data_byte);

      bochs_data_byte = sid_data_byte;
      
      bx_floppy.dma_read(& bochs_data_byte);
    }
  else
    {
      // write mode
      
      bx_floppy.dma_write(& bochs_data_byte);

      sid_data_byte = bochs_data_byte;
      
      dma_bus->write(phy_addr, sid_data_byte);
    }
}

void
floppy::command_delay(host_int_4)
{
  bx_floppy.timer();
}
@


1.1
log
@	* debug/debug.h: Move to top-level bochs directory.
	* debug: Remove directory.
	* pic/*: New files.
	* floppy/*: New files.
	* cmos/*: New files.
	* unmapped/*: New files.
	* dma/*: New files.
	* pit/*: New files.
	* cpu/x86.h: Rename to sid-x86-cpu-wrapper.h.
	* cpu/x86.cc: Rename to sid-x86-cpu-wrapper.cc.
	* cpu/x86-memory-modes.cc: Rename to sid-x86-memory-modes.cc.
	* memory/*: Move to cpu/memory/*.
	* fpu/*: Move to cpu/fpu/*.
	* bochs.h: Change #include's to reflect new and moved files.
	Add sid expansions for A20ADDR(x), BX_INP(addr, len),
	BX_OUTP(addr, val, len), BX_RAISE_HLDA(),
	BX_SET_ENABLE_A20(enabled), BX_GET_ENABLE_A20(), and
	BX_NULL_TIMER_HANDLE.
	* components.cxx: Add support for cmos, dma, pic, pit, floppy,
	unmapped.
	* config.h.in: Set BX_SUPPORT_TASKING, BX_DMA_FLOPPY_IO and
	BX_SUPPORT_A20 to 1 by default.
	Set SMF macros to 0 for cmos, dma, pic, pit, floppy and unmapped
	components.
	* configure.in: Add pic, pit, cmos, dma, floppy, and unmapped
	Makefiles to AC_OUTPUT.
	* cpu/exception-sid.cc: Remove.  Merge differences into
	cpu/exception.cc.
	* cpu/cpu-sid.h: Remove.  Merge differences into cpu/cpu.h.
	* cpu/cpu-sid.cc: Remove.  Merge differences into cpu/cpu.cc.
	* cpu/init-sid.cc: Remove.  Merge differences into cpu/init.cc.
	* cpu/soft_int-sid.cc: Remove.
	* cpu/debugstuff-sid.cc: Remove.  Merge differences into
	cpu/debugstuff.cc.
	* cpu/ctrl_xfer32-sid.cc: Remove.
	* cpu/fetchdecode-sid.cc: Remove.
	* cpu/Makefile.am: Remove references to removed files.
	(SUBDIRS) Add memory and fpu.
	(SUBLIBS) Add memory/libmemory.la and fpu/libfpu.la.
	(INCLUDES) Add memory and fpu directories.
	* cpu/cpu.cc: Remove BX_HRQ related FIXME's.
	Add interrupt pin support.
	* cpu/debugstuff.cc (BX_SUPPORT_SID): Add implementations of
	dbg_get_reg, dbg_set_reg, and dbg_get_eflags for when
	BX_DEBUGGER isn't defined.
	* cpu/io.cc: Remove #if 0's -- no longer needed.
	* cpu/io_pro.cc: Likewise.
	* gui/x-gui.cc: Change title bar messages.
	* keyboard/keyboard.cc: Change keyboard to remove serial delay
	pin.
	* keyboard/sid-keyboard-wrapper.cc: Add a20-related pins.
	Remove serial-delay pin.
	Add cmos accessor.
	Add trigger-irq pin.
	* keyboard/sid-keyboard-wrapper.h: Likewise.
	* vga/sid-vga-wrapper.cc: Rename buses from eg. 3b4 to 0x3b4.
	Import imagemmap code from generic.cxx.
	* vga/vga.cc: Cap number of rows at BX_MAX_TEXT_LINES.
	* Makefile.am (SUBDIRLIST): Add pic, pit, cmos, dma, floppy,
	unmapped.
	Removed fpu, memory.
	(SUBLIBLIST): Likewise.
	(INCLUDES): Likewise.
@
text
@d14 3
a16 2
      ports_0x3f2_0x3f7_bus(this, & floppy::read_port_0x3f2_0x3f7, & floppy::write_port_0x3f2_0x3f7),
      floppy_dma_channel(2), floppy_irq_number(6), floppy_a_type("1.44"), floppy_b_type("none"),
d21 1
a21 1
  add_pin("trigger-irq", & this->trigger_irq_pin);
d28 2
a29 1
  add_bus("ports-0x3f2-0x3f7", & this->ports_0x3f2_0x3f7_bus);
d48 4
a51 1
  add_attribute("irq-number", & this->floppy_irq_number, "setting");
d169 1
a169 1
floppy::drive_trigger_irq_pin(void)
d171 1
a171 1
  trigger_irq_pin.drive(floppy_irq_number);
d198 1
a198 1
floppy::read_port_0x3f2_0x3f7 (host_int_4 addr, little_int_1 mask, little_int_1 & data)
d206 1
a206 1
floppy::write_port_0x3f2_0x3f7 (host_int_4 addr, little_int_1 mask, little_int_1 data)
d213 2
a214 2
host_int_4
floppy::dma_channel_number(void)
d216 3
a218 1
  return floppy_dma_channel;
d221 2
a222 2
void
floppy::dma_channel(host_int_4 phy_addr)
d224 3
a226 6
  if (read_write_pin.sense())
    // read mode
    bx_floppy.dma_read(phy_addr);
  else
    // write mode
    bx_floppy.dma_write(phy_addr);
d229 2
a230 2
void
floppy::dma_write(host_int_4 addr, little_int_1 data)
d232 1
a232 1
  dma_bus->write(addr, data);
d236 1
a236 1
floppy::dma_read(host_int_4 addr, unsigned char *data)
d238 2
a239 1
  little_int_1 read_data;
d241 4
a244 1
  dma_bus->read(addr, read_data);
d246 14
a259 1
  *data = read_data;
@

