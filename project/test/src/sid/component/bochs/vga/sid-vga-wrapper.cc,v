head	1.6;
access;
symbols
	sid-snapshot-20180601:1.6
	sid-snapshot-20180501:1.6
	sid-snapshot-20180401:1.6
	sid-snapshot-20180301:1.6
	sid-snapshot-20180201:1.6
	sid-snapshot-20180101:1.6
	sid-snapshot-20171201:1.6
	sid-snapshot-20171101:1.6
	sid-snapshot-20171001:1.6
	sid-snapshot-20170901:1.6
	sid-snapshot-20170801:1.6
	sid-snapshot-20170701:1.6
	sid-snapshot-20170601:1.6
	sid-snapshot-20170501:1.6
	sid-snapshot-20170401:1.6
	sid-snapshot-20170301:1.6
	sid-snapshot-20170201:1.6
	sid-snapshot-20170101:1.6
	sid-snapshot-20161201:1.6
	sid-snapshot-20161101:1.6
	sid-snapshot-20160901:1.6
	sid-snapshot-20160801:1.6
	sid-snapshot-20160701:1.6
	sid-snapshot-20160601:1.6
	sid-snapshot-20160501:1.6
	sid-snapshot-20160401:1.6
	sid-snapshot-20160301:1.6
	sid-snapshot-20160201:1.6
	sid-snapshot-20160101:1.6
	sid-snapshot-20151201:1.6
	sid-snapshot-20151101:1.6
	sid-snapshot-20151001:1.6
	sid-snapshot-20150901:1.6
	sid-snapshot-20150801:1.6
	sid-snapshot-20150701:1.6
	sid-snapshot-20150601:1.6
	sid-snapshot-20150501:1.6
	sid-snapshot-20150401:1.6
	sid-snapshot-20150301:1.6
	sid-snapshot-20150201:1.6
	sid-snapshot-20150101:1.6
	sid-snapshot-20141201:1.6
	sid-snapshot-20141101:1.6
	sid-snapshot-20141001:1.6
	sid-snapshot-20140901:1.6
	sid-snapshot-20140801:1.6
	sid-snapshot-20140701:1.6
	sid-snapshot-20140601:1.6
	sid-snapshot-20140501:1.6
	sid-snapshot-20140401:1.6
	sid-snapshot-20140301:1.6
	sid-snapshot-20140201:1.6
	sid-snapshot-20140101:1.6
	sid-snapshot-20131201:1.6
	sid-snapshot-20131101:1.6
	sid-snapshot-20131001:1.6
	sid-snapshot-20130901:1.6
	sid-snapshot-20130801:1.6
	sid-snapshot-20130701:1.6
	sid-snapshot-20130601:1.6
	sid-snapshot-20130501:1.6
	sid-snapshot-20130401:1.6
	sid-snapshot-20130301:1.6
	sid-snapshot-20130201:1.6
	sid-snapshot-20130101:1.6
	sid-snapshot-20121201:1.6
	sid-snapshot-20121101:1.6
	sid-snapshot-20121001:1.6
	sid-snapshot-20120901:1.6
	sid-snapshot-20120801:1.6
	sid-snapshot-20120701:1.6
	sid-snapshot-20120601:1.6
	sid-snapshot-20120501:1.6
	sid-snapshot-20120401:1.6
	sid-snapshot-20120301:1.6
	sid-snapshot-20120201:1.6
	sid-snapshot-20120101:1.6
	sid-snapshot-20111201:1.6
	sid-snapshot-20111101:1.6
	sid-snapshot-20111001:1.6
	sid-snapshot-20110901:1.6
	sid-snapshot-20110801:1.6
	sid-snapshot-20110701:1.6
	sid-snapshot-20110601:1.6
	sid-snapshot-20110501:1.6
	sid-snapshot-20110401:1.6
	sid-snapshot-20110301:1.6
	sid-snapshot-20110201:1.6
	sid-snapshot-20110101:1.6
	sid-snapshot-20101201:1.6
	sid-snapshot-20101101:1.6
	sid-snapshot-20101001:1.6
	sid-snapshot-20100901:1.6
	sid-snapshot-20100801:1.6
	sid-snapshot-20100701:1.6
	sid-snapshot-20100601:1.6
	sid-snapshot-20100501:1.6
	sid-snapshot-20100401:1.6
	sid-snapshot-20100301:1.6
	sid-snapshot-20100201:1.6
	sid-snapshot-20100101:1.6
	sid-snapshot-20091201:1.6
	sid-snapshot-20091101:1.6
	sid-snapshot-20091001:1.6
	sid-snapshot-20090901:1.6
	sid-snapshot-20090801:1.6
	sid-snapshot-20090701:1.6
	sid-snapshot-20090601:1.6
	sid-snapshot-20090501:1.6
	sid-snapshot-20090401:1.6
	sid-snapshot-20090301:1.6
	sid-snapshot-20090201:1.6
	sid-snapshot-20090101:1.6
	sid-snapshot-20081201:1.6
	sid-snapshot-20081101:1.6
	sid-snapshot-20081001:1.6
	sid-snapshot-20080901:1.6
	sid-snapshot-20080801:1.6
	sid-snapshot-20080701:1.6
	sid-snapshot-20080601:1.6
	sid-snapshot-20080501:1.6
	sid-snapshot-20080403:1.6
	sid-snapshot-20080401:1.6
	sid-snapshot-20080301:1.6
	sid-snapshot-20080201:1.6
	sid-snapshot-20080101:1.6
	sid-snapshot-20071201:1.6
	sid-snapshot-20071101:1.6
	sid-snapshot-20071001:1.6
	sid-20020905-branchpoint:1.4
	sid-20020905-branch:1.4.0.2;
locks; strict;
comment	@// @;


1.6
date	2003.01.08.06.46.48;	author bje;	state Exp;
branches;
next	1.5;

1.5
date	2002.11.11.22.28.27;	author fche;	state Exp;
branches;
next	1.4;

1.4
date	2002.03.04.23.33.05;	author fitzsim;	state Exp;
branches;
next	1.3;

1.3
date	2002.02.15.01.18.49;	author fitzsim;	state Exp;
branches;
next	1.2;

1.2
date	2002.01.29.19.47.34;	author fitzsim;	state Exp;
branches;
next	1.1;

1.1
date	2002.01.23.20.52.01;	author fitzsim;	state Exp;
branches;
next	;


desc
@@


1.6
log
@* Remove duplicated `using' keywords (merge botch?)
@
text
@// sid-vga-wrapper.cc - SID import of the bochs vga component.  -*- C++ -*-

// Copyright (C) 1999, 2000, 2001 Red Hat.
// This file is part of SID and is licensed under the GPL.
// See the file COPYING.SID for conditions for redistribution.

#include "sid-vga-wrapper.h"

#include <cstdlib>
#include <cerrno>
#include <ctime>
#include <new>
#include <unistd.h>
#include <iostream>
#include <fcntl.h>
#include <sys/mman.h>
#include <sys/types.h>

using std::cerr;
using std::nothrow;
using std::endl;
using std::ifstream;
using std::ofstream;
using std::ios;
#include <sys/stat.h>

using std::cerr;
using std::nothrow;
using std::endl;
using std::ifstream;
using std::ofstream;
using std::ios;

using sidutil::make_attribute;
using sidutil::parse_attribute;
using sidutil::find_sid_data_file;
using sidutil::std_error_string;

vga::vga ()
    : init_pin(this, & vga::init),
      ports_0x3b4_0x3b5_bus(this, & vga::read_port_0x3b4_0x3b5, &vga::write_port_0x3b4_0x3b5),
      port_0x3ba_bus(this, & vga::read_port_0x3ba, &vga::write_port_0x3ba),
      ports_0x3c0_0x3cf_bus(this, & vga::read_port_0x3c0_0x3cf, &vga::write_port_0x3c0_0x3cf),
      ports_0x3d4_0x3d5_bus(this, & vga::read_port_0x3d4_0x3d5, &vga::write_port_0x3d4_0x3d5),
      port_0x3da_bus(this, & vga::read_port_0x3da, &vga::write_port_0x3da),
      cmos_registers_bus(0),
      framebuffer_bus(this, & vga::read_mem, &vga::write_mem),
      imageload_pin (this, & vga::imageload_handler),
      imagestore_pin (this, & vga::imagestore_handler),
      imagemmap_pin (this, & vga::imagemmap_handler),
      imagemsync_pin (this, & vga::imagemsync_handler)
{
  add_pin("init", & this->init_pin);

  add_pin("text-start-address", & this->text_start_address_pin);
  add_pin("text-cursor-x", & this->text_cursor_x_pin);
  add_pin("text-cursor-y", & this->text_cursor_y_pin);
  add_pin("text-memory-updated", & this->text_memory_updated_pin);

  add_pin("dimension-width", & this->dimension_width_pin);
  add_pin("dimension-height", & this->dimension_height_pin);
  add_pin("dimensions-updated", & this->dimensions_updated_pin);

  add_pin("palette-change-index", & this->palette_change_index_pin);

  add_bus("ports-0x3b4-0x3b5", & this->ports_0x3b4_0x3b5_bus);
  add_bus("port-0x3ba", & this->port_0x3ba_bus);
  add_bus("ports-0x3c0-0x3cf", & this->ports_0x3c0_0x3cf_bus);
  add_bus("ports-0x3d4-0x3d5", & this->ports_0x3d4_0x3d5_bus);
  add_bus("port-0x3da", & this->port_0x3da_bus);

  add_bus("framebuffer", & this->framebuffer_bus);

  add_accessor("cmos-registers", & this->cmos_registers_bus);

  // copied from sid/component/memory/generic.cxx

  add_attribute_virtual ("size", this,
			 & vga::get_size_attr,
			 & vga::set_size_attr, "setting");

  this->max_buffer_length = 32UL * 1024UL * 1024UL;
  this->buffer = 0;
  this->buffer_length = 0;
  this->mmapping_p = false;

  add_attribute ("image-file", & this->image_file_name, "setting");
  add_pin ("image-load", & this->imageload_pin);
  add_attribute ("image-load", & this->imageload_pin, "pin");
  add_pin ("image-store", & this->imagestore_pin);
  add_attribute ("image-store", & this->imagestore_pin, "pin");
  add_pin ("image-mmap", & this->imagemmap_pin);
  add_attribute ("image-mmap", & this->imagemmap_pin, "pin");
  add_pin ("image-msync", & this->imagemsync_pin);
  add_attribute ("image-msync", & this->imagemsync_pin, "pin");
}

void
vga::init (host_int_4)
{
  bx_vga.init(this, this->buffer);
  if (cmos_registers_bus)
    {
      little_int_1 old_register_value;
      little_int_1 new_register_value;

      cmos_registers_bus->read(host_int_4(0x14), old_register_value);
      new_register_value = (old_register_value & 0xcf) | 0x00;
      cmos_registers_bus->write(host_int_4(0x14), new_register_value); /* video card with BIOS ROM */
    }
}

bus::status
vga::read_port_0x3b4_0x3b5 (host_int_4 addr, little_int_1 mask, little_int_1 & data)
{
  addr += 0x3b4;
  data = bx_vga.read(addr, 1);
  return bus::ok;
}

bus::status
vga::write_port_0x3b4_0x3b5 (host_int_4 addr, little_int_1 mask, little_int_1 data)
{
  addr += 0x3b4;
  bx_vga.write(addr, data, 1, true);
  return bus::ok;
}

bus::status
vga::read_port_0x3ba (host_int_4 addr, little_int_1 mask, little_int_1 & data)
{
  addr += 0x3ba;
  data = bx_vga.read(addr, 1);
  return bus::ok;
}

bus::status
vga::write_port_0x3ba (host_int_4 addr, little_int_1 mask, little_int_1 data)
{
  addr += 0x3ba;
  bx_vga.write(addr, data, 1, true);
  return bus::ok;
}

bus::status
vga::read_port_0x3c0_0x3cf (host_int_4 addr, little_int_1 mask, little_int_1 & data)
{
  addr += 0x3c0;
  data = bx_vga.read(addr, 1);
  return bus::ok;
}

bus::status
vga::write_port_0x3c0_0x3cf (host_int_4 addr, little_int_1 mask, little_int_1 data)
{
  addr += 0x3c0;
  bx_vga.write(addr, data, 1, true);
  return bus::ok;
}

bus::status
vga::read_port_0x3d4_0x3d5 (host_int_4 addr, little_int_1 mask, little_int_1 & data)
{
  addr += 0x3d4;
  data = bx_vga.read(addr, 1);
  return bus::ok;
}

bus::status
vga::write_port_0x3d4_0x3d5 (host_int_4 addr, little_int_1 mask, little_int_1 data)
{
  addr += 0x3d4;
  bx_vga.write(addr, data, 1, true);
  return bus::ok;
}

bus::status
vga::read_port_0x3da (host_int_4 addr, little_int_1 mask, little_int_1 & data)
{
  addr += 0x3da;
  data = bx_vga.read(addr, 1);
  return bus::ok;
}

bus::status
vga::write_port_0x3da (host_int_4 addr, little_int_1 mask, little_int_1 data)
{
  addr += 0x3da;
  bx_vga.write(addr, data, 1, true);
  return bus::ok;
}

bus::status
vga::read_mem (host_int_4 addr, little_int_1 mask, little_int_1 & data)
{
  addr += 0xa0000;
  data = bx_vga.mem_read(addr);
  return bus::ok;
}

bus::status
vga::write_mem (host_int_4 addr, little_int_1 mask, little_int_1 data)
{
  addr += 0xa0000;
  bx_vga.mem_write(addr, data);
  return bus::ok;
}

void
vga::drive_text_start_address_pin (host_int_4 addr)
{
  this->text_start_address_pin.drive(addr);
}

void
vga::drive_text_cursor_x_pin (host_int_4 x)
{
  this->text_cursor_x_pin.drive(x);
}

void
vga::drive_text_cursor_y_pin (host_int_4 y)
{
  this->text_cursor_y_pin.drive(y);
}

void
vga::drive_text_memory_updated_pin (void)
{
  this->text_memory_updated_pin.drive(1);
}

void
vga::drive_dimension_width_pin (host_int_4 width)
{
  this->dimension_width_pin.drive(width);
}

void
vga::drive_dimension_height_pin (host_int_4 height)
{
  this->dimension_height_pin.drive(height);
}

void
vga::drive_dimensions_updated_pin (void)
{
  this->dimensions_updated_pin.drive(1);
}

void
vga::drive_palette_change_index_pin (host_int_4 index)
{
  this->palette_change_index_pin.drive(index);
}

bool
vga::attempt_resize (host_int_4 new_length) throw()
{
  if (new_length > max_buffer_length)
    return false;
  
  host_int_1* new_buffer = new (nothrow) host_int_1[new_length];
  if (new_buffer == 0)
    {
      cerr << "memory: error allocating memory buffer: " << std_error_string() << endl;
      this->error_pin.drive (0);
      return false;
    }

  if (this->mmapping_p)
    {
      munmap (reinterpret_cast<char*>(this->buffer), this->buffer_length);
      this->mmapping_p = false;
    }
  else
    delete [] this->buffer;

  this->buffer = new_buffer;
  this->buffer_length = new_length;
  memset(this->buffer, 0, this->buffer_length);

  return true;
}

string
vga::get_size_attr ()
{
  return make_attribute (this->buffer_length);
}


component::status
vga::set_size_attr (const string& s)
{
  host_int_4 new_size;
  component::status st = parse_attribute(s, new_size);
  if (st == component::ok)
    {
      bool ok = this->attempt_resize (new_size);
      if (! ok)
	return component::bad_value;
    }
  return st;
}

void
vga::imageload_handler (host_int_4)
{
  assert(this->buffer != 0);

  // Do nothing if file name was empty.
  if (this->image_file_name == "")
    {
      cerr << "memory: no image-file set for image-load" << endl;
      this->error_pin.drive (0);
      return;
    }

  ifstream f (find_sid_data_file(this->image_file_name).c_str(), ios::binary | ios::in);
  if (! f.good())
    {
      cerr << "memory: error opening " << this->image_file_name << ": "
	   << std_error_string() << endl;
      this->error_pin.drive (0);
      return;
    }

  // Load whole darned file
  memset (& this->buffer[0], 0, this->buffer_length);
  f.read (reinterpret_cast<char*>(& this->buffer[0]), this->buffer_length);
}



void
vga::imagestore_handler (host_int_4)
{
  assert(this->buffer != 0);

  // Do nothing if file name was empty.
  if (this->image_file_name == "")
    {
      cerr << "memory: no image-file set for image-store" << endl;
      this->error_pin.drive (0);
      return;
    }

  ofstream f (find_sid_data_file(this->image_file_name).c_str(),
	      ios::binary | ios::out | ios::trunc);
  if (! f.good())
    {
      cerr << "memory: error opening " << this->image_file_name << ": "
	<< std_error_string() << endl;
      this->error_pin.drive (0);
      return;
    }

  // Save whole darned file
  f.write (reinterpret_cast<const char*>(& this->buffer[0]), this->buffer_length);
  // if (! f.good())
  //  cerr << "memory: short write to " << this->image_file_name << endl;
}




void
vga::imagemsync_handler (host_int_4)
{
  assert (this->buffer);
  if (this->mmapping_p)
    {
      int rc = msync (reinterpret_cast<char*>(this->buffer),
		      this->buffer_length, MS_SYNC|MS_INVALIDATE);
      if (rc < 0) 
	cerr << "memory: failed in mmap:" << std_error_string() << endl;
    }
}



void
vga::imagemmap_handler (host_int_4)
{
  assert (this->buffer);

  // Do nothing if file name was empty.
  if (this->image_file_name == "")
    {
      cerr << "memory: no image-file set for image-mmap" << endl;
      this->error_pin.drive (0);
      return;
    }

  int fd = open (find_sid_data_file(this->image_file_name).c_str(), O_RDWR);
  if (fd < 0)
    {
      cerr << "memory: cannot open image-file during image-mmap:" << std_error_string() << endl;
      this->error_pin.drive (0);
      return;
    }

  /* Some kernels will SIGBUS the application if mmap'd file is not large enough.  */ 
  struct stat desc;
  int rc = fstat (fd, & desc);
  if (rc < 0 || desc.st_size < this->buffer_length)
    {
      cerr << "memory: cannot confirm that mmap file is large enough (>= " 
	   << this->buffer_length << " bytes)." << endl;
      this->error_pin.drive (0);
      return;
    }

  char* new_buffer = reinterpret_cast<char*>(mmap (0, this->buffer_length, 
						   PROT_READ|PROT_WRITE, MAP_SHARED, fd, 0));
#ifndef MAP_FAILED
#define MAP_FAILED ((char*)-1)
#endif
  if (new_buffer == 0 || new_buffer == MAP_FAILED)
    {
      cerr << "memory: failed in mmap:" << std_error_string() << endl;
      close (fd);
      this->error_pin.drive (0);
      return;
    }

  if (this->mmapping_p)
    {
      // Unmap previous block first
      munmap (reinterpret_cast<char*>(this->buffer), this->buffer_length);
      this->mmapping_p = false;
    }

  this->buffer = reinterpret_cast<host_int_1*>(new_buffer);
  close (fd);
  this->mmapping_p = true;
}
@


1.5
log
@* better c++ standard compliance

[e.g.]
[include/ChangeLog]
2002-11-11  Frank Ch. Eigler  <fche@@redhat.com>

        * sidcpuutil.h (cpu_trace_stream): Add some std:: qualifiers.

[component/glue/ChangeLog]
2002-11-11  Frank Ch. Eigler  <fche@@redhat.com>

        * glue.cxx (bus_prober): Dtor throw() fixes.
@
text
@a12 1
#include <new>
@


1.4
log
@	* Makefile.am (SUBDIRLIST): Add harddrv.
	(SUBLIBLIST): Add harddrv/libharddrv.la.
	(INCLUDES): Add harddrv.
	* bochs.h: Include harddrv.h header.
	* components.cxx: Add hw-disk-harddrive type.
	* configure.in (AC_OUTPUT): Add harddrv/Makefile.
	* cmos/sid-cmos-wrapper.cc: Remove cmos_irq_number,
	use_host_time and start_time attributes.
	Add base_memory_in_k, extended_memory_in_k attributes.
	Remove get_time function.
	* cpu/cpu.cc: Change mem->read_physical calls to access_linear
	calls.
	* cpu/cpu.h: Change _16_bit_base_reg references to
	a_16_bit_base_reg, to prevent compiler warnings on some hosts.
	* cpu/init.cc: Likewise.
	* cpu/proc_ctrl.cc: Add RDTSC implementation.
	* floppy/sid-floppy-wrapper.cc: Split up io memory range so that
	3f6 is left for hard drive.
	Add command-delay attribute.
	* keyboard/keyboard.cc: Handle reads from, and writes to port
	0x92.
	* keyboard/sid-keyboard-wrapper.cc: Add serial-delay attribute.
	* pic/sid-pic-wrapper.cc: Change implementation; provide one pin
	per irq, rather than one irq-number pin.
	* vga/sid-vga-wrapper.cc: Fix cmos writing bug.
	* vga/vga.cc: Add BX_SUPPORT_SID ifdefs, so that diffs between
	this file and the bochs version are clearer.
@
text
@d12 2
d15 1
a15 1
#include <fstream>
d19 7
d27 7
@


1.3
log
@	* debug/debug.h: Move to top-level bochs directory.
	* debug: Remove directory.
	* pic/*: New files.
	* floppy/*: New files.
	* cmos/*: New files.
	* unmapped/*: New files.
	* dma/*: New files.
	* pit/*: New files.
	* cpu/x86.h: Rename to sid-x86-cpu-wrapper.h.
	* cpu/x86.cc: Rename to sid-x86-cpu-wrapper.cc.
	* cpu/x86-memory-modes.cc: Rename to sid-x86-memory-modes.cc.
	* memory/*: Move to cpu/memory/*.
	* fpu/*: Move to cpu/fpu/*.
	* bochs.h: Change #include's to reflect new and moved files.
	Add sid expansions for A20ADDR(x), BX_INP(addr, len),
	BX_OUTP(addr, val, len), BX_RAISE_HLDA(),
	BX_SET_ENABLE_A20(enabled), BX_GET_ENABLE_A20(), and
	BX_NULL_TIMER_HANDLE.
	* components.cxx: Add support for cmos, dma, pic, pit, floppy,
	unmapped.
	* config.h.in: Set BX_SUPPORT_TASKING, BX_DMA_FLOPPY_IO and
	BX_SUPPORT_A20 to 1 by default.
	Set SMF macros to 0 for cmos, dma, pic, pit, floppy and unmapped
	components.
	* configure.in: Add pic, pit, cmos, dma, floppy, and unmapped
	Makefiles to AC_OUTPUT.
	* cpu/exception-sid.cc: Remove.  Merge differences into
	cpu/exception.cc.
	* cpu/cpu-sid.h: Remove.  Merge differences into cpu/cpu.h.
	* cpu/cpu-sid.cc: Remove.  Merge differences into cpu/cpu.cc.
	* cpu/init-sid.cc: Remove.  Merge differences into cpu/init.cc.
	* cpu/soft_int-sid.cc: Remove.
	* cpu/debugstuff-sid.cc: Remove.  Merge differences into
	cpu/debugstuff.cc.
	* cpu/ctrl_xfer32-sid.cc: Remove.
	* cpu/fetchdecode-sid.cc: Remove.
	* cpu/Makefile.am: Remove references to removed files.
	(SUBDIRS) Add memory and fpu.
	(SUBLIBS) Add memory/libmemory.la and fpu/libfpu.la.
	(INCLUDES) Add memory and fpu directories.
	* cpu/cpu.cc: Remove BX_HRQ related FIXME's.
	Add interrupt pin support.
	* cpu/debugstuff.cc (BX_SUPPORT_SID): Add implementations of
	dbg_get_reg, dbg_set_reg, and dbg_get_eflags for when
	BX_DEBUGGER isn't defined.
	* cpu/io.cc: Remove #if 0's -- no longer needed.
	* cpu/io_pro.cc: Likewise.
	* gui/x-gui.cc: Change title bar messages.
	* keyboard/keyboard.cc: Change keyboard to remove serial delay
	pin.
	* keyboard/sid-keyboard-wrapper.cc: Add a20-related pins.
	Remove serial-delay pin.
	Add cmos accessor.
	Add trigger-irq pin.
	* keyboard/sid-keyboard-wrapper.h: Likewise.
	* vga/sid-vga-wrapper.cc: Rename buses from eg. 3b4 to 0x3b4.
	Import imagemmap code from generic.cxx.
	* vga/vga.cc: Cap number of rows at BX_MAX_TEXT_LINES.
	* Makefile.am (SUBDIRLIST): Add pic, pit, cmos, dma, floppy,
	unmapped.
	Removed fpu, memory.
	(SUBLIBLIST): Likewise.
	(INCLUDES): Likewise.
@
text
@d94 1
a94 1
      cmos_registers_bus->write(host_int_4(0x14), little_int_1(0x00)); /* video card with BIOS ROM */
@


1.2
log
@	* Makefile.am (SUBDIRLIST): Add keyboard.
	(SUBLIBLIST): Add keyboard/libkeyboard.la.
	(INCLUDES): Add keyboard directory.
	* bochs.h [BX_SUPPORT_SID] (BX_SET_ENABLE_A20): Change expansion
	to nil.
	[BX_SUPPORT_SID] (BX_GET_ENABLE_A20): Change expansion to 0.
	Make declaration of bx_dbg unconditional.
	Include keyboard/keyboard.h.
	* components.cxx: Add type hw-input-keyboard.
	* config.h.in (BX_SUPPORT_PAGING): Set to 1.
	(BX_USE_TLB): Likewise.
	(BX_USE_KEY_SMF): Set to 0.
	* configure.in: Add keyboard/Makefile to AC_OUTPUT.

	* cpu/exception.cc: Remove BX_DEBUGGER ifdefs from around bx_dbg
	references.
	* cpu/proc_ctrl.cc: Likewise.
	* cpu/protect_ctrl_pro.cc: Likewise.

	* gui/x-gui.h: Add generate_scancode_pin output_pin.
	* gui/x-gui.cc:	Add ascii_to_key_event array.
	(x_gui): Add generate-scancode pin.
	(handle_events): Add checks for KeyPress and KeyRelease events.
	(xkeypress): New function.

	* keyboard/Makefile.am: New file.
	* keyboard/Makefile.in: Likewise.
	* keyboard/keyboard.cc: Likewise.
	* keyboard/keyboard.h: Likewise.
	* keyboard/keysymbols.h: Likewise.
	* keyboard/sid-keyboard-wrapper.cc: Likewise.
	* keyboard/sid-keyboard-wrapper.h: Likewise.
	* keyboard/tests: Likewise.
	* keyboard/tests/kbd-test.c: Likewise.

	* vga/sid-vga-wrapper.cc (vga): Change port pin names.
	* vga/sid-vga-wrapper.h: Change VGA_SID_WRAPPER_DEF_H to SID_VGA_WRAPPER_DEF_H.
@
text
@d9 15
d26 11
a36 6
      ports_3b4_3b5_bus(this, & vga::read_port_3b4_3b5, &vga::write_port_3b4_3b5),
      ports_3ba_bus(this, & vga::read_port_3ba, &vga::write_port_3ba),
      ports_3c0_3cf_bus(this, & vga::read_port_3c0_3cf, &vga::write_port_3c0_3cf),
      ports_3d4_3d5_bus(this, & vga::read_port_3d4_3d5, &vga::write_port_3d4_3d5),
      ports_3da_bus(this, & vga::read_port_3da, &vga::write_port_3da),
      framebuffer_bus(this, & vga::read_mem, &vga::write_mem)
d51 5
a55 5
  add_bus("ports-0x3b4-0x3b5", & this->ports_3b4_3b5_bus);
  add_bus("port-0x3ba", & this->ports_3ba_bus);
  add_bus("ports-0x3c0-0x3cf", & this->ports_3c0_3cf_bus);
  add_bus("ports-0x3d4-0x3d5", & this->ports_3d4_3d5_bus);
  add_bus("port-0x3da", & this->ports_3da_bus);
d58 23
d87 9
d99 1
a99 1
vga::read_port_3b4_3b5 (host_int_4 addr, little_int_1 mask, little_int_1 & data)
d101 1
a101 1
  addr += 0x03b4;
d107 1
a107 1
vga::write_port_3b4_3b5 (host_int_4 addr, little_int_1 mask, little_int_1 data)
d109 1
a109 1
  addr += 0x03b4;
d115 1
a115 1
vga::read_port_3ba (host_int_4 addr, little_int_1 mask, little_int_1 & data)
d117 1
a117 1
  addr += 0x03ba;
d123 1
a123 1
vga::write_port_3ba (host_int_4 addr, little_int_1 mask, little_int_1 data)
d125 1
a125 1
  addr += 0x03ba;
d131 1
a131 1
vga::read_port_3c0_3cf (host_int_4 addr, little_int_1 mask, little_int_1 & data)
d133 1
a133 1
  addr += 0x03c0;
d139 1
a139 1
vga::write_port_3c0_3cf (host_int_4 addr, little_int_1 mask, little_int_1 data)
d141 1
a141 1
  addr += 0x03c0;
d147 1
a147 1
vga::read_port_3d4_3d5 (host_int_4 addr, little_int_1 mask, little_int_1 & data)
d149 1
a149 1
  addr += 0x03d4;
d155 1
a155 1
vga::write_port_3d4_3d5 (host_int_4 addr, little_int_1 mask, little_int_1 data)
d157 1
a157 1
  addr += 0x03d4;
d163 1
a163 1
vga::read_port_3da (host_int_4 addr, little_int_1 mask, little_int_1 & data)
d165 1
a165 1
  addr += 0x03da;
d171 1
a171 1
vga::write_port_3da (host_int_4 addr, little_int_1 mask, little_int_1 data)
d173 1
a173 1
  addr += 0x03da;
d240 183
@


1.1
log
@	* Makefile.am (SUBDIRLIST): Add vga, gui.
	(SUBLIBLIST): Add vga/libvga.la, gui/libgui.la.
	(INCLUDES): Add vga, gui directories.
	* bochs.h: Include vga/vga.h.
	* configure.in: Add check for X11/Xos.h header.
	Add vga/Makefile and gui/Makefile to AC_OUTPUT.
	* config.h.in (BX_USE_VGA_SMF): Set to 0.
	(HAVE_X11_XOS_H): New define.
	* components.cxx (compX86ListTypes): Add types hw-video-vga,
	sid-io-vga.
	(compX86Create): Likewise.
	(compX86Delete): Handle deletion of x86_cpu, vga and x_gui components.

	* gui/Makefile.am: New file.
	* gui/Makefile.in: Likewise.
	* gui/dummy.cc: Likewise.
	* gui/icon_bochs.h: Likewise.
	* gui/x-gui.h: Likewise.
	* gui/x-gui.cc: Likewise.

	* vga/Makefile.am: New file.
	* vga/Makefile.in: Likewise.
	* vga/sid-vga-wrapper.cc: Likewise.
	* vga/sid-vga-wrapper.h: Likewise.
	* vga/tests/vga-test-bounce.c: Likewise.
	* vga/tests/vga-test-color.c: Likewise.
	* vga/tests/vga-test-draw.c: Likewise.
	* vga/tests/vga-test-modes.c: Likewise.
	* vga/vga.cc: Likewise.
	* vga/vga.cc: Likewise.
@
text
@d31 5
a35 5
  add_bus("ports-3b4-3b5-bus", & this->ports_3b4_3b5_bus);
  add_bus("ports-3ba-bus", & this->ports_3ba_bus);
  add_bus("ports-3c0-3cf-bus", & this->ports_3c0_3cf_bus);
  add_bus("ports-3d4-3d5-bus", & this->ports_3d4_3d5_bus);
  add_bus("ports-3da-bus", & this->ports_3da_bus);
@

