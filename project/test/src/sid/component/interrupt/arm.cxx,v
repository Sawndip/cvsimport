head	1.2;
access;
symbols
	sid-snapshot-20180601:1.2
	sid-snapshot-20180501:1.2
	sid-snapshot-20180401:1.2
	sid-snapshot-20180301:1.2
	sid-snapshot-20180201:1.2
	sid-snapshot-20180101:1.2
	sid-snapshot-20171201:1.2
	sid-snapshot-20171101:1.2
	sid-snapshot-20171001:1.2
	sid-snapshot-20170901:1.2
	sid-snapshot-20170801:1.2
	sid-snapshot-20170701:1.2
	sid-snapshot-20170601:1.2
	sid-snapshot-20170501:1.2
	sid-snapshot-20170401:1.2
	sid-snapshot-20170301:1.2
	sid-snapshot-20170201:1.2
	sid-snapshot-20170101:1.2
	sid-snapshot-20161201:1.2
	sid-snapshot-20161101:1.2
	sid-snapshot-20160901:1.2
	sid-snapshot-20160801:1.2
	sid-snapshot-20160701:1.2
	sid-snapshot-20160601:1.2
	sid-snapshot-20160501:1.2
	sid-snapshot-20160401:1.2
	sid-snapshot-20160301:1.2
	sid-snapshot-20160201:1.2
	sid-snapshot-20160101:1.2
	sid-snapshot-20151201:1.2
	sid-snapshot-20151101:1.2
	sid-snapshot-20151001:1.2
	sid-snapshot-20150901:1.2
	sid-snapshot-20150801:1.2
	sid-snapshot-20150701:1.2
	sid-snapshot-20150601:1.2
	sid-snapshot-20150501:1.2
	sid-snapshot-20150401:1.2
	sid-snapshot-20150301:1.2
	sid-snapshot-20150201:1.2
	sid-snapshot-20150101:1.2
	sid-snapshot-20141201:1.2
	sid-snapshot-20141101:1.2
	sid-snapshot-20141001:1.2
	sid-snapshot-20140901:1.2
	sid-snapshot-20140801:1.2
	sid-snapshot-20140701:1.2
	sid-snapshot-20140601:1.2
	sid-snapshot-20140501:1.2
	sid-snapshot-20140401:1.2
	sid-snapshot-20140301:1.2
	sid-snapshot-20140201:1.2
	sid-snapshot-20140101:1.2
	sid-snapshot-20131201:1.2
	sid-snapshot-20131101:1.2
	sid-snapshot-20131001:1.2
	sid-snapshot-20130901:1.2
	sid-snapshot-20130801:1.2
	sid-snapshot-20130701:1.2
	sid-snapshot-20130601:1.2
	sid-snapshot-20130501:1.2
	sid-snapshot-20130401:1.2
	sid-snapshot-20130301:1.2
	sid-snapshot-20130201:1.2
	sid-snapshot-20130101:1.2
	sid-snapshot-20121201:1.2
	sid-snapshot-20121101:1.2
	sid-snapshot-20121001:1.2
	sid-snapshot-20120901:1.2
	sid-snapshot-20120801:1.2
	sid-snapshot-20120701:1.2
	sid-snapshot-20120601:1.2
	sid-snapshot-20120501:1.2
	sid-snapshot-20120401:1.2
	sid-snapshot-20120301:1.2
	sid-snapshot-20120201:1.2
	sid-snapshot-20120101:1.2
	sid-snapshot-20111201:1.2
	sid-snapshot-20111101:1.2
	sid-snapshot-20111001:1.2
	sid-snapshot-20110901:1.2
	sid-snapshot-20110801:1.2
	sid-snapshot-20110701:1.2
	sid-snapshot-20110601:1.2
	sid-snapshot-20110501:1.2
	sid-snapshot-20110401:1.2
	sid-snapshot-20110301:1.2
	sid-snapshot-20110201:1.2
	sid-snapshot-20110101:1.2
	sid-snapshot-20101201:1.2
	sid-snapshot-20101101:1.2
	sid-snapshot-20101001:1.2
	sid-snapshot-20100901:1.2
	sid-snapshot-20100801:1.2
	sid-snapshot-20100701:1.2
	sid-snapshot-20100601:1.2
	sid-snapshot-20100501:1.2
	sid-snapshot-20100401:1.2
	sid-snapshot-20100301:1.2
	sid-snapshot-20100201:1.2
	sid-snapshot-20100101:1.2
	sid-snapshot-20091201:1.2
	sid-snapshot-20091101:1.2
	sid-snapshot-20091001:1.2
	sid-snapshot-20090901:1.2
	sid-snapshot-20090801:1.2
	sid-snapshot-20090701:1.2
	sid-snapshot-20090601:1.2
	sid-snapshot-20090501:1.2
	sid-snapshot-20090401:1.2
	sid-snapshot-20090301:1.2
	sid-snapshot-20090201:1.2
	sid-snapshot-20090101:1.2
	sid-snapshot-20081201:1.2
	sid-snapshot-20081101:1.2
	sid-snapshot-20081001:1.2
	sid-snapshot-20080901:1.2
	sid-snapshot-20080801:1.2
	sid-snapshot-20080701:1.2
	sid-snapshot-20080601:1.2
	sid-snapshot-20080501:1.2
	sid-snapshot-20080403:1.2
	sid-snapshot-20080401:1.2
	sid-snapshot-20080301:1.2
	sid-snapshot-20080201:1.2
	sid-snapshot-20080101:1.2
	sid-snapshot-20071201:1.2
	sid-snapshot-20071101:1.2
	sid-snapshot-20071001:1.2
	sid-20020905-branchpoint:1.2
	sid-20020905-branch:1.2.0.2
	cygnus_cvs_20020108_pre:1.2;
locks; strict;
comment	@// @;


1.2
date	2001.06.28.03.51.10;	author bje;	state Exp;
branches;
next	1.1;

1.1
date	2000.12.07.19.30.52;	author fche;	state Exp;
branches;
next	;


desc
@@


1.2
log
@2001-06-28  Ben Elliston  <bje@@redhat.com>

	* arm.h: Formatting cleanups.
	* arm.cxx: Likewise.
	* components.h: Likewise.
@
text
@// arm.cxx - An implementation of the interrupt controller from the
// ARM PID7T development board.  -*- C++ -*-

// Copyright (C) 1999, 2000, 2001 Red Hat.
// This file is part of SID and is licensed under the GPL.
// See the file COPYING.SID for conditions for redistribution.

// A more thorough description of this component may be found at
// <http://www.arm.com/Documentation/UserMans/rps/#int>.

#include "config.h"
#include "tconfig.h"
#include "components.h"

#include "arm.h"

#if SIDTARGET_ARM

void
armIntController::irq_src_driven(host_int_4 val, host_int_4 bit_num)
{
  if (val)
    irq_pending |= 1 << bit_num;
  else
    irq_pending &= ~(1 << bit_num);
  drive_irq_interrupts();
}

void
armIntController::fiq_src_driven(host_int_4 val, host_int_4 bit_num)
{
  fiq_pending = (val > 0) ? 1 : 0;
  drive_fiq_interrupts();
}

sid::bus::status
armIntController::irq_read_word(host_int_4 addr,
				little_int_4 mask,
				little_int_4& le_data)
{
  host_int_4 data;

  switch (addr)
    {
    case 0:
      // IRQStatus.
      data = irq_pending & irq_enabled;
      break;
    case 1:
      // IRQRawStatus.
      data = irq_pending;
      break;
    case 2:
      // IRQEnable.
      data = irq_enabled;
      break;
    case 3:
      // Reserved.
    case 4:
      return bus::unpermitted;
    default:
      return bus::unmapped;
    } 
  le_data = data;
  return bus::ok;
}

sid::bus::status
armIntController::fiq_read_word(host_int_4 addr,
				little_int_4 mask,
				little_int_4& le_data)
{
  host_int_4 data;

  switch (addr)
    {
    case 0:
      // FIQStatus.
      data = fiq_pending && fiq_enabled;
      break;
    case 1:
      // FIQRawStatus.
      data = fiq_pending;
      break;
    case 2:
      // FIQEnable.
      data = fiq_enabled;
      break;
    case 3:
      // Reserved.
      return bus::unpermitted;
    default:
      return bus::unmapped;
    } 
  le_data = data;
  return bus::ok;
}

sid::bus::status
armIntController::irq_write_word(host_int_4 addr,
				 little_int_4 mask,
				 little_int_4 le_data)
{
  host_int_4 data = le_data;

  switch (addr) {
  case 2:
    // IRQEnableSet.
    irq_enabled |= data;
    break;
  case 3:
    // IRQEnableClear.
    irq_enabled &= ~data;
    break;
  case 4:
    // IRQSoft.
    if (data & 2)
      {
        // Bit 1 set.
        irq_pending |= 2;
      }
    else
      {
	// Bit 1 clear.
	irq_pending &= ~2;
      }
      break;
  case 0:  // Reserved.
  case 1:
    return bus::unpermitted;
  default:
    return bus::unmapped;
  }
  // Some pending interrupts may now be enabled.
  // Some may also now be disabled.  Re-check.
  drive_interrupts();
  return bus::ok;
}

sid::bus::status
armIntController::fiq_write_word(host_int_4 addr,
				 little_int_4 mask,
				 little_int_4 le_data)
{
  host_int_4 data = le_data;

  switch (addr) {
  case 2:
   // FIQEnableSet.
    fiq_enabled |= data;
    break;
  case 3:
    fiq_enabled &= ~data;
    break;
  case 0:	// Reserved.
  case 1:
    return bus::unpermitted;
  default:
    return bus::unmapped;
  }
  // Some pending interrupts may now be enabled.
  // Some may also now be disabled.  Re-check.
  drive_interrupts();
  return bus::ok;
}

#endif // SIDTARGET_ARM
@


1.1
log
@* public snapshot of sid simulator
@
text
@d4 1
a4 1
// Copyright (C) 1999, 2000 Red Hat.
a25 1

a32 1

d43 21
a63 19
  switch (addr) {
  case 0:
    // IRQStatus.
    data = irq_pending & irq_enabled;
    break;
  case 1:
    // IRQRawStatus.
    data = irq_pending;
    break;
  case 2:
    // IRQEnable.
    data = irq_enabled;
    break;
  case 3:	// Reserved.
  case 4:
    return bus::unpermitted;
  default:
    return bus::unmapped;
  } 
d75 20
a94 18
  switch (addr) {
  case 0:
    // FIQStatus.
    data = fiq_pending && fiq_enabled;
    break;
  case 1:
    // FIQRawStatus.
    data = fiq_pending;
    break;
  case 2:
    // FIQEnable.
    data = fiq_enabled;
    break;
  case 3:	// Reserved.
    return bus::unpermitted;
  default:
    return bus::unmapped;
  } 
@

