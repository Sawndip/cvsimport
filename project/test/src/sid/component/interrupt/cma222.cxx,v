head	1.1;
access;
symbols
	sid-snapshot-20180601:1.1
	sid-snapshot-20180501:1.1
	sid-snapshot-20180401:1.1
	sid-snapshot-20180301:1.1
	sid-snapshot-20180201:1.1
	sid-snapshot-20180101:1.1
	sid-snapshot-20171201:1.1
	sid-snapshot-20171101:1.1
	sid-snapshot-20171001:1.1
	sid-snapshot-20170901:1.1
	sid-snapshot-20170801:1.1
	sid-snapshot-20170701:1.1
	sid-snapshot-20170601:1.1
	sid-snapshot-20170501:1.1
	sid-snapshot-20170401:1.1
	sid-snapshot-20170301:1.1
	sid-snapshot-20170201:1.1
	sid-snapshot-20170101:1.1
	sid-snapshot-20161201:1.1
	sid-snapshot-20161101:1.1
	sid-snapshot-20160901:1.1
	sid-snapshot-20160801:1.1
	sid-snapshot-20160701:1.1
	sid-snapshot-20160601:1.1
	sid-snapshot-20160501:1.1
	sid-snapshot-20160401:1.1
	sid-snapshot-20160301:1.1
	sid-snapshot-20160201:1.1
	sid-snapshot-20160101:1.1
	sid-snapshot-20151201:1.1
	sid-snapshot-20151101:1.1
	sid-snapshot-20151001:1.1
	sid-snapshot-20150901:1.1
	sid-snapshot-20150801:1.1
	sid-snapshot-20150701:1.1
	sid-snapshot-20150601:1.1
	sid-snapshot-20150501:1.1
	sid-snapshot-20150401:1.1
	sid-snapshot-20150301:1.1
	sid-snapshot-20150201:1.1
	sid-snapshot-20150101:1.1
	sid-snapshot-20141201:1.1
	sid-snapshot-20141101:1.1
	sid-snapshot-20141001:1.1
	sid-snapshot-20140901:1.1
	sid-snapshot-20140801:1.1
	sid-snapshot-20140701:1.1
	sid-snapshot-20140601:1.1
	sid-snapshot-20140501:1.1
	sid-snapshot-20140401:1.1
	sid-snapshot-20140301:1.1
	sid-snapshot-20140201:1.1
	sid-snapshot-20140101:1.1
	sid-snapshot-20131201:1.1
	sid-snapshot-20131101:1.1
	sid-snapshot-20131001:1.1
	sid-snapshot-20130901:1.1
	sid-snapshot-20130801:1.1
	sid-snapshot-20130701:1.1
	sid-snapshot-20130601:1.1
	sid-snapshot-20130501:1.1
	sid-snapshot-20130401:1.1
	sid-snapshot-20130301:1.1
	sid-snapshot-20130201:1.1
	sid-snapshot-20130101:1.1
	sid-snapshot-20121201:1.1
	sid-snapshot-20121101:1.1
	sid-snapshot-20121001:1.1
	sid-snapshot-20120901:1.1
	sid-snapshot-20120801:1.1
	sid-snapshot-20120701:1.1
	sid-snapshot-20120601:1.1
	sid-snapshot-20120501:1.1
	sid-snapshot-20120401:1.1
	sid-snapshot-20120301:1.1
	sid-snapshot-20120201:1.1
	sid-snapshot-20120101:1.1
	sid-snapshot-20111201:1.1
	sid-snapshot-20111101:1.1
	sid-snapshot-20111001:1.1
	sid-snapshot-20110901:1.1
	sid-snapshot-20110801:1.1
	sid-snapshot-20110701:1.1
	sid-snapshot-20110601:1.1
	sid-snapshot-20110501:1.1
	sid-snapshot-20110401:1.1
	sid-snapshot-20110301:1.1
	sid-snapshot-20110201:1.1
	sid-snapshot-20110101:1.1
	sid-snapshot-20101201:1.1
	sid-snapshot-20101101:1.1
	sid-snapshot-20101001:1.1
	sid-snapshot-20100901:1.1
	sid-snapshot-20100801:1.1
	sid-snapshot-20100701:1.1
	sid-snapshot-20100601:1.1
	sid-snapshot-20100501:1.1
	sid-snapshot-20100401:1.1
	sid-snapshot-20100301:1.1
	sid-snapshot-20100201:1.1
	sid-snapshot-20100101:1.1
	sid-snapshot-20091201:1.1
	sid-snapshot-20091101:1.1
	sid-snapshot-20091001:1.1
	sid-snapshot-20090901:1.1
	sid-snapshot-20090801:1.1
	sid-snapshot-20090701:1.1
	sid-snapshot-20090601:1.1
	sid-snapshot-20090501:1.1
	sid-snapshot-20090401:1.1
	sid-snapshot-20090301:1.1
	sid-snapshot-20090201:1.1
	sid-snapshot-20090101:1.1
	sid-snapshot-20081201:1.1
	sid-snapshot-20081101:1.1
	sid-snapshot-20081001:1.1
	sid-snapshot-20080901:1.1
	sid-snapshot-20080801:1.1
	sid-snapshot-20080701:1.1
	sid-snapshot-20080601:1.1
	sid-snapshot-20080501:1.1
	sid-snapshot-20080403:1.1
	sid-snapshot-20080401:1.1
	sid-snapshot-20080301:1.1
	sid-snapshot-20080201:1.1
	sid-snapshot-20080101:1.1
	sid-snapshot-20071201:1.1
	sid-snapshot-20071101:1.1
	sid-snapshot-20071001:1.1
	sid-20020905-branchpoint:1.1
	sid-20020905-branch:1.1.0.2
	cygnus_cvs_20020108_pre:1.1;
locks; strict;
comment	@// @;


1.1
date	2000.12.07.19.30.52;	author fche;	state Exp;
branches;
next	;


desc
@@


1.1
log
@* public snapshot of sid simulator
@
text
@// cma222.cxx - An implementation of the interrupt controller from the
// Cogent Computer CMA222 development board.  -*- C++ -*-

// Copyright (C) 1999, 2000 Red Hat.
// This file is part of SID and is licensed under the GPL.
// See the file COPYING.SID for conditions for redistribution.

// A more thorough description of this component may be found at
// <http://www.cogcomp.com/data_sheets/cma222ds.htm

#include "config.h"
#include "tconfig.h"
#include "components.h"

#include "cma222.h"

#if SIDTARGET_ARM

/*
 * ``NMI, PIRQ and TIRQ are "Sticky Bits". When they go true, the source bit will
 * remain true until a one is written to the corresponding bit in the Clear
 * Interrupt Source Register.''  -- deal with it.
 */
void
cma222IntController::irq_src_driven(host_int_4 val, host_int_4 bit_num)
{

  if (val)
    irq_pending |= 1 << bit_num;
  else
    {
      switch (bit_num) {
        case NMI:
        case PIRQ:
        case TIRQ:
          return;
      }
      irq_pending &= ~(1 << bit_num);
    }
  drive_irq_interrupts();
}

sid::bus::status
cma222IntController::irq_write_word(host_int_4 addr,
				    little_int_1 mask,
				    little_int_1 le_data)
{
  host_int_1 data = le_data;

  switch (addr) {
  case 0x8:
    // Clear Interrupt Source Register
    irq_pending &= ~data;
    break;
  case 0x18:
    // Interrupt Mask Register
    irq_enabled = data;
    break;
  default:
    if (addr >= 0 && addr < 0x38)
      return bus::unpermitted;
    else
      return bus::unmapped;
  }
  // Some pending interrupts may now be enabled.
  // Some may also now be disabled.  Re-check.
  drive_irq_interrupts ();

  return bus::ok;
}

sid::bus::status
cma222IntController::irq_read_word(host_int_4 addr,
				   little_int_1 mask,
				   little_int_1& le_data)
{
  host_int_1 data;

  switch (addr) {
  case 0x0:
    // Interrupt Source Register
    data = irq_pending & irq_enabled;
    break;
  case 0x10:
    // Interrupt Mask Register
    data = irq_enabled;
    break;
  // XXX: note that there is currently no way to *set* these values!
  // XXX: need to see how the IO modules on the real hardware do it
  // XXX: and provide a that works like that.
  case 0x20:
    // Interrupt Acknowledge Slot 1
    data = irqAckSlot[0];
    break;
  case 0x28:
    // Interrupt Acknowledge Slot 2
    data = irqAckSlot[1];
    break;
  case 0x30:
    // Interrupt Acknowledge Slot 3
    data = irqAckSlot[2];
    break;
  default:
    if (addr >= 0 && addr < 0x38)
      return bus::unpermitted;
    else
      return bus::unmapped;
  } 
  le_data = data;
  return bus::ok;
}

#endif // SIDTARGET_ARM
@
