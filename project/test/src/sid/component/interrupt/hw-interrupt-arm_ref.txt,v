head	1.2;
access;
symbols
	sid-snapshot-20180601:1.2
	sid-snapshot-20180501:1.2
	sid-snapshot-20180401:1.2
	sid-snapshot-20180301:1.2
	sid-snapshot-20180201:1.2
	sid-snapshot-20180101:1.2
	sid-snapshot-20171201:1.2
	sid-snapshot-20171101:1.2
	sid-snapshot-20171001:1.2
	sid-snapshot-20170901:1.2
	sid-snapshot-20170801:1.2
	sid-snapshot-20170701:1.2
	sid-snapshot-20170601:1.2
	sid-snapshot-20170501:1.2
	sid-snapshot-20170401:1.2
	sid-snapshot-20170301:1.2
	sid-snapshot-20170201:1.2
	sid-snapshot-20170101:1.2
	sid-snapshot-20161201:1.2
	sid-snapshot-20161101:1.2
	sid-snapshot-20160901:1.2
	sid-snapshot-20160801:1.2
	sid-snapshot-20160701:1.2
	sid-snapshot-20160601:1.2
	sid-snapshot-20160501:1.2
	sid-snapshot-20160401:1.2
	sid-snapshot-20160301:1.2
	sid-snapshot-20160201:1.2
	sid-snapshot-20160101:1.2
	sid-snapshot-20151201:1.2
	sid-snapshot-20151101:1.2
	sid-snapshot-20151001:1.2
	sid-snapshot-20150901:1.2
	sid-snapshot-20150801:1.2
	sid-snapshot-20150701:1.2
	sid-snapshot-20150601:1.2
	sid-snapshot-20150501:1.2
	sid-snapshot-20150401:1.2
	sid-snapshot-20150301:1.2
	sid-snapshot-20150201:1.2
	sid-snapshot-20150101:1.2
	sid-snapshot-20141201:1.2
	sid-snapshot-20141101:1.2
	sid-snapshot-20141001:1.2
	sid-snapshot-20140901:1.2
	sid-snapshot-20140801:1.2
	sid-snapshot-20140701:1.2
	sid-snapshot-20140601:1.2
	sid-snapshot-20140501:1.2
	sid-snapshot-20140401:1.2
	sid-snapshot-20140301:1.2
	sid-snapshot-20140201:1.2
	sid-snapshot-20140101:1.2
	sid-snapshot-20131201:1.2
	sid-snapshot-20131101:1.2
	sid-snapshot-20131001:1.2
	sid-snapshot-20130901:1.2
	sid-snapshot-20130801:1.2
	sid-snapshot-20130701:1.2
	sid-snapshot-20130601:1.2
	sid-snapshot-20130501:1.2
	sid-snapshot-20130401:1.2
	sid-snapshot-20130301:1.2
	sid-snapshot-20130201:1.2
	sid-snapshot-20130101:1.2
	sid-snapshot-20121201:1.2
	sid-snapshot-20121101:1.2
	sid-snapshot-20121001:1.2
	sid-snapshot-20120901:1.2
	sid-snapshot-20120801:1.2
	sid-snapshot-20120701:1.2
	sid-snapshot-20120601:1.2
	sid-snapshot-20120501:1.2
	sid-snapshot-20120401:1.2
	sid-snapshot-20120301:1.2
	sid-snapshot-20120201:1.2
	sid-snapshot-20120101:1.2
	sid-snapshot-20111201:1.2
	sid-snapshot-20111101:1.2
	sid-snapshot-20111001:1.2
	sid-snapshot-20110901:1.2
	sid-snapshot-20110801:1.2
	sid-snapshot-20110701:1.2
	sid-snapshot-20110601:1.2
	sid-snapshot-20110501:1.2
	sid-snapshot-20110401:1.2
	sid-snapshot-20110301:1.2
	sid-snapshot-20110201:1.2
	sid-snapshot-20110101:1.2
	sid-snapshot-20101201:1.2
	sid-snapshot-20101101:1.2
	sid-snapshot-20101001:1.2
	sid-snapshot-20100901:1.2
	sid-snapshot-20100801:1.2
	sid-snapshot-20100701:1.2
	sid-snapshot-20100601:1.2
	sid-snapshot-20100501:1.2
	sid-snapshot-20100401:1.2
	sid-snapshot-20100301:1.2
	sid-snapshot-20100201:1.2
	sid-snapshot-20100101:1.2
	sid-snapshot-20091201:1.2
	sid-snapshot-20091101:1.2
	sid-snapshot-20091001:1.2
	sid-snapshot-20090901:1.2
	sid-snapshot-20090801:1.2
	sid-snapshot-20090701:1.2
	sid-snapshot-20090601:1.2
	sid-snapshot-20090501:1.2
	sid-snapshot-20090401:1.2
	sid-snapshot-20090301:1.2
	sid-snapshot-20090201:1.2
	sid-snapshot-20090101:1.2
	sid-snapshot-20081201:1.2
	sid-snapshot-20081101:1.2
	sid-snapshot-20081001:1.2
	sid-snapshot-20080901:1.2
	sid-snapshot-20080801:1.2
	sid-snapshot-20080701:1.2
	sid-snapshot-20080601:1.2
	sid-snapshot-20080501:1.2
	sid-snapshot-20080403:1.2
	sid-snapshot-20080401:1.2
	sid-snapshot-20080301:1.2
	sid-snapshot-20080201:1.2
	sid-snapshot-20080101:1.2
	sid-snapshot-20071201:1.2
	sid-snapshot-20071101:1.2
	sid-snapshot-20071001:1.2
	sid-20020905-branchpoint:1.2
	sid-20020905-branch:1.2.0.2
	cygnus_cvs_20020108_pre:1.2;
locks; strict;
comment	@# @;


1.2
date	2001.08.03.01.30.18;	author bje;	state Exp;
branches;
next	1.1;

1.1
date	2000.12.07.19.30.52;	author fche;	state Exp;
branches;
next	;


desc
@@


1.2
log
@* Freshly generated documentation.
* ChangeLog entries to follow later.
@
text
@     hw-interrupt-arm/ref (libinterrupt.la :: interrupt_component_library)

Synopsis:

   This component simulates the ARM reference interrupt controller.

     ----------------------------------------------------------------------

Functionality:

  Modelling:

   The interrupt controller model features a fast interrupt line (to be
   attached to the fIRQ line of the CPU) and 32 general purpose interrupts.

   This component models ARM's abstract reference interrupt controller, which
   is not exactly the same as the one found on the PID7T evaluation board.
   The version on the PID7T board has an additional "FIQSelect" register, and
   only 15 IRQ source pins.

   +------------------------------------------------------+
   |                      Behaviors                       |
   |------------------------------------------------------|
   |     reset|When the reset input pin is driven, this   |
   |          |component is reset to the hardware's normal|
   |          |power-up state.                            |
   |----------+-------------------------------------------|
   |  register|There are two available register busses for|
   |    access|this model. The normal IRQ registers are   |
   |          |available on the irq-registers bus, and the|
   |          |FIQ (fast) registers are available on the  |
   |          |fiq-registers bus. Typically, one would map|
   |          |the fiq-registers with an offset of 0x100  |
   |          |from the irq-registers. This allows one to |
   |          |map other devices between these registers. |
   |          |                                           |
   |          |When the irq-registers bus is accessed, the|
   |          |appropriate 32-bit control register is read|
   |          |or written.                                |
   |          |                                           |
   |          |+-----------------------------------------+|
   |          || address | read         | write          ||
   |          ||---------+--------------+----------------||
   |          || 0       | IRQStatus    | (reserved)     ||
   |          ||---------+--------------+----------------||
   |          || 0x4     | IRQRawStatus | (reserved)     ||
   |          ||---------+--------------+----------------||
   |          || 0x8     | IRQEnable    | IRQEnableSet   ||
   |          ||---------+--------------+----------------||
   |          || 0xC     | (reserved)   | IRQEnableClear ||
   |          ||---------+--------------+----------------||
   |          || 0x10    | (reserved)   | IRQSoft        ||
   |          |+-----------------------------------------+|
   |          |                                           |
   |          |When the fiq-registers bus is accessed, the|
   |          |appropriate 32-bit control register is read|
   |          |or written.                                |
   |          |                                           |
   |          |+-----------------------------------------+|
   |          || address | read         | write          ||
   |          ||---------+--------------+----------------||
   |          || 0x0     | FIQStatus    | (reserved)     ||
   |          ||---------+--------------+----------------||
   |          || 0x4     | FIQRawStatus | (reserved)     ||
   |          ||---------+--------------+----------------||
   |          || 0x8     | FIQEnable    | FIQEnableSet   ||
   |          ||---------+--------------+----------------||
   |          || 0xC     | (reserved)   | FIQEnableClear ||
   |          |+-----------------------------------------+|
   |          |                                           |
   |          |Several registers are also available as    |
   |          |watchable attributes.                      |
   |----------+-------------------------------------------|
   | interrupt|When any interrupt source is signalled, or |
   |processing|interrupt-enabled masks are modified,      |
   |          |pending interrupts are processed. There are|
   |          |three interrupt sources: the               |
   |          |interrupt-source-N input pins, the         |
   |          |fast-interrupt-source input pin, and the   |
   |          |special software interrupt register.       |
   |          |Subject to the then-current                |
   |          |interrupt-enabling registers, an interrupt |
   |          |and/or fast-interrupt output pin may be    |
   |          |driven.                                    |
   |          |                                           |
   |          |The polarity for the input interrupt source|
   |          |pins is positive, meaning that non-zero    |
   |          |values are interpreted as "asserted". On   |
   |          |the other hand, the polarity for the output|
   |          |interrupt pins is negative, meaning that   |
   |          |zero values are to be interpreted as       |
   |          |"asserted".                                |
   |          |                                           |
   |          |Similarly named attributes may be used to  |
   |          |generate/monitor pin traffic.              |
   +------------------------------------------------------+

   +-------------------------------------------------+
   |                 SID Conventions                 |
   |-------------------------------------------------|
   |    functional | supported | This is a           |
   |               |           | functional          |
   |               |           | component.          |
   |---------------+-----------+---------------------|
   |         state | supported | This component      |
   |  save/restore |           | supports state      |
   |               |           | save/restore        |
   |---------------+-----------+---------------------|
   | triggerpoints | supported | This component      |
   |               |           | supports            |
   |               |           | triggerpoints       |
   +-------------------------------------------------+

     ----------------------------------------------------------------------

Environment:

   Related components

   The interrupt controller typically sits between a CPU component, which
   usually has only one interrupt pin, and an array of other peripheral
   components. Each of the peripheral components is capable of generating its
   own interrupt. The following configuration file fragment demonstrates how
   to connect to simple timers into the interrupt subsystem of a more
   complete simulation:

         new hw-cpu-arm7t cpu
         new hw-timer-arm/ref-nosched timer1
         new hw-timer-arm/ref-nosched timer2
         new hw-interrupt-arm/ref intcontrl
         connect-pin timer1 interrupt -> intcontrl interrupt-source-0
         connect-pin timer2 interrupt -> intcontrl interrupt-source-1
         connect-pin intcontrl interrupt -> cpu nirq

     ----------------------------------------------------------------------

Component Reference:

  Component: hw-interrupt-arm/ref

   +-------------------------------------------------------+
   |                         pins                          |
   |-------------------------------------------------------|
   |         name          |direction|legalvalues|behaviors|
   |-----------------------+---------+-----------+---------|
   |reset                  |in       |any        |reset    |
   |-----------------------+---------+-----------+---------|
   |fast-interrupt-source  |in       |any        |interrupt|
   |                       |         |           |handling |
   |-----------------------+---------+-----------+---------|
   |interrupt-source-[0,31]|in       |any        |interrupt|
   |                       |         |           |handling |
   |-----------------------+---------+-----------+---------|
   |fast-interrupt         |out      |0..1       |interrupt|
   |                       |         |           |handling |
   |-----------------------+---------+-----------+---------|
   |interrupt              |out      |0..1       |interrupt|
   |                       |         |           |handling |
   +-------------------------------------------------------+

   +-------------------------------------------------+
   |                      buses                      |
   |-------------------------------------------------|
   |    name     |addresses| accesses |  behaviors   |
   |-------------+---------+----------+--------------|
   |irq-registers|0x0..0x1C|read/write|register      |
   |             |         |          |access        |
   |-------------+---------+----------+--------------|
   |fiq-registers|0x0..0x0F|read/write|register      |
   |             |         |          |access        |
   +-------------------------------------------------+

   +--------------------------------------------------------+
   |                       attributes                       |
   |--------------------------------------------------------|
   |       name        |category | legal |default|behaviors||
   |                   |         |values | value |         ||
   |-------------------+---------+-------+-------+---------||
   |interrupt          |pin      |numeric|-      |interrupt||
   |                   |watchable|       |       |handling ||
   |-------------------+---------+-------+-------+---------||
   |fast-interrupt     |pin      |numeric|-      |interrupt||
   |                   |watchable|       |       |handling ||
   |-------------------+---------+-------+-------+---------||
   |irq-raw-status     |register |numeric|-      |register ||
   |                   |watchable|       |       |access   ||
   |-------------------+---------+-------+-------+---------||
   |irq-enable-register|register |numeric|-      |register ||
   |                   |watchable|       |       |access   ||
   |-------------------+---------+-------+-------+---------||
   |fiq-raw-status     |register |numeric|-      |register ||
   |                   |watchable|       |       |access   ||
   |-------------------+---------+-------+-------+---------||
   |fiq-enable-register|register |numeric|-      |register ||
   |                   |watchable|       |       |access   ||
   +--------------------------------------------------------+

     ----------------------------------------------------------------------

References:

   ARM Technical Documentation
@


1.1
log
@* public snapshot of sid simulator
@
text
@d1 1
a1 2
* Name
  hw-interrupt-arm/ref
d3 1
a3 2
* Synopsis
  This component simulates the ARM reference interrupt controller.
d5 1
a5 122
  Pins: reset interrupt fast-interrupt fast-interrupt-source
        interrupt-source-0..interrupt-source-31
  Buses: irq-registers fiq-registers
  Attributes: interrupt fast-interrupt irq-raw-status irq-enable-register
	fiq-raw-status fiq-enable-register

  Library: libinterrupt.la
  Symbol name: interrupt_component_library

* Functionality

  - Modelling
   
    * The interrupt controller model features a fast interrupt line
      (to be attached to the fIRQ line of the CPU) and 32 general
      purpose interrupts.

    * This component models ARM's abstract reference interrupt
      controller, which is not exactly the same as the one found on
      the PID7T evaluation board.  The version on the PID7T board has
      an additional "FIQSelect" register, and only 15 IRQ source pins.

  - Behaviors

    * Reset

      When the "reset" input pin is driven, this component is reset to
      the hardware's normal power-up state.

    * Register access

      There are two available register busses for this model.  The normal
      IRQ registers are available on the "irq-registers" bus, and the FIQ
      (fast) registers are available on the "fiq-registers" bus.  Typically,
      one would map the "fiq-registers" with an offset of 0x100 from the
      "irq-registers". This allows one to map other devices between these
      registers.

      When the "irq-registers" bus is accessed, the appropriate 32-bit
      control register is read or written.

	address		read		write
	0		IRQStatus	(reserved)
	0x4		IRQRawStatus	(reserved)
	0x8		IRQEnable	IRQEnableSet
	0xC		(reserved)	IRQEnableClear
	0x10		(reserved)	IRQSoft

      When the "fiq-registers" bus is accessed, the appropriate 32-bit
      control register is read or written.

	address		read		write
	0x0		FIQStatus	(reserved)
	0x4		FIQRawStatus	(reserved)
	0x8		FIQEnable	FIQEnableSet
	0xC		(reserved)	FIQEnableClear

      Several registers are also available as watchable attributes.

    * Interrupt processing

      When any interrupt source is signalled, or interrupt-enabled
      masks are modified, pending interrupts are processed.  There are
      three interrupt sources: the "interrupt-source-N" input pins,
      the "fast-interrupt-source" input pin, and the special software
      interrupt register.  Subject to the then-current
      interrupt-enabling registers, an "interrupt" and/or
      "fast-interrupt" output pin may be driven.

      The polarity for the input interrupt source pins is positive,
      meaning that non-zero values are interpreted as "asserted".  On
      the other hand, the polarity for the output interrupt pins is
      negative, meaning that zero values are to be interpreted as
      "asserted".  

      Similarly named attributes may be used to generate/monitor pin
      traffic.

  - SID conventions
  
  * This is a functional component.
  * This component supports state save/restore and triggerpoints.

* Environment

  - Related components
    The interrupt controller typically sits between a CPU component, which 
    usually has only one interrupt pin, and an array of other peripheral 
    components.  Each of the peripheral components is capable of generating 
    its own interrupt.  The following configuration file fragment
    demonstrates how to connect to simple timers into the interrupt
    subsystem of a more complete simulation:

	new hw-cpu-arm7t cpu
	new hw-timer-arm/ref-nosched timer1
	new hw-timer-arm/ref-nosched timer2
	new hw-interrupt-arm/ref intcontrl
        connect-pin timer1 interrupt -> intcontrl interrupt-source-0
	connect-pin timer2 interrupt -> intcontrl interrupt-source-1
	connect-pin intcontrl interrupt -> cpu nirq

* SID interface reference

  - low level:
    * pins
      - reset | input | any | reset
      - fast-interrupt-source | input | any | interrupt handling
      - interrupt-source-[0,31] | input | any | interrupt handling
      - fast-interrupt | output | 0,1 | interrupt handling
      - interrupt | output | 0,1 | interrupt handling

    * buses
      - irq-registers | 0x0 - 0x1C | read/write | register access
      - fiq-registers | 0x0 - 0x0F | read/write | register access

    * attributes
      - interrupt | pin watchable | numeric | n/a | interrupt handling
      - fast-interrupt | pin watchable | numeric | n/a | interrupt handling
      - irq-raw-status | register watchable | numeric | n/a | register access
      - irq-enable-register | register watchable | numeric | n/a | register access
      - fiq-raw-status | register watchable | numeric | n/a | register access
      - fiq-enable-register | register watchable | numeric | n/a | register access
d7 1
a7 2
* References
  <http://www.arm.com/Documentation/UserMans/rps/#int>
d9 188
d198 5
@

