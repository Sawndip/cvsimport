head	1.2;
access;
symbols
	sid-snapshot-20180601:1.2
	sid-snapshot-20180501:1.2
	sid-snapshot-20180401:1.2
	sid-snapshot-20180301:1.2
	sid-snapshot-20180201:1.2
	sid-snapshot-20180101:1.2
	sid-snapshot-20171201:1.2
	sid-snapshot-20171101:1.2
	sid-snapshot-20171001:1.2
	sid-snapshot-20170901:1.2
	sid-snapshot-20170801:1.2
	sid-snapshot-20170701:1.2
	sid-snapshot-20170601:1.2
	sid-snapshot-20170501:1.2
	sid-snapshot-20170401:1.2
	sid-snapshot-20170301:1.2
	sid-snapshot-20170201:1.2
	sid-snapshot-20170101:1.2
	sid-snapshot-20161201:1.2
	sid-snapshot-20161101:1.2
	sid-snapshot-20160901:1.2
	sid-snapshot-20160801:1.2
	sid-snapshot-20160701:1.2
	sid-snapshot-20160601:1.2
	sid-snapshot-20160501:1.2
	sid-snapshot-20160401:1.2
	sid-snapshot-20160301:1.2
	sid-snapshot-20160201:1.2
	sid-snapshot-20160101:1.2
	sid-snapshot-20151201:1.2
	sid-snapshot-20151101:1.2
	sid-snapshot-20151001:1.2
	sid-snapshot-20150901:1.2
	sid-snapshot-20150801:1.2
	sid-snapshot-20150701:1.2
	sid-snapshot-20150601:1.2
	sid-snapshot-20150501:1.2
	sid-snapshot-20150401:1.2
	sid-snapshot-20150301:1.2
	sid-snapshot-20150201:1.2
	sid-snapshot-20150101:1.2
	sid-snapshot-20141201:1.2
	sid-snapshot-20141101:1.2
	sid-snapshot-20141001:1.2
	sid-snapshot-20140901:1.2
	sid-snapshot-20140801:1.2
	sid-snapshot-20140701:1.2
	sid-snapshot-20140601:1.2
	sid-snapshot-20140501:1.2
	sid-snapshot-20140401:1.2
	sid-snapshot-20140301:1.2
	sid-snapshot-20140201:1.2
	sid-snapshot-20140101:1.2
	sid-snapshot-20131201:1.2
	sid-snapshot-20131101:1.2
	sid-snapshot-20131001:1.2
	sid-snapshot-20130901:1.2
	sid-snapshot-20130801:1.2
	sid-snapshot-20130701:1.2
	sid-snapshot-20130601:1.2
	sid-snapshot-20130501:1.2
	sid-snapshot-20130401:1.2
	sid-snapshot-20130301:1.2
	sid-snapshot-20130201:1.2
	sid-snapshot-20130101:1.2
	sid-snapshot-20121201:1.2
	sid-snapshot-20121101:1.2
	sid-snapshot-20121001:1.2
	sid-snapshot-20120901:1.2
	sid-snapshot-20120801:1.2
	sid-snapshot-20120701:1.2
	sid-snapshot-20120601:1.2
	sid-snapshot-20120501:1.2
	sid-snapshot-20120401:1.2
	sid-snapshot-20120301:1.2
	sid-snapshot-20120201:1.2
	sid-snapshot-20120101:1.2
	sid-snapshot-20111201:1.2
	sid-snapshot-20111101:1.2
	sid-snapshot-20111001:1.2
	sid-snapshot-20110901:1.2
	sid-snapshot-20110801:1.2
	sid-snapshot-20110701:1.2
	sid-snapshot-20110601:1.2
	sid-snapshot-20110501:1.2
	sid-snapshot-20110401:1.2
	sid-snapshot-20110301:1.2
	sid-snapshot-20110201:1.2
	sid-snapshot-20110101:1.2
	sid-snapshot-20101201:1.2
	sid-snapshot-20101101:1.2
	sid-snapshot-20101001:1.2
	sid-snapshot-20100901:1.2
	sid-snapshot-20100801:1.2
	sid-snapshot-20100701:1.2
	sid-snapshot-20100601:1.2
	sid-snapshot-20100501:1.2
	sid-snapshot-20100401:1.2
	sid-snapshot-20100301:1.2
	sid-snapshot-20100201:1.2
	sid-snapshot-20100101:1.2
	sid-snapshot-20091201:1.2
	sid-snapshot-20091101:1.2
	sid-snapshot-20091001:1.2
	sid-snapshot-20090901:1.2
	sid-snapshot-20090801:1.2
	sid-snapshot-20090701:1.2
	sid-snapshot-20090601:1.2
	sid-snapshot-20090501:1.2
	sid-snapshot-20090401:1.2
	sid-snapshot-20090301:1.2
	sid-snapshot-20090201:1.2
	sid-snapshot-20090101:1.2
	sid-snapshot-20081201:1.2
	sid-snapshot-20081101:1.2
	sid-snapshot-20081001:1.2
	sid-snapshot-20080901:1.2
	sid-snapshot-20080801:1.2
	sid-snapshot-20080701:1.2
	sid-snapshot-20080601:1.2
	sid-snapshot-20080501:1.2
	sid-snapshot-20080403:1.2
	sid-snapshot-20080401:1.2
	sid-snapshot-20080301:1.2
	sid-snapshot-20080201:1.2
	sid-snapshot-20080101:1.2
	sid-snapshot-20071201:1.2
	sid-snapshot-20071101:1.2
	sid-snapshot-20071001:1.2
	sid-20020905-branchpoint:1.2
	sid-20020905-branch:1.2.0.2
	cygnus_cvs_20020108_pre:1.2;
locks; strict;
comment	@// @;


1.2
date	2001.04.18.19.50.00;	author jjohnstn;	state Exp;
branches;
next	1.1;

1.1
date	2000.12.07.19.30.50;	author fche;	state Exp;
branches;
next	;


desc
@@


1.2
log
@
2001-04-18  Jeff Johnston  <jjohnstn@@redhat.com>

        * gloss.cxx (gloss32::reset): Move check for std streams into
        hostops::close.
        * hostops.cxx (hostops::close): Don't close host std streams.
@
text
@// hostops.cxx - System call inteface routines.  -*- C++ -*-

// Copyright (C) 1999, 2000 Red Hat.
// This file is part of SID and is licensed under the GPL.
// See the file COPYING.SID for conditions for redistribution.

#include "config.h"

#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <errno.h>
#include <stdio.h>
#include <cassert>

#include <sidtypes.h>

#include "hostops.h"

int
hostops::open_flags_to_host (int flags)
{
  int host_flags = 0;

  switch (flags & open_acc_mode)
    {
    case open_read_only : host_flags = O_RDONLY; break;
    case open_write_only : host_flags = O_WRONLY; break;
    case open_read_write : host_flags = O_RDWR; break;
    default : assert (("bad open access mode", 0));
				// expr on left hand of comma has no effect.
    }

#ifdef O_TEXT
  if ((flags & open_text) != 0)
    host_flags |= O_TEXT;
#endif
#ifdef O_BINARY
  if ((flags & open_text) == 0)
    host_flags |= O_BINARY;
#endif

  if ((flags & open_create) != 0)
    host_flags |= O_CREAT;

  if ((flags & open_trunc) != 0)
    host_flags |= O_TRUNC;

  if ((flags & open_append) != 0)
    host_flags |= O_APPEND;

#ifdef O_NONBLOCK
  if ((flags & open_nonblock) != 0)
    host_flags |= O_NONBLOCK;
#elif defined (O_NDELAY)
  if ((flags & open_nonblock) != 0)
    host_flags |= O_NONBLOCK;
#endif

  return host_flags;
}

bool
hostops::open (const char* filename, int flags, int& result_fd, int& errcode)
{
  int fd;

  fd = ::open (filename, open_flags_to_host (flags));
  if (fd < 0)
    {
      errcode = errno;
      return false;
    }
  result_fd = fd;
  return true;
}

bool
hostops::open (const char* filename, int flags, int mode, int& result_fd, int& errcode)
{
  int fd;

  fd = ::open (filename, open_flags_to_host (flags), mode);
  if (fd < 0)
    {
      errcode = errno;
      return false;
    }
  result_fd = fd;
  return true;
}

bool
hostops::close (int fd, int& errcode)
{
  /* don't close the host's stdin, stdout, and stderr */
  if (fd > 2)
    {	
      if (::close (fd) < 0)
        {
          errcode = errno;
          return false;
        }
    }
  return true;
}

bool
hostops::read32 (int fd, char* buf, size32 len,
		 size32& len_read, int& errcode)
{
  ssize_t rc = ::read (fd, buf, len);
  if (rc == -1)
    {
      errcode = errno;
      return false;
    }
  len_read = rc;
  return true;
}

bool
hostops::write32 (int fd, const char* buf, size32 len,
		  size32& len_written, int& errcode)
{
  ssize_t rc = ::write (fd, buf, len);
  if (rc == -1)
    {
      errcode = errno;
      return false;
    }
  len_written = rc;
  return true;
}

bool
hostops::remove (const char* filename, int& errcode)
{
  if (::unlink (filename) < 0)
    {
      errcode = errno;
      return false;
    }
  return true;
}

bool
hostops::rename (const char* oldname, const char* newname, int& errcode)
{
  if (::rename (oldname, newname) < 0)
    {
      errcode = errno;
      return false;
    }
  return true;
}

bool
hostops::lseek32 (int fd, offset32 offset, seek_type how, size32& result, int& errcode)
{
  offset32 result_tmp;
  int int_how;

  switch (how)
    {
    case seek_set : int_how = SEEK_SET; break;
    case seek_cur : int_how = SEEK_CUR; break;
    case seek_end : int_how = SEEK_END; break;
    default : errcode = EINVAL; return false;
    }

  result_tmp = ::lseek (fd, offset, int_how);
  if (result_tmp == -1)
    {
      errcode = errno;
      return false;
    }
  result = result_tmp;
  return true;
}

bool
hostops::getsize32 (int fd, size32& size, int& errcode)
{
  struct stat st;
  if (fstat (fd, &st) < 0)
    {
      errcode = errno;
      return false;
    }
  size = st.st_size;
  return true;
}

bool
hostops::tmpnam (char* filename, int& errcode)
{
  char* filename_ptr;

  filename_ptr = ::tmpnam (filename);
  if (filename_ptr == NULL)
    {
      errcode = errno;
      return false;
    }
  return true;
}
@


1.1
log
@* public snapshot of sid simulator
@
text
@d97 8
a104 4
  if (::close (fd) < 0)
    {
      errcode = errno;
      return false;
@

