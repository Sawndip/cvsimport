head	1.13;
access;
symbols
	sid-snapshot-20180601:1.13
	sid-snapshot-20180501:1.13
	sid-snapshot-20180401:1.13
	sid-snapshot-20180301:1.13
	sid-snapshot-20180201:1.13
	sid-snapshot-20180101:1.13
	sid-snapshot-20171201:1.13
	sid-snapshot-20171101:1.13
	sid-snapshot-20171001:1.13
	sid-snapshot-20170901:1.13
	sid-snapshot-20170801:1.13
	sid-snapshot-20170701:1.13
	sid-snapshot-20170601:1.13
	sid-snapshot-20170501:1.13
	sid-snapshot-20170401:1.13
	sid-snapshot-20170301:1.13
	sid-snapshot-20170201:1.13
	sid-snapshot-20170101:1.13
	sid-snapshot-20161201:1.13
	sid-snapshot-20161101:1.13
	sid-snapshot-20160901:1.13
	sid-snapshot-20160801:1.13
	sid-snapshot-20160701:1.13
	sid-snapshot-20160601:1.13
	sid-snapshot-20160501:1.13
	sid-snapshot-20160401:1.13
	sid-snapshot-20160301:1.13
	sid-snapshot-20160201:1.13
	sid-snapshot-20160101:1.13
	sid-snapshot-20151201:1.13
	sid-snapshot-20151101:1.13
	sid-snapshot-20151001:1.13
	sid-snapshot-20150901:1.13
	sid-snapshot-20150801:1.13
	sid-snapshot-20150701:1.13
	sid-snapshot-20150601:1.13
	sid-snapshot-20150501:1.13
	sid-snapshot-20150401:1.13
	sid-snapshot-20150301:1.13
	sid-snapshot-20150201:1.13
	sid-snapshot-20150101:1.13
	sid-snapshot-20141201:1.13
	sid-snapshot-20141101:1.13
	sid-snapshot-20141001:1.13
	sid-snapshot-20140901:1.13
	sid-snapshot-20140801:1.13
	sid-snapshot-20140701:1.13
	sid-snapshot-20140601:1.13
	sid-snapshot-20140501:1.13
	sid-snapshot-20140401:1.13
	sid-snapshot-20140301:1.13
	sid-snapshot-20140201:1.13
	sid-snapshot-20140101:1.13
	sid-snapshot-20131201:1.13
	sid-snapshot-20131101:1.13
	sid-snapshot-20131001:1.13
	sid-snapshot-20130901:1.13
	sid-snapshot-20130801:1.13
	sid-snapshot-20130701:1.13
	sid-snapshot-20130601:1.13
	sid-snapshot-20130501:1.13
	sid-snapshot-20130401:1.13
	sid-snapshot-20130301:1.13
	sid-snapshot-20130201:1.13
	sid-snapshot-20130101:1.13
	sid-snapshot-20121201:1.13
	sid-snapshot-20121101:1.13
	sid-snapshot-20121001:1.13
	sid-snapshot-20120901:1.13
	sid-snapshot-20120801:1.13
	sid-snapshot-20120701:1.13
	sid-snapshot-20120601:1.13
	sid-snapshot-20120501:1.13
	sid-snapshot-20120401:1.13
	sid-snapshot-20120301:1.13
	sid-snapshot-20120201:1.13
	sid-snapshot-20120101:1.13
	sid-snapshot-20111201:1.13
	sid-snapshot-20111101:1.13
	sid-snapshot-20111001:1.13
	sid-snapshot-20110901:1.13
	sid-snapshot-20110801:1.13
	sid-snapshot-20110701:1.13
	sid-snapshot-20110601:1.13
	sid-snapshot-20110501:1.13
	sid-snapshot-20110401:1.13
	sid-snapshot-20110301:1.13
	sid-snapshot-20110201:1.13
	sid-snapshot-20110101:1.13
	sid-snapshot-20101201:1.13
	sid-snapshot-20101101:1.13
	sid-snapshot-20101001:1.13
	sid-snapshot-20100901:1.13
	sid-snapshot-20100801:1.13
	sid-snapshot-20100701:1.13
	sid-snapshot-20100601:1.13
	sid-snapshot-20100501:1.13
	sid-snapshot-20100401:1.13
	sid-snapshot-20100301:1.13
	sid-snapshot-20100201:1.13
	sid-snapshot-20100101:1.13
	sid-snapshot-20091201:1.13
	sid-snapshot-20091101:1.13
	sid-snapshot-20091001:1.13
	sid-snapshot-20090901:1.13
	sid-snapshot-20090801:1.13
	sid-snapshot-20090701:1.13
	sid-snapshot-20090601:1.13
	sid-snapshot-20090501:1.13
	sid-snapshot-20090401:1.13
	sid-snapshot-20090301:1.13
	sid-snapshot-20090201:1.13
	sid-snapshot-20090101:1.13
	sid-snapshot-20081201:1.13
	sid-snapshot-20081101:1.13
	sid-snapshot-20081001:1.13
	sid-snapshot-20080901:1.13
	sid-snapshot-20080801:1.13
	sid-snapshot-20080701:1.13
	sid-snapshot-20080601:1.13
	sid-snapshot-20080501:1.13
	sid-snapshot-20080403:1.13
	sid-snapshot-20080401:1.13
	sid-snapshot-20080301:1.13
	sid-snapshot-20080201:1.13
	sid-snapshot-20080101:1.13
	sid-snapshot-20071201:1.13
	sid-snapshot-20071101:1.13
	sid-snapshot-20071001:1.13
	sid-20020905-branchpoint:1.11
	sid-20020905-branch:1.11.0.2
	cygnus_cvs_20020108_pre:1.8;
locks; strict;
comment	@ * @;


1.13
date	2006.07.14.19.44.17;	author brolley;	state Exp;
branches;
next	1.12;

1.12
date	2005.08.19.19.44.46;	author brolley;	state Exp;
branches;
next	1.11;

1.11
date	2002.09.05.18.11.16;	author bje;	state Exp;
branches;
next	1.10;

1.10
date	2002.06.03.20.00.37;	author jjohnstn;	state Exp;
branches;
next	1.9;

1.9
date	2002.01.31.23.03.53;	author bje;	state Exp;
branches;
next	1.8;

1.8
date	2002.01.03.01.42.02;	author bje;	state Exp;
branches;
next	1.7;

1.7
date	2001.11.27.22.59.06;	author fitzsim;	state Exp;
branches;
next	1.6;

1.6
date	2001.10.31.23.27.52;	author vmakarov;	state Exp;
branches;
next	1.5;

1.5
date	2001.09.26.03.56.05;	author bje;	state Exp;
branches;
next	1.4;

1.4
date	2001.09.04.03.43.07;	author bje;	state Exp;
branches;
next	1.3;

1.3
date	2001.08.03.06.02.44;	author mrg;	state Exp;
branches;
next	1.2;

1.2
date	2001.01.07.04.51.31;	author mrg;	state Exp;
branches;
next	1.1;

1.1
date	2000.12.07.19.30.50;	author fche;	state Exp;
branches;
next	;


desc
@@


1.13
log
@2006-07-14  Dave Brolley  <brolley@@redhat.com>

        * gloss.h (rx_eof_pin): New member of gloss32.
        * gloss.cxx (gloss32): Add debug-rx-eof pin.
        (read): Check rx_eof_pin.
@
text
@// gloss.h - Basic process emulation plus ROM monitor support.
// -*- C++ -*-

// Copyright (C) 1999, 2000, 2001, 2002, 2005, 2006 Red Hat.
// This file is part of SID and is licensed under the GPL.
// See the file COPYING.SID for conditions for redistribution.

// The name "gloss" is derived from the "libgloss" library.
// "gloss" is an acronym for: GNU Low-level Operating System Support.
// However, this header [and this directory] provides a base for all such
// components.
//
// Notes:
// - It defaults to the host cin/cout/cerr for target file handles 0/1/2.
//
// TODOs:
// - Add support for one component serving several cpus.
// - Currently uses blocking I/O.

#ifndef GLOSS_H
#define GLOSS_H

#include <sidtypes.h>
#include <sidcomp.h>
#include <sidso.h>

#include <sidcomputil.h>
#include <sidattrutil.h>
#include <sidpinutil.h>
#include <sidbusutil.h>
#include <sidcpuutil.h>

#include "hostops.h"

using std::vector;
using std::string;
using std::map;
using std::cerr;
using std::ios;
using std::endl;

using sid::component;
using sid::bus;
using sid::host_int_1;
using sid::host_int_4;
using sid::host_int_8;
using sid::signed_host_int_4;
using sid::signed_host_int_8;

using sidutil::fixed_attribute_map_component;
using sidutil::fixed_accessor_map_component;
using sidutil::fixed_pin_map_component;
using sidutil::no_bus_component;
using sidutil::fixed_relation_map_component;
using sidutil::configurable_component;
using sidutil::callback_pin;
using sidutil::output_pin;
using sidutil::input_pin;


class gloss32: public virtual component,
	       protected virtual fixed_attribute_map_component,
	       protected fixed_accessor_map_component,
	       protected virtual fixed_pin_map_component,
	       protected no_bus_component,
	       protected virtual fixed_relation_map_component,
	       protected configurable_component
{
public:

  gloss32();
  virtual ~gloss32() throw();

protected:

  // The cpu we're connected to.
  component* cpu;
  // The main SID component.
  component* main;
  // Access to the cpu's memory.
  bus* cpu_memory_bus;
  // The endian of `cpu'.
  sidutil::endian endian;
  void update_endian();

  // Reset component.
  callback_pin<gloss32> reset_pin;
  void reset_pin_handler(host_int_4 ignore);
  // For derived classes to do additional things.
  virtual void reset();

  void setup_fds (int max_fds);

  // streaming/destreaming of state
  virtual string save_state() { return make_attribute(*this); }
  virtual component::status restore_state(const string& state)
  {
    return parse_attribute(state, *this);
  }
  void stream_state (std::ostream& o) const;
  void destream_state (std::istream& i);
  friend std::ostream& operator << (std::ostream& o, const gloss32& it);
  friend std::istream& operator >> (std::istream& i, gloss32& it);

  // Trap invocation and response.
  callback_pin<gloss32> trap_type_ipin;
  output_pin trap_type_opin;
  void trap_pin_handler(host_int_4 trapnum);
  input_pin trap_code_pin;
  // Allow trap handlers to be chained together.
  output_pin trap_type_chain_opin;
  input_pin trap_type_chain_ipin;
  output_pin trap_code_chain_pin;

  // Connected to "main" component to tell it to exit.
  output_pin process_signal_pin;

  // Debug channel communications.
  callback_pin<gloss32> rx_pin;
  void rx_handler(host_int_4 byte);
  vector<host_int_1> rx_buffer;
  input_pin rx_eof_pin;
  output_pin tx_pin;

  // ABI-specifics, for getting syscall arguments and setting results.
  virtual bool get_int_argument(unsigned index, int32& value);
  virtual bool set_int_result(int32 value);
  virtual bool set_error_result(int32 target_errno);
  bool set_host_error_result (int32 host_errno);

  bool get_halfword(address32 address, sid::host_int_2& value);
  bool set_halfword(address32 address, sid::host_int_2 value);

  // Get/set a word in memory, taking into account the cpu's endianness.
  bool get_word(address32 address, int32& value);
  bool set_word(address32 address, int32 value);

  // Read/write a string in memory.
  // Calling get_string with length = 0 indicates that there is no
  // imposed length limit; read from memory until a NUL is encountered.
  bool set_string(address32 address, const string& value);
  bool set_string(address32 address, const char* value, unsigned length);
  bool get_string(address32 address, string& value, unsigned length = 0);

  // Get the value of the cpu's program counter.
  virtual bool get_pc(address32& value);

  // Names of cpu's general registers.
  // All need not be specified, just enough to get syscalls working.
  map<int,string> register_attribute_names;

  // Return boolean indicating if cpu is requesting something we're to handle.
  virtual bool syscall_trap_p();
  // Perform a system call trap.  Do not send trap disposition reply.
  virtual void syscall_trap();
  bool blocked_p; // signal that syscall blocked

  // Dynamic configuration
  component *dynamic_configurator;
  void configure (const string &config);

  // syscall support
  output_pin sys_configure_pin;
  input_pin config_result_pin;
  input_pin config_error_pin;
  int32 errnum;
  void do_sys_reconfig();
  void sys_reconfig_set (const string &profile_name);
  void sys_reconfig_reset (int32 handle);
  void do_sys_exit();
  void do_sys_read();
  void do_sys_write();
  void do_sys_open();
  void do_sys_close();
  void do_sys_lseek();
  void do_sys_fstat();
  void do_sys_time();
  void do_sys_gettimeofday();
  void do_sys_times();
  void do_sys_unlink();
  void do_sys_argc();
  void do_sys_argn();
  void do_sys_argnlen();
  virtual void do_nonstandard_target_syscalls(int32 syscall);
  virtual bool target_to_host_open_flags (int open_flags, int& flags);
  virtual int32 target_to_host_syscall (int32 syscall);

  // Handle all faults.  A reasonable default is provided.
  virtual void fault_trap(host_int_4 trap_type, host_int_4 trap_code);

  // For Unix process emulation.
  vector<string> command_line;
  string get_command_line ();
  component::status set_command_line (const string& cmd_line);

  // System calls.

  int exit_code;
  // Size of file descriptor table.
  int max_fds;
  // Open file handles; indexed by fd.
  // The result is the host's file descriptor.
  // Special provision is made to map 0,1,2 to cin,cout,cerr and track
  // when the original 0,1,2 are changed to something else.
  int* fd_table;
  // fd_table manipulation
  int lookup_fd (int target_fd);
  int unused_fd ();
  void alloc_fd (int target_fd, int host_fd);
  void free_fd (int target_fd);
  // Host O/S interface.
  hostops* host_ops;
  // Convert host errno to target errno.
  virtual int host_to_target_errno (int errno_);

  // Result is always boolean indicating success/failure.
  // If failure, `errcode' is set with the host's value for `errno'.
  bool open (string filename, int flags, int& result_fd, int& errcode);
  bool open (string filename, int flags, int mode, int& result_fd, int& errcode);
  bool close (int fd, int& errcode);
  bool read (int fd, address32 addr, size32 len,
	     size32& len_read, int& errcode);
  bool write (int fd, address32 addr, size32 len,
	      size32& len_written, int& errcode);
  bool remove (string filename, int& errcode);
  bool rename (string oldname, string newname, int& errcode);
  bool lseek (int fd, offset32 offset, hostops::seek_type how, size32& result, int& errcode);
  bool getsize (int fd, size32& size, int& errcode);
  bool tmpnam (string& filename, int& errcode);
  bool isatty (int fd, bool& result, int& errcode);

  string syscall_numbering_scheme;
  
  // true -> send various debugging messages to cerr.
  // ??? Would be nice to be able to specify a file.
  bool verbose_p;
};

class gloss64 : public gloss32
{
public:

  gloss64();
  virtual ~gloss64() throw();

protected:

  // ABI-specifics, for getting syscall arguments and setting results.
  virtual bool get_int_argument(unsigned index, int64& value);
  virtual bool set_int_result(int64 value);
  virtual bool set_error_result(int64 value);
  bool set_host_error_result (int32 host_errno);

  // Get/set a word in memory, taking into account the cpu's endianness.
  bool get_word(address64 address, int64& value);
  bool set_word(address64 address, int64 value);

  // Read/write a string in memory.
  // Note that this is a string of bytes, not a nul-terminated string.
  bool get_string(address64 address, string& value, unsigned length);
  bool set_string(address64 address, const string& value);

  // Get the value of the cpu's program counter.
  virtual bool get_pc(address64& value);

  // System calls.

  bool read (int fd, address64 addr, size64 len,
	     size64& len_read, int& errcode);
  bool write (int fd, address64 addr, size64 len,
	      size64& len_written, int& errcode);
  bool lseek (int fd, offset64 offset, hostops::seek_type how, size64& result, int& errcode);
  bool getsize (int fd, size64& size, int& errcode);
};

#endif // GLOSS_H
@


1.12
log
@2005-08-19  Dave Brolley  <brolley@@redhat.com>

        * Contribute the following changes:

        2005-07-13  Dave Brolley  <brolley@@redhat.com>

        * gloss.cxx (gloss32): Initialize dynamic_configurator. Add
        dynamic-configurator relation.
        * gloss.h (gloss32): Inherit virtually from
        fixed_attribute_map_component.
        (dynamic_configurator): New member of gloss32.

        2005-07-05  Dave Brolley  <brolley@@redhat.com>

        * gloss.cxx (start_config): Removed from gloss32.
        (gloss32): Remove "start-config" attribute. Add "config-error"
        pin.
        (reset): Don't call sys_config_set.
        (sys_reconfig_set): Call set_error_result based on the value driven on
        config_error_pin.
        (sys_reconfig_reset): Likewise.
        * gloss.h (start_config): Removed from gloss32.
        (config_error_pin): New member of gloss32.

        2005-06-06  Dave Brolley  <brolley@@redhat.com>

        * gloss.cxx (gloss32): Don't initialize dynamic_configurator.
        Don't add dynamic-configurator relation.
        (configure_pin): Renamed to sys_configure_pin.
        (configure): New virtual override in gloss32.
        (do_sys_reconfig): Print log messages to cerr and only when
        verbose_p.
        * gloss.h (gloss32): fixed_pin_map_component and configurable_component
        inherited virtually.
        (dynamic_configurator): Removed.
        (configure_pin): Renamed to sys_configure_pin.
        (configure): New virtual override in gloss32.

        2005-05-29  Dave Brolley  <brolley@@redhat.com>

        * libgloss.h (SYS_reconfig): New enumerator.
        * gloss.h (main, dynamic_configurator): New members of gloss32.
        (configure_pin, config_result_pin, start_config): Likewise.
        (sys_reconfig_set): New method of gloss32.
        (sys_reconfig_reset, do_sys_reconfig): Likewise.
        * gloss.cxx (gloss32): Initialize main, dynamic_configurator and
        start_config. Add relations main, dynamic-configurator. Add
        configure pin. Add start-config addtribute. Add config-result
        pin.
        (reset): Call sys_reconfig_set with start_config if it's not
        empty.
        (syscall_trap): Handle SYS_reconfig.
        (sys_reconfig_set): New method of gloss32.
        (sys_reconfig_reset, do_sys_reconfig): Likewise.
@
text
@d4 1
a4 1
// Copyright (C) 1999, 2000, 2001, 2002, 2005 Red Hat.
d122 1
@


1.11
log
@* C++ standard conformance.

2002-09-05  Ben Elliston  <bje@@redhat.com>

	* gloss.h: Specify std:: namespace where necessary.
	* gloss.cxx: Likewise.
@
text
@d4 1
a4 1
// Copyright (C) 1999, 2000, 2001, 2002 Red Hat.
d55 1
d62 1
a62 1
	       protected fixed_attribute_map_component,
d64 1
a64 1
	       protected fixed_pin_map_component,
d66 2
a67 1
	       protected fixed_relation_map_component
d78 2
d157 4
d162 3
d166 3
@


1.10
log
@
2002-06-03  Jeff Johnston  <jjohnstn@@redhat.com>

        * gloss.cxx (gloss32::gloss32): Add "state-snapshot" attribute.
        Also Add new attribute "exit-code" which points to the exit code.
        Set initial value to 0.
        (gloss32::setup_fds): New method that sets up fds.
        (gloss32::reset): Code moved to setup_fds.  New code is call to
        setup_fds(). Set initial exit code to 0.
        (gloss32::stream_state): New method to save state.
        (gloss32::destream_state): New method to restore state.
        (gloss32::do_sys_exit): Set exit_code with
        exit value.
        (operator <<, operator >>): New functions to stream/destream
        gloss32.
        * gloss.h (gloss32): Add setup_fds, stream_state, and destream_state
        prototypes as well as declaring operator << and operator >> friends.
        (gloss32::exit_code): New variable.
@
text
@d96 4
a99 4
  void stream_state (ostream& o) const;
  void destream_state (istream& i);
  friend ostream& operator << (ostream& o, const gloss32& it);
  friend istream& operator >> (istream& i, gloss32& it);
@


1.9
log
@2002-01-25  Ben Elliston  <bje@@redhat.com>

	* libgloss.h (libgloss::SYS_argc): New enumerator.
	(libgloss::SYS_argnlen, libgloss::SYS_argn): Likewise.
	(libgloss::SYS_unsupported): Raise its value.
	* gloss.cxx (gloss32::gloss32): Virtualise "command-line".
	(gloss32::get_command_line): New method.
	(gloss32::set_command_line): Likewise.
	(gloss32::set_string [string&]): Call char* version.
	(gloss32::set_string [char*]): Implement.
	(gloss32::syscall_trap): Handle SYS_argc, SYS_argn, SYS_argnlen.
	(gloss32::do_sys_argc): New method.
	(gloss32::do_sys_argn): Likewise.
	(gloss32::do_sys_argnlen): Likewise.
	* gloss.h (gloss32::set_string): New method which has a length
	parameter for binary data and null-terminated strings.
	(gloss32::do_sys_argc): Declare.
	(gloss32::do_sys_argn): Likewise.
	(gloss32::do_sys_argnlen): Likewise.
	(gloss32::command_line): Change type to vector<string>.
	(gloss32::get_command_line): New virtual attribute callback.
	(gloss32::set_command_line): Likewise.
@
text
@d88 13
d183 1
@


1.8
log
@* Remove mention of Cygnus from comments.
@
text
@d4 1
a4 1
// Copyright (C) 1999, 2000, 2001 Red Hat.
d124 1
d153 3
d164 3
a166 1
  string command_line;
@


1.7
log
@	Changes to many generated files -- incorporate bochs into
	build system and configrun-sid.
@
text
@d4 1
a4 1
// Copyright (C) 1999, 2000 Red Hat.
d8 1
a8 1
// The name "gloss" is derived from Cygnus' "libgloss" library.
@


1.6
log
@2001-10-26  Vladimir Makarov  <vmakarov@@redhat.com>

	* gloss.h (gloss32::do_sys_unlink): New function.

	* gloss.cxx (gloss32::syscall_trap): Add processing SYS_unlink.
	(gloss32::do_sys_unlink): New function.
	(gloss32::do_sys_exit): Add breaks after each case.
	(gloss32::do_sys_lseek): Set up correct results.
@
text
@d197 2
@


1.5
log
@2001-09-26  Ben Elliston  <bje@@redhat.com>

	* gloss.h (gloss32::get_string): Give length parameter a default
	of 0, in which case memory is read until a NUL is reached.
	* gloss.cxx (gloss32::get_string): Handle both fixed length and
	NUL-terminated strings.
	(gloss32::write): Improve verbose message.
	(gloss32::do_sys_open): Improve failure mode for get_string().
@
text
@d151 1
@


1.4
log
@2001-09-04  Ben Elliston  <bje@@redhat.com>

	* gloss.h (do_sys_fstat): Declare.
	(gloss32::get_halfword): Likewise.
	(gloss32::set_halfword): Likewise.
	* gloss.cxx (gloss32::syscall_trap): Handle libgloss::SYS_fstat.
	(gloss32::get_halfword): New method.
	(gloss32::set_halfword): Likewise.
	(gloss32::do_sys_fstat): Likewise.
@
text
@d121 2
a122 2
  // Note that this is a string of bytes, not a nul-terminated string.
  bool get_string(address32 address, string& value, unsigned length);
d124 1
@


1.3
log
@* make it compile with GCC 3.0:
        - missing throw() specifiers in bus & component dtors
	- `std::' vs `::' namespace issues
@
text
@d113 3
d146 1
@


1.2
log
@[components/ChangeLog]
2001-01-03  matthew green  <mrg@@redhat.com>

	* configure.in (AC_HAVE_FUNCS): Also check for times(2).
	* configure: Regenerate.
	* config.in: Regenerate.

[components/gloss/ChangeLog]
2001-01-06  matthew green  <mrg@@redhat.com>

	* gloss.cxx (gloss32::target_to_host_open_flags): Properly check for
	valid open() flags.

2001-01-04  matthew green  <mrg@@redhat.com>

	* gloss.cxx (gloss32::target_to_host_open_flags): Properly deal with
	newlib open flags.
	Need <sys/time.h> for gettimeofday().  Only include <sys/times.h> if
	we have times().

2000-12-30  matthew green  <mrg@@redhat.com>

	* gloss.cxx (do_sys_time): New function.
	(do_sys_times): Likewise.
	(do_sys_gettimeofday): Likewise.
	(syscall_trap): Call do_sys_time().  Call new do_sys_times() and
	do_sys_gettimeofday() for times() and .
	* gloss.h (do_sys_time): Prototype.
	(do_sys_times): Likewise.
	(do_sys_gettimeofday): Likewise.
	* libgloss.h (libgloss_syscall): Add `times' and `gettimeofday'.
@
text
@d70 1
a70 1
  virtual ~gloss32();
d201 1
a201 1
  virtual ~gloss64();
@


1.1
log
@* public snapshot of sid simulator
@
text
@d143 3
@

