head	1.3;
access;
symbols
	sid-snapshot-20180601:1.3
	sid-snapshot-20180501:1.3
	sid-snapshot-20180401:1.3
	sid-snapshot-20180301:1.3
	sid-snapshot-20180201:1.3
	sid-snapshot-20180101:1.3
	sid-snapshot-20171201:1.3
	sid-snapshot-20171101:1.3
	sid-snapshot-20171001:1.3
	sid-snapshot-20170901:1.3
	sid-snapshot-20170801:1.3
	sid-snapshot-20170701:1.3
	sid-snapshot-20170601:1.3
	sid-snapshot-20170501:1.3
	sid-snapshot-20170401:1.3
	sid-snapshot-20170301:1.3
	sid-snapshot-20170201:1.3
	sid-snapshot-20170101:1.3
	sid-snapshot-20161201:1.3
	sid-snapshot-20161101:1.3
	sid-snapshot-20160901:1.3
	sid-snapshot-20160801:1.3
	sid-snapshot-20160701:1.3
	sid-snapshot-20160601:1.3
	sid-snapshot-20160501:1.3
	sid-snapshot-20160401:1.3
	sid-snapshot-20160301:1.3
	sid-snapshot-20160201:1.3
	sid-snapshot-20160101:1.3
	sid-snapshot-20151201:1.3
	sid-snapshot-20151101:1.3
	sid-snapshot-20151001:1.3
	sid-snapshot-20150901:1.3
	sid-snapshot-20150801:1.3
	sid-snapshot-20150701:1.3
	sid-snapshot-20150601:1.3
	sid-snapshot-20150501:1.3
	sid-snapshot-20150401:1.3
	sid-snapshot-20150301:1.3
	sid-snapshot-20150201:1.3
	sid-snapshot-20150101:1.3
	sid-snapshot-20141201:1.3
	sid-snapshot-20141101:1.3
	sid-snapshot-20141001:1.3
	sid-snapshot-20140901:1.3
	sid-snapshot-20140801:1.3
	sid-snapshot-20140701:1.3
	sid-snapshot-20140601:1.3
	sid-snapshot-20140501:1.3
	sid-snapshot-20140401:1.3
	sid-snapshot-20140301:1.3
	sid-snapshot-20140201:1.3
	sid-snapshot-20140101:1.3
	sid-snapshot-20131201:1.3
	sid-snapshot-20131101:1.3
	sid-snapshot-20131001:1.3
	sid-snapshot-20130901:1.3
	sid-snapshot-20130801:1.3
	sid-snapshot-20130701:1.3
	sid-snapshot-20130601:1.3
	sid-snapshot-20130501:1.3
	sid-snapshot-20130401:1.3
	sid-snapshot-20130301:1.3
	sid-snapshot-20130201:1.3
	sid-snapshot-20130101:1.3
	sid-snapshot-20121201:1.3
	sid-snapshot-20121101:1.3
	sid-snapshot-20121001:1.3
	sid-snapshot-20120901:1.3
	sid-snapshot-20120801:1.3
	sid-snapshot-20120701:1.3
	sid-snapshot-20120601:1.3
	sid-snapshot-20120501:1.3
	sid-snapshot-20120401:1.3
	sid-snapshot-20120301:1.3
	sid-snapshot-20120201:1.3
	sid-snapshot-20120101:1.3
	sid-snapshot-20111201:1.3
	sid-snapshot-20111101:1.3
	sid-snapshot-20111001:1.3
	sid-snapshot-20110901:1.3
	sid-snapshot-20110801:1.3
	sid-snapshot-20110701:1.3
	sid-snapshot-20110601:1.3
	sid-snapshot-20110501:1.3
	sid-snapshot-20110401:1.3
	sid-snapshot-20110301:1.3
	sid-snapshot-20110201:1.3
	sid-snapshot-20110101:1.3
	sid-snapshot-20101201:1.3
	sid-snapshot-20101101:1.3
	sid-snapshot-20101001:1.3
	sid-snapshot-20100901:1.3
	sid-snapshot-20100801:1.3
	sid-snapshot-20100701:1.3
	sid-snapshot-20100601:1.3
	sid-snapshot-20100501:1.3
	sid-snapshot-20100401:1.3
	sid-snapshot-20100301:1.3
	sid-snapshot-20100201:1.3
	sid-snapshot-20100101:1.3
	sid-snapshot-20091201:1.3
	sid-snapshot-20091101:1.3
	sid-snapshot-20091001:1.3
	sid-snapshot-20090901:1.3
	sid-snapshot-20090801:1.3
	sid-snapshot-20090701:1.3
	sid-snapshot-20090601:1.3
	sid-snapshot-20090501:1.3
	sid-snapshot-20090401:1.3
	sid-snapshot-20090301:1.3
	sid-snapshot-20090201:1.3
	sid-snapshot-20090101:1.3
	sid-snapshot-20081201:1.3
	sid-snapshot-20081101:1.3
	sid-snapshot-20081001:1.3
	sid-snapshot-20080901:1.3
	sid-snapshot-20080801:1.3
	sid-snapshot-20080701:1.3
	sid-snapshot-20080601:1.3
	sid-snapshot-20080501:1.3
	sid-snapshot-20080403:1.3
	sid-snapshot-20080401:1.3
	sid-snapshot-20080301:1.3
	sid-snapshot-20080201:1.3
	sid-snapshot-20080101:1.3
	sid-snapshot-20071201:1.3
	sid-snapshot-20071101:1.3
	sid-snapshot-20071001:1.3
	sid-20020905-branchpoint:1.3
	sid-20020905-branch:1.3.0.2
	cygnus_cvs_20020108_pre:1.3;
locks; strict;
comment	@# @;


1.3
date	2001.11.27.22.59.06;	author fitzsim;	state Exp;
branches;
next	1.2;

1.2
date	2001.08.03.01.30.18;	author bje;	state Exp;
branches;
next	1.1;

1.1
date	2000.12.07.19.30.50;	author fche;	state Exp;
branches;
next	;


desc
@@


1.3
log
@	Changes to many generated files -- incorporate bochs into
	build system and configrun-sid.
@
text
@          sw-gloss-arm/angel (libgloss.la :: gloss_component_library)

Synopsis:

   This component emulates the Angel ROM monitor software.

     ----------------------------------------------------------------------

Functionality:

  Modelling:

   This component emulates the ANGEL ROM monitor software by intercepting the
   ARM CPU component model's software interrupt (SWI). It implements common
   system calls, such as read() and write().

   +-------------------------------------------------+
   |                    Behaviors                    |
   |-------------------------------------------------|
   |    system call | When the trap input pin is     |
   |      emulation | driven, this component will    |
   |                | attempt to emulate the         |
   |                | requested system call. It      |
   |                | checks whether the current     |
   |                | trap-code and trap values      |
   |                | correspond to a system call    |
   |                | that can be emulated.          |
   |                |                                |
   |                | If this is indeed a valid      |
   |                | ANGEL system call, the         |
   |                | component emulates the call by |
   |                | accessing the target           |
   |                | processor's registers (through |
   |                | the cpu relation) and memory   |
   |                | (through the target-memory     |
   |                | accessor). In most cases, it   |
   |                | signals back a skip or reissue |
   |                | indication through the trap    |
   |                | output pin.                    |
   |                |                                |
   |                | If the requested system call   |
   |                | is not a valid ANGEL system    |
   |                | call, the trap signal is       |
   |                | chained by driving the         |
   |                | trap-code-chain and trap-chain |
   |                | output pins with the same      |
   |                | values as received. If an      |
   |                | external component is          |
   |                | connected to these chain pins, |
   |                | and if that external component |
   |                | signals a handled indication   |
   |                | back on the trap-chain input,  |
   |                | then this component will       |
   |                | consider the trap as handled   |
   |                | and will return.               |
   |                |                                |
   |                | If this is a trap condition    |
   |                | that would kill an ordinary    |
   |                | process-model program, then    |
   |                | the process-signal output pin  |
   |                | is driven with an exit code    |
   |                | similar to that used by UNIX   |
   |                | wait(2). Such conditions       |
   |                | include memory faults, invalid |
   |                | instructions, etc.             |
   |                |                                |
   |                | See the documentation of       |
   |                | hw-cpu-arm7t for the list of   |
   |                | supported trap & trap-code     |
   |                | values.                        |
   |                |                                |
   |                | If the verbose? attribute is   |
   |                | set to a true value, detailed  |
   |                | tracing messages will be       |
   |                | printed to stderr during a     |
   |                | system call emulation.         |
   |                |                                |
   |                | The syscall-numbering-scheme   |
   |                | setting causes the gloss       |
   |                | component to use the system    |
   |                | call numbering scheme          |
   |                | specified. The gloss component |
   |                | may then properly interpret    |
   |                | non-standard syscall numbers   |
   |                | that come from target-program  |
   |                | libgloss routines. Currently,  |
   |                | the only available             |
   |                | non-standard numbering scheme  |
   |                | is cygmon.                     |
   |----------------+--------------------------------|
   | initialization | When the reset pin is driven,  |
   |                | all open files are closed and  |
   |                | the simulated stdio file       |
   |                | handles (0/1/2) are attached   |
   |                | to the host's same stdio file  |
   |                | handles.                       |
   |                |                                |
   |                | The heap-base, heap-limit,     |
   |                | stack-base, stack-limit, and   |
   |                | command-line attributes        |
   |                | provide access to values that  |
   |                | are exposed to several ANGEL   |
   |                | system calls.                  |
   |                |                                |
   |                | The max-fds attribute          |
   |                | specifies the largest          |
   |                | simulated file descriptor that |
   |                | will be made available to the  |
   |                | target program.                |
   |----------------+--------------------------------|
   |          stdio | Accesses to the special        |
   |                | simulated file handles 0/1/2   |
   |                | are mapped to pin I/O on the   |
   |                | debug-tx and debug-rx pins.    |
   |                | Input from the debug-rx pin is |
   |                | buffered for future reads.     |
   |                | Reads may block until data is  |
   |                | received. Writes to stdout or  |
   |                | stderr are modelled by sending |
   |                | the supplied characters,       |
   |                | one-at-a-time, out through the |
   |                | debug-tx pin.                  |
   +-------------------------------------------------+

   +-------------------------------------------------+
   |                 SID Conventions                 |
   |-------------------------------------------------|
   |           supervisory | supported        | -    |
   |-----------------------+------------------+------|
   |         triggerpoints | not supported    | -    |
   |-----------------------+------------------+------|
   |          save/restore | supported        | -    |
   |-----------------------+------------------+------|
   |     inhibit-recursion | not supported    | -    |
   +-------------------------------------------------+

     ----------------------------------------------------------------------

Environment:

   Related components

   The Angel component communicates closely with a CPU and main memory. It
   uses the CPU for retrieving system call arguments from registers and
   placing results in a register. It uses memory for accessing data when
   system call arguments are pointers into the target memory. An example of
   this is the char* argument to write(). The coupling to the CPU and memory
   is quite relaxed: the only requirement is that the endianness of the CPU
   be known via attribute and that attributes for registers exist with names
   of the form rN.

   The configuration file fragment below shows how to connect an Angel
   component into a more complete system:

         new hw-cpu-arm7t cpu
         new hw-memory-ram/rom-basic mem
         new sw-gloss-arm/angel angel
         new sid-io-stdio stdio
         relate angel cpu cpu
         connect-pin cpu trap <-> angel trap
         connect-pin cpu trap-code -> angel trap-code
         connect-pin angel process-signal -> main stop!
         connect-pin angel debug-tx -> stdio stdout
         connect-pin angel debug-rx <- stdio stdin
         connect-bus angel target-memory cpu debugger-port


   Host system

   The component implements the Angel's semi-hosted system calls such as
   open() and close(). Use these calls with caution: they can perform file
   I/O on the host, therefore it is possible to write rogue target programs
   that delete or modify files on the host.

     ----------------------------------------------------------------------

Component Reference:

  Component: sw-gloss-arm/angel

   +---------------------------------------------------+
   |                       pins                        |
   |---------------------------------------------------|
   |     name     |direction|legalvalues|  behaviors   |
   |--------------+---------+-----------+--------------|
   |reset         |in       |any        |initialization|
   |--------------+---------+-----------+--------------|
   |trap          |         |trap type  |system call   |
   |              |         |enum       |emulation     |
   |--------------+---------+-----------+--------------|
   |trap-code     |in       |trap code  |system call   |
   |              |         |value      |emulation     |
   |--------------+---------+-----------+--------------|
   |process-signal|out      |signal     |system call   |
   |              |         |number     |emulation     |
   |--------------+---------+-----------+--------------|
   |debug-tx      |out      |0-255      |stdio         |
   |--------------+---------+-----------+--------------|
   |debug-rx      |in       |0-255      |stdio         |
   +---------------------------------------------------+

   +-------------------------------------------------------------------------+
   |                               attributes                                |
   |-------------------------------------------------------------------------|
   |          name          |category| legal | default value |  behaviors   ||
   |                        |        |values |               |              ||
   |------------------------+--------+-------+---------------+--------------||
   |verbose?                |setting |boolean|false          |system call   ||
   |                        |        |       |               |emulation     ||
   |------------------------+--------+-------+---------------+--------------||
   |syscall-numbering-scheme|setting |string |libgloss       |system call   ||
   |                        |        |       |               |emulation     ||
   |------------------------+--------+-------+---------------+--------------||
   |heap-base               |setting |number |0x80000        |initialization||
   |------------------------+--------+-------+---------------+--------------||
   |heap-limit              |setting |number |1024           |initialization||
   |------------------------+--------+-------+---------------+--------------||
   |stack-base              |setting |number |0x200000       |initialization||
   |------------------------+--------+-------+---------------+--------------||
   |stack-limit             |setting |number |0x200000       |initialization||
   |------------------------+--------+-------+---------------+--------------||
   |command-line            |setting |any    |''             |initialization||
   |------------------------+--------+-------+---------------+--------------||
   |max-fds                 |setting |number |32             |initialization||
   |------------------------+--------+-------+---------------+--------------||
   |'tk tty'                |gui     |-      |'hw-visual-tty'|component gui ||
   +-------------------------------------------------------------------------+

   +-------------------------------------------------+
   |                    accessors                    |
   |-------------------------------------------------|
   |     name      | accesses |      behaviors       |
   |---------------+----------+----------------------|
   | target-memory | any      | system call          |
   |               |          | emulation            |
   +-------------------------------------------------+

     ----------------------------------------------------------------------

References:

   ARM Software Development Toolkit Reference Guide (version 2.11), Document
   number: ARM DUI 0041B, Chapter 8 (``Angel'')

   newlib source code is also useful for clarification.
@


1.2
log
@* Freshly generated documentation.
* ChangeLog entries to follow later.
@
text
@d77 13
d202 26
a227 23
   +-------------------------------------------------------------+
   |                         attributes                          |
   |-------------------------------------------------------------|
   |    name    |category| legal | default value |  behaviors   ||
   |            |        |values |               |              ||
   |------------+--------+-------+---------------+--------------||
   |verbose?    |setting |boolean|false          |system call   ||
   |            |        |       |               |emulation     ||
   |------------+--------+-------+---------------+--------------||
   |heap-base   |setting |number |0x80000        |initialization||
   |------------+--------+-------+---------------+--------------||
   |heap-limit  |setting |number |1024           |initialization||
   |------------+--------+-------+---------------+--------------||
   |stack-base  |setting |number |0x200000       |initialization||
   |------------+--------+-------+---------------+--------------||
   |stack-limit |setting |number |0x200000       |initialization||
   |------------+--------+-------+---------------+--------------||
   |command-line|setting |any    |''             |initialization||
   |------------+--------+-------+---------------+--------------||
   |max-fds     |setting |number |32             |initialization||
   |------------+--------+-------+---------------+--------------||
   |'tk tty'    |gui     |-      |'hw-visual-tty'|component gui ||
   +-------------------------------------------------------------+
@


1.1
log
@* public snapshot of sid simulator
@
text
@d1 1
a1 2
* Name
  sw-gloss-arm/angel
d3 1
a3 2
* Synopsis
  This component emulates the Angel ROM monitor software.  
d5 1
a5 151
  Pins: reset trap trap-code trap-chain trap-code-chain process-signal debug-tx debug-rx
  Relations: cpu
  Attributes: verbose? max-fds heap-base heap-limit stack-base stack-limit command-line "tk tty"
  Accessors: target-memory

  Library: libgloss.la
  Symbol name: gloss_component_library

* Functionality

  - Modelling

    This component emulates the ANGEL ROM monitor software by
    intercepting the ARM CPU component model's software interrupt
    (SWI).  It implements common system calls, such as read() and
    write().

  - Behaviors

    * System call emulation

    When the "trap" input pin is driven, this component will attempt
    to emulate the requested system call.  It checks whether the
    current "trap-code" and "trap" values correspond to a system call 
    that can be emulated.

    If this is indeed a valid ANGEL system call, the component emulates
    the call by accessing the target processor's registers (through the 
    "cpu" relation) and memory (through the "target-memory" accessor).
    In most cases, it signals back a "skip" or "reissue" indication 
    through the "trap" output pin.

    If the requested system call is not a valid ANGEL system call, 
    the trap signal is chained by driving the "trap-code-chain" 
    and "trap-chain" output pins with the same values as received.  
    If an external component is connected to these chain pins, 
    and if that external component signals a "handled" indication 
    back on the "trap-chain" input, then this component will 
    consider the trap as handled and will return.

    If this is a trap condition that would kill an ordinary
    process-model program, then the "process-signal" output pin is
    driven with an exit code similar to that used by UNIX wait(2).
    Such conditions include memory faults, invalid instructions, etc.

    See the documentation of "hw-cpu-arm7t" for the list of supported
    trap & trap-code values.

    If the "verbose?" attribute is set to a true value, detailed
    tracing messages will be printed to stderr during a system call
    emulation.

    * Initialization

    When the "reset" pin is driven, all open files are closed and the
    simulated stdio file handles (0/1/2) are attached to the host's
    same stdio file handles.

    The "heap-base", "heap-limit", "stack-base", "stack-limit", and
    "command-line" attributes provide access to values that are
    exposed to several ANGEL system calls.

    The "max-fds" attribute specifies the largest simulated file
    descriptor that will be made available to the target program.

    * STDIO

    Accesses to the special simulated file handles 0/1/2 are mapped to
    pin I/O on the "debug-tx" and "debug-rx" pins.  Input from the
    "debug-rx" pin is buffered for future reads.  Reads may block
    until data is received.  Writes to stdout or stderr are modelled
    by sending the supplied characters, one-at-a-time, out through the
    "debug-tx" pin.

  - SID conventions

    * This is a supervisory component.
    * It does not support triggerpoints nor state save/restore.
    * It does not limit recursion.

* Environment

  - Related components

    * The Angel component communicates closely with a CPU and main memory.  
      It uses the CPU for retrieving system call arguments from
      registers and placing results in a register.  It uses memory for 
      accessing data when system call arguments are pointers into the
      target memory.  An example of this is the char* argument to write().
      The coupling to the CPU and memory is quite relaxed: the only
      requirement is that the endianness of the CPU be known via attribute
      and that attributes for registers exist with names of the form
      "rN".

    * The configuration file fragment below shows how to connect an 
      Angel component into a more complete system:

	new hw-cpu-arm7t cpu
	new hw-memory-ram/rom-basic mem
	new sw-gloss-arm/angel angel
	new sid-io-stdio stdio
	relate angel cpu cpu
	connect-pin cpu trap <-> angel trap
	connect-pin cpu trap-code -> angel trap-code
	connect-pin angel process-signal -> main stop!
	connect-pin angel debug-tx -> stdio stdout
	connect-pin angel debug-rx <- stdio stdin
	connect-bus angel target-memory cpu debugger-port

  - Host system

    * The component implements the Angel's semi-hosted system calls
      such as open() and close().  Use these calls with caution: they 
      can perform file I/O on the host, therefore it is possible to
      write rogue target programs that delete or modify files on the host.

* SID interface reference

  - low level:
    * pins
      - reset | input | any | initialization
      - trap | input/output | trap type enum | system call emulation
      - trap-code | input | trap code value | system call emulation
      - process-signal | output | signal number | system call emulation
      - debug-tx | output | 0-255 | stdio
      - debug-rx | input | 0-255 | stdio

    * accessors
 
      - target-memory | any | system call emulation

    * attributes

      - verbose? | setting | boolean | false | system call emulation
      - heap-base | setting | number | 0x80000 | initialization
      - heap-limit | setting | number | 1024| initialization
      - stack-base | setting | number | 0x200000 | initialization
      - stack-limit | setting | number | 0x200000 | initialization
      - command-line | setting | any | "" | initialization
      - max-fds | setting | number | 32 | initialization
      - "tk tty" | gui | n/a | "hw-visual-tty" | component gui

    * relations
 
      - cpu | system call emulation

* References

  ARM Software Development Toolkit Reference Guide (version 2.11)
  Document number: ARM DUI 0041B
  Chapter 8 (``Angel'')
d7 223
a229 1
  newlib source code is also useful for clarification.
@

