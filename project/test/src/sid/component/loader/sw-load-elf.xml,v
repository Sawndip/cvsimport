head	1.5;
access;
symbols
	sid-snapshot-20180601:1.5
	sid-snapshot-20180501:1.5
	sid-snapshot-20180401:1.5
	sid-snapshot-20180301:1.5
	sid-snapshot-20180201:1.5
	sid-snapshot-20180101:1.5
	sid-snapshot-20171201:1.5
	sid-snapshot-20171101:1.5
	sid-snapshot-20171001:1.5
	sid-snapshot-20170901:1.5
	sid-snapshot-20170801:1.5
	sid-snapshot-20170701:1.5
	sid-snapshot-20170601:1.5
	sid-snapshot-20170501:1.5
	sid-snapshot-20170401:1.5
	sid-snapshot-20170301:1.5
	sid-snapshot-20170201:1.5
	sid-snapshot-20170101:1.5
	sid-snapshot-20161201:1.5
	sid-snapshot-20161101:1.5
	sid-snapshot-20160901:1.5
	sid-snapshot-20160801:1.5
	sid-snapshot-20160701:1.5
	sid-snapshot-20160601:1.5
	sid-snapshot-20160501:1.5
	sid-snapshot-20160401:1.5
	sid-snapshot-20160301:1.5
	sid-snapshot-20160201:1.5
	sid-snapshot-20160101:1.5
	sid-snapshot-20151201:1.5
	sid-snapshot-20151101:1.5
	sid-snapshot-20151001:1.5
	sid-snapshot-20150901:1.5
	sid-snapshot-20150801:1.5
	sid-snapshot-20150701:1.5
	sid-snapshot-20150601:1.5
	sid-snapshot-20150501:1.5
	sid-snapshot-20150401:1.5
	sid-snapshot-20150301:1.5
	sid-snapshot-20150201:1.5
	sid-snapshot-20150101:1.5
	sid-snapshot-20141201:1.5
	sid-snapshot-20141101:1.5
	sid-snapshot-20141001:1.5
	sid-snapshot-20140901:1.5
	sid-snapshot-20140801:1.5
	sid-snapshot-20140701:1.5
	sid-snapshot-20140601:1.5
	sid-snapshot-20140501:1.5
	sid-snapshot-20140401:1.5
	sid-snapshot-20140301:1.5
	sid-snapshot-20140201:1.5
	sid-snapshot-20140101:1.5
	sid-snapshot-20131201:1.5
	sid-snapshot-20131101:1.5
	sid-snapshot-20131001:1.5
	sid-snapshot-20130901:1.5
	sid-snapshot-20130801:1.5
	sid-snapshot-20130701:1.5
	sid-snapshot-20130601:1.5
	sid-snapshot-20130501:1.5
	sid-snapshot-20130401:1.5
	sid-snapshot-20130301:1.5
	sid-snapshot-20130201:1.5
	sid-snapshot-20130101:1.5
	sid-snapshot-20121201:1.5
	sid-snapshot-20121101:1.5
	sid-snapshot-20121001:1.5
	sid-snapshot-20120901:1.5
	sid-snapshot-20120801:1.5
	sid-snapshot-20120701:1.5
	sid-snapshot-20120601:1.5
	sid-snapshot-20120501:1.5
	sid-snapshot-20120401:1.5
	sid-snapshot-20120301:1.5
	sid-snapshot-20120201:1.5
	sid-snapshot-20120101:1.5
	sid-snapshot-20111201:1.5
	sid-snapshot-20111101:1.5
	sid-snapshot-20111001:1.5
	sid-snapshot-20110901:1.5
	sid-snapshot-20110801:1.5
	sid-snapshot-20110701:1.5
	sid-snapshot-20110601:1.5
	sid-snapshot-20110501:1.5
	sid-snapshot-20110401:1.5
	sid-snapshot-20110301:1.5
	sid-snapshot-20110201:1.5
	sid-snapshot-20110101:1.5
	sid-snapshot-20101201:1.5
	sid-snapshot-20101101:1.5
	sid-snapshot-20101001:1.5
	sid-snapshot-20100901:1.5
	sid-snapshot-20100801:1.5
	sid-snapshot-20100701:1.5
	sid-snapshot-20100601:1.5
	sid-snapshot-20100501:1.5
	sid-snapshot-20100401:1.5
	sid-snapshot-20100301:1.5
	sid-snapshot-20100201:1.5
	sid-snapshot-20100101:1.5
	sid-snapshot-20091201:1.5
	sid-snapshot-20091101:1.5
	sid-snapshot-20091001:1.5
	sid-snapshot-20090901:1.5
	sid-snapshot-20090801:1.5
	sid-snapshot-20090701:1.5
	sid-snapshot-20090601:1.5
	sid-snapshot-20090501:1.5
	sid-snapshot-20090401:1.5
	sid-snapshot-20090301:1.5
	sid-snapshot-20090201:1.5
	sid-snapshot-20090101:1.5
	sid-snapshot-20081201:1.5
	sid-snapshot-20081101:1.5
	sid-snapshot-20081001:1.5
	sid-snapshot-20080901:1.5
	sid-snapshot-20080801:1.5
	sid-snapshot-20080701:1.5
	sid-snapshot-20080601:1.5
	sid-snapshot-20080501:1.5
	sid-snapshot-20080403:1.5
	sid-snapshot-20080401:1.5
	sid-snapshot-20080301:1.5
	sid-snapshot-20080201:1.5
	sid-snapshot-20080101:1.5
	sid-snapshot-20071201:1.5
	sid-snapshot-20071101:1.5
	sid-snapshot-20071001:1.5
	sid-20020905-branchpoint:1.2
	sid-20020905-branch:1.2.0.2
	cygnus_cvs_20020108_pre:1.2;
locks; strict;
comment	@# @;


1.5
date	2005.08.19.19.45.22;	author brolley;	state Exp;
branches;
next	1.4;

1.4
date	2005.05.12.16.11.20;	author brolley;	state Exp;
branches;
next	1.3;

1.3
date	2003.10.21.21.30.44;	author brolley;	state Exp;
branches;
next	1.2;

1.2
date	2001.10.05.00.36.17;	author bje;	state Exp;
branches;
next	1.1;

1.1
date	2001.08.03.01.47.53;	author bje;	state Exp;
branches;
next	;


desc
@@


1.5
log
@2005-08-19  Dave Brolley  <brolley@@redhat.com>

        * Contribute the following changes:

        2005-07-13  Dave Brolley  <brolley@@redhat.com>

        * compLoader.cxx (generic_loader): Inherit virtually from
        fixed_attribute_map_component. Inherit from no_relation_component.

        2005-06-06  Dave Brolley  <brolley@@redhat.com>

        * elfload.c (readElfFile): Return and empty symbol table if none found.

        * compLoader.cxx: Add using cleause for
        sidutil::configurable_component.
        (generic_loader): fixed_pin_map_component and configurable_component
        inherited virtually.
        (configure): New virtual override in generic_loader.
        (check_function_pin_handler): Return the empty string if no function
        is associated with the given address.
        * sw-load-elf.xml: Add description of new interfaces.
        * sw-load-elf.txt: Regenerated.

        2005-05-29  Dave Brolley  <brolley@@redhat.com>

        * elfload.h (StringTable, Symbol): New struct types.
        (readElfFile): New takes symbol_table argument.
        (SHT_SYMTAB, SHT_STRTAB, ELF32_ST_TYPE, STT_FUNC): New macros.
        * elfload.c (stringTables,stringTableCount,stringTableNum): New
        static variables.
        (newStringTable): New static function.
        (symbolTable,symbolCount,symbolNum): New static variables.
        (newSymbol): New static function.
        (readElfFile): New takes symbol_table argument. Build string tables and
        symbol table while reading the input file.
        * compLoader.cxx (elf_loader): New constructor.
        (load_it): Obtain symmol_table from readElfFile.
        (check_function_pin,symbol_table,current_function): New members
        of elf_loader.
        (check_function_pin_handler): New method of elf_loader.
@
text
@<?xml version="1.0" ?>
<!DOCTYPE defcomplib SYSTEM "http://sources.redhat.com/sid/component.dtd">

<defcomplib lib="libloader.la" dlsym="loader_component_library">
  <defcomponent name="sw-load-elf" type="concrete">

    <!-- relationships -->
    <defrelationship name="dynamic-configurator"	behaviors="configuration" />

    <!-- pins -->
    <defpin name="function-address?"	direction="in"  legalvalues="address"	behaviors="configuration" />
    <defpin name="load!" direction="in" legalvalues="any" behaviors="loading"/>
    <defpin name="start-pc-set" direction="out" legalvalues="any" behaviors="loading"/>
    <defpin name="endian-set" direction="out" legalvalues="0/1/2" behaviors="loading"/>
    <defpin name="error" direction="out" legalvalues="any" behaviors="loading"/>
    <defpin name="write-to-code-address" direction="out" legalvalues="any address" behaviors="error checking"/>
    <defpin name="probe" direction="in" legalvalues="any address" behaviors="error checking"/>

    <defattribute name="state-snapshot" legalvalues="opaque string" behaviors="save/restore"/>
    <defattribute name="file" category="setting" legalvalues="file name" defaultvalue='"/dev/null"' behaviors="configuration"/>
    <defattribute name="verbose?" category="setting" legalvalues="1/0" defaultvalue="0" behaviors="configuration"/>
    <defattribute name="configure!" category="setting" legalvalues="string" behaviors="configuration" />
    
    <defbus name="probe-upstream" accesses="read/write" behaviors="error checking"/>

    <defaccessor name="load-accessor-insn" accesses="write little_int_1" behaviors="loading"/>
    <defaccessor name="load-accessor-data" accesses="write little_int_1" behaviors="loading"/>
    <defaccessor name="probe-downstream" accesses="read/write" behaviors="error checking"/>

  </defcomponent>

  <synop>
    This component loads ELF files from the host filesystem into
    simulated memory.
  </synop>

  <func>
    <modelling>
      <p>
      This component helps to simulate a process environment by
      impersonating an OS loader.
      </p>
    </modelling>

    <behavior name="configuration">
      <p>
      The "file" attribute stores the name of a file to attempt to load. 
      The "verbose?" attribute, when set, encourages this component to provide 
      informative messages to cout during loading.
      </p>

      <p>When the <attribute>configure!</attribute> is set, the new value is interpreted
         as a configuration spec.  The spec is a colon-separated list of items, each of
         which is passed in turn to the 'configure' method for interpretation and possible
         action.</p>

    </behavior>

    <behavior name="loading">
      <p>
      When the <pin> load!</pin> pin is driven, this component will
      attempt to load an ELF file from the host filesystem.  The
      loadable parts of the file are sent one byte at a time through
      an accessor.  During the process, the starting PC and the
      program endianness are signalled by driving the values onto the
      <pin>start-pc-set</pin> and <pin>endian-set</pin> output pins.
      The endianness value is 0/1/2 for unknown/big/little.</p>

      <p>
      If the file cannot be found or if it has other errors, a message
      is sent to <tt>cerr</tt> and the loading process is stopped.
      The <pin>error</pin> output pin is driven in this case.</p>

      <p>
      Like operating system loaders,
      <component>sw-load-elf</component> uses the ELF "program header"
      to identify the bytes to load into memory.  It does not use the
      "section header".  This means that it tends to load more bytes
      than <tt>gdb</tt> would.</p>
    </behavior>

    <behavior name="error checking">
      <p>
      All read requests coming in though the "probe-upstream" bus are
      checked against known code segments and, for each attempt to write
      to a code segment, the write-to-code-address pin is driven with the
      address of the write attempt. All reads and writes
      coming in through the probe-upstream bus are passed on to the
      probe-downstream accessor. In addition, addresses driven on the
      "probe" pin are checked in the same way.
      </p>
    </behavior>

    <convention name="functional" supported="true" />
    <convention name="save/restore" supported="true">state is minimal.</convention>
    <convention name="triggerpoints" supported="false" />
    <convention name="limit-recursion" supported="false" />
    <convention name="settings" supported="true">
      It presents attributes in the "setting" category.
    </convention>
  </func>
  <env>
 
   <title>Related components</title>

    <p>This component can be used as an initialization sequencer in a
    scenario with ordering dependencies.  See this configuration
    fragment:</p>

    <code>
	new hw-glue-sequence-8 reset-manager
	new CPU-OF-SOME-TYPE cpu
	new sw-load-elf loader
	new mapper bus
	connect-pin reset-manager input &lt;- main starting
	connect-pin reset-manager output-1 -&gt; loader load!
        connect-bus loader load-accessor-insn bus access-port
        connect-bus loader load-accessor-data bus access-port
	set cpu-loader file "/foo/bar.x"
        set loader verbose? 1
	connect-pin loader start-pc-set -&gt; cpu start-pc-set!
	connect-pin loader endian-set -&gt; cpu endian-set!
        connect-pin loader error -&gt; main stop!</code>
  </env>

</defcomplib>
@


1.4
log
@2005-05-12  Dave Brolley  <brolley@@redhat.com>

        * compLoader.cxx (probe_address): New method of loader_probe_bus.
        (loader_probe_bus::write): Call probe_address.
        (handle_probe_pin): New method of generic_loader.
        (generic_loader): Initialize probe_pin and add "probe" pin.
        * sw-load-elf.xml: Describe the new pin.
        * sw-load-elf.txt: Regenerated.
@
text
@d7 5
d22 1
d51 6
@


1.3
log
@2003-10-07  Dave Brolley  <brolley@@redhat.com>

        * compLoader.cxx (loader_probe_bus): Now takes pin as an argument.
        Remove warn_write_to_code_p. Initialize write_to_code_address_pin.
        (SID_GB_WRITE): Drive write_to_code_address_pin instead of
        generating a message here.
        (write_to_code_address_pin): New member of generic_loader.
        (set_warn_write_to_code): Removed.
        (generic_loader): remove "warn-write-to-code?" attribute and pin.
        Add "write-to-code-address" pin.
        * sw-load-elf.xml: Remove reference to "warn-write-to-code?" pin
        and attribute. Document "write-to-code-address" pin.
        * sw-load-elf.txt: Regenerated.

2003-10-07  Dave Brolley  <brolley@@redhat.com>

        * compLoader.cxx: Use sidutil::fixed_bus_map_component.
        (loader_probe_bus): New class.
        (warn_write_to_code_pin): New member of generic_loader.
        (probe_upstream): Ditto.
        (probe_downstream): Ditto.
        (set_warn_write_to_code): New method of generic_loader.
        (generic_loader): Now inherits fixed_bus_map_component.
        Initialize new members.

2003-10-07  Dave Brolley  <brolley@@redhat.com>

        For Stan Cox  <scox@@redhat.com>
        * elfload.c (textSegmentAddress): New function.
        * elfload.h (textSegmentAddress): Likewise.
@
text
@d12 1
d77 2
a78 1
      probe-downstream accessor.
@


1.2
log
@* belated merge.

2001-08-15  John Healy  <jhealy@@redhat.com>

	* sw-load-elf.xml: Changed "set loader file" to "set cpu-loader file".
	* sw-load-elf.txt: Ditto.
@
text
@d11 1
d17 2
d21 1
d67 11
@


1.1
log
@* new XML documentation.
* ChangeLog entries to follow later.
@
text
@d90 1
a90 1
	set loader file "/foo/bar.x"
@

