head	1.5;
access;
symbols
	sid-snapshot-20180601:1.5
	sid-snapshot-20180501:1.5
	sid-snapshot-20180401:1.5
	sid-snapshot-20180301:1.5
	sid-snapshot-20180201:1.5
	sid-snapshot-20180101:1.5
	sid-snapshot-20171201:1.5
	sid-snapshot-20171101:1.5
	sid-snapshot-20171001:1.5
	sid-snapshot-20170901:1.5
	sid-snapshot-20170801:1.5
	sid-snapshot-20170701:1.5
	sid-snapshot-20170601:1.5
	sid-snapshot-20170501:1.5
	sid-snapshot-20170401:1.5
	sid-snapshot-20170301:1.5
	sid-snapshot-20170201:1.5
	sid-snapshot-20170101:1.5
	sid-snapshot-20161201:1.5
	sid-snapshot-20161101:1.5
	sid-snapshot-20160901:1.5
	sid-snapshot-20160801:1.5
	sid-snapshot-20160701:1.5
	sid-snapshot-20160601:1.5
	sid-snapshot-20160501:1.5
	sid-snapshot-20160401:1.5
	sid-snapshot-20160301:1.5
	sid-snapshot-20160201:1.5
	sid-snapshot-20160101:1.5
	sid-snapshot-20151201:1.5
	sid-snapshot-20151101:1.5
	sid-snapshot-20151001:1.5
	sid-snapshot-20150901:1.5
	sid-snapshot-20150801:1.5
	sid-snapshot-20150701:1.5
	sid-snapshot-20150601:1.5
	sid-snapshot-20150501:1.5
	sid-snapshot-20150401:1.5
	sid-snapshot-20150301:1.5
	sid-snapshot-20150201:1.5
	sid-snapshot-20150101:1.5
	sid-snapshot-20141201:1.5
	sid-snapshot-20141101:1.5
	sid-snapshot-20141001:1.5
	sid-snapshot-20140901:1.5
	sid-snapshot-20140801:1.5
	sid-snapshot-20140701:1.5
	sid-snapshot-20140601:1.5
	sid-snapshot-20140501:1.5
	sid-snapshot-20140401:1.5
	sid-snapshot-20140301:1.5
	sid-snapshot-20140201:1.5
	sid-snapshot-20140101:1.5
	sid-snapshot-20131201:1.5
	sid-snapshot-20131101:1.5
	sid-snapshot-20131001:1.5
	sid-snapshot-20130901:1.5
	sid-snapshot-20130801:1.5
	sid-snapshot-20130701:1.5
	sid-snapshot-20130601:1.5
	sid-snapshot-20130501:1.5
	sid-snapshot-20130401:1.5
	sid-snapshot-20130301:1.5
	sid-snapshot-20130201:1.5
	sid-snapshot-20130101:1.5
	sid-snapshot-20121201:1.5
	sid-snapshot-20121101:1.5
	sid-snapshot-20121001:1.5
	sid-snapshot-20120901:1.5
	sid-snapshot-20120801:1.5
	sid-snapshot-20120701:1.5
	sid-snapshot-20120601:1.5
	sid-snapshot-20120501:1.5
	sid-snapshot-20120401:1.5
	sid-snapshot-20120301:1.5
	sid-snapshot-20120201:1.5
	sid-snapshot-20120101:1.5
	sid-snapshot-20111201:1.5
	sid-snapshot-20111101:1.5
	sid-snapshot-20111001:1.5
	sid-snapshot-20110901:1.5
	sid-snapshot-20110801:1.5
	sid-snapshot-20110701:1.5
	sid-snapshot-20110601:1.5
	sid-snapshot-20110501:1.5
	sid-snapshot-20110401:1.5
	sid-snapshot-20110301:1.5
	sid-snapshot-20110201:1.5
	sid-snapshot-20110101:1.5
	sid-snapshot-20101201:1.5
	sid-snapshot-20101101:1.5
	sid-snapshot-20101001:1.5
	sid-snapshot-20100901:1.5
	sid-snapshot-20100801:1.5
	sid-snapshot-20100701:1.5
	sid-snapshot-20100601:1.5
	sid-snapshot-20100501:1.5
	sid-snapshot-20100401:1.5
	sid-snapshot-20100301:1.5
	sid-snapshot-20100201:1.5
	sid-snapshot-20100101:1.5
	sid-snapshot-20091201:1.5
	sid-snapshot-20091101:1.5
	sid-snapshot-20091001:1.5
	sid-snapshot-20090901:1.5
	sid-snapshot-20090801:1.5
	sid-snapshot-20090701:1.5
	sid-snapshot-20090601:1.5
	sid-snapshot-20090501:1.5
	sid-snapshot-20090401:1.5
	sid-snapshot-20090301:1.5
	sid-snapshot-20090201:1.5
	sid-snapshot-20090101:1.5
	sid-snapshot-20081201:1.5
	sid-snapshot-20081101:1.5
	sid-snapshot-20081001:1.5
	sid-snapshot-20080901:1.5
	sid-snapshot-20080801:1.5
	sid-snapshot-20080701:1.5
	sid-snapshot-20080601:1.5
	sid-snapshot-20080501:1.5
	sid-snapshot-20080403:1.5
	sid-snapshot-20080401:1.5
	sid-snapshot-20080301:1.5
	sid-snapshot-20080201:1.5
	sid-snapshot-20080101:1.5
	sid-snapshot-20071201:1.5
	sid-snapshot-20071101:1.5
	sid-snapshot-20071001:1.5
	sid-20020905-branchpoint:1.2
	sid-20020905-branch:1.2.0.2
	cygnus_cvs_20020108_pre:1.2;
locks; strict;
comment	@# @;


1.5
date	2006.06.26.22.00.35;	author brolley;	state Exp;
branches;
next	1.4;

1.4
date	2006.05.11.16.04.38;	author brolley;	state Exp;
branches;
next	1.3;

1.3
date	2002.11.11.22.28.29;	author fche;	state Exp;
branches;
next	1.2;

1.2
date	2001.11.08.21.55.11;	author fche;	state Exp;
branches;
next	1.1;

1.1
date	2001.08.03.01.47.53;	author bje;	state Exp;
branches;
next	;


desc
@@


1.5
log
@2006-06-26  Dave Brolley  <brolley@@redhat.com>

        * sw-profile-gprof.xml: Document new sampling interface.
        * sw-profile-gprof.txt: Regenerated.
@
text
@<?xml version="1.0" ?>
<!DOCTYPE defcomplib SYSTEM "http://sources.redhat.com/sid/component.dtd">

<defcomplib lib="libprof.la" dlsym="prof_component_library">
  <defcomponent name="sw-profile-gprof" type="concrete">

    <!-- pins -->
    <defpin name="reset" direction="in" legalvalues="any" behaviors="resetting" />
    <defpin name="pc" direction="in" legalvalues="any" behaviors="data gathering" />
    <defpin name="pc-hi" direction="in" legalvalues="any" behaviors="data gathering" />
    <defpin name="sample" direction="in" legalvalues="any" behaviors="data gathering" />
    <defpin name="cg-caller" direction="in" legalvalues="any" behaviors="data gathering" />
    <defpin name="cg-caller-hi" direction="in" legalvalues="any" behaviors="data gathering" />
    <defpin name="cg-callee" direction="in" legalvalues="any" behaviors="data gathering" />
    <defpin name="cg-callee-hi" direction="in" legalvalues="any" behaviors="data gathering" />
    <defpin name="store" direction="in" legalvalues="any" behaviors="profile generation" />

    <!-- attributes -->
    <defattribute name="value-count" category="register" legalvalues="decimal string" behaviors="data gathering" />
    <defattribute name="value-min" category="register" legalvalues="decimal string" behaviors="data gathering" />
    <defattribute name="value-max" category="register" legalvalues="decimal string" behaviors="data gathering" />
    <defattribute name="limit-min" category="setting" legalvalues="decimal string" defaultvalue="0" behaviors="data gathering" />
    <defattribute name="limit-max" category="setting" legalvalues="decimal string" defaultvalue="infinity" behaviors="data gathering" />
    <defattribute name="bucket-size" category="setting" legalvalues="integer" defaultvalue="1" behaviors="data gathering" />
    <defattribute name="pc-size" category="setting" legalvalues="4 or 8" defaultvalue="4" behaviors="data gathering" />
    <defattribute name="output-file" category="setting" legalvalues="file name" defaultvalue="'gmon.out'" behaviors="configuration" />
    <defattribute name="output-file-endianness" category="setting" legalvalues="0/1/2/little/big/unknown" defaultvalue="unknown" behaviors="configuration" />
    <defattribute name="reset" category="pin" behaviors="resetting" />
    <defattribute name="sample" category="pin" behaviors="data gathering" />
    <defattribute name="cg-caller" category="pin" behaviors="data gathering" />
    <defattribute name="cg-caller-hi" category="pin" behaviors="data gathering" />
    <defattribute name="cg-callee" category="pin" behaviors="data gathering" />
    <defattribute name="cg-callee-hi" category="pin" behaviors="data gathering" />
    <defattribute name="store" category="pin" behaviors="profile generation" />


    <!-- relationships -->
    <defrelationship name="target-component" behaviors="configuration" />
  </defcomponent>
  <synop>
    <p>
      This component accumulates profiling information from a target
      CPU and generates a gprof-compatible histogram file. 
    </p>
  </synop>
  <func>

    <modelling>
      <p>
	This component emulates profiling routines embedded in target
	programs, as if they were compiled with <tt>gcc -pg</tt>.
      </p>
    </modelling>

    <behavior name="configuration">
      <p>
      This component needs to be configured with the <relation>target-component</relation>
      relation.  The first element in the relation will be used as the
      target of profiling.  If pc-size is 64, then
      the target component should also have an attribute with the same name suffixed by "-hi"
      </p>
      <p>
      The <attribute>bucket-size</attribute> attribute configures the width of the
      histogram buckets.  It is invalid to change the bucket size if
      any samples have been accumulated (if <attribute>value-count</attribute> is nonzero).
      </p>
      <p>
      The <attribute>pc-size</attribute> attribute configures the width of the
      program counter in bytes.  Valid values are 4 and 8.
      </p>
      <p>
      The <attribute>output-file</attribute> setting gives the name of the eventual profiling
      output file.  The <attribute>output-file-endianness</attribute> setting determines the
      endianness of the gprof formatted output.
      </p>
    </behavior>

    <behavior name="data gathering">
      <p>
      Whenever the <pin>sample</pin> pin is driven, this component
      takes a single sample using the number drive  on the pin.
      The resulting number is accumulated in a big histogram, in
      the appropriate bucket.  The bucket is chosen by combining the two 32 bit values
      last driven on the <pin>pc</pin> and the <pin>pc-hi</pin> pins to form one 64 bit index.
      This index is then masked into <attribute>bucket-size</attribute>-wide buckets.
      If the target component is unset then no sample is accumulated.
      </p>
      <p>Alternately, if the <pin>cg-caller</pin> and perhaps the <pin>cg-caller-hi</pin>
      and then the <pin>cg-callee</pin> and perhaps the <pin>cg-callee-hi</pin>
      pins are driven, the values driven are interpreted as the caller and the
      callee PC addresses of a subroutine call event.  These events are recorded
      in a dynamic call graph. The -hi versions of the <pin>cg-caller-pin</pin> and
      <pin>cg-callee-pin</pin> are used to provide 64 bit pc values and, if used,
      must be driven before their counterparts.
      </p>
      <p>
      If a sample was collected, and falls between the
      <attribute>limit-min</attribute> and
      <attribute>limit-max</attribute> attributes' bounds,
      <attribute>value-count</attribute> is incremented, and
      <attribute>value-min</attribute> and
      <attribute>value-max</attribute> registers are updated.
      </p>
    </behavior>

    <behavior name="resetting">
      <p>
      Whenever the <pin>reset</pin> pin is driven, the entire accumulated
      histogram and associated counters are discarded and a new count
      will be started.  It is not necessary to drive this pin at
      simulation startup.
      </p>
    </behavior>

    <behavior name="profile generation">
      Whenever the <pin>store</pin> pin is driven, this component dumps the entire
      accumulated histogram and call graph into a gprof (version 1) formatted file.  The
      file's endianness is chosen based on the <attribute>target-file-endianness</attribute>
      setting.  If it is unset, the target component's <attribute>endian</attribute> attribute
      will be queried and used if valid.

      The histogram and call graph are not automatically cleared after the store
      operation.  This makes it possible to save multiple generational
      profiling files to track history of a program cumulatively.  If
      the <pin>reset</pin> pin is triggered after every <pin>store</pin>, then separate
      intervals of the program's execution may be profiled.
    </behavior>

    <convention name="supervisory" supported="true" />
    <convention name="save/restore" supported="false" />
    <convention name="triggerpoints" supported="false" />
    <convention name="detect-reentrancy" supported="false" />
    <convention name="category" supported="true">
      It presents attributes in the <tt>pin</tt>, <tt>setting</tt> and categories.
    </convention>
  </func>
  <env>
    <title>
   Related components</title>
    <p>
     This component is typically connected to a CPU, and told to
      monitor the CPU's program counter (pc) register.  Sampling may
      be driven by any activity in SID, such as bus traffic (see
      <tt>hw-probe-bus</tt>), or host or target schedulers (see
      <tt>sid-sched-*</tt>).
      </p>

    <code>
	new sw-profile-gprof gprof
	new SOME_KIND_OF_CPU cpu
	relate gprof target-component cpu
	connect-pin shutdown-manager output-5 -&gt; gprof store
	connect-pin cpu sample-gprof -&gt; gprof sample
	connect-pin cpu gprof-pc -&gt; gprof pc
    </code>
    <title>
   Host system
    </title>
    <p>
    The amount of data tracked by this component may be very large,
      if <attribute>bucket-size</attribute> is small and the target value has a large number
      of distinct values.  Internally, a map or hash_map is used to
      track each bucket, so it does not matter how sparse the target
      value domain is.  However, at store time, each potential
      bucket in the histogram, from <attribute>value-min</attribute> to <attribute>value-max</attribute>, is
      recorded, so sparse values may generate large blocks of zeroes in
      the output.
    </p>
    <p>
      Depending on whether the connected CPU model sends call-graph events,
      the resulting <tt>gmon.out</tt> may contain histogram with or without
      call-graph data.  If the former, gprof must be run with an option such
      as <tt>--flat-profile</tt>.
    </p>
  </env>
</defcomplib>

@


1.4
log
@2006-05-11  Dave Brolley  <brolley@@redhat.com>

        * gprof.cxx (hitcount_map_t): PC now host_int_8.
        (cg_count_map_t): Likewise.
        (statistics): value_min,value_max,limit_min,limit_max likewise.
        New member, pc_size.
        (statistics::operator=): Copy pc_size.
        (cg_caller_hi_pin): New pin.
        (cg_callee_hi_pin): New pin.
        (limit_min_set): Handle 64 bits.
        (limit_max_set): Handle 64 bits.
        (pc_size_get): New method.
        (pc_size_set): New method.
        (accumulate): Use target_attribute + "-hi" to obtain 64 bit pc. Handle
        64 bits throughout.
        (accumulate_call): Use {caller,callee}_hi pin to obtain 64 bit pc. Handle
        64 bits throughout.
        (store_stats): Handle 32 or 64 bit pc.
        (gprof_component): Add cg-caller_hi and cg-callee-hi pins. Add pc-size
        attribute. Initialize value on cg-caller-hi and cg-callee-hi to zero.
        * sw-profile-gprof.xml: Document cg-caller-hi, cg-callee-hi,
        bucket-size, pc-size.
        * sw-profile-gprof.txt: Regenerated.
@
text
@d9 2
a25 1
    <defattribute name="value-attribute" category="setting" legalvalues="name" defaultvalue="'pc'" behaviors="data gathering" />
d59 1
a59 2
      target of profiling.  The <attribute>value-attribute</attribute> setting contains the
      name of the target component's attribute that will be collected. If pc-size is 64, then
d81 6
a86 7
      takes a single sample of the configured target component's value
      attribute.  The attribute is interpreted as a numeric string,
      and the resulting number is accumulated in a big histogram, in
      the appropriate bucket.  The bucket is chosen by masking the
      number into <attribute>bucket-size</attribute>-wide buckets.
      If the target component is unset, or its target attribute does
      not result in a valid numeric string, no sample is accumulated.
d146 1
a146 2
      Perhaps the simplest way is to take a CPU PC sample every time
      the CPU has completed a batch of instructions.</p>
d153 2
a154 4
	connect-pin foo output -&gt; cpu step!
	connect-pin foo output -&gt; gprof sample
	# Set sampling interval by number of CPU instructions.
	set cpu step-insn-count 127
@


1.3
log
@* better c++ standard compliance

[e.g.]
[include/ChangeLog]
2002-11-11  Frank Ch. Eigler  <fche@@redhat.com>

        * sidcpuutil.h (cpu_trace_stream): Add some std:: qualifiers.

[component/glue/ChangeLog]
2002-11-11  Frank Ch. Eigler  <fche@@redhat.com>

        * glue.cxx (bus_prober): Dtor throw() fixes.
@
text
@d11 1
d13 1
d22 2
d30 1
d32 1
d59 2
a60 1
      name of the target component's attribute that will be collected.
d68 4
d89 2
a90 1
      <p>Alternately, if the <pin>cg-caller</pin> and then the <pin>cg-callee</pin>
d93 3
a95 1
      in a dynamic call graph.
@


1.2
log
@* call graph profiling support

[sid/bsp]
2001-11-08  Frank Ch. Eigler  <fche@@redhat.com>

	* configrun-sid.in (gprof): Connect call-graph pins.

[sid/include]
2001-11-08  Frank Ch. Eigler  <fche@@redhat.com>

	* sidcpuutil.h (basic_cpu): Add cg caller/callee pins, trace_stream
	fields.
	(basic_cpu ctor): Initialize them.
	(cg_profile): New function.

[sid/component/cgen-cpu]
2001-11-08  Frank Ch. Eigler  <fche@@redhat.com>

	* cgen-cpu.h (cgen_bi_endian_cpu): Remove trace_stream field: it's
	in basic_cpu now.
	* compCGEN.cxx: Corresponding change.

[sid/component/profiling]
2001-11-08  Frank Ch. Eigler  <fche@@redhat.com>

	* gprof.cxx (gprof_component): Add cg caller/callee pins, cg_count_map
	field.
	(accumulate_call): New function.
	(reset): Clear cg map.
	(store): Emit call graph info.  Emit histogram iff nonempty.
	* sw-profile-gprof.xml: Document call graph functionality.
	* sw-profile-gprof.txt: Regenerated.
@
text
@d160 4
a163 4
     Since this component generates a histogram-type gprof file
      instead of the arc-type file that <tt>-pg</tt>-compiled target programs
      usually generate, gprof must be run with an option such as
      <tt>--flat-profile</tt>.  Call graph information is not collected.
@


1.1
log
@* new XML documentation.
* ChangeLog entries to follow later.
@
text
@d8 1
d10 2
a11 1
    <defpin name="reset" direction="in" legalvalues="any" behaviors="data gathering" />
a13 1

d23 1
d25 2
a26 1
    <defattribute name="reset" category="pin" behaviors="data gathering" />
d69 21
a89 13
      Whenever the <pin>sample</pin> pin is driven, this component takes a single
      sample of the configured target component's value attribute.  The
      attribute is interpreted as a numeric string, and the resulting
      number is accumulated in a big histogram, in the appropriate bucket.
      The bucket is chosen by masking the number into <attribute>bucket-size</attribute>-wide
      buckets.
      </p>
      <p>
      If the target component is unset, or its target attribute does not
      result in a valid numeric string, no sample is accumulated.  If a
      sample was collected, and falls between the <attribute>limit-min</attribute> and <attribute>limit-max</attribute>
      attributes' bounds, <attribute>value-count</attribute> is incremented, and <attribute>value-min</attribute>
      and <attribute>value-max</attribute> registers are updated.
d91 3
d104 1
a104 1
      accumulated histogram into a gprof (version 1) formatted file.  The
d109 1
a109 1
      The histogram is not automatically cleared after the store
a114 1

@

