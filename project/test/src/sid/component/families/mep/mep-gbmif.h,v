head	1.1;
access;
symbols
	sid-snapshot-20180601:1.1
	sid-snapshot-20180501:1.1
	sid-snapshot-20180401:1.1
	sid-snapshot-20180301:1.1
	sid-snapshot-20180201:1.1
	sid-snapshot-20180101:1.1
	sid-snapshot-20171201:1.1
	sid-snapshot-20171101:1.1
	sid-snapshot-20171001:1.1
	sid-snapshot-20170901:1.1
	sid-snapshot-20170801:1.1
	sid-snapshot-20170701:1.1
	sid-snapshot-20170601:1.1
	sid-snapshot-20170501:1.1
	sid-snapshot-20170401:1.1
	sid-snapshot-20170301:1.1
	sid-snapshot-20170201:1.1
	sid-snapshot-20170101:1.1
	sid-snapshot-20161201:1.1
	sid-snapshot-20161101:1.1
	sid-snapshot-20160901:1.1
	sid-snapshot-20160801:1.1
	sid-snapshot-20160701:1.1
	sid-snapshot-20160601:1.1
	sid-snapshot-20160501:1.1
	sid-snapshot-20160401:1.1
	sid-snapshot-20160301:1.1
	sid-snapshot-20160201:1.1
	sid-snapshot-20160101:1.1
	sid-snapshot-20151201:1.1
	sid-snapshot-20151101:1.1
	sid-snapshot-20151001:1.1
	sid-snapshot-20150901:1.1
	sid-snapshot-20150801:1.1
	sid-snapshot-20150701:1.1
	sid-snapshot-20150601:1.1
	sid-snapshot-20150501:1.1
	sid-snapshot-20150401:1.1
	sid-snapshot-20150301:1.1
	sid-snapshot-20150201:1.1
	sid-snapshot-20150101:1.1
	sid-snapshot-20141201:1.1
	sid-snapshot-20141101:1.1
	sid-snapshot-20141001:1.1
	sid-snapshot-20140901:1.1
	sid-snapshot-20140801:1.1
	sid-snapshot-20140701:1.1
	sid-snapshot-20140601:1.1
	sid-snapshot-20140501:1.1
	sid-snapshot-20140401:1.1
	sid-snapshot-20140301:1.1
	sid-snapshot-20140201:1.1
	sid-snapshot-20140101:1.1
	sid-snapshot-20131201:1.1
	sid-snapshot-20131101:1.1
	sid-snapshot-20131001:1.1
	sid-snapshot-20130901:1.1
	sid-snapshot-20130801:1.1
	sid-snapshot-20130701:1.1
	sid-snapshot-20130601:1.1
	sid-snapshot-20130501:1.1
	sid-snapshot-20130401:1.1
	sid-snapshot-20130301:1.1
	sid-snapshot-20130201:1.1
	sid-snapshot-20130101:1.1
	sid-snapshot-20121201:1.1
	sid-snapshot-20121101:1.1
	sid-snapshot-20121001:1.1
	sid-snapshot-20120901:1.1
	sid-snapshot-20120801:1.1
	sid-snapshot-20120701:1.1
	sid-snapshot-20120601:1.1
	sid-snapshot-20120501:1.1
	sid-snapshot-20120401:1.1
	sid-snapshot-20120301:1.1
	sid-snapshot-20120201:1.1
	sid-snapshot-20120101:1.1
	sid-snapshot-20111201:1.1
	sid-snapshot-20111101:1.1
	sid-snapshot-20111001:1.1
	sid-snapshot-20110901:1.1
	sid-snapshot-20110801:1.1
	sid-snapshot-20110701:1.1
	sid-snapshot-20110601:1.1
	sid-snapshot-20110501:1.1
	sid-snapshot-20110401:1.1
	sid-snapshot-20110301:1.1
	sid-snapshot-20110201:1.1
	sid-snapshot-20110101:1.1
	sid-snapshot-20101201:1.1
	sid-snapshot-20101101:1.1
	sid-snapshot-20101001:1.1
	sid-snapshot-20100901:1.1
	sid-snapshot-20100801:1.1
	sid-snapshot-20100701:1.1
	sid-snapshot-20100601:1.1
	sid-snapshot-20100501:1.1
	sid-snapshot-20100401:1.1
	sid-snapshot-20100301:1.1
	sid-snapshot-20100201:1.1
	sid-snapshot-20100101:1.1
	sid-snapshot-20091201:1.1
	sid-snapshot-20091101:1.1
	sid-snapshot-20091001:1.1
	sid-snapshot-20090901:1.1
	sid-snapshot-20090801:1.1
	sid-snapshot-20090701:1.1
	sid-snapshot-20090601:1.1
	sid-snapshot-20090501:1.1
	sid-snapshot-20090401:1.1
	sid-snapshot-20090301:1.1
	sid-snapshot-20090201:1.1
	sid-snapshot-20090101:1.1
	sid-snapshot-20081201:1.1
	sid-snapshot-20081101:1.1
	sid-snapshot-20081001:1.1
	sid-snapshot-20080901:1.1
	sid-snapshot-20080801:1.1
	sid-snapshot-20080701:1.1
	sid-snapshot-20080601:1.1
	sid-snapshot-20080501:1.1
	sid-snapshot-20080403:1.1
	sid-snapshot-20080401:1.1
	sid-snapshot-20080301:1.1
	sid-snapshot-20080201:1.1
	sid-snapshot-20080101:1.1
	sid-snapshot-20071201:1.1
	sid-snapshot-20071101:1.1
	sid-snapshot-20071001:1.1;
locks; strict;
comment	@ * @;


1.1
date	2007.02.05.20.28.40;	author brolley;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Support for Toshiba MeP.
@
text
@// mep-gbmif.h - The Toshiba MeP Global Bus Master Interface Unit
// -*- C++ -*-

// Copyright (C) 2004 Red Hat.
// This file is part of SID and is licensed under the GPL.
// See the file COPYING.SID for conditions for redistribution.

#ifndef MEP_GBMIF_H
#define MEP_GBMIF_H

#include <sidcomp.h>
#include <sidbusutil.h>
#include <list>
#include <string>

namespace toshapi {

// Use these namespaces for convenience.
using namespace sidutil;
using namespace sid;
using std::list;

class GlobalBus: public bus_arbitrator
{
public:
  GlobalBus ();
  ~GlobalBus () throw () { }

protected:
  // enumerate the interfaces
  enum downstream_if {global_memory, num_downstream_ifs};

  virtual const char *up2str (int upstream)
    {
      string str = "GBIF interface " + sidutil::make_attribute (upstream);
      return str.c_str ();
    }

protected:
  // Virtual overrides for arbitration
  //
  virtual bool prioritize_request (bus_request &r);

  virtual int prioritize (const bus_request& r1, const bus_request &r2);
  virtual bool access_granted (bus_request &r);
  virtual bool check_passthrough (int = 0);

protected:
  virtual void lock_downstream (int upstream, int downstream)
    {
      bool state = check_locked (upstream);
      log (7, "%s: downstream pin now: %d \n", name.c_str (), (int)state);
      downstream_lock_pin.set (state);
    }

  virtual bool check_locked (int upstream)
    {
      assert (upstream < num_ports);
      log (7, "%s: upstream pin %d: %d \n", name.c_str (), upstream,
	   upstream_lock_pin[upstream]->state () == binary_pin_active);
      return upstream_lock_pin[upstream]->state () == binary_pin_active;
    }

protected:
  // Virtual overrides for timing
  //
  // Read and write both have a latency of 1 cycle
  virtual sid::host_int_2 access_latency (bus_request &r) { return 1; }

  // Utility methods
  //
  //
  virtual int downstream_for_address (host_int_4 address) { return global_memory; }
  virtual bool check_route_busy (int upstream, int downstream);
  virtual sid::bus::status set_route_busy (bus_request &r, bus::status s);
  virtual void update_busy_routes ();
  virtual sid::bus::status busy_status ()
    {
      // Busy for at least this many cycles
      sid::bus::status s (sid::bus::busy, busy ? busy : 1);
      return s;
    }

  virtual bus *downstream_bus (int downstream) { return global_bus; }

protected:
  // Input busses
  input_interface** gbif_busses; 

  // Output accessors
  bus *global_bus;

  // Input pins
  binary_input_pin **passthrough_pin;
  binary_input_pin **upstream_lock_pin;

  // Output pins
  binary_output_pin downstream_lock_pin;

  // State
  void ports_attribute_set ();
  unsigned num_ports;
  list<bus_request> request_queue;
  host_int_2 busy;
  int lock_owner;
  int prev_latency;
  host_int_2 total_latency;
};

} // namespace toshapi

#endif // MEP_GBMIF_H
@
