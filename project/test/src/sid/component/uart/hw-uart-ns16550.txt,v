head	1.2;
access;
symbols
	sid-snapshot-20180601:1.2
	sid-snapshot-20180501:1.2
	sid-snapshot-20180401:1.2
	sid-snapshot-20180301:1.2
	sid-snapshot-20180201:1.2
	sid-snapshot-20180101:1.2
	sid-snapshot-20171201:1.2
	sid-snapshot-20171101:1.2
	sid-snapshot-20171001:1.2
	sid-snapshot-20170901:1.2
	sid-snapshot-20170801:1.2
	sid-snapshot-20170701:1.2
	sid-snapshot-20170601:1.2
	sid-snapshot-20170501:1.2
	sid-snapshot-20170401:1.2
	sid-snapshot-20170301:1.2
	sid-snapshot-20170201:1.2
	sid-snapshot-20170101:1.2
	sid-snapshot-20161201:1.2
	sid-snapshot-20161101:1.2
	sid-snapshot-20160901:1.2
	sid-snapshot-20160801:1.2
	sid-snapshot-20160701:1.2
	sid-snapshot-20160601:1.2
	sid-snapshot-20160501:1.2
	sid-snapshot-20160401:1.2
	sid-snapshot-20160301:1.2
	sid-snapshot-20160201:1.2
	sid-snapshot-20160101:1.2
	sid-snapshot-20151201:1.2
	sid-snapshot-20151101:1.2
	sid-snapshot-20151001:1.2
	sid-snapshot-20150901:1.2
	sid-snapshot-20150801:1.2
	sid-snapshot-20150701:1.2
	sid-snapshot-20150601:1.2
	sid-snapshot-20150501:1.2
	sid-snapshot-20150401:1.2
	sid-snapshot-20150301:1.2
	sid-snapshot-20150201:1.2
	sid-snapshot-20150101:1.2
	sid-snapshot-20141201:1.2
	sid-snapshot-20141101:1.2
	sid-snapshot-20141001:1.2
	sid-snapshot-20140901:1.2
	sid-snapshot-20140801:1.2
	sid-snapshot-20140701:1.2
	sid-snapshot-20140601:1.2
	sid-snapshot-20140501:1.2
	sid-snapshot-20140401:1.2
	sid-snapshot-20140301:1.2
	sid-snapshot-20140201:1.2
	sid-snapshot-20140101:1.2
	sid-snapshot-20131201:1.2
	sid-snapshot-20131101:1.2
	sid-snapshot-20131001:1.2
	sid-snapshot-20130901:1.2
	sid-snapshot-20130801:1.2
	sid-snapshot-20130701:1.2
	sid-snapshot-20130601:1.2
	sid-snapshot-20130501:1.2
	sid-snapshot-20130401:1.2
	sid-snapshot-20130301:1.2
	sid-snapshot-20130201:1.2
	sid-snapshot-20130101:1.2
	sid-snapshot-20121201:1.2
	sid-snapshot-20121101:1.2
	sid-snapshot-20121001:1.2
	sid-snapshot-20120901:1.2
	sid-snapshot-20120801:1.2
	sid-snapshot-20120701:1.2
	sid-snapshot-20120601:1.2
	sid-snapshot-20120501:1.2
	sid-snapshot-20120401:1.2
	sid-snapshot-20120301:1.2
	sid-snapshot-20120201:1.2
	sid-snapshot-20120101:1.2
	sid-snapshot-20111201:1.2
	sid-snapshot-20111101:1.2
	sid-snapshot-20111001:1.2
	sid-snapshot-20110901:1.2
	sid-snapshot-20110801:1.2
	sid-snapshot-20110701:1.2
	sid-snapshot-20110601:1.2
	sid-snapshot-20110501:1.2
	sid-snapshot-20110401:1.2
	sid-snapshot-20110301:1.2
	sid-snapshot-20110201:1.2
	sid-snapshot-20110101:1.2
	sid-snapshot-20101201:1.2
	sid-snapshot-20101101:1.2
	sid-snapshot-20101001:1.2
	sid-snapshot-20100901:1.2
	sid-snapshot-20100801:1.2
	sid-snapshot-20100701:1.2
	sid-snapshot-20100601:1.2
	sid-snapshot-20100501:1.2
	sid-snapshot-20100401:1.2
	sid-snapshot-20100301:1.2
	sid-snapshot-20100201:1.2
	sid-snapshot-20100101:1.2
	sid-snapshot-20091201:1.2
	sid-snapshot-20091101:1.2
	sid-snapshot-20091001:1.2
	sid-snapshot-20090901:1.2
	sid-snapshot-20090801:1.2
	sid-snapshot-20090701:1.2
	sid-snapshot-20090601:1.2
	sid-snapshot-20090501:1.2
	sid-snapshot-20090401:1.2
	sid-snapshot-20090301:1.2
	sid-snapshot-20090201:1.2
	sid-snapshot-20090101:1.2
	sid-snapshot-20081201:1.2
	sid-snapshot-20081101:1.2
	sid-snapshot-20081001:1.2
	sid-snapshot-20080901:1.2
	sid-snapshot-20080801:1.2
	sid-snapshot-20080701:1.2
	sid-snapshot-20080601:1.2
	sid-snapshot-20080501:1.2
	sid-snapshot-20080403:1.2
	sid-snapshot-20080401:1.2
	sid-snapshot-20080301:1.2
	sid-snapshot-20080201:1.2
	sid-snapshot-20080101:1.2
	sid-snapshot-20071201:1.2
	sid-snapshot-20071101:1.2
	sid-snapshot-20071001:1.2
	sid-20020905-branchpoint:1.2
	sid-20020905-branch:1.2.0.2
	cygnus_cvs_20020108_pre:1.2;
locks; strict;
comment	@# @;


1.2
date	2001.08.03.01.30.22;	author bje;	state Exp;
branches;
next	1.1;

1.1
date	2000.12.07.19.31.06;	author fche;	state Exp;
branches;
next	;


desc
@@


1.2
log
@* Freshly generated documentation.
* ChangeLog entries to follow later.
@
text
@             hw-uart-ns16550 (libuart.la :: uart_component_library)

Synopsis:

   The PC16550D contains independent serial input and output ports that
   perform byte-at-a-time I/O. The 16550 is distinguished from its
   predecessor, the 16450, by two 16-byte FIFOs. The FIFOs allow the CPU to
   buffer data to reduce the frequency of interrupts. The 16550 also supports
   model-control functions DMA hand-shaking, and have a loop-back mode for
   testing.

     ----------------------------------------------------------------------

Functionality:

  Modelling:

   The Uart model is somewhat abstracted from its hardware counterpart:

     * The Sin and Sout pins carry a character at a time, including the
       parity bit, if enabled. Normally, a character is 7-bits wide, so the
       model transmits and receives one byte at a time. However, the chip
       supports character widths of 5 to 8 bits, so up to 9 bits (8 data +
       parity) may be transmitted. Stop bits are not modeled. If the
       sio-framing? attribute is off, then only the raw data bits are passed
       on the pins. The in-fifo-length attribute may be used to simulate an
       arbitrarily large input FIFO. The out-fifo-length attribute is the
       converse, though is just a placebo since there is no output FIFO
       processing at all.

     * The preceding point suggests that the model uses an infinite baud
       rate, since all the bits in a character are transmitted in a single
       event. This means that:

          * The timing pins (XIN, XOUT, RCLK, BAUDOUT) are not simulated.
          * Break functionality cannot be modeled.
          * Framing errors cannot occur.
          * The Divisor Latch is modeled but its values are ignored.
          * To handle Character Timeouts, the UART model relies on callbacks
            from the scheduler.

   +-------------------------------------------------+
   |                 SID Conventions                 |
   |-------------------------------------------------|
   |   functional | supported  | -                   |
   |--------------+------------+---------------------|
   | save/restore | supported  | -                   |
   |--------------+------------+---------------------|
   |    reentrant | not        | -                   |
   |              | supported  |                     |
   |--------------+------------+---------------------|
   |  target view | supported  | Pins and registers  |
   |      manager |            | are both accessible |
   |              |            | from the Target     |
   |              |            | View Manager        |
   +-------------------------------------------------+

     ----------------------------------------------------------------------

Environment:

   Related components
     * Besides the CPU bus, the UART typically connects to both a serial
       source and a serial sink component. The sink/source may be combined,
       as with a modem component. More advanced designs will use the
       TxRDY/RxRDY pins to communicate with a DMA controller.

       If the UART is run using interrupts (versus polling) it should also be
       connected to the scheduler so that transmit/receive timeouts are
       handled correctly.

       Because the UART will be programmed to use a specific line discipline,
       you must take care to match this discipline in both the sink and
       source.

     * The following configuration file segment shows how to connect the UART
       to a keyboard and console for interrupt-driven operation:

       # components involved - cpu and bus are assumed
       new hw-uart-ns16550 uart
       new hw-keyboard keyboard
       new hw-console console
       new sid-sched-sim target-sched
       set target-sched num-clients 2
       # connect uart to bus at memory-mapped address 0x800000
       connect-bus bus [0x800000-0x800008,4,1] uart Bus
       # pin connections
       connect-pin uart INTR -> cpu intr
       connect-pin uart Sout -> console SIN
       connect-pin keyboard SOUT -> uart Sin
       connect-pin target-sched 0-event -> uart rx-timeout-event
       connect-pin target-sched 1-event -> uart tx-timeout-event
       # use 7-bits even-parity as the line discipline
       set console line-disc "bits=7 parity=even"
       set keyboard line-disc "bits=7 parity=even"
        

     ----------------------------------------------------------------------

Component Reference:

  Component: hw-uart-ns16550

   +-------------------------------------------------+
   |                      pins                       |
   |-------------------------------------------------|
   | name  | direction | legalvalues |   behaviors   |
   |-------+-----------+-------------+---------------|
   | Sin   | in        | data +      | serial input  |
   |       |           | parity      |               |
   |-------+-----------+-------------+---------------|
   | Sout  | out       | data +      | serial output |
   |       |           | parity      |               |
   |-------+-----------+-------------+---------------|
   | INTR  | out       | 0,1         | active high   |
   |       |           |             | interrupt pin |
   |-------+-----------+-------------+---------------|
   |       |           |             | active low    |
   | TxRdy | out       | 0,1         | transmitter   |
   |       |           |             | ready (dma    |
   |       |           |             | control)      |
   |-------+-----------+-------------+---------------|
   |       |           |             | active low    |
   | RxRdy | out       | 0,1         | receiver      |
   |       |           |             | ready (dma    |
   |       |           |             | control)      |
   |-------+-----------+-------------+---------------|
   |       |           |             | active low    |
   | RTS   | out       | 0,1         | request to    |
   |       |           |             | send (modem   |
   |       |           |             | control)      |
   |-------+-----------+-------------+---------------|
   |       |           |             | active low    |
   | DTR   | out       | 0,1         | data transmit |
   |       |           |             | ready (modem  |
   |       |           |             | control)      |
   |-------+-----------+-------------+---------------|
   |       |           |             | active low    |
   | OUT1  | out       | 0,1         | user output   |
   |       |           |             | (modem        |
   |       |           |             | control)      |
   |-------+-----------+-------------+---------------|
   |       |           |             | active low    |
   | OUT2  | out       | 0,1         | user output   |
   |       |           |             | (modem        |
   |       |           |             | control)      |
   |-------+-----------+-------------+---------------|
   |       |           |             | active low    |
   | CTS   | in        | 0,1         | clear to send |
   |       |           |             | (modem        |
   |       |           |             | control)      |
   |-------+-----------+-------------+---------------|
   |       |           |             | active low    |
   | DSR   | in        | 0,1         | data set      |
   |       |           |             | ready (modem  |
   |       |           |             | control)      |
   |-------+-----------+-------------+---------------|
   |       |           |             | active low    |
   |       |           |             | ring          |
   | RI    | in        | 0,1         | indicator     |
   |       |           |             | (modem        |
   |       |           |             | control       |
   |-------+-----------+-------------+---------------|
   |       |           |             | active low    |
   | DCD   | in        | 0,1         | data carrier  |
   |       |           |             | detect (modem |
   |       |           |             | control)      |
   |-------+-----------+-------------+---------------|
   | Reset | in        | any         | master reset  |
   +-------------------------------------------------+

   +-------------------------------------------------+
   |                      buses                      |
   |-------------------------------------------------|
   | name | addresses |     accesses     | behaviors |
   |------+-----------+------------------+-----------|
   | Bus  | 0x0-0x7   | read/write,      | access to |
   |      |           | bytes only       | registers |
   +-------------------------------------------------+

   +-------------------------------------------------+
   |                   attributes                    |
   |-------------------------------------------------|
   | name  |category| legal  |default|  behaviors   ||
   |       |        | values | value |              ||
   |-------+--------+--------+-------+--------------||
   |timeout|write   |positive|10     |sets the time ||
   |       |        |integers|       |to wait       ||
   +-------------------------------------------------+

     ----------------------------------------------------------------------

References:

   National Semiconductor PC16550 data sheet, dated June 1995. This page has
   links to the data sheet and application notes (in PDF)
@


1.1
log
@* public snapshot of sid simulator
@
text
@d1 1
a1 2
* Name
  hw-uart-ns16550
d3 194
a196 122
* Synopsis
  The PC16550D contains independent serial input and output ports that perform
  byte-at-a-time I/O. The 16550 is distinguished from its predecessor, the 
  16450, by two 16-byte FIFOs. The FIFOs allow the CPU to buffer data to 
  reduce the frequency of interrupts.  The 16550 also supports model-control
  functions DMA hand-shaking, and have a loop-back mode for testing.

  Pins: Sin, Sout, INTR, TxRDY, RxRDY, RTS, DTR, OUT1, OUT2, CTS, DSR, DCD, RI,
	Reset
  Bus: Bus
  Attributes: timeout sio-framing? in-fifo-length out-fifo-length "tk tty"
	RBR IER IIR LCR MCR LSR MSR SCR DLL DLM THR FCR Sin Sout Reset INTR
	TxRDY RxRDY RTS DTR OUT1 OUT2 CTS DSR RI DCD state-snapshot
  Library: libuart.la
  Symbol name: uart_component_library

* Functionality
  - Modeling
    The Uart model is somewhat abstracted from its hardware counterpart:

    * The Sin and Sout pins carry a character at a time, including the parity
      bit, if enabled. Normally, a character is 7-bits wide, so the model 
      transmits and receives one byte at a time. However, the chip supports
      character widths of 5 to 8 bits, so up to 9 bits (8 data + parity) may
      be transmitted. Stop bits are not modeled.  If the "sio-framing?" 
      attribute is off, then only the raw data bits are passed on the pins.
      The "in-fifo-length" attribute may be used to simulate an arbitrarily
      large input FIFO.  The "out-fifo-length" attribute is the converse,
      though is just a placebo since there is no output FIFO processing at
      all.

    * The preceding point suggests that the model uses an infinite baud rate, 
      since all the bits in a character are transmitted in a single event. 
      This means that:

      - The timing pins (XIN, XOUT, RCLK, BAUDOUT) are not simulated.
      - Break functionality cannot be modeled.
      - Framing errors cannot occur.
      - The Divisor Latch is modeled but its values are ignored.
      - To handle Character Timeouts, the UART model relies on callbacks
        from the scheduler.
    
  - SID conventions

    * This is a functional component
    * It has state save/restore support
    * It has not been explicitly made reentrant
    * Pins and registers are both accessible from the Target View Manager

* Environment

  - Related components
    * Besides the CPU bus, the UART typically connects to both a
      serial source and a serial sink component. The sink/source may be
      combined, as with a modem component. More advanced designs will use
      the TxRDY/RxRDY pins to communicate with a DMA controller.

      If the UART is run using interrupts (versus polling) it should also be
      connected to the scheduler so that transmit/receive timeouts are
      handled correctly.

      Because the UART will be programmed to use a specific line discipline,
      you must take care to match this discipline in both the sink and source.

    * The following configuration file segment shows how to connect the
      UART to a keyboard and console for interrupt-driven operation:

      # components involved - cpu and bus are assumed
      new hw-uart-ns16550 uart
      new hw-keyboard keyboard
      new hw-console console
      new sid-sched-sim target-sched
      set target-sched num-clients 2
      # connect uart to bus at memory-mapped address 0x800000
      connect-bus bus [0x800000-0x800008,4,1] uart Bus
      # pin connections
      connect-pin uart INTR -> cpu intr
      connect-pin uart Sout -> console SIN
      connect-pin keyboard SOUT -> uart Sin
      connect-pin target-sched 0-event -> uart rx-timeout-event
      connect-pin target-sched 1-event -> uart tx-timeout-event
      # use 7-bits even-parity as the line discipline
      set console line-disc "bits=7 parity=even"
      set keyboard line-disc "bits=7 parity=even"

* SID interface reference

  - low level:

    * pins
      - Sin  | input  | data + parity | Serial input
      - Sout | output | data + parity | Serial output
      - INTR | output | 0,1 | active high interrupt pin
      - TxRdy | output | 0,1 | active low Transmitter Ready (DMA control)
      - RxRdy | output | 0,1 | active low Receiver Ready (DMA control)
      - RTS | output | 0,1 | active low Request to Send (modem control)
      - DTR | output | 0,1 | active low Data Transmit Ready (modem control)
      - OUT1 | output | 0,1 | active low User Output (modem control)
      - OUT2 | output | 0,1 | active low User Output (modem control)
      - CTS | input | 0,1 | active low Clear To Send (modem control)
      - DSR | input | 0,1 | active low Data Set Ready (modem control)
      - RI | input | 0,1 | active low Ring Indicator (modem control
      - DCD | input | 0,1 | active low Data Carrier Detect (modem control)
      - Reset | input | any | Master Reset

    * buses
      - Bus | 0x0-0x7 | read/write, bytes only | access to registers
        Although there are only 8 addresses, there are 12 registers

    * attributes
      - timeout | write | positive integers | 10 | Sets the time to wait
        (in wall-clock ms?) before a channel is considered to have timed-out
      - sio-framing? | setting | "1" or "0" | "1" | Sin/Sout control
      - in-fifo-length | setting | 1-65535 | 16 | Sin/Sout control
      - out-fifo-length | setting | 1-65535 | 16 | Sin/Sout control
      - "tk tty" | gui | n/a | "hw-visual-tty" | component gui
      - state-snapshot | state | opaque string | none | state save/restore

* References
  National Semiconductor PC16550 data sheet, dated June 1995. 
  Obtained from <http://www.national.com/pf/PC/PC16550D.html>
  This page has links to the data sheet and application notes (in PDF)
@

