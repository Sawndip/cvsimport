head	1.2;
access;
symbols
	sid-snapshot-20180601:1.2
	sid-snapshot-20180501:1.2
	sid-snapshot-20180401:1.2
	sid-snapshot-20180301:1.2
	sid-snapshot-20180201:1.2
	sid-snapshot-20180101:1.2
	sid-snapshot-20171201:1.2
	sid-snapshot-20171101:1.2
	sid-snapshot-20171001:1.2
	sid-snapshot-20170901:1.2
	sid-snapshot-20170801:1.2
	sid-snapshot-20170701:1.2
	sid-snapshot-20170601:1.2
	sid-snapshot-20170501:1.2
	sid-snapshot-20170401:1.2
	sid-snapshot-20170301:1.2
	sid-snapshot-20170201:1.2
	sid-snapshot-20170101:1.2
	sid-snapshot-20161201:1.2
	sid-snapshot-20161101:1.2
	sid-snapshot-20160901:1.2
	sid-snapshot-20160801:1.2
	sid-snapshot-20160701:1.2
	sid-snapshot-20160601:1.2
	sid-snapshot-20160501:1.2
	sid-snapshot-20160401:1.2
	sid-snapshot-20160301:1.2
	sid-snapshot-20160201:1.2
	sid-snapshot-20160101:1.2
	sid-snapshot-20151201:1.2
	sid-snapshot-20151101:1.2
	sid-snapshot-20151001:1.2
	sid-snapshot-20150901:1.2
	sid-snapshot-20150801:1.2
	sid-snapshot-20150701:1.2
	sid-snapshot-20150601:1.2
	sid-snapshot-20150501:1.2
	sid-snapshot-20150401:1.2
	sid-snapshot-20150301:1.2
	sid-snapshot-20150201:1.2
	sid-snapshot-20150101:1.2
	sid-snapshot-20141201:1.2
	sid-snapshot-20141101:1.2
	sid-snapshot-20141001:1.2
	sid-snapshot-20140901:1.2
	sid-snapshot-20140801:1.2
	sid-snapshot-20140701:1.2
	sid-snapshot-20140601:1.2
	sid-snapshot-20140501:1.2
	sid-snapshot-20140401:1.2
	sid-snapshot-20140301:1.2
	sid-snapshot-20140201:1.2
	sid-snapshot-20140101:1.2
	sid-snapshot-20131201:1.2
	sid-snapshot-20131101:1.2
	sid-snapshot-20131001:1.2
	sid-snapshot-20130901:1.2
	sid-snapshot-20130801:1.2
	sid-snapshot-20130701:1.2
	sid-snapshot-20130601:1.2
	sid-snapshot-20130501:1.2
	sid-snapshot-20130401:1.2
	sid-snapshot-20130301:1.2
	sid-snapshot-20130201:1.2
	sid-snapshot-20130101:1.2
	sid-snapshot-20121201:1.2
	sid-snapshot-20121101:1.2
	sid-snapshot-20121001:1.2
	sid-snapshot-20120901:1.2
	sid-snapshot-20120801:1.2
	sid-snapshot-20120701:1.2
	sid-snapshot-20120601:1.2
	sid-snapshot-20120501:1.2
	sid-snapshot-20120401:1.2
	sid-snapshot-20120301:1.2
	sid-snapshot-20120201:1.2
	sid-snapshot-20120101:1.2
	sid-snapshot-20111201:1.2
	sid-snapshot-20111101:1.2
	sid-snapshot-20111001:1.2
	sid-snapshot-20110901:1.2
	sid-snapshot-20110801:1.2
	sid-snapshot-20110701:1.2
	sid-snapshot-20110601:1.2
	sid-snapshot-20110501:1.2
	sid-snapshot-20110401:1.2
	sid-snapshot-20110301:1.2
	sid-snapshot-20110201:1.2
	sid-snapshot-20110101:1.2
	sid-snapshot-20101201:1.2
	sid-snapshot-20101101:1.2
	sid-snapshot-20101001:1.2
	sid-snapshot-20100901:1.2
	sid-snapshot-20100801:1.2
	sid-snapshot-20100701:1.2
	sid-snapshot-20100601:1.2
	sid-snapshot-20100501:1.2
	sid-snapshot-20100401:1.2
	sid-snapshot-20100301:1.2
	sid-snapshot-20100201:1.2
	sid-snapshot-20100101:1.2
	sid-snapshot-20091201:1.2
	sid-snapshot-20091101:1.2
	sid-snapshot-20091001:1.2
	sid-snapshot-20090901:1.2
	sid-snapshot-20090801:1.2
	sid-snapshot-20090701:1.2
	sid-snapshot-20090601:1.2
	sid-snapshot-20090501:1.2
	sid-snapshot-20090401:1.2
	sid-snapshot-20090301:1.2
	sid-snapshot-20090201:1.2
	sid-snapshot-20090101:1.2
	sid-snapshot-20081201:1.2
	sid-snapshot-20081101:1.2
	sid-snapshot-20081001:1.2
	sid-snapshot-20080901:1.2
	sid-snapshot-20080801:1.2
	sid-snapshot-20080701:1.2
	sid-snapshot-20080601:1.2
	sid-snapshot-20080501:1.2
	sid-snapshot-20080403:1.2
	sid-snapshot-20080401:1.2
	sid-snapshot-20080301:1.2
	sid-snapshot-20080201:1.2
	sid-snapshot-20080101:1.2
	sid-snapshot-20071201:1.2
	sid-snapshot-20071101:1.2
	sid-snapshot-20071001:1.2
	sid-20020905-branchpoint:1.1
	sid-20020905-branch:1.1.0.2
	cygnus_cvs_20020108_pre:1.1;
locks; strict;
comment	@# @;


1.2
date	2005.08.19.19.46.38;	author brolley;	state Exp;
branches;
next	1.1;

1.1
date	2000.12.07.19.30.57;	author fche;	state Exp;
branches;
next	;


desc
@@


1.2
log
@2005-08-19  Dave Brolley  <brolley@@redhat.com>

        * Contribute the following changes:

        2005-07-13  Dave Brolley  <brolley@@redhat.com>

        * compTcl.cxx (set_attribute_value): Handle the configure! attribute.
        (find_pin): Don't handle the configure! pin.
        (relate): Don't handle the dynamic-configurator relation.
        (unrelate): Likewise.
        (configure_pin_handler): Removed.

        2005-06-06  Dave Brolley  <brolley@@redhat.com>

        * sid-api-trace.tcl (attribute_value): Handle component-type and victim
        attributes.
        * compTcl.cxx (tcl_component): component and configurable_component
        inherited virtually.
        (victim_name): New member of tcl_component.
        (set_attrinute_value): Handle victim-name attribute.
        (find_pin): Handle the "configure" pin specially.
        (relate): Handle the dynamic-configurator relation specially.
        (unrelate): Likewise.
        (configure_pin_handler,configure): New virtual overrides in
        tcl_component.
@
text
@# Copyright (C) 2000, 2005 Red Hat
#
# This is a component that forwards almost all sid requests to another
# component.  Further, it interjects proxy pin/bus objects between the
# outside world and the victim.  All traffic may be traced.

global this
set this [sid::component::this]

# A handle to my victim component
global victim
set victim ""

# trace calls?
global victim_trace_p
set victim_trace_p 1

# map proxy-pin<->real-pin
global proxy2real_pin_map
global real2proxy_pin_map

proc real2proxy_pin {pin} {
    global proxy2real_pin_map
    global real2proxy_pin_map
    if [info exists real2proxy_pin_map($pin)] then {
	set pin $real2proxy_pin_map($pin)
    } else {
	set proxy [sid::pin::new]
	set proxy2real_pin_map($proxy) $pin
	set real2proxy_pin_map($pin) $proxy
	set pin $proxy
    }
    return $pin
}

proc proxy2real_pin {pin} {
    global proxy2real_pin_map
    if [info exists proxy2real_pin_map($pin)] then {
	set pin $proxy2real_pin_map($pin)
    } else {
	error "Unknown proxy pin $pin"
    }
    return $pin
}

# map proxy-bus<->real-bus
global proxy2real_bus_map
global real2proxy_bus_map

proc real2proxy_bus {bus} {
    global proxy2real_bus_map
    global real2proxy_bus_map
    if [info exists real2proxy_bus_map($bus)] then {
	set bus $real2proxy_bus_map($bus)
    } else {
	set proxy [sid::bus::new]
	set proxy2real_bus_map($proxy) $bus
	set real2proxy_bus_map($bus) $proxy
	set bus $proxy
    }
    return $bus
}

proc proxy2real_bus {bus} {
    global proxy2real_bus_map
    if [info exists proxy2real_bus_map($bus)] then {
	set bus $proxy2real_bus_map($bus)
    } else {
	error "Unknown proxy bus $bus"
    }
    return $bus
}

proc sidtrace {cmd} {
    global victim_trace_p
    if {$victim_trace_p != "0"} then {
	puts -nonewline "$cmd >"
    }
    set result [uplevel 1 $cmd]
    if {$victim_trace_p != "0"} then {
	puts "> $result"
    }
    return $result
}

proc attribute_names {} {
    global victim
    return [sidtrace [list sid::component::attribute_names $victim]]
}

proc attribute_names_in_category {cat} {
    global victim
    # special hack to prevent error message during component instantiation
    if {$victim == ""} then { return [list] }
    # don't add "victim-trace?" - that would make wrapper more translucent
    return [sidtrace [list sid::component::attribute_names_in_category $victim $cat]]
}

proc attribute_value {attr} {
    global victim
    if {$attr == "component-type"} then { return "sid-api-trace" }
    if {$attr == "victim"} then { return "$victim" }
    return [sidtrace [list sid::component::attribute_value $victim $attr]]
}

proc set_attribute_value {attr value} {
    global victim
    if {$attr == "victim-trace?"} then {
	global victim_trace_p
	set victim_trace_p $value
	return "ok"
    } else {
	return [sidtrace [list sid::component::set_attribute_value $victim $attr $value]]
    }
}

proc pin_names {} {
    global victim
    return [sidtrace [list sid::component::pin_names $victim]]
}

proc find_pin {name} {
    global victim
    set pin [sidtrace [list sid::component::find_pin $victim $name]]
    if {$pin == ""} then { return "" } else { return [real2proxy_pin $pin] }
}

proc connect_pin {name pin} {
    global victim
    set proxy [real2proxy_pin $pin]
    return [sidtrace [list sid::component::connect_pin $victim $name $proxy]]
}

proc disconnect_pin {name pin} {
    global victim
    set proxy [real2proxy_pin $pin]
    return [sidtrace [list sid::component::disconnect_pin $victim $name $proxy]]
}

proc connected_pins {name} {
    global victim
    set victimpins [sidtrace [list sid::component::connected_pins $victim $name]]
    set realpins [list]
    foreach pin $victimpins {
	lappend realpins [proxy2real_pin $pin]
    }
    return $realpins
}

proc bus_names {} {
    global victim
    return [sidtrace [list sid::component::bus_names $victim]]
}

proc find_bus {name} {
    global victim
    set bus [sidtrace [list sid::component::find_bus $victim $name]]
    if {$bus == ""} then { return "" } else { return [real2proxy_bus $bus] }
}

proc accessor_names {} {
    global victim
    return [sidtrace [list sid::component::accessor_names $victim]]
}

proc connect_accessor {name bus} {
    global victim
    set proxy [real2proxy_bus $bus]
    return [sidtrace [list sid::component::connect_accessor $victim $name $proxy]]
}

proc disconnect_accessor {name bus} {
    global victim
    set proxy [real2proxy_bus $bus]
    return [sidtrace [list sid::component::disconnect_accessor $victim $name $proxy]]
}

proc connected_bus {name} {
    global victim
    set bus [sidtrace [list sid::component::connected_bus $victim $name]]
    if {$bus == ""} then { return "" } else { return [real2proxy_bus $bus] }
}

proc relationship_names {} {
    global victim
    # don't add "victim" - that would make wrapper more translucent
    return [sidtrace [list sid::component::relationship_names $victim]]
}

proc relate {rel comp} {
    global victim
    if {$rel == "victim"} then {
	set victim $comp
	return "ok"
    } else { 
	return [sidtrace [list sid::component::relate $victim $rel $comp]]
    }
}

proc unrelate {rel comp} {
    global victim
    if {$rel == "victim"} then {
	set victim ""
	return "ok"
    } else { 
	return [sidtrace [list sid::component::unrelate $victim $rel $comp]]
    }
}


proc related_components {rel} {
    global victim
    if {$rel == "victim"} then {
	return $victim
    } else {
	return [sidtrace [list sid::component::related_components $victim $rel]]
    }
}


# proxy pin functions
proc driven_h4 {proxy value} {
    set pin [proxy2real_pin $proxy]
    return [sidtrace [list sid::pin::driven_h4 $pin $value]]
}


# proxy bus functions 

proc write_h4_l1 {proxy addr data} {
    set bus [proxy2real_bus $proxy]
    return [sidtrace [list sid::bus::write_h4_l1 $bus $addr $data]]
}
proc write_h4_l2 {proxy addr data} {
    set bus [proxy2real_bus $proxy]
    return [sidtrace [list sid::bus::write_h4_l2 $bus $addr $data]]
}
proc write_h4_l4 {proxy addr data} {
    set bus [proxy2real_bus $proxy]
    return [sidtrace [list sid::bus::write_h4_l4 $bus $addr $data]]
}
proc write_h4_l8 {proxy addr data} {
    set bus [proxy2real_bus $proxy]
    return [sidtrace [list sid::bus::write_h4_l8 $bus $addr $data]]
}
proc read_h4_l1 {proxy addr} {
    set bus [proxy2real_bus $proxy]
    return [sidtrace [list sid::bus::read_h4_l1 $bus $addr]]
}
proc read_h4_l2 {proxy addr} {
    set bus [proxy2real_bus $proxy]
    return [sidtrace [list sid::bus::read_h4_l2 $bus $addr]]
}
proc read_h4_l4 {proxy addr} {
    set bus [proxy2real_bus $proxy]
    return [sidtrace [list sid::bus::read_h4_l4 $bus $addr]]
}
proc read_h4_l8 {proxy addr} {
    set bus [proxy2real_bus $proxy]
    return [sidtrace [list sid::bus::read_h4_l8 $bus $addr]]
}


proc write_h4_b1 {proxy addr data} {
    set bus [proxy2real_bus $proxy]
    return [sidtrace [list sid::bus::write_h4_b1 $bus $addr $data]]
}
proc write_h4_b2 {proxy addr data} {
    set bus [proxy2real_bus $proxy]
    return [sidtrace [list sid::bus::write_h4_b2 $bus $addr $data]]
}
proc write_h4_b4 {proxy addr data} {
    set bus [proxy2real_bus $proxy]
    return [sidtrace [list sid::bus::write_h4_b4 $bus $addr $data]]
}
proc write_h4_b8 {proxy addr data} {
    set bus [proxy2real_bus $proxy]
    return [sidtrace [list sid::bus::write_h4_b8 $bus $addr $data]]
}
proc read_h4_b1 {proxy addr} {
    set bus [proxy2real_bus $proxy]
    return [sidtrace [list sid::bus::read_h4_b1 $bus $addr]]
}
proc read_h4_b2 {proxy addr} {
    set bus [proxy2real_bus $proxy]
    return [sidtrace [list sid::bus::read_h4_b2 $bus $addr]]
}
proc read_h4_b4 {proxy addr} {
    set bus [proxy2real_bus $proxy]
    return [sidtrace [list sid::bus::read_h4_b4 $bus $addr]]
}
proc read_h4_b8 {proxy addr} {
    set bus [proxy2real_bus $proxy]
    return [sidtrace [list sid::bus::read_h4_b8 $bus $addr]]
}
@


1.1
log
@* public snapshot of sid simulator
@
text
@d1 1
a1 1
# Copyright (C) 2000 Red Hat
d101 2
@

