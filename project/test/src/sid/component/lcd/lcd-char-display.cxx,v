head	1.8;
access;
symbols
	sid-snapshot-20180601:1.8
	sid-snapshot-20180501:1.8
	sid-snapshot-20180401:1.8
	sid-snapshot-20180301:1.8
	sid-snapshot-20180201:1.8
	sid-snapshot-20180101:1.8
	sid-snapshot-20171201:1.8
	sid-snapshot-20171101:1.8
	sid-snapshot-20171001:1.8
	sid-snapshot-20170901:1.8
	sid-snapshot-20170801:1.8
	sid-snapshot-20170701:1.8
	sid-snapshot-20170601:1.8
	sid-snapshot-20170501:1.8
	sid-snapshot-20170401:1.8
	sid-snapshot-20170301:1.8
	sid-snapshot-20170201:1.8
	sid-snapshot-20170101:1.8
	sid-snapshot-20161201:1.8
	sid-snapshot-20161101:1.8
	sid-snapshot-20160901:1.8
	sid-snapshot-20160801:1.8
	sid-snapshot-20160701:1.8
	sid-snapshot-20160601:1.8
	sid-snapshot-20160501:1.8
	sid-snapshot-20160401:1.8
	sid-snapshot-20160301:1.8
	sid-snapshot-20160201:1.8
	sid-snapshot-20160101:1.8
	sid-snapshot-20151201:1.8
	sid-snapshot-20151101:1.8
	sid-snapshot-20151001:1.8
	sid-snapshot-20150901:1.8
	sid-snapshot-20150801:1.8
	sid-snapshot-20150701:1.8
	sid-snapshot-20150601:1.8
	sid-snapshot-20150501:1.8
	sid-snapshot-20150401:1.8
	sid-snapshot-20150301:1.8
	sid-snapshot-20150201:1.8
	sid-snapshot-20150101:1.8
	sid-snapshot-20141201:1.8
	sid-snapshot-20141101:1.8
	sid-snapshot-20141001:1.8
	sid-snapshot-20140901:1.8
	sid-snapshot-20140801:1.8
	sid-snapshot-20140701:1.8
	sid-snapshot-20140601:1.8
	sid-snapshot-20140501:1.8
	sid-snapshot-20140401:1.8
	sid-snapshot-20140301:1.8
	sid-snapshot-20140201:1.8
	sid-snapshot-20140101:1.8
	sid-snapshot-20131201:1.8
	sid-snapshot-20131101:1.8
	sid-snapshot-20131001:1.8
	sid-snapshot-20130901:1.8
	sid-snapshot-20130801:1.8
	sid-snapshot-20130701:1.8
	sid-snapshot-20130601:1.8
	sid-snapshot-20130501:1.8
	sid-snapshot-20130401:1.8
	sid-snapshot-20130301:1.8
	sid-snapshot-20130201:1.8
	sid-snapshot-20130101:1.8
	sid-snapshot-20121201:1.8
	sid-snapshot-20121101:1.8
	sid-snapshot-20121001:1.8
	sid-snapshot-20120901:1.8
	sid-snapshot-20120801:1.8
	sid-snapshot-20120701:1.8
	sid-snapshot-20120601:1.8
	sid-snapshot-20120501:1.8
	sid-snapshot-20120401:1.8
	sid-snapshot-20120301:1.8
	sid-snapshot-20120201:1.8
	sid-snapshot-20120101:1.8
	sid-snapshot-20111201:1.8
	sid-snapshot-20111101:1.8
	sid-snapshot-20111001:1.8
	sid-snapshot-20110901:1.8
	sid-snapshot-20110801:1.8
	sid-snapshot-20110701:1.8
	sid-snapshot-20110601:1.8
	sid-snapshot-20110501:1.8
	sid-snapshot-20110401:1.8
	sid-snapshot-20110301:1.8
	sid-snapshot-20110201:1.8
	sid-snapshot-20110101:1.8
	sid-snapshot-20101201:1.8
	sid-snapshot-20101101:1.8
	sid-snapshot-20101001:1.8
	sid-snapshot-20100901:1.8
	sid-snapshot-20100801:1.8
	sid-snapshot-20100701:1.8
	sid-snapshot-20100601:1.8
	sid-snapshot-20100501:1.8
	sid-snapshot-20100401:1.8
	sid-snapshot-20100301:1.8
	sid-snapshot-20100201:1.8
	sid-snapshot-20100101:1.8
	sid-snapshot-20091201:1.8
	sid-snapshot-20091101:1.8
	sid-snapshot-20091001:1.8
	sid-snapshot-20090901:1.8
	sid-snapshot-20090801:1.8
	sid-snapshot-20090701:1.8
	sid-snapshot-20090601:1.8
	sid-snapshot-20090501:1.8
	sid-snapshot-20090401:1.8
	sid-snapshot-20090301:1.8
	sid-snapshot-20090201:1.8
	sid-snapshot-20090101:1.8
	sid-snapshot-20081201:1.8
	sid-snapshot-20081101:1.8
	sid-snapshot-20081001:1.8
	sid-snapshot-20080901:1.8
	sid-snapshot-20080801:1.8
	sid-snapshot-20080701:1.8
	sid-snapshot-20080601:1.8
	sid-snapshot-20080501:1.8
	sid-snapshot-20080403:1.8
	sid-snapshot-20080401:1.8
	sid-snapshot-20080301:1.8
	sid-snapshot-20080201:1.8
	sid-snapshot-20080101:1.8
	sid-snapshot-20071201:1.8
	sid-snapshot-20071101:1.8
	sid-snapshot-20071001:1.8
	sid-20020905-branchpoint:1.4
	sid-20020905-branch:1.4.0.2
	cygnus_cvs_20020108_pre:1.4;
locks; strict;
comment	@// @;


1.8
date	2007.01.03.21.58.25;	author brolley;	state Exp;
branches;
next	1.7;

1.7
date	2006.03.01.21.07.00;	author fche;	state Exp;
branches;
next	1.6;

1.6
date	2003.10.23.18.16.32;	author blc;	state Exp;
branches;
next	1.5;

1.5
date	2002.11.11.22.28.28;	author fche;	state Exp;
branches;
next	1.4;

1.4
date	2001.09.24.21.03.12;	author fche;	state Exp;
branches;
next	1.3;

1.3
date	2001.08.03.06.02.44;	author mrg;	state Exp;
branches;
next	1.2;

1.2
date	2001.07.20.02.23.19;	author bje;	state Exp;
branches;
next	1.1;

1.1
date	2000.12.07.19.30.53;	author fche;	state Exp;
branches;
next	;


desc
@@


1.8
log
@2007-01-03  Dave Brolley  <brolley@@redhat.com>

        * lcd-char-display.cxx (_BOOL): New macro definition.
@
text
@// lcd-char-display.cxx - description.  -*- C++ -*-

// Copyright (C) 1999, 2000, 2001, 2002 Red Hat.
// This file is part of SID and is licensed under the GPL.
// See the file COPYING.SID for conditions for redistribution.

#include "config.h"

#include <sidcomp.h>
#include <sidso.h>
#include <sidpinutil.h>
#include <sidattrutil.h>
#include <sidcomputil.h>
#include <sidattrutil.h>
#include <sidwatchutil.h>

#ifdef HAVE__USR_INCLUDE_CURSES_H
// The following macro definition prevents curses.h from providing a typedef
// for bool on Solaris.
#define _BOOL 1
#include "/usr/include/curses.h"
#else
#ifdef HAVE_CURSES_H
#include <curses.h>
#endif
#endif

using std::vector;
using std::string;
using std::ostream;
using std::istream;
using sid::component;
using sid::host_int_2;
using sid::host_int_4;
using sid::component_library;
using sid::COMPONENT_LIBRARY_MAGIC;

using namespace sidutil;

class lcd_char_display : public virtual component,
			 public fixed_pin_map_component,
			 public fixed_attribute_map_component,
			 public no_bus_component,
			 public no_accessor_component,
			 public no_relation_component
{
private:

  friend class callback_pin<lcd_char_display>;
  callback_pin<lcd_char_display> row_col_pin;
  callback_pin<lcd_char_display> frame_pin;
  callback_pin<lcd_char_display> init_pin;

  host_int_2 width, height;

  void set_pixel( host_int_4 row_col );

  void new_frame( host_int_4 val );
  void init( host_int_4 );

#if HAVE_CURSES_H && HAVE_CURSES_LIBRARY
  WINDOW *w;
#endif

  // Triggerpoint manager
  friend class self_watcher<lcd_char_display>;
  self_watcher<lcd_char_display> trigger_mgr;

  // Virtual pin interfaces between self_watcher and fixed_pin_map_component
  sid::component::status
  pin_factory( const string& n ) { return trigger_mgr.create_virtual_pin(n); }

  void
  pin_junkyard( const string& n ) { trigger_mgr.destroy_virtual_pin( n ); }

public:

  lcd_char_display();
  ~lcd_char_display() throw ();

  // Save & restore state
  string save_state ();
  component::status restore_state (const string& state);
};

lcd_char_display :: lcd_char_display() : 
  row_col_pin( this, &lcd_char_display::set_pixel ),
  frame_pin( this, &lcd_char_display::new_frame ),
  init_pin( this, &lcd_char_display::init ),
  trigger_mgr( this )
{
  add_pin( "row-col", &row_col_pin );
  add_attribute( "row-col", &row_col_pin, "pin" );
  trigger_mgr.add_watchable_attribute( "row-col" );
  categorize( "row-col", "watchable" );

  add_pin( "FR", &frame_pin );
  add_attribute( "FR", &frame_pin, "pin" );
  trigger_mgr.add_watchable_attribute( "FR" );
  categorize( "FR", "watchable" );

  add_pin( "init", &init_pin );
  add_attribute( "init", &init_pin, "pin" );
  trigger_mgr.add_watchable_attribute( "init" );
  categorize( "init", "watchable" );

  width = 80;
  height = 24;
  add_attribute( "width", &width, "setting" );
  add_attribute( "height", &height, "setting" );

  add_attribute_virtual ("state-snapshot", this,
			 & lcd_char_display::save_state,
			 & lcd_char_display::restore_state);
  
#if HAVE_CURSES_H && HAVE_CURSES_LIBRARY
  initscr();
  w = 0;
#endif
}

lcd_char_display :: ~lcd_char_display() throw () { 
#if HAVE_CURSES_H && HAVE_CURSES_LIBRARY
  endwin(); 
#endif
}

void 
lcd_char_display :: init( host_int_4 ) {
#if HAVE_CURSES_H && HAVE_CURSES_LIBRARY
  if( !w ) {
    w = newwin( height, width, 0, 0 );
    box( w, 0, 0 );
  }
#endif

  trigger_mgr.check_and_dispatch();
}

void
lcd_char_display::set_pixel (host_int_4 val)
{
  int i = val;

  int row = i >> 16;
  int col = i & 0x0ffff;

#if HAVE_CURSES_H && HAVE_CURSES_LIBRARY
  if (!w)
    return;
  mvwaddch( w, row, col, '*' );
#else
  std::cout << '[' << row << ',' << col << ']';
#endif // HAVE_CURSES_H

  trigger_mgr.check_and_dispatch();
}

void
lcd_char_display::new_frame (host_int_4 val)
{
#if HAVE_CURSES_H && HAVE_CURSES_LIBRARY
  if (!w)
    return;

  if (val == 1)
    werase (w);
  else
    wrefresh (w);
#else
  std::cout << std::endl;
#endif

  trigger_mgr.check_and_dispatch();
}

string
lcd_char_display::save_state ( )
{
    return string ("lcd-char");
}

component::status 
lcd_char_display::restore_state(const string& state)
{
   if (state == "lcd-char")
     return component::ok;
   return component::bad_value;
} 

static vector<string>
DevicesListTypes()
{
  vector<string> types;

  types.push_back( string( "hw-lcd-char-display" ) );

  return types;
}

static component*
DevicesCreate(const string& typeName)
{
  if( typeName == "hw-lcd-char-display" )
    return new lcd_char_display();
  else
    return 0;
}

static void
DevicesDelete(component* c)
{
  delete dynamic_cast<lcd_char_display*>(c);
}

// static object
DLLEXPORT extern const component_library lcd_char_display_component_library;

const component_library lcd_char_display_component_library =
{
  COMPONENT_LIBRARY_MAGIC,
  & DevicesListTypes, 
  & DevicesCreate,
  & DevicesDelete
};
@


1.7
log
@* DLLEXPORT decoration tweak, from Rex Sung-Tien Cho <song10@@andestech.com>
@
text
@d18 3
@


1.6
log
@Wed Oct 22 19:03:57 UTC 2003  Brendan Conoboy  <blc@@redhat.com>

        * lcd-char-display.cxx: Prefix std:: to cout and endl.
@
text
@d214 1
a214 1
extern const component_library lcd_char_display_component_library;
d216 1
a216 1
const component_library lcd_char_display_component_library DLLEXPORT = 
@


1.5
log
@* better c++ standard compliance

[e.g.]
[include/ChangeLog]
2002-11-11  Frank Ch. Eigler  <fche@@redhat.com>

        * sidcpuutil.h (cpu_trace_stream): Add some std:: qualifiers.

[component/glue/ChangeLog]
2002-11-11  Frank Ch. Eigler  <fche@@redhat.com>

        * glue.cxx (bus_prober): Dtor throw() fixes.
@
text
@d150 1
a150 1
  cout << '[' << row << ',' << col << ']';
d168 1
a168 1
  cout << endl;
@


1.4
log
@* build fix: cygwin -lcurses is sometimes bad

2001-09-24  Frank Ch. Eigler  <fche@@redhat.com>

	* configure.in (lcd_libs): Set HAVE_CURSES_LIBRARY if found some
	usable curses library.
	* config.in, configure: Regenerated.

[lcd]
2001-09-24  Frank Ch. Eigler  <fche@@redhat.com>

	* lcd-char-display.cxx: Be sensitive to ! HAVE_CURSES_LIBRARY.
@
text
@d3 1
a3 1
// Copyright (C) 1999, 2000, 2001 Red Hat.
d17 3
d22 1
@


1.3
log
@* make it compile with GCC 3.0:
        - missing throw() specifiers in bus & component dtors
	- `std::' vs `::' namespace issues
@
text
@d54 1
a54 1
#ifdef HAVE_CURSES_H
d109 1
a109 1
#ifdef HAVE_CURSES_H
d116 1
a116 1
#ifdef HAVE_CURSES_H
d123 1
a123 1
#ifdef HAVE_CURSES_H
d141 1
a141 3
#ifndef HAVE_CURSES_H
  cout << '[' << row << ',' << col << ']';
#else
d145 2
d155 1
a155 1
#ifdef HAVE_CURSES_H
@


1.2
log
@2001-07-20  Ben Elliston  <bje@@redhat.com>

	* lcd-char-display.cxx (set_pixel): Guard against w = nil.
	(new_frame): Likewise.
@
text
@d72 1
a72 1
  ~lcd_char_display();
d80 3
a82 3
  row_col_pin( this, &(lcd_char_display::set_pixel) ),
  frame_pin( this, &(lcd_char_display::new_frame) ),
  init_pin( this, &(lcd_char_display::init) ),
d115 1
a115 1
lcd_char_display :: ~lcd_char_display() { 
@


1.1
log
@* public snapshot of sid simulator
@
text
@d3 1
a3 1
// Copyright (C) 1999, 2000 Red Hat.
d134 2
a135 1
lcd_char_display :: set_pixel( host_int_4 val ) {
d144 2
d153 2
a154 1
lcd_char_display :: new_frame( host_int_4 val ) {
d156 5
a160 2
  if( val == 1 )
    werase( w );
d162 1
a162 1
    wrefresh( w );
@

