head	1.6;
access;
symbols
	sid-snapshot-20180601:1.6
	sid-snapshot-20180501:1.6
	sid-snapshot-20180401:1.6
	sid-snapshot-20180301:1.6
	sid-snapshot-20180201:1.6
	sid-snapshot-20180101:1.6
	sid-snapshot-20171201:1.6
	sid-snapshot-20171101:1.6
	sid-snapshot-20171001:1.6
	sid-snapshot-20170901:1.6
	sid-snapshot-20170801:1.6
	sid-snapshot-20170701:1.6
	sid-snapshot-20170601:1.6
	sid-snapshot-20170501:1.6
	sid-snapshot-20170401:1.6
	sid-snapshot-20170301:1.6
	sid-snapshot-20170201:1.6
	sid-snapshot-20170101:1.6
	sid-snapshot-20161201:1.6
	sid-snapshot-20161101:1.6
	sid-snapshot-20160901:1.6
	sid-snapshot-20160801:1.6
	sid-snapshot-20160701:1.6
	sid-snapshot-20160601:1.6
	sid-snapshot-20160501:1.6
	sid-snapshot-20160401:1.6
	sid-snapshot-20160301:1.6
	sid-snapshot-20160201:1.6
	sid-snapshot-20160101:1.6
	sid-snapshot-20151201:1.6
	sid-snapshot-20151101:1.6
	sid-snapshot-20151001:1.6
	sid-snapshot-20150901:1.6
	sid-snapshot-20150801:1.6
	sid-snapshot-20150701:1.6
	sid-snapshot-20150601:1.6
	sid-snapshot-20150501:1.6
	sid-snapshot-20150401:1.6
	sid-snapshot-20150301:1.6
	sid-snapshot-20150201:1.6
	sid-snapshot-20150101:1.6
	sid-snapshot-20141201:1.6
	sid-snapshot-20141101:1.6
	sid-snapshot-20141001:1.6
	sid-snapshot-20140901:1.6
	sid-snapshot-20140801:1.6
	sid-snapshot-20140701:1.6
	sid-snapshot-20140601:1.6
	sid-snapshot-20140501:1.6
	sid-snapshot-20140401:1.6
	sid-snapshot-20140301:1.6
	sid-snapshot-20140201:1.6
	sid-snapshot-20140101:1.6
	sid-snapshot-20131201:1.6
	sid-snapshot-20131101:1.6
	sid-snapshot-20131001:1.6
	sid-snapshot-20130901:1.6
	sid-snapshot-20130801:1.6
	sid-snapshot-20130701:1.6
	sid-snapshot-20130601:1.6
	sid-snapshot-20130501:1.6
	sid-snapshot-20130401:1.6
	sid-snapshot-20130301:1.6
	sid-snapshot-20130201:1.6
	sid-snapshot-20130101:1.6
	sid-snapshot-20121201:1.6
	sid-snapshot-20121101:1.6
	sid-snapshot-20121001:1.6
	sid-snapshot-20120901:1.6
	sid-snapshot-20120801:1.6
	sid-snapshot-20120701:1.6
	sid-snapshot-20120601:1.6
	sid-snapshot-20120501:1.6
	sid-snapshot-20120401:1.6
	sid-snapshot-20120301:1.6
	sid-snapshot-20120201:1.6
	sid-snapshot-20120101:1.6
	sid-snapshot-20111201:1.6
	sid-snapshot-20111101:1.6
	sid-snapshot-20111001:1.6
	sid-snapshot-20110901:1.6
	sid-snapshot-20110801:1.6
	sid-snapshot-20110701:1.6
	sid-snapshot-20110601:1.6
	sid-snapshot-20110501:1.6
	sid-snapshot-20110401:1.6
	sid-snapshot-20110301:1.6
	sid-snapshot-20110201:1.6
	sid-snapshot-20110101:1.6
	sid-snapshot-20101201:1.6
	sid-snapshot-20101101:1.6
	sid-snapshot-20101001:1.6
	sid-snapshot-20100901:1.6
	sid-snapshot-20100801:1.6
	sid-snapshot-20100701:1.6
	sid-snapshot-20100601:1.6
	sid-snapshot-20100501:1.6
	sid-snapshot-20100401:1.6
	sid-snapshot-20100301:1.6
	sid-snapshot-20100201:1.6
	sid-snapshot-20100101:1.6
	sid-snapshot-20091201:1.6
	sid-snapshot-20091101:1.6
	sid-snapshot-20091001:1.6
	sid-snapshot-20090901:1.6
	sid-snapshot-20090801:1.6
	sid-snapshot-20090701:1.6
	sid-snapshot-20090601:1.6
	sid-snapshot-20090501:1.6
	sid-snapshot-20090401:1.6
	sid-snapshot-20090301:1.6
	sid-snapshot-20090201:1.6
	sid-snapshot-20090101:1.6
	sid-snapshot-20081201:1.6
	sid-snapshot-20081101:1.6
	sid-snapshot-20081001:1.6
	sid-snapshot-20080901:1.6
	sid-snapshot-20080801:1.6
	sid-snapshot-20080701:1.6
	sid-snapshot-20080601:1.6
	sid-snapshot-20080501:1.6
	sid-snapshot-20080403:1.6
	sid-snapshot-20080401:1.6
	sid-snapshot-20080301:1.6
	sid-snapshot-20080201:1.6
	sid-snapshot-20080101:1.6
	sid-snapshot-20071201:1.6
	sid-snapshot-20071101:1.6
	sid-snapshot-20071001:1.6
	sid-20020905-branchpoint:1.4
	sid-20020905-branch:1.4.0.2
	cygnus_cvs_20020108_pre:1.3;
locks; strict;
comment	@# @;


1.6
date	2006.08.29.20.34.00;	author brolley;	state Exp;
branches;
next	1.5;

1.5
date	2006.08.29.17.47.22;	author brolley;	state Exp;
branches;
next	1.4;

1.4
date	2002.05.27.20.53.24;	author bje;	state Exp;
branches;
next	1.3;

1.3
date	2001.08.03.01.30.18;	author bje;	state Exp;
branches;
next	1.2;

1.2
date	2001.06.23.11.12.32;	author fche;	state Exp;
branches;
next	1.1;

1.1
date	2000.12.07.19.30.51;	author fche;	state Exp;
branches;
next	;


desc
@@


1.6
log
@2006-08-29  Dave Brolley  <brolley@@redhat.com>

        * glue.cxx (base_address): New member of bus_prober.
        (bus_prober): Initialize base_address.
        (writeAny): Add this->prober->base_address to the address driven.
        (readAny): Likewise.
        * hw-glue-probe-bus.xml: Document new base-address attribute.
        * *.txt: Regenerated.
@
text
@            hw-glue-probe-bus (libglue.la :: glue_component_library)

Synopsis:

   This component samples and/or traces bus traffic.

     ----------------------------------------------------------------------

Functionality:

  Modelling:

   This component resembles a probe that transparently monitors bus traffic.

+--------------------------------------------------------------------------------------+
|                                      Behaviors                                       |
|--------------------------------------------------------------------------------------|
|bus traffic|When the downstream accessor is configured, all incoming bus API calls to |
|passthrough|the upstream bus are passed through verbatim. Without the downstream      |
|           |accessor configured, the upstream bus will return bus::unmapped for all   |
|           |calls. Still, the sampling and tracing functions are still active.        |
|-----------+--------------------------------------------------------------------------|
|bus traffic|Every now and then (at an interval configured by the sample-interval      |
|   sampling|attribute), a transaction is also reported via a collection of output     |
|           |pins. In sequence, the following output pins are driven:                  |
|           |                                                                          |
|           |  * "address" - address parameter added to the value of the base-address  |
|           |    attribute                                                             |
|           |  * "data-high" - top 32 bits of bus data being read/written              |
|           |  * "data-low" - bottom 32 bits of same                                   |
|           |  * "status" - bus::status value returned from downstream                 |
|           |  * "type" - an encoded value identifying the size, endianness, and       |
|           |    direction of the data transfer. Specifically, in C lingo,             |
|           |                                                                          |
|           |         (type & 0x00F): log2 of access size (0/1/2/3 for *_int_1/2/4/8)  |
|           |         (type & 0x010): 0x10 (little-endian) or 0x00 (big-endian)        |
|           |         (type & 0x100): 0x100 (read) or 0x00 (write)                     |
|           |                                                                          |
|           |This sampling function is disabled if sample-interval is zero. The        |
|           |read-only interval-counter attribute indicates the current value of the   |
|           |modular transaction counter.                                              |
|-----------+--------------------------------------------------------------------------|
|bus traffic|If the trace? attribute is set, sampled bus traffic is traced to stdout in|
|    tracing|a compact format. The sampling counter is shared with the traffic probing |
|           |behavior above.                                                           |
|           |                                                                          |
|           |One line per transaction is shown in a format resembling the common gdb   |
|           |simulators' --trace-core output:                                          |
|           |                                                                          |
|           |[LABEL:] MODE:ADDRESS ARROW DATA [LATENCY] [STATUS] where LABEL is an     |
|           |optional label identifying the probe component. MODE is an encoding of the|
|           |access type: zzz where le and be represent little- or big-endianness, and |
|           |1-8 represent the number of bytes transferred. ARROW is a redundant       |
|           |encoding of direction: {->,<-} for {read,write} ADDRESS and DATA are      |
|           |hex-encoded host-endian values, LATENCY is a string encoding of the bus   |
|           |access latency, though 0 is ommited STATUS is a string encoding of the    |
|           |bus::status, though ok is omitted Examples:                               |
|           |                                                                          |
|           |      write-be-2:0xa002001c <- 0x3442                                     |
|           |      read-le-8:0x807fff30 -> 0xffffffff807fff68 l:10                     |
|           |      write-be-4:0xfeedface <- 0xdeadbeef unmapped!                       |
+--------------------------------------------------------------------------------------+

   +-------------------------------------------------+
   |                 SID Conventions                 |
   |-------------------------------------------------|
   |   functional | supported  | This is a           |
   |              |            | functional          |
   |              |            | component.          |
   |--------------+------------+---------------------|
   |        state | not        | This component does |
   | save/restore | supported  | not support state   |
   |              |            | save/restore.       |
   |--------------+------------+---------------------|
   |  watchpoints | not        | This component does |
   |              | supported  | not support         |
   |              |            | watchpoints.        |
   |--------------+------------+---------------------|
   |   Reentrancy | not        | Reentrancy is not   |
   |      Control | supported  | controlled.         |
   |--------------+------------+---------------------|
   | presentation | supported  | This component      |
   |              |            | presents attributes |
   |              |            | in the "pin",       |
   |              |            | "setting", and      |
   |              |            | "register"          |
   |              |            | categories.         |
   +-------------------------------------------------+

     ----------------------------------------------------------------------

Environment:

   Related components

   This component may be interjected between bus masters and a mapper to
   trace traffic.

         new hw-glue-probe-bus bus-prober
         new SOME_KIND_OF_CPU cpu
         new SOME_KIND_OF_MAPPER mapper
         connect-bus cpu insn-memory bus-prober upstream
         connect-bus bus-prober downstream mapper access-port
         set bus-prober trace? 1

   A statistics-gathering component could attach to the sampling output pins
   to maintain a picture of a program's memory access patterns.

   The base-address attribute should only be used if the downstream component
   has a fixed address within the system. The base-address attribute is not
   suitable for situations in which more than one address range is mapped
   onto the upstream bus.

   Consider the example below in which a single hw-glue-probe-bus is used to
   trace two address ranges.

         new hw-glue-probe-bus bus-prober
         new SOME_KIND_OF_CPU cpu
         new SOME_KIND_OF_TRANSPARENT_MAPPER probe-mapper
         new SOME_KIND_OF_MAPPER mapper
         connect-bus cpu insn-memory probe-mapper access-port
         connect-bus probe-mapper [0-1023] bus-prober upstream
         connect-bus probe-mapper [1024-2047] mapper access-port
         connect-bus probe-mapper [2048-3071] bus-prober upstream
         connect-bus bus-prober downstream mapper access-port
         set bus-prober trace? 1

     ----------------------------------------------------------------------

Component Reference:

  Component: hw-glue-probe-bus

   +-------------------------------------------------+
   |                      pins                       |
   |-------------------------------------------------|
   |   name    | direction | legalvalues | behaviors |
   |-----------+-----------+-------------+-----------|
   |           |           |             | bus       |
   | address   | out       | any         | traffic   |
   |           |           |             | sampling  |
   |-----------+-----------+-------------+-----------|
   |           |           |             | bus       |
   | data-high | out       | any         | traffic   |
   |           |           |             | sampling  |
   |-----------+-----------+-------------+-----------|
   |           |           |             | bus       |
   | data-low  | out       | any         | traffic   |
   |           |           |             | sampling  |
   |-----------+-----------+-------------+-----------|
   |           |           | bus::status | bus       |
   | status    | out       | values      | traffic   |
   |           |           |             | sampling  |
   |-----------+-----------+-------------+-----------|
   |           |           |             | bus       |
   | type      | out       | enum values | traffic   |
   |           |           |             | sampling  |
   +-------------------------------------------------+

   +-----------------------------------------------------------+
   |                           buses                           |
   |-----------------------------------------------------------|
   |  name  | addresses  |  accesses  |       behaviors        |
   |--------+------------+------------+------------------------|
   |upstream|unrestricted|unrestricted|bus traffic             |
   |        |            |            |passthrough/etc.        |
   +-----------------------------------------------------------+

   +--------------------------------------------------------------+
   |                          attributes                          |
   |--------------------------------------------------------------|
   |      name      |category| legal |default|     behaviors     ||
   |                |        |values | value |                   ||
   |----------------+--------+-------+-------+-------------------||
   |base-address    |setting |numeric|0      |bus traffic        ||
   |                |        |       |       |sampling           ||
   |----------------+--------+-------+-------+-------------------||
   |trace?          |setting |boolean|0      |bus traffic tracing||
   |----------------+--------+-------+-------+-------------------||
   |sample-interval |setting |numeric|1      |bus traffic        ||
   |                |        |       |       |sampling           ||
   |----------------+--------+-------+-------+-------------------||
   |interval-counter|register|numeric|-      |bus traffic        ||
   |                |        |       |       |sampling           ||
   |----------------+--------+-------+-------+-------------------||
   |address         |pin     |numeric|-      |bus traffic        ||
   |                |        |       |       |sampling           ||
   |----------------+--------+-------+-------+-------------------||
   |data-high       |pin     |numeric|-      |bus traffic        ||
   |                |        |       |       |sampling           ||
   |----------------+--------+-------+-------+-------------------||
   |data-low        |pin     |numeric|-      |bus traffic        ||
   |                |        |       |       |sampling           ||
   |----------------+--------+-------+-------+-------------------||
   |status          |pin     |numeric|-      |bus traffic        ||
   |                |        |       |       |sampling           ||
   |----------------+--------+-------+-------+-------------------||
   |type            |pin     |numeric|-      |bus traffic        ||
   |                |        |       |       |sampling           ||
   |----------------+--------+-------+-------+-------------------||
   |label           |setting |any    |-      |bus traffic        ||
   |                |        |string |       |sampling           ||
   +--------------------------------------------------------------+

   +-------------------------------------------------+
   |                    accessors                    |
   |-------------------------------------------------|
   |    name    |   accesses   |      behaviors      |
   |------------+--------------+---------------------|
   | downstream | unrestricted | bus traffic         |
   |            |              | passthrough         |
   +-------------------------------------------------+
@


1.5
log
@2006-08-29  Dave Brolley  <brolley@@redhat.com>

        * glue.cxx (base_address): New member of bus_prober.
        (bus_prober): Initialize base_address.
        (writeAny): Add this->prober->base_address to the address driven.
        (readAny): Likewise.
        * hw-glue-probe-bus.xml: Document new base-address attribute.
        * *.txt: Regenerated.
@
text
@d109 19
d175 2
a176 1
   |base-address    |setting |numeric|0      |bus traffic tracing||
@


1.4
log
@2002-05-27  Ben Elliston  <bje@@redhat.com>

	* glue.cxx (bus_prober::label): New member.
	(bus_prober ctor): Add a corresponding "label" attribute.
	(probing_bus::traceAccess): Output a component label, if given.
	* hw-glue-probe-bus.xml: Update documentation.
@
text
@d15 48
a62 47
+------------------------------------------------------------------------------------+
|                                     Behaviors                                      |
|------------------------------------------------------------------------------------|
|bus traffic|When the downstream accessor is configured, all incoming bus API calls  |
|passthrough|to the upstream bus are passed through verbatim. Without the downstream |
|           |accessor configured, the upstream bus will return bus::unmapped for all |
|           |calls. Still, the sampling and tracing functions are still active.      |
|-----------+------------------------------------------------------------------------|
|bus traffic|Every now and then (at an interval configured by the sample-interval    |
|   sampling|attribute), a transaction is also reported via a collection of output   |
|           |pins. In sequence, the following output pins are driven:                |
|           |                                                                        |
|           |  * "address" - address parameter                                       |
|           |  * "data-high" - top 32 bits of bus data being read/written            |
|           |  * "data-low" - bottom 32 bits of same                                 |
|           |  * "status" - bus::status value returned from downstream               |
|           |  * "type" - an encoded value identifying the size, endianness, and     |
|           |    direction of the data transfer. Specifically, in C lingo,           |
|           |                                                                        |
|           |         (type & 0x00F): log2 of access size (0/1/2/3 for *_int_1/2/4/8)|
|           |         (type & 0x010): 0x10 (little-endian) or 0x00 (big-endian)      |
|           |         (type & 0x100): 0x100 (read) or 0x00 (write)                   |
|           |                                                                        |
|           |This sampling function is disabled if sample-interval is zero. The      |
|           |read-only interval-counter attribute indicates the current value of the |
|           |modular transaction counter.                                            |
|-----------+------------------------------------------------------------------------|
|bus traffic|If the trace? attribute is set, sampled bus traffic is traced to stdout |
|    tracing|in a compact format. The sampling counter is shared with the traffic    |
|           |probing behavior above.                                                 |
|           |                                                                        |
|           |One line per transaction is shown in a format resembling the common gdb |
|           |simulators' --trace-core output:                                        |
|           |                                                                        |
|           |[LABEL:] MODE:ADDRESS ARROW DATA [LATENCY] [STATUS] where LABEL is an   |
|           |optional label identifying the probe component. MODE is an encoding of  |
|           |the access type: zzz where le and be represent little- or               |
|           |big-endianness, and 1-8 represent the number of bytes transferred. ARROW|
|           |is a redundant encoding of direction: {->,<-} for {read,write} ADDRESS  |
|           |and DATA are hex-encoded host-endian values, LATENCY is a string        |
|           |encoding of the bus access latency, though 0 is ommited STATUS is a     |
|           |string encoding of the bus::status, though ok is omitted Examples:      |
|           |                                                                        |
|           |      write-be-2:0xa002001c <- 0x3442                                   |
|           |      read-le-8:0x807fff30 -> 0xffffffff807fff68 l:10                   |
|           |      write-be-4:0xfeedface <- 0xdeadbeef unmapped!                     |
+------------------------------------------------------------------------------------+
d141 43
a183 51
   +---------------------------------------------------+
   |                       buses                       |
   |---------------------------------------------------|
   |  name  | addresses  |  accesses  |   behaviors    |
   |--------+------------+------------+----------------|
   |upstream|unrestricted|unrestricted|bus traffic     |
   |        |            |            |passthrough/etc.|
   +---------------------------------------------------+

   +----------------------------------------------------+
   |                     attributes                     |
   |----------------------------------------------------|
   |      name      |category| legal |default|behaviors||
   |                |        |values | value |         ||
   |----------------+--------+-------+-------+---------||
   |                |        |       |       |bus      ||
   |trace?          |setting |boolean|0      |traffic  ||
   |                |        |       |       |tracing  ||
   |----------------+--------+-------+-------+---------||
   |                |        |       |       |bus      ||
   |sample-interval |setting |numeric|1      |traffic  ||
   |                |        |       |       |sampling ||
   |----------------+--------+-------+-------+---------||
   |                |        |       |       |bus      ||
   |interval-counter|register|numeric|-      |traffic  ||
   |                |        |       |       |sampling ||
   |----------------+--------+-------+-------+---------||
   |                |        |       |       |bus      ||
   |address         |pin     |numeric|-      |traffic  ||
   |                |        |       |       |sampling ||
   |----------------+--------+-------+-------+---------||
   |                |        |       |       |bus      ||
   |data-high       |pin     |numeric|-      |traffic  ||
   |                |        |       |       |sampling ||
   |----------------+--------+-------+-------+---------||
   |                |        |       |       |bus      ||
   |data-low        |pin     |numeric|-      |traffic  ||
   |                |        |       |       |sampling ||
   |----------------+--------+-------+-------+---------||
   |                |        |       |       |bus      ||
   |status          |pin     |numeric|-      |traffic  ||
   |                |        |       |       |sampling ||
   |----------------+--------+-------+-------+---------||
   |                |        |       |       |bus      ||
   |type            |pin     |numeric|-      |traffic  ||
   |                |        |       |       |sampling ||
   |----------------+--------+-------+-------+---------||
   |                |        |any    |       |bus      ||
   |label           |setting |string |-      |traffic  ||
   |                |        |       |       |sampling ||
   +----------------------------------------------------+
@


1.3
log
@* Freshly generated documentation.
* ChangeLog entries to follow later.
@
text
@d49 2
a50 1
|           |MODE:ADDRESS ARROW DATA [LATENCY] [STATUS] where MODE is an encoding of |
d185 4
@


1.2
log
@* improvement

2001-06-23  Frank Ch. Eigler  <fche@@redhat.com>

        * glue.cxx (probing_bus::traceAccess): Print non-zero latency.
        * hw-glue-probe-bus.txt: Document this.
@
text
@d1 1
a1 2
* Name
  hw-glue-probe-bus
d3 1
a3 2
* Synopsis
  This component samples and/or traces bus traffic.
d5 190
a194 108
  Buses: upstream
  Accessors: downstream
  Attributes: sample-interval trace? interval-counter address data-high 
              data-low status type
  Pins: address data-high data-low status type
  Shared library: libglue.la
  Symbol: glue_component_library

* Functionality
 
  - Modelling
    * This component resembles a probe that transparently monitors bus traffic.

  - Behaviors
    * Bus traffic passthrough When the "downstream" accessor is
      configured, all incoming bus API calls to the "upstream" bus are
      passed through verbatim.  Without the "downstream" accessor
      configured, the "upstream" bus will return bus::unmapped for all
      calls.  Still, the sampling and tracing functions are still
      active.

    * Bus traffic sampling
      Every now and then (at an interval configured by the "sample-interval"
      attribute), a transaction is also reported via a collection of output
      pins.  In sequence, the following output pins are driven:
        * "address" - address parameter
        * "data-high" - top 32 bits of bus data being read/written
        * "data-low" - bottom 32 bits of same
        * "status" - bus::status value returned from downstream
        * "type" - an encoded value identifying the size, endianness, and
          direction of the data transfer.  Specifically, in C lingo,
          (type & 0x00F): log2 of access size (0/1/2/3 for *_int_1/2/4/8)
          (type & 0x010): 0x10 (little-endian) or 0x00 (big-endian)
          (type & 0x100): 0x100 (read) or 0x00 (write)
      This sampling function is disabled if "sample-interval" is zero.  The
      read-only "interval-counter" attribute indicates the current value of
      the modular transaction counter.

    * Bus traffic tracing
      If the "trace?" attribute is set, sampled bus traffic is traced to stdout
      in a compact format.  The sampling counter is shared with the traffic probing
      behavior above.

      One line per transaction is shown in a format resembling the common gdb simulators'
      "--trace-core" output:
                MODE:ADDRESS ARROW DATA [LATENCY] [STATUS]
      where
      MODE is an encoding of the access type: {read,write}-{le,be}-{1,2,4,8}
           where "le" and "be" represent little- or big-endianness,
           and 1-8 represent the number of bytes transferred.
      ARROW is a redundant encoding of direction: {->,<-} for {read,write}
      ADDRESS and DATA are hex-encoded host-endian values,
      LATENCY is a string encoding of the bus access latency, though 0 is omitted
      STATUS is a string encoding of the bus::status, though "ok" is omitted

      Examples:

      write-be-2:0xa002001c <- 0x3442
      read-le-8:0x807fff30 -> 0xffffffff807fff68 l:10
      write-be-4:0xfeedface <- 0xdeadbeef unmapped!

  - SID conventions
    * This is a functional component.
    * It does not support state save/restore.
    * It does not support watchpoints.
    * Reentrancy is not controlled.
    * It presents attributes in the "pin", "setting", and "register" 
      categories.

* Environment
  - Related components
    * This component may be interjected between bus masters and a mapper to
      trace traffic.

	new hw-glue-probe-bus bus-prober
	new SOME_KIND_OF_CPU cpu
        new SOME_KIND_OF_MAPPER mapper
        connect-bus cpu insn-memory bus-prober upstream
        connect-bus bus-prober downstream mapper access-port
        set bus-prober trace? 1

    * A statistics-gathering component could attach to the sampling output
      pins to maintain a picture of a program's memory access patterns.

* SID interface reference
  - low level:
    * buses
      - upstream | unrestricted | unrestricted | bus traffic passthrough/etc.

    * accessors
      - downstream | unrestricted | unrestricted | bus traffic passthrough

    * pins
      - address | output | any | bus traffic sampling
      - data-high | output | any | bus traffic sampling
      - data-low | output | any | bus traffic sampling
      - status | output | bus::status values | bus traffic sampling
      - type | output | enum values  | bus traffic sampling

    * attributes
      - trace? | setting | boolean | 0 | bus traffic tracing
      - sample-interval | setting | numeric | 1 | bus traffic sampling
      - interval-counter | register | numeric | n/a | bus traffic sampling
      - address | pin | numeric | n/a | bus traffic sampling
      - data-high | pin | numeric | n/a | bus traffic sampling
      - data-low | pin | numeric | n/a | bus traffic sampling
      - status | pin | numeric | n/a | bus traffic sampling
      - type | pin | numeric | n/a | bus traffic sampling
@


1.1
log
@* public snapshot of sid simulator
@
text
@d52 1
a52 1
                MODE:ADDRESS ARROW DATA [STATUS]
d59 1
d65 1
a65 1
      read-le-8:0x807fff30 -> 0xffffffff807fff68
@

