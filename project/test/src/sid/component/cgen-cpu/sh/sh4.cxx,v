head	1.2;
access;
symbols
	sid-snapshot-20180601:1.2
	sid-snapshot-20180501:1.2
	sid-snapshot-20180401:1.2
	sid-snapshot-20180301:1.2
	sid-snapshot-20180201:1.2
	sid-snapshot-20180101:1.2
	sid-snapshot-20171201:1.2
	sid-snapshot-20171101:1.2
	sid-snapshot-20171001:1.2
	sid-snapshot-20170901:1.2
	sid-snapshot-20170801:1.2
	sid-snapshot-20170701:1.2
	sid-snapshot-20170601:1.2
	sid-snapshot-20170501:1.2
	sid-snapshot-20170401:1.2
	sid-snapshot-20170301:1.2
	sid-snapshot-20170201:1.2
	sid-snapshot-20170101:1.2
	sid-snapshot-20161201:1.2
	sid-snapshot-20161101:1.2
	sid-snapshot-20160901:1.2
	sid-snapshot-20160801:1.2
	sid-snapshot-20160701:1.2
	sid-snapshot-20160601:1.2
	sid-snapshot-20160501:1.2
	sid-snapshot-20160401:1.2
	sid-snapshot-20160301:1.2
	sid-snapshot-20160201:1.2
	sid-snapshot-20160101:1.2
	sid-snapshot-20151201:1.2
	sid-snapshot-20151101:1.2
	sid-snapshot-20151001:1.2
	sid-snapshot-20150901:1.2
	sid-snapshot-20150801:1.2
	sid-snapshot-20150701:1.2
	sid-snapshot-20150601:1.2
	sid-snapshot-20150501:1.2
	sid-snapshot-20150401:1.2
	sid-snapshot-20150301:1.2
	sid-snapshot-20150201:1.2
	sid-snapshot-20150101:1.2
	sid-snapshot-20141201:1.2
	sid-snapshot-20141101:1.2
	sid-snapshot-20141001:1.2
	sid-snapshot-20140901:1.2
	sid-snapshot-20140801:1.2
	sid-snapshot-20140701:1.2
	sid-snapshot-20140601:1.2
	sid-snapshot-20140501:1.2
	sid-snapshot-20140401:1.2
	sid-snapshot-20140301:1.2
	sid-snapshot-20140201:1.2
	sid-snapshot-20140101:1.2
	sid-snapshot-20131201:1.2
	sid-snapshot-20131101:1.2
	sid-snapshot-20131001:1.2
	sid-snapshot-20130901:1.1
	sid-snapshot-20130801:1.1
	sid-snapshot-20130701:1.1
	sid-snapshot-20130601:1.1
	sid-snapshot-20130501:1.1
	sid-snapshot-20130401:1.1
	sid-snapshot-20130301:1.1
	sid-snapshot-20130201:1.1
	sid-snapshot-20130101:1.1
	sid-snapshot-20121201:1.1
	sid-snapshot-20121101:1.1
	sid-snapshot-20121001:1.1
	sid-snapshot-20120901:1.1
	sid-snapshot-20120801:1.1
	sid-snapshot-20120701:1.1
	sid-snapshot-20120601:1.1
	sid-snapshot-20120501:1.1
	sid-snapshot-20120401:1.1
	sid-snapshot-20120301:1.1
	sid-snapshot-20120201:1.1
	sid-snapshot-20120101:1.1
	sid-snapshot-20111201:1.1
	sid-snapshot-20111101:1.1
	sid-snapshot-20111001:1.1
	sid-snapshot-20110901:1.1
	sid-snapshot-20110801:1.1
	sid-snapshot-20110701:1.1
	sid-snapshot-20110601:1.1
	sid-snapshot-20110501:1.1
	sid-snapshot-20110401:1.1
	sid-snapshot-20110301:1.1
	sid-snapshot-20110201:1.1
	sid-snapshot-20110101:1.1
	sid-snapshot-20101201:1.1
	sid-snapshot-20101101:1.1
	sid-snapshot-20101001:1.1
	sid-snapshot-20100901:1.1
	sid-snapshot-20100801:1.1
	sid-snapshot-20100701:1.1
	sid-snapshot-20100601:1.1
	sid-snapshot-20100501:1.1
	sid-snapshot-20100401:1.1
	sid-snapshot-20100301:1.1
	sid-snapshot-20100201:1.1
	sid-snapshot-20100101:1.1
	sid-snapshot-20091201:1.1
	sid-snapshot-20091101:1.1
	sid-snapshot-20091001:1.1
	sid-snapshot-20090901:1.1
	sid-snapshot-20090801:1.1
	sid-snapshot-20090701:1.1
	sid-snapshot-20090601:1.1
	sid-snapshot-20090501:1.1
	sid-snapshot-20090401:1.1
	sid-snapshot-20090301:1.1
	sid-snapshot-20090201:1.1
	sid-snapshot-20090101:1.1
	sid-snapshot-20081201:1.1
	sid-snapshot-20081101:1.1
	sid-snapshot-20081001:1.1
	sid-snapshot-20080901:1.1
	sid-snapshot-20080801:1.1
	sid-snapshot-20080701:1.1
	sid-snapshot-20080601:1.1
	sid-snapshot-20080501:1.1
	sid-snapshot-20080403:1.1
	sid-snapshot-20080401:1.1
	sid-snapshot-20080301:1.1
	sid-snapshot-20080201:1.1
	sid-snapshot-20080101:1.1
	sid-snapshot-20071201:1.1
	sid-snapshot-20071101:1.1
	sid-snapshot-20071001:1.1;
locks; strict;
comment	@// @;


1.2
date	2013.09.22.04.32.42;	author amodra;	state Exp;
branches;
next	1.1;

1.1
date	2006.10.18.18.27.27;	author brolley;	state Exp;
branches;
next	;


desc
@@


1.2
log
@sid/component/cgen-cpu/mep/
	* mep.h (mep_cpu_cgen::~mep_cpu_cgen): New.
	* mep_basic.h (mep_basic_cpu::~mep_basic_cpu): New.
	* mep_ext1.h (mep_ext1_cpu::~mep_ext1_cpu): New.
sid/component/cgen-cpu/sh/
	* sh.h (sh_cpu_impl::~sh_cpu_impl): New.
	* sh2a_model.cxx: Specify dependent base class function with 'this->'.
	* sh3_model.cxx: Likewise.
	* sh4.cxx: Likewise.
	* sh64.c: Include sysdep.h first.
sid/component/gloss/
	* angel.h (arm_angel::~arm_angel): New.
	* m32r.h (m32r_libgloss::~m32r_libgloss): New.
	* mips.h (mips32_idt::~mips32_idt): New.
sid/component/mmu/
	* armRemap.cxx (operator<<): Avoid redeclaration of "it".
@
text
@// sh4.cxx - Implementations of hand-written functions for the sh
// simulator. -*- C++ -*-

// Copyright (C) 2006 Red Hat.
// This file is part of SID and is licensed under the GPL.
// See the file COPYING.SID for conditions for redistribution.

#include "sh4.h"
#include "sh4a.h"
#include "sh4al.h"

using namespace sh4a;

void
sh4_cpu::execute_insn (sh4_scache *sc)
{
  sc->idesc->execute (this, sc, tick, write_stacks);
}

template <class CPU, class CGEN_CPU, class IDESC, class SCACHE, class MODEL>
void
sh4_cpu_base<CPU,CGEN_CPU,IDESC,SCACHE,MODEL>::sh64_fipr (unsigned m, unsigned n)
{
  SF result = this->sh64_fmuls (this->h_fvc_get (m), this->h_fvc_get (n));
  result = this->sh64_fadds (result, this->sh64_fmuls (this->h_frc_get (m + 1), this->h_frc_get (n + 1)));
  result = this->sh64_fadds (result, this->sh64_fmuls (this->h_frc_get (m + 2), this->h_frc_get (n + 2)));
  result = this->sh64_fadds (result, this->sh64_fmuls (this->h_frc_get (m + 3), this->h_frc_get (n + 3)));
  this->h_frc_set (n + 3, result);
}
 
template <class CPU, class CGEN_CPU, class IDESC, class SCACHE, class MODEL>
void
sh4_cpu_base<CPU,CGEN_CPU,IDESC,SCACHE,MODEL>::sh64_ftrv (unsigned n)
{
  SF result = this->sh64_fmuls (this->h_xf_get (0), this->h_frc_get (n));
  result = this->sh64_fadds (result, this->sh64_fmuls (this->h_xf_get (4),  this->h_frc_get (n + 1)));
  result = this->sh64_fadds (result, this->sh64_fmuls (this->h_xf_get (8),  this->h_frc_get (n + 2)));
  result = this->sh64_fadds (result, this->sh64_fmuls (this->h_xf_get (12), this->h_frc_get (n + 3)));
  this->h_frc_set (n, result);
  result = this->sh64_fmuls (this->h_xf_get (1), this->h_frc_get (n));
  result = this->sh64_fadds (result, this->sh64_fmuls (this->h_xf_get (5),  this->h_frc_get (n + 1)));
  result = this->sh64_fadds (result, this->sh64_fmuls (this->h_xf_get (9),  this->h_frc_get (n + 2)));
  result = this->sh64_fadds (result, this->sh64_fmuls (this->h_xf_get (13), this->h_frc_get (n + 3)));
  this->h_frc_set (n + 1, result);
  result = this->sh64_fmuls (this->h_xf_get (2), this->h_frc_get (n));
  result = this->sh64_fadds (result, this->sh64_fmuls (this->h_xf_get (6),  this->h_frc_get (n + 1)));
  result = this->sh64_fadds (result, this->sh64_fmuls (this->h_xf_get (10), this->h_frc_get (n + 2)));
  result = this->sh64_fadds (result, this->sh64_fmuls (this->h_xf_get (14), this->h_frc_get (n + 3)));
  this->h_frc_set (n + 2, result);
  result = this->sh64_fmuls (this->h_xf_get (3), this->h_frc_get (n));
  result = this->sh64_fadds (result, this->sh64_fmuls (this->h_xf_get (7),  this->h_frc_get (n + 1)));
  result = this->sh64_fadds (result, this->sh64_fmuls (this->h_xf_get (11), this->h_frc_get (n + 2)));
  result = this->sh64_fadds (result, this->sh64_fmuls (this->h_xf_get (15), this->h_frc_get (n + 3)));
  this->h_frc_set (n + 3, result);
}

template <class CPU, class CGEN_CPU, class IDESC, class SCACHE, class MODEL>
bool
sh4_cpu_base<CPU,CGEN_CPU,IDESC,SCACHE,MODEL>::parallel_allowed [SH4_GROUP_MAX][SH4_GROUP_MAX] =
{           /* none   MT     EX     BR     LS     FE     CO */
  /* none */ { false, false, false, false, false, false, false },
  /* MT   */ { false, true,  true,  true,  true,  true,  false },
  /* EX   */ { false, true,  false, true,  true,  true,  false },
  /* BR   */ { false, true,  true,  false, true,  true,  false },
  /* LS   */ { false, true,  true,  true,  false, true,  false },
  /* FE   */ { false, true,  true,  true,  true,  false, false },
  /* CO   */ { false, false, false, false, false, false, false },
};

template <class CPU, class CGEN_CPU, class IDESC, class SCACHE, class MODEL>
bool
sh4_cpu_base<CPU,CGEN_CPU,IDESC,SCACHE,MODEL>::parallel_possible (insn_info<SCACHE> *insn1, insn_info<SCACHE> *insn2, UINT cycles)
{
  // Not if they don't have the same post-fetch latency.
  if (insn1->get_post_fetch_latency () != insn2->get_post_fetch_latency ())
    return false;

  // Check table here....
  return parallel_allowed [insn1->sh4_group ()][insn2->sh4_group ()];
}

// Explicit instantiations
template class sh4_cpu_base<sh4_cpu,sh4_cpu_cgen,sh4_idesc,sh4_scache,sh4_fpu_model<sh4_cpu,sh4_idesc> >;
template class sh4_cpu_base<sh4_nofpu_cpu,sh4_nofpu_cpu_cgen,sh4_nofpu_idesc,sh4_nofpu_scache,
			    sh4_model<sh2a_model<sh_common_model<sh4_nofpu_sh4_nofpu_model,sh4_nofpu_cpu,sh4_nofpu_idesc,sh4_nofpu_scache>,
						 sh4_nofpu_cpu,sh4_nofpu_idesc>,
				      sh4_nofpu_cpu,sh4_nofpu_idesc> >;
template class sh4_cpu_base<sh4a_cpu,sh4a_cpu_cgen,sh4a_idesc,sh4a_scache,sh4a_fpu_model<sh4a_cpu,sh4a_idesc> >;
template class sh4_cpu_base<sh4a_nofpu_cpu,sh4a_nofpu_cpu_cgen,sh4a_nofpu_idesc,sh4a_nofpu_scache,
			    sh4a_model<sh2a_model<sh_common_model<sh4a_nofpu_sh4a_nofpu_model,sh4a_nofpu_cpu,sh4a_nofpu_idesc,sh4a_nofpu_scache>,
						  sh4a_nofpu_cpu,sh4a_nofpu_idesc>,
				       sh4a_nofpu_cpu,sh4a_nofpu_idesc> >;
template class sh4_cpu_base<sh4al_cpu,sh4al_cpu_cgen,sh4al_idesc,sh4al_scache,sh4al_model>;
template class sh4_cpu_base<sh5_cpu,sh5_cpu_cgen,sh5_compact_idesc,sh5_compact_scache,sh_common_model_with_fp<sh5_compact_sh5_model,sh5_cpu,sh5_compact_idesc,sh5_compact_scache> >;
@


1.1
log
@New cpu port.
@
text
@d35 4
a38 4
  SF result = sh64_fmuls (this->h_xf_get (0), this->h_frc_get (n));
  result = sh64_fadds (result, sh64_fmuls (this->h_xf_get (4),  this->h_frc_get (n + 1)));
  result = sh64_fadds (result, sh64_fmuls (this->h_xf_get (8),  this->h_frc_get (n + 2)));
  result = sh64_fadds (result, sh64_fmuls (this->h_xf_get (12), this->h_frc_get (n + 3)));
d40 4
a43 4
  result = sh64_fmuls (this->h_xf_get (1), this->h_frc_get (n));
  result = sh64_fadds (result, sh64_fmuls (this->h_xf_get (5),  this->h_frc_get (n + 1)));
  result = sh64_fadds (result, sh64_fmuls (this->h_xf_get (9),  this->h_frc_get (n + 2)));
  result = sh64_fadds (result, sh64_fmuls (this->h_xf_get (13), this->h_frc_get (n + 3)));
d45 4
a48 4
  result = sh64_fmuls (this->h_xf_get (2), this->h_frc_get (n));
  result = sh64_fadds (result, sh64_fmuls (this->h_xf_get (6),  this->h_frc_get (n + 1)));
  result = sh64_fadds (result, sh64_fmuls (this->h_xf_get (10), this->h_frc_get (n + 2)));
  result = sh64_fadds (result, sh64_fmuls (this->h_xf_get (14), this->h_frc_get (n + 3)));
d50 4
a53 4
  result = sh64_fmuls (this->h_xf_get (3), this->h_frc_get (n));
  result = sh64_fadds (result, sh64_fmuls (this->h_xf_get (7),  this->h_frc_get (n + 1)));
  result = sh64_fadds (result, sh64_fmuls (this->h_xf_get (11), this->h_frc_get (n + 2)));
  result = sh64_fadds (result, sh64_fmuls (this->h_xf_get (15), this->h_frc_get (n + 3)));
@

