head	1.3;
access;
symbols
	sid-snapshot-20180601:1.3
	sid-snapshot-20180501:1.3
	sid-snapshot-20180401:1.3
	sid-snapshot-20180301:1.3
	sid-snapshot-20180201:1.3
	sid-snapshot-20180101:1.3
	sid-snapshot-20171201:1.3
	sid-snapshot-20171101:1.3
	sid-snapshot-20171001:1.3
	sid-snapshot-20170901:1.3
	sid-snapshot-20170801:1.3
	sid-snapshot-20170701:1.3
	sid-snapshot-20170601:1.3
	sid-snapshot-20170501:1.3
	sid-snapshot-20170401:1.3
	sid-snapshot-20170301:1.3
	sid-snapshot-20170201:1.3
	sid-snapshot-20170101:1.3
	sid-snapshot-20161201:1.3
	sid-snapshot-20161101:1.3
	sid-snapshot-20160901:1.3
	sid-snapshot-20160801:1.3
	sid-snapshot-20160701:1.3
	sid-snapshot-20160601:1.3
	sid-snapshot-20160501:1.3
	sid-snapshot-20160401:1.3
	sid-snapshot-20160301:1.3
	sid-snapshot-20160201:1.3
	sid-snapshot-20160101:1.3
	sid-snapshot-20151201:1.3
	sid-snapshot-20151101:1.3
	sid-snapshot-20151001:1.3
	sid-snapshot-20150901:1.3
	sid-snapshot-20150801:1.3
	sid-snapshot-20150701:1.3
	sid-snapshot-20150601:1.3
	sid-snapshot-20150501:1.3
	sid-snapshot-20150401:1.3
	sid-snapshot-20150301:1.3
	sid-snapshot-20150201:1.3
	sid-snapshot-20150101:1.3
	sid-snapshot-20141201:1.3
	sid-snapshot-20141101:1.3
	sid-snapshot-20141001:1.3
	sid-snapshot-20140901:1.3
	sid-snapshot-20140801:1.3
	sid-snapshot-20140701:1.3
	sid-snapshot-20140601:1.3
	sid-snapshot-20140501:1.3
	sid-snapshot-20140401:1.3
	sid-snapshot-20140301:1.3
	sid-snapshot-20140201:1.3
	sid-snapshot-20140101:1.3
	sid-snapshot-20131201:1.3
	sid-snapshot-20131101:1.3
	sid-snapshot-20131001:1.3
	sid-snapshot-20130901:1.3
	sid-snapshot-20130801:1.3
	sid-snapshot-20130701:1.3
	sid-snapshot-20130601:1.3
	sid-snapshot-20130501:1.3
	sid-snapshot-20130401:1.3
	sid-snapshot-20130301:1.3
	sid-snapshot-20130201:1.3
	sid-snapshot-20130101:1.3
	sid-snapshot-20121201:1.3
	sid-snapshot-20121101:1.3
	sid-snapshot-20121001:1.3
	sid-snapshot-20120901:1.3
	sid-snapshot-20120801:1.3
	sid-snapshot-20120701:1.3
	sid-snapshot-20120601:1.3
	sid-snapshot-20120501:1.3
	sid-snapshot-20120401:1.3
	sid-snapshot-20120301:1.3
	sid-snapshot-20120201:1.3
	sid-snapshot-20120101:1.3
	sid-snapshot-20111201:1.3
	sid-snapshot-20111101:1.3
	sid-snapshot-20111001:1.3
	sid-snapshot-20110901:1.3
	sid-snapshot-20110801:1.3
	sid-snapshot-20110701:1.3
	sid-snapshot-20110601:1.3
	sid-snapshot-20110501:1.3
	sid-snapshot-20110401:1.3
	sid-snapshot-20110301:1.3
	sid-snapshot-20110201:1.3
	sid-snapshot-20110101:1.3
	sid-snapshot-20101201:1.3
	sid-snapshot-20101101:1.3
	sid-snapshot-20101001:1.3
	sid-snapshot-20100901:1.3
	sid-snapshot-20100801:1.3
	sid-snapshot-20100701:1.3
	sid-snapshot-20100601:1.3
	sid-snapshot-20100501:1.3
	sid-snapshot-20100401:1.3
	sid-snapshot-20100301:1.3
	sid-snapshot-20100201:1.3
	sid-snapshot-20100101:1.3
	sid-snapshot-20091201:1.3
	sid-snapshot-20091101:1.3
	sid-snapshot-20091001:1.3
	sid-snapshot-20090901:1.3
	sid-snapshot-20090801:1.3
	sid-snapshot-20090701:1.3
	sid-snapshot-20090601:1.3
	sid-snapshot-20090501:1.3
	sid-snapshot-20090401:1.3
	sid-snapshot-20090301:1.3
	sid-snapshot-20090201:1.3
	sid-snapshot-20090101:1.3
	sid-snapshot-20081201:1.3
	sid-snapshot-20081101:1.3
	sid-snapshot-20081001:1.3
	sid-snapshot-20080901:1.3
	sid-snapshot-20080801:1.3
	sid-snapshot-20080701:1.3
	sid-snapshot-20080601:1.3
	sid-snapshot-20080501:1.3
	sid-snapshot-20080403:1.3
	sid-snapshot-20080401:1.3
	sid-snapshot-20080301:1.3
	sid-snapshot-20080201:1.3
	sid-snapshot-20080101:1.3
	sid-snapshot-20071201:1.3
	sid-snapshot-20071101:1.3
	sid-snapshot-20071001:1.3;
locks; strict;
comment	@ * @;


1.3
date	2006.05.11.14.47.16;	author brolley;	state Exp;
branches;
next	1.2;

1.2
date	2003.10.21.21.29.31;	author brolley;	state Exp;
branches;
next	1.1;

1.1
date	2003.04.16.18.13.51;	author brolley;	state Exp;
branches;
next	;


desc
@@


1.3
log
@2006-05-11  Dave Brolley  <brolley@@redhat.com>

        * cgen-model.h (cgen_model): Initialize vliw_cycles.
        (model_insn_after): Correct comment re: last_p.
@
text
@// cgen-model.h  -*- C++ -*-

// Copyright (C) 2003 Red Hat.
// This file is part of SID and is licensed under the GPL.
// See the file COPYING.SID for conditions for redistribution.

#ifndef CGEN_MODEL_H
#define CGEN_MODEL_H

#include <sidtypes.h>
#include "cgen-cpu.h"

namespace cgen
{

class cgen_model
{
public:
  cgen_model (cgen_bi_endian_cpu *c) :
    cpu (c),
    vliw_cycles (0)
  {}

  // To be overridden as needed. Call before each insn is executed. first_p is
  // true when the insn is the first of a group of parallel insns.
  virtual void model_insn_before (bool first_p = true)
  {
    if (first_p)
      {
	// There may be latency from insn fetch.
	step_latency ();
	this->vliw_cycles = 1;
      }
  }

  // To be overridden as needed. Call after each insn is executed. last_p is
  // true when the insn is the last of a group of parallel insns. cycles is the
  // number of cycles used by each particular insn.
  virtual void model_insn_after (bool last_p = true, sid::host_int_4 cycles = 1)
    {
      // Accumulate the max cycles used by any one vliw insn.
      if (cycles > this->vliw_cycles)
	this->vliw_cycles = cycles;

      // Account for the latency of this group of insns.
      if (last_p)
	step_cycles (vliw_cycles);
    }

  // To be overridden as needed. Update any state associated with an
  // insn using the given number of cycles.
  virtual void step_cycles (sid::host_int_4 cycles)
  {
    if (cycles > 0)
      {
	// The cpu counts cycles as number of insns + total latency.
	cpu->update_total_latency (cycles - 1);
	step_latency (1);
    }
  }

  // To be overridden as needed. Update any state associated with an
  // insn having latency. Insn latency is tracked using the cpu's
  // get_total_latency () method.
  virtual void step_latency (sid::host_int_4 = 0) {}

protected:
  cgen_bi_endian_cpu *cpu;
  sid::host_int_4 vliw_cycles;
};

} // namespace cgen

#endif /* CGEN_MODEL_H */
@


1.2
log
@2003-10-07  Dave Brolley  <brolley@@redhat.com>

        * cgen-model.h (class cgen_model): step_cycles and step_latency
        now public.

2003-10-07  Dave Brolley  <brolley@@redhat.com>

        * cgen-model.h (sidtypes.h): #include it.
        (model_insn_before): Call step_latency. Initialize vliw_cycles.
        (model_insn_after): Call step_cycles. Update vliw_cycles.
        (step_cycles): New method.
        (step_latency): New method.
        (vliw_cycles): New member of cgen_model.
        * cgen-engine.h (enum sem_status): Add SEM_STATUS_STALLED.
@
text
@d19 4
a22 1
  cgen_model (cgen_bi_endian_cpu *c) : cpu (c) {}
d37 1
a37 1
  // true when the insn is the first of a group of parallel insns. cycles is the
@


1.1
log
@003-04-16  Dave Brolley  <brolley@@redhat.com>

        * common-xml/interface.xml: Document trace-count? and
        final-insn-count?.
        * CGEN.sh.in: Implement generation of model.cxx and model.h
        * cgen-model.h: New file.
@
text
@d10 1
d23 9
a31 1
  virtual void model_insn_before (bool first_p = true) {}
d38 16
a53 1
      if (last_p && cycles > 0)
d55 1
d57 6
d66 1
@

