head	1.2;
access;
symbols
	sid-snapshot-20180601:1.2
	sid-snapshot-20180501:1.2
	sid-snapshot-20180401:1.2
	sid-snapshot-20180301:1.2
	sid-snapshot-20180201:1.2
	sid-snapshot-20180101:1.2
	sid-snapshot-20171201:1.2
	sid-snapshot-20171101:1.2
	sid-snapshot-20171001:1.2
	sid-snapshot-20170901:1.2
	sid-snapshot-20170801:1.2
	sid-snapshot-20170701:1.2
	sid-snapshot-20170601:1.2
	sid-snapshot-20170501:1.2
	sid-snapshot-20170401:1.2
	sid-snapshot-20170301:1.2
	sid-snapshot-20170201:1.2
	sid-snapshot-20170101:1.2
	sid-snapshot-20161201:1.2
	sid-snapshot-20161101:1.2
	sid-snapshot-20160901:1.2
	sid-snapshot-20160801:1.2
	sid-snapshot-20160701:1.2
	sid-snapshot-20160601:1.2
	sid-snapshot-20160501:1.2
	sid-snapshot-20160401:1.2
	sid-snapshot-20160301:1.2
	sid-snapshot-20160201:1.2
	sid-snapshot-20160101:1.2
	sid-snapshot-20151201:1.2
	sid-snapshot-20151101:1.2
	sid-snapshot-20151001:1.2
	sid-snapshot-20150901:1.2
	sid-snapshot-20150801:1.2
	sid-snapshot-20150701:1.2
	sid-snapshot-20150601:1.2
	sid-snapshot-20150501:1.2
	sid-snapshot-20150401:1.2
	sid-snapshot-20150301:1.2
	sid-snapshot-20150201:1.2
	sid-snapshot-20150101:1.2
	sid-snapshot-20141201:1.2
	sid-snapshot-20141101:1.2
	sid-snapshot-20141001:1.2
	sid-snapshot-20140901:1.2
	sid-snapshot-20140801:1.2
	sid-snapshot-20140701:1.2
	sid-snapshot-20140601:1.2
	sid-snapshot-20140501:1.2
	sid-snapshot-20140401:1.2
	sid-snapshot-20140301:1.2
	sid-snapshot-20140201:1.2
	sid-snapshot-20140101:1.2
	sid-snapshot-20131201:1.2
	sid-snapshot-20131101:1.2
	sid-snapshot-20131001:1.2
	sid-snapshot-20130901:1.2
	sid-snapshot-20130801:1.2
	sid-snapshot-20130701:1.2
	sid-snapshot-20130601:1.2
	sid-snapshot-20130501:1.2
	sid-snapshot-20130401:1.2
	sid-snapshot-20130301:1.2
	sid-snapshot-20130201:1.2
	sid-snapshot-20130101:1.2
	sid-snapshot-20121201:1.2
	sid-snapshot-20121101:1.2
	sid-snapshot-20121001:1.2
	sid-snapshot-20120901:1.2
	sid-snapshot-20120801:1.2
	sid-snapshot-20120701:1.2
	sid-snapshot-20120601:1.2
	sid-snapshot-20120501:1.2
	sid-snapshot-20120401:1.2
	sid-snapshot-20120301:1.2
	sid-snapshot-20120201:1.2
	sid-snapshot-20120101:1.2
	sid-snapshot-20111201:1.2
	sid-snapshot-20111101:1.2
	sid-snapshot-20111001:1.2
	sid-snapshot-20110901:1.2
	sid-snapshot-20110801:1.2
	sid-snapshot-20110701:1.2
	sid-snapshot-20110601:1.2
	sid-snapshot-20110501:1.2
	sid-snapshot-20110401:1.2
	sid-snapshot-20110301:1.2
	sid-snapshot-20110201:1.2
	sid-snapshot-20110101:1.2
	sid-snapshot-20101201:1.2
	sid-snapshot-20101101:1.2
	sid-snapshot-20101001:1.2
	sid-snapshot-20100901:1.2
	sid-snapshot-20100801:1.2
	sid-snapshot-20100701:1.2
	sid-snapshot-20100601:1.2
	sid-snapshot-20100501:1.2
	sid-snapshot-20100401:1.2
	sid-snapshot-20100301:1.2
	sid-snapshot-20100201:1.2
	sid-snapshot-20100101:1.2
	sid-snapshot-20091201:1.2
	sid-snapshot-20091101:1.2
	sid-snapshot-20091001:1.2
	sid-snapshot-20090901:1.2
	sid-snapshot-20090801:1.2
	sid-snapshot-20090701:1.2
	sid-snapshot-20090601:1.2
	sid-snapshot-20090501:1.2
	sid-snapshot-20090401:1.2
	sid-snapshot-20090301:1.2
	sid-snapshot-20090201:1.2
	sid-snapshot-20090101:1.2
	sid-snapshot-20081201:1.2
	sid-snapshot-20081101:1.2
	sid-snapshot-20081001:1.2
	sid-snapshot-20080901:1.2
	sid-snapshot-20080801:1.2
	sid-snapshot-20080701:1.2
	sid-snapshot-20080601:1.2
	sid-snapshot-20080501:1.2
	sid-snapshot-20080403:1.2
	sid-snapshot-20080401:1.2
	sid-snapshot-20080301:1.2
	sid-snapshot-20080201:1.2
	sid-snapshot-20080101:1.2
	sid-snapshot-20071201:1.2
	sid-snapshot-20071101:1.2
	sid-snapshot-20071001:1.2;
locks; strict;
comment	@// @;


1.2
date	2005.12.16.10.23.13;	author nathan;	state Exp;
branches;
next	1.1;

1.1
date	2005.12.12.11.16.42;	author nathan;	state Exp;
branches;
next	;


desc
@@


1.2
log
@	Second part of ms1 to mt renaming.
	* bfd/archures.c (bfd_arch_mt): Renamed.
	(bfd_mt_arch): Renamed.
	(bfd_archures_list): Adjusted.
	* bfd/bfd-in2.h: Rebuilt.
	* bfd/config.bfd (mt): Remove special case targ_archs.
	(mt-*-elf): Rename bfd_elf32_mt_vec.
	* bfd/configure: Rebuilt.
	* bfd/configure.in (bfd_elf32_mt_vec): Renamed.
	(selarchs) Remove mt special case.
	* bfd/cpu-mt.c (arch_info_struct): Adjust.
	(bfd_mt_arch): Renamed, adjust.
	* bfd/elf32-mt.c (mt_reloc_type_lookup, mt_info_to_howto_rela,
	mt_elf_relocate_hi16, mt_final_link_relocate, mt_relocate_section,
	mt_elf_howto_table): Renamed, adjusted.
	(mt_elf_gc_mark_hook, mt_elf_gc_sweep_hook, mt_elf_check_relocs,
	elf32_mt_machine, mt_elf_object_p, mt_elf_set_private_flags,
	mt_elf_copy_private_bfd_data, mt_elf_merge_private_bfd_data,
	mt_elf_print_private_bfd_data): Renamed, adjusted.
	(TARGET_BIG_SYM, TARGET_BIG_NAME, ELF_ARCH, ELF_MACHINE_CODE,
	ELF_MAXPAGESIZE, elf_info_to_howto, elf_backend_relocate_section,
	bfd_elf32_bfd_reloc_type_lookup, elf_backend_gc_mark_hook,
	elf_backend_gc_sweep_hook, elf_backend_check_relocs,
	eld_backend_object_p, bfd_elf32_bfd_set_private_flags,
	bfd_elf32_bfd_copy_private_bfd_data,
	bfd_elf32_bfd_merge_private_bfd_data,
	bfd_elf32_bfd_print_private_bfd_data): Adjusted.
	* bfd/libbfd.h: Regenerated.
	* bfd/reloc.c (BFD_RELOC_MT_PC16, BFD_RELOC_MT_HI16,
	BFD_RELOC_MT_LO16, BFD_RELOC_MT_GNU_VTINHERIT,
	BFD_RELOC_MT_GNU_VTENTRY, BFD_RELOC_MT_PCINSN8): Renamed.
	* bfd/targets.c (bfd_elf32_mt_vec): Renamed.
	(_bfd_target_vector): Adjusted.
	* binutils/readelf.c (guess_is_rela): Use EM_MT.
	(dump_relocations, get_machine_name): Adjust.

	* cpu/mt.cpu (define-arch, define-isa): Set name to mt.
	(define-mach): Adjust.
	* cpu/mt.opc (CGEN_ASM_HASH): Update.
	(mt_asm_hash, mt_cgen_insn_supported): Renamed.
	(parse_loopsize, parse_imm16): Adjust.

	* gas/configure: Rebuilt.
	* gas/configure.in (mt): Remove special case.
	* gas/config/tc-mt.c (opcodes/mt-desc.h, opcodes/mt-opc.h): Change
	#includes.
	(mt_insn, mt_mach, mt_mach_bitmask, mt_flags, mt_architectures):
	Rename, adjust.
	(md_parse_option, md_show_usage, md_begin, md_assemble,
	md_cgen_lookup_reloc, md_atof): Adjust.
	(mt_force_relocation, mt_apply_fix, mt_fix_adjustable): Rename, adjust.
	* gas/config/tc-mt.h (TC_MT): Rename.
	(LISTING_HEADER, TARGET_ARCH, TARGET_FORMAT): Adjust.
	(md_apply_fix): Adjust.
	(mt_apply_fix, mt_fix_adjustable, mt_force_relocation): Rename.
	(TC_FORCE_RELOCATION, tc_fix_adjustable): Adjust.

	* gdb/mt-tdep.c (mt_arch_constants, mt_gdb_regnums): Rename, adjust.
	(mt_register_name, mt_register_type, mt_register_reggroup_p,
	mt_return_value, mt_skip_prologue, mt_breapoint_from_pc,
	mt_pseudo_register_read, mt_pseudo_register_write, mt_frame_align,
	mt_registers_info, mt_push_dummy_call, mt_unwind_cache,
	mt_frame_unwind_cache, mt_unwind_pc, mt_unwind_dummy_id,
	mt_frame_this_id, mt_frame_prev_register, mt_frame_base_address,
	mt_frame_unwind, mt_frame_sniffer, mt_frame_base, mt_gdbarch_init,
	_initialize_mt_tdep): Rename & adjust.

	* include/dis-asm.h (print_insn_mt): Renamed.

	* include/elf/common.h (EM_MT): Renamed.
	* include/elf/mt.h: Rename relocs, cpu & other defines.

	* ld/emulparams/elf32mt.sh (ARCH, OUTPUT_FORMAT): Adjust.

	* opcodes/Makefile.am (HFILES, CFILES, ALL_MACHINES): Adjust.
	(stamp-mt): Adjust rule.
	(mt-asm.lo, mt-desc.lo, mt-dis.lo, mt-ibld.lo, mt-opc.lo): Rename &
	adjust.
	* opcodes/Makefile.in: Rebuilt.
	* opcodes/configure: Rebuilt.
	* opcodes/configure.in (bfd_mt_arch): Rename & adjust.
	* opcodes/disassemble.c (ARCH_mt): Renamed.
	(disassembler): Adjust.
	* opcodes/mt-asm.c: Renamed, rebuilt.
	* opcodes/mt-desc.c: Renamed, rebuilt.
	* opcodes/mt-desc.h: Renamed, rebuilt.
	* opcodes/mt-dis.c: Renamed, rebuilt.
	* opcodes/mt-ibld.c: Renamed, rebuilt.
	* opcodes/mt-opc.c: Renamed, rebuilt.
	* opcodes/mt-opc.h: Renamed, rebuilt.

	* sid/Makefile.in: Rebuilt.
	* sid/aclocal.m4: Rebuilt.
	* sid/configure: Rebuilt.
	* sid/sid.spec: Adjust.
	* sid/bsp/Makefile.am: Adjust.
	* sid/bsp/Makefile.in: Rebuilt.
	* sid/bsp/aclocal.m4: Rebuilt.
	* sid/bsp/configrun-sid.in: Adjust.
	* sid/bsp/pregen/Makefile.in: Rebuilt.
	* sid/bsp/pregen/mt-gdb.conf: Renamed & rebuilt.
	* sid/bsp/pregen/mt-gloss.conf: Renamed & rebuilt.
	* sid/bsp/pregen/pregen-configs.in: Adjust.
	* sid/component/aclocal.m4: Rebuilt.
	* sid/component/configure: Rebuilt.
	* sid/component/tconfig.in: Adjust.
	* sid/component/bochs/aclocal.m4: Rebuilt.
	* sid/component/cache/Makefile.in: Rebuilt.
	* sid/component/cgen-cpu/Makefile.in: Rebuilt.
	* sid/component/cgen-cpu/aclocal.m4: Rebuilt.
	* sid/component/cgen-cpu/compCGEN.cxx: Adjust.
	* sid/component/cgen-cpu/configure: Rebuilt.
	* sid/component/cgen-cpu/configure.in: Rebult.
	* sid/component/cgen-cpu/mt/Makefile.am: Adjust.
	* sid/component/cgen-cpu/mt/Makefile.in: Rebuilt.
	* sid/component/cgen-cpu/mt/hw-cpu-mt.txt: Adjust.
	* sid/component/cgen-cpu/mt/mt-cpu.h: Rebuilt.
	* sid/component/cgen-cpu/mt/mt-decode.cxx: Rebuilt.
	* sid/component/cgen-cpu/mt/mt-decode.h: Rebuilt.
	* sid/component/cgen-cpu/mt/mt-defs.h: Rebuilt.
	* sid/component/cgen-cpu/mt/mt-desc.h: Rebuilt.
	* sid/component/cgen-cpu/mt/mt-sem.cxx: Rebuilt.
	* sid/component/cgen-cpu/mt/mt-write.cxx: Rebuilt.
	* sid/component/cgen-cpu/mt/mt.cxx: Adjust.
	* sid/component/cgen-cpu/mt/mt.h: Adjust.
	* sid/component/consoles/Makefile.in: Rebuilt.
	* sid/component/families/aclocal.m4: Rebuilt.
	* sid/component/families/configure: Rebuilt.
	* sid/component/gdb/Makefile.in: Rebuilt.
	* sid/component/gloss/Makefile.in: Rebuilt.
	* sid/component/glue/Makefile.in: Rebuilt.
	* sid/component/ide/Makefile.in: Rebuilt.
	* sid/component/interrupt/Makefile.in: Rebuilt.
	* sid/component/lcd/Makefile.in: Rebuilt.
	* sid/component/lcd/testsuite/Makefile.in: Rebuilt.
	* sid/component/loader/Makefile.am: Rebuilt.
	* sid/component/loader/Makefile.in: Rebuilt.
	* sid/component/mapper/Makefile.in: Rebuilt.
	* sid/component/mapper/testsuite/Makefile.in: Rebuilt.
	* sid/component/memory/Makefile.in: Rebuilt.
	* sid/component/mmu/Makefile.in: Rebuilt.
	* sid/component/parport/Makefile.in: Rebuilt.
	* sid/component/profiling/Makefile.in: Rebuilt.
	* sid/component/rtc/Makefile.in: Rebuilt.
	* sid/component/sched/Makefile.in: Rebuilt.
	* sid/component/testsuite/Makefile.in: Rebuilt.
	* sid/component/timers/aclocal.m4: Rebuilt.
	* sid/component/timers/configure: Rebuilt.
	* sid/component/uart/Makefile.in: Rebuilt.
	* sid/component/uart/testsuite/Makefile.in: Rebuilt.
	* sid/config/config.sub: Adjust.
	* sid/config/info.tcl.in: Adjust.
	* sid/config/sidtargets.m4: Adjust.
	* sid/doc/Makefile.in: Rebuilt.
	* sid/main/dynamic/Makefile.am: Rebuilt.
	* sid/main/dynamic/Makefile.in: Rebuilt.
	* sid/main/dynamic/aclocal.m4: Rebuilt.
	* sid/main/dynamic/configure: Rebuilt.
@
text
@// mt.cxx - Implementations of hand-written functions for the MT
// simulator. -*- C++ -*-

// Copyright (C) 2004 Red Hat.
// This file is part of SID and is licensed under the GPL.
// See the file COPYING.SID for conditions for redistribution.

// Normally, cpu ports are divided into a common part (e.g. arm-cmn.{h,cxx})
// and one or more cpu-family specific parts.  MSi1 is a fairly simple
// port so we don't currently do this.

#include "mt.h"

using namespace std;
using namespace sid;
using namespace sidutil;
using namespace mt;

mt_cpu::mt_cpu ()
  :tick(0),
   engine (32768) // XXX: tune size  
{
  for (unsigned i = 0; i < 16; ++i)
    {
      string name = string ("R") + make_numeric_attribute (i);
      SI* value = & this->hardware.h_spr[i];
      this->add_watchable_register (name, value);
    }

  USI* value = & this->hardware.h_pc;
  this->add_watchable_register (string("pc"), value);
  this->interrupts_enabled = false;
  this->io_bus = NULL;
  // add accessor for I/O bus
  add_accessor("io-memory", & this->io_bus);

  // add syscall registers
  this->add_watchable_register (string("syscall-arg0"), &syscall_arg0);
  this->add_watchable_register (string("syscall-arg1"), &syscall_arg1);
  this->add_watchable_register (string("syscall-arg2"), &syscall_arg2);
  this->add_watchable_register (string("syscall-arg3"), &syscall_arg3);
  this->add_watchable_register (string("syscall-result"), &syscall_result);
  this->add_watchable_register (string("syscall-error"), &syscall_error);
  this->add_attribute (string("syscall-trap"), &syscall_trap_num,"setting");
  this->syscall_trap_num = 0;
  // For gdb.
  this->create_gdb_register_attrs (47, "12;13;14;16", & this->hardware.h_pc);

}

void
mt_cpu::reset()
{
  this->write_stacks.reset();
  this->hardware.h_pc = 0;
  this->interrupts_enabled = false;
  for (unsigned i = 0; i < 16; i++)
    this->hardware.h_spr[i] = 0;
}

void
mt_cpu::flush_icache ()
{
  this->engine.flush ();
}


void
mt_cpu::invalid_insn (PCADDR pc)
{
  cout << hex << "XXX: invalid insn @@ " << pc << dec << endl;
  // abort();
}


// Memory trap(/fault) handling.
void
mt_cpu::memory_trap (const cpu_memory_fault& t)
{
  this->h_pc_set (t.pc);
  
  abort();
}


void
mt_cpu::do_syscall (PCADDR pc)
{

  // Get the syscall arguments
  syscall_arg0 = h_spr_get(1); // This specifies which syscall
  syscall_arg1 = h_spr_get(2); // First arg
  syscall_arg2 = h_spr_get(3); // Second arg
  syscall_arg3 = h_spr_get(4); // Third arg


  //this->h_pc_set (this->h_pc_get());
  this->h_pc_set (pc);

  cpu_trap_disposition whatnext = this->signal_trap (cpu_trap_software, syscall_trap_num);


  switch (whatnext)
    {
    case cpu_trap_unhandled:
      // cerr << "hw-cpu-mt: invalid insn handler unimplemented!" << endl;
      // When no gloss component is configured, we have to do the normal SI.
      h_pc_set(8);
      return;

    case cpu_trap_reissue:
      break;

    case cpu_trap_skip:
      //this->h_pc_set (this->h_pc_get() + 4);
      this->h_pc_set (pc + 4);
      /* fall-through */

    case cpu_trap_handled:
      {
        // must get syscall results and place them in current context registers
        string errAttr = this->attribute_value ("syscall-error");
        string resultAttr = this->attribute_value ("syscall-result");

        host_int_4 errValue;
        host_int_4 resultValue;
        parse_attribute(errAttr, errValue);
        parse_attribute(resultAttr, resultValue);


        h_spr_set (5, errValue);
        h_spr_set (11, resultValue);
      }
      return;
    default:
      abort ();
    }

  this->yield();
  throw cpu_exception ();
}

void
mt_cpu::do_break (PCADDR pc)
{
  cpu_trap_disposition whatnext = this->signal_trap (cpu_trap_breakpoint, 0);
  switch (whatnext)
    {
    case cpu_trap_unhandled:
      // cerr << "hw-cpu-mt: breakpoint handler unimplemented!" << endl;
      // No gdb component?  Do the proper break processing.
      // Put pc+4 into R15
      h_spr_set (15, pc +4);
      // Disable interrupts
      this->disable_interrupts();
      // Branch to 0x00000010
      this->h_pc_set (0x10);
      return;
      //break;

    case cpu_trap_skip:
      break;

    case cpu_trap_handled:
      // Gdb processed the trap. 
      break;

    case cpu_trap_reissue:
      break;

    default:
      abort ();
    }

  this->yield();
  throw cpu_exception ();
}

USI
mt_cpu::io_read (host_int_4 pc, host_int_4 address) 
{
  big_int_4 value;
  sid::bus::status s =
    (LIKELY(this->io_bus)) ? this->io_bus->read (address, value) : sid::bus::unmapped;
  if (LIKELY(s == sid::bus::ok))
    return (USI)value;
   
  // A bus tracer has been connected to the io bus accessor in the sid
  // configuration file to verify that reads from and write to the io bus
  // are actaully being requested when io instructions are processed.
  // I/O devices and their associated memory are not part of the ISS so
  // so there is nothing to connect the bus tracer to which will cause
  // an "unmapped" error to occur.  If this were to occur when the io 
  // devices are part of the simulation, the proper thing to do would
  // be to issue a memory fault.  If the ISS is ever expanded to include
  // io devices, uncomment the next line and comment out everything after
  // the remainder of this method.
  //throw cpu_memory_fault (pc, address, s, "IO read");

  // Pretend everything is ok and 0 was read.  (i.e. pretend s == sid::bus::ok)
  return (USI) 0;
} 

void
mt_cpu::io_write (host_int_4 pc, host_int_4 address, big_int_4 value)
{ 
  sid::bus::status s =  
    (LIKELY(this->io_bus)) ? this->io_bus->write (address, value) : sid::bus::unmapped;
  if (LIKELY(s == sid::bus::ok))
    return;

  // A bus tracer has been connected to the io bus accessor in the sid
  // configuration file to verify that reads from and write to the io bus
  // are actaully being requested when io instructions are processed.
  // I/O devices and their associated memory are not part of the ISS so
  // so there is nothing to connect the bus tracer to which will cause
  // an "unmapped" error to occur.  If this were to occur when the io 
  // devices are part of the simulation, the proper thing to do would
  // be to issue a memory fault.  If the ISS is ever expanded to include
  // io devices, uncomment the next line and comment out everything after
  // the remainder of this method.

  // throw cpu_memory_fault (pc, address, s, "IO write");
  
  // Pretend everything is ok.  (i.e. pretend s == sid::bus::ok)
  return;
}

    

// Stepper

void
mt_cpu::step_insns ()
{
  bool found;
  bool increment;
  const char *printable_name;
  this->interrupts_enabled = false;
  while (true)
    {
      increment = true;
      PCADDR pc = this->h_pc_get ();
      bool found;
      mt_scache* sem = engine.find (pc, found);
      if (!found)
	{
	  try
	    {
	      USI insn = this->GETIMEMSI (pc, pc);
	      sem->decode (this, pc, insn, insn);
	    }
	  catch (cpu_memory_fault& t)
	    {
	      this->memory_trap (t);
	      break;
	    }
	}

      // printable_name must agree with bfd/cpu-mt.c.
      if (this->get_eflags () == 2)
	printable_name = "ms1-003";
      else
	printable_name = "ms1";

      // Execute the instruction  -----------------------------------
      if (trace_semantics_p)
	this->begin_trace (pc, sem->idesc->insn_name);

      if (trace_disass_p)
	this->disassemble (pc, print_insn_mt,
			   bfd_target_elf_flavour,
			   bfd_arch_mt,
			   (current_endianness() == endian_little ? 
			    BFD_ENDIAN_LITTLE : BFD_ENDIAN_BIG), 
			   printable_name,
			   0, this->get_eflags ());
      try
	{
	  // R0 is always zero.
	  this->h_spr_set (0, 0);
	  sem->idesc->execute (this, sem, tick, write_stacks);
	  this->h_spr_set (0, 0);
	}
      catch (cpu_memory_fault& t)
	{
	  this->memory_trap (t);
	  this->yield ();
	}
      catch (cpu_exception& t)
	{
	  this->yield ();
          increment = false;
	}
      if (trace_semantics_p)
	this->end_trace ();

      // Advance PC by one word, by default
      if (increment)
         this->h_pc_set (pc + 4);
      // Execute writeback 
      try {
	write_stacks.writeback (tick, this);
	// Overwrite R0 yet again, just in case a delayed load to R0 was performed
	this->h_spr_set (0, 0);
      }
      catch (cpu_memory_fault& t)
	{
	  this->memory_trap (t);
	  this->yield ();
	}
      catch (cpu_exception& t)
	{
	  this->yield ();
	}


      // move ahead thru circular pipeline
      tick = (tick + 1) % mt::pipe_sz;

      // Do post-instruction processing  ----------------------------
      if (this->enable_step_trap_p) 
	this->signal_trap (sidutil::cpu_trap_stepped);
      this->triggerpoint_manager.check_and_dispatch ();
      
      // test for exit condition
      if (stop_after_insns_p (1))
	break;
    }
}


void
mt_cpu::stream_state (ostream& o) const
{
  o << " mt-cpu-cgen ";
  stream_cgen_hardware (o);
  o << ' ' << tick << ' ';
  stream_cgen_write_stacks (o, write_stacks);
}

void
mt_cpu::destream_state (istream& i)
{
  string key;
  i >> key;
  if (key != "mt-cpu-cgen")
    {
      i.setstate (ios::badbit);
      return;
    }

  destream_cgen_hardware (i);
  i >> tick;
  destream_cgen_write_stacks (i, write_stacks);
}
@


1.1
log
@Rename ms1 files to mt files (part 1 -- renames only)
@
text
@d1 1
a1 1
// ms1.cxx - Implementations of hand-written functions for the MS1
d12 1
a12 1
#include "ms1.h"
d17 1
a17 1
using namespace ms1;
d19 1
a19 1
ms1_cpu::ms1_cpu ()
d52 1
a52 1
ms1_cpu::reset()
d62 1
a62 1
ms1_cpu::flush_icache ()
d69 1
a69 1
ms1_cpu::invalid_insn (PCADDR pc)
d78 1
a78 1
ms1_cpu::memory_trap (const cpu_memory_fault& t)
d87 1
a87 1
ms1_cpu::do_syscall (PCADDR pc)
d106 1
a106 1
      // cerr << "hw-cpu-ms1: invalid insn handler unimplemented!" << endl;
d144 1
a144 1
ms1_cpu::do_break (PCADDR pc)
d150 1
a150 1
      // cerr << "hw-cpu-ms1: breakpoint handler unimplemented!" << endl;
d180 1
a180 1
ms1_cpu::io_read (host_int_4 pc, host_int_4 address) 
d205 1
a205 1
ms1_cpu::io_write (host_int_4 pc, host_int_4 address, big_int_4 value)
d234 1
a234 1
ms1_cpu::step_insns ()
d245 1
a245 1
      ms1_scache* sem = engine.find (pc, found);
d260 1
a260 1
      // printable_name must agree with bfd/cpu-ms1.c.
d271 1
a271 1
	this->disassemble (pc, print_insn_ms1,
d273 1
a273 1
			   bfd_arch_ms1,
d319 1
a319 1
      tick = (tick + 1) % ms1::pipe_sz;
d334 1
a334 1
ms1_cpu::stream_state (ostream& o) const
d336 1
a336 1
  o << " ms1-cpu-cgen ";
d343 1
a343 1
ms1_cpu::destream_state (istream& i)
d347 1
a347 1
  if (key != "ms1-cpu-cgen")
@

