head	1.6;
access;
symbols
	sid-snapshot-20180601:1.6
	sid-snapshot-20180501:1.6
	sid-snapshot-20180401:1.6
	sid-snapshot-20180301:1.6
	sid-snapshot-20180201:1.6
	sid-snapshot-20180101:1.6
	sid-snapshot-20171201:1.6
	sid-snapshot-20171101:1.6
	sid-snapshot-20171001:1.6
	sid-snapshot-20170901:1.6
	sid-snapshot-20170801:1.6
	sid-snapshot-20170701:1.6
	sid-snapshot-20170601:1.6
	sid-snapshot-20170501:1.6
	sid-snapshot-20170401:1.6
	sid-snapshot-20170301:1.6
	sid-snapshot-20170201:1.6
	sid-snapshot-20170101:1.6
	sid-snapshot-20161201:1.6
	sid-snapshot-20161101:1.6
	sid-snapshot-20160901:1.6
	sid-snapshot-20160801:1.6
	sid-snapshot-20160701:1.6
	sid-snapshot-20160601:1.6
	sid-snapshot-20160501:1.6
	sid-snapshot-20160401:1.6
	sid-snapshot-20160301:1.6
	sid-snapshot-20160201:1.6
	sid-snapshot-20160101:1.6
	sid-snapshot-20151201:1.6
	sid-snapshot-20151101:1.6
	sid-snapshot-20151001:1.6
	sid-snapshot-20150901:1.6
	sid-snapshot-20150801:1.6
	sid-snapshot-20150701:1.6
	sid-snapshot-20150601:1.6
	sid-snapshot-20150501:1.6
	sid-snapshot-20150401:1.6
	sid-snapshot-20150301:1.6
	sid-snapshot-20150201:1.6
	sid-snapshot-20150101:1.6
	sid-snapshot-20141201:1.6
	sid-snapshot-20141101:1.6
	sid-snapshot-20141001:1.6
	sid-snapshot-20140901:1.6
	sid-snapshot-20140801:1.6
	sid-snapshot-20140701:1.6
	sid-snapshot-20140601:1.6
	sid-snapshot-20140501:1.6
	sid-snapshot-20140401:1.6
	sid-snapshot-20140301:1.6
	sid-snapshot-20140201:1.6
	sid-snapshot-20140101:1.6
	sid-snapshot-20131201:1.6
	sid-snapshot-20131101:1.6
	sid-snapshot-20131001:1.6
	sid-snapshot-20130901:1.6
	sid-snapshot-20130801:1.6
	sid-snapshot-20130701:1.6
	sid-snapshot-20130601:1.6
	sid-snapshot-20130501:1.6
	sid-snapshot-20130401:1.6
	sid-snapshot-20130301:1.6
	sid-snapshot-20130201:1.6
	sid-snapshot-20130101:1.6
	sid-snapshot-20121201:1.6
	sid-snapshot-20121101:1.6
	sid-snapshot-20121001:1.6
	sid-snapshot-20120901:1.6
	sid-snapshot-20120801:1.6
	sid-snapshot-20120701:1.6
	sid-snapshot-20120601:1.6
	sid-snapshot-20120501:1.6
	sid-snapshot-20120401:1.6
	sid-snapshot-20120301:1.6
	sid-snapshot-20120201:1.6
	sid-snapshot-20120101:1.6
	sid-snapshot-20111201:1.6
	sid-snapshot-20111101:1.6
	sid-snapshot-20111001:1.6
	sid-snapshot-20110901:1.6
	sid-snapshot-20110801:1.6
	sid-snapshot-20110701:1.6
	sid-snapshot-20110601:1.6
	sid-snapshot-20110501:1.6
	sid-snapshot-20110401:1.6
	sid-snapshot-20110301:1.6
	sid-snapshot-20110201:1.6
	sid-snapshot-20110101:1.6
	sid-snapshot-20101201:1.6
	sid-snapshot-20101101:1.6
	sid-snapshot-20101001:1.6
	sid-snapshot-20100901:1.6
	sid-snapshot-20100801:1.6
	sid-snapshot-20100701:1.6
	sid-snapshot-20100601:1.6
	sid-snapshot-20100501:1.6
	sid-snapshot-20100401:1.6
	sid-snapshot-20100301:1.6
	sid-snapshot-20100201:1.5
	sid-snapshot-20100101:1.4
	sid-snapshot-20091201:1.4
	sid-snapshot-20091101:1.3
	sid-snapshot-20091001:1.2
	sid-snapshot-20090901:1.2
	sid-snapshot-20090801:1.2
	sid-snapshot-20090701:1.2
	sid-snapshot-20090601:1.2
	sid-snapshot-20090501:1.2
	sid-snapshot-20090401:1.2
	sid-snapshot-20090301:1.2
	sid-snapshot-20090201:1.2
	sid-snapshot-20090101:1.2
	sid-snapshot-20081201:1.2
	sid-snapshot-20081101:1.2
	sid-snapshot-20081001:1.2
	sid-snapshot-20080901:1.2
	sid-snapshot-20080801:1.2
	sid-snapshot-20080701:1.2
	sid-snapshot-20080601:1.2
	sid-snapshot-20080501:1.2
	sid-snapshot-20080403:1.2
	sid-snapshot-20080401:1.2
	sid-snapshot-20080301:1.2
	sid-snapshot-20080201:1.2
	sid-snapshot-20080101:1.2
	sid-snapshot-20071201:1.2
	sid-snapshot-20071101:1.2
	sid-snapshot-20071001:1.2;
locks; strict;
comment	@// @;


1.6
date	2010.02.12.02.33.05;	author devans;	state Exp;
branches;
next	1.5;

1.5
date	2010.01.02.21.18.55;	author devans;	state Exp;
branches;
next	1.4;

1.4
date	2009.11.23.09.24.27;	author devans;	state Exp;
branches;
next	1.3;

1.3
date	2009.10.24.00.45.59;	author devans;	state Exp;
branches;
next	1.2;

1.2
date	2005.12.16.10.23.13;	author nathan;	state Exp;
branches;
next	1.1;

1.1
date	2005.12.12.11.16.42;	author nathan;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Regenerate to pick up recent cgen changes.
[minor changes like removing K&R support, more consistent name for sfmt_empty]
@
text
@/* Simulator instruction decoder for mt.

THIS FILE IS MACHINE GENERATED WITH CGEN.

Copyright (C) 2000-2010 Red Hat, Inc.

This file is part of the Red Hat simulators.


*/


#if HAVE_CONFIG_H
#include "config.h"
#endif
#include "mt.h"

using namespace mt; // FIXME: namespace organization still wip


// The instruction descriptor array. 

mt_idesc mt_idesc::idesc_table[MT_INSN_MFBCBINCRS + 1] =
{
  { mt_sem_x_invalid, "X_INVALID", MT_INSN_X_INVALID, { 0|(1<<CGEN_INSN_VIRTUAL), (1<<MACH_BASE) } },
  { mt_sem_add, "ADD", MT_INSN_ADD, { 0|(1<<CGEN_INSN_USES_FRSR2)|(1<<CGEN_INSN_USES_FRSR1)|(1<<CGEN_INSN_USES_FRDRRR)|(1<<CGEN_INSN_AL_INSN), (1<<MACH_BASE) } },
  { mt_sem_addu, "ADDU", MT_INSN_ADDU, { 0|(1<<CGEN_INSN_USES_FRSR2)|(1<<CGEN_INSN_USES_FRSR1)|(1<<CGEN_INSN_USES_FRDRRR)|(1<<CGEN_INSN_AL_INSN), (1<<MACH_BASE) } },
  { mt_sem_addi, "ADDI", MT_INSN_ADDI, { 0|(1<<CGEN_INSN_USES_FRSR1)|(1<<CGEN_INSN_USES_FRDR)|(1<<CGEN_INSN_AL_INSN), (1<<MACH_BASE) } },
  { mt_sem_addui, "ADDUI", MT_INSN_ADDUI, { 0|(1<<CGEN_INSN_USES_FRSR1)|(1<<CGEN_INSN_USES_FRDR)|(1<<CGEN_INSN_AL_INSN), (1<<MACH_BASE) } },
  { mt_sem_sub, "SUB", MT_INSN_SUB, { 0|(1<<CGEN_INSN_USES_FRSR2)|(1<<CGEN_INSN_USES_FRSR1)|(1<<CGEN_INSN_USES_FRDRRR)|(1<<CGEN_INSN_AL_INSN), (1<<MACH_BASE) } },
  { mt_sem_subu, "SUBU", MT_INSN_SUBU, { 0|(1<<CGEN_INSN_USES_FRSR2)|(1<<CGEN_INSN_USES_FRSR1)|(1<<CGEN_INSN_USES_FRDRRR)|(1<<CGEN_INSN_AL_INSN), (1<<MACH_BASE) } },
  { mt_sem_subi, "SUBI", MT_INSN_SUBI, { 0|(1<<CGEN_INSN_USES_FRSR1)|(1<<CGEN_INSN_USES_FRDR)|(1<<CGEN_INSN_AL_INSN), (1<<MACH_BASE) } },
  { mt_sem_subui, "SUBUI", MT_INSN_SUBUI, { 0|(1<<CGEN_INSN_USES_FRSR1)|(1<<CGEN_INSN_USES_FRDR)|(1<<CGEN_INSN_AL_INSN), (1<<MACH_BASE) } },
  { mt_sem_mul, "MUL", MT_INSN_MUL, { 0|(1<<CGEN_INSN_USES_FRSR2)|(1<<CGEN_INSN_USES_FRSR1)|(1<<CGEN_INSN_USES_FRDRRR)|(1<<CGEN_INSN_AL_INSN), (1<<MACH_MS1_003)|(1<<MACH_MS2) } },
  { mt_sem_muli, "MULI", MT_INSN_MULI, { 0|(1<<CGEN_INSN_USES_FRSR1)|(1<<CGEN_INSN_USES_FRDR)|(1<<CGEN_INSN_AL_INSN), (1<<MACH_MS1_003)|(1<<MACH_MS2) } },
  { mt_sem_and, "AND", MT_INSN_AND, { 0|(1<<CGEN_INSN_USES_FRSR2)|(1<<CGEN_INSN_USES_FRSR1)|(1<<CGEN_INSN_USES_FRDRRR)|(1<<CGEN_INSN_AL_INSN), (1<<MACH_BASE) } },
  { mt_sem_andi, "ANDI", MT_INSN_ANDI, { 0|(1<<CGEN_INSN_USES_FRSR1)|(1<<CGEN_INSN_USES_FRDR)|(1<<CGEN_INSN_AL_INSN), (1<<MACH_BASE) } },
  { mt_sem_or, "OR", MT_INSN_OR, { 0|(1<<CGEN_INSN_USES_FRSR2)|(1<<CGEN_INSN_USES_FRSR1)|(1<<CGEN_INSN_USES_FRDRRR)|(1<<CGEN_INSN_AL_INSN), (1<<MACH_BASE) } },
  { mt_sem_nop, "NOP", MT_INSN_NOP, { 0, (1<<MACH_BASE) } },
  { mt_sem_ori, "ORI", MT_INSN_ORI, { 0|(1<<CGEN_INSN_USES_FRSR1)|(1<<CGEN_INSN_USES_FRDR)|(1<<CGEN_INSN_AL_INSN), (1<<MACH_BASE) } },
  { mt_sem_xor, "XOR", MT_INSN_XOR, { 0|(1<<CGEN_INSN_USES_FRSR2)|(1<<CGEN_INSN_USES_FRSR1)|(1<<CGEN_INSN_USES_FRDRRR)|(1<<CGEN_INSN_AL_INSN), (1<<MACH_BASE) } },
  { mt_sem_xori, "XORI", MT_INSN_XORI, { 0|(1<<CGEN_INSN_USES_FRSR1)|(1<<CGEN_INSN_USES_FRDR)|(1<<CGEN_INSN_AL_INSN), (1<<MACH_BASE) } },
  { mt_sem_nand, "NAND", MT_INSN_NAND, { 0|(1<<CGEN_INSN_USES_FRSR2)|(1<<CGEN_INSN_USES_FRSR1)|(1<<CGEN_INSN_USES_FRDRRR)|(1<<CGEN_INSN_AL_INSN), (1<<MACH_BASE) } },
  { mt_sem_nandi, "NANDI", MT_INSN_NANDI, { 0|(1<<CGEN_INSN_USES_FRSR1)|(1<<CGEN_INSN_USES_FRDR)|(1<<CGEN_INSN_AL_INSN), (1<<MACH_BASE) } },
  { mt_sem_nor, "NOR", MT_INSN_NOR, { 0|(1<<CGEN_INSN_USES_FRSR2)|(1<<CGEN_INSN_USES_FRSR1)|(1<<CGEN_INSN_USES_FRDRRR)|(1<<CGEN_INSN_AL_INSN), (1<<MACH_BASE) } },
  { mt_sem_nori, "NORI", MT_INSN_NORI, { 0|(1<<CGEN_INSN_USES_FRSR1)|(1<<CGEN_INSN_USES_FRDR)|(1<<CGEN_INSN_AL_INSN), (1<<MACH_BASE) } },
  { mt_sem_xnor, "XNOR", MT_INSN_XNOR, { 0|(1<<CGEN_INSN_USES_FRSR2)|(1<<CGEN_INSN_USES_FRSR1)|(1<<CGEN_INSN_USES_FRDRRR)|(1<<CGEN_INSN_AL_INSN), (1<<MACH_BASE) } },
  { mt_sem_xnori, "XNORI", MT_INSN_XNORI, { 0|(1<<CGEN_INSN_USES_FRSR1)|(1<<CGEN_INSN_USES_FRDR)|(1<<CGEN_INSN_AL_INSN), (1<<MACH_BASE) } },
  { mt_sem_ldui, "LDUI", MT_INSN_LDUI, { 0|(1<<CGEN_INSN_USES_FRDR)|(1<<CGEN_INSN_AL_INSN), (1<<MACH_BASE) } },
  { mt_sem_lsl, "LSL", MT_INSN_LSL, { 0|(1<<CGEN_INSN_USES_FRSR2)|(1<<CGEN_INSN_USES_FRSR1)|(1<<CGEN_INSN_USES_FRDRRR), (1<<MACH_BASE) } },
  { mt_sem_lsli, "LSLI", MT_INSN_LSLI, { 0|(1<<CGEN_INSN_USES_FRSR1)|(1<<CGEN_INSN_USES_FRDR), (1<<MACH_BASE) } },
  { mt_sem_lsr, "LSR", MT_INSN_LSR, { 0|(1<<CGEN_INSN_USES_FRSR2)|(1<<CGEN_INSN_USES_FRSR1)|(1<<CGEN_INSN_USES_FRDRRR), (1<<MACH_BASE) } },
  { mt_sem_lsri, "LSRI", MT_INSN_LSRI, { 0|(1<<CGEN_INSN_USES_FRSR1)|(1<<CGEN_INSN_USES_FRDR), (1<<MACH_BASE) } },
  { mt_sem_asr, "ASR", MT_INSN_ASR, { 0|(1<<CGEN_INSN_USES_FRSR2)|(1<<CGEN_INSN_USES_FRSR1)|(1<<CGEN_INSN_USES_FRDRRR), (1<<MACH_BASE) } },
  { mt_sem_asri, "ASRI", MT_INSN_ASRI, { 0|(1<<CGEN_INSN_USES_FRSR1)|(1<<CGEN_INSN_USES_FRDR), (1<<MACH_BASE) } },
  { mt_sem_brlt, "BRLT", MT_INSN_BRLT, { 0|(1<<CGEN_INSN_USES_FRSR2)|(1<<CGEN_INSN_USES_FRSR1)|(1<<CGEN_INSN_USES_FRDRRR)|(1<<CGEN_INSN_DELAY_SLOT)|(1<<CGEN_INSN_BR_INSN), (1<<MACH_BASE) } },
  { mt_sem_brle, "BRLE", MT_INSN_BRLE, { 0|(1<<CGEN_INSN_USES_FRSR2)|(1<<CGEN_INSN_USES_FRSR1)|(1<<CGEN_INSN_DELAY_SLOT)|(1<<CGEN_INSN_BR_INSN), (1<<MACH_BASE) } },
  { mt_sem_breq, "BREQ", MT_INSN_BREQ, { 0|(1<<CGEN_INSN_USES_FRSR2)|(1<<CGEN_INSN_USES_FRSR1)|(1<<CGEN_INSN_DELAY_SLOT)|(1<<CGEN_INSN_BR_INSN), (1<<MACH_BASE) } },
  { mt_sem_brne, "BRNE", MT_INSN_BRNE, { 0|(1<<CGEN_INSN_USES_FRSR2)|(1<<CGEN_INSN_USES_FRSR1)|(1<<CGEN_INSN_DELAY_SLOT)|(1<<CGEN_INSN_BR_INSN), (1<<MACH_BASE) } },
  { mt_sem_jmp, "JMP", MT_INSN_JMP, { 0|(1<<CGEN_INSN_BR_INSN)|(1<<CGEN_INSN_DELAY_SLOT), (1<<MACH_BASE) } },
  { mt_sem_jal, "JAL", MT_INSN_JAL, { 0|(1<<CGEN_INSN_JAL_HAZARD)|(1<<CGEN_INSN_USES_FRSR1)|(1<<CGEN_INSN_USES_FRDR)|(1<<CGEN_INSN_BR_INSN)|(1<<CGEN_INSN_DELAY_SLOT), (1<<MACH_BASE) } },
  { mt_sem_dbnz, "DBNZ", MT_INSN_DBNZ, { 0|(1<<CGEN_INSN_USES_FRSR1)|(1<<CGEN_INSN_DELAY_SLOT)|(1<<CGEN_INSN_BR_INSN), (1<<MACH_MS1_003)|(1<<MACH_MS2) } },
  { mt_sem_ei, "EI", MT_INSN_EI, { 0, (1<<MACH_BASE) } },
  { mt_sem_di, "DI", MT_INSN_DI, { 0, (1<<MACH_BASE) } },
  { mt_sem_si, "SI", MT_INSN_SI, { 0|(1<<CGEN_INSN_USES_FRDR)|(1<<CGEN_INSN_BR_INSN)|(1<<CGEN_INSN_DELAY_SLOT), (1<<MACH_BASE) } },
  { mt_sem_reti, "RETI", MT_INSN_RETI, { 0|(1<<CGEN_INSN_JAL_HAZARD)|(1<<CGEN_INSN_USES_FRSR1)|(1<<CGEN_INSN_BR_INSN)|(1<<CGEN_INSN_DELAY_SLOT), (1<<MACH_BASE) } },
  { mt_sem_ldw, "LDW", MT_INSN_LDW, { 0|(1<<CGEN_INSN_USES_FRSR1)|(1<<CGEN_INSN_USES_FRDR)|(1<<CGEN_INSN_MEMORY_ACCESS)|(1<<CGEN_INSN_LOAD_DELAY), (1<<MACH_BASE) } },
  { mt_sem_stw, "STW", MT_INSN_STW, { 0|(1<<CGEN_INSN_USES_FRSR2)|(1<<CGEN_INSN_USES_FRSR1)|(1<<CGEN_INSN_MEMORY_ACCESS), (1<<MACH_BASE) } },
  { mt_sem_break, "BREAK", MT_INSN_BREAK, { 0, (1<<MACH_BASE) } },
  { mt_sem_iflush, "IFLUSH", MT_INSN_IFLUSH, { 0, (1<<MACH_MS1_003)|(1<<MACH_MS2) } },
  { mt_sem_fbcb, "FBCB", MT_INSN_FBCB, { 0, (1<<MACH_MS1)|(1<<MACH_MS1_003) } },
  { mt_sem_mfbcb, "MFBCB", MT_INSN_MFBCB, { 0, (1<<MACH_BASE) } },
  { mt_sem_fbcci, "FBCCI", MT_INSN_FBCCI, { 0, (1<<MACH_BASE) } },
  { mt_sem_fbrci, "FBRCI", MT_INSN_FBRCI, { 0, (1<<MACH_BASE) } },
  { mt_sem_fbcri, "FBCRI", MT_INSN_FBCRI, { 0, (1<<MACH_BASE) } },
  { mt_sem_fbrri, "FBRRI", MT_INSN_FBRRI, { 0, (1<<MACH_BASE) } },
  { mt_sem_mfbcci, "MFBCCI", MT_INSN_MFBCCI, { 0, (1<<MACH_BASE) } },
  { mt_sem_mfbrci, "MFBRCI", MT_INSN_MFBRCI, { 0, (1<<MACH_BASE) } },
  { mt_sem_mfbcri, "MFBCRI", MT_INSN_MFBCRI, { 0, (1<<MACH_BASE) } },
  { mt_sem_mfbrri, "MFBRRI", MT_INSN_MFBRRI, { 0, (1<<MACH_BASE) } },
  { mt_sem_fbcbdr, "FBCBDR", MT_INSN_FBCBDR, { 0, (1<<MACH_BASE) } },
  { mt_sem_rcfbcb, "RCFBCB", MT_INSN_RCFBCB, { 0, (1<<MACH_BASE) } },
  { mt_sem_mrcfbcb, "MRCFBCB", MT_INSN_MRCFBCB, { 0, (1<<MACH_BASE) } },
  { mt_sem_cbcast, "CBCAST", MT_INSN_CBCAST, { 0, (1<<MACH_BASE) } },
  { mt_sem_dupcbcast, "DUPCBCAST", MT_INSN_DUPCBCAST, { 0, (1<<MACH_BASE) } },
  { mt_sem_wfbi, "WFBI", MT_INSN_WFBI, { 0, (1<<MACH_BASE) } },
  { mt_sem_wfb, "WFB", MT_INSN_WFB, { 0, (1<<MACH_BASE) } },
  { mt_sem_rcrisc, "RCRISC", MT_INSN_RCRISC, { 0, (1<<MACH_BASE) } },
  { mt_sem_fbcbinc, "FBCBINC", MT_INSN_FBCBINC, { 0, (1<<MACH_BASE) } },
  { mt_sem_rcxmode, "RCXMODE", MT_INSN_RCXMODE, { 0, (1<<MACH_BASE) } },
  { mt_sem_interleaver, "INTERLEAVER", MT_INSN_INTERLEAVER, { 0, (1<<MACH_BASE) } },
  { mt_sem_wfbinc, "WFBINC", MT_INSN_WFBINC, { 0, (1<<MACH_MS1_003)|(1<<MACH_MS2) } },
  { mt_sem_mwfbinc, "MWFBINC", MT_INSN_MWFBINC, { 0, (1<<MACH_MS1_003)|(1<<MACH_MS2) } },
  { mt_sem_wfbincr, "WFBINCR", MT_INSN_WFBINCR, { 0, (1<<MACH_MS1_003)|(1<<MACH_MS2) } },
  { mt_sem_mwfbincr, "MWFBINCR", MT_INSN_MWFBINCR, { 0, (1<<MACH_MS1_003)|(1<<MACH_MS2) } },
  { mt_sem_fbcbincs, "FBCBINCS", MT_INSN_FBCBINCS, { 0, (1<<MACH_MS1_003)|(1<<MACH_MS2) } },
  { mt_sem_mfbcbincs, "MFBCBINCS", MT_INSN_MFBCBINCS, { 0, (1<<MACH_MS1_003)|(1<<MACH_MS2) } },
  { mt_sem_fbcbincrs, "FBCBINCRS", MT_INSN_FBCBINCRS, { 0, (1<<MACH_MS1_003)|(1<<MACH_MS2) } },
  { mt_sem_mfbcbincrs, "MFBCBINCRS", MT_INSN_MFBCBINCRS, { 0, (1<<MACH_MS1_003)|(1<<MACH_MS2) } },

};

// Given a canonical virtual insn id, return the target specific one.

mt_insn_type
mt_idesc::lookup_virtual (virtual_insn_type vit)
{
  switch (vit)
    {
      case VIRTUAL_INSN_INVALID: return MT_INSN_X_INVALID;
      case VIRTUAL_INSN_COND: return MT_INSN_X_INVALID;
    }
  abort ();
}


// Declare extractor functions

static void
mt_extract_sfmt_empty (mt_scache* abuf, mt_cpu* current_cpu, PCADDR pc, mt_insn_word base_insn, mt_insn_word entire_insn);
static void
mt_extract_sfmt_add (mt_scache* abuf, mt_cpu* current_cpu, PCADDR pc, mt_insn_word base_insn, mt_insn_word entire_insn);
static void
mt_extract_sfmt_addi (mt_scache* abuf, mt_cpu* current_cpu, PCADDR pc, mt_insn_word base_insn, mt_insn_word entire_insn);
static void
mt_extract_sfmt_addui (mt_scache* abuf, mt_cpu* current_cpu, PCADDR pc, mt_insn_word base_insn, mt_insn_word entire_insn);
static void
mt_extract_sfmt_nop (mt_scache* abuf, mt_cpu* current_cpu, PCADDR pc, mt_insn_word base_insn, mt_insn_word entire_insn);
static void
mt_extract_sfmt_ldui (mt_scache* abuf, mt_cpu* current_cpu, PCADDR pc, mt_insn_word base_insn, mt_insn_word entire_insn);
static void
mt_extract_sfmt_brlt (mt_scache* abuf, mt_cpu* current_cpu, PCADDR pc, mt_insn_word base_insn, mt_insn_word entire_insn);
static void
mt_extract_sfmt_jmp (mt_scache* abuf, mt_cpu* current_cpu, PCADDR pc, mt_insn_word base_insn, mt_insn_word entire_insn);
static void
mt_extract_sfmt_jal (mt_scache* abuf, mt_cpu* current_cpu, PCADDR pc, mt_insn_word base_insn, mt_insn_word entire_insn);
static void
mt_extract_sfmt_dbnz (mt_scache* abuf, mt_cpu* current_cpu, PCADDR pc, mt_insn_word base_insn, mt_insn_word entire_insn);
static void
mt_extract_sfmt_si (mt_scache* abuf, mt_cpu* current_cpu, PCADDR pc, mt_insn_word base_insn, mt_insn_word entire_insn);
static void
mt_extract_sfmt_reti (mt_scache* abuf, mt_cpu* current_cpu, PCADDR pc, mt_insn_word base_insn, mt_insn_word entire_insn);
static void
mt_extract_sfmt_ldw (mt_scache* abuf, mt_cpu* current_cpu, PCADDR pc, mt_insn_word base_insn, mt_insn_word entire_insn);
static void
mt_extract_sfmt_stw (mt_scache* abuf, mt_cpu* current_cpu, PCADDR pc, mt_insn_word base_insn, mt_insn_word entire_insn);
static void
mt_extract_sfmt_break (mt_scache* abuf, mt_cpu* current_cpu, PCADDR pc, mt_insn_word base_insn, mt_insn_word entire_insn);

// Fetch & decode instruction
void
mt_scache::decode (mt_cpu* current_cpu, PCADDR pc, mt_insn_word base_insn, mt_insn_word entire_insn)
{
  /* Result of decoder.  */
  MT_INSN_TYPE itype;

  {
    mt_insn_word insn = base_insn;

    {
      unsigned int val = (((insn >> 24) & (255 << 0)));
      switch (val)
      {
      case 0 :
        if ((entire_insn & 0xff000fff) == 0x0)
          { itype = MT_INSN_ADD; mt_extract_sfmt_add (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MT_INSN_X_INVALID; mt_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
      case 1 : itype = MT_INSN_ADDI; mt_extract_sfmt_addi (this, current_cpu, pc, base_insn, entire_insn); goto done;
      case 2 :
        if ((entire_insn & 0xff000fff) == 0x2000000)
          { itype = MT_INSN_ADDU; mt_extract_sfmt_add (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MT_INSN_X_INVALID; mt_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
      case 3 : itype = MT_INSN_ADDUI; mt_extract_sfmt_addui (this, current_cpu, pc, base_insn, entire_insn); goto done;
      case 4 :
        if ((entire_insn & 0xff000fff) == 0x4000000)
          { itype = MT_INSN_SUB; mt_extract_sfmt_add (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MT_INSN_X_INVALID; mt_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
      case 5 : itype = MT_INSN_SUBI; mt_extract_sfmt_addi (this, current_cpu, pc, base_insn, entire_insn); goto done;
      case 6 :
        if ((entire_insn & 0xff000fff) == 0x6000000)
          { itype = MT_INSN_SUBU; mt_extract_sfmt_add (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MT_INSN_X_INVALID; mt_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
      case 7 : itype = MT_INSN_SUBUI; mt_extract_sfmt_addui (this, current_cpu, pc, base_insn, entire_insn); goto done;
      case 8 :
        if ((entire_insn & 0xff000fff) == 0x8000000)
          { itype = MT_INSN_MUL; mt_extract_sfmt_add (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MT_INSN_X_INVALID; mt_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
      case 9 : itype = MT_INSN_MULI; mt_extract_sfmt_addi (this, current_cpu, pc, base_insn, entire_insn); goto done;
      case 16 :
        if ((entire_insn & 0xff000fff) == 0x10000000)
          { itype = MT_INSN_AND; mt_extract_sfmt_add (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MT_INSN_X_INVALID; mt_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
      case 17 : itype = MT_INSN_ANDI; mt_extract_sfmt_addui (this, current_cpu, pc, base_insn, entire_insn); goto done;
      case 18 :
        {
          unsigned int val = (((insn >> 12) & (127 << 0)));
          switch (val)
          {
          case 0 :
            {
              unsigned int val = (((insn >> 19) & (31 << 0)));
              switch (val)
              {
              case 0 :
                if ((entire_insn & 0xffffffff) == 0x12000000)
                  { itype = MT_INSN_NOP; mt_extract_sfmt_nop (this, current_cpu, pc, base_insn, entire_insn); goto done; }
                itype = MT_INSN_X_INVALID; mt_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
              case 1 : /* fall through */
              case 2 : /* fall through */
              case 3 : /* fall through */
              case 4 : /* fall through */
              case 5 : /* fall through */
              case 6 : /* fall through */
              case 7 : /* fall through */
              case 8 : /* fall through */
              case 9 : /* fall through */
              case 10 : /* fall through */
              case 11 : /* fall through */
              case 12 : /* fall through */
              case 13 : /* fall through */
              case 14 : /* fall through */
              case 15 : /* fall through */
              case 16 : /* fall through */
              case 17 : /* fall through */
              case 18 : /* fall through */
              case 19 : /* fall through */
              case 20 : /* fall through */
              case 21 : /* fall through */
              case 22 : /* fall through */
              case 23 : /* fall through */
              case 24 : /* fall through */
              case 25 : /* fall through */
              case 26 : /* fall through */
              case 27 : /* fall through */
              case 28 : /* fall through */
              case 29 : /* fall through */
              case 30 : /* fall through */
              case 31 :
                if ((entire_insn & 0xff000fff) == 0x12000000)
                  { itype = MT_INSN_OR; mt_extract_sfmt_add (this, current_cpu, pc, base_insn, entire_insn); goto done; }
                itype = MT_INSN_X_INVALID; mt_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
              default : itype = MT_INSN_X_INVALID; mt_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
              }
            }
          case 1 : /* fall through */
          case 2 : /* fall through */
          case 3 : /* fall through */
          case 4 : /* fall through */
          case 5 : /* fall through */
          case 6 : /* fall through */
          case 7 : /* fall through */
          case 8 : /* fall through */
          case 9 : /* fall through */
          case 10 : /* fall through */
          case 11 : /* fall through */
          case 12 : /* fall through */
          case 13 : /* fall through */
          case 14 : /* fall through */
          case 15 : /* fall through */
          case 16 : /* fall through */
          case 17 : /* fall through */
          case 18 : /* fall through */
          case 19 : /* fall through */
          case 20 : /* fall through */
          case 21 : /* fall through */
          case 22 : /* fall through */
          case 23 : /* fall through */
          case 24 : /* fall through */
          case 25 : /* fall through */
          case 26 : /* fall through */
          case 27 : /* fall through */
          case 28 : /* fall through */
          case 29 : /* fall through */
          case 30 : /* fall through */
          case 31 : /* fall through */
          case 32 : /* fall through */
          case 33 : /* fall through */
          case 34 : /* fall through */
          case 35 : /* fall through */
          case 36 : /* fall through */
          case 37 : /* fall through */
          case 38 : /* fall through */
          case 39 : /* fall through */
          case 40 : /* fall through */
          case 41 : /* fall through */
          case 42 : /* fall through */
          case 43 : /* fall through */
          case 44 : /* fall through */
          case 45 : /* fall through */
          case 46 : /* fall through */
          case 47 : /* fall through */
          case 48 : /* fall through */
          case 49 : /* fall through */
          case 50 : /* fall through */
          case 51 : /* fall through */
          case 52 : /* fall through */
          case 53 : /* fall through */
          case 54 : /* fall through */
          case 55 : /* fall through */
          case 56 : /* fall through */
          case 57 : /* fall through */
          case 58 : /* fall through */
          case 59 : /* fall through */
          case 60 : /* fall through */
          case 61 : /* fall through */
          case 62 : /* fall through */
          case 63 : /* fall through */
          case 64 : /* fall through */
          case 65 : /* fall through */
          case 66 : /* fall through */
          case 67 : /* fall through */
          case 68 : /* fall through */
          case 69 : /* fall through */
          case 70 : /* fall through */
          case 71 : /* fall through */
          case 72 : /* fall through */
          case 73 : /* fall through */
          case 74 : /* fall through */
          case 75 : /* fall through */
          case 76 : /* fall through */
          case 77 : /* fall through */
          case 78 : /* fall through */
          case 79 : /* fall through */
          case 80 : /* fall through */
          case 81 : /* fall through */
          case 82 : /* fall through */
          case 83 : /* fall through */
          case 84 : /* fall through */
          case 85 : /* fall through */
          case 86 : /* fall through */
          case 87 : /* fall through */
          case 88 : /* fall through */
          case 89 : /* fall through */
          case 90 : /* fall through */
          case 91 : /* fall through */
          case 92 : /* fall through */
          case 93 : /* fall through */
          case 94 : /* fall through */
          case 95 : /* fall through */
          case 96 : /* fall through */
          case 97 : /* fall through */
          case 98 : /* fall through */
          case 99 : /* fall through */
          case 100 : /* fall through */
          case 101 : /* fall through */
          case 102 : /* fall through */
          case 103 : /* fall through */
          case 104 : /* fall through */
          case 105 : /* fall through */
          case 106 : /* fall through */
          case 107 : /* fall through */
          case 108 : /* fall through */
          case 109 : /* fall through */
          case 110 : /* fall through */
          case 111 : /* fall through */
          case 112 : /* fall through */
          case 113 : /* fall through */
          case 114 : /* fall through */
          case 115 : /* fall through */
          case 116 : /* fall through */
          case 117 : /* fall through */
          case 118 : /* fall through */
          case 119 : /* fall through */
          case 120 : /* fall through */
          case 121 : /* fall through */
          case 122 : /* fall through */
          case 123 : /* fall through */
          case 124 : /* fall through */
          case 125 : /* fall through */
          case 126 : /* fall through */
          case 127 :
            if ((entire_insn & 0xff000fff) == 0x12000000)
              { itype = MT_INSN_OR; mt_extract_sfmt_add (this, current_cpu, pc, base_insn, entire_insn); goto done; }
            itype = MT_INSN_X_INVALID; mt_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
          default : itype = MT_INSN_X_INVALID; mt_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
          }
        }
      case 19 : itype = MT_INSN_ORI; mt_extract_sfmt_addui (this, current_cpu, pc, base_insn, entire_insn); goto done;
      case 20 :
        if ((entire_insn & 0xff000fff) == 0x14000000)
          { itype = MT_INSN_XOR; mt_extract_sfmt_add (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MT_INSN_X_INVALID; mt_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
      case 21 : itype = MT_INSN_XORI; mt_extract_sfmt_addui (this, current_cpu, pc, base_insn, entire_insn); goto done;
      case 22 :
        if ((entire_insn & 0xff000fff) == 0x16000000)
          { itype = MT_INSN_NAND; mt_extract_sfmt_add (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MT_INSN_X_INVALID; mt_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
      case 23 : itype = MT_INSN_NANDI; mt_extract_sfmt_addui (this, current_cpu, pc, base_insn, entire_insn); goto done;
      case 24 :
        if ((entire_insn & 0xff000fff) == 0x18000000)
          { itype = MT_INSN_NOR; mt_extract_sfmt_add (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MT_INSN_X_INVALID; mt_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
      case 25 : itype = MT_INSN_NORI; mt_extract_sfmt_addui (this, current_cpu, pc, base_insn, entire_insn); goto done;
      case 26 :
        if ((entire_insn & 0xff000fff) == 0x1a000000)
          { itype = MT_INSN_XNOR; mt_extract_sfmt_add (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MT_INSN_X_INVALID; mt_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
      case 27 : itype = MT_INSN_XNORI; mt_extract_sfmt_addui (this, current_cpu, pc, base_insn, entire_insn); goto done;
      case 29 :
        if ((entire_insn & 0xfff00000) == 0x1d000000)
          { itype = MT_INSN_LDUI; mt_extract_sfmt_ldui (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MT_INSN_X_INVALID; mt_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
      case 32 :
        if ((entire_insn & 0xff000fff) == 0x20000000)
          { itype = MT_INSN_LSL; mt_extract_sfmt_add (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MT_INSN_X_INVALID; mt_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
      case 33 : itype = MT_INSN_LSLI; mt_extract_sfmt_addi (this, current_cpu, pc, base_insn, entire_insn); goto done;
      case 34 :
        if ((entire_insn & 0xff000fff) == 0x22000000)
          { itype = MT_INSN_LSR; mt_extract_sfmt_add (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MT_INSN_X_INVALID; mt_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
      case 35 : itype = MT_INSN_LSRI; mt_extract_sfmt_addi (this, current_cpu, pc, base_insn, entire_insn); goto done;
      case 36 :
        if ((entire_insn & 0xff000fff) == 0x24000000)
          { itype = MT_INSN_ASR; mt_extract_sfmt_add (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MT_INSN_X_INVALID; mt_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
      case 37 : itype = MT_INSN_ASRI; mt_extract_sfmt_addi (this, current_cpu, pc, base_insn, entire_insn); goto done;
      case 49 : itype = MT_INSN_BRLT; mt_extract_sfmt_brlt (this, current_cpu, pc, base_insn, entire_insn); goto done;
      case 51 : itype = MT_INSN_BRLE; mt_extract_sfmt_brlt (this, current_cpu, pc, base_insn, entire_insn); goto done;
      case 53 : itype = MT_INSN_BREQ; mt_extract_sfmt_brlt (this, current_cpu, pc, base_insn, entire_insn); goto done;
      case 55 :
        if ((entire_insn & 0xffff0000) == 0x37000000)
          { itype = MT_INSN_JMP; mt_extract_sfmt_jmp (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MT_INSN_X_INVALID; mt_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
      case 56 :
        if ((entire_insn & 0xff0f0fff) == 0x38000000)
          { itype = MT_INSN_JAL; mt_extract_sfmt_jal (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MT_INSN_X_INVALID; mt_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
      case 59 : itype = MT_INSN_BRNE; mt_extract_sfmt_brlt (this, current_cpu, pc, base_insn, entire_insn); goto done;
      case 61 :
        if ((entire_insn & 0xff0f0000) == 0x3d000000)
          { itype = MT_INSN_DBNZ; mt_extract_sfmt_dbnz (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MT_INSN_X_INVALID; mt_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
      case 65 : itype = MT_INSN_LDW; mt_extract_sfmt_ldw (this, current_cpu, pc, base_insn, entire_insn); goto done;
      case 67 : itype = MT_INSN_STW; mt_extract_sfmt_stw (this, current_cpu, pc, base_insn, entire_insn); goto done;
      case 96 :
        if ((entire_insn & 0xffffffff) == 0x60000000)
          { itype = MT_INSN_EI; mt_extract_sfmt_nop (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MT_INSN_X_INVALID; mt_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
      case 98 :
        if ((entire_insn & 0xffffffff) == 0x62000000)
          { itype = MT_INSN_DI; mt_extract_sfmt_nop (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MT_INSN_X_INVALID; mt_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
      case 100 :
        if ((entire_insn & 0xffff0fff) == 0x64000000)
          { itype = MT_INSN_SI; mt_extract_sfmt_si (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MT_INSN_X_INVALID; mt_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
      case 102 :
        if ((entire_insn & 0xff0fffff) == 0x66000000)
          { itype = MT_INSN_RETI; mt_extract_sfmt_reti (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MT_INSN_X_INVALID; mt_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
      case 104 :
        if ((entire_insn & 0xffffffff) == 0x68000000)
          { itype = MT_INSN_BREAK; mt_extract_sfmt_break (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MT_INSN_X_INVALID; mt_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
      case 106 :
        if ((entire_insn & 0xffffffff) == 0x6a000000)
          { itype = MT_INSN_IFLUSH; mt_extract_sfmt_nop (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MT_INSN_X_INVALID; mt_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
      case 140 : /* fall through */
      case 141 : /* fall through */
      case 142 : /* fall through */
      case 143 :
        if ((entire_insn & 0xfc00f000) == 0x8c000000)
          { itype = MT_INSN_FBCB; mt_extract_sfmt_nop (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MT_INSN_X_INVALID; mt_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
      case 144 : /* fall through */
      case 145 : /* fall through */
      case 146 : /* fall through */
      case 147 :
        if ((entire_insn & 0xfc00f000) == 0x90000000)
          { itype = MT_INSN_MFBCB; mt_extract_sfmt_nop (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MT_INSN_X_INVALID; mt_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
      case 148 : /* fall through */
      case 149 : /* fall through */
      case 150 : /* fall through */
      case 151 : itype = MT_INSN_FBCCI; mt_extract_sfmt_nop (this, current_cpu, pc, base_insn, entire_insn); goto done;
      case 152 : /* fall through */
      case 153 : /* fall through */
      case 154 : /* fall through */
      case 155 : itype = MT_INSN_FBRCI; mt_extract_sfmt_nop (this, current_cpu, pc, base_insn, entire_insn); goto done;
      case 156 : /* fall through */
      case 157 : /* fall through */
      case 158 : /* fall through */
      case 159 : itype = MT_INSN_FBCRI; mt_extract_sfmt_nop (this, current_cpu, pc, base_insn, entire_insn); goto done;
      case 160 : /* fall through */
      case 161 : /* fall through */
      case 162 : /* fall through */
      case 163 : itype = MT_INSN_FBRRI; mt_extract_sfmt_nop (this, current_cpu, pc, base_insn, entire_insn); goto done;
      case 164 : /* fall through */
      case 165 : /* fall through */
      case 166 : /* fall through */
      case 167 : itype = MT_INSN_MFBCCI; mt_extract_sfmt_nop (this, current_cpu, pc, base_insn, entire_insn); goto done;
      case 168 : /* fall through */
      case 169 : /* fall through */
      case 170 : /* fall through */
      case 171 : itype = MT_INSN_MFBRCI; mt_extract_sfmt_nop (this, current_cpu, pc, base_insn, entire_insn); goto done;
      case 172 : /* fall through */
      case 173 : /* fall through */
      case 174 : /* fall through */
      case 175 : itype = MT_INSN_MFBCRI; mt_extract_sfmt_nop (this, current_cpu, pc, base_insn, entire_insn); goto done;
      case 176 : /* fall through */
      case 177 : /* fall through */
      case 178 : /* fall through */
      case 179 : itype = MT_INSN_MFBRRI; mt_extract_sfmt_nop (this, current_cpu, pc, base_insn, entire_insn); goto done;
      case 180 : /* fall through */
      case 181 : /* fall through */
      case 182 : /* fall through */
      case 183 : itype = MT_INSN_FBCBDR; mt_extract_sfmt_nop (this, current_cpu, pc, base_insn, entire_insn); goto done;
      case 184 : /* fall through */
      case 185 : /* fall through */
      case 186 : /* fall through */
      case 187 :
        if ((entire_insn & 0xfcc08000) == 0xb8000000)
          { itype = MT_INSN_RCFBCB; mt_extract_sfmt_nop (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MT_INSN_X_INVALID; mt_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
      case 188 : /* fall through */
      case 189 : /* fall through */
      case 190 : /* fall through */
      case 191 :
        if ((entire_insn & 0xfcc08000) == 0xbc000000)
          { itype = MT_INSN_MRCFBCB; mt_extract_sfmt_nop (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MT_INSN_X_INVALID; mt_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
      case 192 : /* fall through */
      case 193 : /* fall through */
      case 194 : /* fall through */
      case 195 :
        if ((entire_insn & 0xfc000380) == 0xc0000000)
          { itype = MT_INSN_CBCAST; mt_extract_sfmt_nop (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MT_INSN_X_INVALID; mt_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
      case 196 : /* fall through */
      case 197 : /* fall through */
      case 198 : /* fall through */
      case 199 : itype = MT_INSN_DUPCBCAST; mt_extract_sfmt_nop (this, current_cpu, pc, base_insn, entire_insn); goto done;
      case 200 : /* fall through */
      case 201 : /* fall through */
      case 202 : /* fall through */
      case 203 : itype = MT_INSN_WFBI; mt_extract_sfmt_nop (this, current_cpu, pc, base_insn, entire_insn); goto done;
      case 204 :
        if ((entire_insn & 0xff000040) == 0xcc000000)
          { itype = MT_INSN_WFB; mt_extract_sfmt_nop (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MT_INSN_X_INVALID; mt_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
      case 208 : /* fall through */
      case 209 : /* fall through */
      case 210 : /* fall through */
      case 211 :
        if ((entire_insn & 0xfc080000) == 0xd0000000)
          { itype = MT_INSN_RCRISC; mt_extract_sfmt_nop (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MT_INSN_X_INVALID; mt_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
      case 212 : /* fall through */
      case 213 : /* fall through */
      case 214 : /* fall through */
      case 215 : itype = MT_INSN_FBCBINC; mt_extract_sfmt_nop (this, current_cpu, pc, base_insn, entire_insn); goto done;
      case 216 : /* fall through */
      case 217 : /* fall through */
      case 218 : /* fall through */
      case 219 : itype = MT_INSN_RCXMODE; mt_extract_sfmt_nop (this, current_cpu, pc, base_insn, entire_insn); goto done;
      case 220 : /* fall through */
      case 221 : /* fall through */
      case 222 : /* fall through */
      case 223 :
        if ((entire_insn & 0xfc008000) == 0xdc000000)
          { itype = MT_INSN_INTERLEAVER; mt_extract_sfmt_nop (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MT_INSN_X_INVALID; mt_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
      case 224 : /* fall through */
      case 225 : /* fall through */
      case 226 : /* fall through */
      case 227 : itype = MT_INSN_WFBINC; mt_extract_sfmt_nop (this, current_cpu, pc, base_insn, entire_insn); goto done;
      case 228 : /* fall through */
      case 229 : /* fall through */
      case 230 : /* fall through */
      case 231 : itype = MT_INSN_MWFBINC; mt_extract_sfmt_nop (this, current_cpu, pc, base_insn, entire_insn); goto done;
      case 232 : /* fall through */
      case 233 : /* fall through */
      case 234 : /* fall through */
      case 235 : itype = MT_INSN_WFBINCR; mt_extract_sfmt_nop (this, current_cpu, pc, base_insn, entire_insn); goto done;
      case 236 : /* fall through */
      case 237 : /* fall through */
      case 238 : /* fall through */
      case 239 : itype = MT_INSN_MWFBINCR; mt_extract_sfmt_nop (this, current_cpu, pc, base_insn, entire_insn); goto done;
      case 240 : /* fall through */
      case 241 : /* fall through */
      case 242 : /* fall through */
      case 243 : itype = MT_INSN_FBCBINCS; mt_extract_sfmt_nop (this, current_cpu, pc, base_insn, entire_insn); goto done;
      case 244 : /* fall through */
      case 245 : /* fall through */
      case 246 : /* fall through */
      case 247 : itype = MT_INSN_MFBCBINCS; mt_extract_sfmt_nop (this, current_cpu, pc, base_insn, entire_insn); goto done;
      case 248 : /* fall through */
      case 249 : /* fall through */
      case 250 : /* fall through */
      case 251 :
        if ((entire_insn & 0xfc008000) == 0xf8000000)
          { itype = MT_INSN_FBCBINCRS; mt_extract_sfmt_nop (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MT_INSN_X_INVALID; mt_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
      case 252 : /* fall through */
      case 253 : /* fall through */
      case 254 : /* fall through */
      case 255 :
        if ((entire_insn & 0xfc008000) == 0xfc000000)
          { itype = MT_INSN_MFBCBINCRS; mt_extract_sfmt_nop (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MT_INSN_X_INVALID; mt_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
      default : itype = MT_INSN_X_INVALID; mt_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
      }
    }

  }

  /* The instruction has been decoded and fields extracted.  */
  done:

  this->addr = pc;
  // FIXME: To be redone (to handle ISA variants).
  this->idesc = & mt_idesc::idesc_table[itype];
  // ??? record semantic handler?
  assert(this->idesc->sem_index == itype);
}

void
mt_extract_sfmt_empty (mt_scache* abuf, mt_cpu* current_cpu, PCADDR pc, mt_insn_word base_insn, mt_insn_word entire_insn){
    mt_insn_word insn = entire_insn;
#define FLD(f) abuf->fields.sfmt_empty.f


  /* Record the fields for the semantic handler.  */
  if (UNLIKELY(current_cpu->trace_extract_p))
    {
      current_cpu->trace_stream 
        << "0x" << hex << pc << dec << " (sfmt_empty)\t"
        << endl;
    }

#undef FLD
}

void
mt_extract_sfmt_add (mt_scache* abuf, mt_cpu* current_cpu, PCADDR pc, mt_insn_word base_insn, mt_insn_word entire_insn){
    mt_insn_word insn = entire_insn;
#define FLD(f) abuf->fields.sfmt_add.f
    UINT f_sr1;
    UINT f_sr2;
    UINT f_drrr;

    f_sr1 = EXTRACT_LSB0_UINT (insn, 32, 23, 4);
    f_sr2 = EXTRACT_LSB0_UINT (insn, 32, 19, 4);
    f_drrr = EXTRACT_LSB0_UINT (insn, 32, 15, 4);

  /* Record the fields for the semantic handler.  */
  FLD (f_sr1) = f_sr1;
  FLD (f_sr2) = f_sr2;
  FLD (f_drrr) = f_drrr;
  if (UNLIKELY(current_cpu->trace_extract_p))
    {
      current_cpu->trace_stream 
        << "0x" << hex << pc << dec << " (sfmt_add)\t"
        << " f_sr1:0x" << hex << f_sr1 << dec
        << " f_sr2:0x" << hex << f_sr2 << dec
        << " f_drrr:0x" << hex << f_drrr << dec
        << endl;
    }

#undef FLD
}

void
mt_extract_sfmt_addi (mt_scache* abuf, mt_cpu* current_cpu, PCADDR pc, mt_insn_word base_insn, mt_insn_word entire_insn){
    mt_insn_word insn = entire_insn;
#define FLD(f) abuf->fields.sfmt_addi.f
    UINT f_sr1;
    UINT f_dr;
    HI f_imm16s;

    f_sr1 = EXTRACT_LSB0_UINT (insn, 32, 23, 4);
    f_dr = EXTRACT_LSB0_UINT (insn, 32, 19, 4);
    f_imm16s = ((EXTRACT_LSB0_SINT (insn, 32, 15, 16)) + (0));

  /* Record the fields for the semantic handler.  */
  FLD (f_sr1) = f_sr1;
  FLD (f_imm16s) = f_imm16s;
  FLD (f_dr) = f_dr;
  if (UNLIKELY(current_cpu->trace_extract_p))
    {
      current_cpu->trace_stream 
        << "0x" << hex << pc << dec << " (sfmt_addi)\t"
        << " f_sr1:0x" << hex << f_sr1 << dec
        << " f_imm16s:0x" << hex << f_imm16s << dec
        << " f_dr:0x" << hex << f_dr << dec
        << endl;
    }

#undef FLD
}

void
mt_extract_sfmt_addui (mt_scache* abuf, mt_cpu* current_cpu, PCADDR pc, mt_insn_word base_insn, mt_insn_word entire_insn){
    mt_insn_word insn = entire_insn;
#define FLD(f) abuf->fields.sfmt_addui.f
    UINT f_sr1;
    UINT f_dr;
    UINT f_imm16u;

    f_sr1 = EXTRACT_LSB0_UINT (insn, 32, 23, 4);
    f_dr = EXTRACT_LSB0_UINT (insn, 32, 19, 4);
    f_imm16u = EXTRACT_LSB0_UINT (insn, 32, 15, 16);

  /* Record the fields for the semantic handler.  */
  FLD (f_sr1) = f_sr1;
  FLD (f_imm16u) = f_imm16u;
  FLD (f_dr) = f_dr;
  if (UNLIKELY(current_cpu->trace_extract_p))
    {
      current_cpu->trace_stream 
        << "0x" << hex << pc << dec << " (sfmt_addui)\t"
        << " f_sr1:0x" << hex << f_sr1 << dec
        << " f_imm16u:0x" << hex << f_imm16u << dec
        << " f_dr:0x" << hex << f_dr << dec
        << endl;
    }

#undef FLD
}

void
mt_extract_sfmt_nop (mt_scache* abuf, mt_cpu* current_cpu, PCADDR pc, mt_insn_word base_insn, mt_insn_word entire_insn){
    mt_insn_word insn = entire_insn;
#define FLD(f) abuf->fields.sfmt_empty.f


  /* Record the fields for the semantic handler.  */
  if (UNLIKELY(current_cpu->trace_extract_p))
    {
      current_cpu->trace_stream 
        << "0x" << hex << pc << dec << " (sfmt_nop)\t"
        << endl;
    }

#undef FLD
}

void
mt_extract_sfmt_ldui (mt_scache* abuf, mt_cpu* current_cpu, PCADDR pc, mt_insn_word base_insn, mt_insn_word entire_insn){
    mt_insn_word insn = entire_insn;
#define FLD(f) abuf->fields.sfmt_addui.f
    UINT f_dr;
    UINT f_imm16u;

    f_dr = EXTRACT_LSB0_UINT (insn, 32, 19, 4);
    f_imm16u = EXTRACT_LSB0_UINT (insn, 32, 15, 16);

  /* Record the fields for the semantic handler.  */
  FLD (f_imm16u) = f_imm16u;
  FLD (f_dr) = f_dr;
  if (UNLIKELY(current_cpu->trace_extract_p))
    {
      current_cpu->trace_stream 
        << "0x" << hex << pc << dec << " (sfmt_ldui)\t"
        << " f_imm16u:0x" << hex << f_imm16u << dec
        << " f_dr:0x" << hex << f_dr << dec
        << endl;
    }

#undef FLD
}

void
mt_extract_sfmt_brlt (mt_scache* abuf, mt_cpu* current_cpu, PCADDR pc, mt_insn_word base_insn, mt_insn_word entire_insn){
    mt_insn_word insn = entire_insn;
#define FLD(f) abuf->fields.sfmt_brlt.f
    UINT f_sr1;
    UINT f_sr2;
    HI f_imm16s;

    f_sr1 = EXTRACT_LSB0_UINT (insn, 32, 23, 4);
    f_sr2 = EXTRACT_LSB0_UINT (insn, 32, 19, 4);
    f_imm16s = ((EXTRACT_LSB0_SINT (insn, 32, 15, 16)) + (0));

  /* Record the fields for the semantic handler.  */
  FLD (f_sr1) = f_sr1;
  FLD (f_sr2) = f_sr2;
  FLD (f_imm16s) = f_imm16s;
  if (UNLIKELY(current_cpu->trace_extract_p))
    {
      current_cpu->trace_stream 
        << "0x" << hex << pc << dec << " (sfmt_brlt)\t"
        << " f_sr1:0x" << hex << f_sr1 << dec
        << " f_sr2:0x" << hex << f_sr2 << dec
        << " f_imm16s:0x" << hex << f_imm16s << dec
        << endl;
    }

#undef FLD
}

void
mt_extract_sfmt_jmp (mt_scache* abuf, mt_cpu* current_cpu, PCADDR pc, mt_insn_word base_insn, mt_insn_word entire_insn){
    mt_insn_word insn = entire_insn;
#define FLD(f) abuf->fields.sfmt_brlt.f
    HI f_imm16s;

    f_imm16s = ((EXTRACT_LSB0_SINT (insn, 32, 15, 16)) + (0));

  /* Record the fields for the semantic handler.  */
  FLD (f_imm16s) = f_imm16s;
  if (UNLIKELY(current_cpu->trace_extract_p))
    {
      current_cpu->trace_stream 
        << "0x" << hex << pc << dec << " (sfmt_jmp)\t"
        << " f_imm16s:0x" << hex << f_imm16s << dec
        << endl;
    }

#undef FLD
}

void
mt_extract_sfmt_jal (mt_scache* abuf, mt_cpu* current_cpu, PCADDR pc, mt_insn_word base_insn, mt_insn_word entire_insn){
    mt_insn_word insn = entire_insn;
#define FLD(f) abuf->fields.sfmt_add.f
    UINT f_sr1;
    UINT f_drrr;

    f_sr1 = EXTRACT_LSB0_UINT (insn, 32, 23, 4);
    f_drrr = EXTRACT_LSB0_UINT (insn, 32, 15, 4);

  /* Record the fields for the semantic handler.  */
  FLD (f_drrr) = f_drrr;
  FLD (f_sr1) = f_sr1;
  if (UNLIKELY(current_cpu->trace_extract_p))
    {
      current_cpu->trace_stream 
        << "0x" << hex << pc << dec << " (sfmt_jal)\t"
        << " f_drrr:0x" << hex << f_drrr << dec
        << " f_sr1:0x" << hex << f_sr1 << dec
        << endl;
    }

#undef FLD
}

void
mt_extract_sfmt_dbnz (mt_scache* abuf, mt_cpu* current_cpu, PCADDR pc, mt_insn_word base_insn, mt_insn_word entire_insn){
    mt_insn_word insn = entire_insn;
#define FLD(f) abuf->fields.sfmt_brlt.f
    UINT f_sr1;
    HI f_imm16s;

    f_sr1 = EXTRACT_LSB0_UINT (insn, 32, 23, 4);
    f_imm16s = ((EXTRACT_LSB0_SINT (insn, 32, 15, 16)) + (0));

  /* Record the fields for the semantic handler.  */
  FLD (f_sr1) = f_sr1;
  FLD (f_imm16s) = f_imm16s;
  if (UNLIKELY(current_cpu->trace_extract_p))
    {
      current_cpu->trace_stream 
        << "0x" << hex << pc << dec << " (sfmt_dbnz)\t"
        << " f_sr1:0x" << hex << f_sr1 << dec
        << " f_imm16s:0x" << hex << f_imm16s << dec
        << endl;
    }

#undef FLD
}

void
mt_extract_sfmt_si (mt_scache* abuf, mt_cpu* current_cpu, PCADDR pc, mt_insn_word base_insn, mt_insn_word entire_insn){
    mt_insn_word insn = entire_insn;
#define FLD(f) abuf->fields.sfmt_add.f
    UINT f_drrr;

    f_drrr = EXTRACT_LSB0_UINT (insn, 32, 15, 4);

  /* Record the fields for the semantic handler.  */
  FLD (f_drrr) = f_drrr;
  if (UNLIKELY(current_cpu->trace_extract_p))
    {
      current_cpu->trace_stream 
        << "0x" << hex << pc << dec << " (sfmt_si)\t"
        << " f_drrr:0x" << hex << f_drrr << dec
        << endl;
    }

#undef FLD
}

void
mt_extract_sfmt_reti (mt_scache* abuf, mt_cpu* current_cpu, PCADDR pc, mt_insn_word base_insn, mt_insn_word entire_insn){
    mt_insn_word insn = entire_insn;
#define FLD(f) abuf->fields.sfmt_brlt.f
    UINT f_sr1;

    f_sr1 = EXTRACT_LSB0_UINT (insn, 32, 23, 4);

  /* Record the fields for the semantic handler.  */
  FLD (f_sr1) = f_sr1;
  if (UNLIKELY(current_cpu->trace_extract_p))
    {
      current_cpu->trace_stream 
        << "0x" << hex << pc << dec << " (sfmt_reti)\t"
        << " f_sr1:0x" << hex << f_sr1 << dec
        << endl;
    }

#undef FLD
}

void
mt_extract_sfmt_ldw (mt_scache* abuf, mt_cpu* current_cpu, PCADDR pc, mt_insn_word base_insn, mt_insn_word entire_insn){
    mt_insn_word insn = entire_insn;
#define FLD(f) abuf->fields.sfmt_addi.f
    UINT f_sr1;
    UINT f_dr;
    HI f_imm16s;

    f_sr1 = EXTRACT_LSB0_UINT (insn, 32, 23, 4);
    f_dr = EXTRACT_LSB0_UINT (insn, 32, 19, 4);
    f_imm16s = ((EXTRACT_LSB0_SINT (insn, 32, 15, 16)) + (0));

  /* Record the fields for the semantic handler.  */
  FLD (f_sr1) = f_sr1;
  FLD (f_imm16s) = f_imm16s;
  FLD (f_dr) = f_dr;
  if (UNLIKELY(current_cpu->trace_extract_p))
    {
      current_cpu->trace_stream 
        << "0x" << hex << pc << dec << " (sfmt_ldw)\t"
        << " f_sr1:0x" << hex << f_sr1 << dec
        << " f_imm16s:0x" << hex << f_imm16s << dec
        << " f_dr:0x" << hex << f_dr << dec
        << endl;
    }

#undef FLD
}

void
mt_extract_sfmt_stw (mt_scache* abuf, mt_cpu* current_cpu, PCADDR pc, mt_insn_word base_insn, mt_insn_word entire_insn){
    mt_insn_word insn = entire_insn;
#define FLD(f) abuf->fields.sfmt_brlt.f
    UINT f_sr1;
    UINT f_sr2;
    HI f_imm16s;

    f_sr1 = EXTRACT_LSB0_UINT (insn, 32, 23, 4);
    f_sr2 = EXTRACT_LSB0_UINT (insn, 32, 19, 4);
    f_imm16s = ((EXTRACT_LSB0_SINT (insn, 32, 15, 16)) + (0));

  /* Record the fields for the semantic handler.  */
  FLD (f_sr1) = f_sr1;
  FLD (f_sr2) = f_sr2;
  FLD (f_imm16s) = f_imm16s;
  if (UNLIKELY(current_cpu->trace_extract_p))
    {
      current_cpu->trace_stream 
        << "0x" << hex << pc << dec << " (sfmt_stw)\t"
        << " f_sr1:0x" << hex << f_sr1 << dec
        << " f_sr2:0x" << hex << f_sr2 << dec
        << " f_imm16s:0x" << hex << f_imm16s << dec
        << endl;
    }

#undef FLD
}

void
mt_extract_sfmt_break (mt_scache* abuf, mt_cpu* current_cpu, PCADDR pc, mt_insn_word base_insn, mt_insn_word entire_insn){
    mt_insn_word insn = entire_insn;
#define FLD(f) abuf->fields.sfmt_empty.f


  /* Record the fields for the semantic handler.  */
  if (UNLIKELY(current_cpu->trace_extract_p))
    {
      current_cpu->trace_stream 
        << "0x" << hex << pc << dec << " (sfmt_break)\t"
        << endl;
    }

#undef FLD
}

@


1.5
log
@Regenerate cgen files, update copyright year.
@
text
@d622 1
a622 1
#define FLD(f) abuf->fields.fmt_empty.f
d726 1
a726 1
#define FLD(f) abuf->fields.fmt_empty.f
d968 1
a968 1
#define FLD(f) abuf->fields.fmt_empty.f
@


1.4
log
@	* cgen-engine.h (EXTRACT_MSB0_SINT): Renamed from EXTRACT_MSB0_INT.
	(EXTRACT_LSB0_SINT): Renamed from EXTRACT_LSB0_INT.
	(EXTRACT_MSB0_LGSINT, EXTRACT_MSB0_LGUINT): Define.
	(EXTRACT_LSB0_LGSINT, EXTRACT_LSB0_LGUINT): Define.
plus regenerate cgen files.
@
text
@d5 1
a5 1
Copyright (C) 2000-2009 Red Hat, Inc.
@


1.3
log
@	* cgen-cpu.h: Update for new location of cgen/bitset.h.
	* tracedis.h: Ditto.

Plus update generated files to pick up two cgen changes:
1)
	* desc-cpu.scm (/gen-hash-defines): Remove #include of cgen-bitset.h.
	* sid-cpu.scm (cgen-desc.h): Update location of cgen's bitset.h.
2)
	* utils-sim.scm (/gen-set-itype-and-extract): New function.
	(/gen-bracketed-set-itype-and-extract): New function.
	(/gen-decode-default-entry): Rewrite.
	(/table-guts-to-mask, /all-opcode-bits-used?): New functions.
	(/gen-decode-insn-entry): New arg table-guts-thus-far, all callers
	updated.  Don't unnecessarily emit check for whether all opcode bits
	have been examined.
	(/gen-decode-expr-set-itype): Delete.
	(/gen-decode-expr-entry): Update.
	(/gen-decode-table-entry): New arg table-guts-thus-far, all callers
	updated.  Keep track of decoder tables used thus far.
	(/gen-decoder-switch): Ditto.
@
text
@d675 1
a675 1
    f_imm16s = ((EXTRACT_LSB0_INT (insn, 32, 15, 16)) + (0));
d775 1
a775 1
    f_imm16s = ((EXTRACT_LSB0_INT (insn, 32, 15, 16)) + (0));
d800 1
a800 1
    f_imm16s = ((EXTRACT_LSB0_INT (insn, 32, 15, 16)) + (0));
d848 1
a848 1
    f_imm16s = ((EXTRACT_LSB0_INT (insn, 32, 15, 16)) + (0));
d917 1
a917 1
    f_imm16s = ((EXTRACT_LSB0_INT (insn, 32, 15, 16)) + (0));
d946 1
a946 1
    f_imm16s = ((EXTRACT_LSB0_INT (insn, 32, 15, 16)) + (0));
@


1.2
log
@	Second part of ms1 to mt renaming.
	* bfd/archures.c (bfd_arch_mt): Renamed.
	(bfd_mt_arch): Renamed.
	(bfd_archures_list): Adjusted.
	* bfd/bfd-in2.h: Rebuilt.
	* bfd/config.bfd (mt): Remove special case targ_archs.
	(mt-*-elf): Rename bfd_elf32_mt_vec.
	* bfd/configure: Rebuilt.
	* bfd/configure.in (bfd_elf32_mt_vec): Renamed.
	(selarchs) Remove mt special case.
	* bfd/cpu-mt.c (arch_info_struct): Adjust.
	(bfd_mt_arch): Renamed, adjust.
	* bfd/elf32-mt.c (mt_reloc_type_lookup, mt_info_to_howto_rela,
	mt_elf_relocate_hi16, mt_final_link_relocate, mt_relocate_section,
	mt_elf_howto_table): Renamed, adjusted.
	(mt_elf_gc_mark_hook, mt_elf_gc_sweep_hook, mt_elf_check_relocs,
	elf32_mt_machine, mt_elf_object_p, mt_elf_set_private_flags,
	mt_elf_copy_private_bfd_data, mt_elf_merge_private_bfd_data,
	mt_elf_print_private_bfd_data): Renamed, adjusted.
	(TARGET_BIG_SYM, TARGET_BIG_NAME, ELF_ARCH, ELF_MACHINE_CODE,
	ELF_MAXPAGESIZE, elf_info_to_howto, elf_backend_relocate_section,
	bfd_elf32_bfd_reloc_type_lookup, elf_backend_gc_mark_hook,
	elf_backend_gc_sweep_hook, elf_backend_check_relocs,
	eld_backend_object_p, bfd_elf32_bfd_set_private_flags,
	bfd_elf32_bfd_copy_private_bfd_data,
	bfd_elf32_bfd_merge_private_bfd_data,
	bfd_elf32_bfd_print_private_bfd_data): Adjusted.
	* bfd/libbfd.h: Regenerated.
	* bfd/reloc.c (BFD_RELOC_MT_PC16, BFD_RELOC_MT_HI16,
	BFD_RELOC_MT_LO16, BFD_RELOC_MT_GNU_VTINHERIT,
	BFD_RELOC_MT_GNU_VTENTRY, BFD_RELOC_MT_PCINSN8): Renamed.
	* bfd/targets.c (bfd_elf32_mt_vec): Renamed.
	(_bfd_target_vector): Adjusted.
	* binutils/readelf.c (guess_is_rela): Use EM_MT.
	(dump_relocations, get_machine_name): Adjust.

	* cpu/mt.cpu (define-arch, define-isa): Set name to mt.
	(define-mach): Adjust.
	* cpu/mt.opc (CGEN_ASM_HASH): Update.
	(mt_asm_hash, mt_cgen_insn_supported): Renamed.
	(parse_loopsize, parse_imm16): Adjust.

	* gas/configure: Rebuilt.
	* gas/configure.in (mt): Remove special case.
	* gas/config/tc-mt.c (opcodes/mt-desc.h, opcodes/mt-opc.h): Change
	#includes.
	(mt_insn, mt_mach, mt_mach_bitmask, mt_flags, mt_architectures):
	Rename, adjust.
	(md_parse_option, md_show_usage, md_begin, md_assemble,
	md_cgen_lookup_reloc, md_atof): Adjust.
	(mt_force_relocation, mt_apply_fix, mt_fix_adjustable): Rename, adjust.
	* gas/config/tc-mt.h (TC_MT): Rename.
	(LISTING_HEADER, TARGET_ARCH, TARGET_FORMAT): Adjust.
	(md_apply_fix): Adjust.
	(mt_apply_fix, mt_fix_adjustable, mt_force_relocation): Rename.
	(TC_FORCE_RELOCATION, tc_fix_adjustable): Adjust.

	* gdb/mt-tdep.c (mt_arch_constants, mt_gdb_regnums): Rename, adjust.
	(mt_register_name, mt_register_type, mt_register_reggroup_p,
	mt_return_value, mt_skip_prologue, mt_breapoint_from_pc,
	mt_pseudo_register_read, mt_pseudo_register_write, mt_frame_align,
	mt_registers_info, mt_push_dummy_call, mt_unwind_cache,
	mt_frame_unwind_cache, mt_unwind_pc, mt_unwind_dummy_id,
	mt_frame_this_id, mt_frame_prev_register, mt_frame_base_address,
	mt_frame_unwind, mt_frame_sniffer, mt_frame_base, mt_gdbarch_init,
	_initialize_mt_tdep): Rename & adjust.

	* include/dis-asm.h (print_insn_mt): Renamed.

	* include/elf/common.h (EM_MT): Renamed.
	* include/elf/mt.h: Rename relocs, cpu & other defines.

	* ld/emulparams/elf32mt.sh (ARCH, OUTPUT_FORMAT): Adjust.

	* opcodes/Makefile.am (HFILES, CFILES, ALL_MACHINES): Adjust.
	(stamp-mt): Adjust rule.
	(mt-asm.lo, mt-desc.lo, mt-dis.lo, mt-ibld.lo, mt-opc.lo): Rename &
	adjust.
	* opcodes/Makefile.in: Rebuilt.
	* opcodes/configure: Rebuilt.
	* opcodes/configure.in (bfd_mt_arch): Rename & adjust.
	* opcodes/disassemble.c (ARCH_mt): Renamed.
	(disassembler): Adjust.
	* opcodes/mt-asm.c: Renamed, rebuilt.
	* opcodes/mt-desc.c: Renamed, rebuilt.
	* opcodes/mt-desc.h: Renamed, rebuilt.
	* opcodes/mt-dis.c: Renamed, rebuilt.
	* opcodes/mt-ibld.c: Renamed, rebuilt.
	* opcodes/mt-opc.c: Renamed, rebuilt.
	* opcodes/mt-opc.h: Renamed, rebuilt.

	* sid/Makefile.in: Rebuilt.
	* sid/aclocal.m4: Rebuilt.
	* sid/configure: Rebuilt.
	* sid/sid.spec: Adjust.
	* sid/bsp/Makefile.am: Adjust.
	* sid/bsp/Makefile.in: Rebuilt.
	* sid/bsp/aclocal.m4: Rebuilt.
	* sid/bsp/configrun-sid.in: Adjust.
	* sid/bsp/pregen/Makefile.in: Rebuilt.
	* sid/bsp/pregen/mt-gdb.conf: Renamed & rebuilt.
	* sid/bsp/pregen/mt-gloss.conf: Renamed & rebuilt.
	* sid/bsp/pregen/pregen-configs.in: Adjust.
	* sid/component/aclocal.m4: Rebuilt.
	* sid/component/configure: Rebuilt.
	* sid/component/tconfig.in: Adjust.
	* sid/component/bochs/aclocal.m4: Rebuilt.
	* sid/component/cache/Makefile.in: Rebuilt.
	* sid/component/cgen-cpu/Makefile.in: Rebuilt.
	* sid/component/cgen-cpu/aclocal.m4: Rebuilt.
	* sid/component/cgen-cpu/compCGEN.cxx: Adjust.
	* sid/component/cgen-cpu/configure: Rebuilt.
	* sid/component/cgen-cpu/configure.in: Rebult.
	* sid/component/cgen-cpu/mt/Makefile.am: Adjust.
	* sid/component/cgen-cpu/mt/Makefile.in: Rebuilt.
	* sid/component/cgen-cpu/mt/hw-cpu-mt.txt: Adjust.
	* sid/component/cgen-cpu/mt/mt-cpu.h: Rebuilt.
	* sid/component/cgen-cpu/mt/mt-decode.cxx: Rebuilt.
	* sid/component/cgen-cpu/mt/mt-decode.h: Rebuilt.
	* sid/component/cgen-cpu/mt/mt-defs.h: Rebuilt.
	* sid/component/cgen-cpu/mt/mt-desc.h: Rebuilt.
	* sid/component/cgen-cpu/mt/mt-sem.cxx: Rebuilt.
	* sid/component/cgen-cpu/mt/mt-write.cxx: Rebuilt.
	* sid/component/cgen-cpu/mt/mt.cxx: Adjust.
	* sid/component/cgen-cpu/mt/mt.h: Adjust.
	* sid/component/consoles/Makefile.in: Rebuilt.
	* sid/component/families/aclocal.m4: Rebuilt.
	* sid/component/families/configure: Rebuilt.
	* sid/component/gdb/Makefile.in: Rebuilt.
	* sid/component/gloss/Makefile.in: Rebuilt.
	* sid/component/glue/Makefile.in: Rebuilt.
	* sid/component/ide/Makefile.in: Rebuilt.
	* sid/component/interrupt/Makefile.in: Rebuilt.
	* sid/component/lcd/Makefile.in: Rebuilt.
	* sid/component/lcd/testsuite/Makefile.in: Rebuilt.
	* sid/component/loader/Makefile.am: Rebuilt.
	* sid/component/loader/Makefile.in: Rebuilt.
	* sid/component/mapper/Makefile.in: Rebuilt.
	* sid/component/mapper/testsuite/Makefile.in: Rebuilt.
	* sid/component/memory/Makefile.in: Rebuilt.
	* sid/component/mmu/Makefile.in: Rebuilt.
	* sid/component/parport/Makefile.in: Rebuilt.
	* sid/component/profiling/Makefile.in: Rebuilt.
	* sid/component/rtc/Makefile.in: Rebuilt.
	* sid/component/sched/Makefile.in: Rebuilt.
	* sid/component/testsuite/Makefile.in: Rebuilt.
	* sid/component/timers/aclocal.m4: Rebuilt.
	* sid/component/timers/configure: Rebuilt.
	* sid/component/uart/Makefile.in: Rebuilt.
	* sid/component/uart/testsuite/Makefile.in: Rebuilt.
	* sid/config/config.sub: Adjust.
	* sid/config/info.tcl.in: Adjust.
	* sid/config/sidtargets.m4: Adjust.
	* sid/doc/Makefile.in: Rebuilt.
	* sid/main/dynamic/Makefile.am: Rebuilt.
	* sid/main/dynamic/Makefile.in: Rebuilt.
	* sid/main/dynamic/aclocal.m4: Rebuilt.
	* sid/main/dynamic/configure: Rebuilt.
@
text
@d5 1
a5 1
Copyright (C) 2000-2005 Red Hat, Inc.
a123 2
mt_extract_sfmt_addu (mt_scache* abuf, mt_cpu* current_cpu, PCADDR pc, mt_insn_word base_insn, mt_insn_word entire_insn);
static void
a127 2
mt_extract_sfmt_andi (mt_scache* abuf, mt_cpu* current_cpu, PCADDR pc, mt_insn_word base_insn, mt_insn_word entire_insn);
static void
a131 2
mt_extract_sfmt_lsl (mt_scache* abuf, mt_cpu* current_cpu, PCADDR pc, mt_insn_word base_insn, mt_insn_word entire_insn);
static void
d168 1
a168 4
      case 1 :
        if ((entire_insn & 0xff000000) == 0x1000000)
          { itype = MT_INSN_ADDI; mt_extract_sfmt_addi (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MT_INSN_X_INVALID; mt_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
d171 1
a171 5
          { itype = MT_INSN_ADDU; mt_extract_sfmt_addu (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MT_INSN_X_INVALID; mt_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
      case 3 :
        if ((entire_insn & 0xff000000) == 0x3000000)
          { itype = MT_INSN_ADDUI; mt_extract_sfmt_addui (this, current_cpu, pc, base_insn, entire_insn); goto done; }
d173 1
d178 1
a178 4
      case 5 :
        if ((entire_insn & 0xff000000) == 0x5000000)
          { itype = MT_INSN_SUBI; mt_extract_sfmt_addi (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MT_INSN_X_INVALID; mt_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
d181 1
a181 5
          { itype = MT_INSN_SUBU; mt_extract_sfmt_addu (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MT_INSN_X_INVALID; mt_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
      case 7 :
        if ((entire_insn & 0xff000000) == 0x7000000)
          { itype = MT_INSN_SUBUI; mt_extract_sfmt_addui (this, current_cpu, pc, base_insn, entire_insn); goto done; }
d183 1
d188 1
a188 4
      case 9 :
        if ((entire_insn & 0xff000000) == 0x9000000)
          { itype = MT_INSN_MULI; mt_extract_sfmt_addi (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MT_INSN_X_INVALID; mt_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
d193 1
a193 4
      case 17 :
        if ((entire_insn & 0xff000000) == 0x11000000)
          { itype = MT_INSN_ANDI; mt_extract_sfmt_andi (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MT_INSN_X_INVALID; mt_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
d378 1
a378 4
      case 19 :
        if ((entire_insn & 0xff000000) == 0x13000000)
          { itype = MT_INSN_ORI; mt_extract_sfmt_andi (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MT_INSN_X_INVALID; mt_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
d383 1
a383 4
      case 21 :
        if ((entire_insn & 0xff000000) == 0x15000000)
          { itype = MT_INSN_XORI; mt_extract_sfmt_andi (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MT_INSN_X_INVALID; mt_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
d388 1
a388 4
      case 23 :
        if ((entire_insn & 0xff000000) == 0x17000000)
          { itype = MT_INSN_NANDI; mt_extract_sfmt_andi (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MT_INSN_X_INVALID; mt_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
d393 1
a393 4
      case 25 :
        if ((entire_insn & 0xff000000) == 0x19000000)
          { itype = MT_INSN_NORI; mt_extract_sfmt_andi (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MT_INSN_X_INVALID; mt_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
d398 1
a398 4
      case 27 :
        if ((entire_insn & 0xff000000) == 0x1b000000)
          { itype = MT_INSN_XNORI; mt_extract_sfmt_andi (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MT_INSN_X_INVALID; mt_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
d405 1
a405 5
          { itype = MT_INSN_LSL; mt_extract_sfmt_lsl (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MT_INSN_X_INVALID; mt_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
      case 33 :
        if ((entire_insn & 0xff000000) == 0x21000000)
          { itype = MT_INSN_LSLI; mt_extract_sfmt_addi (this, current_cpu, pc, base_insn, entire_insn); goto done; }
d407 1
d410 1
a410 5
          { itype = MT_INSN_LSR; mt_extract_sfmt_lsl (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MT_INSN_X_INVALID; mt_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
      case 35 :
        if ((entire_insn & 0xff000000) == 0x23000000)
          { itype = MT_INSN_LSRI; mt_extract_sfmt_addi (this, current_cpu, pc, base_insn, entire_insn); goto done; }
d412 1
d415 1
a415 17
          { itype = MT_INSN_ASR; mt_extract_sfmt_lsl (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MT_INSN_X_INVALID; mt_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
      case 37 :
        if ((entire_insn & 0xff000000) == 0x25000000)
          { itype = MT_INSN_ASRI; mt_extract_sfmt_addi (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MT_INSN_X_INVALID; mt_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
      case 49 :
        if ((entire_insn & 0xff000000) == 0x31000000)
          { itype = MT_INSN_BRLT; mt_extract_sfmt_brlt (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MT_INSN_X_INVALID; mt_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
      case 51 :
        if ((entire_insn & 0xff000000) == 0x33000000)
          { itype = MT_INSN_BRLE; mt_extract_sfmt_brlt (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MT_INSN_X_INVALID; mt_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
      case 53 :
        if ((entire_insn & 0xff000000) == 0x35000000)
          { itype = MT_INSN_BREQ; mt_extract_sfmt_brlt (this, current_cpu, pc, base_insn, entire_insn); goto done; }
d417 4
d429 1
a429 4
      case 59 :
        if ((entire_insn & 0xff000000) == 0x3b000000)
          { itype = MT_INSN_BRNE; mt_extract_sfmt_brlt (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MT_INSN_X_INVALID; mt_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
d434 2
a435 8
      case 65 :
        if ((entire_insn & 0xff000000) == 0x41000000)
          { itype = MT_INSN_LDW; mt_extract_sfmt_ldw (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MT_INSN_X_INVALID; mt_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
      case 67 :
        if ((entire_insn & 0xff000000) == 0x43000000)
          { itype = MT_INSN_STW; mt_extract_sfmt_stw (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MT_INSN_X_INVALID; mt_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
d477 1
a477 4
      case 151 :
        if ((entire_insn & 0xfc000000) == 0x94000000)
          { itype = MT_INSN_FBCCI; mt_extract_sfmt_nop (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MT_INSN_X_INVALID; mt_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
d481 1
a481 4
      case 155 :
        if ((entire_insn & 0xfc000000) == 0x98000000)
          { itype = MT_INSN_FBRCI; mt_extract_sfmt_nop (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MT_INSN_X_INVALID; mt_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
d485 1
a485 4
      case 159 :
        if ((entire_insn & 0xfc000000) == 0x9c000000)
          { itype = MT_INSN_FBCRI; mt_extract_sfmt_nop (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MT_INSN_X_INVALID; mt_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
d489 1
a489 4
      case 163 :
        if ((entire_insn & 0xfc000000) == 0xa0000000)
          { itype = MT_INSN_FBRRI; mt_extract_sfmt_nop (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MT_INSN_X_INVALID; mt_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
d493 1
a493 4
      case 167 :
        if ((entire_insn & 0xfc000000) == 0xa4000000)
          { itype = MT_INSN_MFBCCI; mt_extract_sfmt_nop (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MT_INSN_X_INVALID; mt_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
d497 1
a497 4
      case 171 :
        if ((entire_insn & 0xfc000000) == 0xa8000000)
          { itype = MT_INSN_MFBRCI; mt_extract_sfmt_nop (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MT_INSN_X_INVALID; mt_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
d501 1
a501 4
      case 175 :
        if ((entire_insn & 0xfc000000) == 0xac000000)
          { itype = MT_INSN_MFBCRI; mt_extract_sfmt_nop (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MT_INSN_X_INVALID; mt_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
d505 1
a505 4
      case 179 :
        if ((entire_insn & 0xfc000000) == 0xb0000000)
          { itype = MT_INSN_MFBRRI; mt_extract_sfmt_nop (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MT_INSN_X_INVALID; mt_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
d509 1
a509 4
      case 183 :
        if ((entire_insn & 0xfc000000) == 0xb4000000)
          { itype = MT_INSN_FBCBDR; mt_extract_sfmt_nop (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MT_INSN_X_INVALID; mt_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
d534 1
a534 4
      case 199 :
        if ((entire_insn & 0xfc000000) == 0xc4000000)
          { itype = MT_INSN_DUPCBCAST; mt_extract_sfmt_nop (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MT_INSN_X_INVALID; mt_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
d538 1
a538 4
      case 203 :
        if ((entire_insn & 0xfc000000) == 0xc8000000)
          { itype = MT_INSN_WFBI; mt_extract_sfmt_nop (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MT_INSN_X_INVALID; mt_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
d553 1
a553 4
      case 215 :
        if ((entire_insn & 0xfc000000) == 0xd4000000)
          { itype = MT_INSN_FBCBINC; mt_extract_sfmt_nop (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MT_INSN_X_INVALID; mt_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
d557 1
a557 4
      case 219 :
        if ((entire_insn & 0xfc000000) == 0xd8000000)
          { itype = MT_INSN_RCXMODE; mt_extract_sfmt_nop (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MT_INSN_X_INVALID; mt_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
d568 1
a568 4
      case 227 :
        if ((entire_insn & 0xfc000000) == 0xe0000000)
          { itype = MT_INSN_WFBINC; mt_extract_sfmt_nop (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MT_INSN_X_INVALID; mt_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
d572 1
a572 4
      case 231 :
        if ((entire_insn & 0xfc000000) == 0xe4000000)
          { itype = MT_INSN_MWFBINC; mt_extract_sfmt_nop (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MT_INSN_X_INVALID; mt_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
d576 1
a576 4
      case 235 :
        if ((entire_insn & 0xfc000000) == 0xe8000000)
          { itype = MT_INSN_WFBINCR; mt_extract_sfmt_nop (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MT_INSN_X_INVALID; mt_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
d580 1
a580 4
      case 239 :
        if ((entire_insn & 0xfc000000) == 0xec000000)
          { itype = MT_INSN_MWFBINCR; mt_extract_sfmt_nop (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MT_INSN_X_INVALID; mt_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
d584 1
a584 4
      case 243 :
        if ((entire_insn & 0xfc000000) == 0xf0000000)
          { itype = MT_INSN_FBCBINCS; mt_extract_sfmt_nop (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MT_INSN_X_INVALID; mt_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
d588 1
a588 4
      case 247 :
        if ((entire_insn & 0xfc000000) == 0xf4000000)
          { itype = MT_INSN_MFBCBINCS; mt_extract_sfmt_nop (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MT_INSN_X_INVALID; mt_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
a665 29
mt_extract_sfmt_addu (mt_scache* abuf, mt_cpu* current_cpu, PCADDR pc, mt_insn_word base_insn, mt_insn_word entire_insn){
    mt_insn_word insn = entire_insn;
#define FLD(f) abuf->fields.sfmt_add.f
    UINT f_sr1;
    UINT f_sr2;
    UINT f_drrr;

    f_sr1 = EXTRACT_LSB0_UINT (insn, 32, 23, 4);
    f_sr2 = EXTRACT_LSB0_UINT (insn, 32, 19, 4);
    f_drrr = EXTRACT_LSB0_UINT (insn, 32, 15, 4);

  /* Record the fields for the semantic handler.  */
  FLD (f_sr1) = f_sr1;
  FLD (f_sr2) = f_sr2;
  FLD (f_drrr) = f_drrr;
  if (UNLIKELY(current_cpu->trace_extract_p))
    {
      current_cpu->trace_stream 
        << "0x" << hex << pc << dec << " (sfmt_addu)\t"
        << " f_sr1:0x" << hex << f_sr1 << dec
        << " f_sr2:0x" << hex << f_sr2 << dec
        << " f_drrr:0x" << hex << f_drrr << dec
        << endl;
    }

#undef FLD
}

void
a723 29
mt_extract_sfmt_andi (mt_scache* abuf, mt_cpu* current_cpu, PCADDR pc, mt_insn_word base_insn, mt_insn_word entire_insn){
    mt_insn_word insn = entire_insn;
#define FLD(f) abuf->fields.sfmt_addui.f
    UINT f_sr1;
    UINT f_dr;
    UINT f_imm16u;

    f_sr1 = EXTRACT_LSB0_UINT (insn, 32, 23, 4);
    f_dr = EXTRACT_LSB0_UINT (insn, 32, 19, 4);
    f_imm16u = EXTRACT_LSB0_UINT (insn, 32, 15, 16);

  /* Record the fields for the semantic handler.  */
  FLD (f_sr1) = f_sr1;
  FLD (f_imm16u) = f_imm16u;
  FLD (f_dr) = f_dr;
  if (UNLIKELY(current_cpu->trace_extract_p))
    {
      current_cpu->trace_stream 
        << "0x" << hex << pc << dec << " (sfmt_andi)\t"
        << " f_sr1:0x" << hex << f_sr1 << dec
        << " f_imm16u:0x" << hex << f_imm16u << dec
        << " f_dr:0x" << hex << f_dr << dec
        << endl;
    }

#undef FLD
}

void
a765 29
mt_extract_sfmt_lsl (mt_scache* abuf, mt_cpu* current_cpu, PCADDR pc, mt_insn_word base_insn, mt_insn_word entire_insn){
    mt_insn_word insn = entire_insn;
#define FLD(f) abuf->fields.sfmt_add.f
    UINT f_sr1;
    UINT f_sr2;
    UINT f_drrr;

    f_sr1 = EXTRACT_LSB0_UINT (insn, 32, 23, 4);
    f_sr2 = EXTRACT_LSB0_UINT (insn, 32, 19, 4);
    f_drrr = EXTRACT_LSB0_UINT (insn, 32, 15, 4);

  /* Record the fields for the semantic handler.  */
  FLD (f_sr1) = f_sr1;
  FLD (f_sr2) = f_sr2;
  FLD (f_drrr) = f_drrr;
  if (UNLIKELY(current_cpu->trace_extract_p))
    {
      current_cpu->trace_stream 
        << "0x" << hex << pc << dec << " (sfmt_lsl)\t"
        << " f_sr1:0x" << hex << f_sr1 << dec
        << " f_sr2:0x" << hex << f_sr2 << dec
        << " f_drrr:0x" << hex << f_drrr << dec
        << endl;
    }

#undef FLD
}

void
@


1.1
log
@Rename ms1 files to mt files (part 1 -- renames only)
@
text
@d1 1
a1 1
/* Simulator instruction decoder for ms1.
d16 1
a16 1
#include "ms1.h"
d18 1
a18 1
using namespace ms1; // FIXME: namespace organization still wip
d23 1
a23 1
ms1_idesc ms1_idesc::idesc_table[MS1_INSN_MFBCBINCRS + 1] =
d25 75
a99 78
  { ms1_sem_x_invalid, "X_INVALID", MS1_INSN_X_INVALID, { 0|(1<<CGEN_INSN_VIRTUAL), (1<<MACH_BASE) } },
  { ms1_sem_add, "ADD", MS1_INSN_ADD, { 0|(1<<CGEN_INSN_USES_FRSR2)|(1<<CGEN_INSN_USES_FRSR1)|(1<<CGEN_INSN_USES_FRDRRR)|(1<<CGEN_INSN_AL_INSN), (1<<MACH_BASE) } },
  { ms1_sem_addu, "ADDU", MS1_INSN_ADDU, { 0|(1<<CGEN_INSN_USES_FRSR2)|(1<<CGEN_INSN_USES_FRSR1)|(1<<CGEN_INSN_USES_FRDRRR)|(1<<CGEN_INSN_AL_INSN), (1<<MACH_BASE) } },
  { ms1_sem_addi, "ADDI", MS1_INSN_ADDI, { 0|(1<<CGEN_INSN_USES_FRSR1)|(1<<CGEN_INSN_USES_FRDR)|(1<<CGEN_INSN_AL_INSN), (1<<MACH_BASE) } },
  { ms1_sem_addui, "ADDUI", MS1_INSN_ADDUI, { 0|(1<<CGEN_INSN_USES_FRSR1)|(1<<CGEN_INSN_USES_FRDR)|(1<<CGEN_INSN_AL_INSN), (1<<MACH_BASE) } },
  { ms1_sem_sub, "SUB", MS1_INSN_SUB, { 0|(1<<CGEN_INSN_USES_FRSR2)|(1<<CGEN_INSN_USES_FRSR1)|(1<<CGEN_INSN_USES_FRDRRR)|(1<<CGEN_INSN_AL_INSN), (1<<MACH_BASE) } },
  { ms1_sem_subu, "SUBU", MS1_INSN_SUBU, { 0|(1<<CGEN_INSN_USES_FRSR2)|(1<<CGEN_INSN_USES_FRSR1)|(1<<CGEN_INSN_USES_FRDRRR)|(1<<CGEN_INSN_AL_INSN), (1<<MACH_BASE) } },
  { ms1_sem_subi, "SUBI", MS1_INSN_SUBI, { 0|(1<<CGEN_INSN_USES_FRSR1)|(1<<CGEN_INSN_USES_FRDR)|(1<<CGEN_INSN_AL_INSN), (1<<MACH_BASE) } },
  { ms1_sem_subui, "SUBUI", MS1_INSN_SUBUI, { 0|(1<<CGEN_INSN_USES_FRSR1)|(1<<CGEN_INSN_USES_FRDR)|(1<<CGEN_INSN_AL_INSN), (1<<MACH_BASE) } },
  { ms1_sem_mul, "MUL", MS1_INSN_MUL, { 0|(1<<CGEN_INSN_USES_FRSR2)|(1<<CGEN_INSN_USES_FRSR1)|(1<<CGEN_INSN_USES_FRDRRR)|(1<<CGEN_INSN_AL_INSN), (1<<MACH_MS1_003) } },
  { ms1_sem_muli, "MULI", MS1_INSN_MULI, { 0|(1<<CGEN_INSN_USES_FRSR1)|(1<<CGEN_INSN_USES_FRDR)|(1<<CGEN_INSN_AL_INSN), (1<<MACH_MS1_003) } },
  { ms1_sem_and, "AND", MS1_INSN_AND, { 0|(1<<CGEN_INSN_USES_FRSR2)|(1<<CGEN_INSN_USES_FRSR1)|(1<<CGEN_INSN_USES_FRDRRR)|(1<<CGEN_INSN_AL_INSN), (1<<MACH_BASE) } },
  { ms1_sem_andi, "ANDI", MS1_INSN_ANDI, { 0|(1<<CGEN_INSN_USES_FRSR1)|(1<<CGEN_INSN_USES_FRDR)|(1<<CGEN_INSN_AL_INSN), (1<<MACH_BASE) } },
  { ms1_sem_or, "OR", MS1_INSN_OR, { 0|(1<<CGEN_INSN_USES_FRSR2)|(1<<CGEN_INSN_USES_FRSR1)|(1<<CGEN_INSN_USES_FRDRRR)|(1<<CGEN_INSN_AL_INSN), (1<<MACH_BASE) } },
  { ms1_sem_nop, "NOP", MS1_INSN_NOP, { 0, (1<<MACH_BASE) } },
  { ms1_sem_ori, "ORI", MS1_INSN_ORI, { 0|(1<<CGEN_INSN_USES_FRSR1)|(1<<CGEN_INSN_USES_FRDR)|(1<<CGEN_INSN_AL_INSN), (1<<MACH_BASE) } },
  { ms1_sem_xor, "XOR", MS1_INSN_XOR, { 0|(1<<CGEN_INSN_USES_FRSR2)|(1<<CGEN_INSN_USES_FRSR1)|(1<<CGEN_INSN_USES_FRDRRR)|(1<<CGEN_INSN_AL_INSN), (1<<MACH_BASE) } },
  { ms1_sem_xori, "XORI", MS1_INSN_XORI, { 0|(1<<CGEN_INSN_USES_FRSR1)|(1<<CGEN_INSN_USES_FRDR)|(1<<CGEN_INSN_AL_INSN), (1<<MACH_BASE) } },
  { ms1_sem_nand, "NAND", MS1_INSN_NAND, { 0|(1<<CGEN_INSN_USES_FRSR2)|(1<<CGEN_INSN_USES_FRSR1)|(1<<CGEN_INSN_USES_FRDRRR)|(1<<CGEN_INSN_AL_INSN), (1<<MACH_BASE) } },
  { ms1_sem_nandi, "NANDI", MS1_INSN_NANDI, { 0|(1<<CGEN_INSN_USES_FRSR1)|(1<<CGEN_INSN_USES_FRDR)|(1<<CGEN_INSN_AL_INSN), (1<<MACH_BASE) } },
  { ms1_sem_nor, "NOR", MS1_INSN_NOR, { 0|(1<<CGEN_INSN_USES_FRSR2)|(1<<CGEN_INSN_USES_FRSR1)|(1<<CGEN_INSN_USES_FRDRRR)|(1<<CGEN_INSN_AL_INSN), (1<<MACH_BASE) } },
  { ms1_sem_nori, "NORI", MS1_INSN_NORI, { 0|(1<<CGEN_INSN_USES_FRSR1)|(1<<CGEN_INSN_USES_FRDR)|(1<<CGEN_INSN_AL_INSN), (1<<MACH_BASE) } },
  { ms1_sem_xnor, "XNOR", MS1_INSN_XNOR, { 0|(1<<CGEN_INSN_USES_FRSR2)|(1<<CGEN_INSN_USES_FRSR1)|(1<<CGEN_INSN_USES_FRDRRR)|(1<<CGEN_INSN_AL_INSN), (1<<MACH_BASE) } },
  { ms1_sem_xnori, "XNORI", MS1_INSN_XNORI, { 0|(1<<CGEN_INSN_USES_FRSR1)|(1<<CGEN_INSN_USES_FRDR)|(1<<CGEN_INSN_AL_INSN), (1<<MACH_BASE) } },
  { ms1_sem_ldui, "LDUI", MS1_INSN_LDUI, { 0|(1<<CGEN_INSN_USES_FRDR)|(1<<CGEN_INSN_AL_INSN), (1<<MACH_BASE) } },
  { ms1_sem_lsl, "LSL", MS1_INSN_LSL, { 0|(1<<CGEN_INSN_USES_FRSR2)|(1<<CGEN_INSN_USES_FRSR1)|(1<<CGEN_INSN_USES_FRDRRR), (1<<MACH_BASE) } },
  { ms1_sem_lsli, "LSLI", MS1_INSN_LSLI, { 0|(1<<CGEN_INSN_USES_FRSR1)|(1<<CGEN_INSN_USES_FRDR), (1<<MACH_BASE) } },
  { ms1_sem_lsr, "LSR", MS1_INSN_LSR, { 0|(1<<CGEN_INSN_USES_FRSR2)|(1<<CGEN_INSN_USES_FRSR1)|(1<<CGEN_INSN_USES_FRDRRR), (1<<MACH_BASE) } },
  { ms1_sem_lsri, "LSRI", MS1_INSN_LSRI, { 0|(1<<CGEN_INSN_USES_FRSR1)|(1<<CGEN_INSN_USES_FRDR), (1<<MACH_BASE) } },
  { ms1_sem_asr, "ASR", MS1_INSN_ASR, { 0|(1<<CGEN_INSN_USES_FRSR2)|(1<<CGEN_INSN_USES_FRSR1)|(1<<CGEN_INSN_USES_FRDRRR), (1<<MACH_BASE) } },
  { ms1_sem_asri, "ASRI", MS1_INSN_ASRI, { 0|(1<<CGEN_INSN_USES_FRSR1)|(1<<CGEN_INSN_USES_FRDR), (1<<MACH_BASE) } },
  { ms1_sem_brlt, "BRLT", MS1_INSN_BRLT, { 0|(1<<CGEN_INSN_USES_FRSR2)|(1<<CGEN_INSN_USES_FRSR1)|(1<<CGEN_INSN_USES_FRDRRR)|(1<<CGEN_INSN_DELAY_SLOT)|(1<<CGEN_INSN_BR_INSN), (1<<MACH_BASE) } },
  { ms1_sem_brle, "BRLE", MS1_INSN_BRLE, { 0|(1<<CGEN_INSN_USES_FRSR2)|(1<<CGEN_INSN_USES_FRSR1)|(1<<CGEN_INSN_DELAY_SLOT)|(1<<CGEN_INSN_BR_INSN), (1<<MACH_BASE) } },
  { ms1_sem_breq, "BREQ", MS1_INSN_BREQ, { 0|(1<<CGEN_INSN_USES_FRSR2)|(1<<CGEN_INSN_USES_FRSR1)|(1<<CGEN_INSN_DELAY_SLOT)|(1<<CGEN_INSN_BR_INSN), (1<<MACH_BASE) } },
  { ms1_sem_brne, "BRNE", MS1_INSN_BRNE, { 0|(1<<CGEN_INSN_USES_FRSR2)|(1<<CGEN_INSN_USES_FRSR1)|(1<<CGEN_INSN_DELAY_SLOT)|(1<<CGEN_INSN_BR_INSN), (1<<MACH_BASE) } },
  { ms1_sem_jmp, "JMP", MS1_INSN_JMP, { 0|(1<<CGEN_INSN_BR_INSN)|(1<<CGEN_INSN_DELAY_SLOT), (1<<MACH_BASE) } },
  { ms1_sem_jal, "JAL", MS1_INSN_JAL, { 0|(1<<CGEN_INSN_USES_FRSR1)|(1<<CGEN_INSN_USES_FRDR)|(1<<CGEN_INSN_BR_INSN)|(1<<CGEN_INSN_DELAY_SLOT), (1<<MACH_BASE) } },
  { ms1_sem_dbnz, "DBNZ", MS1_INSN_DBNZ, { 0|(1<<CGEN_INSN_USES_FRSR1)|(1<<CGEN_INSN_DELAY_SLOT)|(1<<CGEN_INSN_BR_INSN), (1<<MACH_MS1_003) } },
  { ms1_sem_ei, "EI", MS1_INSN_EI, { 0, (1<<MACH_BASE) } },
  { ms1_sem_di, "DI", MS1_INSN_DI, { 0, (1<<MACH_BASE) } },
  { ms1_sem_si, "SI", MS1_INSN_SI, { 0|(1<<CGEN_INSN_USES_FRDR)|(1<<CGEN_INSN_BR_INSN)|(1<<CGEN_INSN_DELAY_SLOT), (1<<MACH_BASE) } },
  { ms1_sem_reti, "RETI", MS1_INSN_RETI, { 0|(1<<CGEN_INSN_USES_FRSR1)|(1<<CGEN_INSN_BR_INSN)|(1<<CGEN_INSN_DELAY_SLOT), (1<<MACH_BASE) } },
  { ms1_sem_ldw, "LDW", MS1_INSN_LDW, { 0|(1<<CGEN_INSN_USES_FRSR1)|(1<<CGEN_INSN_USES_FRDR)|(1<<CGEN_INSN_MEMORY_ACCESS)|(1<<CGEN_INSN_LOAD_DELAY), (1<<MACH_BASE) } },
  { ms1_sem_stw, "STW", MS1_INSN_STW, { 0|(1<<CGEN_INSN_USES_FRSR2)|(1<<CGEN_INSN_USES_FRSR1)|(1<<CGEN_INSN_MEMORY_ACCESS), (1<<MACH_BASE) } },
  { ms1_sem_break, "BREAK", MS1_INSN_BREAK, { 0, (1<<MACH_BASE) } },
  { ms1_sem_iflush, "IFLUSH", MS1_INSN_IFLUSH, { 0, (1<<MACH_MS1_003) } },
  { ms1_sem_ldctxt, "LDCTXT", MS1_INSN_LDCTXT, { 0, (1<<MACH_BASE) } },
  { ms1_sem_ldfb, "LDFB", MS1_INSN_LDFB, { 0, (1<<MACH_BASE) } },
  { ms1_sem_stfb, "STFB", MS1_INSN_STFB, { 0, (1<<MACH_BASE) } },
  { ms1_sem_fbcb, "FBCB", MS1_INSN_FBCB, { 0, (1<<MACH_BASE) } },
  { ms1_sem_mfbcb, "MFBCB", MS1_INSN_MFBCB, { 0, (1<<MACH_BASE) } },
  { ms1_sem_fbcci, "FBCCI", MS1_INSN_FBCCI, { 0, (1<<MACH_BASE) } },
  { ms1_sem_fbrci, "FBRCI", MS1_INSN_FBRCI, { 0, (1<<MACH_BASE) } },
  { ms1_sem_fbcri, "FBCRI", MS1_INSN_FBCRI, { 0, (1<<MACH_BASE) } },
  { ms1_sem_fbrri, "FBRRI", MS1_INSN_FBRRI, { 0, (1<<MACH_BASE) } },
  { ms1_sem_mfbcci, "MFBCCI", MS1_INSN_MFBCCI, { 0, (1<<MACH_BASE) } },
  { ms1_sem_mfbrci, "MFBRCI", MS1_INSN_MFBRCI, { 0, (1<<MACH_BASE) } },
  { ms1_sem_mfbcri, "MFBCRI", MS1_INSN_MFBCRI, { 0, (1<<MACH_BASE) } },
  { ms1_sem_mfbrri, "MFBRRI", MS1_INSN_MFBRRI, { 0, (1<<MACH_BASE) } },
  { ms1_sem_fbcbdr, "FBCBDR", MS1_INSN_FBCBDR, { 0, (1<<MACH_BASE) } },
  { ms1_sem_rcfbcb, "RCFBCB", MS1_INSN_RCFBCB, { 0, (1<<MACH_BASE) } },
  { ms1_sem_mrcfbcb, "MRCFBCB", MS1_INSN_MRCFBCB, { 0, (1<<MACH_BASE) } },
  { ms1_sem_cbcast, "CBCAST", MS1_INSN_CBCAST, { 0, (1<<MACH_BASE) } },
  { ms1_sem_dupcbcast, "DUPCBCAST", MS1_INSN_DUPCBCAST, { 0, (1<<MACH_BASE) } },
  { ms1_sem_wfbi, "WFBI", MS1_INSN_WFBI, { 0, (1<<MACH_BASE) } },
  { ms1_sem_wfb, "WFB", MS1_INSN_WFB, { 0, (1<<MACH_BASE) } },
  { ms1_sem_rcrisc, "RCRISC", MS1_INSN_RCRISC, { 0, (1<<MACH_BASE) } },
  { ms1_sem_fbcbinc, "FBCBINC", MS1_INSN_FBCBINC, { 0, (1<<MACH_BASE) } },
  { ms1_sem_rcxmode, "RCXMODE", MS1_INSN_RCXMODE, { 0, (1<<MACH_BASE) } },
  { ms1_sem_interleaver, "INTERLEAVER", MS1_INSN_INTERLEAVER, { 0, (1<<MACH_BASE) } },
  { ms1_sem_wfbinc, "WFBINC", MS1_INSN_WFBINC, { 0, (1<<MACH_MS1_003) } },
  { ms1_sem_mwfbinc, "MWFBINC", MS1_INSN_MWFBINC, { 0, (1<<MACH_MS1_003) } },
  { ms1_sem_wfbincr, "WFBINCR", MS1_INSN_WFBINCR, { 0, (1<<MACH_MS1_003) } },
  { ms1_sem_mwfbincr, "MWFBINCR", MS1_INSN_MWFBINCR, { 0, (1<<MACH_MS1_003) } },
  { ms1_sem_fbcbincs, "FBCBINCS", MS1_INSN_FBCBINCS, { 0, (1<<MACH_MS1_003) } },
  { ms1_sem_mfbcbincs, "MFBCBINCS", MS1_INSN_MFBCBINCS, { 0, (1<<MACH_MS1_003) } },
  { ms1_sem_fbcbincrs, "FBCBINCRS", MS1_INSN_FBCBINCRS, { 0, (1<<MACH_MS1_003) } },
  { ms1_sem_mfbcbincrs, "MFBCBINCRS", MS1_INSN_MFBCBINCRS, { 0, (1<<MACH_MS1_003) } },
d105 2
a106 2
ms1_insn_type
ms1_idesc::lookup_virtual (virtual_insn_type vit)
d110 2
a111 2
      case VIRTUAL_INSN_INVALID: return MS1_INSN_X_INVALID;
      case VIRTUAL_INSN_COND: return MS1_INSN_X_INVALID;
d120 1
a120 1
ms1_extract_sfmt_empty (ms1_scache* abuf, ms1_cpu* current_cpu, PCADDR pc, ms1_insn_word base_insn, ms1_insn_word entire_insn);
d122 1
a122 1
ms1_extract_sfmt_add (ms1_scache* abuf, ms1_cpu* current_cpu, PCADDR pc, ms1_insn_word base_insn, ms1_insn_word entire_insn);
d124 1
a124 1
ms1_extract_sfmt_addu (ms1_scache* abuf, ms1_cpu* current_cpu, PCADDR pc, ms1_insn_word base_insn, ms1_insn_word entire_insn);
d126 1
a126 1
ms1_extract_sfmt_addi (ms1_scache* abuf, ms1_cpu* current_cpu, PCADDR pc, ms1_insn_word base_insn, ms1_insn_word entire_insn);
d128 1
a128 1
ms1_extract_sfmt_addui (ms1_scache* abuf, ms1_cpu* current_cpu, PCADDR pc, ms1_insn_word base_insn, ms1_insn_word entire_insn);
d130 1
a130 1
ms1_extract_sfmt_andi (ms1_scache* abuf, ms1_cpu* current_cpu, PCADDR pc, ms1_insn_word base_insn, ms1_insn_word entire_insn);
d132 1
a132 1
ms1_extract_sfmt_nop (ms1_scache* abuf, ms1_cpu* current_cpu, PCADDR pc, ms1_insn_word base_insn, ms1_insn_word entire_insn);
d134 1
a134 1
ms1_extract_sfmt_ldui (ms1_scache* abuf, ms1_cpu* current_cpu, PCADDR pc, ms1_insn_word base_insn, ms1_insn_word entire_insn);
d136 1
a136 1
ms1_extract_sfmt_lsl (ms1_scache* abuf, ms1_cpu* current_cpu, PCADDR pc, ms1_insn_word base_insn, ms1_insn_word entire_insn);
d138 1
a138 1
ms1_extract_sfmt_brlt (ms1_scache* abuf, ms1_cpu* current_cpu, PCADDR pc, ms1_insn_word base_insn, ms1_insn_word entire_insn);
d140 1
a140 1
ms1_extract_sfmt_jmp (ms1_scache* abuf, ms1_cpu* current_cpu, PCADDR pc, ms1_insn_word base_insn, ms1_insn_word entire_insn);
d142 1
a142 1
ms1_extract_sfmt_jal (ms1_scache* abuf, ms1_cpu* current_cpu, PCADDR pc, ms1_insn_word base_insn, ms1_insn_word entire_insn);
d144 1
a144 1
ms1_extract_sfmt_dbnz (ms1_scache* abuf, ms1_cpu* current_cpu, PCADDR pc, ms1_insn_word base_insn, ms1_insn_word entire_insn);
d146 1
a146 1
ms1_extract_sfmt_si (ms1_scache* abuf, ms1_cpu* current_cpu, PCADDR pc, ms1_insn_word base_insn, ms1_insn_word entire_insn);
d148 1
a148 1
ms1_extract_sfmt_reti (ms1_scache* abuf, ms1_cpu* current_cpu, PCADDR pc, ms1_insn_word base_insn, ms1_insn_word entire_insn);
d150 1
a150 1
ms1_extract_sfmt_ldw (ms1_scache* abuf, ms1_cpu* current_cpu, PCADDR pc, ms1_insn_word base_insn, ms1_insn_word entire_insn);
d152 1
a152 1
ms1_extract_sfmt_stw (ms1_scache* abuf, ms1_cpu* current_cpu, PCADDR pc, ms1_insn_word base_insn, ms1_insn_word entire_insn);
d154 1
a154 1
ms1_extract_sfmt_break (ms1_scache* abuf, ms1_cpu* current_cpu, PCADDR pc, ms1_insn_word base_insn, ms1_insn_word entire_insn);
d158 1
a158 1
ms1_scache::decode (ms1_cpu* current_cpu, PCADDR pc, ms1_insn_word base_insn, ms1_insn_word entire_insn)
d161 1
a161 1
  MS1_INSN_TYPE itype;
d164 1
a164 1
    ms1_insn_word insn = base_insn;
d172 2
a173 2
          { itype = MS1_INSN_ADD; ms1_extract_sfmt_add (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MS1_INSN_X_INVALID; ms1_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
d176 2
a177 2
          { itype = MS1_INSN_ADDI; ms1_extract_sfmt_addi (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MS1_INSN_X_INVALID; ms1_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
d180 2
a181 2
          { itype = MS1_INSN_ADDU; ms1_extract_sfmt_addu (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MS1_INSN_X_INVALID; ms1_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
d184 2
a185 2
          { itype = MS1_INSN_ADDUI; ms1_extract_sfmt_addui (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MS1_INSN_X_INVALID; ms1_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
d188 2
a189 2
          { itype = MS1_INSN_SUB; ms1_extract_sfmt_add (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MS1_INSN_X_INVALID; ms1_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
d192 2
a193 2
          { itype = MS1_INSN_SUBI; ms1_extract_sfmt_addi (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MS1_INSN_X_INVALID; ms1_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
d196 2
a197 2
          { itype = MS1_INSN_SUBU; ms1_extract_sfmt_addu (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MS1_INSN_X_INVALID; ms1_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
d200 2
a201 2
          { itype = MS1_INSN_SUBUI; ms1_extract_sfmt_addui (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MS1_INSN_X_INVALID; ms1_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
d204 2
a205 2
          { itype = MS1_INSN_MUL; ms1_extract_sfmt_add (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MS1_INSN_X_INVALID; ms1_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
d208 2
a209 2
          { itype = MS1_INSN_MULI; ms1_extract_sfmt_addi (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MS1_INSN_X_INVALID; ms1_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
d212 2
a213 2
          { itype = MS1_INSN_AND; ms1_extract_sfmt_add (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MS1_INSN_X_INVALID; ms1_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
d216 2
a217 2
          { itype = MS1_INSN_ANDI; ms1_extract_sfmt_andi (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MS1_INSN_X_INVALID; ms1_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
d230 2
a231 2
                  { itype = MS1_INSN_NOP; ms1_extract_sfmt_nop (this, current_cpu, pc, base_insn, entire_insn); goto done; }
                itype = MS1_INSN_X_INVALID; ms1_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
d264 3
a266 3
                  { itype = MS1_INSN_OR; ms1_extract_sfmt_add (this, current_cpu, pc, base_insn, entire_insn); goto done; }
                itype = MS1_INSN_X_INVALID; ms1_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
              default : itype = MS1_INSN_X_INVALID; ms1_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
d397 3
a399 3
              { itype = MS1_INSN_OR; ms1_extract_sfmt_add (this, current_cpu, pc, base_insn, entire_insn); goto done; }
            itype = MS1_INSN_X_INVALID; ms1_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
          default : itype = MS1_INSN_X_INVALID; ms1_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
d404 2
a405 2
          { itype = MS1_INSN_ORI; ms1_extract_sfmt_andi (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MS1_INSN_X_INVALID; ms1_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
d408 2
a409 2
          { itype = MS1_INSN_XOR; ms1_extract_sfmt_add (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MS1_INSN_X_INVALID; ms1_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
d412 2
a413 2
          { itype = MS1_INSN_XORI; ms1_extract_sfmt_andi (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MS1_INSN_X_INVALID; ms1_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
d416 2
a417 2
          { itype = MS1_INSN_NAND; ms1_extract_sfmt_add (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MS1_INSN_X_INVALID; ms1_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
d420 2
a421 2
          { itype = MS1_INSN_NANDI; ms1_extract_sfmt_andi (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MS1_INSN_X_INVALID; ms1_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
d424 2
a425 2
          { itype = MS1_INSN_NOR; ms1_extract_sfmt_add (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MS1_INSN_X_INVALID; ms1_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
d428 2
a429 2
          { itype = MS1_INSN_NORI; ms1_extract_sfmt_andi (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MS1_INSN_X_INVALID; ms1_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
d432 2
a433 2
          { itype = MS1_INSN_XNOR; ms1_extract_sfmt_add (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MS1_INSN_X_INVALID; ms1_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
d436 2
a437 2
          { itype = MS1_INSN_XNORI; ms1_extract_sfmt_andi (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MS1_INSN_X_INVALID; ms1_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
d440 2
a441 2
          { itype = MS1_INSN_LDUI; ms1_extract_sfmt_ldui (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MS1_INSN_X_INVALID; ms1_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
d444 2
a445 2
          { itype = MS1_INSN_LSL; ms1_extract_sfmt_lsl (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MS1_INSN_X_INVALID; ms1_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
d448 2
a449 2
          { itype = MS1_INSN_LSLI; ms1_extract_sfmt_addi (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MS1_INSN_X_INVALID; ms1_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
d452 2
a453 2
          { itype = MS1_INSN_LSR; ms1_extract_sfmt_lsl (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MS1_INSN_X_INVALID; ms1_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
d456 2
a457 2
          { itype = MS1_INSN_LSRI; ms1_extract_sfmt_addi (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MS1_INSN_X_INVALID; ms1_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
d460 2
a461 2
          { itype = MS1_INSN_ASR; ms1_extract_sfmt_lsl (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MS1_INSN_X_INVALID; ms1_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
d464 2
a465 2
          { itype = MS1_INSN_ASRI; ms1_extract_sfmt_addi (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MS1_INSN_X_INVALID; ms1_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
d468 2
a469 2
          { itype = MS1_INSN_BRLT; ms1_extract_sfmt_brlt (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MS1_INSN_X_INVALID; ms1_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
d472 2
a473 2
          { itype = MS1_INSN_BRLE; ms1_extract_sfmt_brlt (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MS1_INSN_X_INVALID; ms1_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
d476 2
a477 2
          { itype = MS1_INSN_BREQ; ms1_extract_sfmt_brlt (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MS1_INSN_X_INVALID; ms1_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
d480 2
a481 2
          { itype = MS1_INSN_JMP; ms1_extract_sfmt_jmp (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MS1_INSN_X_INVALID; ms1_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
d484 2
a485 2
          { itype = MS1_INSN_JAL; ms1_extract_sfmt_jal (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MS1_INSN_X_INVALID; ms1_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
d488 2
a489 2
          { itype = MS1_INSN_BRNE; ms1_extract_sfmt_brlt (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MS1_INSN_X_INVALID; ms1_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
d492 2
a493 2
          { itype = MS1_INSN_DBNZ; ms1_extract_sfmt_dbnz (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MS1_INSN_X_INVALID; ms1_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
d496 2
a497 2
          { itype = MS1_INSN_LDW; ms1_extract_sfmt_ldw (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MS1_INSN_X_INVALID; ms1_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
d500 2
a501 2
          { itype = MS1_INSN_STW; ms1_extract_sfmt_stw (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MS1_INSN_X_INVALID; ms1_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
d504 2
a505 2
          { itype = MS1_INSN_EI; ms1_extract_sfmt_nop (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MS1_INSN_X_INVALID; ms1_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
d508 2
a509 2
          { itype = MS1_INSN_DI; ms1_extract_sfmt_nop (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MS1_INSN_X_INVALID; ms1_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
d512 2
a513 2
          { itype = MS1_INSN_SI; ms1_extract_sfmt_si (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MS1_INSN_X_INVALID; ms1_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
d516 2
a517 2
          { itype = MS1_INSN_RETI; ms1_extract_sfmt_reti (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MS1_INSN_X_INVALID; ms1_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
d520 2
a521 2
          { itype = MS1_INSN_BREAK; ms1_extract_sfmt_break (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MS1_INSN_X_INVALID; ms1_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
d524 2
a525 14
          { itype = MS1_INSN_IFLUSH; ms1_extract_sfmt_nop (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MS1_INSN_X_INVALID; ms1_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
      case 128 :
        if ((entire_insn & 0xff000e00) == 0x80000000)
          { itype = MS1_INSN_LDCTXT; ms1_extract_sfmt_nop (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MS1_INSN_X_INVALID; ms1_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
      case 132 :
        if ((entire_insn & 0xff000000) == 0x84000000)
          { itype = MS1_INSN_LDFB; ms1_extract_sfmt_nop (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MS1_INSN_X_INVALID; ms1_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
      case 136 :
        if ((entire_insn & 0xff000000) == 0x88000000)
          { itype = MS1_INSN_STFB; ms1_extract_sfmt_nop (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MS1_INSN_X_INVALID; ms1_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
d531 2
a532 2
          { itype = MS1_INSN_FBCB; ms1_extract_sfmt_nop (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MS1_INSN_X_INVALID; ms1_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
d538 2
a539 2
          { itype = MS1_INSN_MFBCB; ms1_extract_sfmt_nop (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MS1_INSN_X_INVALID; ms1_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
d545 2
a546 2
          { itype = MS1_INSN_FBCCI; ms1_extract_sfmt_nop (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MS1_INSN_X_INVALID; ms1_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
d552 2
a553 2
          { itype = MS1_INSN_FBRCI; ms1_extract_sfmt_nop (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MS1_INSN_X_INVALID; ms1_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
d559 2
a560 2
          { itype = MS1_INSN_FBCRI; ms1_extract_sfmt_nop (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MS1_INSN_X_INVALID; ms1_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
d566 2
a567 2
          { itype = MS1_INSN_FBRRI; ms1_extract_sfmt_nop (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MS1_INSN_X_INVALID; ms1_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
d573 2
a574 2
          { itype = MS1_INSN_MFBCCI; ms1_extract_sfmt_nop (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MS1_INSN_X_INVALID; ms1_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
d580 2
a581 2
          { itype = MS1_INSN_MFBRCI; ms1_extract_sfmt_nop (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MS1_INSN_X_INVALID; ms1_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
d587 2
a588 2
          { itype = MS1_INSN_MFBCRI; ms1_extract_sfmt_nop (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MS1_INSN_X_INVALID; ms1_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
d594 2
a595 2
          { itype = MS1_INSN_MFBRRI; ms1_extract_sfmt_nop (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MS1_INSN_X_INVALID; ms1_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
d601 2
a602 2
          { itype = MS1_INSN_FBCBDR; ms1_extract_sfmt_nop (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MS1_INSN_X_INVALID; ms1_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
d608 2
a609 2
          { itype = MS1_INSN_RCFBCB; ms1_extract_sfmt_nop (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MS1_INSN_X_INVALID; ms1_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
d615 2
a616 2
          { itype = MS1_INSN_MRCFBCB; ms1_extract_sfmt_nop (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MS1_INSN_X_INVALID; ms1_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
d622 2
a623 2
          { itype = MS1_INSN_CBCAST; ms1_extract_sfmt_nop (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MS1_INSN_X_INVALID; ms1_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
d629 2
a630 2
          { itype = MS1_INSN_DUPCBCAST; ms1_extract_sfmt_nop (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MS1_INSN_X_INVALID; ms1_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
d636 2
a637 2
          { itype = MS1_INSN_WFBI; ms1_extract_sfmt_nop (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MS1_INSN_X_INVALID; ms1_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
d640 2
a641 2
          { itype = MS1_INSN_WFB; ms1_extract_sfmt_nop (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MS1_INSN_X_INVALID; ms1_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
d647 2
a648 2
          { itype = MS1_INSN_RCRISC; ms1_extract_sfmt_nop (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MS1_INSN_X_INVALID; ms1_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
d654 2
a655 2
          { itype = MS1_INSN_FBCBINC; ms1_extract_sfmt_nop (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MS1_INSN_X_INVALID; ms1_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
d661 2
a662 2
          { itype = MS1_INSN_RCXMODE; ms1_extract_sfmt_nop (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MS1_INSN_X_INVALID; ms1_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
d668 2
a669 2
          { itype = MS1_INSN_INTERLEAVER; ms1_extract_sfmt_nop (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MS1_INSN_X_INVALID; ms1_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
d675 2
a676 2
          { itype = MS1_INSN_WFBINC; ms1_extract_sfmt_nop (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MS1_INSN_X_INVALID; ms1_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
d682 2
a683 2
          { itype = MS1_INSN_MWFBINC; ms1_extract_sfmt_nop (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MS1_INSN_X_INVALID; ms1_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
d689 2
a690 2
          { itype = MS1_INSN_WFBINCR; ms1_extract_sfmt_nop (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MS1_INSN_X_INVALID; ms1_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
d696 2
a697 2
          { itype = MS1_INSN_MWFBINCR; ms1_extract_sfmt_nop (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MS1_INSN_X_INVALID; ms1_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
d703 2
a704 2
          { itype = MS1_INSN_FBCBINCS; ms1_extract_sfmt_nop (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MS1_INSN_X_INVALID; ms1_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
d710 2
a711 2
          { itype = MS1_INSN_MFBCBINCS; ms1_extract_sfmt_nop (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MS1_INSN_X_INVALID; ms1_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
d717 2
a718 2
          { itype = MS1_INSN_FBCBINCRS; ms1_extract_sfmt_nop (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MS1_INSN_X_INVALID; ms1_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
d724 3
a726 3
          { itype = MS1_INSN_MFBCBINCRS; ms1_extract_sfmt_nop (this, current_cpu, pc, base_insn, entire_insn); goto done; }
        itype = MS1_INSN_X_INVALID; ms1_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
      default : itype = MS1_INSN_X_INVALID; ms1_extract_sfmt_empty (this, current_cpu, pc, base_insn, entire_insn); goto done;
d737 1
a737 1
  this->idesc = & ms1_idesc::idesc_table[itype];
d743 2
a744 2
ms1_extract_sfmt_empty (ms1_scache* abuf, ms1_cpu* current_cpu, PCADDR pc, ms1_insn_word base_insn, ms1_insn_word entire_insn){
    ms1_insn_word insn = entire_insn;
d760 2
a761 2
ms1_extract_sfmt_add (ms1_scache* abuf, ms1_cpu* current_cpu, PCADDR pc, ms1_insn_word base_insn, ms1_insn_word entire_insn){
    ms1_insn_word insn = entire_insn;
d789 2
a790 2
ms1_extract_sfmt_addu (ms1_scache* abuf, ms1_cpu* current_cpu, PCADDR pc, ms1_insn_word base_insn, ms1_insn_word entire_insn){
    ms1_insn_word insn = entire_insn;
d818 2
a819 2
ms1_extract_sfmt_addi (ms1_scache* abuf, ms1_cpu* current_cpu, PCADDR pc, ms1_insn_word base_insn, ms1_insn_word entire_insn){
    ms1_insn_word insn = entire_insn;
d847 2
a848 2
ms1_extract_sfmt_addui (ms1_scache* abuf, ms1_cpu* current_cpu, PCADDR pc, ms1_insn_word base_insn, ms1_insn_word entire_insn){
    ms1_insn_word insn = entire_insn;
d876 2
a877 2
ms1_extract_sfmt_andi (ms1_scache* abuf, ms1_cpu* current_cpu, PCADDR pc, ms1_insn_word base_insn, ms1_insn_word entire_insn){
    ms1_insn_word insn = entire_insn;
d905 2
a906 2
ms1_extract_sfmt_nop (ms1_scache* abuf, ms1_cpu* current_cpu, PCADDR pc, ms1_insn_word base_insn, ms1_insn_word entire_insn){
    ms1_insn_word insn = entire_insn;
d922 2
a923 2
ms1_extract_sfmt_ldui (ms1_scache* abuf, ms1_cpu* current_cpu, PCADDR pc, ms1_insn_word base_insn, ms1_insn_word entire_insn){
    ms1_insn_word insn = entire_insn;
d947 2
a948 2
ms1_extract_sfmt_lsl (ms1_scache* abuf, ms1_cpu* current_cpu, PCADDR pc, ms1_insn_word base_insn, ms1_insn_word entire_insn){
    ms1_insn_word insn = entire_insn;
d976 2
a977 2
ms1_extract_sfmt_brlt (ms1_scache* abuf, ms1_cpu* current_cpu, PCADDR pc, ms1_insn_word base_insn, ms1_insn_word entire_insn){
    ms1_insn_word insn = entire_insn;
a1000 4
  /* Record the fields for profiling.  */
  if (UNLIKELY (current_cpu->trace_counter_p || current_cpu->final_insn_count_p))
    {
    }
d1005 2
a1006 2
ms1_extract_sfmt_jmp (ms1_scache* abuf, ms1_cpu* current_cpu, PCADDR pc, ms1_insn_word base_insn, ms1_insn_word entire_insn){
    ms1_insn_word insn = entire_insn;
a1021 4
  /* Record the fields for profiling.  */
  if (UNLIKELY (current_cpu->trace_counter_p || current_cpu->final_insn_count_p))
    {
    }
d1026 2
a1027 2
ms1_extract_sfmt_jal (ms1_scache* abuf, ms1_cpu* current_cpu, PCADDR pc, ms1_insn_word base_insn, ms1_insn_word entire_insn){
    ms1_insn_word insn = entire_insn;
a1046 4
  /* Record the fields for profiling.  */
  if (UNLIKELY (current_cpu->trace_counter_p || current_cpu->final_insn_count_p))
    {
    }
d1051 2
a1052 2
ms1_extract_sfmt_dbnz (ms1_scache* abuf, ms1_cpu* current_cpu, PCADDR pc, ms1_insn_word base_insn, ms1_insn_word entire_insn){
    ms1_insn_word insn = entire_insn;
a1071 4
  /* Record the fields for profiling.  */
  if (UNLIKELY (current_cpu->trace_counter_p || current_cpu->final_insn_count_p))
    {
    }
d1076 2
a1077 2
ms1_extract_sfmt_si (ms1_scache* abuf, ms1_cpu* current_cpu, PCADDR pc, ms1_insn_word base_insn, ms1_insn_word entire_insn){
    ms1_insn_word insn = entire_insn;
a1092 4
  /* Record the fields for profiling.  */
  if (UNLIKELY (current_cpu->trace_counter_p || current_cpu->final_insn_count_p))
    {
    }
d1097 2
a1098 2
ms1_extract_sfmt_reti (ms1_scache* abuf, ms1_cpu* current_cpu, PCADDR pc, ms1_insn_word base_insn, ms1_insn_word entire_insn){
    ms1_insn_word insn = entire_insn;
a1113 4
  /* Record the fields for profiling.  */
  if (UNLIKELY (current_cpu->trace_counter_p || current_cpu->final_insn_count_p))
    {
    }
d1118 2
a1119 2
ms1_extract_sfmt_ldw (ms1_scache* abuf, ms1_cpu* current_cpu, PCADDR pc, ms1_insn_word base_insn, ms1_insn_word entire_insn){
    ms1_insn_word insn = entire_insn;
d1147 2
a1148 2
ms1_extract_sfmt_stw (ms1_scache* abuf, ms1_cpu* current_cpu, PCADDR pc, ms1_insn_word base_insn, ms1_insn_word entire_insn){
    ms1_insn_word insn = entire_insn;
d1176 2
a1177 2
ms1_extract_sfmt_break (ms1_scache* abuf, ms1_cpu* current_cpu, PCADDR pc, ms1_insn_word base_insn, ms1_insn_word entire_insn){
    ms1_insn_word insn = entire_insn;
a1188 4
  /* Record the fields for profiling.  */
  if (UNLIKELY (current_cpu->trace_counter_p || current_cpu->final_insn_count_p))
    {
    }
@

