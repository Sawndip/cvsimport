head	1.4;
access;
symbols
	sid-snapshot-20180601:1.4
	sid-snapshot-20180501:1.4
	sid-snapshot-20180401:1.4
	sid-snapshot-20180301:1.4
	sid-snapshot-20180201:1.4
	sid-snapshot-20180101:1.4
	sid-snapshot-20171201:1.4
	sid-snapshot-20171101:1.4
	sid-snapshot-20171001:1.4
	sid-snapshot-20170901:1.4
	sid-snapshot-20170801:1.4
	sid-snapshot-20170701:1.4
	sid-snapshot-20170601:1.4
	sid-snapshot-20170501:1.4
	sid-snapshot-20170401:1.4
	sid-snapshot-20170301:1.4
	sid-snapshot-20170201:1.4
	sid-snapshot-20170101:1.4
	sid-snapshot-20161201:1.4
	sid-snapshot-20161101:1.4
	sid-snapshot-20160901:1.4
	sid-snapshot-20160801:1.4
	sid-snapshot-20160701:1.4
	sid-snapshot-20160601:1.4
	sid-snapshot-20160501:1.4
	sid-snapshot-20160401:1.4
	sid-snapshot-20160301:1.4
	sid-snapshot-20160201:1.4
	sid-snapshot-20160101:1.4
	sid-snapshot-20151201:1.4
	sid-snapshot-20151101:1.4
	sid-snapshot-20151001:1.4
	sid-snapshot-20150901:1.4
	sid-snapshot-20150801:1.4
	sid-snapshot-20150701:1.4
	sid-snapshot-20150601:1.4
	sid-snapshot-20150501:1.4
	sid-snapshot-20150401:1.4
	sid-snapshot-20150301:1.4
	sid-snapshot-20150201:1.4
	sid-snapshot-20150101:1.4
	sid-snapshot-20141201:1.4
	sid-snapshot-20141101:1.4
	sid-snapshot-20141001:1.4
	sid-snapshot-20140901:1.4
	sid-snapshot-20140801:1.4
	sid-snapshot-20140701:1.4
	sid-snapshot-20140601:1.4
	sid-snapshot-20140501:1.4
	sid-snapshot-20140401:1.4
	sid-snapshot-20140301:1.4
	sid-snapshot-20140201:1.4
	sid-snapshot-20140101:1.4
	sid-snapshot-20131201:1.4
	sid-snapshot-20131101:1.4
	sid-snapshot-20131001:1.4
	sid-snapshot-20130901:1.4
	sid-snapshot-20130801:1.4
	sid-snapshot-20130701:1.4
	sid-snapshot-20130601:1.4
	sid-snapshot-20130501:1.4
	sid-snapshot-20130401:1.4
	sid-snapshot-20130301:1.4
	sid-snapshot-20130201:1.4
	sid-snapshot-20130101:1.4
	sid-snapshot-20121201:1.4
	sid-snapshot-20121101:1.4
	sid-snapshot-20121001:1.4
	sid-snapshot-20120901:1.4
	sid-snapshot-20120801:1.4
	sid-snapshot-20120701:1.4
	sid-snapshot-20120601:1.4
	sid-snapshot-20120501:1.4
	sid-snapshot-20120401:1.4
	sid-snapshot-20120301:1.4
	sid-snapshot-20120201:1.4
	sid-snapshot-20120101:1.4
	sid-snapshot-20111201:1.4
	sid-snapshot-20111101:1.4
	sid-snapshot-20111001:1.4
	sid-snapshot-20110901:1.4
	sid-snapshot-20110801:1.4
	sid-snapshot-20110701:1.4
	sid-snapshot-20110601:1.4
	sid-snapshot-20110501:1.4
	sid-snapshot-20110401:1.4
	sid-snapshot-20110301:1.4
	sid-snapshot-20110201:1.4
	sid-snapshot-20110101:1.4
	sid-snapshot-20101201:1.4
	sid-snapshot-20101101:1.4
	sid-snapshot-20101001:1.4
	sid-snapshot-20100901:1.4
	sid-snapshot-20100801:1.4
	sid-snapshot-20100701:1.4
	sid-snapshot-20100601:1.4
	sid-snapshot-20100501:1.4
	sid-snapshot-20100401:1.4
	sid-snapshot-20100301:1.4
	sid-snapshot-20100201:1.4
	sid-snapshot-20100101:1.3
	sid-snapshot-20091201:1.3
	sid-snapshot-20091101:1.3
	sid-snapshot-20091001:1.3
	sid-snapshot-20090901:1.3
	sid-snapshot-20090801:1.3
	sid-snapshot-20090701:1.3
	sid-snapshot-20090601:1.3
	sid-snapshot-20090501:1.3
	sid-snapshot-20090401:1.3
	sid-snapshot-20090301:1.3
	sid-snapshot-20090201:1.3
	sid-snapshot-20090101:1.3
	sid-snapshot-20081201:1.3
	sid-snapshot-20081101:1.3
	sid-snapshot-20081001:1.3
	sid-snapshot-20080901:1.3
	sid-snapshot-20080801:1.3
	sid-snapshot-20080701:1.3
	sid-snapshot-20080601:1.3
	sid-snapshot-20080501:1.3
	sid-snapshot-20080403:1.3
	sid-snapshot-20080401:1.3
	sid-snapshot-20080301:1.3
	sid-snapshot-20080201:1.3
	sid-snapshot-20080101:1.3
	sid-snapshot-20071201:1.3
	sid-snapshot-20071101:1.3
	sid-snapshot-20071001:1.3;
locks; strict;
comment	@// @;


1.4
date	2010.01.25.03.55.05;	author devans;	state Exp;
branches;
next	1.3;

1.3
date	2006.06.14.19.02.24;	author brolley;	state Exp;
branches;
next	1.2;

1.2
date	2006.05.10.21.15.35;	author brolley;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.19.19.01.51;	author brolley;	state Exp;
branches;
next	;


desc
@@


1.4
log
@	* cgen-fpu.h (cgen_fp_ops): Update signatures of floating point
	conversion functions.
	* cgen-fpu.cxx (cgen_fp_ops): Ditto.
	* cgen-types (fpconv_kind): New enum.
	* fp.h (enum round_mode_t): Define values in terms of cgen's
	builtin values.

	sh/
	* sh.cxx (sh64_fldi0): Update call to floating point convertion func.
	(sh64_fldi1, sh64_fcnvds, sh64_fcnvsd, sh64_floatld, sh64_floatls,
	sh64_floatqd, sh64_floatqs, sh64_ftrcdl, sh64_ftrcsl, sh64_ftrcdq,
	sh64_ftrcsq, sh64_ftrvs): Ditto.
	* sh2a-fpu-cpu.h, * sh2e-cpu.h, * sh3e-cpu.h, * sh4-cpu.h,
	* sh4a-cpu.h, * sh5-cpu.h: Regenerate.
@
text
@// cgen-fpu.cxx - CPU components.  -*- C++ -*-
// CGEN fpu support for SID
//
// Copyright (C) 2005, 2010 Red Hat.
// This file is part of SID and is licensed under the GPL.
// See the file COPYING.SID for conditions for redistribution.

#include "cgen-fpu.h"
#include "fp.h"

using namespace sidutil;

namespace cgen 
{
/* basic SF ops */
SF
cgen_fp_ops::addsf (const cgen_fpu* fpu, SF x, SF y)
{
  fp r = fp (x) + fp (y);
  check_result (fpu, r);
  SF tmp;
  r.pack (tmp);
  return tmp;
}

SF cgen_fp_ops::subsf (const cgen_fpu* fpu, SF x, SF y)
{
  fp r = fp (x) - fp (y);
  check_result (fpu, r);
  SF tmp;
  r.pack (tmp);
  return tmp;
}

SF cgen_fp_ops::mulsf (const cgen_fpu* fpu, SF x, SF y)
{
  fp r = fp (x) * fp (y);
  check_result (fpu, r);
  SF tmp;
  r.pack (tmp);
  return tmp;
}

SF cgen_fp_ops::divsf (const cgen_fpu* fpu, SF x, SF y)
{
  fp r = fp (x) / fp (y);
  check_result (fpu, r);
  SF tmp;
  r.pack (tmp);
  return tmp;
}

SF cgen_fp_ops::negsf (const cgen_fpu* fpu, SF x)
{
  fp r (x);
  r = fp::neg (r);
  check_result (fpu, r);
  SF tmp;
  r.pack (tmp);
  return tmp;
}

SF cgen_fp_ops::abssf (const cgen_fpu* fpu, SF x)
{
  fp r (x);
  r = fp::abs (r);
  check_result (fpu, r);
  SF tmp;
  r.pack (tmp);
  return tmp;
}

SF cgen_fp_ops::sqrtsf (const cgen_fpu* fpu, SF x)
{
  fp r (x);
  r = fp::sqrt (r);
  check_result (fpu, r);
  SF tmp;
  r.pack (tmp);
  return tmp;
}


#if 0 // not implemented yet
SF cgen_fp_ops::invsf (const cgen_fpu*, SF);
SF cgen_fp_ops::cossf (const cgen_fpu*, SF);
SF cgen_fp_ops::sinsf (const cgen_fpu*, SF);
SF cgen_fp_ops::minsf (const cgen_fpu*, SF, SF);
SF cgen_fp_ops::maxsf (const cgen_fpu*, SF, SF);
#endif

int cgen_fp_ops::eqsf (const cgen_fpu*, SF x, SF y)
{
  return fp (x) == fp (y);
}
int cgen_fp_ops::nesf (const cgen_fpu*, SF x, SF y)
{
  return fp (x) != fp (y);
}
int cgen_fp_ops::ltsf (const cgen_fpu*, SF x, SF y)
{
  return fp (x) < fp (y);
}
int cgen_fp_ops::lesf (const cgen_fpu*, SF x, SF y)
{
  return fp (x) <= fp (y);
}
int cgen_fp_ops::gtsf (const cgen_fpu*, SF x, SF y)
{
  return fp (x) > fp (y);
}
int cgen_fp_ops::gesf (const cgen_fpu*, SF x, SF y)
{
  return fp (x) >= fp (y);
}

int cgen_fp_ops::unorderedsf (const cgen_fpu*, SF x, SF y)
{
  fp f1(x);
  fp f2(y);
  return f1.is_nan () || f2.is_nan ();
}

/* basic DF ops */
DF cgen_fp_ops::adddf (const cgen_fpu *fpu, DF x, DF y)
{
  fp r = fp (x) + fp (y);
  check_result (fpu, r);
  DF tmp;
  r.pack (tmp);
  return tmp;
}

DF cgen_fp_ops::subdf (const cgen_fpu *fpu, DF x, DF y)
{
  fp r = fp (x) - fp (y);
  check_result (fpu, r);
  DF tmp;
  r.pack (tmp);
  return tmp;
}

DF cgen_fp_ops::muldf (const cgen_fpu *fpu, DF x, DF y)
{
  fp r = fp (x) * fp (y);
  check_result (fpu, r);
  DF tmp;
  r.pack (tmp);
  return tmp;
}

DF cgen_fp_ops::divdf (const cgen_fpu *fpu, DF x, DF y)
{
  fp r = fp (x) / fp (y);
  check_result (fpu, r);
  DF tmp;
  r.pack (tmp);
  return tmp;
}

DF cgen_fp_ops::negdf (const cgen_fpu *fpu, DF x)
{
  fp r (x);
  r = fp::neg (r);
  check_result (fpu, r);
  DF tmp;
  r.pack (tmp);
  return tmp;
}

DF cgen_fp_ops::absdf (const cgen_fpu *fpu, DF x)
{
  fp r (x);
  r = fp::abs (r);
  check_result (fpu, r);
  DF tmp;
  r.pack (tmp);
  return tmp;
}

DF cgen_fp_ops::sqrtdf (const cgen_fpu *fpu, DF x)
{
  fp r (x);
  r = fp::sqrt (r);
  check_result (fpu, r);
  DF tmp;
  r.pack (tmp);
  return tmp;
}

#if 0
DF cgen_fp_ops::invdf (const cgen_fpu*, DF);
DF cgen_fp_ops::cosdf (const cgen_fpu*, DF);
DF cgen_fp_ops::sindf (const cgen_fpu*, DF);
DF cgen_fp_ops::mindf (const cgen_fpu*, DF, DF);
DF cgen_fp_ops::maxdf (const cgen_fpu*, DF, DF);
#endif

int cgen_fp_ops::eqdf (const cgen_fpu *fpu, DF x, DF y)
{
  return fp (x) == fp (y);
}

int cgen_fp_ops::nedf (const cgen_fpu *fpu, DF x, DF y)
{
  return fp (x) == fp (y);
}
int cgen_fp_ops::ltdf (const cgen_fpu *fpu, DF x, DF y)
{
  return fp (x) < fp (y);
}
int cgen_fp_ops::ledf (const cgen_fpu *fpu, DF x, DF y)
{
  return fp (x) <= fp (y);
}
int cgen_fp_ops::gtdf (const cgen_fpu *fpu, DF x, DF y)
{
  return fp (x) > fp (y);
}
int cgen_fp_ops::gedf (const cgen_fpu *fpu, DF x, DF y)
{
  return fp (x) >= fp (y);
}

int cgen_fp_ops::unordereddf (const cgen_fpu *fpu, DF x, DF y)
{
  fp f1(x);
  fp f2(y);
  return f1.is_nan () || f2.is_nan ();
}

/* SF/DF conversion ops */

DF cgen_fp_ops::fextsfdf (const cgen_fpu *fpu, int how, SF x)
{
  fp r (x);
  DF tmp;
  r.pack (tmp);
  return tmp;
}

SF cgen_fp_ops::ftruncdfsf (const cgen_fpu *fpu, int how, DF x)
{
  fp r (x);
  SF tmp;
  r.pack (tmp);
  return tmp;
}

SF cgen_fp_ops::floatsisf (const cgen_fpu* fpu, int how, SI x)
{
  fp r = fp::from_int (x);
  check_result (fpu, r);
  SF tmp;
  r.pack (tmp);
  return tmp;
}

SF cgen_fp_ops::floatdisf (const cgen_fpu *fpu, int how, DI x)
{
  fp r = fp::from_int (x);
  check_result (fpu, r);
  DF tmp;
  r.pack (tmp);
  return tmp;
}

#if 0 // not implemented yet
SF cgen_fp_ops::ufloatsisf (const cgen_fpu*, int how, USI);
SF cgen_fp_ops::ufloatdisf (const cgen_fpu*, int how, UDI);
#endif // not implemented yet

SI cgen_fp_ops::fixsfsi (const cgen_fpu *fpu, int how, SF x)
{
  fp r (x);
  SI tmp;
  r.integer (tmp, fp::round_default);
  return tmp;
}

DI cgen_fp_ops::fixsfdi (const cgen_fpu *fpu, int how, SF x)
{
  fp r (x);
  DI tmp;
  r.integer (tmp, fp::round_default);
  return tmp;
}

#if 0 // not implemented yet
USI cgen_fp_ops::ufixsfsi (const cgen_fpu*, int how, SF);
UDI cgen_fp_ops::ufixsfdi (const cgen_fpu*, int how, SF);
#endif

DF cgen_fp_ops::floatsidf (const cgen_fpu *fpu, int how, SI x)
{
  fp r = fp::from_int (x);
  check_result (fpu, r);
  DF tmp;
  r.pack (tmp);
  return tmp;
}

DF cgen_fp_ops::floatdidf (const cgen_fpu *fpu, int how, DI x)
{
  fp r = fp::from_int (x);
  check_result (fpu, r);
  DF tmp;
  r.pack (tmp);
  return tmp;
}

#if 0
DF cgen_fp_ops::ufloatsidf (const cgen_fpu*, int how, USI);
DF cgen_fp_ops::ufloatdidf (const cgen_fpu*, int how, UDI);
#endif

SI cgen_fp_ops::fixdfsi (const cgen_fpu *fpu, int how, DF x)
{
  fp r (x);
  SI tmp;
  r.integer (tmp, fp::round_default);
  return tmp;
}

DI cgen_fp_ops::fixdfdi (const cgen_fpu *fpu, int how, DF x)
{
  fp r (x);
  DI tmp;
  r.integer (tmp, fp::round_default);
  return tmp;
}

#if 0
USI cgen_fp_ops::ufixdfsi (const cgen_fpu*, int how, DF);
UDI cgen_fp_ops::ufixdfdi (const cgen_fpu*, int how, DF);

/* XF mode support (kept separate 'cus not always present) */
XF cgen_fp_ops::addxf (const cgen_fpu*, XF, XF);
XF cgen_fp_ops::subxf (const cgen_fpu*, XF, XF);
XF cgen_fp_ops::mulxf (const cgen_fpu*, XF, XF);
XF cgen_fp_ops::divxf (const cgen_fpu*, XF, XF);
XF cgen_fp_ops::negxf (const cgen_fpu*, XF);
XF cgen_fp_ops::absxf (const cgen_fpu*, XF);
XF cgen_fp_ops::sqrtxf (const cgen_fpu*, XF);
XF cgen_fp_ops::invxf (const cgen_fpu*, XF);
XF cgen_fp_ops::cosxf (const cgen_fpu*, XF);
XF cgen_fp_ops::sinxf (const cgen_fpu*, XF);
XF cgen_fp_ops::minxf (const cgen_fpu*, XF, XF);
XF cgen_fp_ops::maxxf (const cgen_fpu*, XF, XF);

int cgen_fp_ops::eqxf (const cgen_fpu*, XF, XF);
int cgen_fp_ops::nexf (const cgen_fpu*, XF, XF);
int cgen_fp_ops::ltxf (const cgen_fpu*, XF, XF);
int cgen_fp_ops::lexf (const cgen_fpu*, XF, XF);
int cgen_fp_ops::gtxf (const cgen_fpu*, XF, XF);
int cgen_fp_ops::gexf (const cgen_fpu*, XF, XF);

XF cgen_fp_ops::extsfxf (const cgen_fpu*, int how, SF);
XF cgen_fp_ops::extdfxf (const cgen_fpu*, int how, DF);
SF cgen_fp_ops::truncxfsf (const cgen_fpu*, int how, XF);
DF cgen_fp_ops::truncxfdf (const cgen_fpu*, int how, XF);

XF cgen_fp_ops::floatsixf (const cgen_fpu*, int how, SI);
XF cgen_fp_ops::floatdixf (const cgen_fpu*, int how, DI);
XF cgen_fp_ops::ufloatsixf (const cgen_fpu*, int how, USI);
XF cgen_fp_ops::ufloatdixf (const cgen_fpu*, int how, UDI);

SI cgen_fp_ops::fixxfsi (const cgen_fpu*, int how, XF);
DI cgen_fp_ops::fixxfdi (const cgen_fpu*, int how, XF);
USI cgen_fp_ops::ufixxfsi (const cgen_fpu*, int how, XF);
UDI cgen_fp_ops::ufixxfdi (const cgen_fpu*, int how, XF);

/* TF mode support (kept separate 'cus not always present) */
TF cgen_fp_ops::addtf (const cgen_fpu*, TF, TF);
TF cgen_fp_ops::subtf (const cgen_fpu*, TF, TF);
TF cgen_fp_ops::multf (const cgen_fpu*, TF, TF);
TF cgen_fp_ops::divtf (const cgen_fpu*, TF, TF);
TF cgen_fp_ops::negtf (const cgen_fpu*, TF);
TF cgen_fp_ops::abstf (const cgen_fpu*, TF);
TF cgen_fp_ops::sqrttf (const cgen_fpu*, TF);
TF cgen_fp_ops::invtf (const cgen_fpu*, TF);
TF cgen_fp_ops::costf (const cgen_fpu*, TF);
TF cgen_fp_ops::sintf (const cgen_fpu*, TF);
TF cgen_fp_ops::mintf (const cgen_fpu*, TF, TF);
TF cgen_fp_ops::maxtf (const cgen_fpu*, TF, TF);

int cgen_fp_ops::eqtf (const cgen_fpu*, TF, TF);
int cgen_fp_ops::netf (const cgen_fpu*, TF, TF);
int cgen_fp_ops::lttf (const cgen_fpu*, TF, TF);
int cgen_fp_ops::letf (const cgen_fpu*, TF, TF);
int cgen_fp_ops::gttf (const cgen_fpu*, TF, TF);
int cgen_fp_ops::getf (const cgen_fpu*, TF, TF);

TF cgen_fp_ops::extsftf (const cgen_fpu*, int how, SF);
TF cgen_fp_ops::extdftf (const cgen_fpu*, int how, DF);
SF cgen_fp_ops::trunctfsf (const cgen_fpu*, int how, TF);
DF cgen_fp_ops::trunctfdf (const cgen_fpu*, int how, TF);

TF cgen_fp_ops::floatsitf (const cgen_fpu*, int how, SI);
TF cgen_fp_ops::floatditf (const cgen_fpu*, int how, DI);
TF cgen_fp_ops::ufloatsitf (const cgen_fpu*, int how, USI);
TF cgen_fp_ops::ufloatditf (const cgen_fpu*, int how, UDI);

SI cgen_fp_ops::fixtfsi (const cgen_fpu*, int how, TF);
DI cgen_fp_ops::fixtfdi (const cgen_fpu*, int how, TF);
USI cgen_fp_ops::ufixtfsi (const cgen_fpu*, int how, TF);
UDI cgen_fp_ops::ufixtfdi (const cgen_fpu*, int how, TF);
#endif // not implemented yet

}; // namespace cgen 
@


1.3
log
@2006-06-14  Dave Brolley  <brolley@@redhat.com>

        * cgen-fpu.h (cgen_fp_ops): All operations now take
        const cgen_fpu*.
        * cgen-fpu.cxx: Likewise.
@
text
@d4 1
a4 1
// Copyright (C) 2005 Red Hat.
d233 2
a234 1
DF cgen_fp_ops::fextsfdf (const cgen_fpu *fpu, SF x)
d242 1
a242 1
SF cgen_fp_ops::ftruncdfsf (const cgen_fpu *fpu, DF x)
d250 1
a250 1
SF cgen_fp_ops::floatsisf (const cgen_fpu* fpu, SI x)
d259 1
a259 1
SF cgen_fp_ops::floatdisf (const cgen_fpu *fpu, DI x)
d269 2
a270 2
SF cgen_fp_ops::ufloatsisf (const cgen_fpu*, USI);
SF cgen_fp_ops::ufloatdisf (const cgen_fpu*, UDI);
d273 1
a273 1
SI cgen_fp_ops::fixsfsi (const cgen_fpu *fpu, SF x)
d281 1
a281 1
DI cgen_fp_ops::fixsfdi (const cgen_fpu *fpu, SF x)
d290 2
a291 2
USI cgen_fp_ops::ufixsfsi (const cgen_fpu*, SF)
UDI cgen_fp_ops::ufixsfdi (const cgen_fpu*, SF);
d293 2
a294 1
DF cgen_fp_ops::floatsidf (const cgen_fpu *fpu, SI x)
d303 1
a303 1
DF cgen_fp_ops::floatdidf (const cgen_fpu *fpu, DI x)
d313 2
a314 2
DF cgen_fp_ops::ufloatsidf (const cgen_fpu*, USI);
DF cgen_fp_ops::ufloatdidf (const cgen_fpu*, UDI);
d316 2
a317 1
SI cgen_fp_ops::fixdfsi (const cgen_fpu *fpu, DF x)
d325 1
a325 1
DI cgen_fp_ops::fixdfdi (const cgen_fpu *fpu, DF x)
d334 2
a335 2
USI cgen_fp_ops::ufixdfsi (const cgen_fpu*, DF);
UDI cgen_fp_ops::ufixdfdi (const cgen_fpu*, DF);
d358 14
a371 14
XF cgen_fp_ops::extsfxf (const cgen_fpu*, SF);
XF cgen_fp_ops::extdfxf (const cgen_fpu*, DF);
SF cgen_fp_ops::truncxfsf (const cgen_fpu*, XF);
DF cgen_fp_ops::truncxfdf (const cgen_fpu*, XF);

XF cgen_fp_ops::floatsixf (const cgen_fpu*, SI);
XF cgen_fp_ops::floatdixf (const cgen_fpu*, DI);
XF cgen_fp_ops::ufloatsixf (const cgen_fpu*, USI);
XF cgen_fp_ops::ufloatdixf (const cgen_fpu*, UDI);

SI cgen_fp_ops::fixxfsi (const cgen_fpu*, XF);
DI cgen_fp_ops::fixxfdi (const cgen_fpu*, XF);
USI cgen_fp_ops::ufixxfsi (const cgen_fpu*, XF);
UDI cgen_fp_ops::ufixxfdi (const cgen_fpu*, XF);
d394 14
a407 14
TF cgen_fp_ops::extsftf (const cgen_fpu*, SF);
TF cgen_fp_ops::extdftf (const cgen_fpu*, DF);
SF cgen_fp_ops::trunctfsf (const cgen_fpu*, TF);
DF cgen_fp_ops::trunctfdf (const cgen_fpu*, TF);

TF cgen_fp_ops::floatsitf (const cgen_fpu*, SI);
TF cgen_fp_ops::floatditf (const cgen_fpu*, DI);
TF cgen_fp_ops::ufloatsitf (const cgen_fpu*, USI);
TF cgen_fp_ops::ufloatditf (const cgen_fpu*, UDI);

SI cgen_fp_ops::fixtfsi (const cgen_fpu*, TF);
DI cgen_fp_ops::fixtfdi (const cgen_fpu*, TF);
USI cgen_fp_ops::ufixtfsi (const cgen_fpu*, TF);
UDI cgen_fp_ops::ufixtfdi (const cgen_fpu*, TF);
@


1.2
log
@2006-05-10  Dave Brolley  <brolley@@redhat.com>

        * fp.cxx (fp::integer (long long&, round_mode_t)): New method.
        (fp::integer (unsigned long long&, round_mode_t)): New method.
        * fp.h: Likewise.
        * cgen-fpu.cxx (unorderedsf): New method.
        (adddf, subdf, muldf, divdf, negdf, absdf, sqrtdf): Implemented.
        (eqdf, ltdf, ledf, gtdf, gedf, gedf): Implemented.
        (unordereddf): New method.
        (unordereddf, fextsfdf): Implemented.
        (floatdisf, fixsfsi, fixsfdi, floatsidf, floatdidf, fixdfsi)
        (fixdfdi): Implemented.
        * cgen-fpu.h: Likewise.
@
text
@d17 1
a17 1
cgen_fp_ops::addsf (cgen_fpu* fpu, SF x, SF y)
d26 1
a26 1
SF cgen_fp_ops::subsf (cgen_fpu* fpu, SF x, SF y)
d35 1
a35 1
SF cgen_fp_ops::mulsf (cgen_fpu* fpu, SF x, SF y)
d44 1
a44 1
SF cgen_fp_ops::divsf (cgen_fpu* fpu, SF x, SF y)
d53 1
a53 1
SF cgen_fp_ops::negsf (cgen_fpu* fpu, SF x)
d63 1
a63 1
SF cgen_fp_ops::abssf (cgen_fpu* fpu, SF x)
d73 1
a73 1
SF cgen_fp_ops::sqrtsf (cgen_fpu* fpu, SF x)
d85 5
a89 5
SF cgen_fp_ops::invsf (cgen_fpu*, SF);
SF cgen_fp_ops::cossf (cgen_fpu*, SF);
SF cgen_fp_ops::sinsf (cgen_fpu*, SF);
SF cgen_fp_ops::minsf (cgen_fpu*, SF, SF);
SF cgen_fp_ops::maxsf (cgen_fpu*, SF, SF);
d92 1
a92 1
int cgen_fp_ops::eqsf (cgen_fpu*, SF x, SF y)
d96 1
a96 1
int cgen_fp_ops::nesf (cgen_fpu*, SF x, SF y)
d100 1
a100 1
int cgen_fp_ops::ltsf (cgen_fpu*, SF x, SF y)
d104 1
a104 1
int cgen_fp_ops::lesf (cgen_fpu*, SF x, SF y)
d108 1
a108 1
int cgen_fp_ops::gtsf (cgen_fpu*, SF x, SF y)
d112 1
a112 1
int cgen_fp_ops::gesf (cgen_fpu*, SF x, SF y)
d117 1
a117 1
int cgen_fp_ops::unorderedsf (cgen_fpu*, SF x, SF y)
d125 1
a125 1
DF cgen_fp_ops::adddf (cgen_fpu *fpu, DF x, DF y)
d134 1
a134 1
DF cgen_fp_ops::subdf (cgen_fpu *fpu, DF x, DF y)
d143 1
a143 1
DF cgen_fp_ops::muldf (cgen_fpu *fpu, DF x, DF y)
d152 1
a152 1
DF cgen_fp_ops::divdf (cgen_fpu *fpu, DF x, DF y)
d161 1
a161 1
DF cgen_fp_ops::negdf (cgen_fpu *fpu, DF x)
d171 1
a171 1
DF cgen_fp_ops::absdf (cgen_fpu *fpu, DF x)
d181 1
a181 1
DF cgen_fp_ops::sqrtdf (cgen_fpu *fpu, DF x)
d192 5
a196 5
DF cgen_fp_ops::invdf (cgen_fpu*, DF);
DF cgen_fp_ops::cosdf (cgen_fpu*, DF);
DF cgen_fp_ops::sindf (cgen_fpu*, DF);
DF cgen_fp_ops::mindf (cgen_fpu*, DF, DF);
DF cgen_fp_ops::maxdf (cgen_fpu*, DF, DF);
d199 1
a199 1
int cgen_fp_ops::eqdf (cgen_fpu *fpu, DF x, DF y)
d204 1
a204 1
int cgen_fp_ops::nedf (cgen_fpu *fpu, DF x, DF y)
d208 1
a208 1
int cgen_fp_ops::ltdf (cgen_fpu *fpu, DF x, DF y)
d212 1
a212 1
int cgen_fp_ops::ledf (cgen_fpu *fpu, DF x, DF y)
d216 1
a216 1
int cgen_fp_ops::gtdf (cgen_fpu *fpu, DF x, DF y)
d220 1
a220 1
int cgen_fp_ops::gedf (cgen_fpu *fpu, DF x, DF y)
d225 1
a225 1
int cgen_fp_ops::unordereddf (cgen_fpu *fpu, DF x, DF y)
d233 1
a233 1
DF cgen_fp_ops::fextsfdf (cgen_fpu *fpu, SF x)
d241 1
a241 1
SF cgen_fp_ops::ftruncdfsf (cgen_fpu *fpu, DF x)
d249 1
a249 1
SF cgen_fp_ops::floatsisf (cgen_fpu* fpu, SI x)
d258 1
a258 1
SF cgen_fp_ops::floatdisf (cgen_fpu *fpu, DI x)
d268 2
a269 2
SF cgen_fp_ops::ufloatsisf (cgen_fpu*, USI);
SF cgen_fp_ops::ufloatdisf (cgen_fpu*, UDI);
d272 1
a272 1
SI cgen_fp_ops::fixsfsi (cgen_fpu *fpu, SF x)
d280 1
a280 1
DI cgen_fp_ops::fixsfdi (cgen_fpu *fpu, SF x)
d289 2
a290 2
USI cgen_fp_ops::ufixsfsi (cgen_fpu*, SF)
UDI cgen_fp_ops::ufixsfdi (cgen_fpu*, SF);
d292 1
a292 1
DF cgen_fp_ops::floatsidf (cgen_fpu *fpu, SI x)
d301 1
a301 1
DF cgen_fp_ops::floatdidf (cgen_fpu *fpu, DI x)
d311 2
a312 2
DF cgen_fp_ops::ufloatsidf (cgen_fpu*, USI);
DF cgen_fp_ops::ufloatdidf (cgen_fpu*, UDI);
d314 1
a314 1
SI cgen_fp_ops::fixdfsi (cgen_fpu *fpu, DF x)
d322 1
a322 1
DI cgen_fp_ops::fixdfdi (cgen_fpu *fpu, DF x)
d331 2
a332 2
USI cgen_fp_ops::ufixdfsi (cgen_fpu*, DF);
UDI cgen_fp_ops::ufixdfdi (cgen_fpu*, DF);
d335 34
a368 34
XF cgen_fp_ops::addxf (cgen_fpu*, XF, XF);
XF cgen_fp_ops::subxf (cgen_fpu*, XF, XF);
XF cgen_fp_ops::mulxf (cgen_fpu*, XF, XF);
XF cgen_fp_ops::divxf (cgen_fpu*, XF, XF);
XF cgen_fp_ops::negxf (cgen_fpu*, XF);
XF cgen_fp_ops::absxf (cgen_fpu*, XF);
XF cgen_fp_ops::sqrtxf (cgen_fpu*, XF);
XF cgen_fp_ops::invxf (cgen_fpu*, XF);
XF cgen_fp_ops::cosxf (cgen_fpu*, XF);
XF cgen_fp_ops::sinxf (cgen_fpu*, XF);
XF cgen_fp_ops::minxf (cgen_fpu*, XF, XF);
XF cgen_fp_ops::maxxf (cgen_fpu*, XF, XF);

int cgen_fp_ops::eqxf (cgen_fpu*, XF, XF);
int cgen_fp_ops::nexf (cgen_fpu*, XF, XF);
int cgen_fp_ops::ltxf (cgen_fpu*, XF, XF);
int cgen_fp_ops::lexf (cgen_fpu*, XF, XF);
int cgen_fp_ops::gtxf (cgen_fpu*, XF, XF);
int cgen_fp_ops::gexf (cgen_fpu*, XF, XF);

XF cgen_fp_ops::extsfxf (cgen_fpu*, SF);
XF cgen_fp_ops::extdfxf (cgen_fpu*, DF);
SF cgen_fp_ops::truncxfsf (cgen_fpu*, XF);
DF cgen_fp_ops::truncxfdf (cgen_fpu*, XF);

XF cgen_fp_ops::floatsixf (cgen_fpu*, SI);
XF cgen_fp_ops::floatdixf (cgen_fpu*, DI);
XF cgen_fp_ops::ufloatsixf (cgen_fpu*, USI);
XF cgen_fp_ops::ufloatdixf (cgen_fpu*, UDI);

SI cgen_fp_ops::fixxfsi (cgen_fpu*, XF);
DI cgen_fp_ops::fixxfdi (cgen_fpu*, XF);
USI cgen_fp_ops::ufixxfsi (cgen_fpu*, XF);
UDI cgen_fp_ops::ufixxfdi (cgen_fpu*, XF);
d371 34
a404 34
TF cgen_fp_ops::addtf (cgen_fpu*, TF, TF);
TF cgen_fp_ops::subtf (cgen_fpu*, TF, TF);
TF cgen_fp_ops::multf (cgen_fpu*, TF, TF);
TF cgen_fp_ops::divtf (cgen_fpu*, TF, TF);
TF cgen_fp_ops::negtf (cgen_fpu*, TF);
TF cgen_fp_ops::abstf (cgen_fpu*, TF);
TF cgen_fp_ops::sqrttf (cgen_fpu*, TF);
TF cgen_fp_ops::invtf (cgen_fpu*, TF);
TF cgen_fp_ops::costf (cgen_fpu*, TF);
TF cgen_fp_ops::sintf (cgen_fpu*, TF);
TF cgen_fp_ops::mintf (cgen_fpu*, TF, TF);
TF cgen_fp_ops::maxtf (cgen_fpu*, TF, TF);

int cgen_fp_ops::eqtf (cgen_fpu*, TF, TF);
int cgen_fp_ops::netf (cgen_fpu*, TF, TF);
int cgen_fp_ops::lttf (cgen_fpu*, TF, TF);
int cgen_fp_ops::letf (cgen_fpu*, TF, TF);
int cgen_fp_ops::gttf (cgen_fpu*, TF, TF);
int cgen_fp_ops::getf (cgen_fpu*, TF, TF);

TF cgen_fp_ops::extsftf (cgen_fpu*, SF);
TF cgen_fp_ops::extdftf (cgen_fpu*, DF);
SF cgen_fp_ops::trunctfsf (cgen_fpu*, TF);
DF cgen_fp_ops::trunctfdf (cgen_fpu*, TF);

TF cgen_fp_ops::floatsitf (cgen_fpu*, SI);
TF cgen_fp_ops::floatditf (cgen_fpu*, DI);
TF cgen_fp_ops::ufloatsitf (cgen_fpu*, USI);
TF cgen_fp_ops::ufloatditf (cgen_fpu*, UDI);

SI cgen_fp_ops::fixtfsi (cgen_fpu*, TF);
DI cgen_fp_ops::fixtfdi (cgen_fpu*, TF);
USI cgen_fp_ops::ufixtfsi (cgen_fpu*, TF);
UDI cgen_fp_ops::ufixtfdi (cgen_fpu*, TF);
@


1.1
log
@2005-08-19  Dave Brolley  <brolley@@redhat.com>

        * cgen-fpu.cxx: New file.
        * cgen-fpu.h: New file.
        * Makefile.am (libcgencpu_la_SOURCES): Add cgen-fpu.cxx.
        * Makefile.in: Regenerated.
        * Contribute the following enhancements to floating point
        support:

        2005-06-14  Dave Brolley  <brolley@@redhat.com>

        * fp.h (do_round,do_normal_round,do_normal_underflow,do_normal_overflow)
:
        Now virtual.
        * fp.cxx (do_normal_overflow): Round up to infinity only if
        the result is positive.
        (operator-): Don't apply 'neg' to a nan.
        (neg): Return src if it is a qnan.

        2005-05-20  Dave Brolley  <brolley@@redhat.com>

        * fp.cxx (pack_any): Ensure that nan results have a positive sign.
        (operator-): Simply call operator+ with the rhs negated.
        * fp.h (is_negative): New method of fp.

        2005-05-13  Dave Brolley  <brolley@@redhat.com>

        * fp.h (fp): All arithmetic operator methods are now members
        of class fp.
        * fp.cxx (fp): Likewise.

        2005-04-27  Dave Brolley  <brolley@@redhat.com>

        * fp.cxx (fp::unpack): Only perform sanity check for non-nans.

        2005-04-12  Dave Brolley  <brolley@@redhat.com>

        * fp.h: Move static constants and functions to top of file for
        visibility within the file.
        (get_status): New method of fp.
        (get_class): Likewise.
        (qnan_fraction): Likewise.
        (snan_fraction): Likewise.
        (qnan_exponent): Likewise.
        (snan_exponent): Likewise.
        * fp.cxx (fp_to_int): throw fp::overflow for overflow.
        (pack_any): Use [sq]nan_{exponent,fraction} to construct nans.
        (unpack): Initialize status to 'ok'. Set class and status using
        is_qnan_fraction and is_qnan respectively.

        2005-03-18  Dave Brolley  <brolley@@redhat.com>

        * fp.cxx: Move static items from here.
        * fp.h: To here. Make some methods virtual. Make private members
        protected.
        (is_inexact): New method.
@
text
@d117 74
a191 8
/* basic DF ops */
DF cgen_fp_ops::adddf (cgen_fpu*, DF, DF);
DF cgen_fp_ops::subdf (cgen_fpu*, DF, DF);
DF cgen_fp_ops::muldf (cgen_fpu*, DF, DF);
DF cgen_fp_ops::divdf (cgen_fpu*, DF, DF);
DF cgen_fp_ops::negdf (cgen_fpu*, DF);
DF cgen_fp_ops::absdf (cgen_fpu*, DF);
DF cgen_fp_ops::sqrtdf (cgen_fpu*, DF);
d197 1
d199 49
a247 10
int cgen_fp_ops::eqdf (cgen_fpu*, DF, DF);
int cgen_fp_ops::nedf (cgen_fpu*, DF, DF);
int cgen_fp_ops::ltdf (cgen_fpu*, DF, DF);
int cgen_fp_ops::ledf (cgen_fpu*, DF, DF);
int cgen_fp_ops::gtdf (cgen_fpu*, DF, DF);
int cgen_fp_ops::gedf (cgen_fpu*, DF, DF);

  /* SF/DF conversion ops */
DF cgen_fp_ops::fextsfdf (cgen_fpu*, SF);
SF cgen_fp_ops::ftruncdfsf (cgen_fpu*, DF);
a248 1
#endif // not implemented yet
d257 10
a267 1
SF cgen_fp_ops::floatdisf (cgen_fpu*, DI);
d272 9
a280 1
SI cgen_fp_ops::fixsfsi (cgen_fpu*, SF x)
d283 1
a283 1
  unsigned int tmp;
d287 1
a288 1
DI cgen_fp_ops::fixsfdi (cgen_fpu*, SF);
d291 18
d310 1
a310 2
DF cgen_fp_ops::floatsidf (cgen_fpu*, SI);
DF cgen_fp_ops::floatdidf (cgen_fpu*, DI);
d313 8
d322 9
a330 2
SI cgen_fp_ops::fixdfsi (cgen_fpu*, DF);
DI cgen_fp_ops::fixdfdi (cgen_fpu*, DF);
@

