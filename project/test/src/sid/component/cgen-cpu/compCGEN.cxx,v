head	1.23;
access;
symbols
	sid-snapshot-20180601:1.23
	sid-snapshot-20180501:1.23
	sid-snapshot-20180401:1.23
	sid-snapshot-20180301:1.23
	sid-snapshot-20180201:1.23
	sid-snapshot-20180101:1.23
	sid-snapshot-20171201:1.23
	sid-snapshot-20171101:1.23
	sid-snapshot-20171001:1.23
	sid-snapshot-20170901:1.23
	sid-snapshot-20170801:1.23
	sid-snapshot-20170701:1.23
	sid-snapshot-20170601:1.23
	sid-snapshot-20170501:1.23
	sid-snapshot-20170401:1.23
	sid-snapshot-20170301:1.23
	sid-snapshot-20170201:1.23
	sid-snapshot-20170101:1.23
	sid-snapshot-20161201:1.23
	sid-snapshot-20161101:1.23
	sid-snapshot-20160901:1.23
	sid-snapshot-20160801:1.23
	sid-snapshot-20160701:1.23
	sid-snapshot-20160601:1.23
	sid-snapshot-20160501:1.23
	sid-snapshot-20160401:1.23
	sid-snapshot-20160301:1.23
	sid-snapshot-20160201:1.23
	sid-snapshot-20160101:1.23
	sid-snapshot-20151201:1.23
	sid-snapshot-20151101:1.23
	sid-snapshot-20151001:1.23
	sid-snapshot-20150901:1.23
	sid-snapshot-20150801:1.23
	sid-snapshot-20150701:1.23
	sid-snapshot-20150601:1.23
	sid-snapshot-20150501:1.23
	sid-snapshot-20150401:1.23
	sid-snapshot-20150301:1.23
	sid-snapshot-20150201:1.23
	sid-snapshot-20150101:1.23
	sid-snapshot-20141201:1.23
	sid-snapshot-20141101:1.23
	sid-snapshot-20141001:1.23
	sid-snapshot-20140901:1.23
	sid-snapshot-20140801:1.23
	sid-snapshot-20140701:1.23
	sid-snapshot-20140601:1.23
	sid-snapshot-20140501:1.23
	sid-snapshot-20140401:1.23
	sid-snapshot-20140301:1.23
	sid-snapshot-20140201:1.23
	sid-snapshot-20140101:1.23
	sid-snapshot-20131201:1.23
	sid-snapshot-20131101:1.23
	sid-snapshot-20131001:1.23
	sid-snapshot-20130901:1.23
	sid-snapshot-20130801:1.23
	sid-snapshot-20130701:1.23
	sid-snapshot-20130601:1.23
	sid-snapshot-20130501:1.23
	sid-snapshot-20130401:1.23
	sid-snapshot-20130301:1.23
	sid-snapshot-20130201:1.23
	sid-snapshot-20130101:1.23
	sid-snapshot-20121201:1.23
	sid-snapshot-20121101:1.23
	sid-snapshot-20121001:1.23
	sid-snapshot-20120901:1.23
	sid-snapshot-20120801:1.23
	sid-snapshot-20120701:1.23
	sid-snapshot-20120601:1.23
	sid-snapshot-20120501:1.23
	sid-snapshot-20120401:1.23
	sid-snapshot-20120301:1.23
	sid-snapshot-20120201:1.23
	sid-snapshot-20120101:1.23
	sid-snapshot-20111201:1.23
	sid-snapshot-20111101:1.23
	sid-snapshot-20111001:1.23
	sid-snapshot-20110901:1.23
	sid-snapshot-20110801:1.23
	sid-snapshot-20110701:1.23
	sid-snapshot-20110601:1.23
	sid-snapshot-20110501:1.23
	sid-snapshot-20110401:1.23
	sid-snapshot-20110301:1.23
	sid-snapshot-20110201:1.23
	sid-snapshot-20110101:1.23
	sid-snapshot-20101201:1.23
	sid-snapshot-20101101:1.23
	sid-snapshot-20101001:1.23
	sid-snapshot-20100901:1.23
	sid-snapshot-20100801:1.23
	sid-snapshot-20100701:1.23
	sid-snapshot-20100601:1.23
	sid-snapshot-20100501:1.23
	sid-snapshot-20100401:1.23
	sid-snapshot-20100301:1.23
	sid-snapshot-20100201:1.23
	sid-snapshot-20100101:1.23
	sid-snapshot-20091201:1.23
	sid-snapshot-20091101:1.23
	sid-snapshot-20091001:1.23
	sid-snapshot-20090901:1.23
	sid-snapshot-20090801:1.23
	sid-snapshot-20090701:1.23
	sid-snapshot-20090601:1.23
	sid-snapshot-20090501:1.23
	sid-snapshot-20090401:1.23
	sid-snapshot-20090301:1.23
	sid-snapshot-20090201:1.22
	sid-snapshot-20090101:1.22
	sid-snapshot-20081201:1.22
	sid-snapshot-20081101:1.22
	sid-snapshot-20081001:1.22
	sid-snapshot-20080901:1.22
	sid-snapshot-20080801:1.22
	sid-snapshot-20080701:1.22
	sid-snapshot-20080601:1.22
	sid-snapshot-20080501:1.22
	sid-snapshot-20080403:1.22
	sid-snapshot-20080401:1.22
	sid-snapshot-20080301:1.22
	sid-snapshot-20080201:1.22
	sid-snapshot-20080101:1.22
	sid-snapshot-20071201:1.22
	sid-snapshot-20071101:1.22
	sid-snapshot-20071001:1.22
	sid-20020905-branchpoint:1.8
	sid-20020905-branch:1.8.0.2
	cygnus_cvs_20020108_pre:1.7;
locks; strict;
comment	@// @;


1.23
date	2009.02.03.21.29.28;	author dj;	state Exp;
branches;
next	1.22;

1.22
date	2007.02.05.20.28.39;	author brolley;	state Exp;
branches;
next	1.21;

1.21
date	2006.10.23.21.11.51;	author brolley;	state Exp;
branches;
next	1.20;

1.20
date	2006.10.18.18.37.51;	author brolley;	state Exp;
branches;
next	1.19;

1.19
date	2006.06.20.18.31.51;	author brolley;	state Exp;
branches;
next	1.18;

1.18
date	2006.05.11.14.33.40;	author brolley;	state Exp;
branches;
next	1.17;

1.17
date	2006.03.01.21.07.00;	author fche;	state Exp;
branches;
next	1.16;

1.16
date	2005.12.16.10.23.12;	author nathan;	state Exp;
branches;
next	1.15;

1.15
date	2005.10.28.19.53.33;	author brolley;	state Exp;
branches;
next	1.14;

1.14
date	2005.06.15.21.26.02;	author brolley;	state Exp;
branches;
next	1.13;

1.13
date	2004.06.25.17.44.35;	author brolley;	state Exp;
branches;
next	1.12;

1.12
date	2003.08.29.19.26.22;	author brolley;	state Exp;
branches;
next	1.11;

1.11
date	2003.01.15.20.04.57;	author brolley;	state Exp;
branches;
next	1.10;

1.10
date	2003.01.08.04.08.29;	author bje;	state Exp;
branches;
next	1.9;

1.9
date	2002.10.03.21.00.17;	author brolley;	state Exp;
branches;
next	1.8;

1.8
date	2002.02.07.17.32.28;	author fche;	state Exp;
branches;
next	1.7;

1.7
date	2001.12.28.21.16.49;	author fche;	state Exp;
branches;
next	1.6;

1.6
date	2001.12.17.09.31.19;	author mrg;	state Exp;
branches;
next	1.5;

1.5
date	2001.11.08.21.55.11;	author fche;	state Exp;
branches;
next	1.4;

1.4
date	2001.08.04.12.04.47;	author bje;	state Exp;
branches;
next	1.3;

1.3
date	2001.08.03.06.02.42;	author mrg;	state Exp;
branches;
next	1.2;

1.2
date	2001.06.28.21.54.08;	author jjohnstn;	state Exp;
branches;
next	1.1;

1.1
date	2000.12.07.19.30.47;	author fche;	state Exp;
branches;
next	;


desc
@@


1.23
log
@* compCGEN.cxx: Update to new MeP configuration.
* Makefile.am: Update to new MeP configuration.
* Makefile.in: Likewise.
* common_model.cxx: Likewise.
* mep-core1-decode.cxx: Likewise.
* mep-cpu.h: Likewise.
* mep-decode.cxx: Likewise.
* mep-desc.h: Likewise.
* mep.h: Likewise.
* mm_int.h (no_relation_component): Update to new MeP configuration.
* mepCfg.cxx (MepMemCfg): Update to new MeP configuration.
* mainDynamic.cxx (mk_sample): Update to new MeP configuration.
@
text
@// compCGEN.cxx - CPU components.  -*- C++ -*-

// Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2006 Red Hat.
// This file is part of SID and is licensed under the GPL.
// See the file COPYING.SID for conditions for redistribution.

#include "config.h"
#include "tconfig.h"

#include <vector>
#include <string>
#include <algorithm>
#include <functional>

#include "cgen-cpu.h"

extern "C" {
#include "bfd.h"
#include "dis-asm.h"
}
#include "tracedis.h"

#if SIDTARGET_ARM
#include "arm7f.h"
#endif
#if SIDTARGET_M32R
#include "m32rbf.h"
#endif
#if SIDTARGET_MEP
#include "mep_basic.h"
// begin-mep-includes
#include "mep_ext1.h"
// end-mep-includes
#endif
#if SIDTARGET_MT
#include "mt.h"
#endif
#if SIDTARGET_SH || SIDTARGET_SH64
#include "sh2.h"
#include "sh2e.h"
#include "sh2a_fpu.h"
#include "sh2a_nofpu.h"
#include "sh3.h"
#include "sh3e.h"
#include "sh4.h"
#include "sh4_nofpu.h"
#include "sh4a.h"
#include "sh4a_nofpu.h"
#include "sh4al.h"
#endif
#if SIDTARGET_SH64
#include "sh5.h"
#endif
#if SIDTARGET_XSTORMY16
#include "xstormy16.h"
#endif

using namespace std;
using namespace sid;
using namespace sidutil;
using namespace cgen;


// ----------------------------------------------------------------------------
cgen_bi_endian_cpu::cgen_bi_endian_cpu ()
{
  loader = 0;
  branch_was_return = false;
  warnings_enabled = false;
  add_attribute ("enable-warnings?", & warnings_enabled, "setting");
  this->engine_type = ENGINE_UNKNOWN;
  add_attribute_virtual ("engine-type", this, 
			 & cgen_bi_endian_cpu::set_engine_type,
			 & cgen_bi_endian_cpu::get_engine_type,
			 "setting");
  add_uni_relation("loader", &loader);
  add_pin ("disassembly-symbol-address", & disassembly_symbol_address_pin);
}


cgen_bi_endian_cpu::~cgen_bi_endian_cpu () throw()
{
}



#if 0
void 
bi_endian_cpu::destream_state (istream& i)
{
  // call base class first
  cgen_bi_endian_cpu::destream_state (i);

  string key;
  i >> key;
  if (key != "endianness")
    {
      i.setstate (ios::badbit);
      return;
    }

  i >> endian;
  update_endian ();
}
#endif


// ----------------------------------------------------------------------------

#if 0
void
cgen_cpu::stream_state (ostream& o) const
{
  o << "cgen-cpu "
    << trace_result_p << " " 
    << trace_extract_p << " "
    << step_insn_count << " "
    << warnings_enabled << " "
    << static_cast<int>(engine_type) << " "
    << step_cycles;
}


void
cgen_cpu::destream_state (istream& i)
{
  string key;

  i >> key;
  if (key != "cgen-cpu")
    {
      i.setstate (ios::badbit);
      return;
    }

  i >> trace_result_p
    >> trace_extract_p
    >> step_insn_count
    >> warnings_enabled;
  int et;
  i >> et;
  engine_type = static_cast<enum engine_type>(et);
  i >> step_cycles;
}

#endif

// Basic engine support.

string
cgen_bi_endian_cpu::get_engine_type ()
{
  switch (this->engine_type)
    {
    case ENGINE_UNKNOWN : return "unknown";
    case ENGINE_SIMPLE : return "simple";
    case ENGINE_SCACHE : return "scache";
    case ENGINE_PBB : return "pbb";
    }
  assert (("bad engine_type", 0));
}

component::status
cgen_bi_endian_cpu::set_engine_type (const string& s)
{
  if (s == "simple")
    this->engine_type = ENGINE_SIMPLE;
  else if (s == "scache")
    this->engine_type = ENGINE_SCACHE;
  else if (s == "pbb")
    this->engine_type = ENGINE_PBB;
  else
    return component::bad_value;
  return component::ok;
}


// Disassembly support.

void
cgen::cgen_bi_endian_cpu::disassemble (PCADDR pc,
  disassembler_ftype printfn,
  enum bfd_flavour flavour,
  enum bfd_architecture arch,
  enum bfd_endian endian,
  const char *name,
  CGEN_BITSET *isas,
  int machine)
{
  cgen_disassemble((bfd_vma)pc, &this->info, this,
                   & cgen_bi_endian_cpu::cgen_read_memory,
                   & cgen_bi_endian_cpu::cgen_memory_error,
                   & cgen_bi_endian_cpu::cgen_print_address,
                   & cgen_bi_endian_cpu::cgen_symbol_at_address,
                   printfn,
                   flavour,
                   arch,
		   machine,
                   endian,
		   name,
		   isas);
}

int
cgen_bi_endian_cpu::cgen_read_memory(bfd_vma memaddr, bfd_byte *myaddr,
		     unsigned int length,
		     struct disassemble_info *info)
{
  cgen_bi_endian_cpu *thisp = static_cast<cgen_bi_endian_cpu *>(info->application_data);

  switch (length) {
#if 0 // XXX not sure if this has byte order dependancies or not
  case 1:
    *((host_int_1 *)myaddr) = thisp->read_insn_memory_1(0, memaddr);
    break;
  case 2:
    *((host_int_2 *)myaddr) = thisp->read_insn_memory_2(0, memaddr);
    break;
  case 4:
    *((host_int_4 *)myaddr) = thisp->read_insn_memory_4(0, memaddr);
    break;
  case 8:
    *((host_int_8 *)myaddr) = thisp->read_insn_memory_8(0, memaddr);
    break;
#endif
  default:
    {
      big_int_1 value;
      for (int i = 0; i < length; i++)
	{
	  sid::bus* bus;
	  bus = (thisp->disassembler_bus) ? thisp->disassembler_bus : thisp->insn_bus;
	  if (UNLIKELY (bus->read (memaddr + i, value) != sid::bus::ok))
	    return 1;
	  else
	    *(myaddr + i) = value;
	}
    }
  }
  return 0;
}

void
cgen_bi_endian_cpu::cgen_memory_error(int status, bfd_vma memaddr,
		       struct disassemble_info *info)
{
  cgen_bi_endian_cpu *thisp = static_cast<cgen_bi_endian_cpu *>(info->application_data);

  thisp->trace_stream 
    << "memory_error: status " << status << " addr 0x" << hex << memaddr << dec << endl;
}

void
cgen_bi_endian_cpu::cgen_print_address(bfd_vma addr, struct disassemble_info *info)
{
  cgen_bi_endian_cpu *thisp = static_cast<cgen_bi_endian_cpu *>(info->application_data);

  thisp->trace_stream << "0x" << hex << addr << dec;

  if (cgen_symbol_at_address (addr, info))
    if (! thisp->symbol_at_address.empty ())
      thisp->trace_stream << " <" << thisp->symbol_at_address << '>';
}

int
cgen_bi_endian_cpu::cgen_symbol_at_address(bfd_vma addr,
					   struct disassemble_info * info)
{
  cgen_bi_endian_cpu *thisp = static_cast<cgen_bi_endian_cpu *>(info->application_data);
  if (thisp->loader)
    {
      thisp->disassembly_symbol_address_pin.drive (addr);
      thisp->symbol_at_address = thisp->loader->attribute_value("current-function");
    }
  else
    thisp->symbol_at_address = "";
    
  if (thisp->symbol_at_address.empty ())
    {
      cerr << "cgen_bi_endian_cpu::symbol_at_address!?" << endl;
      return 0; // failed
    }

  return 1; // success
}


// Tracing support.

void
cgen_bi_endian_cpu::begin_trace (PCADDR pc, const char* insn_name)
{
  this->trace_stream
    << "0x" << hex << pc << dec
    << ": " << insn_name << "\t";
}

void
cgen_bi_endian_cpu::end_trace ()
{
  trace_stream.end_line ();
}

// Counter support

void
cgen_bi_endian_cpu::trace_counter (PCADDR pc)
{
  this->trace_stream
    << this->total_insn_count << ' ' 
    << this->total_insn_count + this->total_latency << '\t';
}


// ----------------------------------------------------------------------------


static
vector<string>
compCGENListTypes ()
{
  vector<string> types;
#if SIDTARGET_M32R
  types.push_back ("hw-cpu-m32r/d");
#endif
#if SIDTARGET_ARM
  types.push_back ("hw-cpu-arm7t");
#endif
#if SIDTARGET_MEP
  types.push_back ("hw-cpu-mep");
  // begin-mep-types
  types.push_back ("hw-cpu-mep-ext1");
  // end-mep-types
#endif
#if SIDTARGET_MT
  types.push_back ("hw-cpu-mt");
#endif
#if SIDTARGET_SH || SIDTARGET_SH64
  types.push_back ("hw-cpu-sh2");
  types.push_back ("hw-cpu-sh2e");
  types.push_back ("hw-cpu-sh2a-nofpu");
  types.push_back ("hw-cpu-sh2a-fpu-single");
  types.push_back ("hw-cpu-sh2a-fpu");
  types.push_back ("hw-cpu-sh3");
  types.push_back ("hw-cpu-sh3e");
  types.push_back ("hw-cpu-sh4");
  types.push_back ("hw-cpu-sh4-nofpu");
  types.push_back ("hw-cpu-sh4-single");
  types.push_back ("hw-cpu-sh4a");
  types.push_back ("hw-cpu-sh4a-nofpu");
  types.push_back ("hw-cpu-sh4a-single");
  types.push_back ("hw-cpu-sh4al");
#endif
#if SIDTARGET_SH64
  types.push_back ("hw-cpu-sh5-compact");
  types.push_back ("hw-cpu-sh5-32media");
  types.push_back ("hw-cpu-sh5-64media");
#endif
#if SIDTARGET_XSTORMY16
  types.push_back ("hw-cpu-xstormy16");
#endif
  return types;
}


static
component*
compCGENCreate (const string& typeName)
{
#if SIDTARGET_M32R
  if(typeName == "hw-cpu-m32r/d")
    return new m32rbf::m32rbf_cpu ();
#endif
#if SIDTARGET_ARM
  if (typeName == "hw-cpu-arm7t")
    return new arm7f::arm7f_cpu ();
#endif
#if SIDTARGET_MEP
  if (typeName == "hw-cpu-mep")
    return new mep_basic::mep_basic_cpu ();
  // begin-mep-constructors
  if (typeName == "hw-cpu-mep-ext1")
    return new mep_ext1::mep_ext1_cpu ();
  // end-mep-constructors
#endif
#if SIDTARGET_MT
  if (typeName == "hw-cpu-mt")
    return new mt::mt_cpu ();
#endif
#if SIDTARGET_SH || SIDTARGET_SH64
  if (typeName == "hw-cpu-sh2")
    return new sh::sh2_cpu ();
  if (typeName == "hw-cpu-sh2e")
    return new sh::sh2e_cpu ();
  if (typeName == "hw-cpu-sh2a-fpu")
    return new sh::sh2a_fpu_cpu ();
  if (typeName == "hw-cpu-sh2a-fpu-single")
    return new sh::sh2a_fpu_single_cpu ();
  if (typeName == "hw-cpu-sh2a-nofpu")
    return new sh::sh2a_nofpu_cpu ();
  if (typeName == "hw-cpu-sh3")
    return new sh::sh3_cpu ();
  if (typeName == "hw-cpu-sh3e")
    return new sh::sh3e_cpu ();
  if (typeName == "hw-cpu-sh4")
    return new sh::sh4_cpu ();
  if (typeName == "hw-cpu-sh4-nofpu")
    return new sh::sh4_nofpu_cpu ();
  if (typeName == "hw-cpu-sh4-single")
    return new sh::sh4_single_cpu ();
  if (typeName == "hw-cpu-sh4a")
    return new sh::sh4a_cpu ();
  if (typeName == "hw-cpu-sh4a-nofpu")
    return new sh::sh4a_nofpu_cpu ();
  if (typeName == "hw-cpu-sh4a-single")
    return new sh::sh4a_single_cpu ();
  if (typeName == "hw-cpu-sh4al")
    return new sh::sh4al_cpu ();
#endif
#if SIDTARGET_SH64
  if (typeName == "hw-cpu-sh5-compact")
    return new sh::sh5_compact_cpu ();
  if (typeName == "hw-cpu-sh5-32media")
    return new sh::sh5_32media_cpu ();
  if (typeName == "hw-cpu-sh5-64media")
    return new sh::sh5_64media_cpu ();
#endif
#if SIDTARGET_XSTORMY16
  if (typeName == "hw-cpu-xstormy16")
    return new xstormy16::xstormy16_cpu ();
#endif


  return 0;
}

static
void
compCGENDelete (component* c)
{
  // cgen_cpu is a base class of all objects that may have been created here
  delete dynamic_cast<cgen_bi_endian_cpu*>(c);
}


// static object
DLLEXPORT extern const component_library cgen_component_library;

const component_library cgen_component_library =
{
  COMPONENT_LIBRARY_MAGIC,
  & compCGENListTypes, 
  & compCGENCreate,
  & compCGENDelete
};
@


1.22
log
@Support for Toshiba MeP.
@
text
@a32 1
#include "mep_ext2.h"
a332 1
  types.push_back ("hw-cpu-mep-ext2");
a383 2
  if (typeName == "hw-cpu-mep-ext2")
    return new mep_ext2::mep_ext2_cpu ();
@


1.21
log
@2006-10-23  Dave Brolley  <brolley@@redhat.com>

        * compCGEN.cxx (cgen_print_address): Print "0x" prefix.
@
text
@d29 7
d330 7
d380 10
@


1.20
log
@2006-10-18  Dave Brolley  <brolley@@redhat.com>

        * Contribute the following changes:

        2006-05-11  Dave Brolley  <brolley@@redhat.com>

        * configure.in: Add sh support.
        * compCGEN.cxx: #include sh* cpu headers.
        (compCGENListTypes): List hw-cpu-sh*.
        (compCGENCreate): Handle hw-cpu-sh*.
        * sh: New directory.
@
text
@d252 1
a252 1
  thisp->trace_stream << hex << addr << dec;
@


1.19
log
@2006-06-20  Dave Brolley  <brolley@@redhat.com>

        * compCGEN.cxx (cgen_bi_endian_cpu): Initialize loader. Add "loader"
        relation and "disassembly-symbol-address" pin.
        (cgen_print_address): Call cgen_symbol_at_address and print the
        symbol name.
        (cgen_symbol_at_address): Implemented.
        * cgen-cpu.h (class cgen_bi_endian_cpu): Add symbol_at_address,
        loader and disassembly_symbol_address_pin.
@
text
@d32 16
d326 21
d370 38
@


1.18
log
@2006-05-11  Dave Brolley  <brolley@@redhat.com>

        * cgen-ops.h (SUBWORDDIHI, SUBWORDDIQI, SUBWORDDFDI): New functions.
        * compCGEN.cxx (cgen_bi_endian_cpu): Initialize branch_was_return.
@
text
@d45 1
d54 2
d236 5
a240 2
  thisp->trace_stream
    << "0x" << hex << addr << dec;
d247 16
a262 2
  cerr << "cgen_bi_endian_cpu::symbol_at_address!?" << endl;
  return 0;
@


1.17
log
@* DLLEXPORT decoration tweak, from Rex Sung-Tien Cho <song10@@andestech.com>
@
text
@d3 1
a3 1
// Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004 Red Hat.
d45 1
@


1.16
log
@	Second part of ms1 to mt renaming.
	* bfd/archures.c (bfd_arch_mt): Renamed.
	(bfd_mt_arch): Renamed.
	(bfd_archures_list): Adjusted.
	* bfd/bfd-in2.h: Rebuilt.
	* bfd/config.bfd (mt): Remove special case targ_archs.
	(mt-*-elf): Rename bfd_elf32_mt_vec.
	* bfd/configure: Rebuilt.
	* bfd/configure.in (bfd_elf32_mt_vec): Renamed.
	(selarchs) Remove mt special case.
	* bfd/cpu-mt.c (arch_info_struct): Adjust.
	(bfd_mt_arch): Renamed, adjust.
	* bfd/elf32-mt.c (mt_reloc_type_lookup, mt_info_to_howto_rela,
	mt_elf_relocate_hi16, mt_final_link_relocate, mt_relocate_section,
	mt_elf_howto_table): Renamed, adjusted.
	(mt_elf_gc_mark_hook, mt_elf_gc_sweep_hook, mt_elf_check_relocs,
	elf32_mt_machine, mt_elf_object_p, mt_elf_set_private_flags,
	mt_elf_copy_private_bfd_data, mt_elf_merge_private_bfd_data,
	mt_elf_print_private_bfd_data): Renamed, adjusted.
	(TARGET_BIG_SYM, TARGET_BIG_NAME, ELF_ARCH, ELF_MACHINE_CODE,
	ELF_MAXPAGESIZE, elf_info_to_howto, elf_backend_relocate_section,
	bfd_elf32_bfd_reloc_type_lookup, elf_backend_gc_mark_hook,
	elf_backend_gc_sweep_hook, elf_backend_check_relocs,
	eld_backend_object_p, bfd_elf32_bfd_set_private_flags,
	bfd_elf32_bfd_copy_private_bfd_data,
	bfd_elf32_bfd_merge_private_bfd_data,
	bfd_elf32_bfd_print_private_bfd_data): Adjusted.
	* bfd/libbfd.h: Regenerated.
	* bfd/reloc.c (BFD_RELOC_MT_PC16, BFD_RELOC_MT_HI16,
	BFD_RELOC_MT_LO16, BFD_RELOC_MT_GNU_VTINHERIT,
	BFD_RELOC_MT_GNU_VTENTRY, BFD_RELOC_MT_PCINSN8): Renamed.
	* bfd/targets.c (bfd_elf32_mt_vec): Renamed.
	(_bfd_target_vector): Adjusted.
	* binutils/readelf.c (guess_is_rela): Use EM_MT.
	(dump_relocations, get_machine_name): Adjust.

	* cpu/mt.cpu (define-arch, define-isa): Set name to mt.
	(define-mach): Adjust.
	* cpu/mt.opc (CGEN_ASM_HASH): Update.
	(mt_asm_hash, mt_cgen_insn_supported): Renamed.
	(parse_loopsize, parse_imm16): Adjust.

	* gas/configure: Rebuilt.
	* gas/configure.in (mt): Remove special case.
	* gas/config/tc-mt.c (opcodes/mt-desc.h, opcodes/mt-opc.h): Change
	#includes.
	(mt_insn, mt_mach, mt_mach_bitmask, mt_flags, mt_architectures):
	Rename, adjust.
	(md_parse_option, md_show_usage, md_begin, md_assemble,
	md_cgen_lookup_reloc, md_atof): Adjust.
	(mt_force_relocation, mt_apply_fix, mt_fix_adjustable): Rename, adjust.
	* gas/config/tc-mt.h (TC_MT): Rename.
	(LISTING_HEADER, TARGET_ARCH, TARGET_FORMAT): Adjust.
	(md_apply_fix): Adjust.
	(mt_apply_fix, mt_fix_adjustable, mt_force_relocation): Rename.
	(TC_FORCE_RELOCATION, tc_fix_adjustable): Adjust.

	* gdb/mt-tdep.c (mt_arch_constants, mt_gdb_regnums): Rename, adjust.
	(mt_register_name, mt_register_type, mt_register_reggroup_p,
	mt_return_value, mt_skip_prologue, mt_breapoint_from_pc,
	mt_pseudo_register_read, mt_pseudo_register_write, mt_frame_align,
	mt_registers_info, mt_push_dummy_call, mt_unwind_cache,
	mt_frame_unwind_cache, mt_unwind_pc, mt_unwind_dummy_id,
	mt_frame_this_id, mt_frame_prev_register, mt_frame_base_address,
	mt_frame_unwind, mt_frame_sniffer, mt_frame_base, mt_gdbarch_init,
	_initialize_mt_tdep): Rename & adjust.

	* include/dis-asm.h (print_insn_mt): Renamed.

	* include/elf/common.h (EM_MT): Renamed.
	* include/elf/mt.h: Rename relocs, cpu & other defines.

	* ld/emulparams/elf32mt.sh (ARCH, OUTPUT_FORMAT): Adjust.

	* opcodes/Makefile.am (HFILES, CFILES, ALL_MACHINES): Adjust.
	(stamp-mt): Adjust rule.
	(mt-asm.lo, mt-desc.lo, mt-dis.lo, mt-ibld.lo, mt-opc.lo): Rename &
	adjust.
	* opcodes/Makefile.in: Rebuilt.
	* opcodes/configure: Rebuilt.
	* opcodes/configure.in (bfd_mt_arch): Rename & adjust.
	* opcodes/disassemble.c (ARCH_mt): Renamed.
	(disassembler): Adjust.
	* opcodes/mt-asm.c: Renamed, rebuilt.
	* opcodes/mt-desc.c: Renamed, rebuilt.
	* opcodes/mt-desc.h: Renamed, rebuilt.
	* opcodes/mt-dis.c: Renamed, rebuilt.
	* opcodes/mt-ibld.c: Renamed, rebuilt.
	* opcodes/mt-opc.c: Renamed, rebuilt.
	* opcodes/mt-opc.h: Renamed, rebuilt.

	* sid/Makefile.in: Rebuilt.
	* sid/aclocal.m4: Rebuilt.
	* sid/configure: Rebuilt.
	* sid/sid.spec: Adjust.
	* sid/bsp/Makefile.am: Adjust.
	* sid/bsp/Makefile.in: Rebuilt.
	* sid/bsp/aclocal.m4: Rebuilt.
	* sid/bsp/configrun-sid.in: Adjust.
	* sid/bsp/pregen/Makefile.in: Rebuilt.
	* sid/bsp/pregen/mt-gdb.conf: Renamed & rebuilt.
	* sid/bsp/pregen/mt-gloss.conf: Renamed & rebuilt.
	* sid/bsp/pregen/pregen-configs.in: Adjust.
	* sid/component/aclocal.m4: Rebuilt.
	* sid/component/configure: Rebuilt.
	* sid/component/tconfig.in: Adjust.
	* sid/component/bochs/aclocal.m4: Rebuilt.
	* sid/component/cache/Makefile.in: Rebuilt.
	* sid/component/cgen-cpu/Makefile.in: Rebuilt.
	* sid/component/cgen-cpu/aclocal.m4: Rebuilt.
	* sid/component/cgen-cpu/compCGEN.cxx: Adjust.
	* sid/component/cgen-cpu/configure: Rebuilt.
	* sid/component/cgen-cpu/configure.in: Rebult.
	* sid/component/cgen-cpu/mt/Makefile.am: Adjust.
	* sid/component/cgen-cpu/mt/Makefile.in: Rebuilt.
	* sid/component/cgen-cpu/mt/hw-cpu-mt.txt: Adjust.
	* sid/component/cgen-cpu/mt/mt-cpu.h: Rebuilt.
	* sid/component/cgen-cpu/mt/mt-decode.cxx: Rebuilt.
	* sid/component/cgen-cpu/mt/mt-decode.h: Rebuilt.
	* sid/component/cgen-cpu/mt/mt-defs.h: Rebuilt.
	* sid/component/cgen-cpu/mt/mt-desc.h: Rebuilt.
	* sid/component/cgen-cpu/mt/mt-sem.cxx: Rebuilt.
	* sid/component/cgen-cpu/mt/mt-write.cxx: Rebuilt.
	* sid/component/cgen-cpu/mt/mt.cxx: Adjust.
	* sid/component/cgen-cpu/mt/mt.h: Adjust.
	* sid/component/consoles/Makefile.in: Rebuilt.
	* sid/component/families/aclocal.m4: Rebuilt.
	* sid/component/families/configure: Rebuilt.
	* sid/component/gdb/Makefile.in: Rebuilt.
	* sid/component/gloss/Makefile.in: Rebuilt.
	* sid/component/glue/Makefile.in: Rebuilt.
	* sid/component/ide/Makefile.in: Rebuilt.
	* sid/component/interrupt/Makefile.in: Rebuilt.
	* sid/component/lcd/Makefile.in: Rebuilt.
	* sid/component/lcd/testsuite/Makefile.in: Rebuilt.
	* sid/component/loader/Makefile.am: Rebuilt.
	* sid/component/loader/Makefile.in: Rebuilt.
	* sid/component/mapper/Makefile.in: Rebuilt.
	* sid/component/mapper/testsuite/Makefile.in: Rebuilt.
	* sid/component/memory/Makefile.in: Rebuilt.
	* sid/component/mmu/Makefile.in: Rebuilt.
	* sid/component/parport/Makefile.in: Rebuilt.
	* sid/component/profiling/Makefile.in: Rebuilt.
	* sid/component/rtc/Makefile.in: Rebuilt.
	* sid/component/sched/Makefile.in: Rebuilt.
	* sid/component/testsuite/Makefile.in: Rebuilt.
	* sid/component/timers/aclocal.m4: Rebuilt.
	* sid/component/timers/configure: Rebuilt.
	* sid/component/uart/Makefile.in: Rebuilt.
	* sid/component/uart/testsuite/Makefile.in: Rebuilt.
	* sid/config/config.sub: Adjust.
	* sid/config/info.tcl.in: Adjust.
	* sid/config/sidtargets.m4: Adjust.
	* sid/doc/Makefile.in: Rebuilt.
	* sid/main/dynamic/Makefile.am: Rebuilt.
	* sid/main/dynamic/Makefile.in: Rebuilt.
	* sid/main/dynamic/aclocal.m4: Rebuilt.
	* sid/main/dynamic/configure: Rebuilt.
@
text
@d331 1
a331 1
extern const component_library cgen_component_library;
d333 1
a333 1
const component_library cgen_component_library DLLEXPORT = 
@


1.15
log
@2005-10-28  Dave Brolley  <brolley@@redhat.com>

        Contribute the following changes:
        2003-10-07  Dave Brolley  <brolley@@redhat.com>

        * tracedis.cxx (cgen_disassemble): Rename isa_mask to isas. Now
        (CGEN_ISA_MASK*).
        * tracedis.h (opcode/cgen-bitset.h): #include it.
        (cgen_disassemble): Rename isa_mask to isas. Now
        (CGEN_ISA_MASK*).
        (cgen_bi_endian_cpu::disassemble): 'isas' now (CGEN_ISA_MASK *).
        * cgen-cpu.h (opcode/cgen-bitset.h): #include it.
        (cgen_bi_endian_cpu::disassemble): 'isas' now (CGEN_ISA_MASK *).
        * compCGEN.cxx (cgen_disassemble): Rename isa_mask to isas. Now
        (CGEN_ISA_MASK*).
@
text
@d29 2
a30 2
#if SIDTARGET_MS1
#include "ms1.h"
d286 2
a287 2
#if SIDTARGET_MS1
  types.push_back ("hw-cpu-ms1");
d308 3
a310 3
#if SIDTARGET_MS1
  if (typeName == "hw-cpu-ms1")
    return new ms1::ms1_cpu ();
@


1.14
log
@2005-06-15  Dave Brolley  <brolley@@redhat.com>

        Morpho ms1 cpu contributed on behalf of Red Hat
        2004-05-14  Stan Cox  <scox@@redhat.com>

        * ms1: New directory.
        * aclocal.m4: Regenerated.
        * Makefile.in: Ditto.
        * configure: Ditto.
        * configure.in: Support added for ms1.
        * compCGEN.cxx: Ditto.
@
text
@d161 1
a161 1
  unsigned long isa_mask,
d175 1
a175 1
		   isa_mask);
@


1.13
log
@2004-06-25  Dave Brolley  <brolley@@redhat.com>

        * tracedis.cxx (register_name): Add parameter for the cgen MACH. Save
        it in hack_list->machine or p->machine.
        (cgen_disassemble): Add parameter for the cgen MACH. Pass it to
        register_name. Use it to set info->mach.
        (arch_hack): New field 'machine'.
        (bfd_lookup_arch): Make sure the machines match.
        * cgen-cpu.h (disassemble): Add parameter for the cgen MACH.
        * compCGEN.cxx (disassemble): Add parameter for the cgen MACH. Pass it
        to cgen_disassemble.
        * tracedis.h (cgen_disassemble): Add parameter for the cgen MACH.
@
text
@d29 3
d286 3
d308 4
@


1.12
log
@2003-08-21  Dave Brolley  <brolley@@redhat.com>

        * compCGEN.cxx (end_trace): Call end_line.
@
text
@d3 1
a3 1
// Copyright (C) 1999, 2000, 2001, 2002, 2003 Red Hat.
d158 2
a159 1
  unsigned long isa_mask)
d169 1
@


1.11
log
@003-01-15  Dave Brolley  <brolley@@redhat.com>

        * compCGEN.cxx (cgen_bi_endian_cpu): Don't initialize trace_count.
        (trace_counter): Use total_insn_count and total_latency.
        * cgen-cpu.h (class cgen_bi_endian_cpu): Remove trace_count.
@
text
@d253 1
a253 1
  this->trace_stream << endl;
@


1.10
log
@* contribute disassembler interface for C++:

2002-04-03  Ben Elliston  <bje@@redhat.com>

	* Makefile.am (TRACEDIS): Remove.
	(libcgencpu_la_SOURCES): Add tracedis.cxx.
	* tracedis.c: Rename from this ..
	* tracedis.cxx: .. to this.
	(trace_printf): New static function.
	(cgen_disassemble): Pass trace_printf with INIT_DISASSEMBLE_INFO.
	* compCGEN.cxx: Do not #include "tracedis.h" within extern "C".
@
text
@d3 1
a3 1
// Copyright (C) 1999, 2000, 2001, 2002 Red Hat.
a41 1
  trace_count = 0;
d262 2
a263 5
    << this->trace_count++ << ' ' 
    << (this->sched_query.now()-1) << '\t';

  // Invalidate any local icaches; they distort approximate cycle counting.
  this->flush_icache (pc);
@


1.9
log
@2002-10-03  Dave Brolley  <brolley@@redhat.com>
       From Ben Elliston  <bje@@redhat.com>

	* compCGEN.cxx (cgen_bi_endian_cpu::cgen_read_memory): Don't
	bother fiddling the latency values.  Have the disassembler read
	memory using the disassembler-memory accessor, if available.
	* common-xml/interface.xml: Document disassembler-memory accessor.
	* common-xml/behavior.xml (execution): Likewise.
@
text
@d20 1
a21 1
}
@


1.8
log
@* disasm improvements

2002-02-06  Frank Ch. Eigler  <fche@@redhat.com>

	* compCGEN.cxx (cgen_disassemble): New "isa_mask" argument.
	* tracedis.c (disassemble): Ditto.  Support it.
	(cgen_disassemble): Defeat initialization bypass cache.
	* cgen-cpu.h, tracedis.h: Corresponding changes.
@
text
@a180 4
  // We don't want to penalize the disassembler with memory latency counts, so we
  // store it away here ...
  host_int_8 prev_latency = thisp->total_latency;

d197 12
a208 2
    for (int i = 0; i < length; i++)
      *(myaddr + i) = thisp->read_insn_memory_1(0, memaddr + i);
a209 4

  // ... and restore it here.
  thisp->total_latency = prev_latency;

@


1.7
log
@* --trace-counter extensions

[bsp]
2001-12-27  Frank Ch. Eigler  <fche@@redhat.com>

	* configrun-sid.in: Make cpu<->sched pin connections for time queries.

[component/cgen-cpu]
2001-12-27  Frank Ch. Eigler  <fche@@redhat.com>

	* cgen-cpu.h (cgen_bi_endian_cpu): Make trace_count a host_int_8.
	* compCGEN.cxx (cgen_read_memory): Don't distort memory latency

[include]
2001-12-27  Frank Ch. Eigler  <fche@@redhat.com>

	* sidcpuutil.h (basic_cpu): Add scheduler_time_query member.
	Add flush_icache(PC) virtual function.

[bsp/pregen]
2001-12-27  Frank Ch. Eigler  <fche@@redhat.com>

	* ALL.conf: Regenerated with cpu/sched etc. changes.
@
text
@d3 1
a3 1
// Copyright (C) 1999, 2000, 2001 Red Hat.
d158 2
a159 1
  const char *name)
d170 2
a171 1
		   name);
@


1.6
log
@* sanyo xstormy16 sid support.


[ChangeLog]
	* sid.spec: Add /usr/bin/xstormy16-elf-sid.

[bsp/ChangeLog]
	* Makefile.am (FAM10SCRIPTS): Add Xstormy16 support.
	* configrun-sid.in: Likewise.
	* xstormy16-elf-sid: New Xstormy16 frontend.

[bsp/pregen/ChangeLog]
	* pregen-configs.in: Add support for Xstormy16.
	* xstormy16-gloss.conf: New file.
	* xstormy16-gdb.conf: Likewise.
	* xstormy16-gloss-gdb.conf: Likewise.
	* xstormy16-gloss-gdb-tksm.conf: Likewise.

[component/ChangeLog]
	* CATALOG: Add hw-cpu-xstormy16.
	* tconfig.in: Add SIDTARGET_XSTORMY16.

[component/cgen-cpu/ChangeLog]
	* compCGEN.cxx: If SIDTARGET_XSTORMY16, add hw-cpu-xstormy16 support.
	* configure.in: Decend into xstormy16 if necessary.

[config/ChangeLog]
	* sidtargets.m4: Add Xstormy16 support.
	* config.sub: Likewise.
	* info.tcl.in: Likewise.
@
text
@d179 4
d202 4
d258 6
a263 1
  this->trace_stream << this->trace_count++ << "\t";
@


1.5
log
@* call graph profiling support

[sid/bsp]
2001-11-08  Frank Ch. Eigler  <fche@@redhat.com>

	* configrun-sid.in (gprof): Connect call-graph pins.

[sid/include]
2001-11-08  Frank Ch. Eigler  <fche@@redhat.com>

	* sidcpuutil.h (basic_cpu): Add cg caller/callee pins, trace_stream
	fields.
	(basic_cpu ctor): Initialize them.
	(cg_profile): New function.

[sid/component/cgen-cpu]
2001-11-08  Frank Ch. Eigler  <fche@@redhat.com>

	* cgen-cpu.h (cgen_bi_endian_cpu): Remove trace_stream field: it's
	in basic_cpu now.
	* compCGEN.cxx: Corresponding change.

[sid/component/profiling]
2001-11-08  Frank Ch. Eigler  <fche@@redhat.com>

	* gprof.cxx (gprof_component): Add cg caller/callee pins, cg_count_map
	field.
	(accumulate_call): New function.
	(reset): Clear cg map.
	(store): Emit call graph info.  Emit histogram iff nonempty.
	* sw-profile-gprof.xml: Document call graph functionality.
	* sw-profile-gprof.txt: Regenerated.
@
text
@d29 3
d268 3
d286 4
@


1.4
log
@2001-07-20  Ben Elliston  <bje@@redhat.com>

	* configure.in: Check whether libintl is required for gettext.
	* acinclude.m4: Remove.
	* configure: Rebuild.
	* aclocal.m4: Likewise.
	* Makefile.in: Likewise.

2001-07-10  matthew green  <mrg@@redhat.com>

	* Makefile.in: Regenerate.
	* aclocal.m4: Regenerate.
	* configure: Regenerate.
	* cgen-ops.h (JOINHISI): New define.

2001-07-02  Ben Elliston  <bje@@redhat.com>

	* common-xml/interface.xml (debug-exec?): Remove.

2001-06-29  graydon hoare  <graydon@@redhat.com>

	* common-xml/*: Add files.

2001-06-28  Jeff Johnston  <jjohnstn@@redhat.com>

	* compCGEN.cxx (cgen_cpu::stream_state): Change reference to
	debug_exec_p to use new warnings_enabled flag.
	(cgen_cpu::destream_state): Ditto.

2001-06-23  Frank Ch. Eigler  <fche@@redhat.com>

	* cgen-cpu.h, tracedis.h: #undef AND unwittingly acquired
	from ansidecl.h.

2001-06-20  matthew green  <mrg@@redhat.com>

	* Makefile.am (INCLUDESBFD, OPCODES, LIBIBERTY, TRACEDIS): Set
	unconditionally.
	* cgen-cpu.h: Delete CGEN_BFD_DISASSEMBLER conditional.
	* compCGEN.cxx: Likewise.
	* configure.in (CY_SID_BFD_DISASM_CHECK): Delete.
	* configure: Regenerate.
	* Makefile.in: Likewise.
	* aclocal.m4: Likewise.
	* config.in: Likewise.

2001-06-07  matthew green  <mrg@@redhat.com>

	* Makefile.am (BFDLIBS): Remove.
	* Makefile.in: Regenerate.
	* cgen-cpu.h (disassemble): Now takes a `const char *name' parameter.
	* compCGEN.cxx (cgen_bi_endian_cpu::disassemble): Likewise.
	* tracedis.c (cgen_disassemble): Likewise.  Also, call register_name()
	with arch & name.
	(bfd_get_arch): New dummy function.
	(bfd_put_bits, bfd_get_bits): New functions. Copy from libbfd.
	(hack_list): New list of arch to name mappings.
	(register_name): New function.
	(bfd_lookup_arch): New function. Uses hack_list.
	* tracedis (cgen_disassemble): Update prototype.

2001-06-07  Frank Ch. Eigler  <fche@@redhat.com>

	* cgen-cpu.h: Move new getter/setter functions to *MEM* from *IMEM*.

2001-06-06  graydon hoare  <graydon@@redhat.com>

	* cgen-types.h: Add SF,DF,BI types.
	* cgen-cpu.h (class cgen_bi_endian_cpu): Add some getter/setter
	functions for various memory types.

2001-05-29  matthew green  <mrg@@redhat.com>

	* Makefile.am (OPCODES, BFDLIB, LIBIBERTY, TRACEDIS, INCLUDESBFD): New
	variables set conditionally on CGEN_BFD_DISASSEMBLER.
	* acinclude.m4: New. Pull in gettext & bfd.
	* cgen-cpu.h: If CGEN_BFD_DISASSEMBLER, include "bfd.h" and "dis-asm.h".
	(cgen_bi_endian_cpu): If CGEN_BFD_DISASSEMBLER, new disassemble(),
	cgen_read_memory(), cgen_print_address(), cgen_memory_error() and
	cgen_symbol_at_address() methods, and new disassemble_info{} info.
	New trace_counter() method and int trace_count.
	* compCGEN.cxx: If CGEN_BFD_DISASSEMBLER, include "bfd.h", "tracedis.h"
	and "dis-asm.h".
	(cgen_bi_endian_cpu ctor): Initialise trace_count to zero.
	(cgen_bi_endian_cpu::disassemble): New method, calls cgen_disasseble().
	(cgen_bi_endian_cpu::cgen_read_memory): New method, conditional on
	CGEN_BFD_DISASSEMBLER..
	(cgen_bi_endian_cpu::cgen_memory_error): Likewise.
	(cgen_bi_endian_cpu::cgen_print_address): Likewise.
	(cgen_bi_endian_cpu::cgen_symbol_at_address: Likewise.
	(cgen_bi_endian_cpu::trace_counter): New method.
	* configure.in (CY_SID_BFD_DISASM_CHECK): Use.
	* tracedis.c (cgen_disassemble): New file, front end to disassembler.
	* tracedis.h: Header file for above.
	* Makefile.in: Regenerated.
	* aclocal.m4: Regenerated.
	* config.in: Regenerated.
	* configure: Regenerated.

2001-03-21  Ben Elliston  <bje@@redhat.com>

	* Makefile.in: Regenerate.
@
text
@d37 1
a37 2
cgen_bi_endian_cpu::cgen_bi_endian_cpu ():
  trace_stream (cout)
@


1.3
log
@* make it compile with GCC 3.0:
        - missing throw() specifiers in bus & component dtors
	- `std::' vs `::' namespace issues
@
text
@d3 1
a3 1
// Copyright (C) 1999, 2000 Red Hat.
d17 6
d40 1
d147 80
d241 8
@


1.2
log
@
2001-06-28  Jeff Johnston  <jjohnstn@@redhat.com>

        * compCGEN.cxx (cgen_cpu::stream_state): Change reference to
        debug_exec_p to use new warnings_enabled flag.
        (cgen_cpu::destream_state): Ditto.
        (cgen_bi_endian_cpu::cgen_bi_endian_cpu): Remove
        debug_exec_p setting and add warnings_enabled flag which is tied                to new enable-warnings? setting.
        * cgen-cpu.h (cgen_bi_endian_cpu::debug_exec_p): Removed.
        (cgen_bi_endian_cpu::warnings_enabled): New member.
@
text
@d44 1
a44 1
cgen_bi_endian_cpu::~cgen_bi_endian_cpu () 
@


1.1
log
@* public snapshot of sid simulator
@
text
@d34 2
a35 2
  debug_exec_p = false;
  add_attribute ("debug-exec?", & debug_exec_p, "setting");
d81 1
a81 1
    << debug_exec_p << " "
d102 1
a102 1
    >> debug_exec_p;
@

