head	1.2;
access;
symbols
	sid-snapshot-20180601:1.2
	sid-snapshot-20180501:1.2
	sid-snapshot-20180401:1.2
	sid-snapshot-20180301:1.2
	sid-snapshot-20180201:1.2
	sid-snapshot-20180101:1.2
	sid-snapshot-20171201:1.2
	sid-snapshot-20171101:1.2
	sid-snapshot-20171001:1.2
	sid-snapshot-20170901:1.2
	sid-snapshot-20170801:1.2
	sid-snapshot-20170701:1.2
	sid-snapshot-20170601:1.2
	sid-snapshot-20170501:1.2
	sid-snapshot-20170401:1.2
	sid-snapshot-20170301:1.2
	sid-snapshot-20170201:1.2
	sid-snapshot-20170101:1.2
	sid-snapshot-20161201:1.2
	sid-snapshot-20161101:1.2
	sid-snapshot-20160901:1.2
	sid-snapshot-20160801:1.2
	sid-snapshot-20160701:1.2
	sid-snapshot-20160601:1.2
	sid-snapshot-20160501:1.2
	sid-snapshot-20160401:1.2
	sid-snapshot-20160301:1.2
	sid-snapshot-20160201:1.2
	sid-snapshot-20160101:1.2
	sid-snapshot-20151201:1.2
	sid-snapshot-20151101:1.2
	sid-snapshot-20151001:1.2
	sid-snapshot-20150901:1.2
	sid-snapshot-20150801:1.2
	sid-snapshot-20150701:1.2
	sid-snapshot-20150601:1.2
	sid-snapshot-20150501:1.2
	sid-snapshot-20150401:1.2
	sid-snapshot-20150301:1.2
	sid-snapshot-20150201:1.2
	sid-snapshot-20150101:1.2
	sid-snapshot-20141201:1.2
	sid-snapshot-20141101:1.2
	sid-snapshot-20141001:1.2
	sid-snapshot-20140901:1.2
	sid-snapshot-20140801:1.2
	sid-snapshot-20140701:1.2
	sid-snapshot-20140601:1.2
	sid-snapshot-20140501:1.2
	sid-snapshot-20140401:1.2
	sid-snapshot-20140301:1.2
	sid-snapshot-20140201:1.2
	sid-snapshot-20140101:1.2
	sid-snapshot-20131201:1.2
	sid-snapshot-20131101:1.2
	sid-snapshot-20131001:1.2
	sid-snapshot-20130901:1.2
	sid-snapshot-20130801:1.2
	sid-snapshot-20130701:1.2
	sid-snapshot-20130601:1.2
	sid-snapshot-20130501:1.2
	sid-snapshot-20130401:1.2
	sid-snapshot-20130301:1.2
	sid-snapshot-20130201:1.2
	sid-snapshot-20130101:1.2
	sid-snapshot-20121201:1.2
	sid-snapshot-20121101:1.2
	sid-snapshot-20121001:1.2
	sid-snapshot-20120901:1.2
	sid-snapshot-20120801:1.2
	sid-snapshot-20120701:1.2
	sid-snapshot-20120601:1.2
	sid-snapshot-20120501:1.2
	sid-snapshot-20120401:1.2
	sid-snapshot-20120301:1.2
	sid-snapshot-20120201:1.2
	sid-snapshot-20120101:1.2
	sid-snapshot-20111201:1.2
	sid-snapshot-20111101:1.2
	sid-snapshot-20111001:1.2
	sid-snapshot-20110901:1.2
	sid-snapshot-20110801:1.2
	sid-snapshot-20110701:1.2
	sid-snapshot-20110601:1.2
	sid-snapshot-20110501:1.2
	sid-snapshot-20110401:1.2
	sid-snapshot-20110301:1.2
	sid-snapshot-20110201:1.2
	sid-snapshot-20110101:1.2
	sid-snapshot-20101201:1.2
	sid-snapshot-20101101:1.2
	sid-snapshot-20101001:1.2
	sid-snapshot-20100901:1.2
	sid-snapshot-20100801:1.2
	sid-snapshot-20100701:1.2
	sid-snapshot-20100601:1.2
	sid-snapshot-20100501:1.2
	sid-snapshot-20100401:1.2
	sid-snapshot-20100301:1.2
	sid-snapshot-20100201:1.2
	sid-snapshot-20100101:1.2
	sid-snapshot-20091201:1.2
	sid-snapshot-20091101:1.2
	sid-snapshot-20091001:1.2
	sid-snapshot-20090901:1.2
	sid-snapshot-20090801:1.2
	sid-snapshot-20090701:1.2
	sid-snapshot-20090601:1.2
	sid-snapshot-20090501:1.2
	sid-snapshot-20090401:1.2
	sid-snapshot-20090301:1.2
	sid-snapshot-20090201:1.2
	sid-snapshot-20090101:1.2
	sid-snapshot-20081201:1.2
	sid-snapshot-20081101:1.2
	sid-snapshot-20081001:1.2
	sid-snapshot-20080901:1.2
	sid-snapshot-20080801:1.2
	sid-snapshot-20080701:1.2
	sid-snapshot-20080601:1.2
	sid-snapshot-20080501:1.2
	sid-snapshot-20080403:1.2
	sid-snapshot-20080401:1.2
	sid-snapshot-20080301:1.2
	sid-snapshot-20080201:1.2
	sid-snapshot-20080101:1.2
	sid-snapshot-20071201:1.2
	sid-snapshot-20071101:1.2
	sid-snapshot-20071001:1.2;
locks; strict;
comment	@ * @;


1.2
date	2007.08.13.14.47.43;	author fche;	state Exp;
branches;
next	1.1;

1.1
date	2007.02.05.20.28.40;	author brolley;	state Exp;
branches;
next	;


desc
@@


1.2
log
@2007-08-13  Frank Ch. Eigler  <fche@@redhat.com>

	* common_model.h: Change #include guard name.

2007-08-13  Frank Ch. Eigler  <fche@@redhat.com>

	* sh.h: Protect CGEN_CPU_FPU macro against multiple definitions.
	* common_model.h: Change #include guard name.
@
text
@// common_model.h - Hand-written code for the Toshiba Media Engine modelling. -*- C++ -*-

// Common insn modelling functions for the 'mep' model.

// Copyright (C) 2003, 2005 Red Hat.
// This file is part of SID and is licensed under the GPL.
// See the file COPYING.SID for conditions for redistribution.

#ifndef MEP_COMMON_MODEL_H
#define MEP_COMMON_MODEL_H

#include <sidtypes.h>
#include "cgen-types.h"

using namespace cgen;

// This class is always a subclass of mep*_model and provides the common implementation.
template <class BASE, class CPU, class IDESC, class SCACHE>
class mep_common_model : public BASE
{
public:
  mep_common_model (CPU* cpu) :
    BASE (cpu),
    current_stall (0),
    divide_busy (0),
    multiply_busy (0),
    ldcb_busy (0),
    save_total_latency (0)
  {
    for (int i = 0; i < num_gpr; ++i)
      gpr_busy[i] = 0;
    for (int i = 0; i < num_ctrl_reg; ++i)
      ctrl_reg_busy[i] = 0;
  }

  // Called before each insn where first_p is true if the insn is the
  // first in a group of parallel insns.
  // This is an override of the method in cgen_model (cgen-model.h).
  // Toshiba wants insn fetch latency counted as part of the insns
  // execution cycles rather than as cycles before execution.
  virtual void model_insn_before (bool first_p = true)
  {
    if (first_p)
      this->vliw_cycles = 1;
  }

  // This is called before each insn.
  // Overrides the one defined by the BASE model.
  // Returns the number of cycles which the cpu must stall
  virtual UINT model_before (CPU *current_cpu, SCACHE *sem)
    {
      assert (sem);
      BASE::model_before (current_cpu, sem);
      sid::host_int_4 stall = this->current_stall;
      return stall;
    } 

  // Custom overrides of functions generated for the BASE model.
  virtual UINT model_u_multiply_before (CPU *cpu, const IDESC *idesc, int unit_num);
  virtual UINT model_u_divide_before (CPU *cpu, const IDESC *idesc, int unit_num);
  virtual UINT model_u_ldcb_before (CPU *cpu, const IDESC *idesc, int unit_num);
  virtual UINT model_u_use_ctrl_reg_before (CPU *cpu, const IDESC *idesc, int unit_num, INT /*usereg*/);
  virtual UINT model_u_store_ctrl_reg_before (CPU *cpu, const IDESC *idesc, int unit_num, INT storereg)
    { return this->model_u_use_ctrl_reg_before (cpu, idesc, unit_num, storereg); }
  virtual UINT model_u_use_gpr_before (CPU *cpu, const IDESC *idesc, int unit_num, INT /*usereg*/);

  virtual UINT model_u_branch_after (CPU *cpu, const IDESC *idesc, int unit_num, unsigned long long referenced);
  virtual UINT model_u_multiply_after (CPU *cpu, const IDESC *idesc, int unit_num, unsigned long long referenced);
  virtual UINT model_u_divide_after (CPU *cpu, const IDESC *idesc, int unit_num, unsigned long long referenced);
  virtual UINT model_u_stcb_after (CPU *cpu, const IDESC *idesc, int unit_num, unsigned long long referenced);
  virtual UINT model_u_load_gpr_after (CPU *cpu, const IDESC *idesc, int unit_num, unsigned long long referenced, INT /*loadreg*/);
  virtual UINT model_u_ldcb_gpr_after (CPU *cpu, const IDESC *idesc, int unit_num, unsigned long long referenced, INT /*loadreg*/);
  virtual UINT model_u_mul_gpr_after (CPU *cpu, const IDESC *idesc, int unit_num, unsigned long long referenced, INT /*resultreg*/);

  virtual void step_latency (sid::host_int_4 cycles);

private:
  void set_gpr_busy (INT reg, sid::host_int_4 cycles)
  {
    if (gpr_busy[reg] < cycles)
      gpr_busy[reg] = cycles;
  }

  void set_ctrl_reg_busy (INT reg, sid::host_int_4 cycles)
  {
    if (ctrl_reg_busy[reg] < cycles)
      ctrl_reg_busy[reg] = cycles;
  }

  void set_divide_busy (sid::host_int_4 cycles)
  {
    if (divide_busy < cycles)
      divide_busy = cycles;
  }

  void set_multiply_busy (sid::host_int_4 cycles)
  {
    if (multiply_busy < cycles)
      multiply_busy = cycles;
  }

  void set_ldcb_busy (sid::host_int_4 cycles)
  {
    if (ldcb_busy < cycles)
      ldcb_busy = cycles;
  }

  void set_current_stall (sid::host_int_4 cycles)
  {
    if (current_stall < cycles)
      current_stall = cycles;
  }

  UINT u_exec_cycles (CPU *cpu, const IDESC *idesc, int unit_num, unsigned long long referenced)
  {
    for (int u = 0; u < BASE::MAX_UNITS; ++u)
      {
	if (this->timing[idesc->sem_index].units[u].unit == BASE::UNIT_U_EXEC)
	  return this->model_u_exec_after (cpu, idesc, u, referenced);
      }
    return 0;
  }

  static const int num_gpr = 16;
  static const int CTRL_HI = 7;
  static const int CTRL_LO = 8;
  static const int num_ctrl_reg = 32;

  sid::host_int_4 current_stall;
  sid::host_int_4 divide_busy;
  sid::host_int_4 multiply_busy;
  sid::host_int_4 ldcb_busy;
  sid::host_int_4 ctrl_reg_busy[num_ctrl_reg];
  sid::host_int_4 gpr_busy[num_gpr];
  sid::host_int_8 save_total_latency;
};

#endif /*  MEP_COMMON_MODEL_H */
@


1.1
log
@Support for Toshiba MeP.
@
text
@d9 2
a10 2
#ifndef COMMON_MODEL_H
#define COMMON_MODEL_H
d138 1
a138 1
#endif /*  COMMON_MODEL_H */
@

