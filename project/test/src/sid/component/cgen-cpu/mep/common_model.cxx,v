head	1.3;
access;
symbols
	sid-snapshot-20180601:1.3
	sid-snapshot-20180501:1.3
	sid-snapshot-20180401:1.3
	sid-snapshot-20180301:1.3
	sid-snapshot-20180201:1.3
	sid-snapshot-20180101:1.3
	sid-snapshot-20171201:1.3
	sid-snapshot-20171101:1.3
	sid-snapshot-20171001:1.3
	sid-snapshot-20170901:1.3
	sid-snapshot-20170801:1.3
	sid-snapshot-20170701:1.3
	sid-snapshot-20170601:1.3
	sid-snapshot-20170501:1.3
	sid-snapshot-20170401:1.3
	sid-snapshot-20170301:1.3
	sid-snapshot-20170201:1.3
	sid-snapshot-20170101:1.3
	sid-snapshot-20161201:1.3
	sid-snapshot-20161101:1.3
	sid-snapshot-20160901:1.3
	sid-snapshot-20160801:1.3
	sid-snapshot-20160701:1.3
	sid-snapshot-20160601:1.3
	sid-snapshot-20160501:1.3
	sid-snapshot-20160401:1.3
	sid-snapshot-20160301:1.3
	sid-snapshot-20160201:1.3
	sid-snapshot-20160101:1.3
	sid-snapshot-20151201:1.3
	sid-snapshot-20151101:1.3
	sid-snapshot-20151001:1.3
	sid-snapshot-20150901:1.3
	sid-snapshot-20150801:1.3
	sid-snapshot-20150701:1.3
	sid-snapshot-20150601:1.3
	sid-snapshot-20150501:1.3
	sid-snapshot-20150401:1.3
	sid-snapshot-20150301:1.3
	sid-snapshot-20150201:1.3
	sid-snapshot-20150101:1.3
	sid-snapshot-20141201:1.3
	sid-snapshot-20141101:1.3
	sid-snapshot-20141001:1.3
	sid-snapshot-20140901:1.3
	sid-snapshot-20140801:1.3
	sid-snapshot-20140701:1.3
	sid-snapshot-20140601:1.3
	sid-snapshot-20140501:1.3
	sid-snapshot-20140401:1.3
	sid-snapshot-20140301:1.3
	sid-snapshot-20140201:1.3
	sid-snapshot-20140101:1.3
	sid-snapshot-20131201:1.3
	sid-snapshot-20131101:1.3
	sid-snapshot-20131001:1.3
	sid-snapshot-20130901:1.3
	sid-snapshot-20130801:1.3
	sid-snapshot-20130701:1.3
	sid-snapshot-20130601:1.3
	sid-snapshot-20130501:1.3
	sid-snapshot-20130401:1.3
	sid-snapshot-20130301:1.3
	sid-snapshot-20130201:1.3
	sid-snapshot-20130101:1.3
	sid-snapshot-20121201:1.3
	sid-snapshot-20121101:1.3
	sid-snapshot-20121001:1.3
	sid-snapshot-20120901:1.3
	sid-snapshot-20120801:1.3
	sid-snapshot-20120701:1.3
	sid-snapshot-20120601:1.3
	sid-snapshot-20120501:1.3
	sid-snapshot-20120401:1.3
	sid-snapshot-20120301:1.3
	sid-snapshot-20120201:1.3
	sid-snapshot-20120101:1.3
	sid-snapshot-20111201:1.3
	sid-snapshot-20111101:1.3
	sid-snapshot-20111001:1.3
	sid-snapshot-20110901:1.3
	sid-snapshot-20110801:1.3
	sid-snapshot-20110701:1.3
	sid-snapshot-20110601:1.3
	sid-snapshot-20110501:1.3
	sid-snapshot-20110401:1.3
	sid-snapshot-20110301:1.3
	sid-snapshot-20110201:1.3
	sid-snapshot-20110101:1.3
	sid-snapshot-20101201:1.3
	sid-snapshot-20101101:1.3
	sid-snapshot-20101001:1.3
	sid-snapshot-20100901:1.3
	sid-snapshot-20100801:1.3
	sid-snapshot-20100701:1.3
	sid-snapshot-20100601:1.3
	sid-snapshot-20100501:1.3
	sid-snapshot-20100401:1.3
	sid-snapshot-20100301:1.3
	sid-snapshot-20100201:1.3
	sid-snapshot-20100101:1.3
	sid-snapshot-20091201:1.3
	sid-snapshot-20091101:1.3
	sid-snapshot-20091001:1.3
	sid-snapshot-20090901:1.3
	sid-snapshot-20090801:1.3
	sid-snapshot-20090701:1.3
	sid-snapshot-20090601:1.3
	sid-snapshot-20090501:1.3
	sid-snapshot-20090401:1.2
	sid-snapshot-20090301:1.2
	sid-snapshot-20090201:1.1
	sid-snapshot-20090101:1.1
	sid-snapshot-20081201:1.1
	sid-snapshot-20081101:1.1
	sid-snapshot-20081001:1.1
	sid-snapshot-20080901:1.1
	sid-snapshot-20080801:1.1
	sid-snapshot-20080701:1.1
	sid-snapshot-20080601:1.1
	sid-snapshot-20080501:1.1
	sid-snapshot-20080403:1.1
	sid-snapshot-20080401:1.1
	sid-snapshot-20080301:1.1
	sid-snapshot-20080201:1.1
	sid-snapshot-20080101:1.1
	sid-snapshot-20071201:1.1
	sid-snapshot-20071101:1.1
	sid-snapshot-20071001:1.1;
locks; strict;
comment	@// @;


1.3
date	2009.04.30.21.18.37;	author dj;	state Exp;
branches;
next	1.2;

1.2
date	2009.02.03.21.29.28;	author dj;	state Exp;
branches;
next	1.1;

1.1
date	2007.02.05.20.28.40;	author brolley;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Index: sid/component/cgen-cpu/mep

* Makefile.am: Regenerate.
* Makefile.in: Regenerate.
* common_model.cxx: Regenerate.
* mep-core1-decode.cxx: Regenerate.
* mep-core1-sem: Regenerate.
* mep-cpu.h: Regenerate.
* mep-decode.cxx: Regenerate.
* mep-desc.h: Regenerate.
* mep-sem.cxx: Regenerate.
* mep_ext1.h: Regenerate.
* ivc2-cop.cxx: New.
* ivc2-cpu.h: New.
* ivc2.h: New.
* mep-cop1-16-decode.cxx: New.
* mep-cop1-16-decode.h: New.
* mep-cop1-16-defs.h: New.
* mep-cop1-16-model.cxx: New.
* mep-cop1-16-model.h: New.
* mep-cop1-16-sem.cxx: New.
* mep-cop1-32-decode.cxx: New.
* mep-cop1-32-decode.h: New.
* mep-cop1-32-defs.h: New.
* mep-cop1-32-model.cxx: New.
* mep-cop1-32-model.h: New.
* mep-cop1-32-sem.cxx: New.
* mep-cop1-48-decode.cxx: New.
* mep-cop1-48-decode.h: New.
* mep-cop1-48-defs.h: New.
* mep-cop1-48-model.cxx: New.
* mep-cop1-48-model.h: New.
* mep-cop1-48-sem.cxx: New.
* mep-cop1-64-decode.cxx: New.
* mep-cop1-64-decode.h: New.
* mep-cop1-64-defs.h: New.
* mep-cop1-64-model.cxx: New.
* mep-cop1-64-model.h: New.
* mep-cop1-64-sem.cxx: New.

* mep.cxx (mep_cpu::mep_cpu): Add ivc2-decode? pin.
(mep_cpu::step_insns): Flush register write queu before looping,
and after each insn bundle.

* mep.h: Regenerate.
(mep_print_insn_set_ivc2_mode): Declare.
(mep_cpu): Add register write queues.  Add IVC2 support.
(decode_bundling): Likewise.
(step_one_insn): Likewise.

Index: sid/main/dynamic

* mainDynamic: Regenerate.
* mepCfg.cxx (MepBoardCfg::set_ivc2_decode): New.
* mepCfg.h (MepBoardCfg::set_ivc2_decode): Add.
@
text
@// common_model.cxx - Hand-written code for the Toshiba Media Engine modelling. -*- C++ -*-

// Common insn modelling functions for the 'mep' model.

// Copyright (C) 2003 Red Hat.
// This file is part of SID and is licensed under the GPL.
// See the file COPYING.SID for conditions for redistribution.

#include "config.h"
#include "mep_basic.h"
// begin-includes
#include "mep_ext1.h"
// end-includes

using namespace cgen;
using namespace mep_basic;
// begin-namespaces
using namespace mep_ext1;
// end-namespaces

// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// MeP-Integrator looks for function headers formatted as below and
// automatically generates explicit instantiations.
//   - The template header must be on one line.
//   - The return type must appear alone on the next line.
//   - The function declaration and all parameters must be on one line.
// Follow each function by a {begin,end}-generated-instantiations bracket for MeP-Integrator to generate instantiations for all modules.
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
template <class BASE, class CPU, class IDESC, class SCACHE>
UINT
mep_common_model<BASE, CPU, IDESC, SCACHE>::model_u_ldcb_before (CPU *cpu, const IDESC *idesc, int unit_num)
{
  // Accumulate the maximum stall time.
  set_current_stall (ldcb_busy);

  return 0;
}
// begin-generated-instantiations
template UINT mep_common_model<mep_mep_model,mep_basic_cpu,mep_idesc,mep_scache>::model_u_ldcb_before (mep_basic_cpu *, const mep_idesc *, int unit_num);
template UINT mep_common_model<mepcore1_mep_model,mep_ext1_cpu,mepcore1_idesc,mepcore1_scache>::model_u_ldcb_before (mep_ext1_cpu *, const mepcore1_idesc *, int unit_num);
template UINT mep_common_model<mepcop1_16_mep_model,mep_ext1_cpu,mepcop1_16_idesc,mepcop1_16_scache>::model_u_ldcb_before (mep_ext1_cpu *, const mepcop1_16_idesc *, int unit_num);
template UINT mep_common_model<mepcop1_32_mep_model,mep_ext1_cpu,mepcop1_32_idesc,mepcop1_32_scache>::model_u_ldcb_before (mep_ext1_cpu *, const mepcop1_32_idesc *, int unit_num);
template UINT mep_common_model<mepcop1_48_mep_model,mep_ext1_cpu,mepcop1_48_idesc,mepcop1_48_scache>::model_u_ldcb_before (mep_ext1_cpu *, const mepcop1_48_idesc *, int unit_num);
template UINT mep_common_model<mepcop1_64_mep_model,mep_ext1_cpu,mepcop1_64_idesc,mepcop1_64_scache>::model_u_ldcb_before (mep_ext1_cpu *, const mepcop1_64_idesc *, int unit_num);
// end-generated-instantiations

template <class BASE, class CPU, class IDESC, class SCACHE>
UINT
mep_common_model<BASE, CPU, IDESC, SCACHE>::model_u_divide_before (CPU *cpu, const IDESC *idesc, int unit_num)
{
  // Accumulate the maximum stall time.
  set_current_stall (divide_busy);

  return 0;
}
// begin-generated-instantiations
template UINT mep_common_model<mep_mep_model,mep_basic_cpu,mep_idesc,mep_scache>::model_u_divide_before (mep_basic_cpu *, const mep_idesc *, int unit_num);
template UINT mep_common_model<mepcore1_mep_model,mep_ext1_cpu,mepcore1_idesc,mepcore1_scache>::model_u_divide_before (mep_ext1_cpu *, const mepcore1_idesc *, int unit_num);
template UINT mep_common_model<mepcop1_16_mep_model,mep_ext1_cpu,mepcop1_16_idesc,mepcop1_16_scache>::model_u_divide_before (mep_ext1_cpu *, const mepcop1_16_idesc *, int unit_num);
template UINT mep_common_model<mepcop1_32_mep_model,mep_ext1_cpu,mepcop1_32_idesc,mepcop1_32_scache>::model_u_divide_before (mep_ext1_cpu *, const mepcop1_32_idesc *, int unit_num);
template UINT mep_common_model<mepcop1_48_mep_model,mep_ext1_cpu,mepcop1_48_idesc,mepcop1_48_scache>::model_u_divide_before (mep_ext1_cpu *, const mepcop1_48_idesc *, int unit_num);
template UINT mep_common_model<mepcop1_64_mep_model,mep_ext1_cpu,mepcop1_64_idesc,mepcop1_64_scache>::model_u_divide_before (mep_ext1_cpu *, const mepcop1_64_idesc *, int unit_num);
// end-generated-instantiations

template <class BASE, class CPU, class IDESC, class SCACHE>
UINT
mep_common_model<BASE, CPU, IDESC, SCACHE>::model_u_multiply_before (CPU *cpu, const IDESC *idesc, int unit_num)
{
  // Accumulate the maximum stall time.
  set_current_stall (multiply_busy);

  return 0;
}
// begin-generated-instantiations
template UINT mep_common_model<mep_mep_model,mep_basic_cpu,mep_idesc,mep_scache>::model_u_multiply_before (mep_basic_cpu *, const mep_idesc *, int unit_num);
template UINT mep_common_model<mepcore1_mep_model,mep_ext1_cpu,mepcore1_idesc,mepcore1_scache>::model_u_multiply_before (mep_ext1_cpu *, const mepcore1_idesc *, int unit_num);
template UINT mep_common_model<mepcop1_16_mep_model,mep_ext1_cpu,mepcop1_16_idesc,mepcop1_16_scache>::model_u_multiply_before (mep_ext1_cpu *, const mepcop1_16_idesc *, int unit_num);
template UINT mep_common_model<mepcop1_32_mep_model,mep_ext1_cpu,mepcop1_32_idesc,mepcop1_32_scache>::model_u_multiply_before (mep_ext1_cpu *, const mepcop1_32_idesc *, int unit_num);
template UINT mep_common_model<mepcop1_48_mep_model,mep_ext1_cpu,mepcop1_48_idesc,mepcop1_48_scache>::model_u_multiply_before (mep_ext1_cpu *, const mepcop1_48_idesc *, int unit_num);
template UINT mep_common_model<mepcop1_64_mep_model,mep_ext1_cpu,mepcop1_64_idesc,mepcop1_64_scache>::model_u_multiply_before (mep_ext1_cpu *, const mepcop1_64_idesc *, int unit_num);
// end-generated-instantiations

template <class BASE, class CPU, class IDESC, class SCACHE>
UINT
mep_common_model<BASE, CPU, IDESC, SCACHE>::model_u_use_ctrl_reg_before (CPU *cpu, const IDESC *idesc, int unit_num, INT usereg)
{
  // Accumulate the maximum stall time.
  set_current_stall (ctrl_reg_busy[usereg]);

  return 0;
}
// begin-generated-instantiations
template UINT mep_common_model<mep_mep_model,mep_basic_cpu,mep_idesc,mep_scache>::model_u_use_ctrl_reg_before (mep_basic_cpu *, const mep_idesc *, int unit_num, INT usereg);
template UINT mep_common_model<mepcore1_mep_model,mep_ext1_cpu,mepcore1_idesc,mepcore1_scache>::model_u_use_ctrl_reg_before (mep_ext1_cpu *, const mepcore1_idesc *, int unit_num, INT usereg);
template UINT mep_common_model<mepcop1_16_mep_model,mep_ext1_cpu,mepcop1_16_idesc,mepcop1_16_scache>::model_u_use_ctrl_reg_before (mep_ext1_cpu *, const mepcop1_16_idesc *, int unit_num, INT usereg);
template UINT mep_common_model<mepcop1_32_mep_model,mep_ext1_cpu,mepcop1_32_idesc,mepcop1_32_scache>::model_u_use_ctrl_reg_before (mep_ext1_cpu *, const mepcop1_32_idesc *, int unit_num, INT usereg);
template UINT mep_common_model<mepcop1_48_mep_model,mep_ext1_cpu,mepcop1_48_idesc,mepcop1_48_scache>::model_u_use_ctrl_reg_before (mep_ext1_cpu *, const mepcop1_48_idesc *, int unit_num, INT usereg);
template UINT mep_common_model<mepcop1_64_mep_model,mep_ext1_cpu,mepcop1_64_idesc,mepcop1_64_scache>::model_u_use_ctrl_reg_before (mep_ext1_cpu *, const mepcop1_64_idesc *, int unit_num, INT usereg);
// end-generated-instantiations

template <class BASE, class CPU, class IDESC, class SCACHE>
UINT
mep_common_model<BASE, CPU, IDESC, SCACHE>::model_u_use_gpr_before (CPU *cpu, const IDESC *idesc, int unit_num, INT usereg)
{
  assert (usereg >= 0);
  // Accumulate the maximum stall time.
  set_current_stall (gpr_busy[usereg]);

  return 0;
}
// begin-generated-instantiations
template UINT mep_common_model<mep_mep_model,mep_basic_cpu,mep_idesc,mep_scache>::model_u_use_gpr_before (mep_basic_cpu *, const mep_idesc *, int unit_num, INT usereg);
template UINT mep_common_model<mepcore1_mep_model,mep_ext1_cpu,mepcore1_idesc,mepcore1_scache>::model_u_use_gpr_before (mep_ext1_cpu *, const mepcore1_idesc *, int unit_num, INT usereg);
template UINT mep_common_model<mepcop1_16_mep_model,mep_ext1_cpu,mepcop1_16_idesc,mepcop1_16_scache>::model_u_use_gpr_before (mep_ext1_cpu *, const mepcop1_16_idesc *, int unit_num, INT usereg);
template UINT mep_common_model<mepcop1_32_mep_model,mep_ext1_cpu,mepcop1_32_idesc,mepcop1_32_scache>::model_u_use_gpr_before (mep_ext1_cpu *, const mepcop1_32_idesc *, int unit_num, INT usereg);
template UINT mep_common_model<mepcop1_48_mep_model,mep_ext1_cpu,mepcop1_48_idesc,mepcop1_48_scache>::model_u_use_gpr_before (mep_ext1_cpu *, const mepcop1_48_idesc *, int unit_num, INT usereg);
template UINT mep_common_model<mepcop1_64_mep_model,mep_ext1_cpu,mepcop1_64_idesc,mepcop1_64_scache>::model_u_use_gpr_before (mep_ext1_cpu *, const mepcop1_64_idesc *, int unit_num, INT usereg);
// end-generated-instantiations

template <class BASE, class CPU, class IDESC, class SCACHE>
UINT
mep_common_model<BASE, CPU, IDESC, SCACHE>::model_u_branch_after (CPU *cpu, const IDESC *idesc, int unit_num, unsigned long long referenced)
{
  // (1ULL << 0): The pc is the 1st element in inputs, outputs.
  // ??? can be cleaned up
  bool taken = referenced & (1ULL << 0);
  if (taken)
    {
      // Obtain the actual latency of the insn.
      UINT cycles = u_exec_cycles (cpu, idesc, unit_num, referenced);
      // 2 cycle penalty for branches taken.
      set_current_stall (cycles + 2);
    }

  return BASE::model_u_branch_after (cpu, idesc, unit_num, referenced);
}
// begin-generated-instantiations
template UINT mep_common_model<mep_mep_model,mep_basic_cpu,mep_idesc,mep_scache>::model_u_branch_after (mep_basic_cpu *, const mep_idesc *, int unit_num, unsigned long long referenced);
template UINT mep_common_model<mepcore1_mep_model,mep_ext1_cpu,mepcore1_idesc,mepcore1_scache>::model_u_branch_after (mep_ext1_cpu *, const mepcore1_idesc *, int unit_num, unsigned long long referenced);
template UINT mep_common_model<mepcop1_16_mep_model,mep_ext1_cpu,mepcop1_16_idesc,mepcop1_16_scache>::model_u_branch_after (mep_ext1_cpu *, const mepcop1_16_idesc *, int unit_num, unsigned long long referenced);
template UINT mep_common_model<mepcop1_32_mep_model,mep_ext1_cpu,mepcop1_32_idesc,mepcop1_32_scache>::model_u_branch_after (mep_ext1_cpu *, const mepcop1_32_idesc *, int unit_num, unsigned long long referenced);
template UINT mep_common_model<mepcop1_48_mep_model,mep_ext1_cpu,mepcop1_48_idesc,mepcop1_48_scache>::model_u_branch_after (mep_ext1_cpu *, const mepcop1_48_idesc *, int unit_num, unsigned long long referenced);
template UINT mep_common_model<mepcop1_64_mep_model,mep_ext1_cpu,mepcop1_64_idesc,mepcop1_64_scache>::model_u_branch_after (mep_ext1_cpu *, const mepcop1_64_idesc *, int unit_num, unsigned long long referenced);
// end-generated-instantiations

template <class BASE, class CPU, class IDESC, class SCACHE>
UINT
mep_common_model<BASE, CPU, IDESC, SCACHE>::model_u_multiply_after (CPU *cpu, const IDESC *idesc, int unit_num, unsigned long long referenced)
{
  // Obtain the actual latency of the insn.
  UINT cycles = u_exec_cycles (cpu, idesc, unit_num, referenced);

  // The divide unit will not be available until 1 cycle after the insn executes
  set_divide_busy (cycles + 1);

  return BASE::model_u_multiply_after (cpu, idesc, unit_num, referenced);
}
// begin-generated-instantiations
template UINT mep_common_model<mep_mep_model,mep_basic_cpu,mep_idesc,mep_scache>::model_u_multiply_after (mep_basic_cpu *, const mep_idesc *, int unit_num, unsigned long long referenced);
template UINT mep_common_model<mepcore1_mep_model,mep_ext1_cpu,mepcore1_idesc,mepcore1_scache>::model_u_multiply_after (mep_ext1_cpu *, const mepcore1_idesc *, int unit_num, unsigned long long referenced);
template UINT mep_common_model<mepcop1_16_mep_model,mep_ext1_cpu,mepcop1_16_idesc,mepcop1_16_scache>::model_u_multiply_after (mep_ext1_cpu *, const mepcop1_16_idesc *, int unit_num, unsigned long long referenced);
template UINT mep_common_model<mepcop1_32_mep_model,mep_ext1_cpu,mepcop1_32_idesc,mepcop1_32_scache>::model_u_multiply_after (mep_ext1_cpu *, const mepcop1_32_idesc *, int unit_num, unsigned long long referenced);
template UINT mep_common_model<mepcop1_48_mep_model,mep_ext1_cpu,mepcop1_48_idesc,mepcop1_48_scache>::model_u_multiply_after (mep_ext1_cpu *, const mepcop1_48_idesc *, int unit_num, unsigned long long referenced);
template UINT mep_common_model<mepcop1_64_mep_model,mep_ext1_cpu,mepcop1_64_idesc,mepcop1_64_scache>::model_u_multiply_after (mep_ext1_cpu *, const mepcop1_64_idesc *, int unit_num, unsigned long long referenced);
// end-generated-instantiations

template <class BASE, class CPU, class IDESC, class SCACHE>
UINT
mep_common_model<BASE, CPU, IDESC, SCACHE>::model_u_stcb_after (CPU *cpu, const IDESC *idesc, int unit_num, unsigned long long referenced)
{
  // Obtain the actual latency of the insn.
  UINT cycles = u_exec_cycles (cpu, idesc, unit_num, referenced);

  // The ldcb unit will not be available until 1 cycle after the insn executes
  set_ldcb_busy (cycles + 1);

  return BASE::model_u_stcb_after (cpu, idesc, unit_num, referenced);
}
// begin-generated-instantiations
template UINT mep_common_model<mep_mep_model,mep_basic_cpu,mep_idesc,mep_scache>::model_u_stcb_after (mep_basic_cpu *, const mep_idesc *, int unit_num, unsigned long long referenced);
template UINT mep_common_model<mepcore1_mep_model,mep_ext1_cpu,mepcore1_idesc,mepcore1_scache>::model_u_stcb_after (mep_ext1_cpu *, const mepcore1_idesc *, int unit_num, unsigned long long referenced);
template UINT mep_common_model<mepcop1_16_mep_model,mep_ext1_cpu,mepcop1_16_idesc,mepcop1_16_scache>::model_u_stcb_after (mep_ext1_cpu *, const mepcop1_16_idesc *, int unit_num, unsigned long long referenced);
template UINT mep_common_model<mepcop1_32_mep_model,mep_ext1_cpu,mepcop1_32_idesc,mepcop1_32_scache>::model_u_stcb_after (mep_ext1_cpu *, const mepcop1_32_idesc *, int unit_num, unsigned long long referenced);
template UINT mep_common_model<mepcop1_48_mep_model,mep_ext1_cpu,mepcop1_48_idesc,mepcop1_48_scache>::model_u_stcb_after (mep_ext1_cpu *, const mepcop1_48_idesc *, int unit_num, unsigned long long referenced);
template UINT mep_common_model<mepcop1_64_mep_model,mep_ext1_cpu,mepcop1_64_idesc,mepcop1_64_scache>::model_u_stcb_after (mep_ext1_cpu *, const mepcop1_64_idesc *, int unit_num, unsigned long long referenced);
// end-generated-instantiations

template <class BASE, class CPU, class IDESC, class SCACHE>
UINT
mep_common_model<BASE, CPU, IDESC, SCACHE>::model_u_divide_after (CPU *cpu, const IDESC *idesc, int unit_num, unsigned long long referenced)
{
  // Obtain the actual latency of the insn.
  UINT cycles = u_exec_cycles (cpu, idesc, unit_num, referenced);

  // The hi/lo registers will not be available until 34 cycles after the insn executes
  set_ctrl_reg_busy (CTRL_HI, cycles + 34);
  set_ctrl_reg_busy (CTRL_LO, cycles + 34);

  // The divide unit will not be available until 36 cycles after the insn executes
  set_divide_busy (cycles + 36);

  // The multiply unit will not be available until 36 cycles after the insn executes
  set_multiply_busy (cycles + 36);

  return BASE::model_u_divide_after (cpu, idesc, unit_num, referenced);
}
// begin-generated-instantiations
template UINT mep_common_model<mep_mep_model,mep_basic_cpu,mep_idesc,mep_scache>::model_u_divide_after (mep_basic_cpu *, const mep_idesc *, int unit_num, unsigned long long referenced);
template UINT mep_common_model<mepcore1_mep_model,mep_ext1_cpu,mepcore1_idesc,mepcore1_scache>::model_u_divide_after (mep_ext1_cpu *, const mepcore1_idesc *, int unit_num, unsigned long long referenced);
template UINT mep_common_model<mepcop1_16_mep_model,mep_ext1_cpu,mepcop1_16_idesc,mepcop1_16_scache>::model_u_divide_after (mep_ext1_cpu *, const mepcop1_16_idesc *, int unit_num, unsigned long long referenced);
template UINT mep_common_model<mepcop1_32_mep_model,mep_ext1_cpu,mepcop1_32_idesc,mepcop1_32_scache>::model_u_divide_after (mep_ext1_cpu *, const mepcop1_32_idesc *, int unit_num, unsigned long long referenced);
template UINT mep_common_model<mepcop1_48_mep_model,mep_ext1_cpu,mepcop1_48_idesc,mepcop1_48_scache>::model_u_divide_after (mep_ext1_cpu *, const mepcop1_48_idesc *, int unit_num, unsigned long long referenced);
template UINT mep_common_model<mepcop1_64_mep_model,mep_ext1_cpu,mepcop1_64_idesc,mepcop1_64_scache>::model_u_divide_after (mep_ext1_cpu *, const mepcop1_64_idesc *, int unit_num, unsigned long long referenced);
// end-generated-instantiations

template <class BASE, class CPU, class IDESC, class SCACHE>
UINT
mep_common_model<BASE, CPU, IDESC, SCACHE>::model_u_load_gpr_after (CPU *cpu, const IDESC *idesc, int unit_num, unsigned long long referenced, INT loadreg)
{
  assert (loadreg >= 0);

  // The latency of the insn itself.
  UINT cycles = u_exec_cycles (cpu, idesc, unit_num, referenced);

  // The gpr will not be available until 1 cycle after the insn executes
  set_gpr_busy (loadreg, cycles + 1);

  return BASE::model_u_load_gpr_after (cpu, idesc, unit_num, referenced, loadreg);
}
// begin-generated-instantiations
template UINT mep_common_model<mep_mep_model,mep_basic_cpu,mep_idesc,mep_scache>::model_u_load_gpr_after (mep_basic_cpu *, const mep_idesc *, int unit_num, unsigned long long referenced, INT loadreg);
template UINT mep_common_model<mepcore1_mep_model,mep_ext1_cpu,mepcore1_idesc,mepcore1_scache>::model_u_load_gpr_after (mep_ext1_cpu *, const mepcore1_idesc *, int unit_num, unsigned long long referenced, INT loadreg);
template UINT mep_common_model<mepcop1_16_mep_model,mep_ext1_cpu,mepcop1_16_idesc,mepcop1_16_scache>::model_u_load_gpr_after (mep_ext1_cpu *, const mepcop1_16_idesc *, int unit_num, unsigned long long referenced, INT loadreg);
template UINT mep_common_model<mepcop1_32_mep_model,mep_ext1_cpu,mepcop1_32_idesc,mepcop1_32_scache>::model_u_load_gpr_after (mep_ext1_cpu *, const mepcop1_32_idesc *, int unit_num, unsigned long long referenced, INT loadreg);
template UINT mep_common_model<mepcop1_48_mep_model,mep_ext1_cpu,mepcop1_48_idesc,mepcop1_48_scache>::model_u_load_gpr_after (mep_ext1_cpu *, const mepcop1_48_idesc *, int unit_num, unsigned long long referenced, INT loadreg);
template UINT mep_common_model<mepcop1_64_mep_model,mep_ext1_cpu,mepcop1_64_idesc,mepcop1_64_scache>::model_u_load_gpr_after (mep_ext1_cpu *, const mepcop1_64_idesc *, int unit_num, unsigned long long referenced, INT loadreg);
// end-generated-instantiations

template <class BASE, class CPU, class IDESC, class SCACHE>
UINT
mep_common_model<BASE, CPU, IDESC, SCACHE>::model_u_ldcb_gpr_after (CPU *cpu, const IDESC *idesc, int unit_num, unsigned long long referenced, INT loadreg)
{
  assert (loadreg >= 0);

  // The latency of the insn itself.
  UINT cycles = u_exec_cycles (cpu, idesc, unit_num, referenced);

  // The gpr will not be available until 2 cycles after the insn executes
  set_gpr_busy (loadreg, cycles + 2);

  return BASE::model_u_ldcb_gpr_after (cpu, idesc, unit_num, referenced, loadreg);
}
// begin-generated-instantiations
template UINT mep_common_model<mep_mep_model,mep_basic_cpu,mep_idesc,mep_scache>::model_u_ldcb_gpr_after (mep_basic_cpu *, const mep_idesc *, int unit_num, unsigned long long referenced, INT loadreg);
template UINT mep_common_model<mepcore1_mep_model,mep_ext1_cpu,mepcore1_idesc,mepcore1_scache>::model_u_ldcb_gpr_after (mep_ext1_cpu *, const mepcore1_idesc *, int unit_num, unsigned long long referenced, INT loadreg);
template UINT mep_common_model<mepcop1_16_mep_model,mep_ext1_cpu,mepcop1_16_idesc,mepcop1_16_scache>::model_u_ldcb_gpr_after (mep_ext1_cpu *, const mepcop1_16_idesc *, int unit_num, unsigned long long referenced, INT loadreg);
template UINT mep_common_model<mepcop1_32_mep_model,mep_ext1_cpu,mepcop1_32_idesc,mepcop1_32_scache>::model_u_ldcb_gpr_after (mep_ext1_cpu *, const mepcop1_32_idesc *, int unit_num, unsigned long long referenced, INT loadreg);
template UINT mep_common_model<mepcop1_48_mep_model,mep_ext1_cpu,mepcop1_48_idesc,mepcop1_48_scache>::model_u_ldcb_gpr_after (mep_ext1_cpu *, const mepcop1_48_idesc *, int unit_num, unsigned long long referenced, INT loadreg);
template UINT mep_common_model<mepcop1_64_mep_model,mep_ext1_cpu,mepcop1_64_idesc,mepcop1_64_scache>::model_u_ldcb_gpr_after (mep_ext1_cpu *, const mepcop1_64_idesc *, int unit_num, unsigned long long referenced, INT loadreg);
// end-generated-instantiations

template <class BASE, class CPU, class IDESC, class SCACHE>
UINT
mep_common_model<BASE, CPU, IDESC, SCACHE>::model_u_mul_gpr_after (CPU *cpu, const IDESC *idesc, int unit_num, unsigned long long referenced, INT resultreg)
{
  assert (resultreg >= 0);

  // The latency of the insn itself.
  UINT cycles = u_exec_cycles (cpu, idesc, unit_num, referenced);

  // The gpr will not be available until 2 cycles after the insn executes
  set_gpr_busy (resultreg, cycles + 2);

  return BASE::model_u_mul_gpr_after (cpu, idesc, unit_num, referenced, resultreg);
}
// begin-generated-instantiations
template UINT mep_common_model<mep_mep_model,mep_basic_cpu,mep_idesc,mep_scache>::model_u_mul_gpr_after (mep_basic_cpu *, const mep_idesc *, int unit_num, unsigned long long referenced, INT resultreg);
template UINT mep_common_model<mepcore1_mep_model,mep_ext1_cpu,mepcore1_idesc,mepcore1_scache>::model_u_mul_gpr_after (mep_ext1_cpu *, const mepcore1_idesc *, int unit_num, unsigned long long referenced, INT resultreg);
template UINT mep_common_model<mepcop1_16_mep_model,mep_ext1_cpu,mepcop1_16_idesc,mepcop1_16_scache>::model_u_mul_gpr_after (mep_ext1_cpu *, const mepcop1_16_idesc *, int unit_num, unsigned long long referenced, INT resultreg);
template UINT mep_common_model<mepcop1_32_mep_model,mep_ext1_cpu,mepcop1_32_idesc,mepcop1_32_scache>::model_u_mul_gpr_after (mep_ext1_cpu *, const mepcop1_32_idesc *, int unit_num, unsigned long long referenced, INT resultreg);
template UINT mep_common_model<mepcop1_48_mep_model,mep_ext1_cpu,mepcop1_48_idesc,mepcop1_48_scache>::model_u_mul_gpr_after (mep_ext1_cpu *, const mepcop1_48_idesc *, int unit_num, unsigned long long referenced, INT resultreg);
template UINT mep_common_model<mepcop1_64_mep_model,mep_ext1_cpu,mepcop1_64_idesc,mepcop1_64_scache>::model_u_mul_gpr_after (mep_ext1_cpu *, const mepcop1_64_idesc *, int unit_num, unsigned long long referenced, INT resultreg);
// end-generated-instantiations

template <class BASE, class CPU, class IDESC, class SCACHE>
void
mep_common_model<BASE, CPU, IDESC, SCACHE>::step_latency (sid::host_int_4 cycles)
{
  // Call the base class.
  BASE::step_latency (cycles);

  sid::host_int_8 new_total_latency = BASE::cpu->get_total_latency ();
  sid::host_int_8 latency = cycles + (new_total_latency - save_total_latency);

  // If there's no latency, then nothing to do.
  if (latency == 0)
    return;

  // Advance the hazard state information by the given number of cycles.
  for (int g = 0; g < num_gpr; ++g)
    gpr_busy[g] = gpr_busy[g] > latency ? gpr_busy[g] - latency : 0;

  for (int c = 0; c < num_ctrl_reg; ++c)
    ctrl_reg_busy[c] = ctrl_reg_busy[c] > latency ? ctrl_reg_busy[c] - latency : 0;

  multiply_busy = multiply_busy > latency ? multiply_busy - latency : 0;

  divide_busy = divide_busy > latency ? divide_busy - latency : 0;

  ldcb_busy = ldcb_busy > latency ? ldcb_busy - latency : 0;

  current_stall = current_stall > latency ? current_stall - latency : 0;

  save_total_latency = new_total_latency;
}
// begin-generated-instantiations
template void mep_common_model<mep_mep_model,mep_basic_cpu,mep_idesc,mep_scache>::step_latency (sid::host_int_4 cycles);
template void mep_common_model<mepcore1_mep_model,mep_ext1_cpu,mepcore1_idesc,mepcore1_scache>::step_latency (sid::host_int_4 cycles);
template void mep_common_model<mepcop1_16_mep_model,mep_ext1_cpu,mepcop1_16_idesc,mepcop1_16_scache>::step_latency (sid::host_int_4 cycles);
template void mep_common_model<mepcop1_32_mep_model,mep_ext1_cpu,mepcop1_32_idesc,mepcop1_32_scache>::step_latency (sid::host_int_4 cycles);
template void mep_common_model<mepcop1_48_mep_model,mep_ext1_cpu,mepcop1_48_idesc,mepcop1_48_scache>::step_latency (sid::host_int_4 cycles);
template void mep_common_model<mepcop1_64_mep_model,mep_ext1_cpu,mepcop1_64_idesc,mepcop1_64_scache>::step_latency (sid::host_int_4 cycles);
// end-generated-instantiations
@


1.2
log
@* compCGEN.cxx: Update to new MeP configuration.
* Makefile.am: Update to new MeP configuration.
* Makefile.in: Likewise.
* common_model.cxx: Likewise.
* mep-core1-decode.cxx: Likewise.
* mep-cpu.h: Likewise.
* mep-decode.cxx: Likewise.
* mep-desc.h: Likewise.
* mep.h: Likewise.
* mm_int.h (no_relation_component): Update to new MeP configuration.
* mepCfg.cxx (MepMemCfg): Update to new MeP configuration.
* mainDynamic.cxx (mk_sample): Update to new MeP configuration.
@
text
@d41 4
d59 4
d77 4
d95 4
d114 4
d140 4
d161 4
d182 4
d210 4
d233 4
d256 4
d279 4
d319 4
@


1.1
log
@Support for Toshiba MeP.
@
text
@a12 1
#include "mep_ext2.h"
a18 1
using namespace mep_ext2;
a40 5
template UINT mep_common_model<mepcore2_mep_model,mep_ext2_cpu,mepcore2_idesc,mepcore2_scache>::model_u_ldcb_before (mep_ext2_cpu *, const mepcore2_idesc *, int unit_num);
template UINT mep_common_model<mepcop2_16_mep_model,mep_ext2_cpu,mepcop2_16_idesc,mepcop2_16_scache>::model_u_ldcb_before (mep_ext2_cpu *, const mepcop2_16_idesc *, int unit_num);
template UINT mep_common_model<mepcop2_32_mep_model,mep_ext2_cpu,mepcop2_32_idesc,mepcop2_32_scache>::model_u_ldcb_before (mep_ext2_cpu *, const mepcop2_32_idesc *, int unit_num);
template UINT mep_common_model<mepcop2_48_mep_model,mep_ext2_cpu,mepcop2_48_idesc,mepcop2_48_scache>::model_u_ldcb_before (mep_ext2_cpu *, const mepcop2_48_idesc *, int unit_num);
template UINT mep_common_model<mepcop2_64_mep_model,mep_ext2_cpu,mepcop2_64_idesc,mepcop2_64_scache>::model_u_ldcb_before (mep_ext2_cpu *, const mepcop2_64_idesc *, int unit_num);
a54 5
template UINT mep_common_model<mepcore2_mep_model,mep_ext2_cpu,mepcore2_idesc,mepcore2_scache>::model_u_divide_before (mep_ext2_cpu *, const mepcore2_idesc *, int unit_num);
template UINT mep_common_model<mepcop2_16_mep_model,mep_ext2_cpu,mepcop2_16_idesc,mepcop2_16_scache>::model_u_divide_before (mep_ext2_cpu *, const mepcop2_16_idesc *, int unit_num);
template UINT mep_common_model<mepcop2_32_mep_model,mep_ext2_cpu,mepcop2_32_idesc,mepcop2_32_scache>::model_u_divide_before (mep_ext2_cpu *, const mepcop2_32_idesc *, int unit_num);
template UINT mep_common_model<mepcop2_48_mep_model,mep_ext2_cpu,mepcop2_48_idesc,mepcop2_48_scache>::model_u_divide_before (mep_ext2_cpu *, const mepcop2_48_idesc *, int unit_num);
template UINT mep_common_model<mepcop2_64_mep_model,mep_ext2_cpu,mepcop2_64_idesc,mepcop2_64_scache>::model_u_divide_before (mep_ext2_cpu *, const mepcop2_64_idesc *, int unit_num);
a68 5
template UINT mep_common_model<mepcore2_mep_model,mep_ext2_cpu,mepcore2_idesc,mepcore2_scache>::model_u_multiply_before (mep_ext2_cpu *, const mepcore2_idesc *, int unit_num);
template UINT mep_common_model<mepcop2_16_mep_model,mep_ext2_cpu,mepcop2_16_idesc,mepcop2_16_scache>::model_u_multiply_before (mep_ext2_cpu *, const mepcop2_16_idesc *, int unit_num);
template UINT mep_common_model<mepcop2_32_mep_model,mep_ext2_cpu,mepcop2_32_idesc,mepcop2_32_scache>::model_u_multiply_before (mep_ext2_cpu *, const mepcop2_32_idesc *, int unit_num);
template UINT mep_common_model<mepcop2_48_mep_model,mep_ext2_cpu,mepcop2_48_idesc,mepcop2_48_scache>::model_u_multiply_before (mep_ext2_cpu *, const mepcop2_48_idesc *, int unit_num);
template UINT mep_common_model<mepcop2_64_mep_model,mep_ext2_cpu,mepcop2_64_idesc,mepcop2_64_scache>::model_u_multiply_before (mep_ext2_cpu *, const mepcop2_64_idesc *, int unit_num);
a82 5
template UINT mep_common_model<mepcore2_mep_model,mep_ext2_cpu,mepcore2_idesc,mepcore2_scache>::model_u_use_ctrl_reg_before (mep_ext2_cpu *, const mepcore2_idesc *, int unit_num, INT usereg);
template UINT mep_common_model<mepcop2_16_mep_model,mep_ext2_cpu,mepcop2_16_idesc,mepcop2_16_scache>::model_u_use_ctrl_reg_before (mep_ext2_cpu *, const mepcop2_16_idesc *, int unit_num, INT usereg);
template UINT mep_common_model<mepcop2_32_mep_model,mep_ext2_cpu,mepcop2_32_idesc,mepcop2_32_scache>::model_u_use_ctrl_reg_before (mep_ext2_cpu *, const mepcop2_32_idesc *, int unit_num, INT usereg);
template UINT mep_common_model<mepcop2_48_mep_model,mep_ext2_cpu,mepcop2_48_idesc,mepcop2_48_scache>::model_u_use_ctrl_reg_before (mep_ext2_cpu *, const mepcop2_48_idesc *, int unit_num, INT usereg);
template UINT mep_common_model<mepcop2_64_mep_model,mep_ext2_cpu,mepcop2_64_idesc,mepcop2_64_scache>::model_u_use_ctrl_reg_before (mep_ext2_cpu *, const mepcop2_64_idesc *, int unit_num, INT usereg);
a97 5
template UINT mep_common_model<mepcore2_mep_model,mep_ext2_cpu,mepcore2_idesc,mepcore2_scache>::model_u_use_gpr_before (mep_ext2_cpu *, const mepcore2_idesc *, int unit_num, INT usereg);
template UINT mep_common_model<mepcop2_16_mep_model,mep_ext2_cpu,mepcop2_16_idesc,mepcop2_16_scache>::model_u_use_gpr_before (mep_ext2_cpu *, const mepcop2_16_idesc *, int unit_num, INT usereg);
template UINT mep_common_model<mepcop2_32_mep_model,mep_ext2_cpu,mepcop2_32_idesc,mepcop2_32_scache>::model_u_use_gpr_before (mep_ext2_cpu *, const mepcop2_32_idesc *, int unit_num, INT usereg);
template UINT mep_common_model<mepcop2_48_mep_model,mep_ext2_cpu,mepcop2_48_idesc,mepcop2_48_scache>::model_u_use_gpr_before (mep_ext2_cpu *, const mepcop2_48_idesc *, int unit_num, INT usereg);
template UINT mep_common_model<mepcop2_64_mep_model,mep_ext2_cpu,mepcop2_64_idesc,mepcop2_64_scache>::model_u_use_gpr_before (mep_ext2_cpu *, const mepcop2_64_idesc *, int unit_num, INT usereg);
a119 5
template UINT mep_common_model<mepcore2_mep_model,mep_ext2_cpu,mepcore2_idesc,mepcore2_scache>::model_u_branch_after (mep_ext2_cpu *, const mepcore2_idesc *, int unit_num, unsigned long long referenced);
template UINT mep_common_model<mepcop2_16_mep_model,mep_ext2_cpu,mepcop2_16_idesc,mepcop2_16_scache>::model_u_branch_after (mep_ext2_cpu *, const mepcop2_16_idesc *, int unit_num, unsigned long long referenced);
template UINT mep_common_model<mepcop2_32_mep_model,mep_ext2_cpu,mepcop2_32_idesc,mepcop2_32_scache>::model_u_branch_after (mep_ext2_cpu *, const mepcop2_32_idesc *, int unit_num, unsigned long long referenced);
template UINT mep_common_model<mepcop2_48_mep_model,mep_ext2_cpu,mepcop2_48_idesc,mepcop2_48_scache>::model_u_branch_after (mep_ext2_cpu *, const mepcop2_48_idesc *, int unit_num, unsigned long long referenced);
template UINT mep_common_model<mepcop2_64_mep_model,mep_ext2_cpu,mepcop2_64_idesc,mepcop2_64_scache>::model_u_branch_after (mep_ext2_cpu *, const mepcop2_64_idesc *, int unit_num, unsigned long long referenced);
a136 5
template UINT mep_common_model<mepcore2_mep_model,mep_ext2_cpu,mepcore2_idesc,mepcore2_scache>::model_u_multiply_after (mep_ext2_cpu *, const mepcore2_idesc *, int unit_num, unsigned long long referenced);
template UINT mep_common_model<mepcop2_16_mep_model,mep_ext2_cpu,mepcop2_16_idesc,mepcop2_16_scache>::model_u_multiply_after (mep_ext2_cpu *, const mepcop2_16_idesc *, int unit_num, unsigned long long referenced);
template UINT mep_common_model<mepcop2_32_mep_model,mep_ext2_cpu,mepcop2_32_idesc,mepcop2_32_scache>::model_u_multiply_after (mep_ext2_cpu *, const mepcop2_32_idesc *, int unit_num, unsigned long long referenced);
template UINT mep_common_model<mepcop2_48_mep_model,mep_ext2_cpu,mepcop2_48_idesc,mepcop2_48_scache>::model_u_multiply_after (mep_ext2_cpu *, const mepcop2_48_idesc *, int unit_num, unsigned long long referenced);
template UINT mep_common_model<mepcop2_64_mep_model,mep_ext2_cpu,mepcop2_64_idesc,mepcop2_64_scache>::model_u_multiply_after (mep_ext2_cpu *, const mepcop2_64_idesc *, int unit_num, unsigned long long referenced);
a153 5
template UINT mep_common_model<mepcore2_mep_model,mep_ext2_cpu,mepcore2_idesc,mepcore2_scache>::model_u_stcb_after (mep_ext2_cpu *, const mepcore2_idesc *, int unit_num, unsigned long long referenced);
template UINT mep_common_model<mepcop2_16_mep_model,mep_ext2_cpu,mepcop2_16_idesc,mepcop2_16_scache>::model_u_stcb_after (mep_ext2_cpu *, const mepcop2_16_idesc *, int unit_num, unsigned long long referenced);
template UINT mep_common_model<mepcop2_32_mep_model,mep_ext2_cpu,mepcop2_32_idesc,mepcop2_32_scache>::model_u_stcb_after (mep_ext2_cpu *, const mepcop2_32_idesc *, int unit_num, unsigned long long referenced);
template UINT mep_common_model<mepcop2_48_mep_model,mep_ext2_cpu,mepcop2_48_idesc,mepcop2_48_scache>::model_u_stcb_after (mep_ext2_cpu *, const mepcop2_48_idesc *, int unit_num, unsigned long long referenced);
template UINT mep_common_model<mepcop2_64_mep_model,mep_ext2_cpu,mepcop2_64_idesc,mepcop2_64_scache>::model_u_stcb_after (mep_ext2_cpu *, const mepcop2_64_idesc *, int unit_num, unsigned long long referenced);
a177 5
template UINT mep_common_model<mepcore2_mep_model,mep_ext2_cpu,mepcore2_idesc,mepcore2_scache>::model_u_divide_after (mep_ext2_cpu *, const mepcore2_idesc *, int unit_num, unsigned long long referenced);
template UINT mep_common_model<mepcop2_16_mep_model,mep_ext2_cpu,mepcop2_16_idesc,mepcop2_16_scache>::model_u_divide_after (mep_ext2_cpu *, const mepcop2_16_idesc *, int unit_num, unsigned long long referenced);
template UINT mep_common_model<mepcop2_32_mep_model,mep_ext2_cpu,mepcop2_32_idesc,mepcop2_32_scache>::model_u_divide_after (mep_ext2_cpu *, const mepcop2_32_idesc *, int unit_num, unsigned long long referenced);
template UINT mep_common_model<mepcop2_48_mep_model,mep_ext2_cpu,mepcop2_48_idesc,mepcop2_48_scache>::model_u_divide_after (mep_ext2_cpu *, const mepcop2_48_idesc *, int unit_num, unsigned long long referenced);
template UINT mep_common_model<mepcop2_64_mep_model,mep_ext2_cpu,mepcop2_64_idesc,mepcop2_64_scache>::model_u_divide_after (mep_ext2_cpu *, const mepcop2_64_idesc *, int unit_num, unsigned long long referenced);
a196 5
template UINT mep_common_model<mepcore2_mep_model,mep_ext2_cpu,mepcore2_idesc,mepcore2_scache>::model_u_load_gpr_after (mep_ext2_cpu *, const mepcore2_idesc *, int unit_num, unsigned long long referenced, INT loadreg);
template UINT mep_common_model<mepcop2_16_mep_model,mep_ext2_cpu,mepcop2_16_idesc,mepcop2_16_scache>::model_u_load_gpr_after (mep_ext2_cpu *, const mepcop2_16_idesc *, int unit_num, unsigned long long referenced, INT loadreg);
template UINT mep_common_model<mepcop2_32_mep_model,mep_ext2_cpu,mepcop2_32_idesc,mepcop2_32_scache>::model_u_load_gpr_after (mep_ext2_cpu *, const mepcop2_32_idesc *, int unit_num, unsigned long long referenced, INT loadreg);
template UINT mep_common_model<mepcop2_48_mep_model,mep_ext2_cpu,mepcop2_48_idesc,mepcop2_48_scache>::model_u_load_gpr_after (mep_ext2_cpu *, const mepcop2_48_idesc *, int unit_num, unsigned long long referenced, INT loadreg);
template UINT mep_common_model<mepcop2_64_mep_model,mep_ext2_cpu,mepcop2_64_idesc,mepcop2_64_scache>::model_u_load_gpr_after (mep_ext2_cpu *, const mepcop2_64_idesc *, int unit_num, unsigned long long referenced, INT loadreg);
a215 5
template UINT mep_common_model<mepcore2_mep_model,mep_ext2_cpu,mepcore2_idesc,mepcore2_scache>::model_u_ldcb_gpr_after (mep_ext2_cpu *, const mepcore2_idesc *, int unit_num, unsigned long long referenced, INT loadreg);
template UINT mep_common_model<mepcop2_16_mep_model,mep_ext2_cpu,mepcop2_16_idesc,mepcop2_16_scache>::model_u_ldcb_gpr_after (mep_ext2_cpu *, const mepcop2_16_idesc *, int unit_num, unsigned long long referenced, INT loadreg);
template UINT mep_common_model<mepcop2_32_mep_model,mep_ext2_cpu,mepcop2_32_idesc,mepcop2_32_scache>::model_u_ldcb_gpr_after (mep_ext2_cpu *, const mepcop2_32_idesc *, int unit_num, unsigned long long referenced, INT loadreg);
template UINT mep_common_model<mepcop2_48_mep_model,mep_ext2_cpu,mepcop2_48_idesc,mepcop2_48_scache>::model_u_ldcb_gpr_after (mep_ext2_cpu *, const mepcop2_48_idesc *, int unit_num, unsigned long long referenced, INT loadreg);
template UINT mep_common_model<mepcop2_64_mep_model,mep_ext2_cpu,mepcop2_64_idesc,mepcop2_64_scache>::model_u_ldcb_gpr_after (mep_ext2_cpu *, const mepcop2_64_idesc *, int unit_num, unsigned long long referenced, INT loadreg);
a234 5
template UINT mep_common_model<mepcore2_mep_model,mep_ext2_cpu,mepcore2_idesc,mepcore2_scache>::model_u_mul_gpr_after (mep_ext2_cpu *, const mepcore2_idesc *, int unit_num, unsigned long long referenced, INT resultreg);
template UINT mep_common_model<mepcop2_16_mep_model,mep_ext2_cpu,mepcop2_16_idesc,mepcop2_16_scache>::model_u_mul_gpr_after (mep_ext2_cpu *, const mepcop2_16_idesc *, int unit_num, unsigned long long referenced, INT resultreg);
template UINT mep_common_model<mepcop2_32_mep_model,mep_ext2_cpu,mepcop2_32_idesc,mepcop2_32_scache>::model_u_mul_gpr_after (mep_ext2_cpu *, const mepcop2_32_idesc *, int unit_num, unsigned long long referenced, INT resultreg);
template UINT mep_common_model<mepcop2_48_mep_model,mep_ext2_cpu,mepcop2_48_idesc,mepcop2_48_scache>::model_u_mul_gpr_after (mep_ext2_cpu *, const mepcop2_48_idesc *, int unit_num, unsigned long long referenced, INT resultreg);
template UINT mep_common_model<mepcop2_64_mep_model,mep_ext2_cpu,mepcop2_64_idesc,mepcop2_64_scache>::model_u_mul_gpr_after (mep_ext2_cpu *, const mepcop2_64_idesc *, int unit_num, unsigned long long referenced, INT resultreg);
a270 5
template void mep_common_model<mepcore2_mep_model,mep_ext2_cpu,mepcore2_idesc,mepcore2_scache>::step_latency (sid::host_int_4 cycles);
template void mep_common_model<mepcop2_16_mep_model,mep_ext2_cpu,mepcop2_16_idesc,mepcop2_16_scache>::step_latency (sid::host_int_4 cycles);
template void mep_common_model<mepcop2_32_mep_model,mep_ext2_cpu,mepcop2_32_idesc,mepcop2_32_scache>::step_latency (sid::host_int_4 cycles);
template void mep_common_model<mepcop2_48_mep_model,mep_ext2_cpu,mepcop2_48_idesc,mepcop2_48_scache>::step_latency (sid::host_int_4 cycles);
template void mep_common_model<mepcop2_64_mep_model,mep_ext2_cpu,mepcop2_64_idesc,mepcop2_64_scache>::step_latency (sid::host_int_4 cycles);
@

