head	1.6;
access;
symbols
	sid-snapshot-20180601:1.6
	sid-snapshot-20180501:1.6
	sid-snapshot-20180401:1.6
	sid-snapshot-20180301:1.6
	sid-snapshot-20180201:1.6
	sid-snapshot-20180101:1.6
	sid-snapshot-20171201:1.6
	sid-snapshot-20171101:1.6
	sid-snapshot-20171001:1.6
	sid-snapshot-20170901:1.6
	sid-snapshot-20170801:1.6
	sid-snapshot-20170701:1.6
	sid-snapshot-20170601:1.6
	sid-snapshot-20170501:1.6
	sid-snapshot-20170401:1.6
	sid-snapshot-20170301:1.6
	sid-snapshot-20170201:1.6
	sid-snapshot-20170101:1.6
	sid-snapshot-20161201:1.6
	sid-snapshot-20161101:1.6
	sid-snapshot-20160901:1.6
	sid-snapshot-20160801:1.6
	sid-snapshot-20160701:1.6
	sid-snapshot-20160601:1.6
	sid-snapshot-20160501:1.6
	sid-snapshot-20160401:1.6
	sid-snapshot-20160301:1.6
	sid-snapshot-20160201:1.6
	sid-snapshot-20160101:1.6
	sid-snapshot-20151201:1.6
	sid-snapshot-20151101:1.6
	sid-snapshot-20151001:1.6
	sid-snapshot-20150901:1.6
	sid-snapshot-20150801:1.6
	sid-snapshot-20150701:1.6
	sid-snapshot-20150601:1.6
	sid-snapshot-20150501:1.6
	sid-snapshot-20150401:1.6
	sid-snapshot-20150301:1.6
	sid-snapshot-20150201:1.6
	sid-snapshot-20150101:1.6
	sid-snapshot-20141201:1.6
	sid-snapshot-20141101:1.6
	sid-snapshot-20141001:1.6
	sid-snapshot-20140901:1.6
	sid-snapshot-20140801:1.6
	sid-snapshot-20140701:1.6
	sid-snapshot-20140601:1.6
	sid-snapshot-20140501:1.6
	sid-snapshot-20140401:1.6
	sid-snapshot-20140301:1.6
	sid-snapshot-20140201:1.6
	sid-snapshot-20140101:1.6
	sid-snapshot-20131201:1.6
	sid-snapshot-20131101:1.6
	sid-snapshot-20131001:1.6
	sid-snapshot-20130901:1.6
	sid-snapshot-20130801:1.6
	sid-snapshot-20130701:1.6
	sid-snapshot-20130601:1.6
	sid-snapshot-20130501:1.6
	sid-snapshot-20130401:1.6
	sid-snapshot-20130301:1.6
	sid-snapshot-20130201:1.6
	sid-snapshot-20130101:1.6
	sid-snapshot-20121201:1.6
	sid-snapshot-20121101:1.6
	sid-snapshot-20121001:1.6
	sid-snapshot-20120901:1.6
	sid-snapshot-20120801:1.6
	sid-snapshot-20120701:1.6
	sid-snapshot-20120601:1.6
	sid-snapshot-20120501:1.6
	sid-snapshot-20120401:1.6
	sid-snapshot-20120301:1.6
	sid-snapshot-20120201:1.6
	sid-snapshot-20120101:1.6
	sid-snapshot-20111201:1.6
	sid-snapshot-20111101:1.6
	sid-snapshot-20111001:1.6
	sid-snapshot-20110901:1.6
	sid-snapshot-20110801:1.6
	sid-snapshot-20110701:1.6
	sid-snapshot-20110601:1.6
	sid-snapshot-20110501:1.6
	sid-snapshot-20110401:1.6
	sid-snapshot-20110301:1.6
	sid-snapshot-20110201:1.6
	sid-snapshot-20110101:1.6
	sid-snapshot-20101201:1.6
	sid-snapshot-20101101:1.6
	sid-snapshot-20101001:1.6
	sid-snapshot-20100901:1.6
	sid-snapshot-20100801:1.6
	sid-snapshot-20100701:1.6
	sid-snapshot-20100601:1.6
	sid-snapshot-20100501:1.6
	sid-snapshot-20100401:1.6
	sid-snapshot-20100301:1.6
	sid-snapshot-20100201:1.6
	sid-snapshot-20100101:1.5
	sid-snapshot-20091201:1.5
	sid-snapshot-20091101:1.5
	sid-snapshot-20091001:1.5
	sid-snapshot-20090901:1.5
	sid-snapshot-20090801:1.5
	sid-snapshot-20090701:1.4
	sid-snapshot-20090601:1.3
	sid-snapshot-20090501:1.3
	sid-snapshot-20090401:1.2
	sid-snapshot-20090301:1.2
	sid-snapshot-20090201:1.1
	sid-snapshot-20090101:1.1
	sid-snapshot-20081201:1.1
	sid-snapshot-20081101:1.1
	sid-snapshot-20081001:1.1
	sid-snapshot-20080901:1.1
	sid-snapshot-20080801:1.1
	sid-snapshot-20080701:1.1
	sid-snapshot-20080601:1.1
	sid-snapshot-20080501:1.1
	sid-snapshot-20080403:1.1
	sid-snapshot-20080401:1.1
	sid-snapshot-20080301:1.1
	sid-snapshot-20080201:1.1
	sid-snapshot-20080101:1.1
	sid-snapshot-20071201:1.1
	sid-snapshot-20071101:1.1
	sid-snapshot-20071001:1.1;
locks; strict;
comment	@ * @;


1.6
date	2010.01.02.21.18.55;	author devans;	state Exp;
branches;
next	1.5;

1.5
date	2009.07.07.01.56.04;	author dj;	state Exp;
branches;
next	1.4;

1.4
date	2009.06.24.03.06.40;	author dj;	state Exp;
branches;
next	1.3;

1.3
date	2009.04.30.21.18.37;	author dj;	state Exp;
branches;
next	1.2;

1.2
date	2009.02.03.21.29.28;	author dj;	state Exp;
branches;
next	1.1;

1.1
date	2007.02.05.20.28.40;	author brolley;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Regenerate cgen files, update copyright year.
@
text
@/* CPU class elements for mep.

THIS FILE IS MACHINE GENERATED WITH CGEN.

Copyright (C) 2000-2010 Red Hat, Inc.

This file is part of the Red Hat simulators.


*/

// This file is included in the middle of the cpu class struct.

public:

// CPU state information.

  // Hardware elements.
  struct {
  /* program counter */
  USI h_pc;
  /* General purpose registers */
  SI h_gpr[16];
  /* Control/special registers */
  SI h_csr[32];
  /* 64-bit coprocessor registers */
  DI h_cr64[32];
  /* 64-bit coprocessor registers, pending writes */
  DI h_cr64_w[32];
  /* Coprocessor control registers */
  SI h_ccr[64];
  /* Coprocessor control registers, pending writes */
  SI h_ccr_w[64];
  } hardware;

  void stream_cgen_hardware (std::ostream &ost) const 
  {
    ost << hardware.h_pc << ' ';
    for (int i = 0; i < 16; i++)
      ost << hardware.h_gpr[i] << ' ';
    for (int i = 0; i < 32; i++)
      ost << hardware.h_csr[i] << ' ';
    for (int i = 0; i < 32; i++)
      ost << hardware.h_cr64[i] << ' ';
    for (int i = 0; i < 32; i++)
      ost << hardware.h_cr64_w[i] << ' ';
    for (int i = 0; i < 64; i++)
      ost << hardware.h_ccr[i] << ' ';
    for (int i = 0; i < 64; i++)
      ost << hardware.h_ccr_w[i] << ' ';
  }
  void destream_cgen_hardware (std::istream &ist) 
  {
    ist >> hardware.h_pc;
    for (int i = 0; i < 16; i++)
      ist >> hardware.h_gpr[i];
    for (int i = 0; i < 32; i++)
      ist >> hardware.h_csr[i];
    for (int i = 0; i < 32; i++)
      ist >> hardware.h_cr64[i];
    for (int i = 0; i < 32; i++)
      ist >> hardware.h_cr64_w[i];
    for (int i = 0; i < 64; i++)
      ist >> hardware.h_ccr[i];
    for (int i = 0; i < 64; i++)
      ist >> hardware.h_ccr_w[i];
  }
  // C++ register access function templates
#define current_cpu this

  inline USI h_pc_get () const { return this->hardware.h_pc; }
  inline void h_pc_set (USI newval) { this->hardware.h_pc = newval; }

  inline SI h_gpr_get (UINT regno) const { return this->hardware.h_gpr[regno]; }
  inline void h_gpr_set (UINT regno, SI newval) { this->hardware.h_gpr[regno] = newval; }

  inline SI h_csr_get (UINT regno) const { return current_cpu->cgen_get_csr_value (regno); }
  inline void h_csr_set (UINT regno, SI newval) { current_cpu->cgen_set_csr_value (regno, newval);
 }

  inline DI h_cr64_get (UINT regno) const { return this->hardware.h_cr64[regno]; }
  inline void h_cr64_set (UINT regno, DI newval) { current_cpu->h_cr64_queue_set (regno, newval);
 }

  inline DI h_cr64_w_get (UINT regno) const { return this->hardware.h_cr64_w[regno]; }
  inline void h_cr64_w_set (UINT regno, DI newval) { this->hardware.h_cr64_w[regno] = newval; }

  inline SI h_cr_get (UINT regno) const { return TRUNCDISI (current_cpu->h_cr64_get (regno)); }
  inline void h_cr_set (UINT regno, SI newval) { current_cpu->h_cr64_set (regno, EXTSIDI (newval));
 }

  inline SI h_ccr_get (UINT regno) const { return this->hardware.h_ccr[regno]; }
  inline void h_ccr_set (UINT regno, SI newval) { current_cpu->h_ccr_queue_set (regno, newval);
 }

  inline SI h_ccr_w_get (UINT regno) const { return this->hardware.h_ccr_w[regno]; }
  inline void h_ccr_w_set (UINT regno, SI newval) { this->hardware.h_ccr_w[regno] = newval; }

  inline DI h_cr_ivc2_get (UINT regno) const { return current_cpu->h_cr64_get (regno); }
  inline void h_cr_ivc2_set (UINT regno, DI newval) { current_cpu->h_cr64_set (regno, newval);
 }

  inline SI h_ccr_ivc2_get (UINT regno) const { return current_cpu->h_ccr_get (regno); }
  inline void h_ccr_ivc2_set (UINT regno, SI newval) { current_cpu->h_ccr_set (regno, newval);
 }

#undef current_cpu

@


1.5
log
@[cgen]

	* cpu/mep-core.cpu (fsft, ssarb): Mark as VOLATILE.
	* cpu/mep-ivc2.cpu (many): Add VOLATILE to more insns that make
	unspecified accesses to control registers.

[sid/component/cgen-cpu/mep]

	* mep-cop1-16-decode.cxx: Regenerate.
	* mep-cop1-16-decode.h: Regenerate.
	* mep-cop1-16-defs.h: Regenerate.
	* mep-cop1-16-model.cxx: Regenerate.
	* mep-cop1-16-model.h: Regenerate.
	* mep-cop1-16-sem.cxx: Regenerate.
	* mep-cop1-32-decode.cxx: Regenerate.
	* mep-cop1-32-decode.h: Regenerate.
	* mep-cop1-32-defs.h: Regenerate.
	* mep-cop1-32-model.cxx: Regenerate.
	* mep-cop1-32-model.h: Regenerate.
	* mep-cop1-32-sem.cxx: Regenerate.
	* mep-cop1-48-decode.cxx: Regenerate.
	* mep-cop1-48-decode.h: Regenerate.
	* mep-cop1-48-defs.h: Regenerate.
	* mep-cop1-48-model.cxx: Regenerate.
	* mep-cop1-48-model.h: Regenerate.
	* mep-cop1-48-sem.cxx: Regenerate.
	* mep-cop1-64-decode.cxx: Regenerate.
	* mep-cop1-64-decode.h: Regenerate.
	* mep-cop1-64-defs.h: Regenerate.
	* mep-cop1-64-model.cxx: Regenerate.
	* mep-cop1-64-model.h: Regenerate.
	* mep-cop1-64-sem.cxx: Regenerate.
	* mep-core1-decode.cxx: Regenerate.
	* mep-core1-decode.h: Regenerate.
	* mep-core1-defs.h: Regenerate.
	* mep-core1-model.cxx: Regenerate.
	* mep-core1-model.h: Regenerate.
	* mep-core1-sem.cxx: Regenerate.
	* mep-cpu.h: Regenerate.
	* mep-decode.cxx: Regenerate.
	* mep-decode.h: Regenerate.
	* mep-defs.h: Regenerate.
	* mep-desc.h: Regenerate.
	* mep-model.cxx: Regenerate.
	* mep-model.h: Regenerate.
	* mep-sem.cxx: Regenerate.

[opcodes]

	* mep-desc.c: Regenerate.
	* mep-desc.h: Regenerate.
	* mep-opc.c: Regenerate.
	* mep-opc.h: Regenerate.
@
text
@d5 1
a5 1
Copyright (C) 2000-2009 Red Hat, Inc.
@


1.4
log
@[cgen]

	* intrinsics.scm: Updates to support IVC2.
	(belongs-to-group?): Check IVC2 slots.
	(-slots-attribute): New.
	(targets::attributes): Add SLOTS.
	(target:add-well-known-intrinsics): Add CPMOV.
	(md-insn): Add CPTYPE and CRET?.
	(add-md-insn): Likewise.
	(add-intrinsic-for-isa): Disable the duplicate tests, as IVC2 has
	duplicate insns with different bit patterns.
	(write-cgen-insn?): Add cret? support.
	(intrinsics.h): Add vector types.
	(runtime-op): Add vector support.
	(intrinsic-protos.h): Let GCC define its types.  Add cret? support.

	* cpu/mep-core.cpu: Add CPTYPE and CRET attributes.
	* cpu/mep-ivc2.cpu: Update all insns to include type information.
	(h-cr-ivc2): Default to typeless.
	(h-ccr-ivc2): Fix register width.
	(SLOTS): Fix values and default.
	(ivc2_*): Add control register names.
	(crop, crqp, crpp, croc, crqc, crpc): Default to typeless.

[opcodes]

	* mep-desc.c: Regenerate.
	* mep-desc.h: Regenerate.
	* mep-dis.c: Regenerate.
	* mep-ibld.c: Regenerate.
	* mep-opc.c: Regenerate.

[sid/component/cgen-cpu/mep]

	* ivc2-cop.cxx (ivc2_cphadd_w): Change to return value.
	(ivc2_cpsubaca0u_b): Remove debug line.
	* ivc2-cpu.h (ivc2_cpccadd_b): Change to return value.
	* mep-cop1-16-decode.cxx: Regenerate.
	* mep-cop1-16-sem.cxx: Regenerate.
	* mep-cop1-32-decode.cxx: Regenerate.
	* mep-cop1-32-sem.cxx: Regenerate.
	* mep-cop1-48-decode.cxx: Regenerate.
	* mep-cop1-48-sem.cxx: Regenerate.
	* mep-cop1-64-decode.cxx: Regenerate.
	* mep-cop1-64-sem.cxx: Regenerate.
	* mep-core1-decode.cxx: Regenerate.
	* mep-cpu.h: Regenerate.
	* mep-decode.cxx: Regenerate.
	* mep-desc.h: Regenerate.
@
text
@d5 1
a5 1
Copyright (C) 2000-2007 Red Hat, Inc.
@


1.3
log
@Index: sid/component/cgen-cpu/mep

* Makefile.am: Regenerate.
* Makefile.in: Regenerate.
* common_model.cxx: Regenerate.
* mep-core1-decode.cxx: Regenerate.
* mep-core1-sem: Regenerate.
* mep-cpu.h: Regenerate.
* mep-decode.cxx: Regenerate.
* mep-desc.h: Regenerate.
* mep-sem.cxx: Regenerate.
* mep_ext1.h: Regenerate.
* ivc2-cop.cxx: New.
* ivc2-cpu.h: New.
* ivc2.h: New.
* mep-cop1-16-decode.cxx: New.
* mep-cop1-16-decode.h: New.
* mep-cop1-16-defs.h: New.
* mep-cop1-16-model.cxx: New.
* mep-cop1-16-model.h: New.
* mep-cop1-16-sem.cxx: New.
* mep-cop1-32-decode.cxx: New.
* mep-cop1-32-decode.h: New.
* mep-cop1-32-defs.h: New.
* mep-cop1-32-model.cxx: New.
* mep-cop1-32-model.h: New.
* mep-cop1-32-sem.cxx: New.
* mep-cop1-48-decode.cxx: New.
* mep-cop1-48-decode.h: New.
* mep-cop1-48-defs.h: New.
* mep-cop1-48-model.cxx: New.
* mep-cop1-48-model.h: New.
* mep-cop1-48-sem.cxx: New.
* mep-cop1-64-decode.cxx: New.
* mep-cop1-64-decode.h: New.
* mep-cop1-64-defs.h: New.
* mep-cop1-64-model.cxx: New.
* mep-cop1-64-model.h: New.
* mep-cop1-64-sem.cxx: New.

* mep.cxx (mep_cpu::mep_cpu): Add ivc2-decode? pin.
(mep_cpu::step_insns): Flush register write queu before looping,
and after each insn bundle.

* mep.h: Regenerate.
(mep_print_insn_set_ivc2_mode): Declare.
(mep_cpu): Add register write queues.  Add IVC2 support.
(decode_bundling): Likewise.
(step_one_insn): Likewise.

Index: sid/main/dynamic

* mainDynamic: Regenerate.
* mepCfg.cxx (MepBoardCfg::set_ivc2_decode): New.
* mepCfg.h (MepBoardCfg::set_ivc2_decode): Add.
@
text
@d103 2
a104 2
  inline DI h_ccr_ivc2_get (UINT regno) const { return current_cpu->h_ccr_get (regno); }
  inline void h_ccr_ivc2_set (UINT regno, DI newval) { current_cpu->h_ccr_set (regno, newval);
@


1.2
log
@* compCGEN.cxx: Update to new MeP configuration.
* Makefile.am: Update to new MeP configuration.
* Makefile.in: Likewise.
* common_model.cxx: Likewise.
* mep-core1-decode.cxx: Likewise.
* mep-cpu.h: Likewise.
* mep-decode.cxx: Likewise.
* mep-desc.h: Likewise.
* mep.h: Likewise.
* mm_int.h (no_relation_component): Update to new MeP configuration.
* mepCfg.cxx (MepMemCfg): Update to new MeP configuration.
* mainDynamic.cxx (mk_sample): Update to new MeP configuration.
@
text
@d28 2
d32 2
d45 2
d49 2
d61 2
d65 2
d82 5
a86 1
  inline void h_cr64_set (UINT regno, DI newval) { this->hardware.h_cr64[regno] = newval; }
d93 12
a104 1
  inline void h_ccr_set (UINT regno, SI newval) { current_cpu->cgen_set_ccr_value (regno, newval);
@


1.1
log
@Support for Toshiba MeP.
@
text
@d5 1
a5 1
Copyright (C) 2000-2005 Red Hat, Inc.
a29 2
  /* flag */
  USI h_fmax_compare_i_p;
a42 1
    ost << hardware.h_fmax_compare_i_p << ' ';
a54 1
    ist >> hardware.h_fmax_compare_i_p;
a79 11
  inline SF ext_core2_h_cr_fmax_get (UINT regno) const { return current_cpu->fmax_fr_get_handler (regno); }
  inline void ext_core2_h_cr_fmax_set (UINT regno, SF newval) { current_cpu->fmax_fr_set_handler (regno, newval);
 }

  inline USI ext_core2_h_ccr_fmax_get (UINT regno) const { return current_cpu->h_ccr_get (regno); }
  inline void ext_core2_h_ccr_fmax_set (UINT regno, USI newval) { current_cpu->h_ccr_set (regno, newval);
 }

  inline USI ext_core2_h_fmax_compare_i_p_get () const { return this->hardware.h_fmax_compare_i_p; }
  inline void ext_core2_h_fmax_compare_i_p_set (USI newval) { this->hardware.h_fmax_compare_i_p = newval; }

@

