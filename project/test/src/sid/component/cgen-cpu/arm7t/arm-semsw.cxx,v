head	1.8;
access;
symbols
	sid-snapshot-20180601:1.8
	sid-snapshot-20180501:1.8
	sid-snapshot-20180401:1.8
	sid-snapshot-20180301:1.8
	sid-snapshot-20180201:1.8
	sid-snapshot-20180101:1.8
	sid-snapshot-20171201:1.8
	sid-snapshot-20171101:1.8
	sid-snapshot-20171001:1.8
	sid-snapshot-20170901:1.8
	sid-snapshot-20170801:1.8
	sid-snapshot-20170701:1.8
	sid-snapshot-20170601:1.8
	sid-snapshot-20170501:1.8
	sid-snapshot-20170401:1.8
	sid-snapshot-20170301:1.8
	sid-snapshot-20170201:1.8
	sid-snapshot-20170101:1.8
	sid-snapshot-20161201:1.8
	sid-snapshot-20161101:1.8
	sid-snapshot-20160901:1.8
	sid-snapshot-20160801:1.8
	sid-snapshot-20160701:1.8
	sid-snapshot-20160601:1.8
	sid-snapshot-20160501:1.8
	sid-snapshot-20160401:1.8
	sid-snapshot-20160301:1.8
	sid-snapshot-20160201:1.8
	sid-snapshot-20160101:1.8
	sid-snapshot-20151201:1.8
	sid-snapshot-20151101:1.8
	sid-snapshot-20151001:1.8
	sid-snapshot-20150901:1.8
	sid-snapshot-20150801:1.8
	sid-snapshot-20150701:1.8
	sid-snapshot-20150601:1.8
	sid-snapshot-20150501:1.8
	sid-snapshot-20150401:1.8
	sid-snapshot-20150301:1.8
	sid-snapshot-20150201:1.8
	sid-snapshot-20150101:1.8
	sid-snapshot-20141201:1.8
	sid-snapshot-20141101:1.8
	sid-snapshot-20141001:1.8
	sid-snapshot-20140901:1.8
	sid-snapshot-20140801:1.8
	sid-snapshot-20140701:1.8
	sid-snapshot-20140601:1.8
	sid-snapshot-20140501:1.8
	sid-snapshot-20140401:1.8
	sid-snapshot-20140301:1.8
	sid-snapshot-20140201:1.8
	sid-snapshot-20140101:1.8
	sid-snapshot-20131201:1.8
	sid-snapshot-20131101:1.8
	sid-snapshot-20131001:1.8
	sid-snapshot-20130901:1.8
	sid-snapshot-20130801:1.8
	sid-snapshot-20130701:1.8
	sid-snapshot-20130601:1.8
	sid-snapshot-20130501:1.8
	sid-snapshot-20130401:1.8
	sid-snapshot-20130301:1.8
	sid-snapshot-20130201:1.8
	sid-snapshot-20130101:1.8
	sid-snapshot-20121201:1.8
	sid-snapshot-20121101:1.8
	sid-snapshot-20121001:1.8
	sid-snapshot-20120901:1.8
	sid-snapshot-20120801:1.8
	sid-snapshot-20120701:1.8
	sid-snapshot-20120601:1.8
	sid-snapshot-20120501:1.8
	sid-snapshot-20120401:1.8
	sid-snapshot-20120301:1.8
	sid-snapshot-20120201:1.8
	sid-snapshot-20120101:1.8
	sid-snapshot-20111201:1.8
	sid-snapshot-20111101:1.8
	sid-snapshot-20111001:1.8
	sid-snapshot-20110901:1.8
	sid-snapshot-20110801:1.8
	sid-snapshot-20110701:1.8
	sid-snapshot-20110601:1.8
	sid-snapshot-20110501:1.8
	sid-snapshot-20110401:1.8
	sid-snapshot-20110301:1.8
	sid-snapshot-20110201:1.8
	sid-snapshot-20110101:1.8
	sid-snapshot-20101201:1.8
	sid-snapshot-20101101:1.8
	sid-snapshot-20101001:1.8
	sid-snapshot-20100901:1.8
	sid-snapshot-20100801:1.8
	sid-snapshot-20100701:1.8
	sid-snapshot-20100601:1.8
	sid-snapshot-20100501:1.8
	sid-snapshot-20100401:1.8
	sid-snapshot-20100301:1.8
	sid-snapshot-20100201:1.7
	sid-snapshot-20100101:1.6
	sid-snapshot-20091201:1.6
	sid-snapshot-20091101:1.6
	sid-snapshot-20091001:1.5
	sid-snapshot-20090901:1.5
	sid-snapshot-20090801:1.5
	sid-snapshot-20090701:1.5
	sid-snapshot-20090601:1.5
	sid-snapshot-20090501:1.5
	sid-snapshot-20090401:1.5
	sid-snapshot-20090301:1.5
	sid-snapshot-20090201:1.5
	sid-snapshot-20090101:1.5
	sid-snapshot-20081201:1.5
	sid-snapshot-20081101:1.5
	sid-snapshot-20081001:1.5
	sid-snapshot-20080901:1.5
	sid-snapshot-20080801:1.5
	sid-snapshot-20080701:1.5
	sid-snapshot-20080601:1.5
	sid-snapshot-20080501:1.5
	sid-snapshot-20080403:1.5
	sid-snapshot-20080401:1.5
	sid-snapshot-20080301:1.5
	sid-snapshot-20080201:1.5
	sid-snapshot-20080101:1.5
	sid-snapshot-20071201:1.5
	sid-snapshot-20071101:1.5
	sid-snapshot-20071001:1.5
	sid-20020905-branchpoint:1.2
	sid-20020905-branch:1.2.0.2
	cygnus_cvs_20020108_pre:1.2;
locks; strict;
comment	@// @;


1.8
date	2010.02.12.02.33.04;	author devans;	state Exp;
branches;
next	1.7;

1.7
date	2010.01.02.21.18.54;	author devans;	state Exp;
branches;
next	1.6;

1.6
date	2009.10.24.00.45.55;	author devans;	state Exp;
branches;
next	1.5;

1.5
date	2003.07.05.17.07.20;	author devans;	state Exp;
branches;
next	1.4;

1.4
date	2003.02.06.20.44.34;	author fche;	state Exp;
branches;
next	1.3;

1.3
date	2002.09.07.14.42.48;	author fche;	state Exp;
branches;
next	1.2;

1.2
date	2001.03.01.19.15.32;	author fche;	state Exp;
branches;
next	1.1;

1.1
date	2000.12.07.19.30.48;	author fche;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Regenerate to pick up recent cgen changes.
[minor changes like removing K&R support, more consistent name for sfmt_empty]
@
text
@/* Simulator instruction semantics for arm.

THIS FILE IS MACHINE GENERATED WITH CGEN.

Copyright (C) 2000-2010 Red Hat, Inc.

This file is part of the Red Hat simulators.


*/


#include "arm7f.h"

using namespace arm7f; // FIXME: namespace organization still wip

#define GET_ATTR(name) GET_ATTR_##name ()


namespace arm7f {

/* Enum declaration for semantic fragments in cpu family arm.  */
typedef enum arm_frag_type {
  ARM_FRAG_LIST_END, ARM_FRAG_MVN_REG_REG_SHIFT_HDR, ARM_FRAG_CMP_REG_REG_SHIFT_HDR, ARM_FRAG_TST_REG_REG_SHIFT_HDR
 , ARM_FRAG_ORR_REG_REG_SHIFT_HDR, ARM_FRAG_MVN_REG_IMM_SHIFT_HDR, ARM_FRAG_CMP_REG_IMM_SHIFT_HDR, ARM_FRAG_TST_REG_IMM_SHIFT_HDR
 , ARM_FRAG_ORR_REG_IMM_SHIFT_HDR, ARM_FRAG_STRB_POST_INC_NONPRIV_REG_OFFSET_HDR, ARM_FRAG_LDR_PRE_DEC_WB_REG_OFFSET_HDR, ARM_FRAG_LDR_POST_INC_NONPRIV_REG_OFFSET_HDR
 , ARM_FRAG_STR_POST_DEC_REG_OFFSET_HDR, ARM_FRAG_LDR_POST_DEC_NONPRIV_REG_OFFSET_HDR, ARM_FRAG_STMDA_WB_HDR, ARM_FRAG_STMIA_WB_HDR
 , ARM_FRAG_STMIB_WB_HDR, ARM_FRAG_STMDB_WB_HDR, ARM_FRAG_LDMIA_WB_HDR, ARM_FRAG_LDMIB_WB_HDR
 , ARM_FRAG_STRB_POST_DEC_NONPRIV_IMM_OFFSET_HDR, ARM_FRAG_LDRB_POST_DEC_NONPRIV_IMM_OFFSET_HDR, ARM_FRAG_LDR_POST_DEC_NONPRIV_IMM_OFFSET_HDR, ARM_FRAG_X_HEADER
 , ARM_FRAG_TST_REG_REG_SHIFT_TRLR, ARM_FRAG_TEQ_REG_IMM_SHIFT_TRLR, ARM_FRAG_AND_IMM_TRLR, ARM_FRAG_AND_REG_REG_SHIFT_TRLR
 , ARM_FRAG_ORR_REG_IMM_SHIFT_TRLR, ARM_FRAG_UMULL_TRLR, ARM_FRAG_LDR_PRE_INC_IMM_OFFSET_TRLR, ARM_FRAG_LDRB_PRE_DEC_REG_OFFSET_TRLR
 , ARM_FRAG_STR_PRE_DEC_REG_OFFSET_TRLR, ARM_FRAG_STR_PRE_DEC_IMM_OFFSET_TRLR, ARM_FRAG_STRH_PRE_DEC_IMM_OFFSET_TRLR, ARM_FRAG_LDRSB_PRE_DEC_IMM_OFFSET_TRLR
 , ARM_FRAG_LDR_PRE_DEC_IMM_OFFSET_TRLR, ARM_FRAG_LDR_PRE_INC_REG_OFFSET_TRLR, ARM_FRAG_LDR_PRE_INC_WB_IMM_OFFSET_TRLR, ARM_FRAG_LDRB_PRE_DEC_WB_REG_OFFSET_TRLR
 , ARM_FRAG_STR_PRE_DEC_WB_REG_OFFSET_TRLR, ARM_FRAG_STR_PRE_DEC_WB_IMM_OFFSET_TRLR, ARM_FRAG_STRH_PRE_DEC_WB_IMM_OFFSET_TRLR, ARM_FRAG_LDRSB_PRE_DEC_WB_IMM_OFFSET_TRLR
 , ARM_FRAG_LDR_PRE_DEC_WB_IMM_OFFSET_TRLR, ARM_FRAG_LDR_PRE_INC_WB_REG_OFFSET_TRLR, ARM_FRAG_STRB_POST_INC_REG_OFFSET_TRLR, ARM_FRAG_STR_POST_INC_REG_OFFSET_TRLR
 , ARM_FRAG_STR_POST_INC_IMM_OFFSET_TRLR, ARM_FRAG_LDRB_POST_INC_REG_OFFSET_TRLR, ARM_FRAG_STRB_POST_DEC_REG_OFFSET_TRLR, ARM_FRAG_STR_POST_DEC_REG_OFFSET_TRLR
 , ARM_FRAG_STR_POST_DEC_IMM_OFFSET_TRLR, ARM_FRAG_LDRB_POST_DEC_REG_OFFSET_TRLR, ARM_FRAG_X_TRAILER, ARM_FRAG_X_COND_MID
 , ARM_FRAG_X_AFTER_MID, ARM_FRAG_X_BEFORE_MID, ARM_FRAG_X_CTI_CHAIN_MID, ARM_FRAG_X_CHAIN_MID
 , ARM_FRAG_X_BEGIN_MID, ARM_FRAG_X_INVALID_MID, ARM_FRAG_B_MID, ARM_FRAG_BL_MID
 , ARM_FRAG_BX_MID, ARM_FRAG_LDR_POST_DEC_IMM_OFFSET_MID, ARM_FRAG_LDR_POST_DEC_REG_OFFSET_MID, ARM_FRAG_LDR_POST_INC_IMM_OFFSET_MID
 , ARM_FRAG_LDR_POST_INC_REG_OFFSET_MID, ARM_FRAG_LDR_POST_DEC_NONPRIV_IMM_OFFSET_MID, ARM_FRAG_LDR_POST_DEC_NONPRIV_REG_OFFSET_MID, ARM_FRAG_LDR_POST_INC_NONPRIV_IMM_OFFSET_MID
 , ARM_FRAG_LDR_POST_INC_NONPRIV_REG_OFFSET_MID, ARM_FRAG_LDR_PRE_DEC_IMM_OFFSET_MID, ARM_FRAG_LDR_PRE_DEC_REG_OFFSET_MID, ARM_FRAG_LDR_PRE_INC_IMM_OFFSET_MID
 , ARM_FRAG_LDR_PRE_INC_REG_OFFSET_MID, ARM_FRAG_LDR_PRE_DEC_WB_IMM_OFFSET_MID, ARM_FRAG_LDR_PRE_DEC_WB_REG_OFFSET_MID, ARM_FRAG_LDR_PRE_INC_WB_IMM_OFFSET_MID
 , ARM_FRAG_LDR_PRE_INC_WB_REG_OFFSET_MID, ARM_FRAG_LDRB_POST_DEC_IMM_OFFSET_MID, ARM_FRAG_LDRB_POST_INC_IMM_OFFSET_MID, ARM_FRAG_LDRB_POST_DEC_NONPRIV_IMM_OFFSET_MID
 , ARM_FRAG_LDRB_POST_INC_NONPRIV_IMM_OFFSET_MID, ARM_FRAG_LDRB_PRE_DEC_IMM_OFFSET_MID, ARM_FRAG_LDRB_PRE_DEC_REG_OFFSET_MID, ARM_FRAG_LDRB_PRE_INC_IMM_OFFSET_MID
 , ARM_FRAG_LDRB_PRE_INC_REG_OFFSET_MID, ARM_FRAG_LDRB_PRE_DEC_WB_IMM_OFFSET_MID, ARM_FRAG_LDRB_PRE_DEC_WB_REG_OFFSET_MID, ARM_FRAG_LDRB_PRE_INC_WB_IMM_OFFSET_MID
 , ARM_FRAG_LDRB_PRE_INC_WB_REG_OFFSET_MID, ARM_FRAG_STR_POST_DEC_IMM_OFFSET_MID, ARM_FRAG_STR_POST_INC_IMM_OFFSET_MID, ARM_FRAG_STR_POST_DEC_NONPRIV_IMM_OFFSET_MID
 , ARM_FRAG_STR_POST_INC_NONPRIV_IMM_OFFSET_MID, ARM_FRAG_STR_PRE_DEC_IMM_OFFSET_MID, ARM_FRAG_STR_PRE_DEC_REG_OFFSET_MID, ARM_FRAG_STR_PRE_INC_IMM_OFFSET_MID
 , ARM_FRAG_STR_PRE_INC_REG_OFFSET_MID, ARM_FRAG_STR_PRE_DEC_WB_IMM_OFFSET_MID, ARM_FRAG_STR_PRE_DEC_WB_REG_OFFSET_MID, ARM_FRAG_STR_PRE_INC_WB_IMM_OFFSET_MID
 , ARM_FRAG_STR_PRE_INC_WB_REG_OFFSET_MID, ARM_FRAG_STRB_POST_DEC_IMM_OFFSET_MID, ARM_FRAG_STRB_POST_INC_IMM_OFFSET_MID, ARM_FRAG_STRB_POST_DEC_NONPRIV_IMM_OFFSET_MID
 , ARM_FRAG_STRB_POST_INC_NONPRIV_IMM_OFFSET_MID, ARM_FRAG_STRB_POST_INC_NONPRIV_REG_OFFSET_MID, ARM_FRAG_STRB_PRE_DEC_IMM_OFFSET_MID, ARM_FRAG_STRB_PRE_DEC_REG_OFFSET_MID
 , ARM_FRAG_STRB_PRE_INC_IMM_OFFSET_MID, ARM_FRAG_STRB_PRE_INC_REG_OFFSET_MID, ARM_FRAG_STRB_PRE_DEC_WB_IMM_OFFSET_MID, ARM_FRAG_STRB_PRE_DEC_WB_REG_OFFSET_MID
 , ARM_FRAG_STRB_PRE_INC_WB_IMM_OFFSET_MID, ARM_FRAG_STRB_PRE_INC_WB_REG_OFFSET_MID, ARM_FRAG_STRH_PRE_DEC_IMM_OFFSET_MID, ARM_FRAG_STRH_PRE_DEC_REG_OFFSET_MID
 , ARM_FRAG_STRH_PRE_INC_IMM_OFFSET_MID, ARM_FRAG_STRH_PRE_INC_REG_OFFSET_MID, ARM_FRAG_STRH_PRE_DEC_WB_IMM_OFFSET_MID, ARM_FRAG_STRH_PRE_DEC_WB_REG_OFFSET_MID
 , ARM_FRAG_STRH_PRE_INC_WB_IMM_OFFSET_MID, ARM_FRAG_STRH_PRE_INC_WB_REG_OFFSET_MID, ARM_FRAG_STRH_POST_DEC_IMM_OFFSET_MID, ARM_FRAG_STRH_POST_DEC_REG_OFFSET_MID
 , ARM_FRAG_STRH_POST_INC_IMM_OFFSET_MID, ARM_FRAG_STRH_POST_INC_REG_OFFSET_MID, ARM_FRAG_LDRSB_PRE_DEC_IMM_OFFSET_MID, ARM_FRAG_LDRSB_PRE_DEC_REG_OFFSET_MID
 , ARM_FRAG_LDRSB_PRE_INC_IMM_OFFSET_MID, ARM_FRAG_LDRSB_PRE_INC_REG_OFFSET_MID, ARM_FRAG_LDRSB_PRE_DEC_WB_IMM_OFFSET_MID, ARM_FRAG_LDRSB_PRE_DEC_WB_REG_OFFSET_MID
 , ARM_FRAG_LDRSB_PRE_INC_WB_IMM_OFFSET_MID, ARM_FRAG_LDRSB_PRE_INC_WB_REG_OFFSET_MID, ARM_FRAG_LDRSB_POST_DEC_IMM_OFFSET_MID, ARM_FRAG_LDRSB_POST_DEC_REG_OFFSET_MID
 , ARM_FRAG_LDRSB_POST_INC_IMM_OFFSET_MID, ARM_FRAG_LDRSB_POST_INC_REG_OFFSET_MID, ARM_FRAG_LDRH_PRE_DEC_IMM_OFFSET_MID, ARM_FRAG_LDRH_PRE_DEC_REG_OFFSET_MID
 , ARM_FRAG_LDRH_PRE_INC_IMM_OFFSET_MID, ARM_FRAG_LDRH_PRE_INC_REG_OFFSET_MID, ARM_FRAG_LDRH_PRE_DEC_WB_IMM_OFFSET_MID, ARM_FRAG_LDRH_PRE_DEC_WB_REG_OFFSET_MID
 , ARM_FRAG_LDRH_PRE_INC_WB_IMM_OFFSET_MID, ARM_FRAG_LDRH_PRE_INC_WB_REG_OFFSET_MID, ARM_FRAG_LDRH_POST_DEC_IMM_OFFSET_MID, ARM_FRAG_LDRH_POST_DEC_REG_OFFSET_MID
 , ARM_FRAG_LDRH_POST_INC_IMM_OFFSET_MID, ARM_FRAG_LDRH_POST_INC_REG_OFFSET_MID, ARM_FRAG_LDRSH_PRE_DEC_IMM_OFFSET_MID, ARM_FRAG_LDRSH_PRE_DEC_REG_OFFSET_MID
 , ARM_FRAG_LDRSH_PRE_INC_IMM_OFFSET_MID, ARM_FRAG_LDRSH_PRE_INC_REG_OFFSET_MID, ARM_FRAG_LDRSH_PRE_DEC_WB_IMM_OFFSET_MID, ARM_FRAG_LDRSH_PRE_DEC_WB_REG_OFFSET_MID
 , ARM_FRAG_LDRSH_PRE_INC_WB_IMM_OFFSET_MID, ARM_FRAG_LDRSH_PRE_INC_WB_REG_OFFSET_MID, ARM_FRAG_LDRSH_POST_DEC_IMM_OFFSET_MID, ARM_FRAG_LDRSH_POST_DEC_REG_OFFSET_MID
 , ARM_FRAG_LDRSH_POST_INC_IMM_OFFSET_MID, ARM_FRAG_LDRSH_POST_INC_REG_OFFSET_MID, ARM_FRAG_MUL_MID, ARM_FRAG_MLA_MID
 , ARM_FRAG_UMULL_MID, ARM_FRAG_UMLAL_MID, ARM_FRAG_SMULL_MID, ARM_FRAG_SMLAL_MID
 , ARM_FRAG_SWP_MID, ARM_FRAG_SWPB_MID, ARM_FRAG_SWI_MID, ARM_FRAG_AND_REG_IMM_SHIFT_MID
 , ARM_FRAG_AND_REG_REG_SHIFT_MID, ARM_FRAG_AND_IMM_MID, ARM_FRAG_ORR_REG_IMM_SHIFT_MID, ARM_FRAG_ORR_REG_REG_SHIFT_MID
 , ARM_FRAG_ORR_IMM_MID, ARM_FRAG_EOR_REG_IMM_SHIFT_MID, ARM_FRAG_EOR_REG_REG_SHIFT_MID, ARM_FRAG_EOR_IMM_MID
 , ARM_FRAG_MOV_REG_IMM_SHIFT_MID, ARM_FRAG_MOV_REG_REG_SHIFT_MID, ARM_FRAG_MOV_IMM_MID, ARM_FRAG_BIC_REG_IMM_SHIFT_MID
 , ARM_FRAG_BIC_REG_REG_SHIFT_MID, ARM_FRAG_BIC_IMM_MID, ARM_FRAG_MVN_REG_IMM_SHIFT_MID, ARM_FRAG_MVN_REG_REG_SHIFT_MID
 , ARM_FRAG_MVN_IMM_MID, ARM_FRAG_ADD_REG_IMM_SHIFT_MID, ARM_FRAG_ADD_REG_REG_SHIFT_MID, ARM_FRAG_ADD_IMM_MID
 , ARM_FRAG_ADC_REG_IMM_SHIFT_MID, ARM_FRAG_ADC_REG_REG_SHIFT_MID, ARM_FRAG_ADC_IMM_MID, ARM_FRAG_SUB_REG_IMM_SHIFT_MID
 , ARM_FRAG_SUB_REG_REG_SHIFT_MID, ARM_FRAG_SUB_IMM_MID, ARM_FRAG_SBC_REG_IMM_SHIFT_MID, ARM_FRAG_SBC_REG_REG_SHIFT_MID
 , ARM_FRAG_SBC_IMM_MID, ARM_FRAG_RSB_REG_IMM_SHIFT_MID, ARM_FRAG_RSB_REG_REG_SHIFT_MID, ARM_FRAG_RSB_IMM_MID
 , ARM_FRAG_RSC_REG_IMM_SHIFT_MID, ARM_FRAG_RSC_REG_REG_SHIFT_MID, ARM_FRAG_RSC_IMM_MID, ARM_FRAG_TST_REG_IMM_SHIFT_MID
 , ARM_FRAG_TST_REG_REG_SHIFT_MID, ARM_FRAG_TST_IMM_MID, ARM_FRAG_TEQ_REG_IMM_SHIFT_MID, ARM_FRAG_TEQ_REG_REG_SHIFT_MID
 , ARM_FRAG_TEQ_IMM_MID, ARM_FRAG_CMP_REG_IMM_SHIFT_MID, ARM_FRAG_CMP_REG_REG_SHIFT_MID, ARM_FRAG_CMP_IMM_MID
 , ARM_FRAG_CMN_REG_IMM_SHIFT_MID, ARM_FRAG_CMN_REG_REG_SHIFT_MID, ARM_FRAG_CMN_IMM_MID, ARM_FRAG_LDMDA_MID
 , ARM_FRAG_LDMDA_SW_MID, ARM_FRAG_LDMDA_WB_MID, ARM_FRAG_LDMDA_SW_WB_MID, ARM_FRAG_LDMIB_MID
 , ARM_FRAG_LDMIB_SW_MID, ARM_FRAG_LDMIB_WB_MID, ARM_FRAG_LDMIB_SW_WB_MID, ARM_FRAG_LDMIA_MID
 , ARM_FRAG_LDMIA_SW_MID, ARM_FRAG_LDMIA_WB_MID, ARM_FRAG_LDMIA_SW_WB_MID, ARM_FRAG_LDMDB_MID
 , ARM_FRAG_LDMDB_SW_MID, ARM_FRAG_LDMDB_WB_MID, ARM_FRAG_LDMDB_SW_WB_MID, ARM_FRAG_STMDB_MID
 , ARM_FRAG_STMDB_SW_MID, ARM_FRAG_STMDB_WB_MID, ARM_FRAG_STMDB_SW_WB_MID, ARM_FRAG_STMIB_MID
 , ARM_FRAG_STMIB_SW_MID, ARM_FRAG_STMIB_WB_MID, ARM_FRAG_STMIB_SW_WB_MID, ARM_FRAG_STMIA_MID
 , ARM_FRAG_STMIA_SW_MID, ARM_FRAG_STMIA_WB_MID, ARM_FRAG_STMIA_SW_WB_MID, ARM_FRAG_STMDA_MID
 , ARM_FRAG_STMDA_SW_MID, ARM_FRAG_STMDA_WB_MID, ARM_FRAG_STMDA_SW_WB_MID, ARM_FRAG_MRS_C_MID
 , ARM_FRAG_MRS_S_MID, ARM_FRAG_MSR_C_MID, ARM_FRAG_MSR_S_MID, ARM_FRAG_MAX
} ARM_FRAG_TYPE;

struct arm_insn_frag {
  ARM_INSN_TYPE itype;
  // 4: header+middle+trailer+delimiter
  ARM_FRAG_TYPE ftype[4];
};

struct arm_pbb_label {
  ARM_FRAG_TYPE frag;
  void *label;
};

} // end arm7f namespace

// Table of frags used by each insn.

const arm_insn_frag arm_frag_usage[] = {
  { ARM_INSN_X_COND, ARM_FRAG_X_COND_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_X_AFTER, ARM_FRAG_X_AFTER_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_X_BEFORE, ARM_FRAG_X_BEFORE_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_X_CTI_CHAIN, ARM_FRAG_X_CTI_CHAIN_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_X_CHAIN, ARM_FRAG_X_CHAIN_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_X_BEGIN, ARM_FRAG_X_BEGIN_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_X_INVALID, ARM_FRAG_X_INVALID_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_B, ARM_FRAG_B_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_BL, ARM_FRAG_BL_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_BX, ARM_FRAG_BX_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_LDR_POST_DEC_IMM_OFFSET, ARM_FRAG_LDR_POST_DEC_IMM_OFFSET_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_LDR_POST_DEC_REG_OFFSET, ARM_FRAG_LDR_POST_DEC_REG_OFFSET_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_LDR_POST_INC_IMM_OFFSET, ARM_FRAG_LDR_POST_DEC_NONPRIV_IMM_OFFSET_HDR, ARM_FRAG_LDR_POST_INC_IMM_OFFSET_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_LDR_POST_INC_REG_OFFSET, ARM_FRAG_LDR_POST_DEC_NONPRIV_REG_OFFSET_HDR, ARM_FRAG_LDR_POST_INC_REG_OFFSET_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_LDR_POST_DEC_NONPRIV_IMM_OFFSET, ARM_FRAG_LDR_POST_DEC_NONPRIV_IMM_OFFSET_HDR, ARM_FRAG_LDR_POST_DEC_NONPRIV_IMM_OFFSET_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_LDR_POST_DEC_NONPRIV_REG_OFFSET, ARM_FRAG_LDR_POST_DEC_NONPRIV_REG_OFFSET_HDR, ARM_FRAG_LDR_POST_DEC_NONPRIV_REG_OFFSET_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_LDR_POST_INC_NONPRIV_IMM_OFFSET, ARM_FRAG_LDR_POST_INC_NONPRIV_IMM_OFFSET_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_LDR_POST_INC_NONPRIV_REG_OFFSET, ARM_FRAG_LDR_POST_INC_NONPRIV_REG_OFFSET_HDR, ARM_FRAG_LDR_POST_INC_NONPRIV_REG_OFFSET_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_LDR_PRE_DEC_IMM_OFFSET, ARM_FRAG_LDR_PRE_DEC_IMM_OFFSET_MID, ARM_FRAG_LDR_PRE_DEC_IMM_OFFSET_TRLR, ARM_FRAG_LIST_END },
  { ARM_INSN_LDR_PRE_DEC_REG_OFFSET, ARM_FRAG_LDR_PRE_DEC_WB_REG_OFFSET_HDR, ARM_FRAG_LDR_PRE_DEC_REG_OFFSET_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_LDR_PRE_INC_IMM_OFFSET, ARM_FRAG_LDR_PRE_INC_IMM_OFFSET_MID, ARM_FRAG_LDR_PRE_INC_IMM_OFFSET_TRLR, ARM_FRAG_LIST_END },
  { ARM_INSN_LDR_PRE_INC_REG_OFFSET, ARM_FRAG_LDR_PRE_DEC_WB_REG_OFFSET_HDR, ARM_FRAG_LDR_PRE_INC_REG_OFFSET_MID, ARM_FRAG_LDR_PRE_INC_REG_OFFSET_TRLR, ARM_FRAG_LIST_END },
  { ARM_INSN_LDR_PRE_DEC_WB_IMM_OFFSET, ARM_FRAG_LDR_PRE_DEC_WB_IMM_OFFSET_MID, ARM_FRAG_LDR_PRE_DEC_WB_IMM_OFFSET_TRLR, ARM_FRAG_LIST_END },
  { ARM_INSN_LDR_PRE_DEC_WB_REG_OFFSET, ARM_FRAG_LDR_PRE_DEC_WB_REG_OFFSET_HDR, ARM_FRAG_LDR_PRE_DEC_WB_REG_OFFSET_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_LDR_PRE_INC_WB_IMM_OFFSET, ARM_FRAG_LDR_PRE_INC_WB_IMM_OFFSET_MID, ARM_FRAG_LDR_PRE_INC_WB_IMM_OFFSET_TRLR, ARM_FRAG_LIST_END },
  { ARM_INSN_LDR_PRE_INC_WB_REG_OFFSET, ARM_FRAG_LDR_PRE_DEC_WB_REG_OFFSET_HDR, ARM_FRAG_LDR_PRE_INC_WB_REG_OFFSET_MID, ARM_FRAG_LDR_PRE_INC_WB_REG_OFFSET_TRLR, ARM_FRAG_LIST_END },
  { ARM_INSN_LDRB_POST_DEC_IMM_OFFSET, ARM_FRAG_LDRB_POST_DEC_IMM_OFFSET_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_LDRB_POST_DEC_REG_OFFSET, ARM_FRAG_LDR_POST_INC_NONPRIV_REG_OFFSET_HDR, ARM_FRAG_LDRB_POST_DEC_REG_OFFSET_TRLR, ARM_FRAG_LIST_END },
  { ARM_INSN_LDRB_POST_INC_IMM_OFFSET, ARM_FRAG_LDRB_POST_DEC_NONPRIV_IMM_OFFSET_HDR, ARM_FRAG_LDRB_POST_INC_IMM_OFFSET_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_LDRB_POST_INC_REG_OFFSET, ARM_FRAG_LDR_POST_INC_NONPRIV_REG_OFFSET_HDR, ARM_FRAG_LDRB_POST_INC_REG_OFFSET_TRLR, ARM_FRAG_LIST_END },
  { ARM_INSN_LDRB_POST_DEC_NONPRIV_IMM_OFFSET, ARM_FRAG_LDRB_POST_DEC_NONPRIV_IMM_OFFSET_HDR, ARM_FRAG_LDRB_POST_DEC_NONPRIV_IMM_OFFSET_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_LDRB_POST_DEC_NONPRIV_REG_OFFSET, ARM_FRAG_LDR_POST_INC_NONPRIV_REG_OFFSET_HDR, ARM_FRAG_LDRB_POST_DEC_REG_OFFSET_TRLR, ARM_FRAG_LIST_END },
  { ARM_INSN_LDRB_POST_INC_NONPRIV_IMM_OFFSET, ARM_FRAG_LDRB_POST_INC_NONPRIV_IMM_OFFSET_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_LDRB_POST_INC_NONPRIV_REG_OFFSET, ARM_FRAG_LDR_POST_INC_NONPRIV_REG_OFFSET_HDR, ARM_FRAG_LDRB_POST_INC_REG_OFFSET_TRLR, ARM_FRAG_LIST_END },
  { ARM_INSN_LDRB_PRE_DEC_IMM_OFFSET, ARM_FRAG_LDRB_PRE_DEC_IMM_OFFSET_MID, ARM_FRAG_LDR_PRE_INC_IMM_OFFSET_TRLR, ARM_FRAG_LIST_END },
  { ARM_INSN_LDRB_PRE_DEC_REG_OFFSET, ARM_FRAG_LDR_PRE_DEC_WB_REG_OFFSET_HDR, ARM_FRAG_LDRB_PRE_DEC_REG_OFFSET_MID, ARM_FRAG_LDRB_PRE_DEC_REG_OFFSET_TRLR, ARM_FRAG_LIST_END },
  { ARM_INSN_LDRB_PRE_INC_IMM_OFFSET, ARM_FRAG_LDRB_PRE_INC_IMM_OFFSET_MID, ARM_FRAG_LDR_PRE_INC_IMM_OFFSET_TRLR, ARM_FRAG_LIST_END },
  { ARM_INSN_LDRB_PRE_INC_REG_OFFSET, ARM_FRAG_LDR_PRE_DEC_WB_REG_OFFSET_HDR, ARM_FRAG_LDRB_PRE_INC_REG_OFFSET_MID, ARM_FRAG_LDRB_PRE_DEC_REG_OFFSET_TRLR, ARM_FRAG_LIST_END },
  { ARM_INSN_LDRB_PRE_DEC_WB_IMM_OFFSET, ARM_FRAG_LDRB_PRE_DEC_WB_IMM_OFFSET_MID, ARM_FRAG_LDR_PRE_INC_WB_IMM_OFFSET_TRLR, ARM_FRAG_LIST_END },
  { ARM_INSN_LDRB_PRE_DEC_WB_REG_OFFSET, ARM_FRAG_LDR_PRE_DEC_WB_REG_OFFSET_HDR, ARM_FRAG_LDRB_PRE_DEC_WB_REG_OFFSET_MID, ARM_FRAG_LDRB_PRE_DEC_WB_REG_OFFSET_TRLR, ARM_FRAG_LIST_END },
  { ARM_INSN_LDRB_PRE_INC_WB_IMM_OFFSET, ARM_FRAG_LDRB_PRE_INC_WB_IMM_OFFSET_MID, ARM_FRAG_LDR_PRE_INC_WB_IMM_OFFSET_TRLR, ARM_FRAG_LIST_END },
  { ARM_INSN_LDRB_PRE_INC_WB_REG_OFFSET, ARM_FRAG_LDR_PRE_DEC_WB_REG_OFFSET_HDR, ARM_FRAG_LDRB_PRE_INC_WB_REG_OFFSET_MID, ARM_FRAG_LDRB_PRE_DEC_WB_REG_OFFSET_TRLR, ARM_FRAG_LIST_END },
  { ARM_INSN_STR_POST_DEC_IMM_OFFSET, ARM_FRAG_STR_POST_DEC_IMM_OFFSET_MID, ARM_FRAG_STR_POST_DEC_IMM_OFFSET_TRLR, ARM_FRAG_LIST_END },
  { ARM_INSN_STR_POST_DEC_REG_OFFSET, ARM_FRAG_STR_POST_DEC_REG_OFFSET_HDR, ARM_FRAG_STR_POST_DEC_REG_OFFSET_TRLR, ARM_FRAG_LIST_END },
  { ARM_INSN_STR_POST_INC_IMM_OFFSET, ARM_FRAG_STR_POST_INC_IMM_OFFSET_MID, ARM_FRAG_STR_POST_INC_IMM_OFFSET_TRLR, ARM_FRAG_LIST_END },
  { ARM_INSN_STR_POST_INC_REG_OFFSET, ARM_FRAG_STR_POST_DEC_REG_OFFSET_HDR, ARM_FRAG_STR_POST_INC_REG_OFFSET_TRLR, ARM_FRAG_LIST_END },
  { ARM_INSN_STR_POST_DEC_NONPRIV_IMM_OFFSET, ARM_FRAG_STR_POST_DEC_NONPRIV_IMM_OFFSET_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_STR_POST_DEC_NONPRIV_REG_OFFSET, ARM_FRAG_STR_POST_DEC_REG_OFFSET_HDR, ARM_FRAG_STR_POST_DEC_REG_OFFSET_TRLR, ARM_FRAG_LIST_END },
  { ARM_INSN_STR_POST_INC_NONPRIV_IMM_OFFSET, ARM_FRAG_STR_POST_INC_NONPRIV_IMM_OFFSET_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_STR_POST_INC_NONPRIV_REG_OFFSET, ARM_FRAG_STR_POST_DEC_REG_OFFSET_HDR, ARM_FRAG_STR_POST_INC_REG_OFFSET_TRLR, ARM_FRAG_LIST_END },
  { ARM_INSN_STR_PRE_DEC_IMM_OFFSET, ARM_FRAG_STR_PRE_DEC_IMM_OFFSET_MID, ARM_FRAG_STR_PRE_DEC_IMM_OFFSET_TRLR, ARM_FRAG_LIST_END },
  { ARM_INSN_STR_PRE_DEC_REG_OFFSET, ARM_FRAG_STRB_POST_INC_NONPRIV_REG_OFFSET_HDR, ARM_FRAG_STR_PRE_DEC_REG_OFFSET_MID, ARM_FRAG_STR_PRE_DEC_REG_OFFSET_TRLR, ARM_FRAG_LIST_END },
  { ARM_INSN_STR_PRE_INC_IMM_OFFSET, ARM_FRAG_STR_PRE_INC_IMM_OFFSET_MID, ARM_FRAG_STR_PRE_DEC_IMM_OFFSET_TRLR, ARM_FRAG_LIST_END },
  { ARM_INSN_STR_PRE_INC_REG_OFFSET, ARM_FRAG_STRB_POST_INC_NONPRIV_REG_OFFSET_HDR, ARM_FRAG_STR_PRE_INC_REG_OFFSET_MID, ARM_FRAG_STR_PRE_DEC_REG_OFFSET_TRLR, ARM_FRAG_LIST_END },
  { ARM_INSN_STR_PRE_DEC_WB_IMM_OFFSET, ARM_FRAG_STR_PRE_DEC_WB_IMM_OFFSET_MID, ARM_FRAG_STR_PRE_DEC_WB_IMM_OFFSET_TRLR, ARM_FRAG_LIST_END },
  { ARM_INSN_STR_PRE_DEC_WB_REG_OFFSET, ARM_FRAG_STRB_POST_INC_NONPRIV_REG_OFFSET_HDR, ARM_FRAG_STR_PRE_DEC_WB_REG_OFFSET_MID, ARM_FRAG_STR_PRE_DEC_WB_REG_OFFSET_TRLR, ARM_FRAG_LIST_END },
  { ARM_INSN_STR_PRE_INC_WB_IMM_OFFSET, ARM_FRAG_STR_PRE_INC_WB_IMM_OFFSET_MID, ARM_FRAG_STR_PRE_DEC_WB_IMM_OFFSET_TRLR, ARM_FRAG_LIST_END },
  { ARM_INSN_STR_PRE_INC_WB_REG_OFFSET, ARM_FRAG_STRB_POST_INC_NONPRIV_REG_OFFSET_HDR, ARM_FRAG_STR_PRE_INC_WB_REG_OFFSET_MID, ARM_FRAG_STR_PRE_DEC_WB_REG_OFFSET_TRLR, ARM_FRAG_LIST_END },
  { ARM_INSN_STRB_POST_DEC_IMM_OFFSET, ARM_FRAG_STRB_POST_DEC_IMM_OFFSET_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_STRB_POST_DEC_REG_OFFSET, ARM_FRAG_STR_POST_DEC_REG_OFFSET_HDR, ARM_FRAG_STRB_POST_DEC_REG_OFFSET_TRLR, ARM_FRAG_LIST_END },
  { ARM_INSN_STRB_POST_INC_IMM_OFFSET, ARM_FRAG_STRB_POST_DEC_NONPRIV_IMM_OFFSET_HDR, ARM_FRAG_STRB_POST_INC_IMM_OFFSET_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_STRB_POST_INC_REG_OFFSET, ARM_FRAG_STR_POST_DEC_REG_OFFSET_HDR, ARM_FRAG_STRB_POST_INC_REG_OFFSET_TRLR, ARM_FRAG_LIST_END },
  { ARM_INSN_STRB_POST_DEC_NONPRIV_IMM_OFFSET, ARM_FRAG_STRB_POST_DEC_NONPRIV_IMM_OFFSET_HDR, ARM_FRAG_STRB_POST_DEC_NONPRIV_IMM_OFFSET_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_STRB_POST_DEC_NONPRIV_REG_OFFSET, ARM_FRAG_STR_POST_DEC_REG_OFFSET_HDR, ARM_FRAG_STRB_POST_DEC_REG_OFFSET_TRLR, ARM_FRAG_LIST_END },
  { ARM_INSN_STRB_POST_INC_NONPRIV_IMM_OFFSET, ARM_FRAG_STRB_POST_INC_NONPRIV_IMM_OFFSET_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_STRB_POST_INC_NONPRIV_REG_OFFSET, ARM_FRAG_STRB_POST_INC_NONPRIV_REG_OFFSET_HDR, ARM_FRAG_STRB_POST_INC_NONPRIV_REG_OFFSET_MID, ARM_FRAG_STRB_POST_INC_REG_OFFSET_TRLR, ARM_FRAG_LIST_END },
  { ARM_INSN_STRB_PRE_DEC_IMM_OFFSET, ARM_FRAG_STRB_PRE_DEC_IMM_OFFSET_MID, ARM_FRAG_STR_PRE_DEC_IMM_OFFSET_TRLR, ARM_FRAG_LIST_END },
  { ARM_INSN_STRB_PRE_DEC_REG_OFFSET, ARM_FRAG_STRB_POST_INC_NONPRIV_REG_OFFSET_HDR, ARM_FRAG_STRB_PRE_DEC_REG_OFFSET_MID, ARM_FRAG_STR_PRE_DEC_REG_OFFSET_TRLR, ARM_FRAG_LIST_END },
  { ARM_INSN_STRB_PRE_INC_IMM_OFFSET, ARM_FRAG_STRB_PRE_INC_IMM_OFFSET_MID, ARM_FRAG_STR_PRE_DEC_IMM_OFFSET_TRLR, ARM_FRAG_LIST_END },
  { ARM_INSN_STRB_PRE_INC_REG_OFFSET, ARM_FRAG_STRB_PRE_INC_REG_OFFSET_MID, ARM_FRAG_STR_PRE_DEC_REG_OFFSET_TRLR, ARM_FRAG_LIST_END },
  { ARM_INSN_STRB_PRE_DEC_WB_IMM_OFFSET, ARM_FRAG_STRB_PRE_DEC_WB_IMM_OFFSET_MID, ARM_FRAG_STR_PRE_DEC_WB_IMM_OFFSET_TRLR, ARM_FRAG_LIST_END },
  { ARM_INSN_STRB_PRE_DEC_WB_REG_OFFSET, ARM_FRAG_STRB_POST_INC_NONPRIV_REG_OFFSET_HDR, ARM_FRAG_STRB_PRE_DEC_WB_REG_OFFSET_MID, ARM_FRAG_STR_PRE_DEC_WB_REG_OFFSET_TRLR, ARM_FRAG_LIST_END },
  { ARM_INSN_STRB_PRE_INC_WB_IMM_OFFSET, ARM_FRAG_STRB_PRE_INC_WB_IMM_OFFSET_MID, ARM_FRAG_STR_PRE_DEC_WB_IMM_OFFSET_TRLR, ARM_FRAG_LIST_END },
  { ARM_INSN_STRB_PRE_INC_WB_REG_OFFSET, ARM_FRAG_STRB_POST_INC_NONPRIV_REG_OFFSET_HDR, ARM_FRAG_STRB_PRE_INC_WB_REG_OFFSET_MID, ARM_FRAG_STR_PRE_DEC_WB_REG_OFFSET_TRLR, ARM_FRAG_LIST_END },
  { ARM_INSN_STRH_PRE_DEC_IMM_OFFSET, ARM_FRAG_STRH_PRE_DEC_IMM_OFFSET_MID, ARM_FRAG_STRH_PRE_DEC_IMM_OFFSET_TRLR, ARM_FRAG_LIST_END },
  { ARM_INSN_STRH_PRE_DEC_REG_OFFSET, ARM_FRAG_STRH_PRE_DEC_REG_OFFSET_MID, ARM_FRAG_STR_PRE_DEC_REG_OFFSET_TRLR, ARM_FRAG_LIST_END },
  { ARM_INSN_STRH_PRE_INC_IMM_OFFSET, ARM_FRAG_STRH_PRE_INC_IMM_OFFSET_MID, ARM_FRAG_STRH_PRE_DEC_IMM_OFFSET_TRLR, ARM_FRAG_LIST_END },
  { ARM_INSN_STRH_PRE_INC_REG_OFFSET, ARM_FRAG_STRH_PRE_INC_REG_OFFSET_MID, ARM_FRAG_STR_PRE_DEC_REG_OFFSET_TRLR, ARM_FRAG_LIST_END },
  { ARM_INSN_STRH_PRE_DEC_WB_IMM_OFFSET, ARM_FRAG_STRH_PRE_DEC_WB_IMM_OFFSET_MID, ARM_FRAG_STRH_PRE_DEC_WB_IMM_OFFSET_TRLR, ARM_FRAG_LIST_END },
  { ARM_INSN_STRH_PRE_DEC_WB_REG_OFFSET, ARM_FRAG_STRH_PRE_DEC_WB_REG_OFFSET_MID, ARM_FRAG_STR_PRE_DEC_WB_REG_OFFSET_TRLR, ARM_FRAG_LIST_END },
  { ARM_INSN_STRH_PRE_INC_WB_IMM_OFFSET, ARM_FRAG_STRH_PRE_INC_WB_IMM_OFFSET_MID, ARM_FRAG_STRH_PRE_DEC_WB_IMM_OFFSET_TRLR, ARM_FRAG_LIST_END },
  { ARM_INSN_STRH_PRE_INC_WB_REG_OFFSET, ARM_FRAG_STRH_PRE_INC_WB_REG_OFFSET_MID, ARM_FRAG_STR_PRE_DEC_WB_REG_OFFSET_TRLR, ARM_FRAG_LIST_END },
  { ARM_INSN_STRH_POST_DEC_IMM_OFFSET, ARM_FRAG_STRH_POST_DEC_IMM_OFFSET_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_STRH_POST_DEC_REG_OFFSET, ARM_FRAG_STRH_POST_DEC_REG_OFFSET_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_STRH_POST_INC_IMM_OFFSET, ARM_FRAG_STRH_POST_INC_IMM_OFFSET_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_STRH_POST_INC_REG_OFFSET, ARM_FRAG_STRH_POST_INC_REG_OFFSET_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_LDRSB_PRE_DEC_IMM_OFFSET, ARM_FRAG_LDRSB_PRE_DEC_IMM_OFFSET_MID, ARM_FRAG_LDRSB_PRE_DEC_IMM_OFFSET_TRLR, ARM_FRAG_LIST_END },
  { ARM_INSN_LDRSB_PRE_DEC_REG_OFFSET, ARM_FRAG_LDRSB_PRE_DEC_REG_OFFSET_MID, ARM_FRAG_LDRB_PRE_DEC_REG_OFFSET_TRLR, ARM_FRAG_LIST_END },
  { ARM_INSN_LDRSB_PRE_INC_IMM_OFFSET, ARM_FRAG_LDRSB_PRE_INC_IMM_OFFSET_MID, ARM_FRAG_LDRSB_PRE_DEC_IMM_OFFSET_TRLR, ARM_FRAG_LIST_END },
  { ARM_INSN_LDRSB_PRE_INC_REG_OFFSET, ARM_FRAG_LDRSB_PRE_INC_REG_OFFSET_MID, ARM_FRAG_LDRB_PRE_DEC_REG_OFFSET_TRLR, ARM_FRAG_LIST_END },
  { ARM_INSN_LDRSB_PRE_DEC_WB_IMM_OFFSET, ARM_FRAG_LDRSB_PRE_DEC_WB_IMM_OFFSET_MID, ARM_FRAG_LDRSB_PRE_DEC_WB_IMM_OFFSET_TRLR, ARM_FRAG_LIST_END },
  { ARM_INSN_LDRSB_PRE_DEC_WB_REG_OFFSET, ARM_FRAG_LDRSB_PRE_DEC_WB_REG_OFFSET_MID, ARM_FRAG_LDRB_PRE_DEC_WB_REG_OFFSET_TRLR, ARM_FRAG_LIST_END },
  { ARM_INSN_LDRSB_PRE_INC_WB_IMM_OFFSET, ARM_FRAG_LDRSB_PRE_INC_WB_IMM_OFFSET_MID, ARM_FRAG_LDRSB_PRE_DEC_WB_IMM_OFFSET_TRLR, ARM_FRAG_LIST_END },
  { ARM_INSN_LDRSB_PRE_INC_WB_REG_OFFSET, ARM_FRAG_LDRSB_PRE_INC_WB_REG_OFFSET_MID, ARM_FRAG_LDRB_PRE_DEC_WB_REG_OFFSET_TRLR, ARM_FRAG_LIST_END },
  { ARM_INSN_LDRSB_POST_DEC_IMM_OFFSET, ARM_FRAG_LDRSB_POST_DEC_IMM_OFFSET_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_LDRSB_POST_DEC_REG_OFFSET, ARM_FRAG_LDRSB_POST_DEC_REG_OFFSET_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_LDRSB_POST_INC_IMM_OFFSET, ARM_FRAG_LDRSB_POST_INC_IMM_OFFSET_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_LDRSB_POST_INC_REG_OFFSET, ARM_FRAG_LDRSB_POST_INC_REG_OFFSET_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_LDRH_PRE_DEC_IMM_OFFSET, ARM_FRAG_LDRH_PRE_DEC_IMM_OFFSET_MID, ARM_FRAG_LDRSB_PRE_DEC_IMM_OFFSET_TRLR, ARM_FRAG_LIST_END },
  { ARM_INSN_LDRH_PRE_DEC_REG_OFFSET, ARM_FRAG_LDRH_PRE_DEC_REG_OFFSET_MID, ARM_FRAG_LDRB_PRE_DEC_REG_OFFSET_TRLR, ARM_FRAG_LIST_END },
  { ARM_INSN_LDRH_PRE_INC_IMM_OFFSET, ARM_FRAG_LDRH_PRE_INC_IMM_OFFSET_MID, ARM_FRAG_LDRSB_PRE_DEC_IMM_OFFSET_TRLR, ARM_FRAG_LIST_END },
  { ARM_INSN_LDRH_PRE_INC_REG_OFFSET, ARM_FRAG_LDRH_PRE_INC_REG_OFFSET_MID, ARM_FRAG_LDRB_PRE_DEC_REG_OFFSET_TRLR, ARM_FRAG_LIST_END },
  { ARM_INSN_LDRH_PRE_DEC_WB_IMM_OFFSET, ARM_FRAG_LDRH_PRE_DEC_WB_IMM_OFFSET_MID, ARM_FRAG_LDRSB_PRE_DEC_WB_IMM_OFFSET_TRLR, ARM_FRAG_LIST_END },
  { ARM_INSN_LDRH_PRE_DEC_WB_REG_OFFSET, ARM_FRAG_LDRH_PRE_DEC_WB_REG_OFFSET_MID, ARM_FRAG_LDRB_PRE_DEC_WB_REG_OFFSET_TRLR, ARM_FRAG_LIST_END },
  { ARM_INSN_LDRH_PRE_INC_WB_IMM_OFFSET, ARM_FRAG_LDRH_PRE_INC_WB_IMM_OFFSET_MID, ARM_FRAG_LDRSB_PRE_DEC_WB_IMM_OFFSET_TRLR, ARM_FRAG_LIST_END },
  { ARM_INSN_LDRH_PRE_INC_WB_REG_OFFSET, ARM_FRAG_LDRH_PRE_INC_WB_REG_OFFSET_MID, ARM_FRAG_LDRB_PRE_DEC_WB_REG_OFFSET_TRLR, ARM_FRAG_LIST_END },
  { ARM_INSN_LDRH_POST_DEC_IMM_OFFSET, ARM_FRAG_LDRH_POST_DEC_IMM_OFFSET_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_LDRH_POST_DEC_REG_OFFSET, ARM_FRAG_LDRH_POST_DEC_REG_OFFSET_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_LDRH_POST_INC_IMM_OFFSET, ARM_FRAG_LDRH_POST_INC_IMM_OFFSET_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_LDRH_POST_INC_REG_OFFSET, ARM_FRAG_LDRH_POST_INC_REG_OFFSET_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_LDRSH_PRE_DEC_IMM_OFFSET, ARM_FRAG_LDRSH_PRE_DEC_IMM_OFFSET_MID, ARM_FRAG_LDRSB_PRE_DEC_IMM_OFFSET_TRLR, ARM_FRAG_LIST_END },
  { ARM_INSN_LDRSH_PRE_DEC_REG_OFFSET, ARM_FRAG_LDRSH_PRE_DEC_REG_OFFSET_MID, ARM_FRAG_LDRB_PRE_DEC_REG_OFFSET_TRLR, ARM_FRAG_LIST_END },
  { ARM_INSN_LDRSH_PRE_INC_IMM_OFFSET, ARM_FRAG_LDRSH_PRE_INC_IMM_OFFSET_MID, ARM_FRAG_LDRSB_PRE_DEC_IMM_OFFSET_TRLR, ARM_FRAG_LIST_END },
  { ARM_INSN_LDRSH_PRE_INC_REG_OFFSET, ARM_FRAG_LDRSH_PRE_INC_REG_OFFSET_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_LDRSH_PRE_DEC_WB_IMM_OFFSET, ARM_FRAG_LDRSH_PRE_DEC_WB_IMM_OFFSET_MID, ARM_FRAG_LDRSB_PRE_DEC_WB_IMM_OFFSET_TRLR, ARM_FRAG_LIST_END },
  { ARM_INSN_LDRSH_PRE_DEC_WB_REG_OFFSET, ARM_FRAG_LDRSH_PRE_DEC_WB_REG_OFFSET_MID, ARM_FRAG_LDRB_PRE_DEC_WB_REG_OFFSET_TRLR, ARM_FRAG_LIST_END },
  { ARM_INSN_LDRSH_PRE_INC_WB_IMM_OFFSET, ARM_FRAG_LDRSH_PRE_INC_WB_IMM_OFFSET_MID, ARM_FRAG_LDRSB_PRE_DEC_WB_IMM_OFFSET_TRLR, ARM_FRAG_LIST_END },
  { ARM_INSN_LDRSH_PRE_INC_WB_REG_OFFSET, ARM_FRAG_LDRSH_PRE_INC_WB_REG_OFFSET_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_LDRSH_POST_DEC_IMM_OFFSET, ARM_FRAG_LDRSH_POST_DEC_IMM_OFFSET_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_LDRSH_POST_DEC_REG_OFFSET, ARM_FRAG_LDRSH_POST_DEC_REG_OFFSET_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_LDRSH_POST_INC_IMM_OFFSET, ARM_FRAG_LDRSH_POST_INC_IMM_OFFSET_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_LDRSH_POST_INC_REG_OFFSET, ARM_FRAG_LDRSH_POST_INC_REG_OFFSET_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_MUL, ARM_FRAG_MUL_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_MLA, ARM_FRAG_MLA_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_UMULL, ARM_FRAG_UMULL_MID, ARM_FRAG_UMULL_TRLR, ARM_FRAG_LIST_END },
  { ARM_INSN_UMLAL, ARM_FRAG_UMLAL_MID, ARM_FRAG_UMULL_TRLR, ARM_FRAG_LIST_END },
  { ARM_INSN_SMULL, ARM_FRAG_SMULL_MID, ARM_FRAG_UMULL_TRLR, ARM_FRAG_LIST_END },
  { ARM_INSN_SMLAL, ARM_FRAG_SMLAL_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_SWP, ARM_FRAG_SWP_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_SWPB, ARM_FRAG_SWPB_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_SWI, ARM_FRAG_SWI_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_AND_REG_IMM_SHIFT, ARM_FRAG_AND_REG_IMM_SHIFT_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_AND_REG_REG_SHIFT, ARM_FRAG_AND_REG_REG_SHIFT_MID, ARM_FRAG_AND_REG_REG_SHIFT_TRLR, ARM_FRAG_LIST_END },
  { ARM_INSN_AND_IMM, ARM_FRAG_AND_IMM_MID, ARM_FRAG_AND_IMM_TRLR, ARM_FRAG_LIST_END },
  { ARM_INSN_ORR_REG_IMM_SHIFT, ARM_FRAG_ORR_REG_IMM_SHIFT_HDR, ARM_FRAG_ORR_REG_IMM_SHIFT_MID, ARM_FRAG_ORR_REG_IMM_SHIFT_TRLR, ARM_FRAG_LIST_END },
  { ARM_INSN_ORR_REG_REG_SHIFT, ARM_FRAG_ORR_REG_REG_SHIFT_HDR, ARM_FRAG_ORR_REG_REG_SHIFT_MID, ARM_FRAG_AND_REG_REG_SHIFT_TRLR, ARM_FRAG_LIST_END },
  { ARM_INSN_ORR_IMM, ARM_FRAG_ORR_IMM_MID, ARM_FRAG_AND_IMM_TRLR, ARM_FRAG_LIST_END },
  { ARM_INSN_EOR_REG_IMM_SHIFT, ARM_FRAG_ORR_REG_IMM_SHIFT_HDR, ARM_FRAG_EOR_REG_IMM_SHIFT_MID, ARM_FRAG_ORR_REG_IMM_SHIFT_TRLR, ARM_FRAG_LIST_END },
  { ARM_INSN_EOR_REG_REG_SHIFT, ARM_FRAG_ORR_REG_REG_SHIFT_HDR, ARM_FRAG_EOR_REG_REG_SHIFT_MID, ARM_FRAG_AND_REG_REG_SHIFT_TRLR, ARM_FRAG_LIST_END },
  { ARM_INSN_EOR_IMM, ARM_FRAG_EOR_IMM_MID, ARM_FRAG_AND_IMM_TRLR, ARM_FRAG_LIST_END },
  { ARM_INSN_MOV_REG_IMM_SHIFT, ARM_FRAG_ORR_REG_IMM_SHIFT_HDR, ARM_FRAG_MOV_REG_IMM_SHIFT_MID, ARM_FRAG_ORR_REG_IMM_SHIFT_TRLR, ARM_FRAG_LIST_END },
  { ARM_INSN_MOV_REG_REG_SHIFT, ARM_FRAG_ORR_REG_REG_SHIFT_HDR, ARM_FRAG_MOV_REG_REG_SHIFT_MID, ARM_FRAG_AND_REG_REG_SHIFT_TRLR, ARM_FRAG_LIST_END },
  { ARM_INSN_MOV_IMM, ARM_FRAG_MOV_IMM_MID, ARM_FRAG_AND_IMM_TRLR, ARM_FRAG_LIST_END },
  { ARM_INSN_BIC_REG_IMM_SHIFT, ARM_FRAG_ORR_REG_IMM_SHIFT_HDR, ARM_FRAG_BIC_REG_IMM_SHIFT_MID, ARM_FRAG_ORR_REG_IMM_SHIFT_TRLR, ARM_FRAG_LIST_END },
  { ARM_INSN_BIC_REG_REG_SHIFT, ARM_FRAG_ORR_REG_REG_SHIFT_HDR, ARM_FRAG_BIC_REG_REG_SHIFT_MID, ARM_FRAG_AND_REG_REG_SHIFT_TRLR, ARM_FRAG_LIST_END },
  { ARM_INSN_BIC_IMM, ARM_FRAG_BIC_IMM_MID, ARM_FRAG_AND_IMM_TRLR, ARM_FRAG_LIST_END },
  { ARM_INSN_MVN_REG_IMM_SHIFT, ARM_FRAG_MVN_REG_IMM_SHIFT_HDR, ARM_FRAG_MVN_REG_IMM_SHIFT_MID, ARM_FRAG_ORR_REG_IMM_SHIFT_TRLR, ARM_FRAG_LIST_END },
  { ARM_INSN_MVN_REG_REG_SHIFT, ARM_FRAG_MVN_REG_REG_SHIFT_HDR, ARM_FRAG_MVN_REG_REG_SHIFT_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_MVN_IMM, ARM_FRAG_MVN_IMM_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_ADD_REG_IMM_SHIFT, ARM_FRAG_MVN_REG_IMM_SHIFT_HDR, ARM_FRAG_ADD_REG_IMM_SHIFT_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_ADD_REG_REG_SHIFT, ARM_FRAG_MVN_REG_REG_SHIFT_HDR, ARM_FRAG_ADD_REG_REG_SHIFT_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_ADD_IMM, ARM_FRAG_ADD_IMM_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_ADC_REG_IMM_SHIFT, ARM_FRAG_MVN_REG_IMM_SHIFT_HDR, ARM_FRAG_ADC_REG_IMM_SHIFT_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_ADC_REG_REG_SHIFT, ARM_FRAG_MVN_REG_REG_SHIFT_HDR, ARM_FRAG_ADC_REG_REG_SHIFT_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_ADC_IMM, ARM_FRAG_ADC_IMM_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_SUB_REG_IMM_SHIFT, ARM_FRAG_MVN_REG_IMM_SHIFT_HDR, ARM_FRAG_SUB_REG_IMM_SHIFT_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_SUB_REG_REG_SHIFT, ARM_FRAG_MVN_REG_REG_SHIFT_HDR, ARM_FRAG_SUB_REG_REG_SHIFT_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_SUB_IMM, ARM_FRAG_SUB_IMM_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_SBC_REG_IMM_SHIFT, ARM_FRAG_MVN_REG_IMM_SHIFT_HDR, ARM_FRAG_SBC_REG_IMM_SHIFT_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_SBC_REG_REG_SHIFT, ARM_FRAG_MVN_REG_REG_SHIFT_HDR, ARM_FRAG_SBC_REG_REG_SHIFT_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_SBC_IMM, ARM_FRAG_SBC_IMM_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_RSB_REG_IMM_SHIFT, ARM_FRAG_MVN_REG_IMM_SHIFT_HDR, ARM_FRAG_RSB_REG_IMM_SHIFT_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_RSB_REG_REG_SHIFT, ARM_FRAG_MVN_REG_REG_SHIFT_HDR, ARM_FRAG_RSB_REG_REG_SHIFT_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_RSB_IMM, ARM_FRAG_RSB_IMM_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_RSC_REG_IMM_SHIFT, ARM_FRAG_MVN_REG_IMM_SHIFT_HDR, ARM_FRAG_RSC_REG_IMM_SHIFT_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_RSC_REG_REG_SHIFT, ARM_FRAG_MVN_REG_REG_SHIFT_HDR, ARM_FRAG_RSC_REG_REG_SHIFT_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_RSC_IMM, ARM_FRAG_RSC_IMM_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_TST_REG_IMM_SHIFT, ARM_FRAG_TST_REG_IMM_SHIFT_HDR, ARM_FRAG_TST_REG_IMM_SHIFT_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_TST_REG_REG_SHIFT, ARM_FRAG_TST_REG_REG_SHIFT_HDR, ARM_FRAG_TST_REG_REG_SHIFT_MID, ARM_FRAG_TST_REG_REG_SHIFT_TRLR, ARM_FRAG_LIST_END },
  { ARM_INSN_TST_IMM, ARM_FRAG_TST_IMM_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_TEQ_REG_IMM_SHIFT, ARM_FRAG_TST_REG_IMM_SHIFT_HDR, ARM_FRAG_TEQ_REG_IMM_SHIFT_MID, ARM_FRAG_TEQ_REG_IMM_SHIFT_TRLR, ARM_FRAG_LIST_END },
  { ARM_INSN_TEQ_REG_REG_SHIFT, ARM_FRAG_TST_REG_REG_SHIFT_HDR, ARM_FRAG_TEQ_REG_REG_SHIFT_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_TEQ_IMM, ARM_FRAG_TEQ_IMM_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_CMP_REG_IMM_SHIFT, ARM_FRAG_CMP_REG_IMM_SHIFT_HDR, ARM_FRAG_CMP_REG_IMM_SHIFT_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_CMP_REG_REG_SHIFT, ARM_FRAG_CMP_REG_REG_SHIFT_HDR, ARM_FRAG_CMP_REG_REG_SHIFT_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_CMP_IMM, ARM_FRAG_CMP_IMM_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_CMN_REG_IMM_SHIFT, ARM_FRAG_CMN_REG_IMM_SHIFT_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_CMN_REG_REG_SHIFT, ARM_FRAG_CMN_REG_REG_SHIFT_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_CMN_IMM, ARM_FRAG_CMN_IMM_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_LDMDA, ARM_FRAG_LDMDA_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_LDMDA_SW, ARM_FRAG_LDMDA_SW_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_LDMDA_WB, ARM_FRAG_LDMDA_WB_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_LDMDA_SW_WB, ARM_FRAG_LDMDA_SW_WB_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_LDMIB, ARM_FRAG_LDMIB_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_LDMIB_SW, ARM_FRAG_LDMIB_WB_HDR, ARM_FRAG_LDMIB_SW_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_LDMIB_WB, ARM_FRAG_LDMIB_WB_HDR, ARM_FRAG_LDMIB_WB_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_LDMIB_SW_WB, ARM_FRAG_LDMIB_SW_WB_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_LDMIA, ARM_FRAG_LDMIA_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_LDMIA_SW, ARM_FRAG_LDMIA_WB_HDR, ARM_FRAG_LDMIA_SW_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_LDMIA_WB, ARM_FRAG_LDMIA_WB_HDR, ARM_FRAG_LDMIA_WB_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_LDMIA_SW_WB, ARM_FRAG_LDMIA_SW_WB_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_LDMDB, ARM_FRAG_LDMDB_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_LDMDB_SW, ARM_FRAG_LDMDB_SW_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_LDMDB_WB, ARM_FRAG_LDMDB_WB_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_LDMDB_SW_WB, ARM_FRAG_LDMDB_SW_WB_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_STMDB, ARM_FRAG_STMDB_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_STMDB_SW, ARM_FRAG_STMDB_WB_HDR, ARM_FRAG_STMDB_SW_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_STMDB_WB, ARM_FRAG_STMDB_WB_HDR, ARM_FRAG_STMDB_WB_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_STMDB_SW_WB, ARM_FRAG_STMDB_SW_WB_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_STMIB, ARM_FRAG_STMIB_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_STMIB_SW, ARM_FRAG_STMIB_WB_HDR, ARM_FRAG_STMIB_SW_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_STMIB_WB, ARM_FRAG_STMIB_WB_HDR, ARM_FRAG_STMIB_WB_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_STMIB_SW_WB, ARM_FRAG_STMIB_SW_WB_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_STMIA, ARM_FRAG_STMIA_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_STMIA_SW, ARM_FRAG_STMIA_WB_HDR, ARM_FRAG_STMIA_SW_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_STMIA_WB, ARM_FRAG_STMIA_WB_HDR, ARM_FRAG_STMIA_WB_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_STMIA_SW_WB, ARM_FRAG_STMIA_SW_WB_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_STMDA, ARM_FRAG_STMDA_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_STMDA_SW, ARM_FRAG_STMDA_WB_HDR, ARM_FRAG_STMDA_SW_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_STMDA_WB, ARM_FRAG_STMDA_WB_HDR, ARM_FRAG_STMDA_WB_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_STMDA_SW_WB, ARM_FRAG_STMDA_SW_WB_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_MRS_C, ARM_FRAG_MRS_C_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_MRS_S, ARM_FRAG_MRS_S_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_MSR_C, ARM_FRAG_MSR_C_MID, ARM_FRAG_LIST_END },
  { ARM_INSN_MSR_S, ARM_FRAG_MSR_S_MID, ARM_FRAG_LIST_END },
};

void
arm7f_cpu::arm_pbb_run ()
{
  arm7f_cpu* current_cpu = this;
  arm_scache* vpc;
  arm_scache* abuf;
#ifdef __GNUC__
  void** fragpc;
#else
  ARM_FRAG_TYPE* fragpc;
#endif

#ifdef __GNUC__
{
  static const arm_pbb_label labels[] =
    {
      { ARM_FRAG_LIST_END, 0 },
      { ARM_FRAG_MVN_REG_REG_SHIFT_HDR, && case_FRAG_MVN_REG_REG_SHIFT_HDR },
      { ARM_FRAG_CMP_REG_REG_SHIFT_HDR, && case_FRAG_CMP_REG_REG_SHIFT_HDR },
      { ARM_FRAG_TST_REG_REG_SHIFT_HDR, && case_FRAG_TST_REG_REG_SHIFT_HDR },
      { ARM_FRAG_ORR_REG_REG_SHIFT_HDR, && case_FRAG_ORR_REG_REG_SHIFT_HDR },
      { ARM_FRAG_MVN_REG_IMM_SHIFT_HDR, && case_FRAG_MVN_REG_IMM_SHIFT_HDR },
      { ARM_FRAG_CMP_REG_IMM_SHIFT_HDR, && case_FRAG_CMP_REG_IMM_SHIFT_HDR },
      { ARM_FRAG_TST_REG_IMM_SHIFT_HDR, && case_FRAG_TST_REG_IMM_SHIFT_HDR },
      { ARM_FRAG_ORR_REG_IMM_SHIFT_HDR, && case_FRAG_ORR_REG_IMM_SHIFT_HDR },
      { ARM_FRAG_STRB_POST_INC_NONPRIV_REG_OFFSET_HDR, && case_FRAG_STRB_POST_INC_NONPRIV_REG_OFFSET_HDR },
      { ARM_FRAG_LDR_PRE_DEC_WB_REG_OFFSET_HDR, && case_FRAG_LDR_PRE_DEC_WB_REG_OFFSET_HDR },
      { ARM_FRAG_LDR_POST_INC_NONPRIV_REG_OFFSET_HDR, && case_FRAG_LDR_POST_INC_NONPRIV_REG_OFFSET_HDR },
      { ARM_FRAG_STR_POST_DEC_REG_OFFSET_HDR, && case_FRAG_STR_POST_DEC_REG_OFFSET_HDR },
      { ARM_FRAG_LDR_POST_DEC_NONPRIV_REG_OFFSET_HDR, && case_FRAG_LDR_POST_DEC_NONPRIV_REG_OFFSET_HDR },
      { ARM_FRAG_STMDA_WB_HDR, && case_FRAG_STMDA_WB_HDR },
      { ARM_FRAG_STMIA_WB_HDR, && case_FRAG_STMIA_WB_HDR },
      { ARM_FRAG_STMIB_WB_HDR, && case_FRAG_STMIB_WB_HDR },
      { ARM_FRAG_STMDB_WB_HDR, && case_FRAG_STMDB_WB_HDR },
      { ARM_FRAG_LDMIA_WB_HDR, && case_FRAG_LDMIA_WB_HDR },
      { ARM_FRAG_LDMIB_WB_HDR, && case_FRAG_LDMIB_WB_HDR },
      { ARM_FRAG_STRB_POST_DEC_NONPRIV_IMM_OFFSET_HDR, && case_FRAG_STRB_POST_DEC_NONPRIV_IMM_OFFSET_HDR },
      { ARM_FRAG_LDRB_POST_DEC_NONPRIV_IMM_OFFSET_HDR, && case_FRAG_LDRB_POST_DEC_NONPRIV_IMM_OFFSET_HDR },
      { ARM_FRAG_LDR_POST_DEC_NONPRIV_IMM_OFFSET_HDR, && case_FRAG_LDR_POST_DEC_NONPRIV_IMM_OFFSET_HDR },
      { ARM_FRAG_X_HEADER, && case_FRAG_X_HEADER },
      { ARM_FRAG_TST_REG_REG_SHIFT_TRLR, && case_FRAG_TST_REG_REG_SHIFT_TRLR },
      { ARM_FRAG_TEQ_REG_IMM_SHIFT_TRLR, && case_FRAG_TEQ_REG_IMM_SHIFT_TRLR },
      { ARM_FRAG_AND_IMM_TRLR, && case_FRAG_AND_IMM_TRLR },
      { ARM_FRAG_AND_REG_REG_SHIFT_TRLR, && case_FRAG_AND_REG_REG_SHIFT_TRLR },
      { ARM_FRAG_ORR_REG_IMM_SHIFT_TRLR, && case_FRAG_ORR_REG_IMM_SHIFT_TRLR },
      { ARM_FRAG_UMULL_TRLR, && case_FRAG_UMULL_TRLR },
      { ARM_FRAG_LDR_PRE_INC_IMM_OFFSET_TRLR, && case_FRAG_LDR_PRE_INC_IMM_OFFSET_TRLR },
      { ARM_FRAG_LDRB_PRE_DEC_REG_OFFSET_TRLR, && case_FRAG_LDRB_PRE_DEC_REG_OFFSET_TRLR },
      { ARM_FRAG_STR_PRE_DEC_REG_OFFSET_TRLR, && case_FRAG_STR_PRE_DEC_REG_OFFSET_TRLR },
      { ARM_FRAG_STR_PRE_DEC_IMM_OFFSET_TRLR, && case_FRAG_STR_PRE_DEC_IMM_OFFSET_TRLR },
      { ARM_FRAG_STRH_PRE_DEC_IMM_OFFSET_TRLR, && case_FRAG_STRH_PRE_DEC_IMM_OFFSET_TRLR },
      { ARM_FRAG_LDRSB_PRE_DEC_IMM_OFFSET_TRLR, && case_FRAG_LDRSB_PRE_DEC_IMM_OFFSET_TRLR },
      { ARM_FRAG_LDR_PRE_DEC_IMM_OFFSET_TRLR, && case_FRAG_LDR_PRE_DEC_IMM_OFFSET_TRLR },
      { ARM_FRAG_LDR_PRE_INC_REG_OFFSET_TRLR, && case_FRAG_LDR_PRE_INC_REG_OFFSET_TRLR },
      { ARM_FRAG_LDR_PRE_INC_WB_IMM_OFFSET_TRLR, && case_FRAG_LDR_PRE_INC_WB_IMM_OFFSET_TRLR },
      { ARM_FRAG_LDRB_PRE_DEC_WB_REG_OFFSET_TRLR, && case_FRAG_LDRB_PRE_DEC_WB_REG_OFFSET_TRLR },
      { ARM_FRAG_STR_PRE_DEC_WB_REG_OFFSET_TRLR, && case_FRAG_STR_PRE_DEC_WB_REG_OFFSET_TRLR },
      { ARM_FRAG_STR_PRE_DEC_WB_IMM_OFFSET_TRLR, && case_FRAG_STR_PRE_DEC_WB_IMM_OFFSET_TRLR },
      { ARM_FRAG_STRH_PRE_DEC_WB_IMM_OFFSET_TRLR, && case_FRAG_STRH_PRE_DEC_WB_IMM_OFFSET_TRLR },
      { ARM_FRAG_LDRSB_PRE_DEC_WB_IMM_OFFSET_TRLR, && case_FRAG_LDRSB_PRE_DEC_WB_IMM_OFFSET_TRLR },
      { ARM_FRAG_LDR_PRE_DEC_WB_IMM_OFFSET_TRLR, && case_FRAG_LDR_PRE_DEC_WB_IMM_OFFSET_TRLR },
      { ARM_FRAG_LDR_PRE_INC_WB_REG_OFFSET_TRLR, && case_FRAG_LDR_PRE_INC_WB_REG_OFFSET_TRLR },
      { ARM_FRAG_STRB_POST_INC_REG_OFFSET_TRLR, && case_FRAG_STRB_POST_INC_REG_OFFSET_TRLR },
      { ARM_FRAG_STR_POST_INC_REG_OFFSET_TRLR, && case_FRAG_STR_POST_INC_REG_OFFSET_TRLR },
      { ARM_FRAG_STR_POST_INC_IMM_OFFSET_TRLR, && case_FRAG_STR_POST_INC_IMM_OFFSET_TRLR },
      { ARM_FRAG_LDRB_POST_INC_REG_OFFSET_TRLR, && case_FRAG_LDRB_POST_INC_REG_OFFSET_TRLR },
      { ARM_FRAG_STRB_POST_DEC_REG_OFFSET_TRLR, && case_FRAG_STRB_POST_DEC_REG_OFFSET_TRLR },
      { ARM_FRAG_STR_POST_DEC_REG_OFFSET_TRLR, && case_FRAG_STR_POST_DEC_REG_OFFSET_TRLR },
      { ARM_FRAG_STR_POST_DEC_IMM_OFFSET_TRLR, && case_FRAG_STR_POST_DEC_IMM_OFFSET_TRLR },
      { ARM_FRAG_LDRB_POST_DEC_REG_OFFSET_TRLR, && case_FRAG_LDRB_POST_DEC_REG_OFFSET_TRLR },
      { ARM_FRAG_X_TRAILER, && case_FRAG_X_TRAILER },
      { ARM_FRAG_X_COND_MID, && case_FRAG_X_COND_MID },
      { ARM_FRAG_X_AFTER_MID, && case_FRAG_X_AFTER_MID },
      { ARM_FRAG_X_BEFORE_MID, && case_FRAG_X_BEFORE_MID },
      { ARM_FRAG_X_CTI_CHAIN_MID, && case_FRAG_X_CTI_CHAIN_MID },
      { ARM_FRAG_X_CHAIN_MID, && case_FRAG_X_CHAIN_MID },
      { ARM_FRAG_X_BEGIN_MID, && case_FRAG_X_BEGIN_MID },
      { ARM_FRAG_X_INVALID_MID, && case_FRAG_X_INVALID_MID },
      { ARM_FRAG_B_MID, && case_FRAG_B_MID },
      { ARM_FRAG_BL_MID, && case_FRAG_BL_MID },
      { ARM_FRAG_BX_MID, && case_FRAG_BX_MID },
      { ARM_FRAG_LDR_POST_DEC_IMM_OFFSET_MID, && case_FRAG_LDR_POST_DEC_IMM_OFFSET_MID },
      { ARM_FRAG_LDR_POST_DEC_REG_OFFSET_MID, && case_FRAG_LDR_POST_DEC_REG_OFFSET_MID },
      { ARM_FRAG_LDR_POST_INC_IMM_OFFSET_MID, && case_FRAG_LDR_POST_INC_IMM_OFFSET_MID },
      { ARM_FRAG_LDR_POST_INC_REG_OFFSET_MID, && case_FRAG_LDR_POST_INC_REG_OFFSET_MID },
      { ARM_FRAG_LDR_POST_DEC_NONPRIV_IMM_OFFSET_MID, && case_FRAG_LDR_POST_DEC_NONPRIV_IMM_OFFSET_MID },
      { ARM_FRAG_LDR_POST_DEC_NONPRIV_REG_OFFSET_MID, && case_FRAG_LDR_POST_DEC_NONPRIV_REG_OFFSET_MID },
      { ARM_FRAG_LDR_POST_INC_NONPRIV_IMM_OFFSET_MID, && case_FRAG_LDR_POST_INC_NONPRIV_IMM_OFFSET_MID },
      { ARM_FRAG_LDR_POST_INC_NONPRIV_REG_OFFSET_MID, && case_FRAG_LDR_POST_INC_NONPRIV_REG_OFFSET_MID },
      { ARM_FRAG_LDR_PRE_DEC_IMM_OFFSET_MID, && case_FRAG_LDR_PRE_DEC_IMM_OFFSET_MID },
      { ARM_FRAG_LDR_PRE_DEC_REG_OFFSET_MID, && case_FRAG_LDR_PRE_DEC_REG_OFFSET_MID },
      { ARM_FRAG_LDR_PRE_INC_IMM_OFFSET_MID, && case_FRAG_LDR_PRE_INC_IMM_OFFSET_MID },
      { ARM_FRAG_LDR_PRE_INC_REG_OFFSET_MID, && case_FRAG_LDR_PRE_INC_REG_OFFSET_MID },
      { ARM_FRAG_LDR_PRE_DEC_WB_IMM_OFFSET_MID, && case_FRAG_LDR_PRE_DEC_WB_IMM_OFFSET_MID },
      { ARM_FRAG_LDR_PRE_DEC_WB_REG_OFFSET_MID, && case_FRAG_LDR_PRE_DEC_WB_REG_OFFSET_MID },
      { ARM_FRAG_LDR_PRE_INC_WB_IMM_OFFSET_MID, && case_FRAG_LDR_PRE_INC_WB_IMM_OFFSET_MID },
      { ARM_FRAG_LDR_PRE_INC_WB_REG_OFFSET_MID, && case_FRAG_LDR_PRE_INC_WB_REG_OFFSET_MID },
      { ARM_FRAG_LDRB_POST_DEC_IMM_OFFSET_MID, && case_FRAG_LDRB_POST_DEC_IMM_OFFSET_MID },
      { ARM_FRAG_LDRB_POST_INC_IMM_OFFSET_MID, && case_FRAG_LDRB_POST_INC_IMM_OFFSET_MID },
      { ARM_FRAG_LDRB_POST_DEC_NONPRIV_IMM_OFFSET_MID, && case_FRAG_LDRB_POST_DEC_NONPRIV_IMM_OFFSET_MID },
      { ARM_FRAG_LDRB_POST_INC_NONPRIV_IMM_OFFSET_MID, && case_FRAG_LDRB_POST_INC_NONPRIV_IMM_OFFSET_MID },
      { ARM_FRAG_LDRB_PRE_DEC_IMM_OFFSET_MID, && case_FRAG_LDRB_PRE_DEC_IMM_OFFSET_MID },
      { ARM_FRAG_LDRB_PRE_DEC_REG_OFFSET_MID, && case_FRAG_LDRB_PRE_DEC_REG_OFFSET_MID },
      { ARM_FRAG_LDRB_PRE_INC_IMM_OFFSET_MID, && case_FRAG_LDRB_PRE_INC_IMM_OFFSET_MID },
      { ARM_FRAG_LDRB_PRE_INC_REG_OFFSET_MID, && case_FRAG_LDRB_PRE_INC_REG_OFFSET_MID },
      { ARM_FRAG_LDRB_PRE_DEC_WB_IMM_OFFSET_MID, && case_FRAG_LDRB_PRE_DEC_WB_IMM_OFFSET_MID },
      { ARM_FRAG_LDRB_PRE_DEC_WB_REG_OFFSET_MID, && case_FRAG_LDRB_PRE_DEC_WB_REG_OFFSET_MID },
      { ARM_FRAG_LDRB_PRE_INC_WB_IMM_OFFSET_MID, && case_FRAG_LDRB_PRE_INC_WB_IMM_OFFSET_MID },
      { ARM_FRAG_LDRB_PRE_INC_WB_REG_OFFSET_MID, && case_FRAG_LDRB_PRE_INC_WB_REG_OFFSET_MID },
      { ARM_FRAG_STR_POST_DEC_IMM_OFFSET_MID, && case_FRAG_STR_POST_DEC_IMM_OFFSET_MID },
      { ARM_FRAG_STR_POST_INC_IMM_OFFSET_MID, && case_FRAG_STR_POST_INC_IMM_OFFSET_MID },
      { ARM_FRAG_STR_POST_DEC_NONPRIV_IMM_OFFSET_MID, && case_FRAG_STR_POST_DEC_NONPRIV_IMM_OFFSET_MID },
      { ARM_FRAG_STR_POST_INC_NONPRIV_IMM_OFFSET_MID, && case_FRAG_STR_POST_INC_NONPRIV_IMM_OFFSET_MID },
      { ARM_FRAG_STR_PRE_DEC_IMM_OFFSET_MID, && case_FRAG_STR_PRE_DEC_IMM_OFFSET_MID },
      { ARM_FRAG_STR_PRE_DEC_REG_OFFSET_MID, && case_FRAG_STR_PRE_DEC_REG_OFFSET_MID },
      { ARM_FRAG_STR_PRE_INC_IMM_OFFSET_MID, && case_FRAG_STR_PRE_INC_IMM_OFFSET_MID },
      { ARM_FRAG_STR_PRE_INC_REG_OFFSET_MID, && case_FRAG_STR_PRE_INC_REG_OFFSET_MID },
      { ARM_FRAG_STR_PRE_DEC_WB_IMM_OFFSET_MID, && case_FRAG_STR_PRE_DEC_WB_IMM_OFFSET_MID },
      { ARM_FRAG_STR_PRE_DEC_WB_REG_OFFSET_MID, && case_FRAG_STR_PRE_DEC_WB_REG_OFFSET_MID },
      { ARM_FRAG_STR_PRE_INC_WB_IMM_OFFSET_MID, && case_FRAG_STR_PRE_INC_WB_IMM_OFFSET_MID },
      { ARM_FRAG_STR_PRE_INC_WB_REG_OFFSET_MID, && case_FRAG_STR_PRE_INC_WB_REG_OFFSET_MID },
      { ARM_FRAG_STRB_POST_DEC_IMM_OFFSET_MID, && case_FRAG_STRB_POST_DEC_IMM_OFFSET_MID },
      { ARM_FRAG_STRB_POST_INC_IMM_OFFSET_MID, && case_FRAG_STRB_POST_INC_IMM_OFFSET_MID },
      { ARM_FRAG_STRB_POST_DEC_NONPRIV_IMM_OFFSET_MID, && case_FRAG_STRB_POST_DEC_NONPRIV_IMM_OFFSET_MID },
      { ARM_FRAG_STRB_POST_INC_NONPRIV_IMM_OFFSET_MID, && case_FRAG_STRB_POST_INC_NONPRIV_IMM_OFFSET_MID },
      { ARM_FRAG_STRB_POST_INC_NONPRIV_REG_OFFSET_MID, && case_FRAG_STRB_POST_INC_NONPRIV_REG_OFFSET_MID },
      { ARM_FRAG_STRB_PRE_DEC_IMM_OFFSET_MID, && case_FRAG_STRB_PRE_DEC_IMM_OFFSET_MID },
      { ARM_FRAG_STRB_PRE_DEC_REG_OFFSET_MID, && case_FRAG_STRB_PRE_DEC_REG_OFFSET_MID },
      { ARM_FRAG_STRB_PRE_INC_IMM_OFFSET_MID, && case_FRAG_STRB_PRE_INC_IMM_OFFSET_MID },
      { ARM_FRAG_STRB_PRE_INC_REG_OFFSET_MID, && case_FRAG_STRB_PRE_INC_REG_OFFSET_MID },
      { ARM_FRAG_STRB_PRE_DEC_WB_IMM_OFFSET_MID, && case_FRAG_STRB_PRE_DEC_WB_IMM_OFFSET_MID },
      { ARM_FRAG_STRB_PRE_DEC_WB_REG_OFFSET_MID, && case_FRAG_STRB_PRE_DEC_WB_REG_OFFSET_MID },
      { ARM_FRAG_STRB_PRE_INC_WB_IMM_OFFSET_MID, && case_FRAG_STRB_PRE_INC_WB_IMM_OFFSET_MID },
      { ARM_FRAG_STRB_PRE_INC_WB_REG_OFFSET_MID, && case_FRAG_STRB_PRE_INC_WB_REG_OFFSET_MID },
      { ARM_FRAG_STRH_PRE_DEC_IMM_OFFSET_MID, && case_FRAG_STRH_PRE_DEC_IMM_OFFSET_MID },
      { ARM_FRAG_STRH_PRE_DEC_REG_OFFSET_MID, && case_FRAG_STRH_PRE_DEC_REG_OFFSET_MID },
      { ARM_FRAG_STRH_PRE_INC_IMM_OFFSET_MID, && case_FRAG_STRH_PRE_INC_IMM_OFFSET_MID },
      { ARM_FRAG_STRH_PRE_INC_REG_OFFSET_MID, && case_FRAG_STRH_PRE_INC_REG_OFFSET_MID },
      { ARM_FRAG_STRH_PRE_DEC_WB_IMM_OFFSET_MID, && case_FRAG_STRH_PRE_DEC_WB_IMM_OFFSET_MID },
      { ARM_FRAG_STRH_PRE_DEC_WB_REG_OFFSET_MID, && case_FRAG_STRH_PRE_DEC_WB_REG_OFFSET_MID },
      { ARM_FRAG_STRH_PRE_INC_WB_IMM_OFFSET_MID, && case_FRAG_STRH_PRE_INC_WB_IMM_OFFSET_MID },
      { ARM_FRAG_STRH_PRE_INC_WB_REG_OFFSET_MID, && case_FRAG_STRH_PRE_INC_WB_REG_OFFSET_MID },
      { ARM_FRAG_STRH_POST_DEC_IMM_OFFSET_MID, && case_FRAG_STRH_POST_DEC_IMM_OFFSET_MID },
      { ARM_FRAG_STRH_POST_DEC_REG_OFFSET_MID, && case_FRAG_STRH_POST_DEC_REG_OFFSET_MID },
      { ARM_FRAG_STRH_POST_INC_IMM_OFFSET_MID, && case_FRAG_STRH_POST_INC_IMM_OFFSET_MID },
      { ARM_FRAG_STRH_POST_INC_REG_OFFSET_MID, && case_FRAG_STRH_POST_INC_REG_OFFSET_MID },
      { ARM_FRAG_LDRSB_PRE_DEC_IMM_OFFSET_MID, && case_FRAG_LDRSB_PRE_DEC_IMM_OFFSET_MID },
      { ARM_FRAG_LDRSB_PRE_DEC_REG_OFFSET_MID, && case_FRAG_LDRSB_PRE_DEC_REG_OFFSET_MID },
      { ARM_FRAG_LDRSB_PRE_INC_IMM_OFFSET_MID, && case_FRAG_LDRSB_PRE_INC_IMM_OFFSET_MID },
      { ARM_FRAG_LDRSB_PRE_INC_REG_OFFSET_MID, && case_FRAG_LDRSB_PRE_INC_REG_OFFSET_MID },
      { ARM_FRAG_LDRSB_PRE_DEC_WB_IMM_OFFSET_MID, && case_FRAG_LDRSB_PRE_DEC_WB_IMM_OFFSET_MID },
      { ARM_FRAG_LDRSB_PRE_DEC_WB_REG_OFFSET_MID, && case_FRAG_LDRSB_PRE_DEC_WB_REG_OFFSET_MID },
      { ARM_FRAG_LDRSB_PRE_INC_WB_IMM_OFFSET_MID, && case_FRAG_LDRSB_PRE_INC_WB_IMM_OFFSET_MID },
      { ARM_FRAG_LDRSB_PRE_INC_WB_REG_OFFSET_MID, && case_FRAG_LDRSB_PRE_INC_WB_REG_OFFSET_MID },
      { ARM_FRAG_LDRSB_POST_DEC_IMM_OFFSET_MID, && case_FRAG_LDRSB_POST_DEC_IMM_OFFSET_MID },
      { ARM_FRAG_LDRSB_POST_DEC_REG_OFFSET_MID, && case_FRAG_LDRSB_POST_DEC_REG_OFFSET_MID },
      { ARM_FRAG_LDRSB_POST_INC_IMM_OFFSET_MID, && case_FRAG_LDRSB_POST_INC_IMM_OFFSET_MID },
      { ARM_FRAG_LDRSB_POST_INC_REG_OFFSET_MID, && case_FRAG_LDRSB_POST_INC_REG_OFFSET_MID },
      { ARM_FRAG_LDRH_PRE_DEC_IMM_OFFSET_MID, && case_FRAG_LDRH_PRE_DEC_IMM_OFFSET_MID },
      { ARM_FRAG_LDRH_PRE_DEC_REG_OFFSET_MID, && case_FRAG_LDRH_PRE_DEC_REG_OFFSET_MID },
      { ARM_FRAG_LDRH_PRE_INC_IMM_OFFSET_MID, && case_FRAG_LDRH_PRE_INC_IMM_OFFSET_MID },
      { ARM_FRAG_LDRH_PRE_INC_REG_OFFSET_MID, && case_FRAG_LDRH_PRE_INC_REG_OFFSET_MID },
      { ARM_FRAG_LDRH_PRE_DEC_WB_IMM_OFFSET_MID, && case_FRAG_LDRH_PRE_DEC_WB_IMM_OFFSET_MID },
      { ARM_FRAG_LDRH_PRE_DEC_WB_REG_OFFSET_MID, && case_FRAG_LDRH_PRE_DEC_WB_REG_OFFSET_MID },
      { ARM_FRAG_LDRH_PRE_INC_WB_IMM_OFFSET_MID, && case_FRAG_LDRH_PRE_INC_WB_IMM_OFFSET_MID },
      { ARM_FRAG_LDRH_PRE_INC_WB_REG_OFFSET_MID, && case_FRAG_LDRH_PRE_INC_WB_REG_OFFSET_MID },
      { ARM_FRAG_LDRH_POST_DEC_IMM_OFFSET_MID, && case_FRAG_LDRH_POST_DEC_IMM_OFFSET_MID },
      { ARM_FRAG_LDRH_POST_DEC_REG_OFFSET_MID, && case_FRAG_LDRH_POST_DEC_REG_OFFSET_MID },
      { ARM_FRAG_LDRH_POST_INC_IMM_OFFSET_MID, && case_FRAG_LDRH_POST_INC_IMM_OFFSET_MID },
      { ARM_FRAG_LDRH_POST_INC_REG_OFFSET_MID, && case_FRAG_LDRH_POST_INC_REG_OFFSET_MID },
      { ARM_FRAG_LDRSH_PRE_DEC_IMM_OFFSET_MID, && case_FRAG_LDRSH_PRE_DEC_IMM_OFFSET_MID },
      { ARM_FRAG_LDRSH_PRE_DEC_REG_OFFSET_MID, && case_FRAG_LDRSH_PRE_DEC_REG_OFFSET_MID },
      { ARM_FRAG_LDRSH_PRE_INC_IMM_OFFSET_MID, && case_FRAG_LDRSH_PRE_INC_IMM_OFFSET_MID },
      { ARM_FRAG_LDRSH_PRE_INC_REG_OFFSET_MID, && case_FRAG_LDRSH_PRE_INC_REG_OFFSET_MID },
      { ARM_FRAG_LDRSH_PRE_DEC_WB_IMM_OFFSET_MID, && case_FRAG_LDRSH_PRE_DEC_WB_IMM_OFFSET_MID },
      { ARM_FRAG_LDRSH_PRE_DEC_WB_REG_OFFSET_MID, && case_FRAG_LDRSH_PRE_DEC_WB_REG_OFFSET_MID },
      { ARM_FRAG_LDRSH_PRE_INC_WB_IMM_OFFSET_MID, && case_FRAG_LDRSH_PRE_INC_WB_IMM_OFFSET_MID },
      { ARM_FRAG_LDRSH_PRE_INC_WB_REG_OFFSET_MID, && case_FRAG_LDRSH_PRE_INC_WB_REG_OFFSET_MID },
      { ARM_FRAG_LDRSH_POST_DEC_IMM_OFFSET_MID, && case_FRAG_LDRSH_POST_DEC_IMM_OFFSET_MID },
      { ARM_FRAG_LDRSH_POST_DEC_REG_OFFSET_MID, && case_FRAG_LDRSH_POST_DEC_REG_OFFSET_MID },
      { ARM_FRAG_LDRSH_POST_INC_IMM_OFFSET_MID, && case_FRAG_LDRSH_POST_INC_IMM_OFFSET_MID },
      { ARM_FRAG_LDRSH_POST_INC_REG_OFFSET_MID, && case_FRAG_LDRSH_POST_INC_REG_OFFSET_MID },
      { ARM_FRAG_MUL_MID, && case_FRAG_MUL_MID },
      { ARM_FRAG_MLA_MID, && case_FRAG_MLA_MID },
      { ARM_FRAG_UMULL_MID, && case_FRAG_UMULL_MID },
      { ARM_FRAG_UMLAL_MID, && case_FRAG_UMLAL_MID },
      { ARM_FRAG_SMULL_MID, && case_FRAG_SMULL_MID },
      { ARM_FRAG_SMLAL_MID, && case_FRAG_SMLAL_MID },
      { ARM_FRAG_SWP_MID, && case_FRAG_SWP_MID },
      { ARM_FRAG_SWPB_MID, && case_FRAG_SWPB_MID },
      { ARM_FRAG_SWI_MID, && case_FRAG_SWI_MID },
      { ARM_FRAG_AND_REG_IMM_SHIFT_MID, && case_FRAG_AND_REG_IMM_SHIFT_MID },
      { ARM_FRAG_AND_REG_REG_SHIFT_MID, && case_FRAG_AND_REG_REG_SHIFT_MID },
      { ARM_FRAG_AND_IMM_MID, && case_FRAG_AND_IMM_MID },
      { ARM_FRAG_ORR_REG_IMM_SHIFT_MID, && case_FRAG_ORR_REG_IMM_SHIFT_MID },
      { ARM_FRAG_ORR_REG_REG_SHIFT_MID, && case_FRAG_ORR_REG_REG_SHIFT_MID },
      { ARM_FRAG_ORR_IMM_MID, && case_FRAG_ORR_IMM_MID },
      { ARM_FRAG_EOR_REG_IMM_SHIFT_MID, && case_FRAG_EOR_REG_IMM_SHIFT_MID },
      { ARM_FRAG_EOR_REG_REG_SHIFT_MID, && case_FRAG_EOR_REG_REG_SHIFT_MID },
      { ARM_FRAG_EOR_IMM_MID, && case_FRAG_EOR_IMM_MID },
      { ARM_FRAG_MOV_REG_IMM_SHIFT_MID, && case_FRAG_MOV_REG_IMM_SHIFT_MID },
      { ARM_FRAG_MOV_REG_REG_SHIFT_MID, && case_FRAG_MOV_REG_REG_SHIFT_MID },
      { ARM_FRAG_MOV_IMM_MID, && case_FRAG_MOV_IMM_MID },
      { ARM_FRAG_BIC_REG_IMM_SHIFT_MID, && case_FRAG_BIC_REG_IMM_SHIFT_MID },
      { ARM_FRAG_BIC_REG_REG_SHIFT_MID, && case_FRAG_BIC_REG_REG_SHIFT_MID },
      { ARM_FRAG_BIC_IMM_MID, && case_FRAG_BIC_IMM_MID },
      { ARM_FRAG_MVN_REG_IMM_SHIFT_MID, && case_FRAG_MVN_REG_IMM_SHIFT_MID },
      { ARM_FRAG_MVN_REG_REG_SHIFT_MID, && case_FRAG_MVN_REG_REG_SHIFT_MID },
      { ARM_FRAG_MVN_IMM_MID, && case_FRAG_MVN_IMM_MID },
      { ARM_FRAG_ADD_REG_IMM_SHIFT_MID, && case_FRAG_ADD_REG_IMM_SHIFT_MID },
      { ARM_FRAG_ADD_REG_REG_SHIFT_MID, && case_FRAG_ADD_REG_REG_SHIFT_MID },
      { ARM_FRAG_ADD_IMM_MID, && case_FRAG_ADD_IMM_MID },
      { ARM_FRAG_ADC_REG_IMM_SHIFT_MID, && case_FRAG_ADC_REG_IMM_SHIFT_MID },
      { ARM_FRAG_ADC_REG_REG_SHIFT_MID, && case_FRAG_ADC_REG_REG_SHIFT_MID },
      { ARM_FRAG_ADC_IMM_MID, && case_FRAG_ADC_IMM_MID },
      { ARM_FRAG_SUB_REG_IMM_SHIFT_MID, && case_FRAG_SUB_REG_IMM_SHIFT_MID },
      { ARM_FRAG_SUB_REG_REG_SHIFT_MID, && case_FRAG_SUB_REG_REG_SHIFT_MID },
      { ARM_FRAG_SUB_IMM_MID, && case_FRAG_SUB_IMM_MID },
      { ARM_FRAG_SBC_REG_IMM_SHIFT_MID, && case_FRAG_SBC_REG_IMM_SHIFT_MID },
      { ARM_FRAG_SBC_REG_REG_SHIFT_MID, && case_FRAG_SBC_REG_REG_SHIFT_MID },
      { ARM_FRAG_SBC_IMM_MID, && case_FRAG_SBC_IMM_MID },
      { ARM_FRAG_RSB_REG_IMM_SHIFT_MID, && case_FRAG_RSB_REG_IMM_SHIFT_MID },
      { ARM_FRAG_RSB_REG_REG_SHIFT_MID, && case_FRAG_RSB_REG_REG_SHIFT_MID },
      { ARM_FRAG_RSB_IMM_MID, && case_FRAG_RSB_IMM_MID },
      { ARM_FRAG_RSC_REG_IMM_SHIFT_MID, && case_FRAG_RSC_REG_IMM_SHIFT_MID },
      { ARM_FRAG_RSC_REG_REG_SHIFT_MID, && case_FRAG_RSC_REG_REG_SHIFT_MID },
      { ARM_FRAG_RSC_IMM_MID, && case_FRAG_RSC_IMM_MID },
      { ARM_FRAG_TST_REG_IMM_SHIFT_MID, && case_FRAG_TST_REG_IMM_SHIFT_MID },
      { ARM_FRAG_TST_REG_REG_SHIFT_MID, && case_FRAG_TST_REG_REG_SHIFT_MID },
      { ARM_FRAG_TST_IMM_MID, && case_FRAG_TST_IMM_MID },
      { ARM_FRAG_TEQ_REG_IMM_SHIFT_MID, && case_FRAG_TEQ_REG_IMM_SHIFT_MID },
      { ARM_FRAG_TEQ_REG_REG_SHIFT_MID, && case_FRAG_TEQ_REG_REG_SHIFT_MID },
      { ARM_FRAG_TEQ_IMM_MID, && case_FRAG_TEQ_IMM_MID },
      { ARM_FRAG_CMP_REG_IMM_SHIFT_MID, && case_FRAG_CMP_REG_IMM_SHIFT_MID },
      { ARM_FRAG_CMP_REG_REG_SHIFT_MID, && case_FRAG_CMP_REG_REG_SHIFT_MID },
      { ARM_FRAG_CMP_IMM_MID, && case_FRAG_CMP_IMM_MID },
      { ARM_FRAG_CMN_REG_IMM_SHIFT_MID, && case_FRAG_CMN_REG_IMM_SHIFT_MID },
      { ARM_FRAG_CMN_REG_REG_SHIFT_MID, && case_FRAG_CMN_REG_REG_SHIFT_MID },
      { ARM_FRAG_CMN_IMM_MID, && case_FRAG_CMN_IMM_MID },
      { ARM_FRAG_LDMDA_MID, && case_FRAG_LDMDA_MID },
      { ARM_FRAG_LDMDA_SW_MID, && case_FRAG_LDMDA_SW_MID },
      { ARM_FRAG_LDMDA_WB_MID, && case_FRAG_LDMDA_WB_MID },
      { ARM_FRAG_LDMDA_SW_WB_MID, && case_FRAG_LDMDA_SW_WB_MID },
      { ARM_FRAG_LDMIB_MID, && case_FRAG_LDMIB_MID },
      { ARM_FRAG_LDMIB_SW_MID, && case_FRAG_LDMIB_SW_MID },
      { ARM_FRAG_LDMIB_WB_MID, && case_FRAG_LDMIB_WB_MID },
      { ARM_FRAG_LDMIB_SW_WB_MID, && case_FRAG_LDMIB_SW_WB_MID },
      { ARM_FRAG_LDMIA_MID, && case_FRAG_LDMIA_MID },
      { ARM_FRAG_LDMIA_SW_MID, && case_FRAG_LDMIA_SW_MID },
      { ARM_FRAG_LDMIA_WB_MID, && case_FRAG_LDMIA_WB_MID },
      { ARM_FRAG_LDMIA_SW_WB_MID, && case_FRAG_LDMIA_SW_WB_MID },
      { ARM_FRAG_LDMDB_MID, && case_FRAG_LDMDB_MID },
      { ARM_FRAG_LDMDB_SW_MID, && case_FRAG_LDMDB_SW_MID },
      { ARM_FRAG_LDMDB_WB_MID, && case_FRAG_LDMDB_WB_MID },
      { ARM_FRAG_LDMDB_SW_WB_MID, && case_FRAG_LDMDB_SW_WB_MID },
      { ARM_FRAG_STMDB_MID, && case_FRAG_STMDB_MID },
      { ARM_FRAG_STMDB_SW_MID, && case_FRAG_STMDB_SW_MID },
      { ARM_FRAG_STMDB_WB_MID, && case_FRAG_STMDB_WB_MID },
      { ARM_FRAG_STMDB_SW_WB_MID, && case_FRAG_STMDB_SW_WB_MID },
      { ARM_FRAG_STMIB_MID, && case_FRAG_STMIB_MID },
      { ARM_FRAG_STMIB_SW_MID, && case_FRAG_STMIB_SW_MID },
      { ARM_FRAG_STMIB_WB_MID, && case_FRAG_STMIB_WB_MID },
      { ARM_FRAG_STMIB_SW_WB_MID, && case_FRAG_STMIB_SW_WB_MID },
      { ARM_FRAG_STMIA_MID, && case_FRAG_STMIA_MID },
      { ARM_FRAG_STMIA_SW_MID, && case_FRAG_STMIA_SW_MID },
      { ARM_FRAG_STMIA_WB_MID, && case_FRAG_STMIA_WB_MID },
      { ARM_FRAG_STMIA_SW_WB_MID, && case_FRAG_STMIA_SW_WB_MID },
      { ARM_FRAG_STMDA_MID, && case_FRAG_STMDA_MID },
      { ARM_FRAG_STMDA_SW_MID, && case_FRAG_STMDA_SW_MID },
      { ARM_FRAG_STMDA_WB_MID, && case_FRAG_STMDA_WB_MID },
      { ARM_FRAG_STMDA_SW_WB_MID, && case_FRAG_STMDA_SW_WB_MID },
      { ARM_FRAG_MRS_C_MID, && case_FRAG_MRS_C_MID },
      { ARM_FRAG_MRS_S_MID, && case_FRAG_MRS_S_MID },
      { ARM_FRAG_MSR_C_MID, && case_FRAG_MSR_C_MID },
      { ARM_FRAG_MSR_S_MID, && case_FRAG_MSR_S_MID },
      { ARM_FRAG_MAX, 0 }
    };

  if (! arm_idesc::idesc_table_initialized_p)
    {
      // Several tables are in play here:
      // idesc table: const table of misc things for each insn
      // frag usage table: const set of frags used by each insn
      // frag label table: same as frag usage table, but contains labels
      // selected insn frag table: table of pointers to either the frag usage
      // table (if !gnuc) or frag label table (if gnuc) for the currently
      // selected ISA.  Insns not in the ISA are redirected to the `invalid'
      // insn handler.  FIXME: This one isn't implemented yet.

      // Allocate frag label table and point idesc table entries at it.
      // FIXME: Temporary hack, to be redone.
      static void** frag_label_table;
      int max_insns = ARM_INSN_MSR_S + 1;
      int tabsize = max_insns * 4;
      frag_label_table = new void* [tabsize];
      memset (frag_label_table, 0, sizeof (void*) * tabsize);
      int i;
      void** v;
      for (i = 0, v = frag_label_table; i < max_insns; ++i)
	{
	  arm_idesc::idesc_table[arm_frag_usage[i].itype].cgoto.frags = v;
	  for (int j = 0; arm_frag_usage[i].ftype[j] != ARM_FRAG_LIST_END; ++j)
	    *v++ = labels[arm_frag_usage[i].ftype[j]].label;
	}

      // Initialize the compiler virtual insn.
      // FIXME: Also needed if !gnuc.
      current_cpu->arm_engine.compile_begin_insn (current_cpu);

      arm_idesc::idesc_table_initialized_p = true;
    }
}
#endif

#ifdef __GNUC__
#define CASE(X) case_##X
// Branch to next handler without going around main loop.
#define NEXT_INSN(vpc, fragpc) fragpc = vpc->execute.cgoto.frags; goto * *fragpc
#define NEXT_FRAG(fragpc) ++fragpc; goto * *fragpc
// Break out of threaded interpreter and return to "main loop".
#define BREAK(vpc) goto end_switch
#else
#define CASE(X) case ARM_##X
#define NEXT_INSN(vpc, fragpc) fragpc = vpc->idesc->frags; goto restart
#define NEXT_FRAG(fragpc) ++fragpc; goto restart
#define BREAK(vpc) break
#endif

  // Get next insn to execute.
  vpc = current_cpu->arm_engine.get_next_vpc (current_cpu->h_pc_get ());

  {
    // These two are used to pass data from cti insns to the cti-chain insn.
    PCADDR pbb_br_npc;
    branch_status pbb_br_status;
    // These two are used to build up values of the previous two.
    PCADDR npc;
    branch_status br_status;
    // Top level locals moved here so they're usable by multiple fragments.
    SI temp_op2;
    SI temp_op1;
    BI carry_out;
    SI operand2;
    SI temp;
    SI lo;
    SI hi;
    DI mul_result;
    SI result;
    SI offset;
    SI addr;

restart:
#ifdef __GNUC__
  fragpc = vpc->execute.cgoto.frags;
  goto * *fragpc;
#else
  fragpc = vpc->idesc->frags;
  switch (*fragpc)
#endif

    {

// ********** used by: mvn-reg/reg-shift, add-reg/reg-shift, adc-reg/reg-shift, sub-reg/reg-shift, sbc-reg/reg-shift, rsb-reg/reg-shift, rsc-reg/reg-shift

  CASE (FRAG_MVN_REG_REG_SHIFT_HDR):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_and_reg_reg_shift.f
      PCADDR pc = abuf->addr;
      br_status = BRANCH_UNTAKEN;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  operand2 = current_cpu->compute_operand2_regshift (* FLD (i_rm), FLD (f_operand2_shifttype), * FLD (i_operand2_shiftreg));
}

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used only by: cmp-reg/reg-shift

  CASE (FRAG_CMP_REG_REG_SHIFT_HDR):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_and_reg_reg_shift.f
      PCADDR pc = abuf->addr;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  operand2 = current_cpu->compute_operand2_regshift (* FLD (i_rm), FLD (f_operand2_shifttype), * FLD (i_operand2_shiftreg));
}

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used by: tst-reg/reg-shift, teq-reg/reg-shift

  CASE (FRAG_TST_REG_REG_SHIFT_HDR):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_and_reg_reg_shift.f
      PCADDR pc = abuf->addr;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  operand2 = current_cpu->compute_operand2_regshift (* FLD (i_rm), FLD (f_operand2_shifttype), * FLD (i_operand2_shiftreg));
  carry_out = current_cpu->compute_carry_out_regshift (* FLD (i_rm), FLD (f_operand2_shifttype), * FLD (i_operand2_shiftreg), current_cpu->hardware.h_cbit);
}

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used by: orr-reg/reg-shift, eor-reg/reg-shift, mov-reg/reg-shift, bic-reg/reg-shift

  CASE (FRAG_ORR_REG_REG_SHIFT_HDR):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_and_reg_reg_shift.f
      PCADDR pc = abuf->addr;
      br_status = BRANCH_UNTAKEN;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  operand2 = current_cpu->compute_operand2_regshift (* FLD (i_rm), FLD (f_operand2_shifttype), * FLD (i_operand2_shiftreg));
  carry_out = current_cpu->compute_carry_out_regshift (* FLD (i_rm), FLD (f_operand2_shifttype), * FLD (i_operand2_shiftreg), current_cpu->hardware.h_cbit);
}

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used by: mvn-reg/imm-shift, add-reg/imm-shift, adc-reg/imm-shift, sub-reg/imm-shift, sbc-reg/imm-shift, rsb-reg/imm-shift, rsc-reg/imm-shift

  CASE (FRAG_MVN_REG_IMM_SHIFT_HDR):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
      PCADDR pc = abuf->addr;
      br_status = BRANCH_UNTAKEN;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  operand2 = current_cpu->compute_operand2_immshift (* FLD (i_rm), FLD (f_operand2_shifttype), FLD (f_operand2_shiftimm));
}

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used only by: cmp-reg/imm-shift

  CASE (FRAG_CMP_REG_IMM_SHIFT_HDR):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
      PCADDR pc = abuf->addr;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  operand2 = current_cpu->compute_operand2_immshift (* FLD (i_rm), FLD (f_operand2_shifttype), FLD (f_operand2_shiftimm));
}

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used by: tst-reg/imm-shift, teq-reg/imm-shift

  CASE (FRAG_TST_REG_IMM_SHIFT_HDR):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
      PCADDR pc = abuf->addr;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  operand2 = current_cpu->compute_operand2_immshift (* FLD (i_rm), FLD (f_operand2_shifttype), FLD (f_operand2_shiftimm));
  carry_out = current_cpu->compute_carry_out_immshift (* FLD (i_rm), FLD (f_operand2_shifttype), FLD (f_operand2_shiftimm), current_cpu->hardware.h_cbit);
}

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used by: orr-reg/imm-shift, eor-reg/imm-shift, mov-reg/imm-shift, bic-reg/imm-shift

  CASE (FRAG_ORR_REG_IMM_SHIFT_HDR):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
      PCADDR pc = abuf->addr;
      br_status = BRANCH_UNTAKEN;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  operand2 = current_cpu->compute_operand2_immshift (* FLD (i_rm), FLD (f_operand2_shifttype), FLD (f_operand2_shiftimm));
  carry_out = current_cpu->compute_carry_out_immshift (* FLD (i_rm), FLD (f_operand2_shifttype), FLD (f_operand2_shiftimm), current_cpu->hardware.h_cbit);
}

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used by: strb-post-inc-nonpriv-reg-offset, str-pre-dec-wb-reg-offset, str-pre-dec-reg-offset, strb-pre-dec-wb-reg-offset, strb-pre-dec-reg-offset, str-pre-inc-wb-reg-offset, str-pre-inc-reg-offset, strb-pre-inc-wb-reg-offset

  CASE (FRAG_STRB_POST_INC_NONPRIV_REG_OFFSET_HDR):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
      PCADDR pc = abuf->addr;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  offset = current_cpu->compute_operand2_immshift (* FLD (i_rm), FLD (f_operand2_shifttype), FLD (f_operand2_shiftimm));
}

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used by: ldr-pre-dec-wb-reg-offset, ldr-pre-dec-reg-offset, ldrb-pre-dec-wb-reg-offset, ldrb-pre-dec-reg-offset, ldr-pre-inc-wb-reg-offset, ldr-pre-inc-reg-offset, ldrb-pre-inc-wb-reg-offset, ldrb-pre-inc-reg-offset

  CASE (FRAG_LDR_PRE_DEC_WB_REG_OFFSET_HDR):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
      PCADDR pc = abuf->addr;
      br_status = BRANCH_UNTAKEN;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  offset = current_cpu->compute_operand2_immshift (* FLD (i_rm), FLD (f_operand2_shifttype), FLD (f_operand2_shiftimm));
}

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used by: ldr-post-inc-nonpriv-reg-offset, ldrb-post-dec-reg-offset, ldrb-post-dec-nonpriv-reg-offset, ldrb-post-inc-reg-offset, ldrb-post-inc-nonpriv-reg-offset

  CASE (FRAG_LDR_POST_INC_NONPRIV_REG_OFFSET_HDR):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
      PCADDR pc = abuf->addr;
      br_status = BRANCH_UNTAKEN;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  offset = current_cpu->compute_operand2_immshift (* FLD (i_rm), FLD (f_operand2_shifttype), FLD (f_operand2_shiftimm));
  addr = * FLD (i_rn);
}

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used by: str-post-dec-reg-offset, str-post-dec-nonpriv-reg-offset, str-post-inc-reg-offset, str-post-inc-nonpriv-reg-offset, strb-post-dec-reg-offset, strb-post-dec-nonpriv-reg-offset, strb-post-inc-reg-offset

  CASE (FRAG_STR_POST_DEC_REG_OFFSET_HDR):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
      PCADDR pc = abuf->addr;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  offset = current_cpu->compute_operand2_immshift (* FLD (i_rm), FLD (f_operand2_shifttype), FLD (f_operand2_shiftimm));
  addr = * FLD (i_rn);
}

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used by: ldr-post-dec-nonpriv-reg-offset, ldr-post-inc-reg-offset

  CASE (FRAG_LDR_POST_DEC_NONPRIV_REG_OFFSET_HDR):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
      PCADDR pc = abuf->addr;
      br_status = BRANCH_UNTAKEN;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  offset = current_cpu->compute_operand2_immshift (* FLD (i_rm), FLD (f_operand2_shifttype), FLD (f_operand2_shiftimm));
  addr = * FLD (i_rn);
if (EQSI (FLD (f_rd), 15)) {
npc = current_cpu->GETMEMSI (pc, addr); br_status = BRANCH_UNCACHEABLE;
} else {
* FLD (i_rd) = current_cpu->GETMEMSI (pc, addr);
}
}

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used by: stmda-wb, stmda-sw

  CASE (FRAG_STMDA_WB_HDR):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_ldmda.f
      PCADDR pc = abuf->addr;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  addr = * FLD (i_rn);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
{
current_cpu->SETMEMSI (pc, addr, ADDSI (current_cpu->hardware.h_gr[((UINT) 15)], 4));
  addr = SUBSI (addr, 4);
}
}
}

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used by: stmia-wb, stmia-sw

  CASE (FRAG_STMIA_WB_HDR):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_ldmda.f
      PCADDR pc = abuf->addr;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  addr = * FLD (i_rn);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 0))) {
{
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 0)]);
  addr = ADDSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 1))) {
{
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 1)]);
  addr = ADDSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 2))) {
{
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 2)]);
  addr = ADDSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 3))) {
{
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 3)]);
  addr = ADDSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 4))) {
{
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 4)]);
  addr = ADDSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 5))) {
{
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 5)]);
  addr = ADDSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 6))) {
{
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 6)]);
  addr = ADDSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 7))) {
{
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 7)]);
  addr = ADDSI (addr, 4);
}
}
}

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used by: stmib-wb, stmib-sw

  CASE (FRAG_STMIB_WB_HDR):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_ldmda.f
      PCADDR pc = abuf->addr;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  addr = * FLD (i_rn);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 0))) {
{
  addr = ADDSI (addr, 4);
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 0)]);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 1))) {
{
  addr = ADDSI (addr, 4);
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 1)]);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 2))) {
{
  addr = ADDSI (addr, 4);
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 2)]);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 3))) {
{
  addr = ADDSI (addr, 4);
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 3)]);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 4))) {
{
  addr = ADDSI (addr, 4);
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 4)]);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 5))) {
{
  addr = ADDSI (addr, 4);
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 5)]);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 6))) {
{
  addr = ADDSI (addr, 4);
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 6)]);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 7))) {
{
  addr = ADDSI (addr, 4);
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 7)]);
}
}
}

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used by: stmdb-wb, stmdb-sw

  CASE (FRAG_STMDB_WB_HDR):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_ldmda.f
      PCADDR pc = abuf->addr;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  addr = * FLD (i_rn);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
{
  addr = SUBSI (addr, 4);
current_cpu->SETMEMSI (pc, addr, ADDSI (current_cpu->hardware.h_gr[((UINT) 15)], 4));
}
}
}

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used by: ldmia-wb, ldmia-sw

  CASE (FRAG_LDMIA_WB_HDR):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_ldmda.f
      PCADDR pc = abuf->addr;
      br_status = BRANCH_UNTAKEN;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  addr = * FLD (i_rn);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 0))) {
{
current_cpu->hardware.h_gr[((UINT) 0)] = current_cpu->GETMEMSI (pc, addr);
  addr = ADDSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 1))) {
{
current_cpu->hardware.h_gr[((UINT) 1)] = current_cpu->GETMEMSI (pc, addr);
  addr = ADDSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 2))) {
{
current_cpu->hardware.h_gr[((UINT) 2)] = current_cpu->GETMEMSI (pc, addr);
  addr = ADDSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 3))) {
{
current_cpu->hardware.h_gr[((UINT) 3)] = current_cpu->GETMEMSI (pc, addr);
  addr = ADDSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 4))) {
{
current_cpu->hardware.h_gr[((UINT) 4)] = current_cpu->GETMEMSI (pc, addr);
  addr = ADDSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 5))) {
{
current_cpu->hardware.h_gr[((UINT) 5)] = current_cpu->GETMEMSI (pc, addr);
  addr = ADDSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 6))) {
{
current_cpu->hardware.h_gr[((UINT) 6)] = current_cpu->GETMEMSI (pc, addr);
  addr = ADDSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 7))) {
{
current_cpu->hardware.h_gr[((UINT) 7)] = current_cpu->GETMEMSI (pc, addr);
  addr = ADDSI (addr, 4);
}
}
}

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used by: ldmib-wb, ldmib-sw

  CASE (FRAG_LDMIB_WB_HDR):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_ldmda.f
      PCADDR pc = abuf->addr;
      br_status = BRANCH_UNTAKEN;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  addr = * FLD (i_rn);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 0))) {
{
  addr = ADDSI (addr, 4);
current_cpu->hardware.h_gr[((UINT) 0)] = current_cpu->GETMEMSI (pc, addr);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 1))) {
{
  addr = ADDSI (addr, 4);
current_cpu->hardware.h_gr[((UINT) 1)] = current_cpu->GETMEMSI (pc, addr);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 2))) {
{
  addr = ADDSI (addr, 4);
current_cpu->hardware.h_gr[((UINT) 2)] = current_cpu->GETMEMSI (pc, addr);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 3))) {
{
  addr = ADDSI (addr, 4);
current_cpu->hardware.h_gr[((UINT) 3)] = current_cpu->GETMEMSI (pc, addr);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 4))) {
{
  addr = ADDSI (addr, 4);
current_cpu->hardware.h_gr[((UINT) 4)] = current_cpu->GETMEMSI (pc, addr);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 5))) {
{
  addr = ADDSI (addr, 4);
current_cpu->hardware.h_gr[((UINT) 5)] = current_cpu->GETMEMSI (pc, addr);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 6))) {
{
  addr = ADDSI (addr, 4);
current_cpu->hardware.h_gr[((UINT) 6)] = current_cpu->GETMEMSI (pc, addr);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 7))) {
{
  addr = ADDSI (addr, 4);
current_cpu->hardware.h_gr[((UINT) 7)] = current_cpu->GETMEMSI (pc, addr);
}
}
}

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used by: strb-post-dec-nonpriv-imm-offset, strb-post-inc-imm-offset

  CASE (FRAG_STRB_POST_DEC_NONPRIV_IMM_OFFSET_HDR):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_ldr_post_dec_imm_offset.f
      PCADDR pc = abuf->addr;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  offset = FLD (f_uimm12);
  addr = * FLD (i_rn);
current_cpu->SETMEMQI (pc, addr, TRUNCSIQI (* FLD (i_rd)));
}

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used by: ldrb-post-dec-nonpriv-imm-offset, ldrb-post-inc-imm-offset

  CASE (FRAG_LDRB_POST_DEC_NONPRIV_IMM_OFFSET_HDR):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_ldr_post_dec_imm_offset.f
      PCADDR pc = abuf->addr;
      br_status = BRANCH_UNTAKEN;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  offset = FLD (f_uimm12);
  addr = * FLD (i_rn);
if (EQSI (FLD (f_rd), 15)) {
npc = ZEXTQISI (current_cpu->GETMEMQI (pc, addr)); br_status = BRANCH_UNCACHEABLE;
} else {
* FLD (i_rd) = ZEXTQISI (current_cpu->GETMEMQI (pc, addr));
}
}

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used by: ldr-post-dec-nonpriv-imm-offset, ldr-post-inc-imm-offset

  CASE (FRAG_LDR_POST_DEC_NONPRIV_IMM_OFFSET_HDR):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_ldr_post_dec_imm_offset.f
      PCADDR pc = abuf->addr;
      br_status = BRANCH_UNTAKEN;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  offset = FLD (f_uimm12);
  addr = * FLD (i_rn);
if (EQSI (FLD (f_rd), 15)) {
npc = current_cpu->GETMEMSI (pc, addr); br_status = BRANCH_UNCACHEABLE;
} else {
* FLD (i_rd) = current_cpu->GETMEMSI (pc, addr);
}
}

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used by:

  CASE (FRAG_X_HEADER):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_empty.f
      PCADDR pc = abuf->addr;

((void) 0); /*nop*/

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used only by: tst-reg/reg-shift

  CASE (FRAG_TST_REG_REG_SHIFT_TRLR):
    {
#define FLD(f) abuf->fields.sfmt_and_reg_reg_shift.f
      PCADDR pc = abuf->addr;

{
if (EQSI (FLD (f_rd), 15)) {
current_cpu->h_cpsr_set (current_cpu->h_spsr_get ());
} else {
{
{
current_cpu->hardware.h_zbit = EQSI (result, 0);
current_cpu->hardware.h_nbit = LTSI (result, 0);
}
current_cpu->hardware.h_cbit = carry_out;
}
}
}

#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: teq-reg/imm-shift

  CASE (FRAG_TEQ_REG_IMM_SHIFT_TRLR):
    {
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
      PCADDR pc = abuf->addr;

{
if (EQSI (FLD (f_rd), 15)) {
current_cpu->h_cpsr_set (current_cpu->h_spsr_get ());
} else {
{
{
current_cpu->hardware.h_zbit = EQSI (result, 0);
current_cpu->hardware.h_nbit = LTSI (result, 0);
}
current_cpu->hardware.h_cbit = carry_out;
}
}
}

#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used by: and-imm, orr-imm, eor-imm, mov-imm, bic-imm

  CASE (FRAG_AND_IMM_TRLR):
    {
#define FLD(f) abuf->fields.sfmt_and_imm.f
      PCADDR pc = abuf->addr;

{
if (EQSI (FLD (f_rd), 15)) {
{
npc = result; br_status = BRANCH_UNCACHEABLE;
if (FLD (f_set_cc_)) {
current_cpu->h_cpsr_set (current_cpu->h_spsr_get ());
}
}
} else {
{
* FLD (i_rd) = result;
if (FLD (f_set_cc_)) {
{
current_cpu->hardware.h_zbit = EQSI (result, 0);
current_cpu->hardware.h_nbit = LTSI (result, 0);
}
}
}
}
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used by: and-reg/reg-shift, orr-reg/reg-shift, eor-reg/reg-shift, mov-reg/reg-shift, bic-reg/reg-shift

  CASE (FRAG_AND_REG_REG_SHIFT_TRLR):
    {
#define FLD(f) abuf->fields.sfmt_and_reg_reg_shift.f
      PCADDR pc = abuf->addr;

{
if (EQSI (FLD (f_rd), 15)) {
{
npc = result; br_status = BRANCH_UNCACHEABLE;
if (FLD (f_set_cc_)) {
current_cpu->h_cpsr_set (current_cpu->h_spsr_get ());
}
}
} else {
{
* FLD (i_rd) = result;
if (FLD (f_set_cc_)) {
{
{
current_cpu->hardware.h_zbit = EQSI (result, 0);
current_cpu->hardware.h_nbit = LTSI (result, 0);
}
current_cpu->hardware.h_cbit = carry_out;
}
}
}
}
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used by: orr-reg/imm-shift, eor-reg/imm-shift, mov-reg/imm-shift, bic-reg/imm-shift, mvn-reg/imm-shift

  CASE (FRAG_ORR_REG_IMM_SHIFT_TRLR):
    {
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
      PCADDR pc = abuf->addr;

{
if (EQSI (FLD (f_rd), 15)) {
{
npc = result; br_status = BRANCH_UNCACHEABLE;
if (FLD (f_set_cc_)) {
current_cpu->h_cpsr_set (current_cpu->h_spsr_get ());
}
}
} else {
{
* FLD (i_rd) = result;
if (FLD (f_set_cc_)) {
{
{
current_cpu->hardware.h_zbit = EQSI (result, 0);
current_cpu->hardware.h_nbit = LTSI (result, 0);
}
current_cpu->hardware.h_cbit = carry_out;
}
}
}
}
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used by: umull, umlal, smull

  CASE (FRAG_UMULL_TRLR):
    {
#define FLD(f) abuf->fields.sfmt_umull.f
      PCADDR pc = abuf->addr;

{
* FLD (i_rdhi) = SUBWORDDISI (mul_result, 0);
* FLD (i_rdlo) = SUBWORDDISI (mul_result, 1);
if (FLD (f_set_cc_)) {
{
current_cpu->hardware.h_zbit = EQDI (mul_result, 0);
current_cpu->hardware.h_nbit = LTDI (mul_result, 0);
}
}
}

#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used by: ldr-pre-inc-imm-offset, ldrb-pre-dec-imm-offset, ldrb-pre-inc-imm-offset

  CASE (FRAG_LDR_PRE_INC_IMM_OFFSET_TRLR):
    {
#define FLD(f) abuf->fields.sfmt_ldr_post_dec_imm_offset.f
      PCADDR pc = abuf->addr;

{
((void) 0); /*nop*/
((void) 0); /*nop*/
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used by: ldrb-pre-dec-reg-offset, ldrb-pre-inc-reg-offset, ldrsb-pre-dec-reg-offset, ldrsb-pre-inc-reg-offset, ldrh-pre-dec-reg-offset, ldrh-pre-inc-reg-offset, ldrsh-pre-dec-reg-offset

  CASE (FRAG_LDRB_PRE_DEC_REG_OFFSET_TRLR):
    {
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
      PCADDR pc = abuf->addr;

{
((void) 0); /*nop*/
((void) 0); /*nop*/
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used by: str-pre-dec-reg-offset, str-pre-inc-reg-offset, strb-pre-dec-reg-offset, strb-pre-inc-reg-offset, strh-pre-dec-reg-offset, strh-pre-inc-reg-offset

  CASE (FRAG_STR_PRE_DEC_REG_OFFSET_TRLR):
    {
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
      PCADDR pc = abuf->addr;

{
((void) 0); /*nop*/
((void) 0); /*nop*/
}

#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used by: str-pre-dec-imm-offset, str-pre-inc-imm-offset, strb-pre-dec-imm-offset, strb-pre-inc-imm-offset

  CASE (FRAG_STR_PRE_DEC_IMM_OFFSET_TRLR):
    {
#define FLD(f) abuf->fields.sfmt_ldr_post_dec_imm_offset.f
      PCADDR pc = abuf->addr;

{
((void) 0); /*nop*/
((void) 0); /*nop*/
}

#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used by: strh-pre-dec-imm-offset, strh-pre-inc-imm-offset

  CASE (FRAG_STRH_PRE_DEC_IMM_OFFSET_TRLR):
    {
#define FLD(f) abuf->fields.sfmt_strh_pre_dec_imm_offset.f
      PCADDR pc = abuf->addr;

{
((void) 0); /*nop*/
((void) 0); /*nop*/
}

#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used by: ldrsb-pre-dec-imm-offset, ldrsb-pre-inc-imm-offset, ldrh-pre-dec-imm-offset, ldrh-pre-inc-imm-offset, ldrsh-pre-dec-imm-offset, ldrsh-pre-inc-imm-offset

  CASE (FRAG_LDRSB_PRE_DEC_IMM_OFFSET_TRLR):
    {
#define FLD(f) abuf->fields.sfmt_strh_pre_dec_imm_offset.f
      PCADDR pc = abuf->addr;

{
((void) 0); /*nop*/
((void) 0); /*nop*/
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: ldr-pre-dec-imm-offset

  CASE (FRAG_LDR_PRE_DEC_IMM_OFFSET_TRLR):
    {
#define FLD(f) abuf->fields.sfmt_ldr_post_dec_imm_offset.f
      PCADDR pc = abuf->addr;

{
if (EQSI (FLD (f_rd), 15)) {
npc = current_cpu->GETMEMSI (pc, addr); br_status = BRANCH_UNCACHEABLE;
} else {
* FLD (i_rd) = current_cpu->GETMEMSI (pc, addr);
}
((void) 0); /*nop*/
((void) 0); /*nop*/
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: ldr-pre-inc-reg-offset

  CASE (FRAG_LDR_PRE_INC_REG_OFFSET_TRLR):
    {
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
      PCADDR pc = abuf->addr;

{
if (EQSI (FLD (f_rd), 15)) {
npc = current_cpu->GETMEMSI (pc, addr); br_status = BRANCH_UNCACHEABLE;
} else {
* FLD (i_rd) = current_cpu->GETMEMSI (pc, addr);
}
((void) 0); /*nop*/
((void) 0); /*nop*/
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used by: ldr-pre-inc-wb-imm-offset, ldrb-pre-dec-wb-imm-offset, ldrb-pre-inc-wb-imm-offset

  CASE (FRAG_LDR_PRE_INC_WB_IMM_OFFSET_TRLR):
    {
#define FLD(f) abuf->fields.sfmt_ldr_post_dec_imm_offset.f
      PCADDR pc = abuf->addr;

{
((void) 0); /*nop*/
* FLD (i_rn) = addr;
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used by: ldrb-pre-dec-wb-reg-offset, ldrb-pre-inc-wb-reg-offset, ldrsb-pre-dec-wb-reg-offset, ldrsb-pre-inc-wb-reg-offset, ldrh-pre-dec-wb-reg-offset, ldrh-pre-inc-wb-reg-offset, ldrsh-pre-dec-wb-reg-offset

  CASE (FRAG_LDRB_PRE_DEC_WB_REG_OFFSET_TRLR):
    {
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
      PCADDR pc = abuf->addr;

{
((void) 0); /*nop*/
* FLD (i_rn) = addr;
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used by: str-pre-dec-wb-reg-offset, str-pre-inc-wb-reg-offset, strb-pre-dec-wb-reg-offset, strb-pre-inc-wb-reg-offset, strh-pre-dec-wb-reg-offset, strh-pre-inc-wb-reg-offset

  CASE (FRAG_STR_PRE_DEC_WB_REG_OFFSET_TRLR):
    {
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
      PCADDR pc = abuf->addr;

{
((void) 0); /*nop*/
* FLD (i_rn) = addr;
}

#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used by: str-pre-dec-wb-imm-offset, str-pre-inc-wb-imm-offset, strb-pre-dec-wb-imm-offset, strb-pre-inc-wb-imm-offset

  CASE (FRAG_STR_PRE_DEC_WB_IMM_OFFSET_TRLR):
    {
#define FLD(f) abuf->fields.sfmt_ldr_post_dec_imm_offset.f
      PCADDR pc = abuf->addr;

{
((void) 0); /*nop*/
* FLD (i_rn) = addr;
}

#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used by: strh-pre-dec-wb-imm-offset, strh-pre-inc-wb-imm-offset

  CASE (FRAG_STRH_PRE_DEC_WB_IMM_OFFSET_TRLR):
    {
#define FLD(f) abuf->fields.sfmt_strh_pre_dec_imm_offset.f
      PCADDR pc = abuf->addr;

{
((void) 0); /*nop*/
* FLD (i_rn) = addr;
}

#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used by: ldrsb-pre-dec-wb-imm-offset, ldrsb-pre-inc-wb-imm-offset, ldrh-pre-dec-wb-imm-offset, ldrh-pre-inc-wb-imm-offset, ldrsh-pre-dec-wb-imm-offset, ldrsh-pre-inc-wb-imm-offset

  CASE (FRAG_LDRSB_PRE_DEC_WB_IMM_OFFSET_TRLR):
    {
#define FLD(f) abuf->fields.sfmt_strh_pre_dec_imm_offset.f
      PCADDR pc = abuf->addr;

{
((void) 0); /*nop*/
* FLD (i_rn) = addr;
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: ldr-pre-dec-wb-imm-offset

  CASE (FRAG_LDR_PRE_DEC_WB_IMM_OFFSET_TRLR):
    {
#define FLD(f) abuf->fields.sfmt_ldr_post_dec_imm_offset.f
      PCADDR pc = abuf->addr;

{
if (EQSI (FLD (f_rd), 15)) {
npc = current_cpu->GETMEMSI (pc, addr); br_status = BRANCH_UNCACHEABLE;
} else {
* FLD (i_rd) = current_cpu->GETMEMSI (pc, addr);
}
((void) 0); /*nop*/
* FLD (i_rn) = addr;
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: ldr-pre-inc-wb-reg-offset

  CASE (FRAG_LDR_PRE_INC_WB_REG_OFFSET_TRLR):
    {
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
      PCADDR pc = abuf->addr;

{
if (EQSI (FLD (f_rd), 15)) {
npc = current_cpu->GETMEMSI (pc, addr); br_status = BRANCH_UNCACHEABLE;
} else {
* FLD (i_rd) = current_cpu->GETMEMSI (pc, addr);
}
((void) 0); /*nop*/
* FLD (i_rn) = addr;
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used by: strb-post-inc-reg-offset, strb-post-inc-nonpriv-reg-offset

  CASE (FRAG_STRB_POST_INC_REG_OFFSET_TRLR):
    {
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
      PCADDR pc = abuf->addr;

{
current_cpu->SETMEMQI (pc, addr, TRUNCSIQI (* FLD (i_rd)));
  addr = ADDSI (* FLD (i_rn), offset);
* FLD (i_rn) = addr;
}

#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used by: str-post-inc-reg-offset, str-post-inc-nonpriv-reg-offset

  CASE (FRAG_STR_POST_INC_REG_OFFSET_TRLR):
    {
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
      PCADDR pc = abuf->addr;

{
current_cpu->SETMEMSI (pc, addr, * FLD (i_rd));
  addr = ADDSI (* FLD (i_rn), offset);
* FLD (i_rn) = addr;
}

#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: str-post-inc-imm-offset

  CASE (FRAG_STR_POST_INC_IMM_OFFSET_TRLR):
    {
#define FLD(f) abuf->fields.sfmt_ldr_post_dec_imm_offset.f
      PCADDR pc = abuf->addr;

{
current_cpu->SETMEMSI (pc, addr, * FLD (i_rd));
  addr = ADDSI (* FLD (i_rn), offset);
* FLD (i_rn) = addr;
}

#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used by: ldrb-post-inc-reg-offset, ldrb-post-inc-nonpriv-reg-offset

  CASE (FRAG_LDRB_POST_INC_REG_OFFSET_TRLR):
    {
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
      PCADDR pc = abuf->addr;

{
if (EQSI (FLD (f_rd), 15)) {
npc = ZEXTQISI (current_cpu->GETMEMQI (pc, addr)); br_status = BRANCH_UNCACHEABLE;
} else {
* FLD (i_rd) = ZEXTQISI (current_cpu->GETMEMQI (pc, addr));
}
  addr = ADDSI (* FLD (i_rn), offset);
* FLD (i_rn) = addr;
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used by: strb-post-dec-reg-offset, strb-post-dec-nonpriv-reg-offset

  CASE (FRAG_STRB_POST_DEC_REG_OFFSET_TRLR):
    {
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
      PCADDR pc = abuf->addr;

{
current_cpu->SETMEMQI (pc, addr, TRUNCSIQI (* FLD (i_rd)));
  addr = SUBSI (* FLD (i_rn), offset);
* FLD (i_rn) = addr;
}

#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used by: str-post-dec-reg-offset, str-post-dec-nonpriv-reg-offset

  CASE (FRAG_STR_POST_DEC_REG_OFFSET_TRLR):
    {
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
      PCADDR pc = abuf->addr;

{
current_cpu->SETMEMSI (pc, addr, * FLD (i_rd));
  addr = SUBSI (* FLD (i_rn), offset);
* FLD (i_rn) = addr;
}

#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: str-post-dec-imm-offset

  CASE (FRAG_STR_POST_DEC_IMM_OFFSET_TRLR):
    {
#define FLD(f) abuf->fields.sfmt_ldr_post_dec_imm_offset.f
      PCADDR pc = abuf->addr;

{
current_cpu->SETMEMSI (pc, addr, * FLD (i_rd));
  addr = SUBSI (* FLD (i_rn), offset);
* FLD (i_rn) = addr;
}

#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used by: ldrb-post-dec-reg-offset, ldrb-post-dec-nonpriv-reg-offset

  CASE (FRAG_LDRB_POST_DEC_REG_OFFSET_TRLR):
    {
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
      PCADDR pc = abuf->addr;

{
if (EQSI (FLD (f_rd), 15)) {
npc = ZEXTQISI (current_cpu->GETMEMQI (pc, addr)); br_status = BRANCH_UNCACHEABLE;
} else {
* FLD (i_rd) = ZEXTQISI (current_cpu->GETMEMQI (pc, addr));
}
  addr = SUBSI (* FLD (i_rn), offset);
* FLD (i_rn) = addr;
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used by:

  CASE (FRAG_X_TRAILER):
    {
#define FLD(f) abuf->fields.sfmt_empty.f
      PCADDR pc = abuf->addr;

((void) 0); /*nop*/

#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: x-cond

  CASE (FRAG_X_COND_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_empty.f
      PCADDR pc = abuf->addr;

{
  {
    // Assume branch not taken.
    pbb_br_status = BRANCH_UNTAKEN;
    UINT cond_code = abuf->cond;
    BI exec_p = current_cpu->eval_cond (cond_code, pc);
    if (! exec_p)
      ++vpc;
  }
}

#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: x-after

  CASE (FRAG_X_AFTER_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_empty.f
      PCADDR pc = abuf->addr;

{
  {
    current_cpu->arm_engine.pbb_after (current_cpu, abuf);
  }
}

#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: x-before

  CASE (FRAG_X_BEFORE_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_empty.f
      PCADDR pc = abuf->addr;

{
  {
    current_cpu->arm_engine.pbb_before (current_cpu, abuf);
  }
}

#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: x-cti-chain

  CASE (FRAG_X_CTI_CHAIN_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_empty.f
      PCADDR pc = abuf->addr;

{
  {
    vpc = current_cpu->arm_engine.pbb_cti_chain (current_cpu, abuf, pbb_br_status, pbb_br_npc);
    // If we don't have to give up control, don't.
    // Note that we may overrun step_insn_count since we do the test at the
    // end of the block.  This is defined to be ok.
    if (UNLIKELY(current_cpu->stop_after_insns_p (abuf->fields.chain.insn_count)))
      BREAK (vpc);
  }
}

#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: x-chain

  CASE (FRAG_X_CHAIN_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_empty.f
      PCADDR pc = abuf->addr;

{
  {
    vpc = current_cpu->arm_engine.pbb_chain (current_cpu, abuf);
    // If we don't have to give up control, don't.
    // Note that we may overrun step_insn_count since we do the test at the
    // end of the block.  This is defined to be ok.
    if (UNLIKELY(current_cpu->stop_after_insns_p (abuf->fields.chain.insn_count)))
      BREAK (vpc);
  }
}

#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: x-begin

  CASE (FRAG_X_BEGIN_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_empty.f
      PCADDR pc = abuf->addr;

{
  {
    vpc = current_cpu->arm_pbb_begin (current_cpu->h_pc_get ());
  }
}

#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: x-invalid

  CASE (FRAG_X_INVALID_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_empty.f
      PCADDR pc = abuf->addr;

{
  {
    current_cpu->invalid_insn (pc);
    assert (0);
    /* NOTREACHED */
  }
}

#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: b

  CASE (FRAG_B_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_b.f
      PCADDR pc = abuf->addr;
      br_status = BRANCH_UNTAKEN;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
npc = FLD (i_offset24); br_status = BRANCH_CACHEABLE;
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: bl

  CASE (FRAG_BL_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_b.f
      PCADDR pc = abuf->addr;
      br_status = BRANCH_UNTAKEN;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
current_cpu->hardware.h_gr[((UINT) 14)] = ANDSI (ADDSI (pc, 4), -4);
npc = FLD (i_offset24); br_status = BRANCH_CACHEABLE;
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: bx

  CASE (FRAG_BX_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_bx.f
      PCADDR pc = abuf->addr;
      br_status = BRANCH_UNTAKEN;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
npc = ANDSI (* FLD (i_bx_rn), 0xfffffffe); br_status = BRANCH_UNCACHEABLE;
if (ANDSI (* FLD (i_bx_rn), 1)) {
current_cpu->h_tbit_set (1);
}
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: ldr-post-dec-imm-offset

  CASE (FRAG_LDR_POST_DEC_IMM_OFFSET_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_ldr_post_dec_imm_offset.f
      PCADDR pc = abuf->addr;
      br_status = BRANCH_UNTAKEN;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  offset = FLD (f_uimm12);
  addr = * FLD (i_rn);
if (EQSI (FLD (f_rd), 15)) {
npc = current_cpu->GETMEMSI (pc, addr); br_status = BRANCH_UNCACHEABLE;
} else {
* FLD (i_rd) = current_cpu->GETMEMSI (pc, addr);
}
  addr = SUBSI (* FLD (i_rn), offset);
* FLD (i_rn) = addr;
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: ldr-post-dec-reg-offset

  CASE (FRAG_LDR_POST_DEC_REG_OFFSET_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
      PCADDR pc = abuf->addr;
      br_status = BRANCH_UNTAKEN;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  offset = current_cpu->compute_operand2_immshift (* FLD (i_rm), FLD (f_operand2_shifttype), FLD (f_operand2_shiftimm));
  addr = * FLD (i_rn);
if (EQSI (FLD (f_rd), 15)) {
npc = current_cpu->GETMEMSI (pc, addr); br_status = BRANCH_UNCACHEABLE;
} else {
* FLD (i_rd) = current_cpu->GETMEMSI (pc, addr);
}
  addr = SUBSI (* FLD (i_rn), offset);
* FLD (i_rn) = addr;
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: ldr-post-inc-imm-offset

  CASE (FRAG_LDR_POST_INC_IMM_OFFSET_MID):
    {
#define FLD(f) abuf->fields.sfmt_ldr_post_dec_imm_offset.f
      PCADDR pc = abuf->addr;

{
  addr = ADDSI (* FLD (i_rn), offset);
* FLD (i_rn) = addr;
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: ldr-post-inc-reg-offset

  CASE (FRAG_LDR_POST_INC_REG_OFFSET_MID):
    {
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
      PCADDR pc = abuf->addr;

{
  addr = ADDSI (* FLD (i_rn), offset);
* FLD (i_rn) = addr;
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: ldr-post-dec-nonpriv-imm-offset

  CASE (FRAG_LDR_POST_DEC_NONPRIV_IMM_OFFSET_MID):
    {
#define FLD(f) abuf->fields.sfmt_ldr_post_dec_imm_offset.f
      PCADDR pc = abuf->addr;

{
  addr = SUBSI (* FLD (i_rn), offset);
* FLD (i_rn) = addr;
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: ldr-post-dec-nonpriv-reg-offset

  CASE (FRAG_LDR_POST_DEC_NONPRIV_REG_OFFSET_MID):
    {
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
      PCADDR pc = abuf->addr;

{
  addr = SUBSI (* FLD (i_rn), offset);
* FLD (i_rn) = addr;
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: ldr-post-inc-nonpriv-imm-offset

  CASE (FRAG_LDR_POST_INC_NONPRIV_IMM_OFFSET_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_ldr_post_dec_imm_offset.f
      PCADDR pc = abuf->addr;
      br_status = BRANCH_UNTAKEN;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  offset = FLD (f_uimm12);
  addr = * FLD (i_rn);
if (EQSI (FLD (f_rd), 15)) {
npc = current_cpu->GETMEMSI (pc, addr); br_status = BRANCH_UNCACHEABLE;
} else {
* FLD (i_rd) = current_cpu->GETMEMSI (pc, addr);
}
  addr = ADDSI (* FLD (i_rn), offset);
* FLD (i_rn) = addr;
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: ldr-post-inc-nonpriv-reg-offset

  CASE (FRAG_LDR_POST_INC_NONPRIV_REG_OFFSET_MID):
    {
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
      PCADDR pc = abuf->addr;

{
if (EQSI (FLD (f_rd), 15)) {
npc = current_cpu->GETMEMSI (pc, addr); br_status = BRANCH_UNCACHEABLE;
} else {
* FLD (i_rd) = current_cpu->GETMEMSI (pc, addr);
}
  addr = ADDSI (* FLD (i_rn), offset);
* FLD (i_rn) = addr;
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: ldr-pre-dec-imm-offset

  CASE (FRAG_LDR_PRE_DEC_IMM_OFFSET_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_ldr_post_dec_imm_offset.f
      PCADDR pc = abuf->addr;
      br_status = BRANCH_UNTAKEN;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  offset = FLD (f_uimm12);
  addr = SUBSI (* FLD (i_rn), offset);
}

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used only by: ldr-pre-dec-reg-offset

  CASE (FRAG_LDR_PRE_DEC_REG_OFFSET_MID):
    {
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
      PCADDR pc = abuf->addr;

{
  addr = SUBSI (* FLD (i_rn), offset);
if (EQSI (FLD (f_rd), 15)) {
npc = current_cpu->GETMEMSI (pc, addr); br_status = BRANCH_UNCACHEABLE;
} else {
* FLD (i_rd) = current_cpu->GETMEMSI (pc, addr);
}
((void) 0); /*nop*/
((void) 0); /*nop*/
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: ldr-pre-inc-imm-offset

  CASE (FRAG_LDR_PRE_INC_IMM_OFFSET_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_ldr_post_dec_imm_offset.f
      PCADDR pc = abuf->addr;
      br_status = BRANCH_UNTAKEN;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  offset = FLD (f_uimm12);
  addr = ADDSI (* FLD (i_rn), offset);
if (EQSI (FLD (f_rd), 15)) {
npc = current_cpu->GETMEMSI (pc, addr); br_status = BRANCH_UNCACHEABLE;
} else {
* FLD (i_rd) = current_cpu->GETMEMSI (pc, addr);
}
}

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used only by: ldr-pre-inc-reg-offset

  CASE (FRAG_LDR_PRE_INC_REG_OFFSET_MID):
    {
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
      PCADDR pc = abuf->addr;

{
  addr = ADDSI (* FLD (i_rn), offset);
}

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used only by: ldr-pre-dec-wb-imm-offset

  CASE (FRAG_LDR_PRE_DEC_WB_IMM_OFFSET_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_ldr_post_dec_imm_offset.f
      PCADDR pc = abuf->addr;
      br_status = BRANCH_UNTAKEN;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  offset = FLD (f_uimm12);
  addr = SUBSI (* FLD (i_rn), offset);
}

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used only by: ldr-pre-dec-wb-reg-offset

  CASE (FRAG_LDR_PRE_DEC_WB_REG_OFFSET_MID):
    {
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
      PCADDR pc = abuf->addr;

{
  addr = SUBSI (* FLD (i_rn), offset);
if (EQSI (FLD (f_rd), 15)) {
npc = current_cpu->GETMEMSI (pc, addr); br_status = BRANCH_UNCACHEABLE;
} else {
* FLD (i_rd) = current_cpu->GETMEMSI (pc, addr);
}
((void) 0); /*nop*/
* FLD (i_rn) = addr;
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: ldr-pre-inc-wb-imm-offset

  CASE (FRAG_LDR_PRE_INC_WB_IMM_OFFSET_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_ldr_post_dec_imm_offset.f
      PCADDR pc = abuf->addr;
      br_status = BRANCH_UNTAKEN;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  offset = FLD (f_uimm12);
  addr = ADDSI (* FLD (i_rn), offset);
if (EQSI (FLD (f_rd), 15)) {
npc = current_cpu->GETMEMSI (pc, addr); br_status = BRANCH_UNCACHEABLE;
} else {
* FLD (i_rd) = current_cpu->GETMEMSI (pc, addr);
}
}

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used only by: ldr-pre-inc-wb-reg-offset

  CASE (FRAG_LDR_PRE_INC_WB_REG_OFFSET_MID):
    {
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
      PCADDR pc = abuf->addr;

{
  addr = ADDSI (* FLD (i_rn), offset);
}

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used only by: ldrb-post-dec-imm-offset

  CASE (FRAG_LDRB_POST_DEC_IMM_OFFSET_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_ldr_post_dec_imm_offset.f
      PCADDR pc = abuf->addr;
      br_status = BRANCH_UNTAKEN;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  offset = FLD (f_uimm12);
  addr = * FLD (i_rn);
if (EQSI (FLD (f_rd), 15)) {
npc = ZEXTQISI (current_cpu->GETMEMQI (pc, addr)); br_status = BRANCH_UNCACHEABLE;
} else {
* FLD (i_rd) = ZEXTQISI (current_cpu->GETMEMQI (pc, addr));
}
  addr = SUBSI (* FLD (i_rn), offset);
* FLD (i_rn) = addr;
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: ldrb-post-inc-imm-offset

  CASE (FRAG_LDRB_POST_INC_IMM_OFFSET_MID):
    {
#define FLD(f) abuf->fields.sfmt_ldr_post_dec_imm_offset.f
      PCADDR pc = abuf->addr;

{
  addr = ADDSI (* FLD (i_rn), offset);
* FLD (i_rn) = addr;
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: ldrb-post-dec-nonpriv-imm-offset

  CASE (FRAG_LDRB_POST_DEC_NONPRIV_IMM_OFFSET_MID):
    {
#define FLD(f) abuf->fields.sfmt_ldr_post_dec_imm_offset.f
      PCADDR pc = abuf->addr;

{
  addr = SUBSI (* FLD (i_rn), offset);
* FLD (i_rn) = addr;
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: ldrb-post-inc-nonpriv-imm-offset

  CASE (FRAG_LDRB_POST_INC_NONPRIV_IMM_OFFSET_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_ldr_post_dec_imm_offset.f
      PCADDR pc = abuf->addr;
      br_status = BRANCH_UNTAKEN;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  offset = FLD (f_uimm12);
  addr = * FLD (i_rn);
if (EQSI (FLD (f_rd), 15)) {
npc = ZEXTQISI (current_cpu->GETMEMQI (pc, addr)); br_status = BRANCH_UNCACHEABLE;
} else {
* FLD (i_rd) = ZEXTQISI (current_cpu->GETMEMQI (pc, addr));
}
  addr = ADDSI (* FLD (i_rn), offset);
* FLD (i_rn) = addr;
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: ldrb-pre-dec-imm-offset

  CASE (FRAG_LDRB_PRE_DEC_IMM_OFFSET_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_ldr_post_dec_imm_offset.f
      PCADDR pc = abuf->addr;
      br_status = BRANCH_UNTAKEN;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  offset = FLD (f_uimm12);
  addr = SUBSI (* FLD (i_rn), offset);
if (EQSI (FLD (f_rd), 15)) {
npc = ZEXTQISI (current_cpu->GETMEMQI (pc, addr)); br_status = BRANCH_UNCACHEABLE;
} else {
* FLD (i_rd) = ZEXTQISI (current_cpu->GETMEMQI (pc, addr));
}
}

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used only by: ldrb-pre-dec-reg-offset

  CASE (FRAG_LDRB_PRE_DEC_REG_OFFSET_MID):
    {
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
      PCADDR pc = abuf->addr;

{
  addr = SUBSI (* FLD (i_rn), offset);
if (EQSI (FLD (f_rd), 15)) {
npc = ZEXTQISI (current_cpu->GETMEMQI (pc, addr)); br_status = BRANCH_UNCACHEABLE;
} else {
* FLD (i_rd) = ZEXTQISI (current_cpu->GETMEMQI (pc, addr));
}
}

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used only by: ldrb-pre-inc-imm-offset

  CASE (FRAG_LDRB_PRE_INC_IMM_OFFSET_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_ldr_post_dec_imm_offset.f
      PCADDR pc = abuf->addr;
      br_status = BRANCH_UNTAKEN;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  offset = FLD (f_uimm12);
  addr = ADDSI (* FLD (i_rn), offset);
if (EQSI (FLD (f_rd), 15)) {
npc = ZEXTQISI (current_cpu->GETMEMQI (pc, addr)); br_status = BRANCH_UNCACHEABLE;
} else {
* FLD (i_rd) = ZEXTQISI (current_cpu->GETMEMQI (pc, addr));
}
}

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used only by: ldrb-pre-inc-reg-offset

  CASE (FRAG_LDRB_PRE_INC_REG_OFFSET_MID):
    {
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
      PCADDR pc = abuf->addr;

{
  addr = ADDSI (* FLD (i_rn), offset);
if (EQSI (FLD (f_rd), 15)) {
npc = ZEXTQISI (current_cpu->GETMEMQI (pc, addr)); br_status = BRANCH_UNCACHEABLE;
} else {
* FLD (i_rd) = ZEXTQISI (current_cpu->GETMEMQI (pc, addr));
}
}

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used only by: ldrb-pre-dec-wb-imm-offset

  CASE (FRAG_LDRB_PRE_DEC_WB_IMM_OFFSET_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_ldr_post_dec_imm_offset.f
      PCADDR pc = abuf->addr;
      br_status = BRANCH_UNTAKEN;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  offset = FLD (f_uimm12);
  addr = SUBSI (* FLD (i_rn), offset);
if (EQSI (FLD (f_rd), 15)) {
npc = ZEXTQISI (current_cpu->GETMEMQI (pc, addr)); br_status = BRANCH_UNCACHEABLE;
} else {
* FLD (i_rd) = ZEXTQISI (current_cpu->GETMEMQI (pc, addr));
}
}

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used only by: ldrb-pre-dec-wb-reg-offset

  CASE (FRAG_LDRB_PRE_DEC_WB_REG_OFFSET_MID):
    {
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
      PCADDR pc = abuf->addr;

{
  addr = SUBSI (* FLD (i_rn), offset);
if (EQSI (FLD (f_rd), 15)) {
npc = ZEXTQISI (current_cpu->GETMEMQI (pc, addr)); br_status = BRANCH_UNCACHEABLE;
} else {
* FLD (i_rd) = ZEXTQISI (current_cpu->GETMEMQI (pc, addr));
}
}

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used only by: ldrb-pre-inc-wb-imm-offset

  CASE (FRAG_LDRB_PRE_INC_WB_IMM_OFFSET_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_ldr_post_dec_imm_offset.f
      PCADDR pc = abuf->addr;
      br_status = BRANCH_UNTAKEN;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  offset = FLD (f_uimm12);
  addr = ADDSI (* FLD (i_rn), offset);
if (EQSI (FLD (f_rd), 15)) {
npc = ZEXTQISI (current_cpu->GETMEMQI (pc, addr)); br_status = BRANCH_UNCACHEABLE;
} else {
* FLD (i_rd) = ZEXTQISI (current_cpu->GETMEMQI (pc, addr));
}
}

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used only by: ldrb-pre-inc-wb-reg-offset

  CASE (FRAG_LDRB_PRE_INC_WB_REG_OFFSET_MID):
    {
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
      PCADDR pc = abuf->addr;

{
  addr = ADDSI (* FLD (i_rn), offset);
if (EQSI (FLD (f_rd), 15)) {
npc = ZEXTQISI (current_cpu->GETMEMQI (pc, addr)); br_status = BRANCH_UNCACHEABLE;
} else {
* FLD (i_rd) = ZEXTQISI (current_cpu->GETMEMQI (pc, addr));
}
}

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used only by: str-post-dec-imm-offset

  CASE (FRAG_STR_POST_DEC_IMM_OFFSET_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_ldr_post_dec_imm_offset.f
      PCADDR pc = abuf->addr;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  offset = FLD (f_uimm12);
  addr = * FLD (i_rn);
}

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used only by: str-post-inc-imm-offset

  CASE (FRAG_STR_POST_INC_IMM_OFFSET_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_ldr_post_dec_imm_offset.f
      PCADDR pc = abuf->addr;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  offset = FLD (f_uimm12);
  addr = * FLD (i_rn);
}

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used only by: str-post-dec-nonpriv-imm-offset

  CASE (FRAG_STR_POST_DEC_NONPRIV_IMM_OFFSET_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_ldr_post_dec_imm_offset.f
      PCADDR pc = abuf->addr;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  offset = FLD (f_uimm12);
  addr = * FLD (i_rn);
current_cpu->SETMEMSI (pc, addr, * FLD (i_rd));
  addr = SUBSI (* FLD (i_rn), offset);
* FLD (i_rn) = addr;
}

#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: str-post-inc-nonpriv-imm-offset

  CASE (FRAG_STR_POST_INC_NONPRIV_IMM_OFFSET_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_ldr_post_dec_imm_offset.f
      PCADDR pc = abuf->addr;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  offset = FLD (f_uimm12);
  addr = * FLD (i_rn);
current_cpu->SETMEMSI (pc, addr, * FLD (i_rd));
  addr = ADDSI (* FLD (i_rn), offset);
* FLD (i_rn) = addr;
}

#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: str-pre-dec-imm-offset

  CASE (FRAG_STR_PRE_DEC_IMM_OFFSET_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_ldr_post_dec_imm_offset.f
      PCADDR pc = abuf->addr;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  offset = FLD (f_uimm12);
  addr = SUBSI (* FLD (i_rn), offset);
current_cpu->SETMEMSI (pc, addr, * FLD (i_rd));
}

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used only by: str-pre-dec-reg-offset

  CASE (FRAG_STR_PRE_DEC_REG_OFFSET_MID):
    {
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
      PCADDR pc = abuf->addr;

{
  addr = SUBSI (* FLD (i_rn), offset);
current_cpu->SETMEMSI (pc, addr, * FLD (i_rd));
}

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used only by: str-pre-inc-imm-offset

  CASE (FRAG_STR_PRE_INC_IMM_OFFSET_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_ldr_post_dec_imm_offset.f
      PCADDR pc = abuf->addr;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  offset = FLD (f_uimm12);
  addr = ADDSI (* FLD (i_rn), offset);
current_cpu->SETMEMSI (pc, addr, * FLD (i_rd));
}

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used only by: str-pre-inc-reg-offset

  CASE (FRAG_STR_PRE_INC_REG_OFFSET_MID):
    {
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
      PCADDR pc = abuf->addr;

{
  addr = ADDSI (* FLD (i_rn), offset);
current_cpu->SETMEMSI (pc, addr, * FLD (i_rd));
}

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used only by: str-pre-dec-wb-imm-offset

  CASE (FRAG_STR_PRE_DEC_WB_IMM_OFFSET_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_ldr_post_dec_imm_offset.f
      PCADDR pc = abuf->addr;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  offset = FLD (f_uimm12);
  addr = SUBSI (* FLD (i_rn), offset);
current_cpu->SETMEMSI (pc, addr, * FLD (i_rd));
}

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used only by: str-pre-dec-wb-reg-offset

  CASE (FRAG_STR_PRE_DEC_WB_REG_OFFSET_MID):
    {
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
      PCADDR pc = abuf->addr;

{
  addr = SUBSI (* FLD (i_rn), offset);
current_cpu->SETMEMSI (pc, addr, * FLD (i_rd));
}

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used only by: str-pre-inc-wb-imm-offset

  CASE (FRAG_STR_PRE_INC_WB_IMM_OFFSET_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_ldr_post_dec_imm_offset.f
      PCADDR pc = abuf->addr;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  offset = FLD (f_uimm12);
  addr = ADDSI (* FLD (i_rn), offset);
current_cpu->SETMEMSI (pc, addr, * FLD (i_rd));
}

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used only by: str-pre-inc-wb-reg-offset

  CASE (FRAG_STR_PRE_INC_WB_REG_OFFSET_MID):
    {
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
      PCADDR pc = abuf->addr;

{
  addr = ADDSI (* FLD (i_rn), offset);
current_cpu->SETMEMSI (pc, addr, * FLD (i_rd));
}

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used only by: strb-post-dec-imm-offset

  CASE (FRAG_STRB_POST_DEC_IMM_OFFSET_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_ldr_post_dec_imm_offset.f
      PCADDR pc = abuf->addr;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  offset = FLD (f_uimm12);
  addr = * FLD (i_rn);
current_cpu->SETMEMQI (pc, addr, TRUNCSIQI (* FLD (i_rd)));
  addr = SUBSI (* FLD (i_rn), offset);
* FLD (i_rn) = addr;
}

#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: strb-post-inc-imm-offset

  CASE (FRAG_STRB_POST_INC_IMM_OFFSET_MID):
    {
#define FLD(f) abuf->fields.sfmt_ldr_post_dec_imm_offset.f
      PCADDR pc = abuf->addr;

{
  addr = ADDSI (* FLD (i_rn), offset);
* FLD (i_rn) = addr;
}

#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: strb-post-dec-nonpriv-imm-offset

  CASE (FRAG_STRB_POST_DEC_NONPRIV_IMM_OFFSET_MID):
    {
#define FLD(f) abuf->fields.sfmt_ldr_post_dec_imm_offset.f
      PCADDR pc = abuf->addr;

{
  addr = SUBSI (* FLD (i_rn), offset);
* FLD (i_rn) = addr;
}

#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: strb-post-inc-nonpriv-imm-offset

  CASE (FRAG_STRB_POST_INC_NONPRIV_IMM_OFFSET_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_ldr_post_dec_imm_offset.f
      PCADDR pc = abuf->addr;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  offset = FLD (f_uimm12);
  addr = * FLD (i_rn);
current_cpu->SETMEMQI (pc, addr, TRUNCSIQI (* FLD (i_rd)));
  addr = ADDSI (* FLD (i_rn), offset);
* FLD (i_rn) = addr;
}

#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: strb-post-inc-nonpriv-reg-offset

  CASE (FRAG_STRB_POST_INC_NONPRIV_REG_OFFSET_MID):
    {
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
      PCADDR pc = abuf->addr;

{
  addr = * FLD (i_rn);
}

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used only by: strb-pre-dec-imm-offset

  CASE (FRAG_STRB_PRE_DEC_IMM_OFFSET_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_ldr_post_dec_imm_offset.f
      PCADDR pc = abuf->addr;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  offset = FLD (f_uimm12);
  addr = SUBSI (* FLD (i_rn), offset);
current_cpu->SETMEMQI (pc, addr, TRUNCSIQI (* FLD (i_rd)));
}

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used only by: strb-pre-dec-reg-offset

  CASE (FRAG_STRB_PRE_DEC_REG_OFFSET_MID):
    {
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
      PCADDR pc = abuf->addr;

{
  addr = SUBSI (* FLD (i_rn), offset);
current_cpu->SETMEMQI (pc, addr, TRUNCSIQI (* FLD (i_rd)));
}

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used only by: strb-pre-inc-imm-offset

  CASE (FRAG_STRB_PRE_INC_IMM_OFFSET_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_ldr_post_dec_imm_offset.f
      PCADDR pc = abuf->addr;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  offset = FLD (f_uimm12);
  addr = ADDSI (* FLD (i_rn), offset);
current_cpu->SETMEMQI (pc, addr, TRUNCSIQI (* FLD (i_rd)));
}

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used only by: strb-pre-inc-reg-offset

  CASE (FRAG_STRB_PRE_INC_REG_OFFSET_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
      PCADDR pc = abuf->addr;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  offset = current_cpu->compute_operand2_immshift (* FLD (i_rm), FLD (f_operand2_shifttype), FLD (f_operand2_shiftimm));
  addr = ADDSI (* FLD (i_rn), offset);
current_cpu->SETMEMQI (pc, addr, TRUNCSIQI (* FLD (i_rd)));
}

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used only by: strb-pre-dec-wb-imm-offset

  CASE (FRAG_STRB_PRE_DEC_WB_IMM_OFFSET_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_ldr_post_dec_imm_offset.f
      PCADDR pc = abuf->addr;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  offset = FLD (f_uimm12);
  addr = SUBSI (* FLD (i_rn), offset);
current_cpu->SETMEMQI (pc, addr, TRUNCSIQI (* FLD (i_rd)));
}

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used only by: strb-pre-dec-wb-reg-offset

  CASE (FRAG_STRB_PRE_DEC_WB_REG_OFFSET_MID):
    {
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
      PCADDR pc = abuf->addr;

{
  addr = SUBSI (* FLD (i_rn), offset);
current_cpu->SETMEMQI (pc, addr, TRUNCSIQI (* FLD (i_rd)));
}

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used only by: strb-pre-inc-wb-imm-offset

  CASE (FRAG_STRB_PRE_INC_WB_IMM_OFFSET_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_ldr_post_dec_imm_offset.f
      PCADDR pc = abuf->addr;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  offset = FLD (f_uimm12);
  addr = ADDSI (* FLD (i_rn), offset);
current_cpu->SETMEMQI (pc, addr, TRUNCSIQI (* FLD (i_rd)));
}

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used only by: strb-pre-inc-wb-reg-offset

  CASE (FRAG_STRB_PRE_INC_WB_REG_OFFSET_MID):
    {
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
      PCADDR pc = abuf->addr;

{
  addr = ADDSI (* FLD (i_rn), offset);
current_cpu->SETMEMQI (pc, addr, TRUNCSIQI (* FLD (i_rd)));
}

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used only by: strh-pre-dec-imm-offset

  CASE (FRAG_STRH_PRE_DEC_IMM_OFFSET_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_strh_pre_dec_imm_offset.f
      PCADDR pc = abuf->addr;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  offset = FLD (i_hdt_offset8);
  addr = SUBSI (* FLD (i_rn), offset);
current_cpu->SETMEMHI (pc, addr, TRUNCSIHI (* FLD (i_rd)));
}

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used only by: strh-pre-dec-reg-offset

  CASE (FRAG_STRH_PRE_DEC_REG_OFFSET_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
      PCADDR pc = abuf->addr;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  offset = * FLD (i_rm);
  addr = SUBSI (* FLD (i_rn), offset);
current_cpu->SETMEMHI (pc, addr, TRUNCSIHI (* FLD (i_rd)));
}

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used only by: strh-pre-inc-imm-offset

  CASE (FRAG_STRH_PRE_INC_IMM_OFFSET_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_strh_pre_dec_imm_offset.f
      PCADDR pc = abuf->addr;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  offset = FLD (i_hdt_offset8);
  addr = ADDSI (* FLD (i_rn), offset);
current_cpu->SETMEMHI (pc, addr, TRUNCSIHI (* FLD (i_rd)));
}

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used only by: strh-pre-inc-reg-offset

  CASE (FRAG_STRH_PRE_INC_REG_OFFSET_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
      PCADDR pc = abuf->addr;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  offset = * FLD (i_rm);
  addr = ADDSI (* FLD (i_rn), offset);
current_cpu->SETMEMHI (pc, addr, TRUNCSIHI (* FLD (i_rd)));
}

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used only by: strh-pre-dec-wb-imm-offset

  CASE (FRAG_STRH_PRE_DEC_WB_IMM_OFFSET_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_strh_pre_dec_imm_offset.f
      PCADDR pc = abuf->addr;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  offset = FLD (i_hdt_offset8);
  addr = SUBSI (* FLD (i_rn), offset);
current_cpu->SETMEMHI (pc, addr, TRUNCSIHI (* FLD (i_rd)));
}

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used only by: strh-pre-dec-wb-reg-offset

  CASE (FRAG_STRH_PRE_DEC_WB_REG_OFFSET_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
      PCADDR pc = abuf->addr;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  offset = * FLD (i_rm);
  addr = SUBSI (* FLD (i_rn), offset);
current_cpu->SETMEMHI (pc, addr, TRUNCSIHI (* FLD (i_rd)));
}

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used only by: strh-pre-inc-wb-imm-offset

  CASE (FRAG_STRH_PRE_INC_WB_IMM_OFFSET_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_strh_pre_dec_imm_offset.f
      PCADDR pc = abuf->addr;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  offset = FLD (i_hdt_offset8);
  addr = ADDSI (* FLD (i_rn), offset);
current_cpu->SETMEMHI (pc, addr, TRUNCSIHI (* FLD (i_rd)));
}

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used only by: strh-pre-inc-wb-reg-offset

  CASE (FRAG_STRH_PRE_INC_WB_REG_OFFSET_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
      PCADDR pc = abuf->addr;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  offset = * FLD (i_rm);
  addr = ADDSI (* FLD (i_rn), offset);
current_cpu->SETMEMHI (pc, addr, TRUNCSIHI (* FLD (i_rd)));
}

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used only by: strh-post-dec-imm-offset

  CASE (FRAG_STRH_POST_DEC_IMM_OFFSET_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_strh_pre_dec_imm_offset.f
      PCADDR pc = abuf->addr;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  offset = FLD (i_hdt_offset8);
  addr = * FLD (i_rn);
current_cpu->SETMEMHI (pc, addr, TRUNCSIHI (* FLD (i_rd)));
  addr = SUBSI (* FLD (i_rn), offset);
* FLD (i_rn) = addr;
}

#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: strh-post-dec-reg-offset

  CASE (FRAG_STRH_POST_DEC_REG_OFFSET_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
      PCADDR pc = abuf->addr;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  offset = * FLD (i_rm);
  addr = * FLD (i_rn);
current_cpu->SETMEMHI (pc, addr, TRUNCSIHI (* FLD (i_rd)));
  addr = SUBSI (* FLD (i_rn), offset);
* FLD (i_rn) = addr;
}

#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: strh-post-inc-imm-offset

  CASE (FRAG_STRH_POST_INC_IMM_OFFSET_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_strh_pre_dec_imm_offset.f
      PCADDR pc = abuf->addr;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  offset = FLD (i_hdt_offset8);
  addr = * FLD (i_rn);
current_cpu->SETMEMHI (pc, addr, TRUNCSIHI (* FLD (i_rd)));
  addr = ADDSI (* FLD (i_rn), offset);
* FLD (i_rn) = addr;
}

#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: strh-post-inc-reg-offset

  CASE (FRAG_STRH_POST_INC_REG_OFFSET_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
      PCADDR pc = abuf->addr;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  offset = * FLD (i_rm);
  addr = * FLD (i_rn);
current_cpu->SETMEMHI (pc, addr, TRUNCSIHI (* FLD (i_rd)));
  addr = ADDSI (* FLD (i_rn), offset);
* FLD (i_rn) = addr;
}

#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: ldrsb-pre-dec-imm-offset

  CASE (FRAG_LDRSB_PRE_DEC_IMM_OFFSET_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_strh_pre_dec_imm_offset.f
      PCADDR pc = abuf->addr;
      br_status = BRANCH_UNTAKEN;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  offset = FLD (i_hdt_offset8);
  addr = SUBSI (* FLD (i_rn), offset);
if (EQSI (FLD (f_rd), 15)) {
npc = EXTQISI (current_cpu->GETMEMQI (pc, addr)); br_status = BRANCH_UNCACHEABLE;
} else {
* FLD (i_rd) = EXTQISI (current_cpu->GETMEMQI (pc, addr));
}
}

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used only by: ldrsb-pre-dec-reg-offset

  CASE (FRAG_LDRSB_PRE_DEC_REG_OFFSET_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
      PCADDR pc = abuf->addr;
      br_status = BRANCH_UNTAKEN;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  offset = * FLD (i_rm);
  addr = SUBSI (* FLD (i_rn), offset);
if (EQSI (FLD (f_rd), 15)) {
npc = EXTQISI (current_cpu->GETMEMQI (pc, addr)); br_status = BRANCH_UNCACHEABLE;
} else {
* FLD (i_rd) = EXTQISI (current_cpu->GETMEMQI (pc, addr));
}
}

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used only by: ldrsb-pre-inc-imm-offset

  CASE (FRAG_LDRSB_PRE_INC_IMM_OFFSET_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_strh_pre_dec_imm_offset.f
      PCADDR pc = abuf->addr;
      br_status = BRANCH_UNTAKEN;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  offset = FLD (i_hdt_offset8);
  addr = ADDSI (* FLD (i_rn), offset);
if (EQSI (FLD (f_rd), 15)) {
npc = EXTQISI (current_cpu->GETMEMQI (pc, addr)); br_status = BRANCH_UNCACHEABLE;
} else {
* FLD (i_rd) = EXTQISI (current_cpu->GETMEMQI (pc, addr));
}
}

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used only by: ldrsb-pre-inc-reg-offset

  CASE (FRAG_LDRSB_PRE_INC_REG_OFFSET_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
      PCADDR pc = abuf->addr;
      br_status = BRANCH_UNTAKEN;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  offset = * FLD (i_rm);
  addr = ADDSI (* FLD (i_rn), offset);
if (EQSI (FLD (f_rd), 15)) {
npc = EXTQISI (current_cpu->GETMEMQI (pc, addr)); br_status = BRANCH_UNCACHEABLE;
} else {
* FLD (i_rd) = EXTQISI (current_cpu->GETMEMQI (pc, addr));
}
}

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used only by: ldrsb-pre-dec-wb-imm-offset

  CASE (FRAG_LDRSB_PRE_DEC_WB_IMM_OFFSET_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_strh_pre_dec_imm_offset.f
      PCADDR pc = abuf->addr;
      br_status = BRANCH_UNTAKEN;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  offset = FLD (i_hdt_offset8);
  addr = SUBSI (* FLD (i_rn), offset);
if (EQSI (FLD (f_rd), 15)) {
npc = EXTQISI (current_cpu->GETMEMQI (pc, addr)); br_status = BRANCH_UNCACHEABLE;
} else {
* FLD (i_rd) = EXTQISI (current_cpu->GETMEMQI (pc, addr));
}
}

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used only by: ldrsb-pre-dec-wb-reg-offset

  CASE (FRAG_LDRSB_PRE_DEC_WB_REG_OFFSET_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
      PCADDR pc = abuf->addr;
      br_status = BRANCH_UNTAKEN;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  offset = * FLD (i_rm);
  addr = SUBSI (* FLD (i_rn), offset);
if (EQSI (FLD (f_rd), 15)) {
npc = EXTQISI (current_cpu->GETMEMQI (pc, addr)); br_status = BRANCH_UNCACHEABLE;
} else {
* FLD (i_rd) = EXTQISI (current_cpu->GETMEMQI (pc, addr));
}
}

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used only by: ldrsb-pre-inc-wb-imm-offset

  CASE (FRAG_LDRSB_PRE_INC_WB_IMM_OFFSET_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_strh_pre_dec_imm_offset.f
      PCADDR pc = abuf->addr;
      br_status = BRANCH_UNTAKEN;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  offset = FLD (i_hdt_offset8);
  addr = ADDSI (* FLD (i_rn), offset);
if (EQSI (FLD (f_rd), 15)) {
npc = EXTQISI (current_cpu->GETMEMQI (pc, addr)); br_status = BRANCH_UNCACHEABLE;
} else {
* FLD (i_rd) = EXTQISI (current_cpu->GETMEMQI (pc, addr));
}
}

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used only by: ldrsb-pre-inc-wb-reg-offset

  CASE (FRAG_LDRSB_PRE_INC_WB_REG_OFFSET_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
      PCADDR pc = abuf->addr;
      br_status = BRANCH_UNTAKEN;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  offset = * FLD (i_rm);
  addr = ADDSI (* FLD (i_rn), offset);
if (EQSI (FLD (f_rd), 15)) {
npc = EXTQISI (current_cpu->GETMEMQI (pc, addr)); br_status = BRANCH_UNCACHEABLE;
} else {
* FLD (i_rd) = EXTQISI (current_cpu->GETMEMQI (pc, addr));
}
}

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used only by: ldrsb-post-dec-imm-offset

  CASE (FRAG_LDRSB_POST_DEC_IMM_OFFSET_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_strh_pre_dec_imm_offset.f
      PCADDR pc = abuf->addr;
      br_status = BRANCH_UNTAKEN;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  offset = FLD (i_hdt_offset8);
  addr = * FLD (i_rn);
if (EQSI (FLD (f_rd), 15)) {
npc = EXTQISI (current_cpu->GETMEMQI (pc, addr)); br_status = BRANCH_UNCACHEABLE;
} else {
* FLD (i_rd) = EXTQISI (current_cpu->GETMEMQI (pc, addr));
}
  addr = SUBSI (* FLD (i_rn), offset);
* FLD (i_rn) = addr;
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: ldrsb-post-dec-reg-offset

  CASE (FRAG_LDRSB_POST_DEC_REG_OFFSET_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
      PCADDR pc = abuf->addr;
      br_status = BRANCH_UNTAKEN;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  offset = * FLD (i_rm);
  addr = * FLD (i_rn);
if (EQSI (FLD (f_rd), 15)) {
npc = EXTQISI (current_cpu->GETMEMQI (pc, addr)); br_status = BRANCH_UNCACHEABLE;
} else {
* FLD (i_rd) = EXTQISI (current_cpu->GETMEMQI (pc, addr));
}
  addr = SUBSI (* FLD (i_rn), offset);
* FLD (i_rn) = addr;
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: ldrsb-post-inc-imm-offset

  CASE (FRAG_LDRSB_POST_INC_IMM_OFFSET_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_strh_pre_dec_imm_offset.f
      PCADDR pc = abuf->addr;
      br_status = BRANCH_UNTAKEN;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  offset = FLD (i_hdt_offset8);
  addr = * FLD (i_rn);
if (EQSI (FLD (f_rd), 15)) {
npc = EXTQISI (current_cpu->GETMEMQI (pc, addr)); br_status = BRANCH_UNCACHEABLE;
} else {
* FLD (i_rd) = EXTQISI (current_cpu->GETMEMQI (pc, addr));
}
  addr = ADDSI (* FLD (i_rn), offset);
* FLD (i_rn) = addr;
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: ldrsb-post-inc-reg-offset

  CASE (FRAG_LDRSB_POST_INC_REG_OFFSET_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
      PCADDR pc = abuf->addr;
      br_status = BRANCH_UNTAKEN;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  offset = * FLD (i_rm);
  addr = * FLD (i_rn);
if (EQSI (FLD (f_rd), 15)) {
npc = EXTQISI (current_cpu->GETMEMQI (pc, addr)); br_status = BRANCH_UNCACHEABLE;
} else {
* FLD (i_rd) = EXTQISI (current_cpu->GETMEMQI (pc, addr));
}
  addr = ADDSI (* FLD (i_rn), offset);
* FLD (i_rn) = addr;
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: ldrh-pre-dec-imm-offset

  CASE (FRAG_LDRH_PRE_DEC_IMM_OFFSET_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_strh_pre_dec_imm_offset.f
      PCADDR pc = abuf->addr;
      br_status = BRANCH_UNTAKEN;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  offset = FLD (i_hdt_offset8);
  addr = SUBSI (* FLD (i_rn), offset);
if (EQSI (FLD (f_rd), 15)) {
npc = ZEXTHISI (current_cpu->GETMEMHI (pc, addr)); br_status = BRANCH_UNCACHEABLE;
} else {
* FLD (i_rd) = ZEXTHISI (current_cpu->GETMEMHI (pc, addr));
}
}

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used only by: ldrh-pre-dec-reg-offset

  CASE (FRAG_LDRH_PRE_DEC_REG_OFFSET_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
      PCADDR pc = abuf->addr;
      br_status = BRANCH_UNTAKEN;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  offset = * FLD (i_rm);
  addr = SUBSI (* FLD (i_rn), offset);
if (EQSI (FLD (f_rd), 15)) {
npc = ZEXTHISI (current_cpu->GETMEMHI (pc, addr)); br_status = BRANCH_UNCACHEABLE;
} else {
* FLD (i_rd) = ZEXTHISI (current_cpu->GETMEMHI (pc, addr));
}
}

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used only by: ldrh-pre-inc-imm-offset

  CASE (FRAG_LDRH_PRE_INC_IMM_OFFSET_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_strh_pre_dec_imm_offset.f
      PCADDR pc = abuf->addr;
      br_status = BRANCH_UNTAKEN;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  offset = FLD (i_hdt_offset8);
  addr = ADDSI (* FLD (i_rn), offset);
if (EQSI (FLD (f_rd), 15)) {
npc = ZEXTHISI (current_cpu->GETMEMHI (pc, addr)); br_status = BRANCH_UNCACHEABLE;
} else {
* FLD (i_rd) = ZEXTHISI (current_cpu->GETMEMHI (pc, addr));
}
}

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used only by: ldrh-pre-inc-reg-offset

  CASE (FRAG_LDRH_PRE_INC_REG_OFFSET_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
      PCADDR pc = abuf->addr;
      br_status = BRANCH_UNTAKEN;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  offset = * FLD (i_rm);
  addr = ADDSI (* FLD (i_rn), offset);
if (EQSI (FLD (f_rd), 15)) {
npc = ZEXTHISI (current_cpu->GETMEMHI (pc, addr)); br_status = BRANCH_UNCACHEABLE;
} else {
* FLD (i_rd) = ZEXTHISI (current_cpu->GETMEMHI (pc, addr));
}
}

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used only by: ldrh-pre-dec-wb-imm-offset

  CASE (FRAG_LDRH_PRE_DEC_WB_IMM_OFFSET_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_strh_pre_dec_imm_offset.f
      PCADDR pc = abuf->addr;
      br_status = BRANCH_UNTAKEN;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  offset = FLD (i_hdt_offset8);
  addr = SUBSI (* FLD (i_rn), offset);
if (EQSI (FLD (f_rd), 15)) {
npc = ZEXTHISI (current_cpu->GETMEMHI (pc, addr)); br_status = BRANCH_UNCACHEABLE;
} else {
* FLD (i_rd) = ZEXTHISI (current_cpu->GETMEMHI (pc, addr));
}
}

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used only by: ldrh-pre-dec-wb-reg-offset

  CASE (FRAG_LDRH_PRE_DEC_WB_REG_OFFSET_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
      PCADDR pc = abuf->addr;
      br_status = BRANCH_UNTAKEN;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  offset = * FLD (i_rm);
  addr = SUBSI (* FLD (i_rn), offset);
if (EQSI (FLD (f_rd), 15)) {
npc = ZEXTHISI (current_cpu->GETMEMHI (pc, addr)); br_status = BRANCH_UNCACHEABLE;
} else {
* FLD (i_rd) = ZEXTHISI (current_cpu->GETMEMHI (pc, addr));
}
}

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used only by: ldrh-pre-inc-wb-imm-offset

  CASE (FRAG_LDRH_PRE_INC_WB_IMM_OFFSET_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_strh_pre_dec_imm_offset.f
      PCADDR pc = abuf->addr;
      br_status = BRANCH_UNTAKEN;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  offset = FLD (i_hdt_offset8);
  addr = ADDSI (* FLD (i_rn), offset);
if (EQSI (FLD (f_rd), 15)) {
npc = ZEXTHISI (current_cpu->GETMEMHI (pc, addr)); br_status = BRANCH_UNCACHEABLE;
} else {
* FLD (i_rd) = ZEXTHISI (current_cpu->GETMEMHI (pc, addr));
}
}

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used only by: ldrh-pre-inc-wb-reg-offset

  CASE (FRAG_LDRH_PRE_INC_WB_REG_OFFSET_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
      PCADDR pc = abuf->addr;
      br_status = BRANCH_UNTAKEN;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  offset = * FLD (i_rm);
  addr = ADDSI (* FLD (i_rn), offset);
if (EQSI (FLD (f_rd), 15)) {
npc = ZEXTHISI (current_cpu->GETMEMHI (pc, addr)); br_status = BRANCH_UNCACHEABLE;
} else {
* FLD (i_rd) = ZEXTHISI (current_cpu->GETMEMHI (pc, addr));
}
}

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used only by: ldrh-post-dec-imm-offset

  CASE (FRAG_LDRH_POST_DEC_IMM_OFFSET_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_strh_pre_dec_imm_offset.f
      PCADDR pc = abuf->addr;
      br_status = BRANCH_UNTAKEN;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  offset = FLD (i_hdt_offset8);
  addr = * FLD (i_rn);
if (EQSI (FLD (f_rd), 15)) {
npc = ZEXTHISI (current_cpu->GETMEMHI (pc, addr)); br_status = BRANCH_UNCACHEABLE;
} else {
* FLD (i_rd) = ZEXTHISI (current_cpu->GETMEMHI (pc, addr));
}
  addr = SUBSI (* FLD (i_rn), offset);
* FLD (i_rn) = addr;
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: ldrh-post-dec-reg-offset

  CASE (FRAG_LDRH_POST_DEC_REG_OFFSET_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
      PCADDR pc = abuf->addr;
      br_status = BRANCH_UNTAKEN;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  offset = * FLD (i_rm);
  addr = * FLD (i_rn);
if (EQSI (FLD (f_rd), 15)) {
npc = ZEXTHISI (current_cpu->GETMEMHI (pc, addr)); br_status = BRANCH_UNCACHEABLE;
} else {
* FLD (i_rd) = ZEXTHISI (current_cpu->GETMEMHI (pc, addr));
}
  addr = SUBSI (* FLD (i_rn), offset);
* FLD (i_rn) = addr;
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: ldrh-post-inc-imm-offset

  CASE (FRAG_LDRH_POST_INC_IMM_OFFSET_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_strh_pre_dec_imm_offset.f
      PCADDR pc = abuf->addr;
      br_status = BRANCH_UNTAKEN;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  offset = FLD (i_hdt_offset8);
  addr = * FLD (i_rn);
if (EQSI (FLD (f_rd), 15)) {
npc = ZEXTHISI (current_cpu->GETMEMHI (pc, addr)); br_status = BRANCH_UNCACHEABLE;
} else {
* FLD (i_rd) = ZEXTHISI (current_cpu->GETMEMHI (pc, addr));
}
  addr = ADDSI (* FLD (i_rn), offset);
* FLD (i_rn) = addr;
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: ldrh-post-inc-reg-offset

  CASE (FRAG_LDRH_POST_INC_REG_OFFSET_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
      PCADDR pc = abuf->addr;
      br_status = BRANCH_UNTAKEN;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  offset = * FLD (i_rm);
  addr = * FLD (i_rn);
if (EQSI (FLD (f_rd), 15)) {
npc = ZEXTHISI (current_cpu->GETMEMHI (pc, addr)); br_status = BRANCH_UNCACHEABLE;
} else {
* FLD (i_rd) = ZEXTHISI (current_cpu->GETMEMHI (pc, addr));
}
  addr = ADDSI (* FLD (i_rn), offset);
* FLD (i_rn) = addr;
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: ldrsh-pre-dec-imm-offset

  CASE (FRAG_LDRSH_PRE_DEC_IMM_OFFSET_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_strh_pre_dec_imm_offset.f
      PCADDR pc = abuf->addr;
      br_status = BRANCH_UNTAKEN;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  offset = FLD (i_hdt_offset8);
  addr = SUBSI (* FLD (i_rn), offset);
if (EQSI (FLD (f_rd), 15)) {
npc = EXTHISI (current_cpu->GETMEMHI (pc, addr)); br_status = BRANCH_UNCACHEABLE;
} else {
* FLD (i_rd) = EXTHISI (current_cpu->GETMEMHI (pc, addr));
}
}

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used only by: ldrsh-pre-dec-reg-offset

  CASE (FRAG_LDRSH_PRE_DEC_REG_OFFSET_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
      PCADDR pc = abuf->addr;
      br_status = BRANCH_UNTAKEN;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  offset = * FLD (i_rm);
  addr = SUBSI (* FLD (i_rn), offset);
if (EQSI (FLD (f_rd), 15)) {
npc = EXTHISI (current_cpu->GETMEMHI (pc, addr)); br_status = BRANCH_UNCACHEABLE;
} else {
* FLD (i_rd) = EXTHISI (current_cpu->GETMEMHI (pc, addr));
}
}

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used only by: ldrsh-pre-inc-imm-offset

  CASE (FRAG_LDRSH_PRE_INC_IMM_OFFSET_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_strh_pre_dec_imm_offset.f
      PCADDR pc = abuf->addr;
      br_status = BRANCH_UNTAKEN;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  offset = FLD (i_hdt_offset8);
  addr = ADDSI (* FLD (i_rn), offset);
if (EQSI (FLD (f_rd), 15)) {
npc = EXTHISI (current_cpu->GETMEMHI (pc, addr)); br_status = BRANCH_UNCACHEABLE;
} else {
* FLD (i_rd) = EXTHISI (current_cpu->GETMEMHI (pc, addr));
}
}

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used only by: ldrsh-pre-inc-reg-offset

  CASE (FRAG_LDRSH_PRE_INC_REG_OFFSET_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
      PCADDR pc = abuf->addr;
      br_status = BRANCH_UNTAKEN;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  offset = * FLD (i_rm);
  addr = ADDSI (* FLD (i_rn), offset);
if (EQSI (FLD (f_rd), 15)) {
npc = EXTHISI (current_cpu->GETMEMHI (pc, addr)); br_status = BRANCH_UNCACHEABLE;
} else {
* FLD (i_rd) = EXTHISI (current_cpu->GETMEMHI (pc, addr));
}
((void) 0); /*nop*/
((void) 0); /*nop*/
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: ldrsh-pre-dec-wb-imm-offset

  CASE (FRAG_LDRSH_PRE_DEC_WB_IMM_OFFSET_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_strh_pre_dec_imm_offset.f
      PCADDR pc = abuf->addr;
      br_status = BRANCH_UNTAKEN;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  offset = FLD (i_hdt_offset8);
  addr = SUBSI (* FLD (i_rn), offset);
if (EQSI (FLD (f_rd), 15)) {
npc = EXTHISI (current_cpu->GETMEMHI (pc, addr)); br_status = BRANCH_UNCACHEABLE;
} else {
* FLD (i_rd) = EXTHISI (current_cpu->GETMEMHI (pc, addr));
}
}

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used only by: ldrsh-pre-dec-wb-reg-offset

  CASE (FRAG_LDRSH_PRE_DEC_WB_REG_OFFSET_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
      PCADDR pc = abuf->addr;
      br_status = BRANCH_UNTAKEN;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  offset = * FLD (i_rm);
  addr = SUBSI (* FLD (i_rn), offset);
if (EQSI (FLD (f_rd), 15)) {
npc = EXTHISI (current_cpu->GETMEMHI (pc, addr)); br_status = BRANCH_UNCACHEABLE;
} else {
* FLD (i_rd) = EXTHISI (current_cpu->GETMEMHI (pc, addr));
}
}

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used only by: ldrsh-pre-inc-wb-imm-offset

  CASE (FRAG_LDRSH_PRE_INC_WB_IMM_OFFSET_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_strh_pre_dec_imm_offset.f
      PCADDR pc = abuf->addr;
      br_status = BRANCH_UNTAKEN;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  offset = FLD (i_hdt_offset8);
  addr = ADDSI (* FLD (i_rn), offset);
if (EQSI (FLD (f_rd), 15)) {
npc = EXTHISI (current_cpu->GETMEMHI (pc, addr)); br_status = BRANCH_UNCACHEABLE;
} else {
* FLD (i_rd) = EXTHISI (current_cpu->GETMEMHI (pc, addr));
}
}

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used only by: ldrsh-pre-inc-wb-reg-offset

  CASE (FRAG_LDRSH_PRE_INC_WB_REG_OFFSET_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
      PCADDR pc = abuf->addr;
      br_status = BRANCH_UNTAKEN;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  offset = * FLD (i_rm);
  addr = ADDSI (* FLD (i_rn), offset);
if (EQSI (FLD (f_rd), 15)) {
npc = EXTHISI (current_cpu->GETMEMHI (pc, addr)); br_status = BRANCH_UNCACHEABLE;
} else {
* FLD (i_rd) = EXTHISI (current_cpu->GETMEMHI (pc, addr));
}
((void) 0); /*nop*/
* FLD (i_rn) = addr;
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: ldrsh-post-dec-imm-offset

  CASE (FRAG_LDRSH_POST_DEC_IMM_OFFSET_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_strh_pre_dec_imm_offset.f
      PCADDR pc = abuf->addr;
      br_status = BRANCH_UNTAKEN;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  offset = FLD (i_hdt_offset8);
  addr = * FLD (i_rn);
if (EQSI (FLD (f_rd), 15)) {
npc = EXTHISI (current_cpu->GETMEMHI (pc, addr)); br_status = BRANCH_UNCACHEABLE;
} else {
* FLD (i_rd) = EXTHISI (current_cpu->GETMEMHI (pc, addr));
}
  addr = SUBSI (* FLD (i_rn), offset);
* FLD (i_rn) = addr;
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: ldrsh-post-dec-reg-offset

  CASE (FRAG_LDRSH_POST_DEC_REG_OFFSET_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
      PCADDR pc = abuf->addr;
      br_status = BRANCH_UNTAKEN;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  offset = * FLD (i_rm);
  addr = * FLD (i_rn);
if (EQSI (FLD (f_rd), 15)) {
npc = EXTHISI (current_cpu->GETMEMHI (pc, addr)); br_status = BRANCH_UNCACHEABLE;
} else {
* FLD (i_rd) = EXTHISI (current_cpu->GETMEMHI (pc, addr));
}
  addr = SUBSI (* FLD (i_rn), offset);
* FLD (i_rn) = addr;
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: ldrsh-post-inc-imm-offset

  CASE (FRAG_LDRSH_POST_INC_IMM_OFFSET_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_strh_pre_dec_imm_offset.f
      PCADDR pc = abuf->addr;
      br_status = BRANCH_UNTAKEN;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  offset = FLD (i_hdt_offset8);
  addr = * FLD (i_rn);
if (EQSI (FLD (f_rd), 15)) {
npc = EXTHISI (current_cpu->GETMEMHI (pc, addr)); br_status = BRANCH_UNCACHEABLE;
} else {
* FLD (i_rd) = EXTHISI (current_cpu->GETMEMHI (pc, addr));
}
  addr = ADDSI (* FLD (i_rn), offset);
* FLD (i_rn) = addr;
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: ldrsh-post-inc-reg-offset

  CASE (FRAG_LDRSH_POST_INC_REG_OFFSET_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
      PCADDR pc = abuf->addr;
      br_status = BRANCH_UNTAKEN;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  offset = * FLD (i_rm);
  addr = * FLD (i_rn);
if (EQSI (FLD (f_rd), 15)) {
npc = EXTHISI (current_cpu->GETMEMHI (pc, addr)); br_status = BRANCH_UNCACHEABLE;
} else {
* FLD (i_rd) = EXTHISI (current_cpu->GETMEMHI (pc, addr));
}
  addr = ADDSI (* FLD (i_rn), offset);
* FLD (i_rn) = addr;
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: mul

  CASE (FRAG_MUL_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_mla.f
      PCADDR pc = abuf->addr;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  result = MULSI (* FLD (i_rm), * FLD (i_rs));
* FLD (i_mul_rd) = result;
if (FLD (f_set_cc_)) {
{
current_cpu->hardware.h_zbit = EQSI (result, 0);
current_cpu->hardware.h_nbit = LTSI (result, 0);
}
}
}

#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: mla

  CASE (FRAG_MLA_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_mla.f
      PCADDR pc = abuf->addr;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
* FLD (i_mul_rd) = ADDSI (MULSI (* FLD (i_rm), * FLD (i_rs)), * FLD (i_mul_rn));
if (FLD (f_set_cc_)) {
{
current_cpu->hardware.h_zbit = EQSI (result, 0);
current_cpu->hardware.h_nbit = LTSI (result, 0);
}
}
}

#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: umull

  CASE (FRAG_UMULL_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_umull.f
      PCADDR pc = abuf->addr;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  mul_result = MULDI (ZEXTSIDI (* FLD (i_rs)), ZEXTSIDI (* FLD (i_rm)));
}

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used only by: umlal

  CASE (FRAG_UMLAL_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_umull.f
      PCADDR pc = abuf->addr;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  mul_result = JOINSIDI (* FLD (i_rdhi), * FLD (i_rdlo));
  mul_result = ADDDI (MULDI (ZEXTSIDI (* FLD (i_rs)), ZEXTSIDI (* FLD (i_rm))), mul_result);
}

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used only by: smull

  CASE (FRAG_SMULL_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_umull.f
      PCADDR pc = abuf->addr;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  mul_result = MULDI (EXTSIDI (* FLD (i_rs)), EXTSIDI (* FLD (i_rm)));
}

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used only by: smlal

  CASE (FRAG_SMLAL_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_umull.f
      PCADDR pc = abuf->addr;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  mul_result = JOINSIDI (* FLD (i_rdhi), * FLD (i_rdlo));
  mul_result = ADDDI (MULDI (EXTSIDI (* FLD (i_rs)), EXTSIDI (* FLD (i_rm))), mul_result);
* FLD (i_rdhi) = SUBWORDDISI (mul_result, 0);
* FLD (i_rdlo) = SUBWORDDISI (mul_result, 1);
if (FLD (f_set_cc_)) {
{
current_cpu->hardware.h_zbit = EQDI (mul_result, 0);
current_cpu->hardware.h_nbit = LTDI (mul_result, 0);
}
}
}

#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: swp

  CASE (FRAG_SWP_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
      PCADDR pc = abuf->addr;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  temp = current_cpu->GETMEMSI (pc, * FLD (i_rn));
current_cpu->SETMEMSI (pc, * FLD (i_rn), * FLD (i_rm));
* FLD (i_rd) = temp;
}

#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: swpb

  CASE (FRAG_SWPB_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
      PCADDR pc = abuf->addr;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  temp = current_cpu->GETMEMQI (pc, * FLD (i_rn));
current_cpu->SETMEMQI (pc, * FLD (i_rn), * FLD (i_rm));
* FLD (i_rd) = temp;
}

#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: swi

  CASE (FRAG_SWI_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_swi.f
      PCADDR pc = abuf->addr;
      br_status = BRANCH_UNTAKEN;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
npc = current_cpu->arm_swi (pc, FLD (f_swi_comment)); br_status = BRANCH_UNCACHEABLE;
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: and-reg/imm-shift

  CASE (FRAG_AND_REG_IMM_SHIFT_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
      PCADDR pc = abuf->addr;
      br_status = BRANCH_UNTAKEN;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  operand2 = current_cpu->compute_operand2_immshift (* FLD (i_rm), FLD (f_operand2_shifttype), FLD (f_operand2_shiftimm));
  carry_out = current_cpu->compute_carry_out_immshift (* FLD (i_rm), FLD (f_operand2_shifttype), FLD (f_operand2_shiftimm), current_cpu->hardware.h_cbit);
  result = ANDSI (* FLD (i_rn), operand2);
if (EQSI (FLD (f_rd), 15)) {
{
npc = result; br_status = BRANCH_UNCACHEABLE;
if (FLD (f_set_cc_)) {
current_cpu->h_cpsr_set (current_cpu->h_spsr_get ());
}
}
} else {
{
* FLD (i_rd) = result;
if (FLD (f_set_cc_)) {
{
{
current_cpu->hardware.h_zbit = EQSI (result, 0);
current_cpu->hardware.h_nbit = LTSI (result, 0);
}
current_cpu->hardware.h_cbit = carry_out;
}
}
}
}
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: and-reg/reg-shift

  CASE (FRAG_AND_REG_REG_SHIFT_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_and_reg_reg_shift.f
      PCADDR pc = abuf->addr;
      br_status = BRANCH_UNTAKEN;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  operand2 = current_cpu->compute_operand2_regshift (* FLD (i_rm), FLD (f_operand2_shifttype), * FLD (i_operand2_shiftreg));
  carry_out = current_cpu->compute_carry_out_regshift (* FLD (i_rm), FLD (f_operand2_shifttype), * FLD (i_operand2_shiftreg), current_cpu->hardware.h_cbit);
  result = ANDSI (* FLD (i_rn), operand2);
}

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used only by: and-imm

  CASE (FRAG_AND_IMM_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_and_imm.f
      PCADDR pc = abuf->addr;
      br_status = BRANCH_UNTAKEN;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  result = ANDSI (* FLD (i_rn), FLD (f_imm12));
}

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used only by: orr-reg/imm-shift

  CASE (FRAG_ORR_REG_IMM_SHIFT_MID):
    {
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
      PCADDR pc = abuf->addr;

{
  result = ORSI (* FLD (i_rn), operand2);
}

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used only by: orr-reg/reg-shift

  CASE (FRAG_ORR_REG_REG_SHIFT_MID):
    {
#define FLD(f) abuf->fields.sfmt_and_reg_reg_shift.f
      PCADDR pc = abuf->addr;

{
  result = ORSI (* FLD (i_rn), operand2);
}

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used only by: orr-imm

  CASE (FRAG_ORR_IMM_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_and_imm.f
      PCADDR pc = abuf->addr;
      br_status = BRANCH_UNTAKEN;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  result = ORSI (* FLD (i_rn), FLD (f_imm12));
}

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used only by: eor-reg/imm-shift

  CASE (FRAG_EOR_REG_IMM_SHIFT_MID):
    {
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
      PCADDR pc = abuf->addr;

{
  result = XORSI (* FLD (i_rn), operand2);
}

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used only by: eor-reg/reg-shift

  CASE (FRAG_EOR_REG_REG_SHIFT_MID):
    {
#define FLD(f) abuf->fields.sfmt_and_reg_reg_shift.f
      PCADDR pc = abuf->addr;

{
  result = XORSI (* FLD (i_rn), operand2);
}

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used only by: eor-imm

  CASE (FRAG_EOR_IMM_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_and_imm.f
      PCADDR pc = abuf->addr;
      br_status = BRANCH_UNTAKEN;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  result = XORSI (* FLD (i_rn), FLD (f_imm12));
}

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used only by: mov-reg/imm-shift

  CASE (FRAG_MOV_REG_IMM_SHIFT_MID):
    {
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
      PCADDR pc = abuf->addr;

{
  result = operand2;
}

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used only by: mov-reg/reg-shift

  CASE (FRAG_MOV_REG_REG_SHIFT_MID):
    {
#define FLD(f) abuf->fields.sfmt_and_reg_reg_shift.f
      PCADDR pc = abuf->addr;

{
  result = operand2;
}

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used only by: mov-imm

  CASE (FRAG_MOV_IMM_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_and_imm.f
      PCADDR pc = abuf->addr;
      br_status = BRANCH_UNTAKEN;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  result = FLD (f_imm12);
}

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used only by: bic-reg/imm-shift

  CASE (FRAG_BIC_REG_IMM_SHIFT_MID):
    {
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
      PCADDR pc = abuf->addr;

{
  result = ANDSI (* FLD (i_rn), INVSI (operand2));
}

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used only by: bic-reg/reg-shift

  CASE (FRAG_BIC_REG_REG_SHIFT_MID):
    {
#define FLD(f) abuf->fields.sfmt_and_reg_reg_shift.f
      PCADDR pc = abuf->addr;

{
  result = ANDSI (* FLD (i_rn), INVSI (operand2));
}

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used only by: bic-imm

  CASE (FRAG_BIC_IMM_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_and_imm.f
      PCADDR pc = abuf->addr;
      br_status = BRANCH_UNTAKEN;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  result = ANDSI (* FLD (i_rn), INVSI (FLD (f_imm12)));
}

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used only by: mvn-reg/imm-shift

  CASE (FRAG_MVN_REG_IMM_SHIFT_MID):
    {
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
      PCADDR pc = abuf->addr;

{
  carry_out = current_cpu->compute_carry_out_immshift (* FLD (i_rm), FLD (f_operand2_shifttype), FLD (f_operand2_shiftimm), current_cpu->hardware.h_cbit);
  result = INVSI (operand2);
}

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used only by: mvn-reg/reg-shift

  CASE (FRAG_MVN_REG_REG_SHIFT_MID):
    {
#define FLD(f) abuf->fields.sfmt_and_reg_reg_shift.f
      PCADDR pc = abuf->addr;

{
  carry_out = current_cpu->compute_carry_out_regshift (* FLD (i_rm), FLD (f_operand2_shifttype), * FLD (i_operand2_shiftreg), current_cpu->hardware.h_cbit);
  result = INVSI (operand2);
if (EQSI (FLD (f_rd), 15)) {
{
npc = result; br_status = BRANCH_UNCACHEABLE;
if (FLD (f_set_cc_)) {
current_cpu->h_cpsr_set (current_cpu->h_spsr_get ());
}
}
} else {
{
* FLD (i_rd) = result;
if (FLD (f_set_cc_)) {
{
{
current_cpu->hardware.h_zbit = EQSI (result, 0);
current_cpu->hardware.h_nbit = LTSI (result, 0);
}
current_cpu->hardware.h_cbit = carry_out;
}
}
}
}
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: mvn-imm

  CASE (FRAG_MVN_IMM_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_and_imm.f
      PCADDR pc = abuf->addr;
      br_status = BRANCH_UNTAKEN;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  result = INVSI (FLD (f_imm12));
if (EQSI (FLD (f_rd), 15)) {
{
npc = result; br_status = BRANCH_UNCACHEABLE;
if (FLD (f_set_cc_)) {
current_cpu->h_cpsr_set (current_cpu->h_spsr_get ());
}
}
} else {
{
* FLD (i_rd) = result;
if (FLD (f_set_cc_)) {
{
current_cpu->hardware.h_zbit = EQSI (result, 0);
current_cpu->hardware.h_nbit = LTSI (result, 0);
}
}
}
}
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: add-reg/imm-shift

  CASE (FRAG_ADD_REG_IMM_SHIFT_MID):
    {
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
      PCADDR pc = abuf->addr;

{
  temp_op1 = * FLD (i_rn);
  temp_op2 = operand2;
  result = ADDSI (* FLD (i_rn), operand2);
if (EQSI (FLD (f_rd), 15)) {
{
npc = result; br_status = BRANCH_UNCACHEABLE;
if (FLD (f_set_cc_)) {
current_cpu->h_cpsr_set (current_cpu->h_spsr_get ());
}
}
} else {
{
* FLD (i_rd) = result;
if (FLD (f_set_cc_)) {
{
  SI tmp_result;
  tmp_result = ADDCSI (temp_op1, temp_op2, 0);
{
current_cpu->hardware.h_zbit = EQSI (tmp_result, 0);
current_cpu->hardware.h_nbit = LTSI (tmp_result, 0);
}
current_cpu->hardware.h_cbit = ADDCFSI (temp_op1, temp_op2, 0);
current_cpu->hardware.h_vbit = ADDOFSI (temp_op1, temp_op2, 0);
}
}
}
}
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: add-reg/reg-shift

  CASE (FRAG_ADD_REG_REG_SHIFT_MID):
    {
#define FLD(f) abuf->fields.sfmt_and_reg_reg_shift.f
      PCADDR pc = abuf->addr;

{
  temp_op1 = * FLD (i_rn);
  temp_op2 = operand2;
  result = ADDSI (* FLD (i_rn), operand2);
if (EQSI (FLD (f_rd), 15)) {
{
npc = result; br_status = BRANCH_UNCACHEABLE;
if (FLD (f_set_cc_)) {
current_cpu->h_cpsr_set (current_cpu->h_spsr_get ());
}
}
} else {
{
* FLD (i_rd) = result;
if (FLD (f_set_cc_)) {
{
  SI tmp_result;
  tmp_result = ADDCSI (temp_op1, temp_op2, 0);
{
current_cpu->hardware.h_zbit = EQSI (tmp_result, 0);
current_cpu->hardware.h_nbit = LTSI (tmp_result, 0);
}
current_cpu->hardware.h_cbit = ADDCFSI (temp_op1, temp_op2, 0);
current_cpu->hardware.h_vbit = ADDOFSI (temp_op1, temp_op2, 0);
}
}
}
}
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: add-imm

  CASE (FRAG_ADD_IMM_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_and_imm.f
      PCADDR pc = abuf->addr;
      br_status = BRANCH_UNTAKEN;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  result = ADDSI (* FLD (i_rn), FLD (f_imm12));
if (EQSI (FLD (f_rd), 15)) {
{
if (FLD (f_set_cc_)) {
current_cpu->h_cpsr_set (current_cpu->h_spsr_get ());
}
npc = result; br_status = BRANCH_UNCACHEABLE;
}
} else {
{
if (FLD (f_set_cc_)) {
{
  SI tmp_result;
  tmp_result = ADDCSI (* FLD (i_rn), FLD (f_imm12), 0);
{
current_cpu->hardware.h_zbit = EQSI (tmp_result, 0);
current_cpu->hardware.h_nbit = LTSI (tmp_result, 0);
}
current_cpu->hardware.h_cbit = ADDCFSI (* FLD (i_rn), FLD (f_imm12), 0);
current_cpu->hardware.h_vbit = ADDOFSI (* FLD (i_rn), FLD (f_imm12), 0);
}
}
* FLD (i_rd) = result;
}
}
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: adc-reg/imm-shift

  CASE (FRAG_ADC_REG_IMM_SHIFT_MID):
    {
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
      PCADDR pc = abuf->addr;

{
  temp_op1 = * FLD (i_rn);
  temp_op2 = operand2;
  result = ADDCSI (* FLD (i_rn), operand2, current_cpu->hardware.h_cbit);
if (EQSI (FLD (f_rd), 15)) {
{
npc = result; br_status = BRANCH_UNCACHEABLE;
if (FLD (f_set_cc_)) {
current_cpu->h_cpsr_set (current_cpu->h_spsr_get ());
}
}
} else {
{
* FLD (i_rd) = result;
if (FLD (f_set_cc_)) {
{
  SI tmp_result;
  tmp_result = ADDCSI (temp_op1, temp_op2, current_cpu->hardware.h_cbit);
{
current_cpu->hardware.h_zbit = EQSI (tmp_result, 0);
current_cpu->hardware.h_nbit = LTSI (tmp_result, 0);
}
current_cpu->hardware.h_cbit = ADDCFSI (temp_op1, temp_op2, current_cpu->hardware.h_cbit);
current_cpu->hardware.h_vbit = ADDOFSI (temp_op1, temp_op2, current_cpu->hardware.h_cbit);
}
}
}
}
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: adc-reg/reg-shift

  CASE (FRAG_ADC_REG_REG_SHIFT_MID):
    {
#define FLD(f) abuf->fields.sfmt_and_reg_reg_shift.f
      PCADDR pc = abuf->addr;

{
  temp_op1 = * FLD (i_rn);
  temp_op2 = operand2;
  result = ADDCSI (* FLD (i_rn), operand2, current_cpu->hardware.h_cbit);
if (EQSI (FLD (f_rd), 15)) {
{
npc = result; br_status = BRANCH_UNCACHEABLE;
if (FLD (f_set_cc_)) {
current_cpu->h_cpsr_set (current_cpu->h_spsr_get ());
}
}
} else {
{
* FLD (i_rd) = result;
if (FLD (f_set_cc_)) {
{
  SI tmp_result;
  tmp_result = ADDCSI (temp_op1, temp_op2, current_cpu->hardware.h_cbit);
{
current_cpu->hardware.h_zbit = EQSI (tmp_result, 0);
current_cpu->hardware.h_nbit = LTSI (tmp_result, 0);
}
current_cpu->hardware.h_cbit = ADDCFSI (temp_op1, temp_op2, current_cpu->hardware.h_cbit);
current_cpu->hardware.h_vbit = ADDOFSI (temp_op1, temp_op2, current_cpu->hardware.h_cbit);
}
}
}
}
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: adc-imm

  CASE (FRAG_ADC_IMM_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_and_imm.f
      PCADDR pc = abuf->addr;
      br_status = BRANCH_UNTAKEN;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  result = ADDCSI (* FLD (i_rn), FLD (f_imm12), current_cpu->hardware.h_cbit);
if (EQSI (FLD (f_rd), 15)) {
{
if (FLD (f_set_cc_)) {
current_cpu->h_cpsr_set (current_cpu->h_spsr_get ());
}
npc = result; br_status = BRANCH_UNCACHEABLE;
}
} else {
{
if (FLD (f_set_cc_)) {
{
  SI tmp_result;
  tmp_result = ADDCSI (* FLD (i_rn), FLD (f_imm12), current_cpu->hardware.h_cbit);
{
current_cpu->hardware.h_zbit = EQSI (tmp_result, 0);
current_cpu->hardware.h_nbit = LTSI (tmp_result, 0);
}
current_cpu->hardware.h_cbit = ADDCFSI (* FLD (i_rn), FLD (f_imm12), current_cpu->hardware.h_cbit);
current_cpu->hardware.h_vbit = ADDOFSI (* FLD (i_rn), FLD (f_imm12), current_cpu->hardware.h_cbit);
}
}
* FLD (i_rd) = result;
}
}
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: sub-reg/imm-shift

  CASE (FRAG_SUB_REG_IMM_SHIFT_MID):
    {
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
      PCADDR pc = abuf->addr;

{
  temp_op1 = * FLD (i_rn);
  temp_op2 = operand2;
  result = SUBSI (* FLD (i_rn), operand2);
if (EQSI (FLD (f_rd), 15)) {
{
npc = result; br_status = BRANCH_UNCACHEABLE;
if (FLD (f_set_cc_)) {
current_cpu->h_cpsr_set (current_cpu->h_spsr_get ());
}
}
} else {
{
* FLD (i_rd) = result;
if (FLD (f_set_cc_)) {
{
  SI tmp_result;
  tmp_result = SUBCSI (temp_op1, temp_op2, 0);
{
current_cpu->hardware.h_zbit = EQSI (tmp_result, 0);
current_cpu->hardware.h_nbit = LTSI (tmp_result, 0);
}
current_cpu->hardware.h_cbit = NOTBI (SUBCFSI (temp_op1, temp_op2, 0));
current_cpu->hardware.h_vbit = SUBOFSI (temp_op1, temp_op2, 0);
}
}
}
}
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: sub-reg/reg-shift

  CASE (FRAG_SUB_REG_REG_SHIFT_MID):
    {
#define FLD(f) abuf->fields.sfmt_and_reg_reg_shift.f
      PCADDR pc = abuf->addr;

{
  temp_op1 = * FLD (i_rn);
  temp_op2 = operand2;
  result = SUBSI (* FLD (i_rn), operand2);
if (EQSI (FLD (f_rd), 15)) {
{
npc = result; br_status = BRANCH_UNCACHEABLE;
if (FLD (f_set_cc_)) {
current_cpu->h_cpsr_set (current_cpu->h_spsr_get ());
}
}
} else {
{
* FLD (i_rd) = result;
if (FLD (f_set_cc_)) {
{
  SI tmp_result;
  tmp_result = SUBCSI (temp_op1, temp_op2, 0);
{
current_cpu->hardware.h_zbit = EQSI (tmp_result, 0);
current_cpu->hardware.h_nbit = LTSI (tmp_result, 0);
}
current_cpu->hardware.h_cbit = NOTBI (SUBCFSI (temp_op1, temp_op2, 0));
current_cpu->hardware.h_vbit = SUBOFSI (temp_op1, temp_op2, 0);
}
}
}
}
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: sub-imm

  CASE (FRAG_SUB_IMM_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_and_imm.f
      PCADDR pc = abuf->addr;
      br_status = BRANCH_UNTAKEN;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  result = SUBSI (* FLD (i_rn), FLD (f_imm12));
if (EQSI (FLD (f_rd), 15)) {
{
if (FLD (f_set_cc_)) {
current_cpu->h_cpsr_set (current_cpu->h_spsr_get ());
}
npc = result; br_status = BRANCH_UNCACHEABLE;
}
} else {
{
if (FLD (f_set_cc_)) {
{
  SI tmp_result;
  tmp_result = SUBCSI (* FLD (i_rn), FLD (f_imm12), 0);
{
current_cpu->hardware.h_zbit = EQSI (tmp_result, 0);
current_cpu->hardware.h_nbit = LTSI (tmp_result, 0);
}
current_cpu->hardware.h_cbit = NOTBI (SUBCFSI (* FLD (i_rn), FLD (f_imm12), 0));
current_cpu->hardware.h_vbit = SUBOFSI (* FLD (i_rn), FLD (f_imm12), 0);
}
}
* FLD (i_rd) = result;
}
}
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: sbc-reg/imm-shift

  CASE (FRAG_SBC_REG_IMM_SHIFT_MID):
    {
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
      PCADDR pc = abuf->addr;

{
  temp_op1 = * FLD (i_rn);
  temp_op2 = operand2;
  result = SUBCSI (* FLD (i_rn), operand2, NOTBI (current_cpu->hardware.h_cbit));
if (EQSI (FLD (f_rd), 15)) {
{
npc = result; br_status = BRANCH_UNCACHEABLE;
if (FLD (f_set_cc_)) {
current_cpu->h_cpsr_set (current_cpu->h_spsr_get ());
}
}
} else {
{
* FLD (i_rd) = result;
if (FLD (f_set_cc_)) {
{
  SI tmp_result;
  tmp_result = SUBCSI (temp_op1, temp_op2, NOTBI (current_cpu->hardware.h_cbit));
{
current_cpu->hardware.h_zbit = EQSI (tmp_result, 0);
current_cpu->hardware.h_nbit = LTSI (tmp_result, 0);
}
current_cpu->hardware.h_cbit = NOTBI (SUBCFSI (temp_op1, temp_op2, NOTBI (current_cpu->hardware.h_cbit)));
current_cpu->hardware.h_vbit = SUBOFSI (temp_op1, temp_op2, NOTBI (current_cpu->hardware.h_cbit));
}
}
}
}
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: sbc-reg/reg-shift

  CASE (FRAG_SBC_REG_REG_SHIFT_MID):
    {
#define FLD(f) abuf->fields.sfmt_and_reg_reg_shift.f
      PCADDR pc = abuf->addr;

{
  temp_op1 = * FLD (i_rn);
  temp_op2 = operand2;
  result = SUBCSI (* FLD (i_rn), operand2, NOTBI (current_cpu->hardware.h_cbit));
if (EQSI (FLD (f_rd), 15)) {
{
npc = result; br_status = BRANCH_UNCACHEABLE;
if (FLD (f_set_cc_)) {
current_cpu->h_cpsr_set (current_cpu->h_spsr_get ());
}
}
} else {
{
* FLD (i_rd) = result;
if (FLD (f_set_cc_)) {
{
  SI tmp_result;
  tmp_result = SUBCSI (temp_op1, temp_op2, NOTBI (current_cpu->hardware.h_cbit));
{
current_cpu->hardware.h_zbit = EQSI (tmp_result, 0);
current_cpu->hardware.h_nbit = LTSI (tmp_result, 0);
}
current_cpu->hardware.h_cbit = NOTBI (SUBCFSI (temp_op1, temp_op2, NOTBI (current_cpu->hardware.h_cbit)));
current_cpu->hardware.h_vbit = SUBOFSI (temp_op1, temp_op2, NOTBI (current_cpu->hardware.h_cbit));
}
}
}
}
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: sbc-imm

  CASE (FRAG_SBC_IMM_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_and_imm.f
      PCADDR pc = abuf->addr;
      br_status = BRANCH_UNTAKEN;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  result = SUBCSI (* FLD (i_rn), FLD (f_imm12), NOTBI (current_cpu->hardware.h_cbit));
if (EQSI (FLD (f_rd), 15)) {
{
if (FLD (f_set_cc_)) {
current_cpu->h_cpsr_set (current_cpu->h_spsr_get ());
}
npc = result; br_status = BRANCH_UNCACHEABLE;
}
} else {
{
if (FLD (f_set_cc_)) {
{
  SI tmp_result;
  tmp_result = SUBCSI (* FLD (i_rn), FLD (f_imm12), NOTBI (current_cpu->hardware.h_cbit));
{
current_cpu->hardware.h_zbit = EQSI (tmp_result, 0);
current_cpu->hardware.h_nbit = LTSI (tmp_result, 0);
}
current_cpu->hardware.h_cbit = NOTBI (SUBCFSI (* FLD (i_rn), FLD (f_imm12), NOTBI (current_cpu->hardware.h_cbit)));
current_cpu->hardware.h_vbit = SUBOFSI (* FLD (i_rn), FLD (f_imm12), NOTBI (current_cpu->hardware.h_cbit));
}
}
* FLD (i_rd) = result;
}
}
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: rsb-reg/imm-shift

  CASE (FRAG_RSB_REG_IMM_SHIFT_MID):
    {
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
      PCADDR pc = abuf->addr;

{
  temp_op1 = * FLD (i_rn);
  temp_op2 = operand2;
  result = SUBSI (operand2, * FLD (i_rn));
if (EQSI (FLD (f_rd), 15)) {
{
npc = result; br_status = BRANCH_UNCACHEABLE;
if (FLD (f_set_cc_)) {
current_cpu->h_cpsr_set (current_cpu->h_spsr_get ());
}
}
} else {
{
* FLD (i_rd) = result;
if (FLD (f_set_cc_)) {
{
  SI tmp_result;
  tmp_result = SUBCSI (temp_op2, temp_op1, 0);
{
current_cpu->hardware.h_zbit = EQSI (tmp_result, 0);
current_cpu->hardware.h_nbit = LTSI (tmp_result, 0);
}
current_cpu->hardware.h_cbit = NOTBI (SUBCFSI (temp_op2, temp_op1, 0));
current_cpu->hardware.h_vbit = SUBOFSI (temp_op2, temp_op1, 0);
}
}
}
}
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: rsb-reg/reg-shift

  CASE (FRAG_RSB_REG_REG_SHIFT_MID):
    {
#define FLD(f) abuf->fields.sfmt_and_reg_reg_shift.f
      PCADDR pc = abuf->addr;

{
  temp_op1 = * FLD (i_rn);
  temp_op2 = operand2;
  result = SUBSI (operand2, * FLD (i_rn));
if (EQSI (FLD (f_rd), 15)) {
{
npc = result; br_status = BRANCH_UNCACHEABLE;
if (FLD (f_set_cc_)) {
current_cpu->h_cpsr_set (current_cpu->h_spsr_get ());
}
}
} else {
{
* FLD (i_rd) = result;
if (FLD (f_set_cc_)) {
{
  SI tmp_result;
  tmp_result = SUBCSI (temp_op2, temp_op1, 0);
{
current_cpu->hardware.h_zbit = EQSI (tmp_result, 0);
current_cpu->hardware.h_nbit = LTSI (tmp_result, 0);
}
current_cpu->hardware.h_cbit = NOTBI (SUBCFSI (temp_op2, temp_op1, 0));
current_cpu->hardware.h_vbit = SUBOFSI (temp_op2, temp_op1, 0);
}
}
}
}
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: rsb-imm

  CASE (FRAG_RSB_IMM_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_and_imm.f
      PCADDR pc = abuf->addr;
      br_status = BRANCH_UNTAKEN;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  result = SUBSI (FLD (f_imm12), * FLD (i_rn));
if (EQSI (FLD (f_rd), 15)) {
{
if (FLD (f_set_cc_)) {
current_cpu->h_cpsr_set (current_cpu->h_spsr_get ());
}
npc = result; br_status = BRANCH_UNCACHEABLE;
}
} else {
{
if (FLD (f_set_cc_)) {
{
  SI tmp_result;
  tmp_result = SUBCSI (FLD (f_imm12), * FLD (i_rn), 0);
{
current_cpu->hardware.h_zbit = EQSI (tmp_result, 0);
current_cpu->hardware.h_nbit = LTSI (tmp_result, 0);
}
current_cpu->hardware.h_cbit = NOTBI (SUBCFSI (FLD (f_imm12), * FLD (i_rn), 0));
current_cpu->hardware.h_vbit = SUBOFSI (FLD (f_imm12), * FLD (i_rn), 0);
}
}
* FLD (i_rd) = result;
}
}
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: rsc-reg/imm-shift

  CASE (FRAG_RSC_REG_IMM_SHIFT_MID):
    {
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
      PCADDR pc = abuf->addr;

{
  temp_op1 = * FLD (i_rn);
  temp_op2 = operand2;
  result = SUBCSI (operand2, * FLD (i_rn), NOTBI (current_cpu->hardware.h_cbit));
if (EQSI (FLD (f_rd), 15)) {
{
npc = result; br_status = BRANCH_UNCACHEABLE;
if (FLD (f_set_cc_)) {
current_cpu->h_cpsr_set (current_cpu->h_spsr_get ());
}
}
} else {
{
* FLD (i_rd) = result;
if (FLD (f_set_cc_)) {
{
  SI tmp_result;
  tmp_result = SUBCSI (temp_op2, temp_op1, NOTBI (current_cpu->hardware.h_cbit));
{
current_cpu->hardware.h_zbit = EQSI (tmp_result, 0);
current_cpu->hardware.h_nbit = LTSI (tmp_result, 0);
}
current_cpu->hardware.h_cbit = NOTBI (SUBCFSI (temp_op2, temp_op1, NOTBI (current_cpu->hardware.h_cbit)));
current_cpu->hardware.h_vbit = SUBOFSI (temp_op2, temp_op1, NOTBI (current_cpu->hardware.h_cbit));
}
}
}
}
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: rsc-reg/reg-shift

  CASE (FRAG_RSC_REG_REG_SHIFT_MID):
    {
#define FLD(f) abuf->fields.sfmt_and_reg_reg_shift.f
      PCADDR pc = abuf->addr;

{
  temp_op1 = * FLD (i_rn);
  temp_op2 = operand2;
  result = SUBCSI (operand2, * FLD (i_rn), NOTBI (current_cpu->hardware.h_cbit));
if (EQSI (FLD (f_rd), 15)) {
{
npc = result; br_status = BRANCH_UNCACHEABLE;
if (FLD (f_set_cc_)) {
current_cpu->h_cpsr_set (current_cpu->h_spsr_get ());
}
}
} else {
{
* FLD (i_rd) = result;
if (FLD (f_set_cc_)) {
{
  SI tmp_result;
  tmp_result = SUBCSI (temp_op2, temp_op1, NOTBI (current_cpu->hardware.h_cbit));
{
current_cpu->hardware.h_zbit = EQSI (tmp_result, 0);
current_cpu->hardware.h_nbit = LTSI (tmp_result, 0);
}
current_cpu->hardware.h_cbit = NOTBI (SUBCFSI (temp_op2, temp_op1, NOTBI (current_cpu->hardware.h_cbit)));
current_cpu->hardware.h_vbit = SUBOFSI (temp_op2, temp_op1, NOTBI (current_cpu->hardware.h_cbit));
}
}
}
}
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: rsc-imm

  CASE (FRAG_RSC_IMM_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_and_imm.f
      PCADDR pc = abuf->addr;
      br_status = BRANCH_UNTAKEN;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  result = SUBCSI (FLD (f_imm12), * FLD (i_rn), NOTBI (current_cpu->hardware.h_cbit));
if (EQSI (FLD (f_rd), 15)) {
{
if (FLD (f_set_cc_)) {
current_cpu->h_cpsr_set (current_cpu->h_spsr_get ());
}
npc = result; br_status = BRANCH_UNCACHEABLE;
}
} else {
{
if (FLD (f_set_cc_)) {
{
  SI tmp_result;
  tmp_result = SUBCSI (FLD (f_imm12), * FLD (i_rn), NOTBI (current_cpu->hardware.h_cbit));
{
current_cpu->hardware.h_zbit = EQSI (tmp_result, 0);
current_cpu->hardware.h_nbit = LTSI (tmp_result, 0);
}
current_cpu->hardware.h_cbit = NOTBI (SUBCFSI (FLD (f_imm12), * FLD (i_rn), NOTBI (current_cpu->hardware.h_cbit)));
current_cpu->hardware.h_vbit = SUBOFSI (FLD (f_imm12), * FLD (i_rn), NOTBI (current_cpu->hardware.h_cbit));
}
}
* FLD (i_rd) = result;
}
}
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: tst-reg/imm-shift

  CASE (FRAG_TST_REG_IMM_SHIFT_MID):
    {
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
      PCADDR pc = abuf->addr;

{
  result = ANDSI (* FLD (i_rn), operand2);
if (EQSI (FLD (f_rd), 15)) {
current_cpu->h_cpsr_set (current_cpu->h_spsr_get ());
} else {
{
{
current_cpu->hardware.h_zbit = EQSI (result, 0);
current_cpu->hardware.h_nbit = LTSI (result, 0);
}
current_cpu->hardware.h_cbit = carry_out;
}
}
}

#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: tst-reg/reg-shift

  CASE (FRAG_TST_REG_REG_SHIFT_MID):
    {
#define FLD(f) abuf->fields.sfmt_and_reg_reg_shift.f
      PCADDR pc = abuf->addr;

{
  result = ANDSI (* FLD (i_rn), operand2);
}

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used only by: tst-imm

  CASE (FRAG_TST_IMM_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_tst_imm.f
      PCADDR pc = abuf->addr;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
if (EQSI (FLD (f_ror_imm8_rotate), 0)) {
  carry_out = current_cpu->hardware.h_cbit;
} else {
  carry_out = LTBI (FLD (f_ror_imm8), 0);
}
{
{
current_cpu->hardware.h_zbit = EQSI (ANDSI (* FLD (i_rn), FLD (f_ror_imm8)), 0);
current_cpu->hardware.h_nbit = LTSI (ANDSI (* FLD (i_rn), FLD (f_ror_imm8)), 0);
}
current_cpu->hardware.h_cbit = carry_out;
}
}

#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: teq-reg/imm-shift

  CASE (FRAG_TEQ_REG_IMM_SHIFT_MID):
    {
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
      PCADDR pc = abuf->addr;

{
  result = XORSI (* FLD (i_rn), operand2);
}

#undef FLD
    }
    NEXT_FRAG (fragpc);

// ********** used only by: teq-reg/reg-shift

  CASE (FRAG_TEQ_REG_REG_SHIFT_MID):
    {
#define FLD(f) abuf->fields.sfmt_and_reg_reg_shift.f
      PCADDR pc = abuf->addr;

{
  result = XORSI (* FLD (i_rn), operand2);
if (EQSI (FLD (f_rd), 15)) {
current_cpu->h_cpsr_set (current_cpu->h_spsr_get ());
} else {
{
{
current_cpu->hardware.h_zbit = EQSI (result, 0);
current_cpu->hardware.h_nbit = LTSI (result, 0);
}
current_cpu->hardware.h_cbit = carry_out;
}
}
}

#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: teq-imm

  CASE (FRAG_TEQ_IMM_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_tst_imm.f
      PCADDR pc = abuf->addr;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
if (EQSI (FLD (f_ror_imm8_rotate), 0)) {
  carry_out = current_cpu->hardware.h_cbit;
} else {
  carry_out = LTBI (FLD (f_ror_imm8), 0);
}
{
{
current_cpu->hardware.h_zbit = EQSI (XORSI (* FLD (i_rn), FLD (f_ror_imm8)), 0);
current_cpu->hardware.h_nbit = LTSI (XORSI (* FLD (i_rn), FLD (f_ror_imm8)), 0);
}
current_cpu->hardware.h_cbit = carry_out;
}
}

#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: cmp-reg/imm-shift

  CASE (FRAG_CMP_REG_IMM_SHIFT_MID):
    {
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
      PCADDR pc = abuf->addr;

{
if (EQSI (FLD (f_rd), 15)) {
current_cpu->h_cpsr_set (current_cpu->h_spsr_get ());
} else {
{
  SI tmp_result;
  tmp_result = SUBCSI (* FLD (i_rn), operand2, 0);
{
current_cpu->hardware.h_zbit = EQSI (tmp_result, 0);
current_cpu->hardware.h_nbit = LTSI (tmp_result, 0);
}
current_cpu->hardware.h_cbit = NOTBI (SUBCFSI (* FLD (i_rn), operand2, 0));
current_cpu->hardware.h_vbit = SUBOFSI (* FLD (i_rn), operand2, 0);
}
}
}

#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: cmp-reg/reg-shift

  CASE (FRAG_CMP_REG_REG_SHIFT_MID):
    {
#define FLD(f) abuf->fields.sfmt_and_reg_reg_shift.f
      PCADDR pc = abuf->addr;

{
if (EQSI (FLD (f_rd), 15)) {
current_cpu->h_cpsr_set (current_cpu->h_spsr_get ());
} else {
{
  SI tmp_result;
  tmp_result = SUBCSI (* FLD (i_rn), operand2, 0);
{
current_cpu->hardware.h_zbit = EQSI (tmp_result, 0);
current_cpu->hardware.h_nbit = LTSI (tmp_result, 0);
}
current_cpu->hardware.h_cbit = NOTBI (SUBCFSI (* FLD (i_rn), operand2, 0));
current_cpu->hardware.h_vbit = SUBOFSI (* FLD (i_rn), operand2, 0);
}
}
}

#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: cmp-imm

  CASE (FRAG_CMP_IMM_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_and_imm.f
      PCADDR pc = abuf->addr;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  result = SUBCSI (* FLD (i_rn), FLD (f_imm12), 0);
{
current_cpu->hardware.h_zbit = EQSI (result, 0);
current_cpu->hardware.h_nbit = LTSI (result, 0);
}
current_cpu->hardware.h_cbit = NOTBI (SUBCFSI (* FLD (i_rn), FLD (f_imm12), 0));
current_cpu->hardware.h_vbit = SUBOFSI (* FLD (i_rn), FLD (f_imm12), 0);
}

#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: cmn-reg/imm-shift

  CASE (FRAG_CMN_REG_IMM_SHIFT_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
      PCADDR pc = abuf->addr;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  operand2 = current_cpu->compute_operand2_immshift (* FLD (i_rm), FLD (f_operand2_shifttype), FLD (f_operand2_shiftimm));
if (EQSI (FLD (f_rd), 15)) {
current_cpu->h_cpsr_set (current_cpu->h_spsr_get ());
} else {
{
  SI tmp_result;
  tmp_result = ADDCSI (* FLD (i_rn), operand2, 0);
{
current_cpu->hardware.h_zbit = EQSI (tmp_result, 0);
current_cpu->hardware.h_nbit = LTSI (tmp_result, 0);
}
current_cpu->hardware.h_cbit = ADDCFSI (* FLD (i_rn), operand2, 0);
current_cpu->hardware.h_vbit = ADDOFSI (* FLD (i_rn), operand2, 0);
}
}
}

#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: cmn-reg/reg-shift

  CASE (FRAG_CMN_REG_REG_SHIFT_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_and_reg_reg_shift.f
      PCADDR pc = abuf->addr;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  operand2 = current_cpu->compute_operand2_regshift (* FLD (i_rm), FLD (f_operand2_shifttype), * FLD (i_operand2_shiftreg));
if (EQSI (FLD (f_rd), 15)) {
current_cpu->h_cpsr_set (current_cpu->h_spsr_get ());
} else {
{
  SI tmp_result;
  tmp_result = ADDCSI (* FLD (i_rn), operand2, 0);
{
current_cpu->hardware.h_zbit = EQSI (tmp_result, 0);
current_cpu->hardware.h_nbit = LTSI (tmp_result, 0);
}
current_cpu->hardware.h_cbit = ADDCFSI (* FLD (i_rn), operand2, 0);
current_cpu->hardware.h_vbit = ADDOFSI (* FLD (i_rn), operand2, 0);
}
}
}

#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: cmn-imm

  CASE (FRAG_CMN_IMM_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_and_imm.f
      PCADDR pc = abuf->addr;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  result = ADDCSI (* FLD (i_rn), FLD (f_imm12), 0);
{
current_cpu->hardware.h_zbit = EQSI (result, 0);
current_cpu->hardware.h_nbit = LTSI (result, 0);
}
current_cpu->hardware.h_cbit = ADDCFSI (* FLD (i_rn), FLD (f_imm12), 0);
current_cpu->hardware.h_vbit = ADDOFSI (* FLD (i_rn), FLD (f_imm12), 0);
}

#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: ldmda

  CASE (FRAG_LDMDA_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_ldmda.f
      PCADDR pc = abuf->addr;
      br_status = BRANCH_UNTAKEN;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  addr = * FLD (i_rn);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
{
npc = current_cpu->GETMEMSI (pc, addr); br_status = BRANCH_UNCACHEABLE;
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 14))) {
{
current_cpu->hardware.h_gr[((UINT) 14)] = current_cpu->GETMEMSI (pc, addr);
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 13))) {
{
current_cpu->hardware.h_gr[((UINT) 13)] = current_cpu->GETMEMSI (pc, addr);
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 12))) {
{
current_cpu->hardware.h_gr[((UINT) 12)] = current_cpu->GETMEMSI (pc, addr);
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 11))) {
{
current_cpu->hardware.h_gr[((UINT) 11)] = current_cpu->GETMEMSI (pc, addr);
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 10))) {
{
current_cpu->hardware.h_gr[((UINT) 10)] = current_cpu->GETMEMSI (pc, addr);
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 9))) {
{
current_cpu->hardware.h_gr[((UINT) 9)] = current_cpu->GETMEMSI (pc, addr);
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 8))) {
{
current_cpu->hardware.h_gr[((UINT) 8)] = current_cpu->GETMEMSI (pc, addr);
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 7))) {
{
current_cpu->hardware.h_gr[((UINT) 7)] = current_cpu->GETMEMSI (pc, addr);
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 6))) {
{
current_cpu->hardware.h_gr[((UINT) 6)] = current_cpu->GETMEMSI (pc, addr);
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 5))) {
{
current_cpu->hardware.h_gr[((UINT) 5)] = current_cpu->GETMEMSI (pc, addr);
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 4))) {
{
current_cpu->hardware.h_gr[((UINT) 4)] = current_cpu->GETMEMSI (pc, addr);
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 3))) {
{
current_cpu->hardware.h_gr[((UINT) 3)] = current_cpu->GETMEMSI (pc, addr);
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 2))) {
{
current_cpu->hardware.h_gr[((UINT) 2)] = current_cpu->GETMEMSI (pc, addr);
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 1))) {
{
current_cpu->hardware.h_gr[((UINT) 1)] = current_cpu->GETMEMSI (pc, addr);
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 0))) {
{
current_cpu->hardware.h_gr[((UINT) 0)] = current_cpu->GETMEMSI (pc, addr);
  addr = SUBSI (addr, 4);
}
}
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: ldmda-sw

  CASE (FRAG_LDMDA_SW_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_ldmda.f
      PCADDR pc = abuf->addr;
      br_status = BRANCH_UNTAKEN;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  addr = * FLD (i_rn);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
{
npc = current_cpu->GETMEMSI (pc, addr); br_status = BRANCH_UNCACHEABLE;
  addr = SUBSI (addr, 4);
current_cpu->h_cpsr_set (current_cpu->h_spsr_get ());
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 14))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->hardware.h_gr[((UINT) 14)] = current_cpu->GETMEMSI (pc, addr);
} else {
current_cpu->hardware.h_gr_usr[SUBSI (14, 8)] = current_cpu->GETMEMSI (pc, addr);
}
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 13))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->hardware.h_gr[((UINT) 13)] = current_cpu->GETMEMSI (pc, addr);
} else {
current_cpu->hardware.h_gr_usr[SUBSI (13, 8)] = current_cpu->GETMEMSI (pc, addr);
}
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 12))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->hardware.h_gr[((UINT) 12)] = current_cpu->GETMEMSI (pc, addr);
} else {
current_cpu->hardware.h_gr_usr[SUBSI (12, 8)] = current_cpu->GETMEMSI (pc, addr);
}
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 11))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->hardware.h_gr[((UINT) 11)] = current_cpu->GETMEMSI (pc, addr);
} else {
current_cpu->hardware.h_gr_usr[SUBSI (11, 8)] = current_cpu->GETMEMSI (pc, addr);
}
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 10))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->hardware.h_gr[((UINT) 10)] = current_cpu->GETMEMSI (pc, addr);
} else {
current_cpu->hardware.h_gr_usr[SUBSI (10, 8)] = current_cpu->GETMEMSI (pc, addr);
}
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 9))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->hardware.h_gr[((UINT) 9)] = current_cpu->GETMEMSI (pc, addr);
} else {
current_cpu->hardware.h_gr_usr[SUBSI (9, 8)] = current_cpu->GETMEMSI (pc, addr);
}
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 8))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->hardware.h_gr[((UINT) 8)] = current_cpu->GETMEMSI (pc, addr);
} else {
current_cpu->hardware.h_gr_usr[SUBSI (8, 8)] = current_cpu->GETMEMSI (pc, addr);
}
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 7))) {
{
current_cpu->hardware.h_gr[((UINT) 7)] = current_cpu->GETMEMSI (pc, addr);
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 6))) {
{
current_cpu->hardware.h_gr[((UINT) 6)] = current_cpu->GETMEMSI (pc, addr);
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 5))) {
{
current_cpu->hardware.h_gr[((UINT) 5)] = current_cpu->GETMEMSI (pc, addr);
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 4))) {
{
current_cpu->hardware.h_gr[((UINT) 4)] = current_cpu->GETMEMSI (pc, addr);
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 3))) {
{
current_cpu->hardware.h_gr[((UINT) 3)] = current_cpu->GETMEMSI (pc, addr);
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 2))) {
{
current_cpu->hardware.h_gr[((UINT) 2)] = current_cpu->GETMEMSI (pc, addr);
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 1))) {
{
current_cpu->hardware.h_gr[((UINT) 1)] = current_cpu->GETMEMSI (pc, addr);
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 0))) {
{
current_cpu->hardware.h_gr[((UINT) 0)] = current_cpu->GETMEMSI (pc, addr);
  addr = SUBSI (addr, 4);
}
}
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: ldmda-wb

  CASE (FRAG_LDMDA_WB_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_ldmda.f
      PCADDR pc = abuf->addr;
      br_status = BRANCH_UNTAKEN;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  addr = * FLD (i_rn);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
{
npc = current_cpu->GETMEMSI (pc, addr); br_status = BRANCH_UNCACHEABLE;
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 14))) {
{
current_cpu->hardware.h_gr[((UINT) 14)] = current_cpu->GETMEMSI (pc, addr);
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 13))) {
{
current_cpu->hardware.h_gr[((UINT) 13)] = current_cpu->GETMEMSI (pc, addr);
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 12))) {
{
current_cpu->hardware.h_gr[((UINT) 12)] = current_cpu->GETMEMSI (pc, addr);
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 11))) {
{
current_cpu->hardware.h_gr[((UINT) 11)] = current_cpu->GETMEMSI (pc, addr);
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 10))) {
{
current_cpu->hardware.h_gr[((UINT) 10)] = current_cpu->GETMEMSI (pc, addr);
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 9))) {
{
current_cpu->hardware.h_gr[((UINT) 9)] = current_cpu->GETMEMSI (pc, addr);
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 8))) {
{
current_cpu->hardware.h_gr[((UINT) 8)] = current_cpu->GETMEMSI (pc, addr);
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 7))) {
{
current_cpu->hardware.h_gr[((UINT) 7)] = current_cpu->GETMEMSI (pc, addr);
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 6))) {
{
current_cpu->hardware.h_gr[((UINT) 6)] = current_cpu->GETMEMSI (pc, addr);
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 5))) {
{
current_cpu->hardware.h_gr[((UINT) 5)] = current_cpu->GETMEMSI (pc, addr);
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 4))) {
{
current_cpu->hardware.h_gr[((UINT) 4)] = current_cpu->GETMEMSI (pc, addr);
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 3))) {
{
current_cpu->hardware.h_gr[((UINT) 3)] = current_cpu->GETMEMSI (pc, addr);
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 2))) {
{
current_cpu->hardware.h_gr[((UINT) 2)] = current_cpu->GETMEMSI (pc, addr);
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 1))) {
{
current_cpu->hardware.h_gr[((UINT) 1)] = current_cpu->GETMEMSI (pc, addr);
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 0))) {
{
current_cpu->hardware.h_gr[((UINT) 0)] = current_cpu->GETMEMSI (pc, addr);
  addr = SUBSI (addr, 4);
}
}
* FLD (i_rn) = addr;
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: ldmda-sw-wb

  CASE (FRAG_LDMDA_SW_WB_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_ldmda.f
      PCADDR pc = abuf->addr;
      br_status = BRANCH_UNTAKEN;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  addr = * FLD (i_rn);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
{
npc = current_cpu->GETMEMSI (pc, addr); br_status = BRANCH_UNCACHEABLE;
  addr = SUBSI (addr, 4);
current_cpu->h_cpsr_set (current_cpu->h_spsr_get ());
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 14))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->hardware.h_gr[((UINT) 14)] = current_cpu->GETMEMSI (pc, addr);
} else {
current_cpu->hardware.h_gr_usr[SUBSI (14, 8)] = current_cpu->GETMEMSI (pc, addr);
}
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 13))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->hardware.h_gr[((UINT) 13)] = current_cpu->GETMEMSI (pc, addr);
} else {
current_cpu->hardware.h_gr_usr[SUBSI (13, 8)] = current_cpu->GETMEMSI (pc, addr);
}
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 12))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->hardware.h_gr[((UINT) 12)] = current_cpu->GETMEMSI (pc, addr);
} else {
current_cpu->hardware.h_gr_usr[SUBSI (12, 8)] = current_cpu->GETMEMSI (pc, addr);
}
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 11))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->hardware.h_gr[((UINT) 11)] = current_cpu->GETMEMSI (pc, addr);
} else {
current_cpu->hardware.h_gr_usr[SUBSI (11, 8)] = current_cpu->GETMEMSI (pc, addr);
}
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 10))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->hardware.h_gr[((UINT) 10)] = current_cpu->GETMEMSI (pc, addr);
} else {
current_cpu->hardware.h_gr_usr[SUBSI (10, 8)] = current_cpu->GETMEMSI (pc, addr);
}
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 9))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->hardware.h_gr[((UINT) 9)] = current_cpu->GETMEMSI (pc, addr);
} else {
current_cpu->hardware.h_gr_usr[SUBSI (9, 8)] = current_cpu->GETMEMSI (pc, addr);
}
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 8))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->hardware.h_gr[((UINT) 8)] = current_cpu->GETMEMSI (pc, addr);
} else {
current_cpu->hardware.h_gr_usr[SUBSI (8, 8)] = current_cpu->GETMEMSI (pc, addr);
}
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 7))) {
{
current_cpu->hardware.h_gr[((UINT) 7)] = current_cpu->GETMEMSI (pc, addr);
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 6))) {
{
current_cpu->hardware.h_gr[((UINT) 6)] = current_cpu->GETMEMSI (pc, addr);
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 5))) {
{
current_cpu->hardware.h_gr[((UINT) 5)] = current_cpu->GETMEMSI (pc, addr);
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 4))) {
{
current_cpu->hardware.h_gr[((UINT) 4)] = current_cpu->GETMEMSI (pc, addr);
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 3))) {
{
current_cpu->hardware.h_gr[((UINT) 3)] = current_cpu->GETMEMSI (pc, addr);
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 2))) {
{
current_cpu->hardware.h_gr[((UINT) 2)] = current_cpu->GETMEMSI (pc, addr);
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 1))) {
{
current_cpu->hardware.h_gr[((UINT) 1)] = current_cpu->GETMEMSI (pc, addr);
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 0))) {
{
current_cpu->hardware.h_gr[((UINT) 0)] = current_cpu->GETMEMSI (pc, addr);
  addr = SUBSI (addr, 4);
}
}
* FLD (i_rn) = addr;
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: ldmib

  CASE (FRAG_LDMIB_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_ldmda.f
      PCADDR pc = abuf->addr;
      br_status = BRANCH_UNTAKEN;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  addr = * FLD (i_rn);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 0))) {
{
  addr = ADDSI (addr, 4);
current_cpu->hardware.h_gr[((UINT) 0)] = current_cpu->GETMEMSI (pc, addr);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 1))) {
{
  addr = ADDSI (addr, 4);
current_cpu->hardware.h_gr[((UINT) 1)] = current_cpu->GETMEMSI (pc, addr);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 2))) {
{
  addr = ADDSI (addr, 4);
current_cpu->hardware.h_gr[((UINT) 2)] = current_cpu->GETMEMSI (pc, addr);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 3))) {
{
  addr = ADDSI (addr, 4);
current_cpu->hardware.h_gr[((UINT) 3)] = current_cpu->GETMEMSI (pc, addr);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 4))) {
{
  addr = ADDSI (addr, 4);
current_cpu->hardware.h_gr[((UINT) 4)] = current_cpu->GETMEMSI (pc, addr);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 5))) {
{
  addr = ADDSI (addr, 4);
current_cpu->hardware.h_gr[((UINT) 5)] = current_cpu->GETMEMSI (pc, addr);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 6))) {
{
  addr = ADDSI (addr, 4);
current_cpu->hardware.h_gr[((UINT) 6)] = current_cpu->GETMEMSI (pc, addr);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 7))) {
{
  addr = ADDSI (addr, 4);
current_cpu->hardware.h_gr[((UINT) 7)] = current_cpu->GETMEMSI (pc, addr);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 8))) {
{
  addr = ADDSI (addr, 4);
current_cpu->hardware.h_gr[((UINT) 8)] = current_cpu->GETMEMSI (pc, addr);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 9))) {
{
  addr = ADDSI (addr, 4);
current_cpu->hardware.h_gr[((UINT) 9)] = current_cpu->GETMEMSI (pc, addr);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 10))) {
{
  addr = ADDSI (addr, 4);
current_cpu->hardware.h_gr[((UINT) 10)] = current_cpu->GETMEMSI (pc, addr);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 11))) {
{
  addr = ADDSI (addr, 4);
current_cpu->hardware.h_gr[((UINT) 11)] = current_cpu->GETMEMSI (pc, addr);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 12))) {
{
  addr = ADDSI (addr, 4);
current_cpu->hardware.h_gr[((UINT) 12)] = current_cpu->GETMEMSI (pc, addr);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 13))) {
{
  addr = ADDSI (addr, 4);
current_cpu->hardware.h_gr[((UINT) 13)] = current_cpu->GETMEMSI (pc, addr);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 14))) {
{
  addr = ADDSI (addr, 4);
current_cpu->hardware.h_gr[((UINT) 14)] = current_cpu->GETMEMSI (pc, addr);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
{
  addr = ADDSI (addr, 4);
npc = current_cpu->GETMEMSI (pc, addr); br_status = BRANCH_UNCACHEABLE;
}
}
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: ldmib-sw

  CASE (FRAG_LDMIB_SW_MID):
    {
#define FLD(f) abuf->fields.sfmt_ldmda.f
      PCADDR pc = abuf->addr;

{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 8))) {
{
  addr = ADDSI (addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->hardware.h_gr[((UINT) 8)] = current_cpu->GETMEMSI (pc, addr);
} else {
current_cpu->hardware.h_gr_usr[SUBSI (8, 8)] = current_cpu->GETMEMSI (pc, addr);
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 9))) {
{
  addr = ADDSI (addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->hardware.h_gr[((UINT) 9)] = current_cpu->GETMEMSI (pc, addr);
} else {
current_cpu->hardware.h_gr_usr[SUBSI (9, 8)] = current_cpu->GETMEMSI (pc, addr);
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 10))) {
{
  addr = ADDSI (addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->hardware.h_gr[((UINT) 10)] = current_cpu->GETMEMSI (pc, addr);
} else {
current_cpu->hardware.h_gr_usr[SUBSI (10, 8)] = current_cpu->GETMEMSI (pc, addr);
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 11))) {
{
  addr = ADDSI (addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->hardware.h_gr[((UINT) 11)] = current_cpu->GETMEMSI (pc, addr);
} else {
current_cpu->hardware.h_gr_usr[SUBSI (11, 8)] = current_cpu->GETMEMSI (pc, addr);
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 12))) {
{
  addr = ADDSI (addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->hardware.h_gr[((UINT) 12)] = current_cpu->GETMEMSI (pc, addr);
} else {
current_cpu->hardware.h_gr_usr[SUBSI (12, 8)] = current_cpu->GETMEMSI (pc, addr);
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 13))) {
{
  addr = ADDSI (addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->hardware.h_gr[((UINT) 13)] = current_cpu->GETMEMSI (pc, addr);
} else {
current_cpu->hardware.h_gr_usr[SUBSI (13, 8)] = current_cpu->GETMEMSI (pc, addr);
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 14))) {
{
  addr = ADDSI (addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->hardware.h_gr[((UINT) 14)] = current_cpu->GETMEMSI (pc, addr);
} else {
current_cpu->hardware.h_gr_usr[SUBSI (14, 8)] = current_cpu->GETMEMSI (pc, addr);
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
{
  addr = ADDSI (addr, 4);
npc = current_cpu->GETMEMSI (pc, addr); br_status = BRANCH_UNCACHEABLE;
current_cpu->h_cpsr_set (current_cpu->h_spsr_get ());
}
}
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: ldmib-wb

  CASE (FRAG_LDMIB_WB_MID):
    {
#define FLD(f) abuf->fields.sfmt_ldmda.f
      PCADDR pc = abuf->addr;

{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 8))) {
{
  addr = ADDSI (addr, 4);
current_cpu->hardware.h_gr[((UINT) 8)] = current_cpu->GETMEMSI (pc, addr);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 9))) {
{
  addr = ADDSI (addr, 4);
current_cpu->hardware.h_gr[((UINT) 9)] = current_cpu->GETMEMSI (pc, addr);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 10))) {
{
  addr = ADDSI (addr, 4);
current_cpu->hardware.h_gr[((UINT) 10)] = current_cpu->GETMEMSI (pc, addr);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 11))) {
{
  addr = ADDSI (addr, 4);
current_cpu->hardware.h_gr[((UINT) 11)] = current_cpu->GETMEMSI (pc, addr);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 12))) {
{
  addr = ADDSI (addr, 4);
current_cpu->hardware.h_gr[((UINT) 12)] = current_cpu->GETMEMSI (pc, addr);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 13))) {
{
  addr = ADDSI (addr, 4);
current_cpu->hardware.h_gr[((UINT) 13)] = current_cpu->GETMEMSI (pc, addr);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 14))) {
{
  addr = ADDSI (addr, 4);
current_cpu->hardware.h_gr[((UINT) 14)] = current_cpu->GETMEMSI (pc, addr);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
{
  addr = ADDSI (addr, 4);
npc = current_cpu->GETMEMSI (pc, addr); br_status = BRANCH_UNCACHEABLE;
}
}
* FLD (i_rn) = addr;
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: ldmib-sw-wb

  CASE (FRAG_LDMIB_SW_WB_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_ldmda.f
      PCADDR pc = abuf->addr;
      br_status = BRANCH_UNTAKEN;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  addr = * FLD (i_rn);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 0))) {
{
  addr = ADDSI (addr, 4);
current_cpu->hardware.h_gr[((UINT) 0)] = current_cpu->GETMEMSI (pc, addr);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 1))) {
{
  addr = ADDSI (addr, 4);
current_cpu->hardware.h_gr[((UINT) 1)] = current_cpu->GETMEMSI (pc, addr);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 2))) {
{
  addr = ADDSI (addr, 4);
current_cpu->hardware.h_gr[((UINT) 2)] = current_cpu->GETMEMSI (pc, addr);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 3))) {
{
  addr = ADDSI (addr, 4);
current_cpu->hardware.h_gr[((UINT) 3)] = current_cpu->GETMEMSI (pc, addr);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 4))) {
{
  addr = ADDSI (addr, 4);
current_cpu->hardware.h_gr[((UINT) 4)] = current_cpu->GETMEMSI (pc, addr);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 5))) {
{
  addr = ADDSI (addr, 4);
current_cpu->hardware.h_gr[((UINT) 5)] = current_cpu->GETMEMSI (pc, addr);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 6))) {
{
  addr = ADDSI (addr, 4);
current_cpu->hardware.h_gr[((UINT) 6)] = current_cpu->GETMEMSI (pc, addr);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 7))) {
{
  addr = ADDSI (addr, 4);
current_cpu->hardware.h_gr[((UINT) 7)] = current_cpu->GETMEMSI (pc, addr);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 8))) {
{
  addr = ADDSI (addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->hardware.h_gr[((UINT) 8)] = current_cpu->GETMEMSI (pc, addr);
} else {
current_cpu->hardware.h_gr_usr[SUBSI (8, 8)] = current_cpu->GETMEMSI (pc, addr);
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 9))) {
{
  addr = ADDSI (addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->hardware.h_gr[((UINT) 9)] = current_cpu->GETMEMSI (pc, addr);
} else {
current_cpu->hardware.h_gr_usr[SUBSI (9, 8)] = current_cpu->GETMEMSI (pc, addr);
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 10))) {
{
  addr = ADDSI (addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->hardware.h_gr[((UINT) 10)] = current_cpu->GETMEMSI (pc, addr);
} else {
current_cpu->hardware.h_gr_usr[SUBSI (10, 8)] = current_cpu->GETMEMSI (pc, addr);
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 11))) {
{
  addr = ADDSI (addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->hardware.h_gr[((UINT) 11)] = current_cpu->GETMEMSI (pc, addr);
} else {
current_cpu->hardware.h_gr_usr[SUBSI (11, 8)] = current_cpu->GETMEMSI (pc, addr);
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 12))) {
{
  addr = ADDSI (addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->hardware.h_gr[((UINT) 12)] = current_cpu->GETMEMSI (pc, addr);
} else {
current_cpu->hardware.h_gr_usr[SUBSI (12, 8)] = current_cpu->GETMEMSI (pc, addr);
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 13))) {
{
  addr = ADDSI (addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->hardware.h_gr[((UINT) 13)] = current_cpu->GETMEMSI (pc, addr);
} else {
current_cpu->hardware.h_gr_usr[SUBSI (13, 8)] = current_cpu->GETMEMSI (pc, addr);
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 14))) {
{
  addr = ADDSI (addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->hardware.h_gr[((UINT) 14)] = current_cpu->GETMEMSI (pc, addr);
} else {
current_cpu->hardware.h_gr_usr[SUBSI (14, 8)] = current_cpu->GETMEMSI (pc, addr);
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
{
  addr = ADDSI (addr, 4);
npc = current_cpu->GETMEMSI (pc, addr); br_status = BRANCH_UNCACHEABLE;
current_cpu->h_cpsr_set (current_cpu->h_spsr_get ());
}
}
* FLD (i_rn) = addr;
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: ldmia

  CASE (FRAG_LDMIA_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_ldmda.f
      PCADDR pc = abuf->addr;
      br_status = BRANCH_UNTAKEN;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  addr = * FLD (i_rn);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 0))) {
{
current_cpu->hardware.h_gr[((UINT) 0)] = current_cpu->GETMEMSI (pc, addr);
  addr = ADDSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 1))) {
{
current_cpu->hardware.h_gr[((UINT) 1)] = current_cpu->GETMEMSI (pc, addr);
  addr = ADDSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 2))) {
{
current_cpu->hardware.h_gr[((UINT) 2)] = current_cpu->GETMEMSI (pc, addr);
  addr = ADDSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 3))) {
{
current_cpu->hardware.h_gr[((UINT) 3)] = current_cpu->GETMEMSI (pc, addr);
  addr = ADDSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 4))) {
{
current_cpu->hardware.h_gr[((UINT) 4)] = current_cpu->GETMEMSI (pc, addr);
  addr = ADDSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 5))) {
{
current_cpu->hardware.h_gr[((UINT) 5)] = current_cpu->GETMEMSI (pc, addr);
  addr = ADDSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 6))) {
{
current_cpu->hardware.h_gr[((UINT) 6)] = current_cpu->GETMEMSI (pc, addr);
  addr = ADDSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 7))) {
{
current_cpu->hardware.h_gr[((UINT) 7)] = current_cpu->GETMEMSI (pc, addr);
  addr = ADDSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 8))) {
{
current_cpu->hardware.h_gr[((UINT) 8)] = current_cpu->GETMEMSI (pc, addr);
  addr = ADDSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 9))) {
{
current_cpu->hardware.h_gr[((UINT) 9)] = current_cpu->GETMEMSI (pc, addr);
  addr = ADDSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 10))) {
{
current_cpu->hardware.h_gr[((UINT) 10)] = current_cpu->GETMEMSI (pc, addr);
  addr = ADDSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 11))) {
{
current_cpu->hardware.h_gr[((UINT) 11)] = current_cpu->GETMEMSI (pc, addr);
  addr = ADDSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 12))) {
{
current_cpu->hardware.h_gr[((UINT) 12)] = current_cpu->GETMEMSI (pc, addr);
  addr = ADDSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 13))) {
{
current_cpu->hardware.h_gr[((UINT) 13)] = current_cpu->GETMEMSI (pc, addr);
  addr = ADDSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 14))) {
{
current_cpu->hardware.h_gr[((UINT) 14)] = current_cpu->GETMEMSI (pc, addr);
  addr = ADDSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
{
npc = current_cpu->GETMEMSI (pc, addr); br_status = BRANCH_UNCACHEABLE;
  addr = ADDSI (addr, 4);
}
}
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: ldmia-sw

  CASE (FRAG_LDMIA_SW_MID):
    {
#define FLD(f) abuf->fields.sfmt_ldmda.f
      PCADDR pc = abuf->addr;

{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 8))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->hardware.h_gr[((UINT) 8)] = current_cpu->GETMEMSI (pc, addr);
} else {
current_cpu->hardware.h_gr_usr[SUBSI (8, 8)] = current_cpu->GETMEMSI (pc, addr);
}
  addr = ADDSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 9))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->hardware.h_gr[((UINT) 9)] = current_cpu->GETMEMSI (pc, addr);
} else {
current_cpu->hardware.h_gr_usr[SUBSI (9, 8)] = current_cpu->GETMEMSI (pc, addr);
}
  addr = ADDSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 10))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->hardware.h_gr[((UINT) 10)] = current_cpu->GETMEMSI (pc, addr);
} else {
current_cpu->hardware.h_gr_usr[SUBSI (10, 8)] = current_cpu->GETMEMSI (pc, addr);
}
  addr = ADDSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 11))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->hardware.h_gr[((UINT) 11)] = current_cpu->GETMEMSI (pc, addr);
} else {
current_cpu->hardware.h_gr_usr[SUBSI (11, 8)] = current_cpu->GETMEMSI (pc, addr);
}
  addr = ADDSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 12))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->hardware.h_gr[((UINT) 12)] = current_cpu->GETMEMSI (pc, addr);
} else {
current_cpu->hardware.h_gr_usr[SUBSI (12, 8)] = current_cpu->GETMEMSI (pc, addr);
}
  addr = ADDSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 13))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->hardware.h_gr[((UINT) 13)] = current_cpu->GETMEMSI (pc, addr);
} else {
current_cpu->hardware.h_gr_usr[SUBSI (13, 8)] = current_cpu->GETMEMSI (pc, addr);
}
  addr = ADDSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 14))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->hardware.h_gr[((UINT) 14)] = current_cpu->GETMEMSI (pc, addr);
} else {
current_cpu->hardware.h_gr_usr[SUBSI (14, 8)] = current_cpu->GETMEMSI (pc, addr);
}
  addr = ADDSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
{
npc = current_cpu->GETMEMSI (pc, addr); br_status = BRANCH_UNCACHEABLE;
  addr = ADDSI (addr, 4);
current_cpu->h_cpsr_set (current_cpu->h_spsr_get ());
}
}
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: ldmia-wb

  CASE (FRAG_LDMIA_WB_MID):
    {
#define FLD(f) abuf->fields.sfmt_ldmda.f
      PCADDR pc = abuf->addr;

{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 8))) {
{
current_cpu->hardware.h_gr[((UINT) 8)] = current_cpu->GETMEMSI (pc, addr);
  addr = ADDSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 9))) {
{
current_cpu->hardware.h_gr[((UINT) 9)] = current_cpu->GETMEMSI (pc, addr);
  addr = ADDSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 10))) {
{
current_cpu->hardware.h_gr[((UINT) 10)] = current_cpu->GETMEMSI (pc, addr);
  addr = ADDSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 11))) {
{
current_cpu->hardware.h_gr[((UINT) 11)] = current_cpu->GETMEMSI (pc, addr);
  addr = ADDSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 12))) {
{
current_cpu->hardware.h_gr[((UINT) 12)] = current_cpu->GETMEMSI (pc, addr);
  addr = ADDSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 13))) {
{
current_cpu->hardware.h_gr[((UINT) 13)] = current_cpu->GETMEMSI (pc, addr);
  addr = ADDSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 14))) {
{
current_cpu->hardware.h_gr[((UINT) 14)] = current_cpu->GETMEMSI (pc, addr);
  addr = ADDSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
{
npc = current_cpu->GETMEMSI (pc, addr); br_status = BRANCH_UNCACHEABLE;
  addr = ADDSI (addr, 4);
}
}
* FLD (i_rn) = addr;
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: ldmia-sw-wb

  CASE (FRAG_LDMIA_SW_WB_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_ldmda.f
      PCADDR pc = abuf->addr;
      br_status = BRANCH_UNTAKEN;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  addr = * FLD (i_rn);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 0))) {
{
current_cpu->hardware.h_gr[((UINT) 0)] = current_cpu->GETMEMSI (pc, addr);
  addr = ADDSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 1))) {
{
current_cpu->hardware.h_gr[((UINT) 1)] = current_cpu->GETMEMSI (pc, addr);
  addr = ADDSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 2))) {
{
current_cpu->hardware.h_gr[((UINT) 2)] = current_cpu->GETMEMSI (pc, addr);
  addr = ADDSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 3))) {
{
current_cpu->hardware.h_gr[((UINT) 3)] = current_cpu->GETMEMSI (pc, addr);
  addr = ADDSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 4))) {
{
current_cpu->hardware.h_gr[((UINT) 4)] = current_cpu->GETMEMSI (pc, addr);
  addr = ADDSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 5))) {
{
current_cpu->hardware.h_gr[((UINT) 5)] = current_cpu->GETMEMSI (pc, addr);
  addr = ADDSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 6))) {
{
current_cpu->hardware.h_gr[((UINT) 6)] = current_cpu->GETMEMSI (pc, addr);
  addr = ADDSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 7))) {
{
current_cpu->hardware.h_gr[((UINT) 7)] = current_cpu->GETMEMSI (pc, addr);
  addr = ADDSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 8))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->hardware.h_gr[((UINT) 8)] = current_cpu->GETMEMSI (pc, addr);
} else {
current_cpu->hardware.h_gr_usr[SUBSI (8, 8)] = current_cpu->GETMEMSI (pc, addr);
}
  addr = ADDSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 9))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->hardware.h_gr[((UINT) 9)] = current_cpu->GETMEMSI (pc, addr);
} else {
current_cpu->hardware.h_gr_usr[SUBSI (9, 8)] = current_cpu->GETMEMSI (pc, addr);
}
  addr = ADDSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 10))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->hardware.h_gr[((UINT) 10)] = current_cpu->GETMEMSI (pc, addr);
} else {
current_cpu->hardware.h_gr_usr[SUBSI (10, 8)] = current_cpu->GETMEMSI (pc, addr);
}
  addr = ADDSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 11))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->hardware.h_gr[((UINT) 11)] = current_cpu->GETMEMSI (pc, addr);
} else {
current_cpu->hardware.h_gr_usr[SUBSI (11, 8)] = current_cpu->GETMEMSI (pc, addr);
}
  addr = ADDSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 12))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->hardware.h_gr[((UINT) 12)] = current_cpu->GETMEMSI (pc, addr);
} else {
current_cpu->hardware.h_gr_usr[SUBSI (12, 8)] = current_cpu->GETMEMSI (pc, addr);
}
  addr = ADDSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 13))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->hardware.h_gr[((UINT) 13)] = current_cpu->GETMEMSI (pc, addr);
} else {
current_cpu->hardware.h_gr_usr[SUBSI (13, 8)] = current_cpu->GETMEMSI (pc, addr);
}
  addr = ADDSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 14))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->hardware.h_gr[((UINT) 14)] = current_cpu->GETMEMSI (pc, addr);
} else {
current_cpu->hardware.h_gr_usr[SUBSI (14, 8)] = current_cpu->GETMEMSI (pc, addr);
}
  addr = ADDSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
{
npc = current_cpu->GETMEMSI (pc, addr); br_status = BRANCH_UNCACHEABLE;
  addr = ADDSI (addr, 4);
current_cpu->h_cpsr_set (current_cpu->h_spsr_get ());
}
}
* FLD (i_rn) = addr;
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: ldmdb

  CASE (FRAG_LDMDB_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_ldmda.f
      PCADDR pc = abuf->addr;
      br_status = BRANCH_UNTAKEN;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  addr = * FLD (i_rn);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
{
  addr = SUBSI (addr, 4);
npc = current_cpu->GETMEMSI (pc, addr); br_status = BRANCH_UNCACHEABLE;
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 14))) {
{
  addr = SUBSI (addr, 4);
current_cpu->hardware.h_gr[((UINT) 14)] = current_cpu->GETMEMSI (pc, addr);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 13))) {
{
  addr = SUBSI (addr, 4);
current_cpu->hardware.h_gr[((UINT) 13)] = current_cpu->GETMEMSI (pc, addr);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 12))) {
{
  addr = SUBSI (addr, 4);
current_cpu->hardware.h_gr[((UINT) 12)] = current_cpu->GETMEMSI (pc, addr);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 11))) {
{
  addr = SUBSI (addr, 4);
current_cpu->hardware.h_gr[((UINT) 11)] = current_cpu->GETMEMSI (pc, addr);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 10))) {
{
  addr = SUBSI (addr, 4);
current_cpu->hardware.h_gr[((UINT) 10)] = current_cpu->GETMEMSI (pc, addr);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 9))) {
{
  addr = SUBSI (addr, 4);
current_cpu->hardware.h_gr[((UINT) 9)] = current_cpu->GETMEMSI (pc, addr);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 8))) {
{
  addr = SUBSI (addr, 4);
current_cpu->hardware.h_gr[((UINT) 8)] = current_cpu->GETMEMSI (pc, addr);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 7))) {
{
  addr = SUBSI (addr, 4);
current_cpu->hardware.h_gr[((UINT) 7)] = current_cpu->GETMEMSI (pc, addr);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 6))) {
{
  addr = SUBSI (addr, 4);
current_cpu->hardware.h_gr[((UINT) 6)] = current_cpu->GETMEMSI (pc, addr);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 5))) {
{
  addr = SUBSI (addr, 4);
current_cpu->hardware.h_gr[((UINT) 5)] = current_cpu->GETMEMSI (pc, addr);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 4))) {
{
  addr = SUBSI (addr, 4);
current_cpu->hardware.h_gr[((UINT) 4)] = current_cpu->GETMEMSI (pc, addr);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 3))) {
{
  addr = SUBSI (addr, 4);
current_cpu->hardware.h_gr[((UINT) 3)] = current_cpu->GETMEMSI (pc, addr);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 2))) {
{
  addr = SUBSI (addr, 4);
current_cpu->hardware.h_gr[((UINT) 2)] = current_cpu->GETMEMSI (pc, addr);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 1))) {
{
  addr = SUBSI (addr, 4);
current_cpu->hardware.h_gr[((UINT) 1)] = current_cpu->GETMEMSI (pc, addr);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 0))) {
{
  addr = SUBSI (addr, 4);
current_cpu->hardware.h_gr[((UINT) 0)] = current_cpu->GETMEMSI (pc, addr);
}
}
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: ldmdb-sw

  CASE (FRAG_LDMDB_SW_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_ldmda.f
      PCADDR pc = abuf->addr;
      br_status = BRANCH_UNTAKEN;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  addr = * FLD (i_rn);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
{
  addr = SUBSI (addr, 4);
npc = current_cpu->GETMEMSI (pc, addr); br_status = BRANCH_UNCACHEABLE;
current_cpu->h_cpsr_set (current_cpu->h_spsr_get ());
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 14))) {
{
  addr = SUBSI (addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->hardware.h_gr[((UINT) 14)] = current_cpu->GETMEMSI (pc, addr);
} else {
current_cpu->hardware.h_gr_usr[SUBSI (14, 8)] = current_cpu->GETMEMSI (pc, addr);
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 13))) {
{
  addr = SUBSI (addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->hardware.h_gr[((UINT) 13)] = current_cpu->GETMEMSI (pc, addr);
} else {
current_cpu->hardware.h_gr_usr[SUBSI (13, 8)] = current_cpu->GETMEMSI (pc, addr);
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 12))) {
{
  addr = SUBSI (addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->hardware.h_gr[((UINT) 12)] = current_cpu->GETMEMSI (pc, addr);
} else {
current_cpu->hardware.h_gr_usr[SUBSI (12, 8)] = current_cpu->GETMEMSI (pc, addr);
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 11))) {
{
  addr = SUBSI (addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->hardware.h_gr[((UINT) 11)] = current_cpu->GETMEMSI (pc, addr);
} else {
current_cpu->hardware.h_gr_usr[SUBSI (11, 8)] = current_cpu->GETMEMSI (pc, addr);
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 10))) {
{
  addr = SUBSI (addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->hardware.h_gr[((UINT) 10)] = current_cpu->GETMEMSI (pc, addr);
} else {
current_cpu->hardware.h_gr_usr[SUBSI (10, 8)] = current_cpu->GETMEMSI (pc, addr);
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 9))) {
{
  addr = SUBSI (addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->hardware.h_gr[((UINT) 9)] = current_cpu->GETMEMSI (pc, addr);
} else {
current_cpu->hardware.h_gr_usr[SUBSI (9, 8)] = current_cpu->GETMEMSI (pc, addr);
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 8))) {
{
  addr = SUBSI (addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->hardware.h_gr[((UINT) 8)] = current_cpu->GETMEMSI (pc, addr);
} else {
current_cpu->hardware.h_gr_usr[SUBSI (8, 8)] = current_cpu->GETMEMSI (pc, addr);
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 7))) {
{
  addr = SUBSI (addr, 4);
current_cpu->hardware.h_gr[((UINT) 7)] = current_cpu->GETMEMSI (pc, addr);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 6))) {
{
  addr = SUBSI (addr, 4);
current_cpu->hardware.h_gr[((UINT) 6)] = current_cpu->GETMEMSI (pc, addr);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 5))) {
{
  addr = SUBSI (addr, 4);
current_cpu->hardware.h_gr[((UINT) 5)] = current_cpu->GETMEMSI (pc, addr);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 4))) {
{
  addr = SUBSI (addr, 4);
current_cpu->hardware.h_gr[((UINT) 4)] = current_cpu->GETMEMSI (pc, addr);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 3))) {
{
  addr = SUBSI (addr, 4);
current_cpu->hardware.h_gr[((UINT) 3)] = current_cpu->GETMEMSI (pc, addr);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 2))) {
{
  addr = SUBSI (addr, 4);
current_cpu->hardware.h_gr[((UINT) 2)] = current_cpu->GETMEMSI (pc, addr);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 1))) {
{
  addr = SUBSI (addr, 4);
current_cpu->hardware.h_gr[((UINT) 1)] = current_cpu->GETMEMSI (pc, addr);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 0))) {
{
  addr = SUBSI (addr, 4);
current_cpu->hardware.h_gr[((UINT) 0)] = current_cpu->GETMEMSI (pc, addr);
}
}
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: ldmdb-wb

  CASE (FRAG_LDMDB_WB_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_ldmda.f
      PCADDR pc = abuf->addr;
      br_status = BRANCH_UNTAKEN;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  addr = * FLD (i_rn);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
{
  addr = SUBSI (addr, 4);
npc = current_cpu->GETMEMSI (pc, addr); br_status = BRANCH_UNCACHEABLE;
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 14))) {
{
  addr = SUBSI (addr, 4);
current_cpu->hardware.h_gr[((UINT) 14)] = current_cpu->GETMEMSI (pc, addr);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 13))) {
{
  addr = SUBSI (addr, 4);
current_cpu->hardware.h_gr[((UINT) 13)] = current_cpu->GETMEMSI (pc, addr);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 12))) {
{
  addr = SUBSI (addr, 4);
current_cpu->hardware.h_gr[((UINT) 12)] = current_cpu->GETMEMSI (pc, addr);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 11))) {
{
  addr = SUBSI (addr, 4);
current_cpu->hardware.h_gr[((UINT) 11)] = current_cpu->GETMEMSI (pc, addr);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 10))) {
{
  addr = SUBSI (addr, 4);
current_cpu->hardware.h_gr[((UINT) 10)] = current_cpu->GETMEMSI (pc, addr);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 9))) {
{
  addr = SUBSI (addr, 4);
current_cpu->hardware.h_gr[((UINT) 9)] = current_cpu->GETMEMSI (pc, addr);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 8))) {
{
  addr = SUBSI (addr, 4);
current_cpu->hardware.h_gr[((UINT) 8)] = current_cpu->GETMEMSI (pc, addr);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 7))) {
{
  addr = SUBSI (addr, 4);
current_cpu->hardware.h_gr[((UINT) 7)] = current_cpu->GETMEMSI (pc, addr);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 6))) {
{
  addr = SUBSI (addr, 4);
current_cpu->hardware.h_gr[((UINT) 6)] = current_cpu->GETMEMSI (pc, addr);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 5))) {
{
  addr = SUBSI (addr, 4);
current_cpu->hardware.h_gr[((UINT) 5)] = current_cpu->GETMEMSI (pc, addr);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 4))) {
{
  addr = SUBSI (addr, 4);
current_cpu->hardware.h_gr[((UINT) 4)] = current_cpu->GETMEMSI (pc, addr);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 3))) {
{
  addr = SUBSI (addr, 4);
current_cpu->hardware.h_gr[((UINT) 3)] = current_cpu->GETMEMSI (pc, addr);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 2))) {
{
  addr = SUBSI (addr, 4);
current_cpu->hardware.h_gr[((UINT) 2)] = current_cpu->GETMEMSI (pc, addr);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 1))) {
{
  addr = SUBSI (addr, 4);
current_cpu->hardware.h_gr[((UINT) 1)] = current_cpu->GETMEMSI (pc, addr);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 0))) {
{
  addr = SUBSI (addr, 4);
current_cpu->hardware.h_gr[((UINT) 0)] = current_cpu->GETMEMSI (pc, addr);
}
}
* FLD (i_rn) = addr;
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: ldmdb-sw-wb

  CASE (FRAG_LDMDB_SW_WB_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_ldmda.f
      PCADDR pc = abuf->addr;
      br_status = BRANCH_UNTAKEN;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  addr = * FLD (i_rn);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
{
  addr = SUBSI (addr, 4);
npc = current_cpu->GETMEMSI (pc, addr); br_status = BRANCH_UNCACHEABLE;
current_cpu->h_cpsr_set (current_cpu->h_spsr_get ());
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 14))) {
{
  addr = SUBSI (addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->hardware.h_gr[((UINT) 14)] = current_cpu->GETMEMSI (pc, addr);
} else {
current_cpu->hardware.h_gr_usr[SUBSI (14, 8)] = current_cpu->GETMEMSI (pc, addr);
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 13))) {
{
  addr = SUBSI (addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->hardware.h_gr[((UINT) 13)] = current_cpu->GETMEMSI (pc, addr);
} else {
current_cpu->hardware.h_gr_usr[SUBSI (13, 8)] = current_cpu->GETMEMSI (pc, addr);
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 12))) {
{
  addr = SUBSI (addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->hardware.h_gr[((UINT) 12)] = current_cpu->GETMEMSI (pc, addr);
} else {
current_cpu->hardware.h_gr_usr[SUBSI (12, 8)] = current_cpu->GETMEMSI (pc, addr);
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 11))) {
{
  addr = SUBSI (addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->hardware.h_gr[((UINT) 11)] = current_cpu->GETMEMSI (pc, addr);
} else {
current_cpu->hardware.h_gr_usr[SUBSI (11, 8)] = current_cpu->GETMEMSI (pc, addr);
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 10))) {
{
  addr = SUBSI (addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->hardware.h_gr[((UINT) 10)] = current_cpu->GETMEMSI (pc, addr);
} else {
current_cpu->hardware.h_gr_usr[SUBSI (10, 8)] = current_cpu->GETMEMSI (pc, addr);
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 9))) {
{
  addr = SUBSI (addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->hardware.h_gr[((UINT) 9)] = current_cpu->GETMEMSI (pc, addr);
} else {
current_cpu->hardware.h_gr_usr[SUBSI (9, 8)] = current_cpu->GETMEMSI (pc, addr);
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 8))) {
{
  addr = SUBSI (addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->hardware.h_gr[((UINT) 8)] = current_cpu->GETMEMSI (pc, addr);
} else {
current_cpu->hardware.h_gr_usr[SUBSI (8, 8)] = current_cpu->GETMEMSI (pc, addr);
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 7))) {
{
  addr = SUBSI (addr, 4);
current_cpu->hardware.h_gr[((UINT) 7)] = current_cpu->GETMEMSI (pc, addr);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 6))) {
{
  addr = SUBSI (addr, 4);
current_cpu->hardware.h_gr[((UINT) 6)] = current_cpu->GETMEMSI (pc, addr);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 5))) {
{
  addr = SUBSI (addr, 4);
current_cpu->hardware.h_gr[((UINT) 5)] = current_cpu->GETMEMSI (pc, addr);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 4))) {
{
  addr = SUBSI (addr, 4);
current_cpu->hardware.h_gr[((UINT) 4)] = current_cpu->GETMEMSI (pc, addr);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 3))) {
{
  addr = SUBSI (addr, 4);
current_cpu->hardware.h_gr[((UINT) 3)] = current_cpu->GETMEMSI (pc, addr);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 2))) {
{
  addr = SUBSI (addr, 4);
current_cpu->hardware.h_gr[((UINT) 2)] = current_cpu->GETMEMSI (pc, addr);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 1))) {
{
  addr = SUBSI (addr, 4);
current_cpu->hardware.h_gr[((UINT) 1)] = current_cpu->GETMEMSI (pc, addr);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 0))) {
{
  addr = SUBSI (addr, 4);
current_cpu->hardware.h_gr[((UINT) 0)] = current_cpu->GETMEMSI (pc, addr);
}
}
* FLD (i_rn) = addr;
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: stmdb

  CASE (FRAG_STMDB_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_ldmda.f
      PCADDR pc = abuf->addr;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  addr = * FLD (i_rn);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
{
  addr = SUBSI (addr, 4);
current_cpu->SETMEMSI (pc, addr, ADDSI (current_cpu->hardware.h_gr[((UINT) 15)], 4));
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 14))) {
{
  addr = SUBSI (addr, 4);
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 14)]);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 13))) {
{
  addr = SUBSI (addr, 4);
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 13)]);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 12))) {
{
  addr = SUBSI (addr, 4);
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 12)]);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 11))) {
{
  addr = SUBSI (addr, 4);
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 11)]);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 10))) {
{
  addr = SUBSI (addr, 4);
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 10)]);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 9))) {
{
  addr = SUBSI (addr, 4);
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 9)]);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 8))) {
{
  addr = SUBSI (addr, 4);
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 8)]);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 7))) {
{
  addr = SUBSI (addr, 4);
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 7)]);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 6))) {
{
  addr = SUBSI (addr, 4);
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 6)]);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 5))) {
{
  addr = SUBSI (addr, 4);
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 5)]);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 4))) {
{
  addr = SUBSI (addr, 4);
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 4)]);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 3))) {
{
  addr = SUBSI (addr, 4);
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 3)]);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 2))) {
{
  addr = SUBSI (addr, 4);
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 2)]);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 1))) {
{
  addr = SUBSI (addr, 4);
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 1)]);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 0))) {
{
  addr = SUBSI (addr, 4);
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 0)]);
}
}
}

#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: stmdb-sw

  CASE (FRAG_STMDB_SW_MID):
    {
#define FLD(f) abuf->fields.sfmt_ldmda.f
      PCADDR pc = abuf->addr;

{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 14))) {
{
  addr = SUBSI (addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 14)]);
} else {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr_usr[SUBSI (14, 8)]);
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 13))) {
{
  addr = SUBSI (addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 13)]);
} else {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr_usr[SUBSI (13, 8)]);
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 12))) {
{
  addr = SUBSI (addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 12)]);
} else {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr_usr[SUBSI (12, 8)]);
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 11))) {
{
  addr = SUBSI (addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 11)]);
} else {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr_usr[SUBSI (11, 8)]);
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 10))) {
{
  addr = SUBSI (addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 10)]);
} else {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr_usr[SUBSI (10, 8)]);
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 9))) {
{
  addr = SUBSI (addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 9)]);
} else {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr_usr[SUBSI (9, 8)]);
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 8))) {
{
  addr = SUBSI (addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 8)]);
} else {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr_usr[SUBSI (8, 8)]);
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 7))) {
{
  addr = SUBSI (addr, 4);
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 7)]);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 6))) {
{
  addr = SUBSI (addr, 4);
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 6)]);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 5))) {
{
  addr = SUBSI (addr, 4);
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 5)]);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 4))) {
{
  addr = SUBSI (addr, 4);
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 4)]);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 3))) {
{
  addr = SUBSI (addr, 4);
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 3)]);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 2))) {
{
  addr = SUBSI (addr, 4);
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 2)]);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 1))) {
{
  addr = SUBSI (addr, 4);
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 1)]);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 0))) {
{
  addr = SUBSI (addr, 4);
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 0)]);
}
}
}

#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: stmdb-wb

  CASE (FRAG_STMDB_WB_MID):
    {
#define FLD(f) abuf->fields.sfmt_ldmda.f
      PCADDR pc = abuf->addr;

{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 14))) {
{
  addr = SUBSI (addr, 4);
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 14)]);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 13))) {
{
  addr = SUBSI (addr, 4);
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 13)]);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 12))) {
{
  addr = SUBSI (addr, 4);
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 12)]);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 11))) {
{
  addr = SUBSI (addr, 4);
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 11)]);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 10))) {
{
  addr = SUBSI (addr, 4);
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 10)]);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 9))) {
{
  addr = SUBSI (addr, 4);
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 9)]);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 8))) {
{
  addr = SUBSI (addr, 4);
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 8)]);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 7))) {
{
  addr = SUBSI (addr, 4);
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 7)]);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 6))) {
{
  addr = SUBSI (addr, 4);
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 6)]);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 5))) {
{
  addr = SUBSI (addr, 4);
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 5)]);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 4))) {
{
  addr = SUBSI (addr, 4);
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 4)]);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 3))) {
{
  addr = SUBSI (addr, 4);
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 3)]);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 2))) {
{
  addr = SUBSI (addr, 4);
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 2)]);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 1))) {
{
  addr = SUBSI (addr, 4);
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 1)]);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 0))) {
{
  addr = SUBSI (addr, 4);
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 0)]);
}
}
* FLD (i_rn) = addr;
}

#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: stmdb-sw-wb

  CASE (FRAG_STMDB_SW_WB_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_ldmda.f
      PCADDR pc = abuf->addr;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  addr = * FLD (i_rn);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
{
  addr = SUBSI (addr, 4);
current_cpu->SETMEMSI (pc, addr, ADDSI (current_cpu->hardware.h_gr[((UINT) 15)], 4));
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 14))) {
{
  addr = SUBSI (addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 14)]);
} else {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr_usr[SUBSI (14, 8)]);
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 13))) {
{
  addr = SUBSI (addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 13)]);
} else {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr_usr[SUBSI (13, 8)]);
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 12))) {
{
  addr = SUBSI (addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 12)]);
} else {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr_usr[SUBSI (12, 8)]);
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 11))) {
{
  addr = SUBSI (addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 11)]);
} else {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr_usr[SUBSI (11, 8)]);
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 10))) {
{
  addr = SUBSI (addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 10)]);
} else {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr_usr[SUBSI (10, 8)]);
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 9))) {
{
  addr = SUBSI (addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 9)]);
} else {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr_usr[SUBSI (9, 8)]);
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 8))) {
{
  addr = SUBSI (addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 8)]);
} else {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr_usr[SUBSI (8, 8)]);
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 7))) {
{
  addr = SUBSI (addr, 4);
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 7)]);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 6))) {
{
  addr = SUBSI (addr, 4);
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 6)]);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 5))) {
{
  addr = SUBSI (addr, 4);
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 5)]);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 4))) {
{
  addr = SUBSI (addr, 4);
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 4)]);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 3))) {
{
  addr = SUBSI (addr, 4);
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 3)]);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 2))) {
{
  addr = SUBSI (addr, 4);
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 2)]);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 1))) {
{
  addr = SUBSI (addr, 4);
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 1)]);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 0))) {
{
  addr = SUBSI (addr, 4);
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 0)]);
}
}
* FLD (i_rn) = addr;
}

#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: stmib

  CASE (FRAG_STMIB_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_ldmda.f
      PCADDR pc = abuf->addr;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  addr = * FLD (i_rn);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 0))) {
{
  addr = ADDSI (addr, 4);
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 0)]);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 1))) {
{
  addr = ADDSI (addr, 4);
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 1)]);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 2))) {
{
  addr = ADDSI (addr, 4);
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 2)]);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 3))) {
{
  addr = ADDSI (addr, 4);
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 3)]);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 4))) {
{
  addr = ADDSI (addr, 4);
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 4)]);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 5))) {
{
  addr = ADDSI (addr, 4);
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 5)]);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 6))) {
{
  addr = ADDSI (addr, 4);
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 6)]);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 7))) {
{
  addr = ADDSI (addr, 4);
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 7)]);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 8))) {
{
  addr = ADDSI (addr, 4);
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 8)]);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 9))) {
{
  addr = ADDSI (addr, 4);
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 9)]);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 10))) {
{
  addr = ADDSI (addr, 4);
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 10)]);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 11))) {
{
  addr = ADDSI (addr, 4);
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 11)]);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 12))) {
{
  addr = ADDSI (addr, 4);
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 12)]);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 13))) {
{
  addr = ADDSI (addr, 4);
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 13)]);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 14))) {
{
  addr = ADDSI (addr, 4);
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 14)]);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
{
  addr = ADDSI (addr, 4);
current_cpu->SETMEMSI (pc, addr, ADDSI (current_cpu->hardware.h_gr[((UINT) 15)], 4));
}
}
}

#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: stmib-sw

  CASE (FRAG_STMIB_SW_MID):
    {
#define FLD(f) abuf->fields.sfmt_ldmda.f
      PCADDR pc = abuf->addr;

{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 8))) {
{
  addr = ADDSI (addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 8)]);
} else {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr_usr[SUBSI (8, 8)]);
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 9))) {
{
  addr = ADDSI (addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 9)]);
} else {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr_usr[SUBSI (9, 8)]);
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 10))) {
{
  addr = ADDSI (addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 10)]);
} else {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr_usr[SUBSI (10, 8)]);
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 11))) {
{
  addr = ADDSI (addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 11)]);
} else {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr_usr[SUBSI (11, 8)]);
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 12))) {
{
  addr = ADDSI (addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 12)]);
} else {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr_usr[SUBSI (12, 8)]);
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 13))) {
{
  addr = ADDSI (addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 13)]);
} else {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr_usr[SUBSI (13, 8)]);
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 14))) {
{
  addr = ADDSI (addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 14)]);
} else {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr_usr[SUBSI (14, 8)]);
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
{
  addr = ADDSI (addr, 4);
current_cpu->SETMEMSI (pc, addr, ADDSI (current_cpu->hardware.h_gr[((UINT) 15)], 4));
}
}
}

#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: stmib-wb

  CASE (FRAG_STMIB_WB_MID):
    {
#define FLD(f) abuf->fields.sfmt_ldmda.f
      PCADDR pc = abuf->addr;

{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 8))) {
{
  addr = ADDSI (addr, 4);
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 8)]);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 9))) {
{
  addr = ADDSI (addr, 4);
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 9)]);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 10))) {
{
  addr = ADDSI (addr, 4);
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 10)]);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 11))) {
{
  addr = ADDSI (addr, 4);
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 11)]);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 12))) {
{
  addr = ADDSI (addr, 4);
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 12)]);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 13))) {
{
  addr = ADDSI (addr, 4);
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 13)]);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 14))) {
{
  addr = ADDSI (addr, 4);
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 14)]);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
{
  addr = ADDSI (addr, 4);
current_cpu->SETMEMSI (pc, addr, ADDSI (current_cpu->hardware.h_gr[((UINT) 15)], 4));
}
}
* FLD (i_rn) = addr;
}

#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: stmib-sw-wb

  CASE (FRAG_STMIB_SW_WB_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_ldmda.f
      PCADDR pc = abuf->addr;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  addr = * FLD (i_rn);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 0))) {
{
  addr = ADDSI (addr, 4);
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 0)]);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 1))) {
{
  addr = ADDSI (addr, 4);
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 1)]);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 2))) {
{
  addr = ADDSI (addr, 4);
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 2)]);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 3))) {
{
  addr = ADDSI (addr, 4);
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 3)]);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 4))) {
{
  addr = ADDSI (addr, 4);
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 4)]);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 5))) {
{
  addr = ADDSI (addr, 4);
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 5)]);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 6))) {
{
  addr = ADDSI (addr, 4);
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 6)]);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 7))) {
{
  addr = ADDSI (addr, 4);
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 7)]);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 8))) {
{
  addr = ADDSI (addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 8)]);
} else {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr_usr[SUBSI (8, 8)]);
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 9))) {
{
  addr = ADDSI (addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 9)]);
} else {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr_usr[SUBSI (9, 8)]);
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 10))) {
{
  addr = ADDSI (addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 10)]);
} else {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr_usr[SUBSI (10, 8)]);
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 11))) {
{
  addr = ADDSI (addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 11)]);
} else {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr_usr[SUBSI (11, 8)]);
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 12))) {
{
  addr = ADDSI (addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 12)]);
} else {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr_usr[SUBSI (12, 8)]);
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 13))) {
{
  addr = ADDSI (addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 13)]);
} else {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr_usr[SUBSI (13, 8)]);
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 14))) {
{
  addr = ADDSI (addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 14)]);
} else {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr_usr[SUBSI (14, 8)]);
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
{
  addr = ADDSI (addr, 4);
current_cpu->SETMEMSI (pc, addr, ADDSI (current_cpu->hardware.h_gr[((UINT) 15)], 4));
}
}
* FLD (i_rn) = addr;
}

#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: stmia

  CASE (FRAG_STMIA_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_ldmda.f
      PCADDR pc = abuf->addr;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  addr = * FLD (i_rn);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 0))) {
{
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 0)]);
  addr = ADDSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 1))) {
{
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 1)]);
  addr = ADDSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 2))) {
{
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 2)]);
  addr = ADDSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 3))) {
{
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 3)]);
  addr = ADDSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 4))) {
{
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 4)]);
  addr = ADDSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 5))) {
{
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 5)]);
  addr = ADDSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 6))) {
{
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 6)]);
  addr = ADDSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 7))) {
{
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 7)]);
  addr = ADDSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 8))) {
{
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 8)]);
  addr = ADDSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 9))) {
{
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 9)]);
  addr = ADDSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 10))) {
{
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 10)]);
  addr = ADDSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 11))) {
{
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 11)]);
  addr = ADDSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 12))) {
{
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 12)]);
  addr = ADDSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 13))) {
{
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 13)]);
  addr = ADDSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 14))) {
{
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 14)]);
  addr = ADDSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
{
current_cpu->SETMEMSI (pc, addr, ADDSI (current_cpu->hardware.h_gr[((UINT) 15)], 4));
  addr = ADDSI (addr, 4);
}
}
}

#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: stmia-sw

  CASE (FRAG_STMIA_SW_MID):
    {
#define FLD(f) abuf->fields.sfmt_ldmda.f
      PCADDR pc = abuf->addr;

{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 8))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 8)]);
} else {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr_usr[SUBSI (8, 8)]);
}
  addr = ADDSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 9))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 9)]);
} else {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr_usr[SUBSI (9, 8)]);
}
  addr = ADDSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 10))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 10)]);
} else {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr_usr[SUBSI (10, 8)]);
}
  addr = ADDSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 11))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 11)]);
} else {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr_usr[SUBSI (11, 8)]);
}
  addr = ADDSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 12))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 12)]);
} else {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr_usr[SUBSI (12, 8)]);
}
  addr = ADDSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 13))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 13)]);
} else {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr_usr[SUBSI (13, 8)]);
}
  addr = ADDSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 14))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 14)]);
} else {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr_usr[SUBSI (14, 8)]);
}
  addr = ADDSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
{
current_cpu->SETMEMSI (pc, addr, ADDSI (current_cpu->hardware.h_gr[((UINT) 15)], 4));
  addr = ADDSI (addr, 4);
}
}
}

#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: stmia-wb

  CASE (FRAG_STMIA_WB_MID):
    {
#define FLD(f) abuf->fields.sfmt_ldmda.f
      PCADDR pc = abuf->addr;

{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 8))) {
{
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 8)]);
  addr = ADDSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 9))) {
{
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 9)]);
  addr = ADDSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 10))) {
{
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 10)]);
  addr = ADDSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 11))) {
{
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 11)]);
  addr = ADDSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 12))) {
{
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 12)]);
  addr = ADDSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 13))) {
{
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 13)]);
  addr = ADDSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 14))) {
{
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 14)]);
  addr = ADDSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
{
current_cpu->SETMEMSI (pc, addr, ADDSI (current_cpu->hardware.h_gr[((UINT) 15)], 4));
  addr = ADDSI (addr, 4);
}
}
* FLD (i_rn) = addr;
}

#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: stmia-sw-wb

  CASE (FRAG_STMIA_SW_WB_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_ldmda.f
      PCADDR pc = abuf->addr;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  addr = * FLD (i_rn);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 0))) {
{
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 0)]);
  addr = ADDSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 1))) {
{
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 1)]);
  addr = ADDSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 2))) {
{
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 2)]);
  addr = ADDSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 3))) {
{
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 3)]);
  addr = ADDSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 4))) {
{
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 4)]);
  addr = ADDSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 5))) {
{
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 5)]);
  addr = ADDSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 6))) {
{
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 6)]);
  addr = ADDSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 7))) {
{
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 7)]);
  addr = ADDSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 8))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 8)]);
} else {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr_usr[SUBSI (8, 8)]);
}
  addr = ADDSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 9))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 9)]);
} else {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr_usr[SUBSI (9, 8)]);
}
  addr = ADDSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 10))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 10)]);
} else {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr_usr[SUBSI (10, 8)]);
}
  addr = ADDSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 11))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 11)]);
} else {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr_usr[SUBSI (11, 8)]);
}
  addr = ADDSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 12))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 12)]);
} else {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr_usr[SUBSI (12, 8)]);
}
  addr = ADDSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 13))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 13)]);
} else {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr_usr[SUBSI (13, 8)]);
}
  addr = ADDSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 14))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 14)]);
} else {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr_usr[SUBSI (14, 8)]);
}
  addr = ADDSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
{
current_cpu->SETMEMSI (pc, addr, ADDSI (current_cpu->hardware.h_gr[((UINT) 15)], 4));
  addr = ADDSI (addr, 4);
}
}
* FLD (i_rn) = addr;
}

#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: stmda

  CASE (FRAG_STMDA_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_ldmda.f
      PCADDR pc = abuf->addr;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  addr = * FLD (i_rn);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
{
current_cpu->SETMEMSI (pc, addr, ADDSI (current_cpu->hardware.h_gr[((UINT) 15)], 4));
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 14))) {
{
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 14)]);
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 13))) {
{
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 13)]);
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 12))) {
{
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 12)]);
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 11))) {
{
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 11)]);
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 10))) {
{
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 10)]);
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 9))) {
{
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 9)]);
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 8))) {
{
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 8)]);
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 7))) {
{
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 7)]);
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 6))) {
{
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 6)]);
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 5))) {
{
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 5)]);
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 4))) {
{
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 4)]);
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 3))) {
{
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 3)]);
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 2))) {
{
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 2)]);
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 1))) {
{
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 1)]);
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 0))) {
{
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 0)]);
  addr = SUBSI (addr, 4);
}
}
}

#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: stmda-sw

  CASE (FRAG_STMDA_SW_MID):
    {
#define FLD(f) abuf->fields.sfmt_ldmda.f
      PCADDR pc = abuf->addr;

{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 14))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 14)]);
} else {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr_usr[SUBSI (14, 8)]);
}
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 13))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 13)]);
} else {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr_usr[SUBSI (13, 8)]);
}
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 12))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 12)]);
} else {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr_usr[SUBSI (12, 8)]);
}
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 11))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 11)]);
} else {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr_usr[SUBSI (11, 8)]);
}
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 10))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 10)]);
} else {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr_usr[SUBSI (10, 8)]);
}
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 9))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 9)]);
} else {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr_usr[SUBSI (9, 8)]);
}
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 8))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 8)]);
} else {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr_usr[SUBSI (8, 8)]);
}
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 7))) {
{
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 7)]);
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 6))) {
{
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 6)]);
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 5))) {
{
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 5)]);
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 4))) {
{
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 4)]);
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 3))) {
{
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 3)]);
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 2))) {
{
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 2)]);
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 1))) {
{
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 1)]);
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 0))) {
{
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 0)]);
  addr = SUBSI (addr, 4);
}
}
}

#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: stmda-wb

  CASE (FRAG_STMDA_WB_MID):
    {
#define FLD(f) abuf->fields.sfmt_ldmda.f
      PCADDR pc = abuf->addr;

{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 14))) {
{
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 14)]);
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 13))) {
{
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 13)]);
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 12))) {
{
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 12)]);
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 11))) {
{
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 11)]);
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 10))) {
{
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 10)]);
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 9))) {
{
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 9)]);
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 8))) {
{
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 8)]);
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 7))) {
{
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 7)]);
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 6))) {
{
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 6)]);
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 5))) {
{
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 5)]);
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 4))) {
{
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 4)]);
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 3))) {
{
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 3)]);
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 2))) {
{
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 2)]);
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 1))) {
{
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 1)]);
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 0))) {
{
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 0)]);
  addr = SUBSI (addr, 4);
}
}
* FLD (i_rn) = addr;
}

#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: stmda-sw-wb

  CASE (FRAG_STMDA_SW_WB_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_ldmda.f
      PCADDR pc = abuf->addr;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
  addr = * FLD (i_rn);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
{
current_cpu->SETMEMSI (pc, addr, ADDSI (current_cpu->hardware.h_gr[((UINT) 15)], 4));
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 14))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 14)]);
} else {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr_usr[SUBSI (14, 8)]);
}
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 13))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 13)]);
} else {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr_usr[SUBSI (13, 8)]);
}
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 12))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 12)]);
} else {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr_usr[SUBSI (12, 8)]);
}
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 11))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 11)]);
} else {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr_usr[SUBSI (11, 8)]);
}
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 10))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 10)]);
} else {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr_usr[SUBSI (10, 8)]);
}
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 9))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 9)]);
} else {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr_usr[SUBSI (9, 8)]);
}
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 8))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 8)]);
} else {
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr_usr[SUBSI (8, 8)]);
}
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 7))) {
{
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 7)]);
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 6))) {
{
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 6)]);
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 5))) {
{
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 5)]);
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 4))) {
{
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 4)]);
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 3))) {
{
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 3)]);
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 2))) {
{
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 2)]);
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 1))) {
{
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 1)]);
  addr = SUBSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 0))) {
{
current_cpu->SETMEMSI (pc, addr, current_cpu->hardware.h_gr[((UINT) 0)]);
  addr = SUBSI (addr, 4);
}
}
* FLD (i_rn) = addr;
}

#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: mrs-c

  CASE (FRAG_MRS_C_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_strh_pre_dec_imm_offset.f
      PCADDR pc = abuf->addr;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
* FLD (i_rd) = current_cpu->h_cpsr_get ();
}

#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: mrs-s

  CASE (FRAG_MRS_S_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_strh_pre_dec_imm_offset.f
      PCADDR pc = abuf->addr;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
* FLD (i_rd) = current_cpu->h_spsr_get ();
}

#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: msr-c

  CASE (FRAG_MSR_C_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
      PCADDR pc = abuf->addr;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
current_cpu->h_cpsr_set (* FLD (i_rm));
}

#undef FLD
    }
    NEXT_INSN (vpc, fragpc);

// ********** used only by: msr-s

  CASE (FRAG_MSR_S_MID):
    {
      abuf = vpc;
      vpc = vpc + 1;
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
      PCADDR pc = abuf->addr;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));

{
current_cpu->h_spsr_set (* FLD (i_rm));
}

#undef FLD
    }
    NEXT_INSN (vpc, fragpc);


#ifdef __GNUC__
    end_switch: ;
#else
    default: abort ();
#endif
    }
  }

  // Save vpc for next time.
  current_cpu->arm_engine.set_next_vpc (vpc);
}

@


1.7
log
@Regenerate cgen files, update copyright year.
@
text
@d1329 1
a1329 1
#define FLD(f) abuf->fields.fmt_empty.f
d1966 1
a1966 1
#define FLD(f) abuf->fields.fmt_empty.f
d1981 1
a1981 1
#define FLD(f) abuf->fields.fmt_empty.f
d2005 1
a2005 1
#define FLD(f) abuf->fields.fmt_empty.f
d2024 1
a2024 1
#define FLD(f) abuf->fields.fmt_empty.f
d2043 1
a2043 1
#define FLD(f) abuf->fields.fmt_empty.f
d2067 1
a2067 1
#define FLD(f) abuf->fields.fmt_empty.f
d2091 1
a2091 1
#define FLD(f) abuf->fields.fmt_empty.f
d2110 1
a2110 1
#define FLD(f) abuf->fields.fmt_empty.f
@


1.6
log
@	* cgen-cpu.h: Update for new location of cgen/bitset.h.
	* tracedis.h: Ditto.

Plus update generated files to pick up two cgen changes:
1)
	* desc-cpu.scm (/gen-hash-defines): Remove #include of cgen-bitset.h.
	* sid-cpu.scm (cgen-desc.h): Update location of cgen's bitset.h.
2)
	* utils-sim.scm (/gen-set-itype-and-extract): New function.
	(/gen-bracketed-set-itype-and-extract): New function.
	(/gen-decode-default-entry): Rewrite.
	(/table-guts-to-mask, /all-opcode-bits-used?): New functions.
	(/gen-decode-insn-entry): New arg table-guts-thus-far, all callers
	updated.  Don't unnecessarily emit check for whether all opcode bits
	have been examined.
	(/gen-decode-expr-set-itype): Delete.
	(/gen-decode-expr-entry): Update.
	(/gen-decode-table-entry): New arg table-guts-thus-far, all callers
	updated.  Keep track of decoder tables used thus far.
	(/gen-decoder-switch): Ditto.
@
text
@d5 1
a5 1
Copyright (C) 2000-2009 Red Hat, Inc.
@


1.5
log
@Regenerate cgen files (not due to any recent changes, just want to
establish a reference point).
@
text
@d5 1
a5 1
Copyright (C) 2000, 2001, 2002, 2003 Red Hat, Inc.
d928 1
a928 1
if (((FLD (f_rd)) == (15))) {
d951 1
a951 1
if (((FLD (f_reg_list)) & (((1) << (15))))) {
d975 1
a975 1
if (((FLD (f_reg_list)) & (((1) << (0))))) {
d981 1
a981 1
if (((FLD (f_reg_list)) & (((1) << (1))))) {
d987 1
a987 1
if (((FLD (f_reg_list)) & (((1) << (2))))) {
d993 1
a993 1
if (((FLD (f_reg_list)) & (((1) << (3))))) {
d999 1
a999 1
if (((FLD (f_reg_list)) & (((1) << (4))))) {
d1005 1
a1005 1
if (((FLD (f_reg_list)) & (((1) << (5))))) {
d1011 1
a1011 1
if (((FLD (f_reg_list)) & (((1) << (6))))) {
d1017 1
a1017 1
if (((FLD (f_reg_list)) & (((1) << (7))))) {
d1041 1
a1041 1
if (((FLD (f_reg_list)) & (((1) << (0))))) {
d1047 1
a1047 1
if (((FLD (f_reg_list)) & (((1) << (1))))) {
d1053 1
a1053 1
if (((FLD (f_reg_list)) & (((1) << (2))))) {
d1059 1
a1059 1
if (((FLD (f_reg_list)) & (((1) << (3))))) {
d1065 1
a1065 1
if (((FLD (f_reg_list)) & (((1) << (4))))) {
d1071 1
a1071 1
if (((FLD (f_reg_list)) & (((1) << (5))))) {
d1077 1
a1077 1
if (((FLD (f_reg_list)) & (((1) << (6))))) {
d1083 1
a1083 1
if (((FLD (f_reg_list)) & (((1) << (7))))) {
d1107 1
a1107 1
if (((FLD (f_reg_list)) & (((1) << (15))))) {
d1132 1
a1132 1
if (((FLD (f_reg_list)) & (((1) << (0))))) {
d1138 1
a1138 1
if (((FLD (f_reg_list)) & (((1) << (1))))) {
d1144 1
a1144 1
if (((FLD (f_reg_list)) & (((1) << (2))))) {
d1150 1
a1150 1
if (((FLD (f_reg_list)) & (((1) << (3))))) {
d1156 1
a1156 1
if (((FLD (f_reg_list)) & (((1) << (4))))) {
d1162 1
a1162 1
if (((FLD (f_reg_list)) & (((1) << (5))))) {
d1168 1
a1168 1
if (((FLD (f_reg_list)) & (((1) << (6))))) {
d1174 1
a1174 1
if (((FLD (f_reg_list)) & (((1) << (7))))) {
d1199 1
a1199 1
if (((FLD (f_reg_list)) & (((1) << (0))))) {
d1205 1
a1205 1
if (((FLD (f_reg_list)) & (((1) << (1))))) {
d1211 1
a1211 1
if (((FLD (f_reg_list)) & (((1) << (2))))) {
d1217 1
a1217 1
if (((FLD (f_reg_list)) & (((1) << (3))))) {
d1223 1
a1223 1
if (((FLD (f_reg_list)) & (((1) << (4))))) {
d1229 1
a1229 1
if (((FLD (f_reg_list)) & (((1) << (5))))) {
d1235 1
a1235 1
if (((FLD (f_reg_list)) & (((1) << (6))))) {
d1241 1
a1241 1
if (((FLD (f_reg_list)) & (((1) << (7))))) {
d1287 1
a1287 1
if (((FLD (f_rd)) == (15))) {
d1312 1
a1312 1
if (((FLD (f_rd)) == (15))) {
d1347 1
a1347 4
  {
    SI opval = current_cpu->h_spsr_get ();
    current_cpu->h_cpsr_set (opval);
  }
d1351 2
a1352 8
  {
    BI opval = EQSI (result, 0);
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (result, 0);
    current_cpu->hardware.h_nbit = opval;
  }
d1354 1
a1354 4
  {
    BI opval = carry_out;
    current_cpu->hardware.h_cbit = opval;
  }
d1372 1
a1372 4
  {
    SI opval = current_cpu->h_spsr_get ();
    current_cpu->h_cpsr_set (opval);
  }
d1376 2
a1377 8
  {
    BI opval = EQSI (result, 0);
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (result, 0);
    current_cpu->hardware.h_nbit = opval;
  }
d1379 1
a1379 4
  {
    BI opval = carry_out;
    current_cpu->hardware.h_cbit = opval;
  }
d1396 1
a1396 1
if (((FLD (f_rd)) == (15))) {
d1430 1
a1430 1
if (((FLD (f_rd)) == (15))) {
d1467 1
a1467 1
if (((FLD (f_rd)) == (15))) {
d1629 1
a1629 4
  {
    USI opval = current_cpu->GETMEMSI (pc, addr);
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
d1631 1
a1631 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    * FLD (i_rd) = opval;
  }
d1652 1
a1652 4
  {
    USI opval = current_cpu->GETMEMSI (pc, addr);
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
d1654 1
a1654 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    * FLD (i_rd) = opval;
  }
d1777 1
a1777 4
  {
    USI opval = current_cpu->GETMEMSI (pc, addr);
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
d1779 1
a1779 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    * FLD (i_rd) = opval;
  }
d1782 1
a1782 4
  {
    SI opval = addr;
    * FLD (i_rn) = opval;
  }
d1800 1
a1800 4
  {
    USI opval = current_cpu->GETMEMSI (pc, addr);
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
d1802 1
a1802 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    * FLD (i_rd) = opval;
  }
d1805 1
a1805 4
  {
    SI opval = addr;
    * FLD (i_rn) = opval;
  }
d1856 1
a1856 4
  {
    SI opval = * FLD (i_rd);
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d1858 1
a1858 4
  {
    SI opval = addr;
    * FLD (i_rn) = opval;
  }
d1873 1
a1873 1
if (((FLD (f_rd)) == (15))) {
d1930 1
a1930 4
  {
    SI opval = * FLD (i_rd);
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d1932 1
a1932 4
  {
    SI opval = addr;
    * FLD (i_rn) = opval;
  }
d1947 1
a1947 1
if (((FLD (f_rd)) == (15))) {
d2137 1
a2137 4
  {
    USI opval = FLD (i_offset24);
    npc = opval; br_status = BRANCH_CACHEABLE;
  }
d2158 2
a2159 8
  {
    SI opval = ANDSI (ADDSI (pc, 4), -4);
    current_cpu->hardware.h_gr[((UINT) 14)] = opval;
  }
  {
    USI opval = FLD (i_offset24);
    npc = opval; br_status = BRANCH_CACHEABLE;
  }
d2180 1
a2180 4
  {
    USI opval = ANDSI (* FLD (i_bx_rn), 0xfffffffe);
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
d2182 1
a2182 4
  {
    BI opval = 1;
    current_cpu->h_tbit_set (opval);
  }
d2207 1
a2207 4
  {
    USI opval = current_cpu->GETMEMSI (pc, addr);
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
d2209 1
a2209 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    * FLD (i_rd) = opval;
  }
d2212 1
a2212 4
  {
    SI opval = addr;
    * FLD (i_rn) = opval;
  }
d2236 1
a2236 4
  {
    USI opval = current_cpu->GETMEMSI (pc, addr);
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
d2238 1
a2238 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    * FLD (i_rd) = opval;
  }
d2241 1
a2241 4
  {
    SI opval = addr;
    * FLD (i_rn) = opval;
  }
d2259 1
a2259 4
  {
    SI opval = addr;
    * FLD (i_rn) = opval;
  }
d2277 1
a2277 4
  {
    SI opval = addr;
    * FLD (i_rn) = opval;
  }
d2295 1
a2295 4
  {
    SI opval = addr;
    * FLD (i_rn) = opval;
  }
d2313 1
a2313 4
  {
    SI opval = addr;
    * FLD (i_rn) = opval;
  }
d2337 1
a2337 4
  {
    USI opval = current_cpu->GETMEMSI (pc, addr);
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
d2339 1
a2339 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    * FLD (i_rd) = opval;
  }
d2342 1
a2342 4
  {
    SI opval = addr;
    * FLD (i_rn) = opval;
  }
d2360 1
a2360 4
  {
    USI opval = current_cpu->GETMEMSI (pc, addr);
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
d2362 1
a2362 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    * FLD (i_rd) = opval;
  }
d2365 1
a2365 4
  {
    SI opval = addr;
    * FLD (i_rn) = opval;
  }
d2404 1
a2404 4
  {
    USI opval = current_cpu->GETMEMSI (pc, addr);
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
d2406 1
a2406 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    * FLD (i_rd) = opval;
  }
d2433 1
a2433 4
  {
    USI opval = current_cpu->GETMEMSI (pc, addr);
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
d2435 1
a2435 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    * FLD (i_rd) = opval;
  }
d2488 1
a2488 4
  {
    USI opval = current_cpu->GETMEMSI (pc, addr);
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
d2490 1
a2490 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    * FLD (i_rd) = opval;
  }
d2493 1
a2493 4
  {
    SI opval = addr;
    * FLD (i_rn) = opval;
  }
d2517 1
a2517 4
  {
    USI opval = current_cpu->GETMEMSI (pc, addr);
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
d2519 1
a2519 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    * FLD (i_rd) = opval;
  }
d2557 1
a2557 4
  {
    USI opval = ZEXTQISI (current_cpu->GETMEMQI (pc, addr));
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
d2559 1
a2559 4
  {
    SI opval = ZEXTQISI (current_cpu->GETMEMQI (pc, addr));
    * FLD (i_rd) = opval;
  }
d2562 1
a2562 4
  {
    SI opval = addr;
    * FLD (i_rn) = opval;
  }
d2580 1
a2580 4
  {
    SI opval = addr;
    * FLD (i_rn) = opval;
  }
d2598 1
a2598 4
  {
    SI opval = addr;
    * FLD (i_rn) = opval;
  }
d2622 1
a2622 4
  {
    USI opval = ZEXTQISI (current_cpu->GETMEMQI (pc, addr));
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
d2624 1
a2624 4
  {
    SI opval = ZEXTQISI (current_cpu->GETMEMQI (pc, addr));
    * FLD (i_rd) = opval;
  }
d2627 1
a2627 4
  {
    SI opval = addr;
    * FLD (i_rn) = opval;
  }
d2651 1
a2651 4
  {
    USI opval = ZEXTQISI (current_cpu->GETMEMQI (pc, addr));
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
d2653 1
a2653 4
  {
    SI opval = ZEXTQISI (current_cpu->GETMEMQI (pc, addr));
    * FLD (i_rd) = opval;
  }
d2671 1
a2671 4
  {
    USI opval = ZEXTQISI (current_cpu->GETMEMQI (pc, addr));
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
d2673 1
a2673 4
  {
    SI opval = ZEXTQISI (current_cpu->GETMEMQI (pc, addr));
    * FLD (i_rd) = opval;
  }
d2696 1
a2696 4
  {
    USI opval = ZEXTQISI (current_cpu->GETMEMQI (pc, addr));
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
d2698 1
a2698 4
  {
    SI opval = ZEXTQISI (current_cpu->GETMEMQI (pc, addr));
    * FLD (i_rd) = opval;
  }
d2716 1
a2716 4
  {
    USI opval = ZEXTQISI (current_cpu->GETMEMQI (pc, addr));
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
d2718 1
a2718 4
  {
    SI opval = ZEXTQISI (current_cpu->GETMEMQI (pc, addr));
    * FLD (i_rd) = opval;
  }
d2741 1
a2741 4
  {
    USI opval = ZEXTQISI (current_cpu->GETMEMQI (pc, addr));
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
d2743 1
a2743 4
  {
    SI opval = ZEXTQISI (current_cpu->GETMEMQI (pc, addr));
    * FLD (i_rd) = opval;
  }
d2761 1
a2761 4
  {
    USI opval = ZEXTQISI (current_cpu->GETMEMQI (pc, addr));
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
d2763 1
a2763 4
  {
    SI opval = ZEXTQISI (current_cpu->GETMEMQI (pc, addr));
    * FLD (i_rd) = opval;
  }
d2786 1
a2786 4
  {
    USI opval = ZEXTQISI (current_cpu->GETMEMQI (pc, addr));
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
d2788 1
a2788 4
  {
    SI opval = ZEXTQISI (current_cpu->GETMEMQI (pc, addr));
    * FLD (i_rd) = opval;
  }
d2806 1
a2806 4
  {
    USI opval = ZEXTQISI (current_cpu->GETMEMQI (pc, addr));
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
d2808 1
a2808 4
  {
    SI opval = ZEXTQISI (current_cpu->GETMEMQI (pc, addr));
    * FLD (i_rd) = opval;
  }
d2867 1
a2867 4
  {
    SI opval = * FLD (i_rd);
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d2869 1
a2869 4
  {
    SI opval = addr;
    * FLD (i_rn) = opval;
  }
d2889 1
a2889 4
  {
    SI opval = * FLD (i_rd);
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d2891 1
a2891 4
  {
    SI opval = addr;
    * FLD (i_rn) = opval;
  }
d2911 1
a2911 4
  {
    SI opval = * FLD (i_rd);
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d2927 1
a2927 4
  {
    SI opval = * FLD (i_rd);
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d2947 1
a2947 4
  {
    SI opval = * FLD (i_rd);
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d2963 1
a2963 4
  {
    SI opval = * FLD (i_rd);
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d2983 1
a2983 4
  {
    SI opval = * FLD (i_rd);
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d2999 1
a2999 4
  {
    SI opval = * FLD (i_rd);
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d3019 1
a3019 4
  {
    SI opval = * FLD (i_rd);
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d3035 1
a3035 4
  {
    SI opval = * FLD (i_rd);
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d3055 1
a3055 4
  {
    QI opval = TRUNCSIQI (* FLD (i_rd));
    current_cpu->SETMEMQI (pc, addr, opval);
  }
d3057 1
a3057 4
  {
    SI opval = addr;
    * FLD (i_rn) = opval;
  }
d3073 1
a3073 4
  {
    SI opval = addr;
    * FLD (i_rn) = opval;
  }
d3089 1
a3089 4
  {
    SI opval = addr;
    * FLD (i_rn) = opval;
  }
d3109 1
a3109 4
  {
    QI opval = TRUNCSIQI (* FLD (i_rd));
    current_cpu->SETMEMQI (pc, addr, opval);
  }
d3111 1
a3111 4
  {
    SI opval = addr;
    * FLD (i_rn) = opval;
  }
d3146 1
a3146 4
  {
    QI opval = TRUNCSIQI (* FLD (i_rd));
    current_cpu->SETMEMQI (pc, addr, opval);
  }
d3162 1
a3162 4
  {
    QI opval = TRUNCSIQI (* FLD (i_rd));
    current_cpu->SETMEMQI (pc, addr, opval);
  }
d3182 1
a3182 4
  {
    QI opval = TRUNCSIQI (* FLD (i_rd));
    current_cpu->SETMEMQI (pc, addr, opval);
  }
d3202 1
a3202 4
  {
    QI opval = TRUNCSIQI (* FLD (i_rd));
    current_cpu->SETMEMQI (pc, addr, opval);
  }
d3222 1
a3222 4
  {
    QI opval = TRUNCSIQI (* FLD (i_rd));
    current_cpu->SETMEMQI (pc, addr, opval);
  }
d3238 1
a3238 4
  {
    QI opval = TRUNCSIQI (* FLD (i_rd));
    current_cpu->SETMEMQI (pc, addr, opval);
  }
d3258 1
a3258 4
  {
    QI opval = TRUNCSIQI (* FLD (i_rd));
    current_cpu->SETMEMQI (pc, addr, opval);
  }
d3274 1
a3274 4
  {
    QI opval = TRUNCSIQI (* FLD (i_rd));
    current_cpu->SETMEMQI (pc, addr, opval);
  }
d3294 1
a3294 4
  {
    HI opval = TRUNCSIHI (* FLD (i_rd));
    current_cpu->SETMEMHI (pc, addr, opval);
  }
d3314 1
a3314 4
  {
    HI opval = TRUNCSIHI (* FLD (i_rd));
    current_cpu->SETMEMHI (pc, addr, opval);
  }
d3334 1
a3334 4
  {
    HI opval = TRUNCSIHI (* FLD (i_rd));
    current_cpu->SETMEMHI (pc, addr, opval);
  }
d3354 1
a3354 4
  {
    HI opval = TRUNCSIHI (* FLD (i_rd));
    current_cpu->SETMEMHI (pc, addr, opval);
  }
d3374 1
a3374 4
  {
    HI opval = TRUNCSIHI (* FLD (i_rd));
    current_cpu->SETMEMHI (pc, addr, opval);
  }
d3394 1
a3394 4
  {
    HI opval = TRUNCSIHI (* FLD (i_rd));
    current_cpu->SETMEMHI (pc, addr, opval);
  }
d3414 1
a3414 4
  {
    HI opval = TRUNCSIHI (* FLD (i_rd));
    current_cpu->SETMEMHI (pc, addr, opval);
  }
d3434 1
a3434 4
  {
    HI opval = TRUNCSIHI (* FLD (i_rd));
    current_cpu->SETMEMHI (pc, addr, opval);
  }
d3454 1
a3454 4
  {
    HI opval = TRUNCSIHI (* FLD (i_rd));
    current_cpu->SETMEMHI (pc, addr, opval);
  }
d3456 1
a3456 4
  {
    SI opval = addr;
    * FLD (i_rn) = opval;
  }
d3476 1
a3476 4
  {
    HI opval = TRUNCSIHI (* FLD (i_rd));
    current_cpu->SETMEMHI (pc, addr, opval);
  }
d3478 1
a3478 4
  {
    SI opval = addr;
    * FLD (i_rn) = opval;
  }
d3498 1
a3498 4
  {
    HI opval = TRUNCSIHI (* FLD (i_rd));
    current_cpu->SETMEMHI (pc, addr, opval);
  }
d3500 1
a3500 4
  {
    SI opval = addr;
    * FLD (i_rn) = opval;
  }
d3520 1
a3520 4
  {
    HI opval = TRUNCSIHI (* FLD (i_rd));
    current_cpu->SETMEMHI (pc, addr, opval);
  }
d3522 1
a3522 4
  {
    SI opval = addr;
    * FLD (i_rn) = opval;
  }
d3544 1
a3544 4
  {
    USI opval = EXTQISI (current_cpu->GETMEMQI (pc, addr));
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
d3546 1
a3546 4
  {
    SI opval = EXTQISI (current_cpu->GETMEMQI (pc, addr));
    * FLD (i_rd) = opval;
  }
d3569 1
a3569 4
  {
    USI opval = EXTQISI (current_cpu->GETMEMQI (pc, addr));
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
d3571 1
a3571 4
  {
    SI opval = EXTQISI (current_cpu->GETMEMQI (pc, addr));
    * FLD (i_rd) = opval;
  }
d3594 1
a3594 4
  {
    USI opval = EXTQISI (current_cpu->GETMEMQI (pc, addr));
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
d3596 1
a3596 4
  {
    SI opval = EXTQISI (current_cpu->GETMEMQI (pc, addr));
    * FLD (i_rd) = opval;
  }
d3619 1
a3619 4
  {
    USI opval = EXTQISI (current_cpu->GETMEMQI (pc, addr));
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
d3621 1
a3621 4
  {
    SI opval = EXTQISI (current_cpu->GETMEMQI (pc, addr));
    * FLD (i_rd) = opval;
  }
d3644 1
a3644 4
  {
    USI opval = EXTQISI (current_cpu->GETMEMQI (pc, addr));
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
d3646 1
a3646 4
  {
    SI opval = EXTQISI (current_cpu->GETMEMQI (pc, addr));
    * FLD (i_rd) = opval;
  }
d3669 1
a3669 4
  {
    USI opval = EXTQISI (current_cpu->GETMEMQI (pc, addr));
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
d3671 1
a3671 4
  {
    SI opval = EXTQISI (current_cpu->GETMEMQI (pc, addr));
    * FLD (i_rd) = opval;
  }
d3694 1
a3694 4
  {
    USI opval = EXTQISI (current_cpu->GETMEMQI (pc, addr));
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
d3696 1
a3696 4
  {
    SI opval = EXTQISI (current_cpu->GETMEMQI (pc, addr));
    * FLD (i_rd) = opval;
  }
d3719 1
a3719 4
  {
    USI opval = EXTQISI (current_cpu->GETMEMQI (pc, addr));
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
d3721 1
a3721 4
  {
    SI opval = EXTQISI (current_cpu->GETMEMQI (pc, addr));
    * FLD (i_rd) = opval;
  }
d3744 1
a3744 4
  {
    USI opval = EXTQISI (current_cpu->GETMEMQI (pc, addr));
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
d3746 1
a3746 4
  {
    SI opval = EXTQISI (current_cpu->GETMEMQI (pc, addr));
    * FLD (i_rd) = opval;
  }
d3749 1
a3749 4
  {
    SI opval = addr;
    * FLD (i_rn) = opval;
  }
d3773 1
a3773 4
  {
    USI opval = EXTQISI (current_cpu->GETMEMQI (pc, addr));
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
d3775 1
a3775 4
  {
    SI opval = EXTQISI (current_cpu->GETMEMQI (pc, addr));
    * FLD (i_rd) = opval;
  }
d3778 1
a3778 4
  {
    SI opval = addr;
    * FLD (i_rn) = opval;
  }
d3802 1
a3802 4
  {
    USI opval = EXTQISI (current_cpu->GETMEMQI (pc, addr));
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
d3804 1
a3804 4
  {
    SI opval = EXTQISI (current_cpu->GETMEMQI (pc, addr));
    * FLD (i_rd) = opval;
  }
d3807 1
a3807 4
  {
    SI opval = addr;
    * FLD (i_rn) = opval;
  }
d3831 1
a3831 4
  {
    USI opval = EXTQISI (current_cpu->GETMEMQI (pc, addr));
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
d3833 1
a3833 4
  {
    SI opval = EXTQISI (current_cpu->GETMEMQI (pc, addr));
    * FLD (i_rd) = opval;
  }
d3836 1
a3836 4
  {
    SI opval = addr;
    * FLD (i_rn) = opval;
  }
d3860 1
a3860 4
  {
    USI opval = ZEXTHISI (current_cpu->GETMEMHI (pc, addr));
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
d3862 1
a3862 4
  {
    SI opval = ZEXTHISI (current_cpu->GETMEMHI (pc, addr));
    * FLD (i_rd) = opval;
  }
d3885 1
a3885 4
  {
    USI opval = ZEXTHISI (current_cpu->GETMEMHI (pc, addr));
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
d3887 1
a3887 4
  {
    SI opval = ZEXTHISI (current_cpu->GETMEMHI (pc, addr));
    * FLD (i_rd) = opval;
  }
d3910 1
a3910 4
  {
    USI opval = ZEXTHISI (current_cpu->GETMEMHI (pc, addr));
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
d3912 1
a3912 4
  {
    SI opval = ZEXTHISI (current_cpu->GETMEMHI (pc, addr));
    * FLD (i_rd) = opval;
  }
d3935 1
a3935 4
  {
    USI opval = ZEXTHISI (current_cpu->GETMEMHI (pc, addr));
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
d3937 1
a3937 4
  {
    SI opval = ZEXTHISI (current_cpu->GETMEMHI (pc, addr));
    * FLD (i_rd) = opval;
  }
d3960 1
a3960 4
  {
    USI opval = ZEXTHISI (current_cpu->GETMEMHI (pc, addr));
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
d3962 1
a3962 4
  {
    SI opval = ZEXTHISI (current_cpu->GETMEMHI (pc, addr));
    * FLD (i_rd) = opval;
  }
d3985 1
a3985 4
  {
    USI opval = ZEXTHISI (current_cpu->GETMEMHI (pc, addr));
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
d3987 1
a3987 4
  {
    SI opval = ZEXTHISI (current_cpu->GETMEMHI (pc, addr));
    * FLD (i_rd) = opval;
  }
d4010 1
a4010 4
  {
    USI opval = ZEXTHISI (current_cpu->GETMEMHI (pc, addr));
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
d4012 1
a4012 4
  {
    SI opval = ZEXTHISI (current_cpu->GETMEMHI (pc, addr));
    * FLD (i_rd) = opval;
  }
d4035 1
a4035 4
  {
    USI opval = ZEXTHISI (current_cpu->GETMEMHI (pc, addr));
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
d4037 1
a4037 4
  {
    SI opval = ZEXTHISI (current_cpu->GETMEMHI (pc, addr));
    * FLD (i_rd) = opval;
  }
d4060 1
a4060 4
  {
    USI opval = ZEXTHISI (current_cpu->GETMEMHI (pc, addr));
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
d4062 1
a4062 4
  {
    SI opval = ZEXTHISI (current_cpu->GETMEMHI (pc, addr));
    * FLD (i_rd) = opval;
  }
d4065 1
a4065 4
  {
    SI opval = addr;
    * FLD (i_rn) = opval;
  }
d4089 1
a4089 4
  {
    USI opval = ZEXTHISI (current_cpu->GETMEMHI (pc, addr));
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
d4091 1
a4091 4
  {
    SI opval = ZEXTHISI (current_cpu->GETMEMHI (pc, addr));
    * FLD (i_rd) = opval;
  }
d4094 1
a4094 4
  {
    SI opval = addr;
    * FLD (i_rn) = opval;
  }
d4118 1
a4118 4
  {
    USI opval = ZEXTHISI (current_cpu->GETMEMHI (pc, addr));
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
d4120 1
a4120 4
  {
    SI opval = ZEXTHISI (current_cpu->GETMEMHI (pc, addr));
    * FLD (i_rd) = opval;
  }
d4123 1
a4123 4
  {
    SI opval = addr;
    * FLD (i_rn) = opval;
  }
d4147 1
a4147 4
  {
    USI opval = ZEXTHISI (current_cpu->GETMEMHI (pc, addr));
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
d4149 1
a4149 4
  {
    SI opval = ZEXTHISI (current_cpu->GETMEMHI (pc, addr));
    * FLD (i_rd) = opval;
  }
d4152 1
a4152 4
  {
    SI opval = addr;
    * FLD (i_rn) = opval;
  }
d4176 1
a4176 4
  {
    USI opval = EXTHISI (current_cpu->GETMEMHI (pc, addr));
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
d4178 1
a4178 4
  {
    SI opval = EXTHISI (current_cpu->GETMEMHI (pc, addr));
    * FLD (i_rd) = opval;
  }
d4201 1
a4201 4
  {
    USI opval = EXTHISI (current_cpu->GETMEMHI (pc, addr));
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
d4203 1
a4203 4
  {
    SI opval = EXTHISI (current_cpu->GETMEMHI (pc, addr));
    * FLD (i_rd) = opval;
  }
d4226 1
a4226 4
  {
    USI opval = EXTHISI (current_cpu->GETMEMHI (pc, addr));
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
d4228 1
a4228 4
  {
    SI opval = EXTHISI (current_cpu->GETMEMHI (pc, addr));
    * FLD (i_rd) = opval;
  }
d4251 3
a4253 9
  {
    USI opval = EXTHISI (current_cpu->GETMEMHI (pc, addr));
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
} else {
  {
    SI opval = EXTHISI (current_cpu->GETMEMHI (pc, addr));
    * FLD (i_rd) = opval;
  }
d4280 1
a4280 4
  {
    USI opval = EXTHISI (current_cpu->GETMEMHI (pc, addr));
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
d4282 1
a4282 4
  {
    SI opval = EXTHISI (current_cpu->GETMEMHI (pc, addr));
    * FLD (i_rd) = opval;
  }
d4305 1
a4305 4
  {
    USI opval = EXTHISI (current_cpu->GETMEMHI (pc, addr));
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
d4307 1
a4307 4
  {
    SI opval = EXTHISI (current_cpu->GETMEMHI (pc, addr));
    * FLD (i_rd) = opval;
  }
d4330 1
a4330 4
  {
    USI opval = EXTHISI (current_cpu->GETMEMHI (pc, addr));
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
d4332 1
a4332 4
  {
    SI opval = EXTHISI (current_cpu->GETMEMHI (pc, addr));
    * FLD (i_rd) = opval;
  }
d4355 1
a4355 4
  {
    USI opval = EXTHISI (current_cpu->GETMEMHI (pc, addr));
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
d4357 1
a4357 4
  {
    SI opval = EXTHISI (current_cpu->GETMEMHI (pc, addr));
    * FLD (i_rd) = opval;
  }
d4360 1
a4360 4
  {
    SI opval = addr;
    * FLD (i_rn) = opval;
  }
d4384 1
a4384 4
  {
    USI opval = EXTHISI (current_cpu->GETMEMHI (pc, addr));
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
d4386 1
a4386 4
  {
    SI opval = EXTHISI (current_cpu->GETMEMHI (pc, addr));
    * FLD (i_rd) = opval;
  }
d4389 1
a4389 4
  {
    SI opval = addr;
    * FLD (i_rn) = opval;
  }
d4413 1
a4413 4
  {
    USI opval = EXTHISI (current_cpu->GETMEMHI (pc, addr));
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
d4415 1
a4415 4
  {
    SI opval = EXTHISI (current_cpu->GETMEMHI (pc, addr));
    * FLD (i_rd) = opval;
  }
d4418 1
a4418 4
  {
    SI opval = addr;
    * FLD (i_rn) = opval;
  }
d4442 1
a4442 4
  {
    USI opval = EXTHISI (current_cpu->GETMEMHI (pc, addr));
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
d4444 1
a4444 4
  {
    SI opval = EXTHISI (current_cpu->GETMEMHI (pc, addr));
    * FLD (i_rd) = opval;
  }
d4447 1
a4447 4
  {
    SI opval = addr;
    * FLD (i_rn) = opval;
  }
d4471 1
a4471 4
  {
    USI opval = EXTHISI (current_cpu->GETMEMHI (pc, addr));
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
d4473 1
a4473 4
  {
    SI opval = EXTHISI (current_cpu->GETMEMHI (pc, addr));
    * FLD (i_rd) = opval;
  }
d4476 1
a4476 4
  {
    SI opval = addr;
    * FLD (i_rn) = opval;
  }
d4497 1
a4497 4
  {
    SI opval = result;
    * FLD (i_mul_rd) = opval;
  }
d4500 2
a4501 8
  {
    BI opval = EQSI (result, 0);
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (result, 0);
    current_cpu->hardware.h_nbit = opval;
  }
d4521 1
a4521 4
  {
    SI opval = ADDSI (MULSI (* FLD (i_rm), * FLD (i_rs)), * FLD (i_mul_rn));
    * FLD (i_mul_rd) = opval;
  }
d4524 2
a4525 8
  {
    BI opval = EQSI (result, 0);
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (result, 0);
    current_cpu->hardware.h_nbit = opval;
  }
d4602 2
a4603 8
  {
    SI opval = SUBWORDDISI (mul_result, 0);
    * FLD (i_rdhi) = opval;
  }
  {
    SI opval = SUBWORDDISI (mul_result, 1);
    * FLD (i_rdlo) = opval;
  }
d4606 2
a4607 8
  {
    BI opval = EQDI (mul_result, 0);
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTDI (mul_result, 0);
    current_cpu->hardware.h_nbit = opval;
  }
d4628 2
a4629 8
  {
    SI opval = * FLD (i_rm);
    current_cpu->SETMEMSI (pc, * FLD (i_rn), opval);
  }
  {
    SI opval = temp;
    * FLD (i_rd) = opval;
  }
d4648 2
a4649 8
  {
    QI opval = * FLD (i_rm);
    current_cpu->SETMEMQI (pc, * FLD (i_rn), opval);
  }
  {
    SI opval = temp;
    * FLD (i_rd) = opval;
  }
d4668 1
a4668 4
  {
    USI opval = current_cpu->arm_swi (pc, FLD (f_swi_comment));
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
d4694 1
a4694 4
  {
    USI opval = result;
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
d4696 1
a4696 4
  {
    SI opval = current_cpu->h_spsr_get ();
    current_cpu->h_cpsr_set (opval);
  }
d4701 1
a4701 4
  {
    SI opval = result;
    * FLD (i_rd) = opval;
  }
d4705 2
a4706 8
  {
    BI opval = EQSI (result, 0);
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (result, 0);
    current_cpu->hardware.h_nbit = opval;
  }
d4708 1
a4708 4
  {
    BI opval = carry_out;
    current_cpu->hardware.h_cbit = opval;
  }
d4985 1
a4985 4
  {
    USI opval = result;
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
d4987 1
a4987 4
  {
    SI opval = current_cpu->h_spsr_get ();
    current_cpu->h_cpsr_set (opval);
  }
d4992 1
a4992 4
  {
    SI opval = result;
    * FLD (i_rd) = opval;
  }
d4996 2
a4997 8
  {
    BI opval = EQSI (result, 0);
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (result, 0);
    current_cpu->hardware.h_nbit = opval;
  }
d4999 1
a4999 4
  {
    BI opval = carry_out;
    current_cpu->hardware.h_cbit = opval;
  }
d5027 1
a5027 4
  {
    USI opval = result;
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
d5029 1
a5029 4
  {
    SI opval = current_cpu->h_spsr_get ();
    current_cpu->h_cpsr_set (opval);
  }
d5034 1
a5034 4
  {
    SI opval = result;
    * FLD (i_rd) = opval;
  }
d5037 2
a5038 8
  {
    BI opval = EQSI (result, 0);
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (result, 0);
    current_cpu->hardware.h_nbit = opval;
  }
d5064 1
a5064 4
  {
    USI opval = result;
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
d5066 1
a5066 4
  {
    SI opval = current_cpu->h_spsr_get ();
    current_cpu->h_cpsr_set (opval);
  }
d5071 1
a5071 4
  {
    SI opval = result;
    * FLD (i_rd) = opval;
  }
d5077 2
a5078 8
  {
    BI opval = EQSI (tmp_result, 0);
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    current_cpu->hardware.h_nbit = opval;
  }
d5080 2
a5081 8
  {
    BI opval = ADDCFSI (temp_op1, temp_op2, 0);
    current_cpu->hardware.h_cbit = opval;
  }
  {
    BI opval = ADDOFSI (temp_op1, temp_op2, 0);
    current_cpu->hardware.h_vbit = opval;
  }
d5107 1
a5107 4
  {
    USI opval = result;
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
d5109 1
a5109 4
  {
    SI opval = current_cpu->h_spsr_get ();
    current_cpu->h_cpsr_set (opval);
  }
d5114 1
a5114 4
  {
    SI opval = result;
    * FLD (i_rd) = opval;
  }
d5120 2
a5121 8
  {
    BI opval = EQSI (tmp_result, 0);
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    current_cpu->hardware.h_nbit = opval;
  }
d5123 2
a5124 8
  {
    BI opval = ADDCFSI (temp_op1, temp_op2, 0);
    current_cpu->hardware.h_cbit = opval;
  }
  {
    BI opval = ADDOFSI (temp_op1, temp_op2, 0);
    current_cpu->hardware.h_vbit = opval;
  }
d5153 1
a5153 4
  {
    SI opval = current_cpu->h_spsr_get ();
    current_cpu->h_cpsr_set (opval);
  }
d5155 1
a5155 4
  {
    USI opval = result;
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
d5164 2
a5165 8
  {
    BI opval = EQSI (tmp_result, 0);
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    current_cpu->hardware.h_nbit = opval;
  }
d5167 2
a5168 8
  {
    BI opval = ADDCFSI (* FLD (i_rn), FLD (f_imm12), 0);
    current_cpu->hardware.h_cbit = opval;
  }
  {
    BI opval = ADDOFSI (* FLD (i_rn), FLD (f_imm12), 0);
    current_cpu->hardware.h_vbit = opval;
  }
d5171 1
a5171 4
  {
    SI opval = result;
    * FLD (i_rd) = opval;
  }
d5195 1
a5195 4
  {
    USI opval = result;
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
d5197 1
a5197 4
  {
    SI opval = current_cpu->h_spsr_get ();
    current_cpu->h_cpsr_set (opval);
  }
d5202 1
a5202 4
  {
    SI opval = result;
    * FLD (i_rd) = opval;
  }
d5208 2
a5209 8
  {
    BI opval = EQSI (tmp_result, 0);
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    current_cpu->hardware.h_nbit = opval;
  }
d5211 2
a5212 8
  {
    BI opval = ADDCFSI (temp_op1, temp_op2, current_cpu->hardware.h_cbit);
    current_cpu->hardware.h_cbit = opval;
  }
  {
    BI opval = ADDOFSI (temp_op1, temp_op2, current_cpu->hardware.h_cbit);
    current_cpu->hardware.h_vbit = opval;
  }
d5238 1
a5238 4
  {
    USI opval = result;
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
d5240 1
a5240 4
  {
    SI opval = current_cpu->h_spsr_get ();
    current_cpu->h_cpsr_set (opval);
  }
d5245 1
a5245 4
  {
    SI opval = result;
    * FLD (i_rd) = opval;
  }
d5251 2
a5252 8
  {
    BI opval = EQSI (tmp_result, 0);
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    current_cpu->hardware.h_nbit = opval;
  }
d5254 2
a5255 8
  {
    BI opval = ADDCFSI (temp_op1, temp_op2, current_cpu->hardware.h_cbit);
    current_cpu->hardware.h_cbit = opval;
  }
  {
    BI opval = ADDOFSI (temp_op1, temp_op2, current_cpu->hardware.h_cbit);
    current_cpu->hardware.h_vbit = opval;
  }
d5284 1
a5284 4
  {
    SI opval = current_cpu->h_spsr_get ();
    current_cpu->h_cpsr_set (opval);
  }
d5286 1
a5286 4
  {
    USI opval = result;
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
d5295 2
a5296 8
  {
    BI opval = EQSI (tmp_result, 0);
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    current_cpu->hardware.h_nbit = opval;
  }
d5298 2
a5299 8
  {
    BI opval = ADDCFSI (* FLD (i_rn), FLD (f_imm12), current_cpu->hardware.h_cbit);
    current_cpu->hardware.h_cbit = opval;
  }
  {
    BI opval = ADDOFSI (* FLD (i_rn), FLD (f_imm12), current_cpu->hardware.h_cbit);
    current_cpu->hardware.h_vbit = opval;
  }
d5302 1
a5302 4
  {
    SI opval = result;
    * FLD (i_rd) = opval;
  }
d5326 1
a5326 4
  {
    USI opval = result;
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
d5328 1
a5328 4
  {
    SI opval = current_cpu->h_spsr_get ();
    current_cpu->h_cpsr_set (opval);
  }
d5333 1
a5333 4
  {
    SI opval = result;
    * FLD (i_rd) = opval;
  }
d5339 2
a5340 8
  {
    BI opval = EQSI (tmp_result, 0);
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    current_cpu->hardware.h_nbit = opval;
  }
d5342 2
a5343 8
  {
    BI opval = NOTSI (SUBCFSI (temp_op1, temp_op2, 0));
    current_cpu->hardware.h_cbit = opval;
  }
  {
    BI opval = SUBOFSI (temp_op1, temp_op2, 0);
    current_cpu->hardware.h_vbit = opval;
  }
d5369 1
a5369 4
  {
    USI opval = result;
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
d5371 1
a5371 4
  {
    SI opval = current_cpu->h_spsr_get ();
    current_cpu->h_cpsr_set (opval);
  }
d5376 1
a5376 4
  {
    SI opval = result;
    * FLD (i_rd) = opval;
  }
d5382 2
a5383 8
  {
    BI opval = EQSI (tmp_result, 0);
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    current_cpu->hardware.h_nbit = opval;
  }
d5385 2
a5386 8
  {
    BI opval = NOTSI (SUBCFSI (temp_op1, temp_op2, 0));
    current_cpu->hardware.h_cbit = opval;
  }
  {
    BI opval = SUBOFSI (temp_op1, temp_op2, 0);
    current_cpu->hardware.h_vbit = opval;
  }
d5415 1
a5415 4
  {
    SI opval = current_cpu->h_spsr_get ();
    current_cpu->h_cpsr_set (opval);
  }
d5417 1
a5417 4
  {
    USI opval = result;
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
d5426 2
a5427 8
  {
    BI opval = EQSI (tmp_result, 0);
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    current_cpu->hardware.h_nbit = opval;
  }
d5429 2
a5430 8
  {
    BI opval = NOTSI (SUBCFSI (* FLD (i_rn), FLD (f_imm12), 0));
    current_cpu->hardware.h_cbit = opval;
  }
  {
    BI opval = SUBOFSI (* FLD (i_rn), FLD (f_imm12), 0);
    current_cpu->hardware.h_vbit = opval;
  }
d5433 1
a5433 4
  {
    SI opval = result;
    * FLD (i_rd) = opval;
  }
d5457 1
a5457 4
  {
    USI opval = result;
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
d5459 1
a5459 4
  {
    SI opval = current_cpu->h_spsr_get ();
    current_cpu->h_cpsr_set (opval);
  }
d5464 1
a5464 4
  {
    SI opval = result;
    * FLD (i_rd) = opval;
  }
d5470 2
a5471 8
  {
    BI opval = EQSI (tmp_result, 0);
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    current_cpu->hardware.h_nbit = opval;
  }
d5473 2
a5474 8
  {
    BI opval = NOTSI (SUBCFSI (temp_op1, temp_op2, NOTBI (current_cpu->hardware.h_cbit)));
    current_cpu->hardware.h_cbit = opval;
  }
  {
    BI opval = SUBOFSI (temp_op1, temp_op2, NOTBI (current_cpu->hardware.h_cbit));
    current_cpu->hardware.h_vbit = opval;
  }
d5500 1
a5500 4
  {
    USI opval = result;
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
d5502 1
a5502 4
  {
    SI opval = current_cpu->h_spsr_get ();
    current_cpu->h_cpsr_set (opval);
  }
d5507 1
a5507 4
  {
    SI opval = result;
    * FLD (i_rd) = opval;
  }
d5513 2
a5514 8
  {
    BI opval = EQSI (tmp_result, 0);
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    current_cpu->hardware.h_nbit = opval;
  }
d5516 2
a5517 8
  {
    BI opval = NOTSI (SUBCFSI (temp_op1, temp_op2, NOTBI (current_cpu->hardware.h_cbit)));
    current_cpu->hardware.h_cbit = opval;
  }
  {
    BI opval = SUBOFSI (temp_op1, temp_op2, NOTBI (current_cpu->hardware.h_cbit));
    current_cpu->hardware.h_vbit = opval;
  }
d5546 1
a5546 4
  {
    SI opval = current_cpu->h_spsr_get ();
    current_cpu->h_cpsr_set (opval);
  }
d5548 1
a5548 4
  {
    USI opval = result;
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
d5557 2
a5558 8
  {
    BI opval = EQSI (tmp_result, 0);
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    current_cpu->hardware.h_nbit = opval;
  }
d5560 2
a5561 8
  {
    BI opval = NOTSI (SUBCFSI (* FLD (i_rn), FLD (f_imm12), NOTBI (current_cpu->hardware.h_cbit)));
    current_cpu->hardware.h_cbit = opval;
  }
  {
    BI opval = SUBOFSI (* FLD (i_rn), FLD (f_imm12), NOTBI (current_cpu->hardware.h_cbit));
    current_cpu->hardware.h_vbit = opval;
  }
d5564 1
a5564 4
  {
    SI opval = result;
    * FLD (i_rd) = opval;
  }
d5588 1
a5588 4
  {
    USI opval = result;
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
d5590 1
a5590 4
  {
    SI opval = current_cpu->h_spsr_get ();
    current_cpu->h_cpsr_set (opval);
  }
d5595 1
a5595 4
  {
    SI opval = result;
    * FLD (i_rd) = opval;
  }
d5601 2
a5602 8
  {
    BI opval = EQSI (tmp_result, 0);
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    current_cpu->hardware.h_nbit = opval;
  }
d5604 2
a5605 8
  {
    BI opval = NOTSI (SUBCFSI (temp_op2, temp_op1, 0));
    current_cpu->hardware.h_cbit = opval;
  }
  {
    BI opval = SUBOFSI (temp_op2, temp_op1, 0);
    current_cpu->hardware.h_vbit = opval;
  }
d5631 1
a5631 4
  {
    USI opval = result;
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
d5633 1
a5633 4
  {
    SI opval = current_cpu->h_spsr_get ();
    current_cpu->h_cpsr_set (opval);
  }
d5638 1
a5638 4
  {
    SI opval = result;
    * FLD (i_rd) = opval;
  }
d5644 2
a5645 8
  {
    BI opval = EQSI (tmp_result, 0);
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    current_cpu->hardware.h_nbit = opval;
  }
d5647 2
a5648 8
  {
    BI opval = NOTSI (SUBCFSI (temp_op2, temp_op1, 0));
    current_cpu->hardware.h_cbit = opval;
  }
  {
    BI opval = SUBOFSI (temp_op2, temp_op1, 0);
    current_cpu->hardware.h_vbit = opval;
  }
d5677 1
a5677 4
  {
    SI opval = current_cpu->h_spsr_get ();
    current_cpu->h_cpsr_set (opval);
  }
d5679 1
a5679 4
  {
    USI opval = result;
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
d5688 2
a5689 8
  {
    BI opval = EQSI (tmp_result, 0);
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    current_cpu->hardware.h_nbit = opval;
  }
d5691 2
a5692 8
  {
    BI opval = NOTSI (SUBCFSI (FLD (f_imm12), * FLD (i_rn), 0));
    current_cpu->hardware.h_cbit = opval;
  }
  {
    BI opval = SUBOFSI (FLD (f_imm12), * FLD (i_rn), 0);
    current_cpu->hardware.h_vbit = opval;
  }
d5695 1
a5695 4
  {
    SI opval = result;
    * FLD (i_rd) = opval;
  }
d5719 1
a5719 4
  {
    USI opval = result;
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
d5721 1
a5721 4
  {
    SI opval = current_cpu->h_spsr_get ();
    current_cpu->h_cpsr_set (opval);
  }
d5726 1
a5726 4
  {
    SI opval = result;
    * FLD (i_rd) = opval;
  }
d5732 2
a5733 8
  {
    BI opval = EQSI (tmp_result, 0);
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    current_cpu->hardware.h_nbit = opval;
  }
d5735 2
a5736 8
  {
    BI opval = NOTSI (SUBCFSI (temp_op2, temp_op1, NOTBI (current_cpu->hardware.h_cbit)));
    current_cpu->hardware.h_cbit = opval;
  }
  {
    BI opval = SUBOFSI (temp_op2, temp_op1, NOTBI (current_cpu->hardware.h_cbit));
    current_cpu->hardware.h_vbit = opval;
  }
d5762 1
a5762 4
  {
    USI opval = result;
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
d5764 1
a5764 4
  {
    SI opval = current_cpu->h_spsr_get ();
    current_cpu->h_cpsr_set (opval);
  }
d5769 1
a5769 4
  {
    SI opval = result;
    * FLD (i_rd) = opval;
  }
d5775 2
a5776 8
  {
    BI opval = EQSI (tmp_result, 0);
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    current_cpu->hardware.h_nbit = opval;
  }
d5778 2
a5779 8
  {
    BI opval = NOTSI (SUBCFSI (temp_op2, temp_op1, NOTBI (current_cpu->hardware.h_cbit)));
    current_cpu->hardware.h_cbit = opval;
  }
  {
    BI opval = SUBOFSI (temp_op2, temp_op1, NOTBI (current_cpu->hardware.h_cbit));
    current_cpu->hardware.h_vbit = opval;
  }
d5808 1
a5808 4
  {
    SI opval = current_cpu->h_spsr_get ();
    current_cpu->h_cpsr_set (opval);
  }
d5810 1
a5810 4
  {
    USI opval = result;
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
d5819 2
a5820 8
  {
    BI opval = EQSI (tmp_result, 0);
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    current_cpu->hardware.h_nbit = opval;
  }
d5822 2
a5823 8
  {
    BI opval = NOTSI (SUBCFSI (FLD (f_imm12), * FLD (i_rn), NOTBI (current_cpu->hardware.h_cbit)));
    current_cpu->hardware.h_cbit = opval;
  }
  {
    BI opval = SUBOFSI (FLD (f_imm12), * FLD (i_rn), NOTBI (current_cpu->hardware.h_cbit));
    current_cpu->hardware.h_vbit = opval;
  }
d5826 1
a5826 4
  {
    SI opval = result;
    * FLD (i_rd) = opval;
  }
d5847 1
a5847 4
  {
    SI opval = current_cpu->h_spsr_get ();
    current_cpu->h_cpsr_set (opval);
  }
d5851 2
a5852 8
  {
    BI opval = EQSI (result, 0);
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (result, 0);
    current_cpu->hardware.h_nbit = opval;
  }
d5854 1
a5854 4
  {
    BI opval = carry_out;
    current_cpu->hardware.h_cbit = opval;
  }
d5896 2
a5897 8
  {
    BI opval = EQSI (ANDSI (* FLD (i_rn), FLD (f_ror_imm8)), 0);
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (ANDSI (* FLD (i_rn), FLD (f_ror_imm8)), 0);
    current_cpu->hardware.h_nbit = opval;
  }
d5899 1
a5899 4
  {
    BI opval = carry_out;
    current_cpu->hardware.h_cbit = opval;
  }
d5932 1
a5932 4
  {
    SI opval = current_cpu->h_spsr_get ();
    current_cpu->h_cpsr_set (opval);
  }
d5936 2
a5937 8
  {
    BI opval = EQSI (result, 0);
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (result, 0);
    current_cpu->hardware.h_nbit = opval;
  }
d5939 1
a5939 4
  {
    BI opval = carry_out;
    current_cpu->hardware.h_cbit = opval;
  }
d5966 2
a5967 8
  {
    BI opval = EQSI (XORSI (* FLD (i_rn), FLD (f_ror_imm8)), 0);
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (XORSI (* FLD (i_rn), FLD (f_ror_imm8)), 0);
    current_cpu->hardware.h_nbit = opval;
  }
d5969 1
a5969 4
  {
    BI opval = carry_out;
    current_cpu->hardware.h_cbit = opval;
  }
d5986 1
a5986 4
  {
    SI opval = current_cpu->h_spsr_get ();
    current_cpu->h_cpsr_set (opval);
  }
d5992 2
a5993 8
  {
    BI opval = EQSI (tmp_result, 0);
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    current_cpu->hardware.h_nbit = opval;
  }
d5995 2
a5996 8
  {
    BI opval = NOTSI (SUBCFSI (* FLD (i_rn), operand2, 0));
    current_cpu->hardware.h_cbit = opval;
  }
  {
    BI opval = SUBOFSI (* FLD (i_rn), operand2, 0);
    current_cpu->hardware.h_vbit = opval;
  }
d6014 1
a6014 4
  {
    SI opval = current_cpu->h_spsr_get ();
    current_cpu->h_cpsr_set (opval);
  }
d6020 2
a6021 8
  {
    BI opval = EQSI (tmp_result, 0);
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    current_cpu->hardware.h_nbit = opval;
  }
d6023 2
a6024 8
  {
    BI opval = NOTSI (SUBCFSI (* FLD (i_rn), operand2, 0));
    current_cpu->hardware.h_cbit = opval;
  }
  {
    BI opval = SUBOFSI (* FLD (i_rn), operand2, 0);
    current_cpu->hardware.h_vbit = opval;
  }
d6046 7
a6052 19
  {
    BI opval = EQSI (result, 0);
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (result, 0);
    current_cpu->hardware.h_nbit = opval;
  }
}
  {
    BI opval = NOTSI (SUBCFSI (* FLD (i_rn), FLD (f_imm12), 0));
    current_cpu->hardware.h_cbit = opval;
  }
  {
    BI opval = SUBOFSI (* FLD (i_rn), FLD (f_imm12), 0);
    current_cpu->hardware.h_vbit = opval;
  }
}

d6070 1
a6070 4
  {
    SI opval = current_cpu->h_spsr_get ();
    current_cpu->h_cpsr_set (opval);
  }
d6076 2
a6077 8
  {
    BI opval = EQSI (tmp_result, 0);
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    current_cpu->hardware.h_nbit = opval;
  }
d6079 2
a6080 8
  {
    BI opval = ADDCFSI (* FLD (i_rn), operand2, 0);
    current_cpu->hardware.h_cbit = opval;
  }
  {
    BI opval = ADDOFSI (* FLD (i_rn), operand2, 0);
    current_cpu->hardware.h_vbit = opval;
  }
d6102 1
a6102 4
  {
    SI opval = current_cpu->h_spsr_get ();
    current_cpu->h_cpsr_set (opval);
  }
d6108 2
a6109 8
  {
    BI opval = EQSI (tmp_result, 0);
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    current_cpu->hardware.h_nbit = opval;
  }
d6111 2
a6112 8
  {
    BI opval = ADDCFSI (* FLD (i_rn), operand2, 0);
    current_cpu->hardware.h_cbit = opval;
  }
  {
    BI opval = ADDOFSI (* FLD (i_rn), operand2, 0);
    current_cpu->hardware.h_vbit = opval;
  }
d6134 2
a6135 8
  {
    BI opval = EQSI (result, 0);
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (result, 0);
    current_cpu->hardware.h_nbit = opval;
  }
d6137 2
a6138 8
  {
    BI opval = ADDCFSI (* FLD (i_rn), FLD (f_imm12), 0);
    current_cpu->hardware.h_cbit = opval;
  }
  {
    BI opval = ADDOFSI (* FLD (i_rn), FLD (f_imm12), 0);
    current_cpu->hardware.h_vbit = opval;
  }
d6160 1
a6160 4
  {
    USI opval = current_cpu->GETMEMSI (pc, addr);
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
d6166 1
a6166 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 14)] = opval;
  }
d6172 1
a6172 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 13)] = opval;
  }
d6178 1
a6178 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 12)] = opval;
  }
d6184 1
a6184 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 11)] = opval;
  }
d6190 1
a6190 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 10)] = opval;
  }
d6196 1
a6196 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 9)] = opval;
  }
d6202 1
a6202 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 8)] = opval;
  }
d6208 1
a6208 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 7)] = opval;
  }
d6214 1
a6214 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 6)] = opval;
  }
d6220 1
a6220 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 5)] = opval;
  }
d6226 1
a6226 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 4)] = opval;
  }
d6232 1
a6232 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 3)] = opval;
  }
d6238 1
a6238 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 2)] = opval;
  }
d6244 1
a6244 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 1)] = opval;
  }
d6250 1
a6250 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 0)] = opval;
  }
d6277 1
a6277 4
  {
    USI opval = current_cpu->GETMEMSI (pc, addr);
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
d6279 1
a6279 4
  {
    SI opval = current_cpu->h_spsr_get ();
    current_cpu->h_cpsr_set (opval);
  }
d6285 1
a6285 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 14)] = opval;
  }
d6287 1
a6287 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr_usr[SUBSI (14, 8)] = opval;
  }
d6295 1
a6295 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 13)] = opval;
  }
d6297 1
a6297 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr_usr[SUBSI (13, 8)] = opval;
  }
d6305 1
a6305 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 12)] = opval;
  }
d6307 1
a6307 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr_usr[SUBSI (12, 8)] = opval;
  }
d6315 1
a6315 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 11)] = opval;
  }
d6317 1
a6317 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr_usr[SUBSI (11, 8)] = opval;
  }
d6325 1
a6325 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 10)] = opval;
  }
d6327 1
a6327 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr_usr[SUBSI (10, 8)] = opval;
  }
d6335 1
a6335 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 9)] = opval;
  }
d6337 1
a6337 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr_usr[SUBSI (9, 8)] = opval;
  }
d6345 1
a6345 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 8)] = opval;
  }
d6347 1
a6347 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr_usr[SUBSI (8, 8)] = opval;
  }
d6354 1
a6354 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 7)] = opval;
  }
d6360 1
a6360 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 6)] = opval;
  }
d6366 1
a6366 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 5)] = opval;
  }
d6372 1
a6372 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 4)] = opval;
  }
d6378 1
a6378 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 3)] = opval;
  }
d6384 1
a6384 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 2)] = opval;
  }
d6390 1
a6390 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 1)] = opval;
  }
d6396 1
a6396 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 0)] = opval;
  }
d6423 1
a6423 4
  {
    USI opval = current_cpu->GETMEMSI (pc, addr);
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
d6429 1
a6429 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 14)] = opval;
  }
d6435 1
a6435 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 13)] = opval;
  }
d6441 1
a6441 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 12)] = opval;
  }
d6447 1
a6447 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 11)] = opval;
  }
d6453 1
a6453 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 10)] = opval;
  }
d6459 1
a6459 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 9)] = opval;
  }
d6465 1
a6465 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 8)] = opval;
  }
d6471 1
a6471 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 7)] = opval;
  }
d6477 1
a6477 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 6)] = opval;
  }
d6483 1
a6483 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 5)] = opval;
  }
d6489 1
a6489 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 4)] = opval;
  }
d6495 1
a6495 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 3)] = opval;
  }
d6501 1
a6501 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 2)] = opval;
  }
d6507 1
a6507 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 1)] = opval;
  }
d6513 1
a6513 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 0)] = opval;
  }
d6517 1
a6517 4
  {
    SI opval = addr;
    * FLD (i_rn) = opval;
  }
d6541 1
a6541 4
  {
    USI opval = current_cpu->GETMEMSI (pc, addr);
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
d6543 1
a6543 4
  {
    SI opval = current_cpu->h_spsr_get ();
    current_cpu->h_cpsr_set (opval);
  }
d6549 1
a6549 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 14)] = opval;
  }
d6551 1
a6551 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr_usr[SUBSI (14, 8)] = opval;
  }
d6559 1
a6559 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 13)] = opval;
  }
d6561 1
a6561 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr_usr[SUBSI (13, 8)] = opval;
  }
d6569 1
a6569 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 12)] = opval;
  }
d6571 1
a6571 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr_usr[SUBSI (12, 8)] = opval;
  }
d6579 1
a6579 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 11)] = opval;
  }
d6581 1
a6581 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr_usr[SUBSI (11, 8)] = opval;
  }
d6589 1
a6589 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 10)] = opval;
  }
d6591 1
a6591 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr_usr[SUBSI (10, 8)] = opval;
  }
d6599 1
a6599 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 9)] = opval;
  }
d6601 1
a6601 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr_usr[SUBSI (9, 8)] = opval;
  }
d6609 1
a6609 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 8)] = opval;
  }
d6611 1
a6611 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr_usr[SUBSI (8, 8)] = opval;
  }
d6618 1
a6618 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 7)] = opval;
  }
d6624 1
a6624 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 6)] = opval;
  }
d6630 1
a6630 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 5)] = opval;
  }
d6636 1
a6636 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 4)] = opval;
  }
d6642 1
a6642 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 3)] = opval;
  }
d6648 1
a6648 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 2)] = opval;
  }
d6654 1
a6654 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 1)] = opval;
  }
d6660 1
a6660 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 0)] = opval;
  }
d6664 1
a6664 4
  {
    SI opval = addr;
    * FLD (i_rn) = opval;
  }
d6689 1
a6689 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 0)] = opval;
  }
d6695 1
a6695 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 1)] = opval;
  }
d6701 1
a6701 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 2)] = opval;
  }
d6707 1
a6707 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 3)] = opval;
  }
d6713 1
a6713 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 4)] = opval;
  }
d6719 1
a6719 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 5)] = opval;
  }
d6725 1
a6725 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 6)] = opval;
  }
d6731 1
a6731 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 7)] = opval;
  }
d6737 1
a6737 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 8)] = opval;
  }
d6743 1
a6743 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 9)] = opval;
  }
d6749 1
a6749 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 10)] = opval;
  }
d6755 1
a6755 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 11)] = opval;
  }
d6761 1
a6761 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 12)] = opval;
  }
d6767 1
a6767 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 13)] = opval;
  }
d6773 1
a6773 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 14)] = opval;
  }
d6779 1
a6779 4
  {
    USI opval = current_cpu->GETMEMSI (pc, addr);
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
d6802 1
a6802 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 8)] = opval;
  }
d6804 1
a6804 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr_usr[SUBSI (8, 8)] = opval;
  }
d6812 1
a6812 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 9)] = opval;
  }
d6814 1
a6814 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr_usr[SUBSI (9, 8)] = opval;
  }
d6822 1
a6822 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 10)] = opval;
  }
d6824 1
a6824 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr_usr[SUBSI (10, 8)] = opval;
  }
d6832 1
a6832 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 11)] = opval;
  }
d6834 1
a6834 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr_usr[SUBSI (11, 8)] = opval;
  }
d6842 1
a6842 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 12)] = opval;
  }
d6844 1
a6844 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr_usr[SUBSI (12, 8)] = opval;
  }
d6852 1
a6852 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 13)] = opval;
  }
d6854 1
a6854 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr_usr[SUBSI (13, 8)] = opval;
  }
d6862 1
a6862 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 14)] = opval;
  }
d6864 1
a6864 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr_usr[SUBSI (14, 8)] = opval;
  }
d6871 2
a6872 8
  {
    USI opval = current_cpu->GETMEMSI (pc, addr);
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
  {
    SI opval = current_cpu->h_spsr_get ();
    current_cpu->h_cpsr_set (opval);
  }
d6894 1
a6894 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 8)] = opval;
  }
d6900 1
a6900 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 9)] = opval;
  }
d6906 1
a6906 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 10)] = opval;
  }
d6912 1
a6912 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 11)] = opval;
  }
d6918 1
a6918 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 12)] = opval;
  }
d6924 1
a6924 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 13)] = opval;
  }
d6930 1
a6930 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 14)] = opval;
  }
d6936 1
a6936 4
  {
    USI opval = current_cpu->GETMEMSI (pc, addr);
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
d6939 1
a6939 4
  {
    SI opval = addr;
    * FLD (i_rn) = opval;
  }
d6964 1
a6964 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 0)] = opval;
  }
d6970 1
a6970 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 1)] = opval;
  }
d6976 1
a6976 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 2)] = opval;
  }
d6982 1
a6982 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 3)] = opval;
  }
d6988 1
a6988 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 4)] = opval;
  }
d6994 1
a6994 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 5)] = opval;
  }
d7000 1
a7000 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 6)] = opval;
  }
d7006 1
a7006 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 7)] = opval;
  }
d7013 1
a7013 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 8)] = opval;
  }
d7015 1
a7015 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr_usr[SUBSI (8, 8)] = opval;
  }
d7023 1
a7023 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 9)] = opval;
  }
d7025 1
a7025 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr_usr[SUBSI (9, 8)] = opval;
  }
d7033 1
a7033 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 10)] = opval;
  }
d7035 1
a7035 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr_usr[SUBSI (10, 8)] = opval;
  }
d7043 1
a7043 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 11)] = opval;
  }
d7045 1
a7045 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr_usr[SUBSI (11, 8)] = opval;
  }
d7053 1
a7053 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 12)] = opval;
  }
d7055 1
a7055 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr_usr[SUBSI (12, 8)] = opval;
  }
d7063 1
a7063 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 13)] = opval;
  }
d7065 1
a7065 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr_usr[SUBSI (13, 8)] = opval;
  }
d7073 1
a7073 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 14)] = opval;
  }
d7075 1
a7075 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr_usr[SUBSI (14, 8)] = opval;
  }
d7082 2
a7083 8
  {
    USI opval = current_cpu->GETMEMSI (pc, addr);
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
  {
    SI opval = current_cpu->h_spsr_get ();
    current_cpu->h_cpsr_set (opval);
  }
d7086 1
a7086 4
  {
    SI opval = addr;
    * FLD (i_rn) = opval;
  }
d7110 1
a7110 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 0)] = opval;
  }
d7116 1
a7116 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 1)] = opval;
  }
d7122 1
a7122 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 2)] = opval;
  }
d7128 1
a7128 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 3)] = opval;
  }
d7134 1
a7134 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 4)] = opval;
  }
d7140 1
a7140 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 5)] = opval;
  }
d7146 1
a7146 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 6)] = opval;
  }
d7152 1
a7152 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 7)] = opval;
  }
d7158 1
a7158 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 8)] = opval;
  }
d7164 1
a7164 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 9)] = opval;
  }
d7170 1
a7170 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 10)] = opval;
  }
d7176 1
a7176 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 11)] = opval;
  }
d7182 1
a7182 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 12)] = opval;
  }
d7188 1
a7188 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 13)] = opval;
  }
d7194 1
a7194 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 14)] = opval;
  }
d7200 1
a7200 4
  {
    USI opval = current_cpu->GETMEMSI (pc, addr);
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
d7223 1
a7223 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 8)] = opval;
  }
d7225 1
a7225 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr_usr[SUBSI (8, 8)] = opval;
  }
d7233 1
a7233 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 9)] = opval;
  }
d7235 1
a7235 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr_usr[SUBSI (9, 8)] = opval;
  }
d7243 1
a7243 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 10)] = opval;
  }
d7245 1
a7245 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr_usr[SUBSI (10, 8)] = opval;
  }
d7253 1
a7253 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 11)] = opval;
  }
d7255 1
a7255 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr_usr[SUBSI (11, 8)] = opval;
  }
d7263 1
a7263 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 12)] = opval;
  }
d7265 1
a7265 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr_usr[SUBSI (12, 8)] = opval;
  }
d7273 1
a7273 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 13)] = opval;
  }
d7275 1
a7275 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr_usr[SUBSI (13, 8)] = opval;
  }
d7283 1
a7283 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 14)] = opval;
  }
d7285 1
a7285 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr_usr[SUBSI (14, 8)] = opval;
  }
d7292 1
a7292 4
  {
    USI opval = current_cpu->GETMEMSI (pc, addr);
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
d7294 1
a7294 4
  {
    SI opval = current_cpu->h_spsr_get ();
    current_cpu->h_cpsr_set (opval);
  }
d7315 1
a7315 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 8)] = opval;
  }
d7321 1
a7321 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 9)] = opval;
  }
d7327 1
a7327 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 10)] = opval;
  }
d7333 1
a7333 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 11)] = opval;
  }
d7339 1
a7339 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 12)] = opval;
  }
d7345 1
a7345 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 13)] = opval;
  }
d7351 1
a7351 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 14)] = opval;
  }
d7357 1
a7357 4
  {
    USI opval = current_cpu->GETMEMSI (pc, addr);
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
d7361 1
a7361 4
  {
    SI opval = addr;
    * FLD (i_rn) = opval;
  }
d7385 1
a7385 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 0)] = opval;
  }
d7391 1
a7391 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 1)] = opval;
  }
d7397 1
a7397 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 2)] = opval;
  }
d7403 1
a7403 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 3)] = opval;
  }
d7409 2
a7410 5
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 4)] = opval;
  }
  addr = ADDSI (addr, 4);
d7415 1
a7415 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 5)] = opval;
  }
d7421 1
a7421 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 6)] = opval;
  }
d7427 1
a7427 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 7)] = opval;
  }
d7434 1
a7434 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 8)] = opval;
  }
d7436 1
a7436 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr_usr[SUBSI (8, 8)] = opval;
  }
d7444 1
a7444 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 9)] = opval;
  }
d7446 1
a7446 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr_usr[SUBSI (9, 8)] = opval;
  }
d7454 1
a7454 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 10)] = opval;
  }
d7456 1
a7456 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr_usr[SUBSI (10, 8)] = opval;
  }
d7464 1
a7464 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 11)] = opval;
  }
d7466 1
a7466 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr_usr[SUBSI (11, 8)] = opval;
  }
d7474 1
a7474 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 12)] = opval;
  }
d7476 1
a7476 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr_usr[SUBSI (12, 8)] = opval;
  }
d7484 1
a7484 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 13)] = opval;
  }
d7486 1
a7486 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr_usr[SUBSI (13, 8)] = opval;
  }
d7494 1
a7494 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 14)] = opval;
  }
d7496 1
a7496 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr_usr[SUBSI (14, 8)] = opval;
  }
d7503 1
a7503 4
  {
    USI opval = current_cpu->GETMEMSI (pc, addr);
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
d7505 1
a7505 4
  {
    SI opval = current_cpu->h_spsr_get ();
    current_cpu->h_cpsr_set (opval);
  }
d7508 1
a7508 4
  {
    SI opval = addr;
    * FLD (i_rn) = opval;
  }
d7533 1
a7533 4
  {
    USI opval = current_cpu->GETMEMSI (pc, addr);
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
d7539 1
a7539 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 14)] = opval;
  }
d7545 1
a7545 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 13)] = opval;
  }
d7551 1
a7551 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 12)] = opval;
  }
d7557 1
a7557 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 11)] = opval;
  }
d7563 1
a7563 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 10)] = opval;
  }
d7569 1
a7569 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 9)] = opval;
  }
d7575 1
a7575 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 8)] = opval;
  }
d7581 1
a7581 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 7)] = opval;
  }
d7587 1
a7587 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 6)] = opval;
  }
d7593 1
a7593 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 5)] = opval;
  }
d7599 1
a7599 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 4)] = opval;
  }
d7605 1
a7605 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 3)] = opval;
  }
d7611 1
a7611 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 2)] = opval;
  }
d7617 1
a7617 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 1)] = opval;
  }
d7623 1
a7623 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 0)] = opval;
  }
d7650 2
a7651 8
  {
    USI opval = current_cpu->GETMEMSI (pc, addr);
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
  {
    SI opval = current_cpu->h_spsr_get ();
    current_cpu->h_cpsr_set (opval);
  }
d7658 1
a7658 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 14)] = opval;
  }
d7660 1
a7660 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr_usr[SUBSI (14, 8)] = opval;
  }
d7668 1
a7668 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 13)] = opval;
  }
d7670 1
a7670 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr_usr[SUBSI (13, 8)] = opval;
  }
d7678 1
a7678 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 12)] = opval;
  }
d7680 1
a7680 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr_usr[SUBSI (12, 8)] = opval;
  }
d7688 1
a7688 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 11)] = opval;
  }
d7690 1
a7690 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr_usr[SUBSI (11, 8)] = opval;
  }
d7698 1
a7698 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 10)] = opval;
  }
d7700 1
a7700 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr_usr[SUBSI (10, 8)] = opval;
  }
d7708 1
a7708 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 9)] = opval;
  }
d7710 1
a7710 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr_usr[SUBSI (9, 8)] = opval;
  }
d7718 1
a7718 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 8)] = opval;
  }
d7720 1
a7720 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr_usr[SUBSI (8, 8)] = opval;
  }
d7727 1
a7727 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 7)] = opval;
  }
d7733 1
a7733 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 6)] = opval;
  }
d7739 1
a7739 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 5)] = opval;
  }
d7745 1
a7745 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 4)] = opval;
  }
d7751 1
a7751 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 3)] = opval;
  }
d7757 1
a7757 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 2)] = opval;
  }
d7763 1
a7763 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 1)] = opval;
  }
d7769 1
a7769 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 0)] = opval;
  }
d7796 1
a7796 4
  {
    USI opval = current_cpu->GETMEMSI (pc, addr);
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
d7802 1
a7802 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 14)] = opval;
  }
d7808 1
a7808 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 13)] = opval;
  }
d7814 1
a7814 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 12)] = opval;
  }
d7820 1
a7820 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 11)] = opval;
  }
d7826 1
a7826 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 10)] = opval;
  }
d7832 1
a7832 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 9)] = opval;
  }
d7838 1
a7838 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 8)] = opval;
  }
d7844 1
a7844 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 7)] = opval;
  }
d7850 1
a7850 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 6)] = opval;
  }
d7856 1
a7856 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 5)] = opval;
  }
d7862 1
a7862 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 4)] = opval;
  }
d7868 1
a7868 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 3)] = opval;
  }
d7874 1
a7874 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 2)] = opval;
  }
d7880 1
a7880 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 1)] = opval;
  }
d7886 1
a7886 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 0)] = opval;
  }
d7889 1
a7889 4
  {
    SI opval = addr;
    * FLD (i_rn) = opval;
  }
d7914 2
a7915 8
  {
    USI opval = current_cpu->GETMEMSI (pc, addr);
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
  {
    SI opval = current_cpu->h_spsr_get ();
    current_cpu->h_cpsr_set (opval);
  }
d7922 1
a7922 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 14)] = opval;
  }
d7924 1
a7924 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr_usr[SUBSI (14, 8)] = opval;
  }
d7932 1
a7932 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 13)] = opval;
  }
d7934 1
a7934 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr_usr[SUBSI (13, 8)] = opval;
  }
d7942 1
a7942 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 12)] = opval;
  }
d7944 1
a7944 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr_usr[SUBSI (12, 8)] = opval;
  }
d7952 1
a7952 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 11)] = opval;
  }
d7954 1
a7954 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr_usr[SUBSI (11, 8)] = opval;
  }
d7962 1
a7962 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 10)] = opval;
  }
d7964 1
a7964 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr_usr[SUBSI (10, 8)] = opval;
  }
d7972 1
a7972 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 9)] = opval;
  }
d7974 1
a7974 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr_usr[SUBSI (9, 8)] = opval;
  }
d7982 1
a7982 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 8)] = opval;
  }
d7984 1
a7984 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr_usr[SUBSI (8, 8)] = opval;
  }
d7991 1
a7991 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 7)] = opval;
  }
d7997 1
a7997 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 6)] = opval;
  }
d8003 1
a8003 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 5)] = opval;
  }
d8009 1
a8009 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 4)] = opval;
  }
d8015 1
a8015 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 3)] = opval;
  }
d8021 1
a8021 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 2)] = opval;
  }
d8027 1
a8027 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 1)] = opval;
  }
d8033 1
a8033 4
  {
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 0)] = opval;
  }
d8036 1
a8036 4
  {
    SI opval = addr;
    * FLD (i_rn) = opval;
  }
d8060 1
a8060 4
  {
    SI opval = ADDSI (current_cpu->hardware.h_gr[((UINT) 15)], 4);
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8066 1
a8066 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 14)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8072 1
a8072 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 13)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8078 1
a8078 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 12)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8084 1
a8084 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 11)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8090 1
a8090 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 10)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8096 1
a8096 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 9)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8102 1
a8102 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 8)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8108 1
a8108 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 7)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8114 1
a8114 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 6)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8120 1
a8120 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 5)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8126 1
a8126 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 4)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8132 1
a8132 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 3)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8138 1
a8138 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 2)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8144 1
a8144 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 1)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8150 1
a8150 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 0)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8171 1
a8171 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 14)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8173 1
a8173 4
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (14, 8)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8181 1
a8181 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 13)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8183 1
a8183 4
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (13, 8)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8191 1
a8191 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 12)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8193 1
a8193 4
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (12, 8)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8201 1
a8201 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 11)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8203 1
a8203 4
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (11, 8)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8211 1
a8211 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 10)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8213 1
a8213 4
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (10, 8)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8221 1
a8221 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 9)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8223 1
a8223 4
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (9, 8)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8231 1
a8231 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 8)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8233 1
a8233 4
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (8, 8)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8240 1
a8240 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 7)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8246 1
a8246 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 6)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8252 1
a8252 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 5)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8258 1
a8258 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 4)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8264 1
a8264 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 3)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8270 1
a8270 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 2)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8276 1
a8276 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 1)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8282 1
a8282 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 0)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8302 1
a8302 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 14)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8308 1
a8308 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 13)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8314 1
a8314 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 12)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8320 1
a8320 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 11)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8326 1
a8326 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 10)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8332 1
a8332 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 9)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8338 1
a8338 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 8)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8344 1
a8344 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 7)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8350 1
a8350 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 6)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8356 1
a8356 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 5)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8362 1
a8362 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 4)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8368 1
a8368 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 3)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8374 1
a8374 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 2)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8380 1
a8380 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 1)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8386 1
a8386 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 0)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8389 1
a8389 4
  {
    SI opval = addr;
    * FLD (i_rn) = opval;
  }
d8411 1
a8411 4
  {
    SI opval = ADDSI (current_cpu->hardware.h_gr[((UINT) 15)], 4);
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8418 1
a8418 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 14)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8420 1
a8420 4
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (14, 8)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8428 1
a8428 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 13)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8430 1
a8430 4
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (13, 8)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8438 1
a8438 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 12)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8440 1
a8440 4
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (12, 8)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8448 1
a8448 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 11)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8450 1
a8450 4
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (11, 8)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8458 1
a8458 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 10)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8460 1
a8460 4
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (10, 8)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8468 1
a8468 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 9)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8470 1
a8470 4
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (9, 8)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8478 1
a8478 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 8)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8480 1
a8480 4
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (8, 8)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8487 1
a8487 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 7)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8493 1
a8493 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 6)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8499 1
a8499 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 5)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8505 1
a8505 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 4)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8511 1
a8511 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 3)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8517 1
a8517 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 2)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8523 1
a8523 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 1)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8529 1
a8529 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 0)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8532 1
a8532 4
  {
    SI opval = addr;
    * FLD (i_rn) = opval;
  }
d8554 1
a8554 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 0)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8560 1
a8560 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 1)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8566 1
a8566 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 2)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8572 1
a8572 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 3)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8578 1
a8578 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 4)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8584 1
a8584 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 5)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8590 1
a8590 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 6)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8596 1
a8596 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 7)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8602 1
a8602 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 8)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8608 1
a8608 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 9)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8614 1
a8614 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 10)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8620 1
a8620 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 11)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8626 1
a8626 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 12)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8632 1
a8632 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 13)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8638 1
a8638 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 14)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8644 1
a8644 4
  {
    SI opval = ADDSI (current_cpu->hardware.h_gr[((UINT) 15)], 4);
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8665 1
a8665 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 8)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8667 1
a8667 4
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (8, 8)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8675 1
a8675 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 9)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8677 1
a8677 4
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (9, 8)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8685 1
a8685 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 10)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8687 1
a8687 4
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (10, 8)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8695 1
a8695 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 11)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8697 1
a8697 4
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (11, 8)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8705 1
a8705 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 12)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8707 1
a8707 4
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (12, 8)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8715 1
a8715 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 13)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8717 1
a8717 4
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (13, 8)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8725 1
a8725 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 14)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8727 1
a8727 4
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (14, 8)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8734 1
a8734 4
  {
    SI opval = ADDSI (current_cpu->hardware.h_gr[((UINT) 15)], 4);
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8754 1
a8754 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 8)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8760 1
a8760 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 9)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8766 1
a8766 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 10)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8772 1
a8772 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 11)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8778 1
a8778 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 12)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8784 1
a8784 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 13)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8790 1
a8790 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 14)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8796 1
a8796 4
  {
    SI opval = ADDSI (current_cpu->hardware.h_gr[((UINT) 15)], 4);
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8799 1
a8799 4
  {
    SI opval = addr;
    * FLD (i_rn) = opval;
  }
d8821 1
a8821 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 0)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8827 1
a8827 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 1)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8833 1
a8833 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 2)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8839 1
a8839 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 3)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8845 1
a8845 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 4)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8851 1
a8851 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 5)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8857 1
a8857 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 6)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8863 1
a8863 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 7)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8870 1
a8870 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 8)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8872 1
a8872 4
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (8, 8)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8880 1
a8880 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 9)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8882 1
a8882 4
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (9, 8)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8890 1
a8890 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 10)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8892 1
a8892 4
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (10, 8)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8900 1
a8900 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 11)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8902 1
a8902 4
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (11, 8)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8910 1
a8910 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 12)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8912 1
a8912 4
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (12, 8)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8920 1
a8920 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 13)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8922 1
a8922 4
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (13, 8)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8930 1
a8930 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 14)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8932 1
a8932 4
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (14, 8)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8939 1
a8939 4
  {
    SI opval = ADDSI (current_cpu->hardware.h_gr[((UINT) 15)], 4);
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8942 1
a8942 4
  {
    SI opval = addr;
    * FLD (i_rn) = opval;
  }
d8963 1
a8963 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 0)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8969 1
a8969 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 1)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8975 1
a8975 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 2)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8981 1
a8981 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 3)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8987 1
a8987 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 4)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8993 1
a8993 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 5)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d8999 1
a8999 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 6)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9005 1
a9005 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 7)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9011 1
a9011 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 8)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9017 1
a9017 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 9)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9023 1
a9023 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 10)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9029 1
a9029 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 11)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9035 1
a9035 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 12)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9041 1
a9041 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 13)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9047 1
a9047 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 14)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9053 1
a9053 4
  {
    SI opval = ADDSI (current_cpu->hardware.h_gr[((UINT) 15)], 4);
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9074 1
a9074 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 8)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9076 1
a9076 4
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (8, 8)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9084 1
a9084 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 9)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9086 1
a9086 4
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (9, 8)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9094 1
a9094 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 10)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9096 1
a9096 4
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (10, 8)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9104 1
a9104 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 11)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9106 1
a9106 4
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (11, 8)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9114 1
a9114 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 12)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9116 1
a9116 4
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (12, 8)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9124 1
a9124 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 13)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9126 1
a9126 4
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (13, 8)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9134 1
a9134 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 14)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9136 1
a9136 4
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (14, 8)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9143 1
a9143 4
  {
    SI opval = ADDSI (current_cpu->hardware.h_gr[((UINT) 15)], 4);
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9163 1
a9163 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 8)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9169 1
a9169 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 9)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9175 1
a9175 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 10)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9181 1
a9181 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 11)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9187 1
a9187 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 12)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9193 1
a9193 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 13)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9199 1
a9199 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 14)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9205 1
a9205 4
  {
    SI opval = ADDSI (current_cpu->hardware.h_gr[((UINT) 15)], 4);
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9209 1
a9209 4
  {
    SI opval = addr;
    * FLD (i_rn) = opval;
  }
d9230 1
a9230 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 0)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9236 1
a9236 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 1)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9242 1
a9242 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 2)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9248 1
a9248 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 3)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9254 1
a9254 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 4)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9260 1
a9260 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 5)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9266 1
a9266 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 6)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9272 1
a9272 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 7)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9279 1
a9279 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 8)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9281 1
a9281 4
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (8, 8)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9289 1
a9289 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 9)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9291 1
a9291 4
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (9, 8)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9299 1
a9299 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 10)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9301 1
a9301 4
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (10, 8)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9309 1
a9309 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 11)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9311 1
a9311 4
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (11, 8)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9319 1
a9319 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 12)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9321 1
a9321 4
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (12, 8)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9329 1
a9329 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 13)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9331 1
a9331 4
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (13, 8)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9339 1
a9339 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 14)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9341 1
a9341 4
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (14, 8)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9348 1
a9348 4
  {
    SI opval = ADDSI (current_cpu->hardware.h_gr[((UINT) 15)], 4);
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9352 1
a9352 4
  {
    SI opval = addr;
    * FLD (i_rn) = opval;
  }
d9373 1
a9373 4
  {
    SI opval = ADDSI (current_cpu->hardware.h_gr[((UINT) 15)], 4);
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9379 1
a9379 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 14)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9385 1
a9385 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 13)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9391 1
a9391 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 12)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9397 1
a9397 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 11)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9403 1
a9403 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 10)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9409 1
a9409 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 9)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9415 1
a9415 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 8)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9421 1
a9421 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 7)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9427 1
a9427 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 6)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9433 1
a9433 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 5)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9439 1
a9439 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 4)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9445 1
a9445 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 3)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9451 1
a9451 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 2)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9457 1
a9457 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 1)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9463 1
a9463 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 0)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9484 1
a9484 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 14)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9486 1
a9486 4
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (14, 8)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9494 1
a9494 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 13)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9496 1
a9496 4
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (13, 8)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9504 1
a9504 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 12)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9506 1
a9506 4
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (12, 8)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9514 1
a9514 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 11)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9516 1
a9516 4
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (11, 8)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9524 1
a9524 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 10)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9526 1
a9526 4
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (10, 8)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9534 1
a9534 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 9)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9536 1
a9536 4
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (9, 8)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9544 1
a9544 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 8)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9546 1
a9546 4
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (8, 8)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9553 1
a9553 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 7)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9559 1
a9559 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 6)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9565 1
a9565 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 5)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9571 1
a9571 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 4)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9577 1
a9577 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 3)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9583 1
a9583 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 2)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9589 1
a9589 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 1)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9595 1
a9595 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 0)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9615 1
a9615 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 14)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9621 1
a9621 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 13)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9627 1
a9627 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 12)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9633 1
a9633 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 11)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9639 1
a9639 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 10)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9645 1
a9645 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 9)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9651 1
a9651 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 8)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9657 1
a9657 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 7)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9663 1
a9663 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 6)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9669 1
a9669 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 5)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9675 1
a9675 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 4)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9681 1
a9681 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 3)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9687 1
a9687 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 2)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9693 1
a9693 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 1)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9699 1
a9699 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 0)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9703 1
a9703 4
  {
    SI opval = addr;
    * FLD (i_rn) = opval;
  }
d9724 1
a9724 4
  {
    SI opval = ADDSI (current_cpu->hardware.h_gr[((UINT) 15)], 4);
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9731 1
a9731 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 14)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9733 1
a9733 4
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (14, 8)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9741 1
a9741 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 13)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9743 1
a9743 4
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (13, 8)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9751 1
a9751 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 12)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9753 1
a9753 4
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (12, 8)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9761 1
a9761 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 11)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9763 1
a9763 4
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (11, 8)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9771 1
a9771 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 10)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9773 1
a9773 4
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (10, 8)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9781 1
a9781 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 9)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9783 1
a9783 4
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (9, 8)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9791 1
a9791 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 8)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9793 1
a9793 4
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (8, 8)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9800 1
a9800 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 7)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9806 1
a9806 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 6)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9812 1
a9812 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 5)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9818 1
a9818 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 4)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9824 1
a9824 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 3)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9830 1
a9830 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 2)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9836 1
a9836 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 1)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9842 1
a9842 4
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 0)];
    current_cpu->SETMEMSI (pc, addr, opval);
  }
d9846 1
a9846 4
  {
    SI opval = addr;
    * FLD (i_rn) = opval;
  }
d9864 1
a9864 4
  {
    SI opval = current_cpu->h_cpsr_get ();
    * FLD (i_rd) = opval;
  }
d9882 1
a9882 4
  {
    SI opval = current_cpu->h_spsr_get ();
    * FLD (i_rd) = opval;
  }
d9900 1
a9900 4
  {
    SI opval = * FLD (i_rm);
    current_cpu->h_cpsr_set (opval);
  }
d9918 1
a9918 4
  {
    SI opval = * FLD (i_rm);
    current_cpu->h_spsr_set (opval);
  }
@


1.4
log
@2003-02-06  Frank Ch. Eigler  <fche@@redhat.com>

	* cgen-engine.h: C++ namespace cleanup.

2003-02-06  Frank Ch. Eigler  <fche@@redhat.com>

	* arm-semsw.cxx: Sort of regenerated.
@
text
@d5 1
a5 1
Copyright (C) 2000, 2001, 2002 Red Hat, Inc.
@


1.3
log
@* arm7t missing instructions

[cgen]
2002-09-07  Frank Ch. Eigler  <fche@@redhat.com>

	From Robert Cragie <rcc@@jennic.com>:
	* cpu/arm7.cpu (ldm*-sw*, stm*-sw*): New instructions.

[sid]
2002-09-07  Frank Ch. Eigler  <fche@@redhat.com>

	* arm-*, thumb-*: Regenerated files with Robert Cragie's new
	cgen instructions.
@
text
@d618 1
a618 1
      frag_label_table = new (void*) [tabsize];
@


1.2
log
@* branch probability hinting

[cgen/ChangeLog]
2001-03-01  Frank Ch. Eigler  <fche@@redhat.com>

	* sid.cpu (-op-gen-set-trace[-parallel], -create-virtual-insns!):
	Emit LIKELY/UNLIKELY branch probability hints.
	* sid-decode.cpu (-gen-record-args): Ditto.

[sid/include/ChangeLog]
2001-03-01  Frank Ch. Eigler  <fche@@redhat.com>

	* sidconfig.h (LIKELY, UNLIKELY): New conditional cover macros
	for gcc's __builtin_expect branch probability hinting function.
	* sidbusutil.h (passthrough_bus, mux_password_bus, harvard_bus):
	Add some branch probability hints.
	* sidcpuutil.h (step_pin_handler, stop_after_insns_p,
	{read,write}_{insn,data}_memory): Ditto.
	* sidpinutil.h (callback_pin::driven): Remove unnecessary assert
	from critical path.

[eg. sid/component/mapper/ChangeLog]
2001-03-01  Frank Ch. Eigler  <fche@@redhat.com>

	* compMapper.cxx ({read,write}_strideoffset_any): Added b.p. hints.
	(write_any, read_any, locate): Ditto.

[sid/component/cgen-cpu/ChangeLog]
2001-03-01  Frank Ch. Eigler  <fche@@redhat.com>

	* cgen-engine.h (set_pbb_engine, chain, get_next_vpc, pbb_find,
	pbb_find_or_alloc, pbb_before, pbb_after): Add branch probability
	hints.

[eg. sid/component/cgen-cpu/arm7t/ChangeLog]
2001-03-01  Frank Ch. Eigler  <fche@@redhat.com>

	* arm-decode.cxx, -sem.cxx, -semsw.cxx: Regenerated w/ b.p. hints.
	* thumb-decode.cxx, -sem.cxx, -semsw.cxx: Ditto.
@
text
@d5 1
a5 1
Copyright (C) 2000 Red Hat, Inc.
d7 1
a7 1
This file is part of the Cygnus Simulators.
d27 62
a88 57
 , ARM_FRAG_STR_POST_DEC_REG_OFFSET_HDR, ARM_FRAG_LDR_POST_DEC_NONPRIV_REG_OFFSET_HDR, ARM_FRAG_STRB_POST_DEC_NONPRIV_IMM_OFFSET_HDR, ARM_FRAG_LDRB_POST_DEC_NONPRIV_IMM_OFFSET_HDR
 , ARM_FRAG_LDR_POST_DEC_NONPRIV_IMM_OFFSET_HDR, ARM_FRAG_X_HEADER, ARM_FRAG_TST_REG_REG_SHIFT_TRLR, ARM_FRAG_TEQ_REG_IMM_SHIFT_TRLR
 , ARM_FRAG_AND_IMM_TRLR, ARM_FRAG_AND_REG_REG_SHIFT_TRLR, ARM_FRAG_ORR_REG_IMM_SHIFT_TRLR, ARM_FRAG_UMULL_TRLR
 , ARM_FRAG_LDR_PRE_INC_IMM_OFFSET_TRLR, ARM_FRAG_LDRB_PRE_DEC_REG_OFFSET_TRLR, ARM_FRAG_STR_PRE_DEC_REG_OFFSET_TRLR, ARM_FRAG_STR_PRE_DEC_IMM_OFFSET_TRLR
 , ARM_FRAG_STRH_PRE_DEC_IMM_OFFSET_TRLR, ARM_FRAG_LDRSB_PRE_DEC_IMM_OFFSET_TRLR, ARM_FRAG_LDR_PRE_DEC_IMM_OFFSET_TRLR, ARM_FRAG_LDR_PRE_INC_REG_OFFSET_TRLR
 , ARM_FRAG_LDR_PRE_INC_WB_IMM_OFFSET_TRLR, ARM_FRAG_LDRB_PRE_DEC_WB_REG_OFFSET_TRLR, ARM_FRAG_STR_PRE_DEC_WB_REG_OFFSET_TRLR, ARM_FRAG_STR_PRE_DEC_WB_IMM_OFFSET_TRLR
 , ARM_FRAG_STRH_PRE_DEC_WB_IMM_OFFSET_TRLR, ARM_FRAG_LDRSB_PRE_DEC_WB_IMM_OFFSET_TRLR, ARM_FRAG_LDR_PRE_DEC_WB_IMM_OFFSET_TRLR, ARM_FRAG_LDR_PRE_INC_WB_REG_OFFSET_TRLR
 , ARM_FRAG_STRB_POST_INC_REG_OFFSET_TRLR, ARM_FRAG_STR_POST_INC_REG_OFFSET_TRLR, ARM_FRAG_STR_POST_INC_IMM_OFFSET_TRLR, ARM_FRAG_LDRB_POST_INC_REG_OFFSET_TRLR
 , ARM_FRAG_STRB_POST_DEC_REG_OFFSET_TRLR, ARM_FRAG_STR_POST_DEC_REG_OFFSET_TRLR, ARM_FRAG_STR_POST_DEC_IMM_OFFSET_TRLR, ARM_FRAG_LDRB_POST_DEC_REG_OFFSET_TRLR
 , ARM_FRAG_X_TRAILER, ARM_FRAG_X_COND_MID, ARM_FRAG_X_AFTER_MID, ARM_FRAG_X_BEFORE_MID
 , ARM_FRAG_X_CTI_CHAIN_MID, ARM_FRAG_X_CHAIN_MID, ARM_FRAG_X_BEGIN_MID, ARM_FRAG_X_INVALID_MID
 , ARM_FRAG_B_MID, ARM_FRAG_BL_MID, ARM_FRAG_BX_MID, ARM_FRAG_LDR_POST_DEC_IMM_OFFSET_MID
 , ARM_FRAG_LDR_POST_DEC_REG_OFFSET_MID, ARM_FRAG_LDR_POST_INC_IMM_OFFSET_MID, ARM_FRAG_LDR_POST_INC_REG_OFFSET_MID, ARM_FRAG_LDR_POST_DEC_NONPRIV_IMM_OFFSET_MID
 , ARM_FRAG_LDR_POST_DEC_NONPRIV_REG_OFFSET_MID, ARM_FRAG_LDR_POST_INC_NONPRIV_IMM_OFFSET_MID, ARM_FRAG_LDR_POST_INC_NONPRIV_REG_OFFSET_MID, ARM_FRAG_LDR_PRE_DEC_IMM_OFFSET_MID
 , ARM_FRAG_LDR_PRE_DEC_REG_OFFSET_MID, ARM_FRAG_LDR_PRE_INC_IMM_OFFSET_MID, ARM_FRAG_LDR_PRE_INC_REG_OFFSET_MID, ARM_FRAG_LDR_PRE_DEC_WB_IMM_OFFSET_MID
 , ARM_FRAG_LDR_PRE_DEC_WB_REG_OFFSET_MID, ARM_FRAG_LDR_PRE_INC_WB_IMM_OFFSET_MID, ARM_FRAG_LDR_PRE_INC_WB_REG_OFFSET_MID, ARM_FRAG_LDRB_POST_DEC_IMM_OFFSET_MID
 , ARM_FRAG_LDRB_POST_INC_IMM_OFFSET_MID, ARM_FRAG_LDRB_POST_DEC_NONPRIV_IMM_OFFSET_MID, ARM_FRAG_LDRB_POST_INC_NONPRIV_IMM_OFFSET_MID, ARM_FRAG_LDRB_PRE_DEC_IMM_OFFSET_MID
 , ARM_FRAG_LDRB_PRE_DEC_REG_OFFSET_MID, ARM_FRAG_LDRB_PRE_INC_IMM_OFFSET_MID, ARM_FRAG_LDRB_PRE_INC_REG_OFFSET_MID, ARM_FRAG_LDRB_PRE_DEC_WB_IMM_OFFSET_MID
 , ARM_FRAG_LDRB_PRE_DEC_WB_REG_OFFSET_MID, ARM_FRAG_LDRB_PRE_INC_WB_IMM_OFFSET_MID, ARM_FRAG_LDRB_PRE_INC_WB_REG_OFFSET_MID, ARM_FRAG_STR_POST_DEC_IMM_OFFSET_MID
 , ARM_FRAG_STR_POST_INC_IMM_OFFSET_MID, ARM_FRAG_STR_POST_DEC_NONPRIV_IMM_OFFSET_MID, ARM_FRAG_STR_POST_INC_NONPRIV_IMM_OFFSET_MID, ARM_FRAG_STR_PRE_DEC_IMM_OFFSET_MID
 , ARM_FRAG_STR_PRE_DEC_REG_OFFSET_MID, ARM_FRAG_STR_PRE_INC_IMM_OFFSET_MID, ARM_FRAG_STR_PRE_INC_REG_OFFSET_MID, ARM_FRAG_STR_PRE_DEC_WB_IMM_OFFSET_MID
 , ARM_FRAG_STR_PRE_DEC_WB_REG_OFFSET_MID, ARM_FRAG_STR_PRE_INC_WB_IMM_OFFSET_MID, ARM_FRAG_STR_PRE_INC_WB_REG_OFFSET_MID, ARM_FRAG_STRB_POST_DEC_IMM_OFFSET_MID
 , ARM_FRAG_STRB_POST_INC_IMM_OFFSET_MID, ARM_FRAG_STRB_POST_DEC_NONPRIV_IMM_OFFSET_MID, ARM_FRAG_STRB_POST_INC_NONPRIV_IMM_OFFSET_MID, ARM_FRAG_STRB_POST_INC_NONPRIV_REG_OFFSET_MID
 , ARM_FRAG_STRB_PRE_DEC_IMM_OFFSET_MID, ARM_FRAG_STRB_PRE_DEC_REG_OFFSET_MID, ARM_FRAG_STRB_PRE_INC_IMM_OFFSET_MID, ARM_FRAG_STRB_PRE_INC_REG_OFFSET_MID
 , ARM_FRAG_STRB_PRE_DEC_WB_IMM_OFFSET_MID, ARM_FRAG_STRB_PRE_DEC_WB_REG_OFFSET_MID, ARM_FRAG_STRB_PRE_INC_WB_IMM_OFFSET_MID, ARM_FRAG_STRB_PRE_INC_WB_REG_OFFSET_MID
 , ARM_FRAG_STRH_PRE_DEC_IMM_OFFSET_MID, ARM_FRAG_STRH_PRE_DEC_REG_OFFSET_MID, ARM_FRAG_STRH_PRE_INC_IMM_OFFSET_MID, ARM_FRAG_STRH_PRE_INC_REG_OFFSET_MID
 , ARM_FRAG_STRH_PRE_DEC_WB_IMM_OFFSET_MID, ARM_FRAG_STRH_PRE_DEC_WB_REG_OFFSET_MID, ARM_FRAG_STRH_PRE_INC_WB_IMM_OFFSET_MID, ARM_FRAG_STRH_PRE_INC_WB_REG_OFFSET_MID
 , ARM_FRAG_STRH_POST_DEC_IMM_OFFSET_MID, ARM_FRAG_STRH_POST_DEC_REG_OFFSET_MID, ARM_FRAG_STRH_POST_INC_IMM_OFFSET_MID, ARM_FRAG_STRH_POST_INC_REG_OFFSET_MID
 , ARM_FRAG_LDRSB_PRE_DEC_IMM_OFFSET_MID, ARM_FRAG_LDRSB_PRE_DEC_REG_OFFSET_MID, ARM_FRAG_LDRSB_PRE_INC_IMM_OFFSET_MID, ARM_FRAG_LDRSB_PRE_INC_REG_OFFSET_MID
 , ARM_FRAG_LDRSB_PRE_DEC_WB_IMM_OFFSET_MID, ARM_FRAG_LDRSB_PRE_DEC_WB_REG_OFFSET_MID, ARM_FRAG_LDRSB_PRE_INC_WB_IMM_OFFSET_MID, ARM_FRAG_LDRSB_PRE_INC_WB_REG_OFFSET_MID
 , ARM_FRAG_LDRSB_POST_DEC_IMM_OFFSET_MID, ARM_FRAG_LDRSB_POST_DEC_REG_OFFSET_MID, ARM_FRAG_LDRSB_POST_INC_IMM_OFFSET_MID, ARM_FRAG_LDRSB_POST_INC_REG_OFFSET_MID
 , ARM_FRAG_LDRH_PRE_DEC_IMM_OFFSET_MID, ARM_FRAG_LDRH_PRE_DEC_REG_OFFSET_MID, ARM_FRAG_LDRH_PRE_INC_IMM_OFFSET_MID, ARM_FRAG_LDRH_PRE_INC_REG_OFFSET_MID
 , ARM_FRAG_LDRH_PRE_DEC_WB_IMM_OFFSET_MID, ARM_FRAG_LDRH_PRE_DEC_WB_REG_OFFSET_MID, ARM_FRAG_LDRH_PRE_INC_WB_IMM_OFFSET_MID, ARM_FRAG_LDRH_PRE_INC_WB_REG_OFFSET_MID
 , ARM_FRAG_LDRH_POST_DEC_IMM_OFFSET_MID, ARM_FRAG_LDRH_POST_DEC_REG_OFFSET_MID, ARM_FRAG_LDRH_POST_INC_IMM_OFFSET_MID, ARM_FRAG_LDRH_POST_INC_REG_OFFSET_MID
 , ARM_FRAG_LDRSH_PRE_DEC_IMM_OFFSET_MID, ARM_FRAG_LDRSH_PRE_DEC_REG_OFFSET_MID, ARM_FRAG_LDRSH_PRE_INC_IMM_OFFSET_MID, ARM_FRAG_LDRSH_PRE_INC_REG_OFFSET_MID
 , ARM_FRAG_LDRSH_PRE_DEC_WB_IMM_OFFSET_MID, ARM_FRAG_LDRSH_PRE_DEC_WB_REG_OFFSET_MID, ARM_FRAG_LDRSH_PRE_INC_WB_IMM_OFFSET_MID, ARM_FRAG_LDRSH_PRE_INC_WB_REG_OFFSET_MID
 , ARM_FRAG_LDRSH_POST_DEC_IMM_OFFSET_MID, ARM_FRAG_LDRSH_POST_DEC_REG_OFFSET_MID, ARM_FRAG_LDRSH_POST_INC_IMM_OFFSET_MID, ARM_FRAG_LDRSH_POST_INC_REG_OFFSET_MID
 , ARM_FRAG_MUL_MID, ARM_FRAG_MLA_MID, ARM_FRAG_UMULL_MID, ARM_FRAG_UMLAL_MID
 , ARM_FRAG_SMULL_MID, ARM_FRAG_SMLAL_MID, ARM_FRAG_SWP_MID, ARM_FRAG_SWPB_MID
 , ARM_FRAG_SWI_MID, ARM_FRAG_AND_REG_IMM_SHIFT_MID, ARM_FRAG_AND_REG_REG_SHIFT_MID, ARM_FRAG_AND_IMM_MID
 , ARM_FRAG_ORR_REG_IMM_SHIFT_MID, ARM_FRAG_ORR_REG_REG_SHIFT_MID, ARM_FRAG_ORR_IMM_MID, ARM_FRAG_EOR_REG_IMM_SHIFT_MID
 , ARM_FRAG_EOR_REG_REG_SHIFT_MID, ARM_FRAG_EOR_IMM_MID, ARM_FRAG_MOV_REG_IMM_SHIFT_MID, ARM_FRAG_MOV_REG_REG_SHIFT_MID
 , ARM_FRAG_MOV_IMM_MID, ARM_FRAG_BIC_REG_IMM_SHIFT_MID, ARM_FRAG_BIC_REG_REG_SHIFT_MID, ARM_FRAG_BIC_IMM_MID
 , ARM_FRAG_MVN_REG_IMM_SHIFT_MID, ARM_FRAG_MVN_REG_REG_SHIFT_MID, ARM_FRAG_MVN_IMM_MID, ARM_FRAG_ADD_REG_IMM_SHIFT_MID
 , ARM_FRAG_ADD_REG_REG_SHIFT_MID, ARM_FRAG_ADD_IMM_MID, ARM_FRAG_ADC_REG_IMM_SHIFT_MID, ARM_FRAG_ADC_REG_REG_SHIFT_MID
 , ARM_FRAG_ADC_IMM_MID, ARM_FRAG_SUB_REG_IMM_SHIFT_MID, ARM_FRAG_SUB_REG_REG_SHIFT_MID, ARM_FRAG_SUB_IMM_MID
 , ARM_FRAG_SBC_REG_IMM_SHIFT_MID, ARM_FRAG_SBC_REG_REG_SHIFT_MID, ARM_FRAG_SBC_IMM_MID, ARM_FRAG_RSB_REG_IMM_SHIFT_MID
 , ARM_FRAG_RSB_REG_REG_SHIFT_MID, ARM_FRAG_RSB_IMM_MID, ARM_FRAG_RSC_REG_IMM_SHIFT_MID, ARM_FRAG_RSC_REG_REG_SHIFT_MID
 , ARM_FRAG_RSC_IMM_MID, ARM_FRAG_TST_REG_IMM_SHIFT_MID, ARM_FRAG_TST_REG_REG_SHIFT_MID, ARM_FRAG_TST_IMM_MID
 , ARM_FRAG_TEQ_REG_IMM_SHIFT_MID, ARM_FRAG_TEQ_REG_REG_SHIFT_MID, ARM_FRAG_TEQ_IMM_MID, ARM_FRAG_CMP_REG_IMM_SHIFT_MID
 , ARM_FRAG_CMP_REG_REG_SHIFT_MID, ARM_FRAG_CMP_IMM_MID, ARM_FRAG_CMN_REG_IMM_SHIFT_MID, ARM_FRAG_CMN_REG_REG_SHIFT_MID
 , ARM_FRAG_CMN_IMM_MID, ARM_FRAG_LDMDA_MID, ARM_FRAG_LDMDA_WB_MID, ARM_FRAG_LDMIB_MID
 , ARM_FRAG_LDMIB_WB_MID, ARM_FRAG_LDMIA_MID, ARM_FRAG_LDMIA_WB_MID, ARM_FRAG_LDMDB_MID
 , ARM_FRAG_LDMDB_WB_MID, ARM_FRAG_STMDB_MID, ARM_FRAG_STMDB_WB_MID, ARM_FRAG_STMIB_MID
 , ARM_FRAG_STMIB_WB_MID, ARM_FRAG_STMIA_MID, ARM_FRAG_STMIA_WB_MID, ARM_FRAG_STMDA_MID
 , ARM_FRAG_STMDA_WB_MID, ARM_FRAG_MRS_C_MID, ARM_FRAG_MRS_S_MID, ARM_FRAG_MSR_C_MID
 , ARM_FRAG_MSR_S_MID, ARM_FRAG_MAX
d287 1
d289 1
d291 3
a293 1
  { ARM_INSN_LDMIB_WB, ARM_FRAG_LDMIB_WB_MID, ARM_FRAG_LIST_END },
d295 3
a297 1
  { ARM_INSN_LDMIA_WB, ARM_FRAG_LDMIA_WB_MID, ARM_FRAG_LIST_END },
d299 1
d301 1
d303 3
a305 1
  { ARM_INSN_STMDB_WB, ARM_FRAG_STMDB_WB_MID, ARM_FRAG_LIST_END },
d307 3
a309 1
  { ARM_INSN_STMIB_WB, ARM_FRAG_STMIB_WB_MID, ARM_FRAG_LIST_END },
d311 3
a313 1
  { ARM_INSN_STMIA_WB, ARM_FRAG_STMIA_WB_MID, ARM_FRAG_LIST_END },
d315 3
a317 1
  { ARM_INSN_STMDA_WB, ARM_FRAG_STMDA_WB_MID, ARM_FRAG_LIST_END },
a321 1
  { ARM_INSN_MAX }
d354 6
d564 1
d566 1
d568 1
d570 1
d572 1
d574 1
d576 1
d578 1
d580 1
d582 1
d584 1
d586 1
d588 1
d590 1
d592 1
d594 1
d616 4
a619 2
      frag_label_table = new (void*) [ARM_INSN_MAX * 4];
      memset (frag_label_table, 0, sizeof (void*) * ARM_INSN_MAX * 4);
d622 1
a622 1
      for (i = 0, v = frag_label_table; i < ARM_INSN_MAX; ++i)
a628 4
      // Record frags used by each insn.
      //for (int i = 0; arm_frag_usage[i].itype != ARM_INSN_MAX; ++i)
      //  arm_idesc::idesc_table[arm_frag_usage[i].itype].frags = & arm_frag_usage[i];

d939 314
d7519 1
a7519 1
// ********** used only by: ldmda-wb
d7521 1
a7521 1
  CASE (FRAG_LDMDA_WB_MID):
d7539 4
d7547 1
d7552 6
d7563 1
d7568 6
d7579 1
d7584 6
d7595 1
d7600 6
d7611 1
d7616 6
d7627 1
d7632 6
d7643 1
d7648 6
a7728 4
  {
    SI opval = addr;
    * FLD (i_rn) = opval;
  }
d7737 1
a7737 1
// ********** used only by: ldmib
d7739 1
a7739 1
  CASE (FRAG_LDMIB_MID):
d7750 10
a7759 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 0))) {
a7760 1
  addr = ADDSI (addr, 4);
d7763 1
a7763 1
    current_cpu->hardware.h_gr[((UINT) 0)] = opval;
d7765 1
d7768 1
a7768 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 1))) {
a7769 1
  addr = ADDSI (addr, 4);
d7772 1
a7772 1
    current_cpu->hardware.h_gr[((UINT) 1)] = opval;
d7774 1
d7777 1
a7777 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 2))) {
a7778 1
  addr = ADDSI (addr, 4);
d7781 1
a7781 1
    current_cpu->hardware.h_gr[((UINT) 2)] = opval;
d7783 1
d7786 1
a7786 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 3))) {
a7787 1
  addr = ADDSI (addr, 4);
d7790 1
a7790 1
    current_cpu->hardware.h_gr[((UINT) 3)] = opval;
d7792 1
d7795 1
a7795 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 4))) {
a7796 1
  addr = ADDSI (addr, 4);
d7799 1
a7799 1
    current_cpu->hardware.h_gr[((UINT) 4)] = opval;
d7801 1
d7804 1
a7804 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 5))) {
a7805 1
  addr = ADDSI (addr, 4);
d7808 1
a7808 1
    current_cpu->hardware.h_gr[((UINT) 5)] = opval;
d7810 1
d7813 1
a7813 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 6))) {
a7814 1
  addr = ADDSI (addr, 4);
d7817 1
a7817 1
    current_cpu->hardware.h_gr[((UINT) 6)] = opval;
d7819 1
a7823 1
  addr = ADDSI (addr, 4);
d7828 1
d7831 1
a7831 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 8))) {
a7832 1
  addr = ADDSI (addr, 4);
d7835 1
a7835 1
    current_cpu->hardware.h_gr[((UINT) 8)] = opval;
d7837 1
d7840 1
a7840 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 9))) {
a7841 1
  addr = ADDSI (addr, 4);
d7844 1
a7844 1
    current_cpu->hardware.h_gr[((UINT) 9)] = opval;
d7846 1
d7849 1
a7849 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 10))) {
a7850 1
  addr = ADDSI (addr, 4);
d7853 1
a7853 1
    current_cpu->hardware.h_gr[((UINT) 10)] = opval;
d7855 1
d7858 1
a7858 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 11))) {
a7859 1
  addr = ADDSI (addr, 4);
d7862 1
a7862 1
    current_cpu->hardware.h_gr[((UINT) 11)] = opval;
d7864 1
d7867 1
a7867 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 12))) {
a7868 1
  addr = ADDSI (addr, 4);
d7871 1
a7871 1
    current_cpu->hardware.h_gr[((UINT) 12)] = opval;
d7873 1
d7876 1
a7876 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 13))) {
a7877 1
  addr = ADDSI (addr, 4);
d7880 1
a7880 1
    current_cpu->hardware.h_gr[((UINT) 13)] = opval;
d7882 1
d7885 1
a7885 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 14))) {
a7886 1
  addr = ADDSI (addr, 4);
d7889 1
a7889 1
    current_cpu->hardware.h_gr[((UINT) 14)] = opval;
d7891 1
a7893 3
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
{
  addr = ADDSI (addr, 4);
d7895 2
a7896 2
    USI opval = current_cpu->GETMEMSI (pc, addr);
    npc = opval; br_status = BRANCH_UNCACHEABLE;
a7898 2
}
}
d7906 1
a7906 1
// ********** used only by: ldmib-wb
d7908 1
a7908 1
  CASE (FRAG_LDMIB_WB_MID):
d7919 1
a7919 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 0))) {
a7920 1
  addr = ADDSI (addr, 4);
d7922 7
a7928 2
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 0)] = opval;
d7932 1
a7932 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 1))) {
d7934 6
a7939 1
  addr = ADDSI (addr, 4);
d7942 1
a7942 1
    current_cpu->hardware.h_gr[((UINT) 1)] = opval;
d7945 2
d7948 1
a7948 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 2))) {
d7950 6
a7955 1
  addr = ADDSI (addr, 4);
d7958 1
a7958 1
    current_cpu->hardware.h_gr[((UINT) 2)] = opval;
d7961 2
d7964 1
a7964 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 3))) {
d7966 6
a7971 1
  addr = ADDSI (addr, 4);
d7974 1
a7974 1
    current_cpu->hardware.h_gr[((UINT) 3)] = opval;
d7977 2
d7980 1
a7980 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 4))) {
d7982 6
a7987 1
  addr = ADDSI (addr, 4);
d7990 1
a7990 1
    current_cpu->hardware.h_gr[((UINT) 4)] = opval;
d7993 2
d7996 1
a7996 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 5))) {
d7998 6
a8003 1
  addr = ADDSI (addr, 4);
d8006 1
a8006 1
    current_cpu->hardware.h_gr[((UINT) 5)] = opval;
d8009 2
d8012 1
a8012 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 6))) {
d8014 1
a8014 1
  addr = ADDSI (addr, 4);
d8017 1
a8017 1
    current_cpu->hardware.h_gr[((UINT) 6)] = opval;
d8019 1
a8019 5
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 7))) {
{
  addr = ADDSI (addr, 4);
d8022 1
a8022 1
    current_cpu->hardware.h_gr[((UINT) 7)] = opval;
d8025 2
d8030 1
a8030 1
  addr = ADDSI (addr, 4);
d8035 7
d8044 1
a8044 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 9))) {
a8045 1
  addr = ADDSI (addr, 4);
d8048 1
a8048 1
    current_cpu->hardware.h_gr[((UINT) 9)] = opval;
d8050 1
d8053 1
a8053 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 10))) {
a8054 1
  addr = ADDSI (addr, 4);
d8057 1
a8057 1
    current_cpu->hardware.h_gr[((UINT) 10)] = opval;
d8059 1
d8062 1
a8062 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 11))) {
a8063 1
  addr = ADDSI (addr, 4);
d8066 1
a8066 1
    current_cpu->hardware.h_gr[((UINT) 11)] = opval;
d8068 1
d8071 10
a8080 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 12))) {
a8081 1
  addr = ADDSI (addr, 4);
d8084 1
a8084 1
    current_cpu->hardware.h_gr[((UINT) 12)] = opval;
d8086 1
d8089 1
a8089 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 13))) {
a8090 1
  addr = ADDSI (addr, 4);
d8093 1
a8093 1
    current_cpu->hardware.h_gr[((UINT) 13)] = opval;
d8095 1
d8098 1
a8098 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 14))) {
a8099 1
  addr = ADDSI (addr, 4);
d8102 1
a8102 1
    current_cpu->hardware.h_gr[((UINT) 14)] = opval;
d8104 1
d8107 1
a8107 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
a8108 1
  addr = ADDSI (addr, 4);
d8110 2
a8111 2
    USI opval = current_cpu->GETMEMSI (pc, addr);
    npc = opval; br_status = BRANCH_UNCACHEABLE;
d8113 1
d8128 1
a8128 1
// ********** used only by: ldmia
d8130 1
a8130 1
  CASE (FRAG_LDMIA_MID):
d8143 1
a8147 1
  addr = ADDSI (addr, 4);
d8152 1
a8156 1
  addr = ADDSI (addr, 4);
d8161 1
a8165 1
  addr = ADDSI (addr, 4);
d8170 1
a8174 1
  addr = ADDSI (addr, 4);
d8179 1
a8183 1
  addr = ADDSI (addr, 4);
d8188 1
a8192 1
  addr = ADDSI (addr, 4);
d8197 1
a8201 1
  addr = ADDSI (addr, 4);
d8206 1
a8210 1
  addr = ADDSI (addr, 4);
d8215 1
a8219 1
  addr = ADDSI (addr, 4);
d8224 1
a8228 1
  addr = ADDSI (addr, 4);
d8233 1
a8237 1
  addr = ADDSI (addr, 4);
d8242 1
a8246 1
  addr = ADDSI (addr, 4);
d8251 1
a8255 1
  addr = ADDSI (addr, 4);
d8260 1
a8264 1
  addr = ADDSI (addr, 4);
d8269 1
a8273 1
  addr = ADDSI (addr, 4);
d8278 1
a8282 1
  addr = ADDSI (addr, 4);
d8293 1
a8293 1
// ********** used only by: ldmia-wb
d8295 1
a8295 1
  CASE (FRAG_LDMIA_WB_MID):
a8296 2
      abuf = vpc;
      vpc = vpc + 1;
a8298 2
      br_status = BRANCH_UNTAKEN;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));
d8301 1
a8301 2
  addr = * FLD (i_rn);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 0))) {
d8303 2
d8307 6
a8312 1
    current_cpu->hardware.h_gr[((UINT) 0)] = opval;
a8313 1
  addr = ADDSI (addr, 4);
d8316 2
a8317 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 1))) {
d8319 7
d8328 1
a8328 1
    current_cpu->hardware.h_gr[((UINT) 1)] = opval;
a8329 1
  addr = ADDSI (addr, 4);
d8332 2
a8333 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 2))) {
d8335 2
d8339 6
a8344 1
    current_cpu->hardware.h_gr[((UINT) 2)] = opval;
a8345 1
  addr = ADDSI (addr, 4);
d8348 2
a8349 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 3))) {
d8351 7
d8360 1
a8360 1
    current_cpu->hardware.h_gr[((UINT) 3)] = opval;
a8361 1
  addr = ADDSI (addr, 4);
d8364 2
a8365 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 4))) {
d8367 2
d8371 6
a8376 1
    current_cpu->hardware.h_gr[((UINT) 4)] = opval;
a8377 1
  addr = ADDSI (addr, 4);
d8380 2
a8381 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 5))) {
d8383 7
d8392 1
a8392 1
    current_cpu->hardware.h_gr[((UINT) 5)] = opval;
a8393 1
  addr = ADDSI (addr, 4);
d8396 2
a8397 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 6))) {
d8399 2
d8403 6
a8408 1
    current_cpu->hardware.h_gr[((UINT) 6)] = opval;
a8409 1
  addr = ADDSI (addr, 4);
d8412 2
a8413 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 7))) {
d8415 5
d8421 2
a8422 2
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 7)] = opval;
a8423 1
  addr = ADDSI (addr, 4);
d8426 16
d8444 1
a8448 1
  addr = ADDSI (addr, 4);
d8453 1
a8457 1
  addr = ADDSI (addr, 4);
d8462 1
a8466 1
  addr = ADDSI (addr, 4);
d8471 1
a8475 1
  addr = ADDSI (addr, 4);
d8480 1
a8484 1
  addr = ADDSI (addr, 4);
d8489 1
a8493 1
  addr = ADDSI (addr, 4);
d8498 1
a8502 1
  addr = ADDSI (addr, 4);
d8507 1
a8511 1
  addr = ADDSI (addr, 4);
d8526 1
a8526 1
// ********** used only by: ldmdb
d8528 1
a8528 1
  CASE (FRAG_LDMDB_MID):
d8539 1
a8539 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
d8541 1
a8541 1
  addr = SUBSI (addr, 4);
d8543 2
a8544 2
    USI opval = current_cpu->GETMEMSI (pc, addr);
    npc = opval; br_status = BRANCH_UNCACHEABLE;
d8548 1
a8548 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 14))) {
d8550 1
a8550 1
  addr = SUBSI (addr, 4);
d8553 1
a8553 1
    current_cpu->hardware.h_gr[((UINT) 14)] = opval;
d8557 1
a8557 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 13))) {
d8559 1
a8559 1
  addr = SUBSI (addr, 4);
d8562 1
a8562 1
    current_cpu->hardware.h_gr[((UINT) 13)] = opval;
d8566 1
a8566 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 12))) {
d8568 1
a8568 1
  addr = SUBSI (addr, 4);
d8571 1
a8571 1
    current_cpu->hardware.h_gr[((UINT) 12)] = opval;
d8575 1
a8575 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 11))) {
d8577 1
a8577 1
  addr = SUBSI (addr, 4);
d8580 1
a8580 1
    current_cpu->hardware.h_gr[((UINT) 11)] = opval;
d8584 1
a8584 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 10))) {
d8586 1
a8586 1
  addr = SUBSI (addr, 4);
d8589 1
a8589 1
    current_cpu->hardware.h_gr[((UINT) 10)] = opval;
d8593 1
a8593 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 9))) {
d8595 1
a8595 1
  addr = SUBSI (addr, 4);
d8598 1
a8598 1
    current_cpu->hardware.h_gr[((UINT) 9)] = opval;
d8602 1
a8602 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 8))) {
d8604 1
a8604 1
  addr = SUBSI (addr, 4);
d8607 1
a8607 1
    current_cpu->hardware.h_gr[((UINT) 8)] = opval;
d8611 1
a8611 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 7))) {
d8613 7
a8619 1
  addr = SUBSI (addr, 4);
d8622 1
a8622 1
    current_cpu->hardware.h_gr[((UINT) 7)] = opval;
d8626 2
a8627 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 6))) {
d8629 7
a8635 1
  addr = SUBSI (addr, 4);
d8638 1
a8638 1
    current_cpu->hardware.h_gr[((UINT) 6)] = opval;
d8642 2
a8643 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 5))) {
d8645 7
a8651 1
  addr = SUBSI (addr, 4);
d8654 1
a8654 1
    current_cpu->hardware.h_gr[((UINT) 5)] = opval;
d8658 2
a8659 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 4))) {
d8661 7
a8667 1
  addr = SUBSI (addr, 4);
d8670 1
a8670 1
    current_cpu->hardware.h_gr[((UINT) 4)] = opval;
d8674 2
a8675 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 3))) {
d8677 7
a8683 1
  addr = SUBSI (addr, 4);
d8686 1
a8686 1
    current_cpu->hardware.h_gr[((UINT) 3)] = opval;
d8690 2
a8691 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 2))) {
d8693 7
a8699 1
  addr = SUBSI (addr, 4);
d8702 1
a8702 1
    current_cpu->hardware.h_gr[((UINT) 2)] = opval;
d8706 2
a8707 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 1))) {
d8709 7
a8715 1
  addr = SUBSI (addr, 4);
d8718 1
a8718 1
    current_cpu->hardware.h_gr[((UINT) 1)] = opval;
d8722 2
a8723 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 0))) {
d8725 5
a8729 1
  addr = SUBSI (addr, 4);
d8731 2
a8732 2
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 0)] = opval;
d8736 4
d8748 1
a8748 1
// ********** used only by: ldmdb-wb
d8750 1
a8750 1
  CASE (FRAG_LDMDB_WB_MID):
d8761 10
a8770 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
a8771 1
  addr = SUBSI (addr, 4);
d8773 2
a8774 2
    USI opval = current_cpu->GETMEMSI (pc, addr);
    npc = opval; br_status = BRANCH_UNCACHEABLE;
d8776 1
d8779 1
a8779 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 14))) {
a8780 1
  addr = SUBSI (addr, 4);
d8783 1
a8783 1
    current_cpu->hardware.h_gr[((UINT) 14)] = opval;
d8785 1
d8788 1
a8788 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 13))) {
a8789 1
  addr = SUBSI (addr, 4);
d8792 1
a8792 1
    current_cpu->hardware.h_gr[((UINT) 13)] = opval;
d8794 1
d8797 1
a8797 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 12))) {
a8798 1
  addr = SUBSI (addr, 4);
d8801 1
a8801 1
    current_cpu->hardware.h_gr[((UINT) 12)] = opval;
d8803 1
d8806 1
a8806 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 11))) {
a8807 1
  addr = SUBSI (addr, 4);
d8810 1
a8810 1
    current_cpu->hardware.h_gr[((UINT) 11)] = opval;
d8812 1
d8815 1
a8815 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 10))) {
a8816 1
  addr = SUBSI (addr, 4);
d8819 1
a8819 1
    current_cpu->hardware.h_gr[((UINT) 10)] = opval;
d8821 1
d8824 1
a8824 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 9))) {
a8825 1
  addr = SUBSI (addr, 4);
d8828 1
a8828 1
    current_cpu->hardware.h_gr[((UINT) 9)] = opval;
d8830 1
a8834 1
  addr = SUBSI (addr, 4);
d8839 10
d8851 1
a8851 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 7))) {
a8852 1
  addr = SUBSI (addr, 4);
d8855 1
a8855 1
    current_cpu->hardware.h_gr[((UINT) 7)] = opval;
d8857 1
d8860 1
a8860 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 6))) {
a8861 1
  addr = SUBSI (addr, 4);
d8864 1
a8864 1
    current_cpu->hardware.h_gr[((UINT) 6)] = opval;
d8866 1
d8869 1
a8869 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 5))) {
a8870 1
  addr = SUBSI (addr, 4);
d8873 1
a8873 1
    current_cpu->hardware.h_gr[((UINT) 5)] = opval;
d8875 1
d8878 1
a8878 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 4))) {
a8879 1
  addr = SUBSI (addr, 4);
d8882 1
a8882 1
    current_cpu->hardware.h_gr[((UINT) 4)] = opval;
d8884 1
d8887 1
a8887 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 3))) {
a8888 1
  addr = SUBSI (addr, 4);
d8891 10
a8900 1
    current_cpu->hardware.h_gr[((UINT) 3)] = opval;
d8902 2
d8906 16
a8921 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 2))) {
d8923 6
a8928 1
  addr = SUBSI (addr, 4);
d8931 1
a8931 1
    current_cpu->hardware.h_gr[((UINT) 2)] = opval;
d8934 2
d8937 1
a8937 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 1))) {
d8939 6
a8944 1
  addr = SUBSI (addr, 4);
d8947 1
a8947 1
    current_cpu->hardware.h_gr[((UINT) 1)] = opval;
d8950 2
d8953 1
a8953 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 0))) {
d8955 2286
a11240 1
  addr = SUBSI (addr, 4);
d11242 2
a11243 2
    SI opval = current_cpu->GETMEMSI (pc, addr);
    current_cpu->hardware.h_gr[((UINT) 0)] = opval;
a11252 2
      pbb_br_npc = npc;
      pbb_br_status = br_status;
d11257 1
a11257 1
// ********** used only by: stmdb
d11259 1
a11259 1
  CASE (FRAG_STMDB_MID):
d11269 1
a11269 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
d11271 1
a11271 1
  addr = SUBSI (addr, 4);
d11273 1
a11273 1
    SI opval = ADDSI (current_cpu->hardware.h_gr[((UINT) 15)], 4);
d11278 1
a11278 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 14))) {
d11280 1
a11280 1
  addr = SUBSI (addr, 4);
d11282 1
a11282 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 14)];
d11287 1
a11287 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 13))) {
d11289 1
a11289 1
  addr = SUBSI (addr, 4);
d11291 1
a11291 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 13)];
d11296 1
a11296 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 12))) {
d11298 1
a11298 1
  addr = SUBSI (addr, 4);
d11300 1
a11300 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 12)];
d11305 1
a11305 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 11))) {
d11307 1
a11307 1
  addr = SUBSI (addr, 4);
d11309 1
a11309 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 11)];
d11314 1
a11314 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 10))) {
d11316 1
a11316 1
  addr = SUBSI (addr, 4);
d11318 1
a11318 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 10)];
d11323 1
a11323 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 9))) {
d11325 1
a11325 1
  addr = SUBSI (addr, 4);
d11327 1
a11327 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 9)];
d11332 1
a11332 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 8))) {
d11334 1
a11334 1
  addr = SUBSI (addr, 4);
d11336 1
a11336 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 8)];
d11341 1
a11341 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 7))) {
d11343 7
a11349 1
  addr = SUBSI (addr, 4);
d11351 1
a11351 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 7)];
d11356 2
a11357 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 6))) {
d11359 7
a11365 1
  addr = SUBSI (addr, 4);
d11367 1
a11367 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 6)];
d11372 2
a11373 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 5))) {
d11375 7
a11381 1
  addr = SUBSI (addr, 4);
d11383 1
a11383 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 5)];
d11388 2
a11389 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 4))) {
d11391 7
a11397 1
  addr = SUBSI (addr, 4);
d11399 1
a11399 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 4)];
d11404 2
a11405 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 3))) {
d11407 7
a11413 1
  addr = SUBSI (addr, 4);
d11415 1
a11415 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 3)];
d11420 2
a11421 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 2))) {
d11423 7
a11429 1
  addr = SUBSI (addr, 4);
d11431 1
a11431 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 2)];
d11436 2
a11437 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 1))) {
d11439 7
a11445 1
  addr = SUBSI (addr, 4);
d11447 1
a11447 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 1)];
d11452 2
a11453 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 0))) {
d11455 1
a11455 1
  addr = SUBSI (addr, 4);
d11457 1
a11457 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 0)];
d11462 4
d11472 1
a11472 1
// ********** used only by: stmdb-wb
d11474 1
a11474 1
  CASE (FRAG_STMDB_WB_MID):
d11484 1
a11484 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
a11485 1
  addr = SUBSI (addr, 4);
d11487 1
a11487 1
    SI opval = ADDSI (current_cpu->hardware.h_gr[((UINT) 15)], 4);
d11490 1
d11493 1
a11493 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 14))) {
a11494 1
  addr = SUBSI (addr, 4);
d11496 1
a11496 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 14)];
d11499 1
d11502 1
a11502 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 13))) {
a11503 1
  addr = SUBSI (addr, 4);
d11505 1
a11505 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 13)];
d11508 1
d11511 1
a11511 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 12))) {
a11512 1
  addr = SUBSI (addr, 4);
d11514 1
a11514 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 12)];
d11517 1
d11520 1
a11520 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 11))) {
a11521 1
  addr = SUBSI (addr, 4);
d11523 1
a11523 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 11)];
d11526 1
d11529 1
a11529 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 10))) {
a11530 1
  addr = SUBSI (addr, 4);
d11532 1
a11532 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 10)];
d11535 1
d11538 1
a11538 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 9))) {
a11539 1
  addr = SUBSI (addr, 4);
d11541 1
a11541 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 9)];
d11544 1
d11547 1
a11547 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 8))) {
a11548 1
  addr = SUBSI (addr, 4);
d11550 1
a11550 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 8)];
d11553 1
d11556 1
a11556 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 7))) {
a11557 1
  addr = SUBSI (addr, 4);
d11559 1
a11559 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 7)];
d11562 1
d11565 1
a11565 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 6))) {
a11566 1
  addr = SUBSI (addr, 4);
d11568 1
a11568 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 6)];
d11571 1
d11574 1
a11574 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 5))) {
a11575 1
  addr = SUBSI (addr, 4);
d11577 1
a11577 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 5)];
d11580 1
d11583 1
a11583 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 4))) {
a11584 1
  addr = SUBSI (addr, 4);
d11586 1
a11586 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 4)];
d11589 1
d11592 1
a11592 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 3))) {
a11593 1
  addr = SUBSI (addr, 4);
d11595 1
a11595 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 3)];
d11598 1
d11601 1
a11601 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 2))) {
a11602 1
  addr = SUBSI (addr, 4);
d11604 1
a11604 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 2)];
d11607 1
d11610 1
a11610 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 1))) {
a11611 1
  addr = SUBSI (addr, 4);
d11613 1
a11613 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 1)];
d11616 1
d11619 1
a11619 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 0))) {
a11620 1
  addr = SUBSI (addr, 4);
d11622 1
a11622 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 0)];
d11625 1
a11627 4
  {
    SI opval = addr;
    * FLD (i_rn) = opval;
  }
d11634 1
a11634 1
// ********** used only by: stmib
d11636 1
a11636 1
  CASE (FRAG_STMIB_MID):
a11637 2
      abuf = vpc;
      vpc = vpc + 1;
a11639 1
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));
d11642 1
a11642 2
  addr = * FLD (i_rn);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 0))) {
d11644 6
a11649 1
  addr = ADDSI (addr, 4);
d11651 1
a11651 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 0)];
d11655 2
d11658 1
a11658 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 1))) {
d11660 6
a11665 1
  addr = ADDSI (addr, 4);
d11667 1
a11667 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 1)];
d11671 2
d11674 1
a11674 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 2))) {
d11676 6
a11681 1
  addr = ADDSI (addr, 4);
d11683 1
a11683 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 2)];
d11687 2
d11690 1
a11690 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 3))) {
d11692 6
a11697 1
  addr = ADDSI (addr, 4);
d11699 1
a11699 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 3)];
d11703 2
d11706 1
a11706 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 4))) {
d11708 6
a11713 1
  addr = ADDSI (addr, 4);
d11715 1
a11715 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 4)];
d11719 2
d11722 1
a11722 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 5))) {
d11724 6
a11729 1
  addr = ADDSI (addr, 4);
d11731 1
a11731 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 5)];
d11735 2
d11738 1
a11738 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 6))) {
d11740 6
a11745 1
  addr = ADDSI (addr, 4);
d11747 1
a11747 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 6)];
d11751 2
d11754 1
a11754 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 7))) {
a11755 1
  addr = ADDSI (addr, 4);
d11757 1
a11757 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 7)];
d11760 1
d11763 14
a11778 1
  addr = ADDSI (addr, 4);
d11783 1
a11787 1
  addr = ADDSI (addr, 4);
d11792 1
a11796 1
  addr = ADDSI (addr, 4);
d11801 1
a11805 1
  addr = ADDSI (addr, 4);
d11810 1
a11814 1
  addr = ADDSI (addr, 4);
d11819 1
a11823 1
  addr = ADDSI (addr, 4);
d11828 1
a11832 1
  addr = ADDSI (addr, 4);
d11837 1
a11841 1
  addr = ADDSI (addr, 4);
d11846 1
d11849 4
d11859 1
a11859 1
// ********** used only by: stmib-wb
d11861 1
a11861 1
  CASE (FRAG_STMIB_WB_MID):
a11872 1
  addr = ADDSI (addr, 4);
d11877 1
a11881 1
  addr = ADDSI (addr, 4);
d11886 1
a11890 1
  addr = ADDSI (addr, 4);
d11895 1
a11899 1
  addr = ADDSI (addr, 4);
d11904 1
a11908 1
  addr = ADDSI (addr, 4);
d11913 1
a11917 1
  addr = ADDSI (addr, 4);
d11922 1
a11926 1
  addr = ADDSI (addr, 4);
d11931 1
a11935 1
  addr = ADDSI (addr, 4);
d11940 1
d11945 1
a11945 1
  addr = ADDSI (addr, 4);
d11950 7
d11961 1
a11961 1
  addr = ADDSI (addr, 4);
d11966 7
d11977 1
a11977 1
  addr = ADDSI (addr, 4);
d11982 7
d11993 1
a11993 1
  addr = ADDSI (addr, 4);
d11998 7
d12009 1
a12009 1
  addr = ADDSI (addr, 4);
d12014 7
d12025 1
a12025 1
  addr = ADDSI (addr, 4);
d12030 7
d12041 1
a12041 1
  addr = ADDSI (addr, 4);
d12046 7
a12056 1
  addr = ADDSI (addr, 4);
d12061 1
d12074 1
a12074 1
// ********** used only by: stmia
d12076 1
a12076 1
  CASE (FRAG_STMIA_MID):
d12086 1
a12086 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 0))) {
d12089 1
a12089 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 0)];
d12092 1
a12092 1
  addr = ADDSI (addr, 4);
d12095 1
a12095 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 1))) {
d12098 1
a12098 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 1)];
d12101 1
a12101 1
  addr = ADDSI (addr, 4);
d12104 1
a12104 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 2))) {
d12107 1
a12107 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 2)];
d12110 1
a12110 1
  addr = ADDSI (addr, 4);
d12113 1
a12113 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 3))) {
d12116 1
a12116 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 3)];
d12119 1
a12119 1
  addr = ADDSI (addr, 4);
d12122 1
a12122 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 4))) {
d12125 1
a12125 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 4)];
d12128 1
a12128 1
  addr = ADDSI (addr, 4);
d12131 1
a12131 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 5))) {
d12134 1
a12134 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 5)];
d12137 1
a12137 1
  addr = ADDSI (addr, 4);
d12140 1
a12140 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 6))) {
d12143 1
a12143 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 6)];
d12146 1
a12146 1
  addr = ADDSI (addr, 4);
d12149 1
a12149 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 7))) {
d12152 1
a12152 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 7)];
d12155 1
a12155 1
  addr = ADDSI (addr, 4);
d12158 1
a12158 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 8))) {
d12161 1
a12161 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 8)];
d12164 1
a12164 1
  addr = ADDSI (addr, 4);
d12167 1
a12167 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 9))) {
d12170 1
a12170 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 9)];
d12173 1
a12173 1
  addr = ADDSI (addr, 4);
d12176 1
a12176 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 10))) {
d12179 1
a12179 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 10)];
d12182 1
a12182 1
  addr = ADDSI (addr, 4);
d12185 1
a12185 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 11))) {
d12188 1
a12188 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 11)];
d12191 1
a12191 1
  addr = ADDSI (addr, 4);
d12194 1
a12194 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 12))) {
d12197 1
a12197 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 12)];
d12200 1
a12200 1
  addr = ADDSI (addr, 4);
d12203 1
a12203 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 13))) {
d12206 1
a12206 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 13)];
d12209 1
a12209 1
  addr = ADDSI (addr, 4);
d12212 1
a12212 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 14))) {
d12215 1
a12215 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 14)];
d12218 1
a12218 1
  addr = ADDSI (addr, 4);
d12221 1
a12221 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
d12224 1
a12224 1
    SI opval = ADDSI (current_cpu->hardware.h_gr[((UINT) 15)], 4);
d12227 1
a12227 1
  addr = ADDSI (addr, 4);
d12236 1
a12236 1
// ********** used only by: stmia-wb
d12238 1
a12238 1
  CASE (FRAG_STMIA_WB_MID):
a12239 2
      abuf = vpc;
      vpc = vpc + 1;
a12241 1
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));
d12244 1
a12244 2
  addr = * FLD (i_rn);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 0))) {
d12246 6
d12253 1
a12253 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 0)];
d12256 2
a12257 1
  addr = ADDSI (addr, 4);
d12260 1
a12260 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 1))) {
d12262 6
d12269 1
a12269 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 1)];
d12272 2
a12273 1
  addr = ADDSI (addr, 4);
d12276 1
a12276 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 2))) {
d12278 6
d12285 1
a12285 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 2)];
d12288 2
a12289 1
  addr = ADDSI (addr, 4);
d12292 1
a12292 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 3))) {
d12294 6
d12301 1
a12301 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 3)];
d12304 2
a12305 1
  addr = ADDSI (addr, 4);
d12308 1
a12308 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 4))) {
d12310 1
d12312 1
a12312 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 4)];
d12315 1
a12315 5
  addr = ADDSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 5))) {
{
d12317 1
a12317 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 5)];
d12320 2
a12321 1
  addr = ADDSI (addr, 4);
d12324 1
a12324 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 6))) {
d12326 1
d12328 1
a12328 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 6)];
d12331 1
a12331 5
  addr = ADDSI (addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 7))) {
{
d12333 1
a12333 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 7)];
d12336 2
a12337 1
  addr = ADDSI (addr, 4);
d12342 1
d12347 7
a12353 1
  addr = ADDSI (addr, 4);
d12356 1
a12356 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 9))) {
d12359 1
a12359 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 9)];
d12362 1
a12362 1
  addr = ADDSI (addr, 4);
d12365 1
a12365 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 10))) {
d12368 1
a12368 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 10)];
d12371 1
a12371 1
  addr = ADDSI (addr, 4);
d12374 1
a12374 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 11))) {
d12377 1
a12377 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 11)];
d12380 1
a12380 1
  addr = ADDSI (addr, 4);
d12383 1
a12383 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 12))) {
d12386 1
a12386 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 12)];
d12389 1
a12389 1
  addr = ADDSI (addr, 4);
d12392 1
a12392 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 13))) {
d12395 1
a12395 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 13)];
d12398 1
a12398 1
  addr = ADDSI (addr, 4);
d12401 1
a12401 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 14))) {
d12404 1
a12404 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 14)];
d12407 1
a12407 1
  addr = ADDSI (addr, 4);
d12410 1
a12410 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
d12413 1
a12413 1
    SI opval = ADDSI (current_cpu->hardware.h_gr[((UINT) 15)], 4);
d12416 1
a12416 1
  addr = ADDSI (addr, 4);
d12419 2
d12422 2
a12423 2
    SI opval = addr;
    * FLD (i_rn) = opval;
d12425 3
d12434 1
a12434 1
// ********** used only by: stmda
d12436 1
a12436 1
  CASE (FRAG_STMDA_MID):
a12437 2
      abuf = vpc;
      vpc = vpc + 1;
a12439 1
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, GET_ATTR (R15_OFFSET));
a12441 10
  addr = * FLD (i_rn);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
{
  {
    SI opval = ADDSI (current_cpu->hardware.h_gr[((UINT) 15)], 4);
    current_cpu->SETMEMSI (pc, addr, opval);
  }
  addr = SUBSI (addr, 4);
}
}
d12577 4
d12587 1
a12587 1
// ********** used only by: stmda-wb
d12589 1
a12589 1
  CASE (FRAG_STMDA_WB_MID):
d12610 1
d12615 6
d12626 1
d12631 6
d12642 1
d12647 6
d12658 1
d12663 6
d12674 1
d12679 6
d12690 1
d12695 6
d12706 1
d12711 6
@


1.1
log
@* public snapshot of sid simulator
@
text
@d1764 1
a1764 1
    if (current_cpu->stop_after_insns_p (abuf->fields.chain.insn_count))
d1788 1
a1788 1
    if (current_cpu->stop_after_insns_p (abuf->fields.chain.insn_count))
@

