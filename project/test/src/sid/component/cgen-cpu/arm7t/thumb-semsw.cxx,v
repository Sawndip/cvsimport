head	1.7;
access;
symbols
	sid-snapshot-20180601:1.7
	sid-snapshot-20180501:1.7
	sid-snapshot-20180401:1.7
	sid-snapshot-20180301:1.7
	sid-snapshot-20180201:1.7
	sid-snapshot-20180101:1.7
	sid-snapshot-20171201:1.7
	sid-snapshot-20171101:1.7
	sid-snapshot-20171001:1.7
	sid-snapshot-20170901:1.7
	sid-snapshot-20170801:1.7
	sid-snapshot-20170701:1.7
	sid-snapshot-20170601:1.7
	sid-snapshot-20170501:1.7
	sid-snapshot-20170401:1.7
	sid-snapshot-20170301:1.7
	sid-snapshot-20170201:1.7
	sid-snapshot-20170101:1.7
	sid-snapshot-20161201:1.7
	sid-snapshot-20161101:1.7
	sid-snapshot-20160901:1.7
	sid-snapshot-20160801:1.7
	sid-snapshot-20160701:1.7
	sid-snapshot-20160601:1.7
	sid-snapshot-20160501:1.7
	sid-snapshot-20160401:1.7
	sid-snapshot-20160301:1.7
	sid-snapshot-20160201:1.7
	sid-snapshot-20160101:1.7
	sid-snapshot-20151201:1.7
	sid-snapshot-20151101:1.7
	sid-snapshot-20151001:1.7
	sid-snapshot-20150901:1.7
	sid-snapshot-20150801:1.7
	sid-snapshot-20150701:1.7
	sid-snapshot-20150601:1.7
	sid-snapshot-20150501:1.7
	sid-snapshot-20150401:1.7
	sid-snapshot-20150301:1.7
	sid-snapshot-20150201:1.7
	sid-snapshot-20150101:1.7
	sid-snapshot-20141201:1.7
	sid-snapshot-20141101:1.7
	sid-snapshot-20141001:1.7
	sid-snapshot-20140901:1.7
	sid-snapshot-20140801:1.7
	sid-snapshot-20140701:1.7
	sid-snapshot-20140601:1.7
	sid-snapshot-20140501:1.7
	sid-snapshot-20140401:1.7
	sid-snapshot-20140301:1.7
	sid-snapshot-20140201:1.7
	sid-snapshot-20140101:1.7
	sid-snapshot-20131201:1.7
	sid-snapshot-20131101:1.7
	sid-snapshot-20131001:1.7
	sid-snapshot-20130901:1.7
	sid-snapshot-20130801:1.7
	sid-snapshot-20130701:1.7
	sid-snapshot-20130601:1.7
	sid-snapshot-20130501:1.7
	sid-snapshot-20130401:1.7
	sid-snapshot-20130301:1.7
	sid-snapshot-20130201:1.7
	sid-snapshot-20130101:1.7
	sid-snapshot-20121201:1.7
	sid-snapshot-20121101:1.7
	sid-snapshot-20121001:1.7
	sid-snapshot-20120901:1.7
	sid-snapshot-20120801:1.7
	sid-snapshot-20120701:1.7
	sid-snapshot-20120601:1.7
	sid-snapshot-20120501:1.7
	sid-snapshot-20120401:1.7
	sid-snapshot-20120301:1.7
	sid-snapshot-20120201:1.7
	sid-snapshot-20120101:1.7
	sid-snapshot-20111201:1.7
	sid-snapshot-20111101:1.7
	sid-snapshot-20111001:1.7
	sid-snapshot-20110901:1.7
	sid-snapshot-20110801:1.7
	sid-snapshot-20110701:1.7
	sid-snapshot-20110601:1.7
	sid-snapshot-20110501:1.7
	sid-snapshot-20110401:1.7
	sid-snapshot-20110301:1.7
	sid-snapshot-20110201:1.7
	sid-snapshot-20110101:1.7
	sid-snapshot-20101201:1.7
	sid-snapshot-20101101:1.7
	sid-snapshot-20101001:1.7
	sid-snapshot-20100901:1.7
	sid-snapshot-20100801:1.7
	sid-snapshot-20100701:1.7
	sid-snapshot-20100601:1.7
	sid-snapshot-20100501:1.7
	sid-snapshot-20100401:1.7
	sid-snapshot-20100301:1.7
	sid-snapshot-20100201:1.6
	sid-snapshot-20100101:1.5
	sid-snapshot-20091201:1.5
	sid-snapshot-20091101:1.5
	sid-snapshot-20091001:1.4
	sid-snapshot-20090901:1.4
	sid-snapshot-20090801:1.4
	sid-snapshot-20090701:1.4
	sid-snapshot-20090601:1.4
	sid-snapshot-20090501:1.4
	sid-snapshot-20090401:1.4
	sid-snapshot-20090301:1.4
	sid-snapshot-20090201:1.4
	sid-snapshot-20090101:1.4
	sid-snapshot-20081201:1.4
	sid-snapshot-20081101:1.4
	sid-snapshot-20081001:1.4
	sid-snapshot-20080901:1.4
	sid-snapshot-20080801:1.4
	sid-snapshot-20080701:1.4
	sid-snapshot-20080601:1.4
	sid-snapshot-20080501:1.4
	sid-snapshot-20080403:1.4
	sid-snapshot-20080401:1.4
	sid-snapshot-20080301:1.4
	sid-snapshot-20080201:1.4
	sid-snapshot-20080101:1.4
	sid-snapshot-20071201:1.4
	sid-snapshot-20071101:1.4
	sid-snapshot-20071001:1.4
	sid-20020905-branchpoint:1.2
	sid-20020905-branch:1.2.0.2
	cygnus_cvs_20020108_pre:1.2;
locks; strict;
comment	@// @;


1.7
date	2010.02.12.02.33.04;	author devans;	state Exp;
branches;
next	1.6;

1.6
date	2010.01.02.21.18.54;	author devans;	state Exp;
branches;
next	1.5;

1.5
date	2009.10.24.00.45.55;	author devans;	state Exp;
branches;
next	1.4;

1.4
date	2003.07.05.17.07.20;	author devans;	state Exp;
branches;
next	1.3;

1.3
date	2002.09.07.14.42.49;	author fche;	state Exp;
branches;
next	1.2;

1.2
date	2001.03.01.19.15.32;	author fche;	state Exp;
branches;
next	1.1;

1.1
date	2000.12.07.19.30.48;	author fche;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Regenerate to pick up recent cgen changes.
[minor changes like removing K&R support, more consistent name for sfmt_empty]
@
text
@/* Simulator instruction semantics for thumb.

THIS FILE IS MACHINE GENERATED WITH CGEN.

Copyright (C) 2000-2010 Red Hat, Inc.

This file is part of the Red Hat simulators.


*/


#include "arm7f.h"

using namespace arm7f; // FIXME: namespace organization still wip

#define GET_ATTR(name) GET_ATTR_##name ()


void
arm7f_cpu::thumb_pbb_run ()
{
  arm7f_cpu* current_cpu = this;
  thumb_scache* vpc;
  // These two are used to pass data from cti insns to the cti-chain insn.
  PCADDR pbb_br_npc;
  branch_status pbb_br_status;

#ifdef __GNUC__
{
  static const struct sem_labels
    {
      enum thumb_insn_type insn;
      void *label;
    }
  labels[] = 
    {
      { THUMB_INSN_X_AFTER, && case_INSN_X_AFTER },
      { THUMB_INSN_X_BEFORE, && case_INSN_X_BEFORE },
      { THUMB_INSN_X_CTI_CHAIN, && case_INSN_X_CTI_CHAIN },
      { THUMB_INSN_X_CHAIN, && case_INSN_X_CHAIN },
      { THUMB_INSN_X_BEGIN, && case_INSN_X_BEGIN },
      { THUMB_INSN_X_INVALID, && case_INSN_X_INVALID },
      { THUMB_INSN_LSL, && case_INSN_LSL },
      { THUMB_INSN_LSR, && case_INSN_LSR },
      { THUMB_INSN_ASR, && case_INSN_ASR },
      { THUMB_INSN_ADD, && case_INSN_ADD },
      { THUMB_INSN_ADDI, && case_INSN_ADDI },
      { THUMB_INSN_SUB, && case_INSN_SUB },
      { THUMB_INSN_SUBI, && case_INSN_SUBI },
      { THUMB_INSN_MOV, && case_INSN_MOV },
      { THUMB_INSN_CMP, && case_INSN_CMP },
      { THUMB_INSN_ADDI8, && case_INSN_ADDI8 },
      { THUMB_INSN_SUBI8, && case_INSN_SUBI8 },
      { THUMB_INSN_ALU_AND, && case_INSN_ALU_AND },
      { THUMB_INSN_ALU_EOR, && case_INSN_ALU_EOR },
      { THUMB_INSN_ALU_LSL, && case_INSN_ALU_LSL },
      { THUMB_INSN_ALU_LSR, && case_INSN_ALU_LSR },
      { THUMB_INSN_ALU_ASR, && case_INSN_ALU_ASR },
      { THUMB_INSN_ALU_ROR, && case_INSN_ALU_ROR },
      { THUMB_INSN_ALU_ADC, && case_INSN_ALU_ADC },
      { THUMB_INSN_ALU_SBC, && case_INSN_ALU_SBC },
      { THUMB_INSN_ALU_TST, && case_INSN_ALU_TST },
      { THUMB_INSN_ALU_NEG, && case_INSN_ALU_NEG },
      { THUMB_INSN_ALU_CMP, && case_INSN_ALU_CMP },
      { THUMB_INSN_ALU_CMN, && case_INSN_ALU_CMN },
      { THUMB_INSN_ALU_ORR, && case_INSN_ALU_ORR },
      { THUMB_INSN_ALU_MUL, && case_INSN_ALU_MUL },
      { THUMB_INSN_ALU_BIC, && case_INSN_ALU_BIC },
      { THUMB_INSN_ALU_MVN, && case_INSN_ALU_MVN },
      { THUMB_INSN_ADD_RD_HS, && case_INSN_ADD_RD_HS },
      { THUMB_INSN_ADD_HD_RS, && case_INSN_ADD_HD_RS },
      { THUMB_INSN_ADD_HD_HS, && case_INSN_ADD_HD_HS },
      { THUMB_INSN_CMP_RD_HS, && case_INSN_CMP_RD_HS },
      { THUMB_INSN_CMP_HD_RS, && case_INSN_CMP_HD_RS },
      { THUMB_INSN_CMP_HD_HS, && case_INSN_CMP_HD_HS },
      { THUMB_INSN_MOV_RD_HS, && case_INSN_MOV_RD_HS },
      { THUMB_INSN_MOV_HD_RS, && case_INSN_MOV_HD_RS },
      { THUMB_INSN_MOV_HD_HS, && case_INSN_MOV_HD_HS },
      { THUMB_INSN_BX_RS, && case_INSN_BX_RS },
      { THUMB_INSN_BX_HS, && case_INSN_BX_HS },
      { THUMB_INSN_LDR_PC, && case_INSN_LDR_PC },
      { THUMB_INSN_STR, && case_INSN_STR },
      { THUMB_INSN_STRB, && case_INSN_STRB },
      { THUMB_INSN_LDR, && case_INSN_LDR },
      { THUMB_INSN_LDRB, && case_INSN_LDRB },
      { THUMB_INSN_STRH, && case_INSN_STRH },
      { THUMB_INSN_LDRH, && case_INSN_LDRH },
      { THUMB_INSN_LDSB, && case_INSN_LDSB },
      { THUMB_INSN_LDSH, && case_INSN_LDSH },
      { THUMB_INSN_STR_IMM, && case_INSN_STR_IMM },
      { THUMB_INSN_LDR_IMM, && case_INSN_LDR_IMM },
      { THUMB_INSN_STRB_IMM, && case_INSN_STRB_IMM },
      { THUMB_INSN_LDRB_IMM, && case_INSN_LDRB_IMM },
      { THUMB_INSN_STRH_IMM, && case_INSN_STRH_IMM },
      { THUMB_INSN_LDRH_IMM, && case_INSN_LDRH_IMM },
      { THUMB_INSN_STR_SPREL, && case_INSN_STR_SPREL },
      { THUMB_INSN_LDR_SPREL, && case_INSN_LDR_SPREL },
      { THUMB_INSN_LDA_PC, && case_INSN_LDA_PC },
      { THUMB_INSN_LDA_SP, && case_INSN_LDA_SP },
      { THUMB_INSN_ADD_SP, && case_INSN_ADD_SP },
      { THUMB_INSN_SUB_SP, && case_INSN_SUB_SP },
      { THUMB_INSN_PUSH, && case_INSN_PUSH },
      { THUMB_INSN_PUSH_LR, && case_INSN_PUSH_LR },
      { THUMB_INSN_POP, && case_INSN_POP },
      { THUMB_INSN_POP_PC, && case_INSN_POP_PC },
      { THUMB_INSN_STMIA, && case_INSN_STMIA },
      { THUMB_INSN_LDMIA, && case_INSN_LDMIA },
      { THUMB_INSN_BEQ, && case_INSN_BEQ },
      { THUMB_INSN_BNE, && case_INSN_BNE },
      { THUMB_INSN_BCS, && case_INSN_BCS },
      { THUMB_INSN_BCC, && case_INSN_BCC },
      { THUMB_INSN_BMI, && case_INSN_BMI },
      { THUMB_INSN_BPL, && case_INSN_BPL },
      { THUMB_INSN_BVS, && case_INSN_BVS },
      { THUMB_INSN_BVC, && case_INSN_BVC },
      { THUMB_INSN_BHI, && case_INSN_BHI },
      { THUMB_INSN_BLS, && case_INSN_BLS },
      { THUMB_INSN_BGE, && case_INSN_BGE },
      { THUMB_INSN_BLT, && case_INSN_BLT },
      { THUMB_INSN_BGT, && case_INSN_BGT },
      { THUMB_INSN_BLE, && case_INSN_BLE },
      { THUMB_INSN_SWI, && case_INSN_SWI },
      { THUMB_INSN_B, && case_INSN_B },
      { THUMB_INSN_BL_HI, && case_INSN_BL_HI },
      { THUMB_INSN_BL_LO, && case_INSN_BL_LO },
    { (thumb_insn_type) 0, 0 }
  };

  if (! thumb_idesc::idesc_table_initialized_p)
    {
      for (int i=0; labels[i].label != 0; i++)
	thumb_idesc::idesc_table[labels[i].insn].cgoto.label = labels[i].label; 

      // confirm that table is all filled up
      for (int i = 0; i <= THUMB_INSN_BL_LO; i++)
        assert (thumb_idesc::idesc_table[i].cgoto.label != 0);

      // Initialize the compiler virtual insn.
      current_cpu->thumb_engine.compile_begin_insn (current_cpu);

      thumb_idesc::idesc_table_initialized_p = true;
    }
}
#endif

#ifdef __GNUC__
#define CASE(X) case_##X
// Branch to next handler without going around main loop.
#define NEXT(vpc) goto * vpc->execute.cgoto.label;
// Break out of threaded interpreter and return to "main loop".
#define BREAK(vpc) goto end_switch
#else
#define CASE(X) case THUMB_##X
#define NEXT(vpc) goto restart
#define BREAK(vpc) break
#endif

  // Get next insn to execute.
  vpc = current_cpu->thumb_engine.get_next_vpc (current_cpu->h_pc_get ());

restart:
#ifdef __GNUC__
  goto * vpc->execute.cgoto.label;
#else
  switch (vpc->idesc->sem_index)
#endif

  {
// ********** --after--

  CASE (INSN_X_AFTER):
    {
      thumb_scache* abuf = vpc;
#define FLD(f) abuf->fields.sfmt_empty.f
      PCADDR pc = abuf->addr;
      vpc = vpc + 1;

  {
    current_cpu->thumb_engine.pbb_after (current_cpu, abuf);
  }

#undef FLD
    }
    NEXT (vpc);

// ********** --before--

  CASE (INSN_X_BEFORE):
    {
      thumb_scache* abuf = vpc;
#define FLD(f) abuf->fields.sfmt_empty.f
      PCADDR pc = abuf->addr;
      vpc = vpc + 1;

  {
    current_cpu->thumb_engine.pbb_before (current_cpu, abuf);
  }

#undef FLD
    }
    NEXT (vpc);

// ********** --cti-chain--

  CASE (INSN_X_CTI_CHAIN):
    {
      thumb_scache* abuf = vpc;
#define FLD(f) abuf->fields.sfmt_empty.f
      PCADDR pc = abuf->addr;
      vpc = vpc + 1;

  {
    vpc = current_cpu->thumb_engine.pbb_cti_chain (current_cpu, abuf, pbb_br_status, pbb_br_npc);
    // If we don't have to give up control, don't.
    // Note that we may overrun step_insn_count since we do the test at the
    // end of the block.  This is defined to be ok.
    if (UNLIKELY(current_cpu->stop_after_insns_p (abuf->fields.chain.insn_count)))
      BREAK (vpc);
  }

#undef FLD
    }
    NEXT (vpc);

// ********** --chain--

  CASE (INSN_X_CHAIN):
    {
      thumb_scache* abuf = vpc;
#define FLD(f) abuf->fields.sfmt_empty.f
      PCADDR pc = abuf->addr;
      vpc = vpc + 1;

  {
    vpc = current_cpu->thumb_engine.pbb_chain (current_cpu, abuf);
    // If we don't have to give up control, don't.
    // Note that we may overrun step_insn_count since we do the test at the
    // end of the block.  This is defined to be ok.
    if (UNLIKELY(current_cpu->stop_after_insns_p (abuf->fields.chain.insn_count)))
      BREAK (vpc);
  }

#undef FLD
    }
    NEXT (vpc);

// ********** --begin--

  CASE (INSN_X_BEGIN):
    {
      thumb_scache* abuf = vpc;
#define FLD(f) abuf->fields.sfmt_empty.f
      PCADDR pc = abuf->addr;
      vpc = vpc + 1;

  {
    vpc = current_cpu->thumb_pbb_begin (current_cpu->h_pc_get ());
  }

#undef FLD
    }
    NEXT (vpc);

// ********** --invalid--

  CASE (INSN_X_INVALID):
    {
      thumb_scache* abuf = vpc;
#define FLD(f) abuf->fields.sfmt_empty.f
      PCADDR pc = abuf->addr;
      vpc = vpc + 1;

  {
    current_cpu->invalid_insn (pc);
    assert (0);
    /* NOTREACHED */
  }

#undef FLD
    }
    NEXT (vpc);

// ********** lsl $rd,$rs,#$offset5

  CASE (INSN_LSL):
    {
      thumb_scache* abuf = vpc;
#define FLD(f) abuf->fields.sfmt_lsl.f
      PCADDR pc = abuf->addr;
      vpc = vpc + 1;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, 4);

{
  BI tmp_carry_out;
  tmp_carry_out = current_cpu->compute_carry_out_immshift (current_cpu->thumb_h_gr_t_get (FLD (f_rs)), SHIFT_TYPE_LSL, FLD (f_offset5), current_cpu->hardware.h_cbit);
current_cpu->thumb_h_gr_t_set (FLD (f_rd), SLLSI (current_cpu->thumb_h_gr_t_get (FLD (f_rs)), FLD (f_offset5)));
{
{
current_cpu->hardware.h_zbit = EQSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), 0);
current_cpu->hardware.h_nbit = LTSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), 0);
}
current_cpu->hardware.h_cbit = tmp_carry_out;
}
}

#undef FLD
    }
    NEXT (vpc);

// ********** lsr $rd,$rs,#$offset5

  CASE (INSN_LSR):
    {
      thumb_scache* abuf = vpc;
#define FLD(f) abuf->fields.sfmt_lsl.f
      PCADDR pc = abuf->addr;
      vpc = vpc + 1;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, 4);

{
  BI tmp_carry_out;
  tmp_carry_out = current_cpu->compute_carry_out_immshift (current_cpu->thumb_h_gr_t_get (FLD (f_rs)), SHIFT_TYPE_LSR, FLD (f_offset5), current_cpu->hardware.h_cbit);
current_cpu->thumb_h_gr_t_set (FLD (f_rd), SRLSI (current_cpu->thumb_h_gr_t_get (FLD (f_rs)), FLD (f_offset5)));
{
{
current_cpu->hardware.h_zbit = EQSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), 0);
current_cpu->hardware.h_nbit = LTSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), 0);
}
current_cpu->hardware.h_cbit = tmp_carry_out;
}
}

#undef FLD
    }
    NEXT (vpc);

// ********** asr $rd,$rs,#$offset5

  CASE (INSN_ASR):
    {
      thumb_scache* abuf = vpc;
#define FLD(f) abuf->fields.sfmt_lsl.f
      PCADDR pc = abuf->addr;
      vpc = vpc + 1;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, 4);

{
  BI tmp_carry_out;
  tmp_carry_out = current_cpu->compute_carry_out_immshift (current_cpu->thumb_h_gr_t_get (FLD (f_rs)), SHIFT_TYPE_ASR, FLD (f_offset5), current_cpu->hardware.h_cbit);
current_cpu->thumb_h_gr_t_set (FLD (f_rd), SRASI (current_cpu->thumb_h_gr_t_get (FLD (f_rs)), FLD (f_offset5)));
{
{
current_cpu->hardware.h_zbit = EQSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), 0);
current_cpu->hardware.h_nbit = LTSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), 0);
}
current_cpu->hardware.h_cbit = tmp_carry_out;
}
}

#undef FLD
    }
    NEXT (vpc);

// ********** add $rd,$rs,$rn

  CASE (INSN_ADD):
    {
      thumb_scache* abuf = vpc;
#define FLD(f) abuf->fields.sfmt_add.f
      PCADDR pc = abuf->addr;
      vpc = vpc + 1;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, 4);

{
{
  SI tmp_result;
  tmp_result = ADDCSI (current_cpu->thumb_h_gr_t_get (FLD (f_rs)), current_cpu->thumb_h_gr_t_get (FLD (f_rn)), 0);
{
current_cpu->hardware.h_zbit = EQSI (tmp_result, 0);
current_cpu->hardware.h_nbit = LTSI (tmp_result, 0);
}
current_cpu->hardware.h_cbit = ADDCFSI (current_cpu->thumb_h_gr_t_get (FLD (f_rs)), current_cpu->thumb_h_gr_t_get (FLD (f_rn)), 0);
current_cpu->hardware.h_vbit = ADDOFSI (current_cpu->thumb_h_gr_t_get (FLD (f_rs)), current_cpu->thumb_h_gr_t_get (FLD (f_rn)), 0);
}
current_cpu->thumb_h_gr_t_set (FLD (f_rd), ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_rs)), current_cpu->thumb_h_gr_t_get (FLD (f_rn))));
}

#undef FLD
    }
    NEXT (vpc);

// ********** add $rd,$rs,#$offset3

  CASE (INSN_ADDI):
    {
      thumb_scache* abuf = vpc;
#define FLD(f) abuf->fields.sfmt_addi.f
      PCADDR pc = abuf->addr;
      vpc = vpc + 1;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, 4);

{
{
  SI tmp_result;
  tmp_result = ADDCSI (current_cpu->thumb_h_gr_t_get (FLD (f_rs)), FLD (f_offset3), 0);
{
current_cpu->hardware.h_zbit = EQSI (tmp_result, 0);
current_cpu->hardware.h_nbit = LTSI (tmp_result, 0);
}
current_cpu->hardware.h_cbit = ADDCFSI (current_cpu->thumb_h_gr_t_get (FLD (f_rs)), FLD (f_offset3), 0);
current_cpu->hardware.h_vbit = ADDOFSI (current_cpu->thumb_h_gr_t_get (FLD (f_rs)), FLD (f_offset3), 0);
}
current_cpu->thumb_h_gr_t_set (FLD (f_rd), ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_rs)), FLD (f_offset3)));
}

#undef FLD
    }
    NEXT (vpc);

// ********** sub $rd,$rs,$rn

  CASE (INSN_SUB):
    {
      thumb_scache* abuf = vpc;
#define FLD(f) abuf->fields.sfmt_add.f
      PCADDR pc = abuf->addr;
      vpc = vpc + 1;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, 4);

{
{
  SI tmp_result;
  tmp_result = SUBCSI (current_cpu->thumb_h_gr_t_get (FLD (f_rs)), current_cpu->thumb_h_gr_t_get (FLD (f_rn)), 0);
{
current_cpu->hardware.h_zbit = EQSI (tmp_result, 0);
current_cpu->hardware.h_nbit = LTSI (tmp_result, 0);
}
current_cpu->hardware.h_cbit = NOTBI (SUBCFSI (current_cpu->thumb_h_gr_t_get (FLD (f_rs)), current_cpu->thumb_h_gr_t_get (FLD (f_rn)), 0));
current_cpu->hardware.h_vbit = SUBOFSI (current_cpu->thumb_h_gr_t_get (FLD (f_rs)), current_cpu->thumb_h_gr_t_get (FLD (f_rn)), 0);
}
current_cpu->thumb_h_gr_t_set (FLD (f_rd), SUBSI (current_cpu->thumb_h_gr_t_get (FLD (f_rs)), current_cpu->thumb_h_gr_t_get (FLD (f_rn))));
}

#undef FLD
    }
    NEXT (vpc);

// ********** sub $rd,$rs,#$offset3

  CASE (INSN_SUBI):
    {
      thumb_scache* abuf = vpc;
#define FLD(f) abuf->fields.sfmt_addi.f
      PCADDR pc = abuf->addr;
      vpc = vpc + 1;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, 4);

{
{
  SI tmp_result;
  tmp_result = SUBCSI (current_cpu->thumb_h_gr_t_get (FLD (f_rs)), FLD (f_offset3), 0);
{
current_cpu->hardware.h_zbit = EQSI (tmp_result, 0);
current_cpu->hardware.h_nbit = LTSI (tmp_result, 0);
}
current_cpu->hardware.h_cbit = NOTBI (SUBCFSI (current_cpu->thumb_h_gr_t_get (FLD (f_rs)), FLD (f_offset3), 0));
current_cpu->hardware.h_vbit = SUBOFSI (current_cpu->thumb_h_gr_t_get (FLD (f_rs)), FLD (f_offset3), 0);
}
current_cpu->thumb_h_gr_t_set (FLD (f_rd), SUBSI (current_cpu->thumb_h_gr_t_get (FLD (f_rs)), FLD (f_offset3)));
}

#undef FLD
    }
    NEXT (vpc);

// ********** mov ${bit10-rd},#$offset8

  CASE (INSN_MOV):
    {
      thumb_scache* abuf = vpc;
#define FLD(f) abuf->fields.sfmt_mov.f
      PCADDR pc = abuf->addr;
      vpc = vpc + 1;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, 4);

{
current_cpu->thumb_h_gr_t_set (FLD (f_bit10_rd), FLD (f_offset8));
{
current_cpu->hardware.h_zbit = EQSI (current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rd)), 0);
current_cpu->hardware.h_nbit = LTSI (current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rd)), 0);
}
}

#undef FLD
    }
    NEXT (vpc);

// ********** cmp ${bit10-rd},#$offset8

  CASE (INSN_CMP):
    {
      thumb_scache* abuf = vpc;
#define FLD(f) abuf->fields.sfmt_mov.f
      PCADDR pc = abuf->addr;
      vpc = vpc + 1;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, 4);

{
  SI tmp_result;
  tmp_result = SUBCSI (current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rd)), FLD (f_offset8), 0);
{
current_cpu->hardware.h_zbit = EQSI (tmp_result, 0);
current_cpu->hardware.h_nbit = LTSI (tmp_result, 0);
}
current_cpu->hardware.h_cbit = NOTBI (SUBCFSI (current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rd)), FLD (f_offset8), 0));
current_cpu->hardware.h_vbit = SUBOFSI (current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rd)), FLD (f_offset8), 0);
}

#undef FLD
    }
    NEXT (vpc);

// ********** add ${bit10-rd},#$offset8

  CASE (INSN_ADDI8):
    {
      thumb_scache* abuf = vpc;
#define FLD(f) abuf->fields.sfmt_mov.f
      PCADDR pc = abuf->addr;
      vpc = vpc + 1;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, 4);

{
{
  SI tmp_result;
  tmp_result = ADDCSI (current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rd)), FLD (f_offset8), 0);
{
current_cpu->hardware.h_zbit = EQSI (tmp_result, 0);
current_cpu->hardware.h_nbit = LTSI (tmp_result, 0);
}
current_cpu->hardware.h_cbit = ADDCFSI (current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rd)), FLD (f_offset8), 0);
current_cpu->hardware.h_vbit = ADDOFSI (current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rd)), FLD (f_offset8), 0);
}
current_cpu->thumb_h_gr_t_set (FLD (f_bit10_rd), ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rd)), FLD (f_offset8)));
}

#undef FLD
    }
    NEXT (vpc);

// ********** sub ${bit10-rd},#$offset8

  CASE (INSN_SUBI8):
    {
      thumb_scache* abuf = vpc;
#define FLD(f) abuf->fields.sfmt_mov.f
      PCADDR pc = abuf->addr;
      vpc = vpc + 1;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, 4);

{
{
  SI tmp_result;
  tmp_result = SUBCSI (current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rd)), FLD (f_offset8), 0);
{
current_cpu->hardware.h_zbit = EQSI (tmp_result, 0);
current_cpu->hardware.h_nbit = LTSI (tmp_result, 0);
}
current_cpu->hardware.h_cbit = NOTBI (SUBCFSI (current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rd)), FLD (f_offset8), 0));
current_cpu->hardware.h_vbit = SUBOFSI (current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rd)), FLD (f_offset8), 0);
}
current_cpu->thumb_h_gr_t_set (FLD (f_bit10_rd), SUBSI (current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rd)), FLD (f_offset8)));
}

#undef FLD
    }
    NEXT (vpc);

// ********** and $rd,$rs

  CASE (INSN_ALU_AND):
    {
      thumb_scache* abuf = vpc;
#define FLD(f) abuf->fields.sfmt_addi.f
      PCADDR pc = abuf->addr;
      vpc = vpc + 1;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, 4);

{
current_cpu->thumb_h_gr_t_set (FLD (f_rd), ANDSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), current_cpu->thumb_h_gr_t_get (FLD (f_rs))));
{
current_cpu->hardware.h_zbit = EQSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), 0);
current_cpu->hardware.h_nbit = LTSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), 0);
}
}

#undef FLD
    }
    NEXT (vpc);

// ********** eor $rd,$rs

  CASE (INSN_ALU_EOR):
    {
      thumb_scache* abuf = vpc;
#define FLD(f) abuf->fields.sfmt_addi.f
      PCADDR pc = abuf->addr;
      vpc = vpc + 1;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, 4);

{
current_cpu->thumb_h_gr_t_set (FLD (f_rd), XORSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), current_cpu->thumb_h_gr_t_get (FLD (f_rs))));
{
current_cpu->hardware.h_zbit = EQSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), 0);
current_cpu->hardware.h_nbit = LTSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), 0);
}
}

#undef FLD
    }
    NEXT (vpc);

// ********** lsl $rd,$rs

  CASE (INSN_ALU_LSL):
    {
      thumb_scache* abuf = vpc;
#define FLD(f) abuf->fields.sfmt_addi.f
      PCADDR pc = abuf->addr;
      vpc = vpc + 1;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, 4);

{
  BI tmp_carry_out;
  SI tmp_result;
  tmp_carry_out = current_cpu->compute_carry_out_regshift (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), SHIFT_TYPE_LSL, current_cpu->thumb_h_gr_t_get (FLD (f_rs)), current_cpu->hardware.h_cbit);
  tmp_result = SLLSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), current_cpu->thumb_h_gr_t_get (FLD (f_rs)));
current_cpu->thumb_h_gr_t_set (FLD (f_rd), tmp_result);
{
{
current_cpu->hardware.h_zbit = EQSI (tmp_result, 0);
current_cpu->hardware.h_nbit = LTSI (tmp_result, 0);
}
current_cpu->hardware.h_cbit = tmp_carry_out;
}
}

#undef FLD
    }
    NEXT (vpc);

// ********** lsr $rd,$rs

  CASE (INSN_ALU_LSR):
    {
      thumb_scache* abuf = vpc;
#define FLD(f) abuf->fields.sfmt_addi.f
      PCADDR pc = abuf->addr;
      vpc = vpc + 1;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, 4);

{
  BI tmp_carry_out;
  SI tmp_result;
  tmp_carry_out = current_cpu->compute_carry_out_regshift (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), SHIFT_TYPE_LSR, current_cpu->thumb_h_gr_t_get (FLD (f_rs)), current_cpu->hardware.h_cbit);
  tmp_result = SRLSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), current_cpu->thumb_h_gr_t_get (FLD (f_rs)));
current_cpu->thumb_h_gr_t_set (FLD (f_rd), tmp_result);
{
{
current_cpu->hardware.h_zbit = EQSI (tmp_result, 0);
current_cpu->hardware.h_nbit = LTSI (tmp_result, 0);
}
current_cpu->hardware.h_cbit = tmp_carry_out;
}
}

#undef FLD
    }
    NEXT (vpc);

// ********** asr $rd,$rs

  CASE (INSN_ALU_ASR):
    {
      thumb_scache* abuf = vpc;
#define FLD(f) abuf->fields.sfmt_addi.f
      PCADDR pc = abuf->addr;
      vpc = vpc + 1;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, 4);

{
  BI tmp_carry_out;
  SI tmp_result;
  tmp_carry_out = current_cpu->compute_carry_out_regshift (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), SHIFT_TYPE_ASR, current_cpu->thumb_h_gr_t_get (FLD (f_rs)), current_cpu->hardware.h_cbit);
  tmp_result = SRASI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), current_cpu->thumb_h_gr_t_get (FLD (f_rs)));
current_cpu->thumb_h_gr_t_set (FLD (f_rd), tmp_result);
{
{
current_cpu->hardware.h_zbit = EQSI (tmp_result, 0);
current_cpu->hardware.h_nbit = LTSI (tmp_result, 0);
}
current_cpu->hardware.h_cbit = tmp_carry_out;
}
}

#undef FLD
    }
    NEXT (vpc);

// ********** ror $rd,$rs

  CASE (INSN_ALU_ROR):
    {
      thumb_scache* abuf = vpc;
#define FLD(f) abuf->fields.sfmt_addi.f
      PCADDR pc = abuf->addr;
      vpc = vpc + 1;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, 4);

{
  BI tmp_carry_out;
  SI tmp_result;
  tmp_carry_out = current_cpu->compute_carry_out_regshift (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), SHIFT_TYPE_ROR, current_cpu->thumb_h_gr_t_get (FLD (f_rs)), current_cpu->hardware.h_cbit);
  tmp_result = RORSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), current_cpu->thumb_h_gr_t_get (FLD (f_rs)));
current_cpu->thumb_h_gr_t_set (FLD (f_rd), tmp_result);
{
{
current_cpu->hardware.h_zbit = EQSI (tmp_result, 0);
current_cpu->hardware.h_nbit = LTSI (tmp_result, 0);
}
current_cpu->hardware.h_cbit = tmp_carry_out;
}
}

#undef FLD
    }
    NEXT (vpc);

// ********** adc $rd,$rs

  CASE (INSN_ALU_ADC):
    {
      thumb_scache* abuf = vpc;
#define FLD(f) abuf->fields.sfmt_addi.f
      PCADDR pc = abuf->addr;
      vpc = vpc + 1;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, 4);

{
  SI tmp_result;
  tmp_result = ADDCSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), current_cpu->thumb_h_gr_t_get (FLD (f_rs)), current_cpu->hardware.h_cbit);
{
  SI tmp_result;
  tmp_result = ADDCSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), current_cpu->thumb_h_gr_t_get (FLD (f_rs)), current_cpu->hardware.h_cbit);
{
current_cpu->hardware.h_zbit = EQSI (tmp_result, 0);
current_cpu->hardware.h_nbit = LTSI (tmp_result, 0);
}
current_cpu->hardware.h_cbit = ADDCFSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), current_cpu->thumb_h_gr_t_get (FLD (f_rs)), current_cpu->hardware.h_cbit);
current_cpu->hardware.h_vbit = ADDOFSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), current_cpu->thumb_h_gr_t_get (FLD (f_rs)), current_cpu->hardware.h_cbit);
}
current_cpu->thumb_h_gr_t_set (FLD (f_rd), tmp_result);
}

#undef FLD
    }
    NEXT (vpc);

// ********** sbc $rd,$rs

  CASE (INSN_ALU_SBC):
    {
      thumb_scache* abuf = vpc;
#define FLD(f) abuf->fields.sfmt_addi.f
      PCADDR pc = abuf->addr;
      vpc = vpc + 1;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, 4);

{
  SI tmp_result;
  tmp_result = SUBCSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), current_cpu->thumb_h_gr_t_get (FLD (f_rs)), NOTBI (current_cpu->hardware.h_cbit));
{
  SI tmp_result;
  tmp_result = SUBCSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), current_cpu->thumb_h_gr_t_get (FLD (f_rs)), NOTBI (current_cpu->hardware.h_cbit));
{
current_cpu->hardware.h_zbit = EQSI (tmp_result, 0);
current_cpu->hardware.h_nbit = LTSI (tmp_result, 0);
}
current_cpu->hardware.h_cbit = NOTBI (SUBCFSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), current_cpu->thumb_h_gr_t_get (FLD (f_rs)), NOTBI (current_cpu->hardware.h_cbit)));
current_cpu->hardware.h_vbit = SUBOFSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), current_cpu->thumb_h_gr_t_get (FLD (f_rs)), NOTBI (current_cpu->hardware.h_cbit));
}
current_cpu->thumb_h_gr_t_set (FLD (f_rd), tmp_result);
}

#undef FLD
    }
    NEXT (vpc);

// ********** tst $rd,$rs

  CASE (INSN_ALU_TST):
    {
      thumb_scache* abuf = vpc;
#define FLD(f) abuf->fields.sfmt_addi.f
      PCADDR pc = abuf->addr;
      vpc = vpc + 1;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, 4);

{
  SI tmp_x;
  tmp_x = ANDSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), current_cpu->thumb_h_gr_t_get (FLD (f_rs)));
{
current_cpu->hardware.h_zbit = EQSI (tmp_x, 0);
current_cpu->hardware.h_nbit = LTSI (tmp_x, 0);
}
}

#undef FLD
    }
    NEXT (vpc);

// ********** neg $rd,$rs

  CASE (INSN_ALU_NEG):
    {
      thumb_scache* abuf = vpc;
#define FLD(f) abuf->fields.sfmt_addi.f
      PCADDR pc = abuf->addr;
      vpc = vpc + 1;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, 4);

{
  SI tmp_result;
  tmp_result = NEGSI (current_cpu->thumb_h_gr_t_get (FLD (f_rs)));
{
  SI tmp_result;
  tmp_result = SUBCSI (0, current_cpu->thumb_h_gr_t_get (FLD (f_rs)), 0);
{
current_cpu->hardware.h_zbit = EQSI (tmp_result, 0);
current_cpu->hardware.h_nbit = LTSI (tmp_result, 0);
}
current_cpu->hardware.h_cbit = NOTBI (SUBCFSI (0, current_cpu->thumb_h_gr_t_get (FLD (f_rs)), 0));
current_cpu->hardware.h_vbit = SUBOFSI (0, current_cpu->thumb_h_gr_t_get (FLD (f_rs)), 0);
}
current_cpu->thumb_h_gr_t_set (FLD (f_rd), tmp_result);
}

#undef FLD
    }
    NEXT (vpc);

// ********** cmp $rd,$rs

  CASE (INSN_ALU_CMP):
    {
      thumb_scache* abuf = vpc;
#define FLD(f) abuf->fields.sfmt_addi.f
      PCADDR pc = abuf->addr;
      vpc = vpc + 1;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, 4);

{
  SI tmp_result;
  tmp_result = SUBCSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), current_cpu->thumb_h_gr_t_get (FLD (f_rs)), 0);
{
current_cpu->hardware.h_zbit = EQSI (tmp_result, 0);
current_cpu->hardware.h_nbit = LTSI (tmp_result, 0);
}
current_cpu->hardware.h_cbit = NOTBI (SUBCFSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), current_cpu->thumb_h_gr_t_get (FLD (f_rs)), 0));
current_cpu->hardware.h_vbit = SUBOFSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), current_cpu->thumb_h_gr_t_get (FLD (f_rs)), 0);
}

#undef FLD
    }
    NEXT (vpc);

// ********** cmn $rd,$rs

  CASE (INSN_ALU_CMN):
    {
      thumb_scache* abuf = vpc;
#define FLD(f) abuf->fields.sfmt_addi.f
      PCADDR pc = abuf->addr;
      vpc = vpc + 1;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, 4);

{
  SI tmp_result;
  tmp_result = ADDCSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), current_cpu->thumb_h_gr_t_get (FLD (f_rs)), 0);
{
current_cpu->hardware.h_zbit = EQSI (tmp_result, 0);
current_cpu->hardware.h_nbit = LTSI (tmp_result, 0);
}
current_cpu->hardware.h_cbit = ADDCFSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), current_cpu->thumb_h_gr_t_get (FLD (f_rs)), 0);
current_cpu->hardware.h_vbit = ADDOFSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), current_cpu->thumb_h_gr_t_get (FLD (f_rs)), 0);
}

#undef FLD
    }
    NEXT (vpc);

// ********** orr $rd,$rs

  CASE (INSN_ALU_ORR):
    {
      thumb_scache* abuf = vpc;
#define FLD(f) abuf->fields.sfmt_addi.f
      PCADDR pc = abuf->addr;
      vpc = vpc + 1;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, 4);

{
current_cpu->thumb_h_gr_t_set (FLD (f_rd), ORSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), current_cpu->thumb_h_gr_t_get (FLD (f_rs))));
{
current_cpu->hardware.h_zbit = EQSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), 0);
current_cpu->hardware.h_nbit = LTSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), 0);
}
}

#undef FLD
    }
    NEXT (vpc);

// ********** mul $rd,$rs

  CASE (INSN_ALU_MUL):
    {
      thumb_scache* abuf = vpc;
#define FLD(f) abuf->fields.sfmt_addi.f
      PCADDR pc = abuf->addr;
      vpc = vpc + 1;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, 4);

{
current_cpu->thumb_h_gr_t_set (FLD (f_rd), MULSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), current_cpu->thumb_h_gr_t_get (FLD (f_rs))));
{
current_cpu->hardware.h_zbit = EQSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), 0);
current_cpu->hardware.h_nbit = LTSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), 0);
}
}

#undef FLD
    }
    NEXT (vpc);

// ********** bic $rd,$rs

  CASE (INSN_ALU_BIC):
    {
      thumb_scache* abuf = vpc;
#define FLD(f) abuf->fields.sfmt_addi.f
      PCADDR pc = abuf->addr;
      vpc = vpc + 1;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, 4);

{
current_cpu->thumb_h_gr_t_set (FLD (f_rd), ANDSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), INVSI (current_cpu->thumb_h_gr_t_get (FLD (f_rs)))));
{
current_cpu->hardware.h_zbit = EQSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), 0);
current_cpu->hardware.h_nbit = LTSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), 0);
}
}

#undef FLD
    }
    NEXT (vpc);

// ********** mvn $rd,$rs

  CASE (INSN_ALU_MVN):
    {
      thumb_scache* abuf = vpc;
#define FLD(f) abuf->fields.sfmt_addi.f
      PCADDR pc = abuf->addr;
      vpc = vpc + 1;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, 4);

{
current_cpu->thumb_h_gr_t_set (FLD (f_rd), INVSI (current_cpu->thumb_h_gr_t_get (FLD (f_rs))));
{
current_cpu->hardware.h_zbit = EQSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), 0);
current_cpu->hardware.h_nbit = LTSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), 0);
}
}

#undef FLD
    }
    NEXT (vpc);

// ********** add $rd,$hs

  CASE (INSN_ADD_RD_HS):
    {
      thumb_scache* abuf = vpc;
#define FLD(f) abuf->fields.sfmt_addi.f
      PCADDR pc = abuf->addr;
      vpc = vpc + 1;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, 4);

current_cpu->thumb_h_gr_t_set (FLD (f_rd), ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), current_cpu->thumb_h_hiregs_get (FLD (f_rs))));

#undef FLD
    }
    NEXT (vpc);

// ********** add $hd,$rs

  CASE (INSN_ADD_HD_RS):
    {
      thumb_scache* abuf = vpc;
#define FLD(f) abuf->fields.sfmt_addi.f
      PCADDR pc = abuf->addr;
      PCADDR npc;
      branch_status br_status = BRANCH_UNTAKEN;
      vpc = vpc + 1;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, 4);

if (EQSI (FLD (f_rd), 7)) {
npc = ADDSI (current_cpu->thumb_h_hiregs_get (FLD (f_rd)), current_cpu->thumb_h_gr_t_get (FLD (f_rs))); br_status = BRANCH_UNCACHEABLE;
} else {
current_cpu->thumb_h_hiregs_set (FLD (f_rd), ADDSI (current_cpu->thumb_h_hiregs_get (FLD (f_rd)), current_cpu->thumb_h_gr_t_get (FLD (f_rs))));
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT (vpc);

// ********** add $hd,$hs

  CASE (INSN_ADD_HD_HS):
    {
      thumb_scache* abuf = vpc;
#define FLD(f) abuf->fields.sfmt_addi.f
      PCADDR pc = abuf->addr;
      PCADDR npc;
      branch_status br_status = BRANCH_UNTAKEN;
      vpc = vpc + 1;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, 4);

if (EQSI (FLD (f_rd), 7)) {
npc = ADDSI (current_cpu->thumb_h_hiregs_get (FLD (f_rd)), current_cpu->thumb_h_hiregs_get (FLD (f_rs))); br_status = BRANCH_UNCACHEABLE;
} else {
current_cpu->thumb_h_hiregs_set (FLD (f_rd), ADDSI (current_cpu->thumb_h_hiregs_get (FLD (f_rd)), current_cpu->thumb_h_hiregs_get (FLD (f_rs))));
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT (vpc);

// ********** cmp $rd,$hs

  CASE (INSN_CMP_RD_HS):
    {
      thumb_scache* abuf = vpc;
#define FLD(f) abuf->fields.sfmt_addi.f
      PCADDR pc = abuf->addr;
      vpc = vpc + 1;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, 4);

{
  SI tmp_result;
  tmp_result = SUBCSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), current_cpu->thumb_h_hiregs_get (FLD (f_rs)), 0);
{
current_cpu->hardware.h_zbit = EQSI (tmp_result, 0);
current_cpu->hardware.h_nbit = LTSI (tmp_result, 0);
}
current_cpu->hardware.h_cbit = NOTBI (SUBCFSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), current_cpu->thumb_h_hiregs_get (FLD (f_rs)), 0));
current_cpu->hardware.h_vbit = SUBOFSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), current_cpu->thumb_h_hiregs_get (FLD (f_rs)), 0);
}

#undef FLD
    }
    NEXT (vpc);

// ********** cmp $hd,$rs

  CASE (INSN_CMP_HD_RS):
    {
      thumb_scache* abuf = vpc;
#define FLD(f) abuf->fields.sfmt_addi.f
      PCADDR pc = abuf->addr;
      vpc = vpc + 1;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, 4);

{
  SI tmp_result;
  tmp_result = SUBCSI (current_cpu->thumb_h_hiregs_get (FLD (f_rd)), current_cpu->thumb_h_gr_t_get (FLD (f_rs)), 0);
{
current_cpu->hardware.h_zbit = EQSI (tmp_result, 0);
current_cpu->hardware.h_nbit = LTSI (tmp_result, 0);
}
current_cpu->hardware.h_cbit = NOTBI (SUBCFSI (current_cpu->thumb_h_hiregs_get (FLD (f_rd)), current_cpu->thumb_h_gr_t_get (FLD (f_rs)), 0));
current_cpu->hardware.h_vbit = SUBOFSI (current_cpu->thumb_h_hiregs_get (FLD (f_rd)), current_cpu->thumb_h_gr_t_get (FLD (f_rs)), 0);
}

#undef FLD
    }
    NEXT (vpc);

// ********** cmp $hd,$hs

  CASE (INSN_CMP_HD_HS):
    {
      thumb_scache* abuf = vpc;
#define FLD(f) abuf->fields.sfmt_addi.f
      PCADDR pc = abuf->addr;
      vpc = vpc + 1;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, 4);

{
  SI tmp_result;
  tmp_result = SUBCSI (current_cpu->thumb_h_hiregs_get (FLD (f_rd)), current_cpu->thumb_h_hiregs_get (FLD (f_rs)), 0);
{
current_cpu->hardware.h_zbit = EQSI (tmp_result, 0);
current_cpu->hardware.h_nbit = LTSI (tmp_result, 0);
}
current_cpu->hardware.h_cbit = NOTBI (SUBCFSI (current_cpu->thumb_h_hiregs_get (FLD (f_rd)), current_cpu->thumb_h_hiregs_get (FLD (f_rs)), 0));
current_cpu->hardware.h_vbit = SUBOFSI (current_cpu->thumb_h_hiregs_get (FLD (f_rd)), current_cpu->thumb_h_hiregs_get (FLD (f_rs)), 0);
}

#undef FLD
    }
    NEXT (vpc);

// ********** mov $rd,$hs

  CASE (INSN_MOV_RD_HS):
    {
      thumb_scache* abuf = vpc;
#define FLD(f) abuf->fields.sfmt_addi.f
      PCADDR pc = abuf->addr;
      vpc = vpc + 1;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, 4);

current_cpu->thumb_h_gr_t_set (FLD (f_rd), current_cpu->thumb_h_hiregs_get (FLD (f_rs)));

#undef FLD
    }
    NEXT (vpc);

// ********** mov $hd,$rs

  CASE (INSN_MOV_HD_RS):
    {
      thumb_scache* abuf = vpc;
#define FLD(f) abuf->fields.sfmt_addi.f
      PCADDR pc = abuf->addr;
      PCADDR npc;
      branch_status br_status = BRANCH_UNTAKEN;
      vpc = vpc + 1;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, 4);

if (EQSI (FLD (f_rd), 7)) {
npc = current_cpu->thumb_h_gr_t_get (FLD (f_rs)); br_status = BRANCH_UNCACHEABLE;
} else {
current_cpu->thumb_h_hiregs_set (FLD (f_rd), current_cpu->thumb_h_gr_t_get (FLD (f_rs)));
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT (vpc);

// ********** mov $hd,$hs

  CASE (INSN_MOV_HD_HS):
    {
      thumb_scache* abuf = vpc;
#define FLD(f) abuf->fields.sfmt_addi.f
      PCADDR pc = abuf->addr;
      PCADDR npc;
      branch_status br_status = BRANCH_UNTAKEN;
      vpc = vpc + 1;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, 4);

if (EQSI (FLD (f_rd), 7)) {
npc = current_cpu->thumb_h_hiregs_get (FLD (f_rs)); br_status = BRANCH_UNCACHEABLE;
} else {
current_cpu->thumb_h_hiregs_set (FLD (f_rd), current_cpu->thumb_h_hiregs_get (FLD (f_rs)));
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT (vpc);

// ********** bx $rs

  CASE (INSN_BX_RS):
    {
      thumb_scache* abuf = vpc;
#define FLD(f) abuf->fields.sfmt_addi.f
      PCADDR pc = abuf->addr;
      PCADDR npc;
      branch_status br_status = BRANCH_UNTAKEN;
      vpc = vpc + 1;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, 4);

{
npc = current_cpu->thumb_h_gr_t_get (FLD (f_rs)); br_status = BRANCH_UNCACHEABLE;
if (NOTSI (ANDSI (current_cpu->thumb_h_gr_t_get (FLD (f_rs)), 1))) {
current_cpu->h_tbit_set (0);
}
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT (vpc);

// ********** bx $hs

  CASE (INSN_BX_HS):
    {
      thumb_scache* abuf = vpc;
#define FLD(f) abuf->fields.sfmt_addi.f
      PCADDR pc = abuf->addr;
      PCADDR npc;
      branch_status br_status = BRANCH_UNTAKEN;
      vpc = vpc + 1;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, 4);

{
npc = current_cpu->thumb_h_hiregs_get (FLD (f_rs)); br_status = BRANCH_UNCACHEABLE;
if (NOTSI (ANDSI (current_cpu->thumb_h_hiregs_get (FLD (f_rs)), 1))) {
current_cpu->h_tbit_set (0);
}
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT (vpc);

// ********** ldr ${bit10-rd},[pc,#$word8]

  CASE (INSN_LDR_PC):
    {
      thumb_scache* abuf = vpc;
#define FLD(f) abuf->fields.sfmt_ldr_pc.f
      PCADDR pc = abuf->addr;
      vpc = vpc + 1;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, 4);

current_cpu->thumb_h_gr_t_set (FLD (f_bit10_rd), current_cpu->GETMEMSI (pc, ADDSI (ANDSI (ADDSI (pc, 4), -4), FLD (f_word8))));

#undef FLD
    }
    NEXT (vpc);

// ********** str $rd,[$rb,$ro]

  CASE (INSN_STR):
    {
      thumb_scache* abuf = vpc;
#define FLD(f) abuf->fields.sfmt_str.f
      PCADDR pc = abuf->addr;
      vpc = vpc + 1;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, 4);

current_cpu->SETMEMSI (pc, ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_rb)), current_cpu->thumb_h_gr_t_get (FLD (f_ro))), current_cpu->thumb_h_gr_t_get (FLD (f_rd)));

#undef FLD
    }
    NEXT (vpc);

// ********** strb $rd,[$rb,$ro]

  CASE (INSN_STRB):
    {
      thumb_scache* abuf = vpc;
#define FLD(f) abuf->fields.sfmt_str.f
      PCADDR pc = abuf->addr;
      vpc = vpc + 1;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, 4);

current_cpu->SETMEMQI (pc, ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_rb)), current_cpu->thumb_h_gr_t_get (FLD (f_ro))), current_cpu->thumb_h_gr_t_get (FLD (f_rd)));

#undef FLD
    }
    NEXT (vpc);

// ********** ldr $rd,[$rb,$ro]

  CASE (INSN_LDR):
    {
      thumb_scache* abuf = vpc;
#define FLD(f) abuf->fields.sfmt_str.f
      PCADDR pc = abuf->addr;
      vpc = vpc + 1;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, 4);

current_cpu->thumb_h_gr_t_set (FLD (f_rd), current_cpu->GETMEMSI (pc, ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_rb)), current_cpu->thumb_h_gr_t_get (FLD (f_ro)))));

#undef FLD
    }
    NEXT (vpc);

// ********** ldrb $rd,[$rb,$ro]

  CASE (INSN_LDRB):
    {
      thumb_scache* abuf = vpc;
#define FLD(f) abuf->fields.sfmt_str.f
      PCADDR pc = abuf->addr;
      vpc = vpc + 1;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, 4);

current_cpu->thumb_h_gr_t_set (FLD (f_rd), ZEXTQISI (current_cpu->GETMEMQI (pc, ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_rb)), current_cpu->thumb_h_gr_t_get (FLD (f_ro))))));

#undef FLD
    }
    NEXT (vpc);

// ********** strh $rd,[$rb,$ro]

  CASE (INSN_STRH):
    {
      thumb_scache* abuf = vpc;
#define FLD(f) abuf->fields.sfmt_str.f
      PCADDR pc = abuf->addr;
      vpc = vpc + 1;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, 4);

current_cpu->SETMEMHI (pc, ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_rb)), current_cpu->thumb_h_gr_t_get (FLD (f_ro))), current_cpu->thumb_h_gr_t_get (FLD (f_rd)));

#undef FLD
    }
    NEXT (vpc);

// ********** ldrh $rd,[$rb,$ro]

  CASE (INSN_LDRH):
    {
      thumb_scache* abuf = vpc;
#define FLD(f) abuf->fields.sfmt_str.f
      PCADDR pc = abuf->addr;
      vpc = vpc + 1;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, 4);

current_cpu->thumb_h_gr_t_set (FLD (f_rd), ZEXTHISI (current_cpu->GETMEMHI (pc, ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_rb)), current_cpu->thumb_h_gr_t_get (FLD (f_ro))))));

#undef FLD
    }
    NEXT (vpc);

// ********** ldsb $rd,[$rb,$ro]

  CASE (INSN_LDSB):
    {
      thumb_scache* abuf = vpc;
#define FLD(f) abuf->fields.sfmt_str.f
      PCADDR pc = abuf->addr;
      vpc = vpc + 1;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, 4);

current_cpu->thumb_h_gr_t_set (FLD (f_rd), EXTQISI (current_cpu->GETMEMQI (pc, ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_rb)), current_cpu->thumb_h_gr_t_get (FLD (f_ro))))));

#undef FLD
    }
    NEXT (vpc);

// ********** ldsh $rd,[$rb,$ro]

  CASE (INSN_LDSH):
    {
      thumb_scache* abuf = vpc;
#define FLD(f) abuf->fields.sfmt_str.f
      PCADDR pc = abuf->addr;
      vpc = vpc + 1;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, 4);

current_cpu->thumb_h_gr_t_set (FLD (f_rd), EXTHISI (current_cpu->GETMEMHI (pc, ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_rb)), current_cpu->thumb_h_gr_t_get (FLD (f_ro))))));

#undef FLD
    }
    NEXT (vpc);

// ********** str $rd,[$rb,#${offset5-7}]

  CASE (INSN_STR_IMM):
    {
      thumb_scache* abuf = vpc;
#define FLD(f) abuf->fields.sfmt_str_imm.f
      PCADDR pc = abuf->addr;
      vpc = vpc + 1;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, 4);

current_cpu->SETMEMSI (pc, ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_rb)), FLD (f_offset5_7)), current_cpu->thumb_h_gr_t_get (FLD (f_rd)));

#undef FLD
    }
    NEXT (vpc);

// ********** ldr $rd,[$rb,#${offset5-7}]

  CASE (INSN_LDR_IMM):
    {
      thumb_scache* abuf = vpc;
#define FLD(f) abuf->fields.sfmt_str_imm.f
      PCADDR pc = abuf->addr;
      vpc = vpc + 1;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, 4);

current_cpu->thumb_h_gr_t_set (FLD (f_rd), current_cpu->GETMEMSI (pc, ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_rb)), FLD (f_offset5_7))));

#undef FLD
    }
    NEXT (vpc);

// ********** strb $rd,[$rb,#$offset5]

  CASE (INSN_STRB_IMM):
    {
      thumb_scache* abuf = vpc;
#define FLD(f) abuf->fields.sfmt_strb_imm.f
      PCADDR pc = abuf->addr;
      vpc = vpc + 1;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, 4);

current_cpu->SETMEMQI (pc, ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_rb)), FLD (f_offset5)), current_cpu->thumb_h_gr_t_get (FLD (f_rd)));

#undef FLD
    }
    NEXT (vpc);

// ********** ldrb $rd,[$rb,#$offset5]

  CASE (INSN_LDRB_IMM):
    {
      thumb_scache* abuf = vpc;
#define FLD(f) abuf->fields.sfmt_strb_imm.f
      PCADDR pc = abuf->addr;
      vpc = vpc + 1;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, 4);

current_cpu->thumb_h_gr_t_set (FLD (f_rd), ZEXTQISI (current_cpu->GETMEMQI (pc, ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_rb)), FLD (f_offset5)))));

#undef FLD
    }
    NEXT (vpc);

// ********** strh $rd,[$rb,#${offset5-6}]

  CASE (INSN_STRH_IMM):
    {
      thumb_scache* abuf = vpc;
#define FLD(f) abuf->fields.sfmt_strh_imm.f
      PCADDR pc = abuf->addr;
      vpc = vpc + 1;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, 4);

current_cpu->SETMEMHI (pc, ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_rb)), FLD (f_offset5_6)), current_cpu->thumb_h_gr_t_get (FLD (f_rd)));

#undef FLD
    }
    NEXT (vpc);

// ********** ldrh $rd,[$rb,#${offset5-6}]

  CASE (INSN_LDRH_IMM):
    {
      thumb_scache* abuf = vpc;
#define FLD(f) abuf->fields.sfmt_strh_imm.f
      PCADDR pc = abuf->addr;
      vpc = vpc + 1;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, 4);

current_cpu->thumb_h_gr_t_set (FLD (f_rd), ZEXTHISI (current_cpu->GETMEMHI (pc, ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_rb)), FLD (f_offset5_6)))));

#undef FLD
    }
    NEXT (vpc);

// ********** str ${bit10-rd},[sp,#$word8]

  CASE (INSN_STR_SPREL):
    {
      thumb_scache* abuf = vpc;
#define FLD(f) abuf->fields.sfmt_ldr_pc.f
      PCADDR pc = abuf->addr;
      vpc = vpc + 1;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, 4);

current_cpu->SETMEMSI (pc, ADDSI (current_cpu->thumb_h_sp_t_get (), FLD (f_word8)), current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rd)));

#undef FLD
    }
    NEXT (vpc);

// ********** ldr ${bit10-rd},[sp,#$word8]

  CASE (INSN_LDR_SPREL):
    {
      thumb_scache* abuf = vpc;
#define FLD(f) abuf->fields.sfmt_ldr_pc.f
      PCADDR pc = abuf->addr;
      vpc = vpc + 1;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, 4);

current_cpu->thumb_h_gr_t_set (FLD (f_bit10_rd), current_cpu->GETMEMSI (pc, ADDSI (current_cpu->thumb_h_sp_t_get (), FLD (f_word8))));

#undef FLD
    }
    NEXT (vpc);

// ********** add ${bit10-rd},pc,$word8

  CASE (INSN_LDA_PC):
    {
      thumb_scache* abuf = vpc;
#define FLD(f) abuf->fields.sfmt_ldr_pc.f
      PCADDR pc = abuf->addr;
      vpc = vpc + 1;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, 4);

current_cpu->thumb_h_gr_t_set (FLD (f_bit10_rd), ADDSI (ANDSI (ADDSI (pc, 4), -4), FLD (f_word8)));

#undef FLD
    }
    NEXT (vpc);

// ********** add ${bit10-rd},sp,$word8

  CASE (INSN_LDA_SP):
    {
      thumb_scache* abuf = vpc;
#define FLD(f) abuf->fields.sfmt_ldr_pc.f
      PCADDR pc = abuf->addr;
      vpc = vpc + 1;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, 4);

current_cpu->thumb_h_gr_t_set (FLD (f_bit10_rd), ADDSI (current_cpu->thumb_h_sp_t_get (), FLD (f_word8)));

#undef FLD
    }
    NEXT (vpc);

// ********** add sp,#$sword7

  CASE (INSN_ADD_SP):
    {
      thumb_scache* abuf = vpc;
#define FLD(f) abuf->fields.sfmt_add_sp.f
      PCADDR pc = abuf->addr;
      vpc = vpc + 1;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, 4);

current_cpu->thumb_h_sp_t_set (ADDSI (current_cpu->thumb_h_sp_t_get (), FLD (f_sword7)));

#undef FLD
    }
    NEXT (vpc);

// ********** add sp,#-$sword7

  CASE (INSN_SUB_SP):
    {
      thumb_scache* abuf = vpc;
#define FLD(f) abuf->fields.sfmt_add_sp.f
      PCADDR pc = abuf->addr;
      vpc = vpc + 1;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, 4);

current_cpu->thumb_h_sp_t_set (SUBSI (current_cpu->thumb_h_sp_t_get (), FLD (f_sword7)));

#undef FLD
    }
    NEXT (vpc);

// ********** push {$rlist}

  CASE (INSN_PUSH):
    {
      thumb_scache* abuf = vpc;
#define FLD(f) abuf->fields.sfmt_stmia.f
      PCADDR pc = abuf->addr;
      vpc = vpc + 1;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, 4);

{
if (ANDSI (FLD (f_rlist), SLLSI (1, 7))) {
{
current_cpu->thumb_h_sp_t_set (SUBSI (current_cpu->thumb_h_sp_t_get (), 4));
current_cpu->SETMEMSI (pc, current_cpu->thumb_h_sp_t_get (), current_cpu->thumb_h_gr_t_get (((UINT) 7)));
}
}
if (ANDSI (FLD (f_rlist), SLLSI (1, 6))) {
{
current_cpu->thumb_h_sp_t_set (SUBSI (current_cpu->thumb_h_sp_t_get (), 4));
current_cpu->SETMEMSI (pc, current_cpu->thumb_h_sp_t_get (), current_cpu->thumb_h_gr_t_get (((UINT) 6)));
}
}
if (ANDSI (FLD (f_rlist), SLLSI (1, 5))) {
{
current_cpu->thumb_h_sp_t_set (SUBSI (current_cpu->thumb_h_sp_t_get (), 4));
current_cpu->SETMEMSI (pc, current_cpu->thumb_h_sp_t_get (), current_cpu->thumb_h_gr_t_get (((UINT) 5)));
}
}
if (ANDSI (FLD (f_rlist), SLLSI (1, 4))) {
{
current_cpu->thumb_h_sp_t_set (SUBSI (current_cpu->thumb_h_sp_t_get (), 4));
current_cpu->SETMEMSI (pc, current_cpu->thumb_h_sp_t_get (), current_cpu->thumb_h_gr_t_get (((UINT) 4)));
}
}
if (ANDSI (FLD (f_rlist), SLLSI (1, 3))) {
{
current_cpu->thumb_h_sp_t_set (SUBSI (current_cpu->thumb_h_sp_t_get (), 4));
current_cpu->SETMEMSI (pc, current_cpu->thumb_h_sp_t_get (), current_cpu->thumb_h_gr_t_get (((UINT) 3)));
}
}
if (ANDSI (FLD (f_rlist), SLLSI (1, 2))) {
{
current_cpu->thumb_h_sp_t_set (SUBSI (current_cpu->thumb_h_sp_t_get (), 4));
current_cpu->SETMEMSI (pc, current_cpu->thumb_h_sp_t_get (), current_cpu->thumb_h_gr_t_get (((UINT) 2)));
}
}
if (ANDSI (FLD (f_rlist), SLLSI (1, 1))) {
{
current_cpu->thumb_h_sp_t_set (SUBSI (current_cpu->thumb_h_sp_t_get (), 4));
current_cpu->SETMEMSI (pc, current_cpu->thumb_h_sp_t_get (), current_cpu->thumb_h_gr_t_get (((UINT) 1)));
}
}
if (ANDSI (FLD (f_rlist), SLLSI (1, 0))) {
{
current_cpu->thumb_h_sp_t_set (SUBSI (current_cpu->thumb_h_sp_t_get (), 4));
current_cpu->SETMEMSI (pc, current_cpu->thumb_h_sp_t_get (), current_cpu->thumb_h_gr_t_get (((UINT) 0)));
}
}
}

#undef FLD
    }
    NEXT (vpc);

// ********** push {${rlist-lr}}

  CASE (INSN_PUSH_LR):
    {
      thumb_scache* abuf = vpc;
#define FLD(f) abuf->fields.sfmt_stmia.f
      PCADDR pc = abuf->addr;
      vpc = vpc + 1;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, 4);

{
current_cpu->thumb_h_sp_t_set (SUBSI (current_cpu->thumb_h_sp_t_get (), 4));
current_cpu->SETMEMSI (pc, current_cpu->thumb_h_sp_t_get (), current_cpu->thumb_h_lr_t_get ());
if (ANDSI (FLD (f_rlist), SLLSI (1, 7))) {
{
current_cpu->thumb_h_sp_t_set (SUBSI (current_cpu->thumb_h_sp_t_get (), 4));
current_cpu->SETMEMSI (pc, current_cpu->thumb_h_sp_t_get (), current_cpu->thumb_h_gr_t_get (((UINT) 7)));
}
}
if (ANDSI (FLD (f_rlist), SLLSI (1, 6))) {
{
current_cpu->thumb_h_sp_t_set (SUBSI (current_cpu->thumb_h_sp_t_get (), 4));
current_cpu->SETMEMSI (pc, current_cpu->thumb_h_sp_t_get (), current_cpu->thumb_h_gr_t_get (((UINT) 6)));
}
}
if (ANDSI (FLD (f_rlist), SLLSI (1, 5))) {
{
current_cpu->thumb_h_sp_t_set (SUBSI (current_cpu->thumb_h_sp_t_get (), 4));
current_cpu->SETMEMSI (pc, current_cpu->thumb_h_sp_t_get (), current_cpu->thumb_h_gr_t_get (((UINT) 5)));
}
}
if (ANDSI (FLD (f_rlist), SLLSI (1, 4))) {
{
current_cpu->thumb_h_sp_t_set (SUBSI (current_cpu->thumb_h_sp_t_get (), 4));
current_cpu->SETMEMSI (pc, current_cpu->thumb_h_sp_t_get (), current_cpu->thumb_h_gr_t_get (((UINT) 4)));
}
}
if (ANDSI (FLD (f_rlist), SLLSI (1, 3))) {
{
current_cpu->thumb_h_sp_t_set (SUBSI (current_cpu->thumb_h_sp_t_get (), 4));
current_cpu->SETMEMSI (pc, current_cpu->thumb_h_sp_t_get (), current_cpu->thumb_h_gr_t_get (((UINT) 3)));
}
}
if (ANDSI (FLD (f_rlist), SLLSI (1, 2))) {
{
current_cpu->thumb_h_sp_t_set (SUBSI (current_cpu->thumb_h_sp_t_get (), 4));
current_cpu->SETMEMSI (pc, current_cpu->thumb_h_sp_t_get (), current_cpu->thumb_h_gr_t_get (((UINT) 2)));
}
}
if (ANDSI (FLD (f_rlist), SLLSI (1, 1))) {
{
current_cpu->thumb_h_sp_t_set (SUBSI (current_cpu->thumb_h_sp_t_get (), 4));
current_cpu->SETMEMSI (pc, current_cpu->thumb_h_sp_t_get (), current_cpu->thumb_h_gr_t_get (((UINT) 1)));
}
}
if (ANDSI (FLD (f_rlist), SLLSI (1, 0))) {
{
current_cpu->thumb_h_sp_t_set (SUBSI (current_cpu->thumb_h_sp_t_get (), 4));
current_cpu->SETMEMSI (pc, current_cpu->thumb_h_sp_t_get (), current_cpu->thumb_h_gr_t_get (((UINT) 0)));
}
}
}

#undef FLD
    }
    NEXT (vpc);

// ********** pop {$rlist}

  CASE (INSN_POP):
    {
      thumb_scache* abuf = vpc;
#define FLD(f) abuf->fields.sfmt_stmia.f
      PCADDR pc = abuf->addr;
      vpc = vpc + 1;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, 4);

{
if (ANDSI (FLD (f_rlist), SLLSI (1, 0))) {
{
current_cpu->thumb_h_gr_t_set (((UINT) 0), current_cpu->GETMEMSI (pc, current_cpu->thumb_h_sp_t_get ()));
current_cpu->thumb_h_sp_t_set (ADDSI (current_cpu->thumb_h_sp_t_get (), 4));
}
}
if (ANDSI (FLD (f_rlist), SLLSI (1, 1))) {
{
current_cpu->thumb_h_gr_t_set (((UINT) 1), current_cpu->GETMEMSI (pc, current_cpu->thumb_h_sp_t_get ()));
current_cpu->thumb_h_sp_t_set (ADDSI (current_cpu->thumb_h_sp_t_get (), 4));
}
}
if (ANDSI (FLD (f_rlist), SLLSI (1, 2))) {
{
current_cpu->thumb_h_gr_t_set (((UINT) 2), current_cpu->GETMEMSI (pc, current_cpu->thumb_h_sp_t_get ()));
current_cpu->thumb_h_sp_t_set (ADDSI (current_cpu->thumb_h_sp_t_get (), 4));
}
}
if (ANDSI (FLD (f_rlist), SLLSI (1, 3))) {
{
current_cpu->thumb_h_gr_t_set (((UINT) 3), current_cpu->GETMEMSI (pc, current_cpu->thumb_h_sp_t_get ()));
current_cpu->thumb_h_sp_t_set (ADDSI (current_cpu->thumb_h_sp_t_get (), 4));
}
}
if (ANDSI (FLD (f_rlist), SLLSI (1, 4))) {
{
current_cpu->thumb_h_gr_t_set (((UINT) 4), current_cpu->GETMEMSI (pc, current_cpu->thumb_h_sp_t_get ()));
current_cpu->thumb_h_sp_t_set (ADDSI (current_cpu->thumb_h_sp_t_get (), 4));
}
}
if (ANDSI (FLD (f_rlist), SLLSI (1, 5))) {
{
current_cpu->thumb_h_gr_t_set (((UINT) 5), current_cpu->GETMEMSI (pc, current_cpu->thumb_h_sp_t_get ()));
current_cpu->thumb_h_sp_t_set (ADDSI (current_cpu->thumb_h_sp_t_get (), 4));
}
}
if (ANDSI (FLD (f_rlist), SLLSI (1, 6))) {
{
current_cpu->thumb_h_gr_t_set (((UINT) 6), current_cpu->GETMEMSI (pc, current_cpu->thumb_h_sp_t_get ()));
current_cpu->thumb_h_sp_t_set (ADDSI (current_cpu->thumb_h_sp_t_get (), 4));
}
}
if (ANDSI (FLD (f_rlist), SLLSI (1, 7))) {
{
current_cpu->thumb_h_gr_t_set (((UINT) 7), current_cpu->GETMEMSI (pc, current_cpu->thumb_h_sp_t_get ()));
current_cpu->thumb_h_sp_t_set (ADDSI (current_cpu->thumb_h_sp_t_get (), 4));
}
}
}

#undef FLD
    }
    NEXT (vpc);

// ********** pop {${rlist-pc}}

  CASE (INSN_POP_PC):
    {
      thumb_scache* abuf = vpc;
#define FLD(f) abuf->fields.sfmt_stmia.f
      PCADDR pc = abuf->addr;
      PCADDR npc;
      branch_status br_status = BRANCH_UNTAKEN;
      vpc = vpc + 1;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, 4);

{
if (ANDSI (FLD (f_rlist), SLLSI (1, 0))) {
{
current_cpu->thumb_h_gr_t_set (((UINT) 0), current_cpu->GETMEMSI (pc, current_cpu->thumb_h_sp_t_get ()));
current_cpu->thumb_h_sp_t_set (ADDSI (current_cpu->thumb_h_sp_t_get (), 4));
}
}
if (ANDSI (FLD (f_rlist), SLLSI (1, 1))) {
{
current_cpu->thumb_h_gr_t_set (((UINT) 1), current_cpu->GETMEMSI (pc, current_cpu->thumb_h_sp_t_get ()));
current_cpu->thumb_h_sp_t_set (ADDSI (current_cpu->thumb_h_sp_t_get (), 4));
}
}
if (ANDSI (FLD (f_rlist), SLLSI (1, 2))) {
{
current_cpu->thumb_h_gr_t_set (((UINT) 2), current_cpu->GETMEMSI (pc, current_cpu->thumb_h_sp_t_get ()));
current_cpu->thumb_h_sp_t_set (ADDSI (current_cpu->thumb_h_sp_t_get (), 4));
}
}
if (ANDSI (FLD (f_rlist), SLLSI (1, 3))) {
{
current_cpu->thumb_h_gr_t_set (((UINT) 3), current_cpu->GETMEMSI (pc, current_cpu->thumb_h_sp_t_get ()));
current_cpu->thumb_h_sp_t_set (ADDSI (current_cpu->thumb_h_sp_t_get (), 4));
}
}
if (ANDSI (FLD (f_rlist), SLLSI (1, 4))) {
{
current_cpu->thumb_h_gr_t_set (((UINT) 4), current_cpu->GETMEMSI (pc, current_cpu->thumb_h_sp_t_get ()));
current_cpu->thumb_h_sp_t_set (ADDSI (current_cpu->thumb_h_sp_t_get (), 4));
}
}
if (ANDSI (FLD (f_rlist), SLLSI (1, 5))) {
{
current_cpu->thumb_h_gr_t_set (((UINT) 5), current_cpu->GETMEMSI (pc, current_cpu->thumb_h_sp_t_get ()));
current_cpu->thumb_h_sp_t_set (ADDSI (current_cpu->thumb_h_sp_t_get (), 4));
}
}
if (ANDSI (FLD (f_rlist), SLLSI (1, 6))) {
{
current_cpu->thumb_h_gr_t_set (((UINT) 6), current_cpu->GETMEMSI (pc, current_cpu->thumb_h_sp_t_get ()));
current_cpu->thumb_h_sp_t_set (ADDSI (current_cpu->thumb_h_sp_t_get (), 4));
}
}
if (ANDSI (FLD (f_rlist), SLLSI (1, 7))) {
{
current_cpu->thumb_h_gr_t_set (((UINT) 7), current_cpu->GETMEMSI (pc, current_cpu->thumb_h_sp_t_get ()));
current_cpu->thumb_h_sp_t_set (ADDSI (current_cpu->thumb_h_sp_t_get (), 4));
}
}
npc = current_cpu->GETMEMSI (pc, current_cpu->thumb_h_sp_t_get ()); br_status = BRANCH_UNCACHEABLE;
current_cpu->thumb_h_sp_t_set (ADDSI (current_cpu->thumb_h_sp_t_get (), 4));
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT (vpc);

// ********** stmia $rb!,{$rlist}

  CASE (INSN_STMIA):
    {
      thumb_scache* abuf = vpc;
#define FLD(f) abuf->fields.sfmt_stmia.f
      PCADDR pc = abuf->addr;
      vpc = vpc + 1;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, 4);

{
if (ANDSI (FLD (f_rlist), SLLSI (1, 0))) {
{
current_cpu->SETMEMSI (pc, current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb)), current_cpu->thumb_h_gr_t_get (((UINT) 0)));
current_cpu->thumb_h_gr_t_set (FLD (f_bit10_rb), ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb)), 4));
}
}
if (ANDSI (FLD (f_rlist), SLLSI (1, 1))) {
{
current_cpu->SETMEMSI (pc, current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb)), current_cpu->thumb_h_gr_t_get (((UINT) 1)));
current_cpu->thumb_h_gr_t_set (FLD (f_bit10_rb), ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb)), 4));
}
}
if (ANDSI (FLD (f_rlist), SLLSI (1, 2))) {
{
current_cpu->SETMEMSI (pc, current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb)), current_cpu->thumb_h_gr_t_get (((UINT) 2)));
current_cpu->thumb_h_gr_t_set (FLD (f_bit10_rb), ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb)), 4));
}
}
if (ANDSI (FLD (f_rlist), SLLSI (1, 3))) {
{
current_cpu->SETMEMSI (pc, current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb)), current_cpu->thumb_h_gr_t_get (((UINT) 3)));
current_cpu->thumb_h_gr_t_set (FLD (f_bit10_rb), ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb)), 4));
}
}
if (ANDSI (FLD (f_rlist), SLLSI (1, 4))) {
{
current_cpu->SETMEMSI (pc, current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb)), current_cpu->thumb_h_gr_t_get (((UINT) 4)));
current_cpu->thumb_h_gr_t_set (FLD (f_bit10_rb), ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb)), 4));
}
}
if (ANDSI (FLD (f_rlist), SLLSI (1, 5))) {
{
current_cpu->SETMEMSI (pc, current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb)), current_cpu->thumb_h_gr_t_get (((UINT) 5)));
current_cpu->thumb_h_gr_t_set (FLD (f_bit10_rb), ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb)), 4));
}
}
if (ANDSI (FLD (f_rlist), SLLSI (1, 6))) {
{
current_cpu->SETMEMSI (pc, current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb)), current_cpu->thumb_h_gr_t_get (((UINT) 6)));
current_cpu->thumb_h_gr_t_set (FLD (f_bit10_rb), ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb)), 4));
}
}
if (ANDSI (FLD (f_rlist), SLLSI (1, 7))) {
{
current_cpu->SETMEMSI (pc, current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb)), current_cpu->thumb_h_gr_t_get (((UINT) 7)));
current_cpu->thumb_h_gr_t_set (FLD (f_bit10_rb), ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb)), 4));
}
}
}

#undef FLD
    }
    NEXT (vpc);

// ********** ldmia $rb!,{$rlist}

  CASE (INSN_LDMIA):
    {
      thumb_scache* abuf = vpc;
#define FLD(f) abuf->fields.sfmt_stmia.f
      PCADDR pc = abuf->addr;
      vpc = vpc + 1;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, 4);

{
if (ANDSI (FLD (f_rlist), SLLSI (1, 0))) {
{
current_cpu->thumb_h_gr_t_set (((UINT) 0), current_cpu->GETMEMSI (pc, current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb))));
current_cpu->thumb_h_gr_t_set (FLD (f_bit10_rb), ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb)), 4));
}
}
if (ANDSI (FLD (f_rlist), SLLSI (1, 1))) {
{
current_cpu->thumb_h_gr_t_set (((UINT) 1), current_cpu->GETMEMSI (pc, current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb))));
current_cpu->thumb_h_gr_t_set (FLD (f_bit10_rb), ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb)), 4));
}
}
if (ANDSI (FLD (f_rlist), SLLSI (1, 2))) {
{
current_cpu->thumb_h_gr_t_set (((UINT) 2), current_cpu->GETMEMSI (pc, current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb))));
current_cpu->thumb_h_gr_t_set (FLD (f_bit10_rb), ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb)), 4));
}
}
if (ANDSI (FLD (f_rlist), SLLSI (1, 3))) {
{
current_cpu->thumb_h_gr_t_set (((UINT) 3), current_cpu->GETMEMSI (pc, current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb))));
current_cpu->thumb_h_gr_t_set (FLD (f_bit10_rb), ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb)), 4));
}
}
if (ANDSI (FLD (f_rlist), SLLSI (1, 4))) {
{
current_cpu->thumb_h_gr_t_set (((UINT) 4), current_cpu->GETMEMSI (pc, current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb))));
current_cpu->thumb_h_gr_t_set (FLD (f_bit10_rb), ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb)), 4));
}
}
if (ANDSI (FLD (f_rlist), SLLSI (1, 5))) {
{
current_cpu->thumb_h_gr_t_set (((UINT) 5), current_cpu->GETMEMSI (pc, current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb))));
current_cpu->thumb_h_gr_t_set (FLD (f_bit10_rb), ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb)), 4));
}
}
if (ANDSI (FLD (f_rlist), SLLSI (1, 6))) {
{
current_cpu->thumb_h_gr_t_set (((UINT) 6), current_cpu->GETMEMSI (pc, current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb))));
current_cpu->thumb_h_gr_t_set (FLD (f_bit10_rb), ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb)), 4));
}
}
if (ANDSI (FLD (f_rlist), SLLSI (1, 7))) {
{
current_cpu->thumb_h_gr_t_set (((UINT) 7), current_cpu->GETMEMSI (pc, current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb))));
current_cpu->thumb_h_gr_t_set (FLD (f_bit10_rb), ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb)), 4));
}
}
}

#undef FLD
    }
    NEXT (vpc);

// ********** beq $soffset8

  CASE (INSN_BEQ):
    {
      thumb_scache* abuf = vpc;
#define FLD(f) abuf->fields.sfmt_beq.f
      PCADDR pc = abuf->addr;
      PCADDR npc;
      branch_status br_status = BRANCH_UNTAKEN;
      vpc = vpc + 1;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, 4);

if (current_cpu->hardware.h_zbit) {
npc = FLD (i_soffset8); br_status = BRANCH_CACHEABLE;
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT (vpc);

// ********** bne $soffset8

  CASE (INSN_BNE):
    {
      thumb_scache* abuf = vpc;
#define FLD(f) abuf->fields.sfmt_beq.f
      PCADDR pc = abuf->addr;
      PCADDR npc;
      branch_status br_status = BRANCH_UNTAKEN;
      vpc = vpc + 1;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, 4);

if (NOTBI (current_cpu->hardware.h_zbit)) {
npc = FLD (i_soffset8); br_status = BRANCH_CACHEABLE;
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT (vpc);

// ********** bcs $soffset8

  CASE (INSN_BCS):
    {
      thumb_scache* abuf = vpc;
#define FLD(f) abuf->fields.sfmt_beq.f
      PCADDR pc = abuf->addr;
      PCADDR npc;
      branch_status br_status = BRANCH_UNTAKEN;
      vpc = vpc + 1;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, 4);

if (current_cpu->hardware.h_cbit) {
npc = FLD (i_soffset8); br_status = BRANCH_CACHEABLE;
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT (vpc);

// ********** bcc $soffset8

  CASE (INSN_BCC):
    {
      thumb_scache* abuf = vpc;
#define FLD(f) abuf->fields.sfmt_beq.f
      PCADDR pc = abuf->addr;
      PCADDR npc;
      branch_status br_status = BRANCH_UNTAKEN;
      vpc = vpc + 1;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, 4);

if (NOTBI (current_cpu->hardware.h_cbit)) {
npc = FLD (i_soffset8); br_status = BRANCH_CACHEABLE;
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT (vpc);

// ********** bmi $soffset8

  CASE (INSN_BMI):
    {
      thumb_scache* abuf = vpc;
#define FLD(f) abuf->fields.sfmt_beq.f
      PCADDR pc = abuf->addr;
      PCADDR npc;
      branch_status br_status = BRANCH_UNTAKEN;
      vpc = vpc + 1;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, 4);

if (current_cpu->hardware.h_nbit) {
npc = FLD (i_soffset8); br_status = BRANCH_CACHEABLE;
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT (vpc);

// ********** bpl $soffset8

  CASE (INSN_BPL):
    {
      thumb_scache* abuf = vpc;
#define FLD(f) abuf->fields.sfmt_beq.f
      PCADDR pc = abuf->addr;
      PCADDR npc;
      branch_status br_status = BRANCH_UNTAKEN;
      vpc = vpc + 1;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, 4);

if (NOTBI (current_cpu->hardware.h_nbit)) {
npc = FLD (i_soffset8); br_status = BRANCH_CACHEABLE;
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT (vpc);

// ********** bvs $soffset8

  CASE (INSN_BVS):
    {
      thumb_scache* abuf = vpc;
#define FLD(f) abuf->fields.sfmt_beq.f
      PCADDR pc = abuf->addr;
      PCADDR npc;
      branch_status br_status = BRANCH_UNTAKEN;
      vpc = vpc + 1;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, 4);

if (current_cpu->hardware.h_vbit) {
npc = FLD (i_soffset8); br_status = BRANCH_CACHEABLE;
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT (vpc);

// ********** bvc $soffset8

  CASE (INSN_BVC):
    {
      thumb_scache* abuf = vpc;
#define FLD(f) abuf->fields.sfmt_beq.f
      PCADDR pc = abuf->addr;
      PCADDR npc;
      branch_status br_status = BRANCH_UNTAKEN;
      vpc = vpc + 1;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, 4);

if (NOTBI (current_cpu->hardware.h_vbit)) {
npc = FLD (i_soffset8); br_status = BRANCH_CACHEABLE;
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT (vpc);

// ********** bhi $soffset8

  CASE (INSN_BHI):
    {
      thumb_scache* abuf = vpc;
#define FLD(f) abuf->fields.sfmt_beq.f
      PCADDR pc = abuf->addr;
      PCADDR npc;
      branch_status br_status = BRANCH_UNTAKEN;
      vpc = vpc + 1;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, 4);

if (ANDBI (current_cpu->hardware.h_cbit, NOTBI (current_cpu->hardware.h_zbit))) {
npc = FLD (i_soffset8); br_status = BRANCH_CACHEABLE;
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT (vpc);

// ********** bls $soffset8

  CASE (INSN_BLS):
    {
      thumb_scache* abuf = vpc;
#define FLD(f) abuf->fields.sfmt_beq.f
      PCADDR pc = abuf->addr;
      PCADDR npc;
      branch_status br_status = BRANCH_UNTAKEN;
      vpc = vpc + 1;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, 4);

if (ORBI (NOTBI (current_cpu->hardware.h_cbit), current_cpu->hardware.h_zbit)) {
npc = FLD (i_soffset8); br_status = BRANCH_CACHEABLE;
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT (vpc);

// ********** bge $soffset8

  CASE (INSN_BGE):
    {
      thumb_scache* abuf = vpc;
#define FLD(f) abuf->fields.sfmt_beq.f
      PCADDR pc = abuf->addr;
      PCADDR npc;
      branch_status br_status = BRANCH_UNTAKEN;
      vpc = vpc + 1;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, 4);

if (NOTBI (XORBI (current_cpu->hardware.h_nbit, current_cpu->hardware.h_vbit))) {
npc = FLD (i_soffset8); br_status = BRANCH_CACHEABLE;
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT (vpc);

// ********** blt $soffset8

  CASE (INSN_BLT):
    {
      thumb_scache* abuf = vpc;
#define FLD(f) abuf->fields.sfmt_beq.f
      PCADDR pc = abuf->addr;
      PCADDR npc;
      branch_status br_status = BRANCH_UNTAKEN;
      vpc = vpc + 1;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, 4);

if (XORBI (current_cpu->hardware.h_nbit, current_cpu->hardware.h_vbit)) {
npc = FLD (i_soffset8); br_status = BRANCH_CACHEABLE;
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT (vpc);

// ********** bgt $soffset8

  CASE (INSN_BGT):
    {
      thumb_scache* abuf = vpc;
#define FLD(f) abuf->fields.sfmt_beq.f
      PCADDR pc = abuf->addr;
      PCADDR npc;
      branch_status br_status = BRANCH_UNTAKEN;
      vpc = vpc + 1;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, 4);

if (NOTBI (ORBI (current_cpu->hardware.h_zbit, XORBI (current_cpu->hardware.h_nbit, current_cpu->hardware.h_vbit)))) {
npc = FLD (i_soffset8); br_status = BRANCH_CACHEABLE;
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT (vpc);

// ********** ble $soffset8

  CASE (INSN_BLE):
    {
      thumb_scache* abuf = vpc;
#define FLD(f) abuf->fields.sfmt_beq.f
      PCADDR pc = abuf->addr;
      PCADDR npc;
      branch_status br_status = BRANCH_UNTAKEN;
      vpc = vpc + 1;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, 4);

if (ORBI (current_cpu->hardware.h_zbit, XORBI (current_cpu->hardware.h_nbit, current_cpu->hardware.h_vbit))) {
npc = FLD (i_soffset8); br_status = BRANCH_CACHEABLE;
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT (vpc);

// ********** swi $value8

  CASE (INSN_SWI):
    {
      thumb_scache* abuf = vpc;
#define FLD(f) abuf->fields.sfmt_swi.f
      PCADDR pc = abuf->addr;
      PCADDR npc;
      branch_status br_status = BRANCH_UNTAKEN;
      vpc = vpc + 1;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, 4);

npc = current_cpu->thumb_swi (pc, FLD (f_value8)); br_status = BRANCH_UNCACHEABLE;

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT (vpc);

// ********** b $offset11

  CASE (INSN_B):
    {
      thumb_scache* abuf = vpc;
#define FLD(f) abuf->fields.sfmt_b.f
      PCADDR pc = abuf->addr;
      PCADDR npc;
      branch_status br_status = BRANCH_UNTAKEN;
      vpc = vpc + 1;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, 4);

npc = FLD (i_offset11); br_status = BRANCH_CACHEABLE;

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT (vpc);

// ********** bl-hi ${lbwl-hi}

  CASE (INSN_BL_HI):
    {
      thumb_scache* abuf = vpc;
#define FLD(f) abuf->fields.sfmt_bl_hi.f
      PCADDR pc = abuf->addr;
      vpc = vpc + 1;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, 4);

current_cpu->thumb_h_lr_t_set (ADDSI (ADDSI (pc, 4), SLLSI (FLD (f_lbwl_hi), 12)));

#undef FLD
    }
    NEXT (vpc);

// ********** bl-lo ${lbwl-lo}

  CASE (INSN_BL_LO):
    {
      thumb_scache* abuf = vpc;
#define FLD(f) abuf->fields.sfmt_bl_lo.f
      PCADDR pc = abuf->addr;
      PCADDR npc;
      branch_status br_status = BRANCH_UNTAKEN;
      vpc = vpc + 1;
      current_cpu->hardware.h_gr[((UINT) 15)] = ADDSI (pc, 4);

{
  SI tmp_cur_pc;
  tmp_cur_pc = pc;
npc = ADDSI (current_cpu->thumb_h_lr_t_get (), SLLSI (FLD (f_lbwl_lo), 1)); br_status = BRANCH_UNCACHEABLE;
current_cpu->thumb_h_lr_t_set (ORSI (ADDSI (tmp_cur_pc, 2), 1));
}

      pbb_br_npc = npc;
      pbb_br_status = br_status;
#undef FLD
    }
    NEXT (vpc);


#ifdef __GNUC__
    end_switch: ;
#else
    default: abort();
#endif
  }

  // Save vpc for next time.
  current_cpu->thumb_engine.set_next_vpc (vpc);
}

@


1.6
log
@Regenerate cgen files, update copyright year.
@
text
@d175 1
a175 1
#define FLD(f) abuf->fields.fmt_empty.f
d192 1
a192 1
#define FLD(f) abuf->fields.fmt_empty.f
d209 1
a209 1
#define FLD(f) abuf->fields.fmt_empty.f
d231 1
a231 1
#define FLD(f) abuf->fields.fmt_empty.f
d253 1
a253 1
#define FLD(f) abuf->fields.fmt_empty.f
d270 1
a270 1
#define FLD(f) abuf->fields.fmt_empty.f
@


1.5
log
@	* cgen-cpu.h: Update for new location of cgen/bitset.h.
	* tracedis.h: Ditto.

Plus update generated files to pick up two cgen changes:
1)
	* desc-cpu.scm (/gen-hash-defines): Remove #include of cgen-bitset.h.
	* sid-cpu.scm (cgen-desc.h): Update location of cgen's bitset.h.
2)
	* utils-sim.scm (/gen-set-itype-and-extract): New function.
	(/gen-bracketed-set-itype-and-extract): New function.
	(/gen-decode-default-entry): Rewrite.
	(/table-guts-to-mask, /all-opcode-bits-used?): New functions.
	(/gen-decode-insn-entry): New arg table-guts-thus-far, all callers
	updated.  Don't unnecessarily emit check for whether all opcode bits
	have been examined.
	(/gen-decode-expr-set-itype): Delete.
	(/gen-decode-expr-entry): Update.
	(/gen-decode-table-entry): New arg table-guts-thus-far, all callers
	updated.  Keep track of decoder tables used thus far.
	(/gen-decoder-switch): Ditto.
@
text
@d5 1
a5 1
Copyright (C) 2000-2009 Red Hat, Inc.
@


1.4
log
@Regenerate cgen files (not due to any recent changes, just want to
establish a reference point).
@
text
@d5 1
a5 1
Copyright (C) 2000, 2001, 2002, 2003 Red Hat, Inc.
d297 1
a297 4
  {
    SI opval = SLLSI (current_cpu->thumb_h_gr_t_get (FLD (f_rs)), FLD (f_offset5));
    current_cpu->thumb_h_gr_t_set (FLD (f_rd), opval);
  }
d300 2
a301 8
  {
    BI opval = EQSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), 0);
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), 0);
    current_cpu->hardware.h_nbit = opval;
  }
d303 1
a303 4
  {
    BI opval = tmp_carry_out;
    current_cpu->hardware.h_cbit = opval;
  }
d324 1
a324 4
  {
    SI opval = SRLSI (current_cpu->thumb_h_gr_t_get (FLD (f_rs)), FLD (f_offset5));
    current_cpu->thumb_h_gr_t_set (FLD (f_rd), opval);
  }
d327 2
a328 8
  {
    BI opval = EQSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), 0);
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), 0);
    current_cpu->hardware.h_nbit = opval;
  }
d330 1
a330 4
  {
    BI opval = tmp_carry_out;
    current_cpu->hardware.h_cbit = opval;
  }
d351 1
a351 4
  {
    SI opval = SRASI (current_cpu->thumb_h_gr_t_get (FLD (f_rs)), FLD (f_offset5));
    current_cpu->thumb_h_gr_t_set (FLD (f_rd), opval);
  }
d354 2
a355 8
  {
    BI opval = EQSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), 0);
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), 0);
    current_cpu->hardware.h_nbit = opval;
  }
d357 1
a357 4
  {
    BI opval = tmp_carry_out;
    current_cpu->hardware.h_cbit = opval;
  }
d380 2
a381 8
  {
    BI opval = EQSI (tmp_result, 0);
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    current_cpu->hardware.h_nbit = opval;
  }
d383 2
a384 8
  {
    BI opval = ADDCFSI (current_cpu->thumb_h_gr_t_get (FLD (f_rs)), current_cpu->thumb_h_gr_t_get (FLD (f_rn)), 0);
    current_cpu->hardware.h_cbit = opval;
  }
  {
    BI opval = ADDOFSI (current_cpu->thumb_h_gr_t_get (FLD (f_rs)), current_cpu->thumb_h_gr_t_get (FLD (f_rn)), 0);
    current_cpu->hardware.h_vbit = opval;
  }
d386 1
a386 4
  {
    SI opval = ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_rs)), current_cpu->thumb_h_gr_t_get (FLD (f_rn)));
    current_cpu->thumb_h_gr_t_set (FLD (f_rd), opval);
  }
d408 2
a409 8
  {
    BI opval = EQSI (tmp_result, 0);
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    current_cpu->hardware.h_nbit = opval;
  }
d411 2
a412 8
  {
    BI opval = ADDCFSI (current_cpu->thumb_h_gr_t_get (FLD (f_rs)), FLD (f_offset3), 0);
    current_cpu->hardware.h_cbit = opval;
  }
  {
    BI opval = ADDOFSI (current_cpu->thumb_h_gr_t_get (FLD (f_rs)), FLD (f_offset3), 0);
    current_cpu->hardware.h_vbit = opval;
  }
d414 1
a414 4
  {
    SI opval = ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_rs)), FLD (f_offset3));
    current_cpu->thumb_h_gr_t_set (FLD (f_rd), opval);
  }
d436 2
a437 8
  {
    BI opval = EQSI (tmp_result, 0);
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    current_cpu->hardware.h_nbit = opval;
  }
d439 2
a440 8
  {
    BI opval = NOTSI (SUBCFSI (current_cpu->thumb_h_gr_t_get (FLD (f_rs)), current_cpu->thumb_h_gr_t_get (FLD (f_rn)), 0));
    current_cpu->hardware.h_cbit = opval;
  }
  {
    BI opval = SUBOFSI (current_cpu->thumb_h_gr_t_get (FLD (f_rs)), current_cpu->thumb_h_gr_t_get (FLD (f_rn)), 0);
    current_cpu->hardware.h_vbit = opval;
  }
d442 1
a442 4
  {
    SI opval = SUBSI (current_cpu->thumb_h_gr_t_get (FLD (f_rs)), current_cpu->thumb_h_gr_t_get (FLD (f_rn)));
    current_cpu->thumb_h_gr_t_set (FLD (f_rd), opval);
  }
d464 2
a465 8
  {
    BI opval = EQSI (tmp_result, 0);
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    current_cpu->hardware.h_nbit = opval;
  }
d467 2
a468 8
  {
    BI opval = NOTSI (SUBCFSI (current_cpu->thumb_h_gr_t_get (FLD (f_rs)), FLD (f_offset3), 0));
    current_cpu->hardware.h_cbit = opval;
  }
  {
    BI opval = SUBOFSI (current_cpu->thumb_h_gr_t_get (FLD (f_rs)), FLD (f_offset3), 0);
    current_cpu->hardware.h_vbit = opval;
  }
d470 1
a470 4
  {
    SI opval = SUBSI (current_cpu->thumb_h_gr_t_get (FLD (f_rs)), FLD (f_offset3));
    current_cpu->thumb_h_gr_t_set (FLD (f_rd), opval);
  }
d488 1
a488 4
  {
    SI opval = FLD (f_offset8);
    current_cpu->thumb_h_gr_t_set (FLD (f_bit10_rd), opval);
  }
d490 2
a491 8
  {
    BI opval = EQSI (current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rd)), 0);
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rd)), 0);
    current_cpu->hardware.h_nbit = opval;
  }
d513 2
a514 8
  {
    BI opval = EQSI (tmp_result, 0);
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    current_cpu->hardware.h_nbit = opval;
  }
d516 2
a517 8
  {
    BI opval = NOTSI (SUBCFSI (current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rd)), FLD (f_offset8), 0));
    current_cpu->hardware.h_cbit = opval;
  }
  {
    BI opval = SUBOFSI (current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rd)), FLD (f_offset8), 0);
    current_cpu->hardware.h_vbit = opval;
  }
d539 2
a540 8
  {
    BI opval = EQSI (tmp_result, 0);
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    current_cpu->hardware.h_nbit = opval;
  }
d542 2
a543 8
  {
    BI opval = ADDCFSI (current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rd)), FLD (f_offset8), 0);
    current_cpu->hardware.h_cbit = opval;
  }
  {
    BI opval = ADDOFSI (current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rd)), FLD (f_offset8), 0);
    current_cpu->hardware.h_vbit = opval;
  }
d545 1
a545 4
  {
    SI opval = ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rd)), FLD (f_offset8));
    current_cpu->thumb_h_gr_t_set (FLD (f_bit10_rd), opval);
  }
d567 2
a568 8
  {
    BI opval = EQSI (tmp_result, 0);
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    current_cpu->hardware.h_nbit = opval;
  }
d570 2
a571 8
  {
    BI opval = NOTSI (SUBCFSI (current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rd)), FLD (f_offset8), 0));
    current_cpu->hardware.h_cbit = opval;
  }
  {
    BI opval = SUBOFSI (current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rd)), FLD (f_offset8), 0);
    current_cpu->hardware.h_vbit = opval;
  }
d573 1
a573 4
  {
    SI opval = SUBSI (current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rd)), FLD (f_offset8));
    current_cpu->thumb_h_gr_t_set (FLD (f_bit10_rd), opval);
  }
d591 1
a591 4
  {
    SI opval = ANDSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), current_cpu->thumb_h_gr_t_get (FLD (f_rs)));
    current_cpu->thumb_h_gr_t_set (FLD (f_rd), opval);
  }
d593 2
a594 8
  {
    BI opval = EQSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), 0);
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), 0);
    current_cpu->hardware.h_nbit = opval;
  }
d613 1
a613 4
  {
    SI opval = XORSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), current_cpu->thumb_h_gr_t_get (FLD (f_rs)));
    current_cpu->thumb_h_gr_t_set (FLD (f_rd), opval);
  }
d615 2
a616 8
  {
    BI opval = EQSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), 0);
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), 0);
    current_cpu->hardware.h_nbit = opval;
  }
d639 1
a639 4
  {
    SI opval = tmp_result;
    current_cpu->thumb_h_gr_t_set (FLD (f_rd), opval);
  }
d642 2
a643 8
  {
    BI opval = EQSI (tmp_result, 0);
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    current_cpu->hardware.h_nbit = opval;
  }
d645 1
a645 4
  {
    BI opval = tmp_carry_out;
    current_cpu->hardware.h_cbit = opval;
  }
d668 1
a668 4
  {
    SI opval = tmp_result;
    current_cpu->thumb_h_gr_t_set (FLD (f_rd), opval);
  }
d671 2
a672 8
  {
    BI opval = EQSI (tmp_result, 0);
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    current_cpu->hardware.h_nbit = opval;
  }
d674 1
a674 4
  {
    BI opval = tmp_carry_out;
    current_cpu->hardware.h_cbit = opval;
  }
d697 1
a697 4
  {
    SI opval = tmp_result;
    current_cpu->thumb_h_gr_t_set (FLD (f_rd), opval);
  }
d700 2
a701 8
  {
    BI opval = EQSI (tmp_result, 0);
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    current_cpu->hardware.h_nbit = opval;
  }
d703 1
a703 4
  {
    BI opval = tmp_carry_out;
    current_cpu->hardware.h_cbit = opval;
  }
d726 1
a726 4
  {
    SI opval = tmp_result;
    current_cpu->thumb_h_gr_t_set (FLD (f_rd), opval);
  }
d729 2
a730 8
  {
    BI opval = EQSI (tmp_result, 0);
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    current_cpu->hardware.h_nbit = opval;
  }
d732 1
a732 4
  {
    BI opval = tmp_carry_out;
    current_cpu->hardware.h_cbit = opval;
  }
d757 2
a758 8
  {
    BI opval = EQSI (tmp_result, 0);
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    current_cpu->hardware.h_nbit = opval;
  }
d760 2
a761 8
  {
    BI opval = ADDCFSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), current_cpu->thumb_h_gr_t_get (FLD (f_rs)), current_cpu->hardware.h_cbit);
    current_cpu->hardware.h_cbit = opval;
  }
  {
    BI opval = ADDOFSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), current_cpu->thumb_h_gr_t_get (FLD (f_rs)), current_cpu->hardware.h_cbit);
    current_cpu->hardware.h_vbit = opval;
  }
d763 1
a763 4
  {
    SI opval = tmp_result;
    current_cpu->thumb_h_gr_t_set (FLD (f_rd), opval);
  }
d787 2
a788 8
  {
    BI opval = EQSI (tmp_result, 0);
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    current_cpu->hardware.h_nbit = opval;
  }
d790 2
a791 8
  {
    BI opval = NOTSI (SUBCFSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), current_cpu->thumb_h_gr_t_get (FLD (f_rs)), NOTBI (current_cpu->hardware.h_cbit)));
    current_cpu->hardware.h_cbit = opval;
  }
  {
    BI opval = SUBOFSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), current_cpu->thumb_h_gr_t_get (FLD (f_rs)), NOTBI (current_cpu->hardware.h_cbit));
    current_cpu->hardware.h_vbit = opval;
  }
d793 1
a793 4
  {
    SI opval = tmp_result;
    current_cpu->thumb_h_gr_t_set (FLD (f_rd), opval);
  }
d814 2
a815 8
  {
    BI opval = EQSI (tmp_x, 0);
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_x, 0);
    current_cpu->hardware.h_nbit = opval;
  }
d840 2
a841 8
  {
    BI opval = EQSI (tmp_result, 0);
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    current_cpu->hardware.h_nbit = opval;
  }
d843 2
a844 8
  {
    BI opval = NOTSI (SUBCFSI (0, current_cpu->thumb_h_gr_t_get (FLD (f_rs)), 0));
    current_cpu->hardware.h_cbit = opval;
  }
  {
    BI opval = SUBOFSI (0, current_cpu->thumb_h_gr_t_get (FLD (f_rs)), 0);
    current_cpu->hardware.h_vbit = opval;
  }
d846 1
a846 4
  {
    SI opval = tmp_result;
    current_cpu->thumb_h_gr_t_set (FLD (f_rd), opval);
  }
d867 2
a868 8
  {
    BI opval = EQSI (tmp_result, 0);
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    current_cpu->hardware.h_nbit = opval;
  }
d870 2
a871 8
  {
    BI opval = NOTSI (SUBCFSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), current_cpu->thumb_h_gr_t_get (FLD (f_rs)), 0));
    current_cpu->hardware.h_cbit = opval;
  }
  {
    BI opval = SUBOFSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), current_cpu->thumb_h_gr_t_get (FLD (f_rs)), 0);
    current_cpu->hardware.h_vbit = opval;
  }
d892 2
a893 8
  {
    BI opval = EQSI (tmp_result, 0);
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    current_cpu->hardware.h_nbit = opval;
  }
d895 2
a896 8
  {
    BI opval = ADDCFSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), current_cpu->thumb_h_gr_t_get (FLD (f_rs)), 0);
    current_cpu->hardware.h_cbit = opval;
  }
  {
    BI opval = ADDOFSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), current_cpu->thumb_h_gr_t_get (FLD (f_rs)), 0);
    current_cpu->hardware.h_vbit = opval;
  }
d914 1
a914 4
  {
    SI opval = ORSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), current_cpu->thumb_h_gr_t_get (FLD (f_rs)));
    current_cpu->thumb_h_gr_t_set (FLD (f_rd), opval);
  }
d916 2
a917 8
  {
    BI opval = EQSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), 0);
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), 0);
    current_cpu->hardware.h_nbit = opval;
  }
d936 1
a936 4
  {
    SI opval = MULSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), current_cpu->thumb_h_gr_t_get (FLD (f_rs)));
    current_cpu->thumb_h_gr_t_set (FLD (f_rd), opval);
  }
d938 2
a939 8
  {
    BI opval = EQSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), 0);
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), 0);
    current_cpu->hardware.h_nbit = opval;
  }
d958 1
a958 4
  {
    SI opval = ANDSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), INVSI (current_cpu->thumb_h_gr_t_get (FLD (f_rs))));
    current_cpu->thumb_h_gr_t_set (FLD (f_rd), opval);
  }
d960 2
a961 8
  {
    BI opval = EQSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), 0);
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), 0);
    current_cpu->hardware.h_nbit = opval;
  }
d980 1
a980 4
  {
    SI opval = INVSI (current_cpu->thumb_h_gr_t_get (FLD (f_rs)));
    current_cpu->thumb_h_gr_t_set (FLD (f_rd), opval);
  }
d982 2
a983 8
  {
    BI opval = EQSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), 0);
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), 0);
    current_cpu->hardware.h_nbit = opval;
  }
d1001 1
a1001 4
  {
    SI opval = ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), current_cpu->thumb_h_hiregs_get (FLD (f_rs)));
    current_cpu->thumb_h_gr_t_set (FLD (f_rd), opval);
  }
d1020 1
a1020 4
  {
    USI opval = ADDSI (current_cpu->thumb_h_hiregs_get (FLD (f_rd)), current_cpu->thumb_h_gr_t_get (FLD (f_rs)));
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
d1022 1
a1022 4
  {
    SI opval = ADDSI (current_cpu->thumb_h_hiregs_get (FLD (f_rd)), current_cpu->thumb_h_gr_t_get (FLD (f_rs)));
    current_cpu->thumb_h_hiregs_set (FLD (f_rd), opval);
  }
d1044 1
a1044 4
  {
    USI opval = ADDSI (current_cpu->thumb_h_hiregs_get (FLD (f_rd)), current_cpu->thumb_h_hiregs_get (FLD (f_rs)));
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
d1046 1
a1046 4
  {
    SI opval = ADDSI (current_cpu->thumb_h_hiregs_get (FLD (f_rd)), current_cpu->thumb_h_hiregs_get (FLD (f_rs)));
    current_cpu->thumb_h_hiregs_set (FLD (f_rd), opval);
  }
d1069 2
a1070 8
  {
    BI opval = EQSI (tmp_result, 0);
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    current_cpu->hardware.h_nbit = opval;
  }
d1072 2
a1073 8
  {
    BI opval = NOTSI (SUBCFSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), current_cpu->thumb_h_hiregs_get (FLD (f_rs)), 0));
    current_cpu->hardware.h_cbit = opval;
  }
  {
    BI opval = SUBOFSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), current_cpu->thumb_h_hiregs_get (FLD (f_rs)), 0);
    current_cpu->hardware.h_vbit = opval;
  }
d1094 2
a1095 8
  {
    BI opval = EQSI (tmp_result, 0);
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    current_cpu->hardware.h_nbit = opval;
  }
d1097 2
a1098 8
  {
    BI opval = NOTSI (SUBCFSI (current_cpu->thumb_h_hiregs_get (FLD (f_rd)), current_cpu->thumb_h_gr_t_get (FLD (f_rs)), 0));
    current_cpu->hardware.h_cbit = opval;
  }
  {
    BI opval = SUBOFSI (current_cpu->thumb_h_hiregs_get (FLD (f_rd)), current_cpu->thumb_h_gr_t_get (FLD (f_rs)), 0);
    current_cpu->hardware.h_vbit = opval;
  }
d1119 2
a1120 8
  {
    BI opval = EQSI (tmp_result, 0);
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    current_cpu->hardware.h_nbit = opval;
  }
d1122 2
a1123 8
  {
    BI opval = NOTSI (SUBCFSI (current_cpu->thumb_h_hiregs_get (FLD (f_rd)), current_cpu->thumb_h_hiregs_get (FLD (f_rs)), 0));
    current_cpu->hardware.h_cbit = opval;
  }
  {
    BI opval = SUBOFSI (current_cpu->thumb_h_hiregs_get (FLD (f_rd)), current_cpu->thumb_h_hiregs_get (FLD (f_rs)), 0);
    current_cpu->hardware.h_vbit = opval;
  }
d1140 1
a1140 4
  {
    SI opval = current_cpu->thumb_h_hiregs_get (FLD (f_rs));
    current_cpu->thumb_h_gr_t_set (FLD (f_rd), opval);
  }
d1159 1
a1159 4
  {
    USI opval = current_cpu->thumb_h_gr_t_get (FLD (f_rs));
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
d1161 1
a1161 4
  {
    SI opval = current_cpu->thumb_h_gr_t_get (FLD (f_rs));
    current_cpu->thumb_h_hiregs_set (FLD (f_rd), opval);
  }
d1183 1
a1183 4
  {
    USI opval = current_cpu->thumb_h_hiregs_get (FLD (f_rs));
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
d1185 1
a1185 4
  {
    SI opval = current_cpu->thumb_h_hiregs_get (FLD (f_rs));
    current_cpu->thumb_h_hiregs_set (FLD (f_rd), opval);
  }
d1207 1
a1207 4
  {
    USI opval = current_cpu->thumb_h_gr_t_get (FLD (f_rs));
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
d1209 1
a1209 4
  {
    BI opval = 0;
    current_cpu->h_tbit_set (opval);
  }
d1232 1
a1232 4
  {
    USI opval = current_cpu->thumb_h_hiregs_get (FLD (f_rs));
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
d1234 1
a1234 4
  {
    BI opval = 0;
    current_cpu->h_tbit_set (opval);
  }
d1254 1
a1254 4
  {
    SI opval = current_cpu->GETMEMSI (pc, ADDSI (ANDSI (ADDSI (pc, 4), -4), FLD (f_word8)));
    current_cpu->thumb_h_gr_t_set (FLD (f_bit10_rd), opval);
  }
d1270 1
a1270 4
  {
    SI opval = current_cpu->thumb_h_gr_t_get (FLD (f_rd));
    current_cpu->SETMEMSI (pc, ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_rb)), current_cpu->thumb_h_gr_t_get (FLD (f_ro))), opval);
  }
d1286 1
a1286 4
  {
    QI opval = current_cpu->thumb_h_gr_t_get (FLD (f_rd));
    current_cpu->SETMEMQI (pc, ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_rb)), current_cpu->thumb_h_gr_t_get (FLD (f_ro))), opval);
  }
d1302 1
a1302 4
  {
    SI opval = current_cpu->GETMEMSI (pc, ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_rb)), current_cpu->thumb_h_gr_t_get (FLD (f_ro))));
    current_cpu->thumb_h_gr_t_set (FLD (f_rd), opval);
  }
d1318 1
a1318 4
  {
    SI opval = ZEXTQISI (current_cpu->GETMEMQI (pc, ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_rb)), current_cpu->thumb_h_gr_t_get (FLD (f_ro)))));
    current_cpu->thumb_h_gr_t_set (FLD (f_rd), opval);
  }
d1334 1
a1334 4
  {
    HI opval = current_cpu->thumb_h_gr_t_get (FLD (f_rd));
    current_cpu->SETMEMHI (pc, ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_rb)), current_cpu->thumb_h_gr_t_get (FLD (f_ro))), opval);
  }
d1350 1
a1350 4
  {
    SI opval = ZEXTHISI (current_cpu->GETMEMHI (pc, ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_rb)), current_cpu->thumb_h_gr_t_get (FLD (f_ro)))));
    current_cpu->thumb_h_gr_t_set (FLD (f_rd), opval);
  }
d1366 1
a1366 4
  {
    SI opval = EXTQISI (current_cpu->GETMEMQI (pc, ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_rb)), current_cpu->thumb_h_gr_t_get (FLD (f_ro)))));
    current_cpu->thumb_h_gr_t_set (FLD (f_rd), opval);
  }
d1382 1
a1382 4
  {
    SI opval = EXTHISI (current_cpu->GETMEMHI (pc, ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_rb)), current_cpu->thumb_h_gr_t_get (FLD (f_ro)))));
    current_cpu->thumb_h_gr_t_set (FLD (f_rd), opval);
  }
d1398 1
a1398 4
  {
    SI opval = current_cpu->thumb_h_gr_t_get (FLD (f_rd));
    current_cpu->SETMEMSI (pc, ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_rb)), FLD (f_offset5_7)), opval);
  }
d1414 1
a1414 4
  {
    SI opval = current_cpu->GETMEMSI (pc, ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_rb)), FLD (f_offset5_7)));
    current_cpu->thumb_h_gr_t_set (FLD (f_rd), opval);
  }
d1430 1
a1430 4
  {
    QI opval = current_cpu->thumb_h_gr_t_get (FLD (f_rd));
    current_cpu->SETMEMQI (pc, ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_rb)), FLD (f_offset5)), opval);
  }
d1446 1
a1446 4
  {
    SI opval = ZEXTQISI (current_cpu->GETMEMQI (pc, ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_rb)), FLD (f_offset5))));
    current_cpu->thumb_h_gr_t_set (FLD (f_rd), opval);
  }
d1462 1
a1462 4
  {
    HI opval = current_cpu->thumb_h_gr_t_get (FLD (f_rd));
    current_cpu->SETMEMHI (pc, ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_rb)), FLD (f_offset5_6)), opval);
  }
d1478 1
a1478 4
  {
    SI opval = ZEXTHISI (current_cpu->GETMEMHI (pc, ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_rb)), FLD (f_offset5_6))));
    current_cpu->thumb_h_gr_t_set (FLD (f_rd), opval);
  }
d1494 1
a1494 4
  {
    SI opval = current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rd));
    current_cpu->SETMEMSI (pc, ADDSI (current_cpu->thumb_h_sp_t_get (), FLD (f_word8)), opval);
  }
d1510 1
a1510 4
  {
    SI opval = current_cpu->GETMEMSI (pc, ADDSI (current_cpu->thumb_h_sp_t_get (), FLD (f_word8)));
    current_cpu->thumb_h_gr_t_set (FLD (f_bit10_rd), opval);
  }
d1526 1
a1526 4
  {
    SI opval = ADDSI (ANDSI (ADDSI (pc, 4), -4), FLD (f_word8));
    current_cpu->thumb_h_gr_t_set (FLD (f_bit10_rd), opval);
  }
d1542 1
a1542 4
  {
    SI opval = ADDSI (current_cpu->thumb_h_sp_t_get (), FLD (f_word8));
    current_cpu->thumb_h_gr_t_set (FLD (f_bit10_rd), opval);
  }
d1558 1
a1558 4
  {
    SI opval = ADDSI (current_cpu->thumb_h_sp_t_get (), FLD (f_sword7));
    current_cpu->thumb_h_sp_t_set (opval);
  }
d1574 1
a1574 4
  {
    SI opval = SUBSI (current_cpu->thumb_h_sp_t_get (), FLD (f_sword7));
    current_cpu->thumb_h_sp_t_set (opval);
  }
d1593 2
a1594 8
  {
    SI opval = SUBSI (current_cpu->thumb_h_sp_t_get (), 4);
    current_cpu->thumb_h_sp_t_set (opval);
  }
  {
    SI opval = current_cpu->thumb_h_gr_t_get (((UINT) 7));
    current_cpu->SETMEMSI (pc, current_cpu->thumb_h_sp_t_get (), opval);
  }
d1599 2
a1600 8
  {
    SI opval = SUBSI (current_cpu->thumb_h_sp_t_get (), 4);
    current_cpu->thumb_h_sp_t_set (opval);
  }
  {
    SI opval = current_cpu->thumb_h_gr_t_get (((UINT) 6));
    current_cpu->SETMEMSI (pc, current_cpu->thumb_h_sp_t_get (), opval);
  }
d1605 2
a1606 8
  {
    SI opval = SUBSI (current_cpu->thumb_h_sp_t_get (), 4);
    current_cpu->thumb_h_sp_t_set (opval);
  }
  {
    SI opval = current_cpu->thumb_h_gr_t_get (((UINT) 5));
    current_cpu->SETMEMSI (pc, current_cpu->thumb_h_sp_t_get (), opval);
  }
d1611 2
a1612 8
  {
    SI opval = SUBSI (current_cpu->thumb_h_sp_t_get (), 4);
    current_cpu->thumb_h_sp_t_set (opval);
  }
  {
    SI opval = current_cpu->thumb_h_gr_t_get (((UINT) 4));
    current_cpu->SETMEMSI (pc, current_cpu->thumb_h_sp_t_get (), opval);
  }
d1617 2
a1618 8
  {
    SI opval = SUBSI (current_cpu->thumb_h_sp_t_get (), 4);
    current_cpu->thumb_h_sp_t_set (opval);
  }
  {
    SI opval = current_cpu->thumb_h_gr_t_get (((UINT) 3));
    current_cpu->SETMEMSI (pc, current_cpu->thumb_h_sp_t_get (), opval);
  }
d1623 2
a1624 8
  {
    SI opval = SUBSI (current_cpu->thumb_h_sp_t_get (), 4);
    current_cpu->thumb_h_sp_t_set (opval);
  }
  {
    SI opval = current_cpu->thumb_h_gr_t_get (((UINT) 2));
    current_cpu->SETMEMSI (pc, current_cpu->thumb_h_sp_t_get (), opval);
  }
d1629 2
a1630 8
  {
    SI opval = SUBSI (current_cpu->thumb_h_sp_t_get (), 4);
    current_cpu->thumb_h_sp_t_set (opval);
  }
  {
    SI opval = current_cpu->thumb_h_gr_t_get (((UINT) 1));
    current_cpu->SETMEMSI (pc, current_cpu->thumb_h_sp_t_get (), opval);
  }
d1635 2
a1636 8
  {
    SI opval = SUBSI (current_cpu->thumb_h_sp_t_get (), 4);
    current_cpu->thumb_h_sp_t_set (opval);
  }
  {
    SI opval = current_cpu->thumb_h_gr_t_get (((UINT) 0));
    current_cpu->SETMEMSI (pc, current_cpu->thumb_h_sp_t_get (), opval);
  }
d1656 2
a1657 8
  {
    SI opval = SUBSI (current_cpu->thumb_h_sp_t_get (), 4);
    current_cpu->thumb_h_sp_t_set (opval);
  }
  {
    SI opval = current_cpu->thumb_h_lr_t_get ();
    current_cpu->SETMEMSI (pc, current_cpu->thumb_h_sp_t_get (), opval);
  }
d1660 2
a1661 8
  {
    SI opval = SUBSI (current_cpu->thumb_h_sp_t_get (), 4);
    current_cpu->thumb_h_sp_t_set (opval);
  }
  {
    SI opval = current_cpu->thumb_h_gr_t_get (((UINT) 7));
    current_cpu->SETMEMSI (pc, current_cpu->thumb_h_sp_t_get (), opval);
  }
d1666 2
a1667 8
  {
    SI opval = SUBSI (current_cpu->thumb_h_sp_t_get (), 4);
    current_cpu->thumb_h_sp_t_set (opval);
  }
  {
    SI opval = current_cpu->thumb_h_gr_t_get (((UINT) 6));
    current_cpu->SETMEMSI (pc, current_cpu->thumb_h_sp_t_get (), opval);
  }
d1672 2
a1673 8
  {
    SI opval = SUBSI (current_cpu->thumb_h_sp_t_get (), 4);
    current_cpu->thumb_h_sp_t_set (opval);
  }
  {
    SI opval = current_cpu->thumb_h_gr_t_get (((UINT) 5));
    current_cpu->SETMEMSI (pc, current_cpu->thumb_h_sp_t_get (), opval);
  }
d1678 2
a1679 8
  {
    SI opval = SUBSI (current_cpu->thumb_h_sp_t_get (), 4);
    current_cpu->thumb_h_sp_t_set (opval);
  }
  {
    SI opval = current_cpu->thumb_h_gr_t_get (((UINT) 4));
    current_cpu->SETMEMSI (pc, current_cpu->thumb_h_sp_t_get (), opval);
  }
d1684 2
a1685 8
  {
    SI opval = SUBSI (current_cpu->thumb_h_sp_t_get (), 4);
    current_cpu->thumb_h_sp_t_set (opval);
  }
  {
    SI opval = current_cpu->thumb_h_gr_t_get (((UINT) 3));
    current_cpu->SETMEMSI (pc, current_cpu->thumb_h_sp_t_get (), opval);
  }
d1690 2
a1691 8
  {
    SI opval = SUBSI (current_cpu->thumb_h_sp_t_get (), 4);
    current_cpu->thumb_h_sp_t_set (opval);
  }
  {
    SI opval = current_cpu->thumb_h_gr_t_get (((UINT) 2));
    current_cpu->SETMEMSI (pc, current_cpu->thumb_h_sp_t_get (), opval);
  }
d1696 2
a1697 8
  {
    SI opval = SUBSI (current_cpu->thumb_h_sp_t_get (), 4);
    current_cpu->thumb_h_sp_t_set (opval);
  }
  {
    SI opval = current_cpu->thumb_h_gr_t_get (((UINT) 1));
    current_cpu->SETMEMSI (pc, current_cpu->thumb_h_sp_t_get (), opval);
  }
d1702 2
a1703 8
  {
    SI opval = SUBSI (current_cpu->thumb_h_sp_t_get (), 4);
    current_cpu->thumb_h_sp_t_set (opval);
  }
  {
    SI opval = current_cpu->thumb_h_gr_t_get (((UINT) 0));
    current_cpu->SETMEMSI (pc, current_cpu->thumb_h_sp_t_get (), opval);
  }
d1725 2
a1726 8
  {
    SI opval = current_cpu->GETMEMSI (pc, current_cpu->thumb_h_sp_t_get ());
    current_cpu->thumb_h_gr_t_set (((UINT) 0), opval);
  }
  {
    SI opval = ADDSI (current_cpu->thumb_h_sp_t_get (), 4);
    current_cpu->thumb_h_sp_t_set (opval);
  }
d1731 2
a1732 8
  {
    SI opval = current_cpu->GETMEMSI (pc, current_cpu->thumb_h_sp_t_get ());
    current_cpu->thumb_h_gr_t_set (((UINT) 1), opval);
  }
  {
    SI opval = ADDSI (current_cpu->thumb_h_sp_t_get (), 4);
    current_cpu->thumb_h_sp_t_set (opval);
  }
d1737 2
a1738 8
  {
    SI opval = current_cpu->GETMEMSI (pc, current_cpu->thumb_h_sp_t_get ());
    current_cpu->thumb_h_gr_t_set (((UINT) 2), opval);
  }
  {
    SI opval = ADDSI (current_cpu->thumb_h_sp_t_get (), 4);
    current_cpu->thumb_h_sp_t_set (opval);
  }
d1743 2
a1744 8
  {
    SI opval = current_cpu->GETMEMSI (pc, current_cpu->thumb_h_sp_t_get ());
    current_cpu->thumb_h_gr_t_set (((UINT) 3), opval);
  }
  {
    SI opval = ADDSI (current_cpu->thumb_h_sp_t_get (), 4);
    current_cpu->thumb_h_sp_t_set (opval);
  }
d1749 2
a1750 8
  {
    SI opval = current_cpu->GETMEMSI (pc, current_cpu->thumb_h_sp_t_get ());
    current_cpu->thumb_h_gr_t_set (((UINT) 4), opval);
  }
  {
    SI opval = ADDSI (current_cpu->thumb_h_sp_t_get (), 4);
    current_cpu->thumb_h_sp_t_set (opval);
  }
d1755 2
a1756 8
  {
    SI opval = current_cpu->GETMEMSI (pc, current_cpu->thumb_h_sp_t_get ());
    current_cpu->thumb_h_gr_t_set (((UINT) 5), opval);
  }
  {
    SI opval = ADDSI (current_cpu->thumb_h_sp_t_get (), 4);
    current_cpu->thumb_h_sp_t_set (opval);
  }
d1761 2
a1762 8
  {
    SI opval = current_cpu->GETMEMSI (pc, current_cpu->thumb_h_sp_t_get ());
    current_cpu->thumb_h_gr_t_set (((UINT) 6), opval);
  }
  {
    SI opval = ADDSI (current_cpu->thumb_h_sp_t_get (), 4);
    current_cpu->thumb_h_sp_t_set (opval);
  }
d1767 2
a1768 8
  {
    SI opval = current_cpu->GETMEMSI (pc, current_cpu->thumb_h_sp_t_get ());
    current_cpu->thumb_h_gr_t_set (((UINT) 7), opval);
  }
  {
    SI opval = ADDSI (current_cpu->thumb_h_sp_t_get (), 4);
    current_cpu->thumb_h_sp_t_set (opval);
  }
d1792 2
a1793 8
  {
    SI opval = current_cpu->GETMEMSI (pc, current_cpu->thumb_h_sp_t_get ());
    current_cpu->thumb_h_gr_t_set (((UINT) 0), opval);
  }
  {
    SI opval = ADDSI (current_cpu->thumb_h_sp_t_get (), 4);
    current_cpu->thumb_h_sp_t_set (opval);
  }
d1798 2
a1799 8
  {
    SI opval = current_cpu->GETMEMSI (pc, current_cpu->thumb_h_sp_t_get ());
    current_cpu->thumb_h_gr_t_set (((UINT) 1), opval);
  }
  {
    SI opval = ADDSI (current_cpu->thumb_h_sp_t_get (), 4);
    current_cpu->thumb_h_sp_t_set (opval);
  }
d1804 2
a1805 8
  {
    SI opval = current_cpu->GETMEMSI (pc, current_cpu->thumb_h_sp_t_get ());
    current_cpu->thumb_h_gr_t_set (((UINT) 2), opval);
  }
  {
    SI opval = ADDSI (current_cpu->thumb_h_sp_t_get (), 4);
    current_cpu->thumb_h_sp_t_set (opval);
  }
d1810 2
a1811 8
  {
    SI opval = current_cpu->GETMEMSI (pc, current_cpu->thumb_h_sp_t_get ());
    current_cpu->thumb_h_gr_t_set (((UINT) 3), opval);
  }
  {
    SI opval = ADDSI (current_cpu->thumb_h_sp_t_get (), 4);
    current_cpu->thumb_h_sp_t_set (opval);
  }
d1816 2
a1817 8
  {
    SI opval = current_cpu->GETMEMSI (pc, current_cpu->thumb_h_sp_t_get ());
    current_cpu->thumb_h_gr_t_set (((UINT) 4), opval);
  }
  {
    SI opval = ADDSI (current_cpu->thumb_h_sp_t_get (), 4);
    current_cpu->thumb_h_sp_t_set (opval);
  }
d1822 2
a1823 8
  {
    SI opval = current_cpu->GETMEMSI (pc, current_cpu->thumb_h_sp_t_get ());
    current_cpu->thumb_h_gr_t_set (((UINT) 5), opval);
  }
  {
    SI opval = ADDSI (current_cpu->thumb_h_sp_t_get (), 4);
    current_cpu->thumb_h_sp_t_set (opval);
  }
d1828 2
a1829 8
  {
    SI opval = current_cpu->GETMEMSI (pc, current_cpu->thumb_h_sp_t_get ());
    current_cpu->thumb_h_gr_t_set (((UINT) 6), opval);
  }
  {
    SI opval = ADDSI (current_cpu->thumb_h_sp_t_get (), 4);
    current_cpu->thumb_h_sp_t_set (opval);
  }
d1834 2
a1835 8
  {
    SI opval = current_cpu->GETMEMSI (pc, current_cpu->thumb_h_sp_t_get ());
    current_cpu->thumb_h_gr_t_set (((UINT) 7), opval);
  }
  {
    SI opval = ADDSI (current_cpu->thumb_h_sp_t_get (), 4);
    current_cpu->thumb_h_sp_t_set (opval);
  }
d1838 2
a1839 8
  {
    USI opval = current_cpu->GETMEMSI (pc, current_cpu->thumb_h_sp_t_get ());
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
  {
    SI opval = ADDSI (current_cpu->thumb_h_sp_t_get (), 4);
    current_cpu->thumb_h_sp_t_set (opval);
  }
d1861 2
a1862 8
  {
    SI opval = current_cpu->thumb_h_gr_t_get (((UINT) 0));
    current_cpu->SETMEMSI (pc, current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb)), opval);
  }
  {
    SI opval = ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb)), 4);
    current_cpu->thumb_h_gr_t_set (FLD (f_bit10_rb), opval);
  }
d1867 2
a1868 8
  {
    SI opval = current_cpu->thumb_h_gr_t_get (((UINT) 1));
    current_cpu->SETMEMSI (pc, current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb)), opval);
  }
  {
    SI opval = ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb)), 4);
    current_cpu->thumb_h_gr_t_set (FLD (f_bit10_rb), opval);
  }
d1873 2
a1874 8
  {
    SI opval = current_cpu->thumb_h_gr_t_get (((UINT) 2));
    current_cpu->SETMEMSI (pc, current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb)), opval);
  }
  {
    SI opval = ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb)), 4);
    current_cpu->thumb_h_gr_t_set (FLD (f_bit10_rb), opval);
  }
d1879 2
a1880 8
  {
    SI opval = current_cpu->thumb_h_gr_t_get (((UINT) 3));
    current_cpu->SETMEMSI (pc, current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb)), opval);
  }
  {
    SI opval = ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb)), 4);
    current_cpu->thumb_h_gr_t_set (FLD (f_bit10_rb), opval);
  }
d1885 2
a1886 8
  {
    SI opval = current_cpu->thumb_h_gr_t_get (((UINT) 4));
    current_cpu->SETMEMSI (pc, current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb)), opval);
  }
  {
    SI opval = ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb)), 4);
    current_cpu->thumb_h_gr_t_set (FLD (f_bit10_rb), opval);
  }
d1891 2
a1892 8
  {
    SI opval = current_cpu->thumb_h_gr_t_get (((UINT) 5));
    current_cpu->SETMEMSI (pc, current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb)), opval);
  }
  {
    SI opval = ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb)), 4);
    current_cpu->thumb_h_gr_t_set (FLD (f_bit10_rb), opval);
  }
d1897 2
a1898 8
  {
    SI opval = current_cpu->thumb_h_gr_t_get (((UINT) 6));
    current_cpu->SETMEMSI (pc, current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb)), opval);
  }
  {
    SI opval = ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb)), 4);
    current_cpu->thumb_h_gr_t_set (FLD (f_bit10_rb), opval);
  }
d1903 2
a1904 8
  {
    SI opval = current_cpu->thumb_h_gr_t_get (((UINT) 7));
    current_cpu->SETMEMSI (pc, current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb)), opval);
  }
  {
    SI opval = ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb)), 4);
    current_cpu->thumb_h_gr_t_set (FLD (f_bit10_rb), opval);
  }
d1926 2
a1927 8
  {
    SI opval = current_cpu->GETMEMSI (pc, current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb)));
    current_cpu->thumb_h_gr_t_set (((UINT) 0), opval);
  }
  {
    SI opval = ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb)), 4);
    current_cpu->thumb_h_gr_t_set (FLD (f_bit10_rb), opval);
  }
d1932 2
a1933 8
  {
    SI opval = current_cpu->GETMEMSI (pc, current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb)));
    current_cpu->thumb_h_gr_t_set (((UINT) 1), opval);
  }
  {
    SI opval = ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb)), 4);
    current_cpu->thumb_h_gr_t_set (FLD (f_bit10_rb), opval);
  }
d1938 2
a1939 8
  {
    SI opval = current_cpu->GETMEMSI (pc, current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb)));
    current_cpu->thumb_h_gr_t_set (((UINT) 2), opval);
  }
  {
    SI opval = ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb)), 4);
    current_cpu->thumb_h_gr_t_set (FLD (f_bit10_rb), opval);
  }
d1944 2
a1945 8
  {
    SI opval = current_cpu->GETMEMSI (pc, current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb)));
    current_cpu->thumb_h_gr_t_set (((UINT) 3), opval);
  }
  {
    SI opval = ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb)), 4);
    current_cpu->thumb_h_gr_t_set (FLD (f_bit10_rb), opval);
  }
d1950 2
a1951 8
  {
    SI opval = current_cpu->GETMEMSI (pc, current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb)));
    current_cpu->thumb_h_gr_t_set (((UINT) 4), opval);
  }
  {
    SI opval = ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb)), 4);
    current_cpu->thumb_h_gr_t_set (FLD (f_bit10_rb), opval);
  }
d1956 2
a1957 8
  {
    SI opval = current_cpu->GETMEMSI (pc, current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb)));
    current_cpu->thumb_h_gr_t_set (((UINT) 5), opval);
  }
  {
    SI opval = ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb)), 4);
    current_cpu->thumb_h_gr_t_set (FLD (f_bit10_rb), opval);
  }
d1962 2
a1963 8
  {
    SI opval = current_cpu->GETMEMSI (pc, current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb)));
    current_cpu->thumb_h_gr_t_set (((UINT) 6), opval);
  }
  {
    SI opval = ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb)), 4);
    current_cpu->thumb_h_gr_t_set (FLD (f_bit10_rb), opval);
  }
d1968 2
a1969 8
  {
    SI opval = current_cpu->GETMEMSI (pc, current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb)));
    current_cpu->thumb_h_gr_t_set (((UINT) 7), opval);
  }
  {
    SI opval = ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb)), 4);
    current_cpu->thumb_h_gr_t_set (FLD (f_bit10_rb), opval);
  }
d1991 1
a1991 4
  {
    USI opval = FLD (i_soffset8);
    npc = opval; br_status = BRANCH_CACHEABLE;
  }
d2013 1
a2013 4
  {
    USI opval = FLD (i_soffset8);
    npc = opval; br_status = BRANCH_CACHEABLE;
  }
d2035 1
a2035 4
  {
    USI opval = FLD (i_soffset8);
    npc = opval; br_status = BRANCH_CACHEABLE;
  }
d2057 1
a2057 4
  {
    USI opval = FLD (i_soffset8);
    npc = opval; br_status = BRANCH_CACHEABLE;
  }
d2079 1
a2079 4
  {
    USI opval = FLD (i_soffset8);
    npc = opval; br_status = BRANCH_CACHEABLE;
  }
d2101 1
a2101 4
  {
    USI opval = FLD (i_soffset8);
    npc = opval; br_status = BRANCH_CACHEABLE;
  }
d2123 1
a2123 4
  {
    USI opval = FLD (i_soffset8);
    npc = opval; br_status = BRANCH_CACHEABLE;
  }
d2145 1
a2145 4
  {
    USI opval = FLD (i_soffset8);
    npc = opval; br_status = BRANCH_CACHEABLE;
  }
d2167 1
a2167 4
  {
    USI opval = FLD (i_soffset8);
    npc = opval; br_status = BRANCH_CACHEABLE;
  }
d2189 1
a2189 4
  {
    USI opval = FLD (i_soffset8);
    npc = opval; br_status = BRANCH_CACHEABLE;
  }
d2211 1
a2211 4
  {
    USI opval = FLD (i_soffset8);
    npc = opval; br_status = BRANCH_CACHEABLE;
  }
d2233 1
a2233 4
  {
    USI opval = FLD (i_soffset8);
    npc = opval; br_status = BRANCH_CACHEABLE;
  }
d2255 1
a2255 4
  {
    USI opval = FLD (i_soffset8);
    npc = opval; br_status = BRANCH_CACHEABLE;
  }
d2277 1
a2277 4
  {
    USI opval = FLD (i_soffset8);
    npc = opval; br_status = BRANCH_CACHEABLE;
  }
d2298 1
a2298 4
  {
    USI opval = current_cpu->thumb_swi (pc, FLD (f_value8));
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
d2318 1
a2318 4
  {
    USI opval = FLD (i_offset11);
    npc = opval; br_status = BRANCH_CACHEABLE;
  }
d2336 1
a2336 4
  {
    SI opval = ADDSI (ADDSI (pc, 4), SLLSI (FLD (f_lbwl_hi), 12));
    current_cpu->thumb_h_lr_t_set (opval);
  }
d2357 2
a2358 8
  {
    USI opval = ADDSI (current_cpu->thumb_h_lr_t_get (), SLLSI (FLD (f_lbwl_lo), 1));
    npc = opval; br_status = BRANCH_UNCACHEABLE;
  }
  {
    SI opval = ORSI (ADDSI (tmp_cur_pc, 2), 1);
    current_cpu->thumb_h_lr_t_set (opval);
  }
@


1.3
log
@* arm7t missing instructions

[cgen]
2002-09-07  Frank Ch. Eigler  <fche@@redhat.com>

	From Robert Cragie <rcc@@jennic.com>:
	* cpu/arm7.cpu (ldm*-sw*, stm*-sw*): New instructions.

[sid]
2002-09-07  Frank Ch. Eigler  <fche@@redhat.com>

	* arm-*, thumb-*: Regenerated files with Robert Cragie's new
	cgen instructions.
@
text
@d5 1
a5 1
Copyright (C) 2000, 2001, 2002 Red Hat, Inc.
@


1.2
log
@* branch probability hinting

[cgen/ChangeLog]
2001-03-01  Frank Ch. Eigler  <fche@@redhat.com>

	* sid.cpu (-op-gen-set-trace[-parallel], -create-virtual-insns!):
	Emit LIKELY/UNLIKELY branch probability hints.
	* sid-decode.cpu (-gen-record-args): Ditto.

[sid/include/ChangeLog]
2001-03-01  Frank Ch. Eigler  <fche@@redhat.com>

	* sidconfig.h (LIKELY, UNLIKELY): New conditional cover macros
	for gcc's __builtin_expect branch probability hinting function.
	* sidbusutil.h (passthrough_bus, mux_password_bus, harvard_bus):
	Add some branch probability hints.
	* sidcpuutil.h (step_pin_handler, stop_after_insns_p,
	{read,write}_{insn,data}_memory): Ditto.
	* sidpinutil.h (callback_pin::driven): Remove unnecessary assert
	from critical path.

[eg. sid/component/mapper/ChangeLog]
2001-03-01  Frank Ch. Eigler  <fche@@redhat.com>

	* compMapper.cxx ({read,write}_strideoffset_any): Added b.p. hints.
	(write_any, read_any, locate): Ditto.

[sid/component/cgen-cpu/ChangeLog]
2001-03-01  Frank Ch. Eigler  <fche@@redhat.com>

	* cgen-engine.h (set_pbb_engine, chain, get_next_vpc, pbb_find,
	pbb_find_or_alloc, pbb_before, pbb_after): Add branch probability
	hints.

[eg. sid/component/cgen-cpu/arm7t/ChangeLog]
2001-03-01  Frank Ch. Eigler  <fche@@redhat.com>

	* arm-decode.cxx, -sem.cxx, -semsw.cxx: Regenerated w/ b.p. hints.
	* thumb-decode.cxx, -sem.cxx, -semsw.cxx: Ditto.
@
text
@d5 1
a5 1
Copyright (C) 2000 Red Hat, Inc.
d7 1
a7 1
This file is part of the Cygnus Simulators.
d136 1
a136 1
      for (int i=0; i<THUMB_INSN_MAX; i++)
@


1.1
log
@* public snapshot of sid simulator
@
text
@d218 1
a218 1
    if (current_cpu->stop_after_insns_p (abuf->fields.chain.insn_count))
d240 1
a240 1
    if (current_cpu->stop_after_insns_p (abuf->fields.chain.insn_count))
@

