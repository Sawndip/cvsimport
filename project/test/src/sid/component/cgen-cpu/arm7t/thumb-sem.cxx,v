head	1.10;
access;
symbols
	sid-snapshot-20180601:1.10
	sid-snapshot-20180501:1.10
	sid-snapshot-20180401:1.10
	sid-snapshot-20180301:1.10
	sid-snapshot-20180201:1.10
	sid-snapshot-20180101:1.10
	sid-snapshot-20171201:1.10
	sid-snapshot-20171101:1.10
	sid-snapshot-20171001:1.10
	sid-snapshot-20170901:1.10
	sid-snapshot-20170801:1.10
	sid-snapshot-20170701:1.10
	sid-snapshot-20170601:1.10
	sid-snapshot-20170501:1.10
	sid-snapshot-20170401:1.10
	sid-snapshot-20170301:1.10
	sid-snapshot-20170201:1.10
	sid-snapshot-20170101:1.10
	sid-snapshot-20161201:1.10
	sid-snapshot-20161101:1.10
	sid-snapshot-20160901:1.10
	sid-snapshot-20160801:1.10
	sid-snapshot-20160701:1.10
	sid-snapshot-20160601:1.10
	sid-snapshot-20160501:1.10
	sid-snapshot-20160401:1.10
	sid-snapshot-20160301:1.10
	sid-snapshot-20160201:1.10
	sid-snapshot-20160101:1.10
	sid-snapshot-20151201:1.10
	sid-snapshot-20151101:1.10
	sid-snapshot-20151001:1.10
	sid-snapshot-20150901:1.10
	sid-snapshot-20150801:1.10
	sid-snapshot-20150701:1.10
	sid-snapshot-20150601:1.10
	sid-snapshot-20150501:1.10
	sid-snapshot-20150401:1.10
	sid-snapshot-20150301:1.10
	sid-snapshot-20150201:1.10
	sid-snapshot-20150101:1.10
	sid-snapshot-20141201:1.10
	sid-snapshot-20141101:1.10
	sid-snapshot-20141001:1.10
	sid-snapshot-20140901:1.10
	sid-snapshot-20140801:1.10
	sid-snapshot-20140701:1.10
	sid-snapshot-20140601:1.10
	sid-snapshot-20140501:1.10
	sid-snapshot-20140401:1.10
	sid-snapshot-20140301:1.10
	sid-snapshot-20140201:1.10
	sid-snapshot-20140101:1.10
	sid-snapshot-20131201:1.10
	sid-snapshot-20131101:1.10
	sid-snapshot-20131001:1.10
	sid-snapshot-20130901:1.10
	sid-snapshot-20130801:1.10
	sid-snapshot-20130701:1.10
	sid-snapshot-20130601:1.10
	sid-snapshot-20130501:1.10
	sid-snapshot-20130401:1.10
	sid-snapshot-20130301:1.10
	sid-snapshot-20130201:1.10
	sid-snapshot-20130101:1.10
	sid-snapshot-20121201:1.10
	sid-snapshot-20121101:1.10
	sid-snapshot-20121001:1.10
	sid-snapshot-20120901:1.10
	sid-snapshot-20120801:1.10
	sid-snapshot-20120701:1.10
	sid-snapshot-20120601:1.10
	sid-snapshot-20120501:1.10
	sid-snapshot-20120401:1.10
	sid-snapshot-20120301:1.10
	sid-snapshot-20120201:1.10
	sid-snapshot-20120101:1.10
	sid-snapshot-20111201:1.10
	sid-snapshot-20111101:1.10
	sid-snapshot-20111001:1.10
	sid-snapshot-20110901:1.10
	sid-snapshot-20110801:1.10
	sid-snapshot-20110701:1.10
	sid-snapshot-20110601:1.10
	sid-snapshot-20110501:1.10
	sid-snapshot-20110401:1.10
	sid-snapshot-20110301:1.10
	sid-snapshot-20110201:1.10
	sid-snapshot-20110101:1.10
	sid-snapshot-20101201:1.10
	sid-snapshot-20101101:1.10
	sid-snapshot-20101001:1.10
	sid-snapshot-20100901:1.10
	sid-snapshot-20100801:1.10
	sid-snapshot-20100701:1.10
	sid-snapshot-20100601:1.10
	sid-snapshot-20100501:1.10
	sid-snapshot-20100401:1.10
	sid-snapshot-20100301:1.10
	sid-snapshot-20100201:1.9
	sid-snapshot-20100101:1.8
	sid-snapshot-20091201:1.8
	sid-snapshot-20091101:1.8
	sid-snapshot-20091001:1.7
	sid-snapshot-20090901:1.7
	sid-snapshot-20090801:1.7
	sid-snapshot-20090701:1.7
	sid-snapshot-20090601:1.7
	sid-snapshot-20090501:1.7
	sid-snapshot-20090401:1.7
	sid-snapshot-20090301:1.7
	sid-snapshot-20090201:1.7
	sid-snapshot-20090101:1.7
	sid-snapshot-20081201:1.7
	sid-snapshot-20081101:1.7
	sid-snapshot-20081001:1.7
	sid-snapshot-20080901:1.7
	sid-snapshot-20080801:1.7
	sid-snapshot-20080701:1.7
	sid-snapshot-20080601:1.7
	sid-snapshot-20080501:1.7
	sid-snapshot-20080403:1.7
	sid-snapshot-20080401:1.7
	sid-snapshot-20080301:1.7
	sid-snapshot-20080201:1.7
	sid-snapshot-20080101:1.7
	sid-snapshot-20071201:1.7
	sid-snapshot-20071101:1.7
	sid-snapshot-20071001:1.7
	sid-20020905-branchpoint:1.4
	sid-20020905-branch:1.4.0.2
	cygnus_cvs_20020108_pre:1.4;
locks; strict;
comment	@// @;


1.10
date	2010.02.12.02.33.04;	author devans;	state Exp;
branches;
next	1.9;

1.9
date	2010.01.02.21.18.54;	author devans;	state Exp;
branches;
next	1.8;

1.8
date	2009.10.24.00.45.55;	author devans;	state Exp;
branches;
next	1.7;

1.7
date	2003.07.05.17.07.20;	author devans;	state Exp;
branches;
next	1.6;

1.6
date	2003.01.08.03.17.27;	author bje;	state Exp;
branches;
next	1.5;

1.5
date	2002.09.07.14.42.49;	author fche;	state Exp;
branches;
next	1.4;

1.4
date	2001.03.01.19.15.32;	author fche;	state Exp;
branches;
next	1.3;

1.3
date	2001.01.29.20.03.25;	author fche;	state Exp;
branches;
next	1.2;

1.2
date	2001.01.15.21.14.25;	author fche;	state Exp;
branches;
next	1.1;

1.1
date	2000.12.07.19.30.48;	author fche;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Regenerate to pick up recent cgen changes.
[minor changes like removing K&R support, more consistent name for sfmt_empty]
@
text
@/* Simulator instruction semantics for thumb.

THIS FILE IS MACHINE GENERATED WITH CGEN.

Copyright (C) 2000-2010 Red Hat, Inc.

This file is part of the Red Hat simulators.


*/


#if HAVE_CONFIG_H
#include "config.h"
#endif
#include "arm7f.h"

using namespace arm7f; // FIXME: namespace organization still wip
#define GET_ATTR(name) GET_ATTR_##name ()


// ********** x-invalid: --invalid--

sem_status
thumb_sem_x_invalid (arm7f_cpu* current_cpu, thumb_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_empty.f
  sem_status status = SEM_STATUS_NORMAL;
  thumb_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 0;

  {
    current_cpu->invalid_insn (pc);
    assert (0);
    /* NOTREACHED */
  }

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** lsl: lsl $rd,$rs,#$offset5

sem_status
thumb_sem_lsl (arm7f_cpu* current_cpu, thumb_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_lsl.f
  sem_status status = SEM_STATUS_NORMAL;
  thumb_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 2;

{
  BI tmp_carry_out;
  tmp_carry_out = current_cpu->compute_carry_out_immshift (current_cpu->thumb_h_gr_t_get (FLD (f_rs)), SHIFT_TYPE_LSL, FLD (f_offset5), current_cpu->hardware.h_cbit);
  {
    SI opval = SLLSI (current_cpu->thumb_h_gr_t_get (FLD (f_rs)), FLD (f_offset5));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-t" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_gr_t_set (FLD (f_rd), opval);
  }
{
{
  {
    BI opval = EQSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "zbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "nbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_nbit = opval;
  }
}
  {
    BI opval = tmp_carry_out;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_cbit = opval;
  }
}
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** lsr: lsr $rd,$rs,#$offset5

sem_status
thumb_sem_lsr (arm7f_cpu* current_cpu, thumb_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_lsl.f
  sem_status status = SEM_STATUS_NORMAL;
  thumb_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 2;

{
  BI tmp_carry_out;
  tmp_carry_out = current_cpu->compute_carry_out_immshift (current_cpu->thumb_h_gr_t_get (FLD (f_rs)), SHIFT_TYPE_LSR, FLD (f_offset5), current_cpu->hardware.h_cbit);
  {
    SI opval = SRLSI (current_cpu->thumb_h_gr_t_get (FLD (f_rs)), FLD (f_offset5));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-t" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_gr_t_set (FLD (f_rd), opval);
  }
{
{
  {
    BI opval = EQSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "zbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "nbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_nbit = opval;
  }
}
  {
    BI opval = tmp_carry_out;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_cbit = opval;
  }
}
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** asr: asr $rd,$rs,#$offset5

sem_status
thumb_sem_asr (arm7f_cpu* current_cpu, thumb_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_lsl.f
  sem_status status = SEM_STATUS_NORMAL;
  thumb_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 2;

{
  BI tmp_carry_out;
  tmp_carry_out = current_cpu->compute_carry_out_immshift (current_cpu->thumb_h_gr_t_get (FLD (f_rs)), SHIFT_TYPE_ASR, FLD (f_offset5), current_cpu->hardware.h_cbit);
  {
    SI opval = SRASI (current_cpu->thumb_h_gr_t_get (FLD (f_rs)), FLD (f_offset5));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-t" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_gr_t_set (FLD (f_rd), opval);
  }
{
{
  {
    BI opval = EQSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "zbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "nbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_nbit = opval;
  }
}
  {
    BI opval = tmp_carry_out;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_cbit = opval;
  }
}
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** add: add $rd,$rs,$rn

sem_status
thumb_sem_add (arm7f_cpu* current_cpu, thumb_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_add.f
  sem_status status = SEM_STATUS_NORMAL;
  thumb_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 2;

{
{
  SI tmp_result;
  tmp_result = ADDCSI (current_cpu->thumb_h_gr_t_get (FLD (f_rs)), current_cpu->thumb_h_gr_t_get (FLD (f_rn)), 0);
{
  {
    BI opval = EQSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "zbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "nbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_nbit = opval;
  }
}
  {
    BI opval = ADDCFSI (current_cpu->thumb_h_gr_t_get (FLD (f_rs)), current_cpu->thumb_h_gr_t_get (FLD (f_rn)), 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_cbit = opval;
  }
  {
    BI opval = ADDOFSI (current_cpu->thumb_h_gr_t_get (FLD (f_rs)), current_cpu->thumb_h_gr_t_get (FLD (f_rn)), 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "vbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_vbit = opval;
  }
}
  {
    SI opval = ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_rs)), current_cpu->thumb_h_gr_t_get (FLD (f_rn)));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-t" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_gr_t_set (FLD (f_rd), opval);
  }
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** addi: add $rd,$rs,#$offset3

sem_status
thumb_sem_addi (arm7f_cpu* current_cpu, thumb_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_addi.f
  sem_status status = SEM_STATUS_NORMAL;
  thumb_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 2;

{
{
  SI tmp_result;
  tmp_result = ADDCSI (current_cpu->thumb_h_gr_t_get (FLD (f_rs)), FLD (f_offset3), 0);
{
  {
    BI opval = EQSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "zbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "nbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_nbit = opval;
  }
}
  {
    BI opval = ADDCFSI (current_cpu->thumb_h_gr_t_get (FLD (f_rs)), FLD (f_offset3), 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_cbit = opval;
  }
  {
    BI opval = ADDOFSI (current_cpu->thumb_h_gr_t_get (FLD (f_rs)), FLD (f_offset3), 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "vbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_vbit = opval;
  }
}
  {
    SI opval = ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_rs)), FLD (f_offset3));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-t" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_gr_t_set (FLD (f_rd), opval);
  }
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** sub: sub $rd,$rs,$rn

sem_status
thumb_sem_sub (arm7f_cpu* current_cpu, thumb_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_add.f
  sem_status status = SEM_STATUS_NORMAL;
  thumb_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 2;

{
{
  SI tmp_result;
  tmp_result = SUBCSI (current_cpu->thumb_h_gr_t_get (FLD (f_rs)), current_cpu->thumb_h_gr_t_get (FLD (f_rn)), 0);
{
  {
    BI opval = EQSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "zbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "nbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_nbit = opval;
  }
}
  {
    BI opval = NOTBI (SUBCFSI (current_cpu->thumb_h_gr_t_get (FLD (f_rs)), current_cpu->thumb_h_gr_t_get (FLD (f_rn)), 0));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_cbit = opval;
  }
  {
    BI opval = SUBOFSI (current_cpu->thumb_h_gr_t_get (FLD (f_rs)), current_cpu->thumb_h_gr_t_get (FLD (f_rn)), 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "vbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_vbit = opval;
  }
}
  {
    SI opval = SUBSI (current_cpu->thumb_h_gr_t_get (FLD (f_rs)), current_cpu->thumb_h_gr_t_get (FLD (f_rn)));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-t" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_gr_t_set (FLD (f_rd), opval);
  }
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** subi: sub $rd,$rs,#$offset3

sem_status
thumb_sem_subi (arm7f_cpu* current_cpu, thumb_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_addi.f
  sem_status status = SEM_STATUS_NORMAL;
  thumb_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 2;

{
{
  SI tmp_result;
  tmp_result = SUBCSI (current_cpu->thumb_h_gr_t_get (FLD (f_rs)), FLD (f_offset3), 0);
{
  {
    BI opval = EQSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "zbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "nbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_nbit = opval;
  }
}
  {
    BI opval = NOTBI (SUBCFSI (current_cpu->thumb_h_gr_t_get (FLD (f_rs)), FLD (f_offset3), 0));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_cbit = opval;
  }
  {
    BI opval = SUBOFSI (current_cpu->thumb_h_gr_t_get (FLD (f_rs)), FLD (f_offset3), 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "vbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_vbit = opval;
  }
}
  {
    SI opval = SUBSI (current_cpu->thumb_h_gr_t_get (FLD (f_rs)), FLD (f_offset3));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-t" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_gr_t_set (FLD (f_rd), opval);
  }
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** mov: mov ${bit10-rd},#$offset8

sem_status
thumb_sem_mov (arm7f_cpu* current_cpu, thumb_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_mov.f
  sem_status status = SEM_STATUS_NORMAL;
  thumb_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 2;

{
  {
    SI opval = FLD (f_offset8);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-t" << '[' << FLD (f_bit10_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_gr_t_set (FLD (f_bit10_rd), opval);
  }
{
  {
    BI opval = EQSI (current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rd)), 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "zbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rd)), 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "nbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_nbit = opval;
  }
}
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** cmp: cmp ${bit10-rd},#$offset8

sem_status
thumb_sem_cmp (arm7f_cpu* current_cpu, thumb_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_mov.f
  sem_status status = SEM_STATUS_NORMAL;
  thumb_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 2;

{
  SI tmp_result;
  tmp_result = SUBCSI (current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rd)), FLD (f_offset8), 0);
{
  {
    BI opval = EQSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "zbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "nbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_nbit = opval;
  }
}
  {
    BI opval = NOTBI (SUBCFSI (current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rd)), FLD (f_offset8), 0));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_cbit = opval;
  }
  {
    BI opval = SUBOFSI (current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rd)), FLD (f_offset8), 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "vbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_vbit = opval;
  }
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** addi8: add ${bit10-rd},#$offset8

sem_status
thumb_sem_addi8 (arm7f_cpu* current_cpu, thumb_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_mov.f
  sem_status status = SEM_STATUS_NORMAL;
  thumb_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 2;

{
{
  SI tmp_result;
  tmp_result = ADDCSI (current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rd)), FLD (f_offset8), 0);
{
  {
    BI opval = EQSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "zbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "nbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_nbit = opval;
  }
}
  {
    BI opval = ADDCFSI (current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rd)), FLD (f_offset8), 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_cbit = opval;
  }
  {
    BI opval = ADDOFSI (current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rd)), FLD (f_offset8), 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "vbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_vbit = opval;
  }
}
  {
    SI opval = ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rd)), FLD (f_offset8));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-t" << '[' << FLD (f_bit10_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_gr_t_set (FLD (f_bit10_rd), opval);
  }
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** subi8: sub ${bit10-rd},#$offset8

sem_status
thumb_sem_subi8 (arm7f_cpu* current_cpu, thumb_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_mov.f
  sem_status status = SEM_STATUS_NORMAL;
  thumb_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 2;

{
{
  SI tmp_result;
  tmp_result = SUBCSI (current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rd)), FLD (f_offset8), 0);
{
  {
    BI opval = EQSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "zbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "nbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_nbit = opval;
  }
}
  {
    BI opval = NOTBI (SUBCFSI (current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rd)), FLD (f_offset8), 0));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_cbit = opval;
  }
  {
    BI opval = SUBOFSI (current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rd)), FLD (f_offset8), 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "vbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_vbit = opval;
  }
}
  {
    SI opval = SUBSI (current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rd)), FLD (f_offset8));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-t" << '[' << FLD (f_bit10_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_gr_t_set (FLD (f_bit10_rd), opval);
  }
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** alu-and: and $rd,$rs

sem_status
thumb_sem_alu_and (arm7f_cpu* current_cpu, thumb_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_addi.f
  sem_status status = SEM_STATUS_NORMAL;
  thumb_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 2;

{
  {
    SI opval = ANDSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), current_cpu->thumb_h_gr_t_get (FLD (f_rs)));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-t" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_gr_t_set (FLD (f_rd), opval);
  }
{
  {
    BI opval = EQSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "zbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "nbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_nbit = opval;
  }
}
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** alu-eor: eor $rd,$rs

sem_status
thumb_sem_alu_eor (arm7f_cpu* current_cpu, thumb_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_addi.f
  sem_status status = SEM_STATUS_NORMAL;
  thumb_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 2;

{
  {
    SI opval = XORSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), current_cpu->thumb_h_gr_t_get (FLD (f_rs)));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-t" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_gr_t_set (FLD (f_rd), opval);
  }
{
  {
    BI opval = EQSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "zbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "nbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_nbit = opval;
  }
}
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** alu-lsl: lsl $rd,$rs

sem_status
thumb_sem_alu_lsl (arm7f_cpu* current_cpu, thumb_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_addi.f
  sem_status status = SEM_STATUS_NORMAL;
  thumb_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 2;

{
  BI tmp_carry_out;
  SI tmp_result;
  tmp_carry_out = current_cpu->compute_carry_out_regshift (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), SHIFT_TYPE_LSL, current_cpu->thumb_h_gr_t_get (FLD (f_rs)), current_cpu->hardware.h_cbit);
  tmp_result = SLLSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), current_cpu->thumb_h_gr_t_get (FLD (f_rs)));
  {
    SI opval = tmp_result;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-t" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_gr_t_set (FLD (f_rd), opval);
  }
{
{
  {
    BI opval = EQSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "zbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "nbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_nbit = opval;
  }
}
  {
    BI opval = tmp_carry_out;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_cbit = opval;
  }
}
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** alu-lsr: lsr $rd,$rs

sem_status
thumb_sem_alu_lsr (arm7f_cpu* current_cpu, thumb_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_addi.f
  sem_status status = SEM_STATUS_NORMAL;
  thumb_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 2;

{
  BI tmp_carry_out;
  SI tmp_result;
  tmp_carry_out = current_cpu->compute_carry_out_regshift (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), SHIFT_TYPE_LSR, current_cpu->thumb_h_gr_t_get (FLD (f_rs)), current_cpu->hardware.h_cbit);
  tmp_result = SRLSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), current_cpu->thumb_h_gr_t_get (FLD (f_rs)));
  {
    SI opval = tmp_result;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-t" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_gr_t_set (FLD (f_rd), opval);
  }
{
{
  {
    BI opval = EQSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "zbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "nbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_nbit = opval;
  }
}
  {
    BI opval = tmp_carry_out;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_cbit = opval;
  }
}
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** alu-asr: asr $rd,$rs

sem_status
thumb_sem_alu_asr (arm7f_cpu* current_cpu, thumb_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_addi.f
  sem_status status = SEM_STATUS_NORMAL;
  thumb_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 2;

{
  BI tmp_carry_out;
  SI tmp_result;
  tmp_carry_out = current_cpu->compute_carry_out_regshift (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), SHIFT_TYPE_ASR, current_cpu->thumb_h_gr_t_get (FLD (f_rs)), current_cpu->hardware.h_cbit);
  tmp_result = SRASI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), current_cpu->thumb_h_gr_t_get (FLD (f_rs)));
  {
    SI opval = tmp_result;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-t" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_gr_t_set (FLD (f_rd), opval);
  }
{
{
  {
    BI opval = EQSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "zbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "nbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_nbit = opval;
  }
}
  {
    BI opval = tmp_carry_out;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_cbit = opval;
  }
}
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** alu-ror: ror $rd,$rs

sem_status
thumb_sem_alu_ror (arm7f_cpu* current_cpu, thumb_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_addi.f
  sem_status status = SEM_STATUS_NORMAL;
  thumb_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 2;

{
  BI tmp_carry_out;
  SI tmp_result;
  tmp_carry_out = current_cpu->compute_carry_out_regshift (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), SHIFT_TYPE_ROR, current_cpu->thumb_h_gr_t_get (FLD (f_rs)), current_cpu->hardware.h_cbit);
  tmp_result = RORSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), current_cpu->thumb_h_gr_t_get (FLD (f_rs)));
  {
    SI opval = tmp_result;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-t" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_gr_t_set (FLD (f_rd), opval);
  }
{
{
  {
    BI opval = EQSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "zbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "nbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_nbit = opval;
  }
}
  {
    BI opval = tmp_carry_out;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_cbit = opval;
  }
}
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** alu-adc: adc $rd,$rs

sem_status
thumb_sem_alu_adc (arm7f_cpu* current_cpu, thumb_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_addi.f
  sem_status status = SEM_STATUS_NORMAL;
  thumb_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 2;

{
  SI tmp_result;
  tmp_result = ADDCSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), current_cpu->thumb_h_gr_t_get (FLD (f_rs)), current_cpu->hardware.h_cbit);
{
  SI tmp_result;
  tmp_result = ADDCSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), current_cpu->thumb_h_gr_t_get (FLD (f_rs)), current_cpu->hardware.h_cbit);
{
  {
    BI opval = EQSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "zbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "nbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_nbit = opval;
  }
}
  {
    BI opval = ADDCFSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), current_cpu->thumb_h_gr_t_get (FLD (f_rs)), current_cpu->hardware.h_cbit);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_cbit = opval;
  }
  {
    BI opval = ADDOFSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), current_cpu->thumb_h_gr_t_get (FLD (f_rs)), current_cpu->hardware.h_cbit);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "vbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_vbit = opval;
  }
}
  {
    SI opval = tmp_result;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-t" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_gr_t_set (FLD (f_rd), opval);
  }
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** alu-sbc: sbc $rd,$rs

sem_status
thumb_sem_alu_sbc (arm7f_cpu* current_cpu, thumb_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_addi.f
  sem_status status = SEM_STATUS_NORMAL;
  thumb_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 2;

{
  SI tmp_result;
  tmp_result = SUBCSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), current_cpu->thumb_h_gr_t_get (FLD (f_rs)), NOTBI (current_cpu->hardware.h_cbit));
{
  SI tmp_result;
  tmp_result = SUBCSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), current_cpu->thumb_h_gr_t_get (FLD (f_rs)), NOTBI (current_cpu->hardware.h_cbit));
{
  {
    BI opval = EQSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "zbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "nbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_nbit = opval;
  }
}
  {
    BI opval = NOTBI (SUBCFSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), current_cpu->thumb_h_gr_t_get (FLD (f_rs)), NOTBI (current_cpu->hardware.h_cbit)));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_cbit = opval;
  }
  {
    BI opval = SUBOFSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), current_cpu->thumb_h_gr_t_get (FLD (f_rs)), NOTBI (current_cpu->hardware.h_cbit));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "vbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_vbit = opval;
  }
}
  {
    SI opval = tmp_result;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-t" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_gr_t_set (FLD (f_rd), opval);
  }
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** alu-tst: tst $rd,$rs

sem_status
thumb_sem_alu_tst (arm7f_cpu* current_cpu, thumb_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_addi.f
  sem_status status = SEM_STATUS_NORMAL;
  thumb_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 2;

{
  SI tmp_x;
  tmp_x = ANDSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), current_cpu->thumb_h_gr_t_get (FLD (f_rs)));
{
  {
    BI opval = EQSI (tmp_x, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "zbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_x, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "nbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_nbit = opval;
  }
}
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** alu-neg: neg $rd,$rs

sem_status
thumb_sem_alu_neg (arm7f_cpu* current_cpu, thumb_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_addi.f
  sem_status status = SEM_STATUS_NORMAL;
  thumb_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 2;

{
  SI tmp_result;
  tmp_result = NEGSI (current_cpu->thumb_h_gr_t_get (FLD (f_rs)));
{
  SI tmp_result;
  tmp_result = SUBCSI (0, current_cpu->thumb_h_gr_t_get (FLD (f_rs)), 0);
{
  {
    BI opval = EQSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "zbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "nbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_nbit = opval;
  }
}
  {
    BI opval = NOTBI (SUBCFSI (0, current_cpu->thumb_h_gr_t_get (FLD (f_rs)), 0));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_cbit = opval;
  }
  {
    BI opval = SUBOFSI (0, current_cpu->thumb_h_gr_t_get (FLD (f_rs)), 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "vbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_vbit = opval;
  }
}
  {
    SI opval = tmp_result;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-t" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_gr_t_set (FLD (f_rd), opval);
  }
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** alu-cmp: cmp $rd,$rs

sem_status
thumb_sem_alu_cmp (arm7f_cpu* current_cpu, thumb_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_addi.f
  sem_status status = SEM_STATUS_NORMAL;
  thumb_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 2;

{
  SI tmp_result;
  tmp_result = SUBCSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), current_cpu->thumb_h_gr_t_get (FLD (f_rs)), 0);
{
  {
    BI opval = EQSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "zbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "nbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_nbit = opval;
  }
}
  {
    BI opval = NOTBI (SUBCFSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), current_cpu->thumb_h_gr_t_get (FLD (f_rs)), 0));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_cbit = opval;
  }
  {
    BI opval = SUBOFSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), current_cpu->thumb_h_gr_t_get (FLD (f_rs)), 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "vbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_vbit = opval;
  }
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** alu-cmn: cmn $rd,$rs

sem_status
thumb_sem_alu_cmn (arm7f_cpu* current_cpu, thumb_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_addi.f
  sem_status status = SEM_STATUS_NORMAL;
  thumb_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 2;

{
  SI tmp_result;
  tmp_result = ADDCSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), current_cpu->thumb_h_gr_t_get (FLD (f_rs)), 0);
{
  {
    BI opval = EQSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "zbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "nbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_nbit = opval;
  }
}
  {
    BI opval = ADDCFSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), current_cpu->thumb_h_gr_t_get (FLD (f_rs)), 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_cbit = opval;
  }
  {
    BI opval = ADDOFSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), current_cpu->thumb_h_gr_t_get (FLD (f_rs)), 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "vbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_vbit = opval;
  }
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** alu-orr: orr $rd,$rs

sem_status
thumb_sem_alu_orr (arm7f_cpu* current_cpu, thumb_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_addi.f
  sem_status status = SEM_STATUS_NORMAL;
  thumb_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 2;

{
  {
    SI opval = ORSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), current_cpu->thumb_h_gr_t_get (FLD (f_rs)));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-t" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_gr_t_set (FLD (f_rd), opval);
  }
{
  {
    BI opval = EQSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "zbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "nbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_nbit = opval;
  }
}
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** alu-mul: mul $rd,$rs

sem_status
thumb_sem_alu_mul (arm7f_cpu* current_cpu, thumb_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_addi.f
  sem_status status = SEM_STATUS_NORMAL;
  thumb_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 2;

{
  {
    SI opval = MULSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), current_cpu->thumb_h_gr_t_get (FLD (f_rs)));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-t" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_gr_t_set (FLD (f_rd), opval);
  }
{
  {
    BI opval = EQSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "zbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "nbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_nbit = opval;
  }
}
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** alu-bic: bic $rd,$rs

sem_status
thumb_sem_alu_bic (arm7f_cpu* current_cpu, thumb_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_addi.f
  sem_status status = SEM_STATUS_NORMAL;
  thumb_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 2;

{
  {
    SI opval = ANDSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), INVSI (current_cpu->thumb_h_gr_t_get (FLD (f_rs))));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-t" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_gr_t_set (FLD (f_rd), opval);
  }
{
  {
    BI opval = EQSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "zbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "nbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_nbit = opval;
  }
}
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** alu-mvn: mvn $rd,$rs

sem_status
thumb_sem_alu_mvn (arm7f_cpu* current_cpu, thumb_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_addi.f
  sem_status status = SEM_STATUS_NORMAL;
  thumb_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 2;

{
  {
    SI opval = INVSI (current_cpu->thumb_h_gr_t_get (FLD (f_rs)));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-t" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_gr_t_set (FLD (f_rd), opval);
  }
{
  {
    BI opval = EQSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "zbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "nbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_nbit = opval;
  }
}
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** add-rd-hs: add $rd,$hs

sem_status
thumb_sem_add_rd_hs (arm7f_cpu* current_cpu, thumb_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_addi.f
  sem_status status = SEM_STATUS_NORMAL;
  thumb_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 2;

  {
    SI opval = ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), current_cpu->thumb_h_hiregs_get (FLD (f_rs)));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-t" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_gr_t_set (FLD (f_rd), opval);
  }

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** add-hd-rs: add $hd,$rs

sem_status
thumb_sem_add_hd_rs (arm7f_cpu* current_cpu, thumb_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_addi.f
  sem_status status = SEM_STATUS_NORMAL;
  thumb_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 2;

if (EQSI (FLD (f_rd), 7)) {
  {
    USI opval = ADDSI (current_cpu->thumb_h_hiregs_get (FLD (f_rd)), current_cpu->thumb_h_gr_t_get (FLD (f_rs)));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
} else {
  {
    SI opval = ADDSI (current_cpu->thumb_h_hiregs_get (FLD (f_rd)), current_cpu->thumb_h_gr_t_get (FLD (f_rs)));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "hiregs" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_hiregs_set (FLD (f_rd), opval);
  }
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** add-hd-hs: add $hd,$hs

sem_status
thumb_sem_add_hd_hs (arm7f_cpu* current_cpu, thumb_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_addi.f
  sem_status status = SEM_STATUS_NORMAL;
  thumb_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 2;

if (EQSI (FLD (f_rd), 7)) {
  {
    USI opval = ADDSI (current_cpu->thumb_h_hiregs_get (FLD (f_rd)), current_cpu->thumb_h_hiregs_get (FLD (f_rs)));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
} else {
  {
    SI opval = ADDSI (current_cpu->thumb_h_hiregs_get (FLD (f_rd)), current_cpu->thumb_h_hiregs_get (FLD (f_rs)));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "hiregs" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_hiregs_set (FLD (f_rd), opval);
  }
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** cmp-rd-hs: cmp $rd,$hs

sem_status
thumb_sem_cmp_rd_hs (arm7f_cpu* current_cpu, thumb_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_addi.f
  sem_status status = SEM_STATUS_NORMAL;
  thumb_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 2;

{
  SI tmp_result;
  tmp_result = SUBCSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), current_cpu->thumb_h_hiregs_get (FLD (f_rs)), 0);
{
  {
    BI opval = EQSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "zbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "nbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_nbit = opval;
  }
}
  {
    BI opval = NOTBI (SUBCFSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), current_cpu->thumb_h_hiregs_get (FLD (f_rs)), 0));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_cbit = opval;
  }
  {
    BI opval = SUBOFSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), current_cpu->thumb_h_hiregs_get (FLD (f_rs)), 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "vbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_vbit = opval;
  }
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** cmp-hd-rs: cmp $hd,$rs

sem_status
thumb_sem_cmp_hd_rs (arm7f_cpu* current_cpu, thumb_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_addi.f
  sem_status status = SEM_STATUS_NORMAL;
  thumb_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 2;

{
  SI tmp_result;
  tmp_result = SUBCSI (current_cpu->thumb_h_hiregs_get (FLD (f_rd)), current_cpu->thumb_h_gr_t_get (FLD (f_rs)), 0);
{
  {
    BI opval = EQSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "zbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "nbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_nbit = opval;
  }
}
  {
    BI opval = NOTBI (SUBCFSI (current_cpu->thumb_h_hiregs_get (FLD (f_rd)), current_cpu->thumb_h_gr_t_get (FLD (f_rs)), 0));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_cbit = opval;
  }
  {
    BI opval = SUBOFSI (current_cpu->thumb_h_hiregs_get (FLD (f_rd)), current_cpu->thumb_h_gr_t_get (FLD (f_rs)), 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "vbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_vbit = opval;
  }
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** cmp-hd-hs: cmp $hd,$hs

sem_status
thumb_sem_cmp_hd_hs (arm7f_cpu* current_cpu, thumb_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_addi.f
  sem_status status = SEM_STATUS_NORMAL;
  thumb_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 2;

{
  SI tmp_result;
  tmp_result = SUBCSI (current_cpu->thumb_h_hiregs_get (FLD (f_rd)), current_cpu->thumb_h_hiregs_get (FLD (f_rs)), 0);
{
  {
    BI opval = EQSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "zbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "nbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_nbit = opval;
  }
}
  {
    BI opval = NOTBI (SUBCFSI (current_cpu->thumb_h_hiregs_get (FLD (f_rd)), current_cpu->thumb_h_hiregs_get (FLD (f_rs)), 0));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_cbit = opval;
  }
  {
    BI opval = SUBOFSI (current_cpu->thumb_h_hiregs_get (FLD (f_rd)), current_cpu->thumb_h_hiregs_get (FLD (f_rs)), 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "vbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_vbit = opval;
  }
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** mov-rd-hs: mov $rd,$hs

sem_status
thumb_sem_mov_rd_hs (arm7f_cpu* current_cpu, thumb_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_addi.f
  sem_status status = SEM_STATUS_NORMAL;
  thumb_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 2;

  {
    SI opval = current_cpu->thumb_h_hiregs_get (FLD (f_rs));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-t" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_gr_t_set (FLD (f_rd), opval);
  }

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** mov-hd-rs: mov $hd,$rs

sem_status
thumb_sem_mov_hd_rs (arm7f_cpu* current_cpu, thumb_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_addi.f
  sem_status status = SEM_STATUS_NORMAL;
  thumb_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 2;

if (EQSI (FLD (f_rd), 7)) {
  {
    USI opval = current_cpu->thumb_h_gr_t_get (FLD (f_rs));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
} else {
  {
    SI opval = current_cpu->thumb_h_gr_t_get (FLD (f_rs));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "hiregs" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_hiregs_set (FLD (f_rd), opval);
  }
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** mov-hd-hs: mov $hd,$hs

sem_status
thumb_sem_mov_hd_hs (arm7f_cpu* current_cpu, thumb_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_addi.f
  sem_status status = SEM_STATUS_NORMAL;
  thumb_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 2;

if (EQSI (FLD (f_rd), 7)) {
  {
    USI opval = current_cpu->thumb_h_hiregs_get (FLD (f_rs));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
} else {
  {
    SI opval = current_cpu->thumb_h_hiregs_get (FLD (f_rs));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "hiregs" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_hiregs_set (FLD (f_rd), opval);
  }
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** bx-rs: bx $rs

sem_status
thumb_sem_bx_rs (arm7f_cpu* current_cpu, thumb_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_addi.f
  sem_status status = SEM_STATUS_NORMAL;
  thumb_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 2;

{
  {
    USI opval = current_cpu->thumb_h_gr_t_get (FLD (f_rs));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
if (NOTSI (ANDSI (current_cpu->thumb_h_gr_t_get (FLD (f_rs)), 1))) {
  {
    BI opval = 0;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "tbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->h_tbit_set (opval);
  }
}
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** bx-hs: bx $hs

sem_status
thumb_sem_bx_hs (arm7f_cpu* current_cpu, thumb_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_addi.f
  sem_status status = SEM_STATUS_NORMAL;
  thumb_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 2;

{
  {
    USI opval = current_cpu->thumb_h_hiregs_get (FLD (f_rs));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
if (NOTSI (ANDSI (current_cpu->thumb_h_hiregs_get (FLD (f_rs)), 1))) {
  {
    BI opval = 0;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "tbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->h_tbit_set (opval);
  }
}
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** ldr-pc: ldr ${bit10-rd},[pc,#$word8]

sem_status
thumb_sem_ldr_pc (arm7f_cpu* current_cpu, thumb_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_ldr_pc.f
  sem_status status = SEM_STATUS_NORMAL;
  thumb_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 2;

  {
    SI opval = current_cpu->GETMEMSI (pc, ADDSI (ANDSI (ADDSI (pc, 4), -4), FLD (f_word8)));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-t" << '[' << FLD (f_bit10_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_gr_t_set (FLD (f_bit10_rd), opval);
  }

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** str: str $rd,[$rb,$ro]

sem_status
thumb_sem_str (arm7f_cpu* current_cpu, thumb_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_str.f
  sem_status status = SEM_STATUS_NORMAL;
  thumb_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 2;

  {
    SI opval = current_cpu->thumb_h_gr_t_get (FLD (f_rd));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_rb)), current_cpu->thumb_h_gr_t_get (FLD (f_ro))) << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_rb)), current_cpu->thumb_h_gr_t_get (FLD (f_ro))), opval);
  }

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** strb: strb $rd,[$rb,$ro]

sem_status
thumb_sem_strb (arm7f_cpu* current_cpu, thumb_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_str.f
  sem_status status = SEM_STATUS_NORMAL;
  thumb_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 2;

  {
    QI opval = current_cpu->thumb_h_gr_t_get (FLD (f_rd));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_rb)), current_cpu->thumb_h_gr_t_get (FLD (f_ro))) << dec << ']' << ":=0x" << hex << (SI) opval << dec << "  ";
    current_cpu->SETMEMQI (pc, ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_rb)), current_cpu->thumb_h_gr_t_get (FLD (f_ro))), opval);
  }

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** ldr: ldr $rd,[$rb,$ro]

sem_status
thumb_sem_ldr (arm7f_cpu* current_cpu, thumb_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_str.f
  sem_status status = SEM_STATUS_NORMAL;
  thumb_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 2;

  {
    SI opval = current_cpu->GETMEMSI (pc, ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_rb)), current_cpu->thumb_h_gr_t_get (FLD (f_ro))));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-t" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_gr_t_set (FLD (f_rd), opval);
  }

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** ldrb: ldrb $rd,[$rb,$ro]

sem_status
thumb_sem_ldrb (arm7f_cpu* current_cpu, thumb_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_str.f
  sem_status status = SEM_STATUS_NORMAL;
  thumb_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 2;

  {
    SI opval = ZEXTQISI (current_cpu->GETMEMQI (pc, ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_rb)), current_cpu->thumb_h_gr_t_get (FLD (f_ro)))));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-t" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_gr_t_set (FLD (f_rd), opval);
  }

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** strh: strh $rd,[$rb,$ro]

sem_status
thumb_sem_strh (arm7f_cpu* current_cpu, thumb_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_str.f
  sem_status status = SEM_STATUS_NORMAL;
  thumb_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 2;

  {
    HI opval = current_cpu->thumb_h_gr_t_get (FLD (f_rd));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_rb)), current_cpu->thumb_h_gr_t_get (FLD (f_ro))) << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMHI (pc, ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_rb)), current_cpu->thumb_h_gr_t_get (FLD (f_ro))), opval);
  }

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** ldrh: ldrh $rd,[$rb,$ro]

sem_status
thumb_sem_ldrh (arm7f_cpu* current_cpu, thumb_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_str.f
  sem_status status = SEM_STATUS_NORMAL;
  thumb_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 2;

  {
    SI opval = ZEXTHISI (current_cpu->GETMEMHI (pc, ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_rb)), current_cpu->thumb_h_gr_t_get (FLD (f_ro)))));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-t" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_gr_t_set (FLD (f_rd), opval);
  }

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** ldsb: ldsb $rd,[$rb,$ro]

sem_status
thumb_sem_ldsb (arm7f_cpu* current_cpu, thumb_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_str.f
  sem_status status = SEM_STATUS_NORMAL;
  thumb_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 2;

  {
    SI opval = EXTQISI (current_cpu->GETMEMQI (pc, ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_rb)), current_cpu->thumb_h_gr_t_get (FLD (f_ro)))));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-t" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_gr_t_set (FLD (f_rd), opval);
  }

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** ldsh: ldsh $rd,[$rb,$ro]

sem_status
thumb_sem_ldsh (arm7f_cpu* current_cpu, thumb_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_str.f
  sem_status status = SEM_STATUS_NORMAL;
  thumb_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 2;

  {
    SI opval = EXTHISI (current_cpu->GETMEMHI (pc, ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_rb)), current_cpu->thumb_h_gr_t_get (FLD (f_ro)))));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-t" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_gr_t_set (FLD (f_rd), opval);
  }

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** str-imm: str $rd,[$rb,#${offset5-7}]

sem_status
thumb_sem_str_imm (arm7f_cpu* current_cpu, thumb_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_str_imm.f
  sem_status status = SEM_STATUS_NORMAL;
  thumb_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 2;

  {
    SI opval = current_cpu->thumb_h_gr_t_get (FLD (f_rd));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_rb)), FLD (f_offset5_7)) << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_rb)), FLD (f_offset5_7)), opval);
  }

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** ldr-imm: ldr $rd,[$rb,#${offset5-7}]

sem_status
thumb_sem_ldr_imm (arm7f_cpu* current_cpu, thumb_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_str_imm.f
  sem_status status = SEM_STATUS_NORMAL;
  thumb_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 2;

  {
    SI opval = current_cpu->GETMEMSI (pc, ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_rb)), FLD (f_offset5_7)));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-t" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_gr_t_set (FLD (f_rd), opval);
  }

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** strb-imm: strb $rd,[$rb,#$offset5]

sem_status
thumb_sem_strb_imm (arm7f_cpu* current_cpu, thumb_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_strb_imm.f
  sem_status status = SEM_STATUS_NORMAL;
  thumb_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 2;

  {
    QI opval = current_cpu->thumb_h_gr_t_get (FLD (f_rd));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_rb)), FLD (f_offset5)) << dec << ']' << ":=0x" << hex << (SI) opval << dec << "  ";
    current_cpu->SETMEMQI (pc, ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_rb)), FLD (f_offset5)), opval);
  }

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** ldrb-imm: ldrb $rd,[$rb,#$offset5]

sem_status
thumb_sem_ldrb_imm (arm7f_cpu* current_cpu, thumb_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_strb_imm.f
  sem_status status = SEM_STATUS_NORMAL;
  thumb_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 2;

  {
    SI opval = ZEXTQISI (current_cpu->GETMEMQI (pc, ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_rb)), FLD (f_offset5))));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-t" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_gr_t_set (FLD (f_rd), opval);
  }

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** strh-imm: strh $rd,[$rb,#${offset5-6}]

sem_status
thumb_sem_strh_imm (arm7f_cpu* current_cpu, thumb_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_strh_imm.f
  sem_status status = SEM_STATUS_NORMAL;
  thumb_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 2;

  {
    HI opval = current_cpu->thumb_h_gr_t_get (FLD (f_rd));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_rb)), FLD (f_offset5_6)) << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMHI (pc, ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_rb)), FLD (f_offset5_6)), opval);
  }

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** ldrh-imm: ldrh $rd,[$rb,#${offset5-6}]

sem_status
thumb_sem_ldrh_imm (arm7f_cpu* current_cpu, thumb_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_strh_imm.f
  sem_status status = SEM_STATUS_NORMAL;
  thumb_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 2;

  {
    SI opval = ZEXTHISI (current_cpu->GETMEMHI (pc, ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_rb)), FLD (f_offset5_6))));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-t" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_gr_t_set (FLD (f_rd), opval);
  }

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** str-sprel: str ${bit10-rd},[sp,#$word8]

sem_status
thumb_sem_str_sprel (arm7f_cpu* current_cpu, thumb_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_ldr_pc.f
  sem_status status = SEM_STATUS_NORMAL;
  thumb_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 2;

  {
    SI opval = current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rd));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) ADDSI (current_cpu->thumb_h_sp_t_get (), FLD (f_word8)) << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, ADDSI (current_cpu->thumb_h_sp_t_get (), FLD (f_word8)), opval);
  }

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** ldr-sprel: ldr ${bit10-rd},[sp,#$word8]

sem_status
thumb_sem_ldr_sprel (arm7f_cpu* current_cpu, thumb_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_ldr_pc.f
  sem_status status = SEM_STATUS_NORMAL;
  thumb_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 2;

  {
    SI opval = current_cpu->GETMEMSI (pc, ADDSI (current_cpu->thumb_h_sp_t_get (), FLD (f_word8)));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-t" << '[' << FLD (f_bit10_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_gr_t_set (FLD (f_bit10_rd), opval);
  }

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** lda-pc: add ${bit10-rd},pc,$word8

sem_status
thumb_sem_lda_pc (arm7f_cpu* current_cpu, thumb_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_ldr_pc.f
  sem_status status = SEM_STATUS_NORMAL;
  thumb_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 2;

  {
    SI opval = ADDSI (ANDSI (ADDSI (pc, 4), -4), FLD (f_word8));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-t" << '[' << FLD (f_bit10_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_gr_t_set (FLD (f_bit10_rd), opval);
  }

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** lda-sp: add ${bit10-rd},sp,$word8

sem_status
thumb_sem_lda_sp (arm7f_cpu* current_cpu, thumb_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_ldr_pc.f
  sem_status status = SEM_STATUS_NORMAL;
  thumb_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 2;

  {
    SI opval = ADDSI (current_cpu->thumb_h_sp_t_get (), FLD (f_word8));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-t" << '[' << FLD (f_bit10_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_gr_t_set (FLD (f_bit10_rd), opval);
  }

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** add-sp: add sp,#$sword7

sem_status
thumb_sem_add_sp (arm7f_cpu* current_cpu, thumb_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_add_sp.f
  sem_status status = SEM_STATUS_NORMAL;
  thumb_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 2;

  {
    SI opval = ADDSI (current_cpu->thumb_h_sp_t_get (), FLD (f_sword7));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "sp-t" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_sp_t_set (opval);
  }

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** sub-sp: add sp,#-$sword7

sem_status
thumb_sem_sub_sp (arm7f_cpu* current_cpu, thumb_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_add_sp.f
  sem_status status = SEM_STATUS_NORMAL;
  thumb_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 2;

  {
    SI opval = SUBSI (current_cpu->thumb_h_sp_t_get (), FLD (f_sword7));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "sp-t" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_sp_t_set (opval);
  }

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** push: push {$rlist}

sem_status
thumb_sem_push (arm7f_cpu* current_cpu, thumb_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_stmia.f
  sem_status status = SEM_STATUS_NORMAL;
  thumb_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 2;

{
if (ANDSI (FLD (f_rlist), SLLSI (1, 7))) {
{
  {
    SI opval = SUBSI (current_cpu->thumb_h_sp_t_get (), 4);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "sp-t" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_sp_t_set (opval);
  }
  {
    SI opval = current_cpu->thumb_h_gr_t_get (((UINT) 7));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) current_cpu->thumb_h_sp_t_get () << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, current_cpu->thumb_h_sp_t_get (), opval);
  }
}
}
if (ANDSI (FLD (f_rlist), SLLSI (1, 6))) {
{
  {
    SI opval = SUBSI (current_cpu->thumb_h_sp_t_get (), 4);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "sp-t" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_sp_t_set (opval);
  }
  {
    SI opval = current_cpu->thumb_h_gr_t_get (((UINT) 6));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) current_cpu->thumb_h_sp_t_get () << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, current_cpu->thumb_h_sp_t_get (), opval);
  }
}
}
if (ANDSI (FLD (f_rlist), SLLSI (1, 5))) {
{
  {
    SI opval = SUBSI (current_cpu->thumb_h_sp_t_get (), 4);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "sp-t" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_sp_t_set (opval);
  }
  {
    SI opval = current_cpu->thumb_h_gr_t_get (((UINT) 5));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) current_cpu->thumb_h_sp_t_get () << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, current_cpu->thumb_h_sp_t_get (), opval);
  }
}
}
if (ANDSI (FLD (f_rlist), SLLSI (1, 4))) {
{
  {
    SI opval = SUBSI (current_cpu->thumb_h_sp_t_get (), 4);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "sp-t" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_sp_t_set (opval);
  }
  {
    SI opval = current_cpu->thumb_h_gr_t_get (((UINT) 4));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) current_cpu->thumb_h_sp_t_get () << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, current_cpu->thumb_h_sp_t_get (), opval);
  }
}
}
if (ANDSI (FLD (f_rlist), SLLSI (1, 3))) {
{
  {
    SI opval = SUBSI (current_cpu->thumb_h_sp_t_get (), 4);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "sp-t" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_sp_t_set (opval);
  }
  {
    SI opval = current_cpu->thumb_h_gr_t_get (((UINT) 3));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) current_cpu->thumb_h_sp_t_get () << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, current_cpu->thumb_h_sp_t_get (), opval);
  }
}
}
if (ANDSI (FLD (f_rlist), SLLSI (1, 2))) {
{
  {
    SI opval = SUBSI (current_cpu->thumb_h_sp_t_get (), 4);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "sp-t" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_sp_t_set (opval);
  }
  {
    SI opval = current_cpu->thumb_h_gr_t_get (((UINT) 2));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) current_cpu->thumb_h_sp_t_get () << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, current_cpu->thumb_h_sp_t_get (), opval);
  }
}
}
if (ANDSI (FLD (f_rlist), SLLSI (1, 1))) {
{
  {
    SI opval = SUBSI (current_cpu->thumb_h_sp_t_get (), 4);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "sp-t" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_sp_t_set (opval);
  }
  {
    SI opval = current_cpu->thumb_h_gr_t_get (((UINT) 1));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) current_cpu->thumb_h_sp_t_get () << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, current_cpu->thumb_h_sp_t_get (), opval);
  }
}
}
if (ANDSI (FLD (f_rlist), SLLSI (1, 0))) {
{
  {
    SI opval = SUBSI (current_cpu->thumb_h_sp_t_get (), 4);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "sp-t" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_sp_t_set (opval);
  }
  {
    SI opval = current_cpu->thumb_h_gr_t_get (((UINT) 0));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) current_cpu->thumb_h_sp_t_get () << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, current_cpu->thumb_h_sp_t_get (), opval);
  }
}
}
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** push-lr: push {${rlist-lr}}

sem_status
thumb_sem_push_lr (arm7f_cpu* current_cpu, thumb_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_stmia.f
  sem_status status = SEM_STATUS_NORMAL;
  thumb_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 2;

{
  {
    SI opval = SUBSI (current_cpu->thumb_h_sp_t_get (), 4);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "sp-t" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_sp_t_set (opval);
  }
  {
    SI opval = current_cpu->thumb_h_lr_t_get ();
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) current_cpu->thumb_h_sp_t_get () << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, current_cpu->thumb_h_sp_t_get (), opval);
  }
if (ANDSI (FLD (f_rlist), SLLSI (1, 7))) {
{
  {
    SI opval = SUBSI (current_cpu->thumb_h_sp_t_get (), 4);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "sp-t" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_sp_t_set (opval);
  }
  {
    SI opval = current_cpu->thumb_h_gr_t_get (((UINT) 7));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) current_cpu->thumb_h_sp_t_get () << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, current_cpu->thumb_h_sp_t_get (), opval);
  }
}
}
if (ANDSI (FLD (f_rlist), SLLSI (1, 6))) {
{
  {
    SI opval = SUBSI (current_cpu->thumb_h_sp_t_get (), 4);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "sp-t" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_sp_t_set (opval);
  }
  {
    SI opval = current_cpu->thumb_h_gr_t_get (((UINT) 6));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) current_cpu->thumb_h_sp_t_get () << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, current_cpu->thumb_h_sp_t_get (), opval);
  }
}
}
if (ANDSI (FLD (f_rlist), SLLSI (1, 5))) {
{
  {
    SI opval = SUBSI (current_cpu->thumb_h_sp_t_get (), 4);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "sp-t" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_sp_t_set (opval);
  }
  {
    SI opval = current_cpu->thumb_h_gr_t_get (((UINT) 5));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) current_cpu->thumb_h_sp_t_get () << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, current_cpu->thumb_h_sp_t_get (), opval);
  }
}
}
if (ANDSI (FLD (f_rlist), SLLSI (1, 4))) {
{
  {
    SI opval = SUBSI (current_cpu->thumb_h_sp_t_get (), 4);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "sp-t" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_sp_t_set (opval);
  }
  {
    SI opval = current_cpu->thumb_h_gr_t_get (((UINT) 4));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) current_cpu->thumb_h_sp_t_get () << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, current_cpu->thumb_h_sp_t_get (), opval);
  }
}
}
if (ANDSI (FLD (f_rlist), SLLSI (1, 3))) {
{
  {
    SI opval = SUBSI (current_cpu->thumb_h_sp_t_get (), 4);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "sp-t" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_sp_t_set (opval);
  }
  {
    SI opval = current_cpu->thumb_h_gr_t_get (((UINT) 3));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) current_cpu->thumb_h_sp_t_get () << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, current_cpu->thumb_h_sp_t_get (), opval);
  }
}
}
if (ANDSI (FLD (f_rlist), SLLSI (1, 2))) {
{
  {
    SI opval = SUBSI (current_cpu->thumb_h_sp_t_get (), 4);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "sp-t" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_sp_t_set (opval);
  }
  {
    SI opval = current_cpu->thumb_h_gr_t_get (((UINT) 2));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) current_cpu->thumb_h_sp_t_get () << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, current_cpu->thumb_h_sp_t_get (), opval);
  }
}
}
if (ANDSI (FLD (f_rlist), SLLSI (1, 1))) {
{
  {
    SI opval = SUBSI (current_cpu->thumb_h_sp_t_get (), 4);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "sp-t" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_sp_t_set (opval);
  }
  {
    SI opval = current_cpu->thumb_h_gr_t_get (((UINT) 1));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) current_cpu->thumb_h_sp_t_get () << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, current_cpu->thumb_h_sp_t_get (), opval);
  }
}
}
if (ANDSI (FLD (f_rlist), SLLSI (1, 0))) {
{
  {
    SI opval = SUBSI (current_cpu->thumb_h_sp_t_get (), 4);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "sp-t" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_sp_t_set (opval);
  }
  {
    SI opval = current_cpu->thumb_h_gr_t_get (((UINT) 0));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) current_cpu->thumb_h_sp_t_get () << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, current_cpu->thumb_h_sp_t_get (), opval);
  }
}
}
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** pop: pop {$rlist}

sem_status
thumb_sem_pop (arm7f_cpu* current_cpu, thumb_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_stmia.f
  sem_status status = SEM_STATUS_NORMAL;
  thumb_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 2;

{
if (ANDSI (FLD (f_rlist), SLLSI (1, 0))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, current_cpu->thumb_h_sp_t_get ());
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-t" << '[' << ((UINT) 0) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_gr_t_set (((UINT) 0), opval);
  }
  {
    SI opval = ADDSI (current_cpu->thumb_h_sp_t_get (), 4);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "sp-t" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_sp_t_set (opval);
  }
}
}
if (ANDSI (FLD (f_rlist), SLLSI (1, 1))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, current_cpu->thumb_h_sp_t_get ());
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-t" << '[' << ((UINT) 1) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_gr_t_set (((UINT) 1), opval);
  }
  {
    SI opval = ADDSI (current_cpu->thumb_h_sp_t_get (), 4);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "sp-t" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_sp_t_set (opval);
  }
}
}
if (ANDSI (FLD (f_rlist), SLLSI (1, 2))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, current_cpu->thumb_h_sp_t_get ());
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-t" << '[' << ((UINT) 2) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_gr_t_set (((UINT) 2), opval);
  }
  {
    SI opval = ADDSI (current_cpu->thumb_h_sp_t_get (), 4);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "sp-t" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_sp_t_set (opval);
  }
}
}
if (ANDSI (FLD (f_rlist), SLLSI (1, 3))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, current_cpu->thumb_h_sp_t_get ());
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-t" << '[' << ((UINT) 3) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_gr_t_set (((UINT) 3), opval);
  }
  {
    SI opval = ADDSI (current_cpu->thumb_h_sp_t_get (), 4);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "sp-t" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_sp_t_set (opval);
  }
}
}
if (ANDSI (FLD (f_rlist), SLLSI (1, 4))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, current_cpu->thumb_h_sp_t_get ());
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-t" << '[' << ((UINT) 4) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_gr_t_set (((UINT) 4), opval);
  }
  {
    SI opval = ADDSI (current_cpu->thumb_h_sp_t_get (), 4);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "sp-t" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_sp_t_set (opval);
  }
}
}
if (ANDSI (FLD (f_rlist), SLLSI (1, 5))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, current_cpu->thumb_h_sp_t_get ());
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-t" << '[' << ((UINT) 5) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_gr_t_set (((UINT) 5), opval);
  }
  {
    SI opval = ADDSI (current_cpu->thumb_h_sp_t_get (), 4);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "sp-t" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_sp_t_set (opval);
  }
}
}
if (ANDSI (FLD (f_rlist), SLLSI (1, 6))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, current_cpu->thumb_h_sp_t_get ());
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-t" << '[' << ((UINT) 6) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_gr_t_set (((UINT) 6), opval);
  }
  {
    SI opval = ADDSI (current_cpu->thumb_h_sp_t_get (), 4);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "sp-t" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_sp_t_set (opval);
  }
}
}
if (ANDSI (FLD (f_rlist), SLLSI (1, 7))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, current_cpu->thumb_h_sp_t_get ());
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-t" << '[' << ((UINT) 7) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_gr_t_set (((UINT) 7), opval);
  }
  {
    SI opval = ADDSI (current_cpu->thumb_h_sp_t_get (), 4);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "sp-t" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_sp_t_set (opval);
  }
}
}
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** pop-pc: pop {${rlist-pc}}

sem_status
thumb_sem_pop_pc (arm7f_cpu* current_cpu, thumb_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_stmia.f
  sem_status status = SEM_STATUS_NORMAL;
  thumb_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 2;

{
if (ANDSI (FLD (f_rlist), SLLSI (1, 0))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, current_cpu->thumb_h_sp_t_get ());
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-t" << '[' << ((UINT) 0) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_gr_t_set (((UINT) 0), opval);
  }
  {
    SI opval = ADDSI (current_cpu->thumb_h_sp_t_get (), 4);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "sp-t" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_sp_t_set (opval);
  }
}
}
if (ANDSI (FLD (f_rlist), SLLSI (1, 1))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, current_cpu->thumb_h_sp_t_get ());
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-t" << '[' << ((UINT) 1) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_gr_t_set (((UINT) 1), opval);
  }
  {
    SI opval = ADDSI (current_cpu->thumb_h_sp_t_get (), 4);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "sp-t" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_sp_t_set (opval);
  }
}
}
if (ANDSI (FLD (f_rlist), SLLSI (1, 2))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, current_cpu->thumb_h_sp_t_get ());
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-t" << '[' << ((UINT) 2) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_gr_t_set (((UINT) 2), opval);
  }
  {
    SI opval = ADDSI (current_cpu->thumb_h_sp_t_get (), 4);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "sp-t" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_sp_t_set (opval);
  }
}
}
if (ANDSI (FLD (f_rlist), SLLSI (1, 3))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, current_cpu->thumb_h_sp_t_get ());
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-t" << '[' << ((UINT) 3) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_gr_t_set (((UINT) 3), opval);
  }
  {
    SI opval = ADDSI (current_cpu->thumb_h_sp_t_get (), 4);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "sp-t" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_sp_t_set (opval);
  }
}
}
if (ANDSI (FLD (f_rlist), SLLSI (1, 4))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, current_cpu->thumb_h_sp_t_get ());
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-t" << '[' << ((UINT) 4) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_gr_t_set (((UINT) 4), opval);
  }
  {
    SI opval = ADDSI (current_cpu->thumb_h_sp_t_get (), 4);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "sp-t" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_sp_t_set (opval);
  }
}
}
if (ANDSI (FLD (f_rlist), SLLSI (1, 5))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, current_cpu->thumb_h_sp_t_get ());
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-t" << '[' << ((UINT) 5) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_gr_t_set (((UINT) 5), opval);
  }
  {
    SI opval = ADDSI (current_cpu->thumb_h_sp_t_get (), 4);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "sp-t" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_sp_t_set (opval);
  }
}
}
if (ANDSI (FLD (f_rlist), SLLSI (1, 6))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, current_cpu->thumb_h_sp_t_get ());
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-t" << '[' << ((UINT) 6) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_gr_t_set (((UINT) 6), opval);
  }
  {
    SI opval = ADDSI (current_cpu->thumb_h_sp_t_get (), 4);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "sp-t" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_sp_t_set (opval);
  }
}
}
if (ANDSI (FLD (f_rlist), SLLSI (1, 7))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, current_cpu->thumb_h_sp_t_get ());
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-t" << '[' << ((UINT) 7) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_gr_t_set (((UINT) 7), opval);
  }
  {
    SI opval = ADDSI (current_cpu->thumb_h_sp_t_get (), 4);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "sp-t" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_sp_t_set (opval);
  }
}
}
  {
    USI opval = current_cpu->GETMEMSI (pc, current_cpu->thumb_h_sp_t_get ());
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
  {
    SI opval = ADDSI (current_cpu->thumb_h_sp_t_get (), 4);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "sp-t" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_sp_t_set (opval);
  }
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** stmia: stmia $rb!,{$rlist}

sem_status
thumb_sem_stmia (arm7f_cpu* current_cpu, thumb_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_stmia.f
  sem_status status = SEM_STATUS_NORMAL;
  thumb_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 2;

{
if (ANDSI (FLD (f_rlist), SLLSI (1, 0))) {
{
  {
    SI opval = current_cpu->thumb_h_gr_t_get (((UINT) 0));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb)) << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb)), opval);
  }
  {
    SI opval = ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb)), 4);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-t" << '[' << FLD (f_bit10_rb) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_gr_t_set (FLD (f_bit10_rb), opval);
  }
}
}
if (ANDSI (FLD (f_rlist), SLLSI (1, 1))) {
{
  {
    SI opval = current_cpu->thumb_h_gr_t_get (((UINT) 1));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb)) << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb)), opval);
  }
  {
    SI opval = ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb)), 4);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-t" << '[' << FLD (f_bit10_rb) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_gr_t_set (FLD (f_bit10_rb), opval);
  }
}
}
if (ANDSI (FLD (f_rlist), SLLSI (1, 2))) {
{
  {
    SI opval = current_cpu->thumb_h_gr_t_get (((UINT) 2));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb)) << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb)), opval);
  }
  {
    SI opval = ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb)), 4);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-t" << '[' << FLD (f_bit10_rb) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_gr_t_set (FLD (f_bit10_rb), opval);
  }
}
}
if (ANDSI (FLD (f_rlist), SLLSI (1, 3))) {
{
  {
    SI opval = current_cpu->thumb_h_gr_t_get (((UINT) 3));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb)) << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb)), opval);
  }
  {
    SI opval = ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb)), 4);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-t" << '[' << FLD (f_bit10_rb) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_gr_t_set (FLD (f_bit10_rb), opval);
  }
}
}
if (ANDSI (FLD (f_rlist), SLLSI (1, 4))) {
{
  {
    SI opval = current_cpu->thumb_h_gr_t_get (((UINT) 4));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb)) << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb)), opval);
  }
  {
    SI opval = ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb)), 4);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-t" << '[' << FLD (f_bit10_rb) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_gr_t_set (FLD (f_bit10_rb), opval);
  }
}
}
if (ANDSI (FLD (f_rlist), SLLSI (1, 5))) {
{
  {
    SI opval = current_cpu->thumb_h_gr_t_get (((UINT) 5));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb)) << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb)), opval);
  }
  {
    SI opval = ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb)), 4);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-t" << '[' << FLD (f_bit10_rb) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_gr_t_set (FLD (f_bit10_rb), opval);
  }
}
}
if (ANDSI (FLD (f_rlist), SLLSI (1, 6))) {
{
  {
    SI opval = current_cpu->thumb_h_gr_t_get (((UINT) 6));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb)) << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb)), opval);
  }
  {
    SI opval = ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb)), 4);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-t" << '[' << FLD (f_bit10_rb) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_gr_t_set (FLD (f_bit10_rb), opval);
  }
}
}
if (ANDSI (FLD (f_rlist), SLLSI (1, 7))) {
{
  {
    SI opval = current_cpu->thumb_h_gr_t_get (((UINT) 7));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb)) << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb)), opval);
  }
  {
    SI opval = ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb)), 4);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-t" << '[' << FLD (f_bit10_rb) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_gr_t_set (FLD (f_bit10_rb), opval);
  }
}
}
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** ldmia: ldmia $rb!,{$rlist}

sem_status
thumb_sem_ldmia (arm7f_cpu* current_cpu, thumb_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_stmia.f
  sem_status status = SEM_STATUS_NORMAL;
  thumb_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 2;

{
if (ANDSI (FLD (f_rlist), SLLSI (1, 0))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb)));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-t" << '[' << ((UINT) 0) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_gr_t_set (((UINT) 0), opval);
  }
  {
    SI opval = ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb)), 4);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-t" << '[' << FLD (f_bit10_rb) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_gr_t_set (FLD (f_bit10_rb), opval);
  }
}
}
if (ANDSI (FLD (f_rlist), SLLSI (1, 1))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb)));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-t" << '[' << ((UINT) 1) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_gr_t_set (((UINT) 1), opval);
  }
  {
    SI opval = ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb)), 4);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-t" << '[' << FLD (f_bit10_rb) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_gr_t_set (FLD (f_bit10_rb), opval);
  }
}
}
if (ANDSI (FLD (f_rlist), SLLSI (1, 2))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb)));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-t" << '[' << ((UINT) 2) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_gr_t_set (((UINT) 2), opval);
  }
  {
    SI opval = ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb)), 4);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-t" << '[' << FLD (f_bit10_rb) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_gr_t_set (FLD (f_bit10_rb), opval);
  }
}
}
if (ANDSI (FLD (f_rlist), SLLSI (1, 3))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb)));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-t" << '[' << ((UINT) 3) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_gr_t_set (((UINT) 3), opval);
  }
  {
    SI opval = ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb)), 4);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-t" << '[' << FLD (f_bit10_rb) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_gr_t_set (FLD (f_bit10_rb), opval);
  }
}
}
if (ANDSI (FLD (f_rlist), SLLSI (1, 4))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb)));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-t" << '[' << ((UINT) 4) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_gr_t_set (((UINT) 4), opval);
  }
  {
    SI opval = ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb)), 4);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-t" << '[' << FLD (f_bit10_rb) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_gr_t_set (FLD (f_bit10_rb), opval);
  }
}
}
if (ANDSI (FLD (f_rlist), SLLSI (1, 5))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb)));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-t" << '[' << ((UINT) 5) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_gr_t_set (((UINT) 5), opval);
  }
  {
    SI opval = ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb)), 4);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-t" << '[' << FLD (f_bit10_rb) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_gr_t_set (FLD (f_bit10_rb), opval);
  }
}
}
if (ANDSI (FLD (f_rlist), SLLSI (1, 6))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb)));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-t" << '[' << ((UINT) 6) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_gr_t_set (((UINT) 6), opval);
  }
  {
    SI opval = ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb)), 4);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-t" << '[' << FLD (f_bit10_rb) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_gr_t_set (FLD (f_bit10_rb), opval);
  }
}
}
if (ANDSI (FLD (f_rlist), SLLSI (1, 7))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb)));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-t" << '[' << ((UINT) 7) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_gr_t_set (((UINT) 7), opval);
  }
  {
    SI opval = ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb)), 4);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-t" << '[' << FLD (f_bit10_rb) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_gr_t_set (FLD (f_bit10_rb), opval);
  }
}
}
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** beq: beq $soffset8

sem_status
thumb_sem_beq (arm7f_cpu* current_cpu, thumb_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_beq.f
  sem_status status = SEM_STATUS_NORMAL;
  thumb_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 2;

if (current_cpu->hardware.h_zbit) {
  {
    USI opval = FLD (i_soffset8);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** bne: bne $soffset8

sem_status
thumb_sem_bne (arm7f_cpu* current_cpu, thumb_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_beq.f
  sem_status status = SEM_STATUS_NORMAL;
  thumb_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 2;

if (NOTBI (current_cpu->hardware.h_zbit)) {
  {
    USI opval = FLD (i_soffset8);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** bcs: bcs $soffset8

sem_status
thumb_sem_bcs (arm7f_cpu* current_cpu, thumb_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_beq.f
  sem_status status = SEM_STATUS_NORMAL;
  thumb_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 2;

if (current_cpu->hardware.h_cbit) {
  {
    USI opval = FLD (i_soffset8);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** bcc: bcc $soffset8

sem_status
thumb_sem_bcc (arm7f_cpu* current_cpu, thumb_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_beq.f
  sem_status status = SEM_STATUS_NORMAL;
  thumb_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 2;

if (NOTBI (current_cpu->hardware.h_cbit)) {
  {
    USI opval = FLD (i_soffset8);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** bmi: bmi $soffset8

sem_status
thumb_sem_bmi (arm7f_cpu* current_cpu, thumb_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_beq.f
  sem_status status = SEM_STATUS_NORMAL;
  thumb_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 2;

if (current_cpu->hardware.h_nbit) {
  {
    USI opval = FLD (i_soffset8);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** bpl: bpl $soffset8

sem_status
thumb_sem_bpl (arm7f_cpu* current_cpu, thumb_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_beq.f
  sem_status status = SEM_STATUS_NORMAL;
  thumb_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 2;

if (NOTBI (current_cpu->hardware.h_nbit)) {
  {
    USI opval = FLD (i_soffset8);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** bvs: bvs $soffset8

sem_status
thumb_sem_bvs (arm7f_cpu* current_cpu, thumb_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_beq.f
  sem_status status = SEM_STATUS_NORMAL;
  thumb_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 2;

if (current_cpu->hardware.h_vbit) {
  {
    USI opval = FLD (i_soffset8);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** bvc: bvc $soffset8

sem_status
thumb_sem_bvc (arm7f_cpu* current_cpu, thumb_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_beq.f
  sem_status status = SEM_STATUS_NORMAL;
  thumb_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 2;

if (NOTBI (current_cpu->hardware.h_vbit)) {
  {
    USI opval = FLD (i_soffset8);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** bhi: bhi $soffset8

sem_status
thumb_sem_bhi (arm7f_cpu* current_cpu, thumb_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_beq.f
  sem_status status = SEM_STATUS_NORMAL;
  thumb_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 2;

if (ANDBI (current_cpu->hardware.h_cbit, NOTBI (current_cpu->hardware.h_zbit))) {
  {
    USI opval = FLD (i_soffset8);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** bls: bls $soffset8

sem_status
thumb_sem_bls (arm7f_cpu* current_cpu, thumb_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_beq.f
  sem_status status = SEM_STATUS_NORMAL;
  thumb_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 2;

if (ORBI (NOTBI (current_cpu->hardware.h_cbit), current_cpu->hardware.h_zbit)) {
  {
    USI opval = FLD (i_soffset8);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** bge: bge $soffset8

sem_status
thumb_sem_bge (arm7f_cpu* current_cpu, thumb_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_beq.f
  sem_status status = SEM_STATUS_NORMAL;
  thumb_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 2;

if (NOTBI (XORBI (current_cpu->hardware.h_nbit, current_cpu->hardware.h_vbit))) {
  {
    USI opval = FLD (i_soffset8);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** blt: blt $soffset8

sem_status
thumb_sem_blt (arm7f_cpu* current_cpu, thumb_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_beq.f
  sem_status status = SEM_STATUS_NORMAL;
  thumb_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 2;

if (XORBI (current_cpu->hardware.h_nbit, current_cpu->hardware.h_vbit)) {
  {
    USI opval = FLD (i_soffset8);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** bgt: bgt $soffset8

sem_status
thumb_sem_bgt (arm7f_cpu* current_cpu, thumb_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_beq.f
  sem_status status = SEM_STATUS_NORMAL;
  thumb_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 2;

if (NOTBI (ORBI (current_cpu->hardware.h_zbit, XORBI (current_cpu->hardware.h_nbit, current_cpu->hardware.h_vbit)))) {
  {
    USI opval = FLD (i_soffset8);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** ble: ble $soffset8

sem_status
thumb_sem_ble (arm7f_cpu* current_cpu, thumb_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_beq.f
  sem_status status = SEM_STATUS_NORMAL;
  thumb_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 2;

if (ORBI (current_cpu->hardware.h_zbit, XORBI (current_cpu->hardware.h_nbit, current_cpu->hardware.h_vbit))) {
  {
    USI opval = FLD (i_soffset8);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** swi: swi $value8

sem_status
thumb_sem_swi (arm7f_cpu* current_cpu, thumb_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_swi.f
  sem_status status = SEM_STATUS_NORMAL;
  thumb_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 2;

  {
    USI opval = current_cpu->thumb_swi (pc, FLD (f_value8));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** b: b $offset11

sem_status
thumb_sem_b (arm7f_cpu* current_cpu, thumb_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_b.f
  sem_status status = SEM_STATUS_NORMAL;
  thumb_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 2;

  {
    USI opval = FLD (i_offset11);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** bl-hi: bl-hi ${lbwl-hi}

sem_status
thumb_sem_bl_hi (arm7f_cpu* current_cpu, thumb_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_bl_hi.f
  sem_status status = SEM_STATUS_NORMAL;
  thumb_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 2;

  {
    SI opval = ADDSI (ADDSI (pc, 4), SLLSI (FLD (f_lbwl_hi), 12));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "lr-t" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_lr_t_set (opval);
  }

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** bl-lo: bl-lo ${lbwl-lo}

sem_status
thumb_sem_bl_lo (arm7f_cpu* current_cpu, thumb_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_bl_lo.f
  sem_status status = SEM_STATUS_NORMAL;
  thumb_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 2;

{
  SI tmp_cur_pc;
  tmp_cur_pc = pc;
  {
    USI opval = ADDSI (current_cpu->thumb_h_lr_t_get (), SLLSI (FLD (f_lbwl_lo), 1));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
  {
    SI opval = ORSI (ADDSI (tmp_cur_pc, 2), 1);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "lr-t" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->thumb_h_lr_t_set (opval);
  }
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

@


1.9
log
@Regenerate cgen files, update copyright year.
@
text
@d27 1
a27 1
#define FLD(f) abuf->fields.fmt_empty.f
@


1.8
log
@	* cgen-cpu.h: Update for new location of cgen/bitset.h.
	* tracedis.h: Ditto.

Plus update generated files to pick up two cgen changes:
1)
	* desc-cpu.scm (/gen-hash-defines): Remove #include of cgen-bitset.h.
	* sid-cpu.scm (cgen-desc.h): Update location of cgen's bitset.h.
2)
	* utils-sim.scm (/gen-set-itype-and-extract): New function.
	(/gen-bracketed-set-itype-and-extract): New function.
	(/gen-decode-default-entry): Rewrite.
	(/table-guts-to-mask, /all-opcode-bits-used?): New functions.
	(/gen-decode-insn-entry): New arg table-guts-thus-far, all callers
	updated.  Don't unnecessarily emit check for whether all opcode bits
	have been examined.
	(/gen-decode-expr-set-itype): Delete.
	(/gen-decode-expr-entry): Update.
	(/gen-decode-table-entry): New arg table-guts-thus-far, all callers
	updated.  Keep track of decoder tables used thus far.
	(/gen-decoder-switch): Ditto.
@
text
@d5 1
a5 1
Copyright (C) 2000-2009 Red Hat, Inc.
@


1.7
log
@Regenerate cgen files (not due to any recent changes, just want to
establish a reference point).
@
text
@d5 1
a5 1
Copyright (C) 2000, 2001, 2002, 2003 Red Hat, Inc.
a18 1

a59 1
    current_cpu->thumb_h_gr_t_set (FLD (f_rd), opval);
d62 1
a67 1
    current_cpu->hardware.h_zbit = opval;
d70 1
a73 1
    current_cpu->hardware.h_nbit = opval;
d76 1
a80 1
    current_cpu->hardware.h_cbit = opval;
d83 1
a108 1
    current_cpu->thumb_h_gr_t_set (FLD (f_rd), opval);
d111 1
a116 1
    current_cpu->hardware.h_zbit = opval;
d119 1
a122 1
    current_cpu->hardware.h_nbit = opval;
d125 1
a129 1
    current_cpu->hardware.h_cbit = opval;
d132 1
a157 1
    current_cpu->thumb_h_gr_t_set (FLD (f_rd), opval);
d160 1
a165 1
    current_cpu->hardware.h_zbit = opval;
d168 1
a171 1
    current_cpu->hardware.h_nbit = opval;
d174 1
a178 1
    current_cpu->hardware.h_cbit = opval;
d181 1
a208 1
    current_cpu->hardware.h_zbit = opval;
d211 1
a214 1
    current_cpu->hardware.h_nbit = opval;
d217 1
a221 1
    current_cpu->hardware.h_cbit = opval;
d224 1
a227 1
    current_cpu->hardware.h_vbit = opval;
d230 1
a234 1
    current_cpu->thumb_h_gr_t_set (FLD (f_rd), opval);
d237 1
a263 1
    current_cpu->hardware.h_zbit = opval;
d266 1
a269 1
    current_cpu->hardware.h_nbit = opval;
d272 1
a276 1
    current_cpu->hardware.h_cbit = opval;
d279 1
a282 1
    current_cpu->hardware.h_vbit = opval;
d285 1
a289 1
    current_cpu->thumb_h_gr_t_set (FLD (f_rd), opval);
d292 1
a318 1
    current_cpu->hardware.h_zbit = opval;
d321 1
a324 1
    current_cpu->hardware.h_nbit = opval;
d327 1
d331 1
a331 2
    BI opval = NOTSI (SUBCFSI (current_cpu->thumb_h_gr_t_get (FLD (f_rs)), current_cpu->thumb_h_gr_t_get (FLD (f_rn)), 0));
    current_cpu->hardware.h_cbit = opval;
d334 1
a337 1
    current_cpu->hardware.h_vbit = opval;
d340 1
a344 1
    current_cpu->thumb_h_gr_t_set (FLD (f_rd), opval);
d347 1
a373 1
    current_cpu->hardware.h_zbit = opval;
d376 1
a379 1
    current_cpu->hardware.h_nbit = opval;
d382 1
d386 1
a386 2
    BI opval = NOTSI (SUBCFSI (current_cpu->thumb_h_gr_t_get (FLD (f_rs)), FLD (f_offset3), 0));
    current_cpu->hardware.h_cbit = opval;
d389 1
a392 1
    current_cpu->hardware.h_vbit = opval;
d395 1
a399 1
    current_cpu->thumb_h_gr_t_set (FLD (f_rd), opval);
d402 1
a424 1
    current_cpu->thumb_h_gr_t_set (FLD (f_bit10_rd), opval);
d427 1
a431 1
    current_cpu->hardware.h_zbit = opval;
d434 1
a437 1
    current_cpu->hardware.h_nbit = opval;
d440 1
a466 1
    current_cpu->hardware.h_zbit = opval;
d469 1
a472 1
    current_cpu->hardware.h_nbit = opval;
d475 1
d479 1
a479 2
    BI opval = NOTSI (SUBCFSI (current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rd)), FLD (f_offset8), 0));
    current_cpu->hardware.h_cbit = opval;
d482 1
a485 1
    current_cpu->hardware.h_vbit = opval;
d488 1
a514 1
    current_cpu->hardware.h_zbit = opval;
d517 1
a520 1
    current_cpu->hardware.h_nbit = opval;
d523 1
a527 1
    current_cpu->hardware.h_cbit = opval;
d530 1
a533 1
    current_cpu->hardware.h_vbit = opval;
d536 1
a540 1
    current_cpu->thumb_h_gr_t_set (FLD (f_bit10_rd), opval);
d543 1
a569 1
    current_cpu->hardware.h_zbit = opval;
d572 1
a575 1
    current_cpu->hardware.h_nbit = opval;
d578 1
d582 1
a582 2
    BI opval = NOTSI (SUBCFSI (current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rd)), FLD (f_offset8), 0));
    current_cpu->hardware.h_cbit = opval;
d585 1
a588 1
    current_cpu->hardware.h_vbit = opval;
d591 1
a595 1
    current_cpu->thumb_h_gr_t_set (FLD (f_bit10_rd), opval);
d598 1
a620 1
    current_cpu->thumb_h_gr_t_set (FLD (f_rd), opval);
d623 1
a627 1
    current_cpu->hardware.h_zbit = opval;
d630 1
a633 1
    current_cpu->hardware.h_nbit = opval;
d636 1
a659 1
    current_cpu->thumb_h_gr_t_set (FLD (f_rd), opval);
d662 1
a666 1
    current_cpu->hardware.h_zbit = opval;
d669 1
a672 1
    current_cpu->hardware.h_nbit = opval;
d675 1
a702 1
    current_cpu->thumb_h_gr_t_set (FLD (f_rd), opval);
d705 1
a710 1
    current_cpu->hardware.h_zbit = opval;
d713 1
a716 1
    current_cpu->hardware.h_nbit = opval;
d719 1
a723 1
    current_cpu->hardware.h_cbit = opval;
d726 1
a753 1
    current_cpu->thumb_h_gr_t_set (FLD (f_rd), opval);
d756 1
a761 1
    current_cpu->hardware.h_zbit = opval;
d764 1
a767 1
    current_cpu->hardware.h_nbit = opval;
d770 1
a774 1
    current_cpu->hardware.h_cbit = opval;
d777 1
a804 1
    current_cpu->thumb_h_gr_t_set (FLD (f_rd), opval);
d807 1
a812 1
    current_cpu->hardware.h_zbit = opval;
d815 1
a818 1
    current_cpu->hardware.h_nbit = opval;
d821 1
a825 1
    current_cpu->hardware.h_cbit = opval;
d828 1
a855 1
    current_cpu->thumb_h_gr_t_set (FLD (f_rd), opval);
d858 1
a863 1
    current_cpu->hardware.h_zbit = opval;
d866 1
a869 1
    current_cpu->hardware.h_nbit = opval;
d872 1
a876 1
    current_cpu->hardware.h_cbit = opval;
d879 1
a908 1
    current_cpu->hardware.h_zbit = opval;
d911 1
a914 1
    current_cpu->hardware.h_nbit = opval;
d917 1
a921 1
    current_cpu->hardware.h_cbit = opval;
d924 1
a927 1
    current_cpu->hardware.h_vbit = opval;
d930 1
a934 1
    current_cpu->thumb_h_gr_t_set (FLD (f_rd), opval);
d937 1
a965 1
    current_cpu->hardware.h_zbit = opval;
d968 1
a971 1
    current_cpu->hardware.h_nbit = opval;
d974 1
d978 1
a978 2
    BI opval = NOTSI (SUBCFSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), current_cpu->thumb_h_gr_t_get (FLD (f_rs)), NOTBI (current_cpu->hardware.h_cbit)));
    current_cpu->hardware.h_cbit = opval;
d981 1
a984 1
    current_cpu->hardware.h_vbit = opval;
d987 1
a991 1
    current_cpu->thumb_h_gr_t_set (FLD (f_rd), opval);
d994 1
a1019 1
    current_cpu->hardware.h_zbit = opval;
d1022 1
a1025 1
    current_cpu->hardware.h_nbit = opval;
d1028 1
a1057 1
    current_cpu->hardware.h_zbit = opval;
d1060 1
a1063 1
    current_cpu->hardware.h_nbit = opval;
d1066 1
d1070 1
a1070 2
    BI opval = NOTSI (SUBCFSI (0, current_cpu->thumb_h_gr_t_get (FLD (f_rs)), 0));
    current_cpu->hardware.h_cbit = opval;
d1073 1
a1076 1
    current_cpu->hardware.h_vbit = opval;
d1079 1
a1083 1
    current_cpu->thumb_h_gr_t_set (FLD (f_rd), opval);
d1086 1
a1111 1
    current_cpu->hardware.h_zbit = opval;
d1114 1
a1117 1
    current_cpu->hardware.h_nbit = opval;
d1120 1
d1124 1
a1124 2
    BI opval = NOTSI (SUBCFSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), current_cpu->thumb_h_gr_t_get (FLD (f_rs)), 0));
    current_cpu->hardware.h_cbit = opval;
d1127 1
a1130 1
    current_cpu->hardware.h_vbit = opval;
d1133 1
a1158 1
    current_cpu->hardware.h_zbit = opval;
d1161 1
a1164 1
    current_cpu->hardware.h_nbit = opval;
d1167 1
a1171 1
    current_cpu->hardware.h_cbit = opval;
d1174 1
a1177 1
    current_cpu->hardware.h_vbit = opval;
d1180 1
a1202 1
    current_cpu->thumb_h_gr_t_set (FLD (f_rd), opval);
d1205 1
a1209 1
    current_cpu->hardware.h_zbit = opval;
d1212 1
a1215 1
    current_cpu->hardware.h_nbit = opval;
d1218 1
a1241 1
    current_cpu->thumb_h_gr_t_set (FLD (f_rd), opval);
d1244 1
a1248 1
    current_cpu->hardware.h_zbit = opval;
d1251 1
a1254 1
    current_cpu->hardware.h_nbit = opval;
d1257 1
a1280 1
    current_cpu->thumb_h_gr_t_set (FLD (f_rd), opval);
d1283 1
a1287 1
    current_cpu->hardware.h_zbit = opval;
d1290 1
a1293 1
    current_cpu->hardware.h_nbit = opval;
d1296 1
a1319 1
    current_cpu->thumb_h_gr_t_set (FLD (f_rd), opval);
d1322 1
a1326 1
    current_cpu->hardware.h_zbit = opval;
d1329 1
a1332 1
    current_cpu->hardware.h_nbit = opval;
d1335 1
a1357 1
    current_cpu->thumb_h_gr_t_set (FLD (f_rd), opval);
d1360 1
a1381 1
    current_cpu->branch (opval, npc, status);
d1384 1
a1388 1
    current_cpu->thumb_h_hiregs_set (FLD (f_rd), opval);
d1391 1
a1413 1
    current_cpu->branch (opval, npc, status);
d1416 1
a1420 1
    current_cpu->thumb_h_hiregs_set (FLD (f_rd), opval);
d1423 1
a1448 1
    current_cpu->hardware.h_zbit = opval;
d1451 1
a1454 1
    current_cpu->hardware.h_nbit = opval;
d1457 1
d1461 1
a1461 2
    BI opval = NOTSI (SUBCFSI (current_cpu->thumb_h_gr_t_get (FLD (f_rd)), current_cpu->thumb_h_hiregs_get (FLD (f_rs)), 0));
    current_cpu->hardware.h_cbit = opval;
d1464 1
a1467 1
    current_cpu->hardware.h_vbit = opval;
d1470 1
a1495 1
    current_cpu->hardware.h_zbit = opval;
d1498 1
a1501 1
    current_cpu->hardware.h_nbit = opval;
d1504 1
d1508 1
a1508 2
    BI opval = NOTSI (SUBCFSI (current_cpu->thumb_h_hiregs_get (FLD (f_rd)), current_cpu->thumb_h_gr_t_get (FLD (f_rs)), 0));
    current_cpu->hardware.h_cbit = opval;
d1511 1
a1514 1
    current_cpu->hardware.h_vbit = opval;
d1517 1
a1542 1
    current_cpu->hardware.h_zbit = opval;
d1545 1
a1548 1
    current_cpu->hardware.h_nbit = opval;
d1551 1
d1555 1
a1555 2
    BI opval = NOTSI (SUBCFSI (current_cpu->thumb_h_hiregs_get (FLD (f_rd)), current_cpu->thumb_h_hiregs_get (FLD (f_rs)), 0));
    current_cpu->hardware.h_cbit = opval;
d1558 1
a1561 1
    current_cpu->hardware.h_vbit = opval;
d1564 1
a1585 1
    current_cpu->thumb_h_gr_t_set (FLD (f_rd), opval);
d1588 1
a1609 1
    current_cpu->branch (opval, npc, status);
d1612 1
a1616 1
    current_cpu->thumb_h_hiregs_set (FLD (f_rd), opval);
d1619 1
a1641 1
    current_cpu->branch (opval, npc, status);
d1644 1
a1648 1
    current_cpu->thumb_h_hiregs_set (FLD (f_rd), opval);
d1651 1
a1673 1
    current_cpu->branch (opval, npc, status);
d1676 1
a1680 1
    current_cpu->h_tbit_set (opval);
d1683 1
a1706 1
    current_cpu->branch (opval, npc, status);
d1709 1
a1713 1
    current_cpu->h_tbit_set (opval);
d1716 1
a1738 1
    current_cpu->thumb_h_gr_t_set (FLD (f_bit10_rd), opval);
d1741 1
a1761 1
    current_cpu->SETMEMSI (pc, ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_rb)), current_cpu->thumb_h_gr_t_get (FLD (f_ro))), opval);
d1764 1
a1784 1
    current_cpu->SETMEMQI (pc, ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_rb)), current_cpu->thumb_h_gr_t_get (FLD (f_ro))), opval);
d1787 1
a1807 1
    current_cpu->thumb_h_gr_t_set (FLD (f_rd), opval);
d1810 1
a1830 1
    current_cpu->thumb_h_gr_t_set (FLD (f_rd), opval);
d1833 1
a1853 1
    current_cpu->SETMEMHI (pc, ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_rb)), current_cpu->thumb_h_gr_t_get (FLD (f_ro))), opval);
d1856 1
a1876 1
    current_cpu->thumb_h_gr_t_set (FLD (f_rd), opval);
d1879 1
a1899 1
    current_cpu->thumb_h_gr_t_set (FLD (f_rd), opval);
d1902 1
a1922 1
    current_cpu->thumb_h_gr_t_set (FLD (f_rd), opval);
d1925 1
a1945 1
    current_cpu->SETMEMSI (pc, ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_rb)), FLD (f_offset5_7)), opval);
d1948 1
a1968 1
    current_cpu->thumb_h_gr_t_set (FLD (f_rd), opval);
d1971 1
a1991 1
    current_cpu->SETMEMQI (pc, ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_rb)), FLD (f_offset5)), opval);
d1994 1
a2014 1
    current_cpu->thumb_h_gr_t_set (FLD (f_rd), opval);
d2017 1
a2037 1
    current_cpu->SETMEMHI (pc, ADDSI (current_cpu->thumb_h_gr_t_get (FLD (f_rb)), FLD (f_offset5_6)), opval);
d2040 1
a2060 1
    current_cpu->thumb_h_gr_t_set (FLD (f_rd), opval);
d2063 1
a2083 1
    current_cpu->SETMEMSI (pc, ADDSI (current_cpu->thumb_h_sp_t_get (), FLD (f_word8)), opval);
d2086 1
a2106 1
    current_cpu->thumb_h_gr_t_set (FLD (f_bit10_rd), opval);
d2109 1
a2129 1
    current_cpu->thumb_h_gr_t_set (FLD (f_bit10_rd), opval);
d2132 1
a2152 1
    current_cpu->thumb_h_gr_t_set (FLD (f_bit10_rd), opval);
d2155 1
a2175 1
    current_cpu->thumb_h_sp_t_set (opval);
d2178 1
a2198 1
    current_cpu->thumb_h_sp_t_set (opval);
d2201 1
a2224 1
    current_cpu->thumb_h_sp_t_set (opval);
d2227 1
a2230 1
    current_cpu->SETMEMSI (pc, current_cpu->thumb_h_sp_t_get (), opval);
d2233 1
a2240 1
    current_cpu->thumb_h_sp_t_set (opval);
d2243 1
a2246 1
    current_cpu->SETMEMSI (pc, current_cpu->thumb_h_sp_t_get (), opval);
d2249 1
a2256 1
    current_cpu->thumb_h_sp_t_set (opval);
d2259 1
a2262 1
    current_cpu->SETMEMSI (pc, current_cpu->thumb_h_sp_t_get (), opval);
d2265 1
a2272 1
    current_cpu->thumb_h_sp_t_set (opval);
d2275 1
a2278 1
    current_cpu->SETMEMSI (pc, current_cpu->thumb_h_sp_t_get (), opval);
d2281 1
a2288 1
    current_cpu->thumb_h_sp_t_set (opval);
d2291 1
a2294 1
    current_cpu->SETMEMSI (pc, current_cpu->thumb_h_sp_t_get (), opval);
d2297 1
a2304 1
    current_cpu->thumb_h_sp_t_set (opval);
d2307 1
a2310 1
    current_cpu->SETMEMSI (pc, current_cpu->thumb_h_sp_t_get (), opval);
d2313 1
a2320 1
    current_cpu->thumb_h_sp_t_set (opval);
d2323 1
a2326 1
    current_cpu->SETMEMSI (pc, current_cpu->thumb_h_sp_t_get (), opval);
d2329 1
a2336 1
    current_cpu->thumb_h_sp_t_set (opval);
d2339 1
a2342 1
    current_cpu->SETMEMSI (pc, current_cpu->thumb_h_sp_t_get (), opval);
d2345 1
a2369 1
    current_cpu->thumb_h_sp_t_set (opval);
d2372 1
a2375 1
    current_cpu->SETMEMSI (pc, current_cpu->thumb_h_sp_t_get (), opval);
d2378 1
a2383 1
    current_cpu->thumb_h_sp_t_set (opval);
d2386 1
a2389 1
    current_cpu->SETMEMSI (pc, current_cpu->thumb_h_sp_t_get (), opval);
d2392 1
a2399 1
    current_cpu->thumb_h_sp_t_set (opval);
d2402 1
a2405 1
    current_cpu->SETMEMSI (pc, current_cpu->thumb_h_sp_t_get (), opval);
d2408 1
a2415 1
    current_cpu->thumb_h_sp_t_set (opval);
d2418 1
a2421 1
    current_cpu->SETMEMSI (pc, current_cpu->thumb_h_sp_t_get (), opval);
d2424 1
a2431 1
    current_cpu->thumb_h_sp_t_set (opval);
d2434 1
a2437 1
    current_cpu->SETMEMSI (pc, current_cpu->thumb_h_sp_t_get (), opval);
d2440 1
a2447 1
    current_cpu->thumb_h_sp_t_set (opval);
d2450 1
a2453 1
    current_cpu->SETMEMSI (pc, current_cpu->thumb_h_sp_t_get (), opval);
d2456 1
a2463 1
    current_cpu->thumb_h_sp_t_set (opval);
d2466 1
a2469 1
    current_cpu->SETMEMSI (pc, current_cpu->thumb_h_sp_t_get (), opval);
d2472 1
a2479 1
    current_cpu->thumb_h_sp_t_set (opval);
d2482 1
a2485 1
    current_cpu->SETMEMSI (pc, current_cpu->thumb_h_sp_t_get (), opval);
d2488 1
a2495 1
    current_cpu->thumb_h_sp_t_set (opval);
d2498 1
a2501 1
    current_cpu->SETMEMSI (pc, current_cpu->thumb_h_sp_t_get (), opval);
d2504 1
a2530 1
    current_cpu->thumb_h_gr_t_set (((UINT) 0), opval);
d2533 1
a2536 1
    current_cpu->thumb_h_sp_t_set (opval);
d2539 1
a2546 1
    current_cpu->thumb_h_gr_t_set (((UINT) 1), opval);
d2549 1
a2552 1
    current_cpu->thumb_h_sp_t_set (opval);
d2555 1
a2562 1
    current_cpu->thumb_h_gr_t_set (((UINT) 2), opval);
d2565 1
a2568 1
    current_cpu->thumb_h_sp_t_set (opval);
d2571 1
a2578 1
    current_cpu->thumb_h_gr_t_set (((UINT) 3), opval);
d2581 1
a2584 1
    current_cpu->thumb_h_sp_t_set (opval);
d2587 1
a2594 1
    current_cpu->thumb_h_gr_t_set (((UINT) 4), opval);
d2597 1
a2600 1
    current_cpu->thumb_h_sp_t_set (opval);
d2603 1
a2610 1
    current_cpu->thumb_h_gr_t_set (((UINT) 5), opval);
d2613 1
a2616 1
    current_cpu->thumb_h_sp_t_set (opval);
d2619 1
a2626 1
    current_cpu->thumb_h_gr_t_set (((UINT) 6), opval);
d2629 1
a2632 1
    current_cpu->thumb_h_sp_t_set (opval);
d2635 1
a2642 1
    current_cpu->thumb_h_gr_t_set (((UINT) 7), opval);
d2645 1
a2648 1
    current_cpu->thumb_h_sp_t_set (opval);
d2651 1
a2677 1
    current_cpu->thumb_h_gr_t_set (((UINT) 0), opval);
d2680 1
a2683 1
    current_cpu->thumb_h_sp_t_set (opval);
d2686 1
a2693 1
    current_cpu->thumb_h_gr_t_set (((UINT) 1), opval);
d2696 1
a2699 1
    current_cpu->thumb_h_sp_t_set (opval);
d2702 1
a2709 1
    current_cpu->thumb_h_gr_t_set (((UINT) 2), opval);
d2712 1
a2715 1
    current_cpu->thumb_h_sp_t_set (opval);
d2718 1
a2725 1
    current_cpu->thumb_h_gr_t_set (((UINT) 3), opval);
d2728 1
a2731 1
    current_cpu->thumb_h_sp_t_set (opval);
d2734 1
a2741 1
    current_cpu->thumb_h_gr_t_set (((UINT) 4), opval);
d2744 1
a2747 1
    current_cpu->thumb_h_sp_t_set (opval);
d2750 1
a2757 1
    current_cpu->thumb_h_gr_t_set (((UINT) 5), opval);
d2760 1
a2763 1
    current_cpu->thumb_h_sp_t_set (opval);
d2766 1
a2773 1
    current_cpu->thumb_h_gr_t_set (((UINT) 6), opval);
d2776 1
a2779 1
    current_cpu->thumb_h_sp_t_set (opval);
d2782 1
a2789 1
    current_cpu->thumb_h_gr_t_set (((UINT) 7), opval);
d2792 1
a2795 1
    current_cpu->thumb_h_sp_t_set (opval);
d2798 1
a2803 1
    current_cpu->branch (opval, npc, status);
d2806 1
a2809 1
    current_cpu->thumb_h_sp_t_set (opval);
d2812 1
a2836 1
    current_cpu->SETMEMSI (pc, current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb)), opval);
d2839 1
a2842 1
    current_cpu->thumb_h_gr_t_set (FLD (f_bit10_rb), opval);
d2845 1
a2852 1
    current_cpu->SETMEMSI (pc, current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb)), opval);
d2855 1
a2858 1
    current_cpu->thumb_h_gr_t_set (FLD (f_bit10_rb), opval);
d2861 1
a2868 1
    current_cpu->SETMEMSI (pc, current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb)), opval);
d2871 1
a2874 1
    current_cpu->thumb_h_gr_t_set (FLD (f_bit10_rb), opval);
d2877 1
a2884 1
    current_cpu->SETMEMSI (pc, current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb)), opval);
d2887 1
a2890 1
    current_cpu->thumb_h_gr_t_set (FLD (f_bit10_rb), opval);
d2893 1
a2900 1
    current_cpu->SETMEMSI (pc, current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb)), opval);
d2903 1
a2906 1
    current_cpu->thumb_h_gr_t_set (FLD (f_bit10_rb), opval);
d2909 1
a2916 1
    current_cpu->SETMEMSI (pc, current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb)), opval);
d2919 1
a2922 1
    current_cpu->thumb_h_gr_t_set (FLD (f_bit10_rb), opval);
d2925 1
a2932 1
    current_cpu->SETMEMSI (pc, current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb)), opval);
d2935 1
a2938 1
    current_cpu->thumb_h_gr_t_set (FLD (f_bit10_rb), opval);
d2941 1
a2948 1
    current_cpu->SETMEMSI (pc, current_cpu->thumb_h_gr_t_get (FLD (f_bit10_rb)), opval);
d2951 1
a2954 1
    current_cpu->thumb_h_gr_t_set (FLD (f_bit10_rb), opval);
d2957 1
a2983 1
    current_cpu->thumb_h_gr_t_set (((UINT) 0), opval);
d2986 1
a2989 1
    current_cpu->thumb_h_gr_t_set (FLD (f_bit10_rb), opval);
d2992 1
a2999 1
    current_cpu->thumb_h_gr_t_set (((UINT) 1), opval);
d3002 1
a3005 1
    current_cpu->thumb_h_gr_t_set (FLD (f_bit10_rb), opval);
d3008 1
a3015 1
    current_cpu->thumb_h_gr_t_set (((UINT) 2), opval);
d3018 1
a3021 1
    current_cpu->thumb_h_gr_t_set (FLD (f_bit10_rb), opval);
d3024 1
a3031 1
    current_cpu->thumb_h_gr_t_set (((UINT) 3), opval);
d3034 1
a3037 1
    current_cpu->thumb_h_gr_t_set (FLD (f_bit10_rb), opval);
d3040 1
a3047 1
    current_cpu->thumb_h_gr_t_set (((UINT) 4), opval);
d3050 1
a3053 1
    current_cpu->thumb_h_gr_t_set (FLD (f_bit10_rb), opval);
d3056 1
a3063 1
    current_cpu->thumb_h_gr_t_set (((UINT) 5), opval);
d3066 1
a3069 1
    current_cpu->thumb_h_gr_t_set (FLD (f_bit10_rb), opval);
d3072 1
a3079 1
    current_cpu->thumb_h_gr_t_set (((UINT) 6), opval);
d3082 1
a3085 1
    current_cpu->thumb_h_gr_t_set (FLD (f_bit10_rb), opval);
d3088 1
a3095 1
    current_cpu->thumb_h_gr_t_set (((UINT) 7), opval);
d3098 1
a3101 1
    current_cpu->thumb_h_gr_t_set (FLD (f_bit10_rb), opval);
d3104 1
a3128 1
    current_cpu->branch (opval, npc, status);
d3131 1
a3153 1
    current_cpu->branch (opval, npc, status);
d3156 1
a3178 1
    current_cpu->branch (opval, npc, status);
d3181 1
a3203 1
    current_cpu->branch (opval, npc, status);
d3206 1
a3228 1
    current_cpu->branch (opval, npc, status);
d3231 1
a3253 1
    current_cpu->branch (opval, npc, status);
d3256 1
a3278 1
    current_cpu->branch (opval, npc, status);
d3281 1
a3303 1
    current_cpu->branch (opval, npc, status);
d3306 1
a3328 1
    current_cpu->branch (opval, npc, status);
d3331 1
a3353 1
    current_cpu->branch (opval, npc, status);
d3356 1
a3378 1
    current_cpu->branch (opval, npc, status);
d3381 1
a3403 1
    current_cpu->branch (opval, npc, status);
d3406 1
a3428 1
    current_cpu->branch (opval, npc, status);
d3431 1
a3453 1
    current_cpu->branch (opval, npc, status);
d3456 1
a3477 1
    current_cpu->branch (opval, npc, status);
d3480 1
a3500 1
    current_cpu->branch (opval, npc, status);
d3503 1
a3523 1
    current_cpu->thumb_h_lr_t_set (opval);
d3526 1
a3549 1
    current_cpu->branch (opval, npc, status);
d3552 1
a3555 1
    current_cpu->thumb_h_lr_t_set (opval);
d3558 1
@


1.6
log
@2002-09-07  Frank Ch. Eigler  <fche@@redhat.com>

        * arm-*, thumb-*: Regenerated files with Robert Cragie's new
        cgen instructions.
	* arm-defs.h: Removed.
	* arm7.h: Don't include arm-defs.h.
	* Makefile.am: Stop arm-defs.h generation.
	* Makefile.in: Regenerated.
@
text
@d5 1
a5 1
Copyright (C) 2000, 2001, 2002 Red Hat, Inc.
d13 3
a18 1
using namespace thumb; // FIXME: namespace organization still wip
@


1.5
log
@* arm7t missing instructions

[cgen]
2002-09-07  Frank Ch. Eigler  <fche@@redhat.com>

	From Robert Cragie <rcc@@jennic.com>:
	* cpu/arm7.cpu (ldm*-sw*, stm*-sw*): New instructions.

[sid]
2002-09-07  Frank Ch. Eigler  <fche@@redhat.com>

	* arm-*, thumb-*: Regenerated files with Robert Cragie's new
	cgen instructions.
@
text
@d16 1
@


1.4
log
@* branch probability hinting

[cgen/ChangeLog]
2001-03-01  Frank Ch. Eigler  <fche@@redhat.com>

	* sid.cpu (-op-gen-set-trace[-parallel], -create-virtual-insns!):
	Emit LIKELY/UNLIKELY branch probability hints.
	* sid-decode.cpu (-gen-record-args): Ditto.

[sid/include/ChangeLog]
2001-03-01  Frank Ch. Eigler  <fche@@redhat.com>

	* sidconfig.h (LIKELY, UNLIKELY): New conditional cover macros
	for gcc's __builtin_expect branch probability hinting function.
	* sidbusutil.h (passthrough_bus, mux_password_bus, harvard_bus):
	Add some branch probability hints.
	* sidcpuutil.h (step_pin_handler, stop_after_insns_p,
	{read,write}_{insn,data}_memory): Ditto.
	* sidpinutil.h (callback_pin::driven): Remove unnecessary assert
	from critical path.

[eg. sid/component/mapper/ChangeLog]
2001-03-01  Frank Ch. Eigler  <fche@@redhat.com>

	* compMapper.cxx ({read,write}_strideoffset_any): Added b.p. hints.
	(write_any, read_any, locate): Ditto.

[sid/component/cgen-cpu/ChangeLog]
2001-03-01  Frank Ch. Eigler  <fche@@redhat.com>

	* cgen-engine.h (set_pbb_engine, chain, get_next_vpc, pbb_find,
	pbb_find_or_alloc, pbb_before, pbb_after): Add branch probability
	hints.

[eg. sid/component/cgen-cpu/arm7t/ChangeLog]
2001-03-01  Frank Ch. Eigler  <fche@@redhat.com>

	* arm-decode.cxx, -sem.cxx, -semsw.cxx: Regenerated w/ b.p. hints.
	* thumb-decode.cxx, -sem.cxx, -semsw.cxx: Ditto.
@
text
@d5 1
a5 1
Copyright (C) 2000 Red Hat, Inc.
d7 1
a7 1
This file is part of the Cygnus Simulators.
@


1.3
log
@[arm7t/ChangeLog]
2001-01-26  Frank Ch. Eigler  <fche@@redhat.com>

	* arm-decode.h, -sem.cxx: Regenerated with more tracing improvements,
	* thumb-decode.h, -sem.cxx: Ditto.

[m32r/ChangeLog]
2001-01-26  Frank Ch. Eigler  <fche@@redhat.com>

	* m32r-decode.h, -sem.cxx: Regenerated with more tracing improvements.
@
text
@d59 1
a59 1
    if (current_cpu->trace_result_p)
d67 1
a67 1
    if (current_cpu->trace_result_p)
d73 1
a73 1
    if (current_cpu->trace_result_p)
d80 1
a80 1
    if (current_cpu->trace_result_p)
d108 1
a108 1
    if (current_cpu->trace_result_p)
d116 1
a116 1
    if (current_cpu->trace_result_p)
d122 1
a122 1
    if (current_cpu->trace_result_p)
d129 1
a129 1
    if (current_cpu->trace_result_p)
d157 1
a157 1
    if (current_cpu->trace_result_p)
d165 1
a165 1
    if (current_cpu->trace_result_p)
d171 1
a171 1
    if (current_cpu->trace_result_p)
d178 1
a178 1
    if (current_cpu->trace_result_p)
d208 1
a208 1
    if (current_cpu->trace_result_p)
d214 1
a214 1
    if (current_cpu->trace_result_p)
d221 1
a221 1
    if (current_cpu->trace_result_p)
d227 1
a227 1
    if (current_cpu->trace_result_p)
d234 1
a234 1
    if (current_cpu->trace_result_p)
d263 1
a263 1
    if (current_cpu->trace_result_p)
d269 1
a269 1
    if (current_cpu->trace_result_p)
d276 1
a276 1
    if (current_cpu->trace_result_p)
d282 1
a282 1
    if (current_cpu->trace_result_p)
d289 1
a289 1
    if (current_cpu->trace_result_p)
d318 1
a318 1
    if (current_cpu->trace_result_p)
d324 1
a324 1
    if (current_cpu->trace_result_p)
d331 1
a331 1
    if (current_cpu->trace_result_p)
d337 1
a337 1
    if (current_cpu->trace_result_p)
d344 1
a344 1
    if (current_cpu->trace_result_p)
d373 1
a373 1
    if (current_cpu->trace_result_p)
d379 1
a379 1
    if (current_cpu->trace_result_p)
d386 1
a386 1
    if (current_cpu->trace_result_p)
d392 1
a392 1
    if (current_cpu->trace_result_p)
d399 1
a399 1
    if (current_cpu->trace_result_p)
d424 1
a424 1
    if (current_cpu->trace_result_p)
d431 1
a431 1
    if (current_cpu->trace_result_p)
d437 1
a437 1
    if (current_cpu->trace_result_p)
d466 1
a466 1
    if (current_cpu->trace_result_p)
d472 1
a472 1
    if (current_cpu->trace_result_p)
d479 1
a479 1
    if (current_cpu->trace_result_p)
d485 1
a485 1
    if (current_cpu->trace_result_p)
d514 1
a514 1
    if (current_cpu->trace_result_p)
d520 1
a520 1
    if (current_cpu->trace_result_p)
d527 1
a527 1
    if (current_cpu->trace_result_p)
d533 1
a533 1
    if (current_cpu->trace_result_p)
d540 1
a540 1
    if (current_cpu->trace_result_p)
d569 1
a569 1
    if (current_cpu->trace_result_p)
d575 1
a575 1
    if (current_cpu->trace_result_p)
d582 1
a582 1
    if (current_cpu->trace_result_p)
d588 1
a588 1
    if (current_cpu->trace_result_p)
d595 1
a595 1
    if (current_cpu->trace_result_p)
d620 1
a620 1
    if (current_cpu->trace_result_p)
d627 1
a627 1
    if (current_cpu->trace_result_p)
d633 1
a633 1
    if (current_cpu->trace_result_p)
d659 1
a659 1
    if (current_cpu->trace_result_p)
d666 1
a666 1
    if (current_cpu->trace_result_p)
d672 1
a672 1
    if (current_cpu->trace_result_p)
d702 1
a702 1
    if (current_cpu->trace_result_p)
d710 1
a710 1
    if (current_cpu->trace_result_p)
d716 1
a716 1
    if (current_cpu->trace_result_p)
d723 1
a723 1
    if (current_cpu->trace_result_p)
d753 1
a753 1
    if (current_cpu->trace_result_p)
d761 1
a761 1
    if (current_cpu->trace_result_p)
d767 1
a767 1
    if (current_cpu->trace_result_p)
d774 1
a774 1
    if (current_cpu->trace_result_p)
d804 1
a804 1
    if (current_cpu->trace_result_p)
d812 1
a812 1
    if (current_cpu->trace_result_p)
d818 1
a818 1
    if (current_cpu->trace_result_p)
d825 1
a825 1
    if (current_cpu->trace_result_p)
d855 1
a855 1
    if (current_cpu->trace_result_p)
d863 1
a863 1
    if (current_cpu->trace_result_p)
d869 1
a869 1
    if (current_cpu->trace_result_p)
d876 1
a876 1
    if (current_cpu->trace_result_p)
d908 1
a908 1
    if (current_cpu->trace_result_p)
d914 1
a914 1
    if (current_cpu->trace_result_p)
d921 1
a921 1
    if (current_cpu->trace_result_p)
d927 1
a927 1
    if (current_cpu->trace_result_p)
d934 1
a934 1
    if (current_cpu->trace_result_p)
d965 1
a965 1
    if (current_cpu->trace_result_p)
d971 1
a971 1
    if (current_cpu->trace_result_p)
d978 1
a978 1
    if (current_cpu->trace_result_p)
d984 1
a984 1
    if (current_cpu->trace_result_p)
d991 1
a991 1
    if (current_cpu->trace_result_p)
d1019 1
a1019 1
    if (current_cpu->trace_result_p)
d1025 1
a1025 1
    if (current_cpu->trace_result_p)
d1057 1
a1057 1
    if (current_cpu->trace_result_p)
d1063 1
a1063 1
    if (current_cpu->trace_result_p)
d1070 1
a1070 1
    if (current_cpu->trace_result_p)
d1076 1
a1076 1
    if (current_cpu->trace_result_p)
d1083 1
a1083 1
    if (current_cpu->trace_result_p)
d1111 1
a1111 1
    if (current_cpu->trace_result_p)
d1117 1
a1117 1
    if (current_cpu->trace_result_p)
d1124 1
a1124 1
    if (current_cpu->trace_result_p)
d1130 1
a1130 1
    if (current_cpu->trace_result_p)
d1158 1
a1158 1
    if (current_cpu->trace_result_p)
d1164 1
a1164 1
    if (current_cpu->trace_result_p)
d1171 1
a1171 1
    if (current_cpu->trace_result_p)
d1177 1
a1177 1
    if (current_cpu->trace_result_p)
d1202 1
a1202 1
    if (current_cpu->trace_result_p)
d1209 1
a1209 1
    if (current_cpu->trace_result_p)
d1215 1
a1215 1
    if (current_cpu->trace_result_p)
d1241 1
a1241 1
    if (current_cpu->trace_result_p)
d1248 1
a1248 1
    if (current_cpu->trace_result_p)
d1254 1
a1254 1
    if (current_cpu->trace_result_p)
d1280 1
a1280 1
    if (current_cpu->trace_result_p)
d1287 1
a1287 1
    if (current_cpu->trace_result_p)
d1293 1
a1293 1
    if (current_cpu->trace_result_p)
d1319 1
a1319 1
    if (current_cpu->trace_result_p)
d1326 1
a1326 1
    if (current_cpu->trace_result_p)
d1332 1
a1332 1
    if (current_cpu->trace_result_p)
d1357 1
a1357 1
    if (current_cpu->trace_result_p)
d1381 1
a1381 1
    if (current_cpu->trace_result_p)
d1388 1
a1388 1
    if (current_cpu->trace_result_p)
d1413 1
a1413 1
    if (current_cpu->trace_result_p)
d1420 1
a1420 1
    if (current_cpu->trace_result_p)
d1448 1
a1448 1
    if (current_cpu->trace_result_p)
d1454 1
a1454 1
    if (current_cpu->trace_result_p)
d1461 1
a1461 1
    if (current_cpu->trace_result_p)
d1467 1
a1467 1
    if (current_cpu->trace_result_p)
d1495 1
a1495 1
    if (current_cpu->trace_result_p)
d1501 1
a1501 1
    if (current_cpu->trace_result_p)
d1508 1
a1508 1
    if (current_cpu->trace_result_p)
d1514 1
a1514 1
    if (current_cpu->trace_result_p)
d1542 1
a1542 1
    if (current_cpu->trace_result_p)
d1548 1
a1548 1
    if (current_cpu->trace_result_p)
d1555 1
a1555 1
    if (current_cpu->trace_result_p)
d1561 1
a1561 1
    if (current_cpu->trace_result_p)
d1585 1
a1585 1
    if (current_cpu->trace_result_p)
d1609 1
a1609 1
    if (current_cpu->trace_result_p)
d1616 1
a1616 1
    if (current_cpu->trace_result_p)
d1641 1
a1641 1
    if (current_cpu->trace_result_p)
d1648 1
a1648 1
    if (current_cpu->trace_result_p)
d1673 1
a1673 1
    if (current_cpu->trace_result_p)
d1680 1
a1680 1
    if (current_cpu->trace_result_p)
d1706 1
a1706 1
    if (current_cpu->trace_result_p)
d1713 1
a1713 1
    if (current_cpu->trace_result_p)
d1738 1
a1738 1
    if (current_cpu->trace_result_p)
d1761 1
a1761 1
    if (current_cpu->trace_result_p)
d1784 1
a1784 1
    if (current_cpu->trace_result_p)
d1807 1
a1807 1
    if (current_cpu->trace_result_p)
d1830 1
a1830 1
    if (current_cpu->trace_result_p)
d1853 1
a1853 1
    if (current_cpu->trace_result_p)
d1876 1
a1876 1
    if (current_cpu->trace_result_p)
d1899 1
a1899 1
    if (current_cpu->trace_result_p)
d1922 1
a1922 1
    if (current_cpu->trace_result_p)
d1945 1
a1945 1
    if (current_cpu->trace_result_p)
d1968 1
a1968 1
    if (current_cpu->trace_result_p)
d1991 1
a1991 1
    if (current_cpu->trace_result_p)
d2014 1
a2014 1
    if (current_cpu->trace_result_p)
d2037 1
a2037 1
    if (current_cpu->trace_result_p)
d2060 1
a2060 1
    if (current_cpu->trace_result_p)
d2083 1
a2083 1
    if (current_cpu->trace_result_p)
d2106 1
a2106 1
    if (current_cpu->trace_result_p)
d2129 1
a2129 1
    if (current_cpu->trace_result_p)
d2152 1
a2152 1
    if (current_cpu->trace_result_p)
d2175 1
a2175 1
    if (current_cpu->trace_result_p)
d2198 1
a2198 1
    if (current_cpu->trace_result_p)
d2224 1
a2224 1
    if (current_cpu->trace_result_p)
d2230 1
a2230 1
    if (current_cpu->trace_result_p)
d2240 1
a2240 1
    if (current_cpu->trace_result_p)
d2246 1
a2246 1
    if (current_cpu->trace_result_p)
d2256 1
a2256 1
    if (current_cpu->trace_result_p)
d2262 1
a2262 1
    if (current_cpu->trace_result_p)
d2272 1
a2272 1
    if (current_cpu->trace_result_p)
d2278 1
a2278 1
    if (current_cpu->trace_result_p)
d2288 1
a2288 1
    if (current_cpu->trace_result_p)
d2294 1
a2294 1
    if (current_cpu->trace_result_p)
d2304 1
a2304 1
    if (current_cpu->trace_result_p)
d2310 1
a2310 1
    if (current_cpu->trace_result_p)
d2320 1
a2320 1
    if (current_cpu->trace_result_p)
d2326 1
a2326 1
    if (current_cpu->trace_result_p)
d2336 1
a2336 1
    if (current_cpu->trace_result_p)
d2342 1
a2342 1
    if (current_cpu->trace_result_p)
d2369 1
a2369 1
    if (current_cpu->trace_result_p)
d2375 1
a2375 1
    if (current_cpu->trace_result_p)
d2383 1
a2383 1
    if (current_cpu->trace_result_p)
d2389 1
a2389 1
    if (current_cpu->trace_result_p)
d2399 1
a2399 1
    if (current_cpu->trace_result_p)
d2405 1
a2405 1
    if (current_cpu->trace_result_p)
d2415 1
a2415 1
    if (current_cpu->trace_result_p)
d2421 1
a2421 1
    if (current_cpu->trace_result_p)
d2431 1
a2431 1
    if (current_cpu->trace_result_p)
d2437 1
a2437 1
    if (current_cpu->trace_result_p)
d2447 1
a2447 1
    if (current_cpu->trace_result_p)
d2453 1
a2453 1
    if (current_cpu->trace_result_p)
d2463 1
a2463 1
    if (current_cpu->trace_result_p)
d2469 1
a2469 1
    if (current_cpu->trace_result_p)
d2479 1
a2479 1
    if (current_cpu->trace_result_p)
d2485 1
a2485 1
    if (current_cpu->trace_result_p)
d2495 1
a2495 1
    if (current_cpu->trace_result_p)
d2501 1
a2501 1
    if (current_cpu->trace_result_p)
d2530 1
a2530 1
    if (current_cpu->trace_result_p)
d2536 1
a2536 1
    if (current_cpu->trace_result_p)
d2546 1
a2546 1
    if (current_cpu->trace_result_p)
d2552 1
a2552 1
    if (current_cpu->trace_result_p)
d2562 1
a2562 1
    if (current_cpu->trace_result_p)
d2568 1
a2568 1
    if (current_cpu->trace_result_p)
d2578 1
a2578 1
    if (current_cpu->trace_result_p)
d2584 1
a2584 1
    if (current_cpu->trace_result_p)
d2594 1
a2594 1
    if (current_cpu->trace_result_p)
d2600 1
a2600 1
    if (current_cpu->trace_result_p)
d2610 1
a2610 1
    if (current_cpu->trace_result_p)
d2616 1
a2616 1
    if (current_cpu->trace_result_p)
d2626 1
a2626 1
    if (current_cpu->trace_result_p)
d2632 1
a2632 1
    if (current_cpu->trace_result_p)
d2642 1
a2642 1
    if (current_cpu->trace_result_p)
d2648 1
a2648 1
    if (current_cpu->trace_result_p)
d2677 1
a2677 1
    if (current_cpu->trace_result_p)
d2683 1
a2683 1
    if (current_cpu->trace_result_p)
d2693 1
a2693 1
    if (current_cpu->trace_result_p)
d2699 1
a2699 1
    if (current_cpu->trace_result_p)
d2709 1
a2709 1
    if (current_cpu->trace_result_p)
d2715 1
a2715 1
    if (current_cpu->trace_result_p)
d2725 1
a2725 1
    if (current_cpu->trace_result_p)
d2731 1
a2731 1
    if (current_cpu->trace_result_p)
d2741 1
a2741 1
    if (current_cpu->trace_result_p)
d2747 1
a2747 1
    if (current_cpu->trace_result_p)
d2757 1
a2757 1
    if (current_cpu->trace_result_p)
d2763 1
a2763 1
    if (current_cpu->trace_result_p)
d2773 1
a2773 1
    if (current_cpu->trace_result_p)
d2779 1
a2779 1
    if (current_cpu->trace_result_p)
d2789 1
a2789 1
    if (current_cpu->trace_result_p)
d2795 1
a2795 1
    if (current_cpu->trace_result_p)
d2803 1
a2803 1
    if (current_cpu->trace_result_p)
d2809 1
a2809 1
    if (current_cpu->trace_result_p)
d2836 1
a2836 1
    if (current_cpu->trace_result_p)
d2842 1
a2842 1
    if (current_cpu->trace_result_p)
d2852 1
a2852 1
    if (current_cpu->trace_result_p)
d2858 1
a2858 1
    if (current_cpu->trace_result_p)
d2868 1
a2868 1
    if (current_cpu->trace_result_p)
d2874 1
a2874 1
    if (current_cpu->trace_result_p)
d2884 1
a2884 1
    if (current_cpu->trace_result_p)
d2890 1
a2890 1
    if (current_cpu->trace_result_p)
d2900 1
a2900 1
    if (current_cpu->trace_result_p)
d2906 1
a2906 1
    if (current_cpu->trace_result_p)
d2916 1
a2916 1
    if (current_cpu->trace_result_p)
d2922 1
a2922 1
    if (current_cpu->trace_result_p)
d2932 1
a2932 1
    if (current_cpu->trace_result_p)
d2938 1
a2938 1
    if (current_cpu->trace_result_p)
d2948 1
a2948 1
    if (current_cpu->trace_result_p)
d2954 1
a2954 1
    if (current_cpu->trace_result_p)
d2983 1
a2983 1
    if (current_cpu->trace_result_p)
d2989 1
a2989 1
    if (current_cpu->trace_result_p)
d2999 1
a2999 1
    if (current_cpu->trace_result_p)
d3005 1
a3005 1
    if (current_cpu->trace_result_p)
d3015 1
a3015 1
    if (current_cpu->trace_result_p)
d3021 1
a3021 1
    if (current_cpu->trace_result_p)
d3031 1
a3031 1
    if (current_cpu->trace_result_p)
d3037 1
a3037 1
    if (current_cpu->trace_result_p)
d3047 1
a3047 1
    if (current_cpu->trace_result_p)
d3053 1
a3053 1
    if (current_cpu->trace_result_p)
d3063 1
a3063 1
    if (current_cpu->trace_result_p)
d3069 1
a3069 1
    if (current_cpu->trace_result_p)
d3079 1
a3079 1
    if (current_cpu->trace_result_p)
d3085 1
a3085 1
    if (current_cpu->trace_result_p)
d3095 1
a3095 1
    if (current_cpu->trace_result_p)
d3101 1
a3101 1
    if (current_cpu->trace_result_p)
d3128 1
a3128 1
    if (current_cpu->trace_result_p)
d3153 1
a3153 1
    if (current_cpu->trace_result_p)
d3178 1
a3178 1
    if (current_cpu->trace_result_p)
d3203 1
a3203 1
    if (current_cpu->trace_result_p)
d3228 1
a3228 1
    if (current_cpu->trace_result_p)
d3253 1
a3253 1
    if (current_cpu->trace_result_p)
d3278 1
a3278 1
    if (current_cpu->trace_result_p)
d3303 1
a3303 1
    if (current_cpu->trace_result_p)
d3328 1
a3328 1
    if (current_cpu->trace_result_p)
d3353 1
a3353 1
    if (current_cpu->trace_result_p)
d3378 1
a3378 1
    if (current_cpu->trace_result_p)
d3403 1
a3403 1
    if (current_cpu->trace_result_p)
d3428 1
a3428 1
    if (current_cpu->trace_result_p)
d3453 1
a3453 1
    if (current_cpu->trace_result_p)
d3477 1
a3477 1
    if (current_cpu->trace_result_p)
d3500 1
a3500 1
    if (current_cpu->trace_result_p)
d3523 1
a3523 1
    if (current_cpu->trace_result_p)
d3549 1
a3549 1
    if (current_cpu->trace_result_p)
d3555 1
a3555 1
    if (current_cpu->trace_result_p)
@


1.2
log
@* regen after cgen trace improvements
@
text
@d60 1
a60 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d109 1
a109 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d158 1
a158 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d235 1
a235 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d290 1
a290 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d345 1
a345 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d400 1
a400 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d425 1
a425 1
      current_cpu->trace_stream << "bit10-rd" << '[' << FLD (f_bit10_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d541 1
a541 1
      current_cpu->trace_stream << "bit10-rd" << '[' << FLD (f_bit10_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d596 1
a596 1
      current_cpu->trace_stream << "bit10-rd" << '[' << FLD (f_bit10_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d621 1
a621 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d660 1
a660 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d703 1
a703 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d754 1
a754 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d805 1
a805 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d856 1
a856 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d935 1
a935 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d992 1
a992 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d1084 1
a1084 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d1203 1
a1203 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d1242 1
a1242 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d1281 1
a1281 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d1320 1
a1320 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d1358 1
a1358 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d1389 1
a1389 1
      current_cpu->trace_stream << "hd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d1421 1
a1421 1
      current_cpu->trace_stream << "hd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d1586 1
a1586 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d1617 1
a1617 1
      current_cpu->trace_stream << "hd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d1649 1
a1649 1
      current_cpu->trace_stream << "hd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d1739 1
a1739 1
      current_cpu->trace_stream << "bit10-rd" << '[' << FLD (f_bit10_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d1808 1
a1808 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d1831 1
a1831 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d1877 1
a1877 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d1900 1
a1900 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d1923 1
a1923 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d1969 1
a1969 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d2015 1
a2015 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d2061 1
a2061 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d2107 1
a2107 1
      current_cpu->trace_stream << "bit10-rd" << '[' << FLD (f_bit10_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d2130 1
a2130 1
      current_cpu->trace_stream << "bit10-rd" << '[' << FLD (f_bit10_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d2153 1
a2153 1
      current_cpu->trace_stream << "bit10-rd" << '[' << FLD (f_bit10_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d2176 1
a2176 1
      current_cpu->trace_stream << "sp" << ":=0x" << hex << opval << dec << "  ";
d2199 1
a2199 1
      current_cpu->trace_stream << "sp" << ":=0x" << hex << opval << dec << "  ";
d2225 1
a2225 1
      current_cpu->trace_stream << "sp" << ":=0x" << hex << opval << dec << "  ";
d2241 1
a2241 1
      current_cpu->trace_stream << "sp" << ":=0x" << hex << opval << dec << "  ";
d2257 1
a2257 1
      current_cpu->trace_stream << "sp" << ":=0x" << hex << opval << dec << "  ";
d2273 1
a2273 1
      current_cpu->trace_stream << "sp" << ":=0x" << hex << opval << dec << "  ";
d2289 1
a2289 1
      current_cpu->trace_stream << "sp" << ":=0x" << hex << opval << dec << "  ";
d2305 1
a2305 1
      current_cpu->trace_stream << "sp" << ":=0x" << hex << opval << dec << "  ";
d2321 1
a2321 1
      current_cpu->trace_stream << "sp" << ":=0x" << hex << opval << dec << "  ";
d2337 1
a2337 1
      current_cpu->trace_stream << "sp" << ":=0x" << hex << opval << dec << "  ";
d2370 1
a2370 1
      current_cpu->trace_stream << "sp" << ":=0x" << hex << opval << dec << "  ";
d2384 1
a2384 1
      current_cpu->trace_stream << "sp" << ":=0x" << hex << opval << dec << "  ";
d2400 1
a2400 1
      current_cpu->trace_stream << "sp" << ":=0x" << hex << opval << dec << "  ";
d2416 1
a2416 1
      current_cpu->trace_stream << "sp" << ":=0x" << hex << opval << dec << "  ";
d2432 1
a2432 1
      current_cpu->trace_stream << "sp" << ":=0x" << hex << opval << dec << "  ";
d2448 1
a2448 1
      current_cpu->trace_stream << "sp" << ":=0x" << hex << opval << dec << "  ";
d2464 1
a2464 1
      current_cpu->trace_stream << "sp" << ":=0x" << hex << opval << dec << "  ";
d2480 1
a2480 1
      current_cpu->trace_stream << "sp" << ":=0x" << hex << opval << dec << "  ";
d2496 1
a2496 1
      current_cpu->trace_stream << "sp" << ":=0x" << hex << opval << dec << "  ";
d2537 1
a2537 1
      current_cpu->trace_stream << "sp" << ":=0x" << hex << opval << dec << "  ";
d2553 1
a2553 1
      current_cpu->trace_stream << "sp" << ":=0x" << hex << opval << dec << "  ";
d2569 1
a2569 1
      current_cpu->trace_stream << "sp" << ":=0x" << hex << opval << dec << "  ";
d2585 1
a2585 1
      current_cpu->trace_stream << "sp" << ":=0x" << hex << opval << dec << "  ";
d2601 1
a2601 1
      current_cpu->trace_stream << "sp" << ":=0x" << hex << opval << dec << "  ";
d2617 1
a2617 1
      current_cpu->trace_stream << "sp" << ":=0x" << hex << opval << dec << "  ";
d2633 1
a2633 1
      current_cpu->trace_stream << "sp" << ":=0x" << hex << opval << dec << "  ";
d2649 1
a2649 1
      current_cpu->trace_stream << "sp" << ":=0x" << hex << opval << dec << "  ";
d2684 1
a2684 1
      current_cpu->trace_stream << "sp" << ":=0x" << hex << opval << dec << "  ";
d2700 1
a2700 1
      current_cpu->trace_stream << "sp" << ":=0x" << hex << opval << dec << "  ";
d2716 1
a2716 1
      current_cpu->trace_stream << "sp" << ":=0x" << hex << opval << dec << "  ";
d2732 1
a2732 1
      current_cpu->trace_stream << "sp" << ":=0x" << hex << opval << dec << "  ";
d2748 1
a2748 1
      current_cpu->trace_stream << "sp" << ":=0x" << hex << opval << dec << "  ";
d2764 1
a2764 1
      current_cpu->trace_stream << "sp" << ":=0x" << hex << opval << dec << "  ";
d2780 1
a2780 1
      current_cpu->trace_stream << "sp" << ":=0x" << hex << opval << dec << "  ";
d2796 1
a2796 1
      current_cpu->trace_stream << "sp" << ":=0x" << hex << opval << dec << "  ";
d2810 1
a2810 1
      current_cpu->trace_stream << "sp" << ":=0x" << hex << opval << dec << "  ";
d2843 1
a2843 1
      current_cpu->trace_stream << "bit10-rb" << '[' << FLD (f_bit10_rb) << ']' << ":=0x" << hex << opval << dec << "  ";
d2859 1
a2859 1
      current_cpu->trace_stream << "bit10-rb" << '[' << FLD (f_bit10_rb) << ']' << ":=0x" << hex << opval << dec << "  ";
d2875 1
a2875 1
      current_cpu->trace_stream << "bit10-rb" << '[' << FLD (f_bit10_rb) << ']' << ":=0x" << hex << opval << dec << "  ";
d2891 1
a2891 1
      current_cpu->trace_stream << "bit10-rb" << '[' << FLD (f_bit10_rb) << ']' << ":=0x" << hex << opval << dec << "  ";
d2907 1
a2907 1
      current_cpu->trace_stream << "bit10-rb" << '[' << FLD (f_bit10_rb) << ']' << ":=0x" << hex << opval << dec << "  ";
d2923 1
a2923 1
      current_cpu->trace_stream << "bit10-rb" << '[' << FLD (f_bit10_rb) << ']' << ":=0x" << hex << opval << dec << "  ";
d2939 1
a2939 1
      current_cpu->trace_stream << "bit10-rb" << '[' << FLD (f_bit10_rb) << ']' << ":=0x" << hex << opval << dec << "  ";
d2955 1
a2955 1
      current_cpu->trace_stream << "bit10-rb" << '[' << FLD (f_bit10_rb) << ']' << ":=0x" << hex << opval << dec << "  ";
d2990 1
a2990 1
      current_cpu->trace_stream << "bit10-rb" << '[' << FLD (f_bit10_rb) << ']' << ":=0x" << hex << opval << dec << "  ";
d3006 1
a3006 1
      current_cpu->trace_stream << "bit10-rb" << '[' << FLD (f_bit10_rb) << ']' << ":=0x" << hex << opval << dec << "  ";
d3022 1
a3022 1
      current_cpu->trace_stream << "bit10-rb" << '[' << FLD (f_bit10_rb) << ']' << ":=0x" << hex << opval << dec << "  ";
d3038 1
a3038 1
      current_cpu->trace_stream << "bit10-rb" << '[' << FLD (f_bit10_rb) << ']' << ":=0x" << hex << opval << dec << "  ";
d3054 1
a3054 1
      current_cpu->trace_stream << "bit10-rb" << '[' << FLD (f_bit10_rb) << ']' << ":=0x" << hex << opval << dec << "  ";
d3070 1
a3070 1
      current_cpu->trace_stream << "bit10-rb" << '[' << FLD (f_bit10_rb) << ']' << ":=0x" << hex << opval << dec << "  ";
d3086 1
a3086 1
      current_cpu->trace_stream << "bit10-rb" << '[' << FLD (f_bit10_rb) << ']' << ":=0x" << hex << opval << dec << "  ";
d3102 1
a3102 1
      current_cpu->trace_stream << "bit10-rb" << '[' << FLD (f_bit10_rb) << ']' << ":=0x" << hex << opval << dec << "  ";
d3524 1
a3524 1
      current_cpu->trace_stream << "lr" << ":=0x" << hex << opval << dec << "  ";
d3556 1
a3556 1
      current_cpu->trace_stream << "lr" << ":=0x" << hex << opval << dec << "  ";
@


1.1
log
@* public snapshot of sid simulator
@
text
@d2531 1
a2531 1
      current_cpu->trace_stream << "gr-t-0" << '[' << ((UINT) 0) << ']' << ":=0x" << hex << opval << dec << "  ";
d2547 1
a2547 1
      current_cpu->trace_stream << "gr-t-1" << '[' << ((UINT) 1) << ']' << ":=0x" << hex << opval << dec << "  ";
d2563 1
a2563 1
      current_cpu->trace_stream << "gr-t-2" << '[' << ((UINT) 2) << ']' << ":=0x" << hex << opval << dec << "  ";
d2579 1
a2579 1
      current_cpu->trace_stream << "gr-t-3" << '[' << ((UINT) 3) << ']' << ":=0x" << hex << opval << dec << "  ";
d2595 1
a2595 1
      current_cpu->trace_stream << "gr-t-4" << '[' << ((UINT) 4) << ']' << ":=0x" << hex << opval << dec << "  ";
d2611 1
a2611 1
      current_cpu->trace_stream << "gr-t-5" << '[' << ((UINT) 5) << ']' << ":=0x" << hex << opval << dec << "  ";
d2627 1
a2627 1
      current_cpu->trace_stream << "gr-t-6" << '[' << ((UINT) 6) << ']' << ":=0x" << hex << opval << dec << "  ";
d2643 1
a2643 1
      current_cpu->trace_stream << "gr-t-7" << '[' << ((UINT) 7) << ']' << ":=0x" << hex << opval << dec << "  ";
d2678 1
a2678 1
      current_cpu->trace_stream << "gr-t-0" << '[' << ((UINT) 0) << ']' << ":=0x" << hex << opval << dec << "  ";
d2694 1
a2694 1
      current_cpu->trace_stream << "gr-t-1" << '[' << ((UINT) 1) << ']' << ":=0x" << hex << opval << dec << "  ";
d2710 1
a2710 1
      current_cpu->trace_stream << "gr-t-2" << '[' << ((UINT) 2) << ']' << ":=0x" << hex << opval << dec << "  ";
d2726 1
a2726 1
      current_cpu->trace_stream << "gr-t-3" << '[' << ((UINT) 3) << ']' << ":=0x" << hex << opval << dec << "  ";
d2742 1
a2742 1
      current_cpu->trace_stream << "gr-t-4" << '[' << ((UINT) 4) << ']' << ":=0x" << hex << opval << dec << "  ";
d2758 1
a2758 1
      current_cpu->trace_stream << "gr-t-5" << '[' << ((UINT) 5) << ']' << ":=0x" << hex << opval << dec << "  ";
d2774 1
a2774 1
      current_cpu->trace_stream << "gr-t-6" << '[' << ((UINT) 6) << ']' << ":=0x" << hex << opval << dec << "  ";
d2790 1
a2790 1
      current_cpu->trace_stream << "gr-t-7" << '[' << ((UINT) 7) << ']' << ":=0x" << hex << opval << dec << "  ";
d2984 1
a2984 1
      current_cpu->trace_stream << "gr-t-0" << '[' << ((UINT) 0) << ']' << ":=0x" << hex << opval << dec << "  ";
d3000 1
a3000 1
      current_cpu->trace_stream << "gr-t-1" << '[' << ((UINT) 1) << ']' << ":=0x" << hex << opval << dec << "  ";
d3016 1
a3016 1
      current_cpu->trace_stream << "gr-t-2" << '[' << ((UINT) 2) << ']' << ":=0x" << hex << opval << dec << "  ";
d3032 1
a3032 1
      current_cpu->trace_stream << "gr-t-3" << '[' << ((UINT) 3) << ']' << ":=0x" << hex << opval << dec << "  ";
d3048 1
a3048 1
      current_cpu->trace_stream << "gr-t-4" << '[' << ((UINT) 4) << ']' << ":=0x" << hex << opval << dec << "  ";
d3064 1
a3064 1
      current_cpu->trace_stream << "gr-t-5" << '[' << ((UINT) 5) << ']' << ":=0x" << hex << opval << dec << "  ";
d3080 1
a3080 1
      current_cpu->trace_stream << "gr-t-6" << '[' << ((UINT) 6) << ']' << ":=0x" << hex << opval << dec << "  ";
d3096 1
a3096 1
      current_cpu->trace_stream << "gr-t-7" << '[' << ((UINT) 7) << ']' << ":=0x" << hex << opval << dec << "  ";
@

