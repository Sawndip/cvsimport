head	1.10;
access;
symbols
	sid-snapshot-20180601:1.10
	sid-snapshot-20180501:1.10
	sid-snapshot-20180401:1.10
	sid-snapshot-20180301:1.10
	sid-snapshot-20180201:1.10
	sid-snapshot-20180101:1.10
	sid-snapshot-20171201:1.10
	sid-snapshot-20171101:1.10
	sid-snapshot-20171001:1.10
	sid-snapshot-20170901:1.10
	sid-snapshot-20170801:1.10
	sid-snapshot-20170701:1.10
	sid-snapshot-20170601:1.10
	sid-snapshot-20170501:1.10
	sid-snapshot-20170401:1.10
	sid-snapshot-20170301:1.10
	sid-snapshot-20170201:1.10
	sid-snapshot-20170101:1.10
	sid-snapshot-20161201:1.10
	sid-snapshot-20161101:1.10
	sid-snapshot-20160901:1.10
	sid-snapshot-20160801:1.10
	sid-snapshot-20160701:1.10
	sid-snapshot-20160601:1.10
	sid-snapshot-20160501:1.10
	sid-snapshot-20160401:1.10
	sid-snapshot-20160301:1.10
	sid-snapshot-20160201:1.10
	sid-snapshot-20160101:1.10
	sid-snapshot-20151201:1.10
	sid-snapshot-20151101:1.10
	sid-snapshot-20151001:1.10
	sid-snapshot-20150901:1.10
	sid-snapshot-20150801:1.10
	sid-snapshot-20150701:1.10
	sid-snapshot-20150601:1.10
	sid-snapshot-20150501:1.10
	sid-snapshot-20150401:1.10
	sid-snapshot-20150301:1.10
	sid-snapshot-20150201:1.10
	sid-snapshot-20150101:1.10
	sid-snapshot-20141201:1.10
	sid-snapshot-20141101:1.10
	sid-snapshot-20141001:1.10
	sid-snapshot-20140901:1.10
	sid-snapshot-20140801:1.10
	sid-snapshot-20140701:1.10
	sid-snapshot-20140601:1.10
	sid-snapshot-20140501:1.10
	sid-snapshot-20140401:1.10
	sid-snapshot-20140301:1.10
	sid-snapshot-20140201:1.10
	sid-snapshot-20140101:1.10
	sid-snapshot-20131201:1.10
	sid-snapshot-20131101:1.10
	sid-snapshot-20131001:1.10
	sid-snapshot-20130901:1.10
	sid-snapshot-20130801:1.10
	sid-snapshot-20130701:1.10
	sid-snapshot-20130601:1.10
	sid-snapshot-20130501:1.10
	sid-snapshot-20130401:1.10
	sid-snapshot-20130301:1.10
	sid-snapshot-20130201:1.10
	sid-snapshot-20130101:1.10
	sid-snapshot-20121201:1.10
	sid-snapshot-20121101:1.10
	sid-snapshot-20121001:1.10
	sid-snapshot-20120901:1.10
	sid-snapshot-20120801:1.10
	sid-snapshot-20120701:1.10
	sid-snapshot-20120601:1.10
	sid-snapshot-20120501:1.10
	sid-snapshot-20120401:1.10
	sid-snapshot-20120301:1.10
	sid-snapshot-20120201:1.10
	sid-snapshot-20120101:1.10
	sid-snapshot-20111201:1.10
	sid-snapshot-20111101:1.10
	sid-snapshot-20111001:1.10
	sid-snapshot-20110901:1.10
	sid-snapshot-20110801:1.10
	sid-snapshot-20110701:1.10
	sid-snapshot-20110601:1.10
	sid-snapshot-20110501:1.10
	sid-snapshot-20110401:1.10
	sid-snapshot-20110301:1.10
	sid-snapshot-20110201:1.10
	sid-snapshot-20110101:1.10
	sid-snapshot-20101201:1.10
	sid-snapshot-20101101:1.10
	sid-snapshot-20101001:1.10
	sid-snapshot-20100901:1.10
	sid-snapshot-20100801:1.10
	sid-snapshot-20100701:1.10
	sid-snapshot-20100601:1.10
	sid-snapshot-20100501:1.10
	sid-snapshot-20100401:1.10
	sid-snapshot-20100301:1.10
	sid-snapshot-20100201:1.9
	sid-snapshot-20100101:1.8
	sid-snapshot-20091201:1.8
	sid-snapshot-20091101:1.8
	sid-snapshot-20091001:1.7
	sid-snapshot-20090901:1.7
	sid-snapshot-20090801:1.7
	sid-snapshot-20090701:1.7
	sid-snapshot-20090601:1.7
	sid-snapshot-20090501:1.7
	sid-snapshot-20090401:1.7
	sid-snapshot-20090301:1.7
	sid-snapshot-20090201:1.7
	sid-snapshot-20090101:1.7
	sid-snapshot-20081201:1.7
	sid-snapshot-20081101:1.7
	sid-snapshot-20081001:1.7
	sid-snapshot-20080901:1.7
	sid-snapshot-20080801:1.7
	sid-snapshot-20080701:1.7
	sid-snapshot-20080601:1.7
	sid-snapshot-20080501:1.7
	sid-snapshot-20080403:1.7
	sid-snapshot-20080401:1.7
	sid-snapshot-20080301:1.7
	sid-snapshot-20080201:1.7
	sid-snapshot-20080101:1.7
	sid-snapshot-20071201:1.7
	sid-snapshot-20071101:1.7
	sid-snapshot-20071001:1.7
	sid-20020905-branchpoint:1.4
	sid-20020905-branch:1.4.0.2
	cygnus_cvs_20020108_pre:1.4;
locks; strict;
comment	@// @;


1.10
date	2010.02.12.02.33.04;	author devans;	state Exp;
branches;
next	1.9;

1.9
date	2010.01.02.21.18.54;	author devans;	state Exp;
branches;
next	1.8;

1.8
date	2009.10.24.00.45.55;	author devans;	state Exp;
branches;
next	1.7;

1.7
date	2003.07.05.17.07.20;	author devans;	state Exp;
branches;
next	1.6;

1.6
date	2003.01.08.03.17.27;	author bje;	state Exp;
branches;
next	1.5;

1.5
date	2002.09.07.14.42.48;	author fche;	state Exp;
branches;
next	1.4;

1.4
date	2001.03.01.19.15.32;	author fche;	state Exp;
branches;
next	1.3;

1.3
date	2001.01.29.20.03.25;	author fche;	state Exp;
branches;
next	1.2;

1.2
date	2001.01.15.21.14.25;	author fche;	state Exp;
branches;
next	1.1;

1.1
date	2000.12.07.19.30.48;	author fche;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Regenerate to pick up recent cgen changes.
[minor changes like removing K&R support, more consistent name for sfmt_empty]
@
text
@/* Simulator instruction semantics for arm.

THIS FILE IS MACHINE GENERATED WITH CGEN.

Copyright (C) 2000-2010 Red Hat, Inc.

This file is part of the Red Hat simulators.


*/


#if HAVE_CONFIG_H
#include "config.h"
#endif
#include "arm7f.h"

using namespace arm7f; // FIXME: namespace organization still wip
#define GET_ATTR(name) GET_ATTR_##name ()


// ********** x-invalid: --invalid--

sem_status
arm_sem_x_invalid (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_empty.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 0;

  {
    current_cpu->invalid_insn (pc);
    assert (0);
    /* NOTREACHED */
  }

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** b: b$cond $offset24

sem_status
arm_sem_b (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_b.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

  {
    USI opval = FLD (i_offset24);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** bl: bl$cond $offset24

sem_status
arm_sem_bl (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_b.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  {
    SI opval = ANDSI (ADDSI (pc, 4), -4);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 14) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 14)] = opval;
  }
  {
    USI opval = FLD (i_offset24);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** bx: bx$cond ${bx-rn}

sem_status
arm_sem_bx (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_bx.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  {
    USI opval = ANDSI (* FLD (i_bx_rn), 0xfffffffe);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
if (ANDSI (* FLD (i_bx_rn), 1)) {
  {
    BI opval = 1;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "tbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->h_tbit_set (opval);
  }
}
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** ldr-post-dec-imm-offset: ldr${cond} $rd,???

sem_status
arm_sem_ldr_post_dec_imm_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_ldr_post_dec_imm_offset.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = FLD (f_uimm12);
  tmp_addr = * FLD (i_rn);
if (EQSI (FLD (f_rd), 15)) {
  {
    USI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
} else {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
}
  tmp_addr = SUBSI (* FLD (i_rn), tmp_offset);
  {
    SI opval = tmp_addr;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rn) = opval;
  }
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** ldr-post-dec-reg-offset: ldr${cond} $rd,???

sem_status
arm_sem_ldr_post_dec_reg_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = current_cpu->compute_operand2_immshift (* FLD (i_rm), FLD (f_operand2_shifttype), FLD (f_operand2_shiftimm));
  tmp_addr = * FLD (i_rn);
if (EQSI (FLD (f_rd), 15)) {
  {
    USI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
} else {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
}
  tmp_addr = SUBSI (* FLD (i_rn), tmp_offset);
  {
    SI opval = tmp_addr;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rn) = opval;
  }
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** ldr-post-inc-imm-offset: ldr${cond} $rd,???

sem_status
arm_sem_ldr_post_inc_imm_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_ldr_post_dec_imm_offset.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = FLD (f_uimm12);
  tmp_addr = * FLD (i_rn);
if (EQSI (FLD (f_rd), 15)) {
  {
    USI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
} else {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
}
  tmp_addr = ADDSI (* FLD (i_rn), tmp_offset);
  {
    SI opval = tmp_addr;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rn) = opval;
  }
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** ldr-post-inc-reg-offset: ldr${cond} $rd,???

sem_status
arm_sem_ldr_post_inc_reg_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = current_cpu->compute_operand2_immshift (* FLD (i_rm), FLD (f_operand2_shifttype), FLD (f_operand2_shiftimm));
  tmp_addr = * FLD (i_rn);
if (EQSI (FLD (f_rd), 15)) {
  {
    USI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
} else {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
}
  tmp_addr = ADDSI (* FLD (i_rn), tmp_offset);
  {
    SI opval = tmp_addr;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rn) = opval;
  }
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** ldr-post-dec-nonpriv-imm-offset: ldr${cond}t $rd,???

sem_status
arm_sem_ldr_post_dec_nonpriv_imm_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_ldr_post_dec_imm_offset.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = FLD (f_uimm12);
  tmp_addr = * FLD (i_rn);
if (EQSI (FLD (f_rd), 15)) {
  {
    USI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
} else {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
}
  tmp_addr = SUBSI (* FLD (i_rn), tmp_offset);
  {
    SI opval = tmp_addr;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rn) = opval;
  }
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** ldr-post-dec-nonpriv-reg-offset: ldr${cond}t $rd,???

sem_status
arm_sem_ldr_post_dec_nonpriv_reg_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = current_cpu->compute_operand2_immshift (* FLD (i_rm), FLD (f_operand2_shifttype), FLD (f_operand2_shiftimm));
  tmp_addr = * FLD (i_rn);
if (EQSI (FLD (f_rd), 15)) {
  {
    USI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
} else {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
}
  tmp_addr = SUBSI (* FLD (i_rn), tmp_offset);
  {
    SI opval = tmp_addr;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rn) = opval;
  }
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** ldr-post-inc-nonpriv-imm-offset: ldr${cond}t $rd,???

sem_status
arm_sem_ldr_post_inc_nonpriv_imm_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_ldr_post_dec_imm_offset.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = FLD (f_uimm12);
  tmp_addr = * FLD (i_rn);
if (EQSI (FLD (f_rd), 15)) {
  {
    USI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
} else {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
}
  tmp_addr = ADDSI (* FLD (i_rn), tmp_offset);
  {
    SI opval = tmp_addr;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rn) = opval;
  }
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** ldr-post-inc-nonpriv-reg-offset: ldr${cond}t $rd,???

sem_status
arm_sem_ldr_post_inc_nonpriv_reg_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = current_cpu->compute_operand2_immshift (* FLD (i_rm), FLD (f_operand2_shifttype), FLD (f_operand2_shiftimm));
  tmp_addr = * FLD (i_rn);
if (EQSI (FLD (f_rd), 15)) {
  {
    USI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
} else {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
}
  tmp_addr = ADDSI (* FLD (i_rn), tmp_offset);
  {
    SI opval = tmp_addr;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rn) = opval;
  }
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** ldr-pre-dec-imm-offset: ldr${cond} $rd,???

sem_status
arm_sem_ldr_pre_dec_imm_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_ldr_post_dec_imm_offset.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = FLD (f_uimm12);
  tmp_addr = SUBSI (* FLD (i_rn), tmp_offset);
if (EQSI (FLD (f_rd), 15)) {
  {
    USI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
} else {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
}
((void) 0); /*nop*/
((void) 0); /*nop*/
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** ldr-pre-dec-reg-offset: ldr${cond} $rd,???

sem_status
arm_sem_ldr_pre_dec_reg_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = current_cpu->compute_operand2_immshift (* FLD (i_rm), FLD (f_operand2_shifttype), FLD (f_operand2_shiftimm));
  tmp_addr = SUBSI (* FLD (i_rn), tmp_offset);
if (EQSI (FLD (f_rd), 15)) {
  {
    USI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
} else {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
}
((void) 0); /*nop*/
((void) 0); /*nop*/
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** ldr-pre-inc-imm-offset: ldr${cond} $rd,???

sem_status
arm_sem_ldr_pre_inc_imm_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_ldr_post_dec_imm_offset.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = FLD (f_uimm12);
  tmp_addr = ADDSI (* FLD (i_rn), tmp_offset);
if (EQSI (FLD (f_rd), 15)) {
  {
    USI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
} else {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
}
((void) 0); /*nop*/
((void) 0); /*nop*/
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** ldr-pre-inc-reg-offset: ldr${cond} $rd,???

sem_status
arm_sem_ldr_pre_inc_reg_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = current_cpu->compute_operand2_immshift (* FLD (i_rm), FLD (f_operand2_shifttype), FLD (f_operand2_shiftimm));
  tmp_addr = ADDSI (* FLD (i_rn), tmp_offset);
if (EQSI (FLD (f_rd), 15)) {
  {
    USI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
} else {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
}
((void) 0); /*nop*/
((void) 0); /*nop*/
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** ldr-pre-dec-wb-imm-offset: ldr${cond} $rd,???

sem_status
arm_sem_ldr_pre_dec_wb_imm_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_ldr_post_dec_imm_offset.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = FLD (f_uimm12);
  tmp_addr = SUBSI (* FLD (i_rn), tmp_offset);
if (EQSI (FLD (f_rd), 15)) {
  {
    USI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
} else {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
}
((void) 0); /*nop*/
  {
    SI opval = tmp_addr;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rn) = opval;
  }
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** ldr-pre-dec-wb-reg-offset: ldr${cond} $rd,???

sem_status
arm_sem_ldr_pre_dec_wb_reg_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = current_cpu->compute_operand2_immshift (* FLD (i_rm), FLD (f_operand2_shifttype), FLD (f_operand2_shiftimm));
  tmp_addr = SUBSI (* FLD (i_rn), tmp_offset);
if (EQSI (FLD (f_rd), 15)) {
  {
    USI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
} else {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
}
((void) 0); /*nop*/
  {
    SI opval = tmp_addr;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rn) = opval;
  }
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** ldr-pre-inc-wb-imm-offset: ldr${cond} $rd,???

sem_status
arm_sem_ldr_pre_inc_wb_imm_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_ldr_post_dec_imm_offset.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = FLD (f_uimm12);
  tmp_addr = ADDSI (* FLD (i_rn), tmp_offset);
if (EQSI (FLD (f_rd), 15)) {
  {
    USI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
} else {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
}
((void) 0); /*nop*/
  {
    SI opval = tmp_addr;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rn) = opval;
  }
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** ldr-pre-inc-wb-reg-offset: ldr${cond} $rd,???

sem_status
arm_sem_ldr_pre_inc_wb_reg_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = current_cpu->compute_operand2_immshift (* FLD (i_rm), FLD (f_operand2_shifttype), FLD (f_operand2_shiftimm));
  tmp_addr = ADDSI (* FLD (i_rn), tmp_offset);
if (EQSI (FLD (f_rd), 15)) {
  {
    USI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
} else {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
}
((void) 0); /*nop*/
  {
    SI opval = tmp_addr;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rn) = opval;
  }
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** ldrb-post-dec-imm-offset: ldr${cond}b $rd,???

sem_status
arm_sem_ldrb_post_dec_imm_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_ldr_post_dec_imm_offset.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = FLD (f_uimm12);
  tmp_addr = * FLD (i_rn);
if (EQSI (FLD (f_rd), 15)) {
  {
    USI opval = ZEXTQISI (current_cpu->GETMEMQI (pc, tmp_addr));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
} else {
  {
    SI opval = ZEXTQISI (current_cpu->GETMEMQI (pc, tmp_addr));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
}
  tmp_addr = SUBSI (* FLD (i_rn), tmp_offset);
  {
    SI opval = tmp_addr;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rn) = opval;
  }
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** ldrb-post-dec-reg-offset: ldr${cond}b $rd,???

sem_status
arm_sem_ldrb_post_dec_reg_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = current_cpu->compute_operand2_immshift (* FLD (i_rm), FLD (f_operand2_shifttype), FLD (f_operand2_shiftimm));
  tmp_addr = * FLD (i_rn);
if (EQSI (FLD (f_rd), 15)) {
  {
    USI opval = ZEXTQISI (current_cpu->GETMEMQI (pc, tmp_addr));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
} else {
  {
    SI opval = ZEXTQISI (current_cpu->GETMEMQI (pc, tmp_addr));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
}
  tmp_addr = SUBSI (* FLD (i_rn), tmp_offset);
  {
    SI opval = tmp_addr;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rn) = opval;
  }
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** ldrb-post-inc-imm-offset: ldr${cond}b $rd,???

sem_status
arm_sem_ldrb_post_inc_imm_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_ldr_post_dec_imm_offset.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = FLD (f_uimm12);
  tmp_addr = * FLD (i_rn);
if (EQSI (FLD (f_rd), 15)) {
  {
    USI opval = ZEXTQISI (current_cpu->GETMEMQI (pc, tmp_addr));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
} else {
  {
    SI opval = ZEXTQISI (current_cpu->GETMEMQI (pc, tmp_addr));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
}
  tmp_addr = ADDSI (* FLD (i_rn), tmp_offset);
  {
    SI opval = tmp_addr;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rn) = opval;
  }
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** ldrb-post-inc-reg-offset: ldr${cond}b $rd,???

sem_status
arm_sem_ldrb_post_inc_reg_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = current_cpu->compute_operand2_immshift (* FLD (i_rm), FLD (f_operand2_shifttype), FLD (f_operand2_shiftimm));
  tmp_addr = * FLD (i_rn);
if (EQSI (FLD (f_rd), 15)) {
  {
    USI opval = ZEXTQISI (current_cpu->GETMEMQI (pc, tmp_addr));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
} else {
  {
    SI opval = ZEXTQISI (current_cpu->GETMEMQI (pc, tmp_addr));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
}
  tmp_addr = ADDSI (* FLD (i_rn), tmp_offset);
  {
    SI opval = tmp_addr;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rn) = opval;
  }
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** ldrb-post-dec-nonpriv-imm-offset: ldr${cond}bt $rd,???

sem_status
arm_sem_ldrb_post_dec_nonpriv_imm_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_ldr_post_dec_imm_offset.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = FLD (f_uimm12);
  tmp_addr = * FLD (i_rn);
if (EQSI (FLD (f_rd), 15)) {
  {
    USI opval = ZEXTQISI (current_cpu->GETMEMQI (pc, tmp_addr));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
} else {
  {
    SI opval = ZEXTQISI (current_cpu->GETMEMQI (pc, tmp_addr));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
}
  tmp_addr = SUBSI (* FLD (i_rn), tmp_offset);
  {
    SI opval = tmp_addr;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rn) = opval;
  }
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** ldrb-post-dec-nonpriv-reg-offset: ldr${cond}bt $rd,???

sem_status
arm_sem_ldrb_post_dec_nonpriv_reg_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = current_cpu->compute_operand2_immshift (* FLD (i_rm), FLD (f_operand2_shifttype), FLD (f_operand2_shiftimm));
  tmp_addr = * FLD (i_rn);
if (EQSI (FLD (f_rd), 15)) {
  {
    USI opval = ZEXTQISI (current_cpu->GETMEMQI (pc, tmp_addr));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
} else {
  {
    SI opval = ZEXTQISI (current_cpu->GETMEMQI (pc, tmp_addr));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
}
  tmp_addr = SUBSI (* FLD (i_rn), tmp_offset);
  {
    SI opval = tmp_addr;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rn) = opval;
  }
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** ldrb-post-inc-nonpriv-imm-offset: ldr${cond}bt $rd,???

sem_status
arm_sem_ldrb_post_inc_nonpriv_imm_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_ldr_post_dec_imm_offset.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = FLD (f_uimm12);
  tmp_addr = * FLD (i_rn);
if (EQSI (FLD (f_rd), 15)) {
  {
    USI opval = ZEXTQISI (current_cpu->GETMEMQI (pc, tmp_addr));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
} else {
  {
    SI opval = ZEXTQISI (current_cpu->GETMEMQI (pc, tmp_addr));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
}
  tmp_addr = ADDSI (* FLD (i_rn), tmp_offset);
  {
    SI opval = tmp_addr;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rn) = opval;
  }
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** ldrb-post-inc-nonpriv-reg-offset: ldr${cond}bt $rd,???

sem_status
arm_sem_ldrb_post_inc_nonpriv_reg_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = current_cpu->compute_operand2_immshift (* FLD (i_rm), FLD (f_operand2_shifttype), FLD (f_operand2_shiftimm));
  tmp_addr = * FLD (i_rn);
if (EQSI (FLD (f_rd), 15)) {
  {
    USI opval = ZEXTQISI (current_cpu->GETMEMQI (pc, tmp_addr));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
} else {
  {
    SI opval = ZEXTQISI (current_cpu->GETMEMQI (pc, tmp_addr));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
}
  tmp_addr = ADDSI (* FLD (i_rn), tmp_offset);
  {
    SI opval = tmp_addr;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rn) = opval;
  }
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** ldrb-pre-dec-imm-offset: ldr${cond}b $rd,???

sem_status
arm_sem_ldrb_pre_dec_imm_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_ldr_post_dec_imm_offset.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = FLD (f_uimm12);
  tmp_addr = SUBSI (* FLD (i_rn), tmp_offset);
if (EQSI (FLD (f_rd), 15)) {
  {
    USI opval = ZEXTQISI (current_cpu->GETMEMQI (pc, tmp_addr));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
} else {
  {
    SI opval = ZEXTQISI (current_cpu->GETMEMQI (pc, tmp_addr));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
}
((void) 0); /*nop*/
((void) 0); /*nop*/
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** ldrb-pre-dec-reg-offset: ldr${cond}b $rd,???

sem_status
arm_sem_ldrb_pre_dec_reg_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = current_cpu->compute_operand2_immshift (* FLD (i_rm), FLD (f_operand2_shifttype), FLD (f_operand2_shiftimm));
  tmp_addr = SUBSI (* FLD (i_rn), tmp_offset);
if (EQSI (FLD (f_rd), 15)) {
  {
    USI opval = ZEXTQISI (current_cpu->GETMEMQI (pc, tmp_addr));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
} else {
  {
    SI opval = ZEXTQISI (current_cpu->GETMEMQI (pc, tmp_addr));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
}
((void) 0); /*nop*/
((void) 0); /*nop*/
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** ldrb-pre-inc-imm-offset: ldr${cond}b $rd,???

sem_status
arm_sem_ldrb_pre_inc_imm_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_ldr_post_dec_imm_offset.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = FLD (f_uimm12);
  tmp_addr = ADDSI (* FLD (i_rn), tmp_offset);
if (EQSI (FLD (f_rd), 15)) {
  {
    USI opval = ZEXTQISI (current_cpu->GETMEMQI (pc, tmp_addr));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
} else {
  {
    SI opval = ZEXTQISI (current_cpu->GETMEMQI (pc, tmp_addr));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
}
((void) 0); /*nop*/
((void) 0); /*nop*/
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** ldrb-pre-inc-reg-offset: ldr${cond}b $rd,???

sem_status
arm_sem_ldrb_pre_inc_reg_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = current_cpu->compute_operand2_immshift (* FLD (i_rm), FLD (f_operand2_shifttype), FLD (f_operand2_shiftimm));
  tmp_addr = ADDSI (* FLD (i_rn), tmp_offset);
if (EQSI (FLD (f_rd), 15)) {
  {
    USI opval = ZEXTQISI (current_cpu->GETMEMQI (pc, tmp_addr));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
} else {
  {
    SI opval = ZEXTQISI (current_cpu->GETMEMQI (pc, tmp_addr));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
}
((void) 0); /*nop*/
((void) 0); /*nop*/
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** ldrb-pre-dec-wb-imm-offset: ldr${cond}b $rd,???

sem_status
arm_sem_ldrb_pre_dec_wb_imm_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_ldr_post_dec_imm_offset.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = FLD (f_uimm12);
  tmp_addr = SUBSI (* FLD (i_rn), tmp_offset);
if (EQSI (FLD (f_rd), 15)) {
  {
    USI opval = ZEXTQISI (current_cpu->GETMEMQI (pc, tmp_addr));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
} else {
  {
    SI opval = ZEXTQISI (current_cpu->GETMEMQI (pc, tmp_addr));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
}
((void) 0); /*nop*/
  {
    SI opval = tmp_addr;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rn) = opval;
  }
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** ldrb-pre-dec-wb-reg-offset: ldr${cond}b $rd,???

sem_status
arm_sem_ldrb_pre_dec_wb_reg_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = current_cpu->compute_operand2_immshift (* FLD (i_rm), FLD (f_operand2_shifttype), FLD (f_operand2_shiftimm));
  tmp_addr = SUBSI (* FLD (i_rn), tmp_offset);
if (EQSI (FLD (f_rd), 15)) {
  {
    USI opval = ZEXTQISI (current_cpu->GETMEMQI (pc, tmp_addr));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
} else {
  {
    SI opval = ZEXTQISI (current_cpu->GETMEMQI (pc, tmp_addr));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
}
((void) 0); /*nop*/
  {
    SI opval = tmp_addr;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rn) = opval;
  }
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** ldrb-pre-inc-wb-imm-offset: ldr${cond}b $rd,???

sem_status
arm_sem_ldrb_pre_inc_wb_imm_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_ldr_post_dec_imm_offset.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = FLD (f_uimm12);
  tmp_addr = ADDSI (* FLD (i_rn), tmp_offset);
if (EQSI (FLD (f_rd), 15)) {
  {
    USI opval = ZEXTQISI (current_cpu->GETMEMQI (pc, tmp_addr));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
} else {
  {
    SI opval = ZEXTQISI (current_cpu->GETMEMQI (pc, tmp_addr));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
}
((void) 0); /*nop*/
  {
    SI opval = tmp_addr;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rn) = opval;
  }
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** ldrb-pre-inc-wb-reg-offset: ldr${cond}b $rd,???

sem_status
arm_sem_ldrb_pre_inc_wb_reg_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = current_cpu->compute_operand2_immshift (* FLD (i_rm), FLD (f_operand2_shifttype), FLD (f_operand2_shiftimm));
  tmp_addr = ADDSI (* FLD (i_rn), tmp_offset);
if (EQSI (FLD (f_rd), 15)) {
  {
    USI opval = ZEXTQISI (current_cpu->GETMEMQI (pc, tmp_addr));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
} else {
  {
    SI opval = ZEXTQISI (current_cpu->GETMEMQI (pc, tmp_addr));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
}
((void) 0); /*nop*/
  {
    SI opval = tmp_addr;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rn) = opval;
  }
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** str-post-dec-imm-offset: ldr${cond} $rd,???

sem_status
arm_sem_str_post_dec_imm_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_ldr_post_dec_imm_offset.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = FLD (f_uimm12);
  tmp_addr = * FLD (i_rn);
  {
    SI opval = * FLD (i_rd);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = SUBSI (* FLD (i_rn), tmp_offset);
  {
    SI opval = tmp_addr;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rn) = opval;
  }
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** str-post-dec-reg-offset: str${cond} $rd,???

sem_status
arm_sem_str_post_dec_reg_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = current_cpu->compute_operand2_immshift (* FLD (i_rm), FLD (f_operand2_shifttype), FLD (f_operand2_shiftimm));
  tmp_addr = * FLD (i_rn);
  {
    SI opval = * FLD (i_rd);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = SUBSI (* FLD (i_rn), tmp_offset);
  {
    SI opval = tmp_addr;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rn) = opval;
  }
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** str-post-inc-imm-offset: ldr${cond} $rd,???

sem_status
arm_sem_str_post_inc_imm_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_ldr_post_dec_imm_offset.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = FLD (f_uimm12);
  tmp_addr = * FLD (i_rn);
  {
    SI opval = * FLD (i_rd);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = ADDSI (* FLD (i_rn), tmp_offset);
  {
    SI opval = tmp_addr;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rn) = opval;
  }
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** str-post-inc-reg-offset: str${cond} $rd,???

sem_status
arm_sem_str_post_inc_reg_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = current_cpu->compute_operand2_immshift (* FLD (i_rm), FLD (f_operand2_shifttype), FLD (f_operand2_shiftimm));
  tmp_addr = * FLD (i_rn);
  {
    SI opval = * FLD (i_rd);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = ADDSI (* FLD (i_rn), tmp_offset);
  {
    SI opval = tmp_addr;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rn) = opval;
  }
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** str-post-dec-nonpriv-imm-offset: ldr${cond}t $rd,???

sem_status
arm_sem_str_post_dec_nonpriv_imm_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_ldr_post_dec_imm_offset.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = FLD (f_uimm12);
  tmp_addr = * FLD (i_rn);
  {
    SI opval = * FLD (i_rd);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = SUBSI (* FLD (i_rn), tmp_offset);
  {
    SI opval = tmp_addr;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rn) = opval;
  }
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** str-post-dec-nonpriv-reg-offset: str${cond}t $rd,???

sem_status
arm_sem_str_post_dec_nonpriv_reg_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = current_cpu->compute_operand2_immshift (* FLD (i_rm), FLD (f_operand2_shifttype), FLD (f_operand2_shiftimm));
  tmp_addr = * FLD (i_rn);
  {
    SI opval = * FLD (i_rd);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = SUBSI (* FLD (i_rn), tmp_offset);
  {
    SI opval = tmp_addr;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rn) = opval;
  }
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** str-post-inc-nonpriv-imm-offset: ldr${cond}t $rd,???

sem_status
arm_sem_str_post_inc_nonpriv_imm_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_ldr_post_dec_imm_offset.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = FLD (f_uimm12);
  tmp_addr = * FLD (i_rn);
  {
    SI opval = * FLD (i_rd);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = ADDSI (* FLD (i_rn), tmp_offset);
  {
    SI opval = tmp_addr;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rn) = opval;
  }
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** str-post-inc-nonpriv-reg-offset: str${cond}t $rd,???

sem_status
arm_sem_str_post_inc_nonpriv_reg_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = current_cpu->compute_operand2_immshift (* FLD (i_rm), FLD (f_operand2_shifttype), FLD (f_operand2_shiftimm));
  tmp_addr = * FLD (i_rn);
  {
    SI opval = * FLD (i_rd);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = ADDSI (* FLD (i_rn), tmp_offset);
  {
    SI opval = tmp_addr;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rn) = opval;
  }
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** str-pre-dec-imm-offset: ldr${cond} $rd,???

sem_status
arm_sem_str_pre_dec_imm_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_ldr_post_dec_imm_offset.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = FLD (f_uimm12);
  tmp_addr = SUBSI (* FLD (i_rn), tmp_offset);
  {
    SI opval = * FLD (i_rd);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
((void) 0); /*nop*/
((void) 0); /*nop*/
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** str-pre-dec-reg-offset: str${cond} $rd,???

sem_status
arm_sem_str_pre_dec_reg_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = current_cpu->compute_operand2_immshift (* FLD (i_rm), FLD (f_operand2_shifttype), FLD (f_operand2_shiftimm));
  tmp_addr = SUBSI (* FLD (i_rn), tmp_offset);
  {
    SI opval = * FLD (i_rd);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
((void) 0); /*nop*/
((void) 0); /*nop*/
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** str-pre-inc-imm-offset: ldr${cond} $rd,???

sem_status
arm_sem_str_pre_inc_imm_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_ldr_post_dec_imm_offset.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = FLD (f_uimm12);
  tmp_addr = ADDSI (* FLD (i_rn), tmp_offset);
  {
    SI opval = * FLD (i_rd);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
((void) 0); /*nop*/
((void) 0); /*nop*/
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** str-pre-inc-reg-offset: str${cond} $rd,???

sem_status
arm_sem_str_pre_inc_reg_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = current_cpu->compute_operand2_immshift (* FLD (i_rm), FLD (f_operand2_shifttype), FLD (f_operand2_shiftimm));
  tmp_addr = ADDSI (* FLD (i_rn), tmp_offset);
  {
    SI opval = * FLD (i_rd);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
((void) 0); /*nop*/
((void) 0); /*nop*/
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** str-pre-dec-wb-imm-offset: ldr${cond} $rd,???

sem_status
arm_sem_str_pre_dec_wb_imm_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_ldr_post_dec_imm_offset.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = FLD (f_uimm12);
  tmp_addr = SUBSI (* FLD (i_rn), tmp_offset);
  {
    SI opval = * FLD (i_rd);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
((void) 0); /*nop*/
  {
    SI opval = tmp_addr;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rn) = opval;
  }
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** str-pre-dec-wb-reg-offset: str${cond} $rd,???

sem_status
arm_sem_str_pre_dec_wb_reg_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = current_cpu->compute_operand2_immshift (* FLD (i_rm), FLD (f_operand2_shifttype), FLD (f_operand2_shiftimm));
  tmp_addr = SUBSI (* FLD (i_rn), tmp_offset);
  {
    SI opval = * FLD (i_rd);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
((void) 0); /*nop*/
  {
    SI opval = tmp_addr;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rn) = opval;
  }
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** str-pre-inc-wb-imm-offset: ldr${cond} $rd,???

sem_status
arm_sem_str_pre_inc_wb_imm_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_ldr_post_dec_imm_offset.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = FLD (f_uimm12);
  tmp_addr = ADDSI (* FLD (i_rn), tmp_offset);
  {
    SI opval = * FLD (i_rd);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
((void) 0); /*nop*/
  {
    SI opval = tmp_addr;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rn) = opval;
  }
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** str-pre-inc-wb-reg-offset: str${cond} $rd,???

sem_status
arm_sem_str_pre_inc_wb_reg_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = current_cpu->compute_operand2_immshift (* FLD (i_rm), FLD (f_operand2_shifttype), FLD (f_operand2_shiftimm));
  tmp_addr = ADDSI (* FLD (i_rn), tmp_offset);
  {
    SI opval = * FLD (i_rd);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
((void) 0); /*nop*/
  {
    SI opval = tmp_addr;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rn) = opval;
  }
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** strb-post-dec-imm-offset: ldr${cond}b $rd,???

sem_status
arm_sem_strb_post_dec_imm_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_ldr_post_dec_imm_offset.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = FLD (f_uimm12);
  tmp_addr = * FLD (i_rn);
  {
    QI opval = TRUNCSIQI (* FLD (i_rd));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << (SI) opval << dec << "  ";
    current_cpu->SETMEMQI (pc, tmp_addr, opval);
  }
  tmp_addr = SUBSI (* FLD (i_rn), tmp_offset);
  {
    SI opval = tmp_addr;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rn) = opval;
  }
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** strb-post-dec-reg-offset: str${cond}b $rd,???

sem_status
arm_sem_strb_post_dec_reg_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = current_cpu->compute_operand2_immshift (* FLD (i_rm), FLD (f_operand2_shifttype), FLD (f_operand2_shiftimm));
  tmp_addr = * FLD (i_rn);
  {
    QI opval = TRUNCSIQI (* FLD (i_rd));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << (SI) opval << dec << "  ";
    current_cpu->SETMEMQI (pc, tmp_addr, opval);
  }
  tmp_addr = SUBSI (* FLD (i_rn), tmp_offset);
  {
    SI opval = tmp_addr;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rn) = opval;
  }
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** strb-post-inc-imm-offset: ldr${cond} $rd,???

sem_status
arm_sem_strb_post_inc_imm_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_ldr_post_dec_imm_offset.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = FLD (f_uimm12);
  tmp_addr = * FLD (i_rn);
  {
    QI opval = TRUNCSIQI (* FLD (i_rd));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << (SI) opval << dec << "  ";
    current_cpu->SETMEMQI (pc, tmp_addr, opval);
  }
  tmp_addr = ADDSI (* FLD (i_rn), tmp_offset);
  {
    SI opval = tmp_addr;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rn) = opval;
  }
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** strb-post-inc-reg-offset: str${cond} $rd,???

sem_status
arm_sem_strb_post_inc_reg_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = current_cpu->compute_operand2_immshift (* FLD (i_rm), FLD (f_operand2_shifttype), FLD (f_operand2_shiftimm));
  tmp_addr = * FLD (i_rn);
  {
    QI opval = TRUNCSIQI (* FLD (i_rd));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << (SI) opval << dec << "  ";
    current_cpu->SETMEMQI (pc, tmp_addr, opval);
  }
  tmp_addr = ADDSI (* FLD (i_rn), tmp_offset);
  {
    SI opval = tmp_addr;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rn) = opval;
  }
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** strb-post-dec-nonpriv-imm-offset: ldr${cond}t $rd,???

sem_status
arm_sem_strb_post_dec_nonpriv_imm_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_ldr_post_dec_imm_offset.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = FLD (f_uimm12);
  tmp_addr = * FLD (i_rn);
  {
    QI opval = TRUNCSIQI (* FLD (i_rd));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << (SI) opval << dec << "  ";
    current_cpu->SETMEMQI (pc, tmp_addr, opval);
  }
  tmp_addr = SUBSI (* FLD (i_rn), tmp_offset);
  {
    SI opval = tmp_addr;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rn) = opval;
  }
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** strb-post-dec-nonpriv-reg-offset: str${cond}t $rd,???

sem_status
arm_sem_strb_post_dec_nonpriv_reg_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = current_cpu->compute_operand2_immshift (* FLD (i_rm), FLD (f_operand2_shifttype), FLD (f_operand2_shiftimm));
  tmp_addr = * FLD (i_rn);
  {
    QI opval = TRUNCSIQI (* FLD (i_rd));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << (SI) opval << dec << "  ";
    current_cpu->SETMEMQI (pc, tmp_addr, opval);
  }
  tmp_addr = SUBSI (* FLD (i_rn), tmp_offset);
  {
    SI opval = tmp_addr;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rn) = opval;
  }
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** strb-post-inc-nonpriv-imm-offset: ldr${cond}t $rd,???

sem_status
arm_sem_strb_post_inc_nonpriv_imm_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_ldr_post_dec_imm_offset.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = FLD (f_uimm12);
  tmp_addr = * FLD (i_rn);
  {
    QI opval = TRUNCSIQI (* FLD (i_rd));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << (SI) opval << dec << "  ";
    current_cpu->SETMEMQI (pc, tmp_addr, opval);
  }
  tmp_addr = ADDSI (* FLD (i_rn), tmp_offset);
  {
    SI opval = tmp_addr;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rn) = opval;
  }
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** strb-post-inc-nonpriv-reg-offset: str${cond}t $rd,???

sem_status
arm_sem_strb_post_inc_nonpriv_reg_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = current_cpu->compute_operand2_immshift (* FLD (i_rm), FLD (f_operand2_shifttype), FLD (f_operand2_shiftimm));
  tmp_addr = * FLD (i_rn);
  {
    QI opval = TRUNCSIQI (* FLD (i_rd));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << (SI) opval << dec << "  ";
    current_cpu->SETMEMQI (pc, tmp_addr, opval);
  }
  tmp_addr = ADDSI (* FLD (i_rn), tmp_offset);
  {
    SI opval = tmp_addr;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rn) = opval;
  }
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** strb-pre-dec-imm-offset: ldr${cond} $rd,???

sem_status
arm_sem_strb_pre_dec_imm_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_ldr_post_dec_imm_offset.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = FLD (f_uimm12);
  tmp_addr = SUBSI (* FLD (i_rn), tmp_offset);
  {
    QI opval = TRUNCSIQI (* FLD (i_rd));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << (SI) opval << dec << "  ";
    current_cpu->SETMEMQI (pc, tmp_addr, opval);
  }
((void) 0); /*nop*/
((void) 0); /*nop*/
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** strb-pre-dec-reg-offset: str${cond} $rd,???

sem_status
arm_sem_strb_pre_dec_reg_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = current_cpu->compute_operand2_immshift (* FLD (i_rm), FLD (f_operand2_shifttype), FLD (f_operand2_shiftimm));
  tmp_addr = SUBSI (* FLD (i_rn), tmp_offset);
  {
    QI opval = TRUNCSIQI (* FLD (i_rd));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << (SI) opval << dec << "  ";
    current_cpu->SETMEMQI (pc, tmp_addr, opval);
  }
((void) 0); /*nop*/
((void) 0); /*nop*/
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** strb-pre-inc-imm-offset: ldr${cond} $rd,???

sem_status
arm_sem_strb_pre_inc_imm_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_ldr_post_dec_imm_offset.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = FLD (f_uimm12);
  tmp_addr = ADDSI (* FLD (i_rn), tmp_offset);
  {
    QI opval = TRUNCSIQI (* FLD (i_rd));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << (SI) opval << dec << "  ";
    current_cpu->SETMEMQI (pc, tmp_addr, opval);
  }
((void) 0); /*nop*/
((void) 0); /*nop*/
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** strb-pre-inc-reg-offset: str${cond} $rd,???

sem_status
arm_sem_strb_pre_inc_reg_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = current_cpu->compute_operand2_immshift (* FLD (i_rm), FLD (f_operand2_shifttype), FLD (f_operand2_shiftimm));
  tmp_addr = ADDSI (* FLD (i_rn), tmp_offset);
  {
    QI opval = TRUNCSIQI (* FLD (i_rd));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << (SI) opval << dec << "  ";
    current_cpu->SETMEMQI (pc, tmp_addr, opval);
  }
((void) 0); /*nop*/
((void) 0); /*nop*/
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** strb-pre-dec-wb-imm-offset: ldr${cond} $rd,???

sem_status
arm_sem_strb_pre_dec_wb_imm_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_ldr_post_dec_imm_offset.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = FLD (f_uimm12);
  tmp_addr = SUBSI (* FLD (i_rn), tmp_offset);
  {
    QI opval = TRUNCSIQI (* FLD (i_rd));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << (SI) opval << dec << "  ";
    current_cpu->SETMEMQI (pc, tmp_addr, opval);
  }
((void) 0); /*nop*/
  {
    SI opval = tmp_addr;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rn) = opval;
  }
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** strb-pre-dec-wb-reg-offset: str${cond} $rd,???

sem_status
arm_sem_strb_pre_dec_wb_reg_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = current_cpu->compute_operand2_immshift (* FLD (i_rm), FLD (f_operand2_shifttype), FLD (f_operand2_shiftimm));
  tmp_addr = SUBSI (* FLD (i_rn), tmp_offset);
  {
    QI opval = TRUNCSIQI (* FLD (i_rd));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << (SI) opval << dec << "  ";
    current_cpu->SETMEMQI (pc, tmp_addr, opval);
  }
((void) 0); /*nop*/
  {
    SI opval = tmp_addr;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rn) = opval;
  }
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** strb-pre-inc-wb-imm-offset: ldr${cond} $rd,???

sem_status
arm_sem_strb_pre_inc_wb_imm_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_ldr_post_dec_imm_offset.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = FLD (f_uimm12);
  tmp_addr = ADDSI (* FLD (i_rn), tmp_offset);
  {
    QI opval = TRUNCSIQI (* FLD (i_rd));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << (SI) opval << dec << "  ";
    current_cpu->SETMEMQI (pc, tmp_addr, opval);
  }
((void) 0); /*nop*/
  {
    SI opval = tmp_addr;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rn) = opval;
  }
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** strb-pre-inc-wb-reg-offset: str${cond} $rd,???

sem_status
arm_sem_strb_pre_inc_wb_reg_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = current_cpu->compute_operand2_immshift (* FLD (i_rm), FLD (f_operand2_shifttype), FLD (f_operand2_shiftimm));
  tmp_addr = ADDSI (* FLD (i_rn), tmp_offset);
  {
    QI opval = TRUNCSIQI (* FLD (i_rd));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << (SI) opval << dec << "  ";
    current_cpu->SETMEMQI (pc, tmp_addr, opval);
  }
((void) 0); /*nop*/
  {
    SI opval = tmp_addr;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rn) = opval;
  }
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** strh-pre-dec-imm-offset: FIXME

sem_status
arm_sem_strh_pre_dec_imm_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_strh_pre_dec_imm_offset.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = FLD (i_hdt_offset8);
  tmp_addr = SUBSI (* FLD (i_rn), tmp_offset);
  {
    HI opval = TRUNCSIHI (* FLD (i_rd));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMHI (pc, tmp_addr, opval);
  }
((void) 0); /*nop*/
((void) 0); /*nop*/
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** strh-pre-dec-reg-offset: FIXME

sem_status
arm_sem_strh_pre_dec_reg_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = * FLD (i_rm);
  tmp_addr = SUBSI (* FLD (i_rn), tmp_offset);
  {
    HI opval = TRUNCSIHI (* FLD (i_rd));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMHI (pc, tmp_addr, opval);
  }
((void) 0); /*nop*/
((void) 0); /*nop*/
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** strh-pre-inc-imm-offset: FIXME

sem_status
arm_sem_strh_pre_inc_imm_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_strh_pre_dec_imm_offset.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = FLD (i_hdt_offset8);
  tmp_addr = ADDSI (* FLD (i_rn), tmp_offset);
  {
    HI opval = TRUNCSIHI (* FLD (i_rd));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMHI (pc, tmp_addr, opval);
  }
((void) 0); /*nop*/
((void) 0); /*nop*/
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** strh-pre-inc-reg-offset: FIXME

sem_status
arm_sem_strh_pre_inc_reg_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = * FLD (i_rm);
  tmp_addr = ADDSI (* FLD (i_rn), tmp_offset);
  {
    HI opval = TRUNCSIHI (* FLD (i_rd));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMHI (pc, tmp_addr, opval);
  }
((void) 0); /*nop*/
((void) 0); /*nop*/
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** strh-pre-dec-wb-imm-offset: FIXME

sem_status
arm_sem_strh_pre_dec_wb_imm_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_strh_pre_dec_imm_offset.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = FLD (i_hdt_offset8);
  tmp_addr = SUBSI (* FLD (i_rn), tmp_offset);
  {
    HI opval = TRUNCSIHI (* FLD (i_rd));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMHI (pc, tmp_addr, opval);
  }
((void) 0); /*nop*/
  {
    SI opval = tmp_addr;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rn) = opval;
  }
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** strh-pre-dec-wb-reg-offset: FIXME

sem_status
arm_sem_strh_pre_dec_wb_reg_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = * FLD (i_rm);
  tmp_addr = SUBSI (* FLD (i_rn), tmp_offset);
  {
    HI opval = TRUNCSIHI (* FLD (i_rd));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMHI (pc, tmp_addr, opval);
  }
((void) 0); /*nop*/
  {
    SI opval = tmp_addr;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rn) = opval;
  }
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** strh-pre-inc-wb-imm-offset: FIXME

sem_status
arm_sem_strh_pre_inc_wb_imm_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_strh_pre_dec_imm_offset.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = FLD (i_hdt_offset8);
  tmp_addr = ADDSI (* FLD (i_rn), tmp_offset);
  {
    HI opval = TRUNCSIHI (* FLD (i_rd));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMHI (pc, tmp_addr, opval);
  }
((void) 0); /*nop*/
  {
    SI opval = tmp_addr;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rn) = opval;
  }
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** strh-pre-inc-wb-reg-offset: FIXME

sem_status
arm_sem_strh_pre_inc_wb_reg_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = * FLD (i_rm);
  tmp_addr = ADDSI (* FLD (i_rn), tmp_offset);
  {
    HI opval = TRUNCSIHI (* FLD (i_rd));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMHI (pc, tmp_addr, opval);
  }
((void) 0); /*nop*/
  {
    SI opval = tmp_addr;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rn) = opval;
  }
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** strh-post-dec-imm-offset: FIXME

sem_status
arm_sem_strh_post_dec_imm_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_strh_pre_dec_imm_offset.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = FLD (i_hdt_offset8);
  tmp_addr = * FLD (i_rn);
  {
    HI opval = TRUNCSIHI (* FLD (i_rd));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMHI (pc, tmp_addr, opval);
  }
  tmp_addr = SUBSI (* FLD (i_rn), tmp_offset);
  {
    SI opval = tmp_addr;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rn) = opval;
  }
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** strh-post-dec-reg-offset: FIXME

sem_status
arm_sem_strh_post_dec_reg_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = * FLD (i_rm);
  tmp_addr = * FLD (i_rn);
  {
    HI opval = TRUNCSIHI (* FLD (i_rd));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMHI (pc, tmp_addr, opval);
  }
  tmp_addr = SUBSI (* FLD (i_rn), tmp_offset);
  {
    SI opval = tmp_addr;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rn) = opval;
  }
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** strh-post-inc-imm-offset: FIXME

sem_status
arm_sem_strh_post_inc_imm_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_strh_pre_dec_imm_offset.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = FLD (i_hdt_offset8);
  tmp_addr = * FLD (i_rn);
  {
    HI opval = TRUNCSIHI (* FLD (i_rd));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMHI (pc, tmp_addr, opval);
  }
  tmp_addr = ADDSI (* FLD (i_rn), tmp_offset);
  {
    SI opval = tmp_addr;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rn) = opval;
  }
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** strh-post-inc-reg-offset: FIXME

sem_status
arm_sem_strh_post_inc_reg_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = * FLD (i_rm);
  tmp_addr = * FLD (i_rn);
  {
    HI opval = TRUNCSIHI (* FLD (i_rd));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMHI (pc, tmp_addr, opval);
  }
  tmp_addr = ADDSI (* FLD (i_rn), tmp_offset);
  {
    SI opval = tmp_addr;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rn) = opval;
  }
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** ldrsb-pre-dec-imm-offset: FIXME

sem_status
arm_sem_ldrsb_pre_dec_imm_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_strh_pre_dec_imm_offset.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = FLD (i_hdt_offset8);
  tmp_addr = SUBSI (* FLD (i_rn), tmp_offset);
if (EQSI (FLD (f_rd), 15)) {
  {
    USI opval = EXTQISI (current_cpu->GETMEMQI (pc, tmp_addr));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
} else {
  {
    SI opval = EXTQISI (current_cpu->GETMEMQI (pc, tmp_addr));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
}
((void) 0); /*nop*/
((void) 0); /*nop*/
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** ldrsb-pre-dec-reg-offset: FIXME

sem_status
arm_sem_ldrsb_pre_dec_reg_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = * FLD (i_rm);
  tmp_addr = SUBSI (* FLD (i_rn), tmp_offset);
if (EQSI (FLD (f_rd), 15)) {
  {
    USI opval = EXTQISI (current_cpu->GETMEMQI (pc, tmp_addr));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
} else {
  {
    SI opval = EXTQISI (current_cpu->GETMEMQI (pc, tmp_addr));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
}
((void) 0); /*nop*/
((void) 0); /*nop*/
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** ldrsb-pre-inc-imm-offset: FIXME

sem_status
arm_sem_ldrsb_pre_inc_imm_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_strh_pre_dec_imm_offset.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = FLD (i_hdt_offset8);
  tmp_addr = ADDSI (* FLD (i_rn), tmp_offset);
if (EQSI (FLD (f_rd), 15)) {
  {
    USI opval = EXTQISI (current_cpu->GETMEMQI (pc, tmp_addr));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
} else {
  {
    SI opval = EXTQISI (current_cpu->GETMEMQI (pc, tmp_addr));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
}
((void) 0); /*nop*/
((void) 0); /*nop*/
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** ldrsb-pre-inc-reg-offset: FIXME

sem_status
arm_sem_ldrsb_pre_inc_reg_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = * FLD (i_rm);
  tmp_addr = ADDSI (* FLD (i_rn), tmp_offset);
if (EQSI (FLD (f_rd), 15)) {
  {
    USI opval = EXTQISI (current_cpu->GETMEMQI (pc, tmp_addr));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
} else {
  {
    SI opval = EXTQISI (current_cpu->GETMEMQI (pc, tmp_addr));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
}
((void) 0); /*nop*/
((void) 0); /*nop*/
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** ldrsb-pre-dec-wb-imm-offset: FIXME

sem_status
arm_sem_ldrsb_pre_dec_wb_imm_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_strh_pre_dec_imm_offset.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = FLD (i_hdt_offset8);
  tmp_addr = SUBSI (* FLD (i_rn), tmp_offset);
if (EQSI (FLD (f_rd), 15)) {
  {
    USI opval = EXTQISI (current_cpu->GETMEMQI (pc, tmp_addr));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
} else {
  {
    SI opval = EXTQISI (current_cpu->GETMEMQI (pc, tmp_addr));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
}
((void) 0); /*nop*/
  {
    SI opval = tmp_addr;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rn) = opval;
  }
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** ldrsb-pre-dec-wb-reg-offset: FIXME

sem_status
arm_sem_ldrsb_pre_dec_wb_reg_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = * FLD (i_rm);
  tmp_addr = SUBSI (* FLD (i_rn), tmp_offset);
if (EQSI (FLD (f_rd), 15)) {
  {
    USI opval = EXTQISI (current_cpu->GETMEMQI (pc, tmp_addr));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
} else {
  {
    SI opval = EXTQISI (current_cpu->GETMEMQI (pc, tmp_addr));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
}
((void) 0); /*nop*/
  {
    SI opval = tmp_addr;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rn) = opval;
  }
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** ldrsb-pre-inc-wb-imm-offset: FIXME

sem_status
arm_sem_ldrsb_pre_inc_wb_imm_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_strh_pre_dec_imm_offset.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = FLD (i_hdt_offset8);
  tmp_addr = ADDSI (* FLD (i_rn), tmp_offset);
if (EQSI (FLD (f_rd), 15)) {
  {
    USI opval = EXTQISI (current_cpu->GETMEMQI (pc, tmp_addr));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
} else {
  {
    SI opval = EXTQISI (current_cpu->GETMEMQI (pc, tmp_addr));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
}
((void) 0); /*nop*/
  {
    SI opval = tmp_addr;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rn) = opval;
  }
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** ldrsb-pre-inc-wb-reg-offset: FIXME

sem_status
arm_sem_ldrsb_pre_inc_wb_reg_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = * FLD (i_rm);
  tmp_addr = ADDSI (* FLD (i_rn), tmp_offset);
if (EQSI (FLD (f_rd), 15)) {
  {
    USI opval = EXTQISI (current_cpu->GETMEMQI (pc, tmp_addr));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
} else {
  {
    SI opval = EXTQISI (current_cpu->GETMEMQI (pc, tmp_addr));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
}
((void) 0); /*nop*/
  {
    SI opval = tmp_addr;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rn) = opval;
  }
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** ldrsb-post-dec-imm-offset: FIXME

sem_status
arm_sem_ldrsb_post_dec_imm_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_strh_pre_dec_imm_offset.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = FLD (i_hdt_offset8);
  tmp_addr = * FLD (i_rn);
if (EQSI (FLD (f_rd), 15)) {
  {
    USI opval = EXTQISI (current_cpu->GETMEMQI (pc, tmp_addr));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
} else {
  {
    SI opval = EXTQISI (current_cpu->GETMEMQI (pc, tmp_addr));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
}
  tmp_addr = SUBSI (* FLD (i_rn), tmp_offset);
  {
    SI opval = tmp_addr;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rn) = opval;
  }
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** ldrsb-post-dec-reg-offset: FIXME

sem_status
arm_sem_ldrsb_post_dec_reg_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = * FLD (i_rm);
  tmp_addr = * FLD (i_rn);
if (EQSI (FLD (f_rd), 15)) {
  {
    USI opval = EXTQISI (current_cpu->GETMEMQI (pc, tmp_addr));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
} else {
  {
    SI opval = EXTQISI (current_cpu->GETMEMQI (pc, tmp_addr));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
}
  tmp_addr = SUBSI (* FLD (i_rn), tmp_offset);
  {
    SI opval = tmp_addr;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rn) = opval;
  }
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** ldrsb-post-inc-imm-offset: FIXME

sem_status
arm_sem_ldrsb_post_inc_imm_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_strh_pre_dec_imm_offset.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = FLD (i_hdt_offset8);
  tmp_addr = * FLD (i_rn);
if (EQSI (FLD (f_rd), 15)) {
  {
    USI opval = EXTQISI (current_cpu->GETMEMQI (pc, tmp_addr));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
} else {
  {
    SI opval = EXTQISI (current_cpu->GETMEMQI (pc, tmp_addr));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
}
  tmp_addr = ADDSI (* FLD (i_rn), tmp_offset);
  {
    SI opval = tmp_addr;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rn) = opval;
  }
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** ldrsb-post-inc-reg-offset: FIXME

sem_status
arm_sem_ldrsb_post_inc_reg_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = * FLD (i_rm);
  tmp_addr = * FLD (i_rn);
if (EQSI (FLD (f_rd), 15)) {
  {
    USI opval = EXTQISI (current_cpu->GETMEMQI (pc, tmp_addr));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
} else {
  {
    SI opval = EXTQISI (current_cpu->GETMEMQI (pc, tmp_addr));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
}
  tmp_addr = ADDSI (* FLD (i_rn), tmp_offset);
  {
    SI opval = tmp_addr;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rn) = opval;
  }
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** ldrh-pre-dec-imm-offset: FIXME

sem_status
arm_sem_ldrh_pre_dec_imm_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_strh_pre_dec_imm_offset.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = FLD (i_hdt_offset8);
  tmp_addr = SUBSI (* FLD (i_rn), tmp_offset);
if (EQSI (FLD (f_rd), 15)) {
  {
    USI opval = ZEXTHISI (current_cpu->GETMEMHI (pc, tmp_addr));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
} else {
  {
    SI opval = ZEXTHISI (current_cpu->GETMEMHI (pc, tmp_addr));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
}
((void) 0); /*nop*/
((void) 0); /*nop*/
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** ldrh-pre-dec-reg-offset: FIXME

sem_status
arm_sem_ldrh_pre_dec_reg_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = * FLD (i_rm);
  tmp_addr = SUBSI (* FLD (i_rn), tmp_offset);
if (EQSI (FLD (f_rd), 15)) {
  {
    USI opval = ZEXTHISI (current_cpu->GETMEMHI (pc, tmp_addr));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
} else {
  {
    SI opval = ZEXTHISI (current_cpu->GETMEMHI (pc, tmp_addr));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
}
((void) 0); /*nop*/
((void) 0); /*nop*/
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** ldrh-pre-inc-imm-offset: FIXME

sem_status
arm_sem_ldrh_pre_inc_imm_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_strh_pre_dec_imm_offset.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = FLD (i_hdt_offset8);
  tmp_addr = ADDSI (* FLD (i_rn), tmp_offset);
if (EQSI (FLD (f_rd), 15)) {
  {
    USI opval = ZEXTHISI (current_cpu->GETMEMHI (pc, tmp_addr));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
} else {
  {
    SI opval = ZEXTHISI (current_cpu->GETMEMHI (pc, tmp_addr));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
}
((void) 0); /*nop*/
((void) 0); /*nop*/
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** ldrh-pre-inc-reg-offset: FIXME

sem_status
arm_sem_ldrh_pre_inc_reg_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = * FLD (i_rm);
  tmp_addr = ADDSI (* FLD (i_rn), tmp_offset);
if (EQSI (FLD (f_rd), 15)) {
  {
    USI opval = ZEXTHISI (current_cpu->GETMEMHI (pc, tmp_addr));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
} else {
  {
    SI opval = ZEXTHISI (current_cpu->GETMEMHI (pc, tmp_addr));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
}
((void) 0); /*nop*/
((void) 0); /*nop*/
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** ldrh-pre-dec-wb-imm-offset: FIXME

sem_status
arm_sem_ldrh_pre_dec_wb_imm_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_strh_pre_dec_imm_offset.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = FLD (i_hdt_offset8);
  tmp_addr = SUBSI (* FLD (i_rn), tmp_offset);
if (EQSI (FLD (f_rd), 15)) {
  {
    USI opval = ZEXTHISI (current_cpu->GETMEMHI (pc, tmp_addr));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
} else {
  {
    SI opval = ZEXTHISI (current_cpu->GETMEMHI (pc, tmp_addr));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
}
((void) 0); /*nop*/
  {
    SI opval = tmp_addr;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rn) = opval;
  }
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** ldrh-pre-dec-wb-reg-offset: FIXME

sem_status
arm_sem_ldrh_pre_dec_wb_reg_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = * FLD (i_rm);
  tmp_addr = SUBSI (* FLD (i_rn), tmp_offset);
if (EQSI (FLD (f_rd), 15)) {
  {
    USI opval = ZEXTHISI (current_cpu->GETMEMHI (pc, tmp_addr));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
} else {
  {
    SI opval = ZEXTHISI (current_cpu->GETMEMHI (pc, tmp_addr));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
}
((void) 0); /*nop*/
  {
    SI opval = tmp_addr;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rn) = opval;
  }
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** ldrh-pre-inc-wb-imm-offset: FIXME

sem_status
arm_sem_ldrh_pre_inc_wb_imm_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_strh_pre_dec_imm_offset.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = FLD (i_hdt_offset8);
  tmp_addr = ADDSI (* FLD (i_rn), tmp_offset);
if (EQSI (FLD (f_rd), 15)) {
  {
    USI opval = ZEXTHISI (current_cpu->GETMEMHI (pc, tmp_addr));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
} else {
  {
    SI opval = ZEXTHISI (current_cpu->GETMEMHI (pc, tmp_addr));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
}
((void) 0); /*nop*/
  {
    SI opval = tmp_addr;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rn) = opval;
  }
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** ldrh-pre-inc-wb-reg-offset: FIXME

sem_status
arm_sem_ldrh_pre_inc_wb_reg_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = * FLD (i_rm);
  tmp_addr = ADDSI (* FLD (i_rn), tmp_offset);
if (EQSI (FLD (f_rd), 15)) {
  {
    USI opval = ZEXTHISI (current_cpu->GETMEMHI (pc, tmp_addr));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
} else {
  {
    SI opval = ZEXTHISI (current_cpu->GETMEMHI (pc, tmp_addr));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
}
((void) 0); /*nop*/
  {
    SI opval = tmp_addr;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rn) = opval;
  }
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** ldrh-post-dec-imm-offset: FIXME

sem_status
arm_sem_ldrh_post_dec_imm_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_strh_pre_dec_imm_offset.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = FLD (i_hdt_offset8);
  tmp_addr = * FLD (i_rn);
if (EQSI (FLD (f_rd), 15)) {
  {
    USI opval = ZEXTHISI (current_cpu->GETMEMHI (pc, tmp_addr));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
} else {
  {
    SI opval = ZEXTHISI (current_cpu->GETMEMHI (pc, tmp_addr));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
}
  tmp_addr = SUBSI (* FLD (i_rn), tmp_offset);
  {
    SI opval = tmp_addr;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rn) = opval;
  }
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** ldrh-post-dec-reg-offset: FIXME

sem_status
arm_sem_ldrh_post_dec_reg_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = * FLD (i_rm);
  tmp_addr = * FLD (i_rn);
if (EQSI (FLD (f_rd), 15)) {
  {
    USI opval = ZEXTHISI (current_cpu->GETMEMHI (pc, tmp_addr));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
} else {
  {
    SI opval = ZEXTHISI (current_cpu->GETMEMHI (pc, tmp_addr));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
}
  tmp_addr = SUBSI (* FLD (i_rn), tmp_offset);
  {
    SI opval = tmp_addr;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rn) = opval;
  }
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** ldrh-post-inc-imm-offset: FIXME

sem_status
arm_sem_ldrh_post_inc_imm_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_strh_pre_dec_imm_offset.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = FLD (i_hdt_offset8);
  tmp_addr = * FLD (i_rn);
if (EQSI (FLD (f_rd), 15)) {
  {
    USI opval = ZEXTHISI (current_cpu->GETMEMHI (pc, tmp_addr));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
} else {
  {
    SI opval = ZEXTHISI (current_cpu->GETMEMHI (pc, tmp_addr));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
}
  tmp_addr = ADDSI (* FLD (i_rn), tmp_offset);
  {
    SI opval = tmp_addr;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rn) = opval;
  }
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** ldrh-post-inc-reg-offset: FIXME

sem_status
arm_sem_ldrh_post_inc_reg_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = * FLD (i_rm);
  tmp_addr = * FLD (i_rn);
if (EQSI (FLD (f_rd), 15)) {
  {
    USI opval = ZEXTHISI (current_cpu->GETMEMHI (pc, tmp_addr));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
} else {
  {
    SI opval = ZEXTHISI (current_cpu->GETMEMHI (pc, tmp_addr));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
}
  tmp_addr = ADDSI (* FLD (i_rn), tmp_offset);
  {
    SI opval = tmp_addr;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rn) = opval;
  }
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** ldrsh-pre-dec-imm-offset: FIXME

sem_status
arm_sem_ldrsh_pre_dec_imm_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_strh_pre_dec_imm_offset.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = FLD (i_hdt_offset8);
  tmp_addr = SUBSI (* FLD (i_rn), tmp_offset);
if (EQSI (FLD (f_rd), 15)) {
  {
    USI opval = EXTHISI (current_cpu->GETMEMHI (pc, tmp_addr));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
} else {
  {
    SI opval = EXTHISI (current_cpu->GETMEMHI (pc, tmp_addr));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
}
((void) 0); /*nop*/
((void) 0); /*nop*/
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** ldrsh-pre-dec-reg-offset: FIXME

sem_status
arm_sem_ldrsh_pre_dec_reg_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = * FLD (i_rm);
  tmp_addr = SUBSI (* FLD (i_rn), tmp_offset);
if (EQSI (FLD (f_rd), 15)) {
  {
    USI opval = EXTHISI (current_cpu->GETMEMHI (pc, tmp_addr));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
} else {
  {
    SI opval = EXTHISI (current_cpu->GETMEMHI (pc, tmp_addr));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
}
((void) 0); /*nop*/
((void) 0); /*nop*/
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** ldrsh-pre-inc-imm-offset: FIXME

sem_status
arm_sem_ldrsh_pre_inc_imm_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_strh_pre_dec_imm_offset.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = FLD (i_hdt_offset8);
  tmp_addr = ADDSI (* FLD (i_rn), tmp_offset);
if (EQSI (FLD (f_rd), 15)) {
  {
    USI opval = EXTHISI (current_cpu->GETMEMHI (pc, tmp_addr));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
} else {
  {
    SI opval = EXTHISI (current_cpu->GETMEMHI (pc, tmp_addr));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
}
((void) 0); /*nop*/
((void) 0); /*nop*/
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** ldrsh-pre-inc-reg-offset: FIXME

sem_status
arm_sem_ldrsh_pre_inc_reg_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = * FLD (i_rm);
  tmp_addr = ADDSI (* FLD (i_rn), tmp_offset);
if (EQSI (FLD (f_rd), 15)) {
  {
    USI opval = EXTHISI (current_cpu->GETMEMHI (pc, tmp_addr));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
} else {
  {
    SI opval = EXTHISI (current_cpu->GETMEMHI (pc, tmp_addr));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
}
((void) 0); /*nop*/
((void) 0); /*nop*/
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** ldrsh-pre-dec-wb-imm-offset: FIXME

sem_status
arm_sem_ldrsh_pre_dec_wb_imm_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_strh_pre_dec_imm_offset.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = FLD (i_hdt_offset8);
  tmp_addr = SUBSI (* FLD (i_rn), tmp_offset);
if (EQSI (FLD (f_rd), 15)) {
  {
    USI opval = EXTHISI (current_cpu->GETMEMHI (pc, tmp_addr));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
} else {
  {
    SI opval = EXTHISI (current_cpu->GETMEMHI (pc, tmp_addr));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
}
((void) 0); /*nop*/
  {
    SI opval = tmp_addr;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rn) = opval;
  }
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** ldrsh-pre-dec-wb-reg-offset: FIXME

sem_status
arm_sem_ldrsh_pre_dec_wb_reg_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = * FLD (i_rm);
  tmp_addr = SUBSI (* FLD (i_rn), tmp_offset);
if (EQSI (FLD (f_rd), 15)) {
  {
    USI opval = EXTHISI (current_cpu->GETMEMHI (pc, tmp_addr));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
} else {
  {
    SI opval = EXTHISI (current_cpu->GETMEMHI (pc, tmp_addr));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
}
((void) 0); /*nop*/
  {
    SI opval = tmp_addr;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rn) = opval;
  }
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** ldrsh-pre-inc-wb-imm-offset: FIXME

sem_status
arm_sem_ldrsh_pre_inc_wb_imm_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_strh_pre_dec_imm_offset.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = FLD (i_hdt_offset8);
  tmp_addr = ADDSI (* FLD (i_rn), tmp_offset);
if (EQSI (FLD (f_rd), 15)) {
  {
    USI opval = EXTHISI (current_cpu->GETMEMHI (pc, tmp_addr));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
} else {
  {
    SI opval = EXTHISI (current_cpu->GETMEMHI (pc, tmp_addr));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
}
((void) 0); /*nop*/
  {
    SI opval = tmp_addr;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rn) = opval;
  }
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** ldrsh-pre-inc-wb-reg-offset: FIXME

sem_status
arm_sem_ldrsh_pre_inc_wb_reg_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = * FLD (i_rm);
  tmp_addr = ADDSI (* FLD (i_rn), tmp_offset);
if (EQSI (FLD (f_rd), 15)) {
  {
    USI opval = EXTHISI (current_cpu->GETMEMHI (pc, tmp_addr));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
} else {
  {
    SI opval = EXTHISI (current_cpu->GETMEMHI (pc, tmp_addr));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
}
((void) 0); /*nop*/
  {
    SI opval = tmp_addr;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rn) = opval;
  }
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** ldrsh-post-dec-imm-offset: FIXME

sem_status
arm_sem_ldrsh_post_dec_imm_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_strh_pre_dec_imm_offset.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = FLD (i_hdt_offset8);
  tmp_addr = * FLD (i_rn);
if (EQSI (FLD (f_rd), 15)) {
  {
    USI opval = EXTHISI (current_cpu->GETMEMHI (pc, tmp_addr));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
} else {
  {
    SI opval = EXTHISI (current_cpu->GETMEMHI (pc, tmp_addr));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
}
  tmp_addr = SUBSI (* FLD (i_rn), tmp_offset);
  {
    SI opval = tmp_addr;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rn) = opval;
  }
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** ldrsh-post-dec-reg-offset: FIXME

sem_status
arm_sem_ldrsh_post_dec_reg_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = * FLD (i_rm);
  tmp_addr = * FLD (i_rn);
if (EQSI (FLD (f_rd), 15)) {
  {
    USI opval = EXTHISI (current_cpu->GETMEMHI (pc, tmp_addr));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
} else {
  {
    SI opval = EXTHISI (current_cpu->GETMEMHI (pc, tmp_addr));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
}
  tmp_addr = SUBSI (* FLD (i_rn), tmp_offset);
  {
    SI opval = tmp_addr;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rn) = opval;
  }
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** ldrsh-post-inc-imm-offset: FIXME

sem_status
arm_sem_ldrsh_post_inc_imm_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_strh_pre_dec_imm_offset.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = FLD (i_hdt_offset8);
  tmp_addr = * FLD (i_rn);
if (EQSI (FLD (f_rd), 15)) {
  {
    USI opval = EXTHISI (current_cpu->GETMEMHI (pc, tmp_addr));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
} else {
  {
    SI opval = EXTHISI (current_cpu->GETMEMHI (pc, tmp_addr));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
}
  tmp_addr = ADDSI (* FLD (i_rn), tmp_offset);
  {
    SI opval = tmp_addr;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rn) = opval;
  }
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** ldrsh-post-inc-reg-offset: FIXME

sem_status
arm_sem_ldrsh_post_inc_reg_offset (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  SI tmp_offset;
  tmp_offset = * FLD (i_rm);
  tmp_addr = * FLD (i_rn);
if (EQSI (FLD (f_rd), 15)) {
  {
    USI opval = EXTHISI (current_cpu->GETMEMHI (pc, tmp_addr));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
} else {
  {
    SI opval = EXTHISI (current_cpu->GETMEMHI (pc, tmp_addr));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
}
  tmp_addr = ADDSI (* FLD (i_rn), tmp_offset);
  {
    SI opval = tmp_addr;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rn) = opval;
  }
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** mul: mul$cond${set-cc?} ${mul-rd},$rm,$rs

sem_status
arm_sem_mul (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_mla.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_result;
  tmp_result = MULSI (* FLD (i_rm), * FLD (i_rs));
  {
    SI opval = tmp_result;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_mul_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_mul_rd) = opval;
  }
if (FLD (f_set_cc_)) {
{
  {
    BI opval = EQSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "zbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "nbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_nbit = opval;
  }
}
}
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** mla: mla$cond${set-cc?} ${mul-rd},$rm,$rs,${mul-rn}

sem_status
arm_sem_mla (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_mla.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_result;
  {
    SI opval = ADDSI (MULSI (* FLD (i_rm), * FLD (i_rs)), * FLD (i_mul_rn));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_mul_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_mul_rd) = opval;
  }
if (FLD (f_set_cc_)) {
{
  {
    BI opval = EQSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "zbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "nbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_nbit = opval;
  }
}
}
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** umull: umull$cond${set-cc?} $rdlo,$rdhi,$rm,$rs

sem_status
arm_sem_umull (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_umull.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  DI tmp_mul_result;
  SI tmp_hi;
  SI tmp_lo;
  tmp_mul_result = MULDI (ZEXTSIDI (* FLD (i_rs)), ZEXTSIDI (* FLD (i_rm)));
  {
    SI opval = SUBWORDDISI (tmp_mul_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rdhi) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rdhi) = opval;
  }
  {
    SI opval = SUBWORDDISI (tmp_mul_result, 1);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rdlo) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rdlo) = opval;
  }
if (FLD (f_set_cc_)) {
{
  {
    BI opval = EQDI (tmp_mul_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "zbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTDI (tmp_mul_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "nbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_nbit = opval;
  }
}
}
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** umlal: umlal$cond${set-cc?} $rdlo,$rdhi,$rm,$rs

sem_status
arm_sem_umlal (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_umull.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  DI tmp_mul_result;
  SI tmp_hi;
  SI tmp_lo;
  tmp_mul_result = JOINSIDI (* FLD (i_rdhi), * FLD (i_rdlo));
  tmp_mul_result = ADDDI (MULDI (ZEXTSIDI (* FLD (i_rs)), ZEXTSIDI (* FLD (i_rm))), tmp_mul_result);
  {
    SI opval = SUBWORDDISI (tmp_mul_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rdhi) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rdhi) = opval;
  }
  {
    SI opval = SUBWORDDISI (tmp_mul_result, 1);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rdlo) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rdlo) = opval;
  }
if (FLD (f_set_cc_)) {
{
  {
    BI opval = EQDI (tmp_mul_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "zbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTDI (tmp_mul_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "nbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_nbit = opval;
  }
}
}
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** smull: smull$cond${set-cc?} $rdlo,$rdhi,$rm,$rs

sem_status
arm_sem_smull (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_umull.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  DI tmp_mul_result;
  SI tmp_hi;
  SI tmp_lo;
  tmp_mul_result = MULDI (EXTSIDI (* FLD (i_rs)), EXTSIDI (* FLD (i_rm)));
  {
    SI opval = SUBWORDDISI (tmp_mul_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rdhi) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rdhi) = opval;
  }
  {
    SI opval = SUBWORDDISI (tmp_mul_result, 1);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rdlo) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rdlo) = opval;
  }
if (FLD (f_set_cc_)) {
{
  {
    BI opval = EQDI (tmp_mul_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "zbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTDI (tmp_mul_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "nbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_nbit = opval;
  }
}
}
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** smlal: smlal$cond${set-cc?} $rdlo,$rdhi,$rm,$rs

sem_status
arm_sem_smlal (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_umull.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  DI tmp_mul_result;
  SI tmp_hi;
  SI tmp_lo;
  tmp_mul_result = JOINSIDI (* FLD (i_rdhi), * FLD (i_rdlo));
  tmp_mul_result = ADDDI (MULDI (EXTSIDI (* FLD (i_rs)), EXTSIDI (* FLD (i_rm))), tmp_mul_result);
  {
    SI opval = SUBWORDDISI (tmp_mul_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rdhi) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rdhi) = opval;
  }
  {
    SI opval = SUBWORDDISI (tmp_mul_result, 1);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rdlo) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rdlo) = opval;
  }
if (FLD (f_set_cc_)) {
{
  {
    BI opval = EQDI (tmp_mul_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "zbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTDI (tmp_mul_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "nbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_nbit = opval;
  }
}
}
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** swp: swp$cond $rd,$rm,[$rn]

sem_status
arm_sem_swp (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_temp;
  tmp_temp = current_cpu->GETMEMSI (pc, * FLD (i_rn));
  {
    SI opval = * FLD (i_rm);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) * FLD (i_rn) << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, * FLD (i_rn), opval);
  }
  {
    SI opval = tmp_temp;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** swpb: swpb${cond}b $rd,$rm,[$rn]

sem_status
arm_sem_swpb (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_temp;
  tmp_temp = current_cpu->GETMEMQI (pc, * FLD (i_rn));
  {
    QI opval = * FLD (i_rm);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) * FLD (i_rn) << dec << ']' << ":=0x" << hex << (SI) opval << dec << "  ";
    current_cpu->SETMEMQI (pc, * FLD (i_rn), opval);
  }
  {
    SI opval = tmp_temp;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** swi: swi$cond ${swi-comment}

sem_status
arm_sem_swi (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_swi.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

  {
    USI opval = current_cpu->arm_swi (pc, FLD (f_swi_comment));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** and-reg/imm-shift: and$cond${set-cc?} $rd,$rn,$rm,${operand2-shifttype} ${operand2-shiftimm}

sem_status
arm_sem_and_reg_imm_shift (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_operand2;
  BI tmp_carry_out;
  SI tmp_result;
  tmp_operand2 = current_cpu->compute_operand2_immshift (* FLD (i_rm), FLD (f_operand2_shifttype), FLD (f_operand2_shiftimm));
  tmp_carry_out = current_cpu->compute_carry_out_immshift (* FLD (i_rm), FLD (f_operand2_shifttype), FLD (f_operand2_shiftimm), current_cpu->hardware.h_cbit);
  tmp_result = ANDSI (* FLD (i_rn), tmp_operand2);
if (EQSI (FLD (f_rd), 15)) {
{
  {
    USI opval = tmp_result;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
if (FLD (f_set_cc_)) {
  {
    SI opval = current_cpu->h_spsr_get ();
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cpsr" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->h_cpsr_set (opval);
  }
}
}
} else {
{
  {
    SI opval = tmp_result;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
if (FLD (f_set_cc_)) {
{
{
  {
    BI opval = EQSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "zbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "nbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_nbit = opval;
  }
}
  {
    BI opval = tmp_carry_out;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_cbit = opval;
  }
}
}
}
}
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** and-reg/reg-shift: and$cond${set-cc?} $rd,$rn,$rm,${operand2-shifttype} ${operand2-shiftreg}

sem_status
arm_sem_and_reg_reg_shift (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_reg_reg_shift.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_operand2;
  BI tmp_carry_out;
  SI tmp_result;
  tmp_operand2 = current_cpu->compute_operand2_regshift (* FLD (i_rm), FLD (f_operand2_shifttype), * FLD (i_operand2_shiftreg));
  tmp_carry_out = current_cpu->compute_carry_out_regshift (* FLD (i_rm), FLD (f_operand2_shifttype), * FLD (i_operand2_shiftreg), current_cpu->hardware.h_cbit);
  tmp_result = ANDSI (* FLD (i_rn), tmp_operand2);
if (EQSI (FLD (f_rd), 15)) {
{
  {
    USI opval = tmp_result;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
if (FLD (f_set_cc_)) {
  {
    SI opval = current_cpu->h_spsr_get ();
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cpsr" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->h_cpsr_set (opval);
  }
}
}
} else {
{
  {
    SI opval = tmp_result;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
if (FLD (f_set_cc_)) {
{
{
  {
    BI opval = EQSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "zbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "nbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_nbit = opval;
  }
}
  {
    BI opval = tmp_carry_out;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_cbit = opval;
  }
}
}
}
}
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** and-imm: and$cond${set-cc?} $rd,$rn,$imm12

sem_status
arm_sem_and_imm (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_imm.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_result;
  tmp_result = ANDSI (* FLD (i_rn), FLD (f_imm12));
if (EQSI (FLD (f_rd), 15)) {
{
  {
    USI opval = tmp_result;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
if (FLD (f_set_cc_)) {
  {
    SI opval = current_cpu->h_spsr_get ();
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cpsr" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->h_cpsr_set (opval);
  }
}
}
} else {
{
  {
    SI opval = tmp_result;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
if (FLD (f_set_cc_)) {
{
  {
    BI opval = EQSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "zbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "nbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_nbit = opval;
  }
}
}
}
}
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** orr-reg/imm-shift: orr$cond${set-cc?} $rd,$rn,$rm,${operand2-shifttype} ${operand2-shiftimm}

sem_status
arm_sem_orr_reg_imm_shift (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_operand2;
  BI tmp_carry_out;
  SI tmp_result;
  tmp_operand2 = current_cpu->compute_operand2_immshift (* FLD (i_rm), FLD (f_operand2_shifttype), FLD (f_operand2_shiftimm));
  tmp_carry_out = current_cpu->compute_carry_out_immshift (* FLD (i_rm), FLD (f_operand2_shifttype), FLD (f_operand2_shiftimm), current_cpu->hardware.h_cbit);
  tmp_result = ORSI (* FLD (i_rn), tmp_operand2);
if (EQSI (FLD (f_rd), 15)) {
{
  {
    USI opval = tmp_result;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
if (FLD (f_set_cc_)) {
  {
    SI opval = current_cpu->h_spsr_get ();
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cpsr" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->h_cpsr_set (opval);
  }
}
}
} else {
{
  {
    SI opval = tmp_result;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
if (FLD (f_set_cc_)) {
{
{
  {
    BI opval = EQSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "zbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "nbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_nbit = opval;
  }
}
  {
    BI opval = tmp_carry_out;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_cbit = opval;
  }
}
}
}
}
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** orr-reg/reg-shift: orr$cond${set-cc?} $rd,$rn,$rm,${operand2-shifttype} ${operand2-shiftreg}

sem_status
arm_sem_orr_reg_reg_shift (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_reg_reg_shift.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_operand2;
  BI tmp_carry_out;
  SI tmp_result;
  tmp_operand2 = current_cpu->compute_operand2_regshift (* FLD (i_rm), FLD (f_operand2_shifttype), * FLD (i_operand2_shiftreg));
  tmp_carry_out = current_cpu->compute_carry_out_regshift (* FLD (i_rm), FLD (f_operand2_shifttype), * FLD (i_operand2_shiftreg), current_cpu->hardware.h_cbit);
  tmp_result = ORSI (* FLD (i_rn), tmp_operand2);
if (EQSI (FLD (f_rd), 15)) {
{
  {
    USI opval = tmp_result;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
if (FLD (f_set_cc_)) {
  {
    SI opval = current_cpu->h_spsr_get ();
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cpsr" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->h_cpsr_set (opval);
  }
}
}
} else {
{
  {
    SI opval = tmp_result;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
if (FLD (f_set_cc_)) {
{
{
  {
    BI opval = EQSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "zbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "nbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_nbit = opval;
  }
}
  {
    BI opval = tmp_carry_out;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_cbit = opval;
  }
}
}
}
}
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** orr-imm: orr$cond${set-cc?} $rd,$rn,$imm12

sem_status
arm_sem_orr_imm (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_imm.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_result;
  tmp_result = ORSI (* FLD (i_rn), FLD (f_imm12));
if (EQSI (FLD (f_rd), 15)) {
{
  {
    USI opval = tmp_result;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
if (FLD (f_set_cc_)) {
  {
    SI opval = current_cpu->h_spsr_get ();
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cpsr" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->h_cpsr_set (opval);
  }
}
}
} else {
{
  {
    SI opval = tmp_result;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
if (FLD (f_set_cc_)) {
{
  {
    BI opval = EQSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "zbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "nbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_nbit = opval;
  }
}
}
}
}
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** eor-reg/imm-shift: eor$cond${set-cc?} $rd,$rn,$rm,${operand2-shifttype} ${operand2-shiftimm}

sem_status
arm_sem_eor_reg_imm_shift (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_operand2;
  BI tmp_carry_out;
  SI tmp_result;
  tmp_operand2 = current_cpu->compute_operand2_immshift (* FLD (i_rm), FLD (f_operand2_shifttype), FLD (f_operand2_shiftimm));
  tmp_carry_out = current_cpu->compute_carry_out_immshift (* FLD (i_rm), FLD (f_operand2_shifttype), FLD (f_operand2_shiftimm), current_cpu->hardware.h_cbit);
  tmp_result = XORSI (* FLD (i_rn), tmp_operand2);
if (EQSI (FLD (f_rd), 15)) {
{
  {
    USI opval = tmp_result;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
if (FLD (f_set_cc_)) {
  {
    SI opval = current_cpu->h_spsr_get ();
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cpsr" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->h_cpsr_set (opval);
  }
}
}
} else {
{
  {
    SI opval = tmp_result;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
if (FLD (f_set_cc_)) {
{
{
  {
    BI opval = EQSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "zbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "nbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_nbit = opval;
  }
}
  {
    BI opval = tmp_carry_out;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_cbit = opval;
  }
}
}
}
}
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** eor-reg/reg-shift: eor$cond${set-cc?} $rd,$rn,$rm,${operand2-shifttype} ${operand2-shiftreg}

sem_status
arm_sem_eor_reg_reg_shift (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_reg_reg_shift.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_operand2;
  BI tmp_carry_out;
  SI tmp_result;
  tmp_operand2 = current_cpu->compute_operand2_regshift (* FLD (i_rm), FLD (f_operand2_shifttype), * FLD (i_operand2_shiftreg));
  tmp_carry_out = current_cpu->compute_carry_out_regshift (* FLD (i_rm), FLD (f_operand2_shifttype), * FLD (i_operand2_shiftreg), current_cpu->hardware.h_cbit);
  tmp_result = XORSI (* FLD (i_rn), tmp_operand2);
if (EQSI (FLD (f_rd), 15)) {
{
  {
    USI opval = tmp_result;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
if (FLD (f_set_cc_)) {
  {
    SI opval = current_cpu->h_spsr_get ();
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cpsr" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->h_cpsr_set (opval);
  }
}
}
} else {
{
  {
    SI opval = tmp_result;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
if (FLD (f_set_cc_)) {
{
{
  {
    BI opval = EQSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "zbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "nbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_nbit = opval;
  }
}
  {
    BI opval = tmp_carry_out;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_cbit = opval;
  }
}
}
}
}
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** eor-imm: eor$cond${set-cc?} $rd,$rn,$imm12

sem_status
arm_sem_eor_imm (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_imm.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_result;
  tmp_result = XORSI (* FLD (i_rn), FLD (f_imm12));
if (EQSI (FLD (f_rd), 15)) {
{
  {
    USI opval = tmp_result;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
if (FLD (f_set_cc_)) {
  {
    SI opval = current_cpu->h_spsr_get ();
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cpsr" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->h_cpsr_set (opval);
  }
}
}
} else {
{
  {
    SI opval = tmp_result;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
if (FLD (f_set_cc_)) {
{
  {
    BI opval = EQSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "zbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "nbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_nbit = opval;
  }
}
}
}
}
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** mov-reg/imm-shift: mov$cond${set-cc?} $rd,$rn,$rm,${operand2-shifttype} ${operand2-shiftimm}

sem_status
arm_sem_mov_reg_imm_shift (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_operand2;
  BI tmp_carry_out;
  SI tmp_result;
  tmp_operand2 = current_cpu->compute_operand2_immshift (* FLD (i_rm), FLD (f_operand2_shifttype), FLD (f_operand2_shiftimm));
  tmp_carry_out = current_cpu->compute_carry_out_immshift (* FLD (i_rm), FLD (f_operand2_shifttype), FLD (f_operand2_shiftimm), current_cpu->hardware.h_cbit);
  tmp_result = tmp_operand2;
if (EQSI (FLD (f_rd), 15)) {
{
  {
    USI opval = tmp_result;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
if (FLD (f_set_cc_)) {
  {
    SI opval = current_cpu->h_spsr_get ();
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cpsr" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->h_cpsr_set (opval);
  }
}
}
} else {
{
  {
    SI opval = tmp_result;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
if (FLD (f_set_cc_)) {
{
{
  {
    BI opval = EQSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "zbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "nbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_nbit = opval;
  }
}
  {
    BI opval = tmp_carry_out;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_cbit = opval;
  }
}
}
}
}
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** mov-reg/reg-shift: mov$cond${set-cc?} $rd,$rn,$rm,${operand2-shifttype} ${operand2-shiftreg}

sem_status
arm_sem_mov_reg_reg_shift (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_reg_reg_shift.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_operand2;
  BI tmp_carry_out;
  SI tmp_result;
  tmp_operand2 = current_cpu->compute_operand2_regshift (* FLD (i_rm), FLD (f_operand2_shifttype), * FLD (i_operand2_shiftreg));
  tmp_carry_out = current_cpu->compute_carry_out_regshift (* FLD (i_rm), FLD (f_operand2_shifttype), * FLD (i_operand2_shiftreg), current_cpu->hardware.h_cbit);
  tmp_result = tmp_operand2;
if (EQSI (FLD (f_rd), 15)) {
{
  {
    USI opval = tmp_result;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
if (FLD (f_set_cc_)) {
  {
    SI opval = current_cpu->h_spsr_get ();
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cpsr" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->h_cpsr_set (opval);
  }
}
}
} else {
{
  {
    SI opval = tmp_result;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
if (FLD (f_set_cc_)) {
{
{
  {
    BI opval = EQSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "zbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "nbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_nbit = opval;
  }
}
  {
    BI opval = tmp_carry_out;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_cbit = opval;
  }
}
}
}
}
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** mov-imm: mov$cond${set-cc?} $rd,$imm12

sem_status
arm_sem_mov_imm (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_imm.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_result;
  tmp_result = FLD (f_imm12);
if (EQSI (FLD (f_rd), 15)) {
{
  {
    USI opval = tmp_result;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
if (FLD (f_set_cc_)) {
  {
    SI opval = current_cpu->h_spsr_get ();
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cpsr" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->h_cpsr_set (opval);
  }
}
}
} else {
{
  {
    SI opval = tmp_result;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
if (FLD (f_set_cc_)) {
{
  {
    BI opval = EQSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "zbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "nbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_nbit = opval;
  }
}
}
}
}
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** bic-reg/imm-shift: bic$cond${set-cc?} $rd,$rn,$rm,${operand2-shifttype} ${operand2-shiftimm}

sem_status
arm_sem_bic_reg_imm_shift (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_operand2;
  BI tmp_carry_out;
  SI tmp_result;
  tmp_operand2 = current_cpu->compute_operand2_immshift (* FLD (i_rm), FLD (f_operand2_shifttype), FLD (f_operand2_shiftimm));
  tmp_carry_out = current_cpu->compute_carry_out_immshift (* FLD (i_rm), FLD (f_operand2_shifttype), FLD (f_operand2_shiftimm), current_cpu->hardware.h_cbit);
  tmp_result = ANDSI (* FLD (i_rn), INVSI (tmp_operand2));
if (EQSI (FLD (f_rd), 15)) {
{
  {
    USI opval = tmp_result;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
if (FLD (f_set_cc_)) {
  {
    SI opval = current_cpu->h_spsr_get ();
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cpsr" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->h_cpsr_set (opval);
  }
}
}
} else {
{
  {
    SI opval = tmp_result;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
if (FLD (f_set_cc_)) {
{
{
  {
    BI opval = EQSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "zbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "nbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_nbit = opval;
  }
}
  {
    BI opval = tmp_carry_out;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_cbit = opval;
  }
}
}
}
}
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** bic-reg/reg-shift: bic$cond${set-cc?} $rd,$rn,$rm,${operand2-shifttype} ${operand2-shiftreg}

sem_status
arm_sem_bic_reg_reg_shift (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_reg_reg_shift.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_operand2;
  BI tmp_carry_out;
  SI tmp_result;
  tmp_operand2 = current_cpu->compute_operand2_regshift (* FLD (i_rm), FLD (f_operand2_shifttype), * FLD (i_operand2_shiftreg));
  tmp_carry_out = current_cpu->compute_carry_out_regshift (* FLD (i_rm), FLD (f_operand2_shifttype), * FLD (i_operand2_shiftreg), current_cpu->hardware.h_cbit);
  tmp_result = ANDSI (* FLD (i_rn), INVSI (tmp_operand2));
if (EQSI (FLD (f_rd), 15)) {
{
  {
    USI opval = tmp_result;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
if (FLD (f_set_cc_)) {
  {
    SI opval = current_cpu->h_spsr_get ();
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cpsr" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->h_cpsr_set (opval);
  }
}
}
} else {
{
  {
    SI opval = tmp_result;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
if (FLD (f_set_cc_)) {
{
{
  {
    BI opval = EQSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "zbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "nbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_nbit = opval;
  }
}
  {
    BI opval = tmp_carry_out;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_cbit = opval;
  }
}
}
}
}
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** bic-imm: bic$cond${set-cc?} $rd,$rn,$imm12

sem_status
arm_sem_bic_imm (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_imm.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_result;
  tmp_result = ANDSI (* FLD (i_rn), INVSI (FLD (f_imm12)));
if (EQSI (FLD (f_rd), 15)) {
{
  {
    USI opval = tmp_result;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
if (FLD (f_set_cc_)) {
  {
    SI opval = current_cpu->h_spsr_get ();
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cpsr" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->h_cpsr_set (opval);
  }
}
}
} else {
{
  {
    SI opval = tmp_result;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
if (FLD (f_set_cc_)) {
{
  {
    BI opval = EQSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "zbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "nbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_nbit = opval;
  }
}
}
}
}
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** mvn-reg/imm-shift: mvn$cond${set-cc?} $rd,$rn,$rm,${operand2-shifttype} ${operand2-shiftimm}

sem_status
arm_sem_mvn_reg_imm_shift (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_operand2;
  BI tmp_carry_out;
  SI tmp_result;
  tmp_operand2 = current_cpu->compute_operand2_immshift (* FLD (i_rm), FLD (f_operand2_shifttype), FLD (f_operand2_shiftimm));
  tmp_carry_out = current_cpu->compute_carry_out_immshift (* FLD (i_rm), FLD (f_operand2_shifttype), FLD (f_operand2_shiftimm), current_cpu->hardware.h_cbit);
  tmp_result = INVSI (tmp_operand2);
if (EQSI (FLD (f_rd), 15)) {
{
  {
    USI opval = tmp_result;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
if (FLD (f_set_cc_)) {
  {
    SI opval = current_cpu->h_spsr_get ();
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cpsr" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->h_cpsr_set (opval);
  }
}
}
} else {
{
  {
    SI opval = tmp_result;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
if (FLD (f_set_cc_)) {
{
{
  {
    BI opval = EQSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "zbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "nbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_nbit = opval;
  }
}
  {
    BI opval = tmp_carry_out;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_cbit = opval;
  }
}
}
}
}
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** mvn-reg/reg-shift: mvn$cond${set-cc?} $rd,$rn,$rm,${operand2-shifttype} ${operand2-shiftreg}

sem_status
arm_sem_mvn_reg_reg_shift (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_reg_reg_shift.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_operand2;
  BI tmp_carry_out;
  SI tmp_result;
  tmp_operand2 = current_cpu->compute_operand2_regshift (* FLD (i_rm), FLD (f_operand2_shifttype), * FLD (i_operand2_shiftreg));
  tmp_carry_out = current_cpu->compute_carry_out_regshift (* FLD (i_rm), FLD (f_operand2_shifttype), * FLD (i_operand2_shiftreg), current_cpu->hardware.h_cbit);
  tmp_result = INVSI (tmp_operand2);
if (EQSI (FLD (f_rd), 15)) {
{
  {
    USI opval = tmp_result;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
if (FLD (f_set_cc_)) {
  {
    SI opval = current_cpu->h_spsr_get ();
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cpsr" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->h_cpsr_set (opval);
  }
}
}
} else {
{
  {
    SI opval = tmp_result;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
if (FLD (f_set_cc_)) {
{
{
  {
    BI opval = EQSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "zbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "nbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_nbit = opval;
  }
}
  {
    BI opval = tmp_carry_out;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_cbit = opval;
  }
}
}
}
}
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** mvn-imm: mvn$cond${set-cc?} $rd,$imm12

sem_status
arm_sem_mvn_imm (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_imm.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_result;
  tmp_result = INVSI (FLD (f_imm12));
if (EQSI (FLD (f_rd), 15)) {
{
  {
    USI opval = tmp_result;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
if (FLD (f_set_cc_)) {
  {
    SI opval = current_cpu->h_spsr_get ();
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cpsr" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->h_cpsr_set (opval);
  }
}
}
} else {
{
  {
    SI opval = tmp_result;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
if (FLD (f_set_cc_)) {
{
  {
    BI opval = EQSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "zbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "nbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_nbit = opval;
  }
}
}
}
}
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** add-reg/imm-shift: add$cond${set-cc?} $rd,$rn,$rm,${operand2-shifttype} ${operand2-shiftimm}

sem_status
arm_sem_add_reg_imm_shift (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_operand2;
  SI tmp_result;
  SI tmp_temp_op1;
  SI tmp_temp_op2;
  tmp_operand2 = current_cpu->compute_operand2_immshift (* FLD (i_rm), FLD (f_operand2_shifttype), FLD (f_operand2_shiftimm));
  tmp_temp_op1 = * FLD (i_rn);
  tmp_temp_op2 = tmp_operand2;
  tmp_result = ADDSI (* FLD (i_rn), tmp_operand2);
if (EQSI (FLD (f_rd), 15)) {
{
  {
    USI opval = tmp_result;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
if (FLD (f_set_cc_)) {
  {
    SI opval = current_cpu->h_spsr_get ();
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cpsr" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->h_cpsr_set (opval);
  }
}
}
} else {
{
  {
    SI opval = tmp_result;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
if (FLD (f_set_cc_)) {
{
  SI tmp_result;
  tmp_result = ADDCSI (tmp_temp_op1, tmp_temp_op2, 0);
{
  {
    BI opval = EQSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "zbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "nbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_nbit = opval;
  }
}
  {
    BI opval = ADDCFSI (tmp_temp_op1, tmp_temp_op2, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_cbit = opval;
  }
  {
    BI opval = ADDOFSI (tmp_temp_op1, tmp_temp_op2, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "vbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_vbit = opval;
  }
}
}
}
}
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** add-reg/reg-shift: add$cond${set-cc?} $rd,$rn,$rm,${operand2-shifttype} ${operand2-shiftreg}

sem_status
arm_sem_add_reg_reg_shift (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_reg_reg_shift.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_operand2;
  SI tmp_result;
  SI tmp_temp_op1;
  SI tmp_temp_op2;
  tmp_operand2 = current_cpu->compute_operand2_regshift (* FLD (i_rm), FLD (f_operand2_shifttype), * FLD (i_operand2_shiftreg));
  tmp_temp_op1 = * FLD (i_rn);
  tmp_temp_op2 = tmp_operand2;
  tmp_result = ADDSI (* FLD (i_rn), tmp_operand2);
if (EQSI (FLD (f_rd), 15)) {
{
  {
    USI opval = tmp_result;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
if (FLD (f_set_cc_)) {
  {
    SI opval = current_cpu->h_spsr_get ();
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cpsr" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->h_cpsr_set (opval);
  }
}
}
} else {
{
  {
    SI opval = tmp_result;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
if (FLD (f_set_cc_)) {
{
  SI tmp_result;
  tmp_result = ADDCSI (tmp_temp_op1, tmp_temp_op2, 0);
{
  {
    BI opval = EQSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "zbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "nbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_nbit = opval;
  }
}
  {
    BI opval = ADDCFSI (tmp_temp_op1, tmp_temp_op2, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_cbit = opval;
  }
  {
    BI opval = ADDOFSI (tmp_temp_op1, tmp_temp_op2, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "vbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_vbit = opval;
  }
}
}
}
}
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** add-imm: add$cond${set-cc?} $rd,$rn,$imm12

sem_status
arm_sem_add_imm (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_imm.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_result;
  tmp_result = ADDSI (* FLD (i_rn), FLD (f_imm12));
if (EQSI (FLD (f_rd), 15)) {
{
if (FLD (f_set_cc_)) {
  {
    SI opval = current_cpu->h_spsr_get ();
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cpsr" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->h_cpsr_set (opval);
  }
}
  {
    USI opval = tmp_result;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
}
} else {
{
if (FLD (f_set_cc_)) {
{
  SI tmp_result;
  tmp_result = ADDCSI (* FLD (i_rn), FLD (f_imm12), 0);
{
  {
    BI opval = EQSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "zbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "nbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_nbit = opval;
  }
}
  {
    BI opval = ADDCFSI (* FLD (i_rn), FLD (f_imm12), 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_cbit = opval;
  }
  {
    BI opval = ADDOFSI (* FLD (i_rn), FLD (f_imm12), 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "vbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_vbit = opval;
  }
}
}
  {
    SI opval = tmp_result;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
}
}
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** adc-reg/imm-shift: adc$cond${set-cc?} $rd,$rn,$rm,${operand2-shifttype} ${operand2-shiftimm}

sem_status
arm_sem_adc_reg_imm_shift (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_operand2;
  SI tmp_result;
  SI tmp_temp_op1;
  SI tmp_temp_op2;
  tmp_operand2 = current_cpu->compute_operand2_immshift (* FLD (i_rm), FLD (f_operand2_shifttype), FLD (f_operand2_shiftimm));
  tmp_temp_op1 = * FLD (i_rn);
  tmp_temp_op2 = tmp_operand2;
  tmp_result = ADDCSI (* FLD (i_rn), tmp_operand2, current_cpu->hardware.h_cbit);
if (EQSI (FLD (f_rd), 15)) {
{
  {
    USI opval = tmp_result;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
if (FLD (f_set_cc_)) {
  {
    SI opval = current_cpu->h_spsr_get ();
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cpsr" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->h_cpsr_set (opval);
  }
}
}
} else {
{
  {
    SI opval = tmp_result;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
if (FLD (f_set_cc_)) {
{
  SI tmp_result;
  tmp_result = ADDCSI (tmp_temp_op1, tmp_temp_op2, current_cpu->hardware.h_cbit);
{
  {
    BI opval = EQSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "zbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "nbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_nbit = opval;
  }
}
  {
    BI opval = ADDCFSI (tmp_temp_op1, tmp_temp_op2, current_cpu->hardware.h_cbit);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_cbit = opval;
  }
  {
    BI opval = ADDOFSI (tmp_temp_op1, tmp_temp_op2, current_cpu->hardware.h_cbit);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "vbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_vbit = opval;
  }
}
}
}
}
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** adc-reg/reg-shift: adc$cond${set-cc?} $rd,$rn,$rm,${operand2-shifttype} ${operand2-shiftreg}

sem_status
arm_sem_adc_reg_reg_shift (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_reg_reg_shift.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_operand2;
  SI tmp_result;
  SI tmp_temp_op1;
  SI tmp_temp_op2;
  tmp_operand2 = current_cpu->compute_operand2_regshift (* FLD (i_rm), FLD (f_operand2_shifttype), * FLD (i_operand2_shiftreg));
  tmp_temp_op1 = * FLD (i_rn);
  tmp_temp_op2 = tmp_operand2;
  tmp_result = ADDCSI (* FLD (i_rn), tmp_operand2, current_cpu->hardware.h_cbit);
if (EQSI (FLD (f_rd), 15)) {
{
  {
    USI opval = tmp_result;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
if (FLD (f_set_cc_)) {
  {
    SI opval = current_cpu->h_spsr_get ();
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cpsr" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->h_cpsr_set (opval);
  }
}
}
} else {
{
  {
    SI opval = tmp_result;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
if (FLD (f_set_cc_)) {
{
  SI tmp_result;
  tmp_result = ADDCSI (tmp_temp_op1, tmp_temp_op2, current_cpu->hardware.h_cbit);
{
  {
    BI opval = EQSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "zbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "nbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_nbit = opval;
  }
}
  {
    BI opval = ADDCFSI (tmp_temp_op1, tmp_temp_op2, current_cpu->hardware.h_cbit);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_cbit = opval;
  }
  {
    BI opval = ADDOFSI (tmp_temp_op1, tmp_temp_op2, current_cpu->hardware.h_cbit);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "vbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_vbit = opval;
  }
}
}
}
}
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** adc-imm: adc$cond${set-cc?} $rd,$rn,$imm12

sem_status
arm_sem_adc_imm (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_imm.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_result;
  tmp_result = ADDCSI (* FLD (i_rn), FLD (f_imm12), current_cpu->hardware.h_cbit);
if (EQSI (FLD (f_rd), 15)) {
{
if (FLD (f_set_cc_)) {
  {
    SI opval = current_cpu->h_spsr_get ();
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cpsr" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->h_cpsr_set (opval);
  }
}
  {
    USI opval = tmp_result;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
}
} else {
{
if (FLD (f_set_cc_)) {
{
  SI tmp_result;
  tmp_result = ADDCSI (* FLD (i_rn), FLD (f_imm12), current_cpu->hardware.h_cbit);
{
  {
    BI opval = EQSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "zbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "nbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_nbit = opval;
  }
}
  {
    BI opval = ADDCFSI (* FLD (i_rn), FLD (f_imm12), current_cpu->hardware.h_cbit);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_cbit = opval;
  }
  {
    BI opval = ADDOFSI (* FLD (i_rn), FLD (f_imm12), current_cpu->hardware.h_cbit);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "vbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_vbit = opval;
  }
}
}
  {
    SI opval = tmp_result;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
}
}
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** sub-reg/imm-shift: sub$cond${set-cc?} $rd,$rn,$rm,${operand2-shifttype} ${operand2-shiftimm}

sem_status
arm_sem_sub_reg_imm_shift (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_operand2;
  SI tmp_result;
  SI tmp_temp_op1;
  SI tmp_temp_op2;
  tmp_operand2 = current_cpu->compute_operand2_immshift (* FLD (i_rm), FLD (f_operand2_shifttype), FLD (f_operand2_shiftimm));
  tmp_temp_op1 = * FLD (i_rn);
  tmp_temp_op2 = tmp_operand2;
  tmp_result = SUBSI (* FLD (i_rn), tmp_operand2);
if (EQSI (FLD (f_rd), 15)) {
{
  {
    USI opval = tmp_result;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
if (FLD (f_set_cc_)) {
  {
    SI opval = current_cpu->h_spsr_get ();
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cpsr" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->h_cpsr_set (opval);
  }
}
}
} else {
{
  {
    SI opval = tmp_result;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
if (FLD (f_set_cc_)) {
{
  SI tmp_result;
  tmp_result = SUBCSI (tmp_temp_op1, tmp_temp_op2, 0);
{
  {
    BI opval = EQSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "zbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "nbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_nbit = opval;
  }
}
  {
    BI opval = NOTBI (SUBCFSI (tmp_temp_op1, tmp_temp_op2, 0));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_cbit = opval;
  }
  {
    BI opval = SUBOFSI (tmp_temp_op1, tmp_temp_op2, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "vbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_vbit = opval;
  }
}
}
}
}
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** sub-reg/reg-shift: sub$cond${set-cc?} $rd,$rn,$rm,${operand2-shifttype} ${operand2-shiftreg}

sem_status
arm_sem_sub_reg_reg_shift (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_reg_reg_shift.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_operand2;
  SI tmp_result;
  SI tmp_temp_op1;
  SI tmp_temp_op2;
  tmp_operand2 = current_cpu->compute_operand2_regshift (* FLD (i_rm), FLD (f_operand2_shifttype), * FLD (i_operand2_shiftreg));
  tmp_temp_op1 = * FLD (i_rn);
  tmp_temp_op2 = tmp_operand2;
  tmp_result = SUBSI (* FLD (i_rn), tmp_operand2);
if (EQSI (FLD (f_rd), 15)) {
{
  {
    USI opval = tmp_result;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
if (FLD (f_set_cc_)) {
  {
    SI opval = current_cpu->h_spsr_get ();
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cpsr" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->h_cpsr_set (opval);
  }
}
}
} else {
{
  {
    SI opval = tmp_result;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
if (FLD (f_set_cc_)) {
{
  SI tmp_result;
  tmp_result = SUBCSI (tmp_temp_op1, tmp_temp_op2, 0);
{
  {
    BI opval = EQSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "zbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "nbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_nbit = opval;
  }
}
  {
    BI opval = NOTBI (SUBCFSI (tmp_temp_op1, tmp_temp_op2, 0));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_cbit = opval;
  }
  {
    BI opval = SUBOFSI (tmp_temp_op1, tmp_temp_op2, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "vbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_vbit = opval;
  }
}
}
}
}
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** sub-imm: sub$cond${set-cc?} $rd,$rn,$imm12

sem_status
arm_sem_sub_imm (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_imm.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_result;
  tmp_result = SUBSI (* FLD (i_rn), FLD (f_imm12));
if (EQSI (FLD (f_rd), 15)) {
{
if (FLD (f_set_cc_)) {
  {
    SI opval = current_cpu->h_spsr_get ();
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cpsr" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->h_cpsr_set (opval);
  }
}
  {
    USI opval = tmp_result;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
}
} else {
{
if (FLD (f_set_cc_)) {
{
  SI tmp_result;
  tmp_result = SUBCSI (* FLD (i_rn), FLD (f_imm12), 0);
{
  {
    BI opval = EQSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "zbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "nbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_nbit = opval;
  }
}
  {
    BI opval = NOTBI (SUBCFSI (* FLD (i_rn), FLD (f_imm12), 0));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_cbit = opval;
  }
  {
    BI opval = SUBOFSI (* FLD (i_rn), FLD (f_imm12), 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "vbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_vbit = opval;
  }
}
}
  {
    SI opval = tmp_result;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
}
}
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** sbc-reg/imm-shift: sbc$cond${set-cc?} $rd,$rn,$rm,${operand2-shifttype} ${operand2-shiftimm}

sem_status
arm_sem_sbc_reg_imm_shift (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_operand2;
  SI tmp_result;
  SI tmp_temp_op1;
  SI tmp_temp_op2;
  tmp_operand2 = current_cpu->compute_operand2_immshift (* FLD (i_rm), FLD (f_operand2_shifttype), FLD (f_operand2_shiftimm));
  tmp_temp_op1 = * FLD (i_rn);
  tmp_temp_op2 = tmp_operand2;
  tmp_result = SUBCSI (* FLD (i_rn), tmp_operand2, NOTBI (current_cpu->hardware.h_cbit));
if (EQSI (FLD (f_rd), 15)) {
{
  {
    USI opval = tmp_result;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
if (FLD (f_set_cc_)) {
  {
    SI opval = current_cpu->h_spsr_get ();
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cpsr" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->h_cpsr_set (opval);
  }
}
}
} else {
{
  {
    SI opval = tmp_result;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
if (FLD (f_set_cc_)) {
{
  SI tmp_result;
  tmp_result = SUBCSI (tmp_temp_op1, tmp_temp_op2, NOTBI (current_cpu->hardware.h_cbit));
{
  {
    BI opval = EQSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "zbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "nbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_nbit = opval;
  }
}
  {
    BI opval = NOTBI (SUBCFSI (tmp_temp_op1, tmp_temp_op2, NOTBI (current_cpu->hardware.h_cbit)));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_cbit = opval;
  }
  {
    BI opval = SUBOFSI (tmp_temp_op1, tmp_temp_op2, NOTBI (current_cpu->hardware.h_cbit));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "vbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_vbit = opval;
  }
}
}
}
}
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** sbc-reg/reg-shift: sbc$cond${set-cc?} $rd,$rn,$rm,${operand2-shifttype} ${operand2-shiftreg}

sem_status
arm_sem_sbc_reg_reg_shift (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_reg_reg_shift.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_operand2;
  SI tmp_result;
  SI tmp_temp_op1;
  SI tmp_temp_op2;
  tmp_operand2 = current_cpu->compute_operand2_regshift (* FLD (i_rm), FLD (f_operand2_shifttype), * FLD (i_operand2_shiftreg));
  tmp_temp_op1 = * FLD (i_rn);
  tmp_temp_op2 = tmp_operand2;
  tmp_result = SUBCSI (* FLD (i_rn), tmp_operand2, NOTBI (current_cpu->hardware.h_cbit));
if (EQSI (FLD (f_rd), 15)) {
{
  {
    USI opval = tmp_result;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
if (FLD (f_set_cc_)) {
  {
    SI opval = current_cpu->h_spsr_get ();
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cpsr" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->h_cpsr_set (opval);
  }
}
}
} else {
{
  {
    SI opval = tmp_result;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
if (FLD (f_set_cc_)) {
{
  SI tmp_result;
  tmp_result = SUBCSI (tmp_temp_op1, tmp_temp_op2, NOTBI (current_cpu->hardware.h_cbit));
{
  {
    BI opval = EQSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "zbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "nbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_nbit = opval;
  }
}
  {
    BI opval = NOTBI (SUBCFSI (tmp_temp_op1, tmp_temp_op2, NOTBI (current_cpu->hardware.h_cbit)));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_cbit = opval;
  }
  {
    BI opval = SUBOFSI (tmp_temp_op1, tmp_temp_op2, NOTBI (current_cpu->hardware.h_cbit));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "vbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_vbit = opval;
  }
}
}
}
}
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** sbc-imm: sbc$cond${set-cc?} $rd,$rn,$imm12

sem_status
arm_sem_sbc_imm (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_imm.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_result;
  tmp_result = SUBCSI (* FLD (i_rn), FLD (f_imm12), NOTBI (current_cpu->hardware.h_cbit));
if (EQSI (FLD (f_rd), 15)) {
{
if (FLD (f_set_cc_)) {
  {
    SI opval = current_cpu->h_spsr_get ();
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cpsr" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->h_cpsr_set (opval);
  }
}
  {
    USI opval = tmp_result;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
}
} else {
{
if (FLD (f_set_cc_)) {
{
  SI tmp_result;
  tmp_result = SUBCSI (* FLD (i_rn), FLD (f_imm12), NOTBI (current_cpu->hardware.h_cbit));
{
  {
    BI opval = EQSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "zbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "nbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_nbit = opval;
  }
}
  {
    BI opval = NOTBI (SUBCFSI (* FLD (i_rn), FLD (f_imm12), NOTBI (current_cpu->hardware.h_cbit)));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_cbit = opval;
  }
  {
    BI opval = SUBOFSI (* FLD (i_rn), FLD (f_imm12), NOTBI (current_cpu->hardware.h_cbit));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "vbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_vbit = opval;
  }
}
}
  {
    SI opval = tmp_result;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
}
}
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** rsb-reg/imm-shift: rsb$cond${set-cc?} $rd,$rn,$rm,${operand2-shifttype} ${operand2-shiftimm}

sem_status
arm_sem_rsb_reg_imm_shift (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_operand2;
  SI tmp_result;
  SI tmp_temp_op1;
  SI tmp_temp_op2;
  tmp_operand2 = current_cpu->compute_operand2_immshift (* FLD (i_rm), FLD (f_operand2_shifttype), FLD (f_operand2_shiftimm));
  tmp_temp_op1 = * FLD (i_rn);
  tmp_temp_op2 = tmp_operand2;
  tmp_result = SUBSI (tmp_operand2, * FLD (i_rn));
if (EQSI (FLD (f_rd), 15)) {
{
  {
    USI opval = tmp_result;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
if (FLD (f_set_cc_)) {
  {
    SI opval = current_cpu->h_spsr_get ();
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cpsr" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->h_cpsr_set (opval);
  }
}
}
} else {
{
  {
    SI opval = tmp_result;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
if (FLD (f_set_cc_)) {
{
  SI tmp_result;
  tmp_result = SUBCSI (tmp_temp_op2, tmp_temp_op1, 0);
{
  {
    BI opval = EQSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "zbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "nbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_nbit = opval;
  }
}
  {
    BI opval = NOTBI (SUBCFSI (tmp_temp_op2, tmp_temp_op1, 0));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_cbit = opval;
  }
  {
    BI opval = SUBOFSI (tmp_temp_op2, tmp_temp_op1, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "vbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_vbit = opval;
  }
}
}
}
}
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** rsb-reg/reg-shift: rsb$cond${set-cc?} $rd,$rn,$rm,${operand2-shifttype} ${operand2-shiftreg}

sem_status
arm_sem_rsb_reg_reg_shift (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_reg_reg_shift.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_operand2;
  SI tmp_result;
  SI tmp_temp_op1;
  SI tmp_temp_op2;
  tmp_operand2 = current_cpu->compute_operand2_regshift (* FLD (i_rm), FLD (f_operand2_shifttype), * FLD (i_operand2_shiftreg));
  tmp_temp_op1 = * FLD (i_rn);
  tmp_temp_op2 = tmp_operand2;
  tmp_result = SUBSI (tmp_operand2, * FLD (i_rn));
if (EQSI (FLD (f_rd), 15)) {
{
  {
    USI opval = tmp_result;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
if (FLD (f_set_cc_)) {
  {
    SI opval = current_cpu->h_spsr_get ();
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cpsr" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->h_cpsr_set (opval);
  }
}
}
} else {
{
  {
    SI opval = tmp_result;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
if (FLD (f_set_cc_)) {
{
  SI tmp_result;
  tmp_result = SUBCSI (tmp_temp_op2, tmp_temp_op1, 0);
{
  {
    BI opval = EQSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "zbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "nbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_nbit = opval;
  }
}
  {
    BI opval = NOTBI (SUBCFSI (tmp_temp_op2, tmp_temp_op1, 0));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_cbit = opval;
  }
  {
    BI opval = SUBOFSI (tmp_temp_op2, tmp_temp_op1, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "vbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_vbit = opval;
  }
}
}
}
}
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** rsb-imm: rsb$cond${set-cc?} $rd,$rn,$imm12

sem_status
arm_sem_rsb_imm (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_imm.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_result;
  tmp_result = SUBSI (FLD (f_imm12), * FLD (i_rn));
if (EQSI (FLD (f_rd), 15)) {
{
if (FLD (f_set_cc_)) {
  {
    SI opval = current_cpu->h_spsr_get ();
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cpsr" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->h_cpsr_set (opval);
  }
}
  {
    USI opval = tmp_result;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
}
} else {
{
if (FLD (f_set_cc_)) {
{
  SI tmp_result;
  tmp_result = SUBCSI (FLD (f_imm12), * FLD (i_rn), 0);
{
  {
    BI opval = EQSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "zbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "nbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_nbit = opval;
  }
}
  {
    BI opval = NOTBI (SUBCFSI (FLD (f_imm12), * FLD (i_rn), 0));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_cbit = opval;
  }
  {
    BI opval = SUBOFSI (FLD (f_imm12), * FLD (i_rn), 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "vbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_vbit = opval;
  }
}
}
  {
    SI opval = tmp_result;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
}
}
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** rsc-reg/imm-shift: rsc$cond${set-cc?} $rd,$rn,$rm,${operand2-shifttype} ${operand2-shiftimm}

sem_status
arm_sem_rsc_reg_imm_shift (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_operand2;
  SI tmp_result;
  SI tmp_temp_op1;
  SI tmp_temp_op2;
  tmp_operand2 = current_cpu->compute_operand2_immshift (* FLD (i_rm), FLD (f_operand2_shifttype), FLD (f_operand2_shiftimm));
  tmp_temp_op1 = * FLD (i_rn);
  tmp_temp_op2 = tmp_operand2;
  tmp_result = SUBCSI (tmp_operand2, * FLD (i_rn), NOTBI (current_cpu->hardware.h_cbit));
if (EQSI (FLD (f_rd), 15)) {
{
  {
    USI opval = tmp_result;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
if (FLD (f_set_cc_)) {
  {
    SI opval = current_cpu->h_spsr_get ();
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cpsr" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->h_cpsr_set (opval);
  }
}
}
} else {
{
  {
    SI opval = tmp_result;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
if (FLD (f_set_cc_)) {
{
  SI tmp_result;
  tmp_result = SUBCSI (tmp_temp_op2, tmp_temp_op1, NOTBI (current_cpu->hardware.h_cbit));
{
  {
    BI opval = EQSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "zbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "nbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_nbit = opval;
  }
}
  {
    BI opval = NOTBI (SUBCFSI (tmp_temp_op2, tmp_temp_op1, NOTBI (current_cpu->hardware.h_cbit)));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_cbit = opval;
  }
  {
    BI opval = SUBOFSI (tmp_temp_op2, tmp_temp_op1, NOTBI (current_cpu->hardware.h_cbit));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "vbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_vbit = opval;
  }
}
}
}
}
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** rsc-reg/reg-shift: rsc$cond${set-cc?} $rd,$rn,$rm,${operand2-shifttype} ${operand2-shiftreg}

sem_status
arm_sem_rsc_reg_reg_shift (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_reg_reg_shift.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_operand2;
  SI tmp_result;
  SI tmp_temp_op1;
  SI tmp_temp_op2;
  tmp_operand2 = current_cpu->compute_operand2_regshift (* FLD (i_rm), FLD (f_operand2_shifttype), * FLD (i_operand2_shiftreg));
  tmp_temp_op1 = * FLD (i_rn);
  tmp_temp_op2 = tmp_operand2;
  tmp_result = SUBCSI (tmp_operand2, * FLD (i_rn), NOTBI (current_cpu->hardware.h_cbit));
if (EQSI (FLD (f_rd), 15)) {
{
  {
    USI opval = tmp_result;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
if (FLD (f_set_cc_)) {
  {
    SI opval = current_cpu->h_spsr_get ();
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cpsr" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->h_cpsr_set (opval);
  }
}
}
} else {
{
  {
    SI opval = tmp_result;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
if (FLD (f_set_cc_)) {
{
  SI tmp_result;
  tmp_result = SUBCSI (tmp_temp_op2, tmp_temp_op1, NOTBI (current_cpu->hardware.h_cbit));
{
  {
    BI opval = EQSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "zbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "nbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_nbit = opval;
  }
}
  {
    BI opval = NOTBI (SUBCFSI (tmp_temp_op2, tmp_temp_op1, NOTBI (current_cpu->hardware.h_cbit)));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_cbit = opval;
  }
  {
    BI opval = SUBOFSI (tmp_temp_op2, tmp_temp_op1, NOTBI (current_cpu->hardware.h_cbit));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "vbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_vbit = opval;
  }
}
}
}
}
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** rsc-imm: rsc$cond${set-cc?} $rd,$rn,$imm12

sem_status
arm_sem_rsc_imm (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_imm.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_result;
  tmp_result = SUBCSI (FLD (f_imm12), * FLD (i_rn), NOTBI (current_cpu->hardware.h_cbit));
if (EQSI (FLD (f_rd), 15)) {
{
if (FLD (f_set_cc_)) {
  {
    SI opval = current_cpu->h_spsr_get ();
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cpsr" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->h_cpsr_set (opval);
  }
}
  {
    USI opval = tmp_result;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
}
} else {
{
if (FLD (f_set_cc_)) {
{
  SI tmp_result;
  tmp_result = SUBCSI (FLD (f_imm12), * FLD (i_rn), NOTBI (current_cpu->hardware.h_cbit));
{
  {
    BI opval = EQSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "zbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "nbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_nbit = opval;
  }
}
  {
    BI opval = NOTBI (SUBCFSI (FLD (f_imm12), * FLD (i_rn), NOTBI (current_cpu->hardware.h_cbit)));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_cbit = opval;
  }
  {
    BI opval = SUBOFSI (FLD (f_imm12), * FLD (i_rn), NOTBI (current_cpu->hardware.h_cbit));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "vbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_vbit = opval;
  }
}
}
  {
    SI opval = tmp_result;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }
}
}
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** tst-reg/imm-shift: tst$cond${set-cc?} $rd,$rn,$rm,${operand2-shifttype} ${operand2-shiftimm}

sem_status
arm_sem_tst_reg_imm_shift (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_operand2;
  BI tmp_carry_out;
  SI tmp_result;
  tmp_operand2 = current_cpu->compute_operand2_immshift (* FLD (i_rm), FLD (f_operand2_shifttype), FLD (f_operand2_shiftimm));
  tmp_carry_out = current_cpu->compute_carry_out_immshift (* FLD (i_rm), FLD (f_operand2_shifttype), FLD (f_operand2_shiftimm), current_cpu->hardware.h_cbit);
  tmp_result = ANDSI (* FLD (i_rn), tmp_operand2);
if (EQSI (FLD (f_rd), 15)) {
  {
    SI opval = current_cpu->h_spsr_get ();
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cpsr" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->h_cpsr_set (opval);
  }
} else {
{
{
  {
    BI opval = EQSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "zbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "nbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_nbit = opval;
  }
}
  {
    BI opval = tmp_carry_out;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_cbit = opval;
  }
}
}
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** tst-reg/reg-shift: tst$cond${set-cc?} $rd,$rn,$rm,${operand2-shifttype} ${operand2-shiftreg}

sem_status
arm_sem_tst_reg_reg_shift (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_reg_reg_shift.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_operand2;
  BI tmp_carry_out;
  SI tmp_result;
  tmp_operand2 = current_cpu->compute_operand2_regshift (* FLD (i_rm), FLD (f_operand2_shifttype), * FLD (i_operand2_shiftreg));
  tmp_carry_out = current_cpu->compute_carry_out_regshift (* FLD (i_rm), FLD (f_operand2_shifttype), * FLD (i_operand2_shiftreg), current_cpu->hardware.h_cbit);
  tmp_result = ANDSI (* FLD (i_rn), tmp_operand2);
if (EQSI (FLD (f_rd), 15)) {
  {
    SI opval = current_cpu->h_spsr_get ();
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cpsr" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->h_cpsr_set (opval);
  }
} else {
{
{
  {
    BI opval = EQSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "zbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "nbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_nbit = opval;
  }
}
  {
    BI opval = tmp_carry_out;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_cbit = opval;
  }
}
}
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** tst-imm: tst${cond}${set-cc?} $rn,$imm12

sem_status
arm_sem_tst_imm (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_tst_imm.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  BI tmp_carry_out;
if (EQSI (FLD (f_ror_imm8_rotate), 0)) {
  tmp_carry_out = current_cpu->hardware.h_cbit;
} else {
  tmp_carry_out = LTBI (FLD (f_ror_imm8), 0);
}
{
{
  {
    BI opval = EQSI (ANDSI (* FLD (i_rn), FLD (f_ror_imm8)), 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "zbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (ANDSI (* FLD (i_rn), FLD (f_ror_imm8)), 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "nbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_nbit = opval;
  }
}
  {
    BI opval = tmp_carry_out;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_cbit = opval;
  }
}
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** teq-reg/imm-shift: teq$cond${set-cc?} $rd,$rn,$rm,${operand2-shifttype} ${operand2-shiftimm}

sem_status
arm_sem_teq_reg_imm_shift (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_operand2;
  BI tmp_carry_out;
  SI tmp_result;
  tmp_operand2 = current_cpu->compute_operand2_immshift (* FLD (i_rm), FLD (f_operand2_shifttype), FLD (f_operand2_shiftimm));
  tmp_carry_out = current_cpu->compute_carry_out_immshift (* FLD (i_rm), FLD (f_operand2_shifttype), FLD (f_operand2_shiftimm), current_cpu->hardware.h_cbit);
  tmp_result = XORSI (* FLD (i_rn), tmp_operand2);
if (EQSI (FLD (f_rd), 15)) {
  {
    SI opval = current_cpu->h_spsr_get ();
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cpsr" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->h_cpsr_set (opval);
  }
} else {
{
{
  {
    BI opval = EQSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "zbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "nbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_nbit = opval;
  }
}
  {
    BI opval = tmp_carry_out;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_cbit = opval;
  }
}
}
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** teq-reg/reg-shift: teq$cond${set-cc?} $rd,$rn,$rm,${operand2-shifttype} ${operand2-shiftreg}

sem_status
arm_sem_teq_reg_reg_shift (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_reg_reg_shift.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_operand2;
  BI tmp_carry_out;
  SI tmp_result;
  tmp_operand2 = current_cpu->compute_operand2_regshift (* FLD (i_rm), FLD (f_operand2_shifttype), * FLD (i_operand2_shiftreg));
  tmp_carry_out = current_cpu->compute_carry_out_regshift (* FLD (i_rm), FLD (f_operand2_shifttype), * FLD (i_operand2_shiftreg), current_cpu->hardware.h_cbit);
  tmp_result = XORSI (* FLD (i_rn), tmp_operand2);
if (EQSI (FLD (f_rd), 15)) {
  {
    SI opval = current_cpu->h_spsr_get ();
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cpsr" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->h_cpsr_set (opval);
  }
} else {
{
{
  {
    BI opval = EQSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "zbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "nbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_nbit = opval;
  }
}
  {
    BI opval = tmp_carry_out;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_cbit = opval;
  }
}
}
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** teq-imm: teq${cond}${set-cc?} $rn,$imm12

sem_status
arm_sem_teq_imm (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_tst_imm.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  BI tmp_carry_out;
if (EQSI (FLD (f_ror_imm8_rotate), 0)) {
  tmp_carry_out = current_cpu->hardware.h_cbit;
} else {
  tmp_carry_out = LTBI (FLD (f_ror_imm8), 0);
}
{
{
  {
    BI opval = EQSI (XORSI (* FLD (i_rn), FLD (f_ror_imm8)), 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "zbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (XORSI (* FLD (i_rn), FLD (f_ror_imm8)), 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "nbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_nbit = opval;
  }
}
  {
    BI opval = tmp_carry_out;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_cbit = opval;
  }
}
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** cmp-reg/imm-shift: cmp$cond${set-cc?} $rd,$rn,$rm,${operand2-shifttype} ${operand2-shiftimm}

sem_status
arm_sem_cmp_reg_imm_shift (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_operand2;
  tmp_operand2 = current_cpu->compute_operand2_immshift (* FLD (i_rm), FLD (f_operand2_shifttype), FLD (f_operand2_shiftimm));
if (EQSI (FLD (f_rd), 15)) {
  {
    SI opval = current_cpu->h_spsr_get ();
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cpsr" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->h_cpsr_set (opval);
  }
} else {
{
  SI tmp_result;
  tmp_result = SUBCSI (* FLD (i_rn), tmp_operand2, 0);
{
  {
    BI opval = EQSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "zbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "nbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_nbit = opval;
  }
}
  {
    BI opval = NOTBI (SUBCFSI (* FLD (i_rn), tmp_operand2, 0));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_cbit = opval;
  }
  {
    BI opval = SUBOFSI (* FLD (i_rn), tmp_operand2, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "vbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_vbit = opval;
  }
}
}
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** cmp-reg/reg-shift: cmp$cond${set-cc?} $rd,$rn,$rm,${operand2-shifttype} ${operand2-shiftreg}

sem_status
arm_sem_cmp_reg_reg_shift (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_reg_reg_shift.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_operand2;
  tmp_operand2 = current_cpu->compute_operand2_regshift (* FLD (i_rm), FLD (f_operand2_shifttype), * FLD (i_operand2_shiftreg));
if (EQSI (FLD (f_rd), 15)) {
  {
    SI opval = current_cpu->h_spsr_get ();
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cpsr" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->h_cpsr_set (opval);
  }
} else {
{
  SI tmp_result;
  tmp_result = SUBCSI (* FLD (i_rn), tmp_operand2, 0);
{
  {
    BI opval = EQSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "zbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "nbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_nbit = opval;
  }
}
  {
    BI opval = NOTBI (SUBCFSI (* FLD (i_rn), tmp_operand2, 0));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_cbit = opval;
  }
  {
    BI opval = SUBOFSI (* FLD (i_rn), tmp_operand2, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "vbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_vbit = opval;
  }
}
}
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** cmp-imm: cmp${cond}${set-cc?} $rn,$imm12

sem_status
arm_sem_cmp_imm (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_imm.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_result;
  tmp_result = SUBCSI (* FLD (i_rn), FLD (f_imm12), 0);
{
  {
    BI opval = EQSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "zbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "nbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_nbit = opval;
  }
}
  {
    BI opval = NOTBI (SUBCFSI (* FLD (i_rn), FLD (f_imm12), 0));
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_cbit = opval;
  }
  {
    BI opval = SUBOFSI (* FLD (i_rn), FLD (f_imm12), 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "vbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_vbit = opval;
  }
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** cmn-reg/imm-shift: cmn$cond${set-cc?} $rd,$rn,$rm,${operand2-shifttype} ${operand2-shiftimm}

sem_status
arm_sem_cmn_reg_imm_shift (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_operand2;
  tmp_operand2 = current_cpu->compute_operand2_immshift (* FLD (i_rm), FLD (f_operand2_shifttype), FLD (f_operand2_shiftimm));
if (EQSI (FLD (f_rd), 15)) {
  {
    SI opval = current_cpu->h_spsr_get ();
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cpsr" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->h_cpsr_set (opval);
  }
} else {
{
  SI tmp_result;
  tmp_result = ADDCSI (* FLD (i_rn), tmp_operand2, 0);
{
  {
    BI opval = EQSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "zbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "nbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_nbit = opval;
  }
}
  {
    BI opval = ADDCFSI (* FLD (i_rn), tmp_operand2, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_cbit = opval;
  }
  {
    BI opval = ADDOFSI (* FLD (i_rn), tmp_operand2, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "vbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_vbit = opval;
  }
}
}
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** cmn-reg/reg-shift: cmn$cond${set-cc?} $rd,$rn,$rm,${operand2-shifttype} ${operand2-shiftreg}

sem_status
arm_sem_cmn_reg_reg_shift (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_reg_reg_shift.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_operand2;
  tmp_operand2 = current_cpu->compute_operand2_regshift (* FLD (i_rm), FLD (f_operand2_shifttype), * FLD (i_operand2_shiftreg));
if (EQSI (FLD (f_rd), 15)) {
  {
    SI opval = current_cpu->h_spsr_get ();
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cpsr" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->h_cpsr_set (opval);
  }
} else {
{
  SI tmp_result;
  tmp_result = ADDCSI (* FLD (i_rn), tmp_operand2, 0);
{
  {
    BI opval = EQSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "zbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "nbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_nbit = opval;
  }
}
  {
    BI opval = ADDCFSI (* FLD (i_rn), tmp_operand2, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_cbit = opval;
  }
  {
    BI opval = ADDOFSI (* FLD (i_rn), tmp_operand2, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "vbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_vbit = opval;
  }
}
}
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** cmn-imm: cmn${cond}${set-cc?} $rn,$imm12

sem_status
arm_sem_cmn_imm (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_imm.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_result;
  tmp_result = ADDCSI (* FLD (i_rn), FLD (f_imm12), 0);
{
  {
    BI opval = EQSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "zbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_zbit = opval;
  }
  {
    BI opval = LTSI (tmp_result, 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "nbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_nbit = opval;
  }
}
  {
    BI opval = ADDCFSI (* FLD (i_rn), FLD (f_imm12), 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_cbit = opval;
  }
  {
    BI opval = ADDOFSI (* FLD (i_rn), FLD (f_imm12), 0);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "vbit" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_vbit = opval;
  }
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** ldmda: FIXME

sem_status
arm_sem_ldmda (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_ldmda.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  tmp_addr = * FLD (i_rn);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
{
  {
    USI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 14))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 14) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 14)] = opval;
  }
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 13))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 13) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 13)] = opval;
  }
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 12))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 12) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 12)] = opval;
  }
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 11))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 11) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 11)] = opval;
  }
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 10))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 10) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 10)] = opval;
  }
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 9))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 9) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 9)] = opval;
  }
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 8))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 8) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 8)] = opval;
  }
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 7))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 7) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 7)] = opval;
  }
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 6))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 6) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 6)] = opval;
  }
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 5))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 5) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 5)] = opval;
  }
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 4))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 4) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 4)] = opval;
  }
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 3))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 3) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 3)] = opval;
  }
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 2))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 2) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 2)] = opval;
  }
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 1))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 1) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 1)] = opval;
  }
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 0))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 0) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 0)] = opval;
  }
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** ldmda-sw: FIXME

sem_status
arm_sem_ldmda_sw (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_ldmda.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  tmp_addr = * FLD (i_rn);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
{
  {
    USI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
  tmp_addr = SUBSI (tmp_addr, 4);
  {
    SI opval = current_cpu->h_spsr_get ();
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cpsr" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->h_cpsr_set (opval);
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 14))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 14) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 14)] = opval;
  }
} else {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-usr" << '[' << SUBSI (14, 8) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr_usr[SUBSI (14, 8)] = opval;
  }
}
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 13))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 13) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 13)] = opval;
  }
} else {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-usr" << '[' << SUBSI (13, 8) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr_usr[SUBSI (13, 8)] = opval;
  }
}
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 12))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 12) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 12)] = opval;
  }
} else {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-usr" << '[' << SUBSI (12, 8) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr_usr[SUBSI (12, 8)] = opval;
  }
}
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 11))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 11) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 11)] = opval;
  }
} else {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-usr" << '[' << SUBSI (11, 8) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr_usr[SUBSI (11, 8)] = opval;
  }
}
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 10))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 10) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 10)] = opval;
  }
} else {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-usr" << '[' << SUBSI (10, 8) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr_usr[SUBSI (10, 8)] = opval;
  }
}
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 9))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 9) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 9)] = opval;
  }
} else {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-usr" << '[' << SUBSI (9, 8) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr_usr[SUBSI (9, 8)] = opval;
  }
}
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 8))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 8) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 8)] = opval;
  }
} else {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-usr" << '[' << SUBSI (8, 8) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr_usr[SUBSI (8, 8)] = opval;
  }
}
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 7))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 7) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 7)] = opval;
  }
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 6))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 6) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 6)] = opval;
  }
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 5))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 5) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 5)] = opval;
  }
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 4))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 4) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 4)] = opval;
  }
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 3))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 3) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 3)] = opval;
  }
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 2))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 2) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 2)] = opval;
  }
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 1))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 1) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 1)] = opval;
  }
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 0))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 0) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 0)] = opval;
  }
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** ldmda-wb: FIXME

sem_status
arm_sem_ldmda_wb (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_ldmda.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  tmp_addr = * FLD (i_rn);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
{
  {
    USI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 14))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 14) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 14)] = opval;
  }
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 13))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 13) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 13)] = opval;
  }
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 12))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 12) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 12)] = opval;
  }
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 11))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 11) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 11)] = opval;
  }
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 10))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 10) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 10)] = opval;
  }
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 9))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 9) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 9)] = opval;
  }
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 8))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 8) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 8)] = opval;
  }
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 7))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 7) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 7)] = opval;
  }
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 6))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 6) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 6)] = opval;
  }
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 5))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 5) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 5)] = opval;
  }
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 4))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 4) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 4)] = opval;
  }
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 3))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 3) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 3)] = opval;
  }
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 2))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 2) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 2)] = opval;
  }
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 1))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 1) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 1)] = opval;
  }
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 0))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 0) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 0)] = opval;
  }
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
  {
    SI opval = tmp_addr;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rn) = opval;
  }
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** ldmda-sw-wb: FIXME

sem_status
arm_sem_ldmda_sw_wb (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_ldmda.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  tmp_addr = * FLD (i_rn);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
{
  {
    USI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
  tmp_addr = SUBSI (tmp_addr, 4);
  {
    SI opval = current_cpu->h_spsr_get ();
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cpsr" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->h_cpsr_set (opval);
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 14))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 14) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 14)] = opval;
  }
} else {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-usr" << '[' << SUBSI (14, 8) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr_usr[SUBSI (14, 8)] = opval;
  }
}
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 13))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 13) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 13)] = opval;
  }
} else {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-usr" << '[' << SUBSI (13, 8) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr_usr[SUBSI (13, 8)] = opval;
  }
}
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 12))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 12) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 12)] = opval;
  }
} else {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-usr" << '[' << SUBSI (12, 8) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr_usr[SUBSI (12, 8)] = opval;
  }
}
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 11))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 11) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 11)] = opval;
  }
} else {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-usr" << '[' << SUBSI (11, 8) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr_usr[SUBSI (11, 8)] = opval;
  }
}
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 10))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 10) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 10)] = opval;
  }
} else {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-usr" << '[' << SUBSI (10, 8) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr_usr[SUBSI (10, 8)] = opval;
  }
}
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 9))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 9) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 9)] = opval;
  }
} else {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-usr" << '[' << SUBSI (9, 8) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr_usr[SUBSI (9, 8)] = opval;
  }
}
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 8))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 8) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 8)] = opval;
  }
} else {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-usr" << '[' << SUBSI (8, 8) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr_usr[SUBSI (8, 8)] = opval;
  }
}
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 7))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 7) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 7)] = opval;
  }
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 6))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 6) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 6)] = opval;
  }
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 5))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 5) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 5)] = opval;
  }
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 4))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 4) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 4)] = opval;
  }
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 3))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 3) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 3)] = opval;
  }
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 2))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 2) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 2)] = opval;
  }
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 1))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 1) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 1)] = opval;
  }
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 0))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 0) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 0)] = opval;
  }
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
  {
    SI opval = tmp_addr;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rn) = opval;
  }
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** ldmib: FIXME

sem_status
arm_sem_ldmib (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_ldmda.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  tmp_addr = * FLD (i_rn);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 0))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 0) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 0)] = opval;
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 1))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 1) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 1)] = opval;
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 2))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 2) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 2)] = opval;
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 3))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 3) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 3)] = opval;
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 4))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 4) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 4)] = opval;
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 5))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 5) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 5)] = opval;
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 6))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 6) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 6)] = opval;
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 7))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 7) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 7)] = opval;
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 8))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 8) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 8)] = opval;
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 9))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 9) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 9)] = opval;
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 10))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 10) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 10)] = opval;
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 11))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 11) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 11)] = opval;
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 12))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 12) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 12)] = opval;
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 13))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 13) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 13)] = opval;
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 14))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 14) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 14)] = opval;
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
  {
    USI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
}
}
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** ldmib-sw: FIXME

sem_status
arm_sem_ldmib_sw (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_ldmda.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  tmp_addr = * FLD (i_rn);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 0))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 0) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 0)] = opval;
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 1))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 1) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 1)] = opval;
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 2))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 2) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 2)] = opval;
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 3))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 3) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 3)] = opval;
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 4))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 4) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 4)] = opval;
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 5))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 5) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 5)] = opval;
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 6))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 6) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 6)] = opval;
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 7))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 7) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 7)] = opval;
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 8))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 8) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 8)] = opval;
  }
} else {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-usr" << '[' << SUBSI (8, 8) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr_usr[SUBSI (8, 8)] = opval;
  }
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 9))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 9) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 9)] = opval;
  }
} else {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-usr" << '[' << SUBSI (9, 8) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr_usr[SUBSI (9, 8)] = opval;
  }
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 10))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 10) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 10)] = opval;
  }
} else {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-usr" << '[' << SUBSI (10, 8) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr_usr[SUBSI (10, 8)] = opval;
  }
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 11))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 11) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 11)] = opval;
  }
} else {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-usr" << '[' << SUBSI (11, 8) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr_usr[SUBSI (11, 8)] = opval;
  }
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 12))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 12) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 12)] = opval;
  }
} else {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-usr" << '[' << SUBSI (12, 8) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr_usr[SUBSI (12, 8)] = opval;
  }
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 13))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 13) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 13)] = opval;
  }
} else {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-usr" << '[' << SUBSI (13, 8) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr_usr[SUBSI (13, 8)] = opval;
  }
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 14))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 14) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 14)] = opval;
  }
} else {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-usr" << '[' << SUBSI (14, 8) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr_usr[SUBSI (14, 8)] = opval;
  }
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
  {
    USI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
  {
    SI opval = current_cpu->h_spsr_get ();
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cpsr" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->h_cpsr_set (opval);
  }
}
}
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** ldmib-wb: FIXME

sem_status
arm_sem_ldmib_wb (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_ldmda.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  tmp_addr = * FLD (i_rn);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 0))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 0) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 0)] = opval;
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 1))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 1) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 1)] = opval;
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 2))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 2) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 2)] = opval;
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 3))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 3) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 3)] = opval;
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 4))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 4) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 4)] = opval;
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 5))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 5) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 5)] = opval;
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 6))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 6) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 6)] = opval;
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 7))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 7) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 7)] = opval;
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 8))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 8) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 8)] = opval;
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 9))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 9) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 9)] = opval;
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 10))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 10) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 10)] = opval;
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 11))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 11) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 11)] = opval;
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 12))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 12) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 12)] = opval;
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 13))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 13) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 13)] = opval;
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 14))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 14) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 14)] = opval;
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
  {
    USI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
}
}
  {
    SI opval = tmp_addr;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rn) = opval;
  }
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** ldmib-sw-wb: FIXME

sem_status
arm_sem_ldmib_sw_wb (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_ldmda.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  tmp_addr = * FLD (i_rn);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 0))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 0) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 0)] = opval;
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 1))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 1) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 1)] = opval;
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 2))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 2) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 2)] = opval;
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 3))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 3) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 3)] = opval;
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 4))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 4) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 4)] = opval;
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 5))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 5) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 5)] = opval;
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 6))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 6) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 6)] = opval;
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 7))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 7) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 7)] = opval;
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 8))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 8) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 8)] = opval;
  }
} else {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-usr" << '[' << SUBSI (8, 8) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr_usr[SUBSI (8, 8)] = opval;
  }
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 9))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 9) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 9)] = opval;
  }
} else {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-usr" << '[' << SUBSI (9, 8) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr_usr[SUBSI (9, 8)] = opval;
  }
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 10))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 10) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 10)] = opval;
  }
} else {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-usr" << '[' << SUBSI (10, 8) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr_usr[SUBSI (10, 8)] = opval;
  }
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 11))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 11) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 11)] = opval;
  }
} else {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-usr" << '[' << SUBSI (11, 8) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr_usr[SUBSI (11, 8)] = opval;
  }
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 12))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 12) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 12)] = opval;
  }
} else {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-usr" << '[' << SUBSI (12, 8) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr_usr[SUBSI (12, 8)] = opval;
  }
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 13))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 13) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 13)] = opval;
  }
} else {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-usr" << '[' << SUBSI (13, 8) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr_usr[SUBSI (13, 8)] = opval;
  }
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 14))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 14) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 14)] = opval;
  }
} else {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-usr" << '[' << SUBSI (14, 8) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr_usr[SUBSI (14, 8)] = opval;
  }
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
  {
    USI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
  {
    SI opval = current_cpu->h_spsr_get ();
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cpsr" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->h_cpsr_set (opval);
  }
}
}
  {
    SI opval = tmp_addr;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rn) = opval;
  }
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** ldmia: FIXME

sem_status
arm_sem_ldmia (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_ldmda.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  tmp_addr = * FLD (i_rn);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 0))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 0) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 0)] = opval;
  }
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 1))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 1) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 1)] = opval;
  }
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 2))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 2) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 2)] = opval;
  }
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 3))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 3) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 3)] = opval;
  }
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 4))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 4) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 4)] = opval;
  }
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 5))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 5) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 5)] = opval;
  }
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 6))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 6) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 6)] = opval;
  }
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 7))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 7) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 7)] = opval;
  }
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 8))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 8) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 8)] = opval;
  }
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 9))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 9) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 9)] = opval;
  }
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 10))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 10) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 10)] = opval;
  }
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 11))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 11) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 11)] = opval;
  }
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 12))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 12) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 12)] = opval;
  }
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 13))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 13) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 13)] = opval;
  }
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 14))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 14) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 14)] = opval;
  }
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
{
  {
    USI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** ldmia-sw: FIXME

sem_status
arm_sem_ldmia_sw (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_ldmda.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  tmp_addr = * FLD (i_rn);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 0))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 0) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 0)] = opval;
  }
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 1))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 1) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 1)] = opval;
  }
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 2))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 2) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 2)] = opval;
  }
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 3))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 3) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 3)] = opval;
  }
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 4))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 4) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 4)] = opval;
  }
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 5))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 5) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 5)] = opval;
  }
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 6))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 6) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 6)] = opval;
  }
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 7))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 7) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 7)] = opval;
  }
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 8))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 8) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 8)] = opval;
  }
} else {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-usr" << '[' << SUBSI (8, 8) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr_usr[SUBSI (8, 8)] = opval;
  }
}
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 9))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 9) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 9)] = opval;
  }
} else {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-usr" << '[' << SUBSI (9, 8) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr_usr[SUBSI (9, 8)] = opval;
  }
}
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 10))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 10) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 10)] = opval;
  }
} else {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-usr" << '[' << SUBSI (10, 8) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr_usr[SUBSI (10, 8)] = opval;
  }
}
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 11))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 11) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 11)] = opval;
  }
} else {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-usr" << '[' << SUBSI (11, 8) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr_usr[SUBSI (11, 8)] = opval;
  }
}
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 12))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 12) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 12)] = opval;
  }
} else {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-usr" << '[' << SUBSI (12, 8) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr_usr[SUBSI (12, 8)] = opval;
  }
}
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 13))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 13) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 13)] = opval;
  }
} else {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-usr" << '[' << SUBSI (13, 8) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr_usr[SUBSI (13, 8)] = opval;
  }
}
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 14))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 14) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 14)] = opval;
  }
} else {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-usr" << '[' << SUBSI (14, 8) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr_usr[SUBSI (14, 8)] = opval;
  }
}
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
{
  {
    USI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
  tmp_addr = ADDSI (tmp_addr, 4);
  {
    SI opval = current_cpu->h_spsr_get ();
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cpsr" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->h_cpsr_set (opval);
  }
}
}
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** ldmia-wb: FIXME

sem_status
arm_sem_ldmia_wb (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_ldmda.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  tmp_addr = * FLD (i_rn);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 0))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 0) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 0)] = opval;
  }
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 1))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 1) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 1)] = opval;
  }
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 2))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 2) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 2)] = opval;
  }
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 3))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 3) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 3)] = opval;
  }
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 4))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 4) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 4)] = opval;
  }
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 5))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 5) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 5)] = opval;
  }
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 6))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 6) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 6)] = opval;
  }
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 7))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 7) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 7)] = opval;
  }
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 8))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 8) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 8)] = opval;
  }
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 9))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 9) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 9)] = opval;
  }
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 10))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 10) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 10)] = opval;
  }
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 11))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 11) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 11)] = opval;
  }
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 12))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 12) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 12)] = opval;
  }
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 13))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 13) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 13)] = opval;
  }
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 14))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 14) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 14)] = opval;
  }
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
{
  {
    USI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
  {
    SI opval = tmp_addr;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rn) = opval;
  }
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** ldmia-sw-wb: FIXME

sem_status
arm_sem_ldmia_sw_wb (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_ldmda.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  tmp_addr = * FLD (i_rn);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 0))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 0) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 0)] = opval;
  }
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 1))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 1) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 1)] = opval;
  }
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 2))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 2) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 2)] = opval;
  }
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 3))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 3) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 3)] = opval;
  }
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 4))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 4) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 4)] = opval;
  }
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 5))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 5) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 5)] = opval;
  }
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 6))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 6) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 6)] = opval;
  }
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 7))) {
{
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 7) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 7)] = opval;
  }
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 8))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 8) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 8)] = opval;
  }
} else {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-usr" << '[' << SUBSI (8, 8) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr_usr[SUBSI (8, 8)] = opval;
  }
}
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 9))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 9) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 9)] = opval;
  }
} else {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-usr" << '[' << SUBSI (9, 8) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr_usr[SUBSI (9, 8)] = opval;
  }
}
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 10))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 10) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 10)] = opval;
  }
} else {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-usr" << '[' << SUBSI (10, 8) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr_usr[SUBSI (10, 8)] = opval;
  }
}
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 11))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 11) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 11)] = opval;
  }
} else {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-usr" << '[' << SUBSI (11, 8) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr_usr[SUBSI (11, 8)] = opval;
  }
}
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 12))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 12) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 12)] = opval;
  }
} else {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-usr" << '[' << SUBSI (12, 8) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr_usr[SUBSI (12, 8)] = opval;
  }
}
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 13))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 13) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 13)] = opval;
  }
} else {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-usr" << '[' << SUBSI (13, 8) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr_usr[SUBSI (13, 8)] = opval;
  }
}
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 14))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 14) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 14)] = opval;
  }
} else {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-usr" << '[' << SUBSI (14, 8) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr_usr[SUBSI (14, 8)] = opval;
  }
}
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
{
  {
    USI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
  tmp_addr = ADDSI (tmp_addr, 4);
  {
    SI opval = current_cpu->h_spsr_get ();
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cpsr" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->h_cpsr_set (opval);
  }
}
}
  {
    SI opval = tmp_addr;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rn) = opval;
  }
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** ldmdb: ldm$cond ..

sem_status
arm_sem_ldmdb (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_ldmda.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  tmp_addr = * FLD (i_rn);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
  {
    USI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 14))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 14) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 14)] = opval;
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 13))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 13) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 13)] = opval;
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 12))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 12) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 12)] = opval;
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 11))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 11) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 11)] = opval;
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 10))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 10) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 10)] = opval;
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 9))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 9) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 9)] = opval;
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 8))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 8) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 8)] = opval;
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 7))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 7) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 7)] = opval;
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 6))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 6) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 6)] = opval;
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 5))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 5) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 5)] = opval;
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 4))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 4) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 4)] = opval;
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 3))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 3) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 3)] = opval;
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 2))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 2) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 2)] = opval;
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 1))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 1) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 1)] = opval;
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 0))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 0) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 0)] = opval;
  }
}
}
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** ldmdb-sw: ldm$cond ..

sem_status
arm_sem_ldmdb_sw (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_ldmda.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  tmp_addr = * FLD (i_rn);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
  {
    USI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
  {
    SI opval = current_cpu->h_spsr_get ();
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cpsr" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->h_cpsr_set (opval);
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 14))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 14) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 14)] = opval;
  }
} else {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-usr" << '[' << SUBSI (14, 8) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr_usr[SUBSI (14, 8)] = opval;
  }
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 13))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 13) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 13)] = opval;
  }
} else {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-usr" << '[' << SUBSI (13, 8) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr_usr[SUBSI (13, 8)] = opval;
  }
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 12))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 12) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 12)] = opval;
  }
} else {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-usr" << '[' << SUBSI (12, 8) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr_usr[SUBSI (12, 8)] = opval;
  }
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 11))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 11) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 11)] = opval;
  }
} else {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-usr" << '[' << SUBSI (11, 8) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr_usr[SUBSI (11, 8)] = opval;
  }
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 10))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 10) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 10)] = opval;
  }
} else {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-usr" << '[' << SUBSI (10, 8) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr_usr[SUBSI (10, 8)] = opval;
  }
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 9))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 9) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 9)] = opval;
  }
} else {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-usr" << '[' << SUBSI (9, 8) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr_usr[SUBSI (9, 8)] = opval;
  }
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 8))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 8) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 8)] = opval;
  }
} else {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-usr" << '[' << SUBSI (8, 8) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr_usr[SUBSI (8, 8)] = opval;
  }
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 7))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 7) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 7)] = opval;
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 6))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 6) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 6)] = opval;
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 5))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 5) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 5)] = opval;
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 4))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 4) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 4)] = opval;
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 3))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 3) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 3)] = opval;
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 2))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 2) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 2)] = opval;
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 1))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 1) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 1)] = opval;
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 0))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 0) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 0)] = opval;
  }
}
}
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** ldmdb-wb: FIXME

sem_status
arm_sem_ldmdb_wb (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_ldmda.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  tmp_addr = * FLD (i_rn);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
  {
    USI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 14))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 14) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 14)] = opval;
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 13))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 13) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 13)] = opval;
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 12))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 12) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 12)] = opval;
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 11))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 11) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 11)] = opval;
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 10))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 10) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 10)] = opval;
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 9))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 9) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 9)] = opval;
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 8))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 8) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 8)] = opval;
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 7))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 7) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 7)] = opval;
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 6))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 6) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 6)] = opval;
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 5))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 5) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 5)] = opval;
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 4))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 4) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 4)] = opval;
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 3))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 3) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 3)] = opval;
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 2))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 2) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 2)] = opval;
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 1))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 1) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 1)] = opval;
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 0))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 0) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 0)] = opval;
  }
}
}
  {
    SI opval = tmp_addr;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rn) = opval;
  }
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** ldmdb-sw-wb: FIXME

sem_status
arm_sem_ldmdb_sw_wb (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_ldmda.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  tmp_addr = * FLD (i_rn);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
  {
    USI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->branch (opval, npc, status);
  }
  {
    SI opval = current_cpu->h_spsr_get ();
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cpsr" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->h_cpsr_set (opval);
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 14))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 14) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 14)] = opval;
  }
} else {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-usr" << '[' << SUBSI (14, 8) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr_usr[SUBSI (14, 8)] = opval;
  }
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 13))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 13) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 13)] = opval;
  }
} else {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-usr" << '[' << SUBSI (13, 8) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr_usr[SUBSI (13, 8)] = opval;
  }
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 12))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 12) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 12)] = opval;
  }
} else {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-usr" << '[' << SUBSI (12, 8) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr_usr[SUBSI (12, 8)] = opval;
  }
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 11))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 11) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 11)] = opval;
  }
} else {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-usr" << '[' << SUBSI (11, 8) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr_usr[SUBSI (11, 8)] = opval;
  }
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 10))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 10) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 10)] = opval;
  }
} else {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-usr" << '[' << SUBSI (10, 8) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr_usr[SUBSI (10, 8)] = opval;
  }
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 9))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 9) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 9)] = opval;
  }
} else {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-usr" << '[' << SUBSI (9, 8) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr_usr[SUBSI (9, 8)] = opval;
  }
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 8))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 8) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 8)] = opval;
  }
} else {
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr-usr" << '[' << SUBSI (8, 8) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr_usr[SUBSI (8, 8)] = opval;
  }
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 7))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 7) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 7)] = opval;
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 6))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 6) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 6)] = opval;
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 5))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 5) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 5)] = opval;
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 4))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 4) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 4)] = opval;
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 3))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 3) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 3)] = opval;
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 2))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 2) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 2)] = opval;
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 1))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 1) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 1)] = opval;
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 0))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
  {
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 0) << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->hardware.h_gr[((UINT) 0)] = opval;
  }
}
}
  {
    SI opval = tmp_addr;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rn) = opval;
  }
}

  current_cpu->done_cti_insn (npc, status);
  return status;
#undef FLD
}

// ********** stmdb: FIXME

sem_status
arm_sem_stmdb (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_ldmda.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  tmp_addr = * FLD (i_rn);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
  {
    SI opval = ADDSI (current_cpu->hardware.h_gr[((UINT) 15)], 4);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 14))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 14)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 13))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 13)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 12))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 12)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 11))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 11)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 10))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 10)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 9))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 9)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 8))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 8)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 7))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 7)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 6))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 6)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 5))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 5)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 4))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 4)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 3))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 3)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 2))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 2)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 1))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 1)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 0))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 0)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** stmdb-sw: FIXME

sem_status
arm_sem_stmdb_sw (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_ldmda.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  tmp_addr = * FLD (i_rn);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
  {
    SI opval = ADDSI (current_cpu->hardware.h_gr[((UINT) 15)], 4);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 14))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 14)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
} else {
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (14, 8)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 13))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 13)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
} else {
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (13, 8)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 12))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 12)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
} else {
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (12, 8)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 11))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 11)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
} else {
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (11, 8)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 10))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 10)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
} else {
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (10, 8)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 9))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 9)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
} else {
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (9, 8)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 8))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 8)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
} else {
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (8, 8)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 7))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 7)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 6))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 6)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 5))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 5)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 4))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 4)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 3))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 3)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 2))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 2)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 1))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 1)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 0))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 0)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** stmdb-wb: FIXME

sem_status
arm_sem_stmdb_wb (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_ldmda.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  tmp_addr = * FLD (i_rn);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
  {
    SI opval = ADDSI (current_cpu->hardware.h_gr[((UINT) 15)], 4);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 14))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 14)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 13))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 13)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 12))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 12)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 11))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 11)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 10))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 10)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 9))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 9)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 8))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 8)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 7))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 7)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 6))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 6)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 5))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 5)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 4))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 4)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 3))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 3)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 2))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 2)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 1))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 1)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 0))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 0)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
  {
    SI opval = tmp_addr;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rn) = opval;
  }
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** stmdb-sw-wb: FIXME

sem_status
arm_sem_stmdb_sw_wb (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_ldmda.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  tmp_addr = * FLD (i_rn);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
  {
    SI opval = ADDSI (current_cpu->hardware.h_gr[((UINT) 15)], 4);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 14))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 14)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
} else {
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (14, 8)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 13))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 13)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
} else {
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (13, 8)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 12))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 12)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
} else {
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (12, 8)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 11))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 11)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
} else {
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (11, 8)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 10))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 10)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
} else {
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (10, 8)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 9))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 9)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
} else {
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (9, 8)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 8))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 8)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
} else {
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (8, 8)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 7))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 7)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 6))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 6)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 5))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 5)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 4))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 4)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 3))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 3)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 2))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 2)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 1))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 1)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 0))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 0)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
  {
    SI opval = tmp_addr;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rn) = opval;
  }
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** stmib: FIXME

sem_status
arm_sem_stmib (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_ldmda.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  tmp_addr = * FLD (i_rn);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 0))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 0)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 1))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 1)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 2))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 2)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 3))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 3)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 4))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 4)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 5))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 5)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 6))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 6)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 7))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 7)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 8))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 8)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 9))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 9)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 10))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 10)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 11))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 11)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 12))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 12)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 13))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 13)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 14))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 14)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
  {
    SI opval = ADDSI (current_cpu->hardware.h_gr[((UINT) 15)], 4);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** stmib-sw: FIXME

sem_status
arm_sem_stmib_sw (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_ldmda.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  tmp_addr = * FLD (i_rn);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 0))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 0)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 1))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 1)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 2))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 2)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 3))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 3)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 4))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 4)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 5))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 5)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 6))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 6)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 7))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 7)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 8))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 8)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
} else {
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (8, 8)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 9))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 9)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
} else {
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (9, 8)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 10))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 10)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
} else {
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (10, 8)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 11))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 11)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
} else {
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (11, 8)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 12))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 12)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
} else {
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (12, 8)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 13))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 13)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
} else {
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (13, 8)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 14))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 14)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
} else {
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (14, 8)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
  {
    SI opval = ADDSI (current_cpu->hardware.h_gr[((UINT) 15)], 4);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** stmib-wb: FIXME

sem_status
arm_sem_stmib_wb (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_ldmda.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  tmp_addr = * FLD (i_rn);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 0))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 0)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 1))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 1)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 2))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 2)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 3))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 3)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 4))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 4)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 5))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 5)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 6))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 6)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 7))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 7)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 8))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 8)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 9))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 9)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 10))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 10)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 11))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 11)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 12))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 12)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 13))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 13)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 14))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 14)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
  {
    SI opval = ADDSI (current_cpu->hardware.h_gr[((UINT) 15)], 4);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
  {
    SI opval = tmp_addr;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rn) = opval;
  }
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** stmib-sw-wb: FIXME

sem_status
arm_sem_stmib_sw_wb (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_ldmda.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  tmp_addr = * FLD (i_rn);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 0))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 0)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 1))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 1)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 2))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 2)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 3))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 3)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 4))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 4)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 5))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 5)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 6))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 6)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 7))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 7)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 8))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 8)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
} else {
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (8, 8)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 9))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 9)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
} else {
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (9, 8)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 10))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 10)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
} else {
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (10, 8)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 11))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 11)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
} else {
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (11, 8)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 12))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 12)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
} else {
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (12, 8)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 13))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 13)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
} else {
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (13, 8)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 14))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 14)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
} else {
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (14, 8)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
  {
    SI opval = ADDSI (current_cpu->hardware.h_gr[((UINT) 15)], 4);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
}
  {
    SI opval = tmp_addr;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rn) = opval;
  }
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** stmia: FIXME

sem_status
arm_sem_stmia (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_ldmda.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  tmp_addr = * FLD (i_rn);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 0))) {
{
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 0)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 1))) {
{
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 1)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 2))) {
{
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 2)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 3))) {
{
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 3)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 4))) {
{
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 4)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 5))) {
{
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 5)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 6))) {
{
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 6)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 7))) {
{
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 7)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 8))) {
{
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 8)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 9))) {
{
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 9)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 10))) {
{
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 10)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 11))) {
{
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 11)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 12))) {
{
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 12)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 13))) {
{
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 13)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 14))) {
{
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 14)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
{
  {
    SI opval = ADDSI (current_cpu->hardware.h_gr[((UINT) 15)], 4);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** stmia-sw: FIXME

sem_status
arm_sem_stmia_sw (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_ldmda.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  tmp_addr = * FLD (i_rn);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 0))) {
{
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 0)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 1))) {
{
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 1)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 2))) {
{
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 2)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 3))) {
{
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 3)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 4))) {
{
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 4)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 5))) {
{
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 5)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 6))) {
{
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 6)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 7))) {
{
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 7)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 8))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 8)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
} else {
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (8, 8)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 9))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 9)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
} else {
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (9, 8)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 10))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 10)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
} else {
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (10, 8)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 11))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 11)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
} else {
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (11, 8)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 12))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 12)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
} else {
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (12, 8)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 13))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 13)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
} else {
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (13, 8)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 14))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 14)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
} else {
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (14, 8)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
{
  {
    SI opval = ADDSI (current_cpu->hardware.h_gr[((UINT) 15)], 4);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** stmia-wb: FIXME

sem_status
arm_sem_stmia_wb (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_ldmda.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  tmp_addr = * FLD (i_rn);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 0))) {
{
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 0)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 1))) {
{
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 1)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 2))) {
{
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 2)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 3))) {
{
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 3)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 4))) {
{
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 4)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 5))) {
{
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 5)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 6))) {
{
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 6)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 7))) {
{
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 7)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 8))) {
{
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 8)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 9))) {
{
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 9)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 10))) {
{
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 10)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 11))) {
{
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 11)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 12))) {
{
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 12)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 13))) {
{
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 13)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 14))) {
{
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 14)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
{
  {
    SI opval = ADDSI (current_cpu->hardware.h_gr[((UINT) 15)], 4);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
  {
    SI opval = tmp_addr;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rn) = opval;
  }
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** stmia-sw-wb: FIXME

sem_status
arm_sem_stmia_sw_wb (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_ldmda.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  tmp_addr = * FLD (i_rn);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 0))) {
{
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 0)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 1))) {
{
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 1)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 2))) {
{
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 2)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 3))) {
{
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 3)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 4))) {
{
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 4)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 5))) {
{
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 5)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 6))) {
{
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 6)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 7))) {
{
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 7)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 8))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 8)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
} else {
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (8, 8)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 9))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 9)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
} else {
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (9, 8)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 10))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 10)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
} else {
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (10, 8)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 11))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 11)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
} else {
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (11, 8)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 12))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 12)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
} else {
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (12, 8)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 13))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 13)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
} else {
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (13, 8)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 14))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 14)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
} else {
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (14, 8)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
{
  {
    SI opval = ADDSI (current_cpu->hardware.h_gr[((UINT) 15)], 4);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
  {
    SI opval = tmp_addr;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rn) = opval;
  }
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** stmda: FIXME

sem_status
arm_sem_stmda (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_ldmda.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  tmp_addr = * FLD (i_rn);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
{
  {
    SI opval = ADDSI (current_cpu->hardware.h_gr[((UINT) 15)], 4);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 14))) {
{
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 14)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 13))) {
{
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 13)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 12))) {
{
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 12)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 11))) {
{
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 11)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 10))) {
{
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 10)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 9))) {
{
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 9)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 8))) {
{
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 8)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 7))) {
{
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 7)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 6))) {
{
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 6)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 5))) {
{
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 5)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 4))) {
{
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 4)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 3))) {
{
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 3)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 2))) {
{
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 2)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 1))) {
{
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 1)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 0))) {
{
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 0)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** stmda-sw: FIXME

sem_status
arm_sem_stmda_sw (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_ldmda.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  tmp_addr = * FLD (i_rn);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
{
  {
    SI opval = ADDSI (current_cpu->hardware.h_gr[((UINT) 15)], 4);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 14))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 14)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
} else {
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (14, 8)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 13))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 13)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
} else {
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (13, 8)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 12))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 12)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
} else {
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (12, 8)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 11))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 11)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
} else {
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (11, 8)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 10))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 10)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
} else {
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (10, 8)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 9))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 9)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
} else {
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (9, 8)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 8))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 8)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
} else {
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (8, 8)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 7))) {
{
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 7)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 6))) {
{
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 6)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 5))) {
{
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 5)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 4))) {
{
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 4)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 3))) {
{
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 3)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 2))) {
{
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 2)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 1))) {
{
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 1)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 0))) {
{
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 0)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** stmda-wb: FIXME

sem_status
arm_sem_stmda_wb (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_ldmda.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  tmp_addr = * FLD (i_rn);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
{
  {
    SI opval = ADDSI (current_cpu->hardware.h_gr[((UINT) 15)], 4);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 14))) {
{
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 14)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 13))) {
{
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 13)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 12))) {
{
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 12)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 11))) {
{
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 11)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 10))) {
{
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 10)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 9))) {
{
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 9)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 8))) {
{
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 8)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 7))) {
{
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 7)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 6))) {
{
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 6)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 5))) {
{
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 5)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 4))) {
{
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 4)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 3))) {
{
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 3)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 2))) {
{
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 2)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 1))) {
{
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 1)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 0))) {
{
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 0)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
  {
    SI opval = tmp_addr;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rn) = opval;
  }
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** stmda-sw-wb: FIXME

sem_status
arm_sem_stmda_sw_wb (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_ldmda.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

{
  SI tmp_addr;
  tmp_addr = * FLD (i_rn);
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
{
  {
    SI opval = ADDSI (current_cpu->hardware.h_gr[((UINT) 15)], 4);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 14))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 14)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
} else {
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (14, 8)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 13))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 13)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
} else {
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (13, 8)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 12))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 12)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
} else {
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (12, 8)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 11))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 11)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
} else {
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (11, 8)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 10))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 10)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
} else {
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (10, 8)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 9))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 9)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
} else {
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (9, 8)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 8))) {
{
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 8)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
} else {
  {
    SI opval = current_cpu->hardware.h_gr_usr[SUBSI (8, 8)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
}
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 7))) {
{
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 7)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 6))) {
{
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 6)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 5))) {
{
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 5)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 4))) {
{
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 4)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 3))) {
{
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 3)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 2))) {
{
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 2)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 1))) {
{
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 1)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 0))) {
{
  {
    SI opval = current_cpu->hardware.h_gr[((UINT) 0)];
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "memory" << '[' <<  "0x" << hex << (UDI) tmp_addr << dec << ']' << ":=0x" << hex << opval << dec << "  ";
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
  }
  tmp_addr = SUBSI (tmp_addr, 4);
}
}
  {
    SI opval = tmp_addr;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rn) = opval;
  }
}

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** mrs-c: mrs$cond $rd,cpsr

sem_status
arm_sem_mrs_c (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_strh_pre_dec_imm_offset.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

  {
    SI opval = current_cpu->h_cpsr_get ();
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** mrs-s: mrs$cond $rd,spsr

sem_status
arm_sem_mrs_s (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_strh_pre_dec_imm_offset.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

  {
    SI opval = current_cpu->h_spsr_get ();
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
    * FLD (i_rd) = opval;
  }

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** msr-c: msr$cond cpsr,$rm

sem_status
arm_sem_msr_c (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

  {
    SI opval = * FLD (i_rm);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "cpsr" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->h_cpsr_set (opval);
  }

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

// ********** msr-s: msr$cond spsr,$rm

sem_status
arm_sem_msr_s (arm7f_cpu* current_cpu, arm_scache* sem)
{
#define FLD(f) abuf->fields.sfmt_and_reg_imm_shift.f
  sem_status status = SEM_STATUS_NORMAL;
  arm_scache* abuf = sem;
  PCADDR pc = abuf->addr;
  PCADDR npc = pc + 4;

  {
    SI opval = * FLD (i_rm);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "spsr" << ":=0x" << hex << opval << dec << "  ";
    current_cpu->h_spsr_set (opval);
  }

  current_cpu->done_insn (npc, status);
  return status;
#undef FLD
}

@


1.9
log
@Regenerate cgen files, update copyright year.
@
text
@d27 1
a27 1
#define FLD(f) abuf->fields.fmt_empty.f
@


1.8
log
@	* cgen-cpu.h: Update for new location of cgen/bitset.h.
	* tracedis.h: Ditto.

Plus update generated files to pick up two cgen changes:
1)
	* desc-cpu.scm (/gen-hash-defines): Remove #include of cgen-bitset.h.
	* sid-cpu.scm (cgen-desc.h): Update location of cgen's bitset.h.
2)
	* utils-sim.scm (/gen-set-itype-and-extract): New function.
	(/gen-bracketed-set-itype-and-extract): New function.
	(/gen-decode-default-entry): Rewrite.
	(/table-guts-to-mask, /all-opcode-bits-used?): New functions.
	(/gen-decode-insn-entry): New arg table-guts-thus-far, all callers
	updated.  Don't unnecessarily emit check for whether all opcode bits
	have been examined.
	(/gen-decode-expr-set-itype): Delete.
	(/gen-decode-expr-entry): Update.
	(/gen-decode-table-entry): New arg table-guts-thus-far, all callers
	updated.  Keep track of decoder tables used thus far.
	(/gen-decoder-switch): Ditto.
@
text
@d5 1
a5 1
Copyright (C) 2000-2009 Red Hat, Inc.
@


1.7
log
@Regenerate cgen files (not due to any recent changes, just want to
establish a reference point).
@
text
@d5 1
a5 1
Copyright (C) 2000, 2001, 2002, 2003 Red Hat, Inc.
a18 1

a56 1
    current_cpu->branch (opval, npc, status);
d59 1
a80 1
    current_cpu->hardware.h_gr[((UINT) 14)] = opval;
d83 1
a86 1
    current_cpu->branch (opval, npc, status);
d89 1
a111 1
    current_cpu->branch (opval, npc, status);
d114 1
a118 1
    current_cpu->h_tbit_set (opval);
d121 1
a149 1
    current_cpu->branch (opval, npc, status);
d152 1
a156 1
    * FLD (i_rd) = opval;
d159 1
a164 1
    * FLD (i_rn) = opval;
d167 1
a194 1
    current_cpu->branch (opval, npc, status);
d197 1
a201 1
    * FLD (i_rd) = opval;
d204 1
a209 1
    * FLD (i_rn) = opval;
d212 1
a239 1
    current_cpu->branch (opval, npc, status);
d242 1
a246 1
    * FLD (i_rd) = opval;
d249 1
a254 1
    * FLD (i_rn) = opval;
d257 1
a284 1
    current_cpu->branch (opval, npc, status);
d287 1
a291 1
    * FLD (i_rd) = opval;
d294 1
a299 1
    * FLD (i_rn) = opval;
d302 1
a329 1
    current_cpu->branch (opval, npc, status);
d332 1
a336 1
    * FLD (i_rd) = opval;
d339 1
a344 1
    * FLD (i_rn) = opval;
d347 1
a374 1
    current_cpu->branch (opval, npc, status);
d377 1
a381 1
    * FLD (i_rd) = opval;
d384 1
a389 1
    * FLD (i_rn) = opval;
d392 1
a419 1
    current_cpu->branch (opval, npc, status);
d422 1
a426 1
    * FLD (i_rd) = opval;
d429 1
a434 1
    * FLD (i_rn) = opval;
d437 1
a464 1
    current_cpu->branch (opval, npc, status);
d467 1
a471 1
    * FLD (i_rd) = opval;
d474 1
a479 1
    * FLD (i_rn) = opval;
d482 1
a509 1
    current_cpu->branch (opval, npc, status);
d512 1
a516 1
    * FLD (i_rd) = opval;
d519 1
a549 1
    current_cpu->branch (opval, npc, status);
d552 1
a556 1
    * FLD (i_rd) = opval;
d559 1
a589 1
    current_cpu->branch (opval, npc, status);
d592 1
a596 1
    * FLD (i_rd) = opval;
d599 1
a629 1
    current_cpu->branch (opval, npc, status);
d632 1
a636 1
    * FLD (i_rd) = opval;
d639 1
a669 1
    current_cpu->branch (opval, npc, status);
d672 1
a676 1
    * FLD (i_rd) = opval;
d679 1
a684 1
    * FLD (i_rn) = opval;
d687 1
a714 1
    current_cpu->branch (opval, npc, status);
d717 1
a721 1
    * FLD (i_rd) = opval;
d724 1
a729 1
    * FLD (i_rn) = opval;
d732 1
a759 1
    current_cpu->branch (opval, npc, status);
d762 1
a766 1
    * FLD (i_rd) = opval;
d769 1
a774 1
    * FLD (i_rn) = opval;
d777 1
a804 1
    current_cpu->branch (opval, npc, status);
d807 1
a811 1
    * FLD (i_rd) = opval;
d814 1
a819 1
    * FLD (i_rn) = opval;
d822 1
a849 1
    current_cpu->branch (opval, npc, status);
d852 1
a856 1
    * FLD (i_rd) = opval;
d859 1
a864 1
    * FLD (i_rn) = opval;
d867 1
a894 1
    current_cpu->branch (opval, npc, status);
d897 1
a901 1
    * FLD (i_rd) = opval;
d904 1
a909 1
    * FLD (i_rn) = opval;
d912 1
a939 1
    current_cpu->branch (opval, npc, status);
d942 1
a946 1
    * FLD (i_rd) = opval;
d949 1
a954 1
    * FLD (i_rn) = opval;
d957 1
a984 1
    current_cpu->branch (opval, npc, status);
d987 1
a991 1
    * FLD (i_rd) = opval;
d994 1
a999 1
    * FLD (i_rn) = opval;
d1002 1
a1029 1
    current_cpu->branch (opval, npc, status);
d1032 1
a1036 1
    * FLD (i_rd) = opval;
d1039 1
a1044 1
    * FLD (i_rn) = opval;
d1047 1
a1074 1
    current_cpu->branch (opval, npc, status);
d1077 1
a1081 1
    * FLD (i_rd) = opval;
d1084 1
a1089 1
    * FLD (i_rn) = opval;
d1092 1
a1119 1
    current_cpu->branch (opval, npc, status);
d1122 1
a1126 1
    * FLD (i_rd) = opval;
d1129 1
a1134 1
    * FLD (i_rn) = opval;
d1137 1
a1164 1
    current_cpu->branch (opval, npc, status);
d1167 1
a1171 1
    * FLD (i_rd) = opval;
d1174 1
a1179 1
    * FLD (i_rn) = opval;
d1182 1
a1209 1
    current_cpu->branch (opval, npc, status);
d1212 1
a1216 1
    * FLD (i_rd) = opval;
d1219 1
a1249 1
    current_cpu->branch (opval, npc, status);
d1252 1
a1256 1
    * FLD (i_rd) = opval;
d1259 1
a1289 1
    current_cpu->branch (opval, npc, status);
d1292 1
a1296 1
    * FLD (i_rd) = opval;
d1299 1
a1329 1
    current_cpu->branch (opval, npc, status);
d1332 1
a1336 1
    * FLD (i_rd) = opval;
d1339 1
a1369 1
    current_cpu->branch (opval, npc, status);
d1372 1
a1376 1
    * FLD (i_rd) = opval;
d1379 1
a1384 1
    * FLD (i_rn) = opval;
d1387 1
a1414 1
    current_cpu->branch (opval, npc, status);
d1417 1
a1421 1
    * FLD (i_rd) = opval;
d1424 1
a1429 1
    * FLD (i_rn) = opval;
d1432 1
a1459 1
    current_cpu->branch (opval, npc, status);
d1462 1
a1466 1
    * FLD (i_rd) = opval;
d1469 1
a1474 1
    * FLD (i_rn) = opval;
d1477 1
a1504 1
    current_cpu->branch (opval, npc, status);
d1507 1
a1511 1
    * FLD (i_rd) = opval;
d1514 1
a1519 1
    * FLD (i_rn) = opval;
d1522 1
a1548 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d1551 1
a1555 1
    * FLD (i_rn) = opval;
d1558 1
a1584 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d1587 1
a1591 1
    * FLD (i_rn) = opval;
d1594 1
a1620 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d1623 1
a1627 1
    * FLD (i_rn) = opval;
d1630 1
a1656 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d1659 1
a1663 1
    * FLD (i_rn) = opval;
d1666 1
a1692 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d1695 1
a1699 1
    * FLD (i_rn) = opval;
d1702 1
a1728 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d1731 1
a1735 1
    * FLD (i_rn) = opval;
d1738 1
a1764 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d1767 1
a1771 1
    * FLD (i_rn) = opval;
d1774 1
a1800 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d1803 1
a1807 1
    * FLD (i_rn) = opval;
d1810 1
a1836 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d1839 1
a1867 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d1870 1
a1898 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d1901 1
a1929 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d1932 1
a1960 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d1963 1
a1967 1
    * FLD (i_rn) = opval;
d1970 1
a1996 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d1999 1
a2003 1
    * FLD (i_rn) = opval;
d2006 1
a2032 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d2035 1
a2039 1
    * FLD (i_rn) = opval;
d2042 1
a2068 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d2071 1
a2075 1
    * FLD (i_rn) = opval;
d2078 1
a2104 1
    current_cpu->SETMEMQI (pc, tmp_addr, opval);
d2107 1
a2111 1
    * FLD (i_rn) = opval;
d2114 1
a2140 1
    current_cpu->SETMEMQI (pc, tmp_addr, opval);
d2143 1
a2147 1
    * FLD (i_rn) = opval;
d2150 1
a2176 1
    current_cpu->SETMEMQI (pc, tmp_addr, opval);
d2179 1
a2183 1
    * FLD (i_rn) = opval;
d2186 1
a2212 1
    current_cpu->SETMEMQI (pc, tmp_addr, opval);
d2215 1
a2219 1
    * FLD (i_rn) = opval;
d2222 1
a2248 1
    current_cpu->SETMEMQI (pc, tmp_addr, opval);
d2251 1
a2255 1
    * FLD (i_rn) = opval;
d2258 1
a2284 1
    current_cpu->SETMEMQI (pc, tmp_addr, opval);
d2287 1
a2291 1
    * FLD (i_rn) = opval;
d2294 1
a2320 1
    current_cpu->SETMEMQI (pc, tmp_addr, opval);
d2323 1
a2327 1
    * FLD (i_rn) = opval;
d2330 1
a2356 1
    current_cpu->SETMEMQI (pc, tmp_addr, opval);
d2359 1
a2363 1
    * FLD (i_rn) = opval;
d2366 1
a2392 1
    current_cpu->SETMEMQI (pc, tmp_addr, opval);
d2395 1
a2423 1
    current_cpu->SETMEMQI (pc, tmp_addr, opval);
d2426 1
a2454 1
    current_cpu->SETMEMQI (pc, tmp_addr, opval);
d2457 1
a2485 1
    current_cpu->SETMEMQI (pc, tmp_addr, opval);
d2488 1
a2516 1
    current_cpu->SETMEMQI (pc, tmp_addr, opval);
d2519 1
a2523 1
    * FLD (i_rn) = opval;
d2526 1
a2552 1
    current_cpu->SETMEMQI (pc, tmp_addr, opval);
d2555 1
a2559 1
    * FLD (i_rn) = opval;
d2562 1
a2588 1
    current_cpu->SETMEMQI (pc, tmp_addr, opval);
d2591 1
a2595 1
    * FLD (i_rn) = opval;
d2598 1
a2624 1
    current_cpu->SETMEMQI (pc, tmp_addr, opval);
d2627 1
a2631 1
    * FLD (i_rn) = opval;
d2634 1
a2660 1
    current_cpu->SETMEMHI (pc, tmp_addr, opval);
d2663 1
a2691 1
    current_cpu->SETMEMHI (pc, tmp_addr, opval);
d2694 1
a2722 1
    current_cpu->SETMEMHI (pc, tmp_addr, opval);
d2725 1
a2753 1
    current_cpu->SETMEMHI (pc, tmp_addr, opval);
d2756 1
a2784 1
    current_cpu->SETMEMHI (pc, tmp_addr, opval);
d2787 1
a2791 1
    * FLD (i_rn) = opval;
d2794 1
a2820 1
    current_cpu->SETMEMHI (pc, tmp_addr, opval);
d2823 1
a2827 1
    * FLD (i_rn) = opval;
d2830 1
a2856 1
    current_cpu->SETMEMHI (pc, tmp_addr, opval);
d2859 1
a2863 1
    * FLD (i_rn) = opval;
d2866 1
a2892 1
    current_cpu->SETMEMHI (pc, tmp_addr, opval);
d2895 1
a2899 1
    * FLD (i_rn) = opval;
d2902 1
a2928 1
    current_cpu->SETMEMHI (pc, tmp_addr, opval);
d2931 1
a2935 1
    * FLD (i_rn) = opval;
d2938 1
a2964 1
    current_cpu->SETMEMHI (pc, tmp_addr, opval);
d2967 1
a2971 1
    * FLD (i_rn) = opval;
d2974 1
a3000 1
    current_cpu->SETMEMHI (pc, tmp_addr, opval);
d3003 1
a3007 1
    * FLD (i_rn) = opval;
d3010 1
a3036 1
    current_cpu->SETMEMHI (pc, tmp_addr, opval);
d3039 1
a3043 1
    * FLD (i_rn) = opval;
d3046 1
a3073 1
    current_cpu->branch (opval, npc, status);
d3076 1
a3080 1
    * FLD (i_rd) = opval;
d3083 1
a3113 1
    current_cpu->branch (opval, npc, status);
d3116 1
a3120 1
    * FLD (i_rd) = opval;
d3123 1
a3153 1
    current_cpu->branch (opval, npc, status);
d3156 1
a3160 1
    * FLD (i_rd) = opval;
d3163 1
a3193 1
    current_cpu->branch (opval, npc, status);
d3196 1
a3200 1
    * FLD (i_rd) = opval;
d3203 1
a3233 1
    current_cpu->branch (opval, npc, status);
d3236 1
a3240 1
    * FLD (i_rd) = opval;
d3243 1
a3248 1
    * FLD (i_rn) = opval;
d3251 1
a3278 1
    current_cpu->branch (opval, npc, status);
d3281 1
a3285 1
    * FLD (i_rd) = opval;
d3288 1
a3293 1
    * FLD (i_rn) = opval;
d3296 1
a3323 1
    current_cpu->branch (opval, npc, status);
d3326 1
a3330 1
    * FLD (i_rd) = opval;
d3333 1
a3338 1
    * FLD (i_rn) = opval;
d3341 1
a3368 1
    current_cpu->branch (opval, npc, status);
d3371 1
a3375 1
    * FLD (i_rd) = opval;
d3378 1
a3383 1
    * FLD (i_rn) = opval;
d3386 1
a3413 1
    current_cpu->branch (opval, npc, status);
d3416 1
a3420 1
    * FLD (i_rd) = opval;
d3423 1
a3428 1
    * FLD (i_rn) = opval;
d3431 1
a3458 1
    current_cpu->branch (opval, npc, status);
d3461 1
a3465 1
    * FLD (i_rd) = opval;
d3468 1
a3473 1
    * FLD (i_rn) = opval;
d3476 1
a3503 1
    current_cpu->branch (opval, npc, status);
d3506 1
a3510 1
    * FLD (i_rd) = opval;
d3513 1
a3518 1
    * FLD (i_rn) = opval;
d3521 1
a3548 1
    current_cpu->branch (opval, npc, status);
d3551 1
a3555 1
    * FLD (i_rd) = opval;
d3558 1
a3563 1
    * FLD (i_rn) = opval;
d3566 1
a3593 1
    current_cpu->branch (opval, npc, status);
d3596 1
a3600 1
    * FLD (i_rd) = opval;
d3603 1
a3633 1
    current_cpu->branch (opval, npc, status);
d3636 1
a3640 1
    * FLD (i_rd) = opval;
d3643 1
a3673 1
    current_cpu->branch (opval, npc, status);
d3676 1
a3680 1
    * FLD (i_rd) = opval;
d3683 1
a3713 1
    current_cpu->branch (opval, npc, status);
d3716 1
a3720 1
    * FLD (i_rd) = opval;
d3723 1
a3753 1
    current_cpu->branch (opval, npc, status);
d3756 1
a3760 1
    * FLD (i_rd) = opval;
d3763 1
a3768 1
    * FLD (i_rn) = opval;
d3771 1
a3798 1
    current_cpu->branch (opval, npc, status);
d3801 1
a3805 1
    * FLD (i_rd) = opval;
d3808 1
a3813 1
    * FLD (i_rn) = opval;
d3816 1
a3843 1
    current_cpu->branch (opval, npc, status);
d3846 1
a3850 1
    * FLD (i_rd) = opval;
d3853 1
a3858 1
    * FLD (i_rn) = opval;
d3861 1
a3888 1
    current_cpu->branch (opval, npc, status);
d3891 1
a3895 1
    * FLD (i_rd) = opval;
d3898 1
a3903 1
    * FLD (i_rn) = opval;
d3906 1
a3933 1
    current_cpu->branch (opval, npc, status);
d3936 1
a3940 1
    * FLD (i_rd) = opval;
d3943 1
a3948 1
    * FLD (i_rn) = opval;
d3951 1
a3978 1
    current_cpu->branch (opval, npc, status);
d3981 1
a3985 1
    * FLD (i_rd) = opval;
d3988 1
a3993 1
    * FLD (i_rn) = opval;
d3996 1
a4023 1
    current_cpu->branch (opval, npc, status);
d4026 1
a4030 1
    * FLD (i_rd) = opval;
d4033 1
a4038 1
    * FLD (i_rn) = opval;
d4041 1
a4068 1
    current_cpu->branch (opval, npc, status);
d4071 1
a4075 1
    * FLD (i_rd) = opval;
d4078 1
a4083 1
    * FLD (i_rn) = opval;
d4086 1
a4113 1
    current_cpu->branch (opval, npc, status);
d4116 1
a4120 1
    * FLD (i_rd) = opval;
d4123 1
a4153 1
    current_cpu->branch (opval, npc, status);
d4156 1
a4160 1
    * FLD (i_rd) = opval;
d4163 1
a4193 1
    current_cpu->branch (opval, npc, status);
d4196 1
a4200 1
    * FLD (i_rd) = opval;
d4203 1
a4233 1
    current_cpu->branch (opval, npc, status);
d4236 1
a4240 1
    * FLD (i_rd) = opval;
d4243 1
a4273 1
    current_cpu->branch (opval, npc, status);
d4276 1
a4280 1
    * FLD (i_rd) = opval;
d4283 1
a4288 1
    * FLD (i_rn) = opval;
d4291 1
a4318 1
    current_cpu->branch (opval, npc, status);
d4321 1
a4325 1
    * FLD (i_rd) = opval;
d4328 1
a4333 1
    * FLD (i_rn) = opval;
d4336 1
a4363 1
    current_cpu->branch (opval, npc, status);
d4366 1
a4370 1
    * FLD (i_rd) = opval;
d4373 1
a4378 1
    * FLD (i_rn) = opval;
d4381 1
a4408 1
    current_cpu->branch (opval, npc, status);
d4411 1
a4415 1
    * FLD (i_rd) = opval;
d4418 1
a4423 1
    * FLD (i_rn) = opval;
d4426 1
a4453 1
    current_cpu->branch (opval, npc, status);
d4456 1
a4460 1
    * FLD (i_rd) = opval;
d4463 1
a4468 1
    * FLD (i_rn) = opval;
d4471 1
a4498 1
    current_cpu->branch (opval, npc, status);
d4501 1
a4505 1
    * FLD (i_rd) = opval;
d4508 1
a4513 1
    * FLD (i_rn) = opval;
d4516 1
a4543 1
    current_cpu->branch (opval, npc, status);
d4546 1
a4550 1
    * FLD (i_rd) = opval;
d4553 1
a4558 1
    * FLD (i_rn) = opval;
d4561 1
a4588 1
    current_cpu->branch (opval, npc, status);
d4591 1
a4595 1
    * FLD (i_rd) = opval;
d4598 1
a4603 1
    * FLD (i_rn) = opval;
d4606 1
a4630 1
    * FLD (i_mul_rd) = opval;
d4633 1
a4638 1
    current_cpu->hardware.h_zbit = opval;
d4641 1
a4644 1
    current_cpu->hardware.h_nbit = opval;
d4647 1
a4672 1
    * FLD (i_mul_rd) = opval;
d4675 1
a4680 1
    current_cpu->hardware.h_zbit = opval;
d4683 1
a4686 1
    current_cpu->hardware.h_nbit = opval;
d4689 1
a4717 1
    * FLD (i_rdhi) = opval;
d4720 1
a4723 1
    * FLD (i_rdlo) = opval;
d4726 1
a4731 1
    current_cpu->hardware.h_zbit = opval;
d4734 1
a4737 1
    current_cpu->hardware.h_nbit = opval;
d4740 1
a4769 1
    * FLD (i_rdhi) = opval;
d4772 1
a4775 1
    * FLD (i_rdlo) = opval;
d4778 1
a4783 1
    current_cpu->hardware.h_zbit = opval;
d4786 1
a4789 1
    current_cpu->hardware.h_nbit = opval;
d4792 1
a4820 1
    * FLD (i_rdhi) = opval;
d4823 1
a4826 1
    * FLD (i_rdlo) = opval;
d4829 1
a4834 1
    current_cpu->hardware.h_zbit = opval;
d4837 1
a4840 1
    current_cpu->hardware.h_nbit = opval;
d4843 1
a4872 1
    * FLD (i_rdhi) = opval;
d4875 1
a4878 1
    * FLD (i_rdlo) = opval;
d4881 1
a4886 1
    current_cpu->hardware.h_zbit = opval;
d4889 1
a4892 1
    current_cpu->hardware.h_nbit = opval;
d4895 1
a4921 1
    current_cpu->SETMEMSI (pc, * FLD (i_rn), opval);
d4924 1
a4927 1
    * FLD (i_rd) = opval;
d4930 1
a4954 1
    current_cpu->SETMEMQI (pc, * FLD (i_rn), opval);
d4957 1
a4960 1
    * FLD (i_rd) = opval;
d4963 1
a4984 1
    current_cpu->branch (opval, npc, status);
d4987 1
a5016 1
    current_cpu->branch (opval, npc, status);
d5019 1
a5023 1
    current_cpu->h_cpsr_set (opval);
d5026 1
a5033 1
    * FLD (i_rd) = opval;
d5036 1
a5042 1
    current_cpu->hardware.h_zbit = opval;
d5045 1
a5048 1
    current_cpu->hardware.h_nbit = opval;
d5051 1
a5055 1
    current_cpu->hardware.h_cbit = opval;
d5058 1
a5092 1
    current_cpu->branch (opval, npc, status);
d5095 1
a5099 1
    current_cpu->h_cpsr_set (opval);
d5102 1
a5109 1
    * FLD (i_rd) = opval;
d5112 1
a5118 1
    current_cpu->hardware.h_zbit = opval;
d5121 1
a5124 1
    current_cpu->hardware.h_nbit = opval;
d5127 1
a5131 1
    current_cpu->hardware.h_cbit = opval;
d5134 1
a5164 1
    current_cpu->branch (opval, npc, status);
d5167 1
a5171 1
    current_cpu->h_cpsr_set (opval);
d5174 1
a5181 1
    * FLD (i_rd) = opval;
d5184 1
a5189 1
    current_cpu->hardware.h_zbit = opval;
d5192 1
a5195 1
    current_cpu->hardware.h_nbit = opval;
d5198 1
a5232 1
    current_cpu->branch (opval, npc, status);
d5235 1
a5239 1
    current_cpu->h_cpsr_set (opval);
d5242 1
a5249 1
    * FLD (i_rd) = opval;
d5252 1
a5258 1
    current_cpu->hardware.h_zbit = opval;
d5261 1
a5264 1
    current_cpu->hardware.h_nbit = opval;
d5267 1
a5271 1
    current_cpu->hardware.h_cbit = opval;
d5274 1
a5308 1
    current_cpu->branch (opval, npc, status);
d5311 1
a5315 1
    current_cpu->h_cpsr_set (opval);
d5318 1
a5325 1
    * FLD (i_rd) = opval;
d5328 1
a5334 1
    current_cpu->hardware.h_zbit = opval;
d5337 1
a5340 1
    current_cpu->hardware.h_nbit = opval;
d5343 1
a5347 1
    current_cpu->hardware.h_cbit = opval;
d5350 1
a5380 1
    current_cpu->branch (opval, npc, status);
d5383 1
a5387 1
    current_cpu->h_cpsr_set (opval);
d5390 1
a5397 1
    * FLD (i_rd) = opval;
d5400 1
a5405 1
    current_cpu->hardware.h_zbit = opval;
d5408 1
a5411 1
    current_cpu->hardware.h_nbit = opval;
d5414 1
a5448 1
    current_cpu->branch (opval, npc, status);
d5451 1
a5455 1
    current_cpu->h_cpsr_set (opval);
d5458 1
a5465 1
    * FLD (i_rd) = opval;
d5468 1
a5474 1
    current_cpu->hardware.h_zbit = opval;
d5477 1
a5480 1
    current_cpu->hardware.h_nbit = opval;
d5483 1
a5487 1
    current_cpu->hardware.h_cbit = opval;
d5490 1
a5524 1
    current_cpu->branch (opval, npc, status);
d5527 1
a5531 1
    current_cpu->h_cpsr_set (opval);
d5534 1
a5541 1
    * FLD (i_rd) = opval;
d5544 1
a5550 1
    current_cpu->hardware.h_zbit = opval;
d5553 1
a5556 1
    current_cpu->hardware.h_nbit = opval;
d5559 1
a5563 1
    current_cpu->hardware.h_cbit = opval;
d5566 1
a5596 1
    current_cpu->branch (opval, npc, status);
d5599 1
a5603 1
    current_cpu->h_cpsr_set (opval);
d5606 1
a5613 1
    * FLD (i_rd) = opval;
d5616 1
a5621 1
    current_cpu->hardware.h_zbit = opval;
d5624 1
a5627 1
    current_cpu->hardware.h_nbit = opval;
d5630 1
a5664 1
    current_cpu->branch (opval, npc, status);
d5667 1
a5671 1
    current_cpu->h_cpsr_set (opval);
d5674 1
a5681 1
    * FLD (i_rd) = opval;
d5684 1
a5690 1
    current_cpu->hardware.h_zbit = opval;
d5693 1
a5696 1
    current_cpu->hardware.h_nbit = opval;
d5699 1
a5703 1
    current_cpu->hardware.h_cbit = opval;
d5706 1
a5740 1
    current_cpu->branch (opval, npc, status);
d5743 1
a5747 1
    current_cpu->h_cpsr_set (opval);
d5750 1
a5757 1
    * FLD (i_rd) = opval;
d5760 1
a5766 1
    current_cpu->hardware.h_zbit = opval;
d5769 1
a5772 1
    current_cpu->hardware.h_nbit = opval;
d5775 1
a5779 1
    current_cpu->hardware.h_cbit = opval;
d5782 1
a5812 1
    current_cpu->branch (opval, npc, status);
d5815 1
a5819 1
    current_cpu->h_cpsr_set (opval);
d5822 1
a5829 1
    * FLD (i_rd) = opval;
d5832 1
a5837 1
    current_cpu->hardware.h_zbit = opval;
d5840 1
a5843 1
    current_cpu->hardware.h_nbit = opval;
d5846 1
a5880 1
    current_cpu->branch (opval, npc, status);
d5883 1
a5887 1
    current_cpu->h_cpsr_set (opval);
d5890 1
a5897 1
    * FLD (i_rd) = opval;
d5900 1
a5906 1
    current_cpu->hardware.h_zbit = opval;
d5909 1
a5912 1
    current_cpu->hardware.h_nbit = opval;
d5915 1
a5919 1
    current_cpu->hardware.h_cbit = opval;
d5922 1
a5956 1
    current_cpu->branch (opval, npc, status);
d5959 1
a5963 1
    current_cpu->h_cpsr_set (opval);
d5966 1
a5973 1
    * FLD (i_rd) = opval;
d5976 1
a5982 1
    current_cpu->hardware.h_zbit = opval;
d5985 1
a5988 1
    current_cpu->hardware.h_nbit = opval;
d5991 1
a5995 1
    current_cpu->hardware.h_cbit = opval;
d5998 1
a6028 1
    current_cpu->branch (opval, npc, status);
d6031 1
a6035 1
    current_cpu->h_cpsr_set (opval);
d6038 1
a6045 1
    * FLD (i_rd) = opval;
d6048 1
a6053 1
    current_cpu->hardware.h_zbit = opval;
d6056 1
a6059 1
    current_cpu->hardware.h_nbit = opval;
d6062 1
a6096 1
    current_cpu->branch (opval, npc, status);
d6099 1
a6103 1
    current_cpu->h_cpsr_set (opval);
d6106 1
a6113 1
    * FLD (i_rd) = opval;
d6116 1
a6122 1
    current_cpu->hardware.h_zbit = opval;
d6125 1
a6128 1
    current_cpu->hardware.h_nbit = opval;
d6131 1
a6135 1
    current_cpu->hardware.h_cbit = opval;
d6138 1
a6172 1
    current_cpu->branch (opval, npc, status);
d6175 1
a6179 1
    current_cpu->h_cpsr_set (opval);
d6182 1
a6189 1
    * FLD (i_rd) = opval;
d6192 1
a6198 1
    current_cpu->hardware.h_zbit = opval;
d6201 1
a6204 1
    current_cpu->hardware.h_nbit = opval;
d6207 1
a6211 1
    current_cpu->hardware.h_cbit = opval;
d6214 1
a6244 1
    current_cpu->branch (opval, npc, status);
d6247 1
a6251 1
    current_cpu->h_cpsr_set (opval);
d6254 1
a6261 1
    * FLD (i_rd) = opval;
d6264 1
a6269 1
    current_cpu->hardware.h_zbit = opval;
d6272 1
a6275 1
    current_cpu->hardware.h_nbit = opval;
d6278 1
a6314 1
    current_cpu->branch (opval, npc, status);
d6317 1
a6321 1
    current_cpu->h_cpsr_set (opval);
d6324 1
a6331 1
    * FLD (i_rd) = opval;
d6334 1
a6342 1
    current_cpu->hardware.h_zbit = opval;
d6345 1
a6348 1
    current_cpu->hardware.h_nbit = opval;
d6351 1
a6355 1
    current_cpu->hardware.h_cbit = opval;
d6358 1
a6361 1
    current_cpu->hardware.h_vbit = opval;
d6364 1
a6400 1
    current_cpu->branch (opval, npc, status);
d6403 1
a6407 1
    current_cpu->h_cpsr_set (opval);
d6410 1
a6417 1
    * FLD (i_rd) = opval;
d6420 1
a6428 1
    current_cpu->hardware.h_zbit = opval;
d6431 1
a6434 1
    current_cpu->hardware.h_nbit = opval;
d6437 1
a6441 1
    current_cpu->hardware.h_cbit = opval;
d6444 1
a6447 1
    current_cpu->hardware.h_vbit = opval;
d6450 1
a6481 1
    current_cpu->h_cpsr_set (opval);
d6484 1
a6488 1
    current_cpu->branch (opval, npc, status);
d6491 1
a6502 1
    current_cpu->hardware.h_zbit = opval;
d6505 1
a6508 1
    current_cpu->hardware.h_nbit = opval;
d6511 1
a6515 1
    current_cpu->hardware.h_cbit = opval;
d6518 1
a6521 1
    current_cpu->hardware.h_vbit = opval;
d6524 1
a6529 1
    * FLD (i_rd) = opval;
d6532 1
a6566 1
    current_cpu->branch (opval, npc, status);
d6569 1
a6573 1
    current_cpu->h_cpsr_set (opval);
d6576 1
a6583 1
    * FLD (i_rd) = opval;
d6586 1
a6594 1
    current_cpu->hardware.h_zbit = opval;
d6597 1
a6600 1
    current_cpu->hardware.h_nbit = opval;
d6603 1
a6607 1
    current_cpu->hardware.h_cbit = opval;
d6610 1
a6613 1
    current_cpu->hardware.h_vbit = opval;
d6616 1
a6652 1
    current_cpu->branch (opval, npc, status);
d6655 1
a6659 1
    current_cpu->h_cpsr_set (opval);
d6662 1
a6669 1
    * FLD (i_rd) = opval;
d6672 1
a6680 1
    current_cpu->hardware.h_zbit = opval;
d6683 1
a6686 1
    current_cpu->hardware.h_nbit = opval;
d6689 1
a6693 1
    current_cpu->hardware.h_cbit = opval;
d6696 1
a6699 1
    current_cpu->hardware.h_vbit = opval;
d6702 1
a6733 1
    current_cpu->h_cpsr_set (opval);
d6736 1
a6740 1
    current_cpu->branch (opval, npc, status);
d6743 1
a6754 1
    current_cpu->hardware.h_zbit = opval;
d6757 1
a6760 1
    current_cpu->hardware.h_nbit = opval;
d6763 1
a6767 1
    current_cpu->hardware.h_cbit = opval;
d6770 1
a6773 1
    current_cpu->hardware.h_vbit = opval;
d6776 1
a6781 1
    * FLD (i_rd) = opval;
d6784 1
a6818 1
    current_cpu->branch (opval, npc, status);
d6821 1
a6825 1
    current_cpu->h_cpsr_set (opval);
d6828 1
a6835 1
    * FLD (i_rd) = opval;
d6838 1
a6846 1
    current_cpu->hardware.h_zbit = opval;
d6849 1
a6852 1
    current_cpu->hardware.h_nbit = opval;
d6855 1
d6859 1
a6859 2
    BI opval = NOTSI (SUBCFSI (tmp_temp_op1, tmp_temp_op2, 0));
    current_cpu->hardware.h_cbit = opval;
d6862 1
a6865 1
    current_cpu->hardware.h_vbit = opval;
d6868 1
a6904 1
    current_cpu->branch (opval, npc, status);
d6907 1
a6911 1
    current_cpu->h_cpsr_set (opval);
d6914 1
a6921 1
    * FLD (i_rd) = opval;
d6924 1
a6932 1
    current_cpu->hardware.h_zbit = opval;
d6935 1
a6938 1
    current_cpu->hardware.h_nbit = opval;
d6941 1
d6945 1
a6945 2
    BI opval = NOTSI (SUBCFSI (tmp_temp_op1, tmp_temp_op2, 0));
    current_cpu->hardware.h_cbit = opval;
d6948 1
a6951 1
    current_cpu->hardware.h_vbit = opval;
d6954 1
a6985 1
    current_cpu->h_cpsr_set (opval);
d6988 1
a6992 1
    current_cpu->branch (opval, npc, status);
d6995 1
a7006 1
    current_cpu->hardware.h_zbit = opval;
d7009 1
a7012 1
    current_cpu->hardware.h_nbit = opval;
d7015 1
d7019 1
a7019 2
    BI opval = NOTSI (SUBCFSI (* FLD (i_rn), FLD (f_imm12), 0));
    current_cpu->hardware.h_cbit = opval;
d7022 1
a7025 1
    current_cpu->hardware.h_vbit = opval;
d7028 1
a7033 1
    * FLD (i_rd) = opval;
d7036 1
a7070 1
    current_cpu->branch (opval, npc, status);
d7073 1
a7077 1
    current_cpu->h_cpsr_set (opval);
d7080 1
a7087 1
    * FLD (i_rd) = opval;
d7090 1
a7098 1
    current_cpu->hardware.h_zbit = opval;
d7101 1
a7104 1
    current_cpu->hardware.h_nbit = opval;
d7107 1
d7111 1
a7111 2
    BI opval = NOTSI (SUBCFSI (tmp_temp_op1, tmp_temp_op2, NOTBI (current_cpu->hardware.h_cbit)));
    current_cpu->hardware.h_cbit = opval;
d7114 1
a7117 1
    current_cpu->hardware.h_vbit = opval;
d7120 1
a7156 1
    current_cpu->branch (opval, npc, status);
d7159 1
a7163 1
    current_cpu->h_cpsr_set (opval);
d7166 1
a7173 1
    * FLD (i_rd) = opval;
d7176 1
a7184 1
    current_cpu->hardware.h_zbit = opval;
d7187 1
a7190 1
    current_cpu->hardware.h_nbit = opval;
d7193 1
d7197 1
a7197 2
    BI opval = NOTSI (SUBCFSI (tmp_temp_op1, tmp_temp_op2, NOTBI (current_cpu->hardware.h_cbit)));
    current_cpu->hardware.h_cbit = opval;
d7200 1
a7203 1
    current_cpu->hardware.h_vbit = opval;
d7206 1
a7237 1
    current_cpu->h_cpsr_set (opval);
d7240 1
a7244 1
    current_cpu->branch (opval, npc, status);
d7247 1
a7258 1
    current_cpu->hardware.h_zbit = opval;
d7261 1
a7264 1
    current_cpu->hardware.h_nbit = opval;
d7267 1
d7271 1
a7271 2
    BI opval = NOTSI (SUBCFSI (* FLD (i_rn), FLD (f_imm12), NOTBI (current_cpu->hardware.h_cbit)));
    current_cpu->hardware.h_cbit = opval;
d7274 1
a7277 1
    current_cpu->hardware.h_vbit = opval;
d7280 1
a7285 1
    * FLD (i_rd) = opval;
d7288 1
a7322 1
    current_cpu->branch (opval, npc, status);
d7325 1
a7329 1
    current_cpu->h_cpsr_set (opval);
d7332 1
a7339 1
    * FLD (i_rd) = opval;
d7342 1
a7350 1
    current_cpu->hardware.h_zbit = opval;
d7353 1
a7356 1
    current_cpu->hardware.h_nbit = opval;
d7359 1
d7363 1
a7363 2
    BI opval = NOTSI (SUBCFSI (tmp_temp_op2, tmp_temp_op1, 0));
    current_cpu->hardware.h_cbit = opval;
d7366 1
a7369 1
    current_cpu->hardware.h_vbit = opval;
d7372 1
a7408 1
    current_cpu->branch (opval, npc, status);
d7411 1
a7415 1
    current_cpu->h_cpsr_set (opval);
d7418 1
a7425 1
    * FLD (i_rd) = opval;
d7428 1
a7436 1
    current_cpu->hardware.h_zbit = opval;
d7439 1
a7442 1
    current_cpu->hardware.h_nbit = opval;
d7445 1
d7449 1
a7449 2
    BI opval = NOTSI (SUBCFSI (tmp_temp_op2, tmp_temp_op1, 0));
    current_cpu->hardware.h_cbit = opval;
d7452 1
a7455 1
    current_cpu->hardware.h_vbit = opval;
d7458 1
a7489 1
    current_cpu->h_cpsr_set (opval);
d7492 1
a7496 1
    current_cpu->branch (opval, npc, status);
d7499 1
a7510 1
    current_cpu->hardware.h_zbit = opval;
d7513 1
a7516 1
    current_cpu->hardware.h_nbit = opval;
d7519 1
d7523 1
a7523 2
    BI opval = NOTSI (SUBCFSI (FLD (f_imm12), * FLD (i_rn), 0));
    current_cpu->hardware.h_cbit = opval;
d7526 1
a7529 1
    current_cpu->hardware.h_vbit = opval;
d7532 1
a7537 1
    * FLD (i_rd) = opval;
d7540 1
a7574 1
    current_cpu->branch (opval, npc, status);
d7577 1
a7581 1
    current_cpu->h_cpsr_set (opval);
d7584 1
a7591 1
    * FLD (i_rd) = opval;
d7594 1
a7602 1
    current_cpu->hardware.h_zbit = opval;
d7605 1
a7608 1
    current_cpu->hardware.h_nbit = opval;
d7611 1
d7615 1
a7615 2
    BI opval = NOTSI (SUBCFSI (tmp_temp_op2, tmp_temp_op1, NOTBI (current_cpu->hardware.h_cbit)));
    current_cpu->hardware.h_cbit = opval;
d7618 1
a7621 1
    current_cpu->hardware.h_vbit = opval;
d7624 1
a7660 1
    current_cpu->branch (opval, npc, status);
d7663 1
a7667 1
    current_cpu->h_cpsr_set (opval);
d7670 1
a7677 1
    * FLD (i_rd) = opval;
d7680 1
a7688 1
    current_cpu->hardware.h_zbit = opval;
d7691 1
a7694 1
    current_cpu->hardware.h_nbit = opval;
d7697 1
d7701 1
a7701 2
    BI opval = NOTSI (SUBCFSI (tmp_temp_op2, tmp_temp_op1, NOTBI (current_cpu->hardware.h_cbit)));
    current_cpu->hardware.h_cbit = opval;
d7704 1
a7707 1
    current_cpu->hardware.h_vbit = opval;
d7710 1
a7741 1
    current_cpu->h_cpsr_set (opval);
d7744 1
a7748 1
    current_cpu->branch (opval, npc, status);
d7751 1
a7762 1
    current_cpu->hardware.h_zbit = opval;
d7765 1
a7768 1
    current_cpu->hardware.h_nbit = opval;
d7771 1
d7775 1
a7775 2
    BI opval = NOTSI (SUBCFSI (FLD (f_imm12), * FLD (i_rn), NOTBI (current_cpu->hardware.h_cbit)));
    current_cpu->hardware.h_cbit = opval;
d7778 1
a7781 1
    current_cpu->hardware.h_vbit = opval;
d7784 1
a7789 1
    * FLD (i_rd) = opval;
d7792 1
a7823 1
    current_cpu->h_cpsr_set (opval);
d7826 1
a7832 1
    current_cpu->hardware.h_zbit = opval;
d7835 1
a7838 1
    current_cpu->hardware.h_nbit = opval;
d7841 1
a7845 1
    current_cpu->hardware.h_cbit = opval;
d7848 1
a7879 1
    current_cpu->h_cpsr_set (opval);
d7882 1
a7888 1
    current_cpu->hardware.h_zbit = opval;
d7891 1
a7894 1
    current_cpu->hardware.h_nbit = opval;
d7897 1
a7901 1
    current_cpu->hardware.h_cbit = opval;
d7904 1
a7936 1
    current_cpu->hardware.h_zbit = opval;
d7939 1
a7942 1
    current_cpu->hardware.h_nbit = opval;
d7945 1
a7949 1
    current_cpu->hardware.h_cbit = opval;
d7952 1
a7982 1
    current_cpu->h_cpsr_set (opval);
d7985 1
a7991 1
    current_cpu->hardware.h_zbit = opval;
d7994 1
a7997 1
    current_cpu->hardware.h_nbit = opval;
d8000 1
a8004 1
    current_cpu->hardware.h_cbit = opval;
d8007 1
a8038 1
    current_cpu->h_cpsr_set (opval);
d8041 1
a8047 1
    current_cpu->hardware.h_zbit = opval;
d8050 1
a8053 1
    current_cpu->hardware.h_nbit = opval;
d8056 1
a8060 1
    current_cpu->hardware.h_cbit = opval;
d8063 1
a8095 1
    current_cpu->hardware.h_zbit = opval;
d8098 1
a8101 1
    current_cpu->hardware.h_nbit = opval;
d8104 1
a8108 1
    current_cpu->hardware.h_cbit = opval;
d8111 1
a8137 1
    current_cpu->h_cpsr_set (opval);
d8140 1
a8148 1
    current_cpu->hardware.h_zbit = opval;
d8151 1
a8154 1
    current_cpu->hardware.h_nbit = opval;
d8157 1
d8161 1
a8161 2
    BI opval = NOTSI (SUBCFSI (* FLD (i_rn), tmp_operand2, 0));
    current_cpu->hardware.h_cbit = opval;
d8164 1
a8167 1
    current_cpu->hardware.h_vbit = opval;
d8170 1
a8197 1
    current_cpu->h_cpsr_set (opval);
d8200 1
a8208 1
    current_cpu->hardware.h_zbit = opval;
d8211 1
a8214 1
    current_cpu->hardware.h_nbit = opval;
d8217 1
d8221 1
a8221 2
    BI opval = NOTSI (SUBCFSI (* FLD (i_rn), tmp_operand2, 0));
    current_cpu->hardware.h_cbit = opval;
d8224 1
a8227 1
    current_cpu->hardware.h_vbit = opval;
d8230 1
a8257 1
    current_cpu->hardware.h_zbit = opval;
d8260 1
a8263 1
    current_cpu->hardware.h_nbit = opval;
d8266 1
d8270 1
a8270 2
    BI opval = NOTSI (SUBCFSI (* FLD (i_rn), FLD (f_imm12), 0));
    current_cpu->hardware.h_cbit = opval;
d8273 1
a8276 1
    current_cpu->hardware.h_vbit = opval;
d8279 1
a8304 1
    current_cpu->h_cpsr_set (opval);
d8307 1
a8315 1
    current_cpu->hardware.h_zbit = opval;
d8318 1
a8321 1
    current_cpu->hardware.h_nbit = opval;
d8324 1
a8328 1
    current_cpu->hardware.h_cbit = opval;
d8331 1
a8334 1
    current_cpu->hardware.h_vbit = opval;
d8337 1
a8364 1
    current_cpu->h_cpsr_set (opval);
d8367 1
a8375 1
    current_cpu->hardware.h_zbit = opval;
d8378 1
a8381 1
    current_cpu->hardware.h_nbit = opval;
d8384 1
a8388 1
    current_cpu->hardware.h_cbit = opval;
d8391 1
a8394 1
    current_cpu->hardware.h_vbit = opval;
d8397 1
a8424 1
    current_cpu->hardware.h_zbit = opval;
d8427 1
a8430 1
    current_cpu->hardware.h_nbit = opval;
d8433 1
a8437 1
    current_cpu->hardware.h_cbit = opval;
d8440 1
a8443 1
    current_cpu->hardware.h_vbit = opval;
d8446 1
a8472 1
    current_cpu->branch (opval, npc, status);
d8475 1
a8483 1
    current_cpu->hardware.h_gr[((UINT) 14)] = opval;
d8486 1
a8494 1
    current_cpu->hardware.h_gr[((UINT) 13)] = opval;
d8497 1
a8505 1
    current_cpu->hardware.h_gr[((UINT) 12)] = opval;
d8508 1
a8516 1
    current_cpu->hardware.h_gr[((UINT) 11)] = opval;
d8519 1
a8527 1
    current_cpu->hardware.h_gr[((UINT) 10)] = opval;
d8530 1
a8538 1
    current_cpu->hardware.h_gr[((UINT) 9)] = opval;
d8541 1
a8549 1
    current_cpu->hardware.h_gr[((UINT) 8)] = opval;
d8552 1
a8560 1
    current_cpu->hardware.h_gr[((UINT) 7)] = opval;
d8563 1
a8571 1
    current_cpu->hardware.h_gr[((UINT) 6)] = opval;
d8574 1
a8582 1
    current_cpu->hardware.h_gr[((UINT) 5)] = opval;
d8585 1
a8593 1
    current_cpu->hardware.h_gr[((UINT) 4)] = opval;
d8596 1
a8604 1
    current_cpu->hardware.h_gr[((UINT) 3)] = opval;
d8607 1
a8615 1
    current_cpu->hardware.h_gr[((UINT) 2)] = opval;
d8618 1
a8626 1
    current_cpu->hardware.h_gr[((UINT) 1)] = opval;
d8629 1
a8637 1
    current_cpu->hardware.h_gr[((UINT) 0)] = opval;
d8640 1
a8669 1
    current_cpu->branch (opval, npc, status);
d8672 1
a8676 1
    current_cpu->h_cpsr_set (opval);
d8679 1
a8687 1
    current_cpu->hardware.h_gr[((UINT) 14)] = opval;
d8690 1
a8694 1
    current_cpu->hardware.h_gr_usr[SUBSI (14, 8)] = opval;
d8697 1
a8707 1
    current_cpu->hardware.h_gr[((UINT) 13)] = opval;
d8710 1
a8714 1
    current_cpu->hardware.h_gr_usr[SUBSI (13, 8)] = opval;
d8717 1
a8727 1
    current_cpu->hardware.h_gr[((UINT) 12)] = opval;
d8730 1
a8734 1
    current_cpu->hardware.h_gr_usr[SUBSI (12, 8)] = opval;
d8737 1
a8747 1
    current_cpu->hardware.h_gr[((UINT) 11)] = opval;
d8750 1
a8754 1
    current_cpu->hardware.h_gr_usr[SUBSI (11, 8)] = opval;
d8757 1
a8767 1
    current_cpu->hardware.h_gr[((UINT) 10)] = opval;
d8770 1
a8774 1
    current_cpu->hardware.h_gr_usr[SUBSI (10, 8)] = opval;
d8777 1
a8787 1
    current_cpu->hardware.h_gr[((UINT) 9)] = opval;
d8790 1
a8794 1
    current_cpu->hardware.h_gr_usr[SUBSI (9, 8)] = opval;
d8797 1
a8807 1
    current_cpu->hardware.h_gr[((UINT) 8)] = opval;
d8810 1
a8814 1
    current_cpu->hardware.h_gr_usr[SUBSI (8, 8)] = opval;
d8817 1
a8826 1
    current_cpu->hardware.h_gr[((UINT) 7)] = opval;
d8829 1
a8837 1
    current_cpu->hardware.h_gr[((UINT) 6)] = opval;
d8840 1
a8848 1
    current_cpu->hardware.h_gr[((UINT) 5)] = opval;
d8851 1
a8859 1
    current_cpu->hardware.h_gr[((UINT) 4)] = opval;
d8862 1
a8870 1
    current_cpu->hardware.h_gr[((UINT) 3)] = opval;
d8873 1
a8881 1
    current_cpu->hardware.h_gr[((UINT) 2)] = opval;
d8884 1
a8892 1
    current_cpu->hardware.h_gr[((UINT) 1)] = opval;
d8895 1
a8903 1
    current_cpu->hardware.h_gr[((UINT) 0)] = opval;
d8906 1
a8935 1
    current_cpu->branch (opval, npc, status);
d8938 1
a8946 1
    current_cpu->hardware.h_gr[((UINT) 14)] = opval;
d8949 1
a8957 1
    current_cpu->hardware.h_gr[((UINT) 13)] = opval;
d8960 1
a8968 1
    current_cpu->hardware.h_gr[((UINT) 12)] = opval;
d8971 1
a8979 1
    current_cpu->hardware.h_gr[((UINT) 11)] = opval;
d8982 1
a8990 1
    current_cpu->hardware.h_gr[((UINT) 10)] = opval;
d8993 1
a9001 1
    current_cpu->hardware.h_gr[((UINT) 9)] = opval;
d9004 1
a9012 1
    current_cpu->hardware.h_gr[((UINT) 8)] = opval;
d9015 1
a9023 1
    current_cpu->hardware.h_gr[((UINT) 7)] = opval;
d9026 1
a9034 1
    current_cpu->hardware.h_gr[((UINT) 6)] = opval;
d9037 1
a9045 1
    current_cpu->hardware.h_gr[((UINT) 5)] = opval;
d9048 1
a9056 1
    current_cpu->hardware.h_gr[((UINT) 4)] = opval;
d9059 1
a9067 1
    current_cpu->hardware.h_gr[((UINT) 3)] = opval;
d9070 1
a9078 1
    current_cpu->hardware.h_gr[((UINT) 2)] = opval;
d9081 1
a9089 1
    current_cpu->hardware.h_gr[((UINT) 1)] = opval;
d9092 1
a9100 1
    current_cpu->hardware.h_gr[((UINT) 0)] = opval;
d9103 1
a9109 1
    * FLD (i_rn) = opval;
d9112 1
a9138 1
    current_cpu->branch (opval, npc, status);
d9141 1
a9145 1
    current_cpu->h_cpsr_set (opval);
d9148 1
a9156 1
    current_cpu->hardware.h_gr[((UINT) 14)] = opval;
d9159 1
a9163 1
    current_cpu->hardware.h_gr_usr[SUBSI (14, 8)] = opval;
d9166 1
a9176 1
    current_cpu->hardware.h_gr[((UINT) 13)] = opval;
d9179 1
a9183 1
    current_cpu->hardware.h_gr_usr[SUBSI (13, 8)] = opval;
d9186 1
a9196 1
    current_cpu->hardware.h_gr[((UINT) 12)] = opval;
d9199 1
a9203 1
    current_cpu->hardware.h_gr_usr[SUBSI (12, 8)] = opval;
d9206 1
a9216 1
    current_cpu->hardware.h_gr[((UINT) 11)] = opval;
d9219 1
a9223 1
    current_cpu->hardware.h_gr_usr[SUBSI (11, 8)] = opval;
d9226 1
a9236 1
    current_cpu->hardware.h_gr[((UINT) 10)] = opval;
d9239 1
a9243 1
    current_cpu->hardware.h_gr_usr[SUBSI (10, 8)] = opval;
d9246 1
a9256 1
    current_cpu->hardware.h_gr[((UINT) 9)] = opval;
d9259 1
a9263 1
    current_cpu->hardware.h_gr_usr[SUBSI (9, 8)] = opval;
d9266 1
a9276 1
    current_cpu->hardware.h_gr[((UINT) 8)] = opval;
d9279 1
a9283 1
    current_cpu->hardware.h_gr_usr[SUBSI (8, 8)] = opval;
d9286 1
a9295 1
    current_cpu->hardware.h_gr[((UINT) 7)] = opval;
d9298 1
a9306 1
    current_cpu->hardware.h_gr[((UINT) 6)] = opval;
d9309 1
a9317 1
    current_cpu->hardware.h_gr[((UINT) 5)] = opval;
d9320 1
a9328 1
    current_cpu->hardware.h_gr[((UINT) 4)] = opval;
d9331 1
a9339 1
    current_cpu->hardware.h_gr[((UINT) 3)] = opval;
d9342 1
a9350 1
    current_cpu->hardware.h_gr[((UINT) 2)] = opval;
d9353 1
a9361 1
    current_cpu->hardware.h_gr[((UINT) 1)] = opval;
d9364 1
a9372 1
    current_cpu->hardware.h_gr[((UINT) 0)] = opval;
d9375 1
a9381 1
    * FLD (i_rn) = opval;
d9384 1
a9411 1
    current_cpu->hardware.h_gr[((UINT) 0)] = opval;
d9414 1
a9422 1
    current_cpu->hardware.h_gr[((UINT) 1)] = opval;
d9425 1
a9433 1
    current_cpu->hardware.h_gr[((UINT) 2)] = opval;
d9436 1
a9444 1
    current_cpu->hardware.h_gr[((UINT) 3)] = opval;
d9447 1
a9455 1
    current_cpu->hardware.h_gr[((UINT) 4)] = opval;
d9458 1
a9466 1
    current_cpu->hardware.h_gr[((UINT) 5)] = opval;
d9469 1
a9477 1
    current_cpu->hardware.h_gr[((UINT) 6)] = opval;
d9480 1
a9488 1
    current_cpu->hardware.h_gr[((UINT) 7)] = opval;
d9491 1
a9499 1
    current_cpu->hardware.h_gr[((UINT) 8)] = opval;
d9502 1
a9510 1
    current_cpu->hardware.h_gr[((UINT) 9)] = opval;
d9513 1
a9521 1
    current_cpu->hardware.h_gr[((UINT) 10)] = opval;
d9524 1
a9532 1
    current_cpu->hardware.h_gr[((UINT) 11)] = opval;
d9535 1
a9543 1
    current_cpu->hardware.h_gr[((UINT) 12)] = opval;
d9546 1
a9554 1
    current_cpu->hardware.h_gr[((UINT) 13)] = opval;
d9557 1
a9565 1
    current_cpu->hardware.h_gr[((UINT) 14)] = opval;
d9568 1
a9576 1
    current_cpu->branch (opval, npc, status);
d9579 1
a9608 1
    current_cpu->hardware.h_gr[((UINT) 0)] = opval;
d9611 1
a9619 1
    current_cpu->hardware.h_gr[((UINT) 1)] = opval;
d9622 1
a9630 1
    current_cpu->hardware.h_gr[((UINT) 2)] = opval;
d9633 1
a9641 1
    current_cpu->hardware.h_gr[((UINT) 3)] = opval;
d9644 1
a9652 1
    current_cpu->hardware.h_gr[((UINT) 4)] = opval;
d9655 1
a9663 1
    current_cpu->hardware.h_gr[((UINT) 5)] = opval;
d9666 1
a9674 1
    current_cpu->hardware.h_gr[((UINT) 6)] = opval;
d9677 1
a9685 1
    current_cpu->hardware.h_gr[((UINT) 7)] = opval;
d9688 1
a9697 1
    current_cpu->hardware.h_gr[((UINT) 8)] = opval;
d9700 1
a9704 1
    current_cpu->hardware.h_gr_usr[SUBSI (8, 8)] = opval;
d9707 1
a9717 1
    current_cpu->hardware.h_gr[((UINT) 9)] = opval;
d9720 1
a9724 1
    current_cpu->hardware.h_gr_usr[SUBSI (9, 8)] = opval;
d9727 1
a9737 1
    current_cpu->hardware.h_gr[((UINT) 10)] = opval;
d9740 1
a9744 1
    current_cpu->hardware.h_gr_usr[SUBSI (10, 8)] = opval;
d9747 1
a9757 1
    current_cpu->hardware.h_gr[((UINT) 11)] = opval;
d9760 1
a9764 1
    current_cpu->hardware.h_gr_usr[SUBSI (11, 8)] = opval;
d9767 1
a9777 1
    current_cpu->hardware.h_gr[((UINT) 12)] = opval;
d9780 1
a9784 1
    current_cpu->hardware.h_gr_usr[SUBSI (12, 8)] = opval;
d9787 1
a9797 1
    current_cpu->hardware.h_gr[((UINT) 13)] = opval;
d9800 1
a9804 1
    current_cpu->hardware.h_gr_usr[SUBSI (13, 8)] = opval;
d9807 1
a9817 1
    current_cpu->hardware.h_gr[((UINT) 14)] = opval;
d9820 1
a9824 1
    current_cpu->hardware.h_gr_usr[SUBSI (14, 8)] = opval;
d9827 1
a9836 1
    current_cpu->branch (opval, npc, status);
d9839 1
a9842 1
    current_cpu->h_cpsr_set (opval);
d9845 1
a9874 1
    current_cpu->hardware.h_gr[((UINT) 0)] = opval;
d9877 1
a9885 1
    current_cpu->hardware.h_gr[((UINT) 1)] = opval;
d9888 1
a9896 1
    current_cpu->hardware.h_gr[((UINT) 2)] = opval;
d9899 1
a9907 1
    current_cpu->hardware.h_gr[((UINT) 3)] = opval;
d9910 1
a9918 1
    current_cpu->hardware.h_gr[((UINT) 4)] = opval;
d9921 1
a9929 1
    current_cpu->hardware.h_gr[((UINT) 5)] = opval;
d9932 1
a9940 1
    current_cpu->hardware.h_gr[((UINT) 6)] = opval;
d9943 1
a9951 1
    current_cpu->hardware.h_gr[((UINT) 7)] = opval;
d9954 1
a9962 1
    current_cpu->hardware.h_gr[((UINT) 8)] = opval;
d9965 1
a9973 1
    current_cpu->hardware.h_gr[((UINT) 9)] = opval;
d9976 1
a9984 1
    current_cpu->hardware.h_gr[((UINT) 10)] = opval;
d9987 1
a9995 1
    current_cpu->hardware.h_gr[((UINT) 11)] = opval;
d9998 1
a10006 1
    current_cpu->hardware.h_gr[((UINT) 12)] = opval;
d10009 1
a10017 1
    current_cpu->hardware.h_gr[((UINT) 13)] = opval;
d10020 1
a10028 1
    current_cpu->hardware.h_gr[((UINT) 14)] = opval;
d10031 1
a10039 1
    current_cpu->branch (opval, npc, status);
d10042 1
a10047 1
    * FLD (i_rn) = opval;
d10050 1
a10077 1
    current_cpu->hardware.h_gr[((UINT) 0)] = opval;
d10080 1
a10088 1
    current_cpu->hardware.h_gr[((UINT) 1)] = opval;
d10091 1
a10099 1
    current_cpu->hardware.h_gr[((UINT) 2)] = opval;
d10102 1
a10110 1
    current_cpu->hardware.h_gr[((UINT) 3)] = opval;
d10113 1
a10121 1
    current_cpu->hardware.h_gr[((UINT) 4)] = opval;
d10124 1
a10132 1
    current_cpu->hardware.h_gr[((UINT) 5)] = opval;
d10135 1
a10143 1
    current_cpu->hardware.h_gr[((UINT) 6)] = opval;
d10146 1
a10154 1
    current_cpu->hardware.h_gr[((UINT) 7)] = opval;
d10157 1
a10166 1
    current_cpu->hardware.h_gr[((UINT) 8)] = opval;
d10169 1
a10173 1
    current_cpu->hardware.h_gr_usr[SUBSI (8, 8)] = opval;
d10176 1
a10186 1
    current_cpu->hardware.h_gr[((UINT) 9)] = opval;
d10189 1
a10193 1
    current_cpu->hardware.h_gr_usr[SUBSI (9, 8)] = opval;
d10196 1
a10206 1
    current_cpu->hardware.h_gr[((UINT) 10)] = opval;
d10209 1
a10213 1
    current_cpu->hardware.h_gr_usr[SUBSI (10, 8)] = opval;
d10216 1
a10226 1
    current_cpu->hardware.h_gr[((UINT) 11)] = opval;
d10229 1
a10233 1
    current_cpu->hardware.h_gr_usr[SUBSI (11, 8)] = opval;
d10236 1
a10246 1
    current_cpu->hardware.h_gr[((UINT) 12)] = opval;
d10249 1
a10253 1
    current_cpu->hardware.h_gr_usr[SUBSI (12, 8)] = opval;
d10256 1
a10266 1
    current_cpu->hardware.h_gr[((UINT) 13)] = opval;
d10269 1
a10273 1
    current_cpu->hardware.h_gr_usr[SUBSI (13, 8)] = opval;
d10276 1
a10286 1
    current_cpu->hardware.h_gr[((UINT) 14)] = opval;
d10289 1
a10293 1
    current_cpu->hardware.h_gr_usr[SUBSI (14, 8)] = opval;
d10296 1
a10305 1
    current_cpu->branch (opval, npc, status);
d10308 1
a10311 1
    current_cpu->h_cpsr_set (opval);
d10314 1
a10319 1
    * FLD (i_rn) = opval;
d10322 1
a10348 1
    current_cpu->hardware.h_gr[((UINT) 0)] = opval;
d10351 1
a10359 1
    current_cpu->hardware.h_gr[((UINT) 1)] = opval;
d10362 1
a10370 1
    current_cpu->hardware.h_gr[((UINT) 2)] = opval;
d10373 1
a10381 1
    current_cpu->hardware.h_gr[((UINT) 3)] = opval;
d10384 1
a10392 1
    current_cpu->hardware.h_gr[((UINT) 4)] = opval;
d10395 1
a10403 1
    current_cpu->hardware.h_gr[((UINT) 5)] = opval;
d10406 1
a10414 1
    current_cpu->hardware.h_gr[((UINT) 6)] = opval;
d10417 1
a10425 1
    current_cpu->hardware.h_gr[((UINT) 7)] = opval;
d10428 1
a10436 1
    current_cpu->hardware.h_gr[((UINT) 8)] = opval;
d10439 1
a10447 1
    current_cpu->hardware.h_gr[((UINT) 9)] = opval;
d10450 1
a10458 1
    current_cpu->hardware.h_gr[((UINT) 10)] = opval;
d10461 1
a10469 1
    current_cpu->hardware.h_gr[((UINT) 11)] = opval;
d10472 1
a10480 1
    current_cpu->hardware.h_gr[((UINT) 12)] = opval;
d10483 1
a10491 1
    current_cpu->hardware.h_gr[((UINT) 13)] = opval;
d10494 1
a10502 1
    current_cpu->hardware.h_gr[((UINT) 14)] = opval;
d10505 1
a10513 1
    current_cpu->branch (opval, npc, status);
d10516 1
a10545 1
    current_cpu->hardware.h_gr[((UINT) 0)] = opval;
d10548 1
a10556 1
    current_cpu->hardware.h_gr[((UINT) 1)] = opval;
d10559 1
a10567 1
    current_cpu->hardware.h_gr[((UINT) 2)] = opval;
d10570 1
a10578 1
    current_cpu->hardware.h_gr[((UINT) 3)] = opval;
d10581 1
a10589 1
    current_cpu->hardware.h_gr[((UINT) 4)] = opval;
d10592 1
a10600 1
    current_cpu->hardware.h_gr[((UINT) 5)] = opval;
d10603 1
a10611 1
    current_cpu->hardware.h_gr[((UINT) 6)] = opval;
d10614 1
a10622 1
    current_cpu->hardware.h_gr[((UINT) 7)] = opval;
d10625 1
a10634 1
    current_cpu->hardware.h_gr[((UINT) 8)] = opval;
d10637 1
a10641 1
    current_cpu->hardware.h_gr_usr[SUBSI (8, 8)] = opval;
d10644 1
a10654 1
    current_cpu->hardware.h_gr[((UINT) 9)] = opval;
d10657 1
a10661 1
    current_cpu->hardware.h_gr_usr[SUBSI (9, 8)] = opval;
d10664 1
a10674 1
    current_cpu->hardware.h_gr[((UINT) 10)] = opval;
d10677 1
a10681 1
    current_cpu->hardware.h_gr_usr[SUBSI (10, 8)] = opval;
d10684 1
a10694 1
    current_cpu->hardware.h_gr[((UINT) 11)] = opval;
d10697 1
a10701 1
    current_cpu->hardware.h_gr_usr[SUBSI (11, 8)] = opval;
d10704 1
a10714 1
    current_cpu->hardware.h_gr[((UINT) 12)] = opval;
d10717 1
a10721 1
    current_cpu->hardware.h_gr_usr[SUBSI (12, 8)] = opval;
d10724 1
a10734 1
    current_cpu->hardware.h_gr[((UINT) 13)] = opval;
d10737 1
a10741 1
    current_cpu->hardware.h_gr_usr[SUBSI (13, 8)] = opval;
d10744 1
a10754 1
    current_cpu->hardware.h_gr[((UINT) 14)] = opval;
d10757 1
a10761 1
    current_cpu->hardware.h_gr_usr[SUBSI (14, 8)] = opval;
d10764 1
a10773 1
    current_cpu->branch (opval, npc, status);
d10776 1
a10780 1
    current_cpu->h_cpsr_set (opval);
d10783 1
a10811 1
    current_cpu->hardware.h_gr[((UINT) 0)] = opval;
d10814 1
a10822 1
    current_cpu->hardware.h_gr[((UINT) 1)] = opval;
d10825 1
a10833 1
    current_cpu->hardware.h_gr[((UINT) 2)] = opval;
d10836 1
a10844 1
    current_cpu->hardware.h_gr[((UINT) 3)] = opval;
d10847 1
a10855 1
    current_cpu->hardware.h_gr[((UINT) 4)] = opval;
d10858 1
a10866 1
    current_cpu->hardware.h_gr[((UINT) 5)] = opval;
d10869 1
a10877 1
    current_cpu->hardware.h_gr[((UINT) 6)] = opval;
d10880 1
a10888 1
    current_cpu->hardware.h_gr[((UINT) 7)] = opval;
d10891 1
a10899 1
    current_cpu->hardware.h_gr[((UINT) 8)] = opval;
d10902 1
a10910 1
    current_cpu->hardware.h_gr[((UINT) 9)] = opval;
d10913 1
a10921 1
    current_cpu->hardware.h_gr[((UINT) 10)] = opval;
d10924 1
a10932 1
    current_cpu->hardware.h_gr[((UINT) 11)] = opval;
d10935 1
a10943 1
    current_cpu->hardware.h_gr[((UINT) 12)] = opval;
d10946 1
a10954 1
    current_cpu->hardware.h_gr[((UINT) 13)] = opval;
d10957 1
a10965 1
    current_cpu->hardware.h_gr[((UINT) 14)] = opval;
d10968 1
a10976 1
    current_cpu->branch (opval, npc, status);
d10979 1
a10985 1
    * FLD (i_rn) = opval;
d10988 1
a11014 1
    current_cpu->hardware.h_gr[((UINT) 0)] = opval;
d11017 1
a11025 1
    current_cpu->hardware.h_gr[((UINT) 1)] = opval;
d11028 1
a11036 1
    current_cpu->hardware.h_gr[((UINT) 2)] = opval;
d11039 1
a11047 1
    current_cpu->hardware.h_gr[((UINT) 3)] = opval;
d11050 1
a11058 1
    current_cpu->hardware.h_gr[((UINT) 4)] = opval;
d11061 1
a11069 1
    current_cpu->hardware.h_gr[((UINT) 5)] = opval;
d11072 1
a11080 1
    current_cpu->hardware.h_gr[((UINT) 6)] = opval;
d11083 1
a11091 1
    current_cpu->hardware.h_gr[((UINT) 7)] = opval;
d11094 1
a11103 1
    current_cpu->hardware.h_gr[((UINT) 8)] = opval;
d11106 1
a11110 1
    current_cpu->hardware.h_gr_usr[SUBSI (8, 8)] = opval;
d11113 1
a11123 1
    current_cpu->hardware.h_gr[((UINT) 9)] = opval;
d11126 1
a11130 1
    current_cpu->hardware.h_gr_usr[SUBSI (9, 8)] = opval;
d11133 1
a11143 1
    current_cpu->hardware.h_gr[((UINT) 10)] = opval;
d11146 1
a11150 1
    current_cpu->hardware.h_gr_usr[SUBSI (10, 8)] = opval;
d11153 1
a11163 1
    current_cpu->hardware.h_gr[((UINT) 11)] = opval;
d11166 1
a11170 1
    current_cpu->hardware.h_gr_usr[SUBSI (11, 8)] = opval;
d11173 1
a11183 1
    current_cpu->hardware.h_gr[((UINT) 12)] = opval;
d11186 1
a11190 1
    current_cpu->hardware.h_gr_usr[SUBSI (12, 8)] = opval;
d11193 1
a11203 1
    current_cpu->hardware.h_gr[((UINT) 13)] = opval;
d11206 1
a11210 1
    current_cpu->hardware.h_gr_usr[SUBSI (13, 8)] = opval;
d11213 1
a11223 1
    current_cpu->hardware.h_gr[((UINT) 14)] = opval;
d11226 1
a11230 1
    current_cpu->hardware.h_gr_usr[SUBSI (14, 8)] = opval;
d11233 1
a11242 1
    current_cpu->branch (opval, npc, status);
d11245 1
a11249 1
    current_cpu->h_cpsr_set (opval);
d11252 1
a11257 1
    * FLD (i_rn) = opval;
d11260 1
a11287 1
    current_cpu->branch (opval, npc, status);
d11290 1
a11298 1
    current_cpu->hardware.h_gr[((UINT) 14)] = opval;
d11301 1
a11309 1
    current_cpu->hardware.h_gr[((UINT) 13)] = opval;
d11312 1
a11320 1
    current_cpu->hardware.h_gr[((UINT) 12)] = opval;
d11323 1
a11331 1
    current_cpu->hardware.h_gr[((UINT) 11)] = opval;
d11334 1
a11342 1
    current_cpu->hardware.h_gr[((UINT) 10)] = opval;
d11345 1
a11353 1
    current_cpu->hardware.h_gr[((UINT) 9)] = opval;
d11356 1
a11364 1
    current_cpu->hardware.h_gr[((UINT) 8)] = opval;
d11367 1
a11375 1
    current_cpu->hardware.h_gr[((UINT) 7)] = opval;
d11378 1
a11386 1
    current_cpu->hardware.h_gr[((UINT) 6)] = opval;
d11389 1
a11397 1
    current_cpu->hardware.h_gr[((UINT) 5)] = opval;
d11400 1
a11408 1
    current_cpu->hardware.h_gr[((UINT) 4)] = opval;
d11411 1
a11419 1
    current_cpu->hardware.h_gr[((UINT) 3)] = opval;
d11422 1
a11430 1
    current_cpu->hardware.h_gr[((UINT) 2)] = opval;
d11433 1
a11441 1
    current_cpu->hardware.h_gr[((UINT) 1)] = opval;
d11444 1
a11452 1
    current_cpu->hardware.h_gr[((UINT) 0)] = opval;
d11455 1
a11484 1
    current_cpu->branch (opval, npc, status);
d11487 1
a11490 1
    current_cpu->h_cpsr_set (opval);
d11493 1
a11502 1
    current_cpu->hardware.h_gr[((UINT) 14)] = opval;
d11505 1
a11509 1
    current_cpu->hardware.h_gr_usr[SUBSI (14, 8)] = opval;
d11512 1
a11522 1
    current_cpu->hardware.h_gr[((UINT) 13)] = opval;
d11525 1
a11529 1
    current_cpu->hardware.h_gr_usr[SUBSI (13, 8)] = opval;
d11532 1
a11542 1
    current_cpu->hardware.h_gr[((UINT) 12)] = opval;
d11545 1
a11549 1
    current_cpu->hardware.h_gr_usr[SUBSI (12, 8)] = opval;
d11552 1
a11562 1
    current_cpu->hardware.h_gr[((UINT) 11)] = opval;
d11565 1
a11569 1
    current_cpu->hardware.h_gr_usr[SUBSI (11, 8)] = opval;
d11572 1
a11582 1
    current_cpu->hardware.h_gr[((UINT) 10)] = opval;
d11585 1
a11589 1
    current_cpu->hardware.h_gr_usr[SUBSI (10, 8)] = opval;
d11592 1
a11602 1
    current_cpu->hardware.h_gr[((UINT) 9)] = opval;
d11605 1
a11609 1
    current_cpu->hardware.h_gr_usr[SUBSI (9, 8)] = opval;
d11612 1
a11622 1
    current_cpu->hardware.h_gr[((UINT) 8)] = opval;
d11625 1
a11629 1
    current_cpu->hardware.h_gr_usr[SUBSI (8, 8)] = opval;
d11632 1
a11641 1
    current_cpu->hardware.h_gr[((UINT) 7)] = opval;
d11644 1
a11652 1
    current_cpu->hardware.h_gr[((UINT) 6)] = opval;
d11655 1
a11663 1
    current_cpu->hardware.h_gr[((UINT) 5)] = opval;
d11666 1
a11674 1
    current_cpu->hardware.h_gr[((UINT) 4)] = opval;
d11677 1
a11685 1
    current_cpu->hardware.h_gr[((UINT) 3)] = opval;
d11688 1
a11696 1
    current_cpu->hardware.h_gr[((UINT) 2)] = opval;
d11699 1
a11707 1
    current_cpu->hardware.h_gr[((UINT) 1)] = opval;
d11710 1
a11718 1
    current_cpu->hardware.h_gr[((UINT) 0)] = opval;
d11721 1
a11750 1
    current_cpu->branch (opval, npc, status);
d11753 1
a11761 1
    current_cpu->hardware.h_gr[((UINT) 14)] = opval;
d11764 1
a11772 1
    current_cpu->hardware.h_gr[((UINT) 13)] = opval;
d11775 1
a11783 1
    current_cpu->hardware.h_gr[((UINT) 12)] = opval;
d11786 1
a11794 1
    current_cpu->hardware.h_gr[((UINT) 11)] = opval;
d11797 1
a11805 1
    current_cpu->hardware.h_gr[((UINT) 10)] = opval;
d11808 1
a11816 1
    current_cpu->hardware.h_gr[((UINT) 9)] = opval;
d11819 1
a11827 1
    current_cpu->hardware.h_gr[((UINT) 8)] = opval;
d11830 1
a11838 1
    current_cpu->hardware.h_gr[((UINT) 7)] = opval;
d11841 1
a11849 1
    current_cpu->hardware.h_gr[((UINT) 6)] = opval;
d11852 1
a11860 1
    current_cpu->hardware.h_gr[((UINT) 5)] = opval;
d11863 1
a11871 1
    current_cpu->hardware.h_gr[((UINT) 4)] = opval;
d11874 1
a11882 1
    current_cpu->hardware.h_gr[((UINT) 3)] = opval;
d11885 1
a11893 1
    current_cpu->hardware.h_gr[((UINT) 2)] = opval;
d11896 1
a11904 1
    current_cpu->hardware.h_gr[((UINT) 1)] = opval;
d11907 1
a11915 1
    current_cpu->hardware.h_gr[((UINT) 0)] = opval;
d11918 1
a11923 1
    * FLD (i_rn) = opval;
d11926 1
a11953 1
    current_cpu->branch (opval, npc, status);
d11956 1
a11959 1
    current_cpu->h_cpsr_set (opval);
d11962 1
a11971 1
    current_cpu->hardware.h_gr[((UINT) 14)] = opval;
d11974 1
a11978 1
    current_cpu->hardware.h_gr_usr[SUBSI (14, 8)] = opval;
d11981 1
a11991 1
    current_cpu->hardware.h_gr[((UINT) 13)] = opval;
d11994 1
a11998 1
    current_cpu->hardware.h_gr_usr[SUBSI (13, 8)] = opval;
d12001 1
a12011 1
    current_cpu->hardware.h_gr[((UINT) 12)] = opval;
d12014 1
a12018 1
    current_cpu->hardware.h_gr_usr[SUBSI (12, 8)] = opval;
d12021 1
a12031 1
    current_cpu->hardware.h_gr[((UINT) 11)] = opval;
d12034 1
a12038 1
    current_cpu->hardware.h_gr_usr[SUBSI (11, 8)] = opval;
d12041 1
a12051 1
    current_cpu->hardware.h_gr[((UINT) 10)] = opval;
d12054 1
a12058 1
    current_cpu->hardware.h_gr_usr[SUBSI (10, 8)] = opval;
d12061 1
a12071 1
    current_cpu->hardware.h_gr[((UINT) 9)] = opval;
d12074 1
a12078 1
    current_cpu->hardware.h_gr_usr[SUBSI (9, 8)] = opval;
d12081 1
a12091 1
    current_cpu->hardware.h_gr[((UINT) 8)] = opval;
d12094 1
a12098 1
    current_cpu->hardware.h_gr_usr[SUBSI (8, 8)] = opval;
d12101 1
a12110 1
    current_cpu->hardware.h_gr[((UINT) 7)] = opval;
d12113 1
a12121 1
    current_cpu->hardware.h_gr[((UINT) 6)] = opval;
d12124 1
a12132 1
    current_cpu->hardware.h_gr[((UINT) 5)] = opval;
d12135 1
a12143 1
    current_cpu->hardware.h_gr[((UINT) 4)] = opval;
d12146 1
a12154 1
    current_cpu->hardware.h_gr[((UINT) 3)] = opval;
d12157 1
a12165 1
    current_cpu->hardware.h_gr[((UINT) 2)] = opval;
d12168 1
a12176 1
    current_cpu->hardware.h_gr[((UINT) 1)] = opval;
d12179 1
a12187 1
    current_cpu->hardware.h_gr[((UINT) 0)] = opval;
d12190 1
a12195 1
    * FLD (i_rn) = opval;
d12198 1
a12225 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d12228 1
a12236 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d12239 1
a12247 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d12250 1
a12258 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d12261 1
a12269 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d12272 1
a12280 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d12283 1
a12291 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d12294 1
a12302 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d12305 1
a12313 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d12316 1
a12324 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d12327 1
a12335 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d12338 1
a12346 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d12349 1
a12357 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d12360 1
a12368 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d12371 1
a12379 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d12382 1
a12390 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d12393 1
a12422 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d12425 1
a12434 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d12437 1
a12441 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d12444 1
a12454 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d12457 1
a12461 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d12464 1
a12474 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d12477 1
a12481 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d12484 1
a12494 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d12497 1
a12501 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d12504 1
a12514 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d12517 1
a12521 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d12524 1
a12534 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d12537 1
a12541 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d12544 1
a12554 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d12557 1
a12561 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d12564 1
a12573 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d12576 1
a12584 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d12587 1
a12595 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d12598 1
a12606 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d12609 1
a12617 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d12620 1
a12628 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d12631 1
a12639 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d12642 1
a12650 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d12653 1
a12682 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d12685 1
a12693 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d12696 1
a12704 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d12707 1
a12715 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d12718 1
a12726 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d12729 1
a12737 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d12740 1
a12748 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d12751 1
a12759 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d12762 1
a12770 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d12773 1
a12781 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d12784 1
a12792 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d12795 1
a12803 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d12806 1
a12814 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d12817 1
a12825 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d12828 1
a12836 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d12839 1
a12847 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d12850 1
a12855 1
    * FLD (i_rn) = opval;
d12858 1
a12885 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d12888 1
a12897 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d12900 1
a12904 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d12907 1
a12917 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d12920 1
a12924 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d12927 1
a12937 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d12940 1
a12944 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d12947 1
a12957 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d12960 1
a12964 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d12967 1
a12977 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d12980 1
a12984 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d12987 1
a12997 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d13000 1
a13004 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d13007 1
a13017 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d13020 1
a13024 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d13027 1
a13036 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d13039 1
a13047 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d13050 1
a13058 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d13061 1
a13069 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d13072 1
a13080 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d13083 1
a13091 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d13094 1
a13102 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d13105 1
a13113 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d13116 1
a13121 1
    * FLD (i_rn) = opval;
d13124 1
a13151 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d13154 1
a13162 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d13165 1
a13173 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d13176 1
a13184 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d13187 1
a13195 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d13198 1
a13206 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d13209 1
a13217 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d13220 1
a13228 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d13231 1
a13239 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d13242 1
a13250 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d13253 1
a13261 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d13264 1
a13272 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d13275 1
a13283 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d13286 1
a13294 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d13297 1
a13305 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d13308 1
a13316 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d13319 1
a13348 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d13351 1
a13359 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d13362 1
a13370 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d13373 1
a13381 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d13384 1
a13392 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d13395 1
a13403 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d13406 1
a13414 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d13417 1
a13425 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d13428 1
a13437 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d13440 1
a13444 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d13447 1
a13457 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d13460 1
a13464 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d13467 1
a13477 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d13480 1
a13484 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d13487 1
a13497 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d13500 1
a13504 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d13507 1
a13517 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d13520 1
a13524 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d13527 1
a13537 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d13540 1
a13544 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d13547 1
a13557 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d13560 1
a13564 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d13567 1
a13576 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d13579 1
a13608 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d13611 1
a13619 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d13622 1
a13630 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d13633 1
a13641 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d13644 1
a13652 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d13655 1
a13663 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d13666 1
a13674 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d13677 1
a13685 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d13688 1
a13696 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d13699 1
a13707 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d13710 1
a13718 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d13721 1
a13729 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d13732 1
a13740 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d13743 1
a13751 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d13754 1
a13762 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d13765 1
a13773 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d13776 1
a13781 1
    * FLD (i_rn) = opval;
d13784 1
a13811 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d13814 1
a13822 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d13825 1
a13833 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d13836 1
a13844 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d13847 1
a13855 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d13858 1
a13866 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d13869 1
a13877 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d13880 1
a13888 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d13891 1
a13900 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d13903 1
a13907 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d13910 1
a13920 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d13923 1
a13927 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d13930 1
a13940 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d13943 1
a13947 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d13950 1
a13960 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d13963 1
a13967 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d13970 1
a13980 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d13983 1
a13987 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d13990 1
a14000 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d14003 1
a14007 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d14010 1
a14020 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d14023 1
a14027 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d14030 1
a14039 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d14042 1
a14047 1
    * FLD (i_rn) = opval;
d14050 1
a14076 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d14079 1
a14087 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d14090 1
a14098 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d14101 1
a14109 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d14112 1
a14120 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d14123 1
a14131 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d14134 1
a14142 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d14145 1
a14153 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d14156 1
a14164 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d14167 1
a14175 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d14178 1
a14186 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d14189 1
a14197 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d14200 1
a14208 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d14211 1
a14219 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d14222 1
a14230 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d14233 1
a14241 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d14244 1
a14273 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d14276 1
a14284 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d14287 1
a14295 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d14298 1
a14306 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d14309 1
a14317 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d14320 1
a14328 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d14331 1
a14339 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d14342 1
a14350 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d14353 1
a14362 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d14365 1
a14369 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d14372 1
a14382 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d14385 1
a14389 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d14392 1
a14402 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d14405 1
a14409 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d14412 1
a14422 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d14425 1
a14429 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d14432 1
a14442 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d14445 1
a14449 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d14452 1
a14462 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d14465 1
a14469 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d14472 1
a14482 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d14485 1
a14489 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d14492 1
a14501 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d14504 1
a14533 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d14536 1
a14544 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d14547 1
a14555 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d14558 1
a14566 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d14569 1
a14577 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d14580 1
a14588 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d14591 1
a14599 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d14602 1
a14610 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d14613 1
a14621 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d14624 1
a14632 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d14635 1
a14643 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d14646 1
a14654 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d14657 1
a14665 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d14668 1
a14676 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d14679 1
a14687 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d14690 1
a14698 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d14701 1
a14707 1
    * FLD (i_rn) = opval;
d14710 1
a14736 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d14739 1
a14747 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d14750 1
a14758 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d14761 1
a14769 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d14772 1
a14780 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d14783 1
a14791 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d14794 1
a14802 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d14805 1
a14813 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d14816 1
a14825 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d14828 1
a14832 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d14835 1
a14845 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d14848 1
a14852 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d14855 1
a14865 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d14868 1
a14872 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d14875 1
a14885 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d14888 1
a14892 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d14895 1
a14905 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d14908 1
a14912 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d14915 1
a14925 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d14928 1
a14932 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d14935 1
a14945 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d14948 1
a14952 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d14955 1
a14964 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d14967 1
a14973 1
    * FLD (i_rn) = opval;
d14976 1
a15002 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d15005 1
a15013 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d15016 1
a15024 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d15027 1
a15035 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d15038 1
a15046 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d15049 1
a15057 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d15060 1
a15068 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d15071 1
a15079 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d15082 1
a15090 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d15093 1
a15101 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d15104 1
a15112 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d15115 1
a15123 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d15126 1
a15134 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d15137 1
a15145 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d15148 1
a15156 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d15159 1
a15167 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d15170 1
a15199 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d15202 1
a15211 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d15214 1
a15218 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d15221 1
a15231 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d15234 1
a15238 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d15241 1
a15251 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d15254 1
a15258 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d15261 1
a15271 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d15274 1
a15278 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d15281 1
a15291 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d15294 1
a15298 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d15301 1
a15311 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d15314 1
a15318 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d15321 1
a15331 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d15334 1
a15338 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d15341 1
a15350 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d15353 1
a15361 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d15364 1
a15372 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d15375 1
a15383 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d15386 1
a15394 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d15397 1
a15405 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d15408 1
a15416 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d15419 1
a15427 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d15430 1
a15459 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d15462 1
a15470 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d15473 1
a15481 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d15484 1
a15492 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d15495 1
a15503 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d15506 1
a15514 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d15517 1
a15525 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d15528 1
a15536 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d15539 1
a15547 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d15550 1
a15558 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d15561 1
a15569 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d15572 1
a15580 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d15583 1
a15591 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d15594 1
a15602 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d15605 1
a15613 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d15616 1
a15624 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d15627 1
a15633 1
    * FLD (i_rn) = opval;
d15636 1
a15662 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d15665 1
a15674 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d15677 1
a15681 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d15684 1
a15694 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d15697 1
a15701 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d15704 1
a15714 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d15717 1
a15721 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d15724 1
a15734 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d15737 1
a15741 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d15744 1
a15754 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d15757 1
a15761 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d15764 1
a15774 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d15777 1
a15781 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d15784 1
a15794 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d15797 1
a15801 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d15804 1
a15813 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d15816 1
a15824 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d15827 1
a15835 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d15838 1
a15846 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d15849 1
a15857 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d15860 1
a15868 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d15871 1
a15879 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d15882 1
a15890 1
    current_cpu->SETMEMSI (pc, tmp_addr, opval);
d15893 1
a15899 1
    * FLD (i_rn) = opval;
d15902 1
a15923 1
    * FLD (i_rd) = opval;
d15926 1
a15946 1
    * FLD (i_rd) = opval;
d15949 1
a15969 1
    current_cpu->h_cpsr_set (opval);
d15972 1
a15992 1
    current_cpu->h_spsr_set (opval);
d15995 1
@


1.6
log
@2002-09-07  Frank Ch. Eigler  <fche@@redhat.com>

        * arm-*, thumb-*: Regenerated files with Robert Cragie's new
        cgen instructions.
	* arm-defs.h: Removed.
	* arm7.h: Don't include arm-defs.h.
	* Makefile.am: Stop arm-defs.h generation.
	* Makefile.in: Regenerated.
@
text
@d5 1
a5 1
Copyright (C) 2000, 2001, 2002 Red Hat, Inc.
d13 3
a18 1
using namespace arm; // FIXME: namespace organization still wip
@


1.5
log
@* arm7t missing instructions

[cgen]
2002-09-07  Frank Ch. Eigler  <fche@@redhat.com>

	From Robert Cragie <rcc@@jennic.com>:
	* cpu/arm7.cpu (ldm*-sw*, stm*-sw*): New instructions.

[sid]
2002-09-07  Frank Ch. Eigler  <fche@@redhat.com>

	* arm-*, thumb-*: Regenerated files with Robert Cragie's new
	cgen instructions.
@
text
@d16 1
@


1.4
log
@* branch probability hinting

[cgen/ChangeLog]
2001-03-01  Frank Ch. Eigler  <fche@@redhat.com>

	* sid.cpu (-op-gen-set-trace[-parallel], -create-virtual-insns!):
	Emit LIKELY/UNLIKELY branch probability hints.
	* sid-decode.cpu (-gen-record-args): Ditto.

[sid/include/ChangeLog]
2001-03-01  Frank Ch. Eigler  <fche@@redhat.com>

	* sidconfig.h (LIKELY, UNLIKELY): New conditional cover macros
	for gcc's __builtin_expect branch probability hinting function.
	* sidbusutil.h (passthrough_bus, mux_password_bus, harvard_bus):
	Add some branch probability hints.
	* sidcpuutil.h (step_pin_handler, stop_after_insns_p,
	{read,write}_{insn,data}_memory): Ditto.
	* sidpinutil.h (callback_pin::driven): Remove unnecessary assert
	from critical path.

[eg. sid/component/mapper/ChangeLog]
2001-03-01  Frank Ch. Eigler  <fche@@redhat.com>

	* compMapper.cxx ({read,write}_strideoffset_any): Added b.p. hints.
	(write_any, read_any, locate): Ditto.

[sid/component/cgen-cpu/ChangeLog]
2001-03-01  Frank Ch. Eigler  <fche@@redhat.com>

	* cgen-engine.h (set_pbb_engine, chain, get_next_vpc, pbb_find,
	pbb_find_or_alloc, pbb_before, pbb_after): Add branch probability
	hints.

[eg. sid/component/cgen-cpu/arm7t/ChangeLog]
2001-03-01  Frank Ch. Eigler  <fche@@redhat.com>

	* arm-decode.cxx, -sem.cxx, -semsw.cxx: Regenerated w/ b.p. hints.
	* thumb-decode.cxx, -sem.cxx, -semsw.cxx: Ditto.
@
text
@d5 1
a5 1
Copyright (C) 2000 Red Hat, Inc.
d7 1
a7 1
This file is part of the Cygnus Simulators.
d8650 1
a8650 1
// ********** ldmda-wb: FIXME
d8653 1
a8653 1
arm_sem_ldmda_wb (arm7f_cpu* current_cpu, arm_scache* sem)
d8673 6
d8683 1
d8690 8
d8703 1
d8710 8
d8723 1
d8730 8
d8743 1
d8750 8
d8763 1
d8770 8
d8783 1
d8790 8
d8803 1
d8810 8
a8908 6
  {
    SI opval = tmp_addr;
    * FLD (i_rn) = opval;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
  }
d8916 1
a8916 1
// ********** ldmib: FIXME
d8919 1
a8919 1
arm_sem_ldmib (arm7f_cpu* current_cpu, arm_scache* sem)
d8930 12
a8941 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 0))) {
a8942 1
  tmp_addr = ADDSI (tmp_addr, 4);
d8945 1
a8945 1
    current_cpu->hardware.h_gr[((UINT) 0)] = opval;
d8947 1
a8947 1
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 0) << ']' << ":=0x" << hex << opval << dec << "  ";
d8949 1
d8952 1
a8952 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 1))) {
a8953 1
  tmp_addr = ADDSI (tmp_addr, 4);
d8956 1
a8956 1
    current_cpu->hardware.h_gr[((UINT) 1)] = opval;
d8958 1
a8958 1
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 1) << ']' << ":=0x" << hex << opval << dec << "  ";
d8960 1
d8963 1
a8963 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 2))) {
a8964 1
  tmp_addr = ADDSI (tmp_addr, 4);
d8967 1
a8967 1
    current_cpu->hardware.h_gr[((UINT) 2)] = opval;
d8969 1
a8969 1
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 2) << ']' << ":=0x" << hex << opval << dec << "  ";
d8971 1
d8974 1
a8974 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 3))) {
a8975 1
  tmp_addr = ADDSI (tmp_addr, 4);
d8978 1
a8978 1
    current_cpu->hardware.h_gr[((UINT) 3)] = opval;
d8980 1
a8980 1
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 3) << ']' << ":=0x" << hex << opval << dec << "  ";
d8982 1
d8985 1
a8985 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 4))) {
a8986 1
  tmp_addr = ADDSI (tmp_addr, 4);
d8989 1
a8989 1
    current_cpu->hardware.h_gr[((UINT) 4)] = opval;
d8991 1
a8991 1
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 4) << ']' << ":=0x" << hex << opval << dec << "  ";
d8993 1
d8996 1
a8996 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 5))) {
a8997 1
  tmp_addr = ADDSI (tmp_addr, 4);
d9000 1
a9000 1
    current_cpu->hardware.h_gr[((UINT) 5)] = opval;
d9002 1
a9002 1
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 5) << ']' << ":=0x" << hex << opval << dec << "  ";
d9004 1
d9007 1
a9007 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 6))) {
a9008 1
  tmp_addr = ADDSI (tmp_addr, 4);
d9011 1
a9011 1
    current_cpu->hardware.h_gr[((UINT) 6)] = opval;
d9013 1
a9013 1
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 6) << ']' << ":=0x" << hex << opval << dec << "  ";
d9015 1
a9019 1
  tmp_addr = ADDSI (tmp_addr, 4);
d9026 1
d9029 1
a9029 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 8))) {
a9030 1
  tmp_addr = ADDSI (tmp_addr, 4);
d9033 1
a9033 1
    current_cpu->hardware.h_gr[((UINT) 8)] = opval;
d9035 1
a9035 1
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 8) << ']' << ":=0x" << hex << opval << dec << "  ";
d9037 1
d9040 1
a9040 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 9))) {
a9041 1
  tmp_addr = ADDSI (tmp_addr, 4);
d9044 1
a9044 1
    current_cpu->hardware.h_gr[((UINT) 9)] = opval;
d9046 1
a9046 1
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 9) << ']' << ":=0x" << hex << opval << dec << "  ";
d9048 1
d9051 1
a9051 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 10))) {
a9052 1
  tmp_addr = ADDSI (tmp_addr, 4);
d9055 1
a9055 1
    current_cpu->hardware.h_gr[((UINT) 10)] = opval;
d9057 1
a9057 1
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 10) << ']' << ":=0x" << hex << opval << dec << "  ";
d9059 1
d9062 1
a9062 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 11))) {
a9063 1
  tmp_addr = ADDSI (tmp_addr, 4);
d9066 1
a9066 1
    current_cpu->hardware.h_gr[((UINT) 11)] = opval;
d9068 1
a9068 1
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 11) << ']' << ":=0x" << hex << opval << dec << "  ";
d9070 1
d9073 1
a9073 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 12))) {
a9074 1
  tmp_addr = ADDSI (tmp_addr, 4);
d9077 1
a9077 1
    current_cpu->hardware.h_gr[((UINT) 12)] = opval;
d9079 1
a9079 1
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 12) << ']' << ":=0x" << hex << opval << dec << "  ";
d9081 1
d9084 1
a9084 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 13))) {
a9085 1
  tmp_addr = ADDSI (tmp_addr, 4);
d9088 1
a9088 1
    current_cpu->hardware.h_gr[((UINT) 13)] = opval;
d9090 1
a9090 1
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 13) << ']' << ":=0x" << hex << opval << dec << "  ";
d9092 1
d9095 1
a9095 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 14))) {
a9096 1
  tmp_addr = ADDSI (tmp_addr, 4);
d9099 1
a9099 1
    current_cpu->hardware.h_gr[((UINT) 14)] = opval;
d9101 1
a9101 1
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 14) << ']' << ":=0x" << hex << opval << dec << "  ";
d9103 1
a9105 3
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
d9107 2
a9108 2
    USI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    current_cpu->branch (opval, npc, status);
d9110 1
a9110 1
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
a9112 2
}
}
d9119 1
a9119 1
// ********** ldmib-wb: FIXME
d9122 1
a9122 1
arm_sem_ldmib_wb (arm7f_cpu* current_cpu, arm_scache* sem)
d9133 1
a9133 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 0))) {
a9134 1
  tmp_addr = ADDSI (tmp_addr, 4);
d9136 9
a9144 2
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    current_cpu->hardware.h_gr[((UINT) 0)] = opval;
d9146 1
a9146 1
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 0) << ']' << ":=0x" << hex << opval << dec << "  ";
d9150 1
a9150 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 1))) {
d9152 1
a9152 1
  tmp_addr = ADDSI (tmp_addr, 4);
d9155 1
a9155 1
    current_cpu->hardware.h_gr[((UINT) 1)] = opval;
d9157 1
a9157 1
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 1) << ']' << ":=0x" << hex << opval << dec << "  ";
d9159 1
a9159 5
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 2))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
d9162 1
a9162 1
    current_cpu->hardware.h_gr[((UINT) 2)] = opval;
d9164 1
a9164 1
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 2) << ']' << ":=0x" << hex << opval << dec << "  ";
d9167 2
d9170 1
a9170 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 3))) {
d9172 1
a9172 1
  tmp_addr = ADDSI (tmp_addr, 4);
d9175 1
a9175 1
    current_cpu->hardware.h_gr[((UINT) 3)] = opval;
d9177 1
a9177 1
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 3) << ']' << ":=0x" << hex << opval << dec << "  ";
d9179 1
a9179 5
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 4))) {
{
  tmp_addr = ADDSI (tmp_addr, 4);
d9182 1
a9182 1
    current_cpu->hardware.h_gr[((UINT) 4)] = opval;
d9184 1
a9184 1
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 4) << ']' << ":=0x" << hex << opval << dec << "  ";
d9187 1
d9189 22
a9210 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 5))) {
d9212 8
a9219 1
  tmp_addr = ADDSI (tmp_addr, 4);
d9222 1
a9222 1
    current_cpu->hardware.h_gr[((UINT) 5)] = opval;
d9224 1
a9224 1
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 5) << ']' << ":=0x" << hex << opval << dec << "  ";
d9227 2
d9230 1
a9230 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 6))) {
d9232 8
a9239 1
  tmp_addr = ADDSI (tmp_addr, 4);
d9242 1
a9242 1
    current_cpu->hardware.h_gr[((UINT) 6)] = opval;
d9244 1
a9244 1
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 6) << ']' << ":=0x" << hex << opval << dec << "  ";
d9247 2
d9250 1
a9250 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 7))) {
d9252 8
a9259 1
  tmp_addr = ADDSI (tmp_addr, 4);
d9262 1
a9262 1
    current_cpu->hardware.h_gr[((UINT) 7)] = opval;
d9264 1
a9264 1
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 7) << ']' << ":=0x" << hex << opval << dec << "  ";
d9267 2
d9272 1
a9272 1
  tmp_addr = ADDSI (tmp_addr, 4);
d9279 20
d9301 1
a9301 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 9))) {
a9302 1
  tmp_addr = ADDSI (tmp_addr, 4);
d9305 1
a9305 1
    current_cpu->hardware.h_gr[((UINT) 9)] = opval;
d9307 1
a9307 1
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 9) << ']' << ":=0x" << hex << opval << dec << "  ";
d9309 1
d9312 1
a9312 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 10))) {
a9313 1
  tmp_addr = ADDSI (tmp_addr, 4);
d9316 1
a9316 1
    current_cpu->hardware.h_gr[((UINT) 10)] = opval;
d9318 1
a9318 1
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 10) << ']' << ":=0x" << hex << opval << dec << "  ";
d9320 1
d9323 1
a9323 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 11))) {
a9324 1
  tmp_addr = ADDSI (tmp_addr, 4);
d9327 1
a9327 1
    current_cpu->hardware.h_gr[((UINT) 11)] = opval;
d9329 1
a9329 1
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 11) << ']' << ":=0x" << hex << opval << dec << "  ";
d9331 1
d9334 1
a9334 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 12))) {
a9335 1
  tmp_addr = ADDSI (tmp_addr, 4);
d9338 1
a9338 1
    current_cpu->hardware.h_gr[((UINT) 12)] = opval;
d9340 1
a9340 1
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 12) << ']' << ":=0x" << hex << opval << dec << "  ";
d9342 1
d9345 1
a9345 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 13))) {
a9346 1
  tmp_addr = ADDSI (tmp_addr, 4);
d9349 1
a9349 1
    current_cpu->hardware.h_gr[((UINT) 13)] = opval;
d9351 1
a9351 1
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 13) << ']' << ":=0x" << hex << opval << dec << "  ";
d9353 1
d9356 1
a9356 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 14))) {
a9357 1
  tmp_addr = ADDSI (tmp_addr, 4);
d9360 1
a9360 1
    current_cpu->hardware.h_gr[((UINT) 14)] = opval;
d9362 1
a9362 1
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 14) << ']' << ":=0x" << hex << opval << dec << "  ";
d9364 1
d9367 1
a9367 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
a9368 1
  tmp_addr = ADDSI (tmp_addr, 4);
d9370 2
a9371 2
    USI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    current_cpu->branch (opval, npc, status);
d9373 1
a9373 1
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
d9375 1
d9391 1
a9391 1
// ********** ldmia: FIXME
d9394 1
a9394 1
arm_sem_ldmia (arm7f_cpu* current_cpu, arm_scache* sem)
d9407 1
a9413 1
  tmp_addr = ADDSI (tmp_addr, 4);
d9418 1
a9424 1
  tmp_addr = ADDSI (tmp_addr, 4);
d9429 1
a9435 1
  tmp_addr = ADDSI (tmp_addr, 4);
d9440 1
a9446 1
  tmp_addr = ADDSI (tmp_addr, 4);
d9451 1
a9457 1
  tmp_addr = ADDSI (tmp_addr, 4);
d9462 1
a9468 1
  tmp_addr = ADDSI (tmp_addr, 4);
d9473 1
a9479 1
  tmp_addr = ADDSI (tmp_addr, 4);
d9484 1
a9490 1
  tmp_addr = ADDSI (tmp_addr, 4);
d9495 1
a9501 1
  tmp_addr = ADDSI (tmp_addr, 4);
d9506 1
a9512 1
  tmp_addr = ADDSI (tmp_addr, 4);
d9517 1
a9523 1
  tmp_addr = ADDSI (tmp_addr, 4);
d9528 1
a9534 1
  tmp_addr = ADDSI (tmp_addr, 4);
d9539 1
a9545 1
  tmp_addr = ADDSI (tmp_addr, 4);
d9550 1
a9556 1
  tmp_addr = ADDSI (tmp_addr, 4);
d9561 1
a9567 1
  tmp_addr = ADDSI (tmp_addr, 4);
d9572 1
a9578 1
  tmp_addr = ADDSI (tmp_addr, 4);
d9588 1
a9588 1
// ********** ldmia-wb: FIXME
d9591 1
a9591 1
arm_sem_ldmia_wb (arm7f_cpu* current_cpu, arm_scache* sem)
d9604 1
a9610 1
  tmp_addr = ADDSI (tmp_addr, 4);
d9615 1
a9621 1
  tmp_addr = ADDSI (tmp_addr, 4);
d9626 1
a9632 1
  tmp_addr = ADDSI (tmp_addr, 4);
d9637 1
a9643 1
  tmp_addr = ADDSI (tmp_addr, 4);
d9648 1
a9654 1
  tmp_addr = ADDSI (tmp_addr, 4);
d9659 1
a9665 1
  tmp_addr = ADDSI (tmp_addr, 4);
d9670 1
a9676 1
  tmp_addr = ADDSI (tmp_addr, 4);
d9681 1
a9687 1
  tmp_addr = ADDSI (tmp_addr, 4);
d9692 2
d9700 8
a9707 1
  tmp_addr = ADDSI (tmp_addr, 4);
d9712 2
d9720 8
a9727 1
  tmp_addr = ADDSI (tmp_addr, 4);
d9732 2
d9740 8
a9747 1
  tmp_addr = ADDSI (tmp_addr, 4);
d9752 2
d9760 8
a9767 1
  tmp_addr = ADDSI (tmp_addr, 4);
d9772 2
d9780 8
a9787 1
  tmp_addr = ADDSI (tmp_addr, 4);
d9792 2
d9800 8
a9807 1
  tmp_addr = ADDSI (tmp_addr, 4);
d9812 2
d9820 8
a9827 1
  tmp_addr = ADDSI (tmp_addr, 4);
d9832 1
a9838 3
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
d9840 2
a9841 2
    SI opval = tmp_addr;
    * FLD (i_rn) = opval;
d9843 1
a9843 1
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
d9846 2
d9854 1
a9854 1
// ********** ldmdb: ldm$cond ..
d9857 1
a9857 1
arm_sem_ldmdb (arm7f_cpu* current_cpu, arm_scache* sem)
d9868 1
a9868 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
d9870 1
a9870 1
  tmp_addr = SUBSI (tmp_addr, 4);
d9872 2
a9873 2
    USI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    current_cpu->branch (opval, npc, status);
d9875 1
a9875 1
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
d9879 1
a9879 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 14))) {
d9881 1
a9881 1
  tmp_addr = SUBSI (tmp_addr, 4);
d9884 1
a9884 1
    current_cpu->hardware.h_gr[((UINT) 14)] = opval;
d9886 1
a9886 1
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 14) << ']' << ":=0x" << hex << opval << dec << "  ";
d9890 1
a9890 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 13))) {
d9892 1
a9892 1
  tmp_addr = SUBSI (tmp_addr, 4);
d9895 1
a9895 1
    current_cpu->hardware.h_gr[((UINT) 13)] = opval;
d9897 1
a9897 1
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 13) << ']' << ":=0x" << hex << opval << dec << "  ";
d9901 1
a9901 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 12))) {
d9903 1
a9903 1
  tmp_addr = SUBSI (tmp_addr, 4);
d9906 1
a9906 1
    current_cpu->hardware.h_gr[((UINT) 12)] = opval;
d9908 1
a9908 1
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 12) << ']' << ":=0x" << hex << opval << dec << "  ";
d9912 1
a9912 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 11))) {
d9914 1
a9914 1
  tmp_addr = SUBSI (tmp_addr, 4);
d9917 1
a9917 1
    current_cpu->hardware.h_gr[((UINT) 11)] = opval;
d9919 1
a9919 1
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 11) << ']' << ":=0x" << hex << opval << dec << "  ";
d9923 1
a9923 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 10))) {
d9925 1
a9925 1
  tmp_addr = SUBSI (tmp_addr, 4);
d9928 1
a9928 1
    current_cpu->hardware.h_gr[((UINT) 10)] = opval;
d9930 1
a9930 1
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 10) << ']' << ":=0x" << hex << opval << dec << "  ";
d9934 1
a9934 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 9))) {
d9936 1
a9936 1
  tmp_addr = SUBSI (tmp_addr, 4);
d9939 1
a9939 1
    current_cpu->hardware.h_gr[((UINT) 9)] = opval;
d9941 1
a9941 1
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 9) << ']' << ":=0x" << hex << opval << dec << "  ";
d9945 1
a9945 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 8))) {
d9947 1
a9947 1
  tmp_addr = SUBSI (tmp_addr, 4);
d9950 1
a9950 1
    current_cpu->hardware.h_gr[((UINT) 8)] = opval;
d9952 1
a9952 1
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 8) << ']' << ":=0x" << hex << opval << dec << "  ";
d9956 1
a9956 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 7))) {
d9958 1
a9958 1
  tmp_addr = SUBSI (tmp_addr, 4);
d9961 1
a9961 1
    current_cpu->hardware.h_gr[((UINT) 7)] = opval;
d9963 1
a9963 1
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 7) << ']' << ":=0x" << hex << opval << dec << "  ";
d9967 1
a9967 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 6))) {
d9969 1
a9969 1
  tmp_addr = SUBSI (tmp_addr, 4);
d9972 1
a9972 1
    current_cpu->hardware.h_gr[((UINT) 6)] = opval;
d9974 1
a9974 1
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 6) << ']' << ":=0x" << hex << opval << dec << "  ";
d9978 1
a9978 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 5))) {
d9980 1
a9980 1
  tmp_addr = SUBSI (tmp_addr, 4);
d9983 1
a9983 1
    current_cpu->hardware.h_gr[((UINT) 5)] = opval;
d9985 1
a9985 1
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 5) << ']' << ":=0x" << hex << opval << dec << "  ";
d9989 1
a9989 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 4))) {
d9991 1
a9991 1
  tmp_addr = SUBSI (tmp_addr, 4);
d9994 1
a9994 1
    current_cpu->hardware.h_gr[((UINT) 4)] = opval;
d9996 1
a9996 1
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 4) << ']' << ":=0x" << hex << opval << dec << "  ";
d10000 1
a10000 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 3))) {
d10002 1
a10002 1
  tmp_addr = SUBSI (tmp_addr, 4);
d10005 1
a10005 1
    current_cpu->hardware.h_gr[((UINT) 3)] = opval;
d10007 1
a10007 1
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 3) << ']' << ":=0x" << hex << opval << dec << "  ";
d10011 1
a10011 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 2))) {
d10013 1
a10013 1
  tmp_addr = SUBSI (tmp_addr, 4);
d10016 1
a10016 1
    current_cpu->hardware.h_gr[((UINT) 2)] = opval;
d10018 1
a10018 1
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 2) << ']' << ":=0x" << hex << opval << dec << "  ";
d10022 1
a10022 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 1))) {
d10024 1
a10024 1
  tmp_addr = SUBSI (tmp_addr, 4);
d10027 1
a10027 1
    current_cpu->hardware.h_gr[((UINT) 1)] = opval;
d10029 1
a10029 1
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 1) << ']' << ":=0x" << hex << opval << dec << "  ";
d10033 1
a10033 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 0))) {
d10035 1
a10035 1
  tmp_addr = SUBSI (tmp_addr, 4);
d10037 2
a10038 2
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    current_cpu->hardware.h_gr[((UINT) 0)] = opval;
d10040 1
a10040 1
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 0) << ']' << ":=0x" << hex << opval << dec << "  ";
d10044 6
d10057 1
a10057 1
// ********** ldmdb-wb: FIXME
d10060 1
a10060 1
arm_sem_ldmdb_wb (arm7f_cpu* current_cpu, arm_scache* sem)
d10071 1
a10071 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
d10073 1
a10073 12
  tmp_addr = SUBSI (tmp_addr, 4);
  {
    USI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    current_cpu->branch (opval, npc, status);
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "pc" << ":=0x" << hex << opval << dec << "  ";
  }
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 14))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
d10076 1
a10076 1
    current_cpu->hardware.h_gr[((UINT) 14)] = opval;
d10078 1
a10078 1
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 14) << ']' << ":=0x" << hex << opval << dec << "  ";
d10082 1
a10082 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 13))) {
d10084 1
a10084 1
  tmp_addr = SUBSI (tmp_addr, 4);
d10087 1
a10087 1
    current_cpu->hardware.h_gr[((UINT) 13)] = opval;
d10089 1
a10089 1
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 13) << ']' << ":=0x" << hex << opval << dec << "  ";
d10093 1
a10093 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 12))) {
d10095 1
a10095 1
  tmp_addr = SUBSI (tmp_addr, 4);
d10098 1
a10098 1
    current_cpu->hardware.h_gr[((UINT) 12)] = opval;
d10100 1
a10100 1
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 12) << ']' << ":=0x" << hex << opval << dec << "  ";
d10104 1
a10104 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 11))) {
d10106 1
a10106 1
  tmp_addr = SUBSI (tmp_addr, 4);
d10109 1
a10109 1
    current_cpu->hardware.h_gr[((UINT) 11)] = opval;
d10111 1
a10111 1
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 11) << ']' << ":=0x" << hex << opval << dec << "  ";
d10115 1
a10115 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 10))) {
d10117 1
a10117 1
  tmp_addr = SUBSI (tmp_addr, 4);
d10120 1
a10120 1
    current_cpu->hardware.h_gr[((UINT) 10)] = opval;
d10122 1
a10122 1
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 10) << ']' << ":=0x" << hex << opval << dec << "  ";
d10126 1
a10126 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 9))) {
d10128 1
a10128 1
  tmp_addr = SUBSI (tmp_addr, 4);
d10131 1
a10131 1
    current_cpu->hardware.h_gr[((UINT) 9)] = opval;
d10133 1
a10133 1
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 9) << ']' << ":=0x" << hex << opval << dec << "  ";
d10137 1
a10137 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 8))) {
d10139 1
a10139 1
  tmp_addr = SUBSI (tmp_addr, 4);
d10142 1
a10142 1
    current_cpu->hardware.h_gr[((UINT) 8)] = opval;
d10144 1
a10144 1
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 8) << ']' << ":=0x" << hex << opval << dec << "  ";
d10150 1
a10150 1
  tmp_addr = SUBSI (tmp_addr, 4);
d10159 1
a10159 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 6))) {
d10161 2
a10162 1
  tmp_addr = SUBSI (tmp_addr, 4);
d10165 1
a10165 1
    current_cpu->hardware.h_gr[((UINT) 6)] = opval;
d10167 1
a10167 1
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 6) << ']' << ":=0x" << hex << opval << dec << "  ";
d10169 1
a10169 5
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 5))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
d10172 1
a10172 1
    current_cpu->hardware.h_gr[((UINT) 5)] = opval;
d10174 1
a10174 1
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 5) << ']' << ":=0x" << hex << opval << dec << "  ";
d10178 2
a10179 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 4))) {
d10181 2
a10182 1
  tmp_addr = SUBSI (tmp_addr, 4);
d10185 1
a10185 1
    current_cpu->hardware.h_gr[((UINT) 4)] = opval;
d10187 1
a10187 1
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 4) << ']' << ":=0x" << hex << opval << dec << "  ";
d10189 185
a10377 1
  tmp_addr = SUBSI (tmp_addr, 4);
d10382 3627
a14008 1
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 3) << ']' << ":=0x" << hex << opval << dec << "  ";
d14012 2
a14013 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 2))) {
d14015 2
a14016 1
  tmp_addr = SUBSI (tmp_addr, 4);
d14018 2
a14019 2
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    current_cpu->hardware.h_gr[((UINT) 2)] = opval;
d14021 1
a14021 1
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 2) << ']' << ":=0x" << hex << opval << dec << "  ";
d14023 1
a14023 5
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 1))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
d14025 2
a14026 2
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    current_cpu->hardware.h_gr[((UINT) 1)] = opval;
d14028 1
a14028 1
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 1) << ']' << ":=0x" << hex << opval << dec << "  ";
d14032 2
a14033 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 0))) {
d14035 1
a14035 1
  tmp_addr = SUBSI (tmp_addr, 4);
d14037 2
a14038 2
    SI opval = current_cpu->GETMEMSI (pc, tmp_addr);
    current_cpu->hardware.h_gr[((UINT) 0)] = opval;
d14040 1
a14040 1
      current_cpu->trace_stream << "gr" << '[' << ((UINT) 0) << ']' << ":=0x" << hex << opval << dec << "  ";
d14052 1
a14052 1
  current_cpu->done_cti_insn (npc, status);
d14057 1
a14057 1
// ********** stmdb: FIXME
d14060 1
a14060 1
arm_sem_stmdb (arm7f_cpu* current_cpu, arm_scache* sem)
d14071 1
a14071 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
a14072 1
  tmp_addr = SUBSI (tmp_addr, 4);
d14074 1
a14074 1
    SI opval = ADDSI (current_cpu->hardware.h_gr[((UINT) 15)], 4);
d14079 1
d14082 1
a14082 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 14))) {
a14083 1
  tmp_addr = SUBSI (tmp_addr, 4);
d14085 1
a14085 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 14)];
d14090 1
d14093 1
a14093 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 13))) {
a14094 1
  tmp_addr = SUBSI (tmp_addr, 4);
d14096 1
a14096 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 13)];
d14101 1
d14104 1
a14104 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 12))) {
a14105 1
  tmp_addr = SUBSI (tmp_addr, 4);
d14107 1
a14107 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 12)];
d14112 1
d14115 1
a14115 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 11))) {
a14116 1
  tmp_addr = SUBSI (tmp_addr, 4);
d14118 1
a14118 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 11)];
d14123 1
d14126 1
a14126 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 10))) {
a14127 1
  tmp_addr = SUBSI (tmp_addr, 4);
d14129 1
a14129 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 10)];
d14134 1
d14137 1
a14137 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 9))) {
a14138 1
  tmp_addr = SUBSI (tmp_addr, 4);
d14140 1
a14140 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 9)];
d14145 1
d14148 1
a14148 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 8))) {
a14149 1
  tmp_addr = SUBSI (tmp_addr, 4);
d14151 1
a14151 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 8)];
d14156 1
d14159 1
a14159 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 7))) {
a14160 1
  tmp_addr = SUBSI (tmp_addr, 4);
d14162 1
a14162 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 7)];
d14167 1
d14170 1
a14170 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 6))) {
a14171 1
  tmp_addr = SUBSI (tmp_addr, 4);
d14173 1
a14173 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 6)];
d14178 1
d14181 1
a14181 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 5))) {
a14182 1
  tmp_addr = SUBSI (tmp_addr, 4);
d14184 1
a14184 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 5)];
d14189 1
d14192 1
a14192 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 4))) {
a14193 1
  tmp_addr = SUBSI (tmp_addr, 4);
d14195 1
a14195 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 4)];
d14200 1
d14203 1
a14203 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 3))) {
a14204 1
  tmp_addr = SUBSI (tmp_addr, 4);
d14206 1
a14206 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 3)];
d14211 1
d14214 1
a14214 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 2))) {
a14215 1
  tmp_addr = SUBSI (tmp_addr, 4);
d14217 1
a14217 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 2)];
d14222 1
d14225 1
a14225 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 1))) {
a14226 1
  tmp_addr = SUBSI (tmp_addr, 4);
d14228 1
a14228 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 1)];
d14233 1
d14236 1
a14236 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 0))) {
a14237 1
  tmp_addr = SUBSI (tmp_addr, 4);
d14239 1
a14239 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 0)];
d14244 1
d14254 1
a14254 1
// ********** stmdb-wb: FIXME
d14257 1
a14257 1
arm_sem_stmdb_wb (arm7f_cpu* current_cpu, arm_scache* sem)
d14268 34
a14301 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
a14302 1
  tmp_addr = SUBSI (tmp_addr, 4);
d14304 1
a14304 1
    SI opval = ADDSI (current_cpu->hardware.h_gr[((UINT) 15)], 4);
d14309 1
d14312 1
a14312 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 14))) {
a14313 1
  tmp_addr = SUBSI (tmp_addr, 4);
d14315 1
a14315 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 14)];
d14320 1
d14323 1
a14323 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 13))) {
a14324 1
  tmp_addr = SUBSI (tmp_addr, 4);
d14326 1
a14326 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 13)];
d14331 1
d14334 1
a14334 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 12))) {
a14335 1
  tmp_addr = SUBSI (tmp_addr, 4);
d14337 1
a14337 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 12)];
d14342 1
d14345 1
a14345 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 11))) {
a14346 1
  tmp_addr = SUBSI (tmp_addr, 4);
d14348 1
a14348 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 11)];
d14353 1
d14356 1
a14356 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 10))) {
d14358 8
a14365 1
  tmp_addr = SUBSI (tmp_addr, 4);
d14367 1
a14367 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 10)];
d14373 2
d14378 1
a14378 1
  tmp_addr = SUBSI (tmp_addr, 4);
d14385 9
d14396 1
a14396 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 8))) {
d14398 8
a14405 1
  tmp_addr = SUBSI (tmp_addr, 4);
d14407 1
a14407 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 8)];
d14413 2
d14416 1
a14416 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 7))) {
d14418 8
a14425 1
  tmp_addr = SUBSI (tmp_addr, 4);
d14427 1
a14427 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 7)];
d14433 2
d14436 1
a14436 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 6))) {
d14438 1
a14438 1
  tmp_addr = SUBSI (tmp_addr, 4);
d14440 1
a14440 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 6)];
d14445 1
a14445 5
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 5))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
d14447 1
a14447 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 5)];
d14453 2
d14456 1
a14456 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 4))) {
d14458 1
a14458 1
  tmp_addr = SUBSI (tmp_addr, 4);
d14460 1
a14460 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 4)];
d14465 1
a14465 5
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 3))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
d14467 1
a14467 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 3)];
d14473 2
d14476 1
a14476 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 2))) {
d14478 1
a14478 1
  tmp_addr = SUBSI (tmp_addr, 4);
d14480 1
a14480 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 2)];
d14485 1
a14485 5
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 1))) {
{
  tmp_addr = SUBSI (tmp_addr, 4);
d14487 1
a14487 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 1)];
d14493 2
d14496 1
a14496 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 0))) {
a14497 1
  tmp_addr = SUBSI (tmp_addr, 4);
d14499 1
a14499 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 0)];
d14504 1
a14506 6
  {
    SI opval = tmp_addr;
    * FLD (i_rn) = opval;
    if (UNLIKELY(current_cpu->trace_result_p))
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
  }
d14514 1
a14514 1
// ********** stmib: FIXME
d14517 1
a14517 1
arm_sem_stmib (arm7f_cpu* current_cpu, arm_scache* sem)
a14529 1
  tmp_addr = ADDSI (tmp_addr, 4);
d14536 1
a14540 1
  tmp_addr = ADDSI (tmp_addr, 4);
d14547 1
a14551 1
  tmp_addr = ADDSI (tmp_addr, 4);
d14558 1
a14562 1
  tmp_addr = ADDSI (tmp_addr, 4);
d14569 1
a14573 1
  tmp_addr = ADDSI (tmp_addr, 4);
d14580 1
a14584 1
  tmp_addr = ADDSI (tmp_addr, 4);
d14591 1
a14595 1
  tmp_addr = ADDSI (tmp_addr, 4);
d14602 1
a14606 1
  tmp_addr = ADDSI (tmp_addr, 4);
d14613 1
a14617 1
  tmp_addr = ADDSI (tmp_addr, 4);
d14624 1
a14628 1
  tmp_addr = ADDSI (tmp_addr, 4);
d14635 1
a14639 1
  tmp_addr = ADDSI (tmp_addr, 4);
d14646 1
a14650 1
  tmp_addr = ADDSI (tmp_addr, 4);
d14657 1
a14661 1
  tmp_addr = ADDSI (tmp_addr, 4);
d14668 1
a14672 1
  tmp_addr = ADDSI (tmp_addr, 4);
d14679 1
a14683 1
  tmp_addr = ADDSI (tmp_addr, 4);
d14690 1
a14694 1
  tmp_addr = ADDSI (tmp_addr, 4);
d14701 1
d14704 6
d14717 1
a14717 1
// ********** stmib-wb: FIXME
d14720 1
a14720 1
arm_sem_stmib_wb (arm7f_cpu* current_cpu, arm_scache* sem)
a14732 1
  tmp_addr = ADDSI (tmp_addr, 4);
d14739 1
a14743 1
  tmp_addr = ADDSI (tmp_addr, 4);
d14750 1
a14754 1
  tmp_addr = ADDSI (tmp_addr, 4);
d14761 1
a14765 1
  tmp_addr = ADDSI (tmp_addr, 4);
d14772 1
a14776 1
  tmp_addr = ADDSI (tmp_addr, 4);
d14783 1
a14787 1
  tmp_addr = ADDSI (tmp_addr, 4);
d14794 1
a14798 1
  tmp_addr = ADDSI (tmp_addr, 4);
d14805 1
a14809 1
  tmp_addr = ADDSI (tmp_addr, 4);
d14816 1
d14821 1
a14821 1
  tmp_addr = ADDSI (tmp_addr, 4);
d14828 9
d14841 1
a14841 1
  tmp_addr = ADDSI (tmp_addr, 4);
d14848 9
d14861 1
a14861 1
  tmp_addr = ADDSI (tmp_addr, 4);
d14868 9
d14881 1
a14881 1
  tmp_addr = ADDSI (tmp_addr, 4);
d14888 9
d14901 1
a14901 1
  tmp_addr = ADDSI (tmp_addr, 4);
d14908 9
d14921 1
a14921 1
  tmp_addr = ADDSI (tmp_addr, 4);
d14928 9
d14941 1
a14941 1
  tmp_addr = ADDSI (tmp_addr, 4);
d14948 9
a14960 1
  tmp_addr = ADDSI (tmp_addr, 4);
d14967 1
d14983 1
a14983 1
// ********** stmia: FIXME
d14986 1
a14986 1
arm_sem_stmia (arm7f_cpu* current_cpu, arm_scache* sem)
d14997 1
a14997 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 0))) {
d15000 1
a15000 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 0)];
d15005 1
a15005 1
  tmp_addr = ADDSI (tmp_addr, 4);
d15008 1
a15008 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 1))) {
d15011 1
a15011 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 1)];
d15016 1
a15016 1
  tmp_addr = ADDSI (tmp_addr, 4);
d15019 1
a15019 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 2))) {
d15022 1
a15022 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 2)];
d15027 1
a15027 1
  tmp_addr = ADDSI (tmp_addr, 4);
d15030 1
a15030 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 3))) {
d15033 1
a15033 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 3)];
d15038 1
a15038 1
  tmp_addr = ADDSI (tmp_addr, 4);
d15041 1
a15041 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 4))) {
d15044 1
a15044 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 4)];
d15049 1
a15049 1
  tmp_addr = ADDSI (tmp_addr, 4);
d15052 1
a15052 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 5))) {
d15055 1
a15055 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 5)];
d15060 1
a15060 1
  tmp_addr = ADDSI (tmp_addr, 4);
d15063 1
a15063 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 6))) {
d15066 1
a15066 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 6)];
d15071 1
a15071 1
  tmp_addr = ADDSI (tmp_addr, 4);
d15074 1
a15074 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 7))) {
d15077 1
a15077 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 7)];
d15082 1
a15082 1
  tmp_addr = ADDSI (tmp_addr, 4);
d15085 1
a15085 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 8))) {
d15088 1
a15088 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 8)];
d15093 1
a15093 1
  tmp_addr = ADDSI (tmp_addr, 4);
d15096 1
a15096 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 9))) {
d15099 1
a15099 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 9)];
d15104 1
a15104 1
  tmp_addr = ADDSI (tmp_addr, 4);
d15107 1
a15107 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 10))) {
d15110 1
a15110 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 10)];
d15115 1
a15115 1
  tmp_addr = ADDSI (tmp_addr, 4);
d15118 1
a15118 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 11))) {
d15121 1
a15121 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 11)];
d15126 1
a15126 1
  tmp_addr = ADDSI (tmp_addr, 4);
d15129 1
a15129 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 12))) {
d15132 1
a15132 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 12)];
d15137 1
a15137 1
  tmp_addr = ADDSI (tmp_addr, 4);
d15140 1
a15140 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 13))) {
d15143 1
a15143 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 13)];
d15148 1
a15148 1
  tmp_addr = ADDSI (tmp_addr, 4);
d15151 1
a15151 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 14))) {
d15154 1
a15154 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 14)];
d15159 1
a15159 1
  tmp_addr = ADDSI (tmp_addr, 4);
d15162 1
a15162 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
d15165 1
a15165 1
    SI opval = ADDSI (current_cpu->hardware.h_gr[((UINT) 15)], 4);
d15170 1
a15170 1
  tmp_addr = ADDSI (tmp_addr, 4);
d15180 1
a15180 1
// ********** stmia-wb: FIXME
d15183 1
a15183 1
arm_sem_stmia_wb (arm7f_cpu* current_cpu, arm_scache* sem)
d15194 1
a15194 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 0))) {
d15197 1
a15197 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 0)];
d15202 1
a15202 1
  tmp_addr = ADDSI (tmp_addr, 4);
d15205 1
a15205 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 1))) {
d15207 8
d15216 1
a15216 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 1)];
d15221 2
a15222 1
  tmp_addr = ADDSI (tmp_addr, 4);
d15225 1
a15225 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 2))) {
d15227 8
d15236 1
a15236 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 2)];
d15241 2
a15242 1
  tmp_addr = ADDSI (tmp_addr, 4);
d15245 1
a15245 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 3))) {
d15247 8
d15256 1
a15256 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 3)];
d15261 2
a15262 1
  tmp_addr = ADDSI (tmp_addr, 4);
d15265 1
a15265 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 4))) {
d15267 8
d15276 1
a15276 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 4)];
d15281 2
a15282 1
  tmp_addr = ADDSI (tmp_addr, 4);
d15285 1
a15285 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 5))) {
d15287 8
d15296 1
a15296 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 5)];
d15301 2
a15302 1
  tmp_addr = ADDSI (tmp_addr, 4);
d15305 1
a15305 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 6))) {
d15307 1
d15309 1
a15309 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 6)];
d15314 1
a15314 5
  tmp_addr = ADDSI (tmp_addr, 4);
}
}
if (ANDSI (FLD (f_reg_list), SLLSI (1, 7))) {
{
d15316 1
a15316 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 7)];
d15321 2
a15322 1
  tmp_addr = ADDSI (tmp_addr, 4);
d15327 1
d15334 9
a15342 1
  tmp_addr = ADDSI (tmp_addr, 4);
d15345 1
a15345 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 9))) {
d15348 1
a15348 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 9)];
d15353 1
a15353 1
  tmp_addr = ADDSI (tmp_addr, 4);
d15356 1
a15356 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 10))) {
d15359 1
a15359 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 10)];
d15364 1
a15364 1
  tmp_addr = ADDSI (tmp_addr, 4);
d15367 1
a15367 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 11))) {
d15370 1
a15370 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 11)];
d15375 1
a15375 1
  tmp_addr = ADDSI (tmp_addr, 4);
d15378 1
a15378 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 12))) {
d15381 1
a15381 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 12)];
d15386 1
a15386 1
  tmp_addr = ADDSI (tmp_addr, 4);
d15389 1
a15389 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 13))) {
d15392 1
a15392 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 13)];
d15397 1
a15397 1
  tmp_addr = ADDSI (tmp_addr, 4);
d15400 1
a15400 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 14))) {
d15403 1
a15403 1
    SI opval = current_cpu->hardware.h_gr[((UINT) 14)];
d15408 1
a15408 1
  tmp_addr = ADDSI (tmp_addr, 4);
d15411 1
a15411 1
if (ANDSI (FLD (f_reg_list), SLLSI (1, 15))) {
d15414 1
a15414 1
    SI opval = ADDSI (current_cpu->hardware.h_gr[((UINT) 15)], 4);
d15419 1
a15419 1
  tmp_addr = ADDSI (tmp_addr, 4);
d15422 2
d15425 2
a15426 2
    SI opval = tmp_addr;
    * FLD (i_rn) = opval;
d15428 1
a15428 1
      current_cpu->trace_stream << "gr" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
d15430 3
d15440 1
a15440 1
// ********** stmda: FIXME
d15443 1
a15443 1
arm_sem_stmda (arm7f_cpu* current_cpu, arm_scache* sem)
d15630 6
d15643 1
a15643 1
// ********** stmda-wb: FIXME
d15646 1
a15646 1
arm_sem_stmda_wb (arm7f_cpu* current_cpu, arm_scache* sem)
d15670 1
d15677 8
d15690 1
d15697 8
d15710 1
d15717 8
d15730 1
d15737 8
d15750 1
d15757 8
d15770 1
d15777 8
d15790 1
d15797 8
@


1.3
log
@[arm7t/ChangeLog]
2001-01-26  Frank Ch. Eigler  <fche@@redhat.com>

	* arm-decode.h, -sem.cxx: Regenerated with more tracing improvements,
	* thumb-decode.h, -sem.cxx: Ditto.

[m32r/ChangeLog]
2001-01-26  Frank Ch. Eigler  <fche@@redhat.com>

	* m32r-decode.h, -sem.cxx: Regenerated with more tracing improvements.
@
text
@d56 1
a56 1
    if (current_cpu->trace_result_p)
d80 1
a80 1
    if (current_cpu->trace_result_p)
d86 1
a86 1
    if (current_cpu->trace_result_p)
d111 1
a111 1
    if (current_cpu->trace_result_p)
d118 1
a118 1
    if (current_cpu->trace_result_p)
d149 1
a149 1
    if (current_cpu->trace_result_p)
d156 1
a156 1
    if (current_cpu->trace_result_p)
d164 1
a164 1
    if (current_cpu->trace_result_p)
d194 1
a194 1
    if (current_cpu->trace_result_p)
d201 1
a201 1
    if (current_cpu->trace_result_p)
d209 1
a209 1
    if (current_cpu->trace_result_p)
d239 1
a239 1
    if (current_cpu->trace_result_p)
d246 1
a246 1
    if (current_cpu->trace_result_p)
d254 1
a254 1
    if (current_cpu->trace_result_p)
d284 1
a284 1
    if (current_cpu->trace_result_p)
d291 1
a291 1
    if (current_cpu->trace_result_p)
d299 1
a299 1
    if (current_cpu->trace_result_p)
d329 1
a329 1
    if (current_cpu->trace_result_p)
d336 1
a336 1
    if (current_cpu->trace_result_p)
d344 1
a344 1
    if (current_cpu->trace_result_p)
d374 1
a374 1
    if (current_cpu->trace_result_p)
d381 1
a381 1
    if (current_cpu->trace_result_p)
d389 1
a389 1
    if (current_cpu->trace_result_p)
d419 1
a419 1
    if (current_cpu->trace_result_p)
d426 1
a426 1
    if (current_cpu->trace_result_p)
d434 1
a434 1
    if (current_cpu->trace_result_p)
d464 1
a464 1
    if (current_cpu->trace_result_p)
d471 1
a471 1
    if (current_cpu->trace_result_p)
d479 1
a479 1
    if (current_cpu->trace_result_p)
d509 1
a509 1
    if (current_cpu->trace_result_p)
d516 1
a516 1
    if (current_cpu->trace_result_p)
d549 1
a549 1
    if (current_cpu->trace_result_p)
d556 1
a556 1
    if (current_cpu->trace_result_p)
d589 1
a589 1
    if (current_cpu->trace_result_p)
d596 1
a596 1
    if (current_cpu->trace_result_p)
d629 1
a629 1
    if (current_cpu->trace_result_p)
d636 1
a636 1
    if (current_cpu->trace_result_p)
d669 1
a669 1
    if (current_cpu->trace_result_p)
d676 1
a676 1
    if (current_cpu->trace_result_p)
d684 1
a684 1
    if (current_cpu->trace_result_p)
d714 1
a714 1
    if (current_cpu->trace_result_p)
d721 1
a721 1
    if (current_cpu->trace_result_p)
d729 1
a729 1
    if (current_cpu->trace_result_p)
d759 1
a759 1
    if (current_cpu->trace_result_p)
d766 1
a766 1
    if (current_cpu->trace_result_p)
d774 1
a774 1
    if (current_cpu->trace_result_p)
d804 1
a804 1
    if (current_cpu->trace_result_p)
d811 1
a811 1
    if (current_cpu->trace_result_p)
d819 1
a819 1
    if (current_cpu->trace_result_p)
d849 1
a849 1
    if (current_cpu->trace_result_p)
d856 1
a856 1
    if (current_cpu->trace_result_p)
d864 1
a864 1
    if (current_cpu->trace_result_p)
d894 1
a894 1
    if (current_cpu->trace_result_p)
d901 1
a901 1
    if (current_cpu->trace_result_p)
d909 1
a909 1
    if (current_cpu->trace_result_p)
d939 1
a939 1
    if (current_cpu->trace_result_p)
d946 1
a946 1
    if (current_cpu->trace_result_p)
d954 1
a954 1
    if (current_cpu->trace_result_p)
d984 1
a984 1
    if (current_cpu->trace_result_p)
d991 1
a991 1
    if (current_cpu->trace_result_p)
d999 1
a999 1
    if (current_cpu->trace_result_p)
d1029 1
a1029 1
    if (current_cpu->trace_result_p)
d1036 1
a1036 1
    if (current_cpu->trace_result_p)
d1044 1
a1044 1
    if (current_cpu->trace_result_p)
d1074 1
a1074 1
    if (current_cpu->trace_result_p)
d1081 1
a1081 1
    if (current_cpu->trace_result_p)
d1089 1
a1089 1
    if (current_cpu->trace_result_p)
d1119 1
a1119 1
    if (current_cpu->trace_result_p)
d1126 1
a1126 1
    if (current_cpu->trace_result_p)
d1134 1
a1134 1
    if (current_cpu->trace_result_p)
d1164 1
a1164 1
    if (current_cpu->trace_result_p)
d1171 1
a1171 1
    if (current_cpu->trace_result_p)
d1179 1
a1179 1
    if (current_cpu->trace_result_p)
d1209 1
a1209 1
    if (current_cpu->trace_result_p)
d1216 1
a1216 1
    if (current_cpu->trace_result_p)
d1249 1
a1249 1
    if (current_cpu->trace_result_p)
d1256 1
a1256 1
    if (current_cpu->trace_result_p)
d1289 1
a1289 1
    if (current_cpu->trace_result_p)
d1296 1
a1296 1
    if (current_cpu->trace_result_p)
d1329 1
a1329 1
    if (current_cpu->trace_result_p)
d1336 1
a1336 1
    if (current_cpu->trace_result_p)
d1369 1
a1369 1
    if (current_cpu->trace_result_p)
d1376 1
a1376 1
    if (current_cpu->trace_result_p)
d1384 1
a1384 1
    if (current_cpu->trace_result_p)
d1414 1
a1414 1
    if (current_cpu->trace_result_p)
d1421 1
a1421 1
    if (current_cpu->trace_result_p)
d1429 1
a1429 1
    if (current_cpu->trace_result_p)
d1459 1
a1459 1
    if (current_cpu->trace_result_p)
d1466 1
a1466 1
    if (current_cpu->trace_result_p)
d1474 1
a1474 1
    if (current_cpu->trace_result_p)
d1504 1
a1504 1
    if (current_cpu->trace_result_p)
d1511 1
a1511 1
    if (current_cpu->trace_result_p)
d1519 1
a1519 1
    if (current_cpu->trace_result_p)
d1548 1
a1548 1
    if (current_cpu->trace_result_p)
d1555 1
a1555 1
    if (current_cpu->trace_result_p)
d1584 1
a1584 1
    if (current_cpu->trace_result_p)
d1591 1
a1591 1
    if (current_cpu->trace_result_p)
d1620 1
a1620 1
    if (current_cpu->trace_result_p)
d1627 1
a1627 1
    if (current_cpu->trace_result_p)
d1656 1
a1656 1
    if (current_cpu->trace_result_p)
d1663 1
a1663 1
    if (current_cpu->trace_result_p)
d1692 1
a1692 1
    if (current_cpu->trace_result_p)
d1699 1
a1699 1
    if (current_cpu->trace_result_p)
d1728 1
a1728 1
    if (current_cpu->trace_result_p)
d1735 1
a1735 1
    if (current_cpu->trace_result_p)
d1764 1
a1764 1
    if (current_cpu->trace_result_p)
d1771 1
a1771 1
    if (current_cpu->trace_result_p)
d1800 1
a1800 1
    if (current_cpu->trace_result_p)
d1807 1
a1807 1
    if (current_cpu->trace_result_p)
d1836 1
a1836 1
    if (current_cpu->trace_result_p)
d1867 1
a1867 1
    if (current_cpu->trace_result_p)
d1898 1
a1898 1
    if (current_cpu->trace_result_p)
d1929 1
a1929 1
    if (current_cpu->trace_result_p)
d1960 1
a1960 1
    if (current_cpu->trace_result_p)
d1967 1
a1967 1
    if (current_cpu->trace_result_p)
d1996 1
a1996 1
    if (current_cpu->trace_result_p)
d2003 1
a2003 1
    if (current_cpu->trace_result_p)
d2032 1
a2032 1
    if (current_cpu->trace_result_p)
d2039 1
a2039 1
    if (current_cpu->trace_result_p)
d2068 1
a2068 1
    if (current_cpu->trace_result_p)
d2075 1
a2075 1
    if (current_cpu->trace_result_p)
d2104 1
a2104 1
    if (current_cpu->trace_result_p)
d2111 1
a2111 1
    if (current_cpu->trace_result_p)
d2140 1
a2140 1
    if (current_cpu->trace_result_p)
d2147 1
a2147 1
    if (current_cpu->trace_result_p)
d2176 1
a2176 1
    if (current_cpu->trace_result_p)
d2183 1
a2183 1
    if (current_cpu->trace_result_p)
d2212 1
a2212 1
    if (current_cpu->trace_result_p)
d2219 1
a2219 1
    if (current_cpu->trace_result_p)
d2248 1
a2248 1
    if (current_cpu->trace_result_p)
d2255 1
a2255 1
    if (current_cpu->trace_result_p)
d2284 1
a2284 1
    if (current_cpu->trace_result_p)
d2291 1
a2291 1
    if (current_cpu->trace_result_p)
d2320 1
a2320 1
    if (current_cpu->trace_result_p)
d2327 1
a2327 1
    if (current_cpu->trace_result_p)
d2356 1
a2356 1
    if (current_cpu->trace_result_p)
d2363 1
a2363 1
    if (current_cpu->trace_result_p)
d2392 1
a2392 1
    if (current_cpu->trace_result_p)
d2423 1
a2423 1
    if (current_cpu->trace_result_p)
d2454 1
a2454 1
    if (current_cpu->trace_result_p)
d2485 1
a2485 1
    if (current_cpu->trace_result_p)
d2516 1
a2516 1
    if (current_cpu->trace_result_p)
d2523 1
a2523 1
    if (current_cpu->trace_result_p)
d2552 1
a2552 1
    if (current_cpu->trace_result_p)
d2559 1
a2559 1
    if (current_cpu->trace_result_p)
d2588 1
a2588 1
    if (current_cpu->trace_result_p)
d2595 1
a2595 1
    if (current_cpu->trace_result_p)
d2624 1
a2624 1
    if (current_cpu->trace_result_p)
d2631 1
a2631 1
    if (current_cpu->trace_result_p)
d2660 1
a2660 1
    if (current_cpu->trace_result_p)
d2691 1
a2691 1
    if (current_cpu->trace_result_p)
d2722 1
a2722 1
    if (current_cpu->trace_result_p)
d2753 1
a2753 1
    if (current_cpu->trace_result_p)
d2784 1
a2784 1
    if (current_cpu->trace_result_p)
d2791 1
a2791 1
    if (current_cpu->trace_result_p)
d2820 1
a2820 1
    if (current_cpu->trace_result_p)
d2827 1
a2827 1
    if (current_cpu->trace_result_p)
d2856 1
a2856 1
    if (current_cpu->trace_result_p)
d2863 1
a2863 1
    if (current_cpu->trace_result_p)
d2892 1
a2892 1
    if (current_cpu->trace_result_p)
d2899 1
a2899 1
    if (current_cpu->trace_result_p)
d2928 1
a2928 1
    if (current_cpu->trace_result_p)
d2935 1
a2935 1
    if (current_cpu->trace_result_p)
d2964 1
a2964 1
    if (current_cpu->trace_result_p)
d2971 1
a2971 1
    if (current_cpu->trace_result_p)
d3000 1
a3000 1
    if (current_cpu->trace_result_p)
d3007 1
a3007 1
    if (current_cpu->trace_result_p)
d3036 1
a3036 1
    if (current_cpu->trace_result_p)
d3043 1
a3043 1
    if (current_cpu->trace_result_p)
d3073 1
a3073 1
    if (current_cpu->trace_result_p)
d3080 1
a3080 1
    if (current_cpu->trace_result_p)
d3113 1
a3113 1
    if (current_cpu->trace_result_p)
d3120 1
a3120 1
    if (current_cpu->trace_result_p)
d3153 1
a3153 1
    if (current_cpu->trace_result_p)
d3160 1
a3160 1
    if (current_cpu->trace_result_p)
d3193 1
a3193 1
    if (current_cpu->trace_result_p)
d3200 1
a3200 1
    if (current_cpu->trace_result_p)
d3233 1
a3233 1
    if (current_cpu->trace_result_p)
d3240 1
a3240 1
    if (current_cpu->trace_result_p)
d3248 1
a3248 1
    if (current_cpu->trace_result_p)
d3278 1
a3278 1
    if (current_cpu->trace_result_p)
d3285 1
a3285 1
    if (current_cpu->trace_result_p)
d3293 1
a3293 1
    if (current_cpu->trace_result_p)
d3323 1
a3323 1
    if (current_cpu->trace_result_p)
d3330 1
a3330 1
    if (current_cpu->trace_result_p)
d3338 1
a3338 1
    if (current_cpu->trace_result_p)
d3368 1
a3368 1
    if (current_cpu->trace_result_p)
d3375 1
a3375 1
    if (current_cpu->trace_result_p)
d3383 1
a3383 1
    if (current_cpu->trace_result_p)
d3413 1
a3413 1
    if (current_cpu->trace_result_p)
d3420 1
a3420 1
    if (current_cpu->trace_result_p)
d3428 1
a3428 1
    if (current_cpu->trace_result_p)
d3458 1
a3458 1
    if (current_cpu->trace_result_p)
d3465 1
a3465 1
    if (current_cpu->trace_result_p)
d3473 1
a3473 1
    if (current_cpu->trace_result_p)
d3503 1
a3503 1
    if (current_cpu->trace_result_p)
d3510 1
a3510 1
    if (current_cpu->trace_result_p)
d3518 1
a3518 1
    if (current_cpu->trace_result_p)
d3548 1
a3548 1
    if (current_cpu->trace_result_p)
d3555 1
a3555 1
    if (current_cpu->trace_result_p)
d3563 1
a3563 1
    if (current_cpu->trace_result_p)
d3593 1
a3593 1
    if (current_cpu->trace_result_p)
d3600 1
a3600 1
    if (current_cpu->trace_result_p)
d3633 1
a3633 1
    if (current_cpu->trace_result_p)
d3640 1
a3640 1
    if (current_cpu->trace_result_p)
d3673 1
a3673 1
    if (current_cpu->trace_result_p)
d3680 1
a3680 1
    if (current_cpu->trace_result_p)
d3713 1
a3713 1
    if (current_cpu->trace_result_p)
d3720 1
a3720 1
    if (current_cpu->trace_result_p)
d3753 1
a3753 1
    if (current_cpu->trace_result_p)
d3760 1
a3760 1
    if (current_cpu->trace_result_p)
d3768 1
a3768 1
    if (current_cpu->trace_result_p)
d3798 1
a3798 1
    if (current_cpu->trace_result_p)
d3805 1
a3805 1
    if (current_cpu->trace_result_p)
d3813 1
a3813 1
    if (current_cpu->trace_result_p)
d3843 1
a3843 1
    if (current_cpu->trace_result_p)
d3850 1
a3850 1
    if (current_cpu->trace_result_p)
d3858 1
a3858 1
    if (current_cpu->trace_result_p)
d3888 1
a3888 1
    if (current_cpu->trace_result_p)
d3895 1
a3895 1
    if (current_cpu->trace_result_p)
d3903 1
a3903 1
    if (current_cpu->trace_result_p)
d3933 1
a3933 1
    if (current_cpu->trace_result_p)
d3940 1
a3940 1
    if (current_cpu->trace_result_p)
d3948 1
a3948 1
    if (current_cpu->trace_result_p)
d3978 1
a3978 1
    if (current_cpu->trace_result_p)
d3985 1
a3985 1
    if (current_cpu->trace_result_p)
d3993 1
a3993 1
    if (current_cpu->trace_result_p)
d4023 1
a4023 1
    if (current_cpu->trace_result_p)
d4030 1
a4030 1
    if (current_cpu->trace_result_p)
d4038 1
a4038 1
    if (current_cpu->trace_result_p)
d4068 1
a4068 1
    if (current_cpu->trace_result_p)
d4075 1
a4075 1
    if (current_cpu->trace_result_p)
d4083 1
a4083 1
    if (current_cpu->trace_result_p)
d4113 1
a4113 1
    if (current_cpu->trace_result_p)
d4120 1
a4120 1
    if (current_cpu->trace_result_p)
d4153 1
a4153 1
    if (current_cpu->trace_result_p)
d4160 1
a4160 1
    if (current_cpu->trace_result_p)
d4193 1
a4193 1
    if (current_cpu->trace_result_p)
d4200 1
a4200 1
    if (current_cpu->trace_result_p)
d4233 1
a4233 1
    if (current_cpu->trace_result_p)
d4240 1
a4240 1
    if (current_cpu->trace_result_p)
d4273 1
a4273 1
    if (current_cpu->trace_result_p)
d4280 1
a4280 1
    if (current_cpu->trace_result_p)
d4288 1
a4288 1
    if (current_cpu->trace_result_p)
d4318 1
a4318 1
    if (current_cpu->trace_result_p)
d4325 1
a4325 1
    if (current_cpu->trace_result_p)
d4333 1
a4333 1
    if (current_cpu->trace_result_p)
d4363 1
a4363 1
    if (current_cpu->trace_result_p)
d4370 1
a4370 1
    if (current_cpu->trace_result_p)
d4378 1
a4378 1
    if (current_cpu->trace_result_p)
d4408 1
a4408 1
    if (current_cpu->trace_result_p)
d4415 1
a4415 1
    if (current_cpu->trace_result_p)
d4423 1
a4423 1
    if (current_cpu->trace_result_p)
d4453 1
a4453 1
    if (current_cpu->trace_result_p)
d4460 1
a4460 1
    if (current_cpu->trace_result_p)
d4468 1
a4468 1
    if (current_cpu->trace_result_p)
d4498 1
a4498 1
    if (current_cpu->trace_result_p)
d4505 1
a4505 1
    if (current_cpu->trace_result_p)
d4513 1
a4513 1
    if (current_cpu->trace_result_p)
d4543 1
a4543 1
    if (current_cpu->trace_result_p)
d4550 1
a4550 1
    if (current_cpu->trace_result_p)
d4558 1
a4558 1
    if (current_cpu->trace_result_p)
d4588 1
a4588 1
    if (current_cpu->trace_result_p)
d4595 1
a4595 1
    if (current_cpu->trace_result_p)
d4603 1
a4603 1
    if (current_cpu->trace_result_p)
d4630 1
a4630 1
    if (current_cpu->trace_result_p)
d4638 1
a4638 1
    if (current_cpu->trace_result_p)
d4644 1
a4644 1
    if (current_cpu->trace_result_p)
d4672 1
a4672 1
    if (current_cpu->trace_result_p)
d4680 1
a4680 1
    if (current_cpu->trace_result_p)
d4686 1
a4686 1
    if (current_cpu->trace_result_p)
d4717 1
a4717 1
    if (current_cpu->trace_result_p)
d4723 1
a4723 1
    if (current_cpu->trace_result_p)
d4731 1
a4731 1
    if (current_cpu->trace_result_p)
d4737 1
a4737 1
    if (current_cpu->trace_result_p)
d4769 1
a4769 1
    if (current_cpu->trace_result_p)
d4775 1
a4775 1
    if (current_cpu->trace_result_p)
d4783 1
a4783 1
    if (current_cpu->trace_result_p)
d4789 1
a4789 1
    if (current_cpu->trace_result_p)
d4820 1
a4820 1
    if (current_cpu->trace_result_p)
d4826 1
a4826 1
    if (current_cpu->trace_result_p)
d4834 1
a4834 1
    if (current_cpu->trace_result_p)
d4840 1
a4840 1
    if (current_cpu->trace_result_p)
d4872 1
a4872 1
    if (current_cpu->trace_result_p)
d4878 1
a4878 1
    if (current_cpu->trace_result_p)
d4886 1
a4886 1
    if (current_cpu->trace_result_p)
d4892 1
a4892 1
    if (current_cpu->trace_result_p)
d4921 1
a4921 1
    if (current_cpu->trace_result_p)
d4927 1
a4927 1
    if (current_cpu->trace_result_p)
d4954 1
a4954 1
    if (current_cpu->trace_result_p)
d4960 1
a4960 1
    if (current_cpu->trace_result_p)
d4984 1
a4984 1
    if (current_cpu->trace_result_p)
d5016 1
a5016 1
    if (current_cpu->trace_result_p)
d5023 1
a5023 1
    if (current_cpu->trace_result_p)
d5033 1
a5033 1
    if (current_cpu->trace_result_p)
d5042 1
a5042 1
    if (current_cpu->trace_result_p)
d5048 1
a5048 1
    if (current_cpu->trace_result_p)
d5055 1
a5055 1
    if (current_cpu->trace_result_p)
d5092 1
a5092 1
    if (current_cpu->trace_result_p)
d5099 1
a5099 1
    if (current_cpu->trace_result_p)
d5109 1
a5109 1
    if (current_cpu->trace_result_p)
d5118 1
a5118 1
    if (current_cpu->trace_result_p)
d5124 1
a5124 1
    if (current_cpu->trace_result_p)
d5131 1
a5131 1
    if (current_cpu->trace_result_p)
d5164 1
a5164 1
    if (current_cpu->trace_result_p)
d5171 1
a5171 1
    if (current_cpu->trace_result_p)
d5181 1
a5181 1
    if (current_cpu->trace_result_p)
d5189 1
a5189 1
    if (current_cpu->trace_result_p)
d5195 1
a5195 1
    if (current_cpu->trace_result_p)
d5232 1
a5232 1
    if (current_cpu->trace_result_p)
d5239 1
a5239 1
    if (current_cpu->trace_result_p)
d5249 1
a5249 1
    if (current_cpu->trace_result_p)
d5258 1
a5258 1
    if (current_cpu->trace_result_p)
d5264 1
a5264 1
    if (current_cpu->trace_result_p)
d5271 1
a5271 1
    if (current_cpu->trace_result_p)
d5308 1
a5308 1
    if (current_cpu->trace_result_p)
d5315 1
a5315 1
    if (current_cpu->trace_result_p)
d5325 1
a5325 1
    if (current_cpu->trace_result_p)
d5334 1
a5334 1
    if (current_cpu->trace_result_p)
d5340 1
a5340 1
    if (current_cpu->trace_result_p)
d5347 1
a5347 1
    if (current_cpu->trace_result_p)
d5380 1
a5380 1
    if (current_cpu->trace_result_p)
d5387 1
a5387 1
    if (current_cpu->trace_result_p)
d5397 1
a5397 1
    if (current_cpu->trace_result_p)
d5405 1
a5405 1
    if (current_cpu->trace_result_p)
d5411 1
a5411 1
    if (current_cpu->trace_result_p)
d5448 1
a5448 1
    if (current_cpu->trace_result_p)
d5455 1
a5455 1
    if (current_cpu->trace_result_p)
d5465 1
a5465 1
    if (current_cpu->trace_result_p)
d5474 1
a5474 1
    if (current_cpu->trace_result_p)
d5480 1
a5480 1
    if (current_cpu->trace_result_p)
d5487 1
a5487 1
    if (current_cpu->trace_result_p)
d5524 1
a5524 1
    if (current_cpu->trace_result_p)
d5531 1
a5531 1
    if (current_cpu->trace_result_p)
d5541 1
a5541 1
    if (current_cpu->trace_result_p)
d5550 1
a5550 1
    if (current_cpu->trace_result_p)
d5556 1
a5556 1
    if (current_cpu->trace_result_p)
d5563 1
a5563 1
    if (current_cpu->trace_result_p)
d5596 1
a5596 1
    if (current_cpu->trace_result_p)
d5603 1
a5603 1
    if (current_cpu->trace_result_p)
d5613 1
a5613 1
    if (current_cpu->trace_result_p)
d5621 1
a5621 1
    if (current_cpu->trace_result_p)
d5627 1
a5627 1
    if (current_cpu->trace_result_p)
d5664 1
a5664 1
    if (current_cpu->trace_result_p)
d5671 1
a5671 1
    if (current_cpu->trace_result_p)
d5681 1
a5681 1
    if (current_cpu->trace_result_p)
d5690 1
a5690 1
    if (current_cpu->trace_result_p)
d5696 1
a5696 1
    if (current_cpu->trace_result_p)
d5703 1
a5703 1
    if (current_cpu->trace_result_p)
d5740 1
a5740 1
    if (current_cpu->trace_result_p)
d5747 1
a5747 1
    if (current_cpu->trace_result_p)
d5757 1
a5757 1
    if (current_cpu->trace_result_p)
d5766 1
a5766 1
    if (current_cpu->trace_result_p)
d5772 1
a5772 1
    if (current_cpu->trace_result_p)
d5779 1
a5779 1
    if (current_cpu->trace_result_p)
d5812 1
a5812 1
    if (current_cpu->trace_result_p)
d5819 1
a5819 1
    if (current_cpu->trace_result_p)
d5829 1
a5829 1
    if (current_cpu->trace_result_p)
d5837 1
a5837 1
    if (current_cpu->trace_result_p)
d5843 1
a5843 1
    if (current_cpu->trace_result_p)
d5880 1
a5880 1
    if (current_cpu->trace_result_p)
d5887 1
a5887 1
    if (current_cpu->trace_result_p)
d5897 1
a5897 1
    if (current_cpu->trace_result_p)
d5906 1
a5906 1
    if (current_cpu->trace_result_p)
d5912 1
a5912 1
    if (current_cpu->trace_result_p)
d5919 1
a5919 1
    if (current_cpu->trace_result_p)
d5956 1
a5956 1
    if (current_cpu->trace_result_p)
d5963 1
a5963 1
    if (current_cpu->trace_result_p)
d5973 1
a5973 1
    if (current_cpu->trace_result_p)
d5982 1
a5982 1
    if (current_cpu->trace_result_p)
d5988 1
a5988 1
    if (current_cpu->trace_result_p)
d5995 1
a5995 1
    if (current_cpu->trace_result_p)
d6028 1
a6028 1
    if (current_cpu->trace_result_p)
d6035 1
a6035 1
    if (current_cpu->trace_result_p)
d6045 1
a6045 1
    if (current_cpu->trace_result_p)
d6053 1
a6053 1
    if (current_cpu->trace_result_p)
d6059 1
a6059 1
    if (current_cpu->trace_result_p)
d6096 1
a6096 1
    if (current_cpu->trace_result_p)
d6103 1
a6103 1
    if (current_cpu->trace_result_p)
d6113 1
a6113 1
    if (current_cpu->trace_result_p)
d6122 1
a6122 1
    if (current_cpu->trace_result_p)
d6128 1
a6128 1
    if (current_cpu->trace_result_p)
d6135 1
a6135 1
    if (current_cpu->trace_result_p)
d6172 1
a6172 1
    if (current_cpu->trace_result_p)
d6179 1
a6179 1
    if (current_cpu->trace_result_p)
d6189 1
a6189 1
    if (current_cpu->trace_result_p)
d6198 1
a6198 1
    if (current_cpu->trace_result_p)
d6204 1
a6204 1
    if (current_cpu->trace_result_p)
d6211 1
a6211 1
    if (current_cpu->trace_result_p)
d6244 1
a6244 1
    if (current_cpu->trace_result_p)
d6251 1
a6251 1
    if (current_cpu->trace_result_p)
d6261 1
a6261 1
    if (current_cpu->trace_result_p)
d6269 1
a6269 1
    if (current_cpu->trace_result_p)
d6275 1
a6275 1
    if (current_cpu->trace_result_p)
d6314 1
a6314 1
    if (current_cpu->trace_result_p)
d6321 1
a6321 1
    if (current_cpu->trace_result_p)
d6331 1
a6331 1
    if (current_cpu->trace_result_p)
d6342 1
a6342 1
    if (current_cpu->trace_result_p)
d6348 1
a6348 1
    if (current_cpu->trace_result_p)
d6355 1
a6355 1
    if (current_cpu->trace_result_p)
d6361 1
a6361 1
    if (current_cpu->trace_result_p)
d6400 1
a6400 1
    if (current_cpu->trace_result_p)
d6407 1
a6407 1
    if (current_cpu->trace_result_p)
d6417 1
a6417 1
    if (current_cpu->trace_result_p)
d6428 1
a6428 1
    if (current_cpu->trace_result_p)
d6434 1
a6434 1
    if (current_cpu->trace_result_p)
d6441 1
a6441 1
    if (current_cpu->trace_result_p)
d6447 1
a6447 1
    if (current_cpu->trace_result_p)
d6481 1
a6481 1
    if (current_cpu->trace_result_p)
d6488 1
a6488 1
    if (current_cpu->trace_result_p)
d6502 1
a6502 1
    if (current_cpu->trace_result_p)
d6508 1
a6508 1
    if (current_cpu->trace_result_p)
d6515 1
a6515 1
    if (current_cpu->trace_result_p)
d6521 1
a6521 1
    if (current_cpu->trace_result_p)
d6529 1
a6529 1
    if (current_cpu->trace_result_p)
d6566 1
a6566 1
    if (current_cpu->trace_result_p)
d6573 1
a6573 1
    if (current_cpu->trace_result_p)
d6583 1
a6583 1
    if (current_cpu->trace_result_p)
d6594 1
a6594 1
    if (current_cpu->trace_result_p)
d6600 1
a6600 1
    if (current_cpu->trace_result_p)
d6607 1
a6607 1
    if (current_cpu->trace_result_p)
d6613 1
a6613 1
    if (current_cpu->trace_result_p)
d6652 1
a6652 1
    if (current_cpu->trace_result_p)
d6659 1
a6659 1
    if (current_cpu->trace_result_p)
d6669 1
a6669 1
    if (current_cpu->trace_result_p)
d6680 1
a6680 1
    if (current_cpu->trace_result_p)
d6686 1
a6686 1
    if (current_cpu->trace_result_p)
d6693 1
a6693 1
    if (current_cpu->trace_result_p)
d6699 1
a6699 1
    if (current_cpu->trace_result_p)
d6733 1
a6733 1
    if (current_cpu->trace_result_p)
d6740 1
a6740 1
    if (current_cpu->trace_result_p)
d6754 1
a6754 1
    if (current_cpu->trace_result_p)
d6760 1
a6760 1
    if (current_cpu->trace_result_p)
d6767 1
a6767 1
    if (current_cpu->trace_result_p)
d6773 1
a6773 1
    if (current_cpu->trace_result_p)
d6781 1
a6781 1
    if (current_cpu->trace_result_p)
d6818 1
a6818 1
    if (current_cpu->trace_result_p)
d6825 1
a6825 1
    if (current_cpu->trace_result_p)
d6835 1
a6835 1
    if (current_cpu->trace_result_p)
d6846 1
a6846 1
    if (current_cpu->trace_result_p)
d6852 1
a6852 1
    if (current_cpu->trace_result_p)
d6859 1
a6859 1
    if (current_cpu->trace_result_p)
d6865 1
a6865 1
    if (current_cpu->trace_result_p)
d6904 1
a6904 1
    if (current_cpu->trace_result_p)
d6911 1
a6911 1
    if (current_cpu->trace_result_p)
d6921 1
a6921 1
    if (current_cpu->trace_result_p)
d6932 1
a6932 1
    if (current_cpu->trace_result_p)
d6938 1
a6938 1
    if (current_cpu->trace_result_p)
d6945 1
a6945 1
    if (current_cpu->trace_result_p)
d6951 1
a6951 1
    if (current_cpu->trace_result_p)
d6985 1
a6985 1
    if (current_cpu->trace_result_p)
d6992 1
a6992 1
    if (current_cpu->trace_result_p)
d7006 1
a7006 1
    if (current_cpu->trace_result_p)
d7012 1
a7012 1
    if (current_cpu->trace_result_p)
d7019 1
a7019 1
    if (current_cpu->trace_result_p)
d7025 1
a7025 1
    if (current_cpu->trace_result_p)
d7033 1
a7033 1
    if (current_cpu->trace_result_p)
d7070 1
a7070 1
    if (current_cpu->trace_result_p)
d7077 1
a7077 1
    if (current_cpu->trace_result_p)
d7087 1
a7087 1
    if (current_cpu->trace_result_p)
d7098 1
a7098 1
    if (current_cpu->trace_result_p)
d7104 1
a7104 1
    if (current_cpu->trace_result_p)
d7111 1
a7111 1
    if (current_cpu->trace_result_p)
d7117 1
a7117 1
    if (current_cpu->trace_result_p)
d7156 1
a7156 1
    if (current_cpu->trace_result_p)
d7163 1
a7163 1
    if (current_cpu->trace_result_p)
d7173 1
a7173 1
    if (current_cpu->trace_result_p)
d7184 1
a7184 1
    if (current_cpu->trace_result_p)
d7190 1
a7190 1
    if (current_cpu->trace_result_p)
d7197 1
a7197 1
    if (current_cpu->trace_result_p)
d7203 1
a7203 1
    if (current_cpu->trace_result_p)
d7237 1
a7237 1
    if (current_cpu->trace_result_p)
d7244 1
a7244 1
    if (current_cpu->trace_result_p)
d7258 1
a7258 1
    if (current_cpu->trace_result_p)
d7264 1
a7264 1
    if (current_cpu->trace_result_p)
d7271 1
a7271 1
    if (current_cpu->trace_result_p)
d7277 1
a7277 1
    if (current_cpu->trace_result_p)
d7285 1
a7285 1
    if (current_cpu->trace_result_p)
d7322 1
a7322 1
    if (current_cpu->trace_result_p)
d7329 1
a7329 1
    if (current_cpu->trace_result_p)
d7339 1
a7339 1
    if (current_cpu->trace_result_p)
d7350 1
a7350 1
    if (current_cpu->trace_result_p)
d7356 1
a7356 1
    if (current_cpu->trace_result_p)
d7363 1
a7363 1
    if (current_cpu->trace_result_p)
d7369 1
a7369 1
    if (current_cpu->trace_result_p)
d7408 1
a7408 1
    if (current_cpu->trace_result_p)
d7415 1
a7415 1
    if (current_cpu->trace_result_p)
d7425 1
a7425 1
    if (current_cpu->trace_result_p)
d7436 1
a7436 1
    if (current_cpu->trace_result_p)
d7442 1
a7442 1
    if (current_cpu->trace_result_p)
d7449 1
a7449 1
    if (current_cpu->trace_result_p)
d7455 1
a7455 1
    if (current_cpu->trace_result_p)
d7489 1
a7489 1
    if (current_cpu->trace_result_p)
d7496 1
a7496 1
    if (current_cpu->trace_result_p)
d7510 1
a7510 1
    if (current_cpu->trace_result_p)
d7516 1
a7516 1
    if (current_cpu->trace_result_p)
d7523 1
a7523 1
    if (current_cpu->trace_result_p)
d7529 1
a7529 1
    if (current_cpu->trace_result_p)
d7537 1
a7537 1
    if (current_cpu->trace_result_p)
d7574 1
a7574 1
    if (current_cpu->trace_result_p)
d7581 1
a7581 1
    if (current_cpu->trace_result_p)
d7591 1
a7591 1
    if (current_cpu->trace_result_p)
d7602 1
a7602 1
    if (current_cpu->trace_result_p)
d7608 1
a7608 1
    if (current_cpu->trace_result_p)
d7615 1
a7615 1
    if (current_cpu->trace_result_p)
d7621 1
a7621 1
    if (current_cpu->trace_result_p)
d7660 1
a7660 1
    if (current_cpu->trace_result_p)
d7667 1
a7667 1
    if (current_cpu->trace_result_p)
d7677 1
a7677 1
    if (current_cpu->trace_result_p)
d7688 1
a7688 1
    if (current_cpu->trace_result_p)
d7694 1
a7694 1
    if (current_cpu->trace_result_p)
d7701 1
a7701 1
    if (current_cpu->trace_result_p)
d7707 1
a7707 1
    if (current_cpu->trace_result_p)
d7741 1
a7741 1
    if (current_cpu->trace_result_p)
d7748 1
a7748 1
    if (current_cpu->trace_result_p)
d7762 1
a7762 1
    if (current_cpu->trace_result_p)
d7768 1
a7768 1
    if (current_cpu->trace_result_p)
d7775 1
a7775 1
    if (current_cpu->trace_result_p)
d7781 1
a7781 1
    if (current_cpu->trace_result_p)
d7789 1
a7789 1
    if (current_cpu->trace_result_p)
d7823 1
a7823 1
    if (current_cpu->trace_result_p)
d7832 1
a7832 1
    if (current_cpu->trace_result_p)
d7838 1
a7838 1
    if (current_cpu->trace_result_p)
d7845 1
a7845 1
    if (current_cpu->trace_result_p)
d7879 1
a7879 1
    if (current_cpu->trace_result_p)
d7888 1
a7888 1
    if (current_cpu->trace_result_p)
d7894 1
a7894 1
    if (current_cpu->trace_result_p)
d7901 1
a7901 1
    if (current_cpu->trace_result_p)
d7936 1
a7936 1
    if (current_cpu->trace_result_p)
d7942 1
a7942 1
    if (current_cpu->trace_result_p)
d7949 1
a7949 1
    if (current_cpu->trace_result_p)
d7982 1
a7982 1
    if (current_cpu->trace_result_p)
d7991 1
a7991 1
    if (current_cpu->trace_result_p)
d7997 1
a7997 1
    if (current_cpu->trace_result_p)
d8004 1
a8004 1
    if (current_cpu->trace_result_p)
d8038 1
a8038 1
    if (current_cpu->trace_result_p)
d8047 1
a8047 1
    if (current_cpu->trace_result_p)
d8053 1
a8053 1
    if (current_cpu->trace_result_p)
d8060 1
a8060 1
    if (current_cpu->trace_result_p)
d8095 1
a8095 1
    if (current_cpu->trace_result_p)
d8101 1
a8101 1
    if (current_cpu->trace_result_p)
d8108 1
a8108 1
    if (current_cpu->trace_result_p)
d8137 1
a8137 1
    if (current_cpu->trace_result_p)
d8148 1
a8148 1
    if (current_cpu->trace_result_p)
d8154 1
a8154 1
    if (current_cpu->trace_result_p)
d8161 1
a8161 1
    if (current_cpu->trace_result_p)
d8167 1
a8167 1
    if (current_cpu->trace_result_p)
d8197 1
a8197 1
    if (current_cpu->trace_result_p)
d8208 1
a8208 1
    if (current_cpu->trace_result_p)
d8214 1
a8214 1
    if (current_cpu->trace_result_p)
d8221 1
a8221 1
    if (current_cpu->trace_result_p)
d8227 1
a8227 1
    if (current_cpu->trace_result_p)
d8257 1
a8257 1
    if (current_cpu->trace_result_p)
d8263 1
a8263 1
    if (current_cpu->trace_result_p)
d8270 1
a8270 1
    if (current_cpu->trace_result_p)
d8276 1
a8276 1
    if (current_cpu->trace_result_p)
d8304 1
a8304 1
    if (current_cpu->trace_result_p)
d8315 1
a8315 1
    if (current_cpu->trace_result_p)
d8321 1
a8321 1
    if (current_cpu->trace_result_p)
d8328 1
a8328 1
    if (current_cpu->trace_result_p)
d8334 1
a8334 1
    if (current_cpu->trace_result_p)
d8364 1
a8364 1
    if (current_cpu->trace_result_p)
d8375 1
a8375 1
    if (current_cpu->trace_result_p)
d8381 1
a8381 1
    if (current_cpu->trace_result_p)
d8388 1
a8388 1
    if (current_cpu->trace_result_p)
d8394 1
a8394 1
    if (current_cpu->trace_result_p)
d8424 1
a8424 1
    if (current_cpu->trace_result_p)
d8430 1
a8430 1
    if (current_cpu->trace_result_p)
d8437 1
a8437 1
    if (current_cpu->trace_result_p)
d8443 1
a8443 1
    if (current_cpu->trace_result_p)
d8472 1
a8472 1
    if (current_cpu->trace_result_p)
d8483 1
a8483 1
    if (current_cpu->trace_result_p)
d8494 1
a8494 1
    if (current_cpu->trace_result_p)
d8505 1
a8505 1
    if (current_cpu->trace_result_p)
d8516 1
a8516 1
    if (current_cpu->trace_result_p)
d8527 1
a8527 1
    if (current_cpu->trace_result_p)
d8538 1
a8538 1
    if (current_cpu->trace_result_p)
d8549 1
a8549 1
    if (current_cpu->trace_result_p)
d8560 1
a8560 1
    if (current_cpu->trace_result_p)
d8571 1
a8571 1
    if (current_cpu->trace_result_p)
d8582 1
a8582 1
    if (current_cpu->trace_result_p)
d8593 1
a8593 1
    if (current_cpu->trace_result_p)
d8604 1
a8604 1
    if (current_cpu->trace_result_p)
d8615 1
a8615 1
    if (current_cpu->trace_result_p)
d8626 1
a8626 1
    if (current_cpu->trace_result_p)
d8637 1
a8637 1
    if (current_cpu->trace_result_p)
d8669 1
a8669 1
    if (current_cpu->trace_result_p)
d8680 1
a8680 1
    if (current_cpu->trace_result_p)
d8691 1
a8691 1
    if (current_cpu->trace_result_p)
d8702 1
a8702 1
    if (current_cpu->trace_result_p)
d8713 1
a8713 1
    if (current_cpu->trace_result_p)
d8724 1
a8724 1
    if (current_cpu->trace_result_p)
d8735 1
a8735 1
    if (current_cpu->trace_result_p)
d8746 1
a8746 1
    if (current_cpu->trace_result_p)
d8757 1
a8757 1
    if (current_cpu->trace_result_p)
d8768 1
a8768 1
    if (current_cpu->trace_result_p)
d8779 1
a8779 1
    if (current_cpu->trace_result_p)
d8790 1
a8790 1
    if (current_cpu->trace_result_p)
d8801 1
a8801 1
    if (current_cpu->trace_result_p)
d8812 1
a8812 1
    if (current_cpu->trace_result_p)
d8823 1
a8823 1
    if (current_cpu->trace_result_p)
d8834 1
a8834 1
    if (current_cpu->trace_result_p)
d8843 1
a8843 1
    if (current_cpu->trace_result_p)
d8873 1
a8873 1
    if (current_cpu->trace_result_p)
d8884 1
a8884 1
    if (current_cpu->trace_result_p)
d8895 1
a8895 1
    if (current_cpu->trace_result_p)
d8906 1
a8906 1
    if (current_cpu->trace_result_p)
d8917 1
a8917 1
    if (current_cpu->trace_result_p)
d8928 1
a8928 1
    if (current_cpu->trace_result_p)
d8939 1
a8939 1
    if (current_cpu->trace_result_p)
d8950 1
a8950 1
    if (current_cpu->trace_result_p)
d8961 1
a8961 1
    if (current_cpu->trace_result_p)
d8972 1
a8972 1
    if (current_cpu->trace_result_p)
d8983 1
a8983 1
    if (current_cpu->trace_result_p)
d8994 1
a8994 1
    if (current_cpu->trace_result_p)
d9005 1
a9005 1
    if (current_cpu->trace_result_p)
d9016 1
a9016 1
    if (current_cpu->trace_result_p)
d9027 1
a9027 1
    if (current_cpu->trace_result_p)
d9038 1
a9038 1
    if (current_cpu->trace_result_p)
d9070 1
a9070 1
    if (current_cpu->trace_result_p)
d9081 1
a9081 1
    if (current_cpu->trace_result_p)
d9092 1
a9092 1
    if (current_cpu->trace_result_p)
d9103 1
a9103 1
    if (current_cpu->trace_result_p)
d9114 1
a9114 1
    if (current_cpu->trace_result_p)
d9125 1
a9125 1
    if (current_cpu->trace_result_p)
d9136 1
a9136 1
    if (current_cpu->trace_result_p)
d9147 1
a9147 1
    if (current_cpu->trace_result_p)
d9158 1
a9158 1
    if (current_cpu->trace_result_p)
d9169 1
a9169 1
    if (current_cpu->trace_result_p)
d9180 1
a9180 1
    if (current_cpu->trace_result_p)
d9191 1
a9191 1
    if (current_cpu->trace_result_p)
d9202 1
a9202 1
    if (current_cpu->trace_result_p)
d9213 1
a9213 1
    if (current_cpu->trace_result_p)
d9224 1
a9224 1
    if (current_cpu->trace_result_p)
d9235 1
a9235 1
    if (current_cpu->trace_result_p)
d9243 1
a9243 1
    if (current_cpu->trace_result_p)
d9272 1
a9272 1
    if (current_cpu->trace_result_p)
d9283 1
a9283 1
    if (current_cpu->trace_result_p)
d9294 1
a9294 1
    if (current_cpu->trace_result_p)
d9305 1
a9305 1
    if (current_cpu->trace_result_p)
d9316 1
a9316 1
    if (current_cpu->trace_result_p)
d9327 1
a9327 1
    if (current_cpu->trace_result_p)
d9338 1
a9338 1
    if (current_cpu->trace_result_p)
d9349 1
a9349 1
    if (current_cpu->trace_result_p)
d9360 1
a9360 1
    if (current_cpu->trace_result_p)
d9371 1
a9371 1
    if (current_cpu->trace_result_p)
d9382 1
a9382 1
    if (current_cpu->trace_result_p)
d9393 1
a9393 1
    if (current_cpu->trace_result_p)
d9404 1
a9404 1
    if (current_cpu->trace_result_p)
d9415 1
a9415 1
    if (current_cpu->trace_result_p)
d9426 1
a9426 1
    if (current_cpu->trace_result_p)
d9437 1
a9437 1
    if (current_cpu->trace_result_p)
d9469 1
a9469 1
    if (current_cpu->trace_result_p)
d9480 1
a9480 1
    if (current_cpu->trace_result_p)
d9491 1
a9491 1
    if (current_cpu->trace_result_p)
d9502 1
a9502 1
    if (current_cpu->trace_result_p)
d9513 1
a9513 1
    if (current_cpu->trace_result_p)
d9524 1
a9524 1
    if (current_cpu->trace_result_p)
d9535 1
a9535 1
    if (current_cpu->trace_result_p)
d9546 1
a9546 1
    if (current_cpu->trace_result_p)
d9557 1
a9557 1
    if (current_cpu->trace_result_p)
d9568 1
a9568 1
    if (current_cpu->trace_result_p)
d9579 1
a9579 1
    if (current_cpu->trace_result_p)
d9590 1
a9590 1
    if (current_cpu->trace_result_p)
d9601 1
a9601 1
    if (current_cpu->trace_result_p)
d9612 1
a9612 1
    if (current_cpu->trace_result_p)
d9623 1
a9623 1
    if (current_cpu->trace_result_p)
d9634 1
a9634 1
    if (current_cpu->trace_result_p)
d9643 1
a9643 1
    if (current_cpu->trace_result_p)
d9673 1
a9673 1
    if (current_cpu->trace_result_p)
d9684 1
a9684 1
    if (current_cpu->trace_result_p)
d9695 1
a9695 1
    if (current_cpu->trace_result_p)
d9706 1
a9706 1
    if (current_cpu->trace_result_p)
d9717 1
a9717 1
    if (current_cpu->trace_result_p)
d9728 1
a9728 1
    if (current_cpu->trace_result_p)
d9739 1
a9739 1
    if (current_cpu->trace_result_p)
d9750 1
a9750 1
    if (current_cpu->trace_result_p)
d9761 1
a9761 1
    if (current_cpu->trace_result_p)
d9772 1
a9772 1
    if (current_cpu->trace_result_p)
d9783 1
a9783 1
    if (current_cpu->trace_result_p)
d9794 1
a9794 1
    if (current_cpu->trace_result_p)
d9805 1
a9805 1
    if (current_cpu->trace_result_p)
d9816 1
a9816 1
    if (current_cpu->trace_result_p)
d9827 1
a9827 1
    if (current_cpu->trace_result_p)
d9838 1
a9838 1
    if (current_cpu->trace_result_p)
d9870 1
a9870 1
    if (current_cpu->trace_result_p)
d9881 1
a9881 1
    if (current_cpu->trace_result_p)
d9892 1
a9892 1
    if (current_cpu->trace_result_p)
d9903 1
a9903 1
    if (current_cpu->trace_result_p)
d9914 1
a9914 1
    if (current_cpu->trace_result_p)
d9925 1
a9925 1
    if (current_cpu->trace_result_p)
d9936 1
a9936 1
    if (current_cpu->trace_result_p)
d9947 1
a9947 1
    if (current_cpu->trace_result_p)
d9958 1
a9958 1
    if (current_cpu->trace_result_p)
d9969 1
a9969 1
    if (current_cpu->trace_result_p)
d9980 1
a9980 1
    if (current_cpu->trace_result_p)
d9991 1
a9991 1
    if (current_cpu->trace_result_p)
d10002 1
a10002 1
    if (current_cpu->trace_result_p)
d10013 1
a10013 1
    if (current_cpu->trace_result_p)
d10024 1
a10024 1
    if (current_cpu->trace_result_p)
d10035 1
a10035 1
    if (current_cpu->trace_result_p)
d10043 1
a10043 1
    if (current_cpu->trace_result_p)
d10073 1
a10073 1
    if (current_cpu->trace_result_p)
d10084 1
a10084 1
    if (current_cpu->trace_result_p)
d10095 1
a10095 1
    if (current_cpu->trace_result_p)
d10106 1
a10106 1
    if (current_cpu->trace_result_p)
d10117 1
a10117 1
    if (current_cpu->trace_result_p)
d10128 1
a10128 1
    if (current_cpu->trace_result_p)
d10139 1
a10139 1
    if (current_cpu->trace_result_p)
d10150 1
a10150 1
    if (current_cpu->trace_result_p)
d10161 1
a10161 1
    if (current_cpu->trace_result_p)
d10172 1
a10172 1
    if (current_cpu->trace_result_p)
d10183 1
a10183 1
    if (current_cpu->trace_result_p)
d10194 1
a10194 1
    if (current_cpu->trace_result_p)
d10205 1
a10205 1
    if (current_cpu->trace_result_p)
d10216 1
a10216 1
    if (current_cpu->trace_result_p)
d10227 1
a10227 1
    if (current_cpu->trace_result_p)
d10238 1
a10238 1
    if (current_cpu->trace_result_p)
d10270 1
a10270 1
    if (current_cpu->trace_result_p)
d10281 1
a10281 1
    if (current_cpu->trace_result_p)
d10292 1
a10292 1
    if (current_cpu->trace_result_p)
d10303 1
a10303 1
    if (current_cpu->trace_result_p)
d10314 1
a10314 1
    if (current_cpu->trace_result_p)
d10325 1
a10325 1
    if (current_cpu->trace_result_p)
d10336 1
a10336 1
    if (current_cpu->trace_result_p)
d10347 1
a10347 1
    if (current_cpu->trace_result_p)
d10358 1
a10358 1
    if (current_cpu->trace_result_p)
d10369 1
a10369 1
    if (current_cpu->trace_result_p)
d10380 1
a10380 1
    if (current_cpu->trace_result_p)
d10391 1
a10391 1
    if (current_cpu->trace_result_p)
d10402 1
a10402 1
    if (current_cpu->trace_result_p)
d10413 1
a10413 1
    if (current_cpu->trace_result_p)
d10424 1
a10424 1
    if (current_cpu->trace_result_p)
d10435 1
a10435 1
    if (current_cpu->trace_result_p)
d10443 1
a10443 1
    if (current_cpu->trace_result_p)
d10473 1
a10473 1
    if (current_cpu->trace_result_p)
d10484 1
a10484 1
    if (current_cpu->trace_result_p)
d10495 1
a10495 1
    if (current_cpu->trace_result_p)
d10506 1
a10506 1
    if (current_cpu->trace_result_p)
d10517 1
a10517 1
    if (current_cpu->trace_result_p)
d10528 1
a10528 1
    if (current_cpu->trace_result_p)
d10539 1
a10539 1
    if (current_cpu->trace_result_p)
d10550 1
a10550 1
    if (current_cpu->trace_result_p)
d10561 1
a10561 1
    if (current_cpu->trace_result_p)
d10572 1
a10572 1
    if (current_cpu->trace_result_p)
d10583 1
a10583 1
    if (current_cpu->trace_result_p)
d10594 1
a10594 1
    if (current_cpu->trace_result_p)
d10605 1
a10605 1
    if (current_cpu->trace_result_p)
d10616 1
a10616 1
    if (current_cpu->trace_result_p)
d10627 1
a10627 1
    if (current_cpu->trace_result_p)
d10638 1
a10638 1
    if (current_cpu->trace_result_p)
d10670 1
a10670 1
    if (current_cpu->trace_result_p)
d10681 1
a10681 1
    if (current_cpu->trace_result_p)
d10692 1
a10692 1
    if (current_cpu->trace_result_p)
d10703 1
a10703 1
    if (current_cpu->trace_result_p)
d10714 1
a10714 1
    if (current_cpu->trace_result_p)
d10725 1
a10725 1
    if (current_cpu->trace_result_p)
d10736 1
a10736 1
    if (current_cpu->trace_result_p)
d10747 1
a10747 1
    if (current_cpu->trace_result_p)
d10758 1
a10758 1
    if (current_cpu->trace_result_p)
d10769 1
a10769 1
    if (current_cpu->trace_result_p)
d10780 1
a10780 1
    if (current_cpu->trace_result_p)
d10791 1
a10791 1
    if (current_cpu->trace_result_p)
d10802 1
a10802 1
    if (current_cpu->trace_result_p)
d10813 1
a10813 1
    if (current_cpu->trace_result_p)
d10824 1
a10824 1
    if (current_cpu->trace_result_p)
d10835 1
a10835 1
    if (current_cpu->trace_result_p)
d10843 1
a10843 1
    if (current_cpu->trace_result_p)
d10872 1
a10872 1
    if (current_cpu->trace_result_p)
d10883 1
a10883 1
    if (current_cpu->trace_result_p)
d10894 1
a10894 1
    if (current_cpu->trace_result_p)
d10905 1
a10905 1
    if (current_cpu->trace_result_p)
d10916 1
a10916 1
    if (current_cpu->trace_result_p)
d10927 1
a10927 1
    if (current_cpu->trace_result_p)
d10938 1
a10938 1
    if (current_cpu->trace_result_p)
d10949 1
a10949 1
    if (current_cpu->trace_result_p)
d10960 1
a10960 1
    if (current_cpu->trace_result_p)
d10971 1
a10971 1
    if (current_cpu->trace_result_p)
d10982 1
a10982 1
    if (current_cpu->trace_result_p)
d10993 1
a10993 1
    if (current_cpu->trace_result_p)
d11004 1
a11004 1
    if (current_cpu->trace_result_p)
d11015 1
a11015 1
    if (current_cpu->trace_result_p)
d11026 1
a11026 1
    if (current_cpu->trace_result_p)
d11037 1
a11037 1
    if (current_cpu->trace_result_p)
d11069 1
a11069 1
    if (current_cpu->trace_result_p)
d11080 1
a11080 1
    if (current_cpu->trace_result_p)
d11091 1
a11091 1
    if (current_cpu->trace_result_p)
d11102 1
a11102 1
    if (current_cpu->trace_result_p)
d11113 1
a11113 1
    if (current_cpu->trace_result_p)
d11124 1
a11124 1
    if (current_cpu->trace_result_p)
d11135 1
a11135 1
    if (current_cpu->trace_result_p)
d11146 1
a11146 1
    if (current_cpu->trace_result_p)
d11157 1
a11157 1
    if (current_cpu->trace_result_p)
d11168 1
a11168 1
    if (current_cpu->trace_result_p)
d11179 1
a11179 1
    if (current_cpu->trace_result_p)
d11190 1
a11190 1
    if (current_cpu->trace_result_p)
d11201 1
a11201 1
    if (current_cpu->trace_result_p)
d11212 1
a11212 1
    if (current_cpu->trace_result_p)
d11223 1
a11223 1
    if (current_cpu->trace_result_p)
d11234 1
a11234 1
    if (current_cpu->trace_result_p)
d11243 1
a11243 1
    if (current_cpu->trace_result_p)
d11272 1
a11272 1
    if (current_cpu->trace_result_p)
d11283 1
a11283 1
    if (current_cpu->trace_result_p)
d11294 1
a11294 1
    if (current_cpu->trace_result_p)
d11305 1
a11305 1
    if (current_cpu->trace_result_p)
d11316 1
a11316 1
    if (current_cpu->trace_result_p)
d11327 1
a11327 1
    if (current_cpu->trace_result_p)
d11338 1
a11338 1
    if (current_cpu->trace_result_p)
d11349 1
a11349 1
    if (current_cpu->trace_result_p)
d11360 1
a11360 1
    if (current_cpu->trace_result_p)
d11371 1
a11371 1
    if (current_cpu->trace_result_p)
d11382 1
a11382 1
    if (current_cpu->trace_result_p)
d11393 1
a11393 1
    if (current_cpu->trace_result_p)
d11404 1
a11404 1
    if (current_cpu->trace_result_p)
d11415 1
a11415 1
    if (current_cpu->trace_result_p)
d11426 1
a11426 1
    if (current_cpu->trace_result_p)
d11437 1
a11437 1
    if (current_cpu->trace_result_p)
d11469 1
a11469 1
    if (current_cpu->trace_result_p)
d11480 1
a11480 1
    if (current_cpu->trace_result_p)
d11491 1
a11491 1
    if (current_cpu->trace_result_p)
d11502 1
a11502 1
    if (current_cpu->trace_result_p)
d11513 1
a11513 1
    if (current_cpu->trace_result_p)
d11524 1
a11524 1
    if (current_cpu->trace_result_p)
d11535 1
a11535 1
    if (current_cpu->trace_result_p)
d11546 1
a11546 1
    if (current_cpu->trace_result_p)
d11557 1
a11557 1
    if (current_cpu->trace_result_p)
d11568 1
a11568 1
    if (current_cpu->trace_result_p)
d11579 1
a11579 1
    if (current_cpu->trace_result_p)
d11590 1
a11590 1
    if (current_cpu->trace_result_p)
d11601 1
a11601 1
    if (current_cpu->trace_result_p)
d11612 1
a11612 1
    if (current_cpu->trace_result_p)
d11623 1
a11623 1
    if (current_cpu->trace_result_p)
d11634 1
a11634 1
    if (current_cpu->trace_result_p)
d11643 1
a11643 1
    if (current_cpu->trace_result_p)
d11667 1
a11667 1
    if (current_cpu->trace_result_p)
d11690 1
a11690 1
    if (current_cpu->trace_result_p)
d11713 1
a11713 1
    if (current_cpu->trace_result_p)
d11736 1
a11736 1
    if (current_cpu->trace_result_p)
@


1.2
log
@* regen after cgen trace improvements
@
text
@d157 1
a157 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d165 1
a165 1
      current_cpu->trace_stream << "rn" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
d202 1
a202 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d210 1
a210 1
      current_cpu->trace_stream << "rn" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
d247 1
a247 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d255 1
a255 1
      current_cpu->trace_stream << "rn" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
d292 1
a292 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d300 1
a300 1
      current_cpu->trace_stream << "rn" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
d337 1
a337 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d345 1
a345 1
      current_cpu->trace_stream << "rn" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
d382 1
a382 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d390 1
a390 1
      current_cpu->trace_stream << "rn" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
d427 1
a427 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d435 1
a435 1
      current_cpu->trace_stream << "rn" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
d472 1
a472 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d480 1
a480 1
      current_cpu->trace_stream << "rn" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
d517 1
a517 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d557 1
a557 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d597 1
a597 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d637 1
a637 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d677 1
a677 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d685 1
a685 1
      current_cpu->trace_stream << "rn" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
d722 1
a722 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d730 1
a730 1
      current_cpu->trace_stream << "rn" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
d767 1
a767 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d775 1
a775 1
      current_cpu->trace_stream << "rn" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
d812 1
a812 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d820 1
a820 1
      current_cpu->trace_stream << "rn" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
d857 1
a857 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d865 1
a865 1
      current_cpu->trace_stream << "rn" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
d902 1
a902 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d910 1
a910 1
      current_cpu->trace_stream << "rn" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
d947 1
a947 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d955 1
a955 1
      current_cpu->trace_stream << "rn" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
d992 1
a992 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d1000 1
a1000 1
      current_cpu->trace_stream << "rn" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
d1037 1
a1037 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d1045 1
a1045 1
      current_cpu->trace_stream << "rn" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
d1082 1
a1082 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d1090 1
a1090 1
      current_cpu->trace_stream << "rn" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
d1127 1
a1127 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d1135 1
a1135 1
      current_cpu->trace_stream << "rn" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
d1172 1
a1172 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d1180 1
a1180 1
      current_cpu->trace_stream << "rn" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
d1217 1
a1217 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d1257 1
a1257 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d1297 1
a1297 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d1337 1
a1337 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d1377 1
a1377 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d1385 1
a1385 1
      current_cpu->trace_stream << "rn" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
d1422 1
a1422 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d1430 1
a1430 1
      current_cpu->trace_stream << "rn" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
d1467 1
a1467 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d1475 1
a1475 1
      current_cpu->trace_stream << "rn" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
d1512 1
a1512 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d1520 1
a1520 1
      current_cpu->trace_stream << "rn" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
d1556 1
a1556 1
      current_cpu->trace_stream << "rn" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
d1592 1
a1592 1
      current_cpu->trace_stream << "rn" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
d1628 1
a1628 1
      current_cpu->trace_stream << "rn" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
d1664 1
a1664 1
      current_cpu->trace_stream << "rn" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
d1700 1
a1700 1
      current_cpu->trace_stream << "rn" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
d1736 1
a1736 1
      current_cpu->trace_stream << "rn" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
d1772 1
a1772 1
      current_cpu->trace_stream << "rn" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
d1808 1
a1808 1
      current_cpu->trace_stream << "rn" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
d1968 1
a1968 1
      current_cpu->trace_stream << "rn" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
d2004 1
a2004 1
      current_cpu->trace_stream << "rn" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
d2040 1
a2040 1
      current_cpu->trace_stream << "rn" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
d2076 1
a2076 1
      current_cpu->trace_stream << "rn" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
d2112 1
a2112 1
      current_cpu->trace_stream << "rn" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
d2148 1
a2148 1
      current_cpu->trace_stream << "rn" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
d2184 1
a2184 1
      current_cpu->trace_stream << "rn" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
d2220 1
a2220 1
      current_cpu->trace_stream << "rn" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
d2256 1
a2256 1
      current_cpu->trace_stream << "rn" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
d2292 1
a2292 1
      current_cpu->trace_stream << "rn" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
d2328 1
a2328 1
      current_cpu->trace_stream << "rn" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
d2364 1
a2364 1
      current_cpu->trace_stream << "rn" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
d2524 1
a2524 1
      current_cpu->trace_stream << "rn" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
d2560 1
a2560 1
      current_cpu->trace_stream << "rn" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
d2596 1
a2596 1
      current_cpu->trace_stream << "rn" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
d2632 1
a2632 1
      current_cpu->trace_stream << "rn" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
d2792 1
a2792 1
      current_cpu->trace_stream << "rn" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
d2828 1
a2828 1
      current_cpu->trace_stream << "rn" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
d2864 1
a2864 1
      current_cpu->trace_stream << "rn" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
d2900 1
a2900 1
      current_cpu->trace_stream << "rn" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
d2936 1
a2936 1
      current_cpu->trace_stream << "rn" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
d2972 1
a2972 1
      current_cpu->trace_stream << "rn" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
d3008 1
a3008 1
      current_cpu->trace_stream << "rn" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
d3044 1
a3044 1
      current_cpu->trace_stream << "rn" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
d3081 1
a3081 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d3121 1
a3121 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d3161 1
a3161 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d3201 1
a3201 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d3241 1
a3241 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d3249 1
a3249 1
      current_cpu->trace_stream << "rn" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
d3286 1
a3286 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d3294 1
a3294 1
      current_cpu->trace_stream << "rn" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
d3331 1
a3331 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d3339 1
a3339 1
      current_cpu->trace_stream << "rn" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
d3376 1
a3376 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d3384 1
a3384 1
      current_cpu->trace_stream << "rn" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
d3421 1
a3421 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d3429 1
a3429 1
      current_cpu->trace_stream << "rn" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
d3466 1
a3466 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d3474 1
a3474 1
      current_cpu->trace_stream << "rn" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
d3511 1
a3511 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d3519 1
a3519 1
      current_cpu->trace_stream << "rn" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
d3556 1
a3556 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d3564 1
a3564 1
      current_cpu->trace_stream << "rn" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
d3601 1
a3601 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d3641 1
a3641 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d3681 1
a3681 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d3721 1
a3721 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d3761 1
a3761 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d3769 1
a3769 1
      current_cpu->trace_stream << "rn" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
d3806 1
a3806 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d3814 1
a3814 1
      current_cpu->trace_stream << "rn" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
d3851 1
a3851 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d3859 1
a3859 1
      current_cpu->trace_stream << "rn" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
d3896 1
a3896 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d3904 1
a3904 1
      current_cpu->trace_stream << "rn" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
d3941 1
a3941 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d3949 1
a3949 1
      current_cpu->trace_stream << "rn" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
d3986 1
a3986 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d3994 1
a3994 1
      current_cpu->trace_stream << "rn" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
d4031 1
a4031 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d4039 1
a4039 1
      current_cpu->trace_stream << "rn" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
d4076 1
a4076 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d4084 1
a4084 1
      current_cpu->trace_stream << "rn" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
d4121 1
a4121 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d4161 1
a4161 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d4201 1
a4201 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d4241 1
a4241 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d4281 1
a4281 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d4289 1
a4289 1
      current_cpu->trace_stream << "rn" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
d4326 1
a4326 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d4334 1
a4334 1
      current_cpu->trace_stream << "rn" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
d4371 1
a4371 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d4379 1
a4379 1
      current_cpu->trace_stream << "rn" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
d4416 1
a4416 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d4424 1
a4424 1
      current_cpu->trace_stream << "rn" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
d4461 1
a4461 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d4469 1
a4469 1
      current_cpu->trace_stream << "rn" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
d4506 1
a4506 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d4514 1
a4514 1
      current_cpu->trace_stream << "rn" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
d4551 1
a4551 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d4559 1
a4559 1
      current_cpu->trace_stream << "rn" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
d4596 1
a4596 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d4604 1
a4604 1
      current_cpu->trace_stream << "rn" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
d4631 1
a4631 1
      current_cpu->trace_stream << "mul-rd" << '[' << FLD (f_mul_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d4673 1
a4673 1
      current_cpu->trace_stream << "mul-rd" << '[' << FLD (f_mul_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d4718 1
a4718 1
      current_cpu->trace_stream << "rdhi" << '[' << FLD (f_rdhi) << ']' << ":=0x" << hex << opval << dec << "  ";
d4724 1
a4724 1
      current_cpu->trace_stream << "rdlo" << '[' << FLD (f_rdlo) << ']' << ":=0x" << hex << opval << dec << "  ";
d4770 1
a4770 1
      current_cpu->trace_stream << "rdhi" << '[' << FLD (f_rdhi) << ']' << ":=0x" << hex << opval << dec << "  ";
d4776 1
a4776 1
      current_cpu->trace_stream << "rdlo" << '[' << FLD (f_rdlo) << ']' << ":=0x" << hex << opval << dec << "  ";
d4821 1
a4821 1
      current_cpu->trace_stream << "rdhi" << '[' << FLD (f_rdhi) << ']' << ":=0x" << hex << opval << dec << "  ";
d4827 1
a4827 1
      current_cpu->trace_stream << "rdlo" << '[' << FLD (f_rdlo) << ']' << ":=0x" << hex << opval << dec << "  ";
d4873 1
a4873 1
      current_cpu->trace_stream << "rdhi" << '[' << FLD (f_rdhi) << ']' << ":=0x" << hex << opval << dec << "  ";
d4879 1
a4879 1
      current_cpu->trace_stream << "rdlo" << '[' << FLD (f_rdlo) << ']' << ":=0x" << hex << opval << dec << "  ";
d4928 1
a4928 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d4961 1
a4961 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d5034 1
a5034 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d5110 1
a5110 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d5182 1
a5182 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d5250 1
a5250 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d5326 1
a5326 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d5398 1
a5398 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d5466 1
a5466 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d5542 1
a5542 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d5614 1
a5614 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d5682 1
a5682 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d5758 1
a5758 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d5830 1
a5830 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d5898 1
a5898 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d5974 1
a5974 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d6046 1
a6046 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d6114 1
a6114 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d6190 1
a6190 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d6262 1
a6262 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d6332 1
a6332 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d6418 1
a6418 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d6530 1
a6530 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d6584 1
a6584 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d6670 1
a6670 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d6782 1
a6782 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d6836 1
a6836 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d6922 1
a6922 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d7034 1
a7034 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d7088 1
a7088 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d7174 1
a7174 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d7286 1
a7286 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d7340 1
a7340 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d7426 1
a7426 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d7538 1
a7538 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d7592 1
a7592 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d7678 1
a7678 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d7790 1
a7790 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d8844 1
a8844 1
      current_cpu->trace_stream << "rn" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
d9244 1
a9244 1
      current_cpu->trace_stream << "rn" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
d9644 1
a9644 1
      current_cpu->trace_stream << "rn" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
d10044 1
a10044 1
      current_cpu->trace_stream << "rn" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
d10444 1
a10444 1
      current_cpu->trace_stream << "rn" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
d10844 1
a10844 1
      current_cpu->trace_stream << "rn" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
d11244 1
a11244 1
      current_cpu->trace_stream << "rn" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
d11644 1
a11644 1
      current_cpu->trace_stream << "rn" << '[' << FLD (f_rn) << ']' << ":=0x" << hex << opval << dec << "  ";
d11668 1
a11668 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
d11691 1
a11691 1
      current_cpu->trace_stream << "rd" << '[' << FLD (f_rd) << ']' << ":=0x" << hex << opval << dec << "  ";
@


1.1
log
@* public snapshot of sid simulator
@
text
@d81 1
a81 1
      current_cpu->trace_stream << "gr-14" << '[' << ((UINT) 14) << ']' << ":=0x" << hex << opval << dec << "  ";
d8484 1
a8484 1
      current_cpu->trace_stream << "gr-14" << '[' << ((UINT) 14) << ']' << ":=0x" << hex << opval << dec << "  ";
d8495 1
a8495 1
      current_cpu->trace_stream << "gr-13" << '[' << ((UINT) 13) << ']' << ":=0x" << hex << opval << dec << "  ";
d8506 1
a8506 1
      current_cpu->trace_stream << "gr-12" << '[' << ((UINT) 12) << ']' << ":=0x" << hex << opval << dec << "  ";
d8517 1
a8517 1
      current_cpu->trace_stream << "gr-11" << '[' << ((UINT) 11) << ']' << ":=0x" << hex << opval << dec << "  ";
d8528 1
a8528 1
      current_cpu->trace_stream << "gr-10" << '[' << ((UINT) 10) << ']' << ":=0x" << hex << opval << dec << "  ";
d8539 1
a8539 1
      current_cpu->trace_stream << "gr-9" << '[' << ((UINT) 9) << ']' << ":=0x" << hex << opval << dec << "  ";
d8550 1
a8550 1
      current_cpu->trace_stream << "gr-8" << '[' << ((UINT) 8) << ']' << ":=0x" << hex << opval << dec << "  ";
d8561 1
a8561 1
      current_cpu->trace_stream << "gr-7" << '[' << ((UINT) 7) << ']' << ":=0x" << hex << opval << dec << "  ";
d8572 1
a8572 1
      current_cpu->trace_stream << "gr-6" << '[' << ((UINT) 6) << ']' << ":=0x" << hex << opval << dec << "  ";
d8583 1
a8583 1
      current_cpu->trace_stream << "gr-5" << '[' << ((UINT) 5) << ']' << ":=0x" << hex << opval << dec << "  ";
d8594 1
a8594 1
      current_cpu->trace_stream << "gr-4" << '[' << ((UINT) 4) << ']' << ":=0x" << hex << opval << dec << "  ";
d8605 1
a8605 1
      current_cpu->trace_stream << "gr-3" << '[' << ((UINT) 3) << ']' << ":=0x" << hex << opval << dec << "  ";
d8616 1
a8616 1
      current_cpu->trace_stream << "gr-2" << '[' << ((UINT) 2) << ']' << ":=0x" << hex << opval << dec << "  ";
d8627 1
a8627 1
      current_cpu->trace_stream << "gr-1" << '[' << ((UINT) 1) << ']' << ":=0x" << hex << opval << dec << "  ";
d8638 1
a8638 1
      current_cpu->trace_stream << "gr-0" << '[' << ((UINT) 0) << ']' << ":=0x" << hex << opval << dec << "  ";
d8681 1
a8681 1
      current_cpu->trace_stream << "gr-14" << '[' << ((UINT) 14) << ']' << ":=0x" << hex << opval << dec << "  ";
d8692 1
a8692 1
      current_cpu->trace_stream << "gr-13" << '[' << ((UINT) 13) << ']' << ":=0x" << hex << opval << dec << "  ";
d8703 1
a8703 1
      current_cpu->trace_stream << "gr-12" << '[' << ((UINT) 12) << ']' << ":=0x" << hex << opval << dec << "  ";
d8714 1
a8714 1
      current_cpu->trace_stream << "gr-11" << '[' << ((UINT) 11) << ']' << ":=0x" << hex << opval << dec << "  ";
d8725 1
a8725 1
      current_cpu->trace_stream << "gr-10" << '[' << ((UINT) 10) << ']' << ":=0x" << hex << opval << dec << "  ";
d8736 1
a8736 1
      current_cpu->trace_stream << "gr-9" << '[' << ((UINT) 9) << ']' << ":=0x" << hex << opval << dec << "  ";
d8747 1
a8747 1
      current_cpu->trace_stream << "gr-8" << '[' << ((UINT) 8) << ']' << ":=0x" << hex << opval << dec << "  ";
d8758 1
a8758 1
      current_cpu->trace_stream << "gr-7" << '[' << ((UINT) 7) << ']' << ":=0x" << hex << opval << dec << "  ";
d8769 1
a8769 1
      current_cpu->trace_stream << "gr-6" << '[' << ((UINT) 6) << ']' << ":=0x" << hex << opval << dec << "  ";
d8780 1
a8780 1
      current_cpu->trace_stream << "gr-5" << '[' << ((UINT) 5) << ']' << ":=0x" << hex << opval << dec << "  ";
d8791 1
a8791 1
      current_cpu->trace_stream << "gr-4" << '[' << ((UINT) 4) << ']' << ":=0x" << hex << opval << dec << "  ";
d8802 1
a8802 1
      current_cpu->trace_stream << "gr-3" << '[' << ((UINT) 3) << ']' << ":=0x" << hex << opval << dec << "  ";
d8813 1
a8813 1
      current_cpu->trace_stream << "gr-2" << '[' << ((UINT) 2) << ']' << ":=0x" << hex << opval << dec << "  ";
d8824 1
a8824 1
      current_cpu->trace_stream << "gr-1" << '[' << ((UINT) 1) << ']' << ":=0x" << hex << opval << dec << "  ";
d8835 1
a8835 1
      current_cpu->trace_stream << "gr-0" << '[' << ((UINT) 0) << ']' << ":=0x" << hex << opval << dec << "  ";
d8874 1
a8874 1
      current_cpu->trace_stream << "gr-0" << '[' << ((UINT) 0) << ']' << ":=0x" << hex << opval << dec << "  ";
d8885 1
a8885 1
      current_cpu->trace_stream << "gr-1" << '[' << ((UINT) 1) << ']' << ":=0x" << hex << opval << dec << "  ";
d8896 1
a8896 1
      current_cpu->trace_stream << "gr-2" << '[' << ((UINT) 2) << ']' << ":=0x" << hex << opval << dec << "  ";
d8907 1
a8907 1
      current_cpu->trace_stream << "gr-3" << '[' << ((UINT) 3) << ']' << ":=0x" << hex << opval << dec << "  ";
d8918 1
a8918 1
      current_cpu->trace_stream << "gr-4" << '[' << ((UINT) 4) << ']' << ":=0x" << hex << opval << dec << "  ";
d8929 1
a8929 1
      current_cpu->trace_stream << "gr-5" << '[' << ((UINT) 5) << ']' << ":=0x" << hex << opval << dec << "  ";
d8940 1
a8940 1
      current_cpu->trace_stream << "gr-6" << '[' << ((UINT) 6) << ']' << ":=0x" << hex << opval << dec << "  ";
d8951 1
a8951 1
      current_cpu->trace_stream << "gr-7" << '[' << ((UINT) 7) << ']' << ":=0x" << hex << opval << dec << "  ";
d8962 1
a8962 1
      current_cpu->trace_stream << "gr-8" << '[' << ((UINT) 8) << ']' << ":=0x" << hex << opval << dec << "  ";
d8973 1
a8973 1
      current_cpu->trace_stream << "gr-9" << '[' << ((UINT) 9) << ']' << ":=0x" << hex << opval << dec << "  ";
d8984 1
a8984 1
      current_cpu->trace_stream << "gr-10" << '[' << ((UINT) 10) << ']' << ":=0x" << hex << opval << dec << "  ";
d8995 1
a8995 1
      current_cpu->trace_stream << "gr-11" << '[' << ((UINT) 11) << ']' << ":=0x" << hex << opval << dec << "  ";
d9006 1
a9006 1
      current_cpu->trace_stream << "gr-12" << '[' << ((UINT) 12) << ']' << ":=0x" << hex << opval << dec << "  ";
d9017 1
a9017 1
      current_cpu->trace_stream << "gr-13" << '[' << ((UINT) 13) << ']' << ":=0x" << hex << opval << dec << "  ";
d9028 1
a9028 1
      current_cpu->trace_stream << "gr-14" << '[' << ((UINT) 14) << ']' << ":=0x" << hex << opval << dec << "  ";
d9071 1
a9071 1
      current_cpu->trace_stream << "gr-0" << '[' << ((UINT) 0) << ']' << ":=0x" << hex << opval << dec << "  ";
d9082 1
a9082 1
      current_cpu->trace_stream << "gr-1" << '[' << ((UINT) 1) << ']' << ":=0x" << hex << opval << dec << "  ";
d9093 1
a9093 1
      current_cpu->trace_stream << "gr-2" << '[' << ((UINT) 2) << ']' << ":=0x" << hex << opval << dec << "  ";
d9104 1
a9104 1
      current_cpu->trace_stream << "gr-3" << '[' << ((UINT) 3) << ']' << ":=0x" << hex << opval << dec << "  ";
d9115 1
a9115 1
      current_cpu->trace_stream << "gr-4" << '[' << ((UINT) 4) << ']' << ":=0x" << hex << opval << dec << "  ";
d9126 1
a9126 1
      current_cpu->trace_stream << "gr-5" << '[' << ((UINT) 5) << ']' << ":=0x" << hex << opval << dec << "  ";
d9137 1
a9137 1
      current_cpu->trace_stream << "gr-6" << '[' << ((UINT) 6) << ']' << ":=0x" << hex << opval << dec << "  ";
d9148 1
a9148 1
      current_cpu->trace_stream << "gr-7" << '[' << ((UINT) 7) << ']' << ":=0x" << hex << opval << dec << "  ";
d9159 1
a9159 1
      current_cpu->trace_stream << "gr-8" << '[' << ((UINT) 8) << ']' << ":=0x" << hex << opval << dec << "  ";
d9170 1
a9170 1
      current_cpu->trace_stream << "gr-9" << '[' << ((UINT) 9) << ']' << ":=0x" << hex << opval << dec << "  ";
d9181 1
a9181 1
      current_cpu->trace_stream << "gr-10" << '[' << ((UINT) 10) << ']' << ":=0x" << hex << opval << dec << "  ";
d9192 1
a9192 1
      current_cpu->trace_stream << "gr-11" << '[' << ((UINT) 11) << ']' << ":=0x" << hex << opval << dec << "  ";
d9203 1
a9203 1
      current_cpu->trace_stream << "gr-12" << '[' << ((UINT) 12) << ']' << ":=0x" << hex << opval << dec << "  ";
d9214 1
a9214 1
      current_cpu->trace_stream << "gr-13" << '[' << ((UINT) 13) << ']' << ":=0x" << hex << opval << dec << "  ";
d9225 1
a9225 1
      current_cpu->trace_stream << "gr-14" << '[' << ((UINT) 14) << ']' << ":=0x" << hex << opval << dec << "  ";
d9273 1
a9273 1
      current_cpu->trace_stream << "gr-0" << '[' << ((UINT) 0) << ']' << ":=0x" << hex << opval << dec << "  ";
d9284 1
a9284 1
      current_cpu->trace_stream << "gr-1" << '[' << ((UINT) 1) << ']' << ":=0x" << hex << opval << dec << "  ";
d9295 1
a9295 1
      current_cpu->trace_stream << "gr-2" << '[' << ((UINT) 2) << ']' << ":=0x" << hex << opval << dec << "  ";
d9306 1
a9306 1
      current_cpu->trace_stream << "gr-3" << '[' << ((UINT) 3) << ']' << ":=0x" << hex << opval << dec << "  ";
d9317 1
a9317 1
      current_cpu->trace_stream << "gr-4" << '[' << ((UINT) 4) << ']' << ":=0x" << hex << opval << dec << "  ";
d9328 1
a9328 1
      current_cpu->trace_stream << "gr-5" << '[' << ((UINT) 5) << ']' << ":=0x" << hex << opval << dec << "  ";
d9339 1
a9339 1
      current_cpu->trace_stream << "gr-6" << '[' << ((UINT) 6) << ']' << ":=0x" << hex << opval << dec << "  ";
d9350 1
a9350 1
      current_cpu->trace_stream << "gr-7" << '[' << ((UINT) 7) << ']' << ":=0x" << hex << opval << dec << "  ";
d9361 1
a9361 1
      current_cpu->trace_stream << "gr-8" << '[' << ((UINT) 8) << ']' << ":=0x" << hex << opval << dec << "  ";
d9372 1
a9372 1
      current_cpu->trace_stream << "gr-9" << '[' << ((UINT) 9) << ']' << ":=0x" << hex << opval << dec << "  ";
d9383 1
a9383 1
      current_cpu->trace_stream << "gr-10" << '[' << ((UINT) 10) << ']' << ":=0x" << hex << opval << dec << "  ";
d9394 1
a9394 1
      current_cpu->trace_stream << "gr-11" << '[' << ((UINT) 11) << ']' << ":=0x" << hex << opval << dec << "  ";
d9405 1
a9405 1
      current_cpu->trace_stream << "gr-12" << '[' << ((UINT) 12) << ']' << ":=0x" << hex << opval << dec << "  ";
d9416 1
a9416 1
      current_cpu->trace_stream << "gr-13" << '[' << ((UINT) 13) << ']' << ":=0x" << hex << opval << dec << "  ";
d9427 1
a9427 1
      current_cpu->trace_stream << "gr-14" << '[' << ((UINT) 14) << ']' << ":=0x" << hex << opval << dec << "  ";
d9470 1
a9470 1
      current_cpu->trace_stream << "gr-0" << '[' << ((UINT) 0) << ']' << ":=0x" << hex << opval << dec << "  ";
d9481 1
a9481 1
      current_cpu->trace_stream << "gr-1" << '[' << ((UINT) 1) << ']' << ":=0x" << hex << opval << dec << "  ";
d9492 1
a9492 1
      current_cpu->trace_stream << "gr-2" << '[' << ((UINT) 2) << ']' << ":=0x" << hex << opval << dec << "  ";
d9503 1
a9503 1
      current_cpu->trace_stream << "gr-3" << '[' << ((UINT) 3) << ']' << ":=0x" << hex << opval << dec << "  ";
d9514 1
a9514 1
      current_cpu->trace_stream << "gr-4" << '[' << ((UINT) 4) << ']' << ":=0x" << hex << opval << dec << "  ";
d9525 1
a9525 1
      current_cpu->trace_stream << "gr-5" << '[' << ((UINT) 5) << ']' << ":=0x" << hex << opval << dec << "  ";
d9536 1
a9536 1
      current_cpu->trace_stream << "gr-6" << '[' << ((UINT) 6) << ']' << ":=0x" << hex << opval << dec << "  ";
d9547 1
a9547 1
      current_cpu->trace_stream << "gr-7" << '[' << ((UINT) 7) << ']' << ":=0x" << hex << opval << dec << "  ";
d9558 1
a9558 1
      current_cpu->trace_stream << "gr-8" << '[' << ((UINT) 8) << ']' << ":=0x" << hex << opval << dec << "  ";
d9569 1
a9569 1
      current_cpu->trace_stream << "gr-9" << '[' << ((UINT) 9) << ']' << ":=0x" << hex << opval << dec << "  ";
d9580 1
a9580 1
      current_cpu->trace_stream << "gr-10" << '[' << ((UINT) 10) << ']' << ":=0x" << hex << opval << dec << "  ";
d9591 1
a9591 1
      current_cpu->trace_stream << "gr-11" << '[' << ((UINT) 11) << ']' << ":=0x" << hex << opval << dec << "  ";
d9602 1
a9602 1
      current_cpu->trace_stream << "gr-12" << '[' << ((UINT) 12) << ']' << ":=0x" << hex << opval << dec << "  ";
d9613 1
a9613 1
      current_cpu->trace_stream << "gr-13" << '[' << ((UINT) 13) << ']' << ":=0x" << hex << opval << dec << "  ";
d9624 1
a9624 1
      current_cpu->trace_stream << "gr-14" << '[' << ((UINT) 14) << ']' << ":=0x" << hex << opval << dec << "  ";
d9685 1
a9685 1
      current_cpu->trace_stream << "gr-14" << '[' << ((UINT) 14) << ']' << ":=0x" << hex << opval << dec << "  ";
d9696 1
a9696 1
      current_cpu->trace_stream << "gr-13" << '[' << ((UINT) 13) << ']' << ":=0x" << hex << opval << dec << "  ";
d9707 1
a9707 1
      current_cpu->trace_stream << "gr-12" << '[' << ((UINT) 12) << ']' << ":=0x" << hex << opval << dec << "  ";
d9718 1
a9718 1
      current_cpu->trace_stream << "gr-11" << '[' << ((UINT) 11) << ']' << ":=0x" << hex << opval << dec << "  ";
d9729 1
a9729 1
      current_cpu->trace_stream << "gr-10" << '[' << ((UINT) 10) << ']' << ":=0x" << hex << opval << dec << "  ";
d9740 1
a9740 1
      current_cpu->trace_stream << "gr-9" << '[' << ((UINT) 9) << ']' << ":=0x" << hex << opval << dec << "  ";
d9751 1
a9751 1
      current_cpu->trace_stream << "gr-8" << '[' << ((UINT) 8) << ']' << ":=0x" << hex << opval << dec << "  ";
d9762 1
a9762 1
      current_cpu->trace_stream << "gr-7" << '[' << ((UINT) 7) << ']' << ":=0x" << hex << opval << dec << "  ";
d9773 1
a9773 1
      current_cpu->trace_stream << "gr-6" << '[' << ((UINT) 6) << ']' << ":=0x" << hex << opval << dec << "  ";
d9784 1
a9784 1
      current_cpu->trace_stream << "gr-5" << '[' << ((UINT) 5) << ']' << ":=0x" << hex << opval << dec << "  ";
d9795 1
a9795 1
      current_cpu->trace_stream << "gr-4" << '[' << ((UINT) 4) << ']' << ":=0x" << hex << opval << dec << "  ";
d9806 1
a9806 1
      current_cpu->trace_stream << "gr-3" << '[' << ((UINT) 3) << ']' << ":=0x" << hex << opval << dec << "  ";
d9817 1
a9817 1
      current_cpu->trace_stream << "gr-2" << '[' << ((UINT) 2) << ']' << ":=0x" << hex << opval << dec << "  ";
d9828 1
a9828 1
      current_cpu->trace_stream << "gr-1" << '[' << ((UINT) 1) << ']' << ":=0x" << hex << opval << dec << "  ";
d9839 1
a9839 1
      current_cpu->trace_stream << "gr-0" << '[' << ((UINT) 0) << ']' << ":=0x" << hex << opval << dec << "  ";
d9882 1
a9882 1
      current_cpu->trace_stream << "gr-14" << '[' << ((UINT) 14) << ']' << ":=0x" << hex << opval << dec << "  ";
d9893 1
a9893 1
      current_cpu->trace_stream << "gr-13" << '[' << ((UINT) 13) << ']' << ":=0x" << hex << opval << dec << "  ";
d9904 1
a9904 1
      current_cpu->trace_stream << "gr-12" << '[' << ((UINT) 12) << ']' << ":=0x" << hex << opval << dec << "  ";
d9915 1
a9915 1
      current_cpu->trace_stream << "gr-11" << '[' << ((UINT) 11) << ']' << ":=0x" << hex << opval << dec << "  ";
d9926 1
a9926 1
      current_cpu->trace_stream << "gr-10" << '[' << ((UINT) 10) << ']' << ":=0x" << hex << opval << dec << "  ";
d9937 1
a9937 1
      current_cpu->trace_stream << "gr-9" << '[' << ((UINT) 9) << ']' << ":=0x" << hex << opval << dec << "  ";
d9948 1
a9948 1
      current_cpu->trace_stream << "gr-8" << '[' << ((UINT) 8) << ']' << ":=0x" << hex << opval << dec << "  ";
d9959 1
a9959 1
      current_cpu->trace_stream << "gr-7" << '[' << ((UINT) 7) << ']' << ":=0x" << hex << opval << dec << "  ";
d9970 1
a9970 1
      current_cpu->trace_stream << "gr-6" << '[' << ((UINT) 6) << ']' << ":=0x" << hex << opval << dec << "  ";
d9981 1
a9981 1
      current_cpu->trace_stream << "gr-5" << '[' << ((UINT) 5) << ']' << ":=0x" << hex << opval << dec << "  ";
d9992 1
a9992 1
      current_cpu->trace_stream << "gr-4" << '[' << ((UINT) 4) << ']' << ":=0x" << hex << opval << dec << "  ";
d10003 1
a10003 1
      current_cpu->trace_stream << "gr-3" << '[' << ((UINT) 3) << ']' << ":=0x" << hex << opval << dec << "  ";
d10014 1
a10014 1
      current_cpu->trace_stream << "gr-2" << '[' << ((UINT) 2) << ']' << ":=0x" << hex << opval << dec << "  ";
d10025 1
a10025 1
      current_cpu->trace_stream << "gr-1" << '[' << ((UINT) 1) << ']' << ":=0x" << hex << opval << dec << "  ";
d10036 1
a10036 1
      current_cpu->trace_stream << "gr-0" << '[' << ((UINT) 0) << ']' << ":=0x" << hex << opval << dec << "  ";
@

