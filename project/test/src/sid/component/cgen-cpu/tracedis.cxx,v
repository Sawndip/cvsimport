head	1.6;
access;
symbols
	sid-snapshot-20180601:1.6
	sid-snapshot-20180501:1.6
	sid-snapshot-20180401:1.6
	sid-snapshot-20180301:1.6
	sid-snapshot-20180201:1.6
	sid-snapshot-20180101:1.6
	sid-snapshot-20171201:1.6
	sid-snapshot-20171101:1.6
	sid-snapshot-20171001:1.6
	sid-snapshot-20170901:1.6
	sid-snapshot-20170801:1.6
	sid-snapshot-20170701:1.6
	sid-snapshot-20170601:1.6
	sid-snapshot-20170501:1.6
	sid-snapshot-20170401:1.6
	sid-snapshot-20170301:1.6
	sid-snapshot-20170201:1.6
	sid-snapshot-20170101:1.6
	sid-snapshot-20161201:1.6
	sid-snapshot-20161101:1.6
	sid-snapshot-20160901:1.6
	sid-snapshot-20160801:1.6
	sid-snapshot-20160701:1.6
	sid-snapshot-20160601:1.6
	sid-snapshot-20160501:1.6
	sid-snapshot-20160401:1.6
	sid-snapshot-20160301:1.6
	sid-snapshot-20160201:1.6
	sid-snapshot-20160101:1.6
	sid-snapshot-20151201:1.6
	sid-snapshot-20151101:1.6
	sid-snapshot-20151001:1.6
	sid-snapshot-20150901:1.6
	sid-snapshot-20150801:1.6
	sid-snapshot-20150701:1.6
	sid-snapshot-20150601:1.6
	sid-snapshot-20150501:1.6
	sid-snapshot-20150401:1.6
	sid-snapshot-20150301:1.6
	sid-snapshot-20150201:1.6
	sid-snapshot-20150101:1.6
	sid-snapshot-20141201:1.6
	sid-snapshot-20141101:1.6
	sid-snapshot-20141001:1.6
	sid-snapshot-20140901:1.6
	sid-snapshot-20140801:1.6
	sid-snapshot-20140701:1.6
	sid-snapshot-20140601:1.6
	sid-snapshot-20140501:1.6
	sid-snapshot-20140401:1.6
	sid-snapshot-20140301:1.6
	sid-snapshot-20140201:1.6
	sid-snapshot-20140101:1.6
	sid-snapshot-20131201:1.6
	sid-snapshot-20131101:1.6
	sid-snapshot-20131001:1.6
	sid-snapshot-20130901:1.6
	sid-snapshot-20130801:1.6
	sid-snapshot-20130701:1.6
	sid-snapshot-20130601:1.6
	sid-snapshot-20130501:1.6
	sid-snapshot-20130401:1.6
	sid-snapshot-20130301:1.6
	sid-snapshot-20130201:1.6
	sid-snapshot-20130101:1.6
	sid-snapshot-20121201:1.6
	sid-snapshot-20121101:1.6
	sid-snapshot-20121001:1.6
	sid-snapshot-20120901:1.6
	sid-snapshot-20120801:1.6
	sid-snapshot-20120701:1.6
	sid-snapshot-20120601:1.6
	sid-snapshot-20120501:1.6
	sid-snapshot-20120401:1.6
	sid-snapshot-20120301:1.6
	sid-snapshot-20120201:1.6
	sid-snapshot-20120101:1.6
	sid-snapshot-20111201:1.6
	sid-snapshot-20111101:1.6
	sid-snapshot-20111001:1.6
	sid-snapshot-20110901:1.6
	sid-snapshot-20110801:1.6
	sid-snapshot-20110701:1.6
	sid-snapshot-20110601:1.6
	sid-snapshot-20110501:1.6
	sid-snapshot-20110401:1.6
	sid-snapshot-20110301:1.6
	sid-snapshot-20110201:1.6
	sid-snapshot-20110101:1.6
	sid-snapshot-20101201:1.6
	sid-snapshot-20101101:1.6
	sid-snapshot-20101001:1.6
	sid-snapshot-20100901:1.6
	sid-snapshot-20100801:1.6
	sid-snapshot-20100701:1.6
	sid-snapshot-20100601:1.6
	sid-snapshot-20100501:1.6
	sid-snapshot-20100401:1.6
	sid-snapshot-20100301:1.6
	sid-snapshot-20100201:1.6
	sid-snapshot-20100101:1.6
	sid-snapshot-20091201:1.6
	sid-snapshot-20091101:1.6
	sid-snapshot-20091001:1.6
	sid-snapshot-20090901:1.6
	sid-snapshot-20090801:1.6
	sid-snapshot-20090701:1.6
	sid-snapshot-20090601:1.6
	sid-snapshot-20090501:1.6
	sid-snapshot-20090401:1.6
	sid-snapshot-20090301:1.6
	sid-snapshot-20090201:1.6
	sid-snapshot-20090101:1.6
	sid-snapshot-20081201:1.6
	sid-snapshot-20081101:1.6
	sid-snapshot-20081001:1.6
	sid-snapshot-20080901:1.6
	sid-snapshot-20080801:1.6
	sid-snapshot-20080701:1.6
	sid-snapshot-20080601:1.6
	sid-snapshot-20080501:1.6
	sid-snapshot-20080403:1.6
	sid-snapshot-20080401:1.6
	sid-snapshot-20080301:1.6
	sid-snapshot-20080201:1.6
	sid-snapshot-20080101:1.6
	sid-snapshot-20071201:1.6
	sid-snapshot-20071101:1.6
	sid-snapshot-20071001:1.6;
locks; strict;
comment	@// @;


1.6
date	2006.06.23.11.17.57;	author fche;	state Exp;
branches;
next	1.5;

1.5
date	2005.10.28.19.53.33;	author brolley;	state Exp;
branches;
next	1.4;

1.4
date	2004.06.25.17.44.35;	author brolley;	state Exp;
branches;
next	1.3;

1.3
date	2004.03.26.20.23.40;	author jimb;	state Exp;
branches;
next	1.2;

1.2
date	2003.01.09.18.14.56;	author fche;	state Exp;
branches;
next	1.1;

1.1
date	2003.01.08.04.08.29;	author bje;	state Exp;
branches;
next	;


desc
@@


1.6
log
@2006-06-23  Thiemo Seufer  <ths@@mips.com>

	* tracedis.cxx (bfd_getb16, bfd_getl16, bfd_getb32, bfd_getl32):
	Remove invalid use of register specifier.
@
text
@// tracedis.cxx - disassembly tracing support.  -*- C++ -*-

// Copyright (C) 2001-2004 Red Hat.
// This file is part of SID and is licensed under the GPL.
// See the file COPYING.SID for conditions for redistribution.

#include <cstdlib>
#include <stdarg.h>
#include "config.h"
#include "libiberty.h"
#include "tracedis.h"
#include "sidcomputil.h"
#include "sidcpuutil.h"

void register_name(enum bfd_architecture, const char *, int);

// XXX: for compatibility with older libraries
static
int trace_printf(void *obj_ptr, const char *fmt, ...)
{
  va_list ap;
  char buf[1024];
  sidutil::basic_cpu* object = (sidutil::basic_cpu*) obj_ptr;
  
  va_start (ap, fmt);
  vsprintf (buf, fmt, ap);
  object->trace_stream << buf;

  // XXX: FIXME.
  return 0;
}

void
cgen_disassemble(bfd_vma pc,
		 disassemble_info *info,
		 void *this_ptr,
		 READMEM read_mem_func,
		 MEMERR memory_error_func,
		 PRINTADDR print_addr_func,
		 SYMATADDR sym_at_addr_func,
		 disassembler_ftype fp,
		 enum bfd_flavour flavour,
		 enum bfd_architecture arch,
		 int machine,
		 enum bfd_endian endian,
		 const char *name,
		 CGEN_BITSET *isas)
{
  register_name(arch, name, machine);
  INIT_DISASSEMBLE_INFO(*info, this_ptr, trace_printf);
  info->application_data = this_ptr;
  info->flavour = flavour;
  info->insn_sets = isas; /* may be NULL */
  info->arch = arch;
  info->mach = machine;
  info->endian = endian;
  info->read_memory_func = read_mem_func;
  info->memory_error_func = memory_error_func;
  info->print_address_func = print_addr_func;
  info->symbol_at_address_func = sym_at_addr_func;

  trace_printf (this_ptr, "0x%08x\t", (unsigned int) pc);
  (void) (*fp) (pc, info);
  trace_printf (this_ptr, "\t");
}

// opcodes needs:
//	enum bfd_architecture bfd_get_arch(bfd *abfd);
//		- disassembler() calls it at the top.  we don't use disassembler().
//	const bfd_arch_info_type *bfd_lookup_arch(enum bfd_architecture arch, unsigned long machine);
//		- cgen generated disassemblers call this to find subarch(?).  this one is not easy to
//		  fix as it uses bfd data.
//	bfd_vma bfd_get_bits (bfd_byte *addr, int bits, boolean big_p);
//	void bfd_put_bits (bfd_vma data, bfd_byte *addr, int bits, boolean big_p);
//		- these two are small and can be replicated.
//
// so that only really leaves bfd_lookup_arch() as an issue...we can hack it.

extern "C" enum bfd_architecture
bfd_get_arch(bfd *abfd)
{ 
  return static_cast<enum bfd_architecture> (0);
}

/* Stolen from libbfd.  */

extern "C" bfd_vma
bfd_getb16 (const void *addr)
{
  const bfd_byte *byteaddr = static_cast <const bfd_byte *> (addr);
  return (byteaddr[0] << 8) | byteaddr[1];
}

extern "C" bfd_vma
bfd_getl16 (const void *addr)
{
  const bfd_byte *byteaddr = static_cast <const bfd_byte *> (addr);
  return (byteaddr[1] << 8) | byteaddr[0];
}

extern "C" bfd_vma
bfd_getb32 (const void *addr)
{
  const bfd_byte *byteaddr = static_cast <const bfd_byte *> (addr);
  unsigned long v;

  v = (unsigned long) byteaddr[0] << 24;
  v |= (unsigned long) byteaddr[1] << 16;
  v |= (unsigned long) byteaddr[2] << 8;
  v |= (unsigned long) byteaddr[3];
  return (bfd_vma) v;
}

extern "C" bfd_vma
bfd_getl32 (const void *addr)
{
  const bfd_byte *byteaddr = static_cast <const bfd_byte *> (addr);
  unsigned long v;

  v = (unsigned long) byteaddr[0];
  v |= (unsigned long) byteaddr[1] << 8;
  v |= (unsigned long) byteaddr[2] << 16;
  v |= (unsigned long) byteaddr[3] << 24;
  return (bfd_vma) v;
}

extern "C" void
bfd_put_bits (bfd_uint64_t data, void* addr, int bits, bfd_boolean big_p)
{
  bfd_byte *byteaddr = static_cast <bfd_byte *> (addr);
  int i;
  int bytes;

  if (bits % 8 != 0)
    abort ();

  bytes = bits / 8;
  for (i = 0; i < bytes; i++)
    {
      int index = big_p ? bytes - i - 1 : i;

      byteaddr[index] = (bfd_byte) data;
      data >>= 8;
    }
}

/* Stolen from libbfd.  */
extern "C" bfd_uint64_t
bfd_get_bits (const void* addr, int bits, int big_p)
{
  const bfd_byte *byteaddr = static_cast <const bfd_byte *> (addr);
  bfd_uint64_t data;
  int i;
  int bytes;

  if (bits % 8 != 0)
    abort ();

  data = 0;
  bytes = bits / 8;
  for (i = 0; i < bytes; i++)
    {
      int index = big_p ? i : bytes - i - 1;

      data = (data << 8) | byteaddr[index];
    }

  return data;
}

/* However, bfd_lookup_arch() is a lot harder and requires us to manage
   our own list of architectures, and return a bfd_arch_info_type with
   just the name set.  */

/* This is a hack.  */
struct bfd_arch_hack {
  struct bfd_arch_hack *next;
  enum bfd_architecture arch;
  int machine;
  const char *name;
};

struct bfd_arch_hack *hack_list;

void
register_name(enum bfd_architecture arch, const char *name, int machine)
{
  struct bfd_arch_hack *p;

  if (hack_list == NULL)
    {
      hack_list = (struct bfd_arch_hack *)xmalloc(sizeof *hack_list);
      hack_list->next = NULL;
      hack_list->arch = arch;
      hack_list->machine = machine;
      hack_list->name = name;
      return;
    }

  for (p = hack_list; p; p = p->next)
    if (strcmp(p->name, name) == 0)
      {
	p->arch = arch;
	p->machine = machine;
	return;
      }
  p = (struct bfd_arch_hack *)xmalloc(sizeof *hack_list);
  p->next = hack_list;
  p->arch = arch;
  p->machine = machine;
  p->name = name;
}

extern "C" const bfd_arch_info_type *
bfd_lookup_arch (enum bfd_architecture arch, unsigned long machine)
{ 
  static bfd_arch_info_type info;
  struct bfd_arch_hack *b;

  for (b = hack_list; b->name; b++)
    {
      if (b->arch == arch && b->machine == machine)
	{
          info.printable_name = b->name;
          return &info;
	}
    }

  return NULL;
}    
@


1.5
log
@2005-10-28  Dave Brolley  <brolley@@redhat.com>

        Contribute the following changes:
        2003-10-07  Dave Brolley  <brolley@@redhat.com>

        * tracedis.cxx (cgen_disassemble): Rename isa_mask to isas. Now
        (CGEN_ISA_MASK*).
        * tracedis.h (opcode/cgen-bitset.h): #include it.
        (cgen_disassemble): Rename isa_mask to isas. Now
        (CGEN_ISA_MASK*).
        (cgen_bi_endian_cpu::disassemble): 'isas' now (CGEN_ISA_MASK *).
        * cgen-cpu.h (opcode/cgen-bitset.h): #include it.
        (cgen_bi_endian_cpu::disassemble): 'isas' now (CGEN_ISA_MASK *).
        * compCGEN.cxx (cgen_disassemble): Rename isa_mask to isas. Now
        (CGEN_ISA_MASK*).
@
text
@d88 1
a88 1
bfd_getb16 (register const void *addr)
d95 1
a95 1
bfd_getl16 (register const void *addr)
d102 1
a102 1
bfd_getb32 (register const void *addr)
d115 1
a115 1
bfd_getl32 (register const void *addr)
@


1.4
log
@2004-06-25  Dave Brolley  <brolley@@redhat.com>

        * tracedis.cxx (register_name): Add parameter for the cgen MACH. Save
        it in hack_list->machine or p->machine.
        (cgen_disassemble): Add parameter for the cgen MACH. Pass it to
        register_name. Use it to set info->mach.
        (arch_hack): New field 'machine'.
        (bfd_lookup_arch): Make sure the machines match.
        * cgen-cpu.h (disassemble): Add parameter for the cgen MACH.
        * compCGEN.cxx (disassemble): Add parameter for the cgen MACH. Pass it
        to cgen_disassemble.
        * tracedis.h (cgen_disassemble): Add parameter for the cgen MACH.
@
text
@d47 1
a47 1
		 unsigned long isa_mask)
d53 1
a53 1
  info->insn_sets = isa_mask; /* may be 0 */
@


1.3
log
@* tracedis.cxx (bfd_get_arch, bfd_getb16, bfd_getl16, bfd_getb32)
(bfd_getl32, bfd_put_bits, bfd_get_bits, bfd_lookup_arch): These
definitions are meant to satisfy references in libopcodes, which
is C code, so declare these with 'extern "C"'.  Adjust types to
match those declared in the BFD header file.
@
text
@d3 1
a3 1
// Copyright (C) 2001, 2002 Red Hat.
d15 1
a15 1
void register_name(enum bfd_architecture, const char *);
d44 1
d49 1
a49 1
  register_name(arch, name);
d55 1
d179 1
d186 1
a186 1
register_name(enum bfd_architecture arch, const char *name)
d195 1
d204 1
d210 1
d222 1
a222 1
      if (b->arch == arch)
@


1.2
log
@* build fix

2003-01-09  Frank Ch. Eigler  <fche@@redhat.com>

        * tracedis.cxx (bfd_{get,put}_bits): Use int, not obsolete bfd
        boolean type.
@
text
@d77 1
a77 1
enum bfd_architecture
d85 2
a86 2
bfd_vma
bfd_getb16 (register const bfd_byte *addr)
d88 2
a89 1
  return (addr[0] << 8) | addr[1];
d92 2
a93 2
bfd_vma
bfd_getl16 (register const bfd_byte *addr)
d95 2
a96 1
  return (addr[1] << 8) | addr[0];
d99 2
a100 2
bfd_vma
bfd_getb32 (register const bfd_byte *addr)
d102 1
d105 4
a108 4
  v = (unsigned long) addr[0] << 24;
  v |= (unsigned long) addr[1] << 16;
  v |= (unsigned long) addr[2] << 8;
  v |= (unsigned long) addr[3];
d112 2
a113 2
bfd_vma
bfd_getl32 (register const bfd_byte *addr)
d115 1
d118 4
a121 4
  v = (unsigned long) addr[0];
  v |= (unsigned long) addr[1] << 8;
  v |= (unsigned long) addr[2] << 16;
  v |= (unsigned long) addr[3] << 24;
d125 2
a126 2
void
bfd_put_bits (bfd_vma data, bfd_byte* addr, int bits, int big_p)
d128 1
d140 1
a140 1
      addr[index] = (bfd_byte) data;
d146 2
a147 2
bfd_vma
bfd_get_bits (bfd_byte* addr, int bits, int big_p)
d149 2
a150 1
  bfd_vma data;
d163 1
a163 1
      data = (data << 8) | addr[index];
d208 1
a208 1
const bfd_arch_info_type *
@


1.1
log
@* contribute disassembler interface for C++:

2002-04-03  Ben Elliston  <bje@@redhat.com>

	* Makefile.am (TRACEDIS): Remove.
	(libcgencpu_la_SOURCES): Add tracedis.cxx.
	* tracedis.c: Rename from this ..
	* tracedis.cxx: .. to this.
	(trace_printf): New static function.
	(cgen_disassemble): Pass trace_printf with INIT_DISASSEMBLE_INFO.
	* compCGEN.cxx: Do not #include "tracedis.h" within extern "C".
@
text
@d122 1
a122 1
bfd_put_bits (bfd_vma data, bfd_byte* addr, int bits, boolean big_p)
d142 1
a142 1
bfd_get_bits (bfd_byte* addr, int bits, boolean big_p)
@

