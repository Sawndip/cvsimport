head	1.4;
access;
symbols
	sid-snapshot-20180601:1.4
	sid-snapshot-20180501:1.4
	sid-snapshot-20180401:1.4
	sid-snapshot-20180301:1.4
	sid-snapshot-20180201:1.4
	sid-snapshot-20180101:1.4
	sid-snapshot-20171201:1.4
	sid-snapshot-20171101:1.4
	sid-snapshot-20171001:1.4
	sid-snapshot-20170901:1.4
	sid-snapshot-20170801:1.4
	sid-snapshot-20170701:1.4
	sid-snapshot-20170601:1.4
	sid-snapshot-20170501:1.4
	sid-snapshot-20170401:1.4
	sid-snapshot-20170301:1.4
	sid-snapshot-20170201:1.4
	sid-snapshot-20170101:1.4
	sid-snapshot-20161201:1.4
	sid-snapshot-20161101:1.4
	sid-snapshot-20160901:1.4
	sid-snapshot-20160801:1.4
	sid-snapshot-20160701:1.4
	sid-snapshot-20160601:1.4
	sid-snapshot-20160501:1.4
	sid-snapshot-20160401:1.4
	sid-snapshot-20160301:1.4
	sid-snapshot-20160201:1.4
	sid-snapshot-20160101:1.4
	sid-snapshot-20151201:1.4
	sid-snapshot-20151101:1.4
	sid-snapshot-20151001:1.4
	sid-snapshot-20150901:1.4
	sid-snapshot-20150801:1.4
	sid-snapshot-20150701:1.4
	sid-snapshot-20150601:1.4
	sid-snapshot-20150501:1.4
	sid-snapshot-20150401:1.4
	sid-snapshot-20150301:1.4
	sid-snapshot-20150201:1.4
	sid-snapshot-20150101:1.4
	sid-snapshot-20141201:1.4
	sid-snapshot-20141101:1.4
	sid-snapshot-20141001:1.4
	sid-snapshot-20140901:1.4
	sid-snapshot-20140801:1.4
	sid-snapshot-20140701:1.4
	sid-snapshot-20140601:1.4
	sid-snapshot-20140501:1.4
	sid-snapshot-20140401:1.4
	sid-snapshot-20140301:1.4
	sid-snapshot-20140201:1.4
	sid-snapshot-20140101:1.4
	sid-snapshot-20131201:1.4
	sid-snapshot-20131101:1.4
	sid-snapshot-20131001:1.4
	sid-snapshot-20130901:1.4
	sid-snapshot-20130801:1.4
	sid-snapshot-20130701:1.4
	sid-snapshot-20130601:1.4
	sid-snapshot-20130501:1.4
	sid-snapshot-20130401:1.4
	sid-snapshot-20130301:1.4
	sid-snapshot-20130201:1.4
	sid-snapshot-20130101:1.4
	sid-snapshot-20121201:1.4
	sid-snapshot-20121101:1.4
	sid-snapshot-20121001:1.4
	sid-snapshot-20120901:1.4
	sid-snapshot-20120801:1.4
	sid-snapshot-20120701:1.4
	sid-snapshot-20120601:1.4
	sid-snapshot-20120501:1.4
	sid-snapshot-20120401:1.4
	sid-snapshot-20120301:1.4
	sid-snapshot-20120201:1.4
	sid-snapshot-20120101:1.4
	sid-snapshot-20111201:1.4
	sid-snapshot-20111101:1.4
	sid-snapshot-20111001:1.4
	sid-snapshot-20110901:1.4
	sid-snapshot-20110801:1.4
	sid-snapshot-20110701:1.4
	sid-snapshot-20110601:1.4
	sid-snapshot-20110501:1.4
	sid-snapshot-20110401:1.4
	sid-snapshot-20110301:1.4
	sid-snapshot-20110201:1.4
	sid-snapshot-20110101:1.4
	sid-snapshot-20101201:1.4
	sid-snapshot-20101101:1.4
	sid-snapshot-20101001:1.4
	sid-snapshot-20100901:1.4
	sid-snapshot-20100801:1.4
	sid-snapshot-20100701:1.4
	sid-snapshot-20100601:1.4
	sid-snapshot-20100501:1.4
	sid-snapshot-20100401:1.4
	sid-snapshot-20100301:1.4
	sid-snapshot-20100201:1.4
	sid-snapshot-20100101:1.3
	sid-snapshot-20091201:1.3
	sid-snapshot-20091101:1.3
	sid-snapshot-20091001:1.3
	sid-snapshot-20090901:1.3
	sid-snapshot-20090801:1.3
	sid-snapshot-20090701:1.3
	sid-snapshot-20090601:1.3
	sid-snapshot-20090501:1.3
	sid-snapshot-20090401:1.3
	sid-snapshot-20090301:1.3
	sid-snapshot-20090201:1.3
	sid-snapshot-20090101:1.3
	sid-snapshot-20081201:1.3
	sid-snapshot-20081101:1.3
	sid-snapshot-20081001:1.3
	sid-snapshot-20080901:1.3
	sid-snapshot-20080801:1.3
	sid-snapshot-20080701:1.3
	sid-snapshot-20080601:1.3
	sid-snapshot-20080501:1.3
	sid-snapshot-20080403:1.3
	sid-snapshot-20080401:1.3
	sid-snapshot-20080301:1.3
	sid-snapshot-20080201:1.3
	sid-snapshot-20080101:1.3
	sid-snapshot-20071201:1.3
	sid-snapshot-20071101:1.3
	sid-snapshot-20071001:1.3;
locks; strict;
comment	@ * @;


1.4
date	2010.01.25.03.55.05;	author devans;	state Exp;
branches;
next	1.3;

1.3
date	2006.06.14.19.02.24;	author brolley;	state Exp;
branches;
next	1.2;

1.2
date	2006.05.10.21.15.35;	author brolley;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.19.19.01.51;	author brolley;	state Exp;
branches;
next	;


desc
@@


1.4
log
@	* cgen-fpu.h (cgen_fp_ops): Update signatures of floating point
	conversion functions.
	* cgen-fpu.cxx (cgen_fp_ops): Ditto.
	* cgen-types (fpconv_kind): New enum.
	* fp.h (enum round_mode_t): Define values in terms of cgen's
	builtin values.

	sh/
	* sh.cxx (sh64_fldi0): Update call to floating point convertion func.
	(sh64_fldi1, sh64_fcnvds, sh64_fcnvsd, sh64_floatld, sh64_floatls,
	sh64_floatqd, sh64_floatqs, sh64_ftrcdl, sh64_ftrcsl, sh64_ftrcdq,
	sh64_ftrcsq, sh64_ftrvs): Ditto.
	* sh2a-fpu-cpu.h, * sh2e-cpu.h, * sh3e-cpu.h, * sh4-cpu.h,
	* sh4a-cpu.h, * sh5-cpu.h: Regenerate.
@
text
@// cgen-fpu.h - CPU components.  -*- C++ -*-
// CGEN fpu support for SID
//
// Copyright (C) 2005, 2010 Red Hat.
// This file is part of SID and is licensed under the GPL.
// See the file COPYING.SID for conditions for redistribution.

#ifndef CGEN_FPU_H
#define CGEN_FPU_H

#include "cgen-cpu.h"
#include "fp.h"

namespace cgen 
{
/* Floating point support is a little more complicated.
   We want to support using either host fp insns or an accurate fp library.
   We also want to support easily added variants (e.g. modified ieee).
   This is done by using a virtual helper class 'cgen_fp_ops'.  */
class cgen_fpu;

/* fpu operation class */
class cgen_fp_ops {
public: 
  // default is no error checking
  virtual void check_result (const cgen_fpu*, fp &) {}

  /* basic SF ops */
  virtual SF addsf (const cgen_fpu*, SF, SF);
  virtual SF subsf (const cgen_fpu*, SF, SF);
  virtual SF mulsf (const cgen_fpu*, SF, SF);
  virtual SF divsf (const cgen_fpu*, SF, SF);
  virtual SF negsf (const cgen_fpu*, SF);
  virtual SF abssf (const cgen_fpu*, SF);
  virtual SF sqrtsf (const cgen_fpu*, SF);
#if 0
  virtual SF invsf (const cgen_fpu*, SF);
  virtual SF cossf (const cgen_fpu*, SF);
  virtual SF sinsf (const cgen_fpu*, SF);
  virtual SF minsf (const cgen_fpu*, SF, SF);
  virtual SF maxsf (const cgen_fpu*, SF, SF);
#endif
  virtual int eqsf (const cgen_fpu*, SF, SF);
  virtual int nesf (const cgen_fpu*, SF, SF);
  virtual int ltsf (const cgen_fpu*, SF, SF);
  virtual int lesf (const cgen_fpu*, SF, SF);
  virtual int gtsf (const cgen_fpu*, SF, SF);
  virtual int gesf (const cgen_fpu*, SF, SF);
  virtual int unorderedsf (const cgen_fpu*, SF, SF);

  /* basic DF ops */
  virtual DF adddf (const cgen_fpu*, DF, DF);
  virtual DF subdf (const cgen_fpu*, DF, DF);
  virtual DF muldf (const cgen_fpu*, DF, DF);
  virtual DF divdf (const cgen_fpu*, DF, DF);
  virtual DF negdf (const cgen_fpu*, DF);
  virtual DF absdf (const cgen_fpu*, DF);
  virtual DF sqrtdf (const cgen_fpu*, DF);
#if 0
  virtual DF invdf (const cgen_fpu*, DF);
  virtual DF cosdf (const cgen_fpu*, DF);
  virtual DF sindf (const cgen_fpu*, DF);
  virtual DF mindf (const cgen_fpu*, DF, DF);
  virtual DF maxdf (const cgen_fpu*, DF, DF);
#endif
  virtual int eqdf (const cgen_fpu*, DF, DF);
  virtual int nedf (const cgen_fpu*, DF, DF);
  virtual int ltdf (const cgen_fpu*, DF, DF);
  virtual int ledf (const cgen_fpu*, DF, DF);
  virtual int gtdf (const cgen_fpu*, DF, DF);
  virtual int gedf (const cgen_fpu*, DF, DF);
  virtual int unordereddf (const cgen_fpu*, DF, DF);

  /* SF/DF conversion ops */
  virtual DF fextsfdf (const cgen_fpu*, int, SF);
  virtual SF ftruncdfsf (const cgen_fpu*, int, DF);

  virtual SF floatsisf (const cgen_fpu*, int, SI);
  virtual SF floatdisf (const cgen_fpu*, int, DI);
#if 0 // not implemented yet
  virtual SF ufloatsisf (const cgen_fpu*, int, USI);
  virtual SF ufloatdisf (const cgen_fpu*, int, UDI);
#endif // not implemented yet

  virtual SI fixsfsi (const cgen_fpu*, int, SF);
  virtual DI fixsfdi (const cgen_fpu*, int, SF);
#if 0 // not implemented yet
  virtual USI ufixsfsi (const cgen_fpu*, int, SF);
  virtual UDI ufixsfdi (const cgen_fpu*, int, SF);
#endif
  virtual DF floatsidf (const cgen_fpu*, int, SI);
  virtual DF floatdidf (const cgen_fpu*, int, DI);
#if 0
  virtual DF ufloatsidf (const cgen_fpu*, int, USI);
  virtual DF ufloatdidf (const cgen_fpu*, int, UDI);
#endif
  virtual SI fixdfsi (const cgen_fpu*, int, DF);
  virtual DI fixdfdi (const cgen_fpu*, int, DF);
#if 0
  virtual USI ufixdfsi (const cgen_fpu*, int, DF);
  virtual UDI ufixdfdi (const cgen_fpu*, int, DF);

  /* XF mode support (kept separate 'cus not always present) */
  virtual XF addxf (const cgen_fpu*, XF, XF);
  virtual XF subxf (const cgen_fpu*, XF, XF);
  virtual XF mulxf (const cgen_fpu*, XF, XF);
  virtual XF divxf (const cgen_fpu*, XF, XF);
  virtual XF negxf (const cgen_fpu*, XF);
  virtual XF absxf (const cgen_fpu*, XF);
  virtual XF sqrtxf (const cgen_fpu*, XF);
  virtual XF invxf (const cgen_fpu*, XF);
  virtual XF cosxf (const cgen_fpu*, XF);
  virtual XF sinxf (const cgen_fpu*, XF);
  virtual XF minxf (const cgen_fpu*, XF, XF);
  virtual XF maxxf (const cgen_fpu*, XF, XF);

  virtual int eqxf (const cgen_fpu*, XF, XF);
  virtual int nexf (const cgen_fpu*, XF, XF);
  virtual int ltxf (const cgen_fpu*, XF, XF);
  virtual int lexf (const cgen_fpu*, XF, XF);
  virtual int gtxf (const cgen_fpu*, XF, XF);
  virtual int gexf (const cgen_fpu*, XF, XF);

  virtual XF extsfxf (const cgen_fpu*, int, SF);
  virtual XF extdfxf (const cgen_fpu*, int, DF);
  virtual SF truncxfsf (const cgen_fpu*, int, XF);
  virtual DF truncxfdf (const cgen_fpu*, int, XF);

  virtual XF floatsixf (const cgen_fpu*, int, SI);
  virtual XF floatdixf (const cgen_fpu*, int, DI);
  virtual XF ufloatsixf (const cgen_fpu*, int, USI);
  virtual XF ufloatdixf (const cgen_fpu*, int, UDI);

  virtual SI fixxfsi (const cgen_fpu*, int, XF);
  virtual DI fixxfdi (const cgen_fpu*, int, XF);
  virtual USI ufixxfsi (const cgen_fpu*, int, XF);
  virtual UDI ufixxfdi (const cgen_fpu*, int, XF);

  /* TF mode support (kept separate 'cus not always present) */
  virtual TF addtf (const cgen_fpu*, TF, TF);
  virtual TF subtf (const cgen_fpu*, TF, TF);
  virtual TF multf (const cgen_fpu*, TF, TF);
  virtual TF divtf (const cgen_fpu*, TF, TF);
  virtual TF negtf (const cgen_fpu*, TF);
  virtual TF abstf (const cgen_fpu*, TF);
  virtual TF sqrttf (const cgen_fpu*, TF);
  virtual TF invtf (const cgen_fpu*, TF);
  virtual TF costf (const cgen_fpu*, TF);
  virtual TF sintf (const cgen_fpu*, TF);
  virtual TF mintf (const cgen_fpu*, TF, TF);
  virtual TF maxtf (const cgen_fpu*, TF, TF);

  virtual int eqtf (const cgen_fpu*, TF, TF);
  virtual int netf (const cgen_fpu*, TF, TF);
  virtual int lttf (const cgen_fpu*, TF, TF);
  virtual int letf (const cgen_fpu*, TF, TF);
  virtual int gttf (const cgen_fpu*, TF, TF);
  virtual int getf (const cgen_fpu*, TF, TF);

  virtual TF extsftf (const cgen_fpu*, int, SF);
  virtual TF extdftf (const cgen_fpu*, int, DF);
  virtual SF trunctfsf (const cgen_fpu*, int, TF);
  virtual DF trunctfdf (const cgen_fpu*, int, TF);

  virtual TF floatsitf (const cgen_fpu*, int, SI);
  virtual TF floatditf (const cgen_fpu*, int, DI);
  virtual TF ufloatsitf (const cgen_fpu*, int, USI);
  virtual TF ufloatditf (const cgen_fpu*, int, UDI);

  virtual SI fixtfsi (const cgen_fpu*, int, TF);
  virtual DI fixtfdi (const cgen_fpu*, int, TF);
  virtual USI ufixtfsi (const cgen_fpu*, int, TF);
  virtual UDI ufixtfdi (const cgen_fpu*, int, TF);
#endif // not implemented yet
};

/* Instance of an fpu.  */
class cgen_fpu {
 public:
  cgen_fpu (cgen_bi_endian_cpu *c, cgen_fp_ops *o) : owner (c), ops (o) {}
  cgen_bi_endian_cpu* owner;
  cgen_fp_ops* ops;
};

}; // namespace cgen 

#endif /* CGEN_FPU_H */
@


1.3
log
@2006-06-14  Dave Brolley  <brolley@@redhat.com>

        * cgen-fpu.h (cgen_fp_ops): All operations now take
        const cgen_fpu*.
        * cgen-fpu.cxx: Likewise.
@
text
@d4 1
a4 1
// Copyright (C) 2005 Red Hat.
d75 2
a76 2
  virtual DF fextsfdf (const cgen_fpu*, SF);
  virtual SF ftruncdfsf (const cgen_fpu*, DF);
d78 2
a79 2
  virtual SF floatsisf (const cgen_fpu*, SI);
  virtual SF floatdisf (const cgen_fpu*, DI);
d81 2
a82 2
  virtual SF ufloatsisf (const cgen_fpu*, USI);
  virtual SF ufloatdisf (const cgen_fpu*, UDI);
d85 2
a86 2
  virtual SI fixsfsi (const cgen_fpu*, SF);
  virtual DI fixsfdi (const cgen_fpu*, SF);
d88 2
a89 2
  virtual USI ufixsfsi (const cgen_fpu*, SF);
  virtual UDI ufixsfdi (const cgen_fpu*, SF);
d91 2
a92 2
  virtual DF floatsidf (const cgen_fpu*, SI);
  virtual DF floatdidf (const cgen_fpu*, DI);
d94 2
a95 2
  virtual DF ufloatsidf (const cgen_fpu*, USI);
  virtual DF ufloatdidf (const cgen_fpu*, UDI);
d97 2
a98 2
  virtual SI fixdfsi (const cgen_fpu*, DF);
  virtual DI fixdfdi (const cgen_fpu*, DF);
d100 2
a101 2
  virtual USI ufixdfsi (const cgen_fpu*, DF);
  virtual UDI ufixdfdi (const cgen_fpu*, DF);
d124 14
a137 14
  virtual XF extsfxf (const cgen_fpu*, SF);
  virtual XF extdfxf (const cgen_fpu*, DF);
  virtual SF truncxfsf (const cgen_fpu*, XF);
  virtual DF truncxfdf (const cgen_fpu*, XF);

  virtual XF floatsixf (const cgen_fpu*, SI);
  virtual XF floatdixf (const cgen_fpu*, DI);
  virtual XF ufloatsixf (const cgen_fpu*, USI);
  virtual XF ufloatdixf (const cgen_fpu*, UDI);

  virtual SI fixxfsi (const cgen_fpu*, XF);
  virtual DI fixxfdi (const cgen_fpu*, XF);
  virtual USI ufixxfsi (const cgen_fpu*, XF);
  virtual UDI ufixxfdi (const cgen_fpu*, XF);
d160 14
a173 14
  virtual TF extsftf (const cgen_fpu*, SF);
  virtual TF extdftf (const cgen_fpu*, DF);
  virtual SF trunctfsf (const cgen_fpu*, TF);
  virtual DF trunctfdf (const cgen_fpu*, TF);

  virtual TF floatsitf (const cgen_fpu*, SI);
  virtual TF floatditf (const cgen_fpu*, DI);
  virtual TF ufloatsitf (const cgen_fpu*, USI);
  virtual TF ufloatditf (const cgen_fpu*, UDI);

  virtual SI fixtfsi (const cgen_fpu*, TF);
  virtual DI fixtfdi (const cgen_fpu*, TF);
  virtual USI ufixtfsi (const cgen_fpu*, TF);
  virtual UDI ufixtfdi (const cgen_fpu*, TF);
@


1.2
log
@2006-05-10  Dave Brolley  <brolley@@redhat.com>

        * fp.cxx (fp::integer (long long&, round_mode_t)): New method.
        (fp::integer (unsigned long long&, round_mode_t)): New method.
        * fp.h: Likewise.
        * cgen-fpu.cxx (unorderedsf): New method.
        (adddf, subdf, muldf, divdf, negdf, absdf, sqrtdf): Implemented.
        (eqdf, ltdf, ledf, gtdf, gedf, gedf): Implemented.
        (unordereddf): New method.
        (unordereddf, fextsfdf): Implemented.
        (floatdisf, fixsfsi, fixsfdi, floatsidf, floatdidf, fixdfsi)
        (fixdfdi): Implemented.
        * cgen-fpu.h: Likewise.
@
text
@d26 1
a26 1
  virtual void check_result (cgen_fpu*, fp &) {}
d29 7
a35 7
  virtual SF addsf (cgen_fpu*, SF, SF);
  virtual SF subsf (cgen_fpu*, SF, SF);
  virtual SF mulsf (cgen_fpu*, SF, SF);
  virtual SF divsf (cgen_fpu*, SF, SF);
  virtual SF negsf (cgen_fpu*, SF);
  virtual SF abssf (cgen_fpu*, SF);
  virtual SF sqrtsf (cgen_fpu*, SF);
d37 5
a41 5
  virtual SF invsf (cgen_fpu*, SF);
  virtual SF cossf (cgen_fpu*, SF);
  virtual SF sinsf (cgen_fpu*, SF);
  virtual SF minsf (cgen_fpu*, SF, SF);
  virtual SF maxsf (cgen_fpu*, SF, SF);
d43 7
a49 7
  virtual int eqsf (cgen_fpu*, SF, SF);
  virtual int nesf (cgen_fpu*, SF, SF);
  virtual int ltsf (cgen_fpu*, SF, SF);
  virtual int lesf (cgen_fpu*, SF, SF);
  virtual int gtsf (cgen_fpu*, SF, SF);
  virtual int gesf (cgen_fpu*, SF, SF);
  virtual int unorderedsf (cgen_fpu*, SF, SF);
d52 7
a58 7
  virtual DF adddf (cgen_fpu*, DF, DF);
  virtual DF subdf (cgen_fpu*, DF, DF);
  virtual DF muldf (cgen_fpu*, DF, DF);
  virtual DF divdf (cgen_fpu*, DF, DF);
  virtual DF negdf (cgen_fpu*, DF);
  virtual DF absdf (cgen_fpu*, DF);
  virtual DF sqrtdf (cgen_fpu*, DF);
d60 5
a64 5
  virtual DF invdf (cgen_fpu*, DF);
  virtual DF cosdf (cgen_fpu*, DF);
  virtual DF sindf (cgen_fpu*, DF);
  virtual DF mindf (cgen_fpu*, DF, DF);
  virtual DF maxdf (cgen_fpu*, DF, DF);
d66 7
a72 7
  virtual int eqdf (cgen_fpu*, DF, DF);
  virtual int nedf (cgen_fpu*, DF, DF);
  virtual int ltdf (cgen_fpu*, DF, DF);
  virtual int ledf (cgen_fpu*, DF, DF);
  virtual int gtdf (cgen_fpu*, DF, DF);
  virtual int gedf (cgen_fpu*, DF, DF);
  virtual int unordereddf (cgen_fpu*, DF, DF);
d75 2
a76 2
  virtual DF fextsfdf (cgen_fpu*, SF);
  virtual SF ftruncdfsf (cgen_fpu*, DF);
d78 2
a79 2
  virtual SF floatsisf (cgen_fpu*, SI);
  virtual SF floatdisf (cgen_fpu*, DI);
d81 2
a82 2
  virtual SF ufloatsisf (cgen_fpu*, USI);
  virtual SF ufloatdisf (cgen_fpu*, UDI);
d85 2
a86 2
  virtual SI fixsfsi (cgen_fpu*, SF);
  virtual DI fixsfdi (cgen_fpu*, SF);
d88 2
a89 2
  virtual USI ufixsfsi (cgen_fpu*, SF);
  virtual UDI ufixsfdi (cgen_fpu*, SF);
d91 2
a92 2
  virtual DF floatsidf (cgen_fpu*, SI);
  virtual DF floatdidf (cgen_fpu*, DI);
d94 2
a95 2
  virtual DF ufloatsidf (cgen_fpu*, USI);
  virtual DF ufloatdidf (cgen_fpu*, UDI);
d97 2
a98 2
  virtual SI fixdfsi (cgen_fpu*, DF);
  virtual DI fixdfdi (cgen_fpu*, DF);
d100 2
a101 2
  virtual USI ufixdfsi (cgen_fpu*, DF);
  virtual UDI ufixdfdi (cgen_fpu*, DF);
d104 34
a137 34
  virtual XF addxf (cgen_fpu*, XF, XF);
  virtual XF subxf (cgen_fpu*, XF, XF);
  virtual XF mulxf (cgen_fpu*, XF, XF);
  virtual XF divxf (cgen_fpu*, XF, XF);
  virtual XF negxf (cgen_fpu*, XF);
  virtual XF absxf (cgen_fpu*, XF);
  virtual XF sqrtxf (cgen_fpu*, XF);
  virtual XF invxf (cgen_fpu*, XF);
  virtual XF cosxf (cgen_fpu*, XF);
  virtual XF sinxf (cgen_fpu*, XF);
  virtual XF minxf (cgen_fpu*, XF, XF);
  virtual XF maxxf (cgen_fpu*, XF, XF);

  virtual int eqxf (cgen_fpu*, XF, XF);
  virtual int nexf (cgen_fpu*, XF, XF);
  virtual int ltxf (cgen_fpu*, XF, XF);
  virtual int lexf (cgen_fpu*, XF, XF);
  virtual int gtxf (cgen_fpu*, XF, XF);
  virtual int gexf (cgen_fpu*, XF, XF);

  virtual XF extsfxf (cgen_fpu*, SF);
  virtual XF extdfxf (cgen_fpu*, DF);
  virtual SF truncxfsf (cgen_fpu*, XF);
  virtual DF truncxfdf (cgen_fpu*, XF);

  virtual XF floatsixf (cgen_fpu*, SI);
  virtual XF floatdixf (cgen_fpu*, DI);
  virtual XF ufloatsixf (cgen_fpu*, USI);
  virtual XF ufloatdixf (cgen_fpu*, UDI);

  virtual SI fixxfsi (cgen_fpu*, XF);
  virtual DI fixxfdi (cgen_fpu*, XF);
  virtual USI ufixxfsi (cgen_fpu*, XF);
  virtual UDI ufixxfdi (cgen_fpu*, XF);
d140 34
a173 34
  virtual TF addtf (cgen_fpu*, TF, TF);
  virtual TF subtf (cgen_fpu*, TF, TF);
  virtual TF multf (cgen_fpu*, TF, TF);
  virtual TF divtf (cgen_fpu*, TF, TF);
  virtual TF negtf (cgen_fpu*, TF);
  virtual TF abstf (cgen_fpu*, TF);
  virtual TF sqrttf (cgen_fpu*, TF);
  virtual TF invtf (cgen_fpu*, TF);
  virtual TF costf (cgen_fpu*, TF);
  virtual TF sintf (cgen_fpu*, TF);
  virtual TF mintf (cgen_fpu*, TF, TF);
  virtual TF maxtf (cgen_fpu*, TF, TF);

  virtual int eqtf (cgen_fpu*, TF, TF);
  virtual int netf (cgen_fpu*, TF, TF);
  virtual int lttf (cgen_fpu*, TF, TF);
  virtual int letf (cgen_fpu*, TF, TF);
  virtual int gttf (cgen_fpu*, TF, TF);
  virtual int getf (cgen_fpu*, TF, TF);

  virtual TF extsftf (cgen_fpu*, SF);
  virtual TF extdftf (cgen_fpu*, DF);
  virtual SF trunctfsf (cgen_fpu*, TF);
  virtual DF trunctfdf (cgen_fpu*, TF);

  virtual TF floatsitf (cgen_fpu*, SI);
  virtual TF floatditf (cgen_fpu*, DI);
  virtual TF ufloatsitf (cgen_fpu*, USI);
  virtual TF ufloatditf (cgen_fpu*, UDI);

  virtual SI fixtfsi (cgen_fpu*, TF);
  virtual DI fixtfdi (cgen_fpu*, TF);
  virtual USI ufixtfsi (cgen_fpu*, TF);
  virtual UDI ufixtfdi (cgen_fpu*, TF);
@


1.1
log
@2005-08-19  Dave Brolley  <brolley@@redhat.com>

        * cgen-fpu.cxx: New file.
        * cgen-fpu.h: New file.
        * Makefile.am (libcgencpu_la_SOURCES): Add cgen-fpu.cxx.
        * Makefile.in: Regenerated.
        * Contribute the following enhancements to floating point
        support:

        2005-06-14  Dave Brolley  <brolley@@redhat.com>

        * fp.h (do_round,do_normal_round,do_normal_underflow,do_normal_overflow)
:
        Now virtual.
        * fp.cxx (do_normal_overflow): Round up to infinity only if
        the result is positive.
        (operator-): Don't apply 'neg' to a nan.
        (neg): Return src if it is a qnan.

        2005-05-20  Dave Brolley  <brolley@@redhat.com>

        * fp.cxx (pack_any): Ensure that nan results have a positive sign.
        (operator-): Simply call operator+ with the rhs negated.
        * fp.h (is_negative): New method of fp.

        2005-05-13  Dave Brolley  <brolley@@redhat.com>

        * fp.h (fp): All arithmetic operator methods are now members
        of class fp.
        * fp.cxx (fp): Likewise.

        2005-04-27  Dave Brolley  <brolley@@redhat.com>

        * fp.cxx (fp::unpack): Only perform sanity check for non-nans.

        2005-04-12  Dave Brolley  <brolley@@redhat.com>

        * fp.h: Move static constants and functions to top of file for
        visibility within the file.
        (get_status): New method of fp.
        (get_class): Likewise.
        (qnan_fraction): Likewise.
        (snan_fraction): Likewise.
        (qnan_exponent): Likewise.
        (snan_exponent): Likewise.
        * fp.cxx (fp_to_int): throw fp::overflow for overflow.
        (pack_any): Use [sq]nan_{exponent,fraction} to construct nans.
        (unpack): Initialize status to 'ok'. Set class and status using
        is_qnan_fraction and is_qnan respectively.

        2005-03-18  Dave Brolley  <brolley@@redhat.com>

        * fp.cxx: Move static items from here.
        * fp.h: To here. Make some methods virtual. Make private members
        protected.
        (is_inexact): New method.
@
text
@d49 1
a50 1
#if 0
d59 1
d65 1
a65 1

d72 1
a76 1
#endif // not implemented yet
d79 1
a80 1
  virtual SF floatdisf (cgen_fpu*, DI);
d86 1
a87 1
  virtual DI fixsfdi (cgen_fpu*, SF);
d90 1
a90 1

d93 1
d96 1
a96 1

d99 1
@

