head	1.3;
access;
symbols
	sid-snapshot-20180601:1.3
	sid-snapshot-20180501:1.3
	sid-snapshot-20180401:1.3
	sid-snapshot-20180301:1.3
	sid-snapshot-20180201:1.3
	sid-snapshot-20180101:1.3
	sid-snapshot-20171201:1.3
	sid-snapshot-20171101:1.3
	sid-snapshot-20171001:1.3
	sid-snapshot-20170901:1.3
	sid-snapshot-20170801:1.3
	sid-snapshot-20170701:1.3
	sid-snapshot-20170601:1.3
	sid-snapshot-20170501:1.3
	sid-snapshot-20170401:1.3
	sid-snapshot-20170301:1.3
	sid-snapshot-20170201:1.3
	sid-snapshot-20170101:1.3
	sid-snapshot-20161201:1.3
	sid-snapshot-20161101:1.3
	sid-snapshot-20160901:1.3
	sid-snapshot-20160801:1.3
	sid-snapshot-20160701:1.3
	sid-snapshot-20160601:1.3
	sid-snapshot-20160501:1.3
	sid-snapshot-20160401:1.3
	sid-snapshot-20160301:1.3
	sid-snapshot-20160201:1.3
	sid-snapshot-20160101:1.3
	sid-snapshot-20151201:1.3
	sid-snapshot-20151101:1.3
	sid-snapshot-20151001:1.3
	sid-snapshot-20150901:1.3
	sid-snapshot-20150801:1.3
	sid-snapshot-20150701:1.3
	sid-snapshot-20150601:1.3
	sid-snapshot-20150501:1.3
	sid-snapshot-20150401:1.3
	sid-snapshot-20150301:1.3
	sid-snapshot-20150201:1.3
	sid-snapshot-20150101:1.3
	sid-snapshot-20141201:1.3
	sid-snapshot-20141101:1.3
	sid-snapshot-20141001:1.3
	sid-snapshot-20140901:1.3
	sid-snapshot-20140801:1.3
	sid-snapshot-20140701:1.3
	sid-snapshot-20140601:1.3
	sid-snapshot-20140501:1.3
	sid-snapshot-20140401:1.3
	sid-snapshot-20140301:1.3
	sid-snapshot-20140201:1.3
	sid-snapshot-20140101:1.3
	sid-snapshot-20131201:1.3
	sid-snapshot-20131101:1.3
	sid-snapshot-20131001:1.3
	sid-snapshot-20130901:1.3
	sid-snapshot-20130801:1.3
	sid-snapshot-20130701:1.3
	sid-snapshot-20130601:1.3
	sid-snapshot-20130501:1.3
	sid-snapshot-20130401:1.3
	sid-snapshot-20130301:1.3
	sid-snapshot-20130201:1.3
	sid-snapshot-20130101:1.3
	sid-snapshot-20121201:1.3
	sid-snapshot-20121101:1.3
	sid-snapshot-20121001:1.3
	sid-snapshot-20120901:1.3
	sid-snapshot-20120801:1.3
	sid-snapshot-20120701:1.3
	sid-snapshot-20120601:1.3
	sid-snapshot-20120501:1.3
	sid-snapshot-20120401:1.3
	sid-snapshot-20120301:1.3
	sid-snapshot-20120201:1.3
	sid-snapshot-20120101:1.3
	sid-snapshot-20111201:1.3
	sid-snapshot-20111101:1.3
	sid-snapshot-20111001:1.3
	sid-snapshot-20110901:1.3
	sid-snapshot-20110801:1.3
	sid-snapshot-20110701:1.3
	sid-snapshot-20110601:1.3
	sid-snapshot-20110501:1.3
	sid-snapshot-20110401:1.3
	sid-snapshot-20110301:1.3
	sid-snapshot-20110201:1.3
	sid-snapshot-20110101:1.3
	sid-snapshot-20101201:1.3
	sid-snapshot-20101101:1.3
	sid-snapshot-20101001:1.3
	sid-snapshot-20100901:1.3
	sid-snapshot-20100801:1.3
	sid-snapshot-20100701:1.3
	sid-snapshot-20100601:1.3
	sid-snapshot-20100501:1.3
	sid-snapshot-20100401:1.3
	sid-snapshot-20100301:1.3
	sid-snapshot-20100201:1.3
	sid-snapshot-20100101:1.3
	sid-snapshot-20091201:1.3
	sid-snapshot-20091101:1.3
	sid-snapshot-20091001:1.3
	sid-snapshot-20090901:1.3
	sid-snapshot-20090801:1.3
	sid-snapshot-20090701:1.3
	sid-snapshot-20090601:1.3
	sid-snapshot-20090501:1.3
	sid-snapshot-20090401:1.3
	sid-snapshot-20090301:1.3
	sid-snapshot-20090201:1.3
	sid-snapshot-20090101:1.3
	sid-snapshot-20081201:1.3
	sid-snapshot-20081101:1.3
	sid-snapshot-20081001:1.3
	sid-snapshot-20080901:1.3
	sid-snapshot-20080801:1.3
	sid-snapshot-20080701:1.3
	sid-snapshot-20080601:1.3
	sid-snapshot-20080501:1.3
	sid-snapshot-20080403:1.3
	sid-snapshot-20080401:1.3
	sid-snapshot-20080301:1.3
	sid-snapshot-20080201:1.3
	sid-snapshot-20080101:1.3
	sid-snapshot-20071201:1.3
	sid-snapshot-20071101:1.3
	sid-snapshot-20071001:1.3
	sid-20020905-branchpoint:1.1
	sid-20020905-branch:1.1.0.2
	cygnus_cvs_20020108_pre:1.1;
locks; strict;
comment	@# @;


1.3
date	2006.07.14.19.42.53;	author brolley;	state Exp;
branches;
next	1.2;

1.2
date	2003.06.10.18.28.19;	author brolley;	state Exp;
branches;
next	1.1;

1.1
date	2001.08.03.01.47.52;	author bje;	state Exp;
branches;
next	;


desc
@@


1.3
log
@2006-07-14  Dave Brolley  <brolley@@redhat.com>

        * stdio.cxx (stdioConsole): Initialize eof_p. Add "eof" pin.
        (read): Remove 'value'. Check eof_p. Drive eof_pin and set
        eof_p as needed.
        * components.h (eof_pin): New member of stdioConsole.
        (eof_p): Likewise.
        * sid-io-stdio.xml: Document eof pin.
        * sid-io-stdio.txt: Regenerated.
@
text
@<?xml version="1.0" ?>
<!DOCTYPE defcomplib SYSTEM "http://sources.redhat.com/sid/component.dtd">

<defcomplib lib="libconsoles.la" dlsym="console_component_library">
  <defcomponent name="sid-io-stdio" type="concrete">


    <!-- pins -->
    <defpin name="poll" direction="in" legalvalues="N/A" behaviors="input" />
    <defpin name="stdin" direction="out" legalvalues="any character code" behaviors="input" />
    <defpin name="eof" direction="out" legalvalues="boolean" behaviors="input" />
    <defpin name="stdout" direction="in" legalvalues="any character code" behaviors="output" />


    <!-- attributes -->
    <defattribute name="state-snapshot" legalvalues="opaque string" behaviors="state save/restore" />
  </defcomponent>
  <synop>
  This component performs input/output on the standard input/output. 
  </synop>
  <func>
    <modelling>

<p>
    This component acts as an interface between the host system's
    stdio streams and pins in the simulated system.
</p>

<p>
    This component uses non-blocking I/O on the host. It cannot use
    blocking I/O because the entire simulation would block. As a
    result, this component requires time slices from the simulator to
    check for pending data that must be read from <tt>stdin</tt>.  To do this,
    you can use a common scheduler component (<complib>sid-sched-*</complib>) to
    efficiently yield time to the <component>sid-io-stdio</component>
    component.  However, you should carefully consider the choice of
    the time interval to be used by the scheduler.  We recommend
    approximately 10 times per second.
</p>
    </modelling>

    <behavior name="output">
    When the <pin>stdout</pin> input pin is driven with a value between 0 and
    255, the value is immediately written to stdout.
    </behavior>

    <behavior name="input">
    When the <pin>poll</pin> pin is driven, the <tt>stdin</tt> stream is checked for
    unread input, without blocking.  If end of file has not been detected, the <pin>eof</pin>
    pin is driven with the value 0. All available input is consumed,
    and transmitted individually by driving the <pin>stdin</pin> pin with each
    byte, in sequence. When end of file is detected, the <pin>eof</pin> is driven with
    a value of 1 and no data is transmitted via the <pin>stdin</pin> pin.

    </behavior>

    <convention name="functional" supported="true"/>
    <convention name="save/restore" supported="true">
      <p>null state save/restore.</p>
    </convention>
  </func>
  
  

  <env>
    <title>Related components</title>

<p>
    See sid-io-fileio for writing to a stream.
</p>
<p>
    You can connect a stdio console to a serial data transmission
    component, such as a UART. You can also connect it to a 
    ROM monitor/system call emulator, such as the <complib>sw-gloss-arm/angel</complib> 
    which performs I/O across some sort of debug channel.
    In order for a stdio console component to collect data from
    standard input without blocking the entire simulation,
    non-blocking I/O is used. It is necessary to give simulation time
    to the component to collect any data from stdin and to buffer the data.
    To do this, you can use the common scheduler component (see
    Functionality, Modelling).
</p>    

<p>
    The following is an example of how a stdio console might be 
    configured to connect into a system:
</p>

<code>	new sid-sched-host sched
	new sw-gloss-arm/angel angel
	new sid-io-stdio stdio
	set sched enabled? 1
	set sched num-clients 1
	set sched 0-regular? 1
	set sched 0-time 50
	connect-pin sched 0-event -&gt; stdio poll
	connect-pin angel debug-tx -&gt; stdio stdout
	connect-pin angel debug-rx &lt;- stdio stdin

</code>
  </env>
</defcomplib>


@


1.2
log
@2003-06-10  Dave Brolley  <brolley@@redhat.com>

        * components.h (fileioConsole): New class.
        * components.cxx (compConsoleListTypes): Add sid-io-fileio.
        (compConsoleCreate): Handle sid-io-fileio.
        (compConsoleDelete): Handle fileioConsole.
        * Makefile.am (libconsoles_la_SOURCES): Add fileio.cxx
        (pkgdata_DATA): Add sid-io-fileio.txt.
        * Makefile.in Regenerated.
        * fileio.cxx: New file.
        * sid-io-fileio.txt: New file.
        * sid-io-fileio.xml: New file.
        * sid-io-stdio.xml: Refer to sid-io-fileio component.
        * sid-io-stdio.txt: Regenerated.
@
text
@d11 1
d49 2
a50 1
    unread input, without blocking.  All available input is consumed,
d52 3
a54 1
    byte, in sequence.
@


1.1
log
@* new XML documentation.
* ChangeLog entries to follow later.
@
text
@d65 3
@

