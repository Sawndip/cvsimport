head	1.6;
access;
symbols
	sid-snapshot-20180601:1.6
	sid-snapshot-20180501:1.6
	sid-snapshot-20180401:1.6
	sid-snapshot-20180301:1.6
	sid-snapshot-20180201:1.6
	sid-snapshot-20180101:1.6
	sid-snapshot-20171201:1.6
	sid-snapshot-20171101:1.6
	sid-snapshot-20171001:1.6
	sid-snapshot-20170901:1.6
	sid-snapshot-20170801:1.6
	sid-snapshot-20170701:1.6
	sid-snapshot-20170601:1.6
	sid-snapshot-20170501:1.6
	sid-snapshot-20170401:1.6
	sid-snapshot-20170301:1.6
	sid-snapshot-20170201:1.6
	sid-snapshot-20170101:1.6
	sid-snapshot-20161201:1.6
	sid-snapshot-20161101:1.6
	sid-snapshot-20160901:1.6
	sid-snapshot-20160801:1.6
	sid-snapshot-20160701:1.6
	sid-snapshot-20160601:1.6
	sid-snapshot-20160501:1.6
	sid-snapshot-20160401:1.6
	sid-snapshot-20160301:1.6
	sid-snapshot-20160201:1.6
	sid-snapshot-20160101:1.6
	sid-snapshot-20151201:1.6
	sid-snapshot-20151101:1.6
	sid-snapshot-20151001:1.6
	sid-snapshot-20150901:1.6
	sid-snapshot-20150801:1.6
	sid-snapshot-20150701:1.6
	sid-snapshot-20150601:1.6
	sid-snapshot-20150501:1.6
	sid-snapshot-20150401:1.6
	sid-snapshot-20150301:1.6
	sid-snapshot-20150201:1.6
	sid-snapshot-20150101:1.6
	sid-snapshot-20141201:1.6
	sid-snapshot-20141101:1.6
	sid-snapshot-20141001:1.6
	sid-snapshot-20140901:1.6
	sid-snapshot-20140801:1.6
	sid-snapshot-20140701:1.6
	sid-snapshot-20140601:1.6
	sid-snapshot-20140501:1.6
	sid-snapshot-20140401:1.6
	sid-snapshot-20140301:1.6
	sid-snapshot-20140201:1.6
	sid-snapshot-20140101:1.6
	sid-snapshot-20131201:1.6
	sid-snapshot-20131101:1.6
	sid-snapshot-20131001:1.6
	sid-snapshot-20130901:1.6
	sid-snapshot-20130801:1.6
	sid-snapshot-20130701:1.6
	sid-snapshot-20130601:1.6
	sid-snapshot-20130501:1.6
	sid-snapshot-20130401:1.6
	sid-snapshot-20130301:1.6
	sid-snapshot-20130201:1.6
	sid-snapshot-20130101:1.6
	sid-snapshot-20121201:1.6
	sid-snapshot-20121101:1.6
	sid-snapshot-20121001:1.6
	sid-snapshot-20120901:1.6
	sid-snapshot-20120801:1.6
	sid-snapshot-20120701:1.6
	sid-snapshot-20120601:1.6
	sid-snapshot-20120501:1.6
	sid-snapshot-20120401:1.6
	sid-snapshot-20120301:1.6
	sid-snapshot-20120201:1.6
	sid-snapshot-20120101:1.6
	sid-snapshot-20111201:1.6
	sid-snapshot-20111101:1.6
	sid-snapshot-20111001:1.6
	sid-snapshot-20110901:1.6
	sid-snapshot-20110801:1.6
	sid-snapshot-20110701:1.6
	sid-snapshot-20110601:1.6
	sid-snapshot-20110501:1.6
	sid-snapshot-20110401:1.6
	sid-snapshot-20110301:1.6
	sid-snapshot-20110201:1.6
	sid-snapshot-20110101:1.6
	sid-snapshot-20101201:1.6
	sid-snapshot-20101101:1.6
	sid-snapshot-20101001:1.6
	sid-snapshot-20100901:1.6
	sid-snapshot-20100801:1.6
	sid-snapshot-20100701:1.6
	sid-snapshot-20100601:1.6
	sid-snapshot-20100501:1.6
	sid-snapshot-20100401:1.6
	sid-snapshot-20100301:1.6
	sid-snapshot-20100201:1.6
	sid-snapshot-20100101:1.6
	sid-snapshot-20091201:1.6
	sid-snapshot-20091101:1.6
	sid-snapshot-20091001:1.6
	sid-snapshot-20090901:1.6
	sid-snapshot-20090801:1.6
	sid-snapshot-20090701:1.6
	sid-snapshot-20090601:1.6
	sid-snapshot-20090501:1.6
	sid-snapshot-20090401:1.6
	sid-snapshot-20090301:1.6
	sid-snapshot-20090201:1.6
	sid-snapshot-20090101:1.6
	sid-snapshot-20081201:1.6
	sid-snapshot-20081101:1.6
	sid-snapshot-20081001:1.6
	sid-snapshot-20080901:1.6
	sid-snapshot-20080801:1.6
	sid-snapshot-20080701:1.6
	sid-snapshot-20080601:1.6
	sid-snapshot-20080501:1.6
	sid-snapshot-20080403:1.6
	sid-snapshot-20080401:1.6
	sid-snapshot-20080301:1.6
	sid-snapshot-20080201:1.6
	sid-snapshot-20080101:1.6
	sid-snapshot-20071201:1.6
	sid-snapshot-20071101:1.6
	sid-snapshot-20071001:1.6
	sid-20020905-branchpoint:1.3
	sid-20020905-branch:1.3.0.2
	cygnus_cvs_20020108_pre:1.3;
locks; strict;
comment	@ * @;


1.6
date	2006.07.14.19.42.53;	author brolley;	state Exp;
branches;
next	1.5;

1.5
date	2005.08.19.19.43.09;	author brolley;	state Exp;
branches;
next	1.4;

1.4
date	2003.06.10.18.28.19;	author brolley;	state Exp;
branches;
next	1.3;

1.3
date	2001.08.03.06.02.43;	author mrg;	state Exp;
branches;
next	1.2;

1.2
date	2001.03.15.00.27.05;	author fche;	state Exp;
branches;
next	1.1;

1.1
date	2000.12.07.19.30.50;	author fche;	state Exp;
branches;
next	;


desc
@@


1.6
log
@2006-07-14  Dave Brolley  <brolley@@redhat.com>

        * stdio.cxx (stdioConsole): Initialize eof_p. Add "eof" pin.
        (read): Remove 'value'. Check eof_p. Drive eof_pin and set
        eof_p as needed.
        * components.h (eof_pin): New member of stdioConsole.
        (eof_p): Likewise.
        * sid-io-stdio.xml: Document eof pin.
        * sid-io-stdio.txt: Regenerated.
@
text
@// file.cxx - Joint header file for nearby component classes.
// -*- C++ -*-

// Copyright (C) 1999, 2000, 2003, 2005, 2006 Red Hat.
// This file is part of SID and is licensed under the GPL.
// See the file COPYING.SID for conditions for redistribution.

#include "config.h"

#include <sidcomp.h>
#include <sidso.h>
#include <sidcomputil.h>
#include <sidattrutil.h>
#include <sidpinutil.h>
#include <sidbusutil.h>
#include <sidtypes.h>
#include <sidmiscutil.h>
#include <sidschedutil.h>
#include <sidpinattrutil.h>

#include <vector>
#include <string>
#include <fstream>
#include <iostream>

#include <cstdlib>
#include <cerrno>
#include <ctime>
#include <cassert>
extern "C" {
#include <unistd.h>
#include <fcntl.h>
#include <unistd.h>
#define BSD_COMP
#include <sys/ioctl.h>
#if HAVE_NETINET_IN_H
#include <netinet/in.h>
#endif
#include <netinet/tcp.h>
#if HAVE_SYS_SOCKET_H
#include <sys/socket.h>
#endif
#if HAVE_ARPA_INET_H
#include <arpa/inet.h>
#endif
}


namespace console_stuff 
{

using std::vector;
using std::string;
using std::ostream;
using std::istream;
using std::cout;
using std::flush;
using std::cerr;
using std::endl;
  
using sid::component;
using sid::bus;
using sid::host_int_1;
using sid::host_int_2;
using sid::little_int_1;
using sid::host_int_4;
using sid::host_int_8;
using sid::component_library;
  
using sidutil::no_bus_component;
using sidutil::fixed_attribute_map_component;
using sidutil::fixed_pin_map_component;
using sidutil::no_accessor_component;
using sidutil::no_relation_component;
using sidutil::configurable_component;
using sidutil::output_pin;
using sidutil::callback_pin;
using sidutil::string2stream;
using sidutil::stream2string;
using sidutil::make_attribute;
using sidutil::parse_attribute;
using sidutil::scheduler_event_subscription;
using sidutil::std_error_string;
using sidutil::tokenize;
using sidutil::recursion_limited;
using sidutil::recursion_record;
using sidutil::make_numeric_attribute;


// -------------------------------------------------------------------------

class stdioConsole: public virtual component, 
		    protected fixed_attribute_map_component,
		    protected no_bus_component,
		    protected fixed_pin_map_component,
		    protected no_accessor_component,
		    protected no_relation_component
{
public:
  stdioConsole();

private:
  void write(host_int_4 value);
  void read(host_int_4);

  callback_pin<stdioConsole> activity_pin;
  callback_pin<stdioConsole> stdout_pin;
  output_pin stdin_pin;
  output_pin eof_pin;

  bool eof_p;

  // save & restore state
  string save_state ( );
  component::status restore_state (const string& state);
};


// -------------------------------------------------------------------------

class fileioConsole: public virtual component, 
		    protected fixed_attribute_map_component,
		    protected no_bus_component,
		    protected fixed_pin_map_component,
		    protected no_accessor_component,
		    protected no_relation_component
{
public:
  fileioConsole();
 ~fileioConsole () throw();

private:
  void filename_attribute_set ();

  void write(host_int_4 value);
  void closeOutStream ();

  callback_pin<fileioConsole> out_pin;

  // save & restore state
  string save_state ( );
  component::status restore_state (const string& state);

  string out_filename;
  ostream *out_stream;
};


// -------------------------------------------------------------------------

  class socketio: public virtual component,
		  protected no_bus_component,
		  protected virtual fixed_attribute_map_component,
		  protected virtual fixed_pin_map_component,
		  protected no_accessor_component,
		  protected no_relation_component,
		  protected virtual configurable_component,
		  protected recursion_limited
  {
  private:
    callback_pin<socketio> init_pin, fini_pin;
    void init_handler (host_int_4);
    void fini_handler (host_int_4);

    // mode settings
    bool server_p; // server or client mode?
    bool verbose_p; // verbosity?
    bool trace_traffic_p; // trace all socket traffic?
    bool buffer_disconnected_p; // keep outbound data while disconnected?

    // this and other side 
    sockaddr_in sock_name;
    sockaddr_in peer_name;

    // outbound data
    callback_pin<socketio> out_pin;
    void tx_eof_handler();
    void tx_handler(host_int_4 value);
    // inbound data
    output_pin in_pin;

    // low level state
    int fd;
    int serv_fd;
    bool connected_p;
    string out_buffer;
    float avg_out_buffer_size;
    enum _bs { in_buffer_size = 2048 };
    char in_buffer [in_buffer_size];
    host_int_8 in_count;
    host_int_8 out_count;
    host_int_8 poll_count;

    // polling info
    friend class scheduler_event_subscription<socketio>;
    scheduler_event_subscription<socketio> poll_control;

    // Make these types small enough to avoid having to request long
    // delays from the scheduler.
    host_int_2 poll_interval;
    host_int_2 max_poll_interval;

    void asyncificate (int fd);
    void update_poll_interval();
    void poll ();
    void poll_connect ();
    void poll_receive ();
    void poll_transmit ();
    void wait_more();
    void wait_less();

    // state control
    friend ostream& operator << (ostream& o, const socketio& it);
    friend istream& operator >> (istream& i, socketio& it);
    string save_state () { return make_attribute(*this); }
    sid::component::status restore_state (const string& state)
      { return parse_attribute (state, *this); }

    virtual void configure (const string &config);

  public:
    socketio (bool server_p);
    ~socketio () throw();
  };


} // end of namespace console_stuff

@


1.5
log
@2005-08-19  Dave Brolley  <brolley@@redhat.com>

        * Contribute the following changes:

        2005-07-13  Dave Brolley  <brolley@@redhat.com>

        * components.h (socketio): Inherit virtually from
        fixed_attribute_map_component. Inherit from no_relation_component.

        2005-06-06  Dave Brolley  <brolley@@redhat.com>

        * components.h: Add using clause for sidutil::configurable_component.
        (socketio): fixed_pin_map_component and configurable_component inherited
        virtually. no_relation_component no longer inherited.
        (configure): New virtual override in socketio.
        * socketio.cxx (configure): Likewise.
        * sid-io-socket.xml: Add description of new interfaces.
        * sid-io-socket.txt: Regenerated.
@
text
@d4 1
a4 1
// Copyright (C) 1999, 2000, 2003, 2005 Red Hat.
d109 3
@


1.4
log
@2003-06-10  Dave Brolley  <brolley@@redhat.com>

        * components.h (fileioConsole): New class.
        * components.cxx (compConsoleListTypes): Add sid-io-fileio.
        (compConsoleCreate): Handle sid-io-fileio.
        (compConsoleDelete): Handle fileioConsole.
        * Makefile.am (libconsoles_la_SOURCES): Add fileio.cxx
        (pkgdata_DATA): Add sid-io-fileio.txt.
        * Makefile.in Regenerated.
        * fileio.cxx: New file.
        * sid-io-fileio.txt: New file.
        * sid-io-fileio.xml: New file.
        * sid-io-stdio.xml: Refer to sid-io-fileio component.
        * sid-io-stdio.txt: Regenerated.
@
text
@d4 1
a4 1
// Copyright (C) 1999, 2000, 2003 Red Hat.
d75 1
d150 2
a151 2
		  protected fixed_attribute_map_component,
		  protected fixed_pin_map_component,
d154 1
d216 1
@


1.3
log
@* make it compile with GCC 3.0:
        - missing throw() specifiers in bus & component dtors
	- `std::' vs `::' namespace issues
@
text
@d4 1
a4 1
// Copyright (C) 1999, 2000 Red Hat.
d112 1
d114 28
@


1.2
log
@* speedup

2001-03-14  Frank Ch. Eigler  <fche@@redhat.com>

        * socketio.cxx (asyncificate): Set TCP_NODELAY and SO_KEEPALIVE options.        (init_handler): Don't bother with SO_KEEPALIVE here.
        * components.h: #include <netinet/tcp.h>.
@
text
@d187 2
a188 1
    socketio(bool server_p);
@


1.1
log
@* public snapshot of sid simulator
@
text
@d39 1
@

