head	1.2;
access;
symbols
	sid-snapshot-20180601:1.2
	sid-snapshot-20180501:1.2
	sid-snapshot-20180401:1.2
	sid-snapshot-20180301:1.2
	sid-snapshot-20180201:1.2
	sid-snapshot-20180101:1.2
	sid-snapshot-20171201:1.2
	sid-snapshot-20171101:1.2
	sid-snapshot-20171001:1.2
	sid-snapshot-20170901:1.2
	sid-snapshot-20170801:1.2
	sid-snapshot-20170701:1.2
	sid-snapshot-20170601:1.2
	sid-snapshot-20170501:1.2
	sid-snapshot-20170401:1.2
	sid-snapshot-20170301:1.2
	sid-snapshot-20170201:1.2
	sid-snapshot-20170101:1.2
	sid-snapshot-20161201:1.2
	sid-snapshot-20161101:1.2
	sid-snapshot-20160901:1.2
	sid-snapshot-20160801:1.2
	sid-snapshot-20160701:1.2
	sid-snapshot-20160601:1.2
	sid-snapshot-20160501:1.2
	sid-snapshot-20160401:1.2
	sid-snapshot-20160301:1.2
	sid-snapshot-20160201:1.2
	sid-snapshot-20160101:1.2
	sid-snapshot-20151201:1.2
	sid-snapshot-20151101:1.2
	sid-snapshot-20151001:1.2
	sid-snapshot-20150901:1.2
	sid-snapshot-20150801:1.2
	sid-snapshot-20150701:1.2
	sid-snapshot-20150601:1.2
	sid-snapshot-20150501:1.2
	sid-snapshot-20150401:1.2
	sid-snapshot-20150301:1.2
	sid-snapshot-20150201:1.2
	sid-snapshot-20150101:1.2
	sid-snapshot-20141201:1.2
	sid-snapshot-20141101:1.2
	sid-snapshot-20141001:1.2
	sid-snapshot-20140901:1.2
	sid-snapshot-20140801:1.2
	sid-snapshot-20140701:1.2
	sid-snapshot-20140601:1.2
	sid-snapshot-20140501:1.2
	sid-snapshot-20140401:1.2
	sid-snapshot-20140301:1.2
	sid-snapshot-20140201:1.2
	sid-snapshot-20140101:1.2
	sid-snapshot-20131201:1.2
	sid-snapshot-20131101:1.2
	sid-snapshot-20131001:1.2
	sid-snapshot-20130901:1.2
	sid-snapshot-20130801:1.2
	sid-snapshot-20130701:1.2
	sid-snapshot-20130601:1.2
	sid-snapshot-20130501:1.2
	sid-snapshot-20130401:1.2
	sid-snapshot-20130301:1.2
	sid-snapshot-20130201:1.2
	sid-snapshot-20130101:1.2
	sid-snapshot-20121201:1.2
	sid-snapshot-20121101:1.2
	sid-snapshot-20121001:1.2
	sid-snapshot-20120901:1.2
	sid-snapshot-20120801:1.2
	sid-snapshot-20120701:1.2
	sid-snapshot-20120601:1.2
	sid-snapshot-20120501:1.2
	sid-snapshot-20120401:1.2
	sid-snapshot-20120301:1.2
	sid-snapshot-20120201:1.2
	sid-snapshot-20120101:1.2
	sid-snapshot-20111201:1.2
	sid-snapshot-20111101:1.2
	sid-snapshot-20111001:1.2
	sid-snapshot-20110901:1.2
	sid-snapshot-20110801:1.2
	sid-snapshot-20110701:1.2
	sid-snapshot-20110601:1.2
	sid-snapshot-20110501:1.2
	sid-snapshot-20110401:1.2
	sid-snapshot-20110301:1.2
	sid-snapshot-20110201:1.2
	sid-snapshot-20110101:1.2
	sid-snapshot-20101201:1.2
	sid-snapshot-20101101:1.2
	sid-snapshot-20101001:1.2
	sid-snapshot-20100901:1.2
	sid-snapshot-20100801:1.2
	sid-snapshot-20100701:1.2
	sid-snapshot-20100601:1.2
	sid-snapshot-20100501:1.2
	sid-snapshot-20100401:1.2
	sid-snapshot-20100301:1.2
	sid-snapshot-20100201:1.2
	sid-snapshot-20100101:1.2
	sid-snapshot-20091201:1.2
	sid-snapshot-20091101:1.2
	sid-snapshot-20091001:1.2
	sid-snapshot-20090901:1.2
	sid-snapshot-20090801:1.2
	sid-snapshot-20090701:1.2
	sid-snapshot-20090601:1.2
	sid-snapshot-20090501:1.2
	sid-snapshot-20090401:1.2
	sid-snapshot-20090301:1.2
	sid-snapshot-20090201:1.2
	sid-snapshot-20090101:1.2
	sid-snapshot-20081201:1.2
	sid-snapshot-20081101:1.2
	sid-snapshot-20081001:1.2
	sid-snapshot-20080901:1.2
	sid-snapshot-20080801:1.2
	sid-snapshot-20080701:1.2
	sid-snapshot-20080601:1.2
	sid-snapshot-20080501:1.2
	sid-snapshot-20080403:1.2
	sid-snapshot-20080401:1.2
	sid-snapshot-20080301:1.2
	sid-snapshot-20080201:1.2
	sid-snapshot-20080101:1.2
	sid-snapshot-20071201:1.2
	sid-snapshot-20071101:1.2
	sid-snapshot-20071001:1.2
	sid-20020905-branchpoint:1.1
	sid-20020905-branch:1.1.0.2
	cygnus_cvs_20020108_pre:1.1;
locks; strict;
comment	@# @;


1.2
date	2005.08.19.19.43.09;	author brolley;	state Exp;
branches;
next	1.1;

1.1
date	2001.08.03.01.47.52;	author bje;	state Exp;
branches;
next	;


desc
@@


1.2
log
@2005-08-19  Dave Brolley  <brolley@@redhat.com>

        * Contribute the following changes:

        2005-07-13  Dave Brolley  <brolley@@redhat.com>

        * components.h (socketio): Inherit virtually from
        fixed_attribute_map_component. Inherit from no_relation_component.

        2005-06-06  Dave Brolley  <brolley@@redhat.com>

        * components.h: Add using clause for sidutil::configurable_component.
        (socketio): fixed_pin_map_component and configurable_component inherited
        virtually. no_relation_component no longer inherited.
        (configure): New virtual override in socketio.
        * socketio.cxx (configure): Likewise.
        * sid-io-socket.xml: Add description of new interfaces.
        * sid-io-socket.txt: Regenerated.
@
text
@<?xml version="1.0" ?>
<!DOCTYPE defcomplib SYSTEM "http://sources.redhat.com/sid/component.dtd">

<defcomplib lib="libconsoles.la" dlsym="console_component_library">
  <defcomponent name="sid-io-socket" type="concrete">


    <!-- pins -->
    <defpin name="init" direction="in" legalvalues="N/A" behaviors="initialization" />
    <defpin name="fini" direction="in" legalvalues="N/A" behaviors="initialization" />
    <defpin name="tx" direction="in" legalvalues="byte or void" behaviors="pin i/o" />
    <defpin name="rx" direction="out" legalvalues="byte or void" behaviors="pin i/o" />
    <defpin name="poll-event" direction="in" legalvalues="any" behaviors="connection, socket i/o polling" />
    <defpin name="poll-control" direction="out" legalvalues="limited value" behaviors="connection, socket i/o polling" />


    <!-- attributes -->
    <defattribute name="tx-count" category="register" legalvalues="numeric" behaviors="socket i/o polling" />
    <defattribute name="tx-buffer" category="register" legalvalues="string" behaviors="pin i/o" />
    <defattribute name="rx-count" category="register" legalvalues="numeric" behaviors="socket i/o polling" />
    <defattribute name="poll-count" category="register" legalvalues="numeric" behaviors="socket i/o polling" />
    <defattribute name="avg-tx-buffer-size" category="register" legalvalues="floating point string" behaviors="pin i/o" />
    <defattribute name="server?" category="setting" legalvalues="boolean" defaultvalue="1/0" behaviors="initialization" />
    <defattribute name="sockaddr-local" category="setting/register" legalvalues="ipaddress:port" defaultvalue="0.0.0.0:0" behaviors="connection" />
    <defattribute name="sockaddr-peer" category="register/setting" legalvalues="ipaddress:port" defaultvalue="0.0.0.0:0" behaviors="connection" />
    <defattribute name="verbose?" category="setting" legalvalues="boolean" defaultvalue="0" behaviors="connection" />
    <defattribute name="trace-traffic?" category="setting" legalvalues="boolean" defaultvalue="0" behaviors="socket i/o polling" />
    <defattribute name="buffer-while-disconnected?" category="setting" legalvalues="boolean" defaultvalue="yes" behaviors="pin i/o" />
    <defattribute name="connected?" category="register" legalvalues="boolean" behaviors="connection" />
    <defattribute name="max-poll-interval" category="setting" legalvalues="numeric" defaultvalue="250" behaviors="socket i/o polling" />
    <defattribute name="poll-interval" category="register" legalvalues="numeric" behaviors="socket i/o polling" />
    <defattribute name="init" category="pin" legalvalues="numeric" behaviors="initialization" />
    <defattribute name="fini" category="pin" legalvalues="numeric" behaviors="initialization" />
    <defattribute name="tx" category="pin" legalvalues="numeric" behaviors="pin i/o" />
    <defattribute name="rx" category="pin" legalvalues="numeric" behaviors="pin i/o" />
    <defattribute name="configure!" category="setting" legalvalues="string" behaviors="configuration" />

    <!-- relationships -->
    <defrelationship name="dynamic-configurator"	behaviors="configuration" />

    <variants>
      <defcomponent name="sid-io-socket-client" type="concrete" />
      <defcomponent name="sid-io-socket-server" type="concrete" />
    </variants>

  </defcomponent>
  <synop>
    <p>
      Members of this family of components perform I/O on a TCP socket and relay data
      across a pair of pins to some other component.
    </p>
  </synop>
  <func>
    <modelling>
      <p>
	This simulated component uses non-blocking I/O on the host.
	Therefore it must be regularly polled, for example by a host-time
	scheduler.  This component is able to automatically regulate a
	scheduler subscription to produce fast response/throughput during
	high traffic times, or reduce CPU load in low traffic times.	
      </p>    
      <p>
	The <component>sid-io-socket-server</component> component implements a TCP server, and
	<component>sid-io-socket-client</component> implements a TCP client.  In other words,
	one expects an incoming socket connection, the other uses an
	outgoing socket connection.  The two components are otherwise
	interchangeable and are treated below as one kind.	
      </p>
      <p>    
	Multiple instances of these components coexist comfortably.
      </p>
    </modelling>
    <behavior name="initialization">

      <p> When the <pin>init</pin> pin is driven, the component creates and
      binds a file descriptor to the IP address specified by the
      <attribute>sockaddr-local</attribute> attribute.  The host operating system may
      assign some available TCP port number if the attribute is not
      set.  An actual TCP connection attempt is not made at this time.
      </p>
 
      <p> When the <pin>fini</pin> pin is driven, the component closes its file
      descriptors, thus closing its connection (if any).
      </p>
    </behavior>


    <behavior name="connection">
      <p> When the <pin>poll-event</pin> pin is driven, but no connection
      exists, a non-blocking TCP connect operation is attempted.  For
      a server, this means an <tt>accept()</tt> call, and for a client, a
      <tt>connect()</tt>.  The <attribute>server?</attribute> attribute will contain a boolean
      true value for the former, false for the latter.
      </p>

      <p> If the connection is successful, the <attribute>connected?</attribute> attribute
      is set to a true value, and the <attribute>sockaddr-peer</attribute> attribute is
      filled in.  If connection is ever lost, <attribute>connected?</attribute> is reset,
      and a new connection will be attempted at the next <pin>poll-event</pin>
      signal.
      </p>

      <p> If the <attribute>verbose?</attribute> attribute is set, a trace message is
      emitted whenever the connection status changes.
      </p>
    </behavior>

    <behavior name="pin i/o">
      <p> When the <pin>tx</pin> pin is driven with a value, the bottom 8 bits
      are extracted and enqueued in a transmit buffer.  The
      <attribute>tx-buffer</attribute> attribute provides a read-only view of the current
      buffer, and the <attribute>avg-tx-buffer-size</attribute> provides a moving average
      length of this buffer.  If a TCP connection does not exist, and
      <attribute>buffer-while-disconnected?</attribute> is set to a boolean false value,
      then bytes received on the <pin>tx</pin> pin are ignored instead of
      buffered.
      </p>
      <p>
	Whenever the <pin>tx</pin> pin is driven without value out of 0-255
	range, it is interpreted as an "end-of-file" indication, which
	causes the current socket connection, if any, to be shut down.
	Similarly, if the disconnection is caused by the peer, the
	<pin>rx</pin> pin is driven with an out-of-range value to signal an
	"end-of-file" condition.
      </p>

      <p>
	Whenever a character is received from the TCP socket, it is
	immediately transmitted on the <pin>rx</pin> pin as an 8-bit value.
	(This happens only during a poll.)  
      </p> 

    </behavior>

    <behavior name="socket i/o polling">

      <p> When the <pin>poll-event</pin> pin is driven, and a connection
      exists, this component attempts to receive then transmit batches
      of bytes, in a non-blocking manner.  If the <attribute>trace-traffic?</attribute>
      attribute is set to a boolean true value, a tracing message is
      written to standard out for each successful <tt>read()</tt> or
      <tt>write()</tt> operation.
      </p>

      <p>
	The <attribute>tx-count</attribute> and <attribute>rx-count</attribute> attributes accumulate the number
	of bytes transmitted and received, respectively.  The
	<attribute>poll-count</attribute> attribute accumulates the number of <pin>poll-event</pin>
	events, including those made while disconnected.
      </p>

      <p> After all <pin>poll-event</pin> signals, the component drives the
      <pin>poll-control</pin> pin with a value meant to set the interval to the
      next polling event.  Each successful non-blocking socket I/O
      operation tends to reduce the polling interval, and each
      unsuccessful one gradually increases the interval.  This
      adaptive process attempts to provide a good trade-off between
      socket I/O performance (speed &amp; throughput) and host OS load
      (polling frequency).  The <attribute>poll-interval</attribute> attribute contains the
      last selected polling interval, and <attribute>max-poll-interval</attribute> sets a
      maximum on the adaptive increase.  (The minimum is 0.)
      </p>

    </behavior>

    <behavior name="configuration">
      
      <p>When the <attribute>configure!</attribute> is set, the new value is interpreted
         as a configuration spec.  The spec is a colon-separated list of items, each of
         which is passed in turn to the 'configure' method for interpretation and possible
         action.</p>

    </behavior>

    <convention name="functional" supported="true" />
    <convention name="save/restore" supported="false"/>
    <convention name="triggerpoints" supported="false"/>
    <convention name="inhibit-recursion" supported="true">
      <p>      
	It prevents harmful recursion on the <pin>poll-event</pin> input pin.
      </p>
    </convention>
    
  </func>
  <env>
  <title>Related components</title>

    <p> The <pin>init</pin> and <pin>fini</pin> pins must be driven in the proper
    sequence.</p>

    <p>
      Since this component family merely pumps data in and out of a
      socket, some other component should serve as the source and sink
      of the characters.
    </p>

    <p>
      The adaptive polling control mechanism is designed to operate
      best when connected to a host-time scheduler.  This mechanism
      may be unused, as long as the <pin>poll-event</pin> pin is driven
      regularly by some other source.
    </p>

    <p>
      The following configuration file fragment shows a hypothetical
      use of the socket components.
    </p>

    <code>
        new SOMETYPE source
        new SOMETYPE sink
        new sid-sched-host-accurate sched
        new sid-io-socket-server srv                    # be a server
	set srv sockaddr-local 0.0.0.0:3420             # listen on port 3420
	set sched num-clients 1
	connect-pin main starting -&gt; srv init
        connect-pin main stopping -&gt; srv fini
        connect-pin sched 0-event -&gt; srv poll-event     # adaptive polling
        connect-pin sched 0-control &lt;- srv poll-control # adaptive polling
        set srv verbose? 1
        connect-pin srv tx &lt;- source tx
        connect-pin srv rx -&gt; sink rx
    </code>
  </env>
</defcomplib>

@


1.1
log
@* new XML documentation.
* ChangeLog entries to follow later.
@
text
@d36 4
d166 9
@

