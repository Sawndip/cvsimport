head	1.3;
access;
symbols
	sid-snapshot-20180601:1.3
	sid-snapshot-20180501:1.3
	sid-snapshot-20180401:1.3
	sid-snapshot-20180301:1.3
	sid-snapshot-20180201:1.3
	sid-snapshot-20180101:1.3
	sid-snapshot-20171201:1.3
	sid-snapshot-20171101:1.3
	sid-snapshot-20171001:1.3
	sid-snapshot-20170901:1.3
	sid-snapshot-20170801:1.3
	sid-snapshot-20170701:1.3
	sid-snapshot-20170601:1.3
	sid-snapshot-20170501:1.3
	sid-snapshot-20170401:1.3
	sid-snapshot-20170301:1.3
	sid-snapshot-20170201:1.3
	sid-snapshot-20170101:1.3
	sid-snapshot-20161201:1.3
	sid-snapshot-20161101:1.3
	sid-snapshot-20160901:1.3
	sid-snapshot-20160801:1.3
	sid-snapshot-20160701:1.3
	sid-snapshot-20160601:1.3
	sid-snapshot-20160501:1.3
	sid-snapshot-20160401:1.3
	sid-snapshot-20160301:1.3
	sid-snapshot-20160201:1.3
	sid-snapshot-20160101:1.3
	sid-snapshot-20151201:1.3
	sid-snapshot-20151101:1.3
	sid-snapshot-20151001:1.3
	sid-snapshot-20150901:1.3
	sid-snapshot-20150801:1.3
	sid-snapshot-20150701:1.3
	sid-snapshot-20150601:1.3
	sid-snapshot-20150501:1.3
	sid-snapshot-20150401:1.3
	sid-snapshot-20150301:1.3
	sid-snapshot-20150201:1.3
	sid-snapshot-20150101:1.3
	sid-snapshot-20141201:1.3
	sid-snapshot-20141101:1.3
	sid-snapshot-20141001:1.3
	sid-snapshot-20140901:1.3
	sid-snapshot-20140801:1.3
	sid-snapshot-20140701:1.3
	sid-snapshot-20140601:1.3
	sid-snapshot-20140501:1.3
	sid-snapshot-20140401:1.3
	sid-snapshot-20140301:1.3
	sid-snapshot-20140201:1.3
	sid-snapshot-20140101:1.3
	sid-snapshot-20131201:1.3
	sid-snapshot-20131101:1.3
	sid-snapshot-20131001:1.3
	sid-snapshot-20130901:1.3
	sid-snapshot-20130801:1.3
	sid-snapshot-20130701:1.3
	sid-snapshot-20130601:1.3
	sid-snapshot-20130501:1.3
	sid-snapshot-20130401:1.3
	sid-snapshot-20130301:1.3
	sid-snapshot-20130201:1.3
	sid-snapshot-20130101:1.3
	sid-snapshot-20121201:1.3
	sid-snapshot-20121101:1.3
	sid-snapshot-20121001:1.3
	sid-snapshot-20120901:1.3
	sid-snapshot-20120801:1.3
	sid-snapshot-20120701:1.3
	sid-snapshot-20120601:1.3
	sid-snapshot-20120501:1.3
	sid-snapshot-20120401:1.3
	sid-snapshot-20120301:1.3
	sid-snapshot-20120201:1.3
	sid-snapshot-20120101:1.3
	sid-snapshot-20111201:1.3
	sid-snapshot-20111101:1.3
	sid-snapshot-20111001:1.3
	sid-snapshot-20110901:1.3
	sid-snapshot-20110801:1.3
	sid-snapshot-20110701:1.3
	sid-snapshot-20110601:1.3
	sid-snapshot-20110501:1.3
	sid-snapshot-20110401:1.3
	sid-snapshot-20110301:1.3
	sid-snapshot-20110201:1.3
	sid-snapshot-20110101:1.3
	sid-snapshot-20101201:1.3
	sid-snapshot-20101101:1.3
	sid-snapshot-20101001:1.3
	sid-snapshot-20100901:1.3
	sid-snapshot-20100801:1.3
	sid-snapshot-20100701:1.3
	sid-snapshot-20100601:1.3
	sid-snapshot-20100501:1.3
	sid-snapshot-20100401:1.3
	sid-snapshot-20100301:1.3
	sid-snapshot-20100201:1.3
	sid-snapshot-20100101:1.3
	sid-snapshot-20091201:1.3
	sid-snapshot-20091101:1.3
	sid-snapshot-20091001:1.3
	sid-snapshot-20090901:1.3
	sid-snapshot-20090801:1.3
	sid-snapshot-20090701:1.3
	sid-snapshot-20090601:1.3
	sid-snapshot-20090501:1.3
	sid-snapshot-20090401:1.3
	sid-snapshot-20090301:1.3
	sid-snapshot-20090201:1.3
	sid-snapshot-20090101:1.3
	sid-snapshot-20081201:1.3
	sid-snapshot-20081101:1.3
	sid-snapshot-20081001:1.3
	sid-snapshot-20080901:1.3
	sid-snapshot-20080801:1.3
	sid-snapshot-20080701:1.3
	sid-snapshot-20080601:1.3
	sid-snapshot-20080501:1.3
	sid-snapshot-20080403:1.3
	sid-snapshot-20080401:1.3
	sid-snapshot-20080301:1.3
	sid-snapshot-20080201:1.3
	sid-snapshot-20080101:1.3
	sid-snapshot-20071201:1.3
	sid-snapshot-20071101:1.3
	sid-snapshot-20071001:1.3
	sid-20020905-branchpoint:1.2
	sid-20020905-branch:1.2.0.2
	cygnus_cvs_20020108_pre:1.2;
locks; strict;
comment	@// @;


1.3
date	2006.03.01.21.07.01;	author fche;	state Exp;
branches;
next	1.2;

1.2
date	2001.08.03.06.02.46;	author mrg;	state Exp;
branches;
next	1.1;

1.1
date	2000.12.07.19.30.55;	author fche;	state Exp;
branches;
next	;


desc
@@


1.3
log
@* DLLEXPORT decoration tweak, from Rex Sung-Tien Cho <song10@@andestech.com>
@
text
@// busif.cxx - a component for testing word_bus<>.  -*- C++ -*-

// Copyright (C) 1999, 2000 Red Hat.
// This file is part of SID and is licensed under the GPL.
// See the file COPYING.SID for conditions for redistribution.

#include <string>
#include <iostream>

#include <cstdio>

#include <sidcomp.h>
#include <sidso.h>
#include <sidcomputil.h>
#include <sidtypes.h>

#include <sidbusutil.h>

using namespace sid;
using namespace sidutil;
using namespace std;

template <typename DataType>
class Busif : public virtual component,
	    public no_accessor_component,
	    public no_attribute_component,
	    public no_relation_component,
	    public fixed_bus_map_component,
	    public no_pin_component
{
private:
  class BusInterface : public word_bus<DataType> {
  private:
    unsigned char mem[0x100];

    typedef typename DataType::value_type internal_type;

  public:
    BusInterface() {
      for( int i=0; i<0x100; i++ ) mem[i] = i + 1;
    }
    
    sid::bus::status word_write( host_int_4 addr, 
				 DataType mask,
				 DataType data ) {
      host_int_4 a = addr * sizeof( internal_type );
      internal_type m = mask;
      internal_type d = data;

      if( sizeof(internal_type) == 8 )
	printf( "write>>addr %d mask 0x%016llx data 0x%llx<<write\n", a, m, d );
      else
	printf( "write>>addr %d mask 0x%08x data 0x%x<<write\n", a, m, d );

      for( int i=0; i<sizeof(internal_type); i++ ) {
	if( mask.read_byte( i ) ) {
	  if( data.read_byte( i ) != mem[a + i] ) {
	    printf( "mismatch in byte %d: %02x != %02x\n", i, 
			data.read_byte(i), mem[a+i] );
	  }
	}
      }

      return sid::bus::ok;
    }

    sid::bus::status word_read( host_int_4 addr, 
				DataType mask,
				DataType& data ) {
      host_int_4 a = addr * sizeof( internal_type );

      for( int i=0; i<sizeof(internal_type); i++ ) {
	if( mask.read_byte( i ) )
	  data.write_byte( i, mem[a + i] );
      }

      internal_type m = mask;
      internal_type d = data;

      if( sizeof(internal_type) == 8 )
	printf( "read>>addr %d mask 0x%016llx data 0x%llx<<read\n", a, m, d );
      else
	printf( "read>>addr %d mask 0x%08x data 0x%x<<read\n", a, m, d );

      return sid::bus::ok;
    }
  };

  BusInterface bus;

public:

  Busif() {
    add_bus( "bus", &bus );
  }

  ~Busif() throw () {}
};

static vector<string>
BusifListTypes() {
  vector<string> types;
  types.push_back(string("busif-big-1"));
  types.push_back(string("busif-big-2"));
  types.push_back(string("busif-big-4"));
  types.push_back(string("busif-big-8"));
  types.push_back(string("busif-little-1"));
  types.push_back(string("busif-little-2"));
  types.push_back(string("busif-little-4"));
  types.push_back(string("busif-little-8"));
  return types;
}

static component*
BusifCreate( const string& instance ) {
  if( instance == "busif-big-1" )
    return new Busif<big_int_1>();
  else if( instance == "busif-little-1" )
    return new Busif<little_int_1>();
  else if( instance == "busif-big-2" )
    return new Busif<big_int_2>();
  else if( instance == "busif-little-2" )
    return new Busif<little_int_2>();
  else if( instance == "busif-big-4" )
    return new Busif<big_int_4>();
  else if( instance == "busif-little-4" )
    return new Busif<little_int_4>();
  else if( instance == "busif-big-8" )
    return new Busif<big_int_8>();
  else if( instance == "busif-little-8" )
    return new Busif<little_int_8>();
  else
    return 0;
}

static void
BusifDelete( component* c ) {
}

// static object
DLLEXPORT extern const component_library busif_component_library;

const component_library busif_component_library =
{
  COMPONENT_LIBRARY_MAGIC,
  & BusifListTypes, 
  & BusifCreate,
  & BusifDelete
};

@


1.2
log
@* make it compile with GCC 3.0:
        - missing throw() specifiers in bus & component dtors
	- `std::' vs `::' namespace issues
@
text
@d141 1
a141 1
extern const component_library busif_component_library;
d143 1
a143 1
const component_library busif_component_library DLLEXPORT = 
@


1.1
log
@* public snapshot of sid simulator
@
text
@d97 1
a97 1
  ~Busif() {}
@

