head	1.6;
access;
symbols
	sid-snapshot-20180601:1.6
	sid-snapshot-20180501:1.6
	sid-snapshot-20180401:1.6
	sid-snapshot-20180301:1.6
	sid-snapshot-20180201:1.6
	sid-snapshot-20180101:1.6
	sid-snapshot-20171201:1.6
	sid-snapshot-20171101:1.6
	sid-snapshot-20171001:1.6
	sid-snapshot-20170901:1.6
	sid-snapshot-20170801:1.6
	sid-snapshot-20170701:1.6
	sid-snapshot-20170601:1.6
	sid-snapshot-20170501:1.6
	sid-snapshot-20170401:1.6
	sid-snapshot-20170301:1.6
	sid-snapshot-20170201:1.6
	sid-snapshot-20170101:1.6
	sid-snapshot-20161201:1.6
	sid-snapshot-20161101:1.6
	sid-snapshot-20160901:1.6
	sid-snapshot-20160801:1.6
	sid-snapshot-20160701:1.6
	sid-snapshot-20160601:1.6
	sid-snapshot-20160501:1.6
	sid-snapshot-20160401:1.6
	sid-snapshot-20160301:1.6
	sid-snapshot-20160201:1.6
	sid-snapshot-20160101:1.6
	sid-snapshot-20151201:1.6
	sid-snapshot-20151101:1.6
	sid-snapshot-20151001:1.6
	sid-snapshot-20150901:1.6
	sid-snapshot-20150801:1.6
	sid-snapshot-20150701:1.6
	sid-snapshot-20150601:1.6
	sid-snapshot-20150501:1.6
	sid-snapshot-20150401:1.6
	sid-snapshot-20150301:1.6
	sid-snapshot-20150201:1.6
	sid-snapshot-20150101:1.6
	sid-snapshot-20141201:1.6
	sid-snapshot-20141101:1.6
	sid-snapshot-20141001:1.6
	sid-snapshot-20140901:1.6
	sid-snapshot-20140801:1.6
	sid-snapshot-20140701:1.6
	sid-snapshot-20140601:1.6
	sid-snapshot-20140501:1.6
	sid-snapshot-20140401:1.6
	sid-snapshot-20140301:1.6
	sid-snapshot-20140201:1.6
	sid-snapshot-20140101:1.6
	sid-snapshot-20131201:1.6
	sid-snapshot-20131101:1.6
	sid-snapshot-20131001:1.6
	sid-snapshot-20130901:1.6
	sid-snapshot-20130801:1.6
	sid-snapshot-20130701:1.6
	sid-snapshot-20130601:1.6
	sid-snapshot-20130501:1.6
	sid-snapshot-20130401:1.6
	sid-snapshot-20130301:1.6
	sid-snapshot-20130201:1.6
	sid-snapshot-20130101:1.6
	sid-snapshot-20121201:1.6
	sid-snapshot-20121101:1.6
	sid-snapshot-20121001:1.6
	sid-snapshot-20120901:1.6
	sid-snapshot-20120801:1.6
	sid-snapshot-20120701:1.6
	sid-snapshot-20120601:1.6
	sid-snapshot-20120501:1.6
	sid-snapshot-20120401:1.6
	sid-snapshot-20120301:1.6
	sid-snapshot-20120201:1.6
	sid-snapshot-20120101:1.6
	sid-snapshot-20111201:1.6
	sid-snapshot-20111101:1.6
	sid-snapshot-20111001:1.6
	sid-snapshot-20110901:1.6
	sid-snapshot-20110801:1.6
	sid-snapshot-20110701:1.6
	sid-snapshot-20110601:1.6
	sid-snapshot-20110501:1.6
	sid-snapshot-20110401:1.6
	sid-snapshot-20110301:1.6
	sid-snapshot-20110201:1.6
	sid-snapshot-20110101:1.6
	sid-snapshot-20101201:1.6
	sid-snapshot-20101101:1.6
	sid-snapshot-20101001:1.6
	sid-snapshot-20100901:1.6
	sid-snapshot-20100801:1.6
	sid-snapshot-20100701:1.6
	sid-snapshot-20100601:1.6
	sid-snapshot-20100501:1.6
	sid-snapshot-20100401:1.6
	sid-snapshot-20100301:1.6
	sid-snapshot-20100201:1.6
	sid-snapshot-20100101:1.6
	sid-snapshot-20091201:1.6
	sid-snapshot-20091101:1.6
	sid-snapshot-20091001:1.6
	sid-snapshot-20090901:1.6
	sid-snapshot-20090801:1.6
	sid-snapshot-20090701:1.6
	sid-snapshot-20090601:1.6
	sid-snapshot-20090501:1.6
	sid-snapshot-20090401:1.6
	sid-snapshot-20090301:1.6
	sid-snapshot-20090201:1.6
	sid-snapshot-20090101:1.6
	sid-snapshot-20081201:1.6
	sid-snapshot-20081101:1.6
	sid-snapshot-20081001:1.6
	sid-snapshot-20080901:1.6
	sid-snapshot-20080801:1.6
	sid-snapshot-20080701:1.6
	sid-snapshot-20080601:1.6
	sid-snapshot-20080501:1.6
	sid-snapshot-20080403:1.6
	sid-snapshot-20080401:1.6
	sid-snapshot-20080301:1.6
	sid-snapshot-20080201:1.6
	sid-snapshot-20080101:1.6
	sid-snapshot-20071201:1.6
	sid-snapshot-20071101:1.6
	sid-snapshot-20071001:1.6
	sid-20020905-branchpoint:1.6
	sid-20020905-branch:1.6.0.2
	cygnus_cvs_20020108_pre:1.4;
locks; strict;
comment	@# @;


1.6
date	2002.04.10.19.48.22;	author brolley;	state Exp;
branches;
next	1.5;

1.5
date	2002.03.12.18.03.18;	author fche;	state Exp;
branches;
next	1.4;

1.4
date	2001.10.10.15.58.03;	author fche;	state Exp;
branches;
next	1.3;

1.3
date	2001.08.03.01.30.20;	author bje;	state Exp;
branches;
next	1.2;

1.2
date	2001.06.21.13.05.11;	author bje;	state Exp;
branches;
next	1.1;

1.1
date	2000.12.07.19.30.55;	author fche;	state Exp;
branches;
next	;


desc
@@


1.6
log
@2002-04-09  Dave Brolley  <brolley@@redhat.com>

	* hw-mapper-basic.xml: Describe <mapped_base> usage.
	* compMapper.cxx (struct mapping_record): New field, 'mapped_base'.
	(class generic_mapper_bus): Remove 'transparent_t' parameter,
	'low_multiplier' member  and 'is_transparent' member.
	(generic_mapper_bus::write_strideoffset_any): Compute mapped_address
	relative to mapped_base.
	(generic_mapper_bus::read_strideoffset_any): Ditto.
	(generic_mapper_bus::write_any): Ditto.
	(generic_mapper_bus::read_any): Ditto.
	(make_name_mapping): Remove 'garbage1' -- not used. Detect wordsize and
	mapped_base specifications using their operators.
@
text
@           hw-mapper-basic (libmapper.la :: mapper_component_library)

Synopsis:

   This component is a generalized model of the distributed computer
   circuitry that decodes bus addresses.

     ----------------------------------------------------------------------

Functionality:

  Modelling:

   This component distributes bus accesses to one of a number of configured
   bus accessors, depending on the address of the incoming memory access.

   A mapper defines a group of address spaces. Each group is known as a bank.
   Each address space is decomposed into non-overlapping regions by
   configuring a dynamic collection of accessors. Each accessor is connected
   to a single slave bus. To configure the address mapping, you must name
   each accessor according to one of these forms:
     * [<low>-<high>]
     * [<wordsize>*<low>-<high>]
     * [<low>-<high>,<stride>,<width>]
     * [<wordsize>*<low>-<high>,<stride>,<width>]
     * [<mapped_base>=<low>-<high>]
     * [<wordsize>*<mapped_base>=<low>-<high>]
     * [<mapped_base>=<low>-<high>,<stride>,<width>]
     * [<wordsize>*<mapped_base>=<low>-<high>,<stride>,<width>]
   where:
     * <low> is the starting address for the mapped region.
     * <high> is the ending address for the mapped region.
     * <stride> is the step size between addressable units.
     * <width> is the width of addressable units.
     * <wordsize> is the number of bytes in an address unit: a constant
       multiplier you can use to permit specifying <low>, <high>, <stride>
       and <width> in terms of multi-byte words.
     * <mapped_base> is the base address of the mapped bytes on the target
       bus. Addresses in the mapped region will be adjusted to start at
       <mapped_base>. For hw-mapper-transparent, the default <mapped_base> is
       the value of <start>. For hw-mapper-basic, the default <mapped_base>
       is zero.

   To the right of the "]" closing bracket, an optional specification block
   may list the numbers of mapping banks for this record. This block is
   formatted as a comma-separated list of numbers, given between "{" and "}"
   brackets. The default is to reside in bank 0 only.

   In addition, any text may appear to the left of the "[" and "]" brackets,
   as long as that text does not include any of the characters "[" "]".
   Likewise, text may appear to the right, but it must exclude the "[", "]",
   "{", and "}" bracket characters.

   Each number may be specified in decimal, hexadecimal, octal, and binary
   forms, with the appropriate prefix (none, "0x", "0", "0b", respectively).

   The first form is appropriate if the slave device is willing to accept all
   possible sid::bus accesses (subject to the address range limits). The
   second form is appropriate if the slave device is willing to accept only
   accesses to addressable units of fixed width at a fixed stride from one
   another.

   The downstream addresses passed by the hw-mapper-basic variant are
   relative to the matching region, so are zero-based, by default. The
   hw-mapper-transparent does not make downstream addresses relative by
   default, so it may be more suitable for carving up an address space by
   multiple layers of mapping. Use of <mapped_base> for either component
   overrides this default behavior.

   See the "mapping" behavior below for more details.

   +-------------------------------------------------+
   |                    Behaviors                    |
   |-------------------------------------------------|
   |  configuration | When an accessor of the        |
   |                | prescribed format is set, and  |
   |                | the address range is valid,    |
   |                | the supplied bus is registered |
   |                | in the decoding table. Future  |
   |                | accesses on the access-port    |
   |                | bus will consider that address |
   |                | range as a candidate.          |
   |                |                                |
   |                | Reasons for rejecting an       |
   |                | address range include          |
   |                | overlapping with an existing   |
   |                | entry, or inconsistent ranges  |
   |                | or stride/width values.        |
   |----------------+--------------------------------|
   |        banking | When the bank attribute is set |
   |                | with a numeric value, or the   |
   |                | bank pin is driven with a      |
   |                | number, the mapping group or   |
   |                | bank number is instantly       |
   |                | changed. Subsequent mapping    |
   |                | activities will see only those |
   |                | mapping entries that include   |
   |                | the new bank number.           |
   |----------------+--------------------------------|
   |        mapping | When an incoming access on the |
   |                | access-port bus is received,   |
   |                | its base address is compared   |
   |                | to all the registered outgoing |
   |                | accessors in the current bank. |
   |                | If one is found that contains  |
   |                | the address, the current       |
   |                | address is transformed         |
   |                | according to the following     |
   |                | rules:                         |
   |                |   * The accessor's             |
   |                |     <mapped_base> address is   |
   |                |     subtracted from the        |
   |                |     incoming address, so       |
   |                |     outgoing addresses will be |
   |                |     relative.                  |
   |                |   * If the accessor has        |
   |                |     stride/width values,       |
   |                |     divide the relative        |
   |                |     address by the quotient    |
   |                |     (<stride>/<width>). As a   |
   |                |     result, outgoing addresses |
   |                |     will refer to consecutive  |
   |                |     addressable units, and an  |
   |                |     outgoing access of the     |
   |                |     desired width will be      |
   |                |     made.                      |
   |                |   * If the accessor has no     |
   |                |     stride/width values, the   |
   |                |     relative address and the   |
   |                |     incoming access width will |
   |                |     be used to make an         |
   |                |     outgoing access.           |
   |                |                                |
   |                | This component will return an  |
   |                | incoming access prematurely    |
   |                | with sid::bus::unmapped if no  |
   |                | accessor covers the incoming   |
   |                | address. Similarly, it will    |
   |                | signal a sid::bus::misaligned  |
   |                | condition if an incoming       |
   |                | access could be handled by a   |
   |                | stride/width accessor, but the |
   |                | addressed bytes don't cover    |
   |                | exactly one addressable unit.  |
   |                |                                |
   |                | Whenever an incoming access is |
   |                | attempted, the component       |
   |                | increments its access-count    |
   |                | attribute. When a repeated     |
   |                | access hits an internal        |
   |                | mapping cache, the             |
   |                | cache-hit-count is             |
   |                | incremented. Whenever an       |
   |                | incoming address is contained  |
   |                | in a specific accessor's       |
   |                | address interval, the          |
   |                | ACCESSOR-count attribute is    |
   |                | incremented. (The ACCESSOR     |
   |                | string is the name of the      |
   |                | accessor.)                     |
   |----------------+--------------------------------|
   | memory latency | This component models constant |
   |                | latency for accesses which     |
   |                | pass through the mapper. The   |
   |                | value of the latency is added  |
   |                | to the total latency of every  |
   |                | bus transaction. The units of  |
   |                | latency are nominal, but       |
   |                | typically represent a number   |
   |                | of system clock cycles.        |
   +-------------------------------------------------+

   +-------------------------------------------------+
   |                 SID Conventions                 |
   |-------------------------------------------------|
   |    functional | supported  | This is a          |
   |               |            | functional         |
   |               |            | component.         |
   |---------------+------------+--------------------|
   |       latency | supported  | This component     |
   |               |            | models memory      |
   |               |            | latency.           |
   |---------------+------------+--------------------|
   | triggerpoints | not        | This component     |
   |               | supported  | does not support   |
   |               |            | triggerpoints.     |
   |---------------+------------+--------------------|
   |         state | not        | This component     |
   |  save/restore | supported  | does not support   |
   |               |            | state              |
   |               |            | save/restore.      |
   +-------------------------------------------------+

     ----------------------------------------------------------------------

Environment:

   Related components

   Commonly, this component will be placed between a CPU and an array of bus
   peripherals. The hw-glue-probe-bus component may be used in conjunction
   with this component to analyze and troubleshoot bus configuration
   problems, being chained to either the CPU side of the mapper or the
   peripherals side.

   An illustration of a simple configuration for an ARM7T system with a main
   memory and a memory mapped UART follows:

         new hw-cpu-arm7t cpu
         new hw-mapper-basic bus
         new hw-uart-ns16550
         new hw-memory-ram/rom-basic mem
         set mem size 4194304
         connect-bus cpu insn-memory bus access-port
         connect-bus cpu data-memory bus access-port
         connect-bus bus [0xD800000,0xD80001F,4,1] uart Bus
         connect-bus bus [0x0,0x400000] mem read-write-port

   Here, the CPU's accessors are connected directly to the mapper. All
   peripherals are connected downstream from the mapper. They will have their
   bus transactions routed to them by the mapper, by virtue of configuration.

     ----------------------------------------------------------------------

Component Reference:

  Component: hw-mapper-basic

   +-------------------------------------------------+
   |                      buses                      |
   |-------------------------------------------------|
   |    name     | addresses  | accesses | behaviors |
   |-------------+------------+----------+-----------|
   | access-port | any        | any      | mapping   |
   |             | address    | access   |           |
   +-------------------------------------------------+

   +-----------------------------------------------------+
   |                     attributes                      |
   |-----------------------------------------------------|
   |     name      |category|legal |default| behaviors  ||
   |               |        |values| value |            ||
   |---------------+--------+------+-------+------------||
   |access-count   |register|number|0      |mapping     ||
   |---------------+--------+------+-------+------------||
   |cache-hit-count|register|number|0      |mapping     ||
   |---------------+--------+------+-------+------------||
   |ACCESSOR-count |register|number|0      |mapping     ||
   |---------------+--------+------+-------+------------||
   |latency        |setting |number|0      |memory      ||
   |               |        |      |       |latency     ||
   |---------------+--------+------+-------+------------||
   |state-snapshot |-       |opaque|-      |state       ||
   |               |        |string|       |save/restore||
   +-----------------------------------------------------+

   +-------------------------------------------------+
   |                    accessors                    |
   |-------------------------------------------------|
   |       name        |  accesses  |   behaviors    |
   |-------------------+------------+----------------|
   | ACCESSOR, any of  |            | configuration, |
   | the specified     | any access | mapping        |
   | forms             |            |                |
   +-------------------------------------------------+

  Variant: hw-mapper-transparent

   Same as hw-mapper-basic
@


1.5
log
@* mapper banking support

2002-03-11  Frank Ch. Eigler  <fche@@redhat.com>

        * compMapper.cxx (overlaps_p, selected_p, bank_changed): New/modified
        helper functions for banking.
        (bank_pin_handler, connect_accessor, disconnect_accessor): Ditto.
        (locate): Ditto.
        (make_name_mapping): Ditto; reorganize, tighten.  Change syntax of
        word-multiplier construct.
        (generic_mapper): Add new fields for bank tracking.
        * hw-mapper-basic.xml: Document banking system and syntax.
        * hw-mapper-basic.txt: Regenerated.
@
text
@d26 4
d38 5
d64 5
a68 4
   relative to the matching region, so are zero-based. The
   hw-mapper-transparent does not make downstream addresses relative, so it
   may be more suitable for carving up an address space by multiple layers of
   mapping.
d110 4
a113 3
   |                |   * The accessor's <low>       |
   |                |     address is subtracted from |
   |                |     the incoming address, so   |
d115 1
a115 4
   |                |     relative and zero-based.   |
   |                |     The hw-mapper-transparent  |
   |                |     component variant omits    |
   |                |     this subtraction.          |
@


1.4
log
@* new mapper variant

2001-10-10  Frank Ch. Eigler  <fche@@redhat.com>

	* compMapper.cxx (generic_mapper_bus): New field low_multiplier.
	(ctor): Initialize it depending on transparent mode.
	(write_strideoffset_any, read_strideoffset_any, write_any, read_any):
	Use field to be conditionally transparent.
	(generic_mapper ctor): Take transparent_p arg; pass it down.
	(compMapperListTypes, compMapperCreate): Support hw-mapper-transparent.
	* hw-mapper-basic.xml: Document this new variant.
	* hw-mapper-basic.txt: Regenerated.
@
text
@d17 5
a21 4
   A mapper defines an address space. The address space is decomposed into
   non-overlapping regions by configuring a dynamic collection of accessors.
   Each accessor is connected to a single slave bus. To configure the address
   mapping, you must name each accessor according to one of these forms:
d23 1
a23 1
     * [<low>-<high>,<wordsize>]
d25 1
a25 1
     * [<low>-<high>,<stride>,<width>,<wordsize>]
d35 9
a43 3
   In addition, any text may appear outside the "[" and "]" brackets, as long
   as that text does not include any of the separator characters "[" "]" "-"
   ",".
d80 10
d94 4
a97 3
   |                | accessors. If one is found     |
   |                | that contains the address, the |
   |                | current address is transformed |
@


1.3
log
@* Freshly generated documentation.
* ChangeLog entries to follow later.
@
text
@d47 6
d87 3
d240 4
@


1.2
log
@2001-06-21  Ben Elliston  <bje@@redhat.com>

	* compMapper.cxx (generic_mapper::latency): New member.
	(generic_mapper constructor): Add a "latency" attribute.
	(generic_mapper_bus::write_strideoffset_any): Accumulate latency.
	(generic_mapper_bus::read_strideoffset_any): Likewise.
	(generic_mapper_bus::write_any): Likewise.
	(generic_mapper_bus::read_any): Likewise.
	* hw-mapper-basic.txt: Document extension.
@
text
@d1 1
a1 2
* Name
  hw-mapper-basic
d3 1
a3 1
* Synopsis
d5 2
a6 2
  This component is a generalized model of the distributed computer
  circuitry that decodes bus addresses.
d8 223
a230 140
  Attributes: access-count cache-hit-count ACCESSOR-hits
  Buses: access-port
  Accessors: ACCESSOR
  Shared library: libmapper.la
  Symbol: mapper_component_library

* Functionality
  - Modelling

    * This component distributes bus accesses to one of a number of
      configured bus accessors, depending on the address of the
      incoming memory access.  

    * A mapper defines an address space.  The address space is
      decomposed into non-overlapping regions by configuring a dynamic
      collection of accessors.  Each accessor is connected to a single
      slave bus.  To configure the address mapping, you must name each 
      accessor according to one of these forms:

          [<low>-<high>]
      or  [<low>-<high>,<stride>,<width>]
      where:
          <low> is the starting address for the mapped region.
          <high> is the ending address for the mapped region.
          <stride> is the step size between addressable units.
          <width> is the width of addressable units.

      In addition, any text may appear outside the "[" and "]" brackets,
      as long as that text does not include any of the separator
      characters "[" "]" "-" ",".

      Each number may be specified in decimal, hexadecimal, octal, and
      binary forms, with the appropriate prefix (none, "0x", "0",
      "0b", respectively).

      The first form is appropriate if the slave device is willing to
      accept all possible sid::bus accesses (subject to the address
      range limits).  The second form is appropriate if the slave
      device is willing to accept only accesses to addressable units
      of fixed width at a fixed stride from one another.

      See the "mapping" behavior below for more details.
       
  - Behaviors

    * Configuration

      When an accessor of the prescribed format is set, and the
      address range is valid, the supplied bus is registered in the
      decoding table.  Future accesses on the "access-port" bus will
      consider that address range as a candidate.

      Reasons for rejecting an address range include overlapping with
      an existing entry, or inconsistent ranges or stride/width
      values.

    * Mapping

      When an incoming access on the "access-port" bus is received,
      its base address is compared to all the registered outgoing
      accessors.  If one is found that contains the address, the
      current address is transformed according to the following rules:

	* The accessor's <low> address is subtracted from the incoming
          address, so outgoing addresses will be relative and zero-based.
        * If the accessor has stride/width values, divide the relative
          address by the quotient (<stride>/<width>).  As a result,
          outgoing addresses will refer to consecutive addressable units, 
          and an outgoing access of the desired width will be made.
	* If the accessor has no stride/width values, the relative
          address and the incoming access width will be used to make
          an outgoing access.

      This component will return an incoming access prematurely with
      "sid::bus::unmapped" if no accessor covers the incoming address.
      Similarly, it will signal a "sid::bus::misaligned" condition if
      an incoming access could be handled by a stride/width accessor,
      but the addressed bytes don't cover exactly one addressable
      unit.

      Whenever an incoming access is attempted, the component
      increments its "access-count" attribute.  When a repeated access
      hits an internal mapping cache, the "cache-hit-count" is
      incremented.  Whenever an incoming address is contained in a
      specific accessor's address interval, the "ACCESSOR-hits"
      attribute is incremented.  (The ACCESSOR string is the name of
      the accessor.)

    * Memory latency

      This component models constant latency for accesses which pass
      through the mapper.  The value of the "latency" attribute is
      added to the total latency of every bus transaction.  The units
      of latency are nominal, but typically represent a number of
      system clock cycles.
      
  - SID conventions
    * This is a functional component.
    * The component models memory latency.
    * This component does not support triggerpoints, nor does it support
      state save/restore.

* Environment
  - Related components
    * Commonly, this component will be placed between a CPU and an
      array of bus peripherals.  The hw-glue-probe-bus component may
      be used in conjunction with this component to analyze and
      troubleshoot bus configuration problems, being chained to either
      the CPU side of the mapper or the peripherals side.

    * An illustration of a simple configuration for an ARM7T system
      with a main memory and a memory mapped UART follows:

	new hw-cpu-arm7t cpu
	new hw-mapper-basic bus
	new hw-uart-ns16550
	new hw-memory-ram/rom-basic mem
	set mem size 4194304
	connect-bus cpu insn-memory bus access-port
	connect-bus cpu data-memory bus access-port
	connect-bus bus [0xD800000,0xD80001F,4,1] uart Bus
	connect-bus bus [0x0,0x400000] mem read-write-port

      Here, the CPU's accessors are connected directly to the mapper.
      All peripherals are connected downstream from the mapper.  They
      will have their bus transactions routed to them by the mapper,
      by virtue of configuration.

* SID interface reference
  - low level:
    * buses
      - access-port | any address | any access | mapping
    * accessors
      - ACCESSOR, any of the specified forms | any access | configuration, mapping
    * attributes
      - access-count | register | number | 0 | mapping
      - cache-hit-count | register | number | 0 | mapping
      - ACCESSOR-count | register | number | 0 | mapping
      - state-snapshot | | opaque string | n/a | state save/restore
      - latency | setting | number | 0 | memory latency
@


1.1
log
@* public snapshot of sid simulator
@
text
@d97 8
d107 1
d148 1
@

