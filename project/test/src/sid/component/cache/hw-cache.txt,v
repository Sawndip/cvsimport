head	1.12;
access;
symbols
	sid-snapshot-20180601:1.12
	sid-snapshot-20180501:1.12
	sid-snapshot-20180401:1.12
	sid-snapshot-20180301:1.12
	sid-snapshot-20180201:1.12
	sid-snapshot-20180101:1.12
	sid-snapshot-20171201:1.12
	sid-snapshot-20171101:1.12
	sid-snapshot-20171001:1.12
	sid-snapshot-20170901:1.12
	sid-snapshot-20170801:1.12
	sid-snapshot-20170701:1.12
	sid-snapshot-20170601:1.12
	sid-snapshot-20170501:1.12
	sid-snapshot-20170401:1.12
	sid-snapshot-20170301:1.12
	sid-snapshot-20170201:1.12
	sid-snapshot-20170101:1.12
	sid-snapshot-20161201:1.12
	sid-snapshot-20161101:1.12
	sid-snapshot-20160901:1.12
	sid-snapshot-20160801:1.12
	sid-snapshot-20160701:1.12
	sid-snapshot-20160601:1.12
	sid-snapshot-20160501:1.12
	sid-snapshot-20160401:1.12
	sid-snapshot-20160301:1.12
	sid-snapshot-20160201:1.12
	sid-snapshot-20160101:1.12
	sid-snapshot-20151201:1.12
	sid-snapshot-20151101:1.12
	sid-snapshot-20151001:1.12
	sid-snapshot-20150901:1.12
	sid-snapshot-20150801:1.12
	sid-snapshot-20150701:1.12
	sid-snapshot-20150601:1.12
	sid-snapshot-20150501:1.12
	sid-snapshot-20150401:1.12
	sid-snapshot-20150301:1.12
	sid-snapshot-20150201:1.12
	sid-snapshot-20150101:1.12
	sid-snapshot-20141201:1.12
	sid-snapshot-20141101:1.12
	sid-snapshot-20141001:1.12
	sid-snapshot-20140901:1.12
	sid-snapshot-20140801:1.12
	sid-snapshot-20140701:1.12
	sid-snapshot-20140601:1.12
	sid-snapshot-20140501:1.12
	sid-snapshot-20140401:1.12
	sid-snapshot-20140301:1.12
	sid-snapshot-20140201:1.12
	sid-snapshot-20140101:1.12
	sid-snapshot-20131201:1.12
	sid-snapshot-20131101:1.12
	sid-snapshot-20131001:1.12
	sid-snapshot-20130901:1.12
	sid-snapshot-20130801:1.12
	sid-snapshot-20130701:1.12
	sid-snapshot-20130601:1.12
	sid-snapshot-20130501:1.12
	sid-snapshot-20130401:1.12
	sid-snapshot-20130301:1.12
	sid-snapshot-20130201:1.12
	sid-snapshot-20130101:1.12
	sid-snapshot-20121201:1.12
	sid-snapshot-20121101:1.12
	sid-snapshot-20121001:1.12
	sid-snapshot-20120901:1.12
	sid-snapshot-20120801:1.12
	sid-snapshot-20120701:1.12
	sid-snapshot-20120601:1.12
	sid-snapshot-20120501:1.12
	sid-snapshot-20120401:1.12
	sid-snapshot-20120301:1.12
	sid-snapshot-20120201:1.12
	sid-snapshot-20120101:1.12
	sid-snapshot-20111201:1.12
	sid-snapshot-20111101:1.12
	sid-snapshot-20111001:1.12
	sid-snapshot-20110901:1.12
	sid-snapshot-20110801:1.12
	sid-snapshot-20110701:1.12
	sid-snapshot-20110601:1.12
	sid-snapshot-20110501:1.12
	sid-snapshot-20110401:1.12
	sid-snapshot-20110301:1.12
	sid-snapshot-20110201:1.12
	sid-snapshot-20110101:1.12
	sid-snapshot-20101201:1.12
	sid-snapshot-20101101:1.12
	sid-snapshot-20101001:1.12
	sid-snapshot-20100901:1.12
	sid-snapshot-20100801:1.12
	sid-snapshot-20100701:1.12
	sid-snapshot-20100601:1.12
	sid-snapshot-20100501:1.12
	sid-snapshot-20100401:1.12
	sid-snapshot-20100301:1.12
	sid-snapshot-20100201:1.12
	sid-snapshot-20100101:1.12
	sid-snapshot-20091201:1.12
	sid-snapshot-20091101:1.12
	sid-snapshot-20091001:1.12
	sid-snapshot-20090901:1.12
	sid-snapshot-20090801:1.12
	sid-snapshot-20090701:1.12
	sid-snapshot-20090601:1.12
	sid-snapshot-20090501:1.12
	sid-snapshot-20090401:1.12
	sid-snapshot-20090301:1.12
	sid-snapshot-20090201:1.12
	sid-snapshot-20090101:1.12
	sid-snapshot-20081201:1.12
	sid-snapshot-20081101:1.12
	sid-snapshot-20081001:1.12
	sid-snapshot-20080901:1.12
	sid-snapshot-20080801:1.12
	sid-snapshot-20080701:1.12
	sid-snapshot-20080601:1.12
	sid-snapshot-20080501:1.12
	sid-snapshot-20080403:1.12
	sid-snapshot-20080401:1.12
	sid-snapshot-20080301:1.12
	sid-snapshot-20080201:1.12
	sid-snapshot-20080101:1.12
	sid-snapshot-20071201:1.12
	sid-snapshot-20071101:1.12
	sid-snapshot-20071001:1.12
	sid-20020905-branchpoint:1.11
	sid-20020905-branch:1.11.0.2
	cygnus_cvs_20020108_pre:1.7;
locks; strict;
comment	@# @;


1.12
date	2005.05.10.15.41.05;	author brolley;	state Exp;
branches;
next	1.11;

1.11
date	2002.07.16.19.25.45;	author brolley;	state Exp;
branches;
next	1.10;

1.10
date	2002.07.16.19.14.46;	author brolley;	state Exp;
branches;
next	1.9;

1.9
date	2002.06.08.20.33.18;	author bje;	state Exp;
branches;
next	1.8;

1.8
date	2002.05.17.21.28.14;	author bje;	state Exp;
branches;
next	1.7;

1.7
date	2001.12.28.20.58.39;	author fche;	state Exp;
branches;
next	1.6;

1.6
date	2001.12.27.16.16.39;	author fche;	state Exp;
branches;
next	1.5;

1.5
date	2001.12.04.20.16.09;	author fche;	state Exp;
branches;
next	1.4;

1.4
date	2001.10.22.19.48.44;	author fche;	state Exp;
branches;
next	1.3;

1.3
date	2001.08.03.01.30.14;	author bje;	state Exp;
branches;
next	1.2;

1.2
date	2001.06.21.13.37.08;	author bje;	state Exp;
branches;
next	1.1;

1.1
date	2001.06.15.04.19.50;	author bje;	state Exp;
branches;
next	;


desc
@@


1.12
log
@2005-05-10  Dave Brolley  <brolley@@redhat.com>

        * hw-cache.xml: Input to flush-set, invalidate-set and
        * hw-cache.txt: Regenerated.
        flush-and-invalidate-set is now an address.
        * cacheutil.h (addr_to_tag): New method of cache.
        * cacheutil.cxx (addr_to_tag): New method of cache.
        * cache.cxx (cache_component::flush_set): Input argument is now an address.
        (cache_component::flush_and_invalidate_set): Likewise.
        (blocking_cache_component::flush_set): Likewise.
        (blocking_cache_component::flush_and_invalidate_set): Likewise.

2005-05-10  Dave Brolley  <brolley@@redhat.com>

        * cache.cxx (cache_component): Initialize data_width. Add "data-width"
        attribute.
        (read_line): Access the data 4 or 8 bytes at a time, depending on
        data_width.
        (write_line): Ditto.
        (read_downstream, write_downstream): New methods of cache_component.
        * cache.h (read_downstream, write_downstream): New methods of
        cache_component.
        (data_width): New member of cache_component.

2005-05-10  Dave Brolley  <brolley@@redhat.com>

        * cache.cxx (cache_component): Add "operation-status" pin.
        (cache_component::flush_all_lines): Accumulate latency and call
        report_status.
        (cache_component::flush_line): Ditto.
        (cache_component::flush_set): Ditto.
        (cache_component::flush_and_invalidate_set): Ditto.
        (cache_component::invalidate_all_lines): Call report_status.
        (cache_component::invalidate_line): Ditto.
        (cache_component::flush_and_invalidate_line): Ditto.
        (cache_component::invalidate_set): Ditto.
        (cache_component::prefetch_line): Ditto.
        (cache_component::lock_line): Ditto.
        (cache_component::unlock_line): Ditto.
        (blocking_cache_component::flush_all_lines): Call report_status if
        child is blocked.
        (blocking_cache_component::flush_line): Ditto.
        (blocking_cache_component::flush_set): Ditto.
        (blocking_cache_component::flush_and_invalidate_set): Ditto.
        (blocking_cache_component::flush_and_invalidate_line): Ditto.
        (blocking_cache_component::prefetch_line): Ditto.
        * cache.h (report_status): New method of cache_component.
        (operation_status_pin): New output pin.

2005-05-10  Dave Brolley  <brolley@@redhat.com>

        * cache.h (flush_all_lines, flush_line, flush_set)
        (flush_and_invalidate_set, flush_and_invalidate_line)
        (prefetch_line): Now virtual. Also, new methods of
        blocking_cache_component.
        (setup_flush_all_transaction, setup_flush_line_transaction)
        (setup_flush_set_transaction)
        (setup_flush_and_invalidate_set_transaction)
        (setup_flush_and_invalidate_line_transaction)
        (perform_flush_all_transaction, perform_flush_line_transaction)
        (perform_flush_set_transaction)
        (perform_flush_and_invalidate_set_transaction)
        (perform_flush_and_invalidate_line_transaction): New methods of
        blocking_cache_component.
        * cache.cxx (blocking_cache_component::write): Remove log message. Don't
        need return code from continue_child_thread_and_wait.
        blocking_cache_component::read): Ditto.
        (flush_all_lines, flush_line, flush_set)
        (flush_and_invalidate_set, flush_and_invalidate_line)
        (prefetch_line): New methods of blocking_cache_component.

2005-05-10  Dave Brolley  <brolley@@redhat.com>

        * cache.cxx (cache_component): Initialize total_latency_p. Add
        "total-latency?" attribute.
        (read_line): Return the total latency of all accesses if total_latency_p
        is set.
        (write_line): Ditto.
        (handle_bus_error): Copy the status, s, to transaction_status.
        (blocking_cache_component::read): Always return transaction_status.
        (blocking_cache_component::write): Ditto.
        * cache.h (total_latency_p): New member of cache_component.

2005-05-10  Dave Brolley  <brolley@@redhat.com>

        * cache.h (cache_component::lock_downstream): New virtual method.
        (cache_component::unlock_downstream): New virutal method.
        (blocking_cache_component::lock_downstream): New virtual override.
        (blocking_cache_component::unlock_downstream): New virtual override.
        * cache.cxx (read_line): Return the maximum latency from the reads
        performed if refill latency is not requested. Call lock_downstream
        before the first read. Call unlock_downstream before the final read.
        (write_line): Ditto.
        (blocking_cache_component): Add downstream-lock pin.

2005-05-10  Dave Brolley  <brolley@@redhat.com>

        * cache.cxx (blocking_cache_child_thread_root): Don't call
        child->child_wait_for_resume.
        (handle_bus_error): Ditto.
        (DEFN_METHOD): SID_SIG_CHILD_BLOCKED is now ctl_child_blocked.

2005-05-10  Dave Brolley  <brolley@@redhat.com>

        * Makefile.am (AM_XXXFLAGS): Set it to $(TOP_CXXFLAGS).
        (AM_MAKEFLAGS): Pass along TOP_CXXFLAGS.
        * Makefile.in: Regenerated.

2005-05-10  Dave Brolley  <brolley@@redhat.com>

        * mep-cache.cxx (mep_cache): Inherit from blocking_cache_component.
        * mep-cache.h (mep_cache): Inherit from blocking_cache_component.
        * cache.h (sidblockingutil.h): #include it.
        (namespace sid): Add "using" clause. Remove sid:: qualifier from
        declarations.
        (cache_component): Inhereit virtually from
        fixed_attribute_map_component and fixed_pin_map_component.
        (cache_component::write): Variants now virtual.
        (cache_component::read): Ditto.
        (cache_component::handle_read_error): New virtual method.
        (cache_component::handle_write_error): New virtual method.
        (cache_bus::write_any): Call cache.write.
        (cache_bus::read_any): Call cache.read.
        (blocking_cache_component): New class.
        * cache.cxx (cache_component::write_any): Call handle_write_error to
        handle bus errors.
        (cache_component::write_line): Ditto.
        (cache_component::read_any): Call handle_read_error as above.
        (cache_component::read_line): Ditto.
        (blocking_cache_child_thread_root): New function.
        (blocking_cache_component): New constructor.
        (handle_bus_error): New method.
        (blocking_cache_component:write): New methods.
        (blocking_cache_component::read): New methods.
        (CacheListTypes): Add hw-blocking-cache-basic and
        hw-blocking-cache-buffer-8, hw-blocking-cache-direct* and
        hw-blocking-cache/*kb*.
        (CacheCreate): Parse and construct the above.
@
text
@            hw-cache-basic (libcache.la :: cache_component_library)

Synopsis:

   This component models a variety of memory cache designs. Many common
   parameter groups (size, associativity, line-size, etc.) are exposed as
   individual component types in this family, e.g.,
   hw-cache-2way/16kb/32/random, hw-cache-direct/1kb/16. The
   hw-cache-buffer-8 type is a special case containing just one 8-byte cache
   line.

     ----------------------------------------------------------------------

Functionality:

  Modelling:

   This component models a memory cache suitable for use at different levels
   of the memory hierarchy. It provides a bus interface and connects to
   another bus, providing a transparent pass-through. In this documentation,
   "CPU" and "main memory" are synonymous for "upstream bus" and "downstream
   bus", as this is the most common usage (but not the only possible).

   The parameters of the cache are a matter of configuration. At
   instantiation time, the following parameters are specified:

     * cache size in KB (1, 2, 4, 8, 16, 32, 64, 128, 256, 512)
     * line size in bytes (16, 32, 64, 128)
     * associativity (direct, full, 2way, 4way)
     * replacement policy for N-way and fully associative caches (lru, fifo,
       random)

   For a 16KB cache with a line size of 32 bytes, 2-way set associativity and
   a "least recently used" (LRU) replacement policy, the component name is
   hw-cache-2way/16kb/32/lru. For direct mapped caches, replacement policies
   are not applicable and should be omitted from the component name, such as
   hw-cache-direct/64kb/16. This particular 64KB direct-mapped cache
   configuration is also known by the type name of hw-cache-basic.

   +-------------------------------------------------+
   |                    Behaviors                    |
   |-------------------------------------------------|
   | tag calculation | The size of a tag is          |
   |                 | dynamically computed based on |
   |                 | the line size. Unlike         |
   |                 | physical caches which         |
   |                 | economise on the number of    |
   |                 | tag bits to reduce hardware   |
   |                 | costs, the model uses a full  |
   |                 | address, but discards the     |
   |                 | redundant bits that can be    |
   |                 | inferred by a bytes position  |
   |                 | in the cache line. For        |
   |                 | example, a 32 (2^5) byte line |
   |                 | uses 27 bits for the tag.     |
   |-----------------+-------------------------------|
   |  hash algorithm | A simple hashing algorithm is |
   |                 | used to select a set from a   |
   |                 | target address. The algorithm |
   |                 | uses values from              |
   |                 | hash-bit-mask and             |
   |                 | hash-shift-amount to compute: |
   |                 | These two values must be      |
   |                 | chosen carefully to ensure    |
   |                 | good cache utilisation. In    |
   |                 | particular, the "all-ones"    |
   |                 | value of mask should not      |
   |                 | exceed the number of sets in  |
   |                 | the cache.                    |
   |-----------------+-------------------------------|
   |      misaligned | The component does not handle |
   |        accesses | memory accesses that are not  |
   |                 | aligned on the natural        |
   |                 | boundary of the data being    |
   |                 | referenced. In such cases,    |
   |                 | the cache is bypassed and     |
   |                 | memory is accessed directly.  |
   |-----------------+-------------------------------|
   |  write strategy | When a write is made to the   |
   |                 | cache, the write-through?     |
   |                 | attribute determines if the   |
   |                 | data will be simultaneously   |
   |                 | written to the memory.        |
   |                 | Otherwise, writes will only   |
   |                 | be made to the cache and will |
   |                 | not be synchronised with main |
   |                 | memory until the line is      |
   |                 | flushed due to line           |
   |                 | replacement or an explicit    |
   |                 | flush (see Flushing).         |
   |                 |                               |
   |                 | In the case of a write miss,  |
   |                 | the write-allocate? attribute |
   |                 | specifies the component's     |
   |                 | action. If this attribute is  |
   |                 | set to yes, then a miss will  |
   |                 | cause the missed line to be   |
   |                 | loaded into the cache in      |
   |                 | anticipation of future        |
   |                 | references.                   |
   |-----------------+-------------------------------|
   |     prefetching | The component supports        |
   |                 | prefetching of data into the  |
   |                 | cache by driving prefetch     |
   |                 | with an address. If, due to   |
   |                 | the line replacement policy,  |
   |                 | the prefetch cannot be        |
   |                 | performed, this operation has |
   |                 | no effect.                    |
   |-----------------+-------------------------------|
   |        flushing | If dirty lines are flushed    |
   |                 | from the cache, the component |
   |                 | will ensure that their        |
   |                 | contents are synchronized     |
   |                 | with main memory. Some        |
   |                 | architectures provide a       |
   |                 | facility for explicitly       |
   |                 | flushing a line to memory.    |
   |                 | For this purpose, the         |
   |                 | component provides flush      |
   |                 | which can be driven with an   |
   |                 | address. If the address falls |
   |                 | on a line that is present and |
   |                 | dirty, it will be flushed to  |
   |                 | memory and marked as not      |
   |                 | dirty. A line can be flushed  |
   |                 | and invalidated in one atomic |
   |                 | operation by driving the      |
   |                 | flush-and-invalidate pin. The |
   |                 | entire cache can be flushed   |
   |                 | by driving flush-all.         |
   |-----------------+-------------------------------|
   |    invalidating | Lines in the cache that       |
   |                 | contain accurate contents are |
   |                 | marked as valid. Some         |
   |                 | architectures provide a       |
   |                 | facility for explicitly       |
   |                 | marking a line as invalid so  |
   |                 | that future accesses will     |
   |                 | cause a new memory access.    |
   |                 | For this purpose, the         |
   |                 | component provides invalidate |
   |                 | that can be driven with an    |
   |                 | address. If the address falls |
   |                 | on a line that is present, it |
   |                 | will be invalidated. No       |
   |                 | consideration is made for     |
   |                 | dirty lines, so a line should |
   |                 | be flushed before being       |
   |                 | invalidated. A line can be    |
   |                 | flushed and invalidated in    |
   |                 | one atomic operation by       |
   |                 | driving the                   |
   |                 | flush-and-invalidate pin. The |
   |                 | entire cache can be           |
   |                 | invalidated by driving        |
   |                 | invalidate-all.               |
   |-----------------+-------------------------------|
   |    line locking | The component supports        |
   |                 | locking lines in the cache to |
   |                 | prevent them from being       |
   |                 | removed to accommodate more   |
   |                 | recently referenced lines. A  |
   |                 | line can be locked by driving |
   |                 | lock with any address that    |
   |                 | falls on the line.            |
   |                 | Subsequently, a line can be   |
   |                 | unlocked by driving unlock.   |
   |-----------------+-------------------------------|
   |  memory latency | The component models the      |
   |                 | effects of memory latency.    |
   |                 | The hit-latency and           |
   |                 | miss-latency values specify   |
   |                 | the cumulative latencies for  |
   |                 | hit and missed cache          |
   |                 | operations. Any misaligned    |
   |                 | accesses are penalised as if  |
   |                 | they are a miss. Cache line   |
   |                 | refills incur an additional   |
   |                 | latency, specified by the     |
   |                 | refill-latency attribute.     |
   |-----------------+-------------------------------|
   |      statistics | The component gathers         |
   |       gathering | statistics for a number of    |
   |                 | significant events and        |
   |                 | records them in read-only     |
   |                 | attributes. The collection of |
   |                 | statistics may be disabled    |
   |                 | using collect-statistics?.    |
   |-----------------+-------------------------------|
   |      statistics | The component will write a    |
   |       reporting | summary report of the         |
   |                 | statistics it collects to     |
   |                 | standard error when report!   |
   |                 | is driven. The report-heading |
   |                 | value, prepended to the       |
   |                 | report, allows reports from   |
   |                 | multiple caches to be         |
   |                 | distinguished.                |
   +-------------------------------------------------+

   +-------------------------------------------------+
   |                 SID Conventions                 |
   |-------------------------------------------------|
   |        functional | supported        | -        |
   |-------------------+------------------+----------|
   |           latency | supported        | -        |
   +-------------------------------------------------+

     ----------------------------------------------------------------------

Environment:

   Related components

     * This component is typically used as a cache between a CPU and main
       memory. A sample configiruation fragment is:

         new hw-cpu-arm7t cpu
         new hw-cache-basic cache
         connect-bus cpu insn-memory cache upstream
         connect-bus cpu data-memory cache upstream
         connect-bus cache downstream mem read-write-port

     * More extensive modeling of the memory hierarchy could be achieved by
       daisy-chaining two cache component instances:

         new hw-cpu-arm7t cpu
         new hw-cache-basic l1-cache
         new hw-cache-basic l2-cache
         connect-bus cpu insn-memory l1-cache upstream
         connect-bus cpu data-memory l1-cache upstream
         connect-bus l1-cache downstream l2-cache upstream
         connect-bus l2-cache downstream mem read-write-port

     * The cache can operate using virtual or physical addresses. This is
       determined by the location of the cache in the memory hierarchy. The
       cache can manage physical addresses by placing it "downstream" from an
       MMU or bus mapper (see hw-mapper-basic).

     ----------------------------------------------------------------------

Component Reference:

  Component: hw-cache-basic

   +-------------------------------------------------------------------+
   |                               pins                                |
   |-------------------------------------------------------------------|
   |           name           | direction | legalvalues |  behaviors   |
   |--------------------------+-----------+-------------+--------------|
   |report!                   |in         |-            |statistics    |
   |                          |           |             |reporting     |
   |--------------------------+-----------+-------------+--------------|
   |flush                     |in         |32-bit       |flushing      |
   |                          |           |address      |              |
   |--------------------------+-----------+-------------+--------------|
   |flush-all                 |in         |any          |flushing      |
   |--------------------------+-----------+-------------+--------------|
   |flush-set                 |in         |any          |flushing      |
   |--------------------------+-----------+-------------+--------------|
   |invalidate                |in         |32-bit       |invalidating  |
   |                          |           |address      |              |
   |--------------------------+-----------+-------------+--------------|
   |invalidate-all            |in         |any          |invalidating  |
   |--------------------------+-----------+-------------+--------------|
   |invalidate-set            |in         |any          |invalidating  |
   |--------------------------+-----------+-------------+--------------|
   |flush-and-invalidate      |in         |32-bit       |flushing,     |
   |                          |           |address      |invalidating  |
   |--------------------------+-----------+-------------+--------------|
   |flush-and-invalidate-set  |in         |any          |flushing,     |
   |                          |           |             |invalidating  |
   |--------------------------+-----------+-------------+--------------|
   |prefetch                  |in         |32-bit       |prefetching   |
   |                          |           |address      |              |
   |--------------------------+-----------+-------------+--------------|
   |lock                      |in         |32-bit       |line locking  |
   |                          |           |address      |              |
   |--------------------------+-----------+-------------+--------------|
   |unlock                    |in         |32-bit       |line locking  |
   |                          |           |address      |              |
   +-------------------------------------------------------------------+

   +----------------------------------------------------+
   |                       buses                        |
   |----------------------------------------------------|
   |   name   |  addresses   |   accesses   | behaviors |
   |----------+--------------+--------------+-----------|
   |upstream  |unrestricted  |unrestricted  |bus traffic|
   +----------------------------------------------------+

   +------------------------------------------------------------------------+
   |                               attributes                               |
   |------------------------------------------------------------------------|
   |       name        |category|legal values|default value |  behaviors   ||
   |-------------------+--------+------------+--------------+--------------||
   |associativity      |setting |string      |-             |configuration ||
   |-------------------+--------+------------+--------------+--------------||
   |cache-size         |setting |numeric     |-             |configuration ||
   |-------------------+--------+------------+--------------+--------------||
   |line-size          |setting |numeric     |-             |configuration ||
   |-------------------+--------+------------+--------------+--------------||
   |hash-bit-mask      |setting |numeric     |0xf           |configuration ||
   |-------------------+--------+------------+--------------+--------------||
   |hash-shift-amount  |setting |0..31       |0             |configuration ||
   |-------------------+--------+------------+--------------+--------------||
   |write-through?     |setting |boolean     |false         |write strategy||
   |-------------------+--------+------------+--------------+--------------||
   |write-allocate?    |setting |boolean     |false         |write strategy||
   |-------------------+--------+------------+--------------+--------------||
   |read-accesses      |register|numeric     |0             |statistics    ||
   |                   |        |            |              |gathering     ||
   |-------------------+--------+------------+--------------+--------------||
   |write-accesses     |register|numeric     |0             |statistics    ||
   |                   |        |            |              |gathering     ||
   |-------------------+--------+------------+--------------+--------------||
   |misaligned-reads   |register|numeric     |0             |statistics    ||
   |                   |        |            |              |gathering     ||
   |-------------------+--------+------------+--------------+--------------||
   |misaligned-writes  |register|numeric     |0             |statistics    ||
   |                   |        |            |              |gathering     ||
   |-------------------+--------+------------+--------------+--------------||
   |flushes            |register|numeric     |0             |statistics    ||
   |                   |        |            |              |gathering     ||
   |-------------------+--------+------------+--------------+--------------||
   |replacements       |register|numeric     |0             |statistics    ||
   |                   |        |            |              |gathering     ||
   |-------------------+--------+------------+--------------+--------------||
   |read-hit-rate      |register|percentage  |0%            |statistics    ||
   |                   |        |string      |              |gathering     ||
   |-------------------+--------+------------+--------------+--------------||
   |write-hit-rate     |register|percentage  |0%            |statistics    ||
   |                   |        |string      |              |gathering     ||
   |-------------------+--------+------------+--------------+--------------||
   |collect-statistics?|setting |boolean     |true          |statistics    ||
   |                   |        |            |              |reporting     ||
   |-------------------+--------+------------+--------------+--------------||
   |report-heading     |setting |string      |cache profile |statistics    ||
   |                   |        |            |report        |reporting     ||
   |-------------------+--------+------------+--------------+--------------||
   |hit-latency        |setting |numeric     |0             |memory latency||
   |-------------------+--------+------------+--------------+--------------||
   |miss-latency       |setting |numeric     |0             |memory latency||
   |-------------------+--------+------------+--------------+--------------||
   |refill-latency     |setting |numeric     |0             |memory latency||
   |-------------------+--------+------------+--------------+--------------||
   |dump!              |setting |empty string|empty         |internal      ||
   |                   |        |            |              |diagnostics   ||
   +------------------------------------------------------------------------+

   +-------------------------------------------------+
   |                    accessors                    |
   |-------------------------------------------------|
   |     name      |    accesses     |   behaviors   |
   |---------------+-----------------+---------------|
   | downstream    | unrestricted    | bus traffic   |
   +-------------------------------------------------+

  Variant: hw-cache-buffer-8

   Same as hw-cache-basic

     ----------------------------------------------------------------------

References:

     * Computer Architecture: A Quantitative Approach, Hennessy and
       Patterson.
     * Advanced Microprocessors, D. Tabak.
     * UNIX Systems for Modern Architectures, C. Schimmel.
@


1.11
log
@Correct typos.
@
text
@d26 1
d32 1
d215 1
d247 104
a350 111
   +------------------------------------------------------------+
   |                            pins                            |
   |------------------------------------------------------------|
   |          name           |direction|legalvalues| behaviors  |
   |-------------------------+---------+-----------+------------|
   |report!                  |in       |-          |statistics  |
   |                         |         |           |reporting   |
   |-------------------------+---------+-----------+------------|
   |flush                    |in       |32-bit     |flushing    |
   |                         |         |address    |            |
   |-------------------------+---------+-----------+------------|
   |flush-all                |in       |any        |flushing    |
   |-------------------------+---------+-----------+------------|
   |flush-set                |in       |set index  |flushing    |
   |-------------------------+---------+-----------+------------|
   |invalidate               |in       |32-bit     |invalidating|
   |                         |         |address    |            |
   |-------------------------+---------+-----------+------------|
   |invalidate-all           |in       |any        |invalidating|
   |-------------------------+---------+-----------+------------|
   |invalidate-set           |in       |set index  |invalidating|
   |-------------------------+---------+-----------+------------|
   |flush-and-invalidate     |in       |32-bit     |flushing,   |
   |                         |         |address    |invalidating|
   |-------------------------+---------+-----------+------------|
   |flush-and-invalidate-set |in       |set index  |flushing,   |
   |                         |         |           |invalidating|
   |-------------------------+---------+-----------+------------|
   |prefetch                 |in       |32-bit     |prefetching |
   |                         |         |address    |            |
   |-------------------------+---------+-----------+------------|
   |lock                     |in       |32-bit     |line locking|
   |                         |         |address    |            |
   |-------------------------+---------+-----------+------------|
   |unlock                   |in       |32-bit     |line locking|
   |                         |         |address    |            |
   +------------------------------------------------------------+

   +-------------------------------------------------+
   |                      buses                      |
   |-------------------------------------------------|
   |  name   |  addresses  |  accesses   | behaviors |
   |---------+-------------+-------------+-----------|
   |upstream |unrestricted |unrestricted |bus traffic|
   +-------------------------------------------------+

   +--------------------------------------------------------------+
   |                          attributes                          |
   |--------------------------------------------------------------|
   |       name        |category|  legal   |default|  behaviors  ||
   |                   |        |  values  | value |             ||
   |-------------------+--------+----------+-------+-------------||
   |associativity      |setting |string    |-      |configuration||
   |-------------------+--------+----------+-------+-------------||
   |cache-size         |setting |numeric   |-      |configuration||
   |-------------------+--------+----------+-------+-------------||
   |line-size          |setting |numeric   |-      |configuration||
   |-------------------+--------+----------+-------+-------------||
   |hash-bit-mask      |setting |numeric   |0xf    |configuration||
   |-------------------+--------+----------+-------+-------------||
   |hash-shift-amount  |setting |0..31     |0      |configuration||
   |-------------------+--------+----------+-------+-------------||
   |write-through?     |setting |boolean   |false  |write        ||
   |                   |        |          |       |strategy     ||
   |-------------------+--------+----------+-------+-------------||
   |write-allocate?    |setting |boolean   |false  |write        ||
   |                   |        |          |       |strategy     ||
   |-------------------+--------+----------+-------+-------------||
   |read-accesses      |register|numeric   |0      |statistics   ||
   |                   |        |          |       |gathering    ||
   |-------------------+--------+----------+-------+-------------||
   |write-accesses     |register|numeric   |0      |statistics   ||
   |                   |        |          |       |gathering    ||
   |-------------------+--------+----------+-------+-------------||
   |misaligned-reads   |register|numeric   |0      |statistics   ||
   |                   |        |          |       |gathering    ||
   |-------------------+--------+----------+-------+-------------||
   |misaligned-writes  |register|numeric   |0      |statistics   ||
   |                   |        |          |       |gathering    ||
   |-------------------+--------+----------+-------+-------------||
   |flushes            |register|numeric   |0      |statistics   ||
   |                   |        |          |       |gathering    ||
   |-------------------+--------+----------+-------+-------------||
   |replacements       |register|numeric   |0      |statistics   ||
   |                   |        |          |       |gathering    ||
   |-------------------+--------+----------+-------+-------------||
   |read-hit-rate      |register|percentage|0%     |statistics   ||
   |                   |        |string    |       |gathering    ||
   |-------------------+--------+----------+-------+-------------||
   |write-hit-rate     |register|percentage|0%     |statistics   ||
   |                   |        |string    |       |gathering    ||
   |-------------------+--------+----------+-------+-------------||
   |collect-statistics?|setting |boolean   |true   |statistics   ||
   |                   |        |          |       |reporting    ||
   |-------------------+--------+----------+-------+-------------||
   |                   |        |          |cache  |statistics   ||
   |report-heading     |setting |string    |profile|reporting    ||
   |                   |        |          |report |             ||
   |-------------------+--------+----------+-------+-------------||
   |hit-latency        |setting |numeric   |0      |memory       ||
   |                   |        |          |       |latency      ||
   |-------------------+--------+----------+-------+-------------||
   |miss-latency       |setting |numeric   |0      |memory       ||
   |                   |        |          |       |latency      ||
   |-------------------+--------+----------+-------+-------------||
   |refill-latency     |setting |numeric   |0      |memory       ||
   |                   |        |          |       |latency      ||
   |-------------------+--------+----------+-------+-------------||
   |dump!              |setting |empty     |empty  |internal     ||
   |                   |        |string    |       |diagnostics  ||
   +--------------------------------------------------------------+
@


1.10
log
@2002-07-16  Dave Brolley  <brolley@@redhat.com>

	* cache.h (cache): Add flush_and_invalidate_set_pin and
	flush_and_invalidate_pin.
	* cache.cxx (cache_component): Initialize flush_and_invalidate_set_pin
	and flush_and_invalidate_pin. Add flush-and-invalidate and
	flush-and-invalidate-set pins.
	(flush_set): Don't flush an invalid line.
	(flush_and_invalidate_set): New method.
	(flush_and_invalidate_line): New method.
	* hw-cache.xml, hw-cache.txt: Modified accordingly.
@
text
@d269 1
a269 1
   |fluish-and-invalidate-set|in       |set index  |flushing,   |
@


1.9
log
@2002-06-08  Ben Elliston  <bje@@redhat.com>

	* cacheutil.h (cache_set::expunge): New method.
	(cache_set::operator[]): Likewise.
	(cache::invalidate): Likewise.
	(cache::operator[]): Likewise.
	* cacheutil.cxx (cache::invalidate): Implement.
	* cache.h (cache_component::flush_set_pin): New pin.
	(cache_component::flush_set): New callback method.
	(cache_component::invalidate_set_pin): New pin.
	(cache_component::invalidate_set): New method.
	* cache.cxx (cache_component constructor): Initialise and add
	"flush-set" and "invalidate-set" pins.
	(cache_component::flush_set): Implement.
	(cache_component::invalidate_set): Likewise.
	* hw-cache.xml: Update documentation.
@
text
@d124 6
a129 3
   |                 | dirty. The entire cache can   |
   |                 | be flushed by driving         |
   |                 | flush-all.                    |
d148 7
a154 2
   |                 | invalidated. The entire cache |
   |                 | can be invalidated by driving |
d244 37
a280 31
   +-------------------------------------------------+
   |                      pins                       |
   |-------------------------------------------------|
   |     name     |direction|legalvalues| behaviors  |
   |--------------+---------+-----------+------------|
   |report!       |in       |-          |statistics  |
   |              |         |           |reporting   |
   |--------------+---------+-----------+------------|
   |flush         |in       |32-bit     |flushing    |
   |              |         |address    |            |
   |--------------+---------+-----------+------------|
   |flush-all     |in       |any        |flushing    |
   |--------------+---------+-----------+------------|
   |flush-set     |in       |set index  |flushing    |
   |--------------+---------+-----------+------------|
   |invalidate    |in       |32-bit     |invalidating|
   |              |         |address    |            |
   |--------------+---------+-----------+------------|
   |invalidate-all|in       |any        |invalidating|
   |--------------+---------+-----------+------------|
   |invalidate-set|in       |set index  |invalidating|
   |--------------+---------+-----------+------------|
   |prefetch      |in       |32-bit     |prefetching |
   |              |         |address    |            |
   |--------------+---------+-----------+------------|
   |lock          |in       |32-bit     |line locking|
   |              |         |address    |            |
   |--------------+---------+-----------+------------|
   |unlock        |in       |32-bit     |line locking|
   |              |         |address    |            |
   +-------------------------------------------------+
@


1.8
log
@2002-05-17  Ben Elliston  <bje@@redhat.com>

	* Makefile.am (DEJAGNUTESTS): Add refill.exp.
	* cache.h (cache_component::refill_latency): New member.
	* cache.cxx (cache_component::read_line): Add refill latency.
	(cache_component::cache_component): Initialise it and add a
	corresponding "refill-latency" attribute.
	* hw-cache.xml (memory latency) : Document refill latency.
@
text
@d249 2
d255 2
@


1.7
log
@2001-12-27  Frank Ch. Eigler  <fche@@redhat.com>

	* cache.cxx (CacheListTypes, CacheCreate): Support hw-cache-buffer-8
	component type.
	* hw-cache.xml, hw-cache.txt: Modified accordingly.
@
text
@d168 4
a171 1
   |                 | they are a miss.              |
d329 3
@


1.6
log
@2001-12-27  Frank Ch. Eigler  <fche@@redhat.com>

	* cache.cxx (cache_sizes): Add "1" and "2" kb support.
	* hw-cache.xml, hw-cache.txt: Modified accordingly.
@
text
@d5 6
a10 1
   This component models a variety of memory cache designs.
d339 4
@


1.5
log
@2001-12-04  Frank Ch. Eigler  <fche@@redhat.com>

        * cache.cxx (cache_sizes): Add "4" for "4kb".
        * hw-cache.xml, hw-cache.txt: Modified accordingly.
@
text
@d21 1
a21 1
     * cache size in KB (4, 8, 16, 32, 64, 128, 256, 512)
@


1.4
log
@* function ++, cleanup

2001-10-22  Frank Ch. Eigler  <fche@@redhat.com>

	* cache.cxx (flush_all): New function.  Associate with "flush-all" pin.
	* cacheutil.cxx (find_any_dirty): New functions.
	* cache.h, cacheutil.h: Relevant changes.
	Warning cleanups throughout.
	* hw-cache.xml (flush-all): Document new pin.
	* hw-cache-txt: Regenerated.
@
text
@d21 1
a21 1
     * cache size in KB (8, 16, 32, 64, 128, 256, 512)
@


1.3
log
@* Freshly generated documentation.
* ChangeLog entries to follow later.
@
text
@d119 3
a121 1
   |                 | dirty.                        |
d238 2
@


1.2
log
@2001-06-21  Ben Elliston  <bje@@redhat.com>

	* cache.h (cache_component::hit_latency): New member.
	(cache_component::miss_latency): Likewise.
	* cache.cxx (cache_component ctor): Add attributes for these.
	(cache_component::write_any): Add miss latency for misaligned
	accesses. Set latency correctly for return.
	(cache_component::read_any): Add miss latency for misaligned
	accesses. Set latency correctly for return.
	(cache_component::read_line): Return the true result of reads.
	(cache_component::write_line): Likewise for writes.
	* hw-cache.txt: Document latency extensions.
@
text
@d1 1
a1 2
* Name
  hw-cache-basic
d3 1
a3 2
* Synopsis
  This component models a variety of memory cache designs.
d5 334
a338 210
  Buses: upstream
  Accessors: downstream
  Pins: report! flush invalidate invalidate-all prefetch lock unlock
  Attributes: associativity cache-size line-size write-through?
	write-allocate? hash-bit-mask hash-shift-amount
	flushes replacements read-hit-rate write-hit-rate
	read-accesses write-accesses misaligned-reads
	misaligned-writes collect-statistics? report-heading dump!

  Library: libcache.la
  Symbol name: cache_component_library

* Functionality
  - Modeling

     * This component models a memory cache suitable for use at
       different levels of the memory hierarchy.  It provides a bus
       interface and connects to another bus, providing a transparent
       pass-through.  In this documentation, "CPU" and "main memory"
       are synonymous for "upstream bus" and "downstream bus", as this
       is the most common usage (but not the only possible).

    * The parameters of the cache are a matter of configuration.  At
      instantiation time, the following parameters are specified:

	    + cache size (in kilobytes)
	      { 8, 16, 32, 64, 128, 256, 512 }
	    + line size (in bytes)
	      { 16, 32, 64, 128 }
	    + associativity
	      { "direct", "full", "2-way", "4-way" }
	    + replacement policy (for N-way and fully associative)
	      { "lru", "fifo", "random" }

      For a 16kb cache with a line size of 32 bytes, 2-way set
      associativity and a "least recently used" (LRU) replacement
      policy, the component name is "hw-cache-2way/16kb/32/lru".

      For direct mapped caches, replacement policies are not
      applicable and should be omitted from the component name.  For
      example: "hw-cache-direct/64kb/16".  This particular 64KB
      direct-mapped cache configuration is also known by the type name
      of "hw-cache-basic".

      Other parameters affecting the operation of the cache are
      controlled by modifying attributes (see Behaviors).

  - Behaviors
    * Tag calculation
      The size of a tag is dynamically computed based on the line
      size.  Unlike physical caches which economise on the number of
      tag bits to reduce hardware costs, the model uses a full
      address, but discards the redundant bits that can be inferred by
      a bytes position in the cache line.  For example, a 32 (2^5)
      byte line uses 27 bits for the tag.

    * Hash algorithm
      A simple hashing algorithm is used to select a set from a target
      address.  The algorithm uses values from the "hash-bit-mask" and
      "hash-shift-amount" attributes to compute:
		
		index = (address & mask) >> shift_amount;
      
      These two values must be chosen carefully to ensure good cache
      utilisation.  In particular, the "all-ones" value of "mask"
      should not exceed the number of sets in the cache.

    * Misaligned accesses
      The component does not handle memory accesses that are not
      aligned on the natural boundary of the data being referenced.
      In such cases, the cache is bypassed and memory is accessed
      directly.

    * Write strategy
      When a write is made to the cache, the "write-through?"
      attribute determines if the data will be simultaneously written
      to the memory.  Otherwise, writes will only be made to the cache
      and will not be synchronised with main memory until the line is
      flushed due to line replacement or an explicit flush (see
      Flushing).

      In the case of a write miss, the "write-allocate?" attribute
      specifies the component's action.  If this attribute is set to
      "yes", then a miss will cause the missed line to be loaded into
      the cache in anticipation of future references.

    * Prefetching
      The component supports prefetching of data into the cache by
      driving the "prefetch" pin with an address.  If, due to the line
      replacement policy, the prefetch cannot be performed, this
      operation has no effect.

    * Flushing
      If dirty lines are flushed from the cache, the component will
      ensure that their contents are synchronized with main memory.
      Some architectures provide a facility for explicitly flushing a
      line to memory.  For this purpose, the component provides a
      "flush" pin that can be driven with an address.  If the address
      falls on a line that is present and dirty, it will be flushed to
      memory and marked as not dirty.

    * Invalidating
      Lines in the cache that contain accurate contents are marked as
      valid.  Some architectures provide a facility for explicitly
      marking a line as invalid so that future accesses will cause a
      new memory access.  For this purpose, the component provides an
      "invalidate" pin that can be driven with an address.  If the
      address falls on a line that is present, it will be invalidated.
      No consideration is made for dirty lines, so a line should be
      flushed before being invalidated.  The entire cache can be
      invalidated by driving the "invalidate-all" pin.

    * Line locking
      The component supports locking lines in the cache to prevent
      them from being removed to accommodate more recently referenced
      lines.  A line can be locked by driving the "lock" pin with any
      address that falls on the line.  Subsequently, a line can be
      unlocked by driving the "unlock" pin.

    * Memory latency
      The component models the effects of memory latency.  The
      "hit-latency" and "miss-latency" attribute values specify the
      cumulative latencies for hit and missed cache operations.  Any
      misaligned accesses are penalised as if they are a miss.

    * Statistics gathering
      The component gathers statistics for a number of significant
      events and records them in read-only attributes.  The collection
      of statistics may be disabled with the "collect-statistics?"
      attribute.

    * Statistics reporting
      The component will write a summary report of the statistics it
      collects to standard error when the "report!" pin is driven.
      The "report heading" attribute value, prepended to the report,
      allows reports from multiple caches to be distinguished.

  - SID conventions
    * This is a functional component.
    * The component models memory latency.
    * It presents attributes in the "setting" and "register" categories.

* Environment
  - Related components
    * This component is typically used as a cache between a CPU and
      main memory.  A sample configuration fragment is:

        new hw-cpu-arm7t cpu
        new hw-cache-basic cache
        connect-bus cpu insn-memory cache upstream
        connect-bus cpu data-memory cache upstream
	connect-bus cache downstream mem read-write-port

    * More extensive modeling of the memory hierarchy could be
      achieved by daisy-chaining two caches:

        new hw-cpu-arm7t cpu
        new hw-cache-basic l1-cache
        new hw-cache-basic l2-cache
        connect-bus cpu insn-memory l1-cache upstream
        connect-bus cpu data-memory l1-cache upstream
	connect-bus l1-cache downstream l2-cache upstream
	connect-bus l2-cache downstream mem read-write-port

    * The cache can operate using virtual or physical addresses.  This
      is determined by the location of the cache in the memory
      hierarchy.  The cache can manage physical addresses by placing
      it "downstream" from an MMU or bus mapper (see hw-mapper-basic).

* SID interface reference
  - low level:
    * pins
      - report! | input | any | statistics reporting
      - flush | input | any | flushing
      - invalidate | input | any | invalidating
      - invalidate-all | input | any | invalidating
      - prefetch | input | any | prefetching
      - lock | input | any | line locking
      - unlock | input | any | line locking
    * buses
      - upstream | any address | any access | pass-through
    * accessors
      - downstram | any address | any access | pass-through
    * attributes
      - associativity | settings | string | n/a | configuration
      - cache-size | settings | numeric | n/a | configuration
      - line-size | settings | numeric | n/a | configuration
      - hash-bit-mask | setting | numeric | 0xf | configuration
      - hash-shift-amount | setting | 0..31 | 0 | configuration
      - write-through? | setting | boolean | false | write strategy
      - write-allocate? | setting | boolean | false | write strategy
      - read-accesses | register | numeric | 0 | statistics gathering
      - write-accesses | register | numeric | 0 | statistics gathering
      - misaligned-reads | register | numeric | 0 | statistics gathering
      - misaligned-writes | register | numeric | 0 | statistics gathering
      - flushes | register | numeric | 0 | statistics gathering
      - replacements | register | numeric | 0 | statistics gathering
      - read-hit-rate | register | %age string | 0% | statistics gathering
      - write-hit-rate | register | %age string | 0% | statistics gathering
      - collect-statistics? | setting | boolean | true | statistics gathering
      - report-heading | setting | string | cache profile report | stats g.
      - hit-latency | setting | numeric | 0 | memory latency
      - miss-latency | setting | numeric | 0 | memory latency
      - dump! | setting | empty string | empty | internal diagnostics

* References

  ``Computer Architecture: A Quantitative Approach'', Hennessy & Patterson.
  ``Advanced Microprocessors'', D. Tabak.
  ``UNIX Systems for Modern Architectures'', C. Schimmel. 
@


1.1
log
@Index: component/ChangeLog
2001-06-12  Ben Elliston  <bje@@redhat.com>

	* CATALOG: Add hw-cache-basic and friends.
	* configure.in (make_subdirs): Add cache.
	* configure: Regenerate.
	* Makefile.in: Ditto.

Index: component/cache/ChangeLog
2001-06-15  Ben Elliston  <bje@@redhat.com>

	* cache.cxx: New file.
	* cache.h: Likewise.
	* cacheutil.cxx: Likewise.
	* cacheutil.h: Likewise.
	* log2.h: Likewise.
	* hw-cache.txt: Likewise.

Index: component/testsuite/ChangeLog
2001-06-05  Ben Elliston  <bje@@redhat.com>

	* Makefile.am: New file.
	* Makefile.in: Generate.

2001-06-15  Ben Elliston  <bje@@redhat.com>

	* sidcomp.cache/cache.exp: New test case.
	* sidcomp.cache/cachedocs.exp: Ditto.
	* sidcomp.cache/cachemonkey.exp: Ditto.
	* sidcomp.cache/coherency.exp: Ditto.
	* sidcomp.cache/fifo.exp: Ditto.
	* sidcomp.cache/flush.exp: Ditto.
	* sidcomp.cache/lock.exp: Ditto.
	* sidcomp.cache/lru.exp: Ditto.
	* sidcomp.cache/misaligned.exp: Ditto.
	* sidcomp.cache/prefetch.exp: Ditto.
	* sidcomp.cache/random.exp: Ditto.
	* sidcomp.cache/types.exp: Ditto.
	* sidcomp.cache/utils.exp: Ditto.
	* sidcomp.cache/writealloc.exp: Ditto.
	* sidcomp.cache/writethru.exp: Ditto.
@
text
@d126 6
d146 1
d208 2
@

