head	1.12;
access;
symbols
	sid-snapshot-20180601:1.12
	sid-snapshot-20180501:1.12
	sid-snapshot-20180401:1.12
	sid-snapshot-20180301:1.12
	sid-snapshot-20180201:1.12
	sid-snapshot-20180101:1.12
	sid-snapshot-20171201:1.12
	sid-snapshot-20171101:1.12
	sid-snapshot-20171001:1.12
	sid-snapshot-20170901:1.12
	sid-snapshot-20170801:1.12
	sid-snapshot-20170701:1.12
	sid-snapshot-20170601:1.12
	sid-snapshot-20170501:1.12
	sid-snapshot-20170401:1.12
	sid-snapshot-20170301:1.12
	sid-snapshot-20170201:1.12
	sid-snapshot-20170101:1.12
	sid-snapshot-20161201:1.12
	sid-snapshot-20161101:1.12
	sid-snapshot-20160901:1.12
	sid-snapshot-20160801:1.12
	sid-snapshot-20160701:1.12
	sid-snapshot-20160601:1.12
	sid-snapshot-20160501:1.12
	sid-snapshot-20160401:1.12
	sid-snapshot-20160301:1.12
	sid-snapshot-20160201:1.12
	sid-snapshot-20160101:1.12
	sid-snapshot-20151201:1.12
	sid-snapshot-20151101:1.12
	sid-snapshot-20151001:1.12
	sid-snapshot-20150901:1.12
	sid-snapshot-20150801:1.12
	sid-snapshot-20150701:1.12
	sid-snapshot-20150601:1.12
	sid-snapshot-20150501:1.12
	sid-snapshot-20150401:1.12
	sid-snapshot-20150301:1.12
	sid-snapshot-20150201:1.12
	sid-snapshot-20150101:1.12
	sid-snapshot-20141201:1.12
	sid-snapshot-20141101:1.12
	sid-snapshot-20141001:1.12
	sid-snapshot-20140901:1.12
	sid-snapshot-20140801:1.12
	sid-snapshot-20140701:1.12
	sid-snapshot-20140601:1.12
	sid-snapshot-20140501:1.12
	sid-snapshot-20140401:1.12
	sid-snapshot-20140301:1.12
	sid-snapshot-20140201:1.12
	sid-snapshot-20140101:1.12
	sid-snapshot-20131201:1.12
	sid-snapshot-20131101:1.12
	sid-snapshot-20131001:1.12
	sid-snapshot-20130901:1.12
	sid-snapshot-20130801:1.12
	sid-snapshot-20130701:1.12
	sid-snapshot-20130601:1.12
	sid-snapshot-20130501:1.12
	sid-snapshot-20130401:1.12
	sid-snapshot-20130301:1.12
	sid-snapshot-20130201:1.12
	sid-snapshot-20130101:1.12
	sid-snapshot-20121201:1.12
	sid-snapshot-20121101:1.12
	sid-snapshot-20121001:1.12
	sid-snapshot-20120901:1.12
	sid-snapshot-20120801:1.12
	sid-snapshot-20120701:1.12
	sid-snapshot-20120601:1.12
	sid-snapshot-20120501:1.12
	sid-snapshot-20120401:1.12
	sid-snapshot-20120301:1.12
	sid-snapshot-20120201:1.12
	sid-snapshot-20120101:1.12
	sid-snapshot-20111201:1.12
	sid-snapshot-20111101:1.12
	sid-snapshot-20111001:1.12
	sid-snapshot-20110901:1.12
	sid-snapshot-20110801:1.12
	sid-snapshot-20110701:1.12
	sid-snapshot-20110601:1.12
	sid-snapshot-20110501:1.12
	sid-snapshot-20110401:1.12
	sid-snapshot-20110301:1.12
	sid-snapshot-20110201:1.12
	sid-snapshot-20110101:1.12
	sid-snapshot-20101201:1.12
	sid-snapshot-20101101:1.12
	sid-snapshot-20101001:1.12
	sid-snapshot-20100901:1.12
	sid-snapshot-20100801:1.12
	sid-snapshot-20100701:1.12
	sid-snapshot-20100601:1.12
	sid-snapshot-20100501:1.12
	sid-snapshot-20100401:1.12
	sid-snapshot-20100301:1.12
	sid-snapshot-20100201:1.12
	sid-snapshot-20100101:1.12
	sid-snapshot-20091201:1.12
	sid-snapshot-20091101:1.12
	sid-snapshot-20091001:1.12
	sid-snapshot-20090901:1.12
	sid-snapshot-20090801:1.12
	sid-snapshot-20090701:1.12
	sid-snapshot-20090601:1.12
	sid-snapshot-20090501:1.12
	sid-snapshot-20090401:1.11
	sid-snapshot-20090301:1.11
	sid-snapshot-20090201:1.11
	sid-snapshot-20090101:1.11
	sid-snapshot-20081201:1.11
	sid-snapshot-20081101:1.11
	sid-snapshot-20081001:1.11
	sid-snapshot-20080901:1.11
	sid-snapshot-20080801:1.11
	sid-snapshot-20080701:1.11
	sid-snapshot-20080601:1.11
	sid-snapshot-20080501:1.11
	sid-snapshot-20080403:1.11
	sid-snapshot-20080401:1.11
	sid-snapshot-20080301:1.11
	sid-snapshot-20080201:1.11
	sid-snapshot-20080101:1.11
	sid-snapshot-20071201:1.11
	sid-snapshot-20071101:1.11
	sid-snapshot-20071001:1.11
	sid-20020905-branchpoint:1.8
	sid-20020905-branch:1.8.0.2
	cygnus_cvs_20020108_pre:1.5;
locks; strict;
comment	@ * @;


1.12
date	2009.04.08.20.39.34;	author dj;	state Exp;
branches;
next	1.11;

1.11
date	2005.05.10.15.41.05;	author brolley;	state Exp;
branches;
next	1.10;

1.10
date	2004.04.29.20.26.08;	author brolley;	state Exp;
branches;
next	1.9;

1.9
date	2003.01.08.02.51.57;	author bje;	state Exp;
branches;
next	1.8;

1.8
date	2002.07.16.19.14.46;	author brolley;	state Exp;
branches;
next	1.7;

1.7
date	2002.06.08.20.33.18;	author bje;	state Exp;
branches;
next	1.6;

1.6
date	2002.05.17.21.28.14;	author bje;	state Exp;
branches;
next	1.5;

1.5
date	2001.10.22.19.48.44;	author fche;	state Exp;
branches;
next	1.4;

1.4
date	2001.08.03.06.02.42;	author mrg;	state Exp;
branches;
next	1.3;

1.3
date	2001.07.13.15.39.46;	author mrg;	state Exp;
branches;
next	1.2;

1.2
date	2001.06.21.13.37.08;	author bje;	state Exp;
branches;
next	1.1;

1.1
date	2001.06.15.04.19.50;	author bje;	state Exp;
branches;
next	;


desc
@@


1.12
log
@[cgen]
	* cpu/mep-c5.cpu: New.
	* cpu/mep-core.cpu: Add C5 support.
	* cpu/mep.opc: Likewise.
[opcodes]
	* mep-asm.c: Regenerate.
	* mep-desc.c: Regenerate.
	* mep-desc.h: Regenerate.
	* mep-dis.c: Regenerate.
	* mep-ibld.c: Regenerate.
	* mep-opc.c: Regenerate.
	* mep-opc.h: Regenerate.
[sid]
	* component/cache/cache.cxx (cache_component::cache_component):
	Add write_hint_pin().  Attach it to write-hint.
	(cache_component::write_hint): New.
	* component/cache/cache.h (write_hint_pin): New.
	(write_hint): New.

	* component/cgen-cpu/mep/Makefile.am: Regenerate.
	* component/cgen-cpu/mep/Makefile.in: Regenerate.
	* component/cgen-cpu/mep/mep-core1-decode.cxx: Regenerate.
	* component/cgen-cpu/mep/mep-core1-decode.h: Regenerate.
	* component/cgen-cpu/mep/mep-core1-defs.h: Regenerate.
	* component/cgen-cpu/mep/mep-core1-model.cxx: Regenerate.
	* component/cgen-cpu/mep/mep-core1-model.h: Regenerate.
	* component/cgen-cpu/mep/mep-core1-sem.cxx: Regenerate.
	* component/cgen-cpu/mep/mep-decode.cxx: Regenerate.
	* component/cgen-cpu/mep/mep-decode.h: Regenerate.
	* component/cgen-cpu/mep/mep-defs.h: Regenerate.
	* component/cgen-cpu/mep/mep-desc.h: Regenerate.
	* component/cgen-cpu/mep/mep-model.cxx: Regenerate.
	* component/cgen-cpu/mep/mep-model.h: Regenerate.
	* component/cgen-cpu/mep/mep-sem.cxx: Regenerate.
	* component/cgen-cpu/mep/mep.cxx (mep_cpu): Connect
	write-hint pin.
	(do_cache): Add C5 support.
	(do_cache_prefetch): Likewise.
	(do_casb3, do_cash3, do_casw3): New.
	* component/cgen-cpu/mep/mep.h: Add C5 support and write-hint pin.
	(do_casb3, do_cash3, do_casw3): New.

	* component/families/mep/Makefile.in: Regenerate.
	* component/families/mep/dsu.in: Add C5 support.
	* main/dynamic/mainDynamic.cxx: Add C5 support.
	* main/dynamic/mepCfg.cxx: Connect write-hint pin.
	* main/dynamic/mepCfg.h: Add C5 support.
@
text
@// cache.h -- A universal memory cache. -*- C++ -*-

// Copyright (C) 2001, 2002, 2004 Red Hat.
// This file is part of SID and is licensed under the GPL.
// See the file COPYING.SID for conditions for redistribution.

#ifndef CACHE_H
#define CACHE_H

#include "sidblockingutil.h"
#include "cacheutil.h"

using std::string;
using std::vector;

using namespace sid;

using sidutil::fixed_attribute_map_component;
using sidutil::fixed_bus_map_component;
using sidutil::fixed_pin_map_component;
using sidutil::fixed_accessor_map_component;
using sidutil::no_relation_component;
using sidutil::blocking_component;
using sidutil::callback_pin;
using sidutil::make_attribute;
using sidutil::parse_attribute;
using sidutil::binary_output_pin;
using sidutil::output_pin;

class cache_component;
class cache_bus: public bus
{
public:
  cache_bus (cache_component& c)
    :cache(c) {}

private:
  cache_component& cache;

  template <typename DataType>
  bus::status write_any (host_int_4 addr, DataType data);
  
  template <typename DataType>
  bus::status read_any (host_int_4 addr, DataType& data);

#define DEFN_METHOD(DataType) \
  bus::status write(host_int_4 addr, DataType data) throw (); \
  bus::status read(host_int_4 addr, DataType& data) throw ();
  
  DEFN_METHOD (big_int_1)
  DEFN_METHOD (big_int_2)
  DEFN_METHOD (big_int_4)
  DEFN_METHOD (big_int_8)
  DEFN_METHOD (little_int_1)
  DEFN_METHOD (little_int_2)
  DEFN_METHOD (little_int_4)
  DEFN_METHOD (little_int_8)
#undef DEFN_METHOD
};

// FIFO cache replacement algorithm

class cache_replacement_fifo: public cache_replacement_algorithm
{
public:
  cache_line *expell (cache_set& set);

private:
  vector <int> fifo;
};

// Least recently used (LRU) replacement algorithm

class cache_replacement_lru: public cache_replacement_algorithm
{
public:
  cache_line *expell (cache_set& set);
  void update (cache_set& cset, cache_line& selected);

private:
  vector <unsigned> lru;
};

// Random replacement algorithm

class cache_replacement_random: public cache_replacement_algorithm
{
public:
  cache_line *expell (cache_set& set);
};

// Null replacement algorithm; used by direct mapped caches

class cache_replacement_null: public cache_replacement_algorithm
{
public:
  cache_line *expell (cache_set& set);
};


class cache_component: public virtual component,
		       protected virtual fixed_attribute_map_component,
		       protected fixed_bus_map_component,
		       protected virtual fixed_pin_map_component,
		       protected fixed_accessor_map_component,
		       protected no_relation_component
{
public:
  cache_component (unsigned asoctvty, unsigned cache_sz,
		   unsigned line_sz, cache_replacement_algorithm& replacer,
		   cache_line_factory &line_factory);

  virtual ~cache_component () throw();

#define DEFN_METHOD(DataType) \
  virtual bus::status write(host_int_4 addr, DataType data) { return this->write_any(addr, data); } \
  virtual bus::status read(host_int_4 addr, DataType& data) { return this->read_any(addr, data); }
DEFN_METHOD (big_int_1)
DEFN_METHOD (big_int_2)
DEFN_METHOD (big_int_4)
DEFN_METHOD (big_int_8)
DEFN_METHOD (little_int_1)
DEFN_METHOD (little_int_2)
DEFN_METHOD (little_int_4)
DEFN_METHOD (little_int_8)
#undef DEFN_METHOD

protected:
  template <typename DataType> bus::status 
  write_any (host_int_4 addr, DataType data);
  
  template <typename DataType> bus::status
  read_any (host_int_4 addr, DataType& data);

protected:
  cache acache;

  cache_bus upstream;
  bus* downstream;

  callback_pin<cache_component> report_pin;
  void emit_report (host_int_4 ignore);

  callback_pin<cache_component> flush_all_pin;
  virtual void flush_all_lines (host_int_4 ignore);

  callback_pin<cache_component> flush_pin;
  virtual void flush_line (host_int_4 addr);

  callback_pin<cache_component> flush_set_pin;
  virtual void flush_set (host_int_4 set);

  callback_pin<cache_component> flush_and_invalidate_set_pin;
  virtual void flush_and_invalidate_set (host_int_4 set);

  callback_pin<cache_component> invalidate_all_pin;
  virtual void invalidate_all_lines (host_int_4 ignore);

  callback_pin<cache_component> invalidate_pin;
  virtual void invalidate_line (host_int_4 addr);

  callback_pin<cache_component> flush_and_invalidate_pin;
  virtual void flush_and_invalidate_line (host_int_4 addr);

  callback_pin<cache_component> invalidate_set_pin;
  virtual void invalidate_set (host_int_4 set);

  callback_pin<cache_component> prefetch_pin;
  virtual void prefetch_line (host_int_4 addr);

  callback_pin<cache_component> write_hint_pin;
  virtual void write_hint (host_int_4 addr);

  callback_pin<cache_component> lock_pin;
  virtual void lock_line (host_int_4 addr);

  callback_pin<cache_component> unlock_pin;
  virtual void unlock_line (host_int_4 addr);

  // Completion status for the above operations
  output_pin operation_status_pin;
  void report_status (bus::status st)
  {
    host_int_4 v = (st.latency << 16) | st.code;
    operation_status_pin.drive (v);
  }

  string read_hit_rate ();
  string write_hit_rate ();
  string get_nothing () { return ""; }
  status set_nothing (const string& ignore) { return component::ok; }
  string associativity ();
  status dump (const string& ignore);
  string get_hash_mask ();
  status set_hash_mask (const string& ignore);
  string get_hash_shift ();
  status set_hash_shift (const string& ignore);
  string get_refill_latency ();
  status set_refill_latency (const string& ignore);

  unsigned line_offset (const cache_line& line, const host_int_4& addr); 

  bus::status read_line (cache_line& line);
  bus::status write_line (cache_line& line);

  template<typename DataType> bus::status read_downstream (host_int_4 address, DataType &data);
  template<typename DataType> bus::status write_downstream (host_int_4 address, DataType data);

  // Handle read/write errors. The default is not to handle them.
  virtual bool handle_read_error (bus::status s, host_int_4 &addr) { return false; }
  virtual bool handle_write_error (bus::status s, host_int_4 &addr) { return false; }

  virtual void lock_downstream () { }
  virtual void unlock_downstream () { }

  bool write_allocate_p;
  bool write_through_p;
  bool collect_p;
  string report_heading;

  struct
  {
    unsigned long reads;
    unsigned long writes;
    unsigned long read_hits;
    unsigned long write_hits;
    unsigned long misaligned_reads;
    unsigned long misaligned_writes;
    unsigned long flushes;
    unsigned long replacements;
  } stats;

  cache_line_factory &line_factory;
  unsigned line_size;
  unsigned cache_size;
  unsigned assoc;
  unsigned data_width;

  host_int_2 hit_latency;
  host_int_2 miss_latency;
  host_int_2 refill_latency;
  bool refill_latency_specified;
  bool total_latency_p;
};

template <typename DataType>
bus::status
cache_bus::write_any (host_int_4 addr, DataType data)
{
  return cache.write (addr, data);
}
  
template <typename DataType>
bus::status
cache_bus::read_any (host_int_4 addr, DataType& data)
{
  return cache.read (addr, data);
}

#define DEFN_METHOD(DataType) \
  inline bus::status cache_bus::write(host_int_4 addr, DataType data) throw () { return this->write_any(addr, data); } \
  inline bus::status cache_bus::read(host_int_4 addr, DataType& data) throw () { return this->read_any(addr, data); }
  
DEFN_METHOD (big_int_1)
DEFN_METHOD (big_int_2)
DEFN_METHOD (big_int_4)
DEFN_METHOD (big_int_8)
DEFN_METHOD (little_int_1)
DEFN_METHOD (little_int_2)
DEFN_METHOD (little_int_4)
DEFN_METHOD (little_int_8)
#undef DEFN_METHOD

// This cache component handles bus::busy from downstream by blocking on
// and waiting to retry.
//
class blocking_cache_component :
  public cache_component, public blocking_component
{
public:
  // For use when constructing directly
  blocking_cache_component (unsigned asoctvty, unsigned cache_sz,
			    unsigned line_sz,
			    cache_replacement_algorithm& replacer,
			    cache_line_factory &line_factory);
  // For use by constructor of derived class
  blocking_cache_component (void *child_self,
			    unsigned asoctvty, unsigned cache_sz,
			    unsigned line_sz,
			    cache_replacement_algorithm& replacer,
			    cache_line_factory &line_factory);

  virtual ~blocking_cache_component () throw() {}

#define DEFN_METHOD(DataType) \
  virtual bus::status write(host_int_4 addr, DataType data); \
  virtual bus::status read(host_int_4 addr, DataType& data);
DEFN_METHOD (big_int_1)
DEFN_METHOD (big_int_2)
DEFN_METHOD (big_int_4)
DEFN_METHOD (big_int_8)
DEFN_METHOD (little_int_1)
DEFN_METHOD (little_int_2)
DEFN_METHOD (little_int_4)
DEFN_METHOD (little_int_8)
#undef DEFN_METHOD

protected:
  // Virtual overrides
  virtual void flush_all_lines (host_int_4 ignore);
  virtual void flush_line (host_int_4 addr);
  virtual void flush_set (host_int_4 set);
  virtual void flush_and_invalidate_set (host_int_4 set);
  virtual void flush_and_invalidate_line (host_int_4 addr);
  virtual void prefetch_line (host_int_4 addr);

protected:
  // Handle read/write errors.
  virtual bool handle_read_error (bus::status s, host_int_4 &addr)
    { return handle_bus_error (s); }
  virtual bool handle_write_error (bus::status s, host_int_4 &addr)
    { return handle_bus_error (s); }

  // Common function handles both read and write errors
  bool handle_bus_error (bus::status s);

  // Performing transactions on the child thread
public:
  void perform_transaction () { (this->*transaction_func) (); }
protected:
  host_int_4 transaction_addr;
  bus::status transaction_status;
  void (blocking_cache_component::*transaction_func)();

#define DEFN_METHOD(DataType) \
  DataType transaction_data##DataType; \
  void setup_read_transaction (host_int_4 addr, const DataType &data) \
    { transaction_addr = addr; \
      transaction_func = & blocking_cache_component::perform_read_transaction##DataType; \
    } \
  void setup_write_transaction (host_int_4 addr, const DataType &data) \
    { transaction_addr = addr; \
      transaction_data##DataType = data; \
      transaction_func = & blocking_cache_component::perform_write_transaction##DataType; \
    } \
  void perform_read_transaction##DataType () \
    { transaction_status = cache_component::read (transaction_addr, transaction_data##DataType); } \
  void perform_write_transaction##DataType () \
    { transaction_status = cache_component::write (transaction_addr, transaction_data##DataType); } \
  void get_transaction_data (DataType &data) { data = transaction_data##DataType; }

DEFN_METHOD (big_int_1)
DEFN_METHOD (big_int_2)
DEFN_METHOD (big_int_4)
DEFN_METHOD (big_int_8)
DEFN_METHOD (little_int_1)
DEFN_METHOD (little_int_2)
DEFN_METHOD (little_int_4)
DEFN_METHOD (little_int_8)
#undef DEFN_METHOD

protected:
  // Setup methods for blockable transactions
  //
  void setup_flush_all_transaction ()
    { 
      transaction_func = & blocking_cache_component::perform_flush_all_transaction;
    }
  void setup_flush_line_transaction (host_int_4 addr)
    {
      transaction_addr = addr;
      transaction_func = & blocking_cache_component::perform_flush_line_transaction;
    }
  void setup_flush_set_transaction (host_int_4 index)
    {
      transaction_addr = index;
      transaction_func = & blocking_cache_component::perform_flush_set_transaction;
    }
  void setup_flush_and_invalidate_set_transaction (host_int_4 index)
    {
      transaction_addr = index;
      transaction_func = & blocking_cache_component::perform_flush_and_invalidate_set_transaction;
    }
  void setup_flush_and_invalidate_line_transaction (host_int_4 addr)
    {
      transaction_addr = addr;
      transaction_func = & blocking_cache_component::perform_flush_and_invalidate_line_transaction;
    }

protected:
  // Work methods for blockable transactions
  //
  void perform_flush_all_transaction ()
    { cache_component::flush_all_lines (transaction_addr); }
  void perform_flush_line_transaction ()
    { cache_component::flush_line (transaction_addr); }
  void perform_flush_set_transaction ()
    { cache_component::flush_set (transaction_addr); }
  void perform_flush_and_invalidate_set_transaction ()
    { cache_component::flush_and_invalidate_set (transaction_addr); }
  void perform_flush_and_invalidate_line_transaction ()
    { cache_component::flush_and_invalidate_line (transaction_addr); }

protected:
  binary_output_pin downstream_lock_pin;
  virtual void lock_downstream () { downstream_lock_pin.on (); }
  virtual void unlock_downstream () { downstream_lock_pin.off (); }
};

#endif // CACHE_H
@


1.11
log
@2005-05-10  Dave Brolley  <brolley@@redhat.com>

        * hw-cache.xml: Input to flush-set, invalidate-set and
        * hw-cache.txt: Regenerated.
        flush-and-invalidate-set is now an address.
        * cacheutil.h (addr_to_tag): New method of cache.
        * cacheutil.cxx (addr_to_tag): New method of cache.
        * cache.cxx (cache_component::flush_set): Input argument is now an address.
        (cache_component::flush_and_invalidate_set): Likewise.
        (blocking_cache_component::flush_set): Likewise.
        (blocking_cache_component::flush_and_invalidate_set): Likewise.

2005-05-10  Dave Brolley  <brolley@@redhat.com>

        * cache.cxx (cache_component): Initialize data_width. Add "data-width"
        attribute.
        (read_line): Access the data 4 or 8 bytes at a time, depending on
        data_width.
        (write_line): Ditto.
        (read_downstream, write_downstream): New methods of cache_component.
        * cache.h (read_downstream, write_downstream): New methods of
        cache_component.
        (data_width): New member of cache_component.

2005-05-10  Dave Brolley  <brolley@@redhat.com>

        * cache.cxx (cache_component): Add "operation-status" pin.
        (cache_component::flush_all_lines): Accumulate latency and call
        report_status.
        (cache_component::flush_line): Ditto.
        (cache_component::flush_set): Ditto.
        (cache_component::flush_and_invalidate_set): Ditto.
        (cache_component::invalidate_all_lines): Call report_status.
        (cache_component::invalidate_line): Ditto.
        (cache_component::flush_and_invalidate_line): Ditto.
        (cache_component::invalidate_set): Ditto.
        (cache_component::prefetch_line): Ditto.
        (cache_component::lock_line): Ditto.
        (cache_component::unlock_line): Ditto.
        (blocking_cache_component::flush_all_lines): Call report_status if
        child is blocked.
        (blocking_cache_component::flush_line): Ditto.
        (blocking_cache_component::flush_set): Ditto.
        (blocking_cache_component::flush_and_invalidate_set): Ditto.
        (blocking_cache_component::flush_and_invalidate_line): Ditto.
        (blocking_cache_component::prefetch_line): Ditto.
        * cache.h (report_status): New method of cache_component.
        (operation_status_pin): New output pin.

2005-05-10  Dave Brolley  <brolley@@redhat.com>

        * cache.h (flush_all_lines, flush_line, flush_set)
        (flush_and_invalidate_set, flush_and_invalidate_line)
        (prefetch_line): Now virtual. Also, new methods of
        blocking_cache_component.
        (setup_flush_all_transaction, setup_flush_line_transaction)
        (setup_flush_set_transaction)
        (setup_flush_and_invalidate_set_transaction)
        (setup_flush_and_invalidate_line_transaction)
        (perform_flush_all_transaction, perform_flush_line_transaction)
        (perform_flush_set_transaction)
        (perform_flush_and_invalidate_set_transaction)
        (perform_flush_and_invalidate_line_transaction): New methods of
        blocking_cache_component.
        * cache.cxx (blocking_cache_component::write): Remove log message. Don't
        need return code from continue_child_thread_and_wait.
        blocking_cache_component::read): Ditto.
        (flush_all_lines, flush_line, flush_set)
        (flush_and_invalidate_set, flush_and_invalidate_line)
        (prefetch_line): New methods of blocking_cache_component.

2005-05-10  Dave Brolley  <brolley@@redhat.com>

        * cache.cxx (cache_component): Initialize total_latency_p. Add
        "total-latency?" attribute.
        (read_line): Return the total latency of all accesses if total_latency_p
        is set.
        (write_line): Ditto.
        (handle_bus_error): Copy the status, s, to transaction_status.
        (blocking_cache_component::read): Always return transaction_status.
        (blocking_cache_component::write): Ditto.
        * cache.h (total_latency_p): New member of cache_component.

2005-05-10  Dave Brolley  <brolley@@redhat.com>

        * cache.h (cache_component::lock_downstream): New virtual method.
        (cache_component::unlock_downstream): New virutal method.
        (blocking_cache_component::lock_downstream): New virtual override.
        (blocking_cache_component::unlock_downstream): New virtual override.
        * cache.cxx (read_line): Return the maximum latency from the reads
        performed if refill latency is not requested. Call lock_downstream
        before the first read. Call unlock_downstream before the final read.
        (write_line): Ditto.
        (blocking_cache_component): Add downstream-lock pin.

2005-05-10  Dave Brolley  <brolley@@redhat.com>

        * cache.cxx (blocking_cache_child_thread_root): Don't call
        child->child_wait_for_resume.
        (handle_bus_error): Ditto.
        (DEFN_METHOD): SID_SIG_CHILD_BLOCKED is now ctl_child_blocked.

2005-05-10  Dave Brolley  <brolley@@redhat.com>

        * Makefile.am (AM_XXXFLAGS): Set it to $(TOP_CXXFLAGS).
        (AM_MAKEFLAGS): Pass along TOP_CXXFLAGS.
        * Makefile.in: Regenerated.

2005-05-10  Dave Brolley  <brolley@@redhat.com>

        * mep-cache.cxx (mep_cache): Inherit from blocking_cache_component.
        * mep-cache.h (mep_cache): Inherit from blocking_cache_component.
        * cache.h (sidblockingutil.h): #include it.
        (namespace sid): Add "using" clause. Remove sid:: qualifier from
        declarations.
        (cache_component): Inhereit virtually from
        fixed_attribute_map_component and fixed_pin_map_component.
        (cache_component::write): Variants now virtual.
        (cache_component::read): Ditto.
        (cache_component::handle_read_error): New virtual method.
        (cache_component::handle_write_error): New virtual method.
        (cache_bus::write_any): Call cache.write.
        (cache_bus::read_any): Call cache.read.
        (blocking_cache_component): New class.
        * cache.cxx (cache_component::write_any): Call handle_write_error to
        handle bus errors.
        (cache_component::write_line): Ditto.
        (cache_component::read_any): Call handle_read_error as above.
        (cache_component::read_line): Ditto.
        (blocking_cache_child_thread_root): New function.
        (blocking_cache_component): New constructor.
        (handle_bus_error): New method.
        (blocking_cache_component:write): New methods.
        (blocking_cache_component::read): New methods.
        (CacheListTypes): Add hw-blocking-cache-basic and
        hw-blocking-cache-buffer-8, hw-blocking-cache-direct* and
        hw-blocking-cache/*kb*.
        (CacheCreate): Parse and construct the above.
@
text
@d171 3
@


1.10
log
@2004-04-29  Dave Brolley  <brolley@@redhat.com>

        * cacheutil.cxx (cache_set::expell_line): Don't update the set here.

2004-04-29  Dave Brolley  <brolley@@redhat.com>

        * cache.cxx: Update calls to cache::find.
        * cacheutil.cxx (cache_set::allocate_lines): Now takes cache index as
        an argument. Update all callers.
        (cache_set::find): Now returns a pointer to the line, if found. Update
        all callers.
        (cache::find): Ditto.
        (cache_set::expell_line): Update the status of the expelled line.
        * cacheutil.h (cache_line_factory::make_line): Now takes cache index as
        an argument. Update all callers.
        (cache_set::allocate_lines): Now takes cache index as
        an argument. Update all callers.
        (cache_set::find): Now returns a pointer to the line, if found. Update
        all callers.
        (cache::find): Ditto.

2004-04-29  Dave Brolley  <brolley@@redhat.com>

        * cacheutil.h (cache_line): Removed copy constructor. Now virtual base
        class.
        (cache_line::operator=): Removed.
        (internal_cache_line): New class implements former cache_line class.
        (cache_set): Now takes cache_line_factory.
        (allocate_lines): New method moves line allocation from the constructor.
        (cache_set::set_line): Now takes reference to cache_line.
        (cache_set::replace_line): Renamed to expell_line. Now returns a pointer
        to the expelled line.
        (cache): Now takes cache_line_factory argument.
        (cache::init): New method moves set allocation from the constructor.
        (cache_set::expell_line): Renamed to expell_line. Now returns a pointer
        to the expelled line.
        (cache_line_factory): New class.
        * cacheutil.cxx (cache_line): Removed copy constructor. Now virtual base
        class.
        (cache_line::operator=): Removed.
        (internal_cache_line): New class implements former cache_line class.
        (cache_set): Now takes cache_line_factory.
        (allocate_lines): New method moves line allocation from the constructor.
        (cache_set::set_line): Now takes reference to cache_line.
        (dummy): Now internal to cache_set::find.
        (cache_set::replace_line): Renamed to expell_line. Now returns a pointer
        to the expelled line.
        (cache): Now takes cache_line_factory argument.
        (cache::init): New method moves set allocation from the constructor.
        (cache_set::expell_line): Renamed to expell_line. Now returns a pointer
        to the expelled line.
        * cache.h (cache_replacement_algorithm::expell): Renamed from 'replace'.
        Returns a pointer to the expelled line. Update specializations.
        (cache_component): Now takes a cache_line_factory as an argument.
        Private data now protected.
        (line_factory): New member of cache_component.
        (~cache_component): Now virtual.
        (CacheCreate): Pass internal_line_factory to cache_component.
        * cache.cxx (line_sizes): Make it static.
        (line_sizes): Ditto.
        (replacement_algorithms): Ditto.
        (internal_line_factory): New static cache_line_factory.
        (cache_component): Now takes a cache_line_factory as an argument. Pass
        the cache line factory to the constructor for acache. Save a reference
        to the line factory. Call acache.init
        (write_any): Rewrite to use cache::expell_line instead of the former
        cache::replace.
        (read_any): Ditto.
        (cache_replacement_algorithm::expell): Renamed from 'replace'. Returns
        a pointer to the expelled line. Update all callers and specializations.
        (CacheCreate): Pass internal_line_factory to cache_component.
@
text
@d10 1
d16 1
a16 4
using sid::bus;
using sid::component;
using sid::host_int_2;
using sid::host_int_4;
d23 1
d27 2
d50 8
a57 8
  DEFN_METHOD (sid::big_int_1)
  DEFN_METHOD (sid::big_int_2)
  DEFN_METHOD (sid::big_int_4)
  DEFN_METHOD (sid::big_int_8)
  DEFN_METHOD (sid::little_int_1)
  DEFN_METHOD (sid::little_int_2)
  DEFN_METHOD (sid::little_int_4)
  DEFN_METHOD (sid::little_int_8)
d102 1
a102 1
		       protected fixed_attribute_map_component,
d104 1
a104 1
		       protected fixed_pin_map_component,
d115 14
d145 1
a145 1
  void flush_all_lines (host_int_4 ignore);
d148 1
a148 1
  void flush_line (host_int_4 addr);
d151 1
a151 1
  void flush_set (host_int_4 set);
d154 1
a154 1
  void flush_and_invalidate_set (host_int_4 set);
d157 1
a157 1
  void invalidate_all_lines (host_int_4 ignore);
d160 1
a160 1
  void invalidate_line (host_int_4 addr);
d163 1
a163 1
  void flush_and_invalidate_line (host_int_4 addr);
d166 1
a166 1
  void invalidate_set (host_int_4 set);
d169 1
a169 1
  void prefetch_line (host_int_4 addr);
d172 1
a172 1
  void lock_line (host_int_4 addr);
d175 9
a183 1
  void unlock_line (host_int_4 addr);
d188 1
a188 1
  status set_nothing (const string& ignore) { return sid::component::ok; }
d203 10
d234 1
d240 1
d247 1
a247 1
  return cache.write_any (addr, data);
d254 1
a254 1
  return cache.read_any (addr, data);
d261 96
a356 8
DEFN_METHOD (sid::big_int_1)
DEFN_METHOD (sid::big_int_2)
DEFN_METHOD (sid::big_int_4)
DEFN_METHOD (sid::big_int_8)
DEFN_METHOD (sid::little_int_1)
DEFN_METHOD (sid::little_int_2)
DEFN_METHOD (sid::little_int_4)
DEFN_METHOD (sid::little_int_8)
d359 48
@


1.9
log
@* contribute Red Hat patch from 2002-06-04.

2002-06-04  Graydon Hoare  <graydon@@redhat.com>

	* cache.h (cache_component::set_refill_latency): New method.
	(cache_component::get_refill_latency): New method.
	(cache_component::refill_latency_specified): New flag.
	(cache_component): Virtualize "refill-latency" attribute,
	note when it is set in "refill_latency_specified".
	* cache.cxx (read_line): Return either refill latency or
	downstream latencies, depending on whether explicit refill
	latency has been specified, not sum of both.
@
text
@d3 1
a3 1
// Copyright (C) 2001, 2002 Red Hat.
d65 1
a65 1
  void replace (cache_set& cset, cache_line& old_line, cache_line new_line);
d76 1
a76 1
  void replace (cache_set& cset, cache_line& old_line, cache_line new_line);
d88 1
a88 1
  void replace (cache_set& cset, cache_line& old_line, cache_line new_line);
d96 1
a96 1
  void replace (cache_set& cset, cache_line& old_line, cache_line new_line);
d109 2
a110 1
		   unsigned line_sz, cache_replacement_algorithm& replacer);
d112 1
a112 1
  ~cache_component () throw();
d120 1
a120 1
private:
d197 1
@


1.8
log
@2002-07-16  Dave Brolley  <brolley@@redhat.com>

	* cache.h (cache): Add flush_and_invalidate_set_pin and
	flush_and_invalidate_pin.
	* cache.cxx (cache_component): Initialize flush_and_invalidate_set_pin
	and flush_and_invalidate_pin. Add flush-and-invalidate and
	flush-and-invalidate-set pins.
	(flush_set): Don't flush an invalid line.
	(flush_and_invalidate_set): New method.
	(flush_and_invalidate_line): New method.
	* hw-cache.xml, hw-cache.txt: Modified accordingly.
@
text
@d171 2
d203 1
@


1.7
log
@2002-06-08  Ben Elliston  <bje@@redhat.com>

	* cacheutil.h (cache_set::expunge): New method.
	(cache_set::operator[]): Likewise.
	(cache::invalidate): Likewise.
	(cache::operator[]): Likewise.
	* cacheutil.cxx (cache::invalidate): Implement.
	* cache.h (cache_component::flush_set_pin): New pin.
	(cache_component::flush_set): New callback method.
	(cache_component::invalidate_set_pin): New pin.
	(cache_component::invalidate_set): New method.
	* cache.cxx (cache_component constructor): Initialise and add
	"flush-set" and "invalidate-set" pins.
	(cache_component::flush_set): Implement.
	(cache_component::invalidate_set): Likewise.
	* hw-cache.xml: Update documentation.
@
text
@d137 3
d145 3
@


1.6
log
@2002-05-17  Ben Elliston  <bje@@redhat.com>

	* Makefile.am (DEJAGNUTESTS): Add refill.exp.
	* cache.h (cache_component::refill_latency): New member.
	* cache.cxx (cache_component::read_line): Add refill latency.
	(cache_component::cache_component): Initialise it and add a
	corresponding "refill-latency" attribute.
	* hw-cache.xml (memory latency) : Document refill latency.
@
text
@d134 3
d142 3
@


1.5
log
@* function ++, cleanup

2001-10-22  Frank Ch. Eigler  <fche@@redhat.com>

	* cache.cxx (flush_all): New function.  Associate with "flush-all" pin.
	* cacheutil.cxx (find_any_dirty): New functions.
	* cache.h, cacheutil.h: Relevant changes.
	Warning cleanups throughout.
	* hw-cache.xml (flush-all): Document new pin.
	* hw-cache-txt: Regenerated.
@
text
@d3 1
a3 1
// Copyright (C) 2001 Red Hat.
d188 1
@


1.4
log
@* make it compile with GCC 3.0:
        - missing throw() specifiers in bus & component dtors
	- `std::' vs `::' namespace issues
@
text
@d80 1
a80 1
  vector <int> lru;
d127 3
@


1.3
log
@* GCC 2.95.3 fixes.

[cache/ChangeLog]
	* cache.h (cache:bus::DEFN_METHOD): Generate function prototypes only.
	(::DEFN_METHOD): Generate actual inline function bodies after
	cache_component is defined.

[mapper/ChangeLog]
	* compMapper.cxx (generic_mapper_bus::write_any,
	generic_mapper_bus::read_any): Move function definition after
	generic_mapper is defined.
@
text
@d111 2
@


1.2
log
@2001-06-21  Ben Elliston  <bje@@redhat.com>

	* cache.h (cache_component::hit_latency): New member.
	(cache_component::miss_latency): Likewise.
	* cache.cxx (cache_component ctor): Add attributes for these.
	(cache_component::write_any): Add miss latency for misaligned
	accesses. Set latency correctly for return.
	(cache_component::read_any): Add miss latency for misaligned
	accesses. Set latency correctly for return.
	(cache_component::read_line): Return the true result of reads.
	(cache_component::write_line): Likewise for writes.
	* hw-cache.txt: Document latency extensions.
@
text
@d40 1
a40 4
  bus::status write_any (host_int_4 addr, DataType data)
  {
    return cache.write_any (addr, data);
  }
d43 1
a43 4
  bus::status read_any (host_int_4 addr, DataType& data)
  {
    return cache.read_any (addr, data);
  }
d46 2
a47 2
  bus::status write(host_int_4 addr, DataType data) throw () { return this->write_any(addr, data); } \
  bus::status read(host_int_4 addr, DataType& data) throw () { return this->read_any(addr, data); }
d57 1
d184 28
@


1.1
log
@Index: component/ChangeLog
2001-06-12  Ben Elliston  <bje@@redhat.com>

	* CATALOG: Add hw-cache-basic and friends.
	* configure.in (make_subdirs): Add cache.
	* configure: Regenerate.
	* Makefile.in: Ditto.

Index: component/cache/ChangeLog
2001-06-15  Ben Elliston  <bje@@redhat.com>

	* cache.cxx: New file.
	* cache.h: Likewise.
	* cacheutil.cxx: Likewise.
	* cacheutil.h: Likewise.
	* log2.h: Likewise.
	* hw-cache.txt: Likewise.

Index: component/testsuite/ChangeLog
2001-06-05  Ben Elliston  <bje@@redhat.com>

	* Makefile.am: New file.
	* Makefile.in: Generate.

2001-06-15  Ben Elliston  <bje@@redhat.com>

	* sidcomp.cache/cache.exp: New test case.
	* sidcomp.cache/cachedocs.exp: Ditto.
	* sidcomp.cache/cachemonkey.exp: Ditto.
	* sidcomp.cache/coherency.exp: Ditto.
	* sidcomp.cache/fifo.exp: Ditto.
	* sidcomp.cache/flush.exp: Ditto.
	* sidcomp.cache/lock.exp: Ditto.
	* sidcomp.cache/lru.exp: Ditto.
	* sidcomp.cache/misaligned.exp: Ditto.
	* sidcomp.cache/prefetch.exp: Ditto.
	* sidcomp.cache/random.exp: Ditto.
	* sidcomp.cache/types.exp: Ditto.
	* sidcomp.cache/utils.exp: Ditto.
	* sidcomp.cache/writealloc.exp: Ditto.
	* sidcomp.cache/writethru.exp: Ditto.
@
text
@d17 1
d185 3
@

