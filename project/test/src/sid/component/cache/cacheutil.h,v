head	1.8;
access;
symbols
	sid-snapshot-20180601:1.8
	sid-snapshot-20180501:1.8
	sid-snapshot-20180401:1.8
	sid-snapshot-20180301:1.8
	sid-snapshot-20180201:1.8
	sid-snapshot-20180101:1.8
	sid-snapshot-20171201:1.8
	sid-snapshot-20171101:1.8
	sid-snapshot-20171001:1.8
	sid-snapshot-20170901:1.8
	sid-snapshot-20170801:1.8
	sid-snapshot-20170701:1.8
	sid-snapshot-20170601:1.8
	sid-snapshot-20170501:1.8
	sid-snapshot-20170401:1.8
	sid-snapshot-20170301:1.8
	sid-snapshot-20170201:1.8
	sid-snapshot-20170101:1.8
	sid-snapshot-20161201:1.8
	sid-snapshot-20161101:1.8
	sid-snapshot-20160901:1.8
	sid-snapshot-20160801:1.8
	sid-snapshot-20160701:1.8
	sid-snapshot-20160601:1.8
	sid-snapshot-20160501:1.8
	sid-snapshot-20160401:1.8
	sid-snapshot-20160301:1.8
	sid-snapshot-20160201:1.8
	sid-snapshot-20160101:1.8
	sid-snapshot-20151201:1.8
	sid-snapshot-20151101:1.8
	sid-snapshot-20151001:1.8
	sid-snapshot-20150901:1.8
	sid-snapshot-20150801:1.8
	sid-snapshot-20150701:1.8
	sid-snapshot-20150601:1.8
	sid-snapshot-20150501:1.8
	sid-snapshot-20150401:1.8
	sid-snapshot-20150301:1.8
	sid-snapshot-20150201:1.8
	sid-snapshot-20150101:1.8
	sid-snapshot-20141201:1.8
	sid-snapshot-20141101:1.8
	sid-snapshot-20141001:1.8
	sid-snapshot-20140901:1.8
	sid-snapshot-20140801:1.8
	sid-snapshot-20140701:1.8
	sid-snapshot-20140601:1.8
	sid-snapshot-20140501:1.8
	sid-snapshot-20140401:1.8
	sid-snapshot-20140301:1.8
	sid-snapshot-20140201:1.8
	sid-snapshot-20140101:1.8
	sid-snapshot-20131201:1.8
	sid-snapshot-20131101:1.8
	sid-snapshot-20131001:1.8
	sid-snapshot-20130901:1.8
	sid-snapshot-20130801:1.8
	sid-snapshot-20130701:1.8
	sid-snapshot-20130601:1.8
	sid-snapshot-20130501:1.8
	sid-snapshot-20130401:1.8
	sid-snapshot-20130301:1.8
	sid-snapshot-20130201:1.8
	sid-snapshot-20130101:1.8
	sid-snapshot-20121201:1.8
	sid-snapshot-20121101:1.8
	sid-snapshot-20121001:1.8
	sid-snapshot-20120901:1.8
	sid-snapshot-20120801:1.8
	sid-snapshot-20120701:1.8
	sid-snapshot-20120601:1.8
	sid-snapshot-20120501:1.8
	sid-snapshot-20120401:1.8
	sid-snapshot-20120301:1.8
	sid-snapshot-20120201:1.8
	sid-snapshot-20120101:1.8
	sid-snapshot-20111201:1.8
	sid-snapshot-20111101:1.8
	sid-snapshot-20111001:1.8
	sid-snapshot-20110901:1.8
	sid-snapshot-20110801:1.8
	sid-snapshot-20110701:1.8
	sid-snapshot-20110601:1.8
	sid-snapshot-20110501:1.8
	sid-snapshot-20110401:1.8
	sid-snapshot-20110301:1.8
	sid-snapshot-20110201:1.8
	sid-snapshot-20110101:1.8
	sid-snapshot-20101201:1.8
	sid-snapshot-20101101:1.8
	sid-snapshot-20101001:1.8
	sid-snapshot-20100901:1.8
	sid-snapshot-20100801:1.8
	sid-snapshot-20100701:1.8
	sid-snapshot-20100601:1.8
	sid-snapshot-20100501:1.8
	sid-snapshot-20100401:1.8
	sid-snapshot-20100301:1.8
	sid-snapshot-20100201:1.8
	sid-snapshot-20100101:1.8
	sid-snapshot-20091201:1.8
	sid-snapshot-20091101:1.8
	sid-snapshot-20091001:1.8
	sid-snapshot-20090901:1.8
	sid-snapshot-20090801:1.8
	sid-snapshot-20090701:1.8
	sid-snapshot-20090601:1.8
	sid-snapshot-20090501:1.8
	sid-snapshot-20090401:1.8
	sid-snapshot-20090301:1.8
	sid-snapshot-20090201:1.8
	sid-snapshot-20090101:1.8
	sid-snapshot-20081201:1.8
	sid-snapshot-20081101:1.8
	sid-snapshot-20081001:1.8
	sid-snapshot-20080901:1.8
	sid-snapshot-20080801:1.8
	sid-snapshot-20080701:1.8
	sid-snapshot-20080601:1.8
	sid-snapshot-20080501:1.8
	sid-snapshot-20080403:1.8
	sid-snapshot-20080401:1.8
	sid-snapshot-20080301:1.8
	sid-snapshot-20080201:1.8
	sid-snapshot-20080101:1.8
	sid-snapshot-20071201:1.8
	sid-snapshot-20071101:1.8
	sid-snapshot-20071001:1.8
	sid-20020905-branchpoint:1.6
	sid-20020905-branch:1.6.0.2
	cygnus_cvs_20020108_pre:1.5;
locks; strict;
comment	@ * @;


1.8
date	2005.05.10.15.41.05;	author brolley;	state Exp;
branches;
next	1.7;

1.7
date	2004.04.29.20.26.08;	author brolley;	state Exp;
branches;
next	1.6;

1.6
date	2002.06.08.20.33.18;	author bje;	state Exp;
branches;
next	1.5;

1.5
date	2001.10.22.19.48.44;	author fche;	state Exp;
branches;
next	1.4;

1.4
date	2001.09.26.21.11.48;	author fche;	state Exp;
branches;
next	1.3;

1.3
date	2001.08.03.06.02.42;	author mrg;	state Exp;
branches;
next	1.2;

1.2
date	2001.07.10.03.17.17;	author bje;	state Exp;
branches;
next	1.1;

1.1
date	2001.06.15.04.19.50;	author bje;	state Exp;
branches;
next	;


desc
@@


1.8
log
@2005-05-10  Dave Brolley  <brolley@@redhat.com>

        * hw-cache.xml: Input to flush-set, invalidate-set and
        * hw-cache.txt: Regenerated.
        flush-and-invalidate-set is now an address.
        * cacheutil.h (addr_to_tag): New method of cache.
        * cacheutil.cxx (addr_to_tag): New method of cache.
        * cache.cxx (cache_component::flush_set): Input argument is now an address.
        (cache_component::flush_and_invalidate_set): Likewise.
        (blocking_cache_component::flush_set): Likewise.
        (blocking_cache_component::flush_and_invalidate_set): Likewise.

2005-05-10  Dave Brolley  <brolley@@redhat.com>

        * cache.cxx (cache_component): Initialize data_width. Add "data-width"
        attribute.
        (read_line): Access the data 4 or 8 bytes at a time, depending on
        data_width.
        (write_line): Ditto.
        (read_downstream, write_downstream): New methods of cache_component.
        * cache.h (read_downstream, write_downstream): New methods of
        cache_component.
        (data_width): New member of cache_component.

2005-05-10  Dave Brolley  <brolley@@redhat.com>

        * cache.cxx (cache_component): Add "operation-status" pin.
        (cache_component::flush_all_lines): Accumulate latency and call
        report_status.
        (cache_component::flush_line): Ditto.
        (cache_component::flush_set): Ditto.
        (cache_component::flush_and_invalidate_set): Ditto.
        (cache_component::invalidate_all_lines): Call report_status.
        (cache_component::invalidate_line): Ditto.
        (cache_component::flush_and_invalidate_line): Ditto.
        (cache_component::invalidate_set): Ditto.
        (cache_component::prefetch_line): Ditto.
        (cache_component::lock_line): Ditto.
        (cache_component::unlock_line): Ditto.
        (blocking_cache_component::flush_all_lines): Call report_status if
        child is blocked.
        (blocking_cache_component::flush_line): Ditto.
        (blocking_cache_component::flush_set): Ditto.
        (blocking_cache_component::flush_and_invalidate_set): Ditto.
        (blocking_cache_component::flush_and_invalidate_line): Ditto.
        (blocking_cache_component::prefetch_line): Ditto.
        * cache.h (report_status): New method of cache_component.
        (operation_status_pin): New output pin.

2005-05-10  Dave Brolley  <brolley@@redhat.com>

        * cache.h (flush_all_lines, flush_line, flush_set)
        (flush_and_invalidate_set, flush_and_invalidate_line)
        (prefetch_line): Now virtual. Also, new methods of
        blocking_cache_component.
        (setup_flush_all_transaction, setup_flush_line_transaction)
        (setup_flush_set_transaction)
        (setup_flush_and_invalidate_set_transaction)
        (setup_flush_and_invalidate_line_transaction)
        (perform_flush_all_transaction, perform_flush_line_transaction)
        (perform_flush_set_transaction)
        (perform_flush_and_invalidate_set_transaction)
        (perform_flush_and_invalidate_line_transaction): New methods of
        blocking_cache_component.
        * cache.cxx (blocking_cache_component::write): Remove log message. Don't
        need return code from continue_child_thread_and_wait.
        blocking_cache_component::read): Ditto.
        (flush_all_lines, flush_line, flush_set)
        (flush_and_invalidate_set, flush_and_invalidate_line)
        (prefetch_line): New methods of blocking_cache_component.

2005-05-10  Dave Brolley  <brolley@@redhat.com>

        * cache.cxx (cache_component): Initialize total_latency_p. Add
        "total-latency?" attribute.
        (read_line): Return the total latency of all accesses if total_latency_p
        is set.
        (write_line): Ditto.
        (handle_bus_error): Copy the status, s, to transaction_status.
        (blocking_cache_component::read): Always return transaction_status.
        (blocking_cache_component::write): Ditto.
        * cache.h (total_latency_p): New member of cache_component.

2005-05-10  Dave Brolley  <brolley@@redhat.com>

        * cache.h (cache_component::lock_downstream): New virtual method.
        (cache_component::unlock_downstream): New virutal method.
        (blocking_cache_component::lock_downstream): New virtual override.
        (blocking_cache_component::unlock_downstream): New virtual override.
        * cache.cxx (read_line): Return the maximum latency from the reads
        performed if refill latency is not requested. Call lock_downstream
        before the first read. Call unlock_downstream before the final read.
        (write_line): Ditto.
        (blocking_cache_component): Add downstream-lock pin.

2005-05-10  Dave Brolley  <brolley@@redhat.com>

        * cache.cxx (blocking_cache_child_thread_root): Don't call
        child->child_wait_for_resume.
        (handle_bus_error): Ditto.
        (DEFN_METHOD): SID_SIG_CHILD_BLOCKED is now ctl_child_blocked.

2005-05-10  Dave Brolley  <brolley@@redhat.com>

        * Makefile.am (AM_XXXFLAGS): Set it to $(TOP_CXXFLAGS).
        (AM_MAKEFLAGS): Pass along TOP_CXXFLAGS.
        * Makefile.in: Regenerated.

2005-05-10  Dave Brolley  <brolley@@redhat.com>

        * mep-cache.cxx (mep_cache): Inherit from blocking_cache_component.
        * mep-cache.h (mep_cache): Inherit from blocking_cache_component.
        * cache.h (sidblockingutil.h): #include it.
        (namespace sid): Add "using" clause. Remove sid:: qualifier from
        declarations.
        (cache_component): Inhereit virtually from
        fixed_attribute_map_component and fixed_pin_map_component.
        (cache_component::write): Variants now virtual.
        (cache_component::read): Ditto.
        (cache_component::handle_read_error): New virtual method.
        (cache_component::handle_write_error): New virtual method.
        (cache_bus::write_any): Call cache.write.
        (cache_bus::read_any): Call cache.read.
        (blocking_cache_component): New class.
        * cache.cxx (cache_component::write_any): Call handle_write_error to
        handle bus errors.
        (cache_component::write_line): Ditto.
        (cache_component::read_any): Call handle_read_error as above.
        (cache_component::read_line): Ditto.
        (blocking_cache_child_thread_root): New function.
        (blocking_cache_component): New constructor.
        (handle_bus_error): New method.
        (blocking_cache_component:write): New methods.
        (blocking_cache_component::read): New methods.
        (CacheListTypes): Add hw-blocking-cache-basic and
        hw-blocking-cache-buffer-8, hw-blocking-cache-direct* and
        hw-blocking-cache/*kb*.
        (CacheCreate): Parse and construct the above.
@
text
@// cacheutil.h -- Helper classes for a generic memory cache. -*- C++ -*-

// Copyright (C) 2001, 2002, 2004, 2005 Red Hat.
// This file is part of SID and is licensed under the GPL.
// See the file COPYING.SID for conditions for redistribution.

#ifndef CACHEUTIL_H
#define CACHEUTIL_H

#include <vector>
#include <iostream>
#include <sidcomp.h>
#include <sidattrutil.h>

#include "log2.h"

typedef sid::host_int_4 cache_tag;
typedef sid::host_int_1 byte;

// The cache_line class represents a line in a cache. It is a virtual base
// class which requires an implementation.

class cache_line
{
public:
  virtual ~cache_line () {}

  // Get the line's tag.
  virtual void set_tag (cache_tag tag) = 0;
  virtual cache_tag tag () const = 0;

  // Mark the line dirty or clean.
  virtual void dirty () = 0;
  virtual void clean () = 0;

  // Mark the line valid or invalid.
  virtual void validate () = 0;
  virtual void invalidate () = 0;

  // Lock or unlock the line.
  virtual void lock () = 0;
  virtual void unlock () = 0;

  // Is the line dirty?
  virtual bool dirty_p () const = 0;

  // Is the line valid?
  virtual bool valid_p () const = 0;

  // Is the line locked?
  virtual bool locked_p () const = 0;

  // Insert or extract a datum from the line, starting at byte offset.
#define DEFN_METHOD(DataType) \
  virtual void insert (unsigned offset, DataType new_data) = 0; \
  virtual void extract (unsigned offset, DataType& new_data) const = 0;

  DEFN_METHOD (sid::big_int_1)
  DEFN_METHOD (sid::big_int_2)
  DEFN_METHOD (sid::big_int_4)
  DEFN_METHOD (sid::big_int_8)
  DEFN_METHOD (sid::little_int_1)
  DEFN_METHOD (sid::little_int_2)
  DEFN_METHOD (sid::little_int_4)
  DEFN_METHOD (sid::little_int_8)
#undef DEFN_METHOD

  // Dump a line in human readable form to cout.
  virtual void dump () const;
  virtual void dump_data () const = 0;
};

// The internal_cache_line class keeps its data internally and is the default
// cache_line implementation.

// +-------+-----+----------------+ M = modified (dirty) bit
// | M V L | tag |     data       | V = valid bit
// +-------+-----+----------------+ L = lock bit
//           byte 0              N

class internal_cache_line : public cache_line
{
public:
  internal_cache_line (unsigned line_size);
  ~internal_cache_line ();

  // Get the line's tag.
  void set_tag (cache_tag tag);
  cache_tag tag () const;

  // Mark the line dirty or clean.
  void dirty ();
  void clean ();

  // Mark the line valid or invalid.
  void validate ();
  void invalidate ();

  // Lock or unlock the line.
  void lock ();
  void unlock ();

  // Is the line dirty?
  bool dirty_p () const;

  // Is the line valid?
  bool valid_p () const;

  // Is the line locked?
  bool locked_p () const;

#define DEFN_METHOD(DataType) \
  /* Insert a datum into the line, starting at byte offset.  */ \
  virtual void insert (unsigned offset, DataType new_data) \
  { \
    assert (offset + sizeof (new_data) <= size); \
    DataType::value_type mem_image = new_data.target_memory_value (); \
    memcpy (& data[offset], & mem_image, sizeof (new_data)); \
    dirty_bit = true; \
  } \
  /* Extract a datum from the line, starting at byte offset.  */ \
  virtual void extract (unsigned offset, DataType& new_data) const \
  { \
    assert (offset + sizeof (new_data) <= size); \
    DataType::value_type mem_image; \
    memcpy (& mem_image, & data[offset], sizeof (new_data)); \
    new_data.set_target_memory_value (mem_image); \
  }

  DEFN_METHOD (sid::big_int_1)
  DEFN_METHOD (sid::big_int_2)
  DEFN_METHOD (sid::big_int_4)
  DEFN_METHOD (sid::big_int_8)
  DEFN_METHOD (sid::little_int_1)
  DEFN_METHOD (sid::little_int_2)
  DEFN_METHOD (sid::little_int_4)
  DEFN_METHOD (sid::little_int_8)
#undef DEFN_METHOD

  // Dump a line in human readable form to cout.
  void dump_data () const;

private:
  unsigned size;
  bool valid_bit;
  bool dirty_bit;
  bool lock_bit;
  byte *data;
  cache_tag atag;
};

// Allow cache tags and a line's cache tag to be compared directly.
bool operator== (const cache_tag&, const cache_line&);
bool operator== (const cache_line&, const cache_tag&);

// A class from which all replacement algorithms should be derived.

class cache_set;
class cache_replacement_algorithm
{
public:
  virtual ~cache_replacement_algorithm () {}

  // Choose a line to replace in a cache set. Return it, if successful
  virtual cache_line *expell (cache_set &set) = 0;

  // Update state (for example, treating LRU bits), if required.
  virtual void update (cache_set& cset, cache_line &accessed_line) {}
};

// The cache_line_factory creates and destroys cache lines. This default
// implementation creates lines of type internal_cache_line.

class cache_line_factory
{
public:
  virtual ~cache_line_factory () {}

  virtual cache_line *make_line (unsigned line_size, unsigned index, unsigned way)
  {
    return new internal_cache_line (line_size);
  }
  virtual void destroy_line (cache_line *line)
  {
    delete line;
  }
};

// The cache_set class represents a set of cache_lines.  For a 2-way
// associative cache, there will be just two lines in the set.

class cache_set
{
public:
  cache_set (unsigned line_size, unsigned nlines,
	     cache_replacement_algorithm& alg, cache_line_factory &f);
  virtual ~cache_set ();

  void allocate_lines (unsigned index);

  // Try to find a line in the cache with a matching tag. 
  // If found, return it.
  virtual cache_line* find (const cache_tag& tag);

  // Find any dirty cache line.  If found, return the line
  virtual cache_line* find_any_dirty ();

  // Invalidate the entire set.
  void invalidate (); 

  // Is there any vacancy for a new line?
  bool vacancy_p () const;

  // Remove a line from the set.
  void expunge_line (cache_line& line);

  // Flush the entire set.
  void expunge (unsigned index);

  // Choose a line to be replaced. Return it, if successful.
  cache_line *expell_line ();

  // Return the number of lines in the set.
  unsigned num_lines () const;

  // Get a cache line from slot `i' of the set.
  cache_line& get_line (unsigned i) const;

  // Place a cache line into slot `i' of the set.
  void set_line (unsigned i, cache_line &line);

  // Dump diagnostics to cerr.
  virtual void dump () const;

  cache_line& operator[] (unsigned index)
  {
    assert (index < num_lines ());
    return *(lines[index]);
  }

private:
  cache_replacement_algorithm& replacer;
  cache_line_factory& line_factory;
  std::vector <cache_line*> lines;
  unsigned line_size;
  typedef std::vector <cache_line*>::iterator iterator_t;
  typedef std::vector <cache_line*>::const_iterator const_iterator_t;
};


// The cache class represents the complete cache as a series of
// cache_sets.  For a fully-associative cache, there will be one set
// with many lines.  For a direct mapped cache, there will be many
// sets of single lines.  Provide high-level methods for the user.

// The constructor builds a cache cache_size bytes in size and of the
// specified associativity.  0=fully assoc., 1=direct mapped, 2=2-way,
// etc.  The replacement algorithm is user-provided.

class cache
{
public:
  cache (unsigned cache_size, unsigned line_size,
	 unsigned assoc, cache_replacement_algorithm& replacer,
	 cache_line_factory &line_factory);
  virtual ~cache ();

  void init ();

  // Calculate a tag.
  cache_tag addr_to_tag (const sid::host_int_4& addr) const;

  // Calculate a set index.
  unsigned addr_to_index (const sid::host_int_4& addr) const;

  // Perform the inverse operation.
  sid::host_int_4 tag_to_addr (const cache_tag& tag) const;
  
  // Find a line, given a tag.  If found, return it.
  cache_line* find (cache_tag tag);

  // Find any dirty cache line.  If found, set hit to true and return it.
  // Otherwise, set hit to false.
  cache_line* find_any_dirty ();

  // Remove a line from the cache.
  void expunge (cache_line& line);

  // Vacancy in the cache?
  bool vacancy_p (const sid::host_int_4& addr) const;

  // Choose a line in the cache to expell in place of one
  // representing 'tag'. Return it, if successful.
  cache_line *expell_line (cache_tag tag);

  // Invalidate the entire cache.
  void invalidate ();

  // Invalidate a specific set (indexed).
  void invalidate (unsigned index);

  // The number of sets in the cache.
  unsigned num_sets ();

  // Dump the entire cache's state.
  void dump () const;

  // index = (addr & mask) >> shift
  struct
  {
    sid::host_int_4 mask;
    unsigned shift;
  } hash_params;

  cache_set& operator[] (unsigned index)
  {
    assert (index < num_sets ());
    return *(sets[index]);
  }
    
private:
  // Compute the index into the cache.
  unsigned hash_fn (const cache_tag& tag) const;

  // The number of non-tag bits in an address.
  unsigned num_non_tag_bits;

  std::vector <cache_set*> sets;
  typedef std::vector <cache_set*>::iterator iterator_t;
  typedef std::vector <cache_set*>::const_iterator const_iterator_t;
};

#endif // CACHEUTIL_H
@


1.7
log
@2004-04-29  Dave Brolley  <brolley@@redhat.com>

        * cacheutil.cxx (cache_set::expell_line): Don't update the set here.

2004-04-29  Dave Brolley  <brolley@@redhat.com>

        * cache.cxx: Update calls to cache::find.
        * cacheutil.cxx (cache_set::allocate_lines): Now takes cache index as
        an argument. Update all callers.
        (cache_set::find): Now returns a pointer to the line, if found. Update
        all callers.
        (cache::find): Ditto.
        (cache_set::expell_line): Update the status of the expelled line.
        * cacheutil.h (cache_line_factory::make_line): Now takes cache index as
        an argument. Update all callers.
        (cache_set::allocate_lines): Now takes cache index as
        an argument. Update all callers.
        (cache_set::find): Now returns a pointer to the line, if found. Update
        all callers.
        (cache::find): Ditto.

2004-04-29  Dave Brolley  <brolley@@redhat.com>

        * cacheutil.h (cache_line): Removed copy constructor. Now virtual base
        class.
        (cache_line::operator=): Removed.
        (internal_cache_line): New class implements former cache_line class.
        (cache_set): Now takes cache_line_factory.
        (allocate_lines): New method moves line allocation from the constructor.
        (cache_set::set_line): Now takes reference to cache_line.
        (cache_set::replace_line): Renamed to expell_line. Now returns a pointer
        to the expelled line.
        (cache): Now takes cache_line_factory argument.
        (cache::init): New method moves set allocation from the constructor.
        (cache_set::expell_line): Renamed to expell_line. Now returns a pointer
        to the expelled line.
        (cache_line_factory): New class.
        * cacheutil.cxx (cache_line): Removed copy constructor. Now virtual base
        class.
        (cache_line::operator=): Removed.
        (internal_cache_line): New class implements former cache_line class.
        (cache_set): Now takes cache_line_factory.
        (allocate_lines): New method moves line allocation from the constructor.
        (cache_set::set_line): Now takes reference to cache_line.
        (dummy): Now internal to cache_set::find.
        (cache_set::replace_line): Renamed to expell_line. Now returns a pointer
        to the expelled line.
        (cache): Now takes cache_line_factory argument.
        (cache::init): New method moves set allocation from the constructor.
        (cache_set::expell_line): Renamed to expell_line. Now returns a pointer
        to the expelled line.
        * cache.h (cache_replacement_algorithm::expell): Renamed from 'replace'.
        Returns a pointer to the expelled line. Update specializations.
        (cache_component): Now takes a cache_line_factory as an argument.
        Private data now protected.
        (line_factory): New member of cache_component.
        (~cache_component): Now virtual.
        (CacheCreate): Pass internal_line_factory to cache_component.
        * cache.cxx (line_sizes): Make it static.
        (line_sizes): Ditto.
        (replacement_algorithms): Ditto.
        (internal_line_factory): New static cache_line_factory.
        (cache_component): Now takes a cache_line_factory as an argument. Pass
        the cache line factory to the constructor for acache. Save a reference
        to the line factory. Call acache.init
        (write_any): Rewrite to use cache::expell_line instead of the former
        cache::replace.
        (read_any): Ditto.
        (cache_replacement_algorithm::expell): Renamed from 'replace'. Returns
        a pointer to the expelled line. Update all callers and specializations.
        (CacheCreate): Pass internal_line_factory to cache_component.
@
text
@d3 1
a3 1
// Copyright (C) 2001, 2002, 2004 Red Hat.
d273 3
@


1.6
log
@2002-06-08  Ben Elliston  <bje@@redhat.com>

	* cacheutil.h (cache_set::expunge): New method.
	(cache_set::operator[]): Likewise.
	(cache::invalidate): Likewise.
	(cache::operator[]): Likewise.
	* cacheutil.cxx (cache::invalidate): Implement.
	* cache.h (cache_component::flush_set_pin): New pin.
	(cache_component::flush_set): New callback method.
	(cache_component::invalidate_set_pin): New pin.
	(cache_component::invalidate_set): New method.
	* cache.cxx (cache_component constructor): Initialise and add
	"flush-set" and "invalidate-set" pins.
	(cache_component::flush_set): Implement.
	(cache_component::invalidate_set): Likewise.
	* hw-cache.xml: Update documentation.
@
text
@d3 1
a3 1
// Copyright (C) 2001, 2002 Red Hat.
d20 55
a74 1
// The cache_line class represents a line in a cache:
d81 1
a81 1
class cache_line
d84 2
a85 6
  cache_line (unsigned line_size);
  cache_line (unsigned line_size, cache_tag tag);
  cache_line (unsigned line_size, cache_tag tag, std::vector <byte> intial_data);
  cache_line (const cache_line&);
  cache_line& operator= (const cache_line&);
  virtual ~cache_line ();
d88 1
d112 16
a127 8
  // Insert a datum into the line, starting at byte offset.
  template <typename DataType>
  void insert (unsigned offset, DataType new_data)
  {
    assert (offset + sizeof (new_data) <= size);
    typename DataType::value_type mem_image = new_data.target_memory_value ();
    memcpy (& data[offset], & mem_image, sizeof (new_data));
    dirty_bit = true;
d130 9
a138 9
  // Extract a datum from the line, starting at byte offset.
  template <typename DataType>
  void extract (unsigned offset, DataType& new_data) const
  {
    assert (offset + sizeof (new_data) <= size);
    typename DataType::value_type mem_image;
    memcpy (& mem_image, & data[offset], sizeof (new_data));
    new_data.set_target_memory_value (mem_image);
  }
d141 1
a141 1
  void dump () const;
d164 2
a165 3
  // Place new_line in a cache slot. Point old_line to the existing line.
  // Return true if successful, false otherwise.
  virtual void replace (cache_set& cset, cache_line& old_line, cache_line new_line) = 0;
d168 1
a168 1
  virtual void update (cache_set& cset, cache_line& accessed_line) {}
d171 17
d196 1
a196 1
	     cache_replacement_algorithm& alg);
d198 3
a200 1
 
d202 2
a203 3
  // If found, set "hit" to true and return a ref to the line.
  // Otherwise, set "hit" to false.
  virtual cache_line& find (const cache_tag& tag, bool& hit);
d205 1
a205 2
  // Find any dirty cache line.  If found, set hit to true and return it.
  // Otherwise, set hit to false.
d220 2
a221 3
  // Replace a line in the set with new_line.
  // Return false if the line cannot be placed, true otherwise.
  void replace_line (cache_line& old_line, cache_line new_line);
d230 1
a230 1
  void set_line (unsigned i, const cache_line line);
d243 1
d245 1
d264 2
a265 1
	 unsigned assoc, cache_replacement_algorithm& replacer);
d268 2
d276 2
a277 3
  // Find a line, given a tag.  If found, set hit to true and return it.
  // Otherwise, set hit to false.
  cache_line& find (cache_tag tag, bool& hit);
d289 3
a291 4
  // Replace a line in the cache with 'new_line'.  If the expelled
  // line is dirty, set 'old_line' to it and return true, otherwise
  // false.
  void replace (cache_line& old_line, cache_line new_line);
@


1.5
log
@* function ++, cleanup

2001-10-22  Frank Ch. Eigler  <fche@@redhat.com>

	* cache.cxx (flush_all): New function.  Associate with "flush-all" pin.
	* cacheutil.cxx (find_any_dirty): New functions.
	* cache.h, cacheutil.h: Relevant changes.
	Warning cleanups throughout.
	* hw-cache.xml (flush-all): Document new pin.
	* hw-cache-txt: Regenerated.
@
text
@d3 1
a3 1
// Copyright (C) 2001 Red Hat.
d142 3
d161 6
d219 3
d235 6
@


1.4
log
@2001-09-26  Frank Ch. Eigler  <fche@@redhat.com>

	* cacheutil.cxx (hash_fn): Detect index overflow.  Complain loudly.
	* cacheutil.h: Include some more headers.
@
text
@d35 1
a35 1
  ~cache_line ();
d103 2
d122 1
a122 1
  ~cache_set ();
d129 4
d180 1
a180 1
  ~cache ();
d192 4
d211 1
a211 1
  int num_sets ();
@


1.3
log
@* make it compile with GCC 3.0:
        - missing throw() specifiers in bus & component dtors
	- `std::' vs `::' namespace issues
@
text
@d11 3
a13 1
#include <sidtypes.h>
@


1.2
log
@2001-07-10  Ben Elliston  <bje@@redhat.com>

	* cacheutil.h (class cache_line): Use std::vector, not vector.
	(class cache_set): Likewise.
	(class cache): Likewise.
@
text
@d92 2
a93 4

bool std::operator== (const cache_tag&, const cache_line&);
bool std::operator== (const cache_line&, const cache_tag&);

@


1.1
log
@Index: component/ChangeLog
2001-06-12  Ben Elliston  <bje@@redhat.com>

	* CATALOG: Add hw-cache-basic and friends.
	* configure.in (make_subdirs): Add cache.
	* configure: Regenerate.
	* Makefile.in: Ditto.

Index: component/cache/ChangeLog
2001-06-15  Ben Elliston  <bje@@redhat.com>

	* cache.cxx: New file.
	* cache.h: Likewise.
	* cacheutil.cxx: Likewise.
	* cacheutil.h: Likewise.
	* log2.h: Likewise.
	* hw-cache.txt: Likewise.

Index: component/testsuite/ChangeLog
2001-06-05  Ben Elliston  <bje@@redhat.com>

	* Makefile.am: New file.
	* Makefile.in: Generate.

2001-06-15  Ben Elliston  <bje@@redhat.com>

	* sidcomp.cache/cache.exp: New test case.
	* sidcomp.cache/cachedocs.exp: Ditto.
	* sidcomp.cache/cachemonkey.exp: Ditto.
	* sidcomp.cache/coherency.exp: Ditto.
	* sidcomp.cache/fifo.exp: Ditto.
	* sidcomp.cache/flush.exp: Ditto.
	* sidcomp.cache/lock.exp: Ditto.
	* sidcomp.cache/lru.exp: Ditto.
	* sidcomp.cache/misaligned.exp: Ditto.
	* sidcomp.cache/prefetch.exp: Ditto.
	* sidcomp.cache/random.exp: Ditto.
	* sidcomp.cache/types.exp: Ditto.
	* sidcomp.cache/utils.exp: Ditto.
	* sidcomp.cache/writealloc.exp: Ditto.
	* sidcomp.cache/writethru.exp: Ditto.
@
text
@d30 1
a30 1
  cache_line (unsigned line_size, cache_tag tag, vector <byte> intial_data);
d154 3
a156 3
  vector <cache_line*> lines;
  typedef vector <cache_line*>::iterator iterator_t;
  typedef vector <cache_line*>::const_iterator const_iterator_t;
d220 3
a222 3
  vector <cache_set*> sets;
  typedef vector <cache_set*>::iterator iterator_t;
  typedef vector <cache_set*>::const_iterator const_iterator_t;
@

