head	1.3;
access;
symbols
	sid-snapshot-20180601:1.3
	sid-snapshot-20180501:1.3
	sid-snapshot-20180401:1.3
	sid-snapshot-20180301:1.3
	sid-snapshot-20180201:1.3
	sid-snapshot-20180101:1.3
	sid-snapshot-20171201:1.3
	sid-snapshot-20171101:1.3
	sid-snapshot-20171001:1.3
	sid-snapshot-20170901:1.3
	sid-snapshot-20170801:1.3
	sid-snapshot-20170701:1.3
	sid-snapshot-20170601:1.3
	sid-snapshot-20170501:1.3
	sid-snapshot-20170401:1.3
	sid-snapshot-20170301:1.3
	sid-snapshot-20170201:1.3
	sid-snapshot-20170101:1.3
	sid-snapshot-20161201:1.3
	sid-snapshot-20161101:1.3
	sid-snapshot-20160901:1.3
	sid-snapshot-20160801:1.3
	sid-snapshot-20160701:1.3
	sid-snapshot-20160601:1.3
	sid-snapshot-20160501:1.3
	sid-snapshot-20160401:1.3
	sid-snapshot-20160301:1.3
	sid-snapshot-20160201:1.3
	sid-snapshot-20160101:1.3
	sid-snapshot-20151201:1.3
	sid-snapshot-20151101:1.3
	sid-snapshot-20151001:1.3
	sid-snapshot-20150901:1.3
	sid-snapshot-20150801:1.3
	sid-snapshot-20150701:1.3
	sid-snapshot-20150601:1.3
	sid-snapshot-20150501:1.3
	sid-snapshot-20150401:1.3
	sid-snapshot-20150301:1.3
	sid-snapshot-20150201:1.3
	sid-snapshot-20150101:1.3
	sid-snapshot-20141201:1.3
	sid-snapshot-20141101:1.3
	sid-snapshot-20141001:1.3
	sid-snapshot-20140901:1.3
	sid-snapshot-20140801:1.3
	sid-snapshot-20140701:1.3
	sid-snapshot-20140601:1.3
	sid-snapshot-20140501:1.3
	sid-snapshot-20140401:1.3
	sid-snapshot-20140301:1.3
	sid-snapshot-20140201:1.3
	sid-snapshot-20140101:1.3
	sid-snapshot-20131201:1.3
	sid-snapshot-20131101:1.3
	sid-snapshot-20131001:1.3
	sid-snapshot-20130901:1.3
	sid-snapshot-20130801:1.3
	sid-snapshot-20130701:1.3
	sid-snapshot-20130601:1.3
	sid-snapshot-20130501:1.3
	sid-snapshot-20130401:1.3
	sid-snapshot-20130301:1.3
	sid-snapshot-20130201:1.3
	sid-snapshot-20130101:1.3
	sid-snapshot-20121201:1.3
	sid-snapshot-20121101:1.3
	sid-snapshot-20121001:1.3
	sid-snapshot-20120901:1.3
	sid-snapshot-20120801:1.3
	sid-snapshot-20120701:1.3
	sid-snapshot-20120601:1.3
	sid-snapshot-20120501:1.3
	sid-snapshot-20120401:1.3
	sid-snapshot-20120301:1.3
	sid-snapshot-20120201:1.3
	sid-snapshot-20120101:1.3
	sid-snapshot-20111201:1.3
	sid-snapshot-20111101:1.3
	sid-snapshot-20111001:1.3
	sid-snapshot-20110901:1.3
	sid-snapshot-20110801:1.3
	sid-snapshot-20110701:1.3
	sid-snapshot-20110601:1.3
	sid-snapshot-20110501:1.3
	sid-snapshot-20110401:1.3
	sid-snapshot-20110301:1.3
	sid-snapshot-20110201:1.3
	sid-snapshot-20110101:1.3
	sid-snapshot-20101201:1.3
	sid-snapshot-20101101:1.3
	sid-snapshot-20101001:1.3
	sid-snapshot-20100901:1.3
	sid-snapshot-20100801:1.3
	sid-snapshot-20100701:1.3
	sid-snapshot-20100601:1.3
	sid-snapshot-20100501:1.3
	sid-snapshot-20100401:1.3
	sid-snapshot-20100301:1.3
	sid-snapshot-20100201:1.3
	sid-snapshot-20100101:1.3
	sid-snapshot-20091201:1.3
	sid-snapshot-20091101:1.3
	sid-snapshot-20091001:1.3
	sid-snapshot-20090901:1.3
	sid-snapshot-20090801:1.3
	sid-snapshot-20090701:1.3
	sid-snapshot-20090601:1.3
	sid-snapshot-20090501:1.3
	sid-snapshot-20090401:1.3
	sid-snapshot-20090301:1.3
	sid-snapshot-20090201:1.3
	sid-snapshot-20090101:1.3
	sid-snapshot-20081201:1.3
	sid-snapshot-20081101:1.3
	sid-snapshot-20081001:1.3
	sid-snapshot-20080901:1.3
	sid-snapshot-20080801:1.3
	sid-snapshot-20080701:1.3
	sid-snapshot-20080601:1.3
	sid-snapshot-20080501:1.3
	sid-snapshot-20080403:1.3
	sid-snapshot-20080401:1.3
	sid-snapshot-20080301:1.3
	sid-snapshot-20080201:1.3
	sid-snapshot-20080101:1.3
	sid-snapshot-20071201:1.3
	sid-snapshot-20071101:1.3
	sid-snapshot-20071001:1.3
	sid-20020905-branchpoint:1.2
	sid-20020905-branch:1.2.0.2
	cygnus_cvs_20020108_pre:1.2;
locks; strict;
comment	@ * @;


1.3
date	2007.02.05.20.28.42;	author brolley;	state Exp;
branches;
next	1.2;

1.2
date	2001.07.12.11.37.32;	author mrg;	state Exp;
branches;
next	1.1;

1.1
date	2000.12.07.19.31.09;	author fche;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Support for Toshiba MeP.
@
text
@// sidcomputil.h - Useful mix-in classes for components.  -*- C++ -*-

// Copyright (C) 1999, 2000, 2007 Red Hat.
// This file is part of SID and is licensed under the GPL.
// See the file COPYING.SID for conditions for redistribution.

#ifndef SIDCOMPUTIL_H
#define SIDCOMPUTIL_H

#include <sidconfig.h>
#include <sidcomp.h>

#include <string>
#include <vector>
#include <map>
#include <algorithm>

namespace sidutil
{
  // The no_bus_component class is used by components that have no bus 
  // interface.  This class overrides the bus-related pure virtual
  // methods declared in sid::component.
  class no_bus_component: public virtual sid::component
  {
  public:
    std::vector<std::string> bus_names() throw()
      {
	return std::vector<std::string>();
      }

    sid::bus*
    find_bus(const std::string& name) throw()
      {
	return 0;
      }
  };


  // The no_accessor_component class is used by components that have
  // no accessors. This class overrides the accessor-related pure
  // virtual methods declared in sid::component.
  class no_accessor_component: public virtual sid::component
  {
  public:
    std::vector<std::string>
    accessor_names() throw()
      {
	return std::vector<std::string>();
      }	     

    sid::component::status
    connect_accessor(const std::string& name, sid::bus* bus) throw()
      {
	return sid::component::not_found;
      }

    sid::component::status
    disconnect_accessor(const std::string& nanme, sid::bus* bus) throw()
      {
	return sid::component::not_found;
      }

    sid::bus* connected_bus(const std::string& name) throw()
      {
	return 0;
      }
  };


  // The no_pin_component class is used by components that have no
  // pins. This class overrides the pin-related pure virtual methods
  // declared in sid::component.
  class no_pin_component: public virtual sid::component
  {
  public:
    std::vector<std::string> pin_names() throw()
      {
	return std::vector<std::string>();
      }

    sid::pin* find_pin(const std::string& name) throw()
      {
	return 0;
      }

    sid::component::status
    connect_pin(const std::string& name, sid::pin* pin) throw()
      {
	return sid::component::not_found;
      }

    sid::component::status
    disconnect_pin(const std::string& name, sid::pin* pin) throw()
      {
	return sid::component::not_found;
      }

    std::vector<sid::pin*>
    connected_pins(const std::string& name) throw()
      {
	return std::vector<sid::pin*>();
      }	    
  };


  // The no_attribute_component class is used by components that have
  // no attributes. This class overrides the attribute-related pure
  // virtual methods declared in sid::component.
  class no_attribute_component: public virtual sid::component
  {
  public:
    virtual std::vector<std::string> attribute_names() throw()
      {
	return std::vector<std::string>();
      }

    virtual std::vector<std::string>
    attribute_names(const std::string& category) throw()
      {
	return std::vector<std::string>();
      }

    std::string attribute_value(const std::string& name) throw()
      {
	return std::string();
      }

    sid::component::status
    set_attribute_value(const std::string& name,
			const std::string& value) throw()
      {
	return sid::component::not_found;
      }	
  };


  // The no_relation_component class is used by components that have
  // no relations. This class overrides the relation-related pure
  // virtual methods declared in sid::component.
  class no_relation_component: public virtual sid::component
  {
  public:
    std::vector<std::string> 
    relationship_names() throw()
      {
	return std::vector<std::string>();
      }

    sid::component::status
    relate (const std::string& rel, 
	    sid::component*) 
      throw()
      {
	return sid::component::not_found;
      }

    sid::component::status
    unrelate (const std::string& rel, 
	      sid::component*) 
      throw()
      {
	return sid::component::not_found;
      }

    std::vector<sid::component*>
    related_components (const std::string& rel)
      throw()
      {
	return std::vector<sid::component*>();
      }
  };


  // A fixed_relation_map_component maintains component relationships 
  // either as single pointers (as accessors) or a vector of pointers
  // (as output pins).
  class fixed_relation_map_component: public virtual sid::component
  {
  public:
    ~fixed_relation_map_component() {}

    typedef std::vector<sid::component*> component_relation_t;

    std::vector<std::string> 
    relationship_names () throw()
      {
	std::vector<std::string> names;
	for (uni_relation_map_t::const_iterator it = 
				 this->uni_relation_map.begin();
	     it != this->uni_relation_map.end();
	     it++)
	   {
	     names.push_back(it->first);
	   }
	    
	 for (multi_relation_map_t::const_iterator it = 
				this->multi_relation_map.begin();
	      it != this->multi_relation_map.end();
	      it++)
	    {
	      names.push_back(it->first);
	    }
	 return names;
      }
    
    sid::component::status
    relate (const std::string& name, sid::component* comp) 
      throw()
      {
	if (this->uni_relation_map.find(name) != this->uni_relation_map.end())
	  {
	    sid::component** holder = (this->uni_relation_map[name]);	    
	    if (*holder == 0)
	      {
		*holder = comp;
		return sid::component::ok;
	      }
	    else
	      {
		// relationship already set
		return sid::component::bad_value;
	      }
	  }
	else if (this->multi_relation_map.find(name) != this->multi_relation_map.end())
	    {
	      component_relation_t* holder = this->multi_relation_map[name];
	      component_relation_t::iterator it =
		find (holder->begin(), holder->end(), comp);

	      if (it == holder->end())
		{
		  holder->push_back (comp);
		  return sid::component::ok;
		}
	      else
		{
		  // duplicate
		  return sid::component::bad_value;
		}
	    }
	    
	return sid::component::not_found;
      }


    sid::component::status
    unrelate (const std::string& name, sid::component* comp) 
      throw()
      {
	if (this->uni_relation_map.find(name) != this->uni_relation_map.end())
	  {
	    sid::component** holder = (this->uni_relation_map[name]);	    
	    if (*holder == comp)
	      {
		*holder = 0;
		return sid::component::ok;
	      }
	    else
	      {
		// relationship not already set
		return sid::component::bad_value;
	      }
	  }
	else if (this->multi_relation_map.find(name) != this->multi_relation_map.end())
	    {
	      component_relation_t* holder = this->multi_relation_map[name];
	      component_relation_t::iterator it =
		find (holder->begin(), holder->end(), comp);

	      if (it != holder->end())
		{
		  holder->erase (it);
		  return sid::component::ok;
		}
	      else
		{
		  // does not exist
		  return sid::component::bad_value;
		}
	    }
	    
	return sid::component::not_found;
      }


    std::vector<sid::component*>
    related_components (const std::string& name)
      throw()
      {
	component_relation_t list;

	if (this->uni_relation_map.find(name) != this->uni_relation_map.end())
	  {
	    sid::component** holder = this->uni_relation_map[name];
	    if (*holder != 0)
	      list.push_back (*holder);
	  }
	else if (this->multi_relation_map.find(name) != this->multi_relation_map.end())
	  {
	    component_relation_t* holder = this->multi_relation_map[name];
	    list = /* copy of */ *holder;
	  }
	
	return list;
      }

  protected:
    void
    add_uni_relation(const std::string& name, sid::component** ptr)
      {
	assert (uni_relation_map.find(name) == uni_relation_map.end());
	assert (multi_relation_map.find(name) == multi_relation_map.end());
	uni_relation_map[name] = ptr;
      } 
    
    void
    add_multi_relation(const std::string& name, component_relation_t* ptr)
      {
	assert (uni_relation_map.find(name) == uni_relation_map.end());
	assert (multi_relation_map.find(name) == multi_relation_map.end());
	multi_relation_map[name] = ptr;
      }
    
  private:
    typedef std::map<std::string, sid::component**> uni_relation_map_t;
    typedef std::map<std::string, component_relation_t*> multi_relation_map_t;
    mutable uni_relation_map_t uni_relation_map;
    mutable multi_relation_map_t multi_relation_map;
  };
}


#endif // SIDCOMPUTIL_H
@


1.2
log
@* GCC 3.0 & 2.95.3 fixes.

[component/audio/ChangeLog]
	* compAudio.cxx (fd_audio): Add missing throw() specifiers to this dtor.
	* components.h (basic_codec, generic_audio, nop_audio, fd_audio,
	linux_audio, solaris_audio): Add missing throw() specifiers to these
	dtors.

[component/cfgroot/ChangeLog]
	* compConfig.cxx (cfgroot_component): Add missing throw() specifiers
	to this dtor.

[component/tcl/ChangeLog]
	* compTcl.cxx (tcl_component): Add missing throw() specifiers to this
	dtor.

[include/ChangeLog]
	* sidattrutil.h (attribute_coder_base, attribute_coder_virtual,
	attribute_coder_alias, attribute_coder_virtual_parameterized,
	attribute_coder, attribute_coder_ro, attribute_coder_ro_value,
	attribute_coder_bus_rw, attribute_coder_bus_wo,
	fixed_attribute_map_component): Add missing throw() specifiers
	to these dtors.
	* sidbusutil.h (word_bus, passthrough_bus, mux_passthrough_bus,
	passthrough_word_bus, harvard_bus, byte_bus, callback_byte_bus,
@
text
@d3 1
a3 1
// Copyright (C) 1999, 2000 Red Hat.
d180 1
a180 1
    ~fixed_relation_map_component() throw() {}
@


1.1
log
@* public snapshot of sid simulator
@
text
@d180 2
@

