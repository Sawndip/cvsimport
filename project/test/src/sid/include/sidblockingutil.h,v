head	1.4;
access;
symbols
	sid-snapshot-20180601:1.4
	sid-snapshot-20180501:1.4
	sid-snapshot-20180401:1.4
	sid-snapshot-20180301:1.4
	sid-snapshot-20180201:1.4
	sid-snapshot-20180101:1.4
	sid-snapshot-20171201:1.4
	sid-snapshot-20171101:1.4
	sid-snapshot-20171001:1.4
	sid-snapshot-20170901:1.4
	sid-snapshot-20170801:1.4
	sid-snapshot-20170701:1.4
	sid-snapshot-20170601:1.4
	sid-snapshot-20170501:1.4
	sid-snapshot-20170401:1.4
	sid-snapshot-20170301:1.4
	sid-snapshot-20170201:1.4
	sid-snapshot-20170101:1.4
	sid-snapshot-20161201:1.4
	sid-snapshot-20161101:1.4
	sid-snapshot-20160901:1.4
	sid-snapshot-20160801:1.4
	sid-snapshot-20160701:1.4
	sid-snapshot-20160601:1.4
	sid-snapshot-20160501:1.4
	sid-snapshot-20160401:1.4
	sid-snapshot-20160301:1.4
	sid-snapshot-20160201:1.4
	sid-snapshot-20160101:1.4
	sid-snapshot-20151201:1.4
	sid-snapshot-20151101:1.4
	sid-snapshot-20151001:1.4
	sid-snapshot-20150901:1.4
	sid-snapshot-20150801:1.4
	sid-snapshot-20150701:1.4
	sid-snapshot-20150601:1.4
	sid-snapshot-20150501:1.4
	sid-snapshot-20150401:1.4
	sid-snapshot-20150301:1.4
	sid-snapshot-20150201:1.4
	sid-snapshot-20150101:1.4
	sid-snapshot-20141201:1.4
	sid-snapshot-20141101:1.4
	sid-snapshot-20141001:1.4
	sid-snapshot-20140901:1.4
	sid-snapshot-20140801:1.4
	sid-snapshot-20140701:1.4
	sid-snapshot-20140601:1.4
	sid-snapshot-20140501:1.4
	sid-snapshot-20140401:1.4
	sid-snapshot-20140301:1.4
	sid-snapshot-20140201:1.4
	sid-snapshot-20140101:1.4
	sid-snapshot-20131201:1.4
	sid-snapshot-20131101:1.4
	sid-snapshot-20131001:1.4
	sid-snapshot-20130901:1.4
	sid-snapshot-20130801:1.4
	sid-snapshot-20130701:1.4
	sid-snapshot-20130601:1.4
	sid-snapshot-20130501:1.4
	sid-snapshot-20130401:1.4
	sid-snapshot-20130301:1.4
	sid-snapshot-20130201:1.4
	sid-snapshot-20130101:1.4
	sid-snapshot-20121201:1.4
	sid-snapshot-20121101:1.4
	sid-snapshot-20121001:1.4
	sid-snapshot-20120901:1.4
	sid-snapshot-20120801:1.4
	sid-snapshot-20120701:1.4
	sid-snapshot-20120601:1.4
	sid-snapshot-20120501:1.4
	sid-snapshot-20120401:1.4
	sid-snapshot-20120301:1.4
	sid-snapshot-20120201:1.4
	sid-snapshot-20120101:1.4
	sid-snapshot-20111201:1.4
	sid-snapshot-20111101:1.4
	sid-snapshot-20111001:1.4
	sid-snapshot-20110901:1.4
	sid-snapshot-20110801:1.4
	sid-snapshot-20110701:1.4
	sid-snapshot-20110601:1.4
	sid-snapshot-20110501:1.4
	sid-snapshot-20110401:1.4
	sid-snapshot-20110301:1.4
	sid-snapshot-20110201:1.4
	sid-snapshot-20110101:1.4
	sid-snapshot-20101201:1.4
	sid-snapshot-20101101:1.4
	sid-snapshot-20101001:1.4
	sid-snapshot-20100901:1.4
	sid-snapshot-20100801:1.4
	sid-snapshot-20100701:1.4
	sid-snapshot-20100601:1.4
	sid-snapshot-20100501:1.4
	sid-snapshot-20100401:1.4
	sid-snapshot-20100301:1.4
	sid-snapshot-20100201:1.4
	sid-snapshot-20100101:1.4
	sid-snapshot-20091201:1.4
	sid-snapshot-20091101:1.4
	sid-snapshot-20091001:1.4
	sid-snapshot-20090901:1.4
	sid-snapshot-20090801:1.4
	sid-snapshot-20090701:1.4
	sid-snapshot-20090601:1.4
	sid-snapshot-20090501:1.4
	sid-snapshot-20090401:1.4
	sid-snapshot-20090301:1.4
	sid-snapshot-20090201:1.4
	sid-snapshot-20090101:1.4
	sid-snapshot-20081201:1.4
	sid-snapshot-20081101:1.4
	sid-snapshot-20081001:1.4
	sid-snapshot-20080901:1.4
	sid-snapshot-20080801:1.4
	sid-snapshot-20080701:1.4
	sid-snapshot-20080601:1.4
	sid-snapshot-20080501:1.4
	sid-snapshot-20080403:1.4
	sid-snapshot-20080401:1.4
	sid-snapshot-20080301:1.4
	sid-snapshot-20080201:1.4
	sid-snapshot-20080101:1.4
	sid-snapshot-20071201:1.4
	sid-snapshot-20071101:1.4
	sid-snapshot-20071001:1.4;
locks; strict;
comment	@ * @;


1.4
date	2007.02.19.16.39.12;	author brolley;	state Exp;
branches;
next	1.3;

1.3
date	2007.02.05.20.28.42;	author brolley;	state Exp;
branches;
next	1.2;

1.2
date	2005.08.02.18.53.10;	author brolley;	state Exp;
branches;
next	1.1;

1.1
date	2005.05.10.15.48.22;	author brolley;	state Exp;
branches;
next	;


desc
@@


1.4
log
@2007-02-19  Dave Brolley  <brolley@@redhat.com>

        * sidblockingutil.h (sidutil::blocking_component): Remove
        child_resume_mutex, child_stopped_mutex, chiuld_resume_condition and
        child_stopped_condition. Use a single mutex/condition pair:
        child_sync_mutex and child_sync_condition. Handle spontaneous returns
        from pthread_cond_wait.
        (control_status): Now volatile.
@
text
@// sidblockingutil.h - Elements used for blockable components.  -*- C++ -*-

// Copyright (C) 2004, 2005, 2007 Red Hat.
// This file is part of SID and is licensed under the GPL.
// See the file COPYING.SID for conditions for redistribution.

#ifndef SIDBLOCKINGUTIL_H
#define SIDBLOCKINGUTIL_H

#include <sidconfig.h>
#include <sidattrutil.h>

#include <iostream>
#include <pthread.h>

using std::cerr;
using std::endl;

namespace sidutil
{
  // A mix-in for classes with blocking
  class blocking_component
  : public virtual fixed_attribute_map_with_logging_component
  {
  protected:
    blocking_component (void *child_self, void *(*f)(void *)) :
      name ("unknown"),
      self (child_self),
      child_created (false),
      child_thread_function (f),
      blockable (false),
      still_blockable (false),
      control_status (ctl_parent)
      {
	add_attribute ("name", &name);
	add_attribute_notify ("blockable?", & still_blockable, this,
			      & blocking_component::set_blockable,
			      "setting");
      }
    ~blocking_component ()
      {
      }

    // -------------------------------------------------------------------
    // Child thread management
    //
  public:
    void child_init ()
      {
	log (10, "%s: child_init\n", name.c_str ());
	assert (child_created);
	// Lock the syncronization mutex
	pthread_mutex_lock (& child_sync_mutex);
      }

  protected:
    void parent_init ()
      {
	log (10, "%s: parent_init\n", name.c_str ());

	// Create a mutex for synchronizing the parent and child threads
	pthread_mutex_init (& child_sync_mutex, NULL);
	pthread_cond_init (& child_sync_condition, NULL);

	// Lock the mutex
	pthread_mutex_lock (& child_sync_mutex);
	control_status = ctl_parent;
      }

    // Called to ensure that a child thread exists
    //
    void need_child_thread ()
      {
	if (child_created)
	  return;

	log (10, "%s: need_child_thread\n", name.c_str ());

	parent_init ();

	// Create the child thread which will attempt to perform it's given
	// task.
	log (11, "%s: creating child thread\n", name.c_str ());
	child_created = true;
	int rc = pthread_create (& child_thread, NULL, child_thread_function, self);
	if (rc == EAGAIN)
	  {
	    cerr << name
		 << ": Could not create thread for a blockable component"
		 << endl;
	    child_created = false;
	  }
	else
	  log (11, "%s: child thread created\n", name.c_str ());
	  
	// Now wait for the child thread to signal that it is ready
	int status = wait_for_child_thread ();
	assert (status == ctl_child_complete);
      }

    // Called by the parent thread to signal the child thread to resume
    //
    int continue_child_thread_and_wait ()
      {
	log (10, "%s: continue_child_thread\n", name.c_str ());
	if (! child_created)
	  return ctl_child_complete;

	log (11, "%s: signalling child to resume\n", name.c_str ());
	return wait_for_child_thread ();
      }

    int wait_for_child_thread ()
      {
	log (10, "%s: wait_for_child_thread\n", name.c_str ());

	// Signal the child to resume
	assert (control_status != ctl_child_start);
	control_status = ctl_child_start;
	log (11, "%s: parent signalling the child thread\n", name.c_str ());
	pthread_cond_signal (& child_sync_condition);

	// Wait for the return signal from the child
	do {
	  log (11, "%s: parent waiting for child thread\n", name.c_str ());
	  pthread_cond_wait (& child_sync_condition, & child_sync_mutex);
	} while (control_status == ctl_child_start); 
	log (11, "%s: parent regains control\n", name.c_str ());

	return control_status;
      }

  public:
    // Called by the child thread to signal normal completion of the child task
    //
    void child_completed ()
      {
	log (10, "%s: child_completed\n", name.c_str ());
	log (11, "%s: child sending completion signal\n", name.c_str ());
	control_status = ctl_child_complete;
	blockable = still_blockable;
	child_wait_for_resume ();
      }
	    
    // Called by the child thread to signal that it is blocked
    //
    void child_blocked ()
      {
	log (10, "%s: child_blocked\n", name.c_str ());
	log (11, "%s: child sending blocked signal\n", name.c_str ());
	control_status = ctl_child_blocked;
	child_wait_for_resume ();
      }

  protected:	    
    // Called by the child thread to wait for a signal from the parent thread
    // to resume
    void child_wait_for_resume ()
      {
	log (10, "%s: child_wait_for_resume\n", name.c_str ());

	// Signal the parent that we're stopped
	log (11, "%s: child signalling the parent thread\n", name.c_str ());
	pthread_cond_signal (& child_sync_condition);

	// Wait for a signal to resume
	do {
	  log (11, "%s: child waiting for parent thread\n", name.c_str ());
	  pthread_cond_wait (& child_sync_condition, & child_sync_mutex);
	} while (control_status != ctl_child_start);
	log (11, "%s: child regains control\n", name.c_str ());
      }

    void set_blockable ()
      {
	// Never change the status of 'blockable' while the child thread is
	// active.
	if (control_status == ctl_parent || control_status == ctl_child_complete)
	  blockable = still_blockable;
      }

  protected:
    string name;
    bool blockable;
    bool still_blockable;
    void *self;
    bool child_created;
    pthread_t child_thread;
    void *(*child_thread_function)(void *);
    pthread_mutex_t child_sync_mutex;
    pthread_cond_t child_sync_condition;
    volatile enum
      {
	ctl_parent, ctl_child_start, ctl_child_blocked, ctl_child_complete
      } control_status;
  };
}

#endif // SIDBLOCKINGUTIL_H
@


1.3
log
@Support for Toshiba MeP.
@
text
@d52 2
a53 3
	// Lock both mutexes
	pthread_mutex_lock (& child_resume_mutex);
	pthread_mutex_lock (& child_stopped_mutex);
d61 6
a66 9
	// Create mutexes for synchronizing the parent and child threads
	pthread_mutex_init (& child_resume_mutex, NULL);
	pthread_cond_init (& child_resume_condition, NULL);
	pthread_mutex_init (& child_stopped_mutex, NULL);
	pthread_cond_init (& child_stopped_condition, NULL);

	// Lock both mutexes
	pthread_mutex_lock (& child_resume_mutex);
	pthread_mutex_lock (& child_stopped_mutex);
d120 2
a121 4
	pthread_cond_signal (& child_resume_condition);

	// Unlock the mutex so that the child can gain control
	pthread_mutex_unlock (& child_resume_mutex);
d124 5
a128 4
	pthread_cond_wait (& child_stopped_condition, & child_stopped_mutex);

	// Reacquire the mutex so that the child can gain control
	pthread_mutex_lock (& child_resume_mutex);
a129 2
	// Check the value of control_status
	assert (control_status != ctl_child_start);
d164 1
a164 4
	pthread_cond_signal (& child_stopped_condition);

	// Unlock the mutex so that the parent can gain control
	pthread_mutex_unlock (& child_stopped_mutex);
d167 5
a171 6
	log (11, "%s: child waiting for parent thread\n", name.c_str ());
	pthread_cond_wait (& child_resume_condition, & child_resume_mutex);

	// Reacquire the stopped mutex
	pthread_mutex_lock (& child_stopped_mutex);
	assert (control_status == ctl_child_start);
d190 3
a192 5
    pthread_mutex_t child_resume_mutex;
    pthread_cond_t child_resume_condition;
    pthread_mutex_t child_stopped_mutex;
    pthread_cond_t child_stopped_condition;
    enum
@


1.2
log
@2005-08-02  Dave Brolley  <brolley@@redhat.com>

        * sidbusutil.h (bus_arbitrator): Remove passthrough_pin.
        (check_passthrough): Now takes 'upstream' argument. Correct all calls.
        Don't check passthrough_pin here.
        (access_latency): New virtual method of bus_arbitrator.
        * sidblockingutil.h (blocking_component): Initialize still_blockable
        and control_status. Add blockable? using add_attribute_notify.
        (wait_for_child_thread): Assert that control_status != ctl_child_start.
        Return control_status.
        (child_completed): Set blockable to still_blockable.
        (set_blockable): New method of blocking_component.
        (still_blockable): New member of blocking_component.
@
text
@d3 1
a3 1
// Copyright (C) 2004, 2005 Red Hat.
d40 1
a40 1
    ~blocking_component () throw()
@


1.1
log
@2005-05-10  Dave Brolley  <brolley@@redhat.com>

        * sidcpuutil.h (read_insn_memory): Only call
        record_insn_memory_read_latency if --trace-counter or
        --final-insn-count are specified.
        (write_insn_memory): Ditto.
        (read_data_memory): Ditto.
        (write_data_memory): Ditto.

2005-05-10  Dave Brolley  <brolley@@redhat.com>

        * sidcpuutil.h (record_insn_memory_read_latency): New virtual method.
        (record_insn_memory_write_latency): New virtual method.
        (record_data_memory_read_latency): New virtual method.
        (record_data_memory_write_latency): New virtual method.
        (read_insn_memory): Call record_insn_memory_read_latency.
        (write_insn_memory): Call record_insn_memory_write_latency.
        (read_data_memory): Call record_data_memory_read_latency.
        (write_data_memory): Call record_data_memory_write_latency.
        * sidattrutil.h (fixed_attribute_map_with_logging_component::check_level):
        now protected and returns bool.
        * sidblockingutil.h: Rework ulog levels.
        * sidbusutil.h (bus_arbitrator): Rework ulog levels. Return the result
        of busy_status instead of bus::busy. New methods: busy_status and
        access_latency.
        (perform_read): Only call set_route_busy is status is bus::ok.
        (perform_write): Only call set_route_busy is status is bus::ok.

2005-05-10  Dave Brolley  <brolley@@redhat.com>

        * sidbusutil.h (bus_arbitrator::input_interface): New class.
        (bus_arbitrator::reschedule): Reschedule after the given number of
        cycles.
        (bus_arbitrator::arbitrate_read): New method.
        (bus_arbitrator::arbitrate_write): New method.
        (bus_arbitrator::prioritize_request): New virtual method.
        (bus_arbitrator::perform_read): Propogate the lock from the upstream
        interface to the downstream interface.
        (bus_arbitrator::perform_write): Ditto.
        (bus_arbitrator::lock_downstream): New virtual method.

2005-05-10  Dave Brolley  <brolley@@redhat.com>

        * sidblockingutil.h (blocking_component): Reimplement using mutexes
        for synchronization.

2005-05-10  Dave Brolley  <brolley@@redhat.com>

        * sidcpuutil.h (basic_cpu): Inherit virtually from all base classes.
        (basic_cpu::step_pin_handler): Now virtual.
        (basic_cpu::{read,write}_{insn,data}_memory): No longer const. Call
        handle_{insn,data}_memory_{read,write}_error for bus errors.
        (basic_big_endian_cpu::{read,write_{insn,data}_memory*): No longer
        const.
        (basic_little_endian_cpu): Ditto.
        * sidcomp.h (bus::status_t): Add 'busy'.
        * sidattrutil.h: Remove unused code.
        * sidblockingutil.h: New header.
@
text
@d3 1
a3 1
// Copyright (C) 2004 Red Hat.
d31 3
a33 1
      blockable (false)
d36 3
a38 1
	add_attribute ("blockable?", & blockable, "setting");
d44 13
d58 17
a74 1
    // Called by the parent thread to ensure that a child thread exists
a116 21
  private:
    // Called once by the parent thread just before the child thread is
    // created.
    void parent_init ()
      {
	log (10, "%s: parent_init\n", name.c_str ());

	// Create mutexes for synchronizing the parent and child threads
	pthread_mutex_init (& child_resume_mutex, NULL);
	pthread_cond_init (& child_resume_condition, NULL);
	pthread_mutex_init (& child_stopped_mutex, NULL);
	pthread_cond_init (& child_stopped_condition, NULL);

	// Lock both mutexes
	pthread_mutex_lock (& child_resume_mutex);
	pthread_mutex_lock (& child_stopped_mutex);
	control_status = ctl_parent;
      }

    // Called by the parent to wait for the child thread to give up control
    //
d122 1
a122 1
	assert (control_status == ctl_parent);
d136 2
a137 4
	int s = control_status;
	assert (s != ctl_child_start);
	control_status = ctl_parent;
	return s;
a140 11
    // Called by the child thread once when it is created.
    //
    void child_init ()
      {
	log (10, "%s: child_init\n", name.c_str ());
	assert (child_created);
	// Lock both mutexes
	pthread_mutex_lock (& child_resume_mutex);
	pthread_mutex_lock (& child_stopped_mutex);
      }

d148 1
d162 1
a162 1
  private:
d185 8
d196 1
@

