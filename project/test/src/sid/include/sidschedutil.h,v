head	1.1;
access;
symbols
	sid-snapshot-20180601:1.1
	sid-snapshot-20180501:1.1
	sid-snapshot-20180401:1.1
	sid-snapshot-20180301:1.1
	sid-snapshot-20180201:1.1
	sid-snapshot-20180101:1.1
	sid-snapshot-20171201:1.1
	sid-snapshot-20171101:1.1
	sid-snapshot-20171001:1.1
	sid-snapshot-20170901:1.1
	sid-snapshot-20170801:1.1
	sid-snapshot-20170701:1.1
	sid-snapshot-20170601:1.1
	sid-snapshot-20170501:1.1
	sid-snapshot-20170401:1.1
	sid-snapshot-20170301:1.1
	sid-snapshot-20170201:1.1
	sid-snapshot-20170101:1.1
	sid-snapshot-20161201:1.1
	sid-snapshot-20161101:1.1
	sid-snapshot-20160901:1.1
	sid-snapshot-20160801:1.1
	sid-snapshot-20160701:1.1
	sid-snapshot-20160601:1.1
	sid-snapshot-20160501:1.1
	sid-snapshot-20160401:1.1
	sid-snapshot-20160301:1.1
	sid-snapshot-20160201:1.1
	sid-snapshot-20160101:1.1
	sid-snapshot-20151201:1.1
	sid-snapshot-20151101:1.1
	sid-snapshot-20151001:1.1
	sid-snapshot-20150901:1.1
	sid-snapshot-20150801:1.1
	sid-snapshot-20150701:1.1
	sid-snapshot-20150601:1.1
	sid-snapshot-20150501:1.1
	sid-snapshot-20150401:1.1
	sid-snapshot-20150301:1.1
	sid-snapshot-20150201:1.1
	sid-snapshot-20150101:1.1
	sid-snapshot-20141201:1.1
	sid-snapshot-20141101:1.1
	sid-snapshot-20141001:1.1
	sid-snapshot-20140901:1.1
	sid-snapshot-20140801:1.1
	sid-snapshot-20140701:1.1
	sid-snapshot-20140601:1.1
	sid-snapshot-20140501:1.1
	sid-snapshot-20140401:1.1
	sid-snapshot-20140301:1.1
	sid-snapshot-20140201:1.1
	sid-snapshot-20140101:1.1
	sid-snapshot-20131201:1.1
	sid-snapshot-20131101:1.1
	sid-snapshot-20131001:1.1
	sid-snapshot-20130901:1.1
	sid-snapshot-20130801:1.1
	sid-snapshot-20130701:1.1
	sid-snapshot-20130601:1.1
	sid-snapshot-20130501:1.1
	sid-snapshot-20130401:1.1
	sid-snapshot-20130301:1.1
	sid-snapshot-20130201:1.1
	sid-snapshot-20130101:1.1
	sid-snapshot-20121201:1.1
	sid-snapshot-20121101:1.1
	sid-snapshot-20121001:1.1
	sid-snapshot-20120901:1.1
	sid-snapshot-20120801:1.1
	sid-snapshot-20120701:1.1
	sid-snapshot-20120601:1.1
	sid-snapshot-20120501:1.1
	sid-snapshot-20120401:1.1
	sid-snapshot-20120301:1.1
	sid-snapshot-20120201:1.1
	sid-snapshot-20120101:1.1
	sid-snapshot-20111201:1.1
	sid-snapshot-20111101:1.1
	sid-snapshot-20111001:1.1
	sid-snapshot-20110901:1.1
	sid-snapshot-20110801:1.1
	sid-snapshot-20110701:1.1
	sid-snapshot-20110601:1.1
	sid-snapshot-20110501:1.1
	sid-snapshot-20110401:1.1
	sid-snapshot-20110301:1.1
	sid-snapshot-20110201:1.1
	sid-snapshot-20110101:1.1
	sid-snapshot-20101201:1.1
	sid-snapshot-20101101:1.1
	sid-snapshot-20101001:1.1
	sid-snapshot-20100901:1.1
	sid-snapshot-20100801:1.1
	sid-snapshot-20100701:1.1
	sid-snapshot-20100601:1.1
	sid-snapshot-20100501:1.1
	sid-snapshot-20100401:1.1
	sid-snapshot-20100301:1.1
	sid-snapshot-20100201:1.1
	sid-snapshot-20100101:1.1
	sid-snapshot-20091201:1.1
	sid-snapshot-20091101:1.1
	sid-snapshot-20091001:1.1
	sid-snapshot-20090901:1.1
	sid-snapshot-20090801:1.1
	sid-snapshot-20090701:1.1
	sid-snapshot-20090601:1.1
	sid-snapshot-20090501:1.1
	sid-snapshot-20090401:1.1
	sid-snapshot-20090301:1.1
	sid-snapshot-20090201:1.1
	sid-snapshot-20090101:1.1
	sid-snapshot-20081201:1.1
	sid-snapshot-20081101:1.1
	sid-snapshot-20081001:1.1
	sid-snapshot-20080901:1.1
	sid-snapshot-20080801:1.1
	sid-snapshot-20080701:1.1
	sid-snapshot-20080601:1.1
	sid-snapshot-20080501:1.1
	sid-snapshot-20080403:1.1
	sid-snapshot-20080401:1.1
	sid-snapshot-20080301:1.1
	sid-snapshot-20080201:1.1
	sid-snapshot-20080101:1.1
	sid-snapshot-20071201:1.1
	sid-snapshot-20071101:1.1
	sid-snapshot-20071001:1.1
	sid-20020905-branchpoint:1.1
	sid-20020905-branch:1.1.0.2
	cygnus_cvs_20020108_pre:1.1;
locks; strict;
comment	@ * @;


1.1
date	2000.12.07.19.31.09;	author fche;	state Exp;
branches;
next	;


desc
@@


1.1
log
@* public snapshot of sid simulator
@
text
@// sidschedutil.h - Useful mix-in classes for interfacing to the
// generic scheduler components.  -*- C++ -*-

// Copyright (C) 1999, 2000 Red Hat.
// This file is part of SID and is licensed under the GPL.
// See the file COPYING.SID for conditions for redistribution.

#ifndef H_SIDSCHEDUTIL_H
#define H_SIDSCHEDUTIL_H

#include <sidconfig.h>

#include <sidcomp.h>
#include <sidpinutil.h>

#include <string>
#include <vector>
#include <map>

namespace sidutil
{
  // The template <Master> class should be a kind of
  // fixed_pin_map_component so we can register the various
  // communication pins.
  
  template <class Master>
  class scheduler_event_subscription
  {
  public:
    scheduler_event_subscription(const std::string& name,
				 Master* c,
				 void (Master::*f)()):
      master (c),
      pmf (f),
      event_pin (this, & scheduler_event_subscription<Master>::event_handler)
      {
	// It's not important to remove these at destruction time.
	master->add_pin (name + "-control", & this->control_pin);
	master->add_pin (name + "-event", & this->event_pin);
      }
    
    void cancel() { this->control_pin.drive (0); }
    
    void schedule(bool regular_p, sid::host_int_4 time)
      {
	assert ((time & 0x80000000) == 0);
	assert ((time & 0x7FFFFFFF) != 0);
	sid::host_int_4 value = regular_p ? (0x80000000 | time) : (time);
	this->control_pin.drive(value);
      }
    
    void schedule_irregular(sid::host_int_4 time)
      {
	this->schedule(false, time);
      }
    
    void schedule_regular(sid::host_int_4 time)
      {
	this->schedule(true, time);
      }
    
  private:
    Master* master;
    void (Master::*pmf)();
    sidutil::output_pin control_pin;
    sidutil::callback_pin<sidutil::scheduler_event_subscription<Master> > event_pin;
    void event_handler (sid::host_int_4)
      {
	(master->*pmf) ();
      }
  };
  
  
  // The template <Master> class should be a kind of
  // fixed_pin_map_component so we can register the various
  // communication pins.

  template <class Master>
  class scheduler_time_query
  {
  public:
    // The constructor must specify the component to whom we belong.
    scheduler_time_query(Master* m)
      :master(m)
      {
	master->add_pin ("time-query", & this->query_pin);
	master->add_pin ("time-high", & this->result_high_pin);
	master->add_pin ("time-low", & this->result_low_pin);
      }
    
    // XXX: This could be a host_int_8 just as easily, but Cygwin g++
    // seems to have problems returning that type in some contexts.
    
    sid::host_int_8 now()
      {
	this->query_pin.drive (0);
	// We should receive a callback on both result_*_pins.
	sid::host_int_4 high = this->result_high_pin.sense();
	sid::host_int_4 low = this->result_low_pin.sense();
	sid::host_int_8 value = 
	  (((sid::host_int_8) high) << 32) | (sid::host_int_8) low;
	return value;
      }

  private:
    Master* master;
    sidutil::output_pin query_pin;
    sidutil::input_pin result_high_pin;
    sidutil::input_pin result_low_pin;
  };

} // namespace sidutil

#endif // SIDSCHEDUTIL_H
@
