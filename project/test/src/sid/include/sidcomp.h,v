head	1.7;
access;
symbols
	sid-snapshot-20180601:1.7
	sid-snapshot-20180501:1.7
	sid-snapshot-20180401:1.7
	sid-snapshot-20180301:1.7
	sid-snapshot-20180201:1.7
	sid-snapshot-20180101:1.7
	sid-snapshot-20171201:1.7
	sid-snapshot-20171101:1.7
	sid-snapshot-20171001:1.7
	sid-snapshot-20170901:1.7
	sid-snapshot-20170801:1.7
	sid-snapshot-20170701:1.7
	sid-snapshot-20170601:1.7
	sid-snapshot-20170501:1.7
	sid-snapshot-20170401:1.7
	sid-snapshot-20170301:1.7
	sid-snapshot-20170201:1.7
	sid-snapshot-20170101:1.7
	sid-snapshot-20161201:1.7
	sid-snapshot-20161101:1.7
	sid-snapshot-20160901:1.7
	sid-snapshot-20160801:1.7
	sid-snapshot-20160701:1.7
	sid-snapshot-20160601:1.7
	sid-snapshot-20160501:1.7
	sid-snapshot-20160401:1.7
	sid-snapshot-20160301:1.7
	sid-snapshot-20160201:1.7
	sid-snapshot-20160101:1.7
	sid-snapshot-20151201:1.7
	sid-snapshot-20151101:1.7
	sid-snapshot-20151001:1.7
	sid-snapshot-20150901:1.7
	sid-snapshot-20150801:1.7
	sid-snapshot-20150701:1.7
	sid-snapshot-20150601:1.7
	sid-snapshot-20150501:1.7
	sid-snapshot-20150401:1.7
	sid-snapshot-20150301:1.7
	sid-snapshot-20150201:1.7
	sid-snapshot-20150101:1.7
	sid-snapshot-20141201:1.7
	sid-snapshot-20141101:1.7
	sid-snapshot-20141001:1.7
	sid-snapshot-20140901:1.7
	sid-snapshot-20140801:1.7
	sid-snapshot-20140701:1.7
	sid-snapshot-20140601:1.7
	sid-snapshot-20140501:1.7
	sid-snapshot-20140401:1.7
	sid-snapshot-20140301:1.7
	sid-snapshot-20140201:1.7
	sid-snapshot-20140101:1.7
	sid-snapshot-20131201:1.7
	sid-snapshot-20131101:1.7
	sid-snapshot-20131001:1.7
	sid-snapshot-20130901:1.7
	sid-snapshot-20130801:1.7
	sid-snapshot-20130701:1.7
	sid-snapshot-20130601:1.7
	sid-snapshot-20130501:1.7
	sid-snapshot-20130401:1.7
	sid-snapshot-20130301:1.7
	sid-snapshot-20130201:1.7
	sid-snapshot-20130101:1.7
	sid-snapshot-20121201:1.7
	sid-snapshot-20121101:1.7
	sid-snapshot-20121001:1.7
	sid-snapshot-20120901:1.7
	sid-snapshot-20120801:1.7
	sid-snapshot-20120701:1.7
	sid-snapshot-20120601:1.7
	sid-snapshot-20120501:1.7
	sid-snapshot-20120401:1.7
	sid-snapshot-20120301:1.7
	sid-snapshot-20120201:1.7
	sid-snapshot-20120101:1.7
	sid-snapshot-20111201:1.7
	sid-snapshot-20111101:1.7
	sid-snapshot-20111001:1.7
	sid-snapshot-20110901:1.7
	sid-snapshot-20110801:1.7
	sid-snapshot-20110701:1.7
	sid-snapshot-20110601:1.7
	sid-snapshot-20110501:1.7
	sid-snapshot-20110401:1.7
	sid-snapshot-20110301:1.7
	sid-snapshot-20110201:1.7
	sid-snapshot-20110101:1.7
	sid-snapshot-20101201:1.7
	sid-snapshot-20101101:1.7
	sid-snapshot-20101001:1.7
	sid-snapshot-20100901:1.7
	sid-snapshot-20100801:1.7
	sid-snapshot-20100701:1.7
	sid-snapshot-20100601:1.7
	sid-snapshot-20100501:1.7
	sid-snapshot-20100401:1.7
	sid-snapshot-20100301:1.7
	sid-snapshot-20100201:1.7
	sid-snapshot-20100101:1.7
	sid-snapshot-20091201:1.7
	sid-snapshot-20091101:1.7
	sid-snapshot-20091001:1.7
	sid-snapshot-20090901:1.7
	sid-snapshot-20090801:1.7
	sid-snapshot-20090701:1.7
	sid-snapshot-20090601:1.7
	sid-snapshot-20090501:1.7
	sid-snapshot-20090401:1.7
	sid-snapshot-20090301:1.7
	sid-snapshot-20090201:1.7
	sid-snapshot-20090101:1.7
	sid-snapshot-20081201:1.7
	sid-snapshot-20081101:1.7
	sid-snapshot-20081001:1.7
	sid-snapshot-20080901:1.7
	sid-snapshot-20080801:1.7
	sid-snapshot-20080701:1.7
	sid-snapshot-20080601:1.7
	sid-snapshot-20080501:1.7
	sid-snapshot-20080403:1.7
	sid-snapshot-20080401:1.7
	sid-snapshot-20080301:1.7
	sid-snapshot-20080201:1.7
	sid-snapshot-20080101:1.7
	sid-snapshot-20071201:1.7
	sid-snapshot-20071101:1.7
	sid-snapshot-20071001:1.7
	sid-20020905-branchpoint:1.5
	sid-20020905-branch:1.5.0.2
	cygnus_cvs_20020108_pre:1.5;
locks; strict;
comment	@ * @;


1.7
date	2007.02.05.20.28.42;	author brolley;	state Exp;
branches;
next	1.6;

1.6
date	2005.05.10.15.48.22;	author brolley;	state Exp;
branches;
next	1.5;

1.5
date	2001.06.25.01.45.28;	author bje;	state Exp;
branches;
next	1.4;

1.4
date	2001.06.22.12.26.24;	author fche;	state Exp;
branches;
next	1.3;

1.3
date	2001.06.22.08.11.09;	author bje;	state Exp;
branches;
next	1.2;

1.2
date	2001.06.21.05.40.01;	author bje;	state Exp;
branches;
next	1.1;

1.1
date	2000.12.07.19.31.09;	author fche;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Support for Toshiba MeP.
@
text
@// sidcomp.h - Define the external interface of a SID component, that
// is, the SID component API expressed in -*- C++ -*-.

// Copyright (C) 1999, 2000, 2001, 2004, 2007 Red Hat.
// This file is part of SID and is licensed under the GPL.
// See the file COPYING.SID for conditions for redistribution.

#ifndef SIDCOMP_H
#define SIDCOMP_H

#include <sidtypes.h>

#include <string>
#include <vector>

namespace sid
{
  // PART 0: Basic declarations
  // Together, these numbers describe the API as defined in the
  // abstract sid:: classes.  Every time the API changes, a new number
  // pair needs to be assigned.  These numbers figure in the
  // COMPONENT_LIBRARY_MAGIC mechanism in sidso.h, and prevents
  // interopration attempts with obsolete component objects.

  const unsigned API_MAJOR_VERSION = 3;
  const unsigned API_MINOR_VERSION = 3;

  // PART 1: Buses
  //
  // The abstract class sid::bus defines a function-call oriented
  // model of a hardware data/address/control bus.  It supports a
  // 32-bit address space, and allows reads and writes with data of
  // varying lengths.  The sid::bus class is the slave that provides
  // the data.  A bus accessor is the bus master which requests the
  // data.  One component's bus accessor is connected to another's bus
  // with the connect_accessor() method.

  class bus
  {
  public:
    // status values from read/write calls.
    enum status_t
    {
      ok           = 0x00, // done, no problems
      misaligned   = 0x01, // address misaligned
      unmapped     = 0x02, // address not in mapped range
      unpermitted  = 0x04, // may not read or may not write at address
      busy         = 0x05  // target component is busy
    };

    struct status
    {
      status ()
	:code (ok), latency (0) {}
      status (enum status_t c)
	:code (static_cast<host_int_1>(c)), latency (0) {}
      status (enum status_t c, host_int_2 lat)
	   :code (static_cast<host_int_1>(c)), latency (lat) {}
      operator int() const { return static_cast<int>(code); }

      host_int_1 code;
      host_int_2 latency;
    };


    // These member functions enumerate the Cartesian product of all
    // possible access requests to a bus:
    // {data-endianness} X {addr-width} X {data-width}
    //  little,big         4		   1,2,4,8

    // Write data at given address.

    virtual status write(host_int_4 addr, big_int_1 data) 
      throw () = 0;

    virtual status write(host_int_4 addr, little_int_1 data) 
      throw () = 0;

    virtual status write(host_int_4 addr, big_int_2 data) 
      throw () = 0;

    virtual status write(host_int_4 addr, little_int_2 data) 
      throw () = 0;

    virtual status write(host_int_4 addr, big_int_4 data)
      throw () = 0;

    virtual status write(host_int_4 addr, little_int_4 data)
      throw () = 0;

    virtual status write(host_int_4 addr, big_int_8 data) 
      throw () = 0;

    virtual status write(host_int_4 addr, little_int_8 data)
      throw () = 0;

    // Write data from given address.
    virtual status
    read(host_int_4 addr, big_int_1& data)
      throw () = 0;

    virtual status
    read(host_int_4 addr, little_int_1& data)
      throw()= 0;

    virtual status
    read(host_int_4 addr, big_int_2& data)
      throw () = 0;

    virtual status
    read(host_int_4 addr, little_int_2& data)
      throw()= 0;

    virtual status
    read(host_int_4 addr, big_int_4& data)
      throw () = 0;

    virtual status
    read(host_int_4 addr, little_int_4& data)
      throw()= 0;

    virtual status
    read(host_int_4 addr, big_int_8& data)
      throw () = 0;

    virtual status
    read(host_int_4 addr, little_int_8& data)
      throw()= 0;

  protected:
    bus() {}
    virtual ~bus() {}  
  };

  
  // PART 2: Pins
  //
  // The abstract pin class is one of the methods by which components
  // communicate.  The sid::pin class represents the input side of a
  // pin->pin connection.  Incoming signals are represented by calls
  // on the driven() method.  Outgoing signals may be sent to other
  // components' pins after they are given to a component using the
  // connect_pin() method.

  class pin
  {
  public:
    // A notification that the pin has been driven with some value.
    virtual void driven(host_int_4 value) throw () = 0;

  protected:
    pin() {}
    virtual ~pin() {}
  };
  

  // PART 3: Components
  //
  // The abstract component class is the basic building block of a
  // simulator.  Components are connected together to create complete
  // simulations.  There are several types of connections: pins, buses
  // and relations.

  class component
  {
  public:
    // Status indications for various calls.
    enum status
    {
      ok	= 0,	// successful
      not_found = -1,   // lookup key invalid
      bad_value	= -2	// illegal parameter 
    };

    // PART 3.1: instantiation
  protected:
    component() {}
    virtual ~component() {}  

  public:
    // PART 3.2: attributes (SUPERVISORY)

    // List the names of all your attributes.
    virtual std::vector<std::string>
    attribute_names()
      throw() = 0;

    // List the names of your attributes in a given category.
    virtual std::vector<std::string>
    attribute_names(const std::string& category)
      throw() = 0;
      
    // Get the value of your named attribute. 
    // Return an empty string on failure.
    virtual std::string
    attribute_value(const std::string& name) 
      throw() = 0;

    // Set your named attribute to a given value.
    // Returns component::ok only if sucessful.
    virtual status
    set_attribute_value(const std::string& name, const std::string& value)
      throw() = 0;


    // PART 3.3: pins (SUPERVISORY)
  public:
    // List all your pin names.  Include all input pins (for use with
    // find_pin) and output pins (for use with connect_pin etc.).
    virtual std::vector<std::string>
    pin_names()
      throw() = 0;

    // Find input pin with given name.  
    // Return a pointer to your pin or 0 if the pin is not found.
    virtual pin*
    find_pin(const std::string& name) 
      throw() = 0;

    // Add new connection between your named output pin to given input pin.
    virtual status
    connect_pin(const std::string& name, pin* pin)
      throw() = 0;

    // Remove connection between your named output pin from given input pin.
    virtual status
    disconnect_pin(const std::string& name, pin* pin)
      throw()= 0;

    // List all pins connected to your named output pin.  
    virtual std::vector<pin*>
    connected_pins(const std::string& name)
      throw() = 0;


    // PART 3.4: buses & accessors (SUPERVISORY)
  public:
    // List the names of your buses.
    virtual std::vector<std::string>
    bus_names()
      throw() = 0;

    // Find a bus of the given name.  
    // Return a pointer to your bus, or 0 if the bus is not found.
    virtual bus*
    find_bus(const std::string& name)
      throw() = 0;

    // List the names of your bus accessors.
    virtual std::vector<std::string> 
    accessor_names()
      throw() = 0;
    
    // Connect your named accessor to a given bus.  
    virtual status
    connect_accessor(const std::string& name, bus* bus)
      throw() = 0;

    // Disconnect your named accessor from a given bus.
    virtual status
    disconnect_accessor(const std::string& name, bus* bus)
      throw() = 0;

    // Return the bus connected to your named accessor.
    virtual bus*
    connected_bus(const std::string& name)
      throw() = 0;


    // PART 3.5: component enumeration (SUPERVISORY)
  public:
    // List the names of your component relationship lists.
    virtual std::vector<std::string> 
    relationship_names()
      throw() = 0;

    // Add given component to your named relationship list.
    virtual status
    relate (const std::string& name, component* comp) 
      throw () = 0;

    // Remove given component from your named relationship list.
    virtual status
    unrelate (const std::string& name, component* comp) 
      throw () = 0;

    // List components in your named relationship list.  Return
    // empty list if relationship is not found.
    virtual std::vector<component*>
    related_components (const std::string& name)
      throw () = 0;
  };
}

#endif // SIDCOMP_H
@


1.6
log
@2005-05-10  Dave Brolley  <brolley@@redhat.com>

        * sidcpuutil.h (read_insn_memory): Only call
        record_insn_memory_read_latency if --trace-counter or
        --final-insn-count are specified.
        (write_insn_memory): Ditto.
        (read_data_memory): Ditto.
        (write_data_memory): Ditto.

2005-05-10  Dave Brolley  <brolley@@redhat.com>

        * sidcpuutil.h (record_insn_memory_read_latency): New virtual method.
        (record_insn_memory_write_latency): New virtual method.
        (record_data_memory_read_latency): New virtual method.
        (record_data_memory_write_latency): New virtual method.
        (read_insn_memory): Call record_insn_memory_read_latency.
        (write_insn_memory): Call record_insn_memory_write_latency.
        (read_data_memory): Call record_data_memory_read_latency.
        (write_data_memory): Call record_data_memory_write_latency.
        * sidattrutil.h (fixed_attribute_map_with_logging_component::check_level):
        now protected and returns bool.
        * sidblockingutil.h: Rework ulog levels.
        * sidbusutil.h (bus_arbitrator): Rework ulog levels. Return the result
        of busy_status instead of bus::busy. New methods: busy_status and
        access_latency.
        (perform_read): Only call set_route_busy is status is bus::ok.
        (perform_write): Only call set_route_busy is status is bus::ok.

2005-05-10  Dave Brolley  <brolley@@redhat.com>

        * sidbusutil.h (bus_arbitrator::input_interface): New class.
        (bus_arbitrator::reschedule): Reschedule after the given number of
        cycles.
        (bus_arbitrator::arbitrate_read): New method.
        (bus_arbitrator::arbitrate_write): New method.
        (bus_arbitrator::prioritize_request): New virtual method.
        (bus_arbitrator::perform_read): Propogate the lock from the upstream
        interface to the downstream interface.
        (bus_arbitrator::perform_write): Ditto.
        (bus_arbitrator::lock_downstream): New virtual method.

2005-05-10  Dave Brolley  <brolley@@redhat.com>

        * sidblockingutil.h (blocking_component): Reimplement using mutexes
        for synchronization.

2005-05-10  Dave Brolley  <brolley@@redhat.com>

        * sidcpuutil.h (basic_cpu): Inherit virtually from all base classes.
        (basic_cpu::step_pin_handler): Now virtual.
        (basic_cpu::{read,write}_{insn,data}_memory): No longer const. Call
        handle_{insn,data}_memory_{read,write}_error for bus errors.
        (basic_big_endian_cpu::{read,write_{insn,data}_memory*): No longer
        const.
        (basic_little_endian_cpu): Ditto.
        * sidcomp.h (bus::status_t): Add 'busy'.
        * sidattrutil.h: Remove unused code.
        * sidblockingutil.h: New header.
@
text
@d4 1
a4 1
// Copyright (C) 1999, 2000, 2001, 2004 Red Hat.
d26 1
a26 1
  const unsigned API_MINOR_VERSION = 2;
d132 1
a132 1
    virtual ~bus() throw() {}  
d153 1
a153 1
    virtual ~pin() throw() {}
d178 1
a178 1
    virtual ~component() throw() {}  
@


1.5
log
@2001-06-25  Ben Elliston  <bje@@redhat.com>

	* sidcomp.h (bus::status code): Change type to host_int_1.
	(bus::status constructors): Cast status_t to host_int_1.
	(API_MINOR_VERSION): Bump it.
@
text
@d4 1
a4 1
// Copyright (C) 1999, 2000, 2001 Red Hat.
d48 1
@


1.4
log
@2001-06-22  Frank Ch. Eigler  <fche@@redhat.com>

	* sidcomp.h (API_MAJOR_VERSION, API_MINOR_VERSION): Relabel
	previous change impact to 3/1 from 4/0.
@
text
@d26 1
a26 1
  const unsigned API_MINOR_VERSION = 1;
d55 1
a55 1
	:code (c), latency (0) {}
d57 1
a57 1
	   :code (c), latency (lat) {}
d60 1
a60 1
      enum status_t code;
@


1.3
log
@2001-06-22  Ben Elliston  <bje@@redhat.com>

	* sidcomp.h (API_MAJOR_VERSION): Bump to 4.
	(bus::status_t): Remove "delayed" enumerator.
@
text
@d25 2
a26 2
  const unsigned API_MAJOR_VERSION = 4;
  const unsigned API_MINOR_VERSION = 0;
@


1.2
log
@2001-06-21  Ben Elliston  <bje@@redhat.com>

	* sidcomp.h (API_MAJOR_VERSION): Bump to 3.
	(API_MINOR_VERSION): Zero.
	(bus::status_t): New name for enum status.
	(bus::status): New struct.
@
text
@d25 1
a25 1
  const unsigned API_MAJOR_VERSION = 3;
a47 1
      delayed      = 0x10, // data not yet available - try again after yielding
@


1.1
log
@* public snapshot of sid simulator
@
text
@d4 1
a4 1
// Copyright (C) 1999, 2000 Red Hat.
d25 2
a26 2
  const unsigned API_MAJOR_VERSION = 2;
  const unsigned API_MINOR_VERSION = 2;
d42 1
a42 1
    enum status
d50 15
a64 1
    
@

