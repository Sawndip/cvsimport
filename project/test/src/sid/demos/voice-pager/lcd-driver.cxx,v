head	1.2;
access;
symbols
	sid-snapshot-20180601:1.2
	sid-snapshot-20180501:1.2
	sid-snapshot-20180401:1.2
	sid-snapshot-20180301:1.2
	sid-snapshot-20180201:1.2
	sid-snapshot-20180101:1.2
	sid-snapshot-20171201:1.2
	sid-snapshot-20171101:1.2
	sid-snapshot-20171001:1.2
	sid-snapshot-20170901:1.2
	sid-snapshot-20170801:1.2
	sid-snapshot-20170701:1.2
	sid-snapshot-20170601:1.2
	sid-snapshot-20170501:1.2
	sid-snapshot-20170401:1.2
	sid-snapshot-20170301:1.2
	sid-snapshot-20170201:1.2
	sid-snapshot-20170101:1.2
	sid-snapshot-20161201:1.2
	sid-snapshot-20161101:1.2
	sid-snapshot-20160901:1.2
	sid-snapshot-20160801:1.2
	sid-snapshot-20160701:1.2
	sid-snapshot-20160601:1.2
	sid-snapshot-20160501:1.2
	sid-snapshot-20160401:1.2
	sid-snapshot-20160301:1.2
	sid-snapshot-20160201:1.2
	sid-snapshot-20160101:1.2
	sid-snapshot-20151201:1.2
	sid-snapshot-20151101:1.2
	sid-snapshot-20151001:1.2
	sid-snapshot-20150901:1.2
	sid-snapshot-20150801:1.2
	sid-snapshot-20150701:1.2
	sid-snapshot-20150601:1.2
	sid-snapshot-20150501:1.2
	sid-snapshot-20150401:1.2
	sid-snapshot-20150301:1.2
	sid-snapshot-20150201:1.2
	sid-snapshot-20150101:1.2
	sid-snapshot-20141201:1.2
	sid-snapshot-20141101:1.2
	sid-snapshot-20141001:1.2
	sid-snapshot-20140901:1.2
	sid-snapshot-20140801:1.2
	sid-snapshot-20140701:1.2
	sid-snapshot-20140601:1.2
	sid-snapshot-20140501:1.2
	sid-snapshot-20140401:1.2
	sid-snapshot-20140301:1.2
	sid-snapshot-20140201:1.2
	sid-snapshot-20140101:1.2
	sid-snapshot-20131201:1.2
	sid-snapshot-20131101:1.2
	sid-snapshot-20131001:1.2
	sid-snapshot-20130901:1.2
	sid-snapshot-20130801:1.2
	sid-snapshot-20130701:1.2
	sid-snapshot-20130601:1.2
	sid-snapshot-20130501:1.2
	sid-snapshot-20130401:1.2
	sid-snapshot-20130301:1.2
	sid-snapshot-20130201:1.2
	sid-snapshot-20130101:1.2
	sid-snapshot-20121201:1.2
	sid-snapshot-20121101:1.2
	sid-snapshot-20121001:1.2
	sid-snapshot-20120901:1.2
	sid-snapshot-20120801:1.2
	sid-snapshot-20120701:1.2
	sid-snapshot-20120601:1.2
	sid-snapshot-20120501:1.2
	sid-snapshot-20120401:1.2
	sid-snapshot-20120301:1.2
	sid-snapshot-20120201:1.2
	sid-snapshot-20120101:1.2
	sid-snapshot-20111201:1.2
	sid-snapshot-20111101:1.2
	sid-snapshot-20111001:1.2
	sid-snapshot-20110901:1.2
	sid-snapshot-20110801:1.2
	sid-snapshot-20110701:1.2
	sid-snapshot-20110601:1.2
	sid-snapshot-20110501:1.2
	sid-snapshot-20110401:1.2
	sid-snapshot-20110301:1.2
	sid-snapshot-20110201:1.2
	sid-snapshot-20110101:1.2
	sid-snapshot-20101201:1.2
	sid-snapshot-20101101:1.2
	sid-snapshot-20101001:1.2
	sid-snapshot-20100901:1.2
	sid-snapshot-20100801:1.2
	sid-snapshot-20100701:1.2
	sid-snapshot-20100601:1.2
	sid-snapshot-20100501:1.2
	sid-snapshot-20100401:1.2
	sid-snapshot-20100301:1.2
	sid-snapshot-20100201:1.2
	sid-snapshot-20100101:1.2
	sid-snapshot-20091201:1.2
	sid-snapshot-20091101:1.2
	sid-snapshot-20091001:1.2
	sid-snapshot-20090901:1.2
	sid-snapshot-20090801:1.2
	sid-snapshot-20090701:1.2
	sid-snapshot-20090601:1.2
	sid-snapshot-20090501:1.2
	sid-snapshot-20090401:1.2
	sid-snapshot-20090301:1.2
	sid-snapshot-20090201:1.2
	sid-snapshot-20090101:1.2
	sid-snapshot-20081201:1.2
	sid-snapshot-20081101:1.2
	sid-snapshot-20081001:1.2
	sid-snapshot-20080901:1.2
	sid-snapshot-20080801:1.2
	sid-snapshot-20080701:1.2
	sid-snapshot-20080601:1.2
	sid-snapshot-20080501:1.2
	sid-snapshot-20080403:1.2
	sid-snapshot-20080401:1.2
	sid-snapshot-20080301:1.2
	sid-snapshot-20080201:1.2
	sid-snapshot-20080101:1.2
	sid-snapshot-20071201:1.2
	sid-snapshot-20071101:1.2
	sid-snapshot-20071001:1.2
	sid-20020905-branchpoint:1.2
	sid-20020905-branch:1.2.0.2
	cygnus_cvs_20020108_pre:1.1;
locks; strict;
comment	@// @;


1.2
date	2002.02.07.03.34.08;	author bje;	state Exp;
branches;
next	1.1;

1.1
date	2000.12.07.19.31.08;	author fche;	state Exp;
branches;
next	;


desc
@@


1.2
log
@* gcc 3.1 build fixes.
* reported by Klaus Pedersen <klaus.kruse.pedersen@@mail.tele.dk>.

2002-02-07  Ben Elliston  <bje@@redhat.com>

	* VoicePager.cxx: Don't include <stdio.h>. Qualify std objects.
	* VoicePager.h: Include <iostream>. Use std::map, std::vector.
	* adac-driver.h: Use std::string.
	* lcd-driver.cxx: Qualify unqualified std objects.
	* adac-driver.cxx (adac_driver::begin_read): Cast -1 to unsigned.
	(adac_driver::begin_write): Likewise.
	* page-lcd.cxx: Include <iostream>. Use std::{cerr,cout,endl}.
	* page-lcd.h: Use std::string.
@
text
@// lcd-driver.cxx - description.  -*- C++ -*-

// Copyright (C) 1999, 2000, 2002 Red Hat.
// This file is part of SID and is licensed under the GPL.
// See the file COPYING.SID for conditions for redistribution.

#include "lcd-driver.h"
#include "mem-map.h"
#include <iostream.h>

lcd_driver::lcd_driver()
  :DATA_REG (LCD_BASE + 0), CMD_REG (LCD_BASE + 1), STATUS_REG (LCD_BASE + 1)
 { }

bool
lcd_driver::check_status( unsigned char what ) 
 {
  unsigned char byte;

  byte = *STATUS_REG; 

  if ((byte & what) != what)
    {
      std::cerr << "check_status: bad status - got "
		<< std::hex << (unsigned) byte << " != " << (unsigned) what
		<< std::dec << std::endl;
      return false;
    }
  return true;
 }

bool 
lcd_driver::send_cmd( unsigned char cmd ) 
 {
  if( !check_status( STA1 | STA0 ) )
    return false;

  *CMD_REG = cmd;

  return true;
 }
  
bool
lcd_driver::reset_auto( unsigned char mode ) 
 {
  if ( !check_status( mode ) )
    return false;

  *CMD_REG = (unsigned char) CLR_AUTO_RW;
    
  return true;
 }
  
bool 
lcd_driver::send_data( unsigned char data ) 
 {
  if ( !check_status( STA1 | STA0 ) )
    return false;

  *DATA_REG = data;
  return true;
 }
  
bool 
lcd_driver::get_data( unsigned char& data ) 
 {
   if ( !check_status( STA1 | STA0 ) )
     return false;

   data = *DATA_REG;
   return true;
 }

bool 
lcd_driver::write_mem( unsigned char cmd, unsigned char val ) 
 {
   if ( !send_data( val ) )
     return false;

   if ( !send_cmd( cmd ) )
     return false;

   return true;
 }

bool 
lcd_driver::read_mem( unsigned char cmd, unsigned char& val ) 
 {
   if ( !send_cmd( cmd ) )
     return false;

   return ( get_data( val ) );
 }

bool 
lcd_driver::auto_write( unsigned char data ) 
 {
   if ( !check_status( STA3 ) )
     return false;

   *DATA_REG = data;
   return true;
 }

bool 
lcd_driver::auto_read( unsigned char& data ) 
 {
   if ( !check_status( STA2 ) )
     return false;

   data = *DATA_REG;
   return true;
 }

bool
lcd_driver::set_word_reg( unsigned char cmd, unsigned char lo, unsigned char hi ) 
 {
   if ( !send_data( lo ) )
     return false;

   if ( !send_data( hi ) )
     return false;

   if ( !send_cmd( cmd ) )
     return false;

   return true;
 }

void
lcd_driver::mem_set( unsigned char val, unsigned addr, int len ) 
 {
   set_word_reg( SET_ADP, addr & 0xff, addr >> 8 );
   send_cmd( SET_AWRITE );
 
   for ( int i=0; i<len; i++ )
      auto_write( val );

   reset_auto( 8 );
 }

/*
void initialize_lcd() {

  //intialize the display
  set_word_reg( lcd_driver::SET_TXT_HOME, 0x00, 0x00 );
  set_word_reg( SET_TXT_AREA, NCOLS, 0 );
  set_word_reg( SET_GRX_HOME, 0x00, 0x02 );
  set_word_reg( SET_GRX_AREA, NCOLS, 0 );

  // mode set: OR mode, internal cgen
  send_cmd( 0x80 );			

  // display: text on, graphics off, no cursor
  send_cmd( 0x94 );

  mem_set( 0, 0, NCOLS*NROWS );		// clear display

  set_word_reg( SET_OFFSET, 2, 0 );
  set_word_reg( SET_ADP, 0, 0x14 );	// cgen area is 0x1400

  send_cmd( SET_AWRITE );

  auto_write( 0x8 );			// initialize the arrow
  auto_write( 0xc );
  auto_write( 0xe );
  auto_write( 0xf );
  auto_write( 0xe );
  auto_write( 0xc );
  auto_write( 0x8 );
  auto_write( 0x0 );

  reset_auto( 8 );
}
*/

@


1.1
log
@* public snapshot of sid simulator
@
text
@d3 1
a3 1
// Copyright (C) 1999, 2000 Red Hat.
d22 7
a28 5
  if( (byte & what) != what ) {
    cerr << "check_status: bad status - got " <<
      hex << (unsigned) byte << " != " << (unsigned) what << dec << endl;
    return false;
  }
@

