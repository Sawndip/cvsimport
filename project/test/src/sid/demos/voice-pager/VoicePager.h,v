head	1.2;
access;
symbols
	sid-snapshot-20180601:1.2
	sid-snapshot-20180501:1.2
	sid-snapshot-20180401:1.2
	sid-snapshot-20180301:1.2
	sid-snapshot-20180201:1.2
	sid-snapshot-20180101:1.2
	sid-snapshot-20171201:1.2
	sid-snapshot-20171101:1.2
	sid-snapshot-20171001:1.2
	sid-snapshot-20170901:1.2
	sid-snapshot-20170801:1.2
	sid-snapshot-20170701:1.2
	sid-snapshot-20170601:1.2
	sid-snapshot-20170501:1.2
	sid-snapshot-20170401:1.2
	sid-snapshot-20170301:1.2
	sid-snapshot-20170201:1.2
	sid-snapshot-20170101:1.2
	sid-snapshot-20161201:1.2
	sid-snapshot-20161101:1.2
	sid-snapshot-20160901:1.2
	sid-snapshot-20160801:1.2
	sid-snapshot-20160701:1.2
	sid-snapshot-20160601:1.2
	sid-snapshot-20160501:1.2
	sid-snapshot-20160401:1.2
	sid-snapshot-20160301:1.2
	sid-snapshot-20160201:1.2
	sid-snapshot-20160101:1.2
	sid-snapshot-20151201:1.2
	sid-snapshot-20151101:1.2
	sid-snapshot-20151001:1.2
	sid-snapshot-20150901:1.2
	sid-snapshot-20150801:1.2
	sid-snapshot-20150701:1.2
	sid-snapshot-20150601:1.2
	sid-snapshot-20150501:1.2
	sid-snapshot-20150401:1.2
	sid-snapshot-20150301:1.2
	sid-snapshot-20150201:1.2
	sid-snapshot-20150101:1.2
	sid-snapshot-20141201:1.2
	sid-snapshot-20141101:1.2
	sid-snapshot-20141001:1.2
	sid-snapshot-20140901:1.2
	sid-snapshot-20140801:1.2
	sid-snapshot-20140701:1.2
	sid-snapshot-20140601:1.2
	sid-snapshot-20140501:1.2
	sid-snapshot-20140401:1.2
	sid-snapshot-20140301:1.2
	sid-snapshot-20140201:1.2
	sid-snapshot-20140101:1.2
	sid-snapshot-20131201:1.2
	sid-snapshot-20131101:1.2
	sid-snapshot-20131001:1.2
	sid-snapshot-20130901:1.2
	sid-snapshot-20130801:1.2
	sid-snapshot-20130701:1.2
	sid-snapshot-20130601:1.2
	sid-snapshot-20130501:1.2
	sid-snapshot-20130401:1.2
	sid-snapshot-20130301:1.2
	sid-snapshot-20130201:1.2
	sid-snapshot-20130101:1.2
	sid-snapshot-20121201:1.2
	sid-snapshot-20121101:1.2
	sid-snapshot-20121001:1.2
	sid-snapshot-20120901:1.2
	sid-snapshot-20120801:1.2
	sid-snapshot-20120701:1.2
	sid-snapshot-20120601:1.2
	sid-snapshot-20120501:1.2
	sid-snapshot-20120401:1.2
	sid-snapshot-20120301:1.2
	sid-snapshot-20120201:1.2
	sid-snapshot-20120101:1.2
	sid-snapshot-20111201:1.2
	sid-snapshot-20111101:1.2
	sid-snapshot-20111001:1.2
	sid-snapshot-20110901:1.2
	sid-snapshot-20110801:1.2
	sid-snapshot-20110701:1.2
	sid-snapshot-20110601:1.2
	sid-snapshot-20110501:1.2
	sid-snapshot-20110401:1.2
	sid-snapshot-20110301:1.2
	sid-snapshot-20110201:1.2
	sid-snapshot-20110101:1.2
	sid-snapshot-20101201:1.2
	sid-snapshot-20101101:1.2
	sid-snapshot-20101001:1.2
	sid-snapshot-20100901:1.2
	sid-snapshot-20100801:1.2
	sid-snapshot-20100701:1.2
	sid-snapshot-20100601:1.2
	sid-snapshot-20100501:1.2
	sid-snapshot-20100401:1.2
	sid-snapshot-20100301:1.2
	sid-snapshot-20100201:1.2
	sid-snapshot-20100101:1.2
	sid-snapshot-20091201:1.2
	sid-snapshot-20091101:1.2
	sid-snapshot-20091001:1.2
	sid-snapshot-20090901:1.2
	sid-snapshot-20090801:1.2
	sid-snapshot-20090701:1.2
	sid-snapshot-20090601:1.2
	sid-snapshot-20090501:1.2
	sid-snapshot-20090401:1.2
	sid-snapshot-20090301:1.2
	sid-snapshot-20090201:1.2
	sid-snapshot-20090101:1.2
	sid-snapshot-20081201:1.2
	sid-snapshot-20081101:1.2
	sid-snapshot-20081001:1.2
	sid-snapshot-20080901:1.2
	sid-snapshot-20080801:1.2
	sid-snapshot-20080701:1.2
	sid-snapshot-20080601:1.2
	sid-snapshot-20080501:1.2
	sid-snapshot-20080403:1.2
	sid-snapshot-20080401:1.2
	sid-snapshot-20080301:1.2
	sid-snapshot-20080201:1.2
	sid-snapshot-20080101:1.2
	sid-snapshot-20071201:1.2
	sid-snapshot-20071101:1.2
	sid-snapshot-20071001:1.2
	sid-20020905-branchpoint:1.2
	sid-20020905-branch:1.2.0.2
	cygnus_cvs_20020108_pre:1.1;
locks; strict;
comment	@ * @;


1.2
date	2002.02.07.03.34.08;	author bje;	state Exp;
branches;
next	1.1;

1.1
date	2000.12.07.19.31.08;	author fche;	state Exp;
branches;
next	;


desc
@@


1.2
log
@* gcc 3.1 build fixes.
* reported by Klaus Pedersen <klaus.kruse.pedersen@@mail.tele.dk>.

2002-02-07  Ben Elliston  <bje@@redhat.com>

	* VoicePager.cxx: Don't include <stdio.h>. Qualify std objects.
	* VoicePager.h: Include <iostream>. Use std::map, std::vector.
	* adac-driver.h: Use std::string.
	* lcd-driver.cxx: Qualify unqualified std objects.
	* adac-driver.cxx (adac_driver::begin_read): Cast -1 to unsigned.
	(adac_driver::begin_write): Likewise.
	* page-lcd.cxx: Include <iostream>. Use std::{cerr,cout,endl}.
	* page-lcd.h: Use std::string.
@
text
@// VoicePager.h - description.  -*- C++ -*-

// Copyright (C) 1999, 2000, 2002 Red Hat.
// This file is part of SID and is licensed under the GPL.
// See the file COPYING.SID for conditions for redistribution.

#ifndef VOICE_PAGER_H
#define VOICE_PAGER_H

#include <iostream>
#include <vector>
#include <string>
#include <map>
#include <time.h>

#include "page-lcd.h"
#include "rtc-driver.h"
#include "parport-driver.h"
#include "adac-driver.h"

using std::map;
using std::vector;

class VoicePager
{
 private:
  parport_driver pport_drobj;   // Object of type parallel port driver
  rtc_driver rtc_drobj;		// object of type rtc driver.

  vector<unsigned char> id_arr; // vector of unique identity numbers
  vector<string> rnd_telnum;	// telephone Numbers

  int record_process;		// bool variable whether recording in process?
  int play_process;		// any message is currently being played?
  unsigned char last_cmd;	// Stores last command.
  unsigned char inuse_idnum;    // Current id which is being played /record

  unsigned char rec_seccounter; // sec at which recording will be disconnected.
  unsigned char rec_curtime; // stores last second value read from RTC


 protected:
  PagerUI *lcdpager_ptr;        // Pointer to lcd pager object
  lcd_driver lcd_drobj;		// object of type lcd driver

 public:
  VoicePager();
  virtual ~VoicePager();

  void initialize_components(); // Initializes RTC, LCD, Parallel port
  void poll_input(); // Polls parallel port for input data

 protected:
  void show_lcdmsg (string lcd_msg, unsigned lcd_rownum);
  void clear_lcddisplay ();

 private:
  enum {
    CMD_UP   = 1,  // UP key code
    CMD_DN   = 2,  // DOWN key code
    CMD_REC  = 4,  // REC key  code
    CMD_PLAY = 8,  // PLAY key code
    CMD_DEL  = 16, // DEL key code
    CMD_DONE = 32, // DONE key code
    CMD_STOP = 64, // STOP key code
    CMD_CLR  = 0   // No key is depressed
  };

  enum {
    TIME_LIMIT = 8, // Our hard limit on max record time
    MAX_SEC = 59  // Max seconds value from RTC
  };

 private:
  void init_idvector(); // Initializes the unique id vector
  void init_rndtelnum();  // Initializes vector of random tel nums
  void initialize_rtc(time_t init_time); // Initializes RTc component
  void initialize_lcd(); // Initializes LCD component

  void scroll_up();    // Up key is pressed
  void scroll_down();  // Down key is pressed
  void record_newmsg(); // Record new message
  void play_storedmsg();  // Sends data to sound object for play
  bool play_done(); // Checking to see if non blocking play is done
  void delete_storedmsg(); // To delet stored message
  void delete_msg(unsigned char del_msgid); // Helper function to delete msg
  void stop_recmsg(); // Stop play/record sound

  void set_hardrectime(); // Sets hard time limit for current recording
  void clear_hardrectime();// Clears hard time as recording is over.
  bool increase_reccounter(unsigned char incr_secs);// increases record time limit counter
  bool crossed_reclimit(); // Did we cross the record limit ?
  
  string get_rndtelnum(); // Returns Random Telephone number
  string get_rtctime(); // Returns Current RTC value 

  void read_rtcseconds(unsigned char& sec_val); // Helper function 
  void display_msg (string temp_msg); // Helper function to display msgs.

 private:
   map<unsigned char, string> rec_msgs;  // Recorded messages 
   adac_driver adac_drobj; // Object of type adac driver.
  
 protected:
   void send_dacdata (unsigned char play_id);
   void remove_storedmsg (unsigned char del_id);
   void get_adcdata (unsigned char rec_id);
   void stop_playmsg (unsigned char play_id);
};

#endif // VOICE_PAGER_H
@


1.1
log
@* public snapshot of sid simulator
@
text
@d3 1
a3 1
// Copyright (C) 1999, 2000 Red Hat.
d10 1
d21 2
a22 1
class VoicePager {
d24 2
@

