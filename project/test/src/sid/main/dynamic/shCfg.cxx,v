head	1.2;
access;
symbols
	sid-snapshot-20180601:1.2
	sid-snapshot-20180501:1.2
	sid-snapshot-20180401:1.2
	sid-snapshot-20180301:1.2
	sid-snapshot-20180201:1.2
	sid-snapshot-20180101:1.2
	sid-snapshot-20171201:1.2
	sid-snapshot-20171101:1.2
	sid-snapshot-20171001:1.2
	sid-snapshot-20170901:1.2
	sid-snapshot-20170801:1.2
	sid-snapshot-20170701:1.2
	sid-snapshot-20170601:1.2
	sid-snapshot-20170501:1.2
	sid-snapshot-20170401:1.2
	sid-snapshot-20170301:1.2
	sid-snapshot-20170201:1.2
	sid-snapshot-20170101:1.2
	sid-snapshot-20161201:1.2
	sid-snapshot-20161101:1.2
	sid-snapshot-20160901:1.2
	sid-snapshot-20160801:1.2
	sid-snapshot-20160701:1.2
	sid-snapshot-20160601:1.2
	sid-snapshot-20160501:1.2
	sid-snapshot-20160401:1.2
	sid-snapshot-20160301:1.2
	sid-snapshot-20160201:1.2
	sid-snapshot-20160101:1.2
	sid-snapshot-20151201:1.2
	sid-snapshot-20151101:1.2
	sid-snapshot-20151001:1.2
	sid-snapshot-20150901:1.2
	sid-snapshot-20150801:1.2
	sid-snapshot-20150701:1.2
	sid-snapshot-20150601:1.2
	sid-snapshot-20150501:1.2
	sid-snapshot-20150401:1.2
	sid-snapshot-20150301:1.2
	sid-snapshot-20150201:1.2
	sid-snapshot-20150101:1.2
	sid-snapshot-20141201:1.2
	sid-snapshot-20141101:1.2
	sid-snapshot-20141001:1.2
	sid-snapshot-20140901:1.2
	sid-snapshot-20140801:1.2
	sid-snapshot-20140701:1.2
	sid-snapshot-20140601:1.2
	sid-snapshot-20140501:1.2
	sid-snapshot-20140401:1.2
	sid-snapshot-20140301:1.2
	sid-snapshot-20140201:1.2
	sid-snapshot-20140101:1.2
	sid-snapshot-20131201:1.2
	sid-snapshot-20131101:1.2
	sid-snapshot-20131001:1.2
	sid-snapshot-20130901:1.2
	sid-snapshot-20130801:1.2
	sid-snapshot-20130701:1.2
	sid-snapshot-20130601:1.2
	sid-snapshot-20130501:1.2
	sid-snapshot-20130401:1.2
	sid-snapshot-20130301:1.2
	sid-snapshot-20130201:1.2
	sid-snapshot-20130101:1.2
	sid-snapshot-20121201:1.2
	sid-snapshot-20121101:1.2
	sid-snapshot-20121001:1.2
	sid-snapshot-20120901:1.2
	sid-snapshot-20120801:1.2
	sid-snapshot-20120701:1.2
	sid-snapshot-20120601:1.2
	sid-snapshot-20120501:1.2
	sid-snapshot-20120401:1.2
	sid-snapshot-20120301:1.2
	sid-snapshot-20120201:1.2
	sid-snapshot-20120101:1.2
	sid-snapshot-20111201:1.2
	sid-snapshot-20111101:1.2
	sid-snapshot-20111001:1.2
	sid-snapshot-20110901:1.2
	sid-snapshot-20110801:1.2
	sid-snapshot-20110701:1.2
	sid-snapshot-20110601:1.2
	sid-snapshot-20110501:1.2
	sid-snapshot-20110401:1.2
	sid-snapshot-20110301:1.2
	sid-snapshot-20110201:1.2
	sid-snapshot-20110101:1.2
	sid-snapshot-20101201:1.2
	sid-snapshot-20101101:1.2
	sid-snapshot-20101001:1.2
	sid-snapshot-20100901:1.2
	sid-snapshot-20100801:1.2
	sid-snapshot-20100701:1.2
	sid-snapshot-20100601:1.2
	sid-snapshot-20100501:1.2
	sid-snapshot-20100401:1.2
	sid-snapshot-20100301:1.2
	sid-snapshot-20100201:1.2
	sid-snapshot-20100101:1.2
	sid-snapshot-20091201:1.2
	sid-snapshot-20091101:1.2
	sid-snapshot-20091001:1.2
	sid-snapshot-20090901:1.2
	sid-snapshot-20090801:1.2
	sid-snapshot-20090701:1.2
	sid-snapshot-20090601:1.2
	sid-snapshot-20090501:1.2
	sid-snapshot-20090401:1.2
	sid-snapshot-20090301:1.2
	sid-snapshot-20090201:1.2
	sid-snapshot-20090101:1.2
	sid-snapshot-20081201:1.2
	sid-snapshot-20081101:1.2
	sid-snapshot-20081001:1.2
	sid-snapshot-20080901:1.2
	sid-snapshot-20080801:1.2
	sid-snapshot-20080701:1.2
	sid-snapshot-20080601:1.2
	sid-snapshot-20080501:1.2
	sid-snapshot-20080403:1.2
	sid-snapshot-20080401:1.2
	sid-snapshot-20080301:1.2
	sid-snapshot-20080201:1.2
	sid-snapshot-20080101:1.2
	sid-snapshot-20071201:1.2
	sid-snapshot-20071101:1.2
	sid-snapshot-20071001:1.2;
locks; strict;
comment	@// @;


1.2
date	2006.11.30.18.48.30;	author brolley;	state Exp;
branches;
next	1.1;

1.1
date	2006.10.18.18.46.17;	author brolley;	state Exp;
branches;
next	;


desc
@@


1.2
log
@2006-11-30  Dave Brolley  <brolley@@redhat.com>

        * Makefile.am (TARGETCFGS): Revert previous changes. Add shCfg.cxx
        unconditionally.
        * Makefile.in: Regenerated.
        * aclocal.m4: Regenerated.
        * configure: Regenerated.
        * shCfg.cxx: Protect the entire file with preprocessor conditional
        compilation for sh or sh64.
@
text
@// shCfg.cxx - configuration for Sh.  -*- C++ -*-

// Copyright (C) 2006 Red Hat.
// This file is part of SID and is licensed under the GPL.
// See the file COPYING.SID for conditions for redistribution.

#if defined (SIDTARGET_SH) || defined (SIDTARGET_SH64)

#include "shCfg.h"

ShBoardCfg::ShBoardCfg (const string &name,
			const string &type,
			SessionCfg *sess,
			const string &syscall_numbering) :
  ComponentCfg (name),
  AggregateCfg (name),
  BoardCfg (name, type, sess, false, true, false),
  is_64bit_p (type == "sh5-64media")
{
  // we build our own gloss here, since we want it to see the data cache and the base class
  // has no idea it exists.
  assert (cpu);
  assert (sess);
  gloss = new GlossCfg ("gloss", cpu, sess);  
  assert (gloss);
  set (gloss, "syscall-numbering-scheme", syscall_numbering);
  add_child (gloss);

  // Insn cache -- 8k, 32 byte lines
  icache = new CacheCfg ("icache", 8, 32);
  set (icache, "data-width", "8");
  sess->init_seq->add_output (1, icache, "invalidate-all");
  add_child (icache);

  // Operand cache -- 16k, 32 byte lines
  ocache = new CacheCfg ("ocache", 16, 32);
  set (ocache, "data-width", "8");
  assert (cache_flush_net);
  cache_flush_net->add_output (0, ocache, "flush-all");
  sess->init_seq->add_output (1, ocache, "invalidate-all");
  add_child (ocache);

  // Main memory -- 0x1000000 bytes for now
  main_memory = new MemCfg ("main-mem", 0x1000000, 1, 0);
  assert (main_memory);
  add_child (main_memory);
}

void
ShBoardCfg::write_config (Writer &w)
{
  assert (cpu);

  // Connect the memory heirarchy.
  cpu->set_imem (icache, "upstream");
  conn_bus (icache, "downstream", main_mapper, "access-port");

  cpu->set_dmem (ocache, "upstream");
  conn_bus (ocache, "downstream", main_mapper, "access-port");
  conn_pin (cpu, "cache-prefetch", ocache, "prefetch");
  conn_bus (gloss, "target-memory", ocache, "upstream");

  cpu->set_disasm_mem (main_mapper, "access-port");
  main_mapper->map (Mapping().low(0x000000).high(0xffffff).slave(main_memory).bus("read-write-port"));

  // Need 64 bit gprof support?
  if (gprof && is_64bit_p)
    gprof->set (gprof, "pc-size", "8");

  // Write the config as usual.
  BoardCfg::write_config (w);
}

// Default sh board.
BoardCfg * 
mk_sh (const string name, SessionCfg *sess)
{
#if defined (SIDTARGET_SH)
  return mk_sh2 (name, sess);
#else
  return mk_sh5_64media (name, sess);
#endif
}

// sh2 board
BoardCfg * 
mk_sh2 (const string name, SessionCfg *sess)
{
  ShBoardCfg *board = new ShBoardCfg (name, "sh2", sess, "sh-compact");
  return board;
}

// sh2e board
BoardCfg * 
mk_sh2e (const string name, SessionCfg *sess)
{
  ShBoardCfg *board = new ShBoardCfg (name, "sh2e", sess, "sh-compact");
  return board;
}

// sh2a board with no fpu
BoardCfg * 
mk_sh2a_nofpu (const string name, SessionCfg *sess)
{
  ShBoardCfg *board = new ShBoardCfg (name, "sh2a-nofpu", sess, "sh-compact");
  return board;
}

// sh2a board with single precision fpu
BoardCfg * 
mk_sh2a_fpu_single (const string name, SessionCfg *sess)
{
  ShBoardCfg *board = new ShBoardCfg (name, "sh2a-fpu-single", sess, "sh-compact");
  return board;
}

// sh2a board with full precision fpu
BoardCfg * 
mk_sh2a_fpu (const string name, SessionCfg *sess)
{
  ShBoardCfg *board = new ShBoardCfg (name, "sh2a-fpu", sess, "sh-compact");
  return board;
}

// default sh2a board -- sh2a-fpu
BoardCfg * 
mk_sh2a (const string name, SessionCfg *sess)
{
  return mk_sh2a_fpu (name, sess);
}

// sh3 board
BoardCfg * 
mk_sh3 (const string name, SessionCfg *sess)
{
  ShBoardCfg *board = new ShBoardCfg (name, "sh3", sess, "sh-compact");
  return board;
}

// sh3e board
BoardCfg * 
mk_sh3e (const string name, SessionCfg *sess)
{
  ShBoardCfg *board = new ShBoardCfg (name, "sh3e", sess, "sh-compact");
  return board;
}

// sh4 board
BoardCfg * 
mk_sh4 (const string name, SessionCfg *sess)
{
  ShBoardCfg *board = new ShBoardCfg (name, "sh4", sess, "sh-compact");
  return board;
}

// sh4 board with no fpu
BoardCfg * 
mk_sh4_nofpu (const string name, SessionCfg *sess)
{
  ShBoardCfg *board = new ShBoardCfg (name, "sh4-nofpu", sess, "sh-compact");
  return board;
}

// sh4 board with single precision fpu
BoardCfg * 
mk_sh4_single (const string name, SessionCfg *sess)
{
  ShBoardCfg *board = new ShBoardCfg (name, "sh4-single", sess, "sh-compact");
  return board;
}

// sh4a board
BoardCfg * 
mk_sh4a (const string name, SessionCfg *sess)
{
  ShBoardCfg *board = new ShBoardCfg (name, "sh4a", sess, "sh-compact");
  return board;
}

// sh4a board with no fpu
BoardCfg * 
mk_sh4a_nofpu (const string name, SessionCfg *sess)
{
  ShBoardCfg *board = new ShBoardCfg (name, "sh4a-nofpu", sess, "sh-compact");
  return board;
}

// sh4a board with single precision fpu
BoardCfg * 
mk_sh4a_single (const string name, SessionCfg *sess)
{
  ShBoardCfg *board = new ShBoardCfg (name, "sh4a-single", sess, "sh-compact");
  return board;
}

// sh4al board
BoardCfg * 
mk_sh4al (const string name, SessionCfg *sess)
{
  ShBoardCfg *board = new ShBoardCfg (name, "sh4al", sess, "sh-compact");
  return board;
}

#if defined (SIDTARGET_SH64)
BoardCfg * 
mk_sh5_compact (const string name, SessionCfg *sess)
{
  ShBoardCfg *board = new ShBoardCfg (name, "sh5-compact", sess, "sh-compact");
  return board;
}

BoardCfg * 
mk_sh5_32media (const string name, SessionCfg *sess)
{
  ShBoardCfg *board = new ShBoardCfg (name, "sh5-32media", sess, "sh-media");
  return board;
}

BoardCfg * 
mk_sh5_64media (const string name, SessionCfg *sess)
{
  ShBoardCfg *board = new ShBoardCfg (name, "sh5-64media", sess, "sh-media");
  return board;
}
#endif // defined (SIDTARGET_SH64)

#endif // defined (SIDTARGET_SH) || defined (SIDTARGET_SH64)
@


1.1
log
@2006-10-18  Dave Brolley  <brolley@@redhat.com>

        * Contribue the following changes:

        2006-07-19  Dave Brolley  <brolley@@redhat.com>

        * shCfg.h (insn_buffer): All references removed.
        (main_memory): New member of ShBoardCfg.
        * shCfg.cxx (insn_buffer): All references removed.
        (ShBoardCfg): Don't initialize icache or ocache. Assume icache and
        ocache are always created. Don't connect memory heirarchy here.
        (write_config): Do it here instead.

        2006-05-11  Dave Brolley  <brolley@@redhat.com>

        * Makefile.am: Add sh support.
        * mainDynamic.cxx: Likewise.
        * shCfg.cxx: New source file.
        * shCfg.h: New source file.
        * commonCfg.cxx (GprofCfg): Set bucket-size for hw-cpu-sh*.
@
text
@d7 1
d226 2
@

