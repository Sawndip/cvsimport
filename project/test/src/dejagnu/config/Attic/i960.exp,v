head	1.4;
access;
symbols
	msnyder-tracepoint-checkpoint-branch:1.3.0.2
	msnyder-tracepoint-checkpoint-branchpoint:1.3
	ezannoni_pie-20040323-branch:1.2.0.48
	ezannoni_pie-20040323-branchpoint:1.2
	cagney_tramp-20040321-mergepoint:1.2
	cagney_tramp-20040309-branch:1.2.0.46
	cagney_tramp-20040309-branchpoint:1.2
	gdb_6_1-branch:1.2.0.44
	gdb_6_1-2004-03-01-gmt-branchpoint:1.2
	drow-cplus-merge-20040208:1.2
	carlton_dictionary-20040126-merge:1.2
	drow-cplus-merge-20040113:1.2
	drow-cplus-merge-20031224:1.2
	drow-cplus-merge-20031220:1.2
	carlton_dictionary-20031215-merge:1.2
	drow-cplus-merge-20031214:1.2
	carlton-dictionary-20031111-merge:1.2
	carlton_dictionary-20030917-merge:1.2
	ezannoni_pie-20030916-branchpoint:1.2
	ezannoni_pie-20030916-branch:1.2.0.42
	cagney_x86i386-20030821-branch:1.2.0.40
	cagney_x86i386-20030821-branchpoint:1.2
	carlton_dictionary-20030805-merge:1.2
	carlton_dictionary-20030627-merge:1.2
	gdb_6_0-branch:1.2.0.38
	gdb_6_0-2003-06-23-branchpoint:1.2
	cagney_convert-20030606-branch:1.2.0.36
	cagney_convert-20030606-branchpoint:1.2
	cagney_writestrings-20030508-branch:1.2.0.34
	cagney_writestrings-20030508-branchpoint:1.2
	carlton_dictionary-20030523-merge:1.2
	cagney_fileio-20030521-branch:1.2.0.32
	cagney_fileio-20030521-branchpoint:1.2
	carlton_dictionary-20030430-merge:1.2
	carlton_dictionary-20030416-merge:1.2
	cagney_frameaddr-20030409-mergepoint:1.2
	cagney_frameaddr-20030403-branchpoint:1.2
	cagney_frameaddr-20030403-branch:1.2.0.30
	cagney_framebase-20030330-mergepoint:1.2
	cagney_framebase-20030326-branch:1.2.0.28
	cagney_framebase-20030326-branchpoint:1.2
	cagney_lazyid-20030317-branch:1.2.0.26
	cagney_lazyid-20030317-branchpoint:1.2
	offbyone-20030313-branch:1.2.0.24
	offbyone-20030313-branchpoint:1.2
	carlton_dictionary-20030305-merge:1.2
	cagney_offbyone-20030303-branch:1.2.0.22
	cagney_offbyone-20030303-branchpoint:1.2
	carlton_dictionary-20030207-merge:1.2
	interps-20030202-branch:1.2.0.20
	interps-20030202-branchpoint:1.2
	cagney-unwind-20030108-branch:1.2.0.18
	cagney-unwind-20030108-branchpoint:1.2
	carlton_dictionary-20021223-merge:1.2
	carlton_dictionary-20021115-merge:1.2
	kseitz_interps-20021105-merge:1.2
	kseitz_interps-20021103-merge:1.2
	drow-cplus-merge-20021020:1.2
	drow-cplus-merge-20021025:1.2
	carlton_dictionary-20021025-merge:1.2
	carlton_dictionary-20021011-merge:1.2
	drow-cplus-branch:1.2.0.16
	drow-cplus-branchpoint:1.2
	kseitz_interps-20020930-merge:1.2
	carlton_dictionary-20020927-merge:1.2
	carlton_dictionary-branch:1.2.0.14
	carlton_dictionary-20020920-branchpoint:1.2
	sid-20020905-branchpoint:1.2
	sid-20020905-branch:1.2.0.12
	gdb_5_3-branch:1.2.0.10
	gdb_5_3-2002-09-04-branchpoint:1.2
	kseitz_interps-20020829-merge:1.2
	cagney_sysregs-20020825-branch:1.2.0.8
	cagney_sysregs-20020825-branchpoint:1.2
	readline_4_3-import-branch:1.2.0.6
	readline_4_3-import-branchpoint:1.2
	kseitz_interps-20020528-branch:1.2.0.4
	kseitz_interps-20020528-branchpoint:1.2
	cagney_regbuf-20020515-branch:1.2.0.2
	cagney_regbuf-20020515-branchpoint:1.2
	gdb_5_2-branch:1.1.1.1.0.10
	gdb_5_2-2002-03-03-branchpoint:1.1.1.1
	cygnus_cvs_20020108_pre:1.1.1.1
	gdb_5_1_0_1-2002-01-03-branch:1.1.1.1.0.8
	gdb_5_1_0_1-2002-01-03-branchpoint:1.1.1.1
	gdb_5_1-2001-11-21-release:1.1.1.1
	gdb_s390-2001-09-26-branch:1.1.1.1.0.6
	gdb_s390-2001-09-26-branchpoint:1.1.1.1
	gdb_5_1-2001-07-29-branch:1.1.1.1.0.4
	gdb_5_1-2001-07-29-branchpoint:1.1.1.1
	gdb_5_0-2000-05-19-release:1.1.1.1
	gdb_4_18_2-2000-05-18-release:1.1.1.1
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.1
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.1
	gdb_5_0-2000-04-10-branch:1.1.1.1.0.2
	gdb_5_0-2000-04-10-branchpoint:1.1.1.1
	repo-unification-2000-02-06:1.1.1.1
	dejagnu-2000-02-04:1.1.1.1
	dejagnu-2000-01-31:1.1.1.1
	dejagnu-2000-01-24:1.1.1.1
	dejagnu-2000-01-17:1.1.1.1
	dejagnu-2000-01-10:1.1.1.1
	dejagnu-2000-01-04:1.1.1.1
	dejagnu-1999-12-21:1.1.1.1
	dejagnu-1999-12-13:1.1.1.1
	dejagnu-1999-12-07:1.1.1.1
	dejagnu-1999-12-06:1.1.1.1
	dejagnu-1999-11-15:1.1.1.1
	dejagnu-1999-11-08:1.1.1.1
	SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.4
date	2005.06.29.01.58.39;	author bje;	state dead;
branches;
next	1.3;

1.3
date	2005.05.11.09.52.57;	author nickc;	state Exp;
branches;
next	1.2;

1.2
date	2002.04.21.08.46.48;	author nickc;	state Exp;
branches;
next	1.1;

1.1
date	99.11.09.01.28.42;	author jsm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.11.09.01.28.42;	author jsm;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Remove old version of DejaGnu.
@
text
@#   Copyright (C) 1997 - 2001 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA 02110-1301, USA.  

# Please email any bugs, comments, and/or additions to this file to:
# bug-dejagnu@@gnu.org

#
# Initialize the board on initial connection or after rebooting.
# Since the board autobauds, we have to be a bit aggressive about
# getting a valid prompt.
#
proc ${board}_init { dest } {
    global i960_try_count;

    set prompt [board_info $dest shell_prompt];
    set done 0;

    if ![info exists i960_try_count] {
	set i960_try_count 1;
    }

    remote_close $dest;
    if { [remote_open $dest] != "" } {
	for { set tries 0; } { $tries < 7 && ! $done } { incr tries } {
	    remote_send $dest "\n";
	    remote_expect $dest 1 {
		-re "${prompt}" {
		    set done 1;
		}
		-re ".+" { exp_continue }
		timeout { }
	    }
	}
    }

    remote_close $dest;
    if { ! $done } {
	if { $i960_try_count == 3 } {
	    perror "Couldn't connect to board.";
	} else {
	    incr i960_try_count;
	    remote_close $dest;
	    remote_reboot $dest;
	}
    }
    if [info exists i960_try_count] {
	unset i960_try_count;
    }
}

proc i960_ld { dest prog } {
    if ![file exists $prog] {
	perror "$prog does not exist."
        return "untested"
    }
    set shell_prompt [board_info $dest shell_prompt];
    set strip [board_info $dest strip];
    set rprog [remote_download host $prog a.out];
    if { $strip != "" } {
	remote_exec host $strip $rprog;
    }
    remote_upload host $rprog a.out;

    set id [remote_open $dest];
    if { $id < 0 } {
	return -1;
    }
    remote_binary $dest;
    remote_send $dest "\n";
    remote_expect $dest 5 {
	-re $shell_prompt { } 
    }
    remote_send $dest "do\n";
    remote_expect $dest 5 {
	-re "Downloading" { }
    }
    # Nasty.
    if { [board_info $dest connect] == "telnet" } {
	global board_info;

	remote_close $dest;
	set hp [split [board_info $dest netport] ":"];
	set host [lindex $hp 0];
	set port [lindex $hp 1];
	set status -1;
	while { $status != 0 } {
	    set status [catch "socket $host $port" id2];
	    if { $status != 0 } {
		sleep 5;
	    }
	}
    } else {
	set id2 [exp_open -leaveopen -i $id];
    }
    if [catch "exec sx -bX a.out <@@$id2 >@@$id2 2>/dev/null" error] {
	perror "exec sx failed: $error"
    }
    if { [board_info $dest connect] == "telnet" } {
	close $id2;
	sleep 2;
	remote_open $dest;
	remote_binary $dest;
    }
    set result 1;
    remote_send $dest "\n";
    remote_expect $dest 1 {
	-re "$shell_prompt" { 
	    set result 0;
	    exp_continue;
	}
	timeout { }
    }
    return $result;
}

proc i960_spawn { dest prog args } {
    set shell_prompt [board_info $dest shell_prompt];

    for { set tries 0 ; } { $tries < 3 } { incr tries } {
	set result [remote_ld $dest $prog];
	if { $result == 0 } {
	    set comm "go [board_info $dest start_addr]";
	    remote_send $dest "$comm\n";
	    remote_expect $dest 10 {
		-re "$comm\[\r\n\]\[\r\n\]?" { }
		default { }
	    }
	    return [board_info $dest fileid];
	} else {
	    remote_reboot $dest;
	}
    }
    return -1;
}

proc i960_wait { dest timeout } {
    set output "";
    set shell_prompt [board_info $dest shell_prompt];

    remote_expect $dest $timeout {
	-re " fault at \[0-9a-h\]+, subtype \[0-9a-h\]+" {
	    set status -1;
	    exp_continue;
	}
	-re "(.*)(\[\r\n\]|^)Program Exit: (\[0-9\]+)\[\r\n\]" {
	    append output $expect_out(1,string);
	    set status $expect_out(3,string);
	    exp_continue;
	}
	-re "(.*)$shell_prompt" { 
	    append output $expect_out(1,string);
	    set bstatus [check_for_board_status output];
	    if { $bstatus >= 0 } {
		set status $bstatus;
	    }
	}
	-re "\[\r\n\]+" { 
	    # Sometimes the board goes wacky in the head, and we have
	    # to shoot it.
	    append output $expect_out(buffer);
	    if { [string length $output] < 512000 } {
		exp_continue;
	    } else {
		set status -1;
	    }
	}
	default {
	    set status -1;
	}
    }
    return [list $status $output];
}

proc i960_load { dest prog args } {
    for { set x 0; } { $x < 3 } { incr x; } {
	set id [eval remote_spawn \{$dest\} \{$prog\} $args];
	if { $id < 0 } {
	    return [list "fail" ""];
	}
	set result [remote_wait $dest 120];
	set status [lindex $result 0];
	set output [lindex $result 1];

	if { $status == 0 } {
	    return [list "pass" $output];
	} else {
	    global i960_retry;

	    if { [board_info $dest exists unreliable] && ![info exists i960_retry] } {
		set i960_retry 1;
		remote_reboot $dest;
		set result [eval i960_load \{$dest\} \{$prog\} $args];
		unset i960_retry;
		return $result;
	    } else {
		if { $status < 0 } {
		    remote_reboot $dest;
		}
		return [list "fail" $output];
	    }
	}
    }
}

set_board_info shell_prompt "=>";
set_board_info send_initial_cr 1;
# We take care of getting a prompt in ${board}_init.
set_board_info dont_wait_for_prompt 1;
@


1.3
log
@Update the address of the FSF organization
@
text
@@


1.2
log
@Synchronise with sources from savanaha repository
@
text
@d15 1
a15 1
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
#   Copyright (C) 1997, 1998, 1999 Free Software Foundation, Inc.
d18 1
a18 1
# DejaGnu@@cygnus.com
@


1.1.1.1
log
@import dejagnu-1999-11-08 snapshot
@
text
@@
