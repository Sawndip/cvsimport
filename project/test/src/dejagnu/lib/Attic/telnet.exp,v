head	1.4;
access;
symbols
	msnyder-tracepoint-checkpoint-branch:1.3.0.2
	msnyder-tracepoint-checkpoint-branchpoint:1.3
	ezannoni_pie-20040323-branch:1.2.0.48
	ezannoni_pie-20040323-branchpoint:1.2
	cagney_tramp-20040321-mergepoint:1.2
	cagney_tramp-20040309-branch:1.2.0.46
	cagney_tramp-20040309-branchpoint:1.2
	gdb_6_1-branch:1.2.0.44
	gdb_6_1-2004-03-01-gmt-branchpoint:1.2
	drow-cplus-merge-20040208:1.2
	carlton_dictionary-20040126-merge:1.2
	drow-cplus-merge-20040113:1.2
	drow-cplus-merge-20031224:1.2
	drow-cplus-merge-20031220:1.2
	carlton_dictionary-20031215-merge:1.2
	drow-cplus-merge-20031214:1.2
	carlton-dictionary-20031111-merge:1.2
	carlton_dictionary-20030917-merge:1.2
	ezannoni_pie-20030916-branchpoint:1.2
	ezannoni_pie-20030916-branch:1.2.0.42
	cagney_x86i386-20030821-branch:1.2.0.40
	cagney_x86i386-20030821-branchpoint:1.2
	carlton_dictionary-20030805-merge:1.2
	carlton_dictionary-20030627-merge:1.2
	gdb_6_0-branch:1.2.0.38
	gdb_6_0-2003-06-23-branchpoint:1.2
	cagney_convert-20030606-branch:1.2.0.36
	cagney_convert-20030606-branchpoint:1.2
	cagney_writestrings-20030508-branch:1.2.0.34
	cagney_writestrings-20030508-branchpoint:1.2
	carlton_dictionary-20030523-merge:1.2
	cagney_fileio-20030521-branch:1.2.0.32
	cagney_fileio-20030521-branchpoint:1.2
	carlton_dictionary-20030430-merge:1.2
	carlton_dictionary-20030416-merge:1.2
	cagney_frameaddr-20030409-mergepoint:1.2
	cagney_frameaddr-20030403-branchpoint:1.2
	cagney_frameaddr-20030403-branch:1.2.0.30
	cagney_framebase-20030330-mergepoint:1.2
	cagney_framebase-20030326-branch:1.2.0.28
	cagney_framebase-20030326-branchpoint:1.2
	cagney_lazyid-20030317-branch:1.2.0.26
	cagney_lazyid-20030317-branchpoint:1.2
	offbyone-20030313-branch:1.2.0.24
	offbyone-20030313-branchpoint:1.2
	carlton_dictionary-20030305-merge:1.2
	cagney_offbyone-20030303-branch:1.2.0.22
	cagney_offbyone-20030303-branchpoint:1.2
	carlton_dictionary-20030207-merge:1.2
	interps-20030202-branch:1.2.0.20
	interps-20030202-branchpoint:1.2
	cagney-unwind-20030108-branch:1.2.0.18
	cagney-unwind-20030108-branchpoint:1.2
	carlton_dictionary-20021223-merge:1.2
	carlton_dictionary-20021115-merge:1.2
	kseitz_interps-20021105-merge:1.2
	kseitz_interps-20021103-merge:1.2
	drow-cplus-merge-20021020:1.2
	drow-cplus-merge-20021025:1.2
	carlton_dictionary-20021025-merge:1.2
	carlton_dictionary-20021011-merge:1.2
	drow-cplus-branch:1.2.0.16
	drow-cplus-branchpoint:1.2
	kseitz_interps-20020930-merge:1.2
	carlton_dictionary-20020927-merge:1.2
	carlton_dictionary-branch:1.2.0.14
	carlton_dictionary-20020920-branchpoint:1.2
	sid-20020905-branchpoint:1.2
	sid-20020905-branch:1.2.0.12
	gdb_5_3-branch:1.2.0.10
	gdb_5_3-2002-09-04-branchpoint:1.2
	kseitz_interps-20020829-merge:1.2
	cagney_sysregs-20020825-branch:1.2.0.8
	cagney_sysregs-20020825-branchpoint:1.2
	readline_4_3-import-branch:1.2.0.6
	readline_4_3-import-branchpoint:1.2
	kseitz_interps-20020528-branch:1.2.0.4
	kseitz_interps-20020528-branchpoint:1.2
	cagney_regbuf-20020515-branch:1.2.0.2
	cagney_regbuf-20020515-branchpoint:1.2
	gdb_5_2-branch:1.1.1.1.0.10
	gdb_5_2-2002-03-03-branchpoint:1.1.1.1
	cygnus_cvs_20020108_pre:1.1.1.1
	gdb_5_1_0_1-2002-01-03-branch:1.1.1.1.0.8
	gdb_5_1_0_1-2002-01-03-branchpoint:1.1.1.1
	gdb_5_1-2001-11-21-release:1.1.1.1
	gdb_s390-2001-09-26-branch:1.1.1.1.0.6
	gdb_s390-2001-09-26-branchpoint:1.1.1.1
	gdb_5_1-2001-07-29-branch:1.1.1.1.0.4
	gdb_5_1-2001-07-29-branchpoint:1.1.1.1
	gdb_5_0-2000-05-19-release:1.1.1.1
	gdb_4_18_2-2000-05-18-release:1.1.1.1
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.1
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.1
	gdb_5_0-2000-04-10-branch:1.1.1.1.0.2
	gdb_5_0-2000-04-10-branchpoint:1.1.1.1
	repo-unification-2000-02-06:1.1.1.1
	dejagnu-2000-02-04:1.1.1.1
	dejagnu-2000-01-31:1.1.1.1
	dejagnu-2000-01-24:1.1.1.1
	dejagnu-2000-01-17:1.1.1.1
	dejagnu-2000-01-10:1.1.1.1
	dejagnu-2000-01-04:1.1.1.1
	dejagnu-1999-12-21:1.1.1.1
	dejagnu-1999-12-13:1.1.1.1
	dejagnu-1999-12-07:1.1.1.1
	dejagnu-1999-12-06:1.1.1.1
	dejagnu-1999-11-15:1.1.1.1
	dejagnu-1999-11-08:1.1.1.1
	SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.4
date	2005.06.29.01.58.56;	author bje;	state dead;
branches;
next	1.3;

1.3
date	2005.05.11.09.53.01;	author nickc;	state Exp;
branches;
next	1.2;

1.2
date	2002.04.21.08.47.07;	author nickc;	state Exp;
branches;
next	1.1;

1.1
date	99.11.09.01.28.42;	author jsm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.11.09.01.28.42;	author jsm;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Remove old version of DejaGnu.
@
text
@# Copyright (C) 1997 - 2001 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA 02110-1301, USA.  

# Please email any bugs, comments, and/or additions to this file to:
# bug-dejagnu@@gnu.org

#
# Connect using telnet. This takes two arguments. The first one is the
# hostname, and the second is the optional port number. This sets
# the fileid field in the config array, and returns -1 for error, or the
# spawn id.
#
proc telnet_open { hostname args } {
    global verbose
    global connectmode
    global spawn_id
    global timeout
    global board_info

    set raw 0;

    if { [llength $args] > 0 } {
	if { [lindex $args 0] == "raw" } {
	    set raw 1;
	}
    }

    set port 23
    if [board_info $hostname exists name] {
	set connhost [board_info $hostname name]
    } else {
	set connhost $hostname
    }

    if [board_info $connhost exists hostname] {
	set hostname [board_info $connhost hostname];
    }

    if [file exists /usr/kerberos/bin/telnet] {
	set telnet /usr/kerberos/bin/telnet;
    } else {
	set telnet telnet;
    }

    # Instead of unsetting it, let's return it. One connection at a
    # time, please.
    if [board_info $connhost exists fileid] {
	return [board_info $connhost fileid];
    }
    # get the hostname and port number from the config array
    if [board_info $connhost exists netport] {
	set type $hostname
	set hosttmp [split [board_info $connhost netport] ":"]
	set hostname [lindex $hosttmp 0]
	if { [llength $hosttmp] > 1 } {
	    set port [lindex $hosttmp 1]
	}
	unset hosttmp
    } else {
	set type target
    }
    if [board_info $connhost exists shell_prompt] {
        set shell_prompt [board_info $connhost shell_prompt]
    }
    if ![info exists shell_prompt] {	# if no prompt, then set it to something generic
	set shell_prompt ".*> "
    }
 
    set tries 0
    set result -1
    set need_respawn 1;
    verbose "Starting a telnet connection to $hostname:$port $shell_prompt" 2
    while { $result < 0 && $tries <= 3 } {
	if { $need_respawn } {
	    set need_respawn 0;
	    spawn $telnet $hostname $port;
	}
	expect {
	    "Trying " {
		exp_continue;
	    }
	    -re "$shell_prompt.*$" {
		verbose "Got prompt\n"
		set result 0
	    }
	    -re "nt Name:|ogin:" {
		if [board_info $connhost exists telnet_username] {
		    exp_send "[board_info $connhost telnet_username]\n";
		    exp_continue;
		}
		if [board_info $connhost exists username] {
		    exp_send "[board_info $connhost username]\n";
		    exp_continue;
		}
		perror "telnet: need to login"
		break
	    }
	    "assword:" {
		if [board_info $connhost exists telnet_password] {
		    exp_send "[board_info $connhost telnet_password]\n";
		    exp_continue;
		}
		if [board_info $connhost exists password] {
		    exp_send "[board_info $connhost password]\n";
		    exp_continue;
		}
		perror "telnet: need a password"
		break
	    }
	    -re "advance.*y/n.*\\?" {
		exp_send "n\n";
		exp_continue;
	    }
	    -re {([Aa]dvanced|[Ss]imple) or ([Ss]imple|[Aa]dvanced)} {
		exp_send "simple\n";
		exp_continue;
	    }
	    "Connected to" {
		exp_continue
	    }
	    "unknown host" {
		exp_send "\003"
		perror "telnet: unknown host"
		break
	    }
	    "VxWorks Boot" {
		exp_send "@@\n";
		sleep 20;
		exp_continue;
	    }
	    -re "Escape character is.*\\.\[\r\n\]" {
		if { $raw || [board_info $connhost exists dont_wait_for_prompt] } {
		    set result 0;
		} else {
		    if [board_info $connhost exists send_initial_cr] {
			exp_send "\n"
		    }
		    exp_continue
		}
	    }
	    "has logged on from" {
		exp_continue
	    }
	    "You have no Kerberos tickets" {
		warning "telnet: no kerberos Tickets, please kinit"
		break
	    }
	    -re "Connection refused.*$" {
		catch "exp_send \"\003\"" foo;
		sleep 5;
		warning "telnet: connection refused."
	    }
	    -re "Sorry, this system is engaged.*" {
		exp_send "\003"
		warning "telnet: already connected."
	    }
	    "Connection closed by foreign host.*$" {
		warning "telnet: connection closed by foreign host."
		break
	    }
	    -re "\[\r\n\]+" {
		exp_continue
	    }
	    timeout { 
		exp_send "\n"
	    }
	    eof {
		warning "telnet: got unexpected EOF from telnet."
		catch close;
		catch wait;
		set need_respawn 1;
		sleep 5;
	    }
	}
	incr tries
    }
    # we look for this here again cause it means something went wrong, and
    # it doesn't always show up in the expect in buffer till the server times out.
    if [info exists expect_out(buffer)] {
	if [regexp "assword:|ogin:" $expect_out(buffer)] {
	    perror "telnet: need to supply a login and password."
	}
    }
    if { $result < 0 } {
	catch close
	catch wait
	set spawn_id -1
    }
    if { $spawn_id >= 0 } {
	verbose "setting board_info($connhost,fileid) to $spawn_id" 3
	set board_info($connhost,fileid) $spawn_id
    }
    return $spawn_id
}

#
# Put the telnet connection into binary mode.
#
proc telnet_binary { hostname } {
    if [board_info $hostname exists fileid] {
	remote_send $hostname "";
	remote_expect $hostname 5 {
	    -re "telnet> *$" {}
	    default {}
	}
	remote_send $hostname "set binary\n"
	remote_expect $hostname 5 {
	    -re "Format is .*telnet> *$" {
		remote_send $hostname "toggle binary\n";
		exp_continue;
	    }
	    -re "Negotiating network ascii.*telnet> *$" {
		remote_send $hostname "toggle binary\n";
		exp_continue;
	    }
	    -re "Negotiating binary.*\[\r\n\].*$" { }
	    -re "binary.*unknown argument.*telnet> *$" {
		remote_send $hostname "mode character\n";
	    }
	    -re "Already operating in binary.*\[\r\n\].*$" { }
	    timeout {
		warning "Never got binary response from telnet."
	    }
	}
    }
}

proc telnet_transmit { dest file args } {
    return [standard_transmit $dest $file];
}
@


1.3
log
@Update the address of the FSF organization
@
text
@@


1.2
log
@Synchronise with sources from savanaha repository
@
text
@d15 1
a15 1
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
# Copyright (C) 97, 98, 1999 Free Software Foundation, Inc.
d18 1
a18 1
# DejaGnu@@cygnus.com
@


1.1.1.1
log
@import dejagnu-1999-11-08 snapshot
@
text
@@
