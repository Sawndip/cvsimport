head	1.14;
access;
symbols
	msnyder-tracepoint-checkpoint-branch:1.13.0.2
	msnyder-tracepoint-checkpoint-branchpoint:1.13
	ezannoni_pie-20040323-branch:1.10.0.28
	ezannoni_pie-20040323-branchpoint:1.10
	cagney_tramp-20040321-mergepoint:1.10
	cagney_tramp-20040309-branch:1.10.0.26
	cagney_tramp-20040309-branchpoint:1.10
	gdb_6_1-branch:1.10.0.24
	gdb_6_1-2004-03-01-gmt-branchpoint:1.10
	drow-cplus-merge-20040208:1.10
	carlton_dictionary-20040126-merge:1.10
	drow-cplus-merge-20040113:1.10
	drow-cplus-merge-20031224:1.10
	drow-cplus-merge-20031220:1.10
	carlton_dictionary-20031215-merge:1.10
	drow-cplus-merge-20031214:1.10
	carlton-dictionary-20031111-merge:1.10
	carlton_dictionary-20030917-merge:1.10
	ezannoni_pie-20030916-branchpoint:1.10
	ezannoni_pie-20030916-branch:1.10.0.22
	cagney_x86i386-20030821-branch:1.10.0.20
	cagney_x86i386-20030821-branchpoint:1.10
	carlton_dictionary-20030805-merge:1.10
	carlton_dictionary-20030627-merge:1.10
	gdb_6_0-branch:1.10.0.18
	gdb_6_0-2003-06-23-branchpoint:1.10
	cagney_convert-20030606-branch:1.10.0.16
	cagney_convert-20030606-branchpoint:1.10
	cagney_writestrings-20030508-branch:1.10.0.14
	cagney_writestrings-20030508-branchpoint:1.10
	carlton_dictionary-20030523-merge:1.10
	cagney_fileio-20030521-branch:1.10.0.12
	cagney_fileio-20030521-branchpoint:1.10
	carlton_dictionary-20030430-merge:1.10
	carlton_dictionary-20030416-merge:1.10
	cagney_frameaddr-20030409-mergepoint:1.10
	cagney_frameaddr-20030403-branchpoint:1.10
	cagney_frameaddr-20030403-branch:1.10.0.10
	cagney_framebase-20030330-mergepoint:1.10
	cagney_framebase-20030326-branch:1.10.0.8
	cagney_framebase-20030326-branchpoint:1.10
	cagney_lazyid-20030317-branch:1.10.0.6
	cagney_lazyid-20030317-branchpoint:1.10
	offbyone-20030313-branch:1.10.0.4
	offbyone-20030313-branchpoint:1.10
	carlton_dictionary-20030305-merge:1.10
	cagney_offbyone-20030303-branch:1.10.0.2
	cagney_offbyone-20030303-branchpoint:1.10
	carlton_dictionary-20030207-merge:1.9
	interps-20030202-branch:1.9.0.6
	interps-20030202-branchpoint:1.9
	cagney-unwind-20030108-branch:1.9.0.4
	cagney-unwind-20030108-branchpoint:1.9
	carlton_dictionary-20021223-merge:1.9
	carlton_dictionary-20021115-merge:1.9
	kseitz_interps-20021105-merge:1.9
	kseitz_interps-20021103-merge:1.9
	drow-cplus-merge-20021020:1.9
	drow-cplus-merge-20021025:1.9
	carlton_dictionary-20021025-merge:1.9
	carlton_dictionary-20021011-merge:1.9
	drow-cplus-branch:1.9.0.2
	drow-cplus-branchpoint:1.9
	kseitz_interps-20020930-merge:1.9
	carlton_dictionary-20020927-merge:1.9
	carlton_dictionary-branch:1.8.0.14
	carlton_dictionary-20020920-branchpoint:1.8
	sid-20020905-branchpoint:1.8
	sid-20020905-branch:1.8.0.12
	gdb_5_3-branch:1.8.0.10
	gdb_5_3-2002-09-04-branchpoint:1.8
	kseitz_interps-20020829-merge:1.8
	cagney_sysregs-20020825-branch:1.8.0.8
	cagney_sysregs-20020825-branchpoint:1.8
	readline_4_3-import-branch:1.8.0.6
	readline_4_3-import-branchpoint:1.8
	kseitz_interps-20020528-branch:1.8.0.4
	kseitz_interps-20020528-branchpoint:1.8
	cagney_regbuf-20020515-branch:1.8.0.2
	cagney_regbuf-20020515-branchpoint:1.8
	gdb_5_2-branch:1.6.0.2
	gdb_5_2-2002-03-03-branchpoint:1.6
	cygnus_cvs_20020108_pre:1.3
	gdb_5_1_0_1-2002-01-03-branch:1.2.0.6
	gdb_5_1_0_1-2002-01-03-branchpoint:1.2
	gdb_5_1-2001-11-21-release:1.2
	gdb_s390-2001-09-26-branch:1.2.0.4
	gdb_s390-2001-09-26-branchpoint:1.2
	gdb_5_1-2001-07-29-branch:1.2.0.2
	gdb_5_1-2001-07-29-branchpoint:1.2
	gdb_5_0-2000-05-19-release:1.1.1.1
	gdb_4_18_2-2000-05-18-release:1.1.1.1
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.1
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.1
	gdb_5_0-2000-04-10-branch:1.1.1.1.0.2
	gdb_5_0-2000-04-10-branchpoint:1.1.1.1
	repo-unification-2000-02-06:1.1.1.1
	dejagnu-2000-02-04:1.1.1.1
	dejagnu-2000-01-31:1.1.1.1
	dejagnu-2000-01-24:1.1.1.1
	dejagnu-2000-01-17:1.1.1.1
	dejagnu-2000-01-10:1.1.1.1
	dejagnu-2000-01-04:1.1.1.1
	dejagnu-1999-12-21:1.1.1.1
	dejagnu-1999-12-13:1.1.1.1
	dejagnu-1999-12-07:1.1.1.1
	dejagnu-1999-12-06:1.1.1.1
	dejagnu-1999-11-15:1.1.1.1
	dejagnu-1999-11-08:1.1.1.1
	SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.14
date	2005.06.29.01.58.55;	author bje;	state dead;
branches;
next	1.13;

1.13
date	2004.11.11.18.03.59;	author nickc;	state Exp;
branches;
next	1.12;

1.12
date	2004.11.11.17.54.47;	author nickc;	state Exp;
branches;
next	1.11;

1.11
date	2004.11.11.11.55.11;	author nickc;	state Exp;
branches;
next	1.10;

1.10
date	2003.02.11.13.51.32;	author nickc;	state Exp;
branches;
next	1.9;

1.9
date	2002.09.26.09.50.03;	author rearnsha;	state Exp;
branches
	1.9.2.1;
next	1.8;

1.8
date	2002.04.21.08.47.07;	author nickc;	state Exp;
branches
	1.8.4.1
	1.8.14.1;
next	1.7;

1.7
date	2002.04.14.08.27.54;	author nickc;	state Exp;
branches;
next	1.6;

1.6
date	2002.02.09.02.09.06;	author aoliva;	state Exp;
branches;
next	1.5;

1.5
date	2002.02.05.17.01.59;	author nickc;	state Exp;
branches;
next	1.4;

1.4
date	2002.01.17.11.52.59;	author nickc;	state Exp;
branches;
next	1.3;

1.3
date	2001.11.19.16.25.58;	author ezannoni;	state Exp;
branches;
next	1.2;

1.2
date	2000.06.09.13.14.35;	author clm;	state Exp;
branches;
next	1.1;

1.1
date	99.11.09.01.28.42;	author jsm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.11.09.01.28.42;	author jsm;	state Exp;
branches;
next	;

1.8.4.1
date	2002.10.01.00.45.55;	author kseitz;	state Exp;
branches;
next	;

1.8.14.1
date	2002.09.27.20.03.00;	author carlton;	state Exp;
branches;
next	1.8.14.2;

1.8.14.2
date	2003.03.06.00.56.20;	author carlton;	state Exp;
branches;
next	;

1.9.2.1
date	2003.12.14.20.27.00;	author drow;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Remove old version of DejaGnu.
@
text
@# Copyright (C) 1992, 93, 94, 95, 96, 97, 98, 1999, 2000, 2002, 2003, 2004
# Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA. 

# Please email any bugs, comments, and/or additions to this file to:
# bug-dejagnu@@prep.ai.mit.edu

# This file was written by Rob Savoye. (rob@@cygnus.com)

# this contains a list of gcc options and their respective directories.

#
# Find the pieces of libgloss for testing the GNU development tools
# needed to link a set of object files into an executable.
# This usually means setting the -L and -B paths correctly.
#
proc libgloss_link_flags { args } {
    global target_cpu
    global srcdir

    # libgloss doesn't work native
    if [isnative] {
	return ""
    }

    # if we're on a remote host, we can't search for the file, so we can only
    # use an installed compiler, so we don't add any paths here.
    if [is_remote host] {
	return ""
    }

    set gccpath "[get_multilibs]"

    # map the target_cpu to the proper libgloss directory. unfortunately, these
    # directory names are hardcoded into libgloss.
    switch -glob -- $target_cpu {
	"sparc86x" {
	    set cpu sparc
	}
	"sparclite" {
	    set cpu sparc
	}
	"sparclet" {
	    set cpu sparc
	}
	"sparc64*" {
	    set cpu sparc
	}
	"hppa*" {
	    set cpu pa
	}
	"mips*" {
	    set cpu mips
	}
	"powerpc*" {
	    set cpu rs6000
	}
	"d10v*" {
	    set cpu libnosys
	}
	"xscale*" {
	    set cpu arm
	}
	default {
	    set cpu $target_cpu
	}
    }

    set gloss_srcdir ""
    # look for the libgloss srcdir sp we can find the linker scripts
    set gloss_srcdir [lookfor_file ${srcdir} libgloss/$cpu]

    # set the proper paths for gcc if the target subdir exists, else assume we
    # have no libgloss support for this target.
    if { $gloss_srcdir == "" } {
	return ""
    }
    if [file exists $gccpath/libgloss/$cpu] {
	verbose "Libgloss path is $gccpath/libgloss/$cpu" 2
	return "-B$gccpath/libgloss/$cpu/ -L$gccpath/libgloss/$cpu -L$gloss_srcdir"
    } else {
	verbose -log "No libgloss support for this target." 2
	return ""
    }
}

# There aren't any, but we'll be orthogonal here.

proc libgloss_include_flags { args } {
    return ""
}

#
# Find the newlib libraries in the current source tree.
#
proc newlib_link_flags { args } {
    global tool_root_dir

    # libgloss doesn't work native
    if [isnative] {
	return ""
    }

    # if we're on a remote host, we can't search for the file, so we can only
    # use an installed compiler, so we don't add any paths here.
    if [is_remote host] {
	return ""
    }

    set ld_script_path [lookfor_file ${tool_root_dir} "ld/ldscripts"]
    if { $ld_script_path != "" } {
	set result "-L[file dirname $ld_script_path]"
    } else {
	set result ""
    }

    set gccpath "[get_multilibs]"

    verbose "Looking for $gccpath/newlib"
    if [file exists $gccpath/newlib] {
	verbose "Newlib path is $gccpath/newlib"
	return "$result -B$gccpath/newlib/ -L$gccpath/newlib"
    } else {
	verbose "No newlib support for this target"
	return "$result"
    }
}

proc newlib_include_flags { args } {
    global srcdir

    if [isnative] {
	return ""
    }

    if [is_remote host] {
	return ""
    }

    set gccpath "[get_multilibs]"

    if [file exists $gccpath/newlib] {
	verbose "Newlib path is $gccpath/newlib"

	set newlib_dir [lookfor_file ${srcdir} newlib/libc/include/assert.h]
	if { ${newlib_dir} != "" } {
	    set newlib_dir [file dirname ${newlib_dir}]
	}
	# Note - we use -isystem rather than -I because newlib contains
	# system header files.  This is especially important for the
	# limits.h header which makes use of the #include_next directive.
	# #include_next will generate error messages from GCC if compiling
	# in strict ANSI mode or if another limits.h header cannot be found.
	# When it is included via -isystem these things do not happen.
	return " -isystem $gccpath/newlib/targ-include -isystem ${newlib_dir}"
    } else {
	verbose "No newlib support for this target"
    }
}

proc libio_include_flags { args } {
    global srcdir
    global tool_root_dir

    if [is_remote host] {
	return ""
    }

    set gccpath "[get_multilibs]"

    if { $gccpath == "" } {
	set gccpath "$tool_root_dir"
    }

    set libio_bin_dir [lookfor_file ${gccpath} libio/_G_config.h]

    # linux doesn't build _G_config.h and the test above fails, so
    # we search for iostream.list too.
    if { $libio_bin_dir == "" } {
	set libio_bin_dir [lookfor_file ${gccpath} libio/iostream.list]
    }

    set libio_src_dir [lookfor_file ${srcdir} libio/Makefile.in]
    if { $libio_bin_dir != "" && $libio_src_dir != "" } {
	set libio_src_dir [file dirname ${libio_src_dir}]
	set libio_bin_dir [file dirname ${libio_bin_dir}]
	# Note - unlike the newlib_include_flags proc above we use the -I
	# switch to specify the include paths.  This is because these headers
	# are not system headers, and if -isystem were to be used GCC would
	# generate an implicit extern "C" { ... } surrounding them.  This
	# will break targets which do not define NO_IMPLICIT_EXTERN_C.
	return " -I${libio_src_dir} -I${libio_bin_dir}"
    } else {
	return ""
    }
}

proc libio_link_flags { args } {
    if [is_remote host] {
	return ""
    }

    set gccpath "[get_multilibs]"

    set libio_dir [lookfor_file ${gccpath} libio/libio.a]
    if { $libio_dir != "" } {
	return "-L[file dirname ${libio_dir}]"
    } else {
	return ""
    }
}

proc g++_include_flags { args } {
    global srcdir
    global target_alias

    if [is_remote host] {
	return ""
    }

    set gccpath [get_multilibs]
    set libio_dir ""
    set flags ""

    set dir [lookfor_file ${srcdir} libg++]
    if { ${dir} != "" } {
	# See comment in libio_include_flags about using -I.
	append flags " -I${dir} -I${dir}/src"
    }

    set dir [lookfor_file ${srcdir} libstdc++-v3]
    if { ${dir} != "" } {
	append flags " -I${dir}/include -I${dir}/include/std -I${dir}/include/c_std -I${dir}/libsupc++"
    }

    set dir [lookfor_file ${gccpath} libstdc++-v3]
    if { ${dir} != "" } {
	append flags " -I${dir}/include -I${dir}/include/${target_alias}"
    }

    set dir [lookfor_file ${srcdir} libstdc++]
    if { ${dir} != "" } {
	append flags " -I${dir} -I${dir}/stl"
    }

    return "$flags"
}

proc g++_link_flags { args } {
    global srcdir
    global ld_library_path

    set gccpath [get_multilibs]
    set libio_dir ""
    set flags ""
    set ld_library_path "."

    if { $gccpath != "" } {
	if [file exists "${gccpath}/lib/libstdc++.a"] {
	    append ld_library_path ":${gccpath}/lib"
	}
	if [file exists "${gccpath}/libg++/libg++.a"] {
	    append flags "-L${gccpath}/libg++ "
	    append ld_library_path ":${gccpath}/libg++"
	}
	if [file exists "${gccpath}/libstdc++/libstdc++.a"] {
	    append flags "-L${gccpath}/libstdc++ "
	    append ld_library_path ":${gccpath}/libstdc++"
	}
	if [file exists "${gccpath}/libstdc++-v3/src/.libs/libstdc++.a"] {
	    append flags "-L${gccpath}/libstdc++-v3/src/.libs "
	    append ld_library_path ":${gccpath}/libstdc++-v3/src/.libs"
	}
	if [file exists "${gccpath}/libiberty/libiberty.a"] {
	    append flags "-L${gccpath}/libiberty "
	}
	if [file exists "${gccpath}/librx/librx.a"] {
	    append flags "-L${gccpath}/librx "
	}
    } else {
	global tool_root_dir

	set libgpp [lookfor_file ${tool_root_dir} libg++]
	if { $libgpp != "" } {
	    append flags "-L${libgpp} "
	    append ld_library_path ":${libgpp}"
	}
	set libstdcpp [lookfor_file ${tool_root_dir} libstdc++]
	if { $libstdcpp != "" } {
	    append flags "-L${libstdcpp} "
	    append ld_library_path ":${libstdcpp}"
	}
	set libiberty [lookfor_file ${tool_root_dir} libiberty]
	if { $libiberty != "" } {
	    append flags "-L${libiberty} "
	}
	set librx [lookfor_file ${tool_root_dir} librx]
	if { $librx != "" } {
	    append flags "-L${librx} "
	}
    }
    return "$flags"
}

proc libstdc++_include_flags { args } {
    global srcdir
    global target_alias

    if [is_remote host] {
	return ""
    }

    set gccpath [get_multilibs]
    set libio_dir ""
    set flags ""

    set dir [lookfor_file ${srcdir} libstdc++-v3]
    if { ${dir} != "" } {
	# See comment in libio_include_flags about using -I.
	append flags " -I${dir}/include -I${dir}/include/std -I${dir}/include/c_std -I${dir}/libsupc++"
    }

    set gccpath [get_multilibs]

    set dir [lookfor_file ${gccpath} libstdc++-v3]
    if { ${dir} != "" } {
	append flags " -I${dir}/include -I${dir}/include/${target_alias}"
    }

    set dir [lookfor_file ${srcdir} libstdc++]
    if { ${dir} != "" } {
	append flags " -I${dir} -I${dir}/stl"
    }

    return "$flags"
}

proc libstdc++_link_flags { args } {
    global srcdir
    global ld_library_path

    set gccpath [get_multilibs]
    set libio_dir ""
    set flags ""

    if { $gccpath != "" } {
	if [file exists "${gccpath}/libstdc++/libstdc++.a"] {
	    append flags "-L${gccpath}/libstdc++ "
	    append ld_library_path ":${gccpath}/libstdc++"
	}
	if [file exists "${gccpath}/libiberty/libiberty.a"] {
	    append flags "-L${gccpath}/libiberty "
	}
	if [file exists "${gccpath}/librx/librx.a"] {
	    append flags "-L${gccpath}/librx "
	}
    } else {
	global tool_root_dir

	set libstdcpp [lookfor_file ${tool_root_dir} libstdc++]
	if { $libstdcpp != "" } {
	    append flags "-L${libstdcpp} "
	    append ld_library_path ":${libstdcpp}"
	}
	set libiberty [lookfor_file ${tool_root_dir} libiberty]
	if { $libiberty != "" } {
	    append flags "-L${libiberty} "
	}
	set librx [lookfor_file ${tool_root_dir} librx]
	if { $librx != "" } {
	    append flags "-L${librx} "
	}
    }
    return "$flags"
}

#
# Get the list of directories and -m options for gcc. This is kinda bogus that
# generic testing software needs support for gcc hardwired in, but to make
# testing the GNU tools work right, there didn't seem to be any other way.
#

proc get_multilibs { args } {
    global target_alias
    global board
    global board_info

    # if we're on a remote host, we can't search for the file, so we can only
    # use an installed compiler, so we don't add any paths here.
    if [is_remote host] {
	return ""
    }

    if [info exists board] {
	set target_board $board
    } else {
	set target_board [target_info name]
    }

    if { [llength $args] == 0 } {
	if [board_info $target_board exists multitop] {
	    return "[board_info $target_board multitop]"
	}

	set board_info($target_board,multitop) ""
    }

    if { [board_info $target_board exists compiler] } {
	set compiler [board_info $target_board compiler]
    } else {
	set compiler [find_gcc]
    }

    if { $compiler == "" } {
	return ""
    }

    foreach x "$compiler" {
	if [regexp "^-B" "$x"] {
	    regsub "^-B" "$x" "" comp_base_dir
	    set comp_base_dir [file dirname $comp_base_dir]
	    break
	}
    }

    regexp "/.* " $compiler compiler
    set compiler [string trimright $compiler " "]
    verbose "compiler is $compiler"

    if { [which $compiler] == 0 } {
	return ""
    }

    if { [board_info $target_board exists multilib_flags] } {
	set mopts [board_info $target_board multilib_flags]
    } else {
	set mopts ""
    }

    set default_multilib [exec $compiler --print-multi-lib]
    set default_multilib [lindex $default_multilib 0]
    set extra [string trimleft $default_multilib ".;@@@@"]

    # extract the options and their directory names as know by gcc
    foreach i "[exec $compiler --print-multi-lib]" {
    	if {$extra != ""} {
          # string trimright would do the wrong thing if we included
          # the leading @@@@ in $extra
 	  set i [string trimright $i $extra]
          set i [string trimright $i "@@@@"]
	}
	set opts ""
	set dir ""
	regexp -- "\[a-z0-9=/\.-\]*;" $i dir
	set dir [string trimright $dir "\;@@"]
	regexp -- "\;@@*\[\@@a-zA-Z0-9=/\.-\]*" $i opts
	set opts [split [string trimleft $opts "\;@@@@"] "@@@@"]
	lappend multilibs "$dir {$opts }"

	# If args contains arguments don't use the first one as
	# multilib option unless it qualifies as a multilib option.
	if { [llength $args] > 0 } {
	    set override_opt [lindex $args 0]
	    foreach j $opts {
	        if {$j == $override_opt} {
	    	    set mopts $override_opt
	        }
	    }
	}
    }

    regsub "^-" $mopts "" moptions
    regsub -all " -" $moptions " " dirty_moptions
    set moptions ""
    foreach x [split $dirty_moptions " "] {
	if { $x != "" && [lsearch -exact $moptions $x] < 0 } {
	    lappend moptions $x
	}
    }

    if ![info exists comp_base_dir] {
	set comp_base_dir [file dirname [file dirname [file dirname [file dirname [file dirname [exec $compiler --print-prog-name=cc1]]]]]]
    }

    # search for the top level multilib directory
    set multitop [lookfor_file "${comp_base_dir}" "${target_alias}"]
    if { $multitop == "" } {
	set multitop [lookfor_file "${comp_base_dir}" "libraries"]
	if { $multitop == "" } {
	    set multitop "[lookfor_file ${comp_base_dir} gcc/xgcc]"
	    if { $multitop != "" } {
		set multitop [file dirname [file dirname $multitop]]
	    } else {
		return ""
	    }
	}
    }

    set gccpath [eval exec "$compiler" --print-multi-directory $mopts]
    set gccpath [lindex $gccpath 0]
    if { $gccpath != "" } {
	verbose "GCC path is $gccpath"
	if { [llength $args] == 0 } {
	    set board_info($target_board,multitop) "$multitop/$gccpath"
	}
	return "$multitop/$gccpath"
    }

    # extract the MULTILIB_MATCHES from dumpspecs
    set multimatches ""
    set lines [split [exec $compiler -dumpspecs] "\n"] 
    for {set i 0} {$i <= [llength $lines] - 1} {incr i 1} {
	if {"*multilib_matches:" == "[lindex $lines $i]"} {
	    set multimatches [lindex $lines [expr $i + 1]]
	    break
	}
    }
    # if we find some
    if {$multimatches != ""} {
	# Split it into a list of pairs. If an moptions are the first
	# of a pair, then replace it with the second.  If an moption
	# is not in multimatches, we assume it's not a multilib option

	set splitmatches [split $multimatches ";"]
	set multimatches ""
	foreach i $splitmatches {
	    lappend multimatches [split $i " "]
	}
	verbose "multimatches: $multimatches" 3

	verbose "options before multimatches: $moptions" 3
	set toptions $moptions
	set moptions ""
	foreach i $toptions {
	    foreach j $multimatches {
		verbose "comparing [lindex $j 0] == $i" 3
		if {[lindex $j 0] == $i} {
		    lappend moptions [lindex $j 1]
		}
	    }
	}
	verbose "options after multimatches: $moptions" 3
    }

    # make a list of -m<foo> options from the various compiler config variables
    set gccpath ""

    # compare the lists of gcc options with the list of support multilibs
    verbose "Supported multilibs are: $multilibs" 3
    set best 0;
    foreach i "$multilibs" {
	set hits 0
	set opts [lindex $i 1];
	if { [llength $opts] <= [llength $moptions] } {
	    foreach j "$moptions" {
		# see if all the -m<foo> options match any of the multilibs
		verbose "Looking in $i for $j" 3
		if { [lsearch -exact $opts $j] >= 0 } {
		    incr hits
		}
	    }

	    if { $hits > $best } {
		verbose "[lindex $i 0] is better, using as gcc path" 2
		set gccpath "[lindex $i 0]"
		set best $hits;
	    }
	}
    }
    if ![info exists multitop] {
	return "";
    }

    verbose "gccpath is $gccpath" 3

    if [file exists $multitop/$gccpath] {
	verbose "GCC path is $multitop/$gccpath" 3
	if { [llength $args] == 0 } {
	    set board_info($target_board,multitop) "$multitop/$gccpath"
	}
	return "$multitop/$gccpath"
    } else {
	verbose "GCC path is $multitop" 3
	if { [llength $args] == 0 } {
	    set board_info($target_board,multitop) "$multitop"
	}
	return "$multitop"
    }
}

proc find_binutils_prog { name } {
    global tool_root_dir;

    if ![is_remote host] {
    
	set file [lookfor_file $tool_root_dir $name];
	if { $file == "" } {
	    set file [lookfor_file $tool_root_dir ${name}-new];
	}
	if { $file == "" } {
	    set file [lookfor_file $tool_root_dir binutils/$name];
	}
	if { $file == "" } {
	    set file [lookfor_file $tool_root_dir binutils/${name}-new];
	}
	if { $file != "" } {
	    set NAME "$file";
	} else {
	    set NAME [transform $name];
	}
    } else {
	set NAME [transform $name]
    }
    return $NAME;
}

proc find_gcc {} {
    global tool_root_dir

    if ![is_remote host] {
	set file [lookfor_file $tool_root_dir xgcc];
	if { $file == "" } {
	    set file [lookfor_file $tool_root_dir gcc/xgcc];
	}
	if { $file != "" } {
	    set CC "$file -B[file dirname $file]/";
	} else {
	    set CC [transform gcc];
	}
    } else {
	set CC [transform gcc]
    }
    return $CC;
}

proc find_gcj {} {
    global tool_root_dir

    if ![is_remote host] {
	set file [lookfor_file $tool_root_dir gcj];
	if { $file == "" } {
	    set file [lookfor_file $tool_root_dir gcc/gcj];
	}
	if { $file != "" } {
	    set CC "$file -B[file dirname $file]/";
	} else {
	    set CC [transform gcj];
	}
    } else {
	set CC [transform gcj]
    }
    return $CC;
}

proc find_g++ {} {
    global tool_root_dir

    if ![is_remote host] {
	set file [lookfor_file $tool_root_dir g++];
	if { $file == "" } {
	    set file [lookfor_file $tool_root_dir gcc/g++];
	}
	if { $file != "" } {
	    set CC "$file -B[file dirname $file]/";
	} else {
	    set CC [transform g++];
	}
    } else {
	set CC [transform g++]
    }
    return $CC;
}

proc find_g77 {} {
    global tool_root_dir

    if ![is_remote host] {
	set file [lookfor_file $tool_root_dir g77];
	if { $file == "" } {
	    set file [lookfor_file $tool_root_dir gcc/g77];
	}
	if { $file != "" } {
	    set CC "$file -B[file dirname $file]/";
	} else {
	    set CC [transform g77];
	}
    } else {
	set CC [transform g77]
    }
    return $CC;
}

proc find_nm {} {
    global tool_root_dir

    set NM ""
    if ![is_remote host] {
	set NM [lookfor_file $tool_root_dir nm-new]
	if {$NM == ""} {
 	    set NM [lookfor_file $tool_root_dir binutils/nm-new]
	}
    }
    if { $NM == ""} {
	set NM [transform nm];
    }
    return $NM;
}

proc process_multilib_options { args } {
    global board;
    global board_variant_list;
    global is_gdb_remote;

    set is_gdb_remote 0;

    if [board_info $board exists multilib_flags] {
	return;
    }
    eval add_multilib_option $args;

    set multilib_flags "";

    foreach x $board_variant_list {
	regsub -all "^\[ \t\]*" "$x" "" x;
	regsub -all "\[ \t\]*$" "$x" "" x;

	if { $x == "" } {
	    continue;
	}
	case $x in {
	    { aout } {
		set_board_info obj_format "a.out";
	    }
	    { elf } {
		set_board_info obj_format "elf";
	    }
	    { pe } {
		set_board_info obj_format "pe";
	    }
	    { ecoff } {
		set_board_info obj_format "ecoff";
	    }
	    { stabs } {
		set_board_info debug_flags "-gstabs";
	    }
	    { dwarf2 } {
		set_board_info debug_flags "-gdwarf2";
	    }
	    { gdb:*=* } {
		regsub "^gdb:\[^=\]*=(.*)$" "$x" "\\1" value;
		regsub "^gdb:(\[^=\]*)=.*$" "$x" "\\1" variable;
		set_board_info $variable "$value";
	    }
	    { gdb*remote } {
		set is_gdb_remote 1;
	    }
	    { little*endian el EL } {
		append multilib_flags " -EL";
	    }
	    { big*endian eb EB } {
		append multilib_flags " -EB";
	    }
	    { "soft*float" } {
		append multilib_flags " -msoft-float"
	    }
	    { "-*" } {
		append multilib_flags " $x";
	    }
	    default {
		append multilib_flags " -m$x";
	    }
	}
    }
    set_board_info multilib_flags $multilib_flags;
}

proc add_multilib_option { args } {
    global board_variant_list

    if ![info exists board_variant_list] {
	set board_variant_list ""
    }
    set board_variant_list [concat $args $board_variant_list];
}

proc find_gas { } {
    global tool_root_dir

    set AS ""

    if ![is_remote host] {
	set AS [lookfor_file $tool_root_dir as-new];
	if { $AS == "" } {
	    set AS [lookfor_file $tool_root_dir gas/as-new];
	}
    }
    if { $AS == "" } {
	set AS [transform as];
    }
    return $AS;
}

proc find_ld { } {
    global tool_root_dir

    set LD ""

    if ![is_remote host] {
	set LD [lookfor_file $tool_root_dir ld-new];
	if { $LD == "" } {
	    set LD [lookfor_file $tool_root_dir ld/ld-new];
	}
    }
    if { $LD == "" } {
	set LD [transform ld];
    }
    return $LD;
}

proc build_wrapper { gluefile } {
    global libdir
    global tool

    if [target_info exists wrap_m68k_aout] {
	set flags "additional_flags=-DWRAP_M68K_AOUT";
	set result "";
    } elseif [target_info exists uses_underscores] {
	set flags "additional_flags=-DUNDERSCORES";
	set result "-Wl,-wrap,__exit -Wl,-wrap,_main -Wl,-wrap,_abort";
    } else {
	set flags "";
	if [target_info exists is_vxworks] {
	    set flags "additional_flags=-DVXWORKS";
	    set result "-Wl,-wrap,exit -Wl,-wrap,main -Wl,-wrap,abort";
	} else {
	    set result "-Wl,-wrap,exit -Wl,-wrap,_exit -Wl,-wrap,main -Wl,-wrap,abort";
	}
    }
    if [target_info exists wrap_compile_flags] {
	lappend flags "additional_flags=[target_info wrap_compile_flags]";
    }
    if { [target_compile ${libdir}/testglue.c ${gluefile} object $flags] == "" } {
      set gluefile [remote_download host ${gluefile} ${tool}_tg.o];
	return [list $gluefile $result];
    } else {
	return ""
    }
}


proc winsup_include_flags { args } {
    global srcdir

    if [isnative] {
	return ""
    }

    if [is_remote host] {
	return ""
    }

    set gccpath "[get_multilibs]"

    if [file exists $gccpath/winsup] {
	verbose "Winsup path is $gccpath/winsup"

	set winsup_dir [lookfor_file ${srcdir} winsup/include/windows.h]
	if { ${winsup_dir} != "" } {
	    set winsup_dir [file dirname ${winsup_dir}]
	    # See comment in libio_include_flags about using -I.
	    return " -I${winsup_dir}"
	}
    }
    verbose "No winsup support for this target"
    
}
#
# Find the winsup libraries in the current source tree.
#
proc winsup_link_flags { args } {
    # libgloss doesn't work native
    if [isnative] {
	return ""
    }

    # if we're on a remote host, we can't search for the file, so we can only
    # use an installed compiler, so we don't add any paths here.
    if [is_remote host] {
	return ""
    }

    set gccpath "[get_multilibs]"

    verbose "Looking for $gccpath/winsup"
    if [file exists $gccpath/winsup] {
	verbose "Winsup path is $gccpath/newlib"
	return "-B$gccpath/winsup/ -L$gccpath/winsup"
    } else {
	verbose "No winsup support for this target"
	return ""
    }
}
@


1.13
log
@oops - fix typo in previous delta, update copyright year and remove spurious semicolons
@
text
@@


1.12
log
@(libio_include_flags, g++_include_flags, winsup_include_flags): Revert previous
patch, restoring the use of -I, for all libraries except newlib.  Newlib needs
-isystem to avoid the problems with <limits.h> but the C++ and winsup libraries
need -I because -isystem generates an implicit 'extern "C"' which may not be
appropriate for certain targets.
@
text
@d1 1
a1 1
# Copyright (C) 1992, 93, 94, 95, 96, 97, 98, 1999, 2000, 2002, 2003
d123 1
a123 1
    set ld_script_path [lookfor_file ${tool_root_dir} "ld/ldscripts"];
d185 1
a185 1
	set gccpath "$tool_root_dir";
d188 1
a188 1
    set libio_bin_dir [lookfor_file ${gccpath} libio/_G_config.h];
d193 1
a193 1
	set libio_bin_dir [lookfor_file ${gccpath} libio/iostream.list];
d199 1
a199 1
	set libio_bin_dir [file dirname ${libio_bin_dir}];
d241 1
a241 1
	append flags " -I${dir} I${dir}/src"
d266 1
a266 1
    set gccpath [get_multilibs];
d294 1
a294 1
	global tool_root_dir;
d296 1
a296 1
	set libgpp [lookfor_file ${tool_root_dir} libg++];
d298 1
a298 1
	    append flags "-L${libgpp} ";
d301 1
a301 1
	set libstdcpp [lookfor_file ${tool_root_dir} libstdc++];
d303 1
a303 1
	    append flags "-L${libstdcpp} ";
d306 1
a306 1
	set libiberty [lookfor_file ${tool_root_dir} libiberty];
d308 1
a308 1
	    append flags "-L${libiberty} ";
d310 1
a310 1
	set librx [lookfor_file ${tool_root_dir} librx];
d312 1
a312 1
	    append flags "-L${librx} ";
d355 1
a355 1
    set gccpath [get_multilibs];
d371 1
a371 1
	global tool_root_dir;
d373 1
a373 1
	set libstdcpp [lookfor_file ${tool_root_dir} libstdc++];
d375 1
a375 1
	    append flags "-L${libstdcpp} ";
d378 1
a378 1
	set libiberty [lookfor_file ${tool_root_dir} libiberty];
d380 1
a380 1
	    append flags "-L${libiberty} ";
d382 1
a382 1
	set librx [lookfor_file ${tool_root_dir} librx];
d384 1
a384 1
	    append flags "-L${librx} ";
d408 1
a408 1
	set target_board $board;
d410 1
a410 1
	set target_board [target_info name];
d415 1
a415 1
	    return "[board_info $target_board multitop]";
d422 1
a422 1
	set compiler [board_info $target_board compiler];
d424 1
a424 1
	set compiler [find_gcc];
d428 1
a428 1
	return "";
d433 3
a435 3
	    regsub "^-B" "$x" "" comp_base_dir;
	    set comp_base_dir [file dirname $comp_base_dir];
	    break;
d444 1
a444 1
	return "";
d448 1
a448 1
	set mopts [board_info $target_board multilib_flags];
d454 1
a454 1
    set default_multilib [lindex $default_multilib 0];
d495 1
a495 1
	set comp_base_dir [file dirname [file dirname [file dirname [file dirname [file dirname [exec $compiler --print-prog-name=cc1]]]]]];
d505 1
a505 1
		set multitop [file dirname [file dirname $multitop]];
d512 2
a513 2
    set gccpath [eval exec "$compiler" --print-multi-directory $mopts];
    set gccpath [lindex $gccpath 0];
d515 1
a515 1
	verbose "GCC path is $gccpath";
d519 1
a519 1
	return "$multitop/$gccpath";
d524 1
a524 1
    set lines [split [exec $compiler -dumpspecs] "\n"]  
@


1.11
log
@Hans-Peter Nilsson  <hp@@bitrange.com>

        * lib/libgloss.exp (newlib_include_flags): Use -isystem, not -I.
        (libio_include_flags, g++_include_flags, libstdc++_include_flags,
        winsup_include_flags): Ditto.
        * doc/user.sgml (Local Config File): Use -isystem, not -I, in
        example.
@
text
@d162 6
d200 6
a205 1
	return " -isystem ${libio_src_dir} -isystem ${libio_bin_dir}"
d240 2
a241 1
	append flags " -isystem ${dir} -isystem ${dir}/src"
d246 1
a246 1
	append flags " -isystem ${dir}/include -isystem ${dir}/include/std -isystem ${dir}/include/c_std -isystem ${dir}/libsupc++"
d251 1
a251 1
	append flags " -isystem ${dir}/include -isystem ${dir}/include/${target_alias}"
d256 1
a256 1
	append flags " -isystem ${dir} -isystem ${dir}/stl"
d332 2
a333 1
	append flags " -isystem ${dir}/include -isystem ${dir}/include/std -isystem ${dir}/include/c_std -isystem ${dir}/libsupc++"
d340 1
a340 1
	append flags " -isystem ${dir}/include -isystem ${dir}/include/${target_alias}"
d345 1
a345 1
	append flags " -isystem ${dir} -isystem ${dir}/stl"
d883 2
a884 1
	    return " -isystem ${winsup_dir}"
@


1.10
log
@(get_multilibs): Don't use the first argument passed to this function as the
multilib option unless it is in	fact a multilib option.
@
text
@d162 1
a162 1
	return " -I$gccpath/newlib/targ-include -I${newlib_dir}"
d194 1
a194 1
	return " -I${libio_src_dir} -I${libio_bin_dir}"
d229 1
a229 1
	append flags " -I${dir} -I${dir}/src"
d234 1
a234 1
	append flags " -I${dir}/include -I${dir}/include/std -I${dir}/include/c_std -I${dir}/libsupc++"
d239 1
a239 1
	append flags " -I${dir}/include -I${dir}/include/${target_alias}"
d244 1
a244 1
	append flags " -I${dir} -I${dir}/stl"
d320 1
a320 1
	append flags " -I${dir}/include -I${dir}/include/std -I${dir}/include/c_std -I${dir}/libsupc++"
d327 1
a327 1
	append flags " -I${dir}/include -I${dir}/include/${target_alias}"
d332 1
a332 1
	append flags " -I${dir} -I${dir}/stl"
d379 1
a379 1
# generic testing software needs support for gcc hardwired in, but to make 
d870 1
a870 1
	    return " -I${winsup_dir}"
@


1.9
log
@* lib/libgloss.exp (build_wrapper): Use a tool-specific filename on
the host for the testglue.
@
text
@d1 1
a1 1
# Copyright (C) 1992, 93, 94, 95, 96, 97, 98, 1999, 2000, 2002
d425 11
a435 2
    if { [llength $args] > 0 } {
	set mopts [lindex $args 0];
d437 32
a468 4
	if { [board_info $target_board exists multilib_flags] } {
	    set mopts [board_info $target_board multilib_flags];
	} else {
	    set mopts ""
a480 8
    regexp "/.* " $compiler compiler
    set compiler [string trimright $compiler " "]
    verbose "compiler is $compiler"

    if { [which $compiler] == 0 } {
	return "";
    }

a506 22
    }

    # set output [exec $objdump_name --file-headers objfmtst.o ]
    set default_multilib [exec $compiler --print-multi-lib]
    set default_multilib [lindex $default_multilib 0];
    set extra [string trimleft $default_multilib ".;@@@@"]

    # extract the options and their directory names as know by gcc
    foreach i "[exec $compiler --print-multi-lib]" {
    	if {$extra != ""} {
          # string trimright would do the wrong thing if we included
          # the leading @@@@ in $extra
 	  set i [string trimright $i $extra"]
          set i [string trimright $i "@@@@"]
	}
	set opts ""
	set dir ""
	regexp -- "\[a-z0-9=/\.-\]*;" $i dir
	set dir [string trimright $dir "\;@@"]
	regexp -- "\;@@*\[\@@a-zA-Z0-9=/\.-\]*" $i opts
	set opts [split [string trimleft $opts "\;@@@@"] "@@@@"]
	lappend multilibs "$dir {$opts }"
@


1.9.2.1
log
@Merge drow-cplus-branch to:
  cvs rtag -D 2003-12-14 00:00:00 UTC drow-cplus-merge-20031214 gdb+dejagnu
@
text
@d1 1
a1 1
# Copyright (C) 1992, 93, 94, 95, 96, 97, 98, 1999, 2000, 2002, 2003
d425 2
a426 11

    regexp "/.* " $compiler compiler
    set compiler [string trimright $compiler " "]
    verbose "compiler is $compiler"

    if { [which $compiler] == 0 } {
	return "";
    }

    if { [board_info $target_board exists multilib_flags] } {
	set mopts [board_info $target_board multilib_flags];
d428 4
a431 32
	set mopts ""
    }

    set default_multilib [exec $compiler --print-multi-lib]
    set default_multilib [lindex $default_multilib 0];
    set extra [string trimleft $default_multilib ".;@@@@"]

    # extract the options and their directory names as know by gcc
    foreach i "[exec $compiler --print-multi-lib]" {
    	if {$extra != ""} {
          # string trimright would do the wrong thing if we included
          # the leading @@@@ in $extra
 	  set i [string trimright $i $extra]
          set i [string trimright $i "@@@@"]
	}
	set opts ""
	set dir ""
	regexp -- "\[a-z0-9=/\.-\]*;" $i dir
	set dir [string trimright $dir "\;@@"]
	regexp -- "\;@@*\[\@@a-zA-Z0-9=/\.-\]*" $i opts
	set opts [split [string trimleft $opts "\;@@@@"] "@@@@"]
	lappend multilibs "$dir {$opts }"

	# If args contains arguments don't use the first one as
	# multilib option unless it qualifies as a multilib option.
	if { [llength $args] > 0 } {
	    set override_opt [lindex $args 0]
	    foreach j $opts {
	        if {$j == $override_opt} {
	    	    set mopts $override_opt
	        }
	    }
d444 8
d478 22
@


1.8
log
@Synchronise with sources from savanaha repository
@
text
@d815 1
d836 1
a836 1
	set gluefile [remote_download host ${gluefile} testglue.o];
@


1.8.4.1
log
@Merge with kseitz_interps-20020930-merge.
@
text
@a814 1
    global tool
d835 1
a835 1
      set gluefile [remote_download host ${gluefile} ${tool}_tg.o];
@


1.8.14.1
log
@Merge with mainline; tag is carlton_dictionary-20020927-merge
@
text
@a814 1
    global tool
d835 1
a835 1
      set gluefile [remote_download host ${gluefile} ${tool}_tg.o];
@


1.8.14.2
log
@2003-03-05  David Carlton  <carlton@@math.stanford.edu>

	* Merge with mainline.  Tag is carlton_dictionary-20030305-merge.
@
text
@d1 1
a1 1
# Copyright (C) 1992, 93, 94, 95, 96, 97, 98, 1999, 2000, 2002, 2003
d425 2
a426 11

    regexp "/.* " $compiler compiler
    set compiler [string trimright $compiler " "]
    verbose "compiler is $compiler"

    if { [which $compiler] == 0 } {
	return "";
    }

    if { [board_info $target_board exists multilib_flags] } {
	set mopts [board_info $target_board multilib_flags];
d428 4
a431 32
	set mopts ""
    }

    set default_multilib [exec $compiler --print-multi-lib]
    set default_multilib [lindex $default_multilib 0];
    set extra [string trimleft $default_multilib ".;@@@@"]

    # extract the options and their directory names as know by gcc
    foreach i "[exec $compiler --print-multi-lib]" {
    	if {$extra != ""} {
          # string trimright would do the wrong thing if we included
          # the leading @@@@ in $extra
 	  set i [string trimright $i $extra]
          set i [string trimright $i "@@@@"]
	}
	set opts ""
	set dir ""
	regexp -- "\[a-z0-9=/\.-\]*;" $i dir
	set dir [string trimright $dir "\;@@"]
	regexp -- "\;@@*\[\@@a-zA-Z0-9=/\.-\]*" $i opts
	set opts [split [string trimleft $opts "\;@@@@"] "@@@@"]
	lappend multilibs "$dir {$opts }"

	# If args contains arguments don't use the first one as
	# multilib option unless it qualifies as a multilib option.
	if { [llength $args] > 0 } {
	    set override_opt [lindex $args 0]
	    foreach j $opts {
	        if {$j == $override_opt} {
	    	    set mopts $override_opt
	        }
	    }
d444 8
d478 22
@


1.7
log
@wrap _exit() in tesglue.c
@
text
@d483 1
a483 1
    set extra [string trimleft $default_multilib "."]
d488 4
a491 1
	  set i [string trimright $i $extra"]
d498 1
a498 1
	set opts [split [string trimleft $opts "\;@@"] "@@"]
@


1.6
log
@* lib/libgloss.exp [get_multilibs]: Compute multitop earlier, and
use --print-multi-directory if available.
@
text
@d823 3
a826 1
	set result "-Wl,-wrap,exit -Wl,-wrap,main -Wl,-wrap,abort";
@


1.5
log
@Add top level libstdc++-v3 build include path,
@
text
@d456 24
a532 14
    }

    # search for the top level multilib directory
    set multitop [lookfor_file "${comp_base_dir}" "${target_alias}"]
    if { $multitop == "" } {
	set multitop [lookfor_file "${comp_base_dir}" "libraries"]
	if { $multitop == "" } {
	    set multitop "[lookfor_file ${comp_base_dir} gcc/xgcc]"
	    if { $multitop != "" } {
		set multitop [file dirname [file dirname $multitop]];
	    } else {
		return ""
	    }
	}
@


1.4
log
@Add libstdc++-v3 include paths.
@
text
@d239 1
a239 1
	append flags " -I${dir}/include/${target_alias}"
a241 5
    set dir [lookfor_file ${srcdir} libstdc++-v3]
    if { ${dir} != "" } {
	append flags " -I${dir}/include -I${dir}/include/std"
    }
    
d327 1
a327 1
	append flags " -I${dir}/include/${target_alias}"
@


1.3
log
@2001-11-19  Elena Zannoni  <ezannoni@@redhat.com>

	* lib/libgloss.exp (g++_link_flags): Libstdc++ is now in
	libstdc++-v3/src/.libs.
@
text
@d1 2
a2 1
# Copyright (C) 92, 93, 94, 95, 96, 97, 98, 1999 Free Software Foundation, Inc.
d74 3
d217 1
d229 16
a244 1
	append flags "-I${dir} -I${dir}/src "
d246 1
d249 1
a249 1
	append flags "-I${dir} -I${dir}/stl"
d251 1
d313 1
d323 12
d337 1
a337 1
	append flags "-I${dir} -I${dir}/stl"
d339 1
@


1.2
log
@	* lib/libgloss.exp (proc_get_multilibs):  Handle multilib
        pathnames for ports that have defined MULTILIB_EXTRA_OPTS.
@
text
@d254 4
@


1.1
log
@Initial revision
@
text
@d421 5
d428 3
@


1.1.1.1
log
@import dejagnu-1999-11-08 snapshot
@
text
@@
