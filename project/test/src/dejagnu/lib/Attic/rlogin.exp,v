head	1.3;
access;
symbols
	msnyder-tracepoint-checkpoint-branch:1.2.0.50
	msnyder-tracepoint-checkpoint-branchpoint:1.2
	ezannoni_pie-20040323-branch:1.2.0.48
	ezannoni_pie-20040323-branchpoint:1.2
	cagney_tramp-20040321-mergepoint:1.2
	cagney_tramp-20040309-branch:1.2.0.46
	cagney_tramp-20040309-branchpoint:1.2
	gdb_6_1-branch:1.2.0.44
	gdb_6_1-2004-03-01-gmt-branchpoint:1.2
	drow-cplus-merge-20040208:1.2
	carlton_dictionary-20040126-merge:1.2
	drow-cplus-merge-20040113:1.2
	drow-cplus-merge-20031224:1.2
	drow-cplus-merge-20031220:1.2
	carlton_dictionary-20031215-merge:1.2
	drow-cplus-merge-20031214:1.2
	carlton-dictionary-20031111-merge:1.2
	carlton_dictionary-20030917-merge:1.2
	ezannoni_pie-20030916-branchpoint:1.2
	ezannoni_pie-20030916-branch:1.2.0.42
	cagney_x86i386-20030821-branch:1.2.0.40
	cagney_x86i386-20030821-branchpoint:1.2
	carlton_dictionary-20030805-merge:1.2
	carlton_dictionary-20030627-merge:1.2
	gdb_6_0-branch:1.2.0.38
	gdb_6_0-2003-06-23-branchpoint:1.2
	cagney_convert-20030606-branch:1.2.0.36
	cagney_convert-20030606-branchpoint:1.2
	cagney_writestrings-20030508-branch:1.2.0.34
	cagney_writestrings-20030508-branchpoint:1.2
	carlton_dictionary-20030523-merge:1.2
	cagney_fileio-20030521-branch:1.2.0.32
	cagney_fileio-20030521-branchpoint:1.2
	carlton_dictionary-20030430-merge:1.2
	carlton_dictionary-20030416-merge:1.2
	cagney_frameaddr-20030409-mergepoint:1.2
	cagney_frameaddr-20030403-branchpoint:1.2
	cagney_frameaddr-20030403-branch:1.2.0.30
	cagney_framebase-20030330-mergepoint:1.2
	cagney_framebase-20030326-branch:1.2.0.28
	cagney_framebase-20030326-branchpoint:1.2
	cagney_lazyid-20030317-branch:1.2.0.26
	cagney_lazyid-20030317-branchpoint:1.2
	offbyone-20030313-branch:1.2.0.24
	offbyone-20030313-branchpoint:1.2
	carlton_dictionary-20030305-merge:1.2
	cagney_offbyone-20030303-branch:1.2.0.22
	cagney_offbyone-20030303-branchpoint:1.2
	carlton_dictionary-20030207-merge:1.2
	interps-20030202-branch:1.2.0.20
	interps-20030202-branchpoint:1.2
	cagney-unwind-20030108-branch:1.2.0.18
	cagney-unwind-20030108-branchpoint:1.2
	carlton_dictionary-20021223-merge:1.2
	carlton_dictionary-20021115-merge:1.2
	kseitz_interps-20021105-merge:1.2
	kseitz_interps-20021103-merge:1.2
	drow-cplus-merge-20021020:1.2
	drow-cplus-merge-20021025:1.2
	carlton_dictionary-20021025-merge:1.2
	carlton_dictionary-20021011-merge:1.2
	drow-cplus-branch:1.2.0.16
	drow-cplus-branchpoint:1.2
	kseitz_interps-20020930-merge:1.2
	carlton_dictionary-20020927-merge:1.2
	carlton_dictionary-branch:1.2.0.14
	carlton_dictionary-20020920-branchpoint:1.2
	sid-20020905-branchpoint:1.2
	sid-20020905-branch:1.2.0.12
	gdb_5_3-branch:1.2.0.10
	gdb_5_3-2002-09-04-branchpoint:1.2
	kseitz_interps-20020829-merge:1.2
	cagney_sysregs-20020825-branch:1.2.0.8
	cagney_sysregs-20020825-branchpoint:1.2
	readline_4_3-import-branch:1.2.0.6
	readline_4_3-import-branchpoint:1.2
	kseitz_interps-20020528-branch:1.2.0.4
	kseitz_interps-20020528-branchpoint:1.2
	cagney_regbuf-20020515-branch:1.2.0.2
	cagney_regbuf-20020515-branchpoint:1.2
	gdb_5_2-branch:1.1.1.1.0.10
	gdb_5_2-2002-03-03-branchpoint:1.1.1.1
	cygnus_cvs_20020108_pre:1.1.1.1
	gdb_5_1_0_1-2002-01-03-branch:1.1.1.1.0.8
	gdb_5_1_0_1-2002-01-03-branchpoint:1.1.1.1
	gdb_5_1-2001-11-21-release:1.1.1.1
	gdb_s390-2001-09-26-branch:1.1.1.1.0.6
	gdb_s390-2001-09-26-branchpoint:1.1.1.1
	gdb_5_1-2001-07-29-branch:1.1.1.1.0.4
	gdb_5_1-2001-07-29-branchpoint:1.1.1.1
	gdb_5_0-2000-05-19-release:1.1.1.1
	gdb_4_18_2-2000-05-18-release:1.1.1.1
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.1
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.1
	gdb_5_0-2000-04-10-branch:1.1.1.1.0.2
	gdb_5_0-2000-04-10-branchpoint:1.1.1.1
	repo-unification-2000-02-06:1.1.1.1
	dejagnu-2000-02-04:1.1.1.1
	dejagnu-2000-01-31:1.1.1.1
	dejagnu-2000-01-24:1.1.1.1
	dejagnu-2000-01-17:1.1.1.1
	dejagnu-2000-01-10:1.1.1.1
	dejagnu-2000-01-04:1.1.1.1
	dejagnu-1999-12-21:1.1.1.1
	dejagnu-1999-12-13:1.1.1.1
	dejagnu-1999-12-07:1.1.1.1
	dejagnu-1999-12-06:1.1.1.1
	dejagnu-1999-11-15:1.1.1.1
	dejagnu-1999-11-08:1.1.1.1
	SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.3
date	2005.06.29.01.58.56;	author bje;	state dead;
branches;
next	1.2;

1.2
date	2002.04.21.08.47.07;	author nickc;	state Exp;
branches;
next	1.1;

1.1
date	99.11.09.01.28.42;	author jsm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.11.09.01.28.42;	author jsm;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Remove old version of DejaGnu.
@
text
@# Copyright (C) 1992 - 2000, 2001 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  

# Please email any bugs, comments, and/or additions to this file to:
# bug-dejagnu@@gnu.org

#
# Connect to ARG using rlogin. This is for systems using rlogin to
# braindead targets. It returns either the spawn_id or a -1.
#

proc rlogin_open { arg } {
    global board_info

    set tries 0
    set result -1

    if [board_info $arg exists fileid] {
	return [board_info $arg fileid];
    }

    # get the hostname and port number from the config array
    if [board_info $arg exists netport] {
	set hostname [lindex [split [board_info $arg netport] ":"] 0]
    } else {
	set hostname $arg
    }

    if ![board_info $arg exists shell_prompt] {
	# if no prompt, then set it to something generic
	set shell_prompt ".*> "
    } else {
	set shell_prompt [board_info $arg shell_prompt]
    }
 
    if [board_info $arg exists fileid] {
	unset board_info($arg,fileid);
    }
    # get the right version of rlogin
    if ![board_info $arg exists rlogin_prog] {
	set RLOGIN rlogin
    } else {
	set RLOGIN [board_info $arg rlogin_prog];
    }
    
    # start connection and store the spawn_id
    verbose "Opening a $RLOGIN connection to $hostname" 2
    spawn $RLOGIN $hostname
    if { $spawn_id < 0 } {
	perror "invalid spawn id from rlogin"
	return
    }
    set board_info($arg,fileid) $spawn_id
    
    # Try to connect to the target. We give up after 3 attempts.
    while { $tries <= 3 } {
	expect {
	    -re ".*$shell_prompt.*$" {
		verbose "Got prompt\n"
		set result 0
		break
	    }
	    -re "TERM = .*\\)\[ ]*$" {
		send "dumb\r\n"
		expect {
		    "Terminal type is*$" {
			verbose "rlogin: set the terminal to dumb" 2
		    }
		    default {
			warning "rlogin: couldn't set terminmal type"
		    }
		}
		set result 10
		break
	    }
	    "unknown host" {
		perror "rlogin: unknown host"
		break
	    }
	    "has logged on from" {
		exp_continue
	    }
	    "Terminal type is" {
		verbose "rlogin: connected, got terminal prompt" 2
		set result 0
		break
	    }
	    -re "Maximum number of users already logged in.*$" {
		warning "rlogin: maximum number of users already logged in"
	    }
	    -re "Sorry, shell is locked.*Connection closed.*$" {
		warning "rlogin: lready connected."
	    }
	    -re "Sorry, this system is engaged.*Connection closed.*$" {
		warning "rlogin: system engaged."
	    }
	    timeout	{ 
		warning "rlogin: timed out trying to connect."
	    }
	    eof {
		perror "rlogin: got EOF while trying to connect."
		break
	    }
	}
	incr tries
    }

    # see if we maxed out on errors
    if { $result < 0 } {
	catch "close -i $spawn_id"
	catch "wait -i $spawn_id"
	set spawn_id -1
    } else {
	verbose "rlogin: connected to $hostname" 2
    }

    return $spawn_id
}

#
# Start CMDLINE running on DEST. Return the shell_id associated with
# the command.
#
proc rlogin_spawn { dest cmdline } {
    if ![board_info $dest exists shell_prompt] {
	set shell_prompt "(^|\[\r\n\])\[^\r\n\]*>";
    } else {
	set shell_prompt [board_info $dest shell_prompt];
    }
    set prefix ""
    set ok 0;
    for {set i 0;} {$i <= 2 && ! $ok} {incr i;} {
	set shell_id [remote_open $dest];
	if { $shell_id != "" && $shell_id > 0 } {
	    remote_send $dest "echo k\r";
	    remote_expect $dest 20 {
		-re "\\(gdb\\)" {
		    set shell_prompt "\\(gdb\\)";
		    # gdb uses 'shell command'.
		    set prefix "shell ";
		    set ok 1;
		}
		-re ".*$shell_prompt" { 
		    set ok 1; 
		}
		default { }
	    }
	}
	if { ! $ok } {
	    remote_close $dest;
	    remote_reboot $dest;
	}
    }
    if { ! $ok } {
	return "unable to start command"
    } else {
	remote_send $dest "${prefix}${cmdline}\n";
	return [board_info $dest fileid];
    }
}
@


1.2
log
@Synchronise with sources from savanaha repository
@
text
@@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
# Copyright (C) 92, 93, 94, 95, 96, 97, 98, 1999 Free Software Foundation, Inc.
d18 1
a18 1
# bug-dejagnu@@prep.ai.mit.edu
@


1.1.1.1
log
@import dejagnu-1999-11-08 snapshot
@
text
@@
