head	1.2;
access;
symbols
	msnyder-tracepoint-checkpoint-branch:1.1.0.50
	msnyder-tracepoint-checkpoint-branchpoint:1.1
	ezannoni_pie-20040323-branch:1.1.0.48
	ezannoni_pie-20040323-branchpoint:1.1
	cagney_tramp-20040321-mergepoint:1.1
	cagney_tramp-20040309-branch:1.1.0.46
	cagney_tramp-20040309-branchpoint:1.1
	gdb_6_1-branch:1.1.0.44
	gdb_6_1-2004-03-01-gmt-branchpoint:1.1
	drow-cplus-merge-20040208:1.1
	carlton_dictionary-20040126-merge:1.1
	drow-cplus-merge-20040113:1.1
	drow-cplus-merge-20031224:1.1
	drow-cplus-merge-20031220:1.1
	carlton_dictionary-20031215-merge:1.1
	drow-cplus-merge-20031214:1.1
	carlton-dictionary-20031111-merge:1.1
	carlton_dictionary-20030917-merge:1.1
	ezannoni_pie-20030916-branchpoint:1.1
	ezannoni_pie-20030916-branch:1.1.0.42
	cagney_x86i386-20030821-branch:1.1.0.40
	cagney_x86i386-20030821-branchpoint:1.1
	carlton_dictionary-20030805-merge:1.1
	carlton_dictionary-20030627-merge:1.1
	gdb_6_0-branch:1.1.0.38
	gdb_6_0-2003-06-23-branchpoint:1.1
	cagney_convert-20030606-branch:1.1.0.36
	cagney_convert-20030606-branchpoint:1.1
	cagney_writestrings-20030508-branch:1.1.0.34
	cagney_writestrings-20030508-branchpoint:1.1
	carlton_dictionary-20030523-merge:1.1
	cagney_fileio-20030521-branch:1.1.0.32
	cagney_fileio-20030521-branchpoint:1.1
	carlton_dictionary-20030430-merge:1.1
	carlton_dictionary-20030416-merge:1.1
	cagney_frameaddr-20030409-mergepoint:1.1
	cagney_frameaddr-20030403-branchpoint:1.1
	cagney_frameaddr-20030403-branch:1.1.0.30
	cagney_framebase-20030330-mergepoint:1.1
	cagney_framebase-20030326-branch:1.1.0.28
	cagney_framebase-20030326-branchpoint:1.1
	cagney_lazyid-20030317-branch:1.1.0.26
	cagney_lazyid-20030317-branchpoint:1.1
	offbyone-20030313-branch:1.1.0.24
	offbyone-20030313-branchpoint:1.1
	carlton_dictionary-20030305-merge:1.1
	cagney_offbyone-20030303-branch:1.1.0.22
	cagney_offbyone-20030303-branchpoint:1.1
	carlton_dictionary-20030207-merge:1.1
	interps-20030202-branch:1.1.0.20
	interps-20030202-branchpoint:1.1
	cagney-unwind-20030108-branch:1.1.0.18
	cagney-unwind-20030108-branchpoint:1.1
	carlton_dictionary-20021223-merge:1.1
	carlton_dictionary-20021115-merge:1.1
	kseitz_interps-20021105-merge:1.1
	kseitz_interps-20021103-merge:1.1
	drow-cplus-merge-20021020:1.1
	drow-cplus-merge-20021025:1.1
	carlton_dictionary-20021025-merge:1.1
	carlton_dictionary-20021011-merge:1.1
	drow-cplus-branch:1.1.0.16
	drow-cplus-branchpoint:1.1
	kseitz_interps-20020930-merge:1.1
	carlton_dictionary-20020927-merge:1.1
	carlton_dictionary-branch:1.1.0.14
	carlton_dictionary-20020920-branchpoint:1.1
	sid-20020905-branchpoint:1.1
	sid-20020905-branch:1.1.0.12
	gdb_5_3-branch:1.1.0.10
	gdb_5_3-2002-09-04-branchpoint:1.1
	kseitz_interps-20020829-merge:1.1
	cagney_sysregs-20020825-branch:1.1.0.8
	cagney_sysregs-20020825-branchpoint:1.1
	readline_4_3-import-branch:1.1.0.6
	readline_4_3-import-branchpoint:1.1
	kseitz_interps-20020528-branch:1.1.0.4
	kseitz_interps-20020528-branchpoint:1.1
	cagney_regbuf-20020515-branch:1.1.0.2
	cagney_regbuf-20020515-branchpoint:1.1;
locks; strict;
comment	@# @;


1.2
date	2005.06.29.01.58.55;	author bje;	state dead;
branches;
next	1.1;

1.1
date	2002.04.21.08.47.06;	author nickc;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Remove old version of DejaGnu.
@
text
@# a hairy pattern to recognize text
set text "\[- A-Za-z0-9\.\;\"\_\:\'\`\(\)\!\#\=\+\?\&\*]"

set SIZE size
if { [which $SIZE] == 0 } {
    perror "Can't find $SIZE."
}

# Get the size of the various section in an object file
proc exe_size {object} {
    global SIZE

    # Make sure size exists
    if { [which $SIZE] == 0 } {
	return [list "-1" "Can't find $SIZE."]
    } else {
	verbose "Using $SIZE for \"size\" program." 2
    }
    set status [catch "exec $SIZE -V" output]
    if {[regexp "GNU size" $output] == 0} {
	perror "Need GNU size from the binutils" 0
	return [list "-1" "Need GNU size."]
    }
    
    # Get the object size. We pass -x, to force hex output
    verbose "Getting the object file size for $object" 2
    set status [catch "exec $SIZE -x $object" output]
    verbose -log "Size of $object is\n$output" 2

    # Remove the header line from the size output. This currently only
    # works with GNU size
    regsub "text.*filename\[\r\n\]*" $output "" output

    # look for the size of the .text section
    regexp "\[\r\n\]*0x\[0-9a-fA-F\]*" $output text
    regsub "\[\r\n\]*0x\[0-9a-fA-F\]*\[ \t\]*" $output "" output

    # look for the size of the .data section
    regexp "0x\[0-9a-fA-F\]*\[ \t\]*" $output data
    regsub "0x\[0-9a-fA-F\]*\[ \t\]*" $output "" output

    # Values returns as hex
    return [list $text $data]
}

# Run the host's native compiler, not the cross one. Filter out the 
# warnings and other extraneous stuff.
#    Returns:
#	A "" (empty) string if everything worked, or the
#       output if there was a problem.
proc host_compile {compline} {
    global INCLUDES
    global LIBS
    global CXX, CC

    # execute the compiler
    verbose "Compiling for the host using: $CC $INCLUDES $LIBS $compline" 2
    set status [catch "exec $CC $INCLUDES $LIBS $compline" comp_output];
    verbose "Compiler returned $comp_output" 2
    
    # prune common warnings and other stuff we can safely ignore
    set comp_output [prune_warnings $comp_output];

    # Trim multiple CR/LF pairs out to keep things consistant
    regsub "^\[\r\n\]+" $comp_output "" comp_output;

    # if we got a compiler error, log it
    if { [lindex $status 0] != 0 } {
	verbose -log "compiler exited with status [lindex $status 0]";
    }
    if { [lindex $status 1] != "" } {
	verbose -log "output is:\n[lindex $status 1]" 2;
    }

    # return the filtered output
    return ${comp_output}
}

# Execute the executable file, and anaylyse the output for the 
# test state keywords.
#    Returns:
#	A "" (empty) string if everything worked, or an error message
#	if there was a problem.
proc host_execute {args} {
    global text

    set timeoutmsg "Timed out: Never got started, "
    set timeout 100
    set file all
    set timetol 0
    set arguments ""
    
    expect_before buffer_full { perror "Buffer full" }
    
    if { [llength $args] == 0} {
	set executable $args
    } else {
	set executable [string trimleft [lindex [split $args " "] 0] "\{"]
	set params [string trimleft [lindex [split $args " "] 1] "\{"]
	set params [string trimright $params "\}"]
    }

    verbose "The executable is $executable" 2
    if ![file exists ${executable}] {
	perror "The executable, \"$executable\" is missing" 0
	return "No source file found"
    }

    # spawn the executable and look for the DejaGnu output messages from the
    # test case.
    # spawn -noecho -open [open "|./${executable}" "r"]
    spawn -noecho "./${executable}" ${params}
    expect {
	-re "\[0-9\]\[0-9\]:..:..:${text}\r\n" {
	    regsub "\[\n\r\t\]*NOTE: $text\r\n" $expect_out(0,string) "" output
	    verbose "$output" 3
	    set timetol 0
	    exp_continue
	}
	-re "NOTE:${text}*" {
	    regsub "\[\n\r\t\]*NOTE: $text\r\n" $expect_out(0,string) "" output
	    set output [string range $output 6 end]
	    verbose "$output" 2
	    set timetol 0
	    exp_continue
	}
	-re "PASSED:${text}*" {
	    regsub "\[\n\r\t\]*PASSED: $text\r\n" $expect_out(0,string) "" output
	    set output [string range $output 8 end]
	    pass "$output"
	    set timetol 0
	    exp_continue
	}
	-re "FAILED:${text}*" {
	    regsub "\[\n\r\t\]*FAILED: $text\r\n" $expect_out(0,string) "" output
	    set output [string range $output 8 end]
	    fail "$output"
	    set timetol 0
	    exp_continue
	}
	-re "UNTESTED:${text}*" {
	    regsub "\[\n\r\t\]*TESTED: $text\r\n" $expect_out(0,string) "" output
	    set output [string range $output 8 end]
	    untested "$output"
	    set timetol 0
	    exp_continue
	}
	-re "UNRESOLVED:${text}*" {
	    regsub "\[\n\r\t\]*UNRESOLVED: $text\r\n" $expect_out(0,string) "" output
	    set output [string range $output 8 end]
	    unresolved "$output"
	    set timetol 0
	    exp_continue
	}
	-re "Totals" {
	    verbose "All done" 2
	}
	eof {
#	    unresolved "${executable} died prematurely"
#	    catch close
#	    return "${executable} died prematurely"
	}
	timeout {
	    warning "Timed out executing test case"
	    if { $timetol <= 2 } {
		incr timetol
		exp_continue
	    } else {
-		catch close
		return "Timed out executing test case"
	    }
	}
    }

    # force a close of the executable to be safe.
    catch close
    return ""
}

@


1.1
log
@Synchronise with sources from savanaha repository
@
text
@@

