head	1.2;
access;
symbols
	msnyder-tracepoint-checkpoint-branch:1.1.0.50
	msnyder-tracepoint-checkpoint-branchpoint:1.1
	ezannoni_pie-20040323-branch:1.1.0.48
	ezannoni_pie-20040323-branchpoint:1.1
	cagney_tramp-20040321-mergepoint:1.1
	cagney_tramp-20040309-branch:1.1.0.46
	cagney_tramp-20040309-branchpoint:1.1
	gdb_6_1-branch:1.1.0.44
	gdb_6_1-2004-03-01-gmt-branchpoint:1.1
	drow-cplus-merge-20040208:1.1
	carlton_dictionary-20040126-merge:1.1
	drow-cplus-merge-20040113:1.1
	drow-cplus-merge-20031224:1.1
	drow-cplus-merge-20031220:1.1
	carlton_dictionary-20031215-merge:1.1
	drow-cplus-merge-20031214:1.1
	carlton-dictionary-20031111-merge:1.1
	carlton_dictionary-20030917-merge:1.1
	ezannoni_pie-20030916-branchpoint:1.1
	ezannoni_pie-20030916-branch:1.1.0.42
	cagney_x86i386-20030821-branch:1.1.0.40
	cagney_x86i386-20030821-branchpoint:1.1
	carlton_dictionary-20030805-merge:1.1
	carlton_dictionary-20030627-merge:1.1
	gdb_6_0-branch:1.1.0.38
	gdb_6_0-2003-06-23-branchpoint:1.1
	cagney_convert-20030606-branch:1.1.0.36
	cagney_convert-20030606-branchpoint:1.1
	cagney_writestrings-20030508-branch:1.1.0.34
	cagney_writestrings-20030508-branchpoint:1.1
	carlton_dictionary-20030523-merge:1.1
	cagney_fileio-20030521-branch:1.1.0.32
	cagney_fileio-20030521-branchpoint:1.1
	carlton_dictionary-20030430-merge:1.1
	carlton_dictionary-20030416-merge:1.1
	cagney_frameaddr-20030409-mergepoint:1.1
	cagney_frameaddr-20030403-branchpoint:1.1
	cagney_frameaddr-20030403-branch:1.1.0.30
	cagney_framebase-20030330-mergepoint:1.1
	cagney_framebase-20030326-branch:1.1.0.28
	cagney_framebase-20030326-branchpoint:1.1
	cagney_lazyid-20030317-branch:1.1.0.26
	cagney_lazyid-20030317-branchpoint:1.1
	offbyone-20030313-branch:1.1.0.24
	offbyone-20030313-branchpoint:1.1
	carlton_dictionary-20030305-merge:1.1
	cagney_offbyone-20030303-branch:1.1.0.22
	cagney_offbyone-20030303-branchpoint:1.1
	carlton_dictionary-20030207-merge:1.1
	interps-20030202-branch:1.1.0.20
	interps-20030202-branchpoint:1.1
	cagney-unwind-20030108-branch:1.1.0.18
	cagney-unwind-20030108-branchpoint:1.1
	carlton_dictionary-20021223-merge:1.1
	carlton_dictionary-20021115-merge:1.1
	kseitz_interps-20021105-merge:1.1
	kseitz_interps-20021103-merge:1.1
	drow-cplus-merge-20021020:1.1
	drow-cplus-merge-20021025:1.1
	carlton_dictionary-20021025-merge:1.1
	carlton_dictionary-20021011-merge:1.1
	drow-cplus-branch:1.1.0.16
	drow-cplus-branchpoint:1.1
	kseitz_interps-20020930-merge:1.1
	carlton_dictionary-20020927-merge:1.1
	carlton_dictionary-branch:1.1.0.14
	carlton_dictionary-20020920-branchpoint:1.1
	sid-20020905-branchpoint:1.1
	sid-20020905-branch:1.1.0.12
	gdb_5_3-branch:1.1.0.10
	gdb_5_3-2002-09-04-branchpoint:1.1
	kseitz_interps-20020829-merge:1.1
	cagney_sysregs-20020825-branch:1.1.0.8
	cagney_sysregs-20020825-branchpoint:1.1
	readline_4_3-import-branch:1.1.0.6
	readline_4_3-import-branchpoint:1.1
	kseitz_interps-20020528-branch:1.1.0.4
	kseitz_interps-20020528-branchpoint:1.1
	cagney_regbuf-20020515-branch:1.1.0.2
	cagney_regbuf-20020515-branchpoint:1.1;
locks; strict;
comment	@ * @;


1.2
date	2005.06.29.01.58.37;	author bje;	state dead;
branches;
next	1.1;

1.1
date	2002.04.19.15.10.51;	author nickc;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Remove old version of DejaGnu.
@
text
@/* 
 *   Copyright (C) 2000, 2001 Free Software Foundation, Inc.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.

 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#ifndef __DEJAGNU_H__
#define __DEJAGNU_H__

#include <stdio.h>

static int passed;
static int failed;
static int untest;
static int unresolve;

inline void
pass (const char *s) {
    passed++;
    printf ("\tPASSED: %s\n", s);
}

inline void
fail (const char *s) {
    failed++;
    printf ("\tFAILED: %s\n", s);
}

inline void
untested (const char *s) {
    untest++;
    printf ("\tUNTESTED: %s\n", s);
}

inline void
unresolved (const char *s) {
    unresolve++;
    printf ("\tUNRESOLVED: %s\n", s);
}

inline void
totals (void) {
    printf ("\nTotals:\n");
    printf ("\t#passed:\t\t%d\n", passed);
    printf ("\t#failed:\t\t%d\n", failed);
    if (untest)
        printf ("\t#untested:\t\t%d\n", untest);
    if (unresolve)
        printf ("\t#unresolved:\t\t%d\n", unresolve);
}

#ifdef __cplusplus


#include <iostream>
#include <iomanip>
#include <fstream>
#include <string>
#if 0
#if HAVE_STL3
#include <sstream>
#else
#include <strstream>
#endif
#endif

const char *outstate_list[] = {
    "FAILED: ",
    "PASSED: ",
    "UNTESTED: ",
    "UNRESOLVED: "
};

const char ** outstate = outstate_list;

#if 0
extern ios& __iomanip_testout (ios&, int);
inline smanip<int> testout (int n) {
    return smanip<int> (__iomanip_testout, n);
}
ios & __iomanip_testout (ios& i, int x) {
    return i;
}

template<class T>
class OMANIP {
 private:
    T i;
    ostream &(*f)(ostream&, T);
 public:
    OMANIP(ostream& (*ff)(ostream&, T), T ii) : f(ff), i(ii) {
    }
    friend ostream operator<<(ostream& us, OMANIP& m) {
      return m.f(os,m.i);
    }
};

ostream&
freakout(ostream& os, int x) {
    return os << "FREAKOUT" ;
//    return x << "TESTOUT " << x ;
}

OMANIP<int> testout(int i) {
    return OMANIP<int>(&freakout,i);
}
#endif

enum teststate {FAILED, PASSED,UNTESTED,UNRESOLVED} laststate;

class TestState {
 private:
    teststate laststate;
    std::string lastmsg;
 public:
    TestState(void) {
        passed = 0;
        failed = 0;
        untest = 0;
        unresolve = 0;
    }
    ~TestState(void) {
        totals();
    };

    void testrun (bool b, std::string s) {
        if (b)
            pass (s);
        else
            fail (s);
    }

    void pass (std::string s) {
        passed++;
        laststate = PASSED;
        lastmsg = s;
        std::cout << "\t" << outstate[PASSED] << s << std::endl;
    }
    void pass (const char *c) {
        std::string s = c;
        pass (s);
    }

    void fail (std::string s) {
        failed++;
        laststate = FAILED;
        lastmsg = s;
        std::cout << "\t" << outstate[FAILED] << s << std::endl;
    }
    void fail (const char *c) {
        std::string s = c;
        fail (s);
    }

    void untested (std::string s) {
        untest++;
        laststate = UNTESTED;
        lastmsg = s;
        std::cout << "\t" << outstate[UNTESTED] << s << std::endl;
    }
    void untested (const char *c) {
        std::string s = c;
        untested (s);
    }

    void unresolved (std::string s) {
        unresolve++;
        laststate = UNRESOLVED;
        lastmsg = s;
        std::cout << "\t" << outstate[UNRESOLVED] << s << std::endl;
    }
    void unresolved (const char *c) {
        std::string s = c;
        unresolved (s);
    }

    void totals (void) {
        std::cout << "\t#passed:\t\t" << passed << std::endl;
        std::cout << "\t#failed:\t\t" << failed << std::endl;
        if (untest)
            std::cout << "\t#untested:\t\t" << untest << std::endl;
        if (unresolve)
            std::cout << "\t#unresolved:\t\t" << unresolve << std::endl;
    }

    // This is so this class can be printed in an ostream.
    friend std::ostream & operator << (std::ostream &os, TestState& t) {
        return os << "\t" << outstate[t.laststate] << t.lastmsg ;
    }

    int GetState(void) {
        return laststate;
    }
    std::string GetMsg(void) {
        return lastmsg;
    }
};

#endif		// __cplusplus
#endif          // _DEJAGNU_H_


@


1.1
log
@Import new files from the dejagnu repository.
@
text
@@

