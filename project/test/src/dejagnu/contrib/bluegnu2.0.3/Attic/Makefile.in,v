head	1.2;
access;
symbols
	msnyder-tracepoint-checkpoint-branch:1.1.0.48
	msnyder-tracepoint-checkpoint-branchpoint:1.1
	ezannoni_pie-20040323-branch:1.1.0.46
	ezannoni_pie-20040323-branchpoint:1.1
	cagney_tramp-20040321-mergepoint:1.1
	cagney_tramp-20040309-branch:1.1.0.44
	cagney_tramp-20040309-branchpoint:1.1
	gdb_6_1-branch:1.1.0.42
	gdb_6_1-2004-03-01-gmt-branchpoint:1.1
	drow-cplus-merge-20040208:1.1
	carlton_dictionary-20040126-merge:1.1
	drow-cplus-merge-20040113:1.1
	drow-cplus-merge-20031224:1.1
	drow-cplus-merge-20031220:1.1
	carlton_dictionary-20031215-merge:1.1
	drow-cplus-merge-20031214:1.1
	carlton-dictionary-20031111-merge:1.1
	carlton_dictionary-20030917-merge:1.1
	ezannoni_pie-20030916-branchpoint:1.1
	ezannoni_pie-20030916-branch:1.1.0.40
	cagney_x86i386-20030821-branch:1.1.0.38
	cagney_x86i386-20030821-branchpoint:1.1
	carlton_dictionary-20030805-merge:1.1
	carlton_dictionary-20030627-merge:1.1
	gdb_6_0-branch:1.1.0.36
	gdb_6_0-2003-06-23-branchpoint:1.1
	cagney_convert-20030606-branch:1.1.0.34
	cagney_convert-20030606-branchpoint:1.1
	cagney_writestrings-20030508-branch:1.1.0.32
	cagney_writestrings-20030508-branchpoint:1.1
	carlton_dictionary-20030523-merge:1.1
	cagney_fileio-20030521-branch:1.1.0.30
	cagney_fileio-20030521-branchpoint:1.1
	carlton_dictionary-20030430-merge:1.1
	carlton_dictionary-20030416-merge:1.1
	cagney_frameaddr-20030409-mergepoint:1.1
	cagney_frameaddr-20030403-branchpoint:1.1
	cagney_frameaddr-20030403-branch:1.1.0.28
	cagney_framebase-20030330-mergepoint:1.1
	cagney_framebase-20030326-branch:1.1.0.26
	cagney_framebase-20030326-branchpoint:1.1
	cagney_lazyid-20030317-branch:1.1.0.24
	cagney_lazyid-20030317-branchpoint:1.1
	offbyone-20030313-branch:1.1.0.22
	offbyone-20030313-branchpoint:1.1
	carlton_dictionary-20030305-merge:1.1
	cagney_offbyone-20030303-branch:1.1.0.20
	cagney_offbyone-20030303-branchpoint:1.1
	carlton_dictionary-20030207-merge:1.1
	interps-20030202-branch:1.1.0.18
	interps-20030202-branchpoint:1.1
	cagney-unwind-20030108-branch:1.1.0.16
	cagney-unwind-20030108-branchpoint:1.1
	carlton_dictionary-20021223-merge:1.1
	carlton_dictionary-20021115-merge:1.1
	kseitz_interps-20021105-merge:1.1
	kseitz_interps-20021103-merge:1.1
	drow-cplus-merge-20021020:1.1
	drow-cplus-merge-20021025:1.1
	carlton_dictionary-20021025-merge:1.1
	carlton_dictionary-20021011-merge:1.1
	drow-cplus-branch:1.1.0.14
	drow-cplus-branchpoint:1.1
	kseitz_interps-20020930-merge:1.1
	carlton_dictionary-20020927-merge:1.1
	carlton_dictionary-branch:1.1.0.12
	carlton_dictionary-20020920-branchpoint:1.1
	sid-20020905-branchpoint:1.1
	sid-20020905-branch:1.1.0.10
	gdb_5_3-branch:1.1.0.8
	gdb_5_3-2002-09-04-branchpoint:1.1
	kseitz_interps-20020829-merge:1.1
	cagney_sysregs-20020825-branch:1.1.0.6
	cagney_sysregs-20020825-branchpoint:1.1
	readline_4_3-import-branch:1.1.0.4
	readline_4_3-import-branchpoint:1.1
	kseitz_interps-20020528-branch:1.1.0.2
	kseitz_interps-20020528-branchpoint:1.1;
locks; strict;
comment	@# @;


1.2
date	2005.06.29.01.58.41;	author bje;	state dead;
branches;
next	1.1;

1.1
date	2002.04.21.08.46.48;	author nickc;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Remove old version of DejaGnu.
@
text
@## @@configure_input@@
# Makefile for BlueGnu Testing Framework.
#   Copyright (C) 1988, 1990, 1991, 1992, 1994, 1995 Free Software Foundation, #   Copyright (C) 1998 jotOmega dsc, Inc.

#This file is part of BlueGnu.

#BlueGnu is open software; you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation; either version 2, or (at your option)
#any later version.

#BlueGnu is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.

#You should have received a copy of the GNU General Public License
#along with BlueGnu; see the file COPYING.  If not, write to
#the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.

VPATH = @@srcdir@@
srcdir = @@srcdir@@
prefix = @@prefix@@
exec_prefix = @@exec_prefix@@

bindir = $(exec_prefix)/bin
libdir = $(exec_prefix)/lib

datadir = $(libdir)/bluegnu
infodir = $(prefix)/info
includedir = $(prefix)/include
gxx_includedir = $(tooldir)/g++-include
docdir = $(datadir)/doc

SHELL = /bin/sh

INSTALL = @@INSTALL@@
INSTALL_PROGRAM = @@INSTALL_PROGRAM@@
INSTALL_DATA = @@INSTALL_DATA@@

CC = @@CC@@
CFLAGS = -g

SUBDIRS = @@subdirs@@

# These let the BlueGnu test suite run when BlueGnu isn't 
# installed yet, so run it from the srcdir and objdir.
EXPECT = ` \
  if [ -f $${rootme}/../expect/expect ] ; then \
    echo $${rootme}/../expect/expect ; \
  else echo expect ; fi`

BLUEGNUFLAGS =
BLUEGNU = ` \
  if [ -f ${srcdir}/bluegnu ] ; then \
    echo ${srcdir}/bluegnu ; \
  else echo bluegnu ;  fi`

TCLIBRARY = `if [ -f $${rootme}/expect/expect ] ; \
	then echo TCL_LIBRARY=$${srcdir}/../tcl/library ; \
	else echo "" ; fi`

FLAGS_TO_PASS = \
	"CC=$(CC)" \
	"CFLAGS=$(CFLAGS)" \
	"INSTALL=$(INSTALL)" \
	"INSTALL_DATA=$(INSTALL_DATA)" \
	"INSTALL_PROGRAM=$(INSTALL_PROGRAM)" \
	"LDFLAGS=$(LDFLAGS)" \
	"MAKEINFO=$(MAKEINFO)" \
	"EXPECT=$(EXPECT)" \
	"TCLIBRARY=$(TCLIBRARY)" \
	"BLUEGNU=$(BLUEGNU)" \
	"BLUEGNUFLAGS=$(BLUEGNUFLAGS)" \
	"exec_prefix=$(exec_prefix)" \
	"prefix=$(prefix)" \
	"tooldir=$(tooldir)"

all:	force
	@@$(MAKE) subdir_do DO=$@@  $(FLAGS_TO_PASS)

contents: force
	ls -lLAR -I CVS -I Makefile \
		-I config.status -I config.log -I config.cache \
		-I READMEdvi -I calc.h > $@@

.PHONY: check installcheck
installcheck:

.NOEXPORT:

MAKEOVERRIDES=

INFODIRS=doc
dvi info:
	@@rootme=`pwd`/ ; export rootme ; \
	rootsrc=`cd $(srcdir); pwd`/ ; export rootsrc ; \
	$(MAKE) subdir_do DO=$@@ "DODIRS=$(INFODIRS)" $(FLAGS_TO_PASS)

install-info:
	@@rootme=`pwd`/ ; export rootme ; \
	$(MAKE) subdir_do DO=install-info $(FLAGS_TO_PASS)

install:
	${srcdir}/mkinstalldirs $(bindir) $(datadir)
	$(INSTALL_PROGRAM) $(srcdir)/runtest $(bindir)/runtest
	$(INSTALL_PROGRAM) $(srcdir)/runtest.exp $(datadir)/runtest.exp
	$(INSTALL_PROGRAM) $(srcdir)/dejagnu $(bindir)/dejagnu
	$(INSTALL_PROGRAM) $(srcdir)/bluegnu $(bindir)/bluegnu
	$(INSTALL_PROGRAM) $(srcdir)/bluegnutk $(bindir)
	$(INSTALL_PROGRAM) $(srcdir)/bluegnutk.itcl $(bindir)
	$(INSTALL_PROGRAM) $(srcdir)/bluegnutk.rc $(bindir)
	$(INSTALL_PROGRAM) $(srcdir)/bluegnutkUtils.itcl $(bindir)
	$(INSTALL_PROGRAM) $(srcdir)/config.guess $(datadir)/config.guess
	-for file in $(srcdir)/lib/*.exp; \
	do \
		$(INSTALL_DATA) $$file $(datadir) ; \
	done
	-for file in $(srcdir)/lib/*.tcl; \
	do \
		$(INSTALL_DATA) $$file $(datadir) ; \
	done
	-for file in $(srcdir)/lib/*.itcl; \
	do \
		$(INSTALL_DATA) $$file $(datadir) ; \
	done
	$(INSTALL_DATA) $(srcdir)/lib/tclIndex $(datadir)
	@@$(MAKE) subdir_do DO=install $(FLAGS_TO_PASS)

subdir_do: force
	@@for i in $(SUBDIRS); do \
	   echo "Making $(DO) in $${i}..." ; \
	   if [ -d ./$$i ] ; then \
	     if (rootme=`pwd`/ ; export rootme ; \
	       rootsrc=`cd $(srcdir); pwd`/ ; export rootsrc ; \
	       cd ./$$i; \
	       $(MAKE) $(FLAGS_TO_PASS) $(DO)) ; then true ; \
	     else exit 1 ; fi ; \
	   else true ; fi ; \
	done
force:

clean mostlyclean:
	@@echo "Doing clean mosttlyclean +++++"
	-rm -f \#* *~ core *.o a.out xgdb *.x
	$(MAKE) subdir_do DO=$@@ $(FLAGS_TO_PASS)
	@@for l in `find . -name logs`; do rm -fr $$l; done
	@@for f in `find . -name '*~'`; do rm -fr $$f; done

distclean: clean
	@@echo "Doing distclean +++++"
	$(MAKE) subdir_do DO=$@@  $(FLAGS_TO_PASS)
	-rm -f Makefile *-init.exp site.bak site.exp conftest.c
	-rm -f config.status config.log config.cache
	-rm -fr *.log summary detail *.sum blockit

maintainer-clean realclean:
	@@echo "Doing maintainer-clean realclean +++++"
	$(MAKE) subdir_do DO=$@@  $(FLAGS_TO_PASS)
	-rm -f Makefile *-init.exp site.bak site.exp conftest.c
	-rm -f config.status config.log config.cache
	-rm -fr *.log summary detail *.sum blockit
	-rm -f README.bluegnu contents

check:	
	@@if [ -f testsuite/Makefile ]; then \
	   rootme=`pwd`; export rootme; \
	   cd testsuite; \
	   $(MAKE) $(FLAGS_TO_PASS) check; \
	else true; fi

Makefile: $(srcdir)/Makefile.in config.status
	@@echo "Rebuilding the Makefile..."
	$(SHELL) ./config.status

configure: $(srcdir)/configure.in $(srcdir)/Makefile.in $(srcdir)/aclocal.m4
	@@echo "Rebuilding configure..."
	@@if [ x"${srcdir}" = x"@@srcdir@@" ] ; then \
	  srcdir=. ; export srcdir ; \
	else true ; fi ; \
	(cd $${srcdir}; autoconf)

config.status: 
	@@echo "Rebuilding config.status..."
	$(SHELL) ./config.status --recheck
@


1.1
log
@Synchronise with sources from savanaha repository
@
text
@@

