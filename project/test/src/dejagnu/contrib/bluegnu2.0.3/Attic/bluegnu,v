head	1.2;
access;
symbols
	msnyder-tracepoint-checkpoint-branch:1.1.0.48
	msnyder-tracepoint-checkpoint-branchpoint:1.1
	ezannoni_pie-20040323-branch:1.1.0.46
	ezannoni_pie-20040323-branchpoint:1.1
	cagney_tramp-20040321-mergepoint:1.1
	cagney_tramp-20040309-branch:1.1.0.44
	cagney_tramp-20040309-branchpoint:1.1
	gdb_6_1-branch:1.1.0.42
	gdb_6_1-2004-03-01-gmt-branchpoint:1.1
	drow-cplus-merge-20040208:1.1
	carlton_dictionary-20040126-merge:1.1
	drow-cplus-merge-20040113:1.1
	drow-cplus-merge-20031224:1.1
	drow-cplus-merge-20031220:1.1
	carlton_dictionary-20031215-merge:1.1
	drow-cplus-merge-20031214:1.1
	carlton-dictionary-20031111-merge:1.1
	carlton_dictionary-20030917-merge:1.1
	ezannoni_pie-20030916-branchpoint:1.1
	ezannoni_pie-20030916-branch:1.1.0.40
	cagney_x86i386-20030821-branch:1.1.0.38
	cagney_x86i386-20030821-branchpoint:1.1
	carlton_dictionary-20030805-merge:1.1
	carlton_dictionary-20030627-merge:1.1
	gdb_6_0-branch:1.1.0.36
	gdb_6_0-2003-06-23-branchpoint:1.1
	cagney_convert-20030606-branch:1.1.0.34
	cagney_convert-20030606-branchpoint:1.1
	cagney_writestrings-20030508-branch:1.1.0.32
	cagney_writestrings-20030508-branchpoint:1.1
	carlton_dictionary-20030523-merge:1.1
	cagney_fileio-20030521-branch:1.1.0.30
	cagney_fileio-20030521-branchpoint:1.1
	carlton_dictionary-20030430-merge:1.1
	carlton_dictionary-20030416-merge:1.1
	cagney_frameaddr-20030409-mergepoint:1.1
	cagney_frameaddr-20030403-branchpoint:1.1
	cagney_frameaddr-20030403-branch:1.1.0.28
	cagney_framebase-20030330-mergepoint:1.1
	cagney_framebase-20030326-branch:1.1.0.26
	cagney_framebase-20030326-branchpoint:1.1
	cagney_lazyid-20030317-branch:1.1.0.24
	cagney_lazyid-20030317-branchpoint:1.1
	offbyone-20030313-branch:1.1.0.22
	offbyone-20030313-branchpoint:1.1
	carlton_dictionary-20030305-merge:1.1
	cagney_offbyone-20030303-branch:1.1.0.20
	cagney_offbyone-20030303-branchpoint:1.1
	carlton_dictionary-20030207-merge:1.1
	interps-20030202-branch:1.1.0.18
	interps-20030202-branchpoint:1.1
	cagney-unwind-20030108-branch:1.1.0.16
	cagney-unwind-20030108-branchpoint:1.1
	carlton_dictionary-20021223-merge:1.1
	carlton_dictionary-20021115-merge:1.1
	kseitz_interps-20021105-merge:1.1
	kseitz_interps-20021103-merge:1.1
	drow-cplus-merge-20021020:1.1
	drow-cplus-merge-20021025:1.1
	carlton_dictionary-20021025-merge:1.1
	carlton_dictionary-20021011-merge:1.1
	drow-cplus-branch:1.1.0.14
	drow-cplus-branchpoint:1.1
	kseitz_interps-20020930-merge:1.1
	carlton_dictionary-20020927-merge:1.1
	carlton_dictionary-branch:1.1.0.12
	carlton_dictionary-20020920-branchpoint:1.1
	sid-20020905-branchpoint:1.1
	sid-20020905-branch:1.1.0.10
	gdb_5_3-branch:1.1.0.8
	gdb_5_3-2002-09-04-branchpoint:1.1
	kseitz_interps-20020829-merge:1.1
	cagney_sysregs-20020825-branch:1.1.0.6
	cagney_sysregs-20020825-branchpoint:1.1
	readline_4_3-import-branch:1.1.0.4
	readline_4_3-import-branchpoint:1.1
	kseitz_interps-20020528-branch:1.1.0.2
	kseitz_interps-20020528-branchpoint:1.1;
locks; strict;
comment	@# @;


1.2
date	2005.06.29.01.58.42;	author bje;	state dead;
branches;
next	1.1;

1.1
date	2002.04.21.08.46.48;	author nickc;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Remove old version of DejaGnu.
@
text
@#! /bin/sh
#
# This application is using [incr Tcl]
#
#   Copyright (C) 1998, 1999 jotOmega dsc, Inc.

# This file is part of BlueGnu testing framework.
# It asumes that the itclsh3.0 program is on your PATH
#

#
# Get the execution path to this script
#
execpath=`echo ${0-.} | sed  -e 's@@/[^/]*$@@@@'`

#
# get the name by which bluegnu was invoked and extract the config triplet
#
bluegnu=`echo ${0-.} | sed -e 's@@^.*/@@@@'`
target=`echo $bluegnu | sed -e 's/-bluegnu$//'`
if [ "$target" != bluegnu ] ; then
    target="--target=${target}"
else
    target=""
fi

#
# Find the right interpreter binary to use. If a variable EXPECT exists,
# it takes precedence over all other tests. Otherwise look for a freshly
# built one, and then use one in the path.
#
if [ x"$EXPECT" != x ] ; then
  expectbin=$EXPECT
else
  if [ -x "$execpath/itclsh3.0" ] ; then
    expectbin=$execpath/itclsh3.0
  else
      expectbin=itclsh3.0
    fi
fi

# just to be safe...
if [ -z "$expectbin" ]; then
  echo "ERROR: No $expectbin shell found"
  exit 1
fi

#
# Extract a few options from the option list.
#
verbose=0
debug=""
for a in "$@@" ; do
  case $a in	    
      -v|--v|-verb*|--verb*)    verbose=`expr $verbose + 1`;;
      -D0|--D0)       debug="-D 0" ;;
      -D1|--D1)       debug="-D 1" ;;
  esac
done

if expr $verbose \> 0 \& "$DEBUG" > /dev/null ; then
  echo Using $expectbin as interpreter for the BlueGnu testing framework.
fi

#
# find bluegnu.itcl. First we look in it's installed location, otherwise
# start if from the source tree.
#
for i in $execpath/../lib/bluegnu $execpath/../lib $execpath $execpath/lib ; do
    if expr $verbose \> 2 \& "$DEBUG" > /dev/null ; then
	echo Looking for $i/bluegnu.itcl.
    fi  
    if [ -f $i/bluegnu.itcl ] ; then
	runpath=$i
	if expr $verbose \> 0 \& "$DEBUG" > /dev/null ; then
	    echo Using $i/bluegnu.itcl as default main test driver
	fi
	break
    fi
done

# check for an environment variable
if [ x"$BLUEGNULIB" != x ] ; then
    runpath=$BLUEGNULIB
else
    BLUEGNULIB=$runpath; export BLUEGNULIB
fi
if expr $verbose \> 0 \& "$DEBUG" > /dev/null ; then
    echo Using $BLUEGNULIB as the BlueGnu library
fi

#
# Find the right test framework. If a variable FRAMEWORK exists,
# it takes precedence over all other frameworks. Otherwise look for the
# default one.
if [ x"$FRAMEWORK" != x ] ; then
  framework=$FRAMEWORK
else
  if [ -r "$runpath/bluegnu.itcl" ] ; then
    framework=bluegnu.itcl
  else
    echo "ERROR: $runpath/bluegnu.itcl does not exist."
    exit 1
  fi
fi

if [ x"$runpath" = x ] ; then
    echo "ERROR: bluegnu.itcl does not exist."
    exit 1
fi

if [ ! -r "$runpath/$framework" ] ; then
    echo "ERROR: $runpath/$framework does not exist."
else
    if expr $verbose \> 0 \& "$DEBUG" > /dev/null ; then
	echo "Using $runpath/$framework as main test driver"
    fi
fi

# Find Test Suite Root directory
#
if [ x"$TESTSUITEROOT" = x ] ; then
    TESTSUITEROOT=`pwd`; export TESTSUITEROOT
else
    cd $TESTSUITEROOT
fi
if expr $verbose \> 0 \& "$DEBUG" > /dev/null ; then
    echo "Using $TESTSUITEROOT as Test Suite Directory."
fi

# Start the BlueGnu Test Framework
#
if expr $verbose \> 2 \& "$DEBUG" > /dev/null ; then
    echo Command: $expectbin $debug $runpath/$framework $target ${1+"$@@"}
fi
exec $expectbin $debug $runpath/$framework $target ${1+"$@@"}
@


1.1
log
@Synchronise with sources from savanaha repository
@
text
@@

