head	1.2;
access;
symbols
	msnyder-tracepoint-checkpoint-branch:1.1.0.48
	msnyder-tracepoint-checkpoint-branchpoint:1.1
	ezannoni_pie-20040323-branch:1.1.0.46
	ezannoni_pie-20040323-branchpoint:1.1
	cagney_tramp-20040321-mergepoint:1.1
	cagney_tramp-20040309-branch:1.1.0.44
	cagney_tramp-20040309-branchpoint:1.1
	gdb_6_1-branch:1.1.0.42
	gdb_6_1-2004-03-01-gmt-branchpoint:1.1
	drow-cplus-merge-20040208:1.1
	carlton_dictionary-20040126-merge:1.1
	drow-cplus-merge-20040113:1.1
	drow-cplus-merge-20031224:1.1
	drow-cplus-merge-20031220:1.1
	carlton_dictionary-20031215-merge:1.1
	drow-cplus-merge-20031214:1.1
	carlton-dictionary-20031111-merge:1.1
	carlton_dictionary-20030917-merge:1.1
	ezannoni_pie-20030916-branchpoint:1.1
	ezannoni_pie-20030916-branch:1.1.0.40
	cagney_x86i386-20030821-branch:1.1.0.38
	cagney_x86i386-20030821-branchpoint:1.1
	carlton_dictionary-20030805-merge:1.1
	carlton_dictionary-20030627-merge:1.1
	gdb_6_0-branch:1.1.0.36
	gdb_6_0-2003-06-23-branchpoint:1.1
	cagney_convert-20030606-branch:1.1.0.34
	cagney_convert-20030606-branchpoint:1.1
	cagney_writestrings-20030508-branch:1.1.0.32
	cagney_writestrings-20030508-branchpoint:1.1
	carlton_dictionary-20030523-merge:1.1
	cagney_fileio-20030521-branch:1.1.0.30
	cagney_fileio-20030521-branchpoint:1.1
	carlton_dictionary-20030430-merge:1.1
	carlton_dictionary-20030416-merge:1.1
	cagney_frameaddr-20030409-mergepoint:1.1
	cagney_frameaddr-20030403-branchpoint:1.1
	cagney_frameaddr-20030403-branch:1.1.0.28
	cagney_framebase-20030330-mergepoint:1.1
	cagney_framebase-20030326-branch:1.1.0.26
	cagney_framebase-20030326-branchpoint:1.1
	cagney_lazyid-20030317-branch:1.1.0.24
	cagney_lazyid-20030317-branchpoint:1.1
	offbyone-20030313-branch:1.1.0.22
	offbyone-20030313-branchpoint:1.1
	carlton_dictionary-20030305-merge:1.1
	cagney_offbyone-20030303-branch:1.1.0.20
	cagney_offbyone-20030303-branchpoint:1.1
	carlton_dictionary-20030207-merge:1.1
	interps-20030202-branch:1.1.0.18
	interps-20030202-branchpoint:1.1
	cagney-unwind-20030108-branch:1.1.0.16
	cagney-unwind-20030108-branchpoint:1.1
	carlton_dictionary-20021223-merge:1.1
	carlton_dictionary-20021115-merge:1.1
	kseitz_interps-20021105-merge:1.1
	kseitz_interps-20021103-merge:1.1
	drow-cplus-merge-20021020:1.1
	drow-cplus-merge-20021025:1.1
	carlton_dictionary-20021025-merge:1.1
	carlton_dictionary-20021011-merge:1.1
	drow-cplus-branch:1.1.0.14
	drow-cplus-branchpoint:1.1
	kseitz_interps-20020930-merge:1.1
	carlton_dictionary-20020927-merge:1.1
	carlton_dictionary-branch:1.1.0.12
	carlton_dictionary-20020920-branchpoint:1.1
	sid-20020905-branchpoint:1.1
	sid-20020905-branch:1.1.0.10
	gdb_5_3-branch:1.1.0.8
	gdb_5_3-2002-09-04-branchpoint:1.1
	kseitz_interps-20020829-merge:1.1
	cagney_sysregs-20020825-branch:1.1.0.6
	cagney_sysregs-20020825-branchpoint:1.1
	readline_4_3-import-branch:1.1.0.4
	readline_4_3-import-branchpoint:1.1
	kseitz_interps-20020528-branch:1.1.0.2
	kseitz_interps-20020528-branchpoint:1.1;
locks; strict;
comment	@# @;


1.2
date	2005.06.29.01.58.48;	author bje;	state dead;
branches;
next	1.1;

1.1
date	2002.04.21.08.46.52;	author nickc;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Remove old version of DejaGnu.
@
text
@# Copyright (C) 92, 93, 94, 95, 1996 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA. 

# Please email any bugs, comments, and/or additions to this file to:
# bug-dejagnu@@prep.ai.mit.edu

# This file was written by Rob Savoye. (rob@@welcomehome.org)

#
# Find the linker script for the current target. Returns a string
# suitable to pass to $CC or $CXX to use a liblgoss based linker script,
# or NULL if there is no support.
#
proc libgloss_script { } {
    global srcdir
    global target_cpu
    global LDFLAGS
    global CFLAGS
    global CXXFLAGS
    global target_info

    # sanity check
    if ![info exists LDFLAGS] {
	set LDFLAGS ""
    }
    if ![info exists CFLAGS] {
	set CFLAGS ""
    }

     if ![info exists CXXFLAGS] {
	set CXXFLAGS ""
    }

    # find the linker script. first we look at the config
    # data and hope to find it all ready for us to use. if
    # that fails, then look in the LDFLAGS and CFLAGS variables that
    # get set in the global site.exp file.
    if [info exists target_info(target,name)] {
	set script $target_info(target,name).ld
    } else {
	if [regexp -- "-T.*\.ld" ${LDFLAGS} script] {
	    string trimleft ${script} "-T"
	}
	if [regexp -- "-T.*\.ld" ${CFLAGS} script] {
	    string trimleft ${script} "-T"
	}
	if [regexp -- "-T.*\.ld" ${CXXFLAGS} script] {
	    string trimleft ${script} "-T"
	}
    }

    if ![info exists script] {
	warning "Couldn't find the linker script name for target"
	return ""
    }
    
    # if we're on a remote host, we can't search for the file, so use the
    # linker script in the path.
    if [is3way] {
	return "-T${script}"
    }
    
    # search for the general directories
    foreach i ".. ../.. ../../.. ../../../.." {
	verbose "Looking for a ${srcdir}/${i}/libgloss/${target_cpu}/${script}" 2
	if [file exists ${srcdir}/$i/libgloss/${target_cpu}/${script} ] {
	    verbose "Found ${srcdir}/${i}/libgloss/${target_cpu}/${script}." 3
	    return "-T${srcdir}/${i}/libgloss/${target_cpu}/${script}"
	}
    }

    # we didn't find the script, so we have to hope it's installed
    return "-T${script}"
}

#
# Find all the pieces of libgloss for testing the GNU development tools
# needed to use $CC or $CXX. It returns a string suitable to pass to 
# $CC or $CXX to get a fully linked binary for the target.
#
proc libgloss_flags { } {
    global target_alias
    global target_cpu
    global srcdir
    global base_dir

    # libgloss doesn't work native
    if [isnative] {
	return ""
    }

    # if we're on a remote host, we can't search for the file, so we can only
    # use an installed compiler, so we don't add any paths here.
    if [is3way] {
	return "[libgloss_script]"
    }
    
    # search for the general directories
    foreach i ".. ../.. ../../.. ../../../.." {
	if [file exists ${base_dir}/${i}/${target_alias}/libgloss/${target_cpu} ] {
	    verbose "Found ${base_dir}/${i}/${target_alias}/libgloss/${target_cpu}." 3
	    return  "-L${base_dir}/${i}/${target_alias}/libgloss/${target_cpu} [libgloss_script]"
	}
    }
    
    # we didn't find any support at all
    return "[libgloss_script]"
}

#
# Find the C libraries
#
proc newlib_flags { } {
    global base_dir
    global srcdir
    global target_alias

    # if we're on a remote host, we can't search for the file, so use the
    # newlib already installed.
    if [is3way] {
	return ""
    }

    # search for the general directories
    foreach i ".. ../.. ../../.. ../../../.." {
	verbose "Looking for a ${base_dir}/${i}/${target_alias}/newlib/targ-include" 2
	if [file exists ${base_dir}/${i}/${target_alias}/newlib/targ-include ] {
	    verbose "Found ${base_dir}/${i}/${target_alias}/newlib/targ-include." 3
	    set incls1 "-I${base_dir}/${i}/${target_alias}/newlib/targ-include"
	}
	verbose "Looking for a ${srcdir}/${i}/newlib/libc/include" 2
	if [file exists ${srcdir}/${i}/newlib/libc/include ] {
	    verbose "Found ${srcdir}/${i}/newlib/libc/include." 3
	    set incls2 "-I${srcdir}/${i}/newlib/libc/include"
	}
    }

    # search for the general directories
    foreach i ".. ../.. ../../.. ../../../.." {
	verbose "Looking for a ${base_dir}/${i}/newlib" 2
	if [file exists ${base_dir}/${i}/newlib ] {
	    verbose "Found ${base_dir}/${i}/newlib." 3
	    return "-B${base_dir}/${i}/newlib/ ${incls1} ${incls2}"
	}
    }
    return ""
}

#
# Find all the pieces of libgloss for testing the GNU development tools
# needed to use $LD. This gets fun cause we have to guess the name of the
# BSP for this target. If returns a string suitable to pass to LD to get
# a fully linked binary for the target. It also sets two global variables,
# CRT0 is the path to the startup file, and
# BSP is the path to the support library.
#
proc libgloss_ld {} {
#proc gloss_ld {} {
    global target_cpu
    global srcdir
    global base_dir
    global CRT0
    global BSP

    # libgloss doesn't work native
    if [isnative] {
	return ""
    }

#    set ldflags ""
    # search for the general directories
    foreach i ".. ../.. ../../.. ../../../.." {
	if ![info exists gloss_srcdir] {
	    if [file exists ${srcdir}/$i/libgloss/${target_cpu} ] {
		verbose "Found ${srcdir}/$i/libgloss/${target_cpu}." 3
		set gloss_srcdir "$i/libgloss/${target_cpu}"
	    }
	}
	if ![info exists gloss_objdir] {
	    if [file exists ${base_dir}/$i/libgloss/${target_cpu} ] {
		verbose "Found ${base_dir}/$i/libgloss/${target_cpu}." 3
		set gloss_objdir "$i/libgloss/${target_cpu}"
		append ldflags " -L${gloss_objdir} "
	    }
	}
    }

    # find the crt0
    if [file exists ${gloss_objdir}/crt0.o] {
	verbose "Found ${base_dir}/$i/libgloss/${target_cpu}." 3
	set CRT0 "$i/libgloss/${target_cpu}"
	append ldflags " ${gloss_objdir}/crt0.o "
    } else {
	perror "No crt0.o built for this target"
    }
    
    # find the BSP (currently an object, it may become an archive soon)
    foreach i "[list_targets]" {
	if [info exists target_info($i,name}] {
	    if [file exists ${gloss_objdir}/${target_info}($i,name).o ] {
		set BSP "${target_info}($i,name).o"
		append ldflags " -lc -l ${target_info}($i,name).o -lc "
	    }
	}
    }
    if [expr ![info exists gloss_srcdir] || ![info exists gloss_srcdir]] {
	warning "No libgloss support in build tree"
	return ""
    } else {
	return "${ldflags}"
    }
}
@


1.1
log
@Synchronise with sources from savanaha repository
@
text
@@

