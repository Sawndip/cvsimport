head	1.2;
access;
symbols
	msnyder-tracepoint-checkpoint-branch:1.1.0.48
	msnyder-tracepoint-checkpoint-branchpoint:1.1
	ezannoni_pie-20040323-branch:1.1.0.46
	ezannoni_pie-20040323-branchpoint:1.1
	cagney_tramp-20040321-mergepoint:1.1
	cagney_tramp-20040309-branch:1.1.0.44
	cagney_tramp-20040309-branchpoint:1.1
	gdb_6_1-branch:1.1.0.42
	gdb_6_1-2004-03-01-gmt-branchpoint:1.1
	drow-cplus-merge-20040208:1.1
	carlton_dictionary-20040126-merge:1.1
	drow-cplus-merge-20040113:1.1
	drow-cplus-merge-20031224:1.1
	drow-cplus-merge-20031220:1.1
	carlton_dictionary-20031215-merge:1.1
	drow-cplus-merge-20031214:1.1
	carlton-dictionary-20031111-merge:1.1
	carlton_dictionary-20030917-merge:1.1
	ezannoni_pie-20030916-branchpoint:1.1
	ezannoni_pie-20030916-branch:1.1.0.40
	cagney_x86i386-20030821-branch:1.1.0.38
	cagney_x86i386-20030821-branchpoint:1.1
	carlton_dictionary-20030805-merge:1.1
	carlton_dictionary-20030627-merge:1.1
	gdb_6_0-branch:1.1.0.36
	gdb_6_0-2003-06-23-branchpoint:1.1
	cagney_convert-20030606-branch:1.1.0.34
	cagney_convert-20030606-branchpoint:1.1
	cagney_writestrings-20030508-branch:1.1.0.32
	cagney_writestrings-20030508-branchpoint:1.1
	carlton_dictionary-20030523-merge:1.1
	cagney_fileio-20030521-branch:1.1.0.30
	cagney_fileio-20030521-branchpoint:1.1
	carlton_dictionary-20030430-merge:1.1
	carlton_dictionary-20030416-merge:1.1
	cagney_frameaddr-20030409-mergepoint:1.1
	cagney_frameaddr-20030403-branchpoint:1.1
	cagney_frameaddr-20030403-branch:1.1.0.28
	cagney_framebase-20030330-mergepoint:1.1
	cagney_framebase-20030326-branch:1.1.0.26
	cagney_framebase-20030326-branchpoint:1.1
	cagney_lazyid-20030317-branch:1.1.0.24
	cagney_lazyid-20030317-branchpoint:1.1
	offbyone-20030313-branch:1.1.0.22
	offbyone-20030313-branchpoint:1.1
	carlton_dictionary-20030305-merge:1.1
	cagney_offbyone-20030303-branch:1.1.0.20
	cagney_offbyone-20030303-branchpoint:1.1
	carlton_dictionary-20030207-merge:1.1
	interps-20030202-branch:1.1.0.18
	interps-20030202-branchpoint:1.1
	cagney-unwind-20030108-branch:1.1.0.16
	cagney-unwind-20030108-branchpoint:1.1
	carlton_dictionary-20021223-merge:1.1
	carlton_dictionary-20021115-merge:1.1
	kseitz_interps-20021105-merge:1.1
	kseitz_interps-20021103-merge:1.1
	drow-cplus-merge-20021020:1.1
	drow-cplus-merge-20021025:1.1
	carlton_dictionary-20021025-merge:1.1
	carlton_dictionary-20021011-merge:1.1
	drow-cplus-branch:1.1.0.14
	drow-cplus-branchpoint:1.1
	kseitz_interps-20020930-merge:1.1
	carlton_dictionary-20020927-merge:1.1
	carlton_dictionary-branch:1.1.0.12
	carlton_dictionary-20020920-branchpoint:1.1
	sid-20020905-branchpoint:1.1
	sid-20020905-branch:1.1.0.10
	gdb_5_3-branch:1.1.0.8
	gdb_5_3-2002-09-04-branchpoint:1.1
	kseitz_interps-20020829-merge:1.1
	cagney_sysregs-20020825-branch:1.1.0.6
	cagney_sysregs-20020825-branchpoint:1.1
	readline_4_3-import-branch:1.1.0.4
	readline_4_3-import-branchpoint:1.1
	kseitz_interps-20020528-branch:1.1.0.2
	kseitz_interps-20020528-branchpoint:1.1;
locks; strict;
comment	@# @;


1.2
date	2005.06.29.01.58.49;	author bje;	state dead;
branches;
next	1.1;

1.1
date	2002.04.21.08.46.53;	author nickc;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Remove old version of DejaGnu.
@
text
@#
# test for verbose levels
#
#

global verbose

verbose "verbose level: >$verbose<" 0

# Modify output procedures to return instead of doing output
#
uplevel #0 {
    rename send_user send_user_saved
    rename send_error send_error_saved
    rename send_log send_log_saved
    proc send_user args {
	eval return "\{USER: [join $args]\}"
    }
    proc send_error args {
	eval return "\{ERROR: [join $args]\}"
    }
    proc send_log args {
	eval return "\{LOG: [join $args]\}"
    }
}

# Checkin verbose with out any swicthes
#
foreach level {0 1} {
    set szV [verbose "some text" $level]
    if {[string length $szV] == 0 && $level <= $verbose} {
	fail "verbose level $level, output expected"
    } else {
	if {[string length $szV] == 0} {
	    pass "No output expected"
	} else {
	    if [regexp "^USER:" $szV] {
		if [regexp "ERROR:" $szV] {
		    fail "Did detect ERROR in commands >$szV<"
		} else {
		    if {[string compare \
			    [string range $szV end end] "\n"] == 0} {
			pass "$szV"
		    } else {
			fail "Expected NL at end of >$szV<"
		    }
		}
	    } else {
		fail "Didn't used send_user"
	    }
	}
    }

    set szV [verbose {[set l some text]} $level]
    if {[string length $szV] == 0 && $level <= $verbose} {
	fail "verbose level $level, output expected"
    } else {
	if {[string length $szV] == 0} {
	    pass "No output expected"
	} else {
	    if [regexp "^USER:" $szV] {
		if [regexp "ERROR:" $szV] {
		    if {[string compare \
			    [string range $szV end end] "\n"] == 0} {
			pass "$szV"
		    } else {
			fail "Expected NL at end of >$szV<"
		    }
		} else {
		    fail "Didn't detect ERROR in commands >$szV<"
		}
	    } else {
		fail "Didn't used send_user"
	    }
	}
    }

    set szV [verbose {[set l "some text"]} $level]
    if {[string length $szV] == 0 && $level <= $verbose} {
	fail "verbose level $level, output expected"
    } else {
	if {[string length $szV] == 0} {
	    pass "No output expected"
	} else {
	    if [regexp "^USER:" $szV] {
		if [regexp "ERROR:" $szV] {
		    fail "Did detect ERROR in commands >$szV<"
		} else {
		    if {[string compare \
			    [string range $szV end end] "\n"] == 0} {
			pass "$szV"
		    } else {
			fail "Expected NL at end of >$szV<"
		    }
		}
	    } else {
		fail "Didn't used send_user"
	    }
	}
    }
}

# checking verbose --
#
foreach level {0 1} {
    set szV [verbose -- "some text" $level]
    if {[string length $szV] == 0 && $level <= $verbose} {
	fail "verbose level $level, output expected"
    } else {
	if {[string length $szV] == 0} {
	    pass "No output expected"
	} else {
	    if [regexp "^USER:" $szV] {
		if [regexp "ERROR:" $szV] {
		    fail "Did detect ERROR in commands >$szV<"
		} else {
		    if {[string compare \
			    [string range $szV end end] "\n"] == 0} {
			pass "$szV"
		    } else {
			fail "Expected NL at end of >$szV<"
		    }
		}
	    } else {
		fail "Didn't used send_user"
	    }
	}
    }

    set szV [verbose -- {[set l some text]} $level]
    if {[string length $szV] == 0 && $level <= $verbose} {
	fail "verbose level $level, output expected"
    } else {
	if {[string length $szV] == 0} {
	    pass "No output expected"
	} else {
	    if [regexp "^USER:" $szV] {
		if [regexp "ERROR:" $szV] {
		    if {[string compare \
			    [string range $szV end end] "\n"] == 0} {
			pass "$szV"
		    } else {
			fail "Expected NL at end of >$szV<"
		    }
		} else {
		    fail "Didn't detect ERROR in commands >$szV<"
		}
	    } else {
		fail "Didn't used send_user"
	    }
	}
    }

    set szV [verbose -- {[set l "some text"]} $level]
    if {[string length $szV] == 0 && $level <= $verbose} {
	fail "verbose level $level, output expected"
    } else {
	if {[string length $szV] == 0} {
	    pass "No output expected"
	} else {
	    if [regexp "^USER:" $szV] {
		if [regexp "ERROR:" $szV] {
		    fail "Did detect ERROR in commands >$szV<"
		} else {
		    if {[string compare \
			    [string range $szV end end] "\n"] == 0} {
			pass "$szV"
		    } else {
			fail "Expected NL at end of >$szV<"
		    }
		}
	    } else {
		fail "Didn't used send_user"
	    }
	}
    }
}

# Checking verbose -n (Suppress NL)
#
foreach level {0 1} {
    set szV [verbose -n "some text" $level]
    if {[string length $szV] == 0 && $level <= $verbose} {
	fail "verbose level $level, output expected"
    } else {
	if {[string length $szV] == 0} {
	    pass "No output expected"
	} else {
	    if [regexp "^USER:" $szV] {
		if [regexp "ERROR:" $szV] {
		    fail "Did detect ERROR in commands >$szV<"
		} else {
		    if {[string compare \
			    [string range $szV end end] "\n"] == 0} {
			fail "Didn't expected NL at end of >$szV<"
		    } else {
			pass "$szV"
		    }
		}
	    } else {
		fail "Didn't used send_user"
	    }
	}
    }

    set szV [verbose -n {[set l some text]} $level]
    if {[string length $szV] == 0 && $level <= $verbose} {
	fail "verbose level $level, output expected"
    } else {
	if {[string length $szV] == 0} {
	    pass "No output expected"
	} else {
	    if [regexp "^USER:" $szV] {
		if [regexp "ERROR:" $szV] {
		    if {[string compare \
			    [string range $szV end end] "\n"] == 0} {
			fail "Didn't expected NL at end of >$szV<"
		    } else {
			pass "$szV"
		    }
		} else {
		    fail "Didn't detect ERROR in commands >$szV<"
		}
	    } else {
		fail "Didn't used send_user"
	    }
	}
    }

    set szV [verbose -n {[set l "some text"]} $level]
    if {[string length $szV] == 0 && $level <= $verbose} {
	fail "verbose level $level, output expected"
    } else {
	if {[string length $szV] == 0} {
	    pass "No output expected"
	} else {
	    if [regexp "^USER:" $szV] {
		if [regexp "ERROR:" $szV] {
		    fail "Did detect ERROR in commands >$szV<"
		} else {
		    if {[string compare \
			    [string range $szV end end] "\n"] == 0} {
			fail "Didn't expected NL at end of >$szV<"
		    } else {
			pass "$szV"
		    }
		}
	    } else {
		fail "Didn't used send_user"
	    }
	}
    }
}

# checking verbose -log
#
foreach level {0 1} {
    set szV [verbose -log "some text" $level]
    if {[string length $szV] == 0 && $level <= $verbose} {
	fail "verbose level $level, output expected"
    } else {
	if {[string length $szV] == 0} {
	    pass "No output expected"
	} else {
	    if {$level > $verbose} {
		if [regexp "^LOG:" $szV] {
		    if [regexp "ERROR:" $szV] {
			fail "Did detect ERROR in commands >$szV<"
		    } else {
			if {[string compare \
				[string range $szV end end] "\n"] == 0} {
			    pass "$szV"
			} else {
			    fail "Expected NL at end of >$szV<"
			}
		    }
		} else {
		    fail "Didn't used send_user"
		}
	    } else {
		if [regexp "^USER:" $szV] {
		    if [regexp "ERROR:" $szV] {
			fail "Did detect ERROR in commands >$szV<"
		    } else {
			if {[string compare \
				[string range $szV end end] "\n"] == 0} {
			    pass "$szV"
			} else {
			    fail "Expected NL at end of >$szV<"
			}
		    }
		} else {
		    fail "Didn't used send_user"
		}
	    }
	}
    }

    set szV [verbose -log {[set l some text]} $level]
    if {[string length $szV] == 0 && $level <= $verbose} {
	fail "verbose level $level, output expected"
    } else {
	if {[string length $szV] == 0} {
	    pass "No output expected"
	} else {
	    if {$level > $verbose} {
		if [regexp "^LOG:" $szV] {
		    if [regexp "ERROR:" $szV] {
			if {[string compare \
				[string range $szV end end] "\n"] == 0} {
			    pass "$szV"
			} else {
			    fail "Expected NL at end of >$szV<"
			}
		    } else {
			fail "Didn't detect ERROR in commands >$szV<"
		    }
		} else {
		    fail "Didn't used send_user"
		}
	    } else {
		if [regexp "^USER:" $szV] {
		    if [regexp "ERROR:" $szV] {
			if {[string compare \
				[string range $szV end end] "\n"] == 0} {
			    pass "$szV"
			} else {
			    fail "Expected NL at end of >$szV<"
			}
		    } else {
			fail "Didn't detect ERROR in commands >$szV<"
		    }
		} else {
		    fail "Didn't used send_user"
		}
	    }
	}
    }

    set szV [verbose -log {[set l "some text"]} $level]
    if {[string length $szV] == 0 && $level <= $verbose} {
	fail "verbose level $level, output expected"
    } else {
	if {[string length $szV] == 0} {
	    pass "No output expected"
	} else {
	    if {$level > $verbose} {
		if [regexp "^LOG:" $szV] {
		    if [regexp "ERROR:" $szV] {
			fail "Did detect ERROR in commands >$szV<"
		    } else {
			if {[string compare \
				[string range $szV end end] "\n"] == 0} {
			    pass "$szV"
			} else {
			    fail "Expected NL at end of >$szV<"
			}
		    }
		} else {
		fail "Didn't used send_user"
		}
	    } else {
		if [regexp "^USER:" $szV] {
		    if [regexp "ERROR:" $szV] {
			fail "Did detect ERROR in commands >$szV<"
		    } else {
			if {[string compare \
				[string range $szV end end] "\n"] == 0} {
			    pass "$szV"
			} else {
			    fail "Expected NL at end of >$szV<"
			}
		    }
		} else {
		fail "Didn't used send_user"
		}
	    }
	}
    }
}

# checking verbose -n -log
#
foreach level {0 1} {
    set szV [verbose -n -log "some text" $level]
    if {[string length $szV] == 0 && $level <= $verbose} {
	fail "verbose level $level, output expected"
    } else {
	if {[string length $szV] == 0} {
	    pass "No output expected"
	} else {
	    if {$level > $verbose} {
		if [regexp "^LOG:" $szV] {
		    if [regexp "ERROR:" $szV] {
			fail "Did detect ERROR in commands >$szV<"
		    } else {
			if {[string compare \
				[string range $szV end end] "\n"] == 0} {
			    fail "Didn't expected NL at end of >$szV<"
			} else {
			    pass "$szV"
			}
		    }
		} else {
		    fail "Didn't used send_user"
		}
	    } else {
		if [regexp "^USER:" $szV] {
		    if [regexp "ERROR:" $szV] {
			fail "Did detect ERROR in commands >$szV<"
		    } else {
			if {[string compare \
				[string range $szV end end] "\n"] == 0} {
			    fail "Didn't expected NL at end of >$szV<"
			} else {
			    pass "$szV"
			}
		    }
		} else {
		    fail "Didn't used send_user"
		}
	    }
	}
    }

    set szV [verbose -log -n {[set l some text]} $level]
    if {[string length $szV] == 0 && $level <= $verbose} {
	fail "verbose level $level, output expected"
    } else {
	if {[string length $szV] == 0} {
	    pass "No output expected"
	} else {
	    if {$level > $verbose} {
		if [regexp "^LOG:" $szV] {
		    if [regexp "ERROR:" $szV] {
			if {[string compare \
				[string range $szV end end] "\n"] == 0} {
			    fail "Didn't expected NL at end of >$szV<"
			} else {
			    pass "$szV"
			}
		    } else {
			fail "Didn't detect ERROR in commands >$szV<"
		    }
		} else {
		    fail "Didn't used send_user"
		}
	    } else {
		if [regexp "^USER:" $szV] {
		    if [regexp "ERROR:" $szV] {
			if {[string compare \
				[string range $szV end end] "\n"] == 0} {
			    fail "Didn't expected NL at end of >$szV<"
			} else {
			    pass "$szV"
			}
		    } else {
			fail "Didn't detect ERROR in commands >$szV<"
		    }
		} else {
		    fail "Didn't used send_user"
		}
	    }
	}
    }

    set szV [verbose -n -log -- {[set l "some text"]} $level]
    if {[string length $szV] == 0 && $level <= $verbose} {
	fail "verbose level $level, output expected"
    } else {
	if {[string length $szV] == 0} {
	    pass "No output expected"
	} else {
	    if {$level > $verbose} {
		if [regexp "^LOG:" $szV] {
		    if [regexp "ERROR:" $szV] {
			fail "Did detect ERROR in commands >$szV<"
		    } else {
			if {[string compare \
				[string range $szV end end] "\n"] == 0} {
			    fail "Didn't expected NL at end of >$szV<"
			} else {
			    pass "$szV"
			}
		    }
		} else {
		fail "Didn't used send_user"
		}
	    } else {
		if [regexp "^USER:" $szV] {
		    if [regexp "ERROR:" $szV] {
			fail "Did detect ERROR in commands >$szV<"
		    } else {
			if {[string compare \
				[string range $szV end end] "\n"] == 0} {
			    fail "Didn't expected NL at end of >$szV<"
			} else {
			    pass "$szV"
			}
		    }
		} else {
		fail "Didn't used send_user"
		}
	    }
	}
    }
}

if {$verbose >= 1} {
    set szV [verbose -n -BB -log -- {[set l "some text"]} $level]
    if {[string length $szV] == 0 && $level <= $verbose} {
	fail "verbose level $level, ERROR output expected"
    } else {
	if [regexp "^ERROR:.*illegal argument:" $szV] {
	    setup_xfail
	}
	fail "$szV"
    }

    set szV [verbose]
    if {[string length $szV] == 0 && $level <= $verbose} {
	fail "verbose level $level, ERROR output expected"
    } else {
	if [regexp "^ERROR:.*nothing to print$" $szV] {
	    setup_xfail
	}
	fail "$szV"
    }

    set szV [verbose -n --]
    if {[string length $szV] == 0 && $level <= $verbose} {
	fail "verbose level $level, ERROR output expected"
    } else {
	if [regexp "^ERROR:.*nothing to print$" $szV] {
	    setup_xfail
	}
	fail "$szV"
    }

    set szV [verbose -n -- ABC def 100]
    if {[string length $szV] == 0 && $level <= $verbose} {
	fail "verbose level $level, ERROR output expected >$szV<"
    } else {
	if [regexp "^ERROR:.*Too many arguments$" $szV] {
	    setup_xfail
	}
	fail "$szV"
    }
} else {
    warning "NO verbose error returns tester, verbose level < 1"
}

# Restore original procedures
#
uplevel #0 {
    rename send_user ""
    rename send_error ""
    rename send_log ""
    rename send_user_saved send_user
    rename send_error_saved send_error
    rename send_log_saved send_log
}
@


1.1
log
@Synchronise with sources from savanaha repository
@
text
@@

