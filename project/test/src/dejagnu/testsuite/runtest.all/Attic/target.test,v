head	1.2;
access;
symbols
	msnyder-tracepoint-checkpoint-branch:1.1.1.1.0.60
	msnyder-tracepoint-checkpoint-branchpoint:1.1.1.1
	ezannoni_pie-20040323-branch:1.1.1.1.0.58
	ezannoni_pie-20040323-branchpoint:1.1.1.1
	cagney_tramp-20040321-mergepoint:1.1.1.1
	cagney_tramp-20040309-branch:1.1.1.1.0.56
	cagney_tramp-20040309-branchpoint:1.1.1.1
	gdb_6_1-branch:1.1.1.1.0.54
	gdb_6_1-2004-03-01-gmt-branchpoint:1.1.1.1
	drow-cplus-merge-20040208:1.1.1.1
	carlton_dictionary-20040126-merge:1.1.1.1
	drow-cplus-merge-20040113:1.1.1.1
	drow-cplus-merge-20031224:1.1.1.1
	drow-cplus-merge-20031220:1.1.1.1
	carlton_dictionary-20031215-merge:1.1.1.1
	drow-cplus-merge-20031214:1.1.1.1
	carlton-dictionary-20031111-merge:1.1.1.1
	carlton_dictionary-20030917-merge:1.1.1.1
	ezannoni_pie-20030916-branchpoint:1.1.1.1
	ezannoni_pie-20030916-branch:1.1.1.1.0.52
	cagney_x86i386-20030821-branch:1.1.1.1.0.50
	cagney_x86i386-20030821-branchpoint:1.1.1.1
	carlton_dictionary-20030805-merge:1.1.1.1
	carlton_dictionary-20030627-merge:1.1.1.1
	gdb_6_0-branch:1.1.1.1.0.48
	gdb_6_0-2003-06-23-branchpoint:1.1.1.1
	cagney_convert-20030606-branch:1.1.1.1.0.46
	cagney_convert-20030606-branchpoint:1.1.1.1
	cagney_writestrings-20030508-branch:1.1.1.1.0.44
	cagney_writestrings-20030508-branchpoint:1.1.1.1
	carlton_dictionary-20030523-merge:1.1.1.1
	cagney_fileio-20030521-branch:1.1.1.1.0.42
	cagney_fileio-20030521-branchpoint:1.1.1.1
	carlton_dictionary-20030430-merge:1.1.1.1
	carlton_dictionary-20030416-merge:1.1.1.1
	cagney_frameaddr-20030409-mergepoint:1.1.1.1
	cagney_frameaddr-20030403-branchpoint:1.1.1.1
	cagney_frameaddr-20030403-branch:1.1.1.1.0.40
	cagney_framebase-20030330-mergepoint:1.1.1.1
	cagney_framebase-20030326-branch:1.1.1.1.0.38
	cagney_framebase-20030326-branchpoint:1.1.1.1
	cagney_lazyid-20030317-branch:1.1.1.1.0.36
	cagney_lazyid-20030317-branchpoint:1.1.1.1
	offbyone-20030313-branch:1.1.1.1.0.34
	offbyone-20030313-branchpoint:1.1.1.1
	carlton_dictionary-20030305-merge:1.1.1.1
	cagney_offbyone-20030303-branch:1.1.1.1.0.32
	cagney_offbyone-20030303-branchpoint:1.1.1.1
	carlton_dictionary-20030207-merge:1.1.1.1
	interps-20030202-branch:1.1.1.1.0.30
	interps-20030202-branchpoint:1.1.1.1
	cagney-unwind-20030108-branch:1.1.1.1.0.28
	cagney-unwind-20030108-branchpoint:1.1.1.1
	carlton_dictionary-20021223-merge:1.1.1.1
	carlton_dictionary-20021115-merge:1.1.1.1
	kseitz_interps-20021105-merge:1.1.1.1
	kseitz_interps-20021103-merge:1.1.1.1
	drow-cplus-merge-20021020:1.1.1.1
	drow-cplus-merge-20021025:1.1.1.1
	carlton_dictionary-20021025-merge:1.1.1.1
	carlton_dictionary-20021011-merge:1.1.1.1
	drow-cplus-branch:1.1.1.1.0.26
	drow-cplus-branchpoint:1.1.1.1
	kseitz_interps-20020930-merge:1.1.1.1
	carlton_dictionary-20020927-merge:1.1.1.1
	carlton_dictionary-branch:1.1.1.1.0.24
	carlton_dictionary-20020920-branchpoint:1.1.1.1
	sid-20020905-branchpoint:1.1.1.1
	sid-20020905-branch:1.1.1.1.0.22
	gdb_5_3-branch:1.1.1.1.0.20
	gdb_5_3-2002-09-04-branchpoint:1.1.1.1
	kseitz_interps-20020829-merge:1.1.1.1
	cagney_sysregs-20020825-branch:1.1.1.1.0.18
	cagney_sysregs-20020825-branchpoint:1.1.1.1
	readline_4_3-import-branch:1.1.1.1.0.16
	readline_4_3-import-branchpoint:1.1.1.1
	kseitz_interps-20020528-branch:1.1.1.1.0.14
	kseitz_interps-20020528-branchpoint:1.1.1.1
	cagney_regbuf-20020515-branch:1.1.1.1.0.12
	cagney_regbuf-20020515-branchpoint:1.1.1.1
	gdb_5_2-branch:1.1.1.1.0.10
	gdb_5_2-2002-03-03-branchpoint:1.1.1.1
	cygnus_cvs_20020108_pre:1.1.1.1
	gdb_5_1_0_1-2002-01-03-branch:1.1.1.1.0.8
	gdb_5_1_0_1-2002-01-03-branchpoint:1.1.1.1
	gdb_5_1-2001-11-21-release:1.1.1.1
	gdb_s390-2001-09-26-branch:1.1.1.1.0.6
	gdb_s390-2001-09-26-branchpoint:1.1.1.1
	gdb_5_1-2001-07-29-branch:1.1.1.1.0.4
	gdb_5_1-2001-07-29-branchpoint:1.1.1.1
	gdb_5_0-2000-05-19-release:1.1.1.1
	gdb_4_18_2-2000-05-18-release:1.1.1.1
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.1
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.1
	gdb_5_0-2000-04-10-branch:1.1.1.1.0.2
	gdb_5_0-2000-04-10-branchpoint:1.1.1.1
	repo-unification-2000-02-06:1.1.1.1
	dejagnu-2000-02-04:1.1.1.1
	dejagnu-2000-01-31:1.1.1.1
	dejagnu-2000-01-24:1.1.1.1
	dejagnu-2000-01-17:1.1.1.1
	dejagnu-2000-01-10:1.1.1.1
	dejagnu-2000-01-04:1.1.1.1
	dejagnu-1999-12-21:1.1.1.1
	dejagnu-1999-12-13:1.1.1.1
	dejagnu-1999-12-07:1.1.1.1
	dejagnu-1999-12-06:1.1.1.1
	dejagnu-1999-11-15:1.1.1.1
	dejagnu-1999-11-08:1.1.1.1
	SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2005.06.29.01.58.57;	author bje;	state dead;
branches;
next	1.1;

1.1
date	99.11.09.01.28.42;	author jsm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.11.09.01.28.42;	author jsm;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Remove old version of DejaGnu.
@
text
@set srcdir [lindex $argv 0]
set subdir [lindex $argv 1]
set objdir [lindex $argv 2]

if [ file exists $objdir/setval.tmp ] {
    source $objdir/setval.tmp
} else {
    puts "ERROR: $objdir/setval.tmp doesn't exist"
}
if [ file exists $srcdir/$subdir/default_procs.tcl ] {
    source "$srcdir/$subdir/default_procs.tcl"
} else {
    puts "ERROR: $srcdir/$subdir/default_procs.tcl doesn't exist"
}

set file $srcdir/../lib/target.exp    
if [ file exists $file] {
    source $file
} else {
    puts "ERROR: $file doesn't exist"
}
# we load framework so we can use stuff like is3way
set file $srcdir/../lib/framework.exp    
if [ file exists $file] {
    source $file
} else {
    puts "ERROR: $file doesn't exist"
}
# we load the remote stuff so we can test execute_anywhere
set file $srcdir/../lib/remote.exp    
if [ file exists $file] {
    source $file
} else {
    puts "ERROR: $file doesn't exist"
}

#
# Create a false target config array
#
set target_info(idp,name)       "idp"
set target_info(idp,ldflags)    "-Tidp.ld"
set target_info(idp,config)     m68k-unknown-aout
set target_info(idp,cflags)     ""
set target_info(idp,connect)    "telnet"
set target_info(idp,target)     "s12"
set target_info(idp,serial)     "tstty12"
set target_info(idp,netport)    "localhost:23"
set target_info(idp,baud)       "9600"
# MVME target
set target_info(mvme,name)      "mvme"
set target_info(mvme,ldflags)   "-Tmvme.ld"
set target_info(mvme,config)    m68k-unknown-aout
set target_info(mvme,cflags)    ""
set target_info(mvme,connect)   "telnet"
set target_info(mvme,target)    "s12"
set target_info(mvme,serial)    "tstty8"
set target_info(mvme,netport)   "localhost:23"
set target_info(mvme,baud)      "9600"

# Test remote open. We try not to use any of the support procs in
# target.exp to for isolation testing. "target" is the name of the
# default array setup by the procs in target.exp.

set timeout 100

# test list_target

if { [list_targets] == "idp mvme" } {
    puts "PASSED: list_targets"
} else {
    puts "FAILED: list_targets"
}
push_config target idp
set matches 0
if { $target_info(target,name) == "idp" } {
    incr matches
}
if { $target_info(target,ldflags) == "-Tidp.ld" } {
    incr matches
}
if { $target_info(target,config) == "m68k-unknown-aout" } {
    incr matches
}
if { $target_info(target,cflags) == "" } {
    incr matches
}
if { $target_info(target,connect) == "telnet" } {
    incr matches
}
if { $target_info(target,target) == "s12" } {
    incr matches
}
if { $target_info(target,serial) == "tstty12" } {
    incr matches
}
if { $target_info(target,netport) == "localhost:23" } {
    incr matches
}
if { $target_info(target,baud) == "9600" } {
    incr matches
}
if { $matches == 9 } {
    puts "PASSED: push_config target"
} else {
    puts "FAILED: push_config target"
}

# test pop_config target
pop_config target
set matches 0
if { $target_info(target,name) == "" } {
    incr matches
}
if { $target_info(target,ldflags) == "" } {
    incr matches
}
if { $target_info(target,config) == "" } {
    incr matches
}
if { $target_info(target,cflags) == "" } {
    incr matches
}
if { $target_info(target,connect) == "" } {
    incr matches
}
if { $target_info(target,target) == "" } {
    incr matches
}
if { $target_info(target,serial) == "" } {
    incr matches
}
if { $target_info(target,netport) == "" } {
    incr matches
}
if { $target_info(target,baud) == "" } {
    incr matches
}
if { $matches == 9 } {
    puts "PASSED: pop_config target"
} else {
    puts "FAILED: pop_config target"
}

push_config host idp
set matches 0
if { $target_info(host,name) == "idp" } {
    incr matches
}
if { $target_info(host,ldflags) == "-Tidp.ld" } {
    incr matches
}
if { $target_info(host,config) == "m68k-unknown-aout" } {
    incr matches
}
if { $target_info(host,cflags) == "" } {
    incr matches
}
if { $target_info(host,connect) == "telnet" } {
    incr matches
}
if { $target_info(host,target) == "s12" } {
    incr matches
}
if { $target_info(host,serial) == "tstty12" } {
    incr matches
}
if { $target_info(host,netport) == "localhost:23" } {
    incr matches
}
if { $target_info(host,baud) == "9600" } {
    incr matches
}
if { $matches == 9 } {
    puts "PASSED: push_config target"
} else {
    puts "FAILED: push_config target"
}

# test pop_config host
pop_config host
set matches 0
if { $target_info(host,name) == "" } {
    incr matches
}
if { $target_info(host,ldflags) == "" } {
    incr matches
}
if { $target_info(host,config) == "" } {
    incr matches
}
if { $target_info(host,cflags) == "" } {
    incr matches
}
if { $target_info(host,connect) == "" } {
    incr matches
}
if { $target_info(host,target) == "" } {
    incr matches
}
if { $target_info(host,serial) == "" } {
    incr matches
}
if { $target_info(host,netport) == "" } {
    incr matches
}
if { $target_info(host,baud) == "" } {
    incr matches
}
if { $matches == 9 } {
    puts "PASSED: pop_config host"
} else {
    puts "FAILED: pop_config host"
}

# test execute_anywhere for a native environment
set host_triplet i586-unknown-linux
set target_triplet i586-unknown-linux
set build_triplet i586-unknown-linux
if { [string match "*setval.tmp*" [execute_anywhere "ls"]] } {
    puts "PASSED: execute_anywhere, native"
} else {
    puts "FAILED: execute_anywhere, native"
}

# test execute_anywhere for a normal cross
set target_triplet m68k-unknown-coff
if { [string match "*testsuite" [execute_anywhere "pwd"]] } {
    puts "PASSED: execute_anywhere, normal cross"
} else {
    puts "FAILED: execute_anywhere, normal cross"
}

# test execute_anywhere for a canadian cross
set build_triplet m68k-test-test
set target_info(host,connect) rlogin
set target_info(host,netport) $target_info(idp,netport)
set target_info(host,target)  localhost
if { [string match "*FooBar*" [execute_anywhere "echo FooBar"]] } {
    puts "PASSED: execute_anywhere, canadian cross"
} else {
    puts "FAILED: execute_anywhere, canadian cross"
}

# compile arg
# archive arg
# ranlib arg
# link_objects arg
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@import dejagnu-1999-11-08 snapshot
@
text
@@
