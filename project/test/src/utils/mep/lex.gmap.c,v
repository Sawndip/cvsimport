head	1.3;
access;
symbols;
locks; strict;
comment	@ * @;


1.3
date	2009.04.30.18.47.31;	author dj;	state Exp;
branches;
next	1.2;

1.2
date	2009.04.08.01.57.29;	author dj;	state Exp;
branches;
next	1.1;

1.1
date	2007.02.05.20.34.31;	author brolley;	state Exp;
branches;
next	;


desc
@@


1.3
log
@* default.cfg: Add IVC2 coprocessor.
* current.cfg: Regenerate.
* lex.cfg.c: Regenerate.
* lex.cmodel.c: Regenerate.
* lex.gmap.c: Regenerate.
* mepcfgtool.c (do_cpu_config): Add IVC2 support.
(do_cgen_config_opc): Likewise.
(gen_cpu_Makefile_in_only_config1): Likewise.
(gen_cpu_Makefile_in_only_config2): Likewise.
(gen_cpu_Makefile_config): Likewise.
* verify-cfg.c (process_cop_ip): Add IVC2 support.
@
text
@#line 2 "../../../src/utils/mep/lex.gmap.c"

#line 4 "../../../src/utils/mep/lex.gmap.c"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer gmap_create_buffer
#define yy_delete_buffer gmap_delete_buffer
#define yy_flex_debug gmap_flex_debug
#define yy_init_buffer gmap_init_buffer
#define yy_flush_buffer gmap_flush_buffer
#define yy_load_buffer_state gmap_load_buffer_state
#define yy_switch_to_buffer gmap_switch_to_buffer
#define yyin gmapin
#define yyleng gmapleng
#define yylex gmaplex
#define yylineno gmaplineno
#define yyout gmapout
#define yyrestart gmaprestart
#define yytext gmaptext
#define yywrap gmapwrap
#define yyalloc gmapalloc
#define yyrealloc gmaprealloc
#define yyfree gmapfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE gmaprestart(gmapin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int gmapleng;

extern FILE *gmapin, *gmapout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE gmaplex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-gmaplineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < gmapleng; ++yyl )\
                    if ( gmaptext[yyl] == '\n' )\
                        --gmaplineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up gmaptext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up gmaptext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via gmaprestart()), so that the user can continue scanning by
	 * just pointing gmapin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when gmaptext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int gmapleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow gmapwrap()'s to do buffer switches
 * instead of setting up a fresh gmapin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void gmaprestart (FILE *input_file  );
void gmap_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE gmap_create_buffer (FILE *file,int size  );
void gmap_delete_buffer (YY_BUFFER_STATE b  );
void gmap_flush_buffer (YY_BUFFER_STATE b  );
void gmappush_buffer_state (YY_BUFFER_STATE new_buffer  );
void gmappop_buffer_state (void );

static void gmapensure_buffer_stack (void );
static void gmap_load_buffer_state (void );
static void gmap_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER gmap_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE gmap_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE gmap_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE gmap_scan_bytes (yyconst char *bytes,int len  );

void *gmapalloc (yy_size_t  );
void *gmaprealloc (void *,yy_size_t  );
void gmapfree (void *  );

#define yy_new_buffer gmap_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        gmapensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            gmap_create_buffer(gmapin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        gmapensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            gmap_create_buffer(gmapin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define gmapwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *gmapin = (FILE *) 0, *gmapout = (FILE *) 0;

typedef int yy_state_type;

extern int gmaplineno;

int gmaplineno = 1;

extern char *gmaptext;
#define yytext_ptr gmaptext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up gmaptext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	gmapleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 9
#define YY_END_OF_BUFFER 10
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[22] =
    {   0,
        1,    1,   10,    8,    1,    1,    6,    8,    4,    5,
        7,    1,    0,    4,    0,    5,    7,    0,    2,    3,
        0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    1,    1,    1,    1,    1,    1,    4,
        4,    1,    1,    1,    1,    1,    5,    6,    7,    7,
        7,    7,    7,    7,    7,    8,    8,    4,    4,    1,
        1,    1,    1,    1,    9,    9,    9,    9,    9,    9,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   11,   10,   10,
        1,    1,    1,    1,   12,    1,    9,    9,    9,    9,

        9,    9,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   13,
       10,   10,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[14] =
    {   0,
        1,    2,    2,    1,    1,    3,    3,    4,    5,    6,
        7,    3,    7
    } ;

static yyconst flex_int16_t yy_base[29] =
    {   0,
        0,    0,   40,   41,    0,    0,   41,   34,    3,    0,
        0,    0,   17,    0,    0,    0,    0,   16,   41,    0,
       41,   16,   14,   19,   21,   28,   12,   33
    } ;

static yyconst flex_int16_t yy_def[29] =
    {   0,
       21,    1,   21,   21,   22,   22,   21,   21,   23,   24,
       25,   22,   26,   27,   28,   24,   25,   26,   21,   28,
        0,   21,   21,   21,   21,   21,   21,   21
    } ;

static yyconst flex_int16_t yy_nxt[55] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   10,   11,   11,
       11,    4,   11,   15,   14,   15,   14,   12,   19,   19,
       14,   16,   16,   17,   17,   17,   17,   17,   18,   18,
       18,   18,   18,   18,   18,   20,   20,   20,   13,   21,
        3,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21
    } ;

static yyconst flex_int16_t yy_chk[55] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    9,   27,    9,   23,   22,   18,   13,
       23,   24,   24,   25,   25,   25,   25,   25,   26,   26,
       26,   26,   26,   26,   26,   28,   28,   28,    8,    3,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[10] =
    {   0,
1, 1, 0, 0, 0, 0, 0, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int gmap_flex_debug;
int gmap_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *gmaptext;
#line 1 "../../../src/utils/mep/gmap.l"
#line 2 "../../../src/utils/mep/gmap.l"
#include "mepcfgtool.h"
#include "parse.gmap.h"
#include "string.h"
#include "ctype.h"
#include <stdlib.h>

extern char *gmapfilename;

static unsigned long
num (char *in, int base)
{
 char *tmp, *p;
 unsigned long res;
 tmp = strdup (in);
 if (! tmp)
 {
  fprintf (stderr, "%s:%d strdup failed (fatal)\n", 
		   gmapfilename, gmaplineno);
  abort ();   
 }
 for (p = tmp; *in; ++in)
 {
   if (*in == '_')
    continue;
   *p++ = *in;
 }
 *p = 0;
 res = strtoul (tmp, NULL, base);
 free (tmp);
 return res;
}

#line 540 "../../../src/utils/mep/lex.gmap.c"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int gmaplex_destroy (void );

int gmapget_debug (void );

void gmapset_debug (int debug_flag  );

YY_EXTRA_TYPE gmapget_extra (void );

void gmapset_extra (YY_EXTRA_TYPE user_defined  );

FILE *gmapget_in (void );

void gmapset_in  (FILE * in_str  );

FILE *gmapget_out (void );

void gmapset_out  (FILE * out_str  );

int gmapget_leng (void );

char *gmapget_text (void );

int gmapget_lineno (void );

void gmapset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int gmapwrap (void );
#else
extern int gmapwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( gmaptext, gmapleng, 1, gmapout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		unsigned n; \
		for ( n = 0; n < max_size && \
			     (c = getc( gmapin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( gmapin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, gmapin))==0 && ferror(gmapin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(gmapin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int gmaplex (void);

#define YY_DECL int gmaplex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after gmaptext and gmapleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 52 "../../../src/utils/mep/gmap.l"


#line 725 "../../../src/utils/mep/lex.gmap.c"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! gmapin )
			gmapin = stdin;

		if ( ! gmapout )
			gmapout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			gmapensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				gmap_create_buffer(gmapin,YY_BUF_SIZE );
		}

		gmap_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of gmaptext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 22 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 41 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < gmapleng; ++yyl )
				if ( gmaptext[yyl] == '\n' )
					   
    gmaplineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 54 "../../../src/utils/mep/gmap.l"
;
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 55 "../../../src/utils/mep/gmap.l"
;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 57 "../../../src/utils/mep/gmap.l"
{ gmaplval.num = num (gmaptext, 16); return NUM; } 
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 58 "../../../src/utils/mep/gmap.l"
{ gmaplval.num = num (gmaptext, 8);  return NUM; } 
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 59 "../../../src/utils/mep/gmap.l"
{ gmaplval.num = num (gmaptext, 10); return NUM; } 
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 61 "../../../src/utils/mep/gmap.l"
{ return gmaptext[0]; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 62 "../../../src/utils/mep/gmap.l"
{ gmaplval.str = strdup (gmaptext); return STR; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 64 "../../../src/utils/mep/gmap.l"
{ printf( "%s:%d: bad token %s\n", gmapfilename, gmaplineno, gmaptext ); }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 66 "../../../src/utils/mep/gmap.l"
ECHO;
	YY_BREAK
#line 865 "../../../src/utils/mep/lex.gmap.c"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed gmapin at a new source and called
			 * gmaplex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = gmapin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( gmapwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * gmaptext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of gmaplex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					gmaprealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			gmaprestart(gmapin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) gmaprealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 22 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 22 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 21);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up gmaptext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --gmaplineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					gmaprestart(gmapin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( gmapwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve gmaptext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    gmaplineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @@param input_file A readable stream.
 * 
 * @@note This function does not reset the start condition to @@c INITIAL .
 */
    void gmaprestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        gmapensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            gmap_create_buffer(gmapin,YY_BUF_SIZE );
	}

	gmap_init_buffer(YY_CURRENT_BUFFER,input_file );
	gmap_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @@param new_buffer The new input buffer.
 * 
 */
    void gmap_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		gmappop_buffer_state();
	 *		gmappush_buffer_state(new_buffer);
     */
	gmapensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	gmap_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (gmapwrap()) processing, but the only time this flag
	 * is looked at is after gmapwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void gmap_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	gmapin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @@param file A readable stream.
 * @@param size The character buffer size in bytes. When in doubt, use @@c YY_BUF_SIZE.
 * 
 * @@return the allocated buffer state.
 */
    YY_BUFFER_STATE gmap_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) gmapalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in gmap_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) gmapalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in gmap_create_buffer()" );

	b->yy_is_our_buffer = 1;

	gmap_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @@param b a buffer created with gmap_create_buffer()
 * 
 */
    void gmap_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		gmapfree((void *) b->yy_ch_buf  );

	gmapfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a gmaprestart() or at EOF.
 */
    static void gmap_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	gmap_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then gmap_init_buffer was _probably_
     * called from gmaprestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @@param b the buffer state to be flushed, usually @@c YY_CURRENT_BUFFER.
 * 
 */
    void gmap_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		gmap_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @@param new_buffer The new state.
 *  
 */
void gmappush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	gmapensure_buffer_stack();

	/* This block is copied from gmap_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from gmap_switch_to_buffer. */
	gmap_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void gmappop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	gmap_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		gmap_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void gmapensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)gmapalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in gmapensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)gmaprealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in gmapensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @@param base the character buffer
 * @@param size the size in bytes of the character buffer
 * 
 * @@return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE gmap_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) gmapalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in gmap_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	gmap_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to gmaplex() will
 * scan from a @@e copy of @@a str.
 * @@param yystr a NUL-terminated string to scan
 * 
 * @@return the newly allocated buffer state object.
 * @@note If you want to scan bytes that may contain NUL values, then use
 *       gmap_scan_bytes() instead.
 */
YY_BUFFER_STATE gmap_scan_string (yyconst char * yystr )
{
    
	return gmap_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to gmaplex() will
 * scan from a @@e copy of @@a bytes.
 * @@param bytes the byte buffer to scan
 * @@param len the number of bytes in the buffer pointed to by @@a bytes.
 * 
 * @@return the newly allocated buffer state object.
 */
YY_BUFFER_STATE gmap_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) gmapalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in gmap_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = gmap_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in gmap_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up gmaptext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		gmaptext[gmapleng] = (yy_hold_char); \
		(yy_c_buf_p) = gmaptext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		gmapleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int gmapget_lineno  (void)
{
        
    return gmaplineno;
}

/** Get the input stream.
 * 
 */
FILE *gmapget_in  (void)
{
        return gmapin;
}

/** Get the output stream.
 * 
 */
FILE *gmapget_out  (void)
{
        return gmapout;
}

/** Get the length of the current token.
 * 
 */
int gmapget_leng  (void)
{
        return gmapleng;
}

/** Get the current token.
 * 
 */

char *gmapget_text  (void)
{
        return gmaptext;
}

/** Set the current line number.
 * @@param line_number
 * 
 */
void gmapset_lineno (int  line_number )
{
    
    gmaplineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @@param in_str A readable stream.
 * 
 * @@see gmap_switch_to_buffer
 */
void gmapset_in (FILE *  in_str )
{
        gmapin = in_str ;
}

void gmapset_out (FILE *  out_str )
{
        gmapout = out_str ;
}

int gmapget_debug  (void)
{
        return gmap_flex_debug;
}

void gmapset_debug (int  bdebug )
{
        gmap_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from gmaplex_destroy(), so don't allocate here.
     */

    /* We do not touch gmaplineno unless the option is enabled. */
    gmaplineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    gmapin = stdin;
    gmapout = stdout;
#else
    gmapin = (FILE *) 0;
    gmapout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * gmaplex_init()
     */
    return 0;
}

/* gmaplex_destroy is for both reentrant and non-reentrant scanners. */
int gmaplex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		gmap_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		gmappop_buffer_state();
	}

	/* Destroy the stack itself. */
	gmapfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * gmaplex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *gmapalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *gmaprealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void gmapfree (void * ptr )
{
	free( (char *) ptr );	/* see gmaprealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 66 "../../../src/utils/mep/gmap.l"




@


1.2
log
@* default.cfg: Update to C5.
* current.cfg: Regenerate.
* lex.cfg.c: Regenerate.
* lex.cmodel.c: Regenerate.
* lex.gmap.c: Regenerate.
* mepcfgtool.c: Add C5 support.
(do_config_cc_support): Allow -mconfig to be optional.
(align_xmem_base): New.
(next_xmem_base): New.
(scan_dmem): Use them to place memory regions.
(find_ld_imem_dmem): Likewise.
* mepcfgtool.h: Add C5 support.
* parse.cfg.c: Regenerate.
* parse.cfg.h: Regenerate.
* parse.cmodel.c: Regenerate.
* parse.cmodel.h: Regenerate.
* parse.gmap.c: Regenerate.
* parse.gmap.h: Regenerate.
* verify-cfg.c: Add C5 support.
@
text
@d1 1
a1 1
#line 2 "/greed/dj/ges/toshmep/fsf-regen/src/utils/mep/lex.gmap.c"
d3 1
a3 1
#line 4 "/greed/dj/ges/toshmep/fsf-regen/src/utils/mep/lex.gmap.c"
d505 2
a506 2
#line 1 "/greed/dj/ges/toshmep/fsf-regen/src/utils/mep/gmap.l"
#line 2 "/greed/dj/ges/toshmep/fsf-regen/src/utils/mep/gmap.l"
d539 1
a539 1
#line 540 "/greed/dj/ges/toshmep/fsf-regen/src/utils/mep/lex.gmap.c"
d721 1
a721 1
#line 52 "/greed/dj/ges/toshmep/fsf-regen/src/utils/mep/gmap.l"
d724 1
a724 1
#line 725 "/greed/dj/ges/toshmep/fsf-regen/src/utils/mep/lex.gmap.c"
d820 1
a820 1
#line 54 "/greed/dj/ges/toshmep/fsf-regen/src/utils/mep/gmap.l"
d826 1
a826 1
#line 55 "/greed/dj/ges/toshmep/fsf-regen/src/utils/mep/gmap.l"
d831 1
a831 1
#line 57 "/greed/dj/ges/toshmep/fsf-regen/src/utils/mep/gmap.l"
d836 1
a836 1
#line 58 "/greed/dj/ges/toshmep/fsf-regen/src/utils/mep/gmap.l"
d841 1
a841 1
#line 59 "/greed/dj/ges/toshmep/fsf-regen/src/utils/mep/gmap.l"
d846 1
a846 1
#line 61 "/greed/dj/ges/toshmep/fsf-regen/src/utils/mep/gmap.l"
d851 1
a851 1
#line 62 "/greed/dj/ges/toshmep/fsf-regen/src/utils/mep/gmap.l"
d856 1
a856 1
#line 64 "/greed/dj/ges/toshmep/fsf-regen/src/utils/mep/gmap.l"
d861 1
a861 1
#line 66 "/greed/dj/ges/toshmep/fsf-regen/src/utils/mep/gmap.l"
d864 1
a864 1
#line 865 "/greed/dj/ges/toshmep/fsf-regen/src/utils/mep/lex.gmap.c"
d1874 1
a1874 1
#line 66 "/greed/dj/ges/toshmep/fsf-regen/src/utils/mep/gmap.l"
@


1.1
log
@2007-02-05  Dave Brolley  <brolley@@redhat.com>

        * Makefile.def: Add support for mep.
        * configure.ac: Likewise.
        * Makefile.in: Regenerated.
        * configure: Regenerated.
        * Contribute the following changes:
        2001-07-06  DJ Delorie  <dj@@redhat.com>

        * mep: New subdirectory and contents.
@
text
@d1 8
a10 3
#define yy_scan_buffer gmap_scan_buffer
#define yy_scan_string gmap_scan_string
#define yy_scan_bytes gmap_scan_bytes
d19 1
d23 4
a26 8
#define yylineno gmaplineno

#line 20 "/home/brolley/sources/src/utils/mep/lex.gmap.c"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /cvs/cvsfiles/gnupro/flex/skel.c,v 1.1.1.1 2003/01/27 23:07:26 blc Exp $
 */
d31 6
d38 1
d40 3
d44 1
d46 56
a101 4
/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
d103 2
d107 1
a110 6
#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

d116 2
a117 1
#if __STDC__
a118 1
#define YY_USE_PROTOS
d121 1
a121 1
#endif	/* __STDC__ */
a123 9
#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

a129 7

#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

d144 1
a144 1
#define BEGIN yy_start = 1 + 2 *
d150 1
a150 1
#define YY_START ((yy_start - 1) / 2)
d157 1
a157 1
#define YY_NEW_FILE yyrestart( yyin )
d162 1
d164 5
d170 2
d173 3
d177 1
a177 2
extern int yyleng;
extern FILE *yyin, *yyout;
d183 16
a198 16
/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

d202 7
a208 4
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
d212 1
a212 7
#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;
d214 4
d219 2
d257 3
d266 1
d276 2
a277 2
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
d280 1
d282 1
d284 4
a287 1
static YY_BUFFER_STATE yy_current_buffer = 0;
d292 2
d295 3
a297 1
#define YY_CURRENT_BUFFER yy_current_buffer
d299 4
d304 1
a304 1
/* yy_hold_char holds the character lost when yytext is formed. */
a305 1

d307 1
a307 3


int yyleng;
d311 1
a311 1
static int yy_init = 1;		/* whether we need to initialize */
d314 2
a315 2
/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
d319 21
a339 17
void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));
d341 1
a341 1
#define yy_new_buffer yy_create_buffer
d345 6
a350 3
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
d355 6
a360 3
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
d363 1
a363 1
#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)
d365 1
d367 2
a368 1
#define YY_USES_REJECT
a369 2
#define yywrap() 1
#define YY_SKIP_YYWRAP
d371 3
a373 1
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
d375 12
a386 9
extern int yylineno;
int yylineno = 1;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));
d389 1
a389 1
 * corresponding action - sets up yytext.
d392 3
a394 3
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
d396 1
a396 1
	yy_c_buf_p = yy_cp;
d400 8
a407 1
static yyconst short int yy_acclist[31] =
d409 3
a411 3
        1,    1,   10,    8,    9,    1,    8,    9,    1,    9,
        6,    8,    9,    8,    9,    4,    8,    9,    5,    8,
        9,    7,    8,    9,    1,    4,    5,    7,    2,    3
d414 1
a414 8
static yyconst short int yy_accept[23] =
    {   0,
        1,    2,    3,    4,    6,    9,   11,   14,   16,   19,
       22,   25,   26,   26,   27,   27,   28,   29,   29,   30,
       31,   31
    } ;

static yyconst int yy_ec[256] =
d422 8
a429 8
        1,    1,    1,    1,   10,   10,   10,   10,   10,   10,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   12,   11,   11,
        1,    1,    1,    1,    9,    1,   10,   10,   10,   10,

       10,   10,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   12,
       11,   11,    1,    1,    1,    1,    1,    1,    1,    1,
d446 1
a446 1
static yyconst int yy_meta[13] =
d448 2
a449 2
        1,    2,    2,    1,    1,    3,    3,    4,    3,    5,
        6,    7
d452 1
a452 1
static yyconst short int yy_base[28] =
d454 3
a456 3
        0,    0,   38,   39,    0,    0,   39,   32,   24,    0,
        0,    0,   32,    4,    0,    0,    0,   12,   39,    0,
       39,   12,   10,   15,   17,   24,   29
d459 1
a459 1
static yyconst short int yy_def[28] =
d462 2
a463 2
       25,   22,   26,   23,   27,   24,   25,   26,   21,   27,
        0,   21,   21,   21,   21,   21,   21
d466 1
a466 1
static yyconst short int yy_nxt[52] =
d468 6
a473 6
        4,    5,    6,    7,    8,    9,   10,   10,    4,   11,
       11,   11,   14,   12,   19,   21,   14,   16,   16,   17,
       17,   17,   17,   17,   18,   18,   18,   18,   18,   18,
       18,   20,   20,   20,   19,   15,   13,   21,    3,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21
d476 1
a476 1
static yyconst short int yy_chk[52] =
d479 3
a481 3
        1,    1,   23,   22,   18,   14,   23,   24,   24,   25,
       25,   25,   25,   25,   26,   26,   26,   26,   26,   26,
       26,   27,   27,   27,   13,    9,    8,    3,   21,   21,
d483 1
a483 1
       21
d486 15
a500 10
static yy_state_type yy_state_buf[YY_BUF_SIZE + 2], *yy_state_ptr;
static char *yy_full_match;
static int yy_lp;
#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
++yy_lp; \
goto find_rule; \
}
d503 4
a506 4
char *yytext;
#line 1 "/home/brolley/sources/src/utils/mep/gmap.l"
#define INITIAL 0
#line 2 "/home/brolley/sources/src/utils/mep/gmap.l"
d539 46
a584 1
#line 447 "/home/brolley/sources/src/utils/mep/lex.gmap.c"
d592 1
a592 1
extern "C" int yywrap YY_PROTO(( void ));
d594 1
a594 1
extern int yywrap YY_PROTO(( void ));
d598 4
a601 2
#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
d604 2
a605 2
#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
d609 1
d611 1
a611 20
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

d613 1
a613 3
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
a615 13
#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
a623 1

d628 1
a628 1
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
d636 1
a636 1
	if ( yy_current_buffer->yy_is_interactive ) \
d638 2
a639 1
		int c = '*', n; \
d641 1
a641 1
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
d645 1
a645 1
		if ( c == EOF && ferror( yyin ) ) \
d649 16
a664 3
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
d685 2
d691 6
a696 2
#define YY_DECL int yylex YY_PROTO(( void ))
#endif
d698 1
a698 1
/* Code executed at the beginning of each rule, after yytext and yyleng
d713 2
d716 1
a716 1
	{
d720 2
a721 2

#line 52 "/home/brolley/sources/src/utils/mep/gmap.l"
d724 1
a724 1
#line 597 "/home/brolley/sources/src/utils/mep/lex.gmap.c"
d726 1
a726 1
	if ( yy_init )
d728 1
a728 1
		yy_init = 0;
d734 2
a735 2
		if ( ! yy_start )
			yy_start = 1;	/* first start state */
d737 2
a738 2
		if ( ! yyin )
			yyin = stdin;
d740 2
a741 2
		if ( ! yyout )
			yyout = stdout;
d743 5
a747 3
		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );
d749 1
a749 1
		yy_load_buffer_state();
d754 1
a754 1
		yy_cp = yy_c_buf_p;
d756 2
a757 2
		/* Support of yytext. */
		*yy_cp = yy_hold_char;
d764 1
a764 3
		yy_current_state = yy_start;
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
d769 5
a780 1
			*yy_state_ptr++ = yy_current_state;
d783 1
a783 1
		while ( yy_base[yy_current_state] != 39 );
d786 6
a791 16
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
					{
					yy_full_match = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
d796 1
a796 1
		if ( yy_act != YY_END_OF_BUFFER )
d799 5
a803 3
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					++yylineno;
a807 1

d810 7
d818 1
d820 1
a820 1
#line 54 "/home/brolley/sources/src/utils/mep/gmap.l"
d824 1
d826 1
a826 1
#line 55 "/home/brolley/sources/src/utils/mep/gmap.l"
d831 1
a831 1
#line 57 "/home/brolley/sources/src/utils/mep/gmap.l"
d836 1
a836 1
#line 58 "/home/brolley/sources/src/utils/mep/gmap.l"
d841 1
a841 1
#line 59 "/home/brolley/sources/src/utils/mep/gmap.l"
d846 1
a846 1
#line 61 "/home/brolley/sources/src/utils/mep/gmap.l"
d851 1
a851 1
#line 62 "/home/brolley/sources/src/utils/mep/gmap.l"
d856 1
a856 1
#line 64 "/home/brolley/sources/src/utils/mep/gmap.l"
d861 1
a861 1
#line 66 "/home/brolley/sources/src/utils/mep/gmap.l"
d864 3
a866 3
#line 733 "/home/brolley/sources/src/utils/mep/lex.gmap.c"
			case YY_STATE_EOF(INITIAL):
				yyterminate();
d871 1
a871 1
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;
d874 2
a875 1
		*yy_cp = yy_hold_char;
d877 1
a877 1
		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
d881 3
a883 3
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
d888 3
a890 3
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
d900 1
a900 1
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
d904 1
a904 1
			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;
d906 1
a906 1
			yy_current_state = yy_get_previous_state();
d919 1
a919 1
			yy_bp = yytext_ptr + YY_MORE_ADJ;
d924 1
a924 1
				yy_cp = ++yy_c_buf_p;
d931 1
a931 1
				yy_cp = yy_c_buf_p;
d936 1
a936 1
		else switch ( yy_get_next_buffer() )
d940 1
a940 1
				yy_did_buffer_switch_on_eof = 0;
d942 1
a942 1
				if ( yywrap() )
d946 1
a946 1
					 * yytext, we can now set up
d953 1
a953 1
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;
d961 1
a961 1
					if ( ! yy_did_buffer_switch_on_eof )
d968 2
a969 2
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;
d971 1
a971 1
				yy_current_state = yy_get_previous_state();
d973 2
a974 2
				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
d978 2
a979 2
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];
d981 1
a981 1
				yy_current_state = yy_get_previous_state();
d983 2
a984 2
				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
d995 1
a995 2
	} /* end of yylex */

d1004 4
a1007 5

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
d1011 1
a1011 1
	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
d1015 1
a1015 1
	if ( yy_current_buffer->yy_fill_buffer == 0 )
d1017 1
a1017 1
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
d1019 1
a1019 1
			/* We matched a singled characater, the EOB, so
d1037 1
a1037 1
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;
d1042 1
a1042 1
	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
d1046 1
a1046 1
		yy_n_chars = 0;
d1050 2
a1051 2
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;
a1054 4
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else
d1057 1
a1057 1
			YY_BUFFER_STATE b = yy_current_buffer;
d1060 1
a1060 1
				(int) (yy_c_buf_p - b->yy_ch_buf);
d1073 1
a1073 2
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
d1083 1
a1083 1
			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];
d1085 1
a1085 1
			num_to_read = yy_current_buffer->yy_buf_size -
d1087 1
a1087 1
#endif
d1094 4
a1097 2
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );
d1100 1
a1100 1
	if ( yy_n_chars == 0 )
d1105 1
a1105 1
			yyrestart( yyin );
d1111 1
a1111 1
			yy_current_buffer->yy_buffer_status =
d1119 7
a1125 3
	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;
d1127 5
a1131 1
	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];
d1134 1
a1134 2
	}

d1138 2
a1139 2
static yy_state_type yy_get_previous_state()
	{
d1142 2
d1145 1
a1145 5
	yy_current_state = yy_start;
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
d1148 5
a1159 1
		*yy_state_ptr++ = yy_current_state;
d1163 1
a1163 2
	}

d1170 2
a1171 8

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
d1173 1
d1176 5
a1187 1
	*yy_state_ptr++ = yy_current_state;
d1191 1
a1191 1
	}
d1193 5
d1199 2
a1200 13
#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;
d1202 1
a1202 1
	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
d1205 3
a1207 3
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
d1209 1
a1209 1
				&yy_current_buffer->yy_ch_buf[number_to_move];
d1211 1
a1211 1
		while ( source > yy_current_buffer->yy_ch_buf )
d1216 2
a1217 1
		yy_n_chars = yy_current_buffer->yy_buf_size;
d1219 1
a1219 1
		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
d1225 8
a1232 9
	if ( c == '\n' )
		--yylineno;

	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */

d1234 1
d1236 1
a1236 1
static int yyinput()
d1238 1
a1238 1
static int input()
d1240 2
a1241 1
	{
d1243 2
d1246 1
a1246 3
	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
d1252 1
a1252 1
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
d1254 1
a1254 1
			*yy_c_buf_p = '\0';
d1258 2
a1259 2
			yytext_ptr = yy_c_buf_p;
			++yy_c_buf_p;
d1261 1
a1261 1
			switch ( yy_get_next_buffer() )
d1263 16
d1281 1
a1281 4
					if ( yywrap() )
						{
						yy_c_buf_p =
						yytext_ptr + YY_MORE_ADJ;
a1282 1
						}
d1284 1
a1284 1
					if ( ! yy_did_buffer_switch_on_eof )
d1294 1
a1294 1
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;
a1295 9

				case EOB_ACT_LAST_MATCH:
#ifdef __cplusplus
					YY_FATAL_ERROR(
					"unexpected last match in yyinput()" );
#else
					YY_FATAL_ERROR(
					"unexpected last match in input()" );
#endif
d1300 3
a1302 3
	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;
d1305 3
a1307 1
		++yylineno;
d1310 2
a1311 1
	}
d1313 12
a1324 13

#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
d1327 3
d1331 14
a1344 8
#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
d1347 1
a1347 1
	if ( yy_current_buffer )
d1350 3
a1352 3
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
d1355 2
a1356 2
	yy_current_buffer = new_buffer;
	yy_load_buffer_state();
d1359 2
a1360 2
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
d1363 2
a1364 2
	yy_did_buffer_switch_on_eof = 1;
	}
d1366 7
d1374 8
a1381 21
#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
d1383 2
a1384 2

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
d1386 1
a1386 1
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );
d1393 1
a1393 1
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
d1395 1
a1395 1
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );
d1399 1
a1399 1
	yy_init_buffer( b, file );
d1402 1
a1402 1
	}
d1404 7
a1410 8

#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
d1414 2
a1415 2
	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;
d1418 1
a1418 1
		yy_flex_free( (void *) b->yy_ch_buf );
d1420 2
a1421 2
	yy_flex_free( (void *) b );
	}
d1423 9
d1433 4
a1436 17
#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );
d1441 13
a1453 10
#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}
d1455 8
a1463 8
#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
d1478 53
a1530 2
	if ( b == yy_current_buffer )
		yy_load_buffer_state();
d1532 1
d1534 26
d1561 27
a1587 9
#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
d1589 1
a1589 1

d1596 1
a1596 1
	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
d1598 1
a1598 1
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );
d1610 1
a1610 1
	yy_switch_to_buffer( b );
d1613 1
a1613 2
	}
#endif
d1615 13
d1629 9
a1637 26
#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *str )
#else
YY_BUFFER_STATE yy_scan_string( str )
yyconst char *str;
#endif
	{
	int len;
	for ( len = 0; str[len]; ++len )
		;

	return yy_scan_bytes( str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
d1642 1
a1642 1

d1644 2
a1645 2
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
d1647 1
a1647 1
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );
d1649 2
a1650 2
	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];
d1652 1
a1652 1
	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;
d1654 1
a1654 1
	b = yy_scan_buffer( buf, n );
d1656 1
a1656 1
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );
d1664 1
a1664 2
	}
#endif
d1666 2
a1667 7

#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
a1668 4
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;
d1670 5
a1674 2
		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );
d1676 1
a1676 2
		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );
d1678 14
a1691 3
		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );
d1693 1
a1693 4
		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}
d1695 8
a1702 1
	yy_start_stack[yy_start_stack_ptr++] = YY_START;
d1704 7
a1710 3
	BEGIN(new_state);
	}
#endif
d1712 7
d1720 7
a1726 5
#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );
d1728 3
a1730 3
	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif
d1732 4
d1737 9
a1745 6
#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif
d1747 10
a1756 3
#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif
d1758 4
a1761 10
#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}
d1763 4
d1768 4
d1773 30
a1802 1
/* Redefine yyless() so it works in section 3 code. */
d1804 18
a1821 12
#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n - YY_MORE_ADJ; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )
d1823 2
d1826 3
a1828 1
/* Internal utility routines. */
d1831 2
a1832 9
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
d1836 1
a1836 1
	}
d1839 6
d1846 2
a1847 5
#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
d1849 3
a1851 1
	{
d1853 1
a1853 1
	}
d1855 2
a1856 8
#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
d1865 10
a1874 1
	}
a1875 9
#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}
a1876 8
#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 66 "/home/brolley/sources/src/utils/mep/gmap.l"
@

