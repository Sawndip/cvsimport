head	1.2;
access;
symbols
	gdb_5_2_1-2002-07-23-release:1.1.1.1
	cagney_regbuf-20020515-branch:1.1.1.1.0.18
	cagney_regbuf-20020515-branchpoint:1.1.1.1
	jimb-macro-020506-branch:1.1.1.1.0.16
	jimb-macro-020506-branchpoint:1.1.1.1
	gdb_5_2-2002-04-29-release:1.1.1.1
	gdb_5_2-branch:1.1.1.1.0.14
	gdb_5_2-2002-03-03-branchpoint:1.1.1.1
	gdb_5_1_1-2002-01-24-release:1.1.1.1
	gdb_5_1_0_1-2002-01-03-release:1.1.1.1
	cygnus_cvs_20020108_pre:1.1.1.1
	gdb_5_1_0_1-2002-01-03-branch:1.1.1.1.0.12
	gdb_5_1_0_1-2002-01-03-branchpoint:1.1.1.1
	gdb_5_1-2001-11-21-release:1.1.1.1
	gdb_s390-2001-09-26-branch:1.1.1.1.0.10
	gdb_s390-2001-09-26-branchpoint:1.1.1.1
	gdb_5_1-2001-07-29-branch:1.1.1.1.0.8
	gdb_5_1-2001-07-29-branchpoint:1.1.1.1
	insight-precleanup-2001-01-01:1.1.1.1
	gdb-premipsmulti-2000-06-06-branch:1.1.1.1.0.6
	gdb-premipsmulti-2000-06-06-branchpoint:1.1.1.1
	gdb_5_0-2000-05-19-release:1.1.1.1
	gdb_4_18_2-2000-05-18-release:1.1.1.1
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.1
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.1
	gdb_5_0-2000-04-10-branch:1.1.1.1.0.4
	gdb_5_0-2000-04-10-branchpoint:1.1.1.1
	repo-unification-2000-02-06:1.1.1.1
	gdb-2000-02-04:1.1.1.1
	gdb-2000-02-02:1.1.1.1
	gdb-2000-02-01:1.1.1.1
	gdb-2000-01-31:1.1.1.1
	gdb-2000-01-26:1.1.1.1
	gdb-2000-01-24:1.1.1.1
	gdb-2000-01-17:1.1.1.1
	gdb-2000-01-10:1.1.1.1
	gdb-2000-01-05:1.1.1.1
	gdb-1999-12-21:1.1.1.1
	gdb-1999-12-13:1.1.1.1
	gdb-1999-12-07:1.1.1.1
	gdb-1999-12-06:1.1.1.1
	gdb-1999-11-16:1.1.1.1
	gdb-1999-11-08:1.1.1.1
	gdb-1999-11-01:1.1.1.1
	gdb-1999-10-25:1.1.1.1
	gdb-1999-10-18:1.1.1.1
	gdb-1999-10-11:1.1.1.1
	gdb-1999-10-04:1.1.1.1
	gdb-1999-09-28:1.1.1.1
	gdb-1999-09-21:1.1.1.1
	gdb-1999-09-13:1.1.1.1
	gdb-1999-09-08:1.1.1.1
	gdb-1999-08-30:1.1.1.1
	gdb-1999-08-23:1.1.1.1
	gdb-1999-08-16:1.1.1.1
	gdb-1999-08-09:1.1.1.1
	gdb-1999-08-02:1.1.1.1
	gdb-1999-07-26:1.1.1.1
	gdb-1999-07-19:1.1.1.1
	gdb-1999-07-12:1.1.1.1
	gdb-post-reformat-19990707:1.1.1.1
	gdb-1999-07-07-post-reformat-snapshot:1.1.1.1
	gdb-pre-reformat-19990707:1.1.1.1
	gdb-1999-07-07:1.1.1.1
	gdb-1999-07-05:1.1.1.1
	gdb-1999-06-28:1.1.1.1
	gdb-1999-06-21:1.1.1.1
	gdb-1999-06-14:1.1.1.1
	gdb-1999-06-07:1.1.1.1
	gdb-1999-06-01:1.1.1.1
	gdb-4_18-branch:1.1.1.1.0.2
	gdb-4_18-release:1.1.1.1
	gdb-1999-05-25:1.1.1.1
	gdb-1999-05-19:1.1.1.1
	gdb-1999-05-10:1.1.1.1
	gdb-19990504:1.1.1.1
	gdb-19990422:1.1.1.1
	SNAPSHOT:1.1.1
	gdb-4_18:1.1.1.1
	GDB_4_18:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.2
date	2002.05.28.10.29.53;	author nickc;	state dead;
branches;
next	1.1;

1.1
date	99.04.16.01.35.27;	author shebs;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.04.16.01.35.27;	author shebs;	state Exp;
branches;
next	;


desc
@@


1.2
log
@ Remove amd-udi subdirectory - it is obsolete.
@
text
@static char _[] = "@@(#)io.c	5.22 93/10/26 14:50:43, Srini, AMD.";
/******************************************************************************
 * Copyright 1991 Advanced Micro Devices, Inc.
 *
 * This software is the property of Advanced Micro Devices, Inc  (AMD)  which
 * specifically  grants the user the right to modify, use and distribute this
 * software provided this notice is not removed or altered.  All other rights
 * are reserved by AMD.
 *
 * AMD MAKES NO WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, WITH REGARD TO THIS
 * SOFTWARE.  IN NO EVENT SHALL AMD BE LIABLE FOR INCIDENTAL OR CONSEQUENTIAL
 * DAMAGES IN CONNECTION WITH OR ARISING FROM THE FURNISHING, PERFORMANCE, OR
 * USE OF THIS SOFTWARE.
 *
 * So that all may benefit from your experience, please report  any  problems
 * or  suggestions about this software to the 29K Technical Support Center at
 * 800-29-29-AMD (800-292-9263) in the USA, or 0800-89-1131  in  the  UK,  or
 * 0031-11-1129 in Japan, toll free.  The direct dial number is 512-462-4118.
 *
 * Advanced Micro Devices, Inc.
 * 29K Support Products
 * Mail Stop 573
 * 5900 E. Ben White Blvd.
 * Austin, TX 78741
 * 800-292-9263
 *****************************************************************************
 *      Engineer: Srini Subramanian.
 *****************************************************************************
 * This file contains the I/O related routines.
 *****************************************************************************
 */

#include  <stdio.h>
#include  <string.h>
#ifdef	MSDOS
#include  <conio.h>
#else
#include   <sys/ioctl.h>
#endif
#include  "main.h"
#include  "miniint.h"
#include  "error.h"
#include  "monio.h"

/* Function declarations */

INT32	Mini_io_setup PARAMS((void));
INT32	Mini_io_reset PARAMS((void));
int	getkey PARAMS((void));
INT32	Mini_poll_kbd PARAMS((char *cmd_buffer, int size, int mode));
int	cmd_io PARAMS ((char *cmd_buffer, char c));
int	channel0_io PARAMS ((char c));

INT32
Mini_io_setup()
{
   setbuf(stdout, 0);	/* stdout unbuffered */
   return(SUCCESS);
}

INT32
Mini_io_reset()
{
/* Nothing special for now */
 return(SUCCESS);
}

/*
** This function is used to perform all host I/O.  It
** calls the functions cmd_io() or hif_io() as appropriate
** Note that there are eight pobible I/O "modes".  These
** are all possible combination of:
**
**          - Host / Target I/O
**          - HIF / non-HIF I/O
**          - Command file / keyboard I/O
**
*/

INT32
Mini_poll_kbd(cmd_buffer, size, blockmode)
char	*cmd_buffer;
int	size;
int	blockmode;
{
#ifdef	MSDOS
   char		ch;
   static int	indx=0;

   io_config.cmd_ready = FALSE;
   if (blockmode) { /* BLOCK until a command is typed (line buffered) */
     while (gets(cmd_buffer) == NULL); /* no characters in stdin */
     io_config.cmd_ready = TRUE;
   } else { /* NONBLOCk return immediately if there is no command pending */
     if (kbhit()) {
       ch = (unsigned char) getche();
       *(cmd_buffer+indx) = ch;
       indx=indx+1;
       if (ch == (unsigned char) 13) { /* \r, insert \n */
	     putchar(10);	/* line feed */
	     *(cmd_buffer+indx) = '\0';
             io_config.cmd_ready = TRUE;
	     indx=0;
       } else if (ch == (unsigned char) 8) { /* backspace */
	 indx=indx-1;
       } else if (ch == (unsigned char) 127) { /* delete */
	 indx=indx-1;
       }
     };
   }
   return(SUCCESS);

#else
   int   c;
   int   result;
   char *temp_ptr;
   int		tries;
   int		i;

   result = 0;
   io_config.cmd_ready = FALSE;

   if (blockmode)  {	/* block mode read */
      i = 0;
#ifdef __hpux
      ioctl(fileno(stdin), FIOSNBIO, &i);	/* set blocking read */
#else
      ioctl(fileno(stdin), FIONBIO, &i);	/* set blocking read */
#endif
   } else	{	/* nonblocking read */
   		/* for now only read from stdin */
      i = 1;
#ifdef __hpux
      ioctl(fileno(stdin), FIOSNBIO, &i);	/* set non blocking read */
#else
      ioctl(fileno(stdin), FIONBIO, &i);	/* set non blocking read */
#endif
   }

   /* Now read from stdin. */
   result = read( 0, cmd_buffer, BUFSIZ );

   if (result < 0)
   {
   } else {
      cmd_buffer[result] = '\0';
      io_config.cmd_ready = TRUE;
   }

   if (blockmode) {
   } else {
      i = 0;
#ifdef __hpux
      ioctl(fileno(stdin), FIOSNBIO, &i);   /* clear non-blocking read */
#else
      ioctl(fileno(stdin), FIONBIO, &i);   /* clear non-blocking read */
#endif
   }

   return(SUCCESS);
#endif
}

@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Initial creation of sourceware repository
@
text
@@

