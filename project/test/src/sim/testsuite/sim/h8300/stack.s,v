head	1.1;
access;
symbols
	gdb_7_6_1-2013-08-30-release:1.1
	gdb_7_6-2013-04-26-release:1.1
	gdb_7_6-branch:1.1.0.92
	gdb_7_6-2013-03-12-branchpoint:1.1
	gdb_7_5_1-2012-11-29-release:1.1
	gdb_7_5-2012-08-17-release:1.1
	gdb_7_5-branch:1.1.0.90
	gdb_7_5-2012-07-18-branchpoint:1.1
	gdb_7_4_1-2012-04-26-release:1.1
	gdb_7_4-2012-01-24-release:1.1
	gdb_7_4-branch:1.1.0.88
	gdb_7_4-2011-12-13-branchpoint:1.1
	gdb_7_3_1-2011-09-04-release:1.1
	gdb_7_3-2011-07-26-release:1.1
	gdb_7_3-branch:1.1.0.86
	gdb_7_3-2011-04-01-branchpoint:1.1
	gdb_7_2-2010-09-02-release:1.1
	gdb_7_2-branch:1.1.0.84
	gdb_7_2-2010-07-07-branchpoint:1.1
	gdb_7_1-2010-03-18-release:1.1
	gdb_7_1-branch:1.1.0.82
	gdb_7_1-2010-02-18-branchpoint:1.1
	gdb_7_0_1-2009-12-22-release:1.1
	gdb_7_0-2009-10-06-release:1.1
	gdb_7_0-branch:1.1.0.80
	gdb_7_0-2009-09-16-branchpoint:1.1
	arc-sim-20090309:1.1
	msnyder-checkpoint-072509-branch:1.1.0.78
	msnyder-checkpoint-072509-branchpoint:1.1
	arc-insight_6_8-branch:1.1.0.76
	arc-insight_6_8-branchpoint:1.1
	insight_6_8-branch:1.1.0.74
	insight_6_8-branchpoint:1.1
	reverse-20081226-branch:1.1.0.72
	reverse-20081226-branchpoint:1.1
	multiprocess-20081120-branch:1.1.0.70
	multiprocess-20081120-branchpoint:1.1
	reverse-20080930-branch:1.1.0.68
	reverse-20080930-branchpoint:1.1
	reverse-20080717-branch:1.1.0.66
	reverse-20080717-branchpoint:1.1
	msnyder-reverse-20080609-branch:1.1.0.64
	msnyder-reverse-20080609-branchpoint:1.1
	drow-reverse-20070409-branch:1.1.0.62
	drow-reverse-20070409-branchpoint:1.1
	gdb_6_8-2008-03-27-release:1.1
	gdb_6_8-branch:1.1.0.60
	gdb_6_8-2008-02-26-branchpoint:1.1
	gdb_6_7_1-2007-10-29-release:1.1
	gdb_6_7-2007-10-10-release:1.1
	gdb_6_7-branch:1.1.0.58
	gdb_6_7-2007-09-07-branchpoint:1.1
	insight_6_6-20070208-release:1.1
	gdb_6_6-2006-12-18-release:1.1
	gdb_6_6-branch:1.1.0.56
	gdb_6_6-2006-11-15-branchpoint:1.1
	insight_6_5-20061003-release:1.1
	gdb-csl-symbian-6_4_50_20060226-12:1.1
	gdb-csl-sourcerygxx-3_4_4-25:1.1
	nickrob-async-20060828-mergepoint:1.1
	gdb-csl-symbian-6_4_50_20060226-11:1.1
	gdb-csl-sourcerygxx-4_1-17:1.1
	gdb-csl-20060226-branch-local-2:1.1
	gdb-csl-sourcerygxx-4_1-14:1.1
	gdb-csl-sourcerygxx-4_1-13:1.1
	gdb-csl-sourcerygxx-4_1-12:1.1
	gdb-csl-sourcerygxx-3_4_4-21:1.1
	gdb_6_5-20060621-release:1.1
	gdb-csl-sourcerygxx-4_1-9:1.1
	gdb-csl-sourcerygxx-4_1-8:1.1
	gdb-csl-sourcerygxx-4_1-7:1.1
	gdb-csl-arm-2006q1-6:1.1
	gdb-csl-sourcerygxx-4_1-6:1.1
	gdb-csl-symbian-6_4_50_20060226-10:1.1
	gdb-csl-symbian-6_4_50_20060226-9:1.1
	gdb-csl-symbian-6_4_50_20060226-8:1.1
	gdb-csl-coldfire-4_1-11:1.1
	gdb-csl-sourcerygxx-3_4_4-19:1.1
	gdb-csl-coldfire-4_1-10:1.1
	gdb_6_5-branch:1.1.0.54
	gdb_6_5-2006-05-14-branchpoint:1.1
	gdb-csl-sourcerygxx-4_1-5:1.1
	nickrob-async-20060513-branch:1.1.0.52
	nickrob-async-20060513-branchpoint:1.1
	gdb-csl-sourcerygxx-4_1-4:1.1
	msnyder-reverse-20060502-branch:1.1.0.50
	msnyder-reverse-20060502-branchpoint:1.1
	gdb-csl-morpho-4_1-4:1.1
	gdb-csl-sourcerygxx-3_4_4-17:1.1
	readline_5_1-import-branch:1.1.0.48
	readline_5_1-import-branchpoint:1.1
	gdb-csl-20060226-branch-merge-to-csl-symbian-1:1.1
	gdb-csl-symbian-20060226-branch:1.1.0.46
	gdb-csl-symbian-20060226-branchpoint:1.1
	gdb-csl-20060226-branch-merge-to-csl-local-1:1.1
	msnyder-reverse-20060331-branch:1.1.0.44
	msnyder-reverse-20060331-branchpoint:1.1
	gdb-csl-available-20060303-branch:1.1.0.42
	gdb-csl-available-20060303-branchpoint:1.1
	gdb-csl-20060226-branch:1.1.0.40
	gdb-csl-20060226-branchpoint:1.1
	gdb_6_4-20051202-release:1.1
	msnyder-fork-checkpoint-branch:1.1.0.38
	msnyder-fork-checkpoint-branchpoint:1.1
	gdb-csl-gxxpro-6_3-branch:1.1.0.36
	gdb-csl-gxxpro-6_3-branchpoint:1.1
	gdb_6_4-branch:1.1.0.34
	gdb_6_4-2005-11-01-branchpoint:1.1
	gdb-csl-arm-20051020-branch:1.1.0.32
	gdb-csl-arm-20051020-branchpoint:1.1
	gdb-csl-arm-20050325-2005-q1b:1.1
	gdb-csl-arm-20050325-2005-q1a:1.1
	csl-arm-20050325-branch:1.1.0.30
	csl-arm-20050325-branchpoint:1.1
	gdb_6_3-20041109-release:1.1
	gdb_6_3-branch:1.1.0.26
	gdb_6_3-20041019-branchpoint:1.1
	drow_intercu-merge-20040921:1.1
	drow_intercu-merge-20040915:1.1
	jimb-gdb_6_2-e500-branch:1.1.0.28
	jimb-gdb_6_2-e500-branchpoint:1.1
	gdb_6_2-20040730-release:1.1
	gdb_6_2-branch:1.1.0.24
	gdb_6_2-2004-07-10-gmt-branchpoint:1.1
	gdb_6_1_1-20040616-release:1.1
	gdb_6_1-2004-04-05-release:1.1
	drow_intercu-merge-20040402:1.1
	drow_intercu-merge-20040327:1.1
	ezannoni_pie-20040323-branch:1.1.0.22
	ezannoni_pie-20040323-branchpoint:1.1
	cagney_tramp-20040321-mergepoint:1.1
	cagney_tramp-20040309-branch:1.1.0.20
	cagney_tramp-20040309-branchpoint:1.1
	gdb_6_1-branch:1.1.0.18
	gdb_6_1-2004-03-01-gmt-branchpoint:1.1
	drow_intercu-20040221-branch:1.1.0.16
	drow_intercu-20040221-branchpoint:1.1
	cagney_bfdfile-20040213-branch:1.1.0.14
	cagney_bfdfile-20040213-branchpoint:1.1
	drow-cplus-merge-20040208:1.1
	carlton_dictionary-20040126-merge:1.1
	cagney_bigcore-20040122-branch:1.1.0.12
	cagney_bigcore-20040122-branchpoint:1.1
	drow-cplus-merge-20040113:1.1
	drow-cplus-merge-20031224:1.1
	drow-cplus-merge-20031220:1.1
	carlton_dictionary-20031215-merge:1.1
	drow-cplus-branch:1.1.0.10
	drow-cplus-merge-20031214:1.1
	carlton-dictionary-20031111-merge:1.1
	gdb_6_0-2003-10-04-release:1.1
	kettenis_sparc-20030918-branch:1.1.0.8
	kettenis_sparc-20030918-branchpoint:1.1
	carlton_dictionary-20030917-merge:1.1
	ezannoni_pie-20030916-branchpoint:1.1
	ezannoni_pie-20030916-branch:1.1.0.6
	cagney_x86i386-20030821-branch:1.1.0.4
	cagney_x86i386-20030821-branchpoint:1.1
	carlton_dictionary-20030805-merge:1.1
	carlton_dictionary-20030627-merge:1.1
	gdb_6_0-branch:1.1.0.2
	gdb_6_0-2003-06-23-branchpoint:1.1;
locks; strict;
comment	@# @;


1.1
date	2003.06.19.02.40.12;	author msnyder;	state Exp;
branches
	1.1.10.1;
next	;

1.1.10.1
date	2003.12.14.20.28.38;	author drow;	state Exp;
branches;
next	;


desc
@@


1.1
log
@2003-05-30  Alexandre Oliva  <aoliva@@redhat.com>

	* allinsn.exp: Fix typos introduced on 2003-05-27.

2003-05-29  Michael Snyder  <msnyder@@redhat.com>

	* tas.s: Use er4 for h8h and h8s, er3 for h8sx.

2003-05-28  Michael Snyder  <msnyder@@redhat.com>

	* subs.s: New file.
	* subx.s: New file.
	* allinsn.exp: Add new subs and subx tests.
	* testutils.inc: Simplify (and fix) set_carry_flag.
	(clear_carry_flag, set_zero_flag, clear_zero_flag...): New macros.
	* addx.s: Use simplified set_carry_flag.

2003-05-27  Michael Snyder  <msnyder@@redhat.com>

	* tas.s: New file.
	* band.s: New file.
	* biand.s: New file.
	* allinsn.exp: Add tas, band, biand tests.
	* brabc.s: Add abs8 test.
	* bset.s: Add bset/ne, bclr/ne tests.

2003-05-23  Michael Snyder  <msnyder@@redhat.com>

	* and.b.s: Add andc exr.
	* or.b.s: Add orc.exr.
	* xor.b.s: Add xor exr.

	* jmp.s: Fix 8-bit indirect test.  Add 7-bit vector test.

2003-05-22  Michael Snyder  <msnyder@@redhat.com>

	* stack.s: Add rte/l and rts/l tests.
	* allinsn.exp: Add stack tests.

2003-05-21  Michael Snyder  <msnyder@@redhat.com>

	* stack.s: New file: test stack operations.
	* stack.s: Add bsr, jsr tests.
	* stack.s: Add trapa, rte tests.

	* div.s: Corrections for size of dividend.

2003-05-20  Michael Snyder  <msnyder@@redhat.com>

	* mul.s: Corrections for unsigned multiply.

	* div.s: New file, test div instructions.
	* allinsn.exp: Add div test.

2003-05-19  Michael Snyder  <msnyder@@redhat.com>

	* mul.s: New file, test mul instructions.
	* allinsn.exp: Add mul test.
@
text
@# Hitachi H8 testcase 'ldc'
# mach(): all
# as(h8300):	--defsym sim_cpu=0
# as(h8300h):	--defsym sim_cpu=1
# as(h8300s):	--defsym sim_cpu=2
# as(h8sx):	--defsym sim_cpu=3
# ld(h8300h):	-m h8300helf
# ld(h8300s):	-m h8300self
# ld(h8sx):	-m h8300sxelf

	.include "testutils.inc"

	start

.data
	.align 4
stack:	
.if (sim_cpu == h8300)
	.fill	128, 2, 0
.else
	.fill	128, 4, 0
.endif
stacktop:

	.text

push_w:
	set_grs_a5a5		; Fill all general regs with a fixed pattern
	set_ccr_zero
.if (sim_cpu == h8300)
	mov.w	#stacktop, r7
.else
	mov.l	#stacktop, er7
.endif
	push.w	r0		; a5a5 is negative
	test_neg_set
	test_carry_clear
	test_zero_clear
	test_ovf_clear
	
	push.w	r1
	push.w	r2
	push.w	r3

	test_gr_a5a5 0
	test_gr_a5a5 1
	test_gr_a5a5 2
	test_gr_a5a5 3
	
	mov	@@stacktop-2, r0
	test_gr_a5a5 0
	mov	@@stacktop-4, r0
	test_gr_a5a5 0
	mov	@@stacktop-6, r0
	test_gr_a5a5 0
	mov	@@stacktop-8, r0
	test_gr_a5a5 0

	mov.w	#1, r1
	mov.w	#2, r2
	mov.w	#3, r3
	mov.w	#4, r4

	push.w	r1		; #1 is non-negative, non-zero
	test_cc_clear
	
	push.w	r2
	push.w	r3
	push.w	r4

	test_h_gr16 1 r1
	test_h_gr16 2 r2
	test_h_gr16 3 r3
	test_h_gr16 4 r4

	mov	@@stacktop-10, r0
	test_h_gr16 1 r0
	mov	@@stacktop-12, r0
	test_h_gr16 2 r0
	mov	@@stacktop-14, r0
	test_h_gr16 3 r0
	mov	@@stacktop-16, r0
	test_h_gr16 4 r0

.if (sim_cpu == h8300)
	test_h_gr16	4 r0
	test_h_gr16	1 r1
	test_h_gr16	2 r2
	test_h_gr16	3 r3
	test_h_gr16	4 r4
;;; 	test_h_gr16	stacktop-16 r7	; FIXME
.else
	test_h_gr32	0xa5a50004  er0
	test_h_gr32	0xa5a50001  er1
	test_h_gr32	0xa5a50002  er2
	test_h_gr32	0xa5a50003  er3
	test_h_gr32	0xa5a50004  er4
	test_h_gr32	stacktop-16 er7
.endif
	test_gr_a5a5	5
	test_gr_a5a5	6

pop_w:
	set_grs_a5a5		; Fill all general regs with a fixed pattern
	set_ccr_zero
.if (sim_cpu == h8300)
	mov.w	#stacktop-16, r7
.else
	mov.l	#stacktop-16, er7
.endif
	pop.w	r4
	pop.w	r3
	pop.w	r2
	pop.w	r1		; Should set all flags zero
	test_cc_clear

	test_h_gr16	1 r1
	test_h_gr16	2 r2
	test_h_gr16	3 r3
	test_h_gr16	4 r4

	pop.w	r4
	pop.w	r3
	pop.w	r2
	pop.w	r1		; a5a5 is negative
	test_neg_set
	test_carry_clear
	test_zero_clear
	test_ovf_clear

	test_gr_a5a5	0
	test_gr_a5a5	1
	test_gr_a5a5	2
	test_gr_a5a5	3
	test_gr_a5a5	4
	test_gr_a5a5	5
	test_gr_a5a5	6
.if (sim_cpu == h8300)
;;; 	test_h_gr16	stacktop r7	; FIXME
.else
	test_h_gr32	stacktop er7
.endif

.if (sim_cpu)			; non-zero means not h8300
push_l:
	set_grs_a5a5		; Fill all general regs with a fixed pattern
	set_ccr_zero
	mov.l	#stacktop, er7
	push.l	er0		; a5a5 is negative
	test_neg_set
	test_carry_clear
	test_zero_clear
	test_ovf_clear
	
	push.l	er1
	push.l	er2
	push.l	er3

	test_gr_a5a5 0
	test_gr_a5a5 1
	test_gr_a5a5 2
	test_gr_a5a5 3
	
	mov	@@stacktop-4, er0
	test_gr_a5a5 0
	mov	@@stacktop-8, er0
	test_gr_a5a5 0
	mov	@@stacktop-12, er0
	test_gr_a5a5 0
	mov	@@stacktop-16, er0
	test_gr_a5a5 0

	mov	#1, er1
	mov	#2, er2
	mov	#3, er3
	mov	#4, er4

	push.l	er1		; #1 is non-negative, non-zero
	test_cc_clear
	
	push.l	er2
	push.l	er3
	push.l	er4

	test_h_gr32 1 er1
	test_h_gr32 2 er2
	test_h_gr32 3 er3
	test_h_gr32 4 er4

	mov	@@stacktop-20, er0
	test_h_gr32 1 er0
	mov	@@stacktop-24, er0
	test_h_gr32 2 er0
	mov	@@stacktop-28, er0
	test_h_gr32 3 er0
	mov	@@stacktop-32, er0
	test_h_gr32 4 er0

	test_h_gr32	4  er0
	test_h_gr32	1  er1
	test_h_gr32	2  er2
	test_h_gr32	3  er3
	test_h_gr32	4  er4
	test_gr_a5a5	5
	test_gr_a5a5	6
	test_h_gr32	stacktop-32 er7

pop_l:
	set_grs_a5a5		; Fill all general regs with a fixed pattern
	set_ccr_zero
	mov.l	#stacktop-32, er7
	pop.l	er4
	pop.l	er3
	pop.l	er2
	pop.l	er1		; Should set all flags zero
	test_cc_clear

	test_h_gr32	1 er1
	test_h_gr32	2 er2
	test_h_gr32	3 er3
	test_h_gr32	4 er4

	pop.l	er4
	pop.l	er3
	pop.l	er2
	pop.l	er1		; a5a5 is negative
	test_neg_set
	test_carry_clear
	test_zero_clear
	test_ovf_clear

	test_gr_a5a5	0
	test_gr_a5a5	1
	test_gr_a5a5	2
	test_gr_a5a5	3
	test_gr_a5a5	4
	test_gr_a5a5	5
	test_gr_a5a5	6
	test_h_gr32	stacktop er7
.endif

	;; Jump over subroutine
	jmp	_bsr

bsr_jsr_func:	
	test_ccr 0		; call should not affect ccr
	mov.w	#0, r0
	mov.w	#1, r1
	mov.w	#2, r2
	mov.w	#3, r3
	mov.w	#4, r4
	mov.w	#5, r5
	mov.w	#6, r6
	rts

_bsr:	set_grs_a5a5
.if (sim_cpu == h8300)
	mov.w	#stacktop, r7
.else
	mov.l	#stacktop, er7
.endif
	set_ccr_zero
	bsr	bsr_jsr_func

	test_h_gr16	0 r0
	test_h_gr16	1 r1
	test_h_gr16	2 r2
	test_h_gr16	3 r3
	test_h_gr16	4 r4
	test_h_gr16	5 r5
	test_h_gr16	6 r6
.if (sim_cpu == h8300)
;;; 	test_h_gr16	stacktop, r7	; FIXME
.else
	test_h_gr32	stacktop, er7
.endif

_jsr:	set_grs_a5a5
.if (sim_cpu == h8300)
	mov.w	#stacktop, r7
.else
	mov.l	#stacktop, er7
.endif
	set_ccr_zero
	jsr	bsr_jsr_func

	test_h_gr16	0 r0
	test_h_gr16	1 r1
	test_h_gr16	2 r2
	test_h_gr16	3 r3
	test_h_gr16	4 r4
	test_h_gr16	5 r5
	test_h_gr16	6 r6
.if (sim_cpu == h8300)
;;; 	test_h_gr16	stacktop, r7	; FIXME
.else
	test_h_gr32	stacktop, er7
.endif

.if (sim_cpu)			; not zero ie. not h8300
_trapa:
	set_grs_a5a5
	mov.l	#trap_handler, er7	; trap vector
	mov.l	er7, @@0x2c
	mov.l	#stacktop, er7
	set_ccr_zero
	trapa	#3

	test_cc_clear		; ccr should be restored by rte
	test_h_gr16	0x10 r0
	test_h_gr16	0x11 r1
	test_h_gr16	0x12 r2
	test_h_gr16	0x13 r3
	test_h_gr16	0x14 r4
	test_h_gr16	0x15 r5
	test_h_gr16	0x16 r6
	test_h_gr32	stacktop er7
.endif

.if (sim_cpu == h8sx)
_rtsl:				; Test rts/l insn.
	set_grs_a5a5
	mov	#0,r0l
	mov	#1,r1l
	mov	#2,r2l
	mov	#3,r3l
	mov	#4,r4l
	mov	#5,r5l
	mov	#6,r6l
	mov	#stacktop, er7

	jsr	rtsl1_func
	test_h_gr32	0xa5a5a500 er0
	test_h_gr32	0xa5a5a501 er1
	test_h_gr32	0xa5a5a502 er2
	test_h_gr32	0xa5a5a503 er3
	test_h_gr32	0xa5a5a504 er4
	test_h_gr32	0xa5a5a505 er5
	test_h_gr32	0xa5a5a506 er6
	test_h_gr32	stacktop   er7

	jsr	rtsl2_func
	test_h_gr32	0xa5a5a500 er0
	test_h_gr32	0xa5a5a501 er1
	test_h_gr32	0xa5a5a502 er2
	test_h_gr32	0xa5a5a503 er3
	test_h_gr32	0xa5a5a504 er4
	test_h_gr32	0xa5a5a505 er5
	test_h_gr32	0xa5a5a506 er6
	test_h_gr32	stacktop   er7

	jsr	rtsl3_func
	test_h_gr32	0xa5a5a500 er0
	test_h_gr32	0xa5a5a501 er1
	test_h_gr32	0xa5a5a502 er2
	test_h_gr32	0xa5a5a503 er3
	test_h_gr32	0xa5a5a504 er4
	test_h_gr32	0xa5a5a505 er5
	test_h_gr32	0xa5a5a506 er6
	test_h_gr32	stacktop   er7

	jsr	rtsl4_func
	test_h_gr32	0xa5a5a500 er0
	test_h_gr32	0xa5a5a501 er1
	test_h_gr32	0xa5a5a502 er2
	test_h_gr32	0xa5a5a503 er3
	test_h_gr32	0xa5a5a504 er4
	test_h_gr32	0xa5a5a505 er5
	test_h_gr32	0xa5a5a506 er6
	test_h_gr32	stacktop   er7
.endif				; h8sx

	pass

	exit 0

	;; Handler for a software exception (trap).
trap_handler:
	;; Test the 'i' interrupt mask flag.
	stc	ccr, r0l
	test_h_gr8	0x80, r0l
	;; Change the registers (so we know we've been here)
	mov.w	#0x10, r0
	mov.w	#0x11, r1
	mov.w	#0x12, r2
	mov.w	#0x13, r3
	mov.w	#0x14, r4
	mov.w	#0x15, r5
	mov.w	#0x16, r6
	;; Change the ccr (which will be restored by RTE)
	orc	#0xff, ccr
	rte

.if (sim_cpu == h8sx)
	;; Functions for testing rts/l
rtsl1_func:			; Save and restore R0
	push.l	er0
	;; Now modify it, and verify the modification.
	mov	#0xfeedface, er0
	test_h_gr32 0xfeedface, er0
	;; Then use rts/l to restore them and return.
	rts/l	er0

rtsl2_func:			; Save and restore R5 and R6
	push.l	er5
	push.l	er6
	;; Now modify them, and verify the modification.
	mov	#0xdeadbeef, er5
	mov	#0xfeedface, er6
	test_h_gr32 0xdeadbeef, er5
	test_h_gr32 0xfeedface, er6
	;; Then use rts/l to restore them and return.
	rts/l	(er5-er6)

rtsl3_func:			; Save and restore R4, R5, and R6
	push.l	er4
	push.l	er5
	push.l	er6
	;; Now modify them, and verify the modification.
	mov	#0xdeafcafe, er4
	mov	#0xdeadbeef, er5
	mov	#0xfeedface, er6
	test_h_gr32 0xdeafcafe, er4
	test_h_gr32 0xdeadbeef, er5
	test_h_gr32 0xfeedface, er6
	;; Then use rts/l to restore them and return.
	rts/l	(er4-er6)

rtsl4_func:			; Save and restore R0 - R3
	push.l	er0
	push.l	er1
	push.l	er2
	push.l	er3
	;; Now modify them, and verify the modification.
	mov	#0xdadacafe, er0
	mov	#0xfeedbeef, er1
	mov	#0xdeadface, er2
	mov	#0xf00dd00d, er3
	test_h_gr32 0xdadacafe, er0
	test_h_gr32 0xfeedbeef, er1
	test_h_gr32 0xdeadface, er2
	test_h_gr32 0xf00dd00d, er3
	;; Then use rts/l to restore them and return.
	rts/l	(er0-er3)
.endif				; h8sx
@


1.1.10.1
log
@Merge drow-cplus-branch to:
  cvs rtag -D 2003-12-14 00:00:00 UTC drow-cplus-merge-20031214 gdb+dejagnu
@
text
@@

