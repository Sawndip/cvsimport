head	1.3;
access;
symbols
	gdb_7_6_1-2013-08-30-release:1.3
	gdb_7_6-2013-04-26-release:1.3
	gdb_7_6-branch:1.3.0.70
	gdb_7_6-2013-03-12-branchpoint:1.3
	gdb_7_5_1-2012-11-29-release:1.3
	gdb_7_5-2012-08-17-release:1.3
	gdb_7_5-branch:1.3.0.68
	gdb_7_5-2012-07-18-branchpoint:1.3
	gdb_7_4_1-2012-04-26-release:1.3
	gdb_7_4-2012-01-24-release:1.3
	gdb_7_4-branch:1.3.0.66
	gdb_7_4-2011-12-13-branchpoint:1.3
	gdb_7_3_1-2011-09-04-release:1.3
	gdb_7_3-2011-07-26-release:1.3
	gdb_7_3-branch:1.3.0.64
	gdb_7_3-2011-04-01-branchpoint:1.3
	gdb_7_2-2010-09-02-release:1.3
	gdb_7_2-branch:1.3.0.62
	gdb_7_2-2010-07-07-branchpoint:1.3
	gdb_7_1-2010-03-18-release:1.3
	gdb_7_1-branch:1.3.0.60
	gdb_7_1-2010-02-18-branchpoint:1.3
	gdb_7_0_1-2009-12-22-release:1.3
	gdb_7_0-2009-10-06-release:1.3
	gdb_7_0-branch:1.3.0.58
	gdb_7_0-2009-09-16-branchpoint:1.3
	arc-sim-20090309:1.3
	msnyder-checkpoint-072509-branch:1.3.0.56
	msnyder-checkpoint-072509-branchpoint:1.3
	arc-insight_6_8-branch:1.3.0.54
	arc-insight_6_8-branchpoint:1.3
	insight_6_8-branch:1.3.0.52
	insight_6_8-branchpoint:1.3
	reverse-20081226-branch:1.3.0.50
	reverse-20081226-branchpoint:1.3
	multiprocess-20081120-branch:1.3.0.48
	multiprocess-20081120-branchpoint:1.3
	reverse-20080930-branch:1.3.0.46
	reverse-20080930-branchpoint:1.3
	reverse-20080717-branch:1.3.0.44
	reverse-20080717-branchpoint:1.3
	msnyder-reverse-20080609-branch:1.3.0.42
	msnyder-reverse-20080609-branchpoint:1.3
	drow-reverse-20070409-branch:1.3.0.40
	drow-reverse-20070409-branchpoint:1.3
	gdb_6_8-2008-03-27-release:1.3
	gdb_6_8-branch:1.3.0.38
	gdb_6_8-2008-02-26-branchpoint:1.3
	gdb_6_7_1-2007-10-29-release:1.3
	gdb_6_7-2007-10-10-release:1.3
	gdb_6_7-branch:1.3.0.36
	gdb_6_7-2007-09-07-branchpoint:1.3
	insight_6_6-20070208-release:1.3
	gdb_6_6-2006-12-18-release:1.3
	gdb_6_6-branch:1.3.0.34
	gdb_6_6-2006-11-15-branchpoint:1.3
	insight_6_5-20061003-release:1.3
	gdb-csl-symbian-6_4_50_20060226-12:1.3
	gdb-csl-sourcerygxx-3_4_4-25:1.3
	nickrob-async-20060828-mergepoint:1.3
	gdb-csl-symbian-6_4_50_20060226-11:1.3
	gdb-csl-sourcerygxx-4_1-17:1.3
	gdb-csl-20060226-branch-local-2:1.3
	gdb-csl-sourcerygxx-4_1-14:1.3
	gdb-csl-sourcerygxx-4_1-13:1.3
	gdb-csl-sourcerygxx-4_1-12:1.3
	gdb-csl-sourcerygxx-3_4_4-21:1.3
	gdb_6_5-20060621-release:1.3
	gdb-csl-sourcerygxx-4_1-9:1.3
	gdb-csl-sourcerygxx-4_1-8:1.3
	gdb-csl-sourcerygxx-4_1-7:1.3
	gdb-csl-arm-2006q1-6:1.3
	gdb-csl-sourcerygxx-4_1-6:1.3
	gdb-csl-symbian-6_4_50_20060226-10:1.3
	gdb-csl-symbian-6_4_50_20060226-9:1.3
	gdb-csl-symbian-6_4_50_20060226-8:1.3
	gdb-csl-coldfire-4_1-11:1.3
	gdb-csl-sourcerygxx-3_4_4-19:1.3
	gdb-csl-coldfire-4_1-10:1.3
	gdb_6_5-branch:1.3.0.32
	gdb_6_5-2006-05-14-branchpoint:1.3
	gdb-csl-sourcerygxx-4_1-5:1.3
	nickrob-async-20060513-branch:1.3.0.30
	nickrob-async-20060513-branchpoint:1.3
	gdb-csl-sourcerygxx-4_1-4:1.3
	msnyder-reverse-20060502-branch:1.3.0.28
	msnyder-reverse-20060502-branchpoint:1.3
	gdb-csl-morpho-4_1-4:1.3
	gdb-csl-sourcerygxx-3_4_4-17:1.3
	readline_5_1-import-branch:1.3.0.26
	readline_5_1-import-branchpoint:1.3
	gdb-csl-20060226-branch-merge-to-csl-symbian-1:1.3
	gdb-csl-symbian-20060226-branch:1.3.0.24
	gdb-csl-symbian-20060226-branchpoint:1.3
	gdb-csl-20060226-branch-merge-to-csl-local-1:1.3
	msnyder-reverse-20060331-branch:1.3.0.22
	msnyder-reverse-20060331-branchpoint:1.3
	gdb-csl-available-20060303-branch:1.3.0.20
	gdb-csl-available-20060303-branchpoint:1.3
	gdb-csl-20060226-branch:1.3.0.18
	gdb-csl-20060226-branchpoint:1.3
	gdb_6_4-20051202-release:1.3
	msnyder-fork-checkpoint-branch:1.3.0.16
	msnyder-fork-checkpoint-branchpoint:1.3
	gdb-csl-gxxpro-6_3-branch:1.3.0.14
	gdb-csl-gxxpro-6_3-branchpoint:1.3
	gdb_6_4-branch:1.3.0.12
	gdb_6_4-2005-11-01-branchpoint:1.3
	gdb-csl-arm-20051020-branch:1.3.0.10
	gdb-csl-arm-20051020-branchpoint:1.3
	gdb-csl-arm-20050325-2005-q1b:1.3
	gdb-csl-arm-20050325-2005-q1a:1.3
	csl-arm-20050325-branch:1.3.0.8
	csl-arm-20050325-branchpoint:1.3
	gdb_6_3-20041109-release:1.3
	gdb_6_3-branch:1.3.0.4
	gdb_6_3-20041019-branchpoint:1.3
	drow_intercu-merge-20040921:1.3
	drow_intercu-merge-20040915:1.3
	jimb-gdb_6_2-e500-branch:1.3.0.6
	jimb-gdb_6_2-e500-branchpoint:1.3
	gdb_6_2-20040730-release:1.3
	gdb_6_2-branch:1.3.0.2
	gdb_6_2-2004-07-10-gmt-branchpoint:1.3
	gdb_6_1_1-20040616-release:1.2
	gdb_6_1-2004-04-05-release:1.2
	drow_intercu-merge-20040402:1.2
	drow_intercu-merge-20040327:1.2
	ezannoni_pie-20040323-branch:1.2.0.22
	ezannoni_pie-20040323-branchpoint:1.2
	cagney_tramp-20040321-mergepoint:1.2
	cagney_tramp-20040309-branch:1.2.0.20
	cagney_tramp-20040309-branchpoint:1.2
	gdb_6_1-branch:1.2.0.18
	gdb_6_1-2004-03-01-gmt-branchpoint:1.2
	drow_intercu-20040221-branch:1.2.0.16
	drow_intercu-20040221-branchpoint:1.2
	cagney_bfdfile-20040213-branch:1.2.0.14
	cagney_bfdfile-20040213-branchpoint:1.2
	drow-cplus-merge-20040208:1.2
	carlton_dictionary-20040126-merge:1.2
	cagney_bigcore-20040122-branch:1.2.0.12
	cagney_bigcore-20040122-branchpoint:1.2
	drow-cplus-merge-20040113:1.2
	drow-cplus-merge-20031224:1.2
	drow-cplus-merge-20031220:1.2
	carlton_dictionary-20031215-merge:1.2
	drow-cplus-branch:1.2.0.10
	drow-cplus-merge-20031214:1.2
	carlton-dictionary-20031111-merge:1.2
	gdb_6_0-2003-10-04-release:1.2
	kettenis_sparc-20030918-branch:1.2.0.8
	kettenis_sparc-20030918-branchpoint:1.2
	carlton_dictionary-20030917-merge:1.2
	ezannoni_pie-20030916-branchpoint:1.2
	ezannoni_pie-20030916-branch:1.2.0.6
	cagney_x86i386-20030821-branch:1.2.0.4
	cagney_x86i386-20030821-branchpoint:1.2
	carlton_dictionary-20030805-merge:1.2
	carlton_dictionary-20030627-merge:1.2
	gdb_6_0-branch:1.2.0.2
	gdb_6_0-2003-06-23-branchpoint:1.2
	jimb-ppc64-linux-20030613-branch:1.1.0.12
	jimb-ppc64-linux-20030613-branchpoint:1.1
	cagney_convert-20030606-branch:1.1.0.10
	cagney_convert-20030606-branchpoint:1.1
	jimb-ppc64-linux-20030528-branch:1.1.0.8
	jimb-ppc64-linux-20030528-branchpoint:1.1
	carlton_dictionary-20030523-merge:1.1
	cagney_fileio-20030521-branch:1.1.0.6
	cagney_fileio-20030521-branchpoint:1.1
	kettenis_i386newframe-20030517-mergepoint:1.1
	jimb-ppc64-linux-20030509-branch:1.1.0.4
	jimb-ppc64-linux-20030509-branchpoint:1.1
	kettenis_i386newframe-20030504-mergepoint:1.1
	carlton_dictionary-20030430-merge:1.1
	kettenis_i386newframe-20030419-branch:1.1.0.2
	kettenis_i386newframe-20030419-branchpoint:1.1
	carlton_dictionary-20030416-merge:1.1;
locks; strict;
comment	@# @;


1.3
date	2004.06.24.21.08.11;	author aoliva;	state Exp;
branches;
next	1.2;

1.2
date	2003.06.19.02.40.12;	author msnyder;	state Exp;
branches
	1.2.10.1
	1.2.16.1;
next	1.1;

1.1
date	2003.04.13.16.44.57;	author msnyder;	state Exp;
branches;
next	;

1.2.10.1
date	2003.12.14.20.28.38;	author drow;	state Exp;
branches;
next	;

1.2.16.1
date	2004.09.16.17.02.14;	author drow;	state Exp;
branches;
next	;


desc
@@


1.3
log
@2004-06-17  Alexandre Oliva  <aoliva@@redhat.com>
* band.s, biand.s: imm3_abs16 is not available on h8300h.
* bset.s: Likewise.  Ditto for rn_abs32.
@
text
@# Hitachi H8 testcase 'bset', 'bclr'
# mach(): all
# as(h8300):	--defsym sim_cpu=0
# as(h8300h):	--defsym sim_cpu=1
# as(h8300s):	--defsym sim_cpu=2
# as(h8sx):	--defsym sim_cpu=3
# ld(h8300h):	-m h8300helf	
# ld(h8300s):	-m h8300self	
# ld(h8sx):	-m h8300sxelf

	.include "testutils.inc"

	# Instructions tested:
	#
	# bset xx:3, rd8	;                   7 0 ?xxx rd8
	# bclr xx:3, rd8	;                   7 2 ?xxx rd8
	# bset xx:3, @@erd	; 7 d 0rd ????      7 0 ?xxx ????
	# bclr xx:3, @@erd	; 7 d 0rd ????      7 2 ?xxx ????
	# bset xx:3, @@abs16	; 6 a 1 1??? aa:16  7 0 ?xxx ????
	# bclr xx:3, @@abs16	; 6 a 1 1??? aa:16  7 2 ?xxx ???? 
	# bset reg8, rd8	;                   6 0 rs8  rd8
	# bclr reg8, rd8	;                   6 2 rs8  rd8
	# bset reg8, @@erd	; 7 d 0rd ????      6 0 rs8  ????
	# bclr reg8, @@erd	; 7 d 0rd ????      6 2 rs8  ????
	# bset reg8, @@abs32	; 6 a 3 1??? aa:32  6 0 rs8  ????
	# bclr reg8, @@abs32	; 6 a 3 1??? aa:32  6 2 rs8  ???? 
	#
	# bset/eq xx:3, rd8
	# bclr/eq xx:3, rd8
	# bset/ne xx:3, rd8
	# bclr/ne xx:3, rd8

	.data
byte_dst:	.byte 0

	start

bset_imm3_reg8:
	set_grs_a5a5		; Fill all general regs with a fixed pattern

	;;  bset xx:3, rd8
	mov	#0, r1l
	set_ccr_zero
	bset	#0, r1l
	test_cc_clear
	test_h_gr8 1 r1l

	set_ccr_zero
	bset	#1, r1l
	test_cc_clear
	test_h_gr8 3 r1l

	set_ccr_zero
	bset	#2, r1l
	test_cc_clear
	test_h_gr8 7 r1l

	set_ccr_zero
	bset	#3, r1l
	test_cc_clear
	test_h_gr8 15 r1l

	set_ccr_zero
	bset	#4, r1l
	test_cc_clear
	test_h_gr8 31 r1l

	set_ccr_zero
	bset	#5, r1l
	test_cc_clear
	test_h_gr8 63 r1l

	set_ccr_zero
	bset	#6, r1l
	test_cc_clear
	test_h_gr8 127 r1l

	set_ccr_zero
	bset	#7, r1l
	test_cc_clear
	test_h_gr8 255 r1l

.if (sim_cpu == h8300)
	test_h_gr16 0xa5ff, r1
.else
	test_h_gr32  0xa5a5a5ff er1
.endif

bclr_imm3_reg8:	
	set_ccr_zero
	bclr	#7, r1l
	test_cc_clear
	test_h_gr8 127 r1l

	set_ccr_zero
	bclr	#6, r1l
	test_cc_clear
	test_h_gr8 63 r1l

	set_ccr_zero
	bclr	#5, r1l
	test_cc_clear
	test_h_gr8 31 r1l

	set_ccr_zero
	bclr	#4, r1l
	test_cc_clear
	test_h_gr8 15 r1l

	set_ccr_zero
	bclr	#3, r1l
	test_cc_clear
	test_h_gr8 7 r1l

	set_ccr_zero
	bclr	#2, r1l
	test_cc_clear
	test_h_gr8 3 r1l

	set_ccr_zero
	bclr	#1, r1l
	test_cc_clear
	test_h_gr8 1 r1l

	set_ccr_zero
	bclr	#0, r1l
	test_cc_clear
	test_h_gr8 0 r1l

	test_gr_a5a5 0		; Make sure other general regs not disturbed
.if (sim_cpu == h8300)
	test_h_gr16 0xa500 r1
.else
	test_h_gr32  0xa5a5a500 er1
.endif
	test_gr_a5a5 2
	test_gr_a5a5 3
	test_gr_a5a5 4
	test_gr_a5a5 5
	test_gr_a5a5 6
	test_gr_a5a5 7

.if (sim_cpu)
bset_imm3_ind:
	set_grs_a5a5		; Fill all general regs with a fixed pattern

	;;  bset xx:3, @@erd
	mov	#byte_dst, er1
	set_ccr_zero
	bset	#0, @@er1
	test_cc_clear
	mov	@@er1, r2l
	test_h_gr8 1 r2l

	set_ccr_zero
	bset	#1, @@er1
	test_cc_clear
	mov	@@er1, r2l
	test_h_gr8 3 r2l

	set_ccr_zero
	bset	#2, @@er1
	test_cc_clear
	mov	@@er1, r2l
	test_h_gr8 7 r2l

	set_ccr_zero
	bset	#3, @@er1
	test_cc_clear
	mov	@@er1, r2l
	test_h_gr8 15 r2l

	set_ccr_zero
	bset	#4, @@er1
	test_cc_clear
	mov	@@er1, r2l
	test_h_gr8 31 r2l

	set_ccr_zero
	bset	#5, @@er1
	test_cc_clear
	mov	@@er1, r2l
	test_h_gr8 63 r2l

	set_ccr_zero
	bset	#6, @@er1
	test_cc_clear
	mov	@@er1, r2l
	test_h_gr8 127 r2l

	set_ccr_zero
	bset	#7, @@er1
	test_cc_clear
	mov	@@er1, r2l
	test_h_gr8 255 r2l

.if (sim_cpu == h8300)
	test_h_gr16  0xa5ff r2
.else
	test_h_gr32  0xa5a5a5ff er2
.endif

bclr_imm3_ind:	
	set_ccr_zero
	bclr	#7, @@er1
	test_cc_clear
	mov	@@er1, r2l
	test_h_gr8 127 r2l

	set_ccr_zero
	bclr	#6, @@er1
	test_cc_clear
	mov	@@er1, r2l
	test_h_gr8 63 r2l

	set_ccr_zero
	bclr	#5, @@er1
	test_cc_clear
	mov	@@er1, r2l
	test_h_gr8 31 r2l

	set_ccr_zero
	bclr	#4, @@er1
	test_cc_clear
	mov	@@er1, r2l
	test_h_gr8 15 r2l

	set_ccr_zero
	bclr	#3, @@er1
	test_cc_clear
	mov	@@er1, r2l
	test_h_gr8 7  r2l

	set_ccr_zero
	bclr	#2, @@er1
	test_cc_clear
	mov	@@er1, r2l
	test_h_gr8 3  r2l

	set_ccr_zero
	bclr	#1, @@er1
	test_cc_clear
	mov	@@er1, r2l
	test_h_gr8 1  r2l

	set_ccr_zero
	bclr	#0, @@er1
	test_cc_clear
	mov	@@er1, r2l
	test_h_gr8 0  r2l

	test_gr_a5a5 0		; Make sure other general regs not disturbed
.if (sim_cpu == h8300)
	test_h_gr16  byte_dst r1
	test_h_gr16  0xa500   r2
.else
	test_h_gr32  byte_dst   er1
	test_h_gr32  0xa5a5a500 er2
.endif
	test_gr_a5a5 3
	test_gr_a5a5 4
	test_gr_a5a5 5
	test_gr_a5a5 6
	test_gr_a5a5 7

.if (sim_cpu > h8300h)
bset_imm3_abs16:
	set_grs_a5a5		; Fill all general regs with a fixed pattern

	;;  bset xx:3, @@aa:16
	set_ccr_zero
	bset	#0, @@byte_dst:16
	test_cc_clear
	mov	@@byte_dst, r2l
	test_h_gr8 1 r2l

	set_ccr_zero
	bset	#1, @@byte_dst:16
	test_cc_clear
	mov	@@byte_dst, r2l
	test_h_gr8 3 r2l

	set_ccr_zero
	bset	#2, @@byte_dst:16
	test_cc_clear
	mov	@@byte_dst, r2l
	test_h_gr8 7 r2l

	set_ccr_zero
	bset	#3, @@byte_dst:16
	test_cc_clear
	mov	@@byte_dst, r2l
	test_h_gr8 15 r2l

	set_ccr_zero
	bset	#4, @@byte_dst:16
	test_cc_clear
	mov	@@byte_dst, r2l
	test_h_gr8 31 r2l

	set_ccr_zero
	bset	#5, @@byte_dst:16
	test_cc_clear
	mov	@@byte_dst, r2l
	test_h_gr8 63 r2l

	set_ccr_zero
	bset	#6, @@byte_dst:16
	test_cc_clear
	mov	@@byte_dst, r2l
	test_h_gr8 127 r2l

	set_ccr_zero
	bset	#7, @@byte_dst:16
	test_cc_clear
	mov	@@byte_dst, r2l
	test_h_gr8 255 r2l

.if (sim_cpu == h8300)
	test_h_gr16  0xa5ff r2
.else
	test_h_gr32  0xa5a5a5ff er2
.endif

bclr_imm3_abs16:	
	set_ccr_zero
	bclr	#7, @@byte_dst:16
	test_cc_clear
	mov	@@byte_dst, r2l
	test_h_gr8 127 r2l

	set_ccr_zero
	bclr	#6, @@byte_dst:16
	test_cc_clear
	mov	@@byte_dst, r2l
	test_h_gr8 63 r2l

	set_ccr_zero
	bclr	#5, @@byte_dst:16
	test_cc_clear
	mov	@@byte_dst, r2l
	test_h_gr8 31 r2l

	set_ccr_zero
	bclr	#4, @@byte_dst:16
	test_cc_clear
	mov	@@byte_dst, r2l
	test_h_gr8 15 r2l

	set_ccr_zero
	bclr	#3, @@byte_dst:16
	test_cc_clear
	mov	@@byte_dst, r2l
	test_h_gr8 7  r2l

	set_ccr_zero
	bclr	#2, @@byte_dst:16
	test_cc_clear
	mov	@@byte_dst, r2l
	test_h_gr8 3  r2l

	set_ccr_zero
	bclr	#1, @@byte_dst:16
	test_cc_clear
	mov	@@byte_dst, r2l
	test_h_gr8 1  r2l

	set_ccr_zero
	bclr	#0, @@byte_dst:16
	test_cc_clear
	mov	@@byte_dst, r2l
	test_h_gr8 0  r2l

	test_gr_a5a5 0		; Make sure other general regs not disturbed
	test_gr_a5a5 1
.if (sim_cpu == h8300)
	test_h_gr16  0xa500   r2
.else
	test_h_gr32  0xa5a5a500 er2
.endif
	test_gr_a5a5 3
	test_gr_a5a5 4
	test_gr_a5a5 5
	test_gr_a5a5 6
	test_gr_a5a5 7
.endif
.endif

bset_rs8_rd8:
	set_grs_a5a5		; Fill all general regs with a fixed pattern

	;;  bset rs8, rd8
	mov	#0, r1h
	mov	#0, r1l
	set_ccr_zero
	bset	r1h, r1l
	test_cc_clear
	test_h_gr8 1 r1l

	mov	#1, r1h
	set_ccr_zero
	bset	r1h, r1l
	test_cc_clear
	test_h_gr8 3 r1l

	mov	#2, r1h
	set_ccr_zero
	bset	r1h, r1l
	test_cc_clear
	test_h_gr8 7 r1l

	mov	#3, r1h
	set_ccr_zero
	bset	r1h, r1l
	test_cc_clear
	test_h_gr8 15 r1l

	mov	#4, r1h
	set_ccr_zero
	bset	r1h, r1l
	test_cc_clear
	test_h_gr8 31 r1l

	mov	#5, r1h
	set_ccr_zero
	bset	r1h, r1l
	test_cc_clear
	test_h_gr8 63 r1l

	mov	#6, r1h
	set_ccr_zero
	bset	r1h, r1l
	test_cc_clear
	test_h_gr8 127 r1l

	mov	#7, r1h
	set_ccr_zero
	bset	r1h, r1l
	test_cc_clear
	test_h_gr8 255 r1l

.if (sim_cpu == h8300)
	test_h_gr16 0x07ff, r1
.else
	test_h_gr32  0xa5a507ff er1
.endif

bclr_rs8_rd8:	
	mov	#7, r1h
	set_ccr_zero
	bclr	r1h, r1l
	test_cc_clear
	test_h_gr8 127 r1l

	mov	#6, r1h
	set_ccr_zero
	bclr	r1h, r1l
	test_cc_clear
	test_h_gr8 63 r1l

	mov	#5, r1h
	set_ccr_zero
	bclr	r1h, r1l
	test_cc_clear
	test_h_gr8 31 r1l

	mov	#4, r1h
	set_ccr_zero
	bclr	r1h, r1l
	test_cc_clear
	test_h_gr8 15 r1l

	mov	#3, r1h
	set_ccr_zero
	bclr	r1h, r1l
	test_cc_clear
	test_h_gr8 7 r1l

	mov	#2, r1h
	set_ccr_zero
	bclr	r1h, r1l
	test_cc_clear
	test_h_gr8 3 r1l

	mov	#1, r1h
	set_ccr_zero
	bclr	r1h, r1l
	test_cc_clear
	test_h_gr8 1 r1l

	mov	#0, r1h
	set_ccr_zero
	bclr	r1h, r1l
	test_cc_clear
	test_h_gr8 0 r1l

	test_gr_a5a5 0		; Make sure other general regs not disturbed
.if (sim_cpu == h8300)
	test_h_gr16 0x0000 r1
.else
	test_h_gr32  0xa5a50000 er1
.endif
	test_gr_a5a5 2
	test_gr_a5a5 3
	test_gr_a5a5 4
	test_gr_a5a5 5
	test_gr_a5a5 6
	test_gr_a5a5 7

.if (sim_cpu)
bset_rs8_ind:
	set_grs_a5a5		; Fill all general regs with a fixed pattern

	;;  bset rs8, @@erd
	mov	#byte_dst, er1
	mov	#0, r2h
	set_ccr_zero
	bset	r2h, @@er1
	test_cc_clear
	mov	@@er1, r2l
	test_h_gr8 1 r2l

	mov	#1, r2h
	set_ccr_zero
	bset	r2h, @@er1
	test_cc_clear
	mov	@@er1, r2l
	test_h_gr8 3 r2l

	mov	#2, r2h
	set_ccr_zero
	bset	r2h, @@er1
	test_cc_clear
	mov	@@er1, r2l
	test_h_gr8 7 r2l

	mov	#3, r2h
	set_ccr_zero
	bset	r2h, @@er1
	test_cc_clear
	mov	@@er1, r2l
	test_h_gr8 15 r2l

	mov	#4, r2h
	set_ccr_zero
	bset	r2h, @@er1
	test_cc_clear
	mov	@@er1, r2l
	test_h_gr8 31 r2l

	mov	#5, r2h
	set_ccr_zero
	bset	r2h, @@er1
	test_cc_clear
	mov	@@er1, r2l
	test_h_gr8 63 r2l

	mov	#6, r2h
	set_ccr_zero
	bset	r2h, @@er1
	test_cc_clear
	mov	@@er1, r2l
	test_h_gr8 127 r2l

	mov	#7, r2h
	set_ccr_zero
	bset	r2h, @@er1
	test_cc_clear
	mov	@@er1, r2l
	test_h_gr8 255 r2l

.if (sim_cpu == h8300)
	test_h_gr16  0x07ff r2
.else
	test_h_gr32  0xa5a507ff er2
.endif

bclr_rs8_ind:	
	mov	#7, r2h
	set_ccr_zero
	bclr	r2h, @@er1
	test_cc_clear
	mov	@@er1, r2l
	test_h_gr8 127 r2l

	mov	#6, r2h
	set_ccr_zero
	bclr	r2h, @@er1
	test_cc_clear
	mov	@@er1, r2l
	test_h_gr8 63 r2l

	mov	#5, r2h
	set_ccr_zero
	bclr	r2h, @@er1
	test_cc_clear
	mov	@@er1, r2l
	test_h_gr8 31 r2l

	mov	#4, r2h
	set_ccr_zero
	bclr	r2h, @@er1
	test_cc_clear
	mov	@@er1, r2l
	test_h_gr8 15 r2l

	mov	#3, r2h
	set_ccr_zero
	bclr	r2h, @@er1
	test_cc_clear
	mov	@@er1, r2l
	test_h_gr8 7  r2l

	mov	#2, r2h
	set_ccr_zero
	bclr	r2h, @@er1
	test_cc_clear
	mov	@@er1, r2l
	test_h_gr8 3  r2l

	mov	#1, r2h
	set_ccr_zero
	bclr	r2h, @@er1
	test_cc_clear
	mov	@@er1, r2l
	test_h_gr8 1  r2l

	mov	#0, r2h
	set_ccr_zero
	bclr	r2h, @@er1
	test_cc_clear
	mov	@@er1, r2l
	test_h_gr8 0  r2l

	test_gr_a5a5 0		; Make sure other general regs not disturbed
.if (sim_cpu == h8300)
	test_h_gr16  byte_dst r1
	test_h_gr16  0x0000   r2
.else
	test_h_gr32  byte_dst   er1
	test_h_gr32  0xa5a50000 er2
.endif
	test_gr_a5a5 3
	test_gr_a5a5 4
	test_gr_a5a5 5
	test_gr_a5a5 6
	test_gr_a5a5 7

.if (sim_cpu > h8300h)
bset_rs8_abs32:
	set_grs_a5a5		; Fill all general regs with a fixed pattern

	;;  bset rs8, @@aa:32
	mov	#0, r2h
	set_ccr_zero
	bset	r2h, @@byte_dst:32
	test_cc_clear
	mov	@@byte_dst, r2l
	test_h_gr8 1 r2l

	mov	#1, r2h
	set_ccr_zero
	bset	r2h, @@byte_dst:32
	test_cc_clear
	mov	@@byte_dst, r2l
	test_h_gr8 3 r2l

	mov	#2, r2h
	set_ccr_zero
	bset	r2h, @@byte_dst:32
	test_cc_clear
	mov	@@byte_dst, r2l
	test_h_gr8 7 r2l

	mov	#3, r2h
	set_ccr_zero
	bset	r2h, @@byte_dst:32
	test_cc_clear
	mov	@@byte_dst, r2l
	test_h_gr8 15 r2l

	mov	#4, r2h
	set_ccr_zero
	bset	r2h, @@byte_dst:32
	test_cc_clear
	mov	@@byte_dst, r2l
	test_h_gr8 31 r2l

	mov	#5, r2h
	set_ccr_zero
	bset	r2h, @@byte_dst:32
	test_cc_clear
	mov	@@byte_dst, r2l
	test_h_gr8 63 r2l

	mov	#6, r2h
	set_ccr_zero
	bset	r2h, @@byte_dst:32
	test_cc_clear
	mov	@@byte_dst, r2l
	test_h_gr8 127 r2l

	mov	#7, r2h
	set_ccr_zero
	bset	r2h, @@byte_dst:32
	test_cc_clear
	mov	@@byte_dst, r2l
	test_h_gr8 255 r2l

.if (sim_cpu == h8300)
	test_h_gr16  0x07ff r2
.else
	test_h_gr32  0xa5a507ff er2
.endif

bclr_rs8_abs32:	
	mov	#7, r2h
	set_ccr_zero
	bclr	r2h, @@byte_dst:32
	test_cc_clear
	mov	@@byte_dst, r2l
	test_h_gr8 127 r2l

	mov	#6, r2h
	set_ccr_zero
	bclr	r2h, @@byte_dst:32
	test_cc_clear
	mov	@@byte_dst, r2l
	test_h_gr8 63 r2l

	mov	#5, r2h
	set_ccr_zero
	bclr	r2h, @@byte_dst:32
	test_cc_clear
	mov	@@byte_dst, r2l
	test_h_gr8 31 r2l

	mov	#4, r2h
	set_ccr_zero
	bclr	r2h, @@byte_dst:32
	test_cc_clear
	mov	@@byte_dst, r2l
	test_h_gr8 15 r2l

	mov	#3, r2h
	set_ccr_zero
	bclr	r2h, @@byte_dst:32
	test_cc_clear
	mov	@@byte_dst, r2l
	test_h_gr8 7  r2l

	mov	#2, r2h
	set_ccr_zero
	bclr	r2h, @@byte_dst:32
	test_cc_clear
	mov	@@byte_dst, r2l
	test_h_gr8 3  r2l

	mov	#1, r2h
	set_ccr_zero
	bclr	r2h, @@byte_dst:32
	test_cc_clear
	mov	@@byte_dst, r2l
	test_h_gr8 1  r2l

	mov	#0, r2h
	set_ccr_zero
	bclr	r2h, @@byte_dst:32
	test_cc_clear
	mov	@@byte_dst, r2l
	test_h_gr8 0  r2l

	test_gr_a5a5 0		; Make sure other general regs not disturbed
	test_gr_a5a5 1
.if (sim_cpu == h8300)
	test_h_gr16  0x0000   r2
.else
	test_h_gr32  0xa5a50000 er2
.endif
	test_gr_a5a5 3
	test_gr_a5a5 4
	test_gr_a5a5 5
	test_gr_a5a5 6
	test_gr_a5a5 7
.endif
.endif

.if (sim_cpu == h8sx)
bset_eq_imm3_abs16:
	set_grs_a5a5		; Fill all general regs with a fixed pattern

	;;  bset/eq xx:3, rd8
	mov	#0, @@byte_dst
	set_ccr_zero
	bset/eq	#0, @@byte_dst:16 ; Zero is clear, should have no effect.
	test_cc_clear
	mov	@@byte_dst, r1l
	test_h_gr8 0 r1l

	set_ccr_zero
	orc	#4, ccr		; Set zero flag
	bset/eq	#0, @@byte_dst:16 ; Zero is set: operation should succeed.

	test_neg_clear
	test_zero_set
	test_ovf_clear
	test_carry_clear

	mov	@@byte_dst, r1l
	test_h_gr8 1 r1l

bclr_eq_imm3_abs32:
	mov	#1, @@byte_dst
	set_ccr_zero
	bclr/eq	#0, @@byte_dst:32 ; Zero is clear, should have no effect.
	test_cc_clear
	mov	@@byte_dst, r1l
	test_h_gr8 1 r1l

	set_ccr_zero
	orc	#4, ccr		; Set zero flag
	bclr/eq	#0, @@byte_dst:32 ; Zero is set: operation should succeed.
	test_neg_clear
	test_zero_set
	test_ovf_clear
	test_carry_clear
	mov	@@byte_dst, r1l
	test_h_gr8 0 r1l

	test_gr_a5a5 0		; Make sure other general regs not disturbed
	test_h_gr32  0xa5a5a500 er1
	test_gr_a5a5 2
	test_gr_a5a5 3
	test_gr_a5a5 4
	test_gr_a5a5 5
	test_gr_a5a5 6
	test_gr_a5a5 7

bset_ne_imm3_abs16:
	set_grs_a5a5		; Fill all general regs with a fixed pattern

	;;  bset/ne xx:3, aa:16
	mov	#0, @@byte_dst
	set_ccr_zero
	orc	#4, ccr		; Set zero flag
	bset/ne	#0, @@byte_dst:16 ; Zero is set; should have no effect.
	test_zero_set
	test_neg_clear
	test_ovf_clear
	test_carry_clear
	mov	@@byte_dst, r1l
	test_h_gr8 0 r1l

	set_ccr_zero
	bset/ne	#0, @@byte_dst:16 ; Zero is clear: operation should succeed.
	test_cc_clear
	mov	@@byte_dst, r1l
	test_h_gr8 1 r1l

bclr_ne_imm3_abs32:
	mov	#1, @@byte_dst
	set_ccr_zero
	orc	#4, ccr		; Set zero flag
	;; bclr/ne xx:3, aa:16
	bclr/ne	#0, @@byte_dst:32 ; Zero is set, should have no effect.
	test_neg_clear
	test_zero_set
	test_ovf_clear
	test_carry_clear
	mov	@@byte_dst, r1l
	test_h_gr8 1 r1l

	set_ccr_zero
	bclr/ne	#0, @@byte_dst:32 ; Zero is clear: operation should succeed.
	test_cc_clear
	mov	@@byte_dst, r1l
	test_h_gr8 0 r1l

	test_gr_a5a5 0		; Make sure other general regs not disturbed
	test_h_gr32  0xa5a5a500 er1
	test_gr_a5a5 2
	test_gr_a5a5 3
	test_gr_a5a5 4
	test_gr_a5a5 5
	test_gr_a5a5 6
	test_gr_a5a5 7
.endif

	pass
	exit 0
@


1.2
log
@2003-05-30  Alexandre Oliva  <aoliva@@redhat.com>

	* allinsn.exp: Fix typos introduced on 2003-05-27.

2003-05-29  Michael Snyder  <msnyder@@redhat.com>

	* tas.s: Use er4 for h8h and h8s, er3 for h8sx.

2003-05-28  Michael Snyder  <msnyder@@redhat.com>

	* subs.s: New file.
	* subx.s: New file.
	* allinsn.exp: Add new subs and subx tests.
	* testutils.inc: Simplify (and fix) set_carry_flag.
	(clear_carry_flag, set_zero_flag, clear_zero_flag...): New macros.
	* addx.s: Use simplified set_carry_flag.

2003-05-27  Michael Snyder  <msnyder@@redhat.com>

	* tas.s: New file.
	* band.s: New file.
	* biand.s: New file.
	* allinsn.exp: Add tas, band, biand tests.
	* brabc.s: Add abs8 test.
	* bset.s: Add bset/ne, bclr/ne tests.

2003-05-23  Michael Snyder  <msnyder@@redhat.com>

	* and.b.s: Add andc exr.
	* or.b.s: Add orc.exr.
	* xor.b.s: Add xor exr.

	* jmp.s: Fix 8-bit indirect test.  Add 7-bit vector test.

2003-05-22  Michael Snyder  <msnyder@@redhat.com>

	* stack.s: Add rte/l and rts/l tests.
	* allinsn.exp: Add stack tests.

2003-05-21  Michael Snyder  <msnyder@@redhat.com>

	* stack.s: New file: test stack operations.
	* stack.s: Add bsr, jsr tests.
	* stack.s: Add trapa, rte tests.

	* div.s: Corrections for size of dividend.

2003-05-20  Michael Snyder  <msnyder@@redhat.com>

	* mul.s: Corrections for unsigned multiply.

	* div.s: New file, test div instructions.
	* allinsn.exp: Add div test.

2003-05-19  Michael Snyder  <msnyder@@redhat.com>

	* mul.s: New file, test mul instructions.
	* allinsn.exp: Add mul test.
@
text
@d266 1
d387 1
d649 1
d786 1
@


1.2.16.1
log
@Merge mainline to intercu branch - 2004-09-15
@
text
@a265 1
.if (sim_cpu > h8300h)
a385 1
.endif
a646 1
.if (sim_cpu > h8300h)
a782 1
.endif
@


1.2.10.1
log
@Merge drow-cplus-branch to:
  cvs rtag -D 2003-12-14 00:00:00 UTC drow-cplus-merge-20031214 gdb+dejagnu
@
text
@@


1.1
log
@2003-04-13  Michael Snyder  <msnyder@@redhat.com>

	* configure.in: Add testsuite to extra_subdirs.
	* configure: Regenerate.

2003-04-13  Michael Snyder  <msnyder@@redhat.com>

	* sim/h8300: New directory.  Tests for Hitachi h8/300 family.
@
text
@a826 3
.if (sim_cpu == h8300)
	test_h_gr16 0xa500 r1
.else
d828 49
a876 1
.endif
@

