head	1.1;
access;
symbols
	gdb_7_6_1-2013-08-30-release:1.1
	gdb_7_6-2013-04-26-release:1.1
	gdb_7_6-branch:1.1.0.92
	gdb_7_6-2013-03-12-branchpoint:1.1
	gdb_7_5_1-2012-11-29-release:1.1
	gdb_7_5-2012-08-17-release:1.1
	gdb_7_5-branch:1.1.0.90
	gdb_7_5-2012-07-18-branchpoint:1.1
	gdb_7_4_1-2012-04-26-release:1.1
	gdb_7_4-2012-01-24-release:1.1
	gdb_7_4-branch:1.1.0.88
	gdb_7_4-2011-12-13-branchpoint:1.1
	gdb_7_3_1-2011-09-04-release:1.1
	gdb_7_3-2011-07-26-release:1.1
	gdb_7_3-branch:1.1.0.86
	gdb_7_3-2011-04-01-branchpoint:1.1
	gdb_7_2-2010-09-02-release:1.1
	gdb_7_2-branch:1.1.0.84
	gdb_7_2-2010-07-07-branchpoint:1.1
	gdb_7_1-2010-03-18-release:1.1
	gdb_7_1-branch:1.1.0.82
	gdb_7_1-2010-02-18-branchpoint:1.1
	gdb_7_0_1-2009-12-22-release:1.1
	gdb_7_0-2009-10-06-release:1.1
	gdb_7_0-branch:1.1.0.80
	gdb_7_0-2009-09-16-branchpoint:1.1
	arc-sim-20090309:1.1
	msnyder-checkpoint-072509-branch:1.1.0.78
	msnyder-checkpoint-072509-branchpoint:1.1
	arc-insight_6_8-branch:1.1.0.76
	arc-insight_6_8-branchpoint:1.1
	insight_6_8-branch:1.1.0.74
	insight_6_8-branchpoint:1.1
	reverse-20081226-branch:1.1.0.72
	reverse-20081226-branchpoint:1.1
	multiprocess-20081120-branch:1.1.0.70
	multiprocess-20081120-branchpoint:1.1
	reverse-20080930-branch:1.1.0.68
	reverse-20080930-branchpoint:1.1
	reverse-20080717-branch:1.1.0.66
	reverse-20080717-branchpoint:1.1
	msnyder-reverse-20080609-branch:1.1.0.64
	msnyder-reverse-20080609-branchpoint:1.1
	drow-reverse-20070409-branch:1.1.0.62
	drow-reverse-20070409-branchpoint:1.1
	gdb_6_8-2008-03-27-release:1.1
	gdb_6_8-branch:1.1.0.60
	gdb_6_8-2008-02-26-branchpoint:1.1
	gdb_6_7_1-2007-10-29-release:1.1
	gdb_6_7-2007-10-10-release:1.1
	gdb_6_7-branch:1.1.0.58
	gdb_6_7-2007-09-07-branchpoint:1.1
	insight_6_6-20070208-release:1.1
	gdb_6_6-2006-12-18-release:1.1
	gdb_6_6-branch:1.1.0.56
	gdb_6_6-2006-11-15-branchpoint:1.1
	insight_6_5-20061003-release:1.1
	gdb-csl-symbian-6_4_50_20060226-12:1.1
	gdb-csl-sourcerygxx-3_4_4-25:1.1
	nickrob-async-20060828-mergepoint:1.1
	gdb-csl-symbian-6_4_50_20060226-11:1.1
	gdb-csl-sourcerygxx-4_1-17:1.1
	gdb-csl-20060226-branch-local-2:1.1
	gdb-csl-sourcerygxx-4_1-14:1.1
	gdb-csl-sourcerygxx-4_1-13:1.1
	gdb-csl-sourcerygxx-4_1-12:1.1
	gdb-csl-sourcerygxx-3_4_4-21:1.1
	gdb_6_5-20060621-release:1.1
	gdb-csl-sourcerygxx-4_1-9:1.1
	gdb-csl-sourcerygxx-4_1-8:1.1
	gdb-csl-sourcerygxx-4_1-7:1.1
	gdb-csl-arm-2006q1-6:1.1
	gdb-csl-sourcerygxx-4_1-6:1.1
	gdb-csl-symbian-6_4_50_20060226-10:1.1
	gdb-csl-symbian-6_4_50_20060226-9:1.1
	gdb-csl-symbian-6_4_50_20060226-8:1.1
	gdb-csl-coldfire-4_1-11:1.1
	gdb-csl-sourcerygxx-3_4_4-19:1.1
	gdb-csl-coldfire-4_1-10:1.1
	gdb_6_5-branch:1.1.0.54
	gdb_6_5-2006-05-14-branchpoint:1.1
	gdb-csl-sourcerygxx-4_1-5:1.1
	nickrob-async-20060513-branch:1.1.0.52
	nickrob-async-20060513-branchpoint:1.1
	gdb-csl-sourcerygxx-4_1-4:1.1
	msnyder-reverse-20060502-branch:1.1.0.50
	msnyder-reverse-20060502-branchpoint:1.1
	gdb-csl-morpho-4_1-4:1.1
	gdb-csl-sourcerygxx-3_4_4-17:1.1
	readline_5_1-import-branch:1.1.0.48
	readline_5_1-import-branchpoint:1.1
	gdb-csl-20060226-branch-merge-to-csl-symbian-1:1.1
	gdb-csl-symbian-20060226-branch:1.1.0.46
	gdb-csl-symbian-20060226-branchpoint:1.1
	gdb-csl-20060226-branch-merge-to-csl-local-1:1.1
	msnyder-reverse-20060331-branch:1.1.0.44
	msnyder-reverse-20060331-branchpoint:1.1
	gdb-csl-available-20060303-branch:1.1.0.42
	gdb-csl-available-20060303-branchpoint:1.1
	gdb-csl-20060226-branch:1.1.0.40
	gdb-csl-20060226-branchpoint:1.1
	gdb_6_4-20051202-release:1.1
	msnyder-fork-checkpoint-branch:1.1.0.38
	msnyder-fork-checkpoint-branchpoint:1.1
	gdb-csl-gxxpro-6_3-branch:1.1.0.36
	gdb-csl-gxxpro-6_3-branchpoint:1.1
	gdb_6_4-branch:1.1.0.34
	gdb_6_4-2005-11-01-branchpoint:1.1
	gdb-csl-arm-20051020-branch:1.1.0.32
	gdb-csl-arm-20051020-branchpoint:1.1
	gdb-csl-arm-20050325-2005-q1b:1.1
	gdb-csl-arm-20050325-2005-q1a:1.1
	csl-arm-20050325-branch:1.1.0.30
	csl-arm-20050325-branchpoint:1.1
	gdb_6_3-20041109-release:1.1
	gdb_6_3-branch:1.1.0.26
	gdb_6_3-20041019-branchpoint:1.1
	drow_intercu-merge-20040921:1.1
	drow_intercu-merge-20040915:1.1
	jimb-gdb_6_2-e500-branch:1.1.0.28
	jimb-gdb_6_2-e500-branchpoint:1.1
	gdb_6_2-20040730-release:1.1
	gdb_6_2-branch:1.1.0.24
	gdb_6_2-2004-07-10-gmt-branchpoint:1.1
	gdb_6_1_1-20040616-release:1.1
	gdb_6_1-2004-04-05-release:1.1
	drow_intercu-merge-20040402:1.1
	drow_intercu-merge-20040327:1.1
	ezannoni_pie-20040323-branch:1.1.0.22
	ezannoni_pie-20040323-branchpoint:1.1
	cagney_tramp-20040321-mergepoint:1.1
	cagney_tramp-20040309-branch:1.1.0.20
	cagney_tramp-20040309-branchpoint:1.1
	gdb_6_1-branch:1.1.0.18
	gdb_6_1-2004-03-01-gmt-branchpoint:1.1
	drow_intercu-20040221-branch:1.1.0.16
	drow_intercu-20040221-branchpoint:1.1
	cagney_bfdfile-20040213-branch:1.1.0.14
	cagney_bfdfile-20040213-branchpoint:1.1
	drow-cplus-merge-20040208:1.1
	carlton_dictionary-20040126-merge:1.1
	cagney_bigcore-20040122-branch:1.1.0.12
	cagney_bigcore-20040122-branchpoint:1.1
	drow-cplus-merge-20040113:1.1
	drow-cplus-merge-20031224:1.1
	drow-cplus-merge-20031220:1.1
	carlton_dictionary-20031215-merge:1.1
	drow-cplus-branch:1.1.0.10
	drow-cplus-merge-20031214:1.1
	carlton-dictionary-20031111-merge:1.1
	gdb_6_0-2003-10-04-release:1.1
	kettenis_sparc-20030918-branch:1.1.0.8
	kettenis_sparc-20030918-branchpoint:1.1
	carlton_dictionary-20030917-merge:1.1
	ezannoni_pie-20030916-branchpoint:1.1
	ezannoni_pie-20030916-branch:1.1.0.6
	cagney_x86i386-20030821-branch:1.1.0.4
	cagney_x86i386-20030821-branchpoint:1.1
	carlton_dictionary-20030805-merge:1.1
	carlton_dictionary-20030627-merge:1.1
	gdb_6_0-branch:1.1.0.2
	gdb_6_0-2003-06-23-branchpoint:1.1;
locks; strict;
comment	@# @;


1.1
date	2003.06.19.02.40.12;	author msnyder;	state Exp;
branches
	1.1.10.1;
next	;

1.1.10.1
date	2003.12.14.20.28.38;	author drow;	state Exp;
branches;
next	;


desc
@@


1.1
log
@2003-05-30  Alexandre Oliva  <aoliva@@redhat.com>

	* allinsn.exp: Fix typos introduced on 2003-05-27.

2003-05-29  Michael Snyder  <msnyder@@redhat.com>

	* tas.s: Use er4 for h8h and h8s, er3 for h8sx.

2003-05-28  Michael Snyder  <msnyder@@redhat.com>

	* subs.s: New file.
	* subx.s: New file.
	* allinsn.exp: Add new subs and subx tests.
	* testutils.inc: Simplify (and fix) set_carry_flag.
	(clear_carry_flag, set_zero_flag, clear_zero_flag...): New macros.
	* addx.s: Use simplified set_carry_flag.

2003-05-27  Michael Snyder  <msnyder@@redhat.com>

	* tas.s: New file.
	* band.s: New file.
	* biand.s: New file.
	* allinsn.exp: Add tas, band, biand tests.
	* brabc.s: Add abs8 test.
	* bset.s: Add bset/ne, bclr/ne tests.

2003-05-23  Michael Snyder  <msnyder@@redhat.com>

	* and.b.s: Add andc exr.
	* or.b.s: Add orc.exr.
	* xor.b.s: Add xor exr.

	* jmp.s: Fix 8-bit indirect test.  Add 7-bit vector test.

2003-05-22  Michael Snyder  <msnyder@@redhat.com>

	* stack.s: Add rte/l and rts/l tests.
	* allinsn.exp: Add stack tests.

2003-05-21  Michael Snyder  <msnyder@@redhat.com>

	* stack.s: New file: test stack operations.
	* stack.s: Add bsr, jsr tests.
	* stack.s: Add trapa, rte tests.

	* div.s: Corrections for size of dividend.

2003-05-20  Michael Snyder  <msnyder@@redhat.com>

	* mul.s: Corrections for unsigned multiply.

	* div.s: New file, test div instructions.
	* allinsn.exp: Add div test.

2003-05-19  Michael Snyder  <msnyder@@redhat.com>

	* mul.s: New file, test mul instructions.
	* allinsn.exp: Add mul test.
@
text
@# Hitachi H8 testcase 'subx'
# mach(): all
# as(h8300):	--defsym sim_cpu=0
# as(h8300h):	--defsym sim_cpu=1
# as(h8300s):	--defsym sim_cpu=2
# as(h8sx):	--defsym sim_cpu=3
# ld(h8300h):	-m h8300helf
# ld(h8300s):	-m h8300self
# ld(h8sx):	-m h8300sxelf	

	.include "testutils.inc"

	# Instructions tested:
	# subx.b #xx:8, rd8	; b rd8 xxxxxxxx
	# subx.b #xx:8, @@erd	; 7 d erd ???? b ???? xxxxxxxx 
	# subx.b #xx:8, @@erd-	; 0 1 7 6 6 c erd 1??? b ???? xxxxxxxx
	# subx.b rs8, rd8	; 1 e rs8 rd8
	# subx.b rs8, @@erd	; 7 d erd ???? 1 e rs8 ????
	# subx.b rs8, @@erd-	; 0 1 7 6 6 c erd 1??? 1 e rs8 ????
	# subx.b @@ers, rd8	; 7 c ers ???? 1 e ???? rd8
	# subx.b @@ers-, rd8	; 0 1 7 6 6 c ers 00?? 1 e ???? rd8
	# subx.b @@ers, @@erd	; 0 1 7 4 6 8 ers d 0 erd 3 ???? 
	# subx.b @@ers-, @@erd-	; 0 1 7 6 6 c ers d a erd 3 ????
	#
	# word ops
	# long ops	

.data
byte_src:	.byte 0x5
byte_dest:	.byte 0

	.align 2
word_src:	.word 0x505
word_dest:	.word 0

	.align 4
long_src:	.long 0x50505
long_dest:	.long 0


	start

subx_b_imm8_0:
	set_grs_a5a5		; Fill all general regs with a fixed pattern
	set_ccr_zero

	;;  subx.b #xx:8,Rd	; Subx with carry initially zero.
	subx.b	#5, r0l		; Immediate 8-bit operand

	test_carry_clear	; H=0 N=1 Z=0 V=0 C=0
	test_ovf_clear
	test_zero_clear
	test_neg_set

	test_h_gr16 0xa5a0 r0	; sub result:	a5 - 5
.if (sim_cpu)			; non-zero means h8300h, s, or sx
	test_h_gr32 0xa5a5a5a0 er0	; sub result:	 a5 - 5
.endif
	test_gr_a5a5 1		; Make sure other general regs not disturbed
	test_gr_a5a5 2
	test_gr_a5a5 3
	test_gr_a5a5 4
	test_gr_a5a5 5
	test_gr_a5a5 6
	test_gr_a5a5 7
	
subx_b_imm8_1:
	set_grs_a5a5		; Fill all general regs with a fixed pattern
	set_ccr_zero

	;;  subx.b #xx:8,Rd	; Subx with carry initially one.
	set_carry_flag
	subx.b	#4, r0l		; Immediate 8-bit operand

	test_carry_clear	; H=0 N=1 Z=0 V=0 C=0
	test_ovf_clear
	test_zero_clear
	test_neg_set

	test_h_gr16 0xa5a0 r0	; sub result:	a5 - (4 + 1)
.if (sim_cpu)			; non-zero means h8300h, s, or sx
	test_h_gr32 0xa5a5a5a0 er0	; sub result:	 a5 - (4 + 1)
.endif
	test_gr_a5a5 1		; Make sure other general regs not disturbed
	test_gr_a5a5 2
	test_gr_a5a5 3
	test_gr_a5a5 4
	test_gr_a5a5 5
	test_gr_a5a5 6
	test_gr_a5a5 7
	
.if (sim_cpu == h8sx)
subx_b_imm8_rdind:
	set_grs_a5a5		; Fill all general regs with a fixed pattern

	;;  subx.b #xx:8,@@eRd	; Subx to register indirect
	mov	#byte_dest, er0
	mov.b	#0xa5, @@er0
	set_ccr_zero
	subx.b	#5, @@er0

	test_carry_clear	; H=0 N=0 Z=0 V=0 C=0
	test_ovf_clear
	test_zero_clear
	test_neg_set

	test_h_gr32 byte_dest er0	; er0 still contains subress

	test_gr_a5a5 1		; Make sure other general regs not disturbed
	test_gr_a5a5 2
	test_gr_a5a5 3
	test_gr_a5a5 4
	test_gr_a5a5 5
	test_gr_a5a5 6
	test_gr_a5a5 7

	;; Now check the result of the sub to memory.
	cmp.b	#0xa0, @@byte_dest
	beq	.Lb1
	fail
.Lb1:

subx_b_imm8_rdpostdec:
	set_grs_a5a5		; Fill all general regs with a fixed pattern

	;;  subx.b #xx:8,@@eRd-	; Subx to register post-decrement
	mov	#byte_dest, er0
	mov.b	#0xa5, @@er0
	set_ccr_zero
	subx.b	#5, @@er0-

	test_carry_clear	; H=0 N=1 Z=0 V=0 C=0
	test_ovf_clear
	test_zero_clear
	test_neg_set

	test_h_gr32 byte_dest-1 er0	; er0 contains subress minus one

	test_gr_a5a5 1		; Make sure other general regs not disturbed
	test_gr_a5a5 2
	test_gr_a5a5 3
	test_gr_a5a5 4
	test_gr_a5a5 5
	test_gr_a5a5 6
	test_gr_a5a5 7

	;; Now check the result of the sub to memory.
	cmp.b	#0xa0, @@byte_dest
	beq	.Lb2
	fail
.Lb2:
.endif

subx_b_reg8_0:
	set_grs_a5a5		; Fill all general regs with a fixed pattern

	;;  subx.b Rs,Rd	; subx with carry initially zero
	mov.b	#5, r0h
	set_ccr_zero
	subx.b	r0h, r0l	; Register operand

	test_carry_clear	; H=0 N=1 Z=0 V=0 C=0
	test_ovf_clear
	test_zero_clear
	test_neg_set

	test_h_gr16 0x05a0 r0	; sub result:	a5 - 5
.if (sim_cpu)			; non-zero means h8300h, s, or sx
	test_h_gr32 0xa5a505a0 er0	; sub result:	a5 - 5
.endif
	test_gr_a5a5 1		; Make sure other general regs not disturbed
	test_gr_a5a5 2
	test_gr_a5a5 3
	test_gr_a5a5 4
	test_gr_a5a5 5
	test_gr_a5a5 6
	test_gr_a5a5 7

subx_b_reg8_1:
	set_grs_a5a5		; Fill all general regs with a fixed pattern

	;;  subx.b Rs,Rd	; subx with carry initially one
	mov.b	#4, r0h
	set_ccr_zero
	set_carry_flag
	subx.b	r0h, r0l	; Register operand

	test_carry_clear	; H=0 N=1 Z=0 V=0 C=0
	test_ovf_clear
	test_zero_clear
	test_neg_set

	test_h_gr16 0x04a0 r0	; sub result:	a5 - (4 + 1)
.if (sim_cpu)			; non-zero means h8300h, s, or sx
	test_h_gr32 0xa5a504a0 er0	; sub result:	a5 - (4 + 1)
.endif
	test_gr_a5a5 1		; Make sure other general regs not disturbed
	test_gr_a5a5 2
	test_gr_a5a5 3
	test_gr_a5a5 4
	test_gr_a5a5 5
	test_gr_a5a5 6
	test_gr_a5a5 7
	
.if (sim_cpu == h8sx)
subx_b_reg8_rdind:
	set_grs_a5a5		; Fill all general regs with a fixed pattern

	;;  subx.b rs8,@@eRd	; Subx to register indirect
	mov	#byte_dest, er0
	mov.b	#0xa5, @@er0
	mov.b	#5, r1l
	set_ccr_zero
	subx.b	r1l, @@er0

	test_carry_clear	; H=0 N=1 Z=0 V=0 C=0
	test_ovf_clear
	test_zero_clear
	test_neg_set

	test_h_gr32 byte_dest er0	; er0 still contains subress
	test_h_gr32 0xa5a5a505 er1	; er1 has the test load

	test_gr_a5a5 2		; Make sure other general regs not disturbed
	test_gr_a5a5 3
	test_gr_a5a5 4
	test_gr_a5a5 5
	test_gr_a5a5 6
	test_gr_a5a5 7

	;; Now check the result of the sub to memory.
	cmp.b	#0xa0, @@byte_dest
	beq	.Lb3
	fail
.Lb3:

subx_b_reg8_rdpostdec:
	set_grs_a5a5		; Fill all general regs with a fixed pattern

	;;  subx.b rs8,@@eRd-	; Subx to register post-decrement
	mov	#byte_dest, er0
	mov.b	#0xa5, @@er0
	mov.b	#5, r1l
	set_ccr_zero
	subx.b	r1l, @@er0-

	test_carry_clear	; H=0 N=1 Z=0 V=0 C=0
	test_ovf_clear
	test_zero_clear
	test_neg_set

	test_h_gr32 byte_dest-1 er0	; er0 contains subress minus one
	test_h_gr32 0xa5a5a505 er1	; er1 contains the test load

	test_gr_a5a5 2		; Make sure other general regs not disturbed
	test_gr_a5a5 3
	test_gr_a5a5 4
	test_gr_a5a5 5
	test_gr_a5a5 6
	test_gr_a5a5 7

	;; Now check the result of the sub to memory.
	cmp.b	#0xa0, @@byte_dest
	beq	.Lb4
	fail
.Lb4:

subx_b_rsind_reg8:
	set_grs_a5a5		; Fill all general regs with a fixed pattern

	;;  subx.b @@eRs,rd8	; Subx from reg indirect to reg
	mov	#byte_src, er0
	set_ccr_zero
	subx.b	@@er0, r1l

	test_carry_clear	; H=0 N=1 Z=0 V=0 C=0
	test_ovf_clear
	test_zero_clear
	test_neg_set

	test_h_gr32 byte_src er0	; er0 still contains subress
	test_h_gr32 0xa5a5a5a0 er1	; er1 contains the sum

	test_gr_a5a5 2		; Make sure other general regs not disturbed
	test_gr_a5a5 3
	test_gr_a5a5 4
	test_gr_a5a5 5
	test_gr_a5a5 6
	test_gr_a5a5 7

subx_b_rspostdec_reg8:
	set_grs_a5a5		; Fill all general regs with a fixed pattern

	;;  subx.b @@eRs-,rd8	; Subx to register post-decrement
	mov	#byte_src, er0
	set_ccr_zero
	subx.b	@@er0-, r1l

	test_carry_clear	; H=0 N=1 Z=0 V=0 C=0
	test_ovf_clear
	test_zero_clear
	test_neg_set

	test_h_gr32 byte_src-1 er0	; er0 contains subress minus one
	test_h_gr32 0xa5a5a5a0 er1	; er1 contains the sum

	test_gr_a5a5 2		; Make sure other general regs not disturbed
	test_gr_a5a5 3
	test_gr_a5a5 4
	test_gr_a5a5 5
	test_gr_a5a5 6
	test_gr_a5a5 7

subx_b_rsind_rdind:
	set_grs_a5a5		; Fill all general regs with a fixed pattern

	;;  subx.b @@eRs,rd8	; Subx from reg indirect to reg
	mov	#byte_src, er0
	mov	#byte_dest, er1
	mov.b	#0xa5, @@er1
	set_ccr_zero
	subx.b	@@er0, @@er1

	test_carry_clear	; H=0 N=1 Z=0 V=0 C=0
	test_ovf_clear
	test_zero_clear
	test_neg_set

	test_h_gr32 byte_src er0	; er0 still contains src subress
	test_h_gr32 byte_dest er1	; er1 still contains dst subress

	test_gr_a5a5 2		; Make sure other general regs not disturbed
	test_gr_a5a5 3
	test_gr_a5a5 4
	test_gr_a5a5 5
	test_gr_a5a5 6
	test_gr_a5a5 7
	;; Now check the result of the sub to memory.
	cmp.b	#0xa0, @@byte_dest
	beq	.Lb5
	fail
.Lb5:

subx_b_rspostdec_rdpostdec:
	set_grs_a5a5		; Fill all general regs with a fixed pattern

	mov	#byte_src, er0
	mov	#byte_dest, er1
	mov.b	#0xa5, @@er1
	set_ccr_zero
	;;  subx.b @@eRs-,@@erd-	; Subx post-decrement to post-decrement
	subx.b	@@er0-, @@er1-

	test_carry_clear	; H=0 N=1 Z=0 V=0 C=0
	test_ovf_clear
	test_zero_clear
	test_neg_set

	test_h_gr32 byte_src-1 er0	; er0 contains src subress minus one
	test_h_gr32 byte_dest-1 er1	; er1 contains dst subress minus one

	test_gr_a5a5 2		; Make sure other general regs not disturbed
	test_gr_a5a5 3
	test_gr_a5a5 4
	test_gr_a5a5 5
	test_gr_a5a5 6
	test_gr_a5a5 7
	;; Now check the result of the sub to memory.
	cmp.b	#0xa0, @@byte_dest
	beq	.Lb6
	fail
.Lb6:

subx_w_imm16_0:
	set_grs_a5a5		; Fill all general regs with a fixed pattern
	set_ccr_zero

	;;  subx.w #xx:16,Rd	; Subx with carry initially zero.
	subx.w	#0x505, r0	; Immediate 16-bit operand

	test_carry_clear	; H=0 N=1 Z=0 V=0 C=0
	test_ovf_clear
	test_zero_clear
	test_neg_set

	test_h_gr16 0xa0a0 r0	; sub result:	0xa5a5 + 0x505
	test_h_gr32 0xa5a5a0a0 er0	; sub result:	 0xa5a5 + 0x505
	test_gr_a5a5 1		; Make sure other general regs not disturbed
	test_gr_a5a5 2
	test_gr_a5a5 3
	test_gr_a5a5 4
	test_gr_a5a5 5
	test_gr_a5a5 6
	test_gr_a5a5 7
	
subx_w_imm16_1:
	set_grs_a5a5		; Fill all general regs with a fixed pattern
	set_ccr_zero

	;;  subx.w #xx:16,Rd	; Subx with carry initially one.
	set_carry_flag
	subx.w	#0x504, r0	; Immediate 16-bit operand

	test_carry_clear	; H=0 N=1 Z=0 V=0 C=0
	test_ovf_clear
	test_zero_clear
	test_neg_set

	test_h_gr16 0xa0a0 r0	; sub result:	0xa5a5 + 0x505 + 1
	test_h_gr32 0xa5a5a0a0 er0	; sub result:	 0xa5a5 + 0x505 + 1
	test_gr_a5a5 1		; Make sure other general regs not disturbed
	test_gr_a5a5 2
	test_gr_a5a5 3
	test_gr_a5a5 4
	test_gr_a5a5 5
	test_gr_a5a5 6
	test_gr_a5a5 7
	
subx_w_imm16_rdind:
	set_grs_a5a5		; Fill all general regs with a fixed pattern

	;;  subx.w #xx:16,@@eRd	; Subx to register indirect
	mov	#word_dest, er0
	mov.w	#0xa5a5, @@er0
	set_ccr_zero
	subx.w	#0x505, @@er0

	test_carry_clear	; H=0 N=1 Z=0 V=0 C=0
	test_ovf_clear
	test_zero_clear
	test_neg_set

	test_h_gr32 word_dest er0	; er0 still contains subress

	test_gr_a5a5 1		; Make sure other general regs not disturbed
	test_gr_a5a5 2
	test_gr_a5a5 3
	test_gr_a5a5 4
	test_gr_a5a5 5
	test_gr_a5a5 6
	test_gr_a5a5 7

	;; Now check the result of the sub to memory.
	cmp.w	#0xa0a0, @@word_dest
	beq	.Lw1
	fail
.Lw1:

subx_w_imm16_rdpostdec:
	set_grs_a5a5		; Fill all general regs with a fixed pattern

	;;  subx.w #xx:16,@@eRd-	; Subx to register post-decrement
	mov	#word_dest, er0
	mov.w	#0xa5a5, @@er0
	set_ccr_zero
	subx.w	#0x505, @@er0-

	test_carry_clear	; H=0 N=1 Z=0 V=0 C=0
	test_ovf_clear
	test_zero_clear
	test_neg_set

	test_h_gr32 word_dest-2 er0	; er0 contains subress minus one

	test_gr_a5a5 1		; Make sure other general regs not disturbed
	test_gr_a5a5 2
	test_gr_a5a5 3
	test_gr_a5a5 4
	test_gr_a5a5 5
	test_gr_a5a5 6
	test_gr_a5a5 7

	;; Now check the result of the sub to memory.
	cmp.w	#0xa0a0, @@word_dest
	beq	.Lw2
	fail
.Lw2:

subx_w_reg16_0:
	set_grs_a5a5		; Fill all general regs with a fixed pattern

	;;  subx.w Rs,Rd	; subx with carry initially zero
	mov.w	#0x505, e0
	set_ccr_zero
	subx.w	e0, r0		; Register operand

	test_carry_clear	; H=0 N=1 Z=0 V=0 C=0
	test_ovf_clear
	test_zero_clear
	test_neg_set

	test_h_gr32 0x0505a0a0 er0	; sub result:
	test_gr_a5a5 1		; Make sure other general regs not disturbed
	test_gr_a5a5 2
	test_gr_a5a5 3
	test_gr_a5a5 4
	test_gr_a5a5 5
	test_gr_a5a5 6
	test_gr_a5a5 7

subx_w_reg16_1:
	set_grs_a5a5		; Fill all general regs with a fixed pattern

	;;  subx.w Rs,Rd	; subx with carry initially one
	mov.w	#0x504, e0
	set_ccr_zero
	set_carry_flag
	subx.w	e0, r0		; Register operand

	test_carry_clear	; H=0 N=1 Z=0 V=0 C=0
	test_ovf_clear
	test_zero_clear
	test_neg_set

	test_h_gr32 0x0504a0a0 er0	; sub result:
	test_gr_a5a5 1		; Make sure other general regs not disturbed
	test_gr_a5a5 2
	test_gr_a5a5 3
	test_gr_a5a5 4
	test_gr_a5a5 5
	test_gr_a5a5 6
	test_gr_a5a5 7
	
subx_w_reg16_rdind:
	set_grs_a5a5		; Fill all general regs with a fixed pattern

	;;  subx.w rs8,@@eRd	; Subx to register indirect
	mov	#word_dest, er0
	mov.w	#0xa5a5, @@er0
	mov.w	#0x505, r1
	set_ccr_zero
	subx.w	r1, @@er0

	test_carry_clear	; H=0 N=1 Z=0 V=0 C=0
	test_ovf_clear
	test_zero_clear
	test_neg_set

	test_h_gr32 word_dest er0	; er0 still contains subress
	test_h_gr32 0xa5a50505 er1	; er1 has the test load

	test_gr_a5a5 2		; Make sure other general regs not disturbed
	test_gr_a5a5 3
	test_gr_a5a5 4
	test_gr_a5a5 5
	test_gr_a5a5 6
	test_gr_a5a5 7

	;; Now check the result of the sub to memory.
	cmp.w	#0xa0a0, @@word_dest
	beq	.Lw3
	fail
.Lw3:

subx_w_reg16_rdpostdec:
	set_grs_a5a5		; Fill all general regs with a fixed pattern

	;;  subx.w rs8,@@eRd-	; Subx to register post-decrement
	mov	#word_dest, er0
	mov.w	#0xa5a5, @@er0
	mov.w	#0x505, r1
	set_ccr_zero
	subx.w	r1, @@er0-

	test_carry_clear	; H=0 N=1 Z=0 V=0 C=0
	test_ovf_clear
	test_zero_clear
	test_neg_set

	test_h_gr32 word_dest-2 er0	; er0 contains subress minus one
	test_h_gr32 0xa5a50505  er1	; er1 contains the test load

	test_gr_a5a5 2		; Make sure other general regs not disturbed
	test_gr_a5a5 3
	test_gr_a5a5 4
	test_gr_a5a5 5
	test_gr_a5a5 6
	test_gr_a5a5 7

	;; Now check the result of the sub to memory.
	cmp.w	#0xa0a0, @@word_dest
	beq	.Lw4
	fail
.Lw4:

subx_w_rsind_reg16:
	set_grs_a5a5		; Fill all general regs with a fixed pattern

	;;  subx.w @@eRs,rd8	; Subx from reg indirect to reg
	mov	#word_src, er0
	set_ccr_zero
	subx.w	@@er0, r1

	test_carry_clear	; H=0 N=1 Z=0 V=0 C=0
	test_ovf_clear
	test_zero_clear
	test_neg_set

	test_h_gr32 word_src er0	; er0 still contains subress
	test_h_gr32 0xa5a5a0a0 er1	; er1 contains the sum

	test_gr_a5a5 2		; Make sure other general regs not disturbed
	test_gr_a5a5 3
	test_gr_a5a5 4
	test_gr_a5a5 5
	test_gr_a5a5 6
	test_gr_a5a5 7

subx_w_rspostdec_reg16:
	set_grs_a5a5		; Fill all general regs with a fixed pattern

	;;  subx.w @@eRs-,rd8	; Subx to register post-decrement
	mov	#word_src, er0
	set_ccr_zero
	subx.w	@@er0-, r1

	test_carry_clear	; H=0 N=1 Z=0 V=0 C=0
	test_ovf_clear
	test_zero_clear
	test_neg_set

	test_h_gr32 word_src-2 er0	; er0 contains subress minus one
	test_h_gr32 0xa5a5a0a0 er1	; er1 contains the sum

	test_gr_a5a5 2		; Make sure other general regs not disturbed
	test_gr_a5a5 3
	test_gr_a5a5 4
	test_gr_a5a5 5
	test_gr_a5a5 6
	test_gr_a5a5 7

subx_w_rsind_rdind:
	set_grs_a5a5		; Fill all general regs with a fixed pattern

	;;  subx.w @@eRs,rd8	; Subx from reg indirect to reg
	mov	#word_src, er0
	mov	#word_dest, er1
	mov.w	#0xa5a5, @@er1
	set_ccr_zero
	subx.w	@@er0, @@er1

	test_carry_clear	; H=0 N=1 Z=0 V=0 C=0
	test_ovf_clear
	test_zero_clear
	test_neg_set

	test_h_gr32 word_src er0	; er0 still contains src subress
	test_h_gr32 word_dest er1	; er1 still contains dst subress

	test_gr_a5a5 2		; Make sure other general regs not disturbed
	test_gr_a5a5 3
	test_gr_a5a5 4
	test_gr_a5a5 5
	test_gr_a5a5 6
	test_gr_a5a5 7
	;; Now check the result of the sub to memory.
	cmp.w	#0xa0a0, @@word_dest
	beq	.Lw5
	fail
.Lw5:

subx_w_rspostdec_rdpostdec:
	set_grs_a5a5		; Fill all general regs with a fixed pattern

	;;  subx.w @@eRs-,rd8	; Subx to register post-decrement
	mov	#word_src, er0
	mov	#word_dest, er1
	mov.w	#0xa5a5, @@er1
	set_ccr_zero
	subx.w	@@er0-, @@er1-

	test_carry_clear	; H=0 N=1 Z=0 V=0 C=0
	test_ovf_clear
	test_zero_clear
	test_neg_set

	test_h_gr32 word_src-2 er0	; er0 contains src subress minus one
	test_h_gr32 word_dest-2 er1	; er1 contains dst subress minus one

	test_gr_a5a5 2		; Make sure other general regs not disturbed
	test_gr_a5a5 3
	test_gr_a5a5 4
	test_gr_a5a5 5
	test_gr_a5a5 6
	test_gr_a5a5 7
	;; Now check the result of the sub to memory.
	cmp.w	#0xa0a0, @@word_dest
	beq	.Lw6
	fail
.Lw6:

subx_l_imm32_0:
	set_grs_a5a5		; Fill all general regs with a fixed pattern
	set_ccr_zero

	;;  subx.l #xx:32,Rd	; Subx with carry initially zero.
	subx.l	#0x50505, er0	; Immediate 32-bit operand

	test_carry_clear	; H=0 N=1 Z=0 V=0 C=0
	test_ovf_clear
	test_zero_clear
	test_neg_set

	test_h_gr32 0xa5a0a0a0 er0	; sub result:
	test_gr_a5a5 1		; Make sure other general regs not disturbed
	test_gr_a5a5 2
	test_gr_a5a5 3
	test_gr_a5a5 4
	test_gr_a5a5 5
	test_gr_a5a5 6
	test_gr_a5a5 7
	
subx_l_imm32_1:
	set_grs_a5a5		; Fill all general regs with a fixed pattern
	set_ccr_zero

	;;  subx.l #xx:32,Rd	; Subx with carry initially one.
	set_carry_flag
	subx.l	#0x50504, er0	; Immediate 32-bit operand

	test_carry_clear	; H=0 N=1 Z=0 V=0 C=0
	test_ovf_clear
	test_zero_clear
	test_neg_set

	test_h_gr32 0xa5a0a0a0 er0	; sub result:
	test_gr_a5a5 1		; Make sure other general regs not disturbed
	test_gr_a5a5 2
	test_gr_a5a5 3
	test_gr_a5a5 4
	test_gr_a5a5 5
	test_gr_a5a5 6
	test_gr_a5a5 7
	
subx_l_imm32_rdind:
	set_grs_a5a5		; Fill all general regs with a fixed pattern

	;;  subx.l #xx:32,@@eRd	; Subx to register indirect
	mov	#long_dest, er0
	mov.l	#0xa5a5a5a5, @@er0
	set_ccr_zero
	subx.l	#0x50505, @@er0

	test_carry_clear	; H=0 N=1 Z=0 V=0 C=0
	test_ovf_clear
	test_zero_clear
	test_neg_set

	test_h_gr32 long_dest er0	; er0 still contains subress

	test_gr_a5a5 1		; Make sure other general regs not disturbed
	test_gr_a5a5 2
	test_gr_a5a5 3
	test_gr_a5a5 4
	test_gr_a5a5 5
	test_gr_a5a5 6
	test_gr_a5a5 7

	;; Now check the result of the sub to memory.
	cmp.l	#0xa5a0a0a0, @@long_dest
	beq	.Ll1
	fail
.Ll1:

subx_l_imm32_rdpostdec:
	set_grs_a5a5		; Fill all general regs with a fixed pattern

	;;  subx.l #xx:32,@@eRd-	; Subx to register post-decrement
	mov	#long_dest, er0
	mov.l	#0xa5a5a5a5, @@er0
	set_ccr_zero
	subx.l	#0x50505, @@er0-

	test_carry_clear	; H=0 N=1 Z=0 V=0 C=0
	test_ovf_clear
	test_zero_clear
	test_neg_set

	test_h_gr32 long_dest-4 er0	; er0 contains subress minus one

	test_gr_a5a5 1		; Make sure other general regs not disturbed
	test_gr_a5a5 2
	test_gr_a5a5 3
	test_gr_a5a5 4
	test_gr_a5a5 5
	test_gr_a5a5 6
	test_gr_a5a5 7

	;; Now check the result of the sub to memory.
	cmp.l	#0xa5a0a0a0, @@long_dest
	beq	.Ll2
	fail
.Ll2:

subx_l_reg32_0:
	set_grs_a5a5		; Fill all general regs with a fixed pattern

	;;  subx.l Rs,Rd	; subx with carry initially zero
	mov.l	#0x50505, er0
	set_ccr_zero
	subx.l	er0, er1	; Register operand

	test_carry_clear	; H=0 N=1 Z=0 V=0 C=0
	test_ovf_clear
	test_zero_clear
	test_neg_set

	test_h_gr32 0x50505    er0	; sub load
	test_h_gr32 0xa5a0a0a0 er1	; sub result:
	test_gr_a5a5 2		; Make sure other general regs not disturbed
	test_gr_a5a5 3
	test_gr_a5a5 4
	test_gr_a5a5 5
	test_gr_a5a5 6
	test_gr_a5a5 7

subx_l_reg32_1:
	set_grs_a5a5		; Fill all general regs with a fixed pattern

	;;  subx.l Rs,Rd	; subx with carry initially one
	mov.l	#0x50504, er0
	set_ccr_zero
	set_carry_flag
	subx.l	er0, er1	; Register operand

	test_carry_clear	; H=0 N=1 Z=0 V=0 C=0
	test_ovf_clear
	test_zero_clear
	test_neg_set

	test_h_gr32 0x50504    er0	; sub result:
	test_h_gr32 0xa5a0a0a0 er1	; sub result:
	test_gr_a5a5 2		; Make sure other general regs not disturbed
	test_gr_a5a5 3
	test_gr_a5a5 4
	test_gr_a5a5 5
	test_gr_a5a5 6
	test_gr_a5a5 7
	
subx_l_reg32_rdind:
	set_grs_a5a5		; Fill all general regs with a fixed pattern

	;;  subx.l rs8,@@eRd	; Subx to register indirect
	mov	#long_dest, er0
	mov.l	er1, @@er0
	mov.l	#0x50505, er1
	set_ccr_zero
	subx.l	er1, @@er0

	test_carry_clear	; H=0 N=1 Z=0 V=0 C=0
	test_ovf_clear
	test_zero_clear
	test_neg_set

	test_h_gr32 long_dest er0	; er0 still contains subress
	test_h_gr32 0x50505   er1	; er1 has the test load

	test_gr_a5a5 2		; Make sure other general regs not disturbed
	test_gr_a5a5 3
	test_gr_a5a5 4
	test_gr_a5a5 5
	test_gr_a5a5 6
	test_gr_a5a5 7

	;; Now check the result of the sub to memory.
	cmp.l	#0xa5a0a0a0, @@long_dest
	beq	.Ll3
	fail
.Ll3:

subx_l_reg32_rdpostdec:
	set_grs_a5a5		; Fill all general regs with a fixed pattern

	;;  subx.l rs8,@@eRd-	; Subx to register post-decrement
	mov	#long_dest, er0
	mov.l	er1, @@er0
	mov.l	#0x50505, er1
	set_ccr_zero
	subx.l	er1, @@er0-

	test_carry_clear	; H=0 N=1 Z=0 V=0 C=0
	test_ovf_clear
	test_zero_clear
	test_neg_set

	test_h_gr32 long_dest-4 er0	; er0 contains subress minus one
	test_h_gr32 0x50505     er1	; er1 contains the test load

	test_gr_a5a5 2		; Make sure other general regs not disturbed
	test_gr_a5a5 3
	test_gr_a5a5 4
	test_gr_a5a5 5
	test_gr_a5a5 6
	test_gr_a5a5 7

	;; Now check the result of the sub to memory.
	cmp.l	#0xa5a0a0a0, @@long_dest
	beq	.Ll4
	fail
.Ll4:

subx_l_rsind_reg32:
	set_grs_a5a5		; Fill all general regs with a fixed pattern

	;;  subx.l @@eRs,rd8	; Subx from reg indirect to reg
	mov	#long_src, er0
	set_ccr_zero
	subx.l	@@er0, er1

	test_carry_clear	; H=0 N=1 Z=0 V=0 C=0
	test_ovf_clear
	test_zero_clear
	test_neg_set

	test_h_gr32 long_src er0	; er0 still contains subress
	test_h_gr32 0xa5a0a0a0 er1	; er1 contains the sum

	test_gr_a5a5 2		; Make sure other general regs not disturbed
	test_gr_a5a5 3
	test_gr_a5a5 4
	test_gr_a5a5 5
	test_gr_a5a5 6
	test_gr_a5a5 7

subx_l_rspostdec_reg32:
	set_grs_a5a5		; Fill all general regs with a fixed pattern

	;;  subx.l @@eRs-,rd8	; Subx to register post-decrement
	mov	#long_src, er0
	set_ccr_zero
	subx.l	@@er0-, er1

	test_carry_clear	; H=0 N=1 Z=0 V=0 C=0
	test_ovf_clear
	test_zero_clear
	test_neg_set

	test_h_gr32 long_src-4 er0	; er0 contains subress minus one
	test_h_gr32 0xa5a0a0a0 er1	; er1 contains the sum

	test_gr_a5a5 2		; Make sure other general regs not disturbed
	test_gr_a5a5 3
	test_gr_a5a5 4
	test_gr_a5a5 5
	test_gr_a5a5 6
	test_gr_a5a5 7

subx_l_rsind_rdind:
	set_grs_a5a5		; Fill all general regs with a fixed pattern

	;;  subx.l @@eRs,rd8	; Subx from reg indirect to reg
	mov	#long_src, er0
	mov	#long_dest, er1
	mov.l	er2, @@er1
	set_ccr_zero
	subx.l	@@er0, @@er1

	test_carry_clear	; H=0 N=1 Z=0 V=0 C=0
	test_ovf_clear
	test_zero_clear
	test_neg_set

	test_h_gr32 long_src er0	; er0 still contains src subress
	test_h_gr32 long_dest er1	; er1 still contains dst subress

	test_gr_a5a5 2		; Make sure other general regs not disturbed
	test_gr_a5a5 3
	test_gr_a5a5 4
	test_gr_a5a5 5
	test_gr_a5a5 6
	test_gr_a5a5 7
	;; Now check the result of the sub to memory.
	cmp.l	#0xa5a0a0a0, @@long_dest
	beq	.Ll5
	fail
.Ll5:

subx_l_rspostdec_rdpostdec:
	set_grs_a5a5		; Fill all general regs with a fixed pattern

	;;  subx.l @@eRs-,rd8	; Subx to register post-decrement
	mov	#long_src, er0
	mov	#long_dest, er1
	mov.l	er2, @@er1
	set_ccr_zero
	subx.l	@@er0-, @@er1-

	test_carry_clear	; H=0 N=1 Z=0 V=0 C=0
	test_ovf_clear
	test_zero_clear
	test_neg_set

	test_h_gr32 long_src-4 er0	; er0 contains src subress minus one
	test_h_gr32 long_dest-4 er1	; er1 contains dst subress minus one

	test_gr_a5a5 2		; Make sure other general regs not disturbed
	test_gr_a5a5 3
	test_gr_a5a5 4
	test_gr_a5a5 5
	test_gr_a5a5 6
	test_gr_a5a5 7
	;; Now check the result of the sub to memory.
	cmp.l	#0xa5a0a0a0, @@long_dest
	beq	.Ll6
	fail
.Ll6:
.endif
	pass

	exit 0
@


1.1.10.1
log
@Merge drow-cplus-branch to:
  cvs rtag -D 2003-12-14 00:00:00 UTC drow-cplus-merge-20031214 gdb+dejagnu
@
text
@@

