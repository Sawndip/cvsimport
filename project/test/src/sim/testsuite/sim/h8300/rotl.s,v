head	1.1;
access;
symbols
	gdb_7_6_1-2013-08-30-release:1.1
	gdb_7_6-2013-04-26-release:1.1
	gdb_7_6-branch:1.1.0.104
	gdb_7_6-2013-03-12-branchpoint:1.1
	gdb_7_5_1-2012-11-29-release:1.1
	gdb_7_5-2012-08-17-release:1.1
	gdb_7_5-branch:1.1.0.102
	gdb_7_5-2012-07-18-branchpoint:1.1
	gdb_7_4_1-2012-04-26-release:1.1
	gdb_7_4-2012-01-24-release:1.1
	gdb_7_4-branch:1.1.0.100
	gdb_7_4-2011-12-13-branchpoint:1.1
	gdb_7_3_1-2011-09-04-release:1.1
	gdb_7_3-2011-07-26-release:1.1
	gdb_7_3-branch:1.1.0.98
	gdb_7_3-2011-04-01-branchpoint:1.1
	gdb_7_2-2010-09-02-release:1.1
	gdb_7_2-branch:1.1.0.96
	gdb_7_2-2010-07-07-branchpoint:1.1
	gdb_7_1-2010-03-18-release:1.1
	gdb_7_1-branch:1.1.0.94
	gdb_7_1-2010-02-18-branchpoint:1.1
	gdb_7_0_1-2009-12-22-release:1.1
	gdb_7_0-2009-10-06-release:1.1
	gdb_7_0-branch:1.1.0.92
	gdb_7_0-2009-09-16-branchpoint:1.1
	arc-sim-20090309:1.1
	msnyder-checkpoint-072509-branch:1.1.0.90
	msnyder-checkpoint-072509-branchpoint:1.1
	arc-insight_6_8-branch:1.1.0.88
	arc-insight_6_8-branchpoint:1.1
	insight_6_8-branch:1.1.0.86
	insight_6_8-branchpoint:1.1
	reverse-20081226-branch:1.1.0.84
	reverse-20081226-branchpoint:1.1
	multiprocess-20081120-branch:1.1.0.82
	multiprocess-20081120-branchpoint:1.1
	reverse-20080930-branch:1.1.0.80
	reverse-20080930-branchpoint:1.1
	reverse-20080717-branch:1.1.0.78
	reverse-20080717-branchpoint:1.1
	msnyder-reverse-20080609-branch:1.1.0.76
	msnyder-reverse-20080609-branchpoint:1.1
	drow-reverse-20070409-branch:1.1.0.74
	drow-reverse-20070409-branchpoint:1.1
	gdb_6_8-2008-03-27-release:1.1
	gdb_6_8-branch:1.1.0.72
	gdb_6_8-2008-02-26-branchpoint:1.1
	gdb_6_7_1-2007-10-29-release:1.1
	gdb_6_7-2007-10-10-release:1.1
	gdb_6_7-branch:1.1.0.70
	gdb_6_7-2007-09-07-branchpoint:1.1
	insight_6_6-20070208-release:1.1
	gdb_6_6-2006-12-18-release:1.1
	gdb_6_6-branch:1.1.0.68
	gdb_6_6-2006-11-15-branchpoint:1.1
	insight_6_5-20061003-release:1.1
	gdb-csl-symbian-6_4_50_20060226-12:1.1
	gdb-csl-sourcerygxx-3_4_4-25:1.1
	nickrob-async-20060828-mergepoint:1.1
	gdb-csl-symbian-6_4_50_20060226-11:1.1
	gdb-csl-sourcerygxx-4_1-17:1.1
	gdb-csl-20060226-branch-local-2:1.1
	gdb-csl-sourcerygxx-4_1-14:1.1
	gdb-csl-sourcerygxx-4_1-13:1.1
	gdb-csl-sourcerygxx-4_1-12:1.1
	gdb-csl-sourcerygxx-3_4_4-21:1.1
	gdb_6_5-20060621-release:1.1
	gdb-csl-sourcerygxx-4_1-9:1.1
	gdb-csl-sourcerygxx-4_1-8:1.1
	gdb-csl-sourcerygxx-4_1-7:1.1
	gdb-csl-arm-2006q1-6:1.1
	gdb-csl-sourcerygxx-4_1-6:1.1
	gdb-csl-symbian-6_4_50_20060226-10:1.1
	gdb-csl-symbian-6_4_50_20060226-9:1.1
	gdb-csl-symbian-6_4_50_20060226-8:1.1
	gdb-csl-coldfire-4_1-11:1.1
	gdb-csl-sourcerygxx-3_4_4-19:1.1
	gdb-csl-coldfire-4_1-10:1.1
	gdb_6_5-branch:1.1.0.66
	gdb_6_5-2006-05-14-branchpoint:1.1
	gdb-csl-sourcerygxx-4_1-5:1.1
	nickrob-async-20060513-branch:1.1.0.64
	nickrob-async-20060513-branchpoint:1.1
	gdb-csl-sourcerygxx-4_1-4:1.1
	msnyder-reverse-20060502-branch:1.1.0.62
	msnyder-reverse-20060502-branchpoint:1.1
	gdb-csl-morpho-4_1-4:1.1
	gdb-csl-sourcerygxx-3_4_4-17:1.1
	readline_5_1-import-branch:1.1.0.60
	readline_5_1-import-branchpoint:1.1
	gdb-csl-20060226-branch-merge-to-csl-symbian-1:1.1
	gdb-csl-symbian-20060226-branch:1.1.0.58
	gdb-csl-symbian-20060226-branchpoint:1.1
	gdb-csl-20060226-branch-merge-to-csl-local-1:1.1
	msnyder-reverse-20060331-branch:1.1.0.56
	msnyder-reverse-20060331-branchpoint:1.1
	gdb-csl-available-20060303-branch:1.1.0.54
	gdb-csl-available-20060303-branchpoint:1.1
	gdb-csl-20060226-branch:1.1.0.52
	gdb-csl-20060226-branchpoint:1.1
	gdb_6_4-20051202-release:1.1
	msnyder-fork-checkpoint-branch:1.1.0.50
	msnyder-fork-checkpoint-branchpoint:1.1
	gdb-csl-gxxpro-6_3-branch:1.1.0.48
	gdb-csl-gxxpro-6_3-branchpoint:1.1
	gdb_6_4-branch:1.1.0.46
	gdb_6_4-2005-11-01-branchpoint:1.1
	gdb-csl-arm-20051020-branch:1.1.0.44
	gdb-csl-arm-20051020-branchpoint:1.1
	gdb-csl-arm-20050325-2005-q1b:1.1
	gdb-csl-arm-20050325-2005-q1a:1.1
	csl-arm-20050325-branch:1.1.0.42
	csl-arm-20050325-branchpoint:1.1
	gdb_6_3-20041109-release:1.1
	gdb_6_3-branch:1.1.0.38
	gdb_6_3-20041019-branchpoint:1.1
	drow_intercu-merge-20040921:1.1
	drow_intercu-merge-20040915:1.1
	jimb-gdb_6_2-e500-branch:1.1.0.40
	jimb-gdb_6_2-e500-branchpoint:1.1
	gdb_6_2-20040730-release:1.1
	gdb_6_2-branch:1.1.0.36
	gdb_6_2-2004-07-10-gmt-branchpoint:1.1
	gdb_6_1_1-20040616-release:1.1
	gdb_6_1-2004-04-05-release:1.1
	drow_intercu-merge-20040402:1.1
	drow_intercu-merge-20040327:1.1
	ezannoni_pie-20040323-branch:1.1.0.34
	ezannoni_pie-20040323-branchpoint:1.1
	cagney_tramp-20040321-mergepoint:1.1
	cagney_tramp-20040309-branch:1.1.0.32
	cagney_tramp-20040309-branchpoint:1.1
	gdb_6_1-branch:1.1.0.30
	gdb_6_1-2004-03-01-gmt-branchpoint:1.1
	drow_intercu-20040221-branch:1.1.0.28
	drow_intercu-20040221-branchpoint:1.1
	cagney_bfdfile-20040213-branch:1.1.0.26
	cagney_bfdfile-20040213-branchpoint:1.1
	drow-cplus-merge-20040208:1.1
	carlton_dictionary-20040126-merge:1.1
	cagney_bigcore-20040122-branch:1.1.0.24
	cagney_bigcore-20040122-branchpoint:1.1
	drow-cplus-merge-20040113:1.1
	drow-cplus-merge-20031224:1.1
	drow-cplus-merge-20031220:1.1
	carlton_dictionary-20031215-merge:1.1
	drow-cplus-branch:1.1.0.22
	drow-cplus-merge-20031214:1.1
	carlton-dictionary-20031111-merge:1.1
	gdb_6_0-2003-10-04-release:1.1
	kettenis_sparc-20030918-branch:1.1.0.20
	kettenis_sparc-20030918-branchpoint:1.1
	carlton_dictionary-20030917-merge:1.1
	ezannoni_pie-20030916-branchpoint:1.1
	ezannoni_pie-20030916-branch:1.1.0.18
	cagney_x86i386-20030821-branch:1.1.0.16
	cagney_x86i386-20030821-branchpoint:1.1
	carlton_dictionary-20030805-merge:1.1
	carlton_dictionary-20030627-merge:1.1
	gdb_6_0-branch:1.1.0.14
	gdb_6_0-2003-06-23-branchpoint:1.1
	jimb-ppc64-linux-20030613-branch:1.1.0.12
	jimb-ppc64-linux-20030613-branchpoint:1.1
	cagney_convert-20030606-branch:1.1.0.10
	cagney_convert-20030606-branchpoint:1.1
	jimb-ppc64-linux-20030528-branch:1.1.0.8
	jimb-ppc64-linux-20030528-branchpoint:1.1
	carlton_dictionary-20030523-merge:1.1
	cagney_fileio-20030521-branch:1.1.0.6
	cagney_fileio-20030521-branchpoint:1.1
	kettenis_i386newframe-20030517-mergepoint:1.1
	jimb-ppc64-linux-20030509-branch:1.1.0.4
	jimb-ppc64-linux-20030509-branchpoint:1.1
	kettenis_i386newframe-20030504-mergepoint:1.1
	carlton_dictionary-20030430-merge:1.1
	kettenis_i386newframe-20030419-branch:1.1.0.2
	kettenis_i386newframe-20030419-branchpoint:1.1
	carlton_dictionary-20030416-merge:1.1;
locks; strict;
comment	@# @;


1.1
date	2003.04.13.16.44.57;	author msnyder;	state Exp;
branches
	1.1.22.1;
next	;

1.1.22.1
date	2003.12.14.20.28.38;	author drow;	state Exp;
branches;
next	;


desc
@@


1.1
log
@2003-04-13  Michael Snyder  <msnyder@@redhat.com>

	* configure.in: Add testsuite to extra_subdirs.
	* configure: Regenerate.

2003-04-13  Michael Snyder  <msnyder@@redhat.com>

	* sim/h8300: New directory.  Tests for Hitachi h8/300 family.
@
text
@# Hitachi H8 testcase 'rotl'
# mach(): all
# as(h8300):	--defsym sim_cpu=0
# as(h8300h):	--defsym sim_cpu=1
# as(h8300s):	--defsym sim_cpu=2
# as(h8sx):	--defsym sim_cpu=3
# ld(h8300h):	-m h8300helf
# ld(h8300s):	-m h8300self
# ld(h8sx):	-m h8300sxelf

	.include "testutils.inc"

	start

	.data
byte_dest:	.byte	0xa5
	.align 2
word_dest:	.word	0xa5a5
	.align 4
long_dest:	.long	0xa5a5a5a5

	.text

rotl_b_reg8_1:
	set_grs_a5a5		; Fill all general regs with a fixed pattern
	set_ccr_zero

	rotl.b	r0l		; shift left arithmetic by one

	test_carry_set		; H=0 N=0 Z=0 V=0 C=1
	test_zero_clear
	test_ovf_clear		
	test_neg_clear
	test_h_gr16 0xa54b r0	; 1010 0101 -> 0100 1011
.if (sim_cpu)
	test_h_gr32 0xa5a5a54b er0
.endif
	test_gr_a5a5 1		; Make sure other general regs not disturbed
	test_gr_a5a5 2
	test_gr_a5a5 3
	test_gr_a5a5 4
	test_gr_a5a5 5
	test_gr_a5a5 6
	test_gr_a5a5 7

.if (sim_cpu == h8sx)
rotl_b_ind_1:
	set_grs_a5a5		; Fill all general regs with a fixed pattern
	set_ccr_zero

	mov	#byte_dest, er0
	rotl.b	@@er0	; shift right arithmetic by one, indirect

	test_carry_set		; H=0 N=0 Z=0 V=0 C=1
	test_zero_clear
	test_ovf_clear
	test_neg_clear

	test_h_gr32  byte_dest er0
	test_gr_a5a5 1		; Make sure other general regs not disturbed
	test_gr_a5a5 2
	test_gr_a5a5 3
	test_gr_a5a5 4
	test_gr_a5a5 5
	test_gr_a5a5 6
	test_gr_a5a5 7
	; 1010 0101 -> 0100 1011
	cmp.b	#0x4b, @@byte_dest
	beq	.Lbind1
	fail
.Lbind1:
	mov.b	#0xa5, @@byte_dest

rotl_b_indexb16_1:
	set_grs_a5a5		; Fill all general regs with a fixed pattern
	set_ccr_zero

	mov.b	#5, r0l
	rotl.b	@@(byte_dest-5:16, r0.b)	; indexed byte/byte

	test_carry_set		; H=0 N=0 Z=0 V=0 C=1
	test_zero_clear
	test_ovf_clear
	test_neg_clear

	test_h_gr32  0xa5a5a505 er0
	test_gr_a5a5 1		; Make sure other general regs not disturbed
	test_gr_a5a5 2
	test_gr_a5a5 3
	test_gr_a5a5 4
	test_gr_a5a5 5
	test_gr_a5a5 6
	test_gr_a5a5 7
	; 1010 0101 -> 0100 1011
	cmp.b	#0x4b, @@byte_dest
	beq	.Lbindexb161
	fail
.Lbindexb161:
	mov.b	#0xa5, @@byte_dest

rotl_b_indexw16_1:
	set_grs_a5a5		; Fill all general regs with a fixed pattern
	set_ccr_zero

	mov.w	#256, r0
	rotl.b	@@(byte_dest-256:16, r0.w)	; indexed byte/word

	test_carry_set		; H=0 N=0 Z=0 V=0 C=1
	test_zero_clear
	test_ovf_clear
	test_neg_clear

	test_h_gr32  0xa5a50100 er0
	test_gr_a5a5 1		; Make sure other general regs not disturbed
	test_gr_a5a5 2
	test_gr_a5a5 3
	test_gr_a5a5 4
	test_gr_a5a5 5
	test_gr_a5a5 6
	test_gr_a5a5 7
	; 1010 0101 -> 0100 1011
	cmp.b	#0x4b, @@byte_dest
	beq	.Lbindexw161
	fail
.Lbindexw161:
	mov.b	#0xa5, @@byte_dest

rotl_b_indexl16_1:
	set_grs_a5a5		; Fill all general regs with a fixed pattern
	set_ccr_zero

	mov.l	#0xffffffff, er0
	rotl.b	@@(byte_dest+1:16, er0.l)	; indexed byte/long

	test_carry_set		; H=0 N=0 Z=0 V=0 C=1
	test_zero_clear
	test_ovf_clear
	test_neg_clear

	test_h_gr32  0xffffffff er0
	test_gr_a5a5 1		; Make sure other general regs not disturbed
	test_gr_a5a5 2
	test_gr_a5a5 3
	test_gr_a5a5 4
	test_gr_a5a5 5
	test_gr_a5a5 6
	test_gr_a5a5 7
	; 1010 0101 -> 0100 1011
	cmp.b	#0x4b, @@byte_dest
	beq	.Lbindexl161
	fail
.Lbindexl161:
	mov.b	#0xa5, @@byte_dest

rotl_b_indexb32_1:
	set_grs_a5a5		; Fill all general regs with a fixed pattern
	set_ccr_zero

	mov.b	#5, r1l
	rotl.b	@@(byte_dest-5:32, r1.b)	; indexed byte/byte

	test_carry_set		; H=0 N=0 Z=0 V=0 C=1
	test_zero_clear
	test_ovf_clear
	test_neg_clear

	test_h_gr32  0xa5a5a505 er1
	test_gr_a5a5 0		; Make sure other general regs not disturbed
	test_gr_a5a5 2
	test_gr_a5a5 3
	test_gr_a5a5 4
	test_gr_a5a5 5
	test_gr_a5a5 6
	test_gr_a5a5 7
	; 1010 0101 -> 0100 1011
	cmp.b	#0x4b, @@byte_dest
	beq	.Lbindexb321
	fail
.Lbindexb321:
	mov.b	#0xa5, @@byte_dest

rotl_b_indexw32_1:
	set_grs_a5a5		; Fill all general regs with a fixed pattern
	set_ccr_zero

	mov.w	#256, r1
	rotl.b	@@(byte_dest-256:32, r1.w)	; indexed byte/word

	test_carry_set		; H=0 N=0 Z=0 V=0 C=1
	test_zero_clear
	test_ovf_clear
	test_neg_clear

	test_h_gr32  0xa5a50100 er1
	test_gr_a5a5 0		; Make sure other general regs not disturbed
	test_gr_a5a5 2
	test_gr_a5a5 3
	test_gr_a5a5 4
	test_gr_a5a5 5
	test_gr_a5a5 6
	test_gr_a5a5 7
	; 1010 0101 -> 0100 1011
	cmp.b	#0x4b, @@byte_dest
	beq	.Lbindexw321
	fail
.Lbindexw321:
	mov.b	#0xa5, @@byte_dest

rotl_b_indexl32_1:
	set_grs_a5a5		; Fill all general regs with a fixed pattern
	set_ccr_zero

	mov.l	#0xffffffff, er1
	rotl.b	@@(byte_dest+1:32, er1.l)	; indexed byte/long

	test_carry_set		; H=0 N=0 Z=0 V=0 C=1
	test_zero_clear
	test_ovf_clear
	test_neg_clear

	test_h_gr32  0xffffffff er1
	test_gr_a5a5 0		; Make sure other general regs not disturbed
	test_gr_a5a5 2
	test_gr_a5a5 3
	test_gr_a5a5 4
	test_gr_a5a5 5
	test_gr_a5a5 6
	test_gr_a5a5 7
	; 1010 0101 -> 0100 1011
	cmp.b	#0x4b, @@byte_dest
	beq	.Lbindexl321
	fail
.Lbindexl321:
	mov.b	#0xa5, @@byte_dest

.endif

rotl_b_reg8_2:
	set_grs_a5a5		; Fill all general regs with a fixed pattern
	set_ccr_zero

	rotl.b	#2, r0l		; shift left arithmetic by two

	test_carry_clear	; H=0 N=1 Z=0 V=0 C=0
	test_zero_clear
	test_ovf_clear		
	test_neg_set

	test_h_gr16 0xa596 r0	; 1010 0101 -> 1001 0110
.if (sim_cpu)
	test_h_gr32 0xa5a5a596 er0
.endif
	test_gr_a5a5 1		; Make sure other general regs not disturbed
	test_gr_a5a5 2
	test_gr_a5a5 3
	test_gr_a5a5 4
	test_gr_a5a5 5
	test_gr_a5a5 6
	test_gr_a5a5 7

.if (sim_cpu == h8sx)
rotl_b_ind_2:
	set_grs_a5a5		; Fill all general regs with a fixed pattern
	set_ccr_zero

	mov	#byte_dest, er0
	rotl.b	#2, @@er0	; shift right arithmetic by one, indirect

	test_carry_clear	; H=0 N=1 Z=0 C=0
	test_zero_clear
	test_ovf_clear
	test_neg_set

	test_h_gr32  byte_dest er0
	test_gr_a5a5 1		; Make sure other general regs not disturbed
	test_gr_a5a5 2
	test_gr_a5a5 3
	test_gr_a5a5 4
	test_gr_a5a5 5
	test_gr_a5a5 6
	test_gr_a5a5 7
	; 1010 0101 -> 1001 0110
	cmp.b	#0x96, @@byte_dest
	beq	.Lbind2
	fail
.Lbind2:
	mov.b	#0xa5, @@byte_dest

rotl_b_indexb16_2:
	set_grs_a5a5		; Fill all general regs with a fixed pattern
	set_ccr_zero

	mov.b	#5, r0l
	rotl.b	#2, @@(byte_dest-5:16, r0.b)	; indexed byte/byte

	test_carry_clear	; H=0 N=1 Z=0 C=0
	test_zero_clear
	test_ovf_clear
	test_neg_set

	test_h_gr32  0xa5a5a505 er0
	test_gr_a5a5 1		; Make sure other general regs not disturbed
	test_gr_a5a5 2
	test_gr_a5a5 3
	test_gr_a5a5 4
	test_gr_a5a5 5
	test_gr_a5a5 6
	test_gr_a5a5 7
	; 1010 0101 -> 1001 0110
	cmp.b	#0x96, @@byte_dest
	beq	.Lbindexb162
	fail
.Lbindexb162:
	mov.b	#0xa5, @@byte_dest

rotl_b_indexw16_2:
	set_grs_a5a5		; Fill all general regs with a fixed pattern
	set_ccr_zero

	mov.w	#256, r0
	rotl.b	#2, @@(byte_dest-256:16, r0.w)	; indexed byte/word

	test_carry_clear	; H=0 N=1 Z=0 C=0
	test_zero_clear
	test_ovf_clear
	test_neg_set

	test_h_gr32  0xa5a50100 er0
	test_gr_a5a5 1		; Make sure other general regs not disturbed
	test_gr_a5a5 2
	test_gr_a5a5 3
	test_gr_a5a5 4
	test_gr_a5a5 5
	test_gr_a5a5 6
	test_gr_a5a5 7
	; 1010 0101 -> 1001 0110
	cmp.b	#0x96, @@byte_dest
	beq	.Lbindexw162
	fail
.Lbindexw162:
	mov.b	#0xa5, @@byte_dest

rotl_b_indexl16_2:
	set_grs_a5a5		; Fill all general regs with a fixed pattern
	set_ccr_zero

	mov.l	#0xffffffff, er0
	rotl.b	#2, @@(byte_dest+1:16, er0.l)	; indexed byte/long

	test_carry_clear	; H=0 N=1 Z=0 C=0
	test_zero_clear
	test_ovf_clear
	test_neg_set

	test_h_gr32  0xffffffff er0
	test_gr_a5a5 1		; Make sure other general regs not disturbed
	test_gr_a5a5 2
	test_gr_a5a5 3
	test_gr_a5a5 4
	test_gr_a5a5 5
	test_gr_a5a5 6
	test_gr_a5a5 7
	; 1010 0101 -> 1001 0110
	cmp.b	#0x96, @@byte_dest
	beq	.Lbindexl162
	fail
.Lbindexl162:
	mov.b	#0xa5, @@byte_dest

rotl_b_indexb32_2:
	set_grs_a5a5		; Fill all general regs with a fixed pattern
	set_ccr_zero

	mov.b	#5, r1l
	rotl.b	#2, @@(byte_dest-5:32, r1.b)	; indexed byte/byte

	test_carry_clear	; H=0 N=1 Z=0 C=0
	test_zero_clear
	test_ovf_clear
	test_neg_set

	test_h_gr32  0xa5a5a505 er1
	test_gr_a5a5 0		; Make sure other general regs not disturbed
	test_gr_a5a5 2
	test_gr_a5a5 3
	test_gr_a5a5 4
	test_gr_a5a5 5
	test_gr_a5a5 6
	test_gr_a5a5 7
	; 1010 0101 -> 1001 0110
	cmp.b	#0x96, @@byte_dest
	beq	.Lbindexb322
	fail
.Lbindexb322:
	mov.b	#0xa5, @@byte_dest

rotl_b_indexw32_2:
	set_grs_a5a5		; Fill all general regs with a fixed pattern
	set_ccr_zero

	mov.w	#256, r1
	rotl.b	#2, @@(byte_dest-256:32, r1.w)	; indexed byte/word

	test_carry_clear	; H=0 N=1 Z=0 C=0
	test_zero_clear
	test_ovf_clear
	test_neg_set

	test_h_gr32  0xa5a50100 er1
	test_gr_a5a5 0		; Make sure other general regs not disturbed
	test_gr_a5a5 2
	test_gr_a5a5 3
	test_gr_a5a5 4
	test_gr_a5a5 5
	test_gr_a5a5 6
	test_gr_a5a5 7
	; 1010 0101 -> 1001 0110
	cmp.b	#0x96, @@byte_dest
	beq	.Lbindexw322
	fail
.Lbindexw322:
	mov.b	#0xa5, @@byte_dest

rotl_b_indexl32_2:
	set_grs_a5a5		; Fill all general regs with a fixed pattern
	set_ccr_zero

	mov.l	#0xffffffff, er1
	rotl.b	#2, @@(byte_dest+1:32, er1.l)	; indexed byte/long

	test_carry_clear	; H=0 N=1 Z=0 C=0
	test_zero_clear
	test_ovf_clear
	test_neg_set

	test_h_gr32  0xffffffff er1
	test_gr_a5a5 0		; Make sure other general regs not disturbed
	test_gr_a5a5 2
	test_gr_a5a5 3
	test_gr_a5a5 4
	test_gr_a5a5 5
	test_gr_a5a5 6
	test_gr_a5a5 7
	; 1010 0101 -> 1001 0110
	cmp.b	#0x96, @@byte_dest
	beq	.Lbindexl322
	fail
.Lbindexl322:
	mov.b	#0xa5, @@byte_dest

.endif

.if (sim_cpu)			; Not available in h8300 mode
rotl_w_reg16_1:
	set_grs_a5a5		; Fill all general regs with a fixed pattern
	set_ccr_zero

	rotl.w	r0		; shift left arithmetic by one

	test_carry_set		; H=0 N=0 Z=0 V=0 C=1
	test_zero_clear
	test_ovf_clear		
	test_neg_clear
	test_h_gr16 0x4b4b r0	; 1010 0101 1010 0101 -> 0100 1011 0100 1011
	test_h_gr32 0xa5a54b4b er0

	test_gr_a5a5 1		; Make sure other general regs not disturbed
	test_gr_a5a5 2
	test_gr_a5a5 3
	test_gr_a5a5 4
	test_gr_a5a5 5
	test_gr_a5a5 6
	test_gr_a5a5 7

.if (sim_cpu == h8sx)
rotl_w_indexb16_1:
	set_grs_a5a5		; Fill all general regs with a fixed pattern
	set_ccr_zero

	mov.b	#5, r0l
	rotl.w	@@(word_dest-10:16, r0.b)	; indexed word/byte

	test_carry_set		; H=0 N=0 Z=0 V=0 C=1
	test_zero_clear
	test_ovf_clear
	test_neg_clear

	test_h_gr32  0xa5a5a505 er0
	test_gr_a5a5 1		; Make sure other general regs not disturbed
	test_gr_a5a5 2
	test_gr_a5a5 3
	test_gr_a5a5 4
	test_gr_a5a5 5
	test_gr_a5a5 6
	test_gr_a5a5 7
	; 1010 0101 1010 0101 -> 0100 1011 0100 1011
	cmp.w	#0x4b4b, @@word_dest
	beq	.Lwindexb161
	fail
.Lwindexb161:
	mov.w	#0xa5a5, @@word_dest

rotl_w_indexw16_1:
	set_grs_a5a5		; Fill all general regs with a fixed pattern
	set_ccr_zero

	mov.w	#256, r0
	rotl.w	@@(word_dest-512:16, r0.w)	; indexed word/word

	test_carry_set		; H=0 N=0 Z=0 V=0 C=1
	test_zero_clear
	test_ovf_clear
	test_neg_clear

	test_h_gr32  0xa5a50100 er0
	test_gr_a5a5 1		; Make sure other general regs not disturbed
	test_gr_a5a5 2
	test_gr_a5a5 3
	test_gr_a5a5 4
	test_gr_a5a5 5
	test_gr_a5a5 6
	test_gr_a5a5 7
	; 1010 0101 1010 0101 -> 0100 1011 0100 1011
	cmp.w	#0x4b4b, @@word_dest
	beq	.Lwindexw161
	fail
.Lwindexw161:
	mov.w	#0xa5a5, @@word_dest

rotl_w_indexl16_1:
	set_grs_a5a5		; Fill all general regs with a fixed pattern
	set_ccr_zero

	mov.l	#0xffffffff, er0
	rotl.w	@@(word_dest+2:16, er0.l)	; indexed word/long

	test_carry_set		; H=0 N=0 Z=0 V=0 C=1
	test_zero_clear
	test_ovf_clear
	test_neg_clear

	test_h_gr32  0xffffffff er0
	test_gr_a5a5 1		; Make sure other general regs not disturbed
	test_gr_a5a5 2
	test_gr_a5a5 3
	test_gr_a5a5 4
	test_gr_a5a5 5
	test_gr_a5a5 6
	test_gr_a5a5 7
	; 1010 0101 1010 0101 -> 0100 1011 0100 1011
	cmp.w	#0x4b4b, @@word_dest
	beq	.Lwindexl161
	fail
.Lwindexl161:
	mov.w	#0xa5a5, @@word_dest

rotl_w_indexb32_1:
	set_grs_a5a5		; Fill all general regs with a fixed pattern
	set_ccr_zero

	mov.b	#5, r1l
	rotl.w	@@(word_dest-10:32, r1.b)	; indexed word/byte

	test_carry_set		; H=0 N=0 Z=0 V=0 C=1
	test_zero_clear
	test_ovf_clear
	test_neg_clear

	test_h_gr32  0xa5a5a505 er1
	test_gr_a5a5 0		; Make sure other general regs not disturbed
	test_gr_a5a5 2
	test_gr_a5a5 3
	test_gr_a5a5 4
	test_gr_a5a5 5
	test_gr_a5a5 6
	test_gr_a5a5 7
	; 1010 0101 1010 0101 -> 0100 1011 0100 1011
	cmp.w	#0x4b4b, @@word_dest
	beq	.Lwindexb321
	fail
.Lwindexb321:
	mov.w	#0xa5a5, @@word_dest

rotl_w_indexw32_1:
	set_grs_a5a5		; Fill all general regs with a fixed pattern
	set_ccr_zero

	mov.w	#256, r1
	rotl.w	@@(word_dest-512:32, r1.w)	; indexed word/byte

	test_carry_set		; H=0 N=0 Z=0 V=0 C=1
	test_zero_clear
	test_ovf_clear
	test_neg_clear

	test_h_gr32  0xa5a50100 er1
	test_gr_a5a5 0		; Make sure other general regs not disturbed
	test_gr_a5a5 2
	test_gr_a5a5 3
	test_gr_a5a5 4
	test_gr_a5a5 5
	test_gr_a5a5 6
	test_gr_a5a5 7
	; 1010 0101 1010 0101 -> 0100 1011 0100 1011
	cmp.w	#0x4b4b, @@word_dest
	beq	.Lwindexw321
	fail
.Lwindexw321:
	mov.w	#0xa5a5, @@word_dest

rotl_w_indexl32_1:
	set_grs_a5a5		; Fill all general regs with a fixed pattern
	set_ccr_zero

	mov.l	#0xffffffff, er1
	rotl.w	@@(word_dest+2:32, er1.l)	; indexed word/byte

	test_carry_set		; H=0 N=0 Z=0 V=0 C=1
	test_zero_clear
	test_ovf_clear
	test_neg_clear

	test_h_gr32  0xffffffff er1
	test_gr_a5a5 0		; Make sure other general regs not disturbed
	test_gr_a5a5 2
	test_gr_a5a5 3
	test_gr_a5a5 4
	test_gr_a5a5 5
	test_gr_a5a5 6
	test_gr_a5a5 7
	; 1010 0101 1010 0101 -> 0100 1011 0100 1011
	cmp.w	#0x4b4b, @@word_dest
	beq	.Lwindexl321
	fail
.Lwindexl321:
	mov.w	#0xa5a5, @@word_dest
.endif

rotl_w_reg16_2:
	set_grs_a5a5		; Fill all general regs with a fixed pattern
	set_ccr_zero

	rotl.w	#2, r0		; shift left arithmetic by two

	test_carry_clear	; H=0 N=1 Z=0 V=0 C=0
	test_zero_clear
	test_ovf_clear		
	test_neg_set
	test_h_gr16 0x9696 r0	; 1010 0101 1010 0101 -> 1001 0110 1001 0110
	test_h_gr32 0xa5a59696 er0

	test_gr_a5a5 1		; Make sure other general regs not disturbed
	test_gr_a5a5 2
	test_gr_a5a5 3
	test_gr_a5a5 4
	test_gr_a5a5 5
	test_gr_a5a5 6
	test_gr_a5a5 7

.if (sim_cpu == h8sx)
rotl_w_indexb16_2:
	set_grs_a5a5		; Fill all general regs with a fixed pattern
	set_ccr_zero

	mov.b	#5, r0l
	rotl.w	#2, @@(word_dest-10:16, r0.b)	; indexed word/byte

	test_carry_clear		; H=0 N=1 Z=0 V=0 C=0
	test_zero_clear
	test_ovf_clear
	test_neg_set

	test_h_gr32  0xa5a5a505 er0
	test_gr_a5a5 1		; Make sure other general regs not disturbed
	test_gr_a5a5 2
	test_gr_a5a5 3
	test_gr_a5a5 4
	test_gr_a5a5 5
	test_gr_a5a5 6
	test_gr_a5a5 7
	; 1010 0101 1010 0101 -> 1001 0110 1001 0110
	cmp.w	#0x9696, @@word_dest
	beq	.Lwindexb162
	fail
.Lwindexb162:
	mov.w	#0xa5a5, @@word_dest

rotl_w_indexw16_2:
	set_grs_a5a5		; Fill all general regs with a fixed pattern
	set_ccr_zero

	mov.w	#256, r0
	rotl.w	#2, @@(word_dest-512:16, r0.w)	; indexed word/word

	test_carry_clear		; H=0 N=1 Z=0 V=0 C=0
	test_zero_clear
	test_ovf_clear
	test_neg_set

	test_h_gr32  0xa5a50100 er0
	test_gr_a5a5 1		; Make sure other general regs not disturbed
	test_gr_a5a5 2
	test_gr_a5a5 3
	test_gr_a5a5 4
	test_gr_a5a5 5
	test_gr_a5a5 6
	test_gr_a5a5 7
	; 1010 0101 1010 0101 -> 1001 0110 1001 0110
	cmp.w	#0x9696, @@word_dest
	beq	.Lwindexw162
	fail
.Lwindexw162:
	mov.w	#0xa5a5, @@word_dest

rotl_w_indexl16_2:
	set_grs_a5a5		; Fill all general regs with a fixed pattern
	set_ccr_zero

	mov.l	#0xffffffff, er0
	rotl.w	#2, @@(word_dest+2:16, er0.l)	; indexed word/long

	test_carry_clear		; H=0 N=1 Z=0 V=0 C=0
	test_zero_clear
	test_ovf_clear
	test_neg_set

	test_h_gr32  0xffffffff er0
	test_gr_a5a5 1		; Make sure other general regs not disturbed
	test_gr_a5a5 2
	test_gr_a5a5 3
	test_gr_a5a5 4
	test_gr_a5a5 5
	test_gr_a5a5 6
	test_gr_a5a5 7
	; 1010 0101 1010 0101 -> 1001 0110 1001 0110
	cmp.w	#0x9696, @@word_dest
	beq	.Lwindexl162
	fail
.Lwindexl162:
	mov.w	#0xa5a5, @@word_dest

rotl_w_indexb32_2:
	set_grs_a5a5		; Fill all general regs with a fixed pattern
	set_ccr_zero

	mov.b	#5, r1l
	rotl.w	#2, @@(word_dest-10:32, r1.b)	; indexed word/byte

	test_carry_clear		; H=0 N=1 Z=0 V=0 C=0
	test_zero_clear
	test_ovf_clear
	test_neg_set

	test_h_gr32  0xa5a5a505 er1
	test_gr_a5a5 0		; Make sure other general regs not disturbed
	test_gr_a5a5 2
	test_gr_a5a5 3
	test_gr_a5a5 4
	test_gr_a5a5 5
	test_gr_a5a5 6
	test_gr_a5a5 7
	; 1010 0101 1010 0101 -> 1001 0110 1001 0110
	cmp.w	#0x9696, @@word_dest
	beq	.Lwindexb322
	fail
.Lwindexb322:
	mov.w	#0xa5a5, @@word_dest

rotl_w_indexw32_2:
	set_grs_a5a5		; Fill all general regs with a fixed pattern
	set_ccr_zero

	mov.w	#256, r1
	rotl.w	#2, @@(word_dest-512:32, r1.w)	; indexed word/byte

	test_carry_clear		; H=0 N=1 Z=0 V=0 C=0
	test_zero_clear
	test_ovf_clear
	test_neg_set

	test_h_gr32  0xa5a50100 er1
	test_gr_a5a5 0		; Make sure other general regs not disturbed
	test_gr_a5a5 2
	test_gr_a5a5 3
	test_gr_a5a5 4
	test_gr_a5a5 5
	test_gr_a5a5 6
	test_gr_a5a5 7
	; 1010 0101 1010 0101 -> 1001 0110 1001 0110
	cmp.w	#0x9696, @@word_dest
	beq	.Lwindexw322
	fail
.Lwindexw322:
	mov.w	#0xa5a5, @@word_dest

rotl_w_indexl32_2:
	set_grs_a5a5		; Fill all general regs with a fixed pattern
	set_ccr_zero

	mov.l	#0xffffffff, er1
	rotl.w	#2, @@(word_dest+2:32, er1.l)	; indexed word/byte

	test_carry_clear		; H=0 N=1 Z=0 V=0 C=0
	test_zero_clear
	test_ovf_clear
	test_neg_set

	test_h_gr32  0xffffffff er1
	test_gr_a5a5 0		; Make sure other general regs not disturbed
	test_gr_a5a5 2
	test_gr_a5a5 3
	test_gr_a5a5 4
	test_gr_a5a5 5
	test_gr_a5a5 6
	test_gr_a5a5 7
	; 1010 0101 1010 0101 -> 1001 0110 1001 0110
	cmp.w	#0x9696, @@word_dest
	beq	.Lwindexl322
	fail
.Lwindexl322:
	mov.w	#0xa5a5, @@word_dest
.endif

rotl_l_reg32_1:
	set_grs_a5a5		; Fill all general regs with a fixed pattern
	set_ccr_zero

	rotl.l	er0		; shift left arithmetic by one

	test_carry_set		; H=0 N=0 Z=0 V=0 C=1
	test_zero_clear
	test_ovf_clear		
	test_neg_clear
	; 1010 0101 1010 0101 1010 0101 1010 0101 
	; -> 0100 1011 0100 1011 0100 1011 0100 1011
	test_h_gr32 0x4b4b4b4b er0

	test_gr_a5a5 1		; Make sure other general regs not disturbed
	test_gr_a5a5 2
	test_gr_a5a5 3
	test_gr_a5a5 4
	test_gr_a5a5 5
	test_gr_a5a5 6
	test_gr_a5a5 7

.if (sim_cpu == h8sx)
rotl_l_indexb16_1:
	set_grs_a5a5		; Fill all general regs with a fixed pattern
	set_ccr_zero

	mov.b	#5, r0l
	rotl.l	@@(long_dest-20:16, er0.b)	; indexed long/byte

	test_carry_set		; H=0 N=0 Z=0 V=0 C=1
	test_zero_clear
	test_ovf_clear
	test_neg_clear

	test_h_gr32  0xa5a5a505 er0
	test_gr_a5a5 1		; Make sure other general regs not disturbed
	test_gr_a5a5 2
	test_gr_a5a5 3
	test_gr_a5a5 4
	test_gr_a5a5 5
	test_gr_a5a5 6
	test_gr_a5a5 7
	; 1010 0101 1010 0101 1010 0101 1010 0101 
	; -> 0100 1011 0100 1011 0100 1011 0100 1011
	cmp.l	#0x4b4b4b4b, @@long_dest
	beq	.Llindexb161
	fail
.Llindexb161:
	mov.l	#0xa5a5a5a5, @@long_dest

rotl_l_indexw16_1:
	set_grs_a5a5		; Fill all general regs with a fixed pattern
	set_ccr_zero

	mov.w	#256, r0
	rotl.l	@@(long_dest-1024:16, er0.w)	; indexed long/word

	test_carry_set		; H=0 N=0 Z=0 V=0 C=1
	test_zero_clear
	test_ovf_clear
	test_neg_clear

	test_h_gr32  0xa5a50100 er0
	test_gr_a5a5 1		; Make sure other general regs not disturbed
	test_gr_a5a5 2
	test_gr_a5a5 3
	test_gr_a5a5 4
	test_gr_a5a5 5
	test_gr_a5a5 6
	test_gr_a5a5 7
	; 1010 0101 1010 0101 1010 0101 1010 0101 
	; -> 0100 1011 0100 1011 0100 1011 0100 1011
	cmp.l	#0x4b4b4b4b, @@long_dest
	beq	.Llindexw161
	fail
.Llindexw161:
	mov.l	#0xa5a5a5a5, @@long_dest

rotl_l_indexl16_1:
	set_grs_a5a5		; Fill all general regs with a fixed pattern
	set_ccr_zero

	mov.l	#0xffffffff, er0
	rotl.l	@@(long_dest+4:16, er0.l)	; indexed long/long

	test_carry_set		; H=0 N=0 Z=0 V=0 C=1
	test_zero_clear
	test_ovf_clear
	test_neg_clear

	test_h_gr32  0xffffffff er0
	test_gr_a5a5 1		; Make sure other general regs not disturbed
	test_gr_a5a5 2
	test_gr_a5a5 3
	test_gr_a5a5 4
	test_gr_a5a5 5
	test_gr_a5a5 6
	test_gr_a5a5 7
	; 1010 0101 1010 0101 1010 0101 1010 0101 
	; -> 0100 1011 0100 1011 0100 1011 0100 1011
	cmp.l	#0x4b4b4b4b, @@long_dest
	beq	.Llindexl161
	fail
.Llindexl161:
	mov.l	#0xa5a5a5a5, @@long_dest

rotl_l_indexb32_1:
	set_grs_a5a5		; Fill all general regs with a fixed pattern
	set_ccr_zero

	mov.b	#5, r1l
	rotl.l	@@(long_dest-20:32, er1.b)	; indexed long/byte

	test_carry_set		; H=0 N=0 Z=0 V=0 C=1
	test_zero_clear
	test_ovf_clear
	test_neg_clear

	test_h_gr32  0xa5a5a505 er1
	test_gr_a5a5 0		; Make sure other general regs not disturbed
	test_gr_a5a5 2
	test_gr_a5a5 3
	test_gr_a5a5 4
	test_gr_a5a5 5
	test_gr_a5a5 6
	test_gr_a5a5 7
	; 1010 0101 1010 0101 1010 0101 1010 0101 
	; -> 0100 1011 0100 1011 0100 1011 0100 1011
	cmp.l	#0x4b4b4b4b, @@long_dest
	beq	.Llindexb321
	fail
.Llindexb321:
	mov.l	#0xa5a5a5a5, @@long_dest

rotl_l_indexw32_1:
	set_grs_a5a5		; Fill all general regs with a fixed pattern
	set_ccr_zero

	mov.w	#256, r1
	rotl.l	@@(long_dest-1024:32, er1.w)	; indexed long/byte

	test_carry_set		; H=0 N=0 Z=0 V=0 C=1
	test_zero_clear
	test_ovf_clear
	test_neg_clear

	test_h_gr32  0xa5a50100 er1
	test_gr_a5a5 0		; Make sure other general regs not disturbed
	test_gr_a5a5 2
	test_gr_a5a5 3
	test_gr_a5a5 4
	test_gr_a5a5 5
	test_gr_a5a5 6
	test_gr_a5a5 7
	; 1010 0101 1010 0101 1010 0101 1010 0101 
	; -> 0100 1011 0100 1011 0100 1011 0100 1011
	cmp.l	#0x4b4b4b4b, @@long_dest
	beq	.Llindexw321
	fail
.Llindexw321:
	mov.l	#0xa5a5a5a5, @@long_dest

rotl_l_indexl32_1:
	set_grs_a5a5		; Fill all general regs with a fixed pattern
	set_ccr_zero

	mov.l	#0xffffffff, er1
	rotl.l	@@(long_dest+4:32, er1.l)	; indexed long/byte

	test_carry_set		; H=0 N=0 Z=0 V=0 C=1
	test_zero_clear
	test_ovf_clear
	test_neg_clear

	test_h_gr32  0xffffffff er1
	test_gr_a5a5 0		; Make sure other general regs not disturbed
	test_gr_a5a5 2
	test_gr_a5a5 3
	test_gr_a5a5 4
	test_gr_a5a5 5
	test_gr_a5a5 6
	test_gr_a5a5 7
	; 1010 0101 1010 0101 1010 0101 1010 0101 
	; -> 0100 1011 0100 1011 0100 1011 0100 1011
	cmp.l	#0x4b4b4b4b, @@long_dest
	beq	.Llindexl321
	fail
.Llindexl321:
	mov.l	#0xa5a5a5a5, @@long_dest
.endif

rotl_l_reg32_2:
	set_grs_a5a5		; Fill all general regs with a fixed pattern
	set_ccr_zero

	rotl.l	#2, er0		; shift left arithmetic by two

	test_carry_clear	; H=0 N=1 Z=0 V=0 C=0
	test_zero_clear
	test_ovf_clear		
	test_neg_set
	; 1010 0101 1010 0101 1010 0101 1010 0101
	; -> 1001 0110 1001 0110 1001 0110 1001 0110
	test_h_gr32 0x96969696 er0

	test_gr_a5a5 1		; Make sure other general regs not disturbed
	test_gr_a5a5 2
	test_gr_a5a5 3
	test_gr_a5a5 4
	test_gr_a5a5 5
	test_gr_a5a5 6
	test_gr_a5a5 7

.if (sim_cpu == h8sx)
rotl_l_indexb16_2:
	set_grs_a5a5		; Fill all general regs with a fixed pattern
	set_ccr_zero

	mov.b	#5, r0l
	rotl.l	#2, @@(long_dest-20:16, er0.b)	; indexed long/byte

	test_carry_clear		; H=0 N=1 Z=0 V=0 C=0
	test_zero_clear
	test_ovf_clear
	test_neg_set

	test_h_gr32  0xa5a5a505 er0
	test_gr_a5a5 1		; Make sure other general regs not disturbed
	test_gr_a5a5 2
	test_gr_a5a5 3
	test_gr_a5a5 4
	test_gr_a5a5 5
	test_gr_a5a5 6
	test_gr_a5a5 7
	; 1010 0101 1010 0101 1010 0101 1010 0101 
	; -> 1001 0110 1001 0110 1001 0110 1001 0110
	cmp.l	#0x96969696, @@long_dest
	beq	.Llindexb162
	fail
.Llindexb162:
	mov.l	#0xa5a5a5a5, @@long_dest

rotl_l_indexw16_2:
	set_grs_a5a5		; Fill all general regs with a fixed pattern
	set_ccr_zero

	mov.w	#256, r0
	rotl.l	#2, @@(long_dest-1024:16, er0.w)	; indexed long/word

	test_carry_clear		; H=0 N=1 Z=0 V=0 C=0
	test_zero_clear
	test_ovf_clear
	test_neg_set

	test_h_gr32  0xa5a50100 er0
	test_gr_a5a5 1		; Make sure other general regs not disturbed
	test_gr_a5a5 2
	test_gr_a5a5 3
	test_gr_a5a5 4
	test_gr_a5a5 5
	test_gr_a5a5 6
	test_gr_a5a5 7
	; 1010 0101 1010 0101 1010 0101 1010 0101 
	; -> 1001 0110 1001 0110 1001 0110 1001 0110
	cmp.l	#0x96969696, @@long_dest
	beq	.Llindexw162
	fail
.Llindexw162:
	mov.l	#0xa5a5a5a5, @@long_dest

rotl_l_indexl16_2:
	set_grs_a5a5		; Fill all general regs with a fixed pattern
	set_ccr_zero

	mov.l	#0xffffffff, er0
	rotl.l	#2, @@(long_dest+4:16, er0.l)	; indexed long/long

	test_carry_clear		; H=0 N=1 Z=0 V=0 C=0
	test_zero_clear
	test_ovf_clear
	test_neg_set

	test_h_gr32  0xffffffff er0
	test_gr_a5a5 1		; Make sure other general regs not disturbed
	test_gr_a5a5 2
	test_gr_a5a5 3
	test_gr_a5a5 4
	test_gr_a5a5 5
	test_gr_a5a5 6
	test_gr_a5a5 7
	; 1010 0101 1010 0101 1010 0101 1010 0101 
	; -> 1001 0110 1001 0110 1001 0110 1001 0110
	cmp.l	#0x96969696, @@long_dest
	beq	.Llindexl162
	fail
.Llindexl162:
	mov.l	#0xa5a5a5a5, @@long_dest

rotl_l_indexb32_2:
	set_grs_a5a5		; Fill all general regs with a fixed pattern
	set_ccr_zero

	mov.b	#5, r1l
	rotl.l	#2, @@(long_dest-20:32, er1.b)	; indexed long/byte

	test_carry_clear		; H=0 N=1 Z=0 V=0 C=0
	test_zero_clear
	test_ovf_clear
	test_neg_set

	test_h_gr32  0xa5a5a505 er1
	test_gr_a5a5 0		; Make sure other general regs not disturbed
	test_gr_a5a5 2
	test_gr_a5a5 3
	test_gr_a5a5 4
	test_gr_a5a5 5
	test_gr_a5a5 6
	test_gr_a5a5 7
	; 1010 0101 1010 0101 1010 0101 1010 0101 
	; -> 1001 0110 1001 0110 1001 0110 1001 0110
	cmp.l	#0x96969696, @@long_dest
	beq	.Llindexb322
	fail
.Llindexb322:
	mov.l	#0xa5a5a5a5, @@long_dest

rotl_l_indexw32_2:
	set_grs_a5a5		; Fill all general regs with a fixed pattern
	set_ccr_zero

	mov.w	#256, r1
	rotl.l	#2, @@(long_dest-1024:32, er1.w)	; indexed long/byte

	test_carry_clear		; H=0 N=1 Z=0 V=0 C=0
	test_zero_clear
	test_ovf_clear
	test_neg_set

	test_h_gr32  0xa5a50100 er1
	test_gr_a5a5 0		; Make sure other general regs not disturbed
	test_gr_a5a5 2
	test_gr_a5a5 3
	test_gr_a5a5 4
	test_gr_a5a5 5
	test_gr_a5a5 6
	test_gr_a5a5 7
	; 1010 0101 1010 0101 1010 0101 1010 0101 
	; -> 1001 0110 1001 0110 1001 0110 1001 0110
	cmp.l	#0x96969696, @@long_dest
	beq	.Llindexw322
	fail
.Llindexw322:
	mov.l	#0xa5a5a5a5, @@long_dest

rotl_l_indexl32_2:
	set_grs_a5a5		; Fill all general regs with a fixed pattern
	set_ccr_zero

	mov.l	#0xffffffff, er1
	rotl.l	#2, @@(long_dest+4:32, er1.l)	; indexed long/byte

	test_carry_clear		; H=0 N=1 Z=0 V=0 C=0
	test_zero_clear
	test_ovf_clear
	test_neg_set

	test_h_gr32  0xffffffff er1
	test_gr_a5a5 0		; Make sure other general regs not disturbed
	test_gr_a5a5 2
	test_gr_a5a5 3
	test_gr_a5a5 4
	test_gr_a5a5 5
	test_gr_a5a5 6
	test_gr_a5a5 7
	; 1010 0101 1010 0101 1010 0101 1010 0101 
	; -> 1001 0110 1001 0110 1001 0110 1001 0110
	cmp.l	#0x96969696, @@long_dest
	beq	.Llindexl322
	fail
.Llindexl322:
	mov.l	#0xa5a5a5a5, @@long_dest
.endif
.endif

	pass

	exit 0

@


1.1.22.1
log
@Merge drow-cplus-branch to:
  cvs rtag -D 2003-12-14 00:00:00 UTC drow-cplus-merge-20031214 gdb+dejagnu
@
text
@@

