head	1.1;
access;
symbols
	gdb_7_6_1-2013-08-30-release:1.1
	gdb_7_6-2013-04-26-release:1.1
	gdb_7_6-branch:1.1.0.32
	gdb_7_6-2013-03-12-branchpoint:1.1
	gdb_7_5_1-2012-11-29-release:1.1
	gdb_7_5-2012-08-17-release:1.1
	gdb_7_5-branch:1.1.0.30
	gdb_7_5-2012-07-18-branchpoint:1.1
	gdb_7_4_1-2012-04-26-release:1.1
	gdb_7_4-2012-01-24-release:1.1
	gdb_7_4-branch:1.1.0.28
	gdb_7_4-2011-12-13-branchpoint:1.1
	gdb_7_3_1-2011-09-04-release:1.1
	gdb_7_3-2011-07-26-release:1.1
	gdb_7_3-branch:1.1.0.26
	gdb_7_3-2011-04-01-branchpoint:1.1
	gdb_7_2-2010-09-02-release:1.1
	gdb_7_2-branch:1.1.0.24
	gdb_7_2-2010-07-07-branchpoint:1.1
	gdb_7_1-2010-03-18-release:1.1
	gdb_7_1-branch:1.1.0.22
	gdb_7_1-2010-02-18-branchpoint:1.1
	gdb_7_0_1-2009-12-22-release:1.1
	gdb_7_0-2009-10-06-release:1.1
	gdb_7_0-branch:1.1.0.20
	gdb_7_0-2009-09-16-branchpoint:1.1
	arc-sim-20090309:1.1
	msnyder-checkpoint-072509-branch:1.1.0.18
	msnyder-checkpoint-072509-branchpoint:1.1
	arc-insight_6_8-branch:1.1.0.16
	arc-insight_6_8-branchpoint:1.1
	insight_6_8-branch:1.1.0.14
	insight_6_8-branchpoint:1.1
	reverse-20081226-branch:1.1.0.12
	reverse-20081226-branchpoint:1.1
	multiprocess-20081120-branch:1.1.0.10
	multiprocess-20081120-branchpoint:1.1
	reverse-20080930-branch:1.1.0.8
	reverse-20080930-branchpoint:1.1
	reverse-20080717-branch:1.1.0.6
	reverse-20080717-branchpoint:1.1
	msnyder-reverse-20080609-branch:1.1.0.4
	msnyder-reverse-20080609-branchpoint:1.1
	gdb_6_8-2008-03-27-release:1.1
	gdb_6_8-branch:1.1.0.2
	gdb_6_8-2008-02-26-branchpoint:1.1;
locks; strict;
comment	@# @;


1.1
date	2008.02.06.00.40.05;	author dj;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Index: ChangeLog

	* configure.ac (v850): V850 now has a testsuite.
	* configure (v850): Likewise.

Index: testsuite/ChangeLog

	* sim/v850/: New directory.
	* sim/v850/allinsns.exp: New.
	* sim/v850/bsh.cgs: New.
	* sim/v850/div.cgs: New.
	* sim/v850/divh.cgs: New.
	* sim/v850/divh_3.cgs: New.
	* sim/v850/divhu.cgs: New.
	* sim/v850/divu.cgs: New.
	* sim/v850/sar.cgs: New.
	* sim/v850/satadd.cgs: New.
	* sim/v850/satsub.cgs: New.
	* sim/v850/satsubi.cgs: New.
	* sim/v850/satsubr.cgs: New.
	* sim/v850/shl.cgs: New.
	* sim/v850/shr.cgs: New.
	* sim/v850/testutils.cgs: New.
	* sim/v850/testutils.inc: New.

Index: v850/ChangeLog

	* simops.c (OP_C0): Correct saturation logic.
	(OP_220): Likewise.
	(OP_A0): Likewise.
	(OP_660): Likewise.
	(OP_80): Likewise.

	* simops.c (OP_2A0): If the shift count is zero, clear the
	carry.
	(OP_A007E0): Likewise.
	(OP_2C0): Likewise.
	(OP_C007E0): Likewise.
	(OP_280): Likewise.
	(OP_8007E0): Likewise.

	* simops.c (OP_2C207E0): Correct PSW flags for special divu
	conditions.
	(OP_2C007E0): Likewise, for div.
	(OP_28207E0): Likewise, for divhu.
	(OP_28007E0): Likewise, for divh.  Also, sign-extend the correct
	operand.
	* v850.igen (divh): Likewise, for 2-op divh.

	* v850.igen (bsh): Fix carry logic.
@
text
@SYS_exit = 1
SYS_write = 4

	.bss
	.space 64
_stack:

	.data
pass_text:
	.string "pass\n"
fail_text:
	.string "fail\n"

	.text
	.global	_start
_start:
	movhi   hi(_stack),	r0,	sp
	movea   lo(_stack),	sp,	sp
	jr	start_test

	.macro	seti	val reg
	movhi	hi(\val),r0,\reg
	movea	lo(\val),\reg,\reg
	.endm

_pass_1:
	mov	SYS_write,r6
	mov	1,r7
	seti	pass_text,r8
	mov	5,r9
	trap	31

	mov	0, r7
	jr	_exit

_fail_1:
	mov	SYS_write,r6
	mov	1,r7
	seti	fail_text,r8
	mov	5,r9
	trap	31

	mov	1, r7
	jr	_exit

_exit:
	mov	SYS_exit, r6
	mov	0, r8
	mov	0, r9
	trap	31

_pass:
	jr	_pass_1

_fail:
	jr	_fail_1

	.macro	pass
	jr	_pass
	.endm
	.macro	fail
	jr	_fail
	.endm

	# These pass or fail if the given flag is set or not set
	# Currently, it assumed that the code of any test is going to
	# be less than 256 bytes.  Else, we'll have to use a
	# branch-around-jump design instead.

	.macro	pass_c
	bc	_pass
	.endm
	.macro	fail_c
	bc	_fail
	.endm
	.macro	pass_nc
	bnc	_pass
	.endm
	.macro	fail_nc
	bnc	_fail
	.endm

	.macro	pass_z
	bz	_pass
	.endm
	.macro	fail_z
	bz	_fail
	.endm
	.macro	pass_nz
	bnz	_pass
	.endm
	.macro	fail_nz
	bnz	_fail
	.endm

	.macro	pass_v
	bv	_pass
	.endm
	.macro	fail_v
	bv	_fail
	.endm
	.macro	pass_nv
	bnv	_pass
	.endm
	.macro	fail_nv
	bnv	_fail
	.endm

	.macro	pass_s
	bn	_pass
	.endm
	.macro	fail_s
	bn	_fail
	.endm
	.macro	pass_ns
	bp	_pass
	.endm
	.macro	fail_ns
	bp	_fail
	.endm

	.macro	pass_sat
	bsa	_pass
	.endm
	.macro	fail_sat
	bsa	_fail
	.endm
	.macro	pass_nsat
	bsa	1f
	br	_pass
1:
	.endm
	.macro	fail_nsat
	bsa	1f
	br	_fail
1:
	.endm

	# These pass/fail if the given register has/hasn't the specified value in it.

	.macro	pass_req	reg val
	seti	\val,r10
	cmp	r10,\reg
	be	_pass
	.endm

	.macro	pass_rne	reg val
	seti	\val,r10
	cmp	r10,\reg
	bne	_pass
	.endm

	.macro	fail_req	reg val
	seti	\val,r10
	cmp	r10,\reg
	be	_fail
	.endm

	.macro	fail_rne	reg val
	seti	\val,r10
	cmp	r10,\reg
	bne	_fail
	.endm

# convenience version
	.macro	reg	reg val
	seti	\val,r10
	cmp	r10,\reg
	bne	_fail
	.endm

z    = 1
nz   = 0
s    = 2
ns   = 0
v    = 4
nv   = 0
c    = 8
nc   = 0
sat  = 16
nsat = 0

# sat c v s z

	.macro	flags	fval
	stsr	psw, r10
	movea	+(\fval), r0, r9
	andi	31, r10, r10
	cmp	r9, r10
	bne	_fail
	.endm

	.macro	noflags
	stsr	psw, r10
	andi	~0x1f, r10, r10
	ldsr	r10, psw
	.endm

	.macro	allflags
	stsr	psw, r10
	ori	0x1f, r10, r10
	ldsr	r10, psw
	.endm

start_test:
@
