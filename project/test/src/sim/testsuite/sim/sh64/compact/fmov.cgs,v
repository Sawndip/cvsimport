head	1.1;
access;
symbols
	gdb_7_6_1-2013-08-30-release:1.1
	gdb_7_6-2013-04-26-release:1.1
	gdb_7_6-branch:1.1.0.42
	gdb_7_6-2013-03-12-branchpoint:1.1
	gdb_7_5_1-2012-11-29-release:1.1
	gdb_7_5-2012-08-17-release:1.1
	gdb_7_5-branch:1.1.0.40
	gdb_7_5-2012-07-18-branchpoint:1.1
	gdb_7_4_1-2012-04-26-release:1.1
	gdb_7_4-2012-01-24-release:1.1
	gdb_7_4-branch:1.1.0.38
	gdb_7_4-2011-12-13-branchpoint:1.1
	gdb_7_3_1-2011-09-04-release:1.1
	gdb_7_3-2011-07-26-release:1.1
	gdb_7_3-branch:1.1.0.36
	gdb_7_3-2011-04-01-branchpoint:1.1
	gdb_7_2-2010-09-02-release:1.1
	gdb_7_2-branch:1.1.0.34
	gdb_7_2-2010-07-07-branchpoint:1.1
	gdb_7_1-2010-03-18-release:1.1
	gdb_7_1-branch:1.1.0.32
	gdb_7_1-2010-02-18-branchpoint:1.1
	gdb_7_0_1-2009-12-22-release:1.1
	gdb_7_0-2009-10-06-release:1.1
	gdb_7_0-branch:1.1.0.30
	gdb_7_0-2009-09-16-branchpoint:1.1
	arc-sim-20090309:1.1
	msnyder-checkpoint-072509-branch:1.1.0.28
	msnyder-checkpoint-072509-branchpoint:1.1
	arc-insight_6_8-branch:1.1.0.26
	arc-insight_6_8-branchpoint:1.1
	insight_6_8-branch:1.1.0.24
	insight_6_8-branchpoint:1.1
	reverse-20081226-branch:1.1.0.22
	reverse-20081226-branchpoint:1.1
	multiprocess-20081120-branch:1.1.0.20
	multiprocess-20081120-branchpoint:1.1
	reverse-20080930-branch:1.1.0.18
	reverse-20080930-branchpoint:1.1
	reverse-20080717-branch:1.1.0.16
	reverse-20080717-branchpoint:1.1
	msnyder-reverse-20080609-branch:1.1.0.14
	msnyder-reverse-20080609-branchpoint:1.1
	drow-reverse-20070409-branch:1.1.0.12
	drow-reverse-20070409-branchpoint:1.1
	gdb_6_8-2008-03-27-release:1.1
	gdb_6_8-branch:1.1.0.10
	gdb_6_8-2008-02-26-branchpoint:1.1
	gdb_6_7_1-2007-10-29-release:1.1
	gdb_6_7-2007-10-10-release:1.1
	gdb_6_7-branch:1.1.0.8
	gdb_6_7-2007-09-07-branchpoint:1.1
	gdb-csl-arm-20051020-branch:1.1.0.6
	gdb-csl-arm-20051020-branchpoint:1.1
	cagney_tramp-20040309-branch:1.1.0.4
	cagney_tramp-20040309-branchpoint:1.1
	cagney_convert-20030606-branch:1.1.0.2
	cagney_convert-20030606-branchpoint:1.1;
locks; strict;
comment	@# @;


1.1
date	2002.02.01.11.44.28;	author bje;	state Exp;
branches
	1.1.4.1;
next	;

1.1.4.1
date	2004.03.21.23.57.44;	author cagney;	state dead;
branches;
next	;


desc
@@


1.1
log
@* Contribute Hitachi SH5 simulator.
@
text
@# sh testcase for all fmov instructions
# mach: all
# as: -isa=shcompact
# ld: -m shelf32

	.include "compact/testutils.inc"

	.macro init
	fldi0 fr0
	fldi1 fr2
	.endm

	# Set the SZ (SiZe) bit in the fpscr.
	.macro _setsz
	sts fpscr, r7
	mov #16, r8
	shll16 r8
	or r8, r7
	lds r7, fpscr
	.endm

	# Clear the SZ bit.
	.macro _clrsz
	sts fpscr, r7
	mov #16, r8
	shll16 r8
	not r8, r8
	and r8, r7
	lds r7, fpscr
	.endm
	start

fmov1:  # Test fr -> fr.
	init
	_clrpr
	_clrsz
	fmov fr0, fr10
	# Ensure fr0 and fr10 are now equal.
	fcmp/eq fr0, fr10
	bt fmov2
	fail

fmov2:  # Test dr -> dr.
	init
	_setpr
	_setsz
	fmov dr0, dr2
	# Ensure dr0 and dr2 are now equal.
	fcmp/eq dr0, dr2
	bt fmov3
	fail

fmov3:  # Test dr -> xd and xd -> dr.
	init
	_setsz
	fmov dr0, xd0
	# Ensure dr0 and xd0 are now equal.
	fmov xd0, dr2
	fcmp/eq dr0, dr2
	bt fmov4
	fail

fmov4:  # Test xd -> xd.
	init
	_setsz
	_setpr
	fmov dr0, xd0
	fmov xd0, xd2
	fmov xd2, dr2
	# Ensure dr0 and dr2 are now equal.
	fcmp/eq dr0, dr2
	bt fmov5
	fail

fmov5:  # Test fr -> @@rn and @@rn -> fr.
	init
	_clrsz
	_clrpr
	mov #40, r0
	shll8 r0
	fmov fr0, @@r0
	fmov @@r0, fr1
	fcmp/eq fr0, fr1
	bt fmov6
	fail

fmov6:  # Test dr -> @@rn and @@rn -> dr.
	init
	_setsz
	_setpr
	mov #40, r0
	shll8 r0
	fmov dr0, @@r0
	fmov @@r0, dr2
	fcmp/eq dr0, dr2
	bt fmov7
	fail

fmov7:	# Test xd -> @@rn and @@rn -> xd.
	init
	_setsz
	_setpr
	mov #40, r0
	shll8 r0
	fmov dr0, xd0
	fmov xd0, @@r0
	fmov @@r0, xd2
	fmov xd2, dr2
	fcmp/eq dr0, dr2
	bt fmov8
	fail

fmov8:	# Test fr -> @@-rn.
	init
	_clrsz
	_clrpr
	mov #40, r0
	shll8 r0
	# Preserve.
	mov r0, r1
	fmov fr0, @@-r0
	fmov @@r0, fr2
	fcmp/eq fr0, fr2
	bt f8b
	fail
f8b:	# check pre-dec.
	add #4, r0
	cmp/eq r0, r1
	bt fmov9
	fail

fmov9:	# Test dr -> @@-rn.
	init
	_setsz
	_setpr
	mov #40, r0
	shll8 r0
	# Preserve r0.
	mov r0, r1
	fmov dr0, @@-r0
	fmov @@r0, dr2
	fcmp/eq dr0, dr2
	bt f9b
	fail
f9b:	# check pre-dec.
	add #8, r0
	cmp/eq r0, r1
	bt fmov10
	fail

fmov10:	# Test xd -> @@-rn.
	init
	_setsz
	_setpr
	mov #40, r0
	shll8 r0
	# Preserve r0.
	mov r0, r1
	fmov dr0, xd0
	fmov xd0, @@-r0
	fmov @@r0, xd2
	fmov xd2, dr2
	fcmp/eq dr0, dr2
	bt f10b
	fail
f10b:   # check pre-dec.
	add #8, r0
	cmp/eq r0, r1
	bt fmov11
	fail

fmov11:	# Test @@rn+ -> fr.
	init
	_clrsz
	_clrpr
	mov #40, r0
	shll8 r0
	# Preserve r0.
	mov r0, r1
	fmov fr0, @@r0
	fmov @@r0+, fr2
	fcmp/eq fr0, fr2
	bt f11b
	fail
f11b:   # check post-inc.
	add #4, r1
	cmp/eq r0, r1
	bt fmov12
	fail

fmov12:	# Test @@rn+ -> dr.
	init
	_setsz
	_setpr
	mov #40, r0
	shll8 r0
	# preserve r0.
	mov r0, r1
	fmov dr0, @@r0
	fmov @@r0+, dr2
	fcmp/eq dr0, dr2
	bt f12b
	fail
f12b:   # check post-inc.
	add #8, r1
	cmp/eq r0, r1
	bt fmov13
	fail

fmov13:	# Test @@rn -> xd.
	init
	_setsz
	_setpr
	mov #40, r0
	shll8 r0
	# Preserve r0.
	mov r0, r1
	fmov dr0, xd0
	fmov xd0, @@r0
	fmov @@r0+, xd2
	fmov xd2, dr2
	fcmp/eq dr0, dr2
	bt f13b
	fail
f13b:
	add #8, r1
	cmp/eq r0, r1
	bt fmov14
	fail

fmov14:	# Test fr -> @@(r0,rn), @@(r0, rn) -> fr.
	init
	_clrsz
	_clrpr
	mov #40, r0
	shll8 r0
	mov #0, r1
	fmov fr0, @@(r0, r1)
	fmov @@(r0, r1), fr1
	fcmp/eq fr0, fr1
	bt fmov15
	fail

fmov15:	# Test dr -> @@(r0, rn), @@(r0, rn) -> dr.
	init
	_setsz
	_setpr
	mov #40, r0
	shll8 r0
	mov #0, r1
	fmov dr0, @@(r0, r1)
	fmov @@(r0, r1), dr2
	fcmp/eq dr0, dr2
	bt fmov16
	fail

fmov16:	# Test xd -> @@(r0, rn), @@(r0, rn) -> xd.
	init
	_setsz
	_setpr
	mov #40, r0
	shll8 r0
	mov #0, r1
	fmov dr0, xd0
	fmov xd0, @@(r0, r1)
	fmov @@(r0, r1), xd2
	fmov xd2, dr2
	fcmp/eq dr0, dr2
	bt okay
	fail

okay:
	pass
@


1.1.4.1
log
@Merge with mainline cagney_tramp-20040321-mergepoint.
@
text
@@

