head	1.1;
access;
symbols
	gdb_7_6_1-2013-08-30-release:1.1
	gdb_7_6-2013-04-26-release:1.1
	gdb_7_6-branch:1.1.0.8
	gdb_7_6-2013-03-12-branchpoint:1.1
	gdb_7_5_1-2012-11-29-release:1.1
	gdb_7_5-2012-08-17-release:1.1
	gdb_7_5-branch:1.1.0.6
	gdb_7_5-2012-07-18-branchpoint:1.1
	gdb_7_4_1-2012-04-26-release:1.1
	gdb_7_4-2012-01-24-release:1.1
	gdb_7_4-branch:1.1.0.4
	gdb_7_4-2011-12-13-branchpoint:1.1
	gdb_7_3_1-2011-09-04-release:1.1
	gdb_7_3-2011-07-26-release:1.1
	gdb_7_3-branch:1.1.0.2
	gdb_7_3-2011-04-01-branchpoint:1.1;
locks; strict;
comment	@ * @;


1.1
date	2010.10.06.23.41.20;	author hp;	state Exp;
branches;
next	;


desc
@@


1.1
log
@	* sim/cris/c/seek3.c, sim/cris/c/seek4.c: New tests.
@
text
@/* Check for a sim bug, whereby the position was always unsigned
   (truncation instead of sign-extension for 64-bit hosts).  */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <unistd.h>

int
main (void)
{
  FILE *f;
  const char fname[] = "sk1test.dat";
  const char tsttxt[]
    = "A random line of text, used to test correct read, write and seek.\n";
  char buf[sizeof tsttxt] = "";
  const char correct[] = "correct";
  char buf2[sizeof correct] = {0};
  int fd;

  f = fopen (fname, "wb");
  if (f == NULL
      || fwrite (tsttxt, 1, strlen (tsttxt), f) != strlen (tsttxt)
      || fclose (f) != 0)
    {
      printf ("fail\n");
      exit (1);
    }

  /* We have to use file-descriptor calls instead of stream calls to
     provoke the bug (for stream calls, the lseek call is canonicalized
     to use SEEK_SET).  */
  fd = open (fname, O_RDONLY);
  if (fd < 0
      || read (fd, buf, strlen (tsttxt)) != strlen (tsttxt)
      || strcmp (buf, tsttxt) != 0
      || lseek (fd, -30L, SEEK_CUR) != 36
      || read (fd, buf2, strlen (correct)) != strlen (correct)
      || strcmp (buf2, correct) != 0)
    {
      printf ("fail\n");
      exit (1);
    }

  printf ("pass\n");
  exit (0);
}
@
