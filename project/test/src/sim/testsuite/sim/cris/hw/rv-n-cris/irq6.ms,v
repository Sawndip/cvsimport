head	1.1;
access;
symbols
	gdb_7_6_1-2013-08-30-release:1.1
	gdb_7_6-2013-04-26-release:1.1
	gdb_7_6-branch:1.1.0.44
	gdb_7_6-2013-03-12-branchpoint:1.1
	gdb_7_5_1-2012-11-29-release:1.1
	gdb_7_5-2012-08-17-release:1.1
	gdb_7_5-branch:1.1.0.42
	gdb_7_5-2012-07-18-branchpoint:1.1
	gdb_7_4_1-2012-04-26-release:1.1
	gdb_7_4-2012-01-24-release:1.1
	gdb_7_4-branch:1.1.0.40
	gdb_7_4-2011-12-13-branchpoint:1.1
	gdb_7_3_1-2011-09-04-release:1.1
	gdb_7_3-2011-07-26-release:1.1
	gdb_7_3-branch:1.1.0.38
	gdb_7_3-2011-04-01-branchpoint:1.1
	gdb_7_2-2010-09-02-release:1.1
	gdb_7_2-branch:1.1.0.36
	gdb_7_2-2010-07-07-branchpoint:1.1
	gdb_7_1-2010-03-18-release:1.1
	gdb_7_1-branch:1.1.0.34
	gdb_7_1-2010-02-18-branchpoint:1.1
	gdb_7_0_1-2009-12-22-release:1.1
	gdb_7_0-2009-10-06-release:1.1
	gdb_7_0-branch:1.1.0.32
	gdb_7_0-2009-09-16-branchpoint:1.1
	arc-sim-20090309:1.1
	msnyder-checkpoint-072509-branch:1.1.0.30
	msnyder-checkpoint-072509-branchpoint:1.1
	arc-insight_6_8-branch:1.1.0.28
	arc-insight_6_8-branchpoint:1.1
	insight_6_8-branch:1.1.0.26
	insight_6_8-branchpoint:1.1
	reverse-20081226-branch:1.1.0.24
	reverse-20081226-branchpoint:1.1
	multiprocess-20081120-branch:1.1.0.22
	multiprocess-20081120-branchpoint:1.1
	reverse-20080930-branch:1.1.0.20
	reverse-20080930-branchpoint:1.1
	reverse-20080717-branch:1.1.0.18
	reverse-20080717-branchpoint:1.1
	msnyder-reverse-20080609-branch:1.1.0.16
	msnyder-reverse-20080609-branchpoint:1.1
	drow-reverse-20070409-branch:1.1.0.14
	drow-reverse-20070409-branchpoint:1.1
	gdb_6_8-2008-03-27-release:1.1
	gdb_6_8-branch:1.1.0.12
	gdb_6_8-2008-02-26-branchpoint:1.1
	gdb_6_7_1-2007-10-29-release:1.1
	gdb_6_7-2007-10-10-release:1.1
	gdb_6_7-branch:1.1.0.10
	gdb_6_7-2007-09-07-branchpoint:1.1
	insight_6_6-20070208-release:1.1
	gdb_6_6-2006-12-18-release:1.1
	gdb_6_6-branch:1.1.0.8
	gdb_6_6-2006-11-15-branchpoint:1.1
	insight_6_5-20061003-release:1.1
	nickrob-async-20060828-mergepoint:1.1
	gdb_6_5-20060621-release:1.1
	gdb_6_5-branch:1.1.0.6
	gdb_6_5-2006-05-14-branchpoint:1.1
	nickrob-async-20060513-branch:1.1.0.4
	nickrob-async-20060513-branchpoint:1.1
	readline_5_1-import-branch:1.1.0.2
	readline_5_1-import-branchpoint:1.1;
locks; strict;
comment	@.\" @;


1.1
date	2006.04.08.17.37.23;	author hp;	state Exp;
branches;
next	;


desc
@@


1.1
log
@	* sim/cris/hw/rv-n-cris/irq6.ms: New test.
@
text
@#mach: crisv10 crisv32
#sim(crisv10): --hw-device "/rv/trace? true"
#sim(crisv32): --hw-device "/rv/trace? true"
#output: /rv: WD\n
#output: /rv: REG R 0xd0000032\n
#output: /rv: := 0xabcdef01\n
#output: /rv: IRQ 0x4\n
#output: /rv: REG R 0xd0000036\n
#output: /rv: := 0x76543210\n
#output: /rv: REG R 0xd0000030\n
#output: /rv: IRQ 0x0\n
#output: /rv: IRQ 0x8\n
#output: /rv: := 0xeeff4455\n
#output: /rv: REG R 0xd0000034\n
#output: /rv: := 0xdd001122\n
#output: /rv: REG R 0xd0000038\n
#output: /rv: := 0xaaeeff44\n
#output: /rv: REG R 0xd000003c\n
#output: /rv: := 0xff445511\n
#output: pass\n

# Test two successive ints; that flags are disabled when an interrupt
# is taken, and then automatically (or by register restore) enabled at
# return.

#r W,
#r r,a8832,abcdef01
#r I,4
#r r,a8836,76543210
#r I,0
#r I,8
#r r,a8830,eeff4455
#r r,a8834,dd001122
#r r,a8838,aaeeff44
#r r,a883c,ff445511

 .lcomm dummy,4

 .include "testutils.inc"
 start
 test_h_mem 0xabcdef01 0xd0000032
 moveq -1,$r4

 .if ..asm.arch.cris.v32
 move irqvec1,$ebp
 .else
 move irqvec1,$ibr
 .endif

 ei
 test_h_mem 0,dummy

 ; Here after the first interrupt, or perhaps the second interrupt is
 ; taken directly; leave it optional.  Anyway, the second interrupt
 ; should be taken no later than this branch.
 test_h_mem 0,dummy

killme:
 fail

irq0x33:
 .if ..asm.arch.cris.v32
 ; Nothing needed to save flags - "shift" should happen, and back at rfe.
 .else
 ; The missing sim support for interrupt-excluding instructions is matched
 ; by the flaw that sim doesn't service interrupts in straight code.
 ; So, we can use a sequence that would work on actual hardware.
 move $dccr,$r5
 di
 .endif

 test_h_mem 0x76543210 0xd0000036
 test_h_mem 0xeeff4455 0xd0000030
 test_h_mem 0xdd001122 0xd0000034
 moveq -22,$r4

 .if ..asm.arch.cris.v32
 move irqvec2,$ebp
 rete
 rfe
 .else
 move irqvec2,$ibr
 reti
 move $r5,$dccr
 .endif

 pass

irq0x34:
 test_h_mem 0xaaeeff44 0xd0000038
 test_h_mem 0xff445511 0xd000003c
 cmpq -22,$r4
 bne killme
 nop
 pass

 singlevec irqvec1,0x33,irq0x33

 singlevec irqvec2,0x34,irq0x34
@
