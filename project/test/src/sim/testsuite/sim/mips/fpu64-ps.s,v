head	1.1;
access;
symbols
	gdb_7_6_1-2013-08-30-release:1.1
	gdb_7_6-2013-04-26-release:1.1
	gdb_7_6-branch:1.1.0.72
	gdb_7_6-2013-03-12-branchpoint:1.1
	gdb_7_5_1-2012-11-29-release:1.1
	gdb_7_5-2012-08-17-release:1.1
	gdb_7_5-branch:1.1.0.70
	gdb_7_5-2012-07-18-branchpoint:1.1
	gdb_7_4_1-2012-04-26-release:1.1
	gdb_7_4-2012-01-24-release:1.1
	gdb_7_4-branch:1.1.0.68
	gdb_7_4-2011-12-13-branchpoint:1.1
	gdb_7_3_1-2011-09-04-release:1.1
	gdb_7_3-2011-07-26-release:1.1
	gdb_7_3-branch:1.1.0.66
	gdb_7_3-2011-04-01-branchpoint:1.1
	gdb_7_2-2010-09-02-release:1.1
	gdb_7_2-branch:1.1.0.64
	gdb_7_2-2010-07-07-branchpoint:1.1
	gdb_7_1-2010-03-18-release:1.1
	gdb_7_1-branch:1.1.0.62
	gdb_7_1-2010-02-18-branchpoint:1.1
	gdb_7_0_1-2009-12-22-release:1.1
	gdb_7_0-2009-10-06-release:1.1
	gdb_7_0-branch:1.1.0.60
	gdb_7_0-2009-09-16-branchpoint:1.1
	arc-sim-20090309:1.1
	msnyder-checkpoint-072509-branch:1.1.0.58
	msnyder-checkpoint-072509-branchpoint:1.1
	arc-insight_6_8-branch:1.1.0.56
	arc-insight_6_8-branchpoint:1.1
	insight_6_8-branch:1.1.0.54
	insight_6_8-branchpoint:1.1
	reverse-20081226-branch:1.1.0.52
	reverse-20081226-branchpoint:1.1
	multiprocess-20081120-branch:1.1.0.50
	multiprocess-20081120-branchpoint:1.1
	reverse-20080930-branch:1.1.0.48
	reverse-20080930-branchpoint:1.1
	reverse-20080717-branch:1.1.0.46
	reverse-20080717-branchpoint:1.1
	msnyder-reverse-20080609-branch:1.1.0.44
	msnyder-reverse-20080609-branchpoint:1.1
	drow-reverse-20070409-branch:1.1.0.42
	drow-reverse-20070409-branchpoint:1.1
	gdb_6_8-2008-03-27-release:1.1
	gdb_6_8-branch:1.1.0.40
	gdb_6_8-2008-02-26-branchpoint:1.1
	gdb_6_7_1-2007-10-29-release:1.1
	gdb_6_7-2007-10-10-release:1.1
	gdb_6_7-branch:1.1.0.38
	gdb_6_7-2007-09-07-branchpoint:1.1
	insight_6_6-20070208-release:1.1
	gdb_6_6-2006-12-18-release:1.1
	gdb_6_6-branch:1.1.0.36
	gdb_6_6-2006-11-15-branchpoint:1.1
	insight_6_5-20061003-release:1.1
	gdb-csl-symbian-6_4_50_20060226-12:1.1
	gdb-csl-sourcerygxx-3_4_4-25:1.1
	nickrob-async-20060828-mergepoint:1.1
	gdb-csl-symbian-6_4_50_20060226-11:1.1
	gdb-csl-sourcerygxx-4_1-17:1.1
	gdb-csl-20060226-branch-local-2:1.1
	gdb-csl-sourcerygxx-4_1-14:1.1
	gdb-csl-sourcerygxx-4_1-13:1.1
	gdb-csl-sourcerygxx-4_1-12:1.1
	gdb-csl-sourcerygxx-3_4_4-21:1.1
	gdb_6_5-20060621-release:1.1
	gdb-csl-sourcerygxx-4_1-9:1.1
	gdb-csl-sourcerygxx-4_1-8:1.1
	gdb-csl-sourcerygxx-4_1-7:1.1
	gdb-csl-arm-2006q1-6:1.1
	gdb-csl-sourcerygxx-4_1-6:1.1
	gdb-csl-symbian-6_4_50_20060226-10:1.1
	gdb-csl-symbian-6_4_50_20060226-9:1.1
	gdb-csl-symbian-6_4_50_20060226-8:1.1
	gdb-csl-coldfire-4_1-11:1.1
	gdb-csl-sourcerygxx-3_4_4-19:1.1
	gdb-csl-coldfire-4_1-10:1.1
	gdb_6_5-branch:1.1.0.34
	gdb_6_5-2006-05-14-branchpoint:1.1
	gdb-csl-sourcerygxx-4_1-5:1.1
	nickrob-async-20060513-branch:1.1.0.32
	nickrob-async-20060513-branchpoint:1.1
	gdb-csl-sourcerygxx-4_1-4:1.1
	msnyder-reverse-20060502-branch:1.1.0.30
	msnyder-reverse-20060502-branchpoint:1.1
	gdb-csl-morpho-4_1-4:1.1
	gdb-csl-sourcerygxx-3_4_4-17:1.1
	readline_5_1-import-branch:1.1.0.28
	readline_5_1-import-branchpoint:1.1
	gdb-csl-20060226-branch-merge-to-csl-symbian-1:1.1
	gdb-csl-symbian-20060226-branch:1.1.0.26
	gdb-csl-symbian-20060226-branchpoint:1.1
	gdb-csl-20060226-branch-merge-to-csl-local-1:1.1
	msnyder-reverse-20060331-branch:1.1.0.24
	msnyder-reverse-20060331-branchpoint:1.1
	gdb-csl-available-20060303-branch:1.1.0.22
	gdb-csl-available-20060303-branchpoint:1.1
	gdb-csl-20060226-branch:1.1.0.20
	gdb-csl-20060226-branchpoint:1.1
	gdb_6_4-20051202-release:1.1
	msnyder-fork-checkpoint-branch:1.1.0.18
	msnyder-fork-checkpoint-branchpoint:1.1
	gdb-csl-gxxpro-6_3-branch:1.1.0.16
	gdb-csl-gxxpro-6_3-branchpoint:1.1
	gdb_6_4-branch:1.1.0.14
	gdb_6_4-2005-11-01-branchpoint:1.1
	gdb-csl-arm-20051020-branch:1.1.0.12
	gdb-csl-arm-20051020-branchpoint:1.1
	gdb-csl-arm-20050325-2005-q1b:1.1
	gdb-csl-arm-20050325-2005-q1a:1.1
	csl-arm-20050325-branch:1.1.0.10
	csl-arm-20050325-branchpoint:1.1
	gdb_6_3-20041109-release:1.1
	gdb_6_3-branch:1.1.0.8
	gdb_6_3-20041019-branchpoint:1.1
	drow_intercu-merge-20040921:1.1
	drow_intercu-20040221-branch:1.1.0.4
	drow_intercu-merge-20040915:1.1
	jimb-gdb_6_2-e500-branch:1.1.0.6
	jimb-gdb_6_2-e500-branchpoint:1.1
	gdb_6_2-20040730-release:1.1
	gdb_6_2-branch:1.1.0.2
	gdb_6_2-2004-07-10-gmt-branchpoint:1.1;
locks; strict;
comment	@# @;


1.1
date	2004.04.10.07.02.57;	author cgd;	state Exp;
branches
	1.1.4.1;
next	;

1.1.4.1
date	2004.09.16.17.02.14;	author drow;	state Exp;
branches;
next	;


desc
@@


1.1
log
@2004-04-10  Chris Demetriou  <cgd@@broadcom.com>

        * fpu64-ps.s: New file.
        * basic.exp: Run fpu64-ps.s.
@
text
@# mips test sanity, expected to pass.
# mach:	 mips64 sb1
# as:		-mabi=eabi
# ld:		-N -Ttext=0x80010000
# output:	*\\npass\\n

	.include "testutils.inc"

        .macro check_ps psval, upperval, lowerval
	.set push
	.set noreorder
	cvt.s.pu	$f0, \psval		# upper
	cvt.s.pl	$f2, \psval		# lower
	li.s		$f4, \upperval
	li.s		$f6, \lowerval
	c.eq.s		$fcc0, $f0, $f4
	bc1f		$fcc0, _fail
	 c.eq.s		$fcc0, $f2, $f6
	bc1f		$fcc0, _fail
	 nop
	.set pop
        .endm

	setup

	.set noreorder

	.ent DIAG
DIAG:

	# make sure that Status.FR and .CU1 are set.
	mfc0	$2, $12
	or	$2, $2, (1 << 26) | (1 << 29)
	mtc0	$2, $12


	writemsg "ldc1"

	.data
1:	.dword	0xc1a8000042200000		# -21.0, 40.0
	.text
	la	$2, 1b
	ldc1	$f8, 0($2)
	check_ps $f8, -21.0, 40.0


	writemsg "cvt.ps.s"

	li.s	$f10, 1.0
	li.s	$f12, 3.0
	cvt.ps.s $f8, $f10, $f12		# upper, lower
	check_ps $f8, 1.0, 3.0


	writemsg "cvt.ps.s, sdc1, copy, ldc1"

	.data
1:	.dword	0
	.dword	0
	.text
	la	$2, 1b
	li.s	$f12, -4.0
	li.s	$f14, 32.0
	cvt.ps.s $f10, $f12, $f14		# upper, lower
	sdc1	$f10, 8($2)
	lw	$3, 8($2)
	lw	$4, 12($2)
	sw	$3, 0($2)
	sw	$4, 4($2)
	ldc1	$f8, 0($2)
	check_ps $f8, -4.0, 32.0


	# Load some constants for later use

	li.s	$f10, 4.0
	li.s	$f12, 16.0
	cvt.ps.s $f20, $f10, $f12		# $f20: u=4.0, l=16.0

	li.s	$f10, -1.0
	li.s	$f12, 2.0
	cvt.ps.s $f22, $f10, $f12		# $f22: u=-1.0, l=2.0

	li.s	$f10, 17.0
	li.s	$f12, -8.0
	cvt.ps.s $f24, $f10, $f12		# $f24: u=17.0, l=-8.0


	writemsg "pll.ps"

	pll.ps	$f8, $f20, $f22
	check_ps $f8, 16.0, 2.0


	writemsg "plu.ps"

	plu.ps	$f8, $f20, $f22
	check_ps $f8, 16.0, -1.0


	writemsg "pul.ps"

	pul.ps	$f8, $f20, $f22
	check_ps $f8, 4.0, 2.0


	writemsg "puu.ps"

	puu.ps	$f8, $f20, $f22
	check_ps $f8, 4.0, -1.0


	writemsg "abs.ps"

	abs.ps	$f8, $f22
	check_ps $f8, 1.0, 2.0


	writemsg "mov.ps"

	mov.ps	$f8, $f22
	check_ps $f8, -1.0, 2.0


	writemsg "neg.ps"

	neg.ps	$f8, $f22
	check_ps $f8, 1.0, -2.0


	writemsg "add.ps"

	add.ps	$f8, $f20, $f22
	check_ps $f8, 3.0, 18.0


	writemsg "mul.ps"

	mul.ps	$f8, $f20, $f22
	check_ps $f8, -4.0, 32.0


	writemsg "sub.ps"

	sub.ps	$f8, $f20, $f22
	check_ps $f8, 5.0, 14.0


	writemsg "madd.ps"

	madd.ps	$f8, $f24, $f20, $f22
	check_ps $f8, 13.0, 24.0


	writemsg "msub.ps"

	msub.ps	$f8, $f24, $f20, $f22
	check_ps $f8, -21.0, 40.0


	writemsg "nmadd.ps"

	nmadd.ps $f8, $f24, $f20, $f22
	check_ps $f8, -13.0, -24.0


	writemsg "nmsub.ps"

	nmsub.ps $f8, $f24, $f20, $f22
	check_ps $f8, 21.0, -40.0


	writemsg "movn.ps (n)"

	li	$2, 0
	mov.ps	$f8, $f20
	movn.ps	$f8, $f22, $2		# doesn't move
	check_ps $f8, 4.0, 16.0


	writemsg "movn.ps (y)"

	li	$2, 1
	mov.ps	$f8, $f20
	movn.ps	$f8, $f22, $2		# does move
	check_ps $f8, -1.0, 2.0


	writemsg "movz.ps (y)"

	li	$2, 0
	mov.ps	$f8, $f20
	movz.ps	$f8, $f22, $2		# does move
	check_ps $f8, -1.0, 2.0


	writemsg "movz.ps (n)"

	li	$2, 1
	mov.ps	$f8, $f20
	movz.ps	$f8, $f22, $2		# doesn't move
	check_ps $f8, 4.0, 16.0


	writemsg "movf.ps (y,y)"

	cfc1	$2, $31	
	or	$2, $2, (1 << 23) | (1 << 25)
	xor	$2, $2, (1 << 23) | (1 << 25)
	ctc1	$2, $31			# clear fcc0, clear fcc1
	mov.ps	$f8, $f20
	movf.ps	$f8, $f22, $fcc0	# moves both halves
	check_ps $f8, -1.0, 2.0


	writemsg "movf.ps (y,n)"

	cfc1	$2, $31	
	or	$2, $2, (1 << 23) | (1 << 25)
	xor	$2, $2, (0 << 23) | (1 << 25)
	ctc1	$2, $31			# set fcc0, clear fcc1
	mov.ps	$f8, $f20
	movf.ps	$f8, $f22, $fcc0	# moves upper half only
	check_ps $f8, -1.0, 16.0


	writemsg "movf.ps (n,y)"

	cfc1	$2, $31	
	or	$2, $2, (1 << 23) | (1 << 25)
	xor	$2, $2, (1 << 23) | (0 << 25)
	ctc1	$2, $31			# clear fcc0, set fcc1
	mov.ps	$f8, $f20
	movf.ps	$f8, $f22, $fcc0	# moves lower half only
	check_ps $f8, 4.0, 2.0


	writemsg "movf.ps (n,n)"

	cfc1	$2, $31	
	or	$2, $2, (1 << 23) | (1 << 25)
	xor	$2, $2, (0 << 23) | (0 << 25)
	ctc1	$2, $31			# set fcc0, set fcc1
	mov.ps	$f8, $f20
	movf.ps	$f8, $f22, $fcc0	# doesn't move either half
	check_ps $f8, 4.0, 16.0


	writemsg "movt.ps (n,n)"

	cfc1	$2, $31	
	or	$2, $2, (1 << 23) | (1 << 25)
	xor	$2, $2, (1 << 23) | (1 << 25)
	ctc1	$2, $31			# clear fcc0, clear fcc1
	mov.ps	$f8, $f20
	movt.ps	$f8, $f22, $fcc0	# doesn't move either half
	check_ps $f8, 4.0, 16.0


	writemsg "movt.ps (n,y)"

	cfc1	$2, $31	
	or	$2, $2, (1 << 23) | (1 << 25)
	xor	$2, $2, (0 << 23) | (1 << 25)
	ctc1	$2, $31			# set fcc0, clear fcc1
	mov.ps	$f8, $f20
	movt.ps	$f8, $f22, $fcc0	# moves lower half only
	check_ps $f8, 4.0, 2.0


	writemsg "movt.ps (y,n)"

	cfc1	$2, $31	
	or	$2, $2, (1 << 23) | (1 << 25)
	xor	$2, $2, (1 << 23) | (0 << 25)
	ctc1	$2, $31			# clear fcc0, set fcc1
	mov.ps	$f8, $f20
	movt.ps	$f8, $f22, $fcc0	# moves upper half only
	check_ps $f8, -1.0, 16.0


	writemsg "movt.ps (y,y)"

	cfc1	$2, $31	
	or	$2, $2, (1 << 23) | (1 << 25)
	xor	$2, $2, (0 << 23) | (0 << 25)
	ctc1	$2, $31			# set fcc0, set fcc1
	mov.ps	$f8, $f20
	movt.ps	$f8, $f22, $fcc0	# moves both halves
	check_ps $f8, -1.0, 2.0


	writemsg "alnv.ps (aligned)"

	.data
1:	.dword	0xc1a8000042200000		# -21.0, 40.0
	.dword	0xc228000041a00000		# -42.0, 20.0
	.text
	la	$2, 1b
	li	$3, 0
	addu	$4, $3, 8
	luxc1	$f10, $3($2)
	luxc1	$f12, $4($2)
	alnv.ps	$f8, $f10, $f12, $3
	check_ps $f8, -21.0, 40.0


	writemsg "alnv.ps (unaligned)"

	.data
1:	.dword	0xc1a8000042200000		# -21.0, 40.0
	.dword	0xc228000041a00000		# -42.0, 20.0
	.hword	0x0001
	.text
	la	$2, 1b
	li	$3, 4
	addu	$4, $3, 8
	luxc1	$f10, $3($2)
	luxc1	$f12, $4($2)
	alnv.ps	$f8, $f10, $f12, $3

	lb	$5, 16($2)
	bnez	$5, 2f				# little endian
	 nop

	# big endian
	check_ps $f8, 40.0, -42.0
	b	3f
	 nop
2:
	# little endian
	check_ps $f8, 20.0, -21.0
3:


	# We test c.cond.ps only lightly, just to make sure it modifies
	# two bits and compares the halves separately.  Perhaps it should
	# be tested more thoroughly.

	writemsg "c.f.ps"

	cfc1	$2, $31	
	or	$2, $2, (1 << 23) | (0x7f << 25)
	ctc1	$2, $31			# set all fcc bits
	c.f.ps	$fcc0, $f8, $f8		# -> f, f
	bc1t	$fcc0, _fail
	 nop
	bc1t	$fcc1, _fail
	 nop

	
	writemsg "c.olt.ps"

	cfc1	$2, $31	
	or	$2, $2, (1 << 23) | (0x7f << 25)
	xor	$2, $2, (1 << 23) | (0x7f << 25)
	ctc1	$2, $31			# clear all fcc bits
	c.lt.ps $fcc0, $f22, $f24	# -> f, t
	bc1t	$fcc0, _fail
	 nop
	bc1f	$fcc1, _fail
	 nop
	

	pass

	.end DIAG
@


1.1.4.1
log
@Merge mainline to intercu branch - 2004-09-15
@
text
@@

