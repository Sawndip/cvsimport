head	1.1;
access;
symbols
	gdb_7_6_1-2013-08-30-release:1.1
	gdb_7_6-2013-04-26-release:1.1
	gdb_7_6-branch:1.1.0.6
	gdb_7_6-2013-03-12-branchpoint:1.1
	gdb_7_5_1-2012-11-29-release:1.1
	gdb_7_5-2012-08-17-release:1.1
	gdb_7_5-branch:1.1.0.4
	gdb_7_5-2012-07-18-branchpoint:1.1
	gdb_7_4_1-2012-04-26-release:1.1
	gdb_7_4-2012-01-24-release:1.1
	gdb_7_4-branch:1.1.0.2
	gdb_7_4-2011-12-13-branchpoint:1.1;
locks; strict;
comment	@# @;


1.1
date	2011.06.04.17.44.22;	author vapier;	state Exp;
branches;
next	;


desc
@@


1.1
log
@sim: bfin: import testsuite

Now that the common sim testsuite code supports .S and .c files, we
can import the Blackfin testsuite.  There are about ~800 tests here,
so I'm only attaching a compressed patch of them.  Other than adding
files to sim/testsuite/sim/bfin/, the sim/configure.tgt file was
updated to mark Blackfin as having a testsuite, and sim/configure
regenerated.

Signed-off-by: Mike Frysinger <vapier@@gentoo.org>
@
text
@# mach: bfin

.include "testutils.inc"
	start


	I0 = 0 (X);
	I1 = 0 (X);
	A0 = A1 = 0;
	init_r_regs 0;
	ASTAT = R0;

// This section of code will test the SAA instructions and sum of accumulators;

	loadsym I0, tstvecI;

	R0 = [ I0 ++ ];
	R2 = [ I0 ++ ];

// +++++++++++++++   TG11.001   +++++++++++++ //
//                                            //
//                     HH   HL   LH   LL      //
//       Input: r0 ==> 15   15   15   15      //
//              r1 ==>  0    0    0    0      //
//                                            //
//       Output:r2 ==> 0    0    0   30       //
//              r3 ==> 0    0    0   30       //
// ++++++++++++++++++++++++++++++++++++++++++ //

	SAA ( R1:0 , R3:2 );
	R6 = A1.L + A1.H, R7 = A0.L + A0.H;
	DBGA ( R6.L , 0x001e );
	DBGA ( R6.H , 0x0000 );
	DBGA ( R7.L , 0x001e );
	DBGA ( R7.H , 0x0000 );

	A1 = A0 = 0;

// +++++++++++++++   TG11.002   +++++++++++++ //
//                                            //
//                     HH   HL   LH   LL      //
//       Input: r0 ==> 15   15   15   15      //
//              r1 ==>  0    0    0    0      //
//                                            //
//       Output:r2 ==> 0    0    0   30       //
//              r3 ==> 0    0    0   30       //
// ++++++++++++++++++++++++++++++++++++++++++ //

	SAA ( R1:0 , R3:2 );
	R6 = A1.L + A1.H, R7 = A0.L + A0.H;
	DBGA ( R6.L , 0x001e );
	DBGA ( R6.H , 0x0000 );
	DBGA ( R7.L , 0x001e );
	DBGA ( R7.H , 0x0000 );

	A1 = A0 = 0;

// +++++++++++++++   TG11.003   +++++++++++++ //
//                                            //
//                     HH   HL   LH   LL      //
//       Input: r0 ==> 240  240  240  240     //
//              r1 ==>  0    0    0    0      //
//                                            //
//       Output:r2 ==> 0    480               //
//              r3 ==> 0    480               //
// ++++++++++++++++++++++++++++++++++++++++++ //

	R0 = [ I0 ++ ];
	R2 = [ I0 ++ ];

	SAA ( R3:2 , R1:0 );
	R6 = A1.L + A1.H, R7 = A0.L + A0.H;
	DBGA ( R6.L , 0x01e0 );
	DBGA ( R6.H , 0x0000 );
	DBGA ( R7.L , 0x01e0 );
	DBGA ( R7.H , 0x0000 );

	A1 = A0 = 0;

// +++++++++++++++   TG11.004   +++++++++++++ //
//                                            //
//                     HH   HL   LH   LL      //
//       Input: r0 ==> 240  240  240  240     //
//              r1 ==>  0    0    0    0      //
//                                            //
//       Output:r2 ==> 0    480               //
//              r3 ==> 0    480               //
// ++++++++++++++++++++++++++++++++++++++++++ //

	SAA ( R1:0 , R3:2 );
	R6 = A1.L + A1.H, R7 = A0.L + A0.H;
	DBGA ( R6.L , 0x01e0 );
	DBGA ( R6.H , 0x0000 );
	DBGA ( R7.L , 0x01e0 );
	DBGA ( R7.H , 0x0000 );

	A1 = A0 = 0;
// +++++++++++++++   TG11.005   +++++++++++++ //
//                                            //
//                     HH   HL   LH   LL      //
//       Input: r0 ==>  0    0    0    0      //
//              r1 ==>  0    0    0    0      //
//                                            //
//       Output:r2 ==> 0    0                 //
//              r3 ==> 0    0                 //
// ++++++++++++++++++++++++++++++++++++++++++ //

	R0 = [ I0 ++ ];
	R2 = [ I0 ++ ];

	SAA ( R1:0 , R3:2 );
	R6 = A1.L + A1.H, R7 = A0.L + A0.H;
	DBGA ( R6.L , 0x0000 );
	DBGA ( R6.H , 0x0000 );
	DBGA ( R7.L , 0x0000 );
	DBGA ( R7.H , 0x0000 );

// +++++++++++++++   TG11.006   +++++++++++++ //
//                                            //
//                     HH   HL   LH   LL      //
//       Input: r0 ==> 255  255  255  255     //
//              r1 ==> 255  255  255  255     //
//                                            //
//       Output:r2 ==> 0    0                 //
//              r3 ==> 0    0                 //
// ++++++++++++++++++++++++++++++++++++++++++ //

	SAA ( R3:2 , R1:0 );
	R6 = A1.L + A1.H, R7 = A0.L + A0.H;
	DBGA ( R6.L , 0x0000 );
	DBGA ( R6.H , 0x0000 );
	DBGA ( R7.L , 0x0000 );
	DBGA ( R7.H , 0x0000 );

	A1 = A0 = 0;

// +++++++++++++++   TG12.001   +++++++++++++ //
//                                            //
//                     HH   HL   LH   LL      //
//       Input: r0 ==> 255  255  255  255     //
//              r1 ==> 255  255  255  255     //
//                                            //
//       Output:r2 ==> 0    0                 //
//              r3 ==> 0    0                 //
// ++++++++++++++++++++++++++++++++++++++++++ //

	loadsym I0, tstvecK;
	B0 = I0;
	L0.L = 4;
	loadsym I1, tstvecJ;
	B1 = I1;
	L1.L = 4;

	P0 = 64 (X);
	R0 = [ I0 ++ ];
	R2 = [ I1 ++ ];
	LSETUP ( l$1 , l$1 ) LC0 = P0;
l$1:
	SAA ( R1:0 , R3:2 ) || R0 = [ I0 ++ ] || R1 = [ I1 ++ ];

	R2 = A1.L + A1.H, R3 = A0.L + A0.H;
	R7 = R2 + R3 (NS);
	DBGA ( R7.L , 0xff00 );
	DBGA ( R7.H , 0x0000 );

	R5.L = 0xfffa;
	A1 = R5;
	R5.H = 0xfff0;
	A0 = R5;

	loadsym I0, tstvecI;
	R0 = [ I0 ++ ];
	R2 = [ I0 ++ ];
	SAA ( R1:0 , R3:2 );
	R6 = A1.L + A1.H, R7 = A0.L + A0.H;
	DBGA ( R6.L , 0x000e );
	DBGA ( R6.H , 0x0000 );
	DBGA ( R7.L , 0xfffe );
	DBGA ( R7.H , 0xffff );

	pass

	.data
tstvecI:
	.dw 0x0000
	.dw 0x0000
	.dw 0x0f0f
	.dw 0x0f0f
	.dw 0x0000
	.dw 0x0000
	.dw 0xf0f0
	.dw 0xf0f0
	.dw 0x0000
	.dw 0x0000
	.dw 0x0000
	.dw 0x0000
	.dw 0xffff
	.dw 0xffff
	.dw 0xffff
	.dw 0xffff

	.data
tstvecJ:
	.dw 0xffff
	.dw 0xffff
	.dw 0xffff
	.dw 0xffff
	.dw 0xffff
	.dw 0xffff
	.dw 0xffff
	.dw 0xffff

	.data
tstvecK:
	.dw 0x0000
	.dw 0x0000
	.dw 0x0000
	.dw 0x0000
	.dw 0x0000
	.dw 0x0000
	.dw 0x0000
	.dw 0x0000
@
