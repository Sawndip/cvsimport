head	1.1;
access;
symbols
	gdb_7_6_1-2013-08-30-release:1.1
	gdb_7_6-2013-04-26-release:1.1
	gdb_7_6-branch:1.1.0.6
	gdb_7_6-2013-03-12-branchpoint:1.1
	gdb_7_5_1-2012-11-29-release:1.1
	gdb_7_5-2012-08-17-release:1.1
	gdb_7_5-branch:1.1.0.4
	gdb_7_5-2012-07-18-branchpoint:1.1
	gdb_7_4_1-2012-04-26-release:1.1
	gdb_7_4-2012-01-24-release:1.1
	gdb_7_4-branch:1.1.0.2
	gdb_7_4-2011-12-13-branchpoint:1.1;
locks; strict;
comment	@# @;


1.1
date	2011.06.04.17.44.22;	author vapier;	state Exp;
branches;
next	;


desc
@@


1.1
log
@sim: bfin: import testsuite

Now that the common sim testsuite code supports .S and .c files, we
can import the Blackfin testsuite.  There are about ~800 tests here,
so I'm only attaching a compressed patch of them.  Other than adding
files to sim/testsuite/sim/bfin/, the sim/configure.tgt file was
updated to mark Blackfin as having a testsuite, and sim/configure
regenerated.

Signed-off-by: Mike Frysinger <vapier@@gentoo.org>
@
text
@//  Test signbits40
# mach: bfin

.include "testutils.inc"
	start


// positive value in accum, smaller than 1.0
	A1 = A0 = 0;
	R0.L = 0xffff;
	R0.H = 0x0000;
	A0.w = R0;
	R0.L = 0x0000;
	A0.x = R0;

	R5.L = SIGNBITS A0;
	_DBG R5;
	A0 = ASHIFT A0 BY R5.L;
	_DBG A0;

	R4 = A0.w;
	R5 = A0.x;
	DBGA ( R4.H , 0x7fff );	DBGA ( R4.L , 0x8000 );
	DBGA ( R5.H , 0x0000 );	DBGA ( R5.L , 0x0000 );

// neg value in accum, larger than -1.0
	A1 = A0 = 0;
	R0.L = 0x0000;
	R0.H = 0xffff;
	A0.w = R0;
	R0.L = 0x00ff;
	A0.x = R0;

	R5.L = SIGNBITS A0;
	_DBG R5;
	A0 = ASHIFT A0 BY R5.L;
	_DBG A0;

	R4 = A0.w;
	R5 = A0.x;
	DBGA ( R4.H , 0x8000 );	DBGA ( R4.L , 0x0000 );
	DBGA ( R5.H , 0xffff );	DBGA ( R5.L , 0xffff );

// positive value in accum, larger than 1.0
	A1 = A0 = 0;
	R0.L = 0xffff;
	R0.H = 0xffff;
	A0.w = R0;
	R0.L = 0x000f;
	A0.x = R0;

	R5.L = SIGNBITS A0;
	_DBG R5;
	A0 = ASHIFT A0 BY R5.L;
	_DBG A0;

	R4 = A0.w;
	R5 = A0.x;
	DBGA ( R4.H , 0x7fff );	DBGA ( R4.L , 0xffff );
	DBGA ( R5.H , 0x0000 );	DBGA ( R5.L , 0x0000 );

// negative value in accum, smaller than -1.0
	A1 = A0 = 0;
	R0.L = 0x0000;
	R0.H = 0x0000;
	A0.w = R0;
	R0.L = 0x0080;
	A0.x = R0;

	R5.L = SIGNBITS A0;
	_DBG R5;
	A0 = ASHIFT A0 BY R5.L;
	_DBG A0;

	R4 = A0.w;
	R5 = A0.x;
	DBGA ( R4.H , 0x8000 );	DBGA ( R4.L , 0x0000 );
	DBGA ( R5.H , 0xffff );	DBGA ( R5.L , 0xffff );

// no normalization
	A1 = A0 = 0;
	R0.L = 0xfffa;
	R0.H = 0x7fff;
	A0.w = R0;
	R0.L = 0x0000;
	A0.x = R0;

	R5.L = SIGNBITS A0;
	_DBG R5;
	A0 = ASHIFT A0 BY R5.L;
	_DBG A0;

	R4 = A0.w;
	R5 = A0.x;
	DBGA ( R4.H , 0x7fff );	DBGA ( R4.L , 0xfffa );
	DBGA ( R5.H , 0x0000 );	DBGA ( R5.L , 0x0000 );

// no normalization (-1.0)
	A1 = A0 = 0;
	R0.L = 0x0000;
	R0.H = 0x8000;
	A0.w = R0;
	R0.L = 0x00ff;
	A0.x = R0;

	R5.L = SIGNBITS A0;
	_DBG R5;
	A0 = ASHIFT A0 BY R5.L;
	_DBG A0;

	R4 = A0.w;
	R5 = A0.x;
	DBGA ( R4.H , 0x8000 );	DBGA ( R4.L , 0x0000 );
	DBGA ( R5.H , 0xffff );	DBGA ( R5.L , 0xffff );

// norm by 1
	A1 = A0 = 0;
	R0.L = 0x0000;
	R0.H = 0x8000;
	A0.w = R0;
	R0.L = 0x0000;
	A0.x = R0;

	R5.L = SIGNBITS A0;
	_DBG R5;
	A0 = ASHIFT A0 BY R5.L;
	_DBG A0;

	R4 = A0.w;
	R5 = A0.x;
	DBGA ( R4.H , 0x4000 );	DBGA ( R4.L , 0x0000 );
	DBGA ( R5.H , 0x0000 );	DBGA ( R5.L , 0x0000 );

// norm by 1
	A1 = A0 = 0;
	R0.L = 0x0000;
	R0.H = 0x0000;
	A0.w = R0;
	R0.L = 0x00ff;
	A0.x = R0;

	R5.L = SIGNBITS A0;
	_DBG R5;
	A0 = ASHIFT A0 BY R5.L;
	_DBG A0;

	R4 = A0.w;
	R5 = A0.x;
	DBGA ( R4.H , 0x8000 );	DBGA ( R4.L , 0x0000 );
	DBGA ( R5.H , 0xffff );	DBGA ( R5.L , 0xffff );

	pass
@
