head	1.1;
access;
symbols
	gdb_7_6_1-2013-08-30-release:1.1
	gdb_7_6-2013-04-26-release:1.1
	gdb_7_6-branch:1.1.0.6
	gdb_7_6-2013-03-12-branchpoint:1.1
	gdb_7_5_1-2012-11-29-release:1.1
	gdb_7_5-2012-08-17-release:1.1
	gdb_7_5-branch:1.1.0.4
	gdb_7_5-2012-07-18-branchpoint:1.1
	gdb_7_4_1-2012-04-26-release:1.1
	gdb_7_4-2012-01-24-release:1.1
	gdb_7_4-branch:1.1.0.2
	gdb_7_4-2011-12-13-branchpoint:1.1;
locks; strict;
comment	@# @;


1.1
date	2011.06.04.17.44.21;	author vapier;	state Exp;
branches;
next	;


desc
@@


1.1
log
@sim: bfin: import testsuite

Now that the common sim testsuite code supports .S and .c files, we
can import the Blackfin testsuite.  There are about ~800 tests here,
so I'm only attaching a compressed patch of them.  Other than adding
files to sim/testsuite/sim/bfin/, the sim/configure.tgt file was
updated to mark Blackfin as having a testsuite, and sim/configure
regenerated.

Signed-off-by: Mike Frysinger <vapier@@gentoo.org>
@
text
@# Blackfin testcase for hardware single stepping
# mach: bfin
# sim: --environment operating

#include "test.h"
	.include "testutils.inc"

	start

	# Set up exception handler
	imm32 P4, EVT3;
	loadsym R1, _evx;
	[P4] = R1;

	# Enable single stepping
	R0 = 1;
	SYSCFG = R0;

	# Lower to the code we want to single step through
	R1 = 1;
	imm32 R5, 0xffff
	R6 = 0;
	R7 = 0;
	loadsym R1, _usr;
	RETI = R1;
	RTI;

_usr:
	# Single step and set a new bit every time
	BITSET (R7, 0);
	BITSET (R7, 1);
	BITSET (R7, 2);
	BITSET (R7, 3);
	BITSET (R7, 4);
	BITSET (R7, 5);
	BITSET (R7, 6);
	BITSET (R7, 7);
	BITSET (R7, 8);
	BITSET (R7, 9);
	BITSET (R7, 10);
	BITSET (R7, 11);
	BITSET (R7, 12);
	BITSET (R7, 13);
	BITSET (R7, 14);
	BITSET (R7, 15);
	JUMP fail_lvl;

_evx:
	# Make sure exception reason is single step
	R3 = SEQSTAT;
	R4 = 0x3f;
	R3 = R3 & R4;
	R4 = 0x10;
	CC = R3 == R4;
	IF !CC JUMP fail_lvl;

	# Set a new bit in R6 every single step to match R7
	CC = R1;
	R6 = ROT R6 BY 1;
	CC = R6 == R7;
	IF !CC JUMP fail_lvl;

	# Do it through each bit
	CC = R5 == R6;
	IF CC JUMP pass_lvl;

	RTX;

pass_lvl:
	dbg_pass;
fail_lvl:
	dbg_fail;
@
