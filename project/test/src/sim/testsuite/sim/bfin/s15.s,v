head	1.1;
access;
symbols
	gdb_7_6_1-2013-08-30-release:1.1
	gdb_7_6-2013-04-26-release:1.1
	gdb_7_6-branch:1.1.0.6
	gdb_7_6-2013-03-12-branchpoint:1.1
	gdb_7_5_1-2012-11-29-release:1.1
	gdb_7_5-2012-08-17-release:1.1
	gdb_7_5-branch:1.1.0.4
	gdb_7_5-2012-07-18-branchpoint:1.1
	gdb_7_4_1-2012-04-26-release:1.1
	gdb_7_4-2012-01-24-release:1.1
	gdb_7_4-branch:1.1.0.2
	gdb_7_4-2011-12-13-branchpoint:1.1;
locks; strict;
comment	@# @;


1.1
date	2011.06.04.17.44.22;	author vapier;	state Exp;
branches;
next	;


desc
@@


1.1
log
@sim: bfin: import testsuite

Now that the common sim testsuite code supports .S and .c files, we
can import the Blackfin testsuite.  There are about ~800 tests here,
so I'm only attaching a compressed patch of them.  Other than adding
files to sim/testsuite/sim/bfin/, the sim/configure.tgt file was
updated to mark Blackfin as having a testsuite, and sim/configure
regenerated.

Signed-off-by: Mike Frysinger <vapier@@gentoo.org>
@
text
@//  reg-based SHIFT test program.
# mach: bfin

.include "testutils.inc"
	start


//  Test FEXT with no sign extension

	R0.L = 0xdead;
	R0.H = 0x1234;
	R1.L = 0x0810;	// pos=8 len=16
	R7 = EXTRACT( R0, R1.L ) (Z);
	DBGA ( R7.L , 0x34de );
	DBGA ( R7.H , 0 );

	R0.L = 0xdead;
	R0.H = 0x1234;
	R1.L = 0x0814;	// pos=8 len=20
	R7 = EXTRACT( R0, R1.L ) (Z);
	DBGA ( R7.L , 0x34de );
	DBGA ( R7.H , 0x0002 );

	R0.L = 0xdead;
	R0.H = 0x1234;
	R1.L = 0x0800;	// pos=8 len=0
	R7 = EXTRACT( R0, R1.L ) (Z);
	DBGA ( R7.L , 0 );
	DBGA ( R7.H , 0 );

	R0.L = 0xfff1;
	R0.H = 0xffff;
	R1.L = 0x0001;	// pos=0 len=1
	R7 = EXTRACT( R0, R1.L ) (Z);
	DBGA ( R7.L , 0x1 );
	DBGA ( R7.H , 0 );

	R0.L = 0xfff1;
	R0.H = 0xffff;
	R1.L = 0x0101;	// pos=1 len=1
	R7 = EXTRACT( R0, R1.L ) (Z);
	DBGA ( R7.L , 0 );
	DBGA ( R7.H , 0 );
	CC = AZ;	R7 = CC; DBGA ( R7.L , 0x1 );
	CC = AN;	R7 = CC; DBGA ( R7.L , 0x0 );

	R0.L = 0xfff1;
	R0.H = 0xffff;
	R1.L = 0x1810;	// pos=24 len=16
	R7 = EXTRACT( R0, R1.L ) (Z);
	DBGA ( R7.L , 0x00ff );
	DBGA ( R7.H , 0 );

	R0.L = 0xfff1;
	R0.H = 0xffff;
	R1.L = 0x0020;	// pos=0 len=32 is like pos=0 len=0
	R7 = EXTRACT( R0, R1.L ) (Z);
	DBGA ( R7.L , 0x0 );
	DBGA ( R7.H , 0x0 );
	CC = AZ;	R7 = CC; DBGA ( R7.L , 0x1 );
	CC = AN;	R7 = CC; DBGA ( R7.L , 0x0 );

	R0.L = 0xfff1;
	R0.H = 0xffff;
	R1.L = 0x2020;	// pos=32 len=32 is like pos=0 len=0
	R7 = EXTRACT( R0, R1.L ) (Z);
	DBGA ( R7.L , 0 );
	DBGA ( R7.H , 0 );

	R0.L = 0xfff1;
	R0.H = 0xffff;
	R1.L = 0x1f01;	// pos=31 len=1
	R7 = EXTRACT( R0, R1.L ) (Z);
	DBGA ( R7.L , 0x1 );
	DBGA ( R7.H , 0 );

	R0.L = 0xfff1;
	R0.H = 0xffff;
	R1.L = 0x1000;	// pos=16 len=0
	R7 = EXTRACT( R0, R1.L ) (Z);
	DBGA ( R7.L , 0 );
	DBGA ( R7.H , 0 );

//  Test FEXT with  sign extension

	R0.L = 0xdead;
	R0.H = 0x12f4;
	R1.L = 0x0810;	// pos=8 len=16
	R7 = EXTRACT( R0, R1.L ) (X);
	DBGA ( R7.L , 0xf4de );
	DBGA ( R7.H , 0xffff );
	CC = AZ;	R7 = CC; DBGA ( R7.L , 0x0 );
	CC = AN;	R7 = CC; DBGA ( R7.L , 0x1 );

	R0.L = 0xdead;
	R0.H = 0x1234;
	R1.L = 0x0810;	// pos=8 len=16
	R7 = EXTRACT( R0, R1.L ) (X);
	DBGA ( R7.L , 0x34de );
	DBGA ( R7.H , 0x0000 );
	CC = AZ;	R7 = CC; DBGA ( R7.L , 0x0 );
	CC = AN;	R7 = CC; DBGA ( R7.L , 0x0 );

	R0.L = 0xdead;
	R0.H = 0xf234;
	R1.L = 0x1f01;	// pos=31 len=1
	R7 = EXTRACT( R0, R1.L ) (X);
	DBGA ( R7.L , 0xffff );
	DBGA ( R7.H , 0xffff );
	CC = AZ;	R7 = CC; DBGA ( R7.L , 0x0 );
	CC = AN;	R7 = CC; DBGA ( R7.L , 0x1 );

	R0.L = 0xdead;
	R0.H = 0xf234;
	R1.L = 0x1f02;	// pos=31 len=2
	R7 = EXTRACT( R0, R1.L ) (X);
	DBGA ( R7.L , 0x0001 );
	DBGA ( R7.H , 0x0000 );
	CC = AZ;	R7 = CC; DBGA ( R7.L , 0x0 );
	CC = AN;	R7 = CC; DBGA ( R7.L , 0x0 );

	R0.L = 0xffff;
	R0.H = 0xffff;
	R1.L = 0x101f;	// pos=16 len=31
	R7 = EXTRACT( R0, R1.L ) (X);
	DBGA ( R7.L , 0xffff );
	DBGA ( R7.H , 0x0000 );
	CC = AZ;	R7 = CC; DBGA ( R7.L , 0x0 );
	CC = AN;	R7 = CC; DBGA ( R7.L , 0x0 );

	R0.L = 0xffff;
	R0.H = 0xffff;
	R1.L = 0x1001;	// pos=16 len=1
	R7 = EXTRACT( R0, R1.L ) (X);
	DBGA ( R7.L , 0xffff );
	DBGA ( R7.H , 0xffff );
	CC = AZ;	R7 = CC; DBGA ( R7.L , 0x0 );
	CC = AN;	R7 = CC; DBGA ( R7.L , 0x1 );

	R0.L = 0xffff;
	R0.H = 0xffff;
	R1.L = 0x1000;	// pos=16 len=0
	R7 = EXTRACT( R0, R1.L ) (X);
	DBGA ( R7.L , 0 );
	DBGA ( R7.H , 0 );
	CC = AZ;	R7 = CC; DBGA ( R7.L , 0x1 );
	CC = AN;	R7 = CC; DBGA ( R7.L , 0x0 );

	pass
@
