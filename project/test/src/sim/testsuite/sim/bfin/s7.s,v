head	1.1;
access;
symbols
	gdb_7_6_1-2013-08-30-release:1.1
	gdb_7_6-2013-04-26-release:1.1
	gdb_7_6-branch:1.1.0.6
	gdb_7_6-2013-03-12-branchpoint:1.1
	gdb_7_5_1-2012-11-29-release:1.1
	gdb_7_5-2012-08-17-release:1.1
	gdb_7_5-branch:1.1.0.4
	gdb_7_5-2012-07-18-branchpoint:1.1
	gdb_7_4_1-2012-04-26-release:1.1
	gdb_7_4-2012-01-24-release:1.1
	gdb_7_4-branch:1.1.0.2
	gdb_7_4-2011-12-13-branchpoint:1.1;
locks; strict;
comment	@# @;


1.1
date	2011.06.04.17.44.22;	author vapier;	state Exp;
branches;
next	;


desc
@@


1.1
log
@sim: bfin: import testsuite

Now that the common sim testsuite code supports .S and .c files, we
can import the Blackfin testsuite.  There are about ~800 tests here,
so I'm only attaching a compressed patch of them.  Other than adding
files to sim/testsuite/sim/bfin/, the sim/configure.tgt file was
updated to mark Blackfin as having a testsuite, and sim/configure
regenerated.

Signed-off-by: Mike Frysinger <vapier@@gentoo.org>
@
text
@//  Test  r4 = VMAX/VMAX (r5,r1)  A0>>2;
# mach: bfin

.include "testutils.inc"
	start


// Both max values are in high half, hence both bits
// into A0 are 1
	A0 = 0;
	R1.L = 0x2;	// max in r1 is 3
	R1.H = 0x3;

	R0.L = 0x6;	// max in r0 is 7
	R0.H = 0x7;

	R6 = VIT_MAX( R1 , R0 ) (ASR);

	DBGA ( R6.L , 0x0007 );
	DBGA ( R6.H , 0x0003 );
	R7 = A0.w;
	DBGA ( R7.L , 0x0000 );
	DBGA ( R7.H , 0xc000 );
	R7.L = A0.x;
	DBGA ( R7.L , 0x0000 );

// max value in r1 is in low, so second bit into A0 is zero
	A0 = 0;
	R1.L = 0x3;	// max in r1 is 3
	R1.H = 0x2;

	R0.L = 0x6;	// max in r0 is 7
	R0.H = 0x7;

	R6 = VIT_MAX( R1 , R0 ) (ASR);

	DBGA ( R6.L , 0x0007 );
	DBGA ( R6.H , 0x0003 );
	R7 = A0.w;
	DBGA ( R7.L , 0x0000 );
	DBGA ( R7.H , 0x4000 );
	R7.L = A0.x;
	DBGA ( R7.L , 0x0000 );

// both max values in low, so both bits into A0 are zero
	R0.L = 0x8000;
	R0.H = 0x0;
	A0.w = R0;
	R1.L = 0x3;	// max in r1 is 3
	R1.H = 0x2;

	R0.L = 0x7;	// max in r0 is 7
	R0.H = 0x6;

	R6 = VIT_MAX( R1 , R0 ) (ASR);

	DBGA ( R6.L , 0x0007 );
	DBGA ( R6.H , 0x0003 );
	R7 = A0.w;
	DBGA ( R7.L , 0x2000 );
	DBGA ( R7.H , 0x0000 );
	R7.L = A0.x;
	DBGA ( R7.L , 0x0000 );

// Test for correct max when one value overflows
	A0 = 0;
	R1.L = 0x7fff;	// max in r1 is 0x8001 (overflowed)
	R1.H = 0x8001;

	R0.L = 0x6;	// max in r0 is 7
	R0.H = 0x7;

	R6 = VIT_MAX( R1 , R0 ) (ASR);

	DBGA ( R6.L , 0x0007 );
	DBGA ( R6.H , 0x8001 );
	R7 = A0.w;
	DBGA ( R7.L , 0x0000 );
	DBGA ( R7.H , 0xc000 );
	R7.L = A0.x;
	DBGA ( R7.L , 0x0000 );

	pass
@
