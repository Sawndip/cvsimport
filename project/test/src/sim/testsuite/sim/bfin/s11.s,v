head	1.1;
access;
symbols
	gdb_7_6_1-2013-08-30-release:1.1
	gdb_7_6-2013-04-26-release:1.1
	gdb_7_6-branch:1.1.0.6
	gdb_7_6-2013-03-12-branchpoint:1.1
	gdb_7_5_1-2012-11-29-release:1.1
	gdb_7_5-2012-08-17-release:1.1
	gdb_7_5-branch:1.1.0.4
	gdb_7_5-2012-07-18-branchpoint:1.1
	gdb_7_4_1-2012-04-26-release:1.1
	gdb_7_4-2012-01-24-release:1.1
	gdb_7_4-branch:1.1.0.2
	gdb_7_4-2011-12-13-branchpoint:1.1;
locks; strict;
comment	@# @;


1.1
date	2011.06.04.17.44.22;	author vapier;	state Exp;
branches;
next	;


desc
@@


1.1
log
@sim: bfin: import testsuite

Now that the common sim testsuite code supports .S and .c files, we
can import the Blackfin testsuite.  There are about ~800 tests here,
so I'm only attaching a compressed patch of them.  Other than adding
files to sim/testsuite/sim/bfin/, the sim/configure.tgt file was
updated to mark Blackfin as having a testsuite, and sim/configure
regenerated.

Signed-off-by: Mike Frysinger <vapier@@gentoo.org>
@
text
@# mach: bfin

//  Shift test program.
//  Test instructions
//  RL0 = CC = BXOR (A0 AND R1) << 1;
//  RL0 = CC = BXOR  A0 AND R1;
//  A0 <<=1 (BXOR A0 AND A1 CC);
//  RL3 = CC = BXOR A0 AND A1 CC;

.include "testutils.inc"
	start

	init_r_regs 0;
	ASTAT = R0;

//  RL0 = CC = BXOR (A0 AND R1) << 1;
	R0.L = 0x1000;
	R0.H = 0x0000;
	A0.w = R0;
	R0.L = 0x0000;
	A0.x = R0.L;
	R1.L = 0xffff;
	R1.H = 0xffff;
	R2.L = CC = BXORSHIFT( A0 , R1 );
	R0 = A0.w;
	DBGA ( R0.L , 0x2000 );
	DBGA ( R0.H , 0x0000 );
	R0.L = A0.x;
	DBGA ( R0.L , 0x0000 );
	R0 = CC;
	DBGA ( R0.L , 0x0001 );
	DBGA ( R0.H , 0x0000 );
	DBGA ( R2.L , 0x0001 );

	R0.L = 0x1000;
	R0.H = 0x0001;
	A0.w = R0;
	R0.L = 0x0000;
	A0.x = R0.L;
	R1.L = 0xffff;
	R1.H = 0xffff;
	R2.L = CC = BXORSHIFT( A0 , R1 );
	R0 = A0.w;
	DBGA ( R0.L , 0x2000 );
	DBGA ( R0.H , 0x0002 );
	R0.L = A0.x;
	DBGA ( R0.L , 0x0000 );
	R0 = CC;
	DBGA ( R0.L , 0x0000 );
	DBGA ( R0.H , 0x0000 );
	DBGA ( R2.L , 0x0000 );

	R0.L = 0xffff;
	R0.H = 0xffff;
	A0.w = R0;
	R0.L = 0x00ff;
	A0.x = R0.L;
	R1.L = 0xffff;
	R1.H = 0xffff;
	R2.L = CC = BXORSHIFT( A0 , R1 );
	R0 = A0.w;
	DBGA ( R0.L , 0xfffe );
	DBGA ( R0.H , 0xffff );
	R0.L = A0.x;
	DBGA ( R0.L , 0xffff );
	R0 = CC;
	DBGA ( R0.L , 0x0001 );
	DBGA ( R0.H , 0x0000 );
	DBGA ( R2.L , 0x0001 );

// no
	R0.L = 0xffff;
	R0.H = 0xffff;
	A0.w = R0;
	R0.L = 0x00ff;
	A0.x = R0.L;
	R1.L = 0xffff;
	R1.H = 0xffff;
	R2.L = CC = BXOR( A0 , R1 );
	R0 = A0.w;
	DBGA ( R0.L , 0xffff );
	DBGA ( R0.H , 0xffff );
	R0.L = A0.x;
	DBGA ( R0.L , 0xffff );
	R0 = CC;
	DBGA ( R0.L , 0x0000 );
	DBGA ( R0.H , 0x0000 );
	DBGA ( R2.H , 0x0000 );

//  A0 <<=1 (BXOR A0 AND A1 CC);

	R0.L = 0x1000;
	R0.H = 0x0000;
	A0.w = R0;
	R0.L = 0x0000;
	A0.x = R0.L;
	R0.L = 0xffff;
	R0.H = 0xffff;
	A1.w = R0;
	R0.L = 0x00ff;
	A1.x = R0.L;
	R0.L = 0x0000;
	R0.H = 0x0000;
	CC = R0;
	A0 = BXORSHIFT( A0 , A1, CC );
	R0 = A0.w;
	DBGA ( R0.L , 0x2001 );
	DBGA ( R0.H , 0x0000 );
	R0.L = A0.x;
	DBGA ( R0.L , 0x0000 );

	R0.L = 0x1000;
	R0.H = 0x0000;
	A0.w = R0;
	R0.L = 0x0000;
	A0.x = R0.L;
	R0.L = 0x0fff;
	R0.H = 0xffff;
	A1.w = R0;
	R0.L = 0x00ff;
	A1.x = R0.L;
	R0.L = 0x0000;
	R0.H = 0x0000;
	CC = R0;
	A0 = BXORSHIFT( A0 , A1, CC );
	R0 = A0.w;
	DBGA ( R0.L , 0x2000 );
	DBGA ( R0.H , 0x0000 );
	R0.L = A0.x;
	DBGA ( R0.L , 0x0000 );

	R0.L = 0x1000;
	R0.H = 0x0000;
	A0.w = R0;
	R0.L = 0x0000;
	A0.x = R0.L;
	R0.L = 0xffff;
	R0.H = 0xffff;
	A1.w = R0;
	R0.L = 0x00ff;
	A1.x = R0.L;
	R0.L = 0x0001;
	R0.H = 0x0000;
	CC = R0;
	A0 = BXORSHIFT( A0 , A1, CC );
	R0 = A0.w;
	DBGA ( R0.L , 0x2000 );
	DBGA ( R0.H , 0x0000 );
	R0.L = A0.x;
	DBGA ( R0.L , 0x0000 );

// no

	R0.L = 0x1000;
	R0.H = 0x0000;
	A0.w = R0;
	R0.L = 0x0000;
	A0.x = R0.L;
	R0.L = 0xffff;
	R0.H = 0xffff;
	A1.w = R0;
	R0.L = 0x00ff;
	A1.x = R0.L;
	R0.L = 0x0000;
	R0.H = 0x0000;
	CC = R0;
	R2.L = CC = BXOR( A0 , A1, CC );
	R0 = A0.w;
	DBGA ( R0.L , 0x1000 );
	DBGA ( R0.H , 0x0000 );
	R0.L = A0.x;
	DBGA ( R0.L , 0x0000 );
	DBGA ( R2.L , 0x0001 );
	R0 = CC;
	DBGA ( R0.L , 0x0001 );

	pass
@
