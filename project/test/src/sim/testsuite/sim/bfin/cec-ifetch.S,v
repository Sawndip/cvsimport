head	1.1;
access;
symbols
	gdb_7_6_1-2013-08-30-release:1.1
	gdb_7_6-2013-04-26-release:1.1
	gdb_7_6-branch:1.1.0.6
	gdb_7_6-2013-03-12-branchpoint:1.1
	gdb_7_5_1-2012-11-29-release:1.1
	gdb_7_5-2012-08-17-release:1.1
	gdb_7_5-branch:1.1.0.4
	gdb_7_5-2012-07-18-branchpoint:1.1
	gdb_7_4_1-2012-04-26-release:1.1
	gdb_7_4-2012-01-24-release:1.1
	gdb_7_4-branch:1.1.0.2
	gdb_7_4-2011-12-13-branchpoint:1.1;
locks; strict;
comment	@# @;


1.1
date	2011.06.04.17.44.21;	author vapier;	state Exp;
branches;
next	;


desc
@@


1.1
log
@sim: bfin: import testsuite

Now that the common sim testsuite code supports .S and .c files, we
can import the Blackfin testsuite.  There are about ~800 tests here,
so I'm only attaching a compressed patch of them.  Other than adding
files to sim/testsuite/sim/bfin/, the sim/configure.tgt file was
updated to mark Blackfin as having a testsuite, and sim/configure
regenerated.

Signed-off-by: Mike Frysinger <vapier@@gentoo.org>
@
text
@# Blackfin testcase for making sure RETX is the excepting insn
# and not the target of the insn (like indirect jumps)
# mach: bfin
# sim: --environment operating

#include "test.h"
	.include "testutils.inc"

	start

	# Set our handler
	imm32 P5, EVT3;
	loadsym R1, _evtx;
	[P5] = R1;

	# Lower ourselves below EVT3
	loadsym R4, _i_rts;
	RETI = R4;
	RAISE 12;
	RTI;

_i_rts:
	# Check unaligned RETS
	loadsym R6, 1f;
	loadsym R5, 2f;
	R0 = 1;
	RETS = R0;
1:	RTS;
2:

_i_jump:
	# Check unaligned indirect jump
	loadsym R6, 1f;
	loadsym R5, 2f;
	P0 = 1;
1:	JUMP (P0);
2:

_i_jump_off:
	# Check unaligned indirect jump (pc-relative)
	loadsym R6, 1f;
	loadsym R5, 2f;
	P0 = 1;
1:	JUMP (PC + P0);
2:

_i_call:
	# Check unaligned indirect call
	loadsym R6, 1f;
	loadsym R5, 2f;
	P0 = 1;
1:	CALL (P0);
2:

_pass_lvl:
	dbg_pass

_evtx:
	# Make sure R6 matches RETX
	R7 = RETX;
	CC = R6 == R7;
	if !CC jump _fail_lvl;

	# Move on to next test
	RETX = R5;
	RTX;

_fail_lvl:
	dbg_fail
@
