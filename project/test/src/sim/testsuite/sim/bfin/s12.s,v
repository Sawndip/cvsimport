head	1.1;
access;
symbols
	gdb_7_6_1-2013-08-30-release:1.1
	gdb_7_6-2013-04-26-release:1.1
	gdb_7_6-branch:1.1.0.6
	gdb_7_6-2013-03-12-branchpoint:1.1
	gdb_7_5_1-2012-11-29-release:1.1
	gdb_7_5-2012-08-17-release:1.1
	gdb_7_5-branch:1.1.0.4
	gdb_7_5-2012-07-18-branchpoint:1.1
	gdb_7_4_1-2012-04-26-release:1.1
	gdb_7_4-2012-01-24-release:1.1
	gdb_7_4-branch:1.1.0.2
	gdb_7_4-2011-12-13-branchpoint:1.1;
locks; strict;
comment	@# @;


1.1
date	2011.06.04.17.44.22;	author vapier;	state Exp;
branches;
next	;


desc
@@


1.1
log
@sim: bfin: import testsuite

Now that the common sim testsuite code supports .S and .c files, we
can import the Blackfin testsuite.  There are about ~800 tests here,
so I'm only attaching a compressed patch of them.  Other than adding
files to sim/testsuite/sim/bfin/, the sim/configure.tgt file was
updated to mark Blackfin as having a testsuite, and sim/configure
regenerated.

Signed-off-by: Mike Frysinger <vapier@@gentoo.org>
@
text
@//  Shifter test program.
//  Test instructions
//  RL5 = EXPADJ R4 BY RL2;
# mach: bfin

.include "testutils.inc"
	start


	R0.L = 30;	// large norm of small value
	R0.H = 1;	// make sure high half is not used
	R1.L = 0x0000;
	R1.H = 0x1000;	// small norm (2) of large value
	R7.L = EXPADJ( R1 , R0.L );
	DBGA ( R7.L , 0x0002 );

	R0.L = 3;	// small norm of large value
	R0.H = 1;	// make sure high half is not used
	R1.L = 0x0000;
	R1.H = 0xff00;	// small norm (2) of large value
	R7.L = EXPADJ( R1 , R0.L );
	DBGA ( R7.L , 0x0003 );

	R0.L = 3;
	R0.H = 1;
	R1.L = 0xffff;
	R1.H = 0xffff;
	R7.L = EXPADJ( R1 , R0.L );
	DBGA ( R7.L , 0x0003 );

	R0.L = 31;
	R0.H = 1;
	R1.L = 0x0000;	// norm=0
	R1.H = 0x8000;
	R7.L = EXPADJ( R1 , R0.L );
	DBGA ( R7.L , 0x0000 );

// RL5 = EXPADJ/EXPADJ R4 BY RL2;

	R0.L = 15;
	R1.L = 0x0800;
	R1.H = 0x1000;
	R7.L = EXPADJ( R1 , R0.L ) (V);
	DBGA ( R7.L , 0x0002 );

	R0.L = 15;
	R1.L = 0x1000;
	R1.H = 0x0800;
	R7.L = EXPADJ( R1 , R0.L ) (V);
	DBGA ( R7.L , 0x0002 );

	R0.L = 1;
	R1.L = 0x0800;
	R1.H = 0x1000;
	R7.L = EXPADJ( R1 , R0.L ) (V);
	DBGA ( R7.L , 0x0001 );

	R0.L = 14;
	R1.L = 0xff00;
	R1.H = 0xfff0;
	R7.L = EXPADJ( R1 , R0.L ) (V);
	DBGA ( R7.L , 0x0007 );

// RL5 = EXPADJ RL4 BY RL2;

	R0.L = 14;
	R1.L = 0xff00;
	R1.H = 0x1000;
	R7.L = EXPADJ( R1.L , R0.L );
	DBGA ( R7.L , 0x0007 );

	R0.L = 3;
	R1.L = 0xff00;
	R1.H = 0x1000;
	R7.L = EXPADJ( R1.L , R0.L );
	DBGA ( R7.L , 0x0003 );

	R0.L = 14;
	R1.L = 0x1000;
	R1.H = 0xff00;
	R7.L = EXPADJ( R1.H , R0.L );
	DBGA ( R7.L , 0x0007 );

	pass
@
