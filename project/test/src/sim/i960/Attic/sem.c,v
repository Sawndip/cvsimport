head	1.2;
access;
symbols
	gdb_6_3-20041109-release:1.1.1.5
	gdb_6_3-branch:1.1.1.5.0.84
	gdb_6_3-20041019-branchpoint:1.1.1.5
	drow_intercu-merge-20040921:1.1.1.5
	drow_intercu-merge-20040915:1.1.1.5
	jimb-gdb_6_2-e500-branch:1.1.1.5.0.86
	jimb-gdb_6_2-e500-branchpoint:1.1.1.5
	gdb_6_2-20040730-release:1.1.1.5
	gdb_6_2-branch:1.1.1.5.0.82
	gdb_6_2-2004-07-10-gmt-branchpoint:1.1.1.5
	gdb_6_1_1-20040616-release:1.1.1.5
	gdb_6_1-2004-04-05-release:1.1.1.5
	drow_intercu-merge-20040402:1.1.1.5
	drow_intercu-merge-20040327:1.1.1.5
	ezannoni_pie-20040323-branch:1.1.1.5.0.80
	ezannoni_pie-20040323-branchpoint:1.1.1.5
	cagney_tramp-20040321-mergepoint:1.1.1.5
	cagney_tramp-20040309-branch:1.1.1.5.0.78
	cagney_tramp-20040309-branchpoint:1.1.1.5
	gdb_6_1-branch:1.1.1.5.0.76
	gdb_6_1-2004-03-01-gmt-branchpoint:1.1.1.5
	drow_intercu-20040221-branch:1.1.1.5.0.74
	drow_intercu-20040221-branchpoint:1.1.1.5
	cagney_bfdfile-20040213-branch:1.1.1.5.0.72
	cagney_bfdfile-20040213-branchpoint:1.1.1.5
	drow-cplus-merge-20040208:1.1.1.5
	carlton_dictionary-20040126-merge:1.1.1.5
	cagney_bigcore-20040122-branch:1.1.1.5.0.70
	cagney_bigcore-20040122-branchpoint:1.1.1.5
	drow-cplus-merge-20040113:1.1.1.5
	drow-cplus-merge-20031224:1.1.1.5
	drow-cplus-merge-20031220:1.1.1.5
	carlton_dictionary-20031215-merge:1.1.1.5
	drow-cplus-merge-20031214:1.1.1.5
	carlton-dictionary-20031111-merge:1.1.1.5
	gdb_6_0-2003-10-04-release:1.1.1.5
	kettenis_sparc-20030918-branch:1.1.1.5.0.68
	kettenis_sparc-20030918-branchpoint:1.1.1.5
	carlton_dictionary-20030917-merge:1.1.1.5
	ezannoni_pie-20030916-branchpoint:1.1.1.5
	ezannoni_pie-20030916-branch:1.1.1.5.0.66
	cagney_x86i386-20030821-branch:1.1.1.5.0.64
	cagney_x86i386-20030821-branchpoint:1.1.1.5
	carlton_dictionary-20030805-merge:1.1.1.5
	carlton_dictionary-20030627-merge:1.1.1.5
	gdb_6_0-branch:1.1.1.5.0.62
	gdb_6_0-2003-06-23-branchpoint:1.1.1.5
	jimb-ppc64-linux-20030613-branch:1.1.1.5.0.60
	jimb-ppc64-linux-20030613-branchpoint:1.1.1.5
	cagney_convert-20030606-branch:1.1.1.5.0.58
	cagney_convert-20030606-branchpoint:1.1.1.5
	cagney_writestrings-20030508-branch:1.1.1.5.0.56
	cagney_writestrings-20030508-branchpoint:1.1.1.5
	jimb-ppc64-linux-20030528-branch:1.1.1.5.0.54
	jimb-ppc64-linux-20030528-branchpoint:1.1.1.5
	carlton_dictionary-20030523-merge:1.1.1.5
	cagney_fileio-20030521-branch:1.1.1.5.0.52
	cagney_fileio-20030521-branchpoint:1.1.1.5
	kettenis_i386newframe-20030517-mergepoint:1.1.1.5
	jimb-ppc64-linux-20030509-branch:1.1.1.5.0.50
	jimb-ppc64-linux-20030509-branchpoint:1.1.1.5
	kettenis_i386newframe-20030504-mergepoint:1.1.1.5
	carlton_dictionary-20030430-merge:1.1.1.5
	kettenis_i386newframe-20030419-branch:1.1.1.5.0.48
	kettenis_i386newframe-20030419-branchpoint:1.1.1.5
	carlton_dictionary-20030416-merge:1.1.1.5
	cagney_frameaddr-20030409-mergepoint:1.1.1.5
	kettenis_i386newframe-20030406-branch:1.1.1.5.0.46
	kettenis_i386newframe-20030406-branchpoint:1.1.1.5
	cagney_frameaddr-20030403-branchpoint:1.1.1.5
	cagney_frameaddr-20030403-branch:1.1.1.5.0.44
	cagney_framebase-20030330-mergepoint:1.1.1.5
	cagney_framebase-20030326-branch:1.1.1.5.0.42
	cagney_framebase-20030326-branchpoint:1.1.1.5
	cagney_lazyid-20030317-branch:1.1.1.5.0.40
	cagney_lazyid-20030317-branchpoint:1.1.1.5
	kettenis-i386newframe-20030316-mergepoint:1.1.1.5
	offbyone-20030313-branch:1.1.1.5.0.38
	offbyone-20030313-branchpoint:1.1.1.5
	kettenis-i386newframe-20030308-branch:1.1.1.5.0.36
	kettenis-i386newframe-20030308-branchpoint:1.1.1.5
	carlton_dictionary-20030305-merge:1.1.1.5
	cagney_offbyone-20030303-branch:1.1.1.5.0.34
	cagney_offbyone-20030303-branchpoint:1.1.1.5
	carlton_dictionary-20030207-merge:1.1.1.5
	interps-20030202-branch:1.1.1.5.0.32
	interps-20030202-branchpoint:1.1.1.5
	cagney-unwind-20030108-branch:1.1.1.5.0.30
	cagney-unwind-20030108-branchpoint:1.1.1.5
	carlton_dictionary-20021223-merge:1.1.1.5
	gdb_5_3-2002-12-12-release:1.1.1.5
	carlton_dictionary-20021115-merge:1.1.1.5
	kseitz_interps-20021105-merge:1.1.1.5
	kseitz_interps-20021103-merge:1.1.1.5
	drow-cplus-merge-20021020:1.1.1.5
	drow-cplus-merge-20021025:1.1.1.5
	carlton_dictionary-20021025-merge:1.1.1.5
	carlton_dictionary-20021011-merge:1.1.1.5
	drow-cplus-branch:1.1.1.5.0.28
	drow-cplus-branchpoint:1.1.1.5
	kseitz_interps-20020930-merge:1.1.1.5
	carlton_dictionary-20020927-merge:1.1.1.5
	carlton_dictionary-branch:1.1.1.5.0.26
	carlton_dictionary-20020920-branchpoint:1.1.1.5
	gdb_5_3-branch:1.1.1.5.0.24
	gdb_5_3-2002-09-04-branchpoint:1.1.1.5
	kseitz_interps-20020829-merge:1.1.1.5
	cagney_sysregs-20020825-branch:1.1.1.5.0.22
	cagney_sysregs-20020825-branchpoint:1.1.1.5
	readline_4_3-import-branch:1.1.1.5.0.20
	readline_4_3-import-branchpoint:1.1.1.5
	gdb_5_2_1-2002-07-23-release:1.1.1.5
	kseitz_interps-20020528-branch:1.1.1.5.0.18
	kseitz_interps-20020528-branchpoint:1.1.1.5
	cagney_regbuf-20020515-branch:1.1.1.5.0.16
	cagney_regbuf-20020515-branchpoint:1.1.1.5
	jimb-macro-020506-branch:1.1.1.5.0.14
	jimb-macro-020506-branchpoint:1.1.1.5
	gdb_5_2-2002-04-29-release:1.1.1.5
	gdb_5_2-branch:1.1.1.5.0.12
	gdb_5_2-2002-03-03-branchpoint:1.1.1.5
	gdb_5_1_1-2002-01-24-release:1.1.1.5
	gdb_5_1_0_1-2002-01-03-release:1.1.1.5
	gdb_5_1_0_1-2002-01-03-branch:1.1.1.5.0.10
	gdb_5_1_0_1-2002-01-03-branchpoint:1.1.1.5
	gdb_5_1-2001-11-21-release:1.1.1.5
	gdb_s390-2001-09-26-branch:1.1.1.5.0.8
	gdb_s390-2001-09-26-branchpoint:1.1.1.5
	gdb_5_1-2001-07-29-branch:1.1.1.5.0.6
	gdb_5_1-2001-07-29-branchpoint:1.1.1.5
	insight-precleanup-2001-01-01:1.1.1.5
	gdb-premipsmulti-2000-06-06-branch:1.1.1.5.0.4
	gdb-premipsmulti-2000-06-06-branchpoint:1.1.1.5
	gdb_5_0-2000-05-19-release:1.1.1.5
	gdb_4_18_2-2000-05-18-release:1.1.1.5
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.5
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.5
	gdb_5_0-2000-04-10-branch:1.1.1.5.0.2
	gdb_5_0-2000-04-10-branchpoint:1.1.1.5
	repo-unification-2000-02-06:1.1.1.5
	gdb-2000-02-04:1.1.1.5
	gdb-2000-02-02:1.1.1.5
	gdb-2000-02-01:1.1.1.5
	gdb-2000-01-31:1.1.1.5
	gdb-2000-01-26:1.1.1.5
	gdb-2000-01-24:1.1.1.5
	gdb-2000-01-17:1.1.1.5
	gdb-2000-01-10:1.1.1.5
	gdb-2000-01-05:1.1.1.5
	gdb-1999-12-21:1.1.1.5
	gdb-1999-12-13:1.1.1.5
	gdb-1999-12-07:1.1.1.5
	gdb-1999-12-06:1.1.1.5
	gdb-1999-11-16:1.1.1.5
	gdb-1999-11-08:1.1.1.5
	gdb-1999-11-01:1.1.1.5
	gdb-1999-10-25:1.1.1.5
	gdb-1999-10-18:1.1.1.5
	gdb-1999-10-11:1.1.1.5
	gdb-1999-10-04:1.1.1.5
	gdb-1999-09-28:1.1.1.4
	gdb-1999-09-21:1.1.1.4
	gdb-1999-09-13:1.1.1.4
	gdb-1999-09-08:1.1.1.4
	gdb-1999-08-30:1.1.1.4
	gdb-1999-08-23:1.1.1.3
	gdb-1999-08-16:1.1.1.3
	gdb-1999-08-09:1.1.1.3
	gdb-1999-08-02:1.1.1.2
	gdb-1999-07-26:1.1.1.2
	gdb-1999-07-19:1.1.1.2
	gdb-1999-07-12:1.1.1.2
	gdb-post-reformat-19990707:1.1.1.2
	gdb-1999-07-07-post-reformat-snapshot:1.1.1.2
	gdb-pre-reformat-19990707:1.1.1.2
	gdb-1999-07-07:1.1.1.2
	gdb-1999-07-05:1.1.1.2
	gdb-1999-06-28:1.1.1.2
	gdb-1999-06-21:1.1.1.2
	gdb-1999-06-14:1.1.1.2
	gdb-1999-06-07:1.1.1.2
	gdb-1999-06-01:1.1.1.2
	gdb-4_18-branch:1.1.1.1.0.2
	gdb-4_18-release:1.1.1.1
	gdb-1999-05-25:1.1.1.2
	gdb-1999-05-19:1.1.1.2
	gdb-1999-05-10:1.1.1.2
	gdb-19990504:1.1.1.2
	gdb-19990422:1.1.1.2
	SNAPSHOT:1.1.1
	gdb-4_18:1.1.1.1
	GDB_4_18:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.2
date	2004.12.01.15.27.20;	author cagney;	state dead;
branches;
next	1.1;

1.1
date	99.04.16.01.35.03;	author shebs;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.04.16.01.35.03;	author shebs;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.04.26.18.32.43;	author shebs;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	99.08.09.21.36.20;	author jsm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	99.08.31.01.12.57;	author jsm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	99.10.05.23.13.48;	author jsm;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Delete i960; deleted from GDB long long ago.
@
text
@/* Simulator instruction semantics for i960base.

THIS FILE IS MACHINE GENERATED WITH CGEN.

Copyright (C) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.

This file is part of the GNU Simulators.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License along
with this program; if not, write to the Free Software Foundation, Inc.,
59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

*/

#define WANT_CPU i960base
#define WANT_CPU_I960BASE

#include "sim-main.h"
#include "cgen-mem.h"
#include "cgen-ops.h"

#undef GET_ATTR
#define GET_ATTR(cpu, num, attr) CGEN_ATTR_VALUE (NULL, abuf->idesc->attrs, CGEN_INSN_##attr)

/* x-invalid: --invalid-- */

SEM_PC
SEM_FN_NAME (i960base,x_invalid) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_empty.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 0);

  {
#if WITH_SCACHE
    /* Update the recorded pc in the cpu state struct.  */
    SET_H_PC (pc);
#endif
    sim_engine_invalid_insn (current_cpu, pc);
    sim_io_error (CPU_STATE (current_cpu), "invalid insn not handled\n");
    /* NOTREACHED */
  }

  return vpc;
#undef FLD
}

/* x-after: --after-- */

SEM_PC
SEM_FN_NAME (i960base,x_after) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_empty.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 0);

  {
#if WITH_SCACHE_PBB_I960BASE
    i960base_pbb_after (current_cpu, sem_arg);
#endif
  }

  return vpc;
#undef FLD
}

/* x-before: --before-- */

SEM_PC
SEM_FN_NAME (i960base,x_before) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_empty.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 0);

  {
#if WITH_SCACHE_PBB_I960BASE
    i960base_pbb_before (current_cpu, sem_arg);
#endif
  }

  return vpc;
#undef FLD
}

/* x-cti-chain: --cti-chain-- */

SEM_PC
SEM_FN_NAME (i960base,x_cti_chain) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_empty.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 0);

  {
#if WITH_SCACHE_PBB_I960BASE
#ifdef DEFINE_SWITCH
    vpc = i960base_pbb_cti_chain (current_cpu, sem_arg,
			       pbb_br_npc_ptr, pbb_br_npc);
    BREAK (sem);
#else
    /* FIXME: Allow provision of explicit ifmt spec in insn spec.  */
    vpc = i960base_pbb_cti_chain (current_cpu, sem_arg,
			       CPU_PBB_BR_NPC_PTR (current_cpu),
			       CPU_PBB_BR_NPC (current_cpu));
#endif
#endif
  }

  return vpc;
#undef FLD
}

/* x-chain: --chain-- */

SEM_PC
SEM_FN_NAME (i960base,x_chain) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_empty.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 0);

  {
#if WITH_SCACHE_PBB_I960BASE
    vpc = i960base_pbb_chain (current_cpu, sem_arg);
#ifdef DEFINE_SWITCH
    BREAK (sem);
#endif
#endif
  }

  return vpc;
#undef FLD
}

/* x-begin: --begin-- */

SEM_PC
SEM_FN_NAME (i960base,x_begin) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_empty.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 0);

  {
#if WITH_SCACHE_PBB_I960BASE
#ifdef DEFINE_SWITCH
    /* In the switch case FAST_P is a constant, allowing several optimizations
       in any called inline functions.  */
    vpc = i960base_pbb_begin (current_cpu, FAST_P);
#else
    vpc = i960base_pbb_begin (current_cpu, STATE_RUN_FAST_P (CPU_STATE (current_cpu)));
#endif
#endif
  }

  return vpc;
#undef FLD
}

/* mulo: mulo $src1, $src2, $dst */

SEM_PC
SEM_FN_NAME (i960base,mulo) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_mulo.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = MULSI (* FLD (i_src1), * FLD (i_src2));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* mulo1: mulo $lit1, $src2, $dst */

SEM_PC
SEM_FN_NAME (i960base,mulo1) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_mulo1.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = MULSI (FLD (f_src1), * FLD (i_src2));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* mulo2: mulo $src1, $lit2, $dst */

SEM_PC
SEM_FN_NAME (i960base,mulo2) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_mulo2.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = MULSI (* FLD (i_src1), FLD (f_src2));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* mulo3: mulo $lit1, $lit2, $dst */

SEM_PC
SEM_FN_NAME (i960base,mulo3) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_mulo3.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = MULSI (FLD (f_src1), FLD (f_src2));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* remo: remo $src1, $src2, $dst */

SEM_PC
SEM_FN_NAME (i960base,remo) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_mulo.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = UMODSI (* FLD (i_src2), * FLD (i_src1));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* remo1: remo $lit1, $src2, $dst */

SEM_PC
SEM_FN_NAME (i960base,remo1) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_mulo1.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = UMODSI (* FLD (i_src2), FLD (f_src1));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* remo2: remo $src1, $lit2, $dst */

SEM_PC
SEM_FN_NAME (i960base,remo2) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_mulo2.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = UMODSI (FLD (f_src2), * FLD (i_src1));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* remo3: remo $lit1, $lit2, $dst */

SEM_PC
SEM_FN_NAME (i960base,remo3) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_mulo3.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = UMODSI (FLD (f_src2), FLD (f_src1));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* divo: divo $src1, $src2, $dst */

SEM_PC
SEM_FN_NAME (i960base,divo) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_mulo.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = UDIVSI (* FLD (i_src2), * FLD (i_src1));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* divo1: divo $lit1, $src2, $dst */

SEM_PC
SEM_FN_NAME (i960base,divo1) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_mulo1.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = UDIVSI (* FLD (i_src2), FLD (f_src1));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* divo2: divo $src1, $lit2, $dst */

SEM_PC
SEM_FN_NAME (i960base,divo2) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_mulo2.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = UDIVSI (FLD (f_src2), * FLD (i_src1));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* divo3: divo $lit1, $lit2, $dst */

SEM_PC
SEM_FN_NAME (i960base,divo3) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_mulo3.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = UDIVSI (FLD (f_src2), FLD (f_src1));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* remi: remi $src1, $src2, $dst */

SEM_PC
SEM_FN_NAME (i960base,remi) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_mulo.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = MODSI (* FLD (i_src2), * FLD (i_src1));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* remi1: remi $lit1, $src2, $dst */

SEM_PC
SEM_FN_NAME (i960base,remi1) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_mulo1.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = MODSI (* FLD (i_src2), FLD (f_src1));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* remi2: remi $src1, $lit2, $dst */

SEM_PC
SEM_FN_NAME (i960base,remi2) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_mulo2.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = MODSI (FLD (f_src2), * FLD (i_src1));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* remi3: remi $lit1, $lit2, $dst */

SEM_PC
SEM_FN_NAME (i960base,remi3) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_mulo3.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = MODSI (FLD (f_src2), FLD (f_src1));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* divi: divi $src1, $src2, $dst */

SEM_PC
SEM_FN_NAME (i960base,divi) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_mulo.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = DIVSI (* FLD (i_src2), * FLD (i_src1));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* divi1: divi $lit1, $src2, $dst */

SEM_PC
SEM_FN_NAME (i960base,divi1) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_mulo1.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = DIVSI (* FLD (i_src2), FLD (f_src1));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* divi2: divi $src1, $lit2, $dst */

SEM_PC
SEM_FN_NAME (i960base,divi2) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_mulo2.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = DIVSI (FLD (f_src2), * FLD (i_src1));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* divi3: divi $lit1, $lit2, $dst */

SEM_PC
SEM_FN_NAME (i960base,divi3) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_mulo3.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = DIVSI (FLD (f_src2), FLD (f_src1));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* addo: addo $src1, $src2, $dst */

SEM_PC
SEM_FN_NAME (i960base,addo) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_mulo.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = ADDSI (* FLD (i_src1), * FLD (i_src2));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* addo1: addo $lit1, $src2, $dst */

SEM_PC
SEM_FN_NAME (i960base,addo1) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_mulo1.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = ADDSI (FLD (f_src1), * FLD (i_src2));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* addo2: addo $src1, $lit2, $dst */

SEM_PC
SEM_FN_NAME (i960base,addo2) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_mulo2.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = ADDSI (* FLD (i_src1), FLD (f_src2));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* addo3: addo $lit1, $lit2, $dst */

SEM_PC
SEM_FN_NAME (i960base,addo3) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_mulo3.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = ADDSI (FLD (f_src1), FLD (f_src2));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* subo: subo $src1, $src2, $dst */

SEM_PC
SEM_FN_NAME (i960base,subo) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_mulo.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = SUBSI (* FLD (i_src2), * FLD (i_src1));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* subo1: subo $lit1, $src2, $dst */

SEM_PC
SEM_FN_NAME (i960base,subo1) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_mulo1.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = SUBSI (* FLD (i_src2), FLD (f_src1));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* subo2: subo $src1, $lit2, $dst */

SEM_PC
SEM_FN_NAME (i960base,subo2) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_mulo2.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = SUBSI (FLD (f_src2), * FLD (i_src1));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* subo3: subo $lit1, $lit2, $dst */

SEM_PC
SEM_FN_NAME (i960base,subo3) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_mulo3.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = SUBSI (FLD (f_src2), FLD (f_src1));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* notbit: notbit $src1, $src2, $dst */

SEM_PC
SEM_FN_NAME (i960base,notbit) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_notbit.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = XORSI (SLLSI (1, * FLD (i_src1)), * FLD (i_src2));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* notbit1: notbit $lit1, $src2, $dst */

SEM_PC
SEM_FN_NAME (i960base,notbit1) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_notbit1.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = XORSI (SLLSI (1, FLD (f_src1)), * FLD (i_src2));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* notbit2: notbit $src1, $lit2, $dst */

SEM_PC
SEM_FN_NAME (i960base,notbit2) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_notbit2.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = XORSI (SLLSI (1, * FLD (i_src1)), FLD (f_src2));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* notbit3: notbit $lit1, $lit2, $dst */

SEM_PC
SEM_FN_NAME (i960base,notbit3) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_notbit3.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = XORSI (SLLSI (1, FLD (f_src1)), FLD (f_src2));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* and: and $src1, $src2, $dst */

SEM_PC
SEM_FN_NAME (i960base,and) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_mulo.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = ANDSI (* FLD (i_src1), * FLD (i_src2));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* and1: and $lit1, $src2, $dst */

SEM_PC
SEM_FN_NAME (i960base,and1) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_mulo1.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = ANDSI (FLD (f_src1), * FLD (i_src2));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* and2: and $src1, $lit2, $dst */

SEM_PC
SEM_FN_NAME (i960base,and2) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_mulo2.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = ANDSI (* FLD (i_src1), FLD (f_src2));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* and3: and $lit1, $lit2, $dst */

SEM_PC
SEM_FN_NAME (i960base,and3) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_mulo3.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = ANDSI (FLD (f_src1), FLD (f_src2));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* andnot: andnot $src1, $src2, $dst */

SEM_PC
SEM_FN_NAME (i960base,andnot) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_mulo.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = ANDSI (* FLD (i_src2), INVSI (* FLD (i_src1)));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* andnot1: andnot $lit1, $src2, $dst */

SEM_PC
SEM_FN_NAME (i960base,andnot1) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_mulo1.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = ANDSI (* FLD (i_src2), INVSI (FLD (f_src1)));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* andnot2: andnot $src1, $lit2, $dst */

SEM_PC
SEM_FN_NAME (i960base,andnot2) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_mulo2.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = ANDSI (FLD (f_src2), INVSI (* FLD (i_src1)));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* andnot3: andnot $lit1, $lit2, $dst */

SEM_PC
SEM_FN_NAME (i960base,andnot3) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_mulo3.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = ANDSI (FLD (f_src2), INVSI (FLD (f_src1)));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* setbit: setbit $src1, $src2, $dst */

SEM_PC
SEM_FN_NAME (i960base,setbit) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_notbit.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = ORSI (SLLSI (1, * FLD (i_src1)), * FLD (i_src2));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* setbit1: setbit $lit1, $src2, $dst */

SEM_PC
SEM_FN_NAME (i960base,setbit1) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_notbit1.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = ORSI (SLLSI (1, FLD (f_src1)), * FLD (i_src2));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* setbit2: setbit $src1, $lit2, $dst */

SEM_PC
SEM_FN_NAME (i960base,setbit2) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_notbit2.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = ORSI (SLLSI (1, * FLD (i_src1)), FLD (f_src2));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* setbit3: setbit $lit1, $lit2, $dst */

SEM_PC
SEM_FN_NAME (i960base,setbit3) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_notbit3.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = ORSI (SLLSI (1, FLD (f_src1)), FLD (f_src2));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* notand: notand $src1, $src2, $dst */

SEM_PC
SEM_FN_NAME (i960base,notand) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_mulo.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = ANDSI (INVSI (* FLD (i_src2)), * FLD (i_src1));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* notand1: notand $lit1, $src2, $dst */

SEM_PC
SEM_FN_NAME (i960base,notand1) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_mulo1.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = ANDSI (INVSI (* FLD (i_src2)), FLD (f_src1));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* notand2: notand $src1, $lit2, $dst */

SEM_PC
SEM_FN_NAME (i960base,notand2) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_mulo2.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = ANDSI (INVSI (FLD (f_src2)), * FLD (i_src1));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* notand3: notand $lit1, $lit2, $dst */

SEM_PC
SEM_FN_NAME (i960base,notand3) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_mulo3.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = ANDSI (INVSI (FLD (f_src2)), FLD (f_src1));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* xor: xor $src1, $src2, $dst */

SEM_PC
SEM_FN_NAME (i960base,xor) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_mulo.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = XORSI (* FLD (i_src1), * FLD (i_src2));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* xor1: xor $lit1, $src2, $dst */

SEM_PC
SEM_FN_NAME (i960base,xor1) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_mulo1.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = XORSI (FLD (f_src1), * FLD (i_src2));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* xor2: xor $src1, $lit2, $dst */

SEM_PC
SEM_FN_NAME (i960base,xor2) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_mulo2.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = XORSI (* FLD (i_src1), FLD (f_src2));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* xor3: xor $lit1, $lit2, $dst */

SEM_PC
SEM_FN_NAME (i960base,xor3) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_mulo3.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = XORSI (FLD (f_src1), FLD (f_src2));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* or: or $src1, $src2, $dst */

SEM_PC
SEM_FN_NAME (i960base,or) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_mulo.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = ORSI (* FLD (i_src1), * FLD (i_src2));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* or1: or $lit1, $src2, $dst */

SEM_PC
SEM_FN_NAME (i960base,or1) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_mulo1.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = ORSI (FLD (f_src1), * FLD (i_src2));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* or2: or $src1, $lit2, $dst */

SEM_PC
SEM_FN_NAME (i960base,or2) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_mulo2.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = ORSI (* FLD (i_src1), FLD (f_src2));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* or3: or $lit1, $lit2, $dst */

SEM_PC
SEM_FN_NAME (i960base,or3) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_mulo3.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = ORSI (FLD (f_src1), FLD (f_src2));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* nor: nor $src1, $src2, $dst */

SEM_PC
SEM_FN_NAME (i960base,nor) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_mulo.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = ANDSI (INVSI (* FLD (i_src2)), INVSI (* FLD (i_src1)));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* nor1: nor $lit1, $src2, $dst */

SEM_PC
SEM_FN_NAME (i960base,nor1) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_mulo1.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = ANDSI (INVSI (* FLD (i_src2)), INVSI (FLD (f_src1)));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* nor2: nor $src1, $lit2, $dst */

SEM_PC
SEM_FN_NAME (i960base,nor2) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_mulo2.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = ANDSI (INVSI (FLD (f_src2)), INVSI (* FLD (i_src1)));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* nor3: nor $lit1, $lit2, $dst */

SEM_PC
SEM_FN_NAME (i960base,nor3) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_mulo3.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = ANDSI (INVSI (FLD (f_src2)), INVSI (FLD (f_src1)));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* not: not $src1, $src2, $dst */

SEM_PC
SEM_FN_NAME (i960base,not) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_not.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = INVSI (* FLD (i_src1));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* not1: not $lit1, $src2, $dst */

SEM_PC
SEM_FN_NAME (i960base,not1) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_not1.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = INVSI (FLD (f_src1));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* not2: not $src1, $lit2, $dst */

SEM_PC
SEM_FN_NAME (i960base,not2) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_not2.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = INVSI (* FLD (i_src1));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* not3: not $lit1, $lit2, $dst */

SEM_PC
SEM_FN_NAME (i960base,not3) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_not3.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = INVSI (FLD (f_src1));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* clrbit: clrbit $src1, $src2, $dst */

SEM_PC
SEM_FN_NAME (i960base,clrbit) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_notbit.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = ANDSI (INVSI (SLLSI (1, * FLD (i_src1))), * FLD (i_src2));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* clrbit1: clrbit $lit1, $src2, $dst */

SEM_PC
SEM_FN_NAME (i960base,clrbit1) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_notbit1.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = ANDSI (INVSI (SLLSI (1, FLD (f_src1))), * FLD (i_src2));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* clrbit2: clrbit $src1, $lit2, $dst */

SEM_PC
SEM_FN_NAME (i960base,clrbit2) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_notbit2.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = ANDSI (INVSI (SLLSI (1, * FLD (i_src1))), FLD (f_src2));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* clrbit3: clrbit $lit1, $lit2, $dst */

SEM_PC
SEM_FN_NAME (i960base,clrbit3) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_notbit3.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = ANDSI (INVSI (SLLSI (1, FLD (f_src1))), FLD (f_src2));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* shlo: shlo $src1, $src2, $dst */

SEM_PC
SEM_FN_NAME (i960base,shlo) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_notbit.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = SLLSI (* FLD (i_src2), * FLD (i_src1));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* shlo1: shlo $lit1, $src2, $dst */

SEM_PC
SEM_FN_NAME (i960base,shlo1) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_notbit1.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = SLLSI (* FLD (i_src2), FLD (f_src1));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* shlo2: shlo $src1, $lit2, $dst */

SEM_PC
SEM_FN_NAME (i960base,shlo2) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_notbit2.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = SLLSI (FLD (f_src2), * FLD (i_src1));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* shlo3: shlo $lit1, $lit2, $dst */

SEM_PC
SEM_FN_NAME (i960base,shlo3) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_notbit3.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = SLLSI (FLD (f_src2), FLD (f_src1));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* shro: shro $src1, $src2, $dst */

SEM_PC
SEM_FN_NAME (i960base,shro) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_notbit.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = SRLSI (* FLD (i_src2), * FLD (i_src1));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* shro1: shro $lit1, $src2, $dst */

SEM_PC
SEM_FN_NAME (i960base,shro1) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_notbit1.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = SRLSI (* FLD (i_src2), FLD (f_src1));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* shro2: shro $src1, $lit2, $dst */

SEM_PC
SEM_FN_NAME (i960base,shro2) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_notbit2.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = SRLSI (FLD (f_src2), * FLD (i_src1));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* shro3: shro $lit1, $lit2, $dst */

SEM_PC
SEM_FN_NAME (i960base,shro3) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_notbit3.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = SRLSI (FLD (f_src2), FLD (f_src1));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* shli: shli $src1, $src2, $dst */

SEM_PC
SEM_FN_NAME (i960base,shli) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_notbit.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = SLLSI (* FLD (i_src2), * FLD (i_src1));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* shli1: shli $lit1, $src2, $dst */

SEM_PC
SEM_FN_NAME (i960base,shli1) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_notbit1.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = SLLSI (* FLD (i_src2), FLD (f_src1));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* shli2: shli $src1, $lit2, $dst */

SEM_PC
SEM_FN_NAME (i960base,shli2) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_notbit2.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = SLLSI (FLD (f_src2), * FLD (i_src1));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* shli3: shli $lit1, $lit2, $dst */

SEM_PC
SEM_FN_NAME (i960base,shli3) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_notbit3.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = SLLSI (FLD (f_src2), FLD (f_src1));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* shri: shri $src1, $src2, $dst */

SEM_PC
SEM_FN_NAME (i960base,shri) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_notbit.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = SRASI (* FLD (i_src2), * FLD (i_src1));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* shri1: shri $lit1, $src2, $dst */

SEM_PC
SEM_FN_NAME (i960base,shri1) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_notbit1.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = SRASI (* FLD (i_src2), FLD (f_src1));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* shri2: shri $src1, $lit2, $dst */

SEM_PC
SEM_FN_NAME (i960base,shri2) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_notbit2.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = SRASI (FLD (f_src2), * FLD (i_src1));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* shri3: shri $lit1, $lit2, $dst */

SEM_PC
SEM_FN_NAME (i960base,shri3) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_notbit3.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = SRASI (FLD (f_src2), FLD (f_src1));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* emul: emul $src1, $src2, $dst */

SEM_PC
SEM_FN_NAME (i960base,emul) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_emul.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

do {
  SI tmp_dregno;
  DI tmp_temp;
  tmp_temp = MULDI (ZEXTSIDI (* FLD (i_src1)), ZEXTSIDI (* FLD (i_src2)));
  tmp_dregno = FLD (f_srcdst);
  {
    SI opval = TRUNCDISI (tmp_temp);
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }
  {
    SI opval = TRUNCDISI (SRLDI (tmp_temp, 32));
    CPU (h_gr[((FLD (f_srcdst)) + (1))]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-const:-WI-1", 'x', opval);
  }
} while (0);

  return vpc;
#undef FLD
}

/* emul1: emul $lit1, $src2, $dst */

SEM_PC
SEM_FN_NAME (i960base,emul1) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_emul1.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

do {
  SI tmp_dregno;
  DI tmp_temp;
  tmp_temp = MULDI (ZEXTSIDI (FLD (f_src1)), ZEXTSIDI (* FLD (i_src2)));
  tmp_dregno = FLD (f_srcdst);
  {
    SI opval = TRUNCDISI (tmp_temp);
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }
  {
    SI opval = TRUNCDISI (SRLDI (tmp_temp, 32));
    CPU (h_gr[((FLD (f_srcdst)) + (1))]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-const:-WI-1", 'x', opval);
  }
} while (0);

  return vpc;
#undef FLD
}

/* emul2: emul $src1, $lit2, $dst */

SEM_PC
SEM_FN_NAME (i960base,emul2) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_emul2.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

do {
  SI tmp_dregno;
  DI tmp_temp;
  tmp_temp = MULDI (ZEXTSIDI (* FLD (i_src1)), ZEXTSIDI (FLD (f_src2)));
  tmp_dregno = FLD (f_srcdst);
  {
    SI opval = TRUNCDISI (tmp_temp);
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }
  {
    SI opval = TRUNCDISI (SRLDI (tmp_temp, 32));
    CPU (h_gr[((FLD (f_srcdst)) + (1))]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-const:-WI-1", 'x', opval);
  }
} while (0);

  return vpc;
#undef FLD
}

/* emul3: emul $lit1, $lit2, $dst */

SEM_PC
SEM_FN_NAME (i960base,emul3) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_emul3.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

do {
  SI tmp_dregno;
  DI tmp_temp;
  tmp_temp = MULDI (ZEXTSIDI (FLD (f_src1)), ZEXTSIDI (FLD (f_src2)));
  tmp_dregno = FLD (f_srcdst);
  {
    SI opval = TRUNCDISI (tmp_temp);
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }
  {
    SI opval = TRUNCDISI (SRLDI (tmp_temp, 32));
    CPU (h_gr[((FLD (f_srcdst)) + (1))]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-const:-WI-1", 'x', opval);
  }
} while (0);

  return vpc;
#undef FLD
}

/* mov: mov $src1, $dst */

SEM_PC
SEM_FN_NAME (i960base,mov) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_not2.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = * FLD (i_src1);
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* mov1: mov $lit1, $dst */

SEM_PC
SEM_FN_NAME (i960base,mov1) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_not3.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = FLD (f_src1);
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* movl: movl $src1, $dst */

SEM_PC
SEM_FN_NAME (i960base,movl) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_movl.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

do {
  SI tmp_sregno;
  SI tmp_dregno;
  tmp_dregno = FLD (f_srcdst);
  tmp_sregno = FLD (f_src1);
  {
    SI opval = * FLD (i_src1);
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }
  {
    SI opval = CPU (h_gr[((FLD (f_src1)) + (1))]);
    CPU (h_gr[((FLD (f_srcdst)) + (1))]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-const:-WI-1", 'x', opval);
  }
} while (0);

  return vpc;
#undef FLD
}

/* movl1: movl $lit1, $dst */

SEM_PC
SEM_FN_NAME (i960base,movl1) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_movl1.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

do {
  SI tmp_dregno;
  tmp_dregno = FLD (f_srcdst);
  {
    SI opval = FLD (f_src1);
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }
  {
    SI opval = 0;
    CPU (h_gr[((FLD (f_srcdst)) + (1))]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-const:-WI-1", 'x', opval);
  }
} while (0);

  return vpc;
#undef FLD
}

/* movt: movt $src1, $dst */

SEM_PC
SEM_FN_NAME (i960base,movt) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_movt.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

do {
  SI tmp_sregno;
  SI tmp_dregno;
  tmp_dregno = FLD (f_srcdst);
  tmp_sregno = FLD (f_src1);
  {
    SI opval = * FLD (i_src1);
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }
  {
    SI opval = CPU (h_gr[((FLD (f_src1)) + (1))]);
    CPU (h_gr[((FLD (f_srcdst)) + (1))]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-const:-WI-1", 'x', opval);
  }
  {
    SI opval = CPU (h_gr[((FLD (f_src1)) + (2))]);
    CPU (h_gr[((FLD (f_srcdst)) + (2))]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-const:-WI-2", 'x', opval);
  }
} while (0);

  return vpc;
#undef FLD
}

/* movt1: movt $lit1, $dst */

SEM_PC
SEM_FN_NAME (i960base,movt1) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_movt1.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

do {
  SI tmp_dregno;
  tmp_dregno = FLD (f_srcdst);
  {
    SI opval = FLD (f_src1);
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }
  {
    SI opval = 0;
    CPU (h_gr[((FLD (f_srcdst)) + (1))]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-const:-WI-1", 'x', opval);
  }
  {
    SI opval = 0;
    CPU (h_gr[((FLD (f_srcdst)) + (2))]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-const:-WI-2", 'x', opval);
  }
} while (0);

  return vpc;
#undef FLD
}

/* movq: movq $src1, $dst */

SEM_PC
SEM_FN_NAME (i960base,movq) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_movq.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

do {
  SI tmp_sregno;
  SI tmp_dregno;
  tmp_dregno = FLD (f_srcdst);
  tmp_sregno = FLD (f_src1);
  {
    SI opval = * FLD (i_src1);
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }
  {
    SI opval = CPU (h_gr[((FLD (f_src1)) + (1))]);
    CPU (h_gr[((FLD (f_srcdst)) + (1))]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-const:-WI-1", 'x', opval);
  }
  {
    SI opval = CPU (h_gr[((FLD (f_src1)) + (2))]);
    CPU (h_gr[((FLD (f_srcdst)) + (2))]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-const:-WI-2", 'x', opval);
  }
  {
    SI opval = CPU (h_gr[((FLD (f_src1)) + (3))]);
    CPU (h_gr[((FLD (f_srcdst)) + (3))]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-const:-WI-3", 'x', opval);
  }
} while (0);

  return vpc;
#undef FLD
}

/* movq1: movq $lit1, $dst */

SEM_PC
SEM_FN_NAME (i960base,movq1) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_movq1.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

do {
  SI tmp_dregno;
  tmp_dregno = FLD (f_srcdst);
  {
    SI opval = FLD (f_src1);
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }
  {
    SI opval = 0;
    CPU (h_gr[((FLD (f_srcdst)) + (1))]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-const:-WI-1", 'x', opval);
  }
  {
    SI opval = 0;
    CPU (h_gr[((FLD (f_srcdst)) + (2))]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-const:-WI-2", 'x', opval);
  }
  {
    SI opval = 0;
    CPU (h_gr[((FLD (f_srcdst)) + (3))]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-const:-WI-3", 'x', opval);
  }
} while (0);

  return vpc;
#undef FLD
}

/* modpc: modpc $src1, $src2, $dst */

SEM_PC
SEM_FN_NAME (i960base,modpc) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_modpc.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = * FLD (i_src2);
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* modac: modac $src1, $src2, $dst */

SEM_PC
SEM_FN_NAME (i960base,modac) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_modpc.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = * FLD (i_src2);
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* lda-offset: lda $offset, $dst */

SEM_PC
SEM_FN_NAME (i960base,lda_offset) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_lda_offset.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = FLD (f_offset);
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* lda-indirect-offset: lda $offset($abase), $dst */

SEM_PC
SEM_FN_NAME (i960base,lda_indirect_offset) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_lda_indirect_offset.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = ADDSI (FLD (f_offset), * FLD (i_abase));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* lda-indirect: lda ($abase), $dst */

SEM_PC
SEM_FN_NAME (i960base,lda_indirect) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_lda_indirect.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = * FLD (i_abase);
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* lda-indirect-index: lda ($abase)[$index*S$scale], $dst */

SEM_PC
SEM_FN_NAME (i960base,lda_indirect_index) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_lda_indirect_index.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = ADDSI (* FLD (i_abase), MULSI (* FLD (i_index), SLLSI (1, FLD (f_scale))));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* lda-disp: lda $optdisp, $dst */

SEM_PC
SEM_FN_NAME (i960base,lda_disp) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_lda_disp.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 8);

  {
    SI opval = FLD (f_optdisp);
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* lda-indirect-disp: lda $optdisp($abase), $dst */

SEM_PC
SEM_FN_NAME (i960base,lda_indirect_disp) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_lda_indirect_disp.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 8);

  {
    SI opval = ADDSI (FLD (f_optdisp), * FLD (i_abase));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* lda-index-disp: lda $optdisp[$index*S$scale], $dst */

SEM_PC
SEM_FN_NAME (i960base,lda_index_disp) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_lda_index_disp.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 8);

  {
    SI opval = ADDSI (FLD (f_optdisp), MULSI (* FLD (i_index), SLLSI (1, FLD (f_scale))));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* lda-indirect-index-disp: lda $optdisp($abase)[$index*S$scale], $dst */

SEM_PC
SEM_FN_NAME (i960base,lda_indirect_index_disp) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_lda_indirect_index_disp.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 8);

  {
    SI opval = ADDSI (FLD (f_optdisp), ADDSI (* FLD (i_abase), MULSI (* FLD (i_index), SLLSI (1, FLD (f_scale)))));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* ld-offset: ld $offset, $dst */

SEM_PC
SEM_FN_NAME (i960base,ld_offset) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_ld_offset.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = GETMEMSI (current_cpu, pc, FLD (f_offset));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* ld-indirect-offset: ld $offset($abase), $dst */

SEM_PC
SEM_FN_NAME (i960base,ld_indirect_offset) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_ld_indirect_offset.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = GETMEMSI (current_cpu, pc, ADDSI (FLD (f_offset), * FLD (i_abase)));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* ld-indirect: ld ($abase), $dst */

SEM_PC
SEM_FN_NAME (i960base,ld_indirect) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_ld_indirect.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = GETMEMSI (current_cpu, pc, * FLD (i_abase));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* ld-indirect-index: ld ($abase)[$index*S$scale], $dst */

SEM_PC
SEM_FN_NAME (i960base,ld_indirect_index) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_ld_indirect_index.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = GETMEMSI (current_cpu, pc, ADDSI (* FLD (i_abase), MULSI (* FLD (i_index), SLLSI (1, FLD (f_scale)))));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* ld-disp: ld $optdisp, $dst */

SEM_PC
SEM_FN_NAME (i960base,ld_disp) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_ld_disp.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 8);

  {
    SI opval = GETMEMSI (current_cpu, pc, FLD (f_optdisp));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* ld-indirect-disp: ld $optdisp($abase), $dst */

SEM_PC
SEM_FN_NAME (i960base,ld_indirect_disp) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_ld_indirect_disp.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 8);

  {
    SI opval = GETMEMSI (current_cpu, pc, ADDSI (FLD (f_optdisp), * FLD (i_abase)));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* ld-index-disp: ld $optdisp[$index*S$scale], $dst */

SEM_PC
SEM_FN_NAME (i960base,ld_index_disp) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_ld_index_disp.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 8);

  {
    SI opval = GETMEMSI (current_cpu, pc, ADDSI (FLD (f_optdisp), MULSI (* FLD (i_index), SLLSI (1, FLD (f_scale)))));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* ld-indirect-index-disp: ld $optdisp($abase)[$index*S$scale], $dst */

SEM_PC
SEM_FN_NAME (i960base,ld_indirect_index_disp) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_ld_indirect_index_disp.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 8);

  {
    SI opval = GETMEMSI (current_cpu, pc, ADDSI (FLD (f_optdisp), ADDSI (* FLD (i_abase), MULSI (* FLD (i_index), SLLSI (1, FLD (f_scale))))));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* ldob-offset: ldob $offset, $dst */

SEM_PC
SEM_FN_NAME (i960base,ldob_offset) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_ldob_offset.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = GETMEMUQI (current_cpu, pc, FLD (f_offset));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* ldob-indirect-offset: ldob $offset($abase), $dst */

SEM_PC
SEM_FN_NAME (i960base,ldob_indirect_offset) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_ldob_indirect_offset.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = GETMEMUQI (current_cpu, pc, ADDSI (FLD (f_offset), * FLD (i_abase)));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* ldob-indirect: ldob ($abase), $dst */

SEM_PC
SEM_FN_NAME (i960base,ldob_indirect) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_ldob_indirect.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = GETMEMUQI (current_cpu, pc, * FLD (i_abase));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* ldob-indirect-index: ldob ($abase)[$index*S$scale], $dst */

SEM_PC
SEM_FN_NAME (i960base,ldob_indirect_index) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_ldob_indirect_index.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = GETMEMUQI (current_cpu, pc, ADDSI (* FLD (i_abase), MULSI (* FLD (i_index), SLLSI (1, FLD (f_scale)))));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* ldob-disp: ldob $optdisp, $dst */

SEM_PC
SEM_FN_NAME (i960base,ldob_disp) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_ldob_disp.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 8);

  {
    SI opval = GETMEMUQI (current_cpu, pc, FLD (f_optdisp));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* ldob-indirect-disp: ldob $optdisp($abase), $dst */

SEM_PC
SEM_FN_NAME (i960base,ldob_indirect_disp) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_ldob_indirect_disp.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 8);

  {
    SI opval = GETMEMUQI (current_cpu, pc, ADDSI (FLD (f_optdisp), * FLD (i_abase)));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* ldob-index-disp: ldob $optdisp[$index*S$scale], $dst */

SEM_PC
SEM_FN_NAME (i960base,ldob_index_disp) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_ldob_index_disp.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 8);

  {
    SI opval = GETMEMUQI (current_cpu, pc, ADDSI (FLD (f_optdisp), MULSI (* FLD (i_index), SLLSI (1, FLD (f_scale)))));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* ldob-indirect-index-disp: ldob $optdisp($abase)[$index*S$scale], $dst */

SEM_PC
SEM_FN_NAME (i960base,ldob_indirect_index_disp) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_ldob_indirect_index_disp.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 8);

  {
    SI opval = GETMEMUQI (current_cpu, pc, ADDSI (FLD (f_optdisp), ADDSI (* FLD (i_abase), MULSI (* FLD (i_index), SLLSI (1, FLD (f_scale))))));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* ldos-offset: ldos $offset, $dst */

SEM_PC
SEM_FN_NAME (i960base,ldos_offset) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_ldos_offset.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = GETMEMUHI (current_cpu, pc, FLD (f_offset));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* ldos-indirect-offset: ldos $offset($abase), $dst */

SEM_PC
SEM_FN_NAME (i960base,ldos_indirect_offset) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_ldos_indirect_offset.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = GETMEMUHI (current_cpu, pc, ADDSI (FLD (f_offset), * FLD (i_abase)));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* ldos-indirect: ldos ($abase), $dst */

SEM_PC
SEM_FN_NAME (i960base,ldos_indirect) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_ldos_indirect.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = GETMEMUHI (current_cpu, pc, * FLD (i_abase));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* ldos-indirect-index: ldos ($abase)[$index*S$scale], $dst */

SEM_PC
SEM_FN_NAME (i960base,ldos_indirect_index) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_ldos_indirect_index.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = GETMEMUHI (current_cpu, pc, ADDSI (* FLD (i_abase), MULSI (* FLD (i_index), SLLSI (1, FLD (f_scale)))));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* ldos-disp: ldos $optdisp, $dst */

SEM_PC
SEM_FN_NAME (i960base,ldos_disp) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_ldos_disp.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 8);

  {
    SI opval = GETMEMUHI (current_cpu, pc, FLD (f_optdisp));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* ldos-indirect-disp: ldos $optdisp($abase), $dst */

SEM_PC
SEM_FN_NAME (i960base,ldos_indirect_disp) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_ldos_indirect_disp.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 8);

  {
    SI opval = GETMEMUHI (current_cpu, pc, ADDSI (FLD (f_optdisp), * FLD (i_abase)));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* ldos-index-disp: ldos $optdisp[$index*S$scale], $dst */

SEM_PC
SEM_FN_NAME (i960base,ldos_index_disp) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_ldos_index_disp.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 8);

  {
    SI opval = GETMEMUHI (current_cpu, pc, ADDSI (FLD (f_optdisp), MULSI (* FLD (i_index), SLLSI (1, FLD (f_scale)))));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* ldos-indirect-index-disp: ldos $optdisp($abase)[$index*S$scale], $dst */

SEM_PC
SEM_FN_NAME (i960base,ldos_indirect_index_disp) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_ldos_indirect_index_disp.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 8);

  {
    SI opval = GETMEMUHI (current_cpu, pc, ADDSI (FLD (f_optdisp), ADDSI (* FLD (i_abase), MULSI (* FLD (i_index), SLLSI (1, FLD (f_scale))))));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* ldib-offset: ldib $offset, $dst */

SEM_PC
SEM_FN_NAME (i960base,ldib_offset) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_ldib_offset.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = GETMEMQI (current_cpu, pc, FLD (f_offset));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* ldib-indirect-offset: ldib $offset($abase), $dst */

SEM_PC
SEM_FN_NAME (i960base,ldib_indirect_offset) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_ldib_indirect_offset.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = GETMEMQI (current_cpu, pc, ADDSI (FLD (f_offset), * FLD (i_abase)));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* ldib-indirect: ldib ($abase), $dst */

SEM_PC
SEM_FN_NAME (i960base,ldib_indirect) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_ldib_indirect.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = GETMEMQI (current_cpu, pc, * FLD (i_abase));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* ldib-indirect-index: ldib ($abase)[$index*S$scale], $dst */

SEM_PC
SEM_FN_NAME (i960base,ldib_indirect_index) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_ldib_indirect_index.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = GETMEMQI (current_cpu, pc, ADDSI (* FLD (i_abase), MULSI (* FLD (i_index), SLLSI (1, FLD (f_scale)))));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* ldib-disp: ldib $optdisp, $dst */

SEM_PC
SEM_FN_NAME (i960base,ldib_disp) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_ldib_disp.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 8);

  {
    SI opval = GETMEMQI (current_cpu, pc, FLD (f_optdisp));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* ldib-indirect-disp: ldib $optdisp($abase), $dst */

SEM_PC
SEM_FN_NAME (i960base,ldib_indirect_disp) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_ldib_indirect_disp.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 8);

  {
    SI opval = GETMEMQI (current_cpu, pc, ADDSI (FLD (f_optdisp), * FLD (i_abase)));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* ldib-index-disp: ldib $optdisp[$index*S$scale], $dst */

SEM_PC
SEM_FN_NAME (i960base,ldib_index_disp) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_ldib_index_disp.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 8);

  {
    SI opval = GETMEMQI (current_cpu, pc, ADDSI (FLD (f_optdisp), MULSI (* FLD (i_index), SLLSI (1, FLD (f_scale)))));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* ldib-indirect-index-disp: ldib $optdisp($abase)[$index*S$scale], $dst */

SEM_PC
SEM_FN_NAME (i960base,ldib_indirect_index_disp) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_ldib_indirect_index_disp.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 8);

  {
    SI opval = GETMEMQI (current_cpu, pc, ADDSI (FLD (f_optdisp), ADDSI (* FLD (i_abase), MULSI (* FLD (i_index), SLLSI (1, FLD (f_scale))))));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* ldis-offset: ldis $offset, $dst */

SEM_PC
SEM_FN_NAME (i960base,ldis_offset) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_ldis_offset.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = GETMEMHI (current_cpu, pc, FLD (f_offset));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* ldis-indirect-offset: ldis $offset($abase), $dst */

SEM_PC
SEM_FN_NAME (i960base,ldis_indirect_offset) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_ldis_indirect_offset.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = GETMEMHI (current_cpu, pc, ADDSI (FLD (f_offset), * FLD (i_abase)));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* ldis-indirect: ldis ($abase), $dst */

SEM_PC
SEM_FN_NAME (i960base,ldis_indirect) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_ldis_indirect.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = GETMEMHI (current_cpu, pc, * FLD (i_abase));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* ldis-indirect-index: ldis ($abase)[$index*S$scale], $dst */

SEM_PC
SEM_FN_NAME (i960base,ldis_indirect_index) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_ldis_indirect_index.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = GETMEMHI (current_cpu, pc, ADDSI (* FLD (i_abase), MULSI (* FLD (i_index), SLLSI (1, FLD (f_scale)))));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* ldis-disp: ldis $optdisp, $dst */

SEM_PC
SEM_FN_NAME (i960base,ldis_disp) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_ldis_disp.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 8);

  {
    SI opval = GETMEMHI (current_cpu, pc, FLD (f_optdisp));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* ldis-indirect-disp: ldis $optdisp($abase), $dst */

SEM_PC
SEM_FN_NAME (i960base,ldis_indirect_disp) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_ldis_indirect_disp.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 8);

  {
    SI opval = GETMEMHI (current_cpu, pc, ADDSI (FLD (f_optdisp), * FLD (i_abase)));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* ldis-index-disp: ldis $optdisp[$index*S$scale], $dst */

SEM_PC
SEM_FN_NAME (i960base,ldis_index_disp) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_ldis_index_disp.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 8);

  {
    SI opval = GETMEMHI (current_cpu, pc, ADDSI (FLD (f_optdisp), MULSI (* FLD (i_index), SLLSI (1, FLD (f_scale)))));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* ldis-indirect-index-disp: ldis $optdisp($abase)[$index*S$scale], $dst */

SEM_PC
SEM_FN_NAME (i960base,ldis_indirect_index_disp) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_ldis_indirect_index_disp.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 8);

  {
    SI opval = GETMEMHI (current_cpu, pc, ADDSI (FLD (f_optdisp), ADDSI (* FLD (i_abase), MULSI (* FLD (i_index), SLLSI (1, FLD (f_scale))))));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* ldl-offset: ldl $offset, $dst */

SEM_PC
SEM_FN_NAME (i960base,ldl_offset) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_ldl_offset.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

do {
  SI tmp_dregno;
  SI tmp_temp;
  tmp_dregno = FLD (f_srcdst);
  tmp_temp = FLD (f_offset);
  {
    SI opval = GETMEMSI (current_cpu, pc, tmp_temp);
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }
  {
    SI opval = GETMEMSI (current_cpu, pc, ADDSI (tmp_temp, 4));
    CPU (h_gr[((FLD (f_srcdst)) + (1))]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-const:-WI-1", 'x', opval);
  }
} while (0);

  return vpc;
#undef FLD
}

/* ldl-indirect-offset: ldl $offset($abase), $dst */

SEM_PC
SEM_FN_NAME (i960base,ldl_indirect_offset) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_ldl_indirect_offset.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

do {
  SI tmp_dregno;
  SI tmp_temp;
  tmp_dregno = FLD (f_srcdst);
  tmp_temp = ADDSI (FLD (f_offset), * FLD (i_abase));
  {
    SI opval = GETMEMSI (current_cpu, pc, tmp_temp);
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }
  {
    SI opval = GETMEMSI (current_cpu, pc, ADDSI (tmp_temp, 4));
    CPU (h_gr[((FLD (f_srcdst)) + (1))]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-const:-WI-1", 'x', opval);
  }
} while (0);

  return vpc;
#undef FLD
}

/* ldl-indirect: ldl ($abase), $dst */

SEM_PC
SEM_FN_NAME (i960base,ldl_indirect) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_ldl_indirect.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

do {
  SI tmp_dregno;
  SI tmp_temp;
  tmp_dregno = FLD (f_srcdst);
  tmp_temp = * FLD (i_abase);
  {
    SI opval = GETMEMSI (current_cpu, pc, tmp_temp);
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }
  {
    SI opval = GETMEMSI (current_cpu, pc, ADDSI (tmp_temp, 4));
    CPU (h_gr[((FLD (f_srcdst)) + (1))]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-const:-WI-1", 'x', opval);
  }
} while (0);

  return vpc;
#undef FLD
}

/* ldl-indirect-index: ldl ($abase)[$index*S$scale], $dst */

SEM_PC
SEM_FN_NAME (i960base,ldl_indirect_index) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_ldl_indirect_index.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

do {
  SI tmp_dregno;
  SI tmp_temp;
  tmp_dregno = FLD (f_srcdst);
  tmp_temp = ADDSI (* FLD (i_abase), MULSI (* FLD (i_index), SLLSI (1, FLD (f_scale))));
  {
    SI opval = GETMEMSI (current_cpu, pc, tmp_temp);
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }
  {
    SI opval = GETMEMSI (current_cpu, pc, ADDSI (tmp_temp, 4));
    CPU (h_gr[((FLD (f_srcdst)) + (1))]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-const:-WI-1", 'x', opval);
  }
} while (0);

  return vpc;
#undef FLD
}

/* ldl-disp: ldl $optdisp, $dst */

SEM_PC
SEM_FN_NAME (i960base,ldl_disp) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_ldl_disp.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 8);

do {
  SI tmp_dregno;
  SI tmp_temp;
  tmp_dregno = FLD (f_srcdst);
  tmp_temp = FLD (f_optdisp);
  {
    SI opval = GETMEMSI (current_cpu, pc, tmp_temp);
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }
  {
    SI opval = GETMEMSI (current_cpu, pc, ADDSI (tmp_temp, 4));
    CPU (h_gr[((FLD (f_srcdst)) + (1))]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-const:-WI-1", 'x', opval);
  }
} while (0);

  return vpc;
#undef FLD
}

/* ldl-indirect-disp: ldl $optdisp($abase), $dst */

SEM_PC
SEM_FN_NAME (i960base,ldl_indirect_disp) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_ldl_indirect_disp.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 8);

do {
  SI tmp_dregno;
  SI tmp_temp;
  tmp_dregno = FLD (f_srcdst);
  tmp_temp = ADDSI (FLD (f_optdisp), * FLD (i_abase));
  {
    SI opval = GETMEMSI (current_cpu, pc, tmp_temp);
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }
  {
    SI opval = GETMEMSI (current_cpu, pc, ADDSI (tmp_temp, 4));
    CPU (h_gr[((FLD (f_srcdst)) + (1))]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-const:-WI-1", 'x', opval);
  }
} while (0);

  return vpc;
#undef FLD
}

/* ldl-index-disp: ldl $optdisp[$index*S$scale], $dst */

SEM_PC
SEM_FN_NAME (i960base,ldl_index_disp) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_ldl_index_disp.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 8);

do {
  SI tmp_dregno;
  SI tmp_temp;
  tmp_dregno = FLD (f_srcdst);
  tmp_temp = ADDSI (FLD (f_optdisp), MULSI (* FLD (i_index), SLLSI (1, FLD (f_scale))));
  {
    SI opval = GETMEMSI (current_cpu, pc, tmp_temp);
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }
  {
    SI opval = GETMEMSI (current_cpu, pc, ADDSI (tmp_temp, 4));
    CPU (h_gr[((FLD (f_srcdst)) + (1))]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-const:-WI-1", 'x', opval);
  }
} while (0);

  return vpc;
#undef FLD
}

/* ldl-indirect-index-disp: ldl $optdisp($abase)[$index*S$scale], $dst */

SEM_PC
SEM_FN_NAME (i960base,ldl_indirect_index_disp) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_ldl_indirect_index_disp.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 8);

do {
  SI tmp_dregno;
  SI tmp_temp;
  tmp_dregno = FLD (f_srcdst);
  tmp_temp = ADDSI (FLD (f_optdisp), ADDSI (* FLD (i_abase), MULSI (* FLD (i_index), SLLSI (1, FLD (f_scale)))));
  {
    SI opval = GETMEMSI (current_cpu, pc, tmp_temp);
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }
  {
    SI opval = GETMEMSI (current_cpu, pc, ADDSI (tmp_temp, 4));
    CPU (h_gr[((FLD (f_srcdst)) + (1))]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-const:-WI-1", 'x', opval);
  }
} while (0);

  return vpc;
#undef FLD
}

/* ldt-offset: ldt $offset, $dst */

SEM_PC
SEM_FN_NAME (i960base,ldt_offset) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_ldt_offset.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

do {
  SI tmp_dregno;
  SI tmp_temp;
  tmp_dregno = FLD (f_srcdst);
  tmp_temp = FLD (f_offset);
  {
    SI opval = GETMEMSI (current_cpu, pc, tmp_temp);
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }
  {
    SI opval = GETMEMSI (current_cpu, pc, ADDSI (tmp_temp, 4));
    CPU (h_gr[((FLD (f_srcdst)) + (1))]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-const:-WI-1", 'x', opval);
  }
  {
    SI opval = GETMEMSI (current_cpu, pc, ADDSI (tmp_temp, 8));
    CPU (h_gr[((FLD (f_srcdst)) + (2))]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-const:-WI-2", 'x', opval);
  }
} while (0);

  return vpc;
#undef FLD
}

/* ldt-indirect-offset: ldt $offset($abase), $dst */

SEM_PC
SEM_FN_NAME (i960base,ldt_indirect_offset) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_ldt_indirect_offset.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

do {
  SI tmp_dregno;
  SI tmp_temp;
  tmp_dregno = FLD (f_srcdst);
  tmp_temp = ADDSI (FLD (f_offset), * FLD (i_abase));
  {
    SI opval = GETMEMSI (current_cpu, pc, tmp_temp);
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }
  {
    SI opval = GETMEMSI (current_cpu, pc, ADDSI (tmp_temp, 4));
    CPU (h_gr[((FLD (f_srcdst)) + (1))]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-const:-WI-1", 'x', opval);
  }
  {
    SI opval = GETMEMSI (current_cpu, pc, ADDSI (tmp_temp, 8));
    CPU (h_gr[((FLD (f_srcdst)) + (2))]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-const:-WI-2", 'x', opval);
  }
} while (0);

  return vpc;
#undef FLD
}

/* ldt-indirect: ldt ($abase), $dst */

SEM_PC
SEM_FN_NAME (i960base,ldt_indirect) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_ldt_indirect.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

do {
  SI tmp_dregno;
  SI tmp_temp;
  tmp_dregno = FLD (f_srcdst);
  tmp_temp = * FLD (i_abase);
  {
    SI opval = GETMEMSI (current_cpu, pc, tmp_temp);
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }
  {
    SI opval = GETMEMSI (current_cpu, pc, ADDSI (tmp_temp, 4));
    CPU (h_gr[((FLD (f_srcdst)) + (1))]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-const:-WI-1", 'x', opval);
  }
  {
    SI opval = GETMEMSI (current_cpu, pc, ADDSI (tmp_temp, 8));
    CPU (h_gr[((FLD (f_srcdst)) + (2))]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-const:-WI-2", 'x', opval);
  }
} while (0);

  return vpc;
#undef FLD
}

/* ldt-indirect-index: ldt ($abase)[$index*S$scale], $dst */

SEM_PC
SEM_FN_NAME (i960base,ldt_indirect_index) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_ldt_indirect_index.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

do {
  SI tmp_dregno;
  SI tmp_temp;
  tmp_dregno = FLD (f_srcdst);
  tmp_temp = ADDSI (* FLD (i_abase), MULSI (* FLD (i_index), SLLSI (1, FLD (f_scale))));
  {
    SI opval = GETMEMSI (current_cpu, pc, tmp_temp);
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }
  {
    SI opval = GETMEMSI (current_cpu, pc, ADDSI (tmp_temp, 4));
    CPU (h_gr[((FLD (f_srcdst)) + (1))]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-const:-WI-1", 'x', opval);
  }
  {
    SI opval = GETMEMSI (current_cpu, pc, ADDSI (tmp_temp, 8));
    CPU (h_gr[((FLD (f_srcdst)) + (2))]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-const:-WI-2", 'x', opval);
  }
} while (0);

  return vpc;
#undef FLD
}

/* ldt-disp: ldt $optdisp, $dst */

SEM_PC
SEM_FN_NAME (i960base,ldt_disp) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_ldt_disp.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 8);

do {
  SI tmp_dregno;
  SI tmp_temp;
  tmp_dregno = FLD (f_srcdst);
  tmp_temp = FLD (f_optdisp);
  {
    SI opval = GETMEMSI (current_cpu, pc, tmp_temp);
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }
  {
    SI opval = GETMEMSI (current_cpu, pc, ADDSI (tmp_temp, 4));
    CPU (h_gr[((FLD (f_srcdst)) + (1))]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-const:-WI-1", 'x', opval);
  }
  {
    SI opval = GETMEMSI (current_cpu, pc, ADDSI (tmp_temp, 8));
    CPU (h_gr[((FLD (f_srcdst)) + (2))]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-const:-WI-2", 'x', opval);
  }
} while (0);

  return vpc;
#undef FLD
}

/* ldt-indirect-disp: ldt $optdisp($abase), $dst */

SEM_PC
SEM_FN_NAME (i960base,ldt_indirect_disp) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_ldt_indirect_disp.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 8);

do {
  SI tmp_dregno;
  SI tmp_temp;
  tmp_dregno = FLD (f_srcdst);
  tmp_temp = ADDSI (FLD (f_optdisp), * FLD (i_abase));
  {
    SI opval = GETMEMSI (current_cpu, pc, tmp_temp);
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }
  {
    SI opval = GETMEMSI (current_cpu, pc, ADDSI (tmp_temp, 4));
    CPU (h_gr[((FLD (f_srcdst)) + (1))]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-const:-WI-1", 'x', opval);
  }
  {
    SI opval = GETMEMSI (current_cpu, pc, ADDSI (tmp_temp, 8));
    CPU (h_gr[((FLD (f_srcdst)) + (2))]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-const:-WI-2", 'x', opval);
  }
} while (0);

  return vpc;
#undef FLD
}

/* ldt-index-disp: ldt $optdisp[$index*S$scale], $dst */

SEM_PC
SEM_FN_NAME (i960base,ldt_index_disp) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_ldt_index_disp.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 8);

do {
  SI tmp_dregno;
  SI tmp_temp;
  tmp_dregno = FLD (f_srcdst);
  tmp_temp = ADDSI (FLD (f_optdisp), MULSI (* FLD (i_index), SLLSI (1, FLD (f_scale))));
  {
    SI opval = GETMEMSI (current_cpu, pc, tmp_temp);
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }
  {
    SI opval = GETMEMSI (current_cpu, pc, ADDSI (tmp_temp, 4));
    CPU (h_gr[((FLD (f_srcdst)) + (1))]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-const:-WI-1", 'x', opval);
  }
  {
    SI opval = GETMEMSI (current_cpu, pc, ADDSI (tmp_temp, 8));
    CPU (h_gr[((FLD (f_srcdst)) + (2))]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-const:-WI-2", 'x', opval);
  }
} while (0);

  return vpc;
#undef FLD
}

/* ldt-indirect-index-disp: ldt $optdisp($abase)[$index*S$scale], $dst */

SEM_PC
SEM_FN_NAME (i960base,ldt_indirect_index_disp) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_ldt_indirect_index_disp.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 8);

do {
  SI tmp_dregno;
  SI tmp_temp;
  tmp_dregno = FLD (f_srcdst);
  tmp_temp = ADDSI (FLD (f_optdisp), ADDSI (* FLD (i_abase), MULSI (* FLD (i_index), SLLSI (1, FLD (f_scale)))));
  {
    SI opval = GETMEMSI (current_cpu, pc, tmp_temp);
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }
  {
    SI opval = GETMEMSI (current_cpu, pc, ADDSI (tmp_temp, 4));
    CPU (h_gr[((FLD (f_srcdst)) + (1))]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-const:-WI-1", 'x', opval);
  }
  {
    SI opval = GETMEMSI (current_cpu, pc, ADDSI (tmp_temp, 8));
    CPU (h_gr[((FLD (f_srcdst)) + (2))]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-const:-WI-2", 'x', opval);
  }
} while (0);

  return vpc;
#undef FLD
}

/* ldq-offset: ldq $offset, $dst */

SEM_PC
SEM_FN_NAME (i960base,ldq_offset) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_ldq_offset.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

do {
  SI tmp_dregno;
  SI tmp_temp;
  tmp_dregno = FLD (f_srcdst);
  tmp_temp = FLD (f_offset);
  {
    SI opval = GETMEMSI (current_cpu, pc, tmp_temp);
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }
  {
    SI opval = GETMEMSI (current_cpu, pc, ADDSI (tmp_temp, 4));
    CPU (h_gr[((FLD (f_srcdst)) + (1))]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-const:-WI-1", 'x', opval);
  }
  {
    SI opval = GETMEMSI (current_cpu, pc, ADDSI (tmp_temp, 8));
    CPU (h_gr[((FLD (f_srcdst)) + (2))]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-const:-WI-2", 'x', opval);
  }
  {
    SI opval = GETMEMSI (current_cpu, pc, ADDSI (tmp_temp, 12));
    CPU (h_gr[((FLD (f_srcdst)) + (3))]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-const:-WI-3", 'x', opval);
  }
} while (0);

  return vpc;
#undef FLD
}

/* ldq-indirect-offset: ldq $offset($abase), $dst */

SEM_PC
SEM_FN_NAME (i960base,ldq_indirect_offset) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_ldq_indirect_offset.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

do {
  SI tmp_dregno;
  SI tmp_temp;
  tmp_dregno = FLD (f_srcdst);
  tmp_temp = ADDSI (FLD (f_offset), * FLD (i_abase));
  {
    SI opval = GETMEMSI (current_cpu, pc, tmp_temp);
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }
  {
    SI opval = GETMEMSI (current_cpu, pc, ADDSI (tmp_temp, 4));
    CPU (h_gr[((FLD (f_srcdst)) + (1))]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-const:-WI-1", 'x', opval);
  }
  {
    SI opval = GETMEMSI (current_cpu, pc, ADDSI (tmp_temp, 8));
    CPU (h_gr[((FLD (f_srcdst)) + (2))]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-const:-WI-2", 'x', opval);
  }
  {
    SI opval = GETMEMSI (current_cpu, pc, ADDSI (tmp_temp, 12));
    CPU (h_gr[((FLD (f_srcdst)) + (3))]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-const:-WI-3", 'x', opval);
  }
} while (0);

  return vpc;
#undef FLD
}

/* ldq-indirect: ldq ($abase), $dst */

SEM_PC
SEM_FN_NAME (i960base,ldq_indirect) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_ldq_indirect.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

do {
  SI tmp_dregno;
  SI tmp_temp;
  tmp_dregno = FLD (f_srcdst);
  tmp_temp = * FLD (i_abase);
  {
    SI opval = GETMEMSI (current_cpu, pc, tmp_temp);
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }
  {
    SI opval = GETMEMSI (current_cpu, pc, ADDSI (tmp_temp, 4));
    CPU (h_gr[((FLD (f_srcdst)) + (1))]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-const:-WI-1", 'x', opval);
  }
  {
    SI opval = GETMEMSI (current_cpu, pc, ADDSI (tmp_temp, 8));
    CPU (h_gr[((FLD (f_srcdst)) + (2))]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-const:-WI-2", 'x', opval);
  }
  {
    SI opval = GETMEMSI (current_cpu, pc, ADDSI (tmp_temp, 12));
    CPU (h_gr[((FLD (f_srcdst)) + (3))]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-const:-WI-3", 'x', opval);
  }
} while (0);

  return vpc;
#undef FLD
}

/* ldq-indirect-index: ldq ($abase)[$index*S$scale], $dst */

SEM_PC
SEM_FN_NAME (i960base,ldq_indirect_index) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_ldq_indirect_index.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

do {
  SI tmp_dregno;
  SI tmp_temp;
  tmp_dregno = FLD (f_srcdst);
  tmp_temp = ADDSI (* FLD (i_abase), MULSI (* FLD (i_index), SLLSI (1, FLD (f_scale))));
  {
    SI opval = GETMEMSI (current_cpu, pc, tmp_temp);
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }
  {
    SI opval = GETMEMSI (current_cpu, pc, ADDSI (tmp_temp, 4));
    CPU (h_gr[((FLD (f_srcdst)) + (1))]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-const:-WI-1", 'x', opval);
  }
  {
    SI opval = GETMEMSI (current_cpu, pc, ADDSI (tmp_temp, 8));
    CPU (h_gr[((FLD (f_srcdst)) + (2))]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-const:-WI-2", 'x', opval);
  }
  {
    SI opval = GETMEMSI (current_cpu, pc, ADDSI (tmp_temp, 12));
    CPU (h_gr[((FLD (f_srcdst)) + (3))]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-const:-WI-3", 'x', opval);
  }
} while (0);

  return vpc;
#undef FLD
}

/* ldq-disp: ldq $optdisp, $dst */

SEM_PC
SEM_FN_NAME (i960base,ldq_disp) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_ldq_disp.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 8);

do {
  SI tmp_dregno;
  SI tmp_temp;
  tmp_dregno = FLD (f_srcdst);
  tmp_temp = FLD (f_optdisp);
  {
    SI opval = GETMEMSI (current_cpu, pc, tmp_temp);
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }
  {
    SI opval = GETMEMSI (current_cpu, pc, ADDSI (tmp_temp, 4));
    CPU (h_gr[((FLD (f_srcdst)) + (1))]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-const:-WI-1", 'x', opval);
  }
  {
    SI opval = GETMEMSI (current_cpu, pc, ADDSI (tmp_temp, 8));
    CPU (h_gr[((FLD (f_srcdst)) + (2))]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-const:-WI-2", 'x', opval);
  }
  {
    SI opval = GETMEMSI (current_cpu, pc, ADDSI (tmp_temp, 12));
    CPU (h_gr[((FLD (f_srcdst)) + (3))]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-const:-WI-3", 'x', opval);
  }
} while (0);

  return vpc;
#undef FLD
}

/* ldq-indirect-disp: ldq $optdisp($abase), $dst */

SEM_PC
SEM_FN_NAME (i960base,ldq_indirect_disp) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_ldq_indirect_disp.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 8);

do {
  SI tmp_dregno;
  SI tmp_temp;
  tmp_dregno = FLD (f_srcdst);
  tmp_temp = ADDSI (FLD (f_optdisp), * FLD (i_abase));
  {
    SI opval = GETMEMSI (current_cpu, pc, tmp_temp);
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }
  {
    SI opval = GETMEMSI (current_cpu, pc, ADDSI (tmp_temp, 4));
    CPU (h_gr[((FLD (f_srcdst)) + (1))]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-const:-WI-1", 'x', opval);
  }
  {
    SI opval = GETMEMSI (current_cpu, pc, ADDSI (tmp_temp, 8));
    CPU (h_gr[((FLD (f_srcdst)) + (2))]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-const:-WI-2", 'x', opval);
  }
  {
    SI opval = GETMEMSI (current_cpu, pc, ADDSI (tmp_temp, 12));
    CPU (h_gr[((FLD (f_srcdst)) + (3))]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-const:-WI-3", 'x', opval);
  }
} while (0);

  return vpc;
#undef FLD
}

/* ldq-index-disp: ldq $optdisp[$index*S$scale], $dst */

SEM_PC
SEM_FN_NAME (i960base,ldq_index_disp) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_ldq_index_disp.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 8);

do {
  SI tmp_dregno;
  SI tmp_temp;
  tmp_dregno = FLD (f_srcdst);
  tmp_temp = ADDSI (FLD (f_optdisp), MULSI (* FLD (i_index), SLLSI (1, FLD (f_scale))));
  {
    SI opval = GETMEMSI (current_cpu, pc, tmp_temp);
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }
  {
    SI opval = GETMEMSI (current_cpu, pc, ADDSI (tmp_temp, 4));
    CPU (h_gr[((FLD (f_srcdst)) + (1))]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-const:-WI-1", 'x', opval);
  }
  {
    SI opval = GETMEMSI (current_cpu, pc, ADDSI (tmp_temp, 8));
    CPU (h_gr[((FLD (f_srcdst)) + (2))]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-const:-WI-2", 'x', opval);
  }
  {
    SI opval = GETMEMSI (current_cpu, pc, ADDSI (tmp_temp, 12));
    CPU (h_gr[((FLD (f_srcdst)) + (3))]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-const:-WI-3", 'x', opval);
  }
} while (0);

  return vpc;
#undef FLD
}

/* ldq-indirect-index-disp: ldq $optdisp($abase)[$index*S$scale], $dst */

SEM_PC
SEM_FN_NAME (i960base,ldq_indirect_index_disp) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_ldq_indirect_index_disp.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 8);

do {
  SI tmp_dregno;
  SI tmp_temp;
  tmp_dregno = FLD (f_srcdst);
  tmp_temp = ADDSI (FLD (f_optdisp), ADDSI (* FLD (i_abase), MULSI (* FLD (i_index), SLLSI (1, FLD (f_scale)))));
  {
    SI opval = GETMEMSI (current_cpu, pc, tmp_temp);
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }
  {
    SI opval = GETMEMSI (current_cpu, pc, ADDSI (tmp_temp, 4));
    CPU (h_gr[((FLD (f_srcdst)) + (1))]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-const:-WI-1", 'x', opval);
  }
  {
    SI opval = GETMEMSI (current_cpu, pc, ADDSI (tmp_temp, 8));
    CPU (h_gr[((FLD (f_srcdst)) + (2))]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-const:-WI-2", 'x', opval);
  }
  {
    SI opval = GETMEMSI (current_cpu, pc, ADDSI (tmp_temp, 12));
    CPU (h_gr[((FLD (f_srcdst)) + (3))]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-const:-WI-3", 'x', opval);
  }
} while (0);

  return vpc;
#undef FLD
}

/* st-offset: st $st_src, $offset */

SEM_PC
SEM_FN_NAME (i960base,st_offset) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_st_offset.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = * FLD (i_st_src);
    SETMEMSI (current_cpu, pc, FLD (f_offset), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* st-indirect-offset: st $st_src, $offset($abase) */

SEM_PC
SEM_FN_NAME (i960base,st_indirect_offset) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_st_indirect_offset.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = * FLD (i_st_src);
    SETMEMSI (current_cpu, pc, ADDSI (FLD (f_offset), * FLD (i_abase)), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* st-indirect: st $st_src, ($abase) */

SEM_PC
SEM_FN_NAME (i960base,st_indirect) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_st_indirect.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = * FLD (i_st_src);
    SETMEMSI (current_cpu, pc, * FLD (i_abase), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* st-indirect-index: st $st_src, ($abase)[$index*S$scale] */

SEM_PC
SEM_FN_NAME (i960base,st_indirect_index) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_st_indirect_index.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = * FLD (i_st_src);
    SETMEMSI (current_cpu, pc, ADDSI (* FLD (i_abase), MULSI (* FLD (i_index), SLLSI (1, FLD (f_scale)))), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* st-disp: st $st_src, $optdisp */

SEM_PC
SEM_FN_NAME (i960base,st_disp) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_st_disp.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 8);

  {
    SI opval = * FLD (i_st_src);
    SETMEMSI (current_cpu, pc, FLD (f_optdisp), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* st-indirect-disp: st $st_src, $optdisp($abase) */

SEM_PC
SEM_FN_NAME (i960base,st_indirect_disp) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_st_indirect_disp.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 8);

  {
    SI opval = * FLD (i_st_src);
    SETMEMSI (current_cpu, pc, ADDSI (FLD (f_optdisp), * FLD (i_abase)), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* st-index-disp: st $st_src, $optdisp[$index*S$scale */

SEM_PC
SEM_FN_NAME (i960base,st_index_disp) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_st_index_disp.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 8);

  {
    SI opval = * FLD (i_st_src);
    SETMEMSI (current_cpu, pc, ADDSI (FLD (f_optdisp), MULSI (* FLD (i_index), SLLSI (1, FLD (f_scale)))), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* st-indirect-index-disp: st $st_src, $optdisp($abase)[$index*S$scale] */

SEM_PC
SEM_FN_NAME (i960base,st_indirect_index_disp) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_st_indirect_index_disp.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 8);

  {
    SI opval = * FLD (i_st_src);
    SETMEMSI (current_cpu, pc, ADDSI (FLD (f_optdisp), ADDSI (* FLD (i_abase), MULSI (* FLD (i_index), SLLSI (1, FLD (f_scale))))), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* stob-offset: stob $st_src, $offset */

SEM_PC
SEM_FN_NAME (i960base,stob_offset) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_stob_offset.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    QI opval = * FLD (i_st_src);
    SETMEMQI (current_cpu, pc, FLD (f_offset), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* stob-indirect-offset: stob $st_src, $offset($abase) */

SEM_PC
SEM_FN_NAME (i960base,stob_indirect_offset) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_stob_indirect_offset.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    QI opval = * FLD (i_st_src);
    SETMEMQI (current_cpu, pc, ADDSI (FLD (f_offset), * FLD (i_abase)), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* stob-indirect: stob $st_src, ($abase) */

SEM_PC
SEM_FN_NAME (i960base,stob_indirect) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_stob_indirect.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    QI opval = * FLD (i_st_src);
    SETMEMQI (current_cpu, pc, * FLD (i_abase), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* stob-indirect-index: stob $st_src, ($abase)[$index*S$scale] */

SEM_PC
SEM_FN_NAME (i960base,stob_indirect_index) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_stob_indirect_index.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    QI opval = * FLD (i_st_src);
    SETMEMQI (current_cpu, pc, ADDSI (* FLD (i_abase), MULSI (* FLD (i_index), SLLSI (1, FLD (f_scale)))), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* stob-disp: stob $st_src, $optdisp */

SEM_PC
SEM_FN_NAME (i960base,stob_disp) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_stob_disp.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 8);

  {
    QI opval = * FLD (i_st_src);
    SETMEMQI (current_cpu, pc, FLD (f_optdisp), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* stob-indirect-disp: stob $st_src, $optdisp($abase) */

SEM_PC
SEM_FN_NAME (i960base,stob_indirect_disp) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_stob_indirect_disp.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 8);

  {
    QI opval = * FLD (i_st_src);
    SETMEMQI (current_cpu, pc, ADDSI (FLD (f_optdisp), * FLD (i_abase)), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* stob-index-disp: stob $st_src, $optdisp[$index*S$scale */

SEM_PC
SEM_FN_NAME (i960base,stob_index_disp) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_stob_index_disp.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 8);

  {
    QI opval = * FLD (i_st_src);
    SETMEMQI (current_cpu, pc, ADDSI (FLD (f_optdisp), MULSI (* FLD (i_index), SLLSI (1, FLD (f_scale)))), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* stob-indirect-index-disp: stob $st_src, $optdisp($abase)[$index*S$scale] */

SEM_PC
SEM_FN_NAME (i960base,stob_indirect_index_disp) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_stob_indirect_index_disp.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 8);

  {
    QI opval = * FLD (i_st_src);
    SETMEMQI (current_cpu, pc, ADDSI (FLD (f_optdisp), ADDSI (* FLD (i_abase), MULSI (* FLD (i_index), SLLSI (1, FLD (f_scale))))), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* stos-offset: stos $st_src, $offset */

SEM_PC
SEM_FN_NAME (i960base,stos_offset) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_stos_offset.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    HI opval = * FLD (i_st_src);
    SETMEMHI (current_cpu, pc, FLD (f_offset), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* stos-indirect-offset: stos $st_src, $offset($abase) */

SEM_PC
SEM_FN_NAME (i960base,stos_indirect_offset) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_stos_indirect_offset.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    HI opval = * FLD (i_st_src);
    SETMEMHI (current_cpu, pc, ADDSI (FLD (f_offset), * FLD (i_abase)), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* stos-indirect: stos $st_src, ($abase) */

SEM_PC
SEM_FN_NAME (i960base,stos_indirect) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_stos_indirect.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    HI opval = * FLD (i_st_src);
    SETMEMHI (current_cpu, pc, * FLD (i_abase), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* stos-indirect-index: stos $st_src, ($abase)[$index*S$scale] */

SEM_PC
SEM_FN_NAME (i960base,stos_indirect_index) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_stos_indirect_index.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    HI opval = * FLD (i_st_src);
    SETMEMHI (current_cpu, pc, ADDSI (* FLD (i_abase), MULSI (* FLD (i_index), SLLSI (1, FLD (f_scale)))), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* stos-disp: stos $st_src, $optdisp */

SEM_PC
SEM_FN_NAME (i960base,stos_disp) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_stos_disp.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 8);

  {
    HI opval = * FLD (i_st_src);
    SETMEMHI (current_cpu, pc, FLD (f_optdisp), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* stos-indirect-disp: stos $st_src, $optdisp($abase) */

SEM_PC
SEM_FN_NAME (i960base,stos_indirect_disp) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_stos_indirect_disp.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 8);

  {
    HI opval = * FLD (i_st_src);
    SETMEMHI (current_cpu, pc, ADDSI (FLD (f_optdisp), * FLD (i_abase)), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* stos-index-disp: stos $st_src, $optdisp[$index*S$scale */

SEM_PC
SEM_FN_NAME (i960base,stos_index_disp) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_stos_index_disp.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 8);

  {
    HI opval = * FLD (i_st_src);
    SETMEMHI (current_cpu, pc, ADDSI (FLD (f_optdisp), MULSI (* FLD (i_index), SLLSI (1, FLD (f_scale)))), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* stos-indirect-index-disp: stos $st_src, $optdisp($abase)[$index*S$scale] */

SEM_PC
SEM_FN_NAME (i960base,stos_indirect_index_disp) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_stos_indirect_index_disp.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 8);

  {
    HI opval = * FLD (i_st_src);
    SETMEMHI (current_cpu, pc, ADDSI (FLD (f_optdisp), ADDSI (* FLD (i_abase), MULSI (* FLD (i_index), SLLSI (1, FLD (f_scale))))), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* stl-offset: stl $st_src, $offset */

SEM_PC
SEM_FN_NAME (i960base,stl_offset) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_stl_offset.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

do {
  SI tmp_sregno;
  tmp_sregno = FLD (f_srcdst);
  {
    SI opval = * FLD (i_st_src);
    SETMEMSI (current_cpu, pc, FLD (f_offset), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
  {
    SI opval = CPU (h_gr[((FLD (f_srcdst)) + (1))]);
    SETMEMSI (current_cpu, pc, ADDSI (FLD (f_offset), 4), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
} while (0);

  return vpc;
#undef FLD
}

/* stl-indirect-offset: stl $st_src, $offset($abase) */

SEM_PC
SEM_FN_NAME (i960base,stl_indirect_offset) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_stl_indirect_offset.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

do {
  SI tmp_sregno;
  tmp_sregno = FLD (f_srcdst);
  {
    SI opval = * FLD (i_st_src);
    SETMEMSI (current_cpu, pc, ADDSI (FLD (f_offset), * FLD (i_abase)), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
  {
    SI opval = CPU (h_gr[((FLD (f_srcdst)) + (1))]);
    SETMEMSI (current_cpu, pc, ADDSI (ADDSI (FLD (f_offset), * FLD (i_abase)), 4), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
} while (0);

  return vpc;
#undef FLD
}

/* stl-indirect: stl $st_src, ($abase) */

SEM_PC
SEM_FN_NAME (i960base,stl_indirect) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_stl_indirect.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

do {
  SI tmp_sregno;
  tmp_sregno = FLD (f_srcdst);
  {
    SI opval = * FLD (i_st_src);
    SETMEMSI (current_cpu, pc, * FLD (i_abase), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
  {
    SI opval = CPU (h_gr[((FLD (f_srcdst)) + (1))]);
    SETMEMSI (current_cpu, pc, ADDSI (* FLD (i_abase), 4), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
} while (0);

  return vpc;
#undef FLD
}

/* stl-indirect-index: stl $st_src, ($abase)[$index*S$scale] */

SEM_PC
SEM_FN_NAME (i960base,stl_indirect_index) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_stl_indirect_index.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

do {
  SI tmp_sregno;
  tmp_sregno = FLD (f_srcdst);
  {
    SI opval = * FLD (i_st_src);
    SETMEMSI (current_cpu, pc, ADDSI (* FLD (i_abase), MULSI (* FLD (i_index), SLLSI (1, FLD (f_scale)))), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
  {
    SI opval = CPU (h_gr[((FLD (f_srcdst)) + (1))]);
    SETMEMSI (current_cpu, pc, ADDSI (ADDSI (* FLD (i_abase), MULSI (* FLD (i_index), SLLSI (1, FLD (f_scale)))), 4), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
} while (0);

  return vpc;
#undef FLD
}

/* stl-disp: stl $st_src, $optdisp */

SEM_PC
SEM_FN_NAME (i960base,stl_disp) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_stl_disp.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 8);

do {
  SI tmp_sregno;
  tmp_sregno = FLD (f_srcdst);
  {
    SI opval = * FLD (i_st_src);
    SETMEMSI (current_cpu, pc, FLD (f_optdisp), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
  {
    SI opval = CPU (h_gr[((FLD (f_srcdst)) + (1))]);
    SETMEMSI (current_cpu, pc, ADDSI (FLD (f_optdisp), 4), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
} while (0);

  return vpc;
#undef FLD
}

/* stl-indirect-disp: stl $st_src, $optdisp($abase) */

SEM_PC
SEM_FN_NAME (i960base,stl_indirect_disp) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_stl_indirect_disp.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 8);

do {
  SI tmp_sregno;
  tmp_sregno = FLD (f_srcdst);
  {
    SI opval = * FLD (i_st_src);
    SETMEMSI (current_cpu, pc, ADDSI (FLD (f_optdisp), * FLD (i_abase)), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
  {
    SI opval = CPU (h_gr[((FLD (f_srcdst)) + (1))]);
    SETMEMSI (current_cpu, pc, ADDSI (ADDSI (FLD (f_optdisp), * FLD (i_abase)), 4), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
} while (0);

  return vpc;
#undef FLD
}

/* stl-index-disp: stl $st_src, $optdisp[$index*S$scale */

SEM_PC
SEM_FN_NAME (i960base,stl_index_disp) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_stl_index_disp.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 8);

do {
  SI tmp_sregno;
  tmp_sregno = FLD (f_srcdst);
  {
    SI opval = * FLD (i_st_src);
    SETMEMSI (current_cpu, pc, ADDSI (FLD (f_optdisp), MULSI (* FLD (i_index), SLLSI (1, FLD (f_scale)))), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
  {
    SI opval = CPU (h_gr[((FLD (f_srcdst)) + (1))]);
    SETMEMSI (current_cpu, pc, ADDSI (ADDSI (FLD (f_optdisp), MULSI (* FLD (i_index), SLLSI (1, FLD (f_scale)))), 4), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
} while (0);

  return vpc;
#undef FLD
}

/* stl-indirect-index-disp: stl $st_src, $optdisp($abase)[$index*S$scale] */

SEM_PC
SEM_FN_NAME (i960base,stl_indirect_index_disp) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_stl_indirect_index_disp.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 8);

do {
  SI tmp_sregno;
  tmp_sregno = FLD (f_srcdst);
  {
    SI opval = * FLD (i_st_src);
    SETMEMSI (current_cpu, pc, ADDSI (FLD (f_optdisp), ADDSI (* FLD (i_abase), MULSI (* FLD (i_index), SLLSI (1, FLD (f_scale))))), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
  {
    SI opval = CPU (h_gr[((FLD (f_srcdst)) + (1))]);
    SETMEMSI (current_cpu, pc, ADDSI (ADDSI (FLD (f_optdisp), ADDSI (* FLD (i_abase), MULSI (* FLD (i_index), SLLSI (1, FLD (f_scale))))), 4), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
} while (0);

  return vpc;
#undef FLD
}

/* stt-offset: stt $st_src, $offset */

SEM_PC
SEM_FN_NAME (i960base,stt_offset) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_stt_offset.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

do {
  SI tmp_sregno;
  tmp_sregno = FLD (f_srcdst);
  {
    SI opval = * FLD (i_st_src);
    SETMEMSI (current_cpu, pc, FLD (f_offset), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
  {
    SI opval = CPU (h_gr[((FLD (f_srcdst)) + (1))]);
    SETMEMSI (current_cpu, pc, ADDSI (FLD (f_offset), 4), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
  {
    SI opval = CPU (h_gr[((FLD (f_srcdst)) + (2))]);
    SETMEMSI (current_cpu, pc, ADDSI (FLD (f_offset), 8), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
} while (0);

  return vpc;
#undef FLD
}

/* stt-indirect-offset: stt $st_src, $offset($abase) */

SEM_PC
SEM_FN_NAME (i960base,stt_indirect_offset) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_stt_indirect_offset.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

do {
  SI tmp_sregno;
  tmp_sregno = FLD (f_srcdst);
  {
    SI opval = * FLD (i_st_src);
    SETMEMSI (current_cpu, pc, ADDSI (FLD (f_offset), * FLD (i_abase)), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
  {
    SI opval = CPU (h_gr[((FLD (f_srcdst)) + (1))]);
    SETMEMSI (current_cpu, pc, ADDSI (ADDSI (FLD (f_offset), * FLD (i_abase)), 4), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
  {
    SI opval = CPU (h_gr[((FLD (f_srcdst)) + (2))]);
    SETMEMSI (current_cpu, pc, ADDSI (ADDSI (FLD (f_offset), * FLD (i_abase)), 8), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
} while (0);

  return vpc;
#undef FLD
}

/* stt-indirect: stt $st_src, ($abase) */

SEM_PC
SEM_FN_NAME (i960base,stt_indirect) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_stt_indirect.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

do {
  SI tmp_sregno;
  tmp_sregno = FLD (f_srcdst);
  {
    SI opval = * FLD (i_st_src);
    SETMEMSI (current_cpu, pc, * FLD (i_abase), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
  {
    SI opval = CPU (h_gr[((FLD (f_srcdst)) + (1))]);
    SETMEMSI (current_cpu, pc, ADDSI (* FLD (i_abase), 4), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
  {
    SI opval = CPU (h_gr[((FLD (f_srcdst)) + (2))]);
    SETMEMSI (current_cpu, pc, ADDSI (* FLD (i_abase), 8), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
} while (0);

  return vpc;
#undef FLD
}

/* stt-indirect-index: stt $st_src, ($abase)[$index*S$scale] */

SEM_PC
SEM_FN_NAME (i960base,stt_indirect_index) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_stt_indirect_index.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

do {
  SI tmp_sregno;
  tmp_sregno = FLD (f_srcdst);
  {
    SI opval = * FLD (i_st_src);
    SETMEMSI (current_cpu, pc, ADDSI (* FLD (i_abase), MULSI (* FLD (i_index), SLLSI (1, FLD (f_scale)))), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
  {
    SI opval = CPU (h_gr[((FLD (f_srcdst)) + (1))]);
    SETMEMSI (current_cpu, pc, ADDSI (ADDSI (* FLD (i_abase), MULSI (* FLD (i_index), SLLSI (1, FLD (f_scale)))), 4), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
  {
    SI opval = CPU (h_gr[((FLD (f_srcdst)) + (2))]);
    SETMEMSI (current_cpu, pc, ADDSI (ADDSI (* FLD (i_abase), MULSI (* FLD (i_index), SLLSI (1, FLD (f_scale)))), 8), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
} while (0);

  return vpc;
#undef FLD
}

/* stt-disp: stt $st_src, $optdisp */

SEM_PC
SEM_FN_NAME (i960base,stt_disp) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_stt_disp.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 8);

do {
  SI tmp_sregno;
  tmp_sregno = FLD (f_srcdst);
  {
    SI opval = * FLD (i_st_src);
    SETMEMSI (current_cpu, pc, FLD (f_optdisp), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
  {
    SI opval = CPU (h_gr[((FLD (f_srcdst)) + (1))]);
    SETMEMSI (current_cpu, pc, ADDSI (FLD (f_optdisp), 4), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
  {
    SI opval = CPU (h_gr[((FLD (f_srcdst)) + (2))]);
    SETMEMSI (current_cpu, pc, ADDSI (FLD (f_optdisp), 8), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
} while (0);

  return vpc;
#undef FLD
}

/* stt-indirect-disp: stt $st_src, $optdisp($abase) */

SEM_PC
SEM_FN_NAME (i960base,stt_indirect_disp) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_stt_indirect_disp.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 8);

do {
  SI tmp_sregno;
  tmp_sregno = FLD (f_srcdst);
  {
    SI opval = * FLD (i_st_src);
    SETMEMSI (current_cpu, pc, ADDSI (FLD (f_optdisp), * FLD (i_abase)), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
  {
    SI opval = CPU (h_gr[((FLD (f_srcdst)) + (1))]);
    SETMEMSI (current_cpu, pc, ADDSI (ADDSI (FLD (f_optdisp), * FLD (i_abase)), 4), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
  {
    SI opval = CPU (h_gr[((FLD (f_srcdst)) + (2))]);
    SETMEMSI (current_cpu, pc, ADDSI (ADDSI (FLD (f_optdisp), * FLD (i_abase)), 8), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
} while (0);

  return vpc;
#undef FLD
}

/* stt-index-disp: stt $st_src, $optdisp[$index*S$scale */

SEM_PC
SEM_FN_NAME (i960base,stt_index_disp) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_stt_index_disp.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 8);

do {
  SI tmp_sregno;
  tmp_sregno = FLD (f_srcdst);
  {
    SI opval = * FLD (i_st_src);
    SETMEMSI (current_cpu, pc, ADDSI (FLD (f_optdisp), MULSI (* FLD (i_index), SLLSI (1, FLD (f_scale)))), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
  {
    SI opval = CPU (h_gr[((FLD (f_srcdst)) + (1))]);
    SETMEMSI (current_cpu, pc, ADDSI (ADDSI (FLD (f_optdisp), MULSI (* FLD (i_index), SLLSI (1, FLD (f_scale)))), 4), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
  {
    SI opval = CPU (h_gr[((FLD (f_srcdst)) + (2))]);
    SETMEMSI (current_cpu, pc, ADDSI (ADDSI (FLD (f_optdisp), MULSI (* FLD (i_index), SLLSI (1, FLD (f_scale)))), 8), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
} while (0);

  return vpc;
#undef FLD
}

/* stt-indirect-index-disp: stt $st_src, $optdisp($abase)[$index*S$scale] */

SEM_PC
SEM_FN_NAME (i960base,stt_indirect_index_disp) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_stt_indirect_index_disp.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 8);

do {
  SI tmp_sregno;
  tmp_sregno = FLD (f_srcdst);
  {
    SI opval = * FLD (i_st_src);
    SETMEMSI (current_cpu, pc, ADDSI (FLD (f_optdisp), ADDSI (* FLD (i_abase), MULSI (* FLD (i_index), SLLSI (1, FLD (f_scale))))), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
  {
    SI opval = CPU (h_gr[((FLD (f_srcdst)) + (1))]);
    SETMEMSI (current_cpu, pc, ADDSI (ADDSI (FLD (f_optdisp), ADDSI (* FLD (i_abase), MULSI (* FLD (i_index), SLLSI (1, FLD (f_scale))))), 4), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
  {
    SI opval = CPU (h_gr[((FLD (f_srcdst)) + (2))]);
    SETMEMSI (current_cpu, pc, ADDSI (ADDSI (FLD (f_optdisp), ADDSI (* FLD (i_abase), MULSI (* FLD (i_index), SLLSI (1, FLD (f_scale))))), 8), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
} while (0);

  return vpc;
#undef FLD
}

/* stq-offset: stq $st_src, $offset */

SEM_PC
SEM_FN_NAME (i960base,stq_offset) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_stq_offset.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

do {
  SI tmp_sregno;
  tmp_sregno = FLD (f_srcdst);
  {
    SI opval = * FLD (i_st_src);
    SETMEMSI (current_cpu, pc, FLD (f_offset), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
  {
    SI opval = CPU (h_gr[((FLD (f_srcdst)) + (1))]);
    SETMEMSI (current_cpu, pc, ADDSI (FLD (f_offset), 4), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
  {
    SI opval = CPU (h_gr[((FLD (f_srcdst)) + (2))]);
    SETMEMSI (current_cpu, pc, ADDSI (FLD (f_offset), 8), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
  {
    SI opval = CPU (h_gr[((FLD (f_srcdst)) + (3))]);
    SETMEMSI (current_cpu, pc, ADDSI (FLD (f_offset), 12), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
} while (0);

  return vpc;
#undef FLD
}

/* stq-indirect-offset: stq $st_src, $offset($abase) */

SEM_PC
SEM_FN_NAME (i960base,stq_indirect_offset) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_stq_indirect_offset.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

do {
  SI tmp_sregno;
  tmp_sregno = FLD (f_srcdst);
  {
    SI opval = * FLD (i_st_src);
    SETMEMSI (current_cpu, pc, ADDSI (FLD (f_offset), * FLD (i_abase)), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
  {
    SI opval = CPU (h_gr[((FLD (f_srcdst)) + (1))]);
    SETMEMSI (current_cpu, pc, ADDSI (ADDSI (FLD (f_offset), * FLD (i_abase)), 4), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
  {
    SI opval = CPU (h_gr[((FLD (f_srcdst)) + (2))]);
    SETMEMSI (current_cpu, pc, ADDSI (ADDSI (FLD (f_offset), * FLD (i_abase)), 8), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
  {
    SI opval = CPU (h_gr[((FLD (f_srcdst)) + (3))]);
    SETMEMSI (current_cpu, pc, ADDSI (ADDSI (FLD (f_offset), * FLD (i_abase)), 12), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
} while (0);

  return vpc;
#undef FLD
}

/* stq-indirect: stq $st_src, ($abase) */

SEM_PC
SEM_FN_NAME (i960base,stq_indirect) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_stq_indirect.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

do {
  SI tmp_sregno;
  tmp_sregno = FLD (f_srcdst);
  {
    SI opval = * FLD (i_st_src);
    SETMEMSI (current_cpu, pc, * FLD (i_abase), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
  {
    SI opval = CPU (h_gr[((FLD (f_srcdst)) + (1))]);
    SETMEMSI (current_cpu, pc, ADDSI (* FLD (i_abase), 4), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
  {
    SI opval = CPU (h_gr[((FLD (f_srcdst)) + (2))]);
    SETMEMSI (current_cpu, pc, ADDSI (* FLD (i_abase), 8), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
  {
    SI opval = CPU (h_gr[((FLD (f_srcdst)) + (3))]);
    SETMEMSI (current_cpu, pc, ADDSI (* FLD (i_abase), 12), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
} while (0);

  return vpc;
#undef FLD
}

/* stq-indirect-index: stq $st_src, ($abase)[$index*S$scale] */

SEM_PC
SEM_FN_NAME (i960base,stq_indirect_index) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_stq_indirect_index.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

do {
  SI tmp_sregno;
  tmp_sregno = FLD (f_srcdst);
  {
    SI opval = * FLD (i_st_src);
    SETMEMSI (current_cpu, pc, ADDSI (* FLD (i_abase), MULSI (* FLD (i_index), SLLSI (1, FLD (f_scale)))), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
  {
    SI opval = CPU (h_gr[((FLD (f_srcdst)) + (1))]);
    SETMEMSI (current_cpu, pc, ADDSI (ADDSI (* FLD (i_abase), MULSI (* FLD (i_index), SLLSI (1, FLD (f_scale)))), 4), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
  {
    SI opval = CPU (h_gr[((FLD (f_srcdst)) + (2))]);
    SETMEMSI (current_cpu, pc, ADDSI (ADDSI (* FLD (i_abase), MULSI (* FLD (i_index), SLLSI (1, FLD (f_scale)))), 8), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
  {
    SI opval = CPU (h_gr[((FLD (f_srcdst)) + (3))]);
    SETMEMSI (current_cpu, pc, ADDSI (ADDSI (* FLD (i_abase), MULSI (* FLD (i_index), SLLSI (1, FLD (f_scale)))), 12), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
} while (0);

  return vpc;
#undef FLD
}

/* stq-disp: stq $st_src, $optdisp */

SEM_PC
SEM_FN_NAME (i960base,stq_disp) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_stq_disp.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 8);

do {
  SI tmp_sregno;
  tmp_sregno = FLD (f_srcdst);
  {
    SI opval = * FLD (i_st_src);
    SETMEMSI (current_cpu, pc, FLD (f_optdisp), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
  {
    SI opval = CPU (h_gr[((FLD (f_srcdst)) + (1))]);
    SETMEMSI (current_cpu, pc, ADDSI (FLD (f_optdisp), 4), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
  {
    SI opval = CPU (h_gr[((FLD (f_srcdst)) + (2))]);
    SETMEMSI (current_cpu, pc, ADDSI (FLD (f_optdisp), 8), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
  {
    SI opval = CPU (h_gr[((FLD (f_srcdst)) + (3))]);
    SETMEMSI (current_cpu, pc, ADDSI (FLD (f_optdisp), 12), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
} while (0);

  return vpc;
#undef FLD
}

/* stq-indirect-disp: stq $st_src, $optdisp($abase) */

SEM_PC
SEM_FN_NAME (i960base,stq_indirect_disp) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_stq_indirect_disp.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 8);

do {
  SI tmp_sregno;
  tmp_sregno = FLD (f_srcdst);
  {
    SI opval = * FLD (i_st_src);
    SETMEMSI (current_cpu, pc, ADDSI (FLD (f_optdisp), * FLD (i_abase)), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
  {
    SI opval = CPU (h_gr[((FLD (f_srcdst)) + (1))]);
    SETMEMSI (current_cpu, pc, ADDSI (ADDSI (FLD (f_optdisp), * FLD (i_abase)), 4), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
  {
    SI opval = CPU (h_gr[((FLD (f_srcdst)) + (2))]);
    SETMEMSI (current_cpu, pc, ADDSI (ADDSI (FLD (f_optdisp), * FLD (i_abase)), 8), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
  {
    SI opval = CPU (h_gr[((FLD (f_srcdst)) + (3))]);
    SETMEMSI (current_cpu, pc, ADDSI (ADDSI (FLD (f_optdisp), * FLD (i_abase)), 12), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
} while (0);

  return vpc;
#undef FLD
}

/* stq-index-disp: stq $st_src, $optdisp[$index*S$scale */

SEM_PC
SEM_FN_NAME (i960base,stq_index_disp) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_stq_index_disp.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 8);

do {
  SI tmp_sregno;
  tmp_sregno = FLD (f_srcdst);
  {
    SI opval = * FLD (i_st_src);
    SETMEMSI (current_cpu, pc, ADDSI (FLD (f_optdisp), MULSI (* FLD (i_index), SLLSI (1, FLD (f_scale)))), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
  {
    SI opval = CPU (h_gr[((FLD (f_srcdst)) + (1))]);
    SETMEMSI (current_cpu, pc, ADDSI (ADDSI (FLD (f_optdisp), MULSI (* FLD (i_index), SLLSI (1, FLD (f_scale)))), 4), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
  {
    SI opval = CPU (h_gr[((FLD (f_srcdst)) + (2))]);
    SETMEMSI (current_cpu, pc, ADDSI (ADDSI (FLD (f_optdisp), MULSI (* FLD (i_index), SLLSI (1, FLD (f_scale)))), 8), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
  {
    SI opval = CPU (h_gr[((FLD (f_srcdst)) + (3))]);
    SETMEMSI (current_cpu, pc, ADDSI (ADDSI (FLD (f_optdisp), MULSI (* FLD (i_index), SLLSI (1, FLD (f_scale)))), 12), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
} while (0);

  return vpc;
#undef FLD
}

/* stq-indirect-index-disp: stq $st_src, $optdisp($abase)[$index*S$scale] */

SEM_PC
SEM_FN_NAME (i960base,stq_indirect_index_disp) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_stq_indirect_index_disp.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 8);

do {
  SI tmp_sregno;
  tmp_sregno = FLD (f_srcdst);
  {
    SI opval = * FLD (i_st_src);
    SETMEMSI (current_cpu, pc, ADDSI (FLD (f_optdisp), ADDSI (* FLD (i_abase), MULSI (* FLD (i_index), SLLSI (1, FLD (f_scale))))), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
  {
    SI opval = CPU (h_gr[((FLD (f_srcdst)) + (1))]);
    SETMEMSI (current_cpu, pc, ADDSI (ADDSI (FLD (f_optdisp), ADDSI (* FLD (i_abase), MULSI (* FLD (i_index), SLLSI (1, FLD (f_scale))))), 4), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
  {
    SI opval = CPU (h_gr[((FLD (f_srcdst)) + (2))]);
    SETMEMSI (current_cpu, pc, ADDSI (ADDSI (FLD (f_optdisp), ADDSI (* FLD (i_abase), MULSI (* FLD (i_index), SLLSI (1, FLD (f_scale))))), 8), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
  {
    SI opval = CPU (h_gr[((FLD (f_srcdst)) + (3))]);
    SETMEMSI (current_cpu, pc, ADDSI (ADDSI (FLD (f_optdisp), ADDSI (* FLD (i_abase), MULSI (* FLD (i_index), SLLSI (1, FLD (f_scale))))), 12), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
} while (0);

  return vpc;
#undef FLD
}

/* cmpobe-reg: cmpobe $br_src1, $br_src2, $br_disp */

SEM_PC
SEM_FN_NAME (i960base,cmpobe_reg) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.cti.fields.fmt_cmpobe_reg.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

if (EQSI (* FLD (i_br_src1), * FLD (i_br_src2))) {
  {
    USI opval = FLD (i_br_disp);
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc, SEM_BRANCH_ADDR_CACHE (sem_arg));
    written |= (1 << 3);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}

  abuf->written = written;
  SEM_BRANCH_FINI (vpc);
  return vpc;
#undef FLD
}

/* cmpobe-lit: cmpobe $br_lit1, $br_src2, $br_disp */

SEM_PC
SEM_FN_NAME (i960base,cmpobe_lit) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.cti.fields.fmt_cmpobe_lit.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

if (EQSI (FLD (f_br_src1), * FLD (i_br_src2))) {
  {
    USI opval = FLD (i_br_disp);
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc, SEM_BRANCH_ADDR_CACHE (sem_arg));
    written |= (1 << 3);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}

  abuf->written = written;
  SEM_BRANCH_FINI (vpc);
  return vpc;
#undef FLD
}

/* cmpobne-reg: cmpobne $br_src1, $br_src2, $br_disp */

SEM_PC
SEM_FN_NAME (i960base,cmpobne_reg) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.cti.fields.fmt_cmpobe_reg.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

if (NESI (* FLD (i_br_src1), * FLD (i_br_src2))) {
  {
    USI opval = FLD (i_br_disp);
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc, SEM_BRANCH_ADDR_CACHE (sem_arg));
    written |= (1 << 3);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}

  abuf->written = written;
  SEM_BRANCH_FINI (vpc);
  return vpc;
#undef FLD
}

/* cmpobne-lit: cmpobne $br_lit1, $br_src2, $br_disp */

SEM_PC
SEM_FN_NAME (i960base,cmpobne_lit) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.cti.fields.fmt_cmpobe_lit.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

if (NESI (FLD (f_br_src1), * FLD (i_br_src2))) {
  {
    USI opval = FLD (i_br_disp);
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc, SEM_BRANCH_ADDR_CACHE (sem_arg));
    written |= (1 << 3);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}

  abuf->written = written;
  SEM_BRANCH_FINI (vpc);
  return vpc;
#undef FLD
}

/* cmpobl-reg: cmpobl $br_src1, $br_src2, $br_disp */

SEM_PC
SEM_FN_NAME (i960base,cmpobl_reg) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.cti.fields.fmt_cmpobl_reg.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

if (LTUSI (* FLD (i_br_src1), * FLD (i_br_src2))) {
  {
    USI opval = FLD (i_br_disp);
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc, SEM_BRANCH_ADDR_CACHE (sem_arg));
    written |= (1 << 3);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}

  abuf->written = written;
  SEM_BRANCH_FINI (vpc);
  return vpc;
#undef FLD
}

/* cmpobl-lit: cmpobl $br_lit1, $br_src2, $br_disp */

SEM_PC
SEM_FN_NAME (i960base,cmpobl_lit) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.cti.fields.fmt_cmpobl_lit.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

if (LTUSI (FLD (f_br_src1), * FLD (i_br_src2))) {
  {
    USI opval = FLD (i_br_disp);
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc, SEM_BRANCH_ADDR_CACHE (sem_arg));
    written |= (1 << 3);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}

  abuf->written = written;
  SEM_BRANCH_FINI (vpc);
  return vpc;
#undef FLD
}

/* cmpoble-reg: cmpoble $br_src1, $br_src2, $br_disp */

SEM_PC
SEM_FN_NAME (i960base,cmpoble_reg) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.cti.fields.fmt_cmpobl_reg.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

if (LEUSI (* FLD (i_br_src1), * FLD (i_br_src2))) {
  {
    USI opval = FLD (i_br_disp);
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc, SEM_BRANCH_ADDR_CACHE (sem_arg));
    written |= (1 << 3);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}

  abuf->written = written;
  SEM_BRANCH_FINI (vpc);
  return vpc;
#undef FLD
}

/* cmpoble-lit: cmpoble $br_lit1, $br_src2, $br_disp */

SEM_PC
SEM_FN_NAME (i960base,cmpoble_lit) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.cti.fields.fmt_cmpobl_lit.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

if (LEUSI (FLD (f_br_src1), * FLD (i_br_src2))) {
  {
    USI opval = FLD (i_br_disp);
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc, SEM_BRANCH_ADDR_CACHE (sem_arg));
    written |= (1 << 3);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}

  abuf->written = written;
  SEM_BRANCH_FINI (vpc);
  return vpc;
#undef FLD
}

/* cmpobg-reg: cmpobg $br_src1, $br_src2, $br_disp */

SEM_PC
SEM_FN_NAME (i960base,cmpobg_reg) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.cti.fields.fmt_cmpobl_reg.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

if (GTUSI (* FLD (i_br_src1), * FLD (i_br_src2))) {
  {
    USI opval = FLD (i_br_disp);
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc, SEM_BRANCH_ADDR_CACHE (sem_arg));
    written |= (1 << 3);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}

  abuf->written = written;
  SEM_BRANCH_FINI (vpc);
  return vpc;
#undef FLD
}

/* cmpobg-lit: cmpobg $br_lit1, $br_src2, $br_disp */

SEM_PC
SEM_FN_NAME (i960base,cmpobg_lit) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.cti.fields.fmt_cmpobl_lit.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

if (GTUSI (FLD (f_br_src1), * FLD (i_br_src2))) {
  {
    USI opval = FLD (i_br_disp);
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc, SEM_BRANCH_ADDR_CACHE (sem_arg));
    written |= (1 << 3);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}

  abuf->written = written;
  SEM_BRANCH_FINI (vpc);
  return vpc;
#undef FLD
}

/* cmpobge-reg: cmpobge $br_src1, $br_src2, $br_disp */

SEM_PC
SEM_FN_NAME (i960base,cmpobge_reg) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.cti.fields.fmt_cmpobl_reg.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

if (GEUSI (* FLD (i_br_src1), * FLD (i_br_src2))) {
  {
    USI opval = FLD (i_br_disp);
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc, SEM_BRANCH_ADDR_CACHE (sem_arg));
    written |= (1 << 3);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}

  abuf->written = written;
  SEM_BRANCH_FINI (vpc);
  return vpc;
#undef FLD
}

/* cmpobge-lit: cmpobge $br_lit1, $br_src2, $br_disp */

SEM_PC
SEM_FN_NAME (i960base,cmpobge_lit) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.cti.fields.fmt_cmpobl_lit.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

if (GEUSI (FLD (f_br_src1), * FLD (i_br_src2))) {
  {
    USI opval = FLD (i_br_disp);
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc, SEM_BRANCH_ADDR_CACHE (sem_arg));
    written |= (1 << 3);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}

  abuf->written = written;
  SEM_BRANCH_FINI (vpc);
  return vpc;
#undef FLD
}

/* cmpibe-reg: cmpibe $br_src1, $br_src2, $br_disp */

SEM_PC
SEM_FN_NAME (i960base,cmpibe_reg) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.cti.fields.fmt_cmpobe_reg.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

if (EQSI (* FLD (i_br_src1), * FLD (i_br_src2))) {
  {
    USI opval = FLD (i_br_disp);
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc, SEM_BRANCH_ADDR_CACHE (sem_arg));
    written |= (1 << 3);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}

  abuf->written = written;
  SEM_BRANCH_FINI (vpc);
  return vpc;
#undef FLD
}

/* cmpibe-lit: cmpibe $br_lit1, $br_src2, $br_disp */

SEM_PC
SEM_FN_NAME (i960base,cmpibe_lit) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.cti.fields.fmt_cmpobe_lit.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

if (EQSI (FLD (f_br_src1), * FLD (i_br_src2))) {
  {
    USI opval = FLD (i_br_disp);
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc, SEM_BRANCH_ADDR_CACHE (sem_arg));
    written |= (1 << 3);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}

  abuf->written = written;
  SEM_BRANCH_FINI (vpc);
  return vpc;
#undef FLD
}

/* cmpibne-reg: cmpibne $br_src1, $br_src2, $br_disp */

SEM_PC
SEM_FN_NAME (i960base,cmpibne_reg) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.cti.fields.fmt_cmpobe_reg.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

if (NESI (* FLD (i_br_src1), * FLD (i_br_src2))) {
  {
    USI opval = FLD (i_br_disp);
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc, SEM_BRANCH_ADDR_CACHE (sem_arg));
    written |= (1 << 3);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}

  abuf->written = written;
  SEM_BRANCH_FINI (vpc);
  return vpc;
#undef FLD
}

/* cmpibne-lit: cmpibne $br_lit1, $br_src2, $br_disp */

SEM_PC
SEM_FN_NAME (i960base,cmpibne_lit) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.cti.fields.fmt_cmpobe_lit.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

if (NESI (FLD (f_br_src1), * FLD (i_br_src2))) {
  {
    USI opval = FLD (i_br_disp);
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc, SEM_BRANCH_ADDR_CACHE (sem_arg));
    written |= (1 << 3);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}

  abuf->written = written;
  SEM_BRANCH_FINI (vpc);
  return vpc;
#undef FLD
}

/* cmpibl-reg: cmpibl $br_src1, $br_src2, $br_disp */

SEM_PC
SEM_FN_NAME (i960base,cmpibl_reg) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.cti.fields.fmt_cmpobe_reg.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

if (LTSI (* FLD (i_br_src1), * FLD (i_br_src2))) {
  {
    USI opval = FLD (i_br_disp);
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc, SEM_BRANCH_ADDR_CACHE (sem_arg));
    written |= (1 << 3);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}

  abuf->written = written;
  SEM_BRANCH_FINI (vpc);
  return vpc;
#undef FLD
}

/* cmpibl-lit: cmpibl $br_lit1, $br_src2, $br_disp */

SEM_PC
SEM_FN_NAME (i960base,cmpibl_lit) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.cti.fields.fmt_cmpobe_lit.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

if (LTSI (FLD (f_br_src1), * FLD (i_br_src2))) {
  {
    USI opval = FLD (i_br_disp);
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc, SEM_BRANCH_ADDR_CACHE (sem_arg));
    written |= (1 << 3);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}

  abuf->written = written;
  SEM_BRANCH_FINI (vpc);
  return vpc;
#undef FLD
}

/* cmpible-reg: cmpible $br_src1, $br_src2, $br_disp */

SEM_PC
SEM_FN_NAME (i960base,cmpible_reg) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.cti.fields.fmt_cmpobe_reg.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

if (LESI (* FLD (i_br_src1), * FLD (i_br_src2))) {
  {
    USI opval = FLD (i_br_disp);
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc, SEM_BRANCH_ADDR_CACHE (sem_arg));
    written |= (1 << 3);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}

  abuf->written = written;
  SEM_BRANCH_FINI (vpc);
  return vpc;
#undef FLD
}

/* cmpible-lit: cmpible $br_lit1, $br_src2, $br_disp */

SEM_PC
SEM_FN_NAME (i960base,cmpible_lit) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.cti.fields.fmt_cmpobe_lit.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

if (LESI (FLD (f_br_src1), * FLD (i_br_src2))) {
  {
    USI opval = FLD (i_br_disp);
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc, SEM_BRANCH_ADDR_CACHE (sem_arg));
    written |= (1 << 3);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}

  abuf->written = written;
  SEM_BRANCH_FINI (vpc);
  return vpc;
#undef FLD
}

/* cmpibg-reg: cmpibg $br_src1, $br_src2, $br_disp */

SEM_PC
SEM_FN_NAME (i960base,cmpibg_reg) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.cti.fields.fmt_cmpobe_reg.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

if (GTSI (* FLD (i_br_src1), * FLD (i_br_src2))) {
  {
    USI opval = FLD (i_br_disp);
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc, SEM_BRANCH_ADDR_CACHE (sem_arg));
    written |= (1 << 3);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}

  abuf->written = written;
  SEM_BRANCH_FINI (vpc);
  return vpc;
#undef FLD
}

/* cmpibg-lit: cmpibg $br_lit1, $br_src2, $br_disp */

SEM_PC
SEM_FN_NAME (i960base,cmpibg_lit) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.cti.fields.fmt_cmpobe_lit.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

if (GTSI (FLD (f_br_src1), * FLD (i_br_src2))) {
  {
    USI opval = FLD (i_br_disp);
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc, SEM_BRANCH_ADDR_CACHE (sem_arg));
    written |= (1 << 3);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}

  abuf->written = written;
  SEM_BRANCH_FINI (vpc);
  return vpc;
#undef FLD
}

/* cmpibge-reg: cmpibge $br_src1, $br_src2, $br_disp */

SEM_PC
SEM_FN_NAME (i960base,cmpibge_reg) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.cti.fields.fmt_cmpobe_reg.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

if (GESI (* FLD (i_br_src1), * FLD (i_br_src2))) {
  {
    USI opval = FLD (i_br_disp);
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc, SEM_BRANCH_ADDR_CACHE (sem_arg));
    written |= (1 << 3);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}

  abuf->written = written;
  SEM_BRANCH_FINI (vpc);
  return vpc;
#undef FLD
}

/* cmpibge-lit: cmpibge $br_lit1, $br_src2, $br_disp */

SEM_PC
SEM_FN_NAME (i960base,cmpibge_lit) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.cti.fields.fmt_cmpobe_lit.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

if (GESI (FLD (f_br_src1), * FLD (i_br_src2))) {
  {
    USI opval = FLD (i_br_disp);
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc, SEM_BRANCH_ADDR_CACHE (sem_arg));
    written |= (1 << 3);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}

  abuf->written = written;
  SEM_BRANCH_FINI (vpc);
  return vpc;
#undef FLD
}

/* bbc-reg: bbc $br_src1, $br_src2, $br_disp */

SEM_PC
SEM_FN_NAME (i960base,bbc_reg) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.cti.fields.fmt_bbc_reg.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

if (EQSI (ANDSI (SLLSI (1, * FLD (i_br_src1)), * FLD (i_br_src2)), 0)) {
  {
    USI opval = FLD (i_br_disp);
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc, SEM_BRANCH_ADDR_CACHE (sem_arg));
    written |= (1 << 3);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}

  abuf->written = written;
  SEM_BRANCH_FINI (vpc);
  return vpc;
#undef FLD
}

/* bbc-lit: bbc $br_lit1, $br_src2, $br_disp */

SEM_PC
SEM_FN_NAME (i960base,bbc_lit) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.cti.fields.fmt_bbc_lit.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

if (EQSI (ANDSI (SLLSI (1, FLD (f_br_src1)), * FLD (i_br_src2)), 0)) {
  {
    USI opval = FLD (i_br_disp);
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc, SEM_BRANCH_ADDR_CACHE (sem_arg));
    written |= (1 << 3);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}

  abuf->written = written;
  SEM_BRANCH_FINI (vpc);
  return vpc;
#undef FLD
}

/* bbs-reg: bbs $br_src1, $br_src2, $br_disp */

SEM_PC
SEM_FN_NAME (i960base,bbs_reg) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.cti.fields.fmt_bbc_reg.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

if (NESI (ANDSI (SLLSI (1, * FLD (i_br_src1)), * FLD (i_br_src2)), 0)) {
  {
    USI opval = FLD (i_br_disp);
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc, SEM_BRANCH_ADDR_CACHE (sem_arg));
    written |= (1 << 3);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}

  abuf->written = written;
  SEM_BRANCH_FINI (vpc);
  return vpc;
#undef FLD
}

/* bbs-lit: bbs $br_lit1, $br_src2, $br_disp */

SEM_PC
SEM_FN_NAME (i960base,bbs_lit) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.cti.fields.fmt_bbc_lit.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

if (NESI (ANDSI (SLLSI (1, FLD (f_br_src1)), * FLD (i_br_src2)), 0)) {
  {
    USI opval = FLD (i_br_disp);
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc, SEM_BRANCH_ADDR_CACHE (sem_arg));
    written |= (1 << 3);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}

  abuf->written = written;
  SEM_BRANCH_FINI (vpc);
  return vpc;
#undef FLD
}

/* cmpi: cmpi $src1, $src2 */

SEM_PC
SEM_FN_NAME (i960base,cmpi) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_cmpi.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = (LTSI (* FLD (i_src1), * FLD (i_src2))) ? (4) : (EQSI (* FLD (i_src1), * FLD (i_src2))) ? (2) : (1);
    CPU (h_cc) = opval;
    TRACE_RESULT (current_cpu, abuf, "cc-0", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* cmpi1: cmpi $lit1, $src2 */

SEM_PC
SEM_FN_NAME (i960base,cmpi1) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_cmpi1.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = (LTSI (FLD (f_src1), * FLD (i_src2))) ? (4) : (EQSI (FLD (f_src1), * FLD (i_src2))) ? (2) : (1);
    CPU (h_cc) = opval;
    TRACE_RESULT (current_cpu, abuf, "cc-0", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* cmpi2: cmpi $src1, $lit2 */

SEM_PC
SEM_FN_NAME (i960base,cmpi2) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_cmpi2.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = (LTSI (* FLD (i_src1), FLD (f_src2))) ? (4) : (EQSI (* FLD (i_src1), FLD (f_src2))) ? (2) : (1);
    CPU (h_cc) = opval;
    TRACE_RESULT (current_cpu, abuf, "cc-0", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* cmpi3: cmpi $lit1, $lit2 */

SEM_PC
SEM_FN_NAME (i960base,cmpi3) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_cmpi3.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = (LTSI (FLD (f_src1), FLD (f_src2))) ? (4) : (EQSI (FLD (f_src1), FLD (f_src2))) ? (2) : (1);
    CPU (h_cc) = opval;
    TRACE_RESULT (current_cpu, abuf, "cc-0", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* cmpo: cmpo $src1, $src2 */

SEM_PC
SEM_FN_NAME (i960base,cmpo) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_cmpo.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = (LTUSI (* FLD (i_src1), * FLD (i_src2))) ? (4) : (EQSI (* FLD (i_src1), * FLD (i_src2))) ? (2) : (1);
    CPU (h_cc) = opval;
    TRACE_RESULT (current_cpu, abuf, "cc-0", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* cmpo1: cmpo $lit1, $src2 */

SEM_PC
SEM_FN_NAME (i960base,cmpo1) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_cmpo1.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = (LTUSI (FLD (f_src1), * FLD (i_src2))) ? (4) : (EQSI (FLD (f_src1), * FLD (i_src2))) ? (2) : (1);
    CPU (h_cc) = opval;
    TRACE_RESULT (current_cpu, abuf, "cc-0", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* cmpo2: cmpo $src1, $lit2 */

SEM_PC
SEM_FN_NAME (i960base,cmpo2) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_cmpo2.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = (LTUSI (* FLD (i_src1), FLD (f_src2))) ? (4) : (EQSI (* FLD (i_src1), FLD (f_src2))) ? (2) : (1);
    CPU (h_cc) = opval;
    TRACE_RESULT (current_cpu, abuf, "cc-0", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* cmpo3: cmpo $lit1, $lit2 */

SEM_PC
SEM_FN_NAME (i960base,cmpo3) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_cmpo3.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = (LTUSI (FLD (f_src1), FLD (f_src2))) ? (4) : (EQSI (FLD (f_src1), FLD (f_src2))) ? (2) : (1);
    CPU (h_cc) = opval;
    TRACE_RESULT (current_cpu, abuf, "cc-0", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* testno-reg: testno $br_src1 */

SEM_PC
SEM_FN_NAME (i960base,testno_reg) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_testno_reg.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = EQSI (CPU (h_cc), 0);
    * FLD (i_br_src1) = opval;
    TRACE_RESULT (current_cpu, abuf, "br_src1", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* testg-reg: testg $br_src1 */

SEM_PC
SEM_FN_NAME (i960base,testg_reg) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_testno_reg.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = NESI (ANDSI (CPU (h_cc), 1), 0);
    * FLD (i_br_src1) = opval;
    TRACE_RESULT (current_cpu, abuf, "br_src1", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* teste-reg: teste $br_src1 */

SEM_PC
SEM_FN_NAME (i960base,teste_reg) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_testno_reg.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = NESI (ANDSI (CPU (h_cc), 2), 0);
    * FLD (i_br_src1) = opval;
    TRACE_RESULT (current_cpu, abuf, "br_src1", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* testge-reg: testge $br_src1 */

SEM_PC
SEM_FN_NAME (i960base,testge_reg) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_testno_reg.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = NESI (ANDSI (CPU (h_cc), 3), 0);
    * FLD (i_br_src1) = opval;
    TRACE_RESULT (current_cpu, abuf, "br_src1", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* testl-reg: testl $br_src1 */

SEM_PC
SEM_FN_NAME (i960base,testl_reg) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_testno_reg.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = NESI (ANDSI (CPU (h_cc), 4), 0);
    * FLD (i_br_src1) = opval;
    TRACE_RESULT (current_cpu, abuf, "br_src1", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* testne-reg: testne $br_src1 */

SEM_PC
SEM_FN_NAME (i960base,testne_reg) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_testno_reg.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = NESI (ANDSI (CPU (h_cc), 5), 0);
    * FLD (i_br_src1) = opval;
    TRACE_RESULT (current_cpu, abuf, "br_src1", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* testle-reg: testle $br_src1 */

SEM_PC
SEM_FN_NAME (i960base,testle_reg) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_testno_reg.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = NESI (ANDSI (CPU (h_cc), 6), 0);
    * FLD (i_br_src1) = opval;
    TRACE_RESULT (current_cpu, abuf, "br_src1", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* testo-reg: testo $br_src1 */

SEM_PC
SEM_FN_NAME (i960base,testo_reg) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_testno_reg.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = NESI (ANDSI (CPU (h_cc), 7), 0);
    * FLD (i_br_src1) = opval;
    TRACE_RESULT (current_cpu, abuf, "br_src1", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* bno: bno $ctrl_disp */

SEM_PC
SEM_FN_NAME (i960base,bno) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.cti.fields.fmt_bno.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

if (EQSI (CPU (h_cc), 0)) {
  {
    USI opval = FLD (i_ctrl_disp);
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc, SEM_BRANCH_ADDR_CACHE (sem_arg));
    written |= (1 << 2);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}

  abuf->written = written;
  SEM_BRANCH_FINI (vpc);
  return vpc;
#undef FLD
}

/* bg: bg $ctrl_disp */

SEM_PC
SEM_FN_NAME (i960base,bg) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.cti.fields.fmt_bno.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

if (NESI (ANDSI (CPU (h_cc), 1), 0)) {
  {
    USI opval = FLD (i_ctrl_disp);
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc, SEM_BRANCH_ADDR_CACHE (sem_arg));
    written |= (1 << 2);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}

  abuf->written = written;
  SEM_BRANCH_FINI (vpc);
  return vpc;
#undef FLD
}

/* be: be $ctrl_disp */

SEM_PC
SEM_FN_NAME (i960base,be) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.cti.fields.fmt_bno.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

if (NESI (ANDSI (CPU (h_cc), 2), 0)) {
  {
    USI opval = FLD (i_ctrl_disp);
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc, SEM_BRANCH_ADDR_CACHE (sem_arg));
    written |= (1 << 2);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}

  abuf->written = written;
  SEM_BRANCH_FINI (vpc);
  return vpc;
#undef FLD
}

/* bge: bge $ctrl_disp */

SEM_PC
SEM_FN_NAME (i960base,bge) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.cti.fields.fmt_bno.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

if (NESI (ANDSI (CPU (h_cc), 3), 0)) {
  {
    USI opval = FLD (i_ctrl_disp);
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc, SEM_BRANCH_ADDR_CACHE (sem_arg));
    written |= (1 << 2);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}

  abuf->written = written;
  SEM_BRANCH_FINI (vpc);
  return vpc;
#undef FLD
}

/* bl: bl $ctrl_disp */

SEM_PC
SEM_FN_NAME (i960base,bl) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.cti.fields.fmt_bno.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

if (NESI (ANDSI (CPU (h_cc), 4), 0)) {
  {
    USI opval = FLD (i_ctrl_disp);
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc, SEM_BRANCH_ADDR_CACHE (sem_arg));
    written |= (1 << 2);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}

  abuf->written = written;
  SEM_BRANCH_FINI (vpc);
  return vpc;
#undef FLD
}

/* bne: bne $ctrl_disp */

SEM_PC
SEM_FN_NAME (i960base,bne) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.cti.fields.fmt_bno.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

if (NESI (ANDSI (CPU (h_cc), 5), 0)) {
  {
    USI opval = FLD (i_ctrl_disp);
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc, SEM_BRANCH_ADDR_CACHE (sem_arg));
    written |= (1 << 2);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}

  abuf->written = written;
  SEM_BRANCH_FINI (vpc);
  return vpc;
#undef FLD
}

/* ble: ble $ctrl_disp */

SEM_PC
SEM_FN_NAME (i960base,ble) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.cti.fields.fmt_bno.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

if (NESI (ANDSI (CPU (h_cc), 6), 0)) {
  {
    USI opval = FLD (i_ctrl_disp);
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc, SEM_BRANCH_ADDR_CACHE (sem_arg));
    written |= (1 << 2);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}

  abuf->written = written;
  SEM_BRANCH_FINI (vpc);
  return vpc;
#undef FLD
}

/* bo: bo $ctrl_disp */

SEM_PC
SEM_FN_NAME (i960base,bo) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.cti.fields.fmt_bno.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

if (NESI (ANDSI (CPU (h_cc), 7), 0)) {
  {
    USI opval = FLD (i_ctrl_disp);
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc, SEM_BRANCH_ADDR_CACHE (sem_arg));
    written |= (1 << 2);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}

  abuf->written = written;
  SEM_BRANCH_FINI (vpc);
  return vpc;
#undef FLD
}

/* b: b $ctrl_disp */

SEM_PC
SEM_FN_NAME (i960base,b) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.cti.fields.fmt_b.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    USI opval = FLD (i_ctrl_disp);
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc, SEM_BRANCH_ADDR_CACHE (sem_arg));
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }

  SEM_BRANCH_FINI (vpc);
  return vpc;
#undef FLD
}

/* bx-indirect-offset: bx $offset($abase) */

SEM_PC
SEM_FN_NAME (i960base,bx_indirect_offset) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.cti.fields.fmt_bx_indirect_offset.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    USI opval = ADDSI (FLD (f_offset), * FLD (i_abase));
    SEM_BRANCH_VIA_ADDR (current_cpu, sem_arg, opval, vpc);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }

  SEM_BRANCH_FINI (vpc);
  return vpc;
#undef FLD
}

/* bx-indirect: bx ($abase) */

SEM_PC
SEM_FN_NAME (i960base,bx_indirect) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.cti.fields.fmt_bx_indirect.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    USI opval = * FLD (i_abase);
    SEM_BRANCH_VIA_ADDR (current_cpu, sem_arg, opval, vpc);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }

  SEM_BRANCH_FINI (vpc);
  return vpc;
#undef FLD
}

/* bx-indirect-index: bx ($abase)[$index*S$scale] */

SEM_PC
SEM_FN_NAME (i960base,bx_indirect_index) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.cti.fields.fmt_bx_indirect_index.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    USI opval = ADDSI (* FLD (i_abase), MULSI (* FLD (i_index), SLLSI (1, FLD (f_scale))));
    SEM_BRANCH_VIA_ADDR (current_cpu, sem_arg, opval, vpc);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }

  SEM_BRANCH_FINI (vpc);
  return vpc;
#undef FLD
}

/* bx-disp: bx $optdisp */

SEM_PC
SEM_FN_NAME (i960base,bx_disp) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.cti.fields.fmt_bx_disp.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 8);

  {
    USI opval = FLD (f_optdisp);
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc, SEM_BRANCH_ADDR_CACHE (sem_arg));
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }

  SEM_BRANCH_FINI (vpc);
  return vpc;
#undef FLD
}

/* bx-indirect-disp: bx $optdisp($abase) */

SEM_PC
SEM_FN_NAME (i960base,bx_indirect_disp) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.cti.fields.fmt_bx_indirect_disp.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 8);

  {
    USI opval = ADDSI (FLD (f_optdisp), * FLD (i_abase));
    SEM_BRANCH_VIA_ADDR (current_cpu, sem_arg, opval, vpc);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }

  SEM_BRANCH_FINI (vpc);
  return vpc;
#undef FLD
}

/* callx-disp: callx $optdisp */

SEM_PC
SEM_FN_NAME (i960base,callx_disp) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.cti.fields.fmt_callx_disp.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 8);

do {
  SI tmp_temp;
  tmp_temp = ANDSI (ADDSI (CPU (h_gr[((UINT) 1)]), 63), INVSI (63));
  {
    SI opval = ADDSI (pc, 8);
    CPU (h_gr[((UINT) 2)]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr-2", 'x', opval);
  }
SETMEMSI (current_cpu, pc, ADDSI (CPU (h_gr[((UINT) 31)]), 0), CPU (h_gr[((UINT) 0)]));
SETMEMSI (current_cpu, pc, ADDSI (CPU (h_gr[((UINT) 31)]), 4), CPU (h_gr[((UINT) 1)]));
SETMEMSI (current_cpu, pc, ADDSI (CPU (h_gr[((UINT) 31)]), 8), CPU (h_gr[((UINT) 2)]));
SETMEMSI (current_cpu, pc, ADDSI (CPU (h_gr[((UINT) 31)]), 12), CPU (h_gr[((UINT) 3)]));
SETMEMSI (current_cpu, pc, ADDSI (CPU (h_gr[((UINT) 31)]), 16), CPU (h_gr[((UINT) 4)]));
SETMEMSI (current_cpu, pc, ADDSI (CPU (h_gr[((UINT) 31)]), 20), CPU (h_gr[((UINT) 5)]));
SETMEMSI (current_cpu, pc, ADDSI (CPU (h_gr[((UINT) 31)]), 24), CPU (h_gr[((UINT) 6)]));
SETMEMSI (current_cpu, pc, ADDSI (CPU (h_gr[((UINT) 31)]), 28), CPU (h_gr[((UINT) 7)]));
SETMEMSI (current_cpu, pc, ADDSI (CPU (h_gr[((UINT) 31)]), 32), CPU (h_gr[((UINT) 8)]));
SETMEMSI (current_cpu, pc, ADDSI (CPU (h_gr[((UINT) 31)]), 36), CPU (h_gr[((UINT) 9)]));
SETMEMSI (current_cpu, pc, ADDSI (CPU (h_gr[((UINT) 31)]), 40), CPU (h_gr[((UINT) 10)]));
SETMEMSI (current_cpu, pc, ADDSI (CPU (h_gr[((UINT) 31)]), 44), CPU (h_gr[((UINT) 11)]));
SETMEMSI (current_cpu, pc, ADDSI (CPU (h_gr[((UINT) 31)]), 48), CPU (h_gr[((UINT) 12)]));
SETMEMSI (current_cpu, pc, ADDSI (CPU (h_gr[((UINT) 31)]), 52), CPU (h_gr[((UINT) 13)]));
SETMEMSI (current_cpu, pc, ADDSI (CPU (h_gr[((UINT) 31)]), 56), CPU (h_gr[((UINT) 14)]));
SETMEMSI (current_cpu, pc, ADDSI (CPU (h_gr[((UINT) 31)]), 60), CPU (h_gr[((UINT) 15)]));
  {
    USI opval = FLD (f_optdisp);
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc, SEM_BRANCH_ADDR_CACHE (sem_arg));
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
CPU (h_gr[((UINT) 0)]) = 0xdeadbeef;
CPU (h_gr[((UINT) 1)]) = 0xdeadbeef;
CPU (h_gr[((UINT) 2)]) = 0xdeadbeef;
CPU (h_gr[((UINT) 3)]) = 0xdeadbeef;
CPU (h_gr[((UINT) 4)]) = 0xdeadbeef;
CPU (h_gr[((UINT) 5)]) = 0xdeadbeef;
CPU (h_gr[((UINT) 6)]) = 0xdeadbeef;
CPU (h_gr[((UINT) 7)]) = 0xdeadbeef;
CPU (h_gr[((UINT) 8)]) = 0xdeadbeef;
CPU (h_gr[((UINT) 9)]) = 0xdeadbeef;
CPU (h_gr[((UINT) 10)]) = 0xdeadbeef;
CPU (h_gr[((UINT) 11)]) = 0xdeadbeef;
CPU (h_gr[((UINT) 12)]) = 0xdeadbeef;
CPU (h_gr[((UINT) 13)]) = 0xdeadbeef;
CPU (h_gr[((UINT) 14)]) = 0xdeadbeef;
CPU (h_gr[((UINT) 15)]) = 0xdeadbeef;
  {
    SI opval = CPU (h_gr[((UINT) 31)]);
    CPU (h_gr[((UINT) 0)]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr-0", 'x', opval);
  }
  {
    SI opval = tmp_temp;
    CPU (h_gr[((UINT) 31)]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr-31", 'x', opval);
  }
  {
    SI opval = ADDSI (tmp_temp, 64);
    CPU (h_gr[((UINT) 1)]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr-1", 'x', opval);
  }
} while (0);

  SEM_BRANCH_FINI (vpc);
  return vpc;
#undef FLD
}

/* callx-indirect: callx ($abase) */

SEM_PC
SEM_FN_NAME (i960base,callx_indirect) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.cti.fields.fmt_callx_indirect.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

do {
  SI tmp_temp;
  tmp_temp = ANDSI (ADDSI (CPU (h_gr[((UINT) 1)]), 63), INVSI (63));
  {
    SI opval = ADDSI (pc, 4);
    CPU (h_gr[((UINT) 2)]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr-2", 'x', opval);
  }
SETMEMSI (current_cpu, pc, ADDSI (CPU (h_gr[((UINT) 31)]), 0), CPU (h_gr[((UINT) 0)]));
SETMEMSI (current_cpu, pc, ADDSI (CPU (h_gr[((UINT) 31)]), 4), CPU (h_gr[((UINT) 1)]));
SETMEMSI (current_cpu, pc, ADDSI (CPU (h_gr[((UINT) 31)]), 8), CPU (h_gr[((UINT) 2)]));
SETMEMSI (current_cpu, pc, ADDSI (CPU (h_gr[((UINT) 31)]), 12), CPU (h_gr[((UINT) 3)]));
SETMEMSI (current_cpu, pc, ADDSI (CPU (h_gr[((UINT) 31)]), 16), CPU (h_gr[((UINT) 4)]));
SETMEMSI (current_cpu, pc, ADDSI (CPU (h_gr[((UINT) 31)]), 20), CPU (h_gr[((UINT) 5)]));
SETMEMSI (current_cpu, pc, ADDSI (CPU (h_gr[((UINT) 31)]), 24), CPU (h_gr[((UINT) 6)]));
SETMEMSI (current_cpu, pc, ADDSI (CPU (h_gr[((UINT) 31)]), 28), CPU (h_gr[((UINT) 7)]));
SETMEMSI (current_cpu, pc, ADDSI (CPU (h_gr[((UINT) 31)]), 32), CPU (h_gr[((UINT) 8)]));
SETMEMSI (current_cpu, pc, ADDSI (CPU (h_gr[((UINT) 31)]), 36), CPU (h_gr[((UINT) 9)]));
SETMEMSI (current_cpu, pc, ADDSI (CPU (h_gr[((UINT) 31)]), 40), CPU (h_gr[((UINT) 10)]));
SETMEMSI (current_cpu, pc, ADDSI (CPU (h_gr[((UINT) 31)]), 44), CPU (h_gr[((UINT) 11)]));
SETMEMSI (current_cpu, pc, ADDSI (CPU (h_gr[((UINT) 31)]), 48), CPU (h_gr[((UINT) 12)]));
SETMEMSI (current_cpu, pc, ADDSI (CPU (h_gr[((UINT) 31)]), 52), CPU (h_gr[((UINT) 13)]));
SETMEMSI (current_cpu, pc, ADDSI (CPU (h_gr[((UINT) 31)]), 56), CPU (h_gr[((UINT) 14)]));
SETMEMSI (current_cpu, pc, ADDSI (CPU (h_gr[((UINT) 31)]), 60), CPU (h_gr[((UINT) 15)]));
  {
    USI opval = * FLD (i_abase);
    SEM_BRANCH_VIA_ADDR (current_cpu, sem_arg, opval, vpc);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
CPU (h_gr[((UINT) 0)]) = 0xdeadbeef;
CPU (h_gr[((UINT) 1)]) = 0xdeadbeef;
CPU (h_gr[((UINT) 2)]) = 0xdeadbeef;
CPU (h_gr[((UINT) 3)]) = 0xdeadbeef;
CPU (h_gr[((UINT) 4)]) = 0xdeadbeef;
CPU (h_gr[((UINT) 5)]) = 0xdeadbeef;
CPU (h_gr[((UINT) 6)]) = 0xdeadbeef;
CPU (h_gr[((UINT) 7)]) = 0xdeadbeef;
CPU (h_gr[((UINT) 8)]) = 0xdeadbeef;
CPU (h_gr[((UINT) 9)]) = 0xdeadbeef;
CPU (h_gr[((UINT) 10)]) = 0xdeadbeef;
CPU (h_gr[((UINT) 11)]) = 0xdeadbeef;
CPU (h_gr[((UINT) 12)]) = 0xdeadbeef;
CPU (h_gr[((UINT) 13)]) = 0xdeadbeef;
CPU (h_gr[((UINT) 14)]) = 0xdeadbeef;
CPU (h_gr[((UINT) 15)]) = 0xdeadbeef;
  {
    SI opval = CPU (h_gr[((UINT) 31)]);
    CPU (h_gr[((UINT) 0)]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr-0", 'x', opval);
  }
  {
    SI opval = tmp_temp;
    CPU (h_gr[((UINT) 31)]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr-31", 'x', opval);
  }
  {
    SI opval = ADDSI (tmp_temp, 64);
    CPU (h_gr[((UINT) 1)]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr-1", 'x', opval);
  }
} while (0);

  SEM_BRANCH_FINI (vpc);
  return vpc;
#undef FLD
}

/* callx-indirect-offset: callx $offset($abase) */

SEM_PC
SEM_FN_NAME (i960base,callx_indirect_offset) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.cti.fields.fmt_callx_indirect_offset.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

do {
  SI tmp_temp;
  tmp_temp = ANDSI (ADDSI (CPU (h_gr[((UINT) 1)]), 63), INVSI (63));
  {
    SI opval = ADDSI (pc, 4);
    CPU (h_gr[((UINT) 2)]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr-2", 'x', opval);
  }
SETMEMSI (current_cpu, pc, ADDSI (CPU (h_gr[((UINT) 31)]), 0), CPU (h_gr[((UINT) 0)]));
SETMEMSI (current_cpu, pc, ADDSI (CPU (h_gr[((UINT) 31)]), 4), CPU (h_gr[((UINT) 1)]));
SETMEMSI (current_cpu, pc, ADDSI (CPU (h_gr[((UINT) 31)]), 8), CPU (h_gr[((UINT) 2)]));
SETMEMSI (current_cpu, pc, ADDSI (CPU (h_gr[((UINT) 31)]), 12), CPU (h_gr[((UINT) 3)]));
SETMEMSI (current_cpu, pc, ADDSI (CPU (h_gr[((UINT) 31)]), 16), CPU (h_gr[((UINT) 4)]));
SETMEMSI (current_cpu, pc, ADDSI (CPU (h_gr[((UINT) 31)]), 20), CPU (h_gr[((UINT) 5)]));
SETMEMSI (current_cpu, pc, ADDSI (CPU (h_gr[((UINT) 31)]), 24), CPU (h_gr[((UINT) 6)]));
SETMEMSI (current_cpu, pc, ADDSI (CPU (h_gr[((UINT) 31)]), 28), CPU (h_gr[((UINT) 7)]));
SETMEMSI (current_cpu, pc, ADDSI (CPU (h_gr[((UINT) 31)]), 32), CPU (h_gr[((UINT) 8)]));
SETMEMSI (current_cpu, pc, ADDSI (CPU (h_gr[((UINT) 31)]), 36), CPU (h_gr[((UINT) 9)]));
SETMEMSI (current_cpu, pc, ADDSI (CPU (h_gr[((UINT) 31)]), 40), CPU (h_gr[((UINT) 10)]));
SETMEMSI (current_cpu, pc, ADDSI (CPU (h_gr[((UINT) 31)]), 44), CPU (h_gr[((UINT) 11)]));
SETMEMSI (current_cpu, pc, ADDSI (CPU (h_gr[((UINT) 31)]), 48), CPU (h_gr[((UINT) 12)]));
SETMEMSI (current_cpu, pc, ADDSI (CPU (h_gr[((UINT) 31)]), 52), CPU (h_gr[((UINT) 13)]));
SETMEMSI (current_cpu, pc, ADDSI (CPU (h_gr[((UINT) 31)]), 56), CPU (h_gr[((UINT) 14)]));
SETMEMSI (current_cpu, pc, ADDSI (CPU (h_gr[((UINT) 31)]), 60), CPU (h_gr[((UINT) 15)]));
  {
    USI opval = ADDSI (FLD (f_offset), * FLD (i_abase));
    SEM_BRANCH_VIA_ADDR (current_cpu, sem_arg, opval, vpc);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
CPU (h_gr[((UINT) 0)]) = 0xdeadbeef;
CPU (h_gr[((UINT) 1)]) = 0xdeadbeef;
CPU (h_gr[((UINT) 2)]) = 0xdeadbeef;
CPU (h_gr[((UINT) 3)]) = 0xdeadbeef;
CPU (h_gr[((UINT) 4)]) = 0xdeadbeef;
CPU (h_gr[((UINT) 5)]) = 0xdeadbeef;
CPU (h_gr[((UINT) 6)]) = 0xdeadbeef;
CPU (h_gr[((UINT) 7)]) = 0xdeadbeef;
CPU (h_gr[((UINT) 8)]) = 0xdeadbeef;
CPU (h_gr[((UINT) 9)]) = 0xdeadbeef;
CPU (h_gr[((UINT) 10)]) = 0xdeadbeef;
CPU (h_gr[((UINT) 11)]) = 0xdeadbeef;
CPU (h_gr[((UINT) 12)]) = 0xdeadbeef;
CPU (h_gr[((UINT) 13)]) = 0xdeadbeef;
CPU (h_gr[((UINT) 14)]) = 0xdeadbeef;
CPU (h_gr[((UINT) 15)]) = 0xdeadbeef;
  {
    SI opval = CPU (h_gr[((UINT) 31)]);
    CPU (h_gr[((UINT) 0)]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr-0", 'x', opval);
  }
  {
    SI opval = tmp_temp;
    CPU (h_gr[((UINT) 31)]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr-31", 'x', opval);
  }
  {
    SI opval = ADDSI (tmp_temp, 64);
    CPU (h_gr[((UINT) 1)]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr-1", 'x', opval);
  }
} while (0);

  SEM_BRANCH_FINI (vpc);
  return vpc;
#undef FLD
}

/* ret: ret */

SEM_PC
SEM_FN_NAME (i960base,ret) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.cti.fields.fmt_ret.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

do {
  {
    SI opval = CPU (h_gr[((UINT) 0)]);
    CPU (h_gr[((UINT) 31)]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr-31", 'x', opval);
  }
CPU (h_gr[((UINT) 0)]) = GETMEMSI (current_cpu, pc, ADDSI (CPU (h_gr[((UINT) 31)]), 0));
CPU (h_gr[((UINT) 1)]) = GETMEMSI (current_cpu, pc, ADDSI (CPU (h_gr[((UINT) 31)]), 4));
CPU (h_gr[((UINT) 2)]) = GETMEMSI (current_cpu, pc, ADDSI (CPU (h_gr[((UINT) 31)]), 8));
CPU (h_gr[((UINT) 3)]) = GETMEMSI (current_cpu, pc, ADDSI (CPU (h_gr[((UINT) 31)]), 12));
CPU (h_gr[((UINT) 4)]) = GETMEMSI (current_cpu, pc, ADDSI (CPU (h_gr[((UINT) 31)]), 16));
CPU (h_gr[((UINT) 5)]) = GETMEMSI (current_cpu, pc, ADDSI (CPU (h_gr[((UINT) 31)]), 20));
CPU (h_gr[((UINT) 6)]) = GETMEMSI (current_cpu, pc, ADDSI (CPU (h_gr[((UINT) 31)]), 24));
CPU (h_gr[((UINT) 7)]) = GETMEMSI (current_cpu, pc, ADDSI (CPU (h_gr[((UINT) 31)]), 28));
CPU (h_gr[((UINT) 8)]) = GETMEMSI (current_cpu, pc, ADDSI (CPU (h_gr[((UINT) 31)]), 32));
CPU (h_gr[((UINT) 9)]) = GETMEMSI (current_cpu, pc, ADDSI (CPU (h_gr[((UINT) 31)]), 36));
CPU (h_gr[((UINT) 10)]) = GETMEMSI (current_cpu, pc, ADDSI (CPU (h_gr[((UINT) 31)]), 40));
CPU (h_gr[((UINT) 11)]) = GETMEMSI (current_cpu, pc, ADDSI (CPU (h_gr[((UINT) 31)]), 44));
CPU (h_gr[((UINT) 12)]) = GETMEMSI (current_cpu, pc, ADDSI (CPU (h_gr[((UINT) 31)]), 48));
CPU (h_gr[((UINT) 13)]) = GETMEMSI (current_cpu, pc, ADDSI (CPU (h_gr[((UINT) 31)]), 52));
CPU (h_gr[((UINT) 14)]) = GETMEMSI (current_cpu, pc, ADDSI (CPU (h_gr[((UINT) 31)]), 56));
CPU (h_gr[((UINT) 15)]) = GETMEMSI (current_cpu, pc, ADDSI (CPU (h_gr[((UINT) 31)]), 60));
  {
    USI opval = CPU (h_gr[((UINT) 2)]);
    SEM_BRANCH_VIA_ADDR (current_cpu, sem_arg, opval, vpc);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
} while (0);

  SEM_BRANCH_FINI (vpc);
  return vpc;
#undef FLD
}

/* calls: calls $src1 */

SEM_PC
SEM_FN_NAME (i960base,calls) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.cti.fields.fmt_calls.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = i960_trap (current_cpu, pc, * FLD (i_src1));
    SEM_BRANCH_VIA_ADDR (current_cpu, sem_arg, opval, vpc);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }

  SEM_BRANCH_FINI (vpc);
  return vpc;
#undef FLD
}

/* fmark: fmark */

SEM_PC
SEM_FN_NAME (i960base,fmark) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.cti.fields.fmt_fmark.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = i960_breakpoint (current_cpu, pc);
    SEM_BRANCH_VIA_ADDR (current_cpu, sem_arg, opval, vpc);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }

  SEM_BRANCH_FINI (vpc);
  return vpc;
#undef FLD
}

/* flushreg: flushreg */

SEM_PC
SEM_FN_NAME (i960base,flushreg) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_flushreg.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

do { } while (0); /*nop*/

  return vpc;
#undef FLD
}

@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Initial creation of sourceware repository
@
text
@@


1.1.1.2
log
@import gdb-19990422 snapshot
@
text
@a1442 84
/* xnor: xnor $src1, $src2, $dst */

SEM_PC
SEM_FN_NAME (i960base,xnor) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_mulo.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = INVSI (XORSI (* FLD (i_src1), * FLD (i_src2)));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* xnor1: xnor $lit1, $src2, $dst */

SEM_PC
SEM_FN_NAME (i960base,xnor1) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_mulo1.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = INVSI (XORSI (FLD (f_src1), * FLD (i_src2)));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* xnor2: xnor $src1, $lit2, $dst */

SEM_PC
SEM_FN_NAME (i960base,xnor2) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_mulo2.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = INVSI (XORSI (* FLD (i_src1), FLD (f_src2)));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* xnor3: xnor $lit1, $lit2, $dst */

SEM_PC
SEM_FN_NAME (i960base,xnor3) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_mulo3.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = INVSI (XORSI (FLD (f_src1), FLD (f_src2)));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

a1526 84
/* ornot: ornot $src1, $src2, $dst */

SEM_PC
SEM_FN_NAME (i960base,ornot) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_mulo.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = ORSI (* FLD (i_src2), INVSI (* FLD (i_src1)));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* ornot1: ornot $lit1, $src2, $dst */

SEM_PC
SEM_FN_NAME (i960base,ornot1) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_mulo1.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = ORSI (* FLD (i_src2), INVSI (FLD (f_src1)));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* ornot2: ornot $src1, $lit2, $dst */

SEM_PC
SEM_FN_NAME (i960base,ornot2) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_mulo2.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = ORSI (FLD (f_src2), INVSI (* FLD (i_src1)));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* ornot3: ornot $lit1, $lit2, $dst */

SEM_PC
SEM_FN_NAME (i960base,ornot3) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_mulo3.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = ORSI (FLD (f_src2), INVSI (FLD (f_src1)));
    * FLD (i_dst) = opval;
    TRACE_RESULT (current_cpu, abuf, "dst", 'x', opval);
  }

  return vpc;
#undef FLD
}

d1616 1
a1616 1
#define FLD(f) abuf->fields.fmt_shlo.f
d1623 1
a1623 1
    SI opval = (GEUSI (* FLD (i_src1), 32)) ? (0) : (SLLSI (* FLD (i_src2), * FLD (i_src1)));
d1637 1
a1637 1
#define FLD(f) abuf->fields.fmt_shlo1.f
d1644 1
a1644 1
    SI opval = (GEUSI (FLD (f_src1), 32)) ? (0) : (SLLSI (* FLD (i_src2), FLD (f_src1)));
d1658 1
a1658 1
#define FLD(f) abuf->fields.fmt_shlo2.f
d1665 1
a1665 1
    SI opval = (GEUSI (* FLD (i_src1), 32)) ? (0) : (SLLSI (FLD (f_src2), * FLD (i_src1)));
d1679 1
a1679 1
#define FLD(f) abuf->fields.fmt_shlo3.f
d1686 1
a1686 1
    SI opval = (GEUSI (FLD (f_src1), 32)) ? (0) : (SLLSI (FLD (f_src2), FLD (f_src1)));
d1700 1
a1700 1
#define FLD(f) abuf->fields.fmt_shlo.f
d1707 1
a1707 1
    SI opval = (GEUSI (* FLD (i_src1), 32)) ? (0) : (SRLSI (* FLD (i_src2), * FLD (i_src1)));
d1721 1
a1721 1
#define FLD(f) abuf->fields.fmt_shlo1.f
d1728 1
a1728 1
    SI opval = (GEUSI (FLD (f_src1), 32)) ? (0) : (SRLSI (* FLD (i_src2), FLD (f_src1)));
d1742 1
a1742 1
#define FLD(f) abuf->fields.fmt_shlo2.f
d1749 1
a1749 1
    SI opval = (GEUSI (* FLD (i_src1), 32)) ? (0) : (SRLSI (FLD (f_src2), * FLD (i_src1)));
d1763 1
a1763 1
#define FLD(f) abuf->fields.fmt_shlo3.f
d1770 1
a1770 1
    SI opval = (GEUSI (FLD (f_src1), 32)) ? (0) : (SRLSI (FLD (f_src2), FLD (f_src1)));
d1784 1
a1784 1
#define FLD(f) abuf->fields.fmt_shlo.f
d1791 1
a1791 1
    SI opval = (GEUSI (* FLD (i_src1), 32)) ? (0) : (SLLSI (* FLD (i_src2), * FLD (i_src1)));
d1805 1
a1805 1
#define FLD(f) abuf->fields.fmt_shlo1.f
d1812 1
a1812 1
    SI opval = (GEUSI (FLD (f_src1), 32)) ? (0) : (SLLSI (* FLD (i_src2), FLD (f_src1)));
d1826 1
a1826 1
#define FLD(f) abuf->fields.fmt_shlo2.f
d1833 1
a1833 1
    SI opval = (GEUSI (* FLD (i_src1), 32)) ? (0) : (SLLSI (FLD (f_src2), * FLD (i_src1)));
d1847 1
a1847 1
#define FLD(f) abuf->fields.fmt_shlo3.f
d1854 1
a1854 1
    SI opval = (GEUSI (FLD (f_src1), 32)) ? (0) : (SLLSI (FLD (f_src2), FLD (f_src1)));
d1868 1
a1868 1
#define FLD(f) abuf->fields.fmt_shlo.f
d1875 1
a1875 1
    SI opval = (GEUSI (* FLD (i_src1), 32)) ? (SRASI (* FLD (i_src2), 31)) : (SRASI (* FLD (i_src2), * FLD (i_src1)));
d1889 1
a1889 1
#define FLD(f) abuf->fields.fmt_shlo1.f
d1896 1
a1896 1
    SI opval = (GEUSI (FLD (f_src1), 32)) ? (SRASI (* FLD (i_src2), 31)) : (SRASI (* FLD (i_src2), FLD (f_src1)));
d1910 1
a1910 1
#define FLD(f) abuf->fields.fmt_shlo2.f
d1917 1
a1917 1
    SI opval = (GEUSI (* FLD (i_src1), 32)) ? (SRASI (FLD (f_src2), 31)) : (SRASI (FLD (f_src2), * FLD (i_src1)));
d1931 1
a1931 1
#define FLD(f) abuf->fields.fmt_shlo3.f
d1938 1
a1938 1
    SI opval = (GEUSI (FLD (f_src1), 32)) ? (SRASI (FLD (f_src2), 31)) : (SRASI (FLD (f_src2), FLD (f_src1)));
d1958 2
a1959 1
{
a1960 1
  SI tmp_dregno;
d1971 1
a1971 1
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-1", 'x', opval);
d1973 1
a1973 1
}
d1990 2
a1991 1
{
a1992 1
  SI tmp_dregno;
d2003 1
a2003 1
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-1", 'x', opval);
d2005 1
a2005 1
}
d2022 2
a2023 1
{
a2024 1
  SI tmp_dregno;
d2035 1
a2035 1
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-1", 'x', opval);
d2037 1
a2037 1
}
d2054 2
a2055 1
{
a2056 1
  SI tmp_dregno;
d2067 1
a2067 1
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-1", 'x', opval);
d2069 1
a2069 1
}
d2128 2
a2129 1
{
a2130 1
  SI tmp_sregno;
d2141 1
a2141 1
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-1", 'x', opval);
d2143 1
a2143 1
}
d2160 1
a2160 1
{
d2171 1
a2171 1
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-1", 'x', opval);
d2173 1
a2173 1
}
d2190 2
a2191 1
{
a2192 1
  SI tmp_sregno;
d2203 1
a2203 1
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-1", 'x', opval);
d2208 1
a2208 1
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-2", 'x', opval);
d2210 1
a2210 1
}
d2227 1
a2227 1
{
d2238 1
a2238 1
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-1", 'x', opval);
d2243 1
a2243 1
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-2", 'x', opval);
d2245 1
a2245 1
}
d2262 2
a2263 1
{
a2264 1
  SI tmp_sregno;
d2275 1
a2275 1
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-1", 'x', opval);
d2280 1
a2280 1
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-2", 'x', opval);
d2285 1
a2285 1
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-3", 'x', opval);
d2287 1
a2287 1
}
d2304 1
a2304 1
{
d2315 1
a2315 1
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-1", 'x', opval);
d2320 1
a2320 1
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-2", 'x', opval);
d2325 1
a2325 1
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-3", 'x', opval);
d2327 1
a2327 1
}
d3394 2
a3395 1
{
a3396 1
  SI tmp_dregno;
d3407 1
a3407 1
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-1", 'x', opval);
d3409 1
a3409 1
}
d3426 2
a3427 1
{
a3428 1
  SI tmp_dregno;
d3439 1
a3439 1
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-1", 'x', opval);
d3441 1
a3441 1
}
d3458 2
a3459 1
{
a3460 1
  SI tmp_dregno;
d3471 1
a3471 1
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-1", 'x', opval);
d3473 1
a3473 1
}
d3490 2
a3491 1
{
a3492 1
  SI tmp_dregno;
d3503 1
a3503 1
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-1", 'x', opval);
d3505 1
a3505 1
}
d3522 2
a3523 1
{
a3524 1
  SI tmp_dregno;
d3535 1
a3535 1
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-1", 'x', opval);
d3537 1
a3537 1
}
d3554 2
a3555 1
{
a3556 1
  SI tmp_dregno;
d3567 1
a3567 1
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-1", 'x', opval);
d3569 1
a3569 1
}
d3586 2
a3587 1
{
a3588 1
  SI tmp_dregno;
d3599 1
a3599 1
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-1", 'x', opval);
d3601 1
a3601 1
}
d3618 2
a3619 1
{
a3620 1
  SI tmp_dregno;
d3631 1
a3631 1
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-1", 'x', opval);
d3633 1
a3633 1
}
d3650 2
a3651 1
{
a3652 1
  SI tmp_dregno;
d3663 1
a3663 1
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-1", 'x', opval);
d3668 1
a3668 1
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-2", 'x', opval);
d3670 1
a3670 1
}
d3687 2
a3688 1
{
a3689 1
  SI tmp_dregno;
d3700 1
a3700 1
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-1", 'x', opval);
d3705 1
a3705 1
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-2", 'x', opval);
d3707 1
a3707 1
}
d3724 2
a3725 1
{
a3726 1
  SI tmp_dregno;
d3737 1
a3737 1
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-1", 'x', opval);
d3742 1
a3742 1
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-2", 'x', opval);
d3744 1
a3744 1
}
d3761 2
a3762 1
{
a3763 1
  SI tmp_dregno;
d3774 1
a3774 1
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-1", 'x', opval);
d3779 1
a3779 1
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-2", 'x', opval);
d3781 1
a3781 1
}
d3798 2
a3799 1
{
a3800 1
  SI tmp_dregno;
d3811 1
a3811 1
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-1", 'x', opval);
d3816 1
a3816 1
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-2", 'x', opval);
d3818 1
a3818 1
}
d3835 2
a3836 1
{
a3837 1
  SI tmp_dregno;
d3848 1
a3848 1
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-1", 'x', opval);
d3853 1
a3853 1
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-2", 'x', opval);
d3855 1
a3855 1
}
d3872 2
a3873 1
{
a3874 1
  SI tmp_dregno;
d3885 1
a3885 1
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-1", 'x', opval);
d3890 1
a3890 1
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-2", 'x', opval);
d3892 1
a3892 1
}
d3909 2
a3910 1
{
a3911 1
  SI tmp_dregno;
d3922 1
a3922 1
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-1", 'x', opval);
d3927 1
a3927 1
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-2", 'x', opval);
d3929 1
a3929 1
}
d3946 2
a3947 1
{
a3948 1
  SI tmp_dregno;
d3959 1
a3959 1
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-1", 'x', opval);
d3964 1
a3964 1
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-2", 'x', opval);
d3969 1
a3969 1
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-3", 'x', opval);
d3971 1
a3971 1
}
d3988 2
a3989 1
{
a3990 1
  SI tmp_dregno;
d4001 1
a4001 1
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-1", 'x', opval);
d4006 1
a4006 1
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-2", 'x', opval);
d4011 1
a4011 1
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-3", 'x', opval);
d4013 1
a4013 1
}
d4030 2
a4031 1
{
a4032 1
  SI tmp_dregno;
d4043 1
a4043 1
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-1", 'x', opval);
d4048 1
a4048 1
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-2", 'x', opval);
d4053 1
a4053 1
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-3", 'x', opval);
d4055 1
a4055 1
}
d4072 2
a4073 1
{
a4074 1
  SI tmp_dregno;
d4085 1
a4085 1
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-1", 'x', opval);
d4090 1
a4090 1
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-2", 'x', opval);
d4095 1
a4095 1
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-3", 'x', opval);
d4097 1
a4097 1
}
d4114 2
a4115 1
{
a4116 1
  SI tmp_dregno;
d4127 1
a4127 1
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-1", 'x', opval);
d4132 1
a4132 1
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-2", 'x', opval);
d4137 1
a4137 1
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-3", 'x', opval);
d4139 1
a4139 1
}
d4156 2
a4157 1
{
a4158 1
  SI tmp_dregno;
d4169 1
a4169 1
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-1", 'x', opval);
d4174 1
a4174 1
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-2", 'x', opval);
d4179 1
a4179 1
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-3", 'x', opval);
d4181 1
a4181 1
}
d4198 2
a4199 1
{
a4200 1
  SI tmp_dregno;
d4211 1
a4211 1
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-1", 'x', opval);
d4216 1
a4216 1
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-2", 'x', opval);
d4221 1
a4221 1
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-3", 'x', opval);
d4223 1
a4223 1
}
d4240 2
a4241 1
{
a4242 1
  SI tmp_dregno;
d4253 1
a4253 1
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-1", 'x', opval);
d4258 1
a4258 1
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-2", 'x', opval);
d4263 1
a4263 1
    TRACE_RESULT (current_cpu, abuf, "gr-add:-VM-index-of-dst-3", 'x', opval);
d4265 1
a4265 1
}
d4786 1
a4786 1
{
d4799 1
a4799 1
}
d4816 1
a4816 1
{
d4829 1
a4829 1
}
d4846 1
a4846 1
{
d4859 1
a4859 1
}
d4876 1
a4876 1
{
d4889 1
a4889 1
}
d4906 1
a4906 1
{
d4919 1
a4919 1
}
d4936 1
a4936 1
{
d4949 1
a4949 1
}
d4966 1
a4966 1
{
d4979 1
a4979 1
}
d4996 1
a4996 1
{
d5009 1
a5009 1
}
d5026 1
a5026 1
{
d5044 1
a5044 1
}
d5061 1
a5061 1
{
d5079 1
a5079 1
}
d5096 1
a5096 1
{
d5114 1
a5114 1
}
d5131 1
a5131 1
{
d5149 1
a5149 1
}
d5166 1
a5166 1
{
d5184 1
a5184 1
}
d5201 1
a5201 1
{
d5219 1
a5219 1
}
d5236 1
a5236 1
{
d5254 1
a5254 1
}
d5271 1
a5271 1
{
d5289 1
a5289 1
}
d5306 1
a5306 1
{
d5329 1
a5329 1
}
d5346 1
a5346 1
{
d5369 1
a5369 1
}
d5386 1
a5386 1
{
d5409 1
a5409 1
}
d5426 1
a5426 1
{
d5449 1
a5449 1
}
d5466 1
a5466 1
{
d5489 1
a5489 1
}
d5506 1
a5506 1
{
d5529 1
a5529 1
}
d5546 1
a5546 1
{
d5569 1
a5569 1
}
d5586 1
a5586 1
{
d5609 1
a5609 1
}
d6385 1
a6385 1
    TRACE_RESULT (current_cpu, abuf, "cc", 'x', opval);
d6406 1
a6406 1
    TRACE_RESULT (current_cpu, abuf, "cc", 'x', opval);
d6427 1
a6427 1
    TRACE_RESULT (current_cpu, abuf, "cc", 'x', opval);
d6448 1
a6448 1
    TRACE_RESULT (current_cpu, abuf, "cc", 'x', opval);
d6469 1
a6469 1
    TRACE_RESULT (current_cpu, abuf, "cc", 'x', opval);
d6490 1
a6490 1
    TRACE_RESULT (current_cpu, abuf, "cc", 'x', opval);
d6511 1
a6511 1
    TRACE_RESULT (current_cpu, abuf, "cc", 'x', opval);
d6532 1
a6532 1
    TRACE_RESULT (current_cpu, abuf, "cc", 'x', opval);
d7073 1
a7073 1
{
d7133 1
a7133 1
}
d7152 1
a7152 1
{
d7212 1
a7212 1
}
d7231 1
a7231 1
{
d7291 1
a7291 1
}
d7310 1
a7310 1
{
d7337 1
a7337 1
}
@


1.1.1.3
log
@import gdb-1999-08-09 snapshot
@
text
@a34 11
/* This is used so that we can compile two copies of the semantic code,
   one with full feature support and one without that runs fast(er).
   FAST_P, when desired, is defined on the command line, -DFAST_P=1.  */
#if FAST_P
#define SEM_FN_NAME(cpu,fn) XCONCAT3 (cpu,_semf_,fn)
#undef TRACE_RESULT
#define TRACE_RESULT(cpu, abuf, name, type, val)
#else
#define SEM_FN_NAME(cpu,fn) XCONCAT3 (cpu,_sem_,fn)
#endif

d37 1
a37 1
static SEM_PC
d62 1
a62 1
static SEM_PC
d83 1
a83 1
static SEM_PC
d104 1
a104 1
static SEM_PC
d117 1
a117 1
			       pbb_br_type, pbb_br_npc);
d122 1
a122 1
			       CPU_PBB_BR_TYPE (current_cpu),
d134 1
a134 1
static SEM_PC
d158 1
a158 1
static SEM_PC
d185 1
a185 1
static SEM_PC
d188 1
a188 1
#define FLD(f) abuf->fields.sfmt_emul.f
d206 1
a206 1
static SEM_PC
d209 1
a209 1
#define FLD(f) abuf->fields.sfmt_emul1.f
d227 1
a227 1
static SEM_PC
d230 1
a230 1
#define FLD(f) abuf->fields.sfmt_emul2.f
d248 1
a248 1
static SEM_PC
d251 1
a251 1
#define FLD(f) abuf->fields.sfmt_emul3.f
d269 1
a269 1
static SEM_PC
d272 1
a272 1
#define FLD(f) abuf->fields.sfmt_emul.f
d290 1
a290 1
static SEM_PC
d293 1
a293 1
#define FLD(f) abuf->fields.sfmt_emul1.f
d311 1
a311 1
static SEM_PC
d314 1
a314 1
#define FLD(f) abuf->fields.sfmt_emul2.f
d332 1
a332 1
static SEM_PC
d335 1
a335 1
#define FLD(f) abuf->fields.sfmt_emul3.f
d353 1
a353 1
static SEM_PC
d356 1
a356 1
#define FLD(f) abuf->fields.sfmt_emul.f
d374 1
a374 1
static SEM_PC
d377 1
a377 1
#define FLD(f) abuf->fields.sfmt_emul1.f
d395 1
a395 1
static SEM_PC
d398 1
a398 1
#define FLD(f) abuf->fields.sfmt_emul2.f
d416 1
a416 1
static SEM_PC
d419 1
a419 1
#define FLD(f) abuf->fields.sfmt_emul3.f
d437 1
a437 1
static SEM_PC
d440 1
a440 1
#define FLD(f) abuf->fields.sfmt_emul.f
d458 1
a458 1
static SEM_PC
d461 1
a461 1
#define FLD(f) abuf->fields.sfmt_emul1.f
d479 1
a479 1
static SEM_PC
d482 1
a482 1
#define FLD(f) abuf->fields.sfmt_emul2.f
d500 1
a500 1
static SEM_PC
d503 1
a503 1
#define FLD(f) abuf->fields.sfmt_emul3.f
d521 1
a521 1
static SEM_PC
d524 1
a524 1
#define FLD(f) abuf->fields.sfmt_emul.f
d542 1
a542 1
static SEM_PC
d545 1
a545 1
#define FLD(f) abuf->fields.sfmt_emul1.f
d563 1
a563 1
static SEM_PC
d566 1
a566 1
#define FLD(f) abuf->fields.sfmt_emul2.f
d584 1
a584 1
static SEM_PC
d587 1
a587 1
#define FLD(f) abuf->fields.sfmt_emul3.f
d605 1
a605 1
static SEM_PC
d608 1
a608 1
#define FLD(f) abuf->fields.sfmt_emul.f
d626 1
a626 1
static SEM_PC
d629 1
a629 1
#define FLD(f) abuf->fields.sfmt_emul1.f
d647 1
a647 1
static SEM_PC
d650 1
a650 1
#define FLD(f) abuf->fields.sfmt_emul2.f
d668 1
a668 1
static SEM_PC
d671 1
a671 1
#define FLD(f) abuf->fields.sfmt_emul3.f
d689 1
a689 1
static SEM_PC
d692 1
a692 1
#define FLD(f) abuf->fields.sfmt_emul.f
d710 1
a710 1
static SEM_PC
d713 1
a713 1
#define FLD(f) abuf->fields.sfmt_emul1.f
d731 1
a731 1
static SEM_PC
d734 1
a734 1
#define FLD(f) abuf->fields.sfmt_emul2.f
d752 1
a752 1
static SEM_PC
d755 1
a755 1
#define FLD(f) abuf->fields.sfmt_emul3.f
d773 1
a773 1
static SEM_PC
d776 1
a776 1
#define FLD(f) abuf->fields.sfmt_emul.f
d794 1
a794 1
static SEM_PC
d797 1
a797 1
#define FLD(f) abuf->fields.sfmt_emul1.f
d815 1
a815 1
static SEM_PC
d818 1
a818 1
#define FLD(f) abuf->fields.sfmt_emul2.f
d836 1
a836 1
static SEM_PC
d839 1
a839 1
#define FLD(f) abuf->fields.sfmt_emul3.f
d857 1
a857 1
static SEM_PC
d860 1
a860 1
#define FLD(f) abuf->fields.sfmt_emul.f
d878 1
a878 1
static SEM_PC
d881 1
a881 1
#define FLD(f) abuf->fields.sfmt_emul1.f
d899 1
a899 1
static SEM_PC
d902 1
a902 1
#define FLD(f) abuf->fields.sfmt_emul2.f
d920 1
a920 1
static SEM_PC
d923 1
a923 1
#define FLD(f) abuf->fields.sfmt_emul3.f
d941 1
a941 1
static SEM_PC
d944 1
a944 1
#define FLD(f) abuf->fields.sfmt_emul.f
d962 1
a962 1
static SEM_PC
d965 1
a965 1
#define FLD(f) abuf->fields.sfmt_emul1.f
d983 1
a983 1
static SEM_PC
d986 1
a986 1
#define FLD(f) abuf->fields.sfmt_emul2.f
d1004 1
a1004 1
static SEM_PC
d1007 1
a1007 1
#define FLD(f) abuf->fields.sfmt_emul3.f
d1025 1
a1025 1
static SEM_PC
d1028 1
a1028 1
#define FLD(f) abuf->fields.sfmt_emul.f
d1046 1
a1046 1
static SEM_PC
d1049 1
a1049 1
#define FLD(f) abuf->fields.sfmt_emul1.f
d1067 1
a1067 1
static SEM_PC
d1070 1
a1070 1
#define FLD(f) abuf->fields.sfmt_emul2.f
d1088 1
a1088 1
static SEM_PC
d1091 1
a1091 1
#define FLD(f) abuf->fields.sfmt_emul3.f
d1109 1
a1109 1
static SEM_PC
d1112 1
a1112 1
#define FLD(f) abuf->fields.sfmt_emul.f
d1130 1
a1130 1
static SEM_PC
d1133 1
a1133 1
#define FLD(f) abuf->fields.sfmt_emul1.f
d1151 1
a1151 1
static SEM_PC
d1154 1
a1154 1
#define FLD(f) abuf->fields.sfmt_emul2.f
d1172 1
a1172 1
static SEM_PC
d1175 1
a1175 1
#define FLD(f) abuf->fields.sfmt_emul3.f
d1193 1
a1193 1
static SEM_PC
d1196 1
a1196 1
#define FLD(f) abuf->fields.sfmt_emul.f
d1214 1
a1214 1
static SEM_PC
d1217 1
a1217 1
#define FLD(f) abuf->fields.sfmt_emul1.f
d1235 1
a1235 1
static SEM_PC
d1238 1
a1238 1
#define FLD(f) abuf->fields.sfmt_emul2.f
d1256 1
a1256 1
static SEM_PC
d1259 1
a1259 1
#define FLD(f) abuf->fields.sfmt_emul3.f
d1277 1
a1277 1
static SEM_PC
d1280 1
a1280 1
#define FLD(f) abuf->fields.sfmt_emul.f
d1298 1
a1298 1
static SEM_PC
d1301 1
a1301 1
#define FLD(f) abuf->fields.sfmt_emul1.f
d1319 1
a1319 1
static SEM_PC
d1322 1
a1322 1
#define FLD(f) abuf->fields.sfmt_emul2.f
d1340 1
a1340 1
static SEM_PC
d1343 1
a1343 1
#define FLD(f) abuf->fields.sfmt_emul3.f
d1361 1
a1361 1
static SEM_PC
d1364 1
a1364 1
#define FLD(f) abuf->fields.sfmt_emul.f
d1382 1
a1382 1
static SEM_PC
d1385 1
a1385 1
#define FLD(f) abuf->fields.sfmt_emul1.f
d1403 1
a1403 1
static SEM_PC
d1406 1
a1406 1
#define FLD(f) abuf->fields.sfmt_emul2.f
d1424 1
a1424 1
static SEM_PC
d1427 1
a1427 1
#define FLD(f) abuf->fields.sfmt_emul3.f
d1445 1
a1445 1
static SEM_PC
d1448 1
a1448 1
#define FLD(f) abuf->fields.sfmt_emul.f
d1466 1
a1466 1
static SEM_PC
d1469 1
a1469 1
#define FLD(f) abuf->fields.sfmt_emul1.f
d1487 1
a1487 1
static SEM_PC
d1490 1
a1490 1
#define FLD(f) abuf->fields.sfmt_emul2.f
d1508 1
a1508 1
static SEM_PC
d1511 1
a1511 1
#define FLD(f) abuf->fields.sfmt_emul3.f
d1529 1
a1529 1
static SEM_PC
d1532 1
a1532 1
#define FLD(f) abuf->fields.sfmt_emul2.f
d1550 1
a1550 1
static SEM_PC
d1553 1
a1553 1
#define FLD(f) abuf->fields.sfmt_emul3.f
d1571 1
a1571 1
static SEM_PC
d1574 1
a1574 1
#define FLD(f) abuf->fields.sfmt_emul2.f
d1592 1
a1592 1
static SEM_PC
d1595 1
a1595 1
#define FLD(f) abuf->fields.sfmt_emul3.f
d1613 1
a1613 1
static SEM_PC
d1616 1
a1616 1
#define FLD(f) abuf->fields.sfmt_emul.f
d1634 1
a1634 1
static SEM_PC
d1637 1
a1637 1
#define FLD(f) abuf->fields.sfmt_emul1.f
d1655 1
a1655 1
static SEM_PC
d1658 1
a1658 1
#define FLD(f) abuf->fields.sfmt_emul2.f
d1676 1
a1676 1
static SEM_PC
d1679 1
a1679 1
#define FLD(f) abuf->fields.sfmt_emul3.f
d1697 1
a1697 1
static SEM_PC
d1700 1
a1700 1
#define FLD(f) abuf->fields.sfmt_emul.f
d1718 1
a1718 1
static SEM_PC
d1721 1
a1721 1
#define FLD(f) abuf->fields.sfmt_emul1.f
d1739 1
a1739 1
static SEM_PC
d1742 1
a1742 1
#define FLD(f) abuf->fields.sfmt_emul2.f
d1760 1
a1760 1
static SEM_PC
d1763 1
a1763 1
#define FLD(f) abuf->fields.sfmt_emul3.f
d1781 1
a1781 1
static SEM_PC
d1784 1
a1784 1
#define FLD(f) abuf->fields.sfmt_emul.f
d1802 1
a1802 1
static SEM_PC
d1805 1
a1805 1
#define FLD(f) abuf->fields.sfmt_emul1.f
d1823 1
a1823 1
static SEM_PC
d1826 1
a1826 1
#define FLD(f) abuf->fields.sfmt_emul2.f
d1844 1
a1844 1
static SEM_PC
d1847 1
a1847 1
#define FLD(f) abuf->fields.sfmt_emul3.f
d1865 1
a1865 1
static SEM_PC
d1868 1
a1868 1
#define FLD(f) abuf->fields.sfmt_emul.f
d1886 1
a1886 1
static SEM_PC
d1889 1
a1889 1
#define FLD(f) abuf->fields.sfmt_emul1.f
d1907 1
a1907 1
static SEM_PC
d1910 1
a1910 1
#define FLD(f) abuf->fields.sfmt_emul2.f
d1928 1
a1928 1
static SEM_PC
d1931 1
a1931 1
#define FLD(f) abuf->fields.sfmt_emul3.f
d1949 1
a1949 1
static SEM_PC
d1952 1
a1952 1
#define FLD(f) abuf->fields.sfmt_emul.f
d1970 1
a1970 1
static SEM_PC
d1973 1
a1973 1
#define FLD(f) abuf->fields.sfmt_emul1.f
d1991 1
a1991 1
static SEM_PC
d1994 1
a1994 1
#define FLD(f) abuf->fields.sfmt_emul2.f
d2012 1
a2012 1
static SEM_PC
d2015 1
a2015 1
#define FLD(f) abuf->fields.sfmt_emul3.f
d2033 1
a2033 1
static SEM_PC
d2036 1
a2036 1
#define FLD(f) abuf->fields.sfmt_emul.f
d2054 1
a2054 1
static SEM_PC
d2057 1
a2057 1
#define FLD(f) abuf->fields.sfmt_emul1.f
d2075 1
a2075 1
static SEM_PC
d2078 1
a2078 1
#define FLD(f) abuf->fields.sfmt_emul2.f
d2096 1
a2096 1
static SEM_PC
d2099 1
a2099 1
#define FLD(f) abuf->fields.sfmt_emul3.f
d2117 1
a2117 1
static SEM_PC
d2120 1
a2120 1
#define FLD(f) abuf->fields.sfmt_emul.f
d2149 1
a2149 1
static SEM_PC
d2152 1
a2152 1
#define FLD(f) abuf->fields.sfmt_emul1.f
d2181 1
a2181 1
static SEM_PC
d2184 1
a2184 1
#define FLD(f) abuf->fields.sfmt_emul2.f
d2213 1
a2213 1
static SEM_PC
d2216 1
a2216 1
#define FLD(f) abuf->fields.sfmt_emul3.f
d2245 1
a2245 1
static SEM_PC
d2248 1
a2248 1
#define FLD(f) abuf->fields.sfmt_emul2.f
d2266 1
a2266 1
static SEM_PC
d2269 1
a2269 1
#define FLD(f) abuf->fields.sfmt_emul3.f
d2287 1
a2287 1
static SEM_PC
d2290 1
a2290 1
#define FLD(f) abuf->fields.sfmt_movq.f
d2319 1
a2319 1
static SEM_PC
d2322 1
a2322 1
#define FLD(f) abuf->fields.sfmt_emul3.f
d2349 1
a2349 1
static SEM_PC
d2352 1
a2352 1
#define FLD(f) abuf->fields.sfmt_movq.f
d2386 1
a2386 1
static SEM_PC
d2389 1
a2389 1
#define FLD(f) abuf->fields.sfmt_movq.f
d2421 1
a2421 1
static SEM_PC
d2424 1
a2424 1
#define FLD(f) abuf->fields.sfmt_movq.f
d2463 1
a2463 1
static SEM_PC
d2466 1
a2466 1
#define FLD(f) abuf->fields.sfmt_movq.f
d2503 1
a2503 1
static SEM_PC
d2506 1
a2506 1
#define FLD(f) abuf->fields.sfmt_emul1.f
d2524 1
a2524 1
static SEM_PC
d2527 1
a2527 1
#define FLD(f) abuf->fields.sfmt_emul1.f
d2545 1
a2545 1
static SEM_PC
d2548 1
a2548 1
#define FLD(f) abuf->fields.sfmt_ldq_indirect_offset.f
d2566 1
a2566 1
static SEM_PC
d2569 1
a2569 1
#define FLD(f) abuf->fields.sfmt_ldq_indirect_offset.f
d2587 1
a2587 1
static SEM_PC
d2590 1
a2590 1
#define FLD(f) abuf->fields.sfmt_ldq_indirect_offset.f
d2608 1
a2608 1
static SEM_PC
d2611 1
a2611 1
#define FLD(f) abuf->fields.sfmt_ldq_indirect_index_disp.f
d2629 1
a2629 1
static SEM_PC
d2632 1
a2632 1
#define FLD(f) abuf->fields.sfmt_ldq_indirect_index_disp.f
d2650 1
a2650 1
static SEM_PC
d2653 1
a2653 1
#define FLD(f) abuf->fields.sfmt_ldq_indirect_index_disp.f
d2671 1
a2671 1
static SEM_PC
d2674 1
a2674 1
#define FLD(f) abuf->fields.sfmt_ldq_indirect_index_disp.f
d2692 1
a2692 1
static SEM_PC
d2695 1
a2695 1
#define FLD(f) abuf->fields.sfmt_ldq_indirect_index_disp.f
d2713 1
a2713 1
static SEM_PC
d2716 1
a2716 1
#define FLD(f) abuf->fields.sfmt_ldq_indirect_offset.f
d2734 1
a2734 1
static SEM_PC
d2737 1
a2737 1
#define FLD(f) abuf->fields.sfmt_ldq_indirect_offset.f
d2755 1
a2755 1
static SEM_PC
d2758 1
a2758 1
#define FLD(f) abuf->fields.sfmt_ldq_indirect_offset.f
d2776 1
a2776 1
static SEM_PC
d2779 1
a2779 1
#define FLD(f) abuf->fields.sfmt_ldq_indirect_index_disp.f
d2797 1
a2797 1
static SEM_PC
d2800 1
a2800 1
#define FLD(f) abuf->fields.sfmt_ldq_indirect_index_disp.f
d2818 1
a2818 1
static SEM_PC
d2821 1
a2821 1
#define FLD(f) abuf->fields.sfmt_ldq_indirect_index_disp.f
d2839 1
a2839 1
static SEM_PC
d2842 1
a2842 1
#define FLD(f) abuf->fields.sfmt_ldq_indirect_index_disp.f
d2860 1
a2860 1
static SEM_PC
d2863 1
a2863 1
#define FLD(f) abuf->fields.sfmt_ldq_indirect_index_disp.f
d2881 1
a2881 1
static SEM_PC
d2884 1
a2884 1
#define FLD(f) abuf->fields.sfmt_ldq_indirect_offset.f
d2902 1
a2902 1
static SEM_PC
d2905 1
a2905 1
#define FLD(f) abuf->fields.sfmt_ldq_indirect_offset.f
d2923 1
a2923 1
static SEM_PC
d2926 1
a2926 1
#define FLD(f) abuf->fields.sfmt_ldq_indirect_offset.f
d2944 1
a2944 1
static SEM_PC
d2947 1
a2947 1
#define FLD(f) abuf->fields.sfmt_ldq_indirect_index_disp.f
d2965 1
a2965 1
static SEM_PC
d2968 1
a2968 1
#define FLD(f) abuf->fields.sfmt_ldq_indirect_index_disp.f
d2986 1
a2986 1
static SEM_PC
d2989 1
a2989 1
#define FLD(f) abuf->fields.sfmt_ldq_indirect_index_disp.f
d3007 1
a3007 1
static SEM_PC
d3010 1
a3010 1
#define FLD(f) abuf->fields.sfmt_ldq_indirect_index_disp.f
d3028 1
a3028 1
static SEM_PC
d3031 1
a3031 1
#define FLD(f) abuf->fields.sfmt_ldq_indirect_index_disp.f
d3049 1
a3049 1
static SEM_PC
d3052 1
a3052 1
#define FLD(f) abuf->fields.sfmt_ldq_indirect_offset.f
d3070 1
a3070 1
static SEM_PC
d3073 1
a3073 1
#define FLD(f) abuf->fields.sfmt_ldq_indirect_offset.f
d3091 1
a3091 1
static SEM_PC
d3094 1
a3094 1
#define FLD(f) abuf->fields.sfmt_ldq_indirect_offset.f
d3112 1
a3112 1
static SEM_PC
d3115 1
a3115 1
#define FLD(f) abuf->fields.sfmt_ldq_indirect_index_disp.f
d3133 1
a3133 1
static SEM_PC
d3136 1
a3136 1
#define FLD(f) abuf->fields.sfmt_ldq_indirect_index_disp.f
d3154 1
a3154 1
static SEM_PC
d3157 1
a3157 1
#define FLD(f) abuf->fields.sfmt_ldq_indirect_index_disp.f
d3175 1
a3175 1
static SEM_PC
d3178 1
a3178 1
#define FLD(f) abuf->fields.sfmt_ldq_indirect_index_disp.f
d3196 1
a3196 1
static SEM_PC
d3199 1
a3199 1
#define FLD(f) abuf->fields.sfmt_ldq_indirect_index_disp.f
d3217 1
a3217 1
static SEM_PC
d3220 1
a3220 1
#define FLD(f) abuf->fields.sfmt_ldq_indirect_offset.f
d3238 1
a3238 1
static SEM_PC
d3241 1
a3241 1
#define FLD(f) abuf->fields.sfmt_ldq_indirect_offset.f
d3259 1
a3259 1
static SEM_PC
d3262 1
a3262 1
#define FLD(f) abuf->fields.sfmt_ldq_indirect_offset.f
d3280 1
a3280 1
static SEM_PC
d3283 1
a3283 1
#define FLD(f) abuf->fields.sfmt_ldq_indirect_index_disp.f
d3301 1
a3301 1
static SEM_PC
d3304 1
a3304 1
#define FLD(f) abuf->fields.sfmt_ldq_indirect_index_disp.f
d3322 1
a3322 1
static SEM_PC
d3325 1
a3325 1
#define FLD(f) abuf->fields.sfmt_ldq_indirect_index_disp.f
d3343 1
a3343 1
static SEM_PC
d3346 1
a3346 1
#define FLD(f) abuf->fields.sfmt_ldq_indirect_index_disp.f
d3364 1
a3364 1
static SEM_PC
d3367 1
a3367 1
#define FLD(f) abuf->fields.sfmt_ldq_indirect_index_disp.f
d3385 1
a3385 1
static SEM_PC
d3388 1
a3388 1
#define FLD(f) abuf->fields.sfmt_ldq_indirect_offset.f
d3406 1
a3406 1
static SEM_PC
d3409 1
a3409 1
#define FLD(f) abuf->fields.sfmt_ldq_indirect_offset.f
d3427 1
a3427 1
static SEM_PC
d3430 1
a3430 1
#define FLD(f) abuf->fields.sfmt_ldq_indirect_offset.f
d3448 1
a3448 1
static SEM_PC
d3451 1
a3451 1
#define FLD(f) abuf->fields.sfmt_ldq_indirect_index_disp.f
d3469 1
a3469 1
static SEM_PC
d3472 1
a3472 1
#define FLD(f) abuf->fields.sfmt_ldq_indirect_index_disp.f
d3490 1
a3490 1
static SEM_PC
d3493 1
a3493 1
#define FLD(f) abuf->fields.sfmt_ldq_indirect_index_disp.f
d3511 1
a3511 1
static SEM_PC
d3514 1
a3514 1
#define FLD(f) abuf->fields.sfmt_ldq_indirect_index_disp.f
d3532 1
a3532 1
static SEM_PC
d3535 1
a3535 1
#define FLD(f) abuf->fields.sfmt_ldq_indirect_index_disp.f
d3553 1
a3553 1
static SEM_PC
d3556 1
a3556 1
#define FLD(f) abuf->fields.sfmt_ldq_indirect_offset.f
d3585 1
a3585 1
static SEM_PC
d3588 1
a3588 1
#define FLD(f) abuf->fields.sfmt_ldq_indirect_offset.f
d3617 1
a3617 1
static SEM_PC
d3620 1
a3620 1
#define FLD(f) abuf->fields.sfmt_ldq_indirect_offset.f
d3649 1
a3649 1
static SEM_PC
d3652 1
a3652 1
#define FLD(f) abuf->fields.sfmt_ldq_indirect_index_disp.f
d3681 1
a3681 1
static SEM_PC
d3684 1
a3684 1
#define FLD(f) abuf->fields.sfmt_ldq_indirect_index_disp.f
d3713 1
a3713 1
static SEM_PC
d3716 1
a3716 1
#define FLD(f) abuf->fields.sfmt_ldq_indirect_index_disp.f
d3745 1
a3745 1
static SEM_PC
d3748 1
a3748 1
#define FLD(f) abuf->fields.sfmt_ldq_indirect_index_disp.f
d3777 1
a3777 1
static SEM_PC
d3780 1
a3780 1
#define FLD(f) abuf->fields.sfmt_ldq_indirect_index_disp.f
d3809 1
a3809 1
static SEM_PC
d3812 1
a3812 1
#define FLD(f) abuf->fields.sfmt_ldq_indirect_offset.f
d3846 1
a3846 1
static SEM_PC
d3849 1
a3849 1
#define FLD(f) abuf->fields.sfmt_ldq_indirect_offset.f
d3883 1
a3883 1
static SEM_PC
d3886 1
a3886 1
#define FLD(f) abuf->fields.sfmt_ldq_indirect_offset.f
d3920 1
a3920 1
static SEM_PC
d3923 1
a3923 1
#define FLD(f) abuf->fields.sfmt_ldq_indirect_index_disp.f
d3957 1
a3957 1
static SEM_PC
d3960 1
a3960 1
#define FLD(f) abuf->fields.sfmt_ldq_indirect_index_disp.f
d3994 1
a3994 1
static SEM_PC
d3997 1
a3997 1
#define FLD(f) abuf->fields.sfmt_ldq_indirect_index_disp.f
d4031 1
a4031 1
static SEM_PC
d4034 1
a4034 1
#define FLD(f) abuf->fields.sfmt_ldq_indirect_index_disp.f
d4068 1
a4068 1
static SEM_PC
d4071 1
a4071 1
#define FLD(f) abuf->fields.sfmt_ldq_indirect_index_disp.f
d4105 1
a4105 1
static SEM_PC
d4108 1
a4108 1
#define FLD(f) abuf->fields.sfmt_ldq_indirect_offset.f
d4147 1
a4147 1
static SEM_PC
d4150 1
a4150 1
#define FLD(f) abuf->fields.sfmt_ldq_indirect_offset.f
d4189 1
a4189 1
static SEM_PC
d4192 1
a4192 1
#define FLD(f) abuf->fields.sfmt_ldq_indirect_offset.f
d4231 1
a4231 1
static SEM_PC
d4234 1
a4234 1
#define FLD(f) abuf->fields.sfmt_ldq_indirect_index_disp.f
d4273 1
a4273 1
static SEM_PC
d4276 1
a4276 1
#define FLD(f) abuf->fields.sfmt_ldq_indirect_index_disp.f
d4315 1
a4315 1
static SEM_PC
d4318 1
a4318 1
#define FLD(f) abuf->fields.sfmt_ldq_indirect_index_disp.f
d4357 1
a4357 1
static SEM_PC
d4360 1
a4360 1
#define FLD(f) abuf->fields.sfmt_ldq_indirect_index_disp.f
d4399 1
a4399 1
static SEM_PC
d4402 1
a4402 1
#define FLD(f) abuf->fields.sfmt_ldq_indirect_index_disp.f
d4441 1
a4441 1
static SEM_PC
d4444 1
a4444 1
#define FLD(f) abuf->fields.sfmt_stq_indirect_offset.f
d4462 1
a4462 1
static SEM_PC
d4465 1
a4465 1
#define FLD(f) abuf->fields.sfmt_stq_indirect_offset.f
d4483 1
a4483 1
static SEM_PC
d4486 1
a4486 1
#define FLD(f) abuf->fields.sfmt_stq_indirect_offset.f
d4504 1
a4504 1
static SEM_PC
d4507 1
a4507 1
#define FLD(f) abuf->fields.sfmt_stq_indirect_index_disp.f
d4525 1
a4525 1
static SEM_PC
d4528 1
a4528 1
#define FLD(f) abuf->fields.sfmt_stq_indirect_index_disp.f
d4546 1
a4546 1
static SEM_PC
d4549 1
a4549 1
#define FLD(f) abuf->fields.sfmt_stq_indirect_index_disp.f
d4567 1
a4567 1
static SEM_PC
d4570 1
a4570 1
#define FLD(f) abuf->fields.sfmt_stq_indirect_index_disp.f
d4588 1
a4588 1
static SEM_PC
d4591 1
a4591 1
#define FLD(f) abuf->fields.sfmt_stq_indirect_index_disp.f
d4609 1
a4609 1
static SEM_PC
d4612 1
a4612 1
#define FLD(f) abuf->fields.sfmt_stq_indirect_offset.f
d4630 1
a4630 1
static SEM_PC
d4633 1
a4633 1
#define FLD(f) abuf->fields.sfmt_stq_indirect_offset.f
d4651 1
a4651 1
static SEM_PC
d4654 1
a4654 1
#define FLD(f) abuf->fields.sfmt_stq_indirect_offset.f
d4672 1
a4672 1
static SEM_PC
d4675 1
a4675 1
#define FLD(f) abuf->fields.sfmt_stq_indirect_index_disp.f
d4693 1
a4693 1
static SEM_PC
d4696 1
a4696 1
#define FLD(f) abuf->fields.sfmt_stq_indirect_index_disp.f
d4714 1
a4714 1
static SEM_PC
d4717 1
a4717 1
#define FLD(f) abuf->fields.sfmt_stq_indirect_index_disp.f
d4735 1
a4735 1
static SEM_PC
d4738 1
a4738 1
#define FLD(f) abuf->fields.sfmt_stq_indirect_index_disp.f
d4756 1
a4756 1
static SEM_PC
d4759 1
a4759 1
#define FLD(f) abuf->fields.sfmt_stq_indirect_index_disp.f
d4777 1
a4777 1
static SEM_PC
d4780 1
a4780 1
#define FLD(f) abuf->fields.sfmt_stq_indirect_offset.f
d4798 1
a4798 1
static SEM_PC
d4801 1
a4801 1
#define FLD(f) abuf->fields.sfmt_stq_indirect_offset.f
d4819 1
a4819 1
static SEM_PC
d4822 1
a4822 1
#define FLD(f) abuf->fields.sfmt_stq_indirect_offset.f
d4840 1
a4840 1
static SEM_PC
d4843 1
a4843 1
#define FLD(f) abuf->fields.sfmt_stq_indirect_index_disp.f
d4861 1
a4861 1
static SEM_PC
d4864 1
a4864 1
#define FLD(f) abuf->fields.sfmt_stq_indirect_index_disp.f
d4882 1
a4882 1
static SEM_PC
d4885 1
a4885 1
#define FLD(f) abuf->fields.sfmt_stq_indirect_index_disp.f
d4903 1
a4903 1
static SEM_PC
d4906 1
a4906 1
#define FLD(f) abuf->fields.sfmt_stq_indirect_index_disp.f
d4924 1
a4924 1
static SEM_PC
d4927 1
a4927 1
#define FLD(f) abuf->fields.sfmt_stq_indirect_index_disp.f
d4945 1
a4945 1
static SEM_PC
d4948 1
a4948 1
#define FLD(f) abuf->fields.sfmt_stq_indirect_offset.f
d4975 1
a4975 1
static SEM_PC
d4978 1
a4978 1
#define FLD(f) abuf->fields.sfmt_stq_indirect_offset.f
d5005 1
a5005 1
static SEM_PC
d5008 1
a5008 1
#define FLD(f) abuf->fields.sfmt_stq_indirect_offset.f
d5035 1
a5035 1
static SEM_PC
d5038 1
a5038 1
#define FLD(f) abuf->fields.sfmt_stq_indirect_index_disp.f
d5065 1
a5065 1
static SEM_PC
d5068 1
a5068 1
#define FLD(f) abuf->fields.sfmt_stq_indirect_index_disp.f
d5095 1
a5095 1
static SEM_PC
d5098 1
a5098 1
#define FLD(f) abuf->fields.sfmt_stq_indirect_index_disp.f
d5125 1
a5125 1
static SEM_PC
d5128 1
a5128 1
#define FLD(f) abuf->fields.sfmt_stq_indirect_index_disp.f
d5155 1
a5155 1
static SEM_PC
d5158 1
a5158 1
#define FLD(f) abuf->fields.sfmt_stq_indirect_index_disp.f
d5185 1
a5185 1
static SEM_PC
d5188 1
a5188 1
#define FLD(f) abuf->fields.sfmt_stq_indirect_offset.f
d5220 1
a5220 1
static SEM_PC
d5223 1
a5223 1
#define FLD(f) abuf->fields.sfmt_stq_indirect_offset.f
d5255 1
a5255 1
static SEM_PC
d5258 1
a5258 1
#define FLD(f) abuf->fields.sfmt_stq_indirect_offset.f
d5290 1
a5290 1
static SEM_PC
d5293 1
a5293 1
#define FLD(f) abuf->fields.sfmt_stq_indirect_index_disp.f
d5325 1
a5325 1
static SEM_PC
d5328 1
a5328 1
#define FLD(f) abuf->fields.sfmt_stq_indirect_index_disp.f
d5360 1
a5360 1
static SEM_PC
d5363 1
a5363 1
#define FLD(f) abuf->fields.sfmt_stq_indirect_index_disp.f
d5395 1
a5395 1
static SEM_PC
d5398 1
a5398 1
#define FLD(f) abuf->fields.sfmt_stq_indirect_index_disp.f
d5430 1
a5430 1
static SEM_PC
d5433 1
a5433 1
#define FLD(f) abuf->fields.sfmt_stq_indirect_index_disp.f
d5465 1
a5465 1
static SEM_PC
d5468 1
a5468 1
#define FLD(f) abuf->fields.sfmt_stq_indirect_offset.f
d5505 1
a5505 1
static SEM_PC
d5508 1
a5508 1
#define FLD(f) abuf->fields.sfmt_stq_indirect_offset.f
d5545 1
a5545 1
static SEM_PC
d5548 1
a5548 1
#define FLD(f) abuf->fields.sfmt_stq_indirect_offset.f
d5585 1
a5585 1
static SEM_PC
d5588 1
a5588 1
#define FLD(f) abuf->fields.sfmt_stq_indirect_index_disp.f
d5625 1
a5625 1
static SEM_PC
d5628 1
a5628 1
#define FLD(f) abuf->fields.sfmt_stq_indirect_index_disp.f
d5665 1
a5665 1
static SEM_PC
d5668 1
a5668 1
#define FLD(f) abuf->fields.sfmt_stq_indirect_index_disp.f
d5705 1
a5705 1
static SEM_PC
d5708 1
a5708 1
#define FLD(f) abuf->fields.sfmt_stq_indirect_index_disp.f
d5745 1
a5745 1
static SEM_PC
d5748 1
a5748 1
#define FLD(f) abuf->fields.sfmt_stq_indirect_index_disp.f
d5785 1
a5785 1
static SEM_PC
d5788 1
a5788 1
#define FLD(f) abuf->fields.sfmt_cmpobe_reg.f
d5798 1
a5798 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
d5812 1
a5812 1
static SEM_PC
d5815 1
a5815 1
#define FLD(f) abuf->fields.sfmt_cmpobe_lit.f
d5825 1
a5825 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
d5839 1
a5839 1
static SEM_PC
d5842 1
a5842 1
#define FLD(f) abuf->fields.sfmt_cmpobe_reg.f
d5852 1
a5852 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
d5866 1
a5866 1
static SEM_PC
d5869 1
a5869 1
#define FLD(f) abuf->fields.sfmt_cmpobe_lit.f
d5879 1
a5879 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
d5893 1
a5893 1
static SEM_PC
d5896 1
a5896 1
#define FLD(f) abuf->fields.sfmt_cmpobe_reg.f
d5906 1
a5906 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
d5920 1
a5920 1
static SEM_PC
d5923 1
a5923 1
#define FLD(f) abuf->fields.sfmt_cmpobe_lit.f
d5933 1
a5933 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
d5947 1
a5947 1
static SEM_PC
d5950 1
a5950 1
#define FLD(f) abuf->fields.sfmt_cmpobe_reg.f
d5960 1
a5960 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
d5974 1
a5974 1
static SEM_PC
d5977 1
a5977 1
#define FLD(f) abuf->fields.sfmt_cmpobe_lit.f
d5987 1
a5987 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
d6001 1
a6001 1
static SEM_PC
d6004 1
a6004 1
#define FLD(f) abuf->fields.sfmt_cmpobe_reg.f
d6014 1
a6014 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
d6028 1
a6028 1
static SEM_PC
d6031 1
a6031 1
#define FLD(f) abuf->fields.sfmt_cmpobe_lit.f
d6041 1
a6041 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
d6055 1
a6055 1
static SEM_PC
d6058 1
a6058 1
#define FLD(f) abuf->fields.sfmt_cmpobe_reg.f
d6068 1
a6068 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
d6082 1
a6082 1
static SEM_PC
d6085 1
a6085 1
#define FLD(f) abuf->fields.sfmt_cmpobe_lit.f
d6095 1
a6095 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
d6109 1
a6109 1
static SEM_PC
d6112 1
a6112 1
#define FLD(f) abuf->fields.sfmt_cmpobe_reg.f
d6122 1
a6122 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
d6136 1
a6136 1
static SEM_PC
d6139 1
a6139 1
#define FLD(f) abuf->fields.sfmt_cmpobe_lit.f
d6149 1
a6149 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
d6163 1
a6163 1
static SEM_PC
d6166 1
a6166 1
#define FLD(f) abuf->fields.sfmt_cmpobe_reg.f
d6176 1
a6176 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
d6190 1
a6190 1
static SEM_PC
d6193 1
a6193 1
#define FLD(f) abuf->fields.sfmt_cmpobe_lit.f
d6203 1
a6203 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
d6217 1
a6217 1
static SEM_PC
d6220 1
a6220 1
#define FLD(f) abuf->fields.sfmt_cmpobe_reg.f
d6230 1
a6230 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
d6244 1
a6244 1
static SEM_PC
d6247 1
a6247 1
#define FLD(f) abuf->fields.sfmt_cmpobe_lit.f
d6257 1
a6257 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
d6271 1
a6271 1
static SEM_PC
d6274 1
a6274 1
#define FLD(f) abuf->fields.sfmt_cmpobe_reg.f
d6284 1
a6284 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
d6298 1
a6298 1
static SEM_PC
d6301 1
a6301 1
#define FLD(f) abuf->fields.sfmt_cmpobe_lit.f
d6311 1
a6311 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
d6325 1
a6325 1
static SEM_PC
d6328 1
a6328 1
#define FLD(f) abuf->fields.sfmt_cmpobe_reg.f
d6338 1
a6338 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
d6352 1
a6352 1
static SEM_PC
d6355 1
a6355 1
#define FLD(f) abuf->fields.sfmt_cmpobe_lit.f
d6365 1
a6365 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
d6379 1
a6379 1
static SEM_PC
d6382 1
a6382 1
#define FLD(f) abuf->fields.sfmt_cmpobe_reg.f
d6392 1
a6392 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
d6406 1
a6406 1
static SEM_PC
d6409 1
a6409 1
#define FLD(f) abuf->fields.sfmt_cmpobe_lit.f
d6419 1
a6419 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
d6433 1
a6433 1
static SEM_PC
d6436 1
a6436 1
#define FLD(f) abuf->fields.sfmt_cmpobe_reg.f
d6446 1
a6446 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
d6460 1
a6460 1
static SEM_PC
d6463 1
a6463 1
#define FLD(f) abuf->fields.sfmt_cmpobe_lit.f
d6473 1
a6473 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
d6487 1
a6487 1
static SEM_PC
d6490 1
a6490 1
#define FLD(f) abuf->fields.sfmt_cmpobe_reg.f
d6500 1
a6500 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
d6514 1
a6514 1
static SEM_PC
d6517 1
a6517 1
#define FLD(f) abuf->fields.sfmt_cmpobe_lit.f
d6527 1
a6527 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
d6541 1
a6541 1
static SEM_PC
d6544 1
a6544 1
#define FLD(f) abuf->fields.sfmt_emul.f
d6562 1
a6562 1
static SEM_PC
d6565 1
a6565 1
#define FLD(f) abuf->fields.sfmt_emul1.f
d6583 1
a6583 1
static SEM_PC
d6586 1
a6586 1
#define FLD(f) abuf->fields.sfmt_emul2.f
d6604 1
a6604 1
static SEM_PC
d6607 1
a6607 1
#define FLD(f) abuf->fields.sfmt_emul3.f
d6625 1
a6625 1
static SEM_PC
d6628 1
a6628 1
#define FLD(f) abuf->fields.sfmt_emul.f
d6646 1
a6646 1
static SEM_PC
d6649 1
a6649 1
#define FLD(f) abuf->fields.sfmt_emul1.f
d6667 1
a6667 1
static SEM_PC
d6670 1
a6670 1
#define FLD(f) abuf->fields.sfmt_emul2.f
d6688 1
a6688 1
static SEM_PC
d6691 1
a6691 1
#define FLD(f) abuf->fields.sfmt_emul3.f
d6709 1
a6709 1
static SEM_PC
d6712 1
a6712 1
#define FLD(f) abuf->fields.sfmt_testno_reg.f
d6730 1
a6730 1
static SEM_PC
d6733 1
a6733 1
#define FLD(f) abuf->fields.sfmt_testno_reg.f
d6751 1
a6751 1
static SEM_PC
d6754 1
a6754 1
#define FLD(f) abuf->fields.sfmt_testno_reg.f
d6772 1
a6772 1
static SEM_PC
d6775 1
a6775 1
#define FLD(f) abuf->fields.sfmt_testno_reg.f
d6793 1
a6793 1
static SEM_PC
d6796 1
a6796 1
#define FLD(f) abuf->fields.sfmt_testno_reg.f
d6814 1
a6814 1
static SEM_PC
d6817 1
a6817 1
#define FLD(f) abuf->fields.sfmt_testno_reg.f
d6835 1
a6835 1
static SEM_PC
d6838 1
a6838 1
#define FLD(f) abuf->fields.sfmt_testno_reg.f
d6856 1
a6856 1
static SEM_PC
d6859 1
a6859 1
#define FLD(f) abuf->fields.sfmt_testno_reg.f
d6877 1
a6877 1
static SEM_PC
d6880 1
a6880 1
#define FLD(f) abuf->fields.sfmt_bno.f
d6890 1
a6890 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
d6904 1
a6904 1
static SEM_PC
d6907 1
a6907 1
#define FLD(f) abuf->fields.sfmt_bno.f
d6917 1
a6917 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
d6931 1
a6931 1
static SEM_PC
d6934 1
a6934 1
#define FLD(f) abuf->fields.sfmt_bno.f
d6944 1
a6944 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
d6958 1
a6958 1
static SEM_PC
d6961 1
a6961 1
#define FLD(f) abuf->fields.sfmt_bno.f
d6971 1
a6971 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
d6985 1
a6985 1
static SEM_PC
d6988 1
a6988 1
#define FLD(f) abuf->fields.sfmt_bno.f
d6998 1
a6998 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
d7012 1
a7012 1
static SEM_PC
d7015 1
a7015 1
#define FLD(f) abuf->fields.sfmt_bno.f
d7025 1
a7025 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
d7039 1
a7039 1
static SEM_PC
d7042 1
a7042 1
#define FLD(f) abuf->fields.sfmt_bno.f
d7052 1
a7052 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
d7066 1
a7066 1
static SEM_PC
d7069 1
a7069 1
#define FLD(f) abuf->fields.sfmt_bno.f
d7079 1
a7079 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
d7093 1
a7093 1
static SEM_PC
d7096 1
a7096 1
#define FLD(f) abuf->fields.sfmt_bno.f
d7105 1
a7105 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
d7116 1
a7116 1
static SEM_PC
d7119 1
a7119 1
#define FLD(f) abuf->fields.sfmt_stq_indirect_offset.f
d7139 1
a7139 1
static SEM_PC
d7142 1
a7142 1
#define FLD(f) abuf->fields.sfmt_stq_indirect_offset.f
d7162 1
a7162 1
static SEM_PC
d7165 1
a7165 1
#define FLD(f) abuf->fields.sfmt_stq_indirect_index_disp.f
d7185 1
a7185 1
static SEM_PC
d7188 1
a7188 1
#define FLD(f) abuf->fields.sfmt_stq_indirect_index_disp.f
d7197 1
a7197 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
d7208 1
a7208 1
static SEM_PC
d7211 1
a7211 1
#define FLD(f) abuf->fields.sfmt_stq_indirect_index_disp.f
d7231 1
a7231 1
static SEM_PC
d7234 1
a7234 1
#define FLD(f) abuf->fields.sfmt_callx_disp.f
d7267 1
a7267 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
d7310 1
a7310 1
static SEM_PC
d7313 1
a7313 1
#define FLD(f) abuf->fields.sfmt_callx_indirect_offset.f
d7389 1
a7389 1
static SEM_PC
d7392 1
a7392 1
#define FLD(f) abuf->fields.sfmt_callx_indirect_offset.f
d7468 1
a7468 1
static SEM_PC
d7471 1
a7471 1
#define FLD(f) abuf->fields.sfmt_callx_disp.f
d7514 1
a7514 1
static SEM_PC
d7517 1
a7517 1
#define FLD(f) abuf->fields.sfmt_emul2.f
d7537 1
a7537 1
static SEM_PC
d7540 1
a7540 1
#define FLD(f) abuf->fields.fmt_empty.f
d7560 1
a7560 1
static SEM_PC
d7563 1
a7563 1
#define FLD(f) abuf->fields.fmt_empty.f
a7572 321
}

/* Table of all semantic fns.  */

static const struct sem_fn_desc sem_fns[] = {
  { I960BASE_INSN_X_INVALID, SEM_FN_NAME (i960base,x_invalid) },
  { I960BASE_INSN_X_AFTER, SEM_FN_NAME (i960base,x_after) },
  { I960BASE_INSN_X_BEFORE, SEM_FN_NAME (i960base,x_before) },
  { I960BASE_INSN_X_CTI_CHAIN, SEM_FN_NAME (i960base,x_cti_chain) },
  { I960BASE_INSN_X_CHAIN, SEM_FN_NAME (i960base,x_chain) },
  { I960BASE_INSN_X_BEGIN, SEM_FN_NAME (i960base,x_begin) },
  { I960BASE_INSN_MULO, SEM_FN_NAME (i960base,mulo) },
  { I960BASE_INSN_MULO1, SEM_FN_NAME (i960base,mulo1) },
  { I960BASE_INSN_MULO2, SEM_FN_NAME (i960base,mulo2) },
  { I960BASE_INSN_MULO3, SEM_FN_NAME (i960base,mulo3) },
  { I960BASE_INSN_REMO, SEM_FN_NAME (i960base,remo) },
  { I960BASE_INSN_REMO1, SEM_FN_NAME (i960base,remo1) },
  { I960BASE_INSN_REMO2, SEM_FN_NAME (i960base,remo2) },
  { I960BASE_INSN_REMO3, SEM_FN_NAME (i960base,remo3) },
  { I960BASE_INSN_DIVO, SEM_FN_NAME (i960base,divo) },
  { I960BASE_INSN_DIVO1, SEM_FN_NAME (i960base,divo1) },
  { I960BASE_INSN_DIVO2, SEM_FN_NAME (i960base,divo2) },
  { I960BASE_INSN_DIVO3, SEM_FN_NAME (i960base,divo3) },
  { I960BASE_INSN_REMI, SEM_FN_NAME (i960base,remi) },
  { I960BASE_INSN_REMI1, SEM_FN_NAME (i960base,remi1) },
  { I960BASE_INSN_REMI2, SEM_FN_NAME (i960base,remi2) },
  { I960BASE_INSN_REMI3, SEM_FN_NAME (i960base,remi3) },
  { I960BASE_INSN_DIVI, SEM_FN_NAME (i960base,divi) },
  { I960BASE_INSN_DIVI1, SEM_FN_NAME (i960base,divi1) },
  { I960BASE_INSN_DIVI2, SEM_FN_NAME (i960base,divi2) },
  { I960BASE_INSN_DIVI3, SEM_FN_NAME (i960base,divi3) },
  { I960BASE_INSN_ADDO, SEM_FN_NAME (i960base,addo) },
  { I960BASE_INSN_ADDO1, SEM_FN_NAME (i960base,addo1) },
  { I960BASE_INSN_ADDO2, SEM_FN_NAME (i960base,addo2) },
  { I960BASE_INSN_ADDO3, SEM_FN_NAME (i960base,addo3) },
  { I960BASE_INSN_SUBO, SEM_FN_NAME (i960base,subo) },
  { I960BASE_INSN_SUBO1, SEM_FN_NAME (i960base,subo1) },
  { I960BASE_INSN_SUBO2, SEM_FN_NAME (i960base,subo2) },
  { I960BASE_INSN_SUBO3, SEM_FN_NAME (i960base,subo3) },
  { I960BASE_INSN_NOTBIT, SEM_FN_NAME (i960base,notbit) },
  { I960BASE_INSN_NOTBIT1, SEM_FN_NAME (i960base,notbit1) },
  { I960BASE_INSN_NOTBIT2, SEM_FN_NAME (i960base,notbit2) },
  { I960BASE_INSN_NOTBIT3, SEM_FN_NAME (i960base,notbit3) },
  { I960BASE_INSN_AND, SEM_FN_NAME (i960base,and) },
  { I960BASE_INSN_AND1, SEM_FN_NAME (i960base,and1) },
  { I960BASE_INSN_AND2, SEM_FN_NAME (i960base,and2) },
  { I960BASE_INSN_AND3, SEM_FN_NAME (i960base,and3) },
  { I960BASE_INSN_ANDNOT, SEM_FN_NAME (i960base,andnot) },
  { I960BASE_INSN_ANDNOT1, SEM_FN_NAME (i960base,andnot1) },
  { I960BASE_INSN_ANDNOT2, SEM_FN_NAME (i960base,andnot2) },
  { I960BASE_INSN_ANDNOT3, SEM_FN_NAME (i960base,andnot3) },
  { I960BASE_INSN_SETBIT, SEM_FN_NAME (i960base,setbit) },
  { I960BASE_INSN_SETBIT1, SEM_FN_NAME (i960base,setbit1) },
  { I960BASE_INSN_SETBIT2, SEM_FN_NAME (i960base,setbit2) },
  { I960BASE_INSN_SETBIT3, SEM_FN_NAME (i960base,setbit3) },
  { I960BASE_INSN_NOTAND, SEM_FN_NAME (i960base,notand) },
  { I960BASE_INSN_NOTAND1, SEM_FN_NAME (i960base,notand1) },
  { I960BASE_INSN_NOTAND2, SEM_FN_NAME (i960base,notand2) },
  { I960BASE_INSN_NOTAND3, SEM_FN_NAME (i960base,notand3) },
  { I960BASE_INSN_XOR, SEM_FN_NAME (i960base,xor) },
  { I960BASE_INSN_XOR1, SEM_FN_NAME (i960base,xor1) },
  { I960BASE_INSN_XOR2, SEM_FN_NAME (i960base,xor2) },
  { I960BASE_INSN_XOR3, SEM_FN_NAME (i960base,xor3) },
  { I960BASE_INSN_OR, SEM_FN_NAME (i960base,or) },
  { I960BASE_INSN_OR1, SEM_FN_NAME (i960base,or1) },
  { I960BASE_INSN_OR2, SEM_FN_NAME (i960base,or2) },
  { I960BASE_INSN_OR3, SEM_FN_NAME (i960base,or3) },
  { I960BASE_INSN_NOR, SEM_FN_NAME (i960base,nor) },
  { I960BASE_INSN_NOR1, SEM_FN_NAME (i960base,nor1) },
  { I960BASE_INSN_NOR2, SEM_FN_NAME (i960base,nor2) },
  { I960BASE_INSN_NOR3, SEM_FN_NAME (i960base,nor3) },
  { I960BASE_INSN_XNOR, SEM_FN_NAME (i960base,xnor) },
  { I960BASE_INSN_XNOR1, SEM_FN_NAME (i960base,xnor1) },
  { I960BASE_INSN_XNOR2, SEM_FN_NAME (i960base,xnor2) },
  { I960BASE_INSN_XNOR3, SEM_FN_NAME (i960base,xnor3) },
  { I960BASE_INSN_NOT, SEM_FN_NAME (i960base,not) },
  { I960BASE_INSN_NOT1, SEM_FN_NAME (i960base,not1) },
  { I960BASE_INSN_NOT2, SEM_FN_NAME (i960base,not2) },
  { I960BASE_INSN_NOT3, SEM_FN_NAME (i960base,not3) },
  { I960BASE_INSN_ORNOT, SEM_FN_NAME (i960base,ornot) },
  { I960BASE_INSN_ORNOT1, SEM_FN_NAME (i960base,ornot1) },
  { I960BASE_INSN_ORNOT2, SEM_FN_NAME (i960base,ornot2) },
  { I960BASE_INSN_ORNOT3, SEM_FN_NAME (i960base,ornot3) },
  { I960BASE_INSN_CLRBIT, SEM_FN_NAME (i960base,clrbit) },
  { I960BASE_INSN_CLRBIT1, SEM_FN_NAME (i960base,clrbit1) },
  { I960BASE_INSN_CLRBIT2, SEM_FN_NAME (i960base,clrbit2) },
  { I960BASE_INSN_CLRBIT3, SEM_FN_NAME (i960base,clrbit3) },
  { I960BASE_INSN_SHLO, SEM_FN_NAME (i960base,shlo) },
  { I960BASE_INSN_SHLO1, SEM_FN_NAME (i960base,shlo1) },
  { I960BASE_INSN_SHLO2, SEM_FN_NAME (i960base,shlo2) },
  { I960BASE_INSN_SHLO3, SEM_FN_NAME (i960base,shlo3) },
  { I960BASE_INSN_SHRO, SEM_FN_NAME (i960base,shro) },
  { I960BASE_INSN_SHRO1, SEM_FN_NAME (i960base,shro1) },
  { I960BASE_INSN_SHRO2, SEM_FN_NAME (i960base,shro2) },
  { I960BASE_INSN_SHRO3, SEM_FN_NAME (i960base,shro3) },
  { I960BASE_INSN_SHLI, SEM_FN_NAME (i960base,shli) },
  { I960BASE_INSN_SHLI1, SEM_FN_NAME (i960base,shli1) },
  { I960BASE_INSN_SHLI2, SEM_FN_NAME (i960base,shli2) },
  { I960BASE_INSN_SHLI3, SEM_FN_NAME (i960base,shli3) },
  { I960BASE_INSN_SHRI, SEM_FN_NAME (i960base,shri) },
  { I960BASE_INSN_SHRI1, SEM_FN_NAME (i960base,shri1) },
  { I960BASE_INSN_SHRI2, SEM_FN_NAME (i960base,shri2) },
  { I960BASE_INSN_SHRI3, SEM_FN_NAME (i960base,shri3) },
  { I960BASE_INSN_EMUL, SEM_FN_NAME (i960base,emul) },
  { I960BASE_INSN_EMUL1, SEM_FN_NAME (i960base,emul1) },
  { I960BASE_INSN_EMUL2, SEM_FN_NAME (i960base,emul2) },
  { I960BASE_INSN_EMUL3, SEM_FN_NAME (i960base,emul3) },
  { I960BASE_INSN_MOV, SEM_FN_NAME (i960base,mov) },
  { I960BASE_INSN_MOV1, SEM_FN_NAME (i960base,mov1) },
  { I960BASE_INSN_MOVL, SEM_FN_NAME (i960base,movl) },
  { I960BASE_INSN_MOVL1, SEM_FN_NAME (i960base,movl1) },
  { I960BASE_INSN_MOVT, SEM_FN_NAME (i960base,movt) },
  { I960BASE_INSN_MOVT1, SEM_FN_NAME (i960base,movt1) },
  { I960BASE_INSN_MOVQ, SEM_FN_NAME (i960base,movq) },
  { I960BASE_INSN_MOVQ1, SEM_FN_NAME (i960base,movq1) },
  { I960BASE_INSN_MODPC, SEM_FN_NAME (i960base,modpc) },
  { I960BASE_INSN_MODAC, SEM_FN_NAME (i960base,modac) },
  { I960BASE_INSN_LDA_OFFSET, SEM_FN_NAME (i960base,lda_offset) },
  { I960BASE_INSN_LDA_INDIRECT_OFFSET, SEM_FN_NAME (i960base,lda_indirect_offset) },
  { I960BASE_INSN_LDA_INDIRECT, SEM_FN_NAME (i960base,lda_indirect) },
  { I960BASE_INSN_LDA_INDIRECT_INDEX, SEM_FN_NAME (i960base,lda_indirect_index) },
  { I960BASE_INSN_LDA_DISP, SEM_FN_NAME (i960base,lda_disp) },
  { I960BASE_INSN_LDA_INDIRECT_DISP, SEM_FN_NAME (i960base,lda_indirect_disp) },
  { I960BASE_INSN_LDA_INDEX_DISP, SEM_FN_NAME (i960base,lda_index_disp) },
  { I960BASE_INSN_LDA_INDIRECT_INDEX_DISP, SEM_FN_NAME (i960base,lda_indirect_index_disp) },
  { I960BASE_INSN_LD_OFFSET, SEM_FN_NAME (i960base,ld_offset) },
  { I960BASE_INSN_LD_INDIRECT_OFFSET, SEM_FN_NAME (i960base,ld_indirect_offset) },
  { I960BASE_INSN_LD_INDIRECT, SEM_FN_NAME (i960base,ld_indirect) },
  { I960BASE_INSN_LD_INDIRECT_INDEX, SEM_FN_NAME (i960base,ld_indirect_index) },
  { I960BASE_INSN_LD_DISP, SEM_FN_NAME (i960base,ld_disp) },
  { I960BASE_INSN_LD_INDIRECT_DISP, SEM_FN_NAME (i960base,ld_indirect_disp) },
  { I960BASE_INSN_LD_INDEX_DISP, SEM_FN_NAME (i960base,ld_index_disp) },
  { I960BASE_INSN_LD_INDIRECT_INDEX_DISP, SEM_FN_NAME (i960base,ld_indirect_index_disp) },
  { I960BASE_INSN_LDOB_OFFSET, SEM_FN_NAME (i960base,ldob_offset) },
  { I960BASE_INSN_LDOB_INDIRECT_OFFSET, SEM_FN_NAME (i960base,ldob_indirect_offset) },
  { I960BASE_INSN_LDOB_INDIRECT, SEM_FN_NAME (i960base,ldob_indirect) },
  { I960BASE_INSN_LDOB_INDIRECT_INDEX, SEM_FN_NAME (i960base,ldob_indirect_index) },
  { I960BASE_INSN_LDOB_DISP, SEM_FN_NAME (i960base,ldob_disp) },
  { I960BASE_INSN_LDOB_INDIRECT_DISP, SEM_FN_NAME (i960base,ldob_indirect_disp) },
  { I960BASE_INSN_LDOB_INDEX_DISP, SEM_FN_NAME (i960base,ldob_index_disp) },
  { I960BASE_INSN_LDOB_INDIRECT_INDEX_DISP, SEM_FN_NAME (i960base,ldob_indirect_index_disp) },
  { I960BASE_INSN_LDOS_OFFSET, SEM_FN_NAME (i960base,ldos_offset) },
  { I960BASE_INSN_LDOS_INDIRECT_OFFSET, SEM_FN_NAME (i960base,ldos_indirect_offset) },
  { I960BASE_INSN_LDOS_INDIRECT, SEM_FN_NAME (i960base,ldos_indirect) },
  { I960BASE_INSN_LDOS_INDIRECT_INDEX, SEM_FN_NAME (i960base,ldos_indirect_index) },
  { I960BASE_INSN_LDOS_DISP, SEM_FN_NAME (i960base,ldos_disp) },
  { I960BASE_INSN_LDOS_INDIRECT_DISP, SEM_FN_NAME (i960base,ldos_indirect_disp) },
  { I960BASE_INSN_LDOS_INDEX_DISP, SEM_FN_NAME (i960base,ldos_index_disp) },
  { I960BASE_INSN_LDOS_INDIRECT_INDEX_DISP, SEM_FN_NAME (i960base,ldos_indirect_index_disp) },
  { I960BASE_INSN_LDIB_OFFSET, SEM_FN_NAME (i960base,ldib_offset) },
  { I960BASE_INSN_LDIB_INDIRECT_OFFSET, SEM_FN_NAME (i960base,ldib_indirect_offset) },
  { I960BASE_INSN_LDIB_INDIRECT, SEM_FN_NAME (i960base,ldib_indirect) },
  { I960BASE_INSN_LDIB_INDIRECT_INDEX, SEM_FN_NAME (i960base,ldib_indirect_index) },
  { I960BASE_INSN_LDIB_DISP, SEM_FN_NAME (i960base,ldib_disp) },
  { I960BASE_INSN_LDIB_INDIRECT_DISP, SEM_FN_NAME (i960base,ldib_indirect_disp) },
  { I960BASE_INSN_LDIB_INDEX_DISP, SEM_FN_NAME (i960base,ldib_index_disp) },
  { I960BASE_INSN_LDIB_INDIRECT_INDEX_DISP, SEM_FN_NAME (i960base,ldib_indirect_index_disp) },
  { I960BASE_INSN_LDIS_OFFSET, SEM_FN_NAME (i960base,ldis_offset) },
  { I960BASE_INSN_LDIS_INDIRECT_OFFSET, SEM_FN_NAME (i960base,ldis_indirect_offset) },
  { I960BASE_INSN_LDIS_INDIRECT, SEM_FN_NAME (i960base,ldis_indirect) },
  { I960BASE_INSN_LDIS_INDIRECT_INDEX, SEM_FN_NAME (i960base,ldis_indirect_index) },
  { I960BASE_INSN_LDIS_DISP, SEM_FN_NAME (i960base,ldis_disp) },
  { I960BASE_INSN_LDIS_INDIRECT_DISP, SEM_FN_NAME (i960base,ldis_indirect_disp) },
  { I960BASE_INSN_LDIS_INDEX_DISP, SEM_FN_NAME (i960base,ldis_index_disp) },
  { I960BASE_INSN_LDIS_INDIRECT_INDEX_DISP, SEM_FN_NAME (i960base,ldis_indirect_index_disp) },
  { I960BASE_INSN_LDL_OFFSET, SEM_FN_NAME (i960base,ldl_offset) },
  { I960BASE_INSN_LDL_INDIRECT_OFFSET, SEM_FN_NAME (i960base,ldl_indirect_offset) },
  { I960BASE_INSN_LDL_INDIRECT, SEM_FN_NAME (i960base,ldl_indirect) },
  { I960BASE_INSN_LDL_INDIRECT_INDEX, SEM_FN_NAME (i960base,ldl_indirect_index) },
  { I960BASE_INSN_LDL_DISP, SEM_FN_NAME (i960base,ldl_disp) },
  { I960BASE_INSN_LDL_INDIRECT_DISP, SEM_FN_NAME (i960base,ldl_indirect_disp) },
  { I960BASE_INSN_LDL_INDEX_DISP, SEM_FN_NAME (i960base,ldl_index_disp) },
  { I960BASE_INSN_LDL_INDIRECT_INDEX_DISP, SEM_FN_NAME (i960base,ldl_indirect_index_disp) },
  { I960BASE_INSN_LDT_OFFSET, SEM_FN_NAME (i960base,ldt_offset) },
  { I960BASE_INSN_LDT_INDIRECT_OFFSET, SEM_FN_NAME (i960base,ldt_indirect_offset) },
  { I960BASE_INSN_LDT_INDIRECT, SEM_FN_NAME (i960base,ldt_indirect) },
  { I960BASE_INSN_LDT_INDIRECT_INDEX, SEM_FN_NAME (i960base,ldt_indirect_index) },
  { I960BASE_INSN_LDT_DISP, SEM_FN_NAME (i960base,ldt_disp) },
  { I960BASE_INSN_LDT_INDIRECT_DISP, SEM_FN_NAME (i960base,ldt_indirect_disp) },
  { I960BASE_INSN_LDT_INDEX_DISP, SEM_FN_NAME (i960base,ldt_index_disp) },
  { I960BASE_INSN_LDT_INDIRECT_INDEX_DISP, SEM_FN_NAME (i960base,ldt_indirect_index_disp) },
  { I960BASE_INSN_LDQ_OFFSET, SEM_FN_NAME (i960base,ldq_offset) },
  { I960BASE_INSN_LDQ_INDIRECT_OFFSET, SEM_FN_NAME (i960base,ldq_indirect_offset) },
  { I960BASE_INSN_LDQ_INDIRECT, SEM_FN_NAME (i960base,ldq_indirect) },
  { I960BASE_INSN_LDQ_INDIRECT_INDEX, SEM_FN_NAME (i960base,ldq_indirect_index) },
  { I960BASE_INSN_LDQ_DISP, SEM_FN_NAME (i960base,ldq_disp) },
  { I960BASE_INSN_LDQ_INDIRECT_DISP, SEM_FN_NAME (i960base,ldq_indirect_disp) },
  { I960BASE_INSN_LDQ_INDEX_DISP, SEM_FN_NAME (i960base,ldq_index_disp) },
  { I960BASE_INSN_LDQ_INDIRECT_INDEX_DISP, SEM_FN_NAME (i960base,ldq_indirect_index_disp) },
  { I960BASE_INSN_ST_OFFSET, SEM_FN_NAME (i960base,st_offset) },
  { I960BASE_INSN_ST_INDIRECT_OFFSET, SEM_FN_NAME (i960base,st_indirect_offset) },
  { I960BASE_INSN_ST_INDIRECT, SEM_FN_NAME (i960base,st_indirect) },
  { I960BASE_INSN_ST_INDIRECT_INDEX, SEM_FN_NAME (i960base,st_indirect_index) },
  { I960BASE_INSN_ST_DISP, SEM_FN_NAME (i960base,st_disp) },
  { I960BASE_INSN_ST_INDIRECT_DISP, SEM_FN_NAME (i960base,st_indirect_disp) },
  { I960BASE_INSN_ST_INDEX_DISP, SEM_FN_NAME (i960base,st_index_disp) },
  { I960BASE_INSN_ST_INDIRECT_INDEX_DISP, SEM_FN_NAME (i960base,st_indirect_index_disp) },
  { I960BASE_INSN_STOB_OFFSET, SEM_FN_NAME (i960base,stob_offset) },
  { I960BASE_INSN_STOB_INDIRECT_OFFSET, SEM_FN_NAME (i960base,stob_indirect_offset) },
  { I960BASE_INSN_STOB_INDIRECT, SEM_FN_NAME (i960base,stob_indirect) },
  { I960BASE_INSN_STOB_INDIRECT_INDEX, SEM_FN_NAME (i960base,stob_indirect_index) },
  { I960BASE_INSN_STOB_DISP, SEM_FN_NAME (i960base,stob_disp) },
  { I960BASE_INSN_STOB_INDIRECT_DISP, SEM_FN_NAME (i960base,stob_indirect_disp) },
  { I960BASE_INSN_STOB_INDEX_DISP, SEM_FN_NAME (i960base,stob_index_disp) },
  { I960BASE_INSN_STOB_INDIRECT_INDEX_DISP, SEM_FN_NAME (i960base,stob_indirect_index_disp) },
  { I960BASE_INSN_STOS_OFFSET, SEM_FN_NAME (i960base,stos_offset) },
  { I960BASE_INSN_STOS_INDIRECT_OFFSET, SEM_FN_NAME (i960base,stos_indirect_offset) },
  { I960BASE_INSN_STOS_INDIRECT, SEM_FN_NAME (i960base,stos_indirect) },
  { I960BASE_INSN_STOS_INDIRECT_INDEX, SEM_FN_NAME (i960base,stos_indirect_index) },
  { I960BASE_INSN_STOS_DISP, SEM_FN_NAME (i960base,stos_disp) },
  { I960BASE_INSN_STOS_INDIRECT_DISP, SEM_FN_NAME (i960base,stos_indirect_disp) },
  { I960BASE_INSN_STOS_INDEX_DISP, SEM_FN_NAME (i960base,stos_index_disp) },
  { I960BASE_INSN_STOS_INDIRECT_INDEX_DISP, SEM_FN_NAME (i960base,stos_indirect_index_disp) },
  { I960BASE_INSN_STL_OFFSET, SEM_FN_NAME (i960base,stl_offset) },
  { I960BASE_INSN_STL_INDIRECT_OFFSET, SEM_FN_NAME (i960base,stl_indirect_offset) },
  { I960BASE_INSN_STL_INDIRECT, SEM_FN_NAME (i960base,stl_indirect) },
  { I960BASE_INSN_STL_INDIRECT_INDEX, SEM_FN_NAME (i960base,stl_indirect_index) },
  { I960BASE_INSN_STL_DISP, SEM_FN_NAME (i960base,stl_disp) },
  { I960BASE_INSN_STL_INDIRECT_DISP, SEM_FN_NAME (i960base,stl_indirect_disp) },
  { I960BASE_INSN_STL_INDEX_DISP, SEM_FN_NAME (i960base,stl_index_disp) },
  { I960BASE_INSN_STL_INDIRECT_INDEX_DISP, SEM_FN_NAME (i960base,stl_indirect_index_disp) },
  { I960BASE_INSN_STT_OFFSET, SEM_FN_NAME (i960base,stt_offset) },
  { I960BASE_INSN_STT_INDIRECT_OFFSET, SEM_FN_NAME (i960base,stt_indirect_offset) },
  { I960BASE_INSN_STT_INDIRECT, SEM_FN_NAME (i960base,stt_indirect) },
  { I960BASE_INSN_STT_INDIRECT_INDEX, SEM_FN_NAME (i960base,stt_indirect_index) },
  { I960BASE_INSN_STT_DISP, SEM_FN_NAME (i960base,stt_disp) },
  { I960BASE_INSN_STT_INDIRECT_DISP, SEM_FN_NAME (i960base,stt_indirect_disp) },
  { I960BASE_INSN_STT_INDEX_DISP, SEM_FN_NAME (i960base,stt_index_disp) },
  { I960BASE_INSN_STT_INDIRECT_INDEX_DISP, SEM_FN_NAME (i960base,stt_indirect_index_disp) },
  { I960BASE_INSN_STQ_OFFSET, SEM_FN_NAME (i960base,stq_offset) },
  { I960BASE_INSN_STQ_INDIRECT_OFFSET, SEM_FN_NAME (i960base,stq_indirect_offset) },
  { I960BASE_INSN_STQ_INDIRECT, SEM_FN_NAME (i960base,stq_indirect) },
  { I960BASE_INSN_STQ_INDIRECT_INDEX, SEM_FN_NAME (i960base,stq_indirect_index) },
  { I960BASE_INSN_STQ_DISP, SEM_FN_NAME (i960base,stq_disp) },
  { I960BASE_INSN_STQ_INDIRECT_DISP, SEM_FN_NAME (i960base,stq_indirect_disp) },
  { I960BASE_INSN_STQ_INDEX_DISP, SEM_FN_NAME (i960base,stq_index_disp) },
  { I960BASE_INSN_STQ_INDIRECT_INDEX_DISP, SEM_FN_NAME (i960base,stq_indirect_index_disp) },
  { I960BASE_INSN_CMPOBE_REG, SEM_FN_NAME (i960base,cmpobe_reg) },
  { I960BASE_INSN_CMPOBE_LIT, SEM_FN_NAME (i960base,cmpobe_lit) },
  { I960BASE_INSN_CMPOBNE_REG, SEM_FN_NAME (i960base,cmpobne_reg) },
  { I960BASE_INSN_CMPOBNE_LIT, SEM_FN_NAME (i960base,cmpobne_lit) },
  { I960BASE_INSN_CMPOBL_REG, SEM_FN_NAME (i960base,cmpobl_reg) },
  { I960BASE_INSN_CMPOBL_LIT, SEM_FN_NAME (i960base,cmpobl_lit) },
  { I960BASE_INSN_CMPOBLE_REG, SEM_FN_NAME (i960base,cmpoble_reg) },
  { I960BASE_INSN_CMPOBLE_LIT, SEM_FN_NAME (i960base,cmpoble_lit) },
  { I960BASE_INSN_CMPOBG_REG, SEM_FN_NAME (i960base,cmpobg_reg) },
  { I960BASE_INSN_CMPOBG_LIT, SEM_FN_NAME (i960base,cmpobg_lit) },
  { I960BASE_INSN_CMPOBGE_REG, SEM_FN_NAME (i960base,cmpobge_reg) },
  { I960BASE_INSN_CMPOBGE_LIT, SEM_FN_NAME (i960base,cmpobge_lit) },
  { I960BASE_INSN_CMPIBE_REG, SEM_FN_NAME (i960base,cmpibe_reg) },
  { I960BASE_INSN_CMPIBE_LIT, SEM_FN_NAME (i960base,cmpibe_lit) },
  { I960BASE_INSN_CMPIBNE_REG, SEM_FN_NAME (i960base,cmpibne_reg) },
  { I960BASE_INSN_CMPIBNE_LIT, SEM_FN_NAME (i960base,cmpibne_lit) },
  { I960BASE_INSN_CMPIBL_REG, SEM_FN_NAME (i960base,cmpibl_reg) },
  { I960BASE_INSN_CMPIBL_LIT, SEM_FN_NAME (i960base,cmpibl_lit) },
  { I960BASE_INSN_CMPIBLE_REG, SEM_FN_NAME (i960base,cmpible_reg) },
  { I960BASE_INSN_CMPIBLE_LIT, SEM_FN_NAME (i960base,cmpible_lit) },
  { I960BASE_INSN_CMPIBG_REG, SEM_FN_NAME (i960base,cmpibg_reg) },
  { I960BASE_INSN_CMPIBG_LIT, SEM_FN_NAME (i960base,cmpibg_lit) },
  { I960BASE_INSN_CMPIBGE_REG, SEM_FN_NAME (i960base,cmpibge_reg) },
  { I960BASE_INSN_CMPIBGE_LIT, SEM_FN_NAME (i960base,cmpibge_lit) },
  { I960BASE_INSN_BBC_REG, SEM_FN_NAME (i960base,bbc_reg) },
  { I960BASE_INSN_BBC_LIT, SEM_FN_NAME (i960base,bbc_lit) },
  { I960BASE_INSN_BBS_REG, SEM_FN_NAME (i960base,bbs_reg) },
  { I960BASE_INSN_BBS_LIT, SEM_FN_NAME (i960base,bbs_lit) },
  { I960BASE_INSN_CMPI, SEM_FN_NAME (i960base,cmpi) },
  { I960BASE_INSN_CMPI1, SEM_FN_NAME (i960base,cmpi1) },
  { I960BASE_INSN_CMPI2, SEM_FN_NAME (i960base,cmpi2) },
  { I960BASE_INSN_CMPI3, SEM_FN_NAME (i960base,cmpi3) },
  { I960BASE_INSN_CMPO, SEM_FN_NAME (i960base,cmpo) },
  { I960BASE_INSN_CMPO1, SEM_FN_NAME (i960base,cmpo1) },
  { I960BASE_INSN_CMPO2, SEM_FN_NAME (i960base,cmpo2) },
  { I960BASE_INSN_CMPO3, SEM_FN_NAME (i960base,cmpo3) },
  { I960BASE_INSN_TESTNO_REG, SEM_FN_NAME (i960base,testno_reg) },
  { I960BASE_INSN_TESTG_REG, SEM_FN_NAME (i960base,testg_reg) },
  { I960BASE_INSN_TESTE_REG, SEM_FN_NAME (i960base,teste_reg) },
  { I960BASE_INSN_TESTGE_REG, SEM_FN_NAME (i960base,testge_reg) },
  { I960BASE_INSN_TESTL_REG, SEM_FN_NAME (i960base,testl_reg) },
  { I960BASE_INSN_TESTNE_REG, SEM_FN_NAME (i960base,testne_reg) },
  { I960BASE_INSN_TESTLE_REG, SEM_FN_NAME (i960base,testle_reg) },
  { I960BASE_INSN_TESTO_REG, SEM_FN_NAME (i960base,testo_reg) },
  { I960BASE_INSN_BNO, SEM_FN_NAME (i960base,bno) },
  { I960BASE_INSN_BG, SEM_FN_NAME (i960base,bg) },
  { I960BASE_INSN_BE, SEM_FN_NAME (i960base,be) },
  { I960BASE_INSN_BGE, SEM_FN_NAME (i960base,bge) },
  { I960BASE_INSN_BL, SEM_FN_NAME (i960base,bl) },
  { I960BASE_INSN_BNE, SEM_FN_NAME (i960base,bne) },
  { I960BASE_INSN_BLE, SEM_FN_NAME (i960base,ble) },
  { I960BASE_INSN_BO, SEM_FN_NAME (i960base,bo) },
  { I960BASE_INSN_B, SEM_FN_NAME (i960base,b) },
  { I960BASE_INSN_BX_INDIRECT_OFFSET, SEM_FN_NAME (i960base,bx_indirect_offset) },
  { I960BASE_INSN_BX_INDIRECT, SEM_FN_NAME (i960base,bx_indirect) },
  { I960BASE_INSN_BX_INDIRECT_INDEX, SEM_FN_NAME (i960base,bx_indirect_index) },
  { I960BASE_INSN_BX_DISP, SEM_FN_NAME (i960base,bx_disp) },
  { I960BASE_INSN_BX_INDIRECT_DISP, SEM_FN_NAME (i960base,bx_indirect_disp) },
  { I960BASE_INSN_CALLX_DISP, SEM_FN_NAME (i960base,callx_disp) },
  { I960BASE_INSN_CALLX_INDIRECT, SEM_FN_NAME (i960base,callx_indirect) },
  { I960BASE_INSN_CALLX_INDIRECT_OFFSET, SEM_FN_NAME (i960base,callx_indirect_offset) },
  { I960BASE_INSN_RET, SEM_FN_NAME (i960base,ret) },
  { I960BASE_INSN_CALLS, SEM_FN_NAME (i960base,calls) },
  { I960BASE_INSN_FMARK, SEM_FN_NAME (i960base,fmark) },
  { I960BASE_INSN_FLUSHREG, SEM_FN_NAME (i960base,flushreg) },
  { 0, 0 }
};

/* Add the semantic fns to IDESC_TABLE.  */

void
SEM_FN_NAME (i960base,init_idesc_table) (SIM_CPU *current_cpu)
{
  IDESC *idesc_table = CPU_IDESC (current_cpu);
  const struct sem_fn_desc *sf;

  for (sf = &sem_fns[0]; sf->fn != 0; ++sf)
    {
#if FAST_P
      idesc_table[sf->index].sem_fast = sf->fn;
#else
      idesc_table[sf->index].sem_full = sf->fn;
#endif
    }
@


1.1.1.4
log
@import gdb-1999-08-30 snapshot
@
text
@d2150 1
a2150 1
    TRACE_RESULT (current_cpu, abuf, "gr-add--DFLT-index-of--DFLT-dst-1", 'x', opval);
d2182 1
a2182 1
    TRACE_RESULT (current_cpu, abuf, "gr-add--DFLT-index-of--DFLT-dst-1", 'x', opval);
d2214 1
a2214 1
    TRACE_RESULT (current_cpu, abuf, "gr-add--DFLT-index-of--DFLT-dst-1", 'x', opval);
d2246 1
a2246 1
    TRACE_RESULT (current_cpu, abuf, "gr-add--DFLT-index-of--DFLT-dst-1", 'x', opval);
d2320 1
a2320 1
    TRACE_RESULT (current_cpu, abuf, "gr-add--DFLT-index-of--DFLT-dst-1", 'x', opval);
d2350 1
a2350 1
    TRACE_RESULT (current_cpu, abuf, "gr-add--DFLT-index-of--DFLT-dst-1", 'x', opval);
d2382 1
a2382 1
    TRACE_RESULT (current_cpu, abuf, "gr-add--DFLT-index-of--DFLT-dst-1", 'x', opval);
d2387 1
a2387 1
    TRACE_RESULT (current_cpu, abuf, "gr-add--DFLT-index-of--DFLT-dst-2", 'x', opval);
d2417 1
a2417 1
    TRACE_RESULT (current_cpu, abuf, "gr-add--DFLT-index-of--DFLT-dst-1", 'x', opval);
d2422 1
a2422 1
    TRACE_RESULT (current_cpu, abuf, "gr-add--DFLT-index-of--DFLT-dst-2", 'x', opval);
d2454 1
a2454 1
    TRACE_RESULT (current_cpu, abuf, "gr-add--DFLT-index-of--DFLT-dst-1", 'x', opval);
d2459 1
a2459 1
    TRACE_RESULT (current_cpu, abuf, "gr-add--DFLT-index-of--DFLT-dst-2", 'x', opval);
d2464 1
a2464 1
    TRACE_RESULT (current_cpu, abuf, "gr-add--DFLT-index-of--DFLT-dst-3", 'x', opval);
d2494 1
a2494 1
    TRACE_RESULT (current_cpu, abuf, "gr-add--DFLT-index-of--DFLT-dst-1", 'x', opval);
d2499 1
a2499 1
    TRACE_RESULT (current_cpu, abuf, "gr-add--DFLT-index-of--DFLT-dst-2", 'x', opval);
d2504 1
a2504 1
    TRACE_RESULT (current_cpu, abuf, "gr-add--DFLT-index-of--DFLT-dst-3", 'x', opval);
d3586 1
a3586 1
    TRACE_RESULT (current_cpu, abuf, "gr-add--DFLT-index-of--DFLT-dst-1", 'x', opval);
d3618 1
a3618 1
    TRACE_RESULT (current_cpu, abuf, "gr-add--DFLT-index-of--DFLT-dst-1", 'x', opval);
d3650 1
a3650 1
    TRACE_RESULT (current_cpu, abuf, "gr-add--DFLT-index-of--DFLT-dst-1", 'x', opval);
d3682 1
a3682 1
    TRACE_RESULT (current_cpu, abuf, "gr-add--DFLT-index-of--DFLT-dst-1", 'x', opval);
d3714 1
a3714 1
    TRACE_RESULT (current_cpu, abuf, "gr-add--DFLT-index-of--DFLT-dst-1", 'x', opval);
d3746 1
a3746 1
    TRACE_RESULT (current_cpu, abuf, "gr-add--DFLT-index-of--DFLT-dst-1", 'x', opval);
d3778 1
a3778 1
    TRACE_RESULT (current_cpu, abuf, "gr-add--DFLT-index-of--DFLT-dst-1", 'x', opval);
d3810 1
a3810 1
    TRACE_RESULT (current_cpu, abuf, "gr-add--DFLT-index-of--DFLT-dst-1", 'x', opval);
d3842 1
a3842 1
    TRACE_RESULT (current_cpu, abuf, "gr-add--DFLT-index-of--DFLT-dst-1", 'x', opval);
d3847 1
a3847 1
    TRACE_RESULT (current_cpu, abuf, "gr-add--DFLT-index-of--DFLT-dst-2", 'x', opval);
d3879 1
a3879 1
    TRACE_RESULT (current_cpu, abuf, "gr-add--DFLT-index-of--DFLT-dst-1", 'x', opval);
d3884 1
a3884 1
    TRACE_RESULT (current_cpu, abuf, "gr-add--DFLT-index-of--DFLT-dst-2", 'x', opval);
d3916 1
a3916 1
    TRACE_RESULT (current_cpu, abuf, "gr-add--DFLT-index-of--DFLT-dst-1", 'x', opval);
d3921 1
a3921 1
    TRACE_RESULT (current_cpu, abuf, "gr-add--DFLT-index-of--DFLT-dst-2", 'x', opval);
d3953 1
a3953 1
    TRACE_RESULT (current_cpu, abuf, "gr-add--DFLT-index-of--DFLT-dst-1", 'x', opval);
d3958 1
a3958 1
    TRACE_RESULT (current_cpu, abuf, "gr-add--DFLT-index-of--DFLT-dst-2", 'x', opval);
d3990 1
a3990 1
    TRACE_RESULT (current_cpu, abuf, "gr-add--DFLT-index-of--DFLT-dst-1", 'x', opval);
d3995 1
a3995 1
    TRACE_RESULT (current_cpu, abuf, "gr-add--DFLT-index-of--DFLT-dst-2", 'x', opval);
d4027 1
a4027 1
    TRACE_RESULT (current_cpu, abuf, "gr-add--DFLT-index-of--DFLT-dst-1", 'x', opval);
d4032 1
a4032 1
    TRACE_RESULT (current_cpu, abuf, "gr-add--DFLT-index-of--DFLT-dst-2", 'x', opval);
d4064 1
a4064 1
    TRACE_RESULT (current_cpu, abuf, "gr-add--DFLT-index-of--DFLT-dst-1", 'x', opval);
d4069 1
a4069 1
    TRACE_RESULT (current_cpu, abuf, "gr-add--DFLT-index-of--DFLT-dst-2", 'x', opval);
d4101 1
a4101 1
    TRACE_RESULT (current_cpu, abuf, "gr-add--DFLT-index-of--DFLT-dst-1", 'x', opval);
d4106 1
a4106 1
    TRACE_RESULT (current_cpu, abuf, "gr-add--DFLT-index-of--DFLT-dst-2", 'x', opval);
d4138 1
a4138 1
    TRACE_RESULT (current_cpu, abuf, "gr-add--DFLT-index-of--DFLT-dst-1", 'x', opval);
d4143 1
a4143 1
    TRACE_RESULT (current_cpu, abuf, "gr-add--DFLT-index-of--DFLT-dst-2", 'x', opval);
d4148 1
a4148 1
    TRACE_RESULT (current_cpu, abuf, "gr-add--DFLT-index-of--DFLT-dst-3", 'x', opval);
d4180 1
a4180 1
    TRACE_RESULT (current_cpu, abuf, "gr-add--DFLT-index-of--DFLT-dst-1", 'x', opval);
d4185 1
a4185 1
    TRACE_RESULT (current_cpu, abuf, "gr-add--DFLT-index-of--DFLT-dst-2", 'x', opval);
d4190 1
a4190 1
    TRACE_RESULT (current_cpu, abuf, "gr-add--DFLT-index-of--DFLT-dst-3", 'x', opval);
d4222 1
a4222 1
    TRACE_RESULT (current_cpu, abuf, "gr-add--DFLT-index-of--DFLT-dst-1", 'x', opval);
d4227 1
a4227 1
    TRACE_RESULT (current_cpu, abuf, "gr-add--DFLT-index-of--DFLT-dst-2", 'x', opval);
d4232 1
a4232 1
    TRACE_RESULT (current_cpu, abuf, "gr-add--DFLT-index-of--DFLT-dst-3", 'x', opval);
d4264 1
a4264 1
    TRACE_RESULT (current_cpu, abuf, "gr-add--DFLT-index-of--DFLT-dst-1", 'x', opval);
d4269 1
a4269 1
    TRACE_RESULT (current_cpu, abuf, "gr-add--DFLT-index-of--DFLT-dst-2", 'x', opval);
d4274 1
a4274 1
    TRACE_RESULT (current_cpu, abuf, "gr-add--DFLT-index-of--DFLT-dst-3", 'x', opval);
d4306 1
a4306 1
    TRACE_RESULT (current_cpu, abuf, "gr-add--DFLT-index-of--DFLT-dst-1", 'x', opval);
d4311 1
a4311 1
    TRACE_RESULT (current_cpu, abuf, "gr-add--DFLT-index-of--DFLT-dst-2", 'x', opval);
d4316 1
a4316 1
    TRACE_RESULT (current_cpu, abuf, "gr-add--DFLT-index-of--DFLT-dst-3", 'x', opval);
d4348 1
a4348 1
    TRACE_RESULT (current_cpu, abuf, "gr-add--DFLT-index-of--DFLT-dst-1", 'x', opval);
d4353 1
a4353 1
    TRACE_RESULT (current_cpu, abuf, "gr-add--DFLT-index-of--DFLT-dst-2", 'x', opval);
d4358 1
a4358 1
    TRACE_RESULT (current_cpu, abuf, "gr-add--DFLT-index-of--DFLT-dst-3", 'x', opval);
d4390 1
a4390 1
    TRACE_RESULT (current_cpu, abuf, "gr-add--DFLT-index-of--DFLT-dst-1", 'x', opval);
d4395 1
a4395 1
    TRACE_RESULT (current_cpu, abuf, "gr-add--DFLT-index-of--DFLT-dst-2", 'x', opval);
d4400 1
a4400 1
    TRACE_RESULT (current_cpu, abuf, "gr-add--DFLT-index-of--DFLT-dst-3", 'x', opval);
d4432 1
a4432 1
    TRACE_RESULT (current_cpu, abuf, "gr-add--DFLT-index-of--DFLT-dst-1", 'x', opval);
d4437 1
a4437 1
    TRACE_RESULT (current_cpu, abuf, "gr-add--DFLT-index-of--DFLT-dst-2", 'x', opval);
d4442 1
a4442 1
    TRACE_RESULT (current_cpu, abuf, "gr-add--DFLT-index-of--DFLT-dst-3", 'x', opval);
a7895 1
  int mach_num = MACH_NUM (CPU_MACH (current_cpu));
a7898 1
      int valid_p = CGEN_INSN_MACH_HAS_P (idesc_table[sf->index].idata, mach_num);
d7900 1
a7900 4
      if (valid_p)
	idesc_table[sf->index].sem_fast = sf->fn;
      else
	idesc_table[sf->index].sem_fast = SEM_FN_NAME (i960base,x_invalid);
d7902 1
a7902 4
      if (valid_p)
	idesc_table[sf->index].sem_full = sf->fn;
      else
	idesc_table[sf->index].sem_full = SEM_FN_NAME (i960base,x_invalid);
@


1.1.1.5
log
@import gdb-1999-10-04 snapshot
@
text
@d58 2
a59 3
    /* Update the recorded pc in the cpu state struct.
       Only necessary for WITH_SCACHE case, but to avoid the
       conditional compilation ....  */
d61 4
a64 5
    /* Virtual insns have zero size.  Overwrite vpc with address of next insn
       using the default-insn-bitsize spec.  When executing insns in parallel
       we may want to queue the fault and continue execution.  */
    vpc = SEM_NEXT_VPC (sem_arg, pc, 4);
    vpc = sim_engine_invalid_insn (current_cpu, pc, vpc);
d7580 1
a7580 1
((void) 0); /*nop*/
d7900 1
a7900 3
      const CGEN_INSN *insn = idesc_table[sf->index].idata;
      int valid_p = (CGEN_INSN_VIRTUAL_P (insn)
		     || CGEN_INSN_MACH_HAS_P (insn, mach_num));
@


