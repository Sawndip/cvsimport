head	1.3;
access;
symbols
	gdb_6_3-20041109-release:1.2
	gdb_6_3-branch:1.2.0.80
	gdb_6_3-20041019-branchpoint:1.2
	drow_intercu-merge-20040921:1.2
	drow_intercu-merge-20040915:1.2
	jimb-gdb_6_2-e500-branch:1.2.0.82
	jimb-gdb_6_2-e500-branchpoint:1.2
	gdb_6_2-20040730-release:1.2
	gdb_6_2-branch:1.2.0.78
	gdb_6_2-2004-07-10-gmt-branchpoint:1.2
	gdb_6_1_1-20040616-release:1.2
	gdb_6_1-2004-04-05-release:1.2
	drow_intercu-merge-20040402:1.2
	drow_intercu-merge-20040327:1.2
	ezannoni_pie-20040323-branch:1.2.0.76
	ezannoni_pie-20040323-branchpoint:1.2
	cagney_tramp-20040321-mergepoint:1.2
	cagney_tramp-20040309-branch:1.2.0.74
	cagney_tramp-20040309-branchpoint:1.2
	gdb_6_1-branch:1.2.0.72
	gdb_6_1-2004-03-01-gmt-branchpoint:1.2
	drow_intercu-20040221-branch:1.2.0.70
	drow_intercu-20040221-branchpoint:1.2
	cagney_bfdfile-20040213-branch:1.2.0.68
	cagney_bfdfile-20040213-branchpoint:1.2
	drow-cplus-merge-20040208:1.2
	carlton_dictionary-20040126-merge:1.2
	cagney_bigcore-20040122-branch:1.2.0.66
	cagney_bigcore-20040122-branchpoint:1.2
	drow-cplus-merge-20040113:1.2
	drow-cplus-merge-20031224:1.2
	drow-cplus-merge-20031220:1.2
	carlton_dictionary-20031215-merge:1.2
	drow-cplus-merge-20031214:1.2
	carlton-dictionary-20031111-merge:1.2
	gdb_6_0-2003-10-04-release:1.2
	kettenis_sparc-20030918-branch:1.2.0.64
	kettenis_sparc-20030918-branchpoint:1.2
	carlton_dictionary-20030917-merge:1.2
	ezannoni_pie-20030916-branchpoint:1.2
	ezannoni_pie-20030916-branch:1.2.0.62
	cagney_x86i386-20030821-branch:1.2.0.60
	cagney_x86i386-20030821-branchpoint:1.2
	carlton_dictionary-20030805-merge:1.2
	carlton_dictionary-20030627-merge:1.2
	gdb_6_0-branch:1.2.0.58
	gdb_6_0-2003-06-23-branchpoint:1.2
	jimb-ppc64-linux-20030613-branch:1.2.0.56
	jimb-ppc64-linux-20030613-branchpoint:1.2
	cagney_convert-20030606-branch:1.2.0.54
	cagney_convert-20030606-branchpoint:1.2
	cagney_writestrings-20030508-branch:1.2.0.52
	cagney_writestrings-20030508-branchpoint:1.2
	jimb-ppc64-linux-20030528-branch:1.2.0.50
	jimb-ppc64-linux-20030528-branchpoint:1.2
	carlton_dictionary-20030523-merge:1.2
	cagney_fileio-20030521-branch:1.2.0.48
	cagney_fileio-20030521-branchpoint:1.2
	kettenis_i386newframe-20030517-mergepoint:1.2
	jimb-ppc64-linux-20030509-branch:1.2.0.46
	jimb-ppc64-linux-20030509-branchpoint:1.2
	kettenis_i386newframe-20030504-mergepoint:1.2
	carlton_dictionary-20030430-merge:1.2
	kettenis_i386newframe-20030419-branch:1.2.0.44
	kettenis_i386newframe-20030419-branchpoint:1.2
	carlton_dictionary-20030416-merge:1.2
	cagney_frameaddr-20030409-mergepoint:1.2
	kettenis_i386newframe-20030406-branch:1.2.0.42
	kettenis_i386newframe-20030406-branchpoint:1.2
	cagney_frameaddr-20030403-branchpoint:1.2
	cagney_frameaddr-20030403-branch:1.2.0.40
	cagney_framebase-20030330-mergepoint:1.2
	cagney_framebase-20030326-branch:1.2.0.38
	cagney_framebase-20030326-branchpoint:1.2
	cagney_lazyid-20030317-branch:1.2.0.36
	cagney_lazyid-20030317-branchpoint:1.2
	kettenis-i386newframe-20030316-mergepoint:1.2
	offbyone-20030313-branch:1.2.0.34
	offbyone-20030313-branchpoint:1.2
	kettenis-i386newframe-20030308-branch:1.2.0.32
	kettenis-i386newframe-20030308-branchpoint:1.2
	carlton_dictionary-20030305-merge:1.2
	cagney_offbyone-20030303-branch:1.2.0.30
	cagney_offbyone-20030303-branchpoint:1.2
	carlton_dictionary-20030207-merge:1.2
	interps-20030202-branch:1.2.0.28
	interps-20030202-branchpoint:1.2
	cagney-unwind-20030108-branch:1.2.0.26
	cagney-unwind-20030108-branchpoint:1.2
	carlton_dictionary-20021223-merge:1.2
	gdb_5_3-2002-12-12-release:1.2
	carlton_dictionary-20021115-merge:1.2
	kseitz_interps-20021105-merge:1.2
	kseitz_interps-20021103-merge:1.2
	drow-cplus-merge-20021020:1.2
	drow-cplus-merge-20021025:1.2
	carlton_dictionary-20021025-merge:1.2
	carlton_dictionary-20021011-merge:1.2
	drow-cplus-branch:1.2.0.24
	drow-cplus-branchpoint:1.2
	kseitz_interps-20020930-merge:1.2
	carlton_dictionary-20020927-merge:1.2
	carlton_dictionary-branch:1.2.0.22
	carlton_dictionary-20020920-branchpoint:1.2
	gdb_5_3-branch:1.2.0.20
	gdb_5_3-2002-09-04-branchpoint:1.2
	kseitz_interps-20020829-merge:1.2
	cagney_sysregs-20020825-branch:1.2.0.18
	cagney_sysregs-20020825-branchpoint:1.2
	readline_4_3-import-branch:1.2.0.16
	readline_4_3-import-branchpoint:1.2
	gdb_5_2_1-2002-07-23-release:1.2
	kseitz_interps-20020528-branch:1.2.0.14
	kseitz_interps-20020528-branchpoint:1.2
	cagney_regbuf-20020515-branch:1.2.0.12
	cagney_regbuf-20020515-branchpoint:1.2
	jimb-macro-020506-branch:1.2.0.10
	jimb-macro-020506-branchpoint:1.2
	gdb_5_2-2002-04-29-release:1.2
	gdb_5_2-branch:1.2.0.8
	gdb_5_2-2002-03-03-branchpoint:1.2
	gdb_5_1_1-2002-01-24-release:1.2
	gdb_5_1_0_1-2002-01-03-release:1.2
	gdb_5_1_0_1-2002-01-03-branch:1.2.0.6
	gdb_5_1_0_1-2002-01-03-branchpoint:1.2
	gdb_5_1-2001-11-21-release:1.2
	gdb_s390-2001-09-26-branch:1.2.0.4
	gdb_s390-2001-09-26-branchpoint:1.2
	gdb_5_1-2001-07-29-branch:1.2.0.2
	gdb_5_1-2001-07-29-branchpoint:1.2
	insight-precleanup-2001-01-01:1.1.1.3
	gdb-premipsmulti-2000-06-06-branch:1.1.1.3.0.4
	gdb-premipsmulti-2000-06-06-branchpoint:1.1.1.3
	gdb_5_0-2000-05-19-release:1.1.1.3
	gdb_4_18_2-2000-05-18-release:1.1.1.3
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.3
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.3
	gdb_5_0-2000-04-10-branch:1.1.1.3.0.2
	gdb_5_0-2000-04-10-branchpoint:1.1.1.3
	repo-unification-2000-02-06:1.1.1.3
	gdb-2000-02-04:1.1.1.3
	gdb-2000-02-02:1.1.1.3
	gdb-2000-02-01:1.1.1.3
	gdb-2000-01-31:1.1.1.3
	gdb-2000-01-26:1.1.1.3
	gdb-2000-01-24:1.1.1.3
	gdb-2000-01-17:1.1.1.3
	gdb-2000-01-10:1.1.1.3
	gdb-2000-01-05:1.1.1.3
	gdb-1999-12-21:1.1.1.3
	gdb-1999-12-13:1.1.1.3
	gdb-1999-12-07:1.1.1.3
	gdb-1999-12-06:1.1.1.3
	gdb-1999-11-16:1.1.1.3
	gdb-1999-11-08:1.1.1.3
	gdb-1999-11-01:1.1.1.3
	gdb-1999-10-25:1.1.1.3
	gdb-1999-10-18:1.1.1.3
	gdb-1999-10-11:1.1.1.3
	gdb-1999-10-04:1.1.1.3
	gdb-1999-09-28:1.1.1.3
	gdb-1999-09-21:1.1.1.3
	gdb-1999-09-13:1.1.1.3
	gdb-1999-09-08:1.1.1.3
	gdb-1999-08-30:1.1.1.3
	gdb-1999-08-23:1.1.1.3
	gdb-1999-08-16:1.1.1.3
	gdb-1999-08-09:1.1.1.3
	gdb-1999-08-02:1.1.1.3
	gdb-1999-07-26:1.1.1.3
	gdb-1999-07-19:1.1.1.3
	gdb-1999-07-12:1.1.1.3
	gdb-post-reformat-19990707:1.1.1.3
	gdb-1999-07-07-post-reformat-snapshot:1.1.1.3
	gdb-pre-reformat-19990707:1.1.1.3
	gdb-1999-07-07:1.1.1.3
	gdb-1999-07-05:1.1.1.3
	gdb-1999-06-28:1.1.1.3
	gdb-1999-06-21:1.1.1.3
	gdb-1999-06-14:1.1.1.3
	gdb-1999-06-07:1.1.1.3
	gdb-1999-06-01:1.1.1.3
	gdb-4_18-branch:1.1.1.1.0.2
	gdb-4_18-release:1.1.1.1
	gdb-1999-05-25:1.1.1.3
	gdb-1999-05-19:1.1.1.3
	gdb-1999-05-10:1.1.1.3
	gdb-19990504:1.1.1.3
	gdb-19990422:1.1.1.2
	SNAPSHOT:1.1.1
	gdb-4_18:1.1.1.1
	GDB_4_18:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.3
date	2004.12.01.15.27.19;	author cagney;	state dead;
branches;
next	1.2;

1.2
date	2001.02.07.01.16.05;	author dj;	state Exp;
branches;
next	1.1;

1.1
date	99.04.16.01.35.03;	author shebs;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.04.16.01.35.03;	author shebs;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.04.26.18.32.36;	author shebs;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	99.05.05.14.45.45;	author shebs;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Delete i960; deleted from GDB long long ago.
@
text
@/* CPU data for i960.

THIS FILE IS MACHINE GENERATED WITH CGEN.

Copyright (C) 1996, 1997, 1998, 1999, 2001 Free Software Foundation, Inc.

This file is part of the GNU Binutils and/or GDB, the GNU debugger.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License along
with this program; if not, write to the Free Software Foundation, Inc.,
59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

*/

#include "sysdep.h"
#include <ctype.h>
#include <stdio.h>
#include <stdarg.h>
#include "ansidecl.h"
#include "bfd.h"
#include "symcat.h"
#include "i960-desc.h"
#include "i960-opc.h"
#include "opintl.h"

/* Attributes.  */

static const CGEN_ATTR_ENTRY bool_attr[] =
{
  { "#f", 0 },
  { "#t", 1 },
  { 0, 0 }
};

static const CGEN_ATTR_ENTRY MACH_attr[] =
{
  { "base", MACH_BASE },
  { "i960_ka_sa", MACH_I960_KA_SA },
  { "i960_ca", MACH_I960_CA },
  { "max", MACH_MAX },
  { 0, 0 }
};

static const CGEN_ATTR_ENTRY ISA_attr[] =
{
  { "i960", ISA_I960 },
  { "max", ISA_MAX },
  { 0, 0 }
};

const CGEN_ATTR_TABLE i960_cgen_ifield_attr_table[] =
{
  { "MACH", & MACH_attr[0] },
  { "VIRTUAL", &bool_attr[0], &bool_attr[0] },
  { "PCREL-ADDR", &bool_attr[0], &bool_attr[0] },
  { "ABS-ADDR", &bool_attr[0], &bool_attr[0] },
  { "RESERVED", &bool_attr[0], &bool_attr[0] },
  { "SIGN-OPT", &bool_attr[0], &bool_attr[0] },
  { "SIGNED", &bool_attr[0], &bool_attr[0] },
  { 0, 0, 0 }
};

const CGEN_ATTR_TABLE i960_cgen_hardware_attr_table[] =
{
  { "MACH", & MACH_attr[0] },
  { "VIRTUAL", &bool_attr[0], &bool_attr[0] },
  { "CACHE-ADDR", &bool_attr[0], &bool_attr[0] },
  { "PC", &bool_attr[0], &bool_attr[0] },
  { "PROFILE", &bool_attr[0], &bool_attr[0] },
  { 0, 0, 0 }
};

const CGEN_ATTR_TABLE i960_cgen_operand_attr_table[] =
{
  { "MACH", & MACH_attr[0] },
  { "VIRTUAL", &bool_attr[0], &bool_attr[0] },
  { "PCREL-ADDR", &bool_attr[0], &bool_attr[0] },
  { "ABS-ADDR", &bool_attr[0], &bool_attr[0] },
  { "SIGN-OPT", &bool_attr[0], &bool_attr[0] },
  { "SIGNED", &bool_attr[0], &bool_attr[0] },
  { "NEGATIVE", &bool_attr[0], &bool_attr[0] },
  { "RELAX", &bool_attr[0], &bool_attr[0] },
  { "SEM-ONLY", &bool_attr[0], &bool_attr[0] },
  { 0, 0, 0 }
};

const CGEN_ATTR_TABLE i960_cgen_insn_attr_table[] =
{
  { "MACH", & MACH_attr[0] },
  { "ALIAS", &bool_attr[0], &bool_attr[0] },
  { "VIRTUAL", &bool_attr[0], &bool_attr[0] },
  { "UNCOND-CTI", &bool_attr[0], &bool_attr[0] },
  { "COND-CTI", &bool_attr[0], &bool_attr[0] },
  { "SKIP-CTI", &bool_attr[0], &bool_attr[0] },
  { "DELAY-SLOT", &bool_attr[0], &bool_attr[0] },
  { "RELAXABLE", &bool_attr[0], &bool_attr[0] },
  { "RELAX", &bool_attr[0], &bool_attr[0] },
  { "NO-DIS", &bool_attr[0], &bool_attr[0] },
  { "PBB", &bool_attr[0], &bool_attr[0] },
  { 0, 0, 0 }
};

/* Instruction set variants.  */

static const CGEN_ISA i960_cgen_isa_table[] = {
  { "i960", 32, 32, 32, 64,  },
  { 0 }
};

/* Machine variants.  */

static const CGEN_MACH i960_cgen_mach_table[] = {
  { "i960:ka_sa", "i960:ka_sa", MACH_I960_KA_SA },
  { "i960:ca", "i960:ca", MACH_I960_CA },
  { 0 }
};

static CGEN_KEYWORD_ENTRY i960_cgen_opval_h_gr_entries[] =
{
  { "fp", 31 },
  { "sp", 1 },
  { "r0", 0 },
  { "r1", 1 },
  { "r2", 2 },
  { "r3", 3 },
  { "r4", 4 },
  { "r5", 5 },
  { "r6", 6 },
  { "r7", 7 },
  { "r8", 8 },
  { "r9", 9 },
  { "r10", 10 },
  { "r11", 11 },
  { "r12", 12 },
  { "r13", 13 },
  { "r14", 14 },
  { "r15", 15 },
  { "g0", 16 },
  { "g1", 17 },
  { "g2", 18 },
  { "g3", 19 },
  { "g4", 20 },
  { "g5", 21 },
  { "g6", 22 },
  { "g7", 23 },
  { "g8", 24 },
  { "g9", 25 },
  { "g10", 26 },
  { "g11", 27 },
  { "g12", 28 },
  { "g13", 29 },
  { "g14", 30 },
  { "g15", 31 }
};

CGEN_KEYWORD i960_cgen_opval_h_gr =
{
  & i960_cgen_opval_h_gr_entries[0],
  34
};

static CGEN_KEYWORD_ENTRY i960_cgen_opval_h_cc_entries[] =
{
  { "cc", 0 }
};

CGEN_KEYWORD i960_cgen_opval_h_cc =
{
  & i960_cgen_opval_h_cc_entries[0],
  1
};



/* The hardware table.  */

#if defined (__STDC__) || defined (ALMOST_STDC) || defined (HAVE_STRINGIZE)
#define A(a) (1 << CGEN_HW_##a)
#else
#define A(a) (1 << CGEN_HW_/**/a)
#endif

const CGEN_HW_ENTRY i960_cgen_hw_table[] =
{
  { "h-memory", HW_H_MEMORY, CGEN_ASM_NONE, 0, { 0, { (1<<MACH_BASE) } } },
  { "h-sint", HW_H_SINT, CGEN_ASM_NONE, 0, { 0, { (1<<MACH_BASE) } } },
  { "h-uint", HW_H_UINT, CGEN_ASM_NONE, 0, { 0, { (1<<MACH_BASE) } } },
  { "h-addr", HW_H_ADDR, CGEN_ASM_NONE, 0, { 0, { (1<<MACH_BASE) } } },
  { "h-iaddr", HW_H_IADDR, CGEN_ASM_NONE, 0, { 0, { (1<<MACH_BASE) } } },
  { "h-pc", HW_H_PC, CGEN_ASM_NONE, 0, { 0|A(PROFILE)|A(PC), { (1<<MACH_BASE) } } },
  { "h-gr", HW_H_GR, CGEN_ASM_KEYWORD, (PTR) & i960_cgen_opval_h_gr, { 0|A(CACHE_ADDR)|A(PROFILE), { (1<<MACH_BASE) } } },
  { "h-cc", HW_H_CC, CGEN_ASM_KEYWORD, (PTR) & i960_cgen_opval_h_cc, { 0|A(CACHE_ADDR)|A(PROFILE), { (1<<MACH_BASE) } } },
  { 0 }
};

#undef A

/* The instruction field table.  */

#if defined (__STDC__) || defined (ALMOST_STDC) || defined (HAVE_STRINGIZE)
#define A(a) (1 << CGEN_IFLD_##a)
#else
#define A(a) (1 << CGEN_IFLD_/**/a)
#endif

const CGEN_IFLD i960_cgen_ifld_table[] =
{
  { I960_F_NIL, "f-nil", 0, 0, 0, 0, { 0, { (1<<MACH_BASE) } }  },
  { I960_F_OPCODE, "f-opcode", 0, 32, 0, 8, { 0, { (1<<MACH_BASE) } }  },
  { I960_F_SRCDST, "f-srcdst", 0, 32, 8, 5, { 0, { (1<<MACH_BASE) } }  },
  { I960_F_SRC2, "f-src2", 0, 32, 13, 5, { 0, { (1<<MACH_BASE) } }  },
  { I960_F_M3, "f-m3", 0, 32, 18, 1, { 0, { (1<<MACH_BASE) } }  },
  { I960_F_M2, "f-m2", 0, 32, 19, 1, { 0, { (1<<MACH_BASE) } }  },
  { I960_F_M1, "f-m1", 0, 32, 20, 1, { 0, { (1<<MACH_BASE) } }  },
  { I960_F_OPCODE2, "f-opcode2", 0, 32, 21, 4, { 0, { (1<<MACH_BASE) } }  },
  { I960_F_ZERO, "f-zero", 0, 32, 25, 2, { 0, { (1<<MACH_BASE) } }  },
  { I960_F_SRC1, "f-src1", 0, 32, 27, 5, { 0, { (1<<MACH_BASE) } }  },
  { I960_F_ABASE, "f-abase", 0, 32, 13, 5, { 0, { (1<<MACH_BASE) } }  },
  { I960_F_MODEA, "f-modea", 0, 32, 18, 1, { 0, { (1<<MACH_BASE) } }  },
  { I960_F_ZEROA, "f-zeroa", 0, 32, 19, 1, { 0, { (1<<MACH_BASE) } }  },
  { I960_F_OFFSET, "f-offset", 0, 32, 20, 12, { 0, { (1<<MACH_BASE) } }  },
  { I960_F_MODEB, "f-modeb", 0, 32, 18, 4, { 0, { (1<<MACH_BASE) } }  },
  { I960_F_SCALE, "f-scale", 0, 32, 22, 3, { 0, { (1<<MACH_BASE) } }  },
  { I960_F_ZEROB, "f-zerob", 0, 32, 25, 2, { 0, { (1<<MACH_BASE) } }  },
  { I960_F_INDEX, "f-index", 0, 32, 27, 5, { 0, { (1<<MACH_BASE) } }  },
  { I960_F_OPTDISP, "f-optdisp", 32, 32, 0, 32, { 0, { (1<<MACH_BASE) } }  },
  { I960_F_BR_SRC1, "f-br-src1", 0, 32, 8, 5, { 0, { (1<<MACH_BASE) } }  },
  { I960_F_BR_SRC2, "f-br-src2", 0, 32, 13, 5, { 0, { (1<<MACH_BASE) } }  },
  { I960_F_BR_M1, "f-br-m1", 0, 32, 18, 1, { 0, { (1<<MACH_BASE) } }  },
  { I960_F_BR_DISP, "f-br-disp", 0, 32, 19, 11, { 0|A(PCREL_ADDR), { (1<<MACH_BASE) } }  },
  { I960_F_BR_ZERO, "f-br-zero", 0, 32, 30, 2, { 0, { (1<<MACH_BASE) } }  },
  { I960_F_CTRL_DISP, "f-ctrl-disp", 0, 32, 8, 22, { 0|A(PCREL_ADDR), { (1<<MACH_BASE) } }  },
  { I960_F_CTRL_ZERO, "f-ctrl-zero", 0, 32, 30, 2, { 0, { (1<<MACH_BASE) } }  },
  { 0 }
};

#undef A

/* The operand table.  */

#if defined (__STDC__) || defined (ALMOST_STDC) || defined (HAVE_STRINGIZE)
#define A(a) (1 << CGEN_OPERAND_##a)
#else
#define A(a) (1 << CGEN_OPERAND_/**/a)
#endif
#if defined (__STDC__) || defined (ALMOST_STDC) || defined (HAVE_STRINGIZE)
#define OPERAND(op) I960_OPERAND_##op
#else
#define OPERAND(op) I960_OPERAND_/**/op
#endif

const CGEN_OPERAND i960_cgen_operand_table[] =
{
/* pc: program counter */
  { "pc", I960_OPERAND_PC, HW_H_PC, 0, 0,
    { 0|A(SEM_ONLY), { (1<<MACH_BASE) } }  },
/* src1: source register 1 */
  { "src1", I960_OPERAND_SRC1, HW_H_GR, 27, 5,
    { 0, { (1<<MACH_BASE) } }  },
/* src2: source register 2 */
  { "src2", I960_OPERAND_SRC2, HW_H_GR, 13, 5,
    { 0, { (1<<MACH_BASE) } }  },
/* dst: source/dest register */
  { "dst", I960_OPERAND_DST, HW_H_GR, 8, 5,
    { 0, { (1<<MACH_BASE) } }  },
/* lit1: literal 1 */
  { "lit1", I960_OPERAND_LIT1, HW_H_UINT, 27, 5,
    { 0, { (1<<MACH_BASE) } }  },
/* lit2: literal 2 */
  { "lit2", I960_OPERAND_LIT2, HW_H_UINT, 13, 5,
    { 0, { (1<<MACH_BASE) } }  },
/* st_src: store src */
  { "st_src", I960_OPERAND_ST_SRC, HW_H_GR, 8, 5,
    { 0, { (1<<MACH_BASE) } }  },
/* abase: abase */
  { "abase", I960_OPERAND_ABASE, HW_H_GR, 13, 5,
    { 0, { (1<<MACH_BASE) } }  },
/* offset: offset */
  { "offset", I960_OPERAND_OFFSET, HW_H_UINT, 20, 12,
    { 0, { (1<<MACH_BASE) } }  },
/* scale: scale */
  { "scale", I960_OPERAND_SCALE, HW_H_UINT, 22, 3,
    { 0, { (1<<MACH_BASE) } }  },
/* index: index */
  { "index", I960_OPERAND_INDEX, HW_H_GR, 27, 5,
    { 0, { (1<<MACH_BASE) } }  },
/* optdisp: optional displacement */
  { "optdisp", I960_OPERAND_OPTDISP, HW_H_UINT, 0, 32,
    { 0, { (1<<MACH_BASE) } }  },
/* br_src1: branch src1 */
  { "br_src1", I960_OPERAND_BR_SRC1, HW_H_GR, 8, 5,
    { 0, { (1<<MACH_BASE) } }  },
/* br_src2: branch src2 */
  { "br_src2", I960_OPERAND_BR_SRC2, HW_H_GR, 13, 5,
    { 0, { (1<<MACH_BASE) } }  },
/* br_disp: branch displacement */
  { "br_disp", I960_OPERAND_BR_DISP, HW_H_IADDR, 19, 11,
    { 0|A(PCREL_ADDR), { (1<<MACH_BASE) } }  },
/* br_lit1: branch literal 1 */
  { "br_lit1", I960_OPERAND_BR_LIT1, HW_H_UINT, 8, 5,
    { 0, { (1<<MACH_BASE) } }  },
/* ctrl_disp: ctrl branch disp */
  { "ctrl_disp", I960_OPERAND_CTRL_DISP, HW_H_IADDR, 8, 22,
    { 0|A(PCREL_ADDR), { (1<<MACH_BASE) } }  },
  { 0 }
};

#undef A

#define OP(field) CGEN_SYNTAX_MAKE_FIELD (OPERAND (field))
#if defined (__STDC__) || defined (ALMOST_STDC) || defined (HAVE_STRINGIZE)
#define A(a) (1 << CGEN_INSN_##a)
#else
#define A(a) (1 << CGEN_INSN_/**/a)
#endif

/* The instruction table.  */

static const CGEN_IBASE i960_cgen_insn_table[MAX_INSNS] =
{
  /* Special null first entry.
     A `num' value of zero is thus invalid.
     Also, the special `invalid' insn resides here.  */
  { 0, 0, 0 },
/* mulo $src1, $src2, $dst */
  {
    I960_INSN_MULO, "mulo", "mulo", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* mulo $lit1, $src2, $dst */
  {
    I960_INSN_MULO1, "mulo1", "mulo", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* mulo $src1, $lit2, $dst */
  {
    I960_INSN_MULO2, "mulo2", "mulo", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* mulo $lit1, $lit2, $dst */
  {
    I960_INSN_MULO3, "mulo3", "mulo", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* remo $src1, $src2, $dst */
  {
    I960_INSN_REMO, "remo", "remo", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* remo $lit1, $src2, $dst */
  {
    I960_INSN_REMO1, "remo1", "remo", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* remo $src1, $lit2, $dst */
  {
    I960_INSN_REMO2, "remo2", "remo", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* remo $lit1, $lit2, $dst */
  {
    I960_INSN_REMO3, "remo3", "remo", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* divo $src1, $src2, $dst */
  {
    I960_INSN_DIVO, "divo", "divo", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* divo $lit1, $src2, $dst */
  {
    I960_INSN_DIVO1, "divo1", "divo", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* divo $src1, $lit2, $dst */
  {
    I960_INSN_DIVO2, "divo2", "divo", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* divo $lit1, $lit2, $dst */
  {
    I960_INSN_DIVO3, "divo3", "divo", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* remi $src1, $src2, $dst */
  {
    I960_INSN_REMI, "remi", "remi", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* remi $lit1, $src2, $dst */
  {
    I960_INSN_REMI1, "remi1", "remi", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* remi $src1, $lit2, $dst */
  {
    I960_INSN_REMI2, "remi2", "remi", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* remi $lit1, $lit2, $dst */
  {
    I960_INSN_REMI3, "remi3", "remi", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* divi $src1, $src2, $dst */
  {
    I960_INSN_DIVI, "divi", "divi", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* divi $lit1, $src2, $dst */
  {
    I960_INSN_DIVI1, "divi1", "divi", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* divi $src1, $lit2, $dst */
  {
    I960_INSN_DIVI2, "divi2", "divi", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* divi $lit1, $lit2, $dst */
  {
    I960_INSN_DIVI3, "divi3", "divi", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* addo $src1, $src2, $dst */
  {
    I960_INSN_ADDO, "addo", "addo", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* addo $lit1, $src2, $dst */
  {
    I960_INSN_ADDO1, "addo1", "addo", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* addo $src1, $lit2, $dst */
  {
    I960_INSN_ADDO2, "addo2", "addo", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* addo $lit1, $lit2, $dst */
  {
    I960_INSN_ADDO3, "addo3", "addo", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* subo $src1, $src2, $dst */
  {
    I960_INSN_SUBO, "subo", "subo", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* subo $lit1, $src2, $dst */
  {
    I960_INSN_SUBO1, "subo1", "subo", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* subo $src1, $lit2, $dst */
  {
    I960_INSN_SUBO2, "subo2", "subo", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* subo $lit1, $lit2, $dst */
  {
    I960_INSN_SUBO3, "subo3", "subo", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* notbit $src1, $src2, $dst */
  {
    I960_INSN_NOTBIT, "notbit", "notbit", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* notbit $lit1, $src2, $dst */
  {
    I960_INSN_NOTBIT1, "notbit1", "notbit", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* notbit $src1, $lit2, $dst */
  {
    I960_INSN_NOTBIT2, "notbit2", "notbit", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* notbit $lit1, $lit2, $dst */
  {
    I960_INSN_NOTBIT3, "notbit3", "notbit", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* and $src1, $src2, $dst */
  {
    I960_INSN_AND, "and", "and", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* and $lit1, $src2, $dst */
  {
    I960_INSN_AND1, "and1", "and", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* and $src1, $lit2, $dst */
  {
    I960_INSN_AND2, "and2", "and", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* and $lit1, $lit2, $dst */
  {
    I960_INSN_AND3, "and3", "and", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* andnot $src1, $src2, $dst */
  {
    I960_INSN_ANDNOT, "andnot", "andnot", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* andnot $lit1, $src2, $dst */
  {
    I960_INSN_ANDNOT1, "andnot1", "andnot", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* andnot $src1, $lit2, $dst */
  {
    I960_INSN_ANDNOT2, "andnot2", "andnot", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* andnot $lit1, $lit2, $dst */
  {
    I960_INSN_ANDNOT3, "andnot3", "andnot", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* setbit $src1, $src2, $dst */
  {
    I960_INSN_SETBIT, "setbit", "setbit", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* setbit $lit1, $src2, $dst */
  {
    I960_INSN_SETBIT1, "setbit1", "setbit", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* setbit $src1, $lit2, $dst */
  {
    I960_INSN_SETBIT2, "setbit2", "setbit", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* setbit $lit1, $lit2, $dst */
  {
    I960_INSN_SETBIT3, "setbit3", "setbit", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* notand $src1, $src2, $dst */
  {
    I960_INSN_NOTAND, "notand", "notand", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* notand $lit1, $src2, $dst */
  {
    I960_INSN_NOTAND1, "notand1", "notand", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* notand $src1, $lit2, $dst */
  {
    I960_INSN_NOTAND2, "notand2", "notand", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* notand $lit1, $lit2, $dst */
  {
    I960_INSN_NOTAND3, "notand3", "notand", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* xor $src1, $src2, $dst */
  {
    I960_INSN_XOR, "xor", "xor", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* xor $lit1, $src2, $dst */
  {
    I960_INSN_XOR1, "xor1", "xor", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* xor $src1, $lit2, $dst */
  {
    I960_INSN_XOR2, "xor2", "xor", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* xor $lit1, $lit2, $dst */
  {
    I960_INSN_XOR3, "xor3", "xor", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* or $src1, $src2, $dst */
  {
    I960_INSN_OR, "or", "or", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* or $lit1, $src2, $dst */
  {
    I960_INSN_OR1, "or1", "or", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* or $src1, $lit2, $dst */
  {
    I960_INSN_OR2, "or2", "or", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* or $lit1, $lit2, $dst */
  {
    I960_INSN_OR3, "or3", "or", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* nor $src1, $src2, $dst */
  {
    I960_INSN_NOR, "nor", "nor", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* nor $lit1, $src2, $dst */
  {
    I960_INSN_NOR1, "nor1", "nor", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* nor $src1, $lit2, $dst */
  {
    I960_INSN_NOR2, "nor2", "nor", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* nor $lit1, $lit2, $dst */
  {
    I960_INSN_NOR3, "nor3", "nor", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* xnor $src1, $src2, $dst */
  {
    I960_INSN_XNOR, "xnor", "xnor", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* xnor $lit1, $src2, $dst */
  {
    I960_INSN_XNOR1, "xnor1", "xnor", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* xnor $src1, $lit2, $dst */
  {
    I960_INSN_XNOR2, "xnor2", "xnor", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* xnor $lit1, $lit2, $dst */
  {
    I960_INSN_XNOR3, "xnor3", "xnor", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* not $src1, $src2, $dst */
  {
    I960_INSN_NOT, "not", "not", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* not $lit1, $src2, $dst */
  {
    I960_INSN_NOT1, "not1", "not", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* not $src1, $lit2, $dst */
  {
    I960_INSN_NOT2, "not2", "not", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* not $lit1, $lit2, $dst */
  {
    I960_INSN_NOT3, "not3", "not", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* ornot $src1, $src2, $dst */
  {
    I960_INSN_ORNOT, "ornot", "ornot", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* ornot $lit1, $src2, $dst */
  {
    I960_INSN_ORNOT1, "ornot1", "ornot", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* ornot $src1, $lit2, $dst */
  {
    I960_INSN_ORNOT2, "ornot2", "ornot", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* ornot $lit1, $lit2, $dst */
  {
    I960_INSN_ORNOT3, "ornot3", "ornot", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* clrbit $src1, $src2, $dst */
  {
    I960_INSN_CLRBIT, "clrbit", "clrbit", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* clrbit $lit1, $src2, $dst */
  {
    I960_INSN_CLRBIT1, "clrbit1", "clrbit", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* clrbit $src1, $lit2, $dst */
  {
    I960_INSN_CLRBIT2, "clrbit2", "clrbit", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* clrbit $lit1, $lit2, $dst */
  {
    I960_INSN_CLRBIT3, "clrbit3", "clrbit", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* shlo $src1, $src2, $dst */
  {
    I960_INSN_SHLO, "shlo", "shlo", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* shlo $lit1, $src2, $dst */
  {
    I960_INSN_SHLO1, "shlo1", "shlo", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* shlo $src1, $lit2, $dst */
  {
    I960_INSN_SHLO2, "shlo2", "shlo", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* shlo $lit1, $lit2, $dst */
  {
    I960_INSN_SHLO3, "shlo3", "shlo", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* shro $src1, $src2, $dst */
  {
    I960_INSN_SHRO, "shro", "shro", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* shro $lit1, $src2, $dst */
  {
    I960_INSN_SHRO1, "shro1", "shro", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* shro $src1, $lit2, $dst */
  {
    I960_INSN_SHRO2, "shro2", "shro", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* shro $lit1, $lit2, $dst */
  {
    I960_INSN_SHRO3, "shro3", "shro", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* shli $src1, $src2, $dst */
  {
    I960_INSN_SHLI, "shli", "shli", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* shli $lit1, $src2, $dst */
  {
    I960_INSN_SHLI1, "shli1", "shli", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* shli $src1, $lit2, $dst */
  {
    I960_INSN_SHLI2, "shli2", "shli", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* shli $lit1, $lit2, $dst */
  {
    I960_INSN_SHLI3, "shli3", "shli", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* shri $src1, $src2, $dst */
  {
    I960_INSN_SHRI, "shri", "shri", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* shri $lit1, $src2, $dst */
  {
    I960_INSN_SHRI1, "shri1", "shri", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* shri $src1, $lit2, $dst */
  {
    I960_INSN_SHRI2, "shri2", "shri", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* shri $lit1, $lit2, $dst */
  {
    I960_INSN_SHRI3, "shri3", "shri", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* emul $src1, $src2, $dst */
  {
    I960_INSN_EMUL, "emul", "emul", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* emul $lit1, $src2, $dst */
  {
    I960_INSN_EMUL1, "emul1", "emul", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* emul $src1, $lit2, $dst */
  {
    I960_INSN_EMUL2, "emul2", "emul", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* emul $lit1, $lit2, $dst */
  {
    I960_INSN_EMUL3, "emul3", "emul", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* mov $src1, $dst */
  {
    I960_INSN_MOV, "mov", "mov", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* mov $lit1, $dst */
  {
    I960_INSN_MOV1, "mov1", "mov", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* movl $src1, $dst */
  {
    I960_INSN_MOVL, "movl", "movl", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* movl $lit1, $dst */
  {
    I960_INSN_MOVL1, "movl1", "movl", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* movt $src1, $dst */
  {
    I960_INSN_MOVT, "movt", "movt", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* movt $lit1, $dst */
  {
    I960_INSN_MOVT1, "movt1", "movt", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* movq $src1, $dst */
  {
    I960_INSN_MOVQ, "movq", "movq", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* movq $lit1, $dst */
  {
    I960_INSN_MOVQ1, "movq1", "movq", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* modpc $src1, $src2, $dst */
  {
    I960_INSN_MODPC, "modpc", "modpc", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* modac $src1, $src2, $dst */
  {
    I960_INSN_MODAC, "modac", "modac", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* lda $offset, $dst */
  {
    I960_INSN_LDA_OFFSET, "lda-offset", "lda", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* lda $offset($abase), $dst */
  {
    I960_INSN_LDA_INDIRECT_OFFSET, "lda-indirect-offset", "lda", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* lda ($abase), $dst */
  {
    I960_INSN_LDA_INDIRECT, "lda-indirect", "lda", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* lda ($abase)[$index*S$scale], $dst */
  {
    I960_INSN_LDA_INDIRECT_INDEX, "lda-indirect-index", "lda", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* lda $optdisp, $dst */
  {
    I960_INSN_LDA_DISP, "lda-disp", "lda", 64,
    { 0, { (1<<MACH_BASE) } }
  },
/* lda $optdisp($abase), $dst */
  {
    I960_INSN_LDA_INDIRECT_DISP, "lda-indirect-disp", "lda", 64,
    { 0, { (1<<MACH_BASE) } }
  },
/* lda $optdisp[$index*S$scale], $dst */
  {
    I960_INSN_LDA_INDEX_DISP, "lda-index-disp", "lda", 64,
    { 0, { (1<<MACH_BASE) } }
  },
/* lda $optdisp($abase)[$index*S$scale], $dst */
  {
    I960_INSN_LDA_INDIRECT_INDEX_DISP, "lda-indirect-index-disp", "lda", 64,
    { 0, { (1<<MACH_BASE) } }
  },
/* ld $offset, $dst */
  {
    I960_INSN_LD_OFFSET, "ld-offset", "ld", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* ld $offset($abase), $dst */
  {
    I960_INSN_LD_INDIRECT_OFFSET, "ld-indirect-offset", "ld", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* ld ($abase), $dst */
  {
    I960_INSN_LD_INDIRECT, "ld-indirect", "ld", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* ld ($abase)[$index*S$scale], $dst */
  {
    I960_INSN_LD_INDIRECT_INDEX, "ld-indirect-index", "ld", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* ld $optdisp, $dst */
  {
    I960_INSN_LD_DISP, "ld-disp", "ld", 64,
    { 0, { (1<<MACH_BASE) } }
  },
/* ld $optdisp($abase), $dst */
  {
    I960_INSN_LD_INDIRECT_DISP, "ld-indirect-disp", "ld", 64,
    { 0, { (1<<MACH_BASE) } }
  },
/* ld $optdisp[$index*S$scale], $dst */
  {
    I960_INSN_LD_INDEX_DISP, "ld-index-disp", "ld", 64,
    { 0, { (1<<MACH_BASE) } }
  },
/* ld $optdisp($abase)[$index*S$scale], $dst */
  {
    I960_INSN_LD_INDIRECT_INDEX_DISP, "ld-indirect-index-disp", "ld", 64,
    { 0, { (1<<MACH_BASE) } }
  },
/* ldob $offset, $dst */
  {
    I960_INSN_LDOB_OFFSET, "ldob-offset", "ldob", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* ldob $offset($abase), $dst */
  {
    I960_INSN_LDOB_INDIRECT_OFFSET, "ldob-indirect-offset", "ldob", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* ldob ($abase), $dst */
  {
    I960_INSN_LDOB_INDIRECT, "ldob-indirect", "ldob", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* ldob ($abase)[$index*S$scale], $dst */
  {
    I960_INSN_LDOB_INDIRECT_INDEX, "ldob-indirect-index", "ldob", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* ldob $optdisp, $dst */
  {
    I960_INSN_LDOB_DISP, "ldob-disp", "ldob", 64,
    { 0, { (1<<MACH_BASE) } }
  },
/* ldob $optdisp($abase), $dst */
  {
    I960_INSN_LDOB_INDIRECT_DISP, "ldob-indirect-disp", "ldob", 64,
    { 0, { (1<<MACH_BASE) } }
  },
/* ldob $optdisp[$index*S$scale], $dst */
  {
    I960_INSN_LDOB_INDEX_DISP, "ldob-index-disp", "ldob", 64,
    { 0, { (1<<MACH_BASE) } }
  },
/* ldob $optdisp($abase)[$index*S$scale], $dst */
  {
    I960_INSN_LDOB_INDIRECT_INDEX_DISP, "ldob-indirect-index-disp", "ldob", 64,
    { 0, { (1<<MACH_BASE) } }
  },
/* ldos $offset, $dst */
  {
    I960_INSN_LDOS_OFFSET, "ldos-offset", "ldos", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* ldos $offset($abase), $dst */
  {
    I960_INSN_LDOS_INDIRECT_OFFSET, "ldos-indirect-offset", "ldos", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* ldos ($abase), $dst */
  {
    I960_INSN_LDOS_INDIRECT, "ldos-indirect", "ldos", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* ldos ($abase)[$index*S$scale], $dst */
  {
    I960_INSN_LDOS_INDIRECT_INDEX, "ldos-indirect-index", "ldos", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* ldos $optdisp, $dst */
  {
    I960_INSN_LDOS_DISP, "ldos-disp", "ldos", 64,
    { 0, { (1<<MACH_BASE) } }
  },
/* ldos $optdisp($abase), $dst */
  {
    I960_INSN_LDOS_INDIRECT_DISP, "ldos-indirect-disp", "ldos", 64,
    { 0, { (1<<MACH_BASE) } }
  },
/* ldos $optdisp[$index*S$scale], $dst */
  {
    I960_INSN_LDOS_INDEX_DISP, "ldos-index-disp", "ldos", 64,
    { 0, { (1<<MACH_BASE) } }
  },
/* ldos $optdisp($abase)[$index*S$scale], $dst */
  {
    I960_INSN_LDOS_INDIRECT_INDEX_DISP, "ldos-indirect-index-disp", "ldos", 64,
    { 0, { (1<<MACH_BASE) } }
  },
/* ldib $offset, $dst */
  {
    I960_INSN_LDIB_OFFSET, "ldib-offset", "ldib", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* ldib $offset($abase), $dst */
  {
    I960_INSN_LDIB_INDIRECT_OFFSET, "ldib-indirect-offset", "ldib", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* ldib ($abase), $dst */
  {
    I960_INSN_LDIB_INDIRECT, "ldib-indirect", "ldib", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* ldib ($abase)[$index*S$scale], $dst */
  {
    I960_INSN_LDIB_INDIRECT_INDEX, "ldib-indirect-index", "ldib", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* ldib $optdisp, $dst */
  {
    I960_INSN_LDIB_DISP, "ldib-disp", "ldib", 64,
    { 0, { (1<<MACH_BASE) } }
  },
/* ldib $optdisp($abase), $dst */
  {
    I960_INSN_LDIB_INDIRECT_DISP, "ldib-indirect-disp", "ldib", 64,
    { 0, { (1<<MACH_BASE) } }
  },
/* ldib $optdisp[$index*S$scale], $dst */
  {
    I960_INSN_LDIB_INDEX_DISP, "ldib-index-disp", "ldib", 64,
    { 0, { (1<<MACH_BASE) } }
  },
/* ldib $optdisp($abase)[$index*S$scale], $dst */
  {
    I960_INSN_LDIB_INDIRECT_INDEX_DISP, "ldib-indirect-index-disp", "ldib", 64,
    { 0, { (1<<MACH_BASE) } }
  },
/* ldis $offset, $dst */
  {
    I960_INSN_LDIS_OFFSET, "ldis-offset", "ldis", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* ldis $offset($abase), $dst */
  {
    I960_INSN_LDIS_INDIRECT_OFFSET, "ldis-indirect-offset", "ldis", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* ldis ($abase), $dst */
  {
    I960_INSN_LDIS_INDIRECT, "ldis-indirect", "ldis", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* ldis ($abase)[$index*S$scale], $dst */
  {
    I960_INSN_LDIS_INDIRECT_INDEX, "ldis-indirect-index", "ldis", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* ldis $optdisp, $dst */
  {
    I960_INSN_LDIS_DISP, "ldis-disp", "ldis", 64,
    { 0, { (1<<MACH_BASE) } }
  },
/* ldis $optdisp($abase), $dst */
  {
    I960_INSN_LDIS_INDIRECT_DISP, "ldis-indirect-disp", "ldis", 64,
    { 0, { (1<<MACH_BASE) } }
  },
/* ldis $optdisp[$index*S$scale], $dst */
  {
    I960_INSN_LDIS_INDEX_DISP, "ldis-index-disp", "ldis", 64,
    { 0, { (1<<MACH_BASE) } }
  },
/* ldis $optdisp($abase)[$index*S$scale], $dst */
  {
    I960_INSN_LDIS_INDIRECT_INDEX_DISP, "ldis-indirect-index-disp", "ldis", 64,
    { 0, { (1<<MACH_BASE) } }
  },
/* ldl $offset, $dst */
  {
    I960_INSN_LDL_OFFSET, "ldl-offset", "ldl", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* ldl $offset($abase), $dst */
  {
    I960_INSN_LDL_INDIRECT_OFFSET, "ldl-indirect-offset", "ldl", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* ldl ($abase), $dst */
  {
    I960_INSN_LDL_INDIRECT, "ldl-indirect", "ldl", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* ldl ($abase)[$index*S$scale], $dst */
  {
    I960_INSN_LDL_INDIRECT_INDEX, "ldl-indirect-index", "ldl", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* ldl $optdisp, $dst */
  {
    I960_INSN_LDL_DISP, "ldl-disp", "ldl", 64,
    { 0, { (1<<MACH_BASE) } }
  },
/* ldl $optdisp($abase), $dst */
  {
    I960_INSN_LDL_INDIRECT_DISP, "ldl-indirect-disp", "ldl", 64,
    { 0, { (1<<MACH_BASE) } }
  },
/* ldl $optdisp[$index*S$scale], $dst */
  {
    I960_INSN_LDL_INDEX_DISP, "ldl-index-disp", "ldl", 64,
    { 0, { (1<<MACH_BASE) } }
  },
/* ldl $optdisp($abase)[$index*S$scale], $dst */
  {
    I960_INSN_LDL_INDIRECT_INDEX_DISP, "ldl-indirect-index-disp", "ldl", 64,
    { 0, { (1<<MACH_BASE) } }
  },
/* ldt $offset, $dst */
  {
    I960_INSN_LDT_OFFSET, "ldt-offset", "ldt", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* ldt $offset($abase), $dst */
  {
    I960_INSN_LDT_INDIRECT_OFFSET, "ldt-indirect-offset", "ldt", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* ldt ($abase), $dst */
  {
    I960_INSN_LDT_INDIRECT, "ldt-indirect", "ldt", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* ldt ($abase)[$index*S$scale], $dst */
  {
    I960_INSN_LDT_INDIRECT_INDEX, "ldt-indirect-index", "ldt", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* ldt $optdisp, $dst */
  {
    I960_INSN_LDT_DISP, "ldt-disp", "ldt", 64,
    { 0, { (1<<MACH_BASE) } }
  },
/* ldt $optdisp($abase), $dst */
  {
    I960_INSN_LDT_INDIRECT_DISP, "ldt-indirect-disp", "ldt", 64,
    { 0, { (1<<MACH_BASE) } }
  },
/* ldt $optdisp[$index*S$scale], $dst */
  {
    I960_INSN_LDT_INDEX_DISP, "ldt-index-disp", "ldt", 64,
    { 0, { (1<<MACH_BASE) } }
  },
/* ldt $optdisp($abase)[$index*S$scale], $dst */
  {
    I960_INSN_LDT_INDIRECT_INDEX_DISP, "ldt-indirect-index-disp", "ldt", 64,
    { 0, { (1<<MACH_BASE) } }
  },
/* ldq $offset, $dst */
  {
    I960_INSN_LDQ_OFFSET, "ldq-offset", "ldq", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* ldq $offset($abase), $dst */
  {
    I960_INSN_LDQ_INDIRECT_OFFSET, "ldq-indirect-offset", "ldq", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* ldq ($abase), $dst */
  {
    I960_INSN_LDQ_INDIRECT, "ldq-indirect", "ldq", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* ldq ($abase)[$index*S$scale], $dst */
  {
    I960_INSN_LDQ_INDIRECT_INDEX, "ldq-indirect-index", "ldq", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* ldq $optdisp, $dst */
  {
    I960_INSN_LDQ_DISP, "ldq-disp", "ldq", 64,
    { 0, { (1<<MACH_BASE) } }
  },
/* ldq $optdisp($abase), $dst */
  {
    I960_INSN_LDQ_INDIRECT_DISP, "ldq-indirect-disp", "ldq", 64,
    { 0, { (1<<MACH_BASE) } }
  },
/* ldq $optdisp[$index*S$scale], $dst */
  {
    I960_INSN_LDQ_INDEX_DISP, "ldq-index-disp", "ldq", 64,
    { 0, { (1<<MACH_BASE) } }
  },
/* ldq $optdisp($abase)[$index*S$scale], $dst */
  {
    I960_INSN_LDQ_INDIRECT_INDEX_DISP, "ldq-indirect-index-disp", "ldq", 64,
    { 0, { (1<<MACH_BASE) } }
  },
/* st $st_src, $offset */
  {
    I960_INSN_ST_OFFSET, "st-offset", "st", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* st $st_src, $offset($abase) */
  {
    I960_INSN_ST_INDIRECT_OFFSET, "st-indirect-offset", "st", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* st $st_src, ($abase) */
  {
    I960_INSN_ST_INDIRECT, "st-indirect", "st", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* st $st_src, ($abase)[$index*S$scale] */
  {
    I960_INSN_ST_INDIRECT_INDEX, "st-indirect-index", "st", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* st $st_src, $optdisp */
  {
    I960_INSN_ST_DISP, "st-disp", "st", 64,
    { 0, { (1<<MACH_BASE) } }
  },
/* st $st_src, $optdisp($abase) */
  {
    I960_INSN_ST_INDIRECT_DISP, "st-indirect-disp", "st", 64,
    { 0, { (1<<MACH_BASE) } }
  },
/* st $st_src, $optdisp[$index*S$scale */
  {
    I960_INSN_ST_INDEX_DISP, "st-index-disp", "st", 64,
    { 0, { (1<<MACH_BASE) } }
  },
/* st $st_src, $optdisp($abase)[$index*S$scale] */
  {
    I960_INSN_ST_INDIRECT_INDEX_DISP, "st-indirect-index-disp", "st", 64,
    { 0, { (1<<MACH_BASE) } }
  },
/* stob $st_src, $offset */
  {
    I960_INSN_STOB_OFFSET, "stob-offset", "stob", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* stob $st_src, $offset($abase) */
  {
    I960_INSN_STOB_INDIRECT_OFFSET, "stob-indirect-offset", "stob", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* stob $st_src, ($abase) */
  {
    I960_INSN_STOB_INDIRECT, "stob-indirect", "stob", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* stob $st_src, ($abase)[$index*S$scale] */
  {
    I960_INSN_STOB_INDIRECT_INDEX, "stob-indirect-index", "stob", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* stob $st_src, $optdisp */
  {
    I960_INSN_STOB_DISP, "stob-disp", "stob", 64,
    { 0, { (1<<MACH_BASE) } }
  },
/* stob $st_src, $optdisp($abase) */
  {
    I960_INSN_STOB_INDIRECT_DISP, "stob-indirect-disp", "stob", 64,
    { 0, { (1<<MACH_BASE) } }
  },
/* stob $st_src, $optdisp[$index*S$scale */
  {
    I960_INSN_STOB_INDEX_DISP, "stob-index-disp", "stob", 64,
    { 0, { (1<<MACH_BASE) } }
  },
/* stob $st_src, $optdisp($abase)[$index*S$scale] */
  {
    I960_INSN_STOB_INDIRECT_INDEX_DISP, "stob-indirect-index-disp", "stob", 64,
    { 0, { (1<<MACH_BASE) } }
  },
/* stos $st_src, $offset */
  {
    I960_INSN_STOS_OFFSET, "stos-offset", "stos", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* stos $st_src, $offset($abase) */
  {
    I960_INSN_STOS_INDIRECT_OFFSET, "stos-indirect-offset", "stos", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* stos $st_src, ($abase) */
  {
    I960_INSN_STOS_INDIRECT, "stos-indirect", "stos", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* stos $st_src, ($abase)[$index*S$scale] */
  {
    I960_INSN_STOS_INDIRECT_INDEX, "stos-indirect-index", "stos", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* stos $st_src, $optdisp */
  {
    I960_INSN_STOS_DISP, "stos-disp", "stos", 64,
    { 0, { (1<<MACH_BASE) } }
  },
/* stos $st_src, $optdisp($abase) */
  {
    I960_INSN_STOS_INDIRECT_DISP, "stos-indirect-disp", "stos", 64,
    { 0, { (1<<MACH_BASE) } }
  },
/* stos $st_src, $optdisp[$index*S$scale */
  {
    I960_INSN_STOS_INDEX_DISP, "stos-index-disp", "stos", 64,
    { 0, { (1<<MACH_BASE) } }
  },
/* stos $st_src, $optdisp($abase)[$index*S$scale] */
  {
    I960_INSN_STOS_INDIRECT_INDEX_DISP, "stos-indirect-index-disp", "stos", 64,
    { 0, { (1<<MACH_BASE) } }
  },
/* stl $st_src, $offset */
  {
    I960_INSN_STL_OFFSET, "stl-offset", "stl", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* stl $st_src, $offset($abase) */
  {
    I960_INSN_STL_INDIRECT_OFFSET, "stl-indirect-offset", "stl", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* stl $st_src, ($abase) */
  {
    I960_INSN_STL_INDIRECT, "stl-indirect", "stl", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* stl $st_src, ($abase)[$index*S$scale] */
  {
    I960_INSN_STL_INDIRECT_INDEX, "stl-indirect-index", "stl", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* stl $st_src, $optdisp */
  {
    I960_INSN_STL_DISP, "stl-disp", "stl", 64,
    { 0, { (1<<MACH_BASE) } }
  },
/* stl $st_src, $optdisp($abase) */
  {
    I960_INSN_STL_INDIRECT_DISP, "stl-indirect-disp", "stl", 64,
    { 0, { (1<<MACH_BASE) } }
  },
/* stl $st_src, $optdisp[$index*S$scale */
  {
    I960_INSN_STL_INDEX_DISP, "stl-index-disp", "stl", 64,
    { 0, { (1<<MACH_BASE) } }
  },
/* stl $st_src, $optdisp($abase)[$index*S$scale] */
  {
    I960_INSN_STL_INDIRECT_INDEX_DISP, "stl-indirect-index-disp", "stl", 64,
    { 0, { (1<<MACH_BASE) } }
  },
/* stt $st_src, $offset */
  {
    I960_INSN_STT_OFFSET, "stt-offset", "stt", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* stt $st_src, $offset($abase) */
  {
    I960_INSN_STT_INDIRECT_OFFSET, "stt-indirect-offset", "stt", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* stt $st_src, ($abase) */
  {
    I960_INSN_STT_INDIRECT, "stt-indirect", "stt", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* stt $st_src, ($abase)[$index*S$scale] */
  {
    I960_INSN_STT_INDIRECT_INDEX, "stt-indirect-index", "stt", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* stt $st_src, $optdisp */
  {
    I960_INSN_STT_DISP, "stt-disp", "stt", 64,
    { 0, { (1<<MACH_BASE) } }
  },
/* stt $st_src, $optdisp($abase) */
  {
    I960_INSN_STT_INDIRECT_DISP, "stt-indirect-disp", "stt", 64,
    { 0, { (1<<MACH_BASE) } }
  },
/* stt $st_src, $optdisp[$index*S$scale */
  {
    I960_INSN_STT_INDEX_DISP, "stt-index-disp", "stt", 64,
    { 0, { (1<<MACH_BASE) } }
  },
/* stt $st_src, $optdisp($abase)[$index*S$scale] */
  {
    I960_INSN_STT_INDIRECT_INDEX_DISP, "stt-indirect-index-disp", "stt", 64,
    { 0, { (1<<MACH_BASE) } }
  },
/* stq $st_src, $offset */
  {
    I960_INSN_STQ_OFFSET, "stq-offset", "stq", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* stq $st_src, $offset($abase) */
  {
    I960_INSN_STQ_INDIRECT_OFFSET, "stq-indirect-offset", "stq", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* stq $st_src, ($abase) */
  {
    I960_INSN_STQ_INDIRECT, "stq-indirect", "stq", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* stq $st_src, ($abase)[$index*S$scale] */
  {
    I960_INSN_STQ_INDIRECT_INDEX, "stq-indirect-index", "stq", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* stq $st_src, $optdisp */
  {
    I960_INSN_STQ_DISP, "stq-disp", "stq", 64,
    { 0, { (1<<MACH_BASE) } }
  },
/* stq $st_src, $optdisp($abase) */
  {
    I960_INSN_STQ_INDIRECT_DISP, "stq-indirect-disp", "stq", 64,
    { 0, { (1<<MACH_BASE) } }
  },
/* stq $st_src, $optdisp[$index*S$scale */
  {
    I960_INSN_STQ_INDEX_DISP, "stq-index-disp", "stq", 64,
    { 0, { (1<<MACH_BASE) } }
  },
/* stq $st_src, $optdisp($abase)[$index*S$scale] */
  {
    I960_INSN_STQ_INDIRECT_INDEX_DISP, "stq-indirect-index-disp", "stq", 64,
    { 0, { (1<<MACH_BASE) } }
  },
/* cmpobe $br_src1, $br_src2, $br_disp */
  {
    I960_INSN_CMPOBE_REG, "cmpobe-reg", "cmpobe", 32,
    { 0|A(COND_CTI), { (1<<MACH_BASE) } }
  },
/* cmpobe $br_lit1, $br_src2, $br_disp */
  {
    I960_INSN_CMPOBE_LIT, "cmpobe-lit", "cmpobe", 32,
    { 0|A(COND_CTI), { (1<<MACH_BASE) } }
  },
/* cmpobne $br_src1, $br_src2, $br_disp */
  {
    I960_INSN_CMPOBNE_REG, "cmpobne-reg", "cmpobne", 32,
    { 0|A(COND_CTI), { (1<<MACH_BASE) } }
  },
/* cmpobne $br_lit1, $br_src2, $br_disp */
  {
    I960_INSN_CMPOBNE_LIT, "cmpobne-lit", "cmpobne", 32,
    { 0|A(COND_CTI), { (1<<MACH_BASE) } }
  },
/* cmpobl $br_src1, $br_src2, $br_disp */
  {
    I960_INSN_CMPOBL_REG, "cmpobl-reg", "cmpobl", 32,
    { 0|A(COND_CTI), { (1<<MACH_BASE) } }
  },
/* cmpobl $br_lit1, $br_src2, $br_disp */
  {
    I960_INSN_CMPOBL_LIT, "cmpobl-lit", "cmpobl", 32,
    { 0|A(COND_CTI), { (1<<MACH_BASE) } }
  },
/* cmpoble $br_src1, $br_src2, $br_disp */
  {
    I960_INSN_CMPOBLE_REG, "cmpoble-reg", "cmpoble", 32,
    { 0|A(COND_CTI), { (1<<MACH_BASE) } }
  },
/* cmpoble $br_lit1, $br_src2, $br_disp */
  {
    I960_INSN_CMPOBLE_LIT, "cmpoble-lit", "cmpoble", 32,
    { 0|A(COND_CTI), { (1<<MACH_BASE) } }
  },
/* cmpobg $br_src1, $br_src2, $br_disp */
  {
    I960_INSN_CMPOBG_REG, "cmpobg-reg", "cmpobg", 32,
    { 0|A(COND_CTI), { (1<<MACH_BASE) } }
  },
/* cmpobg $br_lit1, $br_src2, $br_disp */
  {
    I960_INSN_CMPOBG_LIT, "cmpobg-lit", "cmpobg", 32,
    { 0|A(COND_CTI), { (1<<MACH_BASE) } }
  },
/* cmpobge $br_src1, $br_src2, $br_disp */
  {
    I960_INSN_CMPOBGE_REG, "cmpobge-reg", "cmpobge", 32,
    { 0|A(COND_CTI), { (1<<MACH_BASE) } }
  },
/* cmpobge $br_lit1, $br_src2, $br_disp */
  {
    I960_INSN_CMPOBGE_LIT, "cmpobge-lit", "cmpobge", 32,
    { 0|A(COND_CTI), { (1<<MACH_BASE) } }
  },
/* cmpibe $br_src1, $br_src2, $br_disp */
  {
    I960_INSN_CMPIBE_REG, "cmpibe-reg", "cmpibe", 32,
    { 0|A(COND_CTI), { (1<<MACH_BASE) } }
  },
/* cmpibe $br_lit1, $br_src2, $br_disp */
  {
    I960_INSN_CMPIBE_LIT, "cmpibe-lit", "cmpibe", 32,
    { 0|A(COND_CTI), { (1<<MACH_BASE) } }
  },
/* cmpibne $br_src1, $br_src2, $br_disp */
  {
    I960_INSN_CMPIBNE_REG, "cmpibne-reg", "cmpibne", 32,
    { 0|A(COND_CTI), { (1<<MACH_BASE) } }
  },
/* cmpibne $br_lit1, $br_src2, $br_disp */
  {
    I960_INSN_CMPIBNE_LIT, "cmpibne-lit", "cmpibne", 32,
    { 0|A(COND_CTI), { (1<<MACH_BASE) } }
  },
/* cmpibl $br_src1, $br_src2, $br_disp */
  {
    I960_INSN_CMPIBL_REG, "cmpibl-reg", "cmpibl", 32,
    { 0|A(COND_CTI), { (1<<MACH_BASE) } }
  },
/* cmpibl $br_lit1, $br_src2, $br_disp */
  {
    I960_INSN_CMPIBL_LIT, "cmpibl-lit", "cmpibl", 32,
    { 0|A(COND_CTI), { (1<<MACH_BASE) } }
  },
/* cmpible $br_src1, $br_src2, $br_disp */
  {
    I960_INSN_CMPIBLE_REG, "cmpible-reg", "cmpible", 32,
    { 0|A(COND_CTI), { (1<<MACH_BASE) } }
  },
/* cmpible $br_lit1, $br_src2, $br_disp */
  {
    I960_INSN_CMPIBLE_LIT, "cmpible-lit", "cmpible", 32,
    { 0|A(COND_CTI), { (1<<MACH_BASE) } }
  },
/* cmpibg $br_src1, $br_src2, $br_disp */
  {
    I960_INSN_CMPIBG_REG, "cmpibg-reg", "cmpibg", 32,
    { 0|A(COND_CTI), { (1<<MACH_BASE) } }
  },
/* cmpibg $br_lit1, $br_src2, $br_disp */
  {
    I960_INSN_CMPIBG_LIT, "cmpibg-lit", "cmpibg", 32,
    { 0|A(COND_CTI), { (1<<MACH_BASE) } }
  },
/* cmpibge $br_src1, $br_src2, $br_disp */
  {
    I960_INSN_CMPIBGE_REG, "cmpibge-reg", "cmpibge", 32,
    { 0|A(COND_CTI), { (1<<MACH_BASE) } }
  },
/* cmpibge $br_lit1, $br_src2, $br_disp */
  {
    I960_INSN_CMPIBGE_LIT, "cmpibge-lit", "cmpibge", 32,
    { 0|A(COND_CTI), { (1<<MACH_BASE) } }
  },
/* bbc $br_src1, $br_src2, $br_disp */
  {
    I960_INSN_BBC_REG, "bbc-reg", "bbc", 32,
    { 0|A(COND_CTI), { (1<<MACH_BASE) } }
  },
/* bbc $br_lit1, $br_src2, $br_disp */
  {
    I960_INSN_BBC_LIT, "bbc-lit", "bbc", 32,
    { 0|A(COND_CTI), { (1<<MACH_BASE) } }
  },
/* bbs $br_src1, $br_src2, $br_disp */
  {
    I960_INSN_BBS_REG, "bbs-reg", "bbs", 32,
    { 0|A(COND_CTI), { (1<<MACH_BASE) } }
  },
/* bbs $br_lit1, $br_src2, $br_disp */
  {
    I960_INSN_BBS_LIT, "bbs-lit", "bbs", 32,
    { 0|A(COND_CTI), { (1<<MACH_BASE) } }
  },
/* cmpi $src1, $src2 */
  {
    I960_INSN_CMPI, "cmpi", "cmpi", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* cmpi $lit1, $src2 */
  {
    I960_INSN_CMPI1, "cmpi1", "cmpi", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* cmpi $src1, $lit2 */
  {
    I960_INSN_CMPI2, "cmpi2", "cmpi", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* cmpi $lit1, $lit2 */
  {
    I960_INSN_CMPI3, "cmpi3", "cmpi", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* cmpo $src1, $src2 */
  {
    I960_INSN_CMPO, "cmpo", "cmpo", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* cmpo $lit1, $src2 */
  {
    I960_INSN_CMPO1, "cmpo1", "cmpo", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* cmpo $src1, $lit2 */
  {
    I960_INSN_CMPO2, "cmpo2", "cmpo", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* cmpo $lit1, $lit2 */
  {
    I960_INSN_CMPO3, "cmpo3", "cmpo", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* testno $br_src1 */
  {
    I960_INSN_TESTNO_REG, "testno-reg", "testno", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* testg $br_src1 */
  {
    I960_INSN_TESTG_REG, "testg-reg", "testg", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* teste $br_src1 */
  {
    I960_INSN_TESTE_REG, "teste-reg", "teste", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* testge $br_src1 */
  {
    I960_INSN_TESTGE_REG, "testge-reg", "testge", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* testl $br_src1 */
  {
    I960_INSN_TESTL_REG, "testl-reg", "testl", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* testne $br_src1 */
  {
    I960_INSN_TESTNE_REG, "testne-reg", "testne", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* testle $br_src1 */
  {
    I960_INSN_TESTLE_REG, "testle-reg", "testle", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* testo $br_src1 */
  {
    I960_INSN_TESTO_REG, "testo-reg", "testo", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* bno $ctrl_disp */
  {
    I960_INSN_BNO, "bno", "bno", 32,
    { 0|A(COND_CTI), { (1<<MACH_BASE) } }
  },
/* bg $ctrl_disp */
  {
    I960_INSN_BG, "bg", "bg", 32,
    { 0|A(COND_CTI), { (1<<MACH_BASE) } }
  },
/* be $ctrl_disp */
  {
    I960_INSN_BE, "be", "be", 32,
    { 0|A(COND_CTI), { (1<<MACH_BASE) } }
  },
/* bge $ctrl_disp */
  {
    I960_INSN_BGE, "bge", "bge", 32,
    { 0|A(COND_CTI), { (1<<MACH_BASE) } }
  },
/* bl $ctrl_disp */
  {
    I960_INSN_BL, "bl", "bl", 32,
    { 0|A(COND_CTI), { (1<<MACH_BASE) } }
  },
/* bne $ctrl_disp */
  {
    I960_INSN_BNE, "bne", "bne", 32,
    { 0|A(COND_CTI), { (1<<MACH_BASE) } }
  },
/* ble $ctrl_disp */
  {
    I960_INSN_BLE, "ble", "ble", 32,
    { 0|A(COND_CTI), { (1<<MACH_BASE) } }
  },
/* bo $ctrl_disp */
  {
    I960_INSN_BO, "bo", "bo", 32,
    { 0|A(COND_CTI), { (1<<MACH_BASE) } }
  },
/* b $ctrl_disp */
  {
    I960_INSN_B, "b", "b", 32,
    { 0|A(UNCOND_CTI), { (1<<MACH_BASE) } }
  },
/* bx $offset($abase) */
  {
    I960_INSN_BX_INDIRECT_OFFSET, "bx-indirect-offset", "bx", 32,
    { 0|A(UNCOND_CTI), { (1<<MACH_BASE) } }
  },
/* bx ($abase) */
  {
    I960_INSN_BX_INDIRECT, "bx-indirect", "bx", 32,
    { 0|A(UNCOND_CTI), { (1<<MACH_BASE) } }
  },
/* bx ($abase)[$index*S$scale] */
  {
    I960_INSN_BX_INDIRECT_INDEX, "bx-indirect-index", "bx", 32,
    { 0|A(UNCOND_CTI), { (1<<MACH_BASE) } }
  },
/* bx $optdisp */
  {
    I960_INSN_BX_DISP, "bx-disp", "bx", 64,
    { 0|A(UNCOND_CTI), { (1<<MACH_BASE) } }
  },
/* bx $optdisp($abase) */
  {
    I960_INSN_BX_INDIRECT_DISP, "bx-indirect-disp", "bx", 64,
    { 0|A(UNCOND_CTI), { (1<<MACH_BASE) } }
  },
/* callx $optdisp */
  {
    I960_INSN_CALLX_DISP, "callx-disp", "callx", 64,
    { 0|A(UNCOND_CTI), { (1<<MACH_BASE) } }
  },
/* callx ($abase) */
  {
    I960_INSN_CALLX_INDIRECT, "callx-indirect", "callx", 32,
    { 0|A(UNCOND_CTI), { (1<<MACH_BASE) } }
  },
/* callx $offset($abase) */
  {
    I960_INSN_CALLX_INDIRECT_OFFSET, "callx-indirect-offset", "callx", 32,
    { 0|A(UNCOND_CTI), { (1<<MACH_BASE) } }
  },
/* ret */
  {
    I960_INSN_RET, "ret", "ret", 32,
    { 0|A(UNCOND_CTI), { (1<<MACH_BASE) } }
  },
/* calls $src1 */
  {
    I960_INSN_CALLS, "calls", "calls", 32,
    { 0|A(UNCOND_CTI), { (1<<MACH_BASE) } }
  },
/* fmark */
  {
    I960_INSN_FMARK, "fmark", "fmark", 32,
    { 0|A(UNCOND_CTI), { (1<<MACH_BASE) } }
  },
/* flushreg */
  {
    I960_INSN_FLUSHREG, "flushreg", "flushreg", 32,
    { 0, { (1<<MACH_BASE) } }
  },
};

#undef A
#undef MNEM
#undef OP

/* Initialize anything needed to be done once, before any cpu_open call.  */

static void
init_tables ()
{
}

/* Subroutine of i960_cgen_cpu_open to look up a mach via its bfd name.  */

static const CGEN_MACH *
lookup_mach_via_bfd_name (table, name)
     const CGEN_MACH *table;
     const char *name;
{
  while (table->name)
    {
      if (strcmp (name, table->bfd_name) == 0)
	return table;
      ++table;
    }
  abort ();
}

/* Subroutine of i960_cgen_cpu_open to build the hardware table.  */

static void
build_hw_table (cd)
     CGEN_CPU_TABLE *cd;
{
  int i;
  int machs = cd->machs;
  const CGEN_HW_ENTRY *init = & i960_cgen_hw_table[0];
  /* MAX_HW is only an upper bound on the number of selected entries.
     However each entry is indexed by it's enum so there can be holes in
     the table.  */
  const CGEN_HW_ENTRY **selected =
    (const CGEN_HW_ENTRY **) xmalloc (MAX_HW * sizeof (CGEN_HW_ENTRY *));

  cd->hw_table.init_entries = init;
  cd->hw_table.entry_size = sizeof (CGEN_HW_ENTRY);
  memset (selected, 0, MAX_HW * sizeof (CGEN_HW_ENTRY *));
  /* ??? For now we just use machs to determine which ones we want.  */
  for (i = 0; init[i].name != NULL; ++i)
    if (CGEN_HW_ATTR_VALUE (&init[i], CGEN_HW_MACH)
	& machs)
      selected[init[i].type] = &init[i];
  cd->hw_table.entries = selected;
  cd->hw_table.num_entries = MAX_HW;
}

/* Subroutine of i960_cgen_cpu_open to build the hardware table.  */

static void
build_ifield_table (cd)
     CGEN_CPU_TABLE *cd;
{
  cd->ifld_table = & i960_cgen_ifld_table[0];
}

/* Subroutine of i960_cgen_cpu_open to build the hardware table.  */

static void
build_operand_table (cd)
     CGEN_CPU_TABLE *cd;
{
  int i;
  int machs = cd->machs;
  const CGEN_OPERAND *init = & i960_cgen_operand_table[0];
  /* MAX_OPERANDS is only an upper bound on the number of selected entries.
     However each entry is indexed by it's enum so there can be holes in
     the table.  */
  const CGEN_OPERAND **selected =
    (const CGEN_OPERAND **) xmalloc (MAX_OPERANDS * sizeof (CGEN_OPERAND *));

  cd->operand_table.init_entries = init;
  cd->operand_table.entry_size = sizeof (CGEN_OPERAND);
  memset (selected, 0, MAX_OPERANDS * sizeof (CGEN_OPERAND *));
  /* ??? For now we just use mach to determine which ones we want.  */
  for (i = 0; init[i].name != NULL; ++i)
    if (CGEN_OPERAND_ATTR_VALUE (&init[i], CGEN_OPERAND_MACH)
	& machs)
      selected[init[i].type] = &init[i];
  cd->operand_table.entries = selected;
  cd->operand_table.num_entries = MAX_OPERANDS;
}

/* Subroutine of i960_cgen_cpu_open to build the hardware table.
   ??? This could leave out insns not supported by the specified mach/isa,
   but that would cause errors like "foo only supported by bar" to become
   "unknown insn", so for now we include all insns and require the app to
   do the checking later.
   ??? On the other hand, parsing of such insns may require their hardware or
   operand elements to be in the table [which they mightn't be].  */

static void
build_insn_table (cd)
     CGEN_CPU_TABLE *cd;
{
  int i;
  const CGEN_IBASE *ib = & i960_cgen_insn_table[0];
  CGEN_INSN *insns = (CGEN_INSN *) xmalloc (MAX_INSNS * sizeof (CGEN_INSN));

  memset (insns, 0, MAX_INSNS * sizeof (CGEN_INSN));
  for (i = 0; i < MAX_INSNS; ++i)
    insns[i].base = &ib[i];
  cd->insn_table.init_entries = insns;
  cd->insn_table.entry_size = sizeof (CGEN_IBASE);
  cd->insn_table.num_init_entries = MAX_INSNS;
}

/* Subroutine of i960_cgen_cpu_open to rebuild the tables.  */

static void
i960_cgen_rebuild_tables (cd)
     CGEN_CPU_TABLE *cd;
{
  int i,n_isas,n_machs;
  unsigned int isas = cd->isas;
  unsigned int machs = cd->machs;

  cd->int_insn_p = CGEN_INT_INSN_P;

  /* Data derived from the isa spec.  */
#define UNSET (CGEN_SIZE_UNKNOWN + 1)
  cd->default_insn_bitsize = UNSET;
  cd->base_insn_bitsize = UNSET;
  cd->min_insn_bitsize = 65535; /* some ridiculously big number */
  cd->max_insn_bitsize = 0;
  for (i = 0; i < MAX_ISAS; ++i)
    if (((1 << i) & isas) != 0)
      {
	const CGEN_ISA *isa = & i960_cgen_isa_table[i];

	/* Default insn sizes of all selected isas must be equal or we set
	   the result to 0, meaning "unknown".  */
	if (cd->default_insn_bitsize == UNSET)
	  cd->default_insn_bitsize = isa->default_insn_bitsize;
	else if (isa->default_insn_bitsize == cd->default_insn_bitsize)
	  ; /* this is ok */
	else
	  cd->default_insn_bitsize = CGEN_SIZE_UNKNOWN;

	/* Base insn sizes of all selected isas must be equal or we set
	   the result to 0, meaning "unknown".  */
	if (cd->base_insn_bitsize == UNSET)
	  cd->base_insn_bitsize = isa->base_insn_bitsize;
	else if (isa->base_insn_bitsize == cd->base_insn_bitsize)
	  ; /* this is ok */
	else
	  cd->base_insn_bitsize = CGEN_SIZE_UNKNOWN;

	/* Set min,max insn sizes.  */
	if (isa->min_insn_bitsize < cd->min_insn_bitsize)
	  cd->min_insn_bitsize = isa->min_insn_bitsize;
	if (isa->max_insn_bitsize > cd->max_insn_bitsize)
	  cd->max_insn_bitsize = isa->max_insn_bitsize;

	++n_isas;
      }

  /* Data derived from the mach spec.  */
  for (i = 0; i < MAX_MACHS; ++i)
    if (((1 << i) & machs) != 0)
      {
	const CGEN_MACH *mach = & i960_cgen_mach_table[i];

	++n_machs;
      }

  /* Determine which hw elements are used by MACH.  */
  build_hw_table (cd);

  /* Build the ifield table.  */
  build_ifield_table (cd);

  /* Determine which operands are used by MACH/ISA.  */
  build_operand_table (cd);

  /* Build the instruction table.  */
  build_insn_table (cd);
}

/* Initialize a cpu table and return a descriptor.
   It's much like opening a file, and must be the first function called.
   The arguments are a set of (type/value) pairs, terminated with
   CGEN_CPU_OPEN_END.

   Currently supported values:
   CGEN_CPU_OPEN_ISAS:    bitmap of values in enum isa_attr
   CGEN_CPU_OPEN_MACHS:   bitmap of values in enum mach_attr
   CGEN_CPU_OPEN_BFDMACH: specify 1 mach using bfd name
   CGEN_CPU_OPEN_ENDIAN:  specify endian choice
   CGEN_CPU_OPEN_END:     terminates arguments

   ??? Simultaneous multiple isas might not make sense, but it's not (yet)
   precluded.

   ??? We only support ISO C stdargs here, not K&R.
   Laziness, plus experiment to see if anything requires K&R - eventually
   K&R will no longer be supported - e.g. GDB is currently trying this.  */

CGEN_CPU_DESC
i960_cgen_cpu_open (enum cgen_cpu_open_arg arg_type, ...)
{
  CGEN_CPU_TABLE *cd = (CGEN_CPU_TABLE *) xmalloc (sizeof (CGEN_CPU_TABLE));
  static int init_p;
  unsigned int isas = 0;  /* 0 = "unspecified" */
  unsigned int machs = 0; /* 0 = "unspecified" */
  enum cgen_endian endian = CGEN_ENDIAN_UNKNOWN;
  va_list ap;

  if (! init_p)
    {
      init_tables ();
      init_p = 1;
    }

  memset (cd, 0, sizeof (*cd));

  va_start (ap, arg_type);
  while (arg_type != CGEN_CPU_OPEN_END)
    {
      switch (arg_type)
	{
	case CGEN_CPU_OPEN_ISAS :
	  isas = va_arg (ap, unsigned int);
	  break;
	case CGEN_CPU_OPEN_MACHS :
	  machs = va_arg (ap, unsigned int);
	  break;
	case CGEN_CPU_OPEN_BFDMACH :
	  {
	    const char *name = va_arg (ap, const char *);
	    const CGEN_MACH *mach =
	      lookup_mach_via_bfd_name (i960_cgen_mach_table, name);

	    machs |= mach->num << 1;
	    break;
	  }
	case CGEN_CPU_OPEN_ENDIAN :
	  endian = va_arg (ap, enum cgen_endian);
	  break;
	default :
	  fprintf (stderr, "i960_cgen_cpu_open: unsupported argument `%d'\n",
		   arg_type);
	  abort (); /* ??? return NULL? */
	}
      arg_type = va_arg (ap, enum cgen_cpu_open_arg);
    }
  va_end (ap);

  /* mach unspecified means "all" */
  if (machs == 0)
    machs = (1 << MAX_MACHS) - 1;
  /* base mach is always selected */
  machs |= 1;
  /* isa unspecified means "all" */
  if (isas == 0)
    isas = (1 << MAX_ISAS) - 1;
  if (endian == CGEN_ENDIAN_UNKNOWN)
    {
      /* ??? If target has only one, could have a default.  */
      fprintf (stderr, "i960_cgen_cpu_open: no endianness specified\n");
      abort ();
    }

  cd->isas = isas;
  cd->machs = machs;
  cd->endian = endian;
  /* FIXME: for the sparc case we can determine insn-endianness statically.
     The worry here is where both data and insn endian can be independently
     chosen, in which case this function will need another argument.
     Actually, will want to allow for more arguments in the future anyway.  */
  cd->insn_endian = endian;

  /* Table (re)builder.  */
  cd->rebuild_tables = i960_cgen_rebuild_tables;
  i960_cgen_rebuild_tables (cd);

  return (CGEN_CPU_DESC) cd;
}

/* Cover fn to i960_cgen_cpu_open to handle the simple case of 1 isa, 1 mach.
   MACH_NAME is the bfd name of the mach.  */

CGEN_CPU_DESC
i960_cgen_cpu_open_1 (mach_name, endian)
     const char *mach_name;
     enum cgen_endian endian;
{
  return i960_cgen_cpu_open (CGEN_CPU_OPEN_BFDMACH, mach_name,
			       CGEN_CPU_OPEN_ENDIAN, endian,
			       CGEN_CPU_OPEN_END);
}

/* Close a cpu table.
   ??? This can live in a machine independent file, but there's currently
   no place to put this file (there's no libcgen).  libopcodes is the wrong
   place as some simulator ports use this but they don't use libopcodes.  */

void
i960_cgen_cpu_close (cd)
     CGEN_CPU_DESC cd;
{
  if (cd->insn_table.init_entries)
    free ((CGEN_INSN *) cd->insn_table.init_entries);
  if (cd->hw_table.entries)
    free ((CGEN_HW_ENTRY *) cd->hw_table.entries);
  free (cd);
}

@


1.2
log
@* i960-desc.c: Update all the A macro definitions to the new
stdc-sensitive versions that cgen would have used.
@
text
@@


1.1
log
@Initial revision
@
text
@d5 1
a5 1
Copyright (C) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.
d28 1
d54 7
a64 1
  { "UNSIGNED", &bool_attr[0], &bool_attr[0] },
d69 1
a76 2
  { "UNSIGNED", &bool_attr[0], &bool_attr[0] },
  { "SIGNED", &bool_attr[0], &bool_attr[0] },
a77 1
  { "FUN-ACCESS", &bool_attr[0], &bool_attr[0] },
a86 1
  { "UNSIGNED", &bool_attr[0], &bool_attr[0] },
d90 1
d113 16
a128 1
CGEN_KEYWORD_ENTRY i960_cgen_opval_h_gr_entries[] = 
d166 1
a166 1
CGEN_KEYWORD i960_cgen_opval_h_gr = 
d172 1
a172 1
CGEN_KEYWORD_ENTRY i960_cgen_opval_h_cc_entries[] = 
d177 1
a177 1
CGEN_KEYWORD i960_cgen_opval_h_cc = 
d187 5
a191 2
#define A(a) (1 << (CONCAT2 (CGEN_HW_,a) - CGEN_ATTR_BOOL_OFFSET))
#define HW_ENT(n) i960_cgen_hw_table[n]
d195 8
a202 8
  { HW_H_PC, & HW_ENT (HW_H_PC + 1), "h-pc", CGEN_ASM_KEYWORD, (PTR) 0, { CGEN_HW_NBOOL_ATTRS, 0|A(PROFILE)|A(PC), { (1<<MACH_BASE) } } },
  { HW_H_MEMORY, & HW_ENT (HW_H_MEMORY + 1), "h-memory", CGEN_ASM_KEYWORD, (PTR) 0, { CGEN_HW_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } } },
  { HW_H_SINT, & HW_ENT (HW_H_SINT + 1), "h-sint", CGEN_ASM_KEYWORD, (PTR) 0, { CGEN_HW_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } } },
  { HW_H_UINT, & HW_ENT (HW_H_UINT + 1), "h-uint", CGEN_ASM_KEYWORD, (PTR) 0, { CGEN_HW_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } } },
  { HW_H_ADDR, & HW_ENT (HW_H_ADDR + 1), "h-addr", CGEN_ASM_KEYWORD, (PTR) 0, { CGEN_HW_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } } },
  { HW_H_IADDR, & HW_ENT (HW_H_IADDR + 1), "h-iaddr", CGEN_ASM_KEYWORD, (PTR) 0, { CGEN_HW_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } } },
  { HW_H_GR, & HW_ENT (HW_H_GR + 1), "h-gr", CGEN_ASM_KEYWORD, (PTR) & i960_cgen_opval_h_gr, { CGEN_HW_NBOOL_ATTRS, 0|A(CACHE_ADDR)|A(PROFILE), { (1<<MACH_BASE) } } },
  { HW_H_CC, & HW_ENT (HW_H_CC + 1), "h-cc", CGEN_ASM_KEYWORD, (PTR) & i960_cgen_opval_h_cc, { CGEN_HW_NBOOL_ATTRS, 0|A(CACHE_ADDR)|A(PROFILE), { (1<<MACH_BASE) } } },
a205 1
/* don't undef HW_ENT, used later */
d210 5
a214 1
#define A(a) (1 << (CONCAT2 (CGEN_IFLD_,a) - CGEN_ATTR_BOOL_OFFSET))
d218 26
a243 26
  { I960_F_NIL, "f-nil", 0, 0, 0, 0, { CGEN_IFLD_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }  },
  { I960_F_OPCODE, "f-opcode", 0, 32, 0, 8, { CGEN_IFLD_NBOOL_ATTRS, 0|A(UNSIGNED), { (1<<MACH_BASE) } }  },
  { I960_F_SRCDST, "f-srcdst", 0, 32, 8, 5, { CGEN_IFLD_NBOOL_ATTRS, 0|A(UNSIGNED), { (1<<MACH_BASE) } }  },
  { I960_F_SRC2, "f-src2", 0, 32, 13, 5, { CGEN_IFLD_NBOOL_ATTRS, 0|A(UNSIGNED), { (1<<MACH_BASE) } }  },
  { I960_F_M3, "f-m3", 0, 32, 18, 1, { CGEN_IFLD_NBOOL_ATTRS, 0|A(UNSIGNED), { (1<<MACH_BASE) } }  },
  { I960_F_M2, "f-m2", 0, 32, 19, 1, { CGEN_IFLD_NBOOL_ATTRS, 0|A(UNSIGNED), { (1<<MACH_BASE) } }  },
  { I960_F_M1, "f-m1", 0, 32, 20, 1, { CGEN_IFLD_NBOOL_ATTRS, 0|A(UNSIGNED), { (1<<MACH_BASE) } }  },
  { I960_F_OPCODE2, "f-opcode2", 0, 32, 21, 4, { CGEN_IFLD_NBOOL_ATTRS, 0|A(UNSIGNED), { (1<<MACH_BASE) } }  },
  { I960_F_ZERO, "f-zero", 0, 32, 25, 2, { CGEN_IFLD_NBOOL_ATTRS, 0|A(UNSIGNED), { (1<<MACH_BASE) } }  },
  { I960_F_SRC1, "f-src1", 0, 32, 27, 5, { CGEN_IFLD_NBOOL_ATTRS, 0|A(UNSIGNED), { (1<<MACH_BASE) } }  },
  { I960_F_ABASE, "f-abase", 0, 32, 13, 5, { CGEN_IFLD_NBOOL_ATTRS, 0|A(UNSIGNED), { (1<<MACH_BASE) } }  },
  { I960_F_MODEA, "f-modea", 0, 32, 18, 1, { CGEN_IFLD_NBOOL_ATTRS, 0|A(UNSIGNED), { (1<<MACH_BASE) } }  },
  { I960_F_ZEROA, "f-zeroa", 0, 32, 19, 1, { CGEN_IFLD_NBOOL_ATTRS, 0|A(UNSIGNED), { (1<<MACH_BASE) } }  },
  { I960_F_OFFSET, "f-offset", 0, 32, 20, 12, { CGEN_IFLD_NBOOL_ATTRS, 0|A(UNSIGNED), { (1<<MACH_BASE) } }  },
  { I960_F_MODEB, "f-modeb", 0, 32, 18, 4, { CGEN_IFLD_NBOOL_ATTRS, 0|A(UNSIGNED), { (1<<MACH_BASE) } }  },
  { I960_F_SCALE, "f-scale", 0, 32, 22, 3, { CGEN_IFLD_NBOOL_ATTRS, 0|A(UNSIGNED), { (1<<MACH_BASE) } }  },
  { I960_F_ZEROB, "f-zerob", 0, 32, 25, 2, { CGEN_IFLD_NBOOL_ATTRS, 0|A(UNSIGNED), { (1<<MACH_BASE) } }  },
  { I960_F_INDEX, "f-index", 0, 32, 27, 5, { CGEN_IFLD_NBOOL_ATTRS, 0|A(UNSIGNED), { (1<<MACH_BASE) } }  },
  { I960_F_OPTDISP, "f-optdisp", 32, 32, 0, 32, { CGEN_IFLD_NBOOL_ATTRS, 0|A(UNSIGNED), { (1<<MACH_BASE) } }  },
  { I960_F_BR_SRC1, "f-br-src1", 0, 32, 8, 5, { CGEN_IFLD_NBOOL_ATTRS, 0|A(UNSIGNED), { (1<<MACH_BASE) } }  },
  { I960_F_BR_SRC2, "f-br-src2", 0, 32, 13, 5, { CGEN_IFLD_NBOOL_ATTRS, 0|A(UNSIGNED), { (1<<MACH_BASE) } }  },
  { I960_F_BR_M1, "f-br-m1", 0, 32, 18, 1, { CGEN_IFLD_NBOOL_ATTRS, 0|A(UNSIGNED), { (1<<MACH_BASE) } }  },
  { I960_F_BR_DISP, "f-br-disp", 0, 32, 19, 11, { CGEN_IFLD_NBOOL_ATTRS, 0|A(PCREL_ADDR), { (1<<MACH_BASE) } }  },
  { I960_F_BR_ZERO, "f-br-zero", 0, 32, 30, 2, { CGEN_IFLD_NBOOL_ATTRS, 0|A(UNSIGNED), { (1<<MACH_BASE) } }  },
  { I960_F_CTRL_DISP, "f-ctrl-disp", 0, 32, 8, 22, { CGEN_IFLD_NBOOL_ATTRS, 0|A(PCREL_ADDR), { (1<<MACH_BASE) } }  },
  { I960_F_CTRL_ZERO, "f-ctrl-zero", 0, 32, 30, 2, { CGEN_IFLD_NBOOL_ATTRS, 0|A(UNSIGNED), { (1<<MACH_BASE) } }  },
d251 10
a260 2
#define A(a) (1 << (CONCAT2 (CGEN_OPERAND_,a) - CGEN_ATTR_BOOL_OFFSET))
#define OPERAND(op) CONCAT2 (I960_OPERAND_,op)
d262 1
a262 1
const CGEN_OPERAND i960_cgen_operand_table[MAX_OPERANDS] =
d265 2
a266 2
  { "pc", & HW_ENT (HW_H_PC), 0, 0,
    { CGEN_OPERAND_NBOOL_ATTRS, 0|A(SEM_ONLY), { (1<<MACH_BASE) } }  },
d268 2
a269 2
  { "src1", & HW_ENT (HW_H_GR), 27, 5,
    { CGEN_OPERAND_NBOOL_ATTRS, 0|A(UNSIGNED), { (1<<MACH_BASE) } }  },
d271 2
a272 2
  { "src2", & HW_ENT (HW_H_GR), 13, 5,
    { CGEN_OPERAND_NBOOL_ATTRS, 0|A(UNSIGNED), { (1<<MACH_BASE) } }  },
d274 2
a275 2
  { "dst", & HW_ENT (HW_H_GR), 8, 5,
    { CGEN_OPERAND_NBOOL_ATTRS, 0|A(UNSIGNED), { (1<<MACH_BASE) } }  },
d277 2
a278 2
  { "lit1", & HW_ENT (HW_H_UINT), 27, 5,
    { CGEN_OPERAND_NBOOL_ATTRS, 0|A(UNSIGNED), { (1<<MACH_BASE) } }  },
d280 2
a281 2
  { "lit2", & HW_ENT (HW_H_UINT), 13, 5,
    { CGEN_OPERAND_NBOOL_ATTRS, 0|A(UNSIGNED), { (1<<MACH_BASE) } }  },
d283 2
a284 2
  { "st_src", & HW_ENT (HW_H_GR), 8, 5,
    { CGEN_OPERAND_NBOOL_ATTRS, 0|A(UNSIGNED), { (1<<MACH_BASE) } }  },
d286 2
a287 2
  { "abase", & HW_ENT (HW_H_GR), 13, 5,
    { CGEN_OPERAND_NBOOL_ATTRS, 0|A(UNSIGNED), { (1<<MACH_BASE) } }  },
d289 2
a290 2
  { "offset", & HW_ENT (HW_H_UINT), 20, 12,
    { CGEN_OPERAND_NBOOL_ATTRS, 0|A(UNSIGNED), { (1<<MACH_BASE) } }  },
d292 2
a293 2
  { "scale", & HW_ENT (HW_H_UINT), 22, 3,
    { CGEN_OPERAND_NBOOL_ATTRS, 0|A(UNSIGNED), { (1<<MACH_BASE) } }  },
d295 2
a296 2
  { "index", & HW_ENT (HW_H_GR), 27, 5,
    { CGEN_OPERAND_NBOOL_ATTRS, 0|A(UNSIGNED), { (1<<MACH_BASE) } }  },
d298 2
a299 2
  { "optdisp", & HW_ENT (HW_H_UINT), 0, 32,
    { CGEN_OPERAND_NBOOL_ATTRS, 0|A(UNSIGNED), { (1<<MACH_BASE) } }  },
d301 2
a302 2
  { "br_src1", & HW_ENT (HW_H_GR), 8, 5,
    { CGEN_OPERAND_NBOOL_ATTRS, 0|A(UNSIGNED), { (1<<MACH_BASE) } }  },
d304 2
a305 2
  { "br_src2", & HW_ENT (HW_H_GR), 13, 5,
    { CGEN_OPERAND_NBOOL_ATTRS, 0|A(UNSIGNED), { (1<<MACH_BASE) } }  },
d307 2
a308 2
  { "br_disp", & HW_ENT (HW_H_IADDR), 19, 11,
    { CGEN_OPERAND_NBOOL_ATTRS, 0|A(PCREL_ADDR), { (1<<MACH_BASE) } }  },
d310 2
a311 2
  { "br_lit1", & HW_ENT (HW_H_UINT), 8, 5,
    { CGEN_OPERAND_NBOOL_ATTRS, 0|A(UNSIGNED), { (1<<MACH_BASE) } }  },
d313 3
a315 2
  { "ctrl_disp", & HW_ENT (HW_H_IADDR), 8, 22,
    { CGEN_OPERAND_NBOOL_ATTRS, 0|A(PCREL_ADDR), { (1<<MACH_BASE) } }  },
a319 1
#define A(a) (1 << (CONCAT2 (CGEN_INSN_,a) - CGEN_ATTR_BOOL_OFFSET))
d321 5
d338 1
a338 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d343 1
a343 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d348 1
a348 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d353 1
a353 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d358 1
a358 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d363 1
a363 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d368 1
a368 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d373 1
a373 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d378 1
a378 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d383 1
a383 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d388 1
a388 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d393 1
a393 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d398 1
a398 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d403 1
a403 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d408 1
a408 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d413 1
a413 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d418 1
a418 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d423 1
a423 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d428 1
a428 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d433 1
a433 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d438 1
a438 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d443 1
a443 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d448 1
a448 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d453 1
a453 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d458 1
a458 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d463 1
a463 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d468 1
a468 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d473 1
a473 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d478 1
a478 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d483 1
a483 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d488 1
a488 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d493 1
a493 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d498 1
a498 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d503 1
a503 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d508 1
a508 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d513 1
a513 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d518 1
a518 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d523 1
a523 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d528 1
a528 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d533 1
a533 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d538 1
a538 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d543 1
a543 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d548 1
a548 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d553 1
a553 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d558 1
a558 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d563 1
a563 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d568 1
a568 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d573 1
a573 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d578 1
a578 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d583 1
a583 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d588 1
a588 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d593 1
a593 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d598 1
a598 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d603 1
a603 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d608 1
a608 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d613 1
a613 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d618 1
a618 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d623 1
a623 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d628 1
a628 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d633 21
a653 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d658 1
a658 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d663 1
a663 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d668 1
a668 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d673 21
a693 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d698 1
a698 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d703 1
a703 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d708 1
a708 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d713 1
a713 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d718 1
a718 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d723 1
a723 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d728 1
a728 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d733 1
a733 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d738 1
a738 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d743 1
a743 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d748 1
a748 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d753 1
a753 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d758 1
a758 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d763 1
a763 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d768 1
a768 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d773 1
a773 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d778 1
a778 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d783 1
a783 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d788 1
a788 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d793 1
a793 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d798 1
a798 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d803 1
a803 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d808 1
a808 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d813 1
a813 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d818 1
a818 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d823 1
a823 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d828 1
a828 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d833 1
a833 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d838 1
a838 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d843 1
a843 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d848 1
a848 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d853 1
a853 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d858 1
a858 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d863 1
a863 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d868 1
a868 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d873 1
a873 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d878 1
a878 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d883 1
a883 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d888 1
a888 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d893 1
a893 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d898 1
a898 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d903 1
a903 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d908 1
a908 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d913 1
a913 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d918 1
a918 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d923 1
a923 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d928 1
a928 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d933 1
a933 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d938 1
a938 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d943 1
a943 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d948 1
a948 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d953 1
a953 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d958 1
a958 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d963 1
a963 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d968 1
a968 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d973 1
a973 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d978 1
a978 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d983 1
a983 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d988 1
a988 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d993 1
a993 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d998 1
a998 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1003 1
a1003 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1008 1
a1008 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1013 1
a1013 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1018 1
a1018 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1023 1
a1023 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1028 1
a1028 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1033 1
a1033 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1038 1
a1038 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1043 1
a1043 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1048 1
a1048 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1053 1
a1053 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1058 1
a1058 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1063 1
a1063 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1068 1
a1068 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1073 1
a1073 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1078 1
a1078 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1083 1
a1083 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1088 1
a1088 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1093 1
a1093 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1098 1
a1098 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1103 1
a1103 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1108 1
a1108 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1113 1
a1113 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1118 1
a1118 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1123 1
a1123 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1128 1
a1128 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1133 1
a1133 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1138 1
a1138 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1143 1
a1143 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1148 1
a1148 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1153 1
a1153 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1158 1
a1158 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1163 1
a1163 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1168 1
a1168 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1173 1
a1173 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1178 1
a1178 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1183 1
a1183 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1188 1
a1188 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1193 1
a1193 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1198 1
a1198 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1203 1
a1203 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1208 1
a1208 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1213 1
a1213 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1218 1
a1218 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1223 1
a1223 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1228 1
a1228 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1233 1
a1233 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1238 1
a1238 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1243 1
a1243 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1248 1
a1248 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1253 1
a1253 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1258 1
a1258 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1263 1
a1263 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1268 1
a1268 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1273 1
a1273 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1278 1
a1278 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1283 1
a1283 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1288 1
a1288 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1293 1
a1293 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1298 1
a1298 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1303 1
a1303 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1308 1
a1308 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1313 1
a1313 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1318 1
a1318 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1323 1
a1323 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1328 1
a1328 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1333 1
a1333 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1338 1
a1338 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1343 1
a1343 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1348 1
a1348 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1353 1
a1353 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1358 1
a1358 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1363 1
a1363 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1368 1
a1368 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1373 1
a1373 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1378 1
a1378 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1383 1
a1383 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1388 1
a1388 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1393 1
a1393 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1398 1
a1398 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1403 1
a1403 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1408 1
a1408 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1413 1
a1413 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1418 1
a1418 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1423 1
a1423 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1428 1
a1428 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1433 1
a1433 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1438 1
a1438 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1443 1
a1443 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1448 1
a1448 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1453 1
a1453 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1458 1
a1458 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1463 1
a1463 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1468 1
a1468 1
    { CGEN_INSN_NBOOL_ATTRS, 0|A(COND_CTI), { (1<<MACH_BASE) } }
d1473 1
a1473 1
    { CGEN_INSN_NBOOL_ATTRS, 0|A(COND_CTI), { (1<<MACH_BASE) } }
d1478 1
a1478 1
    { CGEN_INSN_NBOOL_ATTRS, 0|A(COND_CTI), { (1<<MACH_BASE) } }
d1483 1
a1483 1
    { CGEN_INSN_NBOOL_ATTRS, 0|A(COND_CTI), { (1<<MACH_BASE) } }
d1488 1
a1488 1
    { CGEN_INSN_NBOOL_ATTRS, 0|A(COND_CTI), { (1<<MACH_BASE) } }
d1493 1
a1493 1
    { CGEN_INSN_NBOOL_ATTRS, 0|A(COND_CTI), { (1<<MACH_BASE) } }
d1498 1
a1498 1
    { CGEN_INSN_NBOOL_ATTRS, 0|A(COND_CTI), { (1<<MACH_BASE) } }
d1503 1
a1503 1
    { CGEN_INSN_NBOOL_ATTRS, 0|A(COND_CTI), { (1<<MACH_BASE) } }
d1508 1
a1508 1
    { CGEN_INSN_NBOOL_ATTRS, 0|A(COND_CTI), { (1<<MACH_BASE) } }
d1513 1
a1513 1
    { CGEN_INSN_NBOOL_ATTRS, 0|A(COND_CTI), { (1<<MACH_BASE) } }
d1518 1
a1518 1
    { CGEN_INSN_NBOOL_ATTRS, 0|A(COND_CTI), { (1<<MACH_BASE) } }
d1523 1
a1523 1
    { CGEN_INSN_NBOOL_ATTRS, 0|A(COND_CTI), { (1<<MACH_BASE) } }
d1528 1
a1528 1
    { CGEN_INSN_NBOOL_ATTRS, 0|A(COND_CTI), { (1<<MACH_BASE) } }
d1533 1
a1533 1
    { CGEN_INSN_NBOOL_ATTRS, 0|A(COND_CTI), { (1<<MACH_BASE) } }
d1538 1
a1538 1
    { CGEN_INSN_NBOOL_ATTRS, 0|A(COND_CTI), { (1<<MACH_BASE) } }
d1543 1
a1543 1
    { CGEN_INSN_NBOOL_ATTRS, 0|A(COND_CTI), { (1<<MACH_BASE) } }
d1548 1
a1548 1
    { CGEN_INSN_NBOOL_ATTRS, 0|A(COND_CTI), { (1<<MACH_BASE) } }
d1553 1
a1553 1
    { CGEN_INSN_NBOOL_ATTRS, 0|A(COND_CTI), { (1<<MACH_BASE) } }
d1558 1
a1558 1
    { CGEN_INSN_NBOOL_ATTRS, 0|A(COND_CTI), { (1<<MACH_BASE) } }
d1563 1
a1563 1
    { CGEN_INSN_NBOOL_ATTRS, 0|A(COND_CTI), { (1<<MACH_BASE) } }
d1568 1
a1568 1
    { CGEN_INSN_NBOOL_ATTRS, 0|A(COND_CTI), { (1<<MACH_BASE) } }
d1573 1
a1573 1
    { CGEN_INSN_NBOOL_ATTRS, 0|A(COND_CTI), { (1<<MACH_BASE) } }
d1578 1
a1578 1
    { CGEN_INSN_NBOOL_ATTRS, 0|A(COND_CTI), { (1<<MACH_BASE) } }
d1583 1
a1583 1
    { CGEN_INSN_NBOOL_ATTRS, 0|A(COND_CTI), { (1<<MACH_BASE) } }
d1588 1
a1588 1
    { CGEN_INSN_NBOOL_ATTRS, 0|A(COND_CTI), { (1<<MACH_BASE) } }
d1593 1
a1593 1
    { CGEN_INSN_NBOOL_ATTRS, 0|A(COND_CTI), { (1<<MACH_BASE) } }
d1598 1
a1598 1
    { CGEN_INSN_NBOOL_ATTRS, 0|A(COND_CTI), { (1<<MACH_BASE) } }
d1603 1
a1603 1
    { CGEN_INSN_NBOOL_ATTRS, 0|A(COND_CTI), { (1<<MACH_BASE) } }
d1608 1
a1608 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1613 1
a1613 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1618 1
a1618 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1623 1
a1623 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1628 1
a1628 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1633 1
a1633 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1638 1
a1638 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1643 1
a1643 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1648 1
a1648 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1653 1
a1653 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1658 1
a1658 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1663 1
a1663 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1668 1
a1668 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1673 1
a1673 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1678 1
a1678 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1683 1
a1683 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1688 1
a1688 1
    { CGEN_INSN_NBOOL_ATTRS, 0|A(COND_CTI), { (1<<MACH_BASE) } }
d1693 1
a1693 1
    { CGEN_INSN_NBOOL_ATTRS, 0|A(COND_CTI), { (1<<MACH_BASE) } }
d1698 1
a1698 1
    { CGEN_INSN_NBOOL_ATTRS, 0|A(COND_CTI), { (1<<MACH_BASE) } }
d1703 1
a1703 1
    { CGEN_INSN_NBOOL_ATTRS, 0|A(COND_CTI), { (1<<MACH_BASE) } }
d1708 1
a1708 1
    { CGEN_INSN_NBOOL_ATTRS, 0|A(COND_CTI), { (1<<MACH_BASE) } }
d1713 1
a1713 1
    { CGEN_INSN_NBOOL_ATTRS, 0|A(COND_CTI), { (1<<MACH_BASE) } }
d1718 1
a1718 1
    { CGEN_INSN_NBOOL_ATTRS, 0|A(COND_CTI), { (1<<MACH_BASE) } }
d1723 1
a1723 1
    { CGEN_INSN_NBOOL_ATTRS, 0|A(COND_CTI), { (1<<MACH_BASE) } }
d1728 1
a1728 1
    { CGEN_INSN_NBOOL_ATTRS, 0|A(UNCOND_CTI), { (1<<MACH_BASE) } }
d1733 1
a1733 1
    { CGEN_INSN_NBOOL_ATTRS, 0|A(UNCOND_CTI), { (1<<MACH_BASE) } }
d1738 1
a1738 1
    { CGEN_INSN_NBOOL_ATTRS, 0|A(UNCOND_CTI), { (1<<MACH_BASE) } }
d1743 1
a1743 1
    { CGEN_INSN_NBOOL_ATTRS, 0|A(UNCOND_CTI), { (1<<MACH_BASE) } }
d1748 1
a1748 1
    { CGEN_INSN_NBOOL_ATTRS, 0|A(UNCOND_CTI), { (1<<MACH_BASE) } }
d1753 1
a1753 1
    { CGEN_INSN_NBOOL_ATTRS, 0|A(UNCOND_CTI), { (1<<MACH_BASE) } }
d1758 1
a1758 1
    { CGEN_INSN_NBOOL_ATTRS, 0|A(UNCOND_CTI), { (1<<MACH_BASE) } }
d1763 1
a1763 1
    { CGEN_INSN_NBOOL_ATTRS, 0|A(UNCOND_CTI), { (1<<MACH_BASE) } }
d1768 1
a1768 1
    { CGEN_INSN_NBOOL_ATTRS, 0|A(UNCOND_CTI), { (1<<MACH_BASE) } }
d1773 1
a1773 1
    { CGEN_INSN_NBOOL_ATTRS, 0|A(UNCOND_CTI), { (1<<MACH_BASE) } }
d1778 1
a1778 1
    { CGEN_INSN_NBOOL_ATTRS, 0|A(UNCOND_CTI), { (1<<MACH_BASE) } }
d1783 1
a1783 1
    { CGEN_INSN_NBOOL_ATTRS, 0|A(UNCOND_CTI), { (1<<MACH_BASE) } }
d1788 1
a1788 1
    { CGEN_INSN_NBOOL_ATTRS, 0, { (1<<MACH_BASE) } }
d1796 2
d1803 175
d1979 17
a1995 1
   It's much like opening a file, and must be the first function called.  */
d1998 1
a1998 3
i960_cgen_cpu_open (mach, endian)
     int mach;
     enum cgen_endian endian;
d2002 4
d2015 49
a2063 1
  cd->mach = mach;
d2071 3
a2073 1
  cd->int_insn_p = CGEN_INT_INSN_P;
d2075 2
a2076 1
  cd->max_insn_size = CGEN_MAX_INSN_SIZE;
d2078 2
a2079 1
  cd->hw_list = & i960_cgen_hw_table[0];
d2081 8
a2088 17
  cd->ifld_table = & i960_cgen_ifld_table[0];

  cd->operand_table = & i960_cgen_operand_table[0];

  {
    int i;
    const CGEN_IBASE *ib = & i960_cgen_insn_table[0];
    CGEN_INSN *insns = (CGEN_INSN *) xmalloc (MAX_INSNS * sizeof (CGEN_INSN));
    memset (insns, 0, MAX_INSNS * sizeof (CGEN_INSN));
    for (i = 0; i < MAX_INSNS; ++i)
      insns[i].base = &ib[i];
    cd->insn_table.init_entries = insns;
  }
  cd->insn_table.entry_size = sizeof (CGEN_IBASE);
  cd->insn_table.num_init_entries = MAX_INSNS;

  return (CGEN_CPU_DESC) cd;
d2091 4
a2094 1
/* Close a cpu table.  */
d2102 2
@


1.1.1.1
log
@Initial creation of sourceware repository
@
text
@@


1.1.1.2
log
@import gdb-19990422 snapshot
@
text
@a27 1
#include <stdarg.h>
a52 7
static const CGEN_ATTR_ENTRY ISA_attr[] =
{
  { "i960", ISA_I960 },
  { "max", ISA_MAX },
  { 0, 0 }
};

d57 1
a61 1
  { "SIGNED", &bool_attr[0], &bool_attr[0] },
d69 2
d72 1
d82 1
a85 1
  { "SIGNED", &bool_attr[0], &bool_attr[0] },
d108 1
a108 16
/* Instruction set variants.  */

static const CGEN_ISA i960_cgen_isa_table[] = {
  { "i960", 32, 32, 32, 64,  },
  { 0 }
};

/* Machine variants.  */

static const CGEN_MACH i960_cgen_mach_table[] = {
  { "i960:ka_sa", "i960:ka_sa", MACH_I960_KA_SA },
  { "i960:ca", "i960:ca", MACH_I960_CA },
  { 0 }
};

static CGEN_KEYWORD_ENTRY i960_cgen_opval_h_gr_entries[] =
d146 1
a146 1
CGEN_KEYWORD i960_cgen_opval_h_gr =
d152 1
a152 1
static CGEN_KEYWORD_ENTRY i960_cgen_opval_h_cc_entries[] =
d157 1
a157 1
CGEN_KEYWORD i960_cgen_opval_h_cc =
d167 2
a168 1
#define A(a) (1 << CONCAT2 (CGEN_HW_,a))
d172 8
a179 8
  { "h-memory", HW_H_MEMORY, CGEN_ASM_NONE, 0, { 0, { (1<<MACH_BASE) } } },
  { "h-sint", HW_H_SINT, CGEN_ASM_NONE, 0, { 0, { (1<<MACH_BASE) } } },
  { "h-uint", HW_H_UINT, CGEN_ASM_NONE, 0, { 0, { (1<<MACH_BASE) } } },
  { "h-addr", HW_H_ADDR, CGEN_ASM_NONE, 0, { 0, { (1<<MACH_BASE) } } },
  { "h-iaddr", HW_H_IADDR, CGEN_ASM_NONE, 0, { 0, { (1<<MACH_BASE) } } },
  { "h-pc", HW_H_PC, CGEN_ASM_NONE, 0, { 0|A(PROFILE)|A(PC), { (1<<MACH_BASE) } } },
  { "h-gr", HW_H_GR, CGEN_ASM_KEYWORD, (PTR) & i960_cgen_opval_h_gr, { 0|A(CACHE_ADDR)|A(PROFILE), { (1<<MACH_BASE) } } },
  { "h-cc", HW_H_CC, CGEN_ASM_KEYWORD, (PTR) & i960_cgen_opval_h_cc, { 0|A(CACHE_ADDR)|A(PROFILE), { (1<<MACH_BASE) } } },
d183 1
d188 1
a188 1
#define A(a) (1 << CONCAT2 (CGEN_IFLD_,a))
d192 26
a217 26
  { I960_F_NIL, "f-nil", 0, 0, 0, 0, { 0, { (1<<MACH_BASE) } }  },
  { I960_F_OPCODE, "f-opcode", 0, 32, 0, 8, { 0, { (1<<MACH_BASE) } }  },
  { I960_F_SRCDST, "f-srcdst", 0, 32, 8, 5, { 0, { (1<<MACH_BASE) } }  },
  { I960_F_SRC2, "f-src2", 0, 32, 13, 5, { 0, { (1<<MACH_BASE) } }  },
  { I960_F_M3, "f-m3", 0, 32, 18, 1, { 0, { (1<<MACH_BASE) } }  },
  { I960_F_M2, "f-m2", 0, 32, 19, 1, { 0, { (1<<MACH_BASE) } }  },
  { I960_F_M1, "f-m1", 0, 32, 20, 1, { 0, { (1<<MACH_BASE) } }  },
  { I960_F_OPCODE2, "f-opcode2", 0, 32, 21, 4, { 0, { (1<<MACH_BASE) } }  },
  { I960_F_ZERO, "f-zero", 0, 32, 25, 2, { 0, { (1<<MACH_BASE) } }  },
  { I960_F_SRC1, "f-src1", 0, 32, 27, 5, { 0, { (1<<MACH_BASE) } }  },
  { I960_F_ABASE, "f-abase", 0, 32, 13, 5, { 0, { (1<<MACH_BASE) } }  },
  { I960_F_MODEA, "f-modea", 0, 32, 18, 1, { 0, { (1<<MACH_BASE) } }  },
  { I960_F_ZEROA, "f-zeroa", 0, 32, 19, 1, { 0, { (1<<MACH_BASE) } }  },
  { I960_F_OFFSET, "f-offset", 0, 32, 20, 12, { 0, { (1<<MACH_BASE) } }  },
  { I960_F_MODEB, "f-modeb", 0, 32, 18, 4, { 0, { (1<<MACH_BASE) } }  },
  { I960_F_SCALE, "f-scale", 0, 32, 22, 3, { 0, { (1<<MACH_BASE) } }  },
  { I960_F_ZEROB, "f-zerob", 0, 32, 25, 2, { 0, { (1<<MACH_BASE) } }  },
  { I960_F_INDEX, "f-index", 0, 32, 27, 5, { 0, { (1<<MACH_BASE) } }  },
  { I960_F_OPTDISP, "f-optdisp", 32, 32, 0, 32, { 0, { (1<<MACH_BASE) } }  },
  { I960_F_BR_SRC1, "f-br-src1", 0, 32, 8, 5, { 0, { (1<<MACH_BASE) } }  },
  { I960_F_BR_SRC2, "f-br-src2", 0, 32, 13, 5, { 0, { (1<<MACH_BASE) } }  },
  { I960_F_BR_M1, "f-br-m1", 0, 32, 18, 1, { 0, { (1<<MACH_BASE) } }  },
  { I960_F_BR_DISP, "f-br-disp", 0, 32, 19, 11, { 0|A(PCREL_ADDR), { (1<<MACH_BASE) } }  },
  { I960_F_BR_ZERO, "f-br-zero", 0, 32, 30, 2, { 0, { (1<<MACH_BASE) } }  },
  { I960_F_CTRL_DISP, "f-ctrl-disp", 0, 32, 8, 22, { 0|A(PCREL_ADDR), { (1<<MACH_BASE) } }  },
  { I960_F_CTRL_ZERO, "f-ctrl-zero", 0, 32, 30, 2, { 0, { (1<<MACH_BASE) } }  },
d225 1
a225 1
#define A(a) (1 << CONCAT2 (CGEN_OPERAND_,a))
d228 1
a228 1
const CGEN_OPERAND i960_cgen_operand_table[] =
d231 2
a232 2
  { "pc", I960_OPERAND_PC, HW_H_PC, 0, 0,
    { 0|A(SEM_ONLY), { (1<<MACH_BASE) } }  },
d234 2
a235 2
  { "src1", I960_OPERAND_SRC1, HW_H_GR, 27, 5,
    { 0, { (1<<MACH_BASE) } }  },
d237 2
a238 2
  { "src2", I960_OPERAND_SRC2, HW_H_GR, 13, 5,
    { 0, { (1<<MACH_BASE) } }  },
d240 2
a241 2
  { "dst", I960_OPERAND_DST, HW_H_GR, 8, 5,
    { 0, { (1<<MACH_BASE) } }  },
d243 2
a244 2
  { "lit1", I960_OPERAND_LIT1, HW_H_UINT, 27, 5,
    { 0, { (1<<MACH_BASE) } }  },
d246 2
a247 2
  { "lit2", I960_OPERAND_LIT2, HW_H_UINT, 13, 5,
    { 0, { (1<<MACH_BASE) } }  },
d249 2
a250 2
  { "st_src", I960_OPERAND_ST_SRC, HW_H_GR, 8, 5,
    { 0, { (1<<MACH_BASE) } }  },
d252 2
a253 2
  { "abase", I960_OPERAND_ABASE, HW_H_GR, 13, 5,
    { 0, { (1<<MACH_BASE) } }  },
d255 2
a256 2
  { "offset", I960_OPERAND_OFFSET, HW_H_UINT, 20, 12,
    { 0, { (1<<MACH_BASE) } }  },
d258 2
a259 2
  { "scale", I960_OPERAND_SCALE, HW_H_UINT, 22, 3,
    { 0, { (1<<MACH_BASE) } }  },
d261 2
a262 2
  { "index", I960_OPERAND_INDEX, HW_H_GR, 27, 5,
    { 0, { (1<<MACH_BASE) } }  },
d264 2
a265 2
  { "optdisp", I960_OPERAND_OPTDISP, HW_H_UINT, 0, 32,
    { 0, { (1<<MACH_BASE) } }  },
d267 2
a268 2
  { "br_src1", I960_OPERAND_BR_SRC1, HW_H_GR, 8, 5,
    { 0, { (1<<MACH_BASE) } }  },
d270 2
a271 2
  { "br_src2", I960_OPERAND_BR_SRC2, HW_H_GR, 13, 5,
    { 0, { (1<<MACH_BASE) } }  },
d273 2
a274 2
  { "br_disp", I960_OPERAND_BR_DISP, HW_H_IADDR, 19, 11,
    { 0|A(PCREL_ADDR), { (1<<MACH_BASE) } }  },
d276 2
a277 2
  { "br_lit1", I960_OPERAND_BR_LIT1, HW_H_UINT, 8, 5,
    { 0, { (1<<MACH_BASE) } }  },
d279 2
a280 3
  { "ctrl_disp", I960_OPERAND_CTRL_DISP, HW_H_IADDR, 8, 22,
    { 0|A(PCREL_ADDR), { (1<<MACH_BASE) } }  },
  { 0 }
d285 1
a285 1
#define A(a) (1 << CONCAT2 (CGEN_INSN_,a))
d299 1
a299 1
    { 0, { (1<<MACH_BASE) } }
d304 1
a304 1
    { 0, { (1<<MACH_BASE) } }
d309 1
a309 1
    { 0, { (1<<MACH_BASE) } }
d314 1
a314 1
    { 0, { (1<<MACH_BASE) } }
d319 1
a319 1
    { 0, { (1<<MACH_BASE) } }
d324 1
a324 1
    { 0, { (1<<MACH_BASE) } }
d329 1
a329 1
    { 0, { (1<<MACH_BASE) } }
d334 1
a334 1
    { 0, { (1<<MACH_BASE) } }
d339 1
a339 1
    { 0, { (1<<MACH_BASE) } }
d344 1
a344 1
    { 0, { (1<<MACH_BASE) } }
d349 1
a349 1
    { 0, { (1<<MACH_BASE) } }
d354 1
a354 1
    { 0, { (1<<MACH_BASE) } }
d359 1
a359 1
    { 0, { (1<<MACH_BASE) } }
d364 1
a364 1
    { 0, { (1<<MACH_BASE) } }
d369 1
a369 1
    { 0, { (1<<MACH_BASE) } }
d374 1
a374 1
    { 0, { (1<<MACH_BASE) } }
d379 1
a379 1
    { 0, { (1<<MACH_BASE) } }
d384 1
a384 1
    { 0, { (1<<MACH_BASE) } }
d389 1
a389 1
    { 0, { (1<<MACH_BASE) } }
d394 1
a394 1
    { 0, { (1<<MACH_BASE) } }
d399 1
a399 1
    { 0, { (1<<MACH_BASE) } }
d404 1
a404 1
    { 0, { (1<<MACH_BASE) } }
d409 1
a409 1
    { 0, { (1<<MACH_BASE) } }
d414 1
a414 1
    { 0, { (1<<MACH_BASE) } }
d419 1
a419 1
    { 0, { (1<<MACH_BASE) } }
d424 1
a424 1
    { 0, { (1<<MACH_BASE) } }
d429 1
a429 1
    { 0, { (1<<MACH_BASE) } }
d434 1
a434 1
    { 0, { (1<<MACH_BASE) } }
d439 1
a439 1
    { 0, { (1<<MACH_BASE) } }
d444 1
a444 1
    { 0, { (1<<MACH_BASE) } }
d449 1
a449 1
    { 0, { (1<<MACH_BASE) } }
d454 1
a454 1
    { 0, { (1<<MACH_BASE) } }
d459 1
a459 1
    { 0, { (1<<MACH_BASE) } }
d464 1
a464 1
    { 0, { (1<<MACH_BASE) } }
d469 1
a469 1
    { 0, { (1<<MACH_BASE) } }
d474 1
a474 1
    { 0, { (1<<MACH_BASE) } }
d479 1
a479 1
    { 0, { (1<<MACH_BASE) } }
d484 1
a484 1
    { 0, { (1<<MACH_BASE) } }
d489 1
a489 1
    { 0, { (1<<MACH_BASE) } }
d494 1
a494 1
    { 0, { (1<<MACH_BASE) } }
d499 1
a499 1
    { 0, { (1<<MACH_BASE) } }
d504 1
a504 1
    { 0, { (1<<MACH_BASE) } }
d509 1
a509 1
    { 0, { (1<<MACH_BASE) } }
d514 1
a514 1
    { 0, { (1<<MACH_BASE) } }
d519 1
a519 1
    { 0, { (1<<MACH_BASE) } }
d524 1
a524 1
    { 0, { (1<<MACH_BASE) } }
d529 1
a529 1
    { 0, { (1<<MACH_BASE) } }
d534 1
a534 1
    { 0, { (1<<MACH_BASE) } }
d539 1
a539 1
    { 0, { (1<<MACH_BASE) } }
d544 1
a544 1
    { 0, { (1<<MACH_BASE) } }
d549 1
a549 1
    { 0, { (1<<MACH_BASE) } }
d554 1
a554 1
    { 0, { (1<<MACH_BASE) } }
d559 1
a559 1
    { 0, { (1<<MACH_BASE) } }
d564 1
a564 1
    { 0, { (1<<MACH_BASE) } }
d569 1
a569 1
    { 0, { (1<<MACH_BASE) } }
d574 1
a574 1
    { 0, { (1<<MACH_BASE) } }
d579 1
a579 1
    { 0, { (1<<MACH_BASE) } }
d584 1
a584 1
    { 0, { (1<<MACH_BASE) } }
d589 1
a589 1
    { 0, { (1<<MACH_BASE) } }
d594 1
a594 21
    { 0, { (1<<MACH_BASE) } }
  },
/* xnor $src1, $src2, $dst */
  {
    I960_INSN_XNOR, "xnor", "xnor", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* xnor $lit1, $src2, $dst */
  {
    I960_INSN_XNOR1, "xnor1", "xnor", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* xnor $src1, $lit2, $dst */
  {
    I960_INSN_XNOR2, "xnor2", "xnor", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* xnor $lit1, $lit2, $dst */
  {
    I960_INSN_XNOR3, "xnor3", "xnor", 32,
    { 0, { (1<<MACH_BASE) } }
d599 1
a599 1
    { 0, { (1<<MACH_BASE) } }
d604 1
a604 1
    { 0, { (1<<MACH_BASE) } }
d609 1
a609 1
    { 0, { (1<<MACH_BASE) } }
d614 1
a614 21
    { 0, { (1<<MACH_BASE) } }
  },
/* ornot $src1, $src2, $dst */
  {
    I960_INSN_ORNOT, "ornot", "ornot", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* ornot $lit1, $src2, $dst */
  {
    I960_INSN_ORNOT1, "ornot1", "ornot", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* ornot $src1, $lit2, $dst */
  {
    I960_INSN_ORNOT2, "ornot2", "ornot", 32,
    { 0, { (1<<MACH_BASE) } }
  },
/* ornot $lit1, $lit2, $dst */
  {
    I960_INSN_ORNOT3, "ornot3", "ornot", 32,
    { 0, { (1<<MACH_BASE) } }
d619 1
a619 1
    { 0, { (1<<MACH_BASE) } }
d624 1
a624 1
    { 0, { (1<<MACH_BASE) } }
d629 1
a629 1
    { 0, { (1<<MACH_BASE) } }
d634 1
a634 1
    { 0, { (1<<MACH_BASE) } }
d639 1
a639 1
    { 0, { (1<<MACH_BASE) } }
d644 1
a644 1
    { 0, { (1<<MACH_BASE) } }
d649 1
a649 1
    { 0, { (1<<MACH_BASE) } }
d654 1
a654 1
    { 0, { (1<<MACH_BASE) } }
d659 1
a659 1
    { 0, { (1<<MACH_BASE) } }
d664 1
a664 1
    { 0, { (1<<MACH_BASE) } }
d669 1
a669 1
    { 0, { (1<<MACH_BASE) } }
d674 1
a674 1
    { 0, { (1<<MACH_BASE) } }
d679 1
a679 1
    { 0, { (1<<MACH_BASE) } }
d684 1
a684 1
    { 0, { (1<<MACH_BASE) } }
d689 1
a689 1
    { 0, { (1<<MACH_BASE) } }
d694 1
a694 1
    { 0, { (1<<MACH_BASE) } }
d699 1
a699 1
    { 0, { (1<<MACH_BASE) } }
d704 1
a704 1
    { 0, { (1<<MACH_BASE) } }
d709 1
a709 1
    { 0, { (1<<MACH_BASE) } }
d714 1
a714 1
    { 0, { (1<<MACH_BASE) } }
d719 1
a719 1
    { 0, { (1<<MACH_BASE) } }
d724 1
a724 1
    { 0, { (1<<MACH_BASE) } }
d729 1
a729 1
    { 0, { (1<<MACH_BASE) } }
d734 1
a734 1
    { 0, { (1<<MACH_BASE) } }
d739 1
a739 1
    { 0, { (1<<MACH_BASE) } }
d744 1
a744 1
    { 0, { (1<<MACH_BASE) } }
d749 1
a749 1
    { 0, { (1<<MACH_BASE) } }
d754 1
a754 1
    { 0, { (1<<MACH_BASE) } }
d759 1
a759 1
    { 0, { (1<<MACH_BASE) } }
d764 1
a764 1
    { 0, { (1<<MACH_BASE) } }
d769 1
a769 1
    { 0, { (1<<MACH_BASE) } }
d774 1
a774 1
    { 0, { (1<<MACH_BASE) } }
d779 1
a779 1
    { 0, { (1<<MACH_BASE) } }
d784 1
a784 1
    { 0, { (1<<MACH_BASE) } }
d789 1
a789 1
    { 0, { (1<<MACH_BASE) } }
d794 1
a794 1
    { 0, { (1<<MACH_BASE) } }
d799 1
a799 1
    { 0, { (1<<MACH_BASE) } }
d804 1
a804 1
    { 0, { (1<<MACH_BASE) } }
d809 1
a809 1
    { 0, { (1<<MACH_BASE) } }
d814 1
a814 1
    { 0, { (1<<MACH_BASE) } }
d819 1
a819 1
    { 0, { (1<<MACH_BASE) } }
d824 1
a824 1
    { 0, { (1<<MACH_BASE) } }
d829 1
a829 1
    { 0, { (1<<MACH_BASE) } }
d834 1
a834 1
    { 0, { (1<<MACH_BASE) } }
d839 1
a839 1
    { 0, { (1<<MACH_BASE) } }
d844 1
a844 1
    { 0, { (1<<MACH_BASE) } }
d849 1
a849 1
    { 0, { (1<<MACH_BASE) } }
d854 1
a854 1
    { 0, { (1<<MACH_BASE) } }
d859 1
a859 1
    { 0, { (1<<MACH_BASE) } }
d864 1
a864 1
    { 0, { (1<<MACH_BASE) } }
d869 1
a869 1
    { 0, { (1<<MACH_BASE) } }
d874 1
a874 1
    { 0, { (1<<MACH_BASE) } }
d879 1
a879 1
    { 0, { (1<<MACH_BASE) } }
d884 1
a884 1
    { 0, { (1<<MACH_BASE) } }
d889 1
a889 1
    { 0, { (1<<MACH_BASE) } }
d894 1
a894 1
    { 0, { (1<<MACH_BASE) } }
d899 1
a899 1
    { 0, { (1<<MACH_BASE) } }
d904 1
a904 1
    { 0, { (1<<MACH_BASE) } }
d909 1
a909 1
    { 0, { (1<<MACH_BASE) } }
d914 1
a914 1
    { 0, { (1<<MACH_BASE) } }
d919 1
a919 1
    { 0, { (1<<MACH_BASE) } }
d924 1
a924 1
    { 0, { (1<<MACH_BASE) } }
d929 1
a929 1
    { 0, { (1<<MACH_BASE) } }
d934 1
a934 1
    { 0, { (1<<MACH_BASE) } }
d939 1
a939 1
    { 0, { (1<<MACH_BASE) } }
d944 1
a944 1
    { 0, { (1<<MACH_BASE) } }
d949 1
a949 1
    { 0, { (1<<MACH_BASE) } }
d954 1
a954 1
    { 0, { (1<<MACH_BASE) } }
d959 1
a959 1
    { 0, { (1<<MACH_BASE) } }
d964 1
a964 1
    { 0, { (1<<MACH_BASE) } }
d969 1
a969 1
    { 0, { (1<<MACH_BASE) } }
d974 1
a974 1
    { 0, { (1<<MACH_BASE) } }
d979 1
a979 1
    { 0, { (1<<MACH_BASE) } }
d984 1
a984 1
    { 0, { (1<<MACH_BASE) } }
d989 1
a989 1
    { 0, { (1<<MACH_BASE) } }
d994 1
a994 1
    { 0, { (1<<MACH_BASE) } }
d999 1
a999 1
    { 0, { (1<<MACH_BASE) } }
d1004 1
a1004 1
    { 0, { (1<<MACH_BASE) } }
d1009 1
a1009 1
    { 0, { (1<<MACH_BASE) } }
d1014 1
a1014 1
    { 0, { (1<<MACH_BASE) } }
d1019 1
a1019 1
    { 0, { (1<<MACH_BASE) } }
d1024 1
a1024 1
    { 0, { (1<<MACH_BASE) } }
d1029 1
a1029 1
    { 0, { (1<<MACH_BASE) } }
d1034 1
a1034 1
    { 0, { (1<<MACH_BASE) } }
d1039 1
a1039 1
    { 0, { (1<<MACH_BASE) } }
d1044 1
a1044 1
    { 0, { (1<<MACH_BASE) } }
d1049 1
a1049 1
    { 0, { (1<<MACH_BASE) } }
d1054 1
a1054 1
    { 0, { (1<<MACH_BASE) } }
d1059 1
a1059 1
    { 0, { (1<<MACH_BASE) } }
d1064 1
a1064 1
    { 0, { (1<<MACH_BASE) } }
d1069 1
a1069 1
    { 0, { (1<<MACH_BASE) } }
d1074 1
a1074 1
    { 0, { (1<<MACH_BASE) } }
d1079 1
a1079 1
    { 0, { (1<<MACH_BASE) } }
d1084 1
a1084 1
    { 0, { (1<<MACH_BASE) } }
d1089 1
a1089 1
    { 0, { (1<<MACH_BASE) } }
d1094 1
a1094 1
    { 0, { (1<<MACH_BASE) } }
d1099 1
a1099 1
    { 0, { (1<<MACH_BASE) } }
d1104 1
a1104 1
    { 0, { (1<<MACH_BASE) } }
d1109 1
a1109 1
    { 0, { (1<<MACH_BASE) } }
d1114 1
a1114 1
    { 0, { (1<<MACH_BASE) } }
d1119 1
a1119 1
    { 0, { (1<<MACH_BASE) } }
d1124 1
a1124 1
    { 0, { (1<<MACH_BASE) } }
d1129 1
a1129 1
    { 0, { (1<<MACH_BASE) } }
d1134 1
a1134 1
    { 0, { (1<<MACH_BASE) } }
d1139 1
a1139 1
    { 0, { (1<<MACH_BASE) } }
d1144 1
a1144 1
    { 0, { (1<<MACH_BASE) } }
d1149 1
a1149 1
    { 0, { (1<<MACH_BASE) } }
d1154 1
a1154 1
    { 0, { (1<<MACH_BASE) } }
d1159 1
a1159 1
    { 0, { (1<<MACH_BASE) } }
d1164 1
a1164 1
    { 0, { (1<<MACH_BASE) } }
d1169 1
a1169 1
    { 0, { (1<<MACH_BASE) } }
d1174 1
a1174 1
    { 0, { (1<<MACH_BASE) } }
d1179 1
a1179 1
    { 0, { (1<<MACH_BASE) } }
d1184 1
a1184 1
    { 0, { (1<<MACH_BASE) } }
d1189 1
a1189 1
    { 0, { (1<<MACH_BASE) } }
d1194 1
a1194 1
    { 0, { (1<<MACH_BASE) } }
d1199 1
a1199 1
    { 0, { (1<<MACH_BASE) } }
d1204 1
a1204 1
    { 0, { (1<<MACH_BASE) } }
d1209 1
a1209 1
    { 0, { (1<<MACH_BASE) } }
d1214 1
a1214 1
    { 0, { (1<<MACH_BASE) } }
d1219 1
a1219 1
    { 0, { (1<<MACH_BASE) } }
d1224 1
a1224 1
    { 0, { (1<<MACH_BASE) } }
d1229 1
a1229 1
    { 0, { (1<<MACH_BASE) } }
d1234 1
a1234 1
    { 0, { (1<<MACH_BASE) } }
d1239 1
a1239 1
    { 0, { (1<<MACH_BASE) } }
d1244 1
a1244 1
    { 0, { (1<<MACH_BASE) } }
d1249 1
a1249 1
    { 0, { (1<<MACH_BASE) } }
d1254 1
a1254 1
    { 0, { (1<<MACH_BASE) } }
d1259 1
a1259 1
    { 0, { (1<<MACH_BASE) } }
d1264 1
a1264 1
    { 0, { (1<<MACH_BASE) } }
d1269 1
a1269 1
    { 0, { (1<<MACH_BASE) } }
d1274 1
a1274 1
    { 0, { (1<<MACH_BASE) } }
d1279 1
a1279 1
    { 0, { (1<<MACH_BASE) } }
d1284 1
a1284 1
    { 0, { (1<<MACH_BASE) } }
d1289 1
a1289 1
    { 0, { (1<<MACH_BASE) } }
d1294 1
a1294 1
    { 0, { (1<<MACH_BASE) } }
d1299 1
a1299 1
    { 0, { (1<<MACH_BASE) } }
d1304 1
a1304 1
    { 0, { (1<<MACH_BASE) } }
d1309 1
a1309 1
    { 0, { (1<<MACH_BASE) } }
d1314 1
a1314 1
    { 0, { (1<<MACH_BASE) } }
d1319 1
a1319 1
    { 0, { (1<<MACH_BASE) } }
d1324 1
a1324 1
    { 0, { (1<<MACH_BASE) } }
d1329 1
a1329 1
    { 0, { (1<<MACH_BASE) } }
d1334 1
a1334 1
    { 0, { (1<<MACH_BASE) } }
d1339 1
a1339 1
    { 0, { (1<<MACH_BASE) } }
d1344 1
a1344 1
    { 0, { (1<<MACH_BASE) } }
d1349 1
a1349 1
    { 0, { (1<<MACH_BASE) } }
d1354 1
a1354 1
    { 0, { (1<<MACH_BASE) } }
d1359 1
a1359 1
    { 0, { (1<<MACH_BASE) } }
d1364 1
a1364 1
    { 0, { (1<<MACH_BASE) } }
d1369 1
a1369 1
    { 0, { (1<<MACH_BASE) } }
d1374 1
a1374 1
    { 0, { (1<<MACH_BASE) } }
d1379 1
a1379 1
    { 0, { (1<<MACH_BASE) } }
d1384 1
a1384 1
    { 0, { (1<<MACH_BASE) } }
d1389 1
a1389 1
    { 0|A(COND_CTI), { (1<<MACH_BASE) } }
d1394 1
a1394 1
    { 0|A(COND_CTI), { (1<<MACH_BASE) } }
d1399 1
a1399 1
    { 0|A(COND_CTI), { (1<<MACH_BASE) } }
d1404 1
a1404 1
    { 0|A(COND_CTI), { (1<<MACH_BASE) } }
d1409 1
a1409 1
    { 0|A(COND_CTI), { (1<<MACH_BASE) } }
d1414 1
a1414 1
    { 0|A(COND_CTI), { (1<<MACH_BASE) } }
d1419 1
a1419 1
    { 0|A(COND_CTI), { (1<<MACH_BASE) } }
d1424 1
a1424 1
    { 0|A(COND_CTI), { (1<<MACH_BASE) } }
d1429 1
a1429 1
    { 0|A(COND_CTI), { (1<<MACH_BASE) } }
d1434 1
a1434 1
    { 0|A(COND_CTI), { (1<<MACH_BASE) } }
d1439 1
a1439 1
    { 0|A(COND_CTI), { (1<<MACH_BASE) } }
d1444 1
a1444 1
    { 0|A(COND_CTI), { (1<<MACH_BASE) } }
d1449 1
a1449 1
    { 0|A(COND_CTI), { (1<<MACH_BASE) } }
d1454 1
a1454 1
    { 0|A(COND_CTI), { (1<<MACH_BASE) } }
d1459 1
a1459 1
    { 0|A(COND_CTI), { (1<<MACH_BASE) } }
d1464 1
a1464 1
    { 0|A(COND_CTI), { (1<<MACH_BASE) } }
d1469 1
a1469 1
    { 0|A(COND_CTI), { (1<<MACH_BASE) } }
d1474 1
a1474 1
    { 0|A(COND_CTI), { (1<<MACH_BASE) } }
d1479 1
a1479 1
    { 0|A(COND_CTI), { (1<<MACH_BASE) } }
d1484 1
a1484 1
    { 0|A(COND_CTI), { (1<<MACH_BASE) } }
d1489 1
a1489 1
    { 0|A(COND_CTI), { (1<<MACH_BASE) } }
d1494 1
a1494 1
    { 0|A(COND_CTI), { (1<<MACH_BASE) } }
d1499 1
a1499 1
    { 0|A(COND_CTI), { (1<<MACH_BASE) } }
d1504 1
a1504 1
    { 0|A(COND_CTI), { (1<<MACH_BASE) } }
d1509 1
a1509 1
    { 0|A(COND_CTI), { (1<<MACH_BASE) } }
d1514 1
a1514 1
    { 0|A(COND_CTI), { (1<<MACH_BASE) } }
d1519 1
a1519 1
    { 0|A(COND_CTI), { (1<<MACH_BASE) } }
d1524 1
a1524 1
    { 0|A(COND_CTI), { (1<<MACH_BASE) } }
d1529 1
a1529 1
    { 0, { (1<<MACH_BASE) } }
d1534 1
a1534 1
    { 0, { (1<<MACH_BASE) } }
d1539 1
a1539 1
    { 0, { (1<<MACH_BASE) } }
d1544 1
a1544 1
    { 0, { (1<<MACH_BASE) } }
d1549 1
a1549 1
    { 0, { (1<<MACH_BASE) } }
d1554 1
a1554 1
    { 0, { (1<<MACH_BASE) } }
d1559 1
a1559 1
    { 0, { (1<<MACH_BASE) } }
d1564 1
a1564 1
    { 0, { (1<<MACH_BASE) } }
d1569 1
a1569 1
    { 0, { (1<<MACH_BASE) } }
d1574 1
a1574 1
    { 0, { (1<<MACH_BASE) } }
d1579 1
a1579 1
    { 0, { (1<<MACH_BASE) } }
d1584 1
a1584 1
    { 0, { (1<<MACH_BASE) } }
d1589 1
a1589 1
    { 0, { (1<<MACH_BASE) } }
d1594 1
a1594 1
    { 0, { (1<<MACH_BASE) } }
d1599 1
a1599 1
    { 0, { (1<<MACH_BASE) } }
d1604 1
a1604 1
    { 0, { (1<<MACH_BASE) } }
d1609 1
a1609 1
    { 0|A(COND_CTI), { (1<<MACH_BASE) } }
d1614 1
a1614 1
    { 0|A(COND_CTI), { (1<<MACH_BASE) } }
d1619 1
a1619 1
    { 0|A(COND_CTI), { (1<<MACH_BASE) } }
d1624 1
a1624 1
    { 0|A(COND_CTI), { (1<<MACH_BASE) } }
d1629 1
a1629 1
    { 0|A(COND_CTI), { (1<<MACH_BASE) } }
d1634 1
a1634 1
    { 0|A(COND_CTI), { (1<<MACH_BASE) } }
d1639 1
a1639 1
    { 0|A(COND_CTI), { (1<<MACH_BASE) } }
d1644 1
a1644 1
    { 0|A(COND_CTI), { (1<<MACH_BASE) } }
d1649 1
a1649 1
    { 0|A(UNCOND_CTI), { (1<<MACH_BASE) } }
d1654 1
a1654 1
    { 0|A(UNCOND_CTI), { (1<<MACH_BASE) } }
d1659 1
a1659 1
    { 0|A(UNCOND_CTI), { (1<<MACH_BASE) } }
d1664 1
a1664 1
    { 0|A(UNCOND_CTI), { (1<<MACH_BASE) } }
d1669 1
a1669 1
    { 0|A(UNCOND_CTI), { (1<<MACH_BASE) } }
d1674 1
a1674 1
    { 0|A(UNCOND_CTI), { (1<<MACH_BASE) } }
d1679 1
a1679 1
    { 0|A(UNCOND_CTI), { (1<<MACH_BASE) } }
d1684 1
a1684 1
    { 0|A(UNCOND_CTI), { (1<<MACH_BASE) } }
d1689 1
a1689 1
    { 0|A(UNCOND_CTI), { (1<<MACH_BASE) } }
d1694 1
a1694 1
    { 0|A(UNCOND_CTI), { (1<<MACH_BASE) } }
d1699 1
a1699 1
    { 0|A(UNCOND_CTI), { (1<<MACH_BASE) } }
d1704 1
a1704 1
    { 0|A(UNCOND_CTI), { (1<<MACH_BASE) } }
d1709 1
a1709 1
    { 0, { (1<<MACH_BASE) } }
a1716 2
/* Initialize anything needed to be done once, before any cpu_open call.  */

a1721 176
/* Subroutine of i960_cgen_cpu_open to look up a mach via its bfd name.  */

static const CGEN_MACH *
lookup_mach_via_bfd_name (table, name)
     const CGEN_MACH *table;
     const char *name;
{
  while (table->name)
    {
      if (strcmp (name, table->bfd_name) == 0)
	return table;
      ++table;
    }
  abort ();
}

/* Subroutine of i960_cgen_cpu_open to build the hardware table.  */

static void
build_hw_table (cd)
     CGEN_CPU_TABLE *cd;
{
  int i;
  int machs = cd->machs;
  const CGEN_HW_ENTRY *init = & i960_cgen_hw_table[0];
  /* MAX_HW is only an upper bound on the number of selected entries.
     However each entry is indexed by it's enum so there can be holes in
     the table.  */
  const CGEN_HW_ENTRY **selected =
    (const CGEN_HW_ENTRY **) xmalloc (MAX_HW * sizeof (CGEN_HW_ENTRY *));

  cd->hw_table.init_entries = init;
  cd->hw_table.entry_size = sizeof (CGEN_HW_ENTRY);
  memset (selected, 0, MAX_HW * sizeof (CGEN_HW_ENTRY *));
  /* ??? For now we just use machs to determine which ones we want.  */
  for (i = 0; init[i].name != NULL; ++i)
    if (CGEN_HW_ATTR_VALUE (&init[i], CGEN_HW_MACH)
	& machs)
      selected[init[i].type] = &init[i];
  cd->hw_table.entries = selected;
  cd->hw_table.num_entries = MAX_HW;
}

/* Subroutine of i960_cgen_cpu_open to build the hardware table.  */

static void
build_ifield_table (cd)
     CGEN_CPU_TABLE *cd;
{
  cd->ifld_table = & i960_cgen_ifld_table[0];
}

/* Subroutine of i960_cgen_cpu_open to build the hardware table.  */

static void
build_operand_table (cd)
     CGEN_CPU_TABLE *cd;
{
  int i;
  int machs = cd->machs;
  const CGEN_OPERAND *init = & i960_cgen_operand_table[0];
  /* MAX_OPERANDS is only an upper bound on the number of selected entries.
     However each entry is indexed by it's enum so there can be holes in
     the table.  */
  const CGEN_OPERAND **selected =
    (const CGEN_OPERAND **) xmalloc (MAX_OPERANDS * sizeof (CGEN_OPERAND *));

  cd->operand_table.init_entries = init;
  cd->operand_table.entry_size = sizeof (CGEN_OPERAND);
  memset (selected, 0, MAX_OPERANDS * sizeof (CGEN_OPERAND *));
  /* ??? For now we just use mach to determine which ones we want.  */
  for (i = 0; init[i].name != NULL; ++i)
    if (CGEN_OPERAND_ATTR_VALUE (&init[i], CGEN_OPERAND_MACH)
	& machs)
      selected[init[i].type] = &init[i];
  cd->operand_table.entries = selected;
  cd->operand_table.num_entries = MAX_OPERANDS;
}

/* Subroutine of i960_cgen_cpu_open to build the hardware table.
   ??? This could leave out insns not supported by the specified mach/isa,
   but that would cause errors like "foo only supported by bar" to become
   "unknown insn", so for now we include all insns and require the app to
   do the checking later.
   ??? On the other hand, parsing of such insns may require their hardware or
   operand elements to be in the table [which they mightn't be].  */

static void
build_insn_table (cd)
     CGEN_CPU_TABLE *cd;
{
  int i;
  const CGEN_IBASE *ib = & i960_cgen_insn_table[0];
  CGEN_INSN *insns = (CGEN_INSN *) xmalloc (MAX_INSNS * sizeof (CGEN_INSN));

  memset (insns, 0, MAX_INSNS * sizeof (CGEN_INSN));
  for (i = 0; i < MAX_INSNS; ++i)
    insns[i].base = &ib[i];
  cd->insn_table.init_entries = insns;
  cd->insn_table.entry_size = sizeof (CGEN_IBASE);
  cd->insn_table.num_init_entries = MAX_INSNS;
}

/* Subroutine of i960_cgen_cpu_open to rebuild the tables.
   This is also called by cgen_set_cpu (via an entry in CD).  */

static void
i960_cgen_rebuild_tables (cd)
     CGEN_CPU_TABLE *cd;
{
  int i,n_isas,n_machs;
  unsigned int isas = cd->isas;
  unsigned int machs = cd->machs;

  cd->int_insn_p = CGEN_INT_INSN_P;

  /* Data derived from the isa spec.  */
#define UNSET (CGEN_SIZE_UNKNOWN + 1)
  cd->default_insn_bitsize = UNSET;
  cd->base_insn_bitsize = UNSET;
  cd->min_insn_bitsize = 65535; /* some ridiculously big number */
  cd->max_insn_bitsize = 0;
  for (i = 0; i < MAX_ISAS; ++i)
    if (((1 << i) & isas) != 0)
      {
	const CGEN_ISA *isa = & i960_cgen_isa_table[i];

	/* Default insn sizes of all selected isas must be equal or we set
	   the result to 0, meaning "unknown".  */
	if (cd->default_insn_bitsize == UNSET)
	  cd->default_insn_bitsize = isa->default_insn_bitsize;
	else if (isa->default_insn_bitsize == cd->default_insn_bitsize)
	  ; /* this is ok */
	else
	  cd->default_insn_bitsize = CGEN_SIZE_UNKNOWN;

	/* Base insn sizes of all selected isas must be equal or we set
	   the result to 0, meaning "unknown".  */
	if (cd->base_insn_bitsize == UNSET)
	  cd->base_insn_bitsize = isa->base_insn_bitsize;
	else if (isa->base_insn_bitsize == cd->base_insn_bitsize)
	  ; /* this is ok */
	else
	  cd->base_insn_bitsize = CGEN_SIZE_UNKNOWN;

	/* Set min,max insn sizes.  */
	if (isa->min_insn_bitsize < cd->min_insn_bitsize)
	  cd->min_insn_bitsize = isa->min_insn_bitsize;
	if (isa->max_insn_bitsize > cd->max_insn_bitsize)
	  cd->max_insn_bitsize = isa->max_insn_bitsize;

	++n_isas;
      }

  /* Data derived from the mach spec.  */
  for (i = 0; i < MAX_MACHS; ++i)
    if (((1 << i) & machs) != 0)
      {
	const CGEN_MACH *mach = & i960_cgen_mach_table[i];

	++n_machs;
      }

  /* Determine which hw elements are used by MACH.  */
  build_hw_table (cd);

  /* Build the ifield table.  */
  build_ifield_table (cd);

  /* Determine which operands are used by MACH/ISA.  */
  build_operand_table (cd);

  /* Build the instruction table.  */
  build_insn_table (cd);
}

d1723 1
a1723 17
   It's much like opening a file, and must be the first function called.
   The arguments are a set of (type/value) pairs, terminated with
   CGEN_CPU_OPEN_END.

   Currently supported values:
   CGEN_CPU_OPEN_ISAS:    bitmap of values in enum isa_attr
   CGEN_CPU_OPEN_MACHS:   bitmap of values in enum mach_attr
   CGEN_CPU_OPEN_BFDMACH: specify 1 mach using bfd name
   CGEN_CPU_OPEN_ENDIAN:  specify endian choice
   CGEN_CPU_OPEN_END:     terminates arguments

   ??? Simultaneous multiple isas might not make sense, but it's not (yet)
   precluded.

   ??? We only support ISO C stdargs here, not K&R.
   Laziness, plus experiment to see if anything requires K&R - eventually
   K&R will no longer be supported - e.g. GDB is currently trying this.  */
d1726 3
a1728 1
i960_cgen_cpu_open (enum cgen_cpu_open_arg arg_type, ...)
a1731 4
  unsigned int isas = 0;  /* 0 = "unspecified" */
  unsigned int machs = 0; /* 0 = "unspecified" */
  enum cgen_endian endian = CGEN_ENDIAN_UNKNOWN;
  va_list ap;
d1741 1
a1741 49
  va_start (ap, arg_type);
  while (arg_type != CGEN_CPU_OPEN_END)
    {
      switch (arg_type)
	{
	case CGEN_CPU_OPEN_ISAS :
	  isas = va_arg (ap, unsigned int);
	  break;
	case CGEN_CPU_OPEN_MACHS :
	  machs = va_arg (ap, unsigned int);
	  break;
	case CGEN_CPU_OPEN_BFDMACH :
	  {
	    const char *name = va_arg (ap, const char *);
	    const CGEN_MACH *mach =
	      lookup_mach_via_bfd_name (i960_cgen_mach_table, name);

	    machs |= mach->num << 1;
	    break;
	  }
	case CGEN_CPU_OPEN_ENDIAN :
	  endian = va_arg (ap, enum cgen_endian);
	  break;
	default :
	  fprintf (stderr, "i960_cgen_cpu_open: unsupported argument `%d'\n",
		   arg_type);
	  abort (); /* ??? return NULL? */
	}
      arg_type = va_arg (ap, enum cgen_cpu_open_arg);
    }
  va_end (ap);

  /* mach unspecified means "all" */
  if (machs == 0)
    machs = (1 << MAX_MACHS) - 1;
  /* base mach is always selected */
  machs |= 1;
  /* isa unspecified means "all" */
  if (isas == 0)
    isas = (1 << MAX_ISAS) - 1;
  if (endian == CGEN_ENDIAN_UNKNOWN)
    {
      /* ??? If target has only one, could have a default.  */
      fprintf (stderr, "i960_cgen_cpu_open: no endianness specified\n");
      abort ();
    }

  cd->isas = isas;
  cd->machs = machs;
d1749 5
a1753 3
  /* Table (re)builder.  */
  cd->rebuild_tables = i960_cgen_rebuild_tables;
  i960_cgen_rebuild_tables (cd);
d1755 1
a1755 2
  return (CGEN_CPU_DESC) cd;
}
d1757 1
a1757 2
/* Cover fn to i960_cgen_cpu_open to handle the simple case of 1 isa, 1 mach.
   MACH_NAME is the bfd name of the mach.  */
d1759 13
a1771 8
CGEN_CPU_DESC
i960_cgen_cpu_open_1 (mach_name, endian)
     const char *mach_name;
     enum cgen_endian endian;
{
  return i960_cgen_cpu_open (CGEN_CPU_OPEN_BFDMACH, mach_name,
			       CGEN_CPU_OPEN_ENDIAN, endian,
			       CGEN_CPU_OPEN_END);
d1774 1
a1774 4
/* Close a cpu table.
   ??? This can live in a machine independent file, but there's currently
   no place to put this file (there's no libcgen).  libopcodes is the wrong
   place as some simulator ports use this but they don't use libopcodes.  */
a1781 2
  if (cd->hw_table.entries)
    free ((CGEN_HW_ENTRY *) cd->hw_table.entries);
@


1.1.1.3
log
@import gdb-19990504 snapshot
@
text
@d1886 2
a1887 1
/* Subroutine of i960_cgen_cpu_open to rebuild the tables.  */
@

