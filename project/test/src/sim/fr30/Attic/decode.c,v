head	1.6;
access;
symbols
	gdb_6_3-20041109-release:1.5
	gdb_6_3-branch:1.5.0.66
	gdb_6_3-20041019-branchpoint:1.5
	drow_intercu-merge-20040921:1.5
	drow_intercu-merge-20040915:1.5
	jimb-gdb_6_2-e500-branch:1.5.0.68
	jimb-gdb_6_2-e500-branchpoint:1.5
	gdb_6_2-20040730-release:1.5
	gdb_6_2-branch:1.5.0.64
	gdb_6_2-2004-07-10-gmt-branchpoint:1.5
	gdb_6_1_1-20040616-release:1.5
	gdb_6_1-2004-04-05-release:1.5
	drow_intercu-merge-20040402:1.5
	drow_intercu-merge-20040327:1.5
	ezannoni_pie-20040323-branch:1.5.0.62
	ezannoni_pie-20040323-branchpoint:1.5
	cagney_tramp-20040321-mergepoint:1.5
	cagney_tramp-20040309-branch:1.5.0.60
	cagney_tramp-20040309-branchpoint:1.5
	gdb_6_1-branch:1.5.0.58
	gdb_6_1-2004-03-01-gmt-branchpoint:1.5
	drow_intercu-20040221-branch:1.5.0.56
	drow_intercu-20040221-branchpoint:1.5
	cagney_bfdfile-20040213-branch:1.5.0.54
	cagney_bfdfile-20040213-branchpoint:1.5
	drow-cplus-merge-20040208:1.5
	carlton_dictionary-20040126-merge:1.5
	cagney_bigcore-20040122-branch:1.5.0.52
	cagney_bigcore-20040122-branchpoint:1.5
	drow-cplus-merge-20040113:1.5
	drow-cplus-merge-20031224:1.5
	drow-cplus-merge-20031220:1.5
	carlton_dictionary-20031215-merge:1.5
	drow-cplus-merge-20031214:1.5
	carlton-dictionary-20031111-merge:1.5
	gdb_6_0-2003-10-04-release:1.5
	kettenis_sparc-20030918-branch:1.5.0.50
	kettenis_sparc-20030918-branchpoint:1.5
	carlton_dictionary-20030917-merge:1.5
	ezannoni_pie-20030916-branchpoint:1.5
	ezannoni_pie-20030916-branch:1.5.0.48
	cagney_x86i386-20030821-branch:1.5.0.46
	cagney_x86i386-20030821-branchpoint:1.5
	carlton_dictionary-20030805-merge:1.5
	carlton_dictionary-20030627-merge:1.5
	gdb_6_0-branch:1.5.0.44
	gdb_6_0-2003-06-23-branchpoint:1.5
	jimb-ppc64-linux-20030613-branch:1.5.0.42
	jimb-ppc64-linux-20030613-branchpoint:1.5
	cagney_convert-20030606-branch:1.5.0.40
	cagney_convert-20030606-branchpoint:1.5
	cagney_writestrings-20030508-branch:1.5.0.38
	cagney_writestrings-20030508-branchpoint:1.5
	jimb-ppc64-linux-20030528-branch:1.5.0.36
	jimb-ppc64-linux-20030528-branchpoint:1.5
	carlton_dictionary-20030523-merge:1.5
	cagney_fileio-20030521-branch:1.5.0.34
	cagney_fileio-20030521-branchpoint:1.5
	kettenis_i386newframe-20030517-mergepoint:1.5
	jimb-ppc64-linux-20030509-branch:1.5.0.32
	jimb-ppc64-linux-20030509-branchpoint:1.5
	kettenis_i386newframe-20030504-mergepoint:1.5
	carlton_dictionary-20030430-merge:1.5
	kettenis_i386newframe-20030419-branch:1.5.0.30
	kettenis_i386newframe-20030419-branchpoint:1.5
	carlton_dictionary-20030416-merge:1.5
	cagney_frameaddr-20030409-mergepoint:1.5
	kettenis_i386newframe-20030406-branch:1.5.0.28
	kettenis_i386newframe-20030406-branchpoint:1.5
	cagney_frameaddr-20030403-branchpoint:1.5
	cagney_frameaddr-20030403-branch:1.5.0.26
	cagney_framebase-20030330-mergepoint:1.5
	cagney_framebase-20030326-branch:1.5.0.24
	cagney_framebase-20030326-branchpoint:1.5
	cagney_lazyid-20030317-branch:1.5.0.22
	cagney_lazyid-20030317-branchpoint:1.5
	kettenis-i386newframe-20030316-mergepoint:1.5
	offbyone-20030313-branch:1.5.0.20
	offbyone-20030313-branchpoint:1.5
	kettenis-i386newframe-20030308-branch:1.5.0.18
	kettenis-i386newframe-20030308-branchpoint:1.5
	carlton_dictionary-20030305-merge:1.5
	cagney_offbyone-20030303-branch:1.5.0.16
	cagney_offbyone-20030303-branchpoint:1.5
	carlton_dictionary-20030207-merge:1.5
	interps-20030202-branch:1.5.0.14
	interps-20030202-branchpoint:1.5
	cagney-unwind-20030108-branch:1.5.0.12
	cagney-unwind-20030108-branchpoint:1.5
	carlton_dictionary-20021223-merge:1.5
	gdb_5_3-2002-12-12-release:1.5
	carlton_dictionary-20021115-merge:1.5
	kseitz_interps-20021105-merge:1.5
	kseitz_interps-20021103-merge:1.5
	drow-cplus-merge-20021020:1.5
	drow-cplus-merge-20021025:1.5
	carlton_dictionary-20021025-merge:1.5
	carlton_dictionary-20021011-merge:1.5
	drow-cplus-branch:1.5.0.10
	drow-cplus-branchpoint:1.5
	kseitz_interps-20020930-merge:1.5
	carlton_dictionary-20020927-merge:1.5
	carlton_dictionary-branch:1.5.0.8
	carlton_dictionary-20020920-branchpoint:1.5
	gdb_5_3-branch:1.5.0.6
	gdb_5_3-2002-09-04-branchpoint:1.5
	kseitz_interps-20020829-merge:1.5
	cagney_sysregs-20020825-branch:1.5.0.4
	cagney_sysregs-20020825-branchpoint:1.5
	readline_4_3-import-branch:1.5.0.2
	readline_4_3-import-branchpoint:1.5
	gdb_5_2_1-2002-07-23-release:1.4
	kseitz_interps-20020528-branch:1.4.0.8
	kseitz_interps-20020528-branchpoint:1.4
	cagney_regbuf-20020515-branch:1.4.0.6
	cagney_regbuf-20020515-branchpoint:1.4
	jimb-macro-020506-branch:1.4.0.4
	jimb-macro-020506-branchpoint:1.4
	gdb_5_2-2002-04-29-release:1.4
	gdb_5_2-branch:1.4.0.2
	gdb_5_2-2002-03-03-branchpoint:1.4
	gdb_5_1_1-2002-01-24-release:1.3
	gdb_5_1_0_1-2002-01-03-release:1.3
	gdb_5_1_0_1-2002-01-03-branch:1.3.0.6
	gdb_5_1_0_1-2002-01-03-branchpoint:1.3
	gdb_5_1-2001-11-21-release:1.3
	gdb_s390-2001-09-26-branch:1.3.0.4
	gdb_s390-2001-09-26-branchpoint:1.3
	gdb_5_1-2001-07-29-branch:1.3.0.2
	gdb_5_1-2001-07-29-branchpoint:1.3
	insight-precleanup-2001-01-01:1.2
	gdb-premipsmulti-2000-06-06-branch:1.1.1.4.0.4
	gdb-premipsmulti-2000-06-06-branchpoint:1.1.1.4
	gdb_5_0-2000-05-19-release:1.1.1.4
	gdb_4_18_2-2000-05-18-release:1.1.1.4
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.4
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.4
	gdb_5_0-2000-04-10-branch:1.1.1.4.0.2
	gdb_5_0-2000-04-10-branchpoint:1.1.1.4
	repo-unification-2000-02-06:1.1.1.4
	gdb-2000-02-04:1.1.1.4
	gdb-2000-02-02:1.1.1.4
	gdb-2000-02-01:1.1.1.4
	gdb-2000-01-31:1.1.1.4
	gdb-2000-01-26:1.1.1.4
	gdb-2000-01-24:1.1.1.4
	gdb-2000-01-17:1.1.1.4
	gdb-2000-01-10:1.1.1.4
	gdb-2000-01-05:1.1.1.4
	gdb-1999-12-21:1.1.1.4
	gdb-1999-12-13:1.1.1.4
	gdb-1999-12-07:1.1.1.4
	gdb-1999-12-06:1.1.1.4
	gdb-1999-11-16:1.1.1.4
	gdb-1999-11-08:1.1.1.4
	gdb-1999-11-01:1.1.1.4
	gdb-1999-10-25:1.1.1.4
	gdb-1999-10-18:1.1.1.4
	gdb-1999-10-11:1.1.1.4
	gdb-1999-10-04:1.1.1.4
	gdb-1999-09-28:1.1.1.4
	gdb-1999-09-21:1.1.1.4
	gdb-1999-09-13:1.1.1.4
	gdb-1999-09-08:1.1.1.4
	gdb-1999-08-30:1.1.1.4
	gdb-1999-08-23:1.1.1.4
	gdb-1999-08-16:1.1.1.4
	gdb-1999-08-09:1.1.1.4
	gdb-1999-08-02:1.1.1.3
	gdb-1999-07-26:1.1.1.3
	gdb-1999-07-19:1.1.1.3
	gdb-1999-07-12:1.1.1.3
	gdb-post-reformat-19990707:1.1.1.3
	gdb-1999-07-07-post-reformat-snapshot:1.1.1.3
	gdb-pre-reformat-19990707:1.1.1.3
	gdb-1999-07-07:1.1.1.3
	gdb-1999-07-05:1.1.1.2
	gdb-1999-06-28:1.1.1.2
	gdb-1999-06-21:1.1.1.2
	gdb-1999-06-14:1.1.1.2
	gdb-1999-06-07:1.1.1.2
	gdb-1999-06-01:1.1.1.2
	gdb-4_18-branch:1.1.1.1.0.2
	gdb-4_18-release:1.1.1.1
	gdb-1999-05-25:1.1.1.2
	gdb-1999-05-19:1.1.1.2
	gdb-1999-05-10:1.1.1.2
	gdb-19990504:1.1.1.2
	gdb-19990422:1.1.1.2
	SNAPSHOT:1.1.1
	gdb-4_18:1.1.1.1
	GDB_4_18:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.6
date	2004.11.12.16.45.26;	author cagney;	state dead;
branches;
next	1.5;

1.5
date	2002.07.16.14.30.13;	author cagney;	state Exp;
branches;
next	1.4;

1.4
date	2001.11.14.19.50.01;	author brolley;	state Exp;
branches
	1.4.8.1;
next	1.3;

1.3
date	2001.03.05.16.00.16;	author brolley;	state Exp;
branches;
next	1.2;

1.2
date	2000.08.28.18.19.41;	author brolley;	state Exp;
branches;
next	1.1;

1.1
date	99.04.16.01.35.01;	author shebs;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.04.16.01.35.01;	author shebs;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.04.26.18.32.10;	author shebs;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	99.07.07.17.31.30;	author jsm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	99.08.09.21.36.12;	author jsm;	state Exp;
branches;
next	;

1.4.8.1
date	2002.07.22.21.47.25;	author kseitz;	state Exp;
branches;
next	;


desc
@@


1.6
log
@2004-11-12  Andrew Cagney  <cagney@@gnu.org>

	* d30v, fr30, mn10200, z8k: Delete directory.
@
text
@// OBSOLETE /* Simulator instruction decoder for fr30bf.
// OBSOLETE 
// OBSOLETE THIS FILE IS MACHINE GENERATED WITH CGEN.
// OBSOLETE 
// OBSOLETE Copyright 1996, 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.
// OBSOLETE 
// OBSOLETE This file is part of the GNU simulators.
// OBSOLETE 
// OBSOLETE This program is free software; you can redistribute it and/or modify
// OBSOLETE it under the terms of the GNU General Public License as published by
// OBSOLETE the Free Software Foundation; either version 2, or (at your option)
// OBSOLETE any later version.
// OBSOLETE 
// OBSOLETE This program is distributed in the hope that it will be useful,
// OBSOLETE but WITHOUT ANY WARRANTY; without even the implied warranty of
// OBSOLETE MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// OBSOLETE GNU General Public License for more details.
// OBSOLETE 
// OBSOLETE You should have received a copy of the GNU General Public License along
// OBSOLETE with this program; if not, write to the Free Software Foundation, Inc.,
// OBSOLETE 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
// OBSOLETE 
// OBSOLETE */
// OBSOLETE 
// OBSOLETE #define WANT_CPU fr30bf
// OBSOLETE #define WANT_CPU_FR30BF
// OBSOLETE 
// OBSOLETE #include "sim-main.h"
// OBSOLETE #include "sim-assert.h"
// OBSOLETE 
// OBSOLETE /* The instruction descriptor array.
// OBSOLETE    This is computed at runtime.  Space for it is not malloc'd to save a
// OBSOLETE    teensy bit of cpu in the decoder.  Moving it to malloc space is trivial
// OBSOLETE    but won't be done until necessary (we don't currently support the runtime
// OBSOLETE    addition of instructions nor an SMP machine with different cpus).  */
// OBSOLETE static IDESC fr30bf_insn_data[FR30BF_INSN_XCHB + 1];
// OBSOLETE 
// OBSOLETE /* Commas between elements are contained in the macros.
// OBSOLETE    Some of these are conditionally compiled out.  */
// OBSOLETE 
// OBSOLETE static const struct insn_sem fr30bf_insn_sem[] =
// OBSOLETE {
// OBSOLETE   { VIRTUAL_INSN_X_INVALID, FR30BF_INSN_X_INVALID, FR30BF_SFMT_EMPTY },
// OBSOLETE   { VIRTUAL_INSN_X_AFTER, FR30BF_INSN_X_AFTER, FR30BF_SFMT_EMPTY },
// OBSOLETE   { VIRTUAL_INSN_X_BEFORE, FR30BF_INSN_X_BEFORE, FR30BF_SFMT_EMPTY },
// OBSOLETE   { VIRTUAL_INSN_X_CTI_CHAIN, FR30BF_INSN_X_CTI_CHAIN, FR30BF_SFMT_EMPTY },
// OBSOLETE   { VIRTUAL_INSN_X_CHAIN, FR30BF_INSN_X_CHAIN, FR30BF_SFMT_EMPTY },
// OBSOLETE   { VIRTUAL_INSN_X_BEGIN, FR30BF_INSN_X_BEGIN, FR30BF_SFMT_EMPTY },
// OBSOLETE   { FR30_INSN_ADD, FR30BF_INSN_ADD, FR30BF_SFMT_ADD },
// OBSOLETE   { FR30_INSN_ADDI, FR30BF_INSN_ADDI, FR30BF_SFMT_ADDI },
// OBSOLETE   { FR30_INSN_ADD2, FR30BF_INSN_ADD2, FR30BF_SFMT_ADD2 },
// OBSOLETE   { FR30_INSN_ADDC, FR30BF_INSN_ADDC, FR30BF_SFMT_ADDC },
// OBSOLETE   { FR30_INSN_ADDN, FR30BF_INSN_ADDN, FR30BF_SFMT_ADDN },
// OBSOLETE   { FR30_INSN_ADDNI, FR30BF_INSN_ADDNI, FR30BF_SFMT_ADDNI },
// OBSOLETE   { FR30_INSN_ADDN2, FR30BF_INSN_ADDN2, FR30BF_SFMT_ADDN2 },
// OBSOLETE   { FR30_INSN_SUB, FR30BF_INSN_SUB, FR30BF_SFMT_ADD },
// OBSOLETE   { FR30_INSN_SUBC, FR30BF_INSN_SUBC, FR30BF_SFMT_ADDC },
// OBSOLETE   { FR30_INSN_SUBN, FR30BF_INSN_SUBN, FR30BF_SFMT_ADDN },
// OBSOLETE   { FR30_INSN_CMP, FR30BF_INSN_CMP, FR30BF_SFMT_CMP },
// OBSOLETE   { FR30_INSN_CMPI, FR30BF_INSN_CMPI, FR30BF_SFMT_CMPI },
// OBSOLETE   { FR30_INSN_CMP2, FR30BF_INSN_CMP2, FR30BF_SFMT_CMP2 },
// OBSOLETE   { FR30_INSN_AND, FR30BF_INSN_AND, FR30BF_SFMT_AND },
// OBSOLETE   { FR30_INSN_OR, FR30BF_INSN_OR, FR30BF_SFMT_AND },
// OBSOLETE   { FR30_INSN_EOR, FR30BF_INSN_EOR, FR30BF_SFMT_AND },
// OBSOLETE   { FR30_INSN_ANDM, FR30BF_INSN_ANDM, FR30BF_SFMT_ANDM },
// OBSOLETE   { FR30_INSN_ANDH, FR30BF_INSN_ANDH, FR30BF_SFMT_ANDH },
// OBSOLETE   { FR30_INSN_ANDB, FR30BF_INSN_ANDB, FR30BF_SFMT_ANDB },
// OBSOLETE   { FR30_INSN_ORM, FR30BF_INSN_ORM, FR30BF_SFMT_ANDM },
// OBSOLETE   { FR30_INSN_ORH, FR30BF_INSN_ORH, FR30BF_SFMT_ANDH },
// OBSOLETE   { FR30_INSN_ORB, FR30BF_INSN_ORB, FR30BF_SFMT_ANDB },
// OBSOLETE   { FR30_INSN_EORM, FR30BF_INSN_EORM, FR30BF_SFMT_ANDM },
// OBSOLETE   { FR30_INSN_EORH, FR30BF_INSN_EORH, FR30BF_SFMT_ANDH },
// OBSOLETE   { FR30_INSN_EORB, FR30BF_INSN_EORB, FR30BF_SFMT_ANDB },
// OBSOLETE   { FR30_INSN_BANDL, FR30BF_INSN_BANDL, FR30BF_SFMT_BANDL },
// OBSOLETE   { FR30_INSN_BORL, FR30BF_INSN_BORL, FR30BF_SFMT_BANDL },
// OBSOLETE   { FR30_INSN_BEORL, FR30BF_INSN_BEORL, FR30BF_SFMT_BANDL },
// OBSOLETE   { FR30_INSN_BANDH, FR30BF_INSN_BANDH, FR30BF_SFMT_BANDL },
// OBSOLETE   { FR30_INSN_BORH, FR30BF_INSN_BORH, FR30BF_SFMT_BANDL },
// OBSOLETE   { FR30_INSN_BEORH, FR30BF_INSN_BEORH, FR30BF_SFMT_BANDL },
// OBSOLETE   { FR30_INSN_BTSTL, FR30BF_INSN_BTSTL, FR30BF_SFMT_BTSTL },
// OBSOLETE   { FR30_INSN_BTSTH, FR30BF_INSN_BTSTH, FR30BF_SFMT_BTSTL },
// OBSOLETE   { FR30_INSN_MUL, FR30BF_INSN_MUL, FR30BF_SFMT_MUL },
// OBSOLETE   { FR30_INSN_MULU, FR30BF_INSN_MULU, FR30BF_SFMT_MULU },
// OBSOLETE   { FR30_INSN_MULH, FR30BF_INSN_MULH, FR30BF_SFMT_MULH },
// OBSOLETE   { FR30_INSN_MULUH, FR30BF_INSN_MULUH, FR30BF_SFMT_MULH },
// OBSOLETE   { FR30_INSN_DIV0S, FR30BF_INSN_DIV0S, FR30BF_SFMT_DIV0S },
// OBSOLETE   { FR30_INSN_DIV0U, FR30BF_INSN_DIV0U, FR30BF_SFMT_DIV0U },
// OBSOLETE   { FR30_INSN_DIV1, FR30BF_INSN_DIV1, FR30BF_SFMT_DIV1 },
// OBSOLETE   { FR30_INSN_DIV2, FR30BF_INSN_DIV2, FR30BF_SFMT_DIV2 },
// OBSOLETE   { FR30_INSN_DIV3, FR30BF_INSN_DIV3, FR30BF_SFMT_DIV3 },
// OBSOLETE   { FR30_INSN_DIV4S, FR30BF_INSN_DIV4S, FR30BF_SFMT_DIV4S },
// OBSOLETE   { FR30_INSN_LSL, FR30BF_INSN_LSL, FR30BF_SFMT_LSL },
// OBSOLETE   { FR30_INSN_LSLI, FR30BF_INSN_LSLI, FR30BF_SFMT_LSLI },
// OBSOLETE   { FR30_INSN_LSL2, FR30BF_INSN_LSL2, FR30BF_SFMT_LSLI },
// OBSOLETE   { FR30_INSN_LSR, FR30BF_INSN_LSR, FR30BF_SFMT_LSL },
// OBSOLETE   { FR30_INSN_LSRI, FR30BF_INSN_LSRI, FR30BF_SFMT_LSLI },
// OBSOLETE   { FR30_INSN_LSR2, FR30BF_INSN_LSR2, FR30BF_SFMT_LSLI },
// OBSOLETE   { FR30_INSN_ASR, FR30BF_INSN_ASR, FR30BF_SFMT_LSL },
// OBSOLETE   { FR30_INSN_ASRI, FR30BF_INSN_ASRI, FR30BF_SFMT_LSLI },
// OBSOLETE   { FR30_INSN_ASR2, FR30BF_INSN_ASR2, FR30BF_SFMT_LSLI },
// OBSOLETE   { FR30_INSN_LDI8, FR30BF_INSN_LDI8, FR30BF_SFMT_LDI8 },
// OBSOLETE   { FR30_INSN_LDI20, FR30BF_INSN_LDI20, FR30BF_SFMT_LDI20 },
// OBSOLETE   { FR30_INSN_LDI32, FR30BF_INSN_LDI32, FR30BF_SFMT_LDI32 },
// OBSOLETE   { FR30_INSN_LD, FR30BF_INSN_LD, FR30BF_SFMT_LD },
// OBSOLETE   { FR30_INSN_LDUH, FR30BF_INSN_LDUH, FR30BF_SFMT_LDUH },
// OBSOLETE   { FR30_INSN_LDUB, FR30BF_INSN_LDUB, FR30BF_SFMT_LDUB },
// OBSOLETE   { FR30_INSN_LDR13, FR30BF_INSN_LDR13, FR30BF_SFMT_LDR13 },
// OBSOLETE   { FR30_INSN_LDR13UH, FR30BF_INSN_LDR13UH, FR30BF_SFMT_LDR13UH },
// OBSOLETE   { FR30_INSN_LDR13UB, FR30BF_INSN_LDR13UB, FR30BF_SFMT_LDR13UB },
// OBSOLETE   { FR30_INSN_LDR14, FR30BF_INSN_LDR14, FR30BF_SFMT_LDR14 },
// OBSOLETE   { FR30_INSN_LDR14UH, FR30BF_INSN_LDR14UH, FR30BF_SFMT_LDR14UH },
// OBSOLETE   { FR30_INSN_LDR14UB, FR30BF_INSN_LDR14UB, FR30BF_SFMT_LDR14UB },
// OBSOLETE   { FR30_INSN_LDR15, FR30BF_INSN_LDR15, FR30BF_SFMT_LDR15 },
// OBSOLETE   { FR30_INSN_LDR15GR, FR30BF_INSN_LDR15GR, FR30BF_SFMT_LDR15GR },
// OBSOLETE   { FR30_INSN_LDR15DR, FR30BF_INSN_LDR15DR, FR30BF_SFMT_LDR15DR },
// OBSOLETE   { FR30_INSN_LDR15PS, FR30BF_INSN_LDR15PS, FR30BF_SFMT_LDR15PS },
// OBSOLETE   { FR30_INSN_ST, FR30BF_INSN_ST, FR30BF_SFMT_ST },
// OBSOLETE   { FR30_INSN_STH, FR30BF_INSN_STH, FR30BF_SFMT_STH },
// OBSOLETE   { FR30_INSN_STB, FR30BF_INSN_STB, FR30BF_SFMT_STB },
// OBSOLETE   { FR30_INSN_STR13, FR30BF_INSN_STR13, FR30BF_SFMT_STR13 },
// OBSOLETE   { FR30_INSN_STR13H, FR30BF_INSN_STR13H, FR30BF_SFMT_STR13H },
// OBSOLETE   { FR30_INSN_STR13B, FR30BF_INSN_STR13B, FR30BF_SFMT_STR13B },
// OBSOLETE   { FR30_INSN_STR14, FR30BF_INSN_STR14, FR30BF_SFMT_STR14 },
// OBSOLETE   { FR30_INSN_STR14H, FR30BF_INSN_STR14H, FR30BF_SFMT_STR14H },
// OBSOLETE   { FR30_INSN_STR14B, FR30BF_INSN_STR14B, FR30BF_SFMT_STR14B },
// OBSOLETE   { FR30_INSN_STR15, FR30BF_INSN_STR15, FR30BF_SFMT_STR15 },
// OBSOLETE   { FR30_INSN_STR15GR, FR30BF_INSN_STR15GR, FR30BF_SFMT_STR15GR },
// OBSOLETE   { FR30_INSN_STR15DR, FR30BF_INSN_STR15DR, FR30BF_SFMT_STR15DR },
// OBSOLETE   { FR30_INSN_STR15PS, FR30BF_INSN_STR15PS, FR30BF_SFMT_STR15PS },
// OBSOLETE   { FR30_INSN_MOV, FR30BF_INSN_MOV, FR30BF_SFMT_MOV },
// OBSOLETE   { FR30_INSN_MOVDR, FR30BF_INSN_MOVDR, FR30BF_SFMT_MOVDR },
// OBSOLETE   { FR30_INSN_MOVPS, FR30BF_INSN_MOVPS, FR30BF_SFMT_MOVPS },
// OBSOLETE   { FR30_INSN_MOV2DR, FR30BF_INSN_MOV2DR, FR30BF_SFMT_MOV2DR },
// OBSOLETE   { FR30_INSN_MOV2PS, FR30BF_INSN_MOV2PS, FR30BF_SFMT_MOV2PS },
// OBSOLETE   { FR30_INSN_JMP, FR30BF_INSN_JMP, FR30BF_SFMT_JMP },
// OBSOLETE   { FR30_INSN_JMPD, FR30BF_INSN_JMPD, FR30BF_SFMT_JMP },
// OBSOLETE   { FR30_INSN_CALLR, FR30BF_INSN_CALLR, FR30BF_SFMT_CALLR },
// OBSOLETE   { FR30_INSN_CALLRD, FR30BF_INSN_CALLRD, FR30BF_SFMT_CALLR },
// OBSOLETE   { FR30_INSN_CALL, FR30BF_INSN_CALL, FR30BF_SFMT_CALL },
// OBSOLETE   { FR30_INSN_CALLD, FR30BF_INSN_CALLD, FR30BF_SFMT_CALL },
// OBSOLETE   { FR30_INSN_RET, FR30BF_INSN_RET, FR30BF_SFMT_RET },
// OBSOLETE   { FR30_INSN_RET_D, FR30BF_INSN_RET_D, FR30BF_SFMT_RET },
// OBSOLETE   { FR30_INSN_INT, FR30BF_INSN_INT, FR30BF_SFMT_INT },
// OBSOLETE   { FR30_INSN_INTE, FR30BF_INSN_INTE, FR30BF_SFMT_INTE },
// OBSOLETE   { FR30_INSN_RETI, FR30BF_INSN_RETI, FR30BF_SFMT_RETI },
// OBSOLETE   { FR30_INSN_BRAD, FR30BF_INSN_BRAD, FR30BF_SFMT_BRAD },
// OBSOLETE   { FR30_INSN_BRA, FR30BF_INSN_BRA, FR30BF_SFMT_BRAD },
// OBSOLETE   { FR30_INSN_BNOD, FR30BF_INSN_BNOD, FR30BF_SFMT_BNOD },
// OBSOLETE   { FR30_INSN_BNO, FR30BF_INSN_BNO, FR30BF_SFMT_BNOD },
// OBSOLETE   { FR30_INSN_BEQD, FR30BF_INSN_BEQD, FR30BF_SFMT_BEQD },
// OBSOLETE   { FR30_INSN_BEQ, FR30BF_INSN_BEQ, FR30BF_SFMT_BEQD },
// OBSOLETE   { FR30_INSN_BNED, FR30BF_INSN_BNED, FR30BF_SFMT_BEQD },
// OBSOLETE   { FR30_INSN_BNE, FR30BF_INSN_BNE, FR30BF_SFMT_BEQD },
// OBSOLETE   { FR30_INSN_BCD, FR30BF_INSN_BCD, FR30BF_SFMT_BCD },
// OBSOLETE   { FR30_INSN_BC, FR30BF_INSN_BC, FR30BF_SFMT_BCD },
// OBSOLETE   { FR30_INSN_BNCD, FR30BF_INSN_BNCD, FR30BF_SFMT_BCD },
// OBSOLETE   { FR30_INSN_BNC, FR30BF_INSN_BNC, FR30BF_SFMT_BCD },
// OBSOLETE   { FR30_INSN_BND, FR30BF_INSN_BND, FR30BF_SFMT_BND },
// OBSOLETE   { FR30_INSN_BN, FR30BF_INSN_BN, FR30BF_SFMT_BND },
// OBSOLETE   { FR30_INSN_BPD, FR30BF_INSN_BPD, FR30BF_SFMT_BND },
// OBSOLETE   { FR30_INSN_BP, FR30BF_INSN_BP, FR30BF_SFMT_BND },
// OBSOLETE   { FR30_INSN_BVD, FR30BF_INSN_BVD, FR30BF_SFMT_BVD },
// OBSOLETE   { FR30_INSN_BV, FR30BF_INSN_BV, FR30BF_SFMT_BVD },
// OBSOLETE   { FR30_INSN_BNVD, FR30BF_INSN_BNVD, FR30BF_SFMT_BVD },
// OBSOLETE   { FR30_INSN_BNV, FR30BF_INSN_BNV, FR30BF_SFMT_BVD },
// OBSOLETE   { FR30_INSN_BLTD, FR30BF_INSN_BLTD, FR30BF_SFMT_BLTD },
// OBSOLETE   { FR30_INSN_BLT, FR30BF_INSN_BLT, FR30BF_SFMT_BLTD },
// OBSOLETE   { FR30_INSN_BGED, FR30BF_INSN_BGED, FR30BF_SFMT_BLTD },
// OBSOLETE   { FR30_INSN_BGE, FR30BF_INSN_BGE, FR30BF_SFMT_BLTD },
// OBSOLETE   { FR30_INSN_BLED, FR30BF_INSN_BLED, FR30BF_SFMT_BLED },
// OBSOLETE   { FR30_INSN_BLE, FR30BF_INSN_BLE, FR30BF_SFMT_BLED },
// OBSOLETE   { FR30_INSN_BGTD, FR30BF_INSN_BGTD, FR30BF_SFMT_BLED },
// OBSOLETE   { FR30_INSN_BGT, FR30BF_INSN_BGT, FR30BF_SFMT_BLED },
// OBSOLETE   { FR30_INSN_BLSD, FR30BF_INSN_BLSD, FR30BF_SFMT_BLSD },
// OBSOLETE   { FR30_INSN_BLS, FR30BF_INSN_BLS, FR30BF_SFMT_BLSD },
// OBSOLETE   { FR30_INSN_BHID, FR30BF_INSN_BHID, FR30BF_SFMT_BLSD },
// OBSOLETE   { FR30_INSN_BHI, FR30BF_INSN_BHI, FR30BF_SFMT_BLSD },
// OBSOLETE   { FR30_INSN_DMOVR13, FR30BF_INSN_DMOVR13, FR30BF_SFMT_DMOVR13 },
// OBSOLETE   { FR30_INSN_DMOVR13H, FR30BF_INSN_DMOVR13H, FR30BF_SFMT_DMOVR13H },
// OBSOLETE   { FR30_INSN_DMOVR13B, FR30BF_INSN_DMOVR13B, FR30BF_SFMT_DMOVR13B },
// OBSOLETE   { FR30_INSN_DMOVR13PI, FR30BF_INSN_DMOVR13PI, FR30BF_SFMT_DMOVR13PI },
// OBSOLETE   { FR30_INSN_DMOVR13PIH, FR30BF_INSN_DMOVR13PIH, FR30BF_SFMT_DMOVR13PIH },
// OBSOLETE   { FR30_INSN_DMOVR13PIB, FR30BF_INSN_DMOVR13PIB, FR30BF_SFMT_DMOVR13PIB },
// OBSOLETE   { FR30_INSN_DMOVR15PI, FR30BF_INSN_DMOVR15PI, FR30BF_SFMT_DMOVR15PI },
// OBSOLETE   { FR30_INSN_DMOV2R13, FR30BF_INSN_DMOV2R13, FR30BF_SFMT_DMOV2R13 },
// OBSOLETE   { FR30_INSN_DMOV2R13H, FR30BF_INSN_DMOV2R13H, FR30BF_SFMT_DMOV2R13H },
// OBSOLETE   { FR30_INSN_DMOV2R13B, FR30BF_INSN_DMOV2R13B, FR30BF_SFMT_DMOV2R13B },
// OBSOLETE   { FR30_INSN_DMOV2R13PI, FR30BF_INSN_DMOV2R13PI, FR30BF_SFMT_DMOV2R13PI },
// OBSOLETE   { FR30_INSN_DMOV2R13PIH, FR30BF_INSN_DMOV2R13PIH, FR30BF_SFMT_DMOV2R13PIH },
// OBSOLETE   { FR30_INSN_DMOV2R13PIB, FR30BF_INSN_DMOV2R13PIB, FR30BF_SFMT_DMOV2R13PIB },
// OBSOLETE   { FR30_INSN_DMOV2R15PD, FR30BF_INSN_DMOV2R15PD, FR30BF_SFMT_DMOV2R15PD },
// OBSOLETE   { FR30_INSN_LDRES, FR30BF_INSN_LDRES, FR30BF_SFMT_LDRES },
// OBSOLETE   { FR30_INSN_STRES, FR30BF_INSN_STRES, FR30BF_SFMT_LDRES },
// OBSOLETE   { FR30_INSN_COPOP, FR30BF_INSN_COPOP, FR30BF_SFMT_COPOP },
// OBSOLETE   { FR30_INSN_COPLD, FR30BF_INSN_COPLD, FR30BF_SFMT_COPOP },
// OBSOLETE   { FR30_INSN_COPST, FR30BF_INSN_COPST, FR30BF_SFMT_COPOP },
// OBSOLETE   { FR30_INSN_COPSV, FR30BF_INSN_COPSV, FR30BF_SFMT_COPOP },
// OBSOLETE   { FR30_INSN_NOP, FR30BF_INSN_NOP, FR30BF_SFMT_BNOD },
// OBSOLETE   { FR30_INSN_ANDCCR, FR30BF_INSN_ANDCCR, FR30BF_SFMT_ANDCCR },
// OBSOLETE   { FR30_INSN_ORCCR, FR30BF_INSN_ORCCR, FR30BF_SFMT_ANDCCR },
// OBSOLETE   { FR30_INSN_STILM, FR30BF_INSN_STILM, FR30BF_SFMT_STILM },
// OBSOLETE   { FR30_INSN_ADDSP, FR30BF_INSN_ADDSP, FR30BF_SFMT_ADDSP },
// OBSOLETE   { FR30_INSN_EXTSB, FR30BF_INSN_EXTSB, FR30BF_SFMT_EXTSB },
// OBSOLETE   { FR30_INSN_EXTUB, FR30BF_INSN_EXTUB, FR30BF_SFMT_EXTUB },
// OBSOLETE   { FR30_INSN_EXTSH, FR30BF_INSN_EXTSH, FR30BF_SFMT_EXTSH },
// OBSOLETE   { FR30_INSN_EXTUH, FR30BF_INSN_EXTUH, FR30BF_SFMT_EXTUH },
// OBSOLETE   { FR30_INSN_LDM0, FR30BF_INSN_LDM0, FR30BF_SFMT_LDM0 },
// OBSOLETE   { FR30_INSN_LDM1, FR30BF_INSN_LDM1, FR30BF_SFMT_LDM1 },
// OBSOLETE   { FR30_INSN_STM0, FR30BF_INSN_STM0, FR30BF_SFMT_STM0 },
// OBSOLETE   { FR30_INSN_STM1, FR30BF_INSN_STM1, FR30BF_SFMT_STM1 },
// OBSOLETE   { FR30_INSN_ENTER, FR30BF_INSN_ENTER, FR30BF_SFMT_ENTER },
// OBSOLETE   { FR30_INSN_LEAVE, FR30BF_INSN_LEAVE, FR30BF_SFMT_LEAVE },
// OBSOLETE   { FR30_INSN_XCHB, FR30BF_INSN_XCHB, FR30BF_SFMT_XCHB },
// OBSOLETE };
// OBSOLETE 
// OBSOLETE static const struct insn_sem fr30bf_insn_sem_invalid = {
// OBSOLETE   VIRTUAL_INSN_X_INVALID, FR30BF_INSN_X_INVALID, FR30BF_SFMT_EMPTY
// OBSOLETE };
// OBSOLETE 
// OBSOLETE /* Initialize an IDESC from the compile-time computable parts.  */
// OBSOLETE 
// OBSOLETE static INLINE void
// OBSOLETE init_idesc (SIM_CPU *cpu, IDESC *id, const struct insn_sem *t)
// OBSOLETE {
// OBSOLETE   const CGEN_INSN *insn_table = CGEN_CPU_INSN_TABLE (CPU_CPU_DESC (cpu))->init_entries;
// OBSOLETE 
// OBSOLETE   id->num = t->index;
// OBSOLETE   id->sfmt = t->sfmt;
// OBSOLETE   if ((int) t->type <= 0)
// OBSOLETE     id->idata = & cgen_virtual_insn_table[- (int) t->type];
// OBSOLETE   else
// OBSOLETE     id->idata = & insn_table[t->type];
// OBSOLETE   id->attrs = CGEN_INSN_ATTRS (id->idata);
// OBSOLETE   /* Oh my god, a magic number.  */
// OBSOLETE   id->length = CGEN_INSN_BITSIZE (id->idata) / 8;
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   id->timing = & MODEL_TIMING (CPU_MODEL (cpu)) [t->index];
// OBSOLETE   {
// OBSOLETE     SIM_DESC sd = CPU_STATE (cpu);
// OBSOLETE     SIM_ASSERT (t->index == id->timing->num);
// OBSOLETE   }
// OBSOLETE #endif
// OBSOLETE 
// OBSOLETE   /* Semantic pointers are initialized elsewhere.  */
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* Initialize the instruction descriptor table.  */
// OBSOLETE 
// OBSOLETE void
// OBSOLETE fr30bf_init_idesc_table (SIM_CPU *cpu)
// OBSOLETE {
// OBSOLETE   IDESC *id,*tabend;
// OBSOLETE   const struct insn_sem *t,*tend;
// OBSOLETE   int tabsize = sizeof (fr30bf_insn_data) / sizeof (IDESC);
// OBSOLETE   IDESC *table = fr30bf_insn_data;
// OBSOLETE 
// OBSOLETE   memset (table, 0, tabsize * sizeof (IDESC));
// OBSOLETE 
// OBSOLETE   /* First set all entries to the `invalid insn'.  */
// OBSOLETE   t = & fr30bf_insn_sem_invalid;
// OBSOLETE   for (id = table, tabend = table + tabsize; id < tabend; ++id)
// OBSOLETE     init_idesc (cpu, id, t);
// OBSOLETE 
// OBSOLETE   /* Now fill in the values for the chosen cpu.  */
// OBSOLETE   for (t = fr30bf_insn_sem, tend = t + sizeof (fr30bf_insn_sem) / sizeof (*t);
// OBSOLETE        t != tend; ++t)
// OBSOLETE     {
// OBSOLETE       init_idesc (cpu, & table[t->index], t);
// OBSOLETE     }
// OBSOLETE 
// OBSOLETE   /* Link the IDESC table into the cpu.  */
// OBSOLETE   CPU_IDESC (cpu) = table;
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* Given an instruction, return a pointer to its IDESC entry.  */
// OBSOLETE 
// OBSOLETE const IDESC *
// OBSOLETE fr30bf_decode (SIM_CPU *current_cpu, IADDR pc,
// OBSOLETE               CGEN_INSN_INT base_insn,
// OBSOLETE               ARGBUF *abuf)
// OBSOLETE {
// OBSOLETE   /* Result of decoder.  */
// OBSOLETE   FR30BF_INSN_TYPE itype;
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE 
// OBSOLETE     {
// OBSOLETE       unsigned int val = (((insn >> 8) & (255 << 0)));
// OBSOLETE       switch (val)
// OBSOLETE       {
// OBSOLETE       case 0 : itype = FR30BF_INSN_LDR13;goto extract_sfmt_ldr13;
// OBSOLETE       case 1 : itype = FR30BF_INSN_LDR13UH;goto extract_sfmt_ldr13uh;
// OBSOLETE       case 2 : itype = FR30BF_INSN_LDR13UB;goto extract_sfmt_ldr13ub;
// OBSOLETE       case 3 : itype = FR30BF_INSN_LDR15;goto extract_sfmt_ldr15;
// OBSOLETE       case 4 : itype = FR30BF_INSN_LD;goto extract_sfmt_ld;
// OBSOLETE       case 5 : itype = FR30BF_INSN_LDUH;goto extract_sfmt_lduh;
// OBSOLETE       case 6 : itype = FR30BF_INSN_LDUB;goto extract_sfmt_ldub;
// OBSOLETE       case 7 :
// OBSOLETE         {
// OBSOLETE           unsigned int val = (((insn >> 6) & (1 << 1)) | ((insn >> 4) & (1 << 0)));
// OBSOLETE           switch (val)
// OBSOLETE           {
// OBSOLETE           case 0 : itype = FR30BF_INSN_LDR15GR;goto extract_sfmt_ldr15gr;
// OBSOLETE           case 1 : itype = FR30BF_INSN_MOV2PS;goto extract_sfmt_mov2ps;
// OBSOLETE           case 2 : itype = FR30BF_INSN_LDR15DR;goto extract_sfmt_ldr15dr;
// OBSOLETE           case 3 : itype = FR30BF_INSN_LDR15PS;goto extract_sfmt_ldr15ps;
// OBSOLETE           default : itype = FR30BF_INSN_X_INVALID; goto extract_sfmt_empty;
// OBSOLETE           }
// OBSOLETE         }
// OBSOLETE       case 8 : itype = FR30BF_INSN_DMOV2R13;goto extract_sfmt_dmov2r13;
// OBSOLETE       case 9 : itype = FR30BF_INSN_DMOV2R13H;goto extract_sfmt_dmov2r13h;
// OBSOLETE       case 10 : itype = FR30BF_INSN_DMOV2R13B;goto extract_sfmt_dmov2r13b;
// OBSOLETE       case 11 : itype = FR30BF_INSN_DMOV2R15PD;goto extract_sfmt_dmov2r15pd;
// OBSOLETE       case 12 : itype = FR30BF_INSN_DMOV2R13PI;goto extract_sfmt_dmov2r13pi;
// OBSOLETE       case 13 : itype = FR30BF_INSN_DMOV2R13PIH;goto extract_sfmt_dmov2r13pih;
// OBSOLETE       case 14 : itype = FR30BF_INSN_DMOV2R13PIB;goto extract_sfmt_dmov2r13pib;
// OBSOLETE       case 15 : itype = FR30BF_INSN_ENTER;goto extract_sfmt_enter;
// OBSOLETE       case 16 : itype = FR30BF_INSN_STR13;goto extract_sfmt_str13;
// OBSOLETE       case 17 : itype = FR30BF_INSN_STR13H;goto extract_sfmt_str13h;
// OBSOLETE       case 18 : itype = FR30BF_INSN_STR13B;goto extract_sfmt_str13b;
// OBSOLETE       case 19 : itype = FR30BF_INSN_STR15;goto extract_sfmt_str15;
// OBSOLETE       case 20 : itype = FR30BF_INSN_ST;goto extract_sfmt_st;
// OBSOLETE       case 21 : itype = FR30BF_INSN_STH;goto extract_sfmt_sth;
// OBSOLETE       case 22 : itype = FR30BF_INSN_STB;goto extract_sfmt_stb;
// OBSOLETE       case 23 :
// OBSOLETE         {
// OBSOLETE           unsigned int val = (((insn >> 6) & (1 << 1)) | ((insn >> 4) & (1 << 0)));
// OBSOLETE           switch (val)
// OBSOLETE           {
// OBSOLETE           case 0 : itype = FR30BF_INSN_STR15GR;goto extract_sfmt_str15gr;
// OBSOLETE           case 1 : itype = FR30BF_INSN_MOVPS;goto extract_sfmt_movps;
// OBSOLETE           case 2 : itype = FR30BF_INSN_STR15DR;goto extract_sfmt_str15dr;
// OBSOLETE           case 3 : itype = FR30BF_INSN_STR15PS;goto extract_sfmt_str15ps;
// OBSOLETE           default : itype = FR30BF_INSN_X_INVALID; goto extract_sfmt_empty;
// OBSOLETE           }
// OBSOLETE         }
// OBSOLETE       case 24 : itype = FR30BF_INSN_DMOVR13;goto extract_sfmt_dmovr13;
// OBSOLETE       case 25 : itype = FR30BF_INSN_DMOVR13H;goto extract_sfmt_dmovr13h;
// OBSOLETE       case 26 : itype = FR30BF_INSN_DMOVR13B;goto extract_sfmt_dmovr13b;
// OBSOLETE       case 27 : itype = FR30BF_INSN_DMOVR15PI;goto extract_sfmt_dmovr15pi;
// OBSOLETE       case 28 : itype = FR30BF_INSN_DMOVR13PI;goto extract_sfmt_dmovr13pi;
// OBSOLETE       case 29 : itype = FR30BF_INSN_DMOVR13PIH;goto extract_sfmt_dmovr13pih;
// OBSOLETE       case 30 : itype = FR30BF_INSN_DMOVR13PIB;goto extract_sfmt_dmovr13pib;
// OBSOLETE       case 31 : itype = FR30BF_INSN_INT;goto extract_sfmt_int;
// OBSOLETE       case 32 : /* fall through */
// OBSOLETE       case 33 : /* fall through */
// OBSOLETE       case 34 : /* fall through */
// OBSOLETE       case 35 : /* fall through */
// OBSOLETE       case 36 : /* fall through */
// OBSOLETE       case 37 : /* fall through */
// OBSOLETE       case 38 : /* fall through */
// OBSOLETE       case 39 : /* fall through */
// OBSOLETE       case 40 : /* fall through */
// OBSOLETE       case 41 : /* fall through */
// OBSOLETE       case 42 : /* fall through */
// OBSOLETE       case 43 : /* fall through */
// OBSOLETE       case 44 : /* fall through */
// OBSOLETE       case 45 : /* fall through */
// OBSOLETE       case 46 : /* fall through */
// OBSOLETE       case 47 : itype = FR30BF_INSN_LDR14;goto extract_sfmt_ldr14;
// OBSOLETE       case 48 : /* fall through */
// OBSOLETE       case 49 : /* fall through */
// OBSOLETE       case 50 : /* fall through */
// OBSOLETE       case 51 : /* fall through */
// OBSOLETE       case 52 : /* fall through */
// OBSOLETE       case 53 : /* fall through */
// OBSOLETE       case 54 : /* fall through */
// OBSOLETE       case 55 : /* fall through */
// OBSOLETE       case 56 : /* fall through */
// OBSOLETE       case 57 : /* fall through */
// OBSOLETE       case 58 : /* fall through */
// OBSOLETE       case 59 : /* fall through */
// OBSOLETE       case 60 : /* fall through */
// OBSOLETE       case 61 : /* fall through */
// OBSOLETE       case 62 : /* fall through */
// OBSOLETE       case 63 : itype = FR30BF_INSN_STR14;goto extract_sfmt_str14;
// OBSOLETE       case 64 : /* fall through */
// OBSOLETE       case 65 : /* fall through */
// OBSOLETE       case 66 : /* fall through */
// OBSOLETE       case 67 : /* fall through */
// OBSOLETE       case 68 : /* fall through */
// OBSOLETE       case 69 : /* fall through */
// OBSOLETE       case 70 : /* fall through */
// OBSOLETE       case 71 : /* fall through */
// OBSOLETE       case 72 : /* fall through */
// OBSOLETE       case 73 : /* fall through */
// OBSOLETE       case 74 : /* fall through */
// OBSOLETE       case 75 : /* fall through */
// OBSOLETE       case 76 : /* fall through */
// OBSOLETE       case 77 : /* fall through */
// OBSOLETE       case 78 : /* fall through */
// OBSOLETE       case 79 : itype = FR30BF_INSN_LDR14UH;goto extract_sfmt_ldr14uh;
// OBSOLETE       case 80 : /* fall through */
// OBSOLETE       case 81 : /* fall through */
// OBSOLETE       case 82 : /* fall through */
// OBSOLETE       case 83 : /* fall through */
// OBSOLETE       case 84 : /* fall through */
// OBSOLETE       case 85 : /* fall through */
// OBSOLETE       case 86 : /* fall through */
// OBSOLETE       case 87 : /* fall through */
// OBSOLETE       case 88 : /* fall through */
// OBSOLETE       case 89 : /* fall through */
// OBSOLETE       case 90 : /* fall through */
// OBSOLETE       case 91 : /* fall through */
// OBSOLETE       case 92 : /* fall through */
// OBSOLETE       case 93 : /* fall through */
// OBSOLETE       case 94 : /* fall through */
// OBSOLETE       case 95 : itype = FR30BF_INSN_STR14H;goto extract_sfmt_str14h;
// OBSOLETE       case 96 : /* fall through */
// OBSOLETE       case 97 : /* fall through */
// OBSOLETE       case 98 : /* fall through */
// OBSOLETE       case 99 : /* fall through */
// OBSOLETE       case 100 : /* fall through */
// OBSOLETE       case 101 : /* fall through */
// OBSOLETE       case 102 : /* fall through */
// OBSOLETE       case 103 : /* fall through */
// OBSOLETE       case 104 : /* fall through */
// OBSOLETE       case 105 : /* fall through */
// OBSOLETE       case 106 : /* fall through */
// OBSOLETE       case 107 : /* fall through */
// OBSOLETE       case 108 : /* fall through */
// OBSOLETE       case 109 : /* fall through */
// OBSOLETE       case 110 : /* fall through */
// OBSOLETE       case 111 : itype = FR30BF_INSN_LDR14UB;goto extract_sfmt_ldr14ub;
// OBSOLETE       case 112 : /* fall through */
// OBSOLETE       case 113 : /* fall through */
// OBSOLETE       case 114 : /* fall through */
// OBSOLETE       case 115 : /* fall through */
// OBSOLETE       case 116 : /* fall through */
// OBSOLETE       case 117 : /* fall through */
// OBSOLETE       case 118 : /* fall through */
// OBSOLETE       case 119 : /* fall through */
// OBSOLETE       case 120 : /* fall through */
// OBSOLETE       case 121 : /* fall through */
// OBSOLETE       case 122 : /* fall through */
// OBSOLETE       case 123 : /* fall through */
// OBSOLETE       case 124 : /* fall through */
// OBSOLETE       case 125 : /* fall through */
// OBSOLETE       case 126 : /* fall through */
// OBSOLETE       case 127 : itype = FR30BF_INSN_STR14B;goto extract_sfmt_str14b;
// OBSOLETE       case 128 : itype = FR30BF_INSN_BANDL;goto extract_sfmt_bandl;
// OBSOLETE       case 129 : itype = FR30BF_INSN_BANDH;goto extract_sfmt_bandl;
// OBSOLETE       case 130 : itype = FR30BF_INSN_AND;goto extract_sfmt_and;
// OBSOLETE       case 131 : itype = FR30BF_INSN_ANDCCR;goto extract_sfmt_andccr;
// OBSOLETE       case 132 : itype = FR30BF_INSN_ANDM;goto extract_sfmt_andm;
// OBSOLETE       case 133 : itype = FR30BF_INSN_ANDH;goto extract_sfmt_andh;
// OBSOLETE       case 134 : itype = FR30BF_INSN_ANDB;goto extract_sfmt_andb;
// OBSOLETE       case 135 : itype = FR30BF_INSN_STILM;goto extract_sfmt_stilm;
// OBSOLETE       case 136 : itype = FR30BF_INSN_BTSTL;goto extract_sfmt_btstl;
// OBSOLETE       case 137 : itype = FR30BF_INSN_BTSTH;goto extract_sfmt_btstl;
// OBSOLETE       case 138 : itype = FR30BF_INSN_XCHB;goto extract_sfmt_xchb;
// OBSOLETE       case 139 : itype = FR30BF_INSN_MOV;goto extract_sfmt_mov;
// OBSOLETE       case 140 : itype = FR30BF_INSN_LDM0;goto extract_sfmt_ldm0;
// OBSOLETE       case 141 : itype = FR30BF_INSN_LDM1;goto extract_sfmt_ldm1;
// OBSOLETE       case 142 : itype = FR30BF_INSN_STM0;goto extract_sfmt_stm0;
// OBSOLETE       case 143 : itype = FR30BF_INSN_STM1;goto extract_sfmt_stm1;
// OBSOLETE       case 144 : itype = FR30BF_INSN_BORL;goto extract_sfmt_bandl;
// OBSOLETE       case 145 : itype = FR30BF_INSN_BORH;goto extract_sfmt_bandl;
// OBSOLETE       case 146 : itype = FR30BF_INSN_OR;goto extract_sfmt_and;
// OBSOLETE       case 147 : itype = FR30BF_INSN_ORCCR;goto extract_sfmt_andccr;
// OBSOLETE       case 148 : itype = FR30BF_INSN_ORM;goto extract_sfmt_andm;
// OBSOLETE       case 149 : itype = FR30BF_INSN_ORH;goto extract_sfmt_andh;
// OBSOLETE       case 150 : itype = FR30BF_INSN_ORB;goto extract_sfmt_andb;
// OBSOLETE       case 151 :
// OBSOLETE         {
// OBSOLETE           unsigned int val = (((insn >> 4) & (15 << 0)));
// OBSOLETE           switch (val)
// OBSOLETE           {
// OBSOLETE           case 0 : itype = FR30BF_INSN_JMP;goto extract_sfmt_jmp;
// OBSOLETE           case 1 : itype = FR30BF_INSN_CALLR;goto extract_sfmt_callr;
// OBSOLETE           case 2 : itype = FR30BF_INSN_RET;goto extract_sfmt_ret;
// OBSOLETE           case 3 : itype = FR30BF_INSN_RETI;goto extract_sfmt_reti;
// OBSOLETE           case 4 : itype = FR30BF_INSN_DIV0S;goto extract_sfmt_div0s;
// OBSOLETE           case 5 : itype = FR30BF_INSN_DIV0U;goto extract_sfmt_div0u;
// OBSOLETE           case 6 : itype = FR30BF_INSN_DIV1;goto extract_sfmt_div1;
// OBSOLETE           case 7 : itype = FR30BF_INSN_DIV2;goto extract_sfmt_div2;
// OBSOLETE           case 8 : itype = FR30BF_INSN_EXTSB;goto extract_sfmt_extsb;
// OBSOLETE           case 9 : itype = FR30BF_INSN_EXTUB;goto extract_sfmt_extub;
// OBSOLETE           case 10 : itype = FR30BF_INSN_EXTSH;goto extract_sfmt_extsh;
// OBSOLETE           case 11 : itype = FR30BF_INSN_EXTUH;goto extract_sfmt_extuh;
// OBSOLETE           default : itype = FR30BF_INSN_X_INVALID; goto extract_sfmt_empty;
// OBSOLETE           }
// OBSOLETE         }
// OBSOLETE       case 152 : itype = FR30BF_INSN_BEORL;goto extract_sfmt_bandl;
// OBSOLETE       case 153 : itype = FR30BF_INSN_BEORH;goto extract_sfmt_bandl;
// OBSOLETE       case 154 : itype = FR30BF_INSN_EOR;goto extract_sfmt_and;
// OBSOLETE       case 155 : itype = FR30BF_INSN_LDI20;goto extract_sfmt_ldi20;
// OBSOLETE       case 156 : itype = FR30BF_INSN_EORM;goto extract_sfmt_andm;
// OBSOLETE       case 157 : itype = FR30BF_INSN_EORH;goto extract_sfmt_andh;
// OBSOLETE       case 158 : itype = FR30BF_INSN_EORB;goto extract_sfmt_andb;
// OBSOLETE       case 159 :
// OBSOLETE         {
// OBSOLETE           unsigned int val = (((insn >> 4) & (15 << 0)));
// OBSOLETE           switch (val)
// OBSOLETE           {
// OBSOLETE           case 0 : itype = FR30BF_INSN_JMPD;goto extract_sfmt_jmp;
// OBSOLETE           case 1 : itype = FR30BF_INSN_CALLRD;goto extract_sfmt_callr;
// OBSOLETE           case 2 : itype = FR30BF_INSN_RET_D;goto extract_sfmt_ret;
// OBSOLETE           case 3 : itype = FR30BF_INSN_INTE;goto extract_sfmt_inte;
// OBSOLETE           case 6 : itype = FR30BF_INSN_DIV3;goto extract_sfmt_div3;
// OBSOLETE           case 7 : itype = FR30BF_INSN_DIV4S;goto extract_sfmt_div4s;
// OBSOLETE           case 8 : itype = FR30BF_INSN_LDI32;goto extract_sfmt_ldi32;
// OBSOLETE           case 9 : itype = FR30BF_INSN_LEAVE;goto extract_sfmt_leave;
// OBSOLETE           case 10 : itype = FR30BF_INSN_NOP;goto extract_sfmt_bnod;
// OBSOLETE           case 12 : itype = FR30BF_INSN_COPOP;goto extract_sfmt_copop;
// OBSOLETE           case 13 : itype = FR30BF_INSN_COPLD;goto extract_sfmt_copop;
// OBSOLETE           case 14 : itype = FR30BF_INSN_COPST;goto extract_sfmt_copop;
// OBSOLETE           case 15 : itype = FR30BF_INSN_COPSV;goto extract_sfmt_copop;
// OBSOLETE           default : itype = FR30BF_INSN_X_INVALID; goto extract_sfmt_empty;
// OBSOLETE           }
// OBSOLETE         }
// OBSOLETE       case 160 : itype = FR30BF_INSN_ADDNI;goto extract_sfmt_addni;
// OBSOLETE       case 161 : itype = FR30BF_INSN_ADDN2;goto extract_sfmt_addn2;
// OBSOLETE       case 162 : itype = FR30BF_INSN_ADDN;goto extract_sfmt_addn;
// OBSOLETE       case 163 : itype = FR30BF_INSN_ADDSP;goto extract_sfmt_addsp;
// OBSOLETE       case 164 : itype = FR30BF_INSN_ADDI;goto extract_sfmt_addi;
// OBSOLETE       case 165 : itype = FR30BF_INSN_ADD2;goto extract_sfmt_add2;
// OBSOLETE       case 166 : itype = FR30BF_INSN_ADD;goto extract_sfmt_add;
// OBSOLETE       case 167 : itype = FR30BF_INSN_ADDC;goto extract_sfmt_addc;
// OBSOLETE       case 168 : itype = FR30BF_INSN_CMPI;goto extract_sfmt_cmpi;
// OBSOLETE       case 169 : itype = FR30BF_INSN_CMP2;goto extract_sfmt_cmp2;
// OBSOLETE       case 170 : itype = FR30BF_INSN_CMP;goto extract_sfmt_cmp;
// OBSOLETE       case 171 : itype = FR30BF_INSN_MULU;goto extract_sfmt_mulu;
// OBSOLETE       case 172 : itype = FR30BF_INSN_SUB;goto extract_sfmt_add;
// OBSOLETE       case 173 : itype = FR30BF_INSN_SUBC;goto extract_sfmt_addc;
// OBSOLETE       case 174 : itype = FR30BF_INSN_SUBN;goto extract_sfmt_addn;
// OBSOLETE       case 175 : itype = FR30BF_INSN_MUL;goto extract_sfmt_mul;
// OBSOLETE       case 176 : itype = FR30BF_INSN_LSRI;goto extract_sfmt_lsli;
// OBSOLETE       case 177 : itype = FR30BF_INSN_LSR2;goto extract_sfmt_lsli;
// OBSOLETE       case 178 : itype = FR30BF_INSN_LSR;goto extract_sfmt_lsl;
// OBSOLETE       case 179 : itype = FR30BF_INSN_MOV2DR;goto extract_sfmt_mov2dr;
// OBSOLETE       case 180 : itype = FR30BF_INSN_LSLI;goto extract_sfmt_lsli;
// OBSOLETE       case 181 : itype = FR30BF_INSN_LSL2;goto extract_sfmt_lsli;
// OBSOLETE       case 182 : itype = FR30BF_INSN_LSL;goto extract_sfmt_lsl;
// OBSOLETE       case 183 : itype = FR30BF_INSN_MOVDR;goto extract_sfmt_movdr;
// OBSOLETE       case 184 : itype = FR30BF_INSN_ASRI;goto extract_sfmt_lsli;
// OBSOLETE       case 185 : itype = FR30BF_INSN_ASR2;goto extract_sfmt_lsli;
// OBSOLETE       case 186 : itype = FR30BF_INSN_ASR;goto extract_sfmt_lsl;
// OBSOLETE       case 187 : itype = FR30BF_INSN_MULUH;goto extract_sfmt_mulh;
// OBSOLETE       case 188 : itype = FR30BF_INSN_LDRES;goto extract_sfmt_ldres;
// OBSOLETE       case 189 : itype = FR30BF_INSN_STRES;goto extract_sfmt_ldres;
// OBSOLETE       case 191 : itype = FR30BF_INSN_MULH;goto extract_sfmt_mulh;
// OBSOLETE       case 192 : /* fall through */
// OBSOLETE       case 193 : /* fall through */
// OBSOLETE       case 194 : /* fall through */
// OBSOLETE       case 195 : /* fall through */
// OBSOLETE       case 196 : /* fall through */
// OBSOLETE       case 197 : /* fall through */
// OBSOLETE       case 198 : /* fall through */
// OBSOLETE       case 199 : /* fall through */
// OBSOLETE       case 200 : /* fall through */
// OBSOLETE       case 201 : /* fall through */
// OBSOLETE       case 202 : /* fall through */
// OBSOLETE       case 203 : /* fall through */
// OBSOLETE       case 204 : /* fall through */
// OBSOLETE       case 205 : /* fall through */
// OBSOLETE       case 206 : /* fall through */
// OBSOLETE       case 207 : itype = FR30BF_INSN_LDI8;goto extract_sfmt_ldi8;
// OBSOLETE       case 208 : /* fall through */
// OBSOLETE       case 209 : /* fall through */
// OBSOLETE       case 210 : /* fall through */
// OBSOLETE       case 211 : /* fall through */
// OBSOLETE       case 212 : /* fall through */
// OBSOLETE       case 213 : /* fall through */
// OBSOLETE       case 214 : /* fall through */
// OBSOLETE       case 215 : itype = FR30BF_INSN_CALL;goto extract_sfmt_call;
// OBSOLETE       case 216 : /* fall through */
// OBSOLETE       case 217 : /* fall through */
// OBSOLETE       case 218 : /* fall through */
// OBSOLETE       case 219 : /* fall through */
// OBSOLETE       case 220 : /* fall through */
// OBSOLETE       case 221 : /* fall through */
// OBSOLETE       case 222 : /* fall through */
// OBSOLETE       case 223 : itype = FR30BF_INSN_CALLD;goto extract_sfmt_call;
// OBSOLETE       case 224 : itype = FR30BF_INSN_BRA;goto extract_sfmt_brad;
// OBSOLETE       case 225 : itype = FR30BF_INSN_BNO;goto extract_sfmt_bnod;
// OBSOLETE       case 226 : itype = FR30BF_INSN_BEQ;goto extract_sfmt_beqd;
// OBSOLETE       case 227 : itype = FR30BF_INSN_BNE;goto extract_sfmt_beqd;
// OBSOLETE       case 228 : itype = FR30BF_INSN_BC;goto extract_sfmt_bcd;
// OBSOLETE       case 229 : itype = FR30BF_INSN_BNC;goto extract_sfmt_bcd;
// OBSOLETE       case 230 : itype = FR30BF_INSN_BN;goto extract_sfmt_bnd;
// OBSOLETE       case 231 : itype = FR30BF_INSN_BP;goto extract_sfmt_bnd;
// OBSOLETE       case 232 : itype = FR30BF_INSN_BV;goto extract_sfmt_bvd;
// OBSOLETE       case 233 : itype = FR30BF_INSN_BNV;goto extract_sfmt_bvd;
// OBSOLETE       case 234 : itype = FR30BF_INSN_BLT;goto extract_sfmt_bltd;
// OBSOLETE       case 235 : itype = FR30BF_INSN_BGE;goto extract_sfmt_bltd;
// OBSOLETE       case 236 : itype = FR30BF_INSN_BLE;goto extract_sfmt_bled;
// OBSOLETE       case 237 : itype = FR30BF_INSN_BGT;goto extract_sfmt_bled;
// OBSOLETE       case 238 : itype = FR30BF_INSN_BLS;goto extract_sfmt_blsd;
// OBSOLETE       case 239 : itype = FR30BF_INSN_BHI;goto extract_sfmt_blsd;
// OBSOLETE       case 240 : itype = FR30BF_INSN_BRAD;goto extract_sfmt_brad;
// OBSOLETE       case 241 : itype = FR30BF_INSN_BNOD;goto extract_sfmt_bnod;
// OBSOLETE       case 242 : itype = FR30BF_INSN_BEQD;goto extract_sfmt_beqd;
// OBSOLETE       case 243 : itype = FR30BF_INSN_BNED;goto extract_sfmt_beqd;
// OBSOLETE       case 244 : itype = FR30BF_INSN_BCD;goto extract_sfmt_bcd;
// OBSOLETE       case 245 : itype = FR30BF_INSN_BNCD;goto extract_sfmt_bcd;
// OBSOLETE       case 246 : itype = FR30BF_INSN_BND;goto extract_sfmt_bnd;
// OBSOLETE       case 247 : itype = FR30BF_INSN_BPD;goto extract_sfmt_bnd;
// OBSOLETE       case 248 : itype = FR30BF_INSN_BVD;goto extract_sfmt_bvd;
// OBSOLETE       case 249 : itype = FR30BF_INSN_BNVD;goto extract_sfmt_bvd;
// OBSOLETE       case 250 : itype = FR30BF_INSN_BLTD;goto extract_sfmt_bltd;
// OBSOLETE       case 251 : itype = FR30BF_INSN_BGED;goto extract_sfmt_bltd;
// OBSOLETE       case 252 : itype = FR30BF_INSN_BLED;goto extract_sfmt_bled;
// OBSOLETE       case 253 : itype = FR30BF_INSN_BGTD;goto extract_sfmt_bled;
// OBSOLETE       case 254 : itype = FR30BF_INSN_BLSD;goto extract_sfmt_blsd;
// OBSOLETE       case 255 : itype = FR30BF_INSN_BHID;goto extract_sfmt_blsd;
// OBSOLETE       default : itype = FR30BF_INSN_X_INVALID; goto extract_sfmt_empty;
// OBSOLETE       }
// OBSOLETE     }
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   /* The instruction has been decoded, now extract the fields.  */
// OBSOLETE 
// OBSOLETE  extract_sfmt_empty:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE #define FLD(f) abuf->fields.fmt_empty.f
// OBSOLETE 
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_empty", (char *) 0));
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_add:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add.f
// OBSOLETE     UINT f_Rj;
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_Rj = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (f_Rj) = f_Rj;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   FLD (i_Rj) = & CPU (h_gr)[f_Rj];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_add", "f_Ri 0x%x", 'x', f_Ri, "f_Rj 0x%x", 'x', f_Rj, "Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_Ri) = f_Ri;
// OBSOLETE       FLD (in_Rj) = f_Rj;
// OBSOLETE       FLD (out_Ri) = f_Ri;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_addi:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_addi.f
// OBSOLETE     UINT f_u4;
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_u4 = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (f_u4) = f_u4;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_addi", "f_Ri 0x%x", 'x', f_Ri, "f_u4 0x%x", 'x', f_u4, "Ri 0x%x", 'x', f_Ri, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_Ri) = f_Ri;
// OBSOLETE       FLD (out_Ri) = f_Ri;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_add2:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add2.f
// OBSOLETE     SI f_m4;
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_m4 = ((EXTRACT_MSB0_UINT (insn, 16, 8, 4)) | (((-1) << (4))));
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (f_m4) = f_m4;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_add2", "f_Ri 0x%x", 'x', f_Ri, "f_m4 0x%x", 'x', f_m4, "Ri 0x%x", 'x', f_Ri, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_Ri) = f_Ri;
// OBSOLETE       FLD (out_Ri) = f_Ri;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_addc:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add.f
// OBSOLETE     UINT f_Rj;
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_Rj = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (f_Rj) = f_Rj;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   FLD (i_Rj) = & CPU (h_gr)[f_Rj];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_addc", "f_Ri 0x%x", 'x', f_Ri, "f_Rj 0x%x", 'x', f_Rj, "Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_Ri) = f_Ri;
// OBSOLETE       FLD (in_Rj) = f_Rj;
// OBSOLETE       FLD (out_Ri) = f_Ri;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_addn:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add.f
// OBSOLETE     UINT f_Rj;
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_Rj = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (f_Rj) = f_Rj;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   FLD (i_Rj) = & CPU (h_gr)[f_Rj];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_addn", "f_Ri 0x%x", 'x', f_Ri, "f_Rj 0x%x", 'x', f_Rj, "Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_Ri) = f_Ri;
// OBSOLETE       FLD (in_Rj) = f_Rj;
// OBSOLETE       FLD (out_Ri) = f_Ri;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_addni:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_addi.f
// OBSOLETE     UINT f_u4;
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_u4 = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (f_u4) = f_u4;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_addni", "f_Ri 0x%x", 'x', f_Ri, "f_u4 0x%x", 'x', f_u4, "Ri 0x%x", 'x', f_Ri, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_Ri) = f_Ri;
// OBSOLETE       FLD (out_Ri) = f_Ri;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_addn2:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add2.f
// OBSOLETE     SI f_m4;
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_m4 = ((EXTRACT_MSB0_UINT (insn, 16, 8, 4)) | (((-1) << (4))));
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (f_m4) = f_m4;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_addn2", "f_Ri 0x%x", 'x', f_Ri, "f_m4 0x%x", 'x', f_m4, "Ri 0x%x", 'x', f_Ri, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_Ri) = f_Ri;
// OBSOLETE       FLD (out_Ri) = f_Ri;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_cmp:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE     UINT f_Rj;
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_Rj = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (f_Rj) = f_Rj;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   FLD (i_Rj) = & CPU (h_gr)[f_Rj];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_cmp", "f_Ri 0x%x", 'x', f_Ri, "f_Rj 0x%x", 'x', f_Rj, "Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_Ri) = f_Ri;
// OBSOLETE       FLD (in_Rj) = f_Rj;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_cmpi:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_addi.f
// OBSOLETE     UINT f_u4;
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_u4 = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (f_u4) = f_u4;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_cmpi", "f_Ri 0x%x", 'x', f_Ri, "f_u4 0x%x", 'x', f_u4, "Ri 0x%x", 'x', f_Ri, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_Ri) = f_Ri;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_cmp2:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add2.f
// OBSOLETE     SI f_m4;
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_m4 = ((EXTRACT_MSB0_UINT (insn, 16, 8, 4)) | (((-1) << (4))));
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (f_m4) = f_m4;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_cmp2", "f_Ri 0x%x", 'x', f_Ri, "f_m4 0x%x", 'x', f_m4, "Ri 0x%x", 'x', f_Ri, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_Ri) = f_Ri;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_and:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add.f
// OBSOLETE     UINT f_Rj;
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_Rj = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (f_Rj) = f_Rj;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   FLD (i_Rj) = & CPU (h_gr)[f_Rj];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_and", "f_Ri 0x%x", 'x', f_Ri, "f_Rj 0x%x", 'x', f_Rj, "Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_Ri) = f_Ri;
// OBSOLETE       FLD (in_Rj) = f_Rj;
// OBSOLETE       FLD (out_Ri) = f_Ri;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_andm:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE     UINT f_Rj;
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_Rj = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (f_Rj) = f_Rj;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   FLD (i_Rj) = & CPU (h_gr)[f_Rj];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_andm", "f_Ri 0x%x", 'x', f_Ri, "f_Rj 0x%x", 'x', f_Rj, "Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_Ri) = f_Ri;
// OBSOLETE       FLD (in_Rj) = f_Rj;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_andh:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE     UINT f_Rj;
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_Rj = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (f_Rj) = f_Rj;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   FLD (i_Rj) = & CPU (h_gr)[f_Rj];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_andh", "f_Ri 0x%x", 'x', f_Ri, "f_Rj 0x%x", 'x', f_Rj, "Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_Ri) = f_Ri;
// OBSOLETE       FLD (in_Rj) = f_Rj;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_andb:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE     UINT f_Rj;
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_Rj = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (f_Rj) = f_Rj;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   FLD (i_Rj) = & CPU (h_gr)[f_Rj];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_andb", "f_Ri 0x%x", 'x', f_Ri, "f_Rj 0x%x", 'x', f_Rj, "Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_Ri) = f_Ri;
// OBSOLETE       FLD (in_Rj) = f_Rj;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_bandl:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_addi.f
// OBSOLETE     UINT f_u4;
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_u4 = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (f_u4) = f_u4;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_bandl", "f_Ri 0x%x", 'x', f_Ri, "f_u4 0x%x", 'x', f_u4, "Ri 0x%x", 'x', f_Ri, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_Ri) = f_Ri;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_btstl:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_addi.f
// OBSOLETE     UINT f_u4;
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_u4 = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (f_u4) = f_u4;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_btstl", "f_Ri 0x%x", 'x', f_Ri, "f_u4 0x%x", 'x', f_u4, "Ri 0x%x", 'x', f_Ri, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_Ri) = f_Ri;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_mul:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE     UINT f_Rj;
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_Rj = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (f_Rj) = f_Rj;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   FLD (i_Rj) = & CPU (h_gr)[f_Rj];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_mul", "f_Ri 0x%x", 'x', f_Ri, "f_Rj 0x%x", 'x', f_Rj, "Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_Ri) = f_Ri;
// OBSOLETE       FLD (in_Rj) = f_Rj;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_mulu:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE     UINT f_Rj;
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_Rj = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (f_Rj) = f_Rj;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   FLD (i_Rj) = & CPU (h_gr)[f_Rj];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_mulu", "f_Ri 0x%x", 'x', f_Ri, "f_Rj 0x%x", 'x', f_Rj, "Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_Ri) = f_Ri;
// OBSOLETE       FLD (in_Rj) = f_Rj;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_mulh:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE     UINT f_Rj;
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_Rj = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (f_Rj) = f_Rj;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   FLD (i_Rj) = & CPU (h_gr)[f_Rj];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_mulh", "f_Ri 0x%x", 'x', f_Ri, "f_Rj 0x%x", 'x', f_Rj, "Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_Ri) = f_Ri;
// OBSOLETE       FLD (in_Rj) = f_Rj;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_div0s:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_mov2dr.f
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_div0s", "f_Ri 0x%x", 'x', f_Ri, "Ri 0x%x", 'x', f_Ri, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_Ri) = f_Ri;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_div0u:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE #define FLD(f) abuf->fields.fmt_empty.f
// OBSOLETE 
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_div0u", (char *) 0));
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_div1:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_mov2dr.f
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_div1", "f_Ri 0x%x", 'x', f_Ri, "Ri 0x%x", 'x', f_Ri, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_Ri) = f_Ri;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_div2:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_mov2dr.f
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_div2", "f_Ri 0x%x", 'x', f_Ri, "Ri 0x%x", 'x', f_Ri, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_Ri) = f_Ri;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_div3:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE #define FLD(f) abuf->fields.fmt_empty.f
// OBSOLETE 
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_div3", (char *) 0));
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_div4s:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE #define FLD(f) abuf->fields.fmt_empty.f
// OBSOLETE 
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_div4s", (char *) 0));
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_lsl:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add.f
// OBSOLETE     UINT f_Rj;
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_Rj = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (f_Rj) = f_Rj;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   FLD (i_Rj) = & CPU (h_gr)[f_Rj];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_lsl", "f_Ri 0x%x", 'x', f_Ri, "f_Rj 0x%x", 'x', f_Rj, "Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_Ri) = f_Ri;
// OBSOLETE       FLD (in_Rj) = f_Rj;
// OBSOLETE       FLD (out_Ri) = f_Ri;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_lsli:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_addi.f
// OBSOLETE     UINT f_u4;
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_u4 = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (f_u4) = f_u4;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_lsli", "f_Ri 0x%x", 'x', f_Ri, "f_u4 0x%x", 'x', f_u4, "Ri 0x%x", 'x', f_Ri, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_Ri) = f_Ri;
// OBSOLETE       FLD (out_Ri) = f_Ri;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_ldi8:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldi8.f
// OBSOLETE     UINT f_i8;
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_i8 = EXTRACT_MSB0_UINT (insn, 16, 4, 8);
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_i8) = f_i8;
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_ldi8", "f_i8 0x%x", 'x', f_i8, "f_Ri 0x%x", 'x', f_Ri, "Ri 0x%x", 'x', f_Ri, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (out_Ri) = f_Ri;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_ldi20:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldi20.f
// OBSOLETE     UINT f_i20_16;
// OBSOLETE     UINT f_i20_4;
// OBSOLETE     UINT f_Ri;
// OBSOLETE     UINT f_i20;
// OBSOLETE     /* Contents of trailing part of insn.  */
// OBSOLETE     UINT word_1;
// OBSOLETE 
// OBSOLETE   word_1 = GETIMEMUHI (current_cpu, pc + 2);
// OBSOLETE     f_i20_16 = (0|(EXTRACT_MSB0_UINT (word_1, 16, 0, 16) << 0));
// OBSOLETE     f_i20_4 = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE {
// OBSOLETE   f_i20 = ((((f_i20_4) << (16))) | (f_i20_16));
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_i20) = f_i20;
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_ldi20", "f_i20 0x%x", 'x', f_i20, "f_Ri 0x%x", 'x', f_Ri, "Ri 0x%x", 'x', f_Ri, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (out_Ri) = f_Ri;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_ldi32:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldi32.f
// OBSOLETE     UINT f_i32;
// OBSOLETE     UINT f_Ri;
// OBSOLETE     /* Contents of trailing part of insn.  */
// OBSOLETE     UINT word_1;
// OBSOLETE     UINT word_2;
// OBSOLETE 
// OBSOLETE   word_1 = GETIMEMUHI (current_cpu, pc + 2);
// OBSOLETE   word_2 = GETIMEMUHI (current_cpu, pc + 4);
// OBSOLETE     f_i32 = (0|(EXTRACT_MSB0_UINT (word_2, 16, 0, 16) << 0)|(EXTRACT_MSB0_UINT (word_1, 16, 0, 16) << 16));
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_i32) = f_i32;
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_ldi32", "f_i32 0x%x", 'x', f_i32, "f_Ri 0x%x", 'x', f_Ri, "Ri 0x%x", 'x', f_Ri, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (out_Ri) = f_Ri;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_ld:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldr13.f
// OBSOLETE     UINT f_Rj;
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_Rj = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Rj) = f_Rj;
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (i_Rj) = & CPU (h_gr)[f_Rj];
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_ld", "f_Rj 0x%x", 'x', f_Rj, "f_Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, "Ri 0x%x", 'x', f_Ri, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_Rj) = f_Rj;
// OBSOLETE       FLD (out_Ri) = f_Ri;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_lduh:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldr13.f
// OBSOLETE     UINT f_Rj;
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_Rj = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Rj) = f_Rj;
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (i_Rj) = & CPU (h_gr)[f_Rj];
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_lduh", "f_Rj 0x%x", 'x', f_Rj, "f_Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, "Ri 0x%x", 'x', f_Ri, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_Rj) = f_Rj;
// OBSOLETE       FLD (out_Ri) = f_Ri;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_ldub:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldr13.f
// OBSOLETE     UINT f_Rj;
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_Rj = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Rj) = f_Rj;
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (i_Rj) = & CPU (h_gr)[f_Rj];
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_ldub", "f_Rj 0x%x", 'x', f_Rj, "f_Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, "Ri 0x%x", 'x', f_Ri, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_Rj) = f_Rj;
// OBSOLETE       FLD (out_Ri) = f_Ri;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_ldr13:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldr13.f
// OBSOLETE     UINT f_Rj;
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_Rj = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Rj) = f_Rj;
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (i_Rj) = & CPU (h_gr)[f_Rj];
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_ldr13", "f_Rj 0x%x", 'x', f_Rj, "f_Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, "Ri 0x%x", 'x', f_Ri, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_Rj) = f_Rj;
// OBSOLETE       FLD (in_h_gr_SI_13) = 13;
// OBSOLETE       FLD (out_Ri) = f_Ri;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_ldr13uh:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldr13.f
// OBSOLETE     UINT f_Rj;
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_Rj = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Rj) = f_Rj;
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (i_Rj) = & CPU (h_gr)[f_Rj];
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_ldr13uh", "f_Rj 0x%x", 'x', f_Rj, "f_Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, "Ri 0x%x", 'x', f_Ri, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_Rj) = f_Rj;
// OBSOLETE       FLD (in_h_gr_SI_13) = 13;
// OBSOLETE       FLD (out_Ri) = f_Ri;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_ldr13ub:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldr13.f
// OBSOLETE     UINT f_Rj;
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_Rj = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Rj) = f_Rj;
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (i_Rj) = & CPU (h_gr)[f_Rj];
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_ldr13ub", "f_Rj 0x%x", 'x', f_Rj, "f_Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, "Ri 0x%x", 'x', f_Ri, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_Rj) = f_Rj;
// OBSOLETE       FLD (in_h_gr_SI_13) = 13;
// OBSOLETE       FLD (out_Ri) = f_Ri;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_ldr14:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldr14.f
// OBSOLETE     SI f_disp10;
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_disp10 = ((EXTRACT_MSB0_INT (insn, 16, 4, 8)) << (2));
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_disp10) = f_disp10;
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_ldr14", "f_disp10 0x%x", 'x', f_disp10, "f_Ri 0x%x", 'x', f_Ri, "Ri 0x%x", 'x', f_Ri, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_h_gr_SI_14) = 14;
// OBSOLETE       FLD (out_Ri) = f_Ri;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_ldr14uh:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldr14uh.f
// OBSOLETE     SI f_disp9;
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_disp9 = ((EXTRACT_MSB0_INT (insn, 16, 4, 8)) << (1));
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_disp9) = f_disp9;
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_ldr14uh", "f_disp9 0x%x", 'x', f_disp9, "f_Ri 0x%x", 'x', f_Ri, "Ri 0x%x", 'x', f_Ri, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_h_gr_SI_14) = 14;
// OBSOLETE       FLD (out_Ri) = f_Ri;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_ldr14ub:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldr14ub.f
// OBSOLETE     INT f_disp8;
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_disp8 = EXTRACT_MSB0_INT (insn, 16, 4, 8);
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_disp8) = f_disp8;
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_ldr14ub", "f_disp8 0x%x", 'x', f_disp8, "f_Ri 0x%x", 'x', f_Ri, "Ri 0x%x", 'x', f_Ri, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_h_gr_SI_14) = 14;
// OBSOLETE       FLD (out_Ri) = f_Ri;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_ldr15:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldr15.f
// OBSOLETE     USI f_udisp6;
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_udisp6 = ((EXTRACT_MSB0_UINT (insn, 16, 8, 4)) << (2));
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_udisp6) = f_udisp6;
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_ldr15", "f_udisp6 0x%x", 'x', f_udisp6, "f_Ri 0x%x", 'x', f_Ri, "Ri 0x%x", 'x', f_Ri, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_h_gr_SI_15) = 15;
// OBSOLETE       FLD (out_Ri) = f_Ri;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_ldr15gr:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldr15gr.f
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_ldr15gr", "f_Ri 0x%x", 'x', f_Ri, "Ri 0x%x", 'x', f_Ri, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_h_gr_SI_15) = 15;
// OBSOLETE       FLD (out_Ri) = f_Ri;
// OBSOLETE       FLD (out_h_gr_SI_15) = 15;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_ldr15dr:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldr15dr.f
// OBSOLETE     UINT f_Rs2;
// OBSOLETE 
// OBSOLETE     f_Rs2 = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Rs2) = f_Rs2;
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_ldr15dr", "f_Rs2 0x%x", 'x', f_Rs2, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_h_gr_SI_15) = 15;
// OBSOLETE       FLD (out_h_gr_SI_15) = 15;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_ldr15ps:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE #define FLD(f) abuf->fields.sfmt_addsp.f
// OBSOLETE 
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_ldr15ps", (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_h_gr_SI_15) = 15;
// OBSOLETE       FLD (out_h_gr_SI_15) = 15;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_st:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE     UINT f_Rj;
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_Rj = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (f_Rj) = f_Rj;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   FLD (i_Rj) = & CPU (h_gr)[f_Rj];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_st", "f_Ri 0x%x", 'x', f_Ri, "f_Rj 0x%x", 'x', f_Rj, "Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_Ri) = f_Ri;
// OBSOLETE       FLD (in_Rj) = f_Rj;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_sth:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE     UINT f_Rj;
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_Rj = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (f_Rj) = f_Rj;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   FLD (i_Rj) = & CPU (h_gr)[f_Rj];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_sth", "f_Ri 0x%x", 'x', f_Ri, "f_Rj 0x%x", 'x', f_Rj, "Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_Ri) = f_Ri;
// OBSOLETE       FLD (in_Rj) = f_Rj;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_stb:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE     UINT f_Rj;
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_Rj = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (f_Rj) = f_Rj;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   FLD (i_Rj) = & CPU (h_gr)[f_Rj];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_stb", "f_Ri 0x%x", 'x', f_Ri, "f_Rj 0x%x", 'x', f_Rj, "Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_Ri) = f_Ri;
// OBSOLETE       FLD (in_Rj) = f_Rj;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_str13:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE     UINT f_Rj;
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_Rj = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (f_Rj) = f_Rj;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   FLD (i_Rj) = & CPU (h_gr)[f_Rj];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_str13", "f_Ri 0x%x", 'x', f_Ri, "f_Rj 0x%x", 'x', f_Rj, "Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_Ri) = f_Ri;
// OBSOLETE       FLD (in_Rj) = f_Rj;
// OBSOLETE       FLD (in_h_gr_SI_13) = 13;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_str13h:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE     UINT f_Rj;
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_Rj = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (f_Rj) = f_Rj;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   FLD (i_Rj) = & CPU (h_gr)[f_Rj];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_str13h", "f_Ri 0x%x", 'x', f_Ri, "f_Rj 0x%x", 'x', f_Rj, "Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_Ri) = f_Ri;
// OBSOLETE       FLD (in_Rj) = f_Rj;
// OBSOLETE       FLD (in_h_gr_SI_13) = 13;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_str13b:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE     UINT f_Rj;
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_Rj = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (f_Rj) = f_Rj;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   FLD (i_Rj) = & CPU (h_gr)[f_Rj];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_str13b", "f_Ri 0x%x", 'x', f_Ri, "f_Rj 0x%x", 'x', f_Rj, "Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_Ri) = f_Ri;
// OBSOLETE       FLD (in_Rj) = f_Rj;
// OBSOLETE       FLD (in_h_gr_SI_13) = 13;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_str14:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str14.f
// OBSOLETE     SI f_disp10;
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_disp10 = ((EXTRACT_MSB0_INT (insn, 16, 4, 8)) << (2));
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (f_disp10) = f_disp10;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_str14", "f_Ri 0x%x", 'x', f_Ri, "f_disp10 0x%x", 'x', f_disp10, "Ri 0x%x", 'x', f_Ri, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_Ri) = f_Ri;
// OBSOLETE       FLD (in_h_gr_SI_14) = 14;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_str14h:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str14h.f
// OBSOLETE     SI f_disp9;
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_disp9 = ((EXTRACT_MSB0_INT (insn, 16, 4, 8)) << (1));
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (f_disp9) = f_disp9;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_str14h", "f_Ri 0x%x", 'x', f_Ri, "f_disp9 0x%x", 'x', f_disp9, "Ri 0x%x", 'x', f_Ri, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_Ri) = f_Ri;
// OBSOLETE       FLD (in_h_gr_SI_14) = 14;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_str14b:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str14b.f
// OBSOLETE     INT f_disp8;
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_disp8 = EXTRACT_MSB0_INT (insn, 16, 4, 8);
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (f_disp8) = f_disp8;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_str14b", "f_Ri 0x%x", 'x', f_Ri, "f_disp8 0x%x", 'x', f_disp8, "Ri 0x%x", 'x', f_Ri, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_Ri) = f_Ri;
// OBSOLETE       FLD (in_h_gr_SI_14) = 14;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_str15:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str15.f
// OBSOLETE     USI f_udisp6;
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_udisp6 = ((EXTRACT_MSB0_UINT (insn, 16, 8, 4)) << (2));
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (f_udisp6) = f_udisp6;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_str15", "f_Ri 0x%x", 'x', f_Ri, "f_udisp6 0x%x", 'x', f_udisp6, "Ri 0x%x", 'x', f_Ri, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_Ri) = f_Ri;
// OBSOLETE       FLD (in_h_gr_SI_15) = 15;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_str15gr:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str15gr.f
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_str15gr", "f_Ri 0x%x", 'x', f_Ri, "Ri 0x%x", 'x', f_Ri, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_Ri) = f_Ri;
// OBSOLETE       FLD (in_h_gr_SI_15) = 15;
// OBSOLETE       FLD (out_h_gr_SI_15) = 15;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_str15dr:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldr15dr.f
// OBSOLETE     UINT f_Rs2;
// OBSOLETE 
// OBSOLETE     f_Rs2 = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Rs2) = f_Rs2;
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_str15dr", "f_Rs2 0x%x", 'x', f_Rs2, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_h_gr_SI_15) = 15;
// OBSOLETE       FLD (out_h_gr_SI_15) = 15;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_str15ps:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE #define FLD(f) abuf->fields.sfmt_addsp.f
// OBSOLETE 
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_str15ps", (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_h_gr_SI_15) = 15;
// OBSOLETE       FLD (out_h_gr_SI_15) = 15;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_mov:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldr13.f
// OBSOLETE     UINT f_Rj;
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_Rj = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Rj) = f_Rj;
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (i_Rj) = & CPU (h_gr)[f_Rj];
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_mov", "f_Rj 0x%x", 'x', f_Rj, "f_Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, "Ri 0x%x", 'x', f_Ri, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_Rj) = f_Rj;
// OBSOLETE       FLD (out_Ri) = f_Ri;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_movdr:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_movdr.f
// OBSOLETE     UINT f_Rs1;
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_Rs1 = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Rs1) = f_Rs1;
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_movdr", "f_Rs1 0x%x", 'x', f_Rs1, "f_Ri 0x%x", 'x', f_Ri, "Ri 0x%x", 'x', f_Ri, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (out_Ri) = f_Ri;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_movps:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_movdr.f
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_movps", "f_Ri 0x%x", 'x', f_Ri, "Ri 0x%x", 'x', f_Ri, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (out_Ri) = f_Ri;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_mov2dr:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_mov2dr.f
// OBSOLETE     UINT f_Rs1;
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_Rs1 = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (f_Rs1) = f_Rs1;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_mov2dr", "f_Ri 0x%x", 'x', f_Ri, "f_Rs1 0x%x", 'x', f_Rs1, "Ri 0x%x", 'x', f_Ri, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_Ri) = f_Ri;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_mov2ps:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_mov2dr.f
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_mov2ps", "f_Ri 0x%x", 'x', f_Ri, "Ri 0x%x", 'x', f_Ri, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_Ri) = f_Ri;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_jmp:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_mov2dr.f
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_jmp", "f_Ri 0x%x", 'x', f_Ri, "Ri 0x%x", 'x', f_Ri, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_Ri) = f_Ri;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_callr:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_mov2dr.f
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_callr", "f_Ri 0x%x", 'x', f_Ri, "Ri 0x%x", 'x', f_Ri, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_Ri) = f_Ri;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_call:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_call.f
// OBSOLETE     SI f_rel12;
// OBSOLETE 
// OBSOLETE     f_rel12 = ((((EXTRACT_MSB0_INT (insn, 16, 5, 11)) << (1))) + (((pc) + (2))));
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (i_label12) = f_rel12;
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_call", "label12 0x%x", 'x', f_rel12, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_ret:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE #define FLD(f) abuf->fields.fmt_empty.f
// OBSOLETE 
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_ret", (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_int:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_int.f
// OBSOLETE     UINT f_u8;
// OBSOLETE 
// OBSOLETE     f_u8 = EXTRACT_MSB0_UINT (insn, 16, 8, 8);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_u8) = f_u8;
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_int", "f_u8 0x%x", 'x', f_u8, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_inte:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE #define FLD(f) abuf->fields.fmt_empty.f
// OBSOLETE 
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_inte", (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_reti:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE #define FLD(f) abuf->fields.fmt_empty.f
// OBSOLETE 
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_reti", (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_brad:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE     SI f_rel9;
// OBSOLETE 
// OBSOLETE     f_rel9 = ((((EXTRACT_MSB0_INT (insn, 16, 8, 8)) << (1))) + (((pc) + (2))));
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (i_label9) = f_rel9;
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_brad", "label9 0x%x", 'x', f_rel9, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_bnod:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE #define FLD(f) abuf->fields.fmt_empty.f
// OBSOLETE 
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_bnod", (char *) 0));
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_beqd:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE     SI f_rel9;
// OBSOLETE 
// OBSOLETE     f_rel9 = ((((EXTRACT_MSB0_INT (insn, 16, 8, 8)) << (1))) + (((pc) + (2))));
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (i_label9) = f_rel9;
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_beqd", "label9 0x%x", 'x', f_rel9, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_bcd:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE     SI f_rel9;
// OBSOLETE 
// OBSOLETE     f_rel9 = ((((EXTRACT_MSB0_INT (insn, 16, 8, 8)) << (1))) + (((pc) + (2))));
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (i_label9) = f_rel9;
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_bcd", "label9 0x%x", 'x', f_rel9, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_bnd:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE     SI f_rel9;
// OBSOLETE 
// OBSOLETE     f_rel9 = ((((EXTRACT_MSB0_INT (insn, 16, 8, 8)) << (1))) + (((pc) + (2))));
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (i_label9) = f_rel9;
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_bnd", "label9 0x%x", 'x', f_rel9, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_bvd:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE     SI f_rel9;
// OBSOLETE 
// OBSOLETE     f_rel9 = ((((EXTRACT_MSB0_INT (insn, 16, 8, 8)) << (1))) + (((pc) + (2))));
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (i_label9) = f_rel9;
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_bvd", "label9 0x%x", 'x', f_rel9, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_bltd:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE     SI f_rel9;
// OBSOLETE 
// OBSOLETE     f_rel9 = ((((EXTRACT_MSB0_INT (insn, 16, 8, 8)) << (1))) + (((pc) + (2))));
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (i_label9) = f_rel9;
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_bltd", "label9 0x%x", 'x', f_rel9, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_bled:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE     SI f_rel9;
// OBSOLETE 
// OBSOLETE     f_rel9 = ((((EXTRACT_MSB0_INT (insn, 16, 8, 8)) << (1))) + (((pc) + (2))));
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (i_label9) = f_rel9;
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_bled", "label9 0x%x", 'x', f_rel9, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_blsd:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE     SI f_rel9;
// OBSOLETE 
// OBSOLETE     f_rel9 = ((((EXTRACT_MSB0_INT (insn, 16, 8, 8)) << (1))) + (((pc) + (2))));
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (i_label9) = f_rel9;
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_blsd", "label9 0x%x", 'x', f_rel9, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_dmovr13:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_dmovr13pi.f
// OBSOLETE     USI f_dir10;
// OBSOLETE 
// OBSOLETE     f_dir10 = ((EXTRACT_MSB0_UINT (insn, 16, 8, 8)) << (2));
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_dir10) = f_dir10;
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_dmovr13", "f_dir10 0x%x", 'x', f_dir10, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_h_gr_SI_13) = 13;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_dmovr13h:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_dmovr13pih.f
// OBSOLETE     USI f_dir9;
// OBSOLETE 
// OBSOLETE     f_dir9 = ((EXTRACT_MSB0_UINT (insn, 16, 8, 8)) << (1));
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_dir9) = f_dir9;
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_dmovr13h", "f_dir9 0x%x", 'x', f_dir9, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_h_gr_SI_13) = 13;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_dmovr13b:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_dmovr13pib.f
// OBSOLETE     UINT f_dir8;
// OBSOLETE 
// OBSOLETE     f_dir8 = EXTRACT_MSB0_UINT (insn, 16, 8, 8);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_dir8) = f_dir8;
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_dmovr13b", "f_dir8 0x%x", 'x', f_dir8, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_h_gr_SI_13) = 13;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_dmovr13pi:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_dmovr13pi.f
// OBSOLETE     USI f_dir10;
// OBSOLETE 
// OBSOLETE     f_dir10 = ((EXTRACT_MSB0_UINT (insn, 16, 8, 8)) << (2));
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_dir10) = f_dir10;
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_dmovr13pi", "f_dir10 0x%x", 'x', f_dir10, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_h_gr_SI_13) = 13;
// OBSOLETE       FLD (out_h_gr_SI_13) = 13;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_dmovr13pih:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_dmovr13pih.f
// OBSOLETE     USI f_dir9;
// OBSOLETE 
// OBSOLETE     f_dir9 = ((EXTRACT_MSB0_UINT (insn, 16, 8, 8)) << (1));
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_dir9) = f_dir9;
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_dmovr13pih", "f_dir9 0x%x", 'x', f_dir9, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_h_gr_SI_13) = 13;
// OBSOLETE       FLD (out_h_gr_SI_13) = 13;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_dmovr13pib:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_dmovr13pib.f
// OBSOLETE     UINT f_dir8;
// OBSOLETE 
// OBSOLETE     f_dir8 = EXTRACT_MSB0_UINT (insn, 16, 8, 8);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_dir8) = f_dir8;
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_dmovr13pib", "f_dir8 0x%x", 'x', f_dir8, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_h_gr_SI_13) = 13;
// OBSOLETE       FLD (out_h_gr_SI_13) = 13;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_dmovr15pi:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_dmovr15pi.f
// OBSOLETE     USI f_dir10;
// OBSOLETE 
// OBSOLETE     f_dir10 = ((EXTRACT_MSB0_UINT (insn, 16, 8, 8)) << (2));
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_dir10) = f_dir10;
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_dmovr15pi", "f_dir10 0x%x", 'x', f_dir10, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_h_gr_SI_15) = 15;
// OBSOLETE       FLD (out_h_gr_SI_15) = 15;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_dmov2r13:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_dmovr13pi.f
// OBSOLETE     USI f_dir10;
// OBSOLETE 
// OBSOLETE     f_dir10 = ((EXTRACT_MSB0_UINT (insn, 16, 8, 8)) << (2));
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_dir10) = f_dir10;
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_dmov2r13", "f_dir10 0x%x", 'x', f_dir10, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (out_h_gr_SI_13) = 13;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_dmov2r13h:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_dmovr13pih.f
// OBSOLETE     USI f_dir9;
// OBSOLETE 
// OBSOLETE     f_dir9 = ((EXTRACT_MSB0_UINT (insn, 16, 8, 8)) << (1));
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_dir9) = f_dir9;
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_dmov2r13h", "f_dir9 0x%x", 'x', f_dir9, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (out_h_gr_SI_13) = 13;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_dmov2r13b:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_dmovr13pib.f
// OBSOLETE     UINT f_dir8;
// OBSOLETE 
// OBSOLETE     f_dir8 = EXTRACT_MSB0_UINT (insn, 16, 8, 8);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_dir8) = f_dir8;
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_dmov2r13b", "f_dir8 0x%x", 'x', f_dir8, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (out_h_gr_SI_13) = 13;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_dmov2r13pi:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_dmovr13pi.f
// OBSOLETE     USI f_dir10;
// OBSOLETE 
// OBSOLETE     f_dir10 = ((EXTRACT_MSB0_UINT (insn, 16, 8, 8)) << (2));
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_dir10) = f_dir10;
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_dmov2r13pi", "f_dir10 0x%x", 'x', f_dir10, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_h_gr_SI_13) = 13;
// OBSOLETE       FLD (out_h_gr_SI_13) = 13;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_dmov2r13pih:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_dmovr13pih.f
// OBSOLETE     USI f_dir9;
// OBSOLETE 
// OBSOLETE     f_dir9 = ((EXTRACT_MSB0_UINT (insn, 16, 8, 8)) << (1));
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_dir9) = f_dir9;
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_dmov2r13pih", "f_dir9 0x%x", 'x', f_dir9, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_h_gr_SI_13) = 13;
// OBSOLETE       FLD (out_h_gr_SI_13) = 13;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_dmov2r13pib:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_dmovr13pib.f
// OBSOLETE     UINT f_dir8;
// OBSOLETE 
// OBSOLETE     f_dir8 = EXTRACT_MSB0_UINT (insn, 16, 8, 8);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_dir8) = f_dir8;
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_dmov2r13pib", "f_dir8 0x%x", 'x', f_dir8, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_h_gr_SI_13) = 13;
// OBSOLETE       FLD (out_h_gr_SI_13) = 13;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_dmov2r15pd:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_dmovr15pi.f
// OBSOLETE     USI f_dir10;
// OBSOLETE 
// OBSOLETE     f_dir10 = ((EXTRACT_MSB0_UINT (insn, 16, 8, 8)) << (2));
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_dir10) = f_dir10;
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_dmov2r15pd", "f_dir10 0x%x", 'x', f_dir10, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_h_gr_SI_15) = 15;
// OBSOLETE       FLD (out_h_gr_SI_15) = 15;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_ldres:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add2.f
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_ldres", "f_Ri 0x%x", 'x', f_Ri, "Ri 0x%x", 'x', f_Ri, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_Ri) = f_Ri;
// OBSOLETE       FLD (out_Ri) = f_Ri;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_copop:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE #define FLD(f) abuf->fields.fmt_empty.f
// OBSOLETE     /* Contents of trailing part of insn.  */
// OBSOLETE     UINT word_1;
// OBSOLETE 
// OBSOLETE   word_1 = GETIMEMUHI (current_cpu, pc + 2);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_copop", (char *) 0));
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_andccr:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_int.f
// OBSOLETE     UINT f_u8;
// OBSOLETE 
// OBSOLETE     f_u8 = EXTRACT_MSB0_UINT (insn, 16, 8, 8);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_u8) = f_u8;
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_andccr", "f_u8 0x%x", 'x', f_u8, (char *) 0));
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_stilm:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_int.f
// OBSOLETE     UINT f_u8;
// OBSOLETE 
// OBSOLETE     f_u8 = EXTRACT_MSB0_UINT (insn, 16, 8, 8);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_u8) = f_u8;
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_stilm", "f_u8 0x%x", 'x', f_u8, (char *) 0));
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_addsp:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_addsp.f
// OBSOLETE     SI f_s10;
// OBSOLETE 
// OBSOLETE     f_s10 = ((EXTRACT_MSB0_INT (insn, 16, 8, 8)) << (2));
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_s10) = f_s10;
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_addsp", "f_s10 0x%x", 'x', f_s10, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_h_gr_SI_15) = 15;
// OBSOLETE       FLD (out_h_gr_SI_15) = 15;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_extsb:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add2.f
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_extsb", "f_Ri 0x%x", 'x', f_Ri, "Ri 0x%x", 'x', f_Ri, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_Ri) = f_Ri;
// OBSOLETE       FLD (out_Ri) = f_Ri;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_extub:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add2.f
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_extub", "f_Ri 0x%x", 'x', f_Ri, "Ri 0x%x", 'x', f_Ri, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_Ri) = f_Ri;
// OBSOLETE       FLD (out_Ri) = f_Ri;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_extsh:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add2.f
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_extsh", "f_Ri 0x%x", 'x', f_Ri, "Ri 0x%x", 'x', f_Ri, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_Ri) = f_Ri;
// OBSOLETE       FLD (out_Ri) = f_Ri;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_extuh:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add2.f
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_extuh", "f_Ri 0x%x", 'x', f_Ri, "Ri 0x%x", 'x', f_Ri, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_Ri) = f_Ri;
// OBSOLETE       FLD (out_Ri) = f_Ri;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_ldm0:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldm0.f
// OBSOLETE     UINT f_reglist_low_ld;
// OBSOLETE 
// OBSOLETE     f_reglist_low_ld = EXTRACT_MSB0_UINT (insn, 16, 8, 8);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_reglist_low_ld) = f_reglist_low_ld;
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_ldm0", "f_reglist_low_ld 0x%x", 'x', f_reglist_low_ld, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_h_gr_SI_15) = 15;
// OBSOLETE       FLD (out_h_gr_SI_0) = 0;
// OBSOLETE       FLD (out_h_gr_SI_1) = 1;
// OBSOLETE       FLD (out_h_gr_SI_15) = 15;
// OBSOLETE       FLD (out_h_gr_SI_2) = 2;
// OBSOLETE       FLD (out_h_gr_SI_3) = 3;
// OBSOLETE       FLD (out_h_gr_SI_4) = 4;
// OBSOLETE       FLD (out_h_gr_SI_5) = 5;
// OBSOLETE       FLD (out_h_gr_SI_6) = 6;
// OBSOLETE       FLD (out_h_gr_SI_7) = 7;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_ldm1:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldm1.f
// OBSOLETE     UINT f_reglist_hi_ld;
// OBSOLETE 
// OBSOLETE     f_reglist_hi_ld = EXTRACT_MSB0_UINT (insn, 16, 8, 8);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_reglist_hi_ld) = f_reglist_hi_ld;
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_ldm1", "f_reglist_hi_ld 0x%x", 'x', f_reglist_hi_ld, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_h_gr_SI_15) = 15;
// OBSOLETE       FLD (out_h_gr_SI_10) = 10;
// OBSOLETE       FLD (out_h_gr_SI_11) = 11;
// OBSOLETE       FLD (out_h_gr_SI_12) = 12;
// OBSOLETE       FLD (out_h_gr_SI_13) = 13;
// OBSOLETE       FLD (out_h_gr_SI_14) = 14;
// OBSOLETE       FLD (out_h_gr_SI_15) = 15;
// OBSOLETE       FLD (out_h_gr_SI_8) = 8;
// OBSOLETE       FLD (out_h_gr_SI_9) = 9;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_stm0:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_stm0.f
// OBSOLETE     UINT f_reglist_low_st;
// OBSOLETE 
// OBSOLETE     f_reglist_low_st = EXTRACT_MSB0_UINT (insn, 16, 8, 8);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_reglist_low_st) = f_reglist_low_st;
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_stm0", "f_reglist_low_st 0x%x", 'x', f_reglist_low_st, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_h_gr_SI_0) = 0;
// OBSOLETE       FLD (in_h_gr_SI_1) = 1;
// OBSOLETE       FLD (in_h_gr_SI_15) = 15;
// OBSOLETE       FLD (in_h_gr_SI_2) = 2;
// OBSOLETE       FLD (in_h_gr_SI_3) = 3;
// OBSOLETE       FLD (in_h_gr_SI_4) = 4;
// OBSOLETE       FLD (in_h_gr_SI_5) = 5;
// OBSOLETE       FLD (in_h_gr_SI_6) = 6;
// OBSOLETE       FLD (in_h_gr_SI_7) = 7;
// OBSOLETE       FLD (out_h_gr_SI_15) = 15;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_stm1:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_stm1.f
// OBSOLETE     UINT f_reglist_hi_st;
// OBSOLETE 
// OBSOLETE     f_reglist_hi_st = EXTRACT_MSB0_UINT (insn, 16, 8, 8);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_reglist_hi_st) = f_reglist_hi_st;
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_stm1", "f_reglist_hi_st 0x%x", 'x', f_reglist_hi_st, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_h_gr_SI_10) = 10;
// OBSOLETE       FLD (in_h_gr_SI_11) = 11;
// OBSOLETE       FLD (in_h_gr_SI_12) = 12;
// OBSOLETE       FLD (in_h_gr_SI_13) = 13;
// OBSOLETE       FLD (in_h_gr_SI_14) = 14;
// OBSOLETE       FLD (in_h_gr_SI_15) = 15;
// OBSOLETE       FLD (in_h_gr_SI_8) = 8;
// OBSOLETE       FLD (in_h_gr_SI_9) = 9;
// OBSOLETE       FLD (out_h_gr_SI_15) = 15;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_enter:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_enter.f
// OBSOLETE     USI f_u10;
// OBSOLETE 
// OBSOLETE     f_u10 = ((EXTRACT_MSB0_UINT (insn, 16, 8, 8)) << (2));
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_u10) = f_u10;
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_enter", "f_u10 0x%x", 'x', f_u10, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_h_gr_SI_14) = 14;
// OBSOLETE       FLD (in_h_gr_SI_15) = 15;
// OBSOLETE       FLD (out_h_gr_SI_14) = 14;
// OBSOLETE       FLD (out_h_gr_SI_15) = 15;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_leave:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE #define FLD(f) abuf->fields.sfmt_enter.f
// OBSOLETE 
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_leave", (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_h_gr_SI_14) = 14;
// OBSOLETE       FLD (in_h_gr_SI_15) = 15;
// OBSOLETE       FLD (out_h_gr_SI_14) = 14;
// OBSOLETE       FLD (out_h_gr_SI_15) = 15;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_xchb:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add.f
// OBSOLETE     UINT f_Rj;
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_Rj = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (f_Rj) = f_Rj;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   FLD (i_Rj) = & CPU (h_gr)[f_Rj];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_xchb", "f_Ri 0x%x", 'x', f_Ri, "f_Rj 0x%x", 'x', f_Rj, "Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_Ri) = f_Ri;
// OBSOLETE       FLD (in_Rj) = f_Rj;
// OBSOLETE       FLD (out_Ri) = f_Ri;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE }
@


1.5
log
@Obsolete fr30.
@
text
@@


1.4
log
@2001-11-14  Dave Brolley  <brolley@@redhat.com>

	* arch.c: Regenerate.
	* arch.h: Regenerate.
	* cpu.c: Regenerate.
	* cpu.h: Regenerate.
	* cpuall.h: Regenerate.
	* decode.c: Regenerate.
	* decode.h: Regenerate.
	* model.c: Regenerate.
	* sem-switch.c: Regenerate.
	* sem.c: Regenerate.
@
text
@d1 3453
a3453 3453
/* Simulator instruction decoder for fr30bf.

THIS FILE IS MACHINE GENERATED WITH CGEN.

Copyright 1996, 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.

This file is part of the GNU simulators.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License along
with this program; if not, write to the Free Software Foundation, Inc.,
59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

*/

#define WANT_CPU fr30bf
#define WANT_CPU_FR30BF

#include "sim-main.h"
#include "sim-assert.h"

/* The instruction descriptor array.
   This is computed at runtime.  Space for it is not malloc'd to save a
   teensy bit of cpu in the decoder.  Moving it to malloc space is trivial
   but won't be done until necessary (we don't currently support the runtime
   addition of instructions nor an SMP machine with different cpus).  */
static IDESC fr30bf_insn_data[FR30BF_INSN_XCHB + 1];

/* Commas between elements are contained in the macros.
   Some of these are conditionally compiled out.  */

static const struct insn_sem fr30bf_insn_sem[] =
{
  { VIRTUAL_INSN_X_INVALID, FR30BF_INSN_X_INVALID, FR30BF_SFMT_EMPTY },
  { VIRTUAL_INSN_X_AFTER, FR30BF_INSN_X_AFTER, FR30BF_SFMT_EMPTY },
  { VIRTUAL_INSN_X_BEFORE, FR30BF_INSN_X_BEFORE, FR30BF_SFMT_EMPTY },
  { VIRTUAL_INSN_X_CTI_CHAIN, FR30BF_INSN_X_CTI_CHAIN, FR30BF_SFMT_EMPTY },
  { VIRTUAL_INSN_X_CHAIN, FR30BF_INSN_X_CHAIN, FR30BF_SFMT_EMPTY },
  { VIRTUAL_INSN_X_BEGIN, FR30BF_INSN_X_BEGIN, FR30BF_SFMT_EMPTY },
  { FR30_INSN_ADD, FR30BF_INSN_ADD, FR30BF_SFMT_ADD },
  { FR30_INSN_ADDI, FR30BF_INSN_ADDI, FR30BF_SFMT_ADDI },
  { FR30_INSN_ADD2, FR30BF_INSN_ADD2, FR30BF_SFMT_ADD2 },
  { FR30_INSN_ADDC, FR30BF_INSN_ADDC, FR30BF_SFMT_ADDC },
  { FR30_INSN_ADDN, FR30BF_INSN_ADDN, FR30BF_SFMT_ADDN },
  { FR30_INSN_ADDNI, FR30BF_INSN_ADDNI, FR30BF_SFMT_ADDNI },
  { FR30_INSN_ADDN2, FR30BF_INSN_ADDN2, FR30BF_SFMT_ADDN2 },
  { FR30_INSN_SUB, FR30BF_INSN_SUB, FR30BF_SFMT_ADD },
  { FR30_INSN_SUBC, FR30BF_INSN_SUBC, FR30BF_SFMT_ADDC },
  { FR30_INSN_SUBN, FR30BF_INSN_SUBN, FR30BF_SFMT_ADDN },
  { FR30_INSN_CMP, FR30BF_INSN_CMP, FR30BF_SFMT_CMP },
  { FR30_INSN_CMPI, FR30BF_INSN_CMPI, FR30BF_SFMT_CMPI },
  { FR30_INSN_CMP2, FR30BF_INSN_CMP2, FR30BF_SFMT_CMP2 },
  { FR30_INSN_AND, FR30BF_INSN_AND, FR30BF_SFMT_AND },
  { FR30_INSN_OR, FR30BF_INSN_OR, FR30BF_SFMT_AND },
  { FR30_INSN_EOR, FR30BF_INSN_EOR, FR30BF_SFMT_AND },
  { FR30_INSN_ANDM, FR30BF_INSN_ANDM, FR30BF_SFMT_ANDM },
  { FR30_INSN_ANDH, FR30BF_INSN_ANDH, FR30BF_SFMT_ANDH },
  { FR30_INSN_ANDB, FR30BF_INSN_ANDB, FR30BF_SFMT_ANDB },
  { FR30_INSN_ORM, FR30BF_INSN_ORM, FR30BF_SFMT_ANDM },
  { FR30_INSN_ORH, FR30BF_INSN_ORH, FR30BF_SFMT_ANDH },
  { FR30_INSN_ORB, FR30BF_INSN_ORB, FR30BF_SFMT_ANDB },
  { FR30_INSN_EORM, FR30BF_INSN_EORM, FR30BF_SFMT_ANDM },
  { FR30_INSN_EORH, FR30BF_INSN_EORH, FR30BF_SFMT_ANDH },
  { FR30_INSN_EORB, FR30BF_INSN_EORB, FR30BF_SFMT_ANDB },
  { FR30_INSN_BANDL, FR30BF_INSN_BANDL, FR30BF_SFMT_BANDL },
  { FR30_INSN_BORL, FR30BF_INSN_BORL, FR30BF_SFMT_BANDL },
  { FR30_INSN_BEORL, FR30BF_INSN_BEORL, FR30BF_SFMT_BANDL },
  { FR30_INSN_BANDH, FR30BF_INSN_BANDH, FR30BF_SFMT_BANDL },
  { FR30_INSN_BORH, FR30BF_INSN_BORH, FR30BF_SFMT_BANDL },
  { FR30_INSN_BEORH, FR30BF_INSN_BEORH, FR30BF_SFMT_BANDL },
  { FR30_INSN_BTSTL, FR30BF_INSN_BTSTL, FR30BF_SFMT_BTSTL },
  { FR30_INSN_BTSTH, FR30BF_INSN_BTSTH, FR30BF_SFMT_BTSTL },
  { FR30_INSN_MUL, FR30BF_INSN_MUL, FR30BF_SFMT_MUL },
  { FR30_INSN_MULU, FR30BF_INSN_MULU, FR30BF_SFMT_MULU },
  { FR30_INSN_MULH, FR30BF_INSN_MULH, FR30BF_SFMT_MULH },
  { FR30_INSN_MULUH, FR30BF_INSN_MULUH, FR30BF_SFMT_MULH },
  { FR30_INSN_DIV0S, FR30BF_INSN_DIV0S, FR30BF_SFMT_DIV0S },
  { FR30_INSN_DIV0U, FR30BF_INSN_DIV0U, FR30BF_SFMT_DIV0U },
  { FR30_INSN_DIV1, FR30BF_INSN_DIV1, FR30BF_SFMT_DIV1 },
  { FR30_INSN_DIV2, FR30BF_INSN_DIV2, FR30BF_SFMT_DIV2 },
  { FR30_INSN_DIV3, FR30BF_INSN_DIV3, FR30BF_SFMT_DIV3 },
  { FR30_INSN_DIV4S, FR30BF_INSN_DIV4S, FR30BF_SFMT_DIV4S },
  { FR30_INSN_LSL, FR30BF_INSN_LSL, FR30BF_SFMT_LSL },
  { FR30_INSN_LSLI, FR30BF_INSN_LSLI, FR30BF_SFMT_LSLI },
  { FR30_INSN_LSL2, FR30BF_INSN_LSL2, FR30BF_SFMT_LSLI },
  { FR30_INSN_LSR, FR30BF_INSN_LSR, FR30BF_SFMT_LSL },
  { FR30_INSN_LSRI, FR30BF_INSN_LSRI, FR30BF_SFMT_LSLI },
  { FR30_INSN_LSR2, FR30BF_INSN_LSR2, FR30BF_SFMT_LSLI },
  { FR30_INSN_ASR, FR30BF_INSN_ASR, FR30BF_SFMT_LSL },
  { FR30_INSN_ASRI, FR30BF_INSN_ASRI, FR30BF_SFMT_LSLI },
  { FR30_INSN_ASR2, FR30BF_INSN_ASR2, FR30BF_SFMT_LSLI },
  { FR30_INSN_LDI8, FR30BF_INSN_LDI8, FR30BF_SFMT_LDI8 },
  { FR30_INSN_LDI20, FR30BF_INSN_LDI20, FR30BF_SFMT_LDI20 },
  { FR30_INSN_LDI32, FR30BF_INSN_LDI32, FR30BF_SFMT_LDI32 },
  { FR30_INSN_LD, FR30BF_INSN_LD, FR30BF_SFMT_LD },
  { FR30_INSN_LDUH, FR30BF_INSN_LDUH, FR30BF_SFMT_LDUH },
  { FR30_INSN_LDUB, FR30BF_INSN_LDUB, FR30BF_SFMT_LDUB },
  { FR30_INSN_LDR13, FR30BF_INSN_LDR13, FR30BF_SFMT_LDR13 },
  { FR30_INSN_LDR13UH, FR30BF_INSN_LDR13UH, FR30BF_SFMT_LDR13UH },
  { FR30_INSN_LDR13UB, FR30BF_INSN_LDR13UB, FR30BF_SFMT_LDR13UB },
  { FR30_INSN_LDR14, FR30BF_INSN_LDR14, FR30BF_SFMT_LDR14 },
  { FR30_INSN_LDR14UH, FR30BF_INSN_LDR14UH, FR30BF_SFMT_LDR14UH },
  { FR30_INSN_LDR14UB, FR30BF_INSN_LDR14UB, FR30BF_SFMT_LDR14UB },
  { FR30_INSN_LDR15, FR30BF_INSN_LDR15, FR30BF_SFMT_LDR15 },
  { FR30_INSN_LDR15GR, FR30BF_INSN_LDR15GR, FR30BF_SFMT_LDR15GR },
  { FR30_INSN_LDR15DR, FR30BF_INSN_LDR15DR, FR30BF_SFMT_LDR15DR },
  { FR30_INSN_LDR15PS, FR30BF_INSN_LDR15PS, FR30BF_SFMT_LDR15PS },
  { FR30_INSN_ST, FR30BF_INSN_ST, FR30BF_SFMT_ST },
  { FR30_INSN_STH, FR30BF_INSN_STH, FR30BF_SFMT_STH },
  { FR30_INSN_STB, FR30BF_INSN_STB, FR30BF_SFMT_STB },
  { FR30_INSN_STR13, FR30BF_INSN_STR13, FR30BF_SFMT_STR13 },
  { FR30_INSN_STR13H, FR30BF_INSN_STR13H, FR30BF_SFMT_STR13H },
  { FR30_INSN_STR13B, FR30BF_INSN_STR13B, FR30BF_SFMT_STR13B },
  { FR30_INSN_STR14, FR30BF_INSN_STR14, FR30BF_SFMT_STR14 },
  { FR30_INSN_STR14H, FR30BF_INSN_STR14H, FR30BF_SFMT_STR14H },
  { FR30_INSN_STR14B, FR30BF_INSN_STR14B, FR30BF_SFMT_STR14B },
  { FR30_INSN_STR15, FR30BF_INSN_STR15, FR30BF_SFMT_STR15 },
  { FR30_INSN_STR15GR, FR30BF_INSN_STR15GR, FR30BF_SFMT_STR15GR },
  { FR30_INSN_STR15DR, FR30BF_INSN_STR15DR, FR30BF_SFMT_STR15DR },
  { FR30_INSN_STR15PS, FR30BF_INSN_STR15PS, FR30BF_SFMT_STR15PS },
  { FR30_INSN_MOV, FR30BF_INSN_MOV, FR30BF_SFMT_MOV },
  { FR30_INSN_MOVDR, FR30BF_INSN_MOVDR, FR30BF_SFMT_MOVDR },
  { FR30_INSN_MOVPS, FR30BF_INSN_MOVPS, FR30BF_SFMT_MOVPS },
  { FR30_INSN_MOV2DR, FR30BF_INSN_MOV2DR, FR30BF_SFMT_MOV2DR },
  { FR30_INSN_MOV2PS, FR30BF_INSN_MOV2PS, FR30BF_SFMT_MOV2PS },
  { FR30_INSN_JMP, FR30BF_INSN_JMP, FR30BF_SFMT_JMP },
  { FR30_INSN_JMPD, FR30BF_INSN_JMPD, FR30BF_SFMT_JMP },
  { FR30_INSN_CALLR, FR30BF_INSN_CALLR, FR30BF_SFMT_CALLR },
  { FR30_INSN_CALLRD, FR30BF_INSN_CALLRD, FR30BF_SFMT_CALLR },
  { FR30_INSN_CALL, FR30BF_INSN_CALL, FR30BF_SFMT_CALL },
  { FR30_INSN_CALLD, FR30BF_INSN_CALLD, FR30BF_SFMT_CALL },
  { FR30_INSN_RET, FR30BF_INSN_RET, FR30BF_SFMT_RET },
  { FR30_INSN_RET_D, FR30BF_INSN_RET_D, FR30BF_SFMT_RET },
  { FR30_INSN_INT, FR30BF_INSN_INT, FR30BF_SFMT_INT },
  { FR30_INSN_INTE, FR30BF_INSN_INTE, FR30BF_SFMT_INTE },
  { FR30_INSN_RETI, FR30BF_INSN_RETI, FR30BF_SFMT_RETI },
  { FR30_INSN_BRAD, FR30BF_INSN_BRAD, FR30BF_SFMT_BRAD },
  { FR30_INSN_BRA, FR30BF_INSN_BRA, FR30BF_SFMT_BRAD },
  { FR30_INSN_BNOD, FR30BF_INSN_BNOD, FR30BF_SFMT_BNOD },
  { FR30_INSN_BNO, FR30BF_INSN_BNO, FR30BF_SFMT_BNOD },
  { FR30_INSN_BEQD, FR30BF_INSN_BEQD, FR30BF_SFMT_BEQD },
  { FR30_INSN_BEQ, FR30BF_INSN_BEQ, FR30BF_SFMT_BEQD },
  { FR30_INSN_BNED, FR30BF_INSN_BNED, FR30BF_SFMT_BEQD },
  { FR30_INSN_BNE, FR30BF_INSN_BNE, FR30BF_SFMT_BEQD },
  { FR30_INSN_BCD, FR30BF_INSN_BCD, FR30BF_SFMT_BCD },
  { FR30_INSN_BC, FR30BF_INSN_BC, FR30BF_SFMT_BCD },
  { FR30_INSN_BNCD, FR30BF_INSN_BNCD, FR30BF_SFMT_BCD },
  { FR30_INSN_BNC, FR30BF_INSN_BNC, FR30BF_SFMT_BCD },
  { FR30_INSN_BND, FR30BF_INSN_BND, FR30BF_SFMT_BND },
  { FR30_INSN_BN, FR30BF_INSN_BN, FR30BF_SFMT_BND },
  { FR30_INSN_BPD, FR30BF_INSN_BPD, FR30BF_SFMT_BND },
  { FR30_INSN_BP, FR30BF_INSN_BP, FR30BF_SFMT_BND },
  { FR30_INSN_BVD, FR30BF_INSN_BVD, FR30BF_SFMT_BVD },
  { FR30_INSN_BV, FR30BF_INSN_BV, FR30BF_SFMT_BVD },
  { FR30_INSN_BNVD, FR30BF_INSN_BNVD, FR30BF_SFMT_BVD },
  { FR30_INSN_BNV, FR30BF_INSN_BNV, FR30BF_SFMT_BVD },
  { FR30_INSN_BLTD, FR30BF_INSN_BLTD, FR30BF_SFMT_BLTD },
  { FR30_INSN_BLT, FR30BF_INSN_BLT, FR30BF_SFMT_BLTD },
  { FR30_INSN_BGED, FR30BF_INSN_BGED, FR30BF_SFMT_BLTD },
  { FR30_INSN_BGE, FR30BF_INSN_BGE, FR30BF_SFMT_BLTD },
  { FR30_INSN_BLED, FR30BF_INSN_BLED, FR30BF_SFMT_BLED },
  { FR30_INSN_BLE, FR30BF_INSN_BLE, FR30BF_SFMT_BLED },
  { FR30_INSN_BGTD, FR30BF_INSN_BGTD, FR30BF_SFMT_BLED },
  { FR30_INSN_BGT, FR30BF_INSN_BGT, FR30BF_SFMT_BLED },
  { FR30_INSN_BLSD, FR30BF_INSN_BLSD, FR30BF_SFMT_BLSD },
  { FR30_INSN_BLS, FR30BF_INSN_BLS, FR30BF_SFMT_BLSD },
  { FR30_INSN_BHID, FR30BF_INSN_BHID, FR30BF_SFMT_BLSD },
  { FR30_INSN_BHI, FR30BF_INSN_BHI, FR30BF_SFMT_BLSD },
  { FR30_INSN_DMOVR13, FR30BF_INSN_DMOVR13, FR30BF_SFMT_DMOVR13 },
  { FR30_INSN_DMOVR13H, FR30BF_INSN_DMOVR13H, FR30BF_SFMT_DMOVR13H },
  { FR30_INSN_DMOVR13B, FR30BF_INSN_DMOVR13B, FR30BF_SFMT_DMOVR13B },
  { FR30_INSN_DMOVR13PI, FR30BF_INSN_DMOVR13PI, FR30BF_SFMT_DMOVR13PI },
  { FR30_INSN_DMOVR13PIH, FR30BF_INSN_DMOVR13PIH, FR30BF_SFMT_DMOVR13PIH },
  { FR30_INSN_DMOVR13PIB, FR30BF_INSN_DMOVR13PIB, FR30BF_SFMT_DMOVR13PIB },
  { FR30_INSN_DMOVR15PI, FR30BF_INSN_DMOVR15PI, FR30BF_SFMT_DMOVR15PI },
  { FR30_INSN_DMOV2R13, FR30BF_INSN_DMOV2R13, FR30BF_SFMT_DMOV2R13 },
  { FR30_INSN_DMOV2R13H, FR30BF_INSN_DMOV2R13H, FR30BF_SFMT_DMOV2R13H },
  { FR30_INSN_DMOV2R13B, FR30BF_INSN_DMOV2R13B, FR30BF_SFMT_DMOV2R13B },
  { FR30_INSN_DMOV2R13PI, FR30BF_INSN_DMOV2R13PI, FR30BF_SFMT_DMOV2R13PI },
  { FR30_INSN_DMOV2R13PIH, FR30BF_INSN_DMOV2R13PIH, FR30BF_SFMT_DMOV2R13PIH },
  { FR30_INSN_DMOV2R13PIB, FR30BF_INSN_DMOV2R13PIB, FR30BF_SFMT_DMOV2R13PIB },
  { FR30_INSN_DMOV2R15PD, FR30BF_INSN_DMOV2R15PD, FR30BF_SFMT_DMOV2R15PD },
  { FR30_INSN_LDRES, FR30BF_INSN_LDRES, FR30BF_SFMT_LDRES },
  { FR30_INSN_STRES, FR30BF_INSN_STRES, FR30BF_SFMT_LDRES },
  { FR30_INSN_COPOP, FR30BF_INSN_COPOP, FR30BF_SFMT_COPOP },
  { FR30_INSN_COPLD, FR30BF_INSN_COPLD, FR30BF_SFMT_COPOP },
  { FR30_INSN_COPST, FR30BF_INSN_COPST, FR30BF_SFMT_COPOP },
  { FR30_INSN_COPSV, FR30BF_INSN_COPSV, FR30BF_SFMT_COPOP },
  { FR30_INSN_NOP, FR30BF_INSN_NOP, FR30BF_SFMT_BNOD },
  { FR30_INSN_ANDCCR, FR30BF_INSN_ANDCCR, FR30BF_SFMT_ANDCCR },
  { FR30_INSN_ORCCR, FR30BF_INSN_ORCCR, FR30BF_SFMT_ANDCCR },
  { FR30_INSN_STILM, FR30BF_INSN_STILM, FR30BF_SFMT_STILM },
  { FR30_INSN_ADDSP, FR30BF_INSN_ADDSP, FR30BF_SFMT_ADDSP },
  { FR30_INSN_EXTSB, FR30BF_INSN_EXTSB, FR30BF_SFMT_EXTSB },
  { FR30_INSN_EXTUB, FR30BF_INSN_EXTUB, FR30BF_SFMT_EXTUB },
  { FR30_INSN_EXTSH, FR30BF_INSN_EXTSH, FR30BF_SFMT_EXTSH },
  { FR30_INSN_EXTUH, FR30BF_INSN_EXTUH, FR30BF_SFMT_EXTUH },
  { FR30_INSN_LDM0, FR30BF_INSN_LDM0, FR30BF_SFMT_LDM0 },
  { FR30_INSN_LDM1, FR30BF_INSN_LDM1, FR30BF_SFMT_LDM1 },
  { FR30_INSN_STM0, FR30BF_INSN_STM0, FR30BF_SFMT_STM0 },
  { FR30_INSN_STM1, FR30BF_INSN_STM1, FR30BF_SFMT_STM1 },
  { FR30_INSN_ENTER, FR30BF_INSN_ENTER, FR30BF_SFMT_ENTER },
  { FR30_INSN_LEAVE, FR30BF_INSN_LEAVE, FR30BF_SFMT_LEAVE },
  { FR30_INSN_XCHB, FR30BF_INSN_XCHB, FR30BF_SFMT_XCHB },
};

static const struct insn_sem fr30bf_insn_sem_invalid = {
  VIRTUAL_INSN_X_INVALID, FR30BF_INSN_X_INVALID, FR30BF_SFMT_EMPTY
};

/* Initialize an IDESC from the compile-time computable parts.  */

static INLINE void
init_idesc (SIM_CPU *cpu, IDESC *id, const struct insn_sem *t)
{
  const CGEN_INSN *insn_table = CGEN_CPU_INSN_TABLE (CPU_CPU_DESC (cpu))->init_entries;

  id->num = t->index;
  id->sfmt = t->sfmt;
  if ((int) t->type <= 0)
    id->idata = & cgen_virtual_insn_table[- (int) t->type];
  else
    id->idata = & insn_table[t->type];
  id->attrs = CGEN_INSN_ATTRS (id->idata);
  /* Oh my god, a magic number.  */
  id->length = CGEN_INSN_BITSIZE (id->idata) / 8;

#if WITH_PROFILE_MODEL_P
  id->timing = & MODEL_TIMING (CPU_MODEL (cpu)) [t->index];
  {
    SIM_DESC sd = CPU_STATE (cpu);
    SIM_ASSERT (t->index == id->timing->num);
  }
#endif

  /* Semantic pointers are initialized elsewhere.  */
}

/* Initialize the instruction descriptor table.  */

void
fr30bf_init_idesc_table (SIM_CPU *cpu)
{
  IDESC *id,*tabend;
  const struct insn_sem *t,*tend;
  int tabsize = sizeof (fr30bf_insn_data) / sizeof (IDESC);
  IDESC *table = fr30bf_insn_data;

  memset (table, 0, tabsize * sizeof (IDESC));

  /* First set all entries to the `invalid insn'.  */
  t = & fr30bf_insn_sem_invalid;
  for (id = table, tabend = table + tabsize; id < tabend; ++id)
    init_idesc (cpu, id, t);

  /* Now fill in the values for the chosen cpu.  */
  for (t = fr30bf_insn_sem, tend = t + sizeof (fr30bf_insn_sem) / sizeof (*t);
       t != tend; ++t)
    {
      init_idesc (cpu, & table[t->index], t);
    }

  /* Link the IDESC table into the cpu.  */
  CPU_IDESC (cpu) = table;
}

/* Given an instruction, return a pointer to its IDESC entry.  */

const IDESC *
fr30bf_decode (SIM_CPU *current_cpu, IADDR pc,
              CGEN_INSN_INT base_insn,
              ARGBUF *abuf)
{
  /* Result of decoder.  */
  FR30BF_INSN_TYPE itype;

  {
    CGEN_INSN_INT insn = base_insn;

    {
      unsigned int val = (((insn >> 8) & (255 << 0)));
      switch (val)
      {
      case 0 : itype = FR30BF_INSN_LDR13;goto extract_sfmt_ldr13;
      case 1 : itype = FR30BF_INSN_LDR13UH;goto extract_sfmt_ldr13uh;
      case 2 : itype = FR30BF_INSN_LDR13UB;goto extract_sfmt_ldr13ub;
      case 3 : itype = FR30BF_INSN_LDR15;goto extract_sfmt_ldr15;
      case 4 : itype = FR30BF_INSN_LD;goto extract_sfmt_ld;
      case 5 : itype = FR30BF_INSN_LDUH;goto extract_sfmt_lduh;
      case 6 : itype = FR30BF_INSN_LDUB;goto extract_sfmt_ldub;
      case 7 :
        {
          unsigned int val = (((insn >> 6) & (1 << 1)) | ((insn >> 4) & (1 << 0)));
          switch (val)
          {
          case 0 : itype = FR30BF_INSN_LDR15GR;goto extract_sfmt_ldr15gr;
          case 1 : itype = FR30BF_INSN_MOV2PS;goto extract_sfmt_mov2ps;
          case 2 : itype = FR30BF_INSN_LDR15DR;goto extract_sfmt_ldr15dr;
          case 3 : itype = FR30BF_INSN_LDR15PS;goto extract_sfmt_ldr15ps;
          default : itype = FR30BF_INSN_X_INVALID; goto extract_sfmt_empty;
          }
        }
      case 8 : itype = FR30BF_INSN_DMOV2R13;goto extract_sfmt_dmov2r13;
      case 9 : itype = FR30BF_INSN_DMOV2R13H;goto extract_sfmt_dmov2r13h;
      case 10 : itype = FR30BF_INSN_DMOV2R13B;goto extract_sfmt_dmov2r13b;
      case 11 : itype = FR30BF_INSN_DMOV2R15PD;goto extract_sfmt_dmov2r15pd;
      case 12 : itype = FR30BF_INSN_DMOV2R13PI;goto extract_sfmt_dmov2r13pi;
      case 13 : itype = FR30BF_INSN_DMOV2R13PIH;goto extract_sfmt_dmov2r13pih;
      case 14 : itype = FR30BF_INSN_DMOV2R13PIB;goto extract_sfmt_dmov2r13pib;
      case 15 : itype = FR30BF_INSN_ENTER;goto extract_sfmt_enter;
      case 16 : itype = FR30BF_INSN_STR13;goto extract_sfmt_str13;
      case 17 : itype = FR30BF_INSN_STR13H;goto extract_sfmt_str13h;
      case 18 : itype = FR30BF_INSN_STR13B;goto extract_sfmt_str13b;
      case 19 : itype = FR30BF_INSN_STR15;goto extract_sfmt_str15;
      case 20 : itype = FR30BF_INSN_ST;goto extract_sfmt_st;
      case 21 : itype = FR30BF_INSN_STH;goto extract_sfmt_sth;
      case 22 : itype = FR30BF_INSN_STB;goto extract_sfmt_stb;
      case 23 :
        {
          unsigned int val = (((insn >> 6) & (1 << 1)) | ((insn >> 4) & (1 << 0)));
          switch (val)
          {
          case 0 : itype = FR30BF_INSN_STR15GR;goto extract_sfmt_str15gr;
          case 1 : itype = FR30BF_INSN_MOVPS;goto extract_sfmt_movps;
          case 2 : itype = FR30BF_INSN_STR15DR;goto extract_sfmt_str15dr;
          case 3 : itype = FR30BF_INSN_STR15PS;goto extract_sfmt_str15ps;
          default : itype = FR30BF_INSN_X_INVALID; goto extract_sfmt_empty;
          }
        }
      case 24 : itype = FR30BF_INSN_DMOVR13;goto extract_sfmt_dmovr13;
      case 25 : itype = FR30BF_INSN_DMOVR13H;goto extract_sfmt_dmovr13h;
      case 26 : itype = FR30BF_INSN_DMOVR13B;goto extract_sfmt_dmovr13b;
      case 27 : itype = FR30BF_INSN_DMOVR15PI;goto extract_sfmt_dmovr15pi;
      case 28 : itype = FR30BF_INSN_DMOVR13PI;goto extract_sfmt_dmovr13pi;
      case 29 : itype = FR30BF_INSN_DMOVR13PIH;goto extract_sfmt_dmovr13pih;
      case 30 : itype = FR30BF_INSN_DMOVR13PIB;goto extract_sfmt_dmovr13pib;
      case 31 : itype = FR30BF_INSN_INT;goto extract_sfmt_int;
      case 32 : /* fall through */
      case 33 : /* fall through */
      case 34 : /* fall through */
      case 35 : /* fall through */
      case 36 : /* fall through */
      case 37 : /* fall through */
      case 38 : /* fall through */
      case 39 : /* fall through */
      case 40 : /* fall through */
      case 41 : /* fall through */
      case 42 : /* fall through */
      case 43 : /* fall through */
      case 44 : /* fall through */
      case 45 : /* fall through */
      case 46 : /* fall through */
      case 47 : itype = FR30BF_INSN_LDR14;goto extract_sfmt_ldr14;
      case 48 : /* fall through */
      case 49 : /* fall through */
      case 50 : /* fall through */
      case 51 : /* fall through */
      case 52 : /* fall through */
      case 53 : /* fall through */
      case 54 : /* fall through */
      case 55 : /* fall through */
      case 56 : /* fall through */
      case 57 : /* fall through */
      case 58 : /* fall through */
      case 59 : /* fall through */
      case 60 : /* fall through */
      case 61 : /* fall through */
      case 62 : /* fall through */
      case 63 : itype = FR30BF_INSN_STR14;goto extract_sfmt_str14;
      case 64 : /* fall through */
      case 65 : /* fall through */
      case 66 : /* fall through */
      case 67 : /* fall through */
      case 68 : /* fall through */
      case 69 : /* fall through */
      case 70 : /* fall through */
      case 71 : /* fall through */
      case 72 : /* fall through */
      case 73 : /* fall through */
      case 74 : /* fall through */
      case 75 : /* fall through */
      case 76 : /* fall through */
      case 77 : /* fall through */
      case 78 : /* fall through */
      case 79 : itype = FR30BF_INSN_LDR14UH;goto extract_sfmt_ldr14uh;
      case 80 : /* fall through */
      case 81 : /* fall through */
      case 82 : /* fall through */
      case 83 : /* fall through */
      case 84 : /* fall through */
      case 85 : /* fall through */
      case 86 : /* fall through */
      case 87 : /* fall through */
      case 88 : /* fall through */
      case 89 : /* fall through */
      case 90 : /* fall through */
      case 91 : /* fall through */
      case 92 : /* fall through */
      case 93 : /* fall through */
      case 94 : /* fall through */
      case 95 : itype = FR30BF_INSN_STR14H;goto extract_sfmt_str14h;
      case 96 : /* fall through */
      case 97 : /* fall through */
      case 98 : /* fall through */
      case 99 : /* fall through */
      case 100 : /* fall through */
      case 101 : /* fall through */
      case 102 : /* fall through */
      case 103 : /* fall through */
      case 104 : /* fall through */
      case 105 : /* fall through */
      case 106 : /* fall through */
      case 107 : /* fall through */
      case 108 : /* fall through */
      case 109 : /* fall through */
      case 110 : /* fall through */
      case 111 : itype = FR30BF_INSN_LDR14UB;goto extract_sfmt_ldr14ub;
      case 112 : /* fall through */
      case 113 : /* fall through */
      case 114 : /* fall through */
      case 115 : /* fall through */
      case 116 : /* fall through */
      case 117 : /* fall through */
      case 118 : /* fall through */
      case 119 : /* fall through */
      case 120 : /* fall through */
      case 121 : /* fall through */
      case 122 : /* fall through */
      case 123 : /* fall through */
      case 124 : /* fall through */
      case 125 : /* fall through */
      case 126 : /* fall through */
      case 127 : itype = FR30BF_INSN_STR14B;goto extract_sfmt_str14b;
      case 128 : itype = FR30BF_INSN_BANDL;goto extract_sfmt_bandl;
      case 129 : itype = FR30BF_INSN_BANDH;goto extract_sfmt_bandl;
      case 130 : itype = FR30BF_INSN_AND;goto extract_sfmt_and;
      case 131 : itype = FR30BF_INSN_ANDCCR;goto extract_sfmt_andccr;
      case 132 : itype = FR30BF_INSN_ANDM;goto extract_sfmt_andm;
      case 133 : itype = FR30BF_INSN_ANDH;goto extract_sfmt_andh;
      case 134 : itype = FR30BF_INSN_ANDB;goto extract_sfmt_andb;
      case 135 : itype = FR30BF_INSN_STILM;goto extract_sfmt_stilm;
      case 136 : itype = FR30BF_INSN_BTSTL;goto extract_sfmt_btstl;
      case 137 : itype = FR30BF_INSN_BTSTH;goto extract_sfmt_btstl;
      case 138 : itype = FR30BF_INSN_XCHB;goto extract_sfmt_xchb;
      case 139 : itype = FR30BF_INSN_MOV;goto extract_sfmt_mov;
      case 140 : itype = FR30BF_INSN_LDM0;goto extract_sfmt_ldm0;
      case 141 : itype = FR30BF_INSN_LDM1;goto extract_sfmt_ldm1;
      case 142 : itype = FR30BF_INSN_STM0;goto extract_sfmt_stm0;
      case 143 : itype = FR30BF_INSN_STM1;goto extract_sfmt_stm1;
      case 144 : itype = FR30BF_INSN_BORL;goto extract_sfmt_bandl;
      case 145 : itype = FR30BF_INSN_BORH;goto extract_sfmt_bandl;
      case 146 : itype = FR30BF_INSN_OR;goto extract_sfmt_and;
      case 147 : itype = FR30BF_INSN_ORCCR;goto extract_sfmt_andccr;
      case 148 : itype = FR30BF_INSN_ORM;goto extract_sfmt_andm;
      case 149 : itype = FR30BF_INSN_ORH;goto extract_sfmt_andh;
      case 150 : itype = FR30BF_INSN_ORB;goto extract_sfmt_andb;
      case 151 :
        {
          unsigned int val = (((insn >> 4) & (15 << 0)));
          switch (val)
          {
          case 0 : itype = FR30BF_INSN_JMP;goto extract_sfmt_jmp;
          case 1 : itype = FR30BF_INSN_CALLR;goto extract_sfmt_callr;
          case 2 : itype = FR30BF_INSN_RET;goto extract_sfmt_ret;
          case 3 : itype = FR30BF_INSN_RETI;goto extract_sfmt_reti;
          case 4 : itype = FR30BF_INSN_DIV0S;goto extract_sfmt_div0s;
          case 5 : itype = FR30BF_INSN_DIV0U;goto extract_sfmt_div0u;
          case 6 : itype = FR30BF_INSN_DIV1;goto extract_sfmt_div1;
          case 7 : itype = FR30BF_INSN_DIV2;goto extract_sfmt_div2;
          case 8 : itype = FR30BF_INSN_EXTSB;goto extract_sfmt_extsb;
          case 9 : itype = FR30BF_INSN_EXTUB;goto extract_sfmt_extub;
          case 10 : itype = FR30BF_INSN_EXTSH;goto extract_sfmt_extsh;
          case 11 : itype = FR30BF_INSN_EXTUH;goto extract_sfmt_extuh;
          default : itype = FR30BF_INSN_X_INVALID; goto extract_sfmt_empty;
          }
        }
      case 152 : itype = FR30BF_INSN_BEORL;goto extract_sfmt_bandl;
      case 153 : itype = FR30BF_INSN_BEORH;goto extract_sfmt_bandl;
      case 154 : itype = FR30BF_INSN_EOR;goto extract_sfmt_and;
      case 155 : itype = FR30BF_INSN_LDI20;goto extract_sfmt_ldi20;
      case 156 : itype = FR30BF_INSN_EORM;goto extract_sfmt_andm;
      case 157 : itype = FR30BF_INSN_EORH;goto extract_sfmt_andh;
      case 158 : itype = FR30BF_INSN_EORB;goto extract_sfmt_andb;
      case 159 :
        {
          unsigned int val = (((insn >> 4) & (15 << 0)));
          switch (val)
          {
          case 0 : itype = FR30BF_INSN_JMPD;goto extract_sfmt_jmp;
          case 1 : itype = FR30BF_INSN_CALLRD;goto extract_sfmt_callr;
          case 2 : itype = FR30BF_INSN_RET_D;goto extract_sfmt_ret;
          case 3 : itype = FR30BF_INSN_INTE;goto extract_sfmt_inte;
          case 6 : itype = FR30BF_INSN_DIV3;goto extract_sfmt_div3;
          case 7 : itype = FR30BF_INSN_DIV4S;goto extract_sfmt_div4s;
          case 8 : itype = FR30BF_INSN_LDI32;goto extract_sfmt_ldi32;
          case 9 : itype = FR30BF_INSN_LEAVE;goto extract_sfmt_leave;
          case 10 : itype = FR30BF_INSN_NOP;goto extract_sfmt_bnod;
          case 12 : itype = FR30BF_INSN_COPOP;goto extract_sfmt_copop;
          case 13 : itype = FR30BF_INSN_COPLD;goto extract_sfmt_copop;
          case 14 : itype = FR30BF_INSN_COPST;goto extract_sfmt_copop;
          case 15 : itype = FR30BF_INSN_COPSV;goto extract_sfmt_copop;
          default : itype = FR30BF_INSN_X_INVALID; goto extract_sfmt_empty;
          }
        }
      case 160 : itype = FR30BF_INSN_ADDNI;goto extract_sfmt_addni;
      case 161 : itype = FR30BF_INSN_ADDN2;goto extract_sfmt_addn2;
      case 162 : itype = FR30BF_INSN_ADDN;goto extract_sfmt_addn;
      case 163 : itype = FR30BF_INSN_ADDSP;goto extract_sfmt_addsp;
      case 164 : itype = FR30BF_INSN_ADDI;goto extract_sfmt_addi;
      case 165 : itype = FR30BF_INSN_ADD2;goto extract_sfmt_add2;
      case 166 : itype = FR30BF_INSN_ADD;goto extract_sfmt_add;
      case 167 : itype = FR30BF_INSN_ADDC;goto extract_sfmt_addc;
      case 168 : itype = FR30BF_INSN_CMPI;goto extract_sfmt_cmpi;
      case 169 : itype = FR30BF_INSN_CMP2;goto extract_sfmt_cmp2;
      case 170 : itype = FR30BF_INSN_CMP;goto extract_sfmt_cmp;
      case 171 : itype = FR30BF_INSN_MULU;goto extract_sfmt_mulu;
      case 172 : itype = FR30BF_INSN_SUB;goto extract_sfmt_add;
      case 173 : itype = FR30BF_INSN_SUBC;goto extract_sfmt_addc;
      case 174 : itype = FR30BF_INSN_SUBN;goto extract_sfmt_addn;
      case 175 : itype = FR30BF_INSN_MUL;goto extract_sfmt_mul;
      case 176 : itype = FR30BF_INSN_LSRI;goto extract_sfmt_lsli;
      case 177 : itype = FR30BF_INSN_LSR2;goto extract_sfmt_lsli;
      case 178 : itype = FR30BF_INSN_LSR;goto extract_sfmt_lsl;
      case 179 : itype = FR30BF_INSN_MOV2DR;goto extract_sfmt_mov2dr;
      case 180 : itype = FR30BF_INSN_LSLI;goto extract_sfmt_lsli;
      case 181 : itype = FR30BF_INSN_LSL2;goto extract_sfmt_lsli;
      case 182 : itype = FR30BF_INSN_LSL;goto extract_sfmt_lsl;
      case 183 : itype = FR30BF_INSN_MOVDR;goto extract_sfmt_movdr;
      case 184 : itype = FR30BF_INSN_ASRI;goto extract_sfmt_lsli;
      case 185 : itype = FR30BF_INSN_ASR2;goto extract_sfmt_lsli;
      case 186 : itype = FR30BF_INSN_ASR;goto extract_sfmt_lsl;
      case 187 : itype = FR30BF_INSN_MULUH;goto extract_sfmt_mulh;
      case 188 : itype = FR30BF_INSN_LDRES;goto extract_sfmt_ldres;
      case 189 : itype = FR30BF_INSN_STRES;goto extract_sfmt_ldres;
      case 191 : itype = FR30BF_INSN_MULH;goto extract_sfmt_mulh;
      case 192 : /* fall through */
      case 193 : /* fall through */
      case 194 : /* fall through */
      case 195 : /* fall through */
      case 196 : /* fall through */
      case 197 : /* fall through */
      case 198 : /* fall through */
      case 199 : /* fall through */
      case 200 : /* fall through */
      case 201 : /* fall through */
      case 202 : /* fall through */
      case 203 : /* fall through */
      case 204 : /* fall through */
      case 205 : /* fall through */
      case 206 : /* fall through */
      case 207 : itype = FR30BF_INSN_LDI8;goto extract_sfmt_ldi8;
      case 208 : /* fall through */
      case 209 : /* fall through */
      case 210 : /* fall through */
      case 211 : /* fall through */
      case 212 : /* fall through */
      case 213 : /* fall through */
      case 214 : /* fall through */
      case 215 : itype = FR30BF_INSN_CALL;goto extract_sfmt_call;
      case 216 : /* fall through */
      case 217 : /* fall through */
      case 218 : /* fall through */
      case 219 : /* fall through */
      case 220 : /* fall through */
      case 221 : /* fall through */
      case 222 : /* fall through */
      case 223 : itype = FR30BF_INSN_CALLD;goto extract_sfmt_call;
      case 224 : itype = FR30BF_INSN_BRA;goto extract_sfmt_brad;
      case 225 : itype = FR30BF_INSN_BNO;goto extract_sfmt_bnod;
      case 226 : itype = FR30BF_INSN_BEQ;goto extract_sfmt_beqd;
      case 227 : itype = FR30BF_INSN_BNE;goto extract_sfmt_beqd;
      case 228 : itype = FR30BF_INSN_BC;goto extract_sfmt_bcd;
      case 229 : itype = FR30BF_INSN_BNC;goto extract_sfmt_bcd;
      case 230 : itype = FR30BF_INSN_BN;goto extract_sfmt_bnd;
      case 231 : itype = FR30BF_INSN_BP;goto extract_sfmt_bnd;
      case 232 : itype = FR30BF_INSN_BV;goto extract_sfmt_bvd;
      case 233 : itype = FR30BF_INSN_BNV;goto extract_sfmt_bvd;
      case 234 : itype = FR30BF_INSN_BLT;goto extract_sfmt_bltd;
      case 235 : itype = FR30BF_INSN_BGE;goto extract_sfmt_bltd;
      case 236 : itype = FR30BF_INSN_BLE;goto extract_sfmt_bled;
      case 237 : itype = FR30BF_INSN_BGT;goto extract_sfmt_bled;
      case 238 : itype = FR30BF_INSN_BLS;goto extract_sfmt_blsd;
      case 239 : itype = FR30BF_INSN_BHI;goto extract_sfmt_blsd;
      case 240 : itype = FR30BF_INSN_BRAD;goto extract_sfmt_brad;
      case 241 : itype = FR30BF_INSN_BNOD;goto extract_sfmt_bnod;
      case 242 : itype = FR30BF_INSN_BEQD;goto extract_sfmt_beqd;
      case 243 : itype = FR30BF_INSN_BNED;goto extract_sfmt_beqd;
      case 244 : itype = FR30BF_INSN_BCD;goto extract_sfmt_bcd;
      case 245 : itype = FR30BF_INSN_BNCD;goto extract_sfmt_bcd;
      case 246 : itype = FR30BF_INSN_BND;goto extract_sfmt_bnd;
      case 247 : itype = FR30BF_INSN_BPD;goto extract_sfmt_bnd;
      case 248 : itype = FR30BF_INSN_BVD;goto extract_sfmt_bvd;
      case 249 : itype = FR30BF_INSN_BNVD;goto extract_sfmt_bvd;
      case 250 : itype = FR30BF_INSN_BLTD;goto extract_sfmt_bltd;
      case 251 : itype = FR30BF_INSN_BGED;goto extract_sfmt_bltd;
      case 252 : itype = FR30BF_INSN_BLED;goto extract_sfmt_bled;
      case 253 : itype = FR30BF_INSN_BGTD;goto extract_sfmt_bled;
      case 254 : itype = FR30BF_INSN_BLSD;goto extract_sfmt_blsd;
      case 255 : itype = FR30BF_INSN_BHID;goto extract_sfmt_blsd;
      default : itype = FR30BF_INSN_X_INVALID; goto extract_sfmt_empty;
      }
    }
  }

  /* The instruction has been decoded, now extract the fields.  */

 extract_sfmt_empty:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
#define FLD(f) abuf->fields.fmt_empty.f


  /* Record the fields for the semantic handler.  */
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_empty", (char *) 0));

#undef FLD
    return idesc;
  }

 extract_sfmt_add:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.sfmt_add.f
    UINT f_Rj;
    UINT f_Ri;

    f_Rj = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);

  /* Record the fields for the semantic handler.  */
  FLD (f_Ri) = f_Ri;
  FLD (f_Rj) = f_Rj;
  FLD (i_Ri) = & CPU (h_gr)[f_Ri];
  FLD (i_Rj) = & CPU (h_gr)[f_Rj];
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_add", "f_Ri 0x%x", 'x', f_Ri, "f_Rj 0x%x", 'x', f_Rj, "Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
      FLD (in_Ri) = f_Ri;
      FLD (in_Rj) = f_Rj;
      FLD (out_Ri) = f_Ri;
    }
#endif
#undef FLD
    return idesc;
  }

 extract_sfmt_addi:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.sfmt_addi.f
    UINT f_u4;
    UINT f_Ri;

    f_u4 = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);

  /* Record the fields for the semantic handler.  */
  FLD (f_Ri) = f_Ri;
  FLD (f_u4) = f_u4;
  FLD (i_Ri) = & CPU (h_gr)[f_Ri];
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_addi", "f_Ri 0x%x", 'x', f_Ri, "f_u4 0x%x", 'x', f_u4, "Ri 0x%x", 'x', f_Ri, (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
      FLD (in_Ri) = f_Ri;
      FLD (out_Ri) = f_Ri;
    }
#endif
#undef FLD
    return idesc;
  }

 extract_sfmt_add2:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.sfmt_add2.f
    SI f_m4;
    UINT f_Ri;

    f_m4 = ((EXTRACT_MSB0_UINT (insn, 16, 8, 4)) | (((-1) << (4))));
    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);

  /* Record the fields for the semantic handler.  */
  FLD (f_Ri) = f_Ri;
  FLD (f_m4) = f_m4;
  FLD (i_Ri) = & CPU (h_gr)[f_Ri];
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_add2", "f_Ri 0x%x", 'x', f_Ri, "f_m4 0x%x", 'x', f_m4, "Ri 0x%x", 'x', f_Ri, (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
      FLD (in_Ri) = f_Ri;
      FLD (out_Ri) = f_Ri;
    }
#endif
#undef FLD
    return idesc;
  }

 extract_sfmt_addc:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.sfmt_add.f
    UINT f_Rj;
    UINT f_Ri;

    f_Rj = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);

  /* Record the fields for the semantic handler.  */
  FLD (f_Ri) = f_Ri;
  FLD (f_Rj) = f_Rj;
  FLD (i_Ri) = & CPU (h_gr)[f_Ri];
  FLD (i_Rj) = & CPU (h_gr)[f_Rj];
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_addc", "f_Ri 0x%x", 'x', f_Ri, "f_Rj 0x%x", 'x', f_Rj, "Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
      FLD (in_Ri) = f_Ri;
      FLD (in_Rj) = f_Rj;
      FLD (out_Ri) = f_Ri;
    }
#endif
#undef FLD
    return idesc;
  }

 extract_sfmt_addn:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.sfmt_add.f
    UINT f_Rj;
    UINT f_Ri;

    f_Rj = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);

  /* Record the fields for the semantic handler.  */
  FLD (f_Ri) = f_Ri;
  FLD (f_Rj) = f_Rj;
  FLD (i_Ri) = & CPU (h_gr)[f_Ri];
  FLD (i_Rj) = & CPU (h_gr)[f_Rj];
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_addn", "f_Ri 0x%x", 'x', f_Ri, "f_Rj 0x%x", 'x', f_Rj, "Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
      FLD (in_Ri) = f_Ri;
      FLD (in_Rj) = f_Rj;
      FLD (out_Ri) = f_Ri;
    }
#endif
#undef FLD
    return idesc;
  }

 extract_sfmt_addni:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.sfmt_addi.f
    UINT f_u4;
    UINT f_Ri;

    f_u4 = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);

  /* Record the fields for the semantic handler.  */
  FLD (f_Ri) = f_Ri;
  FLD (f_u4) = f_u4;
  FLD (i_Ri) = & CPU (h_gr)[f_Ri];
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_addni", "f_Ri 0x%x", 'x', f_Ri, "f_u4 0x%x", 'x', f_u4, "Ri 0x%x", 'x', f_Ri, (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
      FLD (in_Ri) = f_Ri;
      FLD (out_Ri) = f_Ri;
    }
#endif
#undef FLD
    return idesc;
  }

 extract_sfmt_addn2:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.sfmt_add2.f
    SI f_m4;
    UINT f_Ri;

    f_m4 = ((EXTRACT_MSB0_UINT (insn, 16, 8, 4)) | (((-1) << (4))));
    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);

  /* Record the fields for the semantic handler.  */
  FLD (f_Ri) = f_Ri;
  FLD (f_m4) = f_m4;
  FLD (i_Ri) = & CPU (h_gr)[f_Ri];
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_addn2", "f_Ri 0x%x", 'x', f_Ri, "f_m4 0x%x", 'x', f_m4, "Ri 0x%x", 'x', f_Ri, (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
      FLD (in_Ri) = f_Ri;
      FLD (out_Ri) = f_Ri;
    }
#endif
#undef FLD
    return idesc;
  }

 extract_sfmt_cmp:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.sfmt_str13.f
    UINT f_Rj;
    UINT f_Ri;

    f_Rj = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);

  /* Record the fields for the semantic handler.  */
  FLD (f_Ri) = f_Ri;
  FLD (f_Rj) = f_Rj;
  FLD (i_Ri) = & CPU (h_gr)[f_Ri];
  FLD (i_Rj) = & CPU (h_gr)[f_Rj];
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_cmp", "f_Ri 0x%x", 'x', f_Ri, "f_Rj 0x%x", 'x', f_Rj, "Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
      FLD (in_Ri) = f_Ri;
      FLD (in_Rj) = f_Rj;
    }
#endif
#undef FLD
    return idesc;
  }

 extract_sfmt_cmpi:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.sfmt_addi.f
    UINT f_u4;
    UINT f_Ri;

    f_u4 = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);

  /* Record the fields for the semantic handler.  */
  FLD (f_Ri) = f_Ri;
  FLD (f_u4) = f_u4;
  FLD (i_Ri) = & CPU (h_gr)[f_Ri];
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_cmpi", "f_Ri 0x%x", 'x', f_Ri, "f_u4 0x%x", 'x', f_u4, "Ri 0x%x", 'x', f_Ri, (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
      FLD (in_Ri) = f_Ri;
    }
#endif
#undef FLD
    return idesc;
  }

 extract_sfmt_cmp2:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.sfmt_add2.f
    SI f_m4;
    UINT f_Ri;

    f_m4 = ((EXTRACT_MSB0_UINT (insn, 16, 8, 4)) | (((-1) << (4))));
    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);

  /* Record the fields for the semantic handler.  */
  FLD (f_Ri) = f_Ri;
  FLD (f_m4) = f_m4;
  FLD (i_Ri) = & CPU (h_gr)[f_Ri];
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_cmp2", "f_Ri 0x%x", 'x', f_Ri, "f_m4 0x%x", 'x', f_m4, "Ri 0x%x", 'x', f_Ri, (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
      FLD (in_Ri) = f_Ri;
    }
#endif
#undef FLD
    return idesc;
  }

 extract_sfmt_and:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.sfmt_add.f
    UINT f_Rj;
    UINT f_Ri;

    f_Rj = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);

  /* Record the fields for the semantic handler.  */
  FLD (f_Ri) = f_Ri;
  FLD (f_Rj) = f_Rj;
  FLD (i_Ri) = & CPU (h_gr)[f_Ri];
  FLD (i_Rj) = & CPU (h_gr)[f_Rj];
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_and", "f_Ri 0x%x", 'x', f_Ri, "f_Rj 0x%x", 'x', f_Rj, "Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
      FLD (in_Ri) = f_Ri;
      FLD (in_Rj) = f_Rj;
      FLD (out_Ri) = f_Ri;
    }
#endif
#undef FLD
    return idesc;
  }

 extract_sfmt_andm:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.sfmt_str13.f
    UINT f_Rj;
    UINT f_Ri;

    f_Rj = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);

  /* Record the fields for the semantic handler.  */
  FLD (f_Ri) = f_Ri;
  FLD (f_Rj) = f_Rj;
  FLD (i_Ri) = & CPU (h_gr)[f_Ri];
  FLD (i_Rj) = & CPU (h_gr)[f_Rj];
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_andm", "f_Ri 0x%x", 'x', f_Ri, "f_Rj 0x%x", 'x', f_Rj, "Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
      FLD (in_Ri) = f_Ri;
      FLD (in_Rj) = f_Rj;
    }
#endif
#undef FLD
    return idesc;
  }

 extract_sfmt_andh:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.sfmt_str13.f
    UINT f_Rj;
    UINT f_Ri;

    f_Rj = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);

  /* Record the fields for the semantic handler.  */
  FLD (f_Ri) = f_Ri;
  FLD (f_Rj) = f_Rj;
  FLD (i_Ri) = & CPU (h_gr)[f_Ri];
  FLD (i_Rj) = & CPU (h_gr)[f_Rj];
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_andh", "f_Ri 0x%x", 'x', f_Ri, "f_Rj 0x%x", 'x', f_Rj, "Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
      FLD (in_Ri) = f_Ri;
      FLD (in_Rj) = f_Rj;
    }
#endif
#undef FLD
    return idesc;
  }

 extract_sfmt_andb:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.sfmt_str13.f
    UINT f_Rj;
    UINT f_Ri;

    f_Rj = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);

  /* Record the fields for the semantic handler.  */
  FLD (f_Ri) = f_Ri;
  FLD (f_Rj) = f_Rj;
  FLD (i_Ri) = & CPU (h_gr)[f_Ri];
  FLD (i_Rj) = & CPU (h_gr)[f_Rj];
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_andb", "f_Ri 0x%x", 'x', f_Ri, "f_Rj 0x%x", 'x', f_Rj, "Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
      FLD (in_Ri) = f_Ri;
      FLD (in_Rj) = f_Rj;
    }
#endif
#undef FLD
    return idesc;
  }

 extract_sfmt_bandl:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.sfmt_addi.f
    UINT f_u4;
    UINT f_Ri;

    f_u4 = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);

  /* Record the fields for the semantic handler.  */
  FLD (f_Ri) = f_Ri;
  FLD (f_u4) = f_u4;
  FLD (i_Ri) = & CPU (h_gr)[f_Ri];
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_bandl", "f_Ri 0x%x", 'x', f_Ri, "f_u4 0x%x", 'x', f_u4, "Ri 0x%x", 'x', f_Ri, (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
      FLD (in_Ri) = f_Ri;
    }
#endif
#undef FLD
    return idesc;
  }

 extract_sfmt_btstl:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.sfmt_addi.f
    UINT f_u4;
    UINT f_Ri;

    f_u4 = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);

  /* Record the fields for the semantic handler.  */
  FLD (f_Ri) = f_Ri;
  FLD (f_u4) = f_u4;
  FLD (i_Ri) = & CPU (h_gr)[f_Ri];
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_btstl", "f_Ri 0x%x", 'x', f_Ri, "f_u4 0x%x", 'x', f_u4, "Ri 0x%x", 'x', f_Ri, (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
      FLD (in_Ri) = f_Ri;
    }
#endif
#undef FLD
    return idesc;
  }

 extract_sfmt_mul:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.sfmt_str13.f
    UINT f_Rj;
    UINT f_Ri;

    f_Rj = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);

  /* Record the fields for the semantic handler.  */
  FLD (f_Ri) = f_Ri;
  FLD (f_Rj) = f_Rj;
  FLD (i_Ri) = & CPU (h_gr)[f_Ri];
  FLD (i_Rj) = & CPU (h_gr)[f_Rj];
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_mul", "f_Ri 0x%x", 'x', f_Ri, "f_Rj 0x%x", 'x', f_Rj, "Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
      FLD (in_Ri) = f_Ri;
      FLD (in_Rj) = f_Rj;
    }
#endif
#undef FLD
    return idesc;
  }

 extract_sfmt_mulu:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.sfmt_str13.f
    UINT f_Rj;
    UINT f_Ri;

    f_Rj = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);

  /* Record the fields for the semantic handler.  */
  FLD (f_Ri) = f_Ri;
  FLD (f_Rj) = f_Rj;
  FLD (i_Ri) = & CPU (h_gr)[f_Ri];
  FLD (i_Rj) = & CPU (h_gr)[f_Rj];
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_mulu", "f_Ri 0x%x", 'x', f_Ri, "f_Rj 0x%x", 'x', f_Rj, "Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
      FLD (in_Ri) = f_Ri;
      FLD (in_Rj) = f_Rj;
    }
#endif
#undef FLD
    return idesc;
  }

 extract_sfmt_mulh:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.sfmt_str13.f
    UINT f_Rj;
    UINT f_Ri;

    f_Rj = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);

  /* Record the fields for the semantic handler.  */
  FLD (f_Ri) = f_Ri;
  FLD (f_Rj) = f_Rj;
  FLD (i_Ri) = & CPU (h_gr)[f_Ri];
  FLD (i_Rj) = & CPU (h_gr)[f_Rj];
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_mulh", "f_Ri 0x%x", 'x', f_Ri, "f_Rj 0x%x", 'x', f_Rj, "Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
      FLD (in_Ri) = f_Ri;
      FLD (in_Rj) = f_Rj;
    }
#endif
#undef FLD
    return idesc;
  }

 extract_sfmt_div0s:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.sfmt_mov2dr.f
    UINT f_Ri;

    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);

  /* Record the fields for the semantic handler.  */
  FLD (f_Ri) = f_Ri;
  FLD (i_Ri) = & CPU (h_gr)[f_Ri];
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_div0s", "f_Ri 0x%x", 'x', f_Ri, "Ri 0x%x", 'x', f_Ri, (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
      FLD (in_Ri) = f_Ri;
    }
#endif
#undef FLD
    return idesc;
  }

 extract_sfmt_div0u:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
#define FLD(f) abuf->fields.fmt_empty.f


  /* Record the fields for the semantic handler.  */
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_div0u", (char *) 0));

#undef FLD
    return idesc;
  }

 extract_sfmt_div1:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.sfmt_mov2dr.f
    UINT f_Ri;

    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);

  /* Record the fields for the semantic handler.  */
  FLD (f_Ri) = f_Ri;
  FLD (i_Ri) = & CPU (h_gr)[f_Ri];
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_div1", "f_Ri 0x%x", 'x', f_Ri, "Ri 0x%x", 'x', f_Ri, (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
      FLD (in_Ri) = f_Ri;
    }
#endif
#undef FLD
    return idesc;
  }

 extract_sfmt_div2:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.sfmt_mov2dr.f
    UINT f_Ri;

    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);

  /* Record the fields for the semantic handler.  */
  FLD (f_Ri) = f_Ri;
  FLD (i_Ri) = & CPU (h_gr)[f_Ri];
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_div2", "f_Ri 0x%x", 'x', f_Ri, "Ri 0x%x", 'x', f_Ri, (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
      FLD (in_Ri) = f_Ri;
    }
#endif
#undef FLD
    return idesc;
  }

 extract_sfmt_div3:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
#define FLD(f) abuf->fields.fmt_empty.f


  /* Record the fields for the semantic handler.  */
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_div3", (char *) 0));

#undef FLD
    return idesc;
  }

 extract_sfmt_div4s:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
#define FLD(f) abuf->fields.fmt_empty.f


  /* Record the fields for the semantic handler.  */
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_div4s", (char *) 0));

#undef FLD
    return idesc;
  }

 extract_sfmt_lsl:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.sfmt_add.f
    UINT f_Rj;
    UINT f_Ri;

    f_Rj = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);

  /* Record the fields for the semantic handler.  */
  FLD (f_Ri) = f_Ri;
  FLD (f_Rj) = f_Rj;
  FLD (i_Ri) = & CPU (h_gr)[f_Ri];
  FLD (i_Rj) = & CPU (h_gr)[f_Rj];
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_lsl", "f_Ri 0x%x", 'x', f_Ri, "f_Rj 0x%x", 'x', f_Rj, "Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
      FLD (in_Ri) = f_Ri;
      FLD (in_Rj) = f_Rj;
      FLD (out_Ri) = f_Ri;
    }
#endif
#undef FLD
    return idesc;
  }

 extract_sfmt_lsli:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.sfmt_addi.f
    UINT f_u4;
    UINT f_Ri;

    f_u4 = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);

  /* Record the fields for the semantic handler.  */
  FLD (f_Ri) = f_Ri;
  FLD (f_u4) = f_u4;
  FLD (i_Ri) = & CPU (h_gr)[f_Ri];
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_lsli", "f_Ri 0x%x", 'x', f_Ri, "f_u4 0x%x", 'x', f_u4, "Ri 0x%x", 'x', f_Ri, (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
      FLD (in_Ri) = f_Ri;
      FLD (out_Ri) = f_Ri;
    }
#endif
#undef FLD
    return idesc;
  }

 extract_sfmt_ldi8:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.sfmt_ldi8.f
    UINT f_i8;
    UINT f_Ri;

    f_i8 = EXTRACT_MSB0_UINT (insn, 16, 4, 8);
    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);

  /* Record the fields for the semantic handler.  */
  FLD (f_i8) = f_i8;
  FLD (f_Ri) = f_Ri;
  FLD (i_Ri) = & CPU (h_gr)[f_Ri];
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_ldi8", "f_i8 0x%x", 'x', f_i8, "f_Ri 0x%x", 'x', f_Ri, "Ri 0x%x", 'x', f_Ri, (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
      FLD (out_Ri) = f_Ri;
    }
#endif
#undef FLD
    return idesc;
  }

 extract_sfmt_ldi20:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.sfmt_ldi20.f
    UINT f_i20_16;
    UINT f_i20_4;
    UINT f_Ri;
    UINT f_i20;
    /* Contents of trailing part of insn.  */
    UINT word_1;

  word_1 = GETIMEMUHI (current_cpu, pc + 2);
    f_i20_16 = (0|(EXTRACT_MSB0_UINT (word_1, 16, 0, 16) << 0));
    f_i20_4 = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
{
  f_i20 = ((((f_i20_4) << (16))) | (f_i20_16));
}

  /* Record the fields for the semantic handler.  */
  FLD (f_i20) = f_i20;
  FLD (f_Ri) = f_Ri;
  FLD (i_Ri) = & CPU (h_gr)[f_Ri];
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_ldi20", "f_i20 0x%x", 'x', f_i20, "f_Ri 0x%x", 'x', f_Ri, "Ri 0x%x", 'x', f_Ri, (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
      FLD (out_Ri) = f_Ri;
    }
#endif
#undef FLD
    return idesc;
  }

 extract_sfmt_ldi32:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.sfmt_ldi32.f
    UINT f_i32;
    UINT f_Ri;
    /* Contents of trailing part of insn.  */
    UINT word_1;
    UINT word_2;

  word_1 = GETIMEMUHI (current_cpu, pc + 2);
  word_2 = GETIMEMUHI (current_cpu, pc + 4);
    f_i32 = (0|(EXTRACT_MSB0_UINT (word_2, 16, 0, 16) << 0)|(EXTRACT_MSB0_UINT (word_1, 16, 0, 16) << 16));
    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);

  /* Record the fields for the semantic handler.  */
  FLD (f_i32) = f_i32;
  FLD (f_Ri) = f_Ri;
  FLD (i_Ri) = & CPU (h_gr)[f_Ri];
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_ldi32", "f_i32 0x%x", 'x', f_i32, "f_Ri 0x%x", 'x', f_Ri, "Ri 0x%x", 'x', f_Ri, (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
      FLD (out_Ri) = f_Ri;
    }
#endif
#undef FLD
    return idesc;
  }

 extract_sfmt_ld:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.sfmt_ldr13.f
    UINT f_Rj;
    UINT f_Ri;

    f_Rj = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);

  /* Record the fields for the semantic handler.  */
  FLD (f_Rj) = f_Rj;
  FLD (f_Ri) = f_Ri;
  FLD (i_Rj) = & CPU (h_gr)[f_Rj];
  FLD (i_Ri) = & CPU (h_gr)[f_Ri];
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_ld", "f_Rj 0x%x", 'x', f_Rj, "f_Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, "Ri 0x%x", 'x', f_Ri, (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
      FLD (in_Rj) = f_Rj;
      FLD (out_Ri) = f_Ri;
    }
#endif
#undef FLD
    return idesc;
  }

 extract_sfmt_lduh:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.sfmt_ldr13.f
    UINT f_Rj;
    UINT f_Ri;

    f_Rj = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);

  /* Record the fields for the semantic handler.  */
  FLD (f_Rj) = f_Rj;
  FLD (f_Ri) = f_Ri;
  FLD (i_Rj) = & CPU (h_gr)[f_Rj];
  FLD (i_Ri) = & CPU (h_gr)[f_Ri];
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_lduh", "f_Rj 0x%x", 'x', f_Rj, "f_Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, "Ri 0x%x", 'x', f_Ri, (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
      FLD (in_Rj) = f_Rj;
      FLD (out_Ri) = f_Ri;
    }
#endif
#undef FLD
    return idesc;
  }

 extract_sfmt_ldub:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.sfmt_ldr13.f
    UINT f_Rj;
    UINT f_Ri;

    f_Rj = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);

  /* Record the fields for the semantic handler.  */
  FLD (f_Rj) = f_Rj;
  FLD (f_Ri) = f_Ri;
  FLD (i_Rj) = & CPU (h_gr)[f_Rj];
  FLD (i_Ri) = & CPU (h_gr)[f_Ri];
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_ldub", "f_Rj 0x%x", 'x', f_Rj, "f_Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, "Ri 0x%x", 'x', f_Ri, (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
      FLD (in_Rj) = f_Rj;
      FLD (out_Ri) = f_Ri;
    }
#endif
#undef FLD
    return idesc;
  }

 extract_sfmt_ldr13:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.sfmt_ldr13.f
    UINT f_Rj;
    UINT f_Ri;

    f_Rj = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);

  /* Record the fields for the semantic handler.  */
  FLD (f_Rj) = f_Rj;
  FLD (f_Ri) = f_Ri;
  FLD (i_Rj) = & CPU (h_gr)[f_Rj];
  FLD (i_Ri) = & CPU (h_gr)[f_Ri];
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_ldr13", "f_Rj 0x%x", 'x', f_Rj, "f_Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, "Ri 0x%x", 'x', f_Ri, (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
      FLD (in_Rj) = f_Rj;
      FLD (in_h_gr_SI_13) = 13;
      FLD (out_Ri) = f_Ri;
    }
#endif
#undef FLD
    return idesc;
  }

 extract_sfmt_ldr13uh:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.sfmt_ldr13.f
    UINT f_Rj;
    UINT f_Ri;

    f_Rj = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);

  /* Record the fields for the semantic handler.  */
  FLD (f_Rj) = f_Rj;
  FLD (f_Ri) = f_Ri;
  FLD (i_Rj) = & CPU (h_gr)[f_Rj];
  FLD (i_Ri) = & CPU (h_gr)[f_Ri];
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_ldr13uh", "f_Rj 0x%x", 'x', f_Rj, "f_Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, "Ri 0x%x", 'x', f_Ri, (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
      FLD (in_Rj) = f_Rj;
      FLD (in_h_gr_SI_13) = 13;
      FLD (out_Ri) = f_Ri;
    }
#endif
#undef FLD
    return idesc;
  }

 extract_sfmt_ldr13ub:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.sfmt_ldr13.f
    UINT f_Rj;
    UINT f_Ri;

    f_Rj = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);

  /* Record the fields for the semantic handler.  */
  FLD (f_Rj) = f_Rj;
  FLD (f_Ri) = f_Ri;
  FLD (i_Rj) = & CPU (h_gr)[f_Rj];
  FLD (i_Ri) = & CPU (h_gr)[f_Ri];
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_ldr13ub", "f_Rj 0x%x", 'x', f_Rj, "f_Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, "Ri 0x%x", 'x', f_Ri, (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
      FLD (in_Rj) = f_Rj;
      FLD (in_h_gr_SI_13) = 13;
      FLD (out_Ri) = f_Ri;
    }
#endif
#undef FLD
    return idesc;
  }

 extract_sfmt_ldr14:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.sfmt_ldr14.f
    SI f_disp10;
    UINT f_Ri;

    f_disp10 = ((EXTRACT_MSB0_INT (insn, 16, 4, 8)) << (2));
    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);

  /* Record the fields for the semantic handler.  */
  FLD (f_disp10) = f_disp10;
  FLD (f_Ri) = f_Ri;
  FLD (i_Ri) = & CPU (h_gr)[f_Ri];
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_ldr14", "f_disp10 0x%x", 'x', f_disp10, "f_Ri 0x%x", 'x', f_Ri, "Ri 0x%x", 'x', f_Ri, (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
      FLD (in_h_gr_SI_14) = 14;
      FLD (out_Ri) = f_Ri;
    }
#endif
#undef FLD
    return idesc;
  }

 extract_sfmt_ldr14uh:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.sfmt_ldr14uh.f
    SI f_disp9;
    UINT f_Ri;

    f_disp9 = ((EXTRACT_MSB0_INT (insn, 16, 4, 8)) << (1));
    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);

  /* Record the fields for the semantic handler.  */
  FLD (f_disp9) = f_disp9;
  FLD (f_Ri) = f_Ri;
  FLD (i_Ri) = & CPU (h_gr)[f_Ri];
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_ldr14uh", "f_disp9 0x%x", 'x', f_disp9, "f_Ri 0x%x", 'x', f_Ri, "Ri 0x%x", 'x', f_Ri, (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
      FLD (in_h_gr_SI_14) = 14;
      FLD (out_Ri) = f_Ri;
    }
#endif
#undef FLD
    return idesc;
  }

 extract_sfmt_ldr14ub:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.sfmt_ldr14ub.f
    INT f_disp8;
    UINT f_Ri;

    f_disp8 = EXTRACT_MSB0_INT (insn, 16, 4, 8);
    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);

  /* Record the fields for the semantic handler.  */
  FLD (f_disp8) = f_disp8;
  FLD (f_Ri) = f_Ri;
  FLD (i_Ri) = & CPU (h_gr)[f_Ri];
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_ldr14ub", "f_disp8 0x%x", 'x', f_disp8, "f_Ri 0x%x", 'x', f_Ri, "Ri 0x%x", 'x', f_Ri, (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
      FLD (in_h_gr_SI_14) = 14;
      FLD (out_Ri) = f_Ri;
    }
#endif
#undef FLD
    return idesc;
  }

 extract_sfmt_ldr15:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.sfmt_ldr15.f
    USI f_udisp6;
    UINT f_Ri;

    f_udisp6 = ((EXTRACT_MSB0_UINT (insn, 16, 8, 4)) << (2));
    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);

  /* Record the fields for the semantic handler.  */
  FLD (f_udisp6) = f_udisp6;
  FLD (f_Ri) = f_Ri;
  FLD (i_Ri) = & CPU (h_gr)[f_Ri];
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_ldr15", "f_udisp6 0x%x", 'x', f_udisp6, "f_Ri 0x%x", 'x', f_Ri, "Ri 0x%x", 'x', f_Ri, (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
      FLD (in_h_gr_SI_15) = 15;
      FLD (out_Ri) = f_Ri;
    }
#endif
#undef FLD
    return idesc;
  }

 extract_sfmt_ldr15gr:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.sfmt_ldr15gr.f
    UINT f_Ri;

    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);

  /* Record the fields for the semantic handler.  */
  FLD (f_Ri) = f_Ri;
  FLD (i_Ri) = & CPU (h_gr)[f_Ri];
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_ldr15gr", "f_Ri 0x%x", 'x', f_Ri, "Ri 0x%x", 'x', f_Ri, (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
      FLD (in_h_gr_SI_15) = 15;
      FLD (out_Ri) = f_Ri;
      FLD (out_h_gr_SI_15) = 15;
    }
#endif
#undef FLD
    return idesc;
  }

 extract_sfmt_ldr15dr:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.sfmt_ldr15dr.f
    UINT f_Rs2;

    f_Rs2 = EXTRACT_MSB0_UINT (insn, 16, 12, 4);

  /* Record the fields for the semantic handler.  */
  FLD (f_Rs2) = f_Rs2;
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_ldr15dr", "f_Rs2 0x%x", 'x', f_Rs2, (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
      FLD (in_h_gr_SI_15) = 15;
      FLD (out_h_gr_SI_15) = 15;
    }
#endif
#undef FLD
    return idesc;
  }

 extract_sfmt_ldr15ps:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
#define FLD(f) abuf->fields.sfmt_addsp.f


  /* Record the fields for the semantic handler.  */
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_ldr15ps", (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
      FLD (in_h_gr_SI_15) = 15;
      FLD (out_h_gr_SI_15) = 15;
    }
#endif
#undef FLD
    return idesc;
  }

 extract_sfmt_st:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.sfmt_str13.f
    UINT f_Rj;
    UINT f_Ri;

    f_Rj = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);

  /* Record the fields for the semantic handler.  */
  FLD (f_Ri) = f_Ri;
  FLD (f_Rj) = f_Rj;
  FLD (i_Ri) = & CPU (h_gr)[f_Ri];
  FLD (i_Rj) = & CPU (h_gr)[f_Rj];
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_st", "f_Ri 0x%x", 'x', f_Ri, "f_Rj 0x%x", 'x', f_Rj, "Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
      FLD (in_Ri) = f_Ri;
      FLD (in_Rj) = f_Rj;
    }
#endif
#undef FLD
    return idesc;
  }

 extract_sfmt_sth:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.sfmt_str13.f
    UINT f_Rj;
    UINT f_Ri;

    f_Rj = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);

  /* Record the fields for the semantic handler.  */
  FLD (f_Ri) = f_Ri;
  FLD (f_Rj) = f_Rj;
  FLD (i_Ri) = & CPU (h_gr)[f_Ri];
  FLD (i_Rj) = & CPU (h_gr)[f_Rj];
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_sth", "f_Ri 0x%x", 'x', f_Ri, "f_Rj 0x%x", 'x', f_Rj, "Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
      FLD (in_Ri) = f_Ri;
      FLD (in_Rj) = f_Rj;
    }
#endif
#undef FLD
    return idesc;
  }

 extract_sfmt_stb:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.sfmt_str13.f
    UINT f_Rj;
    UINT f_Ri;

    f_Rj = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);

  /* Record the fields for the semantic handler.  */
  FLD (f_Ri) = f_Ri;
  FLD (f_Rj) = f_Rj;
  FLD (i_Ri) = & CPU (h_gr)[f_Ri];
  FLD (i_Rj) = & CPU (h_gr)[f_Rj];
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_stb", "f_Ri 0x%x", 'x', f_Ri, "f_Rj 0x%x", 'x', f_Rj, "Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
      FLD (in_Ri) = f_Ri;
      FLD (in_Rj) = f_Rj;
    }
#endif
#undef FLD
    return idesc;
  }

 extract_sfmt_str13:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.sfmt_str13.f
    UINT f_Rj;
    UINT f_Ri;

    f_Rj = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);

  /* Record the fields for the semantic handler.  */
  FLD (f_Ri) = f_Ri;
  FLD (f_Rj) = f_Rj;
  FLD (i_Ri) = & CPU (h_gr)[f_Ri];
  FLD (i_Rj) = & CPU (h_gr)[f_Rj];
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_str13", "f_Ri 0x%x", 'x', f_Ri, "f_Rj 0x%x", 'x', f_Rj, "Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
      FLD (in_Ri) = f_Ri;
      FLD (in_Rj) = f_Rj;
      FLD (in_h_gr_SI_13) = 13;
    }
#endif
#undef FLD
    return idesc;
  }

 extract_sfmt_str13h:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.sfmt_str13.f
    UINT f_Rj;
    UINT f_Ri;

    f_Rj = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);

  /* Record the fields for the semantic handler.  */
  FLD (f_Ri) = f_Ri;
  FLD (f_Rj) = f_Rj;
  FLD (i_Ri) = & CPU (h_gr)[f_Ri];
  FLD (i_Rj) = & CPU (h_gr)[f_Rj];
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_str13h", "f_Ri 0x%x", 'x', f_Ri, "f_Rj 0x%x", 'x', f_Rj, "Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
      FLD (in_Ri) = f_Ri;
      FLD (in_Rj) = f_Rj;
      FLD (in_h_gr_SI_13) = 13;
    }
#endif
#undef FLD
    return idesc;
  }

 extract_sfmt_str13b:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.sfmt_str13.f
    UINT f_Rj;
    UINT f_Ri;

    f_Rj = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);

  /* Record the fields for the semantic handler.  */
  FLD (f_Ri) = f_Ri;
  FLD (f_Rj) = f_Rj;
  FLD (i_Ri) = & CPU (h_gr)[f_Ri];
  FLD (i_Rj) = & CPU (h_gr)[f_Rj];
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_str13b", "f_Ri 0x%x", 'x', f_Ri, "f_Rj 0x%x", 'x', f_Rj, "Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
      FLD (in_Ri) = f_Ri;
      FLD (in_Rj) = f_Rj;
      FLD (in_h_gr_SI_13) = 13;
    }
#endif
#undef FLD
    return idesc;
  }

 extract_sfmt_str14:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.sfmt_str14.f
    SI f_disp10;
    UINT f_Ri;

    f_disp10 = ((EXTRACT_MSB0_INT (insn, 16, 4, 8)) << (2));
    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);

  /* Record the fields for the semantic handler.  */
  FLD (f_Ri) = f_Ri;
  FLD (f_disp10) = f_disp10;
  FLD (i_Ri) = & CPU (h_gr)[f_Ri];
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_str14", "f_Ri 0x%x", 'x', f_Ri, "f_disp10 0x%x", 'x', f_disp10, "Ri 0x%x", 'x', f_Ri, (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
      FLD (in_Ri) = f_Ri;
      FLD (in_h_gr_SI_14) = 14;
    }
#endif
#undef FLD
    return idesc;
  }

 extract_sfmt_str14h:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.sfmt_str14h.f
    SI f_disp9;
    UINT f_Ri;

    f_disp9 = ((EXTRACT_MSB0_INT (insn, 16, 4, 8)) << (1));
    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);

  /* Record the fields for the semantic handler.  */
  FLD (f_Ri) = f_Ri;
  FLD (f_disp9) = f_disp9;
  FLD (i_Ri) = & CPU (h_gr)[f_Ri];
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_str14h", "f_Ri 0x%x", 'x', f_Ri, "f_disp9 0x%x", 'x', f_disp9, "Ri 0x%x", 'x', f_Ri, (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
      FLD (in_Ri) = f_Ri;
      FLD (in_h_gr_SI_14) = 14;
    }
#endif
#undef FLD
    return idesc;
  }

 extract_sfmt_str14b:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.sfmt_str14b.f
    INT f_disp8;
    UINT f_Ri;

    f_disp8 = EXTRACT_MSB0_INT (insn, 16, 4, 8);
    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);

  /* Record the fields for the semantic handler.  */
  FLD (f_Ri) = f_Ri;
  FLD (f_disp8) = f_disp8;
  FLD (i_Ri) = & CPU (h_gr)[f_Ri];
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_str14b", "f_Ri 0x%x", 'x', f_Ri, "f_disp8 0x%x", 'x', f_disp8, "Ri 0x%x", 'x', f_Ri, (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
      FLD (in_Ri) = f_Ri;
      FLD (in_h_gr_SI_14) = 14;
    }
#endif
#undef FLD
    return idesc;
  }

 extract_sfmt_str15:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.sfmt_str15.f
    USI f_udisp6;
    UINT f_Ri;

    f_udisp6 = ((EXTRACT_MSB0_UINT (insn, 16, 8, 4)) << (2));
    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);

  /* Record the fields for the semantic handler.  */
  FLD (f_Ri) = f_Ri;
  FLD (f_udisp6) = f_udisp6;
  FLD (i_Ri) = & CPU (h_gr)[f_Ri];
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_str15", "f_Ri 0x%x", 'x', f_Ri, "f_udisp6 0x%x", 'x', f_udisp6, "Ri 0x%x", 'x', f_Ri, (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
      FLD (in_Ri) = f_Ri;
      FLD (in_h_gr_SI_15) = 15;
    }
#endif
#undef FLD
    return idesc;
  }

 extract_sfmt_str15gr:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.sfmt_str15gr.f
    UINT f_Ri;

    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);

  /* Record the fields for the semantic handler.  */
  FLD (f_Ri) = f_Ri;
  FLD (i_Ri) = & CPU (h_gr)[f_Ri];
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_str15gr", "f_Ri 0x%x", 'x', f_Ri, "Ri 0x%x", 'x', f_Ri, (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
      FLD (in_Ri) = f_Ri;
      FLD (in_h_gr_SI_15) = 15;
      FLD (out_h_gr_SI_15) = 15;
    }
#endif
#undef FLD
    return idesc;
  }

 extract_sfmt_str15dr:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.sfmt_ldr15dr.f
    UINT f_Rs2;

    f_Rs2 = EXTRACT_MSB0_UINT (insn, 16, 12, 4);

  /* Record the fields for the semantic handler.  */
  FLD (f_Rs2) = f_Rs2;
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_str15dr", "f_Rs2 0x%x", 'x', f_Rs2, (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
      FLD (in_h_gr_SI_15) = 15;
      FLD (out_h_gr_SI_15) = 15;
    }
#endif
#undef FLD
    return idesc;
  }

 extract_sfmt_str15ps:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
#define FLD(f) abuf->fields.sfmt_addsp.f


  /* Record the fields for the semantic handler.  */
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_str15ps", (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
      FLD (in_h_gr_SI_15) = 15;
      FLD (out_h_gr_SI_15) = 15;
    }
#endif
#undef FLD
    return idesc;
  }

 extract_sfmt_mov:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.sfmt_ldr13.f
    UINT f_Rj;
    UINT f_Ri;

    f_Rj = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);

  /* Record the fields for the semantic handler.  */
  FLD (f_Rj) = f_Rj;
  FLD (f_Ri) = f_Ri;
  FLD (i_Rj) = & CPU (h_gr)[f_Rj];
  FLD (i_Ri) = & CPU (h_gr)[f_Ri];
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_mov", "f_Rj 0x%x", 'x', f_Rj, "f_Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, "Ri 0x%x", 'x', f_Ri, (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
      FLD (in_Rj) = f_Rj;
      FLD (out_Ri) = f_Ri;
    }
#endif
#undef FLD
    return idesc;
  }

 extract_sfmt_movdr:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.sfmt_movdr.f
    UINT f_Rs1;
    UINT f_Ri;

    f_Rs1 = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);

  /* Record the fields for the semantic handler.  */
  FLD (f_Rs1) = f_Rs1;
  FLD (f_Ri) = f_Ri;
  FLD (i_Ri) = & CPU (h_gr)[f_Ri];
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_movdr", "f_Rs1 0x%x", 'x', f_Rs1, "f_Ri 0x%x", 'x', f_Ri, "Ri 0x%x", 'x', f_Ri, (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
      FLD (out_Ri) = f_Ri;
    }
#endif
#undef FLD
    return idesc;
  }

 extract_sfmt_movps:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.sfmt_movdr.f
    UINT f_Ri;

    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);

  /* Record the fields for the semantic handler.  */
  FLD (f_Ri) = f_Ri;
  FLD (i_Ri) = & CPU (h_gr)[f_Ri];
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_movps", "f_Ri 0x%x", 'x', f_Ri, "Ri 0x%x", 'x', f_Ri, (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
      FLD (out_Ri) = f_Ri;
    }
#endif
#undef FLD
    return idesc;
  }

 extract_sfmt_mov2dr:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.sfmt_mov2dr.f
    UINT f_Rs1;
    UINT f_Ri;

    f_Rs1 = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);

  /* Record the fields for the semantic handler.  */
  FLD (f_Ri) = f_Ri;
  FLD (f_Rs1) = f_Rs1;
  FLD (i_Ri) = & CPU (h_gr)[f_Ri];
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_mov2dr", "f_Ri 0x%x", 'x', f_Ri, "f_Rs1 0x%x", 'x', f_Rs1, "Ri 0x%x", 'x', f_Ri, (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
      FLD (in_Ri) = f_Ri;
    }
#endif
#undef FLD
    return idesc;
  }

 extract_sfmt_mov2ps:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.sfmt_mov2dr.f
    UINT f_Ri;

    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);

  /* Record the fields for the semantic handler.  */
  FLD (f_Ri) = f_Ri;
  FLD (i_Ri) = & CPU (h_gr)[f_Ri];
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_mov2ps", "f_Ri 0x%x", 'x', f_Ri, "Ri 0x%x", 'x', f_Ri, (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
      FLD (in_Ri) = f_Ri;
    }
#endif
#undef FLD
    return idesc;
  }

 extract_sfmt_jmp:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.sfmt_mov2dr.f
    UINT f_Ri;

    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);

  /* Record the fields for the semantic handler.  */
  FLD (f_Ri) = f_Ri;
  FLD (i_Ri) = & CPU (h_gr)[f_Ri];
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_jmp", "f_Ri 0x%x", 'x', f_Ri, "Ri 0x%x", 'x', f_Ri, (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
      FLD (in_Ri) = f_Ri;
    }
#endif
#undef FLD
    return idesc;
  }

 extract_sfmt_callr:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.sfmt_mov2dr.f
    UINT f_Ri;

    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);

  /* Record the fields for the semantic handler.  */
  FLD (f_Ri) = f_Ri;
  FLD (i_Ri) = & CPU (h_gr)[f_Ri];
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_callr", "f_Ri 0x%x", 'x', f_Ri, "Ri 0x%x", 'x', f_Ri, (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
      FLD (in_Ri) = f_Ri;
    }
#endif
#undef FLD
    return idesc;
  }

 extract_sfmt_call:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.sfmt_call.f
    SI f_rel12;

    f_rel12 = ((((EXTRACT_MSB0_INT (insn, 16, 5, 11)) << (1))) + (((pc) + (2))));

  /* Record the fields for the semantic handler.  */
  FLD (i_label12) = f_rel12;
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_call", "label12 0x%x", 'x', f_rel12, (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
    }
#endif
#undef FLD
    return idesc;
  }

 extract_sfmt_ret:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
#define FLD(f) abuf->fields.fmt_empty.f


  /* Record the fields for the semantic handler.  */
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_ret", (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
    }
#endif
#undef FLD
    return idesc;
  }

 extract_sfmt_int:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.sfmt_int.f
    UINT f_u8;

    f_u8 = EXTRACT_MSB0_UINT (insn, 16, 8, 8);

  /* Record the fields for the semantic handler.  */
  FLD (f_u8) = f_u8;
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_int", "f_u8 0x%x", 'x', f_u8, (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
    }
#endif
#undef FLD
    return idesc;
  }

 extract_sfmt_inte:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
#define FLD(f) abuf->fields.fmt_empty.f


  /* Record the fields for the semantic handler.  */
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_inte", (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
    }
#endif
#undef FLD
    return idesc;
  }

 extract_sfmt_reti:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
#define FLD(f) abuf->fields.fmt_empty.f


  /* Record the fields for the semantic handler.  */
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_reti", (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
    }
#endif
#undef FLD
    return idesc;
  }

 extract_sfmt_brad:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.sfmt_brad.f
    SI f_rel9;

    f_rel9 = ((((EXTRACT_MSB0_INT (insn, 16, 8, 8)) << (1))) + (((pc) + (2))));

  /* Record the fields for the semantic handler.  */
  FLD (i_label9) = f_rel9;
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_brad", "label9 0x%x", 'x', f_rel9, (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
    }
#endif
#undef FLD
    return idesc;
  }

 extract_sfmt_bnod:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
#define FLD(f) abuf->fields.fmt_empty.f


  /* Record the fields for the semantic handler.  */
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_bnod", (char *) 0));

#undef FLD
    return idesc;
  }

 extract_sfmt_beqd:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.sfmt_brad.f
    SI f_rel9;

    f_rel9 = ((((EXTRACT_MSB0_INT (insn, 16, 8, 8)) << (1))) + (((pc) + (2))));

  /* Record the fields for the semantic handler.  */
  FLD (i_label9) = f_rel9;
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_beqd", "label9 0x%x", 'x', f_rel9, (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
    }
#endif
#undef FLD
    return idesc;
  }

 extract_sfmt_bcd:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.sfmt_brad.f
    SI f_rel9;

    f_rel9 = ((((EXTRACT_MSB0_INT (insn, 16, 8, 8)) << (1))) + (((pc) + (2))));

  /* Record the fields for the semantic handler.  */
  FLD (i_label9) = f_rel9;
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_bcd", "label9 0x%x", 'x', f_rel9, (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
    }
#endif
#undef FLD
    return idesc;
  }

 extract_sfmt_bnd:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.sfmt_brad.f
    SI f_rel9;

    f_rel9 = ((((EXTRACT_MSB0_INT (insn, 16, 8, 8)) << (1))) + (((pc) + (2))));

  /* Record the fields for the semantic handler.  */
  FLD (i_label9) = f_rel9;
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_bnd", "label9 0x%x", 'x', f_rel9, (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
    }
#endif
#undef FLD
    return idesc;
  }

 extract_sfmt_bvd:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.sfmt_brad.f
    SI f_rel9;

    f_rel9 = ((((EXTRACT_MSB0_INT (insn, 16, 8, 8)) << (1))) + (((pc) + (2))));

  /* Record the fields for the semantic handler.  */
  FLD (i_label9) = f_rel9;
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_bvd", "label9 0x%x", 'x', f_rel9, (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
    }
#endif
#undef FLD
    return idesc;
  }

 extract_sfmt_bltd:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.sfmt_brad.f
    SI f_rel9;

    f_rel9 = ((((EXTRACT_MSB0_INT (insn, 16, 8, 8)) << (1))) + (((pc) + (2))));

  /* Record the fields for the semantic handler.  */
  FLD (i_label9) = f_rel9;
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_bltd", "label9 0x%x", 'x', f_rel9, (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
    }
#endif
#undef FLD
    return idesc;
  }

 extract_sfmt_bled:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.sfmt_brad.f
    SI f_rel9;

    f_rel9 = ((((EXTRACT_MSB0_INT (insn, 16, 8, 8)) << (1))) + (((pc) + (2))));

  /* Record the fields for the semantic handler.  */
  FLD (i_label9) = f_rel9;
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_bled", "label9 0x%x", 'x', f_rel9, (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
    }
#endif
#undef FLD
    return idesc;
  }

 extract_sfmt_blsd:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.sfmt_brad.f
    SI f_rel9;

    f_rel9 = ((((EXTRACT_MSB0_INT (insn, 16, 8, 8)) << (1))) + (((pc) + (2))));

  /* Record the fields for the semantic handler.  */
  FLD (i_label9) = f_rel9;
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_blsd", "label9 0x%x", 'x', f_rel9, (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
    }
#endif
#undef FLD
    return idesc;
  }

 extract_sfmt_dmovr13:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.sfmt_dmovr13pi.f
    USI f_dir10;

    f_dir10 = ((EXTRACT_MSB0_UINT (insn, 16, 8, 8)) << (2));

  /* Record the fields for the semantic handler.  */
  FLD (f_dir10) = f_dir10;
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_dmovr13", "f_dir10 0x%x", 'x', f_dir10, (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
      FLD (in_h_gr_SI_13) = 13;
    }
#endif
#undef FLD
    return idesc;
  }

 extract_sfmt_dmovr13h:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.sfmt_dmovr13pih.f
    USI f_dir9;

    f_dir9 = ((EXTRACT_MSB0_UINT (insn, 16, 8, 8)) << (1));

  /* Record the fields for the semantic handler.  */
  FLD (f_dir9) = f_dir9;
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_dmovr13h", "f_dir9 0x%x", 'x', f_dir9, (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
      FLD (in_h_gr_SI_13) = 13;
    }
#endif
#undef FLD
    return idesc;
  }

 extract_sfmt_dmovr13b:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.sfmt_dmovr13pib.f
    UINT f_dir8;

    f_dir8 = EXTRACT_MSB0_UINT (insn, 16, 8, 8);

  /* Record the fields for the semantic handler.  */
  FLD (f_dir8) = f_dir8;
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_dmovr13b", "f_dir8 0x%x", 'x', f_dir8, (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
      FLD (in_h_gr_SI_13) = 13;
    }
#endif
#undef FLD
    return idesc;
  }

 extract_sfmt_dmovr13pi:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.sfmt_dmovr13pi.f
    USI f_dir10;

    f_dir10 = ((EXTRACT_MSB0_UINT (insn, 16, 8, 8)) << (2));

  /* Record the fields for the semantic handler.  */
  FLD (f_dir10) = f_dir10;
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_dmovr13pi", "f_dir10 0x%x", 'x', f_dir10, (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
      FLD (in_h_gr_SI_13) = 13;
      FLD (out_h_gr_SI_13) = 13;
    }
#endif
#undef FLD
    return idesc;
  }

 extract_sfmt_dmovr13pih:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.sfmt_dmovr13pih.f
    USI f_dir9;

    f_dir9 = ((EXTRACT_MSB0_UINT (insn, 16, 8, 8)) << (1));

  /* Record the fields for the semantic handler.  */
  FLD (f_dir9) = f_dir9;
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_dmovr13pih", "f_dir9 0x%x", 'x', f_dir9, (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
      FLD (in_h_gr_SI_13) = 13;
      FLD (out_h_gr_SI_13) = 13;
    }
#endif
#undef FLD
    return idesc;
  }

 extract_sfmt_dmovr13pib:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.sfmt_dmovr13pib.f
    UINT f_dir8;

    f_dir8 = EXTRACT_MSB0_UINT (insn, 16, 8, 8);

  /* Record the fields for the semantic handler.  */
  FLD (f_dir8) = f_dir8;
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_dmovr13pib", "f_dir8 0x%x", 'x', f_dir8, (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
      FLD (in_h_gr_SI_13) = 13;
      FLD (out_h_gr_SI_13) = 13;
    }
#endif
#undef FLD
    return idesc;
  }

 extract_sfmt_dmovr15pi:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.sfmt_dmovr15pi.f
    USI f_dir10;

    f_dir10 = ((EXTRACT_MSB0_UINT (insn, 16, 8, 8)) << (2));

  /* Record the fields for the semantic handler.  */
  FLD (f_dir10) = f_dir10;
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_dmovr15pi", "f_dir10 0x%x", 'x', f_dir10, (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
      FLD (in_h_gr_SI_15) = 15;
      FLD (out_h_gr_SI_15) = 15;
    }
#endif
#undef FLD
    return idesc;
  }

 extract_sfmt_dmov2r13:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.sfmt_dmovr13pi.f
    USI f_dir10;

    f_dir10 = ((EXTRACT_MSB0_UINT (insn, 16, 8, 8)) << (2));

  /* Record the fields for the semantic handler.  */
  FLD (f_dir10) = f_dir10;
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_dmov2r13", "f_dir10 0x%x", 'x', f_dir10, (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
      FLD (out_h_gr_SI_13) = 13;
    }
#endif
#undef FLD
    return idesc;
  }

 extract_sfmt_dmov2r13h:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.sfmt_dmovr13pih.f
    USI f_dir9;

    f_dir9 = ((EXTRACT_MSB0_UINT (insn, 16, 8, 8)) << (1));

  /* Record the fields for the semantic handler.  */
  FLD (f_dir9) = f_dir9;
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_dmov2r13h", "f_dir9 0x%x", 'x', f_dir9, (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
      FLD (out_h_gr_SI_13) = 13;
    }
#endif
#undef FLD
    return idesc;
  }

 extract_sfmt_dmov2r13b:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.sfmt_dmovr13pib.f
    UINT f_dir8;

    f_dir8 = EXTRACT_MSB0_UINT (insn, 16, 8, 8);

  /* Record the fields for the semantic handler.  */
  FLD (f_dir8) = f_dir8;
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_dmov2r13b", "f_dir8 0x%x", 'x', f_dir8, (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
      FLD (out_h_gr_SI_13) = 13;
    }
#endif
#undef FLD
    return idesc;
  }

 extract_sfmt_dmov2r13pi:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.sfmt_dmovr13pi.f
    USI f_dir10;

    f_dir10 = ((EXTRACT_MSB0_UINT (insn, 16, 8, 8)) << (2));

  /* Record the fields for the semantic handler.  */
  FLD (f_dir10) = f_dir10;
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_dmov2r13pi", "f_dir10 0x%x", 'x', f_dir10, (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
      FLD (in_h_gr_SI_13) = 13;
      FLD (out_h_gr_SI_13) = 13;
    }
#endif
#undef FLD
    return idesc;
  }

 extract_sfmt_dmov2r13pih:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.sfmt_dmovr13pih.f
    USI f_dir9;

    f_dir9 = ((EXTRACT_MSB0_UINT (insn, 16, 8, 8)) << (1));

  /* Record the fields for the semantic handler.  */
  FLD (f_dir9) = f_dir9;
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_dmov2r13pih", "f_dir9 0x%x", 'x', f_dir9, (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
      FLD (in_h_gr_SI_13) = 13;
      FLD (out_h_gr_SI_13) = 13;
    }
#endif
#undef FLD
    return idesc;
  }

 extract_sfmt_dmov2r13pib:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.sfmt_dmovr13pib.f
    UINT f_dir8;

    f_dir8 = EXTRACT_MSB0_UINT (insn, 16, 8, 8);

  /* Record the fields for the semantic handler.  */
  FLD (f_dir8) = f_dir8;
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_dmov2r13pib", "f_dir8 0x%x", 'x', f_dir8, (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
      FLD (in_h_gr_SI_13) = 13;
      FLD (out_h_gr_SI_13) = 13;
    }
#endif
#undef FLD
    return idesc;
  }

 extract_sfmt_dmov2r15pd:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.sfmt_dmovr15pi.f
    USI f_dir10;

    f_dir10 = ((EXTRACT_MSB0_UINT (insn, 16, 8, 8)) << (2));

  /* Record the fields for the semantic handler.  */
  FLD (f_dir10) = f_dir10;
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_dmov2r15pd", "f_dir10 0x%x", 'x', f_dir10, (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
      FLD (in_h_gr_SI_15) = 15;
      FLD (out_h_gr_SI_15) = 15;
    }
#endif
#undef FLD
    return idesc;
  }

 extract_sfmt_ldres:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.sfmt_add2.f
    UINT f_Ri;

    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);

  /* Record the fields for the semantic handler.  */
  FLD (f_Ri) = f_Ri;
  FLD (i_Ri) = & CPU (h_gr)[f_Ri];
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_ldres", "f_Ri 0x%x", 'x', f_Ri, "Ri 0x%x", 'x', f_Ri, (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
      FLD (in_Ri) = f_Ri;
      FLD (out_Ri) = f_Ri;
    }
#endif
#undef FLD
    return idesc;
  }

 extract_sfmt_copop:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
#define FLD(f) abuf->fields.fmt_empty.f
    /* Contents of trailing part of insn.  */
    UINT word_1;

  word_1 = GETIMEMUHI (current_cpu, pc + 2);

  /* Record the fields for the semantic handler.  */
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_copop", (char *) 0));

#undef FLD
    return idesc;
  }

 extract_sfmt_andccr:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.sfmt_int.f
    UINT f_u8;

    f_u8 = EXTRACT_MSB0_UINT (insn, 16, 8, 8);

  /* Record the fields for the semantic handler.  */
  FLD (f_u8) = f_u8;
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_andccr", "f_u8 0x%x", 'x', f_u8, (char *) 0));

#undef FLD
    return idesc;
  }

 extract_sfmt_stilm:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.sfmt_int.f
    UINT f_u8;

    f_u8 = EXTRACT_MSB0_UINT (insn, 16, 8, 8);

  /* Record the fields for the semantic handler.  */
  FLD (f_u8) = f_u8;
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_stilm", "f_u8 0x%x", 'x', f_u8, (char *) 0));

#undef FLD
    return idesc;
  }

 extract_sfmt_addsp:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.sfmt_addsp.f
    SI f_s10;

    f_s10 = ((EXTRACT_MSB0_INT (insn, 16, 8, 8)) << (2));

  /* Record the fields for the semantic handler.  */
  FLD (f_s10) = f_s10;
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_addsp", "f_s10 0x%x", 'x', f_s10, (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
      FLD (in_h_gr_SI_15) = 15;
      FLD (out_h_gr_SI_15) = 15;
    }
#endif
#undef FLD
    return idesc;
  }

 extract_sfmt_extsb:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.sfmt_add2.f
    UINT f_Ri;

    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);

  /* Record the fields for the semantic handler.  */
  FLD (f_Ri) = f_Ri;
  FLD (i_Ri) = & CPU (h_gr)[f_Ri];
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_extsb", "f_Ri 0x%x", 'x', f_Ri, "Ri 0x%x", 'x', f_Ri, (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
      FLD (in_Ri) = f_Ri;
      FLD (out_Ri) = f_Ri;
    }
#endif
#undef FLD
    return idesc;
  }

 extract_sfmt_extub:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.sfmt_add2.f
    UINT f_Ri;

    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);

  /* Record the fields for the semantic handler.  */
  FLD (f_Ri) = f_Ri;
  FLD (i_Ri) = & CPU (h_gr)[f_Ri];
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_extub", "f_Ri 0x%x", 'x', f_Ri, "Ri 0x%x", 'x', f_Ri, (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
      FLD (in_Ri) = f_Ri;
      FLD (out_Ri) = f_Ri;
    }
#endif
#undef FLD
    return idesc;
  }

 extract_sfmt_extsh:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.sfmt_add2.f
    UINT f_Ri;

    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);

  /* Record the fields for the semantic handler.  */
  FLD (f_Ri) = f_Ri;
  FLD (i_Ri) = & CPU (h_gr)[f_Ri];
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_extsh", "f_Ri 0x%x", 'x', f_Ri, "Ri 0x%x", 'x', f_Ri, (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
      FLD (in_Ri) = f_Ri;
      FLD (out_Ri) = f_Ri;
    }
#endif
#undef FLD
    return idesc;
  }

 extract_sfmt_extuh:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.sfmt_add2.f
    UINT f_Ri;

    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);

  /* Record the fields for the semantic handler.  */
  FLD (f_Ri) = f_Ri;
  FLD (i_Ri) = & CPU (h_gr)[f_Ri];
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_extuh", "f_Ri 0x%x", 'x', f_Ri, "Ri 0x%x", 'x', f_Ri, (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
      FLD (in_Ri) = f_Ri;
      FLD (out_Ri) = f_Ri;
    }
#endif
#undef FLD
    return idesc;
  }

 extract_sfmt_ldm0:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.sfmt_ldm0.f
    UINT f_reglist_low_ld;

    f_reglist_low_ld = EXTRACT_MSB0_UINT (insn, 16, 8, 8);

  /* Record the fields for the semantic handler.  */
  FLD (f_reglist_low_ld) = f_reglist_low_ld;
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_ldm0", "f_reglist_low_ld 0x%x", 'x', f_reglist_low_ld, (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
      FLD (in_h_gr_SI_15) = 15;
      FLD (out_h_gr_SI_0) = 0;
      FLD (out_h_gr_SI_1) = 1;
      FLD (out_h_gr_SI_15) = 15;
      FLD (out_h_gr_SI_2) = 2;
      FLD (out_h_gr_SI_3) = 3;
      FLD (out_h_gr_SI_4) = 4;
      FLD (out_h_gr_SI_5) = 5;
      FLD (out_h_gr_SI_6) = 6;
      FLD (out_h_gr_SI_7) = 7;
    }
#endif
#undef FLD
    return idesc;
  }

 extract_sfmt_ldm1:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.sfmt_ldm1.f
    UINT f_reglist_hi_ld;

    f_reglist_hi_ld = EXTRACT_MSB0_UINT (insn, 16, 8, 8);

  /* Record the fields for the semantic handler.  */
  FLD (f_reglist_hi_ld) = f_reglist_hi_ld;
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_ldm1", "f_reglist_hi_ld 0x%x", 'x', f_reglist_hi_ld, (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
      FLD (in_h_gr_SI_15) = 15;
      FLD (out_h_gr_SI_10) = 10;
      FLD (out_h_gr_SI_11) = 11;
      FLD (out_h_gr_SI_12) = 12;
      FLD (out_h_gr_SI_13) = 13;
      FLD (out_h_gr_SI_14) = 14;
      FLD (out_h_gr_SI_15) = 15;
      FLD (out_h_gr_SI_8) = 8;
      FLD (out_h_gr_SI_9) = 9;
    }
#endif
#undef FLD
    return idesc;
  }

 extract_sfmt_stm0:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.sfmt_stm0.f
    UINT f_reglist_low_st;

    f_reglist_low_st = EXTRACT_MSB0_UINT (insn, 16, 8, 8);

  /* Record the fields for the semantic handler.  */
  FLD (f_reglist_low_st) = f_reglist_low_st;
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_stm0", "f_reglist_low_st 0x%x", 'x', f_reglist_low_st, (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
      FLD (in_h_gr_SI_0) = 0;
      FLD (in_h_gr_SI_1) = 1;
      FLD (in_h_gr_SI_15) = 15;
      FLD (in_h_gr_SI_2) = 2;
      FLD (in_h_gr_SI_3) = 3;
      FLD (in_h_gr_SI_4) = 4;
      FLD (in_h_gr_SI_5) = 5;
      FLD (in_h_gr_SI_6) = 6;
      FLD (in_h_gr_SI_7) = 7;
      FLD (out_h_gr_SI_15) = 15;
    }
#endif
#undef FLD
    return idesc;
  }

 extract_sfmt_stm1:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.sfmt_stm1.f
    UINT f_reglist_hi_st;

    f_reglist_hi_st = EXTRACT_MSB0_UINT (insn, 16, 8, 8);

  /* Record the fields for the semantic handler.  */
  FLD (f_reglist_hi_st) = f_reglist_hi_st;
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_stm1", "f_reglist_hi_st 0x%x", 'x', f_reglist_hi_st, (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
      FLD (in_h_gr_SI_10) = 10;
      FLD (in_h_gr_SI_11) = 11;
      FLD (in_h_gr_SI_12) = 12;
      FLD (in_h_gr_SI_13) = 13;
      FLD (in_h_gr_SI_14) = 14;
      FLD (in_h_gr_SI_15) = 15;
      FLD (in_h_gr_SI_8) = 8;
      FLD (in_h_gr_SI_9) = 9;
      FLD (out_h_gr_SI_15) = 15;
    }
#endif
#undef FLD
    return idesc;
  }

 extract_sfmt_enter:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.sfmt_enter.f
    USI f_u10;

    f_u10 = ((EXTRACT_MSB0_UINT (insn, 16, 8, 8)) << (2));

  /* Record the fields for the semantic handler.  */
  FLD (f_u10) = f_u10;
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_enter", "f_u10 0x%x", 'x', f_u10, (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
      FLD (in_h_gr_SI_14) = 14;
      FLD (in_h_gr_SI_15) = 15;
      FLD (out_h_gr_SI_14) = 14;
      FLD (out_h_gr_SI_15) = 15;
    }
#endif
#undef FLD
    return idesc;
  }

 extract_sfmt_leave:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
#define FLD(f) abuf->fields.sfmt_enter.f


  /* Record the fields for the semantic handler.  */
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_leave", (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
      FLD (in_h_gr_SI_14) = 14;
      FLD (in_h_gr_SI_15) = 15;
      FLD (out_h_gr_SI_14) = 14;
      FLD (out_h_gr_SI_15) = 15;
    }
#endif
#undef FLD
    return idesc;
  }

 extract_sfmt_xchb:
  {
    const IDESC *idesc = &fr30bf_insn_data[itype];
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.sfmt_add.f
    UINT f_Rj;
    UINT f_Ri;

    f_Rj = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);

  /* Record the fields for the semantic handler.  */
  FLD (f_Ri) = f_Ri;
  FLD (f_Rj) = f_Rj;
  FLD (i_Ri) = & CPU (h_gr)[f_Ri];
  FLD (i_Rj) = & CPU (h_gr)[f_Rj];
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_xchb", "f_Ri 0x%x", 'x', f_Ri, "f_Rj 0x%x", 'x', f_Rj, "Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
      FLD (in_Ri) = f_Ri;
      FLD (in_Rj) = f_Rj;
      FLD (out_Ri) = f_Ri;
    }
#endif
#undef FLD
    return idesc;
  }

}
@


1.4.8.1
log
@Merge w/trunk (kseitz_interps-20020722-merge).
@
text
@d1 3453
a3453 3453
// OBSOLETE /* Simulator instruction decoder for fr30bf.
// OBSOLETE 
// OBSOLETE THIS FILE IS MACHINE GENERATED WITH CGEN.
// OBSOLETE 
// OBSOLETE Copyright 1996, 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.
// OBSOLETE 
// OBSOLETE This file is part of the GNU simulators.
// OBSOLETE 
// OBSOLETE This program is free software; you can redistribute it and/or modify
// OBSOLETE it under the terms of the GNU General Public License as published by
// OBSOLETE the Free Software Foundation; either version 2, or (at your option)
// OBSOLETE any later version.
// OBSOLETE 
// OBSOLETE This program is distributed in the hope that it will be useful,
// OBSOLETE but WITHOUT ANY WARRANTY; without even the implied warranty of
// OBSOLETE MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// OBSOLETE GNU General Public License for more details.
// OBSOLETE 
// OBSOLETE You should have received a copy of the GNU General Public License along
// OBSOLETE with this program; if not, write to the Free Software Foundation, Inc.,
// OBSOLETE 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
// OBSOLETE 
// OBSOLETE */
// OBSOLETE 
// OBSOLETE #define WANT_CPU fr30bf
// OBSOLETE #define WANT_CPU_FR30BF
// OBSOLETE 
// OBSOLETE #include "sim-main.h"
// OBSOLETE #include "sim-assert.h"
// OBSOLETE 
// OBSOLETE /* The instruction descriptor array.
// OBSOLETE    This is computed at runtime.  Space for it is not malloc'd to save a
// OBSOLETE    teensy bit of cpu in the decoder.  Moving it to malloc space is trivial
// OBSOLETE    but won't be done until necessary (we don't currently support the runtime
// OBSOLETE    addition of instructions nor an SMP machine with different cpus).  */
// OBSOLETE static IDESC fr30bf_insn_data[FR30BF_INSN_XCHB + 1];
// OBSOLETE 
// OBSOLETE /* Commas between elements are contained in the macros.
// OBSOLETE    Some of these are conditionally compiled out.  */
// OBSOLETE 
// OBSOLETE static const struct insn_sem fr30bf_insn_sem[] =
// OBSOLETE {
// OBSOLETE   { VIRTUAL_INSN_X_INVALID, FR30BF_INSN_X_INVALID, FR30BF_SFMT_EMPTY },
// OBSOLETE   { VIRTUAL_INSN_X_AFTER, FR30BF_INSN_X_AFTER, FR30BF_SFMT_EMPTY },
// OBSOLETE   { VIRTUAL_INSN_X_BEFORE, FR30BF_INSN_X_BEFORE, FR30BF_SFMT_EMPTY },
// OBSOLETE   { VIRTUAL_INSN_X_CTI_CHAIN, FR30BF_INSN_X_CTI_CHAIN, FR30BF_SFMT_EMPTY },
// OBSOLETE   { VIRTUAL_INSN_X_CHAIN, FR30BF_INSN_X_CHAIN, FR30BF_SFMT_EMPTY },
// OBSOLETE   { VIRTUAL_INSN_X_BEGIN, FR30BF_INSN_X_BEGIN, FR30BF_SFMT_EMPTY },
// OBSOLETE   { FR30_INSN_ADD, FR30BF_INSN_ADD, FR30BF_SFMT_ADD },
// OBSOLETE   { FR30_INSN_ADDI, FR30BF_INSN_ADDI, FR30BF_SFMT_ADDI },
// OBSOLETE   { FR30_INSN_ADD2, FR30BF_INSN_ADD2, FR30BF_SFMT_ADD2 },
// OBSOLETE   { FR30_INSN_ADDC, FR30BF_INSN_ADDC, FR30BF_SFMT_ADDC },
// OBSOLETE   { FR30_INSN_ADDN, FR30BF_INSN_ADDN, FR30BF_SFMT_ADDN },
// OBSOLETE   { FR30_INSN_ADDNI, FR30BF_INSN_ADDNI, FR30BF_SFMT_ADDNI },
// OBSOLETE   { FR30_INSN_ADDN2, FR30BF_INSN_ADDN2, FR30BF_SFMT_ADDN2 },
// OBSOLETE   { FR30_INSN_SUB, FR30BF_INSN_SUB, FR30BF_SFMT_ADD },
// OBSOLETE   { FR30_INSN_SUBC, FR30BF_INSN_SUBC, FR30BF_SFMT_ADDC },
// OBSOLETE   { FR30_INSN_SUBN, FR30BF_INSN_SUBN, FR30BF_SFMT_ADDN },
// OBSOLETE   { FR30_INSN_CMP, FR30BF_INSN_CMP, FR30BF_SFMT_CMP },
// OBSOLETE   { FR30_INSN_CMPI, FR30BF_INSN_CMPI, FR30BF_SFMT_CMPI },
// OBSOLETE   { FR30_INSN_CMP2, FR30BF_INSN_CMP2, FR30BF_SFMT_CMP2 },
// OBSOLETE   { FR30_INSN_AND, FR30BF_INSN_AND, FR30BF_SFMT_AND },
// OBSOLETE   { FR30_INSN_OR, FR30BF_INSN_OR, FR30BF_SFMT_AND },
// OBSOLETE   { FR30_INSN_EOR, FR30BF_INSN_EOR, FR30BF_SFMT_AND },
// OBSOLETE   { FR30_INSN_ANDM, FR30BF_INSN_ANDM, FR30BF_SFMT_ANDM },
// OBSOLETE   { FR30_INSN_ANDH, FR30BF_INSN_ANDH, FR30BF_SFMT_ANDH },
// OBSOLETE   { FR30_INSN_ANDB, FR30BF_INSN_ANDB, FR30BF_SFMT_ANDB },
// OBSOLETE   { FR30_INSN_ORM, FR30BF_INSN_ORM, FR30BF_SFMT_ANDM },
// OBSOLETE   { FR30_INSN_ORH, FR30BF_INSN_ORH, FR30BF_SFMT_ANDH },
// OBSOLETE   { FR30_INSN_ORB, FR30BF_INSN_ORB, FR30BF_SFMT_ANDB },
// OBSOLETE   { FR30_INSN_EORM, FR30BF_INSN_EORM, FR30BF_SFMT_ANDM },
// OBSOLETE   { FR30_INSN_EORH, FR30BF_INSN_EORH, FR30BF_SFMT_ANDH },
// OBSOLETE   { FR30_INSN_EORB, FR30BF_INSN_EORB, FR30BF_SFMT_ANDB },
// OBSOLETE   { FR30_INSN_BANDL, FR30BF_INSN_BANDL, FR30BF_SFMT_BANDL },
// OBSOLETE   { FR30_INSN_BORL, FR30BF_INSN_BORL, FR30BF_SFMT_BANDL },
// OBSOLETE   { FR30_INSN_BEORL, FR30BF_INSN_BEORL, FR30BF_SFMT_BANDL },
// OBSOLETE   { FR30_INSN_BANDH, FR30BF_INSN_BANDH, FR30BF_SFMT_BANDL },
// OBSOLETE   { FR30_INSN_BORH, FR30BF_INSN_BORH, FR30BF_SFMT_BANDL },
// OBSOLETE   { FR30_INSN_BEORH, FR30BF_INSN_BEORH, FR30BF_SFMT_BANDL },
// OBSOLETE   { FR30_INSN_BTSTL, FR30BF_INSN_BTSTL, FR30BF_SFMT_BTSTL },
// OBSOLETE   { FR30_INSN_BTSTH, FR30BF_INSN_BTSTH, FR30BF_SFMT_BTSTL },
// OBSOLETE   { FR30_INSN_MUL, FR30BF_INSN_MUL, FR30BF_SFMT_MUL },
// OBSOLETE   { FR30_INSN_MULU, FR30BF_INSN_MULU, FR30BF_SFMT_MULU },
// OBSOLETE   { FR30_INSN_MULH, FR30BF_INSN_MULH, FR30BF_SFMT_MULH },
// OBSOLETE   { FR30_INSN_MULUH, FR30BF_INSN_MULUH, FR30BF_SFMT_MULH },
// OBSOLETE   { FR30_INSN_DIV0S, FR30BF_INSN_DIV0S, FR30BF_SFMT_DIV0S },
// OBSOLETE   { FR30_INSN_DIV0U, FR30BF_INSN_DIV0U, FR30BF_SFMT_DIV0U },
// OBSOLETE   { FR30_INSN_DIV1, FR30BF_INSN_DIV1, FR30BF_SFMT_DIV1 },
// OBSOLETE   { FR30_INSN_DIV2, FR30BF_INSN_DIV2, FR30BF_SFMT_DIV2 },
// OBSOLETE   { FR30_INSN_DIV3, FR30BF_INSN_DIV3, FR30BF_SFMT_DIV3 },
// OBSOLETE   { FR30_INSN_DIV4S, FR30BF_INSN_DIV4S, FR30BF_SFMT_DIV4S },
// OBSOLETE   { FR30_INSN_LSL, FR30BF_INSN_LSL, FR30BF_SFMT_LSL },
// OBSOLETE   { FR30_INSN_LSLI, FR30BF_INSN_LSLI, FR30BF_SFMT_LSLI },
// OBSOLETE   { FR30_INSN_LSL2, FR30BF_INSN_LSL2, FR30BF_SFMT_LSLI },
// OBSOLETE   { FR30_INSN_LSR, FR30BF_INSN_LSR, FR30BF_SFMT_LSL },
// OBSOLETE   { FR30_INSN_LSRI, FR30BF_INSN_LSRI, FR30BF_SFMT_LSLI },
// OBSOLETE   { FR30_INSN_LSR2, FR30BF_INSN_LSR2, FR30BF_SFMT_LSLI },
// OBSOLETE   { FR30_INSN_ASR, FR30BF_INSN_ASR, FR30BF_SFMT_LSL },
// OBSOLETE   { FR30_INSN_ASRI, FR30BF_INSN_ASRI, FR30BF_SFMT_LSLI },
// OBSOLETE   { FR30_INSN_ASR2, FR30BF_INSN_ASR2, FR30BF_SFMT_LSLI },
// OBSOLETE   { FR30_INSN_LDI8, FR30BF_INSN_LDI8, FR30BF_SFMT_LDI8 },
// OBSOLETE   { FR30_INSN_LDI20, FR30BF_INSN_LDI20, FR30BF_SFMT_LDI20 },
// OBSOLETE   { FR30_INSN_LDI32, FR30BF_INSN_LDI32, FR30BF_SFMT_LDI32 },
// OBSOLETE   { FR30_INSN_LD, FR30BF_INSN_LD, FR30BF_SFMT_LD },
// OBSOLETE   { FR30_INSN_LDUH, FR30BF_INSN_LDUH, FR30BF_SFMT_LDUH },
// OBSOLETE   { FR30_INSN_LDUB, FR30BF_INSN_LDUB, FR30BF_SFMT_LDUB },
// OBSOLETE   { FR30_INSN_LDR13, FR30BF_INSN_LDR13, FR30BF_SFMT_LDR13 },
// OBSOLETE   { FR30_INSN_LDR13UH, FR30BF_INSN_LDR13UH, FR30BF_SFMT_LDR13UH },
// OBSOLETE   { FR30_INSN_LDR13UB, FR30BF_INSN_LDR13UB, FR30BF_SFMT_LDR13UB },
// OBSOLETE   { FR30_INSN_LDR14, FR30BF_INSN_LDR14, FR30BF_SFMT_LDR14 },
// OBSOLETE   { FR30_INSN_LDR14UH, FR30BF_INSN_LDR14UH, FR30BF_SFMT_LDR14UH },
// OBSOLETE   { FR30_INSN_LDR14UB, FR30BF_INSN_LDR14UB, FR30BF_SFMT_LDR14UB },
// OBSOLETE   { FR30_INSN_LDR15, FR30BF_INSN_LDR15, FR30BF_SFMT_LDR15 },
// OBSOLETE   { FR30_INSN_LDR15GR, FR30BF_INSN_LDR15GR, FR30BF_SFMT_LDR15GR },
// OBSOLETE   { FR30_INSN_LDR15DR, FR30BF_INSN_LDR15DR, FR30BF_SFMT_LDR15DR },
// OBSOLETE   { FR30_INSN_LDR15PS, FR30BF_INSN_LDR15PS, FR30BF_SFMT_LDR15PS },
// OBSOLETE   { FR30_INSN_ST, FR30BF_INSN_ST, FR30BF_SFMT_ST },
// OBSOLETE   { FR30_INSN_STH, FR30BF_INSN_STH, FR30BF_SFMT_STH },
// OBSOLETE   { FR30_INSN_STB, FR30BF_INSN_STB, FR30BF_SFMT_STB },
// OBSOLETE   { FR30_INSN_STR13, FR30BF_INSN_STR13, FR30BF_SFMT_STR13 },
// OBSOLETE   { FR30_INSN_STR13H, FR30BF_INSN_STR13H, FR30BF_SFMT_STR13H },
// OBSOLETE   { FR30_INSN_STR13B, FR30BF_INSN_STR13B, FR30BF_SFMT_STR13B },
// OBSOLETE   { FR30_INSN_STR14, FR30BF_INSN_STR14, FR30BF_SFMT_STR14 },
// OBSOLETE   { FR30_INSN_STR14H, FR30BF_INSN_STR14H, FR30BF_SFMT_STR14H },
// OBSOLETE   { FR30_INSN_STR14B, FR30BF_INSN_STR14B, FR30BF_SFMT_STR14B },
// OBSOLETE   { FR30_INSN_STR15, FR30BF_INSN_STR15, FR30BF_SFMT_STR15 },
// OBSOLETE   { FR30_INSN_STR15GR, FR30BF_INSN_STR15GR, FR30BF_SFMT_STR15GR },
// OBSOLETE   { FR30_INSN_STR15DR, FR30BF_INSN_STR15DR, FR30BF_SFMT_STR15DR },
// OBSOLETE   { FR30_INSN_STR15PS, FR30BF_INSN_STR15PS, FR30BF_SFMT_STR15PS },
// OBSOLETE   { FR30_INSN_MOV, FR30BF_INSN_MOV, FR30BF_SFMT_MOV },
// OBSOLETE   { FR30_INSN_MOVDR, FR30BF_INSN_MOVDR, FR30BF_SFMT_MOVDR },
// OBSOLETE   { FR30_INSN_MOVPS, FR30BF_INSN_MOVPS, FR30BF_SFMT_MOVPS },
// OBSOLETE   { FR30_INSN_MOV2DR, FR30BF_INSN_MOV2DR, FR30BF_SFMT_MOV2DR },
// OBSOLETE   { FR30_INSN_MOV2PS, FR30BF_INSN_MOV2PS, FR30BF_SFMT_MOV2PS },
// OBSOLETE   { FR30_INSN_JMP, FR30BF_INSN_JMP, FR30BF_SFMT_JMP },
// OBSOLETE   { FR30_INSN_JMPD, FR30BF_INSN_JMPD, FR30BF_SFMT_JMP },
// OBSOLETE   { FR30_INSN_CALLR, FR30BF_INSN_CALLR, FR30BF_SFMT_CALLR },
// OBSOLETE   { FR30_INSN_CALLRD, FR30BF_INSN_CALLRD, FR30BF_SFMT_CALLR },
// OBSOLETE   { FR30_INSN_CALL, FR30BF_INSN_CALL, FR30BF_SFMT_CALL },
// OBSOLETE   { FR30_INSN_CALLD, FR30BF_INSN_CALLD, FR30BF_SFMT_CALL },
// OBSOLETE   { FR30_INSN_RET, FR30BF_INSN_RET, FR30BF_SFMT_RET },
// OBSOLETE   { FR30_INSN_RET_D, FR30BF_INSN_RET_D, FR30BF_SFMT_RET },
// OBSOLETE   { FR30_INSN_INT, FR30BF_INSN_INT, FR30BF_SFMT_INT },
// OBSOLETE   { FR30_INSN_INTE, FR30BF_INSN_INTE, FR30BF_SFMT_INTE },
// OBSOLETE   { FR30_INSN_RETI, FR30BF_INSN_RETI, FR30BF_SFMT_RETI },
// OBSOLETE   { FR30_INSN_BRAD, FR30BF_INSN_BRAD, FR30BF_SFMT_BRAD },
// OBSOLETE   { FR30_INSN_BRA, FR30BF_INSN_BRA, FR30BF_SFMT_BRAD },
// OBSOLETE   { FR30_INSN_BNOD, FR30BF_INSN_BNOD, FR30BF_SFMT_BNOD },
// OBSOLETE   { FR30_INSN_BNO, FR30BF_INSN_BNO, FR30BF_SFMT_BNOD },
// OBSOLETE   { FR30_INSN_BEQD, FR30BF_INSN_BEQD, FR30BF_SFMT_BEQD },
// OBSOLETE   { FR30_INSN_BEQ, FR30BF_INSN_BEQ, FR30BF_SFMT_BEQD },
// OBSOLETE   { FR30_INSN_BNED, FR30BF_INSN_BNED, FR30BF_SFMT_BEQD },
// OBSOLETE   { FR30_INSN_BNE, FR30BF_INSN_BNE, FR30BF_SFMT_BEQD },
// OBSOLETE   { FR30_INSN_BCD, FR30BF_INSN_BCD, FR30BF_SFMT_BCD },
// OBSOLETE   { FR30_INSN_BC, FR30BF_INSN_BC, FR30BF_SFMT_BCD },
// OBSOLETE   { FR30_INSN_BNCD, FR30BF_INSN_BNCD, FR30BF_SFMT_BCD },
// OBSOLETE   { FR30_INSN_BNC, FR30BF_INSN_BNC, FR30BF_SFMT_BCD },
// OBSOLETE   { FR30_INSN_BND, FR30BF_INSN_BND, FR30BF_SFMT_BND },
// OBSOLETE   { FR30_INSN_BN, FR30BF_INSN_BN, FR30BF_SFMT_BND },
// OBSOLETE   { FR30_INSN_BPD, FR30BF_INSN_BPD, FR30BF_SFMT_BND },
// OBSOLETE   { FR30_INSN_BP, FR30BF_INSN_BP, FR30BF_SFMT_BND },
// OBSOLETE   { FR30_INSN_BVD, FR30BF_INSN_BVD, FR30BF_SFMT_BVD },
// OBSOLETE   { FR30_INSN_BV, FR30BF_INSN_BV, FR30BF_SFMT_BVD },
// OBSOLETE   { FR30_INSN_BNVD, FR30BF_INSN_BNVD, FR30BF_SFMT_BVD },
// OBSOLETE   { FR30_INSN_BNV, FR30BF_INSN_BNV, FR30BF_SFMT_BVD },
// OBSOLETE   { FR30_INSN_BLTD, FR30BF_INSN_BLTD, FR30BF_SFMT_BLTD },
// OBSOLETE   { FR30_INSN_BLT, FR30BF_INSN_BLT, FR30BF_SFMT_BLTD },
// OBSOLETE   { FR30_INSN_BGED, FR30BF_INSN_BGED, FR30BF_SFMT_BLTD },
// OBSOLETE   { FR30_INSN_BGE, FR30BF_INSN_BGE, FR30BF_SFMT_BLTD },
// OBSOLETE   { FR30_INSN_BLED, FR30BF_INSN_BLED, FR30BF_SFMT_BLED },
// OBSOLETE   { FR30_INSN_BLE, FR30BF_INSN_BLE, FR30BF_SFMT_BLED },
// OBSOLETE   { FR30_INSN_BGTD, FR30BF_INSN_BGTD, FR30BF_SFMT_BLED },
// OBSOLETE   { FR30_INSN_BGT, FR30BF_INSN_BGT, FR30BF_SFMT_BLED },
// OBSOLETE   { FR30_INSN_BLSD, FR30BF_INSN_BLSD, FR30BF_SFMT_BLSD },
// OBSOLETE   { FR30_INSN_BLS, FR30BF_INSN_BLS, FR30BF_SFMT_BLSD },
// OBSOLETE   { FR30_INSN_BHID, FR30BF_INSN_BHID, FR30BF_SFMT_BLSD },
// OBSOLETE   { FR30_INSN_BHI, FR30BF_INSN_BHI, FR30BF_SFMT_BLSD },
// OBSOLETE   { FR30_INSN_DMOVR13, FR30BF_INSN_DMOVR13, FR30BF_SFMT_DMOVR13 },
// OBSOLETE   { FR30_INSN_DMOVR13H, FR30BF_INSN_DMOVR13H, FR30BF_SFMT_DMOVR13H },
// OBSOLETE   { FR30_INSN_DMOVR13B, FR30BF_INSN_DMOVR13B, FR30BF_SFMT_DMOVR13B },
// OBSOLETE   { FR30_INSN_DMOVR13PI, FR30BF_INSN_DMOVR13PI, FR30BF_SFMT_DMOVR13PI },
// OBSOLETE   { FR30_INSN_DMOVR13PIH, FR30BF_INSN_DMOVR13PIH, FR30BF_SFMT_DMOVR13PIH },
// OBSOLETE   { FR30_INSN_DMOVR13PIB, FR30BF_INSN_DMOVR13PIB, FR30BF_SFMT_DMOVR13PIB },
// OBSOLETE   { FR30_INSN_DMOVR15PI, FR30BF_INSN_DMOVR15PI, FR30BF_SFMT_DMOVR15PI },
// OBSOLETE   { FR30_INSN_DMOV2R13, FR30BF_INSN_DMOV2R13, FR30BF_SFMT_DMOV2R13 },
// OBSOLETE   { FR30_INSN_DMOV2R13H, FR30BF_INSN_DMOV2R13H, FR30BF_SFMT_DMOV2R13H },
// OBSOLETE   { FR30_INSN_DMOV2R13B, FR30BF_INSN_DMOV2R13B, FR30BF_SFMT_DMOV2R13B },
// OBSOLETE   { FR30_INSN_DMOV2R13PI, FR30BF_INSN_DMOV2R13PI, FR30BF_SFMT_DMOV2R13PI },
// OBSOLETE   { FR30_INSN_DMOV2R13PIH, FR30BF_INSN_DMOV2R13PIH, FR30BF_SFMT_DMOV2R13PIH },
// OBSOLETE   { FR30_INSN_DMOV2R13PIB, FR30BF_INSN_DMOV2R13PIB, FR30BF_SFMT_DMOV2R13PIB },
// OBSOLETE   { FR30_INSN_DMOV2R15PD, FR30BF_INSN_DMOV2R15PD, FR30BF_SFMT_DMOV2R15PD },
// OBSOLETE   { FR30_INSN_LDRES, FR30BF_INSN_LDRES, FR30BF_SFMT_LDRES },
// OBSOLETE   { FR30_INSN_STRES, FR30BF_INSN_STRES, FR30BF_SFMT_LDRES },
// OBSOLETE   { FR30_INSN_COPOP, FR30BF_INSN_COPOP, FR30BF_SFMT_COPOP },
// OBSOLETE   { FR30_INSN_COPLD, FR30BF_INSN_COPLD, FR30BF_SFMT_COPOP },
// OBSOLETE   { FR30_INSN_COPST, FR30BF_INSN_COPST, FR30BF_SFMT_COPOP },
// OBSOLETE   { FR30_INSN_COPSV, FR30BF_INSN_COPSV, FR30BF_SFMT_COPOP },
// OBSOLETE   { FR30_INSN_NOP, FR30BF_INSN_NOP, FR30BF_SFMT_BNOD },
// OBSOLETE   { FR30_INSN_ANDCCR, FR30BF_INSN_ANDCCR, FR30BF_SFMT_ANDCCR },
// OBSOLETE   { FR30_INSN_ORCCR, FR30BF_INSN_ORCCR, FR30BF_SFMT_ANDCCR },
// OBSOLETE   { FR30_INSN_STILM, FR30BF_INSN_STILM, FR30BF_SFMT_STILM },
// OBSOLETE   { FR30_INSN_ADDSP, FR30BF_INSN_ADDSP, FR30BF_SFMT_ADDSP },
// OBSOLETE   { FR30_INSN_EXTSB, FR30BF_INSN_EXTSB, FR30BF_SFMT_EXTSB },
// OBSOLETE   { FR30_INSN_EXTUB, FR30BF_INSN_EXTUB, FR30BF_SFMT_EXTUB },
// OBSOLETE   { FR30_INSN_EXTSH, FR30BF_INSN_EXTSH, FR30BF_SFMT_EXTSH },
// OBSOLETE   { FR30_INSN_EXTUH, FR30BF_INSN_EXTUH, FR30BF_SFMT_EXTUH },
// OBSOLETE   { FR30_INSN_LDM0, FR30BF_INSN_LDM0, FR30BF_SFMT_LDM0 },
// OBSOLETE   { FR30_INSN_LDM1, FR30BF_INSN_LDM1, FR30BF_SFMT_LDM1 },
// OBSOLETE   { FR30_INSN_STM0, FR30BF_INSN_STM0, FR30BF_SFMT_STM0 },
// OBSOLETE   { FR30_INSN_STM1, FR30BF_INSN_STM1, FR30BF_SFMT_STM1 },
// OBSOLETE   { FR30_INSN_ENTER, FR30BF_INSN_ENTER, FR30BF_SFMT_ENTER },
// OBSOLETE   { FR30_INSN_LEAVE, FR30BF_INSN_LEAVE, FR30BF_SFMT_LEAVE },
// OBSOLETE   { FR30_INSN_XCHB, FR30BF_INSN_XCHB, FR30BF_SFMT_XCHB },
// OBSOLETE };
// OBSOLETE 
// OBSOLETE static const struct insn_sem fr30bf_insn_sem_invalid = {
// OBSOLETE   VIRTUAL_INSN_X_INVALID, FR30BF_INSN_X_INVALID, FR30BF_SFMT_EMPTY
// OBSOLETE };
// OBSOLETE 
// OBSOLETE /* Initialize an IDESC from the compile-time computable parts.  */
// OBSOLETE 
// OBSOLETE static INLINE void
// OBSOLETE init_idesc (SIM_CPU *cpu, IDESC *id, const struct insn_sem *t)
// OBSOLETE {
// OBSOLETE   const CGEN_INSN *insn_table = CGEN_CPU_INSN_TABLE (CPU_CPU_DESC (cpu))->init_entries;
// OBSOLETE 
// OBSOLETE   id->num = t->index;
// OBSOLETE   id->sfmt = t->sfmt;
// OBSOLETE   if ((int) t->type <= 0)
// OBSOLETE     id->idata = & cgen_virtual_insn_table[- (int) t->type];
// OBSOLETE   else
// OBSOLETE     id->idata = & insn_table[t->type];
// OBSOLETE   id->attrs = CGEN_INSN_ATTRS (id->idata);
// OBSOLETE   /* Oh my god, a magic number.  */
// OBSOLETE   id->length = CGEN_INSN_BITSIZE (id->idata) / 8;
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   id->timing = & MODEL_TIMING (CPU_MODEL (cpu)) [t->index];
// OBSOLETE   {
// OBSOLETE     SIM_DESC sd = CPU_STATE (cpu);
// OBSOLETE     SIM_ASSERT (t->index == id->timing->num);
// OBSOLETE   }
// OBSOLETE #endif
// OBSOLETE 
// OBSOLETE   /* Semantic pointers are initialized elsewhere.  */
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* Initialize the instruction descriptor table.  */
// OBSOLETE 
// OBSOLETE void
// OBSOLETE fr30bf_init_idesc_table (SIM_CPU *cpu)
// OBSOLETE {
// OBSOLETE   IDESC *id,*tabend;
// OBSOLETE   const struct insn_sem *t,*tend;
// OBSOLETE   int tabsize = sizeof (fr30bf_insn_data) / sizeof (IDESC);
// OBSOLETE   IDESC *table = fr30bf_insn_data;
// OBSOLETE 
// OBSOLETE   memset (table, 0, tabsize * sizeof (IDESC));
// OBSOLETE 
// OBSOLETE   /* First set all entries to the `invalid insn'.  */
// OBSOLETE   t = & fr30bf_insn_sem_invalid;
// OBSOLETE   for (id = table, tabend = table + tabsize; id < tabend; ++id)
// OBSOLETE     init_idesc (cpu, id, t);
// OBSOLETE 
// OBSOLETE   /* Now fill in the values for the chosen cpu.  */
// OBSOLETE   for (t = fr30bf_insn_sem, tend = t + sizeof (fr30bf_insn_sem) / sizeof (*t);
// OBSOLETE        t != tend; ++t)
// OBSOLETE     {
// OBSOLETE       init_idesc (cpu, & table[t->index], t);
// OBSOLETE     }
// OBSOLETE 
// OBSOLETE   /* Link the IDESC table into the cpu.  */
// OBSOLETE   CPU_IDESC (cpu) = table;
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* Given an instruction, return a pointer to its IDESC entry.  */
// OBSOLETE 
// OBSOLETE const IDESC *
// OBSOLETE fr30bf_decode (SIM_CPU *current_cpu, IADDR pc,
// OBSOLETE               CGEN_INSN_INT base_insn,
// OBSOLETE               ARGBUF *abuf)
// OBSOLETE {
// OBSOLETE   /* Result of decoder.  */
// OBSOLETE   FR30BF_INSN_TYPE itype;
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE 
// OBSOLETE     {
// OBSOLETE       unsigned int val = (((insn >> 8) & (255 << 0)));
// OBSOLETE       switch (val)
// OBSOLETE       {
// OBSOLETE       case 0 : itype = FR30BF_INSN_LDR13;goto extract_sfmt_ldr13;
// OBSOLETE       case 1 : itype = FR30BF_INSN_LDR13UH;goto extract_sfmt_ldr13uh;
// OBSOLETE       case 2 : itype = FR30BF_INSN_LDR13UB;goto extract_sfmt_ldr13ub;
// OBSOLETE       case 3 : itype = FR30BF_INSN_LDR15;goto extract_sfmt_ldr15;
// OBSOLETE       case 4 : itype = FR30BF_INSN_LD;goto extract_sfmt_ld;
// OBSOLETE       case 5 : itype = FR30BF_INSN_LDUH;goto extract_sfmt_lduh;
// OBSOLETE       case 6 : itype = FR30BF_INSN_LDUB;goto extract_sfmt_ldub;
// OBSOLETE       case 7 :
// OBSOLETE         {
// OBSOLETE           unsigned int val = (((insn >> 6) & (1 << 1)) | ((insn >> 4) & (1 << 0)));
// OBSOLETE           switch (val)
// OBSOLETE           {
// OBSOLETE           case 0 : itype = FR30BF_INSN_LDR15GR;goto extract_sfmt_ldr15gr;
// OBSOLETE           case 1 : itype = FR30BF_INSN_MOV2PS;goto extract_sfmt_mov2ps;
// OBSOLETE           case 2 : itype = FR30BF_INSN_LDR15DR;goto extract_sfmt_ldr15dr;
// OBSOLETE           case 3 : itype = FR30BF_INSN_LDR15PS;goto extract_sfmt_ldr15ps;
// OBSOLETE           default : itype = FR30BF_INSN_X_INVALID; goto extract_sfmt_empty;
// OBSOLETE           }
// OBSOLETE         }
// OBSOLETE       case 8 : itype = FR30BF_INSN_DMOV2R13;goto extract_sfmt_dmov2r13;
// OBSOLETE       case 9 : itype = FR30BF_INSN_DMOV2R13H;goto extract_sfmt_dmov2r13h;
// OBSOLETE       case 10 : itype = FR30BF_INSN_DMOV2R13B;goto extract_sfmt_dmov2r13b;
// OBSOLETE       case 11 : itype = FR30BF_INSN_DMOV2R15PD;goto extract_sfmt_dmov2r15pd;
// OBSOLETE       case 12 : itype = FR30BF_INSN_DMOV2R13PI;goto extract_sfmt_dmov2r13pi;
// OBSOLETE       case 13 : itype = FR30BF_INSN_DMOV2R13PIH;goto extract_sfmt_dmov2r13pih;
// OBSOLETE       case 14 : itype = FR30BF_INSN_DMOV2R13PIB;goto extract_sfmt_dmov2r13pib;
// OBSOLETE       case 15 : itype = FR30BF_INSN_ENTER;goto extract_sfmt_enter;
// OBSOLETE       case 16 : itype = FR30BF_INSN_STR13;goto extract_sfmt_str13;
// OBSOLETE       case 17 : itype = FR30BF_INSN_STR13H;goto extract_sfmt_str13h;
// OBSOLETE       case 18 : itype = FR30BF_INSN_STR13B;goto extract_sfmt_str13b;
// OBSOLETE       case 19 : itype = FR30BF_INSN_STR15;goto extract_sfmt_str15;
// OBSOLETE       case 20 : itype = FR30BF_INSN_ST;goto extract_sfmt_st;
// OBSOLETE       case 21 : itype = FR30BF_INSN_STH;goto extract_sfmt_sth;
// OBSOLETE       case 22 : itype = FR30BF_INSN_STB;goto extract_sfmt_stb;
// OBSOLETE       case 23 :
// OBSOLETE         {
// OBSOLETE           unsigned int val = (((insn >> 6) & (1 << 1)) | ((insn >> 4) & (1 << 0)));
// OBSOLETE           switch (val)
// OBSOLETE           {
// OBSOLETE           case 0 : itype = FR30BF_INSN_STR15GR;goto extract_sfmt_str15gr;
// OBSOLETE           case 1 : itype = FR30BF_INSN_MOVPS;goto extract_sfmt_movps;
// OBSOLETE           case 2 : itype = FR30BF_INSN_STR15DR;goto extract_sfmt_str15dr;
// OBSOLETE           case 3 : itype = FR30BF_INSN_STR15PS;goto extract_sfmt_str15ps;
// OBSOLETE           default : itype = FR30BF_INSN_X_INVALID; goto extract_sfmt_empty;
// OBSOLETE           }
// OBSOLETE         }
// OBSOLETE       case 24 : itype = FR30BF_INSN_DMOVR13;goto extract_sfmt_dmovr13;
// OBSOLETE       case 25 : itype = FR30BF_INSN_DMOVR13H;goto extract_sfmt_dmovr13h;
// OBSOLETE       case 26 : itype = FR30BF_INSN_DMOVR13B;goto extract_sfmt_dmovr13b;
// OBSOLETE       case 27 : itype = FR30BF_INSN_DMOVR15PI;goto extract_sfmt_dmovr15pi;
// OBSOLETE       case 28 : itype = FR30BF_INSN_DMOVR13PI;goto extract_sfmt_dmovr13pi;
// OBSOLETE       case 29 : itype = FR30BF_INSN_DMOVR13PIH;goto extract_sfmt_dmovr13pih;
// OBSOLETE       case 30 : itype = FR30BF_INSN_DMOVR13PIB;goto extract_sfmt_dmovr13pib;
// OBSOLETE       case 31 : itype = FR30BF_INSN_INT;goto extract_sfmt_int;
// OBSOLETE       case 32 : /* fall through */
// OBSOLETE       case 33 : /* fall through */
// OBSOLETE       case 34 : /* fall through */
// OBSOLETE       case 35 : /* fall through */
// OBSOLETE       case 36 : /* fall through */
// OBSOLETE       case 37 : /* fall through */
// OBSOLETE       case 38 : /* fall through */
// OBSOLETE       case 39 : /* fall through */
// OBSOLETE       case 40 : /* fall through */
// OBSOLETE       case 41 : /* fall through */
// OBSOLETE       case 42 : /* fall through */
// OBSOLETE       case 43 : /* fall through */
// OBSOLETE       case 44 : /* fall through */
// OBSOLETE       case 45 : /* fall through */
// OBSOLETE       case 46 : /* fall through */
// OBSOLETE       case 47 : itype = FR30BF_INSN_LDR14;goto extract_sfmt_ldr14;
// OBSOLETE       case 48 : /* fall through */
// OBSOLETE       case 49 : /* fall through */
// OBSOLETE       case 50 : /* fall through */
// OBSOLETE       case 51 : /* fall through */
// OBSOLETE       case 52 : /* fall through */
// OBSOLETE       case 53 : /* fall through */
// OBSOLETE       case 54 : /* fall through */
// OBSOLETE       case 55 : /* fall through */
// OBSOLETE       case 56 : /* fall through */
// OBSOLETE       case 57 : /* fall through */
// OBSOLETE       case 58 : /* fall through */
// OBSOLETE       case 59 : /* fall through */
// OBSOLETE       case 60 : /* fall through */
// OBSOLETE       case 61 : /* fall through */
// OBSOLETE       case 62 : /* fall through */
// OBSOLETE       case 63 : itype = FR30BF_INSN_STR14;goto extract_sfmt_str14;
// OBSOLETE       case 64 : /* fall through */
// OBSOLETE       case 65 : /* fall through */
// OBSOLETE       case 66 : /* fall through */
// OBSOLETE       case 67 : /* fall through */
// OBSOLETE       case 68 : /* fall through */
// OBSOLETE       case 69 : /* fall through */
// OBSOLETE       case 70 : /* fall through */
// OBSOLETE       case 71 : /* fall through */
// OBSOLETE       case 72 : /* fall through */
// OBSOLETE       case 73 : /* fall through */
// OBSOLETE       case 74 : /* fall through */
// OBSOLETE       case 75 : /* fall through */
// OBSOLETE       case 76 : /* fall through */
// OBSOLETE       case 77 : /* fall through */
// OBSOLETE       case 78 : /* fall through */
// OBSOLETE       case 79 : itype = FR30BF_INSN_LDR14UH;goto extract_sfmt_ldr14uh;
// OBSOLETE       case 80 : /* fall through */
// OBSOLETE       case 81 : /* fall through */
// OBSOLETE       case 82 : /* fall through */
// OBSOLETE       case 83 : /* fall through */
// OBSOLETE       case 84 : /* fall through */
// OBSOLETE       case 85 : /* fall through */
// OBSOLETE       case 86 : /* fall through */
// OBSOLETE       case 87 : /* fall through */
// OBSOLETE       case 88 : /* fall through */
// OBSOLETE       case 89 : /* fall through */
// OBSOLETE       case 90 : /* fall through */
// OBSOLETE       case 91 : /* fall through */
// OBSOLETE       case 92 : /* fall through */
// OBSOLETE       case 93 : /* fall through */
// OBSOLETE       case 94 : /* fall through */
// OBSOLETE       case 95 : itype = FR30BF_INSN_STR14H;goto extract_sfmt_str14h;
// OBSOLETE       case 96 : /* fall through */
// OBSOLETE       case 97 : /* fall through */
// OBSOLETE       case 98 : /* fall through */
// OBSOLETE       case 99 : /* fall through */
// OBSOLETE       case 100 : /* fall through */
// OBSOLETE       case 101 : /* fall through */
// OBSOLETE       case 102 : /* fall through */
// OBSOLETE       case 103 : /* fall through */
// OBSOLETE       case 104 : /* fall through */
// OBSOLETE       case 105 : /* fall through */
// OBSOLETE       case 106 : /* fall through */
// OBSOLETE       case 107 : /* fall through */
// OBSOLETE       case 108 : /* fall through */
// OBSOLETE       case 109 : /* fall through */
// OBSOLETE       case 110 : /* fall through */
// OBSOLETE       case 111 : itype = FR30BF_INSN_LDR14UB;goto extract_sfmt_ldr14ub;
// OBSOLETE       case 112 : /* fall through */
// OBSOLETE       case 113 : /* fall through */
// OBSOLETE       case 114 : /* fall through */
// OBSOLETE       case 115 : /* fall through */
// OBSOLETE       case 116 : /* fall through */
// OBSOLETE       case 117 : /* fall through */
// OBSOLETE       case 118 : /* fall through */
// OBSOLETE       case 119 : /* fall through */
// OBSOLETE       case 120 : /* fall through */
// OBSOLETE       case 121 : /* fall through */
// OBSOLETE       case 122 : /* fall through */
// OBSOLETE       case 123 : /* fall through */
// OBSOLETE       case 124 : /* fall through */
// OBSOLETE       case 125 : /* fall through */
// OBSOLETE       case 126 : /* fall through */
// OBSOLETE       case 127 : itype = FR30BF_INSN_STR14B;goto extract_sfmt_str14b;
// OBSOLETE       case 128 : itype = FR30BF_INSN_BANDL;goto extract_sfmt_bandl;
// OBSOLETE       case 129 : itype = FR30BF_INSN_BANDH;goto extract_sfmt_bandl;
// OBSOLETE       case 130 : itype = FR30BF_INSN_AND;goto extract_sfmt_and;
// OBSOLETE       case 131 : itype = FR30BF_INSN_ANDCCR;goto extract_sfmt_andccr;
// OBSOLETE       case 132 : itype = FR30BF_INSN_ANDM;goto extract_sfmt_andm;
// OBSOLETE       case 133 : itype = FR30BF_INSN_ANDH;goto extract_sfmt_andh;
// OBSOLETE       case 134 : itype = FR30BF_INSN_ANDB;goto extract_sfmt_andb;
// OBSOLETE       case 135 : itype = FR30BF_INSN_STILM;goto extract_sfmt_stilm;
// OBSOLETE       case 136 : itype = FR30BF_INSN_BTSTL;goto extract_sfmt_btstl;
// OBSOLETE       case 137 : itype = FR30BF_INSN_BTSTH;goto extract_sfmt_btstl;
// OBSOLETE       case 138 : itype = FR30BF_INSN_XCHB;goto extract_sfmt_xchb;
// OBSOLETE       case 139 : itype = FR30BF_INSN_MOV;goto extract_sfmt_mov;
// OBSOLETE       case 140 : itype = FR30BF_INSN_LDM0;goto extract_sfmt_ldm0;
// OBSOLETE       case 141 : itype = FR30BF_INSN_LDM1;goto extract_sfmt_ldm1;
// OBSOLETE       case 142 : itype = FR30BF_INSN_STM0;goto extract_sfmt_stm0;
// OBSOLETE       case 143 : itype = FR30BF_INSN_STM1;goto extract_sfmt_stm1;
// OBSOLETE       case 144 : itype = FR30BF_INSN_BORL;goto extract_sfmt_bandl;
// OBSOLETE       case 145 : itype = FR30BF_INSN_BORH;goto extract_sfmt_bandl;
// OBSOLETE       case 146 : itype = FR30BF_INSN_OR;goto extract_sfmt_and;
// OBSOLETE       case 147 : itype = FR30BF_INSN_ORCCR;goto extract_sfmt_andccr;
// OBSOLETE       case 148 : itype = FR30BF_INSN_ORM;goto extract_sfmt_andm;
// OBSOLETE       case 149 : itype = FR30BF_INSN_ORH;goto extract_sfmt_andh;
// OBSOLETE       case 150 : itype = FR30BF_INSN_ORB;goto extract_sfmt_andb;
// OBSOLETE       case 151 :
// OBSOLETE         {
// OBSOLETE           unsigned int val = (((insn >> 4) & (15 << 0)));
// OBSOLETE           switch (val)
// OBSOLETE           {
// OBSOLETE           case 0 : itype = FR30BF_INSN_JMP;goto extract_sfmt_jmp;
// OBSOLETE           case 1 : itype = FR30BF_INSN_CALLR;goto extract_sfmt_callr;
// OBSOLETE           case 2 : itype = FR30BF_INSN_RET;goto extract_sfmt_ret;
// OBSOLETE           case 3 : itype = FR30BF_INSN_RETI;goto extract_sfmt_reti;
// OBSOLETE           case 4 : itype = FR30BF_INSN_DIV0S;goto extract_sfmt_div0s;
// OBSOLETE           case 5 : itype = FR30BF_INSN_DIV0U;goto extract_sfmt_div0u;
// OBSOLETE           case 6 : itype = FR30BF_INSN_DIV1;goto extract_sfmt_div1;
// OBSOLETE           case 7 : itype = FR30BF_INSN_DIV2;goto extract_sfmt_div2;
// OBSOLETE           case 8 : itype = FR30BF_INSN_EXTSB;goto extract_sfmt_extsb;
// OBSOLETE           case 9 : itype = FR30BF_INSN_EXTUB;goto extract_sfmt_extub;
// OBSOLETE           case 10 : itype = FR30BF_INSN_EXTSH;goto extract_sfmt_extsh;
// OBSOLETE           case 11 : itype = FR30BF_INSN_EXTUH;goto extract_sfmt_extuh;
// OBSOLETE           default : itype = FR30BF_INSN_X_INVALID; goto extract_sfmt_empty;
// OBSOLETE           }
// OBSOLETE         }
// OBSOLETE       case 152 : itype = FR30BF_INSN_BEORL;goto extract_sfmt_bandl;
// OBSOLETE       case 153 : itype = FR30BF_INSN_BEORH;goto extract_sfmt_bandl;
// OBSOLETE       case 154 : itype = FR30BF_INSN_EOR;goto extract_sfmt_and;
// OBSOLETE       case 155 : itype = FR30BF_INSN_LDI20;goto extract_sfmt_ldi20;
// OBSOLETE       case 156 : itype = FR30BF_INSN_EORM;goto extract_sfmt_andm;
// OBSOLETE       case 157 : itype = FR30BF_INSN_EORH;goto extract_sfmt_andh;
// OBSOLETE       case 158 : itype = FR30BF_INSN_EORB;goto extract_sfmt_andb;
// OBSOLETE       case 159 :
// OBSOLETE         {
// OBSOLETE           unsigned int val = (((insn >> 4) & (15 << 0)));
// OBSOLETE           switch (val)
// OBSOLETE           {
// OBSOLETE           case 0 : itype = FR30BF_INSN_JMPD;goto extract_sfmt_jmp;
// OBSOLETE           case 1 : itype = FR30BF_INSN_CALLRD;goto extract_sfmt_callr;
// OBSOLETE           case 2 : itype = FR30BF_INSN_RET_D;goto extract_sfmt_ret;
// OBSOLETE           case 3 : itype = FR30BF_INSN_INTE;goto extract_sfmt_inte;
// OBSOLETE           case 6 : itype = FR30BF_INSN_DIV3;goto extract_sfmt_div3;
// OBSOLETE           case 7 : itype = FR30BF_INSN_DIV4S;goto extract_sfmt_div4s;
// OBSOLETE           case 8 : itype = FR30BF_INSN_LDI32;goto extract_sfmt_ldi32;
// OBSOLETE           case 9 : itype = FR30BF_INSN_LEAVE;goto extract_sfmt_leave;
// OBSOLETE           case 10 : itype = FR30BF_INSN_NOP;goto extract_sfmt_bnod;
// OBSOLETE           case 12 : itype = FR30BF_INSN_COPOP;goto extract_sfmt_copop;
// OBSOLETE           case 13 : itype = FR30BF_INSN_COPLD;goto extract_sfmt_copop;
// OBSOLETE           case 14 : itype = FR30BF_INSN_COPST;goto extract_sfmt_copop;
// OBSOLETE           case 15 : itype = FR30BF_INSN_COPSV;goto extract_sfmt_copop;
// OBSOLETE           default : itype = FR30BF_INSN_X_INVALID; goto extract_sfmt_empty;
// OBSOLETE           }
// OBSOLETE         }
// OBSOLETE       case 160 : itype = FR30BF_INSN_ADDNI;goto extract_sfmt_addni;
// OBSOLETE       case 161 : itype = FR30BF_INSN_ADDN2;goto extract_sfmt_addn2;
// OBSOLETE       case 162 : itype = FR30BF_INSN_ADDN;goto extract_sfmt_addn;
// OBSOLETE       case 163 : itype = FR30BF_INSN_ADDSP;goto extract_sfmt_addsp;
// OBSOLETE       case 164 : itype = FR30BF_INSN_ADDI;goto extract_sfmt_addi;
// OBSOLETE       case 165 : itype = FR30BF_INSN_ADD2;goto extract_sfmt_add2;
// OBSOLETE       case 166 : itype = FR30BF_INSN_ADD;goto extract_sfmt_add;
// OBSOLETE       case 167 : itype = FR30BF_INSN_ADDC;goto extract_sfmt_addc;
// OBSOLETE       case 168 : itype = FR30BF_INSN_CMPI;goto extract_sfmt_cmpi;
// OBSOLETE       case 169 : itype = FR30BF_INSN_CMP2;goto extract_sfmt_cmp2;
// OBSOLETE       case 170 : itype = FR30BF_INSN_CMP;goto extract_sfmt_cmp;
// OBSOLETE       case 171 : itype = FR30BF_INSN_MULU;goto extract_sfmt_mulu;
// OBSOLETE       case 172 : itype = FR30BF_INSN_SUB;goto extract_sfmt_add;
// OBSOLETE       case 173 : itype = FR30BF_INSN_SUBC;goto extract_sfmt_addc;
// OBSOLETE       case 174 : itype = FR30BF_INSN_SUBN;goto extract_sfmt_addn;
// OBSOLETE       case 175 : itype = FR30BF_INSN_MUL;goto extract_sfmt_mul;
// OBSOLETE       case 176 : itype = FR30BF_INSN_LSRI;goto extract_sfmt_lsli;
// OBSOLETE       case 177 : itype = FR30BF_INSN_LSR2;goto extract_sfmt_lsli;
// OBSOLETE       case 178 : itype = FR30BF_INSN_LSR;goto extract_sfmt_lsl;
// OBSOLETE       case 179 : itype = FR30BF_INSN_MOV2DR;goto extract_sfmt_mov2dr;
// OBSOLETE       case 180 : itype = FR30BF_INSN_LSLI;goto extract_sfmt_lsli;
// OBSOLETE       case 181 : itype = FR30BF_INSN_LSL2;goto extract_sfmt_lsli;
// OBSOLETE       case 182 : itype = FR30BF_INSN_LSL;goto extract_sfmt_lsl;
// OBSOLETE       case 183 : itype = FR30BF_INSN_MOVDR;goto extract_sfmt_movdr;
// OBSOLETE       case 184 : itype = FR30BF_INSN_ASRI;goto extract_sfmt_lsli;
// OBSOLETE       case 185 : itype = FR30BF_INSN_ASR2;goto extract_sfmt_lsli;
// OBSOLETE       case 186 : itype = FR30BF_INSN_ASR;goto extract_sfmt_lsl;
// OBSOLETE       case 187 : itype = FR30BF_INSN_MULUH;goto extract_sfmt_mulh;
// OBSOLETE       case 188 : itype = FR30BF_INSN_LDRES;goto extract_sfmt_ldres;
// OBSOLETE       case 189 : itype = FR30BF_INSN_STRES;goto extract_sfmt_ldres;
// OBSOLETE       case 191 : itype = FR30BF_INSN_MULH;goto extract_sfmt_mulh;
// OBSOLETE       case 192 : /* fall through */
// OBSOLETE       case 193 : /* fall through */
// OBSOLETE       case 194 : /* fall through */
// OBSOLETE       case 195 : /* fall through */
// OBSOLETE       case 196 : /* fall through */
// OBSOLETE       case 197 : /* fall through */
// OBSOLETE       case 198 : /* fall through */
// OBSOLETE       case 199 : /* fall through */
// OBSOLETE       case 200 : /* fall through */
// OBSOLETE       case 201 : /* fall through */
// OBSOLETE       case 202 : /* fall through */
// OBSOLETE       case 203 : /* fall through */
// OBSOLETE       case 204 : /* fall through */
// OBSOLETE       case 205 : /* fall through */
// OBSOLETE       case 206 : /* fall through */
// OBSOLETE       case 207 : itype = FR30BF_INSN_LDI8;goto extract_sfmt_ldi8;
// OBSOLETE       case 208 : /* fall through */
// OBSOLETE       case 209 : /* fall through */
// OBSOLETE       case 210 : /* fall through */
// OBSOLETE       case 211 : /* fall through */
// OBSOLETE       case 212 : /* fall through */
// OBSOLETE       case 213 : /* fall through */
// OBSOLETE       case 214 : /* fall through */
// OBSOLETE       case 215 : itype = FR30BF_INSN_CALL;goto extract_sfmt_call;
// OBSOLETE       case 216 : /* fall through */
// OBSOLETE       case 217 : /* fall through */
// OBSOLETE       case 218 : /* fall through */
// OBSOLETE       case 219 : /* fall through */
// OBSOLETE       case 220 : /* fall through */
// OBSOLETE       case 221 : /* fall through */
// OBSOLETE       case 222 : /* fall through */
// OBSOLETE       case 223 : itype = FR30BF_INSN_CALLD;goto extract_sfmt_call;
// OBSOLETE       case 224 : itype = FR30BF_INSN_BRA;goto extract_sfmt_brad;
// OBSOLETE       case 225 : itype = FR30BF_INSN_BNO;goto extract_sfmt_bnod;
// OBSOLETE       case 226 : itype = FR30BF_INSN_BEQ;goto extract_sfmt_beqd;
// OBSOLETE       case 227 : itype = FR30BF_INSN_BNE;goto extract_sfmt_beqd;
// OBSOLETE       case 228 : itype = FR30BF_INSN_BC;goto extract_sfmt_bcd;
// OBSOLETE       case 229 : itype = FR30BF_INSN_BNC;goto extract_sfmt_bcd;
// OBSOLETE       case 230 : itype = FR30BF_INSN_BN;goto extract_sfmt_bnd;
// OBSOLETE       case 231 : itype = FR30BF_INSN_BP;goto extract_sfmt_bnd;
// OBSOLETE       case 232 : itype = FR30BF_INSN_BV;goto extract_sfmt_bvd;
// OBSOLETE       case 233 : itype = FR30BF_INSN_BNV;goto extract_sfmt_bvd;
// OBSOLETE       case 234 : itype = FR30BF_INSN_BLT;goto extract_sfmt_bltd;
// OBSOLETE       case 235 : itype = FR30BF_INSN_BGE;goto extract_sfmt_bltd;
// OBSOLETE       case 236 : itype = FR30BF_INSN_BLE;goto extract_sfmt_bled;
// OBSOLETE       case 237 : itype = FR30BF_INSN_BGT;goto extract_sfmt_bled;
// OBSOLETE       case 238 : itype = FR30BF_INSN_BLS;goto extract_sfmt_blsd;
// OBSOLETE       case 239 : itype = FR30BF_INSN_BHI;goto extract_sfmt_blsd;
// OBSOLETE       case 240 : itype = FR30BF_INSN_BRAD;goto extract_sfmt_brad;
// OBSOLETE       case 241 : itype = FR30BF_INSN_BNOD;goto extract_sfmt_bnod;
// OBSOLETE       case 242 : itype = FR30BF_INSN_BEQD;goto extract_sfmt_beqd;
// OBSOLETE       case 243 : itype = FR30BF_INSN_BNED;goto extract_sfmt_beqd;
// OBSOLETE       case 244 : itype = FR30BF_INSN_BCD;goto extract_sfmt_bcd;
// OBSOLETE       case 245 : itype = FR30BF_INSN_BNCD;goto extract_sfmt_bcd;
// OBSOLETE       case 246 : itype = FR30BF_INSN_BND;goto extract_sfmt_bnd;
// OBSOLETE       case 247 : itype = FR30BF_INSN_BPD;goto extract_sfmt_bnd;
// OBSOLETE       case 248 : itype = FR30BF_INSN_BVD;goto extract_sfmt_bvd;
// OBSOLETE       case 249 : itype = FR30BF_INSN_BNVD;goto extract_sfmt_bvd;
// OBSOLETE       case 250 : itype = FR30BF_INSN_BLTD;goto extract_sfmt_bltd;
// OBSOLETE       case 251 : itype = FR30BF_INSN_BGED;goto extract_sfmt_bltd;
// OBSOLETE       case 252 : itype = FR30BF_INSN_BLED;goto extract_sfmt_bled;
// OBSOLETE       case 253 : itype = FR30BF_INSN_BGTD;goto extract_sfmt_bled;
// OBSOLETE       case 254 : itype = FR30BF_INSN_BLSD;goto extract_sfmt_blsd;
// OBSOLETE       case 255 : itype = FR30BF_INSN_BHID;goto extract_sfmt_blsd;
// OBSOLETE       default : itype = FR30BF_INSN_X_INVALID; goto extract_sfmt_empty;
// OBSOLETE       }
// OBSOLETE     }
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   /* The instruction has been decoded, now extract the fields.  */
// OBSOLETE 
// OBSOLETE  extract_sfmt_empty:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE #define FLD(f) abuf->fields.fmt_empty.f
// OBSOLETE 
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_empty", (char *) 0));
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_add:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add.f
// OBSOLETE     UINT f_Rj;
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_Rj = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (f_Rj) = f_Rj;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   FLD (i_Rj) = & CPU (h_gr)[f_Rj];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_add", "f_Ri 0x%x", 'x', f_Ri, "f_Rj 0x%x", 'x', f_Rj, "Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_Ri) = f_Ri;
// OBSOLETE       FLD (in_Rj) = f_Rj;
// OBSOLETE       FLD (out_Ri) = f_Ri;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_addi:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_addi.f
// OBSOLETE     UINT f_u4;
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_u4 = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (f_u4) = f_u4;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_addi", "f_Ri 0x%x", 'x', f_Ri, "f_u4 0x%x", 'x', f_u4, "Ri 0x%x", 'x', f_Ri, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_Ri) = f_Ri;
// OBSOLETE       FLD (out_Ri) = f_Ri;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_add2:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add2.f
// OBSOLETE     SI f_m4;
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_m4 = ((EXTRACT_MSB0_UINT (insn, 16, 8, 4)) | (((-1) << (4))));
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (f_m4) = f_m4;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_add2", "f_Ri 0x%x", 'x', f_Ri, "f_m4 0x%x", 'x', f_m4, "Ri 0x%x", 'x', f_Ri, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_Ri) = f_Ri;
// OBSOLETE       FLD (out_Ri) = f_Ri;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_addc:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add.f
// OBSOLETE     UINT f_Rj;
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_Rj = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (f_Rj) = f_Rj;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   FLD (i_Rj) = & CPU (h_gr)[f_Rj];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_addc", "f_Ri 0x%x", 'x', f_Ri, "f_Rj 0x%x", 'x', f_Rj, "Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_Ri) = f_Ri;
// OBSOLETE       FLD (in_Rj) = f_Rj;
// OBSOLETE       FLD (out_Ri) = f_Ri;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_addn:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add.f
// OBSOLETE     UINT f_Rj;
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_Rj = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (f_Rj) = f_Rj;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   FLD (i_Rj) = & CPU (h_gr)[f_Rj];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_addn", "f_Ri 0x%x", 'x', f_Ri, "f_Rj 0x%x", 'x', f_Rj, "Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_Ri) = f_Ri;
// OBSOLETE       FLD (in_Rj) = f_Rj;
// OBSOLETE       FLD (out_Ri) = f_Ri;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_addni:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_addi.f
// OBSOLETE     UINT f_u4;
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_u4 = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (f_u4) = f_u4;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_addni", "f_Ri 0x%x", 'x', f_Ri, "f_u4 0x%x", 'x', f_u4, "Ri 0x%x", 'x', f_Ri, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_Ri) = f_Ri;
// OBSOLETE       FLD (out_Ri) = f_Ri;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_addn2:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add2.f
// OBSOLETE     SI f_m4;
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_m4 = ((EXTRACT_MSB0_UINT (insn, 16, 8, 4)) | (((-1) << (4))));
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (f_m4) = f_m4;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_addn2", "f_Ri 0x%x", 'x', f_Ri, "f_m4 0x%x", 'x', f_m4, "Ri 0x%x", 'x', f_Ri, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_Ri) = f_Ri;
// OBSOLETE       FLD (out_Ri) = f_Ri;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_cmp:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE     UINT f_Rj;
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_Rj = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (f_Rj) = f_Rj;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   FLD (i_Rj) = & CPU (h_gr)[f_Rj];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_cmp", "f_Ri 0x%x", 'x', f_Ri, "f_Rj 0x%x", 'x', f_Rj, "Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_Ri) = f_Ri;
// OBSOLETE       FLD (in_Rj) = f_Rj;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_cmpi:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_addi.f
// OBSOLETE     UINT f_u4;
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_u4 = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (f_u4) = f_u4;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_cmpi", "f_Ri 0x%x", 'x', f_Ri, "f_u4 0x%x", 'x', f_u4, "Ri 0x%x", 'x', f_Ri, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_Ri) = f_Ri;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_cmp2:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add2.f
// OBSOLETE     SI f_m4;
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_m4 = ((EXTRACT_MSB0_UINT (insn, 16, 8, 4)) | (((-1) << (4))));
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (f_m4) = f_m4;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_cmp2", "f_Ri 0x%x", 'x', f_Ri, "f_m4 0x%x", 'x', f_m4, "Ri 0x%x", 'x', f_Ri, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_Ri) = f_Ri;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_and:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add.f
// OBSOLETE     UINT f_Rj;
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_Rj = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (f_Rj) = f_Rj;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   FLD (i_Rj) = & CPU (h_gr)[f_Rj];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_and", "f_Ri 0x%x", 'x', f_Ri, "f_Rj 0x%x", 'x', f_Rj, "Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_Ri) = f_Ri;
// OBSOLETE       FLD (in_Rj) = f_Rj;
// OBSOLETE       FLD (out_Ri) = f_Ri;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_andm:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE     UINT f_Rj;
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_Rj = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (f_Rj) = f_Rj;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   FLD (i_Rj) = & CPU (h_gr)[f_Rj];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_andm", "f_Ri 0x%x", 'x', f_Ri, "f_Rj 0x%x", 'x', f_Rj, "Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_Ri) = f_Ri;
// OBSOLETE       FLD (in_Rj) = f_Rj;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_andh:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE     UINT f_Rj;
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_Rj = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (f_Rj) = f_Rj;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   FLD (i_Rj) = & CPU (h_gr)[f_Rj];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_andh", "f_Ri 0x%x", 'x', f_Ri, "f_Rj 0x%x", 'x', f_Rj, "Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_Ri) = f_Ri;
// OBSOLETE       FLD (in_Rj) = f_Rj;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_andb:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE     UINT f_Rj;
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_Rj = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (f_Rj) = f_Rj;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   FLD (i_Rj) = & CPU (h_gr)[f_Rj];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_andb", "f_Ri 0x%x", 'x', f_Ri, "f_Rj 0x%x", 'x', f_Rj, "Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_Ri) = f_Ri;
// OBSOLETE       FLD (in_Rj) = f_Rj;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_bandl:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_addi.f
// OBSOLETE     UINT f_u4;
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_u4 = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (f_u4) = f_u4;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_bandl", "f_Ri 0x%x", 'x', f_Ri, "f_u4 0x%x", 'x', f_u4, "Ri 0x%x", 'x', f_Ri, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_Ri) = f_Ri;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_btstl:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_addi.f
// OBSOLETE     UINT f_u4;
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_u4 = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (f_u4) = f_u4;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_btstl", "f_Ri 0x%x", 'x', f_Ri, "f_u4 0x%x", 'x', f_u4, "Ri 0x%x", 'x', f_Ri, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_Ri) = f_Ri;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_mul:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE     UINT f_Rj;
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_Rj = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (f_Rj) = f_Rj;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   FLD (i_Rj) = & CPU (h_gr)[f_Rj];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_mul", "f_Ri 0x%x", 'x', f_Ri, "f_Rj 0x%x", 'x', f_Rj, "Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_Ri) = f_Ri;
// OBSOLETE       FLD (in_Rj) = f_Rj;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_mulu:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE     UINT f_Rj;
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_Rj = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (f_Rj) = f_Rj;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   FLD (i_Rj) = & CPU (h_gr)[f_Rj];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_mulu", "f_Ri 0x%x", 'x', f_Ri, "f_Rj 0x%x", 'x', f_Rj, "Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_Ri) = f_Ri;
// OBSOLETE       FLD (in_Rj) = f_Rj;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_mulh:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE     UINT f_Rj;
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_Rj = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (f_Rj) = f_Rj;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   FLD (i_Rj) = & CPU (h_gr)[f_Rj];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_mulh", "f_Ri 0x%x", 'x', f_Ri, "f_Rj 0x%x", 'x', f_Rj, "Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_Ri) = f_Ri;
// OBSOLETE       FLD (in_Rj) = f_Rj;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_div0s:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_mov2dr.f
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_div0s", "f_Ri 0x%x", 'x', f_Ri, "Ri 0x%x", 'x', f_Ri, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_Ri) = f_Ri;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_div0u:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE #define FLD(f) abuf->fields.fmt_empty.f
// OBSOLETE 
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_div0u", (char *) 0));
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_div1:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_mov2dr.f
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_div1", "f_Ri 0x%x", 'x', f_Ri, "Ri 0x%x", 'x', f_Ri, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_Ri) = f_Ri;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_div2:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_mov2dr.f
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_div2", "f_Ri 0x%x", 'x', f_Ri, "Ri 0x%x", 'x', f_Ri, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_Ri) = f_Ri;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_div3:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE #define FLD(f) abuf->fields.fmt_empty.f
// OBSOLETE 
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_div3", (char *) 0));
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_div4s:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE #define FLD(f) abuf->fields.fmt_empty.f
// OBSOLETE 
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_div4s", (char *) 0));
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_lsl:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add.f
// OBSOLETE     UINT f_Rj;
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_Rj = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (f_Rj) = f_Rj;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   FLD (i_Rj) = & CPU (h_gr)[f_Rj];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_lsl", "f_Ri 0x%x", 'x', f_Ri, "f_Rj 0x%x", 'x', f_Rj, "Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_Ri) = f_Ri;
// OBSOLETE       FLD (in_Rj) = f_Rj;
// OBSOLETE       FLD (out_Ri) = f_Ri;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_lsli:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_addi.f
// OBSOLETE     UINT f_u4;
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_u4 = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (f_u4) = f_u4;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_lsli", "f_Ri 0x%x", 'x', f_Ri, "f_u4 0x%x", 'x', f_u4, "Ri 0x%x", 'x', f_Ri, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_Ri) = f_Ri;
// OBSOLETE       FLD (out_Ri) = f_Ri;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_ldi8:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldi8.f
// OBSOLETE     UINT f_i8;
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_i8 = EXTRACT_MSB0_UINT (insn, 16, 4, 8);
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_i8) = f_i8;
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_ldi8", "f_i8 0x%x", 'x', f_i8, "f_Ri 0x%x", 'x', f_Ri, "Ri 0x%x", 'x', f_Ri, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (out_Ri) = f_Ri;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_ldi20:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldi20.f
// OBSOLETE     UINT f_i20_16;
// OBSOLETE     UINT f_i20_4;
// OBSOLETE     UINT f_Ri;
// OBSOLETE     UINT f_i20;
// OBSOLETE     /* Contents of trailing part of insn.  */
// OBSOLETE     UINT word_1;
// OBSOLETE 
// OBSOLETE   word_1 = GETIMEMUHI (current_cpu, pc + 2);
// OBSOLETE     f_i20_16 = (0|(EXTRACT_MSB0_UINT (word_1, 16, 0, 16) << 0));
// OBSOLETE     f_i20_4 = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE {
// OBSOLETE   f_i20 = ((((f_i20_4) << (16))) | (f_i20_16));
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_i20) = f_i20;
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_ldi20", "f_i20 0x%x", 'x', f_i20, "f_Ri 0x%x", 'x', f_Ri, "Ri 0x%x", 'x', f_Ri, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (out_Ri) = f_Ri;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_ldi32:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldi32.f
// OBSOLETE     UINT f_i32;
// OBSOLETE     UINT f_Ri;
// OBSOLETE     /* Contents of trailing part of insn.  */
// OBSOLETE     UINT word_1;
// OBSOLETE     UINT word_2;
// OBSOLETE 
// OBSOLETE   word_1 = GETIMEMUHI (current_cpu, pc + 2);
// OBSOLETE   word_2 = GETIMEMUHI (current_cpu, pc + 4);
// OBSOLETE     f_i32 = (0|(EXTRACT_MSB0_UINT (word_2, 16, 0, 16) << 0)|(EXTRACT_MSB0_UINT (word_1, 16, 0, 16) << 16));
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_i32) = f_i32;
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_ldi32", "f_i32 0x%x", 'x', f_i32, "f_Ri 0x%x", 'x', f_Ri, "Ri 0x%x", 'x', f_Ri, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (out_Ri) = f_Ri;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_ld:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldr13.f
// OBSOLETE     UINT f_Rj;
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_Rj = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Rj) = f_Rj;
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (i_Rj) = & CPU (h_gr)[f_Rj];
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_ld", "f_Rj 0x%x", 'x', f_Rj, "f_Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, "Ri 0x%x", 'x', f_Ri, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_Rj) = f_Rj;
// OBSOLETE       FLD (out_Ri) = f_Ri;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_lduh:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldr13.f
// OBSOLETE     UINT f_Rj;
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_Rj = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Rj) = f_Rj;
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (i_Rj) = & CPU (h_gr)[f_Rj];
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_lduh", "f_Rj 0x%x", 'x', f_Rj, "f_Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, "Ri 0x%x", 'x', f_Ri, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_Rj) = f_Rj;
// OBSOLETE       FLD (out_Ri) = f_Ri;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_ldub:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldr13.f
// OBSOLETE     UINT f_Rj;
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_Rj = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Rj) = f_Rj;
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (i_Rj) = & CPU (h_gr)[f_Rj];
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_ldub", "f_Rj 0x%x", 'x', f_Rj, "f_Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, "Ri 0x%x", 'x', f_Ri, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_Rj) = f_Rj;
// OBSOLETE       FLD (out_Ri) = f_Ri;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_ldr13:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldr13.f
// OBSOLETE     UINT f_Rj;
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_Rj = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Rj) = f_Rj;
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (i_Rj) = & CPU (h_gr)[f_Rj];
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_ldr13", "f_Rj 0x%x", 'x', f_Rj, "f_Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, "Ri 0x%x", 'x', f_Ri, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_Rj) = f_Rj;
// OBSOLETE       FLD (in_h_gr_SI_13) = 13;
// OBSOLETE       FLD (out_Ri) = f_Ri;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_ldr13uh:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldr13.f
// OBSOLETE     UINT f_Rj;
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_Rj = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Rj) = f_Rj;
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (i_Rj) = & CPU (h_gr)[f_Rj];
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_ldr13uh", "f_Rj 0x%x", 'x', f_Rj, "f_Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, "Ri 0x%x", 'x', f_Ri, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_Rj) = f_Rj;
// OBSOLETE       FLD (in_h_gr_SI_13) = 13;
// OBSOLETE       FLD (out_Ri) = f_Ri;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_ldr13ub:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldr13.f
// OBSOLETE     UINT f_Rj;
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_Rj = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Rj) = f_Rj;
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (i_Rj) = & CPU (h_gr)[f_Rj];
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_ldr13ub", "f_Rj 0x%x", 'x', f_Rj, "f_Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, "Ri 0x%x", 'x', f_Ri, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_Rj) = f_Rj;
// OBSOLETE       FLD (in_h_gr_SI_13) = 13;
// OBSOLETE       FLD (out_Ri) = f_Ri;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_ldr14:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldr14.f
// OBSOLETE     SI f_disp10;
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_disp10 = ((EXTRACT_MSB0_INT (insn, 16, 4, 8)) << (2));
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_disp10) = f_disp10;
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_ldr14", "f_disp10 0x%x", 'x', f_disp10, "f_Ri 0x%x", 'x', f_Ri, "Ri 0x%x", 'x', f_Ri, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_h_gr_SI_14) = 14;
// OBSOLETE       FLD (out_Ri) = f_Ri;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_ldr14uh:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldr14uh.f
// OBSOLETE     SI f_disp9;
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_disp9 = ((EXTRACT_MSB0_INT (insn, 16, 4, 8)) << (1));
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_disp9) = f_disp9;
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_ldr14uh", "f_disp9 0x%x", 'x', f_disp9, "f_Ri 0x%x", 'x', f_Ri, "Ri 0x%x", 'x', f_Ri, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_h_gr_SI_14) = 14;
// OBSOLETE       FLD (out_Ri) = f_Ri;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_ldr14ub:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldr14ub.f
// OBSOLETE     INT f_disp8;
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_disp8 = EXTRACT_MSB0_INT (insn, 16, 4, 8);
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_disp8) = f_disp8;
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_ldr14ub", "f_disp8 0x%x", 'x', f_disp8, "f_Ri 0x%x", 'x', f_Ri, "Ri 0x%x", 'x', f_Ri, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_h_gr_SI_14) = 14;
// OBSOLETE       FLD (out_Ri) = f_Ri;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_ldr15:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldr15.f
// OBSOLETE     USI f_udisp6;
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_udisp6 = ((EXTRACT_MSB0_UINT (insn, 16, 8, 4)) << (2));
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_udisp6) = f_udisp6;
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_ldr15", "f_udisp6 0x%x", 'x', f_udisp6, "f_Ri 0x%x", 'x', f_Ri, "Ri 0x%x", 'x', f_Ri, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_h_gr_SI_15) = 15;
// OBSOLETE       FLD (out_Ri) = f_Ri;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_ldr15gr:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldr15gr.f
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_ldr15gr", "f_Ri 0x%x", 'x', f_Ri, "Ri 0x%x", 'x', f_Ri, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_h_gr_SI_15) = 15;
// OBSOLETE       FLD (out_Ri) = f_Ri;
// OBSOLETE       FLD (out_h_gr_SI_15) = 15;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_ldr15dr:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldr15dr.f
// OBSOLETE     UINT f_Rs2;
// OBSOLETE 
// OBSOLETE     f_Rs2 = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Rs2) = f_Rs2;
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_ldr15dr", "f_Rs2 0x%x", 'x', f_Rs2, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_h_gr_SI_15) = 15;
// OBSOLETE       FLD (out_h_gr_SI_15) = 15;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_ldr15ps:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE #define FLD(f) abuf->fields.sfmt_addsp.f
// OBSOLETE 
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_ldr15ps", (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_h_gr_SI_15) = 15;
// OBSOLETE       FLD (out_h_gr_SI_15) = 15;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_st:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE     UINT f_Rj;
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_Rj = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (f_Rj) = f_Rj;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   FLD (i_Rj) = & CPU (h_gr)[f_Rj];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_st", "f_Ri 0x%x", 'x', f_Ri, "f_Rj 0x%x", 'x', f_Rj, "Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_Ri) = f_Ri;
// OBSOLETE       FLD (in_Rj) = f_Rj;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_sth:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE     UINT f_Rj;
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_Rj = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (f_Rj) = f_Rj;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   FLD (i_Rj) = & CPU (h_gr)[f_Rj];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_sth", "f_Ri 0x%x", 'x', f_Ri, "f_Rj 0x%x", 'x', f_Rj, "Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_Ri) = f_Ri;
// OBSOLETE       FLD (in_Rj) = f_Rj;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_stb:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE     UINT f_Rj;
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_Rj = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (f_Rj) = f_Rj;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   FLD (i_Rj) = & CPU (h_gr)[f_Rj];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_stb", "f_Ri 0x%x", 'x', f_Ri, "f_Rj 0x%x", 'x', f_Rj, "Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_Ri) = f_Ri;
// OBSOLETE       FLD (in_Rj) = f_Rj;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_str13:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE     UINT f_Rj;
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_Rj = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (f_Rj) = f_Rj;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   FLD (i_Rj) = & CPU (h_gr)[f_Rj];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_str13", "f_Ri 0x%x", 'x', f_Ri, "f_Rj 0x%x", 'x', f_Rj, "Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_Ri) = f_Ri;
// OBSOLETE       FLD (in_Rj) = f_Rj;
// OBSOLETE       FLD (in_h_gr_SI_13) = 13;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_str13h:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE     UINT f_Rj;
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_Rj = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (f_Rj) = f_Rj;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   FLD (i_Rj) = & CPU (h_gr)[f_Rj];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_str13h", "f_Ri 0x%x", 'x', f_Ri, "f_Rj 0x%x", 'x', f_Rj, "Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_Ri) = f_Ri;
// OBSOLETE       FLD (in_Rj) = f_Rj;
// OBSOLETE       FLD (in_h_gr_SI_13) = 13;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_str13b:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE     UINT f_Rj;
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_Rj = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (f_Rj) = f_Rj;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   FLD (i_Rj) = & CPU (h_gr)[f_Rj];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_str13b", "f_Ri 0x%x", 'x', f_Ri, "f_Rj 0x%x", 'x', f_Rj, "Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_Ri) = f_Ri;
// OBSOLETE       FLD (in_Rj) = f_Rj;
// OBSOLETE       FLD (in_h_gr_SI_13) = 13;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_str14:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str14.f
// OBSOLETE     SI f_disp10;
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_disp10 = ((EXTRACT_MSB0_INT (insn, 16, 4, 8)) << (2));
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (f_disp10) = f_disp10;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_str14", "f_Ri 0x%x", 'x', f_Ri, "f_disp10 0x%x", 'x', f_disp10, "Ri 0x%x", 'x', f_Ri, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_Ri) = f_Ri;
// OBSOLETE       FLD (in_h_gr_SI_14) = 14;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_str14h:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str14h.f
// OBSOLETE     SI f_disp9;
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_disp9 = ((EXTRACT_MSB0_INT (insn, 16, 4, 8)) << (1));
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (f_disp9) = f_disp9;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_str14h", "f_Ri 0x%x", 'x', f_Ri, "f_disp9 0x%x", 'x', f_disp9, "Ri 0x%x", 'x', f_Ri, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_Ri) = f_Ri;
// OBSOLETE       FLD (in_h_gr_SI_14) = 14;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_str14b:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str14b.f
// OBSOLETE     INT f_disp8;
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_disp8 = EXTRACT_MSB0_INT (insn, 16, 4, 8);
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (f_disp8) = f_disp8;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_str14b", "f_Ri 0x%x", 'x', f_Ri, "f_disp8 0x%x", 'x', f_disp8, "Ri 0x%x", 'x', f_Ri, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_Ri) = f_Ri;
// OBSOLETE       FLD (in_h_gr_SI_14) = 14;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_str15:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str15.f
// OBSOLETE     USI f_udisp6;
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_udisp6 = ((EXTRACT_MSB0_UINT (insn, 16, 8, 4)) << (2));
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (f_udisp6) = f_udisp6;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_str15", "f_Ri 0x%x", 'x', f_Ri, "f_udisp6 0x%x", 'x', f_udisp6, "Ri 0x%x", 'x', f_Ri, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_Ri) = f_Ri;
// OBSOLETE       FLD (in_h_gr_SI_15) = 15;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_str15gr:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str15gr.f
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_str15gr", "f_Ri 0x%x", 'x', f_Ri, "Ri 0x%x", 'x', f_Ri, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_Ri) = f_Ri;
// OBSOLETE       FLD (in_h_gr_SI_15) = 15;
// OBSOLETE       FLD (out_h_gr_SI_15) = 15;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_str15dr:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldr15dr.f
// OBSOLETE     UINT f_Rs2;
// OBSOLETE 
// OBSOLETE     f_Rs2 = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Rs2) = f_Rs2;
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_str15dr", "f_Rs2 0x%x", 'x', f_Rs2, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_h_gr_SI_15) = 15;
// OBSOLETE       FLD (out_h_gr_SI_15) = 15;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_str15ps:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE #define FLD(f) abuf->fields.sfmt_addsp.f
// OBSOLETE 
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_str15ps", (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_h_gr_SI_15) = 15;
// OBSOLETE       FLD (out_h_gr_SI_15) = 15;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_mov:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldr13.f
// OBSOLETE     UINT f_Rj;
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_Rj = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Rj) = f_Rj;
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (i_Rj) = & CPU (h_gr)[f_Rj];
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_mov", "f_Rj 0x%x", 'x', f_Rj, "f_Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, "Ri 0x%x", 'x', f_Ri, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_Rj) = f_Rj;
// OBSOLETE       FLD (out_Ri) = f_Ri;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_movdr:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_movdr.f
// OBSOLETE     UINT f_Rs1;
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_Rs1 = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Rs1) = f_Rs1;
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_movdr", "f_Rs1 0x%x", 'x', f_Rs1, "f_Ri 0x%x", 'x', f_Ri, "Ri 0x%x", 'x', f_Ri, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (out_Ri) = f_Ri;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_movps:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_movdr.f
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_movps", "f_Ri 0x%x", 'x', f_Ri, "Ri 0x%x", 'x', f_Ri, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (out_Ri) = f_Ri;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_mov2dr:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_mov2dr.f
// OBSOLETE     UINT f_Rs1;
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_Rs1 = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (f_Rs1) = f_Rs1;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_mov2dr", "f_Ri 0x%x", 'x', f_Ri, "f_Rs1 0x%x", 'x', f_Rs1, "Ri 0x%x", 'x', f_Ri, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_Ri) = f_Ri;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_mov2ps:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_mov2dr.f
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_mov2ps", "f_Ri 0x%x", 'x', f_Ri, "Ri 0x%x", 'x', f_Ri, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_Ri) = f_Ri;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_jmp:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_mov2dr.f
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_jmp", "f_Ri 0x%x", 'x', f_Ri, "Ri 0x%x", 'x', f_Ri, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_Ri) = f_Ri;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_callr:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_mov2dr.f
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_callr", "f_Ri 0x%x", 'x', f_Ri, "Ri 0x%x", 'x', f_Ri, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_Ri) = f_Ri;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_call:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_call.f
// OBSOLETE     SI f_rel12;
// OBSOLETE 
// OBSOLETE     f_rel12 = ((((EXTRACT_MSB0_INT (insn, 16, 5, 11)) << (1))) + (((pc) + (2))));
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (i_label12) = f_rel12;
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_call", "label12 0x%x", 'x', f_rel12, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_ret:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE #define FLD(f) abuf->fields.fmt_empty.f
// OBSOLETE 
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_ret", (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_int:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_int.f
// OBSOLETE     UINT f_u8;
// OBSOLETE 
// OBSOLETE     f_u8 = EXTRACT_MSB0_UINT (insn, 16, 8, 8);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_u8) = f_u8;
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_int", "f_u8 0x%x", 'x', f_u8, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_inte:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE #define FLD(f) abuf->fields.fmt_empty.f
// OBSOLETE 
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_inte", (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_reti:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE #define FLD(f) abuf->fields.fmt_empty.f
// OBSOLETE 
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_reti", (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_brad:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE     SI f_rel9;
// OBSOLETE 
// OBSOLETE     f_rel9 = ((((EXTRACT_MSB0_INT (insn, 16, 8, 8)) << (1))) + (((pc) + (2))));
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (i_label9) = f_rel9;
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_brad", "label9 0x%x", 'x', f_rel9, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_bnod:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE #define FLD(f) abuf->fields.fmt_empty.f
// OBSOLETE 
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_bnod", (char *) 0));
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_beqd:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE     SI f_rel9;
// OBSOLETE 
// OBSOLETE     f_rel9 = ((((EXTRACT_MSB0_INT (insn, 16, 8, 8)) << (1))) + (((pc) + (2))));
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (i_label9) = f_rel9;
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_beqd", "label9 0x%x", 'x', f_rel9, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_bcd:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE     SI f_rel9;
// OBSOLETE 
// OBSOLETE     f_rel9 = ((((EXTRACT_MSB0_INT (insn, 16, 8, 8)) << (1))) + (((pc) + (2))));
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (i_label9) = f_rel9;
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_bcd", "label9 0x%x", 'x', f_rel9, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_bnd:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE     SI f_rel9;
// OBSOLETE 
// OBSOLETE     f_rel9 = ((((EXTRACT_MSB0_INT (insn, 16, 8, 8)) << (1))) + (((pc) + (2))));
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (i_label9) = f_rel9;
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_bnd", "label9 0x%x", 'x', f_rel9, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_bvd:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE     SI f_rel9;
// OBSOLETE 
// OBSOLETE     f_rel9 = ((((EXTRACT_MSB0_INT (insn, 16, 8, 8)) << (1))) + (((pc) + (2))));
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (i_label9) = f_rel9;
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_bvd", "label9 0x%x", 'x', f_rel9, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_bltd:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE     SI f_rel9;
// OBSOLETE 
// OBSOLETE     f_rel9 = ((((EXTRACT_MSB0_INT (insn, 16, 8, 8)) << (1))) + (((pc) + (2))));
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (i_label9) = f_rel9;
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_bltd", "label9 0x%x", 'x', f_rel9, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_bled:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE     SI f_rel9;
// OBSOLETE 
// OBSOLETE     f_rel9 = ((((EXTRACT_MSB0_INT (insn, 16, 8, 8)) << (1))) + (((pc) + (2))));
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (i_label9) = f_rel9;
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_bled", "label9 0x%x", 'x', f_rel9, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_blsd:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE     SI f_rel9;
// OBSOLETE 
// OBSOLETE     f_rel9 = ((((EXTRACT_MSB0_INT (insn, 16, 8, 8)) << (1))) + (((pc) + (2))));
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (i_label9) = f_rel9;
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_blsd", "label9 0x%x", 'x', f_rel9, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_dmovr13:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_dmovr13pi.f
// OBSOLETE     USI f_dir10;
// OBSOLETE 
// OBSOLETE     f_dir10 = ((EXTRACT_MSB0_UINT (insn, 16, 8, 8)) << (2));
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_dir10) = f_dir10;
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_dmovr13", "f_dir10 0x%x", 'x', f_dir10, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_h_gr_SI_13) = 13;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_dmovr13h:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_dmovr13pih.f
// OBSOLETE     USI f_dir9;
// OBSOLETE 
// OBSOLETE     f_dir9 = ((EXTRACT_MSB0_UINT (insn, 16, 8, 8)) << (1));
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_dir9) = f_dir9;
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_dmovr13h", "f_dir9 0x%x", 'x', f_dir9, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_h_gr_SI_13) = 13;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_dmovr13b:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_dmovr13pib.f
// OBSOLETE     UINT f_dir8;
// OBSOLETE 
// OBSOLETE     f_dir8 = EXTRACT_MSB0_UINT (insn, 16, 8, 8);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_dir8) = f_dir8;
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_dmovr13b", "f_dir8 0x%x", 'x', f_dir8, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_h_gr_SI_13) = 13;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_dmovr13pi:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_dmovr13pi.f
// OBSOLETE     USI f_dir10;
// OBSOLETE 
// OBSOLETE     f_dir10 = ((EXTRACT_MSB0_UINT (insn, 16, 8, 8)) << (2));
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_dir10) = f_dir10;
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_dmovr13pi", "f_dir10 0x%x", 'x', f_dir10, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_h_gr_SI_13) = 13;
// OBSOLETE       FLD (out_h_gr_SI_13) = 13;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_dmovr13pih:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_dmovr13pih.f
// OBSOLETE     USI f_dir9;
// OBSOLETE 
// OBSOLETE     f_dir9 = ((EXTRACT_MSB0_UINT (insn, 16, 8, 8)) << (1));
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_dir9) = f_dir9;
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_dmovr13pih", "f_dir9 0x%x", 'x', f_dir9, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_h_gr_SI_13) = 13;
// OBSOLETE       FLD (out_h_gr_SI_13) = 13;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_dmovr13pib:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_dmovr13pib.f
// OBSOLETE     UINT f_dir8;
// OBSOLETE 
// OBSOLETE     f_dir8 = EXTRACT_MSB0_UINT (insn, 16, 8, 8);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_dir8) = f_dir8;
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_dmovr13pib", "f_dir8 0x%x", 'x', f_dir8, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_h_gr_SI_13) = 13;
// OBSOLETE       FLD (out_h_gr_SI_13) = 13;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_dmovr15pi:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_dmovr15pi.f
// OBSOLETE     USI f_dir10;
// OBSOLETE 
// OBSOLETE     f_dir10 = ((EXTRACT_MSB0_UINT (insn, 16, 8, 8)) << (2));
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_dir10) = f_dir10;
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_dmovr15pi", "f_dir10 0x%x", 'x', f_dir10, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_h_gr_SI_15) = 15;
// OBSOLETE       FLD (out_h_gr_SI_15) = 15;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_dmov2r13:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_dmovr13pi.f
// OBSOLETE     USI f_dir10;
// OBSOLETE 
// OBSOLETE     f_dir10 = ((EXTRACT_MSB0_UINT (insn, 16, 8, 8)) << (2));
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_dir10) = f_dir10;
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_dmov2r13", "f_dir10 0x%x", 'x', f_dir10, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (out_h_gr_SI_13) = 13;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_dmov2r13h:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_dmovr13pih.f
// OBSOLETE     USI f_dir9;
// OBSOLETE 
// OBSOLETE     f_dir9 = ((EXTRACT_MSB0_UINT (insn, 16, 8, 8)) << (1));
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_dir9) = f_dir9;
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_dmov2r13h", "f_dir9 0x%x", 'x', f_dir9, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (out_h_gr_SI_13) = 13;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_dmov2r13b:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_dmovr13pib.f
// OBSOLETE     UINT f_dir8;
// OBSOLETE 
// OBSOLETE     f_dir8 = EXTRACT_MSB0_UINT (insn, 16, 8, 8);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_dir8) = f_dir8;
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_dmov2r13b", "f_dir8 0x%x", 'x', f_dir8, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (out_h_gr_SI_13) = 13;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_dmov2r13pi:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_dmovr13pi.f
// OBSOLETE     USI f_dir10;
// OBSOLETE 
// OBSOLETE     f_dir10 = ((EXTRACT_MSB0_UINT (insn, 16, 8, 8)) << (2));
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_dir10) = f_dir10;
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_dmov2r13pi", "f_dir10 0x%x", 'x', f_dir10, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_h_gr_SI_13) = 13;
// OBSOLETE       FLD (out_h_gr_SI_13) = 13;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_dmov2r13pih:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_dmovr13pih.f
// OBSOLETE     USI f_dir9;
// OBSOLETE 
// OBSOLETE     f_dir9 = ((EXTRACT_MSB0_UINT (insn, 16, 8, 8)) << (1));
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_dir9) = f_dir9;
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_dmov2r13pih", "f_dir9 0x%x", 'x', f_dir9, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_h_gr_SI_13) = 13;
// OBSOLETE       FLD (out_h_gr_SI_13) = 13;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_dmov2r13pib:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_dmovr13pib.f
// OBSOLETE     UINT f_dir8;
// OBSOLETE 
// OBSOLETE     f_dir8 = EXTRACT_MSB0_UINT (insn, 16, 8, 8);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_dir8) = f_dir8;
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_dmov2r13pib", "f_dir8 0x%x", 'x', f_dir8, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_h_gr_SI_13) = 13;
// OBSOLETE       FLD (out_h_gr_SI_13) = 13;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_dmov2r15pd:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_dmovr15pi.f
// OBSOLETE     USI f_dir10;
// OBSOLETE 
// OBSOLETE     f_dir10 = ((EXTRACT_MSB0_UINT (insn, 16, 8, 8)) << (2));
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_dir10) = f_dir10;
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_dmov2r15pd", "f_dir10 0x%x", 'x', f_dir10, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_h_gr_SI_15) = 15;
// OBSOLETE       FLD (out_h_gr_SI_15) = 15;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_ldres:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add2.f
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_ldres", "f_Ri 0x%x", 'x', f_Ri, "Ri 0x%x", 'x', f_Ri, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_Ri) = f_Ri;
// OBSOLETE       FLD (out_Ri) = f_Ri;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_copop:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE #define FLD(f) abuf->fields.fmt_empty.f
// OBSOLETE     /* Contents of trailing part of insn.  */
// OBSOLETE     UINT word_1;
// OBSOLETE 
// OBSOLETE   word_1 = GETIMEMUHI (current_cpu, pc + 2);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_copop", (char *) 0));
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_andccr:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_int.f
// OBSOLETE     UINT f_u8;
// OBSOLETE 
// OBSOLETE     f_u8 = EXTRACT_MSB0_UINT (insn, 16, 8, 8);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_u8) = f_u8;
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_andccr", "f_u8 0x%x", 'x', f_u8, (char *) 0));
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_stilm:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_int.f
// OBSOLETE     UINT f_u8;
// OBSOLETE 
// OBSOLETE     f_u8 = EXTRACT_MSB0_UINT (insn, 16, 8, 8);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_u8) = f_u8;
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_stilm", "f_u8 0x%x", 'x', f_u8, (char *) 0));
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_addsp:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_addsp.f
// OBSOLETE     SI f_s10;
// OBSOLETE 
// OBSOLETE     f_s10 = ((EXTRACT_MSB0_INT (insn, 16, 8, 8)) << (2));
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_s10) = f_s10;
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_addsp", "f_s10 0x%x", 'x', f_s10, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_h_gr_SI_15) = 15;
// OBSOLETE       FLD (out_h_gr_SI_15) = 15;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_extsb:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add2.f
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_extsb", "f_Ri 0x%x", 'x', f_Ri, "Ri 0x%x", 'x', f_Ri, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_Ri) = f_Ri;
// OBSOLETE       FLD (out_Ri) = f_Ri;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_extub:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add2.f
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_extub", "f_Ri 0x%x", 'x', f_Ri, "Ri 0x%x", 'x', f_Ri, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_Ri) = f_Ri;
// OBSOLETE       FLD (out_Ri) = f_Ri;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_extsh:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add2.f
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_extsh", "f_Ri 0x%x", 'x', f_Ri, "Ri 0x%x", 'x', f_Ri, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_Ri) = f_Ri;
// OBSOLETE       FLD (out_Ri) = f_Ri;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_extuh:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add2.f
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_extuh", "f_Ri 0x%x", 'x', f_Ri, "Ri 0x%x", 'x', f_Ri, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_Ri) = f_Ri;
// OBSOLETE       FLD (out_Ri) = f_Ri;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_ldm0:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldm0.f
// OBSOLETE     UINT f_reglist_low_ld;
// OBSOLETE 
// OBSOLETE     f_reglist_low_ld = EXTRACT_MSB0_UINT (insn, 16, 8, 8);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_reglist_low_ld) = f_reglist_low_ld;
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_ldm0", "f_reglist_low_ld 0x%x", 'x', f_reglist_low_ld, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_h_gr_SI_15) = 15;
// OBSOLETE       FLD (out_h_gr_SI_0) = 0;
// OBSOLETE       FLD (out_h_gr_SI_1) = 1;
// OBSOLETE       FLD (out_h_gr_SI_15) = 15;
// OBSOLETE       FLD (out_h_gr_SI_2) = 2;
// OBSOLETE       FLD (out_h_gr_SI_3) = 3;
// OBSOLETE       FLD (out_h_gr_SI_4) = 4;
// OBSOLETE       FLD (out_h_gr_SI_5) = 5;
// OBSOLETE       FLD (out_h_gr_SI_6) = 6;
// OBSOLETE       FLD (out_h_gr_SI_7) = 7;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_ldm1:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldm1.f
// OBSOLETE     UINT f_reglist_hi_ld;
// OBSOLETE 
// OBSOLETE     f_reglist_hi_ld = EXTRACT_MSB0_UINT (insn, 16, 8, 8);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_reglist_hi_ld) = f_reglist_hi_ld;
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_ldm1", "f_reglist_hi_ld 0x%x", 'x', f_reglist_hi_ld, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_h_gr_SI_15) = 15;
// OBSOLETE       FLD (out_h_gr_SI_10) = 10;
// OBSOLETE       FLD (out_h_gr_SI_11) = 11;
// OBSOLETE       FLD (out_h_gr_SI_12) = 12;
// OBSOLETE       FLD (out_h_gr_SI_13) = 13;
// OBSOLETE       FLD (out_h_gr_SI_14) = 14;
// OBSOLETE       FLD (out_h_gr_SI_15) = 15;
// OBSOLETE       FLD (out_h_gr_SI_8) = 8;
// OBSOLETE       FLD (out_h_gr_SI_9) = 9;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_stm0:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_stm0.f
// OBSOLETE     UINT f_reglist_low_st;
// OBSOLETE 
// OBSOLETE     f_reglist_low_st = EXTRACT_MSB0_UINT (insn, 16, 8, 8);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_reglist_low_st) = f_reglist_low_st;
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_stm0", "f_reglist_low_st 0x%x", 'x', f_reglist_low_st, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_h_gr_SI_0) = 0;
// OBSOLETE       FLD (in_h_gr_SI_1) = 1;
// OBSOLETE       FLD (in_h_gr_SI_15) = 15;
// OBSOLETE       FLD (in_h_gr_SI_2) = 2;
// OBSOLETE       FLD (in_h_gr_SI_3) = 3;
// OBSOLETE       FLD (in_h_gr_SI_4) = 4;
// OBSOLETE       FLD (in_h_gr_SI_5) = 5;
// OBSOLETE       FLD (in_h_gr_SI_6) = 6;
// OBSOLETE       FLD (in_h_gr_SI_7) = 7;
// OBSOLETE       FLD (out_h_gr_SI_15) = 15;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_stm1:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_stm1.f
// OBSOLETE     UINT f_reglist_hi_st;
// OBSOLETE 
// OBSOLETE     f_reglist_hi_st = EXTRACT_MSB0_UINT (insn, 16, 8, 8);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_reglist_hi_st) = f_reglist_hi_st;
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_stm1", "f_reglist_hi_st 0x%x", 'x', f_reglist_hi_st, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_h_gr_SI_10) = 10;
// OBSOLETE       FLD (in_h_gr_SI_11) = 11;
// OBSOLETE       FLD (in_h_gr_SI_12) = 12;
// OBSOLETE       FLD (in_h_gr_SI_13) = 13;
// OBSOLETE       FLD (in_h_gr_SI_14) = 14;
// OBSOLETE       FLD (in_h_gr_SI_15) = 15;
// OBSOLETE       FLD (in_h_gr_SI_8) = 8;
// OBSOLETE       FLD (in_h_gr_SI_9) = 9;
// OBSOLETE       FLD (out_h_gr_SI_15) = 15;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_enter:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_enter.f
// OBSOLETE     USI f_u10;
// OBSOLETE 
// OBSOLETE     f_u10 = ((EXTRACT_MSB0_UINT (insn, 16, 8, 8)) << (2));
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_u10) = f_u10;
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_enter", "f_u10 0x%x", 'x', f_u10, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_h_gr_SI_14) = 14;
// OBSOLETE       FLD (in_h_gr_SI_15) = 15;
// OBSOLETE       FLD (out_h_gr_SI_14) = 14;
// OBSOLETE       FLD (out_h_gr_SI_15) = 15;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_leave:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE #define FLD(f) abuf->fields.sfmt_enter.f
// OBSOLETE 
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_leave", (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_h_gr_SI_14) = 14;
// OBSOLETE       FLD (in_h_gr_SI_15) = 15;
// OBSOLETE       FLD (out_h_gr_SI_14) = 14;
// OBSOLETE       FLD (out_h_gr_SI_15) = 15;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE  extract_sfmt_xchb:
// OBSOLETE   {
// OBSOLETE     const IDESC *idesc = &fr30bf_insn_data[itype];
// OBSOLETE     CGEN_INSN_INT insn = base_insn;
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add.f
// OBSOLETE     UINT f_Rj;
// OBSOLETE     UINT f_Ri;
// OBSOLETE 
// OBSOLETE     f_Rj = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
// OBSOLETE     f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
// OBSOLETE 
// OBSOLETE   /* Record the fields for the semantic handler.  */
// OBSOLETE   FLD (f_Ri) = f_Ri;
// OBSOLETE   FLD (f_Rj) = f_Rj;
// OBSOLETE   FLD (i_Ri) = & CPU (h_gr)[f_Ri];
// OBSOLETE   FLD (i_Rj) = & CPU (h_gr)[f_Rj];
// OBSOLETE   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_xchb", "f_Ri 0x%x", 'x', f_Ri, "f_Rj 0x%x", 'x', f_Rj, "Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, (char *) 0));
// OBSOLETE 
// OBSOLETE #if WITH_PROFILE_MODEL_P
// OBSOLETE   /* Record the fields for profiling.  */
// OBSOLETE   if (PROFILE_MODEL_P (current_cpu))
// OBSOLETE     {
// OBSOLETE       FLD (in_Ri) = f_Ri;
// OBSOLETE       FLD (in_Rj) = f_Rj;
// OBSOLETE       FLD (out_Ri) = f_Ri;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE #undef FLD
// OBSOLETE     return idesc;
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE }
@


1.3
log
@2001-03-05  Dave Brolley  <brolley@@

        * arch.c: Regenerate.
        * arch.h: Regenerate.
        * cpu.c: Regenerate.
        * cpu.h: Regenerate.
        * cpuall.h: Regenerate.
        * decode.c: Regenerate.
        * decode.h: Regenerate.
        * model.c: Regenerate.
        * sem-switch.c: Regenerate.
        * sem.c: Regenerate.
@
text
@d5 1
a5 1
Copyright (C) 1996, 1997, 1998, 1999, 2000 Free Software Foundation, Inc.
d7 1
a7 1
This file is part of the GNU Simulators.
d36 1
a36 1
static IDESC fr30bf_insn_data[FR30BF_INSN_MAX];
d105 2
a106 2
  { FR30_INSN_LDUH, FR30BF_INSN_LDUH, FR30BF_SFMT_LD },
  { FR30_INSN_LDUB, FR30BF_INSN_LDUB, FR30BF_SFMT_LD },
d108 2
a109 2
  { FR30_INSN_LDR13UH, FR30BF_INSN_LDR13UH, FR30BF_SFMT_LDR13 },
  { FR30_INSN_LDR13UB, FR30BF_INSN_LDR13UB, FR30BF_SFMT_LDR13 },
d118 2
a119 2
  { FR30_INSN_STH, FR30BF_INSN_STH, FR30BF_SFMT_ST },
  { FR30_INSN_STB, FR30BF_INSN_STB, FR30BF_SFMT_ST },
d121 2
a122 2
  { FR30_INSN_STR13H, FR30BF_INSN_STR13H, FR30BF_SFMT_STR13 },
  { FR30_INSN_STR13B, FR30BF_INSN_STR13B, FR30BF_SFMT_STR13 },
d255 1
a255 1
  int tabsize = FR30BF_INSN_MAX;
a284 1
  CGEN_INSN_INT insn = base_insn;
d287 1
d293 8
a300 1
      case 0 : itype = FR30BF_INSN_LDR13; goto extract_sfmt_ldr13;      case 1 : itype = FR30BF_INSN_LDR13UH; goto extract_sfmt_ldr13;      case 2 : itype = FR30BF_INSN_LDR13UB; goto extract_sfmt_ldr13;      case 3 : itype = FR30BF_INSN_LDR15; goto extract_sfmt_ldr15;      case 4 : itype = FR30BF_INSN_LD; goto extract_sfmt_ld;      case 5 : itype = FR30BF_INSN_LDUH; goto extract_sfmt_ld;      case 6 : itype = FR30BF_INSN_LDUB; goto extract_sfmt_ld;      case 7 :
d305 5
a309 1
          case 0 : itype = FR30BF_INSN_LDR15GR; goto extract_sfmt_ldr15gr;          case 1 : itype = FR30BF_INSN_MOV2PS; goto extract_sfmt_mov2ps;          case 2 : itype = FR30BF_INSN_LDR15DR; goto extract_sfmt_ldr15dr;          case 3 : itype = FR30BF_INSN_LDR15PS; goto extract_sfmt_ldr15ps;          default : itype = FR30BF_INSN_X_INVALID; goto extract_sfmt_empty;
d312 16
a327 1
      case 8 : itype = FR30BF_INSN_DMOV2R13; goto extract_sfmt_dmov2r13;      case 9 : itype = FR30BF_INSN_DMOV2R13H; goto extract_sfmt_dmov2r13h;      case 10 : itype = FR30BF_INSN_DMOV2R13B; goto extract_sfmt_dmov2r13b;      case 11 : itype = FR30BF_INSN_DMOV2R15PD; goto extract_sfmt_dmov2r15pd;      case 12 : itype = FR30BF_INSN_DMOV2R13PI; goto extract_sfmt_dmov2r13pi;      case 13 : itype = FR30BF_INSN_DMOV2R13PIH; goto extract_sfmt_dmov2r13pih;      case 14 : itype = FR30BF_INSN_DMOV2R13PIB; goto extract_sfmt_dmov2r13pib;      case 15 : itype = FR30BF_INSN_ENTER; goto extract_sfmt_enter;      case 16 : itype = FR30BF_INSN_STR13; goto extract_sfmt_str13;      case 17 : itype = FR30BF_INSN_STR13H; goto extract_sfmt_str13;      case 18 : itype = FR30BF_INSN_STR13B; goto extract_sfmt_str13;      case 19 : itype = FR30BF_INSN_STR15; goto extract_sfmt_str15;      case 20 : itype = FR30BF_INSN_ST; goto extract_sfmt_st;      case 21 : itype = FR30BF_INSN_STH; goto extract_sfmt_st;      case 22 : itype = FR30BF_INSN_STB; goto extract_sfmt_st;      case 23 :
d332 5
a336 1
          case 0 : itype = FR30BF_INSN_STR15GR; goto extract_sfmt_str15gr;          case 1 : itype = FR30BF_INSN_MOVPS; goto extract_sfmt_movps;          case 2 : itype = FR30BF_INSN_STR15DR; goto extract_sfmt_str15dr;          case 3 : itype = FR30BF_INSN_STR15PS; goto extract_sfmt_str15ps;          default : itype = FR30BF_INSN_X_INVALID; goto extract_sfmt_empty;
d339 9
a347 1
      case 24 : itype = FR30BF_INSN_DMOVR13; goto extract_sfmt_dmovr13;      case 25 : itype = FR30BF_INSN_DMOVR13H; goto extract_sfmt_dmovr13h;      case 26 : itype = FR30BF_INSN_DMOVR13B; goto extract_sfmt_dmovr13b;      case 27 : itype = FR30BF_INSN_DMOVR15PI; goto extract_sfmt_dmovr15pi;      case 28 : itype = FR30BF_INSN_DMOVR13PI; goto extract_sfmt_dmovr13pi;      case 29 : itype = FR30BF_INSN_DMOVR13PIH; goto extract_sfmt_dmovr13pih;      case 30 : itype = FR30BF_INSN_DMOVR13PIB; goto extract_sfmt_dmovr13pib;      case 31 : itype = FR30BF_INSN_INT; goto extract_sfmt_int;      case 32 : /* fall through */
d362 2
a363 1
      case 47 : itype = FR30BF_INSN_LDR14; goto extract_sfmt_ldr14;      case 48 : /* fall through */
d378 2
a379 1
      case 63 : itype = FR30BF_INSN_STR14; goto extract_sfmt_str14;      case 64 : /* fall through */
d394 2
a395 1
      case 79 : itype = FR30BF_INSN_LDR14UH; goto extract_sfmt_ldr14uh;      case 80 : /* fall through */
d410 2
a411 1
      case 95 : itype = FR30BF_INSN_STR14H; goto extract_sfmt_str14h;      case 96 : /* fall through */
d426 2
a427 1
      case 111 : itype = FR30BF_INSN_LDR14UB; goto extract_sfmt_ldr14ub;      case 112 : /* fall through */
d442 25
a466 1
      case 127 : itype = FR30BF_INSN_STR14B; goto extract_sfmt_str14b;      case 128 : itype = FR30BF_INSN_BANDL; goto extract_sfmt_bandl;      case 129 : itype = FR30BF_INSN_BANDH; goto extract_sfmt_bandl;      case 130 : itype = FR30BF_INSN_AND; goto extract_sfmt_and;      case 131 : itype = FR30BF_INSN_ANDCCR; goto extract_sfmt_andccr;      case 132 : itype = FR30BF_INSN_ANDM; goto extract_sfmt_andm;      case 133 : itype = FR30BF_INSN_ANDH; goto extract_sfmt_andh;      case 134 : itype = FR30BF_INSN_ANDB; goto extract_sfmt_andb;      case 135 : itype = FR30BF_INSN_STILM; goto extract_sfmt_stilm;      case 136 : itype = FR30BF_INSN_BTSTL; goto extract_sfmt_btstl;      case 137 : itype = FR30BF_INSN_BTSTH; goto extract_sfmt_btstl;      case 138 : itype = FR30BF_INSN_XCHB; goto extract_sfmt_xchb;      case 139 : itype = FR30BF_INSN_MOV; goto extract_sfmt_mov;      case 140 : itype = FR30BF_INSN_LDM0; goto extract_sfmt_ldm0;      case 141 : itype = FR30BF_INSN_LDM1; goto extract_sfmt_ldm1;      case 142 : itype = FR30BF_INSN_STM0; goto extract_sfmt_stm0;      case 143 : itype = FR30BF_INSN_STM1; goto extract_sfmt_stm1;      case 144 : itype = FR30BF_INSN_BORL; goto extract_sfmt_bandl;      case 145 : itype = FR30BF_INSN_BORH; goto extract_sfmt_bandl;      case 146 : itype = FR30BF_INSN_OR; goto extract_sfmt_and;      case 147 : itype = FR30BF_INSN_ORCCR; goto extract_sfmt_andccr;      case 148 : itype = FR30BF_INSN_ORM; goto extract_sfmt_andm;      case 149 : itype = FR30BF_INSN_ORH; goto extract_sfmt_andh;      case 150 : itype = FR30BF_INSN_ORB; goto extract_sfmt_andb;      case 151 :
d471 13
a483 1
          case 0 : itype = FR30BF_INSN_JMP; goto extract_sfmt_jmp;          case 1 : itype = FR30BF_INSN_CALLR; goto extract_sfmt_callr;          case 2 : itype = FR30BF_INSN_RET; goto extract_sfmt_ret;          case 3 : itype = FR30BF_INSN_RETI; goto extract_sfmt_reti;          case 4 : itype = FR30BF_INSN_DIV0S; goto extract_sfmt_div0s;          case 5 : itype = FR30BF_INSN_DIV0U; goto extract_sfmt_div0u;          case 6 : itype = FR30BF_INSN_DIV1; goto extract_sfmt_div1;          case 7 : itype = FR30BF_INSN_DIV2; goto extract_sfmt_div2;          case 8 : itype = FR30BF_INSN_EXTSB; goto extract_sfmt_extsb;          case 9 : itype = FR30BF_INSN_EXTUB; goto extract_sfmt_extub;          case 10 : itype = FR30BF_INSN_EXTSH; goto extract_sfmt_extsh;          case 11 : itype = FR30BF_INSN_EXTUH; goto extract_sfmt_extuh;          default : itype = FR30BF_INSN_X_INVALID; goto extract_sfmt_empty;
d486 8
a493 1
      case 152 : itype = FR30BF_INSN_BEORL; goto extract_sfmt_bandl;      case 153 : itype = FR30BF_INSN_BEORH; goto extract_sfmt_bandl;      case 154 : itype = FR30BF_INSN_EOR; goto extract_sfmt_and;      case 155 : itype = FR30BF_INSN_LDI20; goto extract_sfmt_ldi20;      case 156 : itype = FR30BF_INSN_EORM; goto extract_sfmt_andm;      case 157 : itype = FR30BF_INSN_EORH; goto extract_sfmt_andh;      case 158 : itype = FR30BF_INSN_EORB; goto extract_sfmt_andb;      case 159 :
d498 14
a511 1
          case 0 : itype = FR30BF_INSN_JMPD; goto extract_sfmt_jmp;          case 1 : itype = FR30BF_INSN_CALLRD; goto extract_sfmt_callr;          case 2 : itype = FR30BF_INSN_RET_D; goto extract_sfmt_ret;          case 3 : itype = FR30BF_INSN_INTE; goto extract_sfmt_inte;          case 6 : itype = FR30BF_INSN_DIV3; goto extract_sfmt_div3;          case 7 : itype = FR30BF_INSN_DIV4S; goto extract_sfmt_div4s;          case 8 : itype = FR30BF_INSN_LDI32; goto extract_sfmt_ldi32;          case 9 : itype = FR30BF_INSN_LEAVE; goto extract_sfmt_leave;          case 10 : itype = FR30BF_INSN_NOP; goto extract_sfmt_bnod;          case 12 : itype = FR30BF_INSN_COPOP; goto extract_sfmt_copop;          case 13 : itype = FR30BF_INSN_COPLD; goto extract_sfmt_copop;          case 14 : itype = FR30BF_INSN_COPST; goto extract_sfmt_copop;          case 15 : itype = FR30BF_INSN_COPSV; goto extract_sfmt_copop;          default : itype = FR30BF_INSN_X_INVALID; goto extract_sfmt_empty;
d514 32
a545 1
      case 160 : itype = FR30BF_INSN_ADDNI; goto extract_sfmt_addni;      case 161 : itype = FR30BF_INSN_ADDN2; goto extract_sfmt_addn2;      case 162 : itype = FR30BF_INSN_ADDN; goto extract_sfmt_addn;      case 163 : itype = FR30BF_INSN_ADDSP; goto extract_sfmt_addsp;      case 164 : itype = FR30BF_INSN_ADDI; goto extract_sfmt_addi;      case 165 : itype = FR30BF_INSN_ADD2; goto extract_sfmt_add2;      case 166 : itype = FR30BF_INSN_ADD; goto extract_sfmt_add;      case 167 : itype = FR30BF_INSN_ADDC; goto extract_sfmt_addc;      case 168 : itype = FR30BF_INSN_CMPI; goto extract_sfmt_cmpi;      case 169 : itype = FR30BF_INSN_CMP2; goto extract_sfmt_cmp2;      case 170 : itype = FR30BF_INSN_CMP; goto extract_sfmt_cmp;      case 171 : itype = FR30BF_INSN_MULU; goto extract_sfmt_mulu;      case 172 : itype = FR30BF_INSN_SUB; goto extract_sfmt_add;      case 173 : itype = FR30BF_INSN_SUBC; goto extract_sfmt_addc;      case 174 : itype = FR30BF_INSN_SUBN; goto extract_sfmt_addn;      case 175 : itype = FR30BF_INSN_MUL; goto extract_sfmt_mul;      case 176 : itype = FR30BF_INSN_LSRI; goto extract_sfmt_lsli;      case 177 : itype = FR30BF_INSN_LSR2; goto extract_sfmt_lsli;      case 178 : itype = FR30BF_INSN_LSR; goto extract_sfmt_lsl;      case 179 : itype = FR30BF_INSN_MOV2DR; goto extract_sfmt_mov2dr;      case 180 : itype = FR30BF_INSN_LSLI; goto extract_sfmt_lsli;      case 181 : itype = FR30BF_INSN_LSL2; goto extract_sfmt_lsli;      case 182 : itype = FR30BF_INSN_LSL; goto extract_sfmt_lsl;      case 183 : itype = FR30BF_INSN_MOVDR; goto extract_sfmt_movdr;      case 184 : itype = FR30BF_INSN_ASRI; goto extract_sfmt_lsli;      case 185 : itype = FR30BF_INSN_ASR2; goto extract_sfmt_lsli;      case 186 : itype = FR30BF_INSN_ASR; goto extract_sfmt_lsl;      case 187 : itype = FR30BF_INSN_MULUH; goto extract_sfmt_mulh;      case 188 : itype = FR30BF_INSN_LDRES; goto extract_sfmt_ldres;      case 189 : itype = FR30BF_INSN_STRES; goto extract_sfmt_ldres;      case 191 : itype = FR30BF_INSN_MULH; goto extract_sfmt_mulh;      case 192 : /* fall through */
d560 2
a561 1
      case 207 : itype = FR30BF_INSN_LDI8; goto extract_sfmt_ldi8;      case 208 : /* fall through */
d568 2
a569 1
      case 215 : itype = FR30BF_INSN_CALL; goto extract_sfmt_call;      case 216 : /* fall through */
d576 34
a609 1
      case 223 : itype = FR30BF_INSN_CALLD; goto extract_sfmt_call;      case 224 : itype = FR30BF_INSN_BRA; goto extract_sfmt_brad;      case 225 : itype = FR30BF_INSN_BNO; goto extract_sfmt_bnod;      case 226 : itype = FR30BF_INSN_BEQ; goto extract_sfmt_beqd;      case 227 : itype = FR30BF_INSN_BNE; goto extract_sfmt_beqd;      case 228 : itype = FR30BF_INSN_BC; goto extract_sfmt_bcd;      case 229 : itype = FR30BF_INSN_BNC; goto extract_sfmt_bcd;      case 230 : itype = FR30BF_INSN_BN; goto extract_sfmt_bnd;      case 231 : itype = FR30BF_INSN_BP; goto extract_sfmt_bnd;      case 232 : itype = FR30BF_INSN_BV; goto extract_sfmt_bvd;      case 233 : itype = FR30BF_INSN_BNV; goto extract_sfmt_bvd;      case 234 : itype = FR30BF_INSN_BLT; goto extract_sfmt_bltd;      case 235 : itype = FR30BF_INSN_BGE; goto extract_sfmt_bltd;      case 236 : itype = FR30BF_INSN_BLE; goto extract_sfmt_bled;      case 237 : itype = FR30BF_INSN_BGT; goto extract_sfmt_bled;      case 238 : itype = FR30BF_INSN_BLS; goto extract_sfmt_blsd;      case 239 : itype = FR30BF_INSN_BHI; goto extract_sfmt_blsd;      case 240 : itype = FR30BF_INSN_BRAD; goto extract_sfmt_brad;      case 241 : itype = FR30BF_INSN_BNOD; goto extract_sfmt_bnod;      case 242 : itype = FR30BF_INSN_BEQD; goto extract_sfmt_beqd;      case 243 : itype = FR30BF_INSN_BNED; goto extract_sfmt_beqd;      case 244 : itype = FR30BF_INSN_BCD; goto extract_sfmt_bcd;      case 245 : itype = FR30BF_INSN_BNCD; goto extract_sfmt_bcd;      case 246 : itype = FR30BF_INSN_BND; goto extract_sfmt_bnd;      case 247 : itype = FR30BF_INSN_BPD; goto extract_sfmt_bnd;      case 248 : itype = FR30BF_INSN_BVD; goto extract_sfmt_bvd;      case 249 : itype = FR30BF_INSN_BNVD; goto extract_sfmt_bvd;      case 250 : itype = FR30BF_INSN_BLTD; goto extract_sfmt_bltd;      case 251 : itype = FR30BF_INSN_BGED; goto extract_sfmt_bltd;      case 252 : itype = FR30BF_INSN_BLED; goto extract_sfmt_bled;      case 253 : itype = FR30BF_INSN_BGTD; goto extract_sfmt_bled;      case 254 : itype = FR30BF_INSN_BLSD; goto extract_sfmt_blsd;      case 255 : itype = FR30BF_INSN_BHID; goto extract_sfmt_blsd;      default : itype = FR30BF_INSN_X_INVALID; goto extract_sfmt_empty;
d632 1
d663 1
d692 1
d721 1
d752 1
d783 1
d812 1
d841 1
d871 1
d899 1
d927 1
d958 1
d988 1
d1018 1
d1048 1
d1076 1
d1104 1
d1134 1
d1164 1
d1194 1
d1232 1
d1257 1
d1308 1
d1339 1
d1368 1
d1396 1
d1433 1
d1466 1
d1493 60
d1556 1
d1576 63
a1638 1
      FLD (in_h_gr_13) = 13;
d1649 1
d1667 1
a1667 1
      FLD (in_h_gr_14) = 14;
d1678 1
d1696 1
a1696 1
      FLD (in_h_gr_14) = 14;
d1707 1
d1725 1
a1725 1
      FLD (in_h_gr_14) = 14;
d1736 1
d1754 1
a1754 1
      FLD (in_h_gr_15) = 15;
d1765 1
d1780 1
a1780 1
      FLD (in_h_gr_15) = 15;
d1782 1
a1782 1
      FLD (out_h_gr_15) = 15;
d1792 1
d1806 2
a1807 2
      FLD (in_h_gr_15) = 15;
      FLD (out_h_gr_15) = 15;
d1827 2
a1828 2
      FLD (in_h_gr_15) = 15;
      FLD (out_h_gr_15) = 15;
d1838 1
d1865 60
d1928 1
d1949 63
a2011 1
      FLD (in_h_gr_13) = 13;
d2021 1
d2040 1
a2040 1
      FLD (in_h_gr_14) = 14;
d2050 1
d2069 1
a2069 1
      FLD (in_h_gr_14) = 14;
d2079 1
d2098 1
a2098 1
      FLD (in_h_gr_14) = 14;
d2108 1
d2127 1
a2127 1
      FLD (in_h_gr_15) = 15;
d2137 1
d2153 2
a2154 2
      FLD (in_h_gr_15) = 15;
      FLD (out_h_gr_15) = 15;
d2164 1
d2178 2
a2179 2
      FLD (in_h_gr_15) = 15;
      FLD (out_h_gr_15) = 15;
d2199 2
a2200 2
      FLD (in_h_gr_15) = 15;
      FLD (out_h_gr_15) = 15;
d2210 1
d2240 1
d2268 1
d2293 1
d2321 1
d2346 1
d2371 1
d2396 1
d2438 1
d2499 1
d2535 1
d2558 1
d2581 1
d2604 1
d2627 1
d2650 1
d2673 1
d2696 1
d2710 1
a2710 1
      FLD (in_h_gr_13) = 13;
d2720 1
d2734 1
a2734 1
      FLD (in_h_gr_13) = 13;
d2744 1
d2758 1
a2758 1
      FLD (in_h_gr_13) = 13;
d2768 1
d2782 2
a2783 2
      FLD (in_h_gr_13) = 13;
      FLD (out_h_gr_13) = 13;
d2793 1
d2807 2
a2808 2
      FLD (in_h_gr_13) = 13;
      FLD (out_h_gr_13) = 13;
d2818 1
d2832 2
a2833 2
      FLD (in_h_gr_13) = 13;
      FLD (out_h_gr_13) = 13;
d2843 1
d2857 2
a2858 2
      FLD (in_h_gr_15) = 15;
      FLD (out_h_gr_15) = 15;
d2868 1
d2882 1
a2882 1
      FLD (out_h_gr_13) = 13;
d2892 1
d2906 1
a2906 1
      FLD (out_h_gr_13) = 13;
d2916 1
d2930 1
a2930 1
      FLD (out_h_gr_13) = 13;
d2940 1
d2954 2
a2955 2
      FLD (in_h_gr_13) = 13;
      FLD (out_h_gr_13) = 13;
d2965 1
d2979 2
a2980 2
      FLD (in_h_gr_13) = 13;
      FLD (out_h_gr_13) = 13;
d2990 1
d3004 2
a3005 2
      FLD (in_h_gr_13) = 13;
      FLD (out_h_gr_13) = 13;
d3015 1
d3029 2
a3030 2
      FLD (in_h_gr_15) = 15;
      FLD (out_h_gr_15) = 15;
d3040 1
d3082 1
d3099 1
d3116 1
d3130 2
a3131 2
      FLD (in_h_gr_15) = 15;
      FLD (out_h_gr_15) = 15;
d3141 1
d3167 1
d3193 1
d3219 1
d3245 1
d3259 10
a3268 10
      FLD (in_h_gr_15) = 15;
      FLD (out_h_gr_0) = 0;
      FLD (out_h_gr_1) = 1;
      FLD (out_h_gr_15) = 15;
      FLD (out_h_gr_2) = 2;
      FLD (out_h_gr_3) = 3;
      FLD (out_h_gr_4) = 4;
      FLD (out_h_gr_5) = 5;
      FLD (out_h_gr_6) = 6;
      FLD (out_h_gr_7) = 7;
d3278 1
d3292 9
a3300 9
      FLD (in_h_gr_15) = 15;
      FLD (out_h_gr_10) = 10;
      FLD (out_h_gr_11) = 11;
      FLD (out_h_gr_12) = 12;
      FLD (out_h_gr_13) = 13;
      FLD (out_h_gr_14) = 14;
      FLD (out_h_gr_15) = 15;
      FLD (out_h_gr_8) = 8;
      FLD (out_h_gr_9) = 9;
d3310 1
d3324 10
a3333 10
      FLD (in_h_gr_0) = 0;
      FLD (in_h_gr_1) = 1;
      FLD (in_h_gr_15) = 15;
      FLD (in_h_gr_2) = 2;
      FLD (in_h_gr_3) = 3;
      FLD (in_h_gr_4) = 4;
      FLD (in_h_gr_5) = 5;
      FLD (in_h_gr_6) = 6;
      FLD (in_h_gr_7) = 7;
      FLD (out_h_gr_15) = 15;
d3343 1
d3357 9
a3365 9
      FLD (in_h_gr_10) = 10;
      FLD (in_h_gr_11) = 11;
      FLD (in_h_gr_12) = 12;
      FLD (in_h_gr_13) = 13;
      FLD (in_h_gr_14) = 14;
      FLD (in_h_gr_15) = 15;
      FLD (in_h_gr_8) = 8;
      FLD (in_h_gr_9) = 9;
      FLD (out_h_gr_15) = 15;
d3375 1
d3389 4
a3392 4
      FLD (in_h_gr_14) = 14;
      FLD (in_h_gr_15) = 15;
      FLD (out_h_gr_14) = 14;
      FLD (out_h_gr_15) = 15;
d3412 4
a3415 4
      FLD (in_h_gr_14) = 14;
      FLD (in_h_gr_15) = 15;
      FLD (out_h_gr_14) = 14;
      FLD (out_h_gr_15) = 15;
d3425 1
@


1.2
log
@2000-08-28  Dave Brolley  <brolley@@redhat.com>

	* cpu.h: Regenerated.
	* decode.c: Regenerated.
@
text
@d5 1
a5 1
Copyright (C) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.
d285 1
a287 1
    CGEN_INSN_INT insn = base_insn;
d293 1
a293 8
      case 0 : itype = FR30BF_INSN_LDR13; goto extract_sfmt_ldr13;
      case 1 : itype = FR30BF_INSN_LDR13UH; goto extract_sfmt_ldr13;
      case 2 : itype = FR30BF_INSN_LDR13UB; goto extract_sfmt_ldr13;
      case 3 : itype = FR30BF_INSN_LDR15; goto extract_sfmt_ldr15;
      case 4 : itype = FR30BF_INSN_LD; goto extract_sfmt_ld;
      case 5 : itype = FR30BF_INSN_LDUH; goto extract_sfmt_ld;
      case 6 : itype = FR30BF_INSN_LDUB; goto extract_sfmt_ld;
      case 7 :
d295 1
a295 1
          unsigned int val = (((insn >> 4) & (15 << 0)));
d298 1
a298 5
          case 0 : itype = FR30BF_INSN_LDR15GR; goto extract_sfmt_ldr15gr;
          case 1 : itype = FR30BF_INSN_MOV2PS; goto extract_sfmt_mov2ps;
          case 8 : itype = FR30BF_INSN_LDR15DR; goto extract_sfmt_ldr15dr;
          case 9 : itype = FR30BF_INSN_LDR15PS; goto extract_sfmt_ldr15ps;
          default : itype = FR30BF_INSN_X_INVALID; goto extract_sfmt_empty;
d301 1
a301 16
      case 8 : itype = FR30BF_INSN_DMOV2R13; goto extract_sfmt_dmov2r13;
      case 9 : itype = FR30BF_INSN_DMOV2R13H; goto extract_sfmt_dmov2r13h;
      case 10 : itype = FR30BF_INSN_DMOV2R13B; goto extract_sfmt_dmov2r13b;
      case 11 : itype = FR30BF_INSN_DMOV2R15PD; goto extract_sfmt_dmov2r15pd;
      case 12 : itype = FR30BF_INSN_DMOV2R13PI; goto extract_sfmt_dmov2r13pi;
      case 13 : itype = FR30BF_INSN_DMOV2R13PIH; goto extract_sfmt_dmov2r13pih;
      case 14 : itype = FR30BF_INSN_DMOV2R13PIB; goto extract_sfmt_dmov2r13pib;
      case 15 : itype = FR30BF_INSN_ENTER; goto extract_sfmt_enter;
      case 16 : itype = FR30BF_INSN_STR13; goto extract_sfmt_str13;
      case 17 : itype = FR30BF_INSN_STR13H; goto extract_sfmt_str13;
      case 18 : itype = FR30BF_INSN_STR13B; goto extract_sfmt_str13;
      case 19 : itype = FR30BF_INSN_STR15; goto extract_sfmt_str15;
      case 20 : itype = FR30BF_INSN_ST; goto extract_sfmt_st;
      case 21 : itype = FR30BF_INSN_STH; goto extract_sfmt_st;
      case 22 : itype = FR30BF_INSN_STB; goto extract_sfmt_st;
      case 23 :
d303 1
a303 1
          unsigned int val = (((insn >> 4) & (15 << 0)));
d306 1
a306 5
          case 0 : itype = FR30BF_INSN_STR15GR; goto extract_sfmt_str15gr;
          case 1 : itype = FR30BF_INSN_MOVPS; goto extract_sfmt_movps;
          case 8 : itype = FR30BF_INSN_STR15DR; goto extract_sfmt_str15dr;
          case 9 : itype = FR30BF_INSN_STR15PS; goto extract_sfmt_str15ps;
          default : itype = FR30BF_INSN_X_INVALID; goto extract_sfmt_empty;
d309 1
a309 9
      case 24 : itype = FR30BF_INSN_DMOVR13; goto extract_sfmt_dmovr13;
      case 25 : itype = FR30BF_INSN_DMOVR13H; goto extract_sfmt_dmovr13h;
      case 26 : itype = FR30BF_INSN_DMOVR13B; goto extract_sfmt_dmovr13b;
      case 27 : itype = FR30BF_INSN_DMOVR15PI; goto extract_sfmt_dmovr15pi;
      case 28 : itype = FR30BF_INSN_DMOVR13PI; goto extract_sfmt_dmovr13pi;
      case 29 : itype = FR30BF_INSN_DMOVR13PIH; goto extract_sfmt_dmovr13pih;
      case 30 : itype = FR30BF_INSN_DMOVR13PIB; goto extract_sfmt_dmovr13pib;
      case 31 : itype = FR30BF_INSN_INT; goto extract_sfmt_int;
      case 32 : /* fall through */
d324 1
a324 2
      case 47 : itype = FR30BF_INSN_LDR14; goto extract_sfmt_ldr14;
      case 48 : /* fall through */
d339 1
a339 2
      case 63 : itype = FR30BF_INSN_STR14; goto extract_sfmt_str14;
      case 64 : /* fall through */
d354 1
a354 2
      case 79 : itype = FR30BF_INSN_LDR14UH; goto extract_sfmt_ldr14uh;
      case 80 : /* fall through */
d369 1
a369 2
      case 95 : itype = FR30BF_INSN_STR14H; goto extract_sfmt_str14h;
      case 96 : /* fall through */
d384 1
a384 2
      case 111 : itype = FR30BF_INSN_LDR14UB; goto extract_sfmt_ldr14ub;
      case 112 : /* fall through */
d399 1
a399 25
      case 127 : itype = FR30BF_INSN_STR14B; goto extract_sfmt_str14b;
      case 128 : itype = FR30BF_INSN_BANDL; goto extract_sfmt_bandl;
      case 129 : itype = FR30BF_INSN_BANDH; goto extract_sfmt_bandl;
      case 130 : itype = FR30BF_INSN_AND; goto extract_sfmt_and;
      case 131 : itype = FR30BF_INSN_ANDCCR; goto extract_sfmt_andccr;
      case 132 : itype = FR30BF_INSN_ANDM; goto extract_sfmt_andm;
      case 133 : itype = FR30BF_INSN_ANDH; goto extract_sfmt_andh;
      case 134 : itype = FR30BF_INSN_ANDB; goto extract_sfmt_andb;
      case 135 : itype = FR30BF_INSN_STILM; goto extract_sfmt_stilm;
      case 136 : itype = FR30BF_INSN_BTSTL; goto extract_sfmt_btstl;
      case 137 : itype = FR30BF_INSN_BTSTH; goto extract_sfmt_btstl;
      case 138 : itype = FR30BF_INSN_XCHB; goto extract_sfmt_xchb;
      case 139 : itype = FR30BF_INSN_MOV; goto extract_sfmt_mov;
      case 140 : itype = FR30BF_INSN_LDM0; goto extract_sfmt_ldm0;
      case 141 : itype = FR30BF_INSN_LDM1; goto extract_sfmt_ldm1;
      case 142 : itype = FR30BF_INSN_STM0; goto extract_sfmt_stm0;
      case 143 : itype = FR30BF_INSN_STM1; goto extract_sfmt_stm1;
      case 144 : itype = FR30BF_INSN_BORL; goto extract_sfmt_bandl;
      case 145 : itype = FR30BF_INSN_BORH; goto extract_sfmt_bandl;
      case 146 : itype = FR30BF_INSN_OR; goto extract_sfmt_and;
      case 147 : itype = FR30BF_INSN_ORCCR; goto extract_sfmt_andccr;
      case 148 : itype = FR30BF_INSN_ORM; goto extract_sfmt_andm;
      case 149 : itype = FR30BF_INSN_ORH; goto extract_sfmt_andh;
      case 150 : itype = FR30BF_INSN_ORB; goto extract_sfmt_andb;
      case 151 :
d404 1
a404 13
          case 0 : itype = FR30BF_INSN_JMP; goto extract_sfmt_jmp;
          case 1 : itype = FR30BF_INSN_CALLR; goto extract_sfmt_callr;
          case 2 : itype = FR30BF_INSN_RET; goto extract_sfmt_ret;
          case 3 : itype = FR30BF_INSN_RETI; goto extract_sfmt_reti;
          case 4 : itype = FR30BF_INSN_DIV0S; goto extract_sfmt_div0s;
          case 5 : itype = FR30BF_INSN_DIV0U; goto extract_sfmt_div0u;
          case 6 : itype = FR30BF_INSN_DIV1; goto extract_sfmt_div1;
          case 7 : itype = FR30BF_INSN_DIV2; goto extract_sfmt_div2;
          case 8 : itype = FR30BF_INSN_EXTSB; goto extract_sfmt_extsb;
          case 9 : itype = FR30BF_INSN_EXTUB; goto extract_sfmt_extub;
          case 10 : itype = FR30BF_INSN_EXTSH; goto extract_sfmt_extsh;
          case 11 : itype = FR30BF_INSN_EXTUH; goto extract_sfmt_extuh;
          default : itype = FR30BF_INSN_X_INVALID; goto extract_sfmt_empty;
d407 1
a407 8
      case 152 : itype = FR30BF_INSN_BEORL; goto extract_sfmt_bandl;
      case 153 : itype = FR30BF_INSN_BEORH; goto extract_sfmt_bandl;
      case 154 : itype = FR30BF_INSN_EOR; goto extract_sfmt_and;
      case 155 : itype = FR30BF_INSN_LDI20; goto extract_sfmt_ldi20;
      case 156 : itype = FR30BF_INSN_EORM; goto extract_sfmt_andm;
      case 157 : itype = FR30BF_INSN_EORH; goto extract_sfmt_andh;
      case 158 : itype = FR30BF_INSN_EORB; goto extract_sfmt_andb;
      case 159 :
d412 1
a412 14
          case 0 : itype = FR30BF_INSN_JMPD; goto extract_sfmt_jmp;
          case 1 : itype = FR30BF_INSN_CALLRD; goto extract_sfmt_callr;
          case 2 : itype = FR30BF_INSN_RET_D; goto extract_sfmt_ret;
          case 3 : itype = FR30BF_INSN_INTE; goto extract_sfmt_inte;
          case 6 : itype = FR30BF_INSN_DIV3; goto extract_sfmt_div3;
          case 7 : itype = FR30BF_INSN_DIV4S; goto extract_sfmt_div4s;
          case 8 : itype = FR30BF_INSN_LDI32; goto extract_sfmt_ldi32;
          case 9 : itype = FR30BF_INSN_LEAVE; goto extract_sfmt_leave;
          case 10 : itype = FR30BF_INSN_NOP; goto extract_sfmt_bnod;
          case 12 : itype = FR30BF_INSN_COPOP; goto extract_sfmt_copop;
          case 13 : itype = FR30BF_INSN_COPLD; goto extract_sfmt_copop;
          case 14 : itype = FR30BF_INSN_COPST; goto extract_sfmt_copop;
          case 15 : itype = FR30BF_INSN_COPSV; goto extract_sfmt_copop;
          default : itype = FR30BF_INSN_X_INVALID; goto extract_sfmt_empty;
d415 1
a415 32
      case 160 : itype = FR30BF_INSN_ADDNI; goto extract_sfmt_addni;
      case 161 : itype = FR30BF_INSN_ADDN2; goto extract_sfmt_addn2;
      case 162 : itype = FR30BF_INSN_ADDN; goto extract_sfmt_addn;
      case 163 : itype = FR30BF_INSN_ADDSP; goto extract_sfmt_addsp;
      case 164 : itype = FR30BF_INSN_ADDI; goto extract_sfmt_addi;
      case 165 : itype = FR30BF_INSN_ADD2; goto extract_sfmt_add2;
      case 166 : itype = FR30BF_INSN_ADD; goto extract_sfmt_add;
      case 167 : itype = FR30BF_INSN_ADDC; goto extract_sfmt_addc;
      case 168 : itype = FR30BF_INSN_CMPI; goto extract_sfmt_cmpi;
      case 169 : itype = FR30BF_INSN_CMP2; goto extract_sfmt_cmp2;
      case 170 : itype = FR30BF_INSN_CMP; goto extract_sfmt_cmp;
      case 171 : itype = FR30BF_INSN_MULU; goto extract_sfmt_mulu;
      case 172 : itype = FR30BF_INSN_SUB; goto extract_sfmt_add;
      case 173 : itype = FR30BF_INSN_SUBC; goto extract_sfmt_addc;
      case 174 : itype = FR30BF_INSN_SUBN; goto extract_sfmt_addn;
      case 175 : itype = FR30BF_INSN_MUL; goto extract_sfmt_mul;
      case 176 : itype = FR30BF_INSN_LSRI; goto extract_sfmt_lsli;
      case 177 : itype = FR30BF_INSN_LSR2; goto extract_sfmt_lsli;
      case 178 : itype = FR30BF_INSN_LSR; goto extract_sfmt_lsl;
      case 179 : itype = FR30BF_INSN_MOV2DR; goto extract_sfmt_mov2dr;
      case 180 : itype = FR30BF_INSN_LSLI; goto extract_sfmt_lsli;
      case 181 : itype = FR30BF_INSN_LSL2; goto extract_sfmt_lsli;
      case 182 : itype = FR30BF_INSN_LSL; goto extract_sfmt_lsl;
      case 183 : itype = FR30BF_INSN_MOVDR; goto extract_sfmt_movdr;
      case 184 : itype = FR30BF_INSN_ASRI; goto extract_sfmt_lsli;
      case 185 : itype = FR30BF_INSN_ASR2; goto extract_sfmt_lsli;
      case 186 : itype = FR30BF_INSN_ASR; goto extract_sfmt_lsl;
      case 187 : itype = FR30BF_INSN_MULUH; goto extract_sfmt_mulh;
      case 188 : itype = FR30BF_INSN_LDRES; goto extract_sfmt_ldres;
      case 189 : itype = FR30BF_INSN_STRES; goto extract_sfmt_ldres;
      case 191 : itype = FR30BF_INSN_MULH; goto extract_sfmt_mulh;
      case 192 : /* fall through */
d430 1
a430 2
      case 207 : itype = FR30BF_INSN_LDI8; goto extract_sfmt_ldi8;
      case 208 : /* fall through */
d437 1
a437 2
      case 215 : itype = FR30BF_INSN_CALL; goto extract_sfmt_call;
      case 216 : /* fall through */
d444 1
a444 34
      case 223 : itype = FR30BF_INSN_CALLD; goto extract_sfmt_call;
      case 224 : itype = FR30BF_INSN_BRA; goto extract_sfmt_brad;
      case 225 : itype = FR30BF_INSN_BNO; goto extract_sfmt_bnod;
      case 226 : itype = FR30BF_INSN_BEQ; goto extract_sfmt_beqd;
      case 227 : itype = FR30BF_INSN_BNE; goto extract_sfmt_beqd;
      case 228 : itype = FR30BF_INSN_BC; goto extract_sfmt_bcd;
      case 229 : itype = FR30BF_INSN_BNC; goto extract_sfmt_bcd;
      case 230 : itype = FR30BF_INSN_BN; goto extract_sfmt_bnd;
      case 231 : itype = FR30BF_INSN_BP; goto extract_sfmt_bnd;
      case 232 : itype = FR30BF_INSN_BV; goto extract_sfmt_bvd;
      case 233 : itype = FR30BF_INSN_BNV; goto extract_sfmt_bvd;
      case 234 : itype = FR30BF_INSN_BLT; goto extract_sfmt_bltd;
      case 235 : itype = FR30BF_INSN_BGE; goto extract_sfmt_bltd;
      case 236 : itype = FR30BF_INSN_BLE; goto extract_sfmt_bled;
      case 237 : itype = FR30BF_INSN_BGT; goto extract_sfmt_bled;
      case 238 : itype = FR30BF_INSN_BLS; goto extract_sfmt_blsd;
      case 239 : itype = FR30BF_INSN_BHI; goto extract_sfmt_blsd;
      case 240 : itype = FR30BF_INSN_BRAD; goto extract_sfmt_brad;
      case 241 : itype = FR30BF_INSN_BNOD; goto extract_sfmt_bnod;
      case 242 : itype = FR30BF_INSN_BEQD; goto extract_sfmt_beqd;
      case 243 : itype = FR30BF_INSN_BNED; goto extract_sfmt_beqd;
      case 244 : itype = FR30BF_INSN_BCD; goto extract_sfmt_bcd;
      case 245 : itype = FR30BF_INSN_BNCD; goto extract_sfmt_bcd;
      case 246 : itype = FR30BF_INSN_BND; goto extract_sfmt_bnd;
      case 247 : itype = FR30BF_INSN_BPD; goto extract_sfmt_bnd;
      case 248 : itype = FR30BF_INSN_BVD; goto extract_sfmt_bvd;
      case 249 : itype = FR30BF_INSN_BNVD; goto extract_sfmt_bvd;
      case 250 : itype = FR30BF_INSN_BLTD; goto extract_sfmt_bltd;
      case 251 : itype = FR30BF_INSN_BGED; goto extract_sfmt_bltd;
      case 252 : itype = FR30BF_INSN_BLED; goto extract_sfmt_bled;
      case 253 : itype = FR30BF_INSN_BGTD; goto extract_sfmt_bled;
      case 254 : itype = FR30BF_INSN_BLSD; goto extract_sfmt_blsd;
      case 255 : itype = FR30BF_INSN_BHID; goto extract_sfmt_blsd;
      default : itype = FR30BF_INSN_X_INVALID; goto extract_sfmt_empty;
a453 1
    CGEN_INSN_INT insn = base_insn;
a466 1
    CGEN_INSN_INT insn = base_insn;
a496 1
    CGEN_INSN_INT insn = base_insn;
a524 1
    CGEN_INSN_INT insn = base_insn;
a552 1
    CGEN_INSN_INT insn = base_insn;
a582 1
    CGEN_INSN_INT insn = base_insn;
a612 1
    CGEN_INSN_INT insn = base_insn;
a640 1
    CGEN_INSN_INT insn = base_insn;
a668 1
    CGEN_INSN_INT insn = base_insn;
a697 1
    CGEN_INSN_INT insn = base_insn;
a724 1
    CGEN_INSN_INT insn = base_insn;
a751 1
    CGEN_INSN_INT insn = base_insn;
a781 1
    CGEN_INSN_INT insn = base_insn;
a810 1
    CGEN_INSN_INT insn = base_insn;
a839 1
    CGEN_INSN_INT insn = base_insn;
a868 1
    CGEN_INSN_INT insn = base_insn;
a895 1
    CGEN_INSN_INT insn = base_insn;
a922 1
    CGEN_INSN_INT insn = base_insn;
a951 1
    CGEN_INSN_INT insn = base_insn;
a980 1
    CGEN_INSN_INT insn = base_insn;
a1009 1
    CGEN_INSN_INT insn = base_insn;
a1033 1
    CGEN_INSN_INT insn = base_insn;
a1046 1
    CGEN_INSN_INT insn = base_insn;
a1070 1
    CGEN_INSN_INT insn = base_insn;
a1094 1
    CGEN_INSN_INT insn = base_insn;
a1107 1
    CGEN_INSN_INT insn = base_insn;
a1120 1
    CGEN_INSN_INT insn = base_insn;
a1150 1
    CGEN_INSN_INT insn = base_insn;
a1178 1
    CGEN_INSN_INT insn = base_insn;
a1205 1
    CGEN_INSN_INT insn = base_insn;
a1241 1
    CGEN_INSN_INT insn = base_insn;
a1273 1
    CGEN_INSN_INT insn = base_insn;
a1302 1
    CGEN_INSN_INT insn = base_insn;
a1332 1
    CGEN_INSN_INT insn = base_insn;
a1360 1
    CGEN_INSN_INT insn = base_insn;
a1388 1
    CGEN_INSN_INT insn = base_insn;
a1416 1
    CGEN_INSN_INT insn = base_insn;
a1444 1
    CGEN_INSN_INT insn = base_insn;
a1470 1
    CGEN_INSN_INT insn = base_insn;
a1494 1
    CGEN_INSN_INT insn = base_insn;
a1515 1
    CGEN_INSN_INT insn = base_insn;
a1544 1
    CGEN_INSN_INT insn = base_insn;
a1574 1
    CGEN_INSN_INT insn = base_insn;
a1602 1
    CGEN_INSN_INT insn = base_insn;
a1630 1
    CGEN_INSN_INT insn = base_insn;
a1658 1
    CGEN_INSN_INT insn = base_insn;
a1686 1
    CGEN_INSN_INT insn = base_insn;
a1712 1
    CGEN_INSN_INT insn = base_insn;
a1736 1
    CGEN_INSN_INT insn = base_insn;
a1757 1
    CGEN_INSN_INT insn = base_insn;
a1786 1
    CGEN_INSN_INT insn = base_insn;
a1813 1
    CGEN_INSN_INT insn = base_insn;
a1837 1
    CGEN_INSN_INT insn = base_insn;
a1864 1
    CGEN_INSN_INT insn = base_insn;
a1888 1
    CGEN_INSN_INT insn = base_insn;
a1912 1
    CGEN_INSN_INT insn = base_insn;
a1936 1
    CGEN_INSN_INT insn = base_insn;
a1958 1
    CGEN_INSN_INT insn = base_insn;
a1977 1
    CGEN_INSN_INT insn = base_insn;
a1999 1
    CGEN_INSN_INT insn = base_insn;
a2018 1
    CGEN_INSN_INT insn = base_insn;
a2037 1
    CGEN_INSN_INT insn = base_insn;
a2059 1
    CGEN_INSN_INT insn = base_insn;
a2072 1
    CGEN_INSN_INT insn = base_insn;
a2094 1
    CGEN_INSN_INT insn = base_insn;
a2116 1
    CGEN_INSN_INT insn = base_insn;
a2138 1
    CGEN_INSN_INT insn = base_insn;
a2160 1
    CGEN_INSN_INT insn = base_insn;
a2182 1
    CGEN_INSN_INT insn = base_insn;
a2204 1
    CGEN_INSN_INT insn = base_insn;
a2226 1
    CGEN_INSN_INT insn = base_insn;
a2249 1
    CGEN_INSN_INT insn = base_insn;
a2272 1
    CGEN_INSN_INT insn = base_insn;
a2295 1
    CGEN_INSN_INT insn = base_insn;
a2319 1
    CGEN_INSN_INT insn = base_insn;
a2343 1
    CGEN_INSN_INT insn = base_insn;
a2367 1
    CGEN_INSN_INT insn = base_insn;
a2391 1
    CGEN_INSN_INT insn = base_insn;
a2414 1
    CGEN_INSN_INT insn = base_insn;
a2437 1
    CGEN_INSN_INT insn = base_insn;
a2460 1
    CGEN_INSN_INT insn = base_insn;
a2484 1
    CGEN_INSN_INT insn = base_insn;
a2508 1
    CGEN_INSN_INT insn = base_insn;
a2532 1
    CGEN_INSN_INT insn = base_insn;
a2556 1
    CGEN_INSN_INT insn = base_insn;
a2581 1
    CGEN_INSN_INT insn = base_insn;
a2597 1
    CGEN_INSN_INT insn = base_insn;
a2613 1
    CGEN_INSN_INT insn = base_insn;
a2629 1
    CGEN_INSN_INT insn = base_insn;
a2653 1
    CGEN_INSN_INT insn = base_insn;
a2678 1
    CGEN_INSN_INT insn = base_insn;
a2703 1
    CGEN_INSN_INT insn = base_insn;
a2728 1
    CGEN_INSN_INT insn = base_insn;
a2753 1
    CGEN_INSN_INT insn = base_insn;
a2785 1
    CGEN_INSN_INT insn = base_insn;
a2816 1
    CGEN_INSN_INT insn = base_insn;
a2848 1
    CGEN_INSN_INT insn = base_insn;
a2879 1
    CGEN_INSN_INT insn = base_insn;
a2905 1
    CGEN_INSN_INT insn = base_insn;
a2928 1
    CGEN_INSN_INT insn = base_insn;
@


1.1
log
@Initial revision
@
text
@a30 18
/* FIXME: Need to review choices for the following.  */

#if WITH_SEM_SWITCH_FULL
#define FULL(fn)
#else
#define FULL(fn) CONCAT3 (fr30bf,_sem_,fn) ,
#endif

#if WITH_FAST
#if WITH_SEM_SWITCH_FAST
#define FAST(fn)
#else
#define FAST(fn) CONCAT3 (fr30bf,_semf_,fn) , /* f for fast */
#endif
#else
#define FAST(fn)
#endif

a37 5
/* The INSN_ prefix is not here and is instead part of the `insn' argument
   to avoid collisions with header files (e.g. `AND' in ansidecl.h).  */
#define IDX(insn) CONCAT2 (FR30BF_,insn)
#define TYPE(insn) CONCAT2 (FR30_,insn)

d43 171
a213 171
  { VIRTUAL_INSN_X_INVALID, IDX (INSN_X_INVALID), FULL (x_invalid) FAST (x_invalid) },
  { VIRTUAL_INSN_X_AFTER, IDX (INSN_X_AFTER), FULL (x_after) FAST (x_after) },
  { VIRTUAL_INSN_X_BEFORE, IDX (INSN_X_BEFORE), FULL (x_before) FAST (x_before) },
  { VIRTUAL_INSN_X_CTI_CHAIN, IDX (INSN_X_CTI_CHAIN), FULL (x_cti_chain) FAST (x_cti_chain) },
  { VIRTUAL_INSN_X_CHAIN, IDX (INSN_X_CHAIN), FULL (x_chain) FAST (x_chain) },
  { VIRTUAL_INSN_X_BEGIN, IDX (INSN_X_BEGIN), FULL (x_begin) FAST (x_begin) },
  { TYPE (INSN_ADD), IDX (INSN_ADD), FULL (add) FAST (add) },
  { TYPE (INSN_ADDI), IDX (INSN_ADDI), FULL (addi) FAST (addi) },
  { TYPE (INSN_ADD2), IDX (INSN_ADD2), FULL (add2) FAST (add2) },
  { TYPE (INSN_ADDC), IDX (INSN_ADDC), FULL (addc) FAST (addc) },
  { TYPE (INSN_ADDN), IDX (INSN_ADDN), FULL (addn) FAST (addn) },
  { TYPE (INSN_ADDNI), IDX (INSN_ADDNI), FULL (addni) FAST (addni) },
  { TYPE (INSN_ADDN2), IDX (INSN_ADDN2), FULL (addn2) FAST (addn2) },
  { TYPE (INSN_SUB), IDX (INSN_SUB), FULL (sub) FAST (sub) },
  { TYPE (INSN_SUBC), IDX (INSN_SUBC), FULL (subc) FAST (subc) },
  { TYPE (INSN_SUBN), IDX (INSN_SUBN), FULL (subn) FAST (subn) },
  { TYPE (INSN_CMP), IDX (INSN_CMP), FULL (cmp) FAST (cmp) },
  { TYPE (INSN_CMPI), IDX (INSN_CMPI), FULL (cmpi) FAST (cmpi) },
  { TYPE (INSN_CMP2), IDX (INSN_CMP2), FULL (cmp2) FAST (cmp2) },
  { TYPE (INSN_AND), IDX (INSN_AND), FULL (and) FAST (and) },
  { TYPE (INSN_OR), IDX (INSN_OR), FULL (or) FAST (or) },
  { TYPE (INSN_EOR), IDX (INSN_EOR), FULL (eor) FAST (eor) },
  { TYPE (INSN_ANDM), IDX (INSN_ANDM), FULL (andm) FAST (andm) },
  { TYPE (INSN_ANDH), IDX (INSN_ANDH), FULL (andh) FAST (andh) },
  { TYPE (INSN_ANDB), IDX (INSN_ANDB), FULL (andb) FAST (andb) },
  { TYPE (INSN_ORM), IDX (INSN_ORM), FULL (orm) FAST (orm) },
  { TYPE (INSN_ORH), IDX (INSN_ORH), FULL (orh) FAST (orh) },
  { TYPE (INSN_ORB), IDX (INSN_ORB), FULL (orb) FAST (orb) },
  { TYPE (INSN_EORM), IDX (INSN_EORM), FULL (eorm) FAST (eorm) },
  { TYPE (INSN_EORH), IDX (INSN_EORH), FULL (eorh) FAST (eorh) },
  { TYPE (INSN_EORB), IDX (INSN_EORB), FULL (eorb) FAST (eorb) },
  { TYPE (INSN_BANDL), IDX (INSN_BANDL), FULL (bandl) FAST (bandl) },
  { TYPE (INSN_BORL), IDX (INSN_BORL), FULL (borl) FAST (borl) },
  { TYPE (INSN_BEORL), IDX (INSN_BEORL), FULL (beorl) FAST (beorl) },
  { TYPE (INSN_BANDH), IDX (INSN_BANDH), FULL (bandh) FAST (bandh) },
  { TYPE (INSN_BORH), IDX (INSN_BORH), FULL (borh) FAST (borh) },
  { TYPE (INSN_BEORH), IDX (INSN_BEORH), FULL (beorh) FAST (beorh) },
  { TYPE (INSN_BTSTL), IDX (INSN_BTSTL), FULL (btstl) FAST (btstl) },
  { TYPE (INSN_BTSTH), IDX (INSN_BTSTH), FULL (btsth) FAST (btsth) },
  { TYPE (INSN_MUL), IDX (INSN_MUL), FULL (mul) FAST (mul) },
  { TYPE (INSN_MULU), IDX (INSN_MULU), FULL (mulu) FAST (mulu) },
  { TYPE (INSN_MULH), IDX (INSN_MULH), FULL (mulh) FAST (mulh) },
  { TYPE (INSN_MULUH), IDX (INSN_MULUH), FULL (muluh) FAST (muluh) },
  { TYPE (INSN_DIV0S), IDX (INSN_DIV0S), FULL (div0s) FAST (div0s) },
  { TYPE (INSN_DIV0U), IDX (INSN_DIV0U), FULL (div0u) FAST (div0u) },
  { TYPE (INSN_DIV1), IDX (INSN_DIV1), FULL (div1) FAST (div1) },
  { TYPE (INSN_DIV2), IDX (INSN_DIV2), FULL (div2) FAST (div2) },
  { TYPE (INSN_DIV3), IDX (INSN_DIV3), FULL (div3) FAST (div3) },
  { TYPE (INSN_DIV4S), IDX (INSN_DIV4S), FULL (div4s) FAST (div4s) },
  { TYPE (INSN_LSL), IDX (INSN_LSL), FULL (lsl) FAST (lsl) },
  { TYPE (INSN_LSLI), IDX (INSN_LSLI), FULL (lsli) FAST (lsli) },
  { TYPE (INSN_LSL2), IDX (INSN_LSL2), FULL (lsl2) FAST (lsl2) },
  { TYPE (INSN_LSR), IDX (INSN_LSR), FULL (lsr) FAST (lsr) },
  { TYPE (INSN_LSRI), IDX (INSN_LSRI), FULL (lsri) FAST (lsri) },
  { TYPE (INSN_LSR2), IDX (INSN_LSR2), FULL (lsr2) FAST (lsr2) },
  { TYPE (INSN_ASR), IDX (INSN_ASR), FULL (asr) FAST (asr) },
  { TYPE (INSN_ASRI), IDX (INSN_ASRI), FULL (asri) FAST (asri) },
  { TYPE (INSN_ASR2), IDX (INSN_ASR2), FULL (asr2) FAST (asr2) },
  { TYPE (INSN_LDI8), IDX (INSN_LDI8), FULL (ldi8) FAST (ldi8) },
  { TYPE (INSN_LDI20), IDX (INSN_LDI20), FULL (ldi20) FAST (ldi20) },
  { TYPE (INSN_LDI32), IDX (INSN_LDI32), FULL (ldi32) FAST (ldi32) },
  { TYPE (INSN_LD), IDX (INSN_LD), FULL (ld) FAST (ld) },
  { TYPE (INSN_LDUH), IDX (INSN_LDUH), FULL (lduh) FAST (lduh) },
  { TYPE (INSN_LDUB), IDX (INSN_LDUB), FULL (ldub) FAST (ldub) },
  { TYPE (INSN_LDR13), IDX (INSN_LDR13), FULL (ldr13) FAST (ldr13) },
  { TYPE (INSN_LDR13UH), IDX (INSN_LDR13UH), FULL (ldr13uh) FAST (ldr13uh) },
  { TYPE (INSN_LDR13UB), IDX (INSN_LDR13UB), FULL (ldr13ub) FAST (ldr13ub) },
  { TYPE (INSN_LDR14), IDX (INSN_LDR14), FULL (ldr14) FAST (ldr14) },
  { TYPE (INSN_LDR14UH), IDX (INSN_LDR14UH), FULL (ldr14uh) FAST (ldr14uh) },
  { TYPE (INSN_LDR14UB), IDX (INSN_LDR14UB), FULL (ldr14ub) FAST (ldr14ub) },
  { TYPE (INSN_LDR15), IDX (INSN_LDR15), FULL (ldr15) FAST (ldr15) },
  { TYPE (INSN_LDR15GR), IDX (INSN_LDR15GR), FULL (ldr15gr) FAST (ldr15gr) },
  { TYPE (INSN_LDR15DR), IDX (INSN_LDR15DR), FULL (ldr15dr) FAST (ldr15dr) },
  { TYPE (INSN_LDR15PS), IDX (INSN_LDR15PS), FULL (ldr15ps) FAST (ldr15ps) },
  { TYPE (INSN_ST), IDX (INSN_ST), FULL (st) FAST (st) },
  { TYPE (INSN_STH), IDX (INSN_STH), FULL (sth) FAST (sth) },
  { TYPE (INSN_STB), IDX (INSN_STB), FULL (stb) FAST (stb) },
  { TYPE (INSN_STR13), IDX (INSN_STR13), FULL (str13) FAST (str13) },
  { TYPE (INSN_STR13H), IDX (INSN_STR13H), FULL (str13h) FAST (str13h) },
  { TYPE (INSN_STR13B), IDX (INSN_STR13B), FULL (str13b) FAST (str13b) },
  { TYPE (INSN_STR14), IDX (INSN_STR14), FULL (str14) FAST (str14) },
  { TYPE (INSN_STR14H), IDX (INSN_STR14H), FULL (str14h) FAST (str14h) },
  { TYPE (INSN_STR14B), IDX (INSN_STR14B), FULL (str14b) FAST (str14b) },
  { TYPE (INSN_STR15), IDX (INSN_STR15), FULL (str15) FAST (str15) },
  { TYPE (INSN_STR15GR), IDX (INSN_STR15GR), FULL (str15gr) FAST (str15gr) },
  { TYPE (INSN_STR15DR), IDX (INSN_STR15DR), FULL (str15dr) FAST (str15dr) },
  { TYPE (INSN_STR15PS), IDX (INSN_STR15PS), FULL (str15ps) FAST (str15ps) },
  { TYPE (INSN_MOV), IDX (INSN_MOV), FULL (mov) FAST (mov) },
  { TYPE (INSN_MOVDR), IDX (INSN_MOVDR), FULL (movdr) FAST (movdr) },
  { TYPE (INSN_MOVPS), IDX (INSN_MOVPS), FULL (movps) FAST (movps) },
  { TYPE (INSN_MOV2DR), IDX (INSN_MOV2DR), FULL (mov2dr) FAST (mov2dr) },
  { TYPE (INSN_MOV2PS), IDX (INSN_MOV2PS), FULL (mov2ps) FAST (mov2ps) },
  { TYPE (INSN_JMP), IDX (INSN_JMP), FULL (jmp) FAST (jmp) },
  { TYPE (INSN_JMPD), IDX (INSN_JMPD), FULL (jmpd) FAST (jmpd) },
  { TYPE (INSN_CALLR), IDX (INSN_CALLR), FULL (callr) FAST (callr) },
  { TYPE (INSN_CALLRD), IDX (INSN_CALLRD), FULL (callrd) FAST (callrd) },
  { TYPE (INSN_CALL), IDX (INSN_CALL), FULL (call) FAST (call) },
  { TYPE (INSN_CALLD), IDX (INSN_CALLD), FULL (calld) FAST (calld) },
  { TYPE (INSN_RET), IDX (INSN_RET), FULL (ret) FAST (ret) },
  { TYPE (INSN_RET_D), IDX (INSN_RET_D), FULL (ret_d) FAST (ret_d) },
  { TYPE (INSN_INT), IDX (INSN_INT), FULL (int) FAST (int) },
  { TYPE (INSN_INTE), IDX (INSN_INTE), FULL (inte) FAST (inte) },
  { TYPE (INSN_RETI), IDX (INSN_RETI), FULL (reti) FAST (reti) },
  { TYPE (INSN_BRAD), IDX (INSN_BRAD), FULL (brad) FAST (brad) },
  { TYPE (INSN_BRA), IDX (INSN_BRA), FULL (bra) FAST (bra) },
  { TYPE (INSN_BNOD), IDX (INSN_BNOD), FULL (bnod) FAST (bnod) },
  { TYPE (INSN_BNO), IDX (INSN_BNO), FULL (bno) FAST (bno) },
  { TYPE (INSN_BEQD), IDX (INSN_BEQD), FULL (beqd) FAST (beqd) },
  { TYPE (INSN_BEQ), IDX (INSN_BEQ), FULL (beq) FAST (beq) },
  { TYPE (INSN_BNED), IDX (INSN_BNED), FULL (bned) FAST (bned) },
  { TYPE (INSN_BNE), IDX (INSN_BNE), FULL (bne) FAST (bne) },
  { TYPE (INSN_BCD), IDX (INSN_BCD), FULL (bcd) FAST (bcd) },
  { TYPE (INSN_BC), IDX (INSN_BC), FULL (bc) FAST (bc) },
  { TYPE (INSN_BNCD), IDX (INSN_BNCD), FULL (bncd) FAST (bncd) },
  { TYPE (INSN_BNC), IDX (INSN_BNC), FULL (bnc) FAST (bnc) },
  { TYPE (INSN_BND), IDX (INSN_BND), FULL (bnd) FAST (bnd) },
  { TYPE (INSN_BN), IDX (INSN_BN), FULL (bn) FAST (bn) },
  { TYPE (INSN_BPD), IDX (INSN_BPD), FULL (bpd) FAST (bpd) },
  { TYPE (INSN_BP), IDX (INSN_BP), FULL (bp) FAST (bp) },
  { TYPE (INSN_BVD), IDX (INSN_BVD), FULL (bvd) FAST (bvd) },
  { TYPE (INSN_BV), IDX (INSN_BV), FULL (bv) FAST (bv) },
  { TYPE (INSN_BNVD), IDX (INSN_BNVD), FULL (bnvd) FAST (bnvd) },
  { TYPE (INSN_BNV), IDX (INSN_BNV), FULL (bnv) FAST (bnv) },
  { TYPE (INSN_BLTD), IDX (INSN_BLTD), FULL (bltd) FAST (bltd) },
  { TYPE (INSN_BLT), IDX (INSN_BLT), FULL (blt) FAST (blt) },
  { TYPE (INSN_BGED), IDX (INSN_BGED), FULL (bged) FAST (bged) },
  { TYPE (INSN_BGE), IDX (INSN_BGE), FULL (bge) FAST (bge) },
  { TYPE (INSN_BLED), IDX (INSN_BLED), FULL (bled) FAST (bled) },
  { TYPE (INSN_BLE), IDX (INSN_BLE), FULL (ble) FAST (ble) },
  { TYPE (INSN_BGTD), IDX (INSN_BGTD), FULL (bgtd) FAST (bgtd) },
  { TYPE (INSN_BGT), IDX (INSN_BGT), FULL (bgt) FAST (bgt) },
  { TYPE (INSN_BLSD), IDX (INSN_BLSD), FULL (blsd) FAST (blsd) },
  { TYPE (INSN_BLS), IDX (INSN_BLS), FULL (bls) FAST (bls) },
  { TYPE (INSN_BHID), IDX (INSN_BHID), FULL (bhid) FAST (bhid) },
  { TYPE (INSN_BHI), IDX (INSN_BHI), FULL (bhi) FAST (bhi) },
  { TYPE (INSN_DMOVR13), IDX (INSN_DMOVR13), FULL (dmovr13) FAST (dmovr13) },
  { TYPE (INSN_DMOVR13H), IDX (INSN_DMOVR13H), FULL (dmovr13h) FAST (dmovr13h) },
  { TYPE (INSN_DMOVR13B), IDX (INSN_DMOVR13B), FULL (dmovr13b) FAST (dmovr13b) },
  { TYPE (INSN_DMOVR13PI), IDX (INSN_DMOVR13PI), FULL (dmovr13pi) FAST (dmovr13pi) },
  { TYPE (INSN_DMOVR13PIH), IDX (INSN_DMOVR13PIH), FULL (dmovr13pih) FAST (dmovr13pih) },
  { TYPE (INSN_DMOVR13PIB), IDX (INSN_DMOVR13PIB), FULL (dmovr13pib) FAST (dmovr13pib) },
  { TYPE (INSN_DMOVR15PI), IDX (INSN_DMOVR15PI), FULL (dmovr15pi) FAST (dmovr15pi) },
  { TYPE (INSN_DMOV2R13), IDX (INSN_DMOV2R13), FULL (dmov2r13) FAST (dmov2r13) },
  { TYPE (INSN_DMOV2R13H), IDX (INSN_DMOV2R13H), FULL (dmov2r13h) FAST (dmov2r13h) },
  { TYPE (INSN_DMOV2R13B), IDX (INSN_DMOV2R13B), FULL (dmov2r13b) FAST (dmov2r13b) },
  { TYPE (INSN_DMOV2R13PI), IDX (INSN_DMOV2R13PI), FULL (dmov2r13pi) FAST (dmov2r13pi) },
  { TYPE (INSN_DMOV2R13PIH), IDX (INSN_DMOV2R13PIH), FULL (dmov2r13pih) FAST (dmov2r13pih) },
  { TYPE (INSN_DMOV2R13PIB), IDX (INSN_DMOV2R13PIB), FULL (dmov2r13pib) FAST (dmov2r13pib) },
  { TYPE (INSN_DMOV2R15PD), IDX (INSN_DMOV2R15PD), FULL (dmov2r15pd) FAST (dmov2r15pd) },
  { TYPE (INSN_LDRES), IDX (INSN_LDRES), FULL (ldres) FAST (ldres) },
  { TYPE (INSN_STRES), IDX (INSN_STRES), FULL (stres) FAST (stres) },
  { TYPE (INSN_COPOP), IDX (INSN_COPOP), FULL (copop) FAST (copop) },
  { TYPE (INSN_COPLD), IDX (INSN_COPLD), FULL (copld) FAST (copld) },
  { TYPE (INSN_COPST), IDX (INSN_COPST), FULL (copst) FAST (copst) },
  { TYPE (INSN_COPSV), IDX (INSN_COPSV), FULL (copsv) FAST (copsv) },
  { TYPE (INSN_NOP), IDX (INSN_NOP), FULL (nop) FAST (nop) },
  { TYPE (INSN_ANDCCR), IDX (INSN_ANDCCR), FULL (andccr) FAST (andccr) },
  { TYPE (INSN_ORCCR), IDX (INSN_ORCCR), FULL (orccr) FAST (orccr) },
  { TYPE (INSN_STILM), IDX (INSN_STILM), FULL (stilm) FAST (stilm) },
  { TYPE (INSN_ADDSP), IDX (INSN_ADDSP), FULL (addsp) FAST (addsp) },
  { TYPE (INSN_EXTSB), IDX (INSN_EXTSB), FULL (extsb) FAST (extsb) },
  { TYPE (INSN_EXTUB), IDX (INSN_EXTUB), FULL (extub) FAST (extub) },
  { TYPE (INSN_EXTSH), IDX (INSN_EXTSH), FULL (extsh) FAST (extsh) },
  { TYPE (INSN_EXTUH), IDX (INSN_EXTUH), FULL (extuh) FAST (extuh) },
  { TYPE (INSN_LDM0), IDX (INSN_LDM0), FULL (ldm0) FAST (ldm0) },
  { TYPE (INSN_LDM1), IDX (INSN_LDM1), FULL (ldm1) FAST (ldm1) },
  { TYPE (INSN_STM0), IDX (INSN_STM0), FULL (stm0) FAST (stm0) },
  { TYPE (INSN_STM1), IDX (INSN_STM1), FULL (stm1) FAST (stm1) },
  { TYPE (INSN_ENTER), IDX (INSN_ENTER), FULL (enter) FAST (enter) },
  { TYPE (INSN_LEAVE), IDX (INSN_LEAVE), FULL (leave) FAST (leave) },
  { TYPE (INSN_XCHB), IDX (INSN_XCHB), FULL (xchb) FAST (xchb) },
d216 2
a217 3
static const struct insn_sem fr30bf_insn_sem_invalid =
{
  VIRTUAL_INSN_X_INVALID, IDX (INSN_X_INVALID), FULL (x_invalid) FAST (x_invalid)
a219 3
#undef IDX
#undef TYPE

d228 1
d236 1
a236 6
#if ! WITH_SEM_SWITCH_FULL
  id->sem_full = t->sem_full;
#endif
#if WITH_FAST && ! WITH_SEM_SWITCH_FAST
  id->sem_fast = t->sem_fast;
#endif
d244 2
a275 58
/* Enum declaration for all instruction semantic formats.  */
typedef enum sfmt {
  FMT_EMPTY, FMT_ADD, FMT_ADDI, FMT_ADD2
 , FMT_ADDC, FMT_ADDN, FMT_ADDNI, FMT_ADDN2
 , FMT_CMP, FMT_CMPI, FMT_CMP2, FMT_AND
 , FMT_ANDM, FMT_ANDH, FMT_ANDB, FMT_BANDL
 , FMT_BTSTL, FMT_MUL, FMT_MULU, FMT_MULH
 , FMT_DIV0S, FMT_DIV0U, FMT_DIV1, FMT_DIV2
 , FMT_DIV3, FMT_DIV4S, FMT_LSL, FMT_LSLI
 , FMT_LDI8, FMT_LDI20, FMT_LDI32, FMT_LD
 , FMT_LDUH, FMT_LDUB, FMT_LDR13, FMT_LDR13UH
 , FMT_LDR13UB, FMT_LDR14, FMT_LDR14UH, FMT_LDR14UB
 , FMT_LDR15, FMT_LDR15GR, FMT_LDR15DR, FMT_LDR15PS
 , FMT_ST, FMT_STH, FMT_STB, FMT_STR13
 , FMT_STR13H, FMT_STR13B, FMT_STR14, FMT_STR14H
 , FMT_STR14B, FMT_STR15, FMT_STR15GR, FMT_STR15DR
 , FMT_STR15PS, FMT_MOV, FMT_MOVDR, FMT_MOVPS
 , FMT_MOV2DR, FMT_MOV2PS, FMT_JMP, FMT_CALLR
 , FMT_CALL, FMT_RET, FMT_INT, FMT_INTE
 , FMT_RETI, FMT_BRAD, FMT_BNOD, FMT_BEQD
 , FMT_BCD, FMT_BND, FMT_BVD, FMT_BLTD
 , FMT_BLED, FMT_BLSD, FMT_DMOVR13, FMT_DMOVR13H
 , FMT_DMOVR13B, FMT_DMOVR13PI, FMT_DMOVR13PIH, FMT_DMOVR13PIB
 , FMT_DMOVR15PI, FMT_DMOV2R13, FMT_DMOV2R13H, FMT_DMOV2R13B
 , FMT_DMOV2R13PI, FMT_DMOV2R13PIH, FMT_DMOV2R13PIB, FMT_DMOV2R15PD
 , FMT_LDRES, FMT_COPOP, FMT_COPLD, FMT_COPST
 , FMT_NOP, FMT_ANDCCR, FMT_STILM, FMT_ADDSP
 , FMT_EXTSB, FMT_EXTUB, FMT_EXTSH, FMT_EXTUH
 , FMT_LDM0, FMT_LDM1, FMT_STM0, FMT_STM1
 , FMT_ENTER, FMT_LEAVE, FMT_XCHB
} SFMT;

/* The decoder uses this to record insns and direct extraction handling.  */

typedef struct {
  const IDESC *idesc;
#ifdef __GNUC__
  void *sfmt;
#else
  enum sfmt sfmt;
#endif
} DECODE_DESC;

/* Macro to go from decode phase to extraction phase.  */

#ifdef __GNUC__
#define GOTO_EXTRACT(id) goto *(id)->sfmt
#else
#define GOTO_EXTRACT(id) goto extract
#endif

/* The decoder needs a slightly different computed goto switch control.  */
#ifdef __GNUC__
#define DECODE_SWITCH(N, X) goto *labels_##N[X];
#else
#define DECODE_SWITCH(N, X) switch (X)
#endif

d283 2
a284 2
  /* Result of decoder, used by extractor.  */
  const DECODE_DESC *idecode;
d286 2
a287 1
  /* First decode the instruction.  */
d289 12
a300 212
  {
#define I(insn) & fr30bf_insn_data[CONCAT2 (FR30BF_,insn)]
#ifdef __GNUC__
#define E(fmt) && case_ex_##fmt
#else
#define E(fmt) fmt
#endif
    CGEN_INSN_INT insn = base_insn;
    static const DECODE_DESC idecode_invalid = { I (INSN_X_INVALID), E (FMT_EMPTY) };

    {
#ifdef __GNUC__
      static const void *labels_0[256] = {
        && default_0, && default_0, && default_0, && default_0, 
        && default_0, && default_0, && default_0, && case_0_7, 
        && default_0, && default_0, && default_0, && default_0, 
        && default_0, && default_0, && default_0, && default_0, 
        && default_0, && default_0, && default_0, && default_0, 
        && default_0, && default_0, && default_0, && case_0_23, 
        && default_0, && default_0, && default_0, && default_0, 
        && default_0, && default_0, && default_0, && default_0, 
        && default_0, && default_0, && default_0, && default_0, 
        && default_0, && default_0, && default_0, && default_0, 
        && default_0, && default_0, && default_0, && default_0, 
        && default_0, && default_0, && default_0, && default_0, 
        && default_0, && default_0, && default_0, && default_0, 
        && default_0, && default_0, && default_0, && default_0, 
        && default_0, && default_0, && default_0, && default_0, 
        && default_0, && default_0, && default_0, && default_0, 
        && default_0, && default_0, && default_0, && default_0, 
        && default_0, && default_0, && default_0, && default_0, 
        && default_0, && default_0, && default_0, && default_0, 
        && default_0, && default_0, && default_0, && default_0, 
        && default_0, && default_0, && default_0, && default_0, 
        && default_0, && default_0, && default_0, && default_0, 
        && default_0, && default_0, && default_0, && default_0, 
        && default_0, && default_0, && default_0, && default_0, 
        && default_0, && default_0, && default_0, && default_0, 
        && default_0, && default_0, && default_0, && default_0, 
        && default_0, && default_0, && default_0, && default_0, 
        && default_0, && default_0, && default_0, && default_0, 
        && default_0, && default_0, && default_0, && default_0, 
        && default_0, && default_0, && default_0, && default_0, 
        && default_0, && default_0, && default_0, && default_0, 
        && default_0, && default_0, && default_0, && default_0, 
        && default_0, && default_0, && default_0, && default_0, 
        && default_0, && default_0, && default_0, && default_0, 
        && default_0, && default_0, && default_0, && default_0, 
        && default_0, && default_0, && default_0, && default_0, 
        && default_0, && default_0, && default_0, && default_0, 
        && default_0, && default_0, && default_0, && case_0_151, 
        && default_0, && default_0, && default_0, && default_0, 
        && default_0, && default_0, && default_0, && case_0_159, 
        && default_0, && default_0, && default_0, && default_0, 
        && default_0, && default_0, && default_0, && default_0, 
        && default_0, && default_0, && default_0, && default_0, 
        && default_0, && default_0, && default_0, && default_0, 
        && default_0, && default_0, && default_0, && default_0, 
        && default_0, && default_0, && default_0, && default_0, 
        && default_0, && default_0, && default_0, && default_0, 
        && default_0, && default_0, && default_0, && default_0, 
        && default_0, && default_0, && default_0, && default_0, 
        && default_0, && default_0, && default_0, && default_0, 
        && default_0, && default_0, && default_0, && default_0, 
        && default_0, && default_0, && default_0, && default_0, 
        && default_0, && default_0, && default_0, && default_0, 
        && default_0, && default_0, && default_0, && default_0, 
        && default_0, && default_0, && default_0, && default_0, 
        && default_0, && default_0, && default_0, && default_0, 
        && default_0, && default_0, && default_0, && default_0, 
        && default_0, && default_0, && default_0, && default_0, 
        && default_0, && default_0, && default_0, && default_0, 
        && default_0, && default_0, && default_0, && default_0, 
        && default_0, && default_0, && default_0, && default_0, 
        && default_0, && default_0, && default_0, && default_0, 
        && default_0, && default_0, && default_0, && default_0, 
        && default_0, && default_0, && default_0, && default_0, 
      };
#endif
      static const DECODE_DESC insns[256] = {
        { I (INSN_LDR13), E (FMT_LDR13) }, { I (INSN_LDR13UH), E (FMT_LDR13UH) }, 
        { I (INSN_LDR13UB), E (FMT_LDR13UB) }, { I (INSN_LDR15), E (FMT_LDR15) }, 
        { I (INSN_LD), E (FMT_LD) }, { I (INSN_LDUH), E (FMT_LDUH) }, 
        { I (INSN_LDUB), E (FMT_LDUB) }, { 0 }, 
        { I (INSN_DMOV2R13), E (FMT_DMOV2R13) }, { I (INSN_DMOV2R13H), E (FMT_DMOV2R13H) }, 
        { I (INSN_DMOV2R13B), E (FMT_DMOV2R13B) }, { I (INSN_DMOV2R15PD), E (FMT_DMOV2R15PD) }, 
        { I (INSN_DMOV2R13PI), E (FMT_DMOV2R13PI) }, { I (INSN_DMOV2R13PIH), E (FMT_DMOV2R13PIH) }, 
        { I (INSN_DMOV2R13PIB), E (FMT_DMOV2R13PIB) }, { I (INSN_ENTER), E (FMT_ENTER) }, 
        { I (INSN_STR13), E (FMT_STR13) }, { I (INSN_STR13H), E (FMT_STR13H) }, 
        { I (INSN_STR13B), E (FMT_STR13B) }, { I (INSN_STR15), E (FMT_STR15) }, 
        { I (INSN_ST), E (FMT_ST) }, { I (INSN_STH), E (FMT_STH) }, 
        { I (INSN_STB), E (FMT_STB) }, { 0 }, 
        { I (INSN_DMOVR13), E (FMT_DMOVR13) }, { I (INSN_DMOVR13H), E (FMT_DMOVR13H) }, 
        { I (INSN_DMOVR13B), E (FMT_DMOVR13B) }, { I (INSN_DMOVR15PI), E (FMT_DMOVR15PI) }, 
        { I (INSN_DMOVR13PI), E (FMT_DMOVR13PI) }, { I (INSN_DMOVR13PIH), E (FMT_DMOVR13PIH) }, 
        { I (INSN_DMOVR13PIB), E (FMT_DMOVR13PIB) }, { I (INSN_INT), E (FMT_INT) }, 
        { I (INSN_LDR14), E (FMT_LDR14) }, { I (INSN_LDR14), E (FMT_LDR14) }, 
        { I (INSN_LDR14), E (FMT_LDR14) }, { I (INSN_LDR14), E (FMT_LDR14) }, 
        { I (INSN_LDR14), E (FMT_LDR14) }, { I (INSN_LDR14), E (FMT_LDR14) }, 
        { I (INSN_LDR14), E (FMT_LDR14) }, { I (INSN_LDR14), E (FMT_LDR14) }, 
        { I (INSN_LDR14), E (FMT_LDR14) }, { I (INSN_LDR14), E (FMT_LDR14) }, 
        { I (INSN_LDR14), E (FMT_LDR14) }, { I (INSN_LDR14), E (FMT_LDR14) }, 
        { I (INSN_LDR14), E (FMT_LDR14) }, { I (INSN_LDR14), E (FMT_LDR14) }, 
        { I (INSN_LDR14), E (FMT_LDR14) }, { I (INSN_LDR14), E (FMT_LDR14) }, 
        { I (INSN_STR14), E (FMT_STR14) }, { I (INSN_STR14), E (FMT_STR14) }, 
        { I (INSN_STR14), E (FMT_STR14) }, { I (INSN_STR14), E (FMT_STR14) }, 
        { I (INSN_STR14), E (FMT_STR14) }, { I (INSN_STR14), E (FMT_STR14) }, 
        { I (INSN_STR14), E (FMT_STR14) }, { I (INSN_STR14), E (FMT_STR14) }, 
        { I (INSN_STR14), E (FMT_STR14) }, { I (INSN_STR14), E (FMT_STR14) }, 
        { I (INSN_STR14), E (FMT_STR14) }, { I (INSN_STR14), E (FMT_STR14) }, 
        { I (INSN_STR14), E (FMT_STR14) }, { I (INSN_STR14), E (FMT_STR14) }, 
        { I (INSN_STR14), E (FMT_STR14) }, { I (INSN_STR14), E (FMT_STR14) }, 
        { I (INSN_LDR14UH), E (FMT_LDR14UH) }, { I (INSN_LDR14UH), E (FMT_LDR14UH) }, 
        { I (INSN_LDR14UH), E (FMT_LDR14UH) }, { I (INSN_LDR14UH), E (FMT_LDR14UH) }, 
        { I (INSN_LDR14UH), E (FMT_LDR14UH) }, { I (INSN_LDR14UH), E (FMT_LDR14UH) }, 
        { I (INSN_LDR14UH), E (FMT_LDR14UH) }, { I (INSN_LDR14UH), E (FMT_LDR14UH) }, 
        { I (INSN_LDR14UH), E (FMT_LDR14UH) }, { I (INSN_LDR14UH), E (FMT_LDR14UH) }, 
        { I (INSN_LDR14UH), E (FMT_LDR14UH) }, { I (INSN_LDR14UH), E (FMT_LDR14UH) }, 
        { I (INSN_LDR14UH), E (FMT_LDR14UH) }, { I (INSN_LDR14UH), E (FMT_LDR14UH) }, 
        { I (INSN_LDR14UH), E (FMT_LDR14UH) }, { I (INSN_LDR14UH), E (FMT_LDR14UH) }, 
        { I (INSN_STR14H), E (FMT_STR14H) }, { I (INSN_STR14H), E (FMT_STR14H) }, 
        { I (INSN_STR14H), E (FMT_STR14H) }, { I (INSN_STR14H), E (FMT_STR14H) }, 
        { I (INSN_STR14H), E (FMT_STR14H) }, { I (INSN_STR14H), E (FMT_STR14H) }, 
        { I (INSN_STR14H), E (FMT_STR14H) }, { I (INSN_STR14H), E (FMT_STR14H) }, 
        { I (INSN_STR14H), E (FMT_STR14H) }, { I (INSN_STR14H), E (FMT_STR14H) }, 
        { I (INSN_STR14H), E (FMT_STR14H) }, { I (INSN_STR14H), E (FMT_STR14H) }, 
        { I (INSN_STR14H), E (FMT_STR14H) }, { I (INSN_STR14H), E (FMT_STR14H) }, 
        { I (INSN_STR14H), E (FMT_STR14H) }, { I (INSN_STR14H), E (FMT_STR14H) }, 
        { I (INSN_LDR14UB), E (FMT_LDR14UB) }, { I (INSN_LDR14UB), E (FMT_LDR14UB) }, 
        { I (INSN_LDR14UB), E (FMT_LDR14UB) }, { I (INSN_LDR14UB), E (FMT_LDR14UB) }, 
        { I (INSN_LDR14UB), E (FMT_LDR14UB) }, { I (INSN_LDR14UB), E (FMT_LDR14UB) }, 
        { I (INSN_LDR14UB), E (FMT_LDR14UB) }, { I (INSN_LDR14UB), E (FMT_LDR14UB) }, 
        { I (INSN_LDR14UB), E (FMT_LDR14UB) }, { I (INSN_LDR14UB), E (FMT_LDR14UB) }, 
        { I (INSN_LDR14UB), E (FMT_LDR14UB) }, { I (INSN_LDR14UB), E (FMT_LDR14UB) }, 
        { I (INSN_LDR14UB), E (FMT_LDR14UB) }, { I (INSN_LDR14UB), E (FMT_LDR14UB) }, 
        { I (INSN_LDR14UB), E (FMT_LDR14UB) }, { I (INSN_LDR14UB), E (FMT_LDR14UB) }, 
        { I (INSN_STR14B), E (FMT_STR14B) }, { I (INSN_STR14B), E (FMT_STR14B) }, 
        { I (INSN_STR14B), E (FMT_STR14B) }, { I (INSN_STR14B), E (FMT_STR14B) }, 
        { I (INSN_STR14B), E (FMT_STR14B) }, { I (INSN_STR14B), E (FMT_STR14B) }, 
        { I (INSN_STR14B), E (FMT_STR14B) }, { I (INSN_STR14B), E (FMT_STR14B) }, 
        { I (INSN_STR14B), E (FMT_STR14B) }, { I (INSN_STR14B), E (FMT_STR14B) }, 
        { I (INSN_STR14B), E (FMT_STR14B) }, { I (INSN_STR14B), E (FMT_STR14B) }, 
        { I (INSN_STR14B), E (FMT_STR14B) }, { I (INSN_STR14B), E (FMT_STR14B) }, 
        { I (INSN_STR14B), E (FMT_STR14B) }, { I (INSN_STR14B), E (FMT_STR14B) }, 
        { I (INSN_BANDL), E (FMT_BANDL) }, { I (INSN_BANDH), E (FMT_BANDL) }, 
        { I (INSN_AND), E (FMT_AND) }, { I (INSN_ANDCCR), E (FMT_ANDCCR) }, 
        { I (INSN_ANDM), E (FMT_ANDM) }, { I (INSN_ANDH), E (FMT_ANDH) }, 
        { I (INSN_ANDB), E (FMT_ANDB) }, { I (INSN_STILM), E (FMT_STILM) }, 
        { I (INSN_BTSTL), E (FMT_BTSTL) }, { I (INSN_BTSTH), E (FMT_BTSTL) }, 
        { I (INSN_XCHB), E (FMT_XCHB) }, { I (INSN_MOV), E (FMT_MOV) }, 
        { I (INSN_LDM0), E (FMT_LDM0) }, { I (INSN_LDM1), E (FMT_LDM1) }, 
        { I (INSN_STM0), E (FMT_STM0) }, { I (INSN_STM1), E (FMT_STM1) }, 
        { I (INSN_BORL), E (FMT_BANDL) }, { I (INSN_BORH), E (FMT_BANDL) }, 
        { I (INSN_OR), E (FMT_AND) }, { I (INSN_ORCCR), E (FMT_ANDCCR) }, 
        { I (INSN_ORM), E (FMT_ANDM) }, { I (INSN_ORH), E (FMT_ANDH) }, 
        { I (INSN_ORB), E (FMT_ANDB) }, { 0 }, 
        { I (INSN_BEORL), E (FMT_BANDL) }, { I (INSN_BEORH), E (FMT_BANDL) }, 
        { I (INSN_EOR), E (FMT_AND) }, { I (INSN_LDI20), E (FMT_LDI20) }, 
        { I (INSN_EORM), E (FMT_ANDM) }, { I (INSN_EORH), E (FMT_ANDH) }, 
        { I (INSN_EORB), E (FMT_ANDB) }, { 0 }, 
        { I (INSN_ADDNI), E (FMT_ADDNI) }, { I (INSN_ADDN2), E (FMT_ADDN2) }, 
        { I (INSN_ADDN), E (FMT_ADDN) }, { I (INSN_ADDSP), E (FMT_ADDSP) }, 
        { I (INSN_ADDI), E (FMT_ADDI) }, { I (INSN_ADD2), E (FMT_ADD2) }, 
        { I (INSN_ADD), E (FMT_ADD) }, { I (INSN_ADDC), E (FMT_ADDC) }, 
        { I (INSN_CMPI), E (FMT_CMPI) }, { I (INSN_CMP2), E (FMT_CMP2) }, 
        { I (INSN_CMP), E (FMT_CMP) }, { I (INSN_MULU), E (FMT_MULU) }, 
        { I (INSN_SUB), E (FMT_ADD) }, { I (INSN_SUBC), E (FMT_ADDC) }, 
        { I (INSN_SUBN), E (FMT_ADDN) }, { I (INSN_MUL), E (FMT_MUL) }, 
        { I (INSN_LSRI), E (FMT_LSLI) }, { I (INSN_LSR2), E (FMT_LSLI) }, 
        { I (INSN_LSR), E (FMT_LSL) }, { I (INSN_MOV2DR), E (FMT_MOV2DR) }, 
        { I (INSN_LSLI), E (FMT_LSLI) }, { I (INSN_LSL2), E (FMT_LSLI) }, 
        { I (INSN_LSL), E (FMT_LSL) }, { I (INSN_MOVDR), E (FMT_MOVDR) }, 
        { I (INSN_ASRI), E (FMT_LSLI) }, { I (INSN_ASR2), E (FMT_LSLI) }, 
        { I (INSN_ASR), E (FMT_LSL) }, { I (INSN_MULUH), E (FMT_MULH) }, 
        { I (INSN_LDRES), E (FMT_LDRES) }, { I (INSN_STRES), E (FMT_LDRES) }, 
        { I (INSN_X_INVALID), E (FMT_EMPTY) }, { I (INSN_MULH), E (FMT_MULH) }, 
        { I (INSN_LDI8), E (FMT_LDI8) }, { I (INSN_LDI8), E (FMT_LDI8) }, 
        { I (INSN_LDI8), E (FMT_LDI8) }, { I (INSN_LDI8), E (FMT_LDI8) }, 
        { I (INSN_LDI8), E (FMT_LDI8) }, { I (INSN_LDI8), E (FMT_LDI8) }, 
        { I (INSN_LDI8), E (FMT_LDI8) }, { I (INSN_LDI8), E (FMT_LDI8) }, 
        { I (INSN_LDI8), E (FMT_LDI8) }, { I (INSN_LDI8), E (FMT_LDI8) }, 
        { I (INSN_LDI8), E (FMT_LDI8) }, { I (INSN_LDI8), E (FMT_LDI8) }, 
        { I (INSN_LDI8), E (FMT_LDI8) }, { I (INSN_LDI8), E (FMT_LDI8) }, 
        { I (INSN_LDI8), E (FMT_LDI8) }, { I (INSN_LDI8), E (FMT_LDI8) }, 
        { I (INSN_CALL), E (FMT_CALL) }, { I (INSN_CALL), E (FMT_CALL) }, 
        { I (INSN_CALL), E (FMT_CALL) }, { I (INSN_CALL), E (FMT_CALL) }, 
        { I (INSN_CALL), E (FMT_CALL) }, { I (INSN_CALL), E (FMT_CALL) }, 
        { I (INSN_CALL), E (FMT_CALL) }, { I (INSN_CALL), E (FMT_CALL) }, 
        { I (INSN_CALLD), E (FMT_CALL) }, { I (INSN_CALLD), E (FMT_CALL) }, 
        { I (INSN_CALLD), E (FMT_CALL) }, { I (INSN_CALLD), E (FMT_CALL) }, 
        { I (INSN_CALLD), E (FMT_CALL) }, { I (INSN_CALLD), E (FMT_CALL) }, 
        { I (INSN_CALLD), E (FMT_CALL) }, { I (INSN_CALLD), E (FMT_CALL) }, 
        { I (INSN_BRA), E (FMT_BRAD) }, { I (INSN_BNO), E (FMT_BNOD) }, 
        { I (INSN_BEQ), E (FMT_BEQD) }, { I (INSN_BNE), E (FMT_BEQD) }, 
        { I (INSN_BC), E (FMT_BCD) }, { I (INSN_BNC), E (FMT_BCD) }, 
        { I (INSN_BN), E (FMT_BND) }, { I (INSN_BP), E (FMT_BND) }, 
        { I (INSN_BV), E (FMT_BVD) }, { I (INSN_BNV), E (FMT_BVD) }, 
        { I (INSN_BLT), E (FMT_BLTD) }, { I (INSN_BGE), E (FMT_BLTD) }, 
        { I (INSN_BLE), E (FMT_BLED) }, { I (INSN_BGT), E (FMT_BLED) }, 
        { I (INSN_BLS), E (FMT_BLSD) }, { I (INSN_BHI), E (FMT_BLSD) }, 
        { I (INSN_BRAD), E (FMT_BRAD) }, { I (INSN_BNOD), E (FMT_BNOD) }, 
        { I (INSN_BEQD), E (FMT_BEQD) }, { I (INSN_BNED), E (FMT_BEQD) }, 
        { I (INSN_BCD), E (FMT_BCD) }, { I (INSN_BNCD), E (FMT_BCD) }, 
        { I (INSN_BND), E (FMT_BND) }, { I (INSN_BPD), E (FMT_BND) }, 
        { I (INSN_BVD), E (FMT_BVD) }, { I (INSN_BNVD), E (FMT_BVD) }, 
        { I (INSN_BLTD), E (FMT_BLTD) }, { I (INSN_BGED), E (FMT_BLTD) }, 
        { I (INSN_BLED), E (FMT_BLED) }, { I (INSN_BGTD), E (FMT_BLED) }, 
        { I (INSN_BLSD), E (FMT_BLSD) }, { I (INSN_BHID), E (FMT_BLSD) }, 
      };
      unsigned int val;
      val = (((insn >> 8) & (255 << 0)));
      DECODE_SWITCH (0, val)
d302 2
a303 1
        CASE (0, 7) :
d305 5
a309 13
            static const DECODE_DESC insns[16] = {
              { I (INSN_LDR15GR), E (FMT_LDR15GR) }, { I (INSN_MOV2PS), E (FMT_MOV2PS) }, 
              { I (INSN_X_INVALID), E (FMT_EMPTY) }, { I (INSN_X_INVALID), E (FMT_EMPTY) }, 
              { I (INSN_X_INVALID), E (FMT_EMPTY) }, { I (INSN_X_INVALID), E (FMT_EMPTY) }, 
              { I (INSN_X_INVALID), E (FMT_EMPTY) }, { I (INSN_X_INVALID), E (FMT_EMPTY) }, 
              { I (INSN_LDR15DR), E (FMT_LDR15DR) }, { I (INSN_LDR15PS), E (FMT_LDR15PS) }, 
              { I (INSN_X_INVALID), E (FMT_EMPTY) }, { I (INSN_X_INVALID), E (FMT_EMPTY) }, 
              { I (INSN_X_INVALID), E (FMT_EMPTY) }, { I (INSN_X_INVALID), E (FMT_EMPTY) }, 
              { I (INSN_X_INVALID), E (FMT_EMPTY) }, { I (INSN_X_INVALID), E (FMT_EMPTY) }, 
            };
            unsigned int val = (((insn >> 4) & (15 << 0)));
            idecode = &insns[val];
            GOTO_EXTRACT (idecode);
d311 20
a330 1
        CASE (0, 23) :
d332 5
a336 13
            static const DECODE_DESC insns[16] = {
              { I (INSN_STR15GR), E (FMT_STR15GR) }, { I (INSN_MOVPS), E (FMT_MOVPS) }, 
              { I (INSN_X_INVALID), E (FMT_EMPTY) }, { I (INSN_X_INVALID), E (FMT_EMPTY) }, 
              { I (INSN_X_INVALID), E (FMT_EMPTY) }, { I (INSN_X_INVALID), E (FMT_EMPTY) }, 
              { I (INSN_X_INVALID), E (FMT_EMPTY) }, { I (INSN_X_INVALID), E (FMT_EMPTY) }, 
              { I (INSN_STR15DR), E (FMT_STR15DR) }, { I (INSN_STR15PS), E (FMT_STR15PS) }, 
              { I (INSN_X_INVALID), E (FMT_EMPTY) }, { I (INSN_X_INVALID), E (FMT_EMPTY) }, 
              { I (INSN_X_INVALID), E (FMT_EMPTY) }, { I (INSN_X_INVALID), E (FMT_EMPTY) }, 
              { I (INSN_X_INVALID), E (FMT_EMPTY) }, { I (INSN_X_INVALID), E (FMT_EMPTY) }, 
            };
            unsigned int val = (((insn >> 4) & (15 << 0)));
            idecode = &insns[val];
            GOTO_EXTRACT (idecode);
d338 132
a469 1
        CASE (0, 151) :
d471 13
a483 13
            static const DECODE_DESC insns[16] = {
              { I (INSN_JMP), E (FMT_JMP) }, { I (INSN_CALLR), E (FMT_CALLR) }, 
              { I (INSN_RET), E (FMT_RET) }, { I (INSN_RETI), E (FMT_RETI) }, 
              { I (INSN_DIV0S), E (FMT_DIV0S) }, { I (INSN_DIV0U), E (FMT_DIV0U) }, 
              { I (INSN_DIV1), E (FMT_DIV1) }, { I (INSN_DIV2), E (FMT_DIV2) }, 
              { I (INSN_EXTSB), E (FMT_EXTSB) }, { I (INSN_EXTUB), E (FMT_EXTUB) }, 
              { I (INSN_EXTSH), E (FMT_EXTSH) }, { I (INSN_EXTUH), E (FMT_EXTUH) }, 
              { I (INSN_X_INVALID), E (FMT_EMPTY) }, { I (INSN_X_INVALID), E (FMT_EMPTY) }, 
              { I (INSN_X_INVALID), E (FMT_EMPTY) }, { I (INSN_X_INVALID), E (FMT_EMPTY) }, 
            };
            unsigned int val = (((insn >> 4) & (15 << 0)));
            idecode = &insns[val];
            GOTO_EXTRACT (idecode);
d485 12
a496 1
        CASE (0, 159) :
d498 14
a511 13
            static const DECODE_DESC insns[16] = {
              { I (INSN_JMPD), E (FMT_JMP) }, { I (INSN_CALLRD), E (FMT_CALLR) }, 
              { I (INSN_RET_D), E (FMT_RET) }, { I (INSN_INTE), E (FMT_INTE) }, 
              { I (INSN_X_INVALID), E (FMT_EMPTY) }, { I (INSN_X_INVALID), E (FMT_EMPTY) }, 
              { I (INSN_DIV3), E (FMT_DIV3) }, { I (INSN_DIV4S), E (FMT_DIV4S) }, 
              { I (INSN_LDI32), E (FMT_LDI32) }, { I (INSN_LEAVE), E (FMT_LEAVE) }, 
              { I (INSN_NOP), E (FMT_NOP) }, { I (INSN_X_INVALID), E (FMT_EMPTY) }, 
              { I (INSN_COPOP), E (FMT_COPOP) }, { I (INSN_COPLD), E (FMT_COPLD) }, 
              { I (INSN_COPST), E (FMT_COPST) }, { I (INSN_COPSV), E (FMT_COPST) }, 
            };
            unsigned int val = (((insn >> 4) & (15 << 0)));
            idecode = &insns[val];
            GOTO_EXTRACT (idecode);
a512 3
        DEFAULT (0) :
          idecode = &insns[val];
          GOTO_EXTRACT (idecode);
d514 97
a610 1
      ENDSWITCH (0)
a611 2
#undef I
#undef E
d616 1
a616 8
 extract:
  {
#ifndef __GNUC__
    switch (idecode->sfmt)
#endif
      {

  CASE (ex, FMT_EMPTY) :
d618 1
a620 1
  EXTRACT_IFMT_EMPTY_VARS /* */
a621 1
  EXTRACT_IFMT_EMPTY_CODE
d624 1
a624 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_empty", (char *) 0));
d627 1
a627 1
  BREAK (ex);
d630 1
a630 1
  CASE (ex, FMT_ADD) :
d632 1
d634 3
a636 2
#define FLD(f) abuf->fields.fmt_add.f
  EXTRACT_IFMT_ADD_VARS /* f-op1 f-op2 f-Rj f-Ri */
d638 2
a639 1
  EXTRACT_IFMT_ADD_CODE
d642 2
d646 1
a646 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_add", "Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, (char *) 0));
d658 1
a658 1
  BREAK (ex);
d661 1
a661 1
  CASE (ex, FMT_ADDI) :
d663 1
d665 3
a667 2
#define FLD(f) abuf->fields.fmt_addi.f
  EXTRACT_IFMT_ADDI_VARS /* f-op1 f-op2 f-u4 f-Ri */
d669 2
a670 1
  EXTRACT_IFMT_ADDI_CODE
d673 1
d676 1
a676 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_addi", "f_u4 0x%x", 'x', f_u4, "Ri 0x%x", 'x', f_Ri, (char *) 0));
d687 1
a687 1
  BREAK (ex);
d690 1
a690 1
  CASE (ex, FMT_ADD2) :
d692 1
d694 3
a696 2
#define FLD(f) abuf->fields.fmt_add2.f
  EXTRACT_IFMT_ADD2_VARS /* f-op1 f-op2 f-m4 f-Ri */
d698 2
a699 1
  EXTRACT_IFMT_ADD2_CODE
d702 1
d705 1
a705 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_add2", "f_m4 0x%x", 'x', f_m4, "Ri 0x%x", 'x', f_Ri, (char *) 0));
d716 1
a716 1
  BREAK (ex);
d719 1
a719 1
  CASE (ex, FMT_ADDC) :
d721 1
d723 3
a725 2
#define FLD(f) abuf->fields.fmt_addc.f
  EXTRACT_IFMT_ADD_VARS /* f-op1 f-op2 f-Rj f-Ri */
d727 2
a728 1
  EXTRACT_IFMT_ADD_CODE
d731 2
d735 1
a735 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_addc", "Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, (char *) 0));
d747 1
a747 1
  BREAK (ex);
d750 1
a750 1
  CASE (ex, FMT_ADDN) :
d752 1
d754 3
a756 2
#define FLD(f) abuf->fields.fmt_addn.f
  EXTRACT_IFMT_ADD_VARS /* f-op1 f-op2 f-Rj f-Ri */
d758 2
a759 1
  EXTRACT_IFMT_ADD_CODE
d762 2
d766 1
a766 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_addn", "Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, (char *) 0));
d778 1
a778 1
  BREAK (ex);
d781 1
a781 1
  CASE (ex, FMT_ADDNI) :
d783 1
d785 3
a787 2
#define FLD(f) abuf->fields.fmt_addni.f
  EXTRACT_IFMT_ADDI_VARS /* f-op1 f-op2 f-u4 f-Ri */
d789 2
a790 1
  EXTRACT_IFMT_ADDI_CODE
d793 1
d796 1
a796 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_addni", "f_u4 0x%x", 'x', f_u4, "Ri 0x%x", 'x', f_Ri, (char *) 0));
d807 1
a807 1
  BREAK (ex);
d810 1
a810 1
  CASE (ex, FMT_ADDN2) :
d812 1
d814 3
a816 2
#define FLD(f) abuf->fields.fmt_addn2.f
  EXTRACT_IFMT_ADD2_VARS /* f-op1 f-op2 f-m4 f-Ri */
d818 2
a819 1
  EXTRACT_IFMT_ADD2_CODE
d822 1
d825 1
a825 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_addn2", "f_m4 0x%x", 'x', f_m4, "Ri 0x%x", 'x', f_Ri, (char *) 0));
d836 1
a836 1
  BREAK (ex);
d839 1
a839 1
  CASE (ex, FMT_CMP) :
d841 1
d843 3
a845 2
#define FLD(f) abuf->fields.fmt_cmp.f
  EXTRACT_IFMT_ADD_VARS /* f-op1 f-op2 f-Rj f-Ri */
d847 2
a848 1
  EXTRACT_IFMT_ADD_CODE
d851 2
d855 1
a855 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_cmp", "Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, (char *) 0));
d866 1
a866 1
  BREAK (ex);
d869 1
a869 1
  CASE (ex, FMT_CMPI) :
d871 1
d873 3
a875 2
#define FLD(f) abuf->fields.fmt_cmpi.f
  EXTRACT_IFMT_ADDI_VARS /* f-op1 f-op2 f-u4 f-Ri */
d877 2
a878 1
  EXTRACT_IFMT_ADDI_CODE
d881 1
d884 1
a884 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_cmpi", "f_u4 0x%x", 'x', f_u4, "Ri 0x%x", 'x', f_Ri, (char *) 0));
d894 1
a894 1
  BREAK (ex);
d897 1
a897 1
  CASE (ex, FMT_CMP2) :
d899 1
d901 3
a903 2
#define FLD(f) abuf->fields.fmt_cmp2.f
  EXTRACT_IFMT_ADD2_VARS /* f-op1 f-op2 f-m4 f-Ri */
d905 2
a906 1
  EXTRACT_IFMT_ADD2_CODE
d909 1
d912 1
a912 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_cmp2", "f_m4 0x%x", 'x', f_m4, "Ri 0x%x", 'x', f_Ri, (char *) 0));
d922 1
a922 1
  BREAK (ex);
d925 1
a925 1
  CASE (ex, FMT_AND) :
d927 1
d929 3
a931 2
#define FLD(f) abuf->fields.fmt_and.f
  EXTRACT_IFMT_ADD_VARS /* f-op1 f-op2 f-Rj f-Ri */
d933 2
a934 1
  EXTRACT_IFMT_ADD_CODE
d937 2
d941 1
a941 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_and", "Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, (char *) 0));
d953 1
a953 1
  BREAK (ex);
d956 1
a956 1
  CASE (ex, FMT_ANDM) :
d958 1
d960 3
a962 2
#define FLD(f) abuf->fields.fmt_andm.f
  EXTRACT_IFMT_ADD_VARS /* f-op1 f-op2 f-Rj f-Ri */
d964 2
a965 1
  EXTRACT_IFMT_ADD_CODE
d968 2
d972 1
a972 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_andm", "Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, (char *) 0));
d983 1
a983 1
  BREAK (ex);
d986 1
a986 1
  CASE (ex, FMT_ANDH) :
d988 1
d990 3
a992 2
#define FLD(f) abuf->fields.fmt_andh.f
  EXTRACT_IFMT_ADD_VARS /* f-op1 f-op2 f-Rj f-Ri */
d994 2
a995 1
  EXTRACT_IFMT_ADD_CODE
d998 2
d1002 1
a1002 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_andh", "Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, (char *) 0));
d1013 1
a1013 1
  BREAK (ex);
d1016 1
a1016 1
  CASE (ex, FMT_ANDB) :
d1018 1
d1020 3
a1022 2
#define FLD(f) abuf->fields.fmt_andb.f
  EXTRACT_IFMT_ADD_VARS /* f-op1 f-op2 f-Rj f-Ri */
d1024 2
a1025 1
  EXTRACT_IFMT_ADD_CODE
d1028 2
d1032 1
a1032 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_andb", "Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, (char *) 0));
d1043 1
a1043 1
  BREAK (ex);
d1046 1
a1046 1
  CASE (ex, FMT_BANDL) :
d1048 1
d1050 3
a1052 2
#define FLD(f) abuf->fields.fmt_bandl.f
  EXTRACT_IFMT_ADDI_VARS /* f-op1 f-op2 f-u4 f-Ri */
d1054 2
a1055 1
  EXTRACT_IFMT_ADDI_CODE
d1058 1
d1061 1
a1061 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_bandl", "f_u4 0x%x", 'x', f_u4, "Ri 0x%x", 'x', f_Ri, (char *) 0));
d1071 1
a1071 1
  BREAK (ex);
d1074 1
a1074 1
  CASE (ex, FMT_BTSTL) :
d1076 1
d1078 3
a1080 2
#define FLD(f) abuf->fields.fmt_btstl.f
  EXTRACT_IFMT_ADDI_VARS /* f-op1 f-op2 f-u4 f-Ri */
d1082 2
a1083 1
  EXTRACT_IFMT_ADDI_CODE
d1086 1
d1089 1
a1089 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_btstl", "f_u4 0x%x", 'x', f_u4, "Ri 0x%x", 'x', f_Ri, (char *) 0));
d1099 1
a1099 1
  BREAK (ex);
d1102 1
a1102 1
  CASE (ex, FMT_MUL) :
d1104 1
d1106 3
a1108 2
#define FLD(f) abuf->fields.fmt_mul.f
  EXTRACT_IFMT_ADD_VARS /* f-op1 f-op2 f-Rj f-Ri */
d1110 2
a1111 1
  EXTRACT_IFMT_ADD_CODE
d1114 2
d1118 1
a1118 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_mul", "Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, (char *) 0));
d1129 1
a1129 1
  BREAK (ex);
d1132 1
a1132 1
  CASE (ex, FMT_MULU) :
d1134 1
d1136 3
a1138 2
#define FLD(f) abuf->fields.fmt_mulu.f
  EXTRACT_IFMT_ADD_VARS /* f-op1 f-op2 f-Rj f-Ri */
d1140 2
a1141 1
  EXTRACT_IFMT_ADD_CODE
d1144 2
d1148 1
a1148 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_mulu", "Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, (char *) 0));
d1159 1
a1159 1
  BREAK (ex);
d1162 1
a1162 1
  CASE (ex, FMT_MULH) :
d1164 1
d1166 3
a1168 2
#define FLD(f) abuf->fields.fmt_mulh.f
  EXTRACT_IFMT_ADD_VARS /* f-op1 f-op2 f-Rj f-Ri */
d1170 2
a1171 1
  EXTRACT_IFMT_ADD_CODE
d1174 2
d1178 1
a1178 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_mulh", "Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, (char *) 0));
d1189 1
a1189 1
  BREAK (ex);
d1192 1
a1192 1
  CASE (ex, FMT_DIV0S) :
d1194 1
d1196 2
a1197 2
#define FLD(f) abuf->fields.fmt_div0s.f
  EXTRACT_IFMT_DIV0S_VARS /* f-op1 f-op2 f-op3 f-Ri */
d1199 1
a1199 1
  EXTRACT_IFMT_DIV0S_CODE
d1202 1
d1204 1
a1204 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_div0s", "Ri 0x%x", 'x', f_Ri, (char *) 0));
d1214 1
a1214 1
  BREAK (ex);
d1217 1
a1217 1
  CASE (ex, FMT_DIV0U) :
d1219 1
d1221 1
a1221 2
#define FLD(f) abuf->fields.fmt_div0u.f
  EXTRACT_IFMT_DIV0S_VARS /* f-op1 f-op2 f-op3 f-Ri */
a1222 1
  EXTRACT_IFMT_DIV0S_CODE
d1225 1
a1225 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_div0u", (char *) 0));
d1228 1
a1228 1
  BREAK (ex);
d1231 1
a1231 1
  CASE (ex, FMT_DIV1) :
d1233 1
d1235 2
a1236 2
#define FLD(f) abuf->fields.fmt_div1.f
  EXTRACT_IFMT_DIV0S_VARS /* f-op1 f-op2 f-op3 f-Ri */
d1238 1
a1238 1
  EXTRACT_IFMT_DIV0S_CODE
d1241 1
d1243 1
a1243 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_div1", "Ri 0x%x", 'x', f_Ri, (char *) 0));
d1253 1
a1253 1
  BREAK (ex);
d1256 1
a1256 1
  CASE (ex, FMT_DIV2) :
d1258 1
d1260 2
a1261 2
#define FLD(f) abuf->fields.fmt_div2.f
  EXTRACT_IFMT_DIV0S_VARS /* f-op1 f-op2 f-op3 f-Ri */
d1263 1
a1263 1
  EXTRACT_IFMT_DIV0S_CODE
d1266 1
d1268 1
a1268 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_div2", "Ri 0x%x", 'x', f_Ri, (char *) 0));
d1278 1
a1278 1
  BREAK (ex);
d1281 1
a1281 1
  CASE (ex, FMT_DIV3) :
d1283 1
d1285 1
a1285 2
#define FLD(f) abuf->fields.fmt_div3.f
  EXTRACT_IFMT_DIV3_VARS /* f-op1 f-op2 f-op3 f-op4 */
a1286 1
  EXTRACT_IFMT_DIV3_CODE
d1289 1
a1289 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_div3", (char *) 0));
d1292 1
a1292 1
  BREAK (ex);
d1295 1
a1295 1
  CASE (ex, FMT_DIV4S) :
d1297 1
d1299 1
a1299 2
#define FLD(f) abuf->fields.fmt_div4s.f
  EXTRACT_IFMT_DIV3_VARS /* f-op1 f-op2 f-op3 f-op4 */
a1300 1
  EXTRACT_IFMT_DIV3_CODE
d1303 1
a1303 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_div4s", (char *) 0));
d1306 1
a1306 1
  BREAK (ex);
d1309 1
a1309 1
  CASE (ex, FMT_LSL) :
d1311 1
d1313 3
a1315 2
#define FLD(f) abuf->fields.fmt_lsl.f
  EXTRACT_IFMT_ADD_VARS /* f-op1 f-op2 f-Rj f-Ri */
d1317 2
a1318 1
  EXTRACT_IFMT_ADD_CODE
d1321 2
d1325 1
a1325 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_lsl", "Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, (char *) 0));
d1337 1
a1337 1
  BREAK (ex);
d1340 1
a1340 1
  CASE (ex, FMT_LSLI) :
d1342 1
d1344 3
a1346 2
#define FLD(f) abuf->fields.fmt_lsli.f
  EXTRACT_IFMT_ADDI_VARS /* f-op1 f-op2 f-u4 f-Ri */
d1348 2
a1349 1
  EXTRACT_IFMT_ADDI_CODE
d1352 1
d1355 1
a1355 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_lsli", "f_u4 0x%x", 'x', f_u4, "Ri 0x%x", 'x', f_Ri, (char *) 0));
d1366 1
a1366 1
  BREAK (ex);
d1369 1
a1369 1
  CASE (ex, FMT_LDI8) :
d1371 1
d1373 3
a1375 2
#define FLD(f) abuf->fields.fmt_ldi8.f
  EXTRACT_IFMT_LDI8_VARS /* f-op1 f-i8 f-Ri */
d1377 2
a1378 1
  EXTRACT_IFMT_LDI8_CODE
d1382 1
d1384 1
a1384 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_ldi8", "f_i8 0x%x", 'x', f_i8, "Ri 0x%x", 'x', f_Ri, (char *) 0));
d1394 1
a1394 1
  BREAK (ex);
d1397 1
a1397 1
  CASE (ex, FMT_LDI20) :
d1399 1
d1401 7
a1407 2
#define FLD(f) abuf->fields.fmt_ldi20.f
  EXTRACT_IFMT_LDI20_VARS /* f-op1 f-i20 f-op2 f-Ri */
d1409 7
a1415 1
  EXTRACT_IFMT_LDI20_CODE
d1419 1
d1421 1
a1421 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_ldi20", "f_i20 0x%x", 'x', f_i20, "Ri 0x%x", 'x', f_Ri, (char *) 0));
d1431 1
a1431 1
  BREAK (ex);
d1434 1
a1434 1
  CASE (ex, FMT_LDI32) :
d1436 1
d1438 6
a1443 2
#define FLD(f) abuf->fields.fmt_ldi32.f
  EXTRACT_IFMT_LDI32_VARS /* f-op1 f-i32 f-op2 f-op3 f-Ri */
d1445 4
a1448 1
  EXTRACT_IFMT_LDI32_CODE
d1452 1
d1454 1
a1454 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_ldi32", "f_i32 0x%x", 'x', f_i32, "Ri 0x%x", 'x', f_Ri, (char *) 0));
d1464 1
a1464 1
  BREAK (ex);
d1467 1
a1467 1
  CASE (ex, FMT_LD) :
d1469 1
d1471 3
a1473 2
#define FLD(f) abuf->fields.fmt_ld.f
  EXTRACT_IFMT_ADD_VARS /* f-op1 f-op2 f-Rj f-Ri */
d1475 2
a1476 1
  EXTRACT_IFMT_ADD_CODE
d1479 2
d1483 1
a1483 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_ld", "Rj 0x%x", 'x', f_Rj, "Ri 0x%x", 'x', f_Ri, (char *) 0));
d1494 1
a1494 1
  BREAK (ex);
d1497 1
a1497 1
  CASE (ex, FMT_LDUH) :
d1499 1
d1501 3
a1503 2
#define FLD(f) abuf->fields.fmt_lduh.f
  EXTRACT_IFMT_ADD_VARS /* f-op1 f-op2 f-Rj f-Ri */
d1505 2
a1506 103
  EXTRACT_IFMT_ADD_CODE

  /* Record the fields for the semantic handler.  */
  FLD (i_Rj) = & CPU (h_gr)[f_Rj];
  FLD (i_Ri) = & CPU (h_gr)[f_Ri];
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_lduh", "Rj 0x%x", 'x', f_Rj, "Ri 0x%x", 'x', f_Ri, (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
      FLD (in_Rj) = f_Rj;
      FLD (out_Ri) = f_Ri;
    }
#endif
#undef FLD
  BREAK (ex);
  }

  CASE (ex, FMT_LDUB) :
  {
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.fmt_ldub.f
  EXTRACT_IFMT_ADD_VARS /* f-op1 f-op2 f-Rj f-Ri */

  EXTRACT_IFMT_ADD_CODE

  /* Record the fields for the semantic handler.  */
  FLD (i_Rj) = & CPU (h_gr)[f_Rj];
  FLD (i_Ri) = & CPU (h_gr)[f_Ri];
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_ldub", "Rj 0x%x", 'x', f_Rj, "Ri 0x%x", 'x', f_Ri, (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
      FLD (in_Rj) = f_Rj;
      FLD (out_Ri) = f_Ri;
    }
#endif
#undef FLD
  BREAK (ex);
  }

  CASE (ex, FMT_LDR13) :
  {
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.fmt_ldr13.f
  EXTRACT_IFMT_ADD_VARS /* f-op1 f-op2 f-Rj f-Ri */

  EXTRACT_IFMT_ADD_CODE

  /* Record the fields for the semantic handler.  */
  FLD (i_Rj) = & CPU (h_gr)[f_Rj];
  FLD (i_Ri) = & CPU (h_gr)[f_Ri];
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_ldr13", "Rj 0x%x", 'x', f_Rj, "Ri 0x%x", 'x', f_Ri, (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
      FLD (in_Rj) = f_Rj;
      FLD (in_h_gr_13) = 13;
      FLD (out_Ri) = f_Ri;
    }
#endif
#undef FLD
  BREAK (ex);
  }

  CASE (ex, FMT_LDR13UH) :
  {
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.fmt_ldr13uh.f
  EXTRACT_IFMT_ADD_VARS /* f-op1 f-op2 f-Rj f-Ri */

  EXTRACT_IFMT_ADD_CODE

  /* Record the fields for the semantic handler.  */
  FLD (i_Rj) = & CPU (h_gr)[f_Rj];
  FLD (i_Ri) = & CPU (h_gr)[f_Ri];
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_ldr13uh", "Rj 0x%x", 'x', f_Rj, "Ri 0x%x", 'x', f_Ri, (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
      FLD (in_Rj) = f_Rj;
      FLD (in_h_gr_13) = 13;
      FLD (out_Ri) = f_Ri;
    }
#endif
#undef FLD
  BREAK (ex);
  }

  CASE (ex, FMT_LDR13UB) :
  {
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.fmt_ldr13ub.f
  EXTRACT_IFMT_ADD_VARS /* f-op1 f-op2 f-Rj f-Ri */

  EXTRACT_IFMT_ADD_CODE
d1509 2
d1513 1
a1513 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_ldr13ub", "Rj 0x%x", 'x', f_Rj, "Ri 0x%x", 'x', f_Ri, (char *) 0));
d1525 1
a1525 1
  BREAK (ex);
d1528 1
a1528 1
  CASE (ex, FMT_LDR14) :
d1530 1
d1532 3
a1534 2
#define FLD(f) abuf->fields.fmt_ldr14.f
  EXTRACT_IFMT_LDR14_VARS /* f-op1 f-disp10 f-Ri */
d1536 2
a1537 1
  EXTRACT_IFMT_LDR14_CODE
d1541 1
d1543 1
a1543 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_ldr14", "f_disp10 0x%x", 'x', f_disp10, "Ri 0x%x", 'x', f_Ri, (char *) 0));
d1554 1
a1554 1
  BREAK (ex);
d1557 1
a1557 1
  CASE (ex, FMT_LDR14UH) :
d1559 1
d1561 3
a1563 2
#define FLD(f) abuf->fields.fmt_ldr14uh.f
  EXTRACT_IFMT_LDR14UH_VARS /* f-op1 f-disp9 f-Ri */
d1565 2
a1566 1
  EXTRACT_IFMT_LDR14UH_CODE
d1570 1
d1572 1
a1572 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_ldr14uh", "f_disp9 0x%x", 'x', f_disp9, "Ri 0x%x", 'x', f_Ri, (char *) 0));
d1583 1
a1583 1
  BREAK (ex);
d1586 1
a1586 1
  CASE (ex, FMT_LDR14UB) :
d1588 1
d1590 3
a1592 2
#define FLD(f) abuf->fields.fmt_ldr14ub.f
  EXTRACT_IFMT_LDR14UB_VARS /* f-op1 f-disp8 f-Ri */
d1594 2
a1595 1
  EXTRACT_IFMT_LDR14UB_CODE
d1599 1
d1601 1
a1601 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_ldr14ub", "f_disp8 0x%x", 'x', f_disp8, "Ri 0x%x", 'x', f_Ri, (char *) 0));
d1612 1
a1612 1
  BREAK (ex);
d1615 1
a1615 1
  CASE (ex, FMT_LDR15) :
d1617 1
d1619 3
a1621 2
#define FLD(f) abuf->fields.fmt_ldr15.f
  EXTRACT_IFMT_LDR15_VARS /* f-op1 f-op2 f-udisp6 f-Ri */
d1623 2
a1624 1
  EXTRACT_IFMT_LDR15_CODE
d1628 1
d1630 1
a1630 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_ldr15", "f_udisp6 0x%x", 'x', f_udisp6, "Ri 0x%x", 'x', f_Ri, (char *) 0));
d1641 1
a1641 1
  BREAK (ex);
d1644 1
a1644 1
  CASE (ex, FMT_LDR15GR) :
d1646 1
d1648 2
a1649 2
#define FLD(f) abuf->fields.fmt_ldr15gr.f
  EXTRACT_IFMT_DIV0S_VARS /* f-op1 f-op2 f-op3 f-Ri */
d1651 1
a1651 1
  EXTRACT_IFMT_DIV0S_CODE
d1656 1
a1656 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_ldr15gr", "f_Ri 0x%x", 'x', f_Ri, "Ri 0x%x", 'x', f_Ri, (char *) 0));
d1668 1
a1668 1
  BREAK (ex);
d1671 1
a1671 1
  CASE (ex, FMT_LDR15DR) :
d1673 1
d1675 2
a1676 2
#define FLD(f) abuf->fields.fmt_ldr15dr.f
  EXTRACT_IFMT_LDR15DR_VARS /* f-op1 f-op2 f-op3 f-Rs2 */
d1678 1
a1678 1
  EXTRACT_IFMT_LDR15DR_CODE
d1682 1
a1682 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_ldr15dr", "f_Rs2 0x%x", 'x', f_Rs2, (char *) 0));
d1693 1
a1693 1
  BREAK (ex);
d1696 1
a1696 1
  CASE (ex, FMT_LDR15PS) :
d1698 1
d1700 1
a1700 2
#define FLD(f) abuf->fields.fmt_ldr15ps.f
  EXTRACT_IFMT_DIV3_VARS /* f-op1 f-op2 f-op3 f-op4 */
a1701 1
  EXTRACT_IFMT_DIV3_CODE
d1704 1
a1704 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_ldr15ps", (char *) 0));
d1715 1
a1715 1
  BREAK (ex);
d1718 1
a1718 1
  CASE (ex, FMT_ST) :
d1720 1
d1722 3
a1724 2
#define FLD(f) abuf->fields.fmt_st.f
  EXTRACT_IFMT_ADD_VARS /* f-op1 f-op2 f-Rj f-Ri */
d1726 2
a1727 1
  EXTRACT_IFMT_ADD_CODE
d1730 2
d1734 1
a1734 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_st", "Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, (char *) 0));
d1745 1
a1745 1
  BREAK (ex);
d1748 1
a1748 1
  CASE (ex, FMT_STH) :
d1750 1
d1752 3
a1754 2
#define FLD(f) abuf->fields.fmt_sth.f
  EXTRACT_IFMT_ADD_VARS /* f-op1 f-op2 f-Rj f-Ri */
d1756 2
a1757 51
  EXTRACT_IFMT_ADD_CODE

  /* Record the fields for the semantic handler.  */
  FLD (i_Ri) = & CPU (h_gr)[f_Ri];
  FLD (i_Rj) = & CPU (h_gr)[f_Rj];
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_sth", "Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
      FLD (in_Ri) = f_Ri;
      FLD (in_Rj) = f_Rj;
    }
#endif
#undef FLD
  BREAK (ex);
  }

  CASE (ex, FMT_STB) :
  {
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.fmt_stb.f
  EXTRACT_IFMT_ADD_VARS /* f-op1 f-op2 f-Rj f-Ri */

  EXTRACT_IFMT_ADD_CODE

  /* Record the fields for the semantic handler.  */
  FLD (i_Ri) = & CPU (h_gr)[f_Ri];
  FLD (i_Rj) = & CPU (h_gr)[f_Rj];
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_stb", "Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
      FLD (in_Ri) = f_Ri;
      FLD (in_Rj) = f_Rj;
    }
#endif
#undef FLD
  BREAK (ex);
  }

  CASE (ex, FMT_STR13) :
  {
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.fmt_str13.f
  EXTRACT_IFMT_ADD_VARS /* f-op1 f-op2 f-Rj f-Ri */

  EXTRACT_IFMT_ADD_CODE
d1760 2
d1764 1
a1764 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_str13", "Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, (char *) 0));
d1776 1
a1776 1
  BREAK (ex);
d1779 1
a1779 1
  CASE (ex, FMT_STR13H) :
d1781 1
d1783 3
a1785 2
#define FLD(f) abuf->fields.fmt_str13h.f
  EXTRACT_IFMT_ADD_VARS /* f-op1 f-op2 f-Rj f-Ri */
d1787 2
a1788 53
  EXTRACT_IFMT_ADD_CODE

  /* Record the fields for the semantic handler.  */
  FLD (i_Ri) = & CPU (h_gr)[f_Ri];
  FLD (i_Rj) = & CPU (h_gr)[f_Rj];
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_str13h", "Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
      FLD (in_Ri) = f_Ri;
      FLD (in_Rj) = f_Rj;
      FLD (in_h_gr_13) = 13;
    }
#endif
#undef FLD
  BREAK (ex);
  }

  CASE (ex, FMT_STR13B) :
  {
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.fmt_str13b.f
  EXTRACT_IFMT_ADD_VARS /* f-op1 f-op2 f-Rj f-Ri */

  EXTRACT_IFMT_ADD_CODE

  /* Record the fields for the semantic handler.  */
  FLD (i_Ri) = & CPU (h_gr)[f_Ri];
  FLD (i_Rj) = & CPU (h_gr)[f_Rj];
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_str13b", "Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, (char *) 0));

#if WITH_PROFILE_MODEL_P
  /* Record the fields for profiling.  */
  if (PROFILE_MODEL_P (current_cpu))
    {
      FLD (in_Ri) = f_Ri;
      FLD (in_Rj) = f_Rj;
      FLD (in_h_gr_13) = 13;
    }
#endif
#undef FLD
  BREAK (ex);
  }

  CASE (ex, FMT_STR14) :
  {
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.fmt_str14.f
  EXTRACT_IFMT_LDR14_VARS /* f-op1 f-disp10 f-Ri */

  EXTRACT_IFMT_LDR14_CODE
d1791 1
d1794 1
a1794 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_str14", "f_disp10 0x%x", 'x', f_disp10, "Ri 0x%x", 'x', f_Ri, (char *) 0));
d1805 1
a1805 1
  BREAK (ex);
d1808 1
a1808 1
  CASE (ex, FMT_STR14H) :
d1810 1
d1812 3
a1814 2
#define FLD(f) abuf->fields.fmt_str14h.f
  EXTRACT_IFMT_LDR14UH_VARS /* f-op1 f-disp9 f-Ri */
d1816 2
a1817 1
  EXTRACT_IFMT_LDR14UH_CODE
d1820 1
d1823 1
a1823 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_str14h", "f_disp9 0x%x", 'x', f_disp9, "Ri 0x%x", 'x', f_Ri, (char *) 0));
d1834 1
a1834 1
  BREAK (ex);
d1837 1
a1837 1
  CASE (ex, FMT_STR14B) :
d1839 1
d1841 3
a1843 2
#define FLD(f) abuf->fields.fmt_str14b.f
  EXTRACT_IFMT_LDR14UB_VARS /* f-op1 f-disp8 f-Ri */
d1845 2
a1846 1
  EXTRACT_IFMT_LDR14UB_CODE
d1849 1
d1852 1
a1852 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_str14b", "f_disp8 0x%x", 'x', f_disp8, "Ri 0x%x", 'x', f_Ri, (char *) 0));
d1863 1
a1863 1
  BREAK (ex);
d1866 1
a1866 1
  CASE (ex, FMT_STR15) :
d1868 1
d1870 3
a1872 2
#define FLD(f) abuf->fields.fmt_str15.f
  EXTRACT_IFMT_LDR15_VARS /* f-op1 f-op2 f-udisp6 f-Ri */
d1874 2
a1875 1
  EXTRACT_IFMT_LDR15_CODE
d1878 1
d1881 1
a1881 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_str15", "f_udisp6 0x%x", 'x', f_udisp6, "Ri 0x%x", 'x', f_Ri, (char *) 0));
d1892 1
a1892 1
  BREAK (ex);
d1895 1
a1895 1
  CASE (ex, FMT_STR15GR) :
d1897 1
d1899 2
a1900 2
#define FLD(f) abuf->fields.fmt_str15gr.f
  EXTRACT_IFMT_DIV0S_VARS /* f-op1 f-op2 f-op3 f-Ri */
d1902 1
a1902 1
  EXTRACT_IFMT_DIV0S_CODE
d1905 1
d1907 1
a1907 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_str15gr", "Ri 0x%x", 'x', f_Ri, (char *) 0));
d1919 1
a1919 1
  BREAK (ex);
d1922 1
a1922 1
  CASE (ex, FMT_STR15DR) :
d1924 1
d1926 2
a1927 2
#define FLD(f) abuf->fields.fmt_str15dr.f
  EXTRACT_IFMT_LDR15DR_VARS /* f-op1 f-op2 f-op3 f-Rs2 */
d1929 1
a1929 1
  EXTRACT_IFMT_LDR15DR_CODE
d1933 1
a1933 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_str15dr", "f_Rs2 0x%x", 'x', f_Rs2, (char *) 0));
d1944 1
a1944 1
  BREAK (ex);
d1947 1
a1947 1
  CASE (ex, FMT_STR15PS) :
d1949 1
d1951 1
a1951 2
#define FLD(f) abuf->fields.fmt_str15ps.f
  EXTRACT_IFMT_DIV3_VARS /* f-op1 f-op2 f-op3 f-op4 */
a1952 1
  EXTRACT_IFMT_DIV3_CODE
d1955 1
a1955 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_str15ps", (char *) 0));
d1966 1
a1966 1
  BREAK (ex);
d1969 1
a1969 1
  CASE (ex, FMT_MOV) :
d1971 1
d1973 3
a1975 2
#define FLD(f) abuf->fields.fmt_mov.f
  EXTRACT_IFMT_ADD_VARS /* f-op1 f-op2 f-Rj f-Ri */
d1977 2
a1978 1
  EXTRACT_IFMT_ADD_CODE
d1981 2
d1985 1
a1985 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_mov", "Rj 0x%x", 'x', f_Rj, "Ri 0x%x", 'x', f_Ri, (char *) 0));
d1996 1
a1996 1
  BREAK (ex);
d1999 1
a1999 1
  CASE (ex, FMT_MOVDR) :
d2001 1
d2003 3
a2005 2
#define FLD(f) abuf->fields.fmt_movdr.f
  EXTRACT_IFMT_MOVDR_VARS /* f-op1 f-op2 f-Rs1 f-Ri */
d2007 2
a2008 1
  EXTRACT_IFMT_MOVDR_CODE
d2012 1
d2014 1
a2014 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_movdr", "f_Rs1 0x%x", 'x', f_Rs1, "Ri 0x%x", 'x', f_Ri, (char *) 0));
d2024 1
a2024 1
  BREAK (ex);
d2027 1
a2027 1
  CASE (ex, FMT_MOVPS) :
d2029 1
d2031 2
a2032 2
#define FLD(f) abuf->fields.fmt_movps.f
  EXTRACT_IFMT_DIV0S_VARS /* f-op1 f-op2 f-op3 f-Ri */
d2034 1
a2034 1
  EXTRACT_IFMT_DIV0S_CODE
d2037 1
d2039 1
a2039 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_movps", "Ri 0x%x", 'x', f_Ri, (char *) 0));
d2049 1
a2049 1
  BREAK (ex);
d2052 1
a2052 1
  CASE (ex, FMT_MOV2DR) :
d2054 1
d2056 3
a2058 2
#define FLD(f) abuf->fields.fmt_mov2dr.f
  EXTRACT_IFMT_MOVDR_VARS /* f-op1 f-op2 f-Rs1 f-Ri */
d2060 2
a2061 1
  EXTRACT_IFMT_MOVDR_CODE
d2064 1
d2067 1
a2067 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_mov2dr", "f_Rs1 0x%x", 'x', f_Rs1, "Ri 0x%x", 'x', f_Ri, (char *) 0));
d2077 1
a2077 1
  BREAK (ex);
d2080 1
a2080 1
  CASE (ex, FMT_MOV2PS) :
d2082 1
d2084 2
a2085 2
#define FLD(f) abuf->fields.fmt_mov2ps.f
  EXTRACT_IFMT_DIV0S_VARS /* f-op1 f-op2 f-op3 f-Ri */
d2087 1
a2087 1
  EXTRACT_IFMT_DIV0S_CODE
d2090 1
d2092 1
a2092 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_mov2ps", "Ri 0x%x", 'x', f_Ri, (char *) 0));
d2102 1
a2102 1
  BREAK (ex);
d2105 1
a2105 1
  CASE (ex, FMT_JMP) :
d2107 1
d2109 2
a2110 2
#define FLD(f) abuf->fields.cti.fields.fmt_jmp.f
  EXTRACT_IFMT_DIV0S_VARS /* f-op1 f-op2 f-op3 f-Ri */
d2112 1
a2112 1
  EXTRACT_IFMT_DIV0S_CODE
d2115 1
d2117 1
a2117 2
  SEM_BRANCH_INIT_EXTRACT (abuf);
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_jmp", "Ri 0x%x", 'x', f_Ri, (char *) 0));
d2127 1
a2127 1
  BREAK (ex);
d2130 1
a2130 1
  CASE (ex, FMT_CALLR) :
d2132 1
d2134 2
a2135 2
#define FLD(f) abuf->fields.cti.fields.fmt_callr.f
  EXTRACT_IFMT_DIV0S_VARS /* f-op1 f-op2 f-op3 f-Ri */
d2137 1
a2137 1
  EXTRACT_IFMT_DIV0S_CODE
d2140 1
d2142 1
a2142 2
  SEM_BRANCH_INIT_EXTRACT (abuf);
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_callr", "Ri 0x%x", 'x', f_Ri, (char *) 0));
d2152 1
a2152 1
  BREAK (ex);
d2155 1
a2155 1
  CASE (ex, FMT_CALL) :
d2157 1
d2159 2
a2160 2
#define FLD(f) abuf->fields.cti.fields.fmt_call.f
  EXTRACT_IFMT_CALL_VARS /* f-op1 f-op5 f-rel12 */
d2162 1
a2162 1
  EXTRACT_IFMT_CALL_CODE
d2166 1
a2166 2
  SEM_BRANCH_INIT_EXTRACT (abuf);
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_call", "label12 0x%x", 'x', f_rel12, (char *) 0));
d2175 1
a2175 1
  BREAK (ex);
d2178 1
a2178 1
  CASE (ex, FMT_RET) :
d2180 1
d2182 1
a2182 2
#define FLD(f) abuf->fields.cti.fields.fmt_ret.f
  EXTRACT_IFMT_DIV3_VARS /* f-op1 f-op2 f-op3 f-op4 */
a2183 1
  EXTRACT_IFMT_DIV3_CODE
d2186 1
a2186 2
  SEM_BRANCH_INIT_EXTRACT (abuf);
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_ret", (char *) 0));
d2195 1
a2195 1
  BREAK (ex);
d2198 1
a2198 1
  CASE (ex, FMT_INT) :
d2200 1
d2202 2
a2203 2
#define FLD(f) abuf->fields.cti.fields.fmt_int.f
  EXTRACT_IFMT_INT_VARS /* f-op1 f-op2 f-u8 */
d2205 1
a2205 1
  EXTRACT_IFMT_INT_CODE
d2209 1
a2209 2
  SEM_BRANCH_INIT_EXTRACT (abuf);
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_int", "f_u8 0x%x", 'x', f_u8, (char *) 0));
d2218 1
a2218 1
  BREAK (ex);
d2221 1
a2221 1
  CASE (ex, FMT_INTE) :
d2223 1
d2225 1
a2225 2
#define FLD(f) abuf->fields.cti.fields.fmt_inte.f
  EXTRACT_IFMT_DIV3_VARS /* f-op1 f-op2 f-op3 f-op4 */
a2226 1
  EXTRACT_IFMT_DIV3_CODE
d2229 1
a2229 2
  SEM_BRANCH_INIT_EXTRACT (abuf);
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_inte", (char *) 0));
d2238 1
a2238 1
  BREAK (ex);
d2241 1
a2241 1
  CASE (ex, FMT_RETI) :
d2243 1
d2245 1
a2245 2
#define FLD(f) abuf->fields.cti.fields.fmt_reti.f
  EXTRACT_IFMT_DIV3_VARS /* f-op1 f-op2 f-op3 f-op4 */
a2246 1
  EXTRACT_IFMT_DIV3_CODE
d2249 1
a2249 2
  SEM_BRANCH_INIT_EXTRACT (abuf);
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_reti", (char *) 0));
d2258 1
a2258 1
  BREAK (ex);
d2261 1
a2261 1
  CASE (ex, FMT_BRAD) :
d2263 1
d2265 2
a2266 2
#define FLD(f) abuf->fields.cti.fields.fmt_brad.f
  EXTRACT_IFMT_BRAD_VARS /* f-op1 f-cc f-rel9 */
d2268 1
a2268 1
  EXTRACT_IFMT_BRAD_CODE
d2272 1
a2272 2
  SEM_BRANCH_INIT_EXTRACT (abuf);
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_brad", "label9 0x%x", 'x', f_rel9, (char *) 0));
d2281 1
a2281 1
  BREAK (ex);
d2284 1
a2284 1
  CASE (ex, FMT_BNOD) :
d2286 1
d2288 1
a2288 2
#define FLD(f) abuf->fields.fmt_bnod.f
  EXTRACT_IFMT_BRAD_VARS /* f-op1 f-cc f-rel9 */
a2289 1
  EXTRACT_IFMT_BRAD_CODE
d2292 1
a2292 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_bnod", (char *) 0));
d2295 1
a2295 1
  BREAK (ex);
d2298 1
a2298 1
  CASE (ex, FMT_BEQD) :
d2300 1
d2302 2
a2303 2
#define FLD(f) abuf->fields.cti.fields.fmt_beqd.f
  EXTRACT_IFMT_BRAD_VARS /* f-op1 f-cc f-rel9 */
d2305 1
a2305 1
  EXTRACT_IFMT_BRAD_CODE
d2309 1
a2309 2
  SEM_BRANCH_INIT_EXTRACT (abuf);
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_beqd", "label9 0x%x", 'x', f_rel9, (char *) 0));
d2318 1
a2318 1
  BREAK (ex);
d2321 1
a2321 1
  CASE (ex, FMT_BCD) :
d2323 1
d2325 2
a2326 2
#define FLD(f) abuf->fields.cti.fields.fmt_bcd.f
  EXTRACT_IFMT_BRAD_VARS /* f-op1 f-cc f-rel9 */
d2328 1
a2328 1
  EXTRACT_IFMT_BRAD_CODE
d2332 1
a2332 2
  SEM_BRANCH_INIT_EXTRACT (abuf);
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_bcd", "label9 0x%x", 'x', f_rel9, (char *) 0));
d2341 1
a2341 1
  BREAK (ex);
d2344 1
a2344 1
  CASE (ex, FMT_BND) :
d2346 1
d2348 2
a2349 2
#define FLD(f) abuf->fields.cti.fields.fmt_bnd.f
  EXTRACT_IFMT_BRAD_VARS /* f-op1 f-cc f-rel9 */
d2351 1
a2351 1
  EXTRACT_IFMT_BRAD_CODE
d2355 1
a2355 2
  SEM_BRANCH_INIT_EXTRACT (abuf);
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_bnd", "label9 0x%x", 'x', f_rel9, (char *) 0));
d2364 1
a2364 1
  BREAK (ex);
d2367 1
a2367 1
  CASE (ex, FMT_BVD) :
d2369 1
d2371 2
a2372 2
#define FLD(f) abuf->fields.cti.fields.fmt_bvd.f
  EXTRACT_IFMT_BRAD_VARS /* f-op1 f-cc f-rel9 */
d2374 1
a2374 1
  EXTRACT_IFMT_BRAD_CODE
d2378 1
a2378 2
  SEM_BRANCH_INIT_EXTRACT (abuf);
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_bvd", "label9 0x%x", 'x', f_rel9, (char *) 0));
d2387 1
a2387 1
  BREAK (ex);
d2390 1
a2390 1
  CASE (ex, FMT_BLTD) :
d2392 1
d2394 2
a2395 2
#define FLD(f) abuf->fields.cti.fields.fmt_bltd.f
  EXTRACT_IFMT_BRAD_VARS /* f-op1 f-cc f-rel9 */
d2397 1
a2397 1
  EXTRACT_IFMT_BRAD_CODE
d2401 1
a2401 2
  SEM_BRANCH_INIT_EXTRACT (abuf);
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_bltd", "label9 0x%x", 'x', f_rel9, (char *) 0));
d2410 1
a2410 1
  BREAK (ex);
d2413 1
a2413 1
  CASE (ex, FMT_BLED) :
d2415 1
d2417 2
a2418 2
#define FLD(f) abuf->fields.cti.fields.fmt_bled.f
  EXTRACT_IFMT_BRAD_VARS /* f-op1 f-cc f-rel9 */
d2420 1
a2420 1
  EXTRACT_IFMT_BRAD_CODE
d2424 1
a2424 2
  SEM_BRANCH_INIT_EXTRACT (abuf);
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_bled", "label9 0x%x", 'x', f_rel9, (char *) 0));
d2433 1
a2433 1
  BREAK (ex);
d2436 1
a2436 1
  CASE (ex, FMT_BLSD) :
d2438 1
d2440 2
a2441 2
#define FLD(f) abuf->fields.cti.fields.fmt_blsd.f
  EXTRACT_IFMT_BRAD_VARS /* f-op1 f-cc f-rel9 */
d2443 1
a2443 1
  EXTRACT_IFMT_BRAD_CODE
d2447 1
a2447 2
  SEM_BRANCH_INIT_EXTRACT (abuf);
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_blsd", "label9 0x%x", 'x', f_rel9, (char *) 0));
d2456 1
a2456 1
  BREAK (ex);
d2459 1
a2459 1
  CASE (ex, FMT_DMOVR13) :
d2461 1
d2463 2
a2464 2
#define FLD(f) abuf->fields.fmt_dmovr13.f
  EXTRACT_IFMT_DMOVR13_VARS /* f-op1 f-op2 f-dir10 */
d2466 1
a2466 1
  EXTRACT_IFMT_DMOVR13_CODE
d2470 1
a2470 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_dmovr13", "f_dir10 0x%x", 'x', f_dir10, (char *) 0));
d2480 1
a2480 1
  BREAK (ex);
d2483 1
a2483 1
  CASE (ex, FMT_DMOVR13H) :
d2485 1
d2487 2
a2488 2
#define FLD(f) abuf->fields.fmt_dmovr13h.f
  EXTRACT_IFMT_DMOVR13H_VARS /* f-op1 f-op2 f-dir9 */
d2490 1
a2490 1
  EXTRACT_IFMT_DMOVR13H_CODE
d2494 1
a2494 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_dmovr13h", "f_dir9 0x%x", 'x', f_dir9, (char *) 0));
d2504 1
a2504 1
  BREAK (ex);
d2507 1
a2507 1
  CASE (ex, FMT_DMOVR13B) :
d2509 1
d2511 2
a2512 2
#define FLD(f) abuf->fields.fmt_dmovr13b.f
  EXTRACT_IFMT_DMOVR13B_VARS /* f-op1 f-op2 f-dir8 */
d2514 1
a2514 1
  EXTRACT_IFMT_DMOVR13B_CODE
d2518 1
a2518 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_dmovr13b", "f_dir8 0x%x", 'x', f_dir8, (char *) 0));
d2528 1
a2528 1
  BREAK (ex);
d2531 1
a2531 1
  CASE (ex, FMT_DMOVR13PI) :
d2533 1
d2535 2
a2536 2
#define FLD(f) abuf->fields.fmt_dmovr13pi.f
  EXTRACT_IFMT_DMOVR13_VARS /* f-op1 f-op2 f-dir10 */
d2538 1
a2538 1
  EXTRACT_IFMT_DMOVR13_CODE
d2542 1
a2542 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_dmovr13pi", "f_dir10 0x%x", 'x', f_dir10, (char *) 0));
d2553 1
a2553 1
  BREAK (ex);
d2556 1
a2556 1
  CASE (ex, FMT_DMOVR13PIH) :
d2558 1
d2560 2
a2561 2
#define FLD(f) abuf->fields.fmt_dmovr13pih.f
  EXTRACT_IFMT_DMOVR13H_VARS /* f-op1 f-op2 f-dir9 */
d2563 1
a2563 1
  EXTRACT_IFMT_DMOVR13H_CODE
d2567 1
a2567 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_dmovr13pih", "f_dir9 0x%x", 'x', f_dir9, (char *) 0));
d2578 1
a2578 1
  BREAK (ex);
d2581 1
a2581 1
  CASE (ex, FMT_DMOVR13PIB) :
d2583 1
d2585 2
a2586 2
#define FLD(f) abuf->fields.fmt_dmovr13pib.f
  EXTRACT_IFMT_DMOVR13B_VARS /* f-op1 f-op2 f-dir8 */
d2588 1
a2588 1
  EXTRACT_IFMT_DMOVR13B_CODE
d2592 1
a2592 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_dmovr13pib", "f_dir8 0x%x", 'x', f_dir8, (char *) 0));
d2603 1
a2603 1
  BREAK (ex);
d2606 1
a2606 1
  CASE (ex, FMT_DMOVR15PI) :
d2608 1
d2610 2
a2611 2
#define FLD(f) abuf->fields.fmt_dmovr15pi.f
  EXTRACT_IFMT_DMOVR13_VARS /* f-op1 f-op2 f-dir10 */
d2613 1
a2613 1
  EXTRACT_IFMT_DMOVR13_CODE
d2617 1
a2617 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_dmovr15pi", "f_dir10 0x%x", 'x', f_dir10, (char *) 0));
d2628 1
a2628 1
  BREAK (ex);
d2631 1
a2631 1
  CASE (ex, FMT_DMOV2R13) :
d2633 1
d2635 2
a2636 2
#define FLD(f) abuf->fields.fmt_dmov2r13.f
  EXTRACT_IFMT_DMOVR13_VARS /* f-op1 f-op2 f-dir10 */
d2638 1
a2638 1
  EXTRACT_IFMT_DMOVR13_CODE
d2642 1
a2642 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_dmov2r13", "f_dir10 0x%x", 'x', f_dir10, (char *) 0));
d2652 1
a2652 1
  BREAK (ex);
d2655 1
a2655 1
  CASE (ex, FMT_DMOV2R13H) :
d2657 1
d2659 2
a2660 2
#define FLD(f) abuf->fields.fmt_dmov2r13h.f
  EXTRACT_IFMT_DMOVR13H_VARS /* f-op1 f-op2 f-dir9 */
d2662 1
a2662 1
  EXTRACT_IFMT_DMOVR13H_CODE
d2666 1
a2666 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_dmov2r13h", "f_dir9 0x%x", 'x', f_dir9, (char *) 0));
d2676 1
a2676 1
  BREAK (ex);
d2679 1
a2679 1
  CASE (ex, FMT_DMOV2R13B) :
d2681 1
d2683 2
a2684 2
#define FLD(f) abuf->fields.fmt_dmov2r13b.f
  EXTRACT_IFMT_DMOVR13B_VARS /* f-op1 f-op2 f-dir8 */
d2686 1
a2686 1
  EXTRACT_IFMT_DMOVR13B_CODE
d2690 1
a2690 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_dmov2r13b", "f_dir8 0x%x", 'x', f_dir8, (char *) 0));
d2700 1
a2700 1
  BREAK (ex);
d2703 1
a2703 1
  CASE (ex, FMT_DMOV2R13PI) :
d2705 1
d2707 2
a2708 2
#define FLD(f) abuf->fields.fmt_dmov2r13pi.f
  EXTRACT_IFMT_DMOVR13_VARS /* f-op1 f-op2 f-dir10 */
d2710 1
a2710 1
  EXTRACT_IFMT_DMOVR13_CODE
d2714 1
a2714 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_dmov2r13pi", "f_dir10 0x%x", 'x', f_dir10, (char *) 0));
d2725 1
a2725 1
  BREAK (ex);
d2728 1
a2728 1
  CASE (ex, FMT_DMOV2R13PIH) :
d2730 1
d2732 2
a2733 2
#define FLD(f) abuf->fields.fmt_dmov2r13pih.f
  EXTRACT_IFMT_DMOVR13H_VARS /* f-op1 f-op2 f-dir9 */
d2735 1
a2735 1
  EXTRACT_IFMT_DMOVR13H_CODE
d2739 1
a2739 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_dmov2r13pih", "f_dir9 0x%x", 'x', f_dir9, (char *) 0));
d2750 1
a2750 1
  BREAK (ex);
d2753 1
a2753 1
  CASE (ex, FMT_DMOV2R13PIB) :
d2755 1
d2757 2
a2758 2
#define FLD(f) abuf->fields.fmt_dmov2r13pib.f
  EXTRACT_IFMT_DMOVR13B_VARS /* f-op1 f-op2 f-dir8 */
d2760 1
a2760 1
  EXTRACT_IFMT_DMOVR13B_CODE
d2764 1
a2764 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_dmov2r13pib", "f_dir8 0x%x", 'x', f_dir8, (char *) 0));
d2775 1
a2775 1
  BREAK (ex);
d2778 1
a2778 1
  CASE (ex, FMT_DMOV2R15PD) :
d2780 1
d2782 2
a2783 2
#define FLD(f) abuf->fields.fmt_dmov2r15pd.f
  EXTRACT_IFMT_DMOVR13_VARS /* f-op1 f-op2 f-dir10 */
d2785 1
a2785 1
  EXTRACT_IFMT_DMOVR13_CODE
d2789 1
a2789 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_dmov2r15pd", "f_dir10 0x%x", 'x', f_dir10, (char *) 0));
d2800 1
a2800 1
  BREAK (ex);
d2803 1
a2803 1
  CASE (ex, FMT_LDRES) :
d2805 1
d2807 2
a2808 2
#define FLD(f) abuf->fields.fmt_ldres.f
  EXTRACT_IFMT_ADDI_VARS /* f-op1 f-op2 f-u4 f-Ri */
d2810 1
a2810 1
  EXTRACT_IFMT_ADDI_CODE
d2813 1
d2815 1
a2815 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_ldres", "Ri 0x%x", 'x', f_Ri, (char *) 0));
d2826 1
a2826 1
  BREAK (ex);
d2829 1
a2829 1
  CASE (ex, FMT_COPOP) :
d2831 1
d2833 3
a2835 22
#define FLD(f) abuf->fields.fmt_copop.f
  EXTRACT_IFMT_COPOP_VARS /* f-op1 f-ccc f-op2 f-op3 f-CRj f-u4c f-CRi */

  EXTRACT_IFMT_COPOP_CODE

  /* Record the fields for the semantic handler.  */
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_copop", (char *) 0));

#undef FLD
  BREAK (ex);
  }

  CASE (ex, FMT_COPLD) :
  {
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.fmt_copld.f
  EXTRACT_IFMT_COPLD_VARS /* f-op1 f-ccc f-op2 f-op3 f-Rjc f-u4c f-CRi */

  EXTRACT_IFMT_COPLD_CODE

  /* Record the fields for the semantic handler.  */
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_copld", (char *) 0));
d2837 1
a2837 11
#undef FLD
  BREAK (ex);
  }

  CASE (ex, FMT_COPST) :
  {
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.fmt_copst.f
  EXTRACT_IFMT_COPST_VARS /* f-op1 f-ccc f-op2 f-op3 f-CRj f-u4c f-Ric */

  EXTRACT_IFMT_COPST_CODE
d2840 1
a2840 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_copst", (char *) 0));
d2843 1
a2843 1
  BREAK (ex);
d2846 1
a2846 1
  CASE (ex, FMT_NOP) :
d2848 1
d2850 2
a2851 2
#define FLD(f) abuf->fields.fmt_nop.f
  EXTRACT_IFMT_DIV3_VARS /* f-op1 f-op2 f-op3 f-op4 */
d2853 1
a2853 16
  EXTRACT_IFMT_DIV3_CODE

  /* Record the fields for the semantic handler.  */
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_nop", (char *) 0));

#undef FLD
  BREAK (ex);
  }

  CASE (ex, FMT_ANDCCR) :
  {
    CGEN_INSN_INT insn = base_insn;
#define FLD(f) abuf->fields.fmt_andccr.f
  EXTRACT_IFMT_INT_VARS /* f-op1 f-op2 f-u8 */

  EXTRACT_IFMT_INT_CODE
d2857 1
a2857 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_andccr", "f_u8 0x%x", 'x', f_u8, (char *) 0));
d2860 1
a2860 1
  BREAK (ex);
d2863 1
a2863 1
  CASE (ex, FMT_STILM) :
d2865 1
d2867 2
a2868 2
#define FLD(f) abuf->fields.fmt_stilm.f
  EXTRACT_IFMT_INT_VARS /* f-op1 f-op2 f-u8 */
d2870 1
a2870 1
  EXTRACT_IFMT_INT_CODE
d2874 1
a2874 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_stilm", "f_u8 0x%x", 'x', f_u8, (char *) 0));
d2877 1
a2877 1
  BREAK (ex);
d2880 1
a2880 1
  CASE (ex, FMT_ADDSP) :
d2882 1
d2884 2
a2885 2
#define FLD(f) abuf->fields.fmt_addsp.f
  EXTRACT_IFMT_ADDSP_VARS /* f-op1 f-op2 f-s10 */
d2887 1
a2887 1
  EXTRACT_IFMT_ADDSP_CODE
d2891 1
a2891 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_addsp", "f_s10 0x%x", 'x', f_s10, (char *) 0));
d2902 1
a2902 1
  BREAK (ex);
d2905 1
a2905 1
  CASE (ex, FMT_EXTSB) :
d2907 1
d2909 2
a2910 2
#define FLD(f) abuf->fields.fmt_extsb.f
  EXTRACT_IFMT_DIV0S_VARS /* f-op1 f-op2 f-op3 f-Ri */
d2912 1
a2912 1
  EXTRACT_IFMT_DIV0S_CODE
d2915 1
d2917 1
a2917 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_extsb", "Ri 0x%x", 'x', f_Ri, (char *) 0));
d2928 1
a2928 1
  BREAK (ex);
d2931 1
a2931 1
  CASE (ex, FMT_EXTUB) :
d2933 1
d2935 2
a2936 2
#define FLD(f) abuf->fields.fmt_extub.f
  EXTRACT_IFMT_DIV0S_VARS /* f-op1 f-op2 f-op3 f-Ri */
d2938 1
a2938 1
  EXTRACT_IFMT_DIV0S_CODE
d2941 1
d2943 1
a2943 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_extub", "Ri 0x%x", 'x', f_Ri, (char *) 0));
d2954 1
a2954 1
  BREAK (ex);
d2957 1
a2957 1
  CASE (ex, FMT_EXTSH) :
d2959 1
d2961 2
a2962 2
#define FLD(f) abuf->fields.fmt_extsh.f
  EXTRACT_IFMT_DIV0S_VARS /* f-op1 f-op2 f-op3 f-Ri */
d2964 1
a2964 1
  EXTRACT_IFMT_DIV0S_CODE
d2967 1
d2969 1
a2969 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_extsh", "Ri 0x%x", 'x', f_Ri, (char *) 0));
d2980 1
a2980 1
  BREAK (ex);
d2983 1
a2983 1
  CASE (ex, FMT_EXTUH) :
d2985 1
d2987 2
a2988 2
#define FLD(f) abuf->fields.fmt_extuh.f
  EXTRACT_IFMT_DIV0S_VARS /* f-op1 f-op2 f-op3 f-Ri */
d2990 1
a2990 1
  EXTRACT_IFMT_DIV0S_CODE
d2993 1
d2995 1
a2995 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_extuh", "Ri 0x%x", 'x', f_Ri, (char *) 0));
d3006 1
a3006 1
  BREAK (ex);
d3009 1
a3009 1
  CASE (ex, FMT_LDM0) :
d3011 1
d3013 2
a3014 2
#define FLD(f) abuf->fields.fmt_ldm0.f
  EXTRACT_IFMT_LDM0_VARS /* f-op1 f-op2 f-reglist_low_ld */
d3016 1
a3016 1
  EXTRACT_IFMT_LDM0_CODE
d3020 1
a3020 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_ldm0", "f_reglist_low_ld 0x%x", 'x', f_reglist_low_ld, (char *) 0));
d3039 1
a3039 1
  BREAK (ex);
d3042 1
a3042 1
  CASE (ex, FMT_LDM1) :
d3044 1
d3046 2
a3047 2
#define FLD(f) abuf->fields.fmt_ldm1.f
  EXTRACT_IFMT_LDM1_VARS /* f-op1 f-op2 f-reglist_hi_ld */
d3049 1
a3049 1
  EXTRACT_IFMT_LDM1_CODE
d3053 1
a3053 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_ldm1", "f_reglist_hi_ld 0x%x", 'x', f_reglist_hi_ld, (char *) 0));
d3071 1
a3071 1
  BREAK (ex);
d3074 1
a3074 1
  CASE (ex, FMT_STM0) :
d3076 1
d3078 2
a3079 2
#define FLD(f) abuf->fields.fmt_stm0.f
  EXTRACT_IFMT_STM0_VARS /* f-op1 f-op2 f-reglist_low_st */
d3081 1
a3081 1
  EXTRACT_IFMT_STM0_CODE
d3085 1
a3085 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_stm0", "f_reglist_low_st 0x%x", 'x', f_reglist_low_st, (char *) 0));
d3104 1
a3104 1
  BREAK (ex);
d3107 1
a3107 1
  CASE (ex, FMT_STM1) :
d3109 1
d3111 2
a3112 2
#define FLD(f) abuf->fields.fmt_stm1.f
  EXTRACT_IFMT_STM1_VARS /* f-op1 f-op2 f-reglist_hi_st */
d3114 1
a3114 1
  EXTRACT_IFMT_STM1_CODE
d3118 1
a3118 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_stm1", "f_reglist_hi_st 0x%x", 'x', f_reglist_hi_st, (char *) 0));
d3136 1
a3136 1
  BREAK (ex);
d3139 1
a3139 1
  CASE (ex, FMT_ENTER) :
d3141 1
d3143 2
a3144 2
#define FLD(f) abuf->fields.fmt_enter.f
  EXTRACT_IFMT_ENTER_VARS /* f-op1 f-op2 f-u10 */
d3146 1
a3146 1
  EXTRACT_IFMT_ENTER_CODE
d3150 1
a3150 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_enter", "f_u10 0x%x", 'x', f_u10, (char *) 0));
d3163 1
a3163 1
  BREAK (ex);
d3166 1
a3166 1
  CASE (ex, FMT_LEAVE) :
d3168 1
d3170 1
a3170 2
#define FLD(f) abuf->fields.fmt_leave.f
  EXTRACT_IFMT_DIV3_VARS /* f-op1 f-op2 f-op3 f-op4 */
a3171 1
  EXTRACT_IFMT_DIV3_CODE
d3174 1
a3174 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_leave", (char *) 0));
d3187 1
a3187 1
  BREAK (ex);
d3190 1
a3190 1
  CASE (ex, FMT_XCHB) :
d3192 1
d3194 3
a3196 2
#define FLD(f) abuf->fields.fmt_xchb.f
  EXTRACT_IFMT_ADD_VARS /* f-op1 f-op2 f-Rj f-Ri */
d3198 2
a3199 1
  EXTRACT_IFMT_ADD_CODE
d3202 2
d3206 1
a3206 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "fmt_xchb", "Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, (char *) 0));
d3218 1
a3218 7
  BREAK (ex);
  }


      }
    ENDSWITCH (ex)

a3220 1
  return idecode->idesc;
@


1.1.1.1
log
@Initial creation of sourceware repository
@
text
@@


1.1.1.2
log
@import gdb-19990422 snapshot
@
text
@a48 5
/* The INSN_ prefix is not here and is instead part of the `insn' argument
   to avoid collisions with header files (e.g. `AND' in ansidecl.h).  */
#define IDX(insn) CONCAT2 (FR30BF_,insn)
#define TYPE(insn) CONCAT2 (FR30_,insn)

d56 5
a243 3
#undef FMT
#undef FULL
#undef FAST
d305 58
d370 4
a373 2
  /* Result of decoder.  */
  FR30BF_INSN_TYPE itype;
d376 211
a586 14
    CGEN_INSN_INT insn = base_insn;

    {
      unsigned int val = (((insn >> 8) & (255 << 0)));
      switch (val)
      {
      case 0 : itype = FR30BF_INSN_LDR13; goto extract_fmt_ldr13;
      case 1 : itype = FR30BF_INSN_LDR13UH; goto extract_fmt_ldr13uh;
      case 2 : itype = FR30BF_INSN_LDR13UB; goto extract_fmt_ldr13ub;
      case 3 : itype = FR30BF_INSN_LDR15; goto extract_fmt_ldr15;
      case 4 : itype = FR30BF_INSN_LD; goto extract_fmt_ld;
      case 5 : itype = FR30BF_INSN_LDUH; goto extract_fmt_lduh;
      case 6 : itype = FR30BF_INSN_LDUB; goto extract_fmt_ldub;
      case 7 :
d588 1
a588 2
          unsigned int val = (((insn >> 4) & (15 << 0)));
          switch (val)
d590 13
a602 5
          case 0 : itype = FR30BF_INSN_LDR15GR; goto extract_fmt_ldr15gr;
          case 1 : itype = FR30BF_INSN_MOV2PS; goto extract_fmt_mov2ps;
          case 8 : itype = FR30BF_INSN_LDR15DR; goto extract_fmt_ldr15dr;
          case 9 : itype = FR30BF_INSN_LDR15PS; goto extract_fmt_ldr15ps;
          default : itype = FR30BF_INSN_X_INVALID; goto extract_fmt_empty;
d604 1
a604 20
        }
      case 8 : itype = FR30BF_INSN_DMOV2R13; goto extract_fmt_dmov2r13;
      case 9 : itype = FR30BF_INSN_DMOV2R13H; goto extract_fmt_dmov2r13h;
      case 10 : itype = FR30BF_INSN_DMOV2R13B; goto extract_fmt_dmov2r13b;
      case 11 : itype = FR30BF_INSN_DMOV2R15PD; goto extract_fmt_dmov2r15pd;
      case 12 : itype = FR30BF_INSN_DMOV2R13PI; goto extract_fmt_dmov2r13pi;
      case 13 : itype = FR30BF_INSN_DMOV2R13PIH; goto extract_fmt_dmov2r13pih;
      case 14 : itype = FR30BF_INSN_DMOV2R13PIB; goto extract_fmt_dmov2r13pib;
      case 15 : itype = FR30BF_INSN_ENTER; goto extract_fmt_enter;
      case 16 : itype = FR30BF_INSN_STR13; goto extract_fmt_str13;
      case 17 : itype = FR30BF_INSN_STR13H; goto extract_fmt_str13h;
      case 18 : itype = FR30BF_INSN_STR13B; goto extract_fmt_str13b;
      case 19 : itype = FR30BF_INSN_STR15; goto extract_fmt_str15;
      case 20 : itype = FR30BF_INSN_ST; goto extract_fmt_st;
      case 21 : itype = FR30BF_INSN_STH; goto extract_fmt_sth;
      case 22 : itype = FR30BF_INSN_STB; goto extract_fmt_stb;
      case 23 :
        {
          unsigned int val = (((insn >> 4) & (15 << 0)));
          switch (val)
d606 13
a618 5
          case 0 : itype = FR30BF_INSN_STR15GR; goto extract_fmt_str15gr;
          case 1 : itype = FR30BF_INSN_MOVPS; goto extract_fmt_movps;
          case 8 : itype = FR30BF_INSN_STR15DR; goto extract_fmt_str15dr;
          case 9 : itype = FR30BF_INSN_STR15PS; goto extract_fmt_str15ps;
          default : itype = FR30BF_INSN_X_INVALID; goto extract_fmt_empty;
d620 1
a620 132
        }
      case 24 : itype = FR30BF_INSN_DMOVR13; goto extract_fmt_dmovr13;
      case 25 : itype = FR30BF_INSN_DMOVR13H; goto extract_fmt_dmovr13h;
      case 26 : itype = FR30BF_INSN_DMOVR13B; goto extract_fmt_dmovr13b;
      case 27 : itype = FR30BF_INSN_DMOVR15PI; goto extract_fmt_dmovr15pi;
      case 28 : itype = FR30BF_INSN_DMOVR13PI; goto extract_fmt_dmovr13pi;
      case 29 : itype = FR30BF_INSN_DMOVR13PIH; goto extract_fmt_dmovr13pih;
      case 30 : itype = FR30BF_INSN_DMOVR13PIB; goto extract_fmt_dmovr13pib;
      case 31 : itype = FR30BF_INSN_INT; goto extract_fmt_int;
      case 32 : /* fall through */
      case 33 : /* fall through */
      case 34 : /* fall through */
      case 35 : /* fall through */
      case 36 : /* fall through */
      case 37 : /* fall through */
      case 38 : /* fall through */
      case 39 : /* fall through */
      case 40 : /* fall through */
      case 41 : /* fall through */
      case 42 : /* fall through */
      case 43 : /* fall through */
      case 44 : /* fall through */
      case 45 : /* fall through */
      case 46 : /* fall through */
      case 47 : itype = FR30BF_INSN_LDR14; goto extract_fmt_ldr14;
      case 48 : /* fall through */
      case 49 : /* fall through */
      case 50 : /* fall through */
      case 51 : /* fall through */
      case 52 : /* fall through */
      case 53 : /* fall through */
      case 54 : /* fall through */
      case 55 : /* fall through */
      case 56 : /* fall through */
      case 57 : /* fall through */
      case 58 : /* fall through */
      case 59 : /* fall through */
      case 60 : /* fall through */
      case 61 : /* fall through */
      case 62 : /* fall through */
      case 63 : itype = FR30BF_INSN_STR14; goto extract_fmt_str14;
      case 64 : /* fall through */
      case 65 : /* fall through */
      case 66 : /* fall through */
      case 67 : /* fall through */
      case 68 : /* fall through */
      case 69 : /* fall through */
      case 70 : /* fall through */
      case 71 : /* fall through */
      case 72 : /* fall through */
      case 73 : /* fall through */
      case 74 : /* fall through */
      case 75 : /* fall through */
      case 76 : /* fall through */
      case 77 : /* fall through */
      case 78 : /* fall through */
      case 79 : itype = FR30BF_INSN_LDR14UH; goto extract_fmt_ldr14uh;
      case 80 : /* fall through */
      case 81 : /* fall through */
      case 82 : /* fall through */
      case 83 : /* fall through */
      case 84 : /* fall through */
      case 85 : /* fall through */
      case 86 : /* fall through */
      case 87 : /* fall through */
      case 88 : /* fall through */
      case 89 : /* fall through */
      case 90 : /* fall through */
      case 91 : /* fall through */
      case 92 : /* fall through */
      case 93 : /* fall through */
      case 94 : /* fall through */
      case 95 : itype = FR30BF_INSN_STR14H; goto extract_fmt_str14h;
      case 96 : /* fall through */
      case 97 : /* fall through */
      case 98 : /* fall through */
      case 99 : /* fall through */
      case 100 : /* fall through */
      case 101 : /* fall through */
      case 102 : /* fall through */
      case 103 : /* fall through */
      case 104 : /* fall through */
      case 105 : /* fall through */
      case 106 : /* fall through */
      case 107 : /* fall through */
      case 108 : /* fall through */
      case 109 : /* fall through */
      case 110 : /* fall through */
      case 111 : itype = FR30BF_INSN_LDR14UB; goto extract_fmt_ldr14ub;
      case 112 : /* fall through */
      case 113 : /* fall through */
      case 114 : /* fall through */
      case 115 : /* fall through */
      case 116 : /* fall through */
      case 117 : /* fall through */
      case 118 : /* fall through */
      case 119 : /* fall through */
      case 120 : /* fall through */
      case 121 : /* fall through */
      case 122 : /* fall through */
      case 123 : /* fall through */
      case 124 : /* fall through */
      case 125 : /* fall through */
      case 126 : /* fall through */
      case 127 : itype = FR30BF_INSN_STR14B; goto extract_fmt_str14b;
      case 128 : itype = FR30BF_INSN_BANDL; goto extract_fmt_bandl;
      case 129 : itype = FR30BF_INSN_BANDH; goto extract_fmt_bandl;
      case 130 : itype = FR30BF_INSN_AND; goto extract_fmt_and;
      case 131 : itype = FR30BF_INSN_ANDCCR; goto extract_fmt_andccr;
      case 132 : itype = FR30BF_INSN_ANDM; goto extract_fmt_andm;
      case 133 : itype = FR30BF_INSN_ANDH; goto extract_fmt_andh;
      case 134 : itype = FR30BF_INSN_ANDB; goto extract_fmt_andb;
      case 135 : itype = FR30BF_INSN_STILM; goto extract_fmt_stilm;
      case 136 : itype = FR30BF_INSN_BTSTL; goto extract_fmt_btstl;
      case 137 : itype = FR30BF_INSN_BTSTH; goto extract_fmt_btstl;
      case 138 : itype = FR30BF_INSN_XCHB; goto extract_fmt_xchb;
      case 139 : itype = FR30BF_INSN_MOV; goto extract_fmt_mov;
      case 140 : itype = FR30BF_INSN_LDM0; goto extract_fmt_ldm0;
      case 141 : itype = FR30BF_INSN_LDM1; goto extract_fmt_ldm1;
      case 142 : itype = FR30BF_INSN_STM0; goto extract_fmt_stm0;
      case 143 : itype = FR30BF_INSN_STM1; goto extract_fmt_stm1;
      case 144 : itype = FR30BF_INSN_BORL; goto extract_fmt_bandl;
      case 145 : itype = FR30BF_INSN_BORH; goto extract_fmt_bandl;
      case 146 : itype = FR30BF_INSN_OR; goto extract_fmt_and;
      case 147 : itype = FR30BF_INSN_ORCCR; goto extract_fmt_andccr;
      case 148 : itype = FR30BF_INSN_ORM; goto extract_fmt_andm;
      case 149 : itype = FR30BF_INSN_ORH; goto extract_fmt_andh;
      case 150 : itype = FR30BF_INSN_ORB; goto extract_fmt_andb;
      case 151 :
        {
          unsigned int val = (((insn >> 4) & (15 << 0)));
          switch (val)
d622 13
a634 13
          case 0 : itype = FR30BF_INSN_JMP; goto extract_fmt_jmp;
          case 1 : itype = FR30BF_INSN_CALLR; goto extract_fmt_callr;
          case 2 : itype = FR30BF_INSN_RET; goto extract_fmt_ret;
          case 3 : itype = FR30BF_INSN_RETI; goto extract_fmt_reti;
          case 4 : itype = FR30BF_INSN_DIV0S; goto extract_fmt_div0s;
          case 5 : itype = FR30BF_INSN_DIV0U; goto extract_fmt_div0u;
          case 6 : itype = FR30BF_INSN_DIV1; goto extract_fmt_div1;
          case 7 : itype = FR30BF_INSN_DIV2; goto extract_fmt_div2;
          case 8 : itype = FR30BF_INSN_EXTSB; goto extract_fmt_extsb;
          case 9 : itype = FR30BF_INSN_EXTUB; goto extract_fmt_extub;
          case 10 : itype = FR30BF_INSN_EXTSH; goto extract_fmt_extsh;
          case 11 : itype = FR30BF_INSN_EXTUH; goto extract_fmt_extuh;
          default : itype = FR30BF_INSN_X_INVALID; goto extract_fmt_empty;
d636 1
a636 12
        }
      case 152 : itype = FR30BF_INSN_BEORL; goto extract_fmt_bandl;
      case 153 : itype = FR30BF_INSN_BEORH; goto extract_fmt_bandl;
      case 154 : itype = FR30BF_INSN_EOR; goto extract_fmt_and;
      case 155 : itype = FR30BF_INSN_LDI20; goto extract_fmt_ldi20;
      case 156 : itype = FR30BF_INSN_EORM; goto extract_fmt_andm;
      case 157 : itype = FR30BF_INSN_EORH; goto extract_fmt_andh;
      case 158 : itype = FR30BF_INSN_EORB; goto extract_fmt_andb;
      case 159 :
        {
          unsigned int val = (((insn >> 4) & (15 << 0)));
          switch (val)
d638 13
a650 14
          case 0 : itype = FR30BF_INSN_JMPD; goto extract_fmt_jmp;
          case 1 : itype = FR30BF_INSN_CALLRD; goto extract_fmt_callr;
          case 2 : itype = FR30BF_INSN_RET_D; goto extract_fmt_ret;
          case 3 : itype = FR30BF_INSN_INTE; goto extract_fmt_inte;
          case 6 : itype = FR30BF_INSN_DIV3; goto extract_fmt_div3;
          case 7 : itype = FR30BF_INSN_DIV4S; goto extract_fmt_div4s;
          case 8 : itype = FR30BF_INSN_LDI32; goto extract_fmt_ldi32;
          case 9 : itype = FR30BF_INSN_LEAVE; goto extract_fmt_leave;
          case 10 : itype = FR30BF_INSN_NOP; goto extract_fmt_nop;
          case 12 : itype = FR30BF_INSN_COPOP; goto extract_fmt_copop;
          case 13 : itype = FR30BF_INSN_COPLD; goto extract_fmt_copld;
          case 14 : itype = FR30BF_INSN_COPST; goto extract_fmt_copst;
          case 15 : itype = FR30BF_INSN_COPSV; goto extract_fmt_copst;
          default : itype = FR30BF_INSN_X_INVALID; goto extract_fmt_empty;
d652 3
d656 1
a656 97
      case 160 : itype = FR30BF_INSN_ADDNI; goto extract_fmt_addni;
      case 161 : itype = FR30BF_INSN_ADDN2; goto extract_fmt_addn2;
      case 162 : itype = FR30BF_INSN_ADDN; goto extract_fmt_addn;
      case 163 : itype = FR30BF_INSN_ADDSP; goto extract_fmt_addsp;
      case 164 : itype = FR30BF_INSN_ADDI; goto extract_fmt_addi;
      case 165 : itype = FR30BF_INSN_ADD2; goto extract_fmt_add2;
      case 166 : itype = FR30BF_INSN_ADD; goto extract_fmt_add;
      case 167 : itype = FR30BF_INSN_ADDC; goto extract_fmt_addc;
      case 168 : itype = FR30BF_INSN_CMPI; goto extract_fmt_cmpi;
      case 169 : itype = FR30BF_INSN_CMP2; goto extract_fmt_cmp2;
      case 170 : itype = FR30BF_INSN_CMP; goto extract_fmt_cmp;
      case 171 : itype = FR30BF_INSN_MULU; goto extract_fmt_mulu;
      case 172 : itype = FR30BF_INSN_SUB; goto extract_fmt_add;
      case 173 : itype = FR30BF_INSN_SUBC; goto extract_fmt_addc;
      case 174 : itype = FR30BF_INSN_SUBN; goto extract_fmt_addn;
      case 175 : itype = FR30BF_INSN_MUL; goto extract_fmt_mul;
      case 176 : itype = FR30BF_INSN_LSRI; goto extract_fmt_lsli;
      case 177 : itype = FR30BF_INSN_LSR2; goto extract_fmt_lsli;
      case 178 : itype = FR30BF_INSN_LSR; goto extract_fmt_lsl;
      case 179 : itype = FR30BF_INSN_MOV2DR; goto extract_fmt_mov2dr;
      case 180 : itype = FR30BF_INSN_LSLI; goto extract_fmt_lsli;
      case 181 : itype = FR30BF_INSN_LSL2; goto extract_fmt_lsli;
      case 182 : itype = FR30BF_INSN_LSL; goto extract_fmt_lsl;
      case 183 : itype = FR30BF_INSN_MOVDR; goto extract_fmt_movdr;
      case 184 : itype = FR30BF_INSN_ASRI; goto extract_fmt_lsli;
      case 185 : itype = FR30BF_INSN_ASR2; goto extract_fmt_lsli;
      case 186 : itype = FR30BF_INSN_ASR; goto extract_fmt_lsl;
      case 187 : itype = FR30BF_INSN_MULUH; goto extract_fmt_mulh;
      case 188 : itype = FR30BF_INSN_LDRES; goto extract_fmt_ldres;
      case 189 : itype = FR30BF_INSN_STRES; goto extract_fmt_ldres;
      case 191 : itype = FR30BF_INSN_MULH; goto extract_fmt_mulh;
      case 192 : /* fall through */
      case 193 : /* fall through */
      case 194 : /* fall through */
      case 195 : /* fall through */
      case 196 : /* fall through */
      case 197 : /* fall through */
      case 198 : /* fall through */
      case 199 : /* fall through */
      case 200 : /* fall through */
      case 201 : /* fall through */
      case 202 : /* fall through */
      case 203 : /* fall through */
      case 204 : /* fall through */
      case 205 : /* fall through */
      case 206 : /* fall through */
      case 207 : itype = FR30BF_INSN_LDI8; goto extract_fmt_ldi8;
      case 208 : /* fall through */
      case 209 : /* fall through */
      case 210 : /* fall through */
      case 211 : /* fall through */
      case 212 : /* fall through */
      case 213 : /* fall through */
      case 214 : /* fall through */
      case 215 : itype = FR30BF_INSN_CALL; goto extract_fmt_call;
      case 216 : /* fall through */
      case 217 : /* fall through */
      case 218 : /* fall through */
      case 219 : /* fall through */
      case 220 : /* fall through */
      case 221 : /* fall through */
      case 222 : /* fall through */
      case 223 : itype = FR30BF_INSN_CALLD; goto extract_fmt_call;
      case 224 : itype = FR30BF_INSN_BRA; goto extract_fmt_brad;
      case 225 : itype = FR30BF_INSN_BNO; goto extract_fmt_bnod;
      case 226 : itype = FR30BF_INSN_BEQ; goto extract_fmt_beqd;
      case 227 : itype = FR30BF_INSN_BNE; goto extract_fmt_beqd;
      case 228 : itype = FR30BF_INSN_BC; goto extract_fmt_bcd;
      case 229 : itype = FR30BF_INSN_BNC; goto extract_fmt_bcd;
      case 230 : itype = FR30BF_INSN_BN; goto extract_fmt_bnd;
      case 231 : itype = FR30BF_INSN_BP; goto extract_fmt_bnd;
      case 232 : itype = FR30BF_INSN_BV; goto extract_fmt_bvd;
      case 233 : itype = FR30BF_INSN_BNV; goto extract_fmt_bvd;
      case 234 : itype = FR30BF_INSN_BLT; goto extract_fmt_bltd;
      case 235 : itype = FR30BF_INSN_BGE; goto extract_fmt_bltd;
      case 236 : itype = FR30BF_INSN_BLE; goto extract_fmt_bled;
      case 237 : itype = FR30BF_INSN_BGT; goto extract_fmt_bled;
      case 238 : itype = FR30BF_INSN_BLS; goto extract_fmt_blsd;
      case 239 : itype = FR30BF_INSN_BHI; goto extract_fmt_blsd;
      case 240 : itype = FR30BF_INSN_BRAD; goto extract_fmt_brad;
      case 241 : itype = FR30BF_INSN_BNOD; goto extract_fmt_bnod;
      case 242 : itype = FR30BF_INSN_BEQD; goto extract_fmt_beqd;
      case 243 : itype = FR30BF_INSN_BNED; goto extract_fmt_beqd;
      case 244 : itype = FR30BF_INSN_BCD; goto extract_fmt_bcd;
      case 245 : itype = FR30BF_INSN_BNCD; goto extract_fmt_bcd;
      case 246 : itype = FR30BF_INSN_BND; goto extract_fmt_bnd;
      case 247 : itype = FR30BF_INSN_BPD; goto extract_fmt_bnd;
      case 248 : itype = FR30BF_INSN_BVD; goto extract_fmt_bvd;
      case 249 : itype = FR30BF_INSN_BNVD; goto extract_fmt_bvd;
      case 250 : itype = FR30BF_INSN_BLTD; goto extract_fmt_bltd;
      case 251 : itype = FR30BF_INSN_BGED; goto extract_fmt_bltd;
      case 252 : itype = FR30BF_INSN_BLED; goto extract_fmt_bled;
      case 253 : itype = FR30BF_INSN_BGTD; goto extract_fmt_bled;
      case 254 : itype = FR30BF_INSN_BLSD; goto extract_fmt_blsd;
      case 255 : itype = FR30BF_INSN_BHID; goto extract_fmt_blsd;
      default : itype = FR30BF_INSN_X_INVALID; goto extract_fmt_empty;
      }
d658 2
d664 8
a671 1
 extract_fmt_empty:
a672 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d683 1
a683 1
    return idesc;
d686 1
a686 1
 extract_fmt_add:
a687 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d709 1
a709 1
    return idesc;
d712 1
a712 1
 extract_fmt_addi:
a713 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d734 1
a734 1
    return idesc;
d737 1
a737 1
 extract_fmt_add2:
a738 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d759 1
a759 1
    return idesc;
d762 1
a762 1
 extract_fmt_addc:
a763 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d785 1
a785 1
    return idesc;
d788 1
a788 1
 extract_fmt_addn:
a789 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d811 1
a811 1
    return idesc;
d814 1
a814 1
 extract_fmt_addni:
a815 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d836 1
a836 1
    return idesc;
d839 1
a839 1
 extract_fmt_addn2:
a840 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d861 1
a861 1
    return idesc;
d864 1
a864 1
 extract_fmt_cmp:
a865 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d886 1
a886 1
    return idesc;
d889 1
a889 1
 extract_fmt_cmpi:
a890 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d910 1
a910 1
    return idesc;
d913 1
a913 1
 extract_fmt_cmp2:
a914 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d934 1
a934 1
    return idesc;
d937 1
a937 1
 extract_fmt_and:
a938 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d960 1
a960 1
    return idesc;
d963 1
a963 1
 extract_fmt_andm:
a964 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d985 1
a985 1
    return idesc;
d988 1
a988 1
 extract_fmt_andh:
a989 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d1010 1
a1010 1
    return idesc;
d1013 1
a1013 1
 extract_fmt_andb:
a1014 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d1035 1
a1035 1
    return idesc;
d1038 1
a1038 1
 extract_fmt_bandl:
a1039 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d1059 1
a1059 1
    return idesc;
d1062 1
a1062 1
 extract_fmt_btstl:
a1063 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d1083 1
a1083 1
    return idesc;
d1086 1
a1086 1
 extract_fmt_mul:
a1087 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d1108 1
a1108 1
    return idesc;
d1111 1
a1111 1
 extract_fmt_mulu:
a1112 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d1133 1
a1133 1
    return idesc;
d1136 1
a1136 1
 extract_fmt_mulh:
a1137 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d1158 1
a1158 1
    return idesc;
d1161 1
a1161 1
 extract_fmt_div0s:
a1162 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d1181 1
a1181 1
    return idesc;
d1184 1
a1184 1
 extract_fmt_div0u:
a1185 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d1196 1
a1196 1
    return idesc;
d1199 1
a1199 1
 extract_fmt_div1:
a1200 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d1219 1
a1219 1
    return idesc;
d1222 1
a1222 1
 extract_fmt_div2:
a1223 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d1242 1
a1242 1
    return idesc;
d1245 1
a1245 1
 extract_fmt_div3:
a1246 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d1257 1
a1257 1
    return idesc;
d1260 1
a1260 1
 extract_fmt_div4s:
a1261 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d1272 1
a1272 1
    return idesc;
d1275 1
a1275 1
 extract_fmt_lsl:
a1276 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d1298 1
a1298 1
    return idesc;
d1301 1
a1301 1
 extract_fmt_lsli:
a1302 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d1323 1
a1323 1
    return idesc;
d1326 1
a1326 1
 extract_fmt_ldi8:
a1327 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d1347 1
a1347 1
    return idesc;
d1350 1
a1350 1
 extract_fmt_ldi20:
a1351 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d1371 1
a1371 1
    return idesc;
d1374 1
a1374 1
 extract_fmt_ldi32:
a1375 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d1395 1
a1395 1
    return idesc;
d1398 1
a1398 1
 extract_fmt_ld:
a1399 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d1420 1
a1420 1
    return idesc;
d1423 1
a1423 1
 extract_fmt_lduh:
a1424 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d1445 1
a1445 1
    return idesc;
d1448 1
a1448 1
 extract_fmt_ldub:
a1449 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d1470 1
a1470 1
    return idesc;
d1473 1
a1473 1
 extract_fmt_ldr13:
a1474 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d1496 1
a1496 1
    return idesc;
d1499 1
a1499 1
 extract_fmt_ldr13uh:
a1500 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d1522 1
a1522 1
    return idesc;
d1525 1
a1525 1
 extract_fmt_ldr13ub:
a1526 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d1548 1
a1548 1
    return idesc;
d1551 1
a1551 1
 extract_fmt_ldr14:
a1552 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d1573 1
a1573 1
    return idesc;
d1576 1
a1576 1
 extract_fmt_ldr14uh:
a1577 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d1598 1
a1598 1
    return idesc;
d1601 1
a1601 1
 extract_fmt_ldr14ub:
a1602 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d1623 1
a1623 1
    return idesc;
d1626 1
a1626 1
 extract_fmt_ldr15:
a1627 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d1648 1
a1648 1
    return idesc;
d1651 1
a1651 1
 extract_fmt_ldr15gr:
a1652 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d1674 1
a1674 1
    return idesc;
d1677 1
a1677 1
 extract_fmt_ldr15dr:
a1678 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d1698 1
a1698 1
    return idesc;
d1701 1
a1701 1
 extract_fmt_ldr15ps:
a1702 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d1721 1
a1721 1
    return idesc;
d1724 1
a1724 1
 extract_fmt_st:
a1725 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d1746 1
a1746 1
    return idesc;
d1749 1
a1749 1
 extract_fmt_sth:
a1750 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d1771 1
a1771 1
    return idesc;
d1774 1
a1774 1
 extract_fmt_stb:
a1775 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d1796 1
a1796 1
    return idesc;
d1799 1
a1799 1
 extract_fmt_str13:
a1800 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d1822 1
a1822 1
    return idesc;
d1825 1
a1825 1
 extract_fmt_str13h:
a1826 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d1848 1
a1848 1
    return idesc;
d1851 1
a1851 1
 extract_fmt_str13b:
a1852 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d1874 1
a1874 1
    return idesc;
d1877 1
a1877 1
 extract_fmt_str14:
a1878 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d1899 1
a1899 1
    return idesc;
d1902 1
a1902 1
 extract_fmt_str14h:
a1903 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d1924 1
a1924 1
    return idesc;
d1927 1
a1927 1
 extract_fmt_str14b:
a1928 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d1949 1
a1949 1
    return idesc;
d1952 1
a1952 1
 extract_fmt_str15:
a1953 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d1974 1
a1974 1
    return idesc;
d1977 1
a1977 1
 extract_fmt_str15gr:
a1978 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d1999 1
a1999 1
    return idesc;
d2002 1
a2002 1
 extract_fmt_str15dr:
a2003 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d2023 1
a2023 1
    return idesc;
d2026 1
a2026 1
 extract_fmt_str15ps:
a2027 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d2046 1
a2046 1
    return idesc;
d2049 1
a2049 1
 extract_fmt_mov:
a2050 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d2071 1
a2071 1
    return idesc;
d2074 1
a2074 1
 extract_fmt_movdr:
a2075 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d2095 1
a2095 1
    return idesc;
d2098 1
a2098 1
 extract_fmt_movps:
a2099 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d2118 1
a2118 1
    return idesc;
d2121 1
a2121 1
 extract_fmt_mov2dr:
a2122 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d2142 1
a2142 1
    return idesc;
d2145 1
a2145 1
 extract_fmt_mov2ps:
a2146 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d2165 1
a2165 1
    return idesc;
d2168 1
a2168 1
 extract_fmt_jmp:
a2169 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d2189 1
a2189 1
    return idesc;
d2192 1
a2192 1
 extract_fmt_callr:
a2193 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d2213 1
a2213 1
    return idesc;
d2216 1
a2216 1
 extract_fmt_call:
a2217 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d2236 1
a2236 1
    return idesc;
d2239 1
a2239 1
 extract_fmt_ret:
a2240 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d2258 1
a2258 1
    return idesc;
d2261 1
a2261 1
 extract_fmt_int:
a2262 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d2281 1
a2281 1
    return idesc;
d2284 1
a2284 1
 extract_fmt_inte:
a2285 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d2303 1
a2303 1
    return idesc;
d2306 1
a2306 1
 extract_fmt_reti:
a2307 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d2325 1
a2325 1
    return idesc;
d2328 1
a2328 1
 extract_fmt_brad:
a2329 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d2348 1
a2348 1
    return idesc;
d2351 1
a2351 1
 extract_fmt_bnod:
a2352 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d2363 1
a2363 1
    return idesc;
d2366 1
a2366 1
 extract_fmt_beqd:
a2367 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d2386 1
a2386 1
    return idesc;
d2389 1
a2389 1
 extract_fmt_bcd:
a2390 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d2409 1
a2409 1
    return idesc;
d2412 1
a2412 1
 extract_fmt_bnd:
a2413 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d2432 1
a2432 1
    return idesc;
d2435 1
a2435 1
 extract_fmt_bvd:
a2436 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d2455 1
a2455 1
    return idesc;
d2458 1
a2458 1
 extract_fmt_bltd:
a2459 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d2478 1
a2478 1
    return idesc;
d2481 1
a2481 1
 extract_fmt_bled:
a2482 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d2501 1
a2501 1
    return idesc;
d2504 1
a2504 1
 extract_fmt_blsd:
a2505 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d2524 1
a2524 1
    return idesc;
d2527 1
a2527 1
 extract_fmt_dmovr13:
a2528 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d2547 1
a2547 1
    return idesc;
d2550 1
a2550 1
 extract_fmt_dmovr13h:
a2551 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d2570 1
a2570 1
    return idesc;
d2573 1
a2573 1
 extract_fmt_dmovr13b:
a2574 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d2593 1
a2593 1
    return idesc;
d2596 1
a2596 1
 extract_fmt_dmovr13pi:
a2597 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d2617 1
a2617 1
    return idesc;
d2620 1
a2620 1
 extract_fmt_dmovr13pih:
a2621 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d2641 1
a2641 1
    return idesc;
d2644 1
a2644 1
 extract_fmt_dmovr13pib:
a2645 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d2665 1
a2665 1
    return idesc;
d2668 1
a2668 1
 extract_fmt_dmovr15pi:
a2669 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d2689 1
a2689 1
    return idesc;
d2692 1
a2692 1
 extract_fmt_dmov2r13:
a2693 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d2712 1
a2712 1
    return idesc;
d2715 1
a2715 1
 extract_fmt_dmov2r13h:
a2716 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d2735 1
a2735 1
    return idesc;
d2738 1
a2738 1
 extract_fmt_dmov2r13b:
a2739 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d2758 1
a2758 1
    return idesc;
d2761 1
a2761 1
 extract_fmt_dmov2r13pi:
a2762 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d2782 1
a2782 1
    return idesc;
d2785 1
a2785 1
 extract_fmt_dmov2r13pih:
a2786 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d2806 1
a2806 1
    return idesc;
d2809 1
a2809 1
 extract_fmt_dmov2r13pib:
a2810 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d2830 1
a2830 1
    return idesc;
d2833 1
a2833 1
 extract_fmt_dmov2r15pd:
a2834 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d2854 1
a2854 1
    return idesc;
d2857 1
a2857 1
 extract_fmt_ldres:
a2858 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d2878 1
a2878 1
    return idesc;
d2881 1
a2881 1
 extract_fmt_copop:
a2882 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d2893 1
a2893 1
    return idesc;
d2896 1
a2896 1
 extract_fmt_copld:
a2897 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d2908 1
a2908 1
    return idesc;
d2911 1
a2911 1
 extract_fmt_copst:
a2912 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d2923 1
a2923 1
    return idesc;
d2926 1
a2926 1
 extract_fmt_nop:
a2927 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d2938 1
a2938 1
    return idesc;
d2941 1
a2941 1
 extract_fmt_andccr:
a2942 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d2954 1
a2954 1
    return idesc;
d2957 1
a2957 1
 extract_fmt_stilm:
a2958 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d2970 1
a2970 1
    return idesc;
d2973 1
a2973 1
 extract_fmt_addsp:
a2974 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d2994 1
a2994 1
    return idesc;
d2997 1
a2997 1
 extract_fmt_extsb:
a2998 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d3018 1
a3018 1
    return idesc;
d3021 1
a3021 1
 extract_fmt_extub:
a3022 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d3042 1
a3042 1
    return idesc;
d3045 1
a3045 1
 extract_fmt_extsh:
a3046 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d3066 1
a3066 1
    return idesc;
d3069 1
a3069 1
 extract_fmt_extuh:
a3070 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d3090 1
a3090 1
    return idesc;
d3093 1
a3093 1
 extract_fmt_ldm0:
a3094 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d3122 1
a3122 1
    return idesc;
d3125 1
a3125 1
 extract_fmt_ldm1:
a3126 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d3153 1
a3153 1
    return idesc;
d3156 1
a3156 1
 extract_fmt_stm0:
a3157 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d3185 1
a3185 1
    return idesc;
d3188 1
a3188 1
 extract_fmt_stm1:
a3189 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d3216 1
a3216 1
    return idesc;
d3219 1
a3219 1
 extract_fmt_enter:
a3220 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d3242 1
a3242 1
    return idesc;
d3245 1
a3245 1
 extract_fmt_leave:
a3246 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d3267 1
a3267 1
    return idesc;
d3270 1
a3270 1
 extract_fmt_xchb:
a3271 1
    const IDESC *idesc = &fr30bf_insn_data[itype];
d3293 7
a3299 1
    return idesc;
d3302 1
@


1.1.1.3
log
@import gdb-1999-07-07 pre reformat
@
text
@d326 2
a327 2
      case 1 : itype = FR30BF_INSN_LDR13UH; goto extract_fmt_ldr13;
      case 2 : itype = FR30BF_INSN_LDR13UB; goto extract_fmt_ldr13;
d330 2
a331 2
      case 5 : itype = FR30BF_INSN_LDUH; goto extract_fmt_ld;
      case 6 : itype = FR30BF_INSN_LDUB; goto extract_fmt_ld;
d353 2
a354 2
      case 17 : itype = FR30BF_INSN_STR13H; goto extract_fmt_str13;
      case 18 : itype = FR30BF_INSN_STR13B; goto extract_fmt_str13;
d357 2
a358 2
      case 21 : itype = FR30BF_INSN_STH; goto extract_fmt_st;
      case 22 : itype = FR30BF_INSN_STB; goto extract_fmt_st;
d538 1
a538 1
          case 10 : itype = FR30BF_INSN_NOP; goto extract_fmt_bnod;
d540 3
a542 3
          case 13 : itype = FR30BF_INSN_COPLD; goto extract_fmt_copop;
          case 14 : itype = FR30BF_INSN_COPST; goto extract_fmt_copop;
          case 15 : itype = FR30BF_INSN_COPSV; goto extract_fmt_copop;
d653 1
d655 1
d669 1
a669 2
    UINT f_Rj;
    UINT f_Ri;
d671 1
a671 2
    f_Rj = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
d696 1
a696 2
    UINT f_u4;
    UINT f_Ri;
d698 1
a698 2
    f_u4 = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
d722 1
a722 2
    SI f_m4;
    UINT f_Ri;
d724 1
a724 2
    f_m4 = ((EXTRACT_MSB0_UINT (insn, 16, 8, 4)) | (((-1) << (4))));
    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
d748 1
a748 2
    UINT f_Rj;
    UINT f_Ri;
d750 1
a750 2
    f_Rj = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
d775 1
a775 2
    UINT f_Rj;
    UINT f_Ri;
d777 1
a777 2
    f_Rj = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
d802 1
a802 2
    UINT f_u4;
    UINT f_Ri;
d804 1
a804 2
    f_u4 = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
d828 1
a828 2
    SI f_m4;
    UINT f_Ri;
d830 1
a830 2
    f_m4 = ((EXTRACT_MSB0_UINT (insn, 16, 8, 4)) | (((-1) << (4))));
    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
d854 1
a854 2
    UINT f_Rj;
    UINT f_Ri;
d856 1
a856 2
    f_Rj = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
d880 1
a880 2
    UINT f_u4;
    UINT f_Ri;
d882 1
a882 2
    f_u4 = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
d905 1
a905 2
    SI f_m4;
    UINT f_Ri;
d907 1
a907 2
    f_m4 = ((EXTRACT_MSB0_UINT (insn, 16, 8, 4)) | (((-1) << (4))));
    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
d930 1
a930 2
    UINT f_Rj;
    UINT f_Ri;
d932 1
a932 2
    f_Rj = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
d957 1
a957 2
    UINT f_Rj;
    UINT f_Ri;
d959 1
a959 2
    f_Rj = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
d983 1
a983 2
    UINT f_Rj;
    UINT f_Ri;
d985 1
a985 2
    f_Rj = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
d1009 1
a1009 2
    UINT f_Rj;
    UINT f_Ri;
d1011 1
a1011 2
    f_Rj = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
d1035 1
a1035 2
    UINT f_u4;
    UINT f_Ri;
d1037 1
a1037 2
    f_u4 = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
d1060 1
a1060 2
    UINT f_u4;
    UINT f_Ri;
d1062 1
a1062 2
    f_u4 = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
d1085 1
a1085 2
    UINT f_Rj;
    UINT f_Ri;
d1087 1
a1087 2
    f_Rj = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
d1111 1
a1111 2
    UINT f_Rj;
    UINT f_Ri;
d1113 1
a1113 2
    f_Rj = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
d1137 1
a1137 2
    UINT f_Rj;
    UINT f_Ri;
d1139 1
a1139 2
    f_Rj = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
d1163 1
a1163 1
    UINT f_Ri;
d1165 1
a1165 1
    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
d1187 1
d1189 1
d1203 1
a1203 1
    UINT f_Ri;
d1205 1
a1205 1
    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
d1227 1
a1227 1
    UINT f_Ri;
d1229 1
a1229 1
    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
d1251 1
d1253 1
d1267 1
d1269 1
d1283 1
a1283 2
    UINT f_Rj;
    UINT f_Ri;
d1285 1
a1285 2
    f_Rj = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
d1310 1
a1310 2
    UINT f_u4;
    UINT f_Ri;
d1312 1
a1312 2
    f_u4 = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
d1336 1
a1336 2
    UINT f_i8;
    UINT f_Ri;
d1338 1
a1338 2
    f_i8 = EXTRACT_MSB0_UINT (insn, 16, 4, 8);
    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
d1361 3
a1363 14
    UINT f_i20_16;
    UINT f_i20_4;
    UINT f_Ri;
    UINT f_i20;
    /* Contents of trailing part of insn.  */
    UINT word_1;

  word_1 = GETIMEMUHI (current_cpu, pc + 2);
    f_i20_16 = (0|(EXTRACT_MSB0_UINT (word_1, 16, 0, 16) << 0));
    f_i20_4 = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
{
  f_i20 = ((((f_i20_4) << (16))) | (f_i20_16));
}
d1386 3
a1388 10
    UINT f_i32;
    UINT f_Ri;
    /* Contents of trailing part of insn.  */
    UINT word_1;
    UINT word_2;

  word_1 = GETIMEMUHI (current_cpu, pc + 2);
  word_2 = GETIMEMUHI (current_cpu, pc + 4);
    f_i32 = (0|(EXTRACT_MSB0_UINT (word_2, 16, 0, 16) << 0)|(EXTRACT_MSB0_UINT (word_1, 16, 0, 16) << 16));
    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
d1411 1
a1411 2
    UINT f_Rj;
    UINT f_Ri;
d1413 1
a1413 2
    f_Rj = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
d1432 52
d1489 1
a1489 2
    UINT f_Rj;
    UINT f_Ri;
d1491 1
a1491 2
    f_Rj = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
d1511 54
d1570 1
a1570 2
    SI f_disp10;
    UINT f_Ri;
d1572 1
a1572 2
    f_disp10 = ((EXTRACT_MSB0_INT (insn, 16, 4, 8)) << (2));
    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
d1596 1
a1596 2
    SI f_disp9;
    UINT f_Ri;
d1598 1
a1598 2
    f_disp9 = ((EXTRACT_MSB0_INT (insn, 16, 4, 8)) << (1));
    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
d1622 1
a1622 2
    INT f_disp8;
    UINT f_Ri;
d1624 1
a1624 2
    f_disp8 = EXTRACT_MSB0_INT (insn, 16, 4, 8);
    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
d1648 1
a1648 2
    USI f_udisp6;
    UINT f_Ri;
d1650 1
a1650 2
    f_udisp6 = ((EXTRACT_MSB0_UINT (insn, 16, 8, 4)) << (2));
    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
d1674 1
a1674 1
    UINT f_Ri;
d1676 1
a1676 1
    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
d1701 1
a1701 1
    UINT f_Rs2;
d1703 1
a1703 1
    f_Rs2 = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
d1726 1
d1728 1
d1750 1
a1750 2
    UINT f_Rj;
    UINT f_Ri;
d1752 1
a1752 2
    f_Rj = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
d1771 52
d1828 1
a1828 2
    UINT f_Rj;
    UINT f_Ri;
d1830 1
a1830 2
    f_Rj = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
d1850 54
d1909 1
a1909 2
    SI f_disp10;
    UINT f_Ri;
d1911 1
a1911 2
    f_disp10 = ((EXTRACT_MSB0_INT (insn, 16, 4, 8)) << (2));
    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
d1935 1
a1935 2
    SI f_disp9;
    UINT f_Ri;
d1937 1
a1937 2
    f_disp9 = ((EXTRACT_MSB0_INT (insn, 16, 4, 8)) << (1));
    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
d1961 1
a1961 2
    INT f_disp8;
    UINT f_Ri;
d1963 1
a1963 2
    f_disp8 = EXTRACT_MSB0_INT (insn, 16, 4, 8);
    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
d1987 1
a1987 2
    USI f_udisp6;
    UINT f_Ri;
d1989 1
a1989 2
    f_udisp6 = ((EXTRACT_MSB0_UINT (insn, 16, 8, 4)) << (2));
    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
d2013 1
a2013 1
    UINT f_Ri;
d2015 1
a2015 1
    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
d2039 1
a2039 1
    UINT f_Rs2;
d2041 1
a2041 1
    f_Rs2 = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
d2064 1
d2066 1
d2088 1
a2088 2
    UINT f_Rj;
    UINT f_Ri;
d2090 1
a2090 2
    f_Rj = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
d2114 1
a2114 2
    UINT f_Rs1;
    UINT f_Ri;
d2116 1
a2116 2
    f_Rs1 = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
d2139 1
a2139 1
    UINT f_Ri;
d2141 1
a2141 1
    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
d2163 1
a2163 2
    UINT f_Rs1;
    UINT f_Ri;
d2165 1
a2165 2
    f_Rs1 = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
d2188 1
a2188 1
    UINT f_Ri;
d2190 1
a2190 1
    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
d2212 1
a2212 1
    UINT f_Ri;
d2214 1
a2214 1
    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
d2237 1
a2237 1
    UINT f_Ri;
d2239 1
a2239 1
    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
d2262 1
a2262 1
    SI f_rel12;
d2264 1
a2264 1
    f_rel12 = ((((EXTRACT_MSB0_INT (insn, 16, 5, 11)) << (1))) + (((pc) + (2))));
d2286 1
d2288 1
d2309 1
a2309 1
    UINT f_u8;
d2311 1
a2311 1
    f_u8 = EXTRACT_MSB0_UINT (insn, 16, 8, 8);
d2333 1
d2335 1
d2356 1
d2358 1
d2379 1
a2379 1
    SI f_rel9;
d2381 1
a2381 1
    f_rel9 = ((((EXTRACT_MSB0_INT (insn, 16, 8, 8)) << (1))) + (((pc) + (2))));
d2403 1
d2405 1
d2419 1
a2419 1
    SI f_rel9;
d2421 1
a2421 1
    f_rel9 = ((((EXTRACT_MSB0_INT (insn, 16, 8, 8)) << (1))) + (((pc) + (2))));
d2443 1
a2443 1
    SI f_rel9;
d2445 1
a2445 1
    f_rel9 = ((((EXTRACT_MSB0_INT (insn, 16, 8, 8)) << (1))) + (((pc) + (2))));
d2467 1
a2467 1
    SI f_rel9;
d2469 1
a2469 1
    f_rel9 = ((((EXTRACT_MSB0_INT (insn, 16, 8, 8)) << (1))) + (((pc) + (2))));
d2491 1
a2491 1
    SI f_rel9;
d2493 1
a2493 1
    f_rel9 = ((((EXTRACT_MSB0_INT (insn, 16, 8, 8)) << (1))) + (((pc) + (2))));
d2515 1
a2515 1
    SI f_rel9;
d2517 1
a2517 1
    f_rel9 = ((((EXTRACT_MSB0_INT (insn, 16, 8, 8)) << (1))) + (((pc) + (2))));
d2539 1
a2539 1
    SI f_rel9;
d2541 1
a2541 1
    f_rel9 = ((((EXTRACT_MSB0_INT (insn, 16, 8, 8)) << (1))) + (((pc) + (2))));
d2563 1
a2563 1
    SI f_rel9;
d2565 1
a2565 1
    f_rel9 = ((((EXTRACT_MSB0_INT (insn, 16, 8, 8)) << (1))) + (((pc) + (2))));
d2587 1
a2587 1
    USI f_dir10;
d2589 1
a2589 1
    f_dir10 = ((EXTRACT_MSB0_UINT (insn, 16, 8, 8)) << (2));
d2611 1
a2611 1
    USI f_dir9;
d2613 1
a2613 1
    f_dir9 = ((EXTRACT_MSB0_UINT (insn, 16, 8, 8)) << (1));
d2635 1
a2635 1
    UINT f_dir8;
d2637 1
a2637 1
    f_dir8 = EXTRACT_MSB0_UINT (insn, 16, 8, 8);
d2659 1
a2659 1
    USI f_dir10;
d2661 1
a2661 1
    f_dir10 = ((EXTRACT_MSB0_UINT (insn, 16, 8, 8)) << (2));
d2684 1
a2684 1
    USI f_dir9;
d2686 1
a2686 1
    f_dir9 = ((EXTRACT_MSB0_UINT (insn, 16, 8, 8)) << (1));
d2709 1
a2709 1
    UINT f_dir8;
d2711 1
a2711 1
    f_dir8 = EXTRACT_MSB0_UINT (insn, 16, 8, 8);
d2734 1
a2734 1
    USI f_dir10;
d2736 1
a2736 1
    f_dir10 = ((EXTRACT_MSB0_UINT (insn, 16, 8, 8)) << (2));
d2759 1
a2759 1
    USI f_dir10;
d2761 1
a2761 1
    f_dir10 = ((EXTRACT_MSB0_UINT (insn, 16, 8, 8)) << (2));
d2783 1
a2783 1
    USI f_dir9;
d2785 1
a2785 1
    f_dir9 = ((EXTRACT_MSB0_UINT (insn, 16, 8, 8)) << (1));
d2807 1
a2807 1
    UINT f_dir8;
d2809 1
a2809 1
    f_dir8 = EXTRACT_MSB0_UINT (insn, 16, 8, 8);
d2831 1
a2831 1
    USI f_dir10;
d2833 1
a2833 1
    f_dir10 = ((EXTRACT_MSB0_UINT (insn, 16, 8, 8)) << (2));
d2856 1
a2856 1
    USI f_dir9;
d2858 1
a2858 1
    f_dir9 = ((EXTRACT_MSB0_UINT (insn, 16, 8, 8)) << (1));
d2881 1
a2881 1
    UINT f_dir8;
d2883 1
a2883 1
    f_dir8 = EXTRACT_MSB0_UINT (insn, 16, 8, 8);
d2906 1
a2906 1
    USI f_dir10;
d2908 1
a2908 1
    f_dir10 = ((EXTRACT_MSB0_UINT (insn, 16, 8, 8)) << (2));
d2931 1
a2931 1
    UINT f_Ri;
d2933 1
a2933 1
    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
d2956 1
a2956 2
    /* Contents of trailing part of insn.  */
    UINT word_1;
d2958 1
a2958 1
  word_1 = GETIMEMUHI (current_cpu, pc + 2);
d2967 48
d3020 1
a3020 1
    UINT f_u8;
d3022 1
a3022 1
    f_u8 = EXTRACT_MSB0_UINT (insn, 16, 8, 8);
d3037 1
a3037 1
    UINT f_u8;
d3039 1
a3039 1
    f_u8 = EXTRACT_MSB0_UINT (insn, 16, 8, 8);
d3054 1
a3054 1
    SI f_s10;
d3056 1
a3056 1
    f_s10 = ((EXTRACT_MSB0_INT (insn, 16, 8, 8)) << (2));
d3079 1
a3079 1
    UINT f_Ri;
d3081 1
a3081 1
    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
d3104 1
a3104 1
    UINT f_Ri;
d3106 1
a3106 1
    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
d3129 1
a3129 1
    UINT f_Ri;
d3131 1
a3131 1
    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
d3154 1
a3154 1
    UINT f_Ri;
d3156 1
a3156 1
    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
d3179 1
a3179 1
    UINT f_reglist_low_ld;
d3181 1
a3181 1
    f_reglist_low_ld = EXTRACT_MSB0_UINT (insn, 16, 8, 8);
d3212 1
a3212 1
    UINT f_reglist_hi_ld;
d3214 1
a3214 1
    f_reglist_hi_ld = EXTRACT_MSB0_UINT (insn, 16, 8, 8);
d3244 1
a3244 1
    UINT f_reglist_low_st;
d3246 1
a3246 1
    f_reglist_low_st = EXTRACT_MSB0_UINT (insn, 16, 8, 8);
d3277 1
a3277 1
    UINT f_reglist_hi_st;
d3279 1
a3279 1
    f_reglist_hi_st = EXTRACT_MSB0_UINT (insn, 16, 8, 8);
d3309 1
a3309 1
    USI f_u10;
d3311 1
a3311 1
    f_u10 = ((EXTRACT_MSB0_UINT (insn, 16, 8, 8)) << (2));
d3336 1
d3338 1
d3362 1
a3362 2
    UINT f_Rj;
    UINT f_Ri;
d3364 1
a3364 2
    f_Rj = EXTRACT_MSB0_UINT (insn, 16, 8, 4);
    f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4);
@


1.1.1.4
log
@import gdb-1999-08-09 snapshot
@
text
@d31 23
d66 171
a236 171
  { VIRTUAL_INSN_X_INVALID, FR30BF_INSN_X_INVALID, FR30BF_SFMT_EMPTY },
  { VIRTUAL_INSN_X_AFTER, FR30BF_INSN_X_AFTER, FR30BF_SFMT_EMPTY },
  { VIRTUAL_INSN_X_BEFORE, FR30BF_INSN_X_BEFORE, FR30BF_SFMT_EMPTY },
  { VIRTUAL_INSN_X_CTI_CHAIN, FR30BF_INSN_X_CTI_CHAIN, FR30BF_SFMT_EMPTY },
  { VIRTUAL_INSN_X_CHAIN, FR30BF_INSN_X_CHAIN, FR30BF_SFMT_EMPTY },
  { VIRTUAL_INSN_X_BEGIN, FR30BF_INSN_X_BEGIN, FR30BF_SFMT_EMPTY },
  { FR30_INSN_ADD, FR30BF_INSN_ADD, FR30BF_SFMT_ADD },
  { FR30_INSN_ADDI, FR30BF_INSN_ADDI, FR30BF_SFMT_ADDI },
  { FR30_INSN_ADD2, FR30BF_INSN_ADD2, FR30BF_SFMT_ADD2 },
  { FR30_INSN_ADDC, FR30BF_INSN_ADDC, FR30BF_SFMT_ADDC },
  { FR30_INSN_ADDN, FR30BF_INSN_ADDN, FR30BF_SFMT_ADDN },
  { FR30_INSN_ADDNI, FR30BF_INSN_ADDNI, FR30BF_SFMT_ADDNI },
  { FR30_INSN_ADDN2, FR30BF_INSN_ADDN2, FR30BF_SFMT_ADDN2 },
  { FR30_INSN_SUB, FR30BF_INSN_SUB, FR30BF_SFMT_ADD },
  { FR30_INSN_SUBC, FR30BF_INSN_SUBC, FR30BF_SFMT_ADDC },
  { FR30_INSN_SUBN, FR30BF_INSN_SUBN, FR30BF_SFMT_ADDN },
  { FR30_INSN_CMP, FR30BF_INSN_CMP, FR30BF_SFMT_CMP },
  { FR30_INSN_CMPI, FR30BF_INSN_CMPI, FR30BF_SFMT_CMPI },
  { FR30_INSN_CMP2, FR30BF_INSN_CMP2, FR30BF_SFMT_CMP2 },
  { FR30_INSN_AND, FR30BF_INSN_AND, FR30BF_SFMT_AND },
  { FR30_INSN_OR, FR30BF_INSN_OR, FR30BF_SFMT_AND },
  { FR30_INSN_EOR, FR30BF_INSN_EOR, FR30BF_SFMT_AND },
  { FR30_INSN_ANDM, FR30BF_INSN_ANDM, FR30BF_SFMT_ANDM },
  { FR30_INSN_ANDH, FR30BF_INSN_ANDH, FR30BF_SFMT_ANDH },
  { FR30_INSN_ANDB, FR30BF_INSN_ANDB, FR30BF_SFMT_ANDB },
  { FR30_INSN_ORM, FR30BF_INSN_ORM, FR30BF_SFMT_ANDM },
  { FR30_INSN_ORH, FR30BF_INSN_ORH, FR30BF_SFMT_ANDH },
  { FR30_INSN_ORB, FR30BF_INSN_ORB, FR30BF_SFMT_ANDB },
  { FR30_INSN_EORM, FR30BF_INSN_EORM, FR30BF_SFMT_ANDM },
  { FR30_INSN_EORH, FR30BF_INSN_EORH, FR30BF_SFMT_ANDH },
  { FR30_INSN_EORB, FR30BF_INSN_EORB, FR30BF_SFMT_ANDB },
  { FR30_INSN_BANDL, FR30BF_INSN_BANDL, FR30BF_SFMT_BANDL },
  { FR30_INSN_BORL, FR30BF_INSN_BORL, FR30BF_SFMT_BANDL },
  { FR30_INSN_BEORL, FR30BF_INSN_BEORL, FR30BF_SFMT_BANDL },
  { FR30_INSN_BANDH, FR30BF_INSN_BANDH, FR30BF_SFMT_BANDL },
  { FR30_INSN_BORH, FR30BF_INSN_BORH, FR30BF_SFMT_BANDL },
  { FR30_INSN_BEORH, FR30BF_INSN_BEORH, FR30BF_SFMT_BANDL },
  { FR30_INSN_BTSTL, FR30BF_INSN_BTSTL, FR30BF_SFMT_BTSTL },
  { FR30_INSN_BTSTH, FR30BF_INSN_BTSTH, FR30BF_SFMT_BTSTL },
  { FR30_INSN_MUL, FR30BF_INSN_MUL, FR30BF_SFMT_MUL },
  { FR30_INSN_MULU, FR30BF_INSN_MULU, FR30BF_SFMT_MULU },
  { FR30_INSN_MULH, FR30BF_INSN_MULH, FR30BF_SFMT_MULH },
  { FR30_INSN_MULUH, FR30BF_INSN_MULUH, FR30BF_SFMT_MULH },
  { FR30_INSN_DIV0S, FR30BF_INSN_DIV0S, FR30BF_SFMT_DIV0S },
  { FR30_INSN_DIV0U, FR30BF_INSN_DIV0U, FR30BF_SFMT_DIV0U },
  { FR30_INSN_DIV1, FR30BF_INSN_DIV1, FR30BF_SFMT_DIV1 },
  { FR30_INSN_DIV2, FR30BF_INSN_DIV2, FR30BF_SFMT_DIV2 },
  { FR30_INSN_DIV3, FR30BF_INSN_DIV3, FR30BF_SFMT_DIV3 },
  { FR30_INSN_DIV4S, FR30BF_INSN_DIV4S, FR30BF_SFMT_DIV4S },
  { FR30_INSN_LSL, FR30BF_INSN_LSL, FR30BF_SFMT_LSL },
  { FR30_INSN_LSLI, FR30BF_INSN_LSLI, FR30BF_SFMT_LSLI },
  { FR30_INSN_LSL2, FR30BF_INSN_LSL2, FR30BF_SFMT_LSLI },
  { FR30_INSN_LSR, FR30BF_INSN_LSR, FR30BF_SFMT_LSL },
  { FR30_INSN_LSRI, FR30BF_INSN_LSRI, FR30BF_SFMT_LSLI },
  { FR30_INSN_LSR2, FR30BF_INSN_LSR2, FR30BF_SFMT_LSLI },
  { FR30_INSN_ASR, FR30BF_INSN_ASR, FR30BF_SFMT_LSL },
  { FR30_INSN_ASRI, FR30BF_INSN_ASRI, FR30BF_SFMT_LSLI },
  { FR30_INSN_ASR2, FR30BF_INSN_ASR2, FR30BF_SFMT_LSLI },
  { FR30_INSN_LDI8, FR30BF_INSN_LDI8, FR30BF_SFMT_LDI8 },
  { FR30_INSN_LDI20, FR30BF_INSN_LDI20, FR30BF_SFMT_LDI20 },
  { FR30_INSN_LDI32, FR30BF_INSN_LDI32, FR30BF_SFMT_LDI32 },
  { FR30_INSN_LD, FR30BF_INSN_LD, FR30BF_SFMT_LD },
  { FR30_INSN_LDUH, FR30BF_INSN_LDUH, FR30BF_SFMT_LD },
  { FR30_INSN_LDUB, FR30BF_INSN_LDUB, FR30BF_SFMT_LD },
  { FR30_INSN_LDR13, FR30BF_INSN_LDR13, FR30BF_SFMT_LDR13 },
  { FR30_INSN_LDR13UH, FR30BF_INSN_LDR13UH, FR30BF_SFMT_LDR13 },
  { FR30_INSN_LDR13UB, FR30BF_INSN_LDR13UB, FR30BF_SFMT_LDR13 },
  { FR30_INSN_LDR14, FR30BF_INSN_LDR14, FR30BF_SFMT_LDR14 },
  { FR30_INSN_LDR14UH, FR30BF_INSN_LDR14UH, FR30BF_SFMT_LDR14UH },
  { FR30_INSN_LDR14UB, FR30BF_INSN_LDR14UB, FR30BF_SFMT_LDR14UB },
  { FR30_INSN_LDR15, FR30BF_INSN_LDR15, FR30BF_SFMT_LDR15 },
  { FR30_INSN_LDR15GR, FR30BF_INSN_LDR15GR, FR30BF_SFMT_LDR15GR },
  { FR30_INSN_LDR15DR, FR30BF_INSN_LDR15DR, FR30BF_SFMT_LDR15DR },
  { FR30_INSN_LDR15PS, FR30BF_INSN_LDR15PS, FR30BF_SFMT_LDR15PS },
  { FR30_INSN_ST, FR30BF_INSN_ST, FR30BF_SFMT_ST },
  { FR30_INSN_STH, FR30BF_INSN_STH, FR30BF_SFMT_ST },
  { FR30_INSN_STB, FR30BF_INSN_STB, FR30BF_SFMT_ST },
  { FR30_INSN_STR13, FR30BF_INSN_STR13, FR30BF_SFMT_STR13 },
  { FR30_INSN_STR13H, FR30BF_INSN_STR13H, FR30BF_SFMT_STR13 },
  { FR30_INSN_STR13B, FR30BF_INSN_STR13B, FR30BF_SFMT_STR13 },
  { FR30_INSN_STR14, FR30BF_INSN_STR14, FR30BF_SFMT_STR14 },
  { FR30_INSN_STR14H, FR30BF_INSN_STR14H, FR30BF_SFMT_STR14H },
  { FR30_INSN_STR14B, FR30BF_INSN_STR14B, FR30BF_SFMT_STR14B },
  { FR30_INSN_STR15, FR30BF_INSN_STR15, FR30BF_SFMT_STR15 },
  { FR30_INSN_STR15GR, FR30BF_INSN_STR15GR, FR30BF_SFMT_STR15GR },
  { FR30_INSN_STR15DR, FR30BF_INSN_STR15DR, FR30BF_SFMT_STR15DR },
  { FR30_INSN_STR15PS, FR30BF_INSN_STR15PS, FR30BF_SFMT_STR15PS },
  { FR30_INSN_MOV, FR30BF_INSN_MOV, FR30BF_SFMT_MOV },
  { FR30_INSN_MOVDR, FR30BF_INSN_MOVDR, FR30BF_SFMT_MOVDR },
  { FR30_INSN_MOVPS, FR30BF_INSN_MOVPS, FR30BF_SFMT_MOVPS },
  { FR30_INSN_MOV2DR, FR30BF_INSN_MOV2DR, FR30BF_SFMT_MOV2DR },
  { FR30_INSN_MOV2PS, FR30BF_INSN_MOV2PS, FR30BF_SFMT_MOV2PS },
  { FR30_INSN_JMP, FR30BF_INSN_JMP, FR30BF_SFMT_JMP },
  { FR30_INSN_JMPD, FR30BF_INSN_JMPD, FR30BF_SFMT_JMP },
  { FR30_INSN_CALLR, FR30BF_INSN_CALLR, FR30BF_SFMT_CALLR },
  { FR30_INSN_CALLRD, FR30BF_INSN_CALLRD, FR30BF_SFMT_CALLR },
  { FR30_INSN_CALL, FR30BF_INSN_CALL, FR30BF_SFMT_CALL },
  { FR30_INSN_CALLD, FR30BF_INSN_CALLD, FR30BF_SFMT_CALL },
  { FR30_INSN_RET, FR30BF_INSN_RET, FR30BF_SFMT_RET },
  { FR30_INSN_RET_D, FR30BF_INSN_RET_D, FR30BF_SFMT_RET },
  { FR30_INSN_INT, FR30BF_INSN_INT, FR30BF_SFMT_INT },
  { FR30_INSN_INTE, FR30BF_INSN_INTE, FR30BF_SFMT_INTE },
  { FR30_INSN_RETI, FR30BF_INSN_RETI, FR30BF_SFMT_RETI },
  { FR30_INSN_BRAD, FR30BF_INSN_BRAD, FR30BF_SFMT_BRAD },
  { FR30_INSN_BRA, FR30BF_INSN_BRA, FR30BF_SFMT_BRAD },
  { FR30_INSN_BNOD, FR30BF_INSN_BNOD, FR30BF_SFMT_BNOD },
  { FR30_INSN_BNO, FR30BF_INSN_BNO, FR30BF_SFMT_BNOD },
  { FR30_INSN_BEQD, FR30BF_INSN_BEQD, FR30BF_SFMT_BEQD },
  { FR30_INSN_BEQ, FR30BF_INSN_BEQ, FR30BF_SFMT_BEQD },
  { FR30_INSN_BNED, FR30BF_INSN_BNED, FR30BF_SFMT_BEQD },
  { FR30_INSN_BNE, FR30BF_INSN_BNE, FR30BF_SFMT_BEQD },
  { FR30_INSN_BCD, FR30BF_INSN_BCD, FR30BF_SFMT_BCD },
  { FR30_INSN_BC, FR30BF_INSN_BC, FR30BF_SFMT_BCD },
  { FR30_INSN_BNCD, FR30BF_INSN_BNCD, FR30BF_SFMT_BCD },
  { FR30_INSN_BNC, FR30BF_INSN_BNC, FR30BF_SFMT_BCD },
  { FR30_INSN_BND, FR30BF_INSN_BND, FR30BF_SFMT_BND },
  { FR30_INSN_BN, FR30BF_INSN_BN, FR30BF_SFMT_BND },
  { FR30_INSN_BPD, FR30BF_INSN_BPD, FR30BF_SFMT_BND },
  { FR30_INSN_BP, FR30BF_INSN_BP, FR30BF_SFMT_BND },
  { FR30_INSN_BVD, FR30BF_INSN_BVD, FR30BF_SFMT_BVD },
  { FR30_INSN_BV, FR30BF_INSN_BV, FR30BF_SFMT_BVD },
  { FR30_INSN_BNVD, FR30BF_INSN_BNVD, FR30BF_SFMT_BVD },
  { FR30_INSN_BNV, FR30BF_INSN_BNV, FR30BF_SFMT_BVD },
  { FR30_INSN_BLTD, FR30BF_INSN_BLTD, FR30BF_SFMT_BLTD },
  { FR30_INSN_BLT, FR30BF_INSN_BLT, FR30BF_SFMT_BLTD },
  { FR30_INSN_BGED, FR30BF_INSN_BGED, FR30BF_SFMT_BLTD },
  { FR30_INSN_BGE, FR30BF_INSN_BGE, FR30BF_SFMT_BLTD },
  { FR30_INSN_BLED, FR30BF_INSN_BLED, FR30BF_SFMT_BLED },
  { FR30_INSN_BLE, FR30BF_INSN_BLE, FR30BF_SFMT_BLED },
  { FR30_INSN_BGTD, FR30BF_INSN_BGTD, FR30BF_SFMT_BLED },
  { FR30_INSN_BGT, FR30BF_INSN_BGT, FR30BF_SFMT_BLED },
  { FR30_INSN_BLSD, FR30BF_INSN_BLSD, FR30BF_SFMT_BLSD },
  { FR30_INSN_BLS, FR30BF_INSN_BLS, FR30BF_SFMT_BLSD },
  { FR30_INSN_BHID, FR30BF_INSN_BHID, FR30BF_SFMT_BLSD },
  { FR30_INSN_BHI, FR30BF_INSN_BHI, FR30BF_SFMT_BLSD },
  { FR30_INSN_DMOVR13, FR30BF_INSN_DMOVR13, FR30BF_SFMT_DMOVR13 },
  { FR30_INSN_DMOVR13H, FR30BF_INSN_DMOVR13H, FR30BF_SFMT_DMOVR13H },
  { FR30_INSN_DMOVR13B, FR30BF_INSN_DMOVR13B, FR30BF_SFMT_DMOVR13B },
  { FR30_INSN_DMOVR13PI, FR30BF_INSN_DMOVR13PI, FR30BF_SFMT_DMOVR13PI },
  { FR30_INSN_DMOVR13PIH, FR30BF_INSN_DMOVR13PIH, FR30BF_SFMT_DMOVR13PIH },
  { FR30_INSN_DMOVR13PIB, FR30BF_INSN_DMOVR13PIB, FR30BF_SFMT_DMOVR13PIB },
  { FR30_INSN_DMOVR15PI, FR30BF_INSN_DMOVR15PI, FR30BF_SFMT_DMOVR15PI },
  { FR30_INSN_DMOV2R13, FR30BF_INSN_DMOV2R13, FR30BF_SFMT_DMOV2R13 },
  { FR30_INSN_DMOV2R13H, FR30BF_INSN_DMOV2R13H, FR30BF_SFMT_DMOV2R13H },
  { FR30_INSN_DMOV2R13B, FR30BF_INSN_DMOV2R13B, FR30BF_SFMT_DMOV2R13B },
  { FR30_INSN_DMOV2R13PI, FR30BF_INSN_DMOV2R13PI, FR30BF_SFMT_DMOV2R13PI },
  { FR30_INSN_DMOV2R13PIH, FR30BF_INSN_DMOV2R13PIH, FR30BF_SFMT_DMOV2R13PIH },
  { FR30_INSN_DMOV2R13PIB, FR30BF_INSN_DMOV2R13PIB, FR30BF_SFMT_DMOV2R13PIB },
  { FR30_INSN_DMOV2R15PD, FR30BF_INSN_DMOV2R15PD, FR30BF_SFMT_DMOV2R15PD },
  { FR30_INSN_LDRES, FR30BF_INSN_LDRES, FR30BF_SFMT_LDRES },
  { FR30_INSN_STRES, FR30BF_INSN_STRES, FR30BF_SFMT_LDRES },
  { FR30_INSN_COPOP, FR30BF_INSN_COPOP, FR30BF_SFMT_COPOP },
  { FR30_INSN_COPLD, FR30BF_INSN_COPLD, FR30BF_SFMT_COPOP },
  { FR30_INSN_COPST, FR30BF_INSN_COPST, FR30BF_SFMT_COPOP },
  { FR30_INSN_COPSV, FR30BF_INSN_COPSV, FR30BF_SFMT_COPOP },
  { FR30_INSN_NOP, FR30BF_INSN_NOP, FR30BF_SFMT_BNOD },
  { FR30_INSN_ANDCCR, FR30BF_INSN_ANDCCR, FR30BF_SFMT_ANDCCR },
  { FR30_INSN_ORCCR, FR30BF_INSN_ORCCR, FR30BF_SFMT_ANDCCR },
  { FR30_INSN_STILM, FR30BF_INSN_STILM, FR30BF_SFMT_STILM },
  { FR30_INSN_ADDSP, FR30BF_INSN_ADDSP, FR30BF_SFMT_ADDSP },
  { FR30_INSN_EXTSB, FR30BF_INSN_EXTSB, FR30BF_SFMT_EXTSB },
  { FR30_INSN_EXTUB, FR30BF_INSN_EXTUB, FR30BF_SFMT_EXTUB },
  { FR30_INSN_EXTSH, FR30BF_INSN_EXTSH, FR30BF_SFMT_EXTSH },
  { FR30_INSN_EXTUH, FR30BF_INSN_EXTUH, FR30BF_SFMT_EXTUH },
  { FR30_INSN_LDM0, FR30BF_INSN_LDM0, FR30BF_SFMT_LDM0 },
  { FR30_INSN_LDM1, FR30BF_INSN_LDM1, FR30BF_SFMT_LDM1 },
  { FR30_INSN_STM0, FR30BF_INSN_STM0, FR30BF_SFMT_STM0 },
  { FR30_INSN_STM1, FR30BF_INSN_STM1, FR30BF_SFMT_STM1 },
  { FR30_INSN_ENTER, FR30BF_INSN_ENTER, FR30BF_SFMT_ENTER },
  { FR30_INSN_LEAVE, FR30BF_INSN_LEAVE, FR30BF_SFMT_LEAVE },
  { FR30_INSN_XCHB, FR30BF_INSN_XCHB, FR30BF_SFMT_XCHB },
d239 3
a241 2
static const struct insn_sem fr30bf_insn_sem_invalid = {
  VIRTUAL_INSN_X_INVALID, FR30BF_INSN_X_INVALID, FR30BF_SFMT_EMPTY
d244 6
a257 1
  id->sfmt = t->sfmt;
d265 6
a270 1

a277 2

  /* Semantic pointers are initialized elsewhere.  */
d325 7
a331 7
      case 0 : itype = FR30BF_INSN_LDR13; goto extract_sfmt_ldr13;
      case 1 : itype = FR30BF_INSN_LDR13UH; goto extract_sfmt_ldr13;
      case 2 : itype = FR30BF_INSN_LDR13UB; goto extract_sfmt_ldr13;
      case 3 : itype = FR30BF_INSN_LDR15; goto extract_sfmt_ldr15;
      case 4 : itype = FR30BF_INSN_LD; goto extract_sfmt_ld;
      case 5 : itype = FR30BF_INSN_LDUH; goto extract_sfmt_ld;
      case 6 : itype = FR30BF_INSN_LDUB; goto extract_sfmt_ld;
d337 5
a341 5
          case 0 : itype = FR30BF_INSN_LDR15GR; goto extract_sfmt_ldr15gr;
          case 1 : itype = FR30BF_INSN_MOV2PS; goto extract_sfmt_mov2ps;
          case 8 : itype = FR30BF_INSN_LDR15DR; goto extract_sfmt_ldr15dr;
          case 9 : itype = FR30BF_INSN_LDR15PS; goto extract_sfmt_ldr15ps;
          default : itype = FR30BF_INSN_X_INVALID; goto extract_sfmt_empty;
d344 15
a358 15
      case 8 : itype = FR30BF_INSN_DMOV2R13; goto extract_sfmt_dmov2r13;
      case 9 : itype = FR30BF_INSN_DMOV2R13H; goto extract_sfmt_dmov2r13h;
      case 10 : itype = FR30BF_INSN_DMOV2R13B; goto extract_sfmt_dmov2r13b;
      case 11 : itype = FR30BF_INSN_DMOV2R15PD; goto extract_sfmt_dmov2r15pd;
      case 12 : itype = FR30BF_INSN_DMOV2R13PI; goto extract_sfmt_dmov2r13pi;
      case 13 : itype = FR30BF_INSN_DMOV2R13PIH; goto extract_sfmt_dmov2r13pih;
      case 14 : itype = FR30BF_INSN_DMOV2R13PIB; goto extract_sfmt_dmov2r13pib;
      case 15 : itype = FR30BF_INSN_ENTER; goto extract_sfmt_enter;
      case 16 : itype = FR30BF_INSN_STR13; goto extract_sfmt_str13;
      case 17 : itype = FR30BF_INSN_STR13H; goto extract_sfmt_str13;
      case 18 : itype = FR30BF_INSN_STR13B; goto extract_sfmt_str13;
      case 19 : itype = FR30BF_INSN_STR15; goto extract_sfmt_str15;
      case 20 : itype = FR30BF_INSN_ST; goto extract_sfmt_st;
      case 21 : itype = FR30BF_INSN_STH; goto extract_sfmt_st;
      case 22 : itype = FR30BF_INSN_STB; goto extract_sfmt_st;
d364 5
a368 5
          case 0 : itype = FR30BF_INSN_STR15GR; goto extract_sfmt_str15gr;
          case 1 : itype = FR30BF_INSN_MOVPS; goto extract_sfmt_movps;
          case 8 : itype = FR30BF_INSN_STR15DR; goto extract_sfmt_str15dr;
          case 9 : itype = FR30BF_INSN_STR15PS; goto extract_sfmt_str15ps;
          default : itype = FR30BF_INSN_X_INVALID; goto extract_sfmt_empty;
d371 8
a378 8
      case 24 : itype = FR30BF_INSN_DMOVR13; goto extract_sfmt_dmovr13;
      case 25 : itype = FR30BF_INSN_DMOVR13H; goto extract_sfmt_dmovr13h;
      case 26 : itype = FR30BF_INSN_DMOVR13B; goto extract_sfmt_dmovr13b;
      case 27 : itype = FR30BF_INSN_DMOVR15PI; goto extract_sfmt_dmovr15pi;
      case 28 : itype = FR30BF_INSN_DMOVR13PI; goto extract_sfmt_dmovr13pi;
      case 29 : itype = FR30BF_INSN_DMOVR13PIH; goto extract_sfmt_dmovr13pih;
      case 30 : itype = FR30BF_INSN_DMOVR13PIB; goto extract_sfmt_dmovr13pib;
      case 31 : itype = FR30BF_INSN_INT; goto extract_sfmt_int;
d394 1
a394 1
      case 47 : itype = FR30BF_INSN_LDR14; goto extract_sfmt_ldr14;
d410 1
a410 1
      case 63 : itype = FR30BF_INSN_STR14; goto extract_sfmt_str14;
d426 1
a426 1
      case 79 : itype = FR30BF_INSN_LDR14UH; goto extract_sfmt_ldr14uh;
d442 1
a442 1
      case 95 : itype = FR30BF_INSN_STR14H; goto extract_sfmt_str14h;
d458 1
a458 1
      case 111 : itype = FR30BF_INSN_LDR14UB; goto extract_sfmt_ldr14ub;
d474 24
a497 24
      case 127 : itype = FR30BF_INSN_STR14B; goto extract_sfmt_str14b;
      case 128 : itype = FR30BF_INSN_BANDL; goto extract_sfmt_bandl;
      case 129 : itype = FR30BF_INSN_BANDH; goto extract_sfmt_bandl;
      case 130 : itype = FR30BF_INSN_AND; goto extract_sfmt_and;
      case 131 : itype = FR30BF_INSN_ANDCCR; goto extract_sfmt_andccr;
      case 132 : itype = FR30BF_INSN_ANDM; goto extract_sfmt_andm;
      case 133 : itype = FR30BF_INSN_ANDH; goto extract_sfmt_andh;
      case 134 : itype = FR30BF_INSN_ANDB; goto extract_sfmt_andb;
      case 135 : itype = FR30BF_INSN_STILM; goto extract_sfmt_stilm;
      case 136 : itype = FR30BF_INSN_BTSTL; goto extract_sfmt_btstl;
      case 137 : itype = FR30BF_INSN_BTSTH; goto extract_sfmt_btstl;
      case 138 : itype = FR30BF_INSN_XCHB; goto extract_sfmt_xchb;
      case 139 : itype = FR30BF_INSN_MOV; goto extract_sfmt_mov;
      case 140 : itype = FR30BF_INSN_LDM0; goto extract_sfmt_ldm0;
      case 141 : itype = FR30BF_INSN_LDM1; goto extract_sfmt_ldm1;
      case 142 : itype = FR30BF_INSN_STM0; goto extract_sfmt_stm0;
      case 143 : itype = FR30BF_INSN_STM1; goto extract_sfmt_stm1;
      case 144 : itype = FR30BF_INSN_BORL; goto extract_sfmt_bandl;
      case 145 : itype = FR30BF_INSN_BORH; goto extract_sfmt_bandl;
      case 146 : itype = FR30BF_INSN_OR; goto extract_sfmt_and;
      case 147 : itype = FR30BF_INSN_ORCCR; goto extract_sfmt_andccr;
      case 148 : itype = FR30BF_INSN_ORM; goto extract_sfmt_andm;
      case 149 : itype = FR30BF_INSN_ORH; goto extract_sfmt_andh;
      case 150 : itype = FR30BF_INSN_ORB; goto extract_sfmt_andb;
d503 13
a515 13
          case 0 : itype = FR30BF_INSN_JMP; goto extract_sfmt_jmp;
          case 1 : itype = FR30BF_INSN_CALLR; goto extract_sfmt_callr;
          case 2 : itype = FR30BF_INSN_RET; goto extract_sfmt_ret;
          case 3 : itype = FR30BF_INSN_RETI; goto extract_sfmt_reti;
          case 4 : itype = FR30BF_INSN_DIV0S; goto extract_sfmt_div0s;
          case 5 : itype = FR30BF_INSN_DIV0U; goto extract_sfmt_div0u;
          case 6 : itype = FR30BF_INSN_DIV1; goto extract_sfmt_div1;
          case 7 : itype = FR30BF_INSN_DIV2; goto extract_sfmt_div2;
          case 8 : itype = FR30BF_INSN_EXTSB; goto extract_sfmt_extsb;
          case 9 : itype = FR30BF_INSN_EXTUB; goto extract_sfmt_extub;
          case 10 : itype = FR30BF_INSN_EXTSH; goto extract_sfmt_extsh;
          case 11 : itype = FR30BF_INSN_EXTUH; goto extract_sfmt_extuh;
          default : itype = FR30BF_INSN_X_INVALID; goto extract_sfmt_empty;
d518 7
a524 7
      case 152 : itype = FR30BF_INSN_BEORL; goto extract_sfmt_bandl;
      case 153 : itype = FR30BF_INSN_BEORH; goto extract_sfmt_bandl;
      case 154 : itype = FR30BF_INSN_EOR; goto extract_sfmt_and;
      case 155 : itype = FR30BF_INSN_LDI20; goto extract_sfmt_ldi20;
      case 156 : itype = FR30BF_INSN_EORM; goto extract_sfmt_andm;
      case 157 : itype = FR30BF_INSN_EORH; goto extract_sfmt_andh;
      case 158 : itype = FR30BF_INSN_EORB; goto extract_sfmt_andb;
d530 14
a543 14
          case 0 : itype = FR30BF_INSN_JMPD; goto extract_sfmt_jmp;
          case 1 : itype = FR30BF_INSN_CALLRD; goto extract_sfmt_callr;
          case 2 : itype = FR30BF_INSN_RET_D; goto extract_sfmt_ret;
          case 3 : itype = FR30BF_INSN_INTE; goto extract_sfmt_inte;
          case 6 : itype = FR30BF_INSN_DIV3; goto extract_sfmt_div3;
          case 7 : itype = FR30BF_INSN_DIV4S; goto extract_sfmt_div4s;
          case 8 : itype = FR30BF_INSN_LDI32; goto extract_sfmt_ldi32;
          case 9 : itype = FR30BF_INSN_LEAVE; goto extract_sfmt_leave;
          case 10 : itype = FR30BF_INSN_NOP; goto extract_sfmt_bnod;
          case 12 : itype = FR30BF_INSN_COPOP; goto extract_sfmt_copop;
          case 13 : itype = FR30BF_INSN_COPLD; goto extract_sfmt_copop;
          case 14 : itype = FR30BF_INSN_COPST; goto extract_sfmt_copop;
          case 15 : itype = FR30BF_INSN_COPSV; goto extract_sfmt_copop;
          default : itype = FR30BF_INSN_X_INVALID; goto extract_sfmt_empty;
d546 31
a576 31
      case 160 : itype = FR30BF_INSN_ADDNI; goto extract_sfmt_addni;
      case 161 : itype = FR30BF_INSN_ADDN2; goto extract_sfmt_addn2;
      case 162 : itype = FR30BF_INSN_ADDN; goto extract_sfmt_addn;
      case 163 : itype = FR30BF_INSN_ADDSP; goto extract_sfmt_addsp;
      case 164 : itype = FR30BF_INSN_ADDI; goto extract_sfmt_addi;
      case 165 : itype = FR30BF_INSN_ADD2; goto extract_sfmt_add2;
      case 166 : itype = FR30BF_INSN_ADD; goto extract_sfmt_add;
      case 167 : itype = FR30BF_INSN_ADDC; goto extract_sfmt_addc;
      case 168 : itype = FR30BF_INSN_CMPI; goto extract_sfmt_cmpi;
      case 169 : itype = FR30BF_INSN_CMP2; goto extract_sfmt_cmp2;
      case 170 : itype = FR30BF_INSN_CMP; goto extract_sfmt_cmp;
      case 171 : itype = FR30BF_INSN_MULU; goto extract_sfmt_mulu;
      case 172 : itype = FR30BF_INSN_SUB; goto extract_sfmt_add;
      case 173 : itype = FR30BF_INSN_SUBC; goto extract_sfmt_addc;
      case 174 : itype = FR30BF_INSN_SUBN; goto extract_sfmt_addn;
      case 175 : itype = FR30BF_INSN_MUL; goto extract_sfmt_mul;
      case 176 : itype = FR30BF_INSN_LSRI; goto extract_sfmt_lsli;
      case 177 : itype = FR30BF_INSN_LSR2; goto extract_sfmt_lsli;
      case 178 : itype = FR30BF_INSN_LSR; goto extract_sfmt_lsl;
      case 179 : itype = FR30BF_INSN_MOV2DR; goto extract_sfmt_mov2dr;
      case 180 : itype = FR30BF_INSN_LSLI; goto extract_sfmt_lsli;
      case 181 : itype = FR30BF_INSN_LSL2; goto extract_sfmt_lsli;
      case 182 : itype = FR30BF_INSN_LSL; goto extract_sfmt_lsl;
      case 183 : itype = FR30BF_INSN_MOVDR; goto extract_sfmt_movdr;
      case 184 : itype = FR30BF_INSN_ASRI; goto extract_sfmt_lsli;
      case 185 : itype = FR30BF_INSN_ASR2; goto extract_sfmt_lsli;
      case 186 : itype = FR30BF_INSN_ASR; goto extract_sfmt_lsl;
      case 187 : itype = FR30BF_INSN_MULUH; goto extract_sfmt_mulh;
      case 188 : itype = FR30BF_INSN_LDRES; goto extract_sfmt_ldres;
      case 189 : itype = FR30BF_INSN_STRES; goto extract_sfmt_ldres;
      case 191 : itype = FR30BF_INSN_MULH; goto extract_sfmt_mulh;
d592 1
a592 1
      case 207 : itype = FR30BF_INSN_LDI8; goto extract_sfmt_ldi8;
d600 1
a600 1
      case 215 : itype = FR30BF_INSN_CALL; goto extract_sfmt_call;
d608 34
a641 34
      case 223 : itype = FR30BF_INSN_CALLD; goto extract_sfmt_call;
      case 224 : itype = FR30BF_INSN_BRA; goto extract_sfmt_brad;
      case 225 : itype = FR30BF_INSN_BNO; goto extract_sfmt_bnod;
      case 226 : itype = FR30BF_INSN_BEQ; goto extract_sfmt_beqd;
      case 227 : itype = FR30BF_INSN_BNE; goto extract_sfmt_beqd;
      case 228 : itype = FR30BF_INSN_BC; goto extract_sfmt_bcd;
      case 229 : itype = FR30BF_INSN_BNC; goto extract_sfmt_bcd;
      case 230 : itype = FR30BF_INSN_BN; goto extract_sfmt_bnd;
      case 231 : itype = FR30BF_INSN_BP; goto extract_sfmt_bnd;
      case 232 : itype = FR30BF_INSN_BV; goto extract_sfmt_bvd;
      case 233 : itype = FR30BF_INSN_BNV; goto extract_sfmt_bvd;
      case 234 : itype = FR30BF_INSN_BLT; goto extract_sfmt_bltd;
      case 235 : itype = FR30BF_INSN_BGE; goto extract_sfmt_bltd;
      case 236 : itype = FR30BF_INSN_BLE; goto extract_sfmt_bled;
      case 237 : itype = FR30BF_INSN_BGT; goto extract_sfmt_bled;
      case 238 : itype = FR30BF_INSN_BLS; goto extract_sfmt_blsd;
      case 239 : itype = FR30BF_INSN_BHI; goto extract_sfmt_blsd;
      case 240 : itype = FR30BF_INSN_BRAD; goto extract_sfmt_brad;
      case 241 : itype = FR30BF_INSN_BNOD; goto extract_sfmt_bnod;
      case 242 : itype = FR30BF_INSN_BEQD; goto extract_sfmt_beqd;
      case 243 : itype = FR30BF_INSN_BNED; goto extract_sfmt_beqd;
      case 244 : itype = FR30BF_INSN_BCD; goto extract_sfmt_bcd;
      case 245 : itype = FR30BF_INSN_BNCD; goto extract_sfmt_bcd;
      case 246 : itype = FR30BF_INSN_BND; goto extract_sfmt_bnd;
      case 247 : itype = FR30BF_INSN_BPD; goto extract_sfmt_bnd;
      case 248 : itype = FR30BF_INSN_BVD; goto extract_sfmt_bvd;
      case 249 : itype = FR30BF_INSN_BNVD; goto extract_sfmt_bvd;
      case 250 : itype = FR30BF_INSN_BLTD; goto extract_sfmt_bltd;
      case 251 : itype = FR30BF_INSN_BGED; goto extract_sfmt_bltd;
      case 252 : itype = FR30BF_INSN_BLED; goto extract_sfmt_bled;
      case 253 : itype = FR30BF_INSN_BGTD; goto extract_sfmt_bled;
      case 254 : itype = FR30BF_INSN_BLSD; goto extract_sfmt_blsd;
      case 255 : itype = FR30BF_INSN_BHID; goto extract_sfmt_blsd;
      default : itype = FR30BF_INSN_X_INVALID; goto extract_sfmt_empty;
d648 1
a648 1
 extract_sfmt_empty:
d656 1
a656 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_empty", (char *) 0));
d662 1
a662 1
 extract_sfmt_add:
d666 1
a666 1
#define FLD(f) abuf->fields.sfmt_add.f
d676 1
a676 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_add", "Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, (char *) 0));
d691 1
a691 1
 extract_sfmt_addi:
d695 1
a695 1
#define FLD(f) abuf->fields.sfmt_addi.f
d705 1
a705 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_addi", "f_u4 0x%x", 'x', f_u4, "Ri 0x%x", 'x', f_Ri, (char *) 0));
d719 1
a719 1
 extract_sfmt_add2:
d723 1
a723 1
#define FLD(f) abuf->fields.sfmt_add2.f
d733 1
a733 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_add2", "f_m4 0x%x", 'x', f_m4, "Ri 0x%x", 'x', f_Ri, (char *) 0));
d747 1
a747 1
 extract_sfmt_addc:
d751 1
a751 1
#define FLD(f) abuf->fields.sfmt_add.f
d761 1
a761 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_addc", "Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, (char *) 0));
d776 1
a776 1
 extract_sfmt_addn:
d780 1
a780 1
#define FLD(f) abuf->fields.sfmt_add.f
d790 1
a790 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_addn", "Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, (char *) 0));
d805 1
a805 1
 extract_sfmt_addni:
d809 1
a809 1
#define FLD(f) abuf->fields.sfmt_addi.f
d819 1
a819 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_addni", "f_u4 0x%x", 'x', f_u4, "Ri 0x%x", 'x', f_Ri, (char *) 0));
d833 1
a833 1
 extract_sfmt_addn2:
d837 1
a837 1
#define FLD(f) abuf->fields.sfmt_add2.f
d847 1
a847 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_addn2", "f_m4 0x%x", 'x', f_m4, "Ri 0x%x", 'x', f_Ri, (char *) 0));
d861 1
a861 1
 extract_sfmt_cmp:
d865 1
a865 1
#define FLD(f) abuf->fields.sfmt_str13.f
d875 1
a875 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_cmp", "Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, (char *) 0));
d889 1
a889 1
 extract_sfmt_cmpi:
d893 1
a893 1
#define FLD(f) abuf->fields.sfmt_addi.f
d903 1
a903 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_cmpi", "f_u4 0x%x", 'x', f_u4, "Ri 0x%x", 'x', f_Ri, (char *) 0));
d916 1
a916 1
 extract_sfmt_cmp2:
d920 1
a920 1
#define FLD(f) abuf->fields.sfmt_add2.f
d930 1
a930 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_cmp2", "f_m4 0x%x", 'x', f_m4, "Ri 0x%x", 'x', f_Ri, (char *) 0));
d943 1
a943 1
 extract_sfmt_and:
d947 1
a947 1
#define FLD(f) abuf->fields.sfmt_add.f
d957 1
a957 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_and", "Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, (char *) 0));
d972 1
a972 1
 extract_sfmt_andm:
d976 1
a976 1
#define FLD(f) abuf->fields.sfmt_str13.f
d986 1
a986 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_andm", "Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, (char *) 0));
d1000 1
a1000 1
 extract_sfmt_andh:
d1004 1
a1004 1
#define FLD(f) abuf->fields.sfmt_str13.f
d1014 1
a1014 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_andh", "Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, (char *) 0));
d1028 1
a1028 1
 extract_sfmt_andb:
d1032 1
a1032 1
#define FLD(f) abuf->fields.sfmt_str13.f
d1042 1
a1042 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_andb", "Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, (char *) 0));
d1056 1
a1056 1
 extract_sfmt_bandl:
d1060 1
a1060 1
#define FLD(f) abuf->fields.sfmt_addi.f
d1070 1
a1070 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_bandl", "f_u4 0x%x", 'x', f_u4, "Ri 0x%x", 'x', f_Ri, (char *) 0));
d1083 1
a1083 1
 extract_sfmt_btstl:
d1087 1
a1087 1
#define FLD(f) abuf->fields.sfmt_addi.f
d1097 1
a1097 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_btstl", "f_u4 0x%x", 'x', f_u4, "Ri 0x%x", 'x', f_Ri, (char *) 0));
d1110 1
a1110 1
 extract_sfmt_mul:
d1114 1
a1114 1
#define FLD(f) abuf->fields.sfmt_str13.f
d1124 1
a1124 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_mul", "Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, (char *) 0));
d1138 1
a1138 1
 extract_sfmt_mulu:
d1142 1
a1142 1
#define FLD(f) abuf->fields.sfmt_str13.f
d1152 1
a1152 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_mulu", "Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, (char *) 0));
d1166 1
a1166 1
 extract_sfmt_mulh:
d1170 1
a1170 1
#define FLD(f) abuf->fields.sfmt_str13.f
d1180 1
a1180 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_mulh", "Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, (char *) 0));
d1194 1
a1194 1
 extract_sfmt_div0s:
d1198 1
a1198 1
#define FLD(f) abuf->fields.sfmt_mov2dr.f
d1205 1
a1205 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_div0s", "Ri 0x%x", 'x', f_Ri, (char *) 0));
d1218 1
a1218 1
 extract_sfmt_div0u:
d1222 1
a1222 1
#define FLD(f) abuf->fields.fmt_empty.f
d1226 1
a1226 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_div0u", (char *) 0));
d1232 1
a1232 1
 extract_sfmt_div1:
d1236 1
a1236 1
#define FLD(f) abuf->fields.sfmt_mov2dr.f
d1243 1
a1243 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_div1", "Ri 0x%x", 'x', f_Ri, (char *) 0));
d1256 1
a1256 1
 extract_sfmt_div2:
d1260 1
a1260 1
#define FLD(f) abuf->fields.sfmt_mov2dr.f
d1267 1
a1267 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_div2", "Ri 0x%x", 'x', f_Ri, (char *) 0));
d1280 1
a1280 1
 extract_sfmt_div3:
d1284 1
a1284 1
#define FLD(f) abuf->fields.fmt_empty.f
d1288 1
a1288 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_div3", (char *) 0));
d1294 1
a1294 1
 extract_sfmt_div4s:
d1298 1
a1298 1
#define FLD(f) abuf->fields.fmt_empty.f
d1302 1
a1302 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_div4s", (char *) 0));
d1308 1
a1308 1
 extract_sfmt_lsl:
d1312 1
a1312 1
#define FLD(f) abuf->fields.sfmt_add.f
d1322 1
a1322 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_lsl", "Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, (char *) 0));
d1337 1
a1337 1
 extract_sfmt_lsli:
d1341 1
a1341 1
#define FLD(f) abuf->fields.sfmt_addi.f
d1351 1
a1351 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_lsli", "f_u4 0x%x", 'x', f_u4, "Ri 0x%x", 'x', f_Ri, (char *) 0));
d1365 1
a1365 1
 extract_sfmt_ldi8:
d1369 1
a1369 1
#define FLD(f) abuf->fields.sfmt_ldi8.f
d1379 1
a1379 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_ldi8", "f_i8 0x%x", 'x', f_i8, "Ri 0x%x", 'x', f_Ri, (char *) 0));
d1392 1
a1392 1
 extract_sfmt_ldi20:
d1396 1
a1396 1
#define FLD(f) abuf->fields.sfmt_ldi20.f
d1415 1
a1415 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_ldi20", "f_i20 0x%x", 'x', f_i20, "Ri 0x%x", 'x', f_Ri, (char *) 0));
d1428 1
a1428 1
 extract_sfmt_ldi32:
d1432 1
a1432 1
#define FLD(f) abuf->fields.sfmt_ldi32.f
d1447 1
a1447 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_ldi32", "f_i32 0x%x", 'x', f_i32, "Ri 0x%x", 'x', f_Ri, (char *) 0));
d1460 1
a1460 1
 extract_sfmt_ld:
d1464 1
a1464 1
#define FLD(f) abuf->fields.sfmt_ldr13.f
d1474 1
a1474 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_ld", "Rj 0x%x", 'x', f_Rj, "Ri 0x%x", 'x', f_Ri, (char *) 0));
d1488 1
a1488 1
 extract_sfmt_ldr13:
d1492 1
a1492 1
#define FLD(f) abuf->fields.sfmt_ldr13.f
d1502 1
a1502 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_ldr13", "Rj 0x%x", 'x', f_Rj, "Ri 0x%x", 'x', f_Ri, (char *) 0));
d1517 1
a1517 1
 extract_sfmt_ldr14:
d1521 1
a1521 1
#define FLD(f) abuf->fields.sfmt_ldr14.f
d1531 1
a1531 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_ldr14", "f_disp10 0x%x", 'x', f_disp10, "Ri 0x%x", 'x', f_Ri, (char *) 0));
d1545 1
a1545 1
 extract_sfmt_ldr14uh:
d1549 1
a1549 1
#define FLD(f) abuf->fields.sfmt_ldr14uh.f
d1559 1
a1559 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_ldr14uh", "f_disp9 0x%x", 'x', f_disp9, "Ri 0x%x", 'x', f_Ri, (char *) 0));
d1573 1
a1573 1
 extract_sfmt_ldr14ub:
d1577 1
a1577 1
#define FLD(f) abuf->fields.sfmt_ldr14ub.f
d1587 1
a1587 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_ldr14ub", "f_disp8 0x%x", 'x', f_disp8, "Ri 0x%x", 'x', f_Ri, (char *) 0));
d1601 1
a1601 1
 extract_sfmt_ldr15:
d1605 1
a1605 1
#define FLD(f) abuf->fields.sfmt_ldr15.f
d1615 1
a1615 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_ldr15", "f_udisp6 0x%x", 'x', f_udisp6, "Ri 0x%x", 'x', f_Ri, (char *) 0));
d1629 1
a1629 1
 extract_sfmt_ldr15gr:
d1633 1
a1633 1
#define FLD(f) abuf->fields.sfmt_ldr15gr.f
d1641 1
a1641 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_ldr15gr", "f_Ri 0x%x", 'x', f_Ri, "Ri 0x%x", 'x', f_Ri, (char *) 0));
d1656 1
a1656 1
 extract_sfmt_ldr15dr:
d1660 1
a1660 1
#define FLD(f) abuf->fields.sfmt_ldr15dr.f
d1667 1
a1667 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_ldr15dr", "f_Rs2 0x%x", 'x', f_Rs2, (char *) 0));
d1681 1
a1681 1
 extract_sfmt_ldr15ps:
d1685 1
a1685 1
#define FLD(f) abuf->fields.sfmt_addsp.f
d1689 1
a1689 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_ldr15ps", (char *) 0));
d1703 1
a1703 1
 extract_sfmt_st:
d1707 1
a1707 1
#define FLD(f) abuf->fields.sfmt_str13.f
d1717 1
a1717 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_st", "Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, (char *) 0));
d1731 1
a1731 1
 extract_sfmt_str13:
d1735 1
a1735 1
#define FLD(f) abuf->fields.sfmt_str13.f
d1745 1
a1745 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_str13", "Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, (char *) 0));
d1760 1
a1760 1
 extract_sfmt_str14:
d1764 1
a1764 1
#define FLD(f) abuf->fields.sfmt_str14.f
d1774 1
a1774 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_str14", "f_disp10 0x%x", 'x', f_disp10, "Ri 0x%x", 'x', f_Ri, (char *) 0));
d1788 1
a1788 1
 extract_sfmt_str14h:
d1792 1
a1792 1
#define FLD(f) abuf->fields.sfmt_str14h.f
d1802 1
a1802 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_str14h", "f_disp9 0x%x", 'x', f_disp9, "Ri 0x%x", 'x', f_Ri, (char *) 0));
d1816 1
a1816 1
 extract_sfmt_str14b:
d1820 1
a1820 1
#define FLD(f) abuf->fields.sfmt_str14b.f
d1830 1
a1830 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_str14b", "f_disp8 0x%x", 'x', f_disp8, "Ri 0x%x", 'x', f_Ri, (char *) 0));
d1844 1
a1844 1
 extract_sfmt_str15:
d1848 1
a1848 1
#define FLD(f) abuf->fields.sfmt_str15.f
d1858 1
a1858 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_str15", "f_udisp6 0x%x", 'x', f_udisp6, "Ri 0x%x", 'x', f_Ri, (char *) 0));
d1872 1
a1872 1
 extract_sfmt_str15gr:
d1876 1
a1876 1
#define FLD(f) abuf->fields.sfmt_str15gr.f
d1883 1
a1883 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_str15gr", "Ri 0x%x", 'x', f_Ri, (char *) 0));
d1898 1
a1898 1
 extract_sfmt_str15dr:
d1902 1
a1902 1
#define FLD(f) abuf->fields.sfmt_ldr15dr.f
d1909 1
a1909 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_str15dr", "f_Rs2 0x%x", 'x', f_Rs2, (char *) 0));
d1923 1
a1923 1
 extract_sfmt_str15ps:
d1927 1
a1927 1
#define FLD(f) abuf->fields.sfmt_addsp.f
d1931 1
a1931 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_str15ps", (char *) 0));
d1945 1
a1945 1
 extract_sfmt_mov:
d1949 1
a1949 1
#define FLD(f) abuf->fields.sfmt_ldr13.f
d1959 1
a1959 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_mov", "Rj 0x%x", 'x', f_Rj, "Ri 0x%x", 'x', f_Ri, (char *) 0));
d1973 1
a1973 1
 extract_sfmt_movdr:
d1977 1
a1977 1
#define FLD(f) abuf->fields.sfmt_movdr.f
d1987 1
a1987 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_movdr", "f_Rs1 0x%x", 'x', f_Rs1, "Ri 0x%x", 'x', f_Ri, (char *) 0));
d2000 1
a2000 1
 extract_sfmt_movps:
d2004 1
a2004 1
#define FLD(f) abuf->fields.sfmt_movdr.f
d2011 1
a2011 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_movps", "Ri 0x%x", 'x', f_Ri, (char *) 0));
d2024 1
a2024 1
 extract_sfmt_mov2dr:
d2028 1
a2028 1
#define FLD(f) abuf->fields.sfmt_mov2dr.f
d2038 1
a2038 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_mov2dr", "f_Rs1 0x%x", 'x', f_Rs1, "Ri 0x%x", 'x', f_Ri, (char *) 0));
d2051 1
a2051 1
 extract_sfmt_mov2ps:
d2055 1
a2055 1
#define FLD(f) abuf->fields.sfmt_mov2dr.f
d2062 1
a2062 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_mov2ps", "Ri 0x%x", 'x', f_Ri, (char *) 0));
d2075 1
a2075 1
 extract_sfmt_jmp:
d2079 1
a2079 1
#define FLD(f) abuf->fields.sfmt_mov2dr.f
d2086 2
a2087 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_jmp", "Ri 0x%x", 'x', f_Ri, (char *) 0));
d2100 1
a2100 1
 extract_sfmt_callr:
d2104 1
a2104 1
#define FLD(f) abuf->fields.sfmt_mov2dr.f
d2111 2
a2112 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_callr", "Ri 0x%x", 'x', f_Ri, (char *) 0));
d2125 1
a2125 1
 extract_sfmt_call:
d2129 1
a2129 1
#define FLD(f) abuf->fields.sfmt_call.f
d2136 2
a2137 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_call", "label12 0x%x", 'x', f_rel12, (char *) 0));
d2149 1
a2149 1
 extract_sfmt_ret:
d2153 1
a2153 1
#define FLD(f) abuf->fields.fmt_empty.f
d2157 2
a2158 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_ret", (char *) 0));
d2170 1
a2170 1
 extract_sfmt_int:
d2174 1
a2174 1
#define FLD(f) abuf->fields.sfmt_int.f
d2181 2
a2182 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_int", "f_u8 0x%x", 'x', f_u8, (char *) 0));
d2194 1
a2194 1
 extract_sfmt_inte:
d2198 1
a2198 1
#define FLD(f) abuf->fields.fmt_empty.f
d2202 2
a2203 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_inte", (char *) 0));
d2215 1
a2215 1
 extract_sfmt_reti:
d2219 1
a2219 1
#define FLD(f) abuf->fields.fmt_empty.f
d2223 2
a2224 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_reti", (char *) 0));
d2236 1
a2236 1
 extract_sfmt_brad:
d2240 1
a2240 1
#define FLD(f) abuf->fields.sfmt_brad.f
d2247 2
a2248 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_brad", "label9 0x%x", 'x', f_rel9, (char *) 0));
d2260 1
a2260 1
 extract_sfmt_bnod:
d2264 1
a2264 1
#define FLD(f) abuf->fields.fmt_empty.f
d2268 1
a2268 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_bnod", (char *) 0));
d2274 1
a2274 1
 extract_sfmt_beqd:
d2278 1
a2278 1
#define FLD(f) abuf->fields.sfmt_brad.f
d2285 2
a2286 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_beqd", "label9 0x%x", 'x', f_rel9, (char *) 0));
d2298 1
a2298 1
 extract_sfmt_bcd:
d2302 1
a2302 1
#define FLD(f) abuf->fields.sfmt_brad.f
d2309 2
a2310 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_bcd", "label9 0x%x", 'x', f_rel9, (char *) 0));
d2322 1
a2322 1
 extract_sfmt_bnd:
d2326 1
a2326 1
#define FLD(f) abuf->fields.sfmt_brad.f
d2333 2
a2334 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_bnd", "label9 0x%x", 'x', f_rel9, (char *) 0));
d2346 1
a2346 1
 extract_sfmt_bvd:
d2350 1
a2350 1
#define FLD(f) abuf->fields.sfmt_brad.f
d2357 2
a2358 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_bvd", "label9 0x%x", 'x', f_rel9, (char *) 0));
d2370 1
a2370 1
 extract_sfmt_bltd:
d2374 1
a2374 1
#define FLD(f) abuf->fields.sfmt_brad.f
d2381 2
a2382 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_bltd", "label9 0x%x", 'x', f_rel9, (char *) 0));
d2394 1
a2394 1
 extract_sfmt_bled:
d2398 1
a2398 1
#define FLD(f) abuf->fields.sfmt_brad.f
d2405 2
a2406 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_bled", "label9 0x%x", 'x', f_rel9, (char *) 0));
d2418 1
a2418 1
 extract_sfmt_blsd:
d2422 1
a2422 1
#define FLD(f) abuf->fields.sfmt_brad.f
d2429 2
a2430 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_blsd", "label9 0x%x", 'x', f_rel9, (char *) 0));
d2442 1
a2442 1
 extract_sfmt_dmovr13:
d2446 1
a2446 1
#define FLD(f) abuf->fields.sfmt_dmovr13pi.f
d2453 1
a2453 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_dmovr13", "f_dir10 0x%x", 'x', f_dir10, (char *) 0));
d2466 1
a2466 1
 extract_sfmt_dmovr13h:
d2470 1
a2470 1
#define FLD(f) abuf->fields.sfmt_dmovr13pih.f
d2477 1
a2477 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_dmovr13h", "f_dir9 0x%x", 'x', f_dir9, (char *) 0));
d2490 1
a2490 1
 extract_sfmt_dmovr13b:
d2494 1
a2494 1
#define FLD(f) abuf->fields.sfmt_dmovr13pib.f
d2501 1
a2501 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_dmovr13b", "f_dir8 0x%x", 'x', f_dir8, (char *) 0));
d2514 1
a2514 1
 extract_sfmt_dmovr13pi:
d2518 1
a2518 1
#define FLD(f) abuf->fields.sfmt_dmovr13pi.f
d2525 1
a2525 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_dmovr13pi", "f_dir10 0x%x", 'x', f_dir10, (char *) 0));
d2539 1
a2539 1
 extract_sfmt_dmovr13pih:
d2543 1
a2543 1
#define FLD(f) abuf->fields.sfmt_dmovr13pih.f
d2550 1
a2550 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_dmovr13pih", "f_dir9 0x%x", 'x', f_dir9, (char *) 0));
d2564 1
a2564 1
 extract_sfmt_dmovr13pib:
d2568 1
a2568 1
#define FLD(f) abuf->fields.sfmt_dmovr13pib.f
d2575 1
a2575 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_dmovr13pib", "f_dir8 0x%x", 'x', f_dir8, (char *) 0));
d2589 1
a2589 1
 extract_sfmt_dmovr15pi:
d2593 1
a2593 1
#define FLD(f) abuf->fields.sfmt_dmovr15pi.f
d2600 1
a2600 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_dmovr15pi", "f_dir10 0x%x", 'x', f_dir10, (char *) 0));
d2614 1
a2614 1
 extract_sfmt_dmov2r13:
d2618 1
a2618 1
#define FLD(f) abuf->fields.sfmt_dmovr13pi.f
d2625 1
a2625 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_dmov2r13", "f_dir10 0x%x", 'x', f_dir10, (char *) 0));
d2638 1
a2638 1
 extract_sfmt_dmov2r13h:
d2642 1
a2642 1
#define FLD(f) abuf->fields.sfmt_dmovr13pih.f
d2649 1
a2649 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_dmov2r13h", "f_dir9 0x%x", 'x', f_dir9, (char *) 0));
d2662 1
a2662 1
 extract_sfmt_dmov2r13b:
d2666 1
a2666 1
#define FLD(f) abuf->fields.sfmt_dmovr13pib.f
d2673 1
a2673 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_dmov2r13b", "f_dir8 0x%x", 'x', f_dir8, (char *) 0));
d2686 1
a2686 1
 extract_sfmt_dmov2r13pi:
d2690 1
a2690 1
#define FLD(f) abuf->fields.sfmt_dmovr13pi.f
d2697 1
a2697 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_dmov2r13pi", "f_dir10 0x%x", 'x', f_dir10, (char *) 0));
d2711 1
a2711 1
 extract_sfmt_dmov2r13pih:
d2715 1
a2715 1
#define FLD(f) abuf->fields.sfmt_dmovr13pih.f
d2722 1
a2722 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_dmov2r13pih", "f_dir9 0x%x", 'x', f_dir9, (char *) 0));
d2736 1
a2736 1
 extract_sfmt_dmov2r13pib:
d2740 1
a2740 1
#define FLD(f) abuf->fields.sfmt_dmovr13pib.f
d2747 1
a2747 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_dmov2r13pib", "f_dir8 0x%x", 'x', f_dir8, (char *) 0));
d2761 1
a2761 1
 extract_sfmt_dmov2r15pd:
d2765 1
a2765 1
#define FLD(f) abuf->fields.sfmt_dmovr15pi.f
d2772 1
a2772 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_dmov2r15pd", "f_dir10 0x%x", 'x', f_dir10, (char *) 0));
d2786 1
a2786 1
 extract_sfmt_ldres:
d2790 1
a2790 1
#define FLD(f) abuf->fields.sfmt_add2.f
d2797 1
a2797 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_ldres", "Ri 0x%x", 'x', f_Ri, (char *) 0));
d2811 1
a2811 1
 extract_sfmt_copop:
d2815 1
a2815 1
#define FLD(f) abuf->fields.fmt_empty.f
d2822 1
a2822 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_copop", (char *) 0));
d2828 1
a2828 1
 extract_sfmt_andccr:
d2832 1
a2832 1
#define FLD(f) abuf->fields.sfmt_int.f
d2839 1
a2839 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_andccr", "f_u8 0x%x", 'x', f_u8, (char *) 0));
d2845 1
a2845 1
 extract_sfmt_stilm:
d2849 1
a2849 1
#define FLD(f) abuf->fields.sfmt_int.f
d2856 1
a2856 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_stilm", "f_u8 0x%x", 'x', f_u8, (char *) 0));
d2862 1
a2862 1
 extract_sfmt_addsp:
d2866 1
a2866 1
#define FLD(f) abuf->fields.sfmt_addsp.f
d2873 1
a2873 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_addsp", "f_s10 0x%x", 'x', f_s10, (char *) 0));
d2887 1
a2887 1
 extract_sfmt_extsb:
d2891 1
a2891 1
#define FLD(f) abuf->fields.sfmt_add2.f
d2898 1
a2898 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_extsb", "Ri 0x%x", 'x', f_Ri, (char *) 0));
d2912 1
a2912 1
 extract_sfmt_extub:
d2916 1
a2916 1
#define FLD(f) abuf->fields.sfmt_add2.f
d2923 1
a2923 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_extub", "Ri 0x%x", 'x', f_Ri, (char *) 0));
d2937 1
a2937 1
 extract_sfmt_extsh:
d2941 1
a2941 1
#define FLD(f) abuf->fields.sfmt_add2.f
d2948 1
a2948 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_extsh", "Ri 0x%x", 'x', f_Ri, (char *) 0));
d2962 1
a2962 1
 extract_sfmt_extuh:
d2966 1
a2966 1
#define FLD(f) abuf->fields.sfmt_add2.f
d2973 1
a2973 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_extuh", "Ri 0x%x", 'x', f_Ri, (char *) 0));
d2987 1
a2987 1
 extract_sfmt_ldm0:
d2991 1
a2991 1
#define FLD(f) abuf->fields.sfmt_ldm0.f
d2998 1
a2998 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_ldm0", "f_reglist_low_ld 0x%x", 'x', f_reglist_low_ld, (char *) 0));
d3020 1
a3020 1
 extract_sfmt_ldm1:
d3024 1
a3024 1
#define FLD(f) abuf->fields.sfmt_ldm1.f
d3031 1
a3031 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_ldm1", "f_reglist_hi_ld 0x%x", 'x', f_reglist_hi_ld, (char *) 0));
d3052 1
a3052 1
 extract_sfmt_stm0:
d3056 1
a3056 1
#define FLD(f) abuf->fields.sfmt_stm0.f
d3063 1
a3063 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_stm0", "f_reglist_low_st 0x%x", 'x', f_reglist_low_st, (char *) 0));
d3085 1
a3085 1
 extract_sfmt_stm1:
d3089 1
a3089 1
#define FLD(f) abuf->fields.sfmt_stm1.f
d3096 1
a3096 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_stm1", "f_reglist_hi_st 0x%x", 'x', f_reglist_hi_st, (char *) 0));
d3117 1
a3117 1
 extract_sfmt_enter:
d3121 1
a3121 1
#define FLD(f) abuf->fields.sfmt_enter.f
d3128 1
a3128 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_enter", "f_u10 0x%x", 'x', f_u10, (char *) 0));
d3144 1
a3144 1
 extract_sfmt_leave:
d3148 1
a3148 1
#define FLD(f) abuf->fields.sfmt_enter.f
d3152 1
a3152 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_leave", (char *) 0));
d3168 1
a3168 1
 extract_sfmt_xchb:
d3172 1
a3172 1
#define FLD(f) abuf->fields.sfmt_add.f
d3182 1
a3182 1
  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, "sfmt_xchb", "Ri 0x%x", 'x', f_Ri, "Rj 0x%x", 'x', f_Rj, (char *) 0));
@


