head	1.6;
access;
symbols
	gdb_6_3-20041109-release:1.5
	gdb_6_3-branch:1.5.0.66
	gdb_6_3-20041019-branchpoint:1.5
	drow_intercu-merge-20040921:1.5
	drow_intercu-merge-20040915:1.5
	jimb-gdb_6_2-e500-branch:1.5.0.68
	jimb-gdb_6_2-e500-branchpoint:1.5
	gdb_6_2-20040730-release:1.5
	gdb_6_2-branch:1.5.0.64
	gdb_6_2-2004-07-10-gmt-branchpoint:1.5
	gdb_6_1_1-20040616-release:1.5
	gdb_6_1-2004-04-05-release:1.5
	drow_intercu-merge-20040402:1.5
	drow_intercu-merge-20040327:1.5
	ezannoni_pie-20040323-branch:1.5.0.62
	ezannoni_pie-20040323-branchpoint:1.5
	cagney_tramp-20040321-mergepoint:1.5
	cagney_tramp-20040309-branch:1.5.0.60
	cagney_tramp-20040309-branchpoint:1.5
	gdb_6_1-branch:1.5.0.58
	gdb_6_1-2004-03-01-gmt-branchpoint:1.5
	drow_intercu-20040221-branch:1.5.0.56
	drow_intercu-20040221-branchpoint:1.5
	cagney_bfdfile-20040213-branch:1.5.0.54
	cagney_bfdfile-20040213-branchpoint:1.5
	drow-cplus-merge-20040208:1.5
	carlton_dictionary-20040126-merge:1.5
	cagney_bigcore-20040122-branch:1.5.0.52
	cagney_bigcore-20040122-branchpoint:1.5
	drow-cplus-merge-20040113:1.5
	drow-cplus-merge-20031224:1.5
	drow-cplus-merge-20031220:1.5
	carlton_dictionary-20031215-merge:1.5
	drow-cplus-merge-20031214:1.5
	carlton-dictionary-20031111-merge:1.5
	gdb_6_0-2003-10-04-release:1.5
	kettenis_sparc-20030918-branch:1.5.0.50
	kettenis_sparc-20030918-branchpoint:1.5
	carlton_dictionary-20030917-merge:1.5
	ezannoni_pie-20030916-branchpoint:1.5
	ezannoni_pie-20030916-branch:1.5.0.48
	cagney_x86i386-20030821-branch:1.5.0.46
	cagney_x86i386-20030821-branchpoint:1.5
	carlton_dictionary-20030805-merge:1.5
	carlton_dictionary-20030627-merge:1.5
	gdb_6_0-branch:1.5.0.44
	gdb_6_0-2003-06-23-branchpoint:1.5
	jimb-ppc64-linux-20030613-branch:1.5.0.42
	jimb-ppc64-linux-20030613-branchpoint:1.5
	cagney_convert-20030606-branch:1.5.0.40
	cagney_convert-20030606-branchpoint:1.5
	cagney_writestrings-20030508-branch:1.5.0.38
	cagney_writestrings-20030508-branchpoint:1.5
	jimb-ppc64-linux-20030528-branch:1.5.0.36
	jimb-ppc64-linux-20030528-branchpoint:1.5
	carlton_dictionary-20030523-merge:1.5
	cagney_fileio-20030521-branch:1.5.0.34
	cagney_fileio-20030521-branchpoint:1.5
	kettenis_i386newframe-20030517-mergepoint:1.5
	jimb-ppc64-linux-20030509-branch:1.5.0.32
	jimb-ppc64-linux-20030509-branchpoint:1.5
	kettenis_i386newframe-20030504-mergepoint:1.5
	carlton_dictionary-20030430-merge:1.5
	kettenis_i386newframe-20030419-branch:1.5.0.30
	kettenis_i386newframe-20030419-branchpoint:1.5
	carlton_dictionary-20030416-merge:1.5
	cagney_frameaddr-20030409-mergepoint:1.5
	kettenis_i386newframe-20030406-branch:1.5.0.28
	kettenis_i386newframe-20030406-branchpoint:1.5
	cagney_frameaddr-20030403-branchpoint:1.5
	cagney_frameaddr-20030403-branch:1.5.0.26
	cagney_framebase-20030330-mergepoint:1.5
	cagney_framebase-20030326-branch:1.5.0.24
	cagney_framebase-20030326-branchpoint:1.5
	cagney_lazyid-20030317-branch:1.5.0.22
	cagney_lazyid-20030317-branchpoint:1.5
	kettenis-i386newframe-20030316-mergepoint:1.5
	offbyone-20030313-branch:1.5.0.20
	offbyone-20030313-branchpoint:1.5
	kettenis-i386newframe-20030308-branch:1.5.0.18
	kettenis-i386newframe-20030308-branchpoint:1.5
	carlton_dictionary-20030305-merge:1.5
	cagney_offbyone-20030303-branch:1.5.0.16
	cagney_offbyone-20030303-branchpoint:1.5
	carlton_dictionary-20030207-merge:1.5
	interps-20030202-branch:1.5.0.14
	interps-20030202-branchpoint:1.5
	cagney-unwind-20030108-branch:1.5.0.12
	cagney-unwind-20030108-branchpoint:1.5
	carlton_dictionary-20021223-merge:1.5
	gdb_5_3-2002-12-12-release:1.5
	carlton_dictionary-20021115-merge:1.5
	kseitz_interps-20021105-merge:1.5
	kseitz_interps-20021103-merge:1.5
	drow-cplus-merge-20021020:1.5
	drow-cplus-merge-20021025:1.5
	carlton_dictionary-20021025-merge:1.5
	carlton_dictionary-20021011-merge:1.5
	drow-cplus-branch:1.5.0.10
	drow-cplus-branchpoint:1.5
	kseitz_interps-20020930-merge:1.5
	carlton_dictionary-20020927-merge:1.5
	carlton_dictionary-branch:1.5.0.8
	carlton_dictionary-20020920-branchpoint:1.5
	gdb_5_3-branch:1.5.0.6
	gdb_5_3-2002-09-04-branchpoint:1.5
	kseitz_interps-20020829-merge:1.5
	cagney_sysregs-20020825-branch:1.5.0.4
	cagney_sysregs-20020825-branchpoint:1.5
	readline_4_3-import-branch:1.5.0.2
	readline_4_3-import-branchpoint:1.5
	gdb_5_2_1-2002-07-23-release:1.4
	kseitz_interps-20020528-branch:1.4.0.8
	kseitz_interps-20020528-branchpoint:1.4
	cagney_regbuf-20020515-branch:1.4.0.6
	cagney_regbuf-20020515-branchpoint:1.4
	jimb-macro-020506-branch:1.4.0.4
	jimb-macro-020506-branchpoint:1.4
	gdb_5_2-2002-04-29-release:1.4
	gdb_5_2-branch:1.4.0.2
	gdb_5_2-2002-03-03-branchpoint:1.4
	gdb_5_1_1-2002-01-24-release:1.3
	gdb_5_1_0_1-2002-01-03-release:1.3
	gdb_5_1_0_1-2002-01-03-branch:1.3.0.6
	gdb_5_1_0_1-2002-01-03-branchpoint:1.3
	gdb_5_1-2001-11-21-release:1.3
	gdb_s390-2001-09-26-branch:1.3.0.4
	gdb_s390-2001-09-26-branchpoint:1.3
	gdb_5_1-2001-07-29-branch:1.3.0.2
	gdb_5_1-2001-07-29-branchpoint:1.3
	insight-precleanup-2001-01-01:1.2
	gdb-premipsmulti-2000-06-06-branch:1.1.1.5.0.4
	gdb-premipsmulti-2000-06-06-branchpoint:1.1.1.5
	gdb_5_0-2000-05-19-release:1.1.1.5
	gdb_4_18_2-2000-05-18-release:1.1.1.5
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.5
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.5
	gdb_5_0-2000-04-10-branch:1.1.1.5.0.2
	gdb_5_0-2000-04-10-branchpoint:1.1.1.5
	repo-unification-2000-02-06:1.1.1.5
	gdb-2000-02-04:1.1.1.5
	gdb-2000-02-02:1.1.1.5
	gdb-2000-02-01:1.1.1.5
	gdb-2000-01-31:1.1.1.5
	gdb-2000-01-26:1.1.1.5
	gdb-2000-01-24:1.1.1.5
	gdb-2000-01-17:1.1.1.5
	gdb-2000-01-10:1.1.1.5
	gdb-2000-01-05:1.1.1.5
	gdb-1999-12-21:1.1.1.5
	gdb-1999-12-13:1.1.1.5
	gdb-1999-12-07:1.1.1.5
	gdb-1999-12-06:1.1.1.5
	gdb-1999-11-16:1.1.1.5
	gdb-1999-11-08:1.1.1.5
	gdb-1999-11-01:1.1.1.5
	gdb-1999-10-25:1.1.1.5
	gdb-1999-10-18:1.1.1.5
	gdb-1999-10-11:1.1.1.5
	gdb-1999-10-04:1.1.1.5
	gdb-1999-09-28:1.1.1.4
	gdb-1999-09-21:1.1.1.4
	gdb-1999-09-13:1.1.1.4
	gdb-1999-09-08:1.1.1.4
	gdb-1999-08-30:1.1.1.4
	gdb-1999-08-23:1.1.1.4
	gdb-1999-08-16:1.1.1.4
	gdb-1999-08-09:1.1.1.4
	gdb-1999-08-02:1.1.1.3
	gdb-1999-07-26:1.1.1.3
	gdb-1999-07-19:1.1.1.3
	gdb-1999-07-12:1.1.1.3
	gdb-post-reformat-19990707:1.1.1.3
	gdb-1999-07-07-post-reformat-snapshot:1.1.1.3
	gdb-pre-reformat-19990707:1.1.1.3
	gdb-1999-07-07:1.1.1.3
	gdb-1999-07-05:1.1.1.2
	gdb-1999-06-28:1.1.1.2
	gdb-1999-06-21:1.1.1.2
	gdb-1999-06-14:1.1.1.2
	gdb-1999-06-07:1.1.1.2
	gdb-1999-06-01:1.1.1.2
	gdb-4_18-branch:1.1.1.1.0.2
	gdb-4_18-release:1.1.1.1
	gdb-1999-05-25:1.1.1.2
	gdb-1999-05-19:1.1.1.2
	gdb-1999-05-10:1.1.1.2
	gdb-19990504:1.1.1.2
	gdb-19990422:1.1.1.2
	SNAPSHOT:1.1.1
	gdb-4_18:1.1.1.1
	GDB_4_18:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.6
date	2004.11.12.16.45.28;	author cagney;	state dead;
branches;
next	1.5;

1.5
date	2002.07.16.14.30.14;	author cagney;	state Exp;
branches;
next	1.4;

1.4
date	2001.11.14.19.50.01;	author brolley;	state Exp;
branches
	1.4.8.1;
next	1.3;

1.3
date	2001.03.05.16.00.16;	author brolley;	state Exp;
branches;
next	1.2;

1.2
date	2000.10.06.16.58.40;	author brolley;	state Exp;
branches;
next	1.1;

1.1
date	99.04.16.01.35.01;	author shebs;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.04.16.01.35.01;	author shebs;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.04.26.18.32.06;	author shebs;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	99.07.07.17.31.33;	author jsm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	99.08.09.21.36.13;	author jsm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	99.10.05.23.13.36;	author jsm;	state Exp;
branches;
next	;

1.4.8.1
date	2002.07.22.21.47.26;	author kseitz;	state Exp;
branches;
next	;


desc
@@


1.6
log
@2004-11-12  Andrew Cagney  <cagney@@gnu.org>

	* d30v, fr30, mn10200, z8k: Delete directory.
@
text
@// OBSOLETE /* Simulator instruction semantics for fr30bf.
// OBSOLETE 
// OBSOLETE THIS FILE IS MACHINE GENERATED WITH CGEN.
// OBSOLETE 
// OBSOLETE Copyright 1996, 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.
// OBSOLETE 
// OBSOLETE This file is part of the GNU simulators.
// OBSOLETE 
// OBSOLETE This program is free software; you can redistribute it and/or modify
// OBSOLETE it under the terms of the GNU General Public License as published by
// OBSOLETE the Free Software Foundation; either version 2, or (at your option)
// OBSOLETE any later version.
// OBSOLETE 
// OBSOLETE This program is distributed in the hope that it will be useful,
// OBSOLETE but WITHOUT ANY WARRANTY; without even the implied warranty of
// OBSOLETE MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// OBSOLETE GNU General Public License for more details.
// OBSOLETE 
// OBSOLETE You should have received a copy of the GNU General Public License along
// OBSOLETE with this program; if not, write to the Free Software Foundation, Inc.,
// OBSOLETE 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
// OBSOLETE 
// OBSOLETE */
// OBSOLETE 
// OBSOLETE #ifdef DEFINE_LABELS
// OBSOLETE 
// OBSOLETE   /* The labels have the case they have because the enum of insn types
// OBSOLETE      is all uppercase and in the non-stdc case the insn symbol is built
// OBSOLETE      into the enum name.  */
// OBSOLETE 
// OBSOLETE   static struct {
// OBSOLETE     int index;
// OBSOLETE     void *label;
// OBSOLETE   } labels[] = {
// OBSOLETE     { FR30BF_INSN_X_INVALID, && case_sem_INSN_X_INVALID },
// OBSOLETE     { FR30BF_INSN_X_AFTER, && case_sem_INSN_X_AFTER },
// OBSOLETE     { FR30BF_INSN_X_BEFORE, && case_sem_INSN_X_BEFORE },
// OBSOLETE     { FR30BF_INSN_X_CTI_CHAIN, && case_sem_INSN_X_CTI_CHAIN },
// OBSOLETE     { FR30BF_INSN_X_CHAIN, && case_sem_INSN_X_CHAIN },
// OBSOLETE     { FR30BF_INSN_X_BEGIN, && case_sem_INSN_X_BEGIN },
// OBSOLETE     { FR30BF_INSN_ADD, && case_sem_INSN_ADD },
// OBSOLETE     { FR30BF_INSN_ADDI, && case_sem_INSN_ADDI },
// OBSOLETE     { FR30BF_INSN_ADD2, && case_sem_INSN_ADD2 },
// OBSOLETE     { FR30BF_INSN_ADDC, && case_sem_INSN_ADDC },
// OBSOLETE     { FR30BF_INSN_ADDN, && case_sem_INSN_ADDN },
// OBSOLETE     { FR30BF_INSN_ADDNI, && case_sem_INSN_ADDNI },
// OBSOLETE     { FR30BF_INSN_ADDN2, && case_sem_INSN_ADDN2 },
// OBSOLETE     { FR30BF_INSN_SUB, && case_sem_INSN_SUB },
// OBSOLETE     { FR30BF_INSN_SUBC, && case_sem_INSN_SUBC },
// OBSOLETE     { FR30BF_INSN_SUBN, && case_sem_INSN_SUBN },
// OBSOLETE     { FR30BF_INSN_CMP, && case_sem_INSN_CMP },
// OBSOLETE     { FR30BF_INSN_CMPI, && case_sem_INSN_CMPI },
// OBSOLETE     { FR30BF_INSN_CMP2, && case_sem_INSN_CMP2 },
// OBSOLETE     { FR30BF_INSN_AND, && case_sem_INSN_AND },
// OBSOLETE     { FR30BF_INSN_OR, && case_sem_INSN_OR },
// OBSOLETE     { FR30BF_INSN_EOR, && case_sem_INSN_EOR },
// OBSOLETE     { FR30BF_INSN_ANDM, && case_sem_INSN_ANDM },
// OBSOLETE     { FR30BF_INSN_ANDH, && case_sem_INSN_ANDH },
// OBSOLETE     { FR30BF_INSN_ANDB, && case_sem_INSN_ANDB },
// OBSOLETE     { FR30BF_INSN_ORM, && case_sem_INSN_ORM },
// OBSOLETE     { FR30BF_INSN_ORH, && case_sem_INSN_ORH },
// OBSOLETE     { FR30BF_INSN_ORB, && case_sem_INSN_ORB },
// OBSOLETE     { FR30BF_INSN_EORM, && case_sem_INSN_EORM },
// OBSOLETE     { FR30BF_INSN_EORH, && case_sem_INSN_EORH },
// OBSOLETE     { FR30BF_INSN_EORB, && case_sem_INSN_EORB },
// OBSOLETE     { FR30BF_INSN_BANDL, && case_sem_INSN_BANDL },
// OBSOLETE     { FR30BF_INSN_BORL, && case_sem_INSN_BORL },
// OBSOLETE     { FR30BF_INSN_BEORL, && case_sem_INSN_BEORL },
// OBSOLETE     { FR30BF_INSN_BANDH, && case_sem_INSN_BANDH },
// OBSOLETE     { FR30BF_INSN_BORH, && case_sem_INSN_BORH },
// OBSOLETE     { FR30BF_INSN_BEORH, && case_sem_INSN_BEORH },
// OBSOLETE     { FR30BF_INSN_BTSTL, && case_sem_INSN_BTSTL },
// OBSOLETE     { FR30BF_INSN_BTSTH, && case_sem_INSN_BTSTH },
// OBSOLETE     { FR30BF_INSN_MUL, && case_sem_INSN_MUL },
// OBSOLETE     { FR30BF_INSN_MULU, && case_sem_INSN_MULU },
// OBSOLETE     { FR30BF_INSN_MULH, && case_sem_INSN_MULH },
// OBSOLETE     { FR30BF_INSN_MULUH, && case_sem_INSN_MULUH },
// OBSOLETE     { FR30BF_INSN_DIV0S, && case_sem_INSN_DIV0S },
// OBSOLETE     { FR30BF_INSN_DIV0U, && case_sem_INSN_DIV0U },
// OBSOLETE     { FR30BF_INSN_DIV1, && case_sem_INSN_DIV1 },
// OBSOLETE     { FR30BF_INSN_DIV2, && case_sem_INSN_DIV2 },
// OBSOLETE     { FR30BF_INSN_DIV3, && case_sem_INSN_DIV3 },
// OBSOLETE     { FR30BF_INSN_DIV4S, && case_sem_INSN_DIV4S },
// OBSOLETE     { FR30BF_INSN_LSL, && case_sem_INSN_LSL },
// OBSOLETE     { FR30BF_INSN_LSLI, && case_sem_INSN_LSLI },
// OBSOLETE     { FR30BF_INSN_LSL2, && case_sem_INSN_LSL2 },
// OBSOLETE     { FR30BF_INSN_LSR, && case_sem_INSN_LSR },
// OBSOLETE     { FR30BF_INSN_LSRI, && case_sem_INSN_LSRI },
// OBSOLETE     { FR30BF_INSN_LSR2, && case_sem_INSN_LSR2 },
// OBSOLETE     { FR30BF_INSN_ASR, && case_sem_INSN_ASR },
// OBSOLETE     { FR30BF_INSN_ASRI, && case_sem_INSN_ASRI },
// OBSOLETE     { FR30BF_INSN_ASR2, && case_sem_INSN_ASR2 },
// OBSOLETE     { FR30BF_INSN_LDI8, && case_sem_INSN_LDI8 },
// OBSOLETE     { FR30BF_INSN_LDI20, && case_sem_INSN_LDI20 },
// OBSOLETE     { FR30BF_INSN_LDI32, && case_sem_INSN_LDI32 },
// OBSOLETE     { FR30BF_INSN_LD, && case_sem_INSN_LD },
// OBSOLETE     { FR30BF_INSN_LDUH, && case_sem_INSN_LDUH },
// OBSOLETE     { FR30BF_INSN_LDUB, && case_sem_INSN_LDUB },
// OBSOLETE     { FR30BF_INSN_LDR13, && case_sem_INSN_LDR13 },
// OBSOLETE     { FR30BF_INSN_LDR13UH, && case_sem_INSN_LDR13UH },
// OBSOLETE     { FR30BF_INSN_LDR13UB, && case_sem_INSN_LDR13UB },
// OBSOLETE     { FR30BF_INSN_LDR14, && case_sem_INSN_LDR14 },
// OBSOLETE     { FR30BF_INSN_LDR14UH, && case_sem_INSN_LDR14UH },
// OBSOLETE     { FR30BF_INSN_LDR14UB, && case_sem_INSN_LDR14UB },
// OBSOLETE     { FR30BF_INSN_LDR15, && case_sem_INSN_LDR15 },
// OBSOLETE     { FR30BF_INSN_LDR15GR, && case_sem_INSN_LDR15GR },
// OBSOLETE     { FR30BF_INSN_LDR15DR, && case_sem_INSN_LDR15DR },
// OBSOLETE     { FR30BF_INSN_LDR15PS, && case_sem_INSN_LDR15PS },
// OBSOLETE     { FR30BF_INSN_ST, && case_sem_INSN_ST },
// OBSOLETE     { FR30BF_INSN_STH, && case_sem_INSN_STH },
// OBSOLETE     { FR30BF_INSN_STB, && case_sem_INSN_STB },
// OBSOLETE     { FR30BF_INSN_STR13, && case_sem_INSN_STR13 },
// OBSOLETE     { FR30BF_INSN_STR13H, && case_sem_INSN_STR13H },
// OBSOLETE     { FR30BF_INSN_STR13B, && case_sem_INSN_STR13B },
// OBSOLETE     { FR30BF_INSN_STR14, && case_sem_INSN_STR14 },
// OBSOLETE     { FR30BF_INSN_STR14H, && case_sem_INSN_STR14H },
// OBSOLETE     { FR30BF_INSN_STR14B, && case_sem_INSN_STR14B },
// OBSOLETE     { FR30BF_INSN_STR15, && case_sem_INSN_STR15 },
// OBSOLETE     { FR30BF_INSN_STR15GR, && case_sem_INSN_STR15GR },
// OBSOLETE     { FR30BF_INSN_STR15DR, && case_sem_INSN_STR15DR },
// OBSOLETE     { FR30BF_INSN_STR15PS, && case_sem_INSN_STR15PS },
// OBSOLETE     { FR30BF_INSN_MOV, && case_sem_INSN_MOV },
// OBSOLETE     { FR30BF_INSN_MOVDR, && case_sem_INSN_MOVDR },
// OBSOLETE     { FR30BF_INSN_MOVPS, && case_sem_INSN_MOVPS },
// OBSOLETE     { FR30BF_INSN_MOV2DR, && case_sem_INSN_MOV2DR },
// OBSOLETE     { FR30BF_INSN_MOV2PS, && case_sem_INSN_MOV2PS },
// OBSOLETE     { FR30BF_INSN_JMP, && case_sem_INSN_JMP },
// OBSOLETE     { FR30BF_INSN_JMPD, && case_sem_INSN_JMPD },
// OBSOLETE     { FR30BF_INSN_CALLR, && case_sem_INSN_CALLR },
// OBSOLETE     { FR30BF_INSN_CALLRD, && case_sem_INSN_CALLRD },
// OBSOLETE     { FR30BF_INSN_CALL, && case_sem_INSN_CALL },
// OBSOLETE     { FR30BF_INSN_CALLD, && case_sem_INSN_CALLD },
// OBSOLETE     { FR30BF_INSN_RET, && case_sem_INSN_RET },
// OBSOLETE     { FR30BF_INSN_RET_D, && case_sem_INSN_RET_D },
// OBSOLETE     { FR30BF_INSN_INT, && case_sem_INSN_INT },
// OBSOLETE     { FR30BF_INSN_INTE, && case_sem_INSN_INTE },
// OBSOLETE     { FR30BF_INSN_RETI, && case_sem_INSN_RETI },
// OBSOLETE     { FR30BF_INSN_BRAD, && case_sem_INSN_BRAD },
// OBSOLETE     { FR30BF_INSN_BRA, && case_sem_INSN_BRA },
// OBSOLETE     { FR30BF_INSN_BNOD, && case_sem_INSN_BNOD },
// OBSOLETE     { FR30BF_INSN_BNO, && case_sem_INSN_BNO },
// OBSOLETE     { FR30BF_INSN_BEQD, && case_sem_INSN_BEQD },
// OBSOLETE     { FR30BF_INSN_BEQ, && case_sem_INSN_BEQ },
// OBSOLETE     { FR30BF_INSN_BNED, && case_sem_INSN_BNED },
// OBSOLETE     { FR30BF_INSN_BNE, && case_sem_INSN_BNE },
// OBSOLETE     { FR30BF_INSN_BCD, && case_sem_INSN_BCD },
// OBSOLETE     { FR30BF_INSN_BC, && case_sem_INSN_BC },
// OBSOLETE     { FR30BF_INSN_BNCD, && case_sem_INSN_BNCD },
// OBSOLETE     { FR30BF_INSN_BNC, && case_sem_INSN_BNC },
// OBSOLETE     { FR30BF_INSN_BND, && case_sem_INSN_BND },
// OBSOLETE     { FR30BF_INSN_BN, && case_sem_INSN_BN },
// OBSOLETE     { FR30BF_INSN_BPD, && case_sem_INSN_BPD },
// OBSOLETE     { FR30BF_INSN_BP, && case_sem_INSN_BP },
// OBSOLETE     { FR30BF_INSN_BVD, && case_sem_INSN_BVD },
// OBSOLETE     { FR30BF_INSN_BV, && case_sem_INSN_BV },
// OBSOLETE     { FR30BF_INSN_BNVD, && case_sem_INSN_BNVD },
// OBSOLETE     { FR30BF_INSN_BNV, && case_sem_INSN_BNV },
// OBSOLETE     { FR30BF_INSN_BLTD, && case_sem_INSN_BLTD },
// OBSOLETE     { FR30BF_INSN_BLT, && case_sem_INSN_BLT },
// OBSOLETE     { FR30BF_INSN_BGED, && case_sem_INSN_BGED },
// OBSOLETE     { FR30BF_INSN_BGE, && case_sem_INSN_BGE },
// OBSOLETE     { FR30BF_INSN_BLED, && case_sem_INSN_BLED },
// OBSOLETE     { FR30BF_INSN_BLE, && case_sem_INSN_BLE },
// OBSOLETE     { FR30BF_INSN_BGTD, && case_sem_INSN_BGTD },
// OBSOLETE     { FR30BF_INSN_BGT, && case_sem_INSN_BGT },
// OBSOLETE     { FR30BF_INSN_BLSD, && case_sem_INSN_BLSD },
// OBSOLETE     { FR30BF_INSN_BLS, && case_sem_INSN_BLS },
// OBSOLETE     { FR30BF_INSN_BHID, && case_sem_INSN_BHID },
// OBSOLETE     { FR30BF_INSN_BHI, && case_sem_INSN_BHI },
// OBSOLETE     { FR30BF_INSN_DMOVR13, && case_sem_INSN_DMOVR13 },
// OBSOLETE     { FR30BF_INSN_DMOVR13H, && case_sem_INSN_DMOVR13H },
// OBSOLETE     { FR30BF_INSN_DMOVR13B, && case_sem_INSN_DMOVR13B },
// OBSOLETE     { FR30BF_INSN_DMOVR13PI, && case_sem_INSN_DMOVR13PI },
// OBSOLETE     { FR30BF_INSN_DMOVR13PIH, && case_sem_INSN_DMOVR13PIH },
// OBSOLETE     { FR30BF_INSN_DMOVR13PIB, && case_sem_INSN_DMOVR13PIB },
// OBSOLETE     { FR30BF_INSN_DMOVR15PI, && case_sem_INSN_DMOVR15PI },
// OBSOLETE     { FR30BF_INSN_DMOV2R13, && case_sem_INSN_DMOV2R13 },
// OBSOLETE     { FR30BF_INSN_DMOV2R13H, && case_sem_INSN_DMOV2R13H },
// OBSOLETE     { FR30BF_INSN_DMOV2R13B, && case_sem_INSN_DMOV2R13B },
// OBSOLETE     { FR30BF_INSN_DMOV2R13PI, && case_sem_INSN_DMOV2R13PI },
// OBSOLETE     { FR30BF_INSN_DMOV2R13PIH, && case_sem_INSN_DMOV2R13PIH },
// OBSOLETE     { FR30BF_INSN_DMOV2R13PIB, && case_sem_INSN_DMOV2R13PIB },
// OBSOLETE     { FR30BF_INSN_DMOV2R15PD, && case_sem_INSN_DMOV2R15PD },
// OBSOLETE     { FR30BF_INSN_LDRES, && case_sem_INSN_LDRES },
// OBSOLETE     { FR30BF_INSN_STRES, && case_sem_INSN_STRES },
// OBSOLETE     { FR30BF_INSN_COPOP, && case_sem_INSN_COPOP },
// OBSOLETE     { FR30BF_INSN_COPLD, && case_sem_INSN_COPLD },
// OBSOLETE     { FR30BF_INSN_COPST, && case_sem_INSN_COPST },
// OBSOLETE     { FR30BF_INSN_COPSV, && case_sem_INSN_COPSV },
// OBSOLETE     { FR30BF_INSN_NOP, && case_sem_INSN_NOP },
// OBSOLETE     { FR30BF_INSN_ANDCCR, && case_sem_INSN_ANDCCR },
// OBSOLETE     { FR30BF_INSN_ORCCR, && case_sem_INSN_ORCCR },
// OBSOLETE     { FR30BF_INSN_STILM, && case_sem_INSN_STILM },
// OBSOLETE     { FR30BF_INSN_ADDSP, && case_sem_INSN_ADDSP },
// OBSOLETE     { FR30BF_INSN_EXTSB, && case_sem_INSN_EXTSB },
// OBSOLETE     { FR30BF_INSN_EXTUB, && case_sem_INSN_EXTUB },
// OBSOLETE     { FR30BF_INSN_EXTSH, && case_sem_INSN_EXTSH },
// OBSOLETE     { FR30BF_INSN_EXTUH, && case_sem_INSN_EXTUH },
// OBSOLETE     { FR30BF_INSN_LDM0, && case_sem_INSN_LDM0 },
// OBSOLETE     { FR30BF_INSN_LDM1, && case_sem_INSN_LDM1 },
// OBSOLETE     { FR30BF_INSN_STM0, && case_sem_INSN_STM0 },
// OBSOLETE     { FR30BF_INSN_STM1, && case_sem_INSN_STM1 },
// OBSOLETE     { FR30BF_INSN_ENTER, && case_sem_INSN_ENTER },
// OBSOLETE     { FR30BF_INSN_LEAVE, && case_sem_INSN_LEAVE },
// OBSOLETE     { FR30BF_INSN_XCHB, && case_sem_INSN_XCHB },
// OBSOLETE     { 0, 0 }
// OBSOLETE   };
// OBSOLETE   int i;
// OBSOLETE 
// OBSOLETE   for (i = 0; labels[i].label != 0; ++i)
// OBSOLETE     {
// OBSOLETE #if FAST_P
// OBSOLETE       CPU_IDESC (current_cpu) [labels[i].index].sem_fast_lab = labels[i].label;
// OBSOLETE #else
// OBSOLETE       CPU_IDESC (current_cpu) [labels[i].index].sem_full_lab = labels[i].label;
// OBSOLETE #endif
// OBSOLETE     }
// OBSOLETE 
// OBSOLETE #undef DEFINE_LABELS
// OBSOLETE #endif /* DEFINE_LABELS */
// OBSOLETE 
// OBSOLETE #ifdef DEFINE_SWITCH
// OBSOLETE 
// OBSOLETE /* If hyper-fast [well not unnecessarily slow] execution is selected, turn
// OBSOLETE    off frills like tracing and profiling.  */
// OBSOLETE /* FIXME: A better way would be to have TRACE_RESULT check for something
// OBSOLETE    that can cause it to be optimized out.  Another way would be to emit
// OBSOLETE    special handlers into the instruction "stream".  */
// OBSOLETE 
// OBSOLETE #if FAST_P
// OBSOLETE #undef TRACE_RESULT
// OBSOLETE #define TRACE_RESULT(cpu, abuf, name, type, val)
// OBSOLETE #endif
// OBSOLETE 
// OBSOLETE #undef GET_ATTR
// OBSOLETE #if defined (__STDC__) || defined (ALMOST_STDC) || defined (HAVE_STRINGIZE)
// OBSOLETE #define GET_ATTR(cpu, num, attr) CGEN_ATTR_VALUE (NULL, abuf->idesc->attrs, CGEN_INSN_##attr)
// OBSOLETE #else
// OBSOLETE #define GET_ATTR(cpu, num, attr) CGEN_ATTR_VALUE (NULL, abuf->idesc->attrs, CGEN_INSN_/**/attr)
// OBSOLETE #endif
// OBSOLETE 
// OBSOLETE {
// OBSOLETE 
// OBSOLETE #if WITH_SCACHE_PBB
// OBSOLETE 
// OBSOLETE /* Branch to next handler without going around main loop.  */
// OBSOLETE #define NEXT(vpc) goto * SEM_ARGBUF (vpc) -> semantic.sem_case
// OBSOLETE SWITCH (sem, SEM_ARGBUF (vpc) -> semantic.sem_case)
// OBSOLETE 
// OBSOLETE #else /* ! WITH_SCACHE_PBB */
// OBSOLETE 
// OBSOLETE #define NEXT(vpc) BREAK (sem)
// OBSOLETE #ifdef __GNUC__
// OBSOLETE #if FAST_P
// OBSOLETE   SWITCH (sem, SEM_ARGBUF (sc) -> idesc->sem_fast_lab)
// OBSOLETE #else
// OBSOLETE   SWITCH (sem, SEM_ARGBUF (sc) -> idesc->sem_full_lab)
// OBSOLETE #endif
// OBSOLETE #else
// OBSOLETE   SWITCH (sem, SEM_ARGBUF (sc) -> idesc->num)
// OBSOLETE #endif
// OBSOLETE 
// OBSOLETE #endif /* ! WITH_SCACHE_PBB */
// OBSOLETE 
// OBSOLETE     {
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_X_INVALID) : /* --invalid-- */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.fmt_empty.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 0);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     /* Update the recorded pc in the cpu state struct.
// OBSOLETE        Only necessary for WITH_SCACHE case, but to avoid the
// OBSOLETE        conditional compilation ....  */
// OBSOLETE     SET_H_PC (pc);
// OBSOLETE     /* Virtual insns have zero size.  Overwrite vpc with address of next insn
// OBSOLETE        using the default-insn-bitsize spec.  When executing insns in parallel
// OBSOLETE        we may want to queue the fault and continue execution.  */
// OBSOLETE     vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE     vpc = sim_engine_invalid_insn (current_cpu, pc, vpc);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_X_AFTER) : /* --after-- */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.fmt_empty.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 0);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE #if WITH_SCACHE_PBB_FR30BF
// OBSOLETE     fr30bf_pbb_after (current_cpu, sem_arg);
// OBSOLETE #endif
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_X_BEFORE) : /* --before-- */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.fmt_empty.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 0);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE #if WITH_SCACHE_PBB_FR30BF
// OBSOLETE     fr30bf_pbb_before (current_cpu, sem_arg);
// OBSOLETE #endif
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_X_CTI_CHAIN) : /* --cti-chain-- */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.fmt_empty.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 0);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE #if WITH_SCACHE_PBB_FR30BF
// OBSOLETE #ifdef DEFINE_SWITCH
// OBSOLETE     vpc = fr30bf_pbb_cti_chain (current_cpu, sem_arg,
// OBSOLETE 			       pbb_br_type, pbb_br_npc);
// OBSOLETE     BREAK (sem);
// OBSOLETE #else
// OBSOLETE     /* FIXME: Allow provision of explicit ifmt spec in insn spec.  */
// OBSOLETE     vpc = fr30bf_pbb_cti_chain (current_cpu, sem_arg,
// OBSOLETE 			       CPU_PBB_BR_TYPE (current_cpu),
// OBSOLETE 			       CPU_PBB_BR_NPC (current_cpu));
// OBSOLETE #endif
// OBSOLETE #endif
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_X_CHAIN) : /* --chain-- */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.fmt_empty.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 0);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE #if WITH_SCACHE_PBB_FR30BF
// OBSOLETE     vpc = fr30bf_pbb_chain (current_cpu, sem_arg);
// OBSOLETE #ifdef DEFINE_SWITCH
// OBSOLETE     BREAK (sem);
// OBSOLETE #endif
// OBSOLETE #endif
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_X_BEGIN) : /* --begin-- */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.fmt_empty.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 0);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE #if WITH_SCACHE_PBB_FR30BF
// OBSOLETE #if defined DEFINE_SWITCH || defined FAST_P
// OBSOLETE     /* In the switch case FAST_P is a constant, allowing several optimizations
// OBSOLETE        in any called inline functions.  */
// OBSOLETE     vpc = fr30bf_pbb_begin (current_cpu, FAST_P);
// OBSOLETE #else
// OBSOLETE #if 0 /* cgen engine can't handle dynamic fast/full switching yet.  */
// OBSOLETE     vpc = fr30bf_pbb_begin (current_cpu, STATE_RUN_FAST_P (CPU_STATE (current_cpu)));
// OBSOLETE #else
// OBSOLETE     vpc = fr30bf_pbb_begin (current_cpu, 0);
// OBSOLETE #endif
// OBSOLETE #endif
// OBSOLETE #endif
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_ADD) : /* add $Rj,$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = ADDOFSI (* FLD (i_Ri), * FLD (i_Rj), 0);
// OBSOLETE     CPU (h_vbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "vbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = ADDCFSI (* FLD (i_Ri), * FLD (i_Rj), 0);
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (* FLD (i_Ri), * FLD (i_Rj));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = EQSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_ADDI) : /* add $u4,$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_addi.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = ADDOFSI (* FLD (i_Ri), FLD (f_u4), 0);
// OBSOLETE     CPU (h_vbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "vbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = ADDCFSI (* FLD (i_Ri), FLD (f_u4), 0);
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (* FLD (i_Ri), FLD (f_u4));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = EQSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_ADD2) : /* add2 $m4,$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add2.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = ADDOFSI (* FLD (i_Ri), FLD (f_m4), 0);
// OBSOLETE     CPU (h_vbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "vbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = ADDCFSI (* FLD (i_Ri), FLD (f_m4), 0);
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (* FLD (i_Ri), FLD (f_m4));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = EQSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_ADDC) : /* addc $Rj,$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   SI tmp_tmp;
// OBSOLETE   tmp_tmp = ADDCSI (* FLD (i_Ri), * FLD (i_Rj), CPU (h_cbit));
// OBSOLETE   {
// OBSOLETE     BI opval = ADDOFSI (* FLD (i_Ri), * FLD (i_Rj), CPU (h_cbit));
// OBSOLETE     CPU (h_vbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "vbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = ADDCFSI (* FLD (i_Ri), * FLD (i_Rj), CPU (h_cbit));
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = tmp_tmp;
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = EQSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_ADDN) : /* addn $Rj,$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (* FLD (i_Ri), * FLD (i_Rj));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_ADDNI) : /* addn $u4,$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_addi.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (* FLD (i_Ri), FLD (f_u4));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_ADDN2) : /* addn2 $m4,$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add2.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (* FLD (i_Ri), FLD (f_m4));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_SUB) : /* sub $Rj,$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = SUBOFSI (* FLD (i_Ri), * FLD (i_Rj), 0);
// OBSOLETE     CPU (h_vbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "vbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = SUBCFSI (* FLD (i_Ri), * FLD (i_Rj), 0);
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = SUBSI (* FLD (i_Ri), * FLD (i_Rj));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = EQSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_SUBC) : /* subc $Rj,$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   SI tmp_tmp;
// OBSOLETE   tmp_tmp = SUBCSI (* FLD (i_Ri), * FLD (i_Rj), CPU (h_cbit));
// OBSOLETE   {
// OBSOLETE     BI opval = SUBOFSI (* FLD (i_Ri), * FLD (i_Rj), CPU (h_cbit));
// OBSOLETE     CPU (h_vbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "vbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = SUBCFSI (* FLD (i_Ri), * FLD (i_Rj), CPU (h_cbit));
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = tmp_tmp;
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = EQSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_SUBN) : /* subn $Rj,$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = SUBSI (* FLD (i_Ri), * FLD (i_Rj));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_CMP) : /* cmp $Rj,$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   SI tmp_tmp1;
// OBSOLETE   {
// OBSOLETE     BI opval = SUBOFSI (* FLD (i_Ri), * FLD (i_Rj), 0);
// OBSOLETE     CPU (h_vbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "vbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = SUBCFSI (* FLD (i_Ri), * FLD (i_Rj), 0);
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   tmp_tmp1 = SUBSI (* FLD (i_Ri), * FLD (i_Rj));
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = EQSI (tmp_tmp1, 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (tmp_tmp1, 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_CMPI) : /* cmp $u4,$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_addi.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   SI tmp_tmp1;
// OBSOLETE   {
// OBSOLETE     BI opval = SUBOFSI (* FLD (i_Ri), FLD (f_u4), 0);
// OBSOLETE     CPU (h_vbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "vbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = SUBCFSI (* FLD (i_Ri), FLD (f_u4), 0);
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   tmp_tmp1 = SUBSI (* FLD (i_Ri), FLD (f_u4));
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = EQSI (tmp_tmp1, 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (tmp_tmp1, 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_CMP2) : /* cmp2 $m4,$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add2.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   SI tmp_tmp1;
// OBSOLETE   {
// OBSOLETE     BI opval = SUBOFSI (* FLD (i_Ri), FLD (f_m4), 0);
// OBSOLETE     CPU (h_vbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "vbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = SUBCFSI (* FLD (i_Ri), FLD (f_m4), 0);
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   tmp_tmp1 = SUBSI (* FLD (i_Ri), FLD (f_m4));
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = EQSI (tmp_tmp1, 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (tmp_tmp1, 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_AND) : /* and $Rj,$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = ANDSI (* FLD (i_Ri), * FLD (i_Rj));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = EQSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_OR) : /* or $Rj,$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = ORSI (* FLD (i_Ri), * FLD (i_Rj));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = EQSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_EOR) : /* eor $Rj,$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = XORSI (* FLD (i_Ri), * FLD (i_Rj));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = EQSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_ANDM) : /* and $Rj,@@$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   SI tmp_tmp;
// OBSOLETE   tmp_tmp = ANDSI (GETMEMSI (current_cpu, pc, * FLD (i_Ri)), * FLD (i_Rj));
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = EQSI (tmp_tmp, 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (tmp_tmp, 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE   {
// OBSOLETE     SI opval = tmp_tmp;
// OBSOLETE     SETMEMSI (current_cpu, pc, * FLD (i_Ri), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_ANDH) : /* andh $Rj,@@$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   HI tmp_tmp;
// OBSOLETE   tmp_tmp = ANDHI (GETMEMHI (current_cpu, pc, * FLD (i_Ri)), * FLD (i_Rj));
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = EQHI (tmp_tmp, 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = LTHI (tmp_tmp, 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE   {
// OBSOLETE     HI opval = tmp_tmp;
// OBSOLETE     SETMEMHI (current_cpu, pc, * FLD (i_Ri), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_ANDB) : /* andb $Rj,@@$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   QI tmp_tmp;
// OBSOLETE   tmp_tmp = ANDQI (GETMEMQI (current_cpu, pc, * FLD (i_Ri)), * FLD (i_Rj));
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = EQQI (tmp_tmp, 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = LTQI (tmp_tmp, 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE   {
// OBSOLETE     QI opval = tmp_tmp;
// OBSOLETE     SETMEMQI (current_cpu, pc, * FLD (i_Ri), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_ORM) : /* or $Rj,@@$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   SI tmp_tmp;
// OBSOLETE   tmp_tmp = ORSI (GETMEMSI (current_cpu, pc, * FLD (i_Ri)), * FLD (i_Rj));
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = EQSI (tmp_tmp, 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (tmp_tmp, 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE   {
// OBSOLETE     SI opval = tmp_tmp;
// OBSOLETE     SETMEMSI (current_cpu, pc, * FLD (i_Ri), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_ORH) : /* orh $Rj,@@$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   HI tmp_tmp;
// OBSOLETE   tmp_tmp = ORHI (GETMEMHI (current_cpu, pc, * FLD (i_Ri)), * FLD (i_Rj));
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = EQHI (tmp_tmp, 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = LTHI (tmp_tmp, 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE   {
// OBSOLETE     HI opval = tmp_tmp;
// OBSOLETE     SETMEMHI (current_cpu, pc, * FLD (i_Ri), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_ORB) : /* orb $Rj,@@$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   QI tmp_tmp;
// OBSOLETE   tmp_tmp = ORQI (GETMEMQI (current_cpu, pc, * FLD (i_Ri)), * FLD (i_Rj));
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = EQQI (tmp_tmp, 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = LTQI (tmp_tmp, 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE   {
// OBSOLETE     QI opval = tmp_tmp;
// OBSOLETE     SETMEMQI (current_cpu, pc, * FLD (i_Ri), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_EORM) : /* eor $Rj,@@$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   SI tmp_tmp;
// OBSOLETE   tmp_tmp = XORSI (GETMEMSI (current_cpu, pc, * FLD (i_Ri)), * FLD (i_Rj));
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = EQSI (tmp_tmp, 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (tmp_tmp, 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE   {
// OBSOLETE     SI opval = tmp_tmp;
// OBSOLETE     SETMEMSI (current_cpu, pc, * FLD (i_Ri), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_EORH) : /* eorh $Rj,@@$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   HI tmp_tmp;
// OBSOLETE   tmp_tmp = XORHI (GETMEMHI (current_cpu, pc, * FLD (i_Ri)), * FLD (i_Rj));
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = EQHI (tmp_tmp, 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = LTHI (tmp_tmp, 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE   {
// OBSOLETE     HI opval = tmp_tmp;
// OBSOLETE     SETMEMHI (current_cpu, pc, * FLD (i_Ri), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_EORB) : /* eorb $Rj,@@$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   QI tmp_tmp;
// OBSOLETE   tmp_tmp = XORQI (GETMEMQI (current_cpu, pc, * FLD (i_Ri)), * FLD (i_Rj));
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = EQQI (tmp_tmp, 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = LTQI (tmp_tmp, 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE   {
// OBSOLETE     QI opval = tmp_tmp;
// OBSOLETE     SETMEMQI (current_cpu, pc, * FLD (i_Ri), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_BANDL) : /* bandl $u4,@@$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_addi.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     QI opval = ANDQI (ORQI (FLD (f_u4), 240), GETMEMQI (current_cpu, pc, * FLD (i_Ri)));
// OBSOLETE     SETMEMQI (current_cpu, pc, * FLD (i_Ri), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_BORL) : /* borl $u4,@@$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_addi.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     QI opval = ORQI (FLD (f_u4), GETMEMQI (current_cpu, pc, * FLD (i_Ri)));
// OBSOLETE     SETMEMQI (current_cpu, pc, * FLD (i_Ri), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_BEORL) : /* beorl $u4,@@$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_addi.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     QI opval = XORQI (FLD (f_u4), GETMEMQI (current_cpu, pc, * FLD (i_Ri)));
// OBSOLETE     SETMEMQI (current_cpu, pc, * FLD (i_Ri), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_BANDH) : /* bandh $u4,@@$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_addi.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     QI opval = ANDQI (ORQI (SLLQI (FLD (f_u4), 4), 15), GETMEMQI (current_cpu, pc, * FLD (i_Ri)));
// OBSOLETE     SETMEMQI (current_cpu, pc, * FLD (i_Ri), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_BORH) : /* borh $u4,@@$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_addi.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     QI opval = ORQI (SLLQI (FLD (f_u4), 4), GETMEMQI (current_cpu, pc, * FLD (i_Ri)));
// OBSOLETE     SETMEMQI (current_cpu, pc, * FLD (i_Ri), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_BEORH) : /* beorh $u4,@@$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_addi.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     QI opval = XORQI (SLLQI (FLD (f_u4), 4), GETMEMQI (current_cpu, pc, * FLD (i_Ri)));
// OBSOLETE     SETMEMQI (current_cpu, pc, * FLD (i_Ri), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_BTSTL) : /* btstl $u4,@@$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_addi.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   QI tmp_tmp;
// OBSOLETE   tmp_tmp = ANDQI (FLD (f_u4), GETMEMQI (current_cpu, pc, * FLD (i_Ri)));
// OBSOLETE   {
// OBSOLETE     BI opval = EQQI (tmp_tmp, 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = 0;
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_BTSTH) : /* btsth $u4,@@$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_addi.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   QI tmp_tmp;
// OBSOLETE   tmp_tmp = ANDQI (SLLQI (FLD (f_u4), 4), GETMEMQI (current_cpu, pc, * FLD (i_Ri)));
// OBSOLETE   {
// OBSOLETE     BI opval = EQQI (tmp_tmp, 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = LTQI (tmp_tmp, 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_MUL) : /* mul $Rj,$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   DI tmp_tmp;
// OBSOLETE   tmp_tmp = MULDI (EXTSIDI (* FLD (i_Rj)), EXTSIDI (* FLD (i_Ri)));
// OBSOLETE   {
// OBSOLETE     SI opval = TRUNCDISI (tmp_tmp);
// OBSOLETE     SET_H_DR (((UINT) 5), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = TRUNCDISI (SRLDI (tmp_tmp, 32));
// OBSOLETE     SET_H_DR (((UINT) 4), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (GET_H_DR (((UINT) 5)), 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = EQDI (tmp_tmp, MAKEDI (0, 0));
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = ORIF (GTDI (tmp_tmp, MAKEDI (0, 2147483647)), LTDI (tmp_tmp, NEGDI (MAKEDI (0, 0x80000000))));
// OBSOLETE     CPU (h_vbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "vbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_MULU) : /* mulu $Rj,$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   DI tmp_tmp;
// OBSOLETE   tmp_tmp = MULDI (ZEXTSIDI (* FLD (i_Rj)), ZEXTSIDI (* FLD (i_Ri)));
// OBSOLETE   {
// OBSOLETE     SI opval = TRUNCDISI (tmp_tmp);
// OBSOLETE     SET_H_DR (((UINT) 5), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = TRUNCDISI (SRLDI (tmp_tmp, 32));
// OBSOLETE     SET_H_DR (((UINT) 4), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (GET_H_DR (((UINT) 4)), 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = EQSI (GET_H_DR (((UINT) 5)), 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = NESI (GET_H_DR (((UINT) 4)), 0);
// OBSOLETE     CPU (h_vbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "vbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_MULH) : /* mulh $Rj,$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = MULHI (TRUNCSIHI (* FLD (i_Rj)), TRUNCSIHI (* FLD (i_Ri)));
// OBSOLETE     SET_H_DR (((UINT) 5), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (GET_H_DR (((UINT) 5)), 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = GESI (GET_H_DR (((UINT) 5)), 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_MULUH) : /* muluh $Rj,$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = MULSI (ANDSI (* FLD (i_Rj), 65535), ANDSI (* FLD (i_Ri), 65535));
// OBSOLETE     SET_H_DR (((UINT) 5), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (GET_H_DR (((UINT) 5)), 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = GESI (GET_H_DR (((UINT) 5)), 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_DIV0S) : /* div0s $Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_mov2dr.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (GET_H_DR (((UINT) 5)), 0);
// OBSOLETE     CPU (h_d0bit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "d0bit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = XORBI (CPU (h_d0bit), LTSI (* FLD (i_Ri), 0));
// OBSOLETE     CPU (h_d1bit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "d1bit", 'x', opval);
// OBSOLETE   }
// OBSOLETE if (NEBI (CPU (h_d0bit), 0)) {
// OBSOLETE   {
// OBSOLETE     SI opval = 0xffffffff;
// OBSOLETE     SET_H_DR (((UINT) 4), opval);
// OBSOLETE     written |= (1 << 5);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE } else {
// OBSOLETE   {
// OBSOLETE     SI opval = 0;
// OBSOLETE     SET_H_DR (((UINT) 4), opval);
// OBSOLETE     written |= (1 << 5);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_DIV0U) : /* div0u $Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.fmt_empty.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = 0;
// OBSOLETE     CPU (h_d0bit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "d0bit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = 0;
// OBSOLETE     CPU (h_d1bit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "d1bit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = 0;
// OBSOLETE     SET_H_DR (((UINT) 4), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_DIV1) : /* div1 $Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_mov2dr.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   SI tmp_tmp;
// OBSOLETE   {
// OBSOLETE     SI opval = SLLSI (GET_H_DR (((UINT) 4)), 1);
// OBSOLETE     SET_H_DR (((UINT) 4), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE if (LTSI (GET_H_DR (((UINT) 5)), 0)) {
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (GET_H_DR (((UINT) 4)), 1);
// OBSOLETE     SET_H_DR (((UINT) 4), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE   {
// OBSOLETE     SI opval = SLLSI (GET_H_DR (((UINT) 5)), 1);
// OBSOLETE     SET_H_DR (((UINT) 5), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE if (EQBI (CPU (h_d1bit), 1)) {
// OBSOLETE {
// OBSOLETE   tmp_tmp = ADDSI (GET_H_DR (((UINT) 4)), * FLD (i_Ri));
// OBSOLETE   {
// OBSOLETE     BI opval = ADDCFSI (GET_H_DR (((UINT) 4)), * FLD (i_Ri), 0);
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     written |= (1 << 6);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE } else {
// OBSOLETE {
// OBSOLETE   tmp_tmp = SUBSI (GET_H_DR (((UINT) 4)), * FLD (i_Ri));
// OBSOLETE   {
// OBSOLETE     BI opval = SUBCFSI (GET_H_DR (((UINT) 4)), * FLD (i_Ri), 0);
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     written |= (1 << 6);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (NOTBI (XORBI (XORBI (CPU (h_d0bit), CPU (h_d1bit)), CPU (h_cbit)))) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = tmp_tmp;
// OBSOLETE     SET_H_DR (((UINT) 4), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ORSI (GET_H_DR (((UINT) 5)), 1);
// OBSOLETE     SET_H_DR (((UINT) 5), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE   {
// OBSOLETE     BI opval = EQSI (GET_H_DR (((UINT) 4)), 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_DIV2) : /* div2 $Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_mov2dr.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   SI tmp_tmp;
// OBSOLETE if (EQBI (CPU (h_d1bit), 1)) {
// OBSOLETE {
// OBSOLETE   tmp_tmp = ADDSI (GET_H_DR (((UINT) 4)), * FLD (i_Ri));
// OBSOLETE   {
// OBSOLETE     BI opval = ADDCFSI (GET_H_DR (((UINT) 4)), * FLD (i_Ri), 0);
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE } else {
// OBSOLETE {
// OBSOLETE   tmp_tmp = SUBSI (GET_H_DR (((UINT) 4)), * FLD (i_Ri));
// OBSOLETE   {
// OBSOLETE     BI opval = SUBCFSI (GET_H_DR (((UINT) 4)), * FLD (i_Ri), 0);
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (EQSI (tmp_tmp, 0)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = 1;
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     written |= (1 << 5);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = 0;
// OBSOLETE     SET_H_DR (((UINT) 4), opval);
// OBSOLETE     written |= (1 << 4);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE } else {
// OBSOLETE   {
// OBSOLETE     BI opval = 0;
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     written |= (1 << 5);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_DIV3) : /* div3 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.fmt_empty.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE if (EQBI (CPU (h_zbit), 1)) {
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (GET_H_DR (((UINT) 5)), 1);
// OBSOLETE     SET_H_DR (((UINT) 5), opval);
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_DIV4S) : /* div4s */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.fmt_empty.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE if (EQBI (CPU (h_d1bit), 1)) {
// OBSOLETE   {
// OBSOLETE     SI opval = NEGSI (GET_H_DR (((UINT) 5)));
// OBSOLETE     SET_H_DR (((UINT) 5), opval);
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_LSL) : /* lsl $Rj,$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   SI tmp_shift;
// OBSOLETE   tmp_shift = ANDSI (* FLD (i_Rj), 31);
// OBSOLETE if (NESI (tmp_shift, 0)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = NESI (ANDSI (* FLD (i_Ri), SLLSI (1, SUBSI (32, tmp_shift))), 0);
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = SLLSI (* FLD (i_Ri), tmp_shift);
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE } else {
// OBSOLETE   {
// OBSOLETE     BI opval = 0;
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = EQSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_LSLI) : /* lsl $u4,$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_addi.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   SI tmp_shift;
// OBSOLETE   tmp_shift = FLD (f_u4);
// OBSOLETE if (NESI (tmp_shift, 0)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = NESI (ANDSI (* FLD (i_Ri), SLLSI (1, SUBSI (32, tmp_shift))), 0);
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = SLLSI (* FLD (i_Ri), tmp_shift);
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE } else {
// OBSOLETE   {
// OBSOLETE     BI opval = 0;
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = EQSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_LSL2) : /* lsl2 $u4,$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_addi.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   SI tmp_shift;
// OBSOLETE   tmp_shift = ADDSI (FLD (f_u4), 16);
// OBSOLETE if (NESI (tmp_shift, 0)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = NESI (ANDSI (* FLD (i_Ri), SLLSI (1, SUBSI (32, tmp_shift))), 0);
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = SLLSI (* FLD (i_Ri), tmp_shift);
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE } else {
// OBSOLETE   {
// OBSOLETE     BI opval = 0;
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = EQSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_LSR) : /* lsr $Rj,$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   SI tmp_shift;
// OBSOLETE   tmp_shift = ANDSI (* FLD (i_Rj), 31);
// OBSOLETE if (NESI (tmp_shift, 0)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = NESI (ANDSI (* FLD (i_Ri), SLLSI (1, SUBSI (tmp_shift, 1))), 0);
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = SRLSI (* FLD (i_Ri), tmp_shift);
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE } else {
// OBSOLETE   {
// OBSOLETE     BI opval = 0;
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = EQSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_LSRI) : /* lsr $u4,$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_addi.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   SI tmp_shift;
// OBSOLETE   tmp_shift = FLD (f_u4);
// OBSOLETE if (NESI (tmp_shift, 0)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = NESI (ANDSI (* FLD (i_Ri), SLLSI (1, SUBSI (tmp_shift, 1))), 0);
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = SRLSI (* FLD (i_Ri), tmp_shift);
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE } else {
// OBSOLETE   {
// OBSOLETE     BI opval = 0;
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = EQSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_LSR2) : /* lsr2 $u4,$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_addi.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   SI tmp_shift;
// OBSOLETE   tmp_shift = ADDSI (FLD (f_u4), 16);
// OBSOLETE if (NESI (tmp_shift, 0)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = NESI (ANDSI (* FLD (i_Ri), SLLSI (1, SUBSI (tmp_shift, 1))), 0);
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = SRLSI (* FLD (i_Ri), tmp_shift);
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE } else {
// OBSOLETE   {
// OBSOLETE     BI opval = 0;
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = EQSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_ASR) : /* asr $Rj,$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   SI tmp_shift;
// OBSOLETE   tmp_shift = ANDSI (* FLD (i_Rj), 31);
// OBSOLETE if (NESI (tmp_shift, 0)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = NESI (ANDSI (* FLD (i_Ri), SLLSI (1, SUBSI (tmp_shift, 1))), 0);
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = SRASI (* FLD (i_Ri), tmp_shift);
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE } else {
// OBSOLETE   {
// OBSOLETE     BI opval = 0;
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = EQSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_ASRI) : /* asr $u4,$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_addi.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   SI tmp_shift;
// OBSOLETE   tmp_shift = FLD (f_u4);
// OBSOLETE if (NESI (tmp_shift, 0)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = NESI (ANDSI (* FLD (i_Ri), SLLSI (1, SUBSI (tmp_shift, 1))), 0);
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = SRASI (* FLD (i_Ri), tmp_shift);
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE } else {
// OBSOLETE   {
// OBSOLETE     BI opval = 0;
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = EQSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_ASR2) : /* asr2 $u4,$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_addi.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   SI tmp_shift;
// OBSOLETE   tmp_shift = ADDSI (FLD (f_u4), 16);
// OBSOLETE if (NESI (tmp_shift, 0)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = NESI (ANDSI (* FLD (i_Ri), SLLSI (1, SUBSI (tmp_shift, 1))), 0);
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = SRASI (* FLD (i_Ri), tmp_shift);
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE } else {
// OBSOLETE   {
// OBSOLETE     BI opval = 0;
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = EQSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_LDI8) : /* ldi:8 $i8,$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldi8.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = FLD (f_i8);
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_LDI20) : /* ldi:20 $i20,$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldi20.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 4);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = FLD (f_i20);
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_LDI32) : /* ldi:32 $i32,$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldi32.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 6);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = FLD (f_i32);
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_LD) : /* ld @@$Rj,$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldr13.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, * FLD (i_Rj));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_LDUH) : /* lduh @@$Rj,$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldr13.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMUHI (current_cpu, pc, * FLD (i_Rj));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_LDUB) : /* ldub @@$Rj,$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldr13.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMUQI (current_cpu, pc, * FLD (i_Rj));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_LDR13) : /* ld @@($R13,$Rj),$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldr13.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, ADDSI (* FLD (i_Rj), CPU (h_gr[((UINT) 13)])));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_LDR13UH) : /* lduh @@($R13,$Rj),$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldr13.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMUHI (current_cpu, pc, ADDSI (* FLD (i_Rj), CPU (h_gr[((UINT) 13)])));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_LDR13UB) : /* ldub @@($R13,$Rj),$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldr13.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMUQI (current_cpu, pc, ADDSI (* FLD (i_Rj), CPU (h_gr[((UINT) 13)])));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_LDR14) : /* ld @@($R14,$disp10),$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldr14.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, ADDSI (FLD (f_disp10), CPU (h_gr[((UINT) 14)])));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_LDR14UH) : /* lduh @@($R14,$disp9),$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldr14uh.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMUHI (current_cpu, pc, ADDSI (FLD (f_disp9), CPU (h_gr[((UINT) 14)])));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_LDR14UB) : /* ldub @@($R14,$disp8),$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldr14ub.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMUQI (current_cpu, pc, ADDSI (FLD (f_disp8), CPU (h_gr[((UINT) 14)])));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_LDR15) : /* ld @@($R15,$udisp6),$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldr15.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, ADDSI (FLD (f_udisp6), CPU (h_gr[((UINT) 15)])));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_LDR15GR) : /* ld @@$R15+,$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldr15gr.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE if (NESI (FLD (f_Ri), 15)) {
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 4);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_LDR15DR) : /* ld @@$R15+,$Rs2 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldr15dr.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   SI tmp_tmp;
// OBSOLETE   tmp_tmp = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = tmp_tmp;
// OBSOLETE     SET_H_DR (FLD (f_Rs2), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_LDR15PS) : /* ld @@$R15+,$ps */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_addsp.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     USI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
// OBSOLETE     SET_H_PS (opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "ps", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_ST) : /* st $Ri,@@$Rj */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = * FLD (i_Ri);
// OBSOLETE     SETMEMSI (current_cpu, pc, * FLD (i_Rj), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_STH) : /* sth $Ri,@@$Rj */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     HI opval = * FLD (i_Ri);
// OBSOLETE     SETMEMHI (current_cpu, pc, * FLD (i_Rj), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_STB) : /* stb $Ri,@@$Rj */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     QI opval = * FLD (i_Ri);
// OBSOLETE     SETMEMQI (current_cpu, pc, * FLD (i_Rj), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_STR13) : /* st $Ri,@@($R13,$Rj) */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = * FLD (i_Ri);
// OBSOLETE     SETMEMSI (current_cpu, pc, ADDSI (* FLD (i_Rj), CPU (h_gr[((UINT) 13)])), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_STR13H) : /* sth $Ri,@@($R13,$Rj) */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     HI opval = * FLD (i_Ri);
// OBSOLETE     SETMEMHI (current_cpu, pc, ADDSI (* FLD (i_Rj), CPU (h_gr[((UINT) 13)])), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_STR13B) : /* stb $Ri,@@($R13,$Rj) */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     QI opval = * FLD (i_Ri);
// OBSOLETE     SETMEMQI (current_cpu, pc, ADDSI (* FLD (i_Rj), CPU (h_gr[((UINT) 13)])), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_STR14) : /* st $Ri,@@($R14,$disp10) */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str14.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = * FLD (i_Ri);
// OBSOLETE     SETMEMSI (current_cpu, pc, ADDSI (FLD (f_disp10), CPU (h_gr[((UINT) 14)])), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_STR14H) : /* sth $Ri,@@($R14,$disp9) */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str14h.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     HI opval = * FLD (i_Ri);
// OBSOLETE     SETMEMHI (current_cpu, pc, ADDSI (FLD (f_disp9), CPU (h_gr[((UINT) 14)])), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_STR14B) : /* stb $Ri,@@($R14,$disp8) */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str14b.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     QI opval = * FLD (i_Ri);
// OBSOLETE     SETMEMQI (current_cpu, pc, ADDSI (FLD (f_disp8), CPU (h_gr[((UINT) 14)])), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_STR15) : /* st $Ri,@@($R15,$udisp6) */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str15.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = * FLD (i_Ri);
// OBSOLETE     SETMEMSI (current_cpu, pc, ADDSI (CPU (h_gr[((UINT) 15)]), FLD (f_udisp6)), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_STR15GR) : /* st $Ri,@@-$R15 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str15gr.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   SI tmp_tmp;
// OBSOLETE   tmp_tmp = * FLD (i_Ri);
// OBSOLETE   {
// OBSOLETE     SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = tmp_tmp;
// OBSOLETE     SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_STR15DR) : /* st $Rs2,@@-$R15 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldr15dr.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   SI tmp_tmp;
// OBSOLETE   tmp_tmp = GET_H_DR (FLD (f_Rs2));
// OBSOLETE   {
// OBSOLETE     SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = tmp_tmp;
// OBSOLETE     SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_STR15PS) : /* st $ps,@@-$R15 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_addsp.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = GET_H_PS ();
// OBSOLETE     SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_MOV) : /* mov $Rj,$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldr13.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = * FLD (i_Rj);
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_MOVDR) : /* mov $Rs1,$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_movdr.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = GET_H_DR (FLD (f_Rs1));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_MOVPS) : /* mov $ps,$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_movdr.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = GET_H_PS ();
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_MOV2DR) : /* mov $Ri,$Rs1 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_mov2dr.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = * FLD (i_Ri);
// OBSOLETE     SET_H_DR (FLD (f_Rs1), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_MOV2PS) : /* mov $Ri,$ps */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_mov2dr.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     USI opval = * FLD (i_Ri);
// OBSOLETE     SET_H_PS (opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "ps", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_JMP) : /* jmp @@$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_mov2dr.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     USI opval = * FLD (i_Ri);
// OBSOLETE     SEM_BRANCH_VIA_ADDR (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_JMPD) : /* jmp:d @@$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_mov2dr.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     USI opval = * FLD (i_Ri);
// OBSOLETE     SEM_BRANCH_VIA_ADDR (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_CALLR) : /* call @@$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_mov2dr.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (pc, 2);
// OBSOLETE     SET_H_DR (((UINT) 1), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     USI opval = * FLD (i_Ri);
// OBSOLETE     SEM_BRANCH_VIA_ADDR (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_CALLRD) : /* call:d @@$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_mov2dr.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (pc, 4);
// OBSOLETE     SET_H_DR (((UINT) 1), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     USI opval = * FLD (i_Ri);
// OBSOLETE     SEM_BRANCH_VIA_ADDR (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_CALL) : /* call $label12 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_call.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (pc, 2);
// OBSOLETE     SET_H_DR (((UINT) 1), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label12);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_CALLD) : /* call:d $label12 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_call.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (pc, 4);
// OBSOLETE     SET_H_DR (((UINT) 1), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label12);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_RET) : /* ret */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.fmt_empty.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     USI opval = GET_H_DR (((UINT) 1));
// OBSOLETE     SEM_BRANCH_VIA_ADDR (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_RET_D) : /* ret:d */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.fmt_empty.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     USI opval = GET_H_DR (((UINT) 1));
// OBSOLETE     SEM_BRANCH_VIA_ADDR (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_INT) : /* int $u8 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_int.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE ; /*clobber*/
// OBSOLETE ; /*clobber*/
// OBSOLETE ; /*clobber*/
// OBSOLETE   {
// OBSOLETE     SI opval = fr30_int (current_cpu, pc, FLD (f_u8));
// OBSOLETE     SEM_BRANCH_VIA_ADDR (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_INTE) : /* inte */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.fmt_empty.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE ; /*clobber*/
// OBSOLETE ; /*clobber*/
// OBSOLETE ; /*clobber*/
// OBSOLETE   {
// OBSOLETE     SI opval = fr30_inte (current_cpu, pc);
// OBSOLETE     SEM_BRANCH_VIA_ADDR (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_RETI) : /* reti */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.fmt_empty.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE if (EQBI (GET_H_SBIT (), 0)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, GET_H_DR (((UINT) 2)));
// OBSOLETE     SEM_BRANCH_VIA_ADDR (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 7);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (GET_H_DR (((UINT) 2)), 4);
// OBSOLETE     SET_H_DR (((UINT) 2), opval);
// OBSOLETE     written |= (1 << 5);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, GET_H_DR (((UINT) 2)));
// OBSOLETE     SET_H_PS (opval);
// OBSOLETE     written |= (1 << 8);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "ps", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (GET_H_DR (((UINT) 2)), 4);
// OBSOLETE     SET_H_DR (((UINT) 2), opval);
// OBSOLETE     written |= (1 << 5);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE } else {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, GET_H_DR (((UINT) 3)));
// OBSOLETE     SEM_BRANCH_VIA_ADDR (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 7);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (GET_H_DR (((UINT) 3)), 4);
// OBSOLETE     SET_H_DR (((UINT) 3), opval);
// OBSOLETE     written |= (1 << 6);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, GET_H_DR (((UINT) 3)));
// OBSOLETE     SET_H_PS (opval);
// OBSOLETE     written |= (1 << 8);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "ps", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (GET_H_DR (((UINT) 3)), 4);
// OBSOLETE     SET_H_DR (((UINT) 3), opval);
// OBSOLETE     written |= (1 << 6);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_BRAD) : /* bra:d $label9 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_BRA) : /* bra $label9 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_BNOD) : /* bno:d $label9 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.fmt_empty.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE ((void) 0); /*nop*/
// OBSOLETE }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_BNO) : /* bno $label9 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.fmt_empty.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE ((void) 0); /*nop*/
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_BEQD) : /* beq:d $label9 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE if (CPU (h_zbit)) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_BEQ) : /* beq $label9 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE if (CPU (h_zbit)) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_BNED) : /* bne:d $label9 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE if (NOTBI (CPU (h_zbit))) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_BNE) : /* bne $label9 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE if (NOTBI (CPU (h_zbit))) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_BCD) : /* bc:d $label9 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE if (CPU (h_cbit)) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_BC) : /* bc $label9 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE if (CPU (h_cbit)) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_BNCD) : /* bnc:d $label9 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE if (NOTBI (CPU (h_cbit))) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_BNC) : /* bnc $label9 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE if (NOTBI (CPU (h_cbit))) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_BND) : /* bn:d $label9 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE if (CPU (h_nbit)) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_BN) : /* bn $label9 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE if (CPU (h_nbit)) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_BPD) : /* bp:d $label9 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE if (NOTBI (CPU (h_nbit))) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_BP) : /* bp $label9 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE if (NOTBI (CPU (h_nbit))) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_BVD) : /* bv:d $label9 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE if (CPU (h_vbit)) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_BV) : /* bv $label9 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE if (CPU (h_vbit)) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_BNVD) : /* bnv:d $label9 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE if (NOTBI (CPU (h_vbit))) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_BNV) : /* bnv $label9 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE if (NOTBI (CPU (h_vbit))) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_BLTD) : /* blt:d $label9 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE if (XORBI (CPU (h_vbit), CPU (h_nbit))) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_BLT) : /* blt $label9 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE if (XORBI (CPU (h_vbit), CPU (h_nbit))) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_BGED) : /* bge:d $label9 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE if (NOTBI (XORBI (CPU (h_vbit), CPU (h_nbit)))) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_BGE) : /* bge $label9 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE if (NOTBI (XORBI (CPU (h_vbit), CPU (h_nbit)))) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_BLED) : /* ble:d $label9 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE if (ORBI (XORBI (CPU (h_vbit), CPU (h_nbit)), CPU (h_zbit))) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 4);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_BLE) : /* ble $label9 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE if (ORBI (XORBI (CPU (h_vbit), CPU (h_nbit)), CPU (h_zbit))) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 4);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_BGTD) : /* bgt:d $label9 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE if (NOTBI (ORBI (XORBI (CPU (h_vbit), CPU (h_nbit)), CPU (h_zbit)))) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 4);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_BGT) : /* bgt $label9 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE if (NOTBI (ORBI (XORBI (CPU (h_vbit), CPU (h_nbit)), CPU (h_zbit)))) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 4);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_BLSD) : /* bls:d $label9 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE if (ORBI (CPU (h_cbit), CPU (h_zbit))) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_BLS) : /* bls $label9 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE if (ORBI (CPU (h_cbit), CPU (h_zbit))) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_BHID) : /* bhi:d $label9 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE if (NOTBI (ORBI (CPU (h_cbit), CPU (h_zbit)))) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_BHI) : /* bhi $label9 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE if (NOTBI (ORBI (CPU (h_cbit), CPU (h_zbit)))) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_DMOVR13) : /* dmov $R13,@@$dir10 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_dmovr13pi.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = CPU (h_gr[((UINT) 13)]);
// OBSOLETE     SETMEMSI (current_cpu, pc, FLD (f_dir10), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_DMOVR13H) : /* dmovh $R13,@@$dir9 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_dmovr13pih.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     HI opval = CPU (h_gr[((UINT) 13)]);
// OBSOLETE     SETMEMHI (current_cpu, pc, FLD (f_dir9), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_DMOVR13B) : /* dmovb $R13,@@$dir8 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_dmovr13pib.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     QI opval = CPU (h_gr[((UINT) 13)]);
// OBSOLETE     SETMEMQI (current_cpu, pc, FLD (f_dir8), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_DMOVR13PI) : /* dmov @@$R13+,@@$dir10 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_dmovr13pi.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 13)]));
// OBSOLETE     SETMEMSI (current_cpu, pc, FLD (f_dir10), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 13)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 13)]) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_DMOVR13PIH) : /* dmovh @@$R13+,@@$dir9 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_dmovr13pih.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     HI opval = GETMEMHI (current_cpu, pc, CPU (h_gr[((UINT) 13)]));
// OBSOLETE     SETMEMHI (current_cpu, pc, FLD (f_dir9), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 13)]), 2);
// OBSOLETE     CPU (h_gr[((UINT) 13)]) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_DMOVR13PIB) : /* dmovb @@$R13+,@@$dir8 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_dmovr13pib.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     QI opval = GETMEMQI (current_cpu, pc, CPU (h_gr[((UINT) 13)]));
// OBSOLETE     SETMEMQI (current_cpu, pc, FLD (f_dir8), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 13)]), 1);
// OBSOLETE     CPU (h_gr[((UINT) 13)]) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_DMOVR15PI) : /* dmov @@$R15+,@@$dir10 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_dmovr15pi.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
// OBSOLETE     SETMEMSI (current_cpu, pc, FLD (f_dir10), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_DMOV2R13) : /* dmov @@$dir10,$R13 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_dmovr13pi.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, FLD (f_dir10));
// OBSOLETE     CPU (h_gr[((UINT) 13)]) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_DMOV2R13H) : /* dmovh @@$dir9,$R13 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_dmovr13pih.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMHI (current_cpu, pc, FLD (f_dir9));
// OBSOLETE     CPU (h_gr[((UINT) 13)]) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_DMOV2R13B) : /* dmovb @@$dir8,$R13 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_dmovr13pib.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMQI (current_cpu, pc, FLD (f_dir8));
// OBSOLETE     CPU (h_gr[((UINT) 13)]) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_DMOV2R13PI) : /* dmov @@$dir10,@@$R13+ */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_dmovr13pi.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, FLD (f_dir10));
// OBSOLETE     SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 13)]), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 13)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 13)]) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_DMOV2R13PIH) : /* dmovh @@$dir9,@@$R13+ */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_dmovr13pih.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     HI opval = GETMEMHI (current_cpu, pc, FLD (f_dir9));
// OBSOLETE     SETMEMHI (current_cpu, pc, CPU (h_gr[((UINT) 13)]), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 13)]), 2);
// OBSOLETE     CPU (h_gr[((UINT) 13)]) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_DMOV2R13PIB) : /* dmovb @@$dir8,@@$R13+ */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_dmovr13pib.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     QI opval = GETMEMQI (current_cpu, pc, FLD (f_dir8));
// OBSOLETE     SETMEMQI (current_cpu, pc, CPU (h_gr[((UINT) 13)]), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 13)]), 1);
// OBSOLETE     CPU (h_gr[((UINT) 13)]) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_DMOV2R15PD) : /* dmov @@$dir10,@@-$R15 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_dmovr15pi.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, FLD (f_dir10));
// OBSOLETE     SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_LDRES) : /* ldres @@$Ri+,$u4 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add2.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (* FLD (i_Ri), 4);
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_STRES) : /* stres $u4,@@$Ri+ */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add2.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (* FLD (i_Ri), 4);
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_COPOP) : /* copop $u4c,$ccc,$CRj,$CRi */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.fmt_empty.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 4);
// OBSOLETE 
// OBSOLETE ((void) 0); /*nop*/
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_COPLD) : /* copld $u4c,$ccc,$Rjc,$CRi */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.fmt_empty.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 4);
// OBSOLETE 
// OBSOLETE ((void) 0); /*nop*/
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_COPST) : /* copst $u4c,$ccc,$CRj,$Ric */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.fmt_empty.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 4);
// OBSOLETE 
// OBSOLETE ((void) 0); /*nop*/
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_COPSV) : /* copsv $u4c,$ccc,$CRj,$Ric */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.fmt_empty.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 4);
// OBSOLETE 
// OBSOLETE ((void) 0); /*nop*/
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_NOP) : /* nop */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.fmt_empty.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE ((void) 0); /*nop*/
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_ANDCCR) : /* andccr $u8 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_int.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     UQI opval = ANDQI (GET_H_CCR (), FLD (f_u8));
// OBSOLETE     SET_H_CCR (opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "ccr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_ORCCR) : /* orccr $u8 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_int.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     UQI opval = ORQI (GET_H_CCR (), FLD (f_u8));
// OBSOLETE     SET_H_CCR (opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "ccr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_STILM) : /* stilm $u8 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_int.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     UQI opval = ANDSI (FLD (f_u8), 31);
// OBSOLETE     SET_H_ILM (opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "ilm", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_ADDSP) : /* addsp $s10 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_addsp.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), FLD (f_s10));
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_EXTSB) : /* extsb $Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add2.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = EXTQISI (ANDQI (* FLD (i_Ri), 255));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_EXTUB) : /* extub $Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add2.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = ZEXTQISI (ANDQI (* FLD (i_Ri), 255));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_EXTSH) : /* extsh $Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add2.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = EXTHISI (ANDHI (* FLD (i_Ri), 65535));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_EXTUH) : /* extuh $Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add2.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = ZEXTHISI (ANDHI (* FLD (i_Ri), 65535));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_LDM0) : /* ldm0 ($reglist_low_ld) */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldm0.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE if (ANDSI (FLD (f_reglist_low_ld), 1)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
// OBSOLETE     CPU (h_gr[((UINT) 0)]) = opval;
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 5);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_low_ld), 2)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
// OBSOLETE     CPU (h_gr[((UINT) 1)]) = opval;
// OBSOLETE     written |= (1 << 4);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 5);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_low_ld), 4)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
// OBSOLETE     CPU (h_gr[((UINT) 2)]) = opval;
// OBSOLETE     written |= (1 << 6);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 5);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_low_ld), 8)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
// OBSOLETE     CPU (h_gr[((UINT) 3)]) = opval;
// OBSOLETE     written |= (1 << 7);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 5);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_low_ld), 16)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
// OBSOLETE     CPU (h_gr[((UINT) 4)]) = opval;
// OBSOLETE     written |= (1 << 8);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 5);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_low_ld), 32)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
// OBSOLETE     CPU (h_gr[((UINT) 5)]) = opval;
// OBSOLETE     written |= (1 << 9);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 5);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_low_ld), 64)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
// OBSOLETE     CPU (h_gr[((UINT) 6)]) = opval;
// OBSOLETE     written |= (1 << 10);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 5);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_low_ld), 128)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
// OBSOLETE     CPU (h_gr[((UINT) 7)]) = opval;
// OBSOLETE     written |= (1 << 11);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 5);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_LDM1) : /* ldm1 ($reglist_hi_ld) */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldm1.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE if (ANDSI (FLD (f_reglist_hi_ld), 1)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
// OBSOLETE     CPU (h_gr[((UINT) 8)]) = opval;
// OBSOLETE     written |= (1 << 9);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 8);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_hi_ld), 2)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
// OBSOLETE     CPU (h_gr[((UINT) 9)]) = opval;
// OBSOLETE     written |= (1 << 10);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 8);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_hi_ld), 4)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
// OBSOLETE     CPU (h_gr[((UINT) 10)]) = opval;
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 8);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_hi_ld), 8)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
// OBSOLETE     CPU (h_gr[((UINT) 11)]) = opval;
// OBSOLETE     written |= (1 << 4);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 8);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_hi_ld), 16)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
// OBSOLETE     CPU (h_gr[((UINT) 12)]) = opval;
// OBSOLETE     written |= (1 << 5);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 8);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_hi_ld), 32)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
// OBSOLETE     CPU (h_gr[((UINT) 13)]) = opval;
// OBSOLETE     written |= (1 << 6);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 8);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_hi_ld), 64)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
// OBSOLETE     CPU (h_gr[((UINT) 14)]) = opval;
// OBSOLETE     written |= (1 << 7);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 8);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_hi_ld), 128)) {
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 8);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_STM0) : /* stm0 ($reglist_low_st) */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_stm0.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE if (ANDSI (FLD (f_reglist_low_st), 1)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 10);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = CPU (h_gr[((UINT) 7)]);
// OBSOLETE     SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
// OBSOLETE     written |= (1 << 11);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_low_st), 2)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 10);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = CPU (h_gr[((UINT) 6)]);
// OBSOLETE     SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
// OBSOLETE     written |= (1 << 11);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_low_st), 4)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 10);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = CPU (h_gr[((UINT) 5)]);
// OBSOLETE     SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
// OBSOLETE     written |= (1 << 11);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_low_st), 8)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 10);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = CPU (h_gr[((UINT) 4)]);
// OBSOLETE     SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
// OBSOLETE     written |= (1 << 11);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_low_st), 16)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 10);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = CPU (h_gr[((UINT) 3)]);
// OBSOLETE     SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
// OBSOLETE     written |= (1 << 11);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_low_st), 32)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 10);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = CPU (h_gr[((UINT) 2)]);
// OBSOLETE     SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
// OBSOLETE     written |= (1 << 11);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_low_st), 64)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 10);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = CPU (h_gr[((UINT) 1)]);
// OBSOLETE     SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
// OBSOLETE     written |= (1 << 11);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_low_st), 128)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 10);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = CPU (h_gr[((UINT) 0)]);
// OBSOLETE     SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
// OBSOLETE     written |= (1 << 11);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_STM1) : /* stm1 ($reglist_hi_st) */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_stm1.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE if (ANDSI (FLD (f_reglist_hi_st), 1)) {
// OBSOLETE {
// OBSOLETE   SI tmp_save_r15;
// OBSOLETE   tmp_save_r15 = CPU (h_gr[((UINT) 15)]);
// OBSOLETE   {
// OBSOLETE     SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 9);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = tmp_save_r15;
// OBSOLETE     SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
// OBSOLETE     written |= (1 << 10);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_hi_st), 2)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 9);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = CPU (h_gr[((UINT) 14)]);
// OBSOLETE     SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
// OBSOLETE     written |= (1 << 10);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_hi_st), 4)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 9);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = CPU (h_gr[((UINT) 13)]);
// OBSOLETE     SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
// OBSOLETE     written |= (1 << 10);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_hi_st), 8)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 9);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = CPU (h_gr[((UINT) 12)]);
// OBSOLETE     SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
// OBSOLETE     written |= (1 << 10);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_hi_st), 16)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 9);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = CPU (h_gr[((UINT) 11)]);
// OBSOLETE     SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
// OBSOLETE     written |= (1 << 10);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_hi_st), 32)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 9);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = CPU (h_gr[((UINT) 10)]);
// OBSOLETE     SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
// OBSOLETE     written |= (1 << 10);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_hi_st), 64)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 9);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = CPU (h_gr[((UINT) 9)]);
// OBSOLETE     SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
// OBSOLETE     written |= (1 << 10);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_hi_st), 128)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 9);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = CPU (h_gr[((UINT) 8)]);
// OBSOLETE     SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
// OBSOLETE     written |= (1 << 10);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_ENTER) : /* enter $u10 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_enter.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   SI tmp_tmp;
// OBSOLETE   tmp_tmp = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE   {
// OBSOLETE     SI opval = CPU (h_gr[((UINT) 14)]);
// OBSOLETE     SETMEMSI (current_cpu, pc, tmp_tmp, opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = tmp_tmp;
// OBSOLETE     CPU (h_gr[((UINT) 14)]) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), FLD (f_u10));
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_LEAVE) : /* leave */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_enter.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 14)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, SUBSI (CPU (h_gr[((UINT) 15)]), 4));
// OBSOLETE     CPU (h_gr[((UINT) 14)]) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_XCHB) : /* xchb @@$Rj,$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   SI tmp_tmp;
// OBSOLETE   tmp_tmp = * FLD (i_Ri);
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMUQI (current_cpu, pc, * FLD (i_Rj));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     UQI opval = tmp_tmp;
// OBSOLETE     SETMEMUQI (current_cpu, pc, * FLD (i_Rj), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE 
// OBSOLETE     }
// OBSOLETE   ENDSWITCH (sem) /* End of semantic switch.  */
// OBSOLETE 
// OBSOLETE   /* At this point `vpc' contains the next insn to execute.  */
// OBSOLETE }
// OBSOLETE 
// OBSOLETE #undef DEFINE_SWITCH
// OBSOLETE #endif /* DEFINE_SWITCH */
@


1.5
log
@Obsolete fr30.
@
text
@@


1.4
log
@2001-11-14  Dave Brolley  <brolley@@redhat.com>

	* arch.c: Regenerate.
	* arch.h: Regenerate.
	* cpu.c: Regenerate.
	* cpu.h: Regenerate.
	* cpuall.h: Regenerate.
	* decode.c: Regenerate.
	* decode.h: Regenerate.
	* model.c: Regenerate.
	* sem-switch.c: Regenerate.
	* sem.c: Regenerate.
@
text
@d1 5409
a5409 5409
/* Simulator instruction semantics for fr30bf.

THIS FILE IS MACHINE GENERATED WITH CGEN.

Copyright 1996, 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.

This file is part of the GNU simulators.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License along
with this program; if not, write to the Free Software Foundation, Inc.,
59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

*/

#ifdef DEFINE_LABELS

  /* The labels have the case they have because the enum of insn types
     is all uppercase and in the non-stdc case the insn symbol is built
     into the enum name.  */

  static struct {
    int index;
    void *label;
  } labels[] = {
    { FR30BF_INSN_X_INVALID, && case_sem_INSN_X_INVALID },
    { FR30BF_INSN_X_AFTER, && case_sem_INSN_X_AFTER },
    { FR30BF_INSN_X_BEFORE, && case_sem_INSN_X_BEFORE },
    { FR30BF_INSN_X_CTI_CHAIN, && case_sem_INSN_X_CTI_CHAIN },
    { FR30BF_INSN_X_CHAIN, && case_sem_INSN_X_CHAIN },
    { FR30BF_INSN_X_BEGIN, && case_sem_INSN_X_BEGIN },
    { FR30BF_INSN_ADD, && case_sem_INSN_ADD },
    { FR30BF_INSN_ADDI, && case_sem_INSN_ADDI },
    { FR30BF_INSN_ADD2, && case_sem_INSN_ADD2 },
    { FR30BF_INSN_ADDC, && case_sem_INSN_ADDC },
    { FR30BF_INSN_ADDN, && case_sem_INSN_ADDN },
    { FR30BF_INSN_ADDNI, && case_sem_INSN_ADDNI },
    { FR30BF_INSN_ADDN2, && case_sem_INSN_ADDN2 },
    { FR30BF_INSN_SUB, && case_sem_INSN_SUB },
    { FR30BF_INSN_SUBC, && case_sem_INSN_SUBC },
    { FR30BF_INSN_SUBN, && case_sem_INSN_SUBN },
    { FR30BF_INSN_CMP, && case_sem_INSN_CMP },
    { FR30BF_INSN_CMPI, && case_sem_INSN_CMPI },
    { FR30BF_INSN_CMP2, && case_sem_INSN_CMP2 },
    { FR30BF_INSN_AND, && case_sem_INSN_AND },
    { FR30BF_INSN_OR, && case_sem_INSN_OR },
    { FR30BF_INSN_EOR, && case_sem_INSN_EOR },
    { FR30BF_INSN_ANDM, && case_sem_INSN_ANDM },
    { FR30BF_INSN_ANDH, && case_sem_INSN_ANDH },
    { FR30BF_INSN_ANDB, && case_sem_INSN_ANDB },
    { FR30BF_INSN_ORM, && case_sem_INSN_ORM },
    { FR30BF_INSN_ORH, && case_sem_INSN_ORH },
    { FR30BF_INSN_ORB, && case_sem_INSN_ORB },
    { FR30BF_INSN_EORM, && case_sem_INSN_EORM },
    { FR30BF_INSN_EORH, && case_sem_INSN_EORH },
    { FR30BF_INSN_EORB, && case_sem_INSN_EORB },
    { FR30BF_INSN_BANDL, && case_sem_INSN_BANDL },
    { FR30BF_INSN_BORL, && case_sem_INSN_BORL },
    { FR30BF_INSN_BEORL, && case_sem_INSN_BEORL },
    { FR30BF_INSN_BANDH, && case_sem_INSN_BANDH },
    { FR30BF_INSN_BORH, && case_sem_INSN_BORH },
    { FR30BF_INSN_BEORH, && case_sem_INSN_BEORH },
    { FR30BF_INSN_BTSTL, && case_sem_INSN_BTSTL },
    { FR30BF_INSN_BTSTH, && case_sem_INSN_BTSTH },
    { FR30BF_INSN_MUL, && case_sem_INSN_MUL },
    { FR30BF_INSN_MULU, && case_sem_INSN_MULU },
    { FR30BF_INSN_MULH, && case_sem_INSN_MULH },
    { FR30BF_INSN_MULUH, && case_sem_INSN_MULUH },
    { FR30BF_INSN_DIV0S, && case_sem_INSN_DIV0S },
    { FR30BF_INSN_DIV0U, && case_sem_INSN_DIV0U },
    { FR30BF_INSN_DIV1, && case_sem_INSN_DIV1 },
    { FR30BF_INSN_DIV2, && case_sem_INSN_DIV2 },
    { FR30BF_INSN_DIV3, && case_sem_INSN_DIV3 },
    { FR30BF_INSN_DIV4S, && case_sem_INSN_DIV4S },
    { FR30BF_INSN_LSL, && case_sem_INSN_LSL },
    { FR30BF_INSN_LSLI, && case_sem_INSN_LSLI },
    { FR30BF_INSN_LSL2, && case_sem_INSN_LSL2 },
    { FR30BF_INSN_LSR, && case_sem_INSN_LSR },
    { FR30BF_INSN_LSRI, && case_sem_INSN_LSRI },
    { FR30BF_INSN_LSR2, && case_sem_INSN_LSR2 },
    { FR30BF_INSN_ASR, && case_sem_INSN_ASR },
    { FR30BF_INSN_ASRI, && case_sem_INSN_ASRI },
    { FR30BF_INSN_ASR2, && case_sem_INSN_ASR2 },
    { FR30BF_INSN_LDI8, && case_sem_INSN_LDI8 },
    { FR30BF_INSN_LDI20, && case_sem_INSN_LDI20 },
    { FR30BF_INSN_LDI32, && case_sem_INSN_LDI32 },
    { FR30BF_INSN_LD, && case_sem_INSN_LD },
    { FR30BF_INSN_LDUH, && case_sem_INSN_LDUH },
    { FR30BF_INSN_LDUB, && case_sem_INSN_LDUB },
    { FR30BF_INSN_LDR13, && case_sem_INSN_LDR13 },
    { FR30BF_INSN_LDR13UH, && case_sem_INSN_LDR13UH },
    { FR30BF_INSN_LDR13UB, && case_sem_INSN_LDR13UB },
    { FR30BF_INSN_LDR14, && case_sem_INSN_LDR14 },
    { FR30BF_INSN_LDR14UH, && case_sem_INSN_LDR14UH },
    { FR30BF_INSN_LDR14UB, && case_sem_INSN_LDR14UB },
    { FR30BF_INSN_LDR15, && case_sem_INSN_LDR15 },
    { FR30BF_INSN_LDR15GR, && case_sem_INSN_LDR15GR },
    { FR30BF_INSN_LDR15DR, && case_sem_INSN_LDR15DR },
    { FR30BF_INSN_LDR15PS, && case_sem_INSN_LDR15PS },
    { FR30BF_INSN_ST, && case_sem_INSN_ST },
    { FR30BF_INSN_STH, && case_sem_INSN_STH },
    { FR30BF_INSN_STB, && case_sem_INSN_STB },
    { FR30BF_INSN_STR13, && case_sem_INSN_STR13 },
    { FR30BF_INSN_STR13H, && case_sem_INSN_STR13H },
    { FR30BF_INSN_STR13B, && case_sem_INSN_STR13B },
    { FR30BF_INSN_STR14, && case_sem_INSN_STR14 },
    { FR30BF_INSN_STR14H, && case_sem_INSN_STR14H },
    { FR30BF_INSN_STR14B, && case_sem_INSN_STR14B },
    { FR30BF_INSN_STR15, && case_sem_INSN_STR15 },
    { FR30BF_INSN_STR15GR, && case_sem_INSN_STR15GR },
    { FR30BF_INSN_STR15DR, && case_sem_INSN_STR15DR },
    { FR30BF_INSN_STR15PS, && case_sem_INSN_STR15PS },
    { FR30BF_INSN_MOV, && case_sem_INSN_MOV },
    { FR30BF_INSN_MOVDR, && case_sem_INSN_MOVDR },
    { FR30BF_INSN_MOVPS, && case_sem_INSN_MOVPS },
    { FR30BF_INSN_MOV2DR, && case_sem_INSN_MOV2DR },
    { FR30BF_INSN_MOV2PS, && case_sem_INSN_MOV2PS },
    { FR30BF_INSN_JMP, && case_sem_INSN_JMP },
    { FR30BF_INSN_JMPD, && case_sem_INSN_JMPD },
    { FR30BF_INSN_CALLR, && case_sem_INSN_CALLR },
    { FR30BF_INSN_CALLRD, && case_sem_INSN_CALLRD },
    { FR30BF_INSN_CALL, && case_sem_INSN_CALL },
    { FR30BF_INSN_CALLD, && case_sem_INSN_CALLD },
    { FR30BF_INSN_RET, && case_sem_INSN_RET },
    { FR30BF_INSN_RET_D, && case_sem_INSN_RET_D },
    { FR30BF_INSN_INT, && case_sem_INSN_INT },
    { FR30BF_INSN_INTE, && case_sem_INSN_INTE },
    { FR30BF_INSN_RETI, && case_sem_INSN_RETI },
    { FR30BF_INSN_BRAD, && case_sem_INSN_BRAD },
    { FR30BF_INSN_BRA, && case_sem_INSN_BRA },
    { FR30BF_INSN_BNOD, && case_sem_INSN_BNOD },
    { FR30BF_INSN_BNO, && case_sem_INSN_BNO },
    { FR30BF_INSN_BEQD, && case_sem_INSN_BEQD },
    { FR30BF_INSN_BEQ, && case_sem_INSN_BEQ },
    { FR30BF_INSN_BNED, && case_sem_INSN_BNED },
    { FR30BF_INSN_BNE, && case_sem_INSN_BNE },
    { FR30BF_INSN_BCD, && case_sem_INSN_BCD },
    { FR30BF_INSN_BC, && case_sem_INSN_BC },
    { FR30BF_INSN_BNCD, && case_sem_INSN_BNCD },
    { FR30BF_INSN_BNC, && case_sem_INSN_BNC },
    { FR30BF_INSN_BND, && case_sem_INSN_BND },
    { FR30BF_INSN_BN, && case_sem_INSN_BN },
    { FR30BF_INSN_BPD, && case_sem_INSN_BPD },
    { FR30BF_INSN_BP, && case_sem_INSN_BP },
    { FR30BF_INSN_BVD, && case_sem_INSN_BVD },
    { FR30BF_INSN_BV, && case_sem_INSN_BV },
    { FR30BF_INSN_BNVD, && case_sem_INSN_BNVD },
    { FR30BF_INSN_BNV, && case_sem_INSN_BNV },
    { FR30BF_INSN_BLTD, && case_sem_INSN_BLTD },
    { FR30BF_INSN_BLT, && case_sem_INSN_BLT },
    { FR30BF_INSN_BGED, && case_sem_INSN_BGED },
    { FR30BF_INSN_BGE, && case_sem_INSN_BGE },
    { FR30BF_INSN_BLED, && case_sem_INSN_BLED },
    { FR30BF_INSN_BLE, && case_sem_INSN_BLE },
    { FR30BF_INSN_BGTD, && case_sem_INSN_BGTD },
    { FR30BF_INSN_BGT, && case_sem_INSN_BGT },
    { FR30BF_INSN_BLSD, && case_sem_INSN_BLSD },
    { FR30BF_INSN_BLS, && case_sem_INSN_BLS },
    { FR30BF_INSN_BHID, && case_sem_INSN_BHID },
    { FR30BF_INSN_BHI, && case_sem_INSN_BHI },
    { FR30BF_INSN_DMOVR13, && case_sem_INSN_DMOVR13 },
    { FR30BF_INSN_DMOVR13H, && case_sem_INSN_DMOVR13H },
    { FR30BF_INSN_DMOVR13B, && case_sem_INSN_DMOVR13B },
    { FR30BF_INSN_DMOVR13PI, && case_sem_INSN_DMOVR13PI },
    { FR30BF_INSN_DMOVR13PIH, && case_sem_INSN_DMOVR13PIH },
    { FR30BF_INSN_DMOVR13PIB, && case_sem_INSN_DMOVR13PIB },
    { FR30BF_INSN_DMOVR15PI, && case_sem_INSN_DMOVR15PI },
    { FR30BF_INSN_DMOV2R13, && case_sem_INSN_DMOV2R13 },
    { FR30BF_INSN_DMOV2R13H, && case_sem_INSN_DMOV2R13H },
    { FR30BF_INSN_DMOV2R13B, && case_sem_INSN_DMOV2R13B },
    { FR30BF_INSN_DMOV2R13PI, && case_sem_INSN_DMOV2R13PI },
    { FR30BF_INSN_DMOV2R13PIH, && case_sem_INSN_DMOV2R13PIH },
    { FR30BF_INSN_DMOV2R13PIB, && case_sem_INSN_DMOV2R13PIB },
    { FR30BF_INSN_DMOV2R15PD, && case_sem_INSN_DMOV2R15PD },
    { FR30BF_INSN_LDRES, && case_sem_INSN_LDRES },
    { FR30BF_INSN_STRES, && case_sem_INSN_STRES },
    { FR30BF_INSN_COPOP, && case_sem_INSN_COPOP },
    { FR30BF_INSN_COPLD, && case_sem_INSN_COPLD },
    { FR30BF_INSN_COPST, && case_sem_INSN_COPST },
    { FR30BF_INSN_COPSV, && case_sem_INSN_COPSV },
    { FR30BF_INSN_NOP, && case_sem_INSN_NOP },
    { FR30BF_INSN_ANDCCR, && case_sem_INSN_ANDCCR },
    { FR30BF_INSN_ORCCR, && case_sem_INSN_ORCCR },
    { FR30BF_INSN_STILM, && case_sem_INSN_STILM },
    { FR30BF_INSN_ADDSP, && case_sem_INSN_ADDSP },
    { FR30BF_INSN_EXTSB, && case_sem_INSN_EXTSB },
    { FR30BF_INSN_EXTUB, && case_sem_INSN_EXTUB },
    { FR30BF_INSN_EXTSH, && case_sem_INSN_EXTSH },
    { FR30BF_INSN_EXTUH, && case_sem_INSN_EXTUH },
    { FR30BF_INSN_LDM0, && case_sem_INSN_LDM0 },
    { FR30BF_INSN_LDM1, && case_sem_INSN_LDM1 },
    { FR30BF_INSN_STM0, && case_sem_INSN_STM0 },
    { FR30BF_INSN_STM1, && case_sem_INSN_STM1 },
    { FR30BF_INSN_ENTER, && case_sem_INSN_ENTER },
    { FR30BF_INSN_LEAVE, && case_sem_INSN_LEAVE },
    { FR30BF_INSN_XCHB, && case_sem_INSN_XCHB },
    { 0, 0 }
  };
  int i;

  for (i = 0; labels[i].label != 0; ++i)
    {
#if FAST_P
      CPU_IDESC (current_cpu) [labels[i].index].sem_fast_lab = labels[i].label;
#else
      CPU_IDESC (current_cpu) [labels[i].index].sem_full_lab = labels[i].label;
#endif
    }

#undef DEFINE_LABELS
#endif /* DEFINE_LABELS */

#ifdef DEFINE_SWITCH

/* If hyper-fast [well not unnecessarily slow] execution is selected, turn
   off frills like tracing and profiling.  */
/* FIXME: A better way would be to have TRACE_RESULT check for something
   that can cause it to be optimized out.  Another way would be to emit
   special handlers into the instruction "stream".  */

#if FAST_P
#undef TRACE_RESULT
#define TRACE_RESULT(cpu, abuf, name, type, val)
#endif

#undef GET_ATTR
#if defined (__STDC__) || defined (ALMOST_STDC) || defined (HAVE_STRINGIZE)
#define GET_ATTR(cpu, num, attr) CGEN_ATTR_VALUE (NULL, abuf->idesc->attrs, CGEN_INSN_##attr)
#else
#define GET_ATTR(cpu, num, attr) CGEN_ATTR_VALUE (NULL, abuf->idesc->attrs, CGEN_INSN_/**/attr)
#endif

{

#if WITH_SCACHE_PBB

/* Branch to next handler without going around main loop.  */
#define NEXT(vpc) goto * SEM_ARGBUF (vpc) -> semantic.sem_case
SWITCH (sem, SEM_ARGBUF (vpc) -> semantic.sem_case)

#else /* ! WITH_SCACHE_PBB */

#define NEXT(vpc) BREAK (sem)
#ifdef __GNUC__
#if FAST_P
  SWITCH (sem, SEM_ARGBUF (sc) -> idesc->sem_fast_lab)
#else
  SWITCH (sem, SEM_ARGBUF (sc) -> idesc->sem_full_lab)
#endif
#else
  SWITCH (sem, SEM_ARGBUF (sc) -> idesc->num)
#endif

#endif /* ! WITH_SCACHE_PBB */

    {

  CASE (sem, INSN_X_INVALID) : /* --invalid-- */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.fmt_empty.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 0);

  {
    /* Update the recorded pc in the cpu state struct.
       Only necessary for WITH_SCACHE case, but to avoid the
       conditional compilation ....  */
    SET_H_PC (pc);
    /* Virtual insns have zero size.  Overwrite vpc with address of next insn
       using the default-insn-bitsize spec.  When executing insns in parallel
       we may want to queue the fault and continue execution.  */
    vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
    vpc = sim_engine_invalid_insn (current_cpu, pc, vpc);
  }

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_X_AFTER) : /* --after-- */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.fmt_empty.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 0);

  {
#if WITH_SCACHE_PBB_FR30BF
    fr30bf_pbb_after (current_cpu, sem_arg);
#endif
  }

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_X_BEFORE) : /* --before-- */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.fmt_empty.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 0);

  {
#if WITH_SCACHE_PBB_FR30BF
    fr30bf_pbb_before (current_cpu, sem_arg);
#endif
  }

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_X_CTI_CHAIN) : /* --cti-chain-- */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.fmt_empty.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 0);

  {
#if WITH_SCACHE_PBB_FR30BF
#ifdef DEFINE_SWITCH
    vpc = fr30bf_pbb_cti_chain (current_cpu, sem_arg,
			       pbb_br_type, pbb_br_npc);
    BREAK (sem);
#else
    /* FIXME: Allow provision of explicit ifmt spec in insn spec.  */
    vpc = fr30bf_pbb_cti_chain (current_cpu, sem_arg,
			       CPU_PBB_BR_TYPE (current_cpu),
			       CPU_PBB_BR_NPC (current_cpu));
#endif
#endif
  }

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_X_CHAIN) : /* --chain-- */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.fmt_empty.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 0);

  {
#if WITH_SCACHE_PBB_FR30BF
    vpc = fr30bf_pbb_chain (current_cpu, sem_arg);
#ifdef DEFINE_SWITCH
    BREAK (sem);
#endif
#endif
  }

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_X_BEGIN) : /* --begin-- */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.fmt_empty.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 0);

  {
#if WITH_SCACHE_PBB_FR30BF
#if defined DEFINE_SWITCH || defined FAST_P
    /* In the switch case FAST_P is a constant, allowing several optimizations
       in any called inline functions.  */
    vpc = fr30bf_pbb_begin (current_cpu, FAST_P);
#else
#if 0 /* cgen engine can't handle dynamic fast/full switching yet.  */
    vpc = fr30bf_pbb_begin (current_cpu, STATE_RUN_FAST_P (CPU_STATE (current_cpu)));
#else
    vpc = fr30bf_pbb_begin (current_cpu, 0);
#endif
#endif
#endif
  }

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_ADD) : /* add $Rj,$Ri */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_add.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  {
    BI opval = ADDOFSI (* FLD (i_Ri), * FLD (i_Rj), 0);
    CPU (h_vbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "vbit", 'x', opval);
  }
  {
    BI opval = ADDCFSI (* FLD (i_Ri), * FLD (i_Rj), 0);
    CPU (h_cbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
  }
  {
    SI opval = ADDSI (* FLD (i_Ri), * FLD (i_Rj));
    * FLD (i_Ri) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
{
  {
    BI opval = EQSI (* FLD (i_Ri), 0);
    CPU (h_zbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
  }
  {
    BI opval = LTSI (* FLD (i_Ri), 0);
    CPU (h_nbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
  }
}
}

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_ADDI) : /* add $u4,$Ri */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_addi.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  {
    BI opval = ADDOFSI (* FLD (i_Ri), FLD (f_u4), 0);
    CPU (h_vbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "vbit", 'x', opval);
  }
  {
    BI opval = ADDCFSI (* FLD (i_Ri), FLD (f_u4), 0);
    CPU (h_cbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
  }
  {
    SI opval = ADDSI (* FLD (i_Ri), FLD (f_u4));
    * FLD (i_Ri) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
{
  {
    BI opval = EQSI (* FLD (i_Ri), 0);
    CPU (h_zbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
  }
  {
    BI opval = LTSI (* FLD (i_Ri), 0);
    CPU (h_nbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
  }
}
}

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_ADD2) : /* add2 $m4,$Ri */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_add2.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  {
    BI opval = ADDOFSI (* FLD (i_Ri), FLD (f_m4), 0);
    CPU (h_vbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "vbit", 'x', opval);
  }
  {
    BI opval = ADDCFSI (* FLD (i_Ri), FLD (f_m4), 0);
    CPU (h_cbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
  }
  {
    SI opval = ADDSI (* FLD (i_Ri), FLD (f_m4));
    * FLD (i_Ri) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
{
  {
    BI opval = EQSI (* FLD (i_Ri), 0);
    CPU (h_zbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
  }
  {
    BI opval = LTSI (* FLD (i_Ri), 0);
    CPU (h_nbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
  }
}
}

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_ADDC) : /* addc $Rj,$Ri */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_add.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  SI tmp_tmp;
  tmp_tmp = ADDCSI (* FLD (i_Ri), * FLD (i_Rj), CPU (h_cbit));
  {
    BI opval = ADDOFSI (* FLD (i_Ri), * FLD (i_Rj), CPU (h_cbit));
    CPU (h_vbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "vbit", 'x', opval);
  }
  {
    BI opval = ADDCFSI (* FLD (i_Ri), * FLD (i_Rj), CPU (h_cbit));
    CPU (h_cbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
  }
  {
    SI opval = tmp_tmp;
    * FLD (i_Ri) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
{
  {
    BI opval = EQSI (* FLD (i_Ri), 0);
    CPU (h_zbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
  }
  {
    BI opval = LTSI (* FLD (i_Ri), 0);
    CPU (h_nbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
  }
}
}

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_ADDN) : /* addn $Rj,$Ri */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_add.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    SI opval = ADDSI (* FLD (i_Ri), * FLD (i_Rj));
    * FLD (i_Ri) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_ADDNI) : /* addn $u4,$Ri */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_addi.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    SI opval = ADDSI (* FLD (i_Ri), FLD (f_u4));
    * FLD (i_Ri) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_ADDN2) : /* addn2 $m4,$Ri */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_add2.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    SI opval = ADDSI (* FLD (i_Ri), FLD (f_m4));
    * FLD (i_Ri) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_SUB) : /* sub $Rj,$Ri */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_add.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  {
    BI opval = SUBOFSI (* FLD (i_Ri), * FLD (i_Rj), 0);
    CPU (h_vbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "vbit", 'x', opval);
  }
  {
    BI opval = SUBCFSI (* FLD (i_Ri), * FLD (i_Rj), 0);
    CPU (h_cbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
  }
  {
    SI opval = SUBSI (* FLD (i_Ri), * FLD (i_Rj));
    * FLD (i_Ri) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
{
  {
    BI opval = EQSI (* FLD (i_Ri), 0);
    CPU (h_zbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
  }
  {
    BI opval = LTSI (* FLD (i_Ri), 0);
    CPU (h_nbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
  }
}
}

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_SUBC) : /* subc $Rj,$Ri */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_add.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  SI tmp_tmp;
  tmp_tmp = SUBCSI (* FLD (i_Ri), * FLD (i_Rj), CPU (h_cbit));
  {
    BI opval = SUBOFSI (* FLD (i_Ri), * FLD (i_Rj), CPU (h_cbit));
    CPU (h_vbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "vbit", 'x', opval);
  }
  {
    BI opval = SUBCFSI (* FLD (i_Ri), * FLD (i_Rj), CPU (h_cbit));
    CPU (h_cbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
  }
  {
    SI opval = tmp_tmp;
    * FLD (i_Ri) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
{
  {
    BI opval = EQSI (* FLD (i_Ri), 0);
    CPU (h_zbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
  }
  {
    BI opval = LTSI (* FLD (i_Ri), 0);
    CPU (h_nbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
  }
}
}

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_SUBN) : /* subn $Rj,$Ri */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_add.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    SI opval = SUBSI (* FLD (i_Ri), * FLD (i_Rj));
    * FLD (i_Ri) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_CMP) : /* cmp $Rj,$Ri */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_str13.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  SI tmp_tmp1;
  {
    BI opval = SUBOFSI (* FLD (i_Ri), * FLD (i_Rj), 0);
    CPU (h_vbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "vbit", 'x', opval);
  }
  {
    BI opval = SUBCFSI (* FLD (i_Ri), * FLD (i_Rj), 0);
    CPU (h_cbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
  }
  tmp_tmp1 = SUBSI (* FLD (i_Ri), * FLD (i_Rj));
{
  {
    BI opval = EQSI (tmp_tmp1, 0);
    CPU (h_zbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
  }
  {
    BI opval = LTSI (tmp_tmp1, 0);
    CPU (h_nbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
  }
}
}

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_CMPI) : /* cmp $u4,$Ri */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_addi.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  SI tmp_tmp1;
  {
    BI opval = SUBOFSI (* FLD (i_Ri), FLD (f_u4), 0);
    CPU (h_vbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "vbit", 'x', opval);
  }
  {
    BI opval = SUBCFSI (* FLD (i_Ri), FLD (f_u4), 0);
    CPU (h_cbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
  }
  tmp_tmp1 = SUBSI (* FLD (i_Ri), FLD (f_u4));
{
  {
    BI opval = EQSI (tmp_tmp1, 0);
    CPU (h_zbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
  }
  {
    BI opval = LTSI (tmp_tmp1, 0);
    CPU (h_nbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
  }
}
}

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_CMP2) : /* cmp2 $m4,$Ri */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_add2.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  SI tmp_tmp1;
  {
    BI opval = SUBOFSI (* FLD (i_Ri), FLD (f_m4), 0);
    CPU (h_vbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "vbit", 'x', opval);
  }
  {
    BI opval = SUBCFSI (* FLD (i_Ri), FLD (f_m4), 0);
    CPU (h_cbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
  }
  tmp_tmp1 = SUBSI (* FLD (i_Ri), FLD (f_m4));
{
  {
    BI opval = EQSI (tmp_tmp1, 0);
    CPU (h_zbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
  }
  {
    BI opval = LTSI (tmp_tmp1, 0);
    CPU (h_nbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
  }
}
}

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_AND) : /* and $Rj,$Ri */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_add.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  {
    SI opval = ANDSI (* FLD (i_Ri), * FLD (i_Rj));
    * FLD (i_Ri) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
{
  {
    BI opval = EQSI (* FLD (i_Ri), 0);
    CPU (h_zbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
  }
  {
    BI opval = LTSI (* FLD (i_Ri), 0);
    CPU (h_nbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
  }
}
}

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_OR) : /* or $Rj,$Ri */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_add.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  {
    SI opval = ORSI (* FLD (i_Ri), * FLD (i_Rj));
    * FLD (i_Ri) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
{
  {
    BI opval = EQSI (* FLD (i_Ri), 0);
    CPU (h_zbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
  }
  {
    BI opval = LTSI (* FLD (i_Ri), 0);
    CPU (h_nbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
  }
}
}

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_EOR) : /* eor $Rj,$Ri */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_add.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  {
    SI opval = XORSI (* FLD (i_Ri), * FLD (i_Rj));
    * FLD (i_Ri) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
{
  {
    BI opval = EQSI (* FLD (i_Ri), 0);
    CPU (h_zbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
  }
  {
    BI opval = LTSI (* FLD (i_Ri), 0);
    CPU (h_nbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
  }
}
}

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_ANDM) : /* and $Rj,@@$Ri */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_str13.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  SI tmp_tmp;
  tmp_tmp = ANDSI (GETMEMSI (current_cpu, pc, * FLD (i_Ri)), * FLD (i_Rj));
{
  {
    BI opval = EQSI (tmp_tmp, 0);
    CPU (h_zbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
  }
  {
    BI opval = LTSI (tmp_tmp, 0);
    CPU (h_nbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
  }
}
  {
    SI opval = tmp_tmp;
    SETMEMSI (current_cpu, pc, * FLD (i_Ri), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
}

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_ANDH) : /* andh $Rj,@@$Ri */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_str13.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  HI tmp_tmp;
  tmp_tmp = ANDHI (GETMEMHI (current_cpu, pc, * FLD (i_Ri)), * FLD (i_Rj));
{
  {
    BI opval = EQHI (tmp_tmp, 0);
    CPU (h_zbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
  }
  {
    BI opval = LTHI (tmp_tmp, 0);
    CPU (h_nbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
  }
}
  {
    HI opval = tmp_tmp;
    SETMEMHI (current_cpu, pc, * FLD (i_Ri), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
}

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_ANDB) : /* andb $Rj,@@$Ri */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_str13.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  QI tmp_tmp;
  tmp_tmp = ANDQI (GETMEMQI (current_cpu, pc, * FLD (i_Ri)), * FLD (i_Rj));
{
  {
    BI opval = EQQI (tmp_tmp, 0);
    CPU (h_zbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
  }
  {
    BI opval = LTQI (tmp_tmp, 0);
    CPU (h_nbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
  }
}
  {
    QI opval = tmp_tmp;
    SETMEMQI (current_cpu, pc, * FLD (i_Ri), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
}

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_ORM) : /* or $Rj,@@$Ri */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_str13.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  SI tmp_tmp;
  tmp_tmp = ORSI (GETMEMSI (current_cpu, pc, * FLD (i_Ri)), * FLD (i_Rj));
{
  {
    BI opval = EQSI (tmp_tmp, 0);
    CPU (h_zbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
  }
  {
    BI opval = LTSI (tmp_tmp, 0);
    CPU (h_nbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
  }
}
  {
    SI opval = tmp_tmp;
    SETMEMSI (current_cpu, pc, * FLD (i_Ri), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
}

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_ORH) : /* orh $Rj,@@$Ri */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_str13.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  HI tmp_tmp;
  tmp_tmp = ORHI (GETMEMHI (current_cpu, pc, * FLD (i_Ri)), * FLD (i_Rj));
{
  {
    BI opval = EQHI (tmp_tmp, 0);
    CPU (h_zbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
  }
  {
    BI opval = LTHI (tmp_tmp, 0);
    CPU (h_nbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
  }
}
  {
    HI opval = tmp_tmp;
    SETMEMHI (current_cpu, pc, * FLD (i_Ri), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
}

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_ORB) : /* orb $Rj,@@$Ri */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_str13.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  QI tmp_tmp;
  tmp_tmp = ORQI (GETMEMQI (current_cpu, pc, * FLD (i_Ri)), * FLD (i_Rj));
{
  {
    BI opval = EQQI (tmp_tmp, 0);
    CPU (h_zbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
  }
  {
    BI opval = LTQI (tmp_tmp, 0);
    CPU (h_nbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
  }
}
  {
    QI opval = tmp_tmp;
    SETMEMQI (current_cpu, pc, * FLD (i_Ri), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
}

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_EORM) : /* eor $Rj,@@$Ri */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_str13.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  SI tmp_tmp;
  tmp_tmp = XORSI (GETMEMSI (current_cpu, pc, * FLD (i_Ri)), * FLD (i_Rj));
{
  {
    BI opval = EQSI (tmp_tmp, 0);
    CPU (h_zbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
  }
  {
    BI opval = LTSI (tmp_tmp, 0);
    CPU (h_nbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
  }
}
  {
    SI opval = tmp_tmp;
    SETMEMSI (current_cpu, pc, * FLD (i_Ri), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
}

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_EORH) : /* eorh $Rj,@@$Ri */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_str13.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  HI tmp_tmp;
  tmp_tmp = XORHI (GETMEMHI (current_cpu, pc, * FLD (i_Ri)), * FLD (i_Rj));
{
  {
    BI opval = EQHI (tmp_tmp, 0);
    CPU (h_zbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
  }
  {
    BI opval = LTHI (tmp_tmp, 0);
    CPU (h_nbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
  }
}
  {
    HI opval = tmp_tmp;
    SETMEMHI (current_cpu, pc, * FLD (i_Ri), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
}

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_EORB) : /* eorb $Rj,@@$Ri */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_str13.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  QI tmp_tmp;
  tmp_tmp = XORQI (GETMEMQI (current_cpu, pc, * FLD (i_Ri)), * FLD (i_Rj));
{
  {
    BI opval = EQQI (tmp_tmp, 0);
    CPU (h_zbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
  }
  {
    BI opval = LTQI (tmp_tmp, 0);
    CPU (h_nbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
  }
}
  {
    QI opval = tmp_tmp;
    SETMEMQI (current_cpu, pc, * FLD (i_Ri), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
}

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_BANDL) : /* bandl $u4,@@$Ri */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_addi.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    QI opval = ANDQI (ORQI (FLD (f_u4), 240), GETMEMQI (current_cpu, pc, * FLD (i_Ri)));
    SETMEMQI (current_cpu, pc, * FLD (i_Ri), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_BORL) : /* borl $u4,@@$Ri */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_addi.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    QI opval = ORQI (FLD (f_u4), GETMEMQI (current_cpu, pc, * FLD (i_Ri)));
    SETMEMQI (current_cpu, pc, * FLD (i_Ri), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_BEORL) : /* beorl $u4,@@$Ri */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_addi.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    QI opval = XORQI (FLD (f_u4), GETMEMQI (current_cpu, pc, * FLD (i_Ri)));
    SETMEMQI (current_cpu, pc, * FLD (i_Ri), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_BANDH) : /* bandh $u4,@@$Ri */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_addi.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    QI opval = ANDQI (ORQI (SLLQI (FLD (f_u4), 4), 15), GETMEMQI (current_cpu, pc, * FLD (i_Ri)));
    SETMEMQI (current_cpu, pc, * FLD (i_Ri), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_BORH) : /* borh $u4,@@$Ri */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_addi.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    QI opval = ORQI (SLLQI (FLD (f_u4), 4), GETMEMQI (current_cpu, pc, * FLD (i_Ri)));
    SETMEMQI (current_cpu, pc, * FLD (i_Ri), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_BEORH) : /* beorh $u4,@@$Ri */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_addi.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    QI opval = XORQI (SLLQI (FLD (f_u4), 4), GETMEMQI (current_cpu, pc, * FLD (i_Ri)));
    SETMEMQI (current_cpu, pc, * FLD (i_Ri), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_BTSTL) : /* btstl $u4,@@$Ri */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_addi.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  QI tmp_tmp;
  tmp_tmp = ANDQI (FLD (f_u4), GETMEMQI (current_cpu, pc, * FLD (i_Ri)));
  {
    BI opval = EQQI (tmp_tmp, 0);
    CPU (h_zbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
  }
  {
    BI opval = 0;
    CPU (h_nbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
  }
}

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_BTSTH) : /* btsth $u4,@@$Ri */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_addi.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  QI tmp_tmp;
  tmp_tmp = ANDQI (SLLQI (FLD (f_u4), 4), GETMEMQI (current_cpu, pc, * FLD (i_Ri)));
  {
    BI opval = EQQI (tmp_tmp, 0);
    CPU (h_zbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
  }
  {
    BI opval = LTQI (tmp_tmp, 0);
    CPU (h_nbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
  }
}

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_MUL) : /* mul $Rj,$Ri */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_str13.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  DI tmp_tmp;
  tmp_tmp = MULDI (EXTSIDI (* FLD (i_Rj)), EXTSIDI (* FLD (i_Ri)));
  {
    SI opval = TRUNCDISI (tmp_tmp);
    SET_H_DR (((UINT) 5), opval);
    TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
  }
  {
    SI opval = TRUNCDISI (SRLDI (tmp_tmp, 32));
    SET_H_DR (((UINT) 4), opval);
    TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
  }
  {
    BI opval = LTSI (GET_H_DR (((UINT) 5)), 0);
    CPU (h_nbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
  }
  {
    BI opval = EQDI (tmp_tmp, MAKEDI (0, 0));
    CPU (h_zbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
  }
  {
    BI opval = ORIF (GTDI (tmp_tmp, MAKEDI (0, 2147483647)), LTDI (tmp_tmp, NEGDI (MAKEDI (0, 0x80000000))));
    CPU (h_vbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "vbit", 'x', opval);
  }
}

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_MULU) : /* mulu $Rj,$Ri */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_str13.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  DI tmp_tmp;
  tmp_tmp = MULDI (ZEXTSIDI (* FLD (i_Rj)), ZEXTSIDI (* FLD (i_Ri)));
  {
    SI opval = TRUNCDISI (tmp_tmp);
    SET_H_DR (((UINT) 5), opval);
    TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
  }
  {
    SI opval = TRUNCDISI (SRLDI (tmp_tmp, 32));
    SET_H_DR (((UINT) 4), opval);
    TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
  }
  {
    BI opval = LTSI (GET_H_DR (((UINT) 4)), 0);
    CPU (h_nbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
  }
  {
    BI opval = EQSI (GET_H_DR (((UINT) 5)), 0);
    CPU (h_zbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
  }
  {
    BI opval = NESI (GET_H_DR (((UINT) 4)), 0);
    CPU (h_vbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "vbit", 'x', opval);
  }
}

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_MULH) : /* mulh $Rj,$Ri */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_str13.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  {
    SI opval = MULHI (TRUNCSIHI (* FLD (i_Rj)), TRUNCSIHI (* FLD (i_Ri)));
    SET_H_DR (((UINT) 5), opval);
    TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
  }
  {
    BI opval = LTSI (GET_H_DR (((UINT) 5)), 0);
    CPU (h_nbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
  }
  {
    BI opval = GESI (GET_H_DR (((UINT) 5)), 0);
    CPU (h_zbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
  }
}

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_MULUH) : /* muluh $Rj,$Ri */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_str13.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  {
    SI opval = MULSI (ANDSI (* FLD (i_Rj), 65535), ANDSI (* FLD (i_Ri), 65535));
    SET_H_DR (((UINT) 5), opval);
    TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
  }
  {
    BI opval = LTSI (GET_H_DR (((UINT) 5)), 0);
    CPU (h_nbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
  }
  {
    BI opval = GESI (GET_H_DR (((UINT) 5)), 0);
    CPU (h_zbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
  }
}

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_DIV0S) : /* div0s $Ri */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_mov2dr.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  {
    BI opval = LTSI (GET_H_DR (((UINT) 5)), 0);
    CPU (h_d0bit) = opval;
    TRACE_RESULT (current_cpu, abuf, "d0bit", 'x', opval);
  }
  {
    BI opval = XORBI (CPU (h_d0bit), LTSI (* FLD (i_Ri), 0));
    CPU (h_d1bit) = opval;
    TRACE_RESULT (current_cpu, abuf, "d1bit", 'x', opval);
  }
if (NEBI (CPU (h_d0bit), 0)) {
  {
    SI opval = 0xffffffff;
    SET_H_DR (((UINT) 4), opval);
    written |= (1 << 5);
    TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
  }
} else {
  {
    SI opval = 0;
    SET_H_DR (((UINT) 4), opval);
    written |= (1 << 5);
    TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
  }
}
}

  abuf->written = written;
#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_DIV0U) : /* div0u $Ri */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.fmt_empty.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  {
    BI opval = 0;
    CPU (h_d0bit) = opval;
    TRACE_RESULT (current_cpu, abuf, "d0bit", 'x', opval);
  }
  {
    BI opval = 0;
    CPU (h_d1bit) = opval;
    TRACE_RESULT (current_cpu, abuf, "d1bit", 'x', opval);
  }
  {
    SI opval = 0;
    SET_H_DR (((UINT) 4), opval);
    TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
  }
}

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_DIV1) : /* div1 $Ri */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_mov2dr.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  SI tmp_tmp;
  {
    SI opval = SLLSI (GET_H_DR (((UINT) 4)), 1);
    SET_H_DR (((UINT) 4), opval);
    TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
  }
if (LTSI (GET_H_DR (((UINT) 5)), 0)) {
  {
    SI opval = ADDSI (GET_H_DR (((UINT) 4)), 1);
    SET_H_DR (((UINT) 4), opval);
    TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
  }
}
  {
    SI opval = SLLSI (GET_H_DR (((UINT) 5)), 1);
    SET_H_DR (((UINT) 5), opval);
    TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
  }
if (EQBI (CPU (h_d1bit), 1)) {
{
  tmp_tmp = ADDSI (GET_H_DR (((UINT) 4)), * FLD (i_Ri));
  {
    BI opval = ADDCFSI (GET_H_DR (((UINT) 4)), * FLD (i_Ri), 0);
    CPU (h_cbit) = opval;
    written |= (1 << 6);
    TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
  }
}
} else {
{
  tmp_tmp = SUBSI (GET_H_DR (((UINT) 4)), * FLD (i_Ri));
  {
    BI opval = SUBCFSI (GET_H_DR (((UINT) 4)), * FLD (i_Ri), 0);
    CPU (h_cbit) = opval;
    written |= (1 << 6);
    TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
  }
}
}
if (NOTBI (XORBI (XORBI (CPU (h_d0bit), CPU (h_d1bit)), CPU (h_cbit)))) {
{
  {
    SI opval = tmp_tmp;
    SET_H_DR (((UINT) 4), opval);
    TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
  }
  {
    SI opval = ORSI (GET_H_DR (((UINT) 5)), 1);
    SET_H_DR (((UINT) 5), opval);
    TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
  }
}
}
  {
    BI opval = EQSI (GET_H_DR (((UINT) 4)), 0);
    CPU (h_zbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
  }
}

  abuf->written = written;
#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_DIV2) : /* div2 $Ri */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_mov2dr.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  SI tmp_tmp;
if (EQBI (CPU (h_d1bit), 1)) {
{
  tmp_tmp = ADDSI (GET_H_DR (((UINT) 4)), * FLD (i_Ri));
  {
    BI opval = ADDCFSI (GET_H_DR (((UINT) 4)), * FLD (i_Ri), 0);
    CPU (h_cbit) = opval;
    written |= (1 << 3);
    TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
  }
}
} else {
{
  tmp_tmp = SUBSI (GET_H_DR (((UINT) 4)), * FLD (i_Ri));
  {
    BI opval = SUBCFSI (GET_H_DR (((UINT) 4)), * FLD (i_Ri), 0);
    CPU (h_cbit) = opval;
    written |= (1 << 3);
    TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
  }
}
}
if (EQSI (tmp_tmp, 0)) {
{
  {
    BI opval = 1;
    CPU (h_zbit) = opval;
    written |= (1 << 5);
    TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
  }
  {
    SI opval = 0;
    SET_H_DR (((UINT) 4), opval);
    written |= (1 << 4);
    TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
  }
}
} else {
  {
    BI opval = 0;
    CPU (h_zbit) = opval;
    written |= (1 << 5);
    TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
  }
}
}

  abuf->written = written;
#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_DIV3) : /* div3 */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.fmt_empty.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

if (EQBI (CPU (h_zbit), 1)) {
  {
    SI opval = ADDSI (GET_H_DR (((UINT) 5)), 1);
    SET_H_DR (((UINT) 5), opval);
    written |= (1 << 2);
    TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
  }
}

  abuf->written = written;
#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_DIV4S) : /* div4s */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.fmt_empty.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

if (EQBI (CPU (h_d1bit), 1)) {
  {
    SI opval = NEGSI (GET_H_DR (((UINT) 5)));
    SET_H_DR (((UINT) 5), opval);
    written |= (1 << 2);
    TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
  }
}

  abuf->written = written;
#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_LSL) : /* lsl $Rj,$Ri */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_add.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  SI tmp_shift;
  tmp_shift = ANDSI (* FLD (i_Rj), 31);
if (NESI (tmp_shift, 0)) {
{
  {
    BI opval = NESI (ANDSI (* FLD (i_Ri), SLLSI (1, SUBSI (32, tmp_shift))), 0);
    CPU (h_cbit) = opval;
    written |= (1 << 3);
    TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
  }
  {
    SI opval = SLLSI (* FLD (i_Ri), tmp_shift);
    * FLD (i_Ri) = opval;
    written |= (1 << 2);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
}
} else {
  {
    BI opval = 0;
    CPU (h_cbit) = opval;
    written |= (1 << 3);
    TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
  }
}
  {
    BI opval = LTSI (* FLD (i_Ri), 0);
    CPU (h_nbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
  }
  {
    BI opval = EQSI (* FLD (i_Ri), 0);
    CPU (h_zbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
  }
}

  abuf->written = written;
#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_LSLI) : /* lsl $u4,$Ri */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_addi.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  SI tmp_shift;
  tmp_shift = FLD (f_u4);
if (NESI (tmp_shift, 0)) {
{
  {
    BI opval = NESI (ANDSI (* FLD (i_Ri), SLLSI (1, SUBSI (32, tmp_shift))), 0);
    CPU (h_cbit) = opval;
    written |= (1 << 3);
    TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
  }
  {
    SI opval = SLLSI (* FLD (i_Ri), tmp_shift);
    * FLD (i_Ri) = opval;
    written |= (1 << 2);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
}
} else {
  {
    BI opval = 0;
    CPU (h_cbit) = opval;
    written |= (1 << 3);
    TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
  }
}
  {
    BI opval = LTSI (* FLD (i_Ri), 0);
    CPU (h_nbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
  }
  {
    BI opval = EQSI (* FLD (i_Ri), 0);
    CPU (h_zbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
  }
}

  abuf->written = written;
#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_LSL2) : /* lsl2 $u4,$Ri */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_addi.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  SI tmp_shift;
  tmp_shift = ADDSI (FLD (f_u4), 16);
if (NESI (tmp_shift, 0)) {
{
  {
    BI opval = NESI (ANDSI (* FLD (i_Ri), SLLSI (1, SUBSI (32, tmp_shift))), 0);
    CPU (h_cbit) = opval;
    written |= (1 << 3);
    TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
  }
  {
    SI opval = SLLSI (* FLD (i_Ri), tmp_shift);
    * FLD (i_Ri) = opval;
    written |= (1 << 2);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
}
} else {
  {
    BI opval = 0;
    CPU (h_cbit) = opval;
    written |= (1 << 3);
    TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
  }
}
  {
    BI opval = LTSI (* FLD (i_Ri), 0);
    CPU (h_nbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
  }
  {
    BI opval = EQSI (* FLD (i_Ri), 0);
    CPU (h_zbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
  }
}

  abuf->written = written;
#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_LSR) : /* lsr $Rj,$Ri */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_add.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  SI tmp_shift;
  tmp_shift = ANDSI (* FLD (i_Rj), 31);
if (NESI (tmp_shift, 0)) {
{
  {
    BI opval = NESI (ANDSI (* FLD (i_Ri), SLLSI (1, SUBSI (tmp_shift, 1))), 0);
    CPU (h_cbit) = opval;
    written |= (1 << 3);
    TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
  }
  {
    SI opval = SRLSI (* FLD (i_Ri), tmp_shift);
    * FLD (i_Ri) = opval;
    written |= (1 << 2);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
}
} else {
  {
    BI opval = 0;
    CPU (h_cbit) = opval;
    written |= (1 << 3);
    TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
  }
}
  {
    BI opval = LTSI (* FLD (i_Ri), 0);
    CPU (h_nbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
  }
  {
    BI opval = EQSI (* FLD (i_Ri), 0);
    CPU (h_zbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
  }
}

  abuf->written = written;
#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_LSRI) : /* lsr $u4,$Ri */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_addi.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  SI tmp_shift;
  tmp_shift = FLD (f_u4);
if (NESI (tmp_shift, 0)) {
{
  {
    BI opval = NESI (ANDSI (* FLD (i_Ri), SLLSI (1, SUBSI (tmp_shift, 1))), 0);
    CPU (h_cbit) = opval;
    written |= (1 << 3);
    TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
  }
  {
    SI opval = SRLSI (* FLD (i_Ri), tmp_shift);
    * FLD (i_Ri) = opval;
    written |= (1 << 2);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
}
} else {
  {
    BI opval = 0;
    CPU (h_cbit) = opval;
    written |= (1 << 3);
    TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
  }
}
  {
    BI opval = LTSI (* FLD (i_Ri), 0);
    CPU (h_nbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
  }
  {
    BI opval = EQSI (* FLD (i_Ri), 0);
    CPU (h_zbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
  }
}

  abuf->written = written;
#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_LSR2) : /* lsr2 $u4,$Ri */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_addi.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  SI tmp_shift;
  tmp_shift = ADDSI (FLD (f_u4), 16);
if (NESI (tmp_shift, 0)) {
{
  {
    BI opval = NESI (ANDSI (* FLD (i_Ri), SLLSI (1, SUBSI (tmp_shift, 1))), 0);
    CPU (h_cbit) = opval;
    written |= (1 << 3);
    TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
  }
  {
    SI opval = SRLSI (* FLD (i_Ri), tmp_shift);
    * FLD (i_Ri) = opval;
    written |= (1 << 2);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
}
} else {
  {
    BI opval = 0;
    CPU (h_cbit) = opval;
    written |= (1 << 3);
    TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
  }
}
  {
    BI opval = LTSI (* FLD (i_Ri), 0);
    CPU (h_nbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
  }
  {
    BI opval = EQSI (* FLD (i_Ri), 0);
    CPU (h_zbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
  }
}

  abuf->written = written;
#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_ASR) : /* asr $Rj,$Ri */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_add.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  SI tmp_shift;
  tmp_shift = ANDSI (* FLD (i_Rj), 31);
if (NESI (tmp_shift, 0)) {
{
  {
    BI opval = NESI (ANDSI (* FLD (i_Ri), SLLSI (1, SUBSI (tmp_shift, 1))), 0);
    CPU (h_cbit) = opval;
    written |= (1 << 3);
    TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
  }
  {
    SI opval = SRASI (* FLD (i_Ri), tmp_shift);
    * FLD (i_Ri) = opval;
    written |= (1 << 2);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
}
} else {
  {
    BI opval = 0;
    CPU (h_cbit) = opval;
    written |= (1 << 3);
    TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
  }
}
  {
    BI opval = LTSI (* FLD (i_Ri), 0);
    CPU (h_nbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
  }
  {
    BI opval = EQSI (* FLD (i_Ri), 0);
    CPU (h_zbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
  }
}

  abuf->written = written;
#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_ASRI) : /* asr $u4,$Ri */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_addi.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  SI tmp_shift;
  tmp_shift = FLD (f_u4);
if (NESI (tmp_shift, 0)) {
{
  {
    BI opval = NESI (ANDSI (* FLD (i_Ri), SLLSI (1, SUBSI (tmp_shift, 1))), 0);
    CPU (h_cbit) = opval;
    written |= (1 << 3);
    TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
  }
  {
    SI opval = SRASI (* FLD (i_Ri), tmp_shift);
    * FLD (i_Ri) = opval;
    written |= (1 << 2);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
}
} else {
  {
    BI opval = 0;
    CPU (h_cbit) = opval;
    written |= (1 << 3);
    TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
  }
}
  {
    BI opval = LTSI (* FLD (i_Ri), 0);
    CPU (h_nbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
  }
  {
    BI opval = EQSI (* FLD (i_Ri), 0);
    CPU (h_zbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
  }
}

  abuf->written = written;
#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_ASR2) : /* asr2 $u4,$Ri */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_addi.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  SI tmp_shift;
  tmp_shift = ADDSI (FLD (f_u4), 16);
if (NESI (tmp_shift, 0)) {
{
  {
    BI opval = NESI (ANDSI (* FLD (i_Ri), SLLSI (1, SUBSI (tmp_shift, 1))), 0);
    CPU (h_cbit) = opval;
    written |= (1 << 3);
    TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
  }
  {
    SI opval = SRASI (* FLD (i_Ri), tmp_shift);
    * FLD (i_Ri) = opval;
    written |= (1 << 2);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
}
} else {
  {
    BI opval = 0;
    CPU (h_cbit) = opval;
    written |= (1 << 3);
    TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
  }
}
  {
    BI opval = LTSI (* FLD (i_Ri), 0);
    CPU (h_nbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
  }
  {
    BI opval = EQSI (* FLD (i_Ri), 0);
    CPU (h_zbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
  }
}

  abuf->written = written;
#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_LDI8) : /* ldi:8 $i8,$Ri */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_ldi8.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    SI opval = FLD (f_i8);
    * FLD (i_Ri) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_LDI20) : /* ldi:20 $i20,$Ri */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_ldi20.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = FLD (f_i20);
    * FLD (i_Ri) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_LDI32) : /* ldi:32 $i32,$Ri */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_ldi32.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 6);

  {
    SI opval = FLD (f_i32);
    * FLD (i_Ri) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_LD) : /* ld @@$Rj,$Ri */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_ldr13.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    SI opval = GETMEMSI (current_cpu, pc, * FLD (i_Rj));
    * FLD (i_Ri) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_LDUH) : /* lduh @@$Rj,$Ri */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_ldr13.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    SI opval = GETMEMUHI (current_cpu, pc, * FLD (i_Rj));
    * FLD (i_Ri) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_LDUB) : /* ldub @@$Rj,$Ri */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_ldr13.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    SI opval = GETMEMUQI (current_cpu, pc, * FLD (i_Rj));
    * FLD (i_Ri) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_LDR13) : /* ld @@($R13,$Rj),$Ri */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_ldr13.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    SI opval = GETMEMSI (current_cpu, pc, ADDSI (* FLD (i_Rj), CPU (h_gr[((UINT) 13)])));
    * FLD (i_Ri) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_LDR13UH) : /* lduh @@($R13,$Rj),$Ri */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_ldr13.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    SI opval = GETMEMUHI (current_cpu, pc, ADDSI (* FLD (i_Rj), CPU (h_gr[((UINT) 13)])));
    * FLD (i_Ri) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_LDR13UB) : /* ldub @@($R13,$Rj),$Ri */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_ldr13.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    SI opval = GETMEMUQI (current_cpu, pc, ADDSI (* FLD (i_Rj), CPU (h_gr[((UINT) 13)])));
    * FLD (i_Ri) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_LDR14) : /* ld @@($R14,$disp10),$Ri */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_ldr14.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    SI opval = GETMEMSI (current_cpu, pc, ADDSI (FLD (f_disp10), CPU (h_gr[((UINT) 14)])));
    * FLD (i_Ri) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_LDR14UH) : /* lduh @@($R14,$disp9),$Ri */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_ldr14uh.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    SI opval = GETMEMUHI (current_cpu, pc, ADDSI (FLD (f_disp9), CPU (h_gr[((UINT) 14)])));
    * FLD (i_Ri) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_LDR14UB) : /* ldub @@($R14,$disp8),$Ri */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_ldr14ub.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    SI opval = GETMEMUQI (current_cpu, pc, ADDSI (FLD (f_disp8), CPU (h_gr[((UINT) 14)])));
    * FLD (i_Ri) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_LDR15) : /* ld @@($R15,$udisp6),$Ri */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_ldr15.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    SI opval = GETMEMSI (current_cpu, pc, ADDSI (FLD (f_udisp6), CPU (h_gr[((UINT) 15)])));
    * FLD (i_Ri) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_LDR15GR) : /* ld @@$R15+,$Ri */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_ldr15gr.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  {
    SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
    * FLD (i_Ri) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
if (NESI (FLD (f_Ri), 15)) {
  {
    SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
    CPU (h_gr[((UINT) 15)]) = opval;
    written |= (1 << 4);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
}
}

  abuf->written = written;
#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_LDR15DR) : /* ld @@$R15+,$Rs2 */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_ldr15dr.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  SI tmp_tmp;
  tmp_tmp = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
  {
    SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
    CPU (h_gr[((UINT) 15)]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
  {
    SI opval = tmp_tmp;
    SET_H_DR (FLD (f_Rs2), opval);
    TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
  }
}

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_LDR15PS) : /* ld @@$R15+,$ps */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_addsp.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  {
    USI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
    SET_H_PS (opval);
    TRACE_RESULT (current_cpu, abuf, "ps", 'x', opval);
  }
  {
    SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
    CPU (h_gr[((UINT) 15)]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
}

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_ST) : /* st $Ri,@@$Rj */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_str13.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    SI opval = * FLD (i_Ri);
    SETMEMSI (current_cpu, pc, * FLD (i_Rj), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_STH) : /* sth $Ri,@@$Rj */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_str13.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    HI opval = * FLD (i_Ri);
    SETMEMHI (current_cpu, pc, * FLD (i_Rj), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_STB) : /* stb $Ri,@@$Rj */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_str13.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    QI opval = * FLD (i_Ri);
    SETMEMQI (current_cpu, pc, * FLD (i_Rj), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_STR13) : /* st $Ri,@@($R13,$Rj) */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_str13.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    SI opval = * FLD (i_Ri);
    SETMEMSI (current_cpu, pc, ADDSI (* FLD (i_Rj), CPU (h_gr[((UINT) 13)])), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_STR13H) : /* sth $Ri,@@($R13,$Rj) */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_str13.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    HI opval = * FLD (i_Ri);
    SETMEMHI (current_cpu, pc, ADDSI (* FLD (i_Rj), CPU (h_gr[((UINT) 13)])), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_STR13B) : /* stb $Ri,@@($R13,$Rj) */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_str13.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    QI opval = * FLD (i_Ri);
    SETMEMQI (current_cpu, pc, ADDSI (* FLD (i_Rj), CPU (h_gr[((UINT) 13)])), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_STR14) : /* st $Ri,@@($R14,$disp10) */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_str14.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    SI opval = * FLD (i_Ri);
    SETMEMSI (current_cpu, pc, ADDSI (FLD (f_disp10), CPU (h_gr[((UINT) 14)])), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_STR14H) : /* sth $Ri,@@($R14,$disp9) */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_str14h.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    HI opval = * FLD (i_Ri);
    SETMEMHI (current_cpu, pc, ADDSI (FLD (f_disp9), CPU (h_gr[((UINT) 14)])), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_STR14B) : /* stb $Ri,@@($R14,$disp8) */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_str14b.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    QI opval = * FLD (i_Ri);
    SETMEMQI (current_cpu, pc, ADDSI (FLD (f_disp8), CPU (h_gr[((UINT) 14)])), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_STR15) : /* st $Ri,@@($R15,$udisp6) */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_str15.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    SI opval = * FLD (i_Ri);
    SETMEMSI (current_cpu, pc, ADDSI (CPU (h_gr[((UINT) 15)]), FLD (f_udisp6)), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_STR15GR) : /* st $Ri,@@-$R15 */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_str15gr.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  SI tmp_tmp;
  tmp_tmp = * FLD (i_Ri);
  {
    SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
    CPU (h_gr[((UINT) 15)]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
  {
    SI opval = tmp_tmp;
    SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
}

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_STR15DR) : /* st $Rs2,@@-$R15 */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_ldr15dr.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  SI tmp_tmp;
  tmp_tmp = GET_H_DR (FLD (f_Rs2));
  {
    SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
    CPU (h_gr[((UINT) 15)]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
  {
    SI opval = tmp_tmp;
    SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
}

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_STR15PS) : /* st $ps,@@-$R15 */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_addsp.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  {
    SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
    CPU (h_gr[((UINT) 15)]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
  {
    SI opval = GET_H_PS ();
    SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
}

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_MOV) : /* mov $Rj,$Ri */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_ldr13.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    SI opval = * FLD (i_Rj);
    * FLD (i_Ri) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_MOVDR) : /* mov $Rs1,$Ri */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_movdr.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    SI opval = GET_H_DR (FLD (f_Rs1));
    * FLD (i_Ri) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_MOVPS) : /* mov $ps,$Ri */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_movdr.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    SI opval = GET_H_PS ();
    * FLD (i_Ri) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_MOV2DR) : /* mov $Ri,$Rs1 */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_mov2dr.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    SI opval = * FLD (i_Ri);
    SET_H_DR (FLD (f_Rs1), opval);
    TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
  }

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_MOV2PS) : /* mov $Ri,$ps */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_mov2dr.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    USI opval = * FLD (i_Ri);
    SET_H_PS (opval);
    TRACE_RESULT (current_cpu, abuf, "ps", 'x', opval);
  }

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_JMP) : /* jmp @@$Ri */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_mov2dr.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    USI opval = * FLD (i_Ri);
    SEM_BRANCH_VIA_ADDR (current_cpu, sem_arg, opval, vpc);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }

  SEM_BRANCH_FINI (vpc);
#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_JMPD) : /* jmp:d @@$Ri */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_mov2dr.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  {
    USI opval = * FLD (i_Ri);
    SEM_BRANCH_VIA_ADDR (current_cpu, sem_arg, opval, vpc);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}

  SEM_BRANCH_FINI (vpc);
#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_CALLR) : /* call @@$Ri */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_mov2dr.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  {
    SI opval = ADDSI (pc, 2);
    SET_H_DR (((UINT) 1), opval);
    TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
  }
  {
    USI opval = * FLD (i_Ri);
    SEM_BRANCH_VIA_ADDR (current_cpu, sem_arg, opval, vpc);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}

  SEM_BRANCH_FINI (vpc);
#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_CALLRD) : /* call:d @@$Ri */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_mov2dr.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
{
  {
    SI opval = ADDSI (pc, 4);
    SET_H_DR (((UINT) 1), opval);
    TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
  }
  {
    USI opval = * FLD (i_Ri);
    SEM_BRANCH_VIA_ADDR (current_cpu, sem_arg, opval, vpc);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}
}

  SEM_BRANCH_FINI (vpc);
#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_CALL) : /* call $label12 */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_call.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  {
    SI opval = ADDSI (pc, 2);
    SET_H_DR (((UINT) 1), opval);
    TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
  }
  {
    USI opval = FLD (i_label12);
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}

  SEM_BRANCH_FINI (vpc);
#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_CALLD) : /* call:d $label12 */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_call.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
{
  {
    SI opval = ADDSI (pc, 4);
    SET_H_DR (((UINT) 1), opval);
    TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
  }
  {
    USI opval = FLD (i_label12);
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}
}

  SEM_BRANCH_FINI (vpc);
#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_RET) : /* ret */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.fmt_empty.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    USI opval = GET_H_DR (((UINT) 1));
    SEM_BRANCH_VIA_ADDR (current_cpu, sem_arg, opval, vpc);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }

  SEM_BRANCH_FINI (vpc);
#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_RET_D) : /* ret:d */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.fmt_empty.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  {
    USI opval = GET_H_DR (((UINT) 1));
    SEM_BRANCH_VIA_ADDR (current_cpu, sem_arg, opval, vpc);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}

  SEM_BRANCH_FINI (vpc);
#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_INT) : /* int $u8 */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_int.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
; /*clobber*/
; /*clobber*/
; /*clobber*/
  {
    SI opval = fr30_int (current_cpu, pc, FLD (f_u8));
    SEM_BRANCH_VIA_ADDR (current_cpu, sem_arg, opval, vpc);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}

  SEM_BRANCH_FINI (vpc);
#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_INTE) : /* inte */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.fmt_empty.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
; /*clobber*/
; /*clobber*/
; /*clobber*/
  {
    SI opval = fr30_inte (current_cpu, pc);
    SEM_BRANCH_VIA_ADDR (current_cpu, sem_arg, opval, vpc);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}

  SEM_BRANCH_FINI (vpc);
#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_RETI) : /* reti */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.fmt_empty.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

if (EQBI (GET_H_SBIT (), 0)) {
{
  {
    SI opval = GETMEMSI (current_cpu, pc, GET_H_DR (((UINT) 2)));
    SEM_BRANCH_VIA_ADDR (current_cpu, sem_arg, opval, vpc);
    written |= (1 << 7);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
  {
    SI opval = ADDSI (GET_H_DR (((UINT) 2)), 4);
    SET_H_DR (((UINT) 2), opval);
    written |= (1 << 5);
    TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
  }
  {
    SI opval = GETMEMSI (current_cpu, pc, GET_H_DR (((UINT) 2)));
    SET_H_PS (opval);
    written |= (1 << 8);
    TRACE_RESULT (current_cpu, abuf, "ps", 'x', opval);
  }
  {
    SI opval = ADDSI (GET_H_DR (((UINT) 2)), 4);
    SET_H_DR (((UINT) 2), opval);
    written |= (1 << 5);
    TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
  }
}
} else {
{
  {
    SI opval = GETMEMSI (current_cpu, pc, GET_H_DR (((UINT) 3)));
    SEM_BRANCH_VIA_ADDR (current_cpu, sem_arg, opval, vpc);
    written |= (1 << 7);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
  {
    SI opval = ADDSI (GET_H_DR (((UINT) 3)), 4);
    SET_H_DR (((UINT) 3), opval);
    written |= (1 << 6);
    TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
  }
  {
    SI opval = GETMEMSI (current_cpu, pc, GET_H_DR (((UINT) 3)));
    SET_H_PS (opval);
    written |= (1 << 8);
    TRACE_RESULT (current_cpu, abuf, "ps", 'x', opval);
  }
  {
    SI opval = ADDSI (GET_H_DR (((UINT) 3)), 4);
    SET_H_DR (((UINT) 3), opval);
    written |= (1 << 6);
    TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
  }
}
}

  abuf->written = written;
  SEM_BRANCH_FINI (vpc);
#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_BRAD) : /* bra:d $label9 */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_brad.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  {
    USI opval = FLD (i_label9);
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}

  SEM_BRANCH_FINI (vpc);
#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_BRA) : /* bra $label9 */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_brad.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    USI opval = FLD (i_label9);
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }

  SEM_BRANCH_FINI (vpc);
#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_BNOD) : /* bno:d $label9 */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.fmt_empty.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
((void) 0); /*nop*/
}

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_BNO) : /* bno $label9 */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.fmt_empty.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

((void) 0); /*nop*/

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_BEQD) : /* beq:d $label9 */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_brad.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
if (CPU (h_zbit)) {
  {
    USI opval = FLD (i_label9);
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
    written |= (1 << 2);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}
}

  abuf->written = written;
  SEM_BRANCH_FINI (vpc);
#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_BEQ) : /* beq $label9 */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_brad.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

if (CPU (h_zbit)) {
  {
    USI opval = FLD (i_label9);
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
    written |= (1 << 2);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}

  abuf->written = written;
  SEM_BRANCH_FINI (vpc);
#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_BNED) : /* bne:d $label9 */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_brad.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
if (NOTBI (CPU (h_zbit))) {
  {
    USI opval = FLD (i_label9);
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
    written |= (1 << 2);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}
}

  abuf->written = written;
  SEM_BRANCH_FINI (vpc);
#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_BNE) : /* bne $label9 */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_brad.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

if (NOTBI (CPU (h_zbit))) {
  {
    USI opval = FLD (i_label9);
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
    written |= (1 << 2);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}

  abuf->written = written;
  SEM_BRANCH_FINI (vpc);
#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_BCD) : /* bc:d $label9 */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_brad.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
if (CPU (h_cbit)) {
  {
    USI opval = FLD (i_label9);
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
    written |= (1 << 2);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}
}

  abuf->written = written;
  SEM_BRANCH_FINI (vpc);
#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_BC) : /* bc $label9 */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_brad.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

if (CPU (h_cbit)) {
  {
    USI opval = FLD (i_label9);
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
    written |= (1 << 2);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}

  abuf->written = written;
  SEM_BRANCH_FINI (vpc);
#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_BNCD) : /* bnc:d $label9 */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_brad.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
if (NOTBI (CPU (h_cbit))) {
  {
    USI opval = FLD (i_label9);
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
    written |= (1 << 2);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}
}

  abuf->written = written;
  SEM_BRANCH_FINI (vpc);
#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_BNC) : /* bnc $label9 */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_brad.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

if (NOTBI (CPU (h_cbit))) {
  {
    USI opval = FLD (i_label9);
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
    written |= (1 << 2);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}

  abuf->written = written;
  SEM_BRANCH_FINI (vpc);
#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_BND) : /* bn:d $label9 */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_brad.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
if (CPU (h_nbit)) {
  {
    USI opval = FLD (i_label9);
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
    written |= (1 << 2);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}
}

  abuf->written = written;
  SEM_BRANCH_FINI (vpc);
#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_BN) : /* bn $label9 */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_brad.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

if (CPU (h_nbit)) {
  {
    USI opval = FLD (i_label9);
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
    written |= (1 << 2);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}

  abuf->written = written;
  SEM_BRANCH_FINI (vpc);
#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_BPD) : /* bp:d $label9 */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_brad.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
if (NOTBI (CPU (h_nbit))) {
  {
    USI opval = FLD (i_label9);
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
    written |= (1 << 2);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}
}

  abuf->written = written;
  SEM_BRANCH_FINI (vpc);
#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_BP) : /* bp $label9 */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_brad.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

if (NOTBI (CPU (h_nbit))) {
  {
    USI opval = FLD (i_label9);
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
    written |= (1 << 2);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}

  abuf->written = written;
  SEM_BRANCH_FINI (vpc);
#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_BVD) : /* bv:d $label9 */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_brad.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
if (CPU (h_vbit)) {
  {
    USI opval = FLD (i_label9);
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
    written |= (1 << 2);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}
}

  abuf->written = written;
  SEM_BRANCH_FINI (vpc);
#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_BV) : /* bv $label9 */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_brad.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

if (CPU (h_vbit)) {
  {
    USI opval = FLD (i_label9);
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
    written |= (1 << 2);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}

  abuf->written = written;
  SEM_BRANCH_FINI (vpc);
#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_BNVD) : /* bnv:d $label9 */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_brad.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
if (NOTBI (CPU (h_vbit))) {
  {
    USI opval = FLD (i_label9);
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
    written |= (1 << 2);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}
}

  abuf->written = written;
  SEM_BRANCH_FINI (vpc);
#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_BNV) : /* bnv $label9 */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_brad.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

if (NOTBI (CPU (h_vbit))) {
  {
    USI opval = FLD (i_label9);
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
    written |= (1 << 2);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}

  abuf->written = written;
  SEM_BRANCH_FINI (vpc);
#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_BLTD) : /* blt:d $label9 */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_brad.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
if (XORBI (CPU (h_vbit), CPU (h_nbit))) {
  {
    USI opval = FLD (i_label9);
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
    written |= (1 << 3);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}
}

  abuf->written = written;
  SEM_BRANCH_FINI (vpc);
#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_BLT) : /* blt $label9 */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_brad.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

if (XORBI (CPU (h_vbit), CPU (h_nbit))) {
  {
    USI opval = FLD (i_label9);
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
    written |= (1 << 3);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}

  abuf->written = written;
  SEM_BRANCH_FINI (vpc);
#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_BGED) : /* bge:d $label9 */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_brad.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
if (NOTBI (XORBI (CPU (h_vbit), CPU (h_nbit)))) {
  {
    USI opval = FLD (i_label9);
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
    written |= (1 << 3);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}
}

  abuf->written = written;
  SEM_BRANCH_FINI (vpc);
#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_BGE) : /* bge $label9 */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_brad.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

if (NOTBI (XORBI (CPU (h_vbit), CPU (h_nbit)))) {
  {
    USI opval = FLD (i_label9);
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
    written |= (1 << 3);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}

  abuf->written = written;
  SEM_BRANCH_FINI (vpc);
#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_BLED) : /* ble:d $label9 */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_brad.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
if (ORBI (XORBI (CPU (h_vbit), CPU (h_nbit)), CPU (h_zbit))) {
  {
    USI opval = FLD (i_label9);
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
    written |= (1 << 4);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}
}

  abuf->written = written;
  SEM_BRANCH_FINI (vpc);
#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_BLE) : /* ble $label9 */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_brad.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

if (ORBI (XORBI (CPU (h_vbit), CPU (h_nbit)), CPU (h_zbit))) {
  {
    USI opval = FLD (i_label9);
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
    written |= (1 << 4);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}

  abuf->written = written;
  SEM_BRANCH_FINI (vpc);
#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_BGTD) : /* bgt:d $label9 */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_brad.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
if (NOTBI (ORBI (XORBI (CPU (h_vbit), CPU (h_nbit)), CPU (h_zbit)))) {
  {
    USI opval = FLD (i_label9);
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
    written |= (1 << 4);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}
}

  abuf->written = written;
  SEM_BRANCH_FINI (vpc);
#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_BGT) : /* bgt $label9 */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_brad.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

if (NOTBI (ORBI (XORBI (CPU (h_vbit), CPU (h_nbit)), CPU (h_zbit)))) {
  {
    USI opval = FLD (i_label9);
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
    written |= (1 << 4);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}

  abuf->written = written;
  SEM_BRANCH_FINI (vpc);
#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_BLSD) : /* bls:d $label9 */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_brad.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
if (ORBI (CPU (h_cbit), CPU (h_zbit))) {
  {
    USI opval = FLD (i_label9);
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
    written |= (1 << 3);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}
}

  abuf->written = written;
  SEM_BRANCH_FINI (vpc);
#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_BLS) : /* bls $label9 */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_brad.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

if (ORBI (CPU (h_cbit), CPU (h_zbit))) {
  {
    USI opval = FLD (i_label9);
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
    written |= (1 << 3);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}

  abuf->written = written;
  SEM_BRANCH_FINI (vpc);
#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_BHID) : /* bhi:d $label9 */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_brad.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
if (NOTBI (ORBI (CPU (h_cbit), CPU (h_zbit)))) {
  {
    USI opval = FLD (i_label9);
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
    written |= (1 << 3);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}
}

  abuf->written = written;
  SEM_BRANCH_FINI (vpc);
#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_BHI) : /* bhi $label9 */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_brad.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

if (NOTBI (ORBI (CPU (h_cbit), CPU (h_zbit)))) {
  {
    USI opval = FLD (i_label9);
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
    written |= (1 << 3);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}

  abuf->written = written;
  SEM_BRANCH_FINI (vpc);
#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_DMOVR13) : /* dmov $R13,@@$dir10 */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_dmovr13pi.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    SI opval = CPU (h_gr[((UINT) 13)]);
    SETMEMSI (current_cpu, pc, FLD (f_dir10), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_DMOVR13H) : /* dmovh $R13,@@$dir9 */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_dmovr13pih.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    HI opval = CPU (h_gr[((UINT) 13)]);
    SETMEMHI (current_cpu, pc, FLD (f_dir9), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_DMOVR13B) : /* dmovb $R13,@@$dir8 */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_dmovr13pib.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    QI opval = CPU (h_gr[((UINT) 13)]);
    SETMEMQI (current_cpu, pc, FLD (f_dir8), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_DMOVR13PI) : /* dmov @@$R13+,@@$dir10 */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_dmovr13pi.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  {
    SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 13)]));
    SETMEMSI (current_cpu, pc, FLD (f_dir10), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
  {
    SI opval = ADDSI (CPU (h_gr[((UINT) 13)]), 4);
    CPU (h_gr[((UINT) 13)]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
}

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_DMOVR13PIH) : /* dmovh @@$R13+,@@$dir9 */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_dmovr13pih.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  {
    HI opval = GETMEMHI (current_cpu, pc, CPU (h_gr[((UINT) 13)]));
    SETMEMHI (current_cpu, pc, FLD (f_dir9), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
  {
    SI opval = ADDSI (CPU (h_gr[((UINT) 13)]), 2);
    CPU (h_gr[((UINT) 13)]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
}

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_DMOVR13PIB) : /* dmovb @@$R13+,@@$dir8 */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_dmovr13pib.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  {
    QI opval = GETMEMQI (current_cpu, pc, CPU (h_gr[((UINT) 13)]));
    SETMEMQI (current_cpu, pc, FLD (f_dir8), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
  {
    SI opval = ADDSI (CPU (h_gr[((UINT) 13)]), 1);
    CPU (h_gr[((UINT) 13)]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
}

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_DMOVR15PI) : /* dmov @@$R15+,@@$dir10 */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_dmovr15pi.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  {
    SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
    SETMEMSI (current_cpu, pc, FLD (f_dir10), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
  {
    SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
    CPU (h_gr[((UINT) 15)]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
}

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_DMOV2R13) : /* dmov @@$dir10,$R13 */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_dmovr13pi.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    SI opval = GETMEMSI (current_cpu, pc, FLD (f_dir10));
    CPU (h_gr[((UINT) 13)]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_DMOV2R13H) : /* dmovh @@$dir9,$R13 */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_dmovr13pih.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    SI opval = GETMEMHI (current_cpu, pc, FLD (f_dir9));
    CPU (h_gr[((UINT) 13)]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_DMOV2R13B) : /* dmovb @@$dir8,$R13 */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_dmovr13pib.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    SI opval = GETMEMQI (current_cpu, pc, FLD (f_dir8));
    CPU (h_gr[((UINT) 13)]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_DMOV2R13PI) : /* dmov @@$dir10,@@$R13+ */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_dmovr13pi.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  {
    SI opval = GETMEMSI (current_cpu, pc, FLD (f_dir10));
    SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 13)]), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
  {
    SI opval = ADDSI (CPU (h_gr[((UINT) 13)]), 4);
    CPU (h_gr[((UINT) 13)]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
}

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_DMOV2R13PIH) : /* dmovh @@$dir9,@@$R13+ */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_dmovr13pih.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  {
    HI opval = GETMEMHI (current_cpu, pc, FLD (f_dir9));
    SETMEMHI (current_cpu, pc, CPU (h_gr[((UINT) 13)]), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
  {
    SI opval = ADDSI (CPU (h_gr[((UINT) 13)]), 2);
    CPU (h_gr[((UINT) 13)]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
}

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_DMOV2R13PIB) : /* dmovb @@$dir8,@@$R13+ */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_dmovr13pib.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  {
    QI opval = GETMEMQI (current_cpu, pc, FLD (f_dir8));
    SETMEMQI (current_cpu, pc, CPU (h_gr[((UINT) 13)]), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
  {
    SI opval = ADDSI (CPU (h_gr[((UINT) 13)]), 1);
    CPU (h_gr[((UINT) 13)]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
}

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_DMOV2R15PD) : /* dmov @@$dir10,@@-$R15 */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_dmovr15pi.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  {
    SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
    CPU (h_gr[((UINT) 15)]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
  {
    SI opval = GETMEMSI (current_cpu, pc, FLD (f_dir10));
    SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
}

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_LDRES) : /* ldres @@$Ri+,$u4 */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_add2.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    SI opval = ADDSI (* FLD (i_Ri), 4);
    * FLD (i_Ri) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_STRES) : /* stres $u4,@@$Ri+ */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_add2.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    SI opval = ADDSI (* FLD (i_Ri), 4);
    * FLD (i_Ri) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_COPOP) : /* copop $u4c,$ccc,$CRj,$CRi */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.fmt_empty.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

((void) 0); /*nop*/

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_COPLD) : /* copld $u4c,$ccc,$Rjc,$CRi */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.fmt_empty.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

((void) 0); /*nop*/

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_COPST) : /* copst $u4c,$ccc,$CRj,$Ric */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.fmt_empty.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

((void) 0); /*nop*/

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_COPSV) : /* copsv $u4c,$ccc,$CRj,$Ric */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.fmt_empty.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

((void) 0); /*nop*/

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_NOP) : /* nop */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.fmt_empty.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

((void) 0); /*nop*/

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_ANDCCR) : /* andccr $u8 */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_int.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    UQI opval = ANDQI (GET_H_CCR (), FLD (f_u8));
    SET_H_CCR (opval);
    TRACE_RESULT (current_cpu, abuf, "ccr", 'x', opval);
  }

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_ORCCR) : /* orccr $u8 */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_int.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    UQI opval = ORQI (GET_H_CCR (), FLD (f_u8));
    SET_H_CCR (opval);
    TRACE_RESULT (current_cpu, abuf, "ccr", 'x', opval);
  }

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_STILM) : /* stilm $u8 */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_int.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    UQI opval = ANDSI (FLD (f_u8), 31);
    SET_H_ILM (opval);
    TRACE_RESULT (current_cpu, abuf, "ilm", 'x', opval);
  }

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_ADDSP) : /* addsp $s10 */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_addsp.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), FLD (f_s10));
    CPU (h_gr[((UINT) 15)]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_EXTSB) : /* extsb $Ri */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_add2.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    SI opval = EXTQISI (ANDQI (* FLD (i_Ri), 255));
    * FLD (i_Ri) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_EXTUB) : /* extub $Ri */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_add2.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    SI opval = ZEXTQISI (ANDQI (* FLD (i_Ri), 255));
    * FLD (i_Ri) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_EXTSH) : /* extsh $Ri */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_add2.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    SI opval = EXTHISI (ANDHI (* FLD (i_Ri), 65535));
    * FLD (i_Ri) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_EXTUH) : /* extuh $Ri */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_add2.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    SI opval = ZEXTHISI (ANDHI (* FLD (i_Ri), 65535));
    * FLD (i_Ri) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_LDM0) : /* ldm0 ($reglist_low_ld) */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_ldm0.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
if (ANDSI (FLD (f_reglist_low_ld), 1)) {
{
  {
    SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
    CPU (h_gr[((UINT) 0)]) = opval;
    written |= (1 << 3);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
  {
    SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
    CPU (h_gr[((UINT) 15)]) = opval;
    written |= (1 << 5);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
}
}
if (ANDSI (FLD (f_reglist_low_ld), 2)) {
{
  {
    SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
    CPU (h_gr[((UINT) 1)]) = opval;
    written |= (1 << 4);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
  {
    SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
    CPU (h_gr[((UINT) 15)]) = opval;
    written |= (1 << 5);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
}
}
if (ANDSI (FLD (f_reglist_low_ld), 4)) {
{
  {
    SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
    CPU (h_gr[((UINT) 2)]) = opval;
    written |= (1 << 6);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
  {
    SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
    CPU (h_gr[((UINT) 15)]) = opval;
    written |= (1 << 5);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
}
}
if (ANDSI (FLD (f_reglist_low_ld), 8)) {
{
  {
    SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
    CPU (h_gr[((UINT) 3)]) = opval;
    written |= (1 << 7);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
  {
    SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
    CPU (h_gr[((UINT) 15)]) = opval;
    written |= (1 << 5);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
}
}
if (ANDSI (FLD (f_reglist_low_ld), 16)) {
{
  {
    SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
    CPU (h_gr[((UINT) 4)]) = opval;
    written |= (1 << 8);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
  {
    SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
    CPU (h_gr[((UINT) 15)]) = opval;
    written |= (1 << 5);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
}
}
if (ANDSI (FLD (f_reglist_low_ld), 32)) {
{
  {
    SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
    CPU (h_gr[((UINT) 5)]) = opval;
    written |= (1 << 9);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
  {
    SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
    CPU (h_gr[((UINT) 15)]) = opval;
    written |= (1 << 5);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
}
}
if (ANDSI (FLD (f_reglist_low_ld), 64)) {
{
  {
    SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
    CPU (h_gr[((UINT) 6)]) = opval;
    written |= (1 << 10);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
  {
    SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
    CPU (h_gr[((UINT) 15)]) = opval;
    written |= (1 << 5);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
}
}
if (ANDSI (FLD (f_reglist_low_ld), 128)) {
{
  {
    SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
    CPU (h_gr[((UINT) 7)]) = opval;
    written |= (1 << 11);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
  {
    SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
    CPU (h_gr[((UINT) 15)]) = opval;
    written |= (1 << 5);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
}
}
}

  abuf->written = written;
#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_LDM1) : /* ldm1 ($reglist_hi_ld) */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_ldm1.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
if (ANDSI (FLD (f_reglist_hi_ld), 1)) {
{
  {
    SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
    CPU (h_gr[((UINT) 8)]) = opval;
    written |= (1 << 9);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
  {
    SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
    CPU (h_gr[((UINT) 15)]) = opval;
    written |= (1 << 8);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
}
}
if (ANDSI (FLD (f_reglist_hi_ld), 2)) {
{
  {
    SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
    CPU (h_gr[((UINT) 9)]) = opval;
    written |= (1 << 10);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
  {
    SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
    CPU (h_gr[((UINT) 15)]) = opval;
    written |= (1 << 8);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
}
}
if (ANDSI (FLD (f_reglist_hi_ld), 4)) {
{
  {
    SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
    CPU (h_gr[((UINT) 10)]) = opval;
    written |= (1 << 3);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
  {
    SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
    CPU (h_gr[((UINT) 15)]) = opval;
    written |= (1 << 8);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
}
}
if (ANDSI (FLD (f_reglist_hi_ld), 8)) {
{
  {
    SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
    CPU (h_gr[((UINT) 11)]) = opval;
    written |= (1 << 4);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
  {
    SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
    CPU (h_gr[((UINT) 15)]) = opval;
    written |= (1 << 8);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
}
}
if (ANDSI (FLD (f_reglist_hi_ld), 16)) {
{
  {
    SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
    CPU (h_gr[((UINT) 12)]) = opval;
    written |= (1 << 5);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
  {
    SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
    CPU (h_gr[((UINT) 15)]) = opval;
    written |= (1 << 8);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
}
}
if (ANDSI (FLD (f_reglist_hi_ld), 32)) {
{
  {
    SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
    CPU (h_gr[((UINT) 13)]) = opval;
    written |= (1 << 6);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
  {
    SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
    CPU (h_gr[((UINT) 15)]) = opval;
    written |= (1 << 8);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
}
}
if (ANDSI (FLD (f_reglist_hi_ld), 64)) {
{
  {
    SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
    CPU (h_gr[((UINT) 14)]) = opval;
    written |= (1 << 7);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
  {
    SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
    CPU (h_gr[((UINT) 15)]) = opval;
    written |= (1 << 8);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
}
}
if (ANDSI (FLD (f_reglist_hi_ld), 128)) {
  {
    SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
    CPU (h_gr[((UINT) 15)]) = opval;
    written |= (1 << 8);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
}
}

  abuf->written = written;
#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_STM0) : /* stm0 ($reglist_low_st) */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_stm0.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
if (ANDSI (FLD (f_reglist_low_st), 1)) {
{
  {
    SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
    CPU (h_gr[((UINT) 15)]) = opval;
    written |= (1 << 10);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
  {
    SI opval = CPU (h_gr[((UINT) 7)]);
    SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
    written |= (1 << 11);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
}
}
if (ANDSI (FLD (f_reglist_low_st), 2)) {
{
  {
    SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
    CPU (h_gr[((UINT) 15)]) = opval;
    written |= (1 << 10);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
  {
    SI opval = CPU (h_gr[((UINT) 6)]);
    SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
    written |= (1 << 11);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
}
}
if (ANDSI (FLD (f_reglist_low_st), 4)) {
{
  {
    SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
    CPU (h_gr[((UINT) 15)]) = opval;
    written |= (1 << 10);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
  {
    SI opval = CPU (h_gr[((UINT) 5)]);
    SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
    written |= (1 << 11);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
}
}
if (ANDSI (FLD (f_reglist_low_st), 8)) {
{
  {
    SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
    CPU (h_gr[((UINT) 15)]) = opval;
    written |= (1 << 10);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
  {
    SI opval = CPU (h_gr[((UINT) 4)]);
    SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
    written |= (1 << 11);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
}
}
if (ANDSI (FLD (f_reglist_low_st), 16)) {
{
  {
    SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
    CPU (h_gr[((UINT) 15)]) = opval;
    written |= (1 << 10);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
  {
    SI opval = CPU (h_gr[((UINT) 3)]);
    SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
    written |= (1 << 11);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
}
}
if (ANDSI (FLD (f_reglist_low_st), 32)) {
{
  {
    SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
    CPU (h_gr[((UINT) 15)]) = opval;
    written |= (1 << 10);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
  {
    SI opval = CPU (h_gr[((UINT) 2)]);
    SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
    written |= (1 << 11);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
}
}
if (ANDSI (FLD (f_reglist_low_st), 64)) {
{
  {
    SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
    CPU (h_gr[((UINT) 15)]) = opval;
    written |= (1 << 10);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
  {
    SI opval = CPU (h_gr[((UINT) 1)]);
    SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
    written |= (1 << 11);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
}
}
if (ANDSI (FLD (f_reglist_low_st), 128)) {
{
  {
    SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
    CPU (h_gr[((UINT) 15)]) = opval;
    written |= (1 << 10);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
  {
    SI opval = CPU (h_gr[((UINT) 0)]);
    SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
    written |= (1 << 11);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
}
}
}

  abuf->written = written;
#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_STM1) : /* stm1 ($reglist_hi_st) */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_stm1.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
if (ANDSI (FLD (f_reglist_hi_st), 1)) {
{
  SI tmp_save_r15;
  tmp_save_r15 = CPU (h_gr[((UINT) 15)]);
  {
    SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
    CPU (h_gr[((UINT) 15)]) = opval;
    written |= (1 << 9);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
  {
    SI opval = tmp_save_r15;
    SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
    written |= (1 << 10);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
}
}
if (ANDSI (FLD (f_reglist_hi_st), 2)) {
{
  {
    SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
    CPU (h_gr[((UINT) 15)]) = opval;
    written |= (1 << 9);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
  {
    SI opval = CPU (h_gr[((UINT) 14)]);
    SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
    written |= (1 << 10);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
}
}
if (ANDSI (FLD (f_reglist_hi_st), 4)) {
{
  {
    SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
    CPU (h_gr[((UINT) 15)]) = opval;
    written |= (1 << 9);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
  {
    SI opval = CPU (h_gr[((UINT) 13)]);
    SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
    written |= (1 << 10);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
}
}
if (ANDSI (FLD (f_reglist_hi_st), 8)) {
{
  {
    SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
    CPU (h_gr[((UINT) 15)]) = opval;
    written |= (1 << 9);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
  {
    SI opval = CPU (h_gr[((UINT) 12)]);
    SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
    written |= (1 << 10);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
}
}
if (ANDSI (FLD (f_reglist_hi_st), 16)) {
{
  {
    SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
    CPU (h_gr[((UINT) 15)]) = opval;
    written |= (1 << 9);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
  {
    SI opval = CPU (h_gr[((UINT) 11)]);
    SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
    written |= (1 << 10);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
}
}
if (ANDSI (FLD (f_reglist_hi_st), 32)) {
{
  {
    SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
    CPU (h_gr[((UINT) 15)]) = opval;
    written |= (1 << 9);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
  {
    SI opval = CPU (h_gr[((UINT) 10)]);
    SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
    written |= (1 << 10);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
}
}
if (ANDSI (FLD (f_reglist_hi_st), 64)) {
{
  {
    SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
    CPU (h_gr[((UINT) 15)]) = opval;
    written |= (1 << 9);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
  {
    SI opval = CPU (h_gr[((UINT) 9)]);
    SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
    written |= (1 << 10);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
}
}
if (ANDSI (FLD (f_reglist_hi_st), 128)) {
{
  {
    SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
    CPU (h_gr[((UINT) 15)]) = opval;
    written |= (1 << 9);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
  {
    SI opval = CPU (h_gr[((UINT) 8)]);
    SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
    written |= (1 << 10);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
}
}
}

  abuf->written = written;
#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_ENTER) : /* enter $u10 */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_enter.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  SI tmp_tmp;
  tmp_tmp = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
  {
    SI opval = CPU (h_gr[((UINT) 14)]);
    SETMEMSI (current_cpu, pc, tmp_tmp, opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
  {
    SI opval = tmp_tmp;
    CPU (h_gr[((UINT) 14)]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
  {
    SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), FLD (f_u10));
    CPU (h_gr[((UINT) 15)]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
}

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_LEAVE) : /* leave */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_enter.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  {
    SI opval = ADDSI (CPU (h_gr[((UINT) 14)]), 4);
    CPU (h_gr[((UINT) 15)]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
  {
    SI opval = GETMEMSI (current_cpu, pc, SUBSI (CPU (h_gr[((UINT) 15)]), 4));
    CPU (h_gr[((UINT) 14)]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
}

#undef FLD
}
  NEXT (vpc);

  CASE (sem, INSN_XCHB) : /* xchb @@$Rj,$Ri */
{
  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
#define FLD(f) abuf->fields.sfmt_add.f
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  SI tmp_tmp;
  tmp_tmp = * FLD (i_Ri);
  {
    SI opval = GETMEMUQI (current_cpu, pc, * FLD (i_Rj));
    * FLD (i_Ri) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
  {
    UQI opval = tmp_tmp;
    SETMEMUQI (current_cpu, pc, * FLD (i_Rj), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
}

#undef FLD
}
  NEXT (vpc);


    }
  ENDSWITCH (sem) /* End of semantic switch.  */

  /* At this point `vpc' contains the next insn to execute.  */
}

#undef DEFINE_SWITCH
#endif /* DEFINE_SWITCH */
@


1.4.8.1
log
@Merge w/trunk (kseitz_interps-20020722-merge).
@
text
@d1 5409
a5409 5409
// OBSOLETE /* Simulator instruction semantics for fr30bf.
// OBSOLETE 
// OBSOLETE THIS FILE IS MACHINE GENERATED WITH CGEN.
// OBSOLETE 
// OBSOLETE Copyright 1996, 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.
// OBSOLETE 
// OBSOLETE This file is part of the GNU simulators.
// OBSOLETE 
// OBSOLETE This program is free software; you can redistribute it and/or modify
// OBSOLETE it under the terms of the GNU General Public License as published by
// OBSOLETE the Free Software Foundation; either version 2, or (at your option)
// OBSOLETE any later version.
// OBSOLETE 
// OBSOLETE This program is distributed in the hope that it will be useful,
// OBSOLETE but WITHOUT ANY WARRANTY; without even the implied warranty of
// OBSOLETE MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// OBSOLETE GNU General Public License for more details.
// OBSOLETE 
// OBSOLETE You should have received a copy of the GNU General Public License along
// OBSOLETE with this program; if not, write to the Free Software Foundation, Inc.,
// OBSOLETE 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
// OBSOLETE 
// OBSOLETE */
// OBSOLETE 
// OBSOLETE #ifdef DEFINE_LABELS
// OBSOLETE 
// OBSOLETE   /* The labels have the case they have because the enum of insn types
// OBSOLETE      is all uppercase and in the non-stdc case the insn symbol is built
// OBSOLETE      into the enum name.  */
// OBSOLETE 
// OBSOLETE   static struct {
// OBSOLETE     int index;
// OBSOLETE     void *label;
// OBSOLETE   } labels[] = {
// OBSOLETE     { FR30BF_INSN_X_INVALID, && case_sem_INSN_X_INVALID },
// OBSOLETE     { FR30BF_INSN_X_AFTER, && case_sem_INSN_X_AFTER },
// OBSOLETE     { FR30BF_INSN_X_BEFORE, && case_sem_INSN_X_BEFORE },
// OBSOLETE     { FR30BF_INSN_X_CTI_CHAIN, && case_sem_INSN_X_CTI_CHAIN },
// OBSOLETE     { FR30BF_INSN_X_CHAIN, && case_sem_INSN_X_CHAIN },
// OBSOLETE     { FR30BF_INSN_X_BEGIN, && case_sem_INSN_X_BEGIN },
// OBSOLETE     { FR30BF_INSN_ADD, && case_sem_INSN_ADD },
// OBSOLETE     { FR30BF_INSN_ADDI, && case_sem_INSN_ADDI },
// OBSOLETE     { FR30BF_INSN_ADD2, && case_sem_INSN_ADD2 },
// OBSOLETE     { FR30BF_INSN_ADDC, && case_sem_INSN_ADDC },
// OBSOLETE     { FR30BF_INSN_ADDN, && case_sem_INSN_ADDN },
// OBSOLETE     { FR30BF_INSN_ADDNI, && case_sem_INSN_ADDNI },
// OBSOLETE     { FR30BF_INSN_ADDN2, && case_sem_INSN_ADDN2 },
// OBSOLETE     { FR30BF_INSN_SUB, && case_sem_INSN_SUB },
// OBSOLETE     { FR30BF_INSN_SUBC, && case_sem_INSN_SUBC },
// OBSOLETE     { FR30BF_INSN_SUBN, && case_sem_INSN_SUBN },
// OBSOLETE     { FR30BF_INSN_CMP, && case_sem_INSN_CMP },
// OBSOLETE     { FR30BF_INSN_CMPI, && case_sem_INSN_CMPI },
// OBSOLETE     { FR30BF_INSN_CMP2, && case_sem_INSN_CMP2 },
// OBSOLETE     { FR30BF_INSN_AND, && case_sem_INSN_AND },
// OBSOLETE     { FR30BF_INSN_OR, && case_sem_INSN_OR },
// OBSOLETE     { FR30BF_INSN_EOR, && case_sem_INSN_EOR },
// OBSOLETE     { FR30BF_INSN_ANDM, && case_sem_INSN_ANDM },
// OBSOLETE     { FR30BF_INSN_ANDH, && case_sem_INSN_ANDH },
// OBSOLETE     { FR30BF_INSN_ANDB, && case_sem_INSN_ANDB },
// OBSOLETE     { FR30BF_INSN_ORM, && case_sem_INSN_ORM },
// OBSOLETE     { FR30BF_INSN_ORH, && case_sem_INSN_ORH },
// OBSOLETE     { FR30BF_INSN_ORB, && case_sem_INSN_ORB },
// OBSOLETE     { FR30BF_INSN_EORM, && case_sem_INSN_EORM },
// OBSOLETE     { FR30BF_INSN_EORH, && case_sem_INSN_EORH },
// OBSOLETE     { FR30BF_INSN_EORB, && case_sem_INSN_EORB },
// OBSOLETE     { FR30BF_INSN_BANDL, && case_sem_INSN_BANDL },
// OBSOLETE     { FR30BF_INSN_BORL, && case_sem_INSN_BORL },
// OBSOLETE     { FR30BF_INSN_BEORL, && case_sem_INSN_BEORL },
// OBSOLETE     { FR30BF_INSN_BANDH, && case_sem_INSN_BANDH },
// OBSOLETE     { FR30BF_INSN_BORH, && case_sem_INSN_BORH },
// OBSOLETE     { FR30BF_INSN_BEORH, && case_sem_INSN_BEORH },
// OBSOLETE     { FR30BF_INSN_BTSTL, && case_sem_INSN_BTSTL },
// OBSOLETE     { FR30BF_INSN_BTSTH, && case_sem_INSN_BTSTH },
// OBSOLETE     { FR30BF_INSN_MUL, && case_sem_INSN_MUL },
// OBSOLETE     { FR30BF_INSN_MULU, && case_sem_INSN_MULU },
// OBSOLETE     { FR30BF_INSN_MULH, && case_sem_INSN_MULH },
// OBSOLETE     { FR30BF_INSN_MULUH, && case_sem_INSN_MULUH },
// OBSOLETE     { FR30BF_INSN_DIV0S, && case_sem_INSN_DIV0S },
// OBSOLETE     { FR30BF_INSN_DIV0U, && case_sem_INSN_DIV0U },
// OBSOLETE     { FR30BF_INSN_DIV1, && case_sem_INSN_DIV1 },
// OBSOLETE     { FR30BF_INSN_DIV2, && case_sem_INSN_DIV2 },
// OBSOLETE     { FR30BF_INSN_DIV3, && case_sem_INSN_DIV3 },
// OBSOLETE     { FR30BF_INSN_DIV4S, && case_sem_INSN_DIV4S },
// OBSOLETE     { FR30BF_INSN_LSL, && case_sem_INSN_LSL },
// OBSOLETE     { FR30BF_INSN_LSLI, && case_sem_INSN_LSLI },
// OBSOLETE     { FR30BF_INSN_LSL2, && case_sem_INSN_LSL2 },
// OBSOLETE     { FR30BF_INSN_LSR, && case_sem_INSN_LSR },
// OBSOLETE     { FR30BF_INSN_LSRI, && case_sem_INSN_LSRI },
// OBSOLETE     { FR30BF_INSN_LSR2, && case_sem_INSN_LSR2 },
// OBSOLETE     { FR30BF_INSN_ASR, && case_sem_INSN_ASR },
// OBSOLETE     { FR30BF_INSN_ASRI, && case_sem_INSN_ASRI },
// OBSOLETE     { FR30BF_INSN_ASR2, && case_sem_INSN_ASR2 },
// OBSOLETE     { FR30BF_INSN_LDI8, && case_sem_INSN_LDI8 },
// OBSOLETE     { FR30BF_INSN_LDI20, && case_sem_INSN_LDI20 },
// OBSOLETE     { FR30BF_INSN_LDI32, && case_sem_INSN_LDI32 },
// OBSOLETE     { FR30BF_INSN_LD, && case_sem_INSN_LD },
// OBSOLETE     { FR30BF_INSN_LDUH, && case_sem_INSN_LDUH },
// OBSOLETE     { FR30BF_INSN_LDUB, && case_sem_INSN_LDUB },
// OBSOLETE     { FR30BF_INSN_LDR13, && case_sem_INSN_LDR13 },
// OBSOLETE     { FR30BF_INSN_LDR13UH, && case_sem_INSN_LDR13UH },
// OBSOLETE     { FR30BF_INSN_LDR13UB, && case_sem_INSN_LDR13UB },
// OBSOLETE     { FR30BF_INSN_LDR14, && case_sem_INSN_LDR14 },
// OBSOLETE     { FR30BF_INSN_LDR14UH, && case_sem_INSN_LDR14UH },
// OBSOLETE     { FR30BF_INSN_LDR14UB, && case_sem_INSN_LDR14UB },
// OBSOLETE     { FR30BF_INSN_LDR15, && case_sem_INSN_LDR15 },
// OBSOLETE     { FR30BF_INSN_LDR15GR, && case_sem_INSN_LDR15GR },
// OBSOLETE     { FR30BF_INSN_LDR15DR, && case_sem_INSN_LDR15DR },
// OBSOLETE     { FR30BF_INSN_LDR15PS, && case_sem_INSN_LDR15PS },
// OBSOLETE     { FR30BF_INSN_ST, && case_sem_INSN_ST },
// OBSOLETE     { FR30BF_INSN_STH, && case_sem_INSN_STH },
// OBSOLETE     { FR30BF_INSN_STB, && case_sem_INSN_STB },
// OBSOLETE     { FR30BF_INSN_STR13, && case_sem_INSN_STR13 },
// OBSOLETE     { FR30BF_INSN_STR13H, && case_sem_INSN_STR13H },
// OBSOLETE     { FR30BF_INSN_STR13B, && case_sem_INSN_STR13B },
// OBSOLETE     { FR30BF_INSN_STR14, && case_sem_INSN_STR14 },
// OBSOLETE     { FR30BF_INSN_STR14H, && case_sem_INSN_STR14H },
// OBSOLETE     { FR30BF_INSN_STR14B, && case_sem_INSN_STR14B },
// OBSOLETE     { FR30BF_INSN_STR15, && case_sem_INSN_STR15 },
// OBSOLETE     { FR30BF_INSN_STR15GR, && case_sem_INSN_STR15GR },
// OBSOLETE     { FR30BF_INSN_STR15DR, && case_sem_INSN_STR15DR },
// OBSOLETE     { FR30BF_INSN_STR15PS, && case_sem_INSN_STR15PS },
// OBSOLETE     { FR30BF_INSN_MOV, && case_sem_INSN_MOV },
// OBSOLETE     { FR30BF_INSN_MOVDR, && case_sem_INSN_MOVDR },
// OBSOLETE     { FR30BF_INSN_MOVPS, && case_sem_INSN_MOVPS },
// OBSOLETE     { FR30BF_INSN_MOV2DR, && case_sem_INSN_MOV2DR },
// OBSOLETE     { FR30BF_INSN_MOV2PS, && case_sem_INSN_MOV2PS },
// OBSOLETE     { FR30BF_INSN_JMP, && case_sem_INSN_JMP },
// OBSOLETE     { FR30BF_INSN_JMPD, && case_sem_INSN_JMPD },
// OBSOLETE     { FR30BF_INSN_CALLR, && case_sem_INSN_CALLR },
// OBSOLETE     { FR30BF_INSN_CALLRD, && case_sem_INSN_CALLRD },
// OBSOLETE     { FR30BF_INSN_CALL, && case_sem_INSN_CALL },
// OBSOLETE     { FR30BF_INSN_CALLD, && case_sem_INSN_CALLD },
// OBSOLETE     { FR30BF_INSN_RET, && case_sem_INSN_RET },
// OBSOLETE     { FR30BF_INSN_RET_D, && case_sem_INSN_RET_D },
// OBSOLETE     { FR30BF_INSN_INT, && case_sem_INSN_INT },
// OBSOLETE     { FR30BF_INSN_INTE, && case_sem_INSN_INTE },
// OBSOLETE     { FR30BF_INSN_RETI, && case_sem_INSN_RETI },
// OBSOLETE     { FR30BF_INSN_BRAD, && case_sem_INSN_BRAD },
// OBSOLETE     { FR30BF_INSN_BRA, && case_sem_INSN_BRA },
// OBSOLETE     { FR30BF_INSN_BNOD, && case_sem_INSN_BNOD },
// OBSOLETE     { FR30BF_INSN_BNO, && case_sem_INSN_BNO },
// OBSOLETE     { FR30BF_INSN_BEQD, && case_sem_INSN_BEQD },
// OBSOLETE     { FR30BF_INSN_BEQ, && case_sem_INSN_BEQ },
// OBSOLETE     { FR30BF_INSN_BNED, && case_sem_INSN_BNED },
// OBSOLETE     { FR30BF_INSN_BNE, && case_sem_INSN_BNE },
// OBSOLETE     { FR30BF_INSN_BCD, && case_sem_INSN_BCD },
// OBSOLETE     { FR30BF_INSN_BC, && case_sem_INSN_BC },
// OBSOLETE     { FR30BF_INSN_BNCD, && case_sem_INSN_BNCD },
// OBSOLETE     { FR30BF_INSN_BNC, && case_sem_INSN_BNC },
// OBSOLETE     { FR30BF_INSN_BND, && case_sem_INSN_BND },
// OBSOLETE     { FR30BF_INSN_BN, && case_sem_INSN_BN },
// OBSOLETE     { FR30BF_INSN_BPD, && case_sem_INSN_BPD },
// OBSOLETE     { FR30BF_INSN_BP, && case_sem_INSN_BP },
// OBSOLETE     { FR30BF_INSN_BVD, && case_sem_INSN_BVD },
// OBSOLETE     { FR30BF_INSN_BV, && case_sem_INSN_BV },
// OBSOLETE     { FR30BF_INSN_BNVD, && case_sem_INSN_BNVD },
// OBSOLETE     { FR30BF_INSN_BNV, && case_sem_INSN_BNV },
// OBSOLETE     { FR30BF_INSN_BLTD, && case_sem_INSN_BLTD },
// OBSOLETE     { FR30BF_INSN_BLT, && case_sem_INSN_BLT },
// OBSOLETE     { FR30BF_INSN_BGED, && case_sem_INSN_BGED },
// OBSOLETE     { FR30BF_INSN_BGE, && case_sem_INSN_BGE },
// OBSOLETE     { FR30BF_INSN_BLED, && case_sem_INSN_BLED },
// OBSOLETE     { FR30BF_INSN_BLE, && case_sem_INSN_BLE },
// OBSOLETE     { FR30BF_INSN_BGTD, && case_sem_INSN_BGTD },
// OBSOLETE     { FR30BF_INSN_BGT, && case_sem_INSN_BGT },
// OBSOLETE     { FR30BF_INSN_BLSD, && case_sem_INSN_BLSD },
// OBSOLETE     { FR30BF_INSN_BLS, && case_sem_INSN_BLS },
// OBSOLETE     { FR30BF_INSN_BHID, && case_sem_INSN_BHID },
// OBSOLETE     { FR30BF_INSN_BHI, && case_sem_INSN_BHI },
// OBSOLETE     { FR30BF_INSN_DMOVR13, && case_sem_INSN_DMOVR13 },
// OBSOLETE     { FR30BF_INSN_DMOVR13H, && case_sem_INSN_DMOVR13H },
// OBSOLETE     { FR30BF_INSN_DMOVR13B, && case_sem_INSN_DMOVR13B },
// OBSOLETE     { FR30BF_INSN_DMOVR13PI, && case_sem_INSN_DMOVR13PI },
// OBSOLETE     { FR30BF_INSN_DMOVR13PIH, && case_sem_INSN_DMOVR13PIH },
// OBSOLETE     { FR30BF_INSN_DMOVR13PIB, && case_sem_INSN_DMOVR13PIB },
// OBSOLETE     { FR30BF_INSN_DMOVR15PI, && case_sem_INSN_DMOVR15PI },
// OBSOLETE     { FR30BF_INSN_DMOV2R13, && case_sem_INSN_DMOV2R13 },
// OBSOLETE     { FR30BF_INSN_DMOV2R13H, && case_sem_INSN_DMOV2R13H },
// OBSOLETE     { FR30BF_INSN_DMOV2R13B, && case_sem_INSN_DMOV2R13B },
// OBSOLETE     { FR30BF_INSN_DMOV2R13PI, && case_sem_INSN_DMOV2R13PI },
// OBSOLETE     { FR30BF_INSN_DMOV2R13PIH, && case_sem_INSN_DMOV2R13PIH },
// OBSOLETE     { FR30BF_INSN_DMOV2R13PIB, && case_sem_INSN_DMOV2R13PIB },
// OBSOLETE     { FR30BF_INSN_DMOV2R15PD, && case_sem_INSN_DMOV2R15PD },
// OBSOLETE     { FR30BF_INSN_LDRES, && case_sem_INSN_LDRES },
// OBSOLETE     { FR30BF_INSN_STRES, && case_sem_INSN_STRES },
// OBSOLETE     { FR30BF_INSN_COPOP, && case_sem_INSN_COPOP },
// OBSOLETE     { FR30BF_INSN_COPLD, && case_sem_INSN_COPLD },
// OBSOLETE     { FR30BF_INSN_COPST, && case_sem_INSN_COPST },
// OBSOLETE     { FR30BF_INSN_COPSV, && case_sem_INSN_COPSV },
// OBSOLETE     { FR30BF_INSN_NOP, && case_sem_INSN_NOP },
// OBSOLETE     { FR30BF_INSN_ANDCCR, && case_sem_INSN_ANDCCR },
// OBSOLETE     { FR30BF_INSN_ORCCR, && case_sem_INSN_ORCCR },
// OBSOLETE     { FR30BF_INSN_STILM, && case_sem_INSN_STILM },
// OBSOLETE     { FR30BF_INSN_ADDSP, && case_sem_INSN_ADDSP },
// OBSOLETE     { FR30BF_INSN_EXTSB, && case_sem_INSN_EXTSB },
// OBSOLETE     { FR30BF_INSN_EXTUB, && case_sem_INSN_EXTUB },
// OBSOLETE     { FR30BF_INSN_EXTSH, && case_sem_INSN_EXTSH },
// OBSOLETE     { FR30BF_INSN_EXTUH, && case_sem_INSN_EXTUH },
// OBSOLETE     { FR30BF_INSN_LDM0, && case_sem_INSN_LDM0 },
// OBSOLETE     { FR30BF_INSN_LDM1, && case_sem_INSN_LDM1 },
// OBSOLETE     { FR30BF_INSN_STM0, && case_sem_INSN_STM0 },
// OBSOLETE     { FR30BF_INSN_STM1, && case_sem_INSN_STM1 },
// OBSOLETE     { FR30BF_INSN_ENTER, && case_sem_INSN_ENTER },
// OBSOLETE     { FR30BF_INSN_LEAVE, && case_sem_INSN_LEAVE },
// OBSOLETE     { FR30BF_INSN_XCHB, && case_sem_INSN_XCHB },
// OBSOLETE     { 0, 0 }
// OBSOLETE   };
// OBSOLETE   int i;
// OBSOLETE 
// OBSOLETE   for (i = 0; labels[i].label != 0; ++i)
// OBSOLETE     {
// OBSOLETE #if FAST_P
// OBSOLETE       CPU_IDESC (current_cpu) [labels[i].index].sem_fast_lab = labels[i].label;
// OBSOLETE #else
// OBSOLETE       CPU_IDESC (current_cpu) [labels[i].index].sem_full_lab = labels[i].label;
// OBSOLETE #endif
// OBSOLETE     }
// OBSOLETE 
// OBSOLETE #undef DEFINE_LABELS
// OBSOLETE #endif /* DEFINE_LABELS */
// OBSOLETE 
// OBSOLETE #ifdef DEFINE_SWITCH
// OBSOLETE 
// OBSOLETE /* If hyper-fast [well not unnecessarily slow] execution is selected, turn
// OBSOLETE    off frills like tracing and profiling.  */
// OBSOLETE /* FIXME: A better way would be to have TRACE_RESULT check for something
// OBSOLETE    that can cause it to be optimized out.  Another way would be to emit
// OBSOLETE    special handlers into the instruction "stream".  */
// OBSOLETE 
// OBSOLETE #if FAST_P
// OBSOLETE #undef TRACE_RESULT
// OBSOLETE #define TRACE_RESULT(cpu, abuf, name, type, val)
// OBSOLETE #endif
// OBSOLETE 
// OBSOLETE #undef GET_ATTR
// OBSOLETE #if defined (__STDC__) || defined (ALMOST_STDC) || defined (HAVE_STRINGIZE)
// OBSOLETE #define GET_ATTR(cpu, num, attr) CGEN_ATTR_VALUE (NULL, abuf->idesc->attrs, CGEN_INSN_##attr)
// OBSOLETE #else
// OBSOLETE #define GET_ATTR(cpu, num, attr) CGEN_ATTR_VALUE (NULL, abuf->idesc->attrs, CGEN_INSN_/**/attr)
// OBSOLETE #endif
// OBSOLETE 
// OBSOLETE {
// OBSOLETE 
// OBSOLETE #if WITH_SCACHE_PBB
// OBSOLETE 
// OBSOLETE /* Branch to next handler without going around main loop.  */
// OBSOLETE #define NEXT(vpc) goto * SEM_ARGBUF (vpc) -> semantic.sem_case
// OBSOLETE SWITCH (sem, SEM_ARGBUF (vpc) -> semantic.sem_case)
// OBSOLETE 
// OBSOLETE #else /* ! WITH_SCACHE_PBB */
// OBSOLETE 
// OBSOLETE #define NEXT(vpc) BREAK (sem)
// OBSOLETE #ifdef __GNUC__
// OBSOLETE #if FAST_P
// OBSOLETE   SWITCH (sem, SEM_ARGBUF (sc) -> idesc->sem_fast_lab)
// OBSOLETE #else
// OBSOLETE   SWITCH (sem, SEM_ARGBUF (sc) -> idesc->sem_full_lab)
// OBSOLETE #endif
// OBSOLETE #else
// OBSOLETE   SWITCH (sem, SEM_ARGBUF (sc) -> idesc->num)
// OBSOLETE #endif
// OBSOLETE 
// OBSOLETE #endif /* ! WITH_SCACHE_PBB */
// OBSOLETE 
// OBSOLETE     {
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_X_INVALID) : /* --invalid-- */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.fmt_empty.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 0);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     /* Update the recorded pc in the cpu state struct.
// OBSOLETE        Only necessary for WITH_SCACHE case, but to avoid the
// OBSOLETE        conditional compilation ....  */
// OBSOLETE     SET_H_PC (pc);
// OBSOLETE     /* Virtual insns have zero size.  Overwrite vpc with address of next insn
// OBSOLETE        using the default-insn-bitsize spec.  When executing insns in parallel
// OBSOLETE        we may want to queue the fault and continue execution.  */
// OBSOLETE     vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE     vpc = sim_engine_invalid_insn (current_cpu, pc, vpc);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_X_AFTER) : /* --after-- */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.fmt_empty.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 0);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE #if WITH_SCACHE_PBB_FR30BF
// OBSOLETE     fr30bf_pbb_after (current_cpu, sem_arg);
// OBSOLETE #endif
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_X_BEFORE) : /* --before-- */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.fmt_empty.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 0);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE #if WITH_SCACHE_PBB_FR30BF
// OBSOLETE     fr30bf_pbb_before (current_cpu, sem_arg);
// OBSOLETE #endif
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_X_CTI_CHAIN) : /* --cti-chain-- */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.fmt_empty.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 0);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE #if WITH_SCACHE_PBB_FR30BF
// OBSOLETE #ifdef DEFINE_SWITCH
// OBSOLETE     vpc = fr30bf_pbb_cti_chain (current_cpu, sem_arg,
// OBSOLETE 			       pbb_br_type, pbb_br_npc);
// OBSOLETE     BREAK (sem);
// OBSOLETE #else
// OBSOLETE     /* FIXME: Allow provision of explicit ifmt spec in insn spec.  */
// OBSOLETE     vpc = fr30bf_pbb_cti_chain (current_cpu, sem_arg,
// OBSOLETE 			       CPU_PBB_BR_TYPE (current_cpu),
// OBSOLETE 			       CPU_PBB_BR_NPC (current_cpu));
// OBSOLETE #endif
// OBSOLETE #endif
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_X_CHAIN) : /* --chain-- */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.fmt_empty.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 0);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE #if WITH_SCACHE_PBB_FR30BF
// OBSOLETE     vpc = fr30bf_pbb_chain (current_cpu, sem_arg);
// OBSOLETE #ifdef DEFINE_SWITCH
// OBSOLETE     BREAK (sem);
// OBSOLETE #endif
// OBSOLETE #endif
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_X_BEGIN) : /* --begin-- */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.fmt_empty.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 0);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE #if WITH_SCACHE_PBB_FR30BF
// OBSOLETE #if defined DEFINE_SWITCH || defined FAST_P
// OBSOLETE     /* In the switch case FAST_P is a constant, allowing several optimizations
// OBSOLETE        in any called inline functions.  */
// OBSOLETE     vpc = fr30bf_pbb_begin (current_cpu, FAST_P);
// OBSOLETE #else
// OBSOLETE #if 0 /* cgen engine can't handle dynamic fast/full switching yet.  */
// OBSOLETE     vpc = fr30bf_pbb_begin (current_cpu, STATE_RUN_FAST_P (CPU_STATE (current_cpu)));
// OBSOLETE #else
// OBSOLETE     vpc = fr30bf_pbb_begin (current_cpu, 0);
// OBSOLETE #endif
// OBSOLETE #endif
// OBSOLETE #endif
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_ADD) : /* add $Rj,$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = ADDOFSI (* FLD (i_Ri), * FLD (i_Rj), 0);
// OBSOLETE     CPU (h_vbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "vbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = ADDCFSI (* FLD (i_Ri), * FLD (i_Rj), 0);
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (* FLD (i_Ri), * FLD (i_Rj));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = EQSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_ADDI) : /* add $u4,$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_addi.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = ADDOFSI (* FLD (i_Ri), FLD (f_u4), 0);
// OBSOLETE     CPU (h_vbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "vbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = ADDCFSI (* FLD (i_Ri), FLD (f_u4), 0);
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (* FLD (i_Ri), FLD (f_u4));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = EQSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_ADD2) : /* add2 $m4,$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add2.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = ADDOFSI (* FLD (i_Ri), FLD (f_m4), 0);
// OBSOLETE     CPU (h_vbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "vbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = ADDCFSI (* FLD (i_Ri), FLD (f_m4), 0);
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (* FLD (i_Ri), FLD (f_m4));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = EQSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_ADDC) : /* addc $Rj,$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   SI tmp_tmp;
// OBSOLETE   tmp_tmp = ADDCSI (* FLD (i_Ri), * FLD (i_Rj), CPU (h_cbit));
// OBSOLETE   {
// OBSOLETE     BI opval = ADDOFSI (* FLD (i_Ri), * FLD (i_Rj), CPU (h_cbit));
// OBSOLETE     CPU (h_vbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "vbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = ADDCFSI (* FLD (i_Ri), * FLD (i_Rj), CPU (h_cbit));
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = tmp_tmp;
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = EQSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_ADDN) : /* addn $Rj,$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (* FLD (i_Ri), * FLD (i_Rj));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_ADDNI) : /* addn $u4,$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_addi.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (* FLD (i_Ri), FLD (f_u4));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_ADDN2) : /* addn2 $m4,$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add2.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (* FLD (i_Ri), FLD (f_m4));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_SUB) : /* sub $Rj,$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = SUBOFSI (* FLD (i_Ri), * FLD (i_Rj), 0);
// OBSOLETE     CPU (h_vbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "vbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = SUBCFSI (* FLD (i_Ri), * FLD (i_Rj), 0);
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = SUBSI (* FLD (i_Ri), * FLD (i_Rj));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = EQSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_SUBC) : /* subc $Rj,$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   SI tmp_tmp;
// OBSOLETE   tmp_tmp = SUBCSI (* FLD (i_Ri), * FLD (i_Rj), CPU (h_cbit));
// OBSOLETE   {
// OBSOLETE     BI opval = SUBOFSI (* FLD (i_Ri), * FLD (i_Rj), CPU (h_cbit));
// OBSOLETE     CPU (h_vbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "vbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = SUBCFSI (* FLD (i_Ri), * FLD (i_Rj), CPU (h_cbit));
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = tmp_tmp;
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = EQSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_SUBN) : /* subn $Rj,$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = SUBSI (* FLD (i_Ri), * FLD (i_Rj));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_CMP) : /* cmp $Rj,$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   SI tmp_tmp1;
// OBSOLETE   {
// OBSOLETE     BI opval = SUBOFSI (* FLD (i_Ri), * FLD (i_Rj), 0);
// OBSOLETE     CPU (h_vbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "vbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = SUBCFSI (* FLD (i_Ri), * FLD (i_Rj), 0);
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   tmp_tmp1 = SUBSI (* FLD (i_Ri), * FLD (i_Rj));
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = EQSI (tmp_tmp1, 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (tmp_tmp1, 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_CMPI) : /* cmp $u4,$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_addi.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   SI tmp_tmp1;
// OBSOLETE   {
// OBSOLETE     BI opval = SUBOFSI (* FLD (i_Ri), FLD (f_u4), 0);
// OBSOLETE     CPU (h_vbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "vbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = SUBCFSI (* FLD (i_Ri), FLD (f_u4), 0);
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   tmp_tmp1 = SUBSI (* FLD (i_Ri), FLD (f_u4));
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = EQSI (tmp_tmp1, 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (tmp_tmp1, 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_CMP2) : /* cmp2 $m4,$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add2.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   SI tmp_tmp1;
// OBSOLETE   {
// OBSOLETE     BI opval = SUBOFSI (* FLD (i_Ri), FLD (f_m4), 0);
// OBSOLETE     CPU (h_vbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "vbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = SUBCFSI (* FLD (i_Ri), FLD (f_m4), 0);
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   tmp_tmp1 = SUBSI (* FLD (i_Ri), FLD (f_m4));
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = EQSI (tmp_tmp1, 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (tmp_tmp1, 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_AND) : /* and $Rj,$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = ANDSI (* FLD (i_Ri), * FLD (i_Rj));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = EQSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_OR) : /* or $Rj,$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = ORSI (* FLD (i_Ri), * FLD (i_Rj));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = EQSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_EOR) : /* eor $Rj,$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = XORSI (* FLD (i_Ri), * FLD (i_Rj));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = EQSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_ANDM) : /* and $Rj,@@$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   SI tmp_tmp;
// OBSOLETE   tmp_tmp = ANDSI (GETMEMSI (current_cpu, pc, * FLD (i_Ri)), * FLD (i_Rj));
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = EQSI (tmp_tmp, 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (tmp_tmp, 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE   {
// OBSOLETE     SI opval = tmp_tmp;
// OBSOLETE     SETMEMSI (current_cpu, pc, * FLD (i_Ri), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_ANDH) : /* andh $Rj,@@$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   HI tmp_tmp;
// OBSOLETE   tmp_tmp = ANDHI (GETMEMHI (current_cpu, pc, * FLD (i_Ri)), * FLD (i_Rj));
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = EQHI (tmp_tmp, 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = LTHI (tmp_tmp, 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE   {
// OBSOLETE     HI opval = tmp_tmp;
// OBSOLETE     SETMEMHI (current_cpu, pc, * FLD (i_Ri), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_ANDB) : /* andb $Rj,@@$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   QI tmp_tmp;
// OBSOLETE   tmp_tmp = ANDQI (GETMEMQI (current_cpu, pc, * FLD (i_Ri)), * FLD (i_Rj));
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = EQQI (tmp_tmp, 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = LTQI (tmp_tmp, 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE   {
// OBSOLETE     QI opval = tmp_tmp;
// OBSOLETE     SETMEMQI (current_cpu, pc, * FLD (i_Ri), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_ORM) : /* or $Rj,@@$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   SI tmp_tmp;
// OBSOLETE   tmp_tmp = ORSI (GETMEMSI (current_cpu, pc, * FLD (i_Ri)), * FLD (i_Rj));
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = EQSI (tmp_tmp, 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (tmp_tmp, 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE   {
// OBSOLETE     SI opval = tmp_tmp;
// OBSOLETE     SETMEMSI (current_cpu, pc, * FLD (i_Ri), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_ORH) : /* orh $Rj,@@$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   HI tmp_tmp;
// OBSOLETE   tmp_tmp = ORHI (GETMEMHI (current_cpu, pc, * FLD (i_Ri)), * FLD (i_Rj));
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = EQHI (tmp_tmp, 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = LTHI (tmp_tmp, 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE   {
// OBSOLETE     HI opval = tmp_tmp;
// OBSOLETE     SETMEMHI (current_cpu, pc, * FLD (i_Ri), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_ORB) : /* orb $Rj,@@$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   QI tmp_tmp;
// OBSOLETE   tmp_tmp = ORQI (GETMEMQI (current_cpu, pc, * FLD (i_Ri)), * FLD (i_Rj));
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = EQQI (tmp_tmp, 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = LTQI (tmp_tmp, 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE   {
// OBSOLETE     QI opval = tmp_tmp;
// OBSOLETE     SETMEMQI (current_cpu, pc, * FLD (i_Ri), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_EORM) : /* eor $Rj,@@$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   SI tmp_tmp;
// OBSOLETE   tmp_tmp = XORSI (GETMEMSI (current_cpu, pc, * FLD (i_Ri)), * FLD (i_Rj));
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = EQSI (tmp_tmp, 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (tmp_tmp, 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE   {
// OBSOLETE     SI opval = tmp_tmp;
// OBSOLETE     SETMEMSI (current_cpu, pc, * FLD (i_Ri), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_EORH) : /* eorh $Rj,@@$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   HI tmp_tmp;
// OBSOLETE   tmp_tmp = XORHI (GETMEMHI (current_cpu, pc, * FLD (i_Ri)), * FLD (i_Rj));
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = EQHI (tmp_tmp, 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = LTHI (tmp_tmp, 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE   {
// OBSOLETE     HI opval = tmp_tmp;
// OBSOLETE     SETMEMHI (current_cpu, pc, * FLD (i_Ri), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_EORB) : /* eorb $Rj,@@$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   QI tmp_tmp;
// OBSOLETE   tmp_tmp = XORQI (GETMEMQI (current_cpu, pc, * FLD (i_Ri)), * FLD (i_Rj));
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = EQQI (tmp_tmp, 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = LTQI (tmp_tmp, 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE   {
// OBSOLETE     QI opval = tmp_tmp;
// OBSOLETE     SETMEMQI (current_cpu, pc, * FLD (i_Ri), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_BANDL) : /* bandl $u4,@@$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_addi.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     QI opval = ANDQI (ORQI (FLD (f_u4), 240), GETMEMQI (current_cpu, pc, * FLD (i_Ri)));
// OBSOLETE     SETMEMQI (current_cpu, pc, * FLD (i_Ri), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_BORL) : /* borl $u4,@@$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_addi.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     QI opval = ORQI (FLD (f_u4), GETMEMQI (current_cpu, pc, * FLD (i_Ri)));
// OBSOLETE     SETMEMQI (current_cpu, pc, * FLD (i_Ri), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_BEORL) : /* beorl $u4,@@$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_addi.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     QI opval = XORQI (FLD (f_u4), GETMEMQI (current_cpu, pc, * FLD (i_Ri)));
// OBSOLETE     SETMEMQI (current_cpu, pc, * FLD (i_Ri), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_BANDH) : /* bandh $u4,@@$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_addi.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     QI opval = ANDQI (ORQI (SLLQI (FLD (f_u4), 4), 15), GETMEMQI (current_cpu, pc, * FLD (i_Ri)));
// OBSOLETE     SETMEMQI (current_cpu, pc, * FLD (i_Ri), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_BORH) : /* borh $u4,@@$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_addi.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     QI opval = ORQI (SLLQI (FLD (f_u4), 4), GETMEMQI (current_cpu, pc, * FLD (i_Ri)));
// OBSOLETE     SETMEMQI (current_cpu, pc, * FLD (i_Ri), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_BEORH) : /* beorh $u4,@@$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_addi.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     QI opval = XORQI (SLLQI (FLD (f_u4), 4), GETMEMQI (current_cpu, pc, * FLD (i_Ri)));
// OBSOLETE     SETMEMQI (current_cpu, pc, * FLD (i_Ri), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_BTSTL) : /* btstl $u4,@@$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_addi.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   QI tmp_tmp;
// OBSOLETE   tmp_tmp = ANDQI (FLD (f_u4), GETMEMQI (current_cpu, pc, * FLD (i_Ri)));
// OBSOLETE   {
// OBSOLETE     BI opval = EQQI (tmp_tmp, 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = 0;
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_BTSTH) : /* btsth $u4,@@$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_addi.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   QI tmp_tmp;
// OBSOLETE   tmp_tmp = ANDQI (SLLQI (FLD (f_u4), 4), GETMEMQI (current_cpu, pc, * FLD (i_Ri)));
// OBSOLETE   {
// OBSOLETE     BI opval = EQQI (tmp_tmp, 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = LTQI (tmp_tmp, 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_MUL) : /* mul $Rj,$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   DI tmp_tmp;
// OBSOLETE   tmp_tmp = MULDI (EXTSIDI (* FLD (i_Rj)), EXTSIDI (* FLD (i_Ri)));
// OBSOLETE   {
// OBSOLETE     SI opval = TRUNCDISI (tmp_tmp);
// OBSOLETE     SET_H_DR (((UINT) 5), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = TRUNCDISI (SRLDI (tmp_tmp, 32));
// OBSOLETE     SET_H_DR (((UINT) 4), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (GET_H_DR (((UINT) 5)), 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = EQDI (tmp_tmp, MAKEDI (0, 0));
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = ORIF (GTDI (tmp_tmp, MAKEDI (0, 2147483647)), LTDI (tmp_tmp, NEGDI (MAKEDI (0, 0x80000000))));
// OBSOLETE     CPU (h_vbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "vbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_MULU) : /* mulu $Rj,$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   DI tmp_tmp;
// OBSOLETE   tmp_tmp = MULDI (ZEXTSIDI (* FLD (i_Rj)), ZEXTSIDI (* FLD (i_Ri)));
// OBSOLETE   {
// OBSOLETE     SI opval = TRUNCDISI (tmp_tmp);
// OBSOLETE     SET_H_DR (((UINT) 5), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = TRUNCDISI (SRLDI (tmp_tmp, 32));
// OBSOLETE     SET_H_DR (((UINT) 4), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (GET_H_DR (((UINT) 4)), 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = EQSI (GET_H_DR (((UINT) 5)), 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = NESI (GET_H_DR (((UINT) 4)), 0);
// OBSOLETE     CPU (h_vbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "vbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_MULH) : /* mulh $Rj,$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = MULHI (TRUNCSIHI (* FLD (i_Rj)), TRUNCSIHI (* FLD (i_Ri)));
// OBSOLETE     SET_H_DR (((UINT) 5), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (GET_H_DR (((UINT) 5)), 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = GESI (GET_H_DR (((UINT) 5)), 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_MULUH) : /* muluh $Rj,$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = MULSI (ANDSI (* FLD (i_Rj), 65535), ANDSI (* FLD (i_Ri), 65535));
// OBSOLETE     SET_H_DR (((UINT) 5), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (GET_H_DR (((UINT) 5)), 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = GESI (GET_H_DR (((UINT) 5)), 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_DIV0S) : /* div0s $Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_mov2dr.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (GET_H_DR (((UINT) 5)), 0);
// OBSOLETE     CPU (h_d0bit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "d0bit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = XORBI (CPU (h_d0bit), LTSI (* FLD (i_Ri), 0));
// OBSOLETE     CPU (h_d1bit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "d1bit", 'x', opval);
// OBSOLETE   }
// OBSOLETE if (NEBI (CPU (h_d0bit), 0)) {
// OBSOLETE   {
// OBSOLETE     SI opval = 0xffffffff;
// OBSOLETE     SET_H_DR (((UINT) 4), opval);
// OBSOLETE     written |= (1 << 5);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE } else {
// OBSOLETE   {
// OBSOLETE     SI opval = 0;
// OBSOLETE     SET_H_DR (((UINT) 4), opval);
// OBSOLETE     written |= (1 << 5);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_DIV0U) : /* div0u $Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.fmt_empty.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = 0;
// OBSOLETE     CPU (h_d0bit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "d0bit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = 0;
// OBSOLETE     CPU (h_d1bit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "d1bit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = 0;
// OBSOLETE     SET_H_DR (((UINT) 4), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_DIV1) : /* div1 $Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_mov2dr.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   SI tmp_tmp;
// OBSOLETE   {
// OBSOLETE     SI opval = SLLSI (GET_H_DR (((UINT) 4)), 1);
// OBSOLETE     SET_H_DR (((UINT) 4), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE if (LTSI (GET_H_DR (((UINT) 5)), 0)) {
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (GET_H_DR (((UINT) 4)), 1);
// OBSOLETE     SET_H_DR (((UINT) 4), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE   {
// OBSOLETE     SI opval = SLLSI (GET_H_DR (((UINT) 5)), 1);
// OBSOLETE     SET_H_DR (((UINT) 5), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE if (EQBI (CPU (h_d1bit), 1)) {
// OBSOLETE {
// OBSOLETE   tmp_tmp = ADDSI (GET_H_DR (((UINT) 4)), * FLD (i_Ri));
// OBSOLETE   {
// OBSOLETE     BI opval = ADDCFSI (GET_H_DR (((UINT) 4)), * FLD (i_Ri), 0);
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     written |= (1 << 6);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE } else {
// OBSOLETE {
// OBSOLETE   tmp_tmp = SUBSI (GET_H_DR (((UINT) 4)), * FLD (i_Ri));
// OBSOLETE   {
// OBSOLETE     BI opval = SUBCFSI (GET_H_DR (((UINT) 4)), * FLD (i_Ri), 0);
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     written |= (1 << 6);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (NOTBI (XORBI (XORBI (CPU (h_d0bit), CPU (h_d1bit)), CPU (h_cbit)))) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = tmp_tmp;
// OBSOLETE     SET_H_DR (((UINT) 4), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ORSI (GET_H_DR (((UINT) 5)), 1);
// OBSOLETE     SET_H_DR (((UINT) 5), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE   {
// OBSOLETE     BI opval = EQSI (GET_H_DR (((UINT) 4)), 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_DIV2) : /* div2 $Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_mov2dr.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   SI tmp_tmp;
// OBSOLETE if (EQBI (CPU (h_d1bit), 1)) {
// OBSOLETE {
// OBSOLETE   tmp_tmp = ADDSI (GET_H_DR (((UINT) 4)), * FLD (i_Ri));
// OBSOLETE   {
// OBSOLETE     BI opval = ADDCFSI (GET_H_DR (((UINT) 4)), * FLD (i_Ri), 0);
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE } else {
// OBSOLETE {
// OBSOLETE   tmp_tmp = SUBSI (GET_H_DR (((UINT) 4)), * FLD (i_Ri));
// OBSOLETE   {
// OBSOLETE     BI opval = SUBCFSI (GET_H_DR (((UINT) 4)), * FLD (i_Ri), 0);
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (EQSI (tmp_tmp, 0)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = 1;
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     written |= (1 << 5);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = 0;
// OBSOLETE     SET_H_DR (((UINT) 4), opval);
// OBSOLETE     written |= (1 << 4);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE } else {
// OBSOLETE   {
// OBSOLETE     BI opval = 0;
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     written |= (1 << 5);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_DIV3) : /* div3 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.fmt_empty.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE if (EQBI (CPU (h_zbit), 1)) {
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (GET_H_DR (((UINT) 5)), 1);
// OBSOLETE     SET_H_DR (((UINT) 5), opval);
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_DIV4S) : /* div4s */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.fmt_empty.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE if (EQBI (CPU (h_d1bit), 1)) {
// OBSOLETE   {
// OBSOLETE     SI opval = NEGSI (GET_H_DR (((UINT) 5)));
// OBSOLETE     SET_H_DR (((UINT) 5), opval);
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_LSL) : /* lsl $Rj,$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   SI tmp_shift;
// OBSOLETE   tmp_shift = ANDSI (* FLD (i_Rj), 31);
// OBSOLETE if (NESI (tmp_shift, 0)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = NESI (ANDSI (* FLD (i_Ri), SLLSI (1, SUBSI (32, tmp_shift))), 0);
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = SLLSI (* FLD (i_Ri), tmp_shift);
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE } else {
// OBSOLETE   {
// OBSOLETE     BI opval = 0;
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = EQSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_LSLI) : /* lsl $u4,$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_addi.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   SI tmp_shift;
// OBSOLETE   tmp_shift = FLD (f_u4);
// OBSOLETE if (NESI (tmp_shift, 0)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = NESI (ANDSI (* FLD (i_Ri), SLLSI (1, SUBSI (32, tmp_shift))), 0);
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = SLLSI (* FLD (i_Ri), tmp_shift);
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE } else {
// OBSOLETE   {
// OBSOLETE     BI opval = 0;
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = EQSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_LSL2) : /* lsl2 $u4,$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_addi.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   SI tmp_shift;
// OBSOLETE   tmp_shift = ADDSI (FLD (f_u4), 16);
// OBSOLETE if (NESI (tmp_shift, 0)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = NESI (ANDSI (* FLD (i_Ri), SLLSI (1, SUBSI (32, tmp_shift))), 0);
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = SLLSI (* FLD (i_Ri), tmp_shift);
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE } else {
// OBSOLETE   {
// OBSOLETE     BI opval = 0;
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = EQSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_LSR) : /* lsr $Rj,$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   SI tmp_shift;
// OBSOLETE   tmp_shift = ANDSI (* FLD (i_Rj), 31);
// OBSOLETE if (NESI (tmp_shift, 0)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = NESI (ANDSI (* FLD (i_Ri), SLLSI (1, SUBSI (tmp_shift, 1))), 0);
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = SRLSI (* FLD (i_Ri), tmp_shift);
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE } else {
// OBSOLETE   {
// OBSOLETE     BI opval = 0;
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = EQSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_LSRI) : /* lsr $u4,$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_addi.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   SI tmp_shift;
// OBSOLETE   tmp_shift = FLD (f_u4);
// OBSOLETE if (NESI (tmp_shift, 0)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = NESI (ANDSI (* FLD (i_Ri), SLLSI (1, SUBSI (tmp_shift, 1))), 0);
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = SRLSI (* FLD (i_Ri), tmp_shift);
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE } else {
// OBSOLETE   {
// OBSOLETE     BI opval = 0;
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = EQSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_LSR2) : /* lsr2 $u4,$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_addi.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   SI tmp_shift;
// OBSOLETE   tmp_shift = ADDSI (FLD (f_u4), 16);
// OBSOLETE if (NESI (tmp_shift, 0)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = NESI (ANDSI (* FLD (i_Ri), SLLSI (1, SUBSI (tmp_shift, 1))), 0);
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = SRLSI (* FLD (i_Ri), tmp_shift);
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE } else {
// OBSOLETE   {
// OBSOLETE     BI opval = 0;
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = EQSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_ASR) : /* asr $Rj,$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   SI tmp_shift;
// OBSOLETE   tmp_shift = ANDSI (* FLD (i_Rj), 31);
// OBSOLETE if (NESI (tmp_shift, 0)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = NESI (ANDSI (* FLD (i_Ri), SLLSI (1, SUBSI (tmp_shift, 1))), 0);
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = SRASI (* FLD (i_Ri), tmp_shift);
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE } else {
// OBSOLETE   {
// OBSOLETE     BI opval = 0;
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = EQSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_ASRI) : /* asr $u4,$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_addi.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   SI tmp_shift;
// OBSOLETE   tmp_shift = FLD (f_u4);
// OBSOLETE if (NESI (tmp_shift, 0)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = NESI (ANDSI (* FLD (i_Ri), SLLSI (1, SUBSI (tmp_shift, 1))), 0);
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = SRASI (* FLD (i_Ri), tmp_shift);
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE } else {
// OBSOLETE   {
// OBSOLETE     BI opval = 0;
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = EQSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_ASR2) : /* asr2 $u4,$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_addi.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   SI tmp_shift;
// OBSOLETE   tmp_shift = ADDSI (FLD (f_u4), 16);
// OBSOLETE if (NESI (tmp_shift, 0)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = NESI (ANDSI (* FLD (i_Ri), SLLSI (1, SUBSI (tmp_shift, 1))), 0);
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = SRASI (* FLD (i_Ri), tmp_shift);
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE } else {
// OBSOLETE   {
// OBSOLETE     BI opval = 0;
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = EQSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_LDI8) : /* ldi:8 $i8,$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldi8.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = FLD (f_i8);
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_LDI20) : /* ldi:20 $i20,$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldi20.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 4);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = FLD (f_i20);
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_LDI32) : /* ldi:32 $i32,$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldi32.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 6);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = FLD (f_i32);
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_LD) : /* ld @@$Rj,$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldr13.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, * FLD (i_Rj));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_LDUH) : /* lduh @@$Rj,$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldr13.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMUHI (current_cpu, pc, * FLD (i_Rj));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_LDUB) : /* ldub @@$Rj,$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldr13.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMUQI (current_cpu, pc, * FLD (i_Rj));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_LDR13) : /* ld @@($R13,$Rj),$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldr13.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, ADDSI (* FLD (i_Rj), CPU (h_gr[((UINT) 13)])));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_LDR13UH) : /* lduh @@($R13,$Rj),$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldr13.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMUHI (current_cpu, pc, ADDSI (* FLD (i_Rj), CPU (h_gr[((UINT) 13)])));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_LDR13UB) : /* ldub @@($R13,$Rj),$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldr13.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMUQI (current_cpu, pc, ADDSI (* FLD (i_Rj), CPU (h_gr[((UINT) 13)])));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_LDR14) : /* ld @@($R14,$disp10),$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldr14.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, ADDSI (FLD (f_disp10), CPU (h_gr[((UINT) 14)])));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_LDR14UH) : /* lduh @@($R14,$disp9),$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldr14uh.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMUHI (current_cpu, pc, ADDSI (FLD (f_disp9), CPU (h_gr[((UINT) 14)])));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_LDR14UB) : /* ldub @@($R14,$disp8),$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldr14ub.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMUQI (current_cpu, pc, ADDSI (FLD (f_disp8), CPU (h_gr[((UINT) 14)])));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_LDR15) : /* ld @@($R15,$udisp6),$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldr15.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, ADDSI (FLD (f_udisp6), CPU (h_gr[((UINT) 15)])));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_LDR15GR) : /* ld @@$R15+,$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldr15gr.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE if (NESI (FLD (f_Ri), 15)) {
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 4);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_LDR15DR) : /* ld @@$R15+,$Rs2 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldr15dr.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   SI tmp_tmp;
// OBSOLETE   tmp_tmp = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = tmp_tmp;
// OBSOLETE     SET_H_DR (FLD (f_Rs2), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_LDR15PS) : /* ld @@$R15+,$ps */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_addsp.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     USI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
// OBSOLETE     SET_H_PS (opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "ps", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_ST) : /* st $Ri,@@$Rj */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = * FLD (i_Ri);
// OBSOLETE     SETMEMSI (current_cpu, pc, * FLD (i_Rj), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_STH) : /* sth $Ri,@@$Rj */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     HI opval = * FLD (i_Ri);
// OBSOLETE     SETMEMHI (current_cpu, pc, * FLD (i_Rj), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_STB) : /* stb $Ri,@@$Rj */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     QI opval = * FLD (i_Ri);
// OBSOLETE     SETMEMQI (current_cpu, pc, * FLD (i_Rj), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_STR13) : /* st $Ri,@@($R13,$Rj) */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = * FLD (i_Ri);
// OBSOLETE     SETMEMSI (current_cpu, pc, ADDSI (* FLD (i_Rj), CPU (h_gr[((UINT) 13)])), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_STR13H) : /* sth $Ri,@@($R13,$Rj) */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     HI opval = * FLD (i_Ri);
// OBSOLETE     SETMEMHI (current_cpu, pc, ADDSI (* FLD (i_Rj), CPU (h_gr[((UINT) 13)])), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_STR13B) : /* stb $Ri,@@($R13,$Rj) */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     QI opval = * FLD (i_Ri);
// OBSOLETE     SETMEMQI (current_cpu, pc, ADDSI (* FLD (i_Rj), CPU (h_gr[((UINT) 13)])), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_STR14) : /* st $Ri,@@($R14,$disp10) */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str14.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = * FLD (i_Ri);
// OBSOLETE     SETMEMSI (current_cpu, pc, ADDSI (FLD (f_disp10), CPU (h_gr[((UINT) 14)])), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_STR14H) : /* sth $Ri,@@($R14,$disp9) */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str14h.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     HI opval = * FLD (i_Ri);
// OBSOLETE     SETMEMHI (current_cpu, pc, ADDSI (FLD (f_disp9), CPU (h_gr[((UINT) 14)])), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_STR14B) : /* stb $Ri,@@($R14,$disp8) */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str14b.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     QI opval = * FLD (i_Ri);
// OBSOLETE     SETMEMQI (current_cpu, pc, ADDSI (FLD (f_disp8), CPU (h_gr[((UINT) 14)])), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_STR15) : /* st $Ri,@@($R15,$udisp6) */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str15.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = * FLD (i_Ri);
// OBSOLETE     SETMEMSI (current_cpu, pc, ADDSI (CPU (h_gr[((UINT) 15)]), FLD (f_udisp6)), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_STR15GR) : /* st $Ri,@@-$R15 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str15gr.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   SI tmp_tmp;
// OBSOLETE   tmp_tmp = * FLD (i_Ri);
// OBSOLETE   {
// OBSOLETE     SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = tmp_tmp;
// OBSOLETE     SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_STR15DR) : /* st $Rs2,@@-$R15 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldr15dr.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   SI tmp_tmp;
// OBSOLETE   tmp_tmp = GET_H_DR (FLD (f_Rs2));
// OBSOLETE   {
// OBSOLETE     SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = tmp_tmp;
// OBSOLETE     SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_STR15PS) : /* st $ps,@@-$R15 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_addsp.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = GET_H_PS ();
// OBSOLETE     SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_MOV) : /* mov $Rj,$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldr13.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = * FLD (i_Rj);
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_MOVDR) : /* mov $Rs1,$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_movdr.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = GET_H_DR (FLD (f_Rs1));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_MOVPS) : /* mov $ps,$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_movdr.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = GET_H_PS ();
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_MOV2DR) : /* mov $Ri,$Rs1 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_mov2dr.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = * FLD (i_Ri);
// OBSOLETE     SET_H_DR (FLD (f_Rs1), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_MOV2PS) : /* mov $Ri,$ps */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_mov2dr.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     USI opval = * FLD (i_Ri);
// OBSOLETE     SET_H_PS (opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "ps", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_JMP) : /* jmp @@$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_mov2dr.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     USI opval = * FLD (i_Ri);
// OBSOLETE     SEM_BRANCH_VIA_ADDR (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_JMPD) : /* jmp:d @@$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_mov2dr.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     USI opval = * FLD (i_Ri);
// OBSOLETE     SEM_BRANCH_VIA_ADDR (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_CALLR) : /* call @@$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_mov2dr.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (pc, 2);
// OBSOLETE     SET_H_DR (((UINT) 1), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     USI opval = * FLD (i_Ri);
// OBSOLETE     SEM_BRANCH_VIA_ADDR (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_CALLRD) : /* call:d @@$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_mov2dr.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (pc, 4);
// OBSOLETE     SET_H_DR (((UINT) 1), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     USI opval = * FLD (i_Ri);
// OBSOLETE     SEM_BRANCH_VIA_ADDR (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_CALL) : /* call $label12 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_call.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (pc, 2);
// OBSOLETE     SET_H_DR (((UINT) 1), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label12);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_CALLD) : /* call:d $label12 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_call.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (pc, 4);
// OBSOLETE     SET_H_DR (((UINT) 1), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label12);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_RET) : /* ret */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.fmt_empty.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     USI opval = GET_H_DR (((UINT) 1));
// OBSOLETE     SEM_BRANCH_VIA_ADDR (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_RET_D) : /* ret:d */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.fmt_empty.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     USI opval = GET_H_DR (((UINT) 1));
// OBSOLETE     SEM_BRANCH_VIA_ADDR (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_INT) : /* int $u8 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_int.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE ; /*clobber*/
// OBSOLETE ; /*clobber*/
// OBSOLETE ; /*clobber*/
// OBSOLETE   {
// OBSOLETE     SI opval = fr30_int (current_cpu, pc, FLD (f_u8));
// OBSOLETE     SEM_BRANCH_VIA_ADDR (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_INTE) : /* inte */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.fmt_empty.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE ; /*clobber*/
// OBSOLETE ; /*clobber*/
// OBSOLETE ; /*clobber*/
// OBSOLETE   {
// OBSOLETE     SI opval = fr30_inte (current_cpu, pc);
// OBSOLETE     SEM_BRANCH_VIA_ADDR (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_RETI) : /* reti */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.fmt_empty.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE if (EQBI (GET_H_SBIT (), 0)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, GET_H_DR (((UINT) 2)));
// OBSOLETE     SEM_BRANCH_VIA_ADDR (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 7);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (GET_H_DR (((UINT) 2)), 4);
// OBSOLETE     SET_H_DR (((UINT) 2), opval);
// OBSOLETE     written |= (1 << 5);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, GET_H_DR (((UINT) 2)));
// OBSOLETE     SET_H_PS (opval);
// OBSOLETE     written |= (1 << 8);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "ps", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (GET_H_DR (((UINT) 2)), 4);
// OBSOLETE     SET_H_DR (((UINT) 2), opval);
// OBSOLETE     written |= (1 << 5);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE } else {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, GET_H_DR (((UINT) 3)));
// OBSOLETE     SEM_BRANCH_VIA_ADDR (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 7);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (GET_H_DR (((UINT) 3)), 4);
// OBSOLETE     SET_H_DR (((UINT) 3), opval);
// OBSOLETE     written |= (1 << 6);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, GET_H_DR (((UINT) 3)));
// OBSOLETE     SET_H_PS (opval);
// OBSOLETE     written |= (1 << 8);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "ps", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (GET_H_DR (((UINT) 3)), 4);
// OBSOLETE     SET_H_DR (((UINT) 3), opval);
// OBSOLETE     written |= (1 << 6);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_BRAD) : /* bra:d $label9 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_BRA) : /* bra $label9 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_BNOD) : /* bno:d $label9 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.fmt_empty.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE ((void) 0); /*nop*/
// OBSOLETE }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_BNO) : /* bno $label9 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.fmt_empty.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE ((void) 0); /*nop*/
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_BEQD) : /* beq:d $label9 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE if (CPU (h_zbit)) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_BEQ) : /* beq $label9 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE if (CPU (h_zbit)) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_BNED) : /* bne:d $label9 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE if (NOTBI (CPU (h_zbit))) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_BNE) : /* bne $label9 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE if (NOTBI (CPU (h_zbit))) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_BCD) : /* bc:d $label9 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE if (CPU (h_cbit)) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_BC) : /* bc $label9 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE if (CPU (h_cbit)) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_BNCD) : /* bnc:d $label9 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE if (NOTBI (CPU (h_cbit))) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_BNC) : /* bnc $label9 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE if (NOTBI (CPU (h_cbit))) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_BND) : /* bn:d $label9 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE if (CPU (h_nbit)) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_BN) : /* bn $label9 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE if (CPU (h_nbit)) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_BPD) : /* bp:d $label9 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE if (NOTBI (CPU (h_nbit))) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_BP) : /* bp $label9 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE if (NOTBI (CPU (h_nbit))) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_BVD) : /* bv:d $label9 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE if (CPU (h_vbit)) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_BV) : /* bv $label9 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE if (CPU (h_vbit)) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_BNVD) : /* bnv:d $label9 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE if (NOTBI (CPU (h_vbit))) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_BNV) : /* bnv $label9 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE if (NOTBI (CPU (h_vbit))) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_BLTD) : /* blt:d $label9 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE if (XORBI (CPU (h_vbit), CPU (h_nbit))) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_BLT) : /* blt $label9 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE if (XORBI (CPU (h_vbit), CPU (h_nbit))) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_BGED) : /* bge:d $label9 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE if (NOTBI (XORBI (CPU (h_vbit), CPU (h_nbit)))) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_BGE) : /* bge $label9 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE if (NOTBI (XORBI (CPU (h_vbit), CPU (h_nbit)))) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_BLED) : /* ble:d $label9 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE if (ORBI (XORBI (CPU (h_vbit), CPU (h_nbit)), CPU (h_zbit))) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 4);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_BLE) : /* ble $label9 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE if (ORBI (XORBI (CPU (h_vbit), CPU (h_nbit)), CPU (h_zbit))) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 4);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_BGTD) : /* bgt:d $label9 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE if (NOTBI (ORBI (XORBI (CPU (h_vbit), CPU (h_nbit)), CPU (h_zbit)))) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 4);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_BGT) : /* bgt $label9 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE if (NOTBI (ORBI (XORBI (CPU (h_vbit), CPU (h_nbit)), CPU (h_zbit)))) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 4);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_BLSD) : /* bls:d $label9 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE if (ORBI (CPU (h_cbit), CPU (h_zbit))) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_BLS) : /* bls $label9 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE if (ORBI (CPU (h_cbit), CPU (h_zbit))) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_BHID) : /* bhi:d $label9 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE if (NOTBI (ORBI (CPU (h_cbit), CPU (h_zbit)))) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_BHI) : /* bhi $label9 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE if (NOTBI (ORBI (CPU (h_cbit), CPU (h_zbit)))) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_DMOVR13) : /* dmov $R13,@@$dir10 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_dmovr13pi.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = CPU (h_gr[((UINT) 13)]);
// OBSOLETE     SETMEMSI (current_cpu, pc, FLD (f_dir10), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_DMOVR13H) : /* dmovh $R13,@@$dir9 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_dmovr13pih.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     HI opval = CPU (h_gr[((UINT) 13)]);
// OBSOLETE     SETMEMHI (current_cpu, pc, FLD (f_dir9), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_DMOVR13B) : /* dmovb $R13,@@$dir8 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_dmovr13pib.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     QI opval = CPU (h_gr[((UINT) 13)]);
// OBSOLETE     SETMEMQI (current_cpu, pc, FLD (f_dir8), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_DMOVR13PI) : /* dmov @@$R13+,@@$dir10 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_dmovr13pi.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 13)]));
// OBSOLETE     SETMEMSI (current_cpu, pc, FLD (f_dir10), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 13)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 13)]) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_DMOVR13PIH) : /* dmovh @@$R13+,@@$dir9 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_dmovr13pih.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     HI opval = GETMEMHI (current_cpu, pc, CPU (h_gr[((UINT) 13)]));
// OBSOLETE     SETMEMHI (current_cpu, pc, FLD (f_dir9), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 13)]), 2);
// OBSOLETE     CPU (h_gr[((UINT) 13)]) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_DMOVR13PIB) : /* dmovb @@$R13+,@@$dir8 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_dmovr13pib.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     QI opval = GETMEMQI (current_cpu, pc, CPU (h_gr[((UINT) 13)]));
// OBSOLETE     SETMEMQI (current_cpu, pc, FLD (f_dir8), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 13)]), 1);
// OBSOLETE     CPU (h_gr[((UINT) 13)]) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_DMOVR15PI) : /* dmov @@$R15+,@@$dir10 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_dmovr15pi.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
// OBSOLETE     SETMEMSI (current_cpu, pc, FLD (f_dir10), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_DMOV2R13) : /* dmov @@$dir10,$R13 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_dmovr13pi.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, FLD (f_dir10));
// OBSOLETE     CPU (h_gr[((UINT) 13)]) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_DMOV2R13H) : /* dmovh @@$dir9,$R13 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_dmovr13pih.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMHI (current_cpu, pc, FLD (f_dir9));
// OBSOLETE     CPU (h_gr[((UINT) 13)]) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_DMOV2R13B) : /* dmovb @@$dir8,$R13 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_dmovr13pib.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMQI (current_cpu, pc, FLD (f_dir8));
// OBSOLETE     CPU (h_gr[((UINT) 13)]) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_DMOV2R13PI) : /* dmov @@$dir10,@@$R13+ */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_dmovr13pi.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, FLD (f_dir10));
// OBSOLETE     SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 13)]), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 13)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 13)]) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_DMOV2R13PIH) : /* dmovh @@$dir9,@@$R13+ */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_dmovr13pih.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     HI opval = GETMEMHI (current_cpu, pc, FLD (f_dir9));
// OBSOLETE     SETMEMHI (current_cpu, pc, CPU (h_gr[((UINT) 13)]), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 13)]), 2);
// OBSOLETE     CPU (h_gr[((UINT) 13)]) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_DMOV2R13PIB) : /* dmovb @@$dir8,@@$R13+ */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_dmovr13pib.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     QI opval = GETMEMQI (current_cpu, pc, FLD (f_dir8));
// OBSOLETE     SETMEMQI (current_cpu, pc, CPU (h_gr[((UINT) 13)]), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 13)]), 1);
// OBSOLETE     CPU (h_gr[((UINT) 13)]) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_DMOV2R15PD) : /* dmov @@$dir10,@@-$R15 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_dmovr15pi.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, FLD (f_dir10));
// OBSOLETE     SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_LDRES) : /* ldres @@$Ri+,$u4 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add2.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (* FLD (i_Ri), 4);
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_STRES) : /* stres $u4,@@$Ri+ */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add2.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (* FLD (i_Ri), 4);
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_COPOP) : /* copop $u4c,$ccc,$CRj,$CRi */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.fmt_empty.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 4);
// OBSOLETE 
// OBSOLETE ((void) 0); /*nop*/
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_COPLD) : /* copld $u4c,$ccc,$Rjc,$CRi */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.fmt_empty.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 4);
// OBSOLETE 
// OBSOLETE ((void) 0); /*nop*/
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_COPST) : /* copst $u4c,$ccc,$CRj,$Ric */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.fmt_empty.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 4);
// OBSOLETE 
// OBSOLETE ((void) 0); /*nop*/
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_COPSV) : /* copsv $u4c,$ccc,$CRj,$Ric */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.fmt_empty.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 4);
// OBSOLETE 
// OBSOLETE ((void) 0); /*nop*/
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_NOP) : /* nop */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.fmt_empty.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE ((void) 0); /*nop*/
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_ANDCCR) : /* andccr $u8 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_int.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     UQI opval = ANDQI (GET_H_CCR (), FLD (f_u8));
// OBSOLETE     SET_H_CCR (opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "ccr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_ORCCR) : /* orccr $u8 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_int.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     UQI opval = ORQI (GET_H_CCR (), FLD (f_u8));
// OBSOLETE     SET_H_CCR (opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "ccr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_STILM) : /* stilm $u8 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_int.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     UQI opval = ANDSI (FLD (f_u8), 31);
// OBSOLETE     SET_H_ILM (opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "ilm", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_ADDSP) : /* addsp $s10 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_addsp.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), FLD (f_s10));
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_EXTSB) : /* extsb $Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add2.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = EXTQISI (ANDQI (* FLD (i_Ri), 255));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_EXTUB) : /* extub $Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add2.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = ZEXTQISI (ANDQI (* FLD (i_Ri), 255));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_EXTSH) : /* extsh $Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add2.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = EXTHISI (ANDHI (* FLD (i_Ri), 65535));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_EXTUH) : /* extuh $Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add2.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = ZEXTHISI (ANDHI (* FLD (i_Ri), 65535));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_LDM0) : /* ldm0 ($reglist_low_ld) */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldm0.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE if (ANDSI (FLD (f_reglist_low_ld), 1)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
// OBSOLETE     CPU (h_gr[((UINT) 0)]) = opval;
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 5);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_low_ld), 2)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
// OBSOLETE     CPU (h_gr[((UINT) 1)]) = opval;
// OBSOLETE     written |= (1 << 4);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 5);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_low_ld), 4)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
// OBSOLETE     CPU (h_gr[((UINT) 2)]) = opval;
// OBSOLETE     written |= (1 << 6);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 5);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_low_ld), 8)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
// OBSOLETE     CPU (h_gr[((UINT) 3)]) = opval;
// OBSOLETE     written |= (1 << 7);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 5);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_low_ld), 16)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
// OBSOLETE     CPU (h_gr[((UINT) 4)]) = opval;
// OBSOLETE     written |= (1 << 8);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 5);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_low_ld), 32)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
// OBSOLETE     CPU (h_gr[((UINT) 5)]) = opval;
// OBSOLETE     written |= (1 << 9);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 5);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_low_ld), 64)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
// OBSOLETE     CPU (h_gr[((UINT) 6)]) = opval;
// OBSOLETE     written |= (1 << 10);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 5);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_low_ld), 128)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
// OBSOLETE     CPU (h_gr[((UINT) 7)]) = opval;
// OBSOLETE     written |= (1 << 11);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 5);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_LDM1) : /* ldm1 ($reglist_hi_ld) */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldm1.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE if (ANDSI (FLD (f_reglist_hi_ld), 1)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
// OBSOLETE     CPU (h_gr[((UINT) 8)]) = opval;
// OBSOLETE     written |= (1 << 9);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 8);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_hi_ld), 2)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
// OBSOLETE     CPU (h_gr[((UINT) 9)]) = opval;
// OBSOLETE     written |= (1 << 10);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 8);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_hi_ld), 4)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
// OBSOLETE     CPU (h_gr[((UINT) 10)]) = opval;
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 8);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_hi_ld), 8)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
// OBSOLETE     CPU (h_gr[((UINT) 11)]) = opval;
// OBSOLETE     written |= (1 << 4);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 8);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_hi_ld), 16)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
// OBSOLETE     CPU (h_gr[((UINT) 12)]) = opval;
// OBSOLETE     written |= (1 << 5);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 8);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_hi_ld), 32)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
// OBSOLETE     CPU (h_gr[((UINT) 13)]) = opval;
// OBSOLETE     written |= (1 << 6);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 8);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_hi_ld), 64)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
// OBSOLETE     CPU (h_gr[((UINT) 14)]) = opval;
// OBSOLETE     written |= (1 << 7);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 8);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_hi_ld), 128)) {
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 8);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_STM0) : /* stm0 ($reglist_low_st) */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_stm0.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE if (ANDSI (FLD (f_reglist_low_st), 1)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 10);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = CPU (h_gr[((UINT) 7)]);
// OBSOLETE     SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
// OBSOLETE     written |= (1 << 11);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_low_st), 2)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 10);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = CPU (h_gr[((UINT) 6)]);
// OBSOLETE     SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
// OBSOLETE     written |= (1 << 11);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_low_st), 4)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 10);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = CPU (h_gr[((UINT) 5)]);
// OBSOLETE     SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
// OBSOLETE     written |= (1 << 11);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_low_st), 8)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 10);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = CPU (h_gr[((UINT) 4)]);
// OBSOLETE     SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
// OBSOLETE     written |= (1 << 11);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_low_st), 16)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 10);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = CPU (h_gr[((UINT) 3)]);
// OBSOLETE     SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
// OBSOLETE     written |= (1 << 11);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_low_st), 32)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 10);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = CPU (h_gr[((UINT) 2)]);
// OBSOLETE     SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
// OBSOLETE     written |= (1 << 11);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_low_st), 64)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 10);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = CPU (h_gr[((UINT) 1)]);
// OBSOLETE     SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
// OBSOLETE     written |= (1 << 11);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_low_st), 128)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 10);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = CPU (h_gr[((UINT) 0)]);
// OBSOLETE     SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
// OBSOLETE     written |= (1 << 11);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_STM1) : /* stm1 ($reglist_hi_st) */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_stm1.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE if (ANDSI (FLD (f_reglist_hi_st), 1)) {
// OBSOLETE {
// OBSOLETE   SI tmp_save_r15;
// OBSOLETE   tmp_save_r15 = CPU (h_gr[((UINT) 15)]);
// OBSOLETE   {
// OBSOLETE     SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 9);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = tmp_save_r15;
// OBSOLETE     SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
// OBSOLETE     written |= (1 << 10);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_hi_st), 2)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 9);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = CPU (h_gr[((UINT) 14)]);
// OBSOLETE     SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
// OBSOLETE     written |= (1 << 10);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_hi_st), 4)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 9);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = CPU (h_gr[((UINT) 13)]);
// OBSOLETE     SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
// OBSOLETE     written |= (1 << 10);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_hi_st), 8)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 9);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = CPU (h_gr[((UINT) 12)]);
// OBSOLETE     SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
// OBSOLETE     written |= (1 << 10);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_hi_st), 16)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 9);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = CPU (h_gr[((UINT) 11)]);
// OBSOLETE     SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
// OBSOLETE     written |= (1 << 10);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_hi_st), 32)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 9);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = CPU (h_gr[((UINT) 10)]);
// OBSOLETE     SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
// OBSOLETE     written |= (1 << 10);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_hi_st), 64)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 9);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = CPU (h_gr[((UINT) 9)]);
// OBSOLETE     SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
// OBSOLETE     written |= (1 << 10);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_hi_st), 128)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 9);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = CPU (h_gr[((UINT) 8)]);
// OBSOLETE     SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
// OBSOLETE     written |= (1 << 10);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_ENTER) : /* enter $u10 */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_enter.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   SI tmp_tmp;
// OBSOLETE   tmp_tmp = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE   {
// OBSOLETE     SI opval = CPU (h_gr[((UINT) 14)]);
// OBSOLETE     SETMEMSI (current_cpu, pc, tmp_tmp, opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = tmp_tmp;
// OBSOLETE     CPU (h_gr[((UINT) 14)]) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), FLD (f_u10));
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_LEAVE) : /* leave */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_enter.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 14)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, SUBSI (CPU (h_gr[((UINT) 15)]), 4));
// OBSOLETE     CPU (h_gr[((UINT) 14)]) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE   CASE (sem, INSN_XCHB) : /* xchb @@$Rj,$Ri */
// OBSOLETE {
// OBSOLETE   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add.f
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   SI tmp_tmp;
// OBSOLETE   tmp_tmp = * FLD (i_Ri);
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMUQI (current_cpu, pc, * FLD (i_Rj));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     UQI opval = tmp_tmp;
// OBSOLETE     SETMEMUQI (current_cpu, pc, * FLD (i_Rj), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE   NEXT (vpc);
// OBSOLETE 
// OBSOLETE 
// OBSOLETE     }
// OBSOLETE   ENDSWITCH (sem) /* End of semantic switch.  */
// OBSOLETE 
// OBSOLETE   /* At this point `vpc' contains the next insn to execute.  */
// OBSOLETE }
// OBSOLETE 
// OBSOLETE #undef DEFINE_SWITCH
// OBSOLETE #endif /* DEFINE_SWITCH */
@


1.3
log
@2001-03-05  Dave Brolley  <brolley@@

        * arch.c: Regenerate.
        * arch.h: Regenerate.
        * cpu.c: Regenerate.
        * cpu.h: Regenerate.
        * cpuall.h: Regenerate.
        * decode.c: Regenerate.
        * decode.h: Regenerate.
        * model.c: Regenerate.
        * sem-switch.c: Regenerate.
        * sem.c: Regenerate.
@
text
@d5 1
a5 1
Copyright (C) 1996, 1997, 1998, 1999, 2000 Free Software Foundation, Inc.
d7 1
a7 1
This file is part of the GNU Simulators.
@


1.2
log
@2000-10-06  Dave Brolley  <brolley@@redhat.com>

	* sem.c: Regenerated.
	* sem-switch.c: Regenerated.
@
text
@d5 1
a5 1
Copyright (C) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.
d236 1
d238 3
d432 1
a432 1
    TRACE_RESULT (current_cpu, abuf, "Ri", 'x', opval);
d475 1
a475 1
    TRACE_RESULT (current_cpu, abuf, "Ri", 'x', opval);
d518 1
a518 1
    TRACE_RESULT (current_cpu, abuf, "Ri", 'x', opval);
d563 1
a563 1
    TRACE_RESULT (current_cpu, abuf, "Ri", 'x', opval);
d595 1
a595 1
    TRACE_RESULT (current_cpu, abuf, "Ri", 'x', opval);
d614 1
a614 1
    TRACE_RESULT (current_cpu, abuf, "Ri", 'x', opval);
d633 1
a633 1
    TRACE_RESULT (current_cpu, abuf, "Ri", 'x', opval);
d663 1
a663 1
    TRACE_RESULT (current_cpu, abuf, "Ri", 'x', opval);
d708 1
a708 1
    TRACE_RESULT (current_cpu, abuf, "Ri", 'x', opval);
d740 1
a740 1
    TRACE_RESULT (current_cpu, abuf, "Ri", 'x', opval);
d880 1
a880 1
    TRACE_RESULT (current_cpu, abuf, "Ri", 'x', opval);
d913 1
a913 1
    TRACE_RESULT (current_cpu, abuf, "Ri", 'x', opval);
d946 1
a946 1
    TRACE_RESULT (current_cpu, abuf, "Ri", 'x', opval);
d1466 1
a1466 1
    TRACE_RESULT (current_cpu, abuf, "dr-5", 'x', opval);
d1471 1
a1471 1
    TRACE_RESULT (current_cpu, abuf, "dr-4", 'x', opval);
d1509 1
a1509 1
    TRACE_RESULT (current_cpu, abuf, "dr-5", 'x', opval);
d1514 1
a1514 1
    TRACE_RESULT (current_cpu, abuf, "dr-4", 'x', opval);
d1550 1
a1550 1
    TRACE_RESULT (current_cpu, abuf, "dr-5", 'x', opval);
d1581 1
a1581 1
    TRACE_RESULT (current_cpu, abuf, "dr-5", 'x', opval);
d1624 1
a1624 1
    TRACE_RESULT (current_cpu, abuf, "dr-4", 'x', opval);
d1631 1
a1631 1
    TRACE_RESULT (current_cpu, abuf, "dr-4", 'x', opval);
d1664 1
a1664 1
    TRACE_RESULT (current_cpu, abuf, "dr-4", 'x', opval);
d1686 1
a1686 1
    TRACE_RESULT (current_cpu, abuf, "dr-4", 'x', opval);
d1692 1
a1692 1
    TRACE_RESULT (current_cpu, abuf, "dr-4", 'x', opval);
d1698 1
a1698 1
    TRACE_RESULT (current_cpu, abuf, "dr-5", 'x', opval);
d1726 1
a1726 1
    TRACE_RESULT (current_cpu, abuf, "dr-4", 'x', opval);
d1731 1
a1731 1
    TRACE_RESULT (current_cpu, abuf, "dr-5", 'x', opval);
d1791 1
a1791 1
    TRACE_RESULT (current_cpu, abuf, "dr-4", 'x', opval);
d1823 1
a1823 1
    TRACE_RESULT (current_cpu, abuf, "dr-5", 'x', opval);
d1846 1
a1846 1
    TRACE_RESULT (current_cpu, abuf, "dr-5", 'x', opval);
d1879 1
a1879 1
    TRACE_RESULT (current_cpu, abuf, "Ri", 'x', opval);
d1931 1
a1931 1
    TRACE_RESULT (current_cpu, abuf, "Ri", 'x', opval);
d1983 1
a1983 1
    TRACE_RESULT (current_cpu, abuf, "Ri", 'x', opval);
d2035 1
a2035 1
    TRACE_RESULT (current_cpu, abuf, "Ri", 'x', opval);
d2087 1
a2087 1
    TRACE_RESULT (current_cpu, abuf, "Ri", 'x', opval);
d2139 1
a2139 1
    TRACE_RESULT (current_cpu, abuf, "Ri", 'x', opval);
d2191 1
a2191 1
    TRACE_RESULT (current_cpu, abuf, "Ri", 'x', opval);
d2243 1
a2243 1
    TRACE_RESULT (current_cpu, abuf, "Ri", 'x', opval);
d2295 1
a2295 1
    TRACE_RESULT (current_cpu, abuf, "Ri", 'x', opval);
d2335 1
a2335 1
    TRACE_RESULT (current_cpu, abuf, "Ri", 'x', opval);
d2354 1
a2354 1
    TRACE_RESULT (current_cpu, abuf, "Ri", 'x', opval);
d2373 1
a2373 1
    TRACE_RESULT (current_cpu, abuf, "Ri", 'x', opval);
d2392 1
a2392 1
    TRACE_RESULT (current_cpu, abuf, "Ri", 'x', opval);
d2411 1
a2411 1
    TRACE_RESULT (current_cpu, abuf, "Ri", 'x', opval);
d2430 1
a2430 1
    TRACE_RESULT (current_cpu, abuf, "Ri", 'x', opval);
d2449 1
a2449 1
    TRACE_RESULT (current_cpu, abuf, "Ri", 'x', opval);
d2468 1
a2468 1
    TRACE_RESULT (current_cpu, abuf, "Ri", 'x', opval);
d2487 1
a2487 1
    TRACE_RESULT (current_cpu, abuf, "Ri", 'x', opval);
d2506 1
a2506 1
    TRACE_RESULT (current_cpu, abuf, "Ri", 'x', opval);
d2525 1
a2525 1
    TRACE_RESULT (current_cpu, abuf, "Ri", 'x', opval);
d2544 1
a2544 1
    TRACE_RESULT (current_cpu, abuf, "Ri", 'x', opval);
d2563 1
a2563 1
    TRACE_RESULT (current_cpu, abuf, "Ri", 'x', opval);
d2583 1
a2583 1
    TRACE_RESULT (current_cpu, abuf, "Ri", 'x', opval);
d2590 1
a2590 1
    TRACE_RESULT (current_cpu, abuf, "gr-15", 'x', opval);
d2615 1
a2615 1
    TRACE_RESULT (current_cpu, abuf, "gr-15", 'x', opval);
d2620 1
a2620 1
    TRACE_RESULT (current_cpu, abuf, "Rs2", 'x', opval);
d2646 1
a2646 1
    TRACE_RESULT (current_cpu, abuf, "gr-15", 'x', opval);
d2859 1
a2859 1
    TRACE_RESULT (current_cpu, abuf, "gr-15", 'x', opval);
d2887 1
a2887 1
    TRACE_RESULT (current_cpu, abuf, "gr-15", 'x', opval);
d2913 1
a2913 1
    TRACE_RESULT (current_cpu, abuf, "gr-15", 'x', opval);
d2938 1
a2938 1
    TRACE_RESULT (current_cpu, abuf, "Ri", 'x', opval);
d2957 1
a2957 1
    TRACE_RESULT (current_cpu, abuf, "Ri", 'x', opval);
d2976 1
a2976 1
    TRACE_RESULT (current_cpu, abuf, "Ri", 'x', opval);
d2995 1
a2995 1
    TRACE_RESULT (current_cpu, abuf, "Rs1", 'x', opval);
d3079 1
a3079 1
    TRACE_RESULT (current_cpu, abuf, "dr-1", 'x', opval);
d3108 1
a3108 1
    TRACE_RESULT (current_cpu, abuf, "dr-1", 'x', opval);
d3137 1
a3137 1
    TRACE_RESULT (current_cpu, abuf, "dr-1", 'x', opval);
d3166 1
a3166 1
    TRACE_RESULT (current_cpu, abuf, "dr-1", 'x', opval);
d3299 1
a3299 1
    TRACE_RESULT (current_cpu, abuf, "dr-2", 'x', opval);
d3311 1
a3311 1
    TRACE_RESULT (current_cpu, abuf, "dr-2", 'x', opval);
d3326 1
a3326 1
    TRACE_RESULT (current_cpu, abuf, "dr-3", 'x', opval);
d3338 1
a3338 1
    TRACE_RESULT (current_cpu, abuf, "dr-3", 'x', opval);
d4228 1
a4228 1
    TRACE_RESULT (current_cpu, abuf, "gr-13", 'x', opval);
d4254 1
a4254 1
    TRACE_RESULT (current_cpu, abuf, "gr-13", 'x', opval);
d4280 1
a4280 1
    TRACE_RESULT (current_cpu, abuf, "gr-13", 'x', opval);
d4306 1
a4306 1
    TRACE_RESULT (current_cpu, abuf, "gr-15", 'x', opval);
d4326 1
a4326 1
    TRACE_RESULT (current_cpu, abuf, "gr-13", 'x', opval);
d4345 1
a4345 1
    TRACE_RESULT (current_cpu, abuf, "gr-13", 'x', opval);
d4364 1
a4364 1
    TRACE_RESULT (current_cpu, abuf, "gr-13", 'x', opval);
d4389 1
a4389 1
    TRACE_RESULT (current_cpu, abuf, "gr-13", 'x', opval);
d4415 1
a4415 1
    TRACE_RESULT (current_cpu, abuf, "gr-13", 'x', opval);
d4441 1
a4441 1
    TRACE_RESULT (current_cpu, abuf, "gr-13", 'x', opval);
d4462 1
a4462 1
    TRACE_RESULT (current_cpu, abuf, "gr-15", 'x', opval);
d4487 1
a4487 1
    TRACE_RESULT (current_cpu, abuf, "Ri", 'x', opval);
d4506 1
a4506 1
    TRACE_RESULT (current_cpu, abuf, "Ri", 'x', opval);
d4657 1
a4657 1
    TRACE_RESULT (current_cpu, abuf, "gr-15", 'x', opval);
d4676 1
a4676 1
    TRACE_RESULT (current_cpu, abuf, "Ri", 'x', opval);
d4695 1
a4695 1
    TRACE_RESULT (current_cpu, abuf, "Ri", 'x', opval);
d4714 1
a4714 1
    TRACE_RESULT (current_cpu, abuf, "Ri", 'x', opval);
d4733 1
a4733 1
    TRACE_RESULT (current_cpu, abuf, "Ri", 'x', opval);
d4756 1
a4756 1
    TRACE_RESULT (current_cpu, abuf, "gr-0", 'x', opval);
d4762 1
a4762 1
    TRACE_RESULT (current_cpu, abuf, "gr-15", 'x', opval);
d4772 1
a4772 1
    TRACE_RESULT (current_cpu, abuf, "gr-1", 'x', opval);
d4778 1
a4778 1
    TRACE_RESULT (current_cpu, abuf, "gr-15", 'x', opval);
d4788 1
a4788 1
    TRACE_RESULT (current_cpu, abuf, "gr-2", 'x', opval);
d4794 1
a4794 1
    TRACE_RESULT (current_cpu, abuf, "gr-15", 'x', opval);
d4804 1
a4804 1
    TRACE_RESULT (current_cpu, abuf, "gr-3", 'x', opval);
d4810 1
a4810 1
    TRACE_RESULT (current_cpu, abuf, "gr-15", 'x', opval);
d4820 1
a4820 1
    TRACE_RESULT (current_cpu, abuf, "gr-4", 'x', opval);
d4826 1
a4826 1
    TRACE_RESULT (current_cpu, abuf, "gr-15", 'x', opval);
d4836 1
a4836 1
    TRACE_RESULT (current_cpu, abuf, "gr-5", 'x', opval);
d4842 1
a4842 1
    TRACE_RESULT (current_cpu, abuf, "gr-15", 'x', opval);
d4852 1
a4852 1
    TRACE_RESULT (current_cpu, abuf, "gr-6", 'x', opval);
d4858 1
a4858 1
    TRACE_RESULT (current_cpu, abuf, "gr-15", 'x', opval);
d4868 1
a4868 1
    TRACE_RESULT (current_cpu, abuf, "gr-7", 'x', opval);
d4874 1
a4874 1
    TRACE_RESULT (current_cpu, abuf, "gr-15", 'x', opval);
d4901 1
a4901 1
    TRACE_RESULT (current_cpu, abuf, "gr-8", 'x', opval);
d4907 1
a4907 1
    TRACE_RESULT (current_cpu, abuf, "gr-15", 'x', opval);
d4917 1
a4917 1
    TRACE_RESULT (current_cpu, abuf, "gr-9", 'x', opval);
d4923 1
a4923 1
    TRACE_RESULT (current_cpu, abuf, "gr-15", 'x', opval);
d4933 1
a4933 1
    TRACE_RESULT (current_cpu, abuf, "gr-10", 'x', opval);
d4939 1
a4939 1
    TRACE_RESULT (current_cpu, abuf, "gr-15", 'x', opval);
d4949 1
a4949 1
    TRACE_RESULT (current_cpu, abuf, "gr-11", 'x', opval);
d4955 1
a4955 1
    TRACE_RESULT (current_cpu, abuf, "gr-15", 'x', opval);
d4965 1
a4965 1
    TRACE_RESULT (current_cpu, abuf, "gr-12", 'x', opval);
d4971 1
a4971 1
    TRACE_RESULT (current_cpu, abuf, "gr-15", 'x', opval);
d4981 1
a4981 1
    TRACE_RESULT (current_cpu, abuf, "gr-13", 'x', opval);
d4987 1
a4987 1
    TRACE_RESULT (current_cpu, abuf, "gr-15", 'x', opval);
d4997 1
a4997 1
    TRACE_RESULT (current_cpu, abuf, "gr-14", 'x', opval);
d5003 1
a5003 1
    TRACE_RESULT (current_cpu, abuf, "gr-15", 'x', opval);
d5012 1
a5012 1
    TRACE_RESULT (current_cpu, abuf, "gr-15", 'x', opval);
d5038 1
a5038 1
    TRACE_RESULT (current_cpu, abuf, "gr-15", 'x', opval);
d5054 1
a5054 1
    TRACE_RESULT (current_cpu, abuf, "gr-15", 'x', opval);
d5070 1
a5070 1
    TRACE_RESULT (current_cpu, abuf, "gr-15", 'x', opval);
d5086 1
a5086 1
    TRACE_RESULT (current_cpu, abuf, "gr-15", 'x', opval);
d5102 1
a5102 1
    TRACE_RESULT (current_cpu, abuf, "gr-15", 'x', opval);
d5118 1
a5118 1
    TRACE_RESULT (current_cpu, abuf, "gr-15", 'x', opval);
d5134 1
a5134 1
    TRACE_RESULT (current_cpu, abuf, "gr-15", 'x', opval);
d5150 1
a5150 1
    TRACE_RESULT (current_cpu, abuf, "gr-15", 'x', opval);
d5185 1
a5185 1
    TRACE_RESULT (current_cpu, abuf, "gr-15", 'x', opval);
d5201 1
a5201 1
    TRACE_RESULT (current_cpu, abuf, "gr-15", 'x', opval);
d5217 1
a5217 1
    TRACE_RESULT (current_cpu, abuf, "gr-15", 'x', opval);
d5233 1
a5233 1
    TRACE_RESULT (current_cpu, abuf, "gr-15", 'x', opval);
d5249 1
a5249 1
    TRACE_RESULT (current_cpu, abuf, "gr-15", 'x', opval);
d5265 1
a5265 1
    TRACE_RESULT (current_cpu, abuf, "gr-15", 'x', opval);
d5281 1
a5281 1
    TRACE_RESULT (current_cpu, abuf, "gr-15", 'x', opval);
d5297 1
a5297 1
    TRACE_RESULT (current_cpu, abuf, "gr-15", 'x', opval);
d5334 1
a5334 1
    TRACE_RESULT (current_cpu, abuf, "gr-14", 'x', opval);
d5339 1
a5339 1
    TRACE_RESULT (current_cpu, abuf, "gr-15", 'x', opval);
d5360 1
a5360 1
    TRACE_RESULT (current_cpu, abuf, "gr-15", 'x', opval);
d5365 1
a5365 1
    TRACE_RESULT (current_cpu, abuf, "gr-14", 'x', opval);
d5388 1
a5388 1
    TRACE_RESULT (current_cpu, abuf, "Ri", 'x', opval);
@


1.1
log
@Initial revision
@
text
@d211 1
d213 1
a213 1
    CPU_IDESC (current_cpu) [labels[i].index].sem_fast_lab = labels[i].label;
d215 1
a215 1
    CPU_IDESC (current_cpu) [labels[i].index].sem_full_lab = labels[i].label;
d217 1
d273 3
a275 2
#if WITH_SCACHE
    /* Update the recorded pc in the cpu state struct.  */
d277 5
a281 4
#endif
    sim_engine_invalid_insn (current_cpu, pc);
    sim_io_error (CPU_STATE (current_cpu), "invalid insn not handled\n");
    /* NOTREACHED */
d339 1
a339 1
			       pbb_br_npc_ptr, pbb_br_npc);
d344 1
a344 1
			       CPU_PBB_BR_NPC_PTR (current_cpu),
d387 1
a387 1
#ifdef DEFINE_SWITCH
d392 1
d394 3
d409 1
a409 1
#define FLD(f) abuf->fields.fmt_add.f
d414 1
a414 1
do {
d430 1
a430 1
do {
d441 2
a442 2
} while (0);
} while (0);
d452 1
a452 1
#define FLD(f) abuf->fields.fmt_addi.f
d457 1
a457 1
do {
d473 1
a473 1
do {
d484 2
a485 2
} while (0);
} while (0);
d495 1
a495 1
#define FLD(f) abuf->fields.fmt_add2.f
d500 1
a500 1
do {
d516 1
a516 1
do {
d527 2
a528 2
} while (0);
} while (0);
d538 1
a538 1
#define FLD(f) abuf->fields.fmt_addc.f
d543 1
a543 1
do {
d561 1
a561 1
do {
d572 2
a573 2
} while (0);
} while (0);
d583 1
a583 1
#define FLD(f) abuf->fields.fmt_addn.f
d602 1
a602 1
#define FLD(f) abuf->fields.fmt_addni.f
d621 1
a621 1
#define FLD(f) abuf->fields.fmt_addn2.f
d640 1
a640 1
#define FLD(f) abuf->fields.fmt_add.f
d645 1
a645 1
do {
d661 1
a661 1
do {
d672 2
a673 2
} while (0);
} while (0);
d683 1
a683 1
#define FLD(f) abuf->fields.fmt_addc.f
d688 1
a688 1
do {
d706 1
a706 1
do {
d717 2
a718 2
} while (0);
} while (0);
d728 1
a728 1
#define FLD(f) abuf->fields.fmt_addn.f
d747 1
a747 1
#define FLD(f) abuf->fields.fmt_cmp.f
d752 1
a752 1
do {
d765 1
a765 1
do {
d776 2
a777 2
} while (0);
} while (0);
d787 1
a787 1
#define FLD(f) abuf->fields.fmt_cmpi.f
d792 1
a792 1
do {
d805 1
a805 1
do {
d816 2
a817 2
} while (0);
} while (0);
d827 1
a827 1
#define FLD(f) abuf->fields.fmt_cmp2.f
d832 1
a832 1
do {
d845 1
a845 1
do {
d856 2
a857 2
} while (0);
} while (0);
d867 1
a867 1
#define FLD(f) abuf->fields.fmt_and.f
d872 1
a872 1
do {
d878 1
a878 1
do {
d889 2
a890 2
} while (0);
} while (0);
d900 1
a900 1
#define FLD(f) abuf->fields.fmt_and.f
d905 1
a905 1
do {
d911 1
a911 1
do {
d922 2
a923 2
} while (0);
} while (0);
d933 1
a933 1
#define FLD(f) abuf->fields.fmt_and.f
d938 1
a938 1
do {
d944 1
a944 1
do {
d955 2
a956 2
} while (0);
} while (0);
d966 1
a966 1
#define FLD(f) abuf->fields.fmt_andm.f
d971 1
a971 1
do {
d974 1
a974 1
do {
d985 1
a985 1
} while (0);
d991 1
a991 1
} while (0);
d1001 1
a1001 1
#define FLD(f) abuf->fields.fmt_andh.f
d1006 1
a1006 1
do {
d1009 1
a1009 1
do {
d1020 1
a1020 1
} while (0);
d1026 1
a1026 1
} while (0);
d1036 1
a1036 1
#define FLD(f) abuf->fields.fmt_andb.f
d1041 1
a1041 1
do {
d1044 1
a1044 1
do {
d1055 1
a1055 1
} while (0);
d1061 1
a1061 1
} while (0);
d1071 1
a1071 1
#define FLD(f) abuf->fields.fmt_andm.f
d1076 1
a1076 1
do {
d1079 1
a1079 1
do {
d1090 1
a1090 1
} while (0);
d1096 1
a1096 1
} while (0);
d1106 1
a1106 1
#define FLD(f) abuf->fields.fmt_andh.f
d1111 1
a1111 1
do {
d1114 1
a1114 1
do {
d1125 1
a1125 1
} while (0);
d1131 1
a1131 1
} while (0);
d1141 1
a1141 1
#define FLD(f) abuf->fields.fmt_andb.f
d1146 1
a1146 1
do {
d1149 1
a1149 1
do {
d1160 1
a1160 1
} while (0);
d1166 1
a1166 1
} while (0);
d1176 1
a1176 1
#define FLD(f) abuf->fields.fmt_andm.f
d1181 1
a1181 1
do {
d1184 1
a1184 1
do {
d1195 1
a1195 1
} while (0);
d1201 1
a1201 1
} while (0);
d1211 1
a1211 1
#define FLD(f) abuf->fields.fmt_andh.f
d1216 1
a1216 1
do {
d1219 1
a1219 1
do {
d1230 1
a1230 1
} while (0);
d1236 1
a1236 1
} while (0);
d1246 1
a1246 1
#define FLD(f) abuf->fields.fmt_andb.f
d1251 1
a1251 1
do {
d1254 1
a1254 1
do {
d1265 1
a1265 1
} while (0);
d1271 1
a1271 1
} while (0);
d1281 1
a1281 1
#define FLD(f) abuf->fields.fmt_bandl.f
d1300 1
a1300 1
#define FLD(f) abuf->fields.fmt_bandl.f
d1319 1
a1319 1
#define FLD(f) abuf->fields.fmt_bandl.f
d1338 1
a1338 1
#define FLD(f) abuf->fields.fmt_bandl.f
d1357 1
a1357 1
#define FLD(f) abuf->fields.fmt_bandl.f
d1376 1
a1376 1
#define FLD(f) abuf->fields.fmt_bandl.f
d1395 1
a1395 1
#define FLD(f) abuf->fields.fmt_btstl.f
d1400 1
a1400 1
do {
d1413 1
a1413 1
} while (0);
d1423 1
a1423 1
#define FLD(f) abuf->fields.fmt_btstl.f
d1428 1
a1428 1
do {
d1441 1
a1441 1
} while (0);
d1451 1
a1451 1
#define FLD(f) abuf->fields.fmt_mul.f
d1456 1
a1456 1
do {
d1484 1
a1484 1
} while (0);
d1494 1
a1494 1
#define FLD(f) abuf->fields.fmt_mulu.f
d1499 1
a1499 1
do {
d1527 1
a1527 1
} while (0);
d1537 1
a1537 1
#define FLD(f) abuf->fields.fmt_mulh.f
d1542 1
a1542 1
do {
d1558 1
a1558 1
} while (0);
d1568 1
a1568 1
#define FLD(f) abuf->fields.fmt_mulh.f
d1573 1
a1573 1
do {
d1589 1
a1589 1
} while (0);
d1599 1
a1599 1
#define FLD(f) abuf->fields.fmt_div0s.f
d1604 1
a1604 1
do {
d1630 1
a1630 1
} while (0);
d1641 1
a1641 1
#define FLD(f) abuf->fields.fmt_div0u.f
d1646 1
a1646 1
do {
d1662 1
a1662 1
} while (0);
d1672 1
a1672 1
#define FLD(f) abuf->fields.fmt_div1.f
d1677 1
a1677 1
do {
d1697 1
a1697 1
do {
d1705 1
a1705 1
} while (0);
d1707 1
a1707 1
do {
d1715 1
a1715 1
} while (0);
d1718 1
a1718 1
do {
d1729 1
a1729 1
} while (0);
d1736 1
a1736 1
} while (0);
d1747 1
a1747 1
#define FLD(f) abuf->fields.fmt_div2.f
d1752 1
a1752 1
do {
d1755 1
a1755 1
do {
d1763 1
a1763 1
} while (0);
d1765 1
a1765 1
do {
d1773 1
a1773 1
} while (0);
d1776 1
a1776 1
do {
d1789 1
a1789 1
} while (0);
d1798 1
a1798 1
} while (0);
d1809 1
a1809 1
#define FLD(f) abuf->fields.fmt_div3.f
d1832 1
a1832 1
#define FLD(f) abuf->fields.fmt_div4s.f
d1855 1
a1855 1
#define FLD(f) abuf->fields.fmt_lsl.f
d1860 1
a1860 1
do {
d1864 1
a1864 1
do {
d1877 1
a1877 1
} while (0);
d1896 1
a1896 1
} while (0);
d1907 1
a1907 1
#define FLD(f) abuf->fields.fmt_lsli.f
d1912 1
a1912 1
do {
d1916 1
a1916 1
do {
d1929 1
a1929 1
} while (0);
d1948 1
a1948 1
} while (0);
d1959 1
a1959 1
#define FLD(f) abuf->fields.fmt_lsli.f
d1964 1
a1964 1
do {
d1968 1
a1968 1
do {
d1981 1
a1981 1
} while (0);
d2000 1
a2000 1
} while (0);
d2011 1
a2011 1
#define FLD(f) abuf->fields.fmt_lsl.f
d2016 1
a2016 1
do {
d2020 1
a2020 1
do {
d2033 1
a2033 1
} while (0);
d2052 1
a2052 1
} while (0);
d2063 1
a2063 1
#define FLD(f) abuf->fields.fmt_lsli.f
d2068 1
a2068 1
do {
d2072 1
a2072 1
do {
d2085 1
a2085 1
} while (0);
d2104 1
a2104 1
} while (0);
d2115 1
a2115 1
#define FLD(f) abuf->fields.fmt_lsli.f
d2120 1
a2120 1
do {
d2124 1
a2124 1
do {
d2137 1
a2137 1
} while (0);
d2156 1
a2156 1
} while (0);
d2167 1
a2167 1
#define FLD(f) abuf->fields.fmt_lsl.f
d2172 1
a2172 1
do {
d2176 1
a2176 1
do {
d2189 1
a2189 1
} while (0);
d2208 1
a2208 1
} while (0);
d2219 1
a2219 1
#define FLD(f) abuf->fields.fmt_lsli.f
d2224 1
a2224 1
do {
d2228 1
a2228 1
do {
d2241 1
a2241 1
} while (0);
d2260 1
a2260 1
} while (0);
d2271 1
a2271 1
#define FLD(f) abuf->fields.fmt_lsli.f
d2276 1
a2276 1
do {
d2280 1
a2280 1
do {
d2293 1
a2293 1
} while (0);
d2312 1
a2312 1
} while (0);
d2323 1
a2323 1
#define FLD(f) abuf->fields.fmt_ldi8.f
d2342 1
a2342 1
#define FLD(f) abuf->fields.fmt_ldi20.f
d2361 1
a2361 1
#define FLD(f) abuf->fields.fmt_ldi32.f
d2380 1
a2380 1
#define FLD(f) abuf->fields.fmt_ld.f
d2399 1
a2399 1
#define FLD(f) abuf->fields.fmt_lduh.f
d2418 1
a2418 1
#define FLD(f) abuf->fields.fmt_ldub.f
d2437 1
a2437 1
#define FLD(f) abuf->fields.fmt_ldr13.f
d2456 1
a2456 1
#define FLD(f) abuf->fields.fmt_ldr13uh.f
d2475 1
a2475 1
#define FLD(f) abuf->fields.fmt_ldr13ub.f
d2494 1
a2494 1
#define FLD(f) abuf->fields.fmt_ldr14.f
d2513 1
a2513 1
#define FLD(f) abuf->fields.fmt_ldr14uh.f
d2532 1
a2532 1
#define FLD(f) abuf->fields.fmt_ldr14ub.f
d2551 1
a2551 1
#define FLD(f) abuf->fields.fmt_ldr15.f
d2570 1
a2570 1
#define FLD(f) abuf->fields.fmt_ldr15gr.f
d2575 1
a2575 1
do {
d2589 1
a2589 1
} while (0);
d2600 1
a2600 1
#define FLD(f) abuf->fields.fmt_ldr15dr.f
d2605 1
a2605 1
do {
d2618 1
a2618 1
} while (0);
d2628 1
a2628 1
#define FLD(f) abuf->fields.fmt_ldr15ps.f
d2633 1
a2633 1
do {
d2644 1
a2644 1
} while (0);
d2654 1
a2654 1
#define FLD(f) abuf->fields.fmt_st.f
d2673 1
a2673 1
#define FLD(f) abuf->fields.fmt_sth.f
d2692 1
a2692 1
#define FLD(f) abuf->fields.fmt_stb.f
d2711 1
a2711 1
#define FLD(f) abuf->fields.fmt_str13.f
d2730 1
a2730 1
#define FLD(f) abuf->fields.fmt_str13h.f
d2749 1
a2749 1
#define FLD(f) abuf->fields.fmt_str13b.f
d2768 1
a2768 1
#define FLD(f) abuf->fields.fmt_str14.f
d2787 1
a2787 1
#define FLD(f) abuf->fields.fmt_str14h.f
d2806 1
a2806 1
#define FLD(f) abuf->fields.fmt_str14b.f
d2825 1
a2825 1
#define FLD(f) abuf->fields.fmt_str15.f
d2844 1
a2844 1
#define FLD(f) abuf->fields.fmt_str15gr.f
d2849 1
a2849 1
do {
d2862 1
a2862 1
} while (0);
d2872 1
a2872 1
#define FLD(f) abuf->fields.fmt_str15dr.f
d2877 1
a2877 1
do {
d2890 1
a2890 1
} while (0);
d2900 1
a2900 1
#define FLD(f) abuf->fields.fmt_str15ps.f
d2905 1
a2905 1
do {
d2916 1
a2916 1
} while (0);
d2926 1
a2926 1
#define FLD(f) abuf->fields.fmt_mov.f
d2945 1
a2945 1
#define FLD(f) abuf->fields.fmt_movdr.f
d2964 1
a2964 1
#define FLD(f) abuf->fields.fmt_movps.f
d2983 1
a2983 1
#define FLD(f) abuf->fields.fmt_mov2dr.f
d3002 1
a3002 1
#define FLD(f) abuf->fields.fmt_mov2ps.f
d3021 1
a3021 1
#define FLD(f) abuf->fields.cti.fields.fmt_jmp.f
d3042 1
a3042 1
#define FLD(f) abuf->fields.cti.fields.fmt_jmp.f
d3048 1
a3048 1
do {
d3054 1
a3054 1
} while (0);
d3065 1
a3065 1
#define FLD(f) abuf->fields.cti.fields.fmt_callr.f
d3071 1
a3071 1
do {
d3082 1
a3082 1
} while (0);
d3093 1
a3093 1
#define FLD(f) abuf->fields.cti.fields.fmt_callr.f
d3099 2
a3100 2
do {
do {
d3111 2
a3112 2
} while (0);
} while (0);
d3123 1
a3123 1
#define FLD(f) abuf->fields.cti.fields.fmt_call.f
d3129 1
a3129 1
do {
d3137 1
a3137 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc, SEM_BRANCH_ADDR_CACHE (sem_arg));
d3140 1
a3140 1
} while (0);
d3151 1
a3151 1
#define FLD(f) abuf->fields.cti.fields.fmt_call.f
d3157 2
a3158 2
do {
do {
d3166 1
a3166 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc, SEM_BRANCH_ADDR_CACHE (sem_arg));
d3169 2
a3170 2
} while (0);
} while (0);
d3181 1
a3181 1
#define FLD(f) abuf->fields.cti.fields.fmt_ret.f
d3202 1
a3202 1
#define FLD(f) abuf->fields.cti.fields.fmt_ret.f
d3208 1
a3208 1
do {
d3214 1
a3214 1
} while (0);
d3225 1
a3225 1
#define FLD(f) abuf->fields.cti.fields.fmt_int.f
d3231 1
a3231 1
do {
d3240 1
a3240 1
} while (0);
d3251 1
a3251 1
#define FLD(f) abuf->fields.cti.fields.fmt_inte.f
d3257 1
a3257 1
do {
d3266 1
a3266 1
} while (0);
d3277 1
a3277 1
#define FLD(f) abuf->fields.cti.fields.fmt_reti.f
d3284 1
a3284 1
do {
d3309 1
a3309 1
} while (0);
d3311 1
a3311 1
do {
d3336 1
a3336 1
} while (0);
d3349 1
a3349 1
#define FLD(f) abuf->fields.cti.fields.fmt_brad.f
d3355 1
a3355 1
do {
d3358 1
a3358 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc, SEM_BRANCH_ADDR_CACHE (sem_arg));
d3361 1
a3361 1
} while (0);
d3372 1
a3372 1
#define FLD(f) abuf->fields.cti.fields.fmt_brad.f
d3380 1
a3380 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc, SEM_BRANCH_ADDR_CACHE (sem_arg));
d3393 1
a3393 1
#define FLD(f) abuf->fields.fmt_bnod.f
d3398 3
a3400 3
do {
do { } while (0); /*nop*/
} while (0);
d3410 1
a3410 1
#define FLD(f) abuf->fields.fmt_bnod.f
d3415 1
a3415 1
do { } while (0); /*nop*/
d3425 1
a3425 1
#define FLD(f) abuf->fields.cti.fields.fmt_beqd.f
d3431 1
a3431 1
do {
d3435 1
a3435 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc, SEM_BRANCH_ADDR_CACHE (sem_arg));
d3440 1
a3440 1
} while (0);
d3452 1
a3452 1
#define FLD(f) abuf->fields.cti.fields.fmt_beqd.f
d3461 1
a3461 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc, SEM_BRANCH_ADDR_CACHE (sem_arg));
d3477 1
a3477 1
#define FLD(f) abuf->fields.cti.fields.fmt_beqd.f
d3483 1
a3483 1
do {
d3487 1
a3487 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc, SEM_BRANCH_ADDR_CACHE (sem_arg));
d3492 1
a3492 1
} while (0);
d3504 1
a3504 1
#define FLD(f) abuf->fields.cti.fields.fmt_beqd.f
d3513 1
a3513 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc, SEM_BRANCH_ADDR_CACHE (sem_arg));
d3529 1
a3529 1
#define FLD(f) abuf->fields.cti.fields.fmt_bcd.f
d3535 1
a3535 1
do {
d3539 1
a3539 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc, SEM_BRANCH_ADDR_CACHE (sem_arg));
d3544 1
a3544 1
} while (0);
d3556 1
a3556 1
#define FLD(f) abuf->fields.cti.fields.fmt_bcd.f
d3565 1
a3565 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc, SEM_BRANCH_ADDR_CACHE (sem_arg));
d3581 1
a3581 1
#define FLD(f) abuf->fields.cti.fields.fmt_bcd.f
d3587 1
a3587 1
do {
d3591 1
a3591 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc, SEM_BRANCH_ADDR_CACHE (sem_arg));
d3596 1
a3596 1
} while (0);
d3608 1
a3608 1
#define FLD(f) abuf->fields.cti.fields.fmt_bcd.f
d3617 1
a3617 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc, SEM_BRANCH_ADDR_CACHE (sem_arg));
d3633 1
a3633 1
#define FLD(f) abuf->fields.cti.fields.fmt_bnd.f
d3639 1
a3639 1
do {
d3643 1
a3643 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc, SEM_BRANCH_ADDR_CACHE (sem_arg));
d3648 1
a3648 1
} while (0);
d3660 1
a3660 1
#define FLD(f) abuf->fields.cti.fields.fmt_bnd.f
d3669 1
a3669 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc, SEM_BRANCH_ADDR_CACHE (sem_arg));
d3685 1
a3685 1
#define FLD(f) abuf->fields.cti.fields.fmt_bnd.f
d3691 1
a3691 1
do {
d3695 1
a3695 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc, SEM_BRANCH_ADDR_CACHE (sem_arg));
d3700 1
a3700 1
} while (0);
d3712 1
a3712 1
#define FLD(f) abuf->fields.cti.fields.fmt_bnd.f
d3721 1
a3721 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc, SEM_BRANCH_ADDR_CACHE (sem_arg));
d3737 1
a3737 1
#define FLD(f) abuf->fields.cti.fields.fmt_bvd.f
d3743 1
a3743 1
do {
d3747 1
a3747 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc, SEM_BRANCH_ADDR_CACHE (sem_arg));
d3752 1
a3752 1
} while (0);
d3764 1
a3764 1
#define FLD(f) abuf->fields.cti.fields.fmt_bvd.f
d3773 1
a3773 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc, SEM_BRANCH_ADDR_CACHE (sem_arg));
d3789 1
a3789 1
#define FLD(f) abuf->fields.cti.fields.fmt_bvd.f
d3795 1
a3795 1
do {
d3799 1
a3799 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc, SEM_BRANCH_ADDR_CACHE (sem_arg));
d3804 1
a3804 1
} while (0);
d3816 1
a3816 1
#define FLD(f) abuf->fields.cti.fields.fmt_bvd.f
d3825 1
a3825 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc, SEM_BRANCH_ADDR_CACHE (sem_arg));
d3841 1
a3841 1
#define FLD(f) abuf->fields.cti.fields.fmt_bltd.f
d3847 1
a3847 1
do {
d3851 1
a3851 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc, SEM_BRANCH_ADDR_CACHE (sem_arg));
d3856 1
a3856 1
} while (0);
d3868 1
a3868 1
#define FLD(f) abuf->fields.cti.fields.fmt_bltd.f
d3877 1
a3877 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc, SEM_BRANCH_ADDR_CACHE (sem_arg));
d3893 1
a3893 1
#define FLD(f) abuf->fields.cti.fields.fmt_bltd.f
d3899 1
a3899 1
do {
d3903 1
a3903 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc, SEM_BRANCH_ADDR_CACHE (sem_arg));
d3908 1
a3908 1
} while (0);
d3920 1
a3920 1
#define FLD(f) abuf->fields.cti.fields.fmt_bltd.f
d3929 1
a3929 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc, SEM_BRANCH_ADDR_CACHE (sem_arg));
d3945 1
a3945 1
#define FLD(f) abuf->fields.cti.fields.fmt_bled.f
d3951 1
a3951 1
do {
d3955 1
a3955 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc, SEM_BRANCH_ADDR_CACHE (sem_arg));
d3960 1
a3960 1
} while (0);
d3972 1
a3972 1
#define FLD(f) abuf->fields.cti.fields.fmt_bled.f
d3981 1
a3981 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc, SEM_BRANCH_ADDR_CACHE (sem_arg));
d3997 1
a3997 1
#define FLD(f) abuf->fields.cti.fields.fmt_bled.f
d4003 1
a4003 1
do {
d4007 1
a4007 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc, SEM_BRANCH_ADDR_CACHE (sem_arg));
d4012 1
a4012 1
} while (0);
d4024 1
a4024 1
#define FLD(f) abuf->fields.cti.fields.fmt_bled.f
d4033 1
a4033 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc, SEM_BRANCH_ADDR_CACHE (sem_arg));
d4049 1
a4049 1
#define FLD(f) abuf->fields.cti.fields.fmt_blsd.f
d4055 1
a4055 1
do {
d4059 1
a4059 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc, SEM_BRANCH_ADDR_CACHE (sem_arg));
d4064 1
a4064 1
} while (0);
d4076 1
a4076 1
#define FLD(f) abuf->fields.cti.fields.fmt_blsd.f
d4085 1
a4085 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc, SEM_BRANCH_ADDR_CACHE (sem_arg));
d4101 1
a4101 1
#define FLD(f) abuf->fields.cti.fields.fmt_blsd.f
d4107 1
a4107 1
do {
d4111 1
a4111 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc, SEM_BRANCH_ADDR_CACHE (sem_arg));
d4116 1
a4116 1
} while (0);
d4128 1
a4128 1
#define FLD(f) abuf->fields.cti.fields.fmt_blsd.f
d4137 1
a4137 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc, SEM_BRANCH_ADDR_CACHE (sem_arg));
d4153 1
a4153 1
#define FLD(f) abuf->fields.fmt_dmovr13.f
d4172 1
a4172 1
#define FLD(f) abuf->fields.fmt_dmovr13h.f
d4191 1
a4191 1
#define FLD(f) abuf->fields.fmt_dmovr13b.f
d4210 1
a4210 1
#define FLD(f) abuf->fields.fmt_dmovr13pi.f
d4215 1
a4215 1
do {
d4226 1
a4226 1
} while (0);
d4236 1
a4236 1
#define FLD(f) abuf->fields.fmt_dmovr13pih.f
d4241 1
a4241 1
do {
d4252 1
a4252 1
} while (0);
d4262 1
a4262 1
#define FLD(f) abuf->fields.fmt_dmovr13pib.f
d4267 1
a4267 1
do {
d4278 1
a4278 1
} while (0);
d4288 1
a4288 1
#define FLD(f) abuf->fields.fmt_dmovr15pi.f
d4293 1
a4293 1
do {
d4304 1
a4304 1
} while (0);
d4314 1
a4314 1
#define FLD(f) abuf->fields.fmt_dmov2r13.f
d4333 1
a4333 1
#define FLD(f) abuf->fields.fmt_dmov2r13h.f
d4352 1
a4352 1
#define FLD(f) abuf->fields.fmt_dmov2r13b.f
d4371 1
a4371 1
#define FLD(f) abuf->fields.fmt_dmov2r13pi.f
d4376 1
a4376 1
do {
d4387 1
a4387 1
} while (0);
d4397 1
a4397 1
#define FLD(f) abuf->fields.fmt_dmov2r13pih.f
d4402 1
a4402 1
do {
d4413 1
a4413 1
} while (0);
d4423 1
a4423 1
#define FLD(f) abuf->fields.fmt_dmov2r13pib.f
d4428 1
a4428 1
do {
d4439 1
a4439 1
} while (0);
d4449 1
a4449 1
#define FLD(f) abuf->fields.fmt_dmov2r15pd.f
d4454 1
a4454 1
do {
d4465 1
a4465 1
} while (0);
d4475 1
a4475 1
#define FLD(f) abuf->fields.fmt_ldres.f
d4494 1
a4494 1
#define FLD(f) abuf->fields.fmt_ldres.f
d4513 1
a4513 1
#define FLD(f) abuf->fields.fmt_copop.f
d4518 1
a4518 1
do { } while (0); /*nop*/
d4528 1
a4528 1
#define FLD(f) abuf->fields.fmt_copld.f
d4533 1
a4533 1
do { } while (0); /*nop*/
d4543 1
a4543 1
#define FLD(f) abuf->fields.fmt_copst.f
d4548 1
a4548 1
do { } while (0); /*nop*/
d4558 1
a4558 1
#define FLD(f) abuf->fields.fmt_copst.f
d4563 1
a4563 1
do { } while (0); /*nop*/
d4573 1
a4573 1
#define FLD(f) abuf->fields.fmt_nop.f
d4578 1
a4578 1
do { } while (0); /*nop*/
d4588 1
a4588 1
#define FLD(f) abuf->fields.fmt_andccr.f
d4607 1
a4607 1
#define FLD(f) abuf->fields.fmt_andccr.f
d4626 1
a4626 1
#define FLD(f) abuf->fields.fmt_stilm.f
d4645 1
a4645 1
#define FLD(f) abuf->fields.fmt_addsp.f
d4664 1
a4664 1
#define FLD(f) abuf->fields.fmt_extsb.f
d4683 1
a4683 1
#define FLD(f) abuf->fields.fmt_extub.f
d4702 1
a4702 1
#define FLD(f) abuf->fields.fmt_extsh.f
d4721 1
a4721 1
#define FLD(f) abuf->fields.fmt_extuh.f
d4740 1
a4740 1
#define FLD(f) abuf->fields.fmt_ldm0.f
d4745 1
a4745 1
do {
d4747 1
a4747 1
do {
d4760 1
a4760 1
} while (0);
d4763 1
a4763 1
do {
d4776 1
a4776 1
} while (0);
d4779 1
a4779 1
do {
d4792 1
a4792 1
} while (0);
d4795 1
a4795 1
do {
d4808 1
a4808 1
} while (0);
d4811 1
a4811 1
do {
d4824 1
a4824 1
} while (0);
d4827 1
a4827 1
do {
d4840 1
a4840 1
} while (0);
d4843 1
a4843 1
do {
d4856 1
a4856 1
} while (0);
d4859 1
a4859 1
do {
a4871 1
} while (0);
d4873 2
a4874 1
} while (0);
d4885 1
a4885 1
#define FLD(f) abuf->fields.fmt_ldm1.f
d4890 1
a4890 1
do {
d4892 1
a4892 1
do {
d4905 1
a4905 1
} while (0);
d4908 1
a4908 1
do {
d4921 1
a4921 1
} while (0);
d4924 1
a4924 1
do {
d4937 1
a4937 1
} while (0);
d4940 1
a4940 1
do {
d4953 1
a4953 1
} while (0);
d4956 1
a4956 1
do {
d4969 1
a4969 1
} while (0);
d4972 1
a4972 1
do {
d4985 1
a4985 1
} while (0);
d4988 1
a4988 1
do {
d5001 1
a5001 1
} while (0);
d5011 1
a5011 1
} while (0);
d5022 1
a5022 1
#define FLD(f) abuf->fields.fmt_stm0.f
d5027 1
a5027 1
do {
d5029 1
a5029 1
do {
d5042 1
a5042 1
} while (0);
d5045 1
a5045 1
do {
d5058 1
a5058 1
} while (0);
d5061 1
a5061 1
do {
d5074 1
a5074 1
} while (0);
d5077 1
a5077 1
do {
d5090 1
a5090 1
} while (0);
d5093 1
a5093 1
do {
d5106 1
a5106 1
} while (0);
d5109 1
a5109 1
do {
d5122 1
a5122 1
} while (0);
d5125 1
a5125 1
do {
d5138 1
a5138 1
} while (0);
d5141 1
a5141 1
do {
a5153 1
} while (0);
d5155 2
a5156 1
} while (0);
d5167 1
a5167 1
#define FLD(f) abuf->fields.fmt_stm1.f
d5172 1
a5172 1
do {
d5174 1
a5174 1
do {
d5189 1
a5189 1
} while (0);
d5192 1
a5192 1
do {
d5205 1
a5205 1
} while (0);
d5208 1
a5208 1
do {
d5221 1
a5221 1
} while (0);
d5224 1
a5224 1
do {
d5237 1
a5237 1
} while (0);
d5240 1
a5240 1
do {
d5253 1
a5253 1
} while (0);
d5256 1
a5256 1
do {
d5269 1
a5269 1
} while (0);
d5272 1
a5272 1
do {
d5285 1
a5285 1
} while (0);
d5288 1
a5288 1
do {
a5300 1
} while (0);
d5302 2
a5303 1
} while (0);
d5314 1
a5314 1
#define FLD(f) abuf->fields.fmt_enter.f
d5319 1
a5319 1
do {
d5337 1
a5337 1
} while (0);
d5347 1
a5347 1
#define FLD(f) abuf->fields.fmt_leave.f
d5352 1
a5352 1
do {
d5363 1
a5363 1
} while (0);
d5373 1
a5373 1
#define FLD(f) abuf->fields.fmt_xchb.f
d5378 1
a5378 1
do {
d5391 1
a5391 1
} while (0);
@


1.1.1.1
log
@Initial creation of sourceware repository
@
text
@@


1.1.1.2
log
@import gdb-19990422 snapshot
@
text
@d406 1
a406 1
{
d422 1
a422 1
{
d433 2
a434 2
}
}
d449 1
a449 1
{
d465 1
a465 1
{
d476 2
a477 2
}
}
d492 1
a492 1
{
d508 1
a508 1
{
d519 2
a520 2
}
}
d535 1
a535 1
{
d553 1
a553 1
{
d564 2
a565 2
}
}
d637 1
a637 1
{
d653 1
a653 1
{
d664 2
a665 2
}
}
d680 1
a680 1
{
d698 1
a698 1
{
d709 2
a710 2
}
}
d744 1
a744 1
{
d757 1
a757 1
{
d768 2
a769 2
}
}
d784 1
a784 1
{
d797 1
a797 1
{
d808 2
a809 2
}
}
d824 1
a824 1
{
d837 1
a837 1
{
d848 2
a849 2
}
}
d864 1
a864 1
{
d870 1
a870 1
{
d881 2
a882 2
}
}
d897 1
a897 1
{
d903 1
a903 1
{
d914 2
a915 2
}
}
d930 1
a930 1
{
d936 1
a936 1
{
d947 2
a948 2
}
}
d963 1
a963 1
{
d966 1
a966 1
{
d977 1
a977 1
}
d983 1
a983 1
}
d998 1
a998 1
{
d1001 1
a1001 1
{
d1012 1
a1012 1
}
d1018 1
a1018 1
}
d1033 1
a1033 1
{
d1036 1
a1036 1
{
d1047 1
a1047 1
}
d1053 1
a1053 1
}
d1068 1
a1068 1
{
d1071 1
a1071 1
{
d1082 1
a1082 1
}
d1088 1
a1088 1
}
d1103 1
a1103 1
{
d1106 1
a1106 1
{
d1117 1
a1117 1
}
d1123 1
a1123 1
}
d1138 1
a1138 1
{
d1141 1
a1141 1
{
d1152 1
a1152 1
}
d1158 1
a1158 1
}
d1173 1
a1173 1
{
d1176 1
a1176 1
{
d1187 1
a1187 1
}
d1193 1
a1193 1
}
d1208 1
a1208 1
{
d1211 1
a1211 1
{
d1222 1
a1222 1
}
d1228 1
a1228 1
}
d1243 1
a1243 1
{
d1246 1
a1246 1
{
d1257 1
a1257 1
}
d1263 1
a1263 1
}
d1392 1
a1392 1
{
d1405 1
a1405 1
}
d1420 1
a1420 1
{
d1433 1
a1433 1
}
d1448 1
a1448 1
{
d1476 1
a1476 1
}
d1491 1
a1491 1
{
d1519 1
a1519 1
}
d1534 1
a1534 1
{
d1550 1
a1550 1
}
d1565 1
a1565 1
{
d1581 1
a1581 1
}
d1596 1
a1596 1
{
d1622 1
a1622 1
}
d1638 1
a1638 1
{
d1654 1
a1654 1
}
d1669 1
a1669 1
{
d1689 1
a1689 1
{
d1697 1
a1697 1
}
d1699 1
a1699 1
{
d1707 1
a1707 1
}
d1710 1
a1710 1
{
d1721 1
a1721 1
}
d1728 1
a1728 1
}
d1744 1
a1744 1
{
d1747 1
a1747 1
{
d1755 1
a1755 1
}
d1757 1
a1757 1
{
d1765 1
a1765 1
}
d1768 1
a1768 1
{
d1781 1
a1781 1
}
d1790 1
a1790 1
}
d1852 1
a1852 1
{
d1856 1
a1856 1
{
d1869 1
a1869 1
}
d1888 1
a1888 1
}
d1904 1
a1904 1
{
d1908 1
a1908 1
{
d1921 1
a1921 1
}
d1940 1
a1940 1
}
d1956 1
a1956 1
{
d1960 1
a1960 1
{
d1973 1
a1973 1
}
d1992 1
a1992 1
}
d2008 1
a2008 1
{
d2012 1
a2012 1
{
d2025 1
a2025 1
}
d2044 1
a2044 1
}
d2060 1
a2060 1
{
d2064 1
a2064 1
{
d2077 1
a2077 1
}
d2096 1
a2096 1
}
d2112 1
a2112 1
{
d2116 1
a2116 1
{
d2129 1
a2129 1
}
d2148 1
a2148 1
}
d2164 1
a2164 1
{
d2168 1
a2168 1
{
d2181 1
a2181 1
}
d2200 1
a2200 1
}
d2216 1
a2216 1
{
d2220 1
a2220 1
{
d2233 1
a2233 1
}
d2252 1
a2252 1
}
d2268 1
a2268 1
{
d2272 1
a2272 1
{
d2285 1
a2285 1
}
d2304 1
a2304 1
}
d2567 1
a2567 1
{
d2581 1
a2581 1
}
d2597 1
a2597 1
{
d2610 1
a2610 1
}
d2625 1
a2625 1
{
d2636 1
a2636 1
}
d2841 1
a2841 1
{
d2854 1
a2854 1
}
d2869 1
a2869 1
{
d2882 1
a2882 1
}
d2897 1
a2897 1
{
d2908 1
a2908 1
}
d3040 1
a3040 1
{
d3046 1
a3046 1
}
d3063 1
a3063 1
{
d3074 1
a3074 1
}
d3091 2
a3092 2
{
{
d3103 2
a3104 2
}
}
d3121 1
a3121 1
{
d3132 1
a3132 1
}
d3149 2
a3150 2
{
{
d3161 2
a3162 2
}
}
d3200 1
a3200 1
{
d3206 1
a3206 1
}
d3223 1
a3223 1
{
d3232 1
a3232 1
}
d3249 1
a3249 1
{
d3258 1
a3258 1
}
d3276 1
a3276 1
{
d3301 1
a3301 1
}
d3303 1
a3303 1
{
d3328 1
a3328 1
}
d3347 1
a3347 1
{
d3353 1
a3353 1
}
d3390 1
a3390 1
{
d3392 1
a3392 1
}
d3423 1
a3423 1
{
d3432 1
a3432 1
}
d3475 1
a3475 1
{
d3484 1
a3484 1
}
d3527 1
a3527 1
{
d3536 1
a3536 1
}
d3579 1
a3579 1
{
d3588 1
a3588 1
}
d3631 1
a3631 1
{
d3640 1
a3640 1
}
d3683 1
a3683 1
{
d3692 1
a3692 1
}
d3735 1
a3735 1
{
d3744 1
a3744 1
}
d3787 1
a3787 1
{
d3796 1
a3796 1
}
d3839 1
a3839 1
{
d3848 1
a3848 1
}
d3891 1
a3891 1
{
d3900 1
a3900 1
}
d3943 1
a3943 1
{
d3952 1
a3952 1
}
d3995 1
a3995 1
{
d4004 1
a4004 1
}
d4047 1
a4047 1
{
d4056 1
a4056 1
}
d4099 1
a4099 1
{
d4108 1
a4108 1
}
d4207 1
a4207 1
{
d4218 1
a4218 1
}
d4233 1
a4233 1
{
d4244 1
a4244 1
}
d4259 1
a4259 1
{
d4270 1
a4270 1
}
d4285 1
a4285 1
{
d4296 1
a4296 1
}
d4368 1
a4368 1
{
d4379 1
a4379 1
}
d4394 1
a4394 1
{
d4405 1
a4405 1
}
d4420 1
a4420 1
{
d4431 1
a4431 1
}
d4446 1
a4446 1
{
d4457 1
a4457 1
}
d4737 1
a4737 1
{
d4739 1
a4739 1
{
d4752 1
a4752 1
}
d4755 1
a4755 1
{
d4768 1
a4768 1
}
d4771 1
a4771 1
{
d4784 1
a4784 1
}
d4787 1
a4787 1
{
d4800 1
a4800 1
}
d4803 1
a4803 1
{
d4816 1
a4816 1
}
d4819 1
a4819 1
{
d4832 1
a4832 1
}
d4835 1
a4835 1
{
d4848 1
a4848 1
}
d4851 1
a4851 1
{
d4864 1
d4866 1
a4866 2
}
}
d4882 1
a4882 1
{
d4884 1
a4884 1
{
d4897 1
a4897 1
}
d4900 1
a4900 1
{
d4913 1
a4913 1
}
d4916 1
a4916 1
{
d4929 1
a4929 1
}
d4932 1
a4932 1
{
d4945 1
a4945 1
}
d4948 1
a4948 1
{
d4961 1
a4961 1
}
d4964 1
a4964 1
{
d4977 1
a4977 1
}
d4980 1
a4980 1
{
d4993 1
a4993 1
}
d5003 1
a5003 1
}
d5019 1
a5019 1
{
d5021 1
a5021 1
{
d5034 1
a5034 1
}
d5037 1
a5037 1
{
d5050 1
a5050 1
}
d5053 1
a5053 1
{
d5066 1
a5066 1
}
d5069 1
a5069 1
{
d5082 1
a5082 1
}
d5085 1
a5085 1
{
d5098 1
a5098 1
}
d5101 1
a5101 1
{
d5114 1
a5114 1
}
d5117 1
a5117 1
{
d5130 1
a5130 1
}
d5133 1
a5133 1
{
d5146 1
d5148 1
a5148 2
}
}
d5164 1
a5164 1
{
d5166 1
a5166 1
{
d5181 1
a5181 1
}
d5184 1
a5184 1
{
d5197 1
a5197 1
}
d5200 1
a5200 1
{
d5213 1
a5213 1
}
d5216 1
a5216 1
{
d5229 1
a5229 1
}
d5232 1
a5232 1
{
d5245 1
a5245 1
}
d5248 1
a5248 1
{
d5261 1
a5261 1
}
d5264 1
a5264 1
{
d5277 1
a5277 1
}
d5280 1
a5280 1
{
d5293 1
d5295 1
a5295 2
}
}
d5311 1
a5311 1
{
d5329 1
a5329 1
}
d5344 1
a5344 1
{
d5355 1
a5355 1
}
d5370 1
a5370 1
{
d5383 1
a5383 1
}
@


1.1.1.3
log
@import gdb-1999-07-07 pre reformat
@
text
@d2391 1
a2391 1
#define FLD(f) abuf->fields.fmt_ld.f
d2410 1
a2410 1
#define FLD(f) abuf->fields.fmt_ld.f
d2448 1
a2448 1
#define FLD(f) abuf->fields.fmt_ldr13.f
d2467 1
a2467 1
#define FLD(f) abuf->fields.fmt_ldr13.f
d2665 1
a2665 1
#define FLD(f) abuf->fields.fmt_st.f
d2684 1
a2684 1
#define FLD(f) abuf->fields.fmt_st.f
d2722 1
a2722 1
#define FLD(f) abuf->fields.fmt_str13.f
d2741 1
a2741 1
#define FLD(f) abuf->fields.fmt_str13.f
d4520 1
a4520 1
#define FLD(f) abuf->fields.fmt_copop.f
d4535 1
a4535 1
#define FLD(f) abuf->fields.fmt_copop.f
d4550 1
a4550 1
#define FLD(f) abuf->fields.fmt_copop.f
d4565 1
a4565 1
#define FLD(f) abuf->fields.fmt_bnod.f
@


1.1.1.4
log
@import gdb-1999-08-09 snapshot
@
text
@a210 1
    {
d212 1
a212 1
      CPU_IDESC (current_cpu) [labels[i].index].sem_fast_lab = labels[i].label;
d214 1
a214 1
      CPU_IDESC (current_cpu) [labels[i].index].sem_full_lab = labels[i].label;
a215 1
    }
d335 1
a335 1
			       pbb_br_type, pbb_br_npc);
d340 1
a340 1
			       CPU_PBB_BR_TYPE (current_cpu),
d401 1
a401 1
#define FLD(f) abuf->fields.sfmt_add.f
d444 1
a444 1
#define FLD(f) abuf->fields.sfmt_addi.f
d487 1
a487 1
#define FLD(f) abuf->fields.sfmt_add2.f
d530 1
a530 1
#define FLD(f) abuf->fields.sfmt_add.f
d575 1
a575 1
#define FLD(f) abuf->fields.sfmt_add.f
d594 1
a594 1
#define FLD(f) abuf->fields.sfmt_addi.f
d613 1
a613 1
#define FLD(f) abuf->fields.sfmt_add2.f
d632 1
a632 1
#define FLD(f) abuf->fields.sfmt_add.f
d675 1
a675 1
#define FLD(f) abuf->fields.sfmt_add.f
d720 1
a720 1
#define FLD(f) abuf->fields.sfmt_add.f
d739 1
a739 1
#define FLD(f) abuf->fields.sfmt_str13.f
d779 1
a779 1
#define FLD(f) abuf->fields.sfmt_addi.f
d819 1
a819 1
#define FLD(f) abuf->fields.sfmt_add2.f
d859 1
a859 1
#define FLD(f) abuf->fields.sfmt_add.f
d892 1
a892 1
#define FLD(f) abuf->fields.sfmt_add.f
d925 1
a925 1
#define FLD(f) abuf->fields.sfmt_add.f
d958 1
a958 1
#define FLD(f) abuf->fields.sfmt_str13.f
d993 1
a993 1
#define FLD(f) abuf->fields.sfmt_str13.f
d1028 1
a1028 1
#define FLD(f) abuf->fields.sfmt_str13.f
d1063 1
a1063 1
#define FLD(f) abuf->fields.sfmt_str13.f
d1098 1
a1098 1
#define FLD(f) abuf->fields.sfmt_str13.f
d1133 1
a1133 1
#define FLD(f) abuf->fields.sfmt_str13.f
d1168 1
a1168 1
#define FLD(f) abuf->fields.sfmt_str13.f
d1203 1
a1203 1
#define FLD(f) abuf->fields.sfmt_str13.f
d1238 1
a1238 1
#define FLD(f) abuf->fields.sfmt_str13.f
d1273 1
a1273 1
#define FLD(f) abuf->fields.sfmt_addi.f
d1292 1
a1292 1
#define FLD(f) abuf->fields.sfmt_addi.f
d1311 1
a1311 1
#define FLD(f) abuf->fields.sfmt_addi.f
d1330 1
a1330 1
#define FLD(f) abuf->fields.sfmt_addi.f
d1349 1
a1349 1
#define FLD(f) abuf->fields.sfmt_addi.f
d1368 1
a1368 1
#define FLD(f) abuf->fields.sfmt_addi.f
d1387 1
a1387 1
#define FLD(f) abuf->fields.sfmt_addi.f
d1415 1
a1415 1
#define FLD(f) abuf->fields.sfmt_addi.f
d1443 1
a1443 1
#define FLD(f) abuf->fields.sfmt_str13.f
d1486 1
a1486 1
#define FLD(f) abuf->fields.sfmt_str13.f
d1529 1
a1529 1
#define FLD(f) abuf->fields.sfmt_str13.f
d1560 1
a1560 1
#define FLD(f) abuf->fields.sfmt_str13.f
d1591 1
a1591 1
#define FLD(f) abuf->fields.sfmt_mov2dr.f
d1633 1
a1633 1
#define FLD(f) abuf->fields.fmt_empty.f
d1664 1
a1664 1
#define FLD(f) abuf->fields.sfmt_mov2dr.f
d1739 1
a1739 1
#define FLD(f) abuf->fields.sfmt_mov2dr.f
d1801 1
a1801 1
#define FLD(f) abuf->fields.fmt_empty.f
d1824 1
a1824 1
#define FLD(f) abuf->fields.fmt_empty.f
d1847 1
a1847 1
#define FLD(f) abuf->fields.sfmt_add.f
d1899 1
a1899 1
#define FLD(f) abuf->fields.sfmt_addi.f
d1951 1
a1951 1
#define FLD(f) abuf->fields.sfmt_addi.f
d2003 1
a2003 1
#define FLD(f) abuf->fields.sfmt_add.f
d2055 1
a2055 1
#define FLD(f) abuf->fields.sfmt_addi.f
d2107 1
a2107 1
#define FLD(f) abuf->fields.sfmt_addi.f
d2159 1
a2159 1
#define FLD(f) abuf->fields.sfmt_add.f
d2211 1
a2211 1
#define FLD(f) abuf->fields.sfmt_addi.f
d2263 1
a2263 1
#define FLD(f) abuf->fields.sfmt_addi.f
d2315 1
a2315 1
#define FLD(f) abuf->fields.sfmt_ldi8.f
d2334 1
a2334 1
#define FLD(f) abuf->fields.sfmt_ldi20.f
d2353 1
a2353 1
#define FLD(f) abuf->fields.sfmt_ldi32.f
d2372 1
a2372 1
#define FLD(f) abuf->fields.sfmt_ldr13.f
d2391 1
a2391 1
#define FLD(f) abuf->fields.sfmt_ldr13.f
d2410 1
a2410 1
#define FLD(f) abuf->fields.sfmt_ldr13.f
d2429 1
a2429 1
#define FLD(f) abuf->fields.sfmt_ldr13.f
d2448 1
a2448 1
#define FLD(f) abuf->fields.sfmt_ldr13.f
d2467 1
a2467 1
#define FLD(f) abuf->fields.sfmt_ldr13.f
d2486 1
a2486 1
#define FLD(f) abuf->fields.sfmt_ldr14.f
d2505 1
a2505 1
#define FLD(f) abuf->fields.sfmt_ldr14uh.f
d2524 1
a2524 1
#define FLD(f) abuf->fields.sfmt_ldr14ub.f
d2543 1
a2543 1
#define FLD(f) abuf->fields.sfmt_ldr15.f
d2562 1
a2562 1
#define FLD(f) abuf->fields.sfmt_ldr15gr.f
d2592 1
a2592 1
#define FLD(f) abuf->fields.sfmt_ldr15dr.f
d2620 1
a2620 1
#define FLD(f) abuf->fields.sfmt_addsp.f
d2646 1
a2646 1
#define FLD(f) abuf->fields.sfmt_str13.f
d2665 1
a2665 1
#define FLD(f) abuf->fields.sfmt_str13.f
d2684 1
a2684 1
#define FLD(f) abuf->fields.sfmt_str13.f
d2703 1
a2703 1
#define FLD(f) abuf->fields.sfmt_str13.f
d2722 1
a2722 1
#define FLD(f) abuf->fields.sfmt_str13.f
d2741 1
a2741 1
#define FLD(f) abuf->fields.sfmt_str13.f
d2760 1
a2760 1
#define FLD(f) abuf->fields.sfmt_str14.f
d2779 1
a2779 1
#define FLD(f) abuf->fields.sfmt_str14h.f
d2798 1
a2798 1
#define FLD(f) abuf->fields.sfmt_str14b.f
d2817 1
a2817 1
#define FLD(f) abuf->fields.sfmt_str15.f
d2836 1
a2836 1
#define FLD(f) abuf->fields.sfmt_str15gr.f
d2864 1
a2864 1
#define FLD(f) abuf->fields.sfmt_ldr15dr.f
d2892 1
a2892 1
#define FLD(f) abuf->fields.sfmt_addsp.f
d2918 1
a2918 1
#define FLD(f) abuf->fields.sfmt_ldr13.f
d2937 1
a2937 1
#define FLD(f) abuf->fields.sfmt_movdr.f
d2956 1
a2956 1
#define FLD(f) abuf->fields.sfmt_movdr.f
d2975 1
a2975 1
#define FLD(f) abuf->fields.sfmt_mov2dr.f
d2994 1
a2994 1
#define FLD(f) abuf->fields.sfmt_mov2dr.f
d3013 1
a3013 1
#define FLD(f) abuf->fields.sfmt_mov2dr.f
d3034 1
a3034 1
#define FLD(f) abuf->fields.sfmt_mov2dr.f
d3057 1
a3057 1
#define FLD(f) abuf->fields.sfmt_mov2dr.f
d3085 1
a3085 1
#define FLD(f) abuf->fields.sfmt_mov2dr.f
d3115 1
a3115 1
#define FLD(f) abuf->fields.sfmt_call.f
d3129 1
a3129 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
d3143 1
a3143 1
#define FLD(f) abuf->fields.sfmt_call.f
d3158 1
a3158 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
d3173 1
a3173 1
#define FLD(f) abuf->fields.fmt_empty.f
d3194 1
a3194 1
#define FLD(f) abuf->fields.fmt_empty.f
d3217 1
a3217 1
#define FLD(f) abuf->fields.sfmt_int.f
d3243 1
a3243 1
#define FLD(f) abuf->fields.fmt_empty.f
d3269 1
a3269 1
#define FLD(f) abuf->fields.fmt_empty.f
d3341 1
a3341 1
#define FLD(f) abuf->fields.sfmt_brad.f
d3350 1
a3350 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
d3364 1
a3364 1
#define FLD(f) abuf->fields.sfmt_brad.f
d3372 1
a3372 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
d3385 1
a3385 1
#define FLD(f) abuf->fields.fmt_empty.f
d3402 1
a3402 1
#define FLD(f) abuf->fields.fmt_empty.f
d3417 1
a3417 1
#define FLD(f) abuf->fields.sfmt_brad.f
d3427 1
a3427 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
d3444 1
a3444 1
#define FLD(f) abuf->fields.sfmt_brad.f
d3453 1
a3453 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
d3469 1
a3469 1
#define FLD(f) abuf->fields.sfmt_brad.f
d3479 1
a3479 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
d3496 1
a3496 1
#define FLD(f) abuf->fields.sfmt_brad.f
d3505 1
a3505 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
d3521 1
a3521 1
#define FLD(f) abuf->fields.sfmt_brad.f
d3531 1
a3531 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
d3548 1
a3548 1
#define FLD(f) abuf->fields.sfmt_brad.f
d3557 1
a3557 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
d3573 1
a3573 1
#define FLD(f) abuf->fields.sfmt_brad.f
d3583 1
a3583 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
d3600 1
a3600 1
#define FLD(f) abuf->fields.sfmt_brad.f
d3609 1
a3609 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
d3625 1
a3625 1
#define FLD(f) abuf->fields.sfmt_brad.f
d3635 1
a3635 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
d3652 1
a3652 1
#define FLD(f) abuf->fields.sfmt_brad.f
d3661 1
a3661 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
d3677 1
a3677 1
#define FLD(f) abuf->fields.sfmt_brad.f
d3687 1
a3687 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
d3704 1
a3704 1
#define FLD(f) abuf->fields.sfmt_brad.f
d3713 1
a3713 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
d3729 1
a3729 1
#define FLD(f) abuf->fields.sfmt_brad.f
d3739 1
a3739 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
d3756 1
a3756 1
#define FLD(f) abuf->fields.sfmt_brad.f
d3765 1
a3765 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
d3781 1
a3781 1
#define FLD(f) abuf->fields.sfmt_brad.f
d3791 1
a3791 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
d3808 1
a3808 1
#define FLD(f) abuf->fields.sfmt_brad.f
d3817 1
a3817 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
d3833 1
a3833 1
#define FLD(f) abuf->fields.sfmt_brad.f
d3843 1
a3843 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
d3860 1
a3860 1
#define FLD(f) abuf->fields.sfmt_brad.f
d3869 1
a3869 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
d3885 1
a3885 1
#define FLD(f) abuf->fields.sfmt_brad.f
d3895 1
a3895 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
d3912 1
a3912 1
#define FLD(f) abuf->fields.sfmt_brad.f
d3921 1
a3921 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
d3937 1
a3937 1
#define FLD(f) abuf->fields.sfmt_brad.f
d3947 1
a3947 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
d3964 1
a3964 1
#define FLD(f) abuf->fields.sfmt_brad.f
d3973 1
a3973 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
d3989 1
a3989 1
#define FLD(f) abuf->fields.sfmt_brad.f
d3999 1
a3999 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
d4016 1
a4016 1
#define FLD(f) abuf->fields.sfmt_brad.f
d4025 1
a4025 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
d4041 1
a4041 1
#define FLD(f) abuf->fields.sfmt_brad.f
d4051 1
a4051 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
d4068 1
a4068 1
#define FLD(f) abuf->fields.sfmt_brad.f
d4077 1
a4077 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
d4093 1
a4093 1
#define FLD(f) abuf->fields.sfmt_brad.f
d4103 1
a4103 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
d4120 1
a4120 1
#define FLD(f) abuf->fields.sfmt_brad.f
d4129 1
a4129 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
d4145 1
a4145 1
#define FLD(f) abuf->fields.sfmt_dmovr13pi.f
d4164 1
a4164 1
#define FLD(f) abuf->fields.sfmt_dmovr13pih.f
d4183 1
a4183 1
#define FLD(f) abuf->fields.sfmt_dmovr13pib.f
d4202 1
a4202 1
#define FLD(f) abuf->fields.sfmt_dmovr13pi.f
d4228 1
a4228 1
#define FLD(f) abuf->fields.sfmt_dmovr13pih.f
d4254 1
a4254 1
#define FLD(f) abuf->fields.sfmt_dmovr13pib.f
d4280 1
a4280 1
#define FLD(f) abuf->fields.sfmt_dmovr15pi.f
d4306 1
a4306 1
#define FLD(f) abuf->fields.sfmt_dmovr13pi.f
d4325 1
a4325 1
#define FLD(f) abuf->fields.sfmt_dmovr13pih.f
d4344 1
a4344 1
#define FLD(f) abuf->fields.sfmt_dmovr13pib.f
d4363 1
a4363 1
#define FLD(f) abuf->fields.sfmt_dmovr13pi.f
d4389 1
a4389 1
#define FLD(f) abuf->fields.sfmt_dmovr13pih.f
d4415 1
a4415 1
#define FLD(f) abuf->fields.sfmt_dmovr13pib.f
d4441 1
a4441 1
#define FLD(f) abuf->fields.sfmt_dmovr15pi.f
d4467 1
a4467 1
#define FLD(f) abuf->fields.sfmt_add2.f
d4486 1
a4486 1
#define FLD(f) abuf->fields.sfmt_add2.f
d4505 1
a4505 1
#define FLD(f) abuf->fields.fmt_empty.f
d4520 1
a4520 1
#define FLD(f) abuf->fields.fmt_empty.f
d4535 1
a4535 1
#define FLD(f) abuf->fields.fmt_empty.f
d4550 1
a4550 1
#define FLD(f) abuf->fields.fmt_empty.f
d4565 1
a4565 1
#define FLD(f) abuf->fields.fmt_empty.f
d4580 1
a4580 1
#define FLD(f) abuf->fields.sfmt_int.f
d4599 1
a4599 1
#define FLD(f) abuf->fields.sfmt_int.f
d4618 1
a4618 1
#define FLD(f) abuf->fields.sfmt_int.f
d4637 1
a4637 1
#define FLD(f) abuf->fields.sfmt_addsp.f
d4656 1
a4656 1
#define FLD(f) abuf->fields.sfmt_add2.f
d4675 1
a4675 1
#define FLD(f) abuf->fields.sfmt_add2.f
d4694 1
a4694 1
#define FLD(f) abuf->fields.sfmt_add2.f
d4713 1
a4713 1
#define FLD(f) abuf->fields.sfmt_add2.f
d4732 1
a4732 1
#define FLD(f) abuf->fields.sfmt_ldm0.f
d4877 1
a4877 1
#define FLD(f) abuf->fields.sfmt_ldm1.f
d5014 1
a5014 1
#define FLD(f) abuf->fields.sfmt_stm0.f
d5159 1
a5159 1
#define FLD(f) abuf->fields.sfmt_stm1.f
d5306 1
a5306 1
#define FLD(f) abuf->fields.sfmt_enter.f
d5339 1
a5339 1
#define FLD(f) abuf->fields.sfmt_enter.f
d5365 1
a5365 1
#define FLD(f) abuf->fields.sfmt_add.f
@


1.1.1.5
log
@import gdb-1999-10-04 snapshot
@
text
@d273 2
a274 3
    /* Update the recorded pc in the cpu state struct.
       Only necessary for WITH_SCACHE case, but to avoid the
       conditional compilation ....  */
d276 4
a279 5
    /* Virtual insns have zero size.  Overwrite vpc with address of next insn
       using the default-insn-bitsize spec.  When executing insns in parallel
       we may want to queue the fault and continue execution.  */
    vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
    vpc = sim_engine_invalid_insn (current_cpu, pc, vpc);
d3393 1
a3393 1
((void) 0); /*nop*/
d3409 1
a3409 1
((void) 0); /*nop*/
d4512 1
a4512 1
((void) 0); /*nop*/
d4527 1
a4527 1
((void) 0); /*nop*/
d4542 1
a4542 1
((void) 0); /*nop*/
d4557 1
a4557 1
((void) 0); /*nop*/
d4572 1
a4572 1
((void) 0); /*nop*/
@


