head	1.6;
access;
symbols
	gdb_6_3-20041109-release:1.5
	gdb_6_3-branch:1.5.0.66
	gdb_6_3-20041019-branchpoint:1.5
	drow_intercu-merge-20040921:1.5
	drow_intercu-merge-20040915:1.5
	jimb-gdb_6_2-e500-branch:1.5.0.68
	jimb-gdb_6_2-e500-branchpoint:1.5
	gdb_6_2-20040730-release:1.5
	gdb_6_2-branch:1.5.0.64
	gdb_6_2-2004-07-10-gmt-branchpoint:1.5
	gdb_6_1_1-20040616-release:1.5
	gdb_6_1-2004-04-05-release:1.5
	drow_intercu-merge-20040402:1.5
	drow_intercu-merge-20040327:1.5
	ezannoni_pie-20040323-branch:1.5.0.62
	ezannoni_pie-20040323-branchpoint:1.5
	cagney_tramp-20040321-mergepoint:1.5
	cagney_tramp-20040309-branch:1.5.0.60
	cagney_tramp-20040309-branchpoint:1.5
	gdb_6_1-branch:1.5.0.58
	gdb_6_1-2004-03-01-gmt-branchpoint:1.5
	drow_intercu-20040221-branch:1.5.0.56
	drow_intercu-20040221-branchpoint:1.5
	cagney_bfdfile-20040213-branch:1.5.0.54
	cagney_bfdfile-20040213-branchpoint:1.5
	drow-cplus-merge-20040208:1.5
	carlton_dictionary-20040126-merge:1.5
	cagney_bigcore-20040122-branch:1.5.0.52
	cagney_bigcore-20040122-branchpoint:1.5
	drow-cplus-merge-20040113:1.5
	drow-cplus-merge-20031224:1.5
	drow-cplus-merge-20031220:1.5
	carlton_dictionary-20031215-merge:1.5
	drow-cplus-merge-20031214:1.5
	carlton-dictionary-20031111-merge:1.5
	gdb_6_0-2003-10-04-release:1.5
	kettenis_sparc-20030918-branch:1.5.0.50
	kettenis_sparc-20030918-branchpoint:1.5
	carlton_dictionary-20030917-merge:1.5
	ezannoni_pie-20030916-branchpoint:1.5
	ezannoni_pie-20030916-branch:1.5.0.48
	cagney_x86i386-20030821-branch:1.5.0.46
	cagney_x86i386-20030821-branchpoint:1.5
	carlton_dictionary-20030805-merge:1.5
	carlton_dictionary-20030627-merge:1.5
	gdb_6_0-branch:1.5.0.44
	gdb_6_0-2003-06-23-branchpoint:1.5
	jimb-ppc64-linux-20030613-branch:1.5.0.42
	jimb-ppc64-linux-20030613-branchpoint:1.5
	cagney_convert-20030606-branch:1.5.0.40
	cagney_convert-20030606-branchpoint:1.5
	cagney_writestrings-20030508-branch:1.5.0.38
	cagney_writestrings-20030508-branchpoint:1.5
	jimb-ppc64-linux-20030528-branch:1.5.0.36
	jimb-ppc64-linux-20030528-branchpoint:1.5
	carlton_dictionary-20030523-merge:1.5
	cagney_fileio-20030521-branch:1.5.0.34
	cagney_fileio-20030521-branchpoint:1.5
	kettenis_i386newframe-20030517-mergepoint:1.5
	jimb-ppc64-linux-20030509-branch:1.5.0.32
	jimb-ppc64-linux-20030509-branchpoint:1.5
	kettenis_i386newframe-20030504-mergepoint:1.5
	carlton_dictionary-20030430-merge:1.5
	kettenis_i386newframe-20030419-branch:1.5.0.30
	kettenis_i386newframe-20030419-branchpoint:1.5
	carlton_dictionary-20030416-merge:1.5
	cagney_frameaddr-20030409-mergepoint:1.5
	kettenis_i386newframe-20030406-branch:1.5.0.28
	kettenis_i386newframe-20030406-branchpoint:1.5
	cagney_frameaddr-20030403-branchpoint:1.5
	cagney_frameaddr-20030403-branch:1.5.0.26
	cagney_framebase-20030330-mergepoint:1.5
	cagney_framebase-20030326-branch:1.5.0.24
	cagney_framebase-20030326-branchpoint:1.5
	cagney_lazyid-20030317-branch:1.5.0.22
	cagney_lazyid-20030317-branchpoint:1.5
	kettenis-i386newframe-20030316-mergepoint:1.5
	offbyone-20030313-branch:1.5.0.20
	offbyone-20030313-branchpoint:1.5
	kettenis-i386newframe-20030308-branch:1.5.0.18
	kettenis-i386newframe-20030308-branchpoint:1.5
	carlton_dictionary-20030305-merge:1.5
	cagney_offbyone-20030303-branch:1.5.0.16
	cagney_offbyone-20030303-branchpoint:1.5
	carlton_dictionary-20030207-merge:1.5
	interps-20030202-branch:1.5.0.14
	interps-20030202-branchpoint:1.5
	cagney-unwind-20030108-branch:1.5.0.12
	cagney-unwind-20030108-branchpoint:1.5
	carlton_dictionary-20021223-merge:1.5
	gdb_5_3-2002-12-12-release:1.5
	carlton_dictionary-20021115-merge:1.5
	kseitz_interps-20021105-merge:1.5
	kseitz_interps-20021103-merge:1.5
	drow-cplus-merge-20021020:1.5
	drow-cplus-merge-20021025:1.5
	carlton_dictionary-20021025-merge:1.5
	carlton_dictionary-20021011-merge:1.5
	drow-cplus-branch:1.5.0.10
	drow-cplus-branchpoint:1.5
	kseitz_interps-20020930-merge:1.5
	carlton_dictionary-20020927-merge:1.5
	carlton_dictionary-branch:1.5.0.8
	carlton_dictionary-20020920-branchpoint:1.5
	gdb_5_3-branch:1.5.0.6
	gdb_5_3-2002-09-04-branchpoint:1.5
	kseitz_interps-20020829-merge:1.5
	cagney_sysregs-20020825-branch:1.5.0.4
	cagney_sysregs-20020825-branchpoint:1.5
	readline_4_3-import-branch:1.5.0.2
	readline_4_3-import-branchpoint:1.5
	gdb_5_2_1-2002-07-23-release:1.4
	kseitz_interps-20020528-branch:1.4.0.8
	kseitz_interps-20020528-branchpoint:1.4
	cagney_regbuf-20020515-branch:1.4.0.6
	cagney_regbuf-20020515-branchpoint:1.4
	jimb-macro-020506-branch:1.4.0.4
	jimb-macro-020506-branchpoint:1.4
	gdb_5_2-2002-04-29-release:1.4
	gdb_5_2-branch:1.4.0.2
	gdb_5_2-2002-03-03-branchpoint:1.4
	gdb_5_1_1-2002-01-24-release:1.3
	gdb_5_1_0_1-2002-01-03-release:1.3
	gdb_5_1_0_1-2002-01-03-branch:1.3.0.6
	gdb_5_1_0_1-2002-01-03-branchpoint:1.3
	gdb_5_1-2001-11-21-release:1.3
	gdb_s390-2001-09-26-branch:1.3.0.4
	gdb_s390-2001-09-26-branchpoint:1.3
	gdb_5_1-2001-07-29-branch:1.3.0.2
	gdb_5_1-2001-07-29-branchpoint:1.3
	insight-precleanup-2001-01-01:1.2
	gdb-premipsmulti-2000-06-06-branch:1.1.1.4.0.4
	gdb-premipsmulti-2000-06-06-branchpoint:1.1.1.4
	gdb_5_0-2000-05-19-release:1.1.1.4
	gdb_4_18_2-2000-05-18-release:1.1.1.4
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.4
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.4
	gdb_5_0-2000-04-10-branch:1.1.1.4.0.2
	gdb_5_0-2000-04-10-branchpoint:1.1.1.4
	repo-unification-2000-02-06:1.1.1.4
	gdb-2000-02-04:1.1.1.4
	gdb-2000-02-02:1.1.1.4
	gdb-2000-02-01:1.1.1.4
	gdb-2000-01-31:1.1.1.4
	gdb-2000-01-26:1.1.1.4
	gdb-2000-01-24:1.1.1.4
	gdb-2000-01-17:1.1.1.4
	gdb-2000-01-10:1.1.1.4
	gdb-2000-01-05:1.1.1.4
	gdb-1999-12-21:1.1.1.4
	gdb-1999-12-13:1.1.1.4
	gdb-1999-12-07:1.1.1.4
	gdb-1999-12-06:1.1.1.4
	gdb-1999-11-16:1.1.1.4
	gdb-1999-11-08:1.1.1.4
	gdb-1999-11-01:1.1.1.4
	gdb-1999-10-25:1.1.1.4
	gdb-1999-10-18:1.1.1.4
	gdb-1999-10-11:1.1.1.4
	gdb-1999-10-04:1.1.1.4
	gdb-1999-09-28:1.1.1.4
	gdb-1999-09-21:1.1.1.4
	gdb-1999-09-13:1.1.1.4
	gdb-1999-09-08:1.1.1.4
	gdb-1999-08-30:1.1.1.4
	gdb-1999-08-23:1.1.1.4
	gdb-1999-08-16:1.1.1.4
	gdb-1999-08-09:1.1.1.4
	gdb-1999-08-02:1.1.1.3
	gdb-1999-07-26:1.1.1.3
	gdb-1999-07-19:1.1.1.3
	gdb-1999-07-12:1.1.1.3
	gdb-post-reformat-19990707:1.1.1.3
	gdb-1999-07-07-post-reformat-snapshot:1.1.1.3
	gdb-pre-reformat-19990707:1.1.1.3
	gdb-1999-07-07:1.1.1.3
	gdb-1999-07-05:1.1.1.2
	gdb-1999-06-28:1.1.1.2
	gdb-1999-06-21:1.1.1.2
	gdb-1999-06-14:1.1.1.2
	gdb-1999-06-07:1.1.1.2
	gdb-1999-06-01:1.1.1.2
	gdb-4_18-branch:1.1.1.1.0.2
	gdb-4_18-release:1.1.1.1
	gdb-1999-05-25:1.1.1.2
	gdb-1999-05-19:1.1.1.2
	gdb-1999-05-10:1.1.1.2
	gdb-19990504:1.1.1.2
	gdb-19990422:1.1.1.2
	SNAPSHOT:1.1.1
	gdb-4_18:1.1.1.1
	GDB_4_18:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.6
date	2004.11.12.16.45.23;	author cagney;	state dead;
branches;
next	1.5;

1.5
date	2002.07.16.14.30.13;	author cagney;	state Exp;
branches;
next	1.4;

1.4
date	2001.11.14.19.50.01;	author brolley;	state Exp;
branches
	1.4.8.1;
next	1.3;

1.3
date	2001.03.05.16.00.16;	author brolley;	state Exp;
branches;
next	1.2;

1.2
date	2000.08.28.18.19.41;	author brolley;	state Exp;
branches;
next	1.1;

1.1
date	99.04.16.01.35.01;	author shebs;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.04.16.01.35.01;	author shebs;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.04.26.18.32.09;	author shebs;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	99.07.07.17.31.28;	author jsm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	99.08.09.21.36.11;	author jsm;	state Exp;
branches;
next	;

1.4.8.1
date	2002.07.22.21.47.25;	author kseitz;	state Exp;
branches;
next	;


desc
@@


1.6
log
@2004-11-12  Andrew Cagney  <cagney@@gnu.org>

	* d30v, fr30, mn10200, z8k: Delete directory.
@
text
@// OBSOLETE /* CPU family header for fr30bf.
// OBSOLETE 
// OBSOLETE THIS FILE IS MACHINE GENERATED WITH CGEN.
// OBSOLETE 
// OBSOLETE Copyright 1996, 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.
// OBSOLETE 
// OBSOLETE This file is part of the GNU simulators.
// OBSOLETE 
// OBSOLETE This program is free software; you can redistribute it and/or modify
// OBSOLETE it under the terms of the GNU General Public License as published by
// OBSOLETE the Free Software Foundation; either version 2, or (at your option)
// OBSOLETE any later version.
// OBSOLETE 
// OBSOLETE This program is distributed in the hope that it will be useful,
// OBSOLETE but WITHOUT ANY WARRANTY; without even the implied warranty of
// OBSOLETE MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// OBSOLETE GNU General Public License for more details.
// OBSOLETE 
// OBSOLETE You should have received a copy of the GNU General Public License along
// OBSOLETE with this program; if not, write to the Free Software Foundation, Inc.,
// OBSOLETE 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
// OBSOLETE 
// OBSOLETE */
// OBSOLETE 
// OBSOLETE #ifndef CPU_FR30BF_H
// OBSOLETE #define CPU_FR30BF_H
// OBSOLETE 
// OBSOLETE /* Maximum number of instructions that are fetched at a time.
// OBSOLETE    This is for LIW type instructions sets (e.g. m32r).  */
// OBSOLETE #define MAX_LIW_INSNS 1
// OBSOLETE 
// OBSOLETE /* Maximum number of instructions that can be executed in parallel.  */
// OBSOLETE #define MAX_PARALLEL_INSNS 1
// OBSOLETE 
// OBSOLETE /* CPU state information.  */
// OBSOLETE typedef struct {
// OBSOLETE   /* Hardware elements.  */
// OBSOLETE   struct {
// OBSOLETE   /* program counter */
// OBSOLETE   USI h_pc;
// OBSOLETE #define GET_H_PC() CPU (h_pc)
// OBSOLETE #define SET_H_PC(x) (CPU (h_pc) = (x))
// OBSOLETE   /* general registers */
// OBSOLETE   SI h_gr[16];
// OBSOLETE #define GET_H_GR(a1) CPU (h_gr)[a1]
// OBSOLETE #define SET_H_GR(a1, x) (CPU (h_gr)[a1] = (x))
// OBSOLETE   /* coprocessor registers */
// OBSOLETE   SI h_cr[16];
// OBSOLETE #define GET_H_CR(a1) CPU (h_cr)[a1]
// OBSOLETE #define SET_H_CR(a1, x) (CPU (h_cr)[a1] = (x))
// OBSOLETE   /* dedicated registers */
// OBSOLETE   SI h_dr[6];
// OBSOLETE #define GET_H_DR(index) fr30bf_h_dr_get_handler (current_cpu, index)
// OBSOLETE #define SET_H_DR(index, x) \
// OBSOLETE do { \
// OBSOLETE fr30bf_h_dr_set_handler (current_cpu, (index), (x));\
// OBSOLETE ;} while (0)
// OBSOLETE   /* processor status */
// OBSOLETE   USI h_ps;
// OBSOLETE #define GET_H_PS() fr30bf_h_ps_get_handler (current_cpu)
// OBSOLETE #define SET_H_PS(x) \
// OBSOLETE do { \
// OBSOLETE fr30bf_h_ps_set_handler (current_cpu, (x));\
// OBSOLETE ;} while (0)
// OBSOLETE   /* General Register 13 explicitly required */
// OBSOLETE   SI h_r13;
// OBSOLETE #define GET_H_R13() CPU (h_r13)
// OBSOLETE #define SET_H_R13(x) (CPU (h_r13) = (x))
// OBSOLETE   /* General Register 14 explicitly required */
// OBSOLETE   SI h_r14;
// OBSOLETE #define GET_H_R14() CPU (h_r14)
// OBSOLETE #define SET_H_R14(x) (CPU (h_r14) = (x))
// OBSOLETE   /* General Register 15 explicitly required */
// OBSOLETE   SI h_r15;
// OBSOLETE #define GET_H_R15() CPU (h_r15)
// OBSOLETE #define SET_H_R15(x) (CPU (h_r15) = (x))
// OBSOLETE   /* negative         bit */
// OBSOLETE   BI h_nbit;
// OBSOLETE #define GET_H_NBIT() CPU (h_nbit)
// OBSOLETE #define SET_H_NBIT(x) (CPU (h_nbit) = (x))
// OBSOLETE   /* zero             bit */
// OBSOLETE   BI h_zbit;
// OBSOLETE #define GET_H_ZBIT() CPU (h_zbit)
// OBSOLETE #define SET_H_ZBIT(x) (CPU (h_zbit) = (x))
// OBSOLETE   /* overflow         bit */
// OBSOLETE   BI h_vbit;
// OBSOLETE #define GET_H_VBIT() CPU (h_vbit)
// OBSOLETE #define SET_H_VBIT(x) (CPU (h_vbit) = (x))
// OBSOLETE   /* carry            bit */
// OBSOLETE   BI h_cbit;
// OBSOLETE #define GET_H_CBIT() CPU (h_cbit)
// OBSOLETE #define SET_H_CBIT(x) (CPU (h_cbit) = (x))
// OBSOLETE   /* interrupt enable bit */
// OBSOLETE   BI h_ibit;
// OBSOLETE #define GET_H_IBIT() CPU (h_ibit)
// OBSOLETE #define SET_H_IBIT(x) (CPU (h_ibit) = (x))
// OBSOLETE   /* stack bit */
// OBSOLETE   BI h_sbit;
// OBSOLETE #define GET_H_SBIT() fr30bf_h_sbit_get_handler (current_cpu)
// OBSOLETE #define SET_H_SBIT(x) \
// OBSOLETE do { \
// OBSOLETE fr30bf_h_sbit_set_handler (current_cpu, (x));\
// OBSOLETE ;} while (0)
// OBSOLETE   /* trace trap       bit */
// OBSOLETE   BI h_tbit;
// OBSOLETE #define GET_H_TBIT() CPU (h_tbit)
// OBSOLETE #define SET_H_TBIT(x) (CPU (h_tbit) = (x))
// OBSOLETE   /* division 0       bit */
// OBSOLETE   BI h_d0bit;
// OBSOLETE #define GET_H_D0BIT() CPU (h_d0bit)
// OBSOLETE #define SET_H_D0BIT(x) (CPU (h_d0bit) = (x))
// OBSOLETE   /* division 1       bit */
// OBSOLETE   BI h_d1bit;
// OBSOLETE #define GET_H_D1BIT() CPU (h_d1bit)
// OBSOLETE #define SET_H_D1BIT(x) (CPU (h_d1bit) = (x))
// OBSOLETE   /* condition code bits */
// OBSOLETE   UQI h_ccr;
// OBSOLETE #define GET_H_CCR() fr30bf_h_ccr_get_handler (current_cpu)
// OBSOLETE #define SET_H_CCR(x) \
// OBSOLETE do { \
// OBSOLETE fr30bf_h_ccr_set_handler (current_cpu, (x));\
// OBSOLETE ;} while (0)
// OBSOLETE   /* system condition bits */
// OBSOLETE   UQI h_scr;
// OBSOLETE #define GET_H_SCR() fr30bf_h_scr_get_handler (current_cpu)
// OBSOLETE #define SET_H_SCR(x) \
// OBSOLETE do { \
// OBSOLETE fr30bf_h_scr_set_handler (current_cpu, (x));\
// OBSOLETE ;} while (0)
// OBSOLETE   /* interrupt level mask */
// OBSOLETE   UQI h_ilm;
// OBSOLETE #define GET_H_ILM() fr30bf_h_ilm_get_handler (current_cpu)
// OBSOLETE #define SET_H_ILM(x) \
// OBSOLETE do { \
// OBSOLETE fr30bf_h_ilm_set_handler (current_cpu, (x));\
// OBSOLETE ;} while (0)
// OBSOLETE   } hardware;
// OBSOLETE #define CPU_CGEN_HW(cpu) (& (cpu)->cpu_data.hardware)
// OBSOLETE } FR30BF_CPU_DATA;
// OBSOLETE 
// OBSOLETE /* Cover fns for register access.  */
// OBSOLETE USI fr30bf_h_pc_get (SIM_CPU *);
// OBSOLETE void fr30bf_h_pc_set (SIM_CPU *, USI);
// OBSOLETE SI fr30bf_h_gr_get (SIM_CPU *, UINT);
// OBSOLETE void fr30bf_h_gr_set (SIM_CPU *, UINT, SI);
// OBSOLETE SI fr30bf_h_cr_get (SIM_CPU *, UINT);
// OBSOLETE void fr30bf_h_cr_set (SIM_CPU *, UINT, SI);
// OBSOLETE SI fr30bf_h_dr_get (SIM_CPU *, UINT);
// OBSOLETE void fr30bf_h_dr_set (SIM_CPU *, UINT, SI);
// OBSOLETE USI fr30bf_h_ps_get (SIM_CPU *);
// OBSOLETE void fr30bf_h_ps_set (SIM_CPU *, USI);
// OBSOLETE SI fr30bf_h_r13_get (SIM_CPU *);
// OBSOLETE void fr30bf_h_r13_set (SIM_CPU *, SI);
// OBSOLETE SI fr30bf_h_r14_get (SIM_CPU *);
// OBSOLETE void fr30bf_h_r14_set (SIM_CPU *, SI);
// OBSOLETE SI fr30bf_h_r15_get (SIM_CPU *);
// OBSOLETE void fr30bf_h_r15_set (SIM_CPU *, SI);
// OBSOLETE BI fr30bf_h_nbit_get (SIM_CPU *);
// OBSOLETE void fr30bf_h_nbit_set (SIM_CPU *, BI);
// OBSOLETE BI fr30bf_h_zbit_get (SIM_CPU *);
// OBSOLETE void fr30bf_h_zbit_set (SIM_CPU *, BI);
// OBSOLETE BI fr30bf_h_vbit_get (SIM_CPU *);
// OBSOLETE void fr30bf_h_vbit_set (SIM_CPU *, BI);
// OBSOLETE BI fr30bf_h_cbit_get (SIM_CPU *);
// OBSOLETE void fr30bf_h_cbit_set (SIM_CPU *, BI);
// OBSOLETE BI fr30bf_h_ibit_get (SIM_CPU *);
// OBSOLETE void fr30bf_h_ibit_set (SIM_CPU *, BI);
// OBSOLETE BI fr30bf_h_sbit_get (SIM_CPU *);
// OBSOLETE void fr30bf_h_sbit_set (SIM_CPU *, BI);
// OBSOLETE BI fr30bf_h_tbit_get (SIM_CPU *);
// OBSOLETE void fr30bf_h_tbit_set (SIM_CPU *, BI);
// OBSOLETE BI fr30bf_h_d0bit_get (SIM_CPU *);
// OBSOLETE void fr30bf_h_d0bit_set (SIM_CPU *, BI);
// OBSOLETE BI fr30bf_h_d1bit_get (SIM_CPU *);
// OBSOLETE void fr30bf_h_d1bit_set (SIM_CPU *, BI);
// OBSOLETE UQI fr30bf_h_ccr_get (SIM_CPU *);
// OBSOLETE void fr30bf_h_ccr_set (SIM_CPU *, UQI);
// OBSOLETE UQI fr30bf_h_scr_get (SIM_CPU *);
// OBSOLETE void fr30bf_h_scr_set (SIM_CPU *, UQI);
// OBSOLETE UQI fr30bf_h_ilm_get (SIM_CPU *);
// OBSOLETE void fr30bf_h_ilm_set (SIM_CPU *, UQI);
// OBSOLETE 
// OBSOLETE /* These must be hand-written.  */
// OBSOLETE extern CPUREG_FETCH_FN fr30bf_fetch_register;
// OBSOLETE extern CPUREG_STORE_FN fr30bf_store_register;
// OBSOLETE 
// OBSOLETE typedef struct {
// OBSOLETE   UINT load_regs;
// OBSOLETE   UINT load_regs_pending;
// OBSOLETE } MODEL_FR30_1_DATA;
// OBSOLETE 
// OBSOLETE /* Instruction argument buffer.  */
// OBSOLETE 
// OBSOLETE union sem_fields {
// OBSOLETE   struct { /* no operands */
// OBSOLETE     int empty;
// OBSOLETE   } fmt_empty;
// OBSOLETE   struct { /*  */
// OBSOLETE     IADDR i_label9;
// OBSOLETE   } sfmt_brad;
// OBSOLETE   struct { /*  */
// OBSOLETE     UINT f_u8;
// OBSOLETE   } sfmt_int;
// OBSOLETE   struct { /*  */
// OBSOLETE     IADDR i_label12;
// OBSOLETE   } sfmt_call;
// OBSOLETE   struct { /*  */
// OBSOLETE     SI f_s10;
// OBSOLETE     unsigned char in_h_gr_SI_15;
// OBSOLETE     unsigned char out_h_gr_SI_15;
// OBSOLETE   } sfmt_addsp;
// OBSOLETE   struct { /*  */
// OBSOLETE     USI f_dir10;
// OBSOLETE     unsigned char in_h_gr_SI_15;
// OBSOLETE     unsigned char out_h_gr_SI_15;
// OBSOLETE   } sfmt_dmovr15pi;
// OBSOLETE   struct { /*  */
// OBSOLETE     UINT f_dir8;
// OBSOLETE     unsigned char in_h_gr_SI_13;
// OBSOLETE     unsigned char out_h_gr_SI_13;
// OBSOLETE   } sfmt_dmovr13pib;
// OBSOLETE   struct { /*  */
// OBSOLETE     USI f_dir9;
// OBSOLETE     unsigned char in_h_gr_SI_13;
// OBSOLETE     unsigned char out_h_gr_SI_13;
// OBSOLETE   } sfmt_dmovr13pih;
// OBSOLETE   struct { /*  */
// OBSOLETE     USI f_dir10;
// OBSOLETE     unsigned char in_h_gr_SI_13;
// OBSOLETE     unsigned char out_h_gr_SI_13;
// OBSOLETE   } sfmt_dmovr13pi;
// OBSOLETE   struct { /*  */
// OBSOLETE     UINT f_Rs2;
// OBSOLETE     unsigned char in_h_gr_SI_15;
// OBSOLETE     unsigned char out_h_gr_SI_15;
// OBSOLETE   } sfmt_ldr15dr;
// OBSOLETE   struct { /*  */
// OBSOLETE     SI* i_Ri;
// OBSOLETE     UINT f_Ri;
// OBSOLETE     UINT f_Rs1;
// OBSOLETE     unsigned char in_Ri;
// OBSOLETE   } sfmt_mov2dr;
// OBSOLETE   struct { /*  */
// OBSOLETE     SI* i_Ri;
// OBSOLETE     UINT f_Ri;
// OBSOLETE     UINT f_Rs1;
// OBSOLETE     unsigned char out_Ri;
// OBSOLETE   } sfmt_movdr;
// OBSOLETE   struct { /*  */
// OBSOLETE     SI* i_Ri;
// OBSOLETE     UINT f_Ri;
// OBSOLETE     UINT f_i32;
// OBSOLETE     unsigned char out_Ri;
// OBSOLETE   } sfmt_ldi32;
// OBSOLETE   struct { /*  */
// OBSOLETE     SI* i_Ri;
// OBSOLETE     UINT f_Ri;
// OBSOLETE     UINT f_i20;
// OBSOLETE     unsigned char out_Ri;
// OBSOLETE   } sfmt_ldi20;
// OBSOLETE   struct { /*  */
// OBSOLETE     SI* i_Ri;
// OBSOLETE     UINT f_Ri;
// OBSOLETE     UINT f_i8;
// OBSOLETE     unsigned char out_Ri;
// OBSOLETE   } sfmt_ldi8;
// OBSOLETE   struct { /*  */
// OBSOLETE     USI f_u10;
// OBSOLETE     unsigned char in_h_gr_SI_14;
// OBSOLETE     unsigned char in_h_gr_SI_15;
// OBSOLETE     unsigned char out_h_gr_SI_14;
// OBSOLETE     unsigned char out_h_gr_SI_15;
// OBSOLETE   } sfmt_enter;
// OBSOLETE   struct { /*  */
// OBSOLETE     SI* i_Ri;
// OBSOLETE     UINT f_Ri;
// OBSOLETE     unsigned char in_Ri;
// OBSOLETE     unsigned char in_h_gr_SI_15;
// OBSOLETE     unsigned char out_h_gr_SI_15;
// OBSOLETE   } sfmt_str15gr;
// OBSOLETE   struct { /*  */
// OBSOLETE     SI* i_Ri;
// OBSOLETE     UINT f_Ri;
// OBSOLETE     USI f_udisp6;
// OBSOLETE     unsigned char in_Ri;
// OBSOLETE     unsigned char in_h_gr_SI_15;
// OBSOLETE   } sfmt_str15;
// OBSOLETE   struct { /*  */
// OBSOLETE     SI* i_Ri;
// OBSOLETE     INT f_disp8;
// OBSOLETE     UINT f_Ri;
// OBSOLETE     unsigned char in_Ri;
// OBSOLETE     unsigned char in_h_gr_SI_14;
// OBSOLETE   } sfmt_str14b;
// OBSOLETE   struct { /*  */
// OBSOLETE     SI* i_Ri;
// OBSOLETE     SI f_disp9;
// OBSOLETE     UINT f_Ri;
// OBSOLETE     unsigned char in_Ri;
// OBSOLETE     unsigned char in_h_gr_SI_14;
// OBSOLETE   } sfmt_str14h;
// OBSOLETE   struct { /*  */
// OBSOLETE     SI* i_Ri;
// OBSOLETE     SI f_disp10;
// OBSOLETE     UINT f_Ri;
// OBSOLETE     unsigned char in_Ri;
// OBSOLETE     unsigned char in_h_gr_SI_14;
// OBSOLETE   } sfmt_str14;
// OBSOLETE   struct { /*  */
// OBSOLETE     SI* i_Ri;
// OBSOLETE     UINT f_Ri;
// OBSOLETE     unsigned char in_h_gr_SI_15;
// OBSOLETE     unsigned char out_Ri;
// OBSOLETE     unsigned char out_h_gr_SI_15;
// OBSOLETE   } sfmt_ldr15gr;
// OBSOLETE   struct { /*  */
// OBSOLETE     SI* i_Ri;
// OBSOLETE     UINT f_Ri;
// OBSOLETE     USI f_udisp6;
// OBSOLETE     unsigned char in_h_gr_SI_15;
// OBSOLETE     unsigned char out_Ri;
// OBSOLETE   } sfmt_ldr15;
// OBSOLETE   struct { /*  */
// OBSOLETE     SI* i_Ri;
// OBSOLETE     INT f_disp8;
// OBSOLETE     UINT f_Ri;
// OBSOLETE     unsigned char in_h_gr_SI_14;
// OBSOLETE     unsigned char out_Ri;
// OBSOLETE   } sfmt_ldr14ub;
// OBSOLETE   struct { /*  */
// OBSOLETE     SI* i_Ri;
// OBSOLETE     SI f_disp9;
// OBSOLETE     UINT f_Ri;
// OBSOLETE     unsigned char in_h_gr_SI_14;
// OBSOLETE     unsigned char out_Ri;
// OBSOLETE   } sfmt_ldr14uh;
// OBSOLETE   struct { /*  */
// OBSOLETE     SI* i_Ri;
// OBSOLETE     SI f_disp10;
// OBSOLETE     UINT f_Ri;
// OBSOLETE     unsigned char in_h_gr_SI_14;
// OBSOLETE     unsigned char out_Ri;
// OBSOLETE   } sfmt_ldr14;
// OBSOLETE   struct { /*  */
// OBSOLETE     SI* i_Ri;
// OBSOLETE     SI f_m4;
// OBSOLETE     UINT f_Ri;
// OBSOLETE     unsigned char in_Ri;
// OBSOLETE     unsigned char out_Ri;
// OBSOLETE   } sfmt_add2;
// OBSOLETE   struct { /*  */
// OBSOLETE     SI* i_Ri;
// OBSOLETE     UINT f_Ri;
// OBSOLETE     UINT f_u4;
// OBSOLETE     unsigned char in_Ri;
// OBSOLETE     unsigned char out_Ri;
// OBSOLETE   } sfmt_addi;
// OBSOLETE   struct { /*  */
// OBSOLETE     SI* i_Ri;
// OBSOLETE     SI* i_Rj;
// OBSOLETE     UINT f_Ri;
// OBSOLETE     UINT f_Rj;
// OBSOLETE     unsigned char in_Ri;
// OBSOLETE     unsigned char in_Rj;
// OBSOLETE     unsigned char in_h_gr_SI_13;
// OBSOLETE   } sfmt_str13;
// OBSOLETE   struct { /*  */
// OBSOLETE     SI* i_Ri;
// OBSOLETE     SI* i_Rj;
// OBSOLETE     UINT f_Ri;
// OBSOLETE     UINT f_Rj;
// OBSOLETE     unsigned char in_Rj;
// OBSOLETE     unsigned char in_h_gr_SI_13;
// OBSOLETE     unsigned char out_Ri;
// OBSOLETE   } sfmt_ldr13;
// OBSOLETE   struct { /*  */
// OBSOLETE     SI* i_Ri;
// OBSOLETE     SI* i_Rj;
// OBSOLETE     UINT f_Ri;
// OBSOLETE     UINT f_Rj;
// OBSOLETE     unsigned char in_Ri;
// OBSOLETE     unsigned char in_Rj;
// OBSOLETE     unsigned char out_Ri;
// OBSOLETE   } sfmt_add;
// OBSOLETE   struct { /*  */
// OBSOLETE     UINT f_reglist_hi_st;
// OBSOLETE     unsigned char in_h_gr_SI_10;
// OBSOLETE     unsigned char in_h_gr_SI_11;
// OBSOLETE     unsigned char in_h_gr_SI_12;
// OBSOLETE     unsigned char in_h_gr_SI_13;
// OBSOLETE     unsigned char in_h_gr_SI_14;
// OBSOLETE     unsigned char in_h_gr_SI_15;
// OBSOLETE     unsigned char in_h_gr_SI_8;
// OBSOLETE     unsigned char in_h_gr_SI_9;
// OBSOLETE     unsigned char out_h_gr_SI_15;
// OBSOLETE   } sfmt_stm1;
// OBSOLETE   struct { /*  */
// OBSOLETE     UINT f_reglist_hi_ld;
// OBSOLETE     unsigned char in_h_gr_SI_15;
// OBSOLETE     unsigned char out_h_gr_SI_10;
// OBSOLETE     unsigned char out_h_gr_SI_11;
// OBSOLETE     unsigned char out_h_gr_SI_12;
// OBSOLETE     unsigned char out_h_gr_SI_13;
// OBSOLETE     unsigned char out_h_gr_SI_14;
// OBSOLETE     unsigned char out_h_gr_SI_15;
// OBSOLETE     unsigned char out_h_gr_SI_8;
// OBSOLETE     unsigned char out_h_gr_SI_9;
// OBSOLETE   } sfmt_ldm1;
// OBSOLETE   struct { /*  */
// OBSOLETE     UINT f_reglist_low_st;
// OBSOLETE     unsigned char in_h_gr_SI_0;
// OBSOLETE     unsigned char in_h_gr_SI_1;
// OBSOLETE     unsigned char in_h_gr_SI_15;
// OBSOLETE     unsigned char in_h_gr_SI_2;
// OBSOLETE     unsigned char in_h_gr_SI_3;
// OBSOLETE     unsigned char in_h_gr_SI_4;
// OBSOLETE     unsigned char in_h_gr_SI_5;
// OBSOLETE     unsigned char in_h_gr_SI_6;
// OBSOLETE     unsigned char in_h_gr_SI_7;
// OBSOLETE     unsigned char out_h_gr_SI_15;
// OBSOLETE   } sfmt_stm0;
// OBSOLETE   struct { /*  */
// OBSOLETE     UINT f_reglist_low_ld;
// OBSOLETE     unsigned char in_h_gr_SI_15;
// OBSOLETE     unsigned char out_h_gr_SI_0;
// OBSOLETE     unsigned char out_h_gr_SI_1;
// OBSOLETE     unsigned char out_h_gr_SI_15;
// OBSOLETE     unsigned char out_h_gr_SI_2;
// OBSOLETE     unsigned char out_h_gr_SI_3;
// OBSOLETE     unsigned char out_h_gr_SI_4;
// OBSOLETE     unsigned char out_h_gr_SI_5;
// OBSOLETE     unsigned char out_h_gr_SI_6;
// OBSOLETE     unsigned char out_h_gr_SI_7;
// OBSOLETE   } sfmt_ldm0;
// OBSOLETE #if WITH_SCACHE_PBB
// OBSOLETE   /* Writeback handler.  */
// OBSOLETE   struct {
// OBSOLETE     /* Pointer to argbuf entry for insn whose results need writing back.  */
// OBSOLETE     const struct argbuf *abuf;
// OBSOLETE   } write;
// OBSOLETE   /* x-before handler */
// OBSOLETE   struct {
// OBSOLETE     /*const SCACHE *insns[MAX_PARALLEL_INSNS];*/
// OBSOLETE     int first_p;
// OBSOLETE   } before;
// OBSOLETE   /* x-after handler */
// OBSOLETE   struct {
// OBSOLETE     int empty;
// OBSOLETE   } after;
// OBSOLETE   /* This entry is used to terminate each pbb.  */
// OBSOLETE   struct {
// OBSOLETE     /* Number of insns in pbb.  */
// OBSOLETE     int insn_count;
// OBSOLETE     /* Next pbb to execute.  */
// OBSOLETE     SCACHE *next;
// OBSOLETE     SCACHE *branch_target;
// OBSOLETE   } chain;
// OBSOLETE #endif
// OBSOLETE };
// OBSOLETE 
// OBSOLETE /* The ARGBUF struct.  */
// OBSOLETE struct argbuf {
// OBSOLETE   /* These are the baseclass definitions.  */
// OBSOLETE   IADDR addr;
// OBSOLETE   const IDESC *idesc;
// OBSOLETE   char trace_p;
// OBSOLETE   char profile_p;
// OBSOLETE   /* ??? Temporary hack for skip insns.  */
// OBSOLETE   char skip_count;
// OBSOLETE   char unused;
// OBSOLETE   /* cpu specific data follows */
// OBSOLETE   union sem semantic;
// OBSOLETE   int written;
// OBSOLETE   union sem_fields fields;
// OBSOLETE };
// OBSOLETE 
// OBSOLETE /* A cached insn.
// OBSOLETE 
// OBSOLETE    ??? SCACHE used to contain more than just argbuf.  We could delete the
// OBSOLETE    type entirely and always just use ARGBUF, but for future concerns and as
// OBSOLETE    a level of abstraction it is left in.  */
// OBSOLETE 
// OBSOLETE struct scache {
// OBSOLETE   struct argbuf argbuf;
// OBSOLETE };
// OBSOLETE 
// OBSOLETE /* Macros to simplify extraction, reading and semantic code.
// OBSOLETE    These define and assign the local vars that contain the insn's fields.  */
// OBSOLETE 
// OBSOLETE #define EXTRACT_IFMT_EMPTY_VARS \
// OBSOLETE   unsigned int length;
// OBSOLETE #define EXTRACT_IFMT_EMPTY_CODE \
// OBSOLETE   length = 0; \
// OBSOLETE 
// OBSOLETE #define EXTRACT_IFMT_ADD_VARS \
// OBSOLETE   UINT f_op1; \
// OBSOLETE   UINT f_op2; \
// OBSOLETE   UINT f_Rj; \
// OBSOLETE   UINT f_Ri; \
// OBSOLETE   unsigned int length;
// OBSOLETE #define EXTRACT_IFMT_ADD_CODE \
// OBSOLETE   length = 2; \
// OBSOLETE   f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
// OBSOLETE   f_op2 = EXTRACT_MSB0_UINT (insn, 16, 4, 4); \
// OBSOLETE   f_Rj = EXTRACT_MSB0_UINT (insn, 16, 8, 4); \
// OBSOLETE   f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4); \
// OBSOLETE 
// OBSOLETE #define EXTRACT_IFMT_ADDI_VARS \
// OBSOLETE   UINT f_op1; \
// OBSOLETE   UINT f_op2; \
// OBSOLETE   UINT f_u4; \
// OBSOLETE   UINT f_Ri; \
// OBSOLETE   unsigned int length;
// OBSOLETE #define EXTRACT_IFMT_ADDI_CODE \
// OBSOLETE   length = 2; \
// OBSOLETE   f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
// OBSOLETE   f_op2 = EXTRACT_MSB0_UINT (insn, 16, 4, 4); \
// OBSOLETE   f_u4 = EXTRACT_MSB0_UINT (insn, 16, 8, 4); \
// OBSOLETE   f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4); \
// OBSOLETE 
// OBSOLETE #define EXTRACT_IFMT_ADD2_VARS \
// OBSOLETE   UINT f_op1; \
// OBSOLETE   UINT f_op2; \
// OBSOLETE   SI f_m4; \
// OBSOLETE   UINT f_Ri; \
// OBSOLETE   unsigned int length;
// OBSOLETE #define EXTRACT_IFMT_ADD2_CODE \
// OBSOLETE   length = 2; \
// OBSOLETE   f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
// OBSOLETE   f_op2 = EXTRACT_MSB0_UINT (insn, 16, 4, 4); \
// OBSOLETE   f_m4 = ((EXTRACT_MSB0_UINT (insn, 16, 8, 4)) | (((-1) << (4)))); \
// OBSOLETE   f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4); \
// OBSOLETE 
// OBSOLETE #define EXTRACT_IFMT_DIV0S_VARS \
// OBSOLETE   UINT f_op1; \
// OBSOLETE   UINT f_op2; \
// OBSOLETE   UINT f_op3; \
// OBSOLETE   UINT f_Ri; \
// OBSOLETE   unsigned int length;
// OBSOLETE #define EXTRACT_IFMT_DIV0S_CODE \
// OBSOLETE   length = 2; \
// OBSOLETE   f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
// OBSOLETE   f_op2 = EXTRACT_MSB0_UINT (insn, 16, 4, 4); \
// OBSOLETE   f_op3 = EXTRACT_MSB0_UINT (insn, 16, 8, 4); \
// OBSOLETE   f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4); \
// OBSOLETE 
// OBSOLETE #define EXTRACT_IFMT_DIV3_VARS \
// OBSOLETE   UINT f_op1; \
// OBSOLETE   UINT f_op2; \
// OBSOLETE   UINT f_op3; \
// OBSOLETE   UINT f_op4; \
// OBSOLETE   unsigned int length;
// OBSOLETE #define EXTRACT_IFMT_DIV3_CODE \
// OBSOLETE   length = 2; \
// OBSOLETE   f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
// OBSOLETE   f_op2 = EXTRACT_MSB0_UINT (insn, 16, 4, 4); \
// OBSOLETE   f_op3 = EXTRACT_MSB0_UINT (insn, 16, 8, 4); \
// OBSOLETE   f_op4 = EXTRACT_MSB0_UINT (insn, 16, 12, 4); \
// OBSOLETE 
// OBSOLETE #define EXTRACT_IFMT_LDI8_VARS \
// OBSOLETE   UINT f_op1; \
// OBSOLETE   UINT f_i8; \
// OBSOLETE   UINT f_Ri; \
// OBSOLETE   unsigned int length;
// OBSOLETE #define EXTRACT_IFMT_LDI8_CODE \
// OBSOLETE   length = 2; \
// OBSOLETE   f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
// OBSOLETE   f_i8 = EXTRACT_MSB0_UINT (insn, 16, 4, 8); \
// OBSOLETE   f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4); \
// OBSOLETE 
// OBSOLETE #define EXTRACT_IFMT_LDI20_VARS \
// OBSOLETE   UINT f_op1; \
// OBSOLETE   UINT f_i20_4; \
// OBSOLETE   UINT f_i20_16; \
// OBSOLETE   UINT f_i20; \
// OBSOLETE   UINT f_op2; \
// OBSOLETE   UINT f_Ri; \
// OBSOLETE   /* Contents of trailing part of insn.  */ \
// OBSOLETE   UINT word_1; \
// OBSOLETE   unsigned int length;
// OBSOLETE #define EXTRACT_IFMT_LDI20_CODE \
// OBSOLETE   length = 4; \
// OBSOLETE   word_1 = GETIMEMUHI (current_cpu, pc + 2); \
// OBSOLETE   f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
// OBSOLETE   f_i20_4 = EXTRACT_MSB0_UINT (insn, 16, 8, 4); \
// OBSOLETE   f_i20_16 = (0|(EXTRACT_MSB0_UINT (word_1, 16, 0, 16) << 0)); \
// OBSOLETE {\
// OBSOLETE   f_i20 = ((((f_i20_4) << (16))) | (f_i20_16));\
// OBSOLETE }\
// OBSOLETE   f_op2 = EXTRACT_MSB0_UINT (insn, 16, 4, 4); \
// OBSOLETE   f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4); \
// OBSOLETE 
// OBSOLETE #define EXTRACT_IFMT_LDI32_VARS \
// OBSOLETE   UINT f_op1; \
// OBSOLETE   UINT f_i32; \
// OBSOLETE   UINT f_op2; \
// OBSOLETE   UINT f_op3; \
// OBSOLETE   UINT f_Ri; \
// OBSOLETE   /* Contents of trailing part of insn.  */ \
// OBSOLETE   UINT word_1; \
// OBSOLETE   UINT word_2; \
// OBSOLETE   unsigned int length;
// OBSOLETE #define EXTRACT_IFMT_LDI32_CODE \
// OBSOLETE   length = 6; \
// OBSOLETE   word_1 = GETIMEMUHI (current_cpu, pc + 2); \
// OBSOLETE   word_2 = GETIMEMUHI (current_cpu, pc + 4); \
// OBSOLETE   f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
// OBSOLETE   f_i32 = (0|(EXTRACT_MSB0_UINT (word_2, 16, 0, 16) << 0)|(EXTRACT_MSB0_UINT (word_1, 16, 0, 16) << 16)); \
// OBSOLETE   f_op2 = EXTRACT_MSB0_UINT (insn, 16, 4, 4); \
// OBSOLETE   f_op3 = EXTRACT_MSB0_UINT (insn, 16, 8, 4); \
// OBSOLETE   f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4); \
// OBSOLETE 
// OBSOLETE #define EXTRACT_IFMT_LDR14_VARS \
// OBSOLETE   UINT f_op1; \
// OBSOLETE   SI f_disp10; \
// OBSOLETE   UINT f_Ri; \
// OBSOLETE   unsigned int length;
// OBSOLETE #define EXTRACT_IFMT_LDR14_CODE \
// OBSOLETE   length = 2; \
// OBSOLETE   f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
// OBSOLETE   f_disp10 = ((EXTRACT_MSB0_INT (insn, 16, 4, 8)) << (2)); \
// OBSOLETE   f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4); \
// OBSOLETE 
// OBSOLETE #define EXTRACT_IFMT_LDR14UH_VARS \
// OBSOLETE   UINT f_op1; \
// OBSOLETE   SI f_disp9; \
// OBSOLETE   UINT f_Ri; \
// OBSOLETE   unsigned int length;
// OBSOLETE #define EXTRACT_IFMT_LDR14UH_CODE \
// OBSOLETE   length = 2; \
// OBSOLETE   f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
// OBSOLETE   f_disp9 = ((EXTRACT_MSB0_INT (insn, 16, 4, 8)) << (1)); \
// OBSOLETE   f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4); \
// OBSOLETE 
// OBSOLETE #define EXTRACT_IFMT_LDR14UB_VARS \
// OBSOLETE   UINT f_op1; \
// OBSOLETE   INT f_disp8; \
// OBSOLETE   UINT f_Ri; \
// OBSOLETE   unsigned int length;
// OBSOLETE #define EXTRACT_IFMT_LDR14UB_CODE \
// OBSOLETE   length = 2; \
// OBSOLETE   f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
// OBSOLETE   f_disp8 = EXTRACT_MSB0_INT (insn, 16, 4, 8); \
// OBSOLETE   f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4); \
// OBSOLETE 
// OBSOLETE #define EXTRACT_IFMT_LDR15_VARS \
// OBSOLETE   UINT f_op1; \
// OBSOLETE   UINT f_op2; \
// OBSOLETE   USI f_udisp6; \
// OBSOLETE   UINT f_Ri; \
// OBSOLETE   unsigned int length;
// OBSOLETE #define EXTRACT_IFMT_LDR15_CODE \
// OBSOLETE   length = 2; \
// OBSOLETE   f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
// OBSOLETE   f_op2 = EXTRACT_MSB0_UINT (insn, 16, 4, 4); \
// OBSOLETE   f_udisp6 = ((EXTRACT_MSB0_UINT (insn, 16, 8, 4)) << (2)); \
// OBSOLETE   f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4); \
// OBSOLETE 
// OBSOLETE #define EXTRACT_IFMT_LDR15DR_VARS \
// OBSOLETE   UINT f_op1; \
// OBSOLETE   UINT f_op2; \
// OBSOLETE   UINT f_op3; \
// OBSOLETE   UINT f_Rs2; \
// OBSOLETE   unsigned int length;
// OBSOLETE #define EXTRACT_IFMT_LDR15DR_CODE \
// OBSOLETE   length = 2; \
// OBSOLETE   f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
// OBSOLETE   f_op2 = EXTRACT_MSB0_UINT (insn, 16, 4, 4); \
// OBSOLETE   f_op3 = EXTRACT_MSB0_UINT (insn, 16, 8, 4); \
// OBSOLETE   f_Rs2 = EXTRACT_MSB0_UINT (insn, 16, 12, 4); \
// OBSOLETE 
// OBSOLETE #define EXTRACT_IFMT_MOVDR_VARS \
// OBSOLETE   UINT f_op1; \
// OBSOLETE   UINT f_op2; \
// OBSOLETE   UINT f_Rs1; \
// OBSOLETE   UINT f_Ri; \
// OBSOLETE   unsigned int length;
// OBSOLETE #define EXTRACT_IFMT_MOVDR_CODE \
// OBSOLETE   length = 2; \
// OBSOLETE   f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
// OBSOLETE   f_op2 = EXTRACT_MSB0_UINT (insn, 16, 4, 4); \
// OBSOLETE   f_Rs1 = EXTRACT_MSB0_UINT (insn, 16, 8, 4); \
// OBSOLETE   f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4); \
// OBSOLETE 
// OBSOLETE #define EXTRACT_IFMT_CALL_VARS \
// OBSOLETE   UINT f_op1; \
// OBSOLETE   UINT f_op5; \
// OBSOLETE   SI f_rel12; \
// OBSOLETE   unsigned int length;
// OBSOLETE #define EXTRACT_IFMT_CALL_CODE \
// OBSOLETE   length = 2; \
// OBSOLETE   f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
// OBSOLETE   f_op5 = EXTRACT_MSB0_UINT (insn, 16, 4, 1); \
// OBSOLETE   f_rel12 = ((((EXTRACT_MSB0_INT (insn, 16, 5, 11)) << (1))) + (((pc) + (2)))); \
// OBSOLETE 
// OBSOLETE #define EXTRACT_IFMT_INT_VARS \
// OBSOLETE   UINT f_op1; \
// OBSOLETE   UINT f_op2; \
// OBSOLETE   UINT f_u8; \
// OBSOLETE   unsigned int length;
// OBSOLETE #define EXTRACT_IFMT_INT_CODE \
// OBSOLETE   length = 2; \
// OBSOLETE   f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
// OBSOLETE   f_op2 = EXTRACT_MSB0_UINT (insn, 16, 4, 4); \
// OBSOLETE   f_u8 = EXTRACT_MSB0_UINT (insn, 16, 8, 8); \
// OBSOLETE 
// OBSOLETE #define EXTRACT_IFMT_BRAD_VARS \
// OBSOLETE   UINT f_op1; \
// OBSOLETE   UINT f_cc; \
// OBSOLETE   SI f_rel9; \
// OBSOLETE   unsigned int length;
// OBSOLETE #define EXTRACT_IFMT_BRAD_CODE \
// OBSOLETE   length = 2; \
// OBSOLETE   f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
// OBSOLETE   f_cc = EXTRACT_MSB0_UINT (insn, 16, 4, 4); \
// OBSOLETE   f_rel9 = ((((EXTRACT_MSB0_INT (insn, 16, 8, 8)) << (1))) + (((pc) + (2)))); \
// OBSOLETE 
// OBSOLETE #define EXTRACT_IFMT_DMOVR13_VARS \
// OBSOLETE   UINT f_op1; \
// OBSOLETE   UINT f_op2; \
// OBSOLETE   USI f_dir10; \
// OBSOLETE   unsigned int length;
// OBSOLETE #define EXTRACT_IFMT_DMOVR13_CODE \
// OBSOLETE   length = 2; \
// OBSOLETE   f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
// OBSOLETE   f_op2 = EXTRACT_MSB0_UINT (insn, 16, 4, 4); \
// OBSOLETE   f_dir10 = ((EXTRACT_MSB0_UINT (insn, 16, 8, 8)) << (2)); \
// OBSOLETE 
// OBSOLETE #define EXTRACT_IFMT_DMOVR13H_VARS \
// OBSOLETE   UINT f_op1; \
// OBSOLETE   UINT f_op2; \
// OBSOLETE   USI f_dir9; \
// OBSOLETE   unsigned int length;
// OBSOLETE #define EXTRACT_IFMT_DMOVR13H_CODE \
// OBSOLETE   length = 2; \
// OBSOLETE   f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
// OBSOLETE   f_op2 = EXTRACT_MSB0_UINT (insn, 16, 4, 4); \
// OBSOLETE   f_dir9 = ((EXTRACT_MSB0_UINT (insn, 16, 8, 8)) << (1)); \
// OBSOLETE 
// OBSOLETE #define EXTRACT_IFMT_DMOVR13B_VARS \
// OBSOLETE   UINT f_op1; \
// OBSOLETE   UINT f_op2; \
// OBSOLETE   UINT f_dir8; \
// OBSOLETE   unsigned int length;
// OBSOLETE #define EXTRACT_IFMT_DMOVR13B_CODE \
// OBSOLETE   length = 2; \
// OBSOLETE   f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
// OBSOLETE   f_op2 = EXTRACT_MSB0_UINT (insn, 16, 4, 4); \
// OBSOLETE   f_dir8 = EXTRACT_MSB0_UINT (insn, 16, 8, 8); \
// OBSOLETE 
// OBSOLETE #define EXTRACT_IFMT_COPOP_VARS \
// OBSOLETE   UINT f_op1; \
// OBSOLETE   UINT f_ccc; \
// OBSOLETE   UINT f_op2; \
// OBSOLETE   UINT f_op3; \
// OBSOLETE   UINT f_CRj; \
// OBSOLETE   UINT f_u4c; \
// OBSOLETE   UINT f_CRi; \
// OBSOLETE   /* Contents of trailing part of insn.  */ \
// OBSOLETE   UINT word_1; \
// OBSOLETE   unsigned int length;
// OBSOLETE #define EXTRACT_IFMT_COPOP_CODE \
// OBSOLETE   length = 4; \
// OBSOLETE   word_1 = GETIMEMUHI (current_cpu, pc + 2); \
// OBSOLETE   f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
// OBSOLETE   f_ccc = (0|(EXTRACT_MSB0_UINT (word_1, 16, 0, 8) << 0)); \
// OBSOLETE   f_op2 = EXTRACT_MSB0_UINT (insn, 16, 4, 4); \
// OBSOLETE   f_op3 = EXTRACT_MSB0_UINT (insn, 16, 8, 4); \
// OBSOLETE   f_CRj = (0|(EXTRACT_MSB0_UINT (word_1, 16, 8, 4) << 0)); \
// OBSOLETE   f_u4c = EXTRACT_MSB0_UINT (insn, 16, 12, 4); \
// OBSOLETE   f_CRi = (0|(EXTRACT_MSB0_UINT (word_1, 16, 12, 4) << 0)); \
// OBSOLETE 
// OBSOLETE #define EXTRACT_IFMT_COPLD_VARS \
// OBSOLETE   UINT f_op1; \
// OBSOLETE   UINT f_ccc; \
// OBSOLETE   UINT f_op2; \
// OBSOLETE   UINT f_op3; \
// OBSOLETE   UINT f_Rjc; \
// OBSOLETE   UINT f_u4c; \
// OBSOLETE   UINT f_CRi; \
// OBSOLETE   /* Contents of trailing part of insn.  */ \
// OBSOLETE   UINT word_1; \
// OBSOLETE   unsigned int length;
// OBSOLETE #define EXTRACT_IFMT_COPLD_CODE \
// OBSOLETE   length = 4; \
// OBSOLETE   word_1 = GETIMEMUHI (current_cpu, pc + 2); \
// OBSOLETE   f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
// OBSOLETE   f_ccc = (0|(EXTRACT_MSB0_UINT (word_1, 16, 0, 8) << 0)); \
// OBSOLETE   f_op2 = EXTRACT_MSB0_UINT (insn, 16, 4, 4); \
// OBSOLETE   f_op3 = EXTRACT_MSB0_UINT (insn, 16, 8, 4); \
// OBSOLETE   f_Rjc = (0|(EXTRACT_MSB0_UINT (word_1, 16, 8, 4) << 0)); \
// OBSOLETE   f_u4c = EXTRACT_MSB0_UINT (insn, 16, 12, 4); \
// OBSOLETE   f_CRi = (0|(EXTRACT_MSB0_UINT (word_1, 16, 12, 4) << 0)); \
// OBSOLETE 
// OBSOLETE #define EXTRACT_IFMT_COPST_VARS \
// OBSOLETE   UINT f_op1; \
// OBSOLETE   UINT f_ccc; \
// OBSOLETE   UINT f_op2; \
// OBSOLETE   UINT f_op3; \
// OBSOLETE   UINT f_CRj; \
// OBSOLETE   UINT f_u4c; \
// OBSOLETE   UINT f_Ric; \
// OBSOLETE   /* Contents of trailing part of insn.  */ \
// OBSOLETE   UINT word_1; \
// OBSOLETE   unsigned int length;
// OBSOLETE #define EXTRACT_IFMT_COPST_CODE \
// OBSOLETE   length = 4; \
// OBSOLETE   word_1 = GETIMEMUHI (current_cpu, pc + 2); \
// OBSOLETE   f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
// OBSOLETE   f_ccc = (0|(EXTRACT_MSB0_UINT (word_1, 16, 0, 8) << 0)); \
// OBSOLETE   f_op2 = EXTRACT_MSB0_UINT (insn, 16, 4, 4); \
// OBSOLETE   f_op3 = EXTRACT_MSB0_UINT (insn, 16, 8, 4); \
// OBSOLETE   f_CRj = (0|(EXTRACT_MSB0_UINT (word_1, 16, 8, 4) << 0)); \
// OBSOLETE   f_u4c = EXTRACT_MSB0_UINT (insn, 16, 12, 4); \
// OBSOLETE   f_Ric = (0|(EXTRACT_MSB0_UINT (word_1, 16, 12, 4) << 0)); \
// OBSOLETE 
// OBSOLETE #define EXTRACT_IFMT_ADDSP_VARS \
// OBSOLETE   UINT f_op1; \
// OBSOLETE   UINT f_op2; \
// OBSOLETE   SI f_s10; \
// OBSOLETE   unsigned int length;
// OBSOLETE #define EXTRACT_IFMT_ADDSP_CODE \
// OBSOLETE   length = 2; \
// OBSOLETE   f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
// OBSOLETE   f_op2 = EXTRACT_MSB0_UINT (insn, 16, 4, 4); \
// OBSOLETE   f_s10 = ((EXTRACT_MSB0_INT (insn, 16, 8, 8)) << (2)); \
// OBSOLETE 
// OBSOLETE #define EXTRACT_IFMT_LDM0_VARS \
// OBSOLETE   UINT f_op1; \
// OBSOLETE   UINT f_op2; \
// OBSOLETE   UINT f_reglist_low_ld; \
// OBSOLETE   unsigned int length;
// OBSOLETE #define EXTRACT_IFMT_LDM0_CODE \
// OBSOLETE   length = 2; \
// OBSOLETE   f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
// OBSOLETE   f_op2 = EXTRACT_MSB0_UINT (insn, 16, 4, 4); \
// OBSOLETE   f_reglist_low_ld = EXTRACT_MSB0_UINT (insn, 16, 8, 8); \
// OBSOLETE 
// OBSOLETE #define EXTRACT_IFMT_LDM1_VARS \
// OBSOLETE   UINT f_op1; \
// OBSOLETE   UINT f_op2; \
// OBSOLETE   UINT f_reglist_hi_ld; \
// OBSOLETE   unsigned int length;
// OBSOLETE #define EXTRACT_IFMT_LDM1_CODE \
// OBSOLETE   length = 2; \
// OBSOLETE   f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
// OBSOLETE   f_op2 = EXTRACT_MSB0_UINT (insn, 16, 4, 4); \
// OBSOLETE   f_reglist_hi_ld = EXTRACT_MSB0_UINT (insn, 16, 8, 8); \
// OBSOLETE 
// OBSOLETE #define EXTRACT_IFMT_STM0_VARS \
// OBSOLETE   UINT f_op1; \
// OBSOLETE   UINT f_op2; \
// OBSOLETE   UINT f_reglist_low_st; \
// OBSOLETE   unsigned int length;
// OBSOLETE #define EXTRACT_IFMT_STM0_CODE \
// OBSOLETE   length = 2; \
// OBSOLETE   f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
// OBSOLETE   f_op2 = EXTRACT_MSB0_UINT (insn, 16, 4, 4); \
// OBSOLETE   f_reglist_low_st = EXTRACT_MSB0_UINT (insn, 16, 8, 8); \
// OBSOLETE 
// OBSOLETE #define EXTRACT_IFMT_STM1_VARS \
// OBSOLETE   UINT f_op1; \
// OBSOLETE   UINT f_op2; \
// OBSOLETE   UINT f_reglist_hi_st; \
// OBSOLETE   unsigned int length;
// OBSOLETE #define EXTRACT_IFMT_STM1_CODE \
// OBSOLETE   length = 2; \
// OBSOLETE   f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
// OBSOLETE   f_op2 = EXTRACT_MSB0_UINT (insn, 16, 4, 4); \
// OBSOLETE   f_reglist_hi_st = EXTRACT_MSB0_UINT (insn, 16, 8, 8); \
// OBSOLETE 
// OBSOLETE #define EXTRACT_IFMT_ENTER_VARS \
// OBSOLETE   UINT f_op1; \
// OBSOLETE   UINT f_op2; \
// OBSOLETE   USI f_u10; \
// OBSOLETE   unsigned int length;
// OBSOLETE #define EXTRACT_IFMT_ENTER_CODE \
// OBSOLETE   length = 2; \
// OBSOLETE   f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
// OBSOLETE   f_op2 = EXTRACT_MSB0_UINT (insn, 16, 4, 4); \
// OBSOLETE   f_u10 = ((EXTRACT_MSB0_UINT (insn, 16, 8, 8)) << (2)); \
// OBSOLETE 
// OBSOLETE /* Collection of various things for the trace handler to use.  */
// OBSOLETE 
// OBSOLETE typedef struct trace_record {
// OBSOLETE   IADDR pc;
// OBSOLETE   /* FIXME:wip */
// OBSOLETE } TRACE_RECORD;
// OBSOLETE 
// OBSOLETE #endif /* CPU_FR30BF_H */
@


1.5
log
@Obsolete fr30.
@
text
@@


1.4
log
@2001-11-14  Dave Brolley  <brolley@@redhat.com>

	* arch.c: Regenerate.
	* arch.h: Regenerate.
	* cpu.c: Regenerate.
	* cpu.h: Regenerate.
	* cpuall.h: Regenerate.
	* decode.c: Regenerate.
	* decode.h: Regenerate.
	* model.c: Regenerate.
	* sem-switch.c: Regenerate.
	* sem.c: Regenerate.
@
text
@d1 890
a890 890
/* CPU family header for fr30bf.

THIS FILE IS MACHINE GENERATED WITH CGEN.

Copyright 1996, 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.

This file is part of the GNU simulators.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License along
with this program; if not, write to the Free Software Foundation, Inc.,
59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

*/

#ifndef CPU_FR30BF_H
#define CPU_FR30BF_H

/* Maximum number of instructions that are fetched at a time.
   This is for LIW type instructions sets (e.g. m32r).  */
#define MAX_LIW_INSNS 1

/* Maximum number of instructions that can be executed in parallel.  */
#define MAX_PARALLEL_INSNS 1

/* CPU state information.  */
typedef struct {
  /* Hardware elements.  */
  struct {
  /* program counter */
  USI h_pc;
#define GET_H_PC() CPU (h_pc)
#define SET_H_PC(x) (CPU (h_pc) = (x))
  /* general registers */
  SI h_gr[16];
#define GET_H_GR(a1) CPU (h_gr)[a1]
#define SET_H_GR(a1, x) (CPU (h_gr)[a1] = (x))
  /* coprocessor registers */
  SI h_cr[16];
#define GET_H_CR(a1) CPU (h_cr)[a1]
#define SET_H_CR(a1, x) (CPU (h_cr)[a1] = (x))
  /* dedicated registers */
  SI h_dr[6];
#define GET_H_DR(index) fr30bf_h_dr_get_handler (current_cpu, index)
#define SET_H_DR(index, x) \
do { \
fr30bf_h_dr_set_handler (current_cpu, (index), (x));\
;} while (0)
  /* processor status */
  USI h_ps;
#define GET_H_PS() fr30bf_h_ps_get_handler (current_cpu)
#define SET_H_PS(x) \
do { \
fr30bf_h_ps_set_handler (current_cpu, (x));\
;} while (0)
  /* General Register 13 explicitly required */
  SI h_r13;
#define GET_H_R13() CPU (h_r13)
#define SET_H_R13(x) (CPU (h_r13) = (x))
  /* General Register 14 explicitly required */
  SI h_r14;
#define GET_H_R14() CPU (h_r14)
#define SET_H_R14(x) (CPU (h_r14) = (x))
  /* General Register 15 explicitly required */
  SI h_r15;
#define GET_H_R15() CPU (h_r15)
#define SET_H_R15(x) (CPU (h_r15) = (x))
  /* negative         bit */
  BI h_nbit;
#define GET_H_NBIT() CPU (h_nbit)
#define SET_H_NBIT(x) (CPU (h_nbit) = (x))
  /* zero             bit */
  BI h_zbit;
#define GET_H_ZBIT() CPU (h_zbit)
#define SET_H_ZBIT(x) (CPU (h_zbit) = (x))
  /* overflow         bit */
  BI h_vbit;
#define GET_H_VBIT() CPU (h_vbit)
#define SET_H_VBIT(x) (CPU (h_vbit) = (x))
  /* carry            bit */
  BI h_cbit;
#define GET_H_CBIT() CPU (h_cbit)
#define SET_H_CBIT(x) (CPU (h_cbit) = (x))
  /* interrupt enable bit */
  BI h_ibit;
#define GET_H_IBIT() CPU (h_ibit)
#define SET_H_IBIT(x) (CPU (h_ibit) = (x))
  /* stack bit */
  BI h_sbit;
#define GET_H_SBIT() fr30bf_h_sbit_get_handler (current_cpu)
#define SET_H_SBIT(x) \
do { \
fr30bf_h_sbit_set_handler (current_cpu, (x));\
;} while (0)
  /* trace trap       bit */
  BI h_tbit;
#define GET_H_TBIT() CPU (h_tbit)
#define SET_H_TBIT(x) (CPU (h_tbit) = (x))
  /* division 0       bit */
  BI h_d0bit;
#define GET_H_D0BIT() CPU (h_d0bit)
#define SET_H_D0BIT(x) (CPU (h_d0bit) = (x))
  /* division 1       bit */
  BI h_d1bit;
#define GET_H_D1BIT() CPU (h_d1bit)
#define SET_H_D1BIT(x) (CPU (h_d1bit) = (x))
  /* condition code bits */
  UQI h_ccr;
#define GET_H_CCR() fr30bf_h_ccr_get_handler (current_cpu)
#define SET_H_CCR(x) \
do { \
fr30bf_h_ccr_set_handler (current_cpu, (x));\
;} while (0)
  /* system condition bits */
  UQI h_scr;
#define GET_H_SCR() fr30bf_h_scr_get_handler (current_cpu)
#define SET_H_SCR(x) \
do { \
fr30bf_h_scr_set_handler (current_cpu, (x));\
;} while (0)
  /* interrupt level mask */
  UQI h_ilm;
#define GET_H_ILM() fr30bf_h_ilm_get_handler (current_cpu)
#define SET_H_ILM(x) \
do { \
fr30bf_h_ilm_set_handler (current_cpu, (x));\
;} while (0)
  } hardware;
#define CPU_CGEN_HW(cpu) (& (cpu)->cpu_data.hardware)
} FR30BF_CPU_DATA;

/* Cover fns for register access.  */
USI fr30bf_h_pc_get (SIM_CPU *);
void fr30bf_h_pc_set (SIM_CPU *, USI);
SI fr30bf_h_gr_get (SIM_CPU *, UINT);
void fr30bf_h_gr_set (SIM_CPU *, UINT, SI);
SI fr30bf_h_cr_get (SIM_CPU *, UINT);
void fr30bf_h_cr_set (SIM_CPU *, UINT, SI);
SI fr30bf_h_dr_get (SIM_CPU *, UINT);
void fr30bf_h_dr_set (SIM_CPU *, UINT, SI);
USI fr30bf_h_ps_get (SIM_CPU *);
void fr30bf_h_ps_set (SIM_CPU *, USI);
SI fr30bf_h_r13_get (SIM_CPU *);
void fr30bf_h_r13_set (SIM_CPU *, SI);
SI fr30bf_h_r14_get (SIM_CPU *);
void fr30bf_h_r14_set (SIM_CPU *, SI);
SI fr30bf_h_r15_get (SIM_CPU *);
void fr30bf_h_r15_set (SIM_CPU *, SI);
BI fr30bf_h_nbit_get (SIM_CPU *);
void fr30bf_h_nbit_set (SIM_CPU *, BI);
BI fr30bf_h_zbit_get (SIM_CPU *);
void fr30bf_h_zbit_set (SIM_CPU *, BI);
BI fr30bf_h_vbit_get (SIM_CPU *);
void fr30bf_h_vbit_set (SIM_CPU *, BI);
BI fr30bf_h_cbit_get (SIM_CPU *);
void fr30bf_h_cbit_set (SIM_CPU *, BI);
BI fr30bf_h_ibit_get (SIM_CPU *);
void fr30bf_h_ibit_set (SIM_CPU *, BI);
BI fr30bf_h_sbit_get (SIM_CPU *);
void fr30bf_h_sbit_set (SIM_CPU *, BI);
BI fr30bf_h_tbit_get (SIM_CPU *);
void fr30bf_h_tbit_set (SIM_CPU *, BI);
BI fr30bf_h_d0bit_get (SIM_CPU *);
void fr30bf_h_d0bit_set (SIM_CPU *, BI);
BI fr30bf_h_d1bit_get (SIM_CPU *);
void fr30bf_h_d1bit_set (SIM_CPU *, BI);
UQI fr30bf_h_ccr_get (SIM_CPU *);
void fr30bf_h_ccr_set (SIM_CPU *, UQI);
UQI fr30bf_h_scr_get (SIM_CPU *);
void fr30bf_h_scr_set (SIM_CPU *, UQI);
UQI fr30bf_h_ilm_get (SIM_CPU *);
void fr30bf_h_ilm_set (SIM_CPU *, UQI);

/* These must be hand-written.  */
extern CPUREG_FETCH_FN fr30bf_fetch_register;
extern CPUREG_STORE_FN fr30bf_store_register;

typedef struct {
  UINT load_regs;
  UINT load_regs_pending;
} MODEL_FR30_1_DATA;

/* Instruction argument buffer.  */

union sem_fields {
  struct { /* no operands */
    int empty;
  } fmt_empty;
  struct { /*  */
    IADDR i_label9;
  } sfmt_brad;
  struct { /*  */
    UINT f_u8;
  } sfmt_int;
  struct { /*  */
    IADDR i_label12;
  } sfmt_call;
  struct { /*  */
    SI f_s10;
    unsigned char in_h_gr_SI_15;
    unsigned char out_h_gr_SI_15;
  } sfmt_addsp;
  struct { /*  */
    USI f_dir10;
    unsigned char in_h_gr_SI_15;
    unsigned char out_h_gr_SI_15;
  } sfmt_dmovr15pi;
  struct { /*  */
    UINT f_dir8;
    unsigned char in_h_gr_SI_13;
    unsigned char out_h_gr_SI_13;
  } sfmt_dmovr13pib;
  struct { /*  */
    USI f_dir9;
    unsigned char in_h_gr_SI_13;
    unsigned char out_h_gr_SI_13;
  } sfmt_dmovr13pih;
  struct { /*  */
    USI f_dir10;
    unsigned char in_h_gr_SI_13;
    unsigned char out_h_gr_SI_13;
  } sfmt_dmovr13pi;
  struct { /*  */
    UINT f_Rs2;
    unsigned char in_h_gr_SI_15;
    unsigned char out_h_gr_SI_15;
  } sfmt_ldr15dr;
  struct { /*  */
    SI* i_Ri;
    UINT f_Ri;
    UINT f_Rs1;
    unsigned char in_Ri;
  } sfmt_mov2dr;
  struct { /*  */
    SI* i_Ri;
    UINT f_Ri;
    UINT f_Rs1;
    unsigned char out_Ri;
  } sfmt_movdr;
  struct { /*  */
    SI* i_Ri;
    UINT f_Ri;
    UINT f_i32;
    unsigned char out_Ri;
  } sfmt_ldi32;
  struct { /*  */
    SI* i_Ri;
    UINT f_Ri;
    UINT f_i20;
    unsigned char out_Ri;
  } sfmt_ldi20;
  struct { /*  */
    SI* i_Ri;
    UINT f_Ri;
    UINT f_i8;
    unsigned char out_Ri;
  } sfmt_ldi8;
  struct { /*  */
    USI f_u10;
    unsigned char in_h_gr_SI_14;
    unsigned char in_h_gr_SI_15;
    unsigned char out_h_gr_SI_14;
    unsigned char out_h_gr_SI_15;
  } sfmt_enter;
  struct { /*  */
    SI* i_Ri;
    UINT f_Ri;
    unsigned char in_Ri;
    unsigned char in_h_gr_SI_15;
    unsigned char out_h_gr_SI_15;
  } sfmt_str15gr;
  struct { /*  */
    SI* i_Ri;
    UINT f_Ri;
    USI f_udisp6;
    unsigned char in_Ri;
    unsigned char in_h_gr_SI_15;
  } sfmt_str15;
  struct { /*  */
    SI* i_Ri;
    INT f_disp8;
    UINT f_Ri;
    unsigned char in_Ri;
    unsigned char in_h_gr_SI_14;
  } sfmt_str14b;
  struct { /*  */
    SI* i_Ri;
    SI f_disp9;
    UINT f_Ri;
    unsigned char in_Ri;
    unsigned char in_h_gr_SI_14;
  } sfmt_str14h;
  struct { /*  */
    SI* i_Ri;
    SI f_disp10;
    UINT f_Ri;
    unsigned char in_Ri;
    unsigned char in_h_gr_SI_14;
  } sfmt_str14;
  struct { /*  */
    SI* i_Ri;
    UINT f_Ri;
    unsigned char in_h_gr_SI_15;
    unsigned char out_Ri;
    unsigned char out_h_gr_SI_15;
  } sfmt_ldr15gr;
  struct { /*  */
    SI* i_Ri;
    UINT f_Ri;
    USI f_udisp6;
    unsigned char in_h_gr_SI_15;
    unsigned char out_Ri;
  } sfmt_ldr15;
  struct { /*  */
    SI* i_Ri;
    INT f_disp8;
    UINT f_Ri;
    unsigned char in_h_gr_SI_14;
    unsigned char out_Ri;
  } sfmt_ldr14ub;
  struct { /*  */
    SI* i_Ri;
    SI f_disp9;
    UINT f_Ri;
    unsigned char in_h_gr_SI_14;
    unsigned char out_Ri;
  } sfmt_ldr14uh;
  struct { /*  */
    SI* i_Ri;
    SI f_disp10;
    UINT f_Ri;
    unsigned char in_h_gr_SI_14;
    unsigned char out_Ri;
  } sfmt_ldr14;
  struct { /*  */
    SI* i_Ri;
    SI f_m4;
    UINT f_Ri;
    unsigned char in_Ri;
    unsigned char out_Ri;
  } sfmt_add2;
  struct { /*  */
    SI* i_Ri;
    UINT f_Ri;
    UINT f_u4;
    unsigned char in_Ri;
    unsigned char out_Ri;
  } sfmt_addi;
  struct { /*  */
    SI* i_Ri;
    SI* i_Rj;
    UINT f_Ri;
    UINT f_Rj;
    unsigned char in_Ri;
    unsigned char in_Rj;
    unsigned char in_h_gr_SI_13;
  } sfmt_str13;
  struct { /*  */
    SI* i_Ri;
    SI* i_Rj;
    UINT f_Ri;
    UINT f_Rj;
    unsigned char in_Rj;
    unsigned char in_h_gr_SI_13;
    unsigned char out_Ri;
  } sfmt_ldr13;
  struct { /*  */
    SI* i_Ri;
    SI* i_Rj;
    UINT f_Ri;
    UINT f_Rj;
    unsigned char in_Ri;
    unsigned char in_Rj;
    unsigned char out_Ri;
  } sfmt_add;
  struct { /*  */
    UINT f_reglist_hi_st;
    unsigned char in_h_gr_SI_10;
    unsigned char in_h_gr_SI_11;
    unsigned char in_h_gr_SI_12;
    unsigned char in_h_gr_SI_13;
    unsigned char in_h_gr_SI_14;
    unsigned char in_h_gr_SI_15;
    unsigned char in_h_gr_SI_8;
    unsigned char in_h_gr_SI_9;
    unsigned char out_h_gr_SI_15;
  } sfmt_stm1;
  struct { /*  */
    UINT f_reglist_hi_ld;
    unsigned char in_h_gr_SI_15;
    unsigned char out_h_gr_SI_10;
    unsigned char out_h_gr_SI_11;
    unsigned char out_h_gr_SI_12;
    unsigned char out_h_gr_SI_13;
    unsigned char out_h_gr_SI_14;
    unsigned char out_h_gr_SI_15;
    unsigned char out_h_gr_SI_8;
    unsigned char out_h_gr_SI_9;
  } sfmt_ldm1;
  struct { /*  */
    UINT f_reglist_low_st;
    unsigned char in_h_gr_SI_0;
    unsigned char in_h_gr_SI_1;
    unsigned char in_h_gr_SI_15;
    unsigned char in_h_gr_SI_2;
    unsigned char in_h_gr_SI_3;
    unsigned char in_h_gr_SI_4;
    unsigned char in_h_gr_SI_5;
    unsigned char in_h_gr_SI_6;
    unsigned char in_h_gr_SI_7;
    unsigned char out_h_gr_SI_15;
  } sfmt_stm0;
  struct { /*  */
    UINT f_reglist_low_ld;
    unsigned char in_h_gr_SI_15;
    unsigned char out_h_gr_SI_0;
    unsigned char out_h_gr_SI_1;
    unsigned char out_h_gr_SI_15;
    unsigned char out_h_gr_SI_2;
    unsigned char out_h_gr_SI_3;
    unsigned char out_h_gr_SI_4;
    unsigned char out_h_gr_SI_5;
    unsigned char out_h_gr_SI_6;
    unsigned char out_h_gr_SI_7;
  } sfmt_ldm0;
#if WITH_SCACHE_PBB
  /* Writeback handler.  */
  struct {
    /* Pointer to argbuf entry for insn whose results need writing back.  */
    const struct argbuf *abuf;
  } write;
  /* x-before handler */
  struct {
    /*const SCACHE *insns[MAX_PARALLEL_INSNS];*/
    int first_p;
  } before;
  /* x-after handler */
  struct {
    int empty;
  } after;
  /* This entry is used to terminate each pbb.  */
  struct {
    /* Number of insns in pbb.  */
    int insn_count;
    /* Next pbb to execute.  */
    SCACHE *next;
    SCACHE *branch_target;
  } chain;
#endif
};

/* The ARGBUF struct.  */
struct argbuf {
  /* These are the baseclass definitions.  */
  IADDR addr;
  const IDESC *idesc;
  char trace_p;
  char profile_p;
  /* ??? Temporary hack for skip insns.  */
  char skip_count;
  char unused;
  /* cpu specific data follows */
  union sem semantic;
  int written;
  union sem_fields fields;
};

/* A cached insn.

   ??? SCACHE used to contain more than just argbuf.  We could delete the
   type entirely and always just use ARGBUF, but for future concerns and as
   a level of abstraction it is left in.  */

struct scache {
  struct argbuf argbuf;
};

/* Macros to simplify extraction, reading and semantic code.
   These define and assign the local vars that contain the insn's fields.  */

#define EXTRACT_IFMT_EMPTY_VARS \
  unsigned int length;
#define EXTRACT_IFMT_EMPTY_CODE \
  length = 0; \

#define EXTRACT_IFMT_ADD_VARS \
  UINT f_op1; \
  UINT f_op2; \
  UINT f_Rj; \
  UINT f_Ri; \
  unsigned int length;
#define EXTRACT_IFMT_ADD_CODE \
  length = 2; \
  f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
  f_op2 = EXTRACT_MSB0_UINT (insn, 16, 4, 4); \
  f_Rj = EXTRACT_MSB0_UINT (insn, 16, 8, 4); \
  f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4); \

#define EXTRACT_IFMT_ADDI_VARS \
  UINT f_op1; \
  UINT f_op2; \
  UINT f_u4; \
  UINT f_Ri; \
  unsigned int length;
#define EXTRACT_IFMT_ADDI_CODE \
  length = 2; \
  f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
  f_op2 = EXTRACT_MSB0_UINT (insn, 16, 4, 4); \
  f_u4 = EXTRACT_MSB0_UINT (insn, 16, 8, 4); \
  f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4); \

#define EXTRACT_IFMT_ADD2_VARS \
  UINT f_op1; \
  UINT f_op2; \
  SI f_m4; \
  UINT f_Ri; \
  unsigned int length;
#define EXTRACT_IFMT_ADD2_CODE \
  length = 2; \
  f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
  f_op2 = EXTRACT_MSB0_UINT (insn, 16, 4, 4); \
  f_m4 = ((EXTRACT_MSB0_UINT (insn, 16, 8, 4)) | (((-1) << (4)))); \
  f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4); \

#define EXTRACT_IFMT_DIV0S_VARS \
  UINT f_op1; \
  UINT f_op2; \
  UINT f_op3; \
  UINT f_Ri; \
  unsigned int length;
#define EXTRACT_IFMT_DIV0S_CODE \
  length = 2; \
  f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
  f_op2 = EXTRACT_MSB0_UINT (insn, 16, 4, 4); \
  f_op3 = EXTRACT_MSB0_UINT (insn, 16, 8, 4); \
  f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4); \

#define EXTRACT_IFMT_DIV3_VARS \
  UINT f_op1; \
  UINT f_op2; \
  UINT f_op3; \
  UINT f_op4; \
  unsigned int length;
#define EXTRACT_IFMT_DIV3_CODE \
  length = 2; \
  f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
  f_op2 = EXTRACT_MSB0_UINT (insn, 16, 4, 4); \
  f_op3 = EXTRACT_MSB0_UINT (insn, 16, 8, 4); \
  f_op4 = EXTRACT_MSB0_UINT (insn, 16, 12, 4); \

#define EXTRACT_IFMT_LDI8_VARS \
  UINT f_op1; \
  UINT f_i8; \
  UINT f_Ri; \
  unsigned int length;
#define EXTRACT_IFMT_LDI8_CODE \
  length = 2; \
  f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
  f_i8 = EXTRACT_MSB0_UINT (insn, 16, 4, 8); \
  f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4); \

#define EXTRACT_IFMT_LDI20_VARS \
  UINT f_op1; \
  UINT f_i20_4; \
  UINT f_i20_16; \
  UINT f_i20; \
  UINT f_op2; \
  UINT f_Ri; \
  /* Contents of trailing part of insn.  */ \
  UINT word_1; \
  unsigned int length;
#define EXTRACT_IFMT_LDI20_CODE \
  length = 4; \
  word_1 = GETIMEMUHI (current_cpu, pc + 2); \
  f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
  f_i20_4 = EXTRACT_MSB0_UINT (insn, 16, 8, 4); \
  f_i20_16 = (0|(EXTRACT_MSB0_UINT (word_1, 16, 0, 16) << 0)); \
{\
  f_i20 = ((((f_i20_4) << (16))) | (f_i20_16));\
}\
  f_op2 = EXTRACT_MSB0_UINT (insn, 16, 4, 4); \
  f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4); \

#define EXTRACT_IFMT_LDI32_VARS \
  UINT f_op1; \
  UINT f_i32; \
  UINT f_op2; \
  UINT f_op3; \
  UINT f_Ri; \
  /* Contents of trailing part of insn.  */ \
  UINT word_1; \
  UINT word_2; \
  unsigned int length;
#define EXTRACT_IFMT_LDI32_CODE \
  length = 6; \
  word_1 = GETIMEMUHI (current_cpu, pc + 2); \
  word_2 = GETIMEMUHI (current_cpu, pc + 4); \
  f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
  f_i32 = (0|(EXTRACT_MSB0_UINT (word_2, 16, 0, 16) << 0)|(EXTRACT_MSB0_UINT (word_1, 16, 0, 16) << 16)); \
  f_op2 = EXTRACT_MSB0_UINT (insn, 16, 4, 4); \
  f_op3 = EXTRACT_MSB0_UINT (insn, 16, 8, 4); \
  f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4); \

#define EXTRACT_IFMT_LDR14_VARS \
  UINT f_op1; \
  SI f_disp10; \
  UINT f_Ri; \
  unsigned int length;
#define EXTRACT_IFMT_LDR14_CODE \
  length = 2; \
  f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
  f_disp10 = ((EXTRACT_MSB0_INT (insn, 16, 4, 8)) << (2)); \
  f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4); \

#define EXTRACT_IFMT_LDR14UH_VARS \
  UINT f_op1; \
  SI f_disp9; \
  UINT f_Ri; \
  unsigned int length;
#define EXTRACT_IFMT_LDR14UH_CODE \
  length = 2; \
  f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
  f_disp9 = ((EXTRACT_MSB0_INT (insn, 16, 4, 8)) << (1)); \
  f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4); \

#define EXTRACT_IFMT_LDR14UB_VARS \
  UINT f_op1; \
  INT f_disp8; \
  UINT f_Ri; \
  unsigned int length;
#define EXTRACT_IFMT_LDR14UB_CODE \
  length = 2; \
  f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
  f_disp8 = EXTRACT_MSB0_INT (insn, 16, 4, 8); \
  f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4); \

#define EXTRACT_IFMT_LDR15_VARS \
  UINT f_op1; \
  UINT f_op2; \
  USI f_udisp6; \
  UINT f_Ri; \
  unsigned int length;
#define EXTRACT_IFMT_LDR15_CODE \
  length = 2; \
  f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
  f_op2 = EXTRACT_MSB0_UINT (insn, 16, 4, 4); \
  f_udisp6 = ((EXTRACT_MSB0_UINT (insn, 16, 8, 4)) << (2)); \
  f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4); \

#define EXTRACT_IFMT_LDR15DR_VARS \
  UINT f_op1; \
  UINT f_op2; \
  UINT f_op3; \
  UINT f_Rs2; \
  unsigned int length;
#define EXTRACT_IFMT_LDR15DR_CODE \
  length = 2; \
  f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
  f_op2 = EXTRACT_MSB0_UINT (insn, 16, 4, 4); \
  f_op3 = EXTRACT_MSB0_UINT (insn, 16, 8, 4); \
  f_Rs2 = EXTRACT_MSB0_UINT (insn, 16, 12, 4); \

#define EXTRACT_IFMT_MOVDR_VARS \
  UINT f_op1; \
  UINT f_op2; \
  UINT f_Rs1; \
  UINT f_Ri; \
  unsigned int length;
#define EXTRACT_IFMT_MOVDR_CODE \
  length = 2; \
  f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
  f_op2 = EXTRACT_MSB0_UINT (insn, 16, 4, 4); \
  f_Rs1 = EXTRACT_MSB0_UINT (insn, 16, 8, 4); \
  f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4); \

#define EXTRACT_IFMT_CALL_VARS \
  UINT f_op1; \
  UINT f_op5; \
  SI f_rel12; \
  unsigned int length;
#define EXTRACT_IFMT_CALL_CODE \
  length = 2; \
  f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
  f_op5 = EXTRACT_MSB0_UINT (insn, 16, 4, 1); \
  f_rel12 = ((((EXTRACT_MSB0_INT (insn, 16, 5, 11)) << (1))) + (((pc) + (2)))); \

#define EXTRACT_IFMT_INT_VARS \
  UINT f_op1; \
  UINT f_op2; \
  UINT f_u8; \
  unsigned int length;
#define EXTRACT_IFMT_INT_CODE \
  length = 2; \
  f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
  f_op2 = EXTRACT_MSB0_UINT (insn, 16, 4, 4); \
  f_u8 = EXTRACT_MSB0_UINT (insn, 16, 8, 8); \

#define EXTRACT_IFMT_BRAD_VARS \
  UINT f_op1; \
  UINT f_cc; \
  SI f_rel9; \
  unsigned int length;
#define EXTRACT_IFMT_BRAD_CODE \
  length = 2; \
  f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
  f_cc = EXTRACT_MSB0_UINT (insn, 16, 4, 4); \
  f_rel9 = ((((EXTRACT_MSB0_INT (insn, 16, 8, 8)) << (1))) + (((pc) + (2)))); \

#define EXTRACT_IFMT_DMOVR13_VARS \
  UINT f_op1; \
  UINT f_op2; \
  USI f_dir10; \
  unsigned int length;
#define EXTRACT_IFMT_DMOVR13_CODE \
  length = 2; \
  f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
  f_op2 = EXTRACT_MSB0_UINT (insn, 16, 4, 4); \
  f_dir10 = ((EXTRACT_MSB0_UINT (insn, 16, 8, 8)) << (2)); \

#define EXTRACT_IFMT_DMOVR13H_VARS \
  UINT f_op1; \
  UINT f_op2; \
  USI f_dir9; \
  unsigned int length;
#define EXTRACT_IFMT_DMOVR13H_CODE \
  length = 2; \
  f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
  f_op2 = EXTRACT_MSB0_UINT (insn, 16, 4, 4); \
  f_dir9 = ((EXTRACT_MSB0_UINT (insn, 16, 8, 8)) << (1)); \

#define EXTRACT_IFMT_DMOVR13B_VARS \
  UINT f_op1; \
  UINT f_op2; \
  UINT f_dir8; \
  unsigned int length;
#define EXTRACT_IFMT_DMOVR13B_CODE \
  length = 2; \
  f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
  f_op2 = EXTRACT_MSB0_UINT (insn, 16, 4, 4); \
  f_dir8 = EXTRACT_MSB0_UINT (insn, 16, 8, 8); \

#define EXTRACT_IFMT_COPOP_VARS \
  UINT f_op1; \
  UINT f_ccc; \
  UINT f_op2; \
  UINT f_op3; \
  UINT f_CRj; \
  UINT f_u4c; \
  UINT f_CRi; \
  /* Contents of trailing part of insn.  */ \
  UINT word_1; \
  unsigned int length;
#define EXTRACT_IFMT_COPOP_CODE \
  length = 4; \
  word_1 = GETIMEMUHI (current_cpu, pc + 2); \
  f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
  f_ccc = (0|(EXTRACT_MSB0_UINT (word_1, 16, 0, 8) << 0)); \
  f_op2 = EXTRACT_MSB0_UINT (insn, 16, 4, 4); \
  f_op3 = EXTRACT_MSB0_UINT (insn, 16, 8, 4); \
  f_CRj = (0|(EXTRACT_MSB0_UINT (word_1, 16, 8, 4) << 0)); \
  f_u4c = EXTRACT_MSB0_UINT (insn, 16, 12, 4); \
  f_CRi = (0|(EXTRACT_MSB0_UINT (word_1, 16, 12, 4) << 0)); \

#define EXTRACT_IFMT_COPLD_VARS \
  UINT f_op1; \
  UINT f_ccc; \
  UINT f_op2; \
  UINT f_op3; \
  UINT f_Rjc; \
  UINT f_u4c; \
  UINT f_CRi; \
  /* Contents of trailing part of insn.  */ \
  UINT word_1; \
  unsigned int length;
#define EXTRACT_IFMT_COPLD_CODE \
  length = 4; \
  word_1 = GETIMEMUHI (current_cpu, pc + 2); \
  f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
  f_ccc = (0|(EXTRACT_MSB0_UINT (word_1, 16, 0, 8) << 0)); \
  f_op2 = EXTRACT_MSB0_UINT (insn, 16, 4, 4); \
  f_op3 = EXTRACT_MSB0_UINT (insn, 16, 8, 4); \
  f_Rjc = (0|(EXTRACT_MSB0_UINT (word_1, 16, 8, 4) << 0)); \
  f_u4c = EXTRACT_MSB0_UINT (insn, 16, 12, 4); \
  f_CRi = (0|(EXTRACT_MSB0_UINT (word_1, 16, 12, 4) << 0)); \

#define EXTRACT_IFMT_COPST_VARS \
  UINT f_op1; \
  UINT f_ccc; \
  UINT f_op2; \
  UINT f_op3; \
  UINT f_CRj; \
  UINT f_u4c; \
  UINT f_Ric; \
  /* Contents of trailing part of insn.  */ \
  UINT word_1; \
  unsigned int length;
#define EXTRACT_IFMT_COPST_CODE \
  length = 4; \
  word_1 = GETIMEMUHI (current_cpu, pc + 2); \
  f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
  f_ccc = (0|(EXTRACT_MSB0_UINT (word_1, 16, 0, 8) << 0)); \
  f_op2 = EXTRACT_MSB0_UINT (insn, 16, 4, 4); \
  f_op3 = EXTRACT_MSB0_UINT (insn, 16, 8, 4); \
  f_CRj = (0|(EXTRACT_MSB0_UINT (word_1, 16, 8, 4) << 0)); \
  f_u4c = EXTRACT_MSB0_UINT (insn, 16, 12, 4); \
  f_Ric = (0|(EXTRACT_MSB0_UINT (word_1, 16, 12, 4) << 0)); \

#define EXTRACT_IFMT_ADDSP_VARS \
  UINT f_op1; \
  UINT f_op2; \
  SI f_s10; \
  unsigned int length;
#define EXTRACT_IFMT_ADDSP_CODE \
  length = 2; \
  f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
  f_op2 = EXTRACT_MSB0_UINT (insn, 16, 4, 4); \
  f_s10 = ((EXTRACT_MSB0_INT (insn, 16, 8, 8)) << (2)); \

#define EXTRACT_IFMT_LDM0_VARS \
  UINT f_op1; \
  UINT f_op2; \
  UINT f_reglist_low_ld; \
  unsigned int length;
#define EXTRACT_IFMT_LDM0_CODE \
  length = 2; \
  f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
  f_op2 = EXTRACT_MSB0_UINT (insn, 16, 4, 4); \
  f_reglist_low_ld = EXTRACT_MSB0_UINT (insn, 16, 8, 8); \

#define EXTRACT_IFMT_LDM1_VARS \
  UINT f_op1; \
  UINT f_op2; \
  UINT f_reglist_hi_ld; \
  unsigned int length;
#define EXTRACT_IFMT_LDM1_CODE \
  length = 2; \
  f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
  f_op2 = EXTRACT_MSB0_UINT (insn, 16, 4, 4); \
  f_reglist_hi_ld = EXTRACT_MSB0_UINT (insn, 16, 8, 8); \

#define EXTRACT_IFMT_STM0_VARS \
  UINT f_op1; \
  UINT f_op2; \
  UINT f_reglist_low_st; \
  unsigned int length;
#define EXTRACT_IFMT_STM0_CODE \
  length = 2; \
  f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
  f_op2 = EXTRACT_MSB0_UINT (insn, 16, 4, 4); \
  f_reglist_low_st = EXTRACT_MSB0_UINT (insn, 16, 8, 8); \

#define EXTRACT_IFMT_STM1_VARS \
  UINT f_op1; \
  UINT f_op2; \
  UINT f_reglist_hi_st; \
  unsigned int length;
#define EXTRACT_IFMT_STM1_CODE \
  length = 2; \
  f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
  f_op2 = EXTRACT_MSB0_UINT (insn, 16, 4, 4); \
  f_reglist_hi_st = EXTRACT_MSB0_UINT (insn, 16, 8, 8); \

#define EXTRACT_IFMT_ENTER_VARS \
  UINT f_op1; \
  UINT f_op2; \
  USI f_u10; \
  unsigned int length;
#define EXTRACT_IFMT_ENTER_CODE \
  length = 2; \
  f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
  f_op2 = EXTRACT_MSB0_UINT (insn, 16, 4, 4); \
  f_u10 = ((EXTRACT_MSB0_UINT (insn, 16, 8, 8)) << (2)); \

/* Collection of various things for the trace handler to use.  */

typedef struct trace_record {
  IADDR pc;
  /* FIXME:wip */
} TRACE_RECORD;

#endif /* CPU_FR30BF_H */
@


1.4.8.1
log
@Merge w/trunk (kseitz_interps-20020722-merge).
@
text
@d1 890
a890 890
// OBSOLETE /* CPU family header for fr30bf.
// OBSOLETE 
// OBSOLETE THIS FILE IS MACHINE GENERATED WITH CGEN.
// OBSOLETE 
// OBSOLETE Copyright 1996, 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.
// OBSOLETE 
// OBSOLETE This file is part of the GNU simulators.
// OBSOLETE 
// OBSOLETE This program is free software; you can redistribute it and/or modify
// OBSOLETE it under the terms of the GNU General Public License as published by
// OBSOLETE the Free Software Foundation; either version 2, or (at your option)
// OBSOLETE any later version.
// OBSOLETE 
// OBSOLETE This program is distributed in the hope that it will be useful,
// OBSOLETE but WITHOUT ANY WARRANTY; without even the implied warranty of
// OBSOLETE MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// OBSOLETE GNU General Public License for more details.
// OBSOLETE 
// OBSOLETE You should have received a copy of the GNU General Public License along
// OBSOLETE with this program; if not, write to the Free Software Foundation, Inc.,
// OBSOLETE 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
// OBSOLETE 
// OBSOLETE */
// OBSOLETE 
// OBSOLETE #ifndef CPU_FR30BF_H
// OBSOLETE #define CPU_FR30BF_H
// OBSOLETE 
// OBSOLETE /* Maximum number of instructions that are fetched at a time.
// OBSOLETE    This is for LIW type instructions sets (e.g. m32r).  */
// OBSOLETE #define MAX_LIW_INSNS 1
// OBSOLETE 
// OBSOLETE /* Maximum number of instructions that can be executed in parallel.  */
// OBSOLETE #define MAX_PARALLEL_INSNS 1
// OBSOLETE 
// OBSOLETE /* CPU state information.  */
// OBSOLETE typedef struct {
// OBSOLETE   /* Hardware elements.  */
// OBSOLETE   struct {
// OBSOLETE   /* program counter */
// OBSOLETE   USI h_pc;
// OBSOLETE #define GET_H_PC() CPU (h_pc)
// OBSOLETE #define SET_H_PC(x) (CPU (h_pc) = (x))
// OBSOLETE   /* general registers */
// OBSOLETE   SI h_gr[16];
// OBSOLETE #define GET_H_GR(a1) CPU (h_gr)[a1]
// OBSOLETE #define SET_H_GR(a1, x) (CPU (h_gr)[a1] = (x))
// OBSOLETE   /* coprocessor registers */
// OBSOLETE   SI h_cr[16];
// OBSOLETE #define GET_H_CR(a1) CPU (h_cr)[a1]
// OBSOLETE #define SET_H_CR(a1, x) (CPU (h_cr)[a1] = (x))
// OBSOLETE   /* dedicated registers */
// OBSOLETE   SI h_dr[6];
// OBSOLETE #define GET_H_DR(index) fr30bf_h_dr_get_handler (current_cpu, index)
// OBSOLETE #define SET_H_DR(index, x) \
// OBSOLETE do { \
// OBSOLETE fr30bf_h_dr_set_handler (current_cpu, (index), (x));\
// OBSOLETE ;} while (0)
// OBSOLETE   /* processor status */
// OBSOLETE   USI h_ps;
// OBSOLETE #define GET_H_PS() fr30bf_h_ps_get_handler (current_cpu)
// OBSOLETE #define SET_H_PS(x) \
// OBSOLETE do { \
// OBSOLETE fr30bf_h_ps_set_handler (current_cpu, (x));\
// OBSOLETE ;} while (0)
// OBSOLETE   /* General Register 13 explicitly required */
// OBSOLETE   SI h_r13;
// OBSOLETE #define GET_H_R13() CPU (h_r13)
// OBSOLETE #define SET_H_R13(x) (CPU (h_r13) = (x))
// OBSOLETE   /* General Register 14 explicitly required */
// OBSOLETE   SI h_r14;
// OBSOLETE #define GET_H_R14() CPU (h_r14)
// OBSOLETE #define SET_H_R14(x) (CPU (h_r14) = (x))
// OBSOLETE   /* General Register 15 explicitly required */
// OBSOLETE   SI h_r15;
// OBSOLETE #define GET_H_R15() CPU (h_r15)
// OBSOLETE #define SET_H_R15(x) (CPU (h_r15) = (x))
// OBSOLETE   /* negative         bit */
// OBSOLETE   BI h_nbit;
// OBSOLETE #define GET_H_NBIT() CPU (h_nbit)
// OBSOLETE #define SET_H_NBIT(x) (CPU (h_nbit) = (x))
// OBSOLETE   /* zero             bit */
// OBSOLETE   BI h_zbit;
// OBSOLETE #define GET_H_ZBIT() CPU (h_zbit)
// OBSOLETE #define SET_H_ZBIT(x) (CPU (h_zbit) = (x))
// OBSOLETE   /* overflow         bit */
// OBSOLETE   BI h_vbit;
// OBSOLETE #define GET_H_VBIT() CPU (h_vbit)
// OBSOLETE #define SET_H_VBIT(x) (CPU (h_vbit) = (x))
// OBSOLETE   /* carry            bit */
// OBSOLETE   BI h_cbit;
// OBSOLETE #define GET_H_CBIT() CPU (h_cbit)
// OBSOLETE #define SET_H_CBIT(x) (CPU (h_cbit) = (x))
// OBSOLETE   /* interrupt enable bit */
// OBSOLETE   BI h_ibit;
// OBSOLETE #define GET_H_IBIT() CPU (h_ibit)
// OBSOLETE #define SET_H_IBIT(x) (CPU (h_ibit) = (x))
// OBSOLETE   /* stack bit */
// OBSOLETE   BI h_sbit;
// OBSOLETE #define GET_H_SBIT() fr30bf_h_sbit_get_handler (current_cpu)
// OBSOLETE #define SET_H_SBIT(x) \
// OBSOLETE do { \
// OBSOLETE fr30bf_h_sbit_set_handler (current_cpu, (x));\
// OBSOLETE ;} while (0)
// OBSOLETE   /* trace trap       bit */
// OBSOLETE   BI h_tbit;
// OBSOLETE #define GET_H_TBIT() CPU (h_tbit)
// OBSOLETE #define SET_H_TBIT(x) (CPU (h_tbit) = (x))
// OBSOLETE   /* division 0       bit */
// OBSOLETE   BI h_d0bit;
// OBSOLETE #define GET_H_D0BIT() CPU (h_d0bit)
// OBSOLETE #define SET_H_D0BIT(x) (CPU (h_d0bit) = (x))
// OBSOLETE   /* division 1       bit */
// OBSOLETE   BI h_d1bit;
// OBSOLETE #define GET_H_D1BIT() CPU (h_d1bit)
// OBSOLETE #define SET_H_D1BIT(x) (CPU (h_d1bit) = (x))
// OBSOLETE   /* condition code bits */
// OBSOLETE   UQI h_ccr;
// OBSOLETE #define GET_H_CCR() fr30bf_h_ccr_get_handler (current_cpu)
// OBSOLETE #define SET_H_CCR(x) \
// OBSOLETE do { \
// OBSOLETE fr30bf_h_ccr_set_handler (current_cpu, (x));\
// OBSOLETE ;} while (0)
// OBSOLETE   /* system condition bits */
// OBSOLETE   UQI h_scr;
// OBSOLETE #define GET_H_SCR() fr30bf_h_scr_get_handler (current_cpu)
// OBSOLETE #define SET_H_SCR(x) \
// OBSOLETE do { \
// OBSOLETE fr30bf_h_scr_set_handler (current_cpu, (x));\
// OBSOLETE ;} while (0)
// OBSOLETE   /* interrupt level mask */
// OBSOLETE   UQI h_ilm;
// OBSOLETE #define GET_H_ILM() fr30bf_h_ilm_get_handler (current_cpu)
// OBSOLETE #define SET_H_ILM(x) \
// OBSOLETE do { \
// OBSOLETE fr30bf_h_ilm_set_handler (current_cpu, (x));\
// OBSOLETE ;} while (0)
// OBSOLETE   } hardware;
// OBSOLETE #define CPU_CGEN_HW(cpu) (& (cpu)->cpu_data.hardware)
// OBSOLETE } FR30BF_CPU_DATA;
// OBSOLETE 
// OBSOLETE /* Cover fns for register access.  */
// OBSOLETE USI fr30bf_h_pc_get (SIM_CPU *);
// OBSOLETE void fr30bf_h_pc_set (SIM_CPU *, USI);
// OBSOLETE SI fr30bf_h_gr_get (SIM_CPU *, UINT);
// OBSOLETE void fr30bf_h_gr_set (SIM_CPU *, UINT, SI);
// OBSOLETE SI fr30bf_h_cr_get (SIM_CPU *, UINT);
// OBSOLETE void fr30bf_h_cr_set (SIM_CPU *, UINT, SI);
// OBSOLETE SI fr30bf_h_dr_get (SIM_CPU *, UINT);
// OBSOLETE void fr30bf_h_dr_set (SIM_CPU *, UINT, SI);
// OBSOLETE USI fr30bf_h_ps_get (SIM_CPU *);
// OBSOLETE void fr30bf_h_ps_set (SIM_CPU *, USI);
// OBSOLETE SI fr30bf_h_r13_get (SIM_CPU *);
// OBSOLETE void fr30bf_h_r13_set (SIM_CPU *, SI);
// OBSOLETE SI fr30bf_h_r14_get (SIM_CPU *);
// OBSOLETE void fr30bf_h_r14_set (SIM_CPU *, SI);
// OBSOLETE SI fr30bf_h_r15_get (SIM_CPU *);
// OBSOLETE void fr30bf_h_r15_set (SIM_CPU *, SI);
// OBSOLETE BI fr30bf_h_nbit_get (SIM_CPU *);
// OBSOLETE void fr30bf_h_nbit_set (SIM_CPU *, BI);
// OBSOLETE BI fr30bf_h_zbit_get (SIM_CPU *);
// OBSOLETE void fr30bf_h_zbit_set (SIM_CPU *, BI);
// OBSOLETE BI fr30bf_h_vbit_get (SIM_CPU *);
// OBSOLETE void fr30bf_h_vbit_set (SIM_CPU *, BI);
// OBSOLETE BI fr30bf_h_cbit_get (SIM_CPU *);
// OBSOLETE void fr30bf_h_cbit_set (SIM_CPU *, BI);
// OBSOLETE BI fr30bf_h_ibit_get (SIM_CPU *);
// OBSOLETE void fr30bf_h_ibit_set (SIM_CPU *, BI);
// OBSOLETE BI fr30bf_h_sbit_get (SIM_CPU *);
// OBSOLETE void fr30bf_h_sbit_set (SIM_CPU *, BI);
// OBSOLETE BI fr30bf_h_tbit_get (SIM_CPU *);
// OBSOLETE void fr30bf_h_tbit_set (SIM_CPU *, BI);
// OBSOLETE BI fr30bf_h_d0bit_get (SIM_CPU *);
// OBSOLETE void fr30bf_h_d0bit_set (SIM_CPU *, BI);
// OBSOLETE BI fr30bf_h_d1bit_get (SIM_CPU *);
// OBSOLETE void fr30bf_h_d1bit_set (SIM_CPU *, BI);
// OBSOLETE UQI fr30bf_h_ccr_get (SIM_CPU *);
// OBSOLETE void fr30bf_h_ccr_set (SIM_CPU *, UQI);
// OBSOLETE UQI fr30bf_h_scr_get (SIM_CPU *);
// OBSOLETE void fr30bf_h_scr_set (SIM_CPU *, UQI);
// OBSOLETE UQI fr30bf_h_ilm_get (SIM_CPU *);
// OBSOLETE void fr30bf_h_ilm_set (SIM_CPU *, UQI);
// OBSOLETE 
// OBSOLETE /* These must be hand-written.  */
// OBSOLETE extern CPUREG_FETCH_FN fr30bf_fetch_register;
// OBSOLETE extern CPUREG_STORE_FN fr30bf_store_register;
// OBSOLETE 
// OBSOLETE typedef struct {
// OBSOLETE   UINT load_regs;
// OBSOLETE   UINT load_regs_pending;
// OBSOLETE } MODEL_FR30_1_DATA;
// OBSOLETE 
// OBSOLETE /* Instruction argument buffer.  */
// OBSOLETE 
// OBSOLETE union sem_fields {
// OBSOLETE   struct { /* no operands */
// OBSOLETE     int empty;
// OBSOLETE   } fmt_empty;
// OBSOLETE   struct { /*  */
// OBSOLETE     IADDR i_label9;
// OBSOLETE   } sfmt_brad;
// OBSOLETE   struct { /*  */
// OBSOLETE     UINT f_u8;
// OBSOLETE   } sfmt_int;
// OBSOLETE   struct { /*  */
// OBSOLETE     IADDR i_label12;
// OBSOLETE   } sfmt_call;
// OBSOLETE   struct { /*  */
// OBSOLETE     SI f_s10;
// OBSOLETE     unsigned char in_h_gr_SI_15;
// OBSOLETE     unsigned char out_h_gr_SI_15;
// OBSOLETE   } sfmt_addsp;
// OBSOLETE   struct { /*  */
// OBSOLETE     USI f_dir10;
// OBSOLETE     unsigned char in_h_gr_SI_15;
// OBSOLETE     unsigned char out_h_gr_SI_15;
// OBSOLETE   } sfmt_dmovr15pi;
// OBSOLETE   struct { /*  */
// OBSOLETE     UINT f_dir8;
// OBSOLETE     unsigned char in_h_gr_SI_13;
// OBSOLETE     unsigned char out_h_gr_SI_13;
// OBSOLETE   } sfmt_dmovr13pib;
// OBSOLETE   struct { /*  */
// OBSOLETE     USI f_dir9;
// OBSOLETE     unsigned char in_h_gr_SI_13;
// OBSOLETE     unsigned char out_h_gr_SI_13;
// OBSOLETE   } sfmt_dmovr13pih;
// OBSOLETE   struct { /*  */
// OBSOLETE     USI f_dir10;
// OBSOLETE     unsigned char in_h_gr_SI_13;
// OBSOLETE     unsigned char out_h_gr_SI_13;
// OBSOLETE   } sfmt_dmovr13pi;
// OBSOLETE   struct { /*  */
// OBSOLETE     UINT f_Rs2;
// OBSOLETE     unsigned char in_h_gr_SI_15;
// OBSOLETE     unsigned char out_h_gr_SI_15;
// OBSOLETE   } sfmt_ldr15dr;
// OBSOLETE   struct { /*  */
// OBSOLETE     SI* i_Ri;
// OBSOLETE     UINT f_Ri;
// OBSOLETE     UINT f_Rs1;
// OBSOLETE     unsigned char in_Ri;
// OBSOLETE   } sfmt_mov2dr;
// OBSOLETE   struct { /*  */
// OBSOLETE     SI* i_Ri;
// OBSOLETE     UINT f_Ri;
// OBSOLETE     UINT f_Rs1;
// OBSOLETE     unsigned char out_Ri;
// OBSOLETE   } sfmt_movdr;
// OBSOLETE   struct { /*  */
// OBSOLETE     SI* i_Ri;
// OBSOLETE     UINT f_Ri;
// OBSOLETE     UINT f_i32;
// OBSOLETE     unsigned char out_Ri;
// OBSOLETE   } sfmt_ldi32;
// OBSOLETE   struct { /*  */
// OBSOLETE     SI* i_Ri;
// OBSOLETE     UINT f_Ri;
// OBSOLETE     UINT f_i20;
// OBSOLETE     unsigned char out_Ri;
// OBSOLETE   } sfmt_ldi20;
// OBSOLETE   struct { /*  */
// OBSOLETE     SI* i_Ri;
// OBSOLETE     UINT f_Ri;
// OBSOLETE     UINT f_i8;
// OBSOLETE     unsigned char out_Ri;
// OBSOLETE   } sfmt_ldi8;
// OBSOLETE   struct { /*  */
// OBSOLETE     USI f_u10;
// OBSOLETE     unsigned char in_h_gr_SI_14;
// OBSOLETE     unsigned char in_h_gr_SI_15;
// OBSOLETE     unsigned char out_h_gr_SI_14;
// OBSOLETE     unsigned char out_h_gr_SI_15;
// OBSOLETE   } sfmt_enter;
// OBSOLETE   struct { /*  */
// OBSOLETE     SI* i_Ri;
// OBSOLETE     UINT f_Ri;
// OBSOLETE     unsigned char in_Ri;
// OBSOLETE     unsigned char in_h_gr_SI_15;
// OBSOLETE     unsigned char out_h_gr_SI_15;
// OBSOLETE   } sfmt_str15gr;
// OBSOLETE   struct { /*  */
// OBSOLETE     SI* i_Ri;
// OBSOLETE     UINT f_Ri;
// OBSOLETE     USI f_udisp6;
// OBSOLETE     unsigned char in_Ri;
// OBSOLETE     unsigned char in_h_gr_SI_15;
// OBSOLETE   } sfmt_str15;
// OBSOLETE   struct { /*  */
// OBSOLETE     SI* i_Ri;
// OBSOLETE     INT f_disp8;
// OBSOLETE     UINT f_Ri;
// OBSOLETE     unsigned char in_Ri;
// OBSOLETE     unsigned char in_h_gr_SI_14;
// OBSOLETE   } sfmt_str14b;
// OBSOLETE   struct { /*  */
// OBSOLETE     SI* i_Ri;
// OBSOLETE     SI f_disp9;
// OBSOLETE     UINT f_Ri;
// OBSOLETE     unsigned char in_Ri;
// OBSOLETE     unsigned char in_h_gr_SI_14;
// OBSOLETE   } sfmt_str14h;
// OBSOLETE   struct { /*  */
// OBSOLETE     SI* i_Ri;
// OBSOLETE     SI f_disp10;
// OBSOLETE     UINT f_Ri;
// OBSOLETE     unsigned char in_Ri;
// OBSOLETE     unsigned char in_h_gr_SI_14;
// OBSOLETE   } sfmt_str14;
// OBSOLETE   struct { /*  */
// OBSOLETE     SI* i_Ri;
// OBSOLETE     UINT f_Ri;
// OBSOLETE     unsigned char in_h_gr_SI_15;
// OBSOLETE     unsigned char out_Ri;
// OBSOLETE     unsigned char out_h_gr_SI_15;
// OBSOLETE   } sfmt_ldr15gr;
// OBSOLETE   struct { /*  */
// OBSOLETE     SI* i_Ri;
// OBSOLETE     UINT f_Ri;
// OBSOLETE     USI f_udisp6;
// OBSOLETE     unsigned char in_h_gr_SI_15;
// OBSOLETE     unsigned char out_Ri;
// OBSOLETE   } sfmt_ldr15;
// OBSOLETE   struct { /*  */
// OBSOLETE     SI* i_Ri;
// OBSOLETE     INT f_disp8;
// OBSOLETE     UINT f_Ri;
// OBSOLETE     unsigned char in_h_gr_SI_14;
// OBSOLETE     unsigned char out_Ri;
// OBSOLETE   } sfmt_ldr14ub;
// OBSOLETE   struct { /*  */
// OBSOLETE     SI* i_Ri;
// OBSOLETE     SI f_disp9;
// OBSOLETE     UINT f_Ri;
// OBSOLETE     unsigned char in_h_gr_SI_14;
// OBSOLETE     unsigned char out_Ri;
// OBSOLETE   } sfmt_ldr14uh;
// OBSOLETE   struct { /*  */
// OBSOLETE     SI* i_Ri;
// OBSOLETE     SI f_disp10;
// OBSOLETE     UINT f_Ri;
// OBSOLETE     unsigned char in_h_gr_SI_14;
// OBSOLETE     unsigned char out_Ri;
// OBSOLETE   } sfmt_ldr14;
// OBSOLETE   struct { /*  */
// OBSOLETE     SI* i_Ri;
// OBSOLETE     SI f_m4;
// OBSOLETE     UINT f_Ri;
// OBSOLETE     unsigned char in_Ri;
// OBSOLETE     unsigned char out_Ri;
// OBSOLETE   } sfmt_add2;
// OBSOLETE   struct { /*  */
// OBSOLETE     SI* i_Ri;
// OBSOLETE     UINT f_Ri;
// OBSOLETE     UINT f_u4;
// OBSOLETE     unsigned char in_Ri;
// OBSOLETE     unsigned char out_Ri;
// OBSOLETE   } sfmt_addi;
// OBSOLETE   struct { /*  */
// OBSOLETE     SI* i_Ri;
// OBSOLETE     SI* i_Rj;
// OBSOLETE     UINT f_Ri;
// OBSOLETE     UINT f_Rj;
// OBSOLETE     unsigned char in_Ri;
// OBSOLETE     unsigned char in_Rj;
// OBSOLETE     unsigned char in_h_gr_SI_13;
// OBSOLETE   } sfmt_str13;
// OBSOLETE   struct { /*  */
// OBSOLETE     SI* i_Ri;
// OBSOLETE     SI* i_Rj;
// OBSOLETE     UINT f_Ri;
// OBSOLETE     UINT f_Rj;
// OBSOLETE     unsigned char in_Rj;
// OBSOLETE     unsigned char in_h_gr_SI_13;
// OBSOLETE     unsigned char out_Ri;
// OBSOLETE   } sfmt_ldr13;
// OBSOLETE   struct { /*  */
// OBSOLETE     SI* i_Ri;
// OBSOLETE     SI* i_Rj;
// OBSOLETE     UINT f_Ri;
// OBSOLETE     UINT f_Rj;
// OBSOLETE     unsigned char in_Ri;
// OBSOLETE     unsigned char in_Rj;
// OBSOLETE     unsigned char out_Ri;
// OBSOLETE   } sfmt_add;
// OBSOLETE   struct { /*  */
// OBSOLETE     UINT f_reglist_hi_st;
// OBSOLETE     unsigned char in_h_gr_SI_10;
// OBSOLETE     unsigned char in_h_gr_SI_11;
// OBSOLETE     unsigned char in_h_gr_SI_12;
// OBSOLETE     unsigned char in_h_gr_SI_13;
// OBSOLETE     unsigned char in_h_gr_SI_14;
// OBSOLETE     unsigned char in_h_gr_SI_15;
// OBSOLETE     unsigned char in_h_gr_SI_8;
// OBSOLETE     unsigned char in_h_gr_SI_9;
// OBSOLETE     unsigned char out_h_gr_SI_15;
// OBSOLETE   } sfmt_stm1;
// OBSOLETE   struct { /*  */
// OBSOLETE     UINT f_reglist_hi_ld;
// OBSOLETE     unsigned char in_h_gr_SI_15;
// OBSOLETE     unsigned char out_h_gr_SI_10;
// OBSOLETE     unsigned char out_h_gr_SI_11;
// OBSOLETE     unsigned char out_h_gr_SI_12;
// OBSOLETE     unsigned char out_h_gr_SI_13;
// OBSOLETE     unsigned char out_h_gr_SI_14;
// OBSOLETE     unsigned char out_h_gr_SI_15;
// OBSOLETE     unsigned char out_h_gr_SI_8;
// OBSOLETE     unsigned char out_h_gr_SI_9;
// OBSOLETE   } sfmt_ldm1;
// OBSOLETE   struct { /*  */
// OBSOLETE     UINT f_reglist_low_st;
// OBSOLETE     unsigned char in_h_gr_SI_0;
// OBSOLETE     unsigned char in_h_gr_SI_1;
// OBSOLETE     unsigned char in_h_gr_SI_15;
// OBSOLETE     unsigned char in_h_gr_SI_2;
// OBSOLETE     unsigned char in_h_gr_SI_3;
// OBSOLETE     unsigned char in_h_gr_SI_4;
// OBSOLETE     unsigned char in_h_gr_SI_5;
// OBSOLETE     unsigned char in_h_gr_SI_6;
// OBSOLETE     unsigned char in_h_gr_SI_7;
// OBSOLETE     unsigned char out_h_gr_SI_15;
// OBSOLETE   } sfmt_stm0;
// OBSOLETE   struct { /*  */
// OBSOLETE     UINT f_reglist_low_ld;
// OBSOLETE     unsigned char in_h_gr_SI_15;
// OBSOLETE     unsigned char out_h_gr_SI_0;
// OBSOLETE     unsigned char out_h_gr_SI_1;
// OBSOLETE     unsigned char out_h_gr_SI_15;
// OBSOLETE     unsigned char out_h_gr_SI_2;
// OBSOLETE     unsigned char out_h_gr_SI_3;
// OBSOLETE     unsigned char out_h_gr_SI_4;
// OBSOLETE     unsigned char out_h_gr_SI_5;
// OBSOLETE     unsigned char out_h_gr_SI_6;
// OBSOLETE     unsigned char out_h_gr_SI_7;
// OBSOLETE   } sfmt_ldm0;
// OBSOLETE #if WITH_SCACHE_PBB
// OBSOLETE   /* Writeback handler.  */
// OBSOLETE   struct {
// OBSOLETE     /* Pointer to argbuf entry for insn whose results need writing back.  */
// OBSOLETE     const struct argbuf *abuf;
// OBSOLETE   } write;
// OBSOLETE   /* x-before handler */
// OBSOLETE   struct {
// OBSOLETE     /*const SCACHE *insns[MAX_PARALLEL_INSNS];*/
// OBSOLETE     int first_p;
// OBSOLETE   } before;
// OBSOLETE   /* x-after handler */
// OBSOLETE   struct {
// OBSOLETE     int empty;
// OBSOLETE   } after;
// OBSOLETE   /* This entry is used to terminate each pbb.  */
// OBSOLETE   struct {
// OBSOLETE     /* Number of insns in pbb.  */
// OBSOLETE     int insn_count;
// OBSOLETE     /* Next pbb to execute.  */
// OBSOLETE     SCACHE *next;
// OBSOLETE     SCACHE *branch_target;
// OBSOLETE   } chain;
// OBSOLETE #endif
// OBSOLETE };
// OBSOLETE 
// OBSOLETE /* The ARGBUF struct.  */
// OBSOLETE struct argbuf {
// OBSOLETE   /* These are the baseclass definitions.  */
// OBSOLETE   IADDR addr;
// OBSOLETE   const IDESC *idesc;
// OBSOLETE   char trace_p;
// OBSOLETE   char profile_p;
// OBSOLETE   /* ??? Temporary hack for skip insns.  */
// OBSOLETE   char skip_count;
// OBSOLETE   char unused;
// OBSOLETE   /* cpu specific data follows */
// OBSOLETE   union sem semantic;
// OBSOLETE   int written;
// OBSOLETE   union sem_fields fields;
// OBSOLETE };
// OBSOLETE 
// OBSOLETE /* A cached insn.
// OBSOLETE 
// OBSOLETE    ??? SCACHE used to contain more than just argbuf.  We could delete the
// OBSOLETE    type entirely and always just use ARGBUF, but for future concerns and as
// OBSOLETE    a level of abstraction it is left in.  */
// OBSOLETE 
// OBSOLETE struct scache {
// OBSOLETE   struct argbuf argbuf;
// OBSOLETE };
// OBSOLETE 
// OBSOLETE /* Macros to simplify extraction, reading and semantic code.
// OBSOLETE    These define and assign the local vars that contain the insn's fields.  */
// OBSOLETE 
// OBSOLETE #define EXTRACT_IFMT_EMPTY_VARS \
// OBSOLETE   unsigned int length;
// OBSOLETE #define EXTRACT_IFMT_EMPTY_CODE \
// OBSOLETE   length = 0; \
// OBSOLETE 
// OBSOLETE #define EXTRACT_IFMT_ADD_VARS \
// OBSOLETE   UINT f_op1; \
// OBSOLETE   UINT f_op2; \
// OBSOLETE   UINT f_Rj; \
// OBSOLETE   UINT f_Ri; \
// OBSOLETE   unsigned int length;
// OBSOLETE #define EXTRACT_IFMT_ADD_CODE \
// OBSOLETE   length = 2; \
// OBSOLETE   f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
// OBSOLETE   f_op2 = EXTRACT_MSB0_UINT (insn, 16, 4, 4); \
// OBSOLETE   f_Rj = EXTRACT_MSB0_UINT (insn, 16, 8, 4); \
// OBSOLETE   f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4); \
// OBSOLETE 
// OBSOLETE #define EXTRACT_IFMT_ADDI_VARS \
// OBSOLETE   UINT f_op1; \
// OBSOLETE   UINT f_op2; \
// OBSOLETE   UINT f_u4; \
// OBSOLETE   UINT f_Ri; \
// OBSOLETE   unsigned int length;
// OBSOLETE #define EXTRACT_IFMT_ADDI_CODE \
// OBSOLETE   length = 2; \
// OBSOLETE   f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
// OBSOLETE   f_op2 = EXTRACT_MSB0_UINT (insn, 16, 4, 4); \
// OBSOLETE   f_u4 = EXTRACT_MSB0_UINT (insn, 16, 8, 4); \
// OBSOLETE   f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4); \
// OBSOLETE 
// OBSOLETE #define EXTRACT_IFMT_ADD2_VARS \
// OBSOLETE   UINT f_op1; \
// OBSOLETE   UINT f_op2; \
// OBSOLETE   SI f_m4; \
// OBSOLETE   UINT f_Ri; \
// OBSOLETE   unsigned int length;
// OBSOLETE #define EXTRACT_IFMT_ADD2_CODE \
// OBSOLETE   length = 2; \
// OBSOLETE   f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
// OBSOLETE   f_op2 = EXTRACT_MSB0_UINT (insn, 16, 4, 4); \
// OBSOLETE   f_m4 = ((EXTRACT_MSB0_UINT (insn, 16, 8, 4)) | (((-1) << (4)))); \
// OBSOLETE   f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4); \
// OBSOLETE 
// OBSOLETE #define EXTRACT_IFMT_DIV0S_VARS \
// OBSOLETE   UINT f_op1; \
// OBSOLETE   UINT f_op2; \
// OBSOLETE   UINT f_op3; \
// OBSOLETE   UINT f_Ri; \
// OBSOLETE   unsigned int length;
// OBSOLETE #define EXTRACT_IFMT_DIV0S_CODE \
// OBSOLETE   length = 2; \
// OBSOLETE   f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
// OBSOLETE   f_op2 = EXTRACT_MSB0_UINT (insn, 16, 4, 4); \
// OBSOLETE   f_op3 = EXTRACT_MSB0_UINT (insn, 16, 8, 4); \
// OBSOLETE   f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4); \
// OBSOLETE 
// OBSOLETE #define EXTRACT_IFMT_DIV3_VARS \
// OBSOLETE   UINT f_op1; \
// OBSOLETE   UINT f_op2; \
// OBSOLETE   UINT f_op3; \
// OBSOLETE   UINT f_op4; \
// OBSOLETE   unsigned int length;
// OBSOLETE #define EXTRACT_IFMT_DIV3_CODE \
// OBSOLETE   length = 2; \
// OBSOLETE   f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
// OBSOLETE   f_op2 = EXTRACT_MSB0_UINT (insn, 16, 4, 4); \
// OBSOLETE   f_op3 = EXTRACT_MSB0_UINT (insn, 16, 8, 4); \
// OBSOLETE   f_op4 = EXTRACT_MSB0_UINT (insn, 16, 12, 4); \
// OBSOLETE 
// OBSOLETE #define EXTRACT_IFMT_LDI8_VARS \
// OBSOLETE   UINT f_op1; \
// OBSOLETE   UINT f_i8; \
// OBSOLETE   UINT f_Ri; \
// OBSOLETE   unsigned int length;
// OBSOLETE #define EXTRACT_IFMT_LDI8_CODE \
// OBSOLETE   length = 2; \
// OBSOLETE   f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
// OBSOLETE   f_i8 = EXTRACT_MSB0_UINT (insn, 16, 4, 8); \
// OBSOLETE   f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4); \
// OBSOLETE 
// OBSOLETE #define EXTRACT_IFMT_LDI20_VARS \
// OBSOLETE   UINT f_op1; \
// OBSOLETE   UINT f_i20_4; \
// OBSOLETE   UINT f_i20_16; \
// OBSOLETE   UINT f_i20; \
// OBSOLETE   UINT f_op2; \
// OBSOLETE   UINT f_Ri; \
// OBSOLETE   /* Contents of trailing part of insn.  */ \
// OBSOLETE   UINT word_1; \
// OBSOLETE   unsigned int length;
// OBSOLETE #define EXTRACT_IFMT_LDI20_CODE \
// OBSOLETE   length = 4; \
// OBSOLETE   word_1 = GETIMEMUHI (current_cpu, pc + 2); \
// OBSOLETE   f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
// OBSOLETE   f_i20_4 = EXTRACT_MSB0_UINT (insn, 16, 8, 4); \
// OBSOLETE   f_i20_16 = (0|(EXTRACT_MSB0_UINT (word_1, 16, 0, 16) << 0)); \
// OBSOLETE {\
// OBSOLETE   f_i20 = ((((f_i20_4) << (16))) | (f_i20_16));\
// OBSOLETE }\
// OBSOLETE   f_op2 = EXTRACT_MSB0_UINT (insn, 16, 4, 4); \
// OBSOLETE   f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4); \
// OBSOLETE 
// OBSOLETE #define EXTRACT_IFMT_LDI32_VARS \
// OBSOLETE   UINT f_op1; \
// OBSOLETE   UINT f_i32; \
// OBSOLETE   UINT f_op2; \
// OBSOLETE   UINT f_op3; \
// OBSOLETE   UINT f_Ri; \
// OBSOLETE   /* Contents of trailing part of insn.  */ \
// OBSOLETE   UINT word_1; \
// OBSOLETE   UINT word_2; \
// OBSOLETE   unsigned int length;
// OBSOLETE #define EXTRACT_IFMT_LDI32_CODE \
// OBSOLETE   length = 6; \
// OBSOLETE   word_1 = GETIMEMUHI (current_cpu, pc + 2); \
// OBSOLETE   word_2 = GETIMEMUHI (current_cpu, pc + 4); \
// OBSOLETE   f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
// OBSOLETE   f_i32 = (0|(EXTRACT_MSB0_UINT (word_2, 16, 0, 16) << 0)|(EXTRACT_MSB0_UINT (word_1, 16, 0, 16) << 16)); \
// OBSOLETE   f_op2 = EXTRACT_MSB0_UINT (insn, 16, 4, 4); \
// OBSOLETE   f_op3 = EXTRACT_MSB0_UINT (insn, 16, 8, 4); \
// OBSOLETE   f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4); \
// OBSOLETE 
// OBSOLETE #define EXTRACT_IFMT_LDR14_VARS \
// OBSOLETE   UINT f_op1; \
// OBSOLETE   SI f_disp10; \
// OBSOLETE   UINT f_Ri; \
// OBSOLETE   unsigned int length;
// OBSOLETE #define EXTRACT_IFMT_LDR14_CODE \
// OBSOLETE   length = 2; \
// OBSOLETE   f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
// OBSOLETE   f_disp10 = ((EXTRACT_MSB0_INT (insn, 16, 4, 8)) << (2)); \
// OBSOLETE   f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4); \
// OBSOLETE 
// OBSOLETE #define EXTRACT_IFMT_LDR14UH_VARS \
// OBSOLETE   UINT f_op1; \
// OBSOLETE   SI f_disp9; \
// OBSOLETE   UINT f_Ri; \
// OBSOLETE   unsigned int length;
// OBSOLETE #define EXTRACT_IFMT_LDR14UH_CODE \
// OBSOLETE   length = 2; \
// OBSOLETE   f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
// OBSOLETE   f_disp9 = ((EXTRACT_MSB0_INT (insn, 16, 4, 8)) << (1)); \
// OBSOLETE   f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4); \
// OBSOLETE 
// OBSOLETE #define EXTRACT_IFMT_LDR14UB_VARS \
// OBSOLETE   UINT f_op1; \
// OBSOLETE   INT f_disp8; \
// OBSOLETE   UINT f_Ri; \
// OBSOLETE   unsigned int length;
// OBSOLETE #define EXTRACT_IFMT_LDR14UB_CODE \
// OBSOLETE   length = 2; \
// OBSOLETE   f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
// OBSOLETE   f_disp8 = EXTRACT_MSB0_INT (insn, 16, 4, 8); \
// OBSOLETE   f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4); \
// OBSOLETE 
// OBSOLETE #define EXTRACT_IFMT_LDR15_VARS \
// OBSOLETE   UINT f_op1; \
// OBSOLETE   UINT f_op2; \
// OBSOLETE   USI f_udisp6; \
// OBSOLETE   UINT f_Ri; \
// OBSOLETE   unsigned int length;
// OBSOLETE #define EXTRACT_IFMT_LDR15_CODE \
// OBSOLETE   length = 2; \
// OBSOLETE   f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
// OBSOLETE   f_op2 = EXTRACT_MSB0_UINT (insn, 16, 4, 4); \
// OBSOLETE   f_udisp6 = ((EXTRACT_MSB0_UINT (insn, 16, 8, 4)) << (2)); \
// OBSOLETE   f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4); \
// OBSOLETE 
// OBSOLETE #define EXTRACT_IFMT_LDR15DR_VARS \
// OBSOLETE   UINT f_op1; \
// OBSOLETE   UINT f_op2; \
// OBSOLETE   UINT f_op3; \
// OBSOLETE   UINT f_Rs2; \
// OBSOLETE   unsigned int length;
// OBSOLETE #define EXTRACT_IFMT_LDR15DR_CODE \
// OBSOLETE   length = 2; \
// OBSOLETE   f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
// OBSOLETE   f_op2 = EXTRACT_MSB0_UINT (insn, 16, 4, 4); \
// OBSOLETE   f_op3 = EXTRACT_MSB0_UINT (insn, 16, 8, 4); \
// OBSOLETE   f_Rs2 = EXTRACT_MSB0_UINT (insn, 16, 12, 4); \
// OBSOLETE 
// OBSOLETE #define EXTRACT_IFMT_MOVDR_VARS \
// OBSOLETE   UINT f_op1; \
// OBSOLETE   UINT f_op2; \
// OBSOLETE   UINT f_Rs1; \
// OBSOLETE   UINT f_Ri; \
// OBSOLETE   unsigned int length;
// OBSOLETE #define EXTRACT_IFMT_MOVDR_CODE \
// OBSOLETE   length = 2; \
// OBSOLETE   f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
// OBSOLETE   f_op2 = EXTRACT_MSB0_UINT (insn, 16, 4, 4); \
// OBSOLETE   f_Rs1 = EXTRACT_MSB0_UINT (insn, 16, 8, 4); \
// OBSOLETE   f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4); \
// OBSOLETE 
// OBSOLETE #define EXTRACT_IFMT_CALL_VARS \
// OBSOLETE   UINT f_op1; \
// OBSOLETE   UINT f_op5; \
// OBSOLETE   SI f_rel12; \
// OBSOLETE   unsigned int length;
// OBSOLETE #define EXTRACT_IFMT_CALL_CODE \
// OBSOLETE   length = 2; \
// OBSOLETE   f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
// OBSOLETE   f_op5 = EXTRACT_MSB0_UINT (insn, 16, 4, 1); \
// OBSOLETE   f_rel12 = ((((EXTRACT_MSB0_INT (insn, 16, 5, 11)) << (1))) + (((pc) + (2)))); \
// OBSOLETE 
// OBSOLETE #define EXTRACT_IFMT_INT_VARS \
// OBSOLETE   UINT f_op1; \
// OBSOLETE   UINT f_op2; \
// OBSOLETE   UINT f_u8; \
// OBSOLETE   unsigned int length;
// OBSOLETE #define EXTRACT_IFMT_INT_CODE \
// OBSOLETE   length = 2; \
// OBSOLETE   f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
// OBSOLETE   f_op2 = EXTRACT_MSB0_UINT (insn, 16, 4, 4); \
// OBSOLETE   f_u8 = EXTRACT_MSB0_UINT (insn, 16, 8, 8); \
// OBSOLETE 
// OBSOLETE #define EXTRACT_IFMT_BRAD_VARS \
// OBSOLETE   UINT f_op1; \
// OBSOLETE   UINT f_cc; \
// OBSOLETE   SI f_rel9; \
// OBSOLETE   unsigned int length;
// OBSOLETE #define EXTRACT_IFMT_BRAD_CODE \
// OBSOLETE   length = 2; \
// OBSOLETE   f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
// OBSOLETE   f_cc = EXTRACT_MSB0_UINT (insn, 16, 4, 4); \
// OBSOLETE   f_rel9 = ((((EXTRACT_MSB0_INT (insn, 16, 8, 8)) << (1))) + (((pc) + (2)))); \
// OBSOLETE 
// OBSOLETE #define EXTRACT_IFMT_DMOVR13_VARS \
// OBSOLETE   UINT f_op1; \
// OBSOLETE   UINT f_op2; \
// OBSOLETE   USI f_dir10; \
// OBSOLETE   unsigned int length;
// OBSOLETE #define EXTRACT_IFMT_DMOVR13_CODE \
// OBSOLETE   length = 2; \
// OBSOLETE   f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
// OBSOLETE   f_op2 = EXTRACT_MSB0_UINT (insn, 16, 4, 4); \
// OBSOLETE   f_dir10 = ((EXTRACT_MSB0_UINT (insn, 16, 8, 8)) << (2)); \
// OBSOLETE 
// OBSOLETE #define EXTRACT_IFMT_DMOVR13H_VARS \
// OBSOLETE   UINT f_op1; \
// OBSOLETE   UINT f_op2; \
// OBSOLETE   USI f_dir9; \
// OBSOLETE   unsigned int length;
// OBSOLETE #define EXTRACT_IFMT_DMOVR13H_CODE \
// OBSOLETE   length = 2; \
// OBSOLETE   f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
// OBSOLETE   f_op2 = EXTRACT_MSB0_UINT (insn, 16, 4, 4); \
// OBSOLETE   f_dir9 = ((EXTRACT_MSB0_UINT (insn, 16, 8, 8)) << (1)); \
// OBSOLETE 
// OBSOLETE #define EXTRACT_IFMT_DMOVR13B_VARS \
// OBSOLETE   UINT f_op1; \
// OBSOLETE   UINT f_op2; \
// OBSOLETE   UINT f_dir8; \
// OBSOLETE   unsigned int length;
// OBSOLETE #define EXTRACT_IFMT_DMOVR13B_CODE \
// OBSOLETE   length = 2; \
// OBSOLETE   f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
// OBSOLETE   f_op2 = EXTRACT_MSB0_UINT (insn, 16, 4, 4); \
// OBSOLETE   f_dir8 = EXTRACT_MSB0_UINT (insn, 16, 8, 8); \
// OBSOLETE 
// OBSOLETE #define EXTRACT_IFMT_COPOP_VARS \
// OBSOLETE   UINT f_op1; \
// OBSOLETE   UINT f_ccc; \
// OBSOLETE   UINT f_op2; \
// OBSOLETE   UINT f_op3; \
// OBSOLETE   UINT f_CRj; \
// OBSOLETE   UINT f_u4c; \
// OBSOLETE   UINT f_CRi; \
// OBSOLETE   /* Contents of trailing part of insn.  */ \
// OBSOLETE   UINT word_1; \
// OBSOLETE   unsigned int length;
// OBSOLETE #define EXTRACT_IFMT_COPOP_CODE \
// OBSOLETE   length = 4; \
// OBSOLETE   word_1 = GETIMEMUHI (current_cpu, pc + 2); \
// OBSOLETE   f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
// OBSOLETE   f_ccc = (0|(EXTRACT_MSB0_UINT (word_1, 16, 0, 8) << 0)); \
// OBSOLETE   f_op2 = EXTRACT_MSB0_UINT (insn, 16, 4, 4); \
// OBSOLETE   f_op3 = EXTRACT_MSB0_UINT (insn, 16, 8, 4); \
// OBSOLETE   f_CRj = (0|(EXTRACT_MSB0_UINT (word_1, 16, 8, 4) << 0)); \
// OBSOLETE   f_u4c = EXTRACT_MSB0_UINT (insn, 16, 12, 4); \
// OBSOLETE   f_CRi = (0|(EXTRACT_MSB0_UINT (word_1, 16, 12, 4) << 0)); \
// OBSOLETE 
// OBSOLETE #define EXTRACT_IFMT_COPLD_VARS \
// OBSOLETE   UINT f_op1; \
// OBSOLETE   UINT f_ccc; \
// OBSOLETE   UINT f_op2; \
// OBSOLETE   UINT f_op3; \
// OBSOLETE   UINT f_Rjc; \
// OBSOLETE   UINT f_u4c; \
// OBSOLETE   UINT f_CRi; \
// OBSOLETE   /* Contents of trailing part of insn.  */ \
// OBSOLETE   UINT word_1; \
// OBSOLETE   unsigned int length;
// OBSOLETE #define EXTRACT_IFMT_COPLD_CODE \
// OBSOLETE   length = 4; \
// OBSOLETE   word_1 = GETIMEMUHI (current_cpu, pc + 2); \
// OBSOLETE   f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
// OBSOLETE   f_ccc = (0|(EXTRACT_MSB0_UINT (word_1, 16, 0, 8) << 0)); \
// OBSOLETE   f_op2 = EXTRACT_MSB0_UINT (insn, 16, 4, 4); \
// OBSOLETE   f_op3 = EXTRACT_MSB0_UINT (insn, 16, 8, 4); \
// OBSOLETE   f_Rjc = (0|(EXTRACT_MSB0_UINT (word_1, 16, 8, 4) << 0)); \
// OBSOLETE   f_u4c = EXTRACT_MSB0_UINT (insn, 16, 12, 4); \
// OBSOLETE   f_CRi = (0|(EXTRACT_MSB0_UINT (word_1, 16, 12, 4) << 0)); \
// OBSOLETE 
// OBSOLETE #define EXTRACT_IFMT_COPST_VARS \
// OBSOLETE   UINT f_op1; \
// OBSOLETE   UINT f_ccc; \
// OBSOLETE   UINT f_op2; \
// OBSOLETE   UINT f_op3; \
// OBSOLETE   UINT f_CRj; \
// OBSOLETE   UINT f_u4c; \
// OBSOLETE   UINT f_Ric; \
// OBSOLETE   /* Contents of trailing part of insn.  */ \
// OBSOLETE   UINT word_1; \
// OBSOLETE   unsigned int length;
// OBSOLETE #define EXTRACT_IFMT_COPST_CODE \
// OBSOLETE   length = 4; \
// OBSOLETE   word_1 = GETIMEMUHI (current_cpu, pc + 2); \
// OBSOLETE   f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
// OBSOLETE   f_ccc = (0|(EXTRACT_MSB0_UINT (word_1, 16, 0, 8) << 0)); \
// OBSOLETE   f_op2 = EXTRACT_MSB0_UINT (insn, 16, 4, 4); \
// OBSOLETE   f_op3 = EXTRACT_MSB0_UINT (insn, 16, 8, 4); \
// OBSOLETE   f_CRj = (0|(EXTRACT_MSB0_UINT (word_1, 16, 8, 4) << 0)); \
// OBSOLETE   f_u4c = EXTRACT_MSB0_UINT (insn, 16, 12, 4); \
// OBSOLETE   f_Ric = (0|(EXTRACT_MSB0_UINT (word_1, 16, 12, 4) << 0)); \
// OBSOLETE 
// OBSOLETE #define EXTRACT_IFMT_ADDSP_VARS \
// OBSOLETE   UINT f_op1; \
// OBSOLETE   UINT f_op2; \
// OBSOLETE   SI f_s10; \
// OBSOLETE   unsigned int length;
// OBSOLETE #define EXTRACT_IFMT_ADDSP_CODE \
// OBSOLETE   length = 2; \
// OBSOLETE   f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
// OBSOLETE   f_op2 = EXTRACT_MSB0_UINT (insn, 16, 4, 4); \
// OBSOLETE   f_s10 = ((EXTRACT_MSB0_INT (insn, 16, 8, 8)) << (2)); \
// OBSOLETE 
// OBSOLETE #define EXTRACT_IFMT_LDM0_VARS \
// OBSOLETE   UINT f_op1; \
// OBSOLETE   UINT f_op2; \
// OBSOLETE   UINT f_reglist_low_ld; \
// OBSOLETE   unsigned int length;
// OBSOLETE #define EXTRACT_IFMT_LDM0_CODE \
// OBSOLETE   length = 2; \
// OBSOLETE   f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
// OBSOLETE   f_op2 = EXTRACT_MSB0_UINT (insn, 16, 4, 4); \
// OBSOLETE   f_reglist_low_ld = EXTRACT_MSB0_UINT (insn, 16, 8, 8); \
// OBSOLETE 
// OBSOLETE #define EXTRACT_IFMT_LDM1_VARS \
// OBSOLETE   UINT f_op1; \
// OBSOLETE   UINT f_op2; \
// OBSOLETE   UINT f_reglist_hi_ld; \
// OBSOLETE   unsigned int length;
// OBSOLETE #define EXTRACT_IFMT_LDM1_CODE \
// OBSOLETE   length = 2; \
// OBSOLETE   f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
// OBSOLETE   f_op2 = EXTRACT_MSB0_UINT (insn, 16, 4, 4); \
// OBSOLETE   f_reglist_hi_ld = EXTRACT_MSB0_UINT (insn, 16, 8, 8); \
// OBSOLETE 
// OBSOLETE #define EXTRACT_IFMT_STM0_VARS \
// OBSOLETE   UINT f_op1; \
// OBSOLETE   UINT f_op2; \
// OBSOLETE   UINT f_reglist_low_st; \
// OBSOLETE   unsigned int length;
// OBSOLETE #define EXTRACT_IFMT_STM0_CODE \
// OBSOLETE   length = 2; \
// OBSOLETE   f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
// OBSOLETE   f_op2 = EXTRACT_MSB0_UINT (insn, 16, 4, 4); \
// OBSOLETE   f_reglist_low_st = EXTRACT_MSB0_UINT (insn, 16, 8, 8); \
// OBSOLETE 
// OBSOLETE #define EXTRACT_IFMT_STM1_VARS \
// OBSOLETE   UINT f_op1; \
// OBSOLETE   UINT f_op2; \
// OBSOLETE   UINT f_reglist_hi_st; \
// OBSOLETE   unsigned int length;
// OBSOLETE #define EXTRACT_IFMT_STM1_CODE \
// OBSOLETE   length = 2; \
// OBSOLETE   f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
// OBSOLETE   f_op2 = EXTRACT_MSB0_UINT (insn, 16, 4, 4); \
// OBSOLETE   f_reglist_hi_st = EXTRACT_MSB0_UINT (insn, 16, 8, 8); \
// OBSOLETE 
// OBSOLETE #define EXTRACT_IFMT_ENTER_VARS \
// OBSOLETE   UINT f_op1; \
// OBSOLETE   UINT f_op2; \
// OBSOLETE   USI f_u10; \
// OBSOLETE   unsigned int length;
// OBSOLETE #define EXTRACT_IFMT_ENTER_CODE \
// OBSOLETE   length = 2; \
// OBSOLETE   f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
// OBSOLETE   f_op2 = EXTRACT_MSB0_UINT (insn, 16, 4, 4); \
// OBSOLETE   f_u10 = ((EXTRACT_MSB0_UINT (insn, 16, 8, 8)) << (2)); \
// OBSOLETE 
// OBSOLETE /* Collection of various things for the trace handler to use.  */
// OBSOLETE 
// OBSOLETE typedef struct trace_record {
// OBSOLETE   IADDR pc;
// OBSOLETE   /* FIXME:wip */
// OBSOLETE } TRACE_RECORD;
// OBSOLETE 
// OBSOLETE #endif /* CPU_FR30BF_H */
@


1.3
log
@2001-03-05  Dave Brolley  <brolley@@

        * arch.c: Regenerate.
        * arch.h: Regenerate.
        * cpu.c: Regenerate.
        * cpu.h: Regenerate.
        * cpuall.h: Regenerate.
        * decode.c: Regenerate.
        * decode.h: Regenerate.
        * model.c: Regenerate.
        * sem-switch.c: Regenerate.
        * sem.c: Regenerate.
@
text
@d5 1
a5 1
Copyright (C) 1996, 1997, 1998, 1999, 2000 Free Software Foundation, Inc.
d7 1
a7 1
This file is part of the GNU Simulators.
d209 2
a210 2
    unsigned char in_h_gr_15;
    unsigned char out_h_gr_15;
d214 2
a215 2
    unsigned char in_h_gr_15;
    unsigned char out_h_gr_15;
d219 2
a220 2
    unsigned char in_h_gr_13;
    unsigned char out_h_gr_13;
d224 2
a225 2
    unsigned char in_h_gr_13;
    unsigned char out_h_gr_13;
d229 2
a230 2
    unsigned char in_h_gr_13;
    unsigned char out_h_gr_13;
d234 2
a235 2
    unsigned char in_h_gr_15;
    unsigned char out_h_gr_15;
d269 4
a272 4
    unsigned char in_h_gr_14;
    unsigned char in_h_gr_15;
    unsigned char out_h_gr_14;
    unsigned char out_h_gr_15;
d278 2
a279 2
    unsigned char in_h_gr_15;
    unsigned char out_h_gr_15;
d286 1
a286 1
    unsigned char in_h_gr_15;
d293 1
a293 1
    unsigned char in_h_gr_14;
d300 1
a300 1
    unsigned char in_h_gr_14;
d307 1
a307 1
    unsigned char in_h_gr_14;
d312 1
a312 1
    unsigned char in_h_gr_15;
d314 1
a314 1
    unsigned char out_h_gr_15;
d320 1
a320 1
    unsigned char in_h_gr_15;
d327 1
a327 1
    unsigned char in_h_gr_14;
d334 1
a334 1
    unsigned char in_h_gr_14;
d341 1
a341 1
    unsigned char in_h_gr_14;
d365 1
a365 1
    unsigned char in_h_gr_13;
d373 1
a373 1
    unsigned char in_h_gr_13;
d387 9
a395 9
    unsigned char in_h_gr_10;
    unsigned char in_h_gr_11;
    unsigned char in_h_gr_12;
    unsigned char in_h_gr_13;
    unsigned char in_h_gr_14;
    unsigned char in_h_gr_15;
    unsigned char in_h_gr_8;
    unsigned char in_h_gr_9;
    unsigned char out_h_gr_15;
d399 9
a407 9
    unsigned char in_h_gr_15;
    unsigned char out_h_gr_10;
    unsigned char out_h_gr_11;
    unsigned char out_h_gr_12;
    unsigned char out_h_gr_13;
    unsigned char out_h_gr_14;
    unsigned char out_h_gr_15;
    unsigned char out_h_gr_8;
    unsigned char out_h_gr_9;
d411 10
a420 10
    unsigned char in_h_gr_0;
    unsigned char in_h_gr_1;
    unsigned char in_h_gr_15;
    unsigned char in_h_gr_2;
    unsigned char in_h_gr_3;
    unsigned char in_h_gr_4;
    unsigned char in_h_gr_5;
    unsigned char in_h_gr_6;
    unsigned char in_h_gr_7;
    unsigned char out_h_gr_15;
d424 10
a433 10
    unsigned char in_h_gr_15;
    unsigned char out_h_gr_0;
    unsigned char out_h_gr_1;
    unsigned char out_h_gr_15;
    unsigned char out_h_gr_2;
    unsigned char out_h_gr_3;
    unsigned char out_h_gr_4;
    unsigned char out_h_gr_5;
    unsigned char out_h_gr_6;
    unsigned char out_h_gr_7;
d771 1
a771 1
  f_CRi = (0|(EXTRACT_MSB0_UINT (word_1, 16, 12, 16) << 0)); \
d793 1
a793 1
  f_CRi = (0|(EXTRACT_MSB0_UINT (word_1, 16, 12, 16) << 0)); \
d815 1
a815 1
  f_Ric = (0|(EXTRACT_MSB0_UINT (word_1, 16, 12, 16) << 0)); \
@


1.2
log
@2000-08-28  Dave Brolley  <brolley@@redhat.com>

	* cpu.h: Regenerated.
	* decode.c: Regenerated.
@
text
@d5 1
a5 1
Copyright (C) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.
@


1.1
log
@Initial revision
@
text
@d53 6
a58 3
/* GET_H_DR macro user-written */
/* SET_H_DR macro user-written */
  /* program status */
d60 6
a65 3
/* GET_H_PS macro user-written */
/* SET_H_PS macro user-written */
  /* General Register 13 explicitely required */
d69 1
a69 1
  /* General Register 14 explicitely required */
d73 1
a73 1
  /* General Register 15 explicitely required */
d97 1
a97 1
  /* stack            bit */
d99 5
a103 2
/* GET_H_SBIT macro user-written */
/* SET_H_SBIT macro user-written */
d116 1
a116 1
  /* condition code   bits */
d118 5
a122 2
/* GET_H_CCR macro user-written */
/* SET_H_CCR macro user-written */
d125 6
a130 3
/* GET_H_SCR macro user-written */
/* SET_H_SCR macro user-written */
  /* interrupt level  mask */
d132 5
a136 2
/* GET_H_ILM macro user-written */
/* SET_H_ILM macro user-written */
d192 2
d195 240
a434 590
    struct { /* empty sformat for unspecified field list */
      int empty;
    } fmt_empty;
    struct { /* e.g. add $Rj,$Ri */
      SI * i_Ri;
      SI * i_Rj;
      unsigned char in_Ri;
      unsigned char in_Rj;
      unsigned char out_Ri;
    } fmt_add;
    struct { /* e.g. add $u4,$Ri */
      UINT f_u4;
      SI * i_Ri;
      unsigned char in_Ri;
      unsigned char out_Ri;
    } fmt_addi;
    struct { /* e.g. add2 $m4,$Ri */
      SI f_m4;
      SI * i_Ri;
      unsigned char in_Ri;
      unsigned char out_Ri;
    } fmt_add2;
    struct { /* e.g. addc $Rj,$Ri */
      SI * i_Ri;
      SI * i_Rj;
      unsigned char in_Ri;
      unsigned char in_Rj;
      unsigned char out_Ri;
    } fmt_addc;
    struct { /* e.g. addn $Rj,$Ri */
      SI * i_Ri;
      SI * i_Rj;
      unsigned char in_Ri;
      unsigned char in_Rj;
      unsigned char out_Ri;
    } fmt_addn;
    struct { /* e.g. addn $u4,$Ri */
      UINT f_u4;
      SI * i_Ri;
      unsigned char in_Ri;
      unsigned char out_Ri;
    } fmt_addni;
    struct { /* e.g. addn2 $m4,$Ri */
      SI f_m4;
      SI * i_Ri;
      unsigned char in_Ri;
      unsigned char out_Ri;
    } fmt_addn2;
    struct { /* e.g. cmp $Rj,$Ri */
      SI * i_Ri;
      SI * i_Rj;
      unsigned char in_Ri;
      unsigned char in_Rj;
    } fmt_cmp;
    struct { /* e.g. cmp $u4,$Ri */
      UINT f_u4;
      SI * i_Ri;
      unsigned char in_Ri;
    } fmt_cmpi;
    struct { /* e.g. cmp2 $m4,$Ri */
      SI f_m4;
      SI * i_Ri;
      unsigned char in_Ri;
    } fmt_cmp2;
    struct { /* e.g. and $Rj,$Ri */
      SI * i_Ri;
      SI * i_Rj;
      unsigned char in_Ri;
      unsigned char in_Rj;
      unsigned char out_Ri;
    } fmt_and;
    struct { /* e.g. and $Rj,@@$Ri */
      SI * i_Ri;
      SI * i_Rj;
      unsigned char in_Ri;
      unsigned char in_Rj;
    } fmt_andm;
    struct { /* e.g. andh $Rj,@@$Ri */
      SI * i_Ri;
      SI * i_Rj;
      unsigned char in_Ri;
      unsigned char in_Rj;
    } fmt_andh;
    struct { /* e.g. andb $Rj,@@$Ri */
      SI * i_Ri;
      SI * i_Rj;
      unsigned char in_Ri;
      unsigned char in_Rj;
    } fmt_andb;
    struct { /* e.g. bandl $u4,@@$Ri */
      UINT f_u4;
      SI * i_Ri;
      unsigned char in_Ri;
    } fmt_bandl;
    struct { /* e.g. btstl $u4,@@$Ri */
      UINT f_u4;
      SI * i_Ri;
      unsigned char in_Ri;
    } fmt_btstl;
    struct { /* e.g. mul $Rj,$Ri */
      SI * i_Ri;
      SI * i_Rj;
      unsigned char in_Ri;
      unsigned char in_Rj;
    } fmt_mul;
    struct { /* e.g. mulu $Rj,$Ri */
      SI * i_Ri;
      SI * i_Rj;
      unsigned char in_Ri;
      unsigned char in_Rj;
    } fmt_mulu;
    struct { /* e.g. mulh $Rj,$Ri */
      SI * i_Ri;
      SI * i_Rj;
      unsigned char in_Ri;
      unsigned char in_Rj;
    } fmt_mulh;
    struct { /* e.g. div0s $Ri */
      SI * i_Ri;
      unsigned char in_Ri;
    } fmt_div0s;
    struct { /* e.g. div0u $Ri */
      int empty;
    } fmt_div0u;
    struct { /* e.g. div1 $Ri */
      SI * i_Ri;
      unsigned char in_Ri;
    } fmt_div1;
    struct { /* e.g. div2 $Ri */
      SI * i_Ri;
      unsigned char in_Ri;
    } fmt_div2;
    struct { /* e.g. div3 */
      int empty;
    } fmt_div3;
    struct { /* e.g. div4s */
      int empty;
    } fmt_div4s;
    struct { /* e.g. lsl $Rj,$Ri */
      SI * i_Ri;
      SI * i_Rj;
      unsigned char in_Ri;
      unsigned char in_Rj;
      unsigned char out_Ri;
    } fmt_lsl;
    struct { /* e.g. lsl $u4,$Ri */
      UINT f_u4;
      SI * i_Ri;
      unsigned char in_Ri;
      unsigned char out_Ri;
    } fmt_lsli;
    struct { /* e.g. ldi:8 $i8,$Ri */
      UINT f_i8;
      SI * i_Ri;
      unsigned char out_Ri;
    } fmt_ldi8;
    struct { /* e.g. ldi:20 $i20,$Ri */
      UINT f_i20;
      SI * i_Ri;
      unsigned char out_Ri;
    } fmt_ldi20;
    struct { /* e.g. ldi:32 $i32,$Ri */
      UINT f_i32;
      SI * i_Ri;
      unsigned char out_Ri;
    } fmt_ldi32;
    struct { /* e.g. ld @@$Rj,$Ri */
      SI * i_Rj;
      SI * i_Ri;
      unsigned char in_Rj;
      unsigned char out_Ri;
    } fmt_ld;
    struct { /* e.g. lduh @@$Rj,$Ri */
      SI * i_Rj;
      SI * i_Ri;
      unsigned char in_Rj;
      unsigned char out_Ri;
    } fmt_lduh;
    struct { /* e.g. ldub @@$Rj,$Ri */
      SI * i_Rj;
      SI * i_Ri;
      unsigned char in_Rj;
      unsigned char out_Ri;
    } fmt_ldub;
    struct { /* e.g. ld @@($R13,$Rj),$Ri */
      SI * i_Rj;
      SI * i_Ri;
      unsigned char in_Rj;
      unsigned char in_h_gr_13;
      unsigned char out_Ri;
    } fmt_ldr13;
    struct { /* e.g. lduh @@($R13,$Rj),$Ri */
      SI * i_Rj;
      SI * i_Ri;
      unsigned char in_Rj;
      unsigned char in_h_gr_13;
      unsigned char out_Ri;
    } fmt_ldr13uh;
    struct { /* e.g. ldub @@($R13,$Rj),$Ri */
      SI * i_Rj;
      SI * i_Ri;
      unsigned char in_Rj;
      unsigned char in_h_gr_13;
      unsigned char out_Ri;
    } fmt_ldr13ub;
    struct { /* e.g. ld @@($R14,$disp10),$Ri */
      SI f_disp10;
      SI * i_Ri;
      unsigned char in_h_gr_14;
      unsigned char out_Ri;
    } fmt_ldr14;
    struct { /* e.g. lduh @@($R14,$disp9),$Ri */
      SI f_disp9;
      SI * i_Ri;
      unsigned char in_h_gr_14;
      unsigned char out_Ri;
    } fmt_ldr14uh;
    struct { /* e.g. ldub @@($R14,$disp8),$Ri */
      INT f_disp8;
      SI * i_Ri;
      unsigned char in_h_gr_14;
      unsigned char out_Ri;
    } fmt_ldr14ub;
    struct { /* e.g. ld @@($R15,$udisp6),$Ri */
      USI f_udisp6;
      SI * i_Ri;
      unsigned char in_h_gr_15;
      unsigned char out_Ri;
    } fmt_ldr15;
    struct { /* e.g. ld @@$R15+,$Ri */
      UINT f_Ri;
      SI * i_Ri;
      unsigned char in_h_gr_15;
      unsigned char out_Ri;
      unsigned char out_h_gr_15;
    } fmt_ldr15gr;
    struct { /* e.g. ld @@$R15+,$Rs2 */
      UINT f_Rs2;
      unsigned char in_h_gr_15;
      unsigned char out_h_gr_15;
    } fmt_ldr15dr;
    struct { /* e.g. ld @@$R15+,$ps */
      int empty;
      unsigned char in_h_gr_15;
      unsigned char out_h_gr_15;
    } fmt_ldr15ps;
    struct { /* e.g. st $Ri,@@$Rj */
      SI * i_Ri;
      SI * i_Rj;
      unsigned char in_Ri;
      unsigned char in_Rj;
    } fmt_st;
    struct { /* e.g. sth $Ri,@@$Rj */
      SI * i_Ri;
      SI * i_Rj;
      unsigned char in_Ri;
      unsigned char in_Rj;
    } fmt_sth;
    struct { /* e.g. stb $Ri,@@$Rj */
      SI * i_Ri;
      SI * i_Rj;
      unsigned char in_Ri;
      unsigned char in_Rj;
    } fmt_stb;
    struct { /* e.g. st $Ri,@@($R13,$Rj) */
      SI * i_Ri;
      SI * i_Rj;
      unsigned char in_Ri;
      unsigned char in_Rj;
      unsigned char in_h_gr_13;
    } fmt_str13;
    struct { /* e.g. sth $Ri,@@($R13,$Rj) */
      SI * i_Ri;
      SI * i_Rj;
      unsigned char in_Ri;
      unsigned char in_Rj;
      unsigned char in_h_gr_13;
    } fmt_str13h;
    struct { /* e.g. stb $Ri,@@($R13,$Rj) */
      SI * i_Ri;
      SI * i_Rj;
      unsigned char in_Ri;
      unsigned char in_Rj;
      unsigned char in_h_gr_13;
    } fmt_str13b;
    struct { /* e.g. st $Ri,@@($R14,$disp10) */
      SI f_disp10;
      SI * i_Ri;
      unsigned char in_Ri;
      unsigned char in_h_gr_14;
    } fmt_str14;
    struct { /* e.g. sth $Ri,@@($R14,$disp9) */
      SI f_disp9;
      SI * i_Ri;
      unsigned char in_Ri;
      unsigned char in_h_gr_14;
    } fmt_str14h;
    struct { /* e.g. stb $Ri,@@($R14,$disp8) */
      INT f_disp8;
      SI * i_Ri;
      unsigned char in_Ri;
      unsigned char in_h_gr_14;
    } fmt_str14b;
    struct { /* e.g. st $Ri,@@($R15,$udisp6) */
      USI f_udisp6;
      SI * i_Ri;
      unsigned char in_Ri;
      unsigned char in_h_gr_15;
    } fmt_str15;
    struct { /* e.g. st $Ri,@@-$R15 */
      SI * i_Ri;
      unsigned char in_Ri;
      unsigned char in_h_gr_15;
      unsigned char out_h_gr_15;
    } fmt_str15gr;
    struct { /* e.g. st $Rs2,@@-$R15 */
      UINT f_Rs2;
      unsigned char in_h_gr_15;
      unsigned char out_h_gr_15;
    } fmt_str15dr;
    struct { /* e.g. st $ps,@@-$R15 */
      int empty;
      unsigned char in_h_gr_15;
      unsigned char out_h_gr_15;
    } fmt_str15ps;
    struct { /* e.g. mov $Rj,$Ri */
      SI * i_Rj;
      SI * i_Ri;
      unsigned char in_Rj;
      unsigned char out_Ri;
    } fmt_mov;
    struct { /* e.g. mov $Rs1,$Ri */
      UINT f_Rs1;
      SI * i_Ri;
      unsigned char out_Ri;
    } fmt_movdr;
    struct { /* e.g. mov $ps,$Ri */
      SI * i_Ri;
      unsigned char out_Ri;
    } fmt_movps;
    struct { /* e.g. mov $Ri,$Rs1 */
      UINT f_Rs1;
      SI * i_Ri;
      unsigned char in_Ri;
    } fmt_mov2dr;
    struct { /* e.g. mov $Ri,$ps */
      SI * i_Ri;
      unsigned char in_Ri;
    } fmt_mov2ps;
    struct { /* e.g. bno:d $label9 */
      int empty;
    } fmt_bnod;
    struct { /* e.g. dmov $R13,@@$dir10 */
      USI f_dir10;
      unsigned char in_h_gr_13;
    } fmt_dmovr13;
    struct { /* e.g. dmovh $R13,@@$dir9 */
      USI f_dir9;
      unsigned char in_h_gr_13;
    } fmt_dmovr13h;
    struct { /* e.g. dmovb $R13,@@$dir8 */
      UINT f_dir8;
      unsigned char in_h_gr_13;
    } fmt_dmovr13b;
    struct { /* e.g. dmov @@$R13+,@@$dir10 */
      USI f_dir10;
      unsigned char in_h_gr_13;
      unsigned char out_h_gr_13;
    } fmt_dmovr13pi;
    struct { /* e.g. dmovh @@$R13+,@@$dir9 */
      USI f_dir9;
      unsigned char in_h_gr_13;
      unsigned char out_h_gr_13;
    } fmt_dmovr13pih;
    struct { /* e.g. dmovb @@$R13+,@@$dir8 */
      UINT f_dir8;
      unsigned char in_h_gr_13;
      unsigned char out_h_gr_13;
    } fmt_dmovr13pib;
    struct { /* e.g. dmov @@$R15+,@@$dir10 */
      USI f_dir10;
      unsigned char in_h_gr_15;
      unsigned char out_h_gr_15;
    } fmt_dmovr15pi;
    struct { /* e.g. dmov @@$dir10,$R13 */
      USI f_dir10;
      unsigned char out_h_gr_13;
    } fmt_dmov2r13;
    struct { /* e.g. dmovh @@$dir9,$R13 */
      USI f_dir9;
      unsigned char out_h_gr_13;
    } fmt_dmov2r13h;
    struct { /* e.g. dmovb @@$dir8,$R13 */
      UINT f_dir8;
      unsigned char out_h_gr_13;
    } fmt_dmov2r13b;
    struct { /* e.g. dmov @@$dir10,@@$R13+ */
      USI f_dir10;
      unsigned char in_h_gr_13;
      unsigned char out_h_gr_13;
    } fmt_dmov2r13pi;
    struct { /* e.g. dmovh @@$dir9,@@$R13+ */
      USI f_dir9;
      unsigned char in_h_gr_13;
      unsigned char out_h_gr_13;
    } fmt_dmov2r13pih;
    struct { /* e.g. dmovb @@$dir8,@@$R13+ */
      UINT f_dir8;
      unsigned char in_h_gr_13;
      unsigned char out_h_gr_13;
    } fmt_dmov2r13pib;
    struct { /* e.g. dmov @@$dir10,@@-$R15 */
      USI f_dir10;
      unsigned char in_h_gr_15;
      unsigned char out_h_gr_15;
    } fmt_dmov2r15pd;
    struct { /* e.g. ldres @@$Ri+,$u4 */
      SI * i_Ri;
      unsigned char in_Ri;
      unsigned char out_Ri;
    } fmt_ldres;
    struct { /* e.g. copop $u4c,$ccc,$CRj,$CRi */
      int empty;
    } fmt_copop;
    struct { /* e.g. copld $u4c,$ccc,$Rjc,$CRi */
      int empty;
    } fmt_copld;
    struct { /* e.g. copst $u4c,$ccc,$CRj,$Ric */
      int empty;
    } fmt_copst;
    struct { /* e.g. nop */
      int empty;
    } fmt_nop;
    struct { /* e.g. andccr $u8 */
      UINT f_u8;
    } fmt_andccr;
    struct { /* e.g. stilm $u8 */
      UINT f_u8;
    } fmt_stilm;
    struct { /* e.g. addsp $s10 */
      SI f_s10;
      unsigned char in_h_gr_15;
      unsigned char out_h_gr_15;
    } fmt_addsp;
    struct { /* e.g. extsb $Ri */
      SI * i_Ri;
      unsigned char in_Ri;
      unsigned char out_Ri;
    } fmt_extsb;
    struct { /* e.g. extub $Ri */
      SI * i_Ri;
      unsigned char in_Ri;
      unsigned char out_Ri;
    } fmt_extub;
    struct { /* e.g. extsh $Ri */
      SI * i_Ri;
      unsigned char in_Ri;
      unsigned char out_Ri;
    } fmt_extsh;
    struct { /* e.g. extuh $Ri */
      SI * i_Ri;
      unsigned char in_Ri;
      unsigned char out_Ri;
    } fmt_extuh;
    struct { /* e.g. ldm0 ($reglist_low_ld) */
      UINT f_reglist_low_ld;
      unsigned char in_h_gr_15;
      unsigned char out_h_gr_0;
      unsigned char out_h_gr_1;
      unsigned char out_h_gr_15;
      unsigned char out_h_gr_2;
      unsigned char out_h_gr_3;
      unsigned char out_h_gr_4;
      unsigned char out_h_gr_5;
      unsigned char out_h_gr_6;
      unsigned char out_h_gr_7;
    } fmt_ldm0;
    struct { /* e.g. ldm1 ($reglist_hi_ld) */
      UINT f_reglist_hi_ld;
      unsigned char in_h_gr_15;
      unsigned char out_h_gr_10;
      unsigned char out_h_gr_11;
      unsigned char out_h_gr_12;
      unsigned char out_h_gr_13;
      unsigned char out_h_gr_14;
      unsigned char out_h_gr_15;
      unsigned char out_h_gr_8;
      unsigned char out_h_gr_9;
    } fmt_ldm1;
    struct { /* e.g. stm0 ($reglist_low_st) */
      UINT f_reglist_low_st;
      unsigned char in_h_gr_0;
      unsigned char in_h_gr_1;
      unsigned char in_h_gr_15;
      unsigned char in_h_gr_2;
      unsigned char in_h_gr_3;
      unsigned char in_h_gr_4;
      unsigned char in_h_gr_5;
      unsigned char in_h_gr_6;
      unsigned char in_h_gr_7;
      unsigned char out_h_gr_15;
    } fmt_stm0;
    struct { /* e.g. stm1 ($reglist_hi_st) */
      UINT f_reglist_hi_st;
      unsigned char in_h_gr_10;
      unsigned char in_h_gr_11;
      unsigned char in_h_gr_12;
      unsigned char in_h_gr_13;
      unsigned char in_h_gr_14;
      unsigned char in_h_gr_15;
      unsigned char in_h_gr_8;
      unsigned char in_h_gr_9;
      unsigned char out_h_gr_15;
    } fmt_stm1;
    struct { /* e.g. enter $u10 */
      USI f_u10;
      unsigned char in_h_gr_14;
      unsigned char in_h_gr_15;
      unsigned char out_h_gr_14;
      unsigned char out_h_gr_15;
    } fmt_enter;
    struct { /* e.g. leave */
      int empty;
      unsigned char in_h_gr_14;
      unsigned char in_h_gr_15;
      unsigned char out_h_gr_14;
      unsigned char out_h_gr_15;
    } fmt_leave;
    struct { /* e.g. xchb @@$Rj,$Ri */
      SI * i_Ri;
      SI * i_Rj;
      unsigned char in_Ri;
      unsigned char in_Rj;
      unsigned char out_Ri;
    } fmt_xchb;
  /* cti insns, kept separately so addr_cache is in fixed place */
  struct {
    union {
    struct { /* e.g. jmp @@$Ri */
      SI * i_Ri;
      unsigned char in_Ri;
    } fmt_jmp;
    struct { /* e.g. call @@$Ri */
      SI * i_Ri;
      unsigned char in_Ri;
    } fmt_callr;
    struct { /* e.g. call $label12 */
      IADDR i_label12;
    } fmt_call;
    struct { /* e.g. ret */
      int empty;
    } fmt_ret;
    struct { /* e.g. int $u8 */
      UINT f_u8;
    } fmt_int;
    struct { /* e.g. inte */
      int empty;
    } fmt_inte;
    struct { /* e.g. reti */
      int empty;
    } fmt_reti;
    struct { /* e.g. bra:d $label9 */
      IADDR i_label9;
    } fmt_brad;
    struct { /* e.g. beq:d $label9 */
      IADDR i_label9;
    } fmt_beqd;
    struct { /* e.g. bc:d $label9 */
      IADDR i_label9;
    } fmt_bcd;
    struct { /* e.g. bn:d $label9 */
      IADDR i_label9;
    } fmt_bnd;
    struct { /* e.g. bv:d $label9 */
      IADDR i_label9;
    } fmt_bvd;
    struct { /* e.g. blt:d $label9 */
      IADDR i_label9;
    } fmt_bltd;
    struct { /* e.g. ble:d $label9 */
      IADDR i_label9;
    } fmt_bled;
    struct { /* e.g. bls:d $label9 */
      IADDR i_label9;
    } fmt_blsd;
    } fields;
#if WITH_SCACHE_PBB
    SEM_PC addr_cache;
#endif
  } cti;
d456 1
d468 3
a490 1
  /* Instruction fields.  */ \
a495 1
  /* Instruction fields.  */ \
d503 4
a506 4
  f_op1 = EXTRACT_UINT (insn, 16, 0, 4); \
  f_op2 = EXTRACT_UINT (insn, 16, 4, 4); \
  f_Rj = EXTRACT_UINT (insn, 16, 8, 4); \
  f_Ri = EXTRACT_UINT (insn, 16, 12, 4); \
a508 1
  /* Instruction fields.  */ \
d516 4
a519 4
  f_op1 = EXTRACT_UINT (insn, 16, 0, 4); \
  f_op2 = EXTRACT_UINT (insn, 16, 4, 4); \
  f_u4 = EXTRACT_UINT (insn, 16, 8, 4); \
  f_Ri = EXTRACT_UINT (insn, 16, 12, 4); \
a521 1
  /* Instruction fields.  */ \
d529 4
a532 4
  f_op1 = EXTRACT_UINT (insn, 16, 0, 4); \
  f_op2 = EXTRACT_UINT (insn, 16, 4, 4); \
  f_m4 = ((EXTRACT_UINT (insn, 16, 8, 4)) | (((-1) << (4)))); \
  f_Ri = EXTRACT_UINT (insn, 16, 12, 4); \
a534 1
  /* Instruction fields.  */ \
d542 4
a545 4
  f_op1 = EXTRACT_UINT (insn, 16, 0, 4); \
  f_op2 = EXTRACT_UINT (insn, 16, 4, 4); \
  f_op3 = EXTRACT_UINT (insn, 16, 8, 4); \
  f_Ri = EXTRACT_UINT (insn, 16, 12, 4); \
a547 1
  /* Instruction fields.  */ \
d555 4
a558 4
  f_op1 = EXTRACT_UINT (insn, 16, 0, 4); \
  f_op2 = EXTRACT_UINT (insn, 16, 4, 4); \
  f_op3 = EXTRACT_UINT (insn, 16, 8, 4); \
  f_op4 = EXTRACT_UINT (insn, 16, 12, 4); \
a560 1
  /* Instruction fields.  */ \
d567 3
a569 3
  f_op1 = EXTRACT_UINT (insn, 16, 0, 4); \
  f_i8 = EXTRACT_UINT (insn, 16, 4, 8); \
  f_Ri = EXTRACT_UINT (insn, 16, 12, 4); \
a571 1
  /* Instruction fields.  */ \
a572 1
  UINT f_i20; \
d575 1
d584 4
a587 4
  f_op1 = EXTRACT_UINT (insn, 16, 0, 4); \
  f_i20_4 = EXTRACT_UINT (insn, 16, 8, 4); \
  f_i20_16 = (0|(EXTRACT_UINT (word_1, 16, 0, 16) << 0)); \
do {\
d589 3
a591 3
} while (0);\
  f_op2 = EXTRACT_UINT (insn, 16, 4, 4); \
  f_Ri = EXTRACT_UINT (insn, 16, 12, 4); \
a593 1
  /* Instruction fields.  */ \
d601 1
d605 7
a611 6
  word_1 = GETIMEMUSI (current_cpu, pc + 2); \
  f_op1 = EXTRACT_UINT (insn, 16, 0, 4); \
  f_i32 = (0|(EXTRACT_UINT (word_1, 32, 0, 32) << 0)); \
  f_op2 = EXTRACT_UINT (insn, 16, 4, 4); \
  f_op3 = EXTRACT_UINT (insn, 16, 8, 4); \
  f_Ri = EXTRACT_UINT (insn, 16, 12, 4); \
a613 1
  /* Instruction fields.  */ \
d620 3
a622 3
  f_op1 = EXTRACT_UINT (insn, 16, 0, 4); \
  f_disp10 = ((EXTRACT_INT (insn, 16, 4, 8)) << (2)); \
  f_Ri = EXTRACT_UINT (insn, 16, 12, 4); \
a624 1
  /* Instruction fields.  */ \
d631 3
a633 3
  f_op1 = EXTRACT_UINT (insn, 16, 0, 4); \
  f_disp9 = ((EXTRACT_INT (insn, 16, 4, 8)) << (1)); \
  f_Ri = EXTRACT_UINT (insn, 16, 12, 4); \
a635 1
  /* Instruction fields.  */ \
d642 3
a644 3
  f_op1 = EXTRACT_UINT (insn, 16, 0, 4); \
  f_disp8 = EXTRACT_INT (insn, 16, 4, 8); \
  f_Ri = EXTRACT_UINT (insn, 16, 12, 4); \
a646 1
  /* Instruction fields.  */ \
d654 4
a657 4
  f_op1 = EXTRACT_UINT (insn, 16, 0, 4); \
  f_op2 = EXTRACT_UINT (insn, 16, 4, 4); \
  f_udisp6 = ((EXTRACT_UINT (insn, 16, 8, 4)) << (2)); \
  f_Ri = EXTRACT_UINT (insn, 16, 12, 4); \
a659 1
  /* Instruction fields.  */ \
d667 4
a670 4
  f_op1 = EXTRACT_UINT (insn, 16, 0, 4); \
  f_op2 = EXTRACT_UINT (insn, 16, 4, 4); \
  f_op3 = EXTRACT_UINT (insn, 16, 8, 4); \
  f_Rs2 = EXTRACT_UINT (insn, 16, 12, 4); \
a672 1
  /* Instruction fields.  */ \
d680 4
a683 4
  f_op1 = EXTRACT_UINT (insn, 16, 0, 4); \
  f_op2 = EXTRACT_UINT (insn, 16, 4, 4); \
  f_Rs1 = EXTRACT_UINT (insn, 16, 8, 4); \
  f_Ri = EXTRACT_UINT (insn, 16, 12, 4); \
a685 1
  /* Instruction fields.  */ \
d692 3
a694 3
  f_op1 = EXTRACT_UINT (insn, 16, 0, 4); \
  f_op5 = EXTRACT_UINT (insn, 16, 4, 1); \
  f_rel12 = ((((EXTRACT_INT (insn, 16, 5, 11)) << (1))) + (((pc) + (2)))); \
a696 1
  /* Instruction fields.  */ \
d703 3
a705 3
  f_op1 = EXTRACT_UINT (insn, 16, 0, 4); \
  f_op2 = EXTRACT_UINT (insn, 16, 4, 4); \
  f_u8 = EXTRACT_UINT (insn, 16, 8, 8); \
a707 1
  /* Instruction fields.  */ \
d714 3
a716 3
  f_op1 = EXTRACT_UINT (insn, 16, 0, 4); \
  f_cc = EXTRACT_UINT (insn, 16, 4, 4); \
  f_rel9 = ((((EXTRACT_INT (insn, 16, 8, 8)) << (1))) + (((pc) + (2)))); \
a718 1
  /* Instruction fields.  */ \
d725 3
a727 3
  f_op1 = EXTRACT_UINT (insn, 16, 0, 4); \
  f_op2 = EXTRACT_UINT (insn, 16, 4, 4); \
  f_dir10 = ((EXTRACT_UINT (insn, 16, 8, 8)) << (2)); \
a729 1
  /* Instruction fields.  */ \
d736 3
a738 3
  f_op1 = EXTRACT_UINT (insn, 16, 0, 4); \
  f_op2 = EXTRACT_UINT (insn, 16, 4, 4); \
  f_dir9 = ((EXTRACT_UINT (insn, 16, 8, 8)) << (1)); \
a740 1
  /* Instruction fields.  */ \
d747 3
a749 3
  f_op1 = EXTRACT_UINT (insn, 16, 0, 4); \
  f_op2 = EXTRACT_UINT (insn, 16, 4, 4); \
  f_dir8 = EXTRACT_UINT (insn, 16, 8, 8); \
a751 1
  /* Instruction fields.  */ \
d765 7
a771 7
  f_op1 = EXTRACT_UINT (insn, 16, 0, 4); \
  f_ccc = (0|(EXTRACT_UINT (word_1, 16, 0, 8) << 0)); \
  f_op2 = EXTRACT_UINT (insn, 16, 4, 4); \
  f_op3 = EXTRACT_UINT (insn, 16, 8, 4); \
  f_CRj = (0|(EXTRACT_UINT (word_1, 16, 8, 4) << 0)); \
  f_u4c = EXTRACT_UINT (insn, 16, 12, 4); \
  f_CRi = (0|(EXTRACT_UINT (word_1, 16, 12, 16) << 0)); \
a773 1
  /* Instruction fields.  */ \
d787 7
a793 7
  f_op1 = EXTRACT_UINT (insn, 16, 0, 4); \
  f_ccc = (0|(EXTRACT_UINT (word_1, 16, 0, 8) << 0)); \
  f_op2 = EXTRACT_UINT (insn, 16, 4, 4); \
  f_op3 = EXTRACT_UINT (insn, 16, 8, 4); \
  f_Rjc = (0|(EXTRACT_UINT (word_1, 16, 8, 4) << 0)); \
  f_u4c = EXTRACT_UINT (insn, 16, 12, 4); \
  f_CRi = (0|(EXTRACT_UINT (word_1, 16, 12, 16) << 0)); \
a795 1
  /* Instruction fields.  */ \
d809 7
a815 7
  f_op1 = EXTRACT_UINT (insn, 16, 0, 4); \
  f_ccc = (0|(EXTRACT_UINT (word_1, 16, 0, 8) << 0)); \
  f_op2 = EXTRACT_UINT (insn, 16, 4, 4); \
  f_op3 = EXTRACT_UINT (insn, 16, 8, 4); \
  f_CRj = (0|(EXTRACT_UINT (word_1, 16, 8, 4) << 0)); \
  f_u4c = EXTRACT_UINT (insn, 16, 12, 4); \
  f_Ric = (0|(EXTRACT_UINT (word_1, 16, 12, 16) << 0)); \
a817 1
  /* Instruction fields.  */ \
d824 3
a826 3
  f_op1 = EXTRACT_UINT (insn, 16, 0, 4); \
  f_op2 = EXTRACT_UINT (insn, 16, 4, 4); \
  f_s10 = ((EXTRACT_INT (insn, 16, 8, 8)) << (2)); \
a828 1
  /* Instruction fields.  */ \
d835 3
a837 3
  f_op1 = EXTRACT_UINT (insn, 16, 0, 4); \
  f_op2 = EXTRACT_UINT (insn, 16, 4, 4); \
  f_reglist_low_ld = EXTRACT_UINT (insn, 16, 8, 8); \
a839 1
  /* Instruction fields.  */ \
d846 3
a848 3
  f_op1 = EXTRACT_UINT (insn, 16, 0, 4); \
  f_op2 = EXTRACT_UINT (insn, 16, 4, 4); \
  f_reglist_hi_ld = EXTRACT_UINT (insn, 16, 8, 8); \
a850 1
  /* Instruction fields.  */ \
d857 3
a859 3
  f_op1 = EXTRACT_UINT (insn, 16, 0, 4); \
  f_op2 = EXTRACT_UINT (insn, 16, 4, 4); \
  f_reglist_low_st = EXTRACT_UINT (insn, 16, 8, 8); \
a861 1
  /* Instruction fields.  */ \
d868 3
a870 3
  f_op1 = EXTRACT_UINT (insn, 16, 0, 4); \
  f_op2 = EXTRACT_UINT (insn, 16, 4, 4); \
  f_reglist_hi_st = EXTRACT_UINT (insn, 16, 8, 8); \
a872 1
  /* Instruction fields.  */ \
d879 3
a881 3
  f_op1 = EXTRACT_UINT (insn, 16, 0, 4); \
  f_op2 = EXTRACT_UINT (insn, 16, 4, 4); \
  f_u10 = ((EXTRACT_UINT (insn, 16, 8, 8)) << (2)); \
@


1.1.1.1
log
@Initial creation of sourceware repository
@
text
@@


1.1.1.2
log
@import gdb-19990422 snapshot
@
text
@d53 3
a55 6
#define GET_H_DR(index) fr30bf_h_dr_get_handler (current_cpu, index)
#define SET_H_DR(index, x) \
do { \
fr30bf_h_dr_set_handler (current_cpu, (index), (x));\
} while (0)
  /* processor status */
d57 3
a59 6
#define GET_H_PS() fr30bf_h_ps_get_handler (current_cpu)
#define SET_H_PS(x) \
do { \
fr30bf_h_ps_set_handler (current_cpu, (x));\
} while (0)
  /* General Register 13 explicitly required */
d63 1
a63 1
  /* General Register 14 explicitly required */
d67 1
a67 1
  /* General Register 15 explicitly required */
d91 1
a91 1
  /* stack bit */
d93 2
a94 5
#define GET_H_SBIT() fr30bf_h_sbit_get_handler (current_cpu)
#define SET_H_SBIT(x) \
do { \
fr30bf_h_sbit_set_handler (current_cpu, (x));\
} while (0)
d107 1
a107 1
  /* condition code bits */
d109 2
a110 5
#define GET_H_CCR() fr30bf_h_ccr_get_handler (current_cpu)
#define SET_H_CCR(x) \
do { \
fr30bf_h_ccr_set_handler (current_cpu, (x));\
} while (0)
d113 3
a115 6
#define GET_H_SCR() fr30bf_h_scr_get_handler (current_cpu)
#define SET_H_SCR(x) \
do { \
fr30bf_h_scr_set_handler (current_cpu, (x));\
} while (0)
  /* interrupt level mask */
d117 2
a118 5
#define GET_H_ILM() fr30bf_h_ilm_get_handler (current_cpu)
#define SET_H_ILM(x) \
do { \
fr30bf_h_ilm_set_handler (current_cpu, (x));\
} while (0)
d921 1
a921 1
{\
d923 1
a923 1
}\
a935 1
  UINT word_2; \
d939 1
a939 2
  word_1 = GETIMEMUHI (current_cpu, pc + 2); \
  word_2 = GETIMEMUHI (current_cpu, pc + 4); \
d941 1
a941 1
  f_i32 = (0|(EXTRACT_UINT (word_2, 16, 0, 16) << 0)|(EXTRACT_UINT (word_1, 16, 0, 16) << 16)); \
@


1.1.1.3
log
@import gdb-1999-07-07 pre reformat
@
text
@d365 12
d384 14
d445 12
d464 14
d617 9
d849 4
a852 4
  f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
  f_op2 = EXTRACT_MSB0_UINT (insn, 16, 4, 4); \
  f_Rj = EXTRACT_MSB0_UINT (insn, 16, 8, 4); \
  f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4); \
d863 4
a866 4
  f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
  f_op2 = EXTRACT_MSB0_UINT (insn, 16, 4, 4); \
  f_u4 = EXTRACT_MSB0_UINT (insn, 16, 8, 4); \
  f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4); \
d877 4
a880 4
  f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
  f_op2 = EXTRACT_MSB0_UINT (insn, 16, 4, 4); \
  f_m4 = ((EXTRACT_MSB0_UINT (insn, 16, 8, 4)) | (((-1) << (4)))); \
  f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4); \
d891 4
a894 4
  f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
  f_op2 = EXTRACT_MSB0_UINT (insn, 16, 4, 4); \
  f_op3 = EXTRACT_MSB0_UINT (insn, 16, 8, 4); \
  f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4); \
d905 4
a908 4
  f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
  f_op2 = EXTRACT_MSB0_UINT (insn, 16, 4, 4); \
  f_op3 = EXTRACT_MSB0_UINT (insn, 16, 8, 4); \
  f_op4 = EXTRACT_MSB0_UINT (insn, 16, 12, 4); \
d918 3
a920 3
  f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
  f_i8 = EXTRACT_MSB0_UINT (insn, 16, 4, 8); \
  f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4); \
d925 1
a927 1
  UINT f_i20; \
d936 3
a938 3
  f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
  f_i20_4 = EXTRACT_MSB0_UINT (insn, 16, 8, 4); \
  f_i20_16 = (0|(EXTRACT_MSB0_UINT (word_1, 16, 0, 16) << 0)); \
d942 2
a943 2
  f_op2 = EXTRACT_MSB0_UINT (insn, 16, 4, 4); \
  f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4); \
d960 5
a964 5
  f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
  f_i32 = (0|(EXTRACT_MSB0_UINT (word_2, 16, 0, 16) << 0)|(EXTRACT_MSB0_UINT (word_1, 16, 0, 16) << 16)); \
  f_op2 = EXTRACT_MSB0_UINT (insn, 16, 4, 4); \
  f_op3 = EXTRACT_MSB0_UINT (insn, 16, 8, 4); \
  f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4); \
d974 3
a976 3
  f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
  f_disp10 = ((EXTRACT_MSB0_INT (insn, 16, 4, 8)) << (2)); \
  f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4); \
d986 3
a988 3
  f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
  f_disp9 = ((EXTRACT_MSB0_INT (insn, 16, 4, 8)) << (1)); \
  f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4); \
d998 3
a1000 3
  f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
  f_disp8 = EXTRACT_MSB0_INT (insn, 16, 4, 8); \
  f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4); \
d1011 4
a1014 4
  f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
  f_op2 = EXTRACT_MSB0_UINT (insn, 16, 4, 4); \
  f_udisp6 = ((EXTRACT_MSB0_UINT (insn, 16, 8, 4)) << (2)); \
  f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4); \
d1025 4
a1028 4
  f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
  f_op2 = EXTRACT_MSB0_UINT (insn, 16, 4, 4); \
  f_op3 = EXTRACT_MSB0_UINT (insn, 16, 8, 4); \
  f_Rs2 = EXTRACT_MSB0_UINT (insn, 16, 12, 4); \
d1039 4
a1042 4
  f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
  f_op2 = EXTRACT_MSB0_UINT (insn, 16, 4, 4); \
  f_Rs1 = EXTRACT_MSB0_UINT (insn, 16, 8, 4); \
  f_Ri = EXTRACT_MSB0_UINT (insn, 16, 12, 4); \
d1052 3
a1054 3
  f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
  f_op5 = EXTRACT_MSB0_UINT (insn, 16, 4, 1); \
  f_rel12 = ((((EXTRACT_MSB0_INT (insn, 16, 5, 11)) << (1))) + (((pc) + (2)))); \
d1064 3
a1066 3
  f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
  f_op2 = EXTRACT_MSB0_UINT (insn, 16, 4, 4); \
  f_u8 = EXTRACT_MSB0_UINT (insn, 16, 8, 8); \
d1076 3
a1078 3
  f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
  f_cc = EXTRACT_MSB0_UINT (insn, 16, 4, 4); \
  f_rel9 = ((((EXTRACT_MSB0_INT (insn, 16, 8, 8)) << (1))) + (((pc) + (2)))); \
d1088 3
a1090 3
  f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
  f_op2 = EXTRACT_MSB0_UINT (insn, 16, 4, 4); \
  f_dir10 = ((EXTRACT_MSB0_UINT (insn, 16, 8, 8)) << (2)); \
d1100 3
a1102 3
  f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
  f_op2 = EXTRACT_MSB0_UINT (insn, 16, 4, 4); \
  f_dir9 = ((EXTRACT_MSB0_UINT (insn, 16, 8, 8)) << (1)); \
d1112 3
a1114 3
  f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
  f_op2 = EXTRACT_MSB0_UINT (insn, 16, 4, 4); \
  f_dir8 = EXTRACT_MSB0_UINT (insn, 16, 8, 8); \
d1131 7
a1137 7
  f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
  f_ccc = (0|(EXTRACT_MSB0_UINT (word_1, 16, 0, 8) << 0)); \
  f_op2 = EXTRACT_MSB0_UINT (insn, 16, 4, 4); \
  f_op3 = EXTRACT_MSB0_UINT (insn, 16, 8, 4); \
  f_CRj = (0|(EXTRACT_MSB0_UINT (word_1, 16, 8, 4) << 0)); \
  f_u4c = EXTRACT_MSB0_UINT (insn, 16, 12, 4); \
  f_CRi = (0|(EXTRACT_MSB0_UINT (word_1, 16, 12, 16) << 0)); \
d1154 7
a1160 7
  f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
  f_ccc = (0|(EXTRACT_MSB0_UINT (word_1, 16, 0, 8) << 0)); \
  f_op2 = EXTRACT_MSB0_UINT (insn, 16, 4, 4); \
  f_op3 = EXTRACT_MSB0_UINT (insn, 16, 8, 4); \
  f_Rjc = (0|(EXTRACT_MSB0_UINT (word_1, 16, 8, 4) << 0)); \
  f_u4c = EXTRACT_MSB0_UINT (insn, 16, 12, 4); \
  f_CRi = (0|(EXTRACT_MSB0_UINT (word_1, 16, 12, 16) << 0)); \
d1177 7
a1183 7
  f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
  f_ccc = (0|(EXTRACT_MSB0_UINT (word_1, 16, 0, 8) << 0)); \
  f_op2 = EXTRACT_MSB0_UINT (insn, 16, 4, 4); \
  f_op3 = EXTRACT_MSB0_UINT (insn, 16, 8, 4); \
  f_CRj = (0|(EXTRACT_MSB0_UINT (word_1, 16, 8, 4) << 0)); \
  f_u4c = EXTRACT_MSB0_UINT (insn, 16, 12, 4); \
  f_Ric = (0|(EXTRACT_MSB0_UINT (word_1, 16, 12, 16) << 0)); \
d1193 3
a1195 3
  f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
  f_op2 = EXTRACT_MSB0_UINT (insn, 16, 4, 4); \
  f_s10 = ((EXTRACT_MSB0_INT (insn, 16, 8, 8)) << (2)); \
d1205 3
a1207 3
  f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
  f_op2 = EXTRACT_MSB0_UINT (insn, 16, 4, 4); \
  f_reglist_low_ld = EXTRACT_MSB0_UINT (insn, 16, 8, 8); \
d1217 3
a1219 3
  f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
  f_op2 = EXTRACT_MSB0_UINT (insn, 16, 4, 4); \
  f_reglist_hi_ld = EXTRACT_MSB0_UINT (insn, 16, 8, 8); \
d1229 3
a1231 3
  f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
  f_op2 = EXTRACT_MSB0_UINT (insn, 16, 4, 4); \
  f_reglist_low_st = EXTRACT_MSB0_UINT (insn, 16, 8, 8); \
d1241 3
a1243 3
  f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
  f_op2 = EXTRACT_MSB0_UINT (insn, 16, 4, 4); \
  f_reglist_hi_st = EXTRACT_MSB0_UINT (insn, 16, 8, 8); \
d1253 3
a1255 3
  f_op1 = EXTRACT_MSB0_UINT (insn, 16, 0, 4); \
  f_op2 = EXTRACT_MSB0_UINT (insn, 16, 4, 4); \
  f_u10 = ((EXTRACT_MSB0_UINT (insn, 16, 8, 8)) << (2)); \
@


1.1.1.4
log
@import gdb-1999-08-09 snapshot
@
text
@a191 2
/* Instruction argument buffer.  */

d193 529
a721 218
  struct { /* no operands */
    int empty;
  } fmt_empty;
  struct { /*  */
    IADDR i_label9;
  } sfmt_brad;
  struct { /*  */
    UINT f_u8;
  } sfmt_int;
  struct { /*  */
    IADDR i_label12;
  } sfmt_call;
  struct { /*  */
    SI f_s10;
    unsigned char in_h_gr_15;
    unsigned char out_h_gr_15;
  } sfmt_addsp;
  struct { /*  */
    USI f_dir10;
    unsigned char in_h_gr_15;
    unsigned char out_h_gr_15;
  } sfmt_dmovr15pi;
  struct { /*  */
    UINT f_dir8;
    unsigned char in_h_gr_13;
    unsigned char out_h_gr_13;
  } sfmt_dmovr13pib;
  struct { /*  */
    USI f_dir9;
    unsigned char in_h_gr_13;
    unsigned char out_h_gr_13;
  } sfmt_dmovr13pih;
  struct { /*  */
    USI f_dir10;
    unsigned char in_h_gr_13;
    unsigned char out_h_gr_13;
  } sfmt_dmovr13pi;
  struct { /*  */
    SI* i_Ri;
    UINT f_Rs1;
    unsigned char in_Ri;
  } sfmt_mov2dr;
  struct { /*  */
    SI* i_Ri;
    UINT f_Rs1;
    unsigned char out_Ri;
  } sfmt_movdr;
  struct { /*  */
    UINT f_Rs2;
    unsigned char in_h_gr_15;
    unsigned char out_h_gr_15;
  } sfmt_ldr15dr;
  struct { /*  */
    SI* i_Ri;
    UINT f_i32;
    unsigned char out_Ri;
  } sfmt_ldi32;
  struct { /*  */
    SI* i_Ri;
    UINT f_i20;
    unsigned char out_Ri;
  } sfmt_ldi20;
  struct { /*  */
    SI* i_Ri;
    UINT f_i8;
    unsigned char out_Ri;
  } sfmt_ldi8;
  struct { /*  */
    SI* i_Ri;
    unsigned char in_Ri;
    unsigned char in_h_gr_15;
    unsigned char out_h_gr_15;
  } sfmt_str15gr;
  struct { /*  */
    SI* i_Ri;
    USI f_udisp6;
    unsigned char in_Ri;
    unsigned char in_h_gr_15;
  } sfmt_str15;
  struct { /*  */
    SI* i_Ri;
    INT f_disp8;
    unsigned char in_Ri;
    unsigned char in_h_gr_14;
  } sfmt_str14b;
  struct { /*  */
    SI* i_Ri;
    SI f_disp9;
    unsigned char in_Ri;
    unsigned char in_h_gr_14;
  } sfmt_str14h;
  struct { /*  */
    SI* i_Ri;
    SI f_disp10;
    unsigned char in_Ri;
    unsigned char in_h_gr_14;
  } sfmt_str14;
  struct { /*  */
    SI* i_Ri;
    USI f_udisp6;
    unsigned char in_h_gr_15;
    unsigned char out_Ri;
  } sfmt_ldr15;
  struct { /*  */
    SI* i_Ri;
    INT f_disp8;
    unsigned char in_h_gr_14;
    unsigned char out_Ri;
  } sfmt_ldr14ub;
  struct { /*  */
    SI* i_Ri;
    SI f_disp9;
    unsigned char in_h_gr_14;
    unsigned char out_Ri;
  } sfmt_ldr14uh;
  struct { /*  */
    SI* i_Ri;
    SI f_disp10;
    unsigned char in_h_gr_14;
    unsigned char out_Ri;
  } sfmt_ldr14;
  struct { /*  */
    SI* i_Ri;
    SI f_m4;
    unsigned char in_Ri;
    unsigned char out_Ri;
  } sfmt_add2;
  struct { /*  */
    SI* i_Ri;
    UINT f_u4;
    unsigned char in_Ri;
    unsigned char out_Ri;
  } sfmt_addi;
  struct { /*  */
    USI f_u10;
    unsigned char in_h_gr_14;
    unsigned char in_h_gr_15;
    unsigned char out_h_gr_14;
    unsigned char out_h_gr_15;
  } sfmt_enter;
  struct { /*  */
    SI* i_Ri;
    SI* i_Rj;
    unsigned char in_Ri;
    unsigned char in_Rj;
    unsigned char in_h_gr_13;
  } sfmt_str13;
  struct { /*  */
    SI* i_Ri;
    UINT f_Ri;
    unsigned char in_h_gr_15;
    unsigned char out_Ri;
    unsigned char out_h_gr_15;
  } sfmt_ldr15gr;
  struct { /*  */
    SI* i_Ri;
    SI* i_Rj;
    unsigned char in_Rj;
    unsigned char in_h_gr_13;
    unsigned char out_Ri;
  } sfmt_ldr13;
  struct { /*  */
    SI* i_Ri;
    SI* i_Rj;
    unsigned char in_Ri;
    unsigned char in_Rj;
    unsigned char out_Ri;
  } sfmt_add;
  struct { /*  */
    UINT f_reglist_hi_st;
    unsigned char in_h_gr_10;
    unsigned char in_h_gr_11;
    unsigned char in_h_gr_12;
    unsigned char in_h_gr_13;
    unsigned char in_h_gr_14;
    unsigned char in_h_gr_15;
    unsigned char in_h_gr_8;
    unsigned char in_h_gr_9;
    unsigned char out_h_gr_15;
  } sfmt_stm1;
  struct { /*  */
    UINT f_reglist_hi_ld;
    unsigned char in_h_gr_15;
    unsigned char out_h_gr_10;
    unsigned char out_h_gr_11;
    unsigned char out_h_gr_12;
    unsigned char out_h_gr_13;
    unsigned char out_h_gr_14;
    unsigned char out_h_gr_15;
    unsigned char out_h_gr_8;
    unsigned char out_h_gr_9;
  } sfmt_ldm1;
  struct { /*  */
    UINT f_reglist_low_st;
    unsigned char in_h_gr_0;
    unsigned char in_h_gr_1;
    unsigned char in_h_gr_15;
    unsigned char in_h_gr_2;
    unsigned char in_h_gr_3;
    unsigned char in_h_gr_4;
    unsigned char in_h_gr_5;
    unsigned char in_h_gr_6;
    unsigned char in_h_gr_7;
    unsigned char out_h_gr_15;
  } sfmt_stm0;
  struct { /*  */
    UINT f_reglist_low_ld;
    unsigned char in_h_gr_15;
    unsigned char out_h_gr_0;
    unsigned char out_h_gr_1;
    unsigned char out_h_gr_15;
    unsigned char out_h_gr_2;
    unsigned char out_h_gr_3;
    unsigned char out_h_gr_4;
    unsigned char out_h_gr_5;
    unsigned char out_h_gr_6;
    unsigned char out_h_gr_7;
  } sfmt_ldm0;
a742 1
    SCACHE *branch_target;
a753 3
  /* ??? Temporary hack for skip insns.  */
  char skip_count;
  char unused;
d774 1
d780 1
d794 1
d808 1
d822 1
d836 1
d850 1
d862 1
d885 1
d906 1
d918 1
d930 1
d942 1
d956 1
d970 1
d984 1
d996 1
d1008 1
d1020 1
d1032 1
d1044 1
d1056 1
d1079 1
d1102 1
d1125 1
d1137 1
d1149 1
d1161 1
d1173 1
d1185 1
@


